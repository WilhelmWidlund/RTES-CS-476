*_top_level.vhd connections

architecture rtl of DE1_SoC_top_level is

	component soc_system is
        port (
            clk_clk              : in  std_logic                     := 'X';             -- clk
            pin_buttons_export   : in  std_logic_vector(3 downto 0)  := (others => 'X'); -- export
            pout_custom_readdata : out std_logic_vector(31 downto 0);                    -- readdata
            reset_reset_n        : in  std_logic                     := 'X'              -- reset_n
        );
    end component soc_system;

begin
	
	u0 : component soc_system
		port map (
			-- TODO: 
			-- 1. Map pout_custom_readdata to some appropriate pins on the board
			-- 2. Map pin_buttons_export to some appropriate buttons on the board, perhaps KEY_N(4 downto 1) ?
			clk_clk              => CLOCK_50,              --         clk.clk
			pout_custom_readdata => GPIO_0_D(31 downto 0), -- pout_custom.readdata
			pin_buttons_export   => KEY_N(3 downto 0),   -- pin_buttons.export
			reset_reset_n        => SW(0)        --       reset.reset_
		);

end;

--------------------------------------------------------------------------------------------------------------------------------
main.c all content

/* Main file for lab 1: interrupt time measurements
 */

#include <stdio.h>
#include "system.h"
#include "io.h"
#include "altera_avalon_pio_regs.h"

#define COUNT_RZ		1
#define COUNT_Start		2
#define COUNT_Stop		3
#define COUNT_IntEn		4
#define COUNT_IntClr	5
#define COUNT_Target	6

#define	Count_1sec		0x2FAF080
#define arbval			0x00000000



void test_parallel_port()
{
	IOWR_32DIRECT(PARALLELPORT_0_BASE, 0, 0x1234abcd);
	alt_printf("ParallelPort0=%x\n", IORD_32DIRECT(PARALLELPORT_0_BASE, 0));
}

void test_counter()
{
	IOWR_32DIRECT(COUNTER_0_BASE, COUNT_Target, Count_1sec);
	IOWR_32DIRECT(COUNTER_0_BASE, COUNT_RZ, arbval);
	alt_printf("iCounter after reset=%x\n", IORD_32DIRECT(COUNTER_0_BASE,0));
	IOWR_32DIRECT(COUNTER_0_BASE, COUNT_Start, arbval);
	alt_printf("iCounter while running=%x\n", IORD_32DIRECT(COUNTER_0_BASE,0));
	IOWR_32DIRECT(COUNTER_0_BASE, COUNT_Stop, arbval);
	alt_printf("iCounter, first read after stop=%x\n", IORD_32DIRECT(COUNTER_0_BASE,0));
	alt_printf("iCounter, second read after stop=%x\n", IORD_32DIRECT(COUNTER_0_BASE,0));
	IOWR_32DIRECT(COUNTER_0_BASE, COUNT_Start, arbval);
	alt_printf("iCounter, first read after restarting=%x\n", IORD_32DIRECT(COUNTER_0_BASE,0));
	alt_printf("iCounter, second read after restarting=%x\n", IORD_32DIRECT(COUNTER_0_BASE,0));
	IOWR_32DIRECT(COUNTER_0_BASE, COUNT_Stop, arbval);
}

int main()
{
	test_parallel_port();
	test_counter();
	return 0;
}

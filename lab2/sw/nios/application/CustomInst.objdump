
CustomInst.elf:     file format elf32-littlenios2
CustomInst.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00040244

Program Header:
    LOAD off    0x00001000 vaddr 0x00040000 paddr 0x00040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00040020 paddr 0x00040020 align 2**12
         filesz 0x000105ac memsz 0x000105ac flags r-x
    LOAD off    0x000115cc vaddr 0x000505cc paddr 0x000520c0 align 2**12
         filesz 0x00001af4 memsz 0x00001af4 flags rw-
    LOAD off    0x00013bb4 vaddr 0x00053bb4 paddr 0x00053bb4 align 2**12
         filesz 0x00000000 memsz 0x000020a0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00040000  00040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00040020  00040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000fd84  00040244  00040244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000604  0004ffc8  0004ffc8  00010fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001af4  000505cc  000520c0  000115cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000020a0  00053bb4  00053bb4  00013bb4  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00055c54  00055c54  000130c0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000130c0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000f38  00000000  00000000  000130e8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000240bc  00000000  00000000  00014020  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000935e  00000000  00000000  000380dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000b876  00000000  00000000  0004143a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000230c  00000000  00000000  0004ccb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003999  00000000  00000000  0004efbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000179b5  00000000  00000000  00052955  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0006a30c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000018d8  00000000  00000000  0006a340  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006ef22  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0006ef25  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0006ef31  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006ef32  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0006ef33  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0006ef3e  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0006ef49  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000a  00000000  00000000  0006ef54  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000017  00000000  00000000  0006ef5e  2**0
                  CONTENTS, READONLY
 26 .jdi          0000595c  00000000  00000000  0006ef75  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0003aac3  00000000  00000000  000748d1  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00040000 l    d  .entry	00000000 .entry
00040020 l    d  .exceptions	00000000 .exceptions
00040244 l    d  .text	00000000 .text
0004ffc8 l    d  .rodata	00000000 .rodata
000505cc l    d  .rwdata	00000000 .rwdata
00053bb4 l    d  .bss	00000000 .bss
00055c54 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/RTES/lab2/sw/nios/CustomInst_bsp//obj/HAL/src/crt0.o
0004028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_load.c
000408c4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00040c94 l     F .text	00000034 alt_dev_reg
000505cc l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00040f7c l     F .text	0000020c altera_avalon_jtag_uart_irq
00041188 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_performance_counter.c
00000000 l    df *ABS*	00000000 perf_print_formatted_report.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00041cfc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00041e08 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00041e34 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
000422a8 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000423e8 l     F .text	0000003c alt_get_errno
00042424 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
000517d4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0005034a l     O .rodata	00000010 zeroes.4404
00045260 l     F .text	000000bc __sbprintf
0005035a l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 dtoa.c
00045860 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00047390 l     F .text	00000008 __fp_unlock
000473a4 l     F .text	0000019c __sinit.part.1
00047540 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
00051c18 l     O .rwdata	00000020 lc_ctype_charset
00051bf8 l     O .rwdata	00000020 lc_message_charset
00051c38 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00050388 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00049c78 l     F .text	000000fc __sprint_r.part.0
000504bc l     O .rodata	00000010 blanks.4348
000504ac l     O .rodata	00000010 zeroes.4349
0004b204 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0004f988 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0004fa74 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
0004fb54 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0004fcac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sbrk.c
000520bc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0004fe94 l     F .text	0000003c alt_get_errno
00053bcc g     O .bss	00000004 alt_instruction_exception_handler
00049820 g     F .text	00000074 _mprec_log10
0004990c g     F .text	0000008c __any_on
0004bc5c g     F .text	00000054 _isatty_r
00050394 g     O .rodata	00000028 __mprec_tinytens
000409b0 g     F .text	0000007c alt_main
00055b54 g     O .bss	00000100 alt_irq
0004bcb0 g     F .text	00000060 _lseek_r
000520c0 g       *ABS*	00000000 __flash_rwdata_start
0004e480 g     F .text	00000088 .hidden __eqdf2
00055c54 g       *ABS*	00000000 __alt_heap_start
00042e10 g     F .text	0000003c printf
0004c430 g     F .text	0000009c _wcrtomb_r
00049b38 g     F .text	0000005c __sseek
000476e0 g     F .text	00000010 __sinit
00053c14 g     O .bss	00000fa0 out_1000
0004192c g     F .text	00000024 alt_get_cpu_freq
0004531c g     F .text	00000140 __swbuf_r
00047cec g     F .text	0000007c _setlocale_r
00047548 g     F .text	00000068 __sfmoreglue
0004fc88 g     F .text	00000024 __malloc_unlock
00040398 g     F .text	000000ac software_1000
0004bd10 g     F .text	0000015c memmove
00041950 g     F .text	00000280 perf_print_formatted_report
000476c8 g     F .text	00000018 _cleanup
0004899c g     F .text	000000a8 _Balloc
0004e508 g     F .text	000000dc .hidden __gtdf2
00042844 g     F .text	00000024 altera_nios2_gen2_irq_init
00040000 g     F .entry	0000001c __reset
00040020 g       *ABS*	00000000 __flash_exceptions_start
0004b744 g     F .text	0000005c _fstat_r
00053bd0 g     O .bss	00000004 errno
00049ab4 g     F .text	00000008 __seofread
00053bb8 g     O .bss	00000004 alt_argv
0005a078 g       *ABS*	00000000 _gp
00051654 g     O .rwdata	00000180 alt_fd_list
00042868 g     F .text	00000090 alt_find_dev
00042c98 g     F .text	00000148 memcpy
00047398 g     F .text	0000000c _cleanup_r
0004f76c g     F .text	000000dc .hidden __floatsidf
0004236c g     F .text	0000007c alt_io_redirect
0004e5e4 g     F .text	000000f4 .hidden __ltdf2
0004ffc8 g       *ABS*	00000000 __DTOR_END__
000405c4 g     F .text	000000c0 test_method_once
00042b34 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00049998 g     F .text	00000074 __fpclassifyd
0004977c g     F .text	000000a4 __ratio
0004b1e8 g     F .text	0000001c __vfiprintf_internal
00041380 g     F .text	0000021c altera_avalon_jtag_uart_read
00042de0 g     F .text	00000030 _printf_r
00040000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0004d230 g     F .text	00000064 .hidden __udivsi3
0004fab0 g     F .text	000000a4 isatty
000503e4 g     O .rodata	000000c8 __mprec_tens
00047d68 g     F .text	0000000c __locale_charset
00042aa4 g     F .text	00000090 alt_icache_flush
00053be8 g     O .bss	00000004 __malloc_top_pad
000418c8 g     F .text	00000040 perf_get_num_starts
000520ac g     O .rwdata	00000004 __mb_cur_max
00047d98 g     F .text	0000000c _localeconv_r
0004b7a0 g     F .text	000004bc __sfvwrite_r
00048da8 g     F .text	0000003c __i2b
00049a0c g     F .text	00000054 _sbrk_r
0004be6c g     F .text	00000060 _read_r
00052090 g     O .rwdata	00000004 alt_max_fd
00040444 g     F .text	000000a0 custom_1000
0004b438 g     F .text	000000f0 _fclose_r
00047360 g     F .text	00000030 fflush
00053be4 g     O .bss	00000004 __malloc_max_sbrked_mem
0004d2ec g     F .text	000008ac .hidden __adddf3
00049524 g     F .text	0000010c __b2d
0004cc00 g     F .text	00000538 .hidden __umoddi3
0004fb90 g     F .text	000000d4 lseek
000520a4 g     O .rwdata	00000004 _global_impure_ptr
0004becc g     F .text	00000564 _realloc_r
00055c54 g       *ABS*	00000000 __bss_end
000421b8 g     F .text	000000f0 alt_iic_isr_register
0004273c g     F .text	00000108 alt_tick
0004c688 g     F .text	00000578 .hidden __udivdi3
0004b6a0 g     F .text	00000024 _fputwc_r
000503bc g     O .rodata	00000028 __mprec_bigtens
00048b8c g     F .text	00000104 __s2b
0004f848 g     F .text	000000a8 .hidden __floatunsidf
00049264 g     F .text	00000060 __mcmp
00047700 g     F .text	00000018 __fp_lock_all
0004216c g     F .text	0000004c alt_ic_irq_enabled
000426a0 g     F .text	0000009c alt_alarm_stop
00053bc0 g     O .bss	00000004 alt_irq_active
000400fc g     F .exceptions	000000d4 alt_irq_handler
0005162c g     O .rwdata	00000028 alt_dev_null
0004087c g     F .text	00000048 alt_dcache_flush_all
00048c90 g     F .text	00000068 __hi0bits
0004f6ec g     F .text	00000080 .hidden __fixdfsi
000520c0 g       *ABS*	00000000 __ram_rwdata_end
00052088 g     O .rwdata	00000008 alt_dev_list
0004fed0 g     F .text	000000f8 write
00042e4c g     F .text	000000a0 _putc_r
000505cc g       *ABS*	00000000 __ram_rodata_end
0004f9c4 g     F .text	000000b0 fstat
0004e5e4 g     F .text	000000f4 .hidden __ledf2
00048fdc g     F .text	00000140 __pow5mult
00049d8c g     F .text	0000145c ___vfiprintf_internal_r
00053bdc g     O .bss	00000004 __nlocale_changed
0004d294 g     F .text	00000058 .hidden __umodsi3
00055c54 g       *ABS*	00000000 end
00040ebc g     F .text	000000c0 altera_avalon_jtag_uart_init
000401d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0004ffc8 g       *ABS*	00000000 __CTOR_LIST__
00080000 g       *ABS*	00000000 __alt_stack_pointer
0004f8f0 g     F .text	00000064 .hidden __clzsi2
0004159c g     F .text	00000224 altera_avalon_jtag_uart_write
000476f0 g     F .text	00000004 __sfp_lock_acquire
00048790 g     F .text	000000e4 memchr
0004304c g     F .text	000021f8 ___vfprintf_internal_r
00047854 g     F .text	00000310 _free_r
00040a2c g     F .text	0000022c alt_printf
00047d74 g     F .text	00000010 __locale_mb_cur_max
000456e0 g     F .text	00000180 __call_exitprocs
00052078 g     O .rwdata	00000004 test
00053bd8 g     O .bss	00000004 __mlocale_changed
000520b0 g     O .rwdata	00000004 __malloc_sbrk_base
00040244 g     F .text	0000004c _start
00053bc4 g     O .bss	00000004 _alt_tick_rate
0004c618 g     F .text	00000070 .hidden __floatundidf
0004911c g     F .text	00000148 __lshift
00053bc8 g     O .bss	00000004 _alt_nticks
0004fce8 g     F .text	000000fc read
00040d00 g     F .text	00000058 alt_sys_init
000455c8 g     F .text	00000118 __register_exitproc
00048de4 g     F .text	000001f8 __multiply
00041228 g     F .text	00000068 altera_avalon_jtag_uart_close
000505cc g       *ABS*	00000000 __ram_rwdata_start
0004ffc8 g       *ABS*	00000000 __ram_rodata_start
00053bec g     O .bss	00000028 __malloc_current_mallinfo
00049630 g     F .text	0000014c __d2b
00040d58 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00042a00 g     F .text	000000a4 alt_get_fd
0004b320 g     F .text	00000054 _close_r
000417c0 g     F .text	000000bc perf_get_section_time
00042c1c g     F .text	0000007c memcmp
00040e18 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00055c54 g       *ABS*	00000000 __alt_stack_base
00040e68 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00045474 g     F .text	00000154 __swsetup_r
0004db98 g     F .text	000008e8 .hidden __divdf3
000475b0 g     F .text	00000118 __sfp
00049894 g     F .text	00000078 __copybits
0004187c g     F .text	0000004c perf_get_total_time
00051c70 g     O .rwdata	00000408 __malloc_av_
000476fc g     F .text	00000004 __sinit_lock_release
0004e6d8 g     F .text	00000718 .hidden __muldf3
00049a60 g     F .text	00000054 __sread
000428f8 g     F .text	00000108 alt_find_file
00041e70 g     F .text	000000a4 alt_dev_llist_insert
0004fc64 g     F .text	00000024 __malloc_lock
0004fde4 g     F .text	000000b0 sbrk
00047304 g     F .text	0000005c _fflush_r
0004b374 g     F .text	000000c4 _calloc_r
00053bb4 g       *ABS*	00000000 __bss_start
00048874 g     F .text	00000128 memset
00040790 g     F .text	000000ec main
00053bbc g     O .bss	00000004 alt_envp
00053be0 g     O .bss	00000004 __malloc_max_total_mem
00040db8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0004545c g     F .text	00000018 __swbuf
00049b94 g     F .text	00000008 __sclose
00080000 g       *ABS*	00000000 __alt_heap_limit
0004b528 g     F .text	00000014 fclose
00045a60 g     F .text	00001688 _dtoa_r
00047f84 g     F .text	0000080c _malloc_r
0004c58c g     F .text	00000030 __ascii_wctomb
00052094 g     O .rwdata	00000004 alt_errno
00047b64 g     F .text	000000c4 _fwalk
00042eec g     F .text	000000c8 putc
0004d138 g     F .text	00000084 .hidden __divsi3
00047730 g     F .text	00000124 _malloc_trim_r
00040290 g     F .text	0000006c init_tables
0004ffc8 g       *ABS*	00000000 __CTOR_END__
00040684 g     F .text	0000010c test_implementations
00049b9c g     F .text	000000dc strcmp
0004ffc8 g       *ABS*	00000000 __flash_rodata_start
0004ffc8 g       *ABS*	00000000 __DTOR_LIST__
0004e480 g     F .text	00000088 .hidden __nedf2
000402fc g     F .text	0000009c software_custom_inst
00040cc8 g     F .text	00000038 alt_irq_init
0004263c g     F .text	00000064 alt_release_fd
000504cc g     O .rodata	00000100 .hidden __clz_tab
00053bd4 g     O .bss	00000004 _PathLocale
00042bd0 g     F .text	00000014 atexit
0004b2c0 g     F .text	00000060 _write_r
00047da4 g     F .text	00000018 setlocale
000520a8 g     O .rwdata	00000004 _impure_ptr
00053bb4 g     O .bss	00000004 alt_argc
000470e8 g     F .text	0000021c __sflush_r
00041f74 g     F .text	00000060 _do_dtors
00047d90 g     F .text	00000008 __locale_cjk_lang
00040020 g       .exceptions	00000000 alt_irq_entry
000494c0 g     F .text	00000064 __ulp
00047718 g     F .text	00000018 __fp_unlock_all
00052080 g     O .rwdata	00000008 alt_fs_list
00040020 g       *ABS*	00000000 __ram_exceptions_start
00047dbc g     F .text	0000000c localeconv
000404e4 g     F .text	000000e0 use_accelerator
00042008 g     F .text	00000050 alt_ic_isr_register
000520c0 g       *ABS*	00000000 _edata
00055c54 g       *ABS*	00000000 _end
0004b53c g     F .text	00000164 __fputwc
00040244 g       *ABS*	00000000 __ram_exceptions_end
00041290 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
000420e0 g     F .text	0000008c alt_ic_irq_disable
00049abc g     F .text	0000007c __swrite
000520b4 g     O .rwdata	00000004 __malloc_trim_threshold
00041908 g     F .text	00000024 alt_get_performance_counter_base
00047d84 g     F .text	0000000c __locale_msgcharset
00042be4 g     F .text	00000038 exit
00047c28 g     F .text	000000c4 _fwalk_reent
000492c4 g     F .text	000001fc __mdiff
0004d1bc g     F .text	00000074 .hidden __modsi3
00080000 g       *ABS*	00000000 __alt_data_end
00040020 g     F .exceptions	00000000 alt_exception
000476f4 g     F .text	00000004 __sfp_lock_release
0004f954 g     F .text	00000034 _exit
00041bd0 g     F .text	0000012c alt_alarm_start
00047dc8 g     F .text	000001bc __smakebuf_r
00042fb4 g     F .text	00000098 strlen
000424e8 g     F .text	00000154 open
0004e508 g     F .text	000000dc .hidden __gedf2
00040c58 g     F .text	0000003c alt_putchar
000520b8 g     O .rwdata	00000004 __wctomb
00049d74 g     F .text	00000018 __sprint_r
00041fd4 g     F .text	00000034 alt_icache_flush_all
00052098 g     O .rwdata	00000004 alt_priority_mask
00042058 g     F .text	00000088 alt_ic_irq_enable
00045244 g     F .text	0000001c __vfprintf_internal
0004c5bc g     F .text	0000005c _wctomb_r
0004edf0 g     F .text	000008fc .hidden __subdf3
00048cf8 g     F .text	000000b0 __lo0bits
0005209c g     O .rwdata	00000008 alt_alarm_list
00041f14 g     F .text	00000060 _do_ctors
00054bb4 g     O .bss	00000fa0 in_1000
0004c4cc g     F .text	000000c0 wcrtomb
00041d38 g     F .text	000000d0 close
0004092c g     F .text	00000084 alt_load
0005207c g     O .rwdata	00000004 truth
0004b6c4 g     F .text	00000080 fputwc
000476f8 g     F .text	00000004 __sinit_lock_acquire
00048a6c g     F .text	00000120 __multadd
00048a44 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00040000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   40000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   40004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   40008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   4000c:	00bffd16 	blt	zero,r2,40004 <__alt_data_end+0xfffc0004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   40010:	00400134 	movhi	at,4
    ori r1, r1, %lo(_start)
   40014:	08409114 	ori	at,at,580
    jmp r1
   40018:	0800683a 	jmp	at
   4001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x40000>

Disassembly of section .exceptions:

00040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   40020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   40024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   40028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   4002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   40030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   40034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   40038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   4003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   40040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   40044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   40048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   4004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   40050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   40054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   40058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   4005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   40060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   40064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   40068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   4006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   40070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   40074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   40078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   4007c:	10000326 	beq	r2,zero,4008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   40080:	20000226 	beq	r4,zero,4008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   40084:	00400fc0 	call	400fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   40088:	00000706 	br	400a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   4008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   40090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   40094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   40098:	00401d00 	call	401d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   4009c:	1000021e 	bne	r2,zero,400a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   400a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   400a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   400a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   400ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   400b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   400b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   400b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   400bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   400c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   400c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   400c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   400cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   400d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   400d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   400d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   400dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   400e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   400e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   400e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   400ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   400f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   400f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   400f8:	ef80083a 	eret

000400fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   400fc:	defff904 	addi	sp,sp,-28
   40100:	dfc00615 	stw	ra,24(sp)
   40104:	df000515 	stw	fp,20(sp)
   40108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   4010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   40110:	0005313a 	rdctl	r2,ipending
   40114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   40118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   4011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   40120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   40124:	00800044 	movi	r2,1
   40128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   4012c:	e0fffb17 	ldw	r3,-20(fp)
   40130:	e0bffc17 	ldw	r2,-16(fp)
   40134:	1884703a 	and	r2,r3,r2
   40138:	10001426 	beq	r2,zero,4018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   4013c:	00800174 	movhi	r2,5
   40140:	1096d504 	addi	r2,r2,23380
   40144:	e0fffd17 	ldw	r3,-12(fp)
   40148:	180690fa 	slli	r3,r3,3
   4014c:	10c5883a 	add	r2,r2,r3
   40150:	10c00017 	ldw	r3,0(r2)
   40154:	00800174 	movhi	r2,5
   40158:	1096d504 	addi	r2,r2,23380
   4015c:	e13ffd17 	ldw	r4,-12(fp)
   40160:	200890fa 	slli	r4,r4,3
   40164:	1105883a 	add	r2,r2,r4
   40168:	10800104 	addi	r2,r2,4
   4016c:	10800017 	ldw	r2,0(r2)
   40170:	1009883a 	mov	r4,r2
   40174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   40178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   4017c:	0005313a 	rdctl	r2,ipending
   40180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   40184:	e0bfff17 	ldw	r2,-4(fp)
   40188:	00000706 	br	401a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   4018c:	e0bffc17 	ldw	r2,-16(fp)
   40190:	1085883a 	add	r2,r2,r2
   40194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   40198:	e0bffd17 	ldw	r2,-12(fp)
   4019c:	10800044 	addi	r2,r2,1
   401a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   401a4:	003fe106 	br	4012c <__alt_data_end+0xfffc012c>

    active = alt_irq_pending ();
   401a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   401ac:	e0bffb17 	ldw	r2,-20(fp)
   401b0:	103fdb1e 	bne	r2,zero,40120 <__alt_data_end+0xfffc0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   401b4:	0001883a 	nop
}
   401b8:	0001883a 	nop
   401bc:	e037883a 	mov	sp,fp
   401c0:	dfc00117 	ldw	ra,4(sp)
   401c4:	df000017 	ldw	fp,0(sp)
   401c8:	dec00204 	addi	sp,sp,8
   401cc:	f800283a 	ret

000401d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   401d0:	defffb04 	addi	sp,sp,-20
   401d4:	dfc00415 	stw	ra,16(sp)
   401d8:	df000315 	stw	fp,12(sp)
   401dc:	df000304 	addi	fp,sp,12
   401e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   401e4:	000531fa 	rdctl	r2,exception
   401e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   401ec:	e0bffd17 	ldw	r2,-12(fp)
   401f0:	10801f0c 	andi	r2,r2,124
   401f4:	1004d0ba 	srli	r2,r2,2
   401f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   401fc:	0005333a 	rdctl	r2,badaddr
   40200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   40204:	d0a6d517 	ldw	r2,-25772(gp)
   40208:	10000726 	beq	r2,zero,40228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   4020c:	d0a6d517 	ldw	r2,-25772(gp)
   40210:	e0fffd17 	ldw	r3,-12(fp)
   40214:	e1bffe17 	ldw	r6,-8(fp)
   40218:	e17fff17 	ldw	r5,-4(fp)
   4021c:	1809883a 	mov	r4,r3
   40220:	103ee83a 	callr	r2
   40224:	00000206 	br	40230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   40228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   4022c:	0005883a 	mov	r2,zero
}
   40230:	e037883a 	mov	sp,fp
   40234:	dfc00117 	ldw	ra,4(sp)
   40238:	df000017 	ldw	fp,0(sp)
   4023c:	dec00204 	addi	sp,sp,8
   40240:	f800283a 	ret

Disassembly of section .text:

00040244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   40244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   40248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   4024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   40250:	00bffd16 	blt	zero,r2,40248 <__alt_data_end+0xfffc0248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   40254:	06c00234 	movhi	sp,8
    ori sp, sp, %lo(__alt_stack_pointer)
   40258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   4025c:	06800174 	movhi	gp,5
    ori gp, gp, %lo(_gp)
   40260:	d6a81e14 	ori	gp,gp,41080
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   40264:	00800174 	movhi	r2,5
    ori r2, r2, %lo(__bss_start)
   40268:	108eed14 	ori	r2,r2,15284

    movhi r3, %hi(__bss_end)
   4026c:	00c00174 	movhi	r3,5
    ori r3, r3, %lo(__bss_end)
   40270:	18d71514 	ori	r3,r3,23636

    beq r2, r3, 1f
   40274:	10c00326 	beq	r2,r3,40284 <_start+0x40>

0:
    stw zero, (r2)
   40278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   4027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   40280:	10fffd36 	bltu	r2,r3,40278 <__alt_data_end+0xfffc0278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   40284:	004092c0 	call	4092c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   40288:	00409b00 	call	409b0 <alt_main>

0004028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   4028c:	003fff06 	br	4028c <__alt_data_end+0xfffc028c>

00040290 <init_tables>:
//#define ACC_ADDR_BASE		ACCELERATOR_0_BASE
// V2
#define ACC_ADDR_BASE		ACCELERATOR_V2_0_BASE

void init_tables()
{
   40290:	defffd04 	addi	sp,sp,-12
   40294:	dfc00215 	stw	ra,8(sp)
   40298:	df000115 	stw	fp,4(sp)
   4029c:	df000104 	addi	fp,sp,4
	int i;
	for(i=0; i<1000; i++)
   402a0:	e03fff15 	stw	zero,-4(fp)
   402a4:	00000b06 	br	402d4 <init_tables+0x44>
	{
		in_1000[i] = test;
   402a8:	d1200017 	ldw	r4,-32768(gp)
   402ac:	00800174 	movhi	r2,5
   402b0:	1092ed04 	addi	r2,r2,19380
   402b4:	e0ffff17 	ldw	r3,-4(fp)
   402b8:	18c7883a 	add	r3,r3,r3
   402bc:	18c7883a 	add	r3,r3,r3
   402c0:	10c5883a 	add	r2,r2,r3
   402c4:	11000015 	stw	r4,0(r2)
#define ACC_ADDR_BASE		ACCELERATOR_V2_0_BASE

void init_tables()
{
	int i;
	for(i=0; i<1000; i++)
   402c8:	e0bfff17 	ldw	r2,-4(fp)
   402cc:	10800044 	addi	r2,r2,1
   402d0:	e0bfff15 	stw	r2,-4(fp)
   402d4:	e0bfff17 	ldw	r2,-4(fp)
   402d8:	1080fa10 	cmplti	r2,r2,1000
   402dc:	103ff21e 	bne	r2,zero,402a8 <__alt_data_end+0xfffc02a8>
	{
		in_1000[i] = test;
	}
	alt_dcache_flush_all();
   402e0:	004087c0 	call	4087c <alt_dcache_flush_all>
}
   402e4:	0001883a 	nop
   402e8:	e037883a 	mov	sp,fp
   402ec:	dfc00117 	ldw	ra,4(sp)
   402f0:	df000017 	ldw	fp,0(sp)
   402f4:	dec00204 	addi	sp,sp,8
   402f8:	f800283a 	ret

000402fc <software_custom_inst>:

uint32_t software_custom_inst(uint32_t input)
{
   402fc:	defffb04 	addi	sp,sp,-20
   40300:	df000415 	stw	fp,16(sp)
   40304:	df000404 	addi	fp,sp,16
   40308:	e13fff15 	stw	r4,-4(fp)
	uint32_t output;
	output = (input<<24) & 0xff000000;
   4030c:	e0bfff17 	ldw	r2,-4(fp)
   40310:	1004963a 	slli	r2,r2,24
   40314:	e0bffc15 	stw	r2,-16(fp)
	output = output + ((input & 0xff000000)>>24);
   40318:	e0bfff17 	ldw	r2,-4(fp)
   4031c:	1004d63a 	srli	r2,r2,24
   40320:	e0fffc17 	ldw	r3,-16(fp)
   40324:	1885883a 	add	r2,r3,r2
   40328:	e0bffc15 	stw	r2,-16(fp)
	uint32_t sought_bit;
	int i;
	for(i=8; i<24; i++)
   4032c:	00800204 	movi	r2,8
   40330:	e0bffd15 	stw	r2,-12(fp)
   40334:	00001006 	br	40378 <software_custom_inst+0x7c>
	{
		sought_bit = (input<<i)&0x80000000;
   40338:	e0ffff17 	ldw	r3,-4(fp)
   4033c:	e0bffd17 	ldw	r2,-12(fp)
   40340:	1884983a 	sll	r2,r3,r2
   40344:	10a0002c 	andhi	r2,r2,32768
   40348:	e0bffe15 	stw	r2,-8(fp)
		output = output + (sought_bit>>(31 - i));
   4034c:	00c007c4 	movi	r3,31
   40350:	e0bffd17 	ldw	r2,-12(fp)
   40354:	1885c83a 	sub	r2,r3,r2
   40358:	e0fffe17 	ldw	r3,-8(fp)
   4035c:	1884d83a 	srl	r2,r3,r2
   40360:	e0fffc17 	ldw	r3,-16(fp)
   40364:	1885883a 	add	r2,r3,r2
   40368:	e0bffc15 	stw	r2,-16(fp)
	uint32_t output;
	output = (input<<24) & 0xff000000;
	output = output + ((input & 0xff000000)>>24);
	uint32_t sought_bit;
	int i;
	for(i=8; i<24; i++)
   4036c:	e0bffd17 	ldw	r2,-12(fp)
   40370:	10800044 	addi	r2,r2,1
   40374:	e0bffd15 	stw	r2,-12(fp)
   40378:	e0bffd17 	ldw	r2,-12(fp)
   4037c:	10800610 	cmplti	r2,r2,24
   40380:	103fed1e 	bne	r2,zero,40338 <__alt_data_end+0xfffc0338>
	{
		sought_bit = (input<<i)&0x80000000;
		output = output + (sought_bit>>(31 - i));
	}
	return output;
   40384:	e0bffc17 	ldw	r2,-16(fp)
}
   40388:	e037883a 	mov	sp,fp
   4038c:	df000017 	ldw	fp,0(sp)
   40390:	dec00104 	addi	sp,sp,4
   40394:	f800283a 	ret

00040398 <software_1000>:

void software_1000()
{
   40398:	defffd04 	addi	sp,sp,-12
   4039c:	dfc00215 	stw	ra,8(sp)
   403a0:	df000115 	stw	fp,4(sp)
   403a4:	df000104 	addi	fp,sp,4
	// Start performance counter
	PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);
   403a8:	0007883a 	mov	r3,zero
   403ac:	00800234 	movhi	r2,8
   403b0:	10840504 	addi	r2,r2,4116
   403b4:	10c00035 	stwio	r3,0(r2)

	int i;
	for(i=0; i<240; i++)
   403b8:	e03fff15 	stw	zero,-4(fp)
   403bc:	00001406 	br	40410 <software_1000+0x78>
	{
		out_1000[i] = software_custom_inst(in_1000[i]);
   403c0:	00800174 	movhi	r2,5
   403c4:	1092ed04 	addi	r2,r2,19380
   403c8:	e0ffff17 	ldw	r3,-4(fp)
   403cc:	18c7883a 	add	r3,r3,r3
   403d0:	18c7883a 	add	r3,r3,r3
   403d4:	10c5883a 	add	r2,r2,r3
   403d8:	10800017 	ldw	r2,0(r2)
   403dc:	1009883a 	mov	r4,r2
   403e0:	00402fc0 	call	402fc <software_custom_inst>
   403e4:	1009883a 	mov	r4,r2
   403e8:	00800174 	movhi	r2,5
   403ec:	108f0504 	addi	r2,r2,15380
   403f0:	e0ffff17 	ldw	r3,-4(fp)
   403f4:	18c7883a 	add	r3,r3,r3
   403f8:	18c7883a 	add	r3,r3,r3
   403fc:	10c5883a 	add	r2,r2,r3
   40400:	11000015 	stw	r4,0(r2)
{
	// Start performance counter
	PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);

	int i;
	for(i=0; i<240; i++)
   40404:	e0bfff17 	ldw	r2,-4(fp)
   40408:	10800044 	addi	r2,r2,1
   4040c:	e0bfff15 	stw	r2,-4(fp)
   40410:	e0bfff17 	ldw	r2,-4(fp)
   40414:	10803c10 	cmplti	r2,r2,240
   40418:	103fe91e 	bne	r2,zero,403c0 <__alt_data_end+0xfffc03c0>
	{
		out_1000[i] = software_custom_inst(in_1000[i]);
	}

	// Stop performance counter
	PERF_END(PERFORMANCE_COUNTER_0_BASE, 1);
   4041c:	0007883a 	mov	r3,zero
   40420:	00800234 	movhi	r2,8
   40424:	10840404 	addi	r2,r2,4112
   40428:	10c00035 	stwio	r3,0(r2)
}
   4042c:	0001883a 	nop
   40430:	e037883a 	mov	sp,fp
   40434:	dfc00117 	ldw	ra,4(sp)
   40438:	df000017 	ldw	fp,0(sp)
   4043c:	dec00204 	addi	sp,sp,8
   40440:	f800283a 	ret

00040444 <custom_1000>:

void custom_1000()
{
   40444:	defffe04 	addi	sp,sp,-8
   40448:	df000115 	stw	fp,4(sp)
   4044c:	df000104 	addi	fp,sp,4
	// Start performance counter
	PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 2);
   40450:	0007883a 	mov	r3,zero
   40454:	00800234 	movhi	r2,8
   40458:	10840904 	addi	r2,r2,4132
   4045c:	10c00035 	stwio	r3,0(r2)

	int i;
	for(i=0; i<240; i++)
   40460:	e03fff15 	stw	zero,-4(fp)
   40464:	00001306 	br	404b4 <custom_1000+0x70>
	{
		out_1000[i] = ALT_CI_CUSTOM_INSTRUCTION_0(in_1000[i]);
   40468:	00800174 	movhi	r2,5
   4046c:	1092ed04 	addi	r2,r2,19380
   40470:	e0ffff17 	ldw	r3,-4(fp)
   40474:	18c7883a 	add	r3,r3,r3
   40478:	18c7883a 	add	r3,r3,r3
   4047c:	10c5883a 	add	r2,r2,r3
   40480:	10800017 	ldw	r2,0(r2)
   40484:	1005c032 	custom	0,r2,r2,zero
   40488:	1009883a 	mov	r4,r2
   4048c:	00800174 	movhi	r2,5
   40490:	108f0504 	addi	r2,r2,15380
   40494:	e0ffff17 	ldw	r3,-4(fp)
   40498:	18c7883a 	add	r3,r3,r3
   4049c:	18c7883a 	add	r3,r3,r3
   404a0:	10c5883a 	add	r2,r2,r3
   404a4:	11000015 	stw	r4,0(r2)
{
	// Start performance counter
	PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 2);

	int i;
	for(i=0; i<240; i++)
   404a8:	e0bfff17 	ldw	r2,-4(fp)
   404ac:	10800044 	addi	r2,r2,1
   404b0:	e0bfff15 	stw	r2,-4(fp)
   404b4:	e0bfff17 	ldw	r2,-4(fp)
   404b8:	10803c10 	cmplti	r2,r2,240
   404bc:	103fea1e 	bne	r2,zero,40468 <__alt_data_end+0xfffc0468>
	{
		out_1000[i] = ALT_CI_CUSTOM_INSTRUCTION_0(in_1000[i]);
	}

	// Stop performance counter
	PERF_END(PERFORMANCE_COUNTER_0_BASE, 2);
   404c0:	0007883a 	mov	r3,zero
   404c4:	00800234 	movhi	r2,8
   404c8:	10840804 	addi	r2,r2,4128
   404cc:	10c00035 	stwio	r3,0(r2)
}
   404d0:	0001883a 	nop
   404d4:	e037883a 	mov	sp,fp
   404d8:	df000017 	ldw	fp,0(sp)
   404dc:	dec00104 	addi	sp,sp,4
   404e0:	f800283a 	ret

000404e4 <use_accelerator>:

void use_accelerator(uint32_t in_addr, uint32_t out_addr, uint32_t length)
{
   404e4:	defffa04 	addi	sp,sp,-24
   404e8:	dfc00515 	stw	ra,20(sp)
   404ec:	df000415 	stw	fp,16(sp)
   404f0:	df000404 	addi	fp,sp,16
   404f4:	e13ffd15 	stw	r4,-12(fp)
   404f8:	e17ffe15 	stw	r5,-8(fp)
   404fc:	e1bfff15 	stw	r6,-4(fp)
	// Check if the device is already working
	uint32_t status = IORD_32DIRECT(ACC_ADDR_BASE, 0x0);
   40500:	00842404 	movi	r2,4240
   40504:	10800037 	ldwio	r2,0(r2)
   40508:	e0bffc15 	stw	r2,-16(fp)

	if(status == ACC_BUSY)
   4050c:	e0bffc17 	ldw	r2,-16(fp)
   40510:	10800098 	cmpnei	r2,r2,2
   40514:	1000041e 	bne	r2,zero,40528 <use_accelerator+0x44>
	{
		alt_printf("Busy\n");
   40518:	01000174 	movhi	r4,5
   4051c:	213ff204 	addi	r4,r4,-56
   40520:	0040a2c0 	call	40a2c <alt_printf>
		return;
   40524:	00002206 	br	405b0 <use_accelerator+0xcc>
	}
	alt_printf("Not busy\n");
   40528:	01000174 	movhi	r4,5
   4052c:	213ff404 	addi	r4,r4,-48
   40530:	0040a2c0 	call	40a2c <alt_printf>

	// Start performance counter
	PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 3);
   40534:	0007883a 	mov	r3,zero
   40538:	00800234 	movhi	r2,8
   4053c:	10840d04 	addi	r2,r2,4148
   40540:	10c00035 	stwio	r3,0(r2)
	alt_printf("Writing arguments\n");
   40544:	01000174 	movhi	r4,5
   40548:	213ff704 	addi	r4,r4,-36
   4054c:	0040a2c0 	call	40a2c <alt_printf>

	// Write the three arguments
	IOWR_32DIRECT(ACC_ADDR_BASE, ACC_InputStartAddr, in_addr);
   40550:	e0fffd17 	ldw	r3,-12(fp)
   40554:	00842404 	movi	r2,4240
   40558:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(ACC_ADDR_BASE, ACC_OutputStartAddr, out_addr);
   4055c:	e0fffe17 	ldw	r3,-8(fp)
   40560:	00842504 	movi	r2,4244
   40564:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(ACC_ADDR_BASE, ACC_Num, length);
   40568:	e0ffff17 	ldw	r3,-4(fp)
   4056c:	00842604 	movi	r2,4248
   40570:	10c00035 	stwio	r3,0(r2)

	alt_printf("Waiting\n");
   40574:	01000174 	movhi	r4,5
   40578:	213ffc04 	addi	r4,r4,-16
   4057c:	0040a2c0 	call	40a2c <alt_printf>
	// Wait for it to be done
	while(IORD_32DIRECT(ACC_ADDR_BASE, 0x0) != ACC_DONE);
   40580:	0001883a 	nop
   40584:	00842404 	movi	r2,4240
   40588:	10800037 	ldwio	r2,0(r2)
   4058c:	10800058 	cmpnei	r2,r2,1
   40590:	103ffc1e 	bne	r2,zero,40584 <__alt_data_end+0xfffc0584>

	alt_printf("Done\n");
   40594:	01000174 	movhi	r4,5
   40598:	213fff04 	addi	r4,r4,-4
   4059c:	0040a2c0 	call	40a2c <alt_printf>
	// Stop performance counter
	PERF_END(PERFORMANCE_COUNTER_0_BASE, 3);
   405a0:	0007883a 	mov	r3,zero
   405a4:	00800234 	movhi	r2,8
   405a8:	10840c04 	addi	r2,r2,4144
   405ac:	10c00035 	stwio	r3,0(r2)
}
   405b0:	e037883a 	mov	sp,fp
   405b4:	dfc00117 	ldw	ra,4(sp)
   405b8:	df000017 	ldw	fp,0(sp)
   405bc:	dec00204 	addi	sp,sp,8
   405c0:	f800283a 	ret

000405c4 <test_method_once>:

int test_method_once(uint32_t input, uint32_t exp_output, int method)
{
   405c4:	defffa04 	addi	sp,sp,-24
   405c8:	dfc00515 	stw	ra,20(sp)
   405cc:	df000415 	stw	fp,16(sp)
   405d0:	df000404 	addi	fp,sp,16
   405d4:	e13ffd15 	stw	r4,-12(fp)
   405d8:	e17ffe15 	stw	r5,-8(fp)
   405dc:	e1bfff15 	stw	r6,-4(fp)
	// and 0 otherwise
	// method = 1 -> C software implementation
	// method = 2 -> Custom instruction implementation
	// method = 3 -> Hardware accelerator implementation
	uint32_t result;
	if(method == 1)
   405e0:	e0bfff17 	ldw	r2,-4(fp)
   405e4:	10800058 	cmpnei	r2,r2,1
   405e8:	1000051e 	bne	r2,zero,40600 <test_method_once+0x3c>
	{
		result = software_custom_inst(input);
   405ec:	e0bffd17 	ldw	r2,-12(fp)
   405f0:	1009883a 	mov	r4,r2
   405f4:	00402fc0 	call	402fc <software_custom_inst>
   405f8:	e0bffc15 	stw	r2,-16(fp)
   405fc:	00001806 	br	40660 <test_method_once+0x9c>
	}
	else if(method == 2)
   40600:	e0bfff17 	ldw	r2,-4(fp)
   40604:	10800098 	cmpnei	r2,r2,2
   40608:	1000041e 	bne	r2,zero,4061c <test_method_once+0x58>
	{
		result = ALT_CI_CUSTOM_INSTRUCTION_0(input);
   4060c:	e0bffd17 	ldw	r2,-12(fp)
   40610:	1005c032 	custom	0,r2,r2,zero
   40614:	e0bffc15 	stw	r2,-16(fp)
   40618:	00001106 	br	40660 <test_method_once+0x9c>
	}
	else if(method == 3)
   4061c:	e0bfff17 	ldw	r2,-4(fp)
   40620:	108000d8 	cmpnei	r2,r2,3
   40624:	10000e1e 	bne	r2,zero,40660 <test_method_once+0x9c>
	{
		use_accelerator((uint32_t)&input, (uint32_t)&out_1000, 0xff);
   40628:	e0fffd04 	addi	r3,fp,-12
   4062c:	00800174 	movhi	r2,5
   40630:	108f0504 	addi	r2,r2,15380
   40634:	01803fc4 	movi	r6,255
   40638:	100b883a 	mov	r5,r2
   4063c:	1809883a 	mov	r4,r3
   40640:	00404e40 	call	404e4 <use_accelerator>
		alt_printf("It's not stuck!\n");
   40644:	01000174 	movhi	r4,5
   40648:	21000104 	addi	r4,r4,4
   4064c:	0040a2c0 	call	40a2c <alt_printf>
		result = out_1000[0];
   40650:	00800174 	movhi	r2,5
   40654:	108f0504 	addi	r2,r2,15380
   40658:	10800017 	ldw	r2,0(r2)
   4065c:	e0bffc15 	stw	r2,-16(fp)
	}
	return result == exp_output;
   40660:	e0fffc17 	ldw	r3,-16(fp)
   40664:	e0bffe17 	ldw	r2,-8(fp)
   40668:	1885003a 	cmpeq	r2,r3,r2
   4066c:	10803fcc 	andi	r2,r2,255
}
   40670:	e037883a 	mov	sp,fp
   40674:	dfc00117 	ldw	ra,4(sp)
   40678:	df000017 	ldw	fp,0(sp)
   4067c:	dec00204 	addi	sp,sp,8
   40680:	f800283a 	ret

00040684 <test_implementations>:

void test_implementations()
{
   40684:	defffe04 	addi	sp,sp,-8
   40688:	dfc00115 	stw	ra,4(sp)
   4068c:	df000015 	stw	fp,0(sp)
   40690:	d839883a 	mov	fp,sp
	// Test software implementation
	alt_printf("Software implementation test 1: Expected is 1, it gives %x \n", test_method_once(test, truth, 1));
   40694:	d0a00017 	ldw	r2,-32768(gp)
   40698:	d0e00117 	ldw	r3,-32764(gp)
   4069c:	01800044 	movi	r6,1
   406a0:	180b883a 	mov	r5,r3
   406a4:	1009883a 	mov	r4,r2
   406a8:	00405c40 	call	405c4 <test_method_once>
   406ac:	100b883a 	mov	r5,r2
   406b0:	01000174 	movhi	r4,5
   406b4:	21000604 	addi	r4,r4,24
   406b8:	0040a2c0 	call	40a2c <alt_printf>
	alt_printf("Software implementation test 2: Expected is 0, it gives %x \n", test_method_once(test, 0xffffffff, 1));
   406bc:	d0a00017 	ldw	r2,-32768(gp)
   406c0:	01800044 	movi	r6,1
   406c4:	017fffc4 	movi	r5,-1
   406c8:	1009883a 	mov	r4,r2
   406cc:	00405c40 	call	405c4 <test_method_once>
   406d0:	100b883a 	mov	r5,r2
   406d4:	01000174 	movhi	r4,5
   406d8:	21001604 	addi	r4,r4,88
   406dc:	0040a2c0 	call	40a2c <alt_printf>

	// Test custom instruction implementation
	alt_printf("Custom instruction implementation test 1: Expected is 1, it gives %x \n", test_method_once(test, truth, 2));
   406e0:	d0a00017 	ldw	r2,-32768(gp)
   406e4:	d0e00117 	ldw	r3,-32764(gp)
   406e8:	01800084 	movi	r6,2
   406ec:	180b883a 	mov	r5,r3
   406f0:	1009883a 	mov	r4,r2
   406f4:	00405c40 	call	405c4 <test_method_once>
   406f8:	100b883a 	mov	r5,r2
   406fc:	01000174 	movhi	r4,5
   40700:	21002604 	addi	r4,r4,152
   40704:	0040a2c0 	call	40a2c <alt_printf>
	alt_printf("Custom instruction implementation test 2: Expected is 0, it gives %x \n", test_method_once(test, 0xffffffff, 2));
   40708:	d0a00017 	ldw	r2,-32768(gp)
   4070c:	01800084 	movi	r6,2
   40710:	017fffc4 	movi	r5,-1
   40714:	1009883a 	mov	r4,r2
   40718:	00405c40 	call	405c4 <test_method_once>
   4071c:	100b883a 	mov	r5,r2
   40720:	01000174 	movhi	r4,5
   40724:	21003804 	addi	r4,r4,224
   40728:	0040a2c0 	call	40a2c <alt_printf>

	// Test accelerator implementation
	alt_printf("Accelerator implementation test 1: Expected is 1, it gives %x \n", test_method_once(test, truth, 3));
   4072c:	d0a00017 	ldw	r2,-32768(gp)
   40730:	d0e00117 	ldw	r3,-32764(gp)
   40734:	018000c4 	movi	r6,3
   40738:	180b883a 	mov	r5,r3
   4073c:	1009883a 	mov	r4,r2
   40740:	00405c40 	call	405c4 <test_method_once>
   40744:	100b883a 	mov	r5,r2
   40748:	01000174 	movhi	r4,5
   4074c:	21004a04 	addi	r4,r4,296
   40750:	0040a2c0 	call	40a2c <alt_printf>
	alt_printf("Accelerator implementation test 2: Expected is 0, it gives %x \n", test_method_once(test, 0xffffffff, 3));
   40754:	d0a00017 	ldw	r2,-32768(gp)
   40758:	018000c4 	movi	r6,3
   4075c:	017fffc4 	movi	r5,-1
   40760:	1009883a 	mov	r4,r2
   40764:	00405c40 	call	405c4 <test_method_once>
   40768:	100b883a 	mov	r5,r2
   4076c:	01000174 	movhi	r4,5
   40770:	21005a04 	addi	r4,r4,360
   40774:	0040a2c0 	call	40a2c <alt_printf>
}
   40778:	0001883a 	nop
   4077c:	e037883a 	mov	sp,fp
   40780:	dfc00117 	ldw	ra,4(sp)
   40784:	df000017 	ldw	fp,0(sp)
   40788:	dec00204 	addi	sp,sp,8
   4078c:	f800283a 	ret

00040790 <main>:

int main()
{
   40790:	defff804 	addi	sp,sp,-32
   40794:	dfc00715 	stw	ra,28(sp)
   40798:	df000615 	stw	fp,24(sp)
   4079c:	df000604 	addi	fp,sp,24
	// Setup stuff for 1000 words of indata
	init_tables();
   407a0:	00402900 	call	40290 <init_tables>
	void* in_addr_1000 = (uint32_t)&in_1000[0];
   407a4:	00800174 	movhi	r2,5
   407a8:	1092ed04 	addi	r2,r2,19380
   407ac:	e0bffc15 	stw	r2,-16(fp)
	void* out_addr_1000 = (uint32_t)&out_1000[0];
   407b0:	00800174 	movhi	r2,5
   407b4:	108f0504 	addi	r2,r2,15380
   407b8:	e0bffd15 	stw	r2,-12(fp)
	uint32_t len_1000 = 0x000003E8;
   407bc:	0080fa04 	movi	r2,1000
   407c0:	e0bffe15 	stw	r2,-8(fp)
	uint32_t len_8000 = 0x00001F40;
   407c4:	0087d004 	movi	r2,8000
   407c8:	e0bfff15 	stw	r2,-4(fp)

	// Test the implementations
	test_implementations();
   407cc:	00406840 	call	40684 <test_implementations>

	// Start overall performance counter
	PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
   407d0:	00c00044 	movi	r3,1
   407d4:	00800234 	movhi	r2,8
   407d8:	10840004 	addi	r2,r2,4096
   407dc:	10c00035 	stwio	r3,0(r2)
	PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
   407e0:	0007883a 	mov	r3,zero
   407e4:	00800234 	movhi	r2,8
   407e8:	10840104 	addi	r2,r2,4100
   407ec:	10c00035 	stwio	r3,0(r2)

	// Run software implementation on 1000 words of indata
	software_1000();
   407f0:	00403980 	call	40398 <software_1000>

	// Run custom instruction implementation on 1000 words of indata
	custom_1000();
   407f4:	00404440 	call	40444 <custom_1000>

	// Run accelerator implementation on 1000 words of indata
	use_accelerator(in_addr_1000, out_addr_1000, 2*len_1000);
   407f8:	e0fffc17 	ldw	r3,-16(fp)
   407fc:	e13ffd17 	ldw	r4,-12(fp)
   40800:	e0bffe17 	ldw	r2,-8(fp)
   40804:	1085883a 	add	r2,r2,r2
   40808:	100d883a 	mov	r6,r2
   4080c:	200b883a 	mov	r5,r4
   40810:	1809883a 	mov	r4,r3
   40814:	00404e40 	call	404e4 <use_accelerator>

	// Stop overall performance counter and print results
	PERF_STOP_MEASURING(PERFORMANCE_COUNTER_0_BASE);
   40818:	0007883a 	mov	r3,zero
   4081c:	00800234 	movhi	r2,8
   40820:	10840004 	addi	r2,r2,4096
   40824:	10c00035 	stwio	r3,0(r2)
	perf_print_formatted_report(PERFORMANCE_COUNTER_0_BASE, alt_get_cpu_freq(), 3, "C software", "Custom instr.", "Accelerator");
   40828:	004192c0 	call	4192c <alt_get_cpu_freq>
   4082c:	1007883a 	mov	r3,r2
   40830:	00800174 	movhi	r2,5
   40834:	10806d04 	addi	r2,r2,436
   40838:	d8800115 	stw	r2,4(sp)
   4083c:	00800174 	movhi	r2,5
   40840:	10807004 	addi	r2,r2,448
   40844:	d8800015 	stw	r2,0(sp)
   40848:	01c00174 	movhi	r7,5
   4084c:	39c06a04 	addi	r7,r7,424
   40850:	018000c4 	movi	r6,3
   40854:	180b883a 	mov	r5,r3
   40858:	01000234 	movhi	r4,8
   4085c:	21040004 	addi	r4,r4,4096
   40860:	00419500 	call	41950 <perf_print_formatted_report>
   40864:	0005883a 	mov	r2,zero
}
   40868:	e037883a 	mov	sp,fp
   4086c:	dfc00117 	ldw	ra,4(sp)
   40870:	df000017 	ldw	fp,0(sp)
   40874:	dec00204 	addi	sp,sp,8
   40878:	f800283a 	ret

0004087c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   4087c:	defffe04 	addi	sp,sp,-8
   40880:	df000115 	stw	fp,4(sp)
   40884:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   40888:	e03fff15 	stw	zero,-4(fp)
   4088c:	00000506 	br	408a4 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   40890:	e0bfff17 	ldw	r2,-4(fp)
   40894:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   40898:	e0bfff17 	ldw	r2,-4(fp)
   4089c:	10800804 	addi	r2,r2,32
   408a0:	e0bfff15 	stw	r2,-4(fp)
   408a4:	e0bfff17 	ldw	r2,-4(fp)
   408a8:	10820030 	cmpltui	r2,r2,2048
   408ac:	103ff81e 	bne	r2,zero,40890 <__alt_data_end+0xfffc0890>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   408b0:	0001883a 	nop
   408b4:	e037883a 	mov	sp,fp
   408b8:	df000017 	ldw	fp,0(sp)
   408bc:	dec00104 	addi	sp,sp,4
   408c0:	f800283a 	ret

000408c4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   408c4:	defffc04 	addi	sp,sp,-16
   408c8:	df000315 	stw	fp,12(sp)
   408cc:	df000304 	addi	fp,sp,12
   408d0:	e13ffd15 	stw	r4,-12(fp)
   408d4:	e17ffe15 	stw	r5,-8(fp)
   408d8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   408dc:	e0fffe17 	ldw	r3,-8(fp)
   408e0:	e0bffd17 	ldw	r2,-12(fp)
   408e4:	18800c26 	beq	r3,r2,40918 <alt_load_section+0x54>
  {
    while( to != end )
   408e8:	00000806 	br	4090c <alt_load_section+0x48>
    {
      *to++ = *from++;
   408ec:	e0bffe17 	ldw	r2,-8(fp)
   408f0:	10c00104 	addi	r3,r2,4
   408f4:	e0fffe15 	stw	r3,-8(fp)
   408f8:	e0fffd17 	ldw	r3,-12(fp)
   408fc:	19000104 	addi	r4,r3,4
   40900:	e13ffd15 	stw	r4,-12(fp)
   40904:	18c00017 	ldw	r3,0(r3)
   40908:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   4090c:	e0fffe17 	ldw	r3,-8(fp)
   40910:	e0bfff17 	ldw	r2,-4(fp)
   40914:	18bff51e 	bne	r3,r2,408ec <__alt_data_end+0xfffc08ec>
    {
      *to++ = *from++;
    }
  }
}
   40918:	0001883a 	nop
   4091c:	e037883a 	mov	sp,fp
   40920:	df000017 	ldw	fp,0(sp)
   40924:	dec00104 	addi	sp,sp,4
   40928:	f800283a 	ret

0004092c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   4092c:	defffe04 	addi	sp,sp,-8
   40930:	dfc00115 	stw	ra,4(sp)
   40934:	df000015 	stw	fp,0(sp)
   40938:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   4093c:	01800174 	movhi	r6,5
   40940:	31883004 	addi	r6,r6,8384
   40944:	01400174 	movhi	r5,5
   40948:	29417304 	addi	r5,r5,1484
   4094c:	01000174 	movhi	r4,5
   40950:	21083004 	addi	r4,r4,8384
   40954:	00408c40 	call	408c4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   40958:	01800134 	movhi	r6,4
   4095c:	31809104 	addi	r6,r6,580
   40960:	01400134 	movhi	r5,4
   40964:	29400804 	addi	r5,r5,32
   40968:	01000134 	movhi	r4,4
   4096c:	21000804 	addi	r4,r4,32
   40970:	00408c40 	call	408c4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   40974:	01800174 	movhi	r6,5
   40978:	31817304 	addi	r6,r6,1484
   4097c:	01400174 	movhi	r5,5
   40980:	297ff204 	addi	r5,r5,-56
   40984:	01000174 	movhi	r4,5
   40988:	213ff204 	addi	r4,r4,-56
   4098c:	00408c40 	call	408c4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   40990:	004087c0 	call	4087c <alt_dcache_flush_all>
  alt_icache_flush_all();
   40994:	0041fd40 	call	41fd4 <alt_icache_flush_all>
}
   40998:	0001883a 	nop
   4099c:	e037883a 	mov	sp,fp
   409a0:	dfc00117 	ldw	ra,4(sp)
   409a4:	df000017 	ldw	fp,0(sp)
   409a8:	dec00204 	addi	sp,sp,8
   409ac:	f800283a 	ret

000409b0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   409b0:	defffd04 	addi	sp,sp,-12
   409b4:	dfc00215 	stw	ra,8(sp)
   409b8:	df000115 	stw	fp,4(sp)
   409bc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   409c0:	0009883a 	mov	r4,zero
   409c4:	0040cc80 	call	40cc8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   409c8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   409cc:	0040d000 	call	40d00 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   409d0:	01800174 	movhi	r6,5
   409d4:	31807404 	addi	r6,r6,464
   409d8:	01400174 	movhi	r5,5
   409dc:	29407404 	addi	r5,r5,464
   409e0:	01000174 	movhi	r4,5
   409e4:	21007404 	addi	r4,r4,464
   409e8:	004236c0 	call	4236c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   409ec:	0041f140 	call	41f14 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   409f0:	01000134 	movhi	r4,4
   409f4:	2107dd04 	addi	r4,r4,8052
   409f8:	0042bd00 	call	42bd0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   409fc:	d0a6cf17 	ldw	r2,-25796(gp)
   40a00:	d0e6d017 	ldw	r3,-25792(gp)
   40a04:	d126d117 	ldw	r4,-25788(gp)
   40a08:	200d883a 	mov	r6,r4
   40a0c:	180b883a 	mov	r5,r3
   40a10:	1009883a 	mov	r4,r2
   40a14:	00407900 	call	40790 <main>
   40a18:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   40a1c:	01000044 	movi	r4,1
   40a20:	0041d380 	call	41d38 <close>
  exit (result);
   40a24:	e13fff17 	ldw	r4,-4(fp)
   40a28:	0042be40 	call	42be4 <exit>

00040a2c <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   40a2c:	defff204 	addi	sp,sp,-56
   40a30:	dfc00a15 	stw	ra,40(sp)
   40a34:	df000915 	stw	fp,36(sp)
   40a38:	df000904 	addi	fp,sp,36
   40a3c:	e13fff15 	stw	r4,-4(fp)
   40a40:	e1400215 	stw	r5,8(fp)
   40a44:	e1800315 	stw	r6,12(fp)
   40a48:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
   40a4c:	e0800204 	addi	r2,fp,8
   40a50:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   40a54:	e0bfff17 	ldw	r2,-4(fp)
   40a58:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
   40a5c:	00006f06 	br	40c1c <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   40a60:	e0bff807 	ldb	r2,-32(fp)
   40a64:	10800960 	cmpeqi	r2,r2,37
   40a68:	1000041e 	bne	r2,zero,40a7c <alt_printf+0x50>
        {
            alt_putchar(c);
   40a6c:	e0bff807 	ldb	r2,-32(fp)
   40a70:	1009883a 	mov	r4,r2
   40a74:	0040c580 	call	40c58 <alt_putchar>
   40a78:	00006806 	br	40c1c <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   40a7c:	e0bff717 	ldw	r2,-36(fp)
   40a80:	10c00044 	addi	r3,r2,1
   40a84:	e0fff715 	stw	r3,-36(fp)
   40a88:	10800003 	ldbu	r2,0(r2)
   40a8c:	e0bff805 	stb	r2,-32(fp)
   40a90:	e0bff807 	ldb	r2,-32(fp)
   40a94:	10006926 	beq	r2,zero,40c3c <alt_printf+0x210>
            {
                if (c == '%')
   40a98:	e0bff807 	ldb	r2,-32(fp)
   40a9c:	10800958 	cmpnei	r2,r2,37
   40aa0:	1000041e 	bne	r2,zero,40ab4 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   40aa4:	e0bff807 	ldb	r2,-32(fp)
   40aa8:	1009883a 	mov	r4,r2
   40aac:	0040c580 	call	40c58 <alt_putchar>
   40ab0:	00005a06 	br	40c1c <alt_printf+0x1f0>
                } 
                else if (c == 'c')
   40ab4:	e0bff807 	ldb	r2,-32(fp)
   40ab8:	108018d8 	cmpnei	r2,r2,99
   40abc:	1000081e 	bne	r2,zero,40ae0 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
   40ac0:	e0bffe17 	ldw	r2,-8(fp)
   40ac4:	10c00104 	addi	r3,r2,4
   40ac8:	e0fffe15 	stw	r3,-8(fp)
   40acc:	10800017 	ldw	r2,0(r2)
   40ad0:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
   40ad4:	e13ffd17 	ldw	r4,-12(fp)
   40ad8:	0040c580 	call	40c58 <alt_putchar>
   40adc:	00004f06 	br	40c1c <alt_printf+0x1f0>
                }
                else if (c == 'x')
   40ae0:	e0bff807 	ldb	r2,-32(fp)
   40ae4:	10801e18 	cmpnei	r2,r2,120
   40ae8:	1000341e 	bne	r2,zero,40bbc <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   40aec:	e0bffe17 	ldw	r2,-8(fp)
   40af0:	10c00104 	addi	r3,r2,4
   40af4:	e0fffe15 	stw	r3,-8(fp)
   40af8:	10800017 	ldw	r2,0(r2)
   40afc:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   40b00:	e0bffb17 	ldw	r2,-20(fp)
   40b04:	1000031e 	bne	r2,zero,40b14 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
   40b08:	01000c04 	movi	r4,48
   40b0c:	0040c580 	call	40c58 <alt_putchar>
                        continue;
   40b10:	00004206 	br	40c1c <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   40b14:	00800704 	movi	r2,28
   40b18:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
   40b1c:	00000306 	br	40b2c <alt_printf+0x100>
                        digit_shift -= 4;
   40b20:	e0bff917 	ldw	r2,-28(fp)
   40b24:	10bfff04 	addi	r2,r2,-4
   40b28:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   40b2c:	00c003c4 	movi	r3,15
   40b30:	e0bff917 	ldw	r2,-28(fp)
   40b34:	1884983a 	sll	r2,r3,r2
   40b38:	1007883a 	mov	r3,r2
   40b3c:	e0bffb17 	ldw	r2,-20(fp)
   40b40:	1884703a 	and	r2,r3,r2
   40b44:	103ff626 	beq	r2,zero,40b20 <__alt_data_end+0xfffc0b20>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   40b48:	00001906 	br	40bb0 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   40b4c:	00c003c4 	movi	r3,15
   40b50:	e0bff917 	ldw	r2,-28(fp)
   40b54:	1884983a 	sll	r2,r3,r2
   40b58:	1007883a 	mov	r3,r2
   40b5c:	e0bffb17 	ldw	r2,-20(fp)
   40b60:	1886703a 	and	r3,r3,r2
   40b64:	e0bff917 	ldw	r2,-28(fp)
   40b68:	1884d83a 	srl	r2,r3,r2
   40b6c:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
   40b70:	e0bffc17 	ldw	r2,-16(fp)
   40b74:	108002a8 	cmpgeui	r2,r2,10
   40b78:	1000041e 	bne	r2,zero,40b8c <alt_printf+0x160>
                            c = '0' + digit;
   40b7c:	e0bffc17 	ldw	r2,-16(fp)
   40b80:	10800c04 	addi	r2,r2,48
   40b84:	e0bff805 	stb	r2,-32(fp)
   40b88:	00000306 	br	40b98 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
   40b8c:	e0bffc17 	ldw	r2,-16(fp)
   40b90:	108015c4 	addi	r2,r2,87
   40b94:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
   40b98:	e0bff807 	ldb	r2,-32(fp)
   40b9c:	1009883a 	mov	r4,r2
   40ba0:	0040c580 	call	40c58 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   40ba4:	e0bff917 	ldw	r2,-28(fp)
   40ba8:	10bfff04 	addi	r2,r2,-4
   40bac:	e0bff915 	stw	r2,-28(fp)
   40bb0:	e0bff917 	ldw	r2,-28(fp)
   40bb4:	103fe50e 	bge	r2,zero,40b4c <__alt_data_end+0xfffc0b4c>
   40bb8:	00001806 	br	40c1c <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   40bbc:	e0bff807 	ldb	r2,-32(fp)
   40bc0:	10801cd8 	cmpnei	r2,r2,115
   40bc4:	1000151e 	bne	r2,zero,40c1c <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   40bc8:	e0bffe17 	ldw	r2,-8(fp)
   40bcc:	10c00104 	addi	r3,r2,4
   40bd0:	e0fffe15 	stw	r3,-8(fp)
   40bd4:	10800017 	ldw	r2,0(r2)
   40bd8:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
   40bdc:	00000906 	br	40c04 <alt_printf+0x1d8>
                      alt_putchar(*s++);
   40be0:	e0bffa17 	ldw	r2,-24(fp)
   40be4:	10c00044 	addi	r3,r2,1
   40be8:	e0fffa15 	stw	r3,-24(fp)
   40bec:	10800003 	ldbu	r2,0(r2)
   40bf0:	10803fcc 	andi	r2,r2,255
   40bf4:	1080201c 	xori	r2,r2,128
   40bf8:	10bfe004 	addi	r2,r2,-128
   40bfc:	1009883a 	mov	r4,r2
   40c00:	0040c580 	call	40c58 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   40c04:	e0bffa17 	ldw	r2,-24(fp)
   40c08:	10800003 	ldbu	r2,0(r2)
   40c0c:	10803fcc 	andi	r2,r2,255
   40c10:	1080201c 	xori	r2,r2,128
   40c14:	10bfe004 	addi	r2,r2,-128
   40c18:	103ff11e 	bne	r2,zero,40be0 <__alt_data_end+0xfffc0be0>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   40c1c:	e0bff717 	ldw	r2,-36(fp)
   40c20:	10c00044 	addi	r3,r2,1
   40c24:	e0fff715 	stw	r3,-36(fp)
   40c28:	10800003 	ldbu	r2,0(r2)
   40c2c:	e0bff805 	stb	r2,-32(fp)
   40c30:	e0bff807 	ldb	r2,-32(fp)
   40c34:	103f8a1e 	bne	r2,zero,40a60 <__alt_data_end+0xfffc0a60>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   40c38:	00000106 	br	40c40 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
   40c3c:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   40c40:	0001883a 	nop
   40c44:	e037883a 	mov	sp,fp
   40c48:	dfc00117 	ldw	ra,4(sp)
   40c4c:	df000017 	ldw	fp,0(sp)
   40c50:	dec00504 	addi	sp,sp,20
   40c54:	f800283a 	ret

00040c58 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   40c58:	defffd04 	addi	sp,sp,-12
   40c5c:	dfc00215 	stw	ra,8(sp)
   40c60:	df000115 	stw	fp,4(sp)
   40c64:	df000104 	addi	fp,sp,4
   40c68:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   40c6c:	d0a00c17 	ldw	r2,-32720(gp)
   40c70:	10800217 	ldw	r2,8(r2)
   40c74:	100b883a 	mov	r5,r2
   40c78:	e13fff17 	ldw	r4,-4(fp)
   40c7c:	0042eec0 	call	42eec <putc>
#endif
#endif
}
   40c80:	e037883a 	mov	sp,fp
   40c84:	dfc00117 	ldw	ra,4(sp)
   40c88:	df000017 	ldw	fp,0(sp)
   40c8c:	dec00204 	addi	sp,sp,8
   40c90:	f800283a 	ret

00040c94 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   40c94:	defffd04 	addi	sp,sp,-12
   40c98:	dfc00215 	stw	ra,8(sp)
   40c9c:	df000115 	stw	fp,4(sp)
   40ca0:	df000104 	addi	fp,sp,4
   40ca4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   40ca8:	d1600404 	addi	r5,gp,-32752
   40cac:	e13fff17 	ldw	r4,-4(fp)
   40cb0:	0041e700 	call	41e70 <alt_dev_llist_insert>
}
   40cb4:	e037883a 	mov	sp,fp
   40cb8:	dfc00117 	ldw	ra,4(sp)
   40cbc:	df000017 	ldw	fp,0(sp)
   40cc0:	dec00204 	addi	sp,sp,8
   40cc4:	f800283a 	ret

00040cc8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   40cc8:	defffd04 	addi	sp,sp,-12
   40ccc:	dfc00215 	stw	ra,8(sp)
   40cd0:	df000115 	stw	fp,4(sp)
   40cd4:	df000104 	addi	fp,sp,4
   40cd8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   40cdc:	00428440 	call	42844 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   40ce0:	00800044 	movi	r2,1
   40ce4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   40ce8:	0001883a 	nop
   40cec:	e037883a 	mov	sp,fp
   40cf0:	dfc00117 	ldw	ra,4(sp)
   40cf4:	df000017 	ldw	fp,0(sp)
   40cf8:	dec00204 	addi	sp,sp,8
   40cfc:	f800283a 	ret

00040d00 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   40d00:	defffe04 	addi	sp,sp,-8
   40d04:	dfc00115 	stw	ra,4(sp)
   40d08:	df000015 	stw	fp,0(sp)
   40d0c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   40d10:	000d883a 	mov	r6,zero
   40d14:	000b883a 	mov	r5,zero
   40d18:	01000174 	movhi	r4,5
   40d1c:	21017d04 	addi	r4,r4,1524
   40d20:	0040ebc0 	call	40ebc <altera_avalon_jtag_uart_init>
   40d24:	01000174 	movhi	r4,5
   40d28:	21017304 	addi	r4,r4,1484
   40d2c:	0040c940 	call	40c94 <alt_dev_reg>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER_0, performance_counter_0);
   40d30:	00c00044 	movi	r3,1
   40d34:	00800234 	movhi	r2,8
   40d38:	10840004 	addi	r2,r2,4096
   40d3c:	10c00035 	stwio	r3,0(r2)
}
   40d40:	0001883a 	nop
   40d44:	e037883a 	mov	sp,fp
   40d48:	dfc00117 	ldw	ra,4(sp)
   40d4c:	df000017 	ldw	fp,0(sp)
   40d50:	dec00204 	addi	sp,sp,8
   40d54:	f800283a 	ret

00040d58 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   40d58:	defffa04 	addi	sp,sp,-24
   40d5c:	dfc00515 	stw	ra,20(sp)
   40d60:	df000415 	stw	fp,16(sp)
   40d64:	df000404 	addi	fp,sp,16
   40d68:	e13ffd15 	stw	r4,-12(fp)
   40d6c:	e17ffe15 	stw	r5,-8(fp)
   40d70:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   40d74:	e0bffd17 	ldw	r2,-12(fp)
   40d78:	10800017 	ldw	r2,0(r2)
   40d7c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   40d80:	e0bffc17 	ldw	r2,-16(fp)
   40d84:	10c00a04 	addi	r3,r2,40
   40d88:	e0bffd17 	ldw	r2,-12(fp)
   40d8c:	10800217 	ldw	r2,8(r2)
   40d90:	100f883a 	mov	r7,r2
   40d94:	e1bfff17 	ldw	r6,-4(fp)
   40d98:	e17ffe17 	ldw	r5,-8(fp)
   40d9c:	1809883a 	mov	r4,r3
   40da0:	00413800 	call	41380 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   40da4:	e037883a 	mov	sp,fp
   40da8:	dfc00117 	ldw	ra,4(sp)
   40dac:	df000017 	ldw	fp,0(sp)
   40db0:	dec00204 	addi	sp,sp,8
   40db4:	f800283a 	ret

00040db8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   40db8:	defffa04 	addi	sp,sp,-24
   40dbc:	dfc00515 	stw	ra,20(sp)
   40dc0:	df000415 	stw	fp,16(sp)
   40dc4:	df000404 	addi	fp,sp,16
   40dc8:	e13ffd15 	stw	r4,-12(fp)
   40dcc:	e17ffe15 	stw	r5,-8(fp)
   40dd0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   40dd4:	e0bffd17 	ldw	r2,-12(fp)
   40dd8:	10800017 	ldw	r2,0(r2)
   40ddc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   40de0:	e0bffc17 	ldw	r2,-16(fp)
   40de4:	10c00a04 	addi	r3,r2,40
   40de8:	e0bffd17 	ldw	r2,-12(fp)
   40dec:	10800217 	ldw	r2,8(r2)
   40df0:	100f883a 	mov	r7,r2
   40df4:	e1bfff17 	ldw	r6,-4(fp)
   40df8:	e17ffe17 	ldw	r5,-8(fp)
   40dfc:	1809883a 	mov	r4,r3
   40e00:	004159c0 	call	4159c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   40e04:	e037883a 	mov	sp,fp
   40e08:	dfc00117 	ldw	ra,4(sp)
   40e0c:	df000017 	ldw	fp,0(sp)
   40e10:	dec00204 	addi	sp,sp,8
   40e14:	f800283a 	ret

00040e18 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   40e18:	defffc04 	addi	sp,sp,-16
   40e1c:	dfc00315 	stw	ra,12(sp)
   40e20:	df000215 	stw	fp,8(sp)
   40e24:	df000204 	addi	fp,sp,8
   40e28:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   40e2c:	e0bfff17 	ldw	r2,-4(fp)
   40e30:	10800017 	ldw	r2,0(r2)
   40e34:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   40e38:	e0bffe17 	ldw	r2,-8(fp)
   40e3c:	10c00a04 	addi	r3,r2,40
   40e40:	e0bfff17 	ldw	r2,-4(fp)
   40e44:	10800217 	ldw	r2,8(r2)
   40e48:	100b883a 	mov	r5,r2
   40e4c:	1809883a 	mov	r4,r3
   40e50:	00412280 	call	41228 <altera_avalon_jtag_uart_close>
}
   40e54:	e037883a 	mov	sp,fp
   40e58:	dfc00117 	ldw	ra,4(sp)
   40e5c:	df000017 	ldw	fp,0(sp)
   40e60:	dec00204 	addi	sp,sp,8
   40e64:	f800283a 	ret

00040e68 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   40e68:	defffa04 	addi	sp,sp,-24
   40e6c:	dfc00515 	stw	ra,20(sp)
   40e70:	df000415 	stw	fp,16(sp)
   40e74:	df000404 	addi	fp,sp,16
   40e78:	e13ffd15 	stw	r4,-12(fp)
   40e7c:	e17ffe15 	stw	r5,-8(fp)
   40e80:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   40e84:	e0bffd17 	ldw	r2,-12(fp)
   40e88:	10800017 	ldw	r2,0(r2)
   40e8c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   40e90:	e0bffc17 	ldw	r2,-16(fp)
   40e94:	10800a04 	addi	r2,r2,40
   40e98:	e1bfff17 	ldw	r6,-4(fp)
   40e9c:	e17ffe17 	ldw	r5,-8(fp)
   40ea0:	1009883a 	mov	r4,r2
   40ea4:	00412900 	call	41290 <altera_avalon_jtag_uart_ioctl>
}
   40ea8:	e037883a 	mov	sp,fp
   40eac:	dfc00117 	ldw	ra,4(sp)
   40eb0:	df000017 	ldw	fp,0(sp)
   40eb4:	dec00204 	addi	sp,sp,8
   40eb8:	f800283a 	ret

00040ebc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   40ebc:	defffa04 	addi	sp,sp,-24
   40ec0:	dfc00515 	stw	ra,20(sp)
   40ec4:	df000415 	stw	fp,16(sp)
   40ec8:	df000404 	addi	fp,sp,16
   40ecc:	e13ffd15 	stw	r4,-12(fp)
   40ed0:	e17ffe15 	stw	r5,-8(fp)
   40ed4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   40ed8:	e0bffd17 	ldw	r2,-12(fp)
   40edc:	00c00044 	movi	r3,1
   40ee0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   40ee4:	e0bffd17 	ldw	r2,-12(fp)
   40ee8:	10800017 	ldw	r2,0(r2)
   40eec:	10800104 	addi	r2,r2,4
   40ef0:	1007883a 	mov	r3,r2
   40ef4:	e0bffd17 	ldw	r2,-12(fp)
   40ef8:	10800817 	ldw	r2,32(r2)
   40efc:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   40f00:	e0bffe17 	ldw	r2,-8(fp)
   40f04:	e0ffff17 	ldw	r3,-4(fp)
   40f08:	d8000015 	stw	zero,0(sp)
   40f0c:	e1fffd17 	ldw	r7,-12(fp)
   40f10:	01800134 	movhi	r6,4
   40f14:	3183df04 	addi	r6,r6,3964
   40f18:	180b883a 	mov	r5,r3
   40f1c:	1009883a 	mov	r4,r2
   40f20:	00420080 	call	42008 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   40f24:	e0bffd17 	ldw	r2,-12(fp)
   40f28:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   40f2c:	e0bffd17 	ldw	r2,-12(fp)
   40f30:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   40f34:	d0e6d317 	ldw	r3,-25780(gp)
   40f38:	e1fffd17 	ldw	r7,-12(fp)
   40f3c:	01800134 	movhi	r6,4
   40f40:	31846204 	addi	r6,r6,4488
   40f44:	180b883a 	mov	r5,r3
   40f48:	1009883a 	mov	r4,r2
   40f4c:	0041bd00 	call	41bd0 <alt_alarm_start>
   40f50:	1000040e 	bge	r2,zero,40f64 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   40f54:	e0fffd17 	ldw	r3,-12(fp)
   40f58:	00a00034 	movhi	r2,32768
   40f5c:	10bfffc4 	addi	r2,r2,-1
   40f60:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   40f64:	0001883a 	nop
   40f68:	e037883a 	mov	sp,fp
   40f6c:	dfc00117 	ldw	ra,4(sp)
   40f70:	df000017 	ldw	fp,0(sp)
   40f74:	dec00204 	addi	sp,sp,8
   40f78:	f800283a 	ret

00040f7c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   40f7c:	defff804 	addi	sp,sp,-32
   40f80:	df000715 	stw	fp,28(sp)
   40f84:	df000704 	addi	fp,sp,28
   40f88:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   40f8c:	e0bfff17 	ldw	r2,-4(fp)
   40f90:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   40f94:	e0bffb17 	ldw	r2,-20(fp)
   40f98:	10800017 	ldw	r2,0(r2)
   40f9c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   40fa0:	e0bffc17 	ldw	r2,-16(fp)
   40fa4:	10800104 	addi	r2,r2,4
   40fa8:	10800037 	ldwio	r2,0(r2)
   40fac:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   40fb0:	e0bffd17 	ldw	r2,-12(fp)
   40fb4:	1080c00c 	andi	r2,r2,768
   40fb8:	10006d26 	beq	r2,zero,41170 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   40fbc:	e0bffd17 	ldw	r2,-12(fp)
   40fc0:	1080400c 	andi	r2,r2,256
   40fc4:	10003526 	beq	r2,zero,4109c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   40fc8:	00800074 	movhi	r2,1
   40fcc:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   40fd0:	e0bffb17 	ldw	r2,-20(fp)
   40fd4:	10800a17 	ldw	r2,40(r2)
   40fd8:	10800044 	addi	r2,r2,1
   40fdc:	1081ffcc 	andi	r2,r2,2047
   40fe0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   40fe4:	e0bffb17 	ldw	r2,-20(fp)
   40fe8:	10c00b17 	ldw	r3,44(r2)
   40fec:	e0bffe17 	ldw	r2,-8(fp)
   40ff0:	18801526 	beq	r3,r2,41048 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   40ff4:	e0bffc17 	ldw	r2,-16(fp)
   40ff8:	10800037 	ldwio	r2,0(r2)
   40ffc:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   41000:	e0bff917 	ldw	r2,-28(fp)
   41004:	10a0000c 	andi	r2,r2,32768
   41008:	10001126 	beq	r2,zero,41050 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   4100c:	e0bffb17 	ldw	r2,-20(fp)
   41010:	10800a17 	ldw	r2,40(r2)
   41014:	e0fff917 	ldw	r3,-28(fp)
   41018:	1809883a 	mov	r4,r3
   4101c:	e0fffb17 	ldw	r3,-20(fp)
   41020:	1885883a 	add	r2,r3,r2
   41024:	10800e04 	addi	r2,r2,56
   41028:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   4102c:	e0bffb17 	ldw	r2,-20(fp)
   41030:	10800a17 	ldw	r2,40(r2)
   41034:	10800044 	addi	r2,r2,1
   41038:	10c1ffcc 	andi	r3,r2,2047
   4103c:	e0bffb17 	ldw	r2,-20(fp)
   41040:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   41044:	003fe206 	br	40fd0 <__alt_data_end+0xfffc0fd0>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   41048:	0001883a 	nop
   4104c:	00000106 	br	41054 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   41050:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   41054:	e0bff917 	ldw	r2,-28(fp)
   41058:	10bfffec 	andhi	r2,r2,65535
   4105c:	10000f26 	beq	r2,zero,4109c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   41060:	e0bffb17 	ldw	r2,-20(fp)
   41064:	10c00817 	ldw	r3,32(r2)
   41068:	00bfff84 	movi	r2,-2
   4106c:	1886703a 	and	r3,r3,r2
   41070:	e0bffb17 	ldw	r2,-20(fp)
   41074:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   41078:	e0bffc17 	ldw	r2,-16(fp)
   4107c:	10800104 	addi	r2,r2,4
   41080:	1007883a 	mov	r3,r2
   41084:	e0bffb17 	ldw	r2,-20(fp)
   41088:	10800817 	ldw	r2,32(r2)
   4108c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   41090:	e0bffc17 	ldw	r2,-16(fp)
   41094:	10800104 	addi	r2,r2,4
   41098:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   4109c:	e0bffd17 	ldw	r2,-12(fp)
   410a0:	1080800c 	andi	r2,r2,512
   410a4:	103fbe26 	beq	r2,zero,40fa0 <__alt_data_end+0xfffc0fa0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   410a8:	e0bffd17 	ldw	r2,-12(fp)
   410ac:	1004d43a 	srli	r2,r2,16
   410b0:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   410b4:	00001406 	br	41108 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   410b8:	e0bffc17 	ldw	r2,-16(fp)
   410bc:	e0fffb17 	ldw	r3,-20(fp)
   410c0:	18c00d17 	ldw	r3,52(r3)
   410c4:	e13ffb17 	ldw	r4,-20(fp)
   410c8:	20c7883a 	add	r3,r4,r3
   410cc:	18c20e04 	addi	r3,r3,2104
   410d0:	18c00003 	ldbu	r3,0(r3)
   410d4:	18c03fcc 	andi	r3,r3,255
   410d8:	18c0201c 	xori	r3,r3,128
   410dc:	18ffe004 	addi	r3,r3,-128
   410e0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   410e4:	e0bffb17 	ldw	r2,-20(fp)
   410e8:	10800d17 	ldw	r2,52(r2)
   410ec:	10800044 	addi	r2,r2,1
   410f0:	10c1ffcc 	andi	r3,r2,2047
   410f4:	e0bffb17 	ldw	r2,-20(fp)
   410f8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   410fc:	e0bffa17 	ldw	r2,-24(fp)
   41100:	10bfffc4 	addi	r2,r2,-1
   41104:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   41108:	e0bffa17 	ldw	r2,-24(fp)
   4110c:	10000526 	beq	r2,zero,41124 <altera_avalon_jtag_uart_irq+0x1a8>
   41110:	e0bffb17 	ldw	r2,-20(fp)
   41114:	10c00d17 	ldw	r3,52(r2)
   41118:	e0bffb17 	ldw	r2,-20(fp)
   4111c:	10800c17 	ldw	r2,48(r2)
   41120:	18bfe51e 	bne	r3,r2,410b8 <__alt_data_end+0xfffc10b8>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   41124:	e0bffa17 	ldw	r2,-24(fp)
   41128:	103f9d26 	beq	r2,zero,40fa0 <__alt_data_end+0xfffc0fa0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   4112c:	e0bffb17 	ldw	r2,-20(fp)
   41130:	10c00817 	ldw	r3,32(r2)
   41134:	00bfff44 	movi	r2,-3
   41138:	1886703a 	and	r3,r3,r2
   4113c:	e0bffb17 	ldw	r2,-20(fp)
   41140:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   41144:	e0bffb17 	ldw	r2,-20(fp)
   41148:	10800017 	ldw	r2,0(r2)
   4114c:	10800104 	addi	r2,r2,4
   41150:	1007883a 	mov	r3,r2
   41154:	e0bffb17 	ldw	r2,-20(fp)
   41158:	10800817 	ldw	r2,32(r2)
   4115c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   41160:	e0bffc17 	ldw	r2,-16(fp)
   41164:	10800104 	addi	r2,r2,4
   41168:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   4116c:	003f8c06 	br	40fa0 <__alt_data_end+0xfffc0fa0>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   41170:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   41174:	0001883a 	nop
   41178:	e037883a 	mov	sp,fp
   4117c:	df000017 	ldw	fp,0(sp)
   41180:	dec00104 	addi	sp,sp,4
   41184:	f800283a 	ret

00041188 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   41188:	defff804 	addi	sp,sp,-32
   4118c:	df000715 	stw	fp,28(sp)
   41190:	df000704 	addi	fp,sp,28
   41194:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   41198:	e0bffb17 	ldw	r2,-20(fp)
   4119c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   411a0:	e0bff917 	ldw	r2,-28(fp)
   411a4:	10800017 	ldw	r2,0(r2)
   411a8:	10800104 	addi	r2,r2,4
   411ac:	10800037 	ldwio	r2,0(r2)
   411b0:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   411b4:	e0bffa17 	ldw	r2,-24(fp)
   411b8:	1081000c 	andi	r2,r2,1024
   411bc:	10000b26 	beq	r2,zero,411ec <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   411c0:	e0bff917 	ldw	r2,-28(fp)
   411c4:	10800017 	ldw	r2,0(r2)
   411c8:	10800104 	addi	r2,r2,4
   411cc:	1007883a 	mov	r3,r2
   411d0:	e0bff917 	ldw	r2,-28(fp)
   411d4:	10800817 	ldw	r2,32(r2)
   411d8:	10810014 	ori	r2,r2,1024
   411dc:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   411e0:	e0bff917 	ldw	r2,-28(fp)
   411e4:	10000915 	stw	zero,36(r2)
   411e8:	00000a06 	br	41214 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   411ec:	e0bff917 	ldw	r2,-28(fp)
   411f0:	10c00917 	ldw	r3,36(r2)
   411f4:	00a00034 	movhi	r2,32768
   411f8:	10bfff04 	addi	r2,r2,-4
   411fc:	10c00536 	bltu	r2,r3,41214 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   41200:	e0bff917 	ldw	r2,-28(fp)
   41204:	10800917 	ldw	r2,36(r2)
   41208:	10c00044 	addi	r3,r2,1
   4120c:	e0bff917 	ldw	r2,-28(fp)
   41210:	10c00915 	stw	r3,36(r2)
   41214:	d0a6d317 	ldw	r2,-25780(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   41218:	e037883a 	mov	sp,fp
   4121c:	df000017 	ldw	fp,0(sp)
   41220:	dec00104 	addi	sp,sp,4
   41224:	f800283a 	ret

00041228 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   41228:	defffd04 	addi	sp,sp,-12
   4122c:	df000215 	stw	fp,8(sp)
   41230:	df000204 	addi	fp,sp,8
   41234:	e13ffe15 	stw	r4,-8(fp)
   41238:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   4123c:	00000506 	br	41254 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   41240:	e0bfff17 	ldw	r2,-4(fp)
   41244:	1090000c 	andi	r2,r2,16384
   41248:	10000226 	beq	r2,zero,41254 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   4124c:	00bffd44 	movi	r2,-11
   41250:	00000b06 	br	41280 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   41254:	e0bffe17 	ldw	r2,-8(fp)
   41258:	10c00d17 	ldw	r3,52(r2)
   4125c:	e0bffe17 	ldw	r2,-8(fp)
   41260:	10800c17 	ldw	r2,48(r2)
   41264:	18800526 	beq	r3,r2,4127c <altera_avalon_jtag_uart_close+0x54>
   41268:	e0bffe17 	ldw	r2,-8(fp)
   4126c:	10c00917 	ldw	r3,36(r2)
   41270:	e0bffe17 	ldw	r2,-8(fp)
   41274:	10800117 	ldw	r2,4(r2)
   41278:	18bff136 	bltu	r3,r2,41240 <__alt_data_end+0xfffc1240>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   4127c:	0005883a 	mov	r2,zero
}
   41280:	e037883a 	mov	sp,fp
   41284:	df000017 	ldw	fp,0(sp)
   41288:	dec00104 	addi	sp,sp,4
   4128c:	f800283a 	ret

00041290 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   41290:	defffa04 	addi	sp,sp,-24
   41294:	df000515 	stw	fp,20(sp)
   41298:	df000504 	addi	fp,sp,20
   4129c:	e13ffd15 	stw	r4,-12(fp)
   412a0:	e17ffe15 	stw	r5,-8(fp)
   412a4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   412a8:	00bff9c4 	movi	r2,-25
   412ac:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   412b0:	e0bffe17 	ldw	r2,-8(fp)
   412b4:	10da8060 	cmpeqi	r3,r2,27137
   412b8:	1800031e 	bne	r3,zero,412c8 <altera_avalon_jtag_uart_ioctl+0x38>
   412bc:	109a80a0 	cmpeqi	r2,r2,27138
   412c0:	1000181e 	bne	r2,zero,41324 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   412c4:	00002906 	br	4136c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   412c8:	e0bffd17 	ldw	r2,-12(fp)
   412cc:	10c00117 	ldw	r3,4(r2)
   412d0:	00a00034 	movhi	r2,32768
   412d4:	10bfffc4 	addi	r2,r2,-1
   412d8:	18802126 	beq	r3,r2,41360 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   412dc:	e0bfff17 	ldw	r2,-4(fp)
   412e0:	10800017 	ldw	r2,0(r2)
   412e4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   412e8:	e0bffc17 	ldw	r2,-16(fp)
   412ec:	10800090 	cmplti	r2,r2,2
   412f0:	1000061e 	bne	r2,zero,4130c <altera_avalon_jtag_uart_ioctl+0x7c>
   412f4:	e0fffc17 	ldw	r3,-16(fp)
   412f8:	00a00034 	movhi	r2,32768
   412fc:	10bfffc4 	addi	r2,r2,-1
   41300:	18800226 	beq	r3,r2,4130c <altera_avalon_jtag_uart_ioctl+0x7c>
   41304:	e0bffc17 	ldw	r2,-16(fp)
   41308:	00000206 	br	41314 <altera_avalon_jtag_uart_ioctl+0x84>
   4130c:	00a00034 	movhi	r2,32768
   41310:	10bfff84 	addi	r2,r2,-2
   41314:	e0fffd17 	ldw	r3,-12(fp)
   41318:	18800115 	stw	r2,4(r3)
      rc = 0;
   4131c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   41320:	00000f06 	br	41360 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   41324:	e0bffd17 	ldw	r2,-12(fp)
   41328:	10c00117 	ldw	r3,4(r2)
   4132c:	00a00034 	movhi	r2,32768
   41330:	10bfffc4 	addi	r2,r2,-1
   41334:	18800c26 	beq	r3,r2,41368 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   41338:	e0bffd17 	ldw	r2,-12(fp)
   4133c:	10c00917 	ldw	r3,36(r2)
   41340:	e0bffd17 	ldw	r2,-12(fp)
   41344:	10800117 	ldw	r2,4(r2)
   41348:	1885803a 	cmpltu	r2,r3,r2
   4134c:	10c03fcc 	andi	r3,r2,255
   41350:	e0bfff17 	ldw	r2,-4(fp)
   41354:	10c00015 	stw	r3,0(r2)
      rc = 0;
   41358:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   4135c:	00000206 	br	41368 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   41360:	0001883a 	nop
   41364:	00000106 	br	4136c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   41368:	0001883a 	nop

  default:
    break;
  }

  return rc;
   4136c:	e0bffb17 	ldw	r2,-20(fp)
}
   41370:	e037883a 	mov	sp,fp
   41374:	df000017 	ldw	fp,0(sp)
   41378:	dec00104 	addi	sp,sp,4
   4137c:	f800283a 	ret

00041380 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   41380:	defff304 	addi	sp,sp,-52
   41384:	dfc00c15 	stw	ra,48(sp)
   41388:	df000b15 	stw	fp,44(sp)
   4138c:	df000b04 	addi	fp,sp,44
   41390:	e13ffc15 	stw	r4,-16(fp)
   41394:	e17ffd15 	stw	r5,-12(fp)
   41398:	e1bffe15 	stw	r6,-8(fp)
   4139c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   413a0:	e0bffd17 	ldw	r2,-12(fp)
   413a4:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   413a8:	00004706 	br	414c8 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   413ac:	e0bffc17 	ldw	r2,-16(fp)
   413b0:	10800a17 	ldw	r2,40(r2)
   413b4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   413b8:	e0bffc17 	ldw	r2,-16(fp)
   413bc:	10800b17 	ldw	r2,44(r2)
   413c0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   413c4:	e0fff717 	ldw	r3,-36(fp)
   413c8:	e0bff817 	ldw	r2,-32(fp)
   413cc:	18800536 	bltu	r3,r2,413e4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   413d0:	e0fff717 	ldw	r3,-36(fp)
   413d4:	e0bff817 	ldw	r2,-32(fp)
   413d8:	1885c83a 	sub	r2,r3,r2
   413dc:	e0bff615 	stw	r2,-40(fp)
   413e0:	00000406 	br	413f4 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   413e4:	00c20004 	movi	r3,2048
   413e8:	e0bff817 	ldw	r2,-32(fp)
   413ec:	1885c83a 	sub	r2,r3,r2
   413f0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   413f4:	e0bff617 	ldw	r2,-40(fp)
   413f8:	10001e26 	beq	r2,zero,41474 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   413fc:	e0fffe17 	ldw	r3,-8(fp)
   41400:	e0bff617 	ldw	r2,-40(fp)
   41404:	1880022e 	bgeu	r3,r2,41410 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   41408:	e0bffe17 	ldw	r2,-8(fp)
   4140c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   41410:	e0bffc17 	ldw	r2,-16(fp)
   41414:	10c00e04 	addi	r3,r2,56
   41418:	e0bff817 	ldw	r2,-32(fp)
   4141c:	1885883a 	add	r2,r3,r2
   41420:	e1bff617 	ldw	r6,-40(fp)
   41424:	100b883a 	mov	r5,r2
   41428:	e13ff517 	ldw	r4,-44(fp)
   4142c:	0042c980 	call	42c98 <memcpy>
      ptr   += n;
   41430:	e0fff517 	ldw	r3,-44(fp)
   41434:	e0bff617 	ldw	r2,-40(fp)
   41438:	1885883a 	add	r2,r3,r2
   4143c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   41440:	e0fffe17 	ldw	r3,-8(fp)
   41444:	e0bff617 	ldw	r2,-40(fp)
   41448:	1885c83a 	sub	r2,r3,r2
   4144c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   41450:	e0fff817 	ldw	r3,-32(fp)
   41454:	e0bff617 	ldw	r2,-40(fp)
   41458:	1885883a 	add	r2,r3,r2
   4145c:	10c1ffcc 	andi	r3,r2,2047
   41460:	e0bffc17 	ldw	r2,-16(fp)
   41464:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   41468:	e0bffe17 	ldw	r2,-8(fp)
   4146c:	00bfcf16 	blt	zero,r2,413ac <__alt_data_end+0xfffc13ac>
   41470:	00000106 	br	41478 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   41474:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   41478:	e0fff517 	ldw	r3,-44(fp)
   4147c:	e0bffd17 	ldw	r2,-12(fp)
   41480:	1880141e 	bne	r3,r2,414d4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   41484:	e0bfff17 	ldw	r2,-4(fp)
   41488:	1090000c 	andi	r2,r2,16384
   4148c:	1000131e 	bne	r2,zero,414dc <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   41490:	0001883a 	nop
   41494:	e0bffc17 	ldw	r2,-16(fp)
   41498:	10c00a17 	ldw	r3,40(r2)
   4149c:	e0bff717 	ldw	r2,-36(fp)
   414a0:	1880051e 	bne	r3,r2,414b8 <altera_avalon_jtag_uart_read+0x138>
   414a4:	e0bffc17 	ldw	r2,-16(fp)
   414a8:	10c00917 	ldw	r3,36(r2)
   414ac:	e0bffc17 	ldw	r2,-16(fp)
   414b0:	10800117 	ldw	r2,4(r2)
   414b4:	18bff736 	bltu	r3,r2,41494 <__alt_data_end+0xfffc1494>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   414b8:	e0bffc17 	ldw	r2,-16(fp)
   414bc:	10c00a17 	ldw	r3,40(r2)
   414c0:	e0bff717 	ldw	r2,-36(fp)
   414c4:	18800726 	beq	r3,r2,414e4 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   414c8:	e0bffe17 	ldw	r2,-8(fp)
   414cc:	00bfb716 	blt	zero,r2,413ac <__alt_data_end+0xfffc13ac>
   414d0:	00000506 	br	414e8 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   414d4:	0001883a 	nop
   414d8:	00000306 	br	414e8 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   414dc:	0001883a 	nop
   414e0:	00000106 	br	414e8 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   414e4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   414e8:	e0fff517 	ldw	r3,-44(fp)
   414ec:	e0bffd17 	ldw	r2,-12(fp)
   414f0:	18801826 	beq	r3,r2,41554 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   414f4:	0005303a 	rdctl	r2,status
   414f8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   414fc:	e0fffb17 	ldw	r3,-20(fp)
   41500:	00bfff84 	movi	r2,-2
   41504:	1884703a 	and	r2,r3,r2
   41508:	1001703a 	wrctl	status,r2
  
  return context;
   4150c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   41510:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   41514:	e0bffc17 	ldw	r2,-16(fp)
   41518:	10800817 	ldw	r2,32(r2)
   4151c:	10c00054 	ori	r3,r2,1
   41520:	e0bffc17 	ldw	r2,-16(fp)
   41524:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   41528:	e0bffc17 	ldw	r2,-16(fp)
   4152c:	10800017 	ldw	r2,0(r2)
   41530:	10800104 	addi	r2,r2,4
   41534:	1007883a 	mov	r3,r2
   41538:	e0bffc17 	ldw	r2,-16(fp)
   4153c:	10800817 	ldw	r2,32(r2)
   41540:	18800035 	stwio	r2,0(r3)
   41544:	e0bffa17 	ldw	r2,-24(fp)
   41548:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4154c:	e0bff917 	ldw	r2,-28(fp)
   41550:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   41554:	e0fff517 	ldw	r3,-44(fp)
   41558:	e0bffd17 	ldw	r2,-12(fp)
   4155c:	18800426 	beq	r3,r2,41570 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   41560:	e0fff517 	ldw	r3,-44(fp)
   41564:	e0bffd17 	ldw	r2,-12(fp)
   41568:	1885c83a 	sub	r2,r3,r2
   4156c:	00000606 	br	41588 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   41570:	e0bfff17 	ldw	r2,-4(fp)
   41574:	1090000c 	andi	r2,r2,16384
   41578:	10000226 	beq	r2,zero,41584 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   4157c:	00bffd44 	movi	r2,-11
   41580:	00000106 	br	41588 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   41584:	00bffec4 	movi	r2,-5
}
   41588:	e037883a 	mov	sp,fp
   4158c:	dfc00117 	ldw	ra,4(sp)
   41590:	df000017 	ldw	fp,0(sp)
   41594:	dec00204 	addi	sp,sp,8
   41598:	f800283a 	ret

0004159c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   4159c:	defff304 	addi	sp,sp,-52
   415a0:	dfc00c15 	stw	ra,48(sp)
   415a4:	df000b15 	stw	fp,44(sp)
   415a8:	df000b04 	addi	fp,sp,44
   415ac:	e13ffc15 	stw	r4,-16(fp)
   415b0:	e17ffd15 	stw	r5,-12(fp)
   415b4:	e1bffe15 	stw	r6,-8(fp)
   415b8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   415bc:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   415c0:	e0bffd17 	ldw	r2,-12(fp)
   415c4:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   415c8:	00003706 	br	416a8 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   415cc:	e0bffc17 	ldw	r2,-16(fp)
   415d0:	10800c17 	ldw	r2,48(r2)
   415d4:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   415d8:	e0bffc17 	ldw	r2,-16(fp)
   415dc:	10800d17 	ldw	r2,52(r2)
   415e0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   415e4:	e0fff917 	ldw	r3,-28(fp)
   415e8:	e0bff517 	ldw	r2,-44(fp)
   415ec:	1880062e 	bgeu	r3,r2,41608 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   415f0:	e0fff517 	ldw	r3,-44(fp)
   415f4:	e0bff917 	ldw	r2,-28(fp)
   415f8:	1885c83a 	sub	r2,r3,r2
   415fc:	10bfffc4 	addi	r2,r2,-1
   41600:	e0bff615 	stw	r2,-40(fp)
   41604:	00000b06 	br	41634 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   41608:	e0bff517 	ldw	r2,-44(fp)
   4160c:	10000526 	beq	r2,zero,41624 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   41610:	00c20004 	movi	r3,2048
   41614:	e0bff917 	ldw	r2,-28(fp)
   41618:	1885c83a 	sub	r2,r3,r2
   4161c:	e0bff615 	stw	r2,-40(fp)
   41620:	00000406 	br	41634 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   41624:	00c1ffc4 	movi	r3,2047
   41628:	e0bff917 	ldw	r2,-28(fp)
   4162c:	1885c83a 	sub	r2,r3,r2
   41630:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   41634:	e0bff617 	ldw	r2,-40(fp)
   41638:	10001e26 	beq	r2,zero,416b4 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   4163c:	e0fffe17 	ldw	r3,-8(fp)
   41640:	e0bff617 	ldw	r2,-40(fp)
   41644:	1880022e 	bgeu	r3,r2,41650 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   41648:	e0bffe17 	ldw	r2,-8(fp)
   4164c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   41650:	e0bffc17 	ldw	r2,-16(fp)
   41654:	10c20e04 	addi	r3,r2,2104
   41658:	e0bff917 	ldw	r2,-28(fp)
   4165c:	1885883a 	add	r2,r3,r2
   41660:	e1bff617 	ldw	r6,-40(fp)
   41664:	e17ffd17 	ldw	r5,-12(fp)
   41668:	1009883a 	mov	r4,r2
   4166c:	0042c980 	call	42c98 <memcpy>
      ptr   += n;
   41670:	e0fffd17 	ldw	r3,-12(fp)
   41674:	e0bff617 	ldw	r2,-40(fp)
   41678:	1885883a 	add	r2,r3,r2
   4167c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   41680:	e0fffe17 	ldw	r3,-8(fp)
   41684:	e0bff617 	ldw	r2,-40(fp)
   41688:	1885c83a 	sub	r2,r3,r2
   4168c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   41690:	e0fff917 	ldw	r3,-28(fp)
   41694:	e0bff617 	ldw	r2,-40(fp)
   41698:	1885883a 	add	r2,r3,r2
   4169c:	10c1ffcc 	andi	r3,r2,2047
   416a0:	e0bffc17 	ldw	r2,-16(fp)
   416a4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   416a8:	e0bffe17 	ldw	r2,-8(fp)
   416ac:	00bfc716 	blt	zero,r2,415cc <__alt_data_end+0xfffc15cc>
   416b0:	00000106 	br	416b8 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   416b4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   416b8:	0005303a 	rdctl	r2,status
   416bc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   416c0:	e0fffb17 	ldw	r3,-20(fp)
   416c4:	00bfff84 	movi	r2,-2
   416c8:	1884703a 	and	r2,r3,r2
   416cc:	1001703a 	wrctl	status,r2
  
  return context;
   416d0:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   416d4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   416d8:	e0bffc17 	ldw	r2,-16(fp)
   416dc:	10800817 	ldw	r2,32(r2)
   416e0:	10c00094 	ori	r3,r2,2
   416e4:	e0bffc17 	ldw	r2,-16(fp)
   416e8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   416ec:	e0bffc17 	ldw	r2,-16(fp)
   416f0:	10800017 	ldw	r2,0(r2)
   416f4:	10800104 	addi	r2,r2,4
   416f8:	1007883a 	mov	r3,r2
   416fc:	e0bffc17 	ldw	r2,-16(fp)
   41700:	10800817 	ldw	r2,32(r2)
   41704:	18800035 	stwio	r2,0(r3)
   41708:	e0bffa17 	ldw	r2,-24(fp)
   4170c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   41710:	e0bff817 	ldw	r2,-32(fp)
   41714:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   41718:	e0bffe17 	ldw	r2,-8(fp)
   4171c:	0080100e 	bge	zero,r2,41760 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   41720:	e0bfff17 	ldw	r2,-4(fp)
   41724:	1090000c 	andi	r2,r2,16384
   41728:	1000101e 	bne	r2,zero,4176c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   4172c:	0001883a 	nop
   41730:	e0bffc17 	ldw	r2,-16(fp)
   41734:	10c00d17 	ldw	r3,52(r2)
   41738:	e0bff517 	ldw	r2,-44(fp)
   4173c:	1880051e 	bne	r3,r2,41754 <altera_avalon_jtag_uart_write+0x1b8>
   41740:	e0bffc17 	ldw	r2,-16(fp)
   41744:	10c00917 	ldw	r3,36(r2)
   41748:	e0bffc17 	ldw	r2,-16(fp)
   4174c:	10800117 	ldw	r2,4(r2)
   41750:	18bff736 	bltu	r3,r2,41730 <__alt_data_end+0xfffc1730>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   41754:	e0bffc17 	ldw	r2,-16(fp)
   41758:	10800917 	ldw	r2,36(r2)
   4175c:	1000051e 	bne	r2,zero,41774 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   41760:	e0bffe17 	ldw	r2,-8(fp)
   41764:	00bfd016 	blt	zero,r2,416a8 <__alt_data_end+0xfffc16a8>
   41768:	00000306 	br	41778 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   4176c:	0001883a 	nop
   41770:	00000106 	br	41778 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   41774:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   41778:	e0fffd17 	ldw	r3,-12(fp)
   4177c:	e0bff717 	ldw	r2,-36(fp)
   41780:	18800426 	beq	r3,r2,41794 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   41784:	e0fffd17 	ldw	r3,-12(fp)
   41788:	e0bff717 	ldw	r2,-36(fp)
   4178c:	1885c83a 	sub	r2,r3,r2
   41790:	00000606 	br	417ac <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   41794:	e0bfff17 	ldw	r2,-4(fp)
   41798:	1090000c 	andi	r2,r2,16384
   4179c:	10000226 	beq	r2,zero,417a8 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   417a0:	00bffd44 	movi	r2,-11
   417a4:	00000106 	br	417ac <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   417a8:	00bffec4 	movi	r2,-5
}
   417ac:	e037883a 	mov	sp,fp
   417b0:	dfc00117 	ldw	ra,4(sp)
   417b4:	df000017 	ldw	fp,0(sp)
   417b8:	dec00204 	addi	sp,sp,8
   417bc:	f800283a 	ret

000417c0 <perf_get_section_time>:

#include "altera_avalon_performance_counter.h"
#include "system.h"

alt_u64 perf_get_section_time (void* hw_base_address, int which_section)
{
   417c0:	defff904 	addi	sp,sp,-28
   417c4:	df000615 	stw	fp,24(sp)
   417c8:	df000604 	addi	fp,sp,24
   417cc:	e13ffe15 	stw	r4,-8(fp)
   417d0:	e17fff15 	stw	r5,-4(fp)
  alt_u32 lo;
  alt_u32 hi;
  alt_u64 result = 0;
   417d4:	e03ffa15 	stw	zero,-24(fp)
   417d8:	e03ffb15 	stw	zero,-20(fp)

  PERF_STOP_MEASURING(hw_base_address);
   417dc:	000b883a 	mov	r5,zero
   417e0:	e13ffe17 	ldw	r4,-8(fp)
   417e4:	21400035 	stwio	r5,0(r4)
  lo = IORD(hw_base_address, ( which_section*4   ));
   417e8:	e13fff17 	ldw	r4,-4(fp)
   417ec:	2008913a 	slli	r4,r4,4
   417f0:	200b883a 	mov	r5,r4
   417f4:	e13ffe17 	ldw	r4,-8(fp)
   417f8:	2149883a 	add	r4,r4,r5
   417fc:	21000037 	ldwio	r4,0(r4)
   41800:	e13ffc15 	stw	r4,-16(fp)
  hi = IORD(hw_base_address, ((which_section*4)+1));
   41804:	e13fff17 	ldw	r4,-4(fp)
   41808:	2008913a 	slli	r4,r4,4
   4180c:	21000104 	addi	r4,r4,4
   41810:	200b883a 	mov	r5,r4
   41814:	e13ffe17 	ldw	r4,-8(fp)
   41818:	2149883a 	add	r4,r4,r5
   4181c:	21000037 	ldwio	r4,0(r4)
   41820:	e13ffd15 	stw	r4,-12(fp)

  result = ((alt_u64)(((alt_u64) hi) << ((alt_u64)32))) | 
   41824:	e13ffd17 	ldw	r4,-12(fp)
   41828:	2011883a 	mov	r8,r4
   4182c:	0013883a 	mov	r9,zero
   41830:	4006983a 	sll	r3,r8,zero
   41834:	0005883a 	mov	r2,zero
           ((alt_u64)(((alt_u64) lo)                 ))  ;
   41838:	e13ffc17 	ldw	r4,-16(fp)
   4183c:	200d883a 	mov	r6,r4
   41840:	000f883a 	mov	r7,zero

  PERF_STOP_MEASURING(hw_base_address);
  lo = IORD(hw_base_address, ( which_section*4   ));
  hi = IORD(hw_base_address, ((which_section*4)+1));

  result = ((alt_u64)(((alt_u64) hi) << ((alt_u64)32))) | 
   41844:	1188b03a 	or	r4,r2,r6
   41848:	e13ffa15 	stw	r4,-24(fp)
   4184c:	19c4b03a 	or	r2,r3,r7
   41850:	e0bffb15 	stw	r2,-20(fp)
           ((alt_u64)(((alt_u64) lo)                 ))  ;
  return result;
   41854:	e0bffa17 	ldw	r2,-24(fp)
   41858:	e0fffb17 	ldw	r3,-20(fp)
   4185c:	1009883a 	mov	r4,r2
   41860:	180b883a 	mov	r5,r3
}
   41864:	2005883a 	mov	r2,r4
   41868:	2807883a 	mov	r3,r5
   4186c:	e037883a 	mov	sp,fp
   41870:	df000017 	ldw	fp,0(sp)
   41874:	dec00104 	addi	sp,sp,4
   41878:	f800283a 	ret

0004187c <perf_get_total_time>:

alt_u64 perf_get_total_time   (void* hw_base_address)
{
   4187c:	defffd04 	addi	sp,sp,-12
   41880:	dfc00215 	stw	ra,8(sp)
   41884:	df000115 	stw	fp,4(sp)
   41888:	df000104 	addi	fp,sp,4
   4188c:	e13fff15 	stw	r4,-4(fp)
  return perf_get_section_time (hw_base_address, 0);
   41890:	000b883a 	mov	r5,zero
   41894:	e13fff17 	ldw	r4,-4(fp)
   41898:	00417c00 	call	417c0 <perf_get_section_time>
   4189c:	100b883a 	mov	r5,r2
   418a0:	180d883a 	mov	r6,r3
   418a4:	2807883a 	mov	r3,r5
   418a8:	3009883a 	mov	r4,r6
}
   418ac:	1805883a 	mov	r2,r3
   418b0:	2007883a 	mov	r3,r4
   418b4:	e037883a 	mov	sp,fp
   418b8:	dfc00117 	ldw	ra,4(sp)
   418bc:	df000017 	ldw	fp,0(sp)
   418c0:	dec00204 	addi	sp,sp,8
   418c4:	f800283a 	ret

000418c8 <perf_get_num_starts>:

alt_u32 perf_get_num_starts   (void* hw_base_address, int which_section)
{
   418c8:	defffd04 	addi	sp,sp,-12
   418cc:	df000215 	stw	fp,8(sp)
   418d0:	df000204 	addi	fp,sp,8
   418d4:	e13ffe15 	stw	r4,-8(fp)
   418d8:	e17fff15 	stw	r5,-4(fp)
  return IORD(hw_base_address, ((which_section*4)+2));
   418dc:	e0bfff17 	ldw	r2,-4(fp)
   418e0:	1004913a 	slli	r2,r2,4
   418e4:	10800204 	addi	r2,r2,8
   418e8:	1007883a 	mov	r3,r2
   418ec:	e0bffe17 	ldw	r2,-8(fp)
   418f0:	10c5883a 	add	r2,r2,r3
   418f4:	10800037 	ldwio	r2,0(r2)
}
   418f8:	e037883a 	mov	sp,fp
   418fc:	df000017 	ldw	fp,0(sp)
   41900:	dec00104 	addi	sp,sp,4
   41904:	f800283a 	ret

00041908 <alt_get_performance_counter_base>:
 * in Nios II IDE just like is done for the system clock timer and
 * timestamp timer.
 */
void* 
alt_get_performance_counter_base()
{
   41908:	deffff04 	addi	sp,sp,-4
   4190c:	df000015 	stw	fp,0(sp)
   41910:	d839883a 	mov	fp,sp
#ifdef PERFORMANCE_COUNTER_0_BASE
    return (void*)PERFORMANCE_COUNTER_0_BASE;
   41914:	00800234 	movhi	r2,8
   41918:	10840004 	addi	r2,r2,4096
#else
    return (void*)0;
#endif
}
   4191c:	e037883a 	mov	sp,fp
   41920:	df000017 	ldw	fp,0(sp)
   41924:	dec00104 	addi	sp,sp,4
   41928:	f800283a 	ret

0004192c <alt_get_cpu_freq>:
 * If the performance counter peripheral is in a different time domain,
 * this won't necessarily be the same frequency of the CPU.
 */
alt_u32 
alt_get_cpu_freq()
{
   4192c:	deffff04 	addi	sp,sp,-4
   41930:	df000015 	stw	fp,0(sp)
   41934:	d839883a 	mov	fp,sp
    return ALT_CPU_FREQ;
   41938:	0080bef4 	movhi	r2,763
   4193c:	10bc2004 	addi	r2,r2,-3968
}
   41940:	e037883a 	mov	sp,fp
   41944:	df000017 	ldw	fp,0(sp)
   41948:	dec00104 	addi	sp,sp,4
   4194c:	f800283a 	ret

00041950 <perf_print_formatted_report>:

#ifndef SMALL_C_LIB 
int perf_print_formatted_report (void* perf_base, 
                                 alt_u32 clock_freq_hertz,
                                 int num_sections, ...)
{
   41950:	deffe504 	addi	sp,sp,-108
   41954:	dfc01915 	stw	ra,100(sp)
   41958:	df001815 	stw	fp,96(sp)
   4195c:	dcc01715 	stw	r19,92(sp)
   41960:	dc801615 	stw	r18,88(sp)
   41964:	dc401515 	stw	r17,84(sp)
   41968:	dc001415 	stw	r16,80(sp)
   4196c:	df001804 	addi	fp,sp,96
   41970:	e13ff915 	stw	r4,-28(fp)
   41974:	e17ffa15 	stw	r5,-24(fp)
   41978:	e1bffb15 	stw	r6,-20(fp)
   4197c:	e1c00215 	stw	r7,8(fp)
  va_list name_args;
  double total_sec;
  alt_u64 total_clocks;
  alt_u64 section_clocks;
  char* section_name;
  int section_num = 1;
   41980:	00800044 	movi	r2,1
   41984:	e0bfef15 	stw	r2,-68(fp)

  const char* separator = 
   41988:	00800174 	movhi	r2,5
   4198c:	10807e04 	addi	r2,r2,504
   41990:	e0bff015 	stw	r2,-64(fp)
    "+---------------+-----+-----------+---------------+-----------+\n";
  const char* column_header = 
   41994:	00800174 	movhi	r2,5
   41998:	10808f04 	addi	r2,r2,572
   4199c:	e0bff115 	stw	r2,-60(fp)
    "| Section       |  %  | Time (sec)|  Time (clocks)|Occurrences|\n";

  PERF_STOP_MEASURING (perf_base);
   419a0:	0007883a 	mov	r3,zero
   419a4:	e0bff917 	ldw	r2,-28(fp)
   419a8:	10c00035 	stwio	r3,0(r2)

  va_start (name_args, num_sections);
   419ac:	e0800204 	addi	r2,fp,8
   419b0:	e0bff815 	stw	r2,-32(fp)

  total_clocks = perf_get_total_time (perf_base);
   419b4:	e13ff917 	ldw	r4,-28(fp)
   419b8:	004187c0 	call	4187c <perf_get_total_time>
   419bc:	e0bff215 	stw	r2,-56(fp)
   419c0:	e0fff315 	stw	r3,-52(fp)
  total_sec    = ((double)total_clocks) / clock_freq_hertz;
   419c4:	e13ff217 	ldw	r4,-56(fp)
   419c8:	e17ff317 	ldw	r5,-52(fp)
   419cc:	004c6180 	call	4c618 <__floatundidf>
   419d0:	1021883a 	mov	r16,r2
   419d4:	1823883a 	mov	r17,r3
   419d8:	e13ffa17 	ldw	r4,-24(fp)
   419dc:	004f8480 	call	4f848 <__floatunsidf>
   419e0:	1009883a 	mov	r4,r2
   419e4:	180b883a 	mov	r5,r3
   419e8:	200d883a 	mov	r6,r4
   419ec:	280f883a 	mov	r7,r5
   419f0:	8009883a 	mov	r4,r16
   419f4:	880b883a 	mov	r5,r17
   419f8:	004db980 	call	4db98 <__divdf3>
   419fc:	1009883a 	mov	r4,r2
   41a00:	180b883a 	mov	r5,r3
   41a04:	e13ff415 	stw	r4,-48(fp)
   41a08:	e17ff515 	stw	r5,-44(fp)

  // Print the total at the top:
  printf ("--Performance Counter Report--\nTotal Time: %3G seconds  (%lld clock-cycles)\n%s%s%s",
   41a0c:	e0bff017 	ldw	r2,-64(fp)
   41a10:	d8800315 	stw	r2,12(sp)
   41a14:	e0bff117 	ldw	r2,-60(fp)
   41a18:	d8800215 	stw	r2,8(sp)
   41a1c:	e0bff017 	ldw	r2,-64(fp)
   41a20:	d8800115 	stw	r2,4(sp)
   41a24:	e0bff317 	ldw	r2,-52(fp)
   41a28:	d8800015 	stw	r2,0(sp)
   41a2c:	e1fff217 	ldw	r7,-56(fp)
   41a30:	e17ff417 	ldw	r5,-48(fp)
   41a34:	e1bff517 	ldw	r6,-44(fp)
   41a38:	01000174 	movhi	r4,5
   41a3c:	2100a004 	addi	r4,r4,640
   41a40:	0042e100 	call	42e10 <printf>
          total_sec, total_clocks, separator, column_header, separator);

  section_name = va_arg(name_args, char*);
   41a44:	e0bff817 	ldw	r2,-32(fp)
   41a48:	10c00104 	addi	r3,r2,4
   41a4c:	e0fff815 	stw	r3,-32(fp)
   41a50:	10800017 	ldw	r2,0(r2)
   41a54:	e0bfee15 	stw	r2,-72(fp)

  for (section_num = 1; section_num <= num_sections; section_num++)
   41a58:	00800044 	movi	r2,1
   41a5c:	e0bfef15 	stw	r2,-68(fp)
   41a60:	00004e06 	br	41b9c <perf_print_formatted_report+0x24c>
    {
      section_clocks = perf_get_section_time (perf_base, section_num);
   41a64:	e17fef17 	ldw	r5,-68(fp)
   41a68:	e13ff917 	ldw	r4,-28(fp)
   41a6c:	00417c00 	call	417c0 <perf_get_section_time>
   41a70:	e0bff615 	stw	r2,-40(fp)
   41a74:	e0fff715 	stw	r3,-36(fp)

      printf ("|%-15s|%5.3g|%11.5f|%15lld|%11u|\n%s",
              section_name,
              ((((double) section_clocks)) * 100) / total_clocks,
   41a78:	e13ff617 	ldw	r4,-40(fp)
   41a7c:	e17ff717 	ldw	r5,-36(fp)
   41a80:	004c6180 	call	4c618 <__floatundidf>
   41a84:	1011883a 	mov	r8,r2
   41a88:	1813883a 	mov	r9,r3
   41a8c:	000d883a 	mov	r6,zero
   41a90:	01d01674 	movhi	r7,16473
   41a94:	4009883a 	mov	r4,r8
   41a98:	480b883a 	mov	r5,r9
   41a9c:	004e6d80 	call	4e6d8 <__muldf3>
   41aa0:	1009883a 	mov	r4,r2
   41aa4:	180b883a 	mov	r5,r3
   41aa8:	2021883a 	mov	r16,r4
   41aac:	2823883a 	mov	r17,r5

  for (section_num = 1; section_num <= num_sections; section_num++)
    {
      section_clocks = perf_get_section_time (perf_base, section_num);

      printf ("|%-15s|%5.3g|%11.5f|%15lld|%11u|\n%s",
   41ab0:	e13ff217 	ldw	r4,-56(fp)
   41ab4:	e17ff317 	ldw	r5,-52(fp)
   41ab8:	004c6180 	call	4c618 <__floatundidf>
   41abc:	1009883a 	mov	r4,r2
   41ac0:	180b883a 	mov	r5,r3
   41ac4:	200d883a 	mov	r6,r4
   41ac8:	280f883a 	mov	r7,r5
   41acc:	8009883a 	mov	r4,r16
   41ad0:	880b883a 	mov	r5,r17
   41ad4:	004db980 	call	4db98 <__divdf3>
   41ad8:	1009883a 	mov	r4,r2
   41adc:	180b883a 	mov	r5,r3
   41ae0:	2025883a 	mov	r18,r4
   41ae4:	2827883a 	mov	r19,r5
              section_name,
              ((((double) section_clocks)) * 100) / total_clocks,
              (((double) section_clocks)) / clock_freq_hertz,
   41ae8:	e13ff617 	ldw	r4,-40(fp)
   41aec:	e17ff717 	ldw	r5,-36(fp)
   41af0:	004c6180 	call	4c618 <__floatundidf>
   41af4:	1021883a 	mov	r16,r2
   41af8:	1823883a 	mov	r17,r3

  for (section_num = 1; section_num <= num_sections; section_num++)
    {
      section_clocks = perf_get_section_time (perf_base, section_num);

      printf ("|%-15s|%5.3g|%11.5f|%15lld|%11u|\n%s",
   41afc:	e13ffa17 	ldw	r4,-24(fp)
   41b00:	004f8480 	call	4f848 <__floatunsidf>
   41b04:	1009883a 	mov	r4,r2
   41b08:	180b883a 	mov	r5,r3
   41b0c:	200d883a 	mov	r6,r4
   41b10:	280f883a 	mov	r7,r5
   41b14:	8009883a 	mov	r4,r16
   41b18:	880b883a 	mov	r5,r17
   41b1c:	004db980 	call	4db98 <__divdf3>
   41b20:	1009883a 	mov	r4,r2
   41b24:	180b883a 	mov	r5,r3
   41b28:	2021883a 	mov	r16,r4
   41b2c:	2823883a 	mov	r17,r5
              section_name,
              ((((double) section_clocks)) * 100) / total_clocks,
              (((double) section_clocks)) / clock_freq_hertz,
              section_clocks,
              (unsigned int) perf_get_num_starts (perf_base, section_num),
   41b30:	e17fef17 	ldw	r5,-68(fp)
   41b34:	e13ff917 	ldw	r4,-28(fp)
   41b38:	00418c80 	call	418c8 <perf_get_num_starts>
   41b3c:	1007883a 	mov	r3,r2

  for (section_num = 1; section_num <= num_sections; section_num++)
    {
      section_clocks = perf_get_section_time (perf_base, section_num);

      printf ("|%-15s|%5.3g|%11.5f|%15lld|%11u|\n%s",
   41b40:	e0bff017 	ldw	r2,-64(fp)
   41b44:	d8800515 	stw	r2,20(sp)
   41b48:	d8c00415 	stw	r3,16(sp)
   41b4c:	e0bff617 	ldw	r2,-40(fp)
   41b50:	d8800215 	stw	r2,8(sp)
   41b54:	e0bff717 	ldw	r2,-36(fp)
   41b58:	d8800315 	stw	r2,12(sp)
   41b5c:	dc000015 	stw	r16,0(sp)
   41b60:	dc400115 	stw	r17,4(sp)
   41b64:	900d883a 	mov	r6,r18
   41b68:	980f883a 	mov	r7,r19
   41b6c:	e17fee17 	ldw	r5,-72(fp)
   41b70:	01000174 	movhi	r4,5
   41b74:	2100b504 	addi	r4,r4,724
   41b78:	0042e100 	call	42e10 <printf>
              section_clocks,
              (unsigned int) perf_get_num_starts (perf_base, section_num),
              separator
              );

      section_name = va_arg(name_args, char*);
   41b7c:	e0bff817 	ldw	r2,-32(fp)
   41b80:	10c00104 	addi	r3,r2,4
   41b84:	e0fff815 	stw	r3,-32(fp)
   41b88:	10800017 	ldw	r2,0(r2)
   41b8c:	e0bfee15 	stw	r2,-72(fp)
  printf ("--Performance Counter Report--\nTotal Time: %3G seconds  (%lld clock-cycles)\n%s%s%s",
          total_sec, total_clocks, separator, column_header, separator);

  section_name = va_arg(name_args, char*);

  for (section_num = 1; section_num <= num_sections; section_num++)
   41b90:	e0bfef17 	ldw	r2,-68(fp)
   41b94:	10800044 	addi	r2,r2,1
   41b98:	e0bfef15 	stw	r2,-68(fp)
   41b9c:	e0bfef17 	ldw	r2,-68(fp)
   41ba0:	e0fffb17 	ldw	r3,-20(fp)
   41ba4:	18bfaf0e 	bge	r3,r2,41a64 <__alt_data_end+0xfffc1a64>
      section_name = va_arg(name_args, char*);
    }

  va_end (name_args);

  return 0;
   41ba8:	0005883a 	mov	r2,zero
}
   41bac:	e6fffc04 	addi	sp,fp,-16
   41bb0:	dfc00517 	ldw	ra,20(sp)
   41bb4:	df000417 	ldw	fp,16(sp)
   41bb8:	dcc00317 	ldw	r19,12(sp)
   41bbc:	dc800217 	ldw	r18,8(sp)
   41bc0:	dc400117 	ldw	r17,4(sp)
   41bc4:	dc000017 	ldw	r16,0(sp)
   41bc8:	dec00704 	addi	sp,sp,28
   41bcc:	f800283a 	ret

00041bd0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   41bd0:	defff504 	addi	sp,sp,-44
   41bd4:	df000a15 	stw	fp,40(sp)
   41bd8:	df000a04 	addi	fp,sp,40
   41bdc:	e13ffc15 	stw	r4,-16(fp)
   41be0:	e17ffd15 	stw	r5,-12(fp)
   41be4:	e1bffe15 	stw	r6,-8(fp)
   41be8:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   41bec:	e03ff615 	stw	zero,-40(fp)
   41bf0:	d0a6d317 	ldw	r2,-25780(gp)
  
  if (alt_ticks_per_second ())
   41bf4:	10003c26 	beq	r2,zero,41ce8 <alt_alarm_start+0x118>
  {
    if (alarm)
   41bf8:	e0bffc17 	ldw	r2,-16(fp)
   41bfc:	10003826 	beq	r2,zero,41ce0 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   41c00:	e0bffc17 	ldw	r2,-16(fp)
   41c04:	e0fffe17 	ldw	r3,-8(fp)
   41c08:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   41c0c:	e0bffc17 	ldw	r2,-16(fp)
   41c10:	e0ffff17 	ldw	r3,-4(fp)
   41c14:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   41c18:	0005303a 	rdctl	r2,status
   41c1c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   41c20:	e0fff917 	ldw	r3,-28(fp)
   41c24:	00bfff84 	movi	r2,-2
   41c28:	1884703a 	and	r2,r3,r2
   41c2c:	1001703a 	wrctl	status,r2
  
  return context;
   41c30:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   41c34:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   41c38:	d0a6d417 	ldw	r2,-25776(gp)
      
      current_nticks = alt_nticks();
   41c3c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   41c40:	e0fffd17 	ldw	r3,-12(fp)
   41c44:	e0bff617 	ldw	r2,-40(fp)
   41c48:	1885883a 	add	r2,r3,r2
   41c4c:	10c00044 	addi	r3,r2,1
   41c50:	e0bffc17 	ldw	r2,-16(fp)
   41c54:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   41c58:	e0bffc17 	ldw	r2,-16(fp)
   41c5c:	10c00217 	ldw	r3,8(r2)
   41c60:	e0bff617 	ldw	r2,-40(fp)
   41c64:	1880042e 	bgeu	r3,r2,41c78 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   41c68:	e0bffc17 	ldw	r2,-16(fp)
   41c6c:	00c00044 	movi	r3,1
   41c70:	10c00405 	stb	r3,16(r2)
   41c74:	00000206 	br	41c80 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   41c78:	e0bffc17 	ldw	r2,-16(fp)
   41c7c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   41c80:	e0bffc17 	ldw	r2,-16(fp)
   41c84:	d0e00904 	addi	r3,gp,-32732
   41c88:	e0fffa15 	stw	r3,-24(fp)
   41c8c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   41c90:	e0bffb17 	ldw	r2,-20(fp)
   41c94:	e0fffa17 	ldw	r3,-24(fp)
   41c98:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   41c9c:	e0bffa17 	ldw	r2,-24(fp)
   41ca0:	10c00017 	ldw	r3,0(r2)
   41ca4:	e0bffb17 	ldw	r2,-20(fp)
   41ca8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   41cac:	e0bffa17 	ldw	r2,-24(fp)
   41cb0:	10800017 	ldw	r2,0(r2)
   41cb4:	e0fffb17 	ldw	r3,-20(fp)
   41cb8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   41cbc:	e0bffa17 	ldw	r2,-24(fp)
   41cc0:	e0fffb17 	ldw	r3,-20(fp)
   41cc4:	10c00015 	stw	r3,0(r2)
   41cc8:	e0bff817 	ldw	r2,-32(fp)
   41ccc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   41cd0:	e0bff717 	ldw	r2,-36(fp)
   41cd4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   41cd8:	0005883a 	mov	r2,zero
   41cdc:	00000306 	br	41cec <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   41ce0:	00bffa84 	movi	r2,-22
   41ce4:	00000106 	br	41cec <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   41ce8:	00bfde84 	movi	r2,-134
  }
}
   41cec:	e037883a 	mov	sp,fp
   41cf0:	df000017 	ldw	fp,0(sp)
   41cf4:	dec00104 	addi	sp,sp,4
   41cf8:	f800283a 	ret

00041cfc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   41cfc:	defffe04 	addi	sp,sp,-8
   41d00:	dfc00115 	stw	ra,4(sp)
   41d04:	df000015 	stw	fp,0(sp)
   41d08:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   41d0c:	d0a00717 	ldw	r2,-32740(gp)
   41d10:	10000326 	beq	r2,zero,41d20 <alt_get_errno+0x24>
   41d14:	d0a00717 	ldw	r2,-32740(gp)
   41d18:	103ee83a 	callr	r2
   41d1c:	00000106 	br	41d24 <alt_get_errno+0x28>
   41d20:	d0a6d604 	addi	r2,gp,-25768
}
   41d24:	e037883a 	mov	sp,fp
   41d28:	dfc00117 	ldw	ra,4(sp)
   41d2c:	df000017 	ldw	fp,0(sp)
   41d30:	dec00204 	addi	sp,sp,8
   41d34:	f800283a 	ret

00041d38 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   41d38:	defffb04 	addi	sp,sp,-20
   41d3c:	dfc00415 	stw	ra,16(sp)
   41d40:	df000315 	stw	fp,12(sp)
   41d44:	df000304 	addi	fp,sp,12
   41d48:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   41d4c:	e0bfff17 	ldw	r2,-4(fp)
   41d50:	10000616 	blt	r2,zero,41d6c <close+0x34>
   41d54:	e0bfff17 	ldw	r2,-4(fp)
   41d58:	10c00324 	muli	r3,r2,12
   41d5c:	00800174 	movhi	r2,5
   41d60:	10859504 	addi	r2,r2,5716
   41d64:	1885883a 	add	r2,r3,r2
   41d68:	00000106 	br	41d70 <close+0x38>
   41d6c:	0005883a 	mov	r2,zero
   41d70:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   41d74:	e0bffd17 	ldw	r2,-12(fp)
   41d78:	10001926 	beq	r2,zero,41de0 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   41d7c:	e0bffd17 	ldw	r2,-12(fp)
   41d80:	10800017 	ldw	r2,0(r2)
   41d84:	10800417 	ldw	r2,16(r2)
   41d88:	10000626 	beq	r2,zero,41da4 <close+0x6c>
   41d8c:	e0bffd17 	ldw	r2,-12(fp)
   41d90:	10800017 	ldw	r2,0(r2)
   41d94:	10800417 	ldw	r2,16(r2)
   41d98:	e13ffd17 	ldw	r4,-12(fp)
   41d9c:	103ee83a 	callr	r2
   41da0:	00000106 	br	41da8 <close+0x70>
   41da4:	0005883a 	mov	r2,zero
   41da8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   41dac:	e13fff17 	ldw	r4,-4(fp)
   41db0:	004263c0 	call	4263c <alt_release_fd>
    if (rval < 0)
   41db4:	e0bffe17 	ldw	r2,-8(fp)
   41db8:	1000070e 	bge	r2,zero,41dd8 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   41dbc:	0041cfc0 	call	41cfc <alt_get_errno>
   41dc0:	1007883a 	mov	r3,r2
   41dc4:	e0bffe17 	ldw	r2,-8(fp)
   41dc8:	0085c83a 	sub	r2,zero,r2
   41dcc:	18800015 	stw	r2,0(r3)
      return -1;
   41dd0:	00bfffc4 	movi	r2,-1
   41dd4:	00000706 	br	41df4 <close+0xbc>
    }
    return 0;
   41dd8:	0005883a 	mov	r2,zero
   41ddc:	00000506 	br	41df4 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   41de0:	0041cfc0 	call	41cfc <alt_get_errno>
   41de4:	1007883a 	mov	r3,r2
   41de8:	00801444 	movi	r2,81
   41dec:	18800015 	stw	r2,0(r3)
    return -1;
   41df0:	00bfffc4 	movi	r2,-1
  }
}
   41df4:	e037883a 	mov	sp,fp
   41df8:	dfc00117 	ldw	ra,4(sp)
   41dfc:	df000017 	ldw	fp,0(sp)
   41e00:	dec00204 	addi	sp,sp,8
   41e04:	f800283a 	ret

00041e08 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   41e08:	defffc04 	addi	sp,sp,-16
   41e0c:	df000315 	stw	fp,12(sp)
   41e10:	df000304 	addi	fp,sp,12
   41e14:	e13ffd15 	stw	r4,-12(fp)
   41e18:	e17ffe15 	stw	r5,-8(fp)
   41e1c:	e1bfff15 	stw	r6,-4(fp)
  return len;
   41e20:	e0bfff17 	ldw	r2,-4(fp)
}
   41e24:	e037883a 	mov	sp,fp
   41e28:	df000017 	ldw	fp,0(sp)
   41e2c:	dec00104 	addi	sp,sp,4
   41e30:	f800283a 	ret

00041e34 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   41e34:	defffe04 	addi	sp,sp,-8
   41e38:	dfc00115 	stw	ra,4(sp)
   41e3c:	df000015 	stw	fp,0(sp)
   41e40:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   41e44:	d0a00717 	ldw	r2,-32740(gp)
   41e48:	10000326 	beq	r2,zero,41e58 <alt_get_errno+0x24>
   41e4c:	d0a00717 	ldw	r2,-32740(gp)
   41e50:	103ee83a 	callr	r2
   41e54:	00000106 	br	41e5c <alt_get_errno+0x28>
   41e58:	d0a6d604 	addi	r2,gp,-25768
}
   41e5c:	e037883a 	mov	sp,fp
   41e60:	dfc00117 	ldw	ra,4(sp)
   41e64:	df000017 	ldw	fp,0(sp)
   41e68:	dec00204 	addi	sp,sp,8
   41e6c:	f800283a 	ret

00041e70 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   41e70:	defffa04 	addi	sp,sp,-24
   41e74:	dfc00515 	stw	ra,20(sp)
   41e78:	df000415 	stw	fp,16(sp)
   41e7c:	df000404 	addi	fp,sp,16
   41e80:	e13ffe15 	stw	r4,-8(fp)
   41e84:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   41e88:	e0bffe17 	ldw	r2,-8(fp)
   41e8c:	10000326 	beq	r2,zero,41e9c <alt_dev_llist_insert+0x2c>
   41e90:	e0bffe17 	ldw	r2,-8(fp)
   41e94:	10800217 	ldw	r2,8(r2)
   41e98:	1000061e 	bne	r2,zero,41eb4 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   41e9c:	0041e340 	call	41e34 <alt_get_errno>
   41ea0:	1007883a 	mov	r3,r2
   41ea4:	00800584 	movi	r2,22
   41ea8:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   41eac:	00bffa84 	movi	r2,-22
   41eb0:	00001306 	br	41f00 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   41eb4:	e0bffe17 	ldw	r2,-8(fp)
   41eb8:	e0ffff17 	ldw	r3,-4(fp)
   41ebc:	e0fffc15 	stw	r3,-16(fp)
   41ec0:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   41ec4:	e0bffd17 	ldw	r2,-12(fp)
   41ec8:	e0fffc17 	ldw	r3,-16(fp)
   41ecc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   41ed0:	e0bffc17 	ldw	r2,-16(fp)
   41ed4:	10c00017 	ldw	r3,0(r2)
   41ed8:	e0bffd17 	ldw	r2,-12(fp)
   41edc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   41ee0:	e0bffc17 	ldw	r2,-16(fp)
   41ee4:	10800017 	ldw	r2,0(r2)
   41ee8:	e0fffd17 	ldw	r3,-12(fp)
   41eec:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   41ef0:	e0bffc17 	ldw	r2,-16(fp)
   41ef4:	e0fffd17 	ldw	r3,-12(fp)
   41ef8:	10c00015 	stw	r3,0(r2)

  return 0;  
   41efc:	0005883a 	mov	r2,zero
}
   41f00:	e037883a 	mov	sp,fp
   41f04:	dfc00117 	ldw	ra,4(sp)
   41f08:	df000017 	ldw	fp,0(sp)
   41f0c:	dec00204 	addi	sp,sp,8
   41f10:	f800283a 	ret

00041f14 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   41f14:	defffd04 	addi	sp,sp,-12
   41f18:	dfc00215 	stw	ra,8(sp)
   41f1c:	df000115 	stw	fp,4(sp)
   41f20:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   41f24:	00800174 	movhi	r2,5
   41f28:	10bff104 	addi	r2,r2,-60
   41f2c:	e0bfff15 	stw	r2,-4(fp)
   41f30:	00000606 	br	41f4c <_do_ctors+0x38>
        (*ctor) (); 
   41f34:	e0bfff17 	ldw	r2,-4(fp)
   41f38:	10800017 	ldw	r2,0(r2)
   41f3c:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   41f40:	e0bfff17 	ldw	r2,-4(fp)
   41f44:	10bfff04 	addi	r2,r2,-4
   41f48:	e0bfff15 	stw	r2,-4(fp)
   41f4c:	e0ffff17 	ldw	r3,-4(fp)
   41f50:	00800174 	movhi	r2,5
   41f54:	10bff204 	addi	r2,r2,-56
   41f58:	18bff62e 	bgeu	r3,r2,41f34 <__alt_data_end+0xfffc1f34>
        (*ctor) (); 
}
   41f5c:	0001883a 	nop
   41f60:	e037883a 	mov	sp,fp
   41f64:	dfc00117 	ldw	ra,4(sp)
   41f68:	df000017 	ldw	fp,0(sp)
   41f6c:	dec00204 	addi	sp,sp,8
   41f70:	f800283a 	ret

00041f74 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   41f74:	defffd04 	addi	sp,sp,-12
   41f78:	dfc00215 	stw	ra,8(sp)
   41f7c:	df000115 	stw	fp,4(sp)
   41f80:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   41f84:	00800174 	movhi	r2,5
   41f88:	10bff104 	addi	r2,r2,-60
   41f8c:	e0bfff15 	stw	r2,-4(fp)
   41f90:	00000606 	br	41fac <_do_dtors+0x38>
        (*dtor) (); 
   41f94:	e0bfff17 	ldw	r2,-4(fp)
   41f98:	10800017 	ldw	r2,0(r2)
   41f9c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   41fa0:	e0bfff17 	ldw	r2,-4(fp)
   41fa4:	10bfff04 	addi	r2,r2,-4
   41fa8:	e0bfff15 	stw	r2,-4(fp)
   41fac:	e0ffff17 	ldw	r3,-4(fp)
   41fb0:	00800174 	movhi	r2,5
   41fb4:	10bff204 	addi	r2,r2,-56
   41fb8:	18bff62e 	bgeu	r3,r2,41f94 <__alt_data_end+0xfffc1f94>
        (*dtor) (); 
}
   41fbc:	0001883a 	nop
   41fc0:	e037883a 	mov	sp,fp
   41fc4:	dfc00117 	ldw	ra,4(sp)
   41fc8:	df000017 	ldw	fp,0(sp)
   41fcc:	dec00204 	addi	sp,sp,8
   41fd0:	f800283a 	ret

00041fd4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   41fd4:	defffe04 	addi	sp,sp,-8
   41fd8:	dfc00115 	stw	ra,4(sp)
   41fdc:	df000015 	stw	fp,0(sp)
   41fe0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   41fe4:	01440004 	movi	r5,4096
   41fe8:	0009883a 	mov	r4,zero
   41fec:	0042aa40 	call	42aa4 <alt_icache_flush>
#endif
}
   41ff0:	0001883a 	nop
   41ff4:	e037883a 	mov	sp,fp
   41ff8:	dfc00117 	ldw	ra,4(sp)
   41ffc:	df000017 	ldw	fp,0(sp)
   42000:	dec00204 	addi	sp,sp,8
   42004:	f800283a 	ret

00042008 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   42008:	defff904 	addi	sp,sp,-28
   4200c:	dfc00615 	stw	ra,24(sp)
   42010:	df000515 	stw	fp,20(sp)
   42014:	df000504 	addi	fp,sp,20
   42018:	e13ffc15 	stw	r4,-16(fp)
   4201c:	e17ffd15 	stw	r5,-12(fp)
   42020:	e1bffe15 	stw	r6,-8(fp)
   42024:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   42028:	e0800217 	ldw	r2,8(fp)
   4202c:	d8800015 	stw	r2,0(sp)
   42030:	e1ffff17 	ldw	r7,-4(fp)
   42034:	e1bffe17 	ldw	r6,-8(fp)
   42038:	e17ffd17 	ldw	r5,-12(fp)
   4203c:	e13ffc17 	ldw	r4,-16(fp)
   42040:	00421b80 	call	421b8 <alt_iic_isr_register>
}  
   42044:	e037883a 	mov	sp,fp
   42048:	dfc00117 	ldw	ra,4(sp)
   4204c:	df000017 	ldw	fp,0(sp)
   42050:	dec00204 	addi	sp,sp,8
   42054:	f800283a 	ret

00042058 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   42058:	defff904 	addi	sp,sp,-28
   4205c:	df000615 	stw	fp,24(sp)
   42060:	df000604 	addi	fp,sp,24
   42064:	e13ffe15 	stw	r4,-8(fp)
   42068:	e17fff15 	stw	r5,-4(fp)
   4206c:	e0bfff17 	ldw	r2,-4(fp)
   42070:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   42074:	0005303a 	rdctl	r2,status
   42078:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4207c:	e0fffb17 	ldw	r3,-20(fp)
   42080:	00bfff84 	movi	r2,-2
   42084:	1884703a 	and	r2,r3,r2
   42088:	1001703a 	wrctl	status,r2
  
  return context;
   4208c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   42090:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   42094:	00c00044 	movi	r3,1
   42098:	e0bffa17 	ldw	r2,-24(fp)
   4209c:	1884983a 	sll	r2,r3,r2
   420a0:	1007883a 	mov	r3,r2
   420a4:	d0a6d217 	ldw	r2,-25784(gp)
   420a8:	1884b03a 	or	r2,r3,r2
   420ac:	d0a6d215 	stw	r2,-25784(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   420b0:	d0a6d217 	ldw	r2,-25784(gp)
   420b4:	100170fa 	wrctl	ienable,r2
   420b8:	e0bffc17 	ldw	r2,-16(fp)
   420bc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   420c0:	e0bffd17 	ldw	r2,-12(fp)
   420c4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   420c8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   420cc:	0001883a 	nop
}
   420d0:	e037883a 	mov	sp,fp
   420d4:	df000017 	ldw	fp,0(sp)
   420d8:	dec00104 	addi	sp,sp,4
   420dc:	f800283a 	ret

000420e0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   420e0:	defff904 	addi	sp,sp,-28
   420e4:	df000615 	stw	fp,24(sp)
   420e8:	df000604 	addi	fp,sp,24
   420ec:	e13ffe15 	stw	r4,-8(fp)
   420f0:	e17fff15 	stw	r5,-4(fp)
   420f4:	e0bfff17 	ldw	r2,-4(fp)
   420f8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   420fc:	0005303a 	rdctl	r2,status
   42100:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   42104:	e0fffb17 	ldw	r3,-20(fp)
   42108:	00bfff84 	movi	r2,-2
   4210c:	1884703a 	and	r2,r3,r2
   42110:	1001703a 	wrctl	status,r2
  
  return context;
   42114:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   42118:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   4211c:	00c00044 	movi	r3,1
   42120:	e0bffa17 	ldw	r2,-24(fp)
   42124:	1884983a 	sll	r2,r3,r2
   42128:	0084303a 	nor	r2,zero,r2
   4212c:	1007883a 	mov	r3,r2
   42130:	d0a6d217 	ldw	r2,-25784(gp)
   42134:	1884703a 	and	r2,r3,r2
   42138:	d0a6d215 	stw	r2,-25784(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   4213c:	d0a6d217 	ldw	r2,-25784(gp)
   42140:	100170fa 	wrctl	ienable,r2
   42144:	e0bffc17 	ldw	r2,-16(fp)
   42148:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4214c:	e0bffd17 	ldw	r2,-12(fp)
   42150:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   42154:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   42158:	0001883a 	nop
}
   4215c:	e037883a 	mov	sp,fp
   42160:	df000017 	ldw	fp,0(sp)
   42164:	dec00104 	addi	sp,sp,4
   42168:	f800283a 	ret

0004216c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   4216c:	defffc04 	addi	sp,sp,-16
   42170:	df000315 	stw	fp,12(sp)
   42174:	df000304 	addi	fp,sp,12
   42178:	e13ffe15 	stw	r4,-8(fp)
   4217c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   42180:	000530fa 	rdctl	r2,ienable
   42184:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   42188:	00c00044 	movi	r3,1
   4218c:	e0bfff17 	ldw	r2,-4(fp)
   42190:	1884983a 	sll	r2,r3,r2
   42194:	1007883a 	mov	r3,r2
   42198:	e0bffd17 	ldw	r2,-12(fp)
   4219c:	1884703a 	and	r2,r3,r2
   421a0:	1004c03a 	cmpne	r2,r2,zero
   421a4:	10803fcc 	andi	r2,r2,255
}
   421a8:	e037883a 	mov	sp,fp
   421ac:	df000017 	ldw	fp,0(sp)
   421b0:	dec00104 	addi	sp,sp,4
   421b4:	f800283a 	ret

000421b8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   421b8:	defff504 	addi	sp,sp,-44
   421bc:	dfc00a15 	stw	ra,40(sp)
   421c0:	df000915 	stw	fp,36(sp)
   421c4:	df000904 	addi	fp,sp,36
   421c8:	e13ffc15 	stw	r4,-16(fp)
   421cc:	e17ffd15 	stw	r5,-12(fp)
   421d0:	e1bffe15 	stw	r6,-8(fp)
   421d4:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   421d8:	00bffa84 	movi	r2,-22
   421dc:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   421e0:	e0bffd17 	ldw	r2,-12(fp)
   421e4:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   421e8:	e0bff817 	ldw	r2,-32(fp)
   421ec:	10800808 	cmpgei	r2,r2,32
   421f0:	1000271e 	bne	r2,zero,42290 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   421f4:	0005303a 	rdctl	r2,status
   421f8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   421fc:	e0fffb17 	ldw	r3,-20(fp)
   42200:	00bfff84 	movi	r2,-2
   42204:	1884703a 	and	r2,r3,r2
   42208:	1001703a 	wrctl	status,r2
  
  return context;
   4220c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   42210:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   42214:	00800174 	movhi	r2,5
   42218:	1096d504 	addi	r2,r2,23380
   4221c:	e0fff817 	ldw	r3,-32(fp)
   42220:	180690fa 	slli	r3,r3,3
   42224:	10c5883a 	add	r2,r2,r3
   42228:	e0fffe17 	ldw	r3,-8(fp)
   4222c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   42230:	00800174 	movhi	r2,5
   42234:	1096d504 	addi	r2,r2,23380
   42238:	e0fff817 	ldw	r3,-32(fp)
   4223c:	180690fa 	slli	r3,r3,3
   42240:	10c5883a 	add	r2,r2,r3
   42244:	10800104 	addi	r2,r2,4
   42248:	e0ffff17 	ldw	r3,-4(fp)
   4224c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   42250:	e0bffe17 	ldw	r2,-8(fp)
   42254:	10000526 	beq	r2,zero,4226c <alt_iic_isr_register+0xb4>
   42258:	e0bff817 	ldw	r2,-32(fp)
   4225c:	100b883a 	mov	r5,r2
   42260:	e13ffc17 	ldw	r4,-16(fp)
   42264:	00420580 	call	42058 <alt_ic_irq_enable>
   42268:	00000406 	br	4227c <alt_iic_isr_register+0xc4>
   4226c:	e0bff817 	ldw	r2,-32(fp)
   42270:	100b883a 	mov	r5,r2
   42274:	e13ffc17 	ldw	r4,-16(fp)
   42278:	00420e00 	call	420e0 <alt_ic_irq_disable>
   4227c:	e0bff715 	stw	r2,-36(fp)
   42280:	e0bffa17 	ldw	r2,-24(fp)
   42284:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   42288:	e0bff917 	ldw	r2,-28(fp)
   4228c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   42290:	e0bff717 	ldw	r2,-36(fp)
}
   42294:	e037883a 	mov	sp,fp
   42298:	dfc00117 	ldw	ra,4(sp)
   4229c:	df000017 	ldw	fp,0(sp)
   422a0:	dec00204 	addi	sp,sp,8
   422a4:	f800283a 	ret

000422a8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   422a8:	defff904 	addi	sp,sp,-28
   422ac:	dfc00615 	stw	ra,24(sp)
   422b0:	df000515 	stw	fp,20(sp)
   422b4:	df000504 	addi	fp,sp,20
   422b8:	e13ffc15 	stw	r4,-16(fp)
   422bc:	e17ffd15 	stw	r5,-12(fp)
   422c0:	e1bffe15 	stw	r6,-8(fp)
   422c4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   422c8:	e1bfff17 	ldw	r6,-4(fp)
   422cc:	e17ffe17 	ldw	r5,-8(fp)
   422d0:	e13ffd17 	ldw	r4,-12(fp)
   422d4:	00424e80 	call	424e8 <open>
   422d8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   422dc:	e0bffb17 	ldw	r2,-20(fp)
   422e0:	10001c16 	blt	r2,zero,42354 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   422e4:	00800174 	movhi	r2,5
   422e8:	10859504 	addi	r2,r2,5716
   422ec:	e0fffb17 	ldw	r3,-20(fp)
   422f0:	18c00324 	muli	r3,r3,12
   422f4:	10c5883a 	add	r2,r2,r3
   422f8:	10c00017 	ldw	r3,0(r2)
   422fc:	e0bffc17 	ldw	r2,-16(fp)
   42300:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   42304:	00800174 	movhi	r2,5
   42308:	10859504 	addi	r2,r2,5716
   4230c:	e0fffb17 	ldw	r3,-20(fp)
   42310:	18c00324 	muli	r3,r3,12
   42314:	10c5883a 	add	r2,r2,r3
   42318:	10800104 	addi	r2,r2,4
   4231c:	10c00017 	ldw	r3,0(r2)
   42320:	e0bffc17 	ldw	r2,-16(fp)
   42324:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   42328:	00800174 	movhi	r2,5
   4232c:	10859504 	addi	r2,r2,5716
   42330:	e0fffb17 	ldw	r3,-20(fp)
   42334:	18c00324 	muli	r3,r3,12
   42338:	10c5883a 	add	r2,r2,r3
   4233c:	10800204 	addi	r2,r2,8
   42340:	10c00017 	ldw	r3,0(r2)
   42344:	e0bffc17 	ldw	r2,-16(fp)
   42348:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   4234c:	e13ffb17 	ldw	r4,-20(fp)
   42350:	004263c0 	call	4263c <alt_release_fd>
  }
} 
   42354:	0001883a 	nop
   42358:	e037883a 	mov	sp,fp
   4235c:	dfc00117 	ldw	ra,4(sp)
   42360:	df000017 	ldw	fp,0(sp)
   42364:	dec00204 	addi	sp,sp,8
   42368:	f800283a 	ret

0004236c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   4236c:	defffb04 	addi	sp,sp,-20
   42370:	dfc00415 	stw	ra,16(sp)
   42374:	df000315 	stw	fp,12(sp)
   42378:	df000304 	addi	fp,sp,12
   4237c:	e13ffd15 	stw	r4,-12(fp)
   42380:	e17ffe15 	stw	r5,-8(fp)
   42384:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   42388:	01c07fc4 	movi	r7,511
   4238c:	01800044 	movi	r6,1
   42390:	e17ffd17 	ldw	r5,-12(fp)
   42394:	01000174 	movhi	r4,5
   42398:	21059804 	addi	r4,r4,5728
   4239c:	00422a80 	call	422a8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   423a0:	01c07fc4 	movi	r7,511
   423a4:	000d883a 	mov	r6,zero
   423a8:	e17ffe17 	ldw	r5,-8(fp)
   423ac:	01000174 	movhi	r4,5
   423b0:	21059504 	addi	r4,r4,5716
   423b4:	00422a80 	call	422a8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   423b8:	01c07fc4 	movi	r7,511
   423bc:	01800044 	movi	r6,1
   423c0:	e17fff17 	ldw	r5,-4(fp)
   423c4:	01000174 	movhi	r4,5
   423c8:	21059b04 	addi	r4,r4,5740
   423cc:	00422a80 	call	422a8 <alt_open_fd>
}  
   423d0:	0001883a 	nop
   423d4:	e037883a 	mov	sp,fp
   423d8:	dfc00117 	ldw	ra,4(sp)
   423dc:	df000017 	ldw	fp,0(sp)
   423e0:	dec00204 	addi	sp,sp,8
   423e4:	f800283a 	ret

000423e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   423e8:	defffe04 	addi	sp,sp,-8
   423ec:	dfc00115 	stw	ra,4(sp)
   423f0:	df000015 	stw	fp,0(sp)
   423f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   423f8:	d0a00717 	ldw	r2,-32740(gp)
   423fc:	10000326 	beq	r2,zero,4240c <alt_get_errno+0x24>
   42400:	d0a00717 	ldw	r2,-32740(gp)
   42404:	103ee83a 	callr	r2
   42408:	00000106 	br	42410 <alt_get_errno+0x28>
   4240c:	d0a6d604 	addi	r2,gp,-25768
}
   42410:	e037883a 	mov	sp,fp
   42414:	dfc00117 	ldw	ra,4(sp)
   42418:	df000017 	ldw	fp,0(sp)
   4241c:	dec00204 	addi	sp,sp,8
   42420:	f800283a 	ret

00042424 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   42424:	defffd04 	addi	sp,sp,-12
   42428:	df000215 	stw	fp,8(sp)
   4242c:	df000204 	addi	fp,sp,8
   42430:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   42434:	e0bfff17 	ldw	r2,-4(fp)
   42438:	10800217 	ldw	r2,8(r2)
   4243c:	10d00034 	orhi	r3,r2,16384
   42440:	e0bfff17 	ldw	r2,-4(fp)
   42444:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   42448:	e03ffe15 	stw	zero,-8(fp)
   4244c:	00001d06 	br	424c4 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   42450:	00800174 	movhi	r2,5
   42454:	10859504 	addi	r2,r2,5716
   42458:	e0fffe17 	ldw	r3,-8(fp)
   4245c:	18c00324 	muli	r3,r3,12
   42460:	10c5883a 	add	r2,r2,r3
   42464:	10c00017 	ldw	r3,0(r2)
   42468:	e0bfff17 	ldw	r2,-4(fp)
   4246c:	10800017 	ldw	r2,0(r2)
   42470:	1880111e 	bne	r3,r2,424b8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   42474:	00800174 	movhi	r2,5
   42478:	10859504 	addi	r2,r2,5716
   4247c:	e0fffe17 	ldw	r3,-8(fp)
   42480:	18c00324 	muli	r3,r3,12
   42484:	10c5883a 	add	r2,r2,r3
   42488:	10800204 	addi	r2,r2,8
   4248c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   42490:	1000090e 	bge	r2,zero,424b8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   42494:	e0bffe17 	ldw	r2,-8(fp)
   42498:	10c00324 	muli	r3,r2,12
   4249c:	00800174 	movhi	r2,5
   424a0:	10859504 	addi	r2,r2,5716
   424a4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   424a8:	e0bfff17 	ldw	r2,-4(fp)
   424ac:	18800226 	beq	r3,r2,424b8 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   424b0:	00bffcc4 	movi	r2,-13
   424b4:	00000806 	br	424d8 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   424b8:	e0bffe17 	ldw	r2,-8(fp)
   424bc:	10800044 	addi	r2,r2,1
   424c0:	e0bffe15 	stw	r2,-8(fp)
   424c4:	d0a00617 	ldw	r2,-32744(gp)
   424c8:	1007883a 	mov	r3,r2
   424cc:	e0bffe17 	ldw	r2,-8(fp)
   424d0:	18bfdf2e 	bgeu	r3,r2,42450 <__alt_data_end+0xfffc2450>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   424d4:	0005883a 	mov	r2,zero
}
   424d8:	e037883a 	mov	sp,fp
   424dc:	df000017 	ldw	fp,0(sp)
   424e0:	dec00104 	addi	sp,sp,4
   424e4:	f800283a 	ret

000424e8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   424e8:	defff604 	addi	sp,sp,-40
   424ec:	dfc00915 	stw	ra,36(sp)
   424f0:	df000815 	stw	fp,32(sp)
   424f4:	df000804 	addi	fp,sp,32
   424f8:	e13ffd15 	stw	r4,-12(fp)
   424fc:	e17ffe15 	stw	r5,-8(fp)
   42500:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   42504:	00bfffc4 	movi	r2,-1
   42508:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   4250c:	00bffb44 	movi	r2,-19
   42510:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   42514:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   42518:	d1600404 	addi	r5,gp,-32752
   4251c:	e13ffd17 	ldw	r4,-12(fp)
   42520:	00428680 	call	42868 <alt_find_dev>
   42524:	e0bff815 	stw	r2,-32(fp)
   42528:	e0bff817 	ldw	r2,-32(fp)
   4252c:	1000051e 	bne	r2,zero,42544 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   42530:	e13ffd17 	ldw	r4,-12(fp)
   42534:	00428f80 	call	428f8 <alt_find_file>
   42538:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   4253c:	00800044 	movi	r2,1
   42540:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   42544:	e0bff817 	ldw	r2,-32(fp)
   42548:	10002926 	beq	r2,zero,425f0 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   4254c:	e13ff817 	ldw	r4,-32(fp)
   42550:	0042a000 	call	42a00 <alt_get_fd>
   42554:	e0bff915 	stw	r2,-28(fp)
   42558:	e0bff917 	ldw	r2,-28(fp)
   4255c:	1000030e 	bge	r2,zero,4256c <open+0x84>
    {
      status = index;
   42560:	e0bff917 	ldw	r2,-28(fp)
   42564:	e0bffa15 	stw	r2,-24(fp)
   42568:	00002306 	br	425f8 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   4256c:	e0bff917 	ldw	r2,-28(fp)
   42570:	10c00324 	muli	r3,r2,12
   42574:	00800174 	movhi	r2,5
   42578:	10859504 	addi	r2,r2,5716
   4257c:	1885883a 	add	r2,r3,r2
   42580:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   42584:	e0fffe17 	ldw	r3,-8(fp)
   42588:	00900034 	movhi	r2,16384
   4258c:	10bfffc4 	addi	r2,r2,-1
   42590:	1886703a 	and	r3,r3,r2
   42594:	e0bffc17 	ldw	r2,-16(fp)
   42598:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   4259c:	e0bffb17 	ldw	r2,-20(fp)
   425a0:	1000051e 	bne	r2,zero,425b8 <open+0xd0>
   425a4:	e13ffc17 	ldw	r4,-16(fp)
   425a8:	00424240 	call	42424 <alt_file_locked>
   425ac:	e0bffa15 	stw	r2,-24(fp)
   425b0:	e0bffa17 	ldw	r2,-24(fp)
   425b4:	10001016 	blt	r2,zero,425f8 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   425b8:	e0bff817 	ldw	r2,-32(fp)
   425bc:	10800317 	ldw	r2,12(r2)
   425c0:	10000826 	beq	r2,zero,425e4 <open+0xfc>
   425c4:	e0bff817 	ldw	r2,-32(fp)
   425c8:	10800317 	ldw	r2,12(r2)
   425cc:	e1ffff17 	ldw	r7,-4(fp)
   425d0:	e1bffe17 	ldw	r6,-8(fp)
   425d4:	e17ffd17 	ldw	r5,-12(fp)
   425d8:	e13ffc17 	ldw	r4,-16(fp)
   425dc:	103ee83a 	callr	r2
   425e0:	00000106 	br	425e8 <open+0x100>
   425e4:	0005883a 	mov	r2,zero
   425e8:	e0bffa15 	stw	r2,-24(fp)
   425ec:	00000206 	br	425f8 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   425f0:	00bffb44 	movi	r2,-19
   425f4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   425f8:	e0bffa17 	ldw	r2,-24(fp)
   425fc:	1000090e 	bge	r2,zero,42624 <open+0x13c>
  {
    alt_release_fd (index);  
   42600:	e13ff917 	ldw	r4,-28(fp)
   42604:	004263c0 	call	4263c <alt_release_fd>
    ALT_ERRNO = -status;
   42608:	00423e80 	call	423e8 <alt_get_errno>
   4260c:	1007883a 	mov	r3,r2
   42610:	e0bffa17 	ldw	r2,-24(fp)
   42614:	0085c83a 	sub	r2,zero,r2
   42618:	18800015 	stw	r2,0(r3)
    return -1;
   4261c:	00bfffc4 	movi	r2,-1
   42620:	00000106 	br	42628 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   42624:	e0bff917 	ldw	r2,-28(fp)
}
   42628:	e037883a 	mov	sp,fp
   4262c:	dfc00117 	ldw	ra,4(sp)
   42630:	df000017 	ldw	fp,0(sp)
   42634:	dec00204 	addi	sp,sp,8
   42638:	f800283a 	ret

0004263c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   4263c:	defffe04 	addi	sp,sp,-8
   42640:	df000115 	stw	fp,4(sp)
   42644:	df000104 	addi	fp,sp,4
   42648:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   4264c:	e0bfff17 	ldw	r2,-4(fp)
   42650:	108000d0 	cmplti	r2,r2,3
   42654:	10000d1e 	bne	r2,zero,4268c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   42658:	00800174 	movhi	r2,5
   4265c:	10859504 	addi	r2,r2,5716
   42660:	e0ffff17 	ldw	r3,-4(fp)
   42664:	18c00324 	muli	r3,r3,12
   42668:	10c5883a 	add	r2,r2,r3
   4266c:	10800204 	addi	r2,r2,8
   42670:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   42674:	00800174 	movhi	r2,5
   42678:	10859504 	addi	r2,r2,5716
   4267c:	e0ffff17 	ldw	r3,-4(fp)
   42680:	18c00324 	muli	r3,r3,12
   42684:	10c5883a 	add	r2,r2,r3
   42688:	10000015 	stw	zero,0(r2)
  }
}
   4268c:	0001883a 	nop
   42690:	e037883a 	mov	sp,fp
   42694:	df000017 	ldw	fp,0(sp)
   42698:	dec00104 	addi	sp,sp,4
   4269c:	f800283a 	ret

000426a0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   426a0:	defffa04 	addi	sp,sp,-24
   426a4:	df000515 	stw	fp,20(sp)
   426a8:	df000504 	addi	fp,sp,20
   426ac:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   426b0:	0005303a 	rdctl	r2,status
   426b4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   426b8:	e0fffc17 	ldw	r3,-16(fp)
   426bc:	00bfff84 	movi	r2,-2
   426c0:	1884703a 	and	r2,r3,r2
   426c4:	1001703a 	wrctl	status,r2
  
  return context;
   426c8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   426cc:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   426d0:	e0bfff17 	ldw	r2,-4(fp)
   426d4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   426d8:	e0bffd17 	ldw	r2,-12(fp)
   426dc:	10800017 	ldw	r2,0(r2)
   426e0:	e0fffd17 	ldw	r3,-12(fp)
   426e4:	18c00117 	ldw	r3,4(r3)
   426e8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   426ec:	e0bffd17 	ldw	r2,-12(fp)
   426f0:	10800117 	ldw	r2,4(r2)
   426f4:	e0fffd17 	ldw	r3,-12(fp)
   426f8:	18c00017 	ldw	r3,0(r3)
   426fc:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   42700:	e0bffd17 	ldw	r2,-12(fp)
   42704:	e0fffd17 	ldw	r3,-12(fp)
   42708:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   4270c:	e0bffd17 	ldw	r2,-12(fp)
   42710:	e0fffd17 	ldw	r3,-12(fp)
   42714:	10c00015 	stw	r3,0(r2)
   42718:	e0bffb17 	ldw	r2,-20(fp)
   4271c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   42720:	e0bffe17 	ldw	r2,-8(fp)
   42724:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   42728:	0001883a 	nop
   4272c:	e037883a 	mov	sp,fp
   42730:	df000017 	ldw	fp,0(sp)
   42734:	dec00104 	addi	sp,sp,4
   42738:	f800283a 	ret

0004273c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   4273c:	defffb04 	addi	sp,sp,-20
   42740:	dfc00415 	stw	ra,16(sp)
   42744:	df000315 	stw	fp,12(sp)
   42748:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   4274c:	d0a00917 	ldw	r2,-32732(gp)
   42750:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   42754:	d0a6d417 	ldw	r2,-25776(gp)
   42758:	10800044 	addi	r2,r2,1
   4275c:	d0a6d415 	stw	r2,-25776(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   42760:	00002e06 	br	4281c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   42764:	e0bffd17 	ldw	r2,-12(fp)
   42768:	10800017 	ldw	r2,0(r2)
   4276c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   42770:	e0bffd17 	ldw	r2,-12(fp)
   42774:	10800403 	ldbu	r2,16(r2)
   42778:	10803fcc 	andi	r2,r2,255
   4277c:	10000426 	beq	r2,zero,42790 <alt_tick+0x54>
   42780:	d0a6d417 	ldw	r2,-25776(gp)
   42784:	1000021e 	bne	r2,zero,42790 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   42788:	e0bffd17 	ldw	r2,-12(fp)
   4278c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   42790:	e0bffd17 	ldw	r2,-12(fp)
   42794:	10800217 	ldw	r2,8(r2)
   42798:	d0e6d417 	ldw	r3,-25776(gp)
   4279c:	18801d36 	bltu	r3,r2,42814 <alt_tick+0xd8>
   427a0:	e0bffd17 	ldw	r2,-12(fp)
   427a4:	10800403 	ldbu	r2,16(r2)
   427a8:	10803fcc 	andi	r2,r2,255
   427ac:	1000191e 	bne	r2,zero,42814 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   427b0:	e0bffd17 	ldw	r2,-12(fp)
   427b4:	10800317 	ldw	r2,12(r2)
   427b8:	e0fffd17 	ldw	r3,-12(fp)
   427bc:	18c00517 	ldw	r3,20(r3)
   427c0:	1809883a 	mov	r4,r3
   427c4:	103ee83a 	callr	r2
   427c8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   427cc:	e0bfff17 	ldw	r2,-4(fp)
   427d0:	1000031e 	bne	r2,zero,427e0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   427d4:	e13ffd17 	ldw	r4,-12(fp)
   427d8:	00426a00 	call	426a0 <alt_alarm_stop>
   427dc:	00000d06 	br	42814 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   427e0:	e0bffd17 	ldw	r2,-12(fp)
   427e4:	10c00217 	ldw	r3,8(r2)
   427e8:	e0bfff17 	ldw	r2,-4(fp)
   427ec:	1887883a 	add	r3,r3,r2
   427f0:	e0bffd17 	ldw	r2,-12(fp)
   427f4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   427f8:	e0bffd17 	ldw	r2,-12(fp)
   427fc:	10c00217 	ldw	r3,8(r2)
   42800:	d0a6d417 	ldw	r2,-25776(gp)
   42804:	1880032e 	bgeu	r3,r2,42814 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   42808:	e0bffd17 	ldw	r2,-12(fp)
   4280c:	00c00044 	movi	r3,1
   42810:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   42814:	e0bffe17 	ldw	r2,-8(fp)
   42818:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   4281c:	e0fffd17 	ldw	r3,-12(fp)
   42820:	d0a00904 	addi	r2,gp,-32732
   42824:	18bfcf1e 	bne	r3,r2,42764 <__alt_data_end+0xfffc2764>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   42828:	0001883a 	nop
}
   4282c:	0001883a 	nop
   42830:	e037883a 	mov	sp,fp
   42834:	dfc00117 	ldw	ra,4(sp)
   42838:	df000017 	ldw	fp,0(sp)
   4283c:	dec00204 	addi	sp,sp,8
   42840:	f800283a 	ret

00042844 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   42844:	deffff04 	addi	sp,sp,-4
   42848:	df000015 	stw	fp,0(sp)
   4284c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   42850:	000170fa 	wrctl	ienable,zero
}
   42854:	0001883a 	nop
   42858:	e037883a 	mov	sp,fp
   4285c:	df000017 	ldw	fp,0(sp)
   42860:	dec00104 	addi	sp,sp,4
   42864:	f800283a 	ret

00042868 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   42868:	defffa04 	addi	sp,sp,-24
   4286c:	dfc00515 	stw	ra,20(sp)
   42870:	df000415 	stw	fp,16(sp)
   42874:	df000404 	addi	fp,sp,16
   42878:	e13ffe15 	stw	r4,-8(fp)
   4287c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   42880:	e0bfff17 	ldw	r2,-4(fp)
   42884:	10800017 	ldw	r2,0(r2)
   42888:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   4288c:	e13ffe17 	ldw	r4,-8(fp)
   42890:	0042fb40 	call	42fb4 <strlen>
   42894:	10800044 	addi	r2,r2,1
   42898:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   4289c:	00000d06 	br	428d4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   428a0:	e0bffc17 	ldw	r2,-16(fp)
   428a4:	10800217 	ldw	r2,8(r2)
   428a8:	e0fffd17 	ldw	r3,-12(fp)
   428ac:	180d883a 	mov	r6,r3
   428b0:	e17ffe17 	ldw	r5,-8(fp)
   428b4:	1009883a 	mov	r4,r2
   428b8:	0042c1c0 	call	42c1c <memcmp>
   428bc:	1000021e 	bne	r2,zero,428c8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   428c0:	e0bffc17 	ldw	r2,-16(fp)
   428c4:	00000706 	br	428e4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   428c8:	e0bffc17 	ldw	r2,-16(fp)
   428cc:	10800017 	ldw	r2,0(r2)
   428d0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   428d4:	e0fffc17 	ldw	r3,-16(fp)
   428d8:	e0bfff17 	ldw	r2,-4(fp)
   428dc:	18bff01e 	bne	r3,r2,428a0 <__alt_data_end+0xfffc28a0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   428e0:	0005883a 	mov	r2,zero
}
   428e4:	e037883a 	mov	sp,fp
   428e8:	dfc00117 	ldw	ra,4(sp)
   428ec:	df000017 	ldw	fp,0(sp)
   428f0:	dec00204 	addi	sp,sp,8
   428f4:	f800283a 	ret

000428f8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   428f8:	defffb04 	addi	sp,sp,-20
   428fc:	dfc00415 	stw	ra,16(sp)
   42900:	df000315 	stw	fp,12(sp)
   42904:	df000304 	addi	fp,sp,12
   42908:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   4290c:	d0a00217 	ldw	r2,-32760(gp)
   42910:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   42914:	00003106 	br	429dc <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   42918:	e0bffd17 	ldw	r2,-12(fp)
   4291c:	10800217 	ldw	r2,8(r2)
   42920:	1009883a 	mov	r4,r2
   42924:	0042fb40 	call	42fb4 <strlen>
   42928:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   4292c:	e0bffd17 	ldw	r2,-12(fp)
   42930:	10c00217 	ldw	r3,8(r2)
   42934:	e0bffe17 	ldw	r2,-8(fp)
   42938:	10bfffc4 	addi	r2,r2,-1
   4293c:	1885883a 	add	r2,r3,r2
   42940:	10800003 	ldbu	r2,0(r2)
   42944:	10803fcc 	andi	r2,r2,255
   42948:	1080201c 	xori	r2,r2,128
   4294c:	10bfe004 	addi	r2,r2,-128
   42950:	10800bd8 	cmpnei	r2,r2,47
   42954:	1000031e 	bne	r2,zero,42964 <alt_find_file+0x6c>
    {
      len -= 1;
   42958:	e0bffe17 	ldw	r2,-8(fp)
   4295c:	10bfffc4 	addi	r2,r2,-1
   42960:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   42964:	e0bffe17 	ldw	r2,-8(fp)
   42968:	e0ffff17 	ldw	r3,-4(fp)
   4296c:	1885883a 	add	r2,r3,r2
   42970:	10800003 	ldbu	r2,0(r2)
   42974:	10803fcc 	andi	r2,r2,255
   42978:	1080201c 	xori	r2,r2,128
   4297c:	10bfe004 	addi	r2,r2,-128
   42980:	10800be0 	cmpeqi	r2,r2,47
   42984:	1000081e 	bne	r2,zero,429a8 <alt_find_file+0xb0>
   42988:	e0bffe17 	ldw	r2,-8(fp)
   4298c:	e0ffff17 	ldw	r3,-4(fp)
   42990:	1885883a 	add	r2,r3,r2
   42994:	10800003 	ldbu	r2,0(r2)
   42998:	10803fcc 	andi	r2,r2,255
   4299c:	1080201c 	xori	r2,r2,128
   429a0:	10bfe004 	addi	r2,r2,-128
   429a4:	10000a1e 	bne	r2,zero,429d0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   429a8:	e0bffd17 	ldw	r2,-12(fp)
   429ac:	10800217 	ldw	r2,8(r2)
   429b0:	e0fffe17 	ldw	r3,-8(fp)
   429b4:	180d883a 	mov	r6,r3
   429b8:	e17fff17 	ldw	r5,-4(fp)
   429bc:	1009883a 	mov	r4,r2
   429c0:	0042c1c0 	call	42c1c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   429c4:	1000021e 	bne	r2,zero,429d0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   429c8:	e0bffd17 	ldw	r2,-12(fp)
   429cc:	00000706 	br	429ec <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   429d0:	e0bffd17 	ldw	r2,-12(fp)
   429d4:	10800017 	ldw	r2,0(r2)
   429d8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   429dc:	e0fffd17 	ldw	r3,-12(fp)
   429e0:	d0a00204 	addi	r2,gp,-32760
   429e4:	18bfcc1e 	bne	r3,r2,42918 <__alt_data_end+0xfffc2918>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   429e8:	0005883a 	mov	r2,zero
}
   429ec:	e037883a 	mov	sp,fp
   429f0:	dfc00117 	ldw	ra,4(sp)
   429f4:	df000017 	ldw	fp,0(sp)
   429f8:	dec00204 	addi	sp,sp,8
   429fc:	f800283a 	ret

00042a00 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   42a00:	defffc04 	addi	sp,sp,-16
   42a04:	df000315 	stw	fp,12(sp)
   42a08:	df000304 	addi	fp,sp,12
   42a0c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   42a10:	00bffa04 	movi	r2,-24
   42a14:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   42a18:	e03ffd15 	stw	zero,-12(fp)
   42a1c:	00001906 	br	42a84 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   42a20:	00800174 	movhi	r2,5
   42a24:	10859504 	addi	r2,r2,5716
   42a28:	e0fffd17 	ldw	r3,-12(fp)
   42a2c:	18c00324 	muli	r3,r3,12
   42a30:	10c5883a 	add	r2,r2,r3
   42a34:	10800017 	ldw	r2,0(r2)
   42a38:	10000f1e 	bne	r2,zero,42a78 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   42a3c:	00800174 	movhi	r2,5
   42a40:	10859504 	addi	r2,r2,5716
   42a44:	e0fffd17 	ldw	r3,-12(fp)
   42a48:	18c00324 	muli	r3,r3,12
   42a4c:	10c5883a 	add	r2,r2,r3
   42a50:	e0ffff17 	ldw	r3,-4(fp)
   42a54:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   42a58:	d0e00617 	ldw	r3,-32744(gp)
   42a5c:	e0bffd17 	ldw	r2,-12(fp)
   42a60:	1880020e 	bge	r3,r2,42a6c <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   42a64:	e0bffd17 	ldw	r2,-12(fp)
   42a68:	d0a00615 	stw	r2,-32744(gp)
      }
      rc = i;
   42a6c:	e0bffd17 	ldw	r2,-12(fp)
   42a70:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   42a74:	00000606 	br	42a90 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   42a78:	e0bffd17 	ldw	r2,-12(fp)
   42a7c:	10800044 	addi	r2,r2,1
   42a80:	e0bffd15 	stw	r2,-12(fp)
   42a84:	e0bffd17 	ldw	r2,-12(fp)
   42a88:	10800810 	cmplti	r2,r2,32
   42a8c:	103fe41e 	bne	r2,zero,42a20 <__alt_data_end+0xfffc2a20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   42a90:	e0bffe17 	ldw	r2,-8(fp)
}
   42a94:	e037883a 	mov	sp,fp
   42a98:	df000017 	ldw	fp,0(sp)
   42a9c:	dec00104 	addi	sp,sp,4
   42aa0:	f800283a 	ret

00042aa4 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   42aa4:	defffb04 	addi	sp,sp,-20
   42aa8:	df000415 	stw	fp,16(sp)
   42aac:	df000404 	addi	fp,sp,16
   42ab0:	e13ffe15 	stw	r4,-8(fp)
   42ab4:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   42ab8:	e0bfff17 	ldw	r2,-4(fp)
   42abc:	10840070 	cmpltui	r2,r2,4097
   42ac0:	1000021e 	bne	r2,zero,42acc <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   42ac4:	00840004 	movi	r2,4096
   42ac8:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   42acc:	e0fffe17 	ldw	r3,-8(fp)
   42ad0:	e0bfff17 	ldw	r2,-4(fp)
   42ad4:	1885883a 	add	r2,r3,r2
   42ad8:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   42adc:	e0bffe17 	ldw	r2,-8(fp)
   42ae0:	e0bffc15 	stw	r2,-16(fp)
   42ae4:	00000506 	br	42afc <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   42ae8:	e0bffc17 	ldw	r2,-16(fp)
   42aec:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   42af0:	e0bffc17 	ldw	r2,-16(fp)
   42af4:	10800804 	addi	r2,r2,32
   42af8:	e0bffc15 	stw	r2,-16(fp)
   42afc:	e0fffc17 	ldw	r3,-16(fp)
   42b00:	e0bffd17 	ldw	r2,-12(fp)
   42b04:	18bff836 	bltu	r3,r2,42ae8 <__alt_data_end+0xfffc2ae8>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   42b08:	e0bffe17 	ldw	r2,-8(fp)
   42b0c:	108007cc 	andi	r2,r2,31
   42b10:	10000226 	beq	r2,zero,42b1c <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   42b14:	e0bffc17 	ldw	r2,-16(fp)
   42b18:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   42b1c:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   42b20:	0001883a 	nop
   42b24:	e037883a 	mov	sp,fp
   42b28:	df000017 	ldw	fp,0(sp)
   42b2c:	dec00104 	addi	sp,sp,4
   42b30:	f800283a 	ret

00042b34 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   42b34:	defffe04 	addi	sp,sp,-8
   42b38:	df000115 	stw	fp,4(sp)
   42b3c:	df000104 	addi	fp,sp,4
   42b40:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   42b44:	e0bfff17 	ldw	r2,-4(fp)
   42b48:	10bffe84 	addi	r2,r2,-6
   42b4c:	10c00428 	cmpgeui	r3,r2,16
   42b50:	18001a1e 	bne	r3,zero,42bbc <alt_exception_cause_generated_bad_addr+0x88>
   42b54:	100690ba 	slli	r3,r2,2
   42b58:	00800134 	movhi	r2,4
   42b5c:	108adb04 	addi	r2,r2,11116
   42b60:	1885883a 	add	r2,r3,r2
   42b64:	10800017 	ldw	r2,0(r2)
   42b68:	1000683a 	jmp	r2
   42b6c:	00042bac 	andhi	zero,zero,4270
   42b70:	00042bac 	andhi	zero,zero,4270
   42b74:	00042bbc 	xorhi	zero,zero,4270
   42b78:	00042bbc 	xorhi	zero,zero,4270
   42b7c:	00042bbc 	xorhi	zero,zero,4270
   42b80:	00042bac 	andhi	zero,zero,4270
   42b84:	00042bb4 	movhi	zero,4270
   42b88:	00042bbc 	xorhi	zero,zero,4270
   42b8c:	00042bac 	andhi	zero,zero,4270
   42b90:	00042bac 	andhi	zero,zero,4270
   42b94:	00042bbc 	xorhi	zero,zero,4270
   42b98:	00042bac 	andhi	zero,zero,4270
   42b9c:	00042bb4 	movhi	zero,4270
   42ba0:	00042bbc 	xorhi	zero,zero,4270
   42ba4:	00042bbc 	xorhi	zero,zero,4270
   42ba8:	00042bac 	andhi	zero,zero,4270
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   42bac:	00800044 	movi	r2,1
   42bb0:	00000306 	br	42bc0 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   42bb4:	0005883a 	mov	r2,zero
   42bb8:	00000106 	br	42bc0 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   42bbc:	0005883a 	mov	r2,zero
  }
}
   42bc0:	e037883a 	mov	sp,fp
   42bc4:	df000017 	ldw	fp,0(sp)
   42bc8:	dec00104 	addi	sp,sp,4
   42bcc:	f800283a 	ret

00042bd0 <atexit>:
   42bd0:	200b883a 	mov	r5,r4
   42bd4:	000f883a 	mov	r7,zero
   42bd8:	000d883a 	mov	r6,zero
   42bdc:	0009883a 	mov	r4,zero
   42be0:	00455c81 	jmpi	455c8 <__register_exitproc>

00042be4 <exit>:
   42be4:	defffe04 	addi	sp,sp,-8
   42be8:	000b883a 	mov	r5,zero
   42bec:	dc000015 	stw	r16,0(sp)
   42bf0:	dfc00115 	stw	ra,4(sp)
   42bf4:	2021883a 	mov	r16,r4
   42bf8:	00456e00 	call	456e0 <__call_exitprocs>
   42bfc:	00800174 	movhi	r2,5
   42c00:	10882904 	addi	r2,r2,8356
   42c04:	11000017 	ldw	r4,0(r2)
   42c08:	20800f17 	ldw	r2,60(r4)
   42c0c:	10000126 	beq	r2,zero,42c14 <exit+0x30>
   42c10:	103ee83a 	callr	r2
   42c14:	8009883a 	mov	r4,r16
   42c18:	004f9540 	call	4f954 <_exit>

00042c1c <memcmp>:
   42c1c:	01c000c4 	movi	r7,3
   42c20:	3980192e 	bgeu	r7,r6,42c88 <memcmp+0x6c>
   42c24:	2144b03a 	or	r2,r4,r5
   42c28:	11c4703a 	and	r2,r2,r7
   42c2c:	10000f26 	beq	r2,zero,42c6c <memcmp+0x50>
   42c30:	20800003 	ldbu	r2,0(r4)
   42c34:	28c00003 	ldbu	r3,0(r5)
   42c38:	10c0151e 	bne	r2,r3,42c90 <memcmp+0x74>
   42c3c:	31bfff84 	addi	r6,r6,-2
   42c40:	01ffffc4 	movi	r7,-1
   42c44:	00000406 	br	42c58 <memcmp+0x3c>
   42c48:	20800003 	ldbu	r2,0(r4)
   42c4c:	28c00003 	ldbu	r3,0(r5)
   42c50:	31bfffc4 	addi	r6,r6,-1
   42c54:	10c00e1e 	bne	r2,r3,42c90 <memcmp+0x74>
   42c58:	21000044 	addi	r4,r4,1
   42c5c:	29400044 	addi	r5,r5,1
   42c60:	31fff91e 	bne	r6,r7,42c48 <__alt_data_end+0xfffc2c48>
   42c64:	0005883a 	mov	r2,zero
   42c68:	f800283a 	ret
   42c6c:	20c00017 	ldw	r3,0(r4)
   42c70:	28800017 	ldw	r2,0(r5)
   42c74:	18bfee1e 	bne	r3,r2,42c30 <__alt_data_end+0xfffc2c30>
   42c78:	31bfff04 	addi	r6,r6,-4
   42c7c:	21000104 	addi	r4,r4,4
   42c80:	29400104 	addi	r5,r5,4
   42c84:	39bff936 	bltu	r7,r6,42c6c <__alt_data_end+0xfffc2c6c>
   42c88:	303fe91e 	bne	r6,zero,42c30 <__alt_data_end+0xfffc2c30>
   42c8c:	003ff506 	br	42c64 <__alt_data_end+0xfffc2c64>
   42c90:	10c5c83a 	sub	r2,r2,r3
   42c94:	f800283a 	ret

00042c98 <memcpy>:
   42c98:	defffd04 	addi	sp,sp,-12
   42c9c:	dfc00215 	stw	ra,8(sp)
   42ca0:	dc400115 	stw	r17,4(sp)
   42ca4:	dc000015 	stw	r16,0(sp)
   42ca8:	00c003c4 	movi	r3,15
   42cac:	2005883a 	mov	r2,r4
   42cb0:	1980452e 	bgeu	r3,r6,42dc8 <memcpy+0x130>
   42cb4:	2906b03a 	or	r3,r5,r4
   42cb8:	18c000cc 	andi	r3,r3,3
   42cbc:	1800441e 	bne	r3,zero,42dd0 <memcpy+0x138>
   42cc0:	347ffc04 	addi	r17,r6,-16
   42cc4:	8822d13a 	srli	r17,r17,4
   42cc8:	28c00104 	addi	r3,r5,4
   42ccc:	23400104 	addi	r13,r4,4
   42cd0:	8820913a 	slli	r16,r17,4
   42cd4:	2b000204 	addi	r12,r5,8
   42cd8:	22c00204 	addi	r11,r4,8
   42cdc:	84000504 	addi	r16,r16,20
   42ce0:	2a800304 	addi	r10,r5,12
   42ce4:	22400304 	addi	r9,r4,12
   42ce8:	2c21883a 	add	r16,r5,r16
   42cec:	2811883a 	mov	r8,r5
   42cf0:	200f883a 	mov	r7,r4
   42cf4:	41000017 	ldw	r4,0(r8)
   42cf8:	1fc00017 	ldw	ra,0(r3)
   42cfc:	63c00017 	ldw	r15,0(r12)
   42d00:	39000015 	stw	r4,0(r7)
   42d04:	53800017 	ldw	r14,0(r10)
   42d08:	6fc00015 	stw	ra,0(r13)
   42d0c:	5bc00015 	stw	r15,0(r11)
   42d10:	4b800015 	stw	r14,0(r9)
   42d14:	18c00404 	addi	r3,r3,16
   42d18:	39c00404 	addi	r7,r7,16
   42d1c:	42000404 	addi	r8,r8,16
   42d20:	6b400404 	addi	r13,r13,16
   42d24:	63000404 	addi	r12,r12,16
   42d28:	5ac00404 	addi	r11,r11,16
   42d2c:	52800404 	addi	r10,r10,16
   42d30:	4a400404 	addi	r9,r9,16
   42d34:	1c3fef1e 	bne	r3,r16,42cf4 <__alt_data_end+0xfffc2cf4>
   42d38:	89c00044 	addi	r7,r17,1
   42d3c:	380e913a 	slli	r7,r7,4
   42d40:	310003cc 	andi	r4,r6,15
   42d44:	02c000c4 	movi	r11,3
   42d48:	11c7883a 	add	r3,r2,r7
   42d4c:	29cb883a 	add	r5,r5,r7
   42d50:	5900212e 	bgeu	r11,r4,42dd8 <memcpy+0x140>
   42d54:	1813883a 	mov	r9,r3
   42d58:	2811883a 	mov	r8,r5
   42d5c:	200f883a 	mov	r7,r4
   42d60:	42800017 	ldw	r10,0(r8)
   42d64:	4a400104 	addi	r9,r9,4
   42d68:	39ffff04 	addi	r7,r7,-4
   42d6c:	4abfff15 	stw	r10,-4(r9)
   42d70:	42000104 	addi	r8,r8,4
   42d74:	59fffa36 	bltu	r11,r7,42d60 <__alt_data_end+0xfffc2d60>
   42d78:	213fff04 	addi	r4,r4,-4
   42d7c:	2008d0ba 	srli	r4,r4,2
   42d80:	318000cc 	andi	r6,r6,3
   42d84:	21000044 	addi	r4,r4,1
   42d88:	2109883a 	add	r4,r4,r4
   42d8c:	2109883a 	add	r4,r4,r4
   42d90:	1907883a 	add	r3,r3,r4
   42d94:	290b883a 	add	r5,r5,r4
   42d98:	30000626 	beq	r6,zero,42db4 <memcpy+0x11c>
   42d9c:	198d883a 	add	r6,r3,r6
   42da0:	29c00003 	ldbu	r7,0(r5)
   42da4:	18c00044 	addi	r3,r3,1
   42da8:	29400044 	addi	r5,r5,1
   42dac:	19ffffc5 	stb	r7,-1(r3)
   42db0:	19bffb1e 	bne	r3,r6,42da0 <__alt_data_end+0xfffc2da0>
   42db4:	dfc00217 	ldw	ra,8(sp)
   42db8:	dc400117 	ldw	r17,4(sp)
   42dbc:	dc000017 	ldw	r16,0(sp)
   42dc0:	dec00304 	addi	sp,sp,12
   42dc4:	f800283a 	ret
   42dc8:	2007883a 	mov	r3,r4
   42dcc:	003ff206 	br	42d98 <__alt_data_end+0xfffc2d98>
   42dd0:	2007883a 	mov	r3,r4
   42dd4:	003ff106 	br	42d9c <__alt_data_end+0xfffc2d9c>
   42dd8:	200d883a 	mov	r6,r4
   42ddc:	003fee06 	br	42d98 <__alt_data_end+0xfffc2d98>

00042de0 <_printf_r>:
   42de0:	defffd04 	addi	sp,sp,-12
   42de4:	2805883a 	mov	r2,r5
   42de8:	dfc00015 	stw	ra,0(sp)
   42dec:	d9800115 	stw	r6,4(sp)
   42df0:	d9c00215 	stw	r7,8(sp)
   42df4:	21400217 	ldw	r5,8(r4)
   42df8:	d9c00104 	addi	r7,sp,4
   42dfc:	100d883a 	mov	r6,r2
   42e00:	004304c0 	call	4304c <___vfprintf_internal_r>
   42e04:	dfc00017 	ldw	ra,0(sp)
   42e08:	dec00304 	addi	sp,sp,12
   42e0c:	f800283a 	ret

00042e10 <printf>:
   42e10:	defffc04 	addi	sp,sp,-16
   42e14:	dfc00015 	stw	ra,0(sp)
   42e18:	d9400115 	stw	r5,4(sp)
   42e1c:	d9800215 	stw	r6,8(sp)
   42e20:	d9c00315 	stw	r7,12(sp)
   42e24:	00800174 	movhi	r2,5
   42e28:	10882a04 	addi	r2,r2,8360
   42e2c:	10800017 	ldw	r2,0(r2)
   42e30:	200b883a 	mov	r5,r4
   42e34:	d9800104 	addi	r6,sp,4
   42e38:	11000217 	ldw	r4,8(r2)
   42e3c:	00452440 	call	45244 <__vfprintf_internal>
   42e40:	dfc00017 	ldw	ra,0(sp)
   42e44:	dec00404 	addi	sp,sp,16
   42e48:	f800283a 	ret

00042e4c <_putc_r>:
   42e4c:	defffc04 	addi	sp,sp,-16
   42e50:	dc000215 	stw	r16,8(sp)
   42e54:	dfc00315 	stw	ra,12(sp)
   42e58:	2021883a 	mov	r16,r4
   42e5c:	20000226 	beq	r4,zero,42e68 <_putc_r+0x1c>
   42e60:	20800e17 	ldw	r2,56(r4)
   42e64:	10001b26 	beq	r2,zero,42ed4 <_putc_r+0x88>
   42e68:	30800217 	ldw	r2,8(r6)
   42e6c:	10bfffc4 	addi	r2,r2,-1
   42e70:	30800215 	stw	r2,8(r6)
   42e74:	10000a16 	blt	r2,zero,42ea0 <_putc_r+0x54>
   42e78:	30800017 	ldw	r2,0(r6)
   42e7c:	11400005 	stb	r5,0(r2)
   42e80:	30800017 	ldw	r2,0(r6)
   42e84:	10c00044 	addi	r3,r2,1
   42e88:	30c00015 	stw	r3,0(r6)
   42e8c:	10800003 	ldbu	r2,0(r2)
   42e90:	dfc00317 	ldw	ra,12(sp)
   42e94:	dc000217 	ldw	r16,8(sp)
   42e98:	dec00404 	addi	sp,sp,16
   42e9c:	f800283a 	ret
   42ea0:	30c00617 	ldw	r3,24(r6)
   42ea4:	10c00616 	blt	r2,r3,42ec0 <_putc_r+0x74>
   42ea8:	30800017 	ldw	r2,0(r6)
   42eac:	00c00284 	movi	r3,10
   42eb0:	11400005 	stb	r5,0(r2)
   42eb4:	30800017 	ldw	r2,0(r6)
   42eb8:	11400003 	ldbu	r5,0(r2)
   42ebc:	28fff11e 	bne	r5,r3,42e84 <__alt_data_end+0xfffc2e84>
   42ec0:	8009883a 	mov	r4,r16
   42ec4:	dfc00317 	ldw	ra,12(sp)
   42ec8:	dc000217 	ldw	r16,8(sp)
   42ecc:	dec00404 	addi	sp,sp,16
   42ed0:	004531c1 	jmpi	4531c <__swbuf_r>
   42ed4:	d9400015 	stw	r5,0(sp)
   42ed8:	d9800115 	stw	r6,4(sp)
   42edc:	00476e00 	call	476e0 <__sinit>
   42ee0:	d9800117 	ldw	r6,4(sp)
   42ee4:	d9400017 	ldw	r5,0(sp)
   42ee8:	003fdf06 	br	42e68 <__alt_data_end+0xfffc2e68>

00042eec <putc>:
   42eec:	00800174 	movhi	r2,5
   42ef0:	defffc04 	addi	sp,sp,-16
   42ef4:	10882a04 	addi	r2,r2,8360
   42ef8:	dc000115 	stw	r16,4(sp)
   42efc:	14000017 	ldw	r16,0(r2)
   42f00:	dc400215 	stw	r17,8(sp)
   42f04:	dfc00315 	stw	ra,12(sp)
   42f08:	2023883a 	mov	r17,r4
   42f0c:	80000226 	beq	r16,zero,42f18 <putc+0x2c>
   42f10:	80800e17 	ldw	r2,56(r16)
   42f14:	10001a26 	beq	r2,zero,42f80 <putc+0x94>
   42f18:	28800217 	ldw	r2,8(r5)
   42f1c:	10bfffc4 	addi	r2,r2,-1
   42f20:	28800215 	stw	r2,8(r5)
   42f24:	10000b16 	blt	r2,zero,42f54 <putc+0x68>
   42f28:	28800017 	ldw	r2,0(r5)
   42f2c:	14400005 	stb	r17,0(r2)
   42f30:	28800017 	ldw	r2,0(r5)
   42f34:	10c00044 	addi	r3,r2,1
   42f38:	28c00015 	stw	r3,0(r5)
   42f3c:	10800003 	ldbu	r2,0(r2)
   42f40:	dfc00317 	ldw	ra,12(sp)
   42f44:	dc400217 	ldw	r17,8(sp)
   42f48:	dc000117 	ldw	r16,4(sp)
   42f4c:	dec00404 	addi	sp,sp,16
   42f50:	f800283a 	ret
   42f54:	28c00617 	ldw	r3,24(r5)
   42f58:	10c00e16 	blt	r2,r3,42f94 <putc+0xa8>
   42f5c:	28800017 	ldw	r2,0(r5)
   42f60:	01000284 	movi	r4,10
   42f64:	14400005 	stb	r17,0(r2)
   42f68:	28800017 	ldw	r2,0(r5)
   42f6c:	10c00003 	ldbu	r3,0(r2)
   42f70:	193ff01e 	bne	r3,r4,42f34 <__alt_data_end+0xfffc2f34>
   42f74:	280d883a 	mov	r6,r5
   42f78:	180b883a 	mov	r5,r3
   42f7c:	00000706 	br	42f9c <putc+0xb0>
   42f80:	8009883a 	mov	r4,r16
   42f84:	d9400015 	stw	r5,0(sp)
   42f88:	00476e00 	call	476e0 <__sinit>
   42f8c:	d9400017 	ldw	r5,0(sp)
   42f90:	003fe106 	br	42f18 <__alt_data_end+0xfffc2f18>
   42f94:	280d883a 	mov	r6,r5
   42f98:	880b883a 	mov	r5,r17
   42f9c:	8009883a 	mov	r4,r16
   42fa0:	dfc00317 	ldw	ra,12(sp)
   42fa4:	dc400217 	ldw	r17,8(sp)
   42fa8:	dc000117 	ldw	r16,4(sp)
   42fac:	dec00404 	addi	sp,sp,16
   42fb0:	004531c1 	jmpi	4531c <__swbuf_r>

00042fb4 <strlen>:
   42fb4:	208000cc 	andi	r2,r4,3
   42fb8:	10002026 	beq	r2,zero,4303c <strlen+0x88>
   42fbc:	20800007 	ldb	r2,0(r4)
   42fc0:	10002026 	beq	r2,zero,43044 <strlen+0x90>
   42fc4:	2005883a 	mov	r2,r4
   42fc8:	00000206 	br	42fd4 <strlen+0x20>
   42fcc:	10c00007 	ldb	r3,0(r2)
   42fd0:	18001826 	beq	r3,zero,43034 <strlen+0x80>
   42fd4:	10800044 	addi	r2,r2,1
   42fd8:	10c000cc 	andi	r3,r2,3
   42fdc:	183ffb1e 	bne	r3,zero,42fcc <__alt_data_end+0xfffc2fcc>
   42fe0:	10c00017 	ldw	r3,0(r2)
   42fe4:	01ffbff4 	movhi	r7,65279
   42fe8:	39ffbfc4 	addi	r7,r7,-257
   42fec:	00ca303a 	nor	r5,zero,r3
   42ff0:	01a02074 	movhi	r6,32897
   42ff4:	19c7883a 	add	r3,r3,r7
   42ff8:	31a02004 	addi	r6,r6,-32640
   42ffc:	1946703a 	and	r3,r3,r5
   43000:	1986703a 	and	r3,r3,r6
   43004:	1800091e 	bne	r3,zero,4302c <strlen+0x78>
   43008:	10800104 	addi	r2,r2,4
   4300c:	10c00017 	ldw	r3,0(r2)
   43010:	19cb883a 	add	r5,r3,r7
   43014:	00c6303a 	nor	r3,zero,r3
   43018:	28c6703a 	and	r3,r5,r3
   4301c:	1986703a 	and	r3,r3,r6
   43020:	183ff926 	beq	r3,zero,43008 <__alt_data_end+0xfffc3008>
   43024:	00000106 	br	4302c <strlen+0x78>
   43028:	10800044 	addi	r2,r2,1
   4302c:	10c00007 	ldb	r3,0(r2)
   43030:	183ffd1e 	bne	r3,zero,43028 <__alt_data_end+0xfffc3028>
   43034:	1105c83a 	sub	r2,r2,r4
   43038:	f800283a 	ret
   4303c:	2005883a 	mov	r2,r4
   43040:	003fe706 	br	42fe0 <__alt_data_end+0xfffc2fe0>
   43044:	0005883a 	mov	r2,zero
   43048:	f800283a 	ret

0004304c <___vfprintf_internal_r>:
   4304c:	deffb804 	addi	sp,sp,-288
   43050:	dfc04715 	stw	ra,284(sp)
   43054:	ddc04515 	stw	r23,276(sp)
   43058:	dd404315 	stw	r21,268(sp)
   4305c:	d9002c15 	stw	r4,176(sp)
   43060:	282f883a 	mov	r23,r5
   43064:	302b883a 	mov	r21,r6
   43068:	d9c02d15 	stw	r7,180(sp)
   4306c:	df004615 	stw	fp,280(sp)
   43070:	dd804415 	stw	r22,272(sp)
   43074:	dd004215 	stw	r20,264(sp)
   43078:	dcc04115 	stw	r19,260(sp)
   4307c:	dc804015 	stw	r18,256(sp)
   43080:	dc403f15 	stw	r17,252(sp)
   43084:	dc003e15 	stw	r16,248(sp)
   43088:	0047d980 	call	47d98 <_localeconv_r>
   4308c:	10800017 	ldw	r2,0(r2)
   43090:	1009883a 	mov	r4,r2
   43094:	d8803415 	stw	r2,208(sp)
   43098:	0042fb40 	call	42fb4 <strlen>
   4309c:	d8803715 	stw	r2,220(sp)
   430a0:	d8802c17 	ldw	r2,176(sp)
   430a4:	10000226 	beq	r2,zero,430b0 <___vfprintf_internal_r+0x64>
   430a8:	10800e17 	ldw	r2,56(r2)
   430ac:	1000f926 	beq	r2,zero,43494 <___vfprintf_internal_r+0x448>
   430b0:	b880030b 	ldhu	r2,12(r23)
   430b4:	10c8000c 	andi	r3,r2,8192
   430b8:	1800061e 	bne	r3,zero,430d4 <___vfprintf_internal_r+0x88>
   430bc:	b9001917 	ldw	r4,100(r23)
   430c0:	00f7ffc4 	movi	r3,-8193
   430c4:	10880014 	ori	r2,r2,8192
   430c8:	20c6703a 	and	r3,r4,r3
   430cc:	b880030d 	sth	r2,12(r23)
   430d0:	b8c01915 	stw	r3,100(r23)
   430d4:	10c0020c 	andi	r3,r2,8
   430d8:	1800c126 	beq	r3,zero,433e0 <___vfprintf_internal_r+0x394>
   430dc:	b8c00417 	ldw	r3,16(r23)
   430e0:	1800bf26 	beq	r3,zero,433e0 <___vfprintf_internal_r+0x394>
   430e4:	1080068c 	andi	r2,r2,26
   430e8:	00c00284 	movi	r3,10
   430ec:	10c0c426 	beq	r2,r3,43400 <___vfprintf_internal_r+0x3b4>
   430f0:	d8c00404 	addi	r3,sp,16
   430f4:	05000174 	movhi	r20,5
   430f8:	d9001e04 	addi	r4,sp,120
   430fc:	a500d284 	addi	r20,r20,842
   43100:	d8c01e15 	stw	r3,120(sp)
   43104:	d8002015 	stw	zero,128(sp)
   43108:	d8001f15 	stw	zero,124(sp)
   4310c:	d8003315 	stw	zero,204(sp)
   43110:	d8003615 	stw	zero,216(sp)
   43114:	d8003815 	stw	zero,224(sp)
   43118:	1811883a 	mov	r8,r3
   4311c:	d8003915 	stw	zero,228(sp)
   43120:	d8003a15 	stw	zero,232(sp)
   43124:	d8002f15 	stw	zero,188(sp)
   43128:	d9002815 	stw	r4,160(sp)
   4312c:	a8800007 	ldb	r2,0(r21)
   43130:	10027b26 	beq	r2,zero,43b20 <___vfprintf_internal_r+0xad4>
   43134:	00c00944 	movi	r3,37
   43138:	a821883a 	mov	r16,r21
   4313c:	10c0021e 	bne	r2,r3,43148 <___vfprintf_internal_r+0xfc>
   43140:	00001406 	br	43194 <___vfprintf_internal_r+0x148>
   43144:	10c00326 	beq	r2,r3,43154 <___vfprintf_internal_r+0x108>
   43148:	84000044 	addi	r16,r16,1
   4314c:	80800007 	ldb	r2,0(r16)
   43150:	103ffc1e 	bne	r2,zero,43144 <__alt_data_end+0xfffc3144>
   43154:	8563c83a 	sub	r17,r16,r21
   43158:	88000e26 	beq	r17,zero,43194 <___vfprintf_internal_r+0x148>
   4315c:	d8c02017 	ldw	r3,128(sp)
   43160:	d8801f17 	ldw	r2,124(sp)
   43164:	45400015 	stw	r21,0(r8)
   43168:	1c47883a 	add	r3,r3,r17
   4316c:	10800044 	addi	r2,r2,1
   43170:	d8c02015 	stw	r3,128(sp)
   43174:	44400115 	stw	r17,4(r8)
   43178:	d8801f15 	stw	r2,124(sp)
   4317c:	00c001c4 	movi	r3,7
   43180:	1880a716 	blt	r3,r2,43420 <___vfprintf_internal_r+0x3d4>
   43184:	42000204 	addi	r8,r8,8
   43188:	d9402f17 	ldw	r5,188(sp)
   4318c:	2c4b883a 	add	r5,r5,r17
   43190:	d9402f15 	stw	r5,188(sp)
   43194:	80800007 	ldb	r2,0(r16)
   43198:	1000a826 	beq	r2,zero,4343c <___vfprintf_internal_r+0x3f0>
   4319c:	84400047 	ldb	r17,1(r16)
   431a0:	00bfffc4 	movi	r2,-1
   431a4:	85400044 	addi	r21,r16,1
   431a8:	d8002785 	stb	zero,158(sp)
   431ac:	0007883a 	mov	r3,zero
   431b0:	000f883a 	mov	r7,zero
   431b4:	d8802915 	stw	r2,164(sp)
   431b8:	d8003115 	stw	zero,196(sp)
   431bc:	0025883a 	mov	r18,zero
   431c0:	01401604 	movi	r5,88
   431c4:	01800244 	movi	r6,9
   431c8:	02800a84 	movi	r10,42
   431cc:	02401b04 	movi	r9,108
   431d0:	ad400044 	addi	r21,r21,1
   431d4:	88bff804 	addi	r2,r17,-32
   431d8:	28830436 	bltu	r5,r2,43dec <___vfprintf_internal_r+0xda0>
   431dc:	100490ba 	slli	r2,r2,2
   431e0:	01000134 	movhi	r4,4
   431e4:	210c7d04 	addi	r4,r4,12788
   431e8:	1105883a 	add	r2,r2,r4
   431ec:	10800017 	ldw	r2,0(r2)
   431f0:	1000683a 	jmp	r2
   431f4:	00043d0c 	andi	zero,zero,4340
   431f8:	00043dec 	andhi	zero,zero,4343
   431fc:	00043dec 	andhi	zero,zero,4343
   43200:	00043d2c 	andhi	zero,zero,4340
   43204:	00043dec 	andhi	zero,zero,4343
   43208:	00043dec 	andhi	zero,zero,4343
   4320c:	00043dec 	andhi	zero,zero,4343
   43210:	00043dec 	andhi	zero,zero,4343
   43214:	00043dec 	andhi	zero,zero,4343
   43218:	00043dec 	andhi	zero,zero,4343
   4321c:	000434a0 	cmpeqi	zero,zero,4306
   43220:	00043c48 	cmpgei	zero,zero,4337
   43224:	00043dec 	andhi	zero,zero,4343
   43228:	00043368 	cmpgeui	zero,zero,4301
   4322c:	000434c8 	cmpgei	zero,zero,4307
   43230:	00043dec 	andhi	zero,zero,4343
   43234:	00043508 	cmpgei	zero,zero,4308
   43238:	00043514 	movui	zero,4308
   4323c:	00043514 	movui	zero,4308
   43240:	00043514 	movui	zero,4308
   43244:	00043514 	movui	zero,4308
   43248:	00043514 	movui	zero,4308
   4324c:	00043514 	movui	zero,4308
   43250:	00043514 	movui	zero,4308
   43254:	00043514 	movui	zero,4308
   43258:	00043514 	movui	zero,4308
   4325c:	00043dec 	andhi	zero,zero,4343
   43260:	00043dec 	andhi	zero,zero,4343
   43264:	00043dec 	andhi	zero,zero,4343
   43268:	00043dec 	andhi	zero,zero,4343
   4326c:	00043dec 	andhi	zero,zero,4343
   43270:	00043dec 	andhi	zero,zero,4343
   43274:	00043dec 	andhi	zero,zero,4343
   43278:	00043dec 	andhi	zero,zero,4343
   4327c:	00043dec 	andhi	zero,zero,4343
   43280:	00043dec 	andhi	zero,zero,4343
   43284:	00043548 	cmpgei	zero,zero,4309
   43288:	00043604 	movi	zero,4312
   4328c:	00043dec 	andhi	zero,zero,4343
   43290:	00043604 	movi	zero,4312
   43294:	00043dec 	andhi	zero,zero,4343
   43298:	00043dec 	andhi	zero,zero,4343
   4329c:	00043dec 	andhi	zero,zero,4343
   432a0:	00043dec 	andhi	zero,zero,4343
   432a4:	000436a4 	muli	zero,zero,4314
   432a8:	00043dec 	andhi	zero,zero,4343
   432ac:	00043dec 	andhi	zero,zero,4343
   432b0:	000436b0 	cmpltui	zero,zero,4314
   432b4:	00043dec 	andhi	zero,zero,4343
   432b8:	00043dec 	andhi	zero,zero,4343
   432bc:	00043dec 	andhi	zero,zero,4343
   432c0:	00043dec 	andhi	zero,zero,4343
   432c4:	00043dec 	andhi	zero,zero,4343
   432c8:	00043b28 	cmpgeui	zero,zero,4332
   432cc:	00043dec 	andhi	zero,zero,4343
   432d0:	00043dec 	andhi	zero,zero,4343
   432d4:	00043b88 	cmpgei	zero,zero,4334
   432d8:	00043dec 	andhi	zero,zero,4343
   432dc:	00043dec 	andhi	zero,zero,4343
   432e0:	00043dec 	andhi	zero,zero,4343
   432e4:	00043dec 	andhi	zero,zero,4343
   432e8:	00043dec 	andhi	zero,zero,4343
   432ec:	00043dec 	andhi	zero,zero,4343
   432f0:	00043dec 	andhi	zero,zero,4343
   432f4:	00043dec 	andhi	zero,zero,4343
   432f8:	00043dec 	andhi	zero,zero,4343
   432fc:	00043dec 	andhi	zero,zero,4343
   43300:	00043d98 	cmpnei	zero,zero,4342
   43304:	00043d38 	rdprs	zero,zero,4340
   43308:	00043604 	movi	zero,4312
   4330c:	00043604 	movi	zero,4312
   43310:	00043604 	movi	zero,4312
   43314:	00043d48 	cmpgei	zero,zero,4341
   43318:	00043d38 	rdprs	zero,zero,4340
   4331c:	00043dec 	andhi	zero,zero,4343
   43320:	00043dec 	andhi	zero,zero,4343
   43324:	00043d54 	movui	zero,4341
   43328:	00043dec 	andhi	zero,zero,4343
   4332c:	00043d64 	muli	zero,zero,4341
   43330:	00043c38 	rdprs	zero,zero,4336
   43334:	00043374 	movhi	zero,4301
   43338:	00043c58 	cmpnei	zero,zero,4337
   4333c:	00043dec 	andhi	zero,zero,4343
   43340:	00043c64 	muli	zero,zero,4337
   43344:	00043dec 	andhi	zero,zero,4343
   43348:	00043cc0 	call	43cc <__alt_mem_onchip_memory2_0-0x3bc34>
   4334c:	00043dec 	andhi	zero,zero,4343
   43350:	00043dec 	andhi	zero,zero,4343
   43354:	00043cd0 	cmplti	zero,zero,4339
   43358:	d9003117 	ldw	r4,196(sp)
   4335c:	d8802d15 	stw	r2,180(sp)
   43360:	0109c83a 	sub	r4,zero,r4
   43364:	d9003115 	stw	r4,196(sp)
   43368:	94800114 	ori	r18,r18,4
   4336c:	ac400007 	ldb	r17,0(r21)
   43370:	003f9706 	br	431d0 <__alt_data_end+0xfffc31d0>
   43374:	00800c04 	movi	r2,48
   43378:	d9002d17 	ldw	r4,180(sp)
   4337c:	d9402917 	ldw	r5,164(sp)
   43380:	d8802705 	stb	r2,156(sp)
   43384:	00801e04 	movi	r2,120
   43388:	d8802745 	stb	r2,157(sp)
   4338c:	d8002785 	stb	zero,158(sp)
   43390:	20c00104 	addi	r3,r4,4
   43394:	24c00017 	ldw	r19,0(r4)
   43398:	002d883a 	mov	r22,zero
   4339c:	90800094 	ori	r2,r18,2
   433a0:	28029a16 	blt	r5,zero,43e0c <___vfprintf_internal_r+0xdc0>
   433a4:	00bfdfc4 	movi	r2,-129
   433a8:	90a4703a 	and	r18,r18,r2
   433ac:	d8c02d15 	stw	r3,180(sp)
   433b0:	94800094 	ori	r18,r18,2
   433b4:	9802871e 	bne	r19,zero,43dd4 <___vfprintf_internal_r+0xd88>
   433b8:	00800174 	movhi	r2,5
   433bc:	1080cb04 	addi	r2,r2,812
   433c0:	d8803915 	stw	r2,228(sp)
   433c4:	04401e04 	movi	r17,120
   433c8:	d8802917 	ldw	r2,164(sp)
   433cc:	0039883a 	mov	fp,zero
   433d0:	1001e926 	beq	r2,zero,43b78 <___vfprintf_internal_r+0xb2c>
   433d4:	0027883a 	mov	r19,zero
   433d8:	002d883a 	mov	r22,zero
   433dc:	00020506 	br	43bf4 <___vfprintf_internal_r+0xba8>
   433e0:	d9002c17 	ldw	r4,176(sp)
   433e4:	b80b883a 	mov	r5,r23
   433e8:	00454740 	call	45474 <__swsetup_r>
   433ec:	1005ac1e 	bne	r2,zero,44aa0 <___vfprintf_internal_r+0x1a54>
   433f0:	b880030b 	ldhu	r2,12(r23)
   433f4:	00c00284 	movi	r3,10
   433f8:	1080068c 	andi	r2,r2,26
   433fc:	10ff3c1e 	bne	r2,r3,430f0 <__alt_data_end+0xfffc30f0>
   43400:	b880038f 	ldh	r2,14(r23)
   43404:	103f3a16 	blt	r2,zero,430f0 <__alt_data_end+0xfffc30f0>
   43408:	d9c02d17 	ldw	r7,180(sp)
   4340c:	d9002c17 	ldw	r4,176(sp)
   43410:	a80d883a 	mov	r6,r21
   43414:	b80b883a 	mov	r5,r23
   43418:	00452600 	call	45260 <__sbprintf>
   4341c:	00001106 	br	43464 <___vfprintf_internal_r+0x418>
   43420:	d9002c17 	ldw	r4,176(sp)
   43424:	d9801e04 	addi	r6,sp,120
   43428:	b80b883a 	mov	r5,r23
   4342c:	0049d740 	call	49d74 <__sprint_r>
   43430:	1000081e 	bne	r2,zero,43454 <___vfprintf_internal_r+0x408>
   43434:	da000404 	addi	r8,sp,16
   43438:	003f5306 	br	43188 <__alt_data_end+0xfffc3188>
   4343c:	d8802017 	ldw	r2,128(sp)
   43440:	10000426 	beq	r2,zero,43454 <___vfprintf_internal_r+0x408>
   43444:	d9002c17 	ldw	r4,176(sp)
   43448:	d9801e04 	addi	r6,sp,120
   4344c:	b80b883a 	mov	r5,r23
   43450:	0049d740 	call	49d74 <__sprint_r>
   43454:	b880030b 	ldhu	r2,12(r23)
   43458:	1080100c 	andi	r2,r2,64
   4345c:	1005901e 	bne	r2,zero,44aa0 <___vfprintf_internal_r+0x1a54>
   43460:	d8802f17 	ldw	r2,188(sp)
   43464:	dfc04717 	ldw	ra,284(sp)
   43468:	df004617 	ldw	fp,280(sp)
   4346c:	ddc04517 	ldw	r23,276(sp)
   43470:	dd804417 	ldw	r22,272(sp)
   43474:	dd404317 	ldw	r21,268(sp)
   43478:	dd004217 	ldw	r20,264(sp)
   4347c:	dcc04117 	ldw	r19,260(sp)
   43480:	dc804017 	ldw	r18,256(sp)
   43484:	dc403f17 	ldw	r17,252(sp)
   43488:	dc003e17 	ldw	r16,248(sp)
   4348c:	dec04804 	addi	sp,sp,288
   43490:	f800283a 	ret
   43494:	d9002c17 	ldw	r4,176(sp)
   43498:	00476e00 	call	476e0 <__sinit>
   4349c:	003f0406 	br	430b0 <__alt_data_end+0xfffc30b0>
   434a0:	d8802d17 	ldw	r2,180(sp)
   434a4:	d9002d17 	ldw	r4,180(sp)
   434a8:	10800017 	ldw	r2,0(r2)
   434ac:	d8803115 	stw	r2,196(sp)
   434b0:	20800104 	addi	r2,r4,4
   434b4:	d9003117 	ldw	r4,196(sp)
   434b8:	203fa716 	blt	r4,zero,43358 <__alt_data_end+0xfffc3358>
   434bc:	d8802d15 	stw	r2,180(sp)
   434c0:	ac400007 	ldb	r17,0(r21)
   434c4:	003f4206 	br	431d0 <__alt_data_end+0xfffc31d0>
   434c8:	ac400007 	ldb	r17,0(r21)
   434cc:	aac00044 	addi	r11,r21,1
   434d0:	8a872826 	beq	r17,r10,45174 <___vfprintf_internal_r+0x2128>
   434d4:	88bff404 	addi	r2,r17,-48
   434d8:	0009883a 	mov	r4,zero
   434dc:	30867d36 	bltu	r6,r2,44ed4 <___vfprintf_internal_r+0x1e88>
   434e0:	5c400007 	ldb	r17,0(r11)
   434e4:	210002a4 	muli	r4,r4,10
   434e8:	5d400044 	addi	r21,r11,1
   434ec:	a817883a 	mov	r11,r21
   434f0:	2089883a 	add	r4,r4,r2
   434f4:	88bff404 	addi	r2,r17,-48
   434f8:	30bff92e 	bgeu	r6,r2,434e0 <__alt_data_end+0xfffc34e0>
   434fc:	2005c916 	blt	r4,zero,44c24 <___vfprintf_internal_r+0x1bd8>
   43500:	d9002915 	stw	r4,164(sp)
   43504:	003f3306 	br	431d4 <__alt_data_end+0xfffc31d4>
   43508:	94802014 	ori	r18,r18,128
   4350c:	ac400007 	ldb	r17,0(r21)
   43510:	003f2f06 	br	431d0 <__alt_data_end+0xfffc31d0>
   43514:	a809883a 	mov	r4,r21
   43518:	d8003115 	stw	zero,196(sp)
   4351c:	88bff404 	addi	r2,r17,-48
   43520:	0017883a 	mov	r11,zero
   43524:	24400007 	ldb	r17,0(r4)
   43528:	5ac002a4 	muli	r11,r11,10
   4352c:	ad400044 	addi	r21,r21,1
   43530:	a809883a 	mov	r4,r21
   43534:	12d7883a 	add	r11,r2,r11
   43538:	88bff404 	addi	r2,r17,-48
   4353c:	30bff92e 	bgeu	r6,r2,43524 <__alt_data_end+0xfffc3524>
   43540:	dac03115 	stw	r11,196(sp)
   43544:	003f2306 	br	431d4 <__alt_data_end+0xfffc31d4>
   43548:	18c03fcc 	andi	r3,r3,255
   4354c:	18072b1e 	bne	r3,zero,451fc <___vfprintf_internal_r+0x21b0>
   43550:	94800414 	ori	r18,r18,16
   43554:	9080080c 	andi	r2,r18,32
   43558:	10037b26 	beq	r2,zero,44348 <___vfprintf_internal_r+0x12fc>
   4355c:	d9402d17 	ldw	r5,180(sp)
   43560:	28800117 	ldw	r2,4(r5)
   43564:	2cc00017 	ldw	r19,0(r5)
   43568:	29400204 	addi	r5,r5,8
   4356c:	d9402d15 	stw	r5,180(sp)
   43570:	102d883a 	mov	r22,r2
   43574:	10044b16 	blt	r2,zero,446a4 <___vfprintf_internal_r+0x1658>
   43578:	d9402917 	ldw	r5,164(sp)
   4357c:	df002783 	ldbu	fp,158(sp)
   43580:	2803bc16 	blt	r5,zero,44474 <___vfprintf_internal_r+0x1428>
   43584:	00ffdfc4 	movi	r3,-129
   43588:	9d84b03a 	or	r2,r19,r22
   4358c:	90e4703a 	and	r18,r18,r3
   43590:	10017726 	beq	r2,zero,43b70 <___vfprintf_internal_r+0xb24>
   43594:	b0038326 	beq	r22,zero,443a4 <___vfprintf_internal_r+0x1358>
   43598:	dc402a15 	stw	r17,168(sp)
   4359c:	dc001e04 	addi	r16,sp,120
   435a0:	b023883a 	mov	r17,r22
   435a4:	402d883a 	mov	r22,r8
   435a8:	9809883a 	mov	r4,r19
   435ac:	880b883a 	mov	r5,r17
   435b0:	01800284 	movi	r6,10
   435b4:	000f883a 	mov	r7,zero
   435b8:	004cc000 	call	4cc00 <__umoddi3>
   435bc:	10800c04 	addi	r2,r2,48
   435c0:	843fffc4 	addi	r16,r16,-1
   435c4:	9809883a 	mov	r4,r19
   435c8:	880b883a 	mov	r5,r17
   435cc:	80800005 	stb	r2,0(r16)
   435d0:	01800284 	movi	r6,10
   435d4:	000f883a 	mov	r7,zero
   435d8:	004c6880 	call	4c688 <__udivdi3>
   435dc:	1027883a 	mov	r19,r2
   435e0:	10c4b03a 	or	r2,r2,r3
   435e4:	1823883a 	mov	r17,r3
   435e8:	103fef1e 	bne	r2,zero,435a8 <__alt_data_end+0xfffc35a8>
   435ec:	d8c02817 	ldw	r3,160(sp)
   435f0:	dc402a17 	ldw	r17,168(sp)
   435f4:	b011883a 	mov	r8,r22
   435f8:	1c07c83a 	sub	r3,r3,r16
   435fc:	d8c02e15 	stw	r3,184(sp)
   43600:	00005906 	br	43768 <___vfprintf_internal_r+0x71c>
   43604:	18c03fcc 	andi	r3,r3,255
   43608:	1806fa1e 	bne	r3,zero,451f4 <___vfprintf_internal_r+0x21a8>
   4360c:	9080020c 	andi	r2,r18,8
   43610:	10048a26 	beq	r2,zero,4483c <___vfprintf_internal_r+0x17f0>
   43614:	d8c02d17 	ldw	r3,180(sp)
   43618:	d9002d17 	ldw	r4,180(sp)
   4361c:	d9402d17 	ldw	r5,180(sp)
   43620:	18c00017 	ldw	r3,0(r3)
   43624:	21000117 	ldw	r4,4(r4)
   43628:	29400204 	addi	r5,r5,8
   4362c:	d8c03615 	stw	r3,216(sp)
   43630:	d9003815 	stw	r4,224(sp)
   43634:	d9402d15 	stw	r5,180(sp)
   43638:	d9003617 	ldw	r4,216(sp)
   4363c:	d9403817 	ldw	r5,224(sp)
   43640:	da003d15 	stw	r8,244(sp)
   43644:	04000044 	movi	r16,1
   43648:	00499980 	call	49998 <__fpclassifyd>
   4364c:	da003d17 	ldw	r8,244(sp)
   43650:	14041f1e 	bne	r2,r16,446d0 <___vfprintf_internal_r+0x1684>
   43654:	d9003617 	ldw	r4,216(sp)
   43658:	d9403817 	ldw	r5,224(sp)
   4365c:	000d883a 	mov	r6,zero
   43660:	000f883a 	mov	r7,zero
   43664:	004e5e40 	call	4e5e4 <__ledf2>
   43668:	da003d17 	ldw	r8,244(sp)
   4366c:	1005be16 	blt	r2,zero,44d68 <___vfprintf_internal_r+0x1d1c>
   43670:	df002783 	ldbu	fp,158(sp)
   43674:	008011c4 	movi	r2,71
   43678:	1445330e 	bge	r2,r17,44b48 <___vfprintf_internal_r+0x1afc>
   4367c:	04000174 	movhi	r16,5
   43680:	8400c304 	addi	r16,r16,780
   43684:	00c000c4 	movi	r3,3
   43688:	00bfdfc4 	movi	r2,-129
   4368c:	d8c02a15 	stw	r3,168(sp)
   43690:	90a4703a 	and	r18,r18,r2
   43694:	d8c02e15 	stw	r3,184(sp)
   43698:	d8002915 	stw	zero,164(sp)
   4369c:	d8003215 	stw	zero,200(sp)
   436a0:	00003706 	br	43780 <___vfprintf_internal_r+0x734>
   436a4:	94800214 	ori	r18,r18,8
   436a8:	ac400007 	ldb	r17,0(r21)
   436ac:	003ec806 	br	431d0 <__alt_data_end+0xfffc31d0>
   436b0:	18c03fcc 	andi	r3,r3,255
   436b4:	1806db1e 	bne	r3,zero,45224 <___vfprintf_internal_r+0x21d8>
   436b8:	94800414 	ori	r18,r18,16
   436bc:	9080080c 	andi	r2,r18,32
   436c0:	1002d826 	beq	r2,zero,44224 <___vfprintf_internal_r+0x11d8>
   436c4:	d9402d17 	ldw	r5,180(sp)
   436c8:	d8c02917 	ldw	r3,164(sp)
   436cc:	d8002785 	stb	zero,158(sp)
   436d0:	28800204 	addi	r2,r5,8
   436d4:	2cc00017 	ldw	r19,0(r5)
   436d8:	2d800117 	ldw	r22,4(r5)
   436dc:	18048f16 	blt	r3,zero,4491c <___vfprintf_internal_r+0x18d0>
   436e0:	013fdfc4 	movi	r4,-129
   436e4:	9d86b03a 	or	r3,r19,r22
   436e8:	d8802d15 	stw	r2,180(sp)
   436ec:	9124703a 	and	r18,r18,r4
   436f0:	1802d91e 	bne	r3,zero,44258 <___vfprintf_internal_r+0x120c>
   436f4:	d8c02917 	ldw	r3,164(sp)
   436f8:	0039883a 	mov	fp,zero
   436fc:	1805c326 	beq	r3,zero,44e0c <___vfprintf_internal_r+0x1dc0>
   43700:	0027883a 	mov	r19,zero
   43704:	002d883a 	mov	r22,zero
   43708:	dc001e04 	addi	r16,sp,120
   4370c:	9806d0fa 	srli	r3,r19,3
   43710:	b008977a 	slli	r4,r22,29
   43714:	b02cd0fa 	srli	r22,r22,3
   43718:	9cc001cc 	andi	r19,r19,7
   4371c:	98800c04 	addi	r2,r19,48
   43720:	843fffc4 	addi	r16,r16,-1
   43724:	20e6b03a 	or	r19,r4,r3
   43728:	80800005 	stb	r2,0(r16)
   4372c:	9d86b03a 	or	r3,r19,r22
   43730:	183ff61e 	bne	r3,zero,4370c <__alt_data_end+0xfffc370c>
   43734:	90c0004c 	andi	r3,r18,1
   43738:	18013b26 	beq	r3,zero,43c28 <___vfprintf_internal_r+0xbdc>
   4373c:	10803fcc 	andi	r2,r2,255
   43740:	1080201c 	xori	r2,r2,128
   43744:	10bfe004 	addi	r2,r2,-128
   43748:	00c00c04 	movi	r3,48
   4374c:	10c13626 	beq	r2,r3,43c28 <___vfprintf_internal_r+0xbdc>
   43750:	80ffffc5 	stb	r3,-1(r16)
   43754:	d8c02817 	ldw	r3,160(sp)
   43758:	80bfffc4 	addi	r2,r16,-1
   4375c:	1021883a 	mov	r16,r2
   43760:	1887c83a 	sub	r3,r3,r2
   43764:	d8c02e15 	stw	r3,184(sp)
   43768:	d8802e17 	ldw	r2,184(sp)
   4376c:	d9002917 	ldw	r4,164(sp)
   43770:	1100010e 	bge	r2,r4,43778 <___vfprintf_internal_r+0x72c>
   43774:	2005883a 	mov	r2,r4
   43778:	d8802a15 	stw	r2,168(sp)
   4377c:	d8003215 	stw	zero,200(sp)
   43780:	e7003fcc 	andi	fp,fp,255
   43784:	e700201c 	xori	fp,fp,128
   43788:	e73fe004 	addi	fp,fp,-128
   4378c:	e0000326 	beq	fp,zero,4379c <___vfprintf_internal_r+0x750>
   43790:	d8c02a17 	ldw	r3,168(sp)
   43794:	18c00044 	addi	r3,r3,1
   43798:	d8c02a15 	stw	r3,168(sp)
   4379c:	90c0008c 	andi	r3,r18,2
   437a0:	d8c02b15 	stw	r3,172(sp)
   437a4:	18000326 	beq	r3,zero,437b4 <___vfprintf_internal_r+0x768>
   437a8:	d8c02a17 	ldw	r3,168(sp)
   437ac:	18c00084 	addi	r3,r3,2
   437b0:	d8c02a15 	stw	r3,168(sp)
   437b4:	90c0210c 	andi	r3,r18,132
   437b8:	d8c03015 	stw	r3,192(sp)
   437bc:	1801a31e 	bne	r3,zero,43e4c <___vfprintf_internal_r+0xe00>
   437c0:	d9003117 	ldw	r4,196(sp)
   437c4:	d8c02a17 	ldw	r3,168(sp)
   437c8:	20e7c83a 	sub	r19,r4,r3
   437cc:	04c19f0e 	bge	zero,r19,43e4c <___vfprintf_internal_r+0xe00>
   437d0:	02400404 	movi	r9,16
   437d4:	d8c02017 	ldw	r3,128(sp)
   437d8:	d8801f17 	ldw	r2,124(sp)
   437dc:	4cc50d0e 	bge	r9,r19,44c14 <___vfprintf_internal_r+0x1bc8>
   437e0:	01400174 	movhi	r5,5
   437e4:	2940d684 	addi	r5,r5,858
   437e8:	dc403b15 	stw	r17,236(sp)
   437ec:	d9403515 	stw	r5,212(sp)
   437f0:	9823883a 	mov	r17,r19
   437f4:	482d883a 	mov	r22,r9
   437f8:	9027883a 	mov	r19,r18
   437fc:	070001c4 	movi	fp,7
   43800:	8025883a 	mov	r18,r16
   43804:	dc002c17 	ldw	r16,176(sp)
   43808:	00000306 	br	43818 <___vfprintf_internal_r+0x7cc>
   4380c:	8c7ffc04 	addi	r17,r17,-16
   43810:	42000204 	addi	r8,r8,8
   43814:	b440130e 	bge	r22,r17,43864 <___vfprintf_internal_r+0x818>
   43818:	01000174 	movhi	r4,5
   4381c:	18c00404 	addi	r3,r3,16
   43820:	10800044 	addi	r2,r2,1
   43824:	2100d684 	addi	r4,r4,858
   43828:	41000015 	stw	r4,0(r8)
   4382c:	45800115 	stw	r22,4(r8)
   43830:	d8c02015 	stw	r3,128(sp)
   43834:	d8801f15 	stw	r2,124(sp)
   43838:	e0bff40e 	bge	fp,r2,4380c <__alt_data_end+0xfffc380c>
   4383c:	d9801e04 	addi	r6,sp,120
   43840:	b80b883a 	mov	r5,r23
   43844:	8009883a 	mov	r4,r16
   43848:	0049d740 	call	49d74 <__sprint_r>
   4384c:	103f011e 	bne	r2,zero,43454 <__alt_data_end+0xfffc3454>
   43850:	8c7ffc04 	addi	r17,r17,-16
   43854:	d8c02017 	ldw	r3,128(sp)
   43858:	d8801f17 	ldw	r2,124(sp)
   4385c:	da000404 	addi	r8,sp,16
   43860:	b47fed16 	blt	r22,r17,43818 <__alt_data_end+0xfffc3818>
   43864:	9021883a 	mov	r16,r18
   43868:	9825883a 	mov	r18,r19
   4386c:	8827883a 	mov	r19,r17
   43870:	dc403b17 	ldw	r17,236(sp)
   43874:	d9403517 	ldw	r5,212(sp)
   43878:	98c7883a 	add	r3,r19,r3
   4387c:	10800044 	addi	r2,r2,1
   43880:	41400015 	stw	r5,0(r8)
   43884:	44c00115 	stw	r19,4(r8)
   43888:	d8c02015 	stw	r3,128(sp)
   4388c:	d8801f15 	stw	r2,124(sp)
   43890:	010001c4 	movi	r4,7
   43894:	2082a316 	blt	r4,r2,44324 <___vfprintf_internal_r+0x12d8>
   43898:	df002787 	ldb	fp,158(sp)
   4389c:	42000204 	addi	r8,r8,8
   438a0:	e0000c26 	beq	fp,zero,438d4 <___vfprintf_internal_r+0x888>
   438a4:	d8801f17 	ldw	r2,124(sp)
   438a8:	d9002784 	addi	r4,sp,158
   438ac:	18c00044 	addi	r3,r3,1
   438b0:	10800044 	addi	r2,r2,1
   438b4:	41000015 	stw	r4,0(r8)
   438b8:	01000044 	movi	r4,1
   438bc:	41000115 	stw	r4,4(r8)
   438c0:	d8c02015 	stw	r3,128(sp)
   438c4:	d8801f15 	stw	r2,124(sp)
   438c8:	010001c4 	movi	r4,7
   438cc:	20823c16 	blt	r4,r2,441c0 <___vfprintf_internal_r+0x1174>
   438d0:	42000204 	addi	r8,r8,8
   438d4:	d8802b17 	ldw	r2,172(sp)
   438d8:	10000c26 	beq	r2,zero,4390c <___vfprintf_internal_r+0x8c0>
   438dc:	d8801f17 	ldw	r2,124(sp)
   438e0:	d9002704 	addi	r4,sp,156
   438e4:	18c00084 	addi	r3,r3,2
   438e8:	10800044 	addi	r2,r2,1
   438ec:	41000015 	stw	r4,0(r8)
   438f0:	01000084 	movi	r4,2
   438f4:	41000115 	stw	r4,4(r8)
   438f8:	d8c02015 	stw	r3,128(sp)
   438fc:	d8801f15 	stw	r2,124(sp)
   43900:	010001c4 	movi	r4,7
   43904:	20823616 	blt	r4,r2,441e0 <___vfprintf_internal_r+0x1194>
   43908:	42000204 	addi	r8,r8,8
   4390c:	d9003017 	ldw	r4,192(sp)
   43910:	00802004 	movi	r2,128
   43914:	20819926 	beq	r4,r2,43f7c <___vfprintf_internal_r+0xf30>
   43918:	d9402917 	ldw	r5,164(sp)
   4391c:	d8802e17 	ldw	r2,184(sp)
   43920:	28adc83a 	sub	r22,r5,r2
   43924:	0580310e 	bge	zero,r22,439ec <___vfprintf_internal_r+0x9a0>
   43928:	07000404 	movi	fp,16
   4392c:	d8801f17 	ldw	r2,124(sp)
   43930:	e584140e 	bge	fp,r22,44984 <___vfprintf_internal_r+0x1938>
   43934:	01400174 	movhi	r5,5
   43938:	2940d284 	addi	r5,r5,842
   4393c:	dc402915 	stw	r17,164(sp)
   43940:	d9402b15 	stw	r5,172(sp)
   43944:	b023883a 	mov	r17,r22
   43948:	04c001c4 	movi	r19,7
   4394c:	a82d883a 	mov	r22,r21
   43950:	902b883a 	mov	r21,r18
   43954:	8025883a 	mov	r18,r16
   43958:	dc002c17 	ldw	r16,176(sp)
   4395c:	00000306 	br	4396c <___vfprintf_internal_r+0x920>
   43960:	8c7ffc04 	addi	r17,r17,-16
   43964:	42000204 	addi	r8,r8,8
   43968:	e440110e 	bge	fp,r17,439b0 <___vfprintf_internal_r+0x964>
   4396c:	18c00404 	addi	r3,r3,16
   43970:	10800044 	addi	r2,r2,1
   43974:	45000015 	stw	r20,0(r8)
   43978:	47000115 	stw	fp,4(r8)
   4397c:	d8c02015 	stw	r3,128(sp)
   43980:	d8801f15 	stw	r2,124(sp)
   43984:	98bff60e 	bge	r19,r2,43960 <__alt_data_end+0xfffc3960>
   43988:	d9801e04 	addi	r6,sp,120
   4398c:	b80b883a 	mov	r5,r23
   43990:	8009883a 	mov	r4,r16
   43994:	0049d740 	call	49d74 <__sprint_r>
   43998:	103eae1e 	bne	r2,zero,43454 <__alt_data_end+0xfffc3454>
   4399c:	8c7ffc04 	addi	r17,r17,-16
   439a0:	d8c02017 	ldw	r3,128(sp)
   439a4:	d8801f17 	ldw	r2,124(sp)
   439a8:	da000404 	addi	r8,sp,16
   439ac:	e47fef16 	blt	fp,r17,4396c <__alt_data_end+0xfffc396c>
   439b0:	9021883a 	mov	r16,r18
   439b4:	a825883a 	mov	r18,r21
   439b8:	b02b883a 	mov	r21,r22
   439bc:	882d883a 	mov	r22,r17
   439c0:	dc402917 	ldw	r17,164(sp)
   439c4:	d9002b17 	ldw	r4,172(sp)
   439c8:	1d87883a 	add	r3,r3,r22
   439cc:	10800044 	addi	r2,r2,1
   439d0:	41000015 	stw	r4,0(r8)
   439d4:	45800115 	stw	r22,4(r8)
   439d8:	d8c02015 	stw	r3,128(sp)
   439dc:	d8801f15 	stw	r2,124(sp)
   439e0:	010001c4 	movi	r4,7
   439e4:	2081ee16 	blt	r4,r2,441a0 <___vfprintf_internal_r+0x1154>
   439e8:	42000204 	addi	r8,r8,8
   439ec:	9080400c 	andi	r2,r18,256
   439f0:	1001181e 	bne	r2,zero,43e54 <___vfprintf_internal_r+0xe08>
   439f4:	d9402e17 	ldw	r5,184(sp)
   439f8:	d8801f17 	ldw	r2,124(sp)
   439fc:	44000015 	stw	r16,0(r8)
   43a00:	1947883a 	add	r3,r3,r5
   43a04:	10800044 	addi	r2,r2,1
   43a08:	41400115 	stw	r5,4(r8)
   43a0c:	d8c02015 	stw	r3,128(sp)
   43a10:	d8801f15 	stw	r2,124(sp)
   43a14:	010001c4 	movi	r4,7
   43a18:	2081d316 	blt	r4,r2,44168 <___vfprintf_internal_r+0x111c>
   43a1c:	42000204 	addi	r8,r8,8
   43a20:	9480010c 	andi	r18,r18,4
   43a24:	90003226 	beq	r18,zero,43af0 <___vfprintf_internal_r+0xaa4>
   43a28:	d9403117 	ldw	r5,196(sp)
   43a2c:	d8802a17 	ldw	r2,168(sp)
   43a30:	28a1c83a 	sub	r16,r5,r2
   43a34:	04002e0e 	bge	zero,r16,43af0 <___vfprintf_internal_r+0xaa4>
   43a38:	04400404 	movi	r17,16
   43a3c:	d8801f17 	ldw	r2,124(sp)
   43a40:	8c04a20e 	bge	r17,r16,44ccc <___vfprintf_internal_r+0x1c80>
   43a44:	01400174 	movhi	r5,5
   43a48:	2940d684 	addi	r5,r5,858
   43a4c:	d9403515 	stw	r5,212(sp)
   43a50:	048001c4 	movi	r18,7
   43a54:	dcc02c17 	ldw	r19,176(sp)
   43a58:	00000306 	br	43a68 <___vfprintf_internal_r+0xa1c>
   43a5c:	843ffc04 	addi	r16,r16,-16
   43a60:	42000204 	addi	r8,r8,8
   43a64:	8c00130e 	bge	r17,r16,43ab4 <___vfprintf_internal_r+0xa68>
   43a68:	01000174 	movhi	r4,5
   43a6c:	18c00404 	addi	r3,r3,16
   43a70:	10800044 	addi	r2,r2,1
   43a74:	2100d684 	addi	r4,r4,858
   43a78:	41000015 	stw	r4,0(r8)
   43a7c:	44400115 	stw	r17,4(r8)
   43a80:	d8c02015 	stw	r3,128(sp)
   43a84:	d8801f15 	stw	r2,124(sp)
   43a88:	90bff40e 	bge	r18,r2,43a5c <__alt_data_end+0xfffc3a5c>
   43a8c:	d9801e04 	addi	r6,sp,120
   43a90:	b80b883a 	mov	r5,r23
   43a94:	9809883a 	mov	r4,r19
   43a98:	0049d740 	call	49d74 <__sprint_r>
   43a9c:	103e6d1e 	bne	r2,zero,43454 <__alt_data_end+0xfffc3454>
   43aa0:	843ffc04 	addi	r16,r16,-16
   43aa4:	d8c02017 	ldw	r3,128(sp)
   43aa8:	d8801f17 	ldw	r2,124(sp)
   43aac:	da000404 	addi	r8,sp,16
   43ab0:	8c3fed16 	blt	r17,r16,43a68 <__alt_data_end+0xfffc3a68>
   43ab4:	d9403517 	ldw	r5,212(sp)
   43ab8:	1c07883a 	add	r3,r3,r16
   43abc:	10800044 	addi	r2,r2,1
   43ac0:	41400015 	stw	r5,0(r8)
   43ac4:	44000115 	stw	r16,4(r8)
   43ac8:	d8c02015 	stw	r3,128(sp)
   43acc:	d8801f15 	stw	r2,124(sp)
   43ad0:	010001c4 	movi	r4,7
   43ad4:	2080060e 	bge	r4,r2,43af0 <___vfprintf_internal_r+0xaa4>
   43ad8:	d9002c17 	ldw	r4,176(sp)
   43adc:	d9801e04 	addi	r6,sp,120
   43ae0:	b80b883a 	mov	r5,r23
   43ae4:	0049d740 	call	49d74 <__sprint_r>
   43ae8:	103e5a1e 	bne	r2,zero,43454 <__alt_data_end+0xfffc3454>
   43aec:	d8c02017 	ldw	r3,128(sp)
   43af0:	d8803117 	ldw	r2,196(sp)
   43af4:	d9002a17 	ldw	r4,168(sp)
   43af8:	1100010e 	bge	r2,r4,43b00 <___vfprintf_internal_r+0xab4>
   43afc:	2005883a 	mov	r2,r4
   43b00:	d9402f17 	ldw	r5,188(sp)
   43b04:	288b883a 	add	r5,r5,r2
   43b08:	d9402f15 	stw	r5,188(sp)
   43b0c:	18019e1e 	bne	r3,zero,44188 <___vfprintf_internal_r+0x113c>
   43b10:	a8800007 	ldb	r2,0(r21)
   43b14:	d8001f15 	stw	zero,124(sp)
   43b18:	da000404 	addi	r8,sp,16
   43b1c:	103d851e 	bne	r2,zero,43134 <__alt_data_end+0xfffc3134>
   43b20:	a821883a 	mov	r16,r21
   43b24:	003d9b06 	br	43194 <__alt_data_end+0xfffc3194>
   43b28:	18c03fcc 	andi	r3,r3,255
   43b2c:	1805c11e 	bne	r3,zero,45234 <___vfprintf_internal_r+0x21e8>
   43b30:	94800414 	ori	r18,r18,16
   43b34:	9080080c 	andi	r2,r18,32
   43b38:	10020c26 	beq	r2,zero,4436c <___vfprintf_internal_r+0x1320>
   43b3c:	d8802d17 	ldw	r2,180(sp)
   43b40:	d9002917 	ldw	r4,164(sp)
   43b44:	d8002785 	stb	zero,158(sp)
   43b48:	10c00204 	addi	r3,r2,8
   43b4c:	14c00017 	ldw	r19,0(r2)
   43b50:	15800117 	ldw	r22,4(r2)
   43b54:	20040f16 	blt	r4,zero,44b94 <___vfprintf_internal_r+0x1b48>
   43b58:	013fdfc4 	movi	r4,-129
   43b5c:	9d84b03a 	or	r2,r19,r22
   43b60:	d8c02d15 	stw	r3,180(sp)
   43b64:	9124703a 	and	r18,r18,r4
   43b68:	0039883a 	mov	fp,zero
   43b6c:	103e891e 	bne	r2,zero,43594 <__alt_data_end+0xfffc3594>
   43b70:	d9002917 	ldw	r4,164(sp)
   43b74:	2002c11e 	bne	r4,zero,4467c <___vfprintf_internal_r+0x1630>
   43b78:	d8002915 	stw	zero,164(sp)
   43b7c:	d8002e15 	stw	zero,184(sp)
   43b80:	dc001e04 	addi	r16,sp,120
   43b84:	003ef806 	br	43768 <__alt_data_end+0xfffc3768>
   43b88:	18c03fcc 	andi	r3,r3,255
   43b8c:	18059d1e 	bne	r3,zero,45204 <___vfprintf_internal_r+0x21b8>
   43b90:	01400174 	movhi	r5,5
   43b94:	2940c604 	addi	r5,r5,792
   43b98:	d9403915 	stw	r5,228(sp)
   43b9c:	9080080c 	andi	r2,r18,32
   43ba0:	10005226 	beq	r2,zero,43cec <___vfprintf_internal_r+0xca0>
   43ba4:	d8802d17 	ldw	r2,180(sp)
   43ba8:	14c00017 	ldw	r19,0(r2)
   43bac:	15800117 	ldw	r22,4(r2)
   43bb0:	10800204 	addi	r2,r2,8
   43bb4:	d8802d15 	stw	r2,180(sp)
   43bb8:	9080004c 	andi	r2,r18,1
   43bbc:	10019026 	beq	r2,zero,44200 <___vfprintf_internal_r+0x11b4>
   43bc0:	9d84b03a 	or	r2,r19,r22
   43bc4:	10036926 	beq	r2,zero,4496c <___vfprintf_internal_r+0x1920>
   43bc8:	d8c02917 	ldw	r3,164(sp)
   43bcc:	00800c04 	movi	r2,48
   43bd0:	d8802705 	stb	r2,156(sp)
   43bd4:	dc402745 	stb	r17,157(sp)
   43bd8:	d8002785 	stb	zero,158(sp)
   43bdc:	90800094 	ori	r2,r18,2
   43be0:	18045d16 	blt	r3,zero,44d58 <___vfprintf_internal_r+0x1d0c>
   43be4:	00bfdfc4 	movi	r2,-129
   43be8:	90a4703a 	and	r18,r18,r2
   43bec:	94800094 	ori	r18,r18,2
   43bf0:	0039883a 	mov	fp,zero
   43bf4:	d9003917 	ldw	r4,228(sp)
   43bf8:	dc001e04 	addi	r16,sp,120
   43bfc:	988003cc 	andi	r2,r19,15
   43c00:	b006973a 	slli	r3,r22,28
   43c04:	2085883a 	add	r2,r4,r2
   43c08:	9826d13a 	srli	r19,r19,4
   43c0c:	10800003 	ldbu	r2,0(r2)
   43c10:	b02cd13a 	srli	r22,r22,4
   43c14:	843fffc4 	addi	r16,r16,-1
   43c18:	1ce6b03a 	or	r19,r3,r19
   43c1c:	80800005 	stb	r2,0(r16)
   43c20:	9d84b03a 	or	r2,r19,r22
   43c24:	103ff51e 	bne	r2,zero,43bfc <__alt_data_end+0xfffc3bfc>
   43c28:	d8c02817 	ldw	r3,160(sp)
   43c2c:	1c07c83a 	sub	r3,r3,r16
   43c30:	d8c02e15 	stw	r3,184(sp)
   43c34:	003ecc06 	br	43768 <__alt_data_end+0xfffc3768>
   43c38:	18c03fcc 	andi	r3,r3,255
   43c3c:	183e9f26 	beq	r3,zero,436bc <__alt_data_end+0xfffc36bc>
   43c40:	d9c02785 	stb	r7,158(sp)
   43c44:	003e9d06 	br	436bc <__alt_data_end+0xfffc36bc>
   43c48:	00c00044 	movi	r3,1
   43c4c:	01c00ac4 	movi	r7,43
   43c50:	ac400007 	ldb	r17,0(r21)
   43c54:	003d5e06 	br	431d0 <__alt_data_end+0xfffc31d0>
   43c58:	94800814 	ori	r18,r18,32
   43c5c:	ac400007 	ldb	r17,0(r21)
   43c60:	003d5b06 	br	431d0 <__alt_data_end+0xfffc31d0>
   43c64:	d8c02d17 	ldw	r3,180(sp)
   43c68:	d8002785 	stb	zero,158(sp)
   43c6c:	1c000017 	ldw	r16,0(r3)
   43c70:	1cc00104 	addi	r19,r3,4
   43c74:	80041926 	beq	r16,zero,44cdc <___vfprintf_internal_r+0x1c90>
   43c78:	d9002917 	ldw	r4,164(sp)
   43c7c:	2003d016 	blt	r4,zero,44bc0 <___vfprintf_internal_r+0x1b74>
   43c80:	200d883a 	mov	r6,r4
   43c84:	000b883a 	mov	r5,zero
   43c88:	8009883a 	mov	r4,r16
   43c8c:	da003d15 	stw	r8,244(sp)
   43c90:	00487900 	call	48790 <memchr>
   43c94:	da003d17 	ldw	r8,244(sp)
   43c98:	10045426 	beq	r2,zero,44dec <___vfprintf_internal_r+0x1da0>
   43c9c:	1405c83a 	sub	r2,r2,r16
   43ca0:	d8802e15 	stw	r2,184(sp)
   43ca4:	1003cc16 	blt	r2,zero,44bd8 <___vfprintf_internal_r+0x1b8c>
   43ca8:	df002783 	ldbu	fp,158(sp)
   43cac:	d8802a15 	stw	r2,168(sp)
   43cb0:	dcc02d15 	stw	r19,180(sp)
   43cb4:	d8002915 	stw	zero,164(sp)
   43cb8:	d8003215 	stw	zero,200(sp)
   43cbc:	003eb006 	br	43780 <__alt_data_end+0xfffc3780>
   43cc0:	18c03fcc 	andi	r3,r3,255
   43cc4:	183f9b26 	beq	r3,zero,43b34 <__alt_data_end+0xfffc3b34>
   43cc8:	d9c02785 	stb	r7,158(sp)
   43ccc:	003f9906 	br	43b34 <__alt_data_end+0xfffc3b34>
   43cd0:	18c03fcc 	andi	r3,r3,255
   43cd4:	1805551e 	bne	r3,zero,4522c <___vfprintf_internal_r+0x21e0>
   43cd8:	01400174 	movhi	r5,5
   43cdc:	2940cb04 	addi	r5,r5,812
   43ce0:	d9403915 	stw	r5,228(sp)
   43ce4:	9080080c 	andi	r2,r18,32
   43ce8:	103fae1e 	bne	r2,zero,43ba4 <__alt_data_end+0xfffc3ba4>
   43cec:	9080040c 	andi	r2,r18,16
   43cf0:	1002de26 	beq	r2,zero,4486c <___vfprintf_internal_r+0x1820>
   43cf4:	d8c02d17 	ldw	r3,180(sp)
   43cf8:	002d883a 	mov	r22,zero
   43cfc:	1cc00017 	ldw	r19,0(r3)
   43d00:	18c00104 	addi	r3,r3,4
   43d04:	d8c02d15 	stw	r3,180(sp)
   43d08:	003fab06 	br	43bb8 <__alt_data_end+0xfffc3bb8>
   43d0c:	38803fcc 	andi	r2,r7,255
   43d10:	1080201c 	xori	r2,r2,128
   43d14:	10bfe004 	addi	r2,r2,-128
   43d18:	1002d21e 	bne	r2,zero,44864 <___vfprintf_internal_r+0x1818>
   43d1c:	00c00044 	movi	r3,1
   43d20:	01c00804 	movi	r7,32
   43d24:	ac400007 	ldb	r17,0(r21)
   43d28:	003d2906 	br	431d0 <__alt_data_end+0xfffc31d0>
   43d2c:	94800054 	ori	r18,r18,1
   43d30:	ac400007 	ldb	r17,0(r21)
   43d34:	003d2606 	br	431d0 <__alt_data_end+0xfffc31d0>
   43d38:	18c03fcc 	andi	r3,r3,255
   43d3c:	183e0526 	beq	r3,zero,43554 <__alt_data_end+0xfffc3554>
   43d40:	d9c02785 	stb	r7,158(sp)
   43d44:	003e0306 	br	43554 <__alt_data_end+0xfffc3554>
   43d48:	94801014 	ori	r18,r18,64
   43d4c:	ac400007 	ldb	r17,0(r21)
   43d50:	003d1f06 	br	431d0 <__alt_data_end+0xfffc31d0>
   43d54:	ac400007 	ldb	r17,0(r21)
   43d58:	8a438726 	beq	r17,r9,44b78 <___vfprintf_internal_r+0x1b2c>
   43d5c:	94800414 	ori	r18,r18,16
   43d60:	003d1b06 	br	431d0 <__alt_data_end+0xfffc31d0>
   43d64:	18c03fcc 	andi	r3,r3,255
   43d68:	1805341e 	bne	r3,zero,4523c <___vfprintf_internal_r+0x21f0>
   43d6c:	9080080c 	andi	r2,r18,32
   43d70:	1002cd26 	beq	r2,zero,448a8 <___vfprintf_internal_r+0x185c>
   43d74:	d9402d17 	ldw	r5,180(sp)
   43d78:	d9002f17 	ldw	r4,188(sp)
   43d7c:	28800017 	ldw	r2,0(r5)
   43d80:	2007d7fa 	srai	r3,r4,31
   43d84:	29400104 	addi	r5,r5,4
   43d88:	d9402d15 	stw	r5,180(sp)
   43d8c:	11000015 	stw	r4,0(r2)
   43d90:	10c00115 	stw	r3,4(r2)
   43d94:	003ce506 	br	4312c <__alt_data_end+0xfffc312c>
   43d98:	d8c02d17 	ldw	r3,180(sp)
   43d9c:	d9002d17 	ldw	r4,180(sp)
   43da0:	d8002785 	stb	zero,158(sp)
   43da4:	18800017 	ldw	r2,0(r3)
   43da8:	21000104 	addi	r4,r4,4
   43dac:	00c00044 	movi	r3,1
   43db0:	d8c02a15 	stw	r3,168(sp)
   43db4:	d8801405 	stb	r2,80(sp)
   43db8:	d9002d15 	stw	r4,180(sp)
   43dbc:	d8c02e15 	stw	r3,184(sp)
   43dc0:	d8002915 	stw	zero,164(sp)
   43dc4:	d8003215 	stw	zero,200(sp)
   43dc8:	dc001404 	addi	r16,sp,80
   43dcc:	0039883a 	mov	fp,zero
   43dd0:	003e7206 	br	4379c <__alt_data_end+0xfffc379c>
   43dd4:	01000174 	movhi	r4,5
   43dd8:	2100cb04 	addi	r4,r4,812
   43ddc:	0039883a 	mov	fp,zero
   43de0:	d9003915 	stw	r4,228(sp)
   43de4:	04401e04 	movi	r17,120
   43de8:	003f8206 	br	43bf4 <__alt_data_end+0xfffc3bf4>
   43dec:	18c03fcc 	andi	r3,r3,255
   43df0:	1805061e 	bne	r3,zero,4520c <___vfprintf_internal_r+0x21c0>
   43df4:	883d9126 	beq	r17,zero,4343c <__alt_data_end+0xfffc343c>
   43df8:	00c00044 	movi	r3,1
   43dfc:	d8c02a15 	stw	r3,168(sp)
   43e00:	dc401405 	stb	r17,80(sp)
   43e04:	d8002785 	stb	zero,158(sp)
   43e08:	003fec06 	br	43dbc <__alt_data_end+0xfffc3dbc>
   43e0c:	01400174 	movhi	r5,5
   43e10:	2940cb04 	addi	r5,r5,812
   43e14:	d9403915 	stw	r5,228(sp)
   43e18:	d8c02d15 	stw	r3,180(sp)
   43e1c:	1025883a 	mov	r18,r2
   43e20:	04401e04 	movi	r17,120
   43e24:	9d84b03a 	or	r2,r19,r22
   43e28:	1000fc1e 	bne	r2,zero,4421c <___vfprintf_internal_r+0x11d0>
   43e2c:	0039883a 	mov	fp,zero
   43e30:	00800084 	movi	r2,2
   43e34:	10803fcc 	andi	r2,r2,255
   43e38:	00c00044 	movi	r3,1
   43e3c:	10c20f26 	beq	r2,r3,4467c <___vfprintf_internal_r+0x1630>
   43e40:	00c00084 	movi	r3,2
   43e44:	10fd6326 	beq	r2,r3,433d4 <__alt_data_end+0xfffc33d4>
   43e48:	003e2d06 	br	43700 <__alt_data_end+0xfffc3700>
   43e4c:	d8c02017 	ldw	r3,128(sp)
   43e50:	003e9306 	br	438a0 <__alt_data_end+0xfffc38a0>
   43e54:	00801944 	movi	r2,101
   43e58:	14407e0e 	bge	r2,r17,44054 <___vfprintf_internal_r+0x1008>
   43e5c:	d9003617 	ldw	r4,216(sp)
   43e60:	d9403817 	ldw	r5,224(sp)
   43e64:	000d883a 	mov	r6,zero
   43e68:	000f883a 	mov	r7,zero
   43e6c:	d8c03c15 	stw	r3,240(sp)
   43e70:	da003d15 	stw	r8,244(sp)
   43e74:	004e4800 	call	4e480 <__eqdf2>
   43e78:	d8c03c17 	ldw	r3,240(sp)
   43e7c:	da003d17 	ldw	r8,244(sp)
   43e80:	1000f71e 	bne	r2,zero,44260 <___vfprintf_internal_r+0x1214>
   43e84:	d8801f17 	ldw	r2,124(sp)
   43e88:	01000174 	movhi	r4,5
   43e8c:	2100d204 	addi	r4,r4,840
   43e90:	18c00044 	addi	r3,r3,1
   43e94:	10800044 	addi	r2,r2,1
   43e98:	41000015 	stw	r4,0(r8)
   43e9c:	01000044 	movi	r4,1
   43ea0:	41000115 	stw	r4,4(r8)
   43ea4:	d8c02015 	stw	r3,128(sp)
   43ea8:	d8801f15 	stw	r2,124(sp)
   43eac:	010001c4 	movi	r4,7
   43eb0:	2082b816 	blt	r4,r2,44994 <___vfprintf_internal_r+0x1948>
   43eb4:	42000204 	addi	r8,r8,8
   43eb8:	d8802617 	ldw	r2,152(sp)
   43ebc:	d9403317 	ldw	r5,204(sp)
   43ec0:	11400216 	blt	r2,r5,43ecc <___vfprintf_internal_r+0xe80>
   43ec4:	9080004c 	andi	r2,r18,1
   43ec8:	103ed526 	beq	r2,zero,43a20 <__alt_data_end+0xfffc3a20>
   43ecc:	d8803717 	ldw	r2,220(sp)
   43ed0:	d9003417 	ldw	r4,208(sp)
   43ed4:	d9403717 	ldw	r5,220(sp)
   43ed8:	1887883a 	add	r3,r3,r2
   43edc:	d8801f17 	ldw	r2,124(sp)
   43ee0:	41000015 	stw	r4,0(r8)
   43ee4:	41400115 	stw	r5,4(r8)
   43ee8:	10800044 	addi	r2,r2,1
   43eec:	d8c02015 	stw	r3,128(sp)
   43ef0:	d8801f15 	stw	r2,124(sp)
   43ef4:	010001c4 	movi	r4,7
   43ef8:	20832916 	blt	r4,r2,44ba0 <___vfprintf_internal_r+0x1b54>
   43efc:	42000204 	addi	r8,r8,8
   43f00:	d8803317 	ldw	r2,204(sp)
   43f04:	143fffc4 	addi	r16,r2,-1
   43f08:	043ec50e 	bge	zero,r16,43a20 <__alt_data_end+0xfffc3a20>
   43f0c:	04400404 	movi	r17,16
   43f10:	d8801f17 	ldw	r2,124(sp)
   43f14:	8c00880e 	bge	r17,r16,44138 <___vfprintf_internal_r+0x10ec>
   43f18:	01400174 	movhi	r5,5
   43f1c:	2940d284 	addi	r5,r5,842
   43f20:	d9402b15 	stw	r5,172(sp)
   43f24:	058001c4 	movi	r22,7
   43f28:	dcc02c17 	ldw	r19,176(sp)
   43f2c:	00000306 	br	43f3c <___vfprintf_internal_r+0xef0>
   43f30:	42000204 	addi	r8,r8,8
   43f34:	843ffc04 	addi	r16,r16,-16
   43f38:	8c00820e 	bge	r17,r16,44144 <___vfprintf_internal_r+0x10f8>
   43f3c:	18c00404 	addi	r3,r3,16
   43f40:	10800044 	addi	r2,r2,1
   43f44:	45000015 	stw	r20,0(r8)
   43f48:	44400115 	stw	r17,4(r8)
   43f4c:	d8c02015 	stw	r3,128(sp)
   43f50:	d8801f15 	stw	r2,124(sp)
   43f54:	b0bff60e 	bge	r22,r2,43f30 <__alt_data_end+0xfffc3f30>
   43f58:	d9801e04 	addi	r6,sp,120
   43f5c:	b80b883a 	mov	r5,r23
   43f60:	9809883a 	mov	r4,r19
   43f64:	0049d740 	call	49d74 <__sprint_r>
   43f68:	103d3a1e 	bne	r2,zero,43454 <__alt_data_end+0xfffc3454>
   43f6c:	d8c02017 	ldw	r3,128(sp)
   43f70:	d8801f17 	ldw	r2,124(sp)
   43f74:	da000404 	addi	r8,sp,16
   43f78:	003fee06 	br	43f34 <__alt_data_end+0xfffc3f34>
   43f7c:	d9403117 	ldw	r5,196(sp)
   43f80:	d8802a17 	ldw	r2,168(sp)
   43f84:	28adc83a 	sub	r22,r5,r2
   43f88:	05be630e 	bge	zero,r22,43918 <__alt_data_end+0xfffc3918>
   43f8c:	07000404 	movi	fp,16
   43f90:	d8801f17 	ldw	r2,124(sp)
   43f94:	e5838f0e 	bge	fp,r22,44dd4 <___vfprintf_internal_r+0x1d88>
   43f98:	01400174 	movhi	r5,5
   43f9c:	2940d284 	addi	r5,r5,842
   43fa0:	dc403015 	stw	r17,192(sp)
   43fa4:	d9402b15 	stw	r5,172(sp)
   43fa8:	b023883a 	mov	r17,r22
   43fac:	04c001c4 	movi	r19,7
   43fb0:	a82d883a 	mov	r22,r21
   43fb4:	902b883a 	mov	r21,r18
   43fb8:	8025883a 	mov	r18,r16
   43fbc:	dc002c17 	ldw	r16,176(sp)
   43fc0:	00000306 	br	43fd0 <___vfprintf_internal_r+0xf84>
   43fc4:	8c7ffc04 	addi	r17,r17,-16
   43fc8:	42000204 	addi	r8,r8,8
   43fcc:	e440110e 	bge	fp,r17,44014 <___vfprintf_internal_r+0xfc8>
   43fd0:	18c00404 	addi	r3,r3,16
   43fd4:	10800044 	addi	r2,r2,1
   43fd8:	45000015 	stw	r20,0(r8)
   43fdc:	47000115 	stw	fp,4(r8)
   43fe0:	d8c02015 	stw	r3,128(sp)
   43fe4:	d8801f15 	stw	r2,124(sp)
   43fe8:	98bff60e 	bge	r19,r2,43fc4 <__alt_data_end+0xfffc3fc4>
   43fec:	d9801e04 	addi	r6,sp,120
   43ff0:	b80b883a 	mov	r5,r23
   43ff4:	8009883a 	mov	r4,r16
   43ff8:	0049d740 	call	49d74 <__sprint_r>
   43ffc:	103d151e 	bne	r2,zero,43454 <__alt_data_end+0xfffc3454>
   44000:	8c7ffc04 	addi	r17,r17,-16
   44004:	d8c02017 	ldw	r3,128(sp)
   44008:	d8801f17 	ldw	r2,124(sp)
   4400c:	da000404 	addi	r8,sp,16
   44010:	e47fef16 	blt	fp,r17,43fd0 <__alt_data_end+0xfffc3fd0>
   44014:	9021883a 	mov	r16,r18
   44018:	a825883a 	mov	r18,r21
   4401c:	b02b883a 	mov	r21,r22
   44020:	882d883a 	mov	r22,r17
   44024:	dc403017 	ldw	r17,192(sp)
   44028:	d9002b17 	ldw	r4,172(sp)
   4402c:	1d87883a 	add	r3,r3,r22
   44030:	10800044 	addi	r2,r2,1
   44034:	41000015 	stw	r4,0(r8)
   44038:	45800115 	stw	r22,4(r8)
   4403c:	d8c02015 	stw	r3,128(sp)
   44040:	d8801f15 	stw	r2,124(sp)
   44044:	010001c4 	movi	r4,7
   44048:	20818e16 	blt	r4,r2,44684 <___vfprintf_internal_r+0x1638>
   4404c:	42000204 	addi	r8,r8,8
   44050:	003e3106 	br	43918 <__alt_data_end+0xfffc3918>
   44054:	d9403317 	ldw	r5,204(sp)
   44058:	00800044 	movi	r2,1
   4405c:	18c00044 	addi	r3,r3,1
   44060:	1141530e 	bge	r2,r5,445b0 <___vfprintf_internal_r+0x1564>
   44064:	dc401f17 	ldw	r17,124(sp)
   44068:	00800044 	movi	r2,1
   4406c:	40800115 	stw	r2,4(r8)
   44070:	8c400044 	addi	r17,r17,1
   44074:	44000015 	stw	r16,0(r8)
   44078:	d8c02015 	stw	r3,128(sp)
   4407c:	dc401f15 	stw	r17,124(sp)
   44080:	008001c4 	movi	r2,7
   44084:	14416b16 	blt	r2,r17,44634 <___vfprintf_internal_r+0x15e8>
   44088:	42000204 	addi	r8,r8,8
   4408c:	d8803717 	ldw	r2,220(sp)
   44090:	d9003417 	ldw	r4,208(sp)
   44094:	8c400044 	addi	r17,r17,1
   44098:	10c7883a 	add	r3,r2,r3
   4409c:	40800115 	stw	r2,4(r8)
   440a0:	41000015 	stw	r4,0(r8)
   440a4:	d8c02015 	stw	r3,128(sp)
   440a8:	dc401f15 	stw	r17,124(sp)
   440ac:	008001c4 	movi	r2,7
   440b0:	14416916 	blt	r2,r17,44658 <___vfprintf_internal_r+0x160c>
   440b4:	45800204 	addi	r22,r8,8
   440b8:	d9003617 	ldw	r4,216(sp)
   440bc:	d9403817 	ldw	r5,224(sp)
   440c0:	000d883a 	mov	r6,zero
   440c4:	000f883a 	mov	r7,zero
   440c8:	d8c03c15 	stw	r3,240(sp)
   440cc:	004e4800 	call	4e480 <__eqdf2>
   440d0:	d8c03c17 	ldw	r3,240(sp)
   440d4:	1000bc26 	beq	r2,zero,443c8 <___vfprintf_internal_r+0x137c>
   440d8:	d9403317 	ldw	r5,204(sp)
   440dc:	84000044 	addi	r16,r16,1
   440e0:	8c400044 	addi	r17,r17,1
   440e4:	28bfffc4 	addi	r2,r5,-1
   440e8:	1887883a 	add	r3,r3,r2
   440ec:	b0800115 	stw	r2,4(r22)
   440f0:	b4000015 	stw	r16,0(r22)
   440f4:	d8c02015 	stw	r3,128(sp)
   440f8:	dc401f15 	stw	r17,124(sp)
   440fc:	008001c4 	movi	r2,7
   44100:	14414316 	blt	r2,r17,44610 <___vfprintf_internal_r+0x15c4>
   44104:	b5800204 	addi	r22,r22,8
   44108:	d9003a17 	ldw	r4,232(sp)
   4410c:	df0022c4 	addi	fp,sp,139
   44110:	8c400044 	addi	r17,r17,1
   44114:	20c7883a 	add	r3,r4,r3
   44118:	b7000015 	stw	fp,0(r22)
   4411c:	b1000115 	stw	r4,4(r22)
   44120:	d8c02015 	stw	r3,128(sp)
   44124:	dc401f15 	stw	r17,124(sp)
   44128:	008001c4 	movi	r2,7
   4412c:	14400e16 	blt	r2,r17,44168 <___vfprintf_internal_r+0x111c>
   44130:	b2000204 	addi	r8,r22,8
   44134:	003e3a06 	br	43a20 <__alt_data_end+0xfffc3a20>
   44138:	01000174 	movhi	r4,5
   4413c:	2100d284 	addi	r4,r4,842
   44140:	d9002b15 	stw	r4,172(sp)
   44144:	d9002b17 	ldw	r4,172(sp)
   44148:	1c07883a 	add	r3,r3,r16
   4414c:	44000115 	stw	r16,4(r8)
   44150:	41000015 	stw	r4,0(r8)
   44154:	10800044 	addi	r2,r2,1
   44158:	d8c02015 	stw	r3,128(sp)
   4415c:	d8801f15 	stw	r2,124(sp)
   44160:	010001c4 	movi	r4,7
   44164:	20be2d0e 	bge	r4,r2,43a1c <__alt_data_end+0xfffc3a1c>
   44168:	d9002c17 	ldw	r4,176(sp)
   4416c:	d9801e04 	addi	r6,sp,120
   44170:	b80b883a 	mov	r5,r23
   44174:	0049d740 	call	49d74 <__sprint_r>
   44178:	103cb61e 	bne	r2,zero,43454 <__alt_data_end+0xfffc3454>
   4417c:	d8c02017 	ldw	r3,128(sp)
   44180:	da000404 	addi	r8,sp,16
   44184:	003e2606 	br	43a20 <__alt_data_end+0xfffc3a20>
   44188:	d9002c17 	ldw	r4,176(sp)
   4418c:	d9801e04 	addi	r6,sp,120
   44190:	b80b883a 	mov	r5,r23
   44194:	0049d740 	call	49d74 <__sprint_r>
   44198:	103e5d26 	beq	r2,zero,43b10 <__alt_data_end+0xfffc3b10>
   4419c:	003cad06 	br	43454 <__alt_data_end+0xfffc3454>
   441a0:	d9002c17 	ldw	r4,176(sp)
   441a4:	d9801e04 	addi	r6,sp,120
   441a8:	b80b883a 	mov	r5,r23
   441ac:	0049d740 	call	49d74 <__sprint_r>
   441b0:	103ca81e 	bne	r2,zero,43454 <__alt_data_end+0xfffc3454>
   441b4:	d8c02017 	ldw	r3,128(sp)
   441b8:	da000404 	addi	r8,sp,16
   441bc:	003e0b06 	br	439ec <__alt_data_end+0xfffc39ec>
   441c0:	d9002c17 	ldw	r4,176(sp)
   441c4:	d9801e04 	addi	r6,sp,120
   441c8:	b80b883a 	mov	r5,r23
   441cc:	0049d740 	call	49d74 <__sprint_r>
   441d0:	103ca01e 	bne	r2,zero,43454 <__alt_data_end+0xfffc3454>
   441d4:	d8c02017 	ldw	r3,128(sp)
   441d8:	da000404 	addi	r8,sp,16
   441dc:	003dbd06 	br	438d4 <__alt_data_end+0xfffc38d4>
   441e0:	d9002c17 	ldw	r4,176(sp)
   441e4:	d9801e04 	addi	r6,sp,120
   441e8:	b80b883a 	mov	r5,r23
   441ec:	0049d740 	call	49d74 <__sprint_r>
   441f0:	103c981e 	bne	r2,zero,43454 <__alt_data_end+0xfffc3454>
   441f4:	d8c02017 	ldw	r3,128(sp)
   441f8:	da000404 	addi	r8,sp,16
   441fc:	003dc306 	br	4390c <__alt_data_end+0xfffc390c>
   44200:	d8802917 	ldw	r2,164(sp)
   44204:	d8002785 	stb	zero,158(sp)
   44208:	103f0616 	blt	r2,zero,43e24 <__alt_data_end+0xfffc3e24>
   4420c:	00ffdfc4 	movi	r3,-129
   44210:	9d84b03a 	or	r2,r19,r22
   44214:	90e4703a 	and	r18,r18,r3
   44218:	103c6b26 	beq	r2,zero,433c8 <__alt_data_end+0xfffc33c8>
   4421c:	0039883a 	mov	fp,zero
   44220:	003e7406 	br	43bf4 <__alt_data_end+0xfffc3bf4>
   44224:	9080040c 	andi	r2,r18,16
   44228:	1001b326 	beq	r2,zero,448f8 <___vfprintf_internal_r+0x18ac>
   4422c:	d9002d17 	ldw	r4,180(sp)
   44230:	d9402917 	ldw	r5,164(sp)
   44234:	d8002785 	stb	zero,158(sp)
   44238:	20800104 	addi	r2,r4,4
   4423c:	24c00017 	ldw	r19,0(r4)
   44240:	002d883a 	mov	r22,zero
   44244:	2801b516 	blt	r5,zero,4491c <___vfprintf_internal_r+0x18d0>
   44248:	00ffdfc4 	movi	r3,-129
   4424c:	d8802d15 	stw	r2,180(sp)
   44250:	90e4703a 	and	r18,r18,r3
   44254:	983d2726 	beq	r19,zero,436f4 <__alt_data_end+0xfffc36f4>
   44258:	0039883a 	mov	fp,zero
   4425c:	003d2a06 	br	43708 <__alt_data_end+0xfffc3708>
   44260:	dc402617 	ldw	r17,152(sp)
   44264:	0441d30e 	bge	zero,r17,449b4 <___vfprintf_internal_r+0x1968>
   44268:	dc403217 	ldw	r17,200(sp)
   4426c:	d8803317 	ldw	r2,204(sp)
   44270:	1440010e 	bge	r2,r17,44278 <___vfprintf_internal_r+0x122c>
   44274:	1023883a 	mov	r17,r2
   44278:	04400a0e 	bge	zero,r17,442a4 <___vfprintf_internal_r+0x1258>
   4427c:	d8801f17 	ldw	r2,124(sp)
   44280:	1c47883a 	add	r3,r3,r17
   44284:	44000015 	stw	r16,0(r8)
   44288:	10800044 	addi	r2,r2,1
   4428c:	44400115 	stw	r17,4(r8)
   44290:	d8c02015 	stw	r3,128(sp)
   44294:	d8801f15 	stw	r2,124(sp)
   44298:	010001c4 	movi	r4,7
   4429c:	20826516 	blt	r4,r2,44c34 <___vfprintf_internal_r+0x1be8>
   442a0:	42000204 	addi	r8,r8,8
   442a4:	88026116 	blt	r17,zero,44c2c <___vfprintf_internal_r+0x1be0>
   442a8:	d9003217 	ldw	r4,200(sp)
   442ac:	2463c83a 	sub	r17,r4,r17
   442b0:	04407b0e 	bge	zero,r17,444a0 <___vfprintf_internal_r+0x1454>
   442b4:	05800404 	movi	r22,16
   442b8:	d8801f17 	ldw	r2,124(sp)
   442bc:	b4419d0e 	bge	r22,r17,44934 <___vfprintf_internal_r+0x18e8>
   442c0:	01000174 	movhi	r4,5
   442c4:	2100d284 	addi	r4,r4,842
   442c8:	d9002b15 	stw	r4,172(sp)
   442cc:	070001c4 	movi	fp,7
   442d0:	dcc02c17 	ldw	r19,176(sp)
   442d4:	00000306 	br	442e4 <___vfprintf_internal_r+0x1298>
   442d8:	42000204 	addi	r8,r8,8
   442dc:	8c7ffc04 	addi	r17,r17,-16
   442e0:	b441970e 	bge	r22,r17,44940 <___vfprintf_internal_r+0x18f4>
   442e4:	18c00404 	addi	r3,r3,16
   442e8:	10800044 	addi	r2,r2,1
   442ec:	45000015 	stw	r20,0(r8)
   442f0:	45800115 	stw	r22,4(r8)
   442f4:	d8c02015 	stw	r3,128(sp)
   442f8:	d8801f15 	stw	r2,124(sp)
   442fc:	e0bff60e 	bge	fp,r2,442d8 <__alt_data_end+0xfffc42d8>
   44300:	d9801e04 	addi	r6,sp,120
   44304:	b80b883a 	mov	r5,r23
   44308:	9809883a 	mov	r4,r19
   4430c:	0049d740 	call	49d74 <__sprint_r>
   44310:	103c501e 	bne	r2,zero,43454 <__alt_data_end+0xfffc3454>
   44314:	d8c02017 	ldw	r3,128(sp)
   44318:	d8801f17 	ldw	r2,124(sp)
   4431c:	da000404 	addi	r8,sp,16
   44320:	003fee06 	br	442dc <__alt_data_end+0xfffc42dc>
   44324:	d9002c17 	ldw	r4,176(sp)
   44328:	d9801e04 	addi	r6,sp,120
   4432c:	b80b883a 	mov	r5,r23
   44330:	0049d740 	call	49d74 <__sprint_r>
   44334:	103c471e 	bne	r2,zero,43454 <__alt_data_end+0xfffc3454>
   44338:	d8c02017 	ldw	r3,128(sp)
   4433c:	df002787 	ldb	fp,158(sp)
   44340:	da000404 	addi	r8,sp,16
   44344:	003d5606 	br	438a0 <__alt_data_end+0xfffc38a0>
   44348:	9080040c 	andi	r2,r18,16
   4434c:	10016126 	beq	r2,zero,448d4 <___vfprintf_internal_r+0x1888>
   44350:	d8802d17 	ldw	r2,180(sp)
   44354:	14c00017 	ldw	r19,0(r2)
   44358:	10800104 	addi	r2,r2,4
   4435c:	d8802d15 	stw	r2,180(sp)
   44360:	982dd7fa 	srai	r22,r19,31
   44364:	b005883a 	mov	r2,r22
   44368:	003c8206 	br	43574 <__alt_data_end+0xfffc3574>
   4436c:	9080040c 	andi	r2,r18,16
   44370:	10003526 	beq	r2,zero,44448 <___vfprintf_internal_r+0x13fc>
   44374:	d9402d17 	ldw	r5,180(sp)
   44378:	d8c02917 	ldw	r3,164(sp)
   4437c:	d8002785 	stb	zero,158(sp)
   44380:	28800104 	addi	r2,r5,4
   44384:	2cc00017 	ldw	r19,0(r5)
   44388:	002d883a 	mov	r22,zero
   4438c:	18003716 	blt	r3,zero,4446c <___vfprintf_internal_r+0x1420>
   44390:	00ffdfc4 	movi	r3,-129
   44394:	d8802d15 	stw	r2,180(sp)
   44398:	90e4703a 	and	r18,r18,r3
   4439c:	0039883a 	mov	fp,zero
   443a0:	983df326 	beq	r19,zero,43b70 <__alt_data_end+0xfffc3b70>
   443a4:	00800244 	movi	r2,9
   443a8:	14fc7b36 	bltu	r2,r19,43598 <__alt_data_end+0xfffc3598>
   443ac:	d8c02817 	ldw	r3,160(sp)
   443b0:	dc001dc4 	addi	r16,sp,119
   443b4:	9cc00c04 	addi	r19,r19,48
   443b8:	1c07c83a 	sub	r3,r3,r16
   443bc:	dcc01dc5 	stb	r19,119(sp)
   443c0:	d8c02e15 	stw	r3,184(sp)
   443c4:	003ce806 	br	43768 <__alt_data_end+0xfffc3768>
   443c8:	d8803317 	ldw	r2,204(sp)
   443cc:	143fffc4 	addi	r16,r2,-1
   443d0:	043f4d0e 	bge	zero,r16,44108 <__alt_data_end+0xfffc4108>
   443d4:	07000404 	movi	fp,16
   443d8:	e400810e 	bge	fp,r16,445e0 <___vfprintf_internal_r+0x1594>
   443dc:	01400174 	movhi	r5,5
   443e0:	2940d284 	addi	r5,r5,842
   443e4:	d9402b15 	stw	r5,172(sp)
   443e8:	01c001c4 	movi	r7,7
   443ec:	dcc02c17 	ldw	r19,176(sp)
   443f0:	00000306 	br	44400 <___vfprintf_internal_r+0x13b4>
   443f4:	b5800204 	addi	r22,r22,8
   443f8:	843ffc04 	addi	r16,r16,-16
   443fc:	e4007b0e 	bge	fp,r16,445ec <___vfprintf_internal_r+0x15a0>
   44400:	18c00404 	addi	r3,r3,16
   44404:	8c400044 	addi	r17,r17,1
   44408:	b5000015 	stw	r20,0(r22)
   4440c:	b7000115 	stw	fp,4(r22)
   44410:	d8c02015 	stw	r3,128(sp)
   44414:	dc401f15 	stw	r17,124(sp)
   44418:	3c7ff60e 	bge	r7,r17,443f4 <__alt_data_end+0xfffc43f4>
   4441c:	d9801e04 	addi	r6,sp,120
   44420:	b80b883a 	mov	r5,r23
   44424:	9809883a 	mov	r4,r19
   44428:	d9c03c15 	stw	r7,240(sp)
   4442c:	0049d740 	call	49d74 <__sprint_r>
   44430:	d9c03c17 	ldw	r7,240(sp)
   44434:	103c071e 	bne	r2,zero,43454 <__alt_data_end+0xfffc3454>
   44438:	d8c02017 	ldw	r3,128(sp)
   4443c:	dc401f17 	ldw	r17,124(sp)
   44440:	dd800404 	addi	r22,sp,16
   44444:	003fec06 	br	443f8 <__alt_data_end+0xfffc43f8>
   44448:	9080100c 	andi	r2,r18,64
   4444c:	d8002785 	stb	zero,158(sp)
   44450:	10010e26 	beq	r2,zero,4488c <___vfprintf_internal_r+0x1840>
   44454:	d9002d17 	ldw	r4,180(sp)
   44458:	d9402917 	ldw	r5,164(sp)
   4445c:	002d883a 	mov	r22,zero
   44460:	20800104 	addi	r2,r4,4
   44464:	24c0000b 	ldhu	r19,0(r4)
   44468:	283fc90e 	bge	r5,zero,44390 <__alt_data_end+0xfffc4390>
   4446c:	d8802d15 	stw	r2,180(sp)
   44470:	0039883a 	mov	fp,zero
   44474:	9d84b03a 	or	r2,r19,r22
   44478:	103c461e 	bne	r2,zero,43594 <__alt_data_end+0xfffc3594>
   4447c:	00800044 	movi	r2,1
   44480:	003e6c06 	br	43e34 <__alt_data_end+0xfffc3e34>
   44484:	d9002c17 	ldw	r4,176(sp)
   44488:	d9801e04 	addi	r6,sp,120
   4448c:	b80b883a 	mov	r5,r23
   44490:	0049d740 	call	49d74 <__sprint_r>
   44494:	103bef1e 	bne	r2,zero,43454 <__alt_data_end+0xfffc3454>
   44498:	d8c02017 	ldw	r3,128(sp)
   4449c:	da000404 	addi	r8,sp,16
   444a0:	d9003217 	ldw	r4,200(sp)
   444a4:	d8802617 	ldw	r2,152(sp)
   444a8:	d9403317 	ldw	r5,204(sp)
   444ac:	8123883a 	add	r17,r16,r4
   444b0:	11400216 	blt	r2,r5,444bc <___vfprintf_internal_r+0x1470>
   444b4:	9100004c 	andi	r4,r18,1
   444b8:	20000d26 	beq	r4,zero,444f0 <___vfprintf_internal_r+0x14a4>
   444bc:	d9003717 	ldw	r4,220(sp)
   444c0:	d9403417 	ldw	r5,208(sp)
   444c4:	1907883a 	add	r3,r3,r4
   444c8:	d9001f17 	ldw	r4,124(sp)
   444cc:	41400015 	stw	r5,0(r8)
   444d0:	d9403717 	ldw	r5,220(sp)
   444d4:	21000044 	addi	r4,r4,1
   444d8:	d8c02015 	stw	r3,128(sp)
   444dc:	41400115 	stw	r5,4(r8)
   444e0:	d9001f15 	stw	r4,124(sp)
   444e4:	014001c4 	movi	r5,7
   444e8:	2901e816 	blt	r5,r4,44c8c <___vfprintf_internal_r+0x1c40>
   444ec:	42000204 	addi	r8,r8,8
   444f0:	d9003317 	ldw	r4,204(sp)
   444f4:	8121883a 	add	r16,r16,r4
   444f8:	2085c83a 	sub	r2,r4,r2
   444fc:	8461c83a 	sub	r16,r16,r17
   44500:	1400010e 	bge	r2,r16,44508 <___vfprintf_internal_r+0x14bc>
   44504:	1021883a 	mov	r16,r2
   44508:	04000a0e 	bge	zero,r16,44534 <___vfprintf_internal_r+0x14e8>
   4450c:	d9001f17 	ldw	r4,124(sp)
   44510:	1c07883a 	add	r3,r3,r16
   44514:	44400015 	stw	r17,0(r8)
   44518:	21000044 	addi	r4,r4,1
   4451c:	44000115 	stw	r16,4(r8)
   44520:	d8c02015 	stw	r3,128(sp)
   44524:	d9001f15 	stw	r4,124(sp)
   44528:	014001c4 	movi	r5,7
   4452c:	2901fb16 	blt	r5,r4,44d1c <___vfprintf_internal_r+0x1cd0>
   44530:	42000204 	addi	r8,r8,8
   44534:	8001f716 	blt	r16,zero,44d14 <___vfprintf_internal_r+0x1cc8>
   44538:	1421c83a 	sub	r16,r2,r16
   4453c:	043d380e 	bge	zero,r16,43a20 <__alt_data_end+0xfffc3a20>
   44540:	04400404 	movi	r17,16
   44544:	d8801f17 	ldw	r2,124(sp)
   44548:	8c3efb0e 	bge	r17,r16,44138 <__alt_data_end+0xfffc4138>
   4454c:	01400174 	movhi	r5,5
   44550:	2940d284 	addi	r5,r5,842
   44554:	d9402b15 	stw	r5,172(sp)
   44558:	058001c4 	movi	r22,7
   4455c:	dcc02c17 	ldw	r19,176(sp)
   44560:	00000306 	br	44570 <___vfprintf_internal_r+0x1524>
   44564:	42000204 	addi	r8,r8,8
   44568:	843ffc04 	addi	r16,r16,-16
   4456c:	8c3ef50e 	bge	r17,r16,44144 <__alt_data_end+0xfffc4144>
   44570:	18c00404 	addi	r3,r3,16
   44574:	10800044 	addi	r2,r2,1
   44578:	45000015 	stw	r20,0(r8)
   4457c:	44400115 	stw	r17,4(r8)
   44580:	d8c02015 	stw	r3,128(sp)
   44584:	d8801f15 	stw	r2,124(sp)
   44588:	b0bff60e 	bge	r22,r2,44564 <__alt_data_end+0xfffc4564>
   4458c:	d9801e04 	addi	r6,sp,120
   44590:	b80b883a 	mov	r5,r23
   44594:	9809883a 	mov	r4,r19
   44598:	0049d740 	call	49d74 <__sprint_r>
   4459c:	103bad1e 	bne	r2,zero,43454 <__alt_data_end+0xfffc3454>
   445a0:	d8c02017 	ldw	r3,128(sp)
   445a4:	d8801f17 	ldw	r2,124(sp)
   445a8:	da000404 	addi	r8,sp,16
   445ac:	003fee06 	br	44568 <__alt_data_end+0xfffc4568>
   445b0:	9088703a 	and	r4,r18,r2
   445b4:	203eab1e 	bne	r4,zero,44064 <__alt_data_end+0xfffc4064>
   445b8:	dc401f17 	ldw	r17,124(sp)
   445bc:	40800115 	stw	r2,4(r8)
   445c0:	44000015 	stw	r16,0(r8)
   445c4:	8c400044 	addi	r17,r17,1
   445c8:	d8c02015 	stw	r3,128(sp)
   445cc:	dc401f15 	stw	r17,124(sp)
   445d0:	008001c4 	movi	r2,7
   445d4:	14400e16 	blt	r2,r17,44610 <___vfprintf_internal_r+0x15c4>
   445d8:	45800204 	addi	r22,r8,8
   445dc:	003eca06 	br	44108 <__alt_data_end+0xfffc4108>
   445e0:	01000174 	movhi	r4,5
   445e4:	2100d284 	addi	r4,r4,842
   445e8:	d9002b15 	stw	r4,172(sp)
   445ec:	d8802b17 	ldw	r2,172(sp)
   445f0:	1c07883a 	add	r3,r3,r16
   445f4:	8c400044 	addi	r17,r17,1
   445f8:	b0800015 	stw	r2,0(r22)
   445fc:	b4000115 	stw	r16,4(r22)
   44600:	d8c02015 	stw	r3,128(sp)
   44604:	dc401f15 	stw	r17,124(sp)
   44608:	008001c4 	movi	r2,7
   4460c:	147ebd0e 	bge	r2,r17,44104 <__alt_data_end+0xfffc4104>
   44610:	d9002c17 	ldw	r4,176(sp)
   44614:	d9801e04 	addi	r6,sp,120
   44618:	b80b883a 	mov	r5,r23
   4461c:	0049d740 	call	49d74 <__sprint_r>
   44620:	103b8c1e 	bne	r2,zero,43454 <__alt_data_end+0xfffc3454>
   44624:	d8c02017 	ldw	r3,128(sp)
   44628:	dc401f17 	ldw	r17,124(sp)
   4462c:	dd800404 	addi	r22,sp,16
   44630:	003eb506 	br	44108 <__alt_data_end+0xfffc4108>
   44634:	d9002c17 	ldw	r4,176(sp)
   44638:	d9801e04 	addi	r6,sp,120
   4463c:	b80b883a 	mov	r5,r23
   44640:	0049d740 	call	49d74 <__sprint_r>
   44644:	103b831e 	bne	r2,zero,43454 <__alt_data_end+0xfffc3454>
   44648:	d8c02017 	ldw	r3,128(sp)
   4464c:	dc401f17 	ldw	r17,124(sp)
   44650:	da000404 	addi	r8,sp,16
   44654:	003e8d06 	br	4408c <__alt_data_end+0xfffc408c>
   44658:	d9002c17 	ldw	r4,176(sp)
   4465c:	d9801e04 	addi	r6,sp,120
   44660:	b80b883a 	mov	r5,r23
   44664:	0049d740 	call	49d74 <__sprint_r>
   44668:	103b7a1e 	bne	r2,zero,43454 <__alt_data_end+0xfffc3454>
   4466c:	d8c02017 	ldw	r3,128(sp)
   44670:	dc401f17 	ldw	r17,124(sp)
   44674:	dd800404 	addi	r22,sp,16
   44678:	003e8f06 	br	440b8 <__alt_data_end+0xfffc40b8>
   4467c:	0027883a 	mov	r19,zero
   44680:	003f4a06 	br	443ac <__alt_data_end+0xfffc43ac>
   44684:	d9002c17 	ldw	r4,176(sp)
   44688:	d9801e04 	addi	r6,sp,120
   4468c:	b80b883a 	mov	r5,r23
   44690:	0049d740 	call	49d74 <__sprint_r>
   44694:	103b6f1e 	bne	r2,zero,43454 <__alt_data_end+0xfffc3454>
   44698:	d8c02017 	ldw	r3,128(sp)
   4469c:	da000404 	addi	r8,sp,16
   446a0:	003c9d06 	br	43918 <__alt_data_end+0xfffc3918>
   446a4:	04e7c83a 	sub	r19,zero,r19
   446a8:	9804c03a 	cmpne	r2,r19,zero
   446ac:	05adc83a 	sub	r22,zero,r22
   446b0:	b0adc83a 	sub	r22,r22,r2
   446b4:	d8802917 	ldw	r2,164(sp)
   446b8:	07000b44 	movi	fp,45
   446bc:	df002785 	stb	fp,158(sp)
   446c0:	10017b16 	blt	r2,zero,44cb0 <___vfprintf_internal_r+0x1c64>
   446c4:	00bfdfc4 	movi	r2,-129
   446c8:	90a4703a 	and	r18,r18,r2
   446cc:	003bb106 	br	43594 <__alt_data_end+0xfffc3594>
   446d0:	d9003617 	ldw	r4,216(sp)
   446d4:	d9403817 	ldw	r5,224(sp)
   446d8:	da003d15 	stw	r8,244(sp)
   446dc:	00499980 	call	49998 <__fpclassifyd>
   446e0:	da003d17 	ldw	r8,244(sp)
   446e4:	1000f026 	beq	r2,zero,44aa8 <___vfprintf_internal_r+0x1a5c>
   446e8:	d9002917 	ldw	r4,164(sp)
   446ec:	05bff7c4 	movi	r22,-33
   446f0:	00bfffc4 	movi	r2,-1
   446f4:	8dac703a 	and	r22,r17,r22
   446f8:	20820026 	beq	r4,r2,44efc <___vfprintf_internal_r+0x1eb0>
   446fc:	008011c4 	movi	r2,71
   44700:	b081f726 	beq	r22,r2,44ee0 <___vfprintf_internal_r+0x1e94>
   44704:	d9003817 	ldw	r4,224(sp)
   44708:	90c04014 	ori	r3,r18,256
   4470c:	d8c02b15 	stw	r3,172(sp)
   44710:	20021516 	blt	r4,zero,44f68 <___vfprintf_internal_r+0x1f1c>
   44714:	dcc03817 	ldw	r19,224(sp)
   44718:	d8002a05 	stb	zero,168(sp)
   4471c:	00801984 	movi	r2,102
   44720:	8881f926 	beq	r17,r2,44f08 <___vfprintf_internal_r+0x1ebc>
   44724:	00801184 	movi	r2,70
   44728:	88821c26 	beq	r17,r2,44f9c <___vfprintf_internal_r+0x1f50>
   4472c:	00801144 	movi	r2,69
   44730:	b081ef26 	beq	r22,r2,44ef0 <___vfprintf_internal_r+0x1ea4>
   44734:	d8c02917 	ldw	r3,164(sp)
   44738:	d8802104 	addi	r2,sp,132
   4473c:	d8800315 	stw	r2,12(sp)
   44740:	d9403617 	ldw	r5,216(sp)
   44744:	d8802504 	addi	r2,sp,148
   44748:	d9002c17 	ldw	r4,176(sp)
   4474c:	d8800215 	stw	r2,8(sp)
   44750:	d8802604 	addi	r2,sp,152
   44754:	d8c00015 	stw	r3,0(sp)
   44758:	d8800115 	stw	r2,4(sp)
   4475c:	01c00084 	movi	r7,2
   44760:	980d883a 	mov	r6,r19
   44764:	d8c03c15 	stw	r3,240(sp)
   44768:	da003d15 	stw	r8,244(sp)
   4476c:	0045a600 	call	45a60 <_dtoa_r>
   44770:	1021883a 	mov	r16,r2
   44774:	008019c4 	movi	r2,103
   44778:	d8c03c17 	ldw	r3,240(sp)
   4477c:	da003d17 	ldw	r8,244(sp)
   44780:	88817126 	beq	r17,r2,44d48 <___vfprintf_internal_r+0x1cfc>
   44784:	008011c4 	movi	r2,71
   44788:	88829226 	beq	r17,r2,451d4 <___vfprintf_internal_r+0x2188>
   4478c:	80f9883a 	add	fp,r16,r3
   44790:	d9003617 	ldw	r4,216(sp)
   44794:	000d883a 	mov	r6,zero
   44798:	000f883a 	mov	r7,zero
   4479c:	980b883a 	mov	r5,r19
   447a0:	da003d15 	stw	r8,244(sp)
   447a4:	004e4800 	call	4e480 <__eqdf2>
   447a8:	da003d17 	ldw	r8,244(sp)
   447ac:	10018d26 	beq	r2,zero,44de4 <___vfprintf_internal_r+0x1d98>
   447b0:	d8802117 	ldw	r2,132(sp)
   447b4:	1700062e 	bgeu	r2,fp,447d0 <___vfprintf_internal_r+0x1784>
   447b8:	01000c04 	movi	r4,48
   447bc:	10c00044 	addi	r3,r2,1
   447c0:	d8c02115 	stw	r3,132(sp)
   447c4:	11000005 	stb	r4,0(r2)
   447c8:	d8802117 	ldw	r2,132(sp)
   447cc:	173ffb36 	bltu	r2,fp,447bc <__alt_data_end+0xfffc47bc>
   447d0:	1405c83a 	sub	r2,r2,r16
   447d4:	d8803315 	stw	r2,204(sp)
   447d8:	008011c4 	movi	r2,71
   447dc:	b0817626 	beq	r22,r2,44db8 <___vfprintf_internal_r+0x1d6c>
   447e0:	00801944 	movi	r2,101
   447e4:	1442810e 	bge	r2,r17,451ec <___vfprintf_internal_r+0x21a0>
   447e8:	d8c02617 	ldw	r3,152(sp)
   447ec:	00801984 	movi	r2,102
   447f0:	d8c03215 	stw	r3,200(sp)
   447f4:	8881fe26 	beq	r17,r2,44ff0 <___vfprintf_internal_r+0x1fa4>
   447f8:	d8c03217 	ldw	r3,200(sp)
   447fc:	d9003317 	ldw	r4,204(sp)
   44800:	1901dd16 	blt	r3,r4,44f78 <___vfprintf_internal_r+0x1f2c>
   44804:	9480004c 	andi	r18,r18,1
   44808:	90022b1e 	bne	r18,zero,450b8 <___vfprintf_internal_r+0x206c>
   4480c:	1805883a 	mov	r2,r3
   44810:	18028016 	blt	r3,zero,45214 <___vfprintf_internal_r+0x21c8>
   44814:	d8c03217 	ldw	r3,200(sp)
   44818:	044019c4 	movi	r17,103
   4481c:	d8c02e15 	stw	r3,184(sp)
   44820:	df002a07 	ldb	fp,168(sp)
   44824:	e001531e 	bne	fp,zero,44d74 <___vfprintf_internal_r+0x1d28>
   44828:	df002783 	ldbu	fp,158(sp)
   4482c:	d8802a15 	stw	r2,168(sp)
   44830:	dc802b17 	ldw	r18,172(sp)
   44834:	d8002915 	stw	zero,164(sp)
   44838:	003bd106 	br	43780 <__alt_data_end+0xfffc3780>
   4483c:	d8802d17 	ldw	r2,180(sp)
   44840:	d8c02d17 	ldw	r3,180(sp)
   44844:	d9002d17 	ldw	r4,180(sp)
   44848:	10800017 	ldw	r2,0(r2)
   4484c:	18c00117 	ldw	r3,4(r3)
   44850:	21000204 	addi	r4,r4,8
   44854:	d8803615 	stw	r2,216(sp)
   44858:	d8c03815 	stw	r3,224(sp)
   4485c:	d9002d15 	stw	r4,180(sp)
   44860:	003b7506 	br	43638 <__alt_data_end+0xfffc3638>
   44864:	ac400007 	ldb	r17,0(r21)
   44868:	003a5906 	br	431d0 <__alt_data_end+0xfffc31d0>
   4486c:	9080100c 	andi	r2,r18,64
   44870:	1000a826 	beq	r2,zero,44b14 <___vfprintf_internal_r+0x1ac8>
   44874:	d9002d17 	ldw	r4,180(sp)
   44878:	002d883a 	mov	r22,zero
   4487c:	24c0000b 	ldhu	r19,0(r4)
   44880:	21000104 	addi	r4,r4,4
   44884:	d9002d15 	stw	r4,180(sp)
   44888:	003ccb06 	br	43bb8 <__alt_data_end+0xfffc3bb8>
   4488c:	d8c02d17 	ldw	r3,180(sp)
   44890:	d9002917 	ldw	r4,164(sp)
   44894:	002d883a 	mov	r22,zero
   44898:	18800104 	addi	r2,r3,4
   4489c:	1cc00017 	ldw	r19,0(r3)
   448a0:	203ebb0e 	bge	r4,zero,44390 <__alt_data_end+0xfffc4390>
   448a4:	003ef106 	br	4446c <__alt_data_end+0xfffc446c>
   448a8:	9080040c 	andi	r2,r18,16
   448ac:	1000921e 	bne	r2,zero,44af8 <___vfprintf_internal_r+0x1aac>
   448b0:	9480100c 	andi	r18,r18,64
   448b4:	90013926 	beq	r18,zero,44d9c <___vfprintf_internal_r+0x1d50>
   448b8:	d9002d17 	ldw	r4,180(sp)
   448bc:	d9402f17 	ldw	r5,188(sp)
   448c0:	20800017 	ldw	r2,0(r4)
   448c4:	21000104 	addi	r4,r4,4
   448c8:	d9002d15 	stw	r4,180(sp)
   448cc:	1140000d 	sth	r5,0(r2)
   448d0:	003a1606 	br	4312c <__alt_data_end+0xfffc312c>
   448d4:	9080100c 	andi	r2,r18,64
   448d8:	10008026 	beq	r2,zero,44adc <___vfprintf_internal_r+0x1a90>
   448dc:	d8c02d17 	ldw	r3,180(sp)
   448e0:	1cc0000f 	ldh	r19,0(r3)
   448e4:	18c00104 	addi	r3,r3,4
   448e8:	d8c02d15 	stw	r3,180(sp)
   448ec:	982dd7fa 	srai	r22,r19,31
   448f0:	b005883a 	mov	r2,r22
   448f4:	003b1f06 	br	43574 <__alt_data_end+0xfffc3574>
   448f8:	9080100c 	andi	r2,r18,64
   448fc:	d8002785 	stb	zero,158(sp)
   44900:	10008a1e 	bne	r2,zero,44b2c <___vfprintf_internal_r+0x1ae0>
   44904:	d9402d17 	ldw	r5,180(sp)
   44908:	d8c02917 	ldw	r3,164(sp)
   4490c:	002d883a 	mov	r22,zero
   44910:	28800104 	addi	r2,r5,4
   44914:	2cc00017 	ldw	r19,0(r5)
   44918:	183e4b0e 	bge	r3,zero,44248 <__alt_data_end+0xfffc4248>
   4491c:	9d86b03a 	or	r3,r19,r22
   44920:	d8802d15 	stw	r2,180(sp)
   44924:	183e4c1e 	bne	r3,zero,44258 <__alt_data_end+0xfffc4258>
   44928:	0039883a 	mov	fp,zero
   4492c:	0005883a 	mov	r2,zero
   44930:	003d4006 	br	43e34 <__alt_data_end+0xfffc3e34>
   44934:	01400174 	movhi	r5,5
   44938:	2940d284 	addi	r5,r5,842
   4493c:	d9402b15 	stw	r5,172(sp)
   44940:	d9402b17 	ldw	r5,172(sp)
   44944:	1c47883a 	add	r3,r3,r17
   44948:	10800044 	addi	r2,r2,1
   4494c:	41400015 	stw	r5,0(r8)
   44950:	44400115 	stw	r17,4(r8)
   44954:	d8c02015 	stw	r3,128(sp)
   44958:	d8801f15 	stw	r2,124(sp)
   4495c:	010001c4 	movi	r4,7
   44960:	20bec816 	blt	r4,r2,44484 <__alt_data_end+0xfffc4484>
   44964:	42000204 	addi	r8,r8,8
   44968:	003ecd06 	br	444a0 <__alt_data_end+0xfffc44a0>
   4496c:	d9002917 	ldw	r4,164(sp)
   44970:	d8002785 	stb	zero,158(sp)
   44974:	203d2d16 	blt	r4,zero,43e2c <__alt_data_end+0xfffc3e2c>
   44978:	00bfdfc4 	movi	r2,-129
   4497c:	90a4703a 	and	r18,r18,r2
   44980:	003a9106 	br	433c8 <__alt_data_end+0xfffc33c8>
   44984:	01000174 	movhi	r4,5
   44988:	2100d284 	addi	r4,r4,842
   4498c:	d9002b15 	stw	r4,172(sp)
   44990:	003c0c06 	br	439c4 <__alt_data_end+0xfffc39c4>
   44994:	d9002c17 	ldw	r4,176(sp)
   44998:	d9801e04 	addi	r6,sp,120
   4499c:	b80b883a 	mov	r5,r23
   449a0:	0049d740 	call	49d74 <__sprint_r>
   449a4:	103aab1e 	bne	r2,zero,43454 <__alt_data_end+0xfffc3454>
   449a8:	d8c02017 	ldw	r3,128(sp)
   449ac:	da000404 	addi	r8,sp,16
   449b0:	003d4106 	br	43eb8 <__alt_data_end+0xfffc3eb8>
   449b4:	d8801f17 	ldw	r2,124(sp)
   449b8:	01400174 	movhi	r5,5
   449bc:	01000044 	movi	r4,1
   449c0:	18c00044 	addi	r3,r3,1
   449c4:	10800044 	addi	r2,r2,1
   449c8:	2940d204 	addi	r5,r5,840
   449cc:	41000115 	stw	r4,4(r8)
   449d0:	41400015 	stw	r5,0(r8)
   449d4:	d8c02015 	stw	r3,128(sp)
   449d8:	d8801f15 	stw	r2,124(sp)
   449dc:	010001c4 	movi	r4,7
   449e0:	20805c16 	blt	r4,r2,44b54 <___vfprintf_internal_r+0x1b08>
   449e4:	42000204 	addi	r8,r8,8
   449e8:	8800041e 	bne	r17,zero,449fc <___vfprintf_internal_r+0x19b0>
   449ec:	d8803317 	ldw	r2,204(sp)
   449f0:	1000021e 	bne	r2,zero,449fc <___vfprintf_internal_r+0x19b0>
   449f4:	9080004c 	andi	r2,r18,1
   449f8:	103c0926 	beq	r2,zero,43a20 <__alt_data_end+0xfffc3a20>
   449fc:	d9003717 	ldw	r4,220(sp)
   44a00:	d8801f17 	ldw	r2,124(sp)
   44a04:	d9403417 	ldw	r5,208(sp)
   44a08:	20c7883a 	add	r3,r4,r3
   44a0c:	10800044 	addi	r2,r2,1
   44a10:	41000115 	stw	r4,4(r8)
   44a14:	41400015 	stw	r5,0(r8)
   44a18:	d8c02015 	stw	r3,128(sp)
   44a1c:	d8801f15 	stw	r2,124(sp)
   44a20:	010001c4 	movi	r4,7
   44a24:	20812116 	blt	r4,r2,44eac <___vfprintf_internal_r+0x1e60>
   44a28:	42000204 	addi	r8,r8,8
   44a2c:	0463c83a 	sub	r17,zero,r17
   44a30:	0440730e 	bge	zero,r17,44c00 <___vfprintf_internal_r+0x1bb4>
   44a34:	05800404 	movi	r22,16
   44a38:	b440860e 	bge	r22,r17,44c54 <___vfprintf_internal_r+0x1c08>
   44a3c:	01400174 	movhi	r5,5
   44a40:	2940d284 	addi	r5,r5,842
   44a44:	d9402b15 	stw	r5,172(sp)
   44a48:	070001c4 	movi	fp,7
   44a4c:	dcc02c17 	ldw	r19,176(sp)
   44a50:	00000306 	br	44a60 <___vfprintf_internal_r+0x1a14>
   44a54:	42000204 	addi	r8,r8,8
   44a58:	8c7ffc04 	addi	r17,r17,-16
   44a5c:	b440800e 	bge	r22,r17,44c60 <___vfprintf_internal_r+0x1c14>
   44a60:	18c00404 	addi	r3,r3,16
   44a64:	10800044 	addi	r2,r2,1
   44a68:	45000015 	stw	r20,0(r8)
   44a6c:	45800115 	stw	r22,4(r8)
   44a70:	d8c02015 	stw	r3,128(sp)
   44a74:	d8801f15 	stw	r2,124(sp)
   44a78:	e0bff60e 	bge	fp,r2,44a54 <__alt_data_end+0xfffc4a54>
   44a7c:	d9801e04 	addi	r6,sp,120
   44a80:	b80b883a 	mov	r5,r23
   44a84:	9809883a 	mov	r4,r19
   44a88:	0049d740 	call	49d74 <__sprint_r>
   44a8c:	103a711e 	bne	r2,zero,43454 <__alt_data_end+0xfffc3454>
   44a90:	d8c02017 	ldw	r3,128(sp)
   44a94:	d8801f17 	ldw	r2,124(sp)
   44a98:	da000404 	addi	r8,sp,16
   44a9c:	003fee06 	br	44a58 <__alt_data_end+0xfffc4a58>
   44aa0:	00bfffc4 	movi	r2,-1
   44aa4:	003a6f06 	br	43464 <__alt_data_end+0xfffc3464>
   44aa8:	008011c4 	movi	r2,71
   44aac:	1440b816 	blt	r2,r17,44d90 <___vfprintf_internal_r+0x1d44>
   44ab0:	04000174 	movhi	r16,5
   44ab4:	8400c404 	addi	r16,r16,784
   44ab8:	00c000c4 	movi	r3,3
   44abc:	00bfdfc4 	movi	r2,-129
   44ac0:	d8c02a15 	stw	r3,168(sp)
   44ac4:	90a4703a 	and	r18,r18,r2
   44ac8:	df002783 	ldbu	fp,158(sp)
   44acc:	d8c02e15 	stw	r3,184(sp)
   44ad0:	d8002915 	stw	zero,164(sp)
   44ad4:	d8003215 	stw	zero,200(sp)
   44ad8:	003b2906 	br	43780 <__alt_data_end+0xfffc3780>
   44adc:	d9002d17 	ldw	r4,180(sp)
   44ae0:	24c00017 	ldw	r19,0(r4)
   44ae4:	21000104 	addi	r4,r4,4
   44ae8:	d9002d15 	stw	r4,180(sp)
   44aec:	982dd7fa 	srai	r22,r19,31
   44af0:	b005883a 	mov	r2,r22
   44af4:	003a9f06 	br	43574 <__alt_data_end+0xfffc3574>
   44af8:	d9402d17 	ldw	r5,180(sp)
   44afc:	d8c02f17 	ldw	r3,188(sp)
   44b00:	28800017 	ldw	r2,0(r5)
   44b04:	29400104 	addi	r5,r5,4
   44b08:	d9402d15 	stw	r5,180(sp)
   44b0c:	10c00015 	stw	r3,0(r2)
   44b10:	00398606 	br	4312c <__alt_data_end+0xfffc312c>
   44b14:	d9402d17 	ldw	r5,180(sp)
   44b18:	002d883a 	mov	r22,zero
   44b1c:	2cc00017 	ldw	r19,0(r5)
   44b20:	29400104 	addi	r5,r5,4
   44b24:	d9402d15 	stw	r5,180(sp)
   44b28:	003c2306 	br	43bb8 <__alt_data_end+0xfffc3bb8>
   44b2c:	d8c02d17 	ldw	r3,180(sp)
   44b30:	d9002917 	ldw	r4,164(sp)
   44b34:	002d883a 	mov	r22,zero
   44b38:	18800104 	addi	r2,r3,4
   44b3c:	1cc0000b 	ldhu	r19,0(r3)
   44b40:	203dc10e 	bge	r4,zero,44248 <__alt_data_end+0xfffc4248>
   44b44:	003f7506 	br	4491c <__alt_data_end+0xfffc491c>
   44b48:	04000174 	movhi	r16,5
   44b4c:	8400c204 	addi	r16,r16,776
   44b50:	003acc06 	br	43684 <__alt_data_end+0xfffc3684>
   44b54:	d9002c17 	ldw	r4,176(sp)
   44b58:	d9801e04 	addi	r6,sp,120
   44b5c:	b80b883a 	mov	r5,r23
   44b60:	0049d740 	call	49d74 <__sprint_r>
   44b64:	103a3b1e 	bne	r2,zero,43454 <__alt_data_end+0xfffc3454>
   44b68:	dc402617 	ldw	r17,152(sp)
   44b6c:	d8c02017 	ldw	r3,128(sp)
   44b70:	da000404 	addi	r8,sp,16
   44b74:	003f9c06 	br	449e8 <__alt_data_end+0xfffc49e8>
   44b78:	ac400043 	ldbu	r17,1(r21)
   44b7c:	94800814 	ori	r18,r18,32
   44b80:	ad400044 	addi	r21,r21,1
   44b84:	8c403fcc 	andi	r17,r17,255
   44b88:	8c40201c 	xori	r17,r17,128
   44b8c:	8c7fe004 	addi	r17,r17,-128
   44b90:	00398f06 	br	431d0 <__alt_data_end+0xfffc31d0>
   44b94:	d8c02d15 	stw	r3,180(sp)
   44b98:	0039883a 	mov	fp,zero
   44b9c:	003e3506 	br	44474 <__alt_data_end+0xfffc4474>
   44ba0:	d9002c17 	ldw	r4,176(sp)
   44ba4:	d9801e04 	addi	r6,sp,120
   44ba8:	b80b883a 	mov	r5,r23
   44bac:	0049d740 	call	49d74 <__sprint_r>
   44bb0:	103a281e 	bne	r2,zero,43454 <__alt_data_end+0xfffc3454>
   44bb4:	d8c02017 	ldw	r3,128(sp)
   44bb8:	da000404 	addi	r8,sp,16
   44bbc:	003cd006 	br	43f00 <__alt_data_end+0xfffc3f00>
   44bc0:	8009883a 	mov	r4,r16
   44bc4:	da003d15 	stw	r8,244(sp)
   44bc8:	0042fb40 	call	42fb4 <strlen>
   44bcc:	d8802e15 	stw	r2,184(sp)
   44bd0:	da003d17 	ldw	r8,244(sp)
   44bd4:	103c340e 	bge	r2,zero,43ca8 <__alt_data_end+0xfffc3ca8>
   44bd8:	0005883a 	mov	r2,zero
   44bdc:	003c3206 	br	43ca8 <__alt_data_end+0xfffc3ca8>
   44be0:	d9002c17 	ldw	r4,176(sp)
   44be4:	d9801e04 	addi	r6,sp,120
   44be8:	b80b883a 	mov	r5,r23
   44bec:	0049d740 	call	49d74 <__sprint_r>
   44bf0:	103a181e 	bne	r2,zero,43454 <__alt_data_end+0xfffc3454>
   44bf4:	d8c02017 	ldw	r3,128(sp)
   44bf8:	d8801f17 	ldw	r2,124(sp)
   44bfc:	da000404 	addi	r8,sp,16
   44c00:	d9403317 	ldw	r5,204(sp)
   44c04:	10800044 	addi	r2,r2,1
   44c08:	44000015 	stw	r16,0(r8)
   44c0c:	28c7883a 	add	r3,r5,r3
   44c10:	003b7d06 	br	43a08 <__alt_data_end+0xfffc3a08>
   44c14:	01000174 	movhi	r4,5
   44c18:	2100d684 	addi	r4,r4,858
   44c1c:	d9003515 	stw	r4,212(sp)
   44c20:	003b1406 	br	43874 <__alt_data_end+0xfffc3874>
   44c24:	013fffc4 	movi	r4,-1
   44c28:	003a3506 	br	43500 <__alt_data_end+0xfffc3500>
   44c2c:	0023883a 	mov	r17,zero
   44c30:	003d9d06 	br	442a8 <__alt_data_end+0xfffc42a8>
   44c34:	d9002c17 	ldw	r4,176(sp)
   44c38:	d9801e04 	addi	r6,sp,120
   44c3c:	b80b883a 	mov	r5,r23
   44c40:	0049d740 	call	49d74 <__sprint_r>
   44c44:	103a031e 	bne	r2,zero,43454 <__alt_data_end+0xfffc3454>
   44c48:	d8c02017 	ldw	r3,128(sp)
   44c4c:	da000404 	addi	r8,sp,16
   44c50:	003d9406 	br	442a4 <__alt_data_end+0xfffc42a4>
   44c54:	01000174 	movhi	r4,5
   44c58:	2100d284 	addi	r4,r4,842
   44c5c:	d9002b15 	stw	r4,172(sp)
   44c60:	d9002b17 	ldw	r4,172(sp)
   44c64:	1c47883a 	add	r3,r3,r17
   44c68:	10800044 	addi	r2,r2,1
   44c6c:	41000015 	stw	r4,0(r8)
   44c70:	44400115 	stw	r17,4(r8)
   44c74:	d8c02015 	stw	r3,128(sp)
   44c78:	d8801f15 	stw	r2,124(sp)
   44c7c:	010001c4 	movi	r4,7
   44c80:	20bfd716 	blt	r4,r2,44be0 <__alt_data_end+0xfffc4be0>
   44c84:	42000204 	addi	r8,r8,8
   44c88:	003fdd06 	br	44c00 <__alt_data_end+0xfffc4c00>
   44c8c:	d9002c17 	ldw	r4,176(sp)
   44c90:	d9801e04 	addi	r6,sp,120
   44c94:	b80b883a 	mov	r5,r23
   44c98:	0049d740 	call	49d74 <__sprint_r>
   44c9c:	1039ed1e 	bne	r2,zero,43454 <__alt_data_end+0xfffc3454>
   44ca0:	d8802617 	ldw	r2,152(sp)
   44ca4:	d8c02017 	ldw	r3,128(sp)
   44ca8:	da000404 	addi	r8,sp,16
   44cac:	003e1006 	br	444f0 <__alt_data_end+0xfffc44f0>
   44cb0:	00800044 	movi	r2,1
   44cb4:	10803fcc 	andi	r2,r2,255
   44cb8:	00c00044 	movi	r3,1
   44cbc:	10fa3526 	beq	r2,r3,43594 <__alt_data_end+0xfffc3594>
   44cc0:	00c00084 	movi	r3,2
   44cc4:	10fbcb26 	beq	r2,r3,43bf4 <__alt_data_end+0xfffc3bf4>
   44cc8:	003a8f06 	br	43708 <__alt_data_end+0xfffc3708>
   44ccc:	01000174 	movhi	r4,5
   44cd0:	2100d684 	addi	r4,r4,858
   44cd4:	d9003515 	stw	r4,212(sp)
   44cd8:	003b7606 	br	43ab4 <__alt_data_end+0xfffc3ab4>
   44cdc:	d8802917 	ldw	r2,164(sp)
   44ce0:	00c00184 	movi	r3,6
   44ce4:	1880012e 	bgeu	r3,r2,44cec <___vfprintf_internal_r+0x1ca0>
   44ce8:	1805883a 	mov	r2,r3
   44cec:	d8802e15 	stw	r2,184(sp)
   44cf0:	1000ef16 	blt	r2,zero,450b0 <___vfprintf_internal_r+0x2064>
   44cf4:	04000174 	movhi	r16,5
   44cf8:	d8802a15 	stw	r2,168(sp)
   44cfc:	dcc02d15 	stw	r19,180(sp)
   44d00:	d8002915 	stw	zero,164(sp)
   44d04:	d8003215 	stw	zero,200(sp)
   44d08:	8400d004 	addi	r16,r16,832
   44d0c:	0039883a 	mov	fp,zero
   44d10:	003aa206 	br	4379c <__alt_data_end+0xfffc379c>
   44d14:	0021883a 	mov	r16,zero
   44d18:	003e0706 	br	44538 <__alt_data_end+0xfffc4538>
   44d1c:	d9002c17 	ldw	r4,176(sp)
   44d20:	d9801e04 	addi	r6,sp,120
   44d24:	b80b883a 	mov	r5,r23
   44d28:	0049d740 	call	49d74 <__sprint_r>
   44d2c:	1039c91e 	bne	r2,zero,43454 <__alt_data_end+0xfffc3454>
   44d30:	d8802617 	ldw	r2,152(sp)
   44d34:	d9403317 	ldw	r5,204(sp)
   44d38:	d8c02017 	ldw	r3,128(sp)
   44d3c:	da000404 	addi	r8,sp,16
   44d40:	2885c83a 	sub	r2,r5,r2
   44d44:	003dfb06 	br	44534 <__alt_data_end+0xfffc4534>
   44d48:	9080004c 	andi	r2,r18,1
   44d4c:	103e8f1e 	bne	r2,zero,4478c <__alt_data_end+0xfffc478c>
   44d50:	d8802117 	ldw	r2,132(sp)
   44d54:	003e9e06 	br	447d0 <__alt_data_end+0xfffc47d0>
   44d58:	1025883a 	mov	r18,r2
   44d5c:	0039883a 	mov	fp,zero
   44d60:	00800084 	movi	r2,2
   44d64:	003fd306 	br	44cb4 <__alt_data_end+0xfffc4cb4>
   44d68:	07000b44 	movi	fp,45
   44d6c:	df002785 	stb	fp,158(sp)
   44d70:	003a4006 	br	43674 <__alt_data_end+0xfffc3674>
   44d74:	00c00b44 	movi	r3,45
   44d78:	d8c02785 	stb	r3,158(sp)
   44d7c:	d8802a15 	stw	r2,168(sp)
   44d80:	dc802b17 	ldw	r18,172(sp)
   44d84:	d8002915 	stw	zero,164(sp)
   44d88:	07000b44 	movi	fp,45
   44d8c:	003a8006 	br	43790 <__alt_data_end+0xfffc3790>
   44d90:	04000174 	movhi	r16,5
   44d94:	8400c504 	addi	r16,r16,788
   44d98:	003f4706 	br	44ab8 <__alt_data_end+0xfffc4ab8>
   44d9c:	d8c02d17 	ldw	r3,180(sp)
   44da0:	d9002f17 	ldw	r4,188(sp)
   44da4:	18800017 	ldw	r2,0(r3)
   44da8:	18c00104 	addi	r3,r3,4
   44dac:	d8c02d15 	stw	r3,180(sp)
   44db0:	11000015 	stw	r4,0(r2)
   44db4:	0038dd06 	br	4312c <__alt_data_end+0xfffc312c>
   44db8:	dd802617 	ldw	r22,152(sp)
   44dbc:	00bfff44 	movi	r2,-3
   44dc0:	b0801c16 	blt	r22,r2,44e34 <___vfprintf_internal_r+0x1de8>
   44dc4:	d9402917 	ldw	r5,164(sp)
   44dc8:	2d801a16 	blt	r5,r22,44e34 <___vfprintf_internal_r+0x1de8>
   44dcc:	dd803215 	stw	r22,200(sp)
   44dd0:	003e8906 	br	447f8 <__alt_data_end+0xfffc47f8>
   44dd4:	01000174 	movhi	r4,5
   44dd8:	2100d284 	addi	r4,r4,842
   44ddc:	d9002b15 	stw	r4,172(sp)
   44de0:	003c9106 	br	44028 <__alt_data_end+0xfffc4028>
   44de4:	e005883a 	mov	r2,fp
   44de8:	003e7906 	br	447d0 <__alt_data_end+0xfffc47d0>
   44dec:	d9402917 	ldw	r5,164(sp)
   44df0:	df002783 	ldbu	fp,158(sp)
   44df4:	dcc02d15 	stw	r19,180(sp)
   44df8:	d9402a15 	stw	r5,168(sp)
   44dfc:	d9402e15 	stw	r5,184(sp)
   44e00:	d8002915 	stw	zero,164(sp)
   44e04:	d8003215 	stw	zero,200(sp)
   44e08:	003a5d06 	br	43780 <__alt_data_end+0xfffc3780>
   44e0c:	9080004c 	andi	r2,r18,1
   44e10:	0039883a 	mov	fp,zero
   44e14:	10000426 	beq	r2,zero,44e28 <___vfprintf_internal_r+0x1ddc>
   44e18:	00800c04 	movi	r2,48
   44e1c:	dc001dc4 	addi	r16,sp,119
   44e20:	d8801dc5 	stb	r2,119(sp)
   44e24:	003b8006 	br	43c28 <__alt_data_end+0xfffc3c28>
   44e28:	d8002e15 	stw	zero,184(sp)
   44e2c:	dc001e04 	addi	r16,sp,120
   44e30:	003a4d06 	br	43768 <__alt_data_end+0xfffc3768>
   44e34:	8c7fff84 	addi	r17,r17,-2
   44e38:	b5bfffc4 	addi	r22,r22,-1
   44e3c:	dd802615 	stw	r22,152(sp)
   44e40:	dc4022c5 	stb	r17,139(sp)
   44e44:	b000bf16 	blt	r22,zero,45144 <___vfprintf_internal_r+0x20f8>
   44e48:	00800ac4 	movi	r2,43
   44e4c:	d8802305 	stb	r2,140(sp)
   44e50:	00800244 	movi	r2,9
   44e54:	15807016 	blt	r2,r22,45018 <___vfprintf_internal_r+0x1fcc>
   44e58:	00800c04 	movi	r2,48
   44e5c:	b5800c04 	addi	r22,r22,48
   44e60:	d8802345 	stb	r2,141(sp)
   44e64:	dd802385 	stb	r22,142(sp)
   44e68:	d88023c4 	addi	r2,sp,143
   44e6c:	df0022c4 	addi	fp,sp,139
   44e70:	d8c03317 	ldw	r3,204(sp)
   44e74:	1739c83a 	sub	fp,r2,fp
   44e78:	d9003317 	ldw	r4,204(sp)
   44e7c:	e0c7883a 	add	r3,fp,r3
   44e80:	df003a15 	stw	fp,232(sp)
   44e84:	d8c02e15 	stw	r3,184(sp)
   44e88:	00800044 	movi	r2,1
   44e8c:	1100b30e 	bge	r2,r4,4515c <___vfprintf_internal_r+0x2110>
   44e90:	d8c02e17 	ldw	r3,184(sp)
   44e94:	18c00044 	addi	r3,r3,1
   44e98:	d8c02e15 	stw	r3,184(sp)
   44e9c:	1805883a 	mov	r2,r3
   44ea0:	1800ac16 	blt	r3,zero,45154 <___vfprintf_internal_r+0x2108>
   44ea4:	d8003215 	stw	zero,200(sp)
   44ea8:	003e5d06 	br	44820 <__alt_data_end+0xfffc4820>
   44eac:	d9002c17 	ldw	r4,176(sp)
   44eb0:	d9801e04 	addi	r6,sp,120
   44eb4:	b80b883a 	mov	r5,r23
   44eb8:	0049d740 	call	49d74 <__sprint_r>
   44ebc:	1039651e 	bne	r2,zero,43454 <__alt_data_end+0xfffc3454>
   44ec0:	dc402617 	ldw	r17,152(sp)
   44ec4:	d8c02017 	ldw	r3,128(sp)
   44ec8:	d8801f17 	ldw	r2,124(sp)
   44ecc:	da000404 	addi	r8,sp,16
   44ed0:	003ed606 	br	44a2c <__alt_data_end+0xfffc4a2c>
   44ed4:	582b883a 	mov	r21,r11
   44ed8:	d8002915 	stw	zero,164(sp)
   44edc:	0038bd06 	br	431d4 <__alt_data_end+0xfffc31d4>
   44ee0:	d8802917 	ldw	r2,164(sp)
   44ee4:	103e071e 	bne	r2,zero,44704 <__alt_data_end+0xfffc4704>
   44ee8:	dc002915 	stw	r16,164(sp)
   44eec:	003e0506 	br	44704 <__alt_data_end+0xfffc4704>
   44ef0:	d9002917 	ldw	r4,164(sp)
   44ef4:	20c00044 	addi	r3,r4,1
   44ef8:	003e0f06 	br	44738 <__alt_data_end+0xfffc4738>
   44efc:	01400184 	movi	r5,6
   44f00:	d9402915 	stw	r5,164(sp)
   44f04:	003dff06 	br	44704 <__alt_data_end+0xfffc4704>
   44f08:	d8802104 	addi	r2,sp,132
   44f0c:	d8800315 	stw	r2,12(sp)
   44f10:	d8802504 	addi	r2,sp,148
   44f14:	d8800215 	stw	r2,8(sp)
   44f18:	d8802604 	addi	r2,sp,152
   44f1c:	d8800115 	stw	r2,4(sp)
   44f20:	d8802917 	ldw	r2,164(sp)
   44f24:	d9403617 	ldw	r5,216(sp)
   44f28:	d9002c17 	ldw	r4,176(sp)
   44f2c:	d8800015 	stw	r2,0(sp)
   44f30:	01c000c4 	movi	r7,3
   44f34:	980d883a 	mov	r6,r19
   44f38:	da003d15 	stw	r8,244(sp)
   44f3c:	0045a600 	call	45a60 <_dtoa_r>
   44f40:	d8c02917 	ldw	r3,164(sp)
   44f44:	da003d17 	ldw	r8,244(sp)
   44f48:	1021883a 	mov	r16,r2
   44f4c:	10f9883a 	add	fp,r2,r3
   44f50:	81000007 	ldb	r4,0(r16)
   44f54:	00800c04 	movi	r2,48
   44f58:	20805e26 	beq	r4,r2,450d4 <___vfprintf_internal_r+0x2088>
   44f5c:	d8c02617 	ldw	r3,152(sp)
   44f60:	e0f9883a 	add	fp,fp,r3
   44f64:	003e0a06 	br	44790 <__alt_data_end+0xfffc4790>
   44f68:	00c00b44 	movi	r3,45
   44f6c:	24e0003c 	xorhi	r19,r4,32768
   44f70:	d8c02a05 	stb	r3,168(sp)
   44f74:	003de906 	br	4471c <__alt_data_end+0xfffc471c>
   44f78:	d8c03217 	ldw	r3,200(sp)
   44f7c:	00c07a0e 	bge	zero,r3,45168 <___vfprintf_internal_r+0x211c>
   44f80:	00800044 	movi	r2,1
   44f84:	d9003317 	ldw	r4,204(sp)
   44f88:	1105883a 	add	r2,r2,r4
   44f8c:	d8802e15 	stw	r2,184(sp)
   44f90:	10004e16 	blt	r2,zero,450cc <___vfprintf_internal_r+0x2080>
   44f94:	044019c4 	movi	r17,103
   44f98:	003e2106 	br	44820 <__alt_data_end+0xfffc4820>
   44f9c:	d9002917 	ldw	r4,164(sp)
   44fa0:	d8802104 	addi	r2,sp,132
   44fa4:	d8800315 	stw	r2,12(sp)
   44fa8:	d9000015 	stw	r4,0(sp)
   44fac:	d8802504 	addi	r2,sp,148
   44fb0:	d9403617 	ldw	r5,216(sp)
   44fb4:	d9002c17 	ldw	r4,176(sp)
   44fb8:	d8800215 	stw	r2,8(sp)
   44fbc:	d8802604 	addi	r2,sp,152
   44fc0:	d8800115 	stw	r2,4(sp)
   44fc4:	01c000c4 	movi	r7,3
   44fc8:	980d883a 	mov	r6,r19
   44fcc:	da003d15 	stw	r8,244(sp)
   44fd0:	0045a600 	call	45a60 <_dtoa_r>
   44fd4:	d8c02917 	ldw	r3,164(sp)
   44fd8:	da003d17 	ldw	r8,244(sp)
   44fdc:	1021883a 	mov	r16,r2
   44fe0:	00801184 	movi	r2,70
   44fe4:	80f9883a 	add	fp,r16,r3
   44fe8:	88bfd926 	beq	r17,r2,44f50 <__alt_data_end+0xfffc4f50>
   44fec:	003de806 	br	44790 <__alt_data_end+0xfffc4790>
   44ff0:	d9002917 	ldw	r4,164(sp)
   44ff4:	00c04d0e 	bge	zero,r3,4512c <___vfprintf_internal_r+0x20e0>
   44ff8:	2000441e 	bne	r4,zero,4510c <___vfprintf_internal_r+0x20c0>
   44ffc:	9480004c 	andi	r18,r18,1
   45000:	9000421e 	bne	r18,zero,4510c <___vfprintf_internal_r+0x20c0>
   45004:	1805883a 	mov	r2,r3
   45008:	18007016 	blt	r3,zero,451cc <___vfprintf_internal_r+0x2180>
   4500c:	d8c03217 	ldw	r3,200(sp)
   45010:	d8c02e15 	stw	r3,184(sp)
   45014:	003e0206 	br	44820 <__alt_data_end+0xfffc4820>
   45018:	df0022c4 	addi	fp,sp,139
   4501c:	dc002915 	stw	r16,164(sp)
   45020:	4027883a 	mov	r19,r8
   45024:	e021883a 	mov	r16,fp
   45028:	b009883a 	mov	r4,r22
   4502c:	01400284 	movi	r5,10
   45030:	004d1bc0 	call	4d1bc <__modsi3>
   45034:	10800c04 	addi	r2,r2,48
   45038:	843fffc4 	addi	r16,r16,-1
   4503c:	b009883a 	mov	r4,r22
   45040:	01400284 	movi	r5,10
   45044:	80800005 	stb	r2,0(r16)
   45048:	004d1380 	call	4d138 <__divsi3>
   4504c:	102d883a 	mov	r22,r2
   45050:	00800244 	movi	r2,9
   45054:	15bff416 	blt	r2,r22,45028 <__alt_data_end+0xfffc5028>
   45058:	9811883a 	mov	r8,r19
   4505c:	b0800c04 	addi	r2,r22,48
   45060:	8027883a 	mov	r19,r16
   45064:	997fffc4 	addi	r5,r19,-1
   45068:	98bfffc5 	stb	r2,-1(r19)
   4506c:	dc002917 	ldw	r16,164(sp)
   45070:	2f006a2e 	bgeu	r5,fp,4521c <___vfprintf_internal_r+0x21d0>
   45074:	d9c02384 	addi	r7,sp,142
   45078:	3ccfc83a 	sub	r7,r7,r19
   4507c:	d9002344 	addi	r4,sp,141
   45080:	e1cf883a 	add	r7,fp,r7
   45084:	00000106 	br	4508c <___vfprintf_internal_r+0x2040>
   45088:	28800003 	ldbu	r2,0(r5)
   4508c:	20800005 	stb	r2,0(r4)
   45090:	21000044 	addi	r4,r4,1
   45094:	29400044 	addi	r5,r5,1
   45098:	393ffb1e 	bne	r7,r4,45088 <__alt_data_end+0xfffc5088>
   4509c:	d8802304 	addi	r2,sp,140
   450a0:	14c5c83a 	sub	r2,r2,r19
   450a4:	d8c02344 	addi	r3,sp,141
   450a8:	1885883a 	add	r2,r3,r2
   450ac:	003f7006 	br	44e70 <__alt_data_end+0xfffc4e70>
   450b0:	0005883a 	mov	r2,zero
   450b4:	003f0f06 	br	44cf4 <__alt_data_end+0xfffc4cf4>
   450b8:	d8c03217 	ldw	r3,200(sp)
   450bc:	18c00044 	addi	r3,r3,1
   450c0:	d8c02e15 	stw	r3,184(sp)
   450c4:	1805883a 	mov	r2,r3
   450c8:	183fb20e 	bge	r3,zero,44f94 <__alt_data_end+0xfffc4f94>
   450cc:	0005883a 	mov	r2,zero
   450d0:	003fb006 	br	44f94 <__alt_data_end+0xfffc4f94>
   450d4:	d9003617 	ldw	r4,216(sp)
   450d8:	000d883a 	mov	r6,zero
   450dc:	000f883a 	mov	r7,zero
   450e0:	980b883a 	mov	r5,r19
   450e4:	d8c03c15 	stw	r3,240(sp)
   450e8:	da003d15 	stw	r8,244(sp)
   450ec:	004e4800 	call	4e480 <__eqdf2>
   450f0:	d8c03c17 	ldw	r3,240(sp)
   450f4:	da003d17 	ldw	r8,244(sp)
   450f8:	103f9826 	beq	r2,zero,44f5c <__alt_data_end+0xfffc4f5c>
   450fc:	00800044 	movi	r2,1
   45100:	10c7c83a 	sub	r3,r2,r3
   45104:	d8c02615 	stw	r3,152(sp)
   45108:	003f9506 	br	44f60 <__alt_data_end+0xfffc4f60>
   4510c:	d9002917 	ldw	r4,164(sp)
   45110:	d8c03217 	ldw	r3,200(sp)
   45114:	20800044 	addi	r2,r4,1
   45118:	1885883a 	add	r2,r3,r2
   4511c:	d8802e15 	stw	r2,184(sp)
   45120:	103dbf0e 	bge	r2,zero,44820 <__alt_data_end+0xfffc4820>
   45124:	0005883a 	mov	r2,zero
   45128:	003dbd06 	br	44820 <__alt_data_end+0xfffc4820>
   4512c:	2000211e 	bne	r4,zero,451b4 <___vfprintf_internal_r+0x2168>
   45130:	9480004c 	andi	r18,r18,1
   45134:	90001f1e 	bne	r18,zero,451b4 <___vfprintf_internal_r+0x2168>
   45138:	00800044 	movi	r2,1
   4513c:	d8802e15 	stw	r2,184(sp)
   45140:	003db706 	br	44820 <__alt_data_end+0xfffc4820>
   45144:	00800b44 	movi	r2,45
   45148:	05adc83a 	sub	r22,zero,r22
   4514c:	d8802305 	stb	r2,140(sp)
   45150:	003f3f06 	br	44e50 <__alt_data_end+0xfffc4e50>
   45154:	0005883a 	mov	r2,zero
   45158:	003f5206 	br	44ea4 <__alt_data_end+0xfffc4ea4>
   4515c:	90a4703a 	and	r18,r18,r2
   45160:	903f4e26 	beq	r18,zero,44e9c <__alt_data_end+0xfffc4e9c>
   45164:	003f4a06 	br	44e90 <__alt_data_end+0xfffc4e90>
   45168:	00800084 	movi	r2,2
   4516c:	10c5c83a 	sub	r2,r2,r3
   45170:	003f8406 	br	44f84 <__alt_data_end+0xfffc4f84>
   45174:	d8802d17 	ldw	r2,180(sp)
   45178:	d9002d17 	ldw	r4,180(sp)
   4517c:	ac400043 	ldbu	r17,1(r21)
   45180:	10800017 	ldw	r2,0(r2)
   45184:	582b883a 	mov	r21,r11
   45188:	d8802915 	stw	r2,164(sp)
   4518c:	20800104 	addi	r2,r4,4
   45190:	d9002917 	ldw	r4,164(sp)
   45194:	d8802d15 	stw	r2,180(sp)
   45198:	203e7a0e 	bge	r4,zero,44b84 <__alt_data_end+0xfffc4b84>
   4519c:	8c403fcc 	andi	r17,r17,255
   451a0:	00bfffc4 	movi	r2,-1
   451a4:	8c40201c 	xori	r17,r17,128
   451a8:	d8802915 	stw	r2,164(sp)
   451ac:	8c7fe004 	addi	r17,r17,-128
   451b0:	00380706 	br	431d0 <__alt_data_end+0xfffc31d0>
   451b4:	d8c02917 	ldw	r3,164(sp)
   451b8:	18c00084 	addi	r3,r3,2
   451bc:	d8c02e15 	stw	r3,184(sp)
   451c0:	1805883a 	mov	r2,r3
   451c4:	183d960e 	bge	r3,zero,44820 <__alt_data_end+0xfffc4820>
   451c8:	003fd606 	br	45124 <__alt_data_end+0xfffc5124>
   451cc:	0005883a 	mov	r2,zero
   451d0:	003f8e06 	br	4500c <__alt_data_end+0xfffc500c>
   451d4:	9080004c 	andi	r2,r18,1
   451d8:	103f811e 	bne	r2,zero,44fe0 <__alt_data_end+0xfffc4fe0>
   451dc:	d8802117 	ldw	r2,132(sp)
   451e0:	1405c83a 	sub	r2,r2,r16
   451e4:	d8803315 	stw	r2,204(sp)
   451e8:	b47ef326 	beq	r22,r17,44db8 <__alt_data_end+0xfffc4db8>
   451ec:	dd802617 	ldw	r22,152(sp)
   451f0:	003f1106 	br	44e38 <__alt_data_end+0xfffc4e38>
   451f4:	d9c02785 	stb	r7,158(sp)
   451f8:	00390406 	br	4360c <__alt_data_end+0xfffc360c>
   451fc:	d9c02785 	stb	r7,158(sp)
   45200:	0038d306 	br	43550 <__alt_data_end+0xfffc3550>
   45204:	d9c02785 	stb	r7,158(sp)
   45208:	003a6106 	br	43b90 <__alt_data_end+0xfffc3b90>
   4520c:	d9c02785 	stb	r7,158(sp)
   45210:	003af806 	br	43df4 <__alt_data_end+0xfffc3df4>
   45214:	0005883a 	mov	r2,zero
   45218:	003d7e06 	br	44814 <__alt_data_end+0xfffc4814>
   4521c:	d8802344 	addi	r2,sp,141
   45220:	003f1306 	br	44e70 <__alt_data_end+0xfffc4e70>
   45224:	d9c02785 	stb	r7,158(sp)
   45228:	00392306 	br	436b8 <__alt_data_end+0xfffc36b8>
   4522c:	d9c02785 	stb	r7,158(sp)
   45230:	003aa906 	br	43cd8 <__alt_data_end+0xfffc3cd8>
   45234:	d9c02785 	stb	r7,158(sp)
   45238:	003a3d06 	br	43b30 <__alt_data_end+0xfffc3b30>
   4523c:	d9c02785 	stb	r7,158(sp)
   45240:	003aca06 	br	43d6c <__alt_data_end+0xfffc3d6c>

00045244 <__vfprintf_internal>:
   45244:	00800174 	movhi	r2,5
   45248:	10882a04 	addi	r2,r2,8360
   4524c:	300f883a 	mov	r7,r6
   45250:	280d883a 	mov	r6,r5
   45254:	200b883a 	mov	r5,r4
   45258:	11000017 	ldw	r4,0(r2)
   4525c:	004304c1 	jmpi	4304c <___vfprintf_internal_r>

00045260 <__sbprintf>:
   45260:	2880030b 	ldhu	r2,12(r5)
   45264:	2ac01917 	ldw	r11,100(r5)
   45268:	2a80038b 	ldhu	r10,14(r5)
   4526c:	2a400717 	ldw	r9,28(r5)
   45270:	2a000917 	ldw	r8,36(r5)
   45274:	defee204 	addi	sp,sp,-1144
   45278:	00c10004 	movi	r3,1024
   4527c:	dc011a15 	stw	r16,1128(sp)
   45280:	10bfff4c 	andi	r2,r2,65533
   45284:	2821883a 	mov	r16,r5
   45288:	d8cb883a 	add	r5,sp,r3
   4528c:	dc811c15 	stw	r18,1136(sp)
   45290:	dc411b15 	stw	r17,1132(sp)
   45294:	dfc11d15 	stw	ra,1140(sp)
   45298:	2025883a 	mov	r18,r4
   4529c:	d881030d 	sth	r2,1036(sp)
   452a0:	dac11915 	stw	r11,1124(sp)
   452a4:	da81038d 	sth	r10,1038(sp)
   452a8:	da410715 	stw	r9,1052(sp)
   452ac:	da010915 	stw	r8,1060(sp)
   452b0:	dec10015 	stw	sp,1024(sp)
   452b4:	dec10415 	stw	sp,1040(sp)
   452b8:	d8c10215 	stw	r3,1032(sp)
   452bc:	d8c10515 	stw	r3,1044(sp)
   452c0:	d8010615 	stw	zero,1048(sp)
   452c4:	004304c0 	call	4304c <___vfprintf_internal_r>
   452c8:	1023883a 	mov	r17,r2
   452cc:	10000416 	blt	r2,zero,452e0 <__sbprintf+0x80>
   452d0:	d9410004 	addi	r5,sp,1024
   452d4:	9009883a 	mov	r4,r18
   452d8:	00473040 	call	47304 <_fflush_r>
   452dc:	10000d1e 	bne	r2,zero,45314 <__sbprintf+0xb4>
   452e0:	d881030b 	ldhu	r2,1036(sp)
   452e4:	1080100c 	andi	r2,r2,64
   452e8:	10000326 	beq	r2,zero,452f8 <__sbprintf+0x98>
   452ec:	8080030b 	ldhu	r2,12(r16)
   452f0:	10801014 	ori	r2,r2,64
   452f4:	8080030d 	sth	r2,12(r16)
   452f8:	8805883a 	mov	r2,r17
   452fc:	dfc11d17 	ldw	ra,1140(sp)
   45300:	dc811c17 	ldw	r18,1136(sp)
   45304:	dc411b17 	ldw	r17,1132(sp)
   45308:	dc011a17 	ldw	r16,1128(sp)
   4530c:	dec11e04 	addi	sp,sp,1144
   45310:	f800283a 	ret
   45314:	047fffc4 	movi	r17,-1
   45318:	003ff106 	br	452e0 <__alt_data_end+0xfffc52e0>

0004531c <__swbuf_r>:
   4531c:	defffb04 	addi	sp,sp,-20
   45320:	dcc00315 	stw	r19,12(sp)
   45324:	dc800215 	stw	r18,8(sp)
   45328:	dc000015 	stw	r16,0(sp)
   4532c:	dfc00415 	stw	ra,16(sp)
   45330:	dc400115 	stw	r17,4(sp)
   45334:	2025883a 	mov	r18,r4
   45338:	2827883a 	mov	r19,r5
   4533c:	3021883a 	mov	r16,r6
   45340:	20000226 	beq	r4,zero,4534c <__swbuf_r+0x30>
   45344:	20800e17 	ldw	r2,56(r4)
   45348:	10004226 	beq	r2,zero,45454 <__swbuf_r+0x138>
   4534c:	80800617 	ldw	r2,24(r16)
   45350:	8100030b 	ldhu	r4,12(r16)
   45354:	80800215 	stw	r2,8(r16)
   45358:	2080020c 	andi	r2,r4,8
   4535c:	10003626 	beq	r2,zero,45438 <__swbuf_r+0x11c>
   45360:	80c00417 	ldw	r3,16(r16)
   45364:	18003426 	beq	r3,zero,45438 <__swbuf_r+0x11c>
   45368:	2088000c 	andi	r2,r4,8192
   4536c:	9c403fcc 	andi	r17,r19,255
   45370:	10001a26 	beq	r2,zero,453dc <__swbuf_r+0xc0>
   45374:	80800017 	ldw	r2,0(r16)
   45378:	81000517 	ldw	r4,20(r16)
   4537c:	10c7c83a 	sub	r3,r2,r3
   45380:	1900200e 	bge	r3,r4,45404 <__swbuf_r+0xe8>
   45384:	18c00044 	addi	r3,r3,1
   45388:	81000217 	ldw	r4,8(r16)
   4538c:	11400044 	addi	r5,r2,1
   45390:	81400015 	stw	r5,0(r16)
   45394:	213fffc4 	addi	r4,r4,-1
   45398:	81000215 	stw	r4,8(r16)
   4539c:	14c00005 	stb	r19,0(r2)
   453a0:	80800517 	ldw	r2,20(r16)
   453a4:	10c01e26 	beq	r2,r3,45420 <__swbuf_r+0x104>
   453a8:	8080030b 	ldhu	r2,12(r16)
   453ac:	1080004c 	andi	r2,r2,1
   453b0:	10000226 	beq	r2,zero,453bc <__swbuf_r+0xa0>
   453b4:	00800284 	movi	r2,10
   453b8:	88801926 	beq	r17,r2,45420 <__swbuf_r+0x104>
   453bc:	8805883a 	mov	r2,r17
   453c0:	dfc00417 	ldw	ra,16(sp)
   453c4:	dcc00317 	ldw	r19,12(sp)
   453c8:	dc800217 	ldw	r18,8(sp)
   453cc:	dc400117 	ldw	r17,4(sp)
   453d0:	dc000017 	ldw	r16,0(sp)
   453d4:	dec00504 	addi	sp,sp,20
   453d8:	f800283a 	ret
   453dc:	81401917 	ldw	r5,100(r16)
   453e0:	00b7ffc4 	movi	r2,-8193
   453e4:	21080014 	ori	r4,r4,8192
   453e8:	2884703a 	and	r2,r5,r2
   453ec:	80801915 	stw	r2,100(r16)
   453f0:	80800017 	ldw	r2,0(r16)
   453f4:	8100030d 	sth	r4,12(r16)
   453f8:	81000517 	ldw	r4,20(r16)
   453fc:	10c7c83a 	sub	r3,r2,r3
   45400:	193fe016 	blt	r3,r4,45384 <__alt_data_end+0xfffc5384>
   45404:	800b883a 	mov	r5,r16
   45408:	9009883a 	mov	r4,r18
   4540c:	00473040 	call	47304 <_fflush_r>
   45410:	1000071e 	bne	r2,zero,45430 <__swbuf_r+0x114>
   45414:	80800017 	ldw	r2,0(r16)
   45418:	00c00044 	movi	r3,1
   4541c:	003fda06 	br	45388 <__alt_data_end+0xfffc5388>
   45420:	800b883a 	mov	r5,r16
   45424:	9009883a 	mov	r4,r18
   45428:	00473040 	call	47304 <_fflush_r>
   4542c:	103fe326 	beq	r2,zero,453bc <__alt_data_end+0xfffc53bc>
   45430:	00bfffc4 	movi	r2,-1
   45434:	003fe206 	br	453c0 <__alt_data_end+0xfffc53c0>
   45438:	800b883a 	mov	r5,r16
   4543c:	9009883a 	mov	r4,r18
   45440:	00454740 	call	45474 <__swsetup_r>
   45444:	103ffa1e 	bne	r2,zero,45430 <__alt_data_end+0xfffc5430>
   45448:	8100030b 	ldhu	r4,12(r16)
   4544c:	80c00417 	ldw	r3,16(r16)
   45450:	003fc506 	br	45368 <__alt_data_end+0xfffc5368>
   45454:	00476e00 	call	476e0 <__sinit>
   45458:	003fbc06 	br	4534c <__alt_data_end+0xfffc534c>

0004545c <__swbuf>:
   4545c:	00800174 	movhi	r2,5
   45460:	10882a04 	addi	r2,r2,8360
   45464:	280d883a 	mov	r6,r5
   45468:	200b883a 	mov	r5,r4
   4546c:	11000017 	ldw	r4,0(r2)
   45470:	004531c1 	jmpi	4531c <__swbuf_r>

00045474 <__swsetup_r>:
   45474:	00800174 	movhi	r2,5
   45478:	defffd04 	addi	sp,sp,-12
   4547c:	10882a04 	addi	r2,r2,8360
   45480:	dc400115 	stw	r17,4(sp)
   45484:	2023883a 	mov	r17,r4
   45488:	11000017 	ldw	r4,0(r2)
   4548c:	dc000015 	stw	r16,0(sp)
   45490:	dfc00215 	stw	ra,8(sp)
   45494:	2821883a 	mov	r16,r5
   45498:	20000226 	beq	r4,zero,454a4 <__swsetup_r+0x30>
   4549c:	20800e17 	ldw	r2,56(r4)
   454a0:	10003126 	beq	r2,zero,45568 <__swsetup_r+0xf4>
   454a4:	8080030b 	ldhu	r2,12(r16)
   454a8:	10c0020c 	andi	r3,r2,8
   454ac:	1009883a 	mov	r4,r2
   454b0:	18000f26 	beq	r3,zero,454f0 <__swsetup_r+0x7c>
   454b4:	80c00417 	ldw	r3,16(r16)
   454b8:	18001526 	beq	r3,zero,45510 <__swsetup_r+0x9c>
   454bc:	1100004c 	andi	r4,r2,1
   454c0:	20001c1e 	bne	r4,zero,45534 <__swsetup_r+0xc0>
   454c4:	1080008c 	andi	r2,r2,2
   454c8:	1000291e 	bne	r2,zero,45570 <__swsetup_r+0xfc>
   454cc:	80800517 	ldw	r2,20(r16)
   454d0:	80800215 	stw	r2,8(r16)
   454d4:	18001c26 	beq	r3,zero,45548 <__swsetup_r+0xd4>
   454d8:	0005883a 	mov	r2,zero
   454dc:	dfc00217 	ldw	ra,8(sp)
   454e0:	dc400117 	ldw	r17,4(sp)
   454e4:	dc000017 	ldw	r16,0(sp)
   454e8:	dec00304 	addi	sp,sp,12
   454ec:	f800283a 	ret
   454f0:	2080040c 	andi	r2,r4,16
   454f4:	10002e26 	beq	r2,zero,455b0 <__swsetup_r+0x13c>
   454f8:	2080010c 	andi	r2,r4,4
   454fc:	10001e1e 	bne	r2,zero,45578 <__swsetup_r+0x104>
   45500:	80c00417 	ldw	r3,16(r16)
   45504:	20800214 	ori	r2,r4,8
   45508:	8080030d 	sth	r2,12(r16)
   4550c:	183feb1e 	bne	r3,zero,454bc <__alt_data_end+0xfffc54bc>
   45510:	1100a00c 	andi	r4,r2,640
   45514:	01408004 	movi	r5,512
   45518:	217fe826 	beq	r4,r5,454bc <__alt_data_end+0xfffc54bc>
   4551c:	800b883a 	mov	r5,r16
   45520:	8809883a 	mov	r4,r17
   45524:	0047dc80 	call	47dc8 <__smakebuf_r>
   45528:	8080030b 	ldhu	r2,12(r16)
   4552c:	80c00417 	ldw	r3,16(r16)
   45530:	003fe206 	br	454bc <__alt_data_end+0xfffc54bc>
   45534:	80800517 	ldw	r2,20(r16)
   45538:	80000215 	stw	zero,8(r16)
   4553c:	0085c83a 	sub	r2,zero,r2
   45540:	80800615 	stw	r2,24(r16)
   45544:	183fe41e 	bne	r3,zero,454d8 <__alt_data_end+0xfffc54d8>
   45548:	80c0030b 	ldhu	r3,12(r16)
   4554c:	0005883a 	mov	r2,zero
   45550:	1900200c 	andi	r4,r3,128
   45554:	203fe126 	beq	r4,zero,454dc <__alt_data_end+0xfffc54dc>
   45558:	18c01014 	ori	r3,r3,64
   4555c:	80c0030d 	sth	r3,12(r16)
   45560:	00bfffc4 	movi	r2,-1
   45564:	003fdd06 	br	454dc <__alt_data_end+0xfffc54dc>
   45568:	00476e00 	call	476e0 <__sinit>
   4556c:	003fcd06 	br	454a4 <__alt_data_end+0xfffc54a4>
   45570:	0005883a 	mov	r2,zero
   45574:	003fd606 	br	454d0 <__alt_data_end+0xfffc54d0>
   45578:	81400c17 	ldw	r5,48(r16)
   4557c:	28000626 	beq	r5,zero,45598 <__swsetup_r+0x124>
   45580:	80801004 	addi	r2,r16,64
   45584:	28800326 	beq	r5,r2,45594 <__swsetup_r+0x120>
   45588:	8809883a 	mov	r4,r17
   4558c:	00478540 	call	47854 <_free_r>
   45590:	8100030b 	ldhu	r4,12(r16)
   45594:	80000c15 	stw	zero,48(r16)
   45598:	80c00417 	ldw	r3,16(r16)
   4559c:	00bff6c4 	movi	r2,-37
   455a0:	1108703a 	and	r4,r2,r4
   455a4:	80000115 	stw	zero,4(r16)
   455a8:	80c00015 	stw	r3,0(r16)
   455ac:	003fd506 	br	45504 <__alt_data_end+0xfffc5504>
   455b0:	00800244 	movi	r2,9
   455b4:	88800015 	stw	r2,0(r17)
   455b8:	20801014 	ori	r2,r4,64
   455bc:	8080030d 	sth	r2,12(r16)
   455c0:	00bfffc4 	movi	r2,-1
   455c4:	003fc506 	br	454dc <__alt_data_end+0xfffc54dc>

000455c8 <__register_exitproc>:
   455c8:	defffa04 	addi	sp,sp,-24
   455cc:	dc000315 	stw	r16,12(sp)
   455d0:	04000174 	movhi	r16,5
   455d4:	84082904 	addi	r16,r16,8356
   455d8:	80c00017 	ldw	r3,0(r16)
   455dc:	dc400415 	stw	r17,16(sp)
   455e0:	dfc00515 	stw	ra,20(sp)
   455e4:	18805217 	ldw	r2,328(r3)
   455e8:	2023883a 	mov	r17,r4
   455ec:	10003726 	beq	r2,zero,456cc <__register_exitproc+0x104>
   455f0:	10c00117 	ldw	r3,4(r2)
   455f4:	010007c4 	movi	r4,31
   455f8:	20c00e16 	blt	r4,r3,45634 <__register_exitproc+0x6c>
   455fc:	1a000044 	addi	r8,r3,1
   45600:	8800221e 	bne	r17,zero,4568c <__register_exitproc+0xc4>
   45604:	18c00084 	addi	r3,r3,2
   45608:	18c7883a 	add	r3,r3,r3
   4560c:	18c7883a 	add	r3,r3,r3
   45610:	12000115 	stw	r8,4(r2)
   45614:	10c7883a 	add	r3,r2,r3
   45618:	19400015 	stw	r5,0(r3)
   4561c:	0005883a 	mov	r2,zero
   45620:	dfc00517 	ldw	ra,20(sp)
   45624:	dc400417 	ldw	r17,16(sp)
   45628:	dc000317 	ldw	r16,12(sp)
   4562c:	dec00604 	addi	sp,sp,24
   45630:	f800283a 	ret
   45634:	00800034 	movhi	r2,0
   45638:	10800004 	addi	r2,r2,0
   4563c:	10002626 	beq	r2,zero,456d8 <__register_exitproc+0x110>
   45640:	01006404 	movi	r4,400
   45644:	d9400015 	stw	r5,0(sp)
   45648:	d9800115 	stw	r6,4(sp)
   4564c:	d9c00215 	stw	r7,8(sp)
   45650:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x40000>
   45654:	d9400017 	ldw	r5,0(sp)
   45658:	d9800117 	ldw	r6,4(sp)
   4565c:	d9c00217 	ldw	r7,8(sp)
   45660:	10001d26 	beq	r2,zero,456d8 <__register_exitproc+0x110>
   45664:	81000017 	ldw	r4,0(r16)
   45668:	10000115 	stw	zero,4(r2)
   4566c:	02000044 	movi	r8,1
   45670:	22405217 	ldw	r9,328(r4)
   45674:	0007883a 	mov	r3,zero
   45678:	12400015 	stw	r9,0(r2)
   4567c:	20805215 	stw	r2,328(r4)
   45680:	10006215 	stw	zero,392(r2)
   45684:	10006315 	stw	zero,396(r2)
   45688:	883fde26 	beq	r17,zero,45604 <__alt_data_end+0xfffc5604>
   4568c:	18c9883a 	add	r4,r3,r3
   45690:	2109883a 	add	r4,r4,r4
   45694:	1109883a 	add	r4,r2,r4
   45698:	21802215 	stw	r6,136(r4)
   4569c:	01800044 	movi	r6,1
   456a0:	12406217 	ldw	r9,392(r2)
   456a4:	30cc983a 	sll	r6,r6,r3
   456a8:	4992b03a 	or	r9,r9,r6
   456ac:	12406215 	stw	r9,392(r2)
   456b0:	21c04215 	stw	r7,264(r4)
   456b4:	01000084 	movi	r4,2
   456b8:	893fd21e 	bne	r17,r4,45604 <__alt_data_end+0xfffc5604>
   456bc:	11006317 	ldw	r4,396(r2)
   456c0:	218cb03a 	or	r6,r4,r6
   456c4:	11806315 	stw	r6,396(r2)
   456c8:	003fce06 	br	45604 <__alt_data_end+0xfffc5604>
   456cc:	18805304 	addi	r2,r3,332
   456d0:	18805215 	stw	r2,328(r3)
   456d4:	003fc606 	br	455f0 <__alt_data_end+0xfffc55f0>
   456d8:	00bfffc4 	movi	r2,-1
   456dc:	003fd006 	br	45620 <__alt_data_end+0xfffc5620>

000456e0 <__call_exitprocs>:
   456e0:	defff504 	addi	sp,sp,-44
   456e4:	df000915 	stw	fp,36(sp)
   456e8:	dd400615 	stw	r21,24(sp)
   456ec:	dc800315 	stw	r18,12(sp)
   456f0:	dfc00a15 	stw	ra,40(sp)
   456f4:	ddc00815 	stw	r23,32(sp)
   456f8:	dd800715 	stw	r22,28(sp)
   456fc:	dd000515 	stw	r20,20(sp)
   45700:	dcc00415 	stw	r19,16(sp)
   45704:	dc400215 	stw	r17,8(sp)
   45708:	dc000115 	stw	r16,4(sp)
   4570c:	d9000015 	stw	r4,0(sp)
   45710:	2839883a 	mov	fp,r5
   45714:	04800044 	movi	r18,1
   45718:	057fffc4 	movi	r21,-1
   4571c:	00800174 	movhi	r2,5
   45720:	10882904 	addi	r2,r2,8356
   45724:	12000017 	ldw	r8,0(r2)
   45728:	45005217 	ldw	r20,328(r8)
   4572c:	44c05204 	addi	r19,r8,328
   45730:	a0001c26 	beq	r20,zero,457a4 <__call_exitprocs+0xc4>
   45734:	a0800117 	ldw	r2,4(r20)
   45738:	15ffffc4 	addi	r23,r2,-1
   4573c:	b8000d16 	blt	r23,zero,45774 <__call_exitprocs+0x94>
   45740:	14000044 	addi	r16,r2,1
   45744:	8421883a 	add	r16,r16,r16
   45748:	8421883a 	add	r16,r16,r16
   4574c:	84402004 	addi	r17,r16,128
   45750:	a463883a 	add	r17,r20,r17
   45754:	a421883a 	add	r16,r20,r16
   45758:	e0001e26 	beq	fp,zero,457d4 <__call_exitprocs+0xf4>
   4575c:	80804017 	ldw	r2,256(r16)
   45760:	e0801c26 	beq	fp,r2,457d4 <__call_exitprocs+0xf4>
   45764:	bdffffc4 	addi	r23,r23,-1
   45768:	843fff04 	addi	r16,r16,-4
   4576c:	8c7fff04 	addi	r17,r17,-4
   45770:	bd7ff91e 	bne	r23,r21,45758 <__alt_data_end+0xfffc5758>
   45774:	00800034 	movhi	r2,0
   45778:	10800004 	addi	r2,r2,0
   4577c:	10000926 	beq	r2,zero,457a4 <__call_exitprocs+0xc4>
   45780:	a0800117 	ldw	r2,4(r20)
   45784:	1000301e 	bne	r2,zero,45848 <__call_exitprocs+0x168>
   45788:	a0800017 	ldw	r2,0(r20)
   4578c:	10003226 	beq	r2,zero,45858 <__call_exitprocs+0x178>
   45790:	a009883a 	mov	r4,r20
   45794:	98800015 	stw	r2,0(r19)
   45798:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x40000>
   4579c:	9d000017 	ldw	r20,0(r19)
   457a0:	a03fe41e 	bne	r20,zero,45734 <__alt_data_end+0xfffc5734>
   457a4:	dfc00a17 	ldw	ra,40(sp)
   457a8:	df000917 	ldw	fp,36(sp)
   457ac:	ddc00817 	ldw	r23,32(sp)
   457b0:	dd800717 	ldw	r22,28(sp)
   457b4:	dd400617 	ldw	r21,24(sp)
   457b8:	dd000517 	ldw	r20,20(sp)
   457bc:	dcc00417 	ldw	r19,16(sp)
   457c0:	dc800317 	ldw	r18,12(sp)
   457c4:	dc400217 	ldw	r17,8(sp)
   457c8:	dc000117 	ldw	r16,4(sp)
   457cc:	dec00b04 	addi	sp,sp,44
   457d0:	f800283a 	ret
   457d4:	a0800117 	ldw	r2,4(r20)
   457d8:	80c00017 	ldw	r3,0(r16)
   457dc:	10bfffc4 	addi	r2,r2,-1
   457e0:	15c01426 	beq	r2,r23,45834 <__call_exitprocs+0x154>
   457e4:	80000015 	stw	zero,0(r16)
   457e8:	183fde26 	beq	r3,zero,45764 <__alt_data_end+0xfffc5764>
   457ec:	95c8983a 	sll	r4,r18,r23
   457f0:	a0806217 	ldw	r2,392(r20)
   457f4:	a5800117 	ldw	r22,4(r20)
   457f8:	2084703a 	and	r2,r4,r2
   457fc:	10000b26 	beq	r2,zero,4582c <__call_exitprocs+0x14c>
   45800:	a0806317 	ldw	r2,396(r20)
   45804:	2088703a 	and	r4,r4,r2
   45808:	20000c1e 	bne	r4,zero,4583c <__call_exitprocs+0x15c>
   4580c:	89400017 	ldw	r5,0(r17)
   45810:	d9000017 	ldw	r4,0(sp)
   45814:	183ee83a 	callr	r3
   45818:	a0800117 	ldw	r2,4(r20)
   4581c:	15bfbf1e 	bne	r2,r22,4571c <__alt_data_end+0xfffc571c>
   45820:	98800017 	ldw	r2,0(r19)
   45824:	153fcf26 	beq	r2,r20,45764 <__alt_data_end+0xfffc5764>
   45828:	003fbc06 	br	4571c <__alt_data_end+0xfffc571c>
   4582c:	183ee83a 	callr	r3
   45830:	003ff906 	br	45818 <__alt_data_end+0xfffc5818>
   45834:	a5c00115 	stw	r23,4(r20)
   45838:	003feb06 	br	457e8 <__alt_data_end+0xfffc57e8>
   4583c:	89000017 	ldw	r4,0(r17)
   45840:	183ee83a 	callr	r3
   45844:	003ff406 	br	45818 <__alt_data_end+0xfffc5818>
   45848:	a0800017 	ldw	r2,0(r20)
   4584c:	a027883a 	mov	r19,r20
   45850:	1029883a 	mov	r20,r2
   45854:	003fb606 	br	45730 <__alt_data_end+0xfffc5730>
   45858:	0005883a 	mov	r2,zero
   4585c:	003ffb06 	br	4584c <__alt_data_end+0xfffc584c>

00045860 <quorem>:
   45860:	defff704 	addi	sp,sp,-36
   45864:	dc800215 	stw	r18,8(sp)
   45868:	20800417 	ldw	r2,16(r4)
   4586c:	2c800417 	ldw	r18,16(r5)
   45870:	dfc00815 	stw	ra,32(sp)
   45874:	ddc00715 	stw	r23,28(sp)
   45878:	dd800615 	stw	r22,24(sp)
   4587c:	dd400515 	stw	r21,20(sp)
   45880:	dd000415 	stw	r20,16(sp)
   45884:	dcc00315 	stw	r19,12(sp)
   45888:	dc400115 	stw	r17,4(sp)
   4588c:	dc000015 	stw	r16,0(sp)
   45890:	14807116 	blt	r2,r18,45a58 <quorem+0x1f8>
   45894:	94bfffc4 	addi	r18,r18,-1
   45898:	94ad883a 	add	r22,r18,r18
   4589c:	b5ad883a 	add	r22,r22,r22
   458a0:	2c400504 	addi	r17,r5,20
   458a4:	8da9883a 	add	r20,r17,r22
   458a8:	25400504 	addi	r21,r4,20
   458ac:	282f883a 	mov	r23,r5
   458b0:	adad883a 	add	r22,r21,r22
   458b4:	a1400017 	ldw	r5,0(r20)
   458b8:	2021883a 	mov	r16,r4
   458bc:	b1000017 	ldw	r4,0(r22)
   458c0:	29400044 	addi	r5,r5,1
   458c4:	004d2300 	call	4d230 <__udivsi3>
   458c8:	1027883a 	mov	r19,r2
   458cc:	10002c26 	beq	r2,zero,45980 <quorem+0x120>
   458d0:	a813883a 	mov	r9,r21
   458d4:	880b883a 	mov	r5,r17
   458d8:	0009883a 	mov	r4,zero
   458dc:	000d883a 	mov	r6,zero
   458e0:	2a000017 	ldw	r8,0(r5)
   458e4:	49c00017 	ldw	r7,0(r9)
   458e8:	29400104 	addi	r5,r5,4
   458ec:	40bfffcc 	andi	r2,r8,65535
   458f0:	14c5383a 	mul	r2,r2,r19
   458f4:	4010d43a 	srli	r8,r8,16
   458f8:	38ffffcc 	andi	r3,r7,65535
   458fc:	1105883a 	add	r2,r2,r4
   45900:	1008d43a 	srli	r4,r2,16
   45904:	44d1383a 	mul	r8,r8,r19
   45908:	198d883a 	add	r6,r3,r6
   4590c:	10ffffcc 	andi	r3,r2,65535
   45910:	30c7c83a 	sub	r3,r6,r3
   45914:	380ed43a 	srli	r7,r7,16
   45918:	4105883a 	add	r2,r8,r4
   4591c:	180dd43a 	srai	r6,r3,16
   45920:	113fffcc 	andi	r4,r2,65535
   45924:	390fc83a 	sub	r7,r7,r4
   45928:	398d883a 	add	r6,r7,r6
   4592c:	300e943a 	slli	r7,r6,16
   45930:	18ffffcc 	andi	r3,r3,65535
   45934:	1008d43a 	srli	r4,r2,16
   45938:	38ceb03a 	or	r7,r7,r3
   4593c:	49c00015 	stw	r7,0(r9)
   45940:	300dd43a 	srai	r6,r6,16
   45944:	4a400104 	addi	r9,r9,4
   45948:	a17fe52e 	bgeu	r20,r5,458e0 <__alt_data_end+0xfffc58e0>
   4594c:	b0800017 	ldw	r2,0(r22)
   45950:	10000b1e 	bne	r2,zero,45980 <quorem+0x120>
   45954:	b0bfff04 	addi	r2,r22,-4
   45958:	a880082e 	bgeu	r21,r2,4597c <quorem+0x11c>
   4595c:	b0ffff17 	ldw	r3,-4(r22)
   45960:	18000326 	beq	r3,zero,45970 <quorem+0x110>
   45964:	00000506 	br	4597c <quorem+0x11c>
   45968:	10c00017 	ldw	r3,0(r2)
   4596c:	1800031e 	bne	r3,zero,4597c <quorem+0x11c>
   45970:	10bfff04 	addi	r2,r2,-4
   45974:	94bfffc4 	addi	r18,r18,-1
   45978:	a8bffb36 	bltu	r21,r2,45968 <__alt_data_end+0xfffc5968>
   4597c:	84800415 	stw	r18,16(r16)
   45980:	b80b883a 	mov	r5,r23
   45984:	8009883a 	mov	r4,r16
   45988:	00492640 	call	49264 <__mcmp>
   4598c:	10002616 	blt	r2,zero,45a28 <quorem+0x1c8>
   45990:	9cc00044 	addi	r19,r19,1
   45994:	a805883a 	mov	r2,r21
   45998:	000b883a 	mov	r5,zero
   4599c:	11000017 	ldw	r4,0(r2)
   459a0:	89800017 	ldw	r6,0(r17)
   459a4:	10800104 	addi	r2,r2,4
   459a8:	20ffffcc 	andi	r3,r4,65535
   459ac:	194b883a 	add	r5,r3,r5
   459b0:	30ffffcc 	andi	r3,r6,65535
   459b4:	28c7c83a 	sub	r3,r5,r3
   459b8:	300cd43a 	srli	r6,r6,16
   459bc:	2008d43a 	srli	r4,r4,16
   459c0:	180bd43a 	srai	r5,r3,16
   459c4:	18ffffcc 	andi	r3,r3,65535
   459c8:	2189c83a 	sub	r4,r4,r6
   459cc:	2149883a 	add	r4,r4,r5
   459d0:	200c943a 	slli	r6,r4,16
   459d4:	8c400104 	addi	r17,r17,4
   459d8:	200bd43a 	srai	r5,r4,16
   459dc:	30c6b03a 	or	r3,r6,r3
   459e0:	10ffff15 	stw	r3,-4(r2)
   459e4:	a47fed2e 	bgeu	r20,r17,4599c <__alt_data_end+0xfffc599c>
   459e8:	9485883a 	add	r2,r18,r18
   459ec:	1085883a 	add	r2,r2,r2
   459f0:	a887883a 	add	r3,r21,r2
   459f4:	18800017 	ldw	r2,0(r3)
   459f8:	10000b1e 	bne	r2,zero,45a28 <quorem+0x1c8>
   459fc:	18bfff04 	addi	r2,r3,-4
   45a00:	a880082e 	bgeu	r21,r2,45a24 <quorem+0x1c4>
   45a04:	18ffff17 	ldw	r3,-4(r3)
   45a08:	18000326 	beq	r3,zero,45a18 <quorem+0x1b8>
   45a0c:	00000506 	br	45a24 <quorem+0x1c4>
   45a10:	10c00017 	ldw	r3,0(r2)
   45a14:	1800031e 	bne	r3,zero,45a24 <quorem+0x1c4>
   45a18:	10bfff04 	addi	r2,r2,-4
   45a1c:	94bfffc4 	addi	r18,r18,-1
   45a20:	a8bffb36 	bltu	r21,r2,45a10 <__alt_data_end+0xfffc5a10>
   45a24:	84800415 	stw	r18,16(r16)
   45a28:	9805883a 	mov	r2,r19
   45a2c:	dfc00817 	ldw	ra,32(sp)
   45a30:	ddc00717 	ldw	r23,28(sp)
   45a34:	dd800617 	ldw	r22,24(sp)
   45a38:	dd400517 	ldw	r21,20(sp)
   45a3c:	dd000417 	ldw	r20,16(sp)
   45a40:	dcc00317 	ldw	r19,12(sp)
   45a44:	dc800217 	ldw	r18,8(sp)
   45a48:	dc400117 	ldw	r17,4(sp)
   45a4c:	dc000017 	ldw	r16,0(sp)
   45a50:	dec00904 	addi	sp,sp,36
   45a54:	f800283a 	ret
   45a58:	0005883a 	mov	r2,zero
   45a5c:	003ff306 	br	45a2c <__alt_data_end+0xfffc5a2c>

00045a60 <_dtoa_r>:
   45a60:	20801017 	ldw	r2,64(r4)
   45a64:	deffde04 	addi	sp,sp,-136
   45a68:	df002015 	stw	fp,128(sp)
   45a6c:	dcc01b15 	stw	r19,108(sp)
   45a70:	dc801a15 	stw	r18,104(sp)
   45a74:	dc401915 	stw	r17,100(sp)
   45a78:	dc001815 	stw	r16,96(sp)
   45a7c:	dfc02115 	stw	ra,132(sp)
   45a80:	ddc01f15 	stw	r23,124(sp)
   45a84:	dd801e15 	stw	r22,120(sp)
   45a88:	dd401d15 	stw	r21,116(sp)
   45a8c:	dd001c15 	stw	r20,112(sp)
   45a90:	d9c00315 	stw	r7,12(sp)
   45a94:	2039883a 	mov	fp,r4
   45a98:	3023883a 	mov	r17,r6
   45a9c:	2825883a 	mov	r18,r5
   45aa0:	dc002417 	ldw	r16,144(sp)
   45aa4:	3027883a 	mov	r19,r6
   45aa8:	10000826 	beq	r2,zero,45acc <_dtoa_r+0x6c>
   45aac:	21801117 	ldw	r6,68(r4)
   45ab0:	00c00044 	movi	r3,1
   45ab4:	100b883a 	mov	r5,r2
   45ab8:	1986983a 	sll	r3,r3,r6
   45abc:	11800115 	stw	r6,4(r2)
   45ac0:	10c00215 	stw	r3,8(r2)
   45ac4:	0048a440 	call	48a44 <_Bfree>
   45ac8:	e0001015 	stw	zero,64(fp)
   45acc:	88002e16 	blt	r17,zero,45b88 <_dtoa_r+0x128>
   45ad0:	80000015 	stw	zero,0(r16)
   45ad4:	889ffc2c 	andhi	r2,r17,32752
   45ad8:	00dffc34 	movhi	r3,32752
   45adc:	10c01c26 	beq	r2,r3,45b50 <_dtoa_r+0xf0>
   45ae0:	000d883a 	mov	r6,zero
   45ae4:	000f883a 	mov	r7,zero
   45ae8:	9009883a 	mov	r4,r18
   45aec:	980b883a 	mov	r5,r19
   45af0:	004e4800 	call	4e480 <__eqdf2>
   45af4:	10002b1e 	bne	r2,zero,45ba4 <_dtoa_r+0x144>
   45af8:	d9c02317 	ldw	r7,140(sp)
   45afc:	00800044 	movi	r2,1
   45b00:	38800015 	stw	r2,0(r7)
   45b04:	d8802517 	ldw	r2,148(sp)
   45b08:	10019e26 	beq	r2,zero,46184 <_dtoa_r+0x724>
   45b0c:	d8c02517 	ldw	r3,148(sp)
   45b10:	00800174 	movhi	r2,5
   45b14:	1080d244 	addi	r2,r2,841
   45b18:	18800015 	stw	r2,0(r3)
   45b1c:	10bfffc4 	addi	r2,r2,-1
   45b20:	dfc02117 	ldw	ra,132(sp)
   45b24:	df002017 	ldw	fp,128(sp)
   45b28:	ddc01f17 	ldw	r23,124(sp)
   45b2c:	dd801e17 	ldw	r22,120(sp)
   45b30:	dd401d17 	ldw	r21,116(sp)
   45b34:	dd001c17 	ldw	r20,112(sp)
   45b38:	dcc01b17 	ldw	r19,108(sp)
   45b3c:	dc801a17 	ldw	r18,104(sp)
   45b40:	dc401917 	ldw	r17,100(sp)
   45b44:	dc001817 	ldw	r16,96(sp)
   45b48:	dec02204 	addi	sp,sp,136
   45b4c:	f800283a 	ret
   45b50:	d8c02317 	ldw	r3,140(sp)
   45b54:	0089c3c4 	movi	r2,9999
   45b58:	18800015 	stw	r2,0(r3)
   45b5c:	90017726 	beq	r18,zero,4613c <_dtoa_r+0x6dc>
   45b60:	00800174 	movhi	r2,5
   45b64:	1080de04 	addi	r2,r2,888
   45b68:	d9002517 	ldw	r4,148(sp)
   45b6c:	203fec26 	beq	r4,zero,45b20 <__alt_data_end+0xfffc5b20>
   45b70:	10c000c7 	ldb	r3,3(r2)
   45b74:	1801781e 	bne	r3,zero,46158 <_dtoa_r+0x6f8>
   45b78:	10c000c4 	addi	r3,r2,3
   45b7c:	d9802517 	ldw	r6,148(sp)
   45b80:	30c00015 	stw	r3,0(r6)
   45b84:	003fe606 	br	45b20 <__alt_data_end+0xfffc5b20>
   45b88:	04e00034 	movhi	r19,32768
   45b8c:	9cffffc4 	addi	r19,r19,-1
   45b90:	00800044 	movi	r2,1
   45b94:	8ce6703a 	and	r19,r17,r19
   45b98:	80800015 	stw	r2,0(r16)
   45b9c:	9823883a 	mov	r17,r19
   45ba0:	003fcc06 	br	45ad4 <__alt_data_end+0xfffc5ad4>
   45ba4:	d8800204 	addi	r2,sp,8
   45ba8:	d8800015 	stw	r2,0(sp)
   45bac:	d9c00104 	addi	r7,sp,4
   45bb0:	900b883a 	mov	r5,r18
   45bb4:	980d883a 	mov	r6,r19
   45bb8:	e009883a 	mov	r4,fp
   45bbc:	8820d53a 	srli	r16,r17,20
   45bc0:	00496300 	call	49630 <__d2b>
   45bc4:	d8800915 	stw	r2,36(sp)
   45bc8:	8001651e 	bne	r16,zero,46160 <_dtoa_r+0x700>
   45bcc:	dd800217 	ldw	r22,8(sp)
   45bd0:	dc000117 	ldw	r16,4(sp)
   45bd4:	00800804 	movi	r2,32
   45bd8:	b421883a 	add	r16,r22,r16
   45bdc:	80c10c84 	addi	r3,r16,1074
   45be0:	10c2d10e 	bge	r2,r3,46728 <_dtoa_r+0xcc8>
   45be4:	00801004 	movi	r2,64
   45be8:	81010484 	addi	r4,r16,1042
   45bec:	10c7c83a 	sub	r3,r2,r3
   45bf0:	9108d83a 	srl	r4,r18,r4
   45bf4:	88e2983a 	sll	r17,r17,r3
   45bf8:	2448b03a 	or	r4,r4,r17
   45bfc:	004f8480 	call	4f848 <__floatunsidf>
   45c00:	017f8434 	movhi	r5,65040
   45c04:	01800044 	movi	r6,1
   45c08:	1009883a 	mov	r4,r2
   45c0c:	194b883a 	add	r5,r3,r5
   45c10:	843fffc4 	addi	r16,r16,-1
   45c14:	d9801115 	stw	r6,68(sp)
   45c18:	000d883a 	mov	r6,zero
   45c1c:	01cffe34 	movhi	r7,16376
   45c20:	004edf00 	call	4edf0 <__subdf3>
   45c24:	0198dbf4 	movhi	r6,25455
   45c28:	01cff4f4 	movhi	r7,16339
   45c2c:	3190d844 	addi	r6,r6,17249
   45c30:	39e1e9c4 	addi	r7,r7,-30809
   45c34:	1009883a 	mov	r4,r2
   45c38:	180b883a 	mov	r5,r3
   45c3c:	004e6d80 	call	4e6d8 <__muldf3>
   45c40:	01a2d874 	movhi	r6,35681
   45c44:	01cff1f4 	movhi	r7,16327
   45c48:	31b22cc4 	addi	r6,r6,-14157
   45c4c:	39e28a04 	addi	r7,r7,-30168
   45c50:	180b883a 	mov	r5,r3
   45c54:	1009883a 	mov	r4,r2
   45c58:	004d2ec0 	call	4d2ec <__adddf3>
   45c5c:	8009883a 	mov	r4,r16
   45c60:	1029883a 	mov	r20,r2
   45c64:	1823883a 	mov	r17,r3
   45c68:	004f76c0 	call	4f76c <__floatsidf>
   45c6c:	019427f4 	movhi	r6,20639
   45c70:	01cff4f4 	movhi	r7,16339
   45c74:	319e7ec4 	addi	r6,r6,31227
   45c78:	39d104c4 	addi	r7,r7,17427
   45c7c:	1009883a 	mov	r4,r2
   45c80:	180b883a 	mov	r5,r3
   45c84:	004e6d80 	call	4e6d8 <__muldf3>
   45c88:	100d883a 	mov	r6,r2
   45c8c:	180f883a 	mov	r7,r3
   45c90:	a009883a 	mov	r4,r20
   45c94:	880b883a 	mov	r5,r17
   45c98:	004d2ec0 	call	4d2ec <__adddf3>
   45c9c:	1009883a 	mov	r4,r2
   45ca0:	180b883a 	mov	r5,r3
   45ca4:	1029883a 	mov	r20,r2
   45ca8:	1823883a 	mov	r17,r3
   45cac:	004f6ec0 	call	4f6ec <__fixdfsi>
   45cb0:	000d883a 	mov	r6,zero
   45cb4:	000f883a 	mov	r7,zero
   45cb8:	a009883a 	mov	r4,r20
   45cbc:	880b883a 	mov	r5,r17
   45cc0:	d8800515 	stw	r2,20(sp)
   45cc4:	004e5e40 	call	4e5e4 <__ledf2>
   45cc8:	10028716 	blt	r2,zero,466e8 <_dtoa_r+0xc88>
   45ccc:	d8c00517 	ldw	r3,20(sp)
   45cd0:	00800584 	movi	r2,22
   45cd4:	10c27536 	bltu	r2,r3,466ac <_dtoa_r+0xc4c>
   45cd8:	180490fa 	slli	r2,r3,3
   45cdc:	00c00174 	movhi	r3,5
   45ce0:	18c0f904 	addi	r3,r3,996
   45ce4:	1885883a 	add	r2,r3,r2
   45ce8:	11000017 	ldw	r4,0(r2)
   45cec:	11400117 	ldw	r5,4(r2)
   45cf0:	900d883a 	mov	r6,r18
   45cf4:	980f883a 	mov	r7,r19
   45cf8:	004e5080 	call	4e508 <__gedf2>
   45cfc:	00828d0e 	bge	zero,r2,46734 <_dtoa_r+0xcd4>
   45d00:	d9000517 	ldw	r4,20(sp)
   45d04:	d8000e15 	stw	zero,56(sp)
   45d08:	213fffc4 	addi	r4,r4,-1
   45d0c:	d9000515 	stw	r4,20(sp)
   45d10:	b42dc83a 	sub	r22,r22,r16
   45d14:	b5bfffc4 	addi	r22,r22,-1
   45d18:	b0026f16 	blt	r22,zero,466d8 <_dtoa_r+0xc78>
   45d1c:	d8000815 	stw	zero,32(sp)
   45d20:	d9c00517 	ldw	r7,20(sp)
   45d24:	38026416 	blt	r7,zero,466b8 <_dtoa_r+0xc58>
   45d28:	b1ed883a 	add	r22,r22,r7
   45d2c:	d9c00d15 	stw	r7,52(sp)
   45d30:	d8000a15 	stw	zero,40(sp)
   45d34:	d9800317 	ldw	r6,12(sp)
   45d38:	00800244 	movi	r2,9
   45d3c:	11811436 	bltu	r2,r6,46190 <_dtoa_r+0x730>
   45d40:	00800144 	movi	r2,5
   45d44:	1184e10e 	bge	r2,r6,470cc <_dtoa_r+0x166c>
   45d48:	31bfff04 	addi	r6,r6,-4
   45d4c:	d9800315 	stw	r6,12(sp)
   45d50:	0023883a 	mov	r17,zero
   45d54:	d9800317 	ldw	r6,12(sp)
   45d58:	008000c4 	movi	r2,3
   45d5c:	30836726 	beq	r6,r2,46afc <_dtoa_r+0x109c>
   45d60:	1183410e 	bge	r2,r6,46a68 <_dtoa_r+0x1008>
   45d64:	d9c00317 	ldw	r7,12(sp)
   45d68:	00800104 	movi	r2,4
   45d6c:	38827c26 	beq	r7,r2,46760 <_dtoa_r+0xd00>
   45d70:	00800144 	movi	r2,5
   45d74:	3884c41e 	bne	r7,r2,47088 <_dtoa_r+0x1628>
   45d78:	00800044 	movi	r2,1
   45d7c:	d8800b15 	stw	r2,44(sp)
   45d80:	d8c00517 	ldw	r3,20(sp)
   45d84:	d9002217 	ldw	r4,136(sp)
   45d88:	1907883a 	add	r3,r3,r4
   45d8c:	19800044 	addi	r6,r3,1
   45d90:	d8c00c15 	stw	r3,48(sp)
   45d94:	d9800615 	stw	r6,24(sp)
   45d98:	0183a40e 	bge	zero,r6,46c2c <_dtoa_r+0x11cc>
   45d9c:	d9800617 	ldw	r6,24(sp)
   45da0:	3021883a 	mov	r16,r6
   45da4:	e0001115 	stw	zero,68(fp)
   45da8:	008005c4 	movi	r2,23
   45dac:	1184c92e 	bgeu	r2,r6,470d4 <_dtoa_r+0x1674>
   45db0:	00c00044 	movi	r3,1
   45db4:	00800104 	movi	r2,4
   45db8:	1085883a 	add	r2,r2,r2
   45dbc:	11000504 	addi	r4,r2,20
   45dc0:	180b883a 	mov	r5,r3
   45dc4:	18c00044 	addi	r3,r3,1
   45dc8:	313ffb2e 	bgeu	r6,r4,45db8 <__alt_data_end+0xfffc5db8>
   45dcc:	e1401115 	stw	r5,68(fp)
   45dd0:	e009883a 	mov	r4,fp
   45dd4:	004899c0 	call	4899c <_Balloc>
   45dd8:	d8800715 	stw	r2,28(sp)
   45ddc:	e0801015 	stw	r2,64(fp)
   45de0:	00800384 	movi	r2,14
   45de4:	1400f736 	bltu	r2,r16,461c4 <_dtoa_r+0x764>
   45de8:	8800f626 	beq	r17,zero,461c4 <_dtoa_r+0x764>
   45dec:	d9c00517 	ldw	r7,20(sp)
   45df0:	01c39a0e 	bge	zero,r7,46c5c <_dtoa_r+0x11fc>
   45df4:	388003cc 	andi	r2,r7,15
   45df8:	100490fa 	slli	r2,r2,3
   45dfc:	382bd13a 	srai	r21,r7,4
   45e00:	00c00174 	movhi	r3,5
   45e04:	18c0f904 	addi	r3,r3,996
   45e08:	1885883a 	add	r2,r3,r2
   45e0c:	a8c0040c 	andi	r3,r21,16
   45e10:	12400017 	ldw	r9,0(r2)
   45e14:	12000117 	ldw	r8,4(r2)
   45e18:	18037926 	beq	r3,zero,46c00 <_dtoa_r+0x11a0>
   45e1c:	00800174 	movhi	r2,5
   45e20:	1080ef04 	addi	r2,r2,956
   45e24:	11800817 	ldw	r6,32(r2)
   45e28:	11c00917 	ldw	r7,36(r2)
   45e2c:	9009883a 	mov	r4,r18
   45e30:	980b883a 	mov	r5,r19
   45e34:	da001715 	stw	r8,92(sp)
   45e38:	da401615 	stw	r9,88(sp)
   45e3c:	004db980 	call	4db98 <__divdf3>
   45e40:	da001717 	ldw	r8,92(sp)
   45e44:	da401617 	ldw	r9,88(sp)
   45e48:	ad4003cc 	andi	r21,r21,15
   45e4c:	040000c4 	movi	r16,3
   45e50:	1023883a 	mov	r17,r2
   45e54:	1829883a 	mov	r20,r3
   45e58:	a8001126 	beq	r21,zero,45ea0 <_dtoa_r+0x440>
   45e5c:	05c00174 	movhi	r23,5
   45e60:	bdc0ef04 	addi	r23,r23,956
   45e64:	4805883a 	mov	r2,r9
   45e68:	4007883a 	mov	r3,r8
   45e6c:	a980004c 	andi	r6,r21,1
   45e70:	1009883a 	mov	r4,r2
   45e74:	a82bd07a 	srai	r21,r21,1
   45e78:	180b883a 	mov	r5,r3
   45e7c:	30000426 	beq	r6,zero,45e90 <_dtoa_r+0x430>
   45e80:	b9800017 	ldw	r6,0(r23)
   45e84:	b9c00117 	ldw	r7,4(r23)
   45e88:	84000044 	addi	r16,r16,1
   45e8c:	004e6d80 	call	4e6d8 <__muldf3>
   45e90:	bdc00204 	addi	r23,r23,8
   45e94:	a83ff51e 	bne	r21,zero,45e6c <__alt_data_end+0xfffc5e6c>
   45e98:	1013883a 	mov	r9,r2
   45e9c:	1811883a 	mov	r8,r3
   45ea0:	480d883a 	mov	r6,r9
   45ea4:	400f883a 	mov	r7,r8
   45ea8:	8809883a 	mov	r4,r17
   45eac:	a00b883a 	mov	r5,r20
   45eb0:	004db980 	call	4db98 <__divdf3>
   45eb4:	d8800f15 	stw	r2,60(sp)
   45eb8:	d8c01015 	stw	r3,64(sp)
   45ebc:	d8c00e17 	ldw	r3,56(sp)
   45ec0:	18000626 	beq	r3,zero,45edc <_dtoa_r+0x47c>
   45ec4:	d9000f17 	ldw	r4,60(sp)
   45ec8:	d9401017 	ldw	r5,64(sp)
   45ecc:	000d883a 	mov	r6,zero
   45ed0:	01cffc34 	movhi	r7,16368
   45ed4:	004e5e40 	call	4e5e4 <__ledf2>
   45ed8:	10040b16 	blt	r2,zero,46f08 <_dtoa_r+0x14a8>
   45edc:	8009883a 	mov	r4,r16
   45ee0:	004f76c0 	call	4f76c <__floatsidf>
   45ee4:	d9800f17 	ldw	r6,60(sp)
   45ee8:	d9c01017 	ldw	r7,64(sp)
   45eec:	1009883a 	mov	r4,r2
   45ef0:	180b883a 	mov	r5,r3
   45ef4:	004e6d80 	call	4e6d8 <__muldf3>
   45ef8:	000d883a 	mov	r6,zero
   45efc:	01d00734 	movhi	r7,16412
   45f00:	1009883a 	mov	r4,r2
   45f04:	180b883a 	mov	r5,r3
   45f08:	004d2ec0 	call	4d2ec <__adddf3>
   45f0c:	1021883a 	mov	r16,r2
   45f10:	d8800617 	ldw	r2,24(sp)
   45f14:	047f3034 	movhi	r17,64704
   45f18:	1c63883a 	add	r17,r3,r17
   45f1c:	10031826 	beq	r2,zero,46b80 <_dtoa_r+0x1120>
   45f20:	d8c00517 	ldw	r3,20(sp)
   45f24:	db000617 	ldw	r12,24(sp)
   45f28:	d8c01315 	stw	r3,76(sp)
   45f2c:	d9000b17 	ldw	r4,44(sp)
   45f30:	20038f26 	beq	r4,zero,46d70 <_dtoa_r+0x1310>
   45f34:	60bfffc4 	addi	r2,r12,-1
   45f38:	100490fa 	slli	r2,r2,3
   45f3c:	00c00174 	movhi	r3,5
   45f40:	18c0f904 	addi	r3,r3,996
   45f44:	1885883a 	add	r2,r3,r2
   45f48:	11800017 	ldw	r6,0(r2)
   45f4c:	11c00117 	ldw	r7,4(r2)
   45f50:	d8800717 	ldw	r2,28(sp)
   45f54:	0009883a 	mov	r4,zero
   45f58:	014ff834 	movhi	r5,16352
   45f5c:	db001615 	stw	r12,88(sp)
   45f60:	15c00044 	addi	r23,r2,1
   45f64:	004db980 	call	4db98 <__divdf3>
   45f68:	800d883a 	mov	r6,r16
   45f6c:	880f883a 	mov	r7,r17
   45f70:	1009883a 	mov	r4,r2
   45f74:	180b883a 	mov	r5,r3
   45f78:	004edf00 	call	4edf0 <__subdf3>
   45f7c:	d9401017 	ldw	r5,64(sp)
   45f80:	d9000f17 	ldw	r4,60(sp)
   45f84:	102b883a 	mov	r21,r2
   45f88:	d8c01215 	stw	r3,72(sp)
   45f8c:	004f6ec0 	call	4f6ec <__fixdfsi>
   45f90:	1009883a 	mov	r4,r2
   45f94:	1029883a 	mov	r20,r2
   45f98:	004f76c0 	call	4f76c <__floatsidf>
   45f9c:	d9000f17 	ldw	r4,60(sp)
   45fa0:	d9401017 	ldw	r5,64(sp)
   45fa4:	100d883a 	mov	r6,r2
   45fa8:	180f883a 	mov	r7,r3
   45fac:	004edf00 	call	4edf0 <__subdf3>
   45fb0:	1823883a 	mov	r17,r3
   45fb4:	d8c00717 	ldw	r3,28(sp)
   45fb8:	d9401217 	ldw	r5,72(sp)
   45fbc:	a2000c04 	addi	r8,r20,48
   45fc0:	1021883a 	mov	r16,r2
   45fc4:	1a000005 	stb	r8,0(r3)
   45fc8:	800d883a 	mov	r6,r16
   45fcc:	880f883a 	mov	r7,r17
   45fd0:	a809883a 	mov	r4,r21
   45fd4:	4029883a 	mov	r20,r8
   45fd8:	004e5080 	call	4e508 <__gedf2>
   45fdc:	00841d16 	blt	zero,r2,47054 <_dtoa_r+0x15f4>
   45fe0:	800d883a 	mov	r6,r16
   45fe4:	880f883a 	mov	r7,r17
   45fe8:	0009883a 	mov	r4,zero
   45fec:	014ffc34 	movhi	r5,16368
   45ff0:	004edf00 	call	4edf0 <__subdf3>
   45ff4:	d9401217 	ldw	r5,72(sp)
   45ff8:	100d883a 	mov	r6,r2
   45ffc:	180f883a 	mov	r7,r3
   46000:	a809883a 	mov	r4,r21
   46004:	004e5080 	call	4e508 <__gedf2>
   46008:	db001617 	ldw	r12,88(sp)
   4600c:	00840e16 	blt	zero,r2,47048 <_dtoa_r+0x15e8>
   46010:	00800044 	movi	r2,1
   46014:	13006b0e 	bge	r2,r12,461c4 <_dtoa_r+0x764>
   46018:	d9000717 	ldw	r4,28(sp)
   4601c:	dd800f15 	stw	r22,60(sp)
   46020:	dcc01015 	stw	r19,64(sp)
   46024:	2319883a 	add	r12,r4,r12
   46028:	dcc01217 	ldw	r19,72(sp)
   4602c:	602d883a 	mov	r22,r12
   46030:	dc801215 	stw	r18,72(sp)
   46034:	b825883a 	mov	r18,r23
   46038:	00000906 	br	46060 <_dtoa_r+0x600>
   4603c:	004edf00 	call	4edf0 <__subdf3>
   46040:	a80d883a 	mov	r6,r21
   46044:	980f883a 	mov	r7,r19
   46048:	1009883a 	mov	r4,r2
   4604c:	180b883a 	mov	r5,r3
   46050:	004e5e40 	call	4e5e4 <__ledf2>
   46054:	1003e816 	blt	r2,zero,46ff8 <_dtoa_r+0x1598>
   46058:	b825883a 	mov	r18,r23
   4605c:	bd83e926 	beq	r23,r22,47004 <_dtoa_r+0x15a4>
   46060:	a809883a 	mov	r4,r21
   46064:	980b883a 	mov	r5,r19
   46068:	000d883a 	mov	r6,zero
   4606c:	01d00934 	movhi	r7,16420
   46070:	004e6d80 	call	4e6d8 <__muldf3>
   46074:	000d883a 	mov	r6,zero
   46078:	01d00934 	movhi	r7,16420
   4607c:	8009883a 	mov	r4,r16
   46080:	880b883a 	mov	r5,r17
   46084:	102b883a 	mov	r21,r2
   46088:	1827883a 	mov	r19,r3
   4608c:	004e6d80 	call	4e6d8 <__muldf3>
   46090:	180b883a 	mov	r5,r3
   46094:	1009883a 	mov	r4,r2
   46098:	1821883a 	mov	r16,r3
   4609c:	1023883a 	mov	r17,r2
   460a0:	004f6ec0 	call	4f6ec <__fixdfsi>
   460a4:	1009883a 	mov	r4,r2
   460a8:	1029883a 	mov	r20,r2
   460ac:	004f76c0 	call	4f76c <__floatsidf>
   460b0:	8809883a 	mov	r4,r17
   460b4:	800b883a 	mov	r5,r16
   460b8:	100d883a 	mov	r6,r2
   460bc:	180f883a 	mov	r7,r3
   460c0:	004edf00 	call	4edf0 <__subdf3>
   460c4:	a5000c04 	addi	r20,r20,48
   460c8:	a80d883a 	mov	r6,r21
   460cc:	980f883a 	mov	r7,r19
   460d0:	1009883a 	mov	r4,r2
   460d4:	180b883a 	mov	r5,r3
   460d8:	95000005 	stb	r20,0(r18)
   460dc:	1021883a 	mov	r16,r2
   460e0:	1823883a 	mov	r17,r3
   460e4:	004e5e40 	call	4e5e4 <__ledf2>
   460e8:	bdc00044 	addi	r23,r23,1
   460ec:	800d883a 	mov	r6,r16
   460f0:	880f883a 	mov	r7,r17
   460f4:	0009883a 	mov	r4,zero
   460f8:	014ffc34 	movhi	r5,16368
   460fc:	103fcf0e 	bge	r2,zero,4603c <__alt_data_end+0xfffc603c>
   46100:	d8c01317 	ldw	r3,76(sp)
   46104:	d8c00515 	stw	r3,20(sp)
   46108:	d9400917 	ldw	r5,36(sp)
   4610c:	e009883a 	mov	r4,fp
   46110:	0048a440 	call	48a44 <_Bfree>
   46114:	d9000517 	ldw	r4,20(sp)
   46118:	d9802317 	ldw	r6,140(sp)
   4611c:	d9c02517 	ldw	r7,148(sp)
   46120:	b8000005 	stb	zero,0(r23)
   46124:	20800044 	addi	r2,r4,1
   46128:	30800015 	stw	r2,0(r6)
   4612c:	3802aa26 	beq	r7,zero,46bd8 <_dtoa_r+0x1178>
   46130:	3dc00015 	stw	r23,0(r7)
   46134:	d8800717 	ldw	r2,28(sp)
   46138:	003e7906 	br	45b20 <__alt_data_end+0xfffc5b20>
   4613c:	00800434 	movhi	r2,16
   46140:	10bfffc4 	addi	r2,r2,-1
   46144:	88a2703a 	and	r17,r17,r2
   46148:	883e851e 	bne	r17,zero,45b60 <__alt_data_end+0xfffc5b60>
   4614c:	00800174 	movhi	r2,5
   46150:	1080db04 	addi	r2,r2,876
   46154:	003e8406 	br	45b68 <__alt_data_end+0xfffc5b68>
   46158:	10c00204 	addi	r3,r2,8
   4615c:	003e8706 	br	45b7c <__alt_data_end+0xfffc5b7c>
   46160:	01400434 	movhi	r5,16
   46164:	297fffc4 	addi	r5,r5,-1
   46168:	994a703a 	and	r5,r19,r5
   4616c:	9009883a 	mov	r4,r18
   46170:	843f0044 	addi	r16,r16,-1023
   46174:	294ffc34 	orhi	r5,r5,16368
   46178:	dd800217 	ldw	r22,8(sp)
   4617c:	d8001115 	stw	zero,68(sp)
   46180:	003ea506 	br	45c18 <__alt_data_end+0xfffc5c18>
   46184:	00800174 	movhi	r2,5
   46188:	1080d204 	addi	r2,r2,840
   4618c:	003e6406 	br	45b20 <__alt_data_end+0xfffc5b20>
   46190:	e0001115 	stw	zero,68(fp)
   46194:	000b883a 	mov	r5,zero
   46198:	e009883a 	mov	r4,fp
   4619c:	004899c0 	call	4899c <_Balloc>
   461a0:	01bfffc4 	movi	r6,-1
   461a4:	01c00044 	movi	r7,1
   461a8:	d8800715 	stw	r2,28(sp)
   461ac:	d9800c15 	stw	r6,48(sp)
   461b0:	e0801015 	stw	r2,64(fp)
   461b4:	d8000315 	stw	zero,12(sp)
   461b8:	d9c00b15 	stw	r7,44(sp)
   461bc:	d9800615 	stw	r6,24(sp)
   461c0:	d8002215 	stw	zero,136(sp)
   461c4:	d8800117 	ldw	r2,4(sp)
   461c8:	10008916 	blt	r2,zero,463f0 <_dtoa_r+0x990>
   461cc:	d9000517 	ldw	r4,20(sp)
   461d0:	00c00384 	movi	r3,14
   461d4:	19008616 	blt	r3,r4,463f0 <_dtoa_r+0x990>
   461d8:	200490fa 	slli	r2,r4,3
   461dc:	00c00174 	movhi	r3,5
   461e0:	d9802217 	ldw	r6,136(sp)
   461e4:	18c0f904 	addi	r3,r3,996
   461e8:	1885883a 	add	r2,r3,r2
   461ec:	14000017 	ldw	r16,0(r2)
   461f0:	14400117 	ldw	r17,4(r2)
   461f4:	30016316 	blt	r6,zero,46784 <_dtoa_r+0xd24>
   461f8:	800d883a 	mov	r6,r16
   461fc:	880f883a 	mov	r7,r17
   46200:	9009883a 	mov	r4,r18
   46204:	980b883a 	mov	r5,r19
   46208:	004db980 	call	4db98 <__divdf3>
   4620c:	180b883a 	mov	r5,r3
   46210:	1009883a 	mov	r4,r2
   46214:	004f6ec0 	call	4f6ec <__fixdfsi>
   46218:	1009883a 	mov	r4,r2
   4621c:	102b883a 	mov	r21,r2
   46220:	004f76c0 	call	4f76c <__floatsidf>
   46224:	800d883a 	mov	r6,r16
   46228:	880f883a 	mov	r7,r17
   4622c:	1009883a 	mov	r4,r2
   46230:	180b883a 	mov	r5,r3
   46234:	004e6d80 	call	4e6d8 <__muldf3>
   46238:	100d883a 	mov	r6,r2
   4623c:	180f883a 	mov	r7,r3
   46240:	9009883a 	mov	r4,r18
   46244:	980b883a 	mov	r5,r19
   46248:	004edf00 	call	4edf0 <__subdf3>
   4624c:	d9c00717 	ldw	r7,28(sp)
   46250:	1009883a 	mov	r4,r2
   46254:	a8800c04 	addi	r2,r21,48
   46258:	38800005 	stb	r2,0(r7)
   4625c:	3dc00044 	addi	r23,r7,1
   46260:	d9c00617 	ldw	r7,24(sp)
   46264:	01800044 	movi	r6,1
   46268:	180b883a 	mov	r5,r3
   4626c:	2005883a 	mov	r2,r4
   46270:	39803826 	beq	r7,r6,46354 <_dtoa_r+0x8f4>
   46274:	000d883a 	mov	r6,zero
   46278:	01d00934 	movhi	r7,16420
   4627c:	004e6d80 	call	4e6d8 <__muldf3>
   46280:	000d883a 	mov	r6,zero
   46284:	000f883a 	mov	r7,zero
   46288:	1009883a 	mov	r4,r2
   4628c:	180b883a 	mov	r5,r3
   46290:	1025883a 	mov	r18,r2
   46294:	1827883a 	mov	r19,r3
   46298:	004e4800 	call	4e480 <__eqdf2>
   4629c:	103f9a26 	beq	r2,zero,46108 <__alt_data_end+0xfffc6108>
   462a0:	d9c00617 	ldw	r7,24(sp)
   462a4:	d8c00717 	ldw	r3,28(sp)
   462a8:	b829883a 	mov	r20,r23
   462ac:	38bfffc4 	addi	r2,r7,-1
   462b0:	18ad883a 	add	r22,r3,r2
   462b4:	00000a06 	br	462e0 <_dtoa_r+0x880>
   462b8:	004e6d80 	call	4e6d8 <__muldf3>
   462bc:	000d883a 	mov	r6,zero
   462c0:	000f883a 	mov	r7,zero
   462c4:	1009883a 	mov	r4,r2
   462c8:	180b883a 	mov	r5,r3
   462cc:	1025883a 	mov	r18,r2
   462d0:	1827883a 	mov	r19,r3
   462d4:	b829883a 	mov	r20,r23
   462d8:	004e4800 	call	4e480 <__eqdf2>
   462dc:	103f8a26 	beq	r2,zero,46108 <__alt_data_end+0xfffc6108>
   462e0:	800d883a 	mov	r6,r16
   462e4:	880f883a 	mov	r7,r17
   462e8:	9009883a 	mov	r4,r18
   462ec:	980b883a 	mov	r5,r19
   462f0:	004db980 	call	4db98 <__divdf3>
   462f4:	180b883a 	mov	r5,r3
   462f8:	1009883a 	mov	r4,r2
   462fc:	004f6ec0 	call	4f6ec <__fixdfsi>
   46300:	1009883a 	mov	r4,r2
   46304:	102b883a 	mov	r21,r2
   46308:	004f76c0 	call	4f76c <__floatsidf>
   4630c:	800d883a 	mov	r6,r16
   46310:	880f883a 	mov	r7,r17
   46314:	1009883a 	mov	r4,r2
   46318:	180b883a 	mov	r5,r3
   4631c:	004e6d80 	call	4e6d8 <__muldf3>
   46320:	100d883a 	mov	r6,r2
   46324:	180f883a 	mov	r7,r3
   46328:	9009883a 	mov	r4,r18
   4632c:	980b883a 	mov	r5,r19
   46330:	004edf00 	call	4edf0 <__subdf3>
   46334:	aa000c04 	addi	r8,r21,48
   46338:	a2000005 	stb	r8,0(r20)
   4633c:	000d883a 	mov	r6,zero
   46340:	01d00934 	movhi	r7,16420
   46344:	1009883a 	mov	r4,r2
   46348:	180b883a 	mov	r5,r3
   4634c:	a5c00044 	addi	r23,r20,1
   46350:	b53fd91e 	bne	r22,r20,462b8 <__alt_data_end+0xfffc62b8>
   46354:	100d883a 	mov	r6,r2
   46358:	180f883a 	mov	r7,r3
   4635c:	1009883a 	mov	r4,r2
   46360:	180b883a 	mov	r5,r3
   46364:	004d2ec0 	call	4d2ec <__adddf3>
   46368:	100d883a 	mov	r6,r2
   4636c:	180f883a 	mov	r7,r3
   46370:	8009883a 	mov	r4,r16
   46374:	880b883a 	mov	r5,r17
   46378:	1027883a 	mov	r19,r2
   4637c:	1825883a 	mov	r18,r3
   46380:	004e5e40 	call	4e5e4 <__ledf2>
   46384:	10000816 	blt	r2,zero,463a8 <_dtoa_r+0x948>
   46388:	980d883a 	mov	r6,r19
   4638c:	900f883a 	mov	r7,r18
   46390:	8009883a 	mov	r4,r16
   46394:	880b883a 	mov	r5,r17
   46398:	004e4800 	call	4e480 <__eqdf2>
   4639c:	103f5a1e 	bne	r2,zero,46108 <__alt_data_end+0xfffc6108>
   463a0:	ad40004c 	andi	r21,r21,1
   463a4:	a83f5826 	beq	r21,zero,46108 <__alt_data_end+0xfffc6108>
   463a8:	bd3fffc3 	ldbu	r20,-1(r23)
   463ac:	b8bfffc4 	addi	r2,r23,-1
   463b0:	1007883a 	mov	r3,r2
   463b4:	01400e44 	movi	r5,57
   463b8:	d9800717 	ldw	r6,28(sp)
   463bc:	00000506 	br	463d4 <_dtoa_r+0x974>
   463c0:	18ffffc4 	addi	r3,r3,-1
   463c4:	11824726 	beq	r2,r6,46ce4 <_dtoa_r+0x1284>
   463c8:	1d000003 	ldbu	r20,0(r3)
   463cc:	102f883a 	mov	r23,r2
   463d0:	10bfffc4 	addi	r2,r2,-1
   463d4:	a1003fcc 	andi	r4,r20,255
   463d8:	2100201c 	xori	r4,r4,128
   463dc:	213fe004 	addi	r4,r4,-128
   463e0:	217ff726 	beq	r4,r5,463c0 <__alt_data_end+0xfffc63c0>
   463e4:	a2000044 	addi	r8,r20,1
   463e8:	12000005 	stb	r8,0(r2)
   463ec:	003f4606 	br	46108 <__alt_data_end+0xfffc6108>
   463f0:	d9000b17 	ldw	r4,44(sp)
   463f4:	2000c826 	beq	r4,zero,46718 <_dtoa_r+0xcb8>
   463f8:	d9800317 	ldw	r6,12(sp)
   463fc:	00c00044 	movi	r3,1
   46400:	1980f90e 	bge	r3,r6,467e8 <_dtoa_r+0xd88>
   46404:	d8800617 	ldw	r2,24(sp)
   46408:	d8c00a17 	ldw	r3,40(sp)
   4640c:	157fffc4 	addi	r21,r2,-1
   46410:	1d41f316 	blt	r3,r21,46be0 <_dtoa_r+0x1180>
   46414:	1d6bc83a 	sub	r21,r3,r21
   46418:	d9c00617 	ldw	r7,24(sp)
   4641c:	3802aa16 	blt	r7,zero,46ec8 <_dtoa_r+0x1468>
   46420:	dd000817 	ldw	r20,32(sp)
   46424:	d8800617 	ldw	r2,24(sp)
   46428:	d8c00817 	ldw	r3,32(sp)
   4642c:	01400044 	movi	r5,1
   46430:	e009883a 	mov	r4,fp
   46434:	1887883a 	add	r3,r3,r2
   46438:	d8c00815 	stw	r3,32(sp)
   4643c:	b0ad883a 	add	r22,r22,r2
   46440:	0048da80 	call	48da8 <__i2b>
   46444:	1023883a 	mov	r17,r2
   46448:	a0000826 	beq	r20,zero,4646c <_dtoa_r+0xa0c>
   4644c:	0580070e 	bge	zero,r22,4646c <_dtoa_r+0xa0c>
   46450:	a005883a 	mov	r2,r20
   46454:	b500b916 	blt	r22,r20,4673c <_dtoa_r+0xcdc>
   46458:	d9000817 	ldw	r4,32(sp)
   4645c:	a0a9c83a 	sub	r20,r20,r2
   46460:	b0adc83a 	sub	r22,r22,r2
   46464:	2089c83a 	sub	r4,r4,r2
   46468:	d9000815 	stw	r4,32(sp)
   4646c:	d9800a17 	ldw	r6,40(sp)
   46470:	0181810e 	bge	zero,r6,46a78 <_dtoa_r+0x1018>
   46474:	d9c00b17 	ldw	r7,44(sp)
   46478:	3800b326 	beq	r7,zero,46748 <_dtoa_r+0xce8>
   4647c:	a800b226 	beq	r21,zero,46748 <_dtoa_r+0xce8>
   46480:	880b883a 	mov	r5,r17
   46484:	a80d883a 	mov	r6,r21
   46488:	e009883a 	mov	r4,fp
   4648c:	0048fdc0 	call	48fdc <__pow5mult>
   46490:	d9800917 	ldw	r6,36(sp)
   46494:	100b883a 	mov	r5,r2
   46498:	e009883a 	mov	r4,fp
   4649c:	1023883a 	mov	r17,r2
   464a0:	0048de40 	call	48de4 <__multiply>
   464a4:	1021883a 	mov	r16,r2
   464a8:	d8800a17 	ldw	r2,40(sp)
   464ac:	d9400917 	ldw	r5,36(sp)
   464b0:	e009883a 	mov	r4,fp
   464b4:	1545c83a 	sub	r2,r2,r21
   464b8:	d8800a15 	stw	r2,40(sp)
   464bc:	0048a440 	call	48a44 <_Bfree>
   464c0:	d8c00a17 	ldw	r3,40(sp)
   464c4:	18009f1e 	bne	r3,zero,46744 <_dtoa_r+0xce4>
   464c8:	05c00044 	movi	r23,1
   464cc:	e009883a 	mov	r4,fp
   464d0:	b80b883a 	mov	r5,r23
   464d4:	0048da80 	call	48da8 <__i2b>
   464d8:	d9000d17 	ldw	r4,52(sp)
   464dc:	102b883a 	mov	r21,r2
   464e0:	2000ce26 	beq	r4,zero,4681c <_dtoa_r+0xdbc>
   464e4:	200d883a 	mov	r6,r4
   464e8:	100b883a 	mov	r5,r2
   464ec:	e009883a 	mov	r4,fp
   464f0:	0048fdc0 	call	48fdc <__pow5mult>
   464f4:	d9800317 	ldw	r6,12(sp)
   464f8:	102b883a 	mov	r21,r2
   464fc:	b981810e 	bge	r23,r6,46b04 <_dtoa_r+0x10a4>
   46500:	0027883a 	mov	r19,zero
   46504:	a8800417 	ldw	r2,16(r21)
   46508:	05c00804 	movi	r23,32
   4650c:	10800104 	addi	r2,r2,4
   46510:	1085883a 	add	r2,r2,r2
   46514:	1085883a 	add	r2,r2,r2
   46518:	a885883a 	add	r2,r21,r2
   4651c:	11000017 	ldw	r4,0(r2)
   46520:	0048c900 	call	48c90 <__hi0bits>
   46524:	b885c83a 	sub	r2,r23,r2
   46528:	1585883a 	add	r2,r2,r22
   4652c:	108007cc 	andi	r2,r2,31
   46530:	1000b326 	beq	r2,zero,46800 <_dtoa_r+0xda0>
   46534:	00c00804 	movi	r3,32
   46538:	1887c83a 	sub	r3,r3,r2
   4653c:	01000104 	movi	r4,4
   46540:	20c2cd0e 	bge	r4,r3,47078 <_dtoa_r+0x1618>
   46544:	00c00704 	movi	r3,28
   46548:	1885c83a 	sub	r2,r3,r2
   4654c:	d8c00817 	ldw	r3,32(sp)
   46550:	a0a9883a 	add	r20,r20,r2
   46554:	b0ad883a 	add	r22,r22,r2
   46558:	1887883a 	add	r3,r3,r2
   4655c:	d8c00815 	stw	r3,32(sp)
   46560:	d9800817 	ldw	r6,32(sp)
   46564:	0180040e 	bge	zero,r6,46578 <_dtoa_r+0xb18>
   46568:	800b883a 	mov	r5,r16
   4656c:	e009883a 	mov	r4,fp
   46570:	004911c0 	call	4911c <__lshift>
   46574:	1021883a 	mov	r16,r2
   46578:	0580050e 	bge	zero,r22,46590 <_dtoa_r+0xb30>
   4657c:	a80b883a 	mov	r5,r21
   46580:	b00d883a 	mov	r6,r22
   46584:	e009883a 	mov	r4,fp
   46588:	004911c0 	call	4911c <__lshift>
   4658c:	102b883a 	mov	r21,r2
   46590:	d9c00e17 	ldw	r7,56(sp)
   46594:	3801211e 	bne	r7,zero,46a1c <_dtoa_r+0xfbc>
   46598:	d9800617 	ldw	r6,24(sp)
   4659c:	0181380e 	bge	zero,r6,46a80 <_dtoa_r+0x1020>
   465a0:	d8c00b17 	ldw	r3,44(sp)
   465a4:	1800ab1e 	bne	r3,zero,46854 <_dtoa_r+0xdf4>
   465a8:	dc800717 	ldw	r18,28(sp)
   465ac:	dcc00617 	ldw	r19,24(sp)
   465b0:	9029883a 	mov	r20,r18
   465b4:	00000206 	br	465c0 <_dtoa_r+0xb60>
   465b8:	0048a6c0 	call	48a6c <__multadd>
   465bc:	1021883a 	mov	r16,r2
   465c0:	a80b883a 	mov	r5,r21
   465c4:	8009883a 	mov	r4,r16
   465c8:	00458600 	call	45860 <quorem>
   465cc:	10800c04 	addi	r2,r2,48
   465d0:	90800005 	stb	r2,0(r18)
   465d4:	94800044 	addi	r18,r18,1
   465d8:	9507c83a 	sub	r3,r18,r20
   465dc:	000f883a 	mov	r7,zero
   465e0:	01800284 	movi	r6,10
   465e4:	800b883a 	mov	r5,r16
   465e8:	e009883a 	mov	r4,fp
   465ec:	1cfff216 	blt	r3,r19,465b8 <__alt_data_end+0xfffc65b8>
   465f0:	1011883a 	mov	r8,r2
   465f4:	d8800617 	ldw	r2,24(sp)
   465f8:	0082370e 	bge	zero,r2,46ed8 <_dtoa_r+0x1478>
   465fc:	d9000717 	ldw	r4,28(sp)
   46600:	0025883a 	mov	r18,zero
   46604:	20af883a 	add	r23,r4,r2
   46608:	01800044 	movi	r6,1
   4660c:	800b883a 	mov	r5,r16
   46610:	e009883a 	mov	r4,fp
   46614:	da001715 	stw	r8,92(sp)
   46618:	004911c0 	call	4911c <__lshift>
   4661c:	a80b883a 	mov	r5,r21
   46620:	1009883a 	mov	r4,r2
   46624:	d8800915 	stw	r2,36(sp)
   46628:	00492640 	call	49264 <__mcmp>
   4662c:	da001717 	ldw	r8,92(sp)
   46630:	0081800e 	bge	zero,r2,46c34 <_dtoa_r+0x11d4>
   46634:	b93fffc3 	ldbu	r4,-1(r23)
   46638:	b8bfffc4 	addi	r2,r23,-1
   4663c:	1007883a 	mov	r3,r2
   46640:	01800e44 	movi	r6,57
   46644:	d9c00717 	ldw	r7,28(sp)
   46648:	00000506 	br	46660 <_dtoa_r+0xc00>
   4664c:	18ffffc4 	addi	r3,r3,-1
   46650:	11c12326 	beq	r2,r7,46ae0 <_dtoa_r+0x1080>
   46654:	19000003 	ldbu	r4,0(r3)
   46658:	102f883a 	mov	r23,r2
   4665c:	10bfffc4 	addi	r2,r2,-1
   46660:	21403fcc 	andi	r5,r4,255
   46664:	2940201c 	xori	r5,r5,128
   46668:	297fe004 	addi	r5,r5,-128
   4666c:	29bff726 	beq	r5,r6,4664c <__alt_data_end+0xfffc664c>
   46670:	21000044 	addi	r4,r4,1
   46674:	11000005 	stb	r4,0(r2)
   46678:	a80b883a 	mov	r5,r21
   4667c:	e009883a 	mov	r4,fp
   46680:	0048a440 	call	48a44 <_Bfree>
   46684:	883ea026 	beq	r17,zero,46108 <__alt_data_end+0xfffc6108>
   46688:	90000426 	beq	r18,zero,4669c <_dtoa_r+0xc3c>
   4668c:	94400326 	beq	r18,r17,4669c <_dtoa_r+0xc3c>
   46690:	900b883a 	mov	r5,r18
   46694:	e009883a 	mov	r4,fp
   46698:	0048a440 	call	48a44 <_Bfree>
   4669c:	880b883a 	mov	r5,r17
   466a0:	e009883a 	mov	r4,fp
   466a4:	0048a440 	call	48a44 <_Bfree>
   466a8:	003e9706 	br	46108 <__alt_data_end+0xfffc6108>
   466ac:	01800044 	movi	r6,1
   466b0:	d9800e15 	stw	r6,56(sp)
   466b4:	003d9606 	br	45d10 <__alt_data_end+0xfffc5d10>
   466b8:	d8800817 	ldw	r2,32(sp)
   466bc:	d8c00517 	ldw	r3,20(sp)
   466c0:	d8000d15 	stw	zero,52(sp)
   466c4:	10c5c83a 	sub	r2,r2,r3
   466c8:	00c9c83a 	sub	r4,zero,r3
   466cc:	d8800815 	stw	r2,32(sp)
   466d0:	d9000a15 	stw	r4,40(sp)
   466d4:	003d9706 	br	45d34 <__alt_data_end+0xfffc5d34>
   466d8:	05adc83a 	sub	r22,zero,r22
   466dc:	dd800815 	stw	r22,32(sp)
   466e0:	002d883a 	mov	r22,zero
   466e4:	003d8e06 	br	45d20 <__alt_data_end+0xfffc5d20>
   466e8:	d9000517 	ldw	r4,20(sp)
   466ec:	004f76c0 	call	4f76c <__floatsidf>
   466f0:	100d883a 	mov	r6,r2
   466f4:	180f883a 	mov	r7,r3
   466f8:	a009883a 	mov	r4,r20
   466fc:	880b883a 	mov	r5,r17
   46700:	004e4800 	call	4e480 <__eqdf2>
   46704:	103d7126 	beq	r2,zero,45ccc <__alt_data_end+0xfffc5ccc>
   46708:	d9c00517 	ldw	r7,20(sp)
   4670c:	39ffffc4 	addi	r7,r7,-1
   46710:	d9c00515 	stw	r7,20(sp)
   46714:	003d6d06 	br	45ccc <__alt_data_end+0xfffc5ccc>
   46718:	dd400a17 	ldw	r21,40(sp)
   4671c:	dd000817 	ldw	r20,32(sp)
   46720:	0023883a 	mov	r17,zero
   46724:	003f4806 	br	46448 <__alt_data_end+0xfffc6448>
   46728:	10e3c83a 	sub	r17,r2,r3
   4672c:	9448983a 	sll	r4,r18,r17
   46730:	003d3206 	br	45bfc <__alt_data_end+0xfffc5bfc>
   46734:	d8000e15 	stw	zero,56(sp)
   46738:	003d7506 	br	45d10 <__alt_data_end+0xfffc5d10>
   4673c:	b005883a 	mov	r2,r22
   46740:	003f4506 	br	46458 <__alt_data_end+0xfffc6458>
   46744:	dc000915 	stw	r16,36(sp)
   46748:	d9800a17 	ldw	r6,40(sp)
   4674c:	d9400917 	ldw	r5,36(sp)
   46750:	e009883a 	mov	r4,fp
   46754:	0048fdc0 	call	48fdc <__pow5mult>
   46758:	1021883a 	mov	r16,r2
   4675c:	003f5a06 	br	464c8 <__alt_data_end+0xfffc64c8>
   46760:	01c00044 	movi	r7,1
   46764:	d9c00b15 	stw	r7,44(sp)
   46768:	d8802217 	ldw	r2,136(sp)
   4676c:	0081280e 	bge	zero,r2,46c10 <_dtoa_r+0x11b0>
   46770:	100d883a 	mov	r6,r2
   46774:	1021883a 	mov	r16,r2
   46778:	d8800c15 	stw	r2,48(sp)
   4677c:	d8800615 	stw	r2,24(sp)
   46780:	003d8806 	br	45da4 <__alt_data_end+0xfffc5da4>
   46784:	d8800617 	ldw	r2,24(sp)
   46788:	00be9b16 	blt	zero,r2,461f8 <__alt_data_end+0xfffc61f8>
   4678c:	10010f1e 	bne	r2,zero,46bcc <_dtoa_r+0x116c>
   46790:	880b883a 	mov	r5,r17
   46794:	000d883a 	mov	r6,zero
   46798:	01d00534 	movhi	r7,16404
   4679c:	8009883a 	mov	r4,r16
   467a0:	004e6d80 	call	4e6d8 <__muldf3>
   467a4:	900d883a 	mov	r6,r18
   467a8:	980f883a 	mov	r7,r19
   467ac:	1009883a 	mov	r4,r2
   467b0:	180b883a 	mov	r5,r3
   467b4:	004e5080 	call	4e508 <__gedf2>
   467b8:	002b883a 	mov	r21,zero
   467bc:	0023883a 	mov	r17,zero
   467c0:	1000bf16 	blt	r2,zero,46ac0 <_dtoa_r+0x1060>
   467c4:	d9802217 	ldw	r6,136(sp)
   467c8:	ddc00717 	ldw	r23,28(sp)
   467cc:	018c303a 	nor	r6,zero,r6
   467d0:	d9800515 	stw	r6,20(sp)
   467d4:	a80b883a 	mov	r5,r21
   467d8:	e009883a 	mov	r4,fp
   467dc:	0048a440 	call	48a44 <_Bfree>
   467e0:	883e4926 	beq	r17,zero,46108 <__alt_data_end+0xfffc6108>
   467e4:	003fad06 	br	4669c <__alt_data_end+0xfffc669c>
   467e8:	d9c01117 	ldw	r7,68(sp)
   467ec:	3801bc26 	beq	r7,zero,46ee0 <_dtoa_r+0x1480>
   467f0:	10810cc4 	addi	r2,r2,1075
   467f4:	dd400a17 	ldw	r21,40(sp)
   467f8:	dd000817 	ldw	r20,32(sp)
   467fc:	003f0a06 	br	46428 <__alt_data_end+0xfffc6428>
   46800:	00800704 	movi	r2,28
   46804:	d9000817 	ldw	r4,32(sp)
   46808:	a0a9883a 	add	r20,r20,r2
   4680c:	b0ad883a 	add	r22,r22,r2
   46810:	2089883a 	add	r4,r4,r2
   46814:	d9000815 	stw	r4,32(sp)
   46818:	003f5106 	br	46560 <__alt_data_end+0xfffc6560>
   4681c:	d8c00317 	ldw	r3,12(sp)
   46820:	b8c1fc0e 	bge	r23,r3,47014 <_dtoa_r+0x15b4>
   46824:	0027883a 	mov	r19,zero
   46828:	b805883a 	mov	r2,r23
   4682c:	003f3e06 	br	46528 <__alt_data_end+0xfffc6528>
   46830:	880b883a 	mov	r5,r17
   46834:	e009883a 	mov	r4,fp
   46838:	000f883a 	mov	r7,zero
   4683c:	01800284 	movi	r6,10
   46840:	0048a6c0 	call	48a6c <__multadd>
   46844:	d9000c17 	ldw	r4,48(sp)
   46848:	1023883a 	mov	r17,r2
   4684c:	0102040e 	bge	zero,r4,47060 <_dtoa_r+0x1600>
   46850:	d9000615 	stw	r4,24(sp)
   46854:	0500050e 	bge	zero,r20,4686c <_dtoa_r+0xe0c>
   46858:	880b883a 	mov	r5,r17
   4685c:	a00d883a 	mov	r6,r20
   46860:	e009883a 	mov	r4,fp
   46864:	004911c0 	call	4911c <__lshift>
   46868:	1023883a 	mov	r17,r2
   4686c:	9801241e 	bne	r19,zero,46d00 <_dtoa_r+0x12a0>
   46870:	8829883a 	mov	r20,r17
   46874:	d9000617 	ldw	r4,24(sp)
   46878:	dcc00717 	ldw	r19,28(sp)
   4687c:	9480004c 	andi	r18,r18,1
   46880:	20bfffc4 	addi	r2,r4,-1
   46884:	9885883a 	add	r2,r19,r2
   46888:	d8800415 	stw	r2,16(sp)
   4688c:	dc800615 	stw	r18,24(sp)
   46890:	a80b883a 	mov	r5,r21
   46894:	8009883a 	mov	r4,r16
   46898:	00458600 	call	45860 <quorem>
   4689c:	880b883a 	mov	r5,r17
   468a0:	8009883a 	mov	r4,r16
   468a4:	102f883a 	mov	r23,r2
   468a8:	00492640 	call	49264 <__mcmp>
   468ac:	a80b883a 	mov	r5,r21
   468b0:	a00d883a 	mov	r6,r20
   468b4:	e009883a 	mov	r4,fp
   468b8:	102d883a 	mov	r22,r2
   468bc:	00492c40 	call	492c4 <__mdiff>
   468c0:	1007883a 	mov	r3,r2
   468c4:	10800317 	ldw	r2,12(r2)
   468c8:	bc800c04 	addi	r18,r23,48
   468cc:	180b883a 	mov	r5,r3
   468d0:	10004e1e 	bne	r2,zero,46a0c <_dtoa_r+0xfac>
   468d4:	8009883a 	mov	r4,r16
   468d8:	d8c01615 	stw	r3,88(sp)
   468dc:	00492640 	call	49264 <__mcmp>
   468e0:	d8c01617 	ldw	r3,88(sp)
   468e4:	e009883a 	mov	r4,fp
   468e8:	d8801615 	stw	r2,88(sp)
   468ec:	180b883a 	mov	r5,r3
   468f0:	0048a440 	call	48a44 <_Bfree>
   468f4:	d8801617 	ldw	r2,88(sp)
   468f8:	1000041e 	bne	r2,zero,4690c <_dtoa_r+0xeac>
   468fc:	d9800317 	ldw	r6,12(sp)
   46900:	3000021e 	bne	r6,zero,4690c <_dtoa_r+0xeac>
   46904:	d8c00617 	ldw	r3,24(sp)
   46908:	18003726 	beq	r3,zero,469e8 <_dtoa_r+0xf88>
   4690c:	b0002016 	blt	r22,zero,46990 <_dtoa_r+0xf30>
   46910:	b000041e 	bne	r22,zero,46924 <_dtoa_r+0xec4>
   46914:	d9000317 	ldw	r4,12(sp)
   46918:	2000021e 	bne	r4,zero,46924 <_dtoa_r+0xec4>
   4691c:	d8c00617 	ldw	r3,24(sp)
   46920:	18001b26 	beq	r3,zero,46990 <_dtoa_r+0xf30>
   46924:	00810716 	blt	zero,r2,46d44 <_dtoa_r+0x12e4>
   46928:	d8c00417 	ldw	r3,16(sp)
   4692c:	9d800044 	addi	r22,r19,1
   46930:	9c800005 	stb	r18,0(r19)
   46934:	b02f883a 	mov	r23,r22
   46938:	98c10626 	beq	r19,r3,46d54 <_dtoa_r+0x12f4>
   4693c:	800b883a 	mov	r5,r16
   46940:	000f883a 	mov	r7,zero
   46944:	01800284 	movi	r6,10
   46948:	e009883a 	mov	r4,fp
   4694c:	0048a6c0 	call	48a6c <__multadd>
   46950:	1021883a 	mov	r16,r2
   46954:	000f883a 	mov	r7,zero
   46958:	01800284 	movi	r6,10
   4695c:	880b883a 	mov	r5,r17
   46960:	e009883a 	mov	r4,fp
   46964:	8d002526 	beq	r17,r20,469fc <_dtoa_r+0xf9c>
   46968:	0048a6c0 	call	48a6c <__multadd>
   4696c:	a00b883a 	mov	r5,r20
   46970:	000f883a 	mov	r7,zero
   46974:	01800284 	movi	r6,10
   46978:	e009883a 	mov	r4,fp
   4697c:	1023883a 	mov	r17,r2
   46980:	0048a6c0 	call	48a6c <__multadd>
   46984:	1029883a 	mov	r20,r2
   46988:	b027883a 	mov	r19,r22
   4698c:	003fc006 	br	46890 <__alt_data_end+0xfffc6890>
   46990:	9011883a 	mov	r8,r18
   46994:	00800e0e 	bge	zero,r2,469d0 <_dtoa_r+0xf70>
   46998:	800b883a 	mov	r5,r16
   4699c:	01800044 	movi	r6,1
   469a0:	e009883a 	mov	r4,fp
   469a4:	da001715 	stw	r8,92(sp)
   469a8:	004911c0 	call	4911c <__lshift>
   469ac:	a80b883a 	mov	r5,r21
   469b0:	1009883a 	mov	r4,r2
   469b4:	1021883a 	mov	r16,r2
   469b8:	00492640 	call	49264 <__mcmp>
   469bc:	da001717 	ldw	r8,92(sp)
   469c0:	0081960e 	bge	zero,r2,4701c <_dtoa_r+0x15bc>
   469c4:	00800e44 	movi	r2,57
   469c8:	40817026 	beq	r8,r2,46f8c <_dtoa_r+0x152c>
   469cc:	ba000c44 	addi	r8,r23,49
   469d0:	8825883a 	mov	r18,r17
   469d4:	9dc00044 	addi	r23,r19,1
   469d8:	9a000005 	stb	r8,0(r19)
   469dc:	a023883a 	mov	r17,r20
   469e0:	dc000915 	stw	r16,36(sp)
   469e4:	003f2406 	br	46678 <__alt_data_end+0xfffc6678>
   469e8:	00800e44 	movi	r2,57
   469ec:	9011883a 	mov	r8,r18
   469f0:	90816626 	beq	r18,r2,46f8c <_dtoa_r+0x152c>
   469f4:	05bff516 	blt	zero,r22,469cc <__alt_data_end+0xfffc69cc>
   469f8:	003ff506 	br	469d0 <__alt_data_end+0xfffc69d0>
   469fc:	0048a6c0 	call	48a6c <__multadd>
   46a00:	1023883a 	mov	r17,r2
   46a04:	1029883a 	mov	r20,r2
   46a08:	003fdf06 	br	46988 <__alt_data_end+0xfffc6988>
   46a0c:	e009883a 	mov	r4,fp
   46a10:	0048a440 	call	48a44 <_Bfree>
   46a14:	00800044 	movi	r2,1
   46a18:	003fbc06 	br	4690c <__alt_data_end+0xfffc690c>
   46a1c:	a80b883a 	mov	r5,r21
   46a20:	8009883a 	mov	r4,r16
   46a24:	00492640 	call	49264 <__mcmp>
   46a28:	103edb0e 	bge	r2,zero,46598 <__alt_data_end+0xfffc6598>
   46a2c:	800b883a 	mov	r5,r16
   46a30:	000f883a 	mov	r7,zero
   46a34:	01800284 	movi	r6,10
   46a38:	e009883a 	mov	r4,fp
   46a3c:	0048a6c0 	call	48a6c <__multadd>
   46a40:	1021883a 	mov	r16,r2
   46a44:	d8800517 	ldw	r2,20(sp)
   46a48:	d8c00b17 	ldw	r3,44(sp)
   46a4c:	10bfffc4 	addi	r2,r2,-1
   46a50:	d8800515 	stw	r2,20(sp)
   46a54:	183f761e 	bne	r3,zero,46830 <__alt_data_end+0xfffc6830>
   46a58:	d9000c17 	ldw	r4,48(sp)
   46a5c:	0101730e 	bge	zero,r4,4702c <_dtoa_r+0x15cc>
   46a60:	d9000615 	stw	r4,24(sp)
   46a64:	003ed006 	br	465a8 <__alt_data_end+0xfffc65a8>
   46a68:	00800084 	movi	r2,2
   46a6c:	3081861e 	bne	r6,r2,47088 <_dtoa_r+0x1628>
   46a70:	d8000b15 	stw	zero,44(sp)
   46a74:	003f3c06 	br	46768 <__alt_data_end+0xfffc6768>
   46a78:	dc000917 	ldw	r16,36(sp)
   46a7c:	003e9206 	br	464c8 <__alt_data_end+0xfffc64c8>
   46a80:	d9c00317 	ldw	r7,12(sp)
   46a84:	00800084 	movi	r2,2
   46a88:	11fec50e 	bge	r2,r7,465a0 <__alt_data_end+0xfffc65a0>
   46a8c:	d9000617 	ldw	r4,24(sp)
   46a90:	20013c1e 	bne	r4,zero,46f84 <_dtoa_r+0x1524>
   46a94:	a80b883a 	mov	r5,r21
   46a98:	000f883a 	mov	r7,zero
   46a9c:	01800144 	movi	r6,5
   46aa0:	e009883a 	mov	r4,fp
   46aa4:	0048a6c0 	call	48a6c <__multadd>
   46aa8:	100b883a 	mov	r5,r2
   46aac:	8009883a 	mov	r4,r16
   46ab0:	102b883a 	mov	r21,r2
   46ab4:	00492640 	call	49264 <__mcmp>
   46ab8:	dc000915 	stw	r16,36(sp)
   46abc:	00bf410e 	bge	zero,r2,467c4 <__alt_data_end+0xfffc67c4>
   46ac0:	d9c00717 	ldw	r7,28(sp)
   46ac4:	00800c44 	movi	r2,49
   46ac8:	38800005 	stb	r2,0(r7)
   46acc:	d8800517 	ldw	r2,20(sp)
   46ad0:	3dc00044 	addi	r23,r7,1
   46ad4:	10800044 	addi	r2,r2,1
   46ad8:	d8800515 	stw	r2,20(sp)
   46adc:	003f3d06 	br	467d4 <__alt_data_end+0xfffc67d4>
   46ae0:	d9800517 	ldw	r6,20(sp)
   46ae4:	d9c00717 	ldw	r7,28(sp)
   46ae8:	00800c44 	movi	r2,49
   46aec:	31800044 	addi	r6,r6,1
   46af0:	d9800515 	stw	r6,20(sp)
   46af4:	38800005 	stb	r2,0(r7)
   46af8:	003edf06 	br	46678 <__alt_data_end+0xfffc6678>
   46afc:	d8000b15 	stw	zero,44(sp)
   46b00:	003c9f06 	br	45d80 <__alt_data_end+0xfffc5d80>
   46b04:	903e7e1e 	bne	r18,zero,46500 <__alt_data_end+0xfffc6500>
   46b08:	00800434 	movhi	r2,16
   46b0c:	10bfffc4 	addi	r2,r2,-1
   46b10:	9884703a 	and	r2,r19,r2
   46b14:	1000ea1e 	bne	r2,zero,46ec0 <_dtoa_r+0x1460>
   46b18:	9cdffc2c 	andhi	r19,r19,32752
   46b1c:	9800e826 	beq	r19,zero,46ec0 <_dtoa_r+0x1460>
   46b20:	d9c00817 	ldw	r7,32(sp)
   46b24:	b5800044 	addi	r22,r22,1
   46b28:	04c00044 	movi	r19,1
   46b2c:	39c00044 	addi	r7,r7,1
   46b30:	d9c00815 	stw	r7,32(sp)
   46b34:	d8800d17 	ldw	r2,52(sp)
   46b38:	103e721e 	bne	r2,zero,46504 <__alt_data_end+0xfffc6504>
   46b3c:	00800044 	movi	r2,1
   46b40:	003e7906 	br	46528 <__alt_data_end+0xfffc6528>
   46b44:	8009883a 	mov	r4,r16
   46b48:	004f76c0 	call	4f76c <__floatsidf>
   46b4c:	d9800f17 	ldw	r6,60(sp)
   46b50:	d9c01017 	ldw	r7,64(sp)
   46b54:	1009883a 	mov	r4,r2
   46b58:	180b883a 	mov	r5,r3
   46b5c:	004e6d80 	call	4e6d8 <__muldf3>
   46b60:	000d883a 	mov	r6,zero
   46b64:	01d00734 	movhi	r7,16412
   46b68:	1009883a 	mov	r4,r2
   46b6c:	180b883a 	mov	r5,r3
   46b70:	004d2ec0 	call	4d2ec <__adddf3>
   46b74:	047f3034 	movhi	r17,64704
   46b78:	1021883a 	mov	r16,r2
   46b7c:	1c63883a 	add	r17,r3,r17
   46b80:	d9000f17 	ldw	r4,60(sp)
   46b84:	d9401017 	ldw	r5,64(sp)
   46b88:	000d883a 	mov	r6,zero
   46b8c:	01d00534 	movhi	r7,16404
   46b90:	004edf00 	call	4edf0 <__subdf3>
   46b94:	800d883a 	mov	r6,r16
   46b98:	880f883a 	mov	r7,r17
   46b9c:	1009883a 	mov	r4,r2
   46ba0:	180b883a 	mov	r5,r3
   46ba4:	102b883a 	mov	r21,r2
   46ba8:	1829883a 	mov	r20,r3
   46bac:	004e5080 	call	4e508 <__gedf2>
   46bb0:	00806c16 	blt	zero,r2,46d64 <_dtoa_r+0x1304>
   46bb4:	89e0003c 	xorhi	r7,r17,32768
   46bb8:	800d883a 	mov	r6,r16
   46bbc:	a809883a 	mov	r4,r21
   46bc0:	a00b883a 	mov	r5,r20
   46bc4:	004e5e40 	call	4e5e4 <__ledf2>
   46bc8:	103d7e0e 	bge	r2,zero,461c4 <__alt_data_end+0xfffc61c4>
   46bcc:	002b883a 	mov	r21,zero
   46bd0:	0023883a 	mov	r17,zero
   46bd4:	003efb06 	br	467c4 <__alt_data_end+0xfffc67c4>
   46bd8:	d8800717 	ldw	r2,28(sp)
   46bdc:	003bd006 	br	45b20 <__alt_data_end+0xfffc5b20>
   46be0:	d9000a17 	ldw	r4,40(sp)
   46be4:	d9800d17 	ldw	r6,52(sp)
   46be8:	dd400a15 	stw	r21,40(sp)
   46bec:	a905c83a 	sub	r2,r21,r4
   46bf0:	308d883a 	add	r6,r6,r2
   46bf4:	d9800d15 	stw	r6,52(sp)
   46bf8:	002b883a 	mov	r21,zero
   46bfc:	003e0606 	br	46418 <__alt_data_end+0xfffc6418>
   46c00:	9023883a 	mov	r17,r18
   46c04:	9829883a 	mov	r20,r19
   46c08:	04000084 	movi	r16,2
   46c0c:	003c9206 	br	45e58 <__alt_data_end+0xfffc5e58>
   46c10:	04000044 	movi	r16,1
   46c14:	dc000c15 	stw	r16,48(sp)
   46c18:	dc000615 	stw	r16,24(sp)
   46c1c:	dc002215 	stw	r16,136(sp)
   46c20:	e0001115 	stw	zero,68(fp)
   46c24:	000b883a 	mov	r5,zero
   46c28:	003c6906 	br	45dd0 <__alt_data_end+0xfffc5dd0>
   46c2c:	3021883a 	mov	r16,r6
   46c30:	003ffb06 	br	46c20 <__alt_data_end+0xfffc6c20>
   46c34:	1000021e 	bne	r2,zero,46c40 <_dtoa_r+0x11e0>
   46c38:	4200004c 	andi	r8,r8,1
   46c3c:	403e7d1e 	bne	r8,zero,46634 <__alt_data_end+0xfffc6634>
   46c40:	01000c04 	movi	r4,48
   46c44:	00000106 	br	46c4c <_dtoa_r+0x11ec>
   46c48:	102f883a 	mov	r23,r2
   46c4c:	b8bfffc4 	addi	r2,r23,-1
   46c50:	10c00007 	ldb	r3,0(r2)
   46c54:	193ffc26 	beq	r3,r4,46c48 <__alt_data_end+0xfffc6c48>
   46c58:	003e8706 	br	46678 <__alt_data_end+0xfffc6678>
   46c5c:	d8800517 	ldw	r2,20(sp)
   46c60:	00a3c83a 	sub	r17,zero,r2
   46c64:	8800a426 	beq	r17,zero,46ef8 <_dtoa_r+0x1498>
   46c68:	888003cc 	andi	r2,r17,15
   46c6c:	100490fa 	slli	r2,r2,3
   46c70:	00c00174 	movhi	r3,5
   46c74:	18c0f904 	addi	r3,r3,996
   46c78:	1885883a 	add	r2,r3,r2
   46c7c:	11800017 	ldw	r6,0(r2)
   46c80:	11c00117 	ldw	r7,4(r2)
   46c84:	9009883a 	mov	r4,r18
   46c88:	980b883a 	mov	r5,r19
   46c8c:	8823d13a 	srai	r17,r17,4
   46c90:	004e6d80 	call	4e6d8 <__muldf3>
   46c94:	d8800f15 	stw	r2,60(sp)
   46c98:	d8c01015 	stw	r3,64(sp)
   46c9c:	8800e826 	beq	r17,zero,47040 <_dtoa_r+0x15e0>
   46ca0:	05000174 	movhi	r20,5
   46ca4:	a500ef04 	addi	r20,r20,956
   46ca8:	04000084 	movi	r16,2
   46cac:	8980004c 	andi	r6,r17,1
   46cb0:	1009883a 	mov	r4,r2
   46cb4:	8823d07a 	srai	r17,r17,1
   46cb8:	180b883a 	mov	r5,r3
   46cbc:	30000426 	beq	r6,zero,46cd0 <_dtoa_r+0x1270>
   46cc0:	a1800017 	ldw	r6,0(r20)
   46cc4:	a1c00117 	ldw	r7,4(r20)
   46cc8:	84000044 	addi	r16,r16,1
   46ccc:	004e6d80 	call	4e6d8 <__muldf3>
   46cd0:	a5000204 	addi	r20,r20,8
   46cd4:	883ff51e 	bne	r17,zero,46cac <__alt_data_end+0xfffc6cac>
   46cd8:	d8800f15 	stw	r2,60(sp)
   46cdc:	d8c01015 	stw	r3,64(sp)
   46ce0:	003c7606 	br	45ebc <__alt_data_end+0xfffc5ebc>
   46ce4:	00c00c04 	movi	r3,48
   46ce8:	10c00005 	stb	r3,0(r2)
   46cec:	d8c00517 	ldw	r3,20(sp)
   46cf0:	bd3fffc3 	ldbu	r20,-1(r23)
   46cf4:	18c00044 	addi	r3,r3,1
   46cf8:	d8c00515 	stw	r3,20(sp)
   46cfc:	003db906 	br	463e4 <__alt_data_end+0xfffc63e4>
   46d00:	89400117 	ldw	r5,4(r17)
   46d04:	e009883a 	mov	r4,fp
   46d08:	004899c0 	call	4899c <_Balloc>
   46d0c:	89800417 	ldw	r6,16(r17)
   46d10:	89400304 	addi	r5,r17,12
   46d14:	11000304 	addi	r4,r2,12
   46d18:	31800084 	addi	r6,r6,2
   46d1c:	318d883a 	add	r6,r6,r6
   46d20:	318d883a 	add	r6,r6,r6
   46d24:	1027883a 	mov	r19,r2
   46d28:	0042c980 	call	42c98 <memcpy>
   46d2c:	01800044 	movi	r6,1
   46d30:	980b883a 	mov	r5,r19
   46d34:	e009883a 	mov	r4,fp
   46d38:	004911c0 	call	4911c <__lshift>
   46d3c:	1029883a 	mov	r20,r2
   46d40:	003ecc06 	br	46874 <__alt_data_end+0xfffc6874>
   46d44:	00800e44 	movi	r2,57
   46d48:	90809026 	beq	r18,r2,46f8c <_dtoa_r+0x152c>
   46d4c:	92000044 	addi	r8,r18,1
   46d50:	003f1f06 	br	469d0 <__alt_data_end+0xfffc69d0>
   46d54:	9011883a 	mov	r8,r18
   46d58:	8825883a 	mov	r18,r17
   46d5c:	a023883a 	mov	r17,r20
   46d60:	003e2906 	br	46608 <__alt_data_end+0xfffc6608>
   46d64:	002b883a 	mov	r21,zero
   46d68:	0023883a 	mov	r17,zero
   46d6c:	003f5406 	br	46ac0 <__alt_data_end+0xfffc6ac0>
   46d70:	61bfffc4 	addi	r6,r12,-1
   46d74:	300490fa 	slli	r2,r6,3
   46d78:	00c00174 	movhi	r3,5
   46d7c:	18c0f904 	addi	r3,r3,996
   46d80:	1885883a 	add	r2,r3,r2
   46d84:	11000017 	ldw	r4,0(r2)
   46d88:	11400117 	ldw	r5,4(r2)
   46d8c:	d8800717 	ldw	r2,28(sp)
   46d90:	880f883a 	mov	r7,r17
   46d94:	d9801215 	stw	r6,72(sp)
   46d98:	800d883a 	mov	r6,r16
   46d9c:	db001615 	stw	r12,88(sp)
   46da0:	15c00044 	addi	r23,r2,1
   46da4:	004e6d80 	call	4e6d8 <__muldf3>
   46da8:	d9401017 	ldw	r5,64(sp)
   46dac:	d9000f17 	ldw	r4,60(sp)
   46db0:	d8c01515 	stw	r3,84(sp)
   46db4:	d8801415 	stw	r2,80(sp)
   46db8:	004f6ec0 	call	4f6ec <__fixdfsi>
   46dbc:	1009883a 	mov	r4,r2
   46dc0:	1021883a 	mov	r16,r2
   46dc4:	004f76c0 	call	4f76c <__floatsidf>
   46dc8:	d9000f17 	ldw	r4,60(sp)
   46dcc:	d9401017 	ldw	r5,64(sp)
   46dd0:	100d883a 	mov	r6,r2
   46dd4:	180f883a 	mov	r7,r3
   46dd8:	004edf00 	call	4edf0 <__subdf3>
   46ddc:	1829883a 	mov	r20,r3
   46de0:	d8c00717 	ldw	r3,28(sp)
   46de4:	84000c04 	addi	r16,r16,48
   46de8:	1023883a 	mov	r17,r2
   46dec:	1c000005 	stb	r16,0(r3)
   46df0:	db001617 	ldw	r12,88(sp)
   46df4:	00800044 	movi	r2,1
   46df8:	60802226 	beq	r12,r2,46e84 <_dtoa_r+0x1424>
   46dfc:	d9c00717 	ldw	r7,28(sp)
   46e00:	8805883a 	mov	r2,r17
   46e04:	b82b883a 	mov	r21,r23
   46e08:	3b19883a 	add	r12,r7,r12
   46e0c:	6023883a 	mov	r17,r12
   46e10:	a007883a 	mov	r3,r20
   46e14:	dc800f15 	stw	r18,60(sp)
   46e18:	000d883a 	mov	r6,zero
   46e1c:	01d00934 	movhi	r7,16420
   46e20:	1009883a 	mov	r4,r2
   46e24:	180b883a 	mov	r5,r3
   46e28:	004e6d80 	call	4e6d8 <__muldf3>
   46e2c:	180b883a 	mov	r5,r3
   46e30:	1009883a 	mov	r4,r2
   46e34:	1829883a 	mov	r20,r3
   46e38:	1025883a 	mov	r18,r2
   46e3c:	004f6ec0 	call	4f6ec <__fixdfsi>
   46e40:	1009883a 	mov	r4,r2
   46e44:	1021883a 	mov	r16,r2
   46e48:	004f76c0 	call	4f76c <__floatsidf>
   46e4c:	100d883a 	mov	r6,r2
   46e50:	180f883a 	mov	r7,r3
   46e54:	9009883a 	mov	r4,r18
   46e58:	a00b883a 	mov	r5,r20
   46e5c:	84000c04 	addi	r16,r16,48
   46e60:	004edf00 	call	4edf0 <__subdf3>
   46e64:	ad400044 	addi	r21,r21,1
   46e68:	ac3fffc5 	stb	r16,-1(r21)
   46e6c:	ac7fea1e 	bne	r21,r17,46e18 <__alt_data_end+0xfffc6e18>
   46e70:	1023883a 	mov	r17,r2
   46e74:	d8801217 	ldw	r2,72(sp)
   46e78:	dc800f17 	ldw	r18,60(sp)
   46e7c:	1829883a 	mov	r20,r3
   46e80:	b8af883a 	add	r23,r23,r2
   46e84:	d9001417 	ldw	r4,80(sp)
   46e88:	d9401517 	ldw	r5,84(sp)
   46e8c:	000d883a 	mov	r6,zero
   46e90:	01cff834 	movhi	r7,16352
   46e94:	004d2ec0 	call	4d2ec <__adddf3>
   46e98:	880d883a 	mov	r6,r17
   46e9c:	a00f883a 	mov	r7,r20
   46ea0:	1009883a 	mov	r4,r2
   46ea4:	180b883a 	mov	r5,r3
   46ea8:	004e5e40 	call	4e5e4 <__ledf2>
   46eac:	10003e0e 	bge	r2,zero,46fa8 <_dtoa_r+0x1548>
   46eb0:	d9001317 	ldw	r4,76(sp)
   46eb4:	bd3fffc3 	ldbu	r20,-1(r23)
   46eb8:	d9000515 	stw	r4,20(sp)
   46ebc:	003d3b06 	br	463ac <__alt_data_end+0xfffc63ac>
   46ec0:	0027883a 	mov	r19,zero
   46ec4:	003f1b06 	br	46b34 <__alt_data_end+0xfffc6b34>
   46ec8:	d8800817 	ldw	r2,32(sp)
   46ecc:	11e9c83a 	sub	r20,r2,r7
   46ed0:	0005883a 	mov	r2,zero
   46ed4:	003d5406 	br	46428 <__alt_data_end+0xfffc6428>
   46ed8:	00800044 	movi	r2,1
   46edc:	003dc706 	br	465fc <__alt_data_end+0xfffc65fc>
   46ee0:	d8c00217 	ldw	r3,8(sp)
   46ee4:	00800d84 	movi	r2,54
   46ee8:	dd400a17 	ldw	r21,40(sp)
   46eec:	10c5c83a 	sub	r2,r2,r3
   46ef0:	dd000817 	ldw	r20,32(sp)
   46ef4:	003d4c06 	br	46428 <__alt_data_end+0xfffc6428>
   46ef8:	dc800f15 	stw	r18,60(sp)
   46efc:	dcc01015 	stw	r19,64(sp)
   46f00:	04000084 	movi	r16,2
   46f04:	003bed06 	br	45ebc <__alt_data_end+0xfffc5ebc>
   46f08:	d9000617 	ldw	r4,24(sp)
   46f0c:	203f0d26 	beq	r4,zero,46b44 <__alt_data_end+0xfffc6b44>
   46f10:	d9800c17 	ldw	r6,48(sp)
   46f14:	01bcab0e 	bge	zero,r6,461c4 <__alt_data_end+0xfffc61c4>
   46f18:	d9401017 	ldw	r5,64(sp)
   46f1c:	d9000f17 	ldw	r4,60(sp)
   46f20:	000d883a 	mov	r6,zero
   46f24:	01d00934 	movhi	r7,16420
   46f28:	004e6d80 	call	4e6d8 <__muldf3>
   46f2c:	81000044 	addi	r4,r16,1
   46f30:	d8800f15 	stw	r2,60(sp)
   46f34:	d8c01015 	stw	r3,64(sp)
   46f38:	004f76c0 	call	4f76c <__floatsidf>
   46f3c:	d9800f17 	ldw	r6,60(sp)
   46f40:	d9c01017 	ldw	r7,64(sp)
   46f44:	1009883a 	mov	r4,r2
   46f48:	180b883a 	mov	r5,r3
   46f4c:	004e6d80 	call	4e6d8 <__muldf3>
   46f50:	01d00734 	movhi	r7,16412
   46f54:	000d883a 	mov	r6,zero
   46f58:	1009883a 	mov	r4,r2
   46f5c:	180b883a 	mov	r5,r3
   46f60:	004d2ec0 	call	4d2ec <__adddf3>
   46f64:	d9c00517 	ldw	r7,20(sp)
   46f68:	047f3034 	movhi	r17,64704
   46f6c:	1021883a 	mov	r16,r2
   46f70:	39ffffc4 	addi	r7,r7,-1
   46f74:	d9c01315 	stw	r7,76(sp)
   46f78:	1c63883a 	add	r17,r3,r17
   46f7c:	db000c17 	ldw	r12,48(sp)
   46f80:	003bea06 	br	45f2c <__alt_data_end+0xfffc5f2c>
   46f84:	dc000915 	stw	r16,36(sp)
   46f88:	003e0e06 	br	467c4 <__alt_data_end+0xfffc67c4>
   46f8c:	01000e44 	movi	r4,57
   46f90:	8825883a 	mov	r18,r17
   46f94:	9dc00044 	addi	r23,r19,1
   46f98:	99000005 	stb	r4,0(r19)
   46f9c:	a023883a 	mov	r17,r20
   46fa0:	dc000915 	stw	r16,36(sp)
   46fa4:	003da406 	br	46638 <__alt_data_end+0xfffc6638>
   46fa8:	d9801417 	ldw	r6,80(sp)
   46fac:	d9c01517 	ldw	r7,84(sp)
   46fb0:	0009883a 	mov	r4,zero
   46fb4:	014ff834 	movhi	r5,16352
   46fb8:	004edf00 	call	4edf0 <__subdf3>
   46fbc:	880d883a 	mov	r6,r17
   46fc0:	a00f883a 	mov	r7,r20
   46fc4:	1009883a 	mov	r4,r2
   46fc8:	180b883a 	mov	r5,r3
   46fcc:	004e5080 	call	4e508 <__gedf2>
   46fd0:	00bc7c0e 	bge	zero,r2,461c4 <__alt_data_end+0xfffc61c4>
   46fd4:	01000c04 	movi	r4,48
   46fd8:	00000106 	br	46fe0 <_dtoa_r+0x1580>
   46fdc:	102f883a 	mov	r23,r2
   46fe0:	b8bfffc4 	addi	r2,r23,-1
   46fe4:	10c00007 	ldb	r3,0(r2)
   46fe8:	193ffc26 	beq	r3,r4,46fdc <__alt_data_end+0xfffc6fdc>
   46fec:	d9801317 	ldw	r6,76(sp)
   46ff0:	d9800515 	stw	r6,20(sp)
   46ff4:	003c4406 	br	46108 <__alt_data_end+0xfffc6108>
   46ff8:	d9801317 	ldw	r6,76(sp)
   46ffc:	d9800515 	stw	r6,20(sp)
   47000:	003cea06 	br	463ac <__alt_data_end+0xfffc63ac>
   47004:	dd800f17 	ldw	r22,60(sp)
   47008:	dcc01017 	ldw	r19,64(sp)
   4700c:	dc801217 	ldw	r18,72(sp)
   47010:	003c6c06 	br	461c4 <__alt_data_end+0xfffc61c4>
   47014:	903e031e 	bne	r18,zero,46824 <__alt_data_end+0xfffc6824>
   47018:	003ebb06 	br	46b08 <__alt_data_end+0xfffc6b08>
   4701c:	103e6c1e 	bne	r2,zero,469d0 <__alt_data_end+0xfffc69d0>
   47020:	4080004c 	andi	r2,r8,1
   47024:	103e6a26 	beq	r2,zero,469d0 <__alt_data_end+0xfffc69d0>
   47028:	003e6606 	br	469c4 <__alt_data_end+0xfffc69c4>
   4702c:	d8c00317 	ldw	r3,12(sp)
   47030:	00800084 	movi	r2,2
   47034:	10c02916 	blt	r2,r3,470dc <_dtoa_r+0x167c>
   47038:	d9000c17 	ldw	r4,48(sp)
   4703c:	003e8806 	br	46a60 <__alt_data_end+0xfffc6a60>
   47040:	04000084 	movi	r16,2
   47044:	003b9d06 	br	45ebc <__alt_data_end+0xfffc5ebc>
   47048:	d9001317 	ldw	r4,76(sp)
   4704c:	d9000515 	stw	r4,20(sp)
   47050:	003cd606 	br	463ac <__alt_data_end+0xfffc63ac>
   47054:	d8801317 	ldw	r2,76(sp)
   47058:	d8800515 	stw	r2,20(sp)
   4705c:	003c2a06 	br	46108 <__alt_data_end+0xfffc6108>
   47060:	d9800317 	ldw	r6,12(sp)
   47064:	00800084 	movi	r2,2
   47068:	11801516 	blt	r2,r6,470c0 <_dtoa_r+0x1660>
   4706c:	d9c00c17 	ldw	r7,48(sp)
   47070:	d9c00615 	stw	r7,24(sp)
   47074:	003df706 	br	46854 <__alt_data_end+0xfffc6854>
   47078:	193d3926 	beq	r3,r4,46560 <__alt_data_end+0xfffc6560>
   4707c:	00c00f04 	movi	r3,60
   47080:	1885c83a 	sub	r2,r3,r2
   47084:	003ddf06 	br	46804 <__alt_data_end+0xfffc6804>
   47088:	e009883a 	mov	r4,fp
   4708c:	e0001115 	stw	zero,68(fp)
   47090:	000b883a 	mov	r5,zero
   47094:	004899c0 	call	4899c <_Balloc>
   47098:	d8800715 	stw	r2,28(sp)
   4709c:	d8c00717 	ldw	r3,28(sp)
   470a0:	00bfffc4 	movi	r2,-1
   470a4:	01000044 	movi	r4,1
   470a8:	d8800c15 	stw	r2,48(sp)
   470ac:	e0c01015 	stw	r3,64(fp)
   470b0:	d9000b15 	stw	r4,44(sp)
   470b4:	d8800615 	stw	r2,24(sp)
   470b8:	d8002215 	stw	zero,136(sp)
   470bc:	003c4106 	br	461c4 <__alt_data_end+0xfffc61c4>
   470c0:	d8c00c17 	ldw	r3,48(sp)
   470c4:	d8c00615 	stw	r3,24(sp)
   470c8:	003e7006 	br	46a8c <__alt_data_end+0xfffc6a8c>
   470cc:	04400044 	movi	r17,1
   470d0:	003b2006 	br	45d54 <__alt_data_end+0xfffc5d54>
   470d4:	000b883a 	mov	r5,zero
   470d8:	003b3d06 	br	45dd0 <__alt_data_end+0xfffc5dd0>
   470dc:	d8800c17 	ldw	r2,48(sp)
   470e0:	d8800615 	stw	r2,24(sp)
   470e4:	003e6906 	br	46a8c <__alt_data_end+0xfffc6a8c>

000470e8 <__sflush_r>:
   470e8:	2880030b 	ldhu	r2,12(r5)
   470ec:	defffb04 	addi	sp,sp,-20
   470f0:	dcc00315 	stw	r19,12(sp)
   470f4:	dc400115 	stw	r17,4(sp)
   470f8:	dfc00415 	stw	ra,16(sp)
   470fc:	dc800215 	stw	r18,8(sp)
   47100:	dc000015 	stw	r16,0(sp)
   47104:	10c0020c 	andi	r3,r2,8
   47108:	2823883a 	mov	r17,r5
   4710c:	2027883a 	mov	r19,r4
   47110:	1800311e 	bne	r3,zero,471d8 <__sflush_r+0xf0>
   47114:	28c00117 	ldw	r3,4(r5)
   47118:	10820014 	ori	r2,r2,2048
   4711c:	2880030d 	sth	r2,12(r5)
   47120:	00c04b0e 	bge	zero,r3,47250 <__sflush_r+0x168>
   47124:	8a000a17 	ldw	r8,40(r17)
   47128:	40002326 	beq	r8,zero,471b8 <__sflush_r+0xd0>
   4712c:	9c000017 	ldw	r16,0(r19)
   47130:	10c4000c 	andi	r3,r2,4096
   47134:	98000015 	stw	zero,0(r19)
   47138:	18004826 	beq	r3,zero,4725c <__sflush_r+0x174>
   4713c:	89801417 	ldw	r6,80(r17)
   47140:	10c0010c 	andi	r3,r2,4
   47144:	18000626 	beq	r3,zero,47160 <__sflush_r+0x78>
   47148:	88c00117 	ldw	r3,4(r17)
   4714c:	88800c17 	ldw	r2,48(r17)
   47150:	30cdc83a 	sub	r6,r6,r3
   47154:	10000226 	beq	r2,zero,47160 <__sflush_r+0x78>
   47158:	88800f17 	ldw	r2,60(r17)
   4715c:	308dc83a 	sub	r6,r6,r2
   47160:	89400717 	ldw	r5,28(r17)
   47164:	000f883a 	mov	r7,zero
   47168:	9809883a 	mov	r4,r19
   4716c:	403ee83a 	callr	r8
   47170:	00ffffc4 	movi	r3,-1
   47174:	10c04426 	beq	r2,r3,47288 <__sflush_r+0x1a0>
   47178:	88c0030b 	ldhu	r3,12(r17)
   4717c:	89000417 	ldw	r4,16(r17)
   47180:	88000115 	stw	zero,4(r17)
   47184:	197dffcc 	andi	r5,r3,63487
   47188:	8940030d 	sth	r5,12(r17)
   4718c:	89000015 	stw	r4,0(r17)
   47190:	18c4000c 	andi	r3,r3,4096
   47194:	18002c1e 	bne	r3,zero,47248 <__sflush_r+0x160>
   47198:	89400c17 	ldw	r5,48(r17)
   4719c:	9c000015 	stw	r16,0(r19)
   471a0:	28000526 	beq	r5,zero,471b8 <__sflush_r+0xd0>
   471a4:	88801004 	addi	r2,r17,64
   471a8:	28800226 	beq	r5,r2,471b4 <__sflush_r+0xcc>
   471ac:	9809883a 	mov	r4,r19
   471b0:	00478540 	call	47854 <_free_r>
   471b4:	88000c15 	stw	zero,48(r17)
   471b8:	0005883a 	mov	r2,zero
   471bc:	dfc00417 	ldw	ra,16(sp)
   471c0:	dcc00317 	ldw	r19,12(sp)
   471c4:	dc800217 	ldw	r18,8(sp)
   471c8:	dc400117 	ldw	r17,4(sp)
   471cc:	dc000017 	ldw	r16,0(sp)
   471d0:	dec00504 	addi	sp,sp,20
   471d4:	f800283a 	ret
   471d8:	2c800417 	ldw	r18,16(r5)
   471dc:	903ff626 	beq	r18,zero,471b8 <__alt_data_end+0xfffc71b8>
   471e0:	2c000017 	ldw	r16,0(r5)
   471e4:	108000cc 	andi	r2,r2,3
   471e8:	2c800015 	stw	r18,0(r5)
   471ec:	84a1c83a 	sub	r16,r16,r18
   471f0:	1000131e 	bne	r2,zero,47240 <__sflush_r+0x158>
   471f4:	28800517 	ldw	r2,20(r5)
   471f8:	88800215 	stw	r2,8(r17)
   471fc:	04000316 	blt	zero,r16,4720c <__sflush_r+0x124>
   47200:	003fed06 	br	471b8 <__alt_data_end+0xfffc71b8>
   47204:	90a5883a 	add	r18,r18,r2
   47208:	043feb0e 	bge	zero,r16,471b8 <__alt_data_end+0xfffc71b8>
   4720c:	88800917 	ldw	r2,36(r17)
   47210:	89400717 	ldw	r5,28(r17)
   47214:	800f883a 	mov	r7,r16
   47218:	900d883a 	mov	r6,r18
   4721c:	9809883a 	mov	r4,r19
   47220:	103ee83a 	callr	r2
   47224:	80a1c83a 	sub	r16,r16,r2
   47228:	00bff616 	blt	zero,r2,47204 <__alt_data_end+0xfffc7204>
   4722c:	88c0030b 	ldhu	r3,12(r17)
   47230:	00bfffc4 	movi	r2,-1
   47234:	18c01014 	ori	r3,r3,64
   47238:	88c0030d 	sth	r3,12(r17)
   4723c:	003fdf06 	br	471bc <__alt_data_end+0xfffc71bc>
   47240:	0005883a 	mov	r2,zero
   47244:	003fec06 	br	471f8 <__alt_data_end+0xfffc71f8>
   47248:	88801415 	stw	r2,80(r17)
   4724c:	003fd206 	br	47198 <__alt_data_end+0xfffc7198>
   47250:	28c00f17 	ldw	r3,60(r5)
   47254:	00ffb316 	blt	zero,r3,47124 <__alt_data_end+0xfffc7124>
   47258:	003fd706 	br	471b8 <__alt_data_end+0xfffc71b8>
   4725c:	89400717 	ldw	r5,28(r17)
   47260:	000d883a 	mov	r6,zero
   47264:	01c00044 	movi	r7,1
   47268:	9809883a 	mov	r4,r19
   4726c:	403ee83a 	callr	r8
   47270:	100d883a 	mov	r6,r2
   47274:	00bfffc4 	movi	r2,-1
   47278:	30801426 	beq	r6,r2,472cc <__sflush_r+0x1e4>
   4727c:	8880030b 	ldhu	r2,12(r17)
   47280:	8a000a17 	ldw	r8,40(r17)
   47284:	003fae06 	br	47140 <__alt_data_end+0xfffc7140>
   47288:	98c00017 	ldw	r3,0(r19)
   4728c:	183fba26 	beq	r3,zero,47178 <__alt_data_end+0xfffc7178>
   47290:	01000744 	movi	r4,29
   47294:	19000626 	beq	r3,r4,472b0 <__sflush_r+0x1c8>
   47298:	01000584 	movi	r4,22
   4729c:	19000426 	beq	r3,r4,472b0 <__sflush_r+0x1c8>
   472a0:	88c0030b 	ldhu	r3,12(r17)
   472a4:	18c01014 	ori	r3,r3,64
   472a8:	88c0030d 	sth	r3,12(r17)
   472ac:	003fc306 	br	471bc <__alt_data_end+0xfffc71bc>
   472b0:	8880030b 	ldhu	r2,12(r17)
   472b4:	88c00417 	ldw	r3,16(r17)
   472b8:	88000115 	stw	zero,4(r17)
   472bc:	10bdffcc 	andi	r2,r2,63487
   472c0:	8880030d 	sth	r2,12(r17)
   472c4:	88c00015 	stw	r3,0(r17)
   472c8:	003fb306 	br	47198 <__alt_data_end+0xfffc7198>
   472cc:	98800017 	ldw	r2,0(r19)
   472d0:	103fea26 	beq	r2,zero,4727c <__alt_data_end+0xfffc727c>
   472d4:	00c00744 	movi	r3,29
   472d8:	10c00226 	beq	r2,r3,472e4 <__sflush_r+0x1fc>
   472dc:	00c00584 	movi	r3,22
   472e0:	10c0031e 	bne	r2,r3,472f0 <__sflush_r+0x208>
   472e4:	9c000015 	stw	r16,0(r19)
   472e8:	0005883a 	mov	r2,zero
   472ec:	003fb306 	br	471bc <__alt_data_end+0xfffc71bc>
   472f0:	88c0030b 	ldhu	r3,12(r17)
   472f4:	3005883a 	mov	r2,r6
   472f8:	18c01014 	ori	r3,r3,64
   472fc:	88c0030d 	sth	r3,12(r17)
   47300:	003fae06 	br	471bc <__alt_data_end+0xfffc71bc>

00047304 <_fflush_r>:
   47304:	defffd04 	addi	sp,sp,-12
   47308:	dc000115 	stw	r16,4(sp)
   4730c:	dfc00215 	stw	ra,8(sp)
   47310:	2021883a 	mov	r16,r4
   47314:	20000226 	beq	r4,zero,47320 <_fflush_r+0x1c>
   47318:	20800e17 	ldw	r2,56(r4)
   4731c:	10000c26 	beq	r2,zero,47350 <_fflush_r+0x4c>
   47320:	2880030f 	ldh	r2,12(r5)
   47324:	1000051e 	bne	r2,zero,4733c <_fflush_r+0x38>
   47328:	0005883a 	mov	r2,zero
   4732c:	dfc00217 	ldw	ra,8(sp)
   47330:	dc000117 	ldw	r16,4(sp)
   47334:	dec00304 	addi	sp,sp,12
   47338:	f800283a 	ret
   4733c:	8009883a 	mov	r4,r16
   47340:	dfc00217 	ldw	ra,8(sp)
   47344:	dc000117 	ldw	r16,4(sp)
   47348:	dec00304 	addi	sp,sp,12
   4734c:	00470e81 	jmpi	470e8 <__sflush_r>
   47350:	d9400015 	stw	r5,0(sp)
   47354:	00476e00 	call	476e0 <__sinit>
   47358:	d9400017 	ldw	r5,0(sp)
   4735c:	003ff006 	br	47320 <__alt_data_end+0xfffc7320>

00047360 <fflush>:
   47360:	20000526 	beq	r4,zero,47378 <fflush+0x18>
   47364:	00800174 	movhi	r2,5
   47368:	10882a04 	addi	r2,r2,8360
   4736c:	200b883a 	mov	r5,r4
   47370:	11000017 	ldw	r4,0(r2)
   47374:	00473041 	jmpi	47304 <_fflush_r>
   47378:	00800174 	movhi	r2,5
   4737c:	10882904 	addi	r2,r2,8356
   47380:	11000017 	ldw	r4,0(r2)
   47384:	01400134 	movhi	r5,4
   47388:	295cc104 	addi	r5,r5,29444
   4738c:	0047c281 	jmpi	47c28 <_fwalk_reent>

00047390 <__fp_unlock>:
   47390:	0005883a 	mov	r2,zero
   47394:	f800283a 	ret

00047398 <_cleanup_r>:
   47398:	01400174 	movhi	r5,5
   4739c:	296d0e04 	addi	r5,r5,-19400
   473a0:	0047c281 	jmpi	47c28 <_fwalk_reent>

000473a4 <__sinit.part.1>:
   473a4:	defff704 	addi	sp,sp,-36
   473a8:	00c00134 	movhi	r3,4
   473ac:	dfc00815 	stw	ra,32(sp)
   473b0:	ddc00715 	stw	r23,28(sp)
   473b4:	dd800615 	stw	r22,24(sp)
   473b8:	dd400515 	stw	r21,20(sp)
   473bc:	dd000415 	stw	r20,16(sp)
   473c0:	dcc00315 	stw	r19,12(sp)
   473c4:	dc800215 	stw	r18,8(sp)
   473c8:	dc400115 	stw	r17,4(sp)
   473cc:	dc000015 	stw	r16,0(sp)
   473d0:	18dce604 	addi	r3,r3,29592
   473d4:	24000117 	ldw	r16,4(r4)
   473d8:	20c00f15 	stw	r3,60(r4)
   473dc:	2080bb04 	addi	r2,r4,748
   473e0:	00c000c4 	movi	r3,3
   473e4:	20c0b915 	stw	r3,740(r4)
   473e8:	2080ba15 	stw	r2,744(r4)
   473ec:	2000b815 	stw	zero,736(r4)
   473f0:	05c00204 	movi	r23,8
   473f4:	00800104 	movi	r2,4
   473f8:	2025883a 	mov	r18,r4
   473fc:	b80d883a 	mov	r6,r23
   47400:	81001704 	addi	r4,r16,92
   47404:	000b883a 	mov	r5,zero
   47408:	80000015 	stw	zero,0(r16)
   4740c:	80000115 	stw	zero,4(r16)
   47410:	80000215 	stw	zero,8(r16)
   47414:	8080030d 	sth	r2,12(r16)
   47418:	80001915 	stw	zero,100(r16)
   4741c:	8000038d 	sth	zero,14(r16)
   47420:	80000415 	stw	zero,16(r16)
   47424:	80000515 	stw	zero,20(r16)
   47428:	80000615 	stw	zero,24(r16)
   4742c:	00488740 	call	48874 <memset>
   47430:	05800174 	movhi	r22,5
   47434:	94400217 	ldw	r17,8(r18)
   47438:	05400174 	movhi	r21,5
   4743c:	05000174 	movhi	r20,5
   47440:	04c00174 	movhi	r19,5
   47444:	b5a69804 	addi	r22,r22,-26016
   47448:	ad66af04 	addi	r21,r21,-25924
   4744c:	a526ce04 	addi	r20,r20,-25800
   47450:	9ce6e504 	addi	r19,r19,-25708
   47454:	85800815 	stw	r22,32(r16)
   47458:	85400915 	stw	r21,36(r16)
   4745c:	85000a15 	stw	r20,40(r16)
   47460:	84c00b15 	stw	r19,44(r16)
   47464:	84000715 	stw	r16,28(r16)
   47468:	00800284 	movi	r2,10
   4746c:	8880030d 	sth	r2,12(r17)
   47470:	00800044 	movi	r2,1
   47474:	b80d883a 	mov	r6,r23
   47478:	89001704 	addi	r4,r17,92
   4747c:	000b883a 	mov	r5,zero
   47480:	88000015 	stw	zero,0(r17)
   47484:	88000115 	stw	zero,4(r17)
   47488:	88000215 	stw	zero,8(r17)
   4748c:	88001915 	stw	zero,100(r17)
   47490:	8880038d 	sth	r2,14(r17)
   47494:	88000415 	stw	zero,16(r17)
   47498:	88000515 	stw	zero,20(r17)
   4749c:	88000615 	stw	zero,24(r17)
   474a0:	00488740 	call	48874 <memset>
   474a4:	94000317 	ldw	r16,12(r18)
   474a8:	00800484 	movi	r2,18
   474ac:	8c400715 	stw	r17,28(r17)
   474b0:	8d800815 	stw	r22,32(r17)
   474b4:	8d400915 	stw	r21,36(r17)
   474b8:	8d000a15 	stw	r20,40(r17)
   474bc:	8cc00b15 	stw	r19,44(r17)
   474c0:	8080030d 	sth	r2,12(r16)
   474c4:	00800084 	movi	r2,2
   474c8:	80000015 	stw	zero,0(r16)
   474cc:	80000115 	stw	zero,4(r16)
   474d0:	80000215 	stw	zero,8(r16)
   474d4:	80001915 	stw	zero,100(r16)
   474d8:	8080038d 	sth	r2,14(r16)
   474dc:	80000415 	stw	zero,16(r16)
   474e0:	80000515 	stw	zero,20(r16)
   474e4:	80000615 	stw	zero,24(r16)
   474e8:	b80d883a 	mov	r6,r23
   474ec:	000b883a 	mov	r5,zero
   474f0:	81001704 	addi	r4,r16,92
   474f4:	00488740 	call	48874 <memset>
   474f8:	00800044 	movi	r2,1
   474fc:	84000715 	stw	r16,28(r16)
   47500:	85800815 	stw	r22,32(r16)
   47504:	85400915 	stw	r21,36(r16)
   47508:	85000a15 	stw	r20,40(r16)
   4750c:	84c00b15 	stw	r19,44(r16)
   47510:	90800e15 	stw	r2,56(r18)
   47514:	dfc00817 	ldw	ra,32(sp)
   47518:	ddc00717 	ldw	r23,28(sp)
   4751c:	dd800617 	ldw	r22,24(sp)
   47520:	dd400517 	ldw	r21,20(sp)
   47524:	dd000417 	ldw	r20,16(sp)
   47528:	dcc00317 	ldw	r19,12(sp)
   4752c:	dc800217 	ldw	r18,8(sp)
   47530:	dc400117 	ldw	r17,4(sp)
   47534:	dc000017 	ldw	r16,0(sp)
   47538:	dec00904 	addi	sp,sp,36
   4753c:	f800283a 	ret

00047540 <__fp_lock>:
   47540:	0005883a 	mov	r2,zero
   47544:	f800283a 	ret

00047548 <__sfmoreglue>:
   47548:	defffc04 	addi	sp,sp,-16
   4754c:	dc400115 	stw	r17,4(sp)
   47550:	2c7fffc4 	addi	r17,r5,-1
   47554:	8c401a24 	muli	r17,r17,104
   47558:	dc800215 	stw	r18,8(sp)
   4755c:	2825883a 	mov	r18,r5
   47560:	89401d04 	addi	r5,r17,116
   47564:	dc000015 	stw	r16,0(sp)
   47568:	dfc00315 	stw	ra,12(sp)
   4756c:	0047f840 	call	47f84 <_malloc_r>
   47570:	1021883a 	mov	r16,r2
   47574:	10000726 	beq	r2,zero,47594 <__sfmoreglue+0x4c>
   47578:	11000304 	addi	r4,r2,12
   4757c:	10000015 	stw	zero,0(r2)
   47580:	14800115 	stw	r18,4(r2)
   47584:	11000215 	stw	r4,8(r2)
   47588:	89801a04 	addi	r6,r17,104
   4758c:	000b883a 	mov	r5,zero
   47590:	00488740 	call	48874 <memset>
   47594:	8005883a 	mov	r2,r16
   47598:	dfc00317 	ldw	ra,12(sp)
   4759c:	dc800217 	ldw	r18,8(sp)
   475a0:	dc400117 	ldw	r17,4(sp)
   475a4:	dc000017 	ldw	r16,0(sp)
   475a8:	dec00404 	addi	sp,sp,16
   475ac:	f800283a 	ret

000475b0 <__sfp>:
   475b0:	defffb04 	addi	sp,sp,-20
   475b4:	dc000015 	stw	r16,0(sp)
   475b8:	04000174 	movhi	r16,5
   475bc:	84082904 	addi	r16,r16,8356
   475c0:	dcc00315 	stw	r19,12(sp)
   475c4:	2027883a 	mov	r19,r4
   475c8:	81000017 	ldw	r4,0(r16)
   475cc:	dfc00415 	stw	ra,16(sp)
   475d0:	dc800215 	stw	r18,8(sp)
   475d4:	20800e17 	ldw	r2,56(r4)
   475d8:	dc400115 	stw	r17,4(sp)
   475dc:	1000021e 	bne	r2,zero,475e8 <__sfp+0x38>
   475e0:	00473a40 	call	473a4 <__sinit.part.1>
   475e4:	81000017 	ldw	r4,0(r16)
   475e8:	2480b804 	addi	r18,r4,736
   475ec:	047fffc4 	movi	r17,-1
   475f0:	91000117 	ldw	r4,4(r18)
   475f4:	94000217 	ldw	r16,8(r18)
   475f8:	213fffc4 	addi	r4,r4,-1
   475fc:	20000a16 	blt	r4,zero,47628 <__sfp+0x78>
   47600:	8080030f 	ldh	r2,12(r16)
   47604:	10000c26 	beq	r2,zero,47638 <__sfp+0x88>
   47608:	80c01d04 	addi	r3,r16,116
   4760c:	00000206 	br	47618 <__sfp+0x68>
   47610:	18bfe60f 	ldh	r2,-104(r3)
   47614:	10000826 	beq	r2,zero,47638 <__sfp+0x88>
   47618:	213fffc4 	addi	r4,r4,-1
   4761c:	1c3ffd04 	addi	r16,r3,-12
   47620:	18c01a04 	addi	r3,r3,104
   47624:	247ffa1e 	bne	r4,r17,47610 <__alt_data_end+0xfffc7610>
   47628:	90800017 	ldw	r2,0(r18)
   4762c:	10001d26 	beq	r2,zero,476a4 <__sfp+0xf4>
   47630:	1025883a 	mov	r18,r2
   47634:	003fee06 	br	475f0 <__alt_data_end+0xfffc75f0>
   47638:	00bfffc4 	movi	r2,-1
   4763c:	8080038d 	sth	r2,14(r16)
   47640:	00800044 	movi	r2,1
   47644:	8080030d 	sth	r2,12(r16)
   47648:	80001915 	stw	zero,100(r16)
   4764c:	80000015 	stw	zero,0(r16)
   47650:	80000215 	stw	zero,8(r16)
   47654:	80000115 	stw	zero,4(r16)
   47658:	80000415 	stw	zero,16(r16)
   4765c:	80000515 	stw	zero,20(r16)
   47660:	80000615 	stw	zero,24(r16)
   47664:	01800204 	movi	r6,8
   47668:	000b883a 	mov	r5,zero
   4766c:	81001704 	addi	r4,r16,92
   47670:	00488740 	call	48874 <memset>
   47674:	8005883a 	mov	r2,r16
   47678:	80000c15 	stw	zero,48(r16)
   4767c:	80000d15 	stw	zero,52(r16)
   47680:	80001115 	stw	zero,68(r16)
   47684:	80001215 	stw	zero,72(r16)
   47688:	dfc00417 	ldw	ra,16(sp)
   4768c:	dcc00317 	ldw	r19,12(sp)
   47690:	dc800217 	ldw	r18,8(sp)
   47694:	dc400117 	ldw	r17,4(sp)
   47698:	dc000017 	ldw	r16,0(sp)
   4769c:	dec00504 	addi	sp,sp,20
   476a0:	f800283a 	ret
   476a4:	01400104 	movi	r5,4
   476a8:	9809883a 	mov	r4,r19
   476ac:	00475480 	call	47548 <__sfmoreglue>
   476b0:	90800015 	stw	r2,0(r18)
   476b4:	103fde1e 	bne	r2,zero,47630 <__alt_data_end+0xfffc7630>
   476b8:	00800304 	movi	r2,12
   476bc:	98800015 	stw	r2,0(r19)
   476c0:	0005883a 	mov	r2,zero
   476c4:	003ff006 	br	47688 <__alt_data_end+0xfffc7688>

000476c8 <_cleanup>:
   476c8:	00800174 	movhi	r2,5
   476cc:	10882904 	addi	r2,r2,8356
   476d0:	11000017 	ldw	r4,0(r2)
   476d4:	01400174 	movhi	r5,5
   476d8:	296d0e04 	addi	r5,r5,-19400
   476dc:	0047c281 	jmpi	47c28 <_fwalk_reent>

000476e0 <__sinit>:
   476e0:	20800e17 	ldw	r2,56(r4)
   476e4:	10000126 	beq	r2,zero,476ec <__sinit+0xc>
   476e8:	f800283a 	ret
   476ec:	00473a41 	jmpi	473a4 <__sinit.part.1>

000476f0 <__sfp_lock_acquire>:
   476f0:	f800283a 	ret

000476f4 <__sfp_lock_release>:
   476f4:	f800283a 	ret

000476f8 <__sinit_lock_acquire>:
   476f8:	f800283a 	ret

000476fc <__sinit_lock_release>:
   476fc:	f800283a 	ret

00047700 <__fp_lock_all>:
   47700:	00800174 	movhi	r2,5
   47704:	10882a04 	addi	r2,r2,8360
   47708:	11000017 	ldw	r4,0(r2)
   4770c:	01400134 	movhi	r5,4
   47710:	295d5004 	addi	r5,r5,30016
   47714:	0047b641 	jmpi	47b64 <_fwalk>

00047718 <__fp_unlock_all>:
   47718:	00800174 	movhi	r2,5
   4771c:	10882a04 	addi	r2,r2,8360
   47720:	11000017 	ldw	r4,0(r2)
   47724:	01400134 	movhi	r5,4
   47728:	295ce404 	addi	r5,r5,29584
   4772c:	0047b641 	jmpi	47b64 <_fwalk>

00047730 <_malloc_trim_r>:
   47730:	defffb04 	addi	sp,sp,-20
   47734:	dcc00315 	stw	r19,12(sp)
   47738:	04c00174 	movhi	r19,5
   4773c:	dc800215 	stw	r18,8(sp)
   47740:	dc400115 	stw	r17,4(sp)
   47744:	dc000015 	stw	r16,0(sp)
   47748:	dfc00415 	stw	ra,16(sp)
   4774c:	2821883a 	mov	r16,r5
   47750:	9cc71c04 	addi	r19,r19,7280
   47754:	2025883a 	mov	r18,r4
   47758:	004fc640 	call	4fc64 <__malloc_lock>
   4775c:	98800217 	ldw	r2,8(r19)
   47760:	14400117 	ldw	r17,4(r2)
   47764:	00bfff04 	movi	r2,-4
   47768:	88a2703a 	and	r17,r17,r2
   4776c:	8c21c83a 	sub	r16,r17,r16
   47770:	8403fbc4 	addi	r16,r16,4079
   47774:	8020d33a 	srli	r16,r16,12
   47778:	0083ffc4 	movi	r2,4095
   4777c:	843fffc4 	addi	r16,r16,-1
   47780:	8020933a 	slli	r16,r16,12
   47784:	1400060e 	bge	r2,r16,477a0 <_malloc_trim_r+0x70>
   47788:	000b883a 	mov	r5,zero
   4778c:	9009883a 	mov	r4,r18
   47790:	0049a0c0 	call	49a0c <_sbrk_r>
   47794:	98c00217 	ldw	r3,8(r19)
   47798:	1c47883a 	add	r3,r3,r17
   4779c:	10c00a26 	beq	r2,r3,477c8 <_malloc_trim_r+0x98>
   477a0:	9009883a 	mov	r4,r18
   477a4:	004fc880 	call	4fc88 <__malloc_unlock>
   477a8:	0005883a 	mov	r2,zero
   477ac:	dfc00417 	ldw	ra,16(sp)
   477b0:	dcc00317 	ldw	r19,12(sp)
   477b4:	dc800217 	ldw	r18,8(sp)
   477b8:	dc400117 	ldw	r17,4(sp)
   477bc:	dc000017 	ldw	r16,0(sp)
   477c0:	dec00504 	addi	sp,sp,20
   477c4:	f800283a 	ret
   477c8:	040bc83a 	sub	r5,zero,r16
   477cc:	9009883a 	mov	r4,r18
   477d0:	0049a0c0 	call	49a0c <_sbrk_r>
   477d4:	00ffffc4 	movi	r3,-1
   477d8:	10c00d26 	beq	r2,r3,47810 <_malloc_trim_r+0xe0>
   477dc:	00c00174 	movhi	r3,5
   477e0:	18cefb04 	addi	r3,r3,15340
   477e4:	18800017 	ldw	r2,0(r3)
   477e8:	99000217 	ldw	r4,8(r19)
   477ec:	8c23c83a 	sub	r17,r17,r16
   477f0:	8c400054 	ori	r17,r17,1
   477f4:	1421c83a 	sub	r16,r2,r16
   477f8:	24400115 	stw	r17,4(r4)
   477fc:	9009883a 	mov	r4,r18
   47800:	1c000015 	stw	r16,0(r3)
   47804:	004fc880 	call	4fc88 <__malloc_unlock>
   47808:	00800044 	movi	r2,1
   4780c:	003fe706 	br	477ac <__alt_data_end+0xfffc77ac>
   47810:	000b883a 	mov	r5,zero
   47814:	9009883a 	mov	r4,r18
   47818:	0049a0c0 	call	49a0c <_sbrk_r>
   4781c:	99000217 	ldw	r4,8(r19)
   47820:	014003c4 	movi	r5,15
   47824:	1107c83a 	sub	r3,r2,r4
   47828:	28ffdd0e 	bge	r5,r3,477a0 <__alt_data_end+0xfffc77a0>
   4782c:	01400174 	movhi	r5,5
   47830:	29482c04 	addi	r5,r5,8368
   47834:	29400017 	ldw	r5,0(r5)
   47838:	18c00054 	ori	r3,r3,1
   4783c:	20c00115 	stw	r3,4(r4)
   47840:	00c00174 	movhi	r3,5
   47844:	1145c83a 	sub	r2,r2,r5
   47848:	18cefb04 	addi	r3,r3,15340
   4784c:	18800015 	stw	r2,0(r3)
   47850:	003fd306 	br	477a0 <__alt_data_end+0xfffc77a0>

00047854 <_free_r>:
   47854:	28004126 	beq	r5,zero,4795c <_free_r+0x108>
   47858:	defffd04 	addi	sp,sp,-12
   4785c:	dc400115 	stw	r17,4(sp)
   47860:	dc000015 	stw	r16,0(sp)
   47864:	2023883a 	mov	r17,r4
   47868:	2821883a 	mov	r16,r5
   4786c:	dfc00215 	stw	ra,8(sp)
   47870:	004fc640 	call	4fc64 <__malloc_lock>
   47874:	81ffff17 	ldw	r7,-4(r16)
   47878:	00bfff84 	movi	r2,-2
   4787c:	01000174 	movhi	r4,5
   47880:	81bffe04 	addi	r6,r16,-8
   47884:	3884703a 	and	r2,r7,r2
   47888:	21071c04 	addi	r4,r4,7280
   4788c:	308b883a 	add	r5,r6,r2
   47890:	2a400117 	ldw	r9,4(r5)
   47894:	22000217 	ldw	r8,8(r4)
   47898:	00ffff04 	movi	r3,-4
   4789c:	48c6703a 	and	r3,r9,r3
   478a0:	2a005726 	beq	r5,r8,47a00 <_free_r+0x1ac>
   478a4:	28c00115 	stw	r3,4(r5)
   478a8:	39c0004c 	andi	r7,r7,1
   478ac:	3800091e 	bne	r7,zero,478d4 <_free_r+0x80>
   478b0:	823ffe17 	ldw	r8,-8(r16)
   478b4:	22400204 	addi	r9,r4,8
   478b8:	320dc83a 	sub	r6,r6,r8
   478bc:	31c00217 	ldw	r7,8(r6)
   478c0:	1205883a 	add	r2,r2,r8
   478c4:	3a406526 	beq	r7,r9,47a5c <_free_r+0x208>
   478c8:	32000317 	ldw	r8,12(r6)
   478cc:	3a000315 	stw	r8,12(r7)
   478d0:	41c00215 	stw	r7,8(r8)
   478d4:	28cf883a 	add	r7,r5,r3
   478d8:	39c00117 	ldw	r7,4(r7)
   478dc:	39c0004c 	andi	r7,r7,1
   478e0:	38003a26 	beq	r7,zero,479cc <_free_r+0x178>
   478e4:	10c00054 	ori	r3,r2,1
   478e8:	30c00115 	stw	r3,4(r6)
   478ec:	3087883a 	add	r3,r6,r2
   478f0:	18800015 	stw	r2,0(r3)
   478f4:	00c07fc4 	movi	r3,511
   478f8:	18801936 	bltu	r3,r2,47960 <_free_r+0x10c>
   478fc:	1004d0fa 	srli	r2,r2,3
   47900:	01c00044 	movi	r7,1
   47904:	21400117 	ldw	r5,4(r4)
   47908:	10c00044 	addi	r3,r2,1
   4790c:	18c7883a 	add	r3,r3,r3
   47910:	1005d0ba 	srai	r2,r2,2
   47914:	18c7883a 	add	r3,r3,r3
   47918:	18c7883a 	add	r3,r3,r3
   4791c:	1907883a 	add	r3,r3,r4
   47920:	3884983a 	sll	r2,r7,r2
   47924:	19c00017 	ldw	r7,0(r3)
   47928:	1a3ffe04 	addi	r8,r3,-8
   4792c:	1144b03a 	or	r2,r2,r5
   47930:	32000315 	stw	r8,12(r6)
   47934:	31c00215 	stw	r7,8(r6)
   47938:	20800115 	stw	r2,4(r4)
   4793c:	19800015 	stw	r6,0(r3)
   47940:	39800315 	stw	r6,12(r7)
   47944:	8809883a 	mov	r4,r17
   47948:	dfc00217 	ldw	ra,8(sp)
   4794c:	dc400117 	ldw	r17,4(sp)
   47950:	dc000017 	ldw	r16,0(sp)
   47954:	dec00304 	addi	sp,sp,12
   47958:	004fc881 	jmpi	4fc88 <__malloc_unlock>
   4795c:	f800283a 	ret
   47960:	100ad27a 	srli	r5,r2,9
   47964:	00c00104 	movi	r3,4
   47968:	19404a36 	bltu	r3,r5,47a94 <_free_r+0x240>
   4796c:	100ad1ba 	srli	r5,r2,6
   47970:	28c00e44 	addi	r3,r5,57
   47974:	18c7883a 	add	r3,r3,r3
   47978:	29400e04 	addi	r5,r5,56
   4797c:	18c7883a 	add	r3,r3,r3
   47980:	18c7883a 	add	r3,r3,r3
   47984:	1909883a 	add	r4,r3,r4
   47988:	20c00017 	ldw	r3,0(r4)
   4798c:	01c00174 	movhi	r7,5
   47990:	213ffe04 	addi	r4,r4,-8
   47994:	39c71c04 	addi	r7,r7,7280
   47998:	20c04426 	beq	r4,r3,47aac <_free_r+0x258>
   4799c:	01ffff04 	movi	r7,-4
   479a0:	19400117 	ldw	r5,4(r3)
   479a4:	29ca703a 	and	r5,r5,r7
   479a8:	1140022e 	bgeu	r2,r5,479b4 <_free_r+0x160>
   479ac:	18c00217 	ldw	r3,8(r3)
   479b0:	20fffb1e 	bne	r4,r3,479a0 <__alt_data_end+0xfffc79a0>
   479b4:	19000317 	ldw	r4,12(r3)
   479b8:	31000315 	stw	r4,12(r6)
   479bc:	30c00215 	stw	r3,8(r6)
   479c0:	21800215 	stw	r6,8(r4)
   479c4:	19800315 	stw	r6,12(r3)
   479c8:	003fde06 	br	47944 <__alt_data_end+0xfffc7944>
   479cc:	29c00217 	ldw	r7,8(r5)
   479d0:	10c5883a 	add	r2,r2,r3
   479d4:	00c00174 	movhi	r3,5
   479d8:	18c71e04 	addi	r3,r3,7288
   479dc:	38c03b26 	beq	r7,r3,47acc <_free_r+0x278>
   479e0:	2a000317 	ldw	r8,12(r5)
   479e4:	11400054 	ori	r5,r2,1
   479e8:	3087883a 	add	r3,r6,r2
   479ec:	3a000315 	stw	r8,12(r7)
   479f0:	41c00215 	stw	r7,8(r8)
   479f4:	31400115 	stw	r5,4(r6)
   479f8:	18800015 	stw	r2,0(r3)
   479fc:	003fbd06 	br	478f4 <__alt_data_end+0xfffc78f4>
   47a00:	39c0004c 	andi	r7,r7,1
   47a04:	10c5883a 	add	r2,r2,r3
   47a08:	3800071e 	bne	r7,zero,47a28 <_free_r+0x1d4>
   47a0c:	81fffe17 	ldw	r7,-8(r16)
   47a10:	31cdc83a 	sub	r6,r6,r7
   47a14:	30c00317 	ldw	r3,12(r6)
   47a18:	31400217 	ldw	r5,8(r6)
   47a1c:	11c5883a 	add	r2,r2,r7
   47a20:	28c00315 	stw	r3,12(r5)
   47a24:	19400215 	stw	r5,8(r3)
   47a28:	10c00054 	ori	r3,r2,1
   47a2c:	30c00115 	stw	r3,4(r6)
   47a30:	00c00174 	movhi	r3,5
   47a34:	18c82d04 	addi	r3,r3,8372
   47a38:	18c00017 	ldw	r3,0(r3)
   47a3c:	21800215 	stw	r6,8(r4)
   47a40:	10ffc036 	bltu	r2,r3,47944 <__alt_data_end+0xfffc7944>
   47a44:	00800174 	movhi	r2,5
   47a48:	108efa04 	addi	r2,r2,15336
   47a4c:	11400017 	ldw	r5,0(r2)
   47a50:	8809883a 	mov	r4,r17
   47a54:	00477300 	call	47730 <_malloc_trim_r>
   47a58:	003fba06 	br	47944 <__alt_data_end+0xfffc7944>
   47a5c:	28c9883a 	add	r4,r5,r3
   47a60:	21000117 	ldw	r4,4(r4)
   47a64:	2100004c 	andi	r4,r4,1
   47a68:	2000391e 	bne	r4,zero,47b50 <_free_r+0x2fc>
   47a6c:	29c00217 	ldw	r7,8(r5)
   47a70:	29000317 	ldw	r4,12(r5)
   47a74:	1885883a 	add	r2,r3,r2
   47a78:	10c00054 	ori	r3,r2,1
   47a7c:	39000315 	stw	r4,12(r7)
   47a80:	21c00215 	stw	r7,8(r4)
   47a84:	30c00115 	stw	r3,4(r6)
   47a88:	308d883a 	add	r6,r6,r2
   47a8c:	30800015 	stw	r2,0(r6)
   47a90:	003fac06 	br	47944 <__alt_data_end+0xfffc7944>
   47a94:	00c00504 	movi	r3,20
   47a98:	19401536 	bltu	r3,r5,47af0 <_free_r+0x29c>
   47a9c:	28c01704 	addi	r3,r5,92
   47aa0:	18c7883a 	add	r3,r3,r3
   47aa4:	294016c4 	addi	r5,r5,91
   47aa8:	003fb406 	br	4797c <__alt_data_end+0xfffc797c>
   47aac:	280bd0ba 	srai	r5,r5,2
   47ab0:	00c00044 	movi	r3,1
   47ab4:	38800117 	ldw	r2,4(r7)
   47ab8:	194a983a 	sll	r5,r3,r5
   47abc:	2007883a 	mov	r3,r4
   47ac0:	2884b03a 	or	r2,r5,r2
   47ac4:	38800115 	stw	r2,4(r7)
   47ac8:	003fbb06 	br	479b8 <__alt_data_end+0xfffc79b8>
   47acc:	21800515 	stw	r6,20(r4)
   47ad0:	21800415 	stw	r6,16(r4)
   47ad4:	10c00054 	ori	r3,r2,1
   47ad8:	31c00315 	stw	r7,12(r6)
   47adc:	31c00215 	stw	r7,8(r6)
   47ae0:	30c00115 	stw	r3,4(r6)
   47ae4:	308d883a 	add	r6,r6,r2
   47ae8:	30800015 	stw	r2,0(r6)
   47aec:	003f9506 	br	47944 <__alt_data_end+0xfffc7944>
   47af0:	00c01504 	movi	r3,84
   47af4:	19400536 	bltu	r3,r5,47b0c <_free_r+0x2b8>
   47af8:	100ad33a 	srli	r5,r2,12
   47afc:	28c01bc4 	addi	r3,r5,111
   47b00:	18c7883a 	add	r3,r3,r3
   47b04:	29401b84 	addi	r5,r5,110
   47b08:	003f9c06 	br	4797c <__alt_data_end+0xfffc797c>
   47b0c:	00c05504 	movi	r3,340
   47b10:	19400536 	bltu	r3,r5,47b28 <_free_r+0x2d4>
   47b14:	100ad3fa 	srli	r5,r2,15
   47b18:	28c01e04 	addi	r3,r5,120
   47b1c:	18c7883a 	add	r3,r3,r3
   47b20:	29401dc4 	addi	r5,r5,119
   47b24:	003f9506 	br	4797c <__alt_data_end+0xfffc797c>
   47b28:	00c15504 	movi	r3,1364
   47b2c:	19400536 	bltu	r3,r5,47b44 <_free_r+0x2f0>
   47b30:	100ad4ba 	srli	r5,r2,18
   47b34:	28c01f44 	addi	r3,r5,125
   47b38:	18c7883a 	add	r3,r3,r3
   47b3c:	29401f04 	addi	r5,r5,124
   47b40:	003f8e06 	br	4797c <__alt_data_end+0xfffc797c>
   47b44:	00c03f84 	movi	r3,254
   47b48:	01401f84 	movi	r5,126
   47b4c:	003f8b06 	br	4797c <__alt_data_end+0xfffc797c>
   47b50:	10c00054 	ori	r3,r2,1
   47b54:	30c00115 	stw	r3,4(r6)
   47b58:	308d883a 	add	r6,r6,r2
   47b5c:	30800015 	stw	r2,0(r6)
   47b60:	003f7806 	br	47944 <__alt_data_end+0xfffc7944>

00047b64 <_fwalk>:
   47b64:	defff704 	addi	sp,sp,-36
   47b68:	dd000415 	stw	r20,16(sp)
   47b6c:	dfc00815 	stw	ra,32(sp)
   47b70:	ddc00715 	stw	r23,28(sp)
   47b74:	dd800615 	stw	r22,24(sp)
   47b78:	dd400515 	stw	r21,20(sp)
   47b7c:	dcc00315 	stw	r19,12(sp)
   47b80:	dc800215 	stw	r18,8(sp)
   47b84:	dc400115 	stw	r17,4(sp)
   47b88:	dc000015 	stw	r16,0(sp)
   47b8c:	2500b804 	addi	r20,r4,736
   47b90:	a0002326 	beq	r20,zero,47c20 <_fwalk+0xbc>
   47b94:	282b883a 	mov	r21,r5
   47b98:	002f883a 	mov	r23,zero
   47b9c:	05800044 	movi	r22,1
   47ba0:	04ffffc4 	movi	r19,-1
   47ba4:	a4400117 	ldw	r17,4(r20)
   47ba8:	a4800217 	ldw	r18,8(r20)
   47bac:	8c7fffc4 	addi	r17,r17,-1
   47bb0:	88000d16 	blt	r17,zero,47be8 <_fwalk+0x84>
   47bb4:	94000304 	addi	r16,r18,12
   47bb8:	94800384 	addi	r18,r18,14
   47bbc:	8080000b 	ldhu	r2,0(r16)
   47bc0:	8c7fffc4 	addi	r17,r17,-1
   47bc4:	813ffd04 	addi	r4,r16,-12
   47bc8:	b080042e 	bgeu	r22,r2,47bdc <_fwalk+0x78>
   47bcc:	9080000f 	ldh	r2,0(r18)
   47bd0:	14c00226 	beq	r2,r19,47bdc <_fwalk+0x78>
   47bd4:	a83ee83a 	callr	r21
   47bd8:	b8aeb03a 	or	r23,r23,r2
   47bdc:	84001a04 	addi	r16,r16,104
   47be0:	94801a04 	addi	r18,r18,104
   47be4:	8cfff51e 	bne	r17,r19,47bbc <__alt_data_end+0xfffc7bbc>
   47be8:	a5000017 	ldw	r20,0(r20)
   47bec:	a03fed1e 	bne	r20,zero,47ba4 <__alt_data_end+0xfffc7ba4>
   47bf0:	b805883a 	mov	r2,r23
   47bf4:	dfc00817 	ldw	ra,32(sp)
   47bf8:	ddc00717 	ldw	r23,28(sp)
   47bfc:	dd800617 	ldw	r22,24(sp)
   47c00:	dd400517 	ldw	r21,20(sp)
   47c04:	dd000417 	ldw	r20,16(sp)
   47c08:	dcc00317 	ldw	r19,12(sp)
   47c0c:	dc800217 	ldw	r18,8(sp)
   47c10:	dc400117 	ldw	r17,4(sp)
   47c14:	dc000017 	ldw	r16,0(sp)
   47c18:	dec00904 	addi	sp,sp,36
   47c1c:	f800283a 	ret
   47c20:	002f883a 	mov	r23,zero
   47c24:	003ff206 	br	47bf0 <__alt_data_end+0xfffc7bf0>

00047c28 <_fwalk_reent>:
   47c28:	defff704 	addi	sp,sp,-36
   47c2c:	dd000415 	stw	r20,16(sp)
   47c30:	dfc00815 	stw	ra,32(sp)
   47c34:	ddc00715 	stw	r23,28(sp)
   47c38:	dd800615 	stw	r22,24(sp)
   47c3c:	dd400515 	stw	r21,20(sp)
   47c40:	dcc00315 	stw	r19,12(sp)
   47c44:	dc800215 	stw	r18,8(sp)
   47c48:	dc400115 	stw	r17,4(sp)
   47c4c:	dc000015 	stw	r16,0(sp)
   47c50:	2500b804 	addi	r20,r4,736
   47c54:	a0002326 	beq	r20,zero,47ce4 <_fwalk_reent+0xbc>
   47c58:	282b883a 	mov	r21,r5
   47c5c:	2027883a 	mov	r19,r4
   47c60:	002f883a 	mov	r23,zero
   47c64:	05800044 	movi	r22,1
   47c68:	04bfffc4 	movi	r18,-1
   47c6c:	a4400117 	ldw	r17,4(r20)
   47c70:	a4000217 	ldw	r16,8(r20)
   47c74:	8c7fffc4 	addi	r17,r17,-1
   47c78:	88000c16 	blt	r17,zero,47cac <_fwalk_reent+0x84>
   47c7c:	84000304 	addi	r16,r16,12
   47c80:	8080000b 	ldhu	r2,0(r16)
   47c84:	8c7fffc4 	addi	r17,r17,-1
   47c88:	817ffd04 	addi	r5,r16,-12
   47c8c:	b080052e 	bgeu	r22,r2,47ca4 <_fwalk_reent+0x7c>
   47c90:	8080008f 	ldh	r2,2(r16)
   47c94:	9809883a 	mov	r4,r19
   47c98:	14800226 	beq	r2,r18,47ca4 <_fwalk_reent+0x7c>
   47c9c:	a83ee83a 	callr	r21
   47ca0:	b8aeb03a 	or	r23,r23,r2
   47ca4:	84001a04 	addi	r16,r16,104
   47ca8:	8cbff51e 	bne	r17,r18,47c80 <__alt_data_end+0xfffc7c80>
   47cac:	a5000017 	ldw	r20,0(r20)
   47cb0:	a03fee1e 	bne	r20,zero,47c6c <__alt_data_end+0xfffc7c6c>
   47cb4:	b805883a 	mov	r2,r23
   47cb8:	dfc00817 	ldw	ra,32(sp)
   47cbc:	ddc00717 	ldw	r23,28(sp)
   47cc0:	dd800617 	ldw	r22,24(sp)
   47cc4:	dd400517 	ldw	r21,20(sp)
   47cc8:	dd000417 	ldw	r20,16(sp)
   47ccc:	dcc00317 	ldw	r19,12(sp)
   47cd0:	dc800217 	ldw	r18,8(sp)
   47cd4:	dc400117 	ldw	r17,4(sp)
   47cd8:	dc000017 	ldw	r16,0(sp)
   47cdc:	dec00904 	addi	sp,sp,36
   47ce0:	f800283a 	ret
   47ce4:	002f883a 	mov	r23,zero
   47ce8:	003ff206 	br	47cb4 <__alt_data_end+0xfffc7cb4>

00047cec <_setlocale_r>:
   47cec:	30001b26 	beq	r6,zero,47d5c <_setlocale_r+0x70>
   47cf0:	01400174 	movhi	r5,5
   47cf4:	defffe04 	addi	sp,sp,-8
   47cf8:	2940df04 	addi	r5,r5,892
   47cfc:	3009883a 	mov	r4,r6
   47d00:	dc000015 	stw	r16,0(sp)
   47d04:	dfc00115 	stw	ra,4(sp)
   47d08:	3021883a 	mov	r16,r6
   47d0c:	0049b9c0 	call	49b9c <strcmp>
   47d10:	1000061e 	bne	r2,zero,47d2c <_setlocale_r+0x40>
   47d14:	00800174 	movhi	r2,5
   47d18:	1080c104 	addi	r2,r2,772
   47d1c:	dfc00117 	ldw	ra,4(sp)
   47d20:	dc000017 	ldw	r16,0(sp)
   47d24:	dec00204 	addi	sp,sp,8
   47d28:	f800283a 	ret
   47d2c:	01400174 	movhi	r5,5
   47d30:	2940c104 	addi	r5,r5,772
   47d34:	8009883a 	mov	r4,r16
   47d38:	0049b9c0 	call	49b9c <strcmp>
   47d3c:	103ff526 	beq	r2,zero,47d14 <__alt_data_end+0xfffc7d14>
   47d40:	01400174 	movhi	r5,5
   47d44:	2940ca04 	addi	r5,r5,808
   47d48:	8009883a 	mov	r4,r16
   47d4c:	0049b9c0 	call	49b9c <strcmp>
   47d50:	103ff026 	beq	r2,zero,47d14 <__alt_data_end+0xfffc7d14>
   47d54:	0005883a 	mov	r2,zero
   47d58:	003ff006 	br	47d1c <__alt_data_end+0xfffc7d1c>
   47d5c:	00800174 	movhi	r2,5
   47d60:	1080c104 	addi	r2,r2,772
   47d64:	f800283a 	ret

00047d68 <__locale_charset>:
   47d68:	00800174 	movhi	r2,5
   47d6c:	10870604 	addi	r2,r2,7192
   47d70:	f800283a 	ret

00047d74 <__locale_mb_cur_max>:
   47d74:	00800174 	movhi	r2,5
   47d78:	10882b04 	addi	r2,r2,8364
   47d7c:	10800017 	ldw	r2,0(r2)
   47d80:	f800283a 	ret

00047d84 <__locale_msgcharset>:
   47d84:	00800174 	movhi	r2,5
   47d88:	1086fe04 	addi	r2,r2,7160
   47d8c:	f800283a 	ret

00047d90 <__locale_cjk_lang>:
   47d90:	0005883a 	mov	r2,zero
   47d94:	f800283a 	ret

00047d98 <_localeconv_r>:
   47d98:	00800174 	movhi	r2,5
   47d9c:	10870e04 	addi	r2,r2,7224
   47da0:	f800283a 	ret

00047da4 <setlocale>:
   47da4:	00800174 	movhi	r2,5
   47da8:	10882a04 	addi	r2,r2,8360
   47dac:	280d883a 	mov	r6,r5
   47db0:	200b883a 	mov	r5,r4
   47db4:	11000017 	ldw	r4,0(r2)
   47db8:	0047cec1 	jmpi	47cec <_setlocale_r>

00047dbc <localeconv>:
   47dbc:	00800174 	movhi	r2,5
   47dc0:	10870e04 	addi	r2,r2,7224
   47dc4:	f800283a 	ret

00047dc8 <__smakebuf_r>:
   47dc8:	2880030b 	ldhu	r2,12(r5)
   47dcc:	10c0008c 	andi	r3,r2,2
   47dd0:	1800411e 	bne	r3,zero,47ed8 <__smakebuf_r+0x110>
   47dd4:	deffec04 	addi	sp,sp,-80
   47dd8:	dc000f15 	stw	r16,60(sp)
   47ddc:	2821883a 	mov	r16,r5
   47de0:	2940038f 	ldh	r5,14(r5)
   47de4:	dc401015 	stw	r17,64(sp)
   47de8:	dfc01315 	stw	ra,76(sp)
   47dec:	dcc01215 	stw	r19,72(sp)
   47df0:	dc801115 	stw	r18,68(sp)
   47df4:	2023883a 	mov	r17,r4
   47df8:	28001c16 	blt	r5,zero,47e6c <__smakebuf_r+0xa4>
   47dfc:	d80d883a 	mov	r6,sp
   47e00:	004b7440 	call	4b744 <_fstat_r>
   47e04:	10001816 	blt	r2,zero,47e68 <__smakebuf_r+0xa0>
   47e08:	d8800117 	ldw	r2,4(sp)
   47e0c:	00e00014 	movui	r3,32768
   47e10:	10bc000c 	andi	r2,r2,61440
   47e14:	14c80020 	cmpeqi	r19,r2,8192
   47e18:	10c03726 	beq	r2,r3,47ef8 <__smakebuf_r+0x130>
   47e1c:	80c0030b 	ldhu	r3,12(r16)
   47e20:	18c20014 	ori	r3,r3,2048
   47e24:	80c0030d 	sth	r3,12(r16)
   47e28:	00c80004 	movi	r3,8192
   47e2c:	10c0521e 	bne	r2,r3,47f78 <__smakebuf_r+0x1b0>
   47e30:	8140038f 	ldh	r5,14(r16)
   47e34:	8809883a 	mov	r4,r17
   47e38:	004bc5c0 	call	4bc5c <_isatty_r>
   47e3c:	10004c26 	beq	r2,zero,47f70 <__smakebuf_r+0x1a8>
   47e40:	8080030b 	ldhu	r2,12(r16)
   47e44:	80c010c4 	addi	r3,r16,67
   47e48:	80c00015 	stw	r3,0(r16)
   47e4c:	10800054 	ori	r2,r2,1
   47e50:	8080030d 	sth	r2,12(r16)
   47e54:	00800044 	movi	r2,1
   47e58:	80c00415 	stw	r3,16(r16)
   47e5c:	80800515 	stw	r2,20(r16)
   47e60:	04810004 	movi	r18,1024
   47e64:	00000706 	br	47e84 <__smakebuf_r+0xbc>
   47e68:	8080030b 	ldhu	r2,12(r16)
   47e6c:	10c0200c 	andi	r3,r2,128
   47e70:	18001f1e 	bne	r3,zero,47ef0 <__smakebuf_r+0x128>
   47e74:	04810004 	movi	r18,1024
   47e78:	10820014 	ori	r2,r2,2048
   47e7c:	8080030d 	sth	r2,12(r16)
   47e80:	0027883a 	mov	r19,zero
   47e84:	900b883a 	mov	r5,r18
   47e88:	8809883a 	mov	r4,r17
   47e8c:	0047f840 	call	47f84 <_malloc_r>
   47e90:	10002c26 	beq	r2,zero,47f44 <__smakebuf_r+0x17c>
   47e94:	80c0030b 	ldhu	r3,12(r16)
   47e98:	01000134 	movhi	r4,4
   47e9c:	211ce604 	addi	r4,r4,29592
   47ea0:	89000f15 	stw	r4,60(r17)
   47ea4:	18c02014 	ori	r3,r3,128
   47ea8:	80c0030d 	sth	r3,12(r16)
   47eac:	80800015 	stw	r2,0(r16)
   47eb0:	80800415 	stw	r2,16(r16)
   47eb4:	84800515 	stw	r18,20(r16)
   47eb8:	98001a1e 	bne	r19,zero,47f24 <__smakebuf_r+0x15c>
   47ebc:	dfc01317 	ldw	ra,76(sp)
   47ec0:	dcc01217 	ldw	r19,72(sp)
   47ec4:	dc801117 	ldw	r18,68(sp)
   47ec8:	dc401017 	ldw	r17,64(sp)
   47ecc:	dc000f17 	ldw	r16,60(sp)
   47ed0:	dec01404 	addi	sp,sp,80
   47ed4:	f800283a 	ret
   47ed8:	288010c4 	addi	r2,r5,67
   47edc:	28800015 	stw	r2,0(r5)
   47ee0:	28800415 	stw	r2,16(r5)
   47ee4:	00800044 	movi	r2,1
   47ee8:	28800515 	stw	r2,20(r5)
   47eec:	f800283a 	ret
   47ef0:	04801004 	movi	r18,64
   47ef4:	003fe006 	br	47e78 <__alt_data_end+0xfffc7e78>
   47ef8:	81000a17 	ldw	r4,40(r16)
   47efc:	00c00174 	movhi	r3,5
   47f00:	18e6ce04 	addi	r3,r3,-25800
   47f04:	20ffc51e 	bne	r4,r3,47e1c <__alt_data_end+0xfffc7e1c>
   47f08:	8080030b 	ldhu	r2,12(r16)
   47f0c:	04810004 	movi	r18,1024
   47f10:	84801315 	stw	r18,76(r16)
   47f14:	1484b03a 	or	r2,r2,r18
   47f18:	8080030d 	sth	r2,12(r16)
   47f1c:	0027883a 	mov	r19,zero
   47f20:	003fd806 	br	47e84 <__alt_data_end+0xfffc7e84>
   47f24:	8140038f 	ldh	r5,14(r16)
   47f28:	8809883a 	mov	r4,r17
   47f2c:	004bc5c0 	call	4bc5c <_isatty_r>
   47f30:	103fe226 	beq	r2,zero,47ebc <__alt_data_end+0xfffc7ebc>
   47f34:	8080030b 	ldhu	r2,12(r16)
   47f38:	10800054 	ori	r2,r2,1
   47f3c:	8080030d 	sth	r2,12(r16)
   47f40:	003fde06 	br	47ebc <__alt_data_end+0xfffc7ebc>
   47f44:	8080030b 	ldhu	r2,12(r16)
   47f48:	10c0800c 	andi	r3,r2,512
   47f4c:	183fdb1e 	bne	r3,zero,47ebc <__alt_data_end+0xfffc7ebc>
   47f50:	10800094 	ori	r2,r2,2
   47f54:	80c010c4 	addi	r3,r16,67
   47f58:	8080030d 	sth	r2,12(r16)
   47f5c:	00800044 	movi	r2,1
   47f60:	80c00015 	stw	r3,0(r16)
   47f64:	80c00415 	stw	r3,16(r16)
   47f68:	80800515 	stw	r2,20(r16)
   47f6c:	003fd306 	br	47ebc <__alt_data_end+0xfffc7ebc>
   47f70:	04810004 	movi	r18,1024
   47f74:	003fc306 	br	47e84 <__alt_data_end+0xfffc7e84>
   47f78:	0027883a 	mov	r19,zero
   47f7c:	04810004 	movi	r18,1024
   47f80:	003fc006 	br	47e84 <__alt_data_end+0xfffc7e84>

00047f84 <_malloc_r>:
   47f84:	defff504 	addi	sp,sp,-44
   47f88:	dc800315 	stw	r18,12(sp)
   47f8c:	dfc00a15 	stw	ra,40(sp)
   47f90:	df000915 	stw	fp,36(sp)
   47f94:	ddc00815 	stw	r23,32(sp)
   47f98:	dd800715 	stw	r22,28(sp)
   47f9c:	dd400615 	stw	r21,24(sp)
   47fa0:	dd000515 	stw	r20,20(sp)
   47fa4:	dcc00415 	stw	r19,16(sp)
   47fa8:	dc400215 	stw	r17,8(sp)
   47fac:	dc000115 	stw	r16,4(sp)
   47fb0:	288002c4 	addi	r2,r5,11
   47fb4:	00c00584 	movi	r3,22
   47fb8:	2025883a 	mov	r18,r4
   47fbc:	18807f2e 	bgeu	r3,r2,481bc <_malloc_r+0x238>
   47fc0:	047ffe04 	movi	r17,-8
   47fc4:	1462703a 	and	r17,r2,r17
   47fc8:	8800a316 	blt	r17,zero,48258 <_malloc_r+0x2d4>
   47fcc:	8940a236 	bltu	r17,r5,48258 <_malloc_r+0x2d4>
   47fd0:	004fc640 	call	4fc64 <__malloc_lock>
   47fd4:	00807dc4 	movi	r2,503
   47fd8:	1441e92e 	bgeu	r2,r17,48780 <_malloc_r+0x7fc>
   47fdc:	8804d27a 	srli	r2,r17,9
   47fe0:	1000a126 	beq	r2,zero,48268 <_malloc_r+0x2e4>
   47fe4:	00c00104 	movi	r3,4
   47fe8:	18811e36 	bltu	r3,r2,48464 <_malloc_r+0x4e0>
   47fec:	8804d1ba 	srli	r2,r17,6
   47ff0:	12000e44 	addi	r8,r2,57
   47ff4:	11c00e04 	addi	r7,r2,56
   47ff8:	4209883a 	add	r4,r8,r8
   47ffc:	04c00174 	movhi	r19,5
   48000:	2109883a 	add	r4,r4,r4
   48004:	9cc71c04 	addi	r19,r19,7280
   48008:	2109883a 	add	r4,r4,r4
   4800c:	9909883a 	add	r4,r19,r4
   48010:	24000117 	ldw	r16,4(r4)
   48014:	213ffe04 	addi	r4,r4,-8
   48018:	24009726 	beq	r4,r16,48278 <_malloc_r+0x2f4>
   4801c:	80800117 	ldw	r2,4(r16)
   48020:	01bfff04 	movi	r6,-4
   48024:	014003c4 	movi	r5,15
   48028:	1184703a 	and	r2,r2,r6
   4802c:	1447c83a 	sub	r3,r2,r17
   48030:	28c00716 	blt	r5,r3,48050 <_malloc_r+0xcc>
   48034:	1800920e 	bge	r3,zero,48280 <_malloc_r+0x2fc>
   48038:	84000317 	ldw	r16,12(r16)
   4803c:	24008e26 	beq	r4,r16,48278 <_malloc_r+0x2f4>
   48040:	80800117 	ldw	r2,4(r16)
   48044:	1184703a 	and	r2,r2,r6
   48048:	1447c83a 	sub	r3,r2,r17
   4804c:	28fff90e 	bge	r5,r3,48034 <__alt_data_end+0xfffc8034>
   48050:	3809883a 	mov	r4,r7
   48054:	01800174 	movhi	r6,5
   48058:	9c000417 	ldw	r16,16(r19)
   4805c:	31871c04 	addi	r6,r6,7280
   48060:	32000204 	addi	r8,r6,8
   48064:	82013426 	beq	r16,r8,48538 <_malloc_r+0x5b4>
   48068:	80c00117 	ldw	r3,4(r16)
   4806c:	00bfff04 	movi	r2,-4
   48070:	188e703a 	and	r7,r3,r2
   48074:	3c45c83a 	sub	r2,r7,r17
   48078:	00c003c4 	movi	r3,15
   4807c:	18811f16 	blt	r3,r2,484fc <_malloc_r+0x578>
   48080:	32000515 	stw	r8,20(r6)
   48084:	32000415 	stw	r8,16(r6)
   48088:	10007f0e 	bge	r2,zero,48288 <_malloc_r+0x304>
   4808c:	00807fc4 	movi	r2,511
   48090:	11c0fd36 	bltu	r2,r7,48488 <_malloc_r+0x504>
   48094:	3806d0fa 	srli	r3,r7,3
   48098:	01c00044 	movi	r7,1
   4809c:	30800117 	ldw	r2,4(r6)
   480a0:	19400044 	addi	r5,r3,1
   480a4:	294b883a 	add	r5,r5,r5
   480a8:	1807d0ba 	srai	r3,r3,2
   480ac:	294b883a 	add	r5,r5,r5
   480b0:	294b883a 	add	r5,r5,r5
   480b4:	298b883a 	add	r5,r5,r6
   480b8:	38c6983a 	sll	r3,r7,r3
   480bc:	29c00017 	ldw	r7,0(r5)
   480c0:	2a7ffe04 	addi	r9,r5,-8
   480c4:	1886b03a 	or	r3,r3,r2
   480c8:	82400315 	stw	r9,12(r16)
   480cc:	81c00215 	stw	r7,8(r16)
   480d0:	30c00115 	stw	r3,4(r6)
   480d4:	2c000015 	stw	r16,0(r5)
   480d8:	3c000315 	stw	r16,12(r7)
   480dc:	2005d0ba 	srai	r2,r4,2
   480e0:	01400044 	movi	r5,1
   480e4:	288a983a 	sll	r5,r5,r2
   480e8:	19406f36 	bltu	r3,r5,482a8 <_malloc_r+0x324>
   480ec:	28c4703a 	and	r2,r5,r3
   480f0:	10000a1e 	bne	r2,zero,4811c <_malloc_r+0x198>
   480f4:	00bfff04 	movi	r2,-4
   480f8:	294b883a 	add	r5,r5,r5
   480fc:	2088703a 	and	r4,r4,r2
   48100:	28c4703a 	and	r2,r5,r3
   48104:	21000104 	addi	r4,r4,4
   48108:	1000041e 	bne	r2,zero,4811c <_malloc_r+0x198>
   4810c:	294b883a 	add	r5,r5,r5
   48110:	28c4703a 	and	r2,r5,r3
   48114:	21000104 	addi	r4,r4,4
   48118:	103ffc26 	beq	r2,zero,4810c <__alt_data_end+0xfffc810c>
   4811c:	02bfff04 	movi	r10,-4
   48120:	024003c4 	movi	r9,15
   48124:	21800044 	addi	r6,r4,1
   48128:	318d883a 	add	r6,r6,r6
   4812c:	318d883a 	add	r6,r6,r6
   48130:	318d883a 	add	r6,r6,r6
   48134:	998d883a 	add	r6,r19,r6
   48138:	333ffe04 	addi	r12,r6,-8
   4813c:	2017883a 	mov	r11,r4
   48140:	31800104 	addi	r6,r6,4
   48144:	34000017 	ldw	r16,0(r6)
   48148:	31fffd04 	addi	r7,r6,-12
   4814c:	81c0041e 	bne	r16,r7,48160 <_malloc_r+0x1dc>
   48150:	0000fb06 	br	48540 <_malloc_r+0x5bc>
   48154:	1801030e 	bge	r3,zero,48564 <_malloc_r+0x5e0>
   48158:	84000317 	ldw	r16,12(r16)
   4815c:	81c0f826 	beq	r16,r7,48540 <_malloc_r+0x5bc>
   48160:	80800117 	ldw	r2,4(r16)
   48164:	1284703a 	and	r2,r2,r10
   48168:	1447c83a 	sub	r3,r2,r17
   4816c:	48fff90e 	bge	r9,r3,48154 <__alt_data_end+0xfffc8154>
   48170:	80800317 	ldw	r2,12(r16)
   48174:	81000217 	ldw	r4,8(r16)
   48178:	89400054 	ori	r5,r17,1
   4817c:	81400115 	stw	r5,4(r16)
   48180:	20800315 	stw	r2,12(r4)
   48184:	11000215 	stw	r4,8(r2)
   48188:	8463883a 	add	r17,r16,r17
   4818c:	9c400515 	stw	r17,20(r19)
   48190:	9c400415 	stw	r17,16(r19)
   48194:	18800054 	ori	r2,r3,1
   48198:	88800115 	stw	r2,4(r17)
   4819c:	8a000315 	stw	r8,12(r17)
   481a0:	8a000215 	stw	r8,8(r17)
   481a4:	88e3883a 	add	r17,r17,r3
   481a8:	88c00015 	stw	r3,0(r17)
   481ac:	9009883a 	mov	r4,r18
   481b0:	004fc880 	call	4fc88 <__malloc_unlock>
   481b4:	80800204 	addi	r2,r16,8
   481b8:	00001b06 	br	48228 <_malloc_r+0x2a4>
   481bc:	04400404 	movi	r17,16
   481c0:	89402536 	bltu	r17,r5,48258 <_malloc_r+0x2d4>
   481c4:	004fc640 	call	4fc64 <__malloc_lock>
   481c8:	00800184 	movi	r2,6
   481cc:	01000084 	movi	r4,2
   481d0:	04c00174 	movhi	r19,5
   481d4:	1085883a 	add	r2,r2,r2
   481d8:	9cc71c04 	addi	r19,r19,7280
   481dc:	1085883a 	add	r2,r2,r2
   481e0:	9885883a 	add	r2,r19,r2
   481e4:	14000117 	ldw	r16,4(r2)
   481e8:	10fffe04 	addi	r3,r2,-8
   481ec:	80c0d926 	beq	r16,r3,48554 <_malloc_r+0x5d0>
   481f0:	80c00117 	ldw	r3,4(r16)
   481f4:	81000317 	ldw	r4,12(r16)
   481f8:	00bfff04 	movi	r2,-4
   481fc:	1884703a 	and	r2,r3,r2
   48200:	81400217 	ldw	r5,8(r16)
   48204:	8085883a 	add	r2,r16,r2
   48208:	10c00117 	ldw	r3,4(r2)
   4820c:	29000315 	stw	r4,12(r5)
   48210:	21400215 	stw	r5,8(r4)
   48214:	18c00054 	ori	r3,r3,1
   48218:	10c00115 	stw	r3,4(r2)
   4821c:	9009883a 	mov	r4,r18
   48220:	004fc880 	call	4fc88 <__malloc_unlock>
   48224:	80800204 	addi	r2,r16,8
   48228:	dfc00a17 	ldw	ra,40(sp)
   4822c:	df000917 	ldw	fp,36(sp)
   48230:	ddc00817 	ldw	r23,32(sp)
   48234:	dd800717 	ldw	r22,28(sp)
   48238:	dd400617 	ldw	r21,24(sp)
   4823c:	dd000517 	ldw	r20,20(sp)
   48240:	dcc00417 	ldw	r19,16(sp)
   48244:	dc800317 	ldw	r18,12(sp)
   48248:	dc400217 	ldw	r17,8(sp)
   4824c:	dc000117 	ldw	r16,4(sp)
   48250:	dec00b04 	addi	sp,sp,44
   48254:	f800283a 	ret
   48258:	00800304 	movi	r2,12
   4825c:	90800015 	stw	r2,0(r18)
   48260:	0005883a 	mov	r2,zero
   48264:	003ff006 	br	48228 <__alt_data_end+0xfffc8228>
   48268:	01002004 	movi	r4,128
   4826c:	02001004 	movi	r8,64
   48270:	01c00fc4 	movi	r7,63
   48274:	003f6106 	br	47ffc <__alt_data_end+0xfffc7ffc>
   48278:	4009883a 	mov	r4,r8
   4827c:	003f7506 	br	48054 <__alt_data_end+0xfffc8054>
   48280:	81000317 	ldw	r4,12(r16)
   48284:	003fde06 	br	48200 <__alt_data_end+0xfffc8200>
   48288:	81c5883a 	add	r2,r16,r7
   4828c:	11400117 	ldw	r5,4(r2)
   48290:	9009883a 	mov	r4,r18
   48294:	29400054 	ori	r5,r5,1
   48298:	11400115 	stw	r5,4(r2)
   4829c:	004fc880 	call	4fc88 <__malloc_unlock>
   482a0:	80800204 	addi	r2,r16,8
   482a4:	003fe006 	br	48228 <__alt_data_end+0xfffc8228>
   482a8:	9c000217 	ldw	r16,8(r19)
   482ac:	00bfff04 	movi	r2,-4
   482b0:	85800117 	ldw	r22,4(r16)
   482b4:	b0ac703a 	and	r22,r22,r2
   482b8:	b4400336 	bltu	r22,r17,482c8 <_malloc_r+0x344>
   482bc:	b445c83a 	sub	r2,r22,r17
   482c0:	00c003c4 	movi	r3,15
   482c4:	18805d16 	blt	r3,r2,4843c <_malloc_r+0x4b8>
   482c8:	05c00174 	movhi	r23,5
   482cc:	00800174 	movhi	r2,5
   482d0:	108efa04 	addi	r2,r2,15336
   482d4:	bdc82c04 	addi	r23,r23,8368
   482d8:	15400017 	ldw	r21,0(r2)
   482dc:	b8c00017 	ldw	r3,0(r23)
   482e0:	00bfffc4 	movi	r2,-1
   482e4:	858d883a 	add	r6,r16,r22
   482e8:	8d6b883a 	add	r21,r17,r21
   482ec:	1880ea26 	beq	r3,r2,48698 <_malloc_r+0x714>
   482f0:	ad4403c4 	addi	r21,r21,4111
   482f4:	00bc0004 	movi	r2,-4096
   482f8:	a8aa703a 	and	r21,r21,r2
   482fc:	a80b883a 	mov	r5,r21
   48300:	9009883a 	mov	r4,r18
   48304:	d9800015 	stw	r6,0(sp)
   48308:	0049a0c0 	call	49a0c <_sbrk_r>
   4830c:	1029883a 	mov	r20,r2
   48310:	00bfffc4 	movi	r2,-1
   48314:	d9800017 	ldw	r6,0(sp)
   48318:	a080e826 	beq	r20,r2,486bc <_malloc_r+0x738>
   4831c:	a180a636 	bltu	r20,r6,485b8 <_malloc_r+0x634>
   48320:	07000174 	movhi	fp,5
   48324:	e70efb04 	addi	fp,fp,15340
   48328:	e0800017 	ldw	r2,0(fp)
   4832c:	a887883a 	add	r3,r21,r2
   48330:	e0c00015 	stw	r3,0(fp)
   48334:	3500e626 	beq	r6,r20,486d0 <_malloc_r+0x74c>
   48338:	b9000017 	ldw	r4,0(r23)
   4833c:	00bfffc4 	movi	r2,-1
   48340:	2080ee26 	beq	r4,r2,486fc <_malloc_r+0x778>
   48344:	a185c83a 	sub	r2,r20,r6
   48348:	10c5883a 	add	r2,r2,r3
   4834c:	e0800015 	stw	r2,0(fp)
   48350:	a0c001cc 	andi	r3,r20,7
   48354:	1800bc26 	beq	r3,zero,48648 <_malloc_r+0x6c4>
   48358:	a0e9c83a 	sub	r20,r20,r3
   4835c:	00840204 	movi	r2,4104
   48360:	a5000204 	addi	r20,r20,8
   48364:	10c7c83a 	sub	r3,r2,r3
   48368:	a545883a 	add	r2,r20,r21
   4836c:	1083ffcc 	andi	r2,r2,4095
   48370:	18abc83a 	sub	r21,r3,r2
   48374:	a80b883a 	mov	r5,r21
   48378:	9009883a 	mov	r4,r18
   4837c:	0049a0c0 	call	49a0c <_sbrk_r>
   48380:	00ffffc4 	movi	r3,-1
   48384:	10c0e126 	beq	r2,r3,4870c <_malloc_r+0x788>
   48388:	1505c83a 	sub	r2,r2,r20
   4838c:	1545883a 	add	r2,r2,r21
   48390:	10800054 	ori	r2,r2,1
   48394:	e0c00017 	ldw	r3,0(fp)
   48398:	9d000215 	stw	r20,8(r19)
   4839c:	a0800115 	stw	r2,4(r20)
   483a0:	a8c7883a 	add	r3,r21,r3
   483a4:	e0c00015 	stw	r3,0(fp)
   483a8:	84c00e26 	beq	r16,r19,483e4 <_malloc_r+0x460>
   483ac:	018003c4 	movi	r6,15
   483b0:	3580a72e 	bgeu	r6,r22,48650 <_malloc_r+0x6cc>
   483b4:	81400117 	ldw	r5,4(r16)
   483b8:	013ffe04 	movi	r4,-8
   483bc:	b0bffd04 	addi	r2,r22,-12
   483c0:	1104703a 	and	r2,r2,r4
   483c4:	2900004c 	andi	r4,r5,1
   483c8:	2088b03a 	or	r4,r4,r2
   483cc:	81000115 	stw	r4,4(r16)
   483d0:	01400144 	movi	r5,5
   483d4:	8089883a 	add	r4,r16,r2
   483d8:	21400115 	stw	r5,4(r4)
   483dc:	21400215 	stw	r5,8(r4)
   483e0:	3080cd36 	bltu	r6,r2,48718 <_malloc_r+0x794>
   483e4:	00800174 	movhi	r2,5
   483e8:	108ef904 	addi	r2,r2,15332
   483ec:	11000017 	ldw	r4,0(r2)
   483f0:	20c0012e 	bgeu	r4,r3,483f8 <_malloc_r+0x474>
   483f4:	10c00015 	stw	r3,0(r2)
   483f8:	00800174 	movhi	r2,5
   483fc:	108ef804 	addi	r2,r2,15328
   48400:	11000017 	ldw	r4,0(r2)
   48404:	9c000217 	ldw	r16,8(r19)
   48408:	20c0012e 	bgeu	r4,r3,48410 <_malloc_r+0x48c>
   4840c:	10c00015 	stw	r3,0(r2)
   48410:	80c00117 	ldw	r3,4(r16)
   48414:	00bfff04 	movi	r2,-4
   48418:	1886703a 	and	r3,r3,r2
   4841c:	1c45c83a 	sub	r2,r3,r17
   48420:	1c400236 	bltu	r3,r17,4842c <_malloc_r+0x4a8>
   48424:	00c003c4 	movi	r3,15
   48428:	18800416 	blt	r3,r2,4843c <_malloc_r+0x4b8>
   4842c:	9009883a 	mov	r4,r18
   48430:	004fc880 	call	4fc88 <__malloc_unlock>
   48434:	0005883a 	mov	r2,zero
   48438:	003f7b06 	br	48228 <__alt_data_end+0xfffc8228>
   4843c:	88c00054 	ori	r3,r17,1
   48440:	80c00115 	stw	r3,4(r16)
   48444:	8463883a 	add	r17,r16,r17
   48448:	10800054 	ori	r2,r2,1
   4844c:	9c400215 	stw	r17,8(r19)
   48450:	88800115 	stw	r2,4(r17)
   48454:	9009883a 	mov	r4,r18
   48458:	004fc880 	call	4fc88 <__malloc_unlock>
   4845c:	80800204 	addi	r2,r16,8
   48460:	003f7106 	br	48228 <__alt_data_end+0xfffc8228>
   48464:	00c00504 	movi	r3,20
   48468:	18804a2e 	bgeu	r3,r2,48594 <_malloc_r+0x610>
   4846c:	00c01504 	movi	r3,84
   48470:	18806e36 	bltu	r3,r2,4862c <_malloc_r+0x6a8>
   48474:	8804d33a 	srli	r2,r17,12
   48478:	12001bc4 	addi	r8,r2,111
   4847c:	11c01b84 	addi	r7,r2,110
   48480:	4209883a 	add	r4,r8,r8
   48484:	003edd06 	br	47ffc <__alt_data_end+0xfffc7ffc>
   48488:	3804d27a 	srli	r2,r7,9
   4848c:	00c00104 	movi	r3,4
   48490:	1880442e 	bgeu	r3,r2,485a4 <_malloc_r+0x620>
   48494:	00c00504 	movi	r3,20
   48498:	18808136 	bltu	r3,r2,486a0 <_malloc_r+0x71c>
   4849c:	11401704 	addi	r5,r2,92
   484a0:	10c016c4 	addi	r3,r2,91
   484a4:	294b883a 	add	r5,r5,r5
   484a8:	294b883a 	add	r5,r5,r5
   484ac:	294b883a 	add	r5,r5,r5
   484b0:	994b883a 	add	r5,r19,r5
   484b4:	28800017 	ldw	r2,0(r5)
   484b8:	01800174 	movhi	r6,5
   484bc:	297ffe04 	addi	r5,r5,-8
   484c0:	31871c04 	addi	r6,r6,7280
   484c4:	28806526 	beq	r5,r2,4865c <_malloc_r+0x6d8>
   484c8:	01bfff04 	movi	r6,-4
   484cc:	10c00117 	ldw	r3,4(r2)
   484d0:	1986703a 	and	r3,r3,r6
   484d4:	38c0022e 	bgeu	r7,r3,484e0 <_malloc_r+0x55c>
   484d8:	10800217 	ldw	r2,8(r2)
   484dc:	28bffb1e 	bne	r5,r2,484cc <__alt_data_end+0xfffc84cc>
   484e0:	11400317 	ldw	r5,12(r2)
   484e4:	98c00117 	ldw	r3,4(r19)
   484e8:	81400315 	stw	r5,12(r16)
   484ec:	80800215 	stw	r2,8(r16)
   484f0:	2c000215 	stw	r16,8(r5)
   484f4:	14000315 	stw	r16,12(r2)
   484f8:	003ef806 	br	480dc <__alt_data_end+0xfffc80dc>
   484fc:	88c00054 	ori	r3,r17,1
   48500:	80c00115 	stw	r3,4(r16)
   48504:	8463883a 	add	r17,r16,r17
   48508:	34400515 	stw	r17,20(r6)
   4850c:	34400415 	stw	r17,16(r6)
   48510:	10c00054 	ori	r3,r2,1
   48514:	8a000315 	stw	r8,12(r17)
   48518:	8a000215 	stw	r8,8(r17)
   4851c:	88c00115 	stw	r3,4(r17)
   48520:	88a3883a 	add	r17,r17,r2
   48524:	88800015 	stw	r2,0(r17)
   48528:	9009883a 	mov	r4,r18
   4852c:	004fc880 	call	4fc88 <__malloc_unlock>
   48530:	80800204 	addi	r2,r16,8
   48534:	003f3c06 	br	48228 <__alt_data_end+0xfffc8228>
   48538:	30c00117 	ldw	r3,4(r6)
   4853c:	003ee706 	br	480dc <__alt_data_end+0xfffc80dc>
   48540:	5ac00044 	addi	r11,r11,1
   48544:	588000cc 	andi	r2,r11,3
   48548:	31800204 	addi	r6,r6,8
   4854c:	103efd1e 	bne	r2,zero,48144 <__alt_data_end+0xfffc8144>
   48550:	00002406 	br	485e4 <_malloc_r+0x660>
   48554:	14000317 	ldw	r16,12(r2)
   48558:	143f251e 	bne	r2,r16,481f0 <__alt_data_end+0xfffc81f0>
   4855c:	21000084 	addi	r4,r4,2
   48560:	003ebc06 	br	48054 <__alt_data_end+0xfffc8054>
   48564:	8085883a 	add	r2,r16,r2
   48568:	10c00117 	ldw	r3,4(r2)
   4856c:	81000317 	ldw	r4,12(r16)
   48570:	81400217 	ldw	r5,8(r16)
   48574:	18c00054 	ori	r3,r3,1
   48578:	10c00115 	stw	r3,4(r2)
   4857c:	29000315 	stw	r4,12(r5)
   48580:	21400215 	stw	r5,8(r4)
   48584:	9009883a 	mov	r4,r18
   48588:	004fc880 	call	4fc88 <__malloc_unlock>
   4858c:	80800204 	addi	r2,r16,8
   48590:	003f2506 	br	48228 <__alt_data_end+0xfffc8228>
   48594:	12001704 	addi	r8,r2,92
   48598:	11c016c4 	addi	r7,r2,91
   4859c:	4209883a 	add	r4,r8,r8
   485a0:	003e9606 	br	47ffc <__alt_data_end+0xfffc7ffc>
   485a4:	3804d1ba 	srli	r2,r7,6
   485a8:	11400e44 	addi	r5,r2,57
   485ac:	10c00e04 	addi	r3,r2,56
   485b0:	294b883a 	add	r5,r5,r5
   485b4:	003fbc06 	br	484a8 <__alt_data_end+0xfffc84a8>
   485b8:	84ff5926 	beq	r16,r19,48320 <__alt_data_end+0xfffc8320>
   485bc:	00800174 	movhi	r2,5
   485c0:	10871c04 	addi	r2,r2,7280
   485c4:	14000217 	ldw	r16,8(r2)
   485c8:	00bfff04 	movi	r2,-4
   485cc:	80c00117 	ldw	r3,4(r16)
   485d0:	1886703a 	and	r3,r3,r2
   485d4:	003f9106 	br	4841c <__alt_data_end+0xfffc841c>
   485d8:	60800217 	ldw	r2,8(r12)
   485dc:	213fffc4 	addi	r4,r4,-1
   485e0:	1300651e 	bne	r2,r12,48778 <_malloc_r+0x7f4>
   485e4:	208000cc 	andi	r2,r4,3
   485e8:	633ffe04 	addi	r12,r12,-8
   485ec:	103ffa1e 	bne	r2,zero,485d8 <__alt_data_end+0xfffc85d8>
   485f0:	98800117 	ldw	r2,4(r19)
   485f4:	0146303a 	nor	r3,zero,r5
   485f8:	1884703a 	and	r2,r3,r2
   485fc:	98800115 	stw	r2,4(r19)
   48600:	294b883a 	add	r5,r5,r5
   48604:	117f2836 	bltu	r2,r5,482a8 <__alt_data_end+0xfffc82a8>
   48608:	283f2726 	beq	r5,zero,482a8 <__alt_data_end+0xfffc82a8>
   4860c:	2886703a 	and	r3,r5,r2
   48610:	5809883a 	mov	r4,r11
   48614:	183ec31e 	bne	r3,zero,48124 <__alt_data_end+0xfffc8124>
   48618:	294b883a 	add	r5,r5,r5
   4861c:	2886703a 	and	r3,r5,r2
   48620:	21000104 	addi	r4,r4,4
   48624:	183ffc26 	beq	r3,zero,48618 <__alt_data_end+0xfffc8618>
   48628:	003ebe06 	br	48124 <__alt_data_end+0xfffc8124>
   4862c:	00c05504 	movi	r3,340
   48630:	18801236 	bltu	r3,r2,4867c <_malloc_r+0x6f8>
   48634:	8804d3fa 	srli	r2,r17,15
   48638:	12001e04 	addi	r8,r2,120
   4863c:	11c01dc4 	addi	r7,r2,119
   48640:	4209883a 	add	r4,r8,r8
   48644:	003e6d06 	br	47ffc <__alt_data_end+0xfffc7ffc>
   48648:	00c40004 	movi	r3,4096
   4864c:	003f4606 	br	48368 <__alt_data_end+0xfffc8368>
   48650:	00800044 	movi	r2,1
   48654:	a0800115 	stw	r2,4(r20)
   48658:	003f7406 	br	4842c <__alt_data_end+0xfffc842c>
   4865c:	1805d0ba 	srai	r2,r3,2
   48660:	01c00044 	movi	r7,1
   48664:	30c00117 	ldw	r3,4(r6)
   48668:	388e983a 	sll	r7,r7,r2
   4866c:	2805883a 	mov	r2,r5
   48670:	38c6b03a 	or	r3,r7,r3
   48674:	30c00115 	stw	r3,4(r6)
   48678:	003f9b06 	br	484e8 <__alt_data_end+0xfffc84e8>
   4867c:	00c15504 	movi	r3,1364
   48680:	18801a36 	bltu	r3,r2,486ec <_malloc_r+0x768>
   48684:	8804d4ba 	srli	r2,r17,18
   48688:	12001f44 	addi	r8,r2,125
   4868c:	11c01f04 	addi	r7,r2,124
   48690:	4209883a 	add	r4,r8,r8
   48694:	003e5906 	br	47ffc <__alt_data_end+0xfffc7ffc>
   48698:	ad400404 	addi	r21,r21,16
   4869c:	003f1706 	br	482fc <__alt_data_end+0xfffc82fc>
   486a0:	00c01504 	movi	r3,84
   486a4:	18802336 	bltu	r3,r2,48734 <_malloc_r+0x7b0>
   486a8:	3804d33a 	srli	r2,r7,12
   486ac:	11401bc4 	addi	r5,r2,111
   486b0:	10c01b84 	addi	r3,r2,110
   486b4:	294b883a 	add	r5,r5,r5
   486b8:	003f7b06 	br	484a8 <__alt_data_end+0xfffc84a8>
   486bc:	9c000217 	ldw	r16,8(r19)
   486c0:	00bfff04 	movi	r2,-4
   486c4:	80c00117 	ldw	r3,4(r16)
   486c8:	1886703a 	and	r3,r3,r2
   486cc:	003f5306 	br	4841c <__alt_data_end+0xfffc841c>
   486d0:	3083ffcc 	andi	r2,r6,4095
   486d4:	103f181e 	bne	r2,zero,48338 <__alt_data_end+0xfffc8338>
   486d8:	99000217 	ldw	r4,8(r19)
   486dc:	b545883a 	add	r2,r22,r21
   486e0:	10800054 	ori	r2,r2,1
   486e4:	20800115 	stw	r2,4(r4)
   486e8:	003f3e06 	br	483e4 <__alt_data_end+0xfffc83e4>
   486ec:	01003f84 	movi	r4,254
   486f0:	02001fc4 	movi	r8,127
   486f4:	01c01f84 	movi	r7,126
   486f8:	003e4006 	br	47ffc <__alt_data_end+0xfffc7ffc>
   486fc:	00800174 	movhi	r2,5
   48700:	10882c04 	addi	r2,r2,8368
   48704:	15000015 	stw	r20,0(r2)
   48708:	003f1106 	br	48350 <__alt_data_end+0xfffc8350>
   4870c:	00800044 	movi	r2,1
   48710:	002b883a 	mov	r21,zero
   48714:	003f1f06 	br	48394 <__alt_data_end+0xfffc8394>
   48718:	81400204 	addi	r5,r16,8
   4871c:	9009883a 	mov	r4,r18
   48720:	00478540 	call	47854 <_free_r>
   48724:	00800174 	movhi	r2,5
   48728:	108efb04 	addi	r2,r2,15340
   4872c:	10c00017 	ldw	r3,0(r2)
   48730:	003f2c06 	br	483e4 <__alt_data_end+0xfffc83e4>
   48734:	00c05504 	movi	r3,340
   48738:	18800536 	bltu	r3,r2,48750 <_malloc_r+0x7cc>
   4873c:	3804d3fa 	srli	r2,r7,15
   48740:	11401e04 	addi	r5,r2,120
   48744:	10c01dc4 	addi	r3,r2,119
   48748:	294b883a 	add	r5,r5,r5
   4874c:	003f5606 	br	484a8 <__alt_data_end+0xfffc84a8>
   48750:	00c15504 	movi	r3,1364
   48754:	18800536 	bltu	r3,r2,4876c <_malloc_r+0x7e8>
   48758:	3804d4ba 	srli	r2,r7,18
   4875c:	11401f44 	addi	r5,r2,125
   48760:	10c01f04 	addi	r3,r2,124
   48764:	294b883a 	add	r5,r5,r5
   48768:	003f4f06 	br	484a8 <__alt_data_end+0xfffc84a8>
   4876c:	01403f84 	movi	r5,254
   48770:	00c01f84 	movi	r3,126
   48774:	003f4c06 	br	484a8 <__alt_data_end+0xfffc84a8>
   48778:	98800117 	ldw	r2,4(r19)
   4877c:	003fa006 	br	48600 <__alt_data_end+0xfffc8600>
   48780:	8808d0fa 	srli	r4,r17,3
   48784:	20800044 	addi	r2,r4,1
   48788:	1085883a 	add	r2,r2,r2
   4878c:	003e9006 	br	481d0 <__alt_data_end+0xfffc81d0>

00048790 <memchr>:
   48790:	208000cc 	andi	r2,r4,3
   48794:	280f883a 	mov	r7,r5
   48798:	10003426 	beq	r2,zero,4886c <memchr+0xdc>
   4879c:	30bfffc4 	addi	r2,r6,-1
   487a0:	30001a26 	beq	r6,zero,4880c <memchr+0x7c>
   487a4:	20c00003 	ldbu	r3,0(r4)
   487a8:	29803fcc 	andi	r6,r5,255
   487ac:	30c0051e 	bne	r6,r3,487c4 <memchr+0x34>
   487b0:	00001806 	br	48814 <memchr+0x84>
   487b4:	10001526 	beq	r2,zero,4880c <memchr+0x7c>
   487b8:	20c00003 	ldbu	r3,0(r4)
   487bc:	10bfffc4 	addi	r2,r2,-1
   487c0:	30c01426 	beq	r6,r3,48814 <memchr+0x84>
   487c4:	21000044 	addi	r4,r4,1
   487c8:	20c000cc 	andi	r3,r4,3
   487cc:	183ff91e 	bne	r3,zero,487b4 <__alt_data_end+0xfffc87b4>
   487d0:	020000c4 	movi	r8,3
   487d4:	40801136 	bltu	r8,r2,4881c <memchr+0x8c>
   487d8:	10000c26 	beq	r2,zero,4880c <memchr+0x7c>
   487dc:	20c00003 	ldbu	r3,0(r4)
   487e0:	29403fcc 	andi	r5,r5,255
   487e4:	28c00b26 	beq	r5,r3,48814 <memchr+0x84>
   487e8:	20c00044 	addi	r3,r4,1
   487ec:	39803fcc 	andi	r6,r7,255
   487f0:	2089883a 	add	r4,r4,r2
   487f4:	00000306 	br	48804 <memchr+0x74>
   487f8:	18c00044 	addi	r3,r3,1
   487fc:	197fffc3 	ldbu	r5,-1(r3)
   48800:	31400526 	beq	r6,r5,48818 <memchr+0x88>
   48804:	1805883a 	mov	r2,r3
   48808:	20fffb1e 	bne	r4,r3,487f8 <__alt_data_end+0xfffc87f8>
   4880c:	0005883a 	mov	r2,zero
   48810:	f800283a 	ret
   48814:	2005883a 	mov	r2,r4
   48818:	f800283a 	ret
   4881c:	28c03fcc 	andi	r3,r5,255
   48820:	1812923a 	slli	r9,r3,8
   48824:	02ffbff4 	movhi	r11,65279
   48828:	02a02074 	movhi	r10,32897
   4882c:	48d2b03a 	or	r9,r9,r3
   48830:	4806943a 	slli	r3,r9,16
   48834:	5affbfc4 	addi	r11,r11,-257
   48838:	52a02004 	addi	r10,r10,-32640
   4883c:	48d2b03a 	or	r9,r9,r3
   48840:	20c00017 	ldw	r3,0(r4)
   48844:	48c6f03a 	xor	r3,r9,r3
   48848:	1acd883a 	add	r6,r3,r11
   4884c:	00c6303a 	nor	r3,zero,r3
   48850:	30c6703a 	and	r3,r6,r3
   48854:	1a86703a 	and	r3,r3,r10
   48858:	183fe01e 	bne	r3,zero,487dc <__alt_data_end+0xfffc87dc>
   4885c:	10bfff04 	addi	r2,r2,-4
   48860:	21000104 	addi	r4,r4,4
   48864:	40bff636 	bltu	r8,r2,48840 <__alt_data_end+0xfffc8840>
   48868:	003fdb06 	br	487d8 <__alt_data_end+0xfffc87d8>
   4886c:	3005883a 	mov	r2,r6
   48870:	003fd706 	br	487d0 <__alt_data_end+0xfffc87d0>

00048874 <memset>:
   48874:	20c000cc 	andi	r3,r4,3
   48878:	2005883a 	mov	r2,r4
   4887c:	18004426 	beq	r3,zero,48990 <memset+0x11c>
   48880:	31ffffc4 	addi	r7,r6,-1
   48884:	30004026 	beq	r6,zero,48988 <memset+0x114>
   48888:	2813883a 	mov	r9,r5
   4888c:	200d883a 	mov	r6,r4
   48890:	2007883a 	mov	r3,r4
   48894:	00000406 	br	488a8 <memset+0x34>
   48898:	3a3fffc4 	addi	r8,r7,-1
   4889c:	31800044 	addi	r6,r6,1
   488a0:	38003926 	beq	r7,zero,48988 <memset+0x114>
   488a4:	400f883a 	mov	r7,r8
   488a8:	18c00044 	addi	r3,r3,1
   488ac:	32400005 	stb	r9,0(r6)
   488b0:	1a0000cc 	andi	r8,r3,3
   488b4:	403ff81e 	bne	r8,zero,48898 <__alt_data_end+0xfffc8898>
   488b8:	010000c4 	movi	r4,3
   488bc:	21c02d2e 	bgeu	r4,r7,48974 <memset+0x100>
   488c0:	29003fcc 	andi	r4,r5,255
   488c4:	200c923a 	slli	r6,r4,8
   488c8:	3108b03a 	or	r4,r6,r4
   488cc:	200c943a 	slli	r6,r4,16
   488d0:	218cb03a 	or	r6,r4,r6
   488d4:	010003c4 	movi	r4,15
   488d8:	21c0182e 	bgeu	r4,r7,4893c <memset+0xc8>
   488dc:	3b3ffc04 	addi	r12,r7,-16
   488e0:	6018d13a 	srli	r12,r12,4
   488e4:	1a000104 	addi	r8,r3,4
   488e8:	1ac00204 	addi	r11,r3,8
   488ec:	6008913a 	slli	r4,r12,4
   488f0:	1a800304 	addi	r10,r3,12
   488f4:	1813883a 	mov	r9,r3
   488f8:	21000504 	addi	r4,r4,20
   488fc:	1909883a 	add	r4,r3,r4
   48900:	49800015 	stw	r6,0(r9)
   48904:	41800015 	stw	r6,0(r8)
   48908:	59800015 	stw	r6,0(r11)
   4890c:	51800015 	stw	r6,0(r10)
   48910:	42000404 	addi	r8,r8,16
   48914:	4a400404 	addi	r9,r9,16
   48918:	5ac00404 	addi	r11,r11,16
   4891c:	52800404 	addi	r10,r10,16
   48920:	413ff71e 	bne	r8,r4,48900 <__alt_data_end+0xfffc8900>
   48924:	63000044 	addi	r12,r12,1
   48928:	6018913a 	slli	r12,r12,4
   4892c:	39c003cc 	andi	r7,r7,15
   48930:	010000c4 	movi	r4,3
   48934:	1b07883a 	add	r3,r3,r12
   48938:	21c00e2e 	bgeu	r4,r7,48974 <memset+0x100>
   4893c:	1813883a 	mov	r9,r3
   48940:	3811883a 	mov	r8,r7
   48944:	010000c4 	movi	r4,3
   48948:	49800015 	stw	r6,0(r9)
   4894c:	423fff04 	addi	r8,r8,-4
   48950:	4a400104 	addi	r9,r9,4
   48954:	223ffc36 	bltu	r4,r8,48948 <__alt_data_end+0xfffc8948>
   48958:	393fff04 	addi	r4,r7,-4
   4895c:	2008d0ba 	srli	r4,r4,2
   48960:	39c000cc 	andi	r7,r7,3
   48964:	21000044 	addi	r4,r4,1
   48968:	2109883a 	add	r4,r4,r4
   4896c:	2109883a 	add	r4,r4,r4
   48970:	1907883a 	add	r3,r3,r4
   48974:	38000526 	beq	r7,zero,4898c <memset+0x118>
   48978:	19cf883a 	add	r7,r3,r7
   4897c:	19400005 	stb	r5,0(r3)
   48980:	18c00044 	addi	r3,r3,1
   48984:	38fffd1e 	bne	r7,r3,4897c <__alt_data_end+0xfffc897c>
   48988:	f800283a 	ret
   4898c:	f800283a 	ret
   48990:	2007883a 	mov	r3,r4
   48994:	300f883a 	mov	r7,r6
   48998:	003fc706 	br	488b8 <__alt_data_end+0xfffc88b8>

0004899c <_Balloc>:
   4899c:	20801317 	ldw	r2,76(r4)
   489a0:	defffc04 	addi	sp,sp,-16
   489a4:	dc400115 	stw	r17,4(sp)
   489a8:	dc000015 	stw	r16,0(sp)
   489ac:	dfc00315 	stw	ra,12(sp)
   489b0:	dc800215 	stw	r18,8(sp)
   489b4:	2023883a 	mov	r17,r4
   489b8:	2821883a 	mov	r16,r5
   489bc:	10000f26 	beq	r2,zero,489fc <_Balloc+0x60>
   489c0:	8407883a 	add	r3,r16,r16
   489c4:	18c7883a 	add	r3,r3,r3
   489c8:	10c7883a 	add	r3,r2,r3
   489cc:	18800017 	ldw	r2,0(r3)
   489d0:	10001126 	beq	r2,zero,48a18 <_Balloc+0x7c>
   489d4:	11000017 	ldw	r4,0(r2)
   489d8:	19000015 	stw	r4,0(r3)
   489dc:	10000415 	stw	zero,16(r2)
   489e0:	10000315 	stw	zero,12(r2)
   489e4:	dfc00317 	ldw	ra,12(sp)
   489e8:	dc800217 	ldw	r18,8(sp)
   489ec:	dc400117 	ldw	r17,4(sp)
   489f0:	dc000017 	ldw	r16,0(sp)
   489f4:	dec00404 	addi	sp,sp,16
   489f8:	f800283a 	ret
   489fc:	01800844 	movi	r6,33
   48a00:	01400104 	movi	r5,4
   48a04:	004b3740 	call	4b374 <_calloc_r>
   48a08:	88801315 	stw	r2,76(r17)
   48a0c:	103fec1e 	bne	r2,zero,489c0 <__alt_data_end+0xfffc89c0>
   48a10:	0005883a 	mov	r2,zero
   48a14:	003ff306 	br	489e4 <__alt_data_end+0xfffc89e4>
   48a18:	01400044 	movi	r5,1
   48a1c:	2c24983a 	sll	r18,r5,r16
   48a20:	8809883a 	mov	r4,r17
   48a24:	91800144 	addi	r6,r18,5
   48a28:	318d883a 	add	r6,r6,r6
   48a2c:	318d883a 	add	r6,r6,r6
   48a30:	004b3740 	call	4b374 <_calloc_r>
   48a34:	103ff626 	beq	r2,zero,48a10 <__alt_data_end+0xfffc8a10>
   48a38:	14000115 	stw	r16,4(r2)
   48a3c:	14800215 	stw	r18,8(r2)
   48a40:	003fe606 	br	489dc <__alt_data_end+0xfffc89dc>

00048a44 <_Bfree>:
   48a44:	28000826 	beq	r5,zero,48a68 <_Bfree+0x24>
   48a48:	28c00117 	ldw	r3,4(r5)
   48a4c:	20801317 	ldw	r2,76(r4)
   48a50:	18c7883a 	add	r3,r3,r3
   48a54:	18c7883a 	add	r3,r3,r3
   48a58:	10c5883a 	add	r2,r2,r3
   48a5c:	10c00017 	ldw	r3,0(r2)
   48a60:	28c00015 	stw	r3,0(r5)
   48a64:	11400015 	stw	r5,0(r2)
   48a68:	f800283a 	ret

00048a6c <__multadd>:
   48a6c:	defffa04 	addi	sp,sp,-24
   48a70:	dc800315 	stw	r18,12(sp)
   48a74:	dc400215 	stw	r17,8(sp)
   48a78:	dc000115 	stw	r16,4(sp)
   48a7c:	2823883a 	mov	r17,r5
   48a80:	2c000417 	ldw	r16,16(r5)
   48a84:	dfc00515 	stw	ra,20(sp)
   48a88:	dcc00415 	stw	r19,16(sp)
   48a8c:	2025883a 	mov	r18,r4
   48a90:	29400504 	addi	r5,r5,20
   48a94:	0011883a 	mov	r8,zero
   48a98:	28c00017 	ldw	r3,0(r5)
   48a9c:	29400104 	addi	r5,r5,4
   48aa0:	42000044 	addi	r8,r8,1
   48aa4:	18bfffcc 	andi	r2,r3,65535
   48aa8:	1185383a 	mul	r2,r2,r6
   48aac:	1806d43a 	srli	r3,r3,16
   48ab0:	11cf883a 	add	r7,r2,r7
   48ab4:	3808d43a 	srli	r4,r7,16
   48ab8:	1987383a 	mul	r3,r3,r6
   48abc:	38bfffcc 	andi	r2,r7,65535
   48ac0:	1907883a 	add	r3,r3,r4
   48ac4:	1808943a 	slli	r4,r3,16
   48ac8:	180ed43a 	srli	r7,r3,16
   48acc:	2085883a 	add	r2,r4,r2
   48ad0:	28bfff15 	stw	r2,-4(r5)
   48ad4:	443ff016 	blt	r8,r16,48a98 <__alt_data_end+0xfffc8a98>
   48ad8:	38000926 	beq	r7,zero,48b00 <__multadd+0x94>
   48adc:	88800217 	ldw	r2,8(r17)
   48ae0:	80800f0e 	bge	r16,r2,48b20 <__multadd+0xb4>
   48ae4:	80800144 	addi	r2,r16,5
   48ae8:	1085883a 	add	r2,r2,r2
   48aec:	1085883a 	add	r2,r2,r2
   48af0:	8885883a 	add	r2,r17,r2
   48af4:	11c00015 	stw	r7,0(r2)
   48af8:	84000044 	addi	r16,r16,1
   48afc:	8c000415 	stw	r16,16(r17)
   48b00:	8805883a 	mov	r2,r17
   48b04:	dfc00517 	ldw	ra,20(sp)
   48b08:	dcc00417 	ldw	r19,16(sp)
   48b0c:	dc800317 	ldw	r18,12(sp)
   48b10:	dc400217 	ldw	r17,8(sp)
   48b14:	dc000117 	ldw	r16,4(sp)
   48b18:	dec00604 	addi	sp,sp,24
   48b1c:	f800283a 	ret
   48b20:	89400117 	ldw	r5,4(r17)
   48b24:	9009883a 	mov	r4,r18
   48b28:	d9c00015 	stw	r7,0(sp)
   48b2c:	29400044 	addi	r5,r5,1
   48b30:	004899c0 	call	4899c <_Balloc>
   48b34:	89800417 	ldw	r6,16(r17)
   48b38:	89400304 	addi	r5,r17,12
   48b3c:	11000304 	addi	r4,r2,12
   48b40:	31800084 	addi	r6,r6,2
   48b44:	318d883a 	add	r6,r6,r6
   48b48:	318d883a 	add	r6,r6,r6
   48b4c:	1027883a 	mov	r19,r2
   48b50:	0042c980 	call	42c98 <memcpy>
   48b54:	d9c00017 	ldw	r7,0(sp)
   48b58:	88000a26 	beq	r17,zero,48b84 <__multadd+0x118>
   48b5c:	88c00117 	ldw	r3,4(r17)
   48b60:	90801317 	ldw	r2,76(r18)
   48b64:	18c7883a 	add	r3,r3,r3
   48b68:	18c7883a 	add	r3,r3,r3
   48b6c:	10c5883a 	add	r2,r2,r3
   48b70:	10c00017 	ldw	r3,0(r2)
   48b74:	88c00015 	stw	r3,0(r17)
   48b78:	14400015 	stw	r17,0(r2)
   48b7c:	9823883a 	mov	r17,r19
   48b80:	003fd806 	br	48ae4 <__alt_data_end+0xfffc8ae4>
   48b84:	9823883a 	mov	r17,r19
   48b88:	003fd606 	br	48ae4 <__alt_data_end+0xfffc8ae4>

00048b8c <__s2b>:
   48b8c:	defff904 	addi	sp,sp,-28
   48b90:	dc400115 	stw	r17,4(sp)
   48b94:	dc000015 	stw	r16,0(sp)
   48b98:	2023883a 	mov	r17,r4
   48b9c:	2821883a 	mov	r16,r5
   48ba0:	39000204 	addi	r4,r7,8
   48ba4:	01400244 	movi	r5,9
   48ba8:	dcc00315 	stw	r19,12(sp)
   48bac:	dc800215 	stw	r18,8(sp)
   48bb0:	dfc00615 	stw	ra,24(sp)
   48bb4:	dd400515 	stw	r21,20(sp)
   48bb8:	dd000415 	stw	r20,16(sp)
   48bbc:	3825883a 	mov	r18,r7
   48bc0:	3027883a 	mov	r19,r6
   48bc4:	004d1380 	call	4d138 <__divsi3>
   48bc8:	00c00044 	movi	r3,1
   48bcc:	000b883a 	mov	r5,zero
   48bd0:	1880030e 	bge	r3,r2,48be0 <__s2b+0x54>
   48bd4:	18c7883a 	add	r3,r3,r3
   48bd8:	29400044 	addi	r5,r5,1
   48bdc:	18bffd16 	blt	r3,r2,48bd4 <__alt_data_end+0xfffc8bd4>
   48be0:	8809883a 	mov	r4,r17
   48be4:	004899c0 	call	4899c <_Balloc>
   48be8:	d8c00717 	ldw	r3,28(sp)
   48bec:	10c00515 	stw	r3,20(r2)
   48bf0:	00c00044 	movi	r3,1
   48bf4:	10c00415 	stw	r3,16(r2)
   48bf8:	00c00244 	movi	r3,9
   48bfc:	1cc0210e 	bge	r3,r19,48c84 <__s2b+0xf8>
   48c00:	80eb883a 	add	r21,r16,r3
   48c04:	a829883a 	mov	r20,r21
   48c08:	84e1883a 	add	r16,r16,r19
   48c0c:	a1c00007 	ldb	r7,0(r20)
   48c10:	01800284 	movi	r6,10
   48c14:	a5000044 	addi	r20,r20,1
   48c18:	100b883a 	mov	r5,r2
   48c1c:	39fff404 	addi	r7,r7,-48
   48c20:	8809883a 	mov	r4,r17
   48c24:	0048a6c0 	call	48a6c <__multadd>
   48c28:	a43ff81e 	bne	r20,r16,48c0c <__alt_data_end+0xfffc8c0c>
   48c2c:	ace1883a 	add	r16,r21,r19
   48c30:	843ffe04 	addi	r16,r16,-8
   48c34:	9c800a0e 	bge	r19,r18,48c60 <__s2b+0xd4>
   48c38:	94e5c83a 	sub	r18,r18,r19
   48c3c:	84a5883a 	add	r18,r16,r18
   48c40:	81c00007 	ldb	r7,0(r16)
   48c44:	01800284 	movi	r6,10
   48c48:	84000044 	addi	r16,r16,1
   48c4c:	100b883a 	mov	r5,r2
   48c50:	39fff404 	addi	r7,r7,-48
   48c54:	8809883a 	mov	r4,r17
   48c58:	0048a6c0 	call	48a6c <__multadd>
   48c5c:	84bff81e 	bne	r16,r18,48c40 <__alt_data_end+0xfffc8c40>
   48c60:	dfc00617 	ldw	ra,24(sp)
   48c64:	dd400517 	ldw	r21,20(sp)
   48c68:	dd000417 	ldw	r20,16(sp)
   48c6c:	dcc00317 	ldw	r19,12(sp)
   48c70:	dc800217 	ldw	r18,8(sp)
   48c74:	dc400117 	ldw	r17,4(sp)
   48c78:	dc000017 	ldw	r16,0(sp)
   48c7c:	dec00704 	addi	sp,sp,28
   48c80:	f800283a 	ret
   48c84:	84000284 	addi	r16,r16,10
   48c88:	1827883a 	mov	r19,r3
   48c8c:	003fe906 	br	48c34 <__alt_data_end+0xfffc8c34>

00048c90 <__hi0bits>:
   48c90:	20bfffec 	andhi	r2,r4,65535
   48c94:	1000141e 	bne	r2,zero,48ce8 <__hi0bits+0x58>
   48c98:	2008943a 	slli	r4,r4,16
   48c9c:	00800404 	movi	r2,16
   48ca0:	20ffc02c 	andhi	r3,r4,65280
   48ca4:	1800021e 	bne	r3,zero,48cb0 <__hi0bits+0x20>
   48ca8:	2008923a 	slli	r4,r4,8
   48cac:	10800204 	addi	r2,r2,8
   48cb0:	20fc002c 	andhi	r3,r4,61440
   48cb4:	1800021e 	bne	r3,zero,48cc0 <__hi0bits+0x30>
   48cb8:	2008913a 	slli	r4,r4,4
   48cbc:	10800104 	addi	r2,r2,4
   48cc0:	20f0002c 	andhi	r3,r4,49152
   48cc4:	1800031e 	bne	r3,zero,48cd4 <__hi0bits+0x44>
   48cc8:	2109883a 	add	r4,r4,r4
   48ccc:	10800084 	addi	r2,r2,2
   48cd0:	2109883a 	add	r4,r4,r4
   48cd4:	20000316 	blt	r4,zero,48ce4 <__hi0bits+0x54>
   48cd8:	2110002c 	andhi	r4,r4,16384
   48cdc:	2000041e 	bne	r4,zero,48cf0 <__hi0bits+0x60>
   48ce0:	00800804 	movi	r2,32
   48ce4:	f800283a 	ret
   48ce8:	0005883a 	mov	r2,zero
   48cec:	003fec06 	br	48ca0 <__alt_data_end+0xfffc8ca0>
   48cf0:	10800044 	addi	r2,r2,1
   48cf4:	f800283a 	ret

00048cf8 <__lo0bits>:
   48cf8:	20c00017 	ldw	r3,0(r4)
   48cfc:	188001cc 	andi	r2,r3,7
   48d00:	10000826 	beq	r2,zero,48d24 <__lo0bits+0x2c>
   48d04:	1880004c 	andi	r2,r3,1
   48d08:	1000211e 	bne	r2,zero,48d90 <__lo0bits+0x98>
   48d0c:	1880008c 	andi	r2,r3,2
   48d10:	1000211e 	bne	r2,zero,48d98 <__lo0bits+0xa0>
   48d14:	1806d0ba 	srli	r3,r3,2
   48d18:	00800084 	movi	r2,2
   48d1c:	20c00015 	stw	r3,0(r4)
   48d20:	f800283a 	ret
   48d24:	18bfffcc 	andi	r2,r3,65535
   48d28:	10001326 	beq	r2,zero,48d78 <__lo0bits+0x80>
   48d2c:	0005883a 	mov	r2,zero
   48d30:	19403fcc 	andi	r5,r3,255
   48d34:	2800021e 	bne	r5,zero,48d40 <__lo0bits+0x48>
   48d38:	1806d23a 	srli	r3,r3,8
   48d3c:	10800204 	addi	r2,r2,8
   48d40:	194003cc 	andi	r5,r3,15
   48d44:	2800021e 	bne	r5,zero,48d50 <__lo0bits+0x58>
   48d48:	1806d13a 	srli	r3,r3,4
   48d4c:	10800104 	addi	r2,r2,4
   48d50:	194000cc 	andi	r5,r3,3
   48d54:	2800021e 	bne	r5,zero,48d60 <__lo0bits+0x68>
   48d58:	1806d0ba 	srli	r3,r3,2
   48d5c:	10800084 	addi	r2,r2,2
   48d60:	1940004c 	andi	r5,r3,1
   48d64:	2800081e 	bne	r5,zero,48d88 <__lo0bits+0x90>
   48d68:	1806d07a 	srli	r3,r3,1
   48d6c:	1800051e 	bne	r3,zero,48d84 <__lo0bits+0x8c>
   48d70:	00800804 	movi	r2,32
   48d74:	f800283a 	ret
   48d78:	1806d43a 	srli	r3,r3,16
   48d7c:	00800404 	movi	r2,16
   48d80:	003feb06 	br	48d30 <__alt_data_end+0xfffc8d30>
   48d84:	10800044 	addi	r2,r2,1
   48d88:	20c00015 	stw	r3,0(r4)
   48d8c:	f800283a 	ret
   48d90:	0005883a 	mov	r2,zero
   48d94:	f800283a 	ret
   48d98:	1806d07a 	srli	r3,r3,1
   48d9c:	00800044 	movi	r2,1
   48da0:	20c00015 	stw	r3,0(r4)
   48da4:	f800283a 	ret

00048da8 <__i2b>:
   48da8:	defffd04 	addi	sp,sp,-12
   48dac:	dc000015 	stw	r16,0(sp)
   48db0:	04000044 	movi	r16,1
   48db4:	dc400115 	stw	r17,4(sp)
   48db8:	2823883a 	mov	r17,r5
   48dbc:	800b883a 	mov	r5,r16
   48dc0:	dfc00215 	stw	ra,8(sp)
   48dc4:	004899c0 	call	4899c <_Balloc>
   48dc8:	14400515 	stw	r17,20(r2)
   48dcc:	14000415 	stw	r16,16(r2)
   48dd0:	dfc00217 	ldw	ra,8(sp)
   48dd4:	dc400117 	ldw	r17,4(sp)
   48dd8:	dc000017 	ldw	r16,0(sp)
   48ddc:	dec00304 	addi	sp,sp,12
   48de0:	f800283a 	ret

00048de4 <__multiply>:
   48de4:	defffa04 	addi	sp,sp,-24
   48de8:	dcc00315 	stw	r19,12(sp)
   48dec:	dc800215 	stw	r18,8(sp)
   48df0:	34c00417 	ldw	r19,16(r6)
   48df4:	2c800417 	ldw	r18,16(r5)
   48df8:	dd000415 	stw	r20,16(sp)
   48dfc:	dc400115 	stw	r17,4(sp)
   48e00:	dfc00515 	stw	ra,20(sp)
   48e04:	dc000015 	stw	r16,0(sp)
   48e08:	2829883a 	mov	r20,r5
   48e0c:	3023883a 	mov	r17,r6
   48e10:	94c0050e 	bge	r18,r19,48e28 <__multiply+0x44>
   48e14:	9007883a 	mov	r3,r18
   48e18:	3029883a 	mov	r20,r6
   48e1c:	9825883a 	mov	r18,r19
   48e20:	2823883a 	mov	r17,r5
   48e24:	1827883a 	mov	r19,r3
   48e28:	a0800217 	ldw	r2,8(r20)
   48e2c:	94e1883a 	add	r16,r18,r19
   48e30:	a1400117 	ldw	r5,4(r20)
   48e34:	1400010e 	bge	r2,r16,48e3c <__multiply+0x58>
   48e38:	29400044 	addi	r5,r5,1
   48e3c:	004899c0 	call	4899c <_Balloc>
   48e40:	8415883a 	add	r10,r16,r16
   48e44:	12c00504 	addi	r11,r2,20
   48e48:	5295883a 	add	r10,r10,r10
   48e4c:	5a95883a 	add	r10,r11,r10
   48e50:	5807883a 	mov	r3,r11
   48e54:	5a80032e 	bgeu	r11,r10,48e64 <__multiply+0x80>
   48e58:	18000015 	stw	zero,0(r3)
   48e5c:	18c00104 	addi	r3,r3,4
   48e60:	1abffd36 	bltu	r3,r10,48e58 <__alt_data_end+0xfffc8e58>
   48e64:	9ce7883a 	add	r19,r19,r19
   48e68:	94a5883a 	add	r18,r18,r18
   48e6c:	89800504 	addi	r6,r17,20
   48e70:	9ce7883a 	add	r19,r19,r19
   48e74:	a3400504 	addi	r13,r20,20
   48e78:	94a5883a 	add	r18,r18,r18
   48e7c:	34d9883a 	add	r12,r6,r19
   48e80:	6c93883a 	add	r9,r13,r18
   48e84:	3300422e 	bgeu	r6,r12,48f90 <__multiply+0x1ac>
   48e88:	37c00017 	ldw	ra,0(r6)
   48e8c:	fbffffcc 	andi	r15,ra,65535
   48e90:	78001b26 	beq	r15,zero,48f00 <__multiply+0x11c>
   48e94:	5811883a 	mov	r8,r11
   48e98:	681d883a 	mov	r14,r13
   48e9c:	000f883a 	mov	r7,zero
   48ea0:	71000017 	ldw	r4,0(r14)
   48ea4:	40c00017 	ldw	r3,0(r8)
   48ea8:	73800104 	addi	r14,r14,4
   48eac:	217fffcc 	andi	r5,r4,65535
   48eb0:	2bcb383a 	mul	r5,r5,r15
   48eb4:	2008d43a 	srli	r4,r4,16
   48eb8:	1c7fffcc 	andi	r17,r3,65535
   48ebc:	2c4b883a 	add	r5,r5,r17
   48ec0:	29cb883a 	add	r5,r5,r7
   48ec4:	23c9383a 	mul	r4,r4,r15
   48ec8:	1806d43a 	srli	r3,r3,16
   48ecc:	280ed43a 	srli	r7,r5,16
   48ed0:	297fffcc 	andi	r5,r5,65535
   48ed4:	20c7883a 	add	r3,r4,r3
   48ed8:	19c7883a 	add	r3,r3,r7
   48edc:	1808943a 	slli	r4,r3,16
   48ee0:	4023883a 	mov	r17,r8
   48ee4:	180ed43a 	srli	r7,r3,16
   48ee8:	214ab03a 	or	r5,r4,r5
   48eec:	41400015 	stw	r5,0(r8)
   48ef0:	42000104 	addi	r8,r8,4
   48ef4:	727fea36 	bltu	r14,r9,48ea0 <__alt_data_end+0xfffc8ea0>
   48ef8:	89c00115 	stw	r7,4(r17)
   48efc:	37c00017 	ldw	ra,0(r6)
   48f00:	f83ed43a 	srli	ra,ra,16
   48f04:	f8001f26 	beq	ra,zero,48f84 <__multiply+0x1a0>
   48f08:	58c00017 	ldw	r3,0(r11)
   48f0c:	681d883a 	mov	r14,r13
   48f10:	581f883a 	mov	r15,r11
   48f14:	1811883a 	mov	r8,r3
   48f18:	5825883a 	mov	r18,r11
   48f1c:	000f883a 	mov	r7,zero
   48f20:	00000106 	br	48f28 <__multiply+0x144>
   48f24:	8825883a 	mov	r18,r17
   48f28:	7140000b 	ldhu	r5,0(r14)
   48f2c:	4010d43a 	srli	r8,r8,16
   48f30:	193fffcc 	andi	r4,r3,65535
   48f34:	2fcb383a 	mul	r5,r5,ra
   48f38:	7bc00104 	addi	r15,r15,4
   48f3c:	73800104 	addi	r14,r14,4
   48f40:	2a0b883a 	add	r5,r5,r8
   48f44:	29cb883a 	add	r5,r5,r7
   48f48:	2806943a 	slli	r3,r5,16
   48f4c:	94400104 	addi	r17,r18,4
   48f50:	280ad43a 	srli	r5,r5,16
   48f54:	1908b03a 	or	r4,r3,r4
   48f58:	793fff15 	stw	r4,-4(r15)
   48f5c:	70ffff17 	ldw	r3,-4(r14)
   48f60:	8a000017 	ldw	r8,0(r17)
   48f64:	1806d43a 	srli	r3,r3,16
   48f68:	413fffcc 	andi	r4,r8,65535
   48f6c:	1fc7383a 	mul	r3,r3,ra
   48f70:	1907883a 	add	r3,r3,r4
   48f74:	1947883a 	add	r3,r3,r5
   48f78:	180ed43a 	srli	r7,r3,16
   48f7c:	727fe936 	bltu	r14,r9,48f24 <__alt_data_end+0xfffc8f24>
   48f80:	90c00115 	stw	r3,4(r18)
   48f84:	31800104 	addi	r6,r6,4
   48f88:	5ac00104 	addi	r11,r11,4
   48f8c:	333fbe36 	bltu	r6,r12,48e88 <__alt_data_end+0xfffc8e88>
   48f90:	0400090e 	bge	zero,r16,48fb8 <__multiply+0x1d4>
   48f94:	50ffff17 	ldw	r3,-4(r10)
   48f98:	52bfff04 	addi	r10,r10,-4
   48f9c:	18000326 	beq	r3,zero,48fac <__multiply+0x1c8>
   48fa0:	00000506 	br	48fb8 <__multiply+0x1d4>
   48fa4:	50c00017 	ldw	r3,0(r10)
   48fa8:	1800031e 	bne	r3,zero,48fb8 <__multiply+0x1d4>
   48fac:	843fffc4 	addi	r16,r16,-1
   48fb0:	52bfff04 	addi	r10,r10,-4
   48fb4:	803ffb1e 	bne	r16,zero,48fa4 <__alt_data_end+0xfffc8fa4>
   48fb8:	14000415 	stw	r16,16(r2)
   48fbc:	dfc00517 	ldw	ra,20(sp)
   48fc0:	dd000417 	ldw	r20,16(sp)
   48fc4:	dcc00317 	ldw	r19,12(sp)
   48fc8:	dc800217 	ldw	r18,8(sp)
   48fcc:	dc400117 	ldw	r17,4(sp)
   48fd0:	dc000017 	ldw	r16,0(sp)
   48fd4:	dec00604 	addi	sp,sp,24
   48fd8:	f800283a 	ret

00048fdc <__pow5mult>:
   48fdc:	defffa04 	addi	sp,sp,-24
   48fe0:	dcc00315 	stw	r19,12(sp)
   48fe4:	dc000015 	stw	r16,0(sp)
   48fe8:	dfc00515 	stw	ra,20(sp)
   48fec:	dd000415 	stw	r20,16(sp)
   48ff0:	dc800215 	stw	r18,8(sp)
   48ff4:	dc400115 	stw	r17,4(sp)
   48ff8:	308000cc 	andi	r2,r6,3
   48ffc:	3021883a 	mov	r16,r6
   49000:	2027883a 	mov	r19,r4
   49004:	10002f1e 	bne	r2,zero,490c4 <__pow5mult+0xe8>
   49008:	2825883a 	mov	r18,r5
   4900c:	8021d0ba 	srai	r16,r16,2
   49010:	80001a26 	beq	r16,zero,4907c <__pow5mult+0xa0>
   49014:	9c401217 	ldw	r17,72(r19)
   49018:	8800061e 	bne	r17,zero,49034 <__pow5mult+0x58>
   4901c:	00003406 	br	490f0 <__pow5mult+0x114>
   49020:	8021d07a 	srai	r16,r16,1
   49024:	80001526 	beq	r16,zero,4907c <__pow5mult+0xa0>
   49028:	88800017 	ldw	r2,0(r17)
   4902c:	10001c26 	beq	r2,zero,490a0 <__pow5mult+0xc4>
   49030:	1023883a 	mov	r17,r2
   49034:	8080004c 	andi	r2,r16,1
   49038:	103ff926 	beq	r2,zero,49020 <__alt_data_end+0xfffc9020>
   4903c:	880d883a 	mov	r6,r17
   49040:	900b883a 	mov	r5,r18
   49044:	9809883a 	mov	r4,r19
   49048:	0048de40 	call	48de4 <__multiply>
   4904c:	90001b26 	beq	r18,zero,490bc <__pow5mult+0xe0>
   49050:	91000117 	ldw	r4,4(r18)
   49054:	98c01317 	ldw	r3,76(r19)
   49058:	8021d07a 	srai	r16,r16,1
   4905c:	2109883a 	add	r4,r4,r4
   49060:	2109883a 	add	r4,r4,r4
   49064:	1907883a 	add	r3,r3,r4
   49068:	19000017 	ldw	r4,0(r3)
   4906c:	91000015 	stw	r4,0(r18)
   49070:	1c800015 	stw	r18,0(r3)
   49074:	1025883a 	mov	r18,r2
   49078:	803feb1e 	bne	r16,zero,49028 <__alt_data_end+0xfffc9028>
   4907c:	9005883a 	mov	r2,r18
   49080:	dfc00517 	ldw	ra,20(sp)
   49084:	dd000417 	ldw	r20,16(sp)
   49088:	dcc00317 	ldw	r19,12(sp)
   4908c:	dc800217 	ldw	r18,8(sp)
   49090:	dc400117 	ldw	r17,4(sp)
   49094:	dc000017 	ldw	r16,0(sp)
   49098:	dec00604 	addi	sp,sp,24
   4909c:	f800283a 	ret
   490a0:	880d883a 	mov	r6,r17
   490a4:	880b883a 	mov	r5,r17
   490a8:	9809883a 	mov	r4,r19
   490ac:	0048de40 	call	48de4 <__multiply>
   490b0:	88800015 	stw	r2,0(r17)
   490b4:	10000015 	stw	zero,0(r2)
   490b8:	003fdd06 	br	49030 <__alt_data_end+0xfffc9030>
   490bc:	1025883a 	mov	r18,r2
   490c0:	003fd706 	br	49020 <__alt_data_end+0xfffc9020>
   490c4:	10bfffc4 	addi	r2,r2,-1
   490c8:	1085883a 	add	r2,r2,r2
   490cc:	00c00174 	movhi	r3,5
   490d0:	18c0e204 	addi	r3,r3,904
   490d4:	1085883a 	add	r2,r2,r2
   490d8:	1885883a 	add	r2,r3,r2
   490dc:	11800017 	ldw	r6,0(r2)
   490e0:	000f883a 	mov	r7,zero
   490e4:	0048a6c0 	call	48a6c <__multadd>
   490e8:	1025883a 	mov	r18,r2
   490ec:	003fc706 	br	4900c <__alt_data_end+0xfffc900c>
   490f0:	05000044 	movi	r20,1
   490f4:	a00b883a 	mov	r5,r20
   490f8:	9809883a 	mov	r4,r19
   490fc:	004899c0 	call	4899c <_Balloc>
   49100:	1023883a 	mov	r17,r2
   49104:	00809c44 	movi	r2,625
   49108:	88800515 	stw	r2,20(r17)
   4910c:	8d000415 	stw	r20,16(r17)
   49110:	9c401215 	stw	r17,72(r19)
   49114:	88000015 	stw	zero,0(r17)
   49118:	003fc606 	br	49034 <__alt_data_end+0xfffc9034>

0004911c <__lshift>:
   4911c:	defff904 	addi	sp,sp,-28
   49120:	dd400515 	stw	r21,20(sp)
   49124:	dcc00315 	stw	r19,12(sp)
   49128:	302bd17a 	srai	r21,r6,5
   4912c:	2cc00417 	ldw	r19,16(r5)
   49130:	28800217 	ldw	r2,8(r5)
   49134:	dd000415 	stw	r20,16(sp)
   49138:	ace7883a 	add	r19,r21,r19
   4913c:	dc800215 	stw	r18,8(sp)
   49140:	dc400115 	stw	r17,4(sp)
   49144:	dc000015 	stw	r16,0(sp)
   49148:	dfc00615 	stw	ra,24(sp)
   4914c:	9c000044 	addi	r16,r19,1
   49150:	2823883a 	mov	r17,r5
   49154:	3029883a 	mov	r20,r6
   49158:	2025883a 	mov	r18,r4
   4915c:	29400117 	ldw	r5,4(r5)
   49160:	1400030e 	bge	r2,r16,49170 <__lshift+0x54>
   49164:	1085883a 	add	r2,r2,r2
   49168:	29400044 	addi	r5,r5,1
   4916c:	143ffd16 	blt	r2,r16,49164 <__alt_data_end+0xfffc9164>
   49170:	9009883a 	mov	r4,r18
   49174:	004899c0 	call	4899c <_Balloc>
   49178:	10c00504 	addi	r3,r2,20
   4917c:	0540070e 	bge	zero,r21,4919c <__lshift+0x80>
   49180:	ad6b883a 	add	r21,r21,r21
   49184:	ad6b883a 	add	r21,r21,r21
   49188:	1809883a 	mov	r4,r3
   4918c:	1d47883a 	add	r3,r3,r21
   49190:	20000015 	stw	zero,0(r4)
   49194:	21000104 	addi	r4,r4,4
   49198:	193ffd1e 	bne	r3,r4,49190 <__alt_data_end+0xfffc9190>
   4919c:	8a000417 	ldw	r8,16(r17)
   491a0:	89000504 	addi	r4,r17,20
   491a4:	a18007cc 	andi	r6,r20,31
   491a8:	4211883a 	add	r8,r8,r8
   491ac:	4211883a 	add	r8,r8,r8
   491b0:	2211883a 	add	r8,r4,r8
   491b4:	30002326 	beq	r6,zero,49244 <__lshift+0x128>
   491b8:	02400804 	movi	r9,32
   491bc:	4993c83a 	sub	r9,r9,r6
   491c0:	000b883a 	mov	r5,zero
   491c4:	21c00017 	ldw	r7,0(r4)
   491c8:	1815883a 	mov	r10,r3
   491cc:	18c00104 	addi	r3,r3,4
   491d0:	398e983a 	sll	r7,r7,r6
   491d4:	21000104 	addi	r4,r4,4
   491d8:	394ab03a 	or	r5,r7,r5
   491dc:	197fff15 	stw	r5,-4(r3)
   491e0:	217fff17 	ldw	r5,-4(r4)
   491e4:	2a4ad83a 	srl	r5,r5,r9
   491e8:	223ff636 	bltu	r4,r8,491c4 <__alt_data_end+0xfffc91c4>
   491ec:	51400115 	stw	r5,4(r10)
   491f0:	28001a1e 	bne	r5,zero,4925c <__lshift+0x140>
   491f4:	843fffc4 	addi	r16,r16,-1
   491f8:	14000415 	stw	r16,16(r2)
   491fc:	88000826 	beq	r17,zero,49220 <__lshift+0x104>
   49200:	89000117 	ldw	r4,4(r17)
   49204:	90c01317 	ldw	r3,76(r18)
   49208:	2109883a 	add	r4,r4,r4
   4920c:	2109883a 	add	r4,r4,r4
   49210:	1907883a 	add	r3,r3,r4
   49214:	19000017 	ldw	r4,0(r3)
   49218:	89000015 	stw	r4,0(r17)
   4921c:	1c400015 	stw	r17,0(r3)
   49220:	dfc00617 	ldw	ra,24(sp)
   49224:	dd400517 	ldw	r21,20(sp)
   49228:	dd000417 	ldw	r20,16(sp)
   4922c:	dcc00317 	ldw	r19,12(sp)
   49230:	dc800217 	ldw	r18,8(sp)
   49234:	dc400117 	ldw	r17,4(sp)
   49238:	dc000017 	ldw	r16,0(sp)
   4923c:	dec00704 	addi	sp,sp,28
   49240:	f800283a 	ret
   49244:	21400017 	ldw	r5,0(r4)
   49248:	18c00104 	addi	r3,r3,4
   4924c:	21000104 	addi	r4,r4,4
   49250:	197fff15 	stw	r5,-4(r3)
   49254:	223ffb36 	bltu	r4,r8,49244 <__alt_data_end+0xfffc9244>
   49258:	003fe606 	br	491f4 <__alt_data_end+0xfffc91f4>
   4925c:	9c000084 	addi	r16,r19,2
   49260:	003fe406 	br	491f4 <__alt_data_end+0xfffc91f4>

00049264 <__mcmp>:
   49264:	20800417 	ldw	r2,16(r4)
   49268:	28c00417 	ldw	r3,16(r5)
   4926c:	10c5c83a 	sub	r2,r2,r3
   49270:	1000111e 	bne	r2,zero,492b8 <__mcmp+0x54>
   49274:	18c7883a 	add	r3,r3,r3
   49278:	18c7883a 	add	r3,r3,r3
   4927c:	21000504 	addi	r4,r4,20
   49280:	29400504 	addi	r5,r5,20
   49284:	20c5883a 	add	r2,r4,r3
   49288:	28cb883a 	add	r5,r5,r3
   4928c:	00000106 	br	49294 <__mcmp+0x30>
   49290:	20800a2e 	bgeu	r4,r2,492bc <__mcmp+0x58>
   49294:	10bfff04 	addi	r2,r2,-4
   49298:	297fff04 	addi	r5,r5,-4
   4929c:	11800017 	ldw	r6,0(r2)
   492a0:	28c00017 	ldw	r3,0(r5)
   492a4:	30fffa26 	beq	r6,r3,49290 <__alt_data_end+0xfffc9290>
   492a8:	30c00236 	bltu	r6,r3,492b4 <__mcmp+0x50>
   492ac:	00800044 	movi	r2,1
   492b0:	f800283a 	ret
   492b4:	00bfffc4 	movi	r2,-1
   492b8:	f800283a 	ret
   492bc:	0005883a 	mov	r2,zero
   492c0:	f800283a 	ret

000492c4 <__mdiff>:
   492c4:	28c00417 	ldw	r3,16(r5)
   492c8:	30800417 	ldw	r2,16(r6)
   492cc:	defffa04 	addi	sp,sp,-24
   492d0:	dcc00315 	stw	r19,12(sp)
   492d4:	dc800215 	stw	r18,8(sp)
   492d8:	dfc00515 	stw	ra,20(sp)
   492dc:	dd000415 	stw	r20,16(sp)
   492e0:	dc400115 	stw	r17,4(sp)
   492e4:	dc000015 	stw	r16,0(sp)
   492e8:	1887c83a 	sub	r3,r3,r2
   492ec:	2825883a 	mov	r18,r5
   492f0:	3027883a 	mov	r19,r6
   492f4:	1800141e 	bne	r3,zero,49348 <__mdiff+0x84>
   492f8:	1085883a 	add	r2,r2,r2
   492fc:	1085883a 	add	r2,r2,r2
   49300:	2a000504 	addi	r8,r5,20
   49304:	34000504 	addi	r16,r6,20
   49308:	4087883a 	add	r3,r8,r2
   4930c:	8085883a 	add	r2,r16,r2
   49310:	00000106 	br	49318 <__mdiff+0x54>
   49314:	40c0592e 	bgeu	r8,r3,4947c <__mdiff+0x1b8>
   49318:	18ffff04 	addi	r3,r3,-4
   4931c:	10bfff04 	addi	r2,r2,-4
   49320:	19c00017 	ldw	r7,0(r3)
   49324:	11400017 	ldw	r5,0(r2)
   49328:	397ffa26 	beq	r7,r5,49314 <__alt_data_end+0xfffc9314>
   4932c:	3940592e 	bgeu	r7,r5,49494 <__mdiff+0x1d0>
   49330:	9005883a 	mov	r2,r18
   49334:	4023883a 	mov	r17,r8
   49338:	9825883a 	mov	r18,r19
   4933c:	05000044 	movi	r20,1
   49340:	1027883a 	mov	r19,r2
   49344:	00000406 	br	49358 <__mdiff+0x94>
   49348:	18005616 	blt	r3,zero,494a4 <__mdiff+0x1e0>
   4934c:	34400504 	addi	r17,r6,20
   49350:	2c000504 	addi	r16,r5,20
   49354:	0029883a 	mov	r20,zero
   49358:	91400117 	ldw	r5,4(r18)
   4935c:	004899c0 	call	4899c <_Balloc>
   49360:	92400417 	ldw	r9,16(r18)
   49364:	9b000417 	ldw	r12,16(r19)
   49368:	12c00504 	addi	r11,r2,20
   4936c:	4a51883a 	add	r8,r9,r9
   49370:	6319883a 	add	r12,r12,r12
   49374:	4211883a 	add	r8,r8,r8
   49378:	6319883a 	add	r12,r12,r12
   4937c:	15000315 	stw	r20,12(r2)
   49380:	8211883a 	add	r8,r16,r8
   49384:	8b19883a 	add	r12,r17,r12
   49388:	0007883a 	mov	r3,zero
   4938c:	81400017 	ldw	r5,0(r16)
   49390:	89c00017 	ldw	r7,0(r17)
   49394:	59800104 	addi	r6,r11,4
   49398:	293fffcc 	andi	r4,r5,65535
   4939c:	20c7883a 	add	r3,r4,r3
   493a0:	393fffcc 	andi	r4,r7,65535
   493a4:	1909c83a 	sub	r4,r3,r4
   493a8:	280ad43a 	srli	r5,r5,16
   493ac:	380ed43a 	srli	r7,r7,16
   493b0:	2007d43a 	srai	r3,r4,16
   493b4:	213fffcc 	andi	r4,r4,65535
   493b8:	29cbc83a 	sub	r5,r5,r7
   493bc:	28c7883a 	add	r3,r5,r3
   493c0:	180a943a 	slli	r5,r3,16
   493c4:	8c400104 	addi	r17,r17,4
   493c8:	84000104 	addi	r16,r16,4
   493cc:	2908b03a 	or	r4,r5,r4
   493d0:	59000015 	stw	r4,0(r11)
   493d4:	1807d43a 	srai	r3,r3,16
   493d8:	3015883a 	mov	r10,r6
   493dc:	3017883a 	mov	r11,r6
   493e0:	8b3fea36 	bltu	r17,r12,4938c <__alt_data_end+0xfffc938c>
   493e4:	8200162e 	bgeu	r16,r8,49440 <__mdiff+0x17c>
   493e8:	8017883a 	mov	r11,r16
   493ec:	59400017 	ldw	r5,0(r11)
   493f0:	31800104 	addi	r6,r6,4
   493f4:	5ac00104 	addi	r11,r11,4
   493f8:	293fffcc 	andi	r4,r5,65535
   493fc:	20c7883a 	add	r3,r4,r3
   49400:	280ed43a 	srli	r7,r5,16
   49404:	180bd43a 	srai	r5,r3,16
   49408:	193fffcc 	andi	r4,r3,65535
   4940c:	3947883a 	add	r3,r7,r5
   49410:	180a943a 	slli	r5,r3,16
   49414:	1807d43a 	srai	r3,r3,16
   49418:	2908b03a 	or	r4,r5,r4
   4941c:	313fff15 	stw	r4,-4(r6)
   49420:	5a3ff236 	bltu	r11,r8,493ec <__alt_data_end+0xfffc93ec>
   49424:	0406303a 	nor	r3,zero,r16
   49428:	1a07883a 	add	r3,r3,r8
   4942c:	1806d0ba 	srli	r3,r3,2
   49430:	18c00044 	addi	r3,r3,1
   49434:	18c7883a 	add	r3,r3,r3
   49438:	18c7883a 	add	r3,r3,r3
   4943c:	50d5883a 	add	r10,r10,r3
   49440:	50ffff04 	addi	r3,r10,-4
   49444:	2000041e 	bne	r4,zero,49458 <__mdiff+0x194>
   49448:	18ffff04 	addi	r3,r3,-4
   4944c:	19000017 	ldw	r4,0(r3)
   49450:	4a7fffc4 	addi	r9,r9,-1
   49454:	203ffc26 	beq	r4,zero,49448 <__alt_data_end+0xfffc9448>
   49458:	12400415 	stw	r9,16(r2)
   4945c:	dfc00517 	ldw	ra,20(sp)
   49460:	dd000417 	ldw	r20,16(sp)
   49464:	dcc00317 	ldw	r19,12(sp)
   49468:	dc800217 	ldw	r18,8(sp)
   4946c:	dc400117 	ldw	r17,4(sp)
   49470:	dc000017 	ldw	r16,0(sp)
   49474:	dec00604 	addi	sp,sp,24
   49478:	f800283a 	ret
   4947c:	000b883a 	mov	r5,zero
   49480:	004899c0 	call	4899c <_Balloc>
   49484:	00c00044 	movi	r3,1
   49488:	10c00415 	stw	r3,16(r2)
   4948c:	10000515 	stw	zero,20(r2)
   49490:	003ff206 	br	4945c <__alt_data_end+0xfffc945c>
   49494:	8023883a 	mov	r17,r16
   49498:	0029883a 	mov	r20,zero
   4949c:	4021883a 	mov	r16,r8
   494a0:	003fad06 	br	49358 <__alt_data_end+0xfffc9358>
   494a4:	9005883a 	mov	r2,r18
   494a8:	94400504 	addi	r17,r18,20
   494ac:	9c000504 	addi	r16,r19,20
   494b0:	9825883a 	mov	r18,r19
   494b4:	05000044 	movi	r20,1
   494b8:	1027883a 	mov	r19,r2
   494bc:	003fa606 	br	49358 <__alt_data_end+0xfffc9358>

000494c0 <__ulp>:
   494c0:	295ffc2c 	andhi	r5,r5,32752
   494c4:	00bf3034 	movhi	r2,64704
   494c8:	2887883a 	add	r3,r5,r2
   494cc:	00c0020e 	bge	zero,r3,494d8 <__ulp+0x18>
   494d0:	0005883a 	mov	r2,zero
   494d4:	f800283a 	ret
   494d8:	00c7c83a 	sub	r3,zero,r3
   494dc:	1807d53a 	srai	r3,r3,20
   494e0:	008004c4 	movi	r2,19
   494e4:	10c00b0e 	bge	r2,r3,49514 <__ulp+0x54>
   494e8:	18bffb04 	addi	r2,r3,-20
   494ec:	01000784 	movi	r4,30
   494f0:	0007883a 	mov	r3,zero
   494f4:	20800516 	blt	r4,r2,4950c <__ulp+0x4c>
   494f8:	010007c4 	movi	r4,31
   494fc:	2089c83a 	sub	r4,r4,r2
   49500:	00800044 	movi	r2,1
   49504:	1104983a 	sll	r2,r2,r4
   49508:	f800283a 	ret
   4950c:	00800044 	movi	r2,1
   49510:	f800283a 	ret
   49514:	01400234 	movhi	r5,8
   49518:	28c7d83a 	sra	r3,r5,r3
   4951c:	0005883a 	mov	r2,zero
   49520:	f800283a 	ret

00049524 <__b2d>:
   49524:	defffa04 	addi	sp,sp,-24
   49528:	dc000015 	stw	r16,0(sp)
   4952c:	24000417 	ldw	r16,16(r4)
   49530:	dc400115 	stw	r17,4(sp)
   49534:	24400504 	addi	r17,r4,20
   49538:	8421883a 	add	r16,r16,r16
   4953c:	8421883a 	add	r16,r16,r16
   49540:	8c21883a 	add	r16,r17,r16
   49544:	dc800215 	stw	r18,8(sp)
   49548:	84bfff17 	ldw	r18,-4(r16)
   4954c:	dd000415 	stw	r20,16(sp)
   49550:	dcc00315 	stw	r19,12(sp)
   49554:	9009883a 	mov	r4,r18
   49558:	2829883a 	mov	r20,r5
   4955c:	dfc00515 	stw	ra,20(sp)
   49560:	0048c900 	call	48c90 <__hi0bits>
   49564:	00c00804 	movi	r3,32
   49568:	1889c83a 	sub	r4,r3,r2
   4956c:	a1000015 	stw	r4,0(r20)
   49570:	01000284 	movi	r4,10
   49574:	84ffff04 	addi	r19,r16,-4
   49578:	20801216 	blt	r4,r2,495c4 <__b2d+0xa0>
   4957c:	018002c4 	movi	r6,11
   49580:	308dc83a 	sub	r6,r6,r2
   49584:	9186d83a 	srl	r3,r18,r6
   49588:	18cffc34 	orhi	r3,r3,16368
   4958c:	8cc0212e 	bgeu	r17,r19,49614 <__b2d+0xf0>
   49590:	813ffe17 	ldw	r4,-8(r16)
   49594:	218cd83a 	srl	r6,r4,r6
   49598:	10800544 	addi	r2,r2,21
   4959c:	9084983a 	sll	r2,r18,r2
   495a0:	1184b03a 	or	r2,r2,r6
   495a4:	dfc00517 	ldw	ra,20(sp)
   495a8:	dd000417 	ldw	r20,16(sp)
   495ac:	dcc00317 	ldw	r19,12(sp)
   495b0:	dc800217 	ldw	r18,8(sp)
   495b4:	dc400117 	ldw	r17,4(sp)
   495b8:	dc000017 	ldw	r16,0(sp)
   495bc:	dec00604 	addi	sp,sp,24
   495c0:	f800283a 	ret
   495c4:	8cc00f2e 	bgeu	r17,r19,49604 <__b2d+0xe0>
   495c8:	117ffd44 	addi	r5,r2,-11
   495cc:	80bffe17 	ldw	r2,-8(r16)
   495d0:	28000e26 	beq	r5,zero,4960c <__b2d+0xe8>
   495d4:	1949c83a 	sub	r4,r3,r5
   495d8:	9164983a 	sll	r18,r18,r5
   495dc:	1106d83a 	srl	r3,r2,r4
   495e0:	81bffe04 	addi	r6,r16,-8
   495e4:	948ffc34 	orhi	r18,r18,16368
   495e8:	90c6b03a 	or	r3,r18,r3
   495ec:	89800e2e 	bgeu	r17,r6,49628 <__b2d+0x104>
   495f0:	81bffd17 	ldw	r6,-12(r16)
   495f4:	1144983a 	sll	r2,r2,r5
   495f8:	310ad83a 	srl	r5,r6,r4
   495fc:	2884b03a 	or	r2,r5,r2
   49600:	003fe806 	br	495a4 <__alt_data_end+0xfffc95a4>
   49604:	10bffd44 	addi	r2,r2,-11
   49608:	1000041e 	bne	r2,zero,4961c <__b2d+0xf8>
   4960c:	90cffc34 	orhi	r3,r18,16368
   49610:	003fe406 	br	495a4 <__alt_data_end+0xfffc95a4>
   49614:	000d883a 	mov	r6,zero
   49618:	003fdf06 	br	49598 <__alt_data_end+0xfffc9598>
   4961c:	90a4983a 	sll	r18,r18,r2
   49620:	0005883a 	mov	r2,zero
   49624:	003ff906 	br	4960c <__alt_data_end+0xfffc960c>
   49628:	1144983a 	sll	r2,r2,r5
   4962c:	003fdd06 	br	495a4 <__alt_data_end+0xfffc95a4>

00049630 <__d2b>:
   49630:	defff804 	addi	sp,sp,-32
   49634:	dc000215 	stw	r16,8(sp)
   49638:	3021883a 	mov	r16,r6
   4963c:	dc400315 	stw	r17,12(sp)
   49640:	8022907a 	slli	r17,r16,1
   49644:	dd000615 	stw	r20,24(sp)
   49648:	2829883a 	mov	r20,r5
   4964c:	01400044 	movi	r5,1
   49650:	dcc00515 	stw	r19,20(sp)
   49654:	dc800415 	stw	r18,16(sp)
   49658:	dfc00715 	stw	ra,28(sp)
   4965c:	3825883a 	mov	r18,r7
   49660:	8822d57a 	srli	r17,r17,21
   49664:	004899c0 	call	4899c <_Balloc>
   49668:	1027883a 	mov	r19,r2
   4966c:	00800434 	movhi	r2,16
   49670:	10bfffc4 	addi	r2,r2,-1
   49674:	808c703a 	and	r6,r16,r2
   49678:	88000126 	beq	r17,zero,49680 <__d2b+0x50>
   4967c:	31800434 	orhi	r6,r6,16
   49680:	d9800015 	stw	r6,0(sp)
   49684:	a0002426 	beq	r20,zero,49718 <__d2b+0xe8>
   49688:	d9000104 	addi	r4,sp,4
   4968c:	dd000115 	stw	r20,4(sp)
   49690:	0048cf80 	call	48cf8 <__lo0bits>
   49694:	d8c00017 	ldw	r3,0(sp)
   49698:	10002f1e 	bne	r2,zero,49758 <__d2b+0x128>
   4969c:	d9000117 	ldw	r4,4(sp)
   496a0:	99000515 	stw	r4,20(r19)
   496a4:	1821003a 	cmpeq	r16,r3,zero
   496a8:	01000084 	movi	r4,2
   496ac:	2421c83a 	sub	r16,r4,r16
   496b0:	98c00615 	stw	r3,24(r19)
   496b4:	9c000415 	stw	r16,16(r19)
   496b8:	88001f1e 	bne	r17,zero,49738 <__d2b+0x108>
   496bc:	10bef384 	addi	r2,r2,-1074
   496c0:	90800015 	stw	r2,0(r18)
   496c4:	00900034 	movhi	r2,16384
   496c8:	10bfffc4 	addi	r2,r2,-1
   496cc:	8085883a 	add	r2,r16,r2
   496d0:	1085883a 	add	r2,r2,r2
   496d4:	1085883a 	add	r2,r2,r2
   496d8:	9885883a 	add	r2,r19,r2
   496dc:	11000517 	ldw	r4,20(r2)
   496e0:	8020917a 	slli	r16,r16,5
   496e4:	0048c900 	call	48c90 <__hi0bits>
   496e8:	d8c00817 	ldw	r3,32(sp)
   496ec:	8085c83a 	sub	r2,r16,r2
   496f0:	18800015 	stw	r2,0(r3)
   496f4:	9805883a 	mov	r2,r19
   496f8:	dfc00717 	ldw	ra,28(sp)
   496fc:	dd000617 	ldw	r20,24(sp)
   49700:	dcc00517 	ldw	r19,20(sp)
   49704:	dc800417 	ldw	r18,16(sp)
   49708:	dc400317 	ldw	r17,12(sp)
   4970c:	dc000217 	ldw	r16,8(sp)
   49710:	dec00804 	addi	sp,sp,32
   49714:	f800283a 	ret
   49718:	d809883a 	mov	r4,sp
   4971c:	0048cf80 	call	48cf8 <__lo0bits>
   49720:	d8c00017 	ldw	r3,0(sp)
   49724:	04000044 	movi	r16,1
   49728:	9c000415 	stw	r16,16(r19)
   4972c:	98c00515 	stw	r3,20(r19)
   49730:	10800804 	addi	r2,r2,32
   49734:	883fe126 	beq	r17,zero,496bc <__alt_data_end+0xfffc96bc>
   49738:	00c00d44 	movi	r3,53
   4973c:	8c7ef344 	addi	r17,r17,-1075
   49740:	88a3883a 	add	r17,r17,r2
   49744:	1885c83a 	sub	r2,r3,r2
   49748:	d8c00817 	ldw	r3,32(sp)
   4974c:	94400015 	stw	r17,0(r18)
   49750:	18800015 	stw	r2,0(r3)
   49754:	003fe706 	br	496f4 <__alt_data_end+0xfffc96f4>
   49758:	01000804 	movi	r4,32
   4975c:	2089c83a 	sub	r4,r4,r2
   49760:	1908983a 	sll	r4,r3,r4
   49764:	d9400117 	ldw	r5,4(sp)
   49768:	1886d83a 	srl	r3,r3,r2
   4976c:	2148b03a 	or	r4,r4,r5
   49770:	99000515 	stw	r4,20(r19)
   49774:	d8c00015 	stw	r3,0(sp)
   49778:	003fca06 	br	496a4 <__alt_data_end+0xfffc96a4>

0004977c <__ratio>:
   4977c:	defff904 	addi	sp,sp,-28
   49780:	dc400315 	stw	r17,12(sp)
   49784:	2823883a 	mov	r17,r5
   49788:	d9400104 	addi	r5,sp,4
   4978c:	dfc00615 	stw	ra,24(sp)
   49790:	dcc00515 	stw	r19,20(sp)
   49794:	dc800415 	stw	r18,16(sp)
   49798:	2027883a 	mov	r19,r4
   4979c:	dc000215 	stw	r16,8(sp)
   497a0:	00495240 	call	49524 <__b2d>
   497a4:	d80b883a 	mov	r5,sp
   497a8:	8809883a 	mov	r4,r17
   497ac:	1025883a 	mov	r18,r2
   497b0:	1821883a 	mov	r16,r3
   497b4:	00495240 	call	49524 <__b2d>
   497b8:	8a000417 	ldw	r8,16(r17)
   497bc:	99000417 	ldw	r4,16(r19)
   497c0:	d9400117 	ldw	r5,4(sp)
   497c4:	2209c83a 	sub	r4,r4,r8
   497c8:	2010917a 	slli	r8,r4,5
   497cc:	d9000017 	ldw	r4,0(sp)
   497d0:	2909c83a 	sub	r4,r5,r4
   497d4:	4109883a 	add	r4,r8,r4
   497d8:	01000e0e 	bge	zero,r4,49814 <__ratio+0x98>
   497dc:	2008953a 	slli	r4,r4,20
   497e0:	2421883a 	add	r16,r4,r16
   497e4:	100d883a 	mov	r6,r2
   497e8:	180f883a 	mov	r7,r3
   497ec:	9009883a 	mov	r4,r18
   497f0:	800b883a 	mov	r5,r16
   497f4:	004db980 	call	4db98 <__divdf3>
   497f8:	dfc00617 	ldw	ra,24(sp)
   497fc:	dcc00517 	ldw	r19,20(sp)
   49800:	dc800417 	ldw	r18,16(sp)
   49804:	dc400317 	ldw	r17,12(sp)
   49808:	dc000217 	ldw	r16,8(sp)
   4980c:	dec00704 	addi	sp,sp,28
   49810:	f800283a 	ret
   49814:	2008953a 	slli	r4,r4,20
   49818:	1907c83a 	sub	r3,r3,r4
   4981c:	003ff106 	br	497e4 <__alt_data_end+0xfffc97e4>

00049820 <_mprec_log10>:
   49820:	defffe04 	addi	sp,sp,-8
   49824:	dc000015 	stw	r16,0(sp)
   49828:	dfc00115 	stw	ra,4(sp)
   4982c:	008005c4 	movi	r2,23
   49830:	2021883a 	mov	r16,r4
   49834:	11000d0e 	bge	r2,r4,4986c <_mprec_log10+0x4c>
   49838:	0005883a 	mov	r2,zero
   4983c:	00cffc34 	movhi	r3,16368
   49840:	843fffc4 	addi	r16,r16,-1
   49844:	000d883a 	mov	r6,zero
   49848:	01d00934 	movhi	r7,16420
   4984c:	1009883a 	mov	r4,r2
   49850:	180b883a 	mov	r5,r3
   49854:	004e6d80 	call	4e6d8 <__muldf3>
   49858:	803ff91e 	bne	r16,zero,49840 <__alt_data_end+0xfffc9840>
   4985c:	dfc00117 	ldw	ra,4(sp)
   49860:	dc000017 	ldw	r16,0(sp)
   49864:	dec00204 	addi	sp,sp,8
   49868:	f800283a 	ret
   4986c:	202090fa 	slli	r16,r4,3
   49870:	00800174 	movhi	r2,5
   49874:	1080f904 	addi	r2,r2,996
   49878:	1421883a 	add	r16,r2,r16
   4987c:	80800017 	ldw	r2,0(r16)
   49880:	80c00117 	ldw	r3,4(r16)
   49884:	dfc00117 	ldw	ra,4(sp)
   49888:	dc000017 	ldw	r16,0(sp)
   4988c:	dec00204 	addi	sp,sp,8
   49890:	f800283a 	ret

00049894 <__copybits>:
   49894:	297fffc4 	addi	r5,r5,-1
   49898:	280fd17a 	srai	r7,r5,5
   4989c:	30c00417 	ldw	r3,16(r6)
   498a0:	30800504 	addi	r2,r6,20
   498a4:	39c00044 	addi	r7,r7,1
   498a8:	18c7883a 	add	r3,r3,r3
   498ac:	39cf883a 	add	r7,r7,r7
   498b0:	18c7883a 	add	r3,r3,r3
   498b4:	39cf883a 	add	r7,r7,r7
   498b8:	10c7883a 	add	r3,r2,r3
   498bc:	21cf883a 	add	r7,r4,r7
   498c0:	10c00d2e 	bgeu	r2,r3,498f8 <__copybits+0x64>
   498c4:	200b883a 	mov	r5,r4
   498c8:	12000017 	ldw	r8,0(r2)
   498cc:	29400104 	addi	r5,r5,4
   498d0:	10800104 	addi	r2,r2,4
   498d4:	2a3fff15 	stw	r8,-4(r5)
   498d8:	10fffb36 	bltu	r2,r3,498c8 <__alt_data_end+0xfffc98c8>
   498dc:	1985c83a 	sub	r2,r3,r6
   498e0:	10bffac4 	addi	r2,r2,-21
   498e4:	1004d0ba 	srli	r2,r2,2
   498e8:	10800044 	addi	r2,r2,1
   498ec:	1085883a 	add	r2,r2,r2
   498f0:	1085883a 	add	r2,r2,r2
   498f4:	2089883a 	add	r4,r4,r2
   498f8:	21c0032e 	bgeu	r4,r7,49908 <__copybits+0x74>
   498fc:	20000015 	stw	zero,0(r4)
   49900:	21000104 	addi	r4,r4,4
   49904:	21fffd36 	bltu	r4,r7,498fc <__alt_data_end+0xfffc98fc>
   49908:	f800283a 	ret

0004990c <__any_on>:
   4990c:	20c00417 	ldw	r3,16(r4)
   49910:	2805d17a 	srai	r2,r5,5
   49914:	21000504 	addi	r4,r4,20
   49918:	18800d0e 	bge	r3,r2,49950 <__any_on+0x44>
   4991c:	18c7883a 	add	r3,r3,r3
   49920:	18c7883a 	add	r3,r3,r3
   49924:	20c7883a 	add	r3,r4,r3
   49928:	20c0192e 	bgeu	r4,r3,49990 <__any_on+0x84>
   4992c:	18bfff17 	ldw	r2,-4(r3)
   49930:	18ffff04 	addi	r3,r3,-4
   49934:	1000041e 	bne	r2,zero,49948 <__any_on+0x3c>
   49938:	20c0142e 	bgeu	r4,r3,4998c <__any_on+0x80>
   4993c:	18ffff04 	addi	r3,r3,-4
   49940:	19400017 	ldw	r5,0(r3)
   49944:	283ffc26 	beq	r5,zero,49938 <__alt_data_end+0xfffc9938>
   49948:	00800044 	movi	r2,1
   4994c:	f800283a 	ret
   49950:	10c00a0e 	bge	r2,r3,4997c <__any_on+0x70>
   49954:	1085883a 	add	r2,r2,r2
   49958:	1085883a 	add	r2,r2,r2
   4995c:	294007cc 	andi	r5,r5,31
   49960:	2087883a 	add	r3,r4,r2
   49964:	283ff026 	beq	r5,zero,49928 <__alt_data_end+0xfffc9928>
   49968:	19800017 	ldw	r6,0(r3)
   4996c:	3144d83a 	srl	r2,r6,r5
   49970:	114a983a 	sll	r5,r2,r5
   49974:	317ff41e 	bne	r6,r5,49948 <__alt_data_end+0xfffc9948>
   49978:	003feb06 	br	49928 <__alt_data_end+0xfffc9928>
   4997c:	1085883a 	add	r2,r2,r2
   49980:	1085883a 	add	r2,r2,r2
   49984:	2087883a 	add	r3,r4,r2
   49988:	003fe706 	br	49928 <__alt_data_end+0xfffc9928>
   4998c:	f800283a 	ret
   49990:	0005883a 	mov	r2,zero
   49994:	f800283a 	ret

00049998 <__fpclassifyd>:
   49998:	00a00034 	movhi	r2,32768
   4999c:	10bfffc4 	addi	r2,r2,-1
   499a0:	2884703a 	and	r2,r5,r2
   499a4:	10000726 	beq	r2,zero,499c4 <__fpclassifyd+0x2c>
   499a8:	00fffc34 	movhi	r3,65520
   499ac:	019ff834 	movhi	r6,32736
   499b0:	28c7883a 	add	r3,r5,r3
   499b4:	31bfffc4 	addi	r6,r6,-1
   499b8:	30c00536 	bltu	r6,r3,499d0 <__fpclassifyd+0x38>
   499bc:	00800104 	movi	r2,4
   499c0:	f800283a 	ret
   499c4:	2000021e 	bne	r4,zero,499d0 <__fpclassifyd+0x38>
   499c8:	00800084 	movi	r2,2
   499cc:	f800283a 	ret
   499d0:	00dffc34 	movhi	r3,32752
   499d4:	019ff834 	movhi	r6,32736
   499d8:	28cb883a 	add	r5,r5,r3
   499dc:	31bfffc4 	addi	r6,r6,-1
   499e0:	317ff62e 	bgeu	r6,r5,499bc <__alt_data_end+0xfffc99bc>
   499e4:	01400434 	movhi	r5,16
   499e8:	297fffc4 	addi	r5,r5,-1
   499ec:	28800236 	bltu	r5,r2,499f8 <__fpclassifyd+0x60>
   499f0:	008000c4 	movi	r2,3
   499f4:	f800283a 	ret
   499f8:	10c00226 	beq	r2,r3,49a04 <__fpclassifyd+0x6c>
   499fc:	0005883a 	mov	r2,zero
   49a00:	f800283a 	ret
   49a04:	2005003a 	cmpeq	r2,r4,zero
   49a08:	f800283a 	ret

00049a0c <_sbrk_r>:
   49a0c:	defffd04 	addi	sp,sp,-12
   49a10:	dc000015 	stw	r16,0(sp)
   49a14:	04000174 	movhi	r16,5
   49a18:	dc400115 	stw	r17,4(sp)
   49a1c:	840ef404 	addi	r16,r16,15312
   49a20:	2023883a 	mov	r17,r4
   49a24:	2809883a 	mov	r4,r5
   49a28:	dfc00215 	stw	ra,8(sp)
   49a2c:	80000015 	stw	zero,0(r16)
   49a30:	004fde40 	call	4fde4 <sbrk>
   49a34:	00ffffc4 	movi	r3,-1
   49a38:	10c00526 	beq	r2,r3,49a50 <_sbrk_r+0x44>
   49a3c:	dfc00217 	ldw	ra,8(sp)
   49a40:	dc400117 	ldw	r17,4(sp)
   49a44:	dc000017 	ldw	r16,0(sp)
   49a48:	dec00304 	addi	sp,sp,12
   49a4c:	f800283a 	ret
   49a50:	80c00017 	ldw	r3,0(r16)
   49a54:	183ff926 	beq	r3,zero,49a3c <__alt_data_end+0xfffc9a3c>
   49a58:	88c00015 	stw	r3,0(r17)
   49a5c:	003ff706 	br	49a3c <__alt_data_end+0xfffc9a3c>

00049a60 <__sread>:
   49a60:	defffe04 	addi	sp,sp,-8
   49a64:	dc000015 	stw	r16,0(sp)
   49a68:	2821883a 	mov	r16,r5
   49a6c:	2940038f 	ldh	r5,14(r5)
   49a70:	dfc00115 	stw	ra,4(sp)
   49a74:	004be6c0 	call	4be6c <_read_r>
   49a78:	10000716 	blt	r2,zero,49a98 <__sread+0x38>
   49a7c:	80c01417 	ldw	r3,80(r16)
   49a80:	1887883a 	add	r3,r3,r2
   49a84:	80c01415 	stw	r3,80(r16)
   49a88:	dfc00117 	ldw	ra,4(sp)
   49a8c:	dc000017 	ldw	r16,0(sp)
   49a90:	dec00204 	addi	sp,sp,8
   49a94:	f800283a 	ret
   49a98:	80c0030b 	ldhu	r3,12(r16)
   49a9c:	18fbffcc 	andi	r3,r3,61439
   49aa0:	80c0030d 	sth	r3,12(r16)
   49aa4:	dfc00117 	ldw	ra,4(sp)
   49aa8:	dc000017 	ldw	r16,0(sp)
   49aac:	dec00204 	addi	sp,sp,8
   49ab0:	f800283a 	ret

00049ab4 <__seofread>:
   49ab4:	0005883a 	mov	r2,zero
   49ab8:	f800283a 	ret

00049abc <__swrite>:
   49abc:	2880030b 	ldhu	r2,12(r5)
   49ac0:	defffb04 	addi	sp,sp,-20
   49ac4:	dcc00315 	stw	r19,12(sp)
   49ac8:	dc800215 	stw	r18,8(sp)
   49acc:	dc400115 	stw	r17,4(sp)
   49ad0:	dc000015 	stw	r16,0(sp)
   49ad4:	dfc00415 	stw	ra,16(sp)
   49ad8:	10c0400c 	andi	r3,r2,256
   49adc:	2821883a 	mov	r16,r5
   49ae0:	2023883a 	mov	r17,r4
   49ae4:	3025883a 	mov	r18,r6
   49ae8:	3827883a 	mov	r19,r7
   49aec:	18000526 	beq	r3,zero,49b04 <__swrite+0x48>
   49af0:	2940038f 	ldh	r5,14(r5)
   49af4:	01c00084 	movi	r7,2
   49af8:	000d883a 	mov	r6,zero
   49afc:	004bcb00 	call	4bcb0 <_lseek_r>
   49b00:	8080030b 	ldhu	r2,12(r16)
   49b04:	8140038f 	ldh	r5,14(r16)
   49b08:	10bbffcc 	andi	r2,r2,61439
   49b0c:	980f883a 	mov	r7,r19
   49b10:	900d883a 	mov	r6,r18
   49b14:	8809883a 	mov	r4,r17
   49b18:	8080030d 	sth	r2,12(r16)
   49b1c:	dfc00417 	ldw	ra,16(sp)
   49b20:	dcc00317 	ldw	r19,12(sp)
   49b24:	dc800217 	ldw	r18,8(sp)
   49b28:	dc400117 	ldw	r17,4(sp)
   49b2c:	dc000017 	ldw	r16,0(sp)
   49b30:	dec00504 	addi	sp,sp,20
   49b34:	004b2c01 	jmpi	4b2c0 <_write_r>

00049b38 <__sseek>:
   49b38:	defffe04 	addi	sp,sp,-8
   49b3c:	dc000015 	stw	r16,0(sp)
   49b40:	2821883a 	mov	r16,r5
   49b44:	2940038f 	ldh	r5,14(r5)
   49b48:	dfc00115 	stw	ra,4(sp)
   49b4c:	004bcb00 	call	4bcb0 <_lseek_r>
   49b50:	00ffffc4 	movi	r3,-1
   49b54:	10c00826 	beq	r2,r3,49b78 <__sseek+0x40>
   49b58:	80c0030b 	ldhu	r3,12(r16)
   49b5c:	80801415 	stw	r2,80(r16)
   49b60:	18c40014 	ori	r3,r3,4096
   49b64:	80c0030d 	sth	r3,12(r16)
   49b68:	dfc00117 	ldw	ra,4(sp)
   49b6c:	dc000017 	ldw	r16,0(sp)
   49b70:	dec00204 	addi	sp,sp,8
   49b74:	f800283a 	ret
   49b78:	80c0030b 	ldhu	r3,12(r16)
   49b7c:	18fbffcc 	andi	r3,r3,61439
   49b80:	80c0030d 	sth	r3,12(r16)
   49b84:	dfc00117 	ldw	ra,4(sp)
   49b88:	dc000017 	ldw	r16,0(sp)
   49b8c:	dec00204 	addi	sp,sp,8
   49b90:	f800283a 	ret

00049b94 <__sclose>:
   49b94:	2940038f 	ldh	r5,14(r5)
   49b98:	004b3201 	jmpi	4b320 <_close_r>

00049b9c <strcmp>:
   49b9c:	2144b03a 	or	r2,r4,r5
   49ba0:	108000cc 	andi	r2,r2,3
   49ba4:	1000171e 	bne	r2,zero,49c04 <strcmp+0x68>
   49ba8:	20800017 	ldw	r2,0(r4)
   49bac:	28c00017 	ldw	r3,0(r5)
   49bb0:	10c0141e 	bne	r2,r3,49c04 <strcmp+0x68>
   49bb4:	027fbff4 	movhi	r9,65279
   49bb8:	4a7fbfc4 	addi	r9,r9,-257
   49bbc:	0086303a 	nor	r3,zero,r2
   49bc0:	02202074 	movhi	r8,32897
   49bc4:	1245883a 	add	r2,r2,r9
   49bc8:	42202004 	addi	r8,r8,-32640
   49bcc:	10c4703a 	and	r2,r2,r3
   49bd0:	1204703a 	and	r2,r2,r8
   49bd4:	10000226 	beq	r2,zero,49be0 <strcmp+0x44>
   49bd8:	00002306 	br	49c68 <strcmp+0xcc>
   49bdc:	1000221e 	bne	r2,zero,49c68 <strcmp+0xcc>
   49be0:	21000104 	addi	r4,r4,4
   49be4:	20c00017 	ldw	r3,0(r4)
   49be8:	29400104 	addi	r5,r5,4
   49bec:	29800017 	ldw	r6,0(r5)
   49bf0:	1a4f883a 	add	r7,r3,r9
   49bf4:	00c4303a 	nor	r2,zero,r3
   49bf8:	3884703a 	and	r2,r7,r2
   49bfc:	1204703a 	and	r2,r2,r8
   49c00:	19bff626 	beq	r3,r6,49bdc <__alt_data_end+0xfffc9bdc>
   49c04:	20800003 	ldbu	r2,0(r4)
   49c08:	10c03fcc 	andi	r3,r2,255
   49c0c:	18c0201c 	xori	r3,r3,128
   49c10:	18ffe004 	addi	r3,r3,-128
   49c14:	18000c26 	beq	r3,zero,49c48 <strcmp+0xac>
   49c18:	29800007 	ldb	r6,0(r5)
   49c1c:	19800326 	beq	r3,r6,49c2c <strcmp+0x90>
   49c20:	00001306 	br	49c70 <strcmp+0xd4>
   49c24:	29800007 	ldb	r6,0(r5)
   49c28:	11800b1e 	bne	r2,r6,49c58 <strcmp+0xbc>
   49c2c:	21000044 	addi	r4,r4,1
   49c30:	20c00003 	ldbu	r3,0(r4)
   49c34:	29400044 	addi	r5,r5,1
   49c38:	18803fcc 	andi	r2,r3,255
   49c3c:	1080201c 	xori	r2,r2,128
   49c40:	10bfe004 	addi	r2,r2,-128
   49c44:	103ff71e 	bne	r2,zero,49c24 <__alt_data_end+0xfffc9c24>
   49c48:	0007883a 	mov	r3,zero
   49c4c:	28800003 	ldbu	r2,0(r5)
   49c50:	1885c83a 	sub	r2,r3,r2
   49c54:	f800283a 	ret
   49c58:	28800003 	ldbu	r2,0(r5)
   49c5c:	18c03fcc 	andi	r3,r3,255
   49c60:	1885c83a 	sub	r2,r3,r2
   49c64:	f800283a 	ret
   49c68:	0005883a 	mov	r2,zero
   49c6c:	f800283a 	ret
   49c70:	10c03fcc 	andi	r3,r2,255
   49c74:	003ff506 	br	49c4c <__alt_data_end+0xfffc9c4c>

00049c78 <__sprint_r.part.0>:
   49c78:	28801917 	ldw	r2,100(r5)
   49c7c:	defff604 	addi	sp,sp,-40
   49c80:	dd400515 	stw	r21,20(sp)
   49c84:	dfc00915 	stw	ra,36(sp)
   49c88:	df000815 	stw	fp,32(sp)
   49c8c:	ddc00715 	stw	r23,28(sp)
   49c90:	dd800615 	stw	r22,24(sp)
   49c94:	dd000415 	stw	r20,16(sp)
   49c98:	dcc00315 	stw	r19,12(sp)
   49c9c:	dc800215 	stw	r18,8(sp)
   49ca0:	dc400115 	stw	r17,4(sp)
   49ca4:	dc000015 	stw	r16,0(sp)
   49ca8:	1088000c 	andi	r2,r2,8192
   49cac:	302b883a 	mov	r21,r6
   49cb0:	10002e26 	beq	r2,zero,49d6c <__sprint_r.part.0+0xf4>
   49cb4:	30800217 	ldw	r2,8(r6)
   49cb8:	35800017 	ldw	r22,0(r6)
   49cbc:	10002926 	beq	r2,zero,49d64 <__sprint_r.part.0+0xec>
   49cc0:	2827883a 	mov	r19,r5
   49cc4:	2029883a 	mov	r20,r4
   49cc8:	b5c00104 	addi	r23,r22,4
   49ccc:	04bfffc4 	movi	r18,-1
   49cd0:	bc400017 	ldw	r17,0(r23)
   49cd4:	b4000017 	ldw	r16,0(r22)
   49cd8:	0039883a 	mov	fp,zero
   49cdc:	8822d0ba 	srli	r17,r17,2
   49ce0:	8800031e 	bne	r17,zero,49cf0 <__sprint_r.part.0+0x78>
   49ce4:	00001806 	br	49d48 <__sprint_r.part.0+0xd0>
   49ce8:	84000104 	addi	r16,r16,4
   49cec:	8f001526 	beq	r17,fp,49d44 <__sprint_r.part.0+0xcc>
   49cf0:	81400017 	ldw	r5,0(r16)
   49cf4:	980d883a 	mov	r6,r19
   49cf8:	a009883a 	mov	r4,r20
   49cfc:	004b6a00 	call	4b6a0 <_fputwc_r>
   49d00:	e7000044 	addi	fp,fp,1
   49d04:	14bff81e 	bne	r2,r18,49ce8 <__alt_data_end+0xfffc9ce8>
   49d08:	9005883a 	mov	r2,r18
   49d0c:	a8000215 	stw	zero,8(r21)
   49d10:	a8000115 	stw	zero,4(r21)
   49d14:	dfc00917 	ldw	ra,36(sp)
   49d18:	df000817 	ldw	fp,32(sp)
   49d1c:	ddc00717 	ldw	r23,28(sp)
   49d20:	dd800617 	ldw	r22,24(sp)
   49d24:	dd400517 	ldw	r21,20(sp)
   49d28:	dd000417 	ldw	r20,16(sp)
   49d2c:	dcc00317 	ldw	r19,12(sp)
   49d30:	dc800217 	ldw	r18,8(sp)
   49d34:	dc400117 	ldw	r17,4(sp)
   49d38:	dc000017 	ldw	r16,0(sp)
   49d3c:	dec00a04 	addi	sp,sp,40
   49d40:	f800283a 	ret
   49d44:	a8800217 	ldw	r2,8(r21)
   49d48:	8c63883a 	add	r17,r17,r17
   49d4c:	8c63883a 	add	r17,r17,r17
   49d50:	1445c83a 	sub	r2,r2,r17
   49d54:	a8800215 	stw	r2,8(r21)
   49d58:	b5800204 	addi	r22,r22,8
   49d5c:	bdc00204 	addi	r23,r23,8
   49d60:	103fdb1e 	bne	r2,zero,49cd0 <__alt_data_end+0xfffc9cd0>
   49d64:	0005883a 	mov	r2,zero
   49d68:	003fe806 	br	49d0c <__alt_data_end+0xfffc9d0c>
   49d6c:	004b7a00 	call	4b7a0 <__sfvwrite_r>
   49d70:	003fe606 	br	49d0c <__alt_data_end+0xfffc9d0c>

00049d74 <__sprint_r>:
   49d74:	30c00217 	ldw	r3,8(r6)
   49d78:	18000126 	beq	r3,zero,49d80 <__sprint_r+0xc>
   49d7c:	0049c781 	jmpi	49c78 <__sprint_r.part.0>
   49d80:	30000115 	stw	zero,4(r6)
   49d84:	0005883a 	mov	r2,zero
   49d88:	f800283a 	ret

00049d8c <___vfiprintf_internal_r>:
   49d8c:	deffc904 	addi	sp,sp,-220
   49d90:	df003515 	stw	fp,212(sp)
   49d94:	dd003115 	stw	r20,196(sp)
   49d98:	dfc03615 	stw	ra,216(sp)
   49d9c:	ddc03415 	stw	r23,208(sp)
   49da0:	dd803315 	stw	r22,204(sp)
   49da4:	dd403215 	stw	r21,200(sp)
   49da8:	dcc03015 	stw	r19,192(sp)
   49dac:	dc802f15 	stw	r18,188(sp)
   49db0:	dc402e15 	stw	r17,184(sp)
   49db4:	dc002d15 	stw	r16,180(sp)
   49db8:	d9002015 	stw	r4,128(sp)
   49dbc:	d9c02215 	stw	r7,136(sp)
   49dc0:	2829883a 	mov	r20,r5
   49dc4:	3039883a 	mov	fp,r6
   49dc8:	20000226 	beq	r4,zero,49dd4 <___vfiprintf_internal_r+0x48>
   49dcc:	20800e17 	ldw	r2,56(r4)
   49dd0:	1000cf26 	beq	r2,zero,4a110 <___vfiprintf_internal_r+0x384>
   49dd4:	a080030b 	ldhu	r2,12(r20)
   49dd8:	10c8000c 	andi	r3,r2,8192
   49ddc:	1800061e 	bne	r3,zero,49df8 <___vfiprintf_internal_r+0x6c>
   49de0:	a1001917 	ldw	r4,100(r20)
   49de4:	00f7ffc4 	movi	r3,-8193
   49de8:	10880014 	ori	r2,r2,8192
   49dec:	20c6703a 	and	r3,r4,r3
   49df0:	a080030d 	sth	r2,12(r20)
   49df4:	a0c01915 	stw	r3,100(r20)
   49df8:	10c0020c 	andi	r3,r2,8
   49dfc:	1800a926 	beq	r3,zero,4a0a4 <___vfiprintf_internal_r+0x318>
   49e00:	a0c00417 	ldw	r3,16(r20)
   49e04:	1800a726 	beq	r3,zero,4a0a4 <___vfiprintf_internal_r+0x318>
   49e08:	1080068c 	andi	r2,r2,26
   49e0c:	00c00284 	movi	r3,10
   49e10:	10c0ac26 	beq	r2,r3,4a0c4 <___vfiprintf_internal_r+0x338>
   49e14:	da801a04 	addi	r10,sp,104
   49e18:	da801e15 	stw	r10,120(sp)
   49e1c:	d8801e17 	ldw	r2,120(sp)
   49e20:	da8019c4 	addi	r10,sp,103
   49e24:	05800174 	movhi	r22,5
   49e28:	05c00174 	movhi	r23,5
   49e2c:	da801f15 	stw	r10,124(sp)
   49e30:	1295c83a 	sub	r10,r2,r10
   49e34:	b5812f04 	addi	r22,r22,1212
   49e38:	bdc12b04 	addi	r23,r23,1196
   49e3c:	dec01a15 	stw	sp,104(sp)
   49e40:	d8001c15 	stw	zero,112(sp)
   49e44:	d8001b15 	stw	zero,108(sp)
   49e48:	d8002615 	stw	zero,152(sp)
   49e4c:	d8002315 	stw	zero,140(sp)
   49e50:	da802715 	stw	r10,156(sp)
   49e54:	d811883a 	mov	r8,sp
   49e58:	dd002115 	stw	r20,132(sp)
   49e5c:	e021883a 	mov	r16,fp
   49e60:	80800007 	ldb	r2,0(r16)
   49e64:	1003ea26 	beq	r2,zero,4ae10 <___vfiprintf_internal_r+0x1084>
   49e68:	00c00944 	movi	r3,37
   49e6c:	8025883a 	mov	r18,r16
   49e70:	10c0021e 	bne	r2,r3,49e7c <___vfiprintf_internal_r+0xf0>
   49e74:	00001606 	br	49ed0 <___vfiprintf_internal_r+0x144>
   49e78:	10c00326 	beq	r2,r3,49e88 <___vfiprintf_internal_r+0xfc>
   49e7c:	94800044 	addi	r18,r18,1
   49e80:	90800007 	ldb	r2,0(r18)
   49e84:	103ffc1e 	bne	r2,zero,49e78 <__alt_data_end+0xfffc9e78>
   49e88:	9423c83a 	sub	r17,r18,r16
   49e8c:	88001026 	beq	r17,zero,49ed0 <___vfiprintf_internal_r+0x144>
   49e90:	d8c01c17 	ldw	r3,112(sp)
   49e94:	d8801b17 	ldw	r2,108(sp)
   49e98:	44000015 	stw	r16,0(r8)
   49e9c:	88c7883a 	add	r3,r17,r3
   49ea0:	10800044 	addi	r2,r2,1
   49ea4:	44400115 	stw	r17,4(r8)
   49ea8:	d8c01c15 	stw	r3,112(sp)
   49eac:	d8801b15 	stw	r2,108(sp)
   49eb0:	010001c4 	movi	r4,7
   49eb4:	2080760e 	bge	r4,r2,4a090 <___vfiprintf_internal_r+0x304>
   49eb8:	1803821e 	bne	r3,zero,4acc4 <___vfiprintf_internal_r+0xf38>
   49ebc:	da802317 	ldw	r10,140(sp)
   49ec0:	d8001b15 	stw	zero,108(sp)
   49ec4:	d811883a 	mov	r8,sp
   49ec8:	5455883a 	add	r10,r10,r17
   49ecc:	da802315 	stw	r10,140(sp)
   49ed0:	90800007 	ldb	r2,0(r18)
   49ed4:	10044626 	beq	r2,zero,4aff0 <___vfiprintf_internal_r+0x1264>
   49ed8:	90c00047 	ldb	r3,1(r18)
   49edc:	94000044 	addi	r16,r18,1
   49ee0:	d8001d85 	stb	zero,118(sp)
   49ee4:	0009883a 	mov	r4,zero
   49ee8:	000f883a 	mov	r7,zero
   49eec:	027fffc4 	movi	r9,-1
   49ef0:	0023883a 	mov	r17,zero
   49ef4:	0029883a 	mov	r20,zero
   49ef8:	01401604 	movi	r5,88
   49efc:	01800244 	movi	r6,9
   49f00:	03400a84 	movi	r13,42
   49f04:	03001b04 	movi	r12,108
   49f08:	84000044 	addi	r16,r16,1
   49f0c:	18bff804 	addi	r2,r3,-32
   49f10:	28827336 	bltu	r5,r2,4a8e0 <___vfiprintf_internal_r+0xb54>
   49f14:	100490ba 	slli	r2,r2,2
   49f18:	02800174 	movhi	r10,5
   49f1c:	52a7cb04 	addi	r10,r10,-24788
   49f20:	1285883a 	add	r2,r2,r10
   49f24:	10800017 	ldw	r2,0(r2)
   49f28:	1000683a 	jmp	r2
   49f2c:	0004a614 	movui	zero,4760
   49f30:	0004a8e0 	cmpeqi	zero,zero,4771
   49f34:	0004a8e0 	cmpeqi	zero,zero,4771
   49f38:	0004a634 	movhi	zero,4760
   49f3c:	0004a8e0 	cmpeqi	zero,zero,4771
   49f40:	0004a8e0 	cmpeqi	zero,zero,4771
   49f44:	0004a8e0 	cmpeqi	zero,zero,4771
   49f48:	0004a8e0 	cmpeqi	zero,zero,4771
   49f4c:	0004a8e0 	cmpeqi	zero,zero,4771
   49f50:	0004a8e0 	cmpeqi	zero,zero,4771
   49f54:	0004a81c 	xori	zero,zero,4768
   49f58:	0004a838 	rdprs	zero,zero,4768
   49f5c:	0004a8e0 	cmpeqi	zero,zero,4771
   49f60:	0004a120 	cmpeqi	zero,zero,4740
   49f64:	0004a848 	cmpgei	zero,zero,4769
   49f68:	0004a8e0 	cmpeqi	zero,zero,4771
   49f6c:	0004a640 	call	4a64 <__alt_mem_onchip_memory2_0-0x3b59c>
   49f70:	0004a64c 	andi	zero,zero,4761
   49f74:	0004a64c 	andi	zero,zero,4761
   49f78:	0004a64c 	andi	zero,zero,4761
   49f7c:	0004a64c 	andi	zero,zero,4761
   49f80:	0004a64c 	andi	zero,zero,4761
   49f84:	0004a64c 	andi	zero,zero,4761
   49f88:	0004a64c 	andi	zero,zero,4761
   49f8c:	0004a64c 	andi	zero,zero,4761
   49f90:	0004a64c 	andi	zero,zero,4761
   49f94:	0004a8e0 	cmpeqi	zero,zero,4771
   49f98:	0004a8e0 	cmpeqi	zero,zero,4771
   49f9c:	0004a8e0 	cmpeqi	zero,zero,4771
   49fa0:	0004a8e0 	cmpeqi	zero,zero,4771
   49fa4:	0004a8e0 	cmpeqi	zero,zero,4771
   49fa8:	0004a8e0 	cmpeqi	zero,zero,4771
   49fac:	0004a8e0 	cmpeqi	zero,zero,4771
   49fb0:	0004a8e0 	cmpeqi	zero,zero,4771
   49fb4:	0004a8e0 	cmpeqi	zero,zero,4771
   49fb8:	0004a8e0 	cmpeqi	zero,zero,4771
   49fbc:	0004a678 	rdprs	zero,zero,4761
   49fc0:	0004a8e0 	cmpeqi	zero,zero,4771
   49fc4:	0004a8e0 	cmpeqi	zero,zero,4771
   49fc8:	0004a8e0 	cmpeqi	zero,zero,4771
   49fcc:	0004a8e0 	cmpeqi	zero,zero,4771
   49fd0:	0004a8e0 	cmpeqi	zero,zero,4771
   49fd4:	0004a8e0 	cmpeqi	zero,zero,4771
   49fd8:	0004a8e0 	cmpeqi	zero,zero,4771
   49fdc:	0004a8e0 	cmpeqi	zero,zero,4771
   49fe0:	0004a8e0 	cmpeqi	zero,zero,4771
   49fe4:	0004a8e0 	cmpeqi	zero,zero,4771
   49fe8:	0004a6b0 	cmpltui	zero,zero,4762
   49fec:	0004a8e0 	cmpeqi	zero,zero,4771
   49ff0:	0004a8e0 	cmpeqi	zero,zero,4771
   49ff4:	0004a8e0 	cmpeqi	zero,zero,4771
   49ff8:	0004a8e0 	cmpeqi	zero,zero,4771
   49ffc:	0004a8e0 	cmpeqi	zero,zero,4771
   4a000:	0004a708 	cmpgei	zero,zero,4764
   4a004:	0004a8e0 	cmpeqi	zero,zero,4771
   4a008:	0004a8e0 	cmpeqi	zero,zero,4771
   4a00c:	0004a778 	rdprs	zero,zero,4765
   4a010:	0004a8e0 	cmpeqi	zero,zero,4771
   4a014:	0004a8e0 	cmpeqi	zero,zero,4771
   4a018:	0004a8e0 	cmpeqi	zero,zero,4771
   4a01c:	0004a8e0 	cmpeqi	zero,zero,4771
   4a020:	0004a8e0 	cmpeqi	zero,zero,4771
   4a024:	0004a8e0 	cmpeqi	zero,zero,4771
   4a028:	0004a8e0 	cmpeqi	zero,zero,4771
   4a02c:	0004a8e0 	cmpeqi	zero,zero,4771
   4a030:	0004a8e0 	cmpeqi	zero,zero,4771
   4a034:	0004a8e0 	cmpeqi	zero,zero,4771
   4a038:	0004a524 	muli	zero,zero,4756
   4a03c:	0004a550 	cmplti	zero,zero,4757
   4a040:	0004a8e0 	cmpeqi	zero,zero,4771
   4a044:	0004a8e0 	cmpeqi	zero,zero,4771
   4a048:	0004a8e0 	cmpeqi	zero,zero,4771
   4a04c:	0004a888 	cmpgei	zero,zero,4770
   4a050:	0004a550 	cmplti	zero,zero,4757
   4a054:	0004a8e0 	cmpeqi	zero,zero,4771
   4a058:	0004a8e0 	cmpeqi	zero,zero,4771
   4a05c:	0004a3e4 	muli	zero,zero,4751
   4a060:	0004a8e0 	cmpeqi	zero,zero,4771
   4a064:	0004a3f4 	movhi	zero,4751
   4a068:	0004a430 	cmpltui	zero,zero,4752
   4a06c:	0004a12c 	andhi	zero,zero,4740
   4a070:	0004a3d8 	cmpnei	zero,zero,4751
   4a074:	0004a8e0 	cmpeqi	zero,zero,4771
   4a078:	0004a7b4 	movhi	zero,4766
   4a07c:	0004a8e0 	cmpeqi	zero,zero,4771
   4a080:	0004a80c 	andi	zero,zero,4768
   4a084:	0004a8e0 	cmpeqi	zero,zero,4771
   4a088:	0004a8e0 	cmpeqi	zero,zero,4771
   4a08c:	0004a4d0 	cmplti	zero,zero,4755
   4a090:	42000204 	addi	r8,r8,8
   4a094:	da802317 	ldw	r10,140(sp)
   4a098:	5455883a 	add	r10,r10,r17
   4a09c:	da802315 	stw	r10,140(sp)
   4a0a0:	003f8b06 	br	49ed0 <__alt_data_end+0xfffc9ed0>
   4a0a4:	d9002017 	ldw	r4,128(sp)
   4a0a8:	a00b883a 	mov	r5,r20
   4a0ac:	00454740 	call	45474 <__swsetup_r>
   4a0b0:	1003b11e 	bne	r2,zero,4af78 <___vfiprintf_internal_r+0x11ec>
   4a0b4:	a080030b 	ldhu	r2,12(r20)
   4a0b8:	00c00284 	movi	r3,10
   4a0bc:	1080068c 	andi	r2,r2,26
   4a0c0:	10ff541e 	bne	r2,r3,49e14 <__alt_data_end+0xfffc9e14>
   4a0c4:	a080038f 	ldh	r2,14(r20)
   4a0c8:	103f5216 	blt	r2,zero,49e14 <__alt_data_end+0xfffc9e14>
   4a0cc:	d9c02217 	ldw	r7,136(sp)
   4a0d0:	d9002017 	ldw	r4,128(sp)
   4a0d4:	e00d883a 	mov	r6,fp
   4a0d8:	a00b883a 	mov	r5,r20
   4a0dc:	004b2040 	call	4b204 <__sbprintf>
   4a0e0:	dfc03617 	ldw	ra,216(sp)
   4a0e4:	df003517 	ldw	fp,212(sp)
   4a0e8:	ddc03417 	ldw	r23,208(sp)
   4a0ec:	dd803317 	ldw	r22,204(sp)
   4a0f0:	dd403217 	ldw	r21,200(sp)
   4a0f4:	dd003117 	ldw	r20,196(sp)
   4a0f8:	dcc03017 	ldw	r19,192(sp)
   4a0fc:	dc802f17 	ldw	r18,188(sp)
   4a100:	dc402e17 	ldw	r17,184(sp)
   4a104:	dc002d17 	ldw	r16,180(sp)
   4a108:	dec03704 	addi	sp,sp,220
   4a10c:	f800283a 	ret
   4a110:	00476e00 	call	476e0 <__sinit>
   4a114:	003f2f06 	br	49dd4 <__alt_data_end+0xfffc9dd4>
   4a118:	0463c83a 	sub	r17,zero,r17
   4a11c:	d8802215 	stw	r2,136(sp)
   4a120:	a5000114 	ori	r20,r20,4
   4a124:	80c00007 	ldb	r3,0(r16)
   4a128:	003f7706 	br	49f08 <__alt_data_end+0xfffc9f08>
   4a12c:	00800c04 	movi	r2,48
   4a130:	da802217 	ldw	r10,136(sp)
   4a134:	d8801d05 	stb	r2,116(sp)
   4a138:	00801e04 	movi	r2,120
   4a13c:	d8801d45 	stb	r2,117(sp)
   4a140:	d8001d85 	stb	zero,118(sp)
   4a144:	50c00104 	addi	r3,r10,4
   4a148:	54800017 	ldw	r18,0(r10)
   4a14c:	0027883a 	mov	r19,zero
   4a150:	a0800094 	ori	r2,r20,2
   4a154:	48030b16 	blt	r9,zero,4ad84 <___vfiprintf_internal_r+0xff8>
   4a158:	00bfdfc4 	movi	r2,-129
   4a15c:	a096703a 	and	r11,r20,r2
   4a160:	d8c02215 	stw	r3,136(sp)
   4a164:	5d000094 	ori	r20,r11,2
   4a168:	90032b1e 	bne	r18,zero,4ae18 <___vfiprintf_internal_r+0x108c>
   4a16c:	00800174 	movhi	r2,5
   4a170:	1080cb04 	addi	r2,r2,812
   4a174:	d8802615 	stw	r2,152(sp)
   4a178:	0039883a 	mov	fp,zero
   4a17c:	48017b1e 	bne	r9,zero,4a76c <___vfiprintf_internal_r+0x9e0>
   4a180:	0013883a 	mov	r9,zero
   4a184:	0027883a 	mov	r19,zero
   4a188:	dd401a04 	addi	r21,sp,104
   4a18c:	4825883a 	mov	r18,r9
   4a190:	4cc0010e 	bge	r9,r19,4a198 <___vfiprintf_internal_r+0x40c>
   4a194:	9825883a 	mov	r18,r19
   4a198:	e7003fcc 	andi	fp,fp,255
   4a19c:	e700201c 	xori	fp,fp,128
   4a1a0:	e73fe004 	addi	fp,fp,-128
   4a1a4:	e0000126 	beq	fp,zero,4a1ac <___vfiprintf_internal_r+0x420>
   4a1a8:	94800044 	addi	r18,r18,1
   4a1ac:	a380008c 	andi	r14,r20,2
   4a1b0:	70000126 	beq	r14,zero,4a1b8 <___vfiprintf_internal_r+0x42c>
   4a1b4:	94800084 	addi	r18,r18,2
   4a1b8:	a700210c 	andi	fp,r20,132
   4a1bc:	e001df1e 	bne	fp,zero,4a93c <___vfiprintf_internal_r+0xbb0>
   4a1c0:	8c87c83a 	sub	r3,r17,r18
   4a1c4:	00c1dd0e 	bge	zero,r3,4a93c <___vfiprintf_internal_r+0xbb0>
   4a1c8:	01c00404 	movi	r7,16
   4a1cc:	d8801c17 	ldw	r2,112(sp)
   4a1d0:	38c3ad0e 	bge	r7,r3,4b088 <___vfiprintf_internal_r+0x12fc>
   4a1d4:	02800174 	movhi	r10,5
   4a1d8:	52812f04 	addi	r10,r10,1212
   4a1dc:	dc002915 	stw	r16,164(sp)
   4a1e0:	d9801b17 	ldw	r6,108(sp)
   4a1e4:	da802415 	stw	r10,144(sp)
   4a1e8:	03c001c4 	movi	r15,7
   4a1ec:	da402515 	stw	r9,148(sp)
   4a1f0:	db802815 	stw	r14,160(sp)
   4a1f4:	1821883a 	mov	r16,r3
   4a1f8:	00000506 	br	4a210 <___vfiprintf_internal_r+0x484>
   4a1fc:	31400084 	addi	r5,r6,2
   4a200:	42000204 	addi	r8,r8,8
   4a204:	200d883a 	mov	r6,r4
   4a208:	843ffc04 	addi	r16,r16,-16
   4a20c:	3c000d0e 	bge	r7,r16,4a244 <___vfiprintf_internal_r+0x4b8>
   4a210:	10800404 	addi	r2,r2,16
   4a214:	31000044 	addi	r4,r6,1
   4a218:	45800015 	stw	r22,0(r8)
   4a21c:	41c00115 	stw	r7,4(r8)
   4a220:	d8801c15 	stw	r2,112(sp)
   4a224:	d9001b15 	stw	r4,108(sp)
   4a228:	793ff40e 	bge	r15,r4,4a1fc <__alt_data_end+0xfffca1fc>
   4a22c:	1001b51e 	bne	r2,zero,4a904 <___vfiprintf_internal_r+0xb78>
   4a230:	843ffc04 	addi	r16,r16,-16
   4a234:	000d883a 	mov	r6,zero
   4a238:	01400044 	movi	r5,1
   4a23c:	d811883a 	mov	r8,sp
   4a240:	3c3ff316 	blt	r7,r16,4a210 <__alt_data_end+0xfffca210>
   4a244:	8007883a 	mov	r3,r16
   4a248:	da402517 	ldw	r9,148(sp)
   4a24c:	db802817 	ldw	r14,160(sp)
   4a250:	dc002917 	ldw	r16,164(sp)
   4a254:	da802417 	ldw	r10,144(sp)
   4a258:	1885883a 	add	r2,r3,r2
   4a25c:	40c00115 	stw	r3,4(r8)
   4a260:	42800015 	stw	r10,0(r8)
   4a264:	d8801c15 	stw	r2,112(sp)
   4a268:	d9401b15 	stw	r5,108(sp)
   4a26c:	00c001c4 	movi	r3,7
   4a270:	19426016 	blt	r3,r5,4abf4 <___vfiprintf_internal_r+0xe68>
   4a274:	d8c01d87 	ldb	r3,118(sp)
   4a278:	42000204 	addi	r8,r8,8
   4a27c:	29000044 	addi	r4,r5,1
   4a280:	1801b31e 	bne	r3,zero,4a950 <___vfiprintf_internal_r+0xbc4>
   4a284:	7001c026 	beq	r14,zero,4a988 <___vfiprintf_internal_r+0xbfc>
   4a288:	d8c01d04 	addi	r3,sp,116
   4a28c:	10800084 	addi	r2,r2,2
   4a290:	40c00015 	stw	r3,0(r8)
   4a294:	00c00084 	movi	r3,2
   4a298:	40c00115 	stw	r3,4(r8)
   4a29c:	d8801c15 	stw	r2,112(sp)
   4a2a0:	d9001b15 	stw	r4,108(sp)
   4a2a4:	00c001c4 	movi	r3,7
   4a2a8:	1902650e 	bge	r3,r4,4ac40 <___vfiprintf_internal_r+0xeb4>
   4a2ac:	10029a1e 	bne	r2,zero,4ad18 <___vfiprintf_internal_r+0xf8c>
   4a2b0:	00c02004 	movi	r3,128
   4a2b4:	01000044 	movi	r4,1
   4a2b8:	000b883a 	mov	r5,zero
   4a2bc:	d811883a 	mov	r8,sp
   4a2c0:	e0c1b31e 	bne	fp,r3,4a990 <___vfiprintf_internal_r+0xc04>
   4a2c4:	8cb9c83a 	sub	fp,r17,r18
   4a2c8:	0701b10e 	bge	zero,fp,4a990 <___vfiprintf_internal_r+0xc04>
   4a2cc:	01c00404 	movi	r7,16
   4a2d0:	3f03890e 	bge	r7,fp,4b0f8 <___vfiprintf_internal_r+0x136c>
   4a2d4:	00c00174 	movhi	r3,5
   4a2d8:	18c12b04 	addi	r3,r3,1196
   4a2dc:	d8c02415 	stw	r3,144(sp)
   4a2e0:	8007883a 	mov	r3,r16
   4a2e4:	034001c4 	movi	r13,7
   4a2e8:	e021883a 	mov	r16,fp
   4a2ec:	da402515 	stw	r9,148(sp)
   4a2f0:	1839883a 	mov	fp,r3
   4a2f4:	00000506 	br	4a30c <___vfiprintf_internal_r+0x580>
   4a2f8:	29800084 	addi	r6,r5,2
   4a2fc:	42000204 	addi	r8,r8,8
   4a300:	180b883a 	mov	r5,r3
   4a304:	843ffc04 	addi	r16,r16,-16
   4a308:	3c000d0e 	bge	r7,r16,4a340 <___vfiprintf_internal_r+0x5b4>
   4a30c:	10800404 	addi	r2,r2,16
   4a310:	28c00044 	addi	r3,r5,1
   4a314:	45c00015 	stw	r23,0(r8)
   4a318:	41c00115 	stw	r7,4(r8)
   4a31c:	d8801c15 	stw	r2,112(sp)
   4a320:	d8c01b15 	stw	r3,108(sp)
   4a324:	68fff40e 	bge	r13,r3,4a2f8 <__alt_data_end+0xfffca2f8>
   4a328:	1002241e 	bne	r2,zero,4abbc <___vfiprintf_internal_r+0xe30>
   4a32c:	843ffc04 	addi	r16,r16,-16
   4a330:	01800044 	movi	r6,1
   4a334:	000b883a 	mov	r5,zero
   4a338:	d811883a 	mov	r8,sp
   4a33c:	3c3ff316 	blt	r7,r16,4a30c <__alt_data_end+0xfffca30c>
   4a340:	da402517 	ldw	r9,148(sp)
   4a344:	e007883a 	mov	r3,fp
   4a348:	8039883a 	mov	fp,r16
   4a34c:	1821883a 	mov	r16,r3
   4a350:	d8c02417 	ldw	r3,144(sp)
   4a354:	1705883a 	add	r2,r2,fp
   4a358:	47000115 	stw	fp,4(r8)
   4a35c:	40c00015 	stw	r3,0(r8)
   4a360:	d8801c15 	stw	r2,112(sp)
   4a364:	d9801b15 	stw	r6,108(sp)
   4a368:	00c001c4 	movi	r3,7
   4a36c:	19827616 	blt	r3,r6,4ad48 <___vfiprintf_internal_r+0xfbc>
   4a370:	4cf9c83a 	sub	fp,r9,r19
   4a374:	42000204 	addi	r8,r8,8
   4a378:	31000044 	addi	r4,r6,1
   4a37c:	300b883a 	mov	r5,r6
   4a380:	07018516 	blt	zero,fp,4a998 <___vfiprintf_internal_r+0xc0c>
   4a384:	9885883a 	add	r2,r19,r2
   4a388:	45400015 	stw	r21,0(r8)
   4a38c:	44c00115 	stw	r19,4(r8)
   4a390:	d8801c15 	stw	r2,112(sp)
   4a394:	d9001b15 	stw	r4,108(sp)
   4a398:	00c001c4 	movi	r3,7
   4a39c:	1901dd0e 	bge	r3,r4,4ab14 <___vfiprintf_internal_r+0xd88>
   4a3a0:	1002401e 	bne	r2,zero,4aca4 <___vfiprintf_internal_r+0xf18>
   4a3a4:	d8001b15 	stw	zero,108(sp)
   4a3a8:	a2c0010c 	andi	r11,r20,4
   4a3ac:	58000226 	beq	r11,zero,4a3b8 <___vfiprintf_internal_r+0x62c>
   4a3b0:	8ca7c83a 	sub	r19,r17,r18
   4a3b4:	04c2f216 	blt	zero,r19,4af80 <___vfiprintf_internal_r+0x11f4>
   4a3b8:	8c80010e 	bge	r17,r18,4a3c0 <___vfiprintf_internal_r+0x634>
   4a3bc:	9023883a 	mov	r17,r18
   4a3c0:	da802317 	ldw	r10,140(sp)
   4a3c4:	5455883a 	add	r10,r10,r17
   4a3c8:	da802315 	stw	r10,140(sp)
   4a3cc:	d8001b15 	stw	zero,108(sp)
   4a3d0:	d811883a 	mov	r8,sp
   4a3d4:	003ea206 	br	49e60 <__alt_data_end+0xfffc9e60>
   4a3d8:	a5000814 	ori	r20,r20,32
   4a3dc:	80c00007 	ldb	r3,0(r16)
   4a3e0:	003ec906 	br	49f08 <__alt_data_end+0xfffc9f08>
   4a3e4:	80c00007 	ldb	r3,0(r16)
   4a3e8:	1b030926 	beq	r3,r12,4b010 <___vfiprintf_internal_r+0x1284>
   4a3ec:	a5000414 	ori	r20,r20,16
   4a3f0:	003ec506 	br	49f08 <__alt_data_end+0xfffc9f08>
   4a3f4:	21003fcc 	andi	r4,r4,255
   4a3f8:	20035e1e 	bne	r4,zero,4b174 <___vfiprintf_internal_r+0x13e8>
   4a3fc:	a080080c 	andi	r2,r20,32
   4a400:	1002a526 	beq	r2,zero,4ae98 <___vfiprintf_internal_r+0x110c>
   4a404:	da802217 	ldw	r10,136(sp)
   4a408:	50800017 	ldw	r2,0(r10)
   4a40c:	da802317 	ldw	r10,140(sp)
   4a410:	5007d7fa 	srai	r3,r10,31
   4a414:	da802217 	ldw	r10,136(sp)
   4a418:	10c00115 	stw	r3,4(r2)
   4a41c:	52800104 	addi	r10,r10,4
   4a420:	da802215 	stw	r10,136(sp)
   4a424:	da802317 	ldw	r10,140(sp)
   4a428:	12800015 	stw	r10,0(r2)
   4a42c:	003e8c06 	br	49e60 <__alt_data_end+0xfffc9e60>
   4a430:	21003fcc 	andi	r4,r4,255
   4a434:	2003511e 	bne	r4,zero,4b17c <___vfiprintf_internal_r+0x13f0>
   4a438:	a080080c 	andi	r2,r20,32
   4a43c:	1000a126 	beq	r2,zero,4a6c4 <___vfiprintf_internal_r+0x938>
   4a440:	da802217 	ldw	r10,136(sp)
   4a444:	d8001d85 	stb	zero,118(sp)
   4a448:	50800204 	addi	r2,r10,8
   4a44c:	54800017 	ldw	r18,0(r10)
   4a450:	54c00117 	ldw	r19,4(r10)
   4a454:	4802b416 	blt	r9,zero,4af28 <___vfiprintf_internal_r+0x119c>
   4a458:	013fdfc4 	movi	r4,-129
   4a45c:	94c6b03a 	or	r3,r18,r19
   4a460:	d8802215 	stw	r2,136(sp)
   4a464:	a128703a 	and	r20,r20,r4
   4a468:	1800a226 	beq	r3,zero,4a6f4 <___vfiprintf_internal_r+0x968>
   4a46c:	0039883a 	mov	fp,zero
   4a470:	dd401a04 	addi	r21,sp,104
   4a474:	9006d0fa 	srli	r3,r18,3
   4a478:	9808977a 	slli	r4,r19,29
   4a47c:	9826d0fa 	srli	r19,r19,3
   4a480:	948001cc 	andi	r18,r18,7
   4a484:	90800c04 	addi	r2,r18,48
   4a488:	ad7fffc4 	addi	r21,r21,-1
   4a48c:	20e4b03a 	or	r18,r4,r3
   4a490:	a8800005 	stb	r2,0(r21)
   4a494:	94c6b03a 	or	r3,r18,r19
   4a498:	183ff61e 	bne	r3,zero,4a474 <__alt_data_end+0xfffca474>
   4a49c:	a0c0004c 	andi	r3,r20,1
   4a4a0:	18005926 	beq	r3,zero,4a608 <___vfiprintf_internal_r+0x87c>
   4a4a4:	10803fcc 	andi	r2,r2,255
   4a4a8:	1080201c 	xori	r2,r2,128
   4a4ac:	10bfe004 	addi	r2,r2,-128
   4a4b0:	00c00c04 	movi	r3,48
   4a4b4:	10c05426 	beq	r2,r3,4a608 <___vfiprintf_internal_r+0x87c>
   4a4b8:	da801e17 	ldw	r10,120(sp)
   4a4bc:	a8bfffc4 	addi	r2,r21,-1
   4a4c0:	a8ffffc5 	stb	r3,-1(r21)
   4a4c4:	50a7c83a 	sub	r19,r10,r2
   4a4c8:	102b883a 	mov	r21,r2
   4a4cc:	003f2f06 	br	4a18c <__alt_data_end+0xfffca18c>
   4a4d0:	21003fcc 	andi	r4,r4,255
   4a4d4:	2003421e 	bne	r4,zero,4b1e0 <___vfiprintf_internal_r+0x1454>
   4a4d8:	00800174 	movhi	r2,5
   4a4dc:	1080cb04 	addi	r2,r2,812
   4a4e0:	d8802615 	stw	r2,152(sp)
   4a4e4:	a080080c 	andi	r2,r20,32
   4a4e8:	1000aa26 	beq	r2,zero,4a794 <___vfiprintf_internal_r+0xa08>
   4a4ec:	da802217 	ldw	r10,136(sp)
   4a4f0:	54800017 	ldw	r18,0(r10)
   4a4f4:	54c00117 	ldw	r19,4(r10)
   4a4f8:	52800204 	addi	r10,r10,8
   4a4fc:	da802215 	stw	r10,136(sp)
   4a500:	a080004c 	andi	r2,r20,1
   4a504:	1001d226 	beq	r2,zero,4ac50 <___vfiprintf_internal_r+0xec4>
   4a508:	94c4b03a 	or	r2,r18,r19
   4a50c:	1002351e 	bne	r2,zero,4ade4 <___vfiprintf_internal_r+0x1058>
   4a510:	d8001d85 	stb	zero,118(sp)
   4a514:	48022216 	blt	r9,zero,4ada0 <___vfiprintf_internal_r+0x1014>
   4a518:	00bfdfc4 	movi	r2,-129
   4a51c:	a0a8703a 	and	r20,r20,r2
   4a520:	003f1506 	br	4a178 <__alt_data_end+0xfffca178>
   4a524:	da802217 	ldw	r10,136(sp)
   4a528:	04800044 	movi	r18,1
   4a52c:	d8001d85 	stb	zero,118(sp)
   4a530:	50800017 	ldw	r2,0(r10)
   4a534:	52800104 	addi	r10,r10,4
   4a538:	da802215 	stw	r10,136(sp)
   4a53c:	d8801005 	stb	r2,64(sp)
   4a540:	9027883a 	mov	r19,r18
   4a544:	dd401004 	addi	r21,sp,64
   4a548:	0013883a 	mov	r9,zero
   4a54c:	003f1706 	br	4a1ac <__alt_data_end+0xfffca1ac>
   4a550:	21003fcc 	andi	r4,r4,255
   4a554:	2003201e 	bne	r4,zero,4b1d8 <___vfiprintf_internal_r+0x144c>
   4a558:	a080080c 	andi	r2,r20,32
   4a55c:	10004b26 	beq	r2,zero,4a68c <___vfiprintf_internal_r+0x900>
   4a560:	da802217 	ldw	r10,136(sp)
   4a564:	50800117 	ldw	r2,4(r10)
   4a568:	54800017 	ldw	r18,0(r10)
   4a56c:	52800204 	addi	r10,r10,8
   4a570:	da802215 	stw	r10,136(sp)
   4a574:	1027883a 	mov	r19,r2
   4a578:	10022c16 	blt	r2,zero,4ae2c <___vfiprintf_internal_r+0x10a0>
   4a57c:	df001d83 	ldbu	fp,118(sp)
   4a580:	48007216 	blt	r9,zero,4a74c <___vfiprintf_internal_r+0x9c0>
   4a584:	00ffdfc4 	movi	r3,-129
   4a588:	94c4b03a 	or	r2,r18,r19
   4a58c:	a0e8703a 	and	r20,r20,r3
   4a590:	1000cc26 	beq	r2,zero,4a8c4 <___vfiprintf_internal_r+0xb38>
   4a594:	98021026 	beq	r19,zero,4add8 <___vfiprintf_internal_r+0x104c>
   4a598:	dc402415 	stw	r17,144(sp)
   4a59c:	dc002515 	stw	r16,148(sp)
   4a5a0:	9823883a 	mov	r17,r19
   4a5a4:	9021883a 	mov	r16,r18
   4a5a8:	dd401a04 	addi	r21,sp,104
   4a5ac:	4825883a 	mov	r18,r9
   4a5b0:	4027883a 	mov	r19,r8
   4a5b4:	8009883a 	mov	r4,r16
   4a5b8:	880b883a 	mov	r5,r17
   4a5bc:	01800284 	movi	r6,10
   4a5c0:	000f883a 	mov	r7,zero
   4a5c4:	004cc000 	call	4cc00 <__umoddi3>
   4a5c8:	10800c04 	addi	r2,r2,48
   4a5cc:	ad7fffc4 	addi	r21,r21,-1
   4a5d0:	8009883a 	mov	r4,r16
   4a5d4:	880b883a 	mov	r5,r17
   4a5d8:	a8800005 	stb	r2,0(r21)
   4a5dc:	01800284 	movi	r6,10
   4a5e0:	000f883a 	mov	r7,zero
   4a5e4:	004c6880 	call	4c688 <__udivdi3>
   4a5e8:	1021883a 	mov	r16,r2
   4a5ec:	10c4b03a 	or	r2,r2,r3
   4a5f0:	1823883a 	mov	r17,r3
   4a5f4:	103fef1e 	bne	r2,zero,4a5b4 <__alt_data_end+0xfffca5b4>
   4a5f8:	dc402417 	ldw	r17,144(sp)
   4a5fc:	dc002517 	ldw	r16,148(sp)
   4a600:	9013883a 	mov	r9,r18
   4a604:	9811883a 	mov	r8,r19
   4a608:	da801e17 	ldw	r10,120(sp)
   4a60c:	5567c83a 	sub	r19,r10,r21
   4a610:	003ede06 	br	4a18c <__alt_data_end+0xfffca18c>
   4a614:	38803fcc 	andi	r2,r7,255
   4a618:	1080201c 	xori	r2,r2,128
   4a61c:	10bfe004 	addi	r2,r2,-128
   4a620:	1002371e 	bne	r2,zero,4af00 <___vfiprintf_internal_r+0x1174>
   4a624:	01000044 	movi	r4,1
   4a628:	01c00804 	movi	r7,32
   4a62c:	80c00007 	ldb	r3,0(r16)
   4a630:	003e3506 	br	49f08 <__alt_data_end+0xfffc9f08>
   4a634:	a5000054 	ori	r20,r20,1
   4a638:	80c00007 	ldb	r3,0(r16)
   4a63c:	003e3206 	br	49f08 <__alt_data_end+0xfffc9f08>
   4a640:	a5002014 	ori	r20,r20,128
   4a644:	80c00007 	ldb	r3,0(r16)
   4a648:	003e2f06 	br	49f08 <__alt_data_end+0xfffc9f08>
   4a64c:	8015883a 	mov	r10,r16
   4a650:	0023883a 	mov	r17,zero
   4a654:	18bff404 	addi	r2,r3,-48
   4a658:	50c00007 	ldb	r3,0(r10)
   4a65c:	8c4002a4 	muli	r17,r17,10
   4a660:	84000044 	addi	r16,r16,1
   4a664:	8015883a 	mov	r10,r16
   4a668:	1463883a 	add	r17,r2,r17
   4a66c:	18bff404 	addi	r2,r3,-48
   4a670:	30bff92e 	bgeu	r6,r2,4a658 <__alt_data_end+0xfffca658>
   4a674:	003e2506 	br	49f0c <__alt_data_end+0xfffc9f0c>
   4a678:	21003fcc 	andi	r4,r4,255
   4a67c:	2002d41e 	bne	r4,zero,4b1d0 <___vfiprintf_internal_r+0x1444>
   4a680:	a5000414 	ori	r20,r20,16
   4a684:	a080080c 	andi	r2,r20,32
   4a688:	103fb51e 	bne	r2,zero,4a560 <__alt_data_end+0xfffca560>
   4a68c:	a080040c 	andi	r2,r20,16
   4a690:	1001f826 	beq	r2,zero,4ae74 <___vfiprintf_internal_r+0x10e8>
   4a694:	da802217 	ldw	r10,136(sp)
   4a698:	54800017 	ldw	r18,0(r10)
   4a69c:	52800104 	addi	r10,r10,4
   4a6a0:	da802215 	stw	r10,136(sp)
   4a6a4:	9027d7fa 	srai	r19,r18,31
   4a6a8:	9805883a 	mov	r2,r19
   4a6ac:	003fb206 	br	4a578 <__alt_data_end+0xfffca578>
   4a6b0:	21003fcc 	andi	r4,r4,255
   4a6b4:	2002c41e 	bne	r4,zero,4b1c8 <___vfiprintf_internal_r+0x143c>
   4a6b8:	a5000414 	ori	r20,r20,16
   4a6bc:	a080080c 	andi	r2,r20,32
   4a6c0:	103f5f1e 	bne	r2,zero,4a440 <__alt_data_end+0xfffca440>
   4a6c4:	a080040c 	andi	r2,r20,16
   4a6c8:	10020f26 	beq	r2,zero,4af08 <___vfiprintf_internal_r+0x117c>
   4a6cc:	da802217 	ldw	r10,136(sp)
   4a6d0:	d8001d85 	stb	zero,118(sp)
   4a6d4:	0027883a 	mov	r19,zero
   4a6d8:	50800104 	addi	r2,r10,4
   4a6dc:	54800017 	ldw	r18,0(r10)
   4a6e0:	48021116 	blt	r9,zero,4af28 <___vfiprintf_internal_r+0x119c>
   4a6e4:	00ffdfc4 	movi	r3,-129
   4a6e8:	d8802215 	stw	r2,136(sp)
   4a6ec:	a0e8703a 	and	r20,r20,r3
   4a6f0:	903f5e1e 	bne	r18,zero,4a46c <__alt_data_end+0xfffca46c>
   4a6f4:	0039883a 	mov	fp,zero
   4a6f8:	4802a626 	beq	r9,zero,4b194 <___vfiprintf_internal_r+0x1408>
   4a6fc:	0025883a 	mov	r18,zero
   4a700:	0027883a 	mov	r19,zero
   4a704:	003f5a06 	br	4a470 <__alt_data_end+0xfffca470>
   4a708:	21003fcc 	andi	r4,r4,255
   4a70c:	20029f1e 	bne	r4,zero,4b18c <___vfiprintf_internal_r+0x1400>
   4a710:	a5000414 	ori	r20,r20,16
   4a714:	a080080c 	andi	r2,r20,32
   4a718:	10005e1e 	bne	r2,zero,4a894 <___vfiprintf_internal_r+0xb08>
   4a71c:	a080040c 	andi	r2,r20,16
   4a720:	1001a21e 	bne	r2,zero,4adac <___vfiprintf_internal_r+0x1020>
   4a724:	a080100c 	andi	r2,r20,64
   4a728:	d8001d85 	stb	zero,118(sp)
   4a72c:	da802217 	ldw	r10,136(sp)
   4a730:	1002231e 	bne	r2,zero,4afc0 <___vfiprintf_internal_r+0x1234>
   4a734:	50800104 	addi	r2,r10,4
   4a738:	54800017 	ldw	r18,0(r10)
   4a73c:	0027883a 	mov	r19,zero
   4a740:	4801a00e 	bge	r9,zero,4adc4 <___vfiprintf_internal_r+0x1038>
   4a744:	d8802215 	stw	r2,136(sp)
   4a748:	0039883a 	mov	fp,zero
   4a74c:	94c4b03a 	or	r2,r18,r19
   4a750:	103f901e 	bne	r2,zero,4a594 <__alt_data_end+0xfffca594>
   4a754:	00800044 	movi	r2,1
   4a758:	10803fcc 	andi	r2,r2,255
   4a75c:	00c00044 	movi	r3,1
   4a760:	10c05926 	beq	r2,r3,4a8c8 <___vfiprintf_internal_r+0xb3c>
   4a764:	00c00084 	movi	r3,2
   4a768:	10ffe41e 	bne	r2,r3,4a6fc <__alt_data_end+0xfffca6fc>
   4a76c:	0025883a 	mov	r18,zero
   4a770:	0027883a 	mov	r19,zero
   4a774:	00013d06 	br	4ac6c <___vfiprintf_internal_r+0xee0>
   4a778:	21003fcc 	andi	r4,r4,255
   4a77c:	2002811e 	bne	r4,zero,4b184 <___vfiprintf_internal_r+0x13f8>
   4a780:	00800174 	movhi	r2,5
   4a784:	1080c604 	addi	r2,r2,792
   4a788:	d8802615 	stw	r2,152(sp)
   4a78c:	a080080c 	andi	r2,r20,32
   4a790:	103f561e 	bne	r2,zero,4a4ec <__alt_data_end+0xfffca4ec>
   4a794:	a080040c 	andi	r2,r20,16
   4a798:	1001d126 	beq	r2,zero,4aee0 <___vfiprintf_internal_r+0x1154>
   4a79c:	da802217 	ldw	r10,136(sp)
   4a7a0:	0027883a 	mov	r19,zero
   4a7a4:	54800017 	ldw	r18,0(r10)
   4a7a8:	52800104 	addi	r10,r10,4
   4a7ac:	da802215 	stw	r10,136(sp)
   4a7b0:	003f5306 	br	4a500 <__alt_data_end+0xfffca500>
   4a7b4:	da802217 	ldw	r10,136(sp)
   4a7b8:	d8001d85 	stb	zero,118(sp)
   4a7bc:	55400017 	ldw	r21,0(r10)
   4a7c0:	50c00104 	addi	r3,r10,4
   4a7c4:	a8024226 	beq	r21,zero,4b0d0 <___vfiprintf_internal_r+0x1344>
   4a7c8:	48021816 	blt	r9,zero,4b02c <___vfiprintf_internal_r+0x12a0>
   4a7cc:	480d883a 	mov	r6,r9
   4a7d0:	000b883a 	mov	r5,zero
   4a7d4:	a809883a 	mov	r4,r21
   4a7d8:	d8c02a15 	stw	r3,168(sp)
   4a7dc:	da002b15 	stw	r8,172(sp)
   4a7e0:	da402c15 	stw	r9,176(sp)
   4a7e4:	00487900 	call	48790 <memchr>
   4a7e8:	d8c02a17 	ldw	r3,168(sp)
   4a7ec:	da002b17 	ldw	r8,172(sp)
   4a7f0:	da402c17 	ldw	r9,176(sp)
   4a7f4:	10024826 	beq	r2,zero,4b118 <___vfiprintf_internal_r+0x138c>
   4a7f8:	1567c83a 	sub	r19,r2,r21
   4a7fc:	df001d83 	ldbu	fp,118(sp)
   4a800:	d8c02215 	stw	r3,136(sp)
   4a804:	0013883a 	mov	r9,zero
   4a808:	003e6006 	br	4a18c <__alt_data_end+0xfffca18c>
   4a80c:	21003fcc 	andi	r4,r4,255
   4a810:	203fc026 	beq	r4,zero,4a714 <__alt_data_end+0xfffca714>
   4a814:	d9c01d85 	stb	r7,118(sp)
   4a818:	003fbe06 	br	4a714 <__alt_data_end+0xfffca714>
   4a81c:	da802217 	ldw	r10,136(sp)
   4a820:	54400017 	ldw	r17,0(r10)
   4a824:	50800104 	addi	r2,r10,4
   4a828:	883e3b16 	blt	r17,zero,4a118 <__alt_data_end+0xfffca118>
   4a82c:	d8802215 	stw	r2,136(sp)
   4a830:	80c00007 	ldb	r3,0(r16)
   4a834:	003db406 	br	49f08 <__alt_data_end+0xfffc9f08>
   4a838:	01000044 	movi	r4,1
   4a83c:	01c00ac4 	movi	r7,43
   4a840:	80c00007 	ldb	r3,0(r16)
   4a844:	003db006 	br	49f08 <__alt_data_end+0xfffc9f08>
   4a848:	80c00007 	ldb	r3,0(r16)
   4a84c:	82800044 	addi	r10,r16,1
   4a850:	1b423c26 	beq	r3,r13,4b144 <___vfiprintf_internal_r+0x13b8>
   4a854:	18bff404 	addi	r2,r3,-48
   4a858:	0013883a 	mov	r9,zero
   4a85c:	30822b36 	bltu	r6,r2,4b10c <___vfiprintf_internal_r+0x1380>
   4a860:	50c00007 	ldb	r3,0(r10)
   4a864:	4a4002a4 	muli	r9,r9,10
   4a868:	54000044 	addi	r16,r10,1
   4a86c:	8015883a 	mov	r10,r16
   4a870:	4893883a 	add	r9,r9,r2
   4a874:	18bff404 	addi	r2,r3,-48
   4a878:	30bff92e 	bgeu	r6,r2,4a860 <__alt_data_end+0xfffca860>
   4a87c:	483da30e 	bge	r9,zero,49f0c <__alt_data_end+0xfffc9f0c>
   4a880:	027fffc4 	movi	r9,-1
   4a884:	003da106 	br	49f0c <__alt_data_end+0xfffc9f0c>
   4a888:	a5001014 	ori	r20,r20,64
   4a88c:	80c00007 	ldb	r3,0(r16)
   4a890:	003d9d06 	br	49f08 <__alt_data_end+0xfffc9f08>
   4a894:	da802217 	ldw	r10,136(sp)
   4a898:	d8001d85 	stb	zero,118(sp)
   4a89c:	50c00204 	addi	r3,r10,8
   4a8a0:	54800017 	ldw	r18,0(r10)
   4a8a4:	54c00117 	ldw	r19,4(r10)
   4a8a8:	4801ca16 	blt	r9,zero,4afd4 <___vfiprintf_internal_r+0x1248>
   4a8ac:	013fdfc4 	movi	r4,-129
   4a8b0:	94c4b03a 	or	r2,r18,r19
   4a8b4:	d8c02215 	stw	r3,136(sp)
   4a8b8:	a128703a 	and	r20,r20,r4
   4a8bc:	0039883a 	mov	fp,zero
   4a8c0:	103f341e 	bne	r2,zero,4a594 <__alt_data_end+0xfffca594>
   4a8c4:	483e2e26 	beq	r9,zero,4a180 <__alt_data_end+0xfffca180>
   4a8c8:	0025883a 	mov	r18,zero
   4a8cc:	94800c04 	addi	r18,r18,48
   4a8d0:	dc8019c5 	stb	r18,103(sp)
   4a8d4:	dcc02717 	ldw	r19,156(sp)
   4a8d8:	dd4019c4 	addi	r21,sp,103
   4a8dc:	003e2b06 	br	4a18c <__alt_data_end+0xfffca18c>
   4a8e0:	21003fcc 	andi	r4,r4,255
   4a8e4:	2002361e 	bne	r4,zero,4b1c0 <___vfiprintf_internal_r+0x1434>
   4a8e8:	1801c126 	beq	r3,zero,4aff0 <___vfiprintf_internal_r+0x1264>
   4a8ec:	04800044 	movi	r18,1
   4a8f0:	d8c01005 	stb	r3,64(sp)
   4a8f4:	d8001d85 	stb	zero,118(sp)
   4a8f8:	9027883a 	mov	r19,r18
   4a8fc:	dd401004 	addi	r21,sp,64
   4a900:	003f1106 	br	4a548 <__alt_data_end+0xfffca548>
   4a904:	d9402117 	ldw	r5,132(sp)
   4a908:	d9002017 	ldw	r4,128(sp)
   4a90c:	d9801a04 	addi	r6,sp,104
   4a910:	d9c02b15 	stw	r7,172(sp)
   4a914:	dbc02a15 	stw	r15,168(sp)
   4a918:	0049c780 	call	49c78 <__sprint_r.part.0>
   4a91c:	d9c02b17 	ldw	r7,172(sp)
   4a920:	dbc02a17 	ldw	r15,168(sp)
   4a924:	10006d1e 	bne	r2,zero,4aadc <___vfiprintf_internal_r+0xd50>
   4a928:	d9801b17 	ldw	r6,108(sp)
   4a92c:	d8801c17 	ldw	r2,112(sp)
   4a930:	d811883a 	mov	r8,sp
   4a934:	31400044 	addi	r5,r6,1
   4a938:	003e3306 	br	4a208 <__alt_data_end+0xfffca208>
   4a93c:	d9401b17 	ldw	r5,108(sp)
   4a940:	d8801c17 	ldw	r2,112(sp)
   4a944:	29000044 	addi	r4,r5,1
   4a948:	d8c01d87 	ldb	r3,118(sp)
   4a94c:	183e4d26 	beq	r3,zero,4a284 <__alt_data_end+0xfffca284>
   4a950:	00c00044 	movi	r3,1
   4a954:	d9401d84 	addi	r5,sp,118
   4a958:	10c5883a 	add	r2,r2,r3
   4a95c:	41400015 	stw	r5,0(r8)
   4a960:	40c00115 	stw	r3,4(r8)
   4a964:	d8801c15 	stw	r2,112(sp)
   4a968:	d9001b15 	stw	r4,108(sp)
   4a96c:	014001c4 	movi	r5,7
   4a970:	2900a90e 	bge	r5,r4,4ac18 <___vfiprintf_internal_r+0xe8c>
   4a974:	1000da1e 	bne	r2,zero,4ace0 <___vfiprintf_internal_r+0xf54>
   4a978:	7000ab1e 	bne	r14,zero,4ac28 <___vfiprintf_internal_r+0xe9c>
   4a97c:	000b883a 	mov	r5,zero
   4a980:	1809883a 	mov	r4,r3
   4a984:	d811883a 	mov	r8,sp
   4a988:	00c02004 	movi	r3,128
   4a98c:	e0fe4d26 	beq	fp,r3,4a2c4 <__alt_data_end+0xfffca2c4>
   4a990:	4cf9c83a 	sub	fp,r9,r19
   4a994:	073e7b0e 	bge	zero,fp,4a384 <__alt_data_end+0xfffca384>
   4a998:	01c00404 	movi	r7,16
   4a99c:	3f01900e 	bge	r7,fp,4afe0 <___vfiprintf_internal_r+0x1254>
   4a9a0:	00c00174 	movhi	r3,5
   4a9a4:	18c12b04 	addi	r3,r3,1196
   4a9a8:	d8c02415 	stw	r3,144(sp)
   4a9ac:	034001c4 	movi	r13,7
   4a9b0:	00000506 	br	4a9c8 <___vfiprintf_internal_r+0xc3c>
   4a9b4:	29000084 	addi	r4,r5,2
   4a9b8:	42000204 	addi	r8,r8,8
   4a9bc:	180b883a 	mov	r5,r3
   4a9c0:	e73ffc04 	addi	fp,fp,-16
   4a9c4:	3f000d0e 	bge	r7,fp,4a9fc <___vfiprintf_internal_r+0xc70>
   4a9c8:	10800404 	addi	r2,r2,16
   4a9cc:	28c00044 	addi	r3,r5,1
   4a9d0:	45c00015 	stw	r23,0(r8)
   4a9d4:	41c00115 	stw	r7,4(r8)
   4a9d8:	d8801c15 	stw	r2,112(sp)
   4a9dc:	d8c01b15 	stw	r3,108(sp)
   4a9e0:	68fff40e 	bge	r13,r3,4a9b4 <__alt_data_end+0xfffca9b4>
   4a9e4:	1000101e 	bne	r2,zero,4aa28 <___vfiprintf_internal_r+0xc9c>
   4a9e8:	e73ffc04 	addi	fp,fp,-16
   4a9ec:	01000044 	movi	r4,1
   4a9f0:	000b883a 	mov	r5,zero
   4a9f4:	d811883a 	mov	r8,sp
   4a9f8:	3f3ff316 	blt	r7,fp,4a9c8 <__alt_data_end+0xfffca9c8>
   4a9fc:	da802417 	ldw	r10,144(sp)
   4aa00:	1705883a 	add	r2,r2,fp
   4aa04:	47000115 	stw	fp,4(r8)
   4aa08:	42800015 	stw	r10,0(r8)
   4aa0c:	d8801c15 	stw	r2,112(sp)
   4aa10:	d9001b15 	stw	r4,108(sp)
   4aa14:	00c001c4 	movi	r3,7
   4aa18:	19003616 	blt	r3,r4,4aaf4 <___vfiprintf_internal_r+0xd68>
   4aa1c:	42000204 	addi	r8,r8,8
   4aa20:	21000044 	addi	r4,r4,1
   4aa24:	003e5706 	br	4a384 <__alt_data_end+0xfffca384>
   4aa28:	d9402117 	ldw	r5,132(sp)
   4aa2c:	d9002017 	ldw	r4,128(sp)
   4aa30:	d9801a04 	addi	r6,sp,104
   4aa34:	d9c02b15 	stw	r7,172(sp)
   4aa38:	db402a15 	stw	r13,168(sp)
   4aa3c:	0049c780 	call	49c78 <__sprint_r.part.0>
   4aa40:	d9c02b17 	ldw	r7,172(sp)
   4aa44:	db402a17 	ldw	r13,168(sp)
   4aa48:	1000241e 	bne	r2,zero,4aadc <___vfiprintf_internal_r+0xd50>
   4aa4c:	d9401b17 	ldw	r5,108(sp)
   4aa50:	d8801c17 	ldw	r2,112(sp)
   4aa54:	d811883a 	mov	r8,sp
   4aa58:	29000044 	addi	r4,r5,1
   4aa5c:	003fd806 	br	4a9c0 <__alt_data_end+0xfffca9c0>
   4aa60:	d9401b17 	ldw	r5,108(sp)
   4aa64:	00c00174 	movhi	r3,5
   4aa68:	18c12f04 	addi	r3,r3,1212
   4aa6c:	d8c02415 	stw	r3,144(sp)
   4aa70:	29400044 	addi	r5,r5,1
   4aa74:	d8c02417 	ldw	r3,144(sp)
   4aa78:	14c5883a 	add	r2,r2,r19
   4aa7c:	44c00115 	stw	r19,4(r8)
   4aa80:	40c00015 	stw	r3,0(r8)
   4aa84:	d8801c15 	stw	r2,112(sp)
   4aa88:	d9401b15 	stw	r5,108(sp)
   4aa8c:	00c001c4 	movi	r3,7
   4aa90:	1940070e 	bge	r3,r5,4aab0 <___vfiprintf_internal_r+0xd24>
   4aa94:	103e4826 	beq	r2,zero,4a3b8 <__alt_data_end+0xfffca3b8>
   4aa98:	d9402117 	ldw	r5,132(sp)
   4aa9c:	d9002017 	ldw	r4,128(sp)
   4aaa0:	d9801a04 	addi	r6,sp,104
   4aaa4:	0049c780 	call	49c78 <__sprint_r.part.0>
   4aaa8:	10000c1e 	bne	r2,zero,4aadc <___vfiprintf_internal_r+0xd50>
   4aaac:	d8801c17 	ldw	r2,112(sp)
   4aab0:	8c80010e 	bge	r17,r18,4aab8 <___vfiprintf_internal_r+0xd2c>
   4aab4:	9023883a 	mov	r17,r18
   4aab8:	da802317 	ldw	r10,140(sp)
   4aabc:	5455883a 	add	r10,r10,r17
   4aac0:	da802315 	stw	r10,140(sp)
   4aac4:	103e4126 	beq	r2,zero,4a3cc <__alt_data_end+0xfffca3cc>
   4aac8:	d9402117 	ldw	r5,132(sp)
   4aacc:	d9002017 	ldw	r4,128(sp)
   4aad0:	d9801a04 	addi	r6,sp,104
   4aad4:	0049c780 	call	49c78 <__sprint_r.part.0>
   4aad8:	103e3c26 	beq	r2,zero,4a3cc <__alt_data_end+0xfffca3cc>
   4aadc:	dd002117 	ldw	r20,132(sp)
   4aae0:	a080030b 	ldhu	r2,12(r20)
   4aae4:	1080100c 	andi	r2,r2,64
   4aae8:	1001231e 	bne	r2,zero,4af78 <___vfiprintf_internal_r+0x11ec>
   4aaec:	d8802317 	ldw	r2,140(sp)
   4aaf0:	003d7b06 	br	4a0e0 <__alt_data_end+0xfffca0e0>
   4aaf4:	1000991e 	bne	r2,zero,4ad5c <___vfiprintf_internal_r+0xfd0>
   4aaf8:	00c00044 	movi	r3,1
   4aafc:	9805883a 	mov	r2,r19
   4ab00:	dd400015 	stw	r21,0(sp)
   4ab04:	dcc00115 	stw	r19,4(sp)
   4ab08:	dcc01c15 	stw	r19,112(sp)
   4ab0c:	d8c01b15 	stw	r3,108(sp)
   4ab10:	d811883a 	mov	r8,sp
   4ab14:	42000204 	addi	r8,r8,8
   4ab18:	a2c0010c 	andi	r11,r20,4
   4ab1c:	583fe426 	beq	r11,zero,4aab0 <__alt_data_end+0xfffcaab0>
   4ab20:	8ca7c83a 	sub	r19,r17,r18
   4ab24:	04ffe20e 	bge	zero,r19,4aab0 <__alt_data_end+0xfffcaab0>
   4ab28:	01c00404 	movi	r7,16
   4ab2c:	3cffcc0e 	bge	r7,r19,4aa60 <__alt_data_end+0xfffcaa60>
   4ab30:	02800174 	movhi	r10,5
   4ab34:	52812f04 	addi	r10,r10,1212
   4ab38:	d9001b17 	ldw	r4,108(sp)
   4ab3c:	da802415 	stw	r10,144(sp)
   4ab40:	382b883a 	mov	r21,r7
   4ab44:	050001c4 	movi	r20,7
   4ab48:	df002017 	ldw	fp,128(sp)
   4ab4c:	00000506 	br	4ab64 <___vfiprintf_internal_r+0xdd8>
   4ab50:	21400084 	addi	r5,r4,2
   4ab54:	42000204 	addi	r8,r8,8
   4ab58:	1809883a 	mov	r4,r3
   4ab5c:	9cfffc04 	addi	r19,r19,-16
   4ab60:	acffc40e 	bge	r21,r19,4aa74 <__alt_data_end+0xfffcaa74>
   4ab64:	10800404 	addi	r2,r2,16
   4ab68:	20c00044 	addi	r3,r4,1
   4ab6c:	45800015 	stw	r22,0(r8)
   4ab70:	45400115 	stw	r21,4(r8)
   4ab74:	d8801c15 	stw	r2,112(sp)
   4ab78:	d8c01b15 	stw	r3,108(sp)
   4ab7c:	a0fff40e 	bge	r20,r3,4ab50 <__alt_data_end+0xfffcab50>
   4ab80:	1000041e 	bne	r2,zero,4ab94 <___vfiprintf_internal_r+0xe08>
   4ab84:	01400044 	movi	r5,1
   4ab88:	0009883a 	mov	r4,zero
   4ab8c:	d811883a 	mov	r8,sp
   4ab90:	003ff206 	br	4ab5c <__alt_data_end+0xfffcab5c>
   4ab94:	d9402117 	ldw	r5,132(sp)
   4ab98:	d9801a04 	addi	r6,sp,104
   4ab9c:	e009883a 	mov	r4,fp
   4aba0:	0049c780 	call	49c78 <__sprint_r.part.0>
   4aba4:	103fcd1e 	bne	r2,zero,4aadc <__alt_data_end+0xfffcaadc>
   4aba8:	d9001b17 	ldw	r4,108(sp)
   4abac:	d8801c17 	ldw	r2,112(sp)
   4abb0:	d811883a 	mov	r8,sp
   4abb4:	21400044 	addi	r5,r4,1
   4abb8:	003fe806 	br	4ab5c <__alt_data_end+0xfffcab5c>
   4abbc:	d9402117 	ldw	r5,132(sp)
   4abc0:	d9002017 	ldw	r4,128(sp)
   4abc4:	d9801a04 	addi	r6,sp,104
   4abc8:	d9c02b15 	stw	r7,172(sp)
   4abcc:	db402a15 	stw	r13,168(sp)
   4abd0:	0049c780 	call	49c78 <__sprint_r.part.0>
   4abd4:	d9c02b17 	ldw	r7,172(sp)
   4abd8:	db402a17 	ldw	r13,168(sp)
   4abdc:	103fbf1e 	bne	r2,zero,4aadc <__alt_data_end+0xfffcaadc>
   4abe0:	d9401b17 	ldw	r5,108(sp)
   4abe4:	d8801c17 	ldw	r2,112(sp)
   4abe8:	d811883a 	mov	r8,sp
   4abec:	29800044 	addi	r6,r5,1
   4abf0:	003dc406 	br	4a304 <__alt_data_end+0xfffca304>
   4abf4:	1000d21e 	bne	r2,zero,4af40 <___vfiprintf_internal_r+0x11b4>
   4abf8:	d8c01d87 	ldb	r3,118(sp)
   4abfc:	18009526 	beq	r3,zero,4ae54 <___vfiprintf_internal_r+0x10c8>
   4ac00:	00800044 	movi	r2,1
   4ac04:	d8c01d84 	addi	r3,sp,118
   4ac08:	1009883a 	mov	r4,r2
   4ac0c:	d8c00015 	stw	r3,0(sp)
   4ac10:	d8800115 	stw	r2,4(sp)
   4ac14:	d811883a 	mov	r8,sp
   4ac18:	200b883a 	mov	r5,r4
   4ac1c:	42000204 	addi	r8,r8,8
   4ac20:	21000044 	addi	r4,r4,1
   4ac24:	003d9706 	br	4a284 <__alt_data_end+0xfffca284>
   4ac28:	d9001d04 	addi	r4,sp,116
   4ac2c:	00800084 	movi	r2,2
   4ac30:	d9000015 	stw	r4,0(sp)
   4ac34:	d8800115 	stw	r2,4(sp)
   4ac38:	1809883a 	mov	r4,r3
   4ac3c:	d811883a 	mov	r8,sp
   4ac40:	200b883a 	mov	r5,r4
   4ac44:	42000204 	addi	r8,r8,8
   4ac48:	21000044 	addi	r4,r4,1
   4ac4c:	003f4e06 	br	4a988 <__alt_data_end+0xfffca988>
   4ac50:	d8001d85 	stb	zero,118(sp)
   4ac54:	48005016 	blt	r9,zero,4ad98 <___vfiprintf_internal_r+0x100c>
   4ac58:	00ffdfc4 	movi	r3,-129
   4ac5c:	94c4b03a 	or	r2,r18,r19
   4ac60:	a0e8703a 	and	r20,r20,r3
   4ac64:	103d4426 	beq	r2,zero,4a178 <__alt_data_end+0xfffca178>
   4ac68:	0039883a 	mov	fp,zero
   4ac6c:	d9002617 	ldw	r4,152(sp)
   4ac70:	dd401a04 	addi	r21,sp,104
   4ac74:	908003cc 	andi	r2,r18,15
   4ac78:	9806973a 	slli	r3,r19,28
   4ac7c:	2085883a 	add	r2,r4,r2
   4ac80:	9024d13a 	srli	r18,r18,4
   4ac84:	10800003 	ldbu	r2,0(r2)
   4ac88:	9826d13a 	srli	r19,r19,4
   4ac8c:	ad7fffc4 	addi	r21,r21,-1
   4ac90:	1ca4b03a 	or	r18,r3,r18
   4ac94:	a8800005 	stb	r2,0(r21)
   4ac98:	94c4b03a 	or	r2,r18,r19
   4ac9c:	103ff51e 	bne	r2,zero,4ac74 <__alt_data_end+0xfffcac74>
   4aca0:	003e5906 	br	4a608 <__alt_data_end+0xfffca608>
   4aca4:	d9402117 	ldw	r5,132(sp)
   4aca8:	d9002017 	ldw	r4,128(sp)
   4acac:	d9801a04 	addi	r6,sp,104
   4acb0:	0049c780 	call	49c78 <__sprint_r.part.0>
   4acb4:	103f891e 	bne	r2,zero,4aadc <__alt_data_end+0xfffcaadc>
   4acb8:	d8801c17 	ldw	r2,112(sp)
   4acbc:	d811883a 	mov	r8,sp
   4acc0:	003f9506 	br	4ab18 <__alt_data_end+0xfffcab18>
   4acc4:	d9402117 	ldw	r5,132(sp)
   4acc8:	d9002017 	ldw	r4,128(sp)
   4accc:	d9801a04 	addi	r6,sp,104
   4acd0:	0049c780 	call	49c78 <__sprint_r.part.0>
   4acd4:	103f811e 	bne	r2,zero,4aadc <__alt_data_end+0xfffcaadc>
   4acd8:	d811883a 	mov	r8,sp
   4acdc:	003ced06 	br	4a094 <__alt_data_end+0xfffca094>
   4ace0:	d9402117 	ldw	r5,132(sp)
   4ace4:	d9002017 	ldw	r4,128(sp)
   4ace8:	d9801a04 	addi	r6,sp,104
   4acec:	da402c15 	stw	r9,176(sp)
   4acf0:	db802a15 	stw	r14,168(sp)
   4acf4:	0049c780 	call	49c78 <__sprint_r.part.0>
   4acf8:	da402c17 	ldw	r9,176(sp)
   4acfc:	db802a17 	ldw	r14,168(sp)
   4ad00:	103f761e 	bne	r2,zero,4aadc <__alt_data_end+0xfffcaadc>
   4ad04:	d9401b17 	ldw	r5,108(sp)
   4ad08:	d8801c17 	ldw	r2,112(sp)
   4ad0c:	d811883a 	mov	r8,sp
   4ad10:	29000044 	addi	r4,r5,1
   4ad14:	003d5b06 	br	4a284 <__alt_data_end+0xfffca284>
   4ad18:	d9402117 	ldw	r5,132(sp)
   4ad1c:	d9002017 	ldw	r4,128(sp)
   4ad20:	d9801a04 	addi	r6,sp,104
   4ad24:	da402c15 	stw	r9,176(sp)
   4ad28:	0049c780 	call	49c78 <__sprint_r.part.0>
   4ad2c:	da402c17 	ldw	r9,176(sp)
   4ad30:	103f6a1e 	bne	r2,zero,4aadc <__alt_data_end+0xfffcaadc>
   4ad34:	d9401b17 	ldw	r5,108(sp)
   4ad38:	d8801c17 	ldw	r2,112(sp)
   4ad3c:	d811883a 	mov	r8,sp
   4ad40:	29000044 	addi	r4,r5,1
   4ad44:	003f1006 	br	4a988 <__alt_data_end+0xfffca988>
   4ad48:	1000c31e 	bne	r2,zero,4b058 <___vfiprintf_internal_r+0x12cc>
   4ad4c:	01000044 	movi	r4,1
   4ad50:	000b883a 	mov	r5,zero
   4ad54:	d811883a 	mov	r8,sp
   4ad58:	003f0d06 	br	4a990 <__alt_data_end+0xfffca990>
   4ad5c:	d9402117 	ldw	r5,132(sp)
   4ad60:	d9002017 	ldw	r4,128(sp)
   4ad64:	d9801a04 	addi	r6,sp,104
   4ad68:	0049c780 	call	49c78 <__sprint_r.part.0>
   4ad6c:	103f5b1e 	bne	r2,zero,4aadc <__alt_data_end+0xfffcaadc>
   4ad70:	d9001b17 	ldw	r4,108(sp)
   4ad74:	d8801c17 	ldw	r2,112(sp)
   4ad78:	d811883a 	mov	r8,sp
   4ad7c:	21000044 	addi	r4,r4,1
   4ad80:	003d8006 	br	4a384 <__alt_data_end+0xfffca384>
   4ad84:	01000174 	movhi	r4,5
   4ad88:	2100cb04 	addi	r4,r4,812
   4ad8c:	d9002615 	stw	r4,152(sp)
   4ad90:	d8c02215 	stw	r3,136(sp)
   4ad94:	1029883a 	mov	r20,r2
   4ad98:	94c4b03a 	or	r2,r18,r19
   4ad9c:	103fb21e 	bne	r2,zero,4ac68 <__alt_data_end+0xfffcac68>
   4ada0:	0039883a 	mov	fp,zero
   4ada4:	00800084 	movi	r2,2
   4ada8:	003e6b06 	br	4a758 <__alt_data_end+0xfffca758>
   4adac:	da802217 	ldw	r10,136(sp)
   4adb0:	d8001d85 	stb	zero,118(sp)
   4adb4:	0027883a 	mov	r19,zero
   4adb8:	50800104 	addi	r2,r10,4
   4adbc:	54800017 	ldw	r18,0(r10)
   4adc0:	483e6016 	blt	r9,zero,4a744 <__alt_data_end+0xfffca744>
   4adc4:	00ffdfc4 	movi	r3,-129
   4adc8:	d8802215 	stw	r2,136(sp)
   4adcc:	a0e8703a 	and	r20,r20,r3
   4add0:	0039883a 	mov	fp,zero
   4add4:	903ebb26 	beq	r18,zero,4a8c4 <__alt_data_end+0xfffca8c4>
   4add8:	00800244 	movi	r2,9
   4addc:	14bdee36 	bltu	r2,r18,4a598 <__alt_data_end+0xfffca598>
   4ade0:	003eba06 	br	4a8cc <__alt_data_end+0xfffca8cc>
   4ade4:	00800c04 	movi	r2,48
   4ade8:	d8c01d45 	stb	r3,117(sp)
   4adec:	d8801d05 	stb	r2,116(sp)
   4adf0:	d8001d85 	stb	zero,118(sp)
   4adf4:	a0c00094 	ori	r3,r20,2
   4adf8:	4800a916 	blt	r9,zero,4b0a0 <___vfiprintf_internal_r+0x1314>
   4adfc:	00bfdfc4 	movi	r2,-129
   4ae00:	a096703a 	and	r11,r20,r2
   4ae04:	5d000094 	ori	r20,r11,2
   4ae08:	0039883a 	mov	fp,zero
   4ae0c:	003f9706 	br	4ac6c <__alt_data_end+0xfffcac6c>
   4ae10:	8025883a 	mov	r18,r16
   4ae14:	003c2e06 	br	49ed0 <__alt_data_end+0xfffc9ed0>
   4ae18:	00800174 	movhi	r2,5
   4ae1c:	1080cb04 	addi	r2,r2,812
   4ae20:	0039883a 	mov	fp,zero
   4ae24:	d8802615 	stw	r2,152(sp)
   4ae28:	003f9006 	br	4ac6c <__alt_data_end+0xfffcac6c>
   4ae2c:	04a5c83a 	sub	r18,zero,r18
   4ae30:	07000b44 	movi	fp,45
   4ae34:	9004c03a 	cmpne	r2,r18,zero
   4ae38:	04e7c83a 	sub	r19,zero,r19
   4ae3c:	df001d85 	stb	fp,118(sp)
   4ae40:	98a7c83a 	sub	r19,r19,r2
   4ae44:	48009f16 	blt	r9,zero,4b0c4 <___vfiprintf_internal_r+0x1338>
   4ae48:	00bfdfc4 	movi	r2,-129
   4ae4c:	a0a8703a 	and	r20,r20,r2
   4ae50:	003dd006 	br	4a594 <__alt_data_end+0xfffca594>
   4ae54:	70004c26 	beq	r14,zero,4af88 <___vfiprintf_internal_r+0x11fc>
   4ae58:	00800084 	movi	r2,2
   4ae5c:	d8c01d04 	addi	r3,sp,116
   4ae60:	d8c00015 	stw	r3,0(sp)
   4ae64:	d8800115 	stw	r2,4(sp)
   4ae68:	01000044 	movi	r4,1
   4ae6c:	d811883a 	mov	r8,sp
   4ae70:	003f7306 	br	4ac40 <__alt_data_end+0xfffcac40>
   4ae74:	a080100c 	andi	r2,r20,64
   4ae78:	da802217 	ldw	r10,136(sp)
   4ae7c:	103e0626 	beq	r2,zero,4a698 <__alt_data_end+0xfffca698>
   4ae80:	5480000f 	ldh	r18,0(r10)
   4ae84:	52800104 	addi	r10,r10,4
   4ae88:	da802215 	stw	r10,136(sp)
   4ae8c:	9027d7fa 	srai	r19,r18,31
   4ae90:	9805883a 	mov	r2,r19
   4ae94:	003db806 	br	4a578 <__alt_data_end+0xfffca578>
   4ae98:	a080040c 	andi	r2,r20,16
   4ae9c:	1000091e 	bne	r2,zero,4aec4 <___vfiprintf_internal_r+0x1138>
   4aea0:	a2c0100c 	andi	r11,r20,64
   4aea4:	58000726 	beq	r11,zero,4aec4 <___vfiprintf_internal_r+0x1138>
   4aea8:	da802217 	ldw	r10,136(sp)
   4aeac:	50800017 	ldw	r2,0(r10)
   4aeb0:	52800104 	addi	r10,r10,4
   4aeb4:	da802215 	stw	r10,136(sp)
   4aeb8:	da802317 	ldw	r10,140(sp)
   4aebc:	1280000d 	sth	r10,0(r2)
   4aec0:	003be706 	br	49e60 <__alt_data_end+0xfffc9e60>
   4aec4:	da802217 	ldw	r10,136(sp)
   4aec8:	50800017 	ldw	r2,0(r10)
   4aecc:	52800104 	addi	r10,r10,4
   4aed0:	da802215 	stw	r10,136(sp)
   4aed4:	da802317 	ldw	r10,140(sp)
   4aed8:	12800015 	stw	r10,0(r2)
   4aedc:	003be006 	br	49e60 <__alt_data_end+0xfffc9e60>
   4aee0:	a080100c 	andi	r2,r20,64
   4aee4:	da802217 	ldw	r10,136(sp)
   4aee8:	10003026 	beq	r2,zero,4afac <___vfiprintf_internal_r+0x1220>
   4aeec:	5480000b 	ldhu	r18,0(r10)
   4aef0:	52800104 	addi	r10,r10,4
   4aef4:	0027883a 	mov	r19,zero
   4aef8:	da802215 	stw	r10,136(sp)
   4aefc:	003d8006 	br	4a500 <__alt_data_end+0xfffca500>
   4af00:	80c00007 	ldb	r3,0(r16)
   4af04:	003c0006 	br	49f08 <__alt_data_end+0xfffc9f08>
   4af08:	a080100c 	andi	r2,r20,64
   4af0c:	d8001d85 	stb	zero,118(sp)
   4af10:	da802217 	ldw	r10,136(sp)
   4af14:	1000201e 	bne	r2,zero,4af98 <___vfiprintf_internal_r+0x120c>
   4af18:	50800104 	addi	r2,r10,4
   4af1c:	54800017 	ldw	r18,0(r10)
   4af20:	0027883a 	mov	r19,zero
   4af24:	483def0e 	bge	r9,zero,4a6e4 <__alt_data_end+0xfffca6e4>
   4af28:	94c6b03a 	or	r3,r18,r19
   4af2c:	d8802215 	stw	r2,136(sp)
   4af30:	183d4e1e 	bne	r3,zero,4a46c <__alt_data_end+0xfffca46c>
   4af34:	0039883a 	mov	fp,zero
   4af38:	0005883a 	mov	r2,zero
   4af3c:	003e0606 	br	4a758 <__alt_data_end+0xfffca758>
   4af40:	d9402117 	ldw	r5,132(sp)
   4af44:	d9002017 	ldw	r4,128(sp)
   4af48:	d9801a04 	addi	r6,sp,104
   4af4c:	da402c15 	stw	r9,176(sp)
   4af50:	db802a15 	stw	r14,168(sp)
   4af54:	0049c780 	call	49c78 <__sprint_r.part.0>
   4af58:	da402c17 	ldw	r9,176(sp)
   4af5c:	db802a17 	ldw	r14,168(sp)
   4af60:	103ede1e 	bne	r2,zero,4aadc <__alt_data_end+0xfffcaadc>
   4af64:	d9401b17 	ldw	r5,108(sp)
   4af68:	d8801c17 	ldw	r2,112(sp)
   4af6c:	d811883a 	mov	r8,sp
   4af70:	29000044 	addi	r4,r5,1
   4af74:	003e7406 	br	4a948 <__alt_data_end+0xfffca948>
   4af78:	00bfffc4 	movi	r2,-1
   4af7c:	003c5806 	br	4a0e0 <__alt_data_end+0xfffca0e0>
   4af80:	d811883a 	mov	r8,sp
   4af84:	003ee806 	br	4ab28 <__alt_data_end+0xfffcab28>
   4af88:	000b883a 	mov	r5,zero
   4af8c:	01000044 	movi	r4,1
   4af90:	d811883a 	mov	r8,sp
   4af94:	003e7c06 	br	4a988 <__alt_data_end+0xfffca988>
   4af98:	50800104 	addi	r2,r10,4
   4af9c:	5480000b 	ldhu	r18,0(r10)
   4afa0:	0027883a 	mov	r19,zero
   4afa4:	483dcf0e 	bge	r9,zero,4a6e4 <__alt_data_end+0xfffca6e4>
   4afa8:	003fdf06 	br	4af28 <__alt_data_end+0xfffcaf28>
   4afac:	54800017 	ldw	r18,0(r10)
   4afb0:	52800104 	addi	r10,r10,4
   4afb4:	0027883a 	mov	r19,zero
   4afb8:	da802215 	stw	r10,136(sp)
   4afbc:	003d5006 	br	4a500 <__alt_data_end+0xfffca500>
   4afc0:	50800104 	addi	r2,r10,4
   4afc4:	5480000b 	ldhu	r18,0(r10)
   4afc8:	0027883a 	mov	r19,zero
   4afcc:	483f7d0e 	bge	r9,zero,4adc4 <__alt_data_end+0xfffcadc4>
   4afd0:	003ddc06 	br	4a744 <__alt_data_end+0xfffca744>
   4afd4:	d8c02215 	stw	r3,136(sp)
   4afd8:	0039883a 	mov	fp,zero
   4afdc:	003ddb06 	br	4a74c <__alt_data_end+0xfffca74c>
   4afe0:	02800174 	movhi	r10,5
   4afe4:	52812b04 	addi	r10,r10,1196
   4afe8:	da802415 	stw	r10,144(sp)
   4afec:	003e8306 	br	4a9fc <__alt_data_end+0xfffca9fc>
   4aff0:	d8801c17 	ldw	r2,112(sp)
   4aff4:	dd002117 	ldw	r20,132(sp)
   4aff8:	103eb926 	beq	r2,zero,4aae0 <__alt_data_end+0xfffcaae0>
   4affc:	d9002017 	ldw	r4,128(sp)
   4b000:	d9801a04 	addi	r6,sp,104
   4b004:	a00b883a 	mov	r5,r20
   4b008:	0049c780 	call	49c78 <__sprint_r.part.0>
   4b00c:	003eb406 	br	4aae0 <__alt_data_end+0xfffcaae0>
   4b010:	80c00043 	ldbu	r3,1(r16)
   4b014:	a5000814 	ori	r20,r20,32
   4b018:	84000044 	addi	r16,r16,1
   4b01c:	18c03fcc 	andi	r3,r3,255
   4b020:	18c0201c 	xori	r3,r3,128
   4b024:	18ffe004 	addi	r3,r3,-128
   4b028:	003bb706 	br	49f08 <__alt_data_end+0xfffc9f08>
   4b02c:	a809883a 	mov	r4,r21
   4b030:	d8c02a15 	stw	r3,168(sp)
   4b034:	da002b15 	stw	r8,172(sp)
   4b038:	0042fb40 	call	42fb4 <strlen>
   4b03c:	d8c02a17 	ldw	r3,168(sp)
   4b040:	1027883a 	mov	r19,r2
   4b044:	df001d83 	ldbu	fp,118(sp)
   4b048:	d8c02215 	stw	r3,136(sp)
   4b04c:	0013883a 	mov	r9,zero
   4b050:	da002b17 	ldw	r8,172(sp)
   4b054:	003c4d06 	br	4a18c <__alt_data_end+0xfffca18c>
   4b058:	d9402117 	ldw	r5,132(sp)
   4b05c:	d9002017 	ldw	r4,128(sp)
   4b060:	d9801a04 	addi	r6,sp,104
   4b064:	da402c15 	stw	r9,176(sp)
   4b068:	0049c780 	call	49c78 <__sprint_r.part.0>
   4b06c:	da402c17 	ldw	r9,176(sp)
   4b070:	103e9a1e 	bne	r2,zero,4aadc <__alt_data_end+0xfffcaadc>
   4b074:	d9401b17 	ldw	r5,108(sp)
   4b078:	d8801c17 	ldw	r2,112(sp)
   4b07c:	d811883a 	mov	r8,sp
   4b080:	29000044 	addi	r4,r5,1
   4b084:	003e4206 	br	4a990 <__alt_data_end+0xfffca990>
   4b088:	d9401b17 	ldw	r5,108(sp)
   4b08c:	01000174 	movhi	r4,5
   4b090:	21012f04 	addi	r4,r4,1212
   4b094:	d9002415 	stw	r4,144(sp)
   4b098:	29400044 	addi	r5,r5,1
   4b09c:	003c6d06 	br	4a254 <__alt_data_end+0xfffca254>
   4b0a0:	0039883a 	mov	fp,zero
   4b0a4:	00800084 	movi	r2,2
   4b0a8:	10803fcc 	andi	r2,r2,255
   4b0ac:	01000044 	movi	r4,1
   4b0b0:	11001e26 	beq	r2,r4,4b12c <___vfiprintf_internal_r+0x13a0>
   4b0b4:	01000084 	movi	r4,2
   4b0b8:	11001e1e 	bne	r2,r4,4b134 <___vfiprintf_internal_r+0x13a8>
   4b0bc:	1829883a 	mov	r20,r3
   4b0c0:	003eea06 	br	4ac6c <__alt_data_end+0xfffcac6c>
   4b0c4:	a007883a 	mov	r3,r20
   4b0c8:	00800044 	movi	r2,1
   4b0cc:	003ff606 	br	4b0a8 <__alt_data_end+0xfffcb0a8>
   4b0d0:	00800184 	movi	r2,6
   4b0d4:	1240012e 	bgeu	r2,r9,4b0dc <___vfiprintf_internal_r+0x1350>
   4b0d8:	1013883a 	mov	r9,r2
   4b0dc:	4827883a 	mov	r19,r9
   4b0e0:	4825883a 	mov	r18,r9
   4b0e4:	48001516 	blt	r9,zero,4b13c <___vfiprintf_internal_r+0x13b0>
   4b0e8:	05400174 	movhi	r21,5
   4b0ec:	d8c02215 	stw	r3,136(sp)
   4b0f0:	ad40d004 	addi	r21,r21,832
   4b0f4:	003d1406 	br	4a548 <__alt_data_end+0xfffca548>
   4b0f8:	02800174 	movhi	r10,5
   4b0fc:	52812b04 	addi	r10,r10,1196
   4b100:	da802415 	stw	r10,144(sp)
   4b104:	200d883a 	mov	r6,r4
   4b108:	003c9106 	br	4a350 <__alt_data_end+0xfffca350>
   4b10c:	5021883a 	mov	r16,r10
   4b110:	0013883a 	mov	r9,zero
   4b114:	003b7d06 	br	49f0c <__alt_data_end+0xfffc9f0c>
   4b118:	4827883a 	mov	r19,r9
   4b11c:	df001d83 	ldbu	fp,118(sp)
   4b120:	d8c02215 	stw	r3,136(sp)
   4b124:	0013883a 	mov	r9,zero
   4b128:	003c1806 	br	4a18c <__alt_data_end+0xfffca18c>
   4b12c:	1829883a 	mov	r20,r3
   4b130:	003d1806 	br	4a594 <__alt_data_end+0xfffca594>
   4b134:	1829883a 	mov	r20,r3
   4b138:	003ccd06 	br	4a470 <__alt_data_end+0xfffca470>
   4b13c:	0025883a 	mov	r18,zero
   4b140:	003fe906 	br	4b0e8 <__alt_data_end+0xfffcb0e8>
   4b144:	d8802217 	ldw	r2,136(sp)
   4b148:	80c00043 	ldbu	r3,1(r16)
   4b14c:	5021883a 	mov	r16,r10
   4b150:	12400017 	ldw	r9,0(r2)
   4b154:	10800104 	addi	r2,r2,4
   4b158:	d8802215 	stw	r2,136(sp)
   4b15c:	483faf0e 	bge	r9,zero,4b01c <__alt_data_end+0xfffcb01c>
   4b160:	18c03fcc 	andi	r3,r3,255
   4b164:	18c0201c 	xori	r3,r3,128
   4b168:	027fffc4 	movi	r9,-1
   4b16c:	18ffe004 	addi	r3,r3,-128
   4b170:	003b6506 	br	49f08 <__alt_data_end+0xfffc9f08>
   4b174:	d9c01d85 	stb	r7,118(sp)
   4b178:	003ca006 	br	4a3fc <__alt_data_end+0xfffca3fc>
   4b17c:	d9c01d85 	stb	r7,118(sp)
   4b180:	003cad06 	br	4a438 <__alt_data_end+0xfffca438>
   4b184:	d9c01d85 	stb	r7,118(sp)
   4b188:	003d7d06 	br	4a780 <__alt_data_end+0xfffca780>
   4b18c:	d9c01d85 	stb	r7,118(sp)
   4b190:	003d5f06 	br	4a710 <__alt_data_end+0xfffca710>
   4b194:	a080004c 	andi	r2,r20,1
   4b198:	0039883a 	mov	fp,zero
   4b19c:	10000526 	beq	r2,zero,4b1b4 <___vfiprintf_internal_r+0x1428>
   4b1a0:	00800c04 	movi	r2,48
   4b1a4:	d88019c5 	stb	r2,103(sp)
   4b1a8:	dcc02717 	ldw	r19,156(sp)
   4b1ac:	dd4019c4 	addi	r21,sp,103
   4b1b0:	003bf606 	br	4a18c <__alt_data_end+0xfffca18c>
   4b1b4:	0027883a 	mov	r19,zero
   4b1b8:	dd401a04 	addi	r21,sp,104
   4b1bc:	003bf306 	br	4a18c <__alt_data_end+0xfffca18c>
   4b1c0:	d9c01d85 	stb	r7,118(sp)
   4b1c4:	003dc806 	br	4a8e8 <__alt_data_end+0xfffca8e8>
   4b1c8:	d9c01d85 	stb	r7,118(sp)
   4b1cc:	003d3a06 	br	4a6b8 <__alt_data_end+0xfffca6b8>
   4b1d0:	d9c01d85 	stb	r7,118(sp)
   4b1d4:	003d2a06 	br	4a680 <__alt_data_end+0xfffca680>
   4b1d8:	d9c01d85 	stb	r7,118(sp)
   4b1dc:	003cde06 	br	4a558 <__alt_data_end+0xfffca558>
   4b1e0:	d9c01d85 	stb	r7,118(sp)
   4b1e4:	003cbc06 	br	4a4d8 <__alt_data_end+0xfffca4d8>

0004b1e8 <__vfiprintf_internal>:
   4b1e8:	00800174 	movhi	r2,5
   4b1ec:	10882a04 	addi	r2,r2,8360
   4b1f0:	300f883a 	mov	r7,r6
   4b1f4:	280d883a 	mov	r6,r5
   4b1f8:	200b883a 	mov	r5,r4
   4b1fc:	11000017 	ldw	r4,0(r2)
   4b200:	0049d8c1 	jmpi	49d8c <___vfiprintf_internal_r>

0004b204 <__sbprintf>:
   4b204:	2880030b 	ldhu	r2,12(r5)
   4b208:	2ac01917 	ldw	r11,100(r5)
   4b20c:	2a80038b 	ldhu	r10,14(r5)
   4b210:	2a400717 	ldw	r9,28(r5)
   4b214:	2a000917 	ldw	r8,36(r5)
   4b218:	defee204 	addi	sp,sp,-1144
   4b21c:	00c10004 	movi	r3,1024
   4b220:	dc011a15 	stw	r16,1128(sp)
   4b224:	10bfff4c 	andi	r2,r2,65533
   4b228:	2821883a 	mov	r16,r5
   4b22c:	d8cb883a 	add	r5,sp,r3
   4b230:	dc811c15 	stw	r18,1136(sp)
   4b234:	dc411b15 	stw	r17,1132(sp)
   4b238:	dfc11d15 	stw	ra,1140(sp)
   4b23c:	2025883a 	mov	r18,r4
   4b240:	d881030d 	sth	r2,1036(sp)
   4b244:	dac11915 	stw	r11,1124(sp)
   4b248:	da81038d 	sth	r10,1038(sp)
   4b24c:	da410715 	stw	r9,1052(sp)
   4b250:	da010915 	stw	r8,1060(sp)
   4b254:	dec10015 	stw	sp,1024(sp)
   4b258:	dec10415 	stw	sp,1040(sp)
   4b25c:	d8c10215 	stw	r3,1032(sp)
   4b260:	d8c10515 	stw	r3,1044(sp)
   4b264:	d8010615 	stw	zero,1048(sp)
   4b268:	0049d8c0 	call	49d8c <___vfiprintf_internal_r>
   4b26c:	1023883a 	mov	r17,r2
   4b270:	10000416 	blt	r2,zero,4b284 <__sbprintf+0x80>
   4b274:	d9410004 	addi	r5,sp,1024
   4b278:	9009883a 	mov	r4,r18
   4b27c:	00473040 	call	47304 <_fflush_r>
   4b280:	10000d1e 	bne	r2,zero,4b2b8 <__sbprintf+0xb4>
   4b284:	d881030b 	ldhu	r2,1036(sp)
   4b288:	1080100c 	andi	r2,r2,64
   4b28c:	10000326 	beq	r2,zero,4b29c <__sbprintf+0x98>
   4b290:	8080030b 	ldhu	r2,12(r16)
   4b294:	10801014 	ori	r2,r2,64
   4b298:	8080030d 	sth	r2,12(r16)
   4b29c:	8805883a 	mov	r2,r17
   4b2a0:	dfc11d17 	ldw	ra,1140(sp)
   4b2a4:	dc811c17 	ldw	r18,1136(sp)
   4b2a8:	dc411b17 	ldw	r17,1132(sp)
   4b2ac:	dc011a17 	ldw	r16,1128(sp)
   4b2b0:	dec11e04 	addi	sp,sp,1144
   4b2b4:	f800283a 	ret
   4b2b8:	047fffc4 	movi	r17,-1
   4b2bc:	003ff106 	br	4b284 <__alt_data_end+0xfffcb284>

0004b2c0 <_write_r>:
   4b2c0:	defffd04 	addi	sp,sp,-12
   4b2c4:	2805883a 	mov	r2,r5
   4b2c8:	dc000015 	stw	r16,0(sp)
   4b2cc:	04000174 	movhi	r16,5
   4b2d0:	dc400115 	stw	r17,4(sp)
   4b2d4:	300b883a 	mov	r5,r6
   4b2d8:	840ef404 	addi	r16,r16,15312
   4b2dc:	2023883a 	mov	r17,r4
   4b2e0:	380d883a 	mov	r6,r7
   4b2e4:	1009883a 	mov	r4,r2
   4b2e8:	dfc00215 	stw	ra,8(sp)
   4b2ec:	80000015 	stw	zero,0(r16)
   4b2f0:	004fed00 	call	4fed0 <write>
   4b2f4:	00ffffc4 	movi	r3,-1
   4b2f8:	10c00526 	beq	r2,r3,4b310 <_write_r+0x50>
   4b2fc:	dfc00217 	ldw	ra,8(sp)
   4b300:	dc400117 	ldw	r17,4(sp)
   4b304:	dc000017 	ldw	r16,0(sp)
   4b308:	dec00304 	addi	sp,sp,12
   4b30c:	f800283a 	ret
   4b310:	80c00017 	ldw	r3,0(r16)
   4b314:	183ff926 	beq	r3,zero,4b2fc <__alt_data_end+0xfffcb2fc>
   4b318:	88c00015 	stw	r3,0(r17)
   4b31c:	003ff706 	br	4b2fc <__alt_data_end+0xfffcb2fc>

0004b320 <_close_r>:
   4b320:	defffd04 	addi	sp,sp,-12
   4b324:	dc000015 	stw	r16,0(sp)
   4b328:	04000174 	movhi	r16,5
   4b32c:	dc400115 	stw	r17,4(sp)
   4b330:	840ef404 	addi	r16,r16,15312
   4b334:	2023883a 	mov	r17,r4
   4b338:	2809883a 	mov	r4,r5
   4b33c:	dfc00215 	stw	ra,8(sp)
   4b340:	80000015 	stw	zero,0(r16)
   4b344:	0041d380 	call	41d38 <close>
   4b348:	00ffffc4 	movi	r3,-1
   4b34c:	10c00526 	beq	r2,r3,4b364 <_close_r+0x44>
   4b350:	dfc00217 	ldw	ra,8(sp)
   4b354:	dc400117 	ldw	r17,4(sp)
   4b358:	dc000017 	ldw	r16,0(sp)
   4b35c:	dec00304 	addi	sp,sp,12
   4b360:	f800283a 	ret
   4b364:	80c00017 	ldw	r3,0(r16)
   4b368:	183ff926 	beq	r3,zero,4b350 <__alt_data_end+0xfffcb350>
   4b36c:	88c00015 	stw	r3,0(r17)
   4b370:	003ff706 	br	4b350 <__alt_data_end+0xfffcb350>

0004b374 <_calloc_r>:
   4b374:	298b383a 	mul	r5,r5,r6
   4b378:	defffe04 	addi	sp,sp,-8
   4b37c:	dfc00115 	stw	ra,4(sp)
   4b380:	dc000015 	stw	r16,0(sp)
   4b384:	0047f840 	call	47f84 <_malloc_r>
   4b388:	10002926 	beq	r2,zero,4b430 <_calloc_r+0xbc>
   4b38c:	11bfff17 	ldw	r6,-4(r2)
   4b390:	1021883a 	mov	r16,r2
   4b394:	00bfff04 	movi	r2,-4
   4b398:	308c703a 	and	r6,r6,r2
   4b39c:	00c00904 	movi	r3,36
   4b3a0:	308d883a 	add	r6,r6,r2
   4b3a4:	19801636 	bltu	r3,r6,4b400 <_calloc_r+0x8c>
   4b3a8:	008004c4 	movi	r2,19
   4b3ac:	11800b2e 	bgeu	r2,r6,4b3dc <_calloc_r+0x68>
   4b3b0:	80000015 	stw	zero,0(r16)
   4b3b4:	80000115 	stw	zero,4(r16)
   4b3b8:	008006c4 	movi	r2,27
   4b3bc:	11801a2e 	bgeu	r2,r6,4b428 <_calloc_r+0xb4>
   4b3c0:	80000215 	stw	zero,8(r16)
   4b3c4:	80000315 	stw	zero,12(r16)
   4b3c8:	30c0151e 	bne	r6,r3,4b420 <_calloc_r+0xac>
   4b3cc:	80000415 	stw	zero,16(r16)
   4b3d0:	80800604 	addi	r2,r16,24
   4b3d4:	80000515 	stw	zero,20(r16)
   4b3d8:	00000106 	br	4b3e0 <_calloc_r+0x6c>
   4b3dc:	8005883a 	mov	r2,r16
   4b3e0:	10000015 	stw	zero,0(r2)
   4b3e4:	10000115 	stw	zero,4(r2)
   4b3e8:	10000215 	stw	zero,8(r2)
   4b3ec:	8005883a 	mov	r2,r16
   4b3f0:	dfc00117 	ldw	ra,4(sp)
   4b3f4:	dc000017 	ldw	r16,0(sp)
   4b3f8:	dec00204 	addi	sp,sp,8
   4b3fc:	f800283a 	ret
   4b400:	000b883a 	mov	r5,zero
   4b404:	8009883a 	mov	r4,r16
   4b408:	00488740 	call	48874 <memset>
   4b40c:	8005883a 	mov	r2,r16
   4b410:	dfc00117 	ldw	ra,4(sp)
   4b414:	dc000017 	ldw	r16,0(sp)
   4b418:	dec00204 	addi	sp,sp,8
   4b41c:	f800283a 	ret
   4b420:	80800404 	addi	r2,r16,16
   4b424:	003fee06 	br	4b3e0 <__alt_data_end+0xfffcb3e0>
   4b428:	80800204 	addi	r2,r16,8
   4b42c:	003fec06 	br	4b3e0 <__alt_data_end+0xfffcb3e0>
   4b430:	0005883a 	mov	r2,zero
   4b434:	003fee06 	br	4b3f0 <__alt_data_end+0xfffcb3f0>

0004b438 <_fclose_r>:
   4b438:	28003926 	beq	r5,zero,4b520 <_fclose_r+0xe8>
   4b43c:	defffc04 	addi	sp,sp,-16
   4b440:	dc400115 	stw	r17,4(sp)
   4b444:	dc000015 	stw	r16,0(sp)
   4b448:	dfc00315 	stw	ra,12(sp)
   4b44c:	dc800215 	stw	r18,8(sp)
   4b450:	2023883a 	mov	r17,r4
   4b454:	2821883a 	mov	r16,r5
   4b458:	20000226 	beq	r4,zero,4b464 <_fclose_r+0x2c>
   4b45c:	20800e17 	ldw	r2,56(r4)
   4b460:	10002726 	beq	r2,zero,4b500 <_fclose_r+0xc8>
   4b464:	8080030f 	ldh	r2,12(r16)
   4b468:	1000071e 	bne	r2,zero,4b488 <_fclose_r+0x50>
   4b46c:	0005883a 	mov	r2,zero
   4b470:	dfc00317 	ldw	ra,12(sp)
   4b474:	dc800217 	ldw	r18,8(sp)
   4b478:	dc400117 	ldw	r17,4(sp)
   4b47c:	dc000017 	ldw	r16,0(sp)
   4b480:	dec00404 	addi	sp,sp,16
   4b484:	f800283a 	ret
   4b488:	800b883a 	mov	r5,r16
   4b48c:	8809883a 	mov	r4,r17
   4b490:	00470e80 	call	470e8 <__sflush_r>
   4b494:	1025883a 	mov	r18,r2
   4b498:	80800b17 	ldw	r2,44(r16)
   4b49c:	10000426 	beq	r2,zero,4b4b0 <_fclose_r+0x78>
   4b4a0:	81400717 	ldw	r5,28(r16)
   4b4a4:	8809883a 	mov	r4,r17
   4b4a8:	103ee83a 	callr	r2
   4b4ac:	10001616 	blt	r2,zero,4b508 <_fclose_r+0xd0>
   4b4b0:	8080030b 	ldhu	r2,12(r16)
   4b4b4:	1080200c 	andi	r2,r2,128
   4b4b8:	1000151e 	bne	r2,zero,4b510 <_fclose_r+0xd8>
   4b4bc:	81400c17 	ldw	r5,48(r16)
   4b4c0:	28000526 	beq	r5,zero,4b4d8 <_fclose_r+0xa0>
   4b4c4:	80801004 	addi	r2,r16,64
   4b4c8:	28800226 	beq	r5,r2,4b4d4 <_fclose_r+0x9c>
   4b4cc:	8809883a 	mov	r4,r17
   4b4d0:	00478540 	call	47854 <_free_r>
   4b4d4:	80000c15 	stw	zero,48(r16)
   4b4d8:	81401117 	ldw	r5,68(r16)
   4b4dc:	28000326 	beq	r5,zero,4b4ec <_fclose_r+0xb4>
   4b4e0:	8809883a 	mov	r4,r17
   4b4e4:	00478540 	call	47854 <_free_r>
   4b4e8:	80001115 	stw	zero,68(r16)
   4b4ec:	00476f00 	call	476f0 <__sfp_lock_acquire>
   4b4f0:	8000030d 	sth	zero,12(r16)
   4b4f4:	00476f40 	call	476f4 <__sfp_lock_release>
   4b4f8:	9005883a 	mov	r2,r18
   4b4fc:	003fdc06 	br	4b470 <__alt_data_end+0xfffcb470>
   4b500:	00476e00 	call	476e0 <__sinit>
   4b504:	003fd706 	br	4b464 <__alt_data_end+0xfffcb464>
   4b508:	04bfffc4 	movi	r18,-1
   4b50c:	003fe806 	br	4b4b0 <__alt_data_end+0xfffcb4b0>
   4b510:	81400417 	ldw	r5,16(r16)
   4b514:	8809883a 	mov	r4,r17
   4b518:	00478540 	call	47854 <_free_r>
   4b51c:	003fe706 	br	4b4bc <__alt_data_end+0xfffcb4bc>
   4b520:	0005883a 	mov	r2,zero
   4b524:	f800283a 	ret

0004b528 <fclose>:
   4b528:	00800174 	movhi	r2,5
   4b52c:	10882a04 	addi	r2,r2,8360
   4b530:	200b883a 	mov	r5,r4
   4b534:	11000017 	ldw	r4,0(r2)
   4b538:	004b4381 	jmpi	4b438 <_fclose_r>

0004b53c <__fputwc>:
   4b53c:	defff804 	addi	sp,sp,-32
   4b540:	dcc00415 	stw	r19,16(sp)
   4b544:	dc800315 	stw	r18,12(sp)
   4b548:	dc000115 	stw	r16,4(sp)
   4b54c:	dfc00715 	stw	ra,28(sp)
   4b550:	dd400615 	stw	r21,24(sp)
   4b554:	dd000515 	stw	r20,20(sp)
   4b558:	dc400215 	stw	r17,8(sp)
   4b55c:	2027883a 	mov	r19,r4
   4b560:	2825883a 	mov	r18,r5
   4b564:	3021883a 	mov	r16,r6
   4b568:	0047d740 	call	47d74 <__locale_mb_cur_max>
   4b56c:	00c00044 	movi	r3,1
   4b570:	10c03e26 	beq	r2,r3,4b66c <__fputwc+0x130>
   4b574:	81c01704 	addi	r7,r16,92
   4b578:	900d883a 	mov	r6,r18
   4b57c:	d80b883a 	mov	r5,sp
   4b580:	9809883a 	mov	r4,r19
   4b584:	004c4300 	call	4c430 <_wcrtomb_r>
   4b588:	1029883a 	mov	r20,r2
   4b58c:	00bfffc4 	movi	r2,-1
   4b590:	a0802026 	beq	r20,r2,4b614 <__fputwc+0xd8>
   4b594:	d9400003 	ldbu	r5,0(sp)
   4b598:	a0001c26 	beq	r20,zero,4b60c <__fputwc+0xd0>
   4b59c:	0023883a 	mov	r17,zero
   4b5a0:	05400284 	movi	r21,10
   4b5a4:	00000906 	br	4b5cc <__fputwc+0x90>
   4b5a8:	80800017 	ldw	r2,0(r16)
   4b5ac:	11400005 	stb	r5,0(r2)
   4b5b0:	80c00017 	ldw	r3,0(r16)
   4b5b4:	18c00044 	addi	r3,r3,1
   4b5b8:	80c00015 	stw	r3,0(r16)
   4b5bc:	8c400044 	addi	r17,r17,1
   4b5c0:	dc45883a 	add	r2,sp,r17
   4b5c4:	8d00112e 	bgeu	r17,r20,4b60c <__fputwc+0xd0>
   4b5c8:	11400003 	ldbu	r5,0(r2)
   4b5cc:	80c00217 	ldw	r3,8(r16)
   4b5d0:	18ffffc4 	addi	r3,r3,-1
   4b5d4:	80c00215 	stw	r3,8(r16)
   4b5d8:	183ff30e 	bge	r3,zero,4b5a8 <__alt_data_end+0xfffcb5a8>
   4b5dc:	80800617 	ldw	r2,24(r16)
   4b5e0:	18801916 	blt	r3,r2,4b648 <__fputwc+0x10c>
   4b5e4:	80800017 	ldw	r2,0(r16)
   4b5e8:	11400005 	stb	r5,0(r2)
   4b5ec:	80800017 	ldw	r2,0(r16)
   4b5f0:	10c00003 	ldbu	r3,0(r2)
   4b5f4:	10800044 	addi	r2,r2,1
   4b5f8:	1d402326 	beq	r3,r21,4b688 <__fputwc+0x14c>
   4b5fc:	80800015 	stw	r2,0(r16)
   4b600:	8c400044 	addi	r17,r17,1
   4b604:	dc45883a 	add	r2,sp,r17
   4b608:	8d3fef36 	bltu	r17,r20,4b5c8 <__alt_data_end+0xfffcb5c8>
   4b60c:	9005883a 	mov	r2,r18
   4b610:	00000406 	br	4b624 <__fputwc+0xe8>
   4b614:	80c0030b 	ldhu	r3,12(r16)
   4b618:	a005883a 	mov	r2,r20
   4b61c:	18c01014 	ori	r3,r3,64
   4b620:	80c0030d 	sth	r3,12(r16)
   4b624:	dfc00717 	ldw	ra,28(sp)
   4b628:	dd400617 	ldw	r21,24(sp)
   4b62c:	dd000517 	ldw	r20,20(sp)
   4b630:	dcc00417 	ldw	r19,16(sp)
   4b634:	dc800317 	ldw	r18,12(sp)
   4b638:	dc400217 	ldw	r17,8(sp)
   4b63c:	dc000117 	ldw	r16,4(sp)
   4b640:	dec00804 	addi	sp,sp,32
   4b644:	f800283a 	ret
   4b648:	800d883a 	mov	r6,r16
   4b64c:	29403fcc 	andi	r5,r5,255
   4b650:	9809883a 	mov	r4,r19
   4b654:	004531c0 	call	4531c <__swbuf_r>
   4b658:	10bfffe0 	cmpeqi	r2,r2,-1
   4b65c:	10803fcc 	andi	r2,r2,255
   4b660:	103fd626 	beq	r2,zero,4b5bc <__alt_data_end+0xfffcb5bc>
   4b664:	00bfffc4 	movi	r2,-1
   4b668:	003fee06 	br	4b624 <__alt_data_end+0xfffcb624>
   4b66c:	90ffffc4 	addi	r3,r18,-1
   4b670:	01003f84 	movi	r4,254
   4b674:	20ffbf36 	bltu	r4,r3,4b574 <__alt_data_end+0xfffcb574>
   4b678:	900b883a 	mov	r5,r18
   4b67c:	dc800005 	stb	r18,0(sp)
   4b680:	1029883a 	mov	r20,r2
   4b684:	003fc506 	br	4b59c <__alt_data_end+0xfffcb59c>
   4b688:	800d883a 	mov	r6,r16
   4b68c:	a80b883a 	mov	r5,r21
   4b690:	9809883a 	mov	r4,r19
   4b694:	004531c0 	call	4531c <__swbuf_r>
   4b698:	10bfffe0 	cmpeqi	r2,r2,-1
   4b69c:	003fef06 	br	4b65c <__alt_data_end+0xfffcb65c>

0004b6a0 <_fputwc_r>:
   4b6a0:	3080030b 	ldhu	r2,12(r6)
   4b6a4:	10c8000c 	andi	r3,r2,8192
   4b6a8:	1800051e 	bne	r3,zero,4b6c0 <_fputwc_r+0x20>
   4b6ac:	30c01917 	ldw	r3,100(r6)
   4b6b0:	10880014 	ori	r2,r2,8192
   4b6b4:	3080030d 	sth	r2,12(r6)
   4b6b8:	18880014 	ori	r2,r3,8192
   4b6bc:	30801915 	stw	r2,100(r6)
   4b6c0:	004b53c1 	jmpi	4b53c <__fputwc>

0004b6c4 <fputwc>:
   4b6c4:	00800174 	movhi	r2,5
   4b6c8:	defffc04 	addi	sp,sp,-16
   4b6cc:	10882a04 	addi	r2,r2,8360
   4b6d0:	dc000115 	stw	r16,4(sp)
   4b6d4:	14000017 	ldw	r16,0(r2)
   4b6d8:	dc400215 	stw	r17,8(sp)
   4b6dc:	dfc00315 	stw	ra,12(sp)
   4b6e0:	2023883a 	mov	r17,r4
   4b6e4:	80000226 	beq	r16,zero,4b6f0 <fputwc+0x2c>
   4b6e8:	80800e17 	ldw	r2,56(r16)
   4b6ec:	10001026 	beq	r2,zero,4b730 <fputwc+0x6c>
   4b6f0:	2880030b 	ldhu	r2,12(r5)
   4b6f4:	10c8000c 	andi	r3,r2,8192
   4b6f8:	1800051e 	bne	r3,zero,4b710 <fputwc+0x4c>
   4b6fc:	28c01917 	ldw	r3,100(r5)
   4b700:	10880014 	ori	r2,r2,8192
   4b704:	2880030d 	sth	r2,12(r5)
   4b708:	18880014 	ori	r2,r3,8192
   4b70c:	28801915 	stw	r2,100(r5)
   4b710:	280d883a 	mov	r6,r5
   4b714:	8009883a 	mov	r4,r16
   4b718:	880b883a 	mov	r5,r17
   4b71c:	dfc00317 	ldw	ra,12(sp)
   4b720:	dc400217 	ldw	r17,8(sp)
   4b724:	dc000117 	ldw	r16,4(sp)
   4b728:	dec00404 	addi	sp,sp,16
   4b72c:	004b53c1 	jmpi	4b53c <__fputwc>
   4b730:	8009883a 	mov	r4,r16
   4b734:	d9400015 	stw	r5,0(sp)
   4b738:	00476e00 	call	476e0 <__sinit>
   4b73c:	d9400017 	ldw	r5,0(sp)
   4b740:	003feb06 	br	4b6f0 <__alt_data_end+0xfffcb6f0>

0004b744 <_fstat_r>:
   4b744:	defffd04 	addi	sp,sp,-12
   4b748:	2805883a 	mov	r2,r5
   4b74c:	dc000015 	stw	r16,0(sp)
   4b750:	04000174 	movhi	r16,5
   4b754:	dc400115 	stw	r17,4(sp)
   4b758:	840ef404 	addi	r16,r16,15312
   4b75c:	2023883a 	mov	r17,r4
   4b760:	300b883a 	mov	r5,r6
   4b764:	1009883a 	mov	r4,r2
   4b768:	dfc00215 	stw	ra,8(sp)
   4b76c:	80000015 	stw	zero,0(r16)
   4b770:	004f9c40 	call	4f9c4 <fstat>
   4b774:	00ffffc4 	movi	r3,-1
   4b778:	10c00526 	beq	r2,r3,4b790 <_fstat_r+0x4c>
   4b77c:	dfc00217 	ldw	ra,8(sp)
   4b780:	dc400117 	ldw	r17,4(sp)
   4b784:	dc000017 	ldw	r16,0(sp)
   4b788:	dec00304 	addi	sp,sp,12
   4b78c:	f800283a 	ret
   4b790:	80c00017 	ldw	r3,0(r16)
   4b794:	183ff926 	beq	r3,zero,4b77c <__alt_data_end+0xfffcb77c>
   4b798:	88c00015 	stw	r3,0(r17)
   4b79c:	003ff706 	br	4b77c <__alt_data_end+0xfffcb77c>

0004b7a0 <__sfvwrite_r>:
   4b7a0:	30800217 	ldw	r2,8(r6)
   4b7a4:	10006726 	beq	r2,zero,4b944 <__sfvwrite_r+0x1a4>
   4b7a8:	28c0030b 	ldhu	r3,12(r5)
   4b7ac:	defff404 	addi	sp,sp,-48
   4b7b0:	dd400715 	stw	r21,28(sp)
   4b7b4:	dd000615 	stw	r20,24(sp)
   4b7b8:	dc000215 	stw	r16,8(sp)
   4b7bc:	dfc00b15 	stw	ra,44(sp)
   4b7c0:	df000a15 	stw	fp,40(sp)
   4b7c4:	ddc00915 	stw	r23,36(sp)
   4b7c8:	dd800815 	stw	r22,32(sp)
   4b7cc:	dcc00515 	stw	r19,20(sp)
   4b7d0:	dc800415 	stw	r18,16(sp)
   4b7d4:	dc400315 	stw	r17,12(sp)
   4b7d8:	1880020c 	andi	r2,r3,8
   4b7dc:	2821883a 	mov	r16,r5
   4b7e0:	202b883a 	mov	r21,r4
   4b7e4:	3029883a 	mov	r20,r6
   4b7e8:	10002726 	beq	r2,zero,4b888 <__sfvwrite_r+0xe8>
   4b7ec:	28800417 	ldw	r2,16(r5)
   4b7f0:	10002526 	beq	r2,zero,4b888 <__sfvwrite_r+0xe8>
   4b7f4:	1880008c 	andi	r2,r3,2
   4b7f8:	a4400017 	ldw	r17,0(r20)
   4b7fc:	10002a26 	beq	r2,zero,4b8a8 <__sfvwrite_r+0x108>
   4b800:	05a00034 	movhi	r22,32768
   4b804:	0027883a 	mov	r19,zero
   4b808:	0025883a 	mov	r18,zero
   4b80c:	b5bf0004 	addi	r22,r22,-1024
   4b810:	980d883a 	mov	r6,r19
   4b814:	a809883a 	mov	r4,r21
   4b818:	90004626 	beq	r18,zero,4b934 <__sfvwrite_r+0x194>
   4b81c:	900f883a 	mov	r7,r18
   4b820:	b480022e 	bgeu	r22,r18,4b82c <__sfvwrite_r+0x8c>
   4b824:	01e00034 	movhi	r7,32768
   4b828:	39ff0004 	addi	r7,r7,-1024
   4b82c:	80800917 	ldw	r2,36(r16)
   4b830:	81400717 	ldw	r5,28(r16)
   4b834:	103ee83a 	callr	r2
   4b838:	0080570e 	bge	zero,r2,4b998 <__sfvwrite_r+0x1f8>
   4b83c:	a0c00217 	ldw	r3,8(r20)
   4b840:	98a7883a 	add	r19,r19,r2
   4b844:	90a5c83a 	sub	r18,r18,r2
   4b848:	1885c83a 	sub	r2,r3,r2
   4b84c:	a0800215 	stw	r2,8(r20)
   4b850:	103fef1e 	bne	r2,zero,4b810 <__alt_data_end+0xfffcb810>
   4b854:	0005883a 	mov	r2,zero
   4b858:	dfc00b17 	ldw	ra,44(sp)
   4b85c:	df000a17 	ldw	fp,40(sp)
   4b860:	ddc00917 	ldw	r23,36(sp)
   4b864:	dd800817 	ldw	r22,32(sp)
   4b868:	dd400717 	ldw	r21,28(sp)
   4b86c:	dd000617 	ldw	r20,24(sp)
   4b870:	dcc00517 	ldw	r19,20(sp)
   4b874:	dc800417 	ldw	r18,16(sp)
   4b878:	dc400317 	ldw	r17,12(sp)
   4b87c:	dc000217 	ldw	r16,8(sp)
   4b880:	dec00c04 	addi	sp,sp,48
   4b884:	f800283a 	ret
   4b888:	800b883a 	mov	r5,r16
   4b88c:	a809883a 	mov	r4,r21
   4b890:	00454740 	call	45474 <__swsetup_r>
   4b894:	1000eb1e 	bne	r2,zero,4bc44 <__sfvwrite_r+0x4a4>
   4b898:	80c0030b 	ldhu	r3,12(r16)
   4b89c:	a4400017 	ldw	r17,0(r20)
   4b8a0:	1880008c 	andi	r2,r3,2
   4b8a4:	103fd61e 	bne	r2,zero,4b800 <__alt_data_end+0xfffcb800>
   4b8a8:	1880004c 	andi	r2,r3,1
   4b8ac:	10003f1e 	bne	r2,zero,4b9ac <__sfvwrite_r+0x20c>
   4b8b0:	0039883a 	mov	fp,zero
   4b8b4:	0025883a 	mov	r18,zero
   4b8b8:	90001a26 	beq	r18,zero,4b924 <__sfvwrite_r+0x184>
   4b8bc:	1880800c 	andi	r2,r3,512
   4b8c0:	84c00217 	ldw	r19,8(r16)
   4b8c4:	10002126 	beq	r2,zero,4b94c <__sfvwrite_r+0x1ac>
   4b8c8:	982f883a 	mov	r23,r19
   4b8cc:	94c09336 	bltu	r18,r19,4bb1c <__sfvwrite_r+0x37c>
   4b8d0:	1881200c 	andi	r2,r3,1152
   4b8d4:	10009e1e 	bne	r2,zero,4bb50 <__sfvwrite_r+0x3b0>
   4b8d8:	81000017 	ldw	r4,0(r16)
   4b8dc:	b80d883a 	mov	r6,r23
   4b8e0:	e00b883a 	mov	r5,fp
   4b8e4:	004bd100 	call	4bd10 <memmove>
   4b8e8:	80c00217 	ldw	r3,8(r16)
   4b8ec:	81000017 	ldw	r4,0(r16)
   4b8f0:	9005883a 	mov	r2,r18
   4b8f4:	1ce7c83a 	sub	r19,r3,r19
   4b8f8:	25cf883a 	add	r7,r4,r23
   4b8fc:	84c00215 	stw	r19,8(r16)
   4b900:	81c00015 	stw	r7,0(r16)
   4b904:	a0c00217 	ldw	r3,8(r20)
   4b908:	e0b9883a 	add	fp,fp,r2
   4b90c:	90a5c83a 	sub	r18,r18,r2
   4b910:	18a7c83a 	sub	r19,r3,r2
   4b914:	a4c00215 	stw	r19,8(r20)
   4b918:	983fce26 	beq	r19,zero,4b854 <__alt_data_end+0xfffcb854>
   4b91c:	80c0030b 	ldhu	r3,12(r16)
   4b920:	903fe61e 	bne	r18,zero,4b8bc <__alt_data_end+0xfffcb8bc>
   4b924:	8f000017 	ldw	fp,0(r17)
   4b928:	8c800117 	ldw	r18,4(r17)
   4b92c:	8c400204 	addi	r17,r17,8
   4b930:	003fe106 	br	4b8b8 <__alt_data_end+0xfffcb8b8>
   4b934:	8cc00017 	ldw	r19,0(r17)
   4b938:	8c800117 	ldw	r18,4(r17)
   4b93c:	8c400204 	addi	r17,r17,8
   4b940:	003fb306 	br	4b810 <__alt_data_end+0xfffcb810>
   4b944:	0005883a 	mov	r2,zero
   4b948:	f800283a 	ret
   4b94c:	81000017 	ldw	r4,0(r16)
   4b950:	80800417 	ldw	r2,16(r16)
   4b954:	11005736 	bltu	r2,r4,4bab4 <__sfvwrite_r+0x314>
   4b958:	85c00517 	ldw	r23,20(r16)
   4b95c:	95c05536 	bltu	r18,r23,4bab4 <__sfvwrite_r+0x314>
   4b960:	00a00034 	movhi	r2,32768
   4b964:	10bfffc4 	addi	r2,r2,-1
   4b968:	9009883a 	mov	r4,r18
   4b96c:	1480012e 	bgeu	r2,r18,4b974 <__sfvwrite_r+0x1d4>
   4b970:	1009883a 	mov	r4,r2
   4b974:	b80b883a 	mov	r5,r23
   4b978:	004d1380 	call	4d138 <__divsi3>
   4b97c:	15cf383a 	mul	r7,r2,r23
   4b980:	81400717 	ldw	r5,28(r16)
   4b984:	80800917 	ldw	r2,36(r16)
   4b988:	e00d883a 	mov	r6,fp
   4b98c:	a809883a 	mov	r4,r21
   4b990:	103ee83a 	callr	r2
   4b994:	00bfdb16 	blt	zero,r2,4b904 <__alt_data_end+0xfffcb904>
   4b998:	8080030b 	ldhu	r2,12(r16)
   4b99c:	10801014 	ori	r2,r2,64
   4b9a0:	8080030d 	sth	r2,12(r16)
   4b9a4:	00bfffc4 	movi	r2,-1
   4b9a8:	003fab06 	br	4b858 <__alt_data_end+0xfffcb858>
   4b9ac:	0027883a 	mov	r19,zero
   4b9b0:	0011883a 	mov	r8,zero
   4b9b4:	0039883a 	mov	fp,zero
   4b9b8:	0025883a 	mov	r18,zero
   4b9bc:	90001f26 	beq	r18,zero,4ba3c <__sfvwrite_r+0x29c>
   4b9c0:	40005a26 	beq	r8,zero,4bb2c <__sfvwrite_r+0x38c>
   4b9c4:	982d883a 	mov	r22,r19
   4b9c8:	94c0012e 	bgeu	r18,r19,4b9d0 <__sfvwrite_r+0x230>
   4b9cc:	902d883a 	mov	r22,r18
   4b9d0:	81000017 	ldw	r4,0(r16)
   4b9d4:	80800417 	ldw	r2,16(r16)
   4b9d8:	b02f883a 	mov	r23,r22
   4b9dc:	81c00517 	ldw	r7,20(r16)
   4b9e0:	1100032e 	bgeu	r2,r4,4b9f0 <__sfvwrite_r+0x250>
   4b9e4:	80c00217 	ldw	r3,8(r16)
   4b9e8:	38c7883a 	add	r3,r7,r3
   4b9ec:	1d801816 	blt	r3,r22,4ba50 <__sfvwrite_r+0x2b0>
   4b9f0:	b1c03e16 	blt	r22,r7,4baec <__sfvwrite_r+0x34c>
   4b9f4:	80800917 	ldw	r2,36(r16)
   4b9f8:	81400717 	ldw	r5,28(r16)
   4b9fc:	e00d883a 	mov	r6,fp
   4ba00:	da000115 	stw	r8,4(sp)
   4ba04:	a809883a 	mov	r4,r21
   4ba08:	103ee83a 	callr	r2
   4ba0c:	102f883a 	mov	r23,r2
   4ba10:	da000117 	ldw	r8,4(sp)
   4ba14:	00bfe00e 	bge	zero,r2,4b998 <__alt_data_end+0xfffcb998>
   4ba18:	9de7c83a 	sub	r19,r19,r23
   4ba1c:	98001f26 	beq	r19,zero,4ba9c <__sfvwrite_r+0x2fc>
   4ba20:	a0800217 	ldw	r2,8(r20)
   4ba24:	e5f9883a 	add	fp,fp,r23
   4ba28:	95e5c83a 	sub	r18,r18,r23
   4ba2c:	15efc83a 	sub	r23,r2,r23
   4ba30:	a5c00215 	stw	r23,8(r20)
   4ba34:	b83f8726 	beq	r23,zero,4b854 <__alt_data_end+0xfffcb854>
   4ba38:	903fe11e 	bne	r18,zero,4b9c0 <__alt_data_end+0xfffcb9c0>
   4ba3c:	8f000017 	ldw	fp,0(r17)
   4ba40:	8c800117 	ldw	r18,4(r17)
   4ba44:	0011883a 	mov	r8,zero
   4ba48:	8c400204 	addi	r17,r17,8
   4ba4c:	003fdb06 	br	4b9bc <__alt_data_end+0xfffcb9bc>
   4ba50:	180d883a 	mov	r6,r3
   4ba54:	e00b883a 	mov	r5,fp
   4ba58:	da000115 	stw	r8,4(sp)
   4ba5c:	d8c00015 	stw	r3,0(sp)
   4ba60:	004bd100 	call	4bd10 <memmove>
   4ba64:	d8c00017 	ldw	r3,0(sp)
   4ba68:	80800017 	ldw	r2,0(r16)
   4ba6c:	800b883a 	mov	r5,r16
   4ba70:	a809883a 	mov	r4,r21
   4ba74:	10c5883a 	add	r2,r2,r3
   4ba78:	80800015 	stw	r2,0(r16)
   4ba7c:	d8c00015 	stw	r3,0(sp)
   4ba80:	00473040 	call	47304 <_fflush_r>
   4ba84:	d8c00017 	ldw	r3,0(sp)
   4ba88:	da000117 	ldw	r8,4(sp)
   4ba8c:	103fc21e 	bne	r2,zero,4b998 <__alt_data_end+0xfffcb998>
   4ba90:	182f883a 	mov	r23,r3
   4ba94:	9de7c83a 	sub	r19,r19,r23
   4ba98:	983fe11e 	bne	r19,zero,4ba20 <__alt_data_end+0xfffcba20>
   4ba9c:	800b883a 	mov	r5,r16
   4baa0:	a809883a 	mov	r4,r21
   4baa4:	00473040 	call	47304 <_fflush_r>
   4baa8:	103fbb1e 	bne	r2,zero,4b998 <__alt_data_end+0xfffcb998>
   4baac:	0011883a 	mov	r8,zero
   4bab0:	003fdb06 	br	4ba20 <__alt_data_end+0xfffcba20>
   4bab4:	94c0012e 	bgeu	r18,r19,4babc <__sfvwrite_r+0x31c>
   4bab8:	9027883a 	mov	r19,r18
   4babc:	980d883a 	mov	r6,r19
   4bac0:	e00b883a 	mov	r5,fp
   4bac4:	004bd100 	call	4bd10 <memmove>
   4bac8:	80800217 	ldw	r2,8(r16)
   4bacc:	80c00017 	ldw	r3,0(r16)
   4bad0:	14c5c83a 	sub	r2,r2,r19
   4bad4:	1cc7883a 	add	r3,r3,r19
   4bad8:	80800215 	stw	r2,8(r16)
   4badc:	80c00015 	stw	r3,0(r16)
   4bae0:	10004326 	beq	r2,zero,4bbf0 <__sfvwrite_r+0x450>
   4bae4:	9805883a 	mov	r2,r19
   4bae8:	003f8606 	br	4b904 <__alt_data_end+0xfffcb904>
   4baec:	b00d883a 	mov	r6,r22
   4baf0:	e00b883a 	mov	r5,fp
   4baf4:	da000115 	stw	r8,4(sp)
   4baf8:	004bd100 	call	4bd10 <memmove>
   4bafc:	80800217 	ldw	r2,8(r16)
   4bb00:	80c00017 	ldw	r3,0(r16)
   4bb04:	da000117 	ldw	r8,4(sp)
   4bb08:	1585c83a 	sub	r2,r2,r22
   4bb0c:	1dad883a 	add	r22,r3,r22
   4bb10:	80800215 	stw	r2,8(r16)
   4bb14:	85800015 	stw	r22,0(r16)
   4bb18:	003fbf06 	br	4ba18 <__alt_data_end+0xfffcba18>
   4bb1c:	81000017 	ldw	r4,0(r16)
   4bb20:	9027883a 	mov	r19,r18
   4bb24:	902f883a 	mov	r23,r18
   4bb28:	003f6c06 	br	4b8dc <__alt_data_end+0xfffcb8dc>
   4bb2c:	900d883a 	mov	r6,r18
   4bb30:	01400284 	movi	r5,10
   4bb34:	e009883a 	mov	r4,fp
   4bb38:	00487900 	call	48790 <memchr>
   4bb3c:	10003e26 	beq	r2,zero,4bc38 <__sfvwrite_r+0x498>
   4bb40:	10800044 	addi	r2,r2,1
   4bb44:	1727c83a 	sub	r19,r2,fp
   4bb48:	02000044 	movi	r8,1
   4bb4c:	003f9d06 	br	4b9c4 <__alt_data_end+0xfffcb9c4>
   4bb50:	80800517 	ldw	r2,20(r16)
   4bb54:	81400417 	ldw	r5,16(r16)
   4bb58:	81c00017 	ldw	r7,0(r16)
   4bb5c:	10a7883a 	add	r19,r2,r2
   4bb60:	9885883a 	add	r2,r19,r2
   4bb64:	1026d7fa 	srli	r19,r2,31
   4bb68:	396dc83a 	sub	r22,r7,r5
   4bb6c:	b1000044 	addi	r4,r22,1
   4bb70:	9885883a 	add	r2,r19,r2
   4bb74:	1027d07a 	srai	r19,r2,1
   4bb78:	2485883a 	add	r2,r4,r18
   4bb7c:	980d883a 	mov	r6,r19
   4bb80:	9880022e 	bgeu	r19,r2,4bb8c <__sfvwrite_r+0x3ec>
   4bb84:	1027883a 	mov	r19,r2
   4bb88:	100d883a 	mov	r6,r2
   4bb8c:	18c1000c 	andi	r3,r3,1024
   4bb90:	18001c26 	beq	r3,zero,4bc04 <__sfvwrite_r+0x464>
   4bb94:	300b883a 	mov	r5,r6
   4bb98:	a809883a 	mov	r4,r21
   4bb9c:	0047f840 	call	47f84 <_malloc_r>
   4bba0:	102f883a 	mov	r23,r2
   4bba4:	10002926 	beq	r2,zero,4bc4c <__sfvwrite_r+0x4ac>
   4bba8:	81400417 	ldw	r5,16(r16)
   4bbac:	b00d883a 	mov	r6,r22
   4bbb0:	1009883a 	mov	r4,r2
   4bbb4:	0042c980 	call	42c98 <memcpy>
   4bbb8:	8080030b 	ldhu	r2,12(r16)
   4bbbc:	00fedfc4 	movi	r3,-1153
   4bbc0:	10c4703a 	and	r2,r2,r3
   4bbc4:	10802014 	ori	r2,r2,128
   4bbc8:	8080030d 	sth	r2,12(r16)
   4bbcc:	bd89883a 	add	r4,r23,r22
   4bbd0:	9d8fc83a 	sub	r7,r19,r22
   4bbd4:	85c00415 	stw	r23,16(r16)
   4bbd8:	84c00515 	stw	r19,20(r16)
   4bbdc:	81000015 	stw	r4,0(r16)
   4bbe0:	9027883a 	mov	r19,r18
   4bbe4:	81c00215 	stw	r7,8(r16)
   4bbe8:	902f883a 	mov	r23,r18
   4bbec:	003f3b06 	br	4b8dc <__alt_data_end+0xfffcb8dc>
   4bbf0:	800b883a 	mov	r5,r16
   4bbf4:	a809883a 	mov	r4,r21
   4bbf8:	00473040 	call	47304 <_fflush_r>
   4bbfc:	103fb926 	beq	r2,zero,4bae4 <__alt_data_end+0xfffcbae4>
   4bc00:	003f6506 	br	4b998 <__alt_data_end+0xfffcb998>
   4bc04:	a809883a 	mov	r4,r21
   4bc08:	004becc0 	call	4becc <_realloc_r>
   4bc0c:	102f883a 	mov	r23,r2
   4bc10:	103fee1e 	bne	r2,zero,4bbcc <__alt_data_end+0xfffcbbcc>
   4bc14:	81400417 	ldw	r5,16(r16)
   4bc18:	a809883a 	mov	r4,r21
   4bc1c:	00478540 	call	47854 <_free_r>
   4bc20:	8080030b 	ldhu	r2,12(r16)
   4bc24:	00ffdfc4 	movi	r3,-129
   4bc28:	1884703a 	and	r2,r3,r2
   4bc2c:	00c00304 	movi	r3,12
   4bc30:	a8c00015 	stw	r3,0(r21)
   4bc34:	003f5906 	br	4b99c <__alt_data_end+0xfffcb99c>
   4bc38:	94c00044 	addi	r19,r18,1
   4bc3c:	02000044 	movi	r8,1
   4bc40:	003f6006 	br	4b9c4 <__alt_data_end+0xfffcb9c4>
   4bc44:	00bfffc4 	movi	r2,-1
   4bc48:	003f0306 	br	4b858 <__alt_data_end+0xfffcb858>
   4bc4c:	00800304 	movi	r2,12
   4bc50:	a8800015 	stw	r2,0(r21)
   4bc54:	8080030b 	ldhu	r2,12(r16)
   4bc58:	003f5006 	br	4b99c <__alt_data_end+0xfffcb99c>

0004bc5c <_isatty_r>:
   4bc5c:	defffd04 	addi	sp,sp,-12
   4bc60:	dc000015 	stw	r16,0(sp)
   4bc64:	04000174 	movhi	r16,5
   4bc68:	dc400115 	stw	r17,4(sp)
   4bc6c:	840ef404 	addi	r16,r16,15312
   4bc70:	2023883a 	mov	r17,r4
   4bc74:	2809883a 	mov	r4,r5
   4bc78:	dfc00215 	stw	ra,8(sp)
   4bc7c:	80000015 	stw	zero,0(r16)
   4bc80:	004fab00 	call	4fab0 <isatty>
   4bc84:	00ffffc4 	movi	r3,-1
   4bc88:	10c00526 	beq	r2,r3,4bca0 <_isatty_r+0x44>
   4bc8c:	dfc00217 	ldw	ra,8(sp)
   4bc90:	dc400117 	ldw	r17,4(sp)
   4bc94:	dc000017 	ldw	r16,0(sp)
   4bc98:	dec00304 	addi	sp,sp,12
   4bc9c:	f800283a 	ret
   4bca0:	80c00017 	ldw	r3,0(r16)
   4bca4:	183ff926 	beq	r3,zero,4bc8c <__alt_data_end+0xfffcbc8c>
   4bca8:	88c00015 	stw	r3,0(r17)
   4bcac:	003ff706 	br	4bc8c <__alt_data_end+0xfffcbc8c>

0004bcb0 <_lseek_r>:
   4bcb0:	defffd04 	addi	sp,sp,-12
   4bcb4:	2805883a 	mov	r2,r5
   4bcb8:	dc000015 	stw	r16,0(sp)
   4bcbc:	04000174 	movhi	r16,5
   4bcc0:	dc400115 	stw	r17,4(sp)
   4bcc4:	300b883a 	mov	r5,r6
   4bcc8:	840ef404 	addi	r16,r16,15312
   4bccc:	2023883a 	mov	r17,r4
   4bcd0:	380d883a 	mov	r6,r7
   4bcd4:	1009883a 	mov	r4,r2
   4bcd8:	dfc00215 	stw	ra,8(sp)
   4bcdc:	80000015 	stw	zero,0(r16)
   4bce0:	004fb900 	call	4fb90 <lseek>
   4bce4:	00ffffc4 	movi	r3,-1
   4bce8:	10c00526 	beq	r2,r3,4bd00 <_lseek_r+0x50>
   4bcec:	dfc00217 	ldw	ra,8(sp)
   4bcf0:	dc400117 	ldw	r17,4(sp)
   4bcf4:	dc000017 	ldw	r16,0(sp)
   4bcf8:	dec00304 	addi	sp,sp,12
   4bcfc:	f800283a 	ret
   4bd00:	80c00017 	ldw	r3,0(r16)
   4bd04:	183ff926 	beq	r3,zero,4bcec <__alt_data_end+0xfffcbcec>
   4bd08:	88c00015 	stw	r3,0(r17)
   4bd0c:	003ff706 	br	4bcec <__alt_data_end+0xfffcbcec>

0004bd10 <memmove>:
   4bd10:	2005883a 	mov	r2,r4
   4bd14:	29000b2e 	bgeu	r5,r4,4bd44 <memmove+0x34>
   4bd18:	298f883a 	add	r7,r5,r6
   4bd1c:	21c0092e 	bgeu	r4,r7,4bd44 <memmove+0x34>
   4bd20:	2187883a 	add	r3,r4,r6
   4bd24:	198bc83a 	sub	r5,r3,r6
   4bd28:	30004826 	beq	r6,zero,4be4c <memmove+0x13c>
   4bd2c:	39ffffc4 	addi	r7,r7,-1
   4bd30:	39000003 	ldbu	r4,0(r7)
   4bd34:	18ffffc4 	addi	r3,r3,-1
   4bd38:	19000005 	stb	r4,0(r3)
   4bd3c:	28fffb1e 	bne	r5,r3,4bd2c <__alt_data_end+0xfffcbd2c>
   4bd40:	f800283a 	ret
   4bd44:	00c003c4 	movi	r3,15
   4bd48:	1980412e 	bgeu	r3,r6,4be50 <memmove+0x140>
   4bd4c:	2886b03a 	or	r3,r5,r2
   4bd50:	18c000cc 	andi	r3,r3,3
   4bd54:	1800401e 	bne	r3,zero,4be58 <memmove+0x148>
   4bd58:	33fffc04 	addi	r15,r6,-16
   4bd5c:	781ed13a 	srli	r15,r15,4
   4bd60:	28c00104 	addi	r3,r5,4
   4bd64:	13400104 	addi	r13,r2,4
   4bd68:	781c913a 	slli	r14,r15,4
   4bd6c:	2b000204 	addi	r12,r5,8
   4bd70:	12c00204 	addi	r11,r2,8
   4bd74:	73800504 	addi	r14,r14,20
   4bd78:	2a800304 	addi	r10,r5,12
   4bd7c:	12400304 	addi	r9,r2,12
   4bd80:	2b9d883a 	add	r14,r5,r14
   4bd84:	2811883a 	mov	r8,r5
   4bd88:	100f883a 	mov	r7,r2
   4bd8c:	41000017 	ldw	r4,0(r8)
   4bd90:	39c00404 	addi	r7,r7,16
   4bd94:	18c00404 	addi	r3,r3,16
   4bd98:	393ffc15 	stw	r4,-16(r7)
   4bd9c:	193ffc17 	ldw	r4,-16(r3)
   4bda0:	6b400404 	addi	r13,r13,16
   4bda4:	5ac00404 	addi	r11,r11,16
   4bda8:	693ffc15 	stw	r4,-16(r13)
   4bdac:	61000017 	ldw	r4,0(r12)
   4bdb0:	4a400404 	addi	r9,r9,16
   4bdb4:	42000404 	addi	r8,r8,16
   4bdb8:	593ffc15 	stw	r4,-16(r11)
   4bdbc:	51000017 	ldw	r4,0(r10)
   4bdc0:	63000404 	addi	r12,r12,16
   4bdc4:	52800404 	addi	r10,r10,16
   4bdc8:	493ffc15 	stw	r4,-16(r9)
   4bdcc:	1bbfef1e 	bne	r3,r14,4bd8c <__alt_data_end+0xfffcbd8c>
   4bdd0:	79000044 	addi	r4,r15,1
   4bdd4:	2008913a 	slli	r4,r4,4
   4bdd8:	328003cc 	andi	r10,r6,15
   4bddc:	02c000c4 	movi	r11,3
   4bde0:	1107883a 	add	r3,r2,r4
   4bde4:	290b883a 	add	r5,r5,r4
   4bde8:	5a801e2e 	bgeu	r11,r10,4be64 <memmove+0x154>
   4bdec:	1813883a 	mov	r9,r3
   4bdf0:	2811883a 	mov	r8,r5
   4bdf4:	500f883a 	mov	r7,r10
   4bdf8:	41000017 	ldw	r4,0(r8)
   4bdfc:	4a400104 	addi	r9,r9,4
   4be00:	39ffff04 	addi	r7,r7,-4
   4be04:	493fff15 	stw	r4,-4(r9)
   4be08:	42000104 	addi	r8,r8,4
   4be0c:	59fffa36 	bltu	r11,r7,4bdf8 <__alt_data_end+0xfffcbdf8>
   4be10:	513fff04 	addi	r4,r10,-4
   4be14:	2008d0ba 	srli	r4,r4,2
   4be18:	318000cc 	andi	r6,r6,3
   4be1c:	21000044 	addi	r4,r4,1
   4be20:	2109883a 	add	r4,r4,r4
   4be24:	2109883a 	add	r4,r4,r4
   4be28:	1907883a 	add	r3,r3,r4
   4be2c:	290b883a 	add	r5,r5,r4
   4be30:	30000b26 	beq	r6,zero,4be60 <memmove+0x150>
   4be34:	198d883a 	add	r6,r3,r6
   4be38:	29c00003 	ldbu	r7,0(r5)
   4be3c:	18c00044 	addi	r3,r3,1
   4be40:	29400044 	addi	r5,r5,1
   4be44:	19ffffc5 	stb	r7,-1(r3)
   4be48:	19bffb1e 	bne	r3,r6,4be38 <__alt_data_end+0xfffcbe38>
   4be4c:	f800283a 	ret
   4be50:	1007883a 	mov	r3,r2
   4be54:	003ff606 	br	4be30 <__alt_data_end+0xfffcbe30>
   4be58:	1007883a 	mov	r3,r2
   4be5c:	003ff506 	br	4be34 <__alt_data_end+0xfffcbe34>
   4be60:	f800283a 	ret
   4be64:	500d883a 	mov	r6,r10
   4be68:	003ff106 	br	4be30 <__alt_data_end+0xfffcbe30>

0004be6c <_read_r>:
   4be6c:	defffd04 	addi	sp,sp,-12
   4be70:	2805883a 	mov	r2,r5
   4be74:	dc000015 	stw	r16,0(sp)
   4be78:	04000174 	movhi	r16,5
   4be7c:	dc400115 	stw	r17,4(sp)
   4be80:	300b883a 	mov	r5,r6
   4be84:	840ef404 	addi	r16,r16,15312
   4be88:	2023883a 	mov	r17,r4
   4be8c:	380d883a 	mov	r6,r7
   4be90:	1009883a 	mov	r4,r2
   4be94:	dfc00215 	stw	ra,8(sp)
   4be98:	80000015 	stw	zero,0(r16)
   4be9c:	004fce80 	call	4fce8 <read>
   4bea0:	00ffffc4 	movi	r3,-1
   4bea4:	10c00526 	beq	r2,r3,4bebc <_read_r+0x50>
   4bea8:	dfc00217 	ldw	ra,8(sp)
   4beac:	dc400117 	ldw	r17,4(sp)
   4beb0:	dc000017 	ldw	r16,0(sp)
   4beb4:	dec00304 	addi	sp,sp,12
   4beb8:	f800283a 	ret
   4bebc:	80c00017 	ldw	r3,0(r16)
   4bec0:	183ff926 	beq	r3,zero,4bea8 <__alt_data_end+0xfffcbea8>
   4bec4:	88c00015 	stw	r3,0(r17)
   4bec8:	003ff706 	br	4bea8 <__alt_data_end+0xfffcbea8>

0004becc <_realloc_r>:
   4becc:	defff604 	addi	sp,sp,-40
   4bed0:	dc800215 	stw	r18,8(sp)
   4bed4:	dfc00915 	stw	ra,36(sp)
   4bed8:	df000815 	stw	fp,32(sp)
   4bedc:	ddc00715 	stw	r23,28(sp)
   4bee0:	dd800615 	stw	r22,24(sp)
   4bee4:	dd400515 	stw	r21,20(sp)
   4bee8:	dd000415 	stw	r20,16(sp)
   4beec:	dcc00315 	stw	r19,12(sp)
   4bef0:	dc400115 	stw	r17,4(sp)
   4bef4:	dc000015 	stw	r16,0(sp)
   4bef8:	3025883a 	mov	r18,r6
   4befc:	2800b726 	beq	r5,zero,4c1dc <_realloc_r+0x310>
   4bf00:	282b883a 	mov	r21,r5
   4bf04:	2029883a 	mov	r20,r4
   4bf08:	004fc640 	call	4fc64 <__malloc_lock>
   4bf0c:	a8bfff17 	ldw	r2,-4(r21)
   4bf10:	043fff04 	movi	r16,-4
   4bf14:	90c002c4 	addi	r3,r18,11
   4bf18:	01000584 	movi	r4,22
   4bf1c:	acfffe04 	addi	r19,r21,-8
   4bf20:	1420703a 	and	r16,r2,r16
   4bf24:	20c0332e 	bgeu	r4,r3,4bff4 <_realloc_r+0x128>
   4bf28:	047ffe04 	movi	r17,-8
   4bf2c:	1c62703a 	and	r17,r3,r17
   4bf30:	8807883a 	mov	r3,r17
   4bf34:	88005816 	blt	r17,zero,4c098 <_realloc_r+0x1cc>
   4bf38:	8c805736 	bltu	r17,r18,4c098 <_realloc_r+0x1cc>
   4bf3c:	80c0300e 	bge	r16,r3,4c000 <_realloc_r+0x134>
   4bf40:	07000174 	movhi	fp,5
   4bf44:	e7071c04 	addi	fp,fp,7280
   4bf48:	e1c00217 	ldw	r7,8(fp)
   4bf4c:	9c09883a 	add	r4,r19,r16
   4bf50:	22000117 	ldw	r8,4(r4)
   4bf54:	21c06326 	beq	r4,r7,4c0e4 <_realloc_r+0x218>
   4bf58:	017fff84 	movi	r5,-2
   4bf5c:	414a703a 	and	r5,r8,r5
   4bf60:	214b883a 	add	r5,r4,r5
   4bf64:	29800117 	ldw	r6,4(r5)
   4bf68:	3180004c 	andi	r6,r6,1
   4bf6c:	30003f26 	beq	r6,zero,4c06c <_realloc_r+0x1a0>
   4bf70:	1080004c 	andi	r2,r2,1
   4bf74:	10008326 	beq	r2,zero,4c184 <_realloc_r+0x2b8>
   4bf78:	900b883a 	mov	r5,r18
   4bf7c:	a009883a 	mov	r4,r20
   4bf80:	0047f840 	call	47f84 <_malloc_r>
   4bf84:	1025883a 	mov	r18,r2
   4bf88:	10011e26 	beq	r2,zero,4c404 <_realloc_r+0x538>
   4bf8c:	a93fff17 	ldw	r4,-4(r21)
   4bf90:	10fffe04 	addi	r3,r2,-8
   4bf94:	00bfff84 	movi	r2,-2
   4bf98:	2084703a 	and	r2,r4,r2
   4bf9c:	9885883a 	add	r2,r19,r2
   4bfa0:	1880ee26 	beq	r3,r2,4c35c <_realloc_r+0x490>
   4bfa4:	81bfff04 	addi	r6,r16,-4
   4bfa8:	00800904 	movi	r2,36
   4bfac:	1180b836 	bltu	r2,r6,4c290 <_realloc_r+0x3c4>
   4bfb0:	00c004c4 	movi	r3,19
   4bfb4:	19809636 	bltu	r3,r6,4c210 <_realloc_r+0x344>
   4bfb8:	9005883a 	mov	r2,r18
   4bfbc:	a807883a 	mov	r3,r21
   4bfc0:	19000017 	ldw	r4,0(r3)
   4bfc4:	11000015 	stw	r4,0(r2)
   4bfc8:	19000117 	ldw	r4,4(r3)
   4bfcc:	11000115 	stw	r4,4(r2)
   4bfd0:	18c00217 	ldw	r3,8(r3)
   4bfd4:	10c00215 	stw	r3,8(r2)
   4bfd8:	a80b883a 	mov	r5,r21
   4bfdc:	a009883a 	mov	r4,r20
   4bfe0:	00478540 	call	47854 <_free_r>
   4bfe4:	a009883a 	mov	r4,r20
   4bfe8:	004fc880 	call	4fc88 <__malloc_unlock>
   4bfec:	9005883a 	mov	r2,r18
   4bff0:	00001206 	br	4c03c <_realloc_r+0x170>
   4bff4:	00c00404 	movi	r3,16
   4bff8:	1823883a 	mov	r17,r3
   4bffc:	003fce06 	br	4bf38 <__alt_data_end+0xfffcbf38>
   4c000:	a825883a 	mov	r18,r21
   4c004:	8445c83a 	sub	r2,r16,r17
   4c008:	00c003c4 	movi	r3,15
   4c00c:	18802636 	bltu	r3,r2,4c0a8 <_realloc_r+0x1dc>
   4c010:	99800117 	ldw	r6,4(r19)
   4c014:	9c07883a 	add	r3,r19,r16
   4c018:	3180004c 	andi	r6,r6,1
   4c01c:	3420b03a 	or	r16,r6,r16
   4c020:	9c000115 	stw	r16,4(r19)
   4c024:	18800117 	ldw	r2,4(r3)
   4c028:	10800054 	ori	r2,r2,1
   4c02c:	18800115 	stw	r2,4(r3)
   4c030:	a009883a 	mov	r4,r20
   4c034:	004fc880 	call	4fc88 <__malloc_unlock>
   4c038:	9005883a 	mov	r2,r18
   4c03c:	dfc00917 	ldw	ra,36(sp)
   4c040:	df000817 	ldw	fp,32(sp)
   4c044:	ddc00717 	ldw	r23,28(sp)
   4c048:	dd800617 	ldw	r22,24(sp)
   4c04c:	dd400517 	ldw	r21,20(sp)
   4c050:	dd000417 	ldw	r20,16(sp)
   4c054:	dcc00317 	ldw	r19,12(sp)
   4c058:	dc800217 	ldw	r18,8(sp)
   4c05c:	dc400117 	ldw	r17,4(sp)
   4c060:	dc000017 	ldw	r16,0(sp)
   4c064:	dec00a04 	addi	sp,sp,40
   4c068:	f800283a 	ret
   4c06c:	017fff04 	movi	r5,-4
   4c070:	414a703a 	and	r5,r8,r5
   4c074:	814d883a 	add	r6,r16,r5
   4c078:	30c01f16 	blt	r6,r3,4c0f8 <_realloc_r+0x22c>
   4c07c:	20800317 	ldw	r2,12(r4)
   4c080:	20c00217 	ldw	r3,8(r4)
   4c084:	a825883a 	mov	r18,r21
   4c088:	3021883a 	mov	r16,r6
   4c08c:	18800315 	stw	r2,12(r3)
   4c090:	10c00215 	stw	r3,8(r2)
   4c094:	003fdb06 	br	4c004 <__alt_data_end+0xfffcc004>
   4c098:	00800304 	movi	r2,12
   4c09c:	a0800015 	stw	r2,0(r20)
   4c0a0:	0005883a 	mov	r2,zero
   4c0a4:	003fe506 	br	4c03c <__alt_data_end+0xfffcc03c>
   4c0a8:	98c00117 	ldw	r3,4(r19)
   4c0ac:	9c4b883a 	add	r5,r19,r17
   4c0b0:	11000054 	ori	r4,r2,1
   4c0b4:	18c0004c 	andi	r3,r3,1
   4c0b8:	1c62b03a 	or	r17,r3,r17
   4c0bc:	9c400115 	stw	r17,4(r19)
   4c0c0:	29000115 	stw	r4,4(r5)
   4c0c4:	2885883a 	add	r2,r5,r2
   4c0c8:	10c00117 	ldw	r3,4(r2)
   4c0cc:	29400204 	addi	r5,r5,8
   4c0d0:	a009883a 	mov	r4,r20
   4c0d4:	18c00054 	ori	r3,r3,1
   4c0d8:	10c00115 	stw	r3,4(r2)
   4c0dc:	00478540 	call	47854 <_free_r>
   4c0e0:	003fd306 	br	4c030 <__alt_data_end+0xfffcc030>
   4c0e4:	017fff04 	movi	r5,-4
   4c0e8:	414a703a 	and	r5,r8,r5
   4c0ec:	89800404 	addi	r6,r17,16
   4c0f0:	8151883a 	add	r8,r16,r5
   4c0f4:	4180590e 	bge	r8,r6,4c25c <_realloc_r+0x390>
   4c0f8:	1080004c 	andi	r2,r2,1
   4c0fc:	103f9e1e 	bne	r2,zero,4bf78 <__alt_data_end+0xfffcbf78>
   4c100:	adbffe17 	ldw	r22,-8(r21)
   4c104:	00bfff04 	movi	r2,-4
   4c108:	9dadc83a 	sub	r22,r19,r22
   4c10c:	b1800117 	ldw	r6,4(r22)
   4c110:	3084703a 	and	r2,r6,r2
   4c114:	20002026 	beq	r4,zero,4c198 <_realloc_r+0x2cc>
   4c118:	80af883a 	add	r23,r16,r2
   4c11c:	b96f883a 	add	r23,r23,r5
   4c120:	21c05f26 	beq	r4,r7,4c2a0 <_realloc_r+0x3d4>
   4c124:	b8c01c16 	blt	r23,r3,4c198 <_realloc_r+0x2cc>
   4c128:	20800317 	ldw	r2,12(r4)
   4c12c:	20c00217 	ldw	r3,8(r4)
   4c130:	81bfff04 	addi	r6,r16,-4
   4c134:	01000904 	movi	r4,36
   4c138:	18800315 	stw	r2,12(r3)
   4c13c:	10c00215 	stw	r3,8(r2)
   4c140:	b0c00217 	ldw	r3,8(r22)
   4c144:	b0800317 	ldw	r2,12(r22)
   4c148:	b4800204 	addi	r18,r22,8
   4c14c:	18800315 	stw	r2,12(r3)
   4c150:	10c00215 	stw	r3,8(r2)
   4c154:	21801b36 	bltu	r4,r6,4c1c4 <_realloc_r+0x2f8>
   4c158:	008004c4 	movi	r2,19
   4c15c:	1180352e 	bgeu	r2,r6,4c234 <_realloc_r+0x368>
   4c160:	a8800017 	ldw	r2,0(r21)
   4c164:	b0800215 	stw	r2,8(r22)
   4c168:	a8800117 	ldw	r2,4(r21)
   4c16c:	b0800315 	stw	r2,12(r22)
   4c170:	008006c4 	movi	r2,27
   4c174:	11807f36 	bltu	r2,r6,4c374 <_realloc_r+0x4a8>
   4c178:	b0800404 	addi	r2,r22,16
   4c17c:	ad400204 	addi	r21,r21,8
   4c180:	00002d06 	br	4c238 <_realloc_r+0x36c>
   4c184:	adbffe17 	ldw	r22,-8(r21)
   4c188:	00bfff04 	movi	r2,-4
   4c18c:	9dadc83a 	sub	r22,r19,r22
   4c190:	b1000117 	ldw	r4,4(r22)
   4c194:	2084703a 	and	r2,r4,r2
   4c198:	b03f7726 	beq	r22,zero,4bf78 <__alt_data_end+0xfffcbf78>
   4c19c:	80af883a 	add	r23,r16,r2
   4c1a0:	b8ff7516 	blt	r23,r3,4bf78 <__alt_data_end+0xfffcbf78>
   4c1a4:	b0800317 	ldw	r2,12(r22)
   4c1a8:	b0c00217 	ldw	r3,8(r22)
   4c1ac:	81bfff04 	addi	r6,r16,-4
   4c1b0:	01000904 	movi	r4,36
   4c1b4:	18800315 	stw	r2,12(r3)
   4c1b8:	10c00215 	stw	r3,8(r2)
   4c1bc:	b4800204 	addi	r18,r22,8
   4c1c0:	21bfe52e 	bgeu	r4,r6,4c158 <__alt_data_end+0xfffcc158>
   4c1c4:	a80b883a 	mov	r5,r21
   4c1c8:	9009883a 	mov	r4,r18
   4c1cc:	004bd100 	call	4bd10 <memmove>
   4c1d0:	b821883a 	mov	r16,r23
   4c1d4:	b027883a 	mov	r19,r22
   4c1d8:	003f8a06 	br	4c004 <__alt_data_end+0xfffcc004>
   4c1dc:	300b883a 	mov	r5,r6
   4c1e0:	dfc00917 	ldw	ra,36(sp)
   4c1e4:	df000817 	ldw	fp,32(sp)
   4c1e8:	ddc00717 	ldw	r23,28(sp)
   4c1ec:	dd800617 	ldw	r22,24(sp)
   4c1f0:	dd400517 	ldw	r21,20(sp)
   4c1f4:	dd000417 	ldw	r20,16(sp)
   4c1f8:	dcc00317 	ldw	r19,12(sp)
   4c1fc:	dc800217 	ldw	r18,8(sp)
   4c200:	dc400117 	ldw	r17,4(sp)
   4c204:	dc000017 	ldw	r16,0(sp)
   4c208:	dec00a04 	addi	sp,sp,40
   4c20c:	0047f841 	jmpi	47f84 <_malloc_r>
   4c210:	a8c00017 	ldw	r3,0(r21)
   4c214:	90c00015 	stw	r3,0(r18)
   4c218:	a8c00117 	ldw	r3,4(r21)
   4c21c:	90c00115 	stw	r3,4(r18)
   4c220:	00c006c4 	movi	r3,27
   4c224:	19804536 	bltu	r3,r6,4c33c <_realloc_r+0x470>
   4c228:	90800204 	addi	r2,r18,8
   4c22c:	a8c00204 	addi	r3,r21,8
   4c230:	003f6306 	br	4bfc0 <__alt_data_end+0xfffcbfc0>
   4c234:	9005883a 	mov	r2,r18
   4c238:	a8c00017 	ldw	r3,0(r21)
   4c23c:	b821883a 	mov	r16,r23
   4c240:	b027883a 	mov	r19,r22
   4c244:	10c00015 	stw	r3,0(r2)
   4c248:	a8c00117 	ldw	r3,4(r21)
   4c24c:	10c00115 	stw	r3,4(r2)
   4c250:	a8c00217 	ldw	r3,8(r21)
   4c254:	10c00215 	stw	r3,8(r2)
   4c258:	003f6a06 	br	4c004 <__alt_data_end+0xfffcc004>
   4c25c:	9c67883a 	add	r19,r19,r17
   4c260:	4445c83a 	sub	r2,r8,r17
   4c264:	e4c00215 	stw	r19,8(fp)
   4c268:	10800054 	ori	r2,r2,1
   4c26c:	98800115 	stw	r2,4(r19)
   4c270:	a8bfff17 	ldw	r2,-4(r21)
   4c274:	a009883a 	mov	r4,r20
   4c278:	1080004c 	andi	r2,r2,1
   4c27c:	1462b03a 	or	r17,r2,r17
   4c280:	ac7fff15 	stw	r17,-4(r21)
   4c284:	004fc880 	call	4fc88 <__malloc_unlock>
   4c288:	a805883a 	mov	r2,r21
   4c28c:	003f6b06 	br	4c03c <__alt_data_end+0xfffcc03c>
   4c290:	a80b883a 	mov	r5,r21
   4c294:	9009883a 	mov	r4,r18
   4c298:	004bd100 	call	4bd10 <memmove>
   4c29c:	003f4e06 	br	4bfd8 <__alt_data_end+0xfffcbfd8>
   4c2a0:	89000404 	addi	r4,r17,16
   4c2a4:	b93fbc16 	blt	r23,r4,4c198 <__alt_data_end+0xfffcc198>
   4c2a8:	b0800317 	ldw	r2,12(r22)
   4c2ac:	b0c00217 	ldw	r3,8(r22)
   4c2b0:	81bfff04 	addi	r6,r16,-4
   4c2b4:	01000904 	movi	r4,36
   4c2b8:	18800315 	stw	r2,12(r3)
   4c2bc:	10c00215 	stw	r3,8(r2)
   4c2c0:	b4800204 	addi	r18,r22,8
   4c2c4:	21804336 	bltu	r4,r6,4c3d4 <_realloc_r+0x508>
   4c2c8:	008004c4 	movi	r2,19
   4c2cc:	11803f2e 	bgeu	r2,r6,4c3cc <_realloc_r+0x500>
   4c2d0:	a8800017 	ldw	r2,0(r21)
   4c2d4:	b0800215 	stw	r2,8(r22)
   4c2d8:	a8800117 	ldw	r2,4(r21)
   4c2dc:	b0800315 	stw	r2,12(r22)
   4c2e0:	008006c4 	movi	r2,27
   4c2e4:	11803f36 	bltu	r2,r6,4c3e4 <_realloc_r+0x518>
   4c2e8:	b0800404 	addi	r2,r22,16
   4c2ec:	ad400204 	addi	r21,r21,8
   4c2f0:	a8c00017 	ldw	r3,0(r21)
   4c2f4:	10c00015 	stw	r3,0(r2)
   4c2f8:	a8c00117 	ldw	r3,4(r21)
   4c2fc:	10c00115 	stw	r3,4(r2)
   4c300:	a8c00217 	ldw	r3,8(r21)
   4c304:	10c00215 	stw	r3,8(r2)
   4c308:	b447883a 	add	r3,r22,r17
   4c30c:	bc45c83a 	sub	r2,r23,r17
   4c310:	e0c00215 	stw	r3,8(fp)
   4c314:	10800054 	ori	r2,r2,1
   4c318:	18800115 	stw	r2,4(r3)
   4c31c:	b0800117 	ldw	r2,4(r22)
   4c320:	a009883a 	mov	r4,r20
   4c324:	1080004c 	andi	r2,r2,1
   4c328:	1462b03a 	or	r17,r2,r17
   4c32c:	b4400115 	stw	r17,4(r22)
   4c330:	004fc880 	call	4fc88 <__malloc_unlock>
   4c334:	9005883a 	mov	r2,r18
   4c338:	003f4006 	br	4c03c <__alt_data_end+0xfffcc03c>
   4c33c:	a8c00217 	ldw	r3,8(r21)
   4c340:	90c00215 	stw	r3,8(r18)
   4c344:	a8c00317 	ldw	r3,12(r21)
   4c348:	90c00315 	stw	r3,12(r18)
   4c34c:	30801126 	beq	r6,r2,4c394 <_realloc_r+0x4c8>
   4c350:	90800404 	addi	r2,r18,16
   4c354:	a8c00404 	addi	r3,r21,16
   4c358:	003f1906 	br	4bfc0 <__alt_data_end+0xfffcbfc0>
   4c35c:	90ffff17 	ldw	r3,-4(r18)
   4c360:	00bfff04 	movi	r2,-4
   4c364:	a825883a 	mov	r18,r21
   4c368:	1884703a 	and	r2,r3,r2
   4c36c:	80a1883a 	add	r16,r16,r2
   4c370:	003f2406 	br	4c004 <__alt_data_end+0xfffcc004>
   4c374:	a8800217 	ldw	r2,8(r21)
   4c378:	b0800415 	stw	r2,16(r22)
   4c37c:	a8800317 	ldw	r2,12(r21)
   4c380:	b0800515 	stw	r2,20(r22)
   4c384:	31000a26 	beq	r6,r4,4c3b0 <_realloc_r+0x4e4>
   4c388:	b0800604 	addi	r2,r22,24
   4c38c:	ad400404 	addi	r21,r21,16
   4c390:	003fa906 	br	4c238 <__alt_data_end+0xfffcc238>
   4c394:	a9000417 	ldw	r4,16(r21)
   4c398:	90800604 	addi	r2,r18,24
   4c39c:	a8c00604 	addi	r3,r21,24
   4c3a0:	91000415 	stw	r4,16(r18)
   4c3a4:	a9000517 	ldw	r4,20(r21)
   4c3a8:	91000515 	stw	r4,20(r18)
   4c3ac:	003f0406 	br	4bfc0 <__alt_data_end+0xfffcbfc0>
   4c3b0:	a8c00417 	ldw	r3,16(r21)
   4c3b4:	ad400604 	addi	r21,r21,24
   4c3b8:	b0800804 	addi	r2,r22,32
   4c3bc:	b0c00615 	stw	r3,24(r22)
   4c3c0:	a8ffff17 	ldw	r3,-4(r21)
   4c3c4:	b0c00715 	stw	r3,28(r22)
   4c3c8:	003f9b06 	br	4c238 <__alt_data_end+0xfffcc238>
   4c3cc:	9005883a 	mov	r2,r18
   4c3d0:	003fc706 	br	4c2f0 <__alt_data_end+0xfffcc2f0>
   4c3d4:	a80b883a 	mov	r5,r21
   4c3d8:	9009883a 	mov	r4,r18
   4c3dc:	004bd100 	call	4bd10 <memmove>
   4c3e0:	003fc906 	br	4c308 <__alt_data_end+0xfffcc308>
   4c3e4:	a8800217 	ldw	r2,8(r21)
   4c3e8:	b0800415 	stw	r2,16(r22)
   4c3ec:	a8800317 	ldw	r2,12(r21)
   4c3f0:	b0800515 	stw	r2,20(r22)
   4c3f4:	31000726 	beq	r6,r4,4c414 <_realloc_r+0x548>
   4c3f8:	b0800604 	addi	r2,r22,24
   4c3fc:	ad400404 	addi	r21,r21,16
   4c400:	003fbb06 	br	4c2f0 <__alt_data_end+0xfffcc2f0>
   4c404:	a009883a 	mov	r4,r20
   4c408:	004fc880 	call	4fc88 <__malloc_unlock>
   4c40c:	0005883a 	mov	r2,zero
   4c410:	003f0a06 	br	4c03c <__alt_data_end+0xfffcc03c>
   4c414:	a8c00417 	ldw	r3,16(r21)
   4c418:	ad400604 	addi	r21,r21,24
   4c41c:	b0800804 	addi	r2,r22,32
   4c420:	b0c00615 	stw	r3,24(r22)
   4c424:	a8ffff17 	ldw	r3,-4(r21)
   4c428:	b0c00715 	stw	r3,28(r22)
   4c42c:	003fb006 	br	4c2f0 <__alt_data_end+0xfffcc2f0>

0004c430 <_wcrtomb_r>:
   4c430:	defff604 	addi	sp,sp,-40
   4c434:	00800174 	movhi	r2,5
   4c438:	dc800815 	stw	r18,32(sp)
   4c43c:	dc400715 	stw	r17,28(sp)
   4c440:	dc000615 	stw	r16,24(sp)
   4c444:	10882e04 	addi	r2,r2,8376
   4c448:	dfc00915 	stw	ra,36(sp)
   4c44c:	2021883a 	mov	r16,r4
   4c450:	3823883a 	mov	r17,r7
   4c454:	14800017 	ldw	r18,0(r2)
   4c458:	28001426 	beq	r5,zero,4c4ac <_wcrtomb_r+0x7c>
   4c45c:	d9400415 	stw	r5,16(sp)
   4c460:	d9800515 	stw	r6,20(sp)
   4c464:	0047d680 	call	47d68 <__locale_charset>
   4c468:	d9800517 	ldw	r6,20(sp)
   4c46c:	d9400417 	ldw	r5,16(sp)
   4c470:	100f883a 	mov	r7,r2
   4c474:	dc400015 	stw	r17,0(sp)
   4c478:	8009883a 	mov	r4,r16
   4c47c:	903ee83a 	callr	r18
   4c480:	00ffffc4 	movi	r3,-1
   4c484:	10c0031e 	bne	r2,r3,4c494 <_wcrtomb_r+0x64>
   4c488:	88000015 	stw	zero,0(r17)
   4c48c:	00c02284 	movi	r3,138
   4c490:	80c00015 	stw	r3,0(r16)
   4c494:	dfc00917 	ldw	ra,36(sp)
   4c498:	dc800817 	ldw	r18,32(sp)
   4c49c:	dc400717 	ldw	r17,28(sp)
   4c4a0:	dc000617 	ldw	r16,24(sp)
   4c4a4:	dec00a04 	addi	sp,sp,40
   4c4a8:	f800283a 	ret
   4c4ac:	0047d680 	call	47d68 <__locale_charset>
   4c4b0:	100f883a 	mov	r7,r2
   4c4b4:	dc400015 	stw	r17,0(sp)
   4c4b8:	000d883a 	mov	r6,zero
   4c4bc:	d9400104 	addi	r5,sp,4
   4c4c0:	8009883a 	mov	r4,r16
   4c4c4:	903ee83a 	callr	r18
   4c4c8:	003fed06 	br	4c480 <__alt_data_end+0xfffcc480>

0004c4cc <wcrtomb>:
   4c4cc:	defff604 	addi	sp,sp,-40
   4c4d0:	00800174 	movhi	r2,5
   4c4d4:	dc800615 	stw	r18,24(sp)
   4c4d8:	dc400515 	stw	r17,20(sp)
   4c4dc:	10882a04 	addi	r2,r2,8360
   4c4e0:	dfc00915 	stw	ra,36(sp)
   4c4e4:	dd000815 	stw	r20,32(sp)
   4c4e8:	dcc00715 	stw	r19,28(sp)
   4c4ec:	dc000415 	stw	r16,16(sp)
   4c4f0:	3025883a 	mov	r18,r6
   4c4f4:	14400017 	ldw	r17,0(r2)
   4c4f8:	20001926 	beq	r4,zero,4c560 <wcrtomb+0x94>
   4c4fc:	00800174 	movhi	r2,5
   4c500:	10882e04 	addi	r2,r2,8376
   4c504:	15000017 	ldw	r20,0(r2)
   4c508:	2021883a 	mov	r16,r4
   4c50c:	2827883a 	mov	r19,r5
   4c510:	0047d680 	call	47d68 <__locale_charset>
   4c514:	100f883a 	mov	r7,r2
   4c518:	dc800015 	stw	r18,0(sp)
   4c51c:	980d883a 	mov	r6,r19
   4c520:	800b883a 	mov	r5,r16
   4c524:	8809883a 	mov	r4,r17
   4c528:	a03ee83a 	callr	r20
   4c52c:	00ffffc4 	movi	r3,-1
   4c530:	10c0031e 	bne	r2,r3,4c540 <wcrtomb+0x74>
   4c534:	90000015 	stw	zero,0(r18)
   4c538:	00c02284 	movi	r3,138
   4c53c:	88c00015 	stw	r3,0(r17)
   4c540:	dfc00917 	ldw	ra,36(sp)
   4c544:	dd000817 	ldw	r20,32(sp)
   4c548:	dcc00717 	ldw	r19,28(sp)
   4c54c:	dc800617 	ldw	r18,24(sp)
   4c550:	dc400517 	ldw	r17,20(sp)
   4c554:	dc000417 	ldw	r16,16(sp)
   4c558:	dec00a04 	addi	sp,sp,40
   4c55c:	f800283a 	ret
   4c560:	00800174 	movhi	r2,5
   4c564:	10882e04 	addi	r2,r2,8376
   4c568:	14000017 	ldw	r16,0(r2)
   4c56c:	0047d680 	call	47d68 <__locale_charset>
   4c570:	100f883a 	mov	r7,r2
   4c574:	dc800015 	stw	r18,0(sp)
   4c578:	000d883a 	mov	r6,zero
   4c57c:	d9400104 	addi	r5,sp,4
   4c580:	8809883a 	mov	r4,r17
   4c584:	803ee83a 	callr	r16
   4c588:	003fe806 	br	4c52c <__alt_data_end+0xfffcc52c>

0004c58c <__ascii_wctomb>:
   4c58c:	28000526 	beq	r5,zero,4c5a4 <__ascii_wctomb+0x18>
   4c590:	00803fc4 	movi	r2,255
   4c594:	11800536 	bltu	r2,r6,4c5ac <__ascii_wctomb+0x20>
   4c598:	29800005 	stb	r6,0(r5)
   4c59c:	00800044 	movi	r2,1
   4c5a0:	f800283a 	ret
   4c5a4:	0005883a 	mov	r2,zero
   4c5a8:	f800283a 	ret
   4c5ac:	00802284 	movi	r2,138
   4c5b0:	20800015 	stw	r2,0(r4)
   4c5b4:	00bfffc4 	movi	r2,-1
   4c5b8:	f800283a 	ret

0004c5bc <_wctomb_r>:
   4c5bc:	00800174 	movhi	r2,5
   4c5c0:	defff904 	addi	sp,sp,-28
   4c5c4:	10882e04 	addi	r2,r2,8376
   4c5c8:	dfc00615 	stw	ra,24(sp)
   4c5cc:	dc400515 	stw	r17,20(sp)
   4c5d0:	dc000415 	stw	r16,16(sp)
   4c5d4:	3823883a 	mov	r17,r7
   4c5d8:	14000017 	ldw	r16,0(r2)
   4c5dc:	d9000115 	stw	r4,4(sp)
   4c5e0:	d9400215 	stw	r5,8(sp)
   4c5e4:	d9800315 	stw	r6,12(sp)
   4c5e8:	0047d680 	call	47d68 <__locale_charset>
   4c5ec:	d9800317 	ldw	r6,12(sp)
   4c5f0:	d9400217 	ldw	r5,8(sp)
   4c5f4:	d9000117 	ldw	r4,4(sp)
   4c5f8:	100f883a 	mov	r7,r2
   4c5fc:	dc400015 	stw	r17,0(sp)
   4c600:	803ee83a 	callr	r16
   4c604:	dfc00617 	ldw	ra,24(sp)
   4c608:	dc400517 	ldw	r17,20(sp)
   4c60c:	dc000417 	ldw	r16,16(sp)
   4c610:	dec00704 	addi	sp,sp,28
   4c614:	f800283a 	ret

0004c618 <__floatundidf>:
   4c618:	defffc04 	addi	sp,sp,-16
   4c61c:	dc800215 	stw	r18,8(sp)
   4c620:	2025883a 	mov	r18,r4
   4c624:	2809883a 	mov	r4,r5
   4c628:	dfc00315 	stw	ra,12(sp)
   4c62c:	dc400115 	stw	r17,4(sp)
   4c630:	dc000015 	stw	r16,0(sp)
   4c634:	004f8480 	call	4f848 <__floatunsidf>
   4c638:	000d883a 	mov	r6,zero
   4c63c:	01d07c34 	movhi	r7,16880
   4c640:	180b883a 	mov	r5,r3
   4c644:	1009883a 	mov	r4,r2
   4c648:	004e6d80 	call	4e6d8 <__muldf3>
   4c64c:	9009883a 	mov	r4,r18
   4c650:	1023883a 	mov	r17,r2
   4c654:	1821883a 	mov	r16,r3
   4c658:	004f8480 	call	4f848 <__floatunsidf>
   4c65c:	880d883a 	mov	r6,r17
   4c660:	800f883a 	mov	r7,r16
   4c664:	1009883a 	mov	r4,r2
   4c668:	180b883a 	mov	r5,r3
   4c66c:	004d2ec0 	call	4d2ec <__adddf3>
   4c670:	dfc00317 	ldw	ra,12(sp)
   4c674:	dc800217 	ldw	r18,8(sp)
   4c678:	dc400117 	ldw	r17,4(sp)
   4c67c:	dc000017 	ldw	r16,0(sp)
   4c680:	dec00404 	addi	sp,sp,16
   4c684:	f800283a 	ret

0004c688 <__udivdi3>:
   4c688:	defff504 	addi	sp,sp,-44
   4c68c:	dcc00415 	stw	r19,16(sp)
   4c690:	dc000115 	stw	r16,4(sp)
   4c694:	dfc00a15 	stw	ra,40(sp)
   4c698:	df000915 	stw	fp,36(sp)
   4c69c:	ddc00815 	stw	r23,32(sp)
   4c6a0:	dd800715 	stw	r22,28(sp)
   4c6a4:	dd400615 	stw	r21,24(sp)
   4c6a8:	dd000515 	stw	r20,20(sp)
   4c6ac:	dc800315 	stw	r18,12(sp)
   4c6b0:	dc400215 	stw	r17,8(sp)
   4c6b4:	2027883a 	mov	r19,r4
   4c6b8:	2821883a 	mov	r16,r5
   4c6bc:	3800411e 	bne	r7,zero,4c7c4 <__udivdi3+0x13c>
   4c6c0:	3023883a 	mov	r17,r6
   4c6c4:	2025883a 	mov	r18,r4
   4c6c8:	2980522e 	bgeu	r5,r6,4c814 <__udivdi3+0x18c>
   4c6cc:	00bfffd4 	movui	r2,65535
   4c6d0:	282d883a 	mov	r22,r5
   4c6d4:	1180a836 	bltu	r2,r6,4c978 <__udivdi3+0x2f0>
   4c6d8:	00803fc4 	movi	r2,255
   4c6dc:	1185803a 	cmpltu	r2,r2,r6
   4c6e0:	100490fa 	slli	r2,r2,3
   4c6e4:	3086d83a 	srl	r3,r6,r2
   4c6e8:	01000174 	movhi	r4,5
   4c6ec:	21013304 	addi	r4,r4,1228
   4c6f0:	20c7883a 	add	r3,r4,r3
   4c6f4:	18c00003 	ldbu	r3,0(r3)
   4c6f8:	1885883a 	add	r2,r3,r2
   4c6fc:	00c00804 	movi	r3,32
   4c700:	1887c83a 	sub	r3,r3,r2
   4c704:	18000526 	beq	r3,zero,4c71c <__udivdi3+0x94>
   4c708:	80e0983a 	sll	r16,r16,r3
   4c70c:	9884d83a 	srl	r2,r19,r2
   4c710:	30e2983a 	sll	r17,r6,r3
   4c714:	98e4983a 	sll	r18,r19,r3
   4c718:	142cb03a 	or	r22,r2,r16
   4c71c:	882ad43a 	srli	r21,r17,16
   4c720:	b009883a 	mov	r4,r22
   4c724:	8d3fffcc 	andi	r20,r17,65535
   4c728:	a80b883a 	mov	r5,r21
   4c72c:	004d2940 	call	4d294 <__umodsi3>
   4c730:	b009883a 	mov	r4,r22
   4c734:	a80b883a 	mov	r5,r21
   4c738:	1027883a 	mov	r19,r2
   4c73c:	004d2300 	call	4d230 <__udivsi3>
   4c740:	102d883a 	mov	r22,r2
   4c744:	9826943a 	slli	r19,r19,16
   4c748:	9004d43a 	srli	r2,r18,16
   4c74c:	a5a1383a 	mul	r16,r20,r22
   4c750:	14c4b03a 	or	r2,r2,r19
   4c754:	1400052e 	bgeu	r2,r16,4c76c <__udivdi3+0xe4>
   4c758:	1445883a 	add	r2,r2,r17
   4c75c:	b0ffffc4 	addi	r3,r22,-1
   4c760:	14400136 	bltu	r2,r17,4c768 <__udivdi3+0xe0>
   4c764:	14012336 	bltu	r2,r16,4cbf4 <__udivdi3+0x56c>
   4c768:	182d883a 	mov	r22,r3
   4c76c:	1421c83a 	sub	r16,r2,r16
   4c770:	a80b883a 	mov	r5,r21
   4c774:	8009883a 	mov	r4,r16
   4c778:	004d2940 	call	4d294 <__umodsi3>
   4c77c:	1027883a 	mov	r19,r2
   4c780:	a80b883a 	mov	r5,r21
   4c784:	8009883a 	mov	r4,r16
   4c788:	004d2300 	call	4d230 <__udivsi3>
   4c78c:	9826943a 	slli	r19,r19,16
   4c790:	a0a9383a 	mul	r20,r20,r2
   4c794:	94bfffcc 	andi	r18,r18,65535
   4c798:	94e4b03a 	or	r18,r18,r19
   4c79c:	9500052e 	bgeu	r18,r20,4c7b4 <__udivdi3+0x12c>
   4c7a0:	8ca5883a 	add	r18,r17,r18
   4c7a4:	10ffffc4 	addi	r3,r2,-1
   4c7a8:	9440f136 	bltu	r18,r17,4cb70 <__udivdi3+0x4e8>
   4c7ac:	9500f02e 	bgeu	r18,r20,4cb70 <__udivdi3+0x4e8>
   4c7b0:	10bfff84 	addi	r2,r2,-2
   4c7b4:	b00c943a 	slli	r6,r22,16
   4c7b8:	0007883a 	mov	r3,zero
   4c7bc:	3084b03a 	or	r2,r6,r2
   4c7c0:	00005906 	br	4c928 <__udivdi3+0x2a0>
   4c7c4:	29c05636 	bltu	r5,r7,4c920 <__udivdi3+0x298>
   4c7c8:	00bfffd4 	movui	r2,65535
   4c7cc:	11c0622e 	bgeu	r2,r7,4c958 <__udivdi3+0x2d0>
   4c7d0:	00804034 	movhi	r2,256
   4c7d4:	10bfffc4 	addi	r2,r2,-1
   4c7d8:	11c0ee36 	bltu	r2,r7,4cb94 <__udivdi3+0x50c>
   4c7dc:	00800404 	movi	r2,16
   4c7e0:	3886d83a 	srl	r3,r7,r2
   4c7e4:	01000174 	movhi	r4,5
   4c7e8:	21013304 	addi	r4,r4,1228
   4c7ec:	20c7883a 	add	r3,r4,r3
   4c7f0:	18c00003 	ldbu	r3,0(r3)
   4c7f4:	05400804 	movi	r21,32
   4c7f8:	1885883a 	add	r2,r3,r2
   4c7fc:	a8abc83a 	sub	r21,r21,r2
   4c800:	a800621e 	bne	r21,zero,4c98c <__udivdi3+0x304>
   4c804:	3c00e936 	bltu	r7,r16,4cbac <__udivdi3+0x524>
   4c808:	9985403a 	cmpgeu	r2,r19,r6
   4c80c:	0007883a 	mov	r3,zero
   4c810:	00004506 	br	4c928 <__udivdi3+0x2a0>
   4c814:	3000041e 	bne	r6,zero,4c828 <__udivdi3+0x1a0>
   4c818:	000b883a 	mov	r5,zero
   4c81c:	01000044 	movi	r4,1
   4c820:	004d2300 	call	4d230 <__udivsi3>
   4c824:	1023883a 	mov	r17,r2
   4c828:	00bfffd4 	movui	r2,65535
   4c82c:	14404e2e 	bgeu	r2,r17,4c968 <__udivdi3+0x2e0>
   4c830:	00804034 	movhi	r2,256
   4c834:	10bfffc4 	addi	r2,r2,-1
   4c838:	1440d836 	bltu	r2,r17,4cb9c <__udivdi3+0x514>
   4c83c:	00800404 	movi	r2,16
   4c840:	8886d83a 	srl	r3,r17,r2
   4c844:	01000174 	movhi	r4,5
   4c848:	21013304 	addi	r4,r4,1228
   4c84c:	20c7883a 	add	r3,r4,r3
   4c850:	18c00003 	ldbu	r3,0(r3)
   4c854:	1885883a 	add	r2,r3,r2
   4c858:	00c00804 	movi	r3,32
   4c85c:	1887c83a 	sub	r3,r3,r2
   4c860:	18008f1e 	bne	r3,zero,4caa0 <__udivdi3+0x418>
   4c864:	882ad43a 	srli	r21,r17,16
   4c868:	8461c83a 	sub	r16,r16,r17
   4c86c:	8d3fffcc 	andi	r20,r17,65535
   4c870:	00c00044 	movi	r3,1
   4c874:	8009883a 	mov	r4,r16
   4c878:	a80b883a 	mov	r5,r21
   4c87c:	d8c00015 	stw	r3,0(sp)
   4c880:	004d2940 	call	4d294 <__umodsi3>
   4c884:	8009883a 	mov	r4,r16
   4c888:	a80b883a 	mov	r5,r21
   4c88c:	1027883a 	mov	r19,r2
   4c890:	004d2300 	call	4d230 <__udivsi3>
   4c894:	9826943a 	slli	r19,r19,16
   4c898:	9008d43a 	srli	r4,r18,16
   4c89c:	1521383a 	mul	r16,r2,r20
   4c8a0:	102d883a 	mov	r22,r2
   4c8a4:	24c8b03a 	or	r4,r4,r19
   4c8a8:	d8c00017 	ldw	r3,0(sp)
   4c8ac:	2400052e 	bgeu	r4,r16,4c8c4 <__udivdi3+0x23c>
   4c8b0:	2449883a 	add	r4,r4,r17
   4c8b4:	b0bfffc4 	addi	r2,r22,-1
   4c8b8:	24400136 	bltu	r4,r17,4c8c0 <__udivdi3+0x238>
   4c8bc:	2400ca36 	bltu	r4,r16,4cbe8 <__udivdi3+0x560>
   4c8c0:	102d883a 	mov	r22,r2
   4c8c4:	2421c83a 	sub	r16,r4,r16
   4c8c8:	a80b883a 	mov	r5,r21
   4c8cc:	8009883a 	mov	r4,r16
   4c8d0:	d8c00015 	stw	r3,0(sp)
   4c8d4:	004d2940 	call	4d294 <__umodsi3>
   4c8d8:	1027883a 	mov	r19,r2
   4c8dc:	a80b883a 	mov	r5,r21
   4c8e0:	8009883a 	mov	r4,r16
   4c8e4:	004d2300 	call	4d230 <__udivsi3>
   4c8e8:	9826943a 	slli	r19,r19,16
   4c8ec:	1529383a 	mul	r20,r2,r20
   4c8f0:	94bfffcc 	andi	r18,r18,65535
   4c8f4:	94e4b03a 	or	r18,r18,r19
   4c8f8:	d8c00017 	ldw	r3,0(sp)
   4c8fc:	9500052e 	bgeu	r18,r20,4c914 <__udivdi3+0x28c>
   4c900:	8ca5883a 	add	r18,r17,r18
   4c904:	113fffc4 	addi	r4,r2,-1
   4c908:	94409736 	bltu	r18,r17,4cb68 <__udivdi3+0x4e0>
   4c90c:	9500962e 	bgeu	r18,r20,4cb68 <__udivdi3+0x4e0>
   4c910:	10bfff84 	addi	r2,r2,-2
   4c914:	b00c943a 	slli	r6,r22,16
   4c918:	3084b03a 	or	r2,r6,r2
   4c91c:	00000206 	br	4c928 <__udivdi3+0x2a0>
   4c920:	0007883a 	mov	r3,zero
   4c924:	0005883a 	mov	r2,zero
   4c928:	dfc00a17 	ldw	ra,40(sp)
   4c92c:	df000917 	ldw	fp,36(sp)
   4c930:	ddc00817 	ldw	r23,32(sp)
   4c934:	dd800717 	ldw	r22,28(sp)
   4c938:	dd400617 	ldw	r21,24(sp)
   4c93c:	dd000517 	ldw	r20,20(sp)
   4c940:	dcc00417 	ldw	r19,16(sp)
   4c944:	dc800317 	ldw	r18,12(sp)
   4c948:	dc400217 	ldw	r17,8(sp)
   4c94c:	dc000117 	ldw	r16,4(sp)
   4c950:	dec00b04 	addi	sp,sp,44
   4c954:	f800283a 	ret
   4c958:	00803fc4 	movi	r2,255
   4c95c:	11c5803a 	cmpltu	r2,r2,r7
   4c960:	100490fa 	slli	r2,r2,3
   4c964:	003f9e06 	br	4c7e0 <__alt_data_end+0xfffcc7e0>
   4c968:	00803fc4 	movi	r2,255
   4c96c:	1445803a 	cmpltu	r2,r2,r17
   4c970:	100490fa 	slli	r2,r2,3
   4c974:	003fb206 	br	4c840 <__alt_data_end+0xfffcc840>
   4c978:	00804034 	movhi	r2,256
   4c97c:	10bfffc4 	addi	r2,r2,-1
   4c980:	11808836 	bltu	r2,r6,4cba4 <__udivdi3+0x51c>
   4c984:	00800404 	movi	r2,16
   4c988:	003f5606 	br	4c6e4 <__alt_data_end+0xfffcc6e4>
   4c98c:	30aed83a 	srl	r23,r6,r2
   4c990:	3d4e983a 	sll	r7,r7,r21
   4c994:	80acd83a 	srl	r22,r16,r2
   4c998:	9884d83a 	srl	r2,r19,r2
   4c99c:	3deeb03a 	or	r23,r7,r23
   4c9a0:	b824d43a 	srli	r18,r23,16
   4c9a4:	8560983a 	sll	r16,r16,r21
   4c9a8:	b009883a 	mov	r4,r22
   4c9ac:	900b883a 	mov	r5,r18
   4c9b0:	3568983a 	sll	r20,r6,r21
   4c9b4:	1420b03a 	or	r16,r2,r16
   4c9b8:	004d2940 	call	4d294 <__umodsi3>
   4c9bc:	b009883a 	mov	r4,r22
   4c9c0:	900b883a 	mov	r5,r18
   4c9c4:	1023883a 	mov	r17,r2
   4c9c8:	004d2300 	call	4d230 <__udivsi3>
   4c9cc:	8808943a 	slli	r4,r17,16
   4c9d0:	bf3fffcc 	andi	fp,r23,65535
   4c9d4:	8006d43a 	srli	r3,r16,16
   4c9d8:	e0a3383a 	mul	r17,fp,r2
   4c9dc:	100d883a 	mov	r6,r2
   4c9e0:	1906b03a 	or	r3,r3,r4
   4c9e4:	1c40042e 	bgeu	r3,r17,4c9f8 <__udivdi3+0x370>
   4c9e8:	1dc7883a 	add	r3,r3,r23
   4c9ec:	10bfffc4 	addi	r2,r2,-1
   4c9f0:	1dc0752e 	bgeu	r3,r23,4cbc8 <__udivdi3+0x540>
   4c9f4:	100d883a 	mov	r6,r2
   4c9f8:	1c63c83a 	sub	r17,r3,r17
   4c9fc:	900b883a 	mov	r5,r18
   4ca00:	8809883a 	mov	r4,r17
   4ca04:	d9800015 	stw	r6,0(sp)
   4ca08:	004d2940 	call	4d294 <__umodsi3>
   4ca0c:	102d883a 	mov	r22,r2
   4ca10:	8809883a 	mov	r4,r17
   4ca14:	900b883a 	mov	r5,r18
   4ca18:	004d2300 	call	4d230 <__udivsi3>
   4ca1c:	b02c943a 	slli	r22,r22,16
   4ca20:	e089383a 	mul	r4,fp,r2
   4ca24:	843fffcc 	andi	r16,r16,65535
   4ca28:	85a0b03a 	or	r16,r16,r22
   4ca2c:	d9800017 	ldw	r6,0(sp)
   4ca30:	8100042e 	bgeu	r16,r4,4ca44 <__udivdi3+0x3bc>
   4ca34:	85e1883a 	add	r16,r16,r23
   4ca38:	10ffffc4 	addi	r3,r2,-1
   4ca3c:	85c05e2e 	bgeu	r16,r23,4cbb8 <__udivdi3+0x530>
   4ca40:	1805883a 	mov	r2,r3
   4ca44:	300c943a 	slli	r6,r6,16
   4ca48:	a17fffcc 	andi	r5,r20,65535
   4ca4c:	a028d43a 	srli	r20,r20,16
   4ca50:	3084b03a 	or	r2,r6,r2
   4ca54:	10ffffcc 	andi	r3,r2,65535
   4ca58:	100cd43a 	srli	r6,r2,16
   4ca5c:	194f383a 	mul	r7,r3,r5
   4ca60:	1d07383a 	mul	r3,r3,r20
   4ca64:	314b383a 	mul	r5,r6,r5
   4ca68:	3810d43a 	srli	r8,r7,16
   4ca6c:	8121c83a 	sub	r16,r16,r4
   4ca70:	1947883a 	add	r3,r3,r5
   4ca74:	40c7883a 	add	r3,r8,r3
   4ca78:	350d383a 	mul	r6,r6,r20
   4ca7c:	1940022e 	bgeu	r3,r5,4ca88 <__udivdi3+0x400>
   4ca80:	01000074 	movhi	r4,1
   4ca84:	310d883a 	add	r6,r6,r4
   4ca88:	1828d43a 	srli	r20,r3,16
   4ca8c:	a18d883a 	add	r6,r20,r6
   4ca90:	81803e36 	bltu	r16,r6,4cb8c <__udivdi3+0x504>
   4ca94:	81803826 	beq	r16,r6,4cb78 <__udivdi3+0x4f0>
   4ca98:	0007883a 	mov	r3,zero
   4ca9c:	003fa206 	br	4c928 <__alt_data_end+0xfffcc928>
   4caa0:	88e2983a 	sll	r17,r17,r3
   4caa4:	80a8d83a 	srl	r20,r16,r2
   4caa8:	80e0983a 	sll	r16,r16,r3
   4caac:	882ad43a 	srli	r21,r17,16
   4cab0:	9884d83a 	srl	r2,r19,r2
   4cab4:	a009883a 	mov	r4,r20
   4cab8:	a80b883a 	mov	r5,r21
   4cabc:	142eb03a 	or	r23,r2,r16
   4cac0:	98e4983a 	sll	r18,r19,r3
   4cac4:	004d2940 	call	4d294 <__umodsi3>
   4cac8:	a009883a 	mov	r4,r20
   4cacc:	a80b883a 	mov	r5,r21
   4cad0:	1021883a 	mov	r16,r2
   4cad4:	004d2300 	call	4d230 <__udivsi3>
   4cad8:	1039883a 	mov	fp,r2
   4cadc:	8d3fffcc 	andi	r20,r17,65535
   4cae0:	8020943a 	slli	r16,r16,16
   4cae4:	b804d43a 	srli	r2,r23,16
   4cae8:	a72d383a 	mul	r22,r20,fp
   4caec:	1404b03a 	or	r2,r2,r16
   4caf0:	1580062e 	bgeu	r2,r22,4cb0c <__udivdi3+0x484>
   4caf4:	1445883a 	add	r2,r2,r17
   4caf8:	e0ffffc4 	addi	r3,fp,-1
   4cafc:	14403836 	bltu	r2,r17,4cbe0 <__udivdi3+0x558>
   4cb00:	1580372e 	bgeu	r2,r22,4cbe0 <__udivdi3+0x558>
   4cb04:	e73fff84 	addi	fp,fp,-2
   4cb08:	1445883a 	add	r2,r2,r17
   4cb0c:	15adc83a 	sub	r22,r2,r22
   4cb10:	a80b883a 	mov	r5,r21
   4cb14:	b009883a 	mov	r4,r22
   4cb18:	004d2940 	call	4d294 <__umodsi3>
   4cb1c:	1027883a 	mov	r19,r2
   4cb20:	b009883a 	mov	r4,r22
   4cb24:	a80b883a 	mov	r5,r21
   4cb28:	004d2300 	call	4d230 <__udivsi3>
   4cb2c:	9826943a 	slli	r19,r19,16
   4cb30:	a0a1383a 	mul	r16,r20,r2
   4cb34:	b93fffcc 	andi	r4,r23,65535
   4cb38:	24c8b03a 	or	r4,r4,r19
   4cb3c:	2400062e 	bgeu	r4,r16,4cb58 <__udivdi3+0x4d0>
   4cb40:	2449883a 	add	r4,r4,r17
   4cb44:	10ffffc4 	addi	r3,r2,-1
   4cb48:	24402336 	bltu	r4,r17,4cbd8 <__udivdi3+0x550>
   4cb4c:	2400222e 	bgeu	r4,r16,4cbd8 <__udivdi3+0x550>
   4cb50:	10bfff84 	addi	r2,r2,-2
   4cb54:	2449883a 	add	r4,r4,r17
   4cb58:	e038943a 	slli	fp,fp,16
   4cb5c:	2421c83a 	sub	r16,r4,r16
   4cb60:	e086b03a 	or	r3,fp,r2
   4cb64:	003f4306 	br	4c874 <__alt_data_end+0xfffcc874>
   4cb68:	2005883a 	mov	r2,r4
   4cb6c:	003f6906 	br	4c914 <__alt_data_end+0xfffcc914>
   4cb70:	1805883a 	mov	r2,r3
   4cb74:	003f0f06 	br	4c7b4 <__alt_data_end+0xfffcc7b4>
   4cb78:	1806943a 	slli	r3,r3,16
   4cb7c:	9d66983a 	sll	r19,r19,r21
   4cb80:	39ffffcc 	andi	r7,r7,65535
   4cb84:	19c7883a 	add	r3,r3,r7
   4cb88:	98ffc32e 	bgeu	r19,r3,4ca98 <__alt_data_end+0xfffcca98>
   4cb8c:	10bfffc4 	addi	r2,r2,-1
   4cb90:	003fc106 	br	4ca98 <__alt_data_end+0xfffcca98>
   4cb94:	00800604 	movi	r2,24
   4cb98:	003f1106 	br	4c7e0 <__alt_data_end+0xfffcc7e0>
   4cb9c:	00800604 	movi	r2,24
   4cba0:	003f2706 	br	4c840 <__alt_data_end+0xfffcc840>
   4cba4:	00800604 	movi	r2,24
   4cba8:	003ece06 	br	4c6e4 <__alt_data_end+0xfffcc6e4>
   4cbac:	0007883a 	mov	r3,zero
   4cbb0:	00800044 	movi	r2,1
   4cbb4:	003f5c06 	br	4c928 <__alt_data_end+0xfffcc928>
   4cbb8:	813fa12e 	bgeu	r16,r4,4ca40 <__alt_data_end+0xfffcca40>
   4cbbc:	10bfff84 	addi	r2,r2,-2
   4cbc0:	85e1883a 	add	r16,r16,r23
   4cbc4:	003f9f06 	br	4ca44 <__alt_data_end+0xfffcca44>
   4cbc8:	1c7f8a2e 	bgeu	r3,r17,4c9f4 <__alt_data_end+0xfffcc9f4>
   4cbcc:	31bfff84 	addi	r6,r6,-2
   4cbd0:	1dc7883a 	add	r3,r3,r23
   4cbd4:	003f8806 	br	4c9f8 <__alt_data_end+0xfffcc9f8>
   4cbd8:	1805883a 	mov	r2,r3
   4cbdc:	003fde06 	br	4cb58 <__alt_data_end+0xfffccb58>
   4cbe0:	1839883a 	mov	fp,r3
   4cbe4:	003fc906 	br	4cb0c <__alt_data_end+0xfffccb0c>
   4cbe8:	b5bfff84 	addi	r22,r22,-2
   4cbec:	2449883a 	add	r4,r4,r17
   4cbf0:	003f3406 	br	4c8c4 <__alt_data_end+0xfffcc8c4>
   4cbf4:	b5bfff84 	addi	r22,r22,-2
   4cbf8:	1445883a 	add	r2,r2,r17
   4cbfc:	003edb06 	br	4c76c <__alt_data_end+0xfffcc76c>

0004cc00 <__umoddi3>:
   4cc00:	defff404 	addi	sp,sp,-48
   4cc04:	df000a15 	stw	fp,40(sp)
   4cc08:	dc400315 	stw	r17,12(sp)
   4cc0c:	dc000215 	stw	r16,8(sp)
   4cc10:	dfc00b15 	stw	ra,44(sp)
   4cc14:	ddc00915 	stw	r23,36(sp)
   4cc18:	dd800815 	stw	r22,32(sp)
   4cc1c:	dd400715 	stw	r21,28(sp)
   4cc20:	dd000615 	stw	r20,24(sp)
   4cc24:	dcc00515 	stw	r19,20(sp)
   4cc28:	dc800415 	stw	r18,16(sp)
   4cc2c:	2021883a 	mov	r16,r4
   4cc30:	2823883a 	mov	r17,r5
   4cc34:	2839883a 	mov	fp,r5
   4cc38:	38003c1e 	bne	r7,zero,4cd2c <__umoddi3+0x12c>
   4cc3c:	3027883a 	mov	r19,r6
   4cc40:	2029883a 	mov	r20,r4
   4cc44:	2980512e 	bgeu	r5,r6,4cd8c <__umoddi3+0x18c>
   4cc48:	00bfffd4 	movui	r2,65535
   4cc4c:	11809a36 	bltu	r2,r6,4ceb8 <__umoddi3+0x2b8>
   4cc50:	01003fc4 	movi	r4,255
   4cc54:	2189803a 	cmpltu	r4,r4,r6
   4cc58:	200890fa 	slli	r4,r4,3
   4cc5c:	3104d83a 	srl	r2,r6,r4
   4cc60:	00c00174 	movhi	r3,5
   4cc64:	18c13304 	addi	r3,r3,1228
   4cc68:	1885883a 	add	r2,r3,r2
   4cc6c:	10c00003 	ldbu	r3,0(r2)
   4cc70:	00800804 	movi	r2,32
   4cc74:	1909883a 	add	r4,r3,r4
   4cc78:	1125c83a 	sub	r18,r2,r4
   4cc7c:	90000526 	beq	r18,zero,4cc94 <__umoddi3+0x94>
   4cc80:	8ca2983a 	sll	r17,r17,r18
   4cc84:	8108d83a 	srl	r4,r16,r4
   4cc88:	34a6983a 	sll	r19,r6,r18
   4cc8c:	84a8983a 	sll	r20,r16,r18
   4cc90:	2478b03a 	or	fp,r4,r17
   4cc94:	982ed43a 	srli	r23,r19,16
   4cc98:	e009883a 	mov	r4,fp
   4cc9c:	9dbfffcc 	andi	r22,r19,65535
   4cca0:	b80b883a 	mov	r5,r23
   4cca4:	004d2940 	call	4d294 <__umodsi3>
   4cca8:	e009883a 	mov	r4,fp
   4ccac:	b80b883a 	mov	r5,r23
   4ccb0:	102b883a 	mov	r21,r2
   4ccb4:	004d2300 	call	4d230 <__udivsi3>
   4ccb8:	a806943a 	slli	r3,r21,16
   4ccbc:	a008d43a 	srli	r4,r20,16
   4ccc0:	b085383a 	mul	r2,r22,r2
   4ccc4:	20c8b03a 	or	r4,r4,r3
   4ccc8:	2080032e 	bgeu	r4,r2,4ccd8 <__umoddi3+0xd8>
   4cccc:	24c9883a 	add	r4,r4,r19
   4ccd0:	24c00136 	bltu	r4,r19,4ccd8 <__umoddi3+0xd8>
   4ccd4:	20811036 	bltu	r4,r2,4d118 <__umoddi3+0x518>
   4ccd8:	20abc83a 	sub	r21,r4,r2
   4ccdc:	b80b883a 	mov	r5,r23
   4cce0:	a809883a 	mov	r4,r21
   4cce4:	004d2940 	call	4d294 <__umodsi3>
   4cce8:	1023883a 	mov	r17,r2
   4ccec:	b80b883a 	mov	r5,r23
   4ccf0:	a809883a 	mov	r4,r21
   4ccf4:	004d2300 	call	4d230 <__udivsi3>
   4ccf8:	8822943a 	slli	r17,r17,16
   4ccfc:	b085383a 	mul	r2,r22,r2
   4cd00:	a0ffffcc 	andi	r3,r20,65535
   4cd04:	1c46b03a 	or	r3,r3,r17
   4cd08:	1880042e 	bgeu	r3,r2,4cd1c <__umoddi3+0x11c>
   4cd0c:	1cc7883a 	add	r3,r3,r19
   4cd10:	1cc00236 	bltu	r3,r19,4cd1c <__umoddi3+0x11c>
   4cd14:	1880012e 	bgeu	r3,r2,4cd1c <__umoddi3+0x11c>
   4cd18:	1cc7883a 	add	r3,r3,r19
   4cd1c:	1885c83a 	sub	r2,r3,r2
   4cd20:	1484d83a 	srl	r2,r2,r18
   4cd24:	0007883a 	mov	r3,zero
   4cd28:	00004f06 	br	4ce68 <__umoddi3+0x268>
   4cd2c:	29c04c36 	bltu	r5,r7,4ce60 <__umoddi3+0x260>
   4cd30:	00bfffd4 	movui	r2,65535
   4cd34:	11c0582e 	bgeu	r2,r7,4ce98 <__umoddi3+0x298>
   4cd38:	00804034 	movhi	r2,256
   4cd3c:	10bfffc4 	addi	r2,r2,-1
   4cd40:	11c0e736 	bltu	r2,r7,4d0e0 <__umoddi3+0x4e0>
   4cd44:	01000404 	movi	r4,16
   4cd48:	3904d83a 	srl	r2,r7,r4
   4cd4c:	00c00174 	movhi	r3,5
   4cd50:	18c13304 	addi	r3,r3,1228
   4cd54:	1885883a 	add	r2,r3,r2
   4cd58:	14c00003 	ldbu	r19,0(r2)
   4cd5c:	00c00804 	movi	r3,32
   4cd60:	9927883a 	add	r19,r19,r4
   4cd64:	1ce9c83a 	sub	r20,r3,r19
   4cd68:	a000581e 	bne	r20,zero,4cecc <__umoddi3+0x2cc>
   4cd6c:	3c400136 	bltu	r7,r17,4cd74 <__umoddi3+0x174>
   4cd70:	8180eb36 	bltu	r16,r6,4d120 <__umoddi3+0x520>
   4cd74:	8185c83a 	sub	r2,r16,r6
   4cd78:	89e3c83a 	sub	r17,r17,r7
   4cd7c:	8089803a 	cmpltu	r4,r16,r2
   4cd80:	8939c83a 	sub	fp,r17,r4
   4cd84:	e007883a 	mov	r3,fp
   4cd88:	00003706 	br	4ce68 <__umoddi3+0x268>
   4cd8c:	3000041e 	bne	r6,zero,4cda0 <__umoddi3+0x1a0>
   4cd90:	000b883a 	mov	r5,zero
   4cd94:	01000044 	movi	r4,1
   4cd98:	004d2300 	call	4d230 <__udivsi3>
   4cd9c:	1027883a 	mov	r19,r2
   4cda0:	00bfffd4 	movui	r2,65535
   4cda4:	14c0402e 	bgeu	r2,r19,4cea8 <__umoddi3+0x2a8>
   4cda8:	00804034 	movhi	r2,256
   4cdac:	10bfffc4 	addi	r2,r2,-1
   4cdb0:	14c0cd36 	bltu	r2,r19,4d0e8 <__umoddi3+0x4e8>
   4cdb4:	00800404 	movi	r2,16
   4cdb8:	9886d83a 	srl	r3,r19,r2
   4cdbc:	01000174 	movhi	r4,5
   4cdc0:	21013304 	addi	r4,r4,1228
   4cdc4:	20c7883a 	add	r3,r4,r3
   4cdc8:	18c00003 	ldbu	r3,0(r3)
   4cdcc:	1887883a 	add	r3,r3,r2
   4cdd0:	00800804 	movi	r2,32
   4cdd4:	10e5c83a 	sub	r18,r2,r3
   4cdd8:	9000901e 	bne	r18,zero,4d01c <__umoddi3+0x41c>
   4cddc:	982cd43a 	srli	r22,r19,16
   4cde0:	8ce3c83a 	sub	r17,r17,r19
   4cde4:	9d7fffcc 	andi	r21,r19,65535
   4cde8:	b00b883a 	mov	r5,r22
   4cdec:	8809883a 	mov	r4,r17
   4cdf0:	004d2940 	call	4d294 <__umodsi3>
   4cdf4:	8809883a 	mov	r4,r17
   4cdf8:	b00b883a 	mov	r5,r22
   4cdfc:	1021883a 	mov	r16,r2
   4ce00:	004d2300 	call	4d230 <__udivsi3>
   4ce04:	8006943a 	slli	r3,r16,16
   4ce08:	a008d43a 	srli	r4,r20,16
   4ce0c:	1545383a 	mul	r2,r2,r21
   4ce10:	20c8b03a 	or	r4,r4,r3
   4ce14:	2080042e 	bgeu	r4,r2,4ce28 <__umoddi3+0x228>
   4ce18:	24c9883a 	add	r4,r4,r19
   4ce1c:	24c00236 	bltu	r4,r19,4ce28 <__umoddi3+0x228>
   4ce20:	2080012e 	bgeu	r4,r2,4ce28 <__umoddi3+0x228>
   4ce24:	24c9883a 	add	r4,r4,r19
   4ce28:	20a1c83a 	sub	r16,r4,r2
   4ce2c:	b00b883a 	mov	r5,r22
   4ce30:	8009883a 	mov	r4,r16
   4ce34:	004d2940 	call	4d294 <__umodsi3>
   4ce38:	1023883a 	mov	r17,r2
   4ce3c:	b00b883a 	mov	r5,r22
   4ce40:	8009883a 	mov	r4,r16
   4ce44:	004d2300 	call	4d230 <__udivsi3>
   4ce48:	8822943a 	slli	r17,r17,16
   4ce4c:	1545383a 	mul	r2,r2,r21
   4ce50:	a53fffcc 	andi	r20,r20,65535
   4ce54:	a446b03a 	or	r3,r20,r17
   4ce58:	18bfb02e 	bgeu	r3,r2,4cd1c <__alt_data_end+0xfffccd1c>
   4ce5c:	003fab06 	br	4cd0c <__alt_data_end+0xfffccd0c>
   4ce60:	2005883a 	mov	r2,r4
   4ce64:	2807883a 	mov	r3,r5
   4ce68:	dfc00b17 	ldw	ra,44(sp)
   4ce6c:	df000a17 	ldw	fp,40(sp)
   4ce70:	ddc00917 	ldw	r23,36(sp)
   4ce74:	dd800817 	ldw	r22,32(sp)
   4ce78:	dd400717 	ldw	r21,28(sp)
   4ce7c:	dd000617 	ldw	r20,24(sp)
   4ce80:	dcc00517 	ldw	r19,20(sp)
   4ce84:	dc800417 	ldw	r18,16(sp)
   4ce88:	dc400317 	ldw	r17,12(sp)
   4ce8c:	dc000217 	ldw	r16,8(sp)
   4ce90:	dec00c04 	addi	sp,sp,48
   4ce94:	f800283a 	ret
   4ce98:	04c03fc4 	movi	r19,255
   4ce9c:	99c9803a 	cmpltu	r4,r19,r7
   4cea0:	200890fa 	slli	r4,r4,3
   4cea4:	003fa806 	br	4cd48 <__alt_data_end+0xfffccd48>
   4cea8:	00803fc4 	movi	r2,255
   4ceac:	14c5803a 	cmpltu	r2,r2,r19
   4ceb0:	100490fa 	slli	r2,r2,3
   4ceb4:	003fc006 	br	4cdb8 <__alt_data_end+0xfffccdb8>
   4ceb8:	00804034 	movhi	r2,256
   4cebc:	10bfffc4 	addi	r2,r2,-1
   4cec0:	11808b36 	bltu	r2,r6,4d0f0 <__umoddi3+0x4f0>
   4cec4:	01000404 	movi	r4,16
   4cec8:	003f6406 	br	4cc5c <__alt_data_end+0xfffccc5c>
   4cecc:	34c4d83a 	srl	r2,r6,r19
   4ced0:	3d0e983a 	sll	r7,r7,r20
   4ced4:	8cf8d83a 	srl	fp,r17,r19
   4ced8:	8d10983a 	sll	r8,r17,r20
   4cedc:	38aab03a 	or	r21,r7,r2
   4cee0:	a82cd43a 	srli	r22,r21,16
   4cee4:	84e2d83a 	srl	r17,r16,r19
   4cee8:	e009883a 	mov	r4,fp
   4ceec:	b00b883a 	mov	r5,r22
   4cef0:	8a22b03a 	or	r17,r17,r8
   4cef4:	3524983a 	sll	r18,r6,r20
   4cef8:	004d2940 	call	4d294 <__umodsi3>
   4cefc:	e009883a 	mov	r4,fp
   4cf00:	b00b883a 	mov	r5,r22
   4cf04:	102f883a 	mov	r23,r2
   4cf08:	004d2300 	call	4d230 <__udivsi3>
   4cf0c:	100d883a 	mov	r6,r2
   4cf10:	b808943a 	slli	r4,r23,16
   4cf14:	aa3fffcc 	andi	r8,r21,65535
   4cf18:	8804d43a 	srli	r2,r17,16
   4cf1c:	41af383a 	mul	r23,r8,r6
   4cf20:	8520983a 	sll	r16,r16,r20
   4cf24:	1104b03a 	or	r2,r2,r4
   4cf28:	15c0042e 	bgeu	r2,r23,4cf3c <__umoddi3+0x33c>
   4cf2c:	1545883a 	add	r2,r2,r21
   4cf30:	30ffffc4 	addi	r3,r6,-1
   4cf34:	1540742e 	bgeu	r2,r21,4d108 <__umoddi3+0x508>
   4cf38:	180d883a 	mov	r6,r3
   4cf3c:	15efc83a 	sub	r23,r2,r23
   4cf40:	b00b883a 	mov	r5,r22
   4cf44:	b809883a 	mov	r4,r23
   4cf48:	d9800115 	stw	r6,4(sp)
   4cf4c:	da000015 	stw	r8,0(sp)
   4cf50:	004d2940 	call	4d294 <__umodsi3>
   4cf54:	b00b883a 	mov	r5,r22
   4cf58:	b809883a 	mov	r4,r23
   4cf5c:	1039883a 	mov	fp,r2
   4cf60:	004d2300 	call	4d230 <__udivsi3>
   4cf64:	da000017 	ldw	r8,0(sp)
   4cf68:	e038943a 	slli	fp,fp,16
   4cf6c:	100b883a 	mov	r5,r2
   4cf70:	4089383a 	mul	r4,r8,r2
   4cf74:	8a3fffcc 	andi	r8,r17,65535
   4cf78:	4710b03a 	or	r8,r8,fp
   4cf7c:	d9800117 	ldw	r6,4(sp)
   4cf80:	4100042e 	bgeu	r8,r4,4cf94 <__umoddi3+0x394>
   4cf84:	4551883a 	add	r8,r8,r21
   4cf88:	10bfffc4 	addi	r2,r2,-1
   4cf8c:	45405a2e 	bgeu	r8,r21,4d0f8 <__umoddi3+0x4f8>
   4cf90:	100b883a 	mov	r5,r2
   4cf94:	300c943a 	slli	r6,r6,16
   4cf98:	91ffffcc 	andi	r7,r18,65535
   4cf9c:	9004d43a 	srli	r2,r18,16
   4cfa0:	314cb03a 	or	r6,r6,r5
   4cfa4:	317fffcc 	andi	r5,r6,65535
   4cfa8:	300cd43a 	srli	r6,r6,16
   4cfac:	29d3383a 	mul	r9,r5,r7
   4cfb0:	288b383a 	mul	r5,r5,r2
   4cfb4:	31cf383a 	mul	r7,r6,r7
   4cfb8:	4806d43a 	srli	r3,r9,16
   4cfbc:	4111c83a 	sub	r8,r8,r4
   4cfc0:	29cb883a 	add	r5,r5,r7
   4cfc4:	194b883a 	add	r5,r3,r5
   4cfc8:	3085383a 	mul	r2,r6,r2
   4cfcc:	29c0022e 	bgeu	r5,r7,4cfd8 <__umoddi3+0x3d8>
   4cfd0:	00c00074 	movhi	r3,1
   4cfd4:	10c5883a 	add	r2,r2,r3
   4cfd8:	2808d43a 	srli	r4,r5,16
   4cfdc:	280a943a 	slli	r5,r5,16
   4cfe0:	4a7fffcc 	andi	r9,r9,65535
   4cfe4:	2085883a 	add	r2,r4,r2
   4cfe8:	2a4b883a 	add	r5,r5,r9
   4cfec:	40803636 	bltu	r8,r2,4d0c8 <__umoddi3+0x4c8>
   4cff0:	40804d26 	beq	r8,r2,4d128 <__umoddi3+0x528>
   4cff4:	4089c83a 	sub	r4,r8,r2
   4cff8:	280f883a 	mov	r7,r5
   4cffc:	81cfc83a 	sub	r7,r16,r7
   4d000:	81c7803a 	cmpltu	r3,r16,r7
   4d004:	20c7c83a 	sub	r3,r4,r3
   4d008:	1cc4983a 	sll	r2,r3,r19
   4d00c:	3d0ed83a 	srl	r7,r7,r20
   4d010:	1d06d83a 	srl	r3,r3,r20
   4d014:	11c4b03a 	or	r2,r2,r7
   4d018:	003f9306 	br	4ce68 <__alt_data_end+0xfffcce68>
   4d01c:	9ca6983a 	sll	r19,r19,r18
   4d020:	88e8d83a 	srl	r20,r17,r3
   4d024:	80c4d83a 	srl	r2,r16,r3
   4d028:	982cd43a 	srli	r22,r19,16
   4d02c:	8ca2983a 	sll	r17,r17,r18
   4d030:	a009883a 	mov	r4,r20
   4d034:	b00b883a 	mov	r5,r22
   4d038:	1478b03a 	or	fp,r2,r17
   4d03c:	004d2940 	call	4d294 <__umodsi3>
   4d040:	a009883a 	mov	r4,r20
   4d044:	b00b883a 	mov	r5,r22
   4d048:	1023883a 	mov	r17,r2
   4d04c:	004d2300 	call	4d230 <__udivsi3>
   4d050:	9d7fffcc 	andi	r21,r19,65535
   4d054:	880a943a 	slli	r5,r17,16
   4d058:	e008d43a 	srli	r4,fp,16
   4d05c:	a885383a 	mul	r2,r21,r2
   4d060:	84a8983a 	sll	r20,r16,r18
   4d064:	2148b03a 	or	r4,r4,r5
   4d068:	2080042e 	bgeu	r4,r2,4d07c <__umoddi3+0x47c>
   4d06c:	24c9883a 	add	r4,r4,r19
   4d070:	24c00236 	bltu	r4,r19,4d07c <__umoddi3+0x47c>
   4d074:	2080012e 	bgeu	r4,r2,4d07c <__umoddi3+0x47c>
   4d078:	24c9883a 	add	r4,r4,r19
   4d07c:	20a3c83a 	sub	r17,r4,r2
   4d080:	b00b883a 	mov	r5,r22
   4d084:	8809883a 	mov	r4,r17
   4d088:	004d2940 	call	4d294 <__umodsi3>
   4d08c:	102f883a 	mov	r23,r2
   4d090:	8809883a 	mov	r4,r17
   4d094:	b00b883a 	mov	r5,r22
   4d098:	004d2300 	call	4d230 <__udivsi3>
   4d09c:	b82e943a 	slli	r23,r23,16
   4d0a0:	a885383a 	mul	r2,r21,r2
   4d0a4:	e13fffcc 	andi	r4,fp,65535
   4d0a8:	25c8b03a 	or	r4,r4,r23
   4d0ac:	2080042e 	bgeu	r4,r2,4d0c0 <__umoddi3+0x4c0>
   4d0b0:	24c9883a 	add	r4,r4,r19
   4d0b4:	24c00236 	bltu	r4,r19,4d0c0 <__umoddi3+0x4c0>
   4d0b8:	2080012e 	bgeu	r4,r2,4d0c0 <__umoddi3+0x4c0>
   4d0bc:	24c9883a 	add	r4,r4,r19
   4d0c0:	20a3c83a 	sub	r17,r4,r2
   4d0c4:	003f4806 	br	4cde8 <__alt_data_end+0xfffccde8>
   4d0c8:	2c8fc83a 	sub	r7,r5,r18
   4d0cc:	1545c83a 	sub	r2,r2,r21
   4d0d0:	29cb803a 	cmpltu	r5,r5,r7
   4d0d4:	1145c83a 	sub	r2,r2,r5
   4d0d8:	4089c83a 	sub	r4,r8,r2
   4d0dc:	003fc706 	br	4cffc <__alt_data_end+0xfffccffc>
   4d0e0:	01000604 	movi	r4,24
   4d0e4:	003f1806 	br	4cd48 <__alt_data_end+0xfffccd48>
   4d0e8:	00800604 	movi	r2,24
   4d0ec:	003f3206 	br	4cdb8 <__alt_data_end+0xfffccdb8>
   4d0f0:	01000604 	movi	r4,24
   4d0f4:	003ed906 	br	4cc5c <__alt_data_end+0xfffccc5c>
   4d0f8:	413fa52e 	bgeu	r8,r4,4cf90 <__alt_data_end+0xfffccf90>
   4d0fc:	297fff84 	addi	r5,r5,-2
   4d100:	4551883a 	add	r8,r8,r21
   4d104:	003fa306 	br	4cf94 <__alt_data_end+0xfffccf94>
   4d108:	15ff8b2e 	bgeu	r2,r23,4cf38 <__alt_data_end+0xfffccf38>
   4d10c:	31bfff84 	addi	r6,r6,-2
   4d110:	1545883a 	add	r2,r2,r21
   4d114:	003f8906 	br	4cf3c <__alt_data_end+0xfffccf3c>
   4d118:	24c9883a 	add	r4,r4,r19
   4d11c:	003eee06 	br	4ccd8 <__alt_data_end+0xfffcccd8>
   4d120:	8005883a 	mov	r2,r16
   4d124:	003f1706 	br	4cd84 <__alt_data_end+0xfffccd84>
   4d128:	817fe736 	bltu	r16,r5,4d0c8 <__alt_data_end+0xfffcd0c8>
   4d12c:	280f883a 	mov	r7,r5
   4d130:	0009883a 	mov	r4,zero
   4d134:	003fb106 	br	4cffc <__alt_data_end+0xfffccffc>

0004d138 <__divsi3>:
   4d138:	20001b16 	blt	r4,zero,4d1a8 <__divsi3+0x70>
   4d13c:	000f883a 	mov	r7,zero
   4d140:	28001616 	blt	r5,zero,4d19c <__divsi3+0x64>
   4d144:	200d883a 	mov	r6,r4
   4d148:	29001a2e 	bgeu	r5,r4,4d1b4 <__divsi3+0x7c>
   4d14c:	00800804 	movi	r2,32
   4d150:	00c00044 	movi	r3,1
   4d154:	00000106 	br	4d15c <__divsi3+0x24>
   4d158:	10000d26 	beq	r2,zero,4d190 <__divsi3+0x58>
   4d15c:	294b883a 	add	r5,r5,r5
   4d160:	10bfffc4 	addi	r2,r2,-1
   4d164:	18c7883a 	add	r3,r3,r3
   4d168:	293ffb36 	bltu	r5,r4,4d158 <__alt_data_end+0xfffcd158>
   4d16c:	0005883a 	mov	r2,zero
   4d170:	18000726 	beq	r3,zero,4d190 <__divsi3+0x58>
   4d174:	0005883a 	mov	r2,zero
   4d178:	31400236 	bltu	r6,r5,4d184 <__divsi3+0x4c>
   4d17c:	314dc83a 	sub	r6,r6,r5
   4d180:	10c4b03a 	or	r2,r2,r3
   4d184:	1806d07a 	srli	r3,r3,1
   4d188:	280ad07a 	srli	r5,r5,1
   4d18c:	183ffa1e 	bne	r3,zero,4d178 <__alt_data_end+0xfffcd178>
   4d190:	38000126 	beq	r7,zero,4d198 <__divsi3+0x60>
   4d194:	0085c83a 	sub	r2,zero,r2
   4d198:	f800283a 	ret
   4d19c:	014bc83a 	sub	r5,zero,r5
   4d1a0:	39c0005c 	xori	r7,r7,1
   4d1a4:	003fe706 	br	4d144 <__alt_data_end+0xfffcd144>
   4d1a8:	0109c83a 	sub	r4,zero,r4
   4d1ac:	01c00044 	movi	r7,1
   4d1b0:	003fe306 	br	4d140 <__alt_data_end+0xfffcd140>
   4d1b4:	00c00044 	movi	r3,1
   4d1b8:	003fee06 	br	4d174 <__alt_data_end+0xfffcd174>

0004d1bc <__modsi3>:
   4d1bc:	20001716 	blt	r4,zero,4d21c <__modsi3+0x60>
   4d1c0:	000f883a 	mov	r7,zero
   4d1c4:	2005883a 	mov	r2,r4
   4d1c8:	28001216 	blt	r5,zero,4d214 <__modsi3+0x58>
   4d1cc:	2900162e 	bgeu	r5,r4,4d228 <__modsi3+0x6c>
   4d1d0:	01800804 	movi	r6,32
   4d1d4:	00c00044 	movi	r3,1
   4d1d8:	00000106 	br	4d1e0 <__modsi3+0x24>
   4d1dc:	30000a26 	beq	r6,zero,4d208 <__modsi3+0x4c>
   4d1e0:	294b883a 	add	r5,r5,r5
   4d1e4:	31bfffc4 	addi	r6,r6,-1
   4d1e8:	18c7883a 	add	r3,r3,r3
   4d1ec:	293ffb36 	bltu	r5,r4,4d1dc <__alt_data_end+0xfffcd1dc>
   4d1f0:	18000526 	beq	r3,zero,4d208 <__modsi3+0x4c>
   4d1f4:	1806d07a 	srli	r3,r3,1
   4d1f8:	11400136 	bltu	r2,r5,4d200 <__modsi3+0x44>
   4d1fc:	1145c83a 	sub	r2,r2,r5
   4d200:	280ad07a 	srli	r5,r5,1
   4d204:	183ffb1e 	bne	r3,zero,4d1f4 <__alt_data_end+0xfffcd1f4>
   4d208:	38000126 	beq	r7,zero,4d210 <__modsi3+0x54>
   4d20c:	0085c83a 	sub	r2,zero,r2
   4d210:	f800283a 	ret
   4d214:	014bc83a 	sub	r5,zero,r5
   4d218:	003fec06 	br	4d1cc <__alt_data_end+0xfffcd1cc>
   4d21c:	0109c83a 	sub	r4,zero,r4
   4d220:	01c00044 	movi	r7,1
   4d224:	003fe706 	br	4d1c4 <__alt_data_end+0xfffcd1c4>
   4d228:	00c00044 	movi	r3,1
   4d22c:	003ff106 	br	4d1f4 <__alt_data_end+0xfffcd1f4>

0004d230 <__udivsi3>:
   4d230:	200d883a 	mov	r6,r4
   4d234:	2900152e 	bgeu	r5,r4,4d28c <__udivsi3+0x5c>
   4d238:	28001416 	blt	r5,zero,4d28c <__udivsi3+0x5c>
   4d23c:	00800804 	movi	r2,32
   4d240:	00c00044 	movi	r3,1
   4d244:	00000206 	br	4d250 <__udivsi3+0x20>
   4d248:	10000e26 	beq	r2,zero,4d284 <__udivsi3+0x54>
   4d24c:	28000516 	blt	r5,zero,4d264 <__udivsi3+0x34>
   4d250:	294b883a 	add	r5,r5,r5
   4d254:	10bfffc4 	addi	r2,r2,-1
   4d258:	18c7883a 	add	r3,r3,r3
   4d25c:	293ffa36 	bltu	r5,r4,4d248 <__alt_data_end+0xfffcd248>
   4d260:	18000826 	beq	r3,zero,4d284 <__udivsi3+0x54>
   4d264:	0005883a 	mov	r2,zero
   4d268:	31400236 	bltu	r6,r5,4d274 <__udivsi3+0x44>
   4d26c:	314dc83a 	sub	r6,r6,r5
   4d270:	10c4b03a 	or	r2,r2,r3
   4d274:	1806d07a 	srli	r3,r3,1
   4d278:	280ad07a 	srli	r5,r5,1
   4d27c:	183ffa1e 	bne	r3,zero,4d268 <__alt_data_end+0xfffcd268>
   4d280:	f800283a 	ret
   4d284:	0005883a 	mov	r2,zero
   4d288:	f800283a 	ret
   4d28c:	00c00044 	movi	r3,1
   4d290:	003ff406 	br	4d264 <__alt_data_end+0xfffcd264>

0004d294 <__umodsi3>:
   4d294:	2005883a 	mov	r2,r4
   4d298:	2900122e 	bgeu	r5,r4,4d2e4 <__umodsi3+0x50>
   4d29c:	28001116 	blt	r5,zero,4d2e4 <__umodsi3+0x50>
   4d2a0:	01800804 	movi	r6,32
   4d2a4:	00c00044 	movi	r3,1
   4d2a8:	00000206 	br	4d2b4 <__umodsi3+0x20>
   4d2ac:	30000c26 	beq	r6,zero,4d2e0 <__umodsi3+0x4c>
   4d2b0:	28000516 	blt	r5,zero,4d2c8 <__umodsi3+0x34>
   4d2b4:	294b883a 	add	r5,r5,r5
   4d2b8:	31bfffc4 	addi	r6,r6,-1
   4d2bc:	18c7883a 	add	r3,r3,r3
   4d2c0:	293ffa36 	bltu	r5,r4,4d2ac <__alt_data_end+0xfffcd2ac>
   4d2c4:	18000626 	beq	r3,zero,4d2e0 <__umodsi3+0x4c>
   4d2c8:	1806d07a 	srli	r3,r3,1
   4d2cc:	11400136 	bltu	r2,r5,4d2d4 <__umodsi3+0x40>
   4d2d0:	1145c83a 	sub	r2,r2,r5
   4d2d4:	280ad07a 	srli	r5,r5,1
   4d2d8:	183ffb1e 	bne	r3,zero,4d2c8 <__alt_data_end+0xfffcd2c8>
   4d2dc:	f800283a 	ret
   4d2e0:	f800283a 	ret
   4d2e4:	00c00044 	movi	r3,1
   4d2e8:	003ff706 	br	4d2c8 <__alt_data_end+0xfffcd2c8>

0004d2ec <__adddf3>:
   4d2ec:	02c00434 	movhi	r11,16
   4d2f0:	5affffc4 	addi	r11,r11,-1
   4d2f4:	2806d7fa 	srli	r3,r5,31
   4d2f8:	2ad4703a 	and	r10,r5,r11
   4d2fc:	3ad2703a 	and	r9,r7,r11
   4d300:	3804d53a 	srli	r2,r7,20
   4d304:	3018d77a 	srli	r12,r6,29
   4d308:	280ad53a 	srli	r5,r5,20
   4d30c:	501490fa 	slli	r10,r10,3
   4d310:	2010d77a 	srli	r8,r4,29
   4d314:	481290fa 	slli	r9,r9,3
   4d318:	380ed7fa 	srli	r7,r7,31
   4d31c:	defffb04 	addi	sp,sp,-20
   4d320:	dc800215 	stw	r18,8(sp)
   4d324:	dc400115 	stw	r17,4(sp)
   4d328:	dc000015 	stw	r16,0(sp)
   4d32c:	dfc00415 	stw	ra,16(sp)
   4d330:	dcc00315 	stw	r19,12(sp)
   4d334:	1c803fcc 	andi	r18,r3,255
   4d338:	2c01ffcc 	andi	r16,r5,2047
   4d33c:	5210b03a 	or	r8,r10,r8
   4d340:	202290fa 	slli	r17,r4,3
   4d344:	1081ffcc 	andi	r2,r2,2047
   4d348:	4b12b03a 	or	r9,r9,r12
   4d34c:	300c90fa 	slli	r6,r6,3
   4d350:	91c07526 	beq	r18,r7,4d528 <__adddf3+0x23c>
   4d354:	8087c83a 	sub	r3,r16,r2
   4d358:	00c0ab0e 	bge	zero,r3,4d608 <__adddf3+0x31c>
   4d35c:	10002a1e 	bne	r2,zero,4d408 <__adddf3+0x11c>
   4d360:	4984b03a 	or	r2,r9,r6
   4d364:	1000961e 	bne	r2,zero,4d5c0 <__adddf3+0x2d4>
   4d368:	888001cc 	andi	r2,r17,7
   4d36c:	10000726 	beq	r2,zero,4d38c <__adddf3+0xa0>
   4d370:	888003cc 	andi	r2,r17,15
   4d374:	00c00104 	movi	r3,4
   4d378:	10c00426 	beq	r2,r3,4d38c <__adddf3+0xa0>
   4d37c:	88c7883a 	add	r3,r17,r3
   4d380:	1c63803a 	cmpltu	r17,r3,r17
   4d384:	4451883a 	add	r8,r8,r17
   4d388:	1823883a 	mov	r17,r3
   4d38c:	4080202c 	andhi	r2,r8,128
   4d390:	10005926 	beq	r2,zero,4d4f8 <__adddf3+0x20c>
   4d394:	84000044 	addi	r16,r16,1
   4d398:	0081ffc4 	movi	r2,2047
   4d39c:	8080ba26 	beq	r16,r2,4d688 <__adddf3+0x39c>
   4d3a0:	00bfe034 	movhi	r2,65408
   4d3a4:	10bfffc4 	addi	r2,r2,-1
   4d3a8:	4090703a 	and	r8,r8,r2
   4d3ac:	4004977a 	slli	r2,r8,29
   4d3b0:	4010927a 	slli	r8,r8,9
   4d3b4:	8822d0fa 	srli	r17,r17,3
   4d3b8:	8401ffcc 	andi	r16,r16,2047
   4d3bc:	4010d33a 	srli	r8,r8,12
   4d3c0:	9007883a 	mov	r3,r18
   4d3c4:	1444b03a 	or	r2,r2,r17
   4d3c8:	8401ffcc 	andi	r16,r16,2047
   4d3cc:	8020953a 	slli	r16,r16,20
   4d3d0:	18c03fcc 	andi	r3,r3,255
   4d3d4:	01000434 	movhi	r4,16
   4d3d8:	213fffc4 	addi	r4,r4,-1
   4d3dc:	180697fa 	slli	r3,r3,31
   4d3e0:	4110703a 	and	r8,r8,r4
   4d3e4:	4410b03a 	or	r8,r8,r16
   4d3e8:	40c6b03a 	or	r3,r8,r3
   4d3ec:	dfc00417 	ldw	ra,16(sp)
   4d3f0:	dcc00317 	ldw	r19,12(sp)
   4d3f4:	dc800217 	ldw	r18,8(sp)
   4d3f8:	dc400117 	ldw	r17,4(sp)
   4d3fc:	dc000017 	ldw	r16,0(sp)
   4d400:	dec00504 	addi	sp,sp,20
   4d404:	f800283a 	ret
   4d408:	0081ffc4 	movi	r2,2047
   4d40c:	80bfd626 	beq	r16,r2,4d368 <__alt_data_end+0xfffcd368>
   4d410:	4a402034 	orhi	r9,r9,128
   4d414:	00800e04 	movi	r2,56
   4d418:	10c09f16 	blt	r2,r3,4d698 <__adddf3+0x3ac>
   4d41c:	008007c4 	movi	r2,31
   4d420:	10c0c216 	blt	r2,r3,4d72c <__adddf3+0x440>
   4d424:	00800804 	movi	r2,32
   4d428:	10c5c83a 	sub	r2,r2,r3
   4d42c:	488a983a 	sll	r5,r9,r2
   4d430:	30c8d83a 	srl	r4,r6,r3
   4d434:	3084983a 	sll	r2,r6,r2
   4d438:	48c6d83a 	srl	r3,r9,r3
   4d43c:	290cb03a 	or	r6,r5,r4
   4d440:	1004c03a 	cmpne	r2,r2,zero
   4d444:	308cb03a 	or	r6,r6,r2
   4d448:	898dc83a 	sub	r6,r17,r6
   4d44c:	89a3803a 	cmpltu	r17,r17,r6
   4d450:	40d1c83a 	sub	r8,r8,r3
   4d454:	4451c83a 	sub	r8,r8,r17
   4d458:	3023883a 	mov	r17,r6
   4d45c:	4080202c 	andhi	r2,r8,128
   4d460:	10002326 	beq	r2,zero,4d4f0 <__adddf3+0x204>
   4d464:	04c02034 	movhi	r19,128
   4d468:	9cffffc4 	addi	r19,r19,-1
   4d46c:	44e6703a 	and	r19,r8,r19
   4d470:	98007626 	beq	r19,zero,4d64c <__adddf3+0x360>
   4d474:	9809883a 	mov	r4,r19
   4d478:	004f8f00 	call	4f8f0 <__clzsi2>
   4d47c:	10fffe04 	addi	r3,r2,-8
   4d480:	010007c4 	movi	r4,31
   4d484:	20c07716 	blt	r4,r3,4d664 <__adddf3+0x378>
   4d488:	00800804 	movi	r2,32
   4d48c:	10c5c83a 	sub	r2,r2,r3
   4d490:	8884d83a 	srl	r2,r17,r2
   4d494:	98d0983a 	sll	r8,r19,r3
   4d498:	88e2983a 	sll	r17,r17,r3
   4d49c:	1204b03a 	or	r2,r2,r8
   4d4a0:	1c007416 	blt	r3,r16,4d674 <__adddf3+0x388>
   4d4a4:	1c21c83a 	sub	r16,r3,r16
   4d4a8:	82000044 	addi	r8,r16,1
   4d4ac:	00c007c4 	movi	r3,31
   4d4b0:	1a009116 	blt	r3,r8,4d6f8 <__adddf3+0x40c>
   4d4b4:	00c00804 	movi	r3,32
   4d4b8:	1a07c83a 	sub	r3,r3,r8
   4d4bc:	8a08d83a 	srl	r4,r17,r8
   4d4c0:	88e2983a 	sll	r17,r17,r3
   4d4c4:	10c6983a 	sll	r3,r2,r3
   4d4c8:	1210d83a 	srl	r8,r2,r8
   4d4cc:	8804c03a 	cmpne	r2,r17,zero
   4d4d0:	1906b03a 	or	r3,r3,r4
   4d4d4:	18a2b03a 	or	r17,r3,r2
   4d4d8:	0021883a 	mov	r16,zero
   4d4dc:	003fa206 	br	4d368 <__alt_data_end+0xfffcd368>
   4d4e0:	1890b03a 	or	r8,r3,r2
   4d4e4:	40017d26 	beq	r8,zero,4dadc <__adddf3+0x7f0>
   4d4e8:	1011883a 	mov	r8,r2
   4d4ec:	1823883a 	mov	r17,r3
   4d4f0:	888001cc 	andi	r2,r17,7
   4d4f4:	103f9e1e 	bne	r2,zero,4d370 <__alt_data_end+0xfffcd370>
   4d4f8:	4004977a 	slli	r2,r8,29
   4d4fc:	8822d0fa 	srli	r17,r17,3
   4d500:	4010d0fa 	srli	r8,r8,3
   4d504:	9007883a 	mov	r3,r18
   4d508:	1444b03a 	or	r2,r2,r17
   4d50c:	0101ffc4 	movi	r4,2047
   4d510:	81002426 	beq	r16,r4,4d5a4 <__adddf3+0x2b8>
   4d514:	8120703a 	and	r16,r16,r4
   4d518:	01000434 	movhi	r4,16
   4d51c:	213fffc4 	addi	r4,r4,-1
   4d520:	4110703a 	and	r8,r8,r4
   4d524:	003fa806 	br	4d3c8 <__alt_data_end+0xfffcd3c8>
   4d528:	8089c83a 	sub	r4,r16,r2
   4d52c:	01005e0e 	bge	zero,r4,4d6a8 <__adddf3+0x3bc>
   4d530:	10002b26 	beq	r2,zero,4d5e0 <__adddf3+0x2f4>
   4d534:	0081ffc4 	movi	r2,2047
   4d538:	80bf8b26 	beq	r16,r2,4d368 <__alt_data_end+0xfffcd368>
   4d53c:	4a402034 	orhi	r9,r9,128
   4d540:	00800e04 	movi	r2,56
   4d544:	1100a40e 	bge	r2,r4,4d7d8 <__adddf3+0x4ec>
   4d548:	498cb03a 	or	r6,r9,r6
   4d54c:	300ac03a 	cmpne	r5,r6,zero
   4d550:	0013883a 	mov	r9,zero
   4d554:	2c4b883a 	add	r5,r5,r17
   4d558:	2c63803a 	cmpltu	r17,r5,r17
   4d55c:	4a11883a 	add	r8,r9,r8
   4d560:	8a11883a 	add	r8,r17,r8
   4d564:	2823883a 	mov	r17,r5
   4d568:	4080202c 	andhi	r2,r8,128
   4d56c:	103fe026 	beq	r2,zero,4d4f0 <__alt_data_end+0xfffcd4f0>
   4d570:	84000044 	addi	r16,r16,1
   4d574:	0081ffc4 	movi	r2,2047
   4d578:	8080d226 	beq	r16,r2,4d8c4 <__adddf3+0x5d8>
   4d57c:	00bfe034 	movhi	r2,65408
   4d580:	10bfffc4 	addi	r2,r2,-1
   4d584:	4090703a 	and	r8,r8,r2
   4d588:	880ad07a 	srli	r5,r17,1
   4d58c:	400897fa 	slli	r4,r8,31
   4d590:	88c0004c 	andi	r3,r17,1
   4d594:	28e2b03a 	or	r17,r5,r3
   4d598:	4010d07a 	srli	r8,r8,1
   4d59c:	2462b03a 	or	r17,r4,r17
   4d5a0:	003f7106 	br	4d368 <__alt_data_end+0xfffcd368>
   4d5a4:	4088b03a 	or	r4,r8,r2
   4d5a8:	20014526 	beq	r4,zero,4dac0 <__adddf3+0x7d4>
   4d5ac:	01000434 	movhi	r4,16
   4d5b0:	42000234 	orhi	r8,r8,8
   4d5b4:	213fffc4 	addi	r4,r4,-1
   4d5b8:	4110703a 	and	r8,r8,r4
   4d5bc:	003f8206 	br	4d3c8 <__alt_data_end+0xfffcd3c8>
   4d5c0:	18ffffc4 	addi	r3,r3,-1
   4d5c4:	1800491e 	bne	r3,zero,4d6ec <__adddf3+0x400>
   4d5c8:	898bc83a 	sub	r5,r17,r6
   4d5cc:	8963803a 	cmpltu	r17,r17,r5
   4d5d0:	4251c83a 	sub	r8,r8,r9
   4d5d4:	4451c83a 	sub	r8,r8,r17
   4d5d8:	2823883a 	mov	r17,r5
   4d5dc:	003f9f06 	br	4d45c <__alt_data_end+0xfffcd45c>
   4d5e0:	4984b03a 	or	r2,r9,r6
   4d5e4:	103f6026 	beq	r2,zero,4d368 <__alt_data_end+0xfffcd368>
   4d5e8:	213fffc4 	addi	r4,r4,-1
   4d5ec:	2000931e 	bne	r4,zero,4d83c <__adddf3+0x550>
   4d5f0:	898d883a 	add	r6,r17,r6
   4d5f4:	3463803a 	cmpltu	r17,r6,r17
   4d5f8:	4251883a 	add	r8,r8,r9
   4d5fc:	8a11883a 	add	r8,r17,r8
   4d600:	3023883a 	mov	r17,r6
   4d604:	003fd806 	br	4d568 <__alt_data_end+0xfffcd568>
   4d608:	1800541e 	bne	r3,zero,4d75c <__adddf3+0x470>
   4d60c:	80800044 	addi	r2,r16,1
   4d610:	1081ffcc 	andi	r2,r2,2047
   4d614:	00c00044 	movi	r3,1
   4d618:	1880a00e 	bge	r3,r2,4d89c <__adddf3+0x5b0>
   4d61c:	8989c83a 	sub	r4,r17,r6
   4d620:	8905803a 	cmpltu	r2,r17,r4
   4d624:	4267c83a 	sub	r19,r8,r9
   4d628:	98a7c83a 	sub	r19,r19,r2
   4d62c:	9880202c 	andhi	r2,r19,128
   4d630:	10006326 	beq	r2,zero,4d7c0 <__adddf3+0x4d4>
   4d634:	3463c83a 	sub	r17,r6,r17
   4d638:	4a07c83a 	sub	r3,r9,r8
   4d63c:	344d803a 	cmpltu	r6,r6,r17
   4d640:	19a7c83a 	sub	r19,r3,r6
   4d644:	3825883a 	mov	r18,r7
   4d648:	983f8a1e 	bne	r19,zero,4d474 <__alt_data_end+0xfffcd474>
   4d64c:	8809883a 	mov	r4,r17
   4d650:	004f8f00 	call	4f8f0 <__clzsi2>
   4d654:	10800804 	addi	r2,r2,32
   4d658:	10fffe04 	addi	r3,r2,-8
   4d65c:	010007c4 	movi	r4,31
   4d660:	20ff890e 	bge	r4,r3,4d488 <__alt_data_end+0xfffcd488>
   4d664:	10bff604 	addi	r2,r2,-40
   4d668:	8884983a 	sll	r2,r17,r2
   4d66c:	0023883a 	mov	r17,zero
   4d670:	1c3f8c0e 	bge	r3,r16,4d4a4 <__alt_data_end+0xfffcd4a4>
   4d674:	023fe034 	movhi	r8,65408
   4d678:	423fffc4 	addi	r8,r8,-1
   4d67c:	80e1c83a 	sub	r16,r16,r3
   4d680:	1210703a 	and	r8,r2,r8
   4d684:	003f3806 	br	4d368 <__alt_data_end+0xfffcd368>
   4d688:	9007883a 	mov	r3,r18
   4d68c:	0011883a 	mov	r8,zero
   4d690:	0005883a 	mov	r2,zero
   4d694:	003f4c06 	br	4d3c8 <__alt_data_end+0xfffcd3c8>
   4d698:	498cb03a 	or	r6,r9,r6
   4d69c:	300cc03a 	cmpne	r6,r6,zero
   4d6a0:	0007883a 	mov	r3,zero
   4d6a4:	003f6806 	br	4d448 <__alt_data_end+0xfffcd448>
   4d6a8:	20009c1e 	bne	r4,zero,4d91c <__adddf3+0x630>
   4d6ac:	80800044 	addi	r2,r16,1
   4d6b0:	1141ffcc 	andi	r5,r2,2047
   4d6b4:	01000044 	movi	r4,1
   4d6b8:	2140670e 	bge	r4,r5,4d858 <__adddf3+0x56c>
   4d6bc:	0101ffc4 	movi	r4,2047
   4d6c0:	11007f26 	beq	r2,r4,4d8c0 <__adddf3+0x5d4>
   4d6c4:	898d883a 	add	r6,r17,r6
   4d6c8:	4247883a 	add	r3,r8,r9
   4d6cc:	3451803a 	cmpltu	r8,r6,r17
   4d6d0:	40d1883a 	add	r8,r8,r3
   4d6d4:	402297fa 	slli	r17,r8,31
   4d6d8:	300cd07a 	srli	r6,r6,1
   4d6dc:	4010d07a 	srli	r8,r8,1
   4d6e0:	1021883a 	mov	r16,r2
   4d6e4:	89a2b03a 	or	r17,r17,r6
   4d6e8:	003f1f06 	br	4d368 <__alt_data_end+0xfffcd368>
   4d6ec:	0081ffc4 	movi	r2,2047
   4d6f0:	80bf481e 	bne	r16,r2,4d414 <__alt_data_end+0xfffcd414>
   4d6f4:	003f1c06 	br	4d368 <__alt_data_end+0xfffcd368>
   4d6f8:	843ff844 	addi	r16,r16,-31
   4d6fc:	01000804 	movi	r4,32
   4d700:	1406d83a 	srl	r3,r2,r16
   4d704:	41005026 	beq	r8,r4,4d848 <__adddf3+0x55c>
   4d708:	01001004 	movi	r4,64
   4d70c:	2211c83a 	sub	r8,r4,r8
   4d710:	1204983a 	sll	r2,r2,r8
   4d714:	88a2b03a 	or	r17,r17,r2
   4d718:	8822c03a 	cmpne	r17,r17,zero
   4d71c:	1c62b03a 	or	r17,r3,r17
   4d720:	0011883a 	mov	r8,zero
   4d724:	0021883a 	mov	r16,zero
   4d728:	003f7106 	br	4d4f0 <__alt_data_end+0xfffcd4f0>
   4d72c:	193ff804 	addi	r4,r3,-32
   4d730:	00800804 	movi	r2,32
   4d734:	4908d83a 	srl	r4,r9,r4
   4d738:	18804526 	beq	r3,r2,4d850 <__adddf3+0x564>
   4d73c:	00801004 	movi	r2,64
   4d740:	10c5c83a 	sub	r2,r2,r3
   4d744:	4886983a 	sll	r3,r9,r2
   4d748:	198cb03a 	or	r6,r3,r6
   4d74c:	300cc03a 	cmpne	r6,r6,zero
   4d750:	218cb03a 	or	r6,r4,r6
   4d754:	0007883a 	mov	r3,zero
   4d758:	003f3b06 	br	4d448 <__alt_data_end+0xfffcd448>
   4d75c:	80002a26 	beq	r16,zero,4d808 <__adddf3+0x51c>
   4d760:	0101ffc4 	movi	r4,2047
   4d764:	11006826 	beq	r2,r4,4d908 <__adddf3+0x61c>
   4d768:	00c7c83a 	sub	r3,zero,r3
   4d76c:	42002034 	orhi	r8,r8,128
   4d770:	01000e04 	movi	r4,56
   4d774:	20c07c16 	blt	r4,r3,4d968 <__adddf3+0x67c>
   4d778:	010007c4 	movi	r4,31
   4d77c:	20c0da16 	blt	r4,r3,4dae8 <__adddf3+0x7fc>
   4d780:	01000804 	movi	r4,32
   4d784:	20c9c83a 	sub	r4,r4,r3
   4d788:	4114983a 	sll	r10,r8,r4
   4d78c:	88cad83a 	srl	r5,r17,r3
   4d790:	8908983a 	sll	r4,r17,r4
   4d794:	40c6d83a 	srl	r3,r8,r3
   4d798:	5162b03a 	or	r17,r10,r5
   4d79c:	2008c03a 	cmpne	r4,r4,zero
   4d7a0:	8922b03a 	or	r17,r17,r4
   4d7a4:	3463c83a 	sub	r17,r6,r17
   4d7a8:	48c7c83a 	sub	r3,r9,r3
   4d7ac:	344d803a 	cmpltu	r6,r6,r17
   4d7b0:	1991c83a 	sub	r8,r3,r6
   4d7b4:	1021883a 	mov	r16,r2
   4d7b8:	3825883a 	mov	r18,r7
   4d7bc:	003f2706 	br	4d45c <__alt_data_end+0xfffcd45c>
   4d7c0:	24d0b03a 	or	r8,r4,r19
   4d7c4:	40001b1e 	bne	r8,zero,4d834 <__adddf3+0x548>
   4d7c8:	0005883a 	mov	r2,zero
   4d7cc:	0007883a 	mov	r3,zero
   4d7d0:	0021883a 	mov	r16,zero
   4d7d4:	003f4d06 	br	4d50c <__alt_data_end+0xfffcd50c>
   4d7d8:	008007c4 	movi	r2,31
   4d7dc:	11003c16 	blt	r2,r4,4d8d0 <__adddf3+0x5e4>
   4d7e0:	00800804 	movi	r2,32
   4d7e4:	1105c83a 	sub	r2,r2,r4
   4d7e8:	488e983a 	sll	r7,r9,r2
   4d7ec:	310ad83a 	srl	r5,r6,r4
   4d7f0:	3084983a 	sll	r2,r6,r2
   4d7f4:	4912d83a 	srl	r9,r9,r4
   4d7f8:	394ab03a 	or	r5,r7,r5
   4d7fc:	1004c03a 	cmpne	r2,r2,zero
   4d800:	288ab03a 	or	r5,r5,r2
   4d804:	003f5306 	br	4d554 <__alt_data_end+0xfffcd554>
   4d808:	4448b03a 	or	r4,r8,r17
   4d80c:	20003e26 	beq	r4,zero,4d908 <__adddf3+0x61c>
   4d810:	00c6303a 	nor	r3,zero,r3
   4d814:	18003a1e 	bne	r3,zero,4d900 <__adddf3+0x614>
   4d818:	3463c83a 	sub	r17,r6,r17
   4d81c:	4a07c83a 	sub	r3,r9,r8
   4d820:	344d803a 	cmpltu	r6,r6,r17
   4d824:	1991c83a 	sub	r8,r3,r6
   4d828:	1021883a 	mov	r16,r2
   4d82c:	3825883a 	mov	r18,r7
   4d830:	003f0a06 	br	4d45c <__alt_data_end+0xfffcd45c>
   4d834:	2023883a 	mov	r17,r4
   4d838:	003f0d06 	br	4d470 <__alt_data_end+0xfffcd470>
   4d83c:	0081ffc4 	movi	r2,2047
   4d840:	80bf3f1e 	bne	r16,r2,4d540 <__alt_data_end+0xfffcd540>
   4d844:	003ec806 	br	4d368 <__alt_data_end+0xfffcd368>
   4d848:	0005883a 	mov	r2,zero
   4d84c:	003fb106 	br	4d714 <__alt_data_end+0xfffcd714>
   4d850:	0007883a 	mov	r3,zero
   4d854:	003fbc06 	br	4d748 <__alt_data_end+0xfffcd748>
   4d858:	4444b03a 	or	r2,r8,r17
   4d85c:	8000871e 	bne	r16,zero,4da7c <__adddf3+0x790>
   4d860:	1000ba26 	beq	r2,zero,4db4c <__adddf3+0x860>
   4d864:	4984b03a 	or	r2,r9,r6
   4d868:	103ebf26 	beq	r2,zero,4d368 <__alt_data_end+0xfffcd368>
   4d86c:	8985883a 	add	r2,r17,r6
   4d870:	4247883a 	add	r3,r8,r9
   4d874:	1451803a 	cmpltu	r8,r2,r17
   4d878:	40d1883a 	add	r8,r8,r3
   4d87c:	40c0202c 	andhi	r3,r8,128
   4d880:	1023883a 	mov	r17,r2
   4d884:	183f1a26 	beq	r3,zero,4d4f0 <__alt_data_end+0xfffcd4f0>
   4d888:	00bfe034 	movhi	r2,65408
   4d88c:	10bfffc4 	addi	r2,r2,-1
   4d890:	2021883a 	mov	r16,r4
   4d894:	4090703a 	and	r8,r8,r2
   4d898:	003eb306 	br	4d368 <__alt_data_end+0xfffcd368>
   4d89c:	4444b03a 	or	r2,r8,r17
   4d8a0:	8000291e 	bne	r16,zero,4d948 <__adddf3+0x65c>
   4d8a4:	10004b1e 	bne	r2,zero,4d9d4 <__adddf3+0x6e8>
   4d8a8:	4990b03a 	or	r8,r9,r6
   4d8ac:	40008b26 	beq	r8,zero,4dadc <__adddf3+0x7f0>
   4d8b0:	4811883a 	mov	r8,r9
   4d8b4:	3023883a 	mov	r17,r6
   4d8b8:	3825883a 	mov	r18,r7
   4d8bc:	003eaa06 	br	4d368 <__alt_data_end+0xfffcd368>
   4d8c0:	1021883a 	mov	r16,r2
   4d8c4:	0011883a 	mov	r8,zero
   4d8c8:	0005883a 	mov	r2,zero
   4d8cc:	003f0f06 	br	4d50c <__alt_data_end+0xfffcd50c>
   4d8d0:	217ff804 	addi	r5,r4,-32
   4d8d4:	00800804 	movi	r2,32
   4d8d8:	494ad83a 	srl	r5,r9,r5
   4d8dc:	20807d26 	beq	r4,r2,4dad4 <__adddf3+0x7e8>
   4d8e0:	00801004 	movi	r2,64
   4d8e4:	1109c83a 	sub	r4,r2,r4
   4d8e8:	4912983a 	sll	r9,r9,r4
   4d8ec:	498cb03a 	or	r6,r9,r6
   4d8f0:	300cc03a 	cmpne	r6,r6,zero
   4d8f4:	298ab03a 	or	r5,r5,r6
   4d8f8:	0013883a 	mov	r9,zero
   4d8fc:	003f1506 	br	4d554 <__alt_data_end+0xfffcd554>
   4d900:	0101ffc4 	movi	r4,2047
   4d904:	113f9a1e 	bne	r2,r4,4d770 <__alt_data_end+0xfffcd770>
   4d908:	4811883a 	mov	r8,r9
   4d90c:	3023883a 	mov	r17,r6
   4d910:	1021883a 	mov	r16,r2
   4d914:	3825883a 	mov	r18,r7
   4d918:	003e9306 	br	4d368 <__alt_data_end+0xfffcd368>
   4d91c:	8000161e 	bne	r16,zero,4d978 <__adddf3+0x68c>
   4d920:	444ab03a 	or	r5,r8,r17
   4d924:	28005126 	beq	r5,zero,4da6c <__adddf3+0x780>
   4d928:	0108303a 	nor	r4,zero,r4
   4d92c:	20004d1e 	bne	r4,zero,4da64 <__adddf3+0x778>
   4d930:	89a3883a 	add	r17,r17,r6
   4d934:	4253883a 	add	r9,r8,r9
   4d938:	898d803a 	cmpltu	r6,r17,r6
   4d93c:	3251883a 	add	r8,r6,r9
   4d940:	1021883a 	mov	r16,r2
   4d944:	003f0806 	br	4d568 <__alt_data_end+0xfffcd568>
   4d948:	1000301e 	bne	r2,zero,4da0c <__adddf3+0x720>
   4d94c:	4984b03a 	or	r2,r9,r6
   4d950:	10007126 	beq	r2,zero,4db18 <__adddf3+0x82c>
   4d954:	4811883a 	mov	r8,r9
   4d958:	3023883a 	mov	r17,r6
   4d95c:	3825883a 	mov	r18,r7
   4d960:	0401ffc4 	movi	r16,2047
   4d964:	003e8006 	br	4d368 <__alt_data_end+0xfffcd368>
   4d968:	4462b03a 	or	r17,r8,r17
   4d96c:	8822c03a 	cmpne	r17,r17,zero
   4d970:	0007883a 	mov	r3,zero
   4d974:	003f8b06 	br	4d7a4 <__alt_data_end+0xfffcd7a4>
   4d978:	0141ffc4 	movi	r5,2047
   4d97c:	11403b26 	beq	r2,r5,4da6c <__adddf3+0x780>
   4d980:	0109c83a 	sub	r4,zero,r4
   4d984:	42002034 	orhi	r8,r8,128
   4d988:	01400e04 	movi	r5,56
   4d98c:	29006716 	blt	r5,r4,4db2c <__adddf3+0x840>
   4d990:	014007c4 	movi	r5,31
   4d994:	29007016 	blt	r5,r4,4db58 <__adddf3+0x86c>
   4d998:	01400804 	movi	r5,32
   4d99c:	290bc83a 	sub	r5,r5,r4
   4d9a0:	4154983a 	sll	r10,r8,r5
   4d9a4:	890ed83a 	srl	r7,r17,r4
   4d9a8:	894a983a 	sll	r5,r17,r5
   4d9ac:	4108d83a 	srl	r4,r8,r4
   4d9b0:	51e2b03a 	or	r17,r10,r7
   4d9b4:	280ac03a 	cmpne	r5,r5,zero
   4d9b8:	8962b03a 	or	r17,r17,r5
   4d9bc:	89a3883a 	add	r17,r17,r6
   4d9c0:	2253883a 	add	r9,r4,r9
   4d9c4:	898d803a 	cmpltu	r6,r17,r6
   4d9c8:	3251883a 	add	r8,r6,r9
   4d9cc:	1021883a 	mov	r16,r2
   4d9d0:	003ee506 	br	4d568 <__alt_data_end+0xfffcd568>
   4d9d4:	4984b03a 	or	r2,r9,r6
   4d9d8:	103e6326 	beq	r2,zero,4d368 <__alt_data_end+0xfffcd368>
   4d9dc:	8987c83a 	sub	r3,r17,r6
   4d9e0:	88c9803a 	cmpltu	r4,r17,r3
   4d9e4:	4245c83a 	sub	r2,r8,r9
   4d9e8:	1105c83a 	sub	r2,r2,r4
   4d9ec:	1100202c 	andhi	r4,r2,128
   4d9f0:	203ebb26 	beq	r4,zero,4d4e0 <__alt_data_end+0xfffcd4e0>
   4d9f4:	3463c83a 	sub	r17,r6,r17
   4d9f8:	4a07c83a 	sub	r3,r9,r8
   4d9fc:	344d803a 	cmpltu	r6,r6,r17
   4da00:	1991c83a 	sub	r8,r3,r6
   4da04:	3825883a 	mov	r18,r7
   4da08:	003e5706 	br	4d368 <__alt_data_end+0xfffcd368>
   4da0c:	4984b03a 	or	r2,r9,r6
   4da10:	10002e26 	beq	r2,zero,4dacc <__adddf3+0x7e0>
   4da14:	4004d0fa 	srli	r2,r8,3
   4da18:	8822d0fa 	srli	r17,r17,3
   4da1c:	4010977a 	slli	r8,r8,29
   4da20:	10c0022c 	andhi	r3,r2,8
   4da24:	4462b03a 	or	r17,r8,r17
   4da28:	18000826 	beq	r3,zero,4da4c <__adddf3+0x760>
   4da2c:	4808d0fa 	srli	r4,r9,3
   4da30:	20c0022c 	andhi	r3,r4,8
   4da34:	1800051e 	bne	r3,zero,4da4c <__adddf3+0x760>
   4da38:	300cd0fa 	srli	r6,r6,3
   4da3c:	4806977a 	slli	r3,r9,29
   4da40:	2005883a 	mov	r2,r4
   4da44:	3825883a 	mov	r18,r7
   4da48:	19a2b03a 	or	r17,r3,r6
   4da4c:	8810d77a 	srli	r8,r17,29
   4da50:	100490fa 	slli	r2,r2,3
   4da54:	882290fa 	slli	r17,r17,3
   4da58:	0401ffc4 	movi	r16,2047
   4da5c:	4090b03a 	or	r8,r8,r2
   4da60:	003e4106 	br	4d368 <__alt_data_end+0xfffcd368>
   4da64:	0141ffc4 	movi	r5,2047
   4da68:	117fc71e 	bne	r2,r5,4d988 <__alt_data_end+0xfffcd988>
   4da6c:	4811883a 	mov	r8,r9
   4da70:	3023883a 	mov	r17,r6
   4da74:	1021883a 	mov	r16,r2
   4da78:	003e3b06 	br	4d368 <__alt_data_end+0xfffcd368>
   4da7c:	10002f26 	beq	r2,zero,4db3c <__adddf3+0x850>
   4da80:	4984b03a 	or	r2,r9,r6
   4da84:	10001126 	beq	r2,zero,4dacc <__adddf3+0x7e0>
   4da88:	4004d0fa 	srli	r2,r8,3
   4da8c:	8822d0fa 	srli	r17,r17,3
   4da90:	4010977a 	slli	r8,r8,29
   4da94:	10c0022c 	andhi	r3,r2,8
   4da98:	4462b03a 	or	r17,r8,r17
   4da9c:	183feb26 	beq	r3,zero,4da4c <__alt_data_end+0xfffcda4c>
   4daa0:	4808d0fa 	srli	r4,r9,3
   4daa4:	20c0022c 	andhi	r3,r4,8
   4daa8:	183fe81e 	bne	r3,zero,4da4c <__alt_data_end+0xfffcda4c>
   4daac:	300cd0fa 	srli	r6,r6,3
   4dab0:	4806977a 	slli	r3,r9,29
   4dab4:	2005883a 	mov	r2,r4
   4dab8:	19a2b03a 	or	r17,r3,r6
   4dabc:	003fe306 	br	4da4c <__alt_data_end+0xfffcda4c>
   4dac0:	0011883a 	mov	r8,zero
   4dac4:	0005883a 	mov	r2,zero
   4dac8:	003e3f06 	br	4d3c8 <__alt_data_end+0xfffcd3c8>
   4dacc:	0401ffc4 	movi	r16,2047
   4dad0:	003e2506 	br	4d368 <__alt_data_end+0xfffcd368>
   4dad4:	0013883a 	mov	r9,zero
   4dad8:	003f8406 	br	4d8ec <__alt_data_end+0xfffcd8ec>
   4dadc:	0005883a 	mov	r2,zero
   4dae0:	0007883a 	mov	r3,zero
   4dae4:	003e8906 	br	4d50c <__alt_data_end+0xfffcd50c>
   4dae8:	197ff804 	addi	r5,r3,-32
   4daec:	01000804 	movi	r4,32
   4daf0:	414ad83a 	srl	r5,r8,r5
   4daf4:	19002426 	beq	r3,r4,4db88 <__adddf3+0x89c>
   4daf8:	01001004 	movi	r4,64
   4dafc:	20c7c83a 	sub	r3,r4,r3
   4db00:	40c6983a 	sll	r3,r8,r3
   4db04:	1c46b03a 	or	r3,r3,r17
   4db08:	1806c03a 	cmpne	r3,r3,zero
   4db0c:	28e2b03a 	or	r17,r5,r3
   4db10:	0007883a 	mov	r3,zero
   4db14:	003f2306 	br	4d7a4 <__alt_data_end+0xfffcd7a4>
   4db18:	0007883a 	mov	r3,zero
   4db1c:	5811883a 	mov	r8,r11
   4db20:	00bfffc4 	movi	r2,-1
   4db24:	0401ffc4 	movi	r16,2047
   4db28:	003e7806 	br	4d50c <__alt_data_end+0xfffcd50c>
   4db2c:	4462b03a 	or	r17,r8,r17
   4db30:	8822c03a 	cmpne	r17,r17,zero
   4db34:	0009883a 	mov	r4,zero
   4db38:	003fa006 	br	4d9bc <__alt_data_end+0xfffcd9bc>
   4db3c:	4811883a 	mov	r8,r9
   4db40:	3023883a 	mov	r17,r6
   4db44:	0401ffc4 	movi	r16,2047
   4db48:	003e0706 	br	4d368 <__alt_data_end+0xfffcd368>
   4db4c:	4811883a 	mov	r8,r9
   4db50:	3023883a 	mov	r17,r6
   4db54:	003e0406 	br	4d368 <__alt_data_end+0xfffcd368>
   4db58:	21fff804 	addi	r7,r4,-32
   4db5c:	01400804 	movi	r5,32
   4db60:	41ced83a 	srl	r7,r8,r7
   4db64:	21400a26 	beq	r4,r5,4db90 <__adddf3+0x8a4>
   4db68:	01401004 	movi	r5,64
   4db6c:	2909c83a 	sub	r4,r5,r4
   4db70:	4108983a 	sll	r4,r8,r4
   4db74:	2448b03a 	or	r4,r4,r17
   4db78:	2008c03a 	cmpne	r4,r4,zero
   4db7c:	3922b03a 	or	r17,r7,r4
   4db80:	0009883a 	mov	r4,zero
   4db84:	003f8d06 	br	4d9bc <__alt_data_end+0xfffcd9bc>
   4db88:	0007883a 	mov	r3,zero
   4db8c:	003fdd06 	br	4db04 <__alt_data_end+0xfffcdb04>
   4db90:	0009883a 	mov	r4,zero
   4db94:	003ff706 	br	4db74 <__alt_data_end+0xfffcdb74>

0004db98 <__divdf3>:
   4db98:	defff204 	addi	sp,sp,-56
   4db9c:	dd400915 	stw	r21,36(sp)
   4dba0:	282ad53a 	srli	r21,r5,20
   4dba4:	dd000815 	stw	r20,32(sp)
   4dba8:	2828d7fa 	srli	r20,r5,31
   4dbac:	dc000415 	stw	r16,16(sp)
   4dbb0:	04000434 	movhi	r16,16
   4dbb4:	df000c15 	stw	fp,48(sp)
   4dbb8:	843fffc4 	addi	r16,r16,-1
   4dbbc:	dfc00d15 	stw	ra,52(sp)
   4dbc0:	ddc00b15 	stw	r23,44(sp)
   4dbc4:	dd800a15 	stw	r22,40(sp)
   4dbc8:	dcc00715 	stw	r19,28(sp)
   4dbcc:	dc800615 	stw	r18,24(sp)
   4dbd0:	dc400515 	stw	r17,20(sp)
   4dbd4:	ad41ffcc 	andi	r21,r21,2047
   4dbd8:	2c20703a 	and	r16,r5,r16
   4dbdc:	a7003fcc 	andi	fp,r20,255
   4dbe0:	a8006126 	beq	r21,zero,4dd68 <__divdf3+0x1d0>
   4dbe4:	0081ffc4 	movi	r2,2047
   4dbe8:	2025883a 	mov	r18,r4
   4dbec:	a8803726 	beq	r21,r2,4dccc <__divdf3+0x134>
   4dbf0:	80800434 	orhi	r2,r16,16
   4dbf4:	100490fa 	slli	r2,r2,3
   4dbf8:	2020d77a 	srli	r16,r4,29
   4dbfc:	202490fa 	slli	r18,r4,3
   4dc00:	ad7f0044 	addi	r21,r21,-1023
   4dc04:	80a0b03a 	or	r16,r16,r2
   4dc08:	0027883a 	mov	r19,zero
   4dc0c:	0013883a 	mov	r9,zero
   4dc10:	3804d53a 	srli	r2,r7,20
   4dc14:	382cd7fa 	srli	r22,r7,31
   4dc18:	04400434 	movhi	r17,16
   4dc1c:	8c7fffc4 	addi	r17,r17,-1
   4dc20:	1081ffcc 	andi	r2,r2,2047
   4dc24:	3011883a 	mov	r8,r6
   4dc28:	3c62703a 	and	r17,r7,r17
   4dc2c:	b5c03fcc 	andi	r23,r22,255
   4dc30:	10006c26 	beq	r2,zero,4dde4 <__divdf3+0x24c>
   4dc34:	00c1ffc4 	movi	r3,2047
   4dc38:	10c06426 	beq	r2,r3,4ddcc <__divdf3+0x234>
   4dc3c:	88c00434 	orhi	r3,r17,16
   4dc40:	180690fa 	slli	r3,r3,3
   4dc44:	3022d77a 	srli	r17,r6,29
   4dc48:	301090fa 	slli	r8,r6,3
   4dc4c:	10bf0044 	addi	r2,r2,-1023
   4dc50:	88e2b03a 	or	r17,r17,r3
   4dc54:	000f883a 	mov	r7,zero
   4dc58:	a58cf03a 	xor	r6,r20,r22
   4dc5c:	3cc8b03a 	or	r4,r7,r19
   4dc60:	a8abc83a 	sub	r21,r21,r2
   4dc64:	008003c4 	movi	r2,15
   4dc68:	3007883a 	mov	r3,r6
   4dc6c:	34c03fcc 	andi	r19,r6,255
   4dc70:	11009036 	bltu	r2,r4,4deb4 <__divdf3+0x31c>
   4dc74:	200890ba 	slli	r4,r4,2
   4dc78:	00800174 	movhi	r2,5
   4dc7c:	10b72304 	addi	r2,r2,-9076
   4dc80:	2089883a 	add	r4,r4,r2
   4dc84:	20800017 	ldw	r2,0(r4)
   4dc88:	1000683a 	jmp	r2
   4dc8c:	0004deb4 	movhi	zero,4986
   4dc90:	0004dd04 	movi	zero,4980
   4dc94:	0004dea4 	muli	zero,zero,4986
   4dc98:	0004dcf8 	rdprs	zero,zero,4979
   4dc9c:	0004dea4 	muli	zero,zero,4986
   4dca0:	0004de78 	rdprs	zero,zero,4985
   4dca4:	0004dea4 	muli	zero,zero,4986
   4dca8:	0004dcf8 	rdprs	zero,zero,4979
   4dcac:	0004dd04 	movi	zero,4980
   4dcb0:	0004dd04 	movi	zero,4980
   4dcb4:	0004de78 	rdprs	zero,zero,4985
   4dcb8:	0004dcf8 	rdprs	zero,zero,4979
   4dcbc:	0004dce8 	cmpgeui	zero,zero,4979
   4dcc0:	0004dce8 	cmpgeui	zero,zero,4979
   4dcc4:	0004dce8 	cmpgeui	zero,zero,4979
   4dcc8:	0004e198 	cmpnei	zero,zero,4998
   4dccc:	2404b03a 	or	r2,r4,r16
   4dcd0:	1000661e 	bne	r2,zero,4de6c <__divdf3+0x2d4>
   4dcd4:	04c00204 	movi	r19,8
   4dcd8:	0021883a 	mov	r16,zero
   4dcdc:	0025883a 	mov	r18,zero
   4dce0:	02400084 	movi	r9,2
   4dce4:	003fca06 	br	4dc10 <__alt_data_end+0xfffcdc10>
   4dce8:	8023883a 	mov	r17,r16
   4dcec:	9011883a 	mov	r8,r18
   4dcf0:	e02f883a 	mov	r23,fp
   4dcf4:	480f883a 	mov	r7,r9
   4dcf8:	00800084 	movi	r2,2
   4dcfc:	3881311e 	bne	r7,r2,4e1c4 <__divdf3+0x62c>
   4dd00:	b827883a 	mov	r19,r23
   4dd04:	98c0004c 	andi	r3,r19,1
   4dd08:	0081ffc4 	movi	r2,2047
   4dd0c:	000b883a 	mov	r5,zero
   4dd10:	0025883a 	mov	r18,zero
   4dd14:	1004953a 	slli	r2,r2,20
   4dd18:	18c03fcc 	andi	r3,r3,255
   4dd1c:	04400434 	movhi	r17,16
   4dd20:	8c7fffc4 	addi	r17,r17,-1
   4dd24:	180697fa 	slli	r3,r3,31
   4dd28:	2c4a703a 	and	r5,r5,r17
   4dd2c:	288ab03a 	or	r5,r5,r2
   4dd30:	28c6b03a 	or	r3,r5,r3
   4dd34:	9005883a 	mov	r2,r18
   4dd38:	dfc00d17 	ldw	ra,52(sp)
   4dd3c:	df000c17 	ldw	fp,48(sp)
   4dd40:	ddc00b17 	ldw	r23,44(sp)
   4dd44:	dd800a17 	ldw	r22,40(sp)
   4dd48:	dd400917 	ldw	r21,36(sp)
   4dd4c:	dd000817 	ldw	r20,32(sp)
   4dd50:	dcc00717 	ldw	r19,28(sp)
   4dd54:	dc800617 	ldw	r18,24(sp)
   4dd58:	dc400517 	ldw	r17,20(sp)
   4dd5c:	dc000417 	ldw	r16,16(sp)
   4dd60:	dec00e04 	addi	sp,sp,56
   4dd64:	f800283a 	ret
   4dd68:	2404b03a 	or	r2,r4,r16
   4dd6c:	2027883a 	mov	r19,r4
   4dd70:	10003926 	beq	r2,zero,4de58 <__divdf3+0x2c0>
   4dd74:	80012e26 	beq	r16,zero,4e230 <__divdf3+0x698>
   4dd78:	8009883a 	mov	r4,r16
   4dd7c:	d9800315 	stw	r6,12(sp)
   4dd80:	d9c00215 	stw	r7,8(sp)
   4dd84:	004f8f00 	call	4f8f0 <__clzsi2>
   4dd88:	d9800317 	ldw	r6,12(sp)
   4dd8c:	d9c00217 	ldw	r7,8(sp)
   4dd90:	113ffd44 	addi	r4,r2,-11
   4dd94:	00c00704 	movi	r3,28
   4dd98:	19012116 	blt	r3,r4,4e220 <__divdf3+0x688>
   4dd9c:	00c00744 	movi	r3,29
   4dda0:	147ffe04 	addi	r17,r2,-8
   4dda4:	1907c83a 	sub	r3,r3,r4
   4dda8:	8460983a 	sll	r16,r16,r17
   4ddac:	98c6d83a 	srl	r3,r19,r3
   4ddb0:	9c64983a 	sll	r18,r19,r17
   4ddb4:	1c20b03a 	or	r16,r3,r16
   4ddb8:	1080fcc4 	addi	r2,r2,1011
   4ddbc:	00abc83a 	sub	r21,zero,r2
   4ddc0:	0027883a 	mov	r19,zero
   4ddc4:	0013883a 	mov	r9,zero
   4ddc8:	003f9106 	br	4dc10 <__alt_data_end+0xfffcdc10>
   4ddcc:	3446b03a 	or	r3,r6,r17
   4ddd0:	18001f1e 	bne	r3,zero,4de50 <__divdf3+0x2b8>
   4ddd4:	0023883a 	mov	r17,zero
   4ddd8:	0011883a 	mov	r8,zero
   4dddc:	01c00084 	movi	r7,2
   4dde0:	003f9d06 	br	4dc58 <__alt_data_end+0xfffcdc58>
   4dde4:	3446b03a 	or	r3,r6,r17
   4dde8:	18001526 	beq	r3,zero,4de40 <__divdf3+0x2a8>
   4ddec:	88011b26 	beq	r17,zero,4e25c <__divdf3+0x6c4>
   4ddf0:	8809883a 	mov	r4,r17
   4ddf4:	d9800315 	stw	r6,12(sp)
   4ddf8:	da400115 	stw	r9,4(sp)
   4ddfc:	004f8f00 	call	4f8f0 <__clzsi2>
   4de00:	d9800317 	ldw	r6,12(sp)
   4de04:	da400117 	ldw	r9,4(sp)
   4de08:	113ffd44 	addi	r4,r2,-11
   4de0c:	00c00704 	movi	r3,28
   4de10:	19010e16 	blt	r3,r4,4e24c <__divdf3+0x6b4>
   4de14:	00c00744 	movi	r3,29
   4de18:	123ffe04 	addi	r8,r2,-8
   4de1c:	1907c83a 	sub	r3,r3,r4
   4de20:	8a22983a 	sll	r17,r17,r8
   4de24:	30c6d83a 	srl	r3,r6,r3
   4de28:	3210983a 	sll	r8,r6,r8
   4de2c:	1c62b03a 	or	r17,r3,r17
   4de30:	1080fcc4 	addi	r2,r2,1011
   4de34:	0085c83a 	sub	r2,zero,r2
   4de38:	000f883a 	mov	r7,zero
   4de3c:	003f8606 	br	4dc58 <__alt_data_end+0xfffcdc58>
   4de40:	0023883a 	mov	r17,zero
   4de44:	0011883a 	mov	r8,zero
   4de48:	01c00044 	movi	r7,1
   4de4c:	003f8206 	br	4dc58 <__alt_data_end+0xfffcdc58>
   4de50:	01c000c4 	movi	r7,3
   4de54:	003f8006 	br	4dc58 <__alt_data_end+0xfffcdc58>
   4de58:	04c00104 	movi	r19,4
   4de5c:	0021883a 	mov	r16,zero
   4de60:	0025883a 	mov	r18,zero
   4de64:	02400044 	movi	r9,1
   4de68:	003f6906 	br	4dc10 <__alt_data_end+0xfffcdc10>
   4de6c:	04c00304 	movi	r19,12
   4de70:	024000c4 	movi	r9,3
   4de74:	003f6606 	br	4dc10 <__alt_data_end+0xfffcdc10>
   4de78:	01400434 	movhi	r5,16
   4de7c:	0007883a 	mov	r3,zero
   4de80:	297fffc4 	addi	r5,r5,-1
   4de84:	04bfffc4 	movi	r18,-1
   4de88:	0081ffc4 	movi	r2,2047
   4de8c:	003fa106 	br	4dd14 <__alt_data_end+0xfffcdd14>
   4de90:	00c00044 	movi	r3,1
   4de94:	1887c83a 	sub	r3,r3,r2
   4de98:	01000e04 	movi	r4,56
   4de9c:	20c1210e 	bge	r4,r3,4e324 <__divdf3+0x78c>
   4dea0:	98c0004c 	andi	r3,r19,1
   4dea4:	0005883a 	mov	r2,zero
   4dea8:	000b883a 	mov	r5,zero
   4deac:	0025883a 	mov	r18,zero
   4deb0:	003f9806 	br	4dd14 <__alt_data_end+0xfffcdd14>
   4deb4:	8c00fd36 	bltu	r17,r16,4e2ac <__divdf3+0x714>
   4deb8:	8440fb26 	beq	r16,r17,4e2a8 <__divdf3+0x710>
   4debc:	8007883a 	mov	r3,r16
   4dec0:	ad7fffc4 	addi	r21,r21,-1
   4dec4:	0021883a 	mov	r16,zero
   4dec8:	4004d63a 	srli	r2,r8,24
   4decc:	8822923a 	slli	r17,r17,8
   4ded0:	1809883a 	mov	r4,r3
   4ded4:	402c923a 	slli	r22,r8,8
   4ded8:	88b8b03a 	or	fp,r17,r2
   4dedc:	e028d43a 	srli	r20,fp,16
   4dee0:	d8c00015 	stw	r3,0(sp)
   4dee4:	e5ffffcc 	andi	r23,fp,65535
   4dee8:	a00b883a 	mov	r5,r20
   4deec:	004d2300 	call	4d230 <__udivsi3>
   4def0:	d8c00017 	ldw	r3,0(sp)
   4def4:	a00b883a 	mov	r5,r20
   4def8:	d8800315 	stw	r2,12(sp)
   4defc:	1809883a 	mov	r4,r3
   4df00:	004d2940 	call	4d294 <__umodsi3>
   4df04:	d9800317 	ldw	r6,12(sp)
   4df08:	1006943a 	slli	r3,r2,16
   4df0c:	9004d43a 	srli	r2,r18,16
   4df10:	b9a3383a 	mul	r17,r23,r6
   4df14:	10c4b03a 	or	r2,r2,r3
   4df18:	1440062e 	bgeu	r2,r17,4df34 <__divdf3+0x39c>
   4df1c:	1705883a 	add	r2,r2,fp
   4df20:	30ffffc4 	addi	r3,r6,-1
   4df24:	1700ee36 	bltu	r2,fp,4e2e0 <__divdf3+0x748>
   4df28:	1440ed2e 	bgeu	r2,r17,4e2e0 <__divdf3+0x748>
   4df2c:	31bfff84 	addi	r6,r6,-2
   4df30:	1705883a 	add	r2,r2,fp
   4df34:	1463c83a 	sub	r17,r2,r17
   4df38:	a00b883a 	mov	r5,r20
   4df3c:	8809883a 	mov	r4,r17
   4df40:	d9800315 	stw	r6,12(sp)
   4df44:	004d2300 	call	4d230 <__udivsi3>
   4df48:	a00b883a 	mov	r5,r20
   4df4c:	8809883a 	mov	r4,r17
   4df50:	d8800215 	stw	r2,8(sp)
   4df54:	004d2940 	call	4d294 <__umodsi3>
   4df58:	d9c00217 	ldw	r7,8(sp)
   4df5c:	1004943a 	slli	r2,r2,16
   4df60:	94bfffcc 	andi	r18,r18,65535
   4df64:	b9d1383a 	mul	r8,r23,r7
   4df68:	90a4b03a 	or	r18,r18,r2
   4df6c:	d9800317 	ldw	r6,12(sp)
   4df70:	9200062e 	bgeu	r18,r8,4df8c <__divdf3+0x3f4>
   4df74:	9725883a 	add	r18,r18,fp
   4df78:	38bfffc4 	addi	r2,r7,-1
   4df7c:	9700d636 	bltu	r18,fp,4e2d8 <__divdf3+0x740>
   4df80:	9200d52e 	bgeu	r18,r8,4e2d8 <__divdf3+0x740>
   4df84:	39ffff84 	addi	r7,r7,-2
   4df88:	9725883a 	add	r18,r18,fp
   4df8c:	3004943a 	slli	r2,r6,16
   4df90:	b012d43a 	srli	r9,r22,16
   4df94:	b1bfffcc 	andi	r6,r22,65535
   4df98:	11e2b03a 	or	r17,r2,r7
   4df9c:	8806d43a 	srli	r3,r17,16
   4dfa0:	893fffcc 	andi	r4,r17,65535
   4dfa4:	218b383a 	mul	r5,r4,r6
   4dfa8:	30c5383a 	mul	r2,r6,r3
   4dfac:	2249383a 	mul	r4,r4,r9
   4dfb0:	280ed43a 	srli	r7,r5,16
   4dfb4:	9225c83a 	sub	r18,r18,r8
   4dfb8:	2089883a 	add	r4,r4,r2
   4dfbc:	3909883a 	add	r4,r7,r4
   4dfc0:	1a47383a 	mul	r3,r3,r9
   4dfc4:	2080022e 	bgeu	r4,r2,4dfd0 <__divdf3+0x438>
   4dfc8:	00800074 	movhi	r2,1
   4dfcc:	1887883a 	add	r3,r3,r2
   4dfd0:	2004d43a 	srli	r2,r4,16
   4dfd4:	2008943a 	slli	r4,r4,16
   4dfd8:	297fffcc 	andi	r5,r5,65535
   4dfdc:	10c7883a 	add	r3,r2,r3
   4dfe0:	2149883a 	add	r4,r4,r5
   4dfe4:	90c0a536 	bltu	r18,r3,4e27c <__divdf3+0x6e4>
   4dfe8:	90c0bf26 	beq	r18,r3,4e2e8 <__divdf3+0x750>
   4dfec:	90c7c83a 	sub	r3,r18,r3
   4dff0:	810fc83a 	sub	r7,r16,r4
   4dff4:	81e5803a 	cmpltu	r18,r16,r7
   4dff8:	1ca5c83a 	sub	r18,r3,r18
   4dffc:	e480c126 	beq	fp,r18,4e304 <__divdf3+0x76c>
   4e000:	a00b883a 	mov	r5,r20
   4e004:	9009883a 	mov	r4,r18
   4e008:	d9800315 	stw	r6,12(sp)
   4e00c:	d9c00215 	stw	r7,8(sp)
   4e010:	da400115 	stw	r9,4(sp)
   4e014:	004d2300 	call	4d230 <__udivsi3>
   4e018:	a00b883a 	mov	r5,r20
   4e01c:	9009883a 	mov	r4,r18
   4e020:	d8800015 	stw	r2,0(sp)
   4e024:	004d2940 	call	4d294 <__umodsi3>
   4e028:	d9c00217 	ldw	r7,8(sp)
   4e02c:	da000017 	ldw	r8,0(sp)
   4e030:	1006943a 	slli	r3,r2,16
   4e034:	3804d43a 	srli	r2,r7,16
   4e038:	ba21383a 	mul	r16,r23,r8
   4e03c:	d9800317 	ldw	r6,12(sp)
   4e040:	10c4b03a 	or	r2,r2,r3
   4e044:	da400117 	ldw	r9,4(sp)
   4e048:	1400062e 	bgeu	r2,r16,4e064 <__divdf3+0x4cc>
   4e04c:	1705883a 	add	r2,r2,fp
   4e050:	40ffffc4 	addi	r3,r8,-1
   4e054:	1700ad36 	bltu	r2,fp,4e30c <__divdf3+0x774>
   4e058:	1400ac2e 	bgeu	r2,r16,4e30c <__divdf3+0x774>
   4e05c:	423fff84 	addi	r8,r8,-2
   4e060:	1705883a 	add	r2,r2,fp
   4e064:	1421c83a 	sub	r16,r2,r16
   4e068:	a00b883a 	mov	r5,r20
   4e06c:	8009883a 	mov	r4,r16
   4e070:	d9800315 	stw	r6,12(sp)
   4e074:	d9c00215 	stw	r7,8(sp)
   4e078:	da000015 	stw	r8,0(sp)
   4e07c:	da400115 	stw	r9,4(sp)
   4e080:	004d2300 	call	4d230 <__udivsi3>
   4e084:	8009883a 	mov	r4,r16
   4e088:	a00b883a 	mov	r5,r20
   4e08c:	1025883a 	mov	r18,r2
   4e090:	004d2940 	call	4d294 <__umodsi3>
   4e094:	d9c00217 	ldw	r7,8(sp)
   4e098:	1004943a 	slli	r2,r2,16
   4e09c:	bcaf383a 	mul	r23,r23,r18
   4e0a0:	393fffcc 	andi	r4,r7,65535
   4e0a4:	2088b03a 	or	r4,r4,r2
   4e0a8:	d9800317 	ldw	r6,12(sp)
   4e0ac:	da000017 	ldw	r8,0(sp)
   4e0b0:	da400117 	ldw	r9,4(sp)
   4e0b4:	25c0062e 	bgeu	r4,r23,4e0d0 <__divdf3+0x538>
   4e0b8:	2709883a 	add	r4,r4,fp
   4e0bc:	90bfffc4 	addi	r2,r18,-1
   4e0c0:	27009436 	bltu	r4,fp,4e314 <__divdf3+0x77c>
   4e0c4:	25c0932e 	bgeu	r4,r23,4e314 <__divdf3+0x77c>
   4e0c8:	94bfff84 	addi	r18,r18,-2
   4e0cc:	2709883a 	add	r4,r4,fp
   4e0d0:	4004943a 	slli	r2,r8,16
   4e0d4:	25efc83a 	sub	r23,r4,r23
   4e0d8:	1490b03a 	or	r8,r2,r18
   4e0dc:	4008d43a 	srli	r4,r8,16
   4e0e0:	40ffffcc 	andi	r3,r8,65535
   4e0e4:	30c5383a 	mul	r2,r6,r3
   4e0e8:	1a47383a 	mul	r3,r3,r9
   4e0ec:	310d383a 	mul	r6,r6,r4
   4e0f0:	100ad43a 	srli	r5,r2,16
   4e0f4:	4913383a 	mul	r9,r9,r4
   4e0f8:	1987883a 	add	r3,r3,r6
   4e0fc:	28c7883a 	add	r3,r5,r3
   4e100:	1980022e 	bgeu	r3,r6,4e10c <__divdf3+0x574>
   4e104:	01000074 	movhi	r4,1
   4e108:	4913883a 	add	r9,r9,r4
   4e10c:	1808d43a 	srli	r4,r3,16
   4e110:	1806943a 	slli	r3,r3,16
   4e114:	10bfffcc 	andi	r2,r2,65535
   4e118:	2253883a 	add	r9,r4,r9
   4e11c:	1887883a 	add	r3,r3,r2
   4e120:	ba403836 	bltu	r23,r9,4e204 <__divdf3+0x66c>
   4e124:	ba403626 	beq	r23,r9,4e200 <__divdf3+0x668>
   4e128:	42000054 	ori	r8,r8,1
   4e12c:	a880ffc4 	addi	r2,r21,1023
   4e130:	00bf570e 	bge	zero,r2,4de90 <__alt_data_end+0xfffcde90>
   4e134:	40c001cc 	andi	r3,r8,7
   4e138:	18000726 	beq	r3,zero,4e158 <__divdf3+0x5c0>
   4e13c:	40c003cc 	andi	r3,r8,15
   4e140:	01000104 	movi	r4,4
   4e144:	19000426 	beq	r3,r4,4e158 <__divdf3+0x5c0>
   4e148:	4107883a 	add	r3,r8,r4
   4e14c:	1a11803a 	cmpltu	r8,r3,r8
   4e150:	8a23883a 	add	r17,r17,r8
   4e154:	1811883a 	mov	r8,r3
   4e158:	88c0402c 	andhi	r3,r17,256
   4e15c:	18000426 	beq	r3,zero,4e170 <__divdf3+0x5d8>
   4e160:	00ffc034 	movhi	r3,65280
   4e164:	18ffffc4 	addi	r3,r3,-1
   4e168:	a8810004 	addi	r2,r21,1024
   4e16c:	88e2703a 	and	r17,r17,r3
   4e170:	00c1ff84 	movi	r3,2046
   4e174:	18bee316 	blt	r3,r2,4dd04 <__alt_data_end+0xfffcdd04>
   4e178:	8824977a 	slli	r18,r17,29
   4e17c:	4010d0fa 	srli	r8,r8,3
   4e180:	8822927a 	slli	r17,r17,9
   4e184:	1081ffcc 	andi	r2,r2,2047
   4e188:	9224b03a 	or	r18,r18,r8
   4e18c:	880ad33a 	srli	r5,r17,12
   4e190:	98c0004c 	andi	r3,r19,1
   4e194:	003edf06 	br	4dd14 <__alt_data_end+0xfffcdd14>
   4e198:	8080022c 	andhi	r2,r16,8
   4e19c:	10001226 	beq	r2,zero,4e1e8 <__divdf3+0x650>
   4e1a0:	8880022c 	andhi	r2,r17,8
   4e1a4:	1000101e 	bne	r2,zero,4e1e8 <__divdf3+0x650>
   4e1a8:	00800434 	movhi	r2,16
   4e1ac:	89400234 	orhi	r5,r17,8
   4e1b0:	10bfffc4 	addi	r2,r2,-1
   4e1b4:	b007883a 	mov	r3,r22
   4e1b8:	288a703a 	and	r5,r5,r2
   4e1bc:	4025883a 	mov	r18,r8
   4e1c0:	003f3106 	br	4de88 <__alt_data_end+0xfffcde88>
   4e1c4:	008000c4 	movi	r2,3
   4e1c8:	3880a626 	beq	r7,r2,4e464 <__divdf3+0x8cc>
   4e1cc:	00800044 	movi	r2,1
   4e1d0:	3880521e 	bne	r7,r2,4e31c <__divdf3+0x784>
   4e1d4:	b807883a 	mov	r3,r23
   4e1d8:	0005883a 	mov	r2,zero
   4e1dc:	000b883a 	mov	r5,zero
   4e1e0:	0025883a 	mov	r18,zero
   4e1e4:	003ecb06 	br	4dd14 <__alt_data_end+0xfffcdd14>
   4e1e8:	00800434 	movhi	r2,16
   4e1ec:	81400234 	orhi	r5,r16,8
   4e1f0:	10bfffc4 	addi	r2,r2,-1
   4e1f4:	a007883a 	mov	r3,r20
   4e1f8:	288a703a 	and	r5,r5,r2
   4e1fc:	003f2206 	br	4de88 <__alt_data_end+0xfffcde88>
   4e200:	183fca26 	beq	r3,zero,4e12c <__alt_data_end+0xfffce12c>
   4e204:	e5ef883a 	add	r23,fp,r23
   4e208:	40bfffc4 	addi	r2,r8,-1
   4e20c:	bf00392e 	bgeu	r23,fp,4e2f4 <__divdf3+0x75c>
   4e210:	1011883a 	mov	r8,r2
   4e214:	ba7fc41e 	bne	r23,r9,4e128 <__alt_data_end+0xfffce128>
   4e218:	b0ffc31e 	bne	r22,r3,4e128 <__alt_data_end+0xfffce128>
   4e21c:	003fc306 	br	4e12c <__alt_data_end+0xfffce12c>
   4e220:	143ff604 	addi	r16,r2,-40
   4e224:	9c20983a 	sll	r16,r19,r16
   4e228:	0025883a 	mov	r18,zero
   4e22c:	003ee206 	br	4ddb8 <__alt_data_end+0xfffcddb8>
   4e230:	d9800315 	stw	r6,12(sp)
   4e234:	d9c00215 	stw	r7,8(sp)
   4e238:	004f8f00 	call	4f8f0 <__clzsi2>
   4e23c:	10800804 	addi	r2,r2,32
   4e240:	d9c00217 	ldw	r7,8(sp)
   4e244:	d9800317 	ldw	r6,12(sp)
   4e248:	003ed106 	br	4dd90 <__alt_data_end+0xfffcdd90>
   4e24c:	147ff604 	addi	r17,r2,-40
   4e250:	3462983a 	sll	r17,r6,r17
   4e254:	0011883a 	mov	r8,zero
   4e258:	003ef506 	br	4de30 <__alt_data_end+0xfffcde30>
   4e25c:	3009883a 	mov	r4,r6
   4e260:	d9800315 	stw	r6,12(sp)
   4e264:	da400115 	stw	r9,4(sp)
   4e268:	004f8f00 	call	4f8f0 <__clzsi2>
   4e26c:	10800804 	addi	r2,r2,32
   4e270:	da400117 	ldw	r9,4(sp)
   4e274:	d9800317 	ldw	r6,12(sp)
   4e278:	003ee306 	br	4de08 <__alt_data_end+0xfffcde08>
   4e27c:	85a1883a 	add	r16,r16,r22
   4e280:	8585803a 	cmpltu	r2,r16,r22
   4e284:	1705883a 	add	r2,r2,fp
   4e288:	14a5883a 	add	r18,r2,r18
   4e28c:	88bfffc4 	addi	r2,r17,-1
   4e290:	e4800c2e 	bgeu	fp,r18,4e2c4 <__divdf3+0x72c>
   4e294:	90c03e36 	bltu	r18,r3,4e390 <__divdf3+0x7f8>
   4e298:	1c806926 	beq	r3,r18,4e440 <__divdf3+0x8a8>
   4e29c:	90c7c83a 	sub	r3,r18,r3
   4e2a0:	1023883a 	mov	r17,r2
   4e2a4:	003f5206 	br	4dff0 <__alt_data_end+0xfffcdff0>
   4e2a8:	923f0436 	bltu	r18,r8,4debc <__alt_data_end+0xfffcdebc>
   4e2ac:	800897fa 	slli	r4,r16,31
   4e2b0:	9004d07a 	srli	r2,r18,1
   4e2b4:	8006d07a 	srli	r3,r16,1
   4e2b8:	902097fa 	slli	r16,r18,31
   4e2bc:	20a4b03a 	or	r18,r4,r2
   4e2c0:	003f0106 	br	4dec8 <__alt_data_end+0xfffcdec8>
   4e2c4:	e4bff51e 	bne	fp,r18,4e29c <__alt_data_end+0xfffce29c>
   4e2c8:	85bff22e 	bgeu	r16,r22,4e294 <__alt_data_end+0xfffce294>
   4e2cc:	e0c7c83a 	sub	r3,fp,r3
   4e2d0:	1023883a 	mov	r17,r2
   4e2d4:	003f4606 	br	4dff0 <__alt_data_end+0xfffcdff0>
   4e2d8:	100f883a 	mov	r7,r2
   4e2dc:	003f2b06 	br	4df8c <__alt_data_end+0xfffcdf8c>
   4e2e0:	180d883a 	mov	r6,r3
   4e2e4:	003f1306 	br	4df34 <__alt_data_end+0xfffcdf34>
   4e2e8:	813fe436 	bltu	r16,r4,4e27c <__alt_data_end+0xfffce27c>
   4e2ec:	0007883a 	mov	r3,zero
   4e2f0:	003f3f06 	br	4dff0 <__alt_data_end+0xfffcdff0>
   4e2f4:	ba402c36 	bltu	r23,r9,4e3a8 <__divdf3+0x810>
   4e2f8:	4dc05426 	beq	r9,r23,4e44c <__divdf3+0x8b4>
   4e2fc:	1011883a 	mov	r8,r2
   4e300:	003f8906 	br	4e128 <__alt_data_end+0xfffce128>
   4e304:	023fffc4 	movi	r8,-1
   4e308:	003f8806 	br	4e12c <__alt_data_end+0xfffce12c>
   4e30c:	1811883a 	mov	r8,r3
   4e310:	003f5406 	br	4e064 <__alt_data_end+0xfffce064>
   4e314:	1025883a 	mov	r18,r2
   4e318:	003f6d06 	br	4e0d0 <__alt_data_end+0xfffce0d0>
   4e31c:	b827883a 	mov	r19,r23
   4e320:	003f8206 	br	4e12c <__alt_data_end+0xfffce12c>
   4e324:	010007c4 	movi	r4,31
   4e328:	20c02616 	blt	r4,r3,4e3c4 <__divdf3+0x82c>
   4e32c:	00800804 	movi	r2,32
   4e330:	10c5c83a 	sub	r2,r2,r3
   4e334:	888a983a 	sll	r5,r17,r2
   4e338:	40c8d83a 	srl	r4,r8,r3
   4e33c:	4084983a 	sll	r2,r8,r2
   4e340:	88e2d83a 	srl	r17,r17,r3
   4e344:	2906b03a 	or	r3,r5,r4
   4e348:	1004c03a 	cmpne	r2,r2,zero
   4e34c:	1886b03a 	or	r3,r3,r2
   4e350:	188001cc 	andi	r2,r3,7
   4e354:	10000726 	beq	r2,zero,4e374 <__divdf3+0x7dc>
   4e358:	188003cc 	andi	r2,r3,15
   4e35c:	01000104 	movi	r4,4
   4e360:	11000426 	beq	r2,r4,4e374 <__divdf3+0x7dc>
   4e364:	1805883a 	mov	r2,r3
   4e368:	10c00104 	addi	r3,r2,4
   4e36c:	1885803a 	cmpltu	r2,r3,r2
   4e370:	88a3883a 	add	r17,r17,r2
   4e374:	8880202c 	andhi	r2,r17,128
   4e378:	10002726 	beq	r2,zero,4e418 <__divdf3+0x880>
   4e37c:	98c0004c 	andi	r3,r19,1
   4e380:	00800044 	movi	r2,1
   4e384:	000b883a 	mov	r5,zero
   4e388:	0025883a 	mov	r18,zero
   4e38c:	003e6106 	br	4dd14 <__alt_data_end+0xfffcdd14>
   4e390:	85a1883a 	add	r16,r16,r22
   4e394:	8585803a 	cmpltu	r2,r16,r22
   4e398:	1705883a 	add	r2,r2,fp
   4e39c:	14a5883a 	add	r18,r2,r18
   4e3a0:	8c7fff84 	addi	r17,r17,-2
   4e3a4:	003f1106 	br	4dfec <__alt_data_end+0xfffcdfec>
   4e3a8:	b589883a 	add	r4,r22,r22
   4e3ac:	25ad803a 	cmpltu	r22,r4,r22
   4e3b0:	b739883a 	add	fp,r22,fp
   4e3b4:	40bfff84 	addi	r2,r8,-2
   4e3b8:	bf2f883a 	add	r23,r23,fp
   4e3bc:	202d883a 	mov	r22,r4
   4e3c0:	003f9306 	br	4e210 <__alt_data_end+0xfffce210>
   4e3c4:	013ff844 	movi	r4,-31
   4e3c8:	2085c83a 	sub	r2,r4,r2
   4e3cc:	8888d83a 	srl	r4,r17,r2
   4e3d0:	00800804 	movi	r2,32
   4e3d4:	18802126 	beq	r3,r2,4e45c <__divdf3+0x8c4>
   4e3d8:	00801004 	movi	r2,64
   4e3dc:	10c5c83a 	sub	r2,r2,r3
   4e3e0:	8884983a 	sll	r2,r17,r2
   4e3e4:	1204b03a 	or	r2,r2,r8
   4e3e8:	1004c03a 	cmpne	r2,r2,zero
   4e3ec:	2084b03a 	or	r2,r4,r2
   4e3f0:	144001cc 	andi	r17,r2,7
   4e3f4:	88000d1e 	bne	r17,zero,4e42c <__divdf3+0x894>
   4e3f8:	000b883a 	mov	r5,zero
   4e3fc:	1024d0fa 	srli	r18,r2,3
   4e400:	98c0004c 	andi	r3,r19,1
   4e404:	0005883a 	mov	r2,zero
   4e408:	9464b03a 	or	r18,r18,r17
   4e40c:	003e4106 	br	4dd14 <__alt_data_end+0xfffcdd14>
   4e410:	1007883a 	mov	r3,r2
   4e414:	0023883a 	mov	r17,zero
   4e418:	880a927a 	slli	r5,r17,9
   4e41c:	1805883a 	mov	r2,r3
   4e420:	8822977a 	slli	r17,r17,29
   4e424:	280ad33a 	srli	r5,r5,12
   4e428:	003ff406 	br	4e3fc <__alt_data_end+0xfffce3fc>
   4e42c:	10c003cc 	andi	r3,r2,15
   4e430:	01000104 	movi	r4,4
   4e434:	193ff626 	beq	r3,r4,4e410 <__alt_data_end+0xfffce410>
   4e438:	0023883a 	mov	r17,zero
   4e43c:	003fca06 	br	4e368 <__alt_data_end+0xfffce368>
   4e440:	813fd336 	bltu	r16,r4,4e390 <__alt_data_end+0xfffce390>
   4e444:	1023883a 	mov	r17,r2
   4e448:	003fa806 	br	4e2ec <__alt_data_end+0xfffce2ec>
   4e44c:	b0ffd636 	bltu	r22,r3,4e3a8 <__alt_data_end+0xfffce3a8>
   4e450:	1011883a 	mov	r8,r2
   4e454:	b0ff341e 	bne	r22,r3,4e128 <__alt_data_end+0xfffce128>
   4e458:	003f3406 	br	4e12c <__alt_data_end+0xfffce12c>
   4e45c:	0005883a 	mov	r2,zero
   4e460:	003fe006 	br	4e3e4 <__alt_data_end+0xfffce3e4>
   4e464:	00800434 	movhi	r2,16
   4e468:	89400234 	orhi	r5,r17,8
   4e46c:	10bfffc4 	addi	r2,r2,-1
   4e470:	b807883a 	mov	r3,r23
   4e474:	288a703a 	and	r5,r5,r2
   4e478:	4025883a 	mov	r18,r8
   4e47c:	003e8206 	br	4de88 <__alt_data_end+0xfffcde88>

0004e480 <__eqdf2>:
   4e480:	2804d53a 	srli	r2,r5,20
   4e484:	3806d53a 	srli	r3,r7,20
   4e488:	02000434 	movhi	r8,16
   4e48c:	423fffc4 	addi	r8,r8,-1
   4e490:	1081ffcc 	andi	r2,r2,2047
   4e494:	0281ffc4 	movi	r10,2047
   4e498:	2a12703a 	and	r9,r5,r8
   4e49c:	18c1ffcc 	andi	r3,r3,2047
   4e4a0:	3a10703a 	and	r8,r7,r8
   4e4a4:	280ad7fa 	srli	r5,r5,31
   4e4a8:	380ed7fa 	srli	r7,r7,31
   4e4ac:	12801026 	beq	r2,r10,4e4f0 <__eqdf2+0x70>
   4e4b0:	0281ffc4 	movi	r10,2047
   4e4b4:	1a800a26 	beq	r3,r10,4e4e0 <__eqdf2+0x60>
   4e4b8:	10c00226 	beq	r2,r3,4e4c4 <__eqdf2+0x44>
   4e4bc:	00800044 	movi	r2,1
   4e4c0:	f800283a 	ret
   4e4c4:	4a3ffd1e 	bne	r9,r8,4e4bc <__alt_data_end+0xfffce4bc>
   4e4c8:	21bffc1e 	bne	r4,r6,4e4bc <__alt_data_end+0xfffce4bc>
   4e4cc:	29c00c26 	beq	r5,r7,4e500 <__eqdf2+0x80>
   4e4d0:	103ffa1e 	bne	r2,zero,4e4bc <__alt_data_end+0xfffce4bc>
   4e4d4:	2244b03a 	or	r2,r4,r9
   4e4d8:	1004c03a 	cmpne	r2,r2,zero
   4e4dc:	f800283a 	ret
   4e4e0:	3214b03a 	or	r10,r6,r8
   4e4e4:	503ff426 	beq	r10,zero,4e4b8 <__alt_data_end+0xfffce4b8>
   4e4e8:	00800044 	movi	r2,1
   4e4ec:	f800283a 	ret
   4e4f0:	2254b03a 	or	r10,r4,r9
   4e4f4:	503fee26 	beq	r10,zero,4e4b0 <__alt_data_end+0xfffce4b0>
   4e4f8:	00800044 	movi	r2,1
   4e4fc:	f800283a 	ret
   4e500:	0005883a 	mov	r2,zero
   4e504:	f800283a 	ret

0004e508 <__gedf2>:
   4e508:	2804d53a 	srli	r2,r5,20
   4e50c:	3806d53a 	srli	r3,r7,20
   4e510:	02000434 	movhi	r8,16
   4e514:	423fffc4 	addi	r8,r8,-1
   4e518:	1081ffcc 	andi	r2,r2,2047
   4e51c:	0241ffc4 	movi	r9,2047
   4e520:	2a14703a 	and	r10,r5,r8
   4e524:	18c1ffcc 	andi	r3,r3,2047
   4e528:	3a10703a 	and	r8,r7,r8
   4e52c:	280ad7fa 	srli	r5,r5,31
   4e530:	380ed7fa 	srli	r7,r7,31
   4e534:	12401d26 	beq	r2,r9,4e5ac <__gedf2+0xa4>
   4e538:	0241ffc4 	movi	r9,2047
   4e53c:	1a401226 	beq	r3,r9,4e588 <__gedf2+0x80>
   4e540:	1000081e 	bne	r2,zero,4e564 <__gedf2+0x5c>
   4e544:	2296b03a 	or	r11,r4,r10
   4e548:	5813003a 	cmpeq	r9,r11,zero
   4e54c:	1800091e 	bne	r3,zero,4e574 <__gedf2+0x6c>
   4e550:	3218b03a 	or	r12,r6,r8
   4e554:	6000071e 	bne	r12,zero,4e574 <__gedf2+0x6c>
   4e558:	0005883a 	mov	r2,zero
   4e55c:	5800101e 	bne	r11,zero,4e5a0 <__gedf2+0x98>
   4e560:	f800283a 	ret
   4e564:	18000c1e 	bne	r3,zero,4e598 <__gedf2+0x90>
   4e568:	3212b03a 	or	r9,r6,r8
   4e56c:	48000c26 	beq	r9,zero,4e5a0 <__gedf2+0x98>
   4e570:	0013883a 	mov	r9,zero
   4e574:	39c03fcc 	andi	r7,r7,255
   4e578:	48000826 	beq	r9,zero,4e59c <__gedf2+0x94>
   4e57c:	38000926 	beq	r7,zero,4e5a4 <__gedf2+0x9c>
   4e580:	00800044 	movi	r2,1
   4e584:	f800283a 	ret
   4e588:	3212b03a 	or	r9,r6,r8
   4e58c:	483fec26 	beq	r9,zero,4e540 <__alt_data_end+0xfffce540>
   4e590:	00bfff84 	movi	r2,-2
   4e594:	f800283a 	ret
   4e598:	39c03fcc 	andi	r7,r7,255
   4e59c:	29c00626 	beq	r5,r7,4e5b8 <__gedf2+0xb0>
   4e5a0:	283ff726 	beq	r5,zero,4e580 <__alt_data_end+0xfffce580>
   4e5a4:	00bfffc4 	movi	r2,-1
   4e5a8:	f800283a 	ret
   4e5ac:	2292b03a 	or	r9,r4,r10
   4e5b0:	483fe126 	beq	r9,zero,4e538 <__alt_data_end+0xfffce538>
   4e5b4:	003ff606 	br	4e590 <__alt_data_end+0xfffce590>
   4e5b8:	18bff916 	blt	r3,r2,4e5a0 <__alt_data_end+0xfffce5a0>
   4e5bc:	10c00316 	blt	r2,r3,4e5cc <__gedf2+0xc4>
   4e5c0:	42bff736 	bltu	r8,r10,4e5a0 <__alt_data_end+0xfffce5a0>
   4e5c4:	52000326 	beq	r10,r8,4e5d4 <__gedf2+0xcc>
   4e5c8:	5200042e 	bgeu	r10,r8,4e5dc <__gedf2+0xd4>
   4e5cc:	283fec1e 	bne	r5,zero,4e580 <__alt_data_end+0xfffce580>
   4e5d0:	003ff406 	br	4e5a4 <__alt_data_end+0xfffce5a4>
   4e5d4:	313ff236 	bltu	r6,r4,4e5a0 <__alt_data_end+0xfffce5a0>
   4e5d8:	21bffc36 	bltu	r4,r6,4e5cc <__alt_data_end+0xfffce5cc>
   4e5dc:	0005883a 	mov	r2,zero
   4e5e0:	f800283a 	ret

0004e5e4 <__ledf2>:
   4e5e4:	2804d53a 	srli	r2,r5,20
   4e5e8:	3810d53a 	srli	r8,r7,20
   4e5ec:	00c00434 	movhi	r3,16
   4e5f0:	18ffffc4 	addi	r3,r3,-1
   4e5f4:	1081ffcc 	andi	r2,r2,2047
   4e5f8:	0241ffc4 	movi	r9,2047
   4e5fc:	28d4703a 	and	r10,r5,r3
   4e600:	4201ffcc 	andi	r8,r8,2047
   4e604:	38c6703a 	and	r3,r7,r3
   4e608:	280ad7fa 	srli	r5,r5,31
   4e60c:	380ed7fa 	srli	r7,r7,31
   4e610:	12401f26 	beq	r2,r9,4e690 <__ledf2+0xac>
   4e614:	0241ffc4 	movi	r9,2047
   4e618:	42401426 	beq	r8,r9,4e66c <__ledf2+0x88>
   4e61c:	1000091e 	bne	r2,zero,4e644 <__ledf2+0x60>
   4e620:	2296b03a 	or	r11,r4,r10
   4e624:	5813003a 	cmpeq	r9,r11,zero
   4e628:	29403fcc 	andi	r5,r5,255
   4e62c:	40000a1e 	bne	r8,zero,4e658 <__ledf2+0x74>
   4e630:	30d8b03a 	or	r12,r6,r3
   4e634:	6000081e 	bne	r12,zero,4e658 <__ledf2+0x74>
   4e638:	0005883a 	mov	r2,zero
   4e63c:	5800111e 	bne	r11,zero,4e684 <__ledf2+0xa0>
   4e640:	f800283a 	ret
   4e644:	29403fcc 	andi	r5,r5,255
   4e648:	40000c1e 	bne	r8,zero,4e67c <__ledf2+0x98>
   4e64c:	30d2b03a 	or	r9,r6,r3
   4e650:	48000c26 	beq	r9,zero,4e684 <__ledf2+0xa0>
   4e654:	0013883a 	mov	r9,zero
   4e658:	39c03fcc 	andi	r7,r7,255
   4e65c:	48000826 	beq	r9,zero,4e680 <__ledf2+0x9c>
   4e660:	38001126 	beq	r7,zero,4e6a8 <__ledf2+0xc4>
   4e664:	00800044 	movi	r2,1
   4e668:	f800283a 	ret
   4e66c:	30d2b03a 	or	r9,r6,r3
   4e670:	483fea26 	beq	r9,zero,4e61c <__alt_data_end+0xfffce61c>
   4e674:	00800084 	movi	r2,2
   4e678:	f800283a 	ret
   4e67c:	39c03fcc 	andi	r7,r7,255
   4e680:	39400726 	beq	r7,r5,4e6a0 <__ledf2+0xbc>
   4e684:	2800081e 	bne	r5,zero,4e6a8 <__ledf2+0xc4>
   4e688:	00800044 	movi	r2,1
   4e68c:	f800283a 	ret
   4e690:	2292b03a 	or	r9,r4,r10
   4e694:	483fdf26 	beq	r9,zero,4e614 <__alt_data_end+0xfffce614>
   4e698:	00800084 	movi	r2,2
   4e69c:	f800283a 	ret
   4e6a0:	4080030e 	bge	r8,r2,4e6b0 <__ledf2+0xcc>
   4e6a4:	383fef26 	beq	r7,zero,4e664 <__alt_data_end+0xfffce664>
   4e6a8:	00bfffc4 	movi	r2,-1
   4e6ac:	f800283a 	ret
   4e6b0:	123feb16 	blt	r2,r8,4e660 <__alt_data_end+0xfffce660>
   4e6b4:	1abff336 	bltu	r3,r10,4e684 <__alt_data_end+0xfffce684>
   4e6b8:	50c00326 	beq	r10,r3,4e6c8 <__ledf2+0xe4>
   4e6bc:	50c0042e 	bgeu	r10,r3,4e6d0 <__ledf2+0xec>
   4e6c0:	283fe81e 	bne	r5,zero,4e664 <__alt_data_end+0xfffce664>
   4e6c4:	003ff806 	br	4e6a8 <__alt_data_end+0xfffce6a8>
   4e6c8:	313fee36 	bltu	r6,r4,4e684 <__alt_data_end+0xfffce684>
   4e6cc:	21bffc36 	bltu	r4,r6,4e6c0 <__alt_data_end+0xfffce6c0>
   4e6d0:	0005883a 	mov	r2,zero
   4e6d4:	f800283a 	ret

0004e6d8 <__muldf3>:
   4e6d8:	defff304 	addi	sp,sp,-52
   4e6dc:	2804d53a 	srli	r2,r5,20
   4e6e0:	dd800915 	stw	r22,36(sp)
   4e6e4:	282cd7fa 	srli	r22,r5,31
   4e6e8:	dc000315 	stw	r16,12(sp)
   4e6ec:	04000434 	movhi	r16,16
   4e6f0:	dd400815 	stw	r21,32(sp)
   4e6f4:	dc800515 	stw	r18,20(sp)
   4e6f8:	843fffc4 	addi	r16,r16,-1
   4e6fc:	dfc00c15 	stw	ra,48(sp)
   4e700:	df000b15 	stw	fp,44(sp)
   4e704:	ddc00a15 	stw	r23,40(sp)
   4e708:	dd000715 	stw	r20,28(sp)
   4e70c:	dcc00615 	stw	r19,24(sp)
   4e710:	dc400415 	stw	r17,16(sp)
   4e714:	1481ffcc 	andi	r18,r2,2047
   4e718:	2c20703a 	and	r16,r5,r16
   4e71c:	b02b883a 	mov	r21,r22
   4e720:	b2403fcc 	andi	r9,r22,255
   4e724:	90006026 	beq	r18,zero,4e8a8 <__muldf3+0x1d0>
   4e728:	0081ffc4 	movi	r2,2047
   4e72c:	2029883a 	mov	r20,r4
   4e730:	90803626 	beq	r18,r2,4e80c <__muldf3+0x134>
   4e734:	80800434 	orhi	r2,r16,16
   4e738:	100490fa 	slli	r2,r2,3
   4e73c:	2020d77a 	srli	r16,r4,29
   4e740:	202890fa 	slli	r20,r4,3
   4e744:	94bf0044 	addi	r18,r18,-1023
   4e748:	80a0b03a 	or	r16,r16,r2
   4e74c:	0027883a 	mov	r19,zero
   4e750:	0039883a 	mov	fp,zero
   4e754:	3804d53a 	srli	r2,r7,20
   4e758:	382ed7fa 	srli	r23,r7,31
   4e75c:	04400434 	movhi	r17,16
   4e760:	8c7fffc4 	addi	r17,r17,-1
   4e764:	1081ffcc 	andi	r2,r2,2047
   4e768:	3011883a 	mov	r8,r6
   4e76c:	3c62703a 	and	r17,r7,r17
   4e770:	ba803fcc 	andi	r10,r23,255
   4e774:	10006d26 	beq	r2,zero,4e92c <__muldf3+0x254>
   4e778:	00c1ffc4 	movi	r3,2047
   4e77c:	10c06526 	beq	r2,r3,4e914 <__muldf3+0x23c>
   4e780:	88c00434 	orhi	r3,r17,16
   4e784:	180690fa 	slli	r3,r3,3
   4e788:	3022d77a 	srli	r17,r6,29
   4e78c:	301090fa 	slli	r8,r6,3
   4e790:	10bf0044 	addi	r2,r2,-1023
   4e794:	88e2b03a 	or	r17,r17,r3
   4e798:	000b883a 	mov	r5,zero
   4e79c:	9085883a 	add	r2,r18,r2
   4e7a0:	2cc8b03a 	or	r4,r5,r19
   4e7a4:	00c003c4 	movi	r3,15
   4e7a8:	bdacf03a 	xor	r22,r23,r22
   4e7ac:	12c00044 	addi	r11,r2,1
   4e7b0:	19009936 	bltu	r3,r4,4ea18 <__muldf3+0x340>
   4e7b4:	200890ba 	slli	r4,r4,2
   4e7b8:	00c00174 	movhi	r3,5
   4e7bc:	18f9f304 	addi	r3,r3,-6196
   4e7c0:	20c9883a 	add	r4,r4,r3
   4e7c4:	20c00017 	ldw	r3,0(r4)
   4e7c8:	1800683a 	jmp	r3
   4e7cc:	0004ea18 	cmpnei	zero,zero,5032
   4e7d0:	0004e82c 	andhi	zero,zero,5024
   4e7d4:	0004e82c 	andhi	zero,zero,5024
   4e7d8:	0004e828 	cmpgeui	zero,zero,5024
   4e7dc:	0004e9f4 	movhi	zero,5031
   4e7e0:	0004e9f4 	movhi	zero,5031
   4e7e4:	0004e9dc 	xori	zero,zero,5031
   4e7e8:	0004e828 	cmpgeui	zero,zero,5024
   4e7ec:	0004e9f4 	movhi	zero,5031
   4e7f0:	0004e9dc 	xori	zero,zero,5031
   4e7f4:	0004e9f4 	movhi	zero,5031
   4e7f8:	0004e828 	cmpgeui	zero,zero,5024
   4e7fc:	0004ea04 	movi	zero,5032
   4e800:	0004ea04 	movi	zero,5032
   4e804:	0004ea04 	movi	zero,5032
   4e808:	0004ec20 	cmpeqi	zero,zero,5040
   4e80c:	2404b03a 	or	r2,r4,r16
   4e810:	10006f1e 	bne	r2,zero,4e9d0 <__muldf3+0x2f8>
   4e814:	04c00204 	movi	r19,8
   4e818:	0021883a 	mov	r16,zero
   4e81c:	0029883a 	mov	r20,zero
   4e820:	07000084 	movi	fp,2
   4e824:	003fcb06 	br	4e754 <__alt_data_end+0xfffce754>
   4e828:	502d883a 	mov	r22,r10
   4e82c:	00800084 	movi	r2,2
   4e830:	28805726 	beq	r5,r2,4e990 <__muldf3+0x2b8>
   4e834:	008000c4 	movi	r2,3
   4e838:	28816626 	beq	r5,r2,4edd4 <__muldf3+0x6fc>
   4e83c:	00800044 	movi	r2,1
   4e840:	2881411e 	bne	r5,r2,4ed48 <__muldf3+0x670>
   4e844:	b02b883a 	mov	r21,r22
   4e848:	0005883a 	mov	r2,zero
   4e84c:	000b883a 	mov	r5,zero
   4e850:	0029883a 	mov	r20,zero
   4e854:	1004953a 	slli	r2,r2,20
   4e858:	a8c03fcc 	andi	r3,r21,255
   4e85c:	04400434 	movhi	r17,16
   4e860:	8c7fffc4 	addi	r17,r17,-1
   4e864:	180697fa 	slli	r3,r3,31
   4e868:	2c4a703a 	and	r5,r5,r17
   4e86c:	288ab03a 	or	r5,r5,r2
   4e870:	28c6b03a 	or	r3,r5,r3
   4e874:	a005883a 	mov	r2,r20
   4e878:	dfc00c17 	ldw	ra,48(sp)
   4e87c:	df000b17 	ldw	fp,44(sp)
   4e880:	ddc00a17 	ldw	r23,40(sp)
   4e884:	dd800917 	ldw	r22,36(sp)
   4e888:	dd400817 	ldw	r21,32(sp)
   4e88c:	dd000717 	ldw	r20,28(sp)
   4e890:	dcc00617 	ldw	r19,24(sp)
   4e894:	dc800517 	ldw	r18,20(sp)
   4e898:	dc400417 	ldw	r17,16(sp)
   4e89c:	dc000317 	ldw	r16,12(sp)
   4e8a0:	dec00d04 	addi	sp,sp,52
   4e8a4:	f800283a 	ret
   4e8a8:	2404b03a 	or	r2,r4,r16
   4e8ac:	2027883a 	mov	r19,r4
   4e8b0:	10004226 	beq	r2,zero,4e9bc <__muldf3+0x2e4>
   4e8b4:	8000fc26 	beq	r16,zero,4eca8 <__muldf3+0x5d0>
   4e8b8:	8009883a 	mov	r4,r16
   4e8bc:	d9800215 	stw	r6,8(sp)
   4e8c0:	d9c00015 	stw	r7,0(sp)
   4e8c4:	da400115 	stw	r9,4(sp)
   4e8c8:	004f8f00 	call	4f8f0 <__clzsi2>
   4e8cc:	d9800217 	ldw	r6,8(sp)
   4e8d0:	d9c00017 	ldw	r7,0(sp)
   4e8d4:	da400117 	ldw	r9,4(sp)
   4e8d8:	113ffd44 	addi	r4,r2,-11
   4e8dc:	00c00704 	movi	r3,28
   4e8e0:	1900ed16 	blt	r3,r4,4ec98 <__muldf3+0x5c0>
   4e8e4:	00c00744 	movi	r3,29
   4e8e8:	147ffe04 	addi	r17,r2,-8
   4e8ec:	1907c83a 	sub	r3,r3,r4
   4e8f0:	8460983a 	sll	r16,r16,r17
   4e8f4:	98c6d83a 	srl	r3,r19,r3
   4e8f8:	9c68983a 	sll	r20,r19,r17
   4e8fc:	1c20b03a 	or	r16,r3,r16
   4e900:	1080fcc4 	addi	r2,r2,1011
   4e904:	00a5c83a 	sub	r18,zero,r2
   4e908:	0027883a 	mov	r19,zero
   4e90c:	0039883a 	mov	fp,zero
   4e910:	003f9006 	br	4e754 <__alt_data_end+0xfffce754>
   4e914:	3446b03a 	or	r3,r6,r17
   4e918:	1800261e 	bne	r3,zero,4e9b4 <__muldf3+0x2dc>
   4e91c:	0023883a 	mov	r17,zero
   4e920:	0011883a 	mov	r8,zero
   4e924:	01400084 	movi	r5,2
   4e928:	003f9c06 	br	4e79c <__alt_data_end+0xfffce79c>
   4e92c:	3446b03a 	or	r3,r6,r17
   4e930:	18001c26 	beq	r3,zero,4e9a4 <__muldf3+0x2cc>
   4e934:	8800ce26 	beq	r17,zero,4ec70 <__muldf3+0x598>
   4e938:	8809883a 	mov	r4,r17
   4e93c:	d9800215 	stw	r6,8(sp)
   4e940:	da400115 	stw	r9,4(sp)
   4e944:	da800015 	stw	r10,0(sp)
   4e948:	004f8f00 	call	4f8f0 <__clzsi2>
   4e94c:	d9800217 	ldw	r6,8(sp)
   4e950:	da400117 	ldw	r9,4(sp)
   4e954:	da800017 	ldw	r10,0(sp)
   4e958:	113ffd44 	addi	r4,r2,-11
   4e95c:	00c00704 	movi	r3,28
   4e960:	1900bf16 	blt	r3,r4,4ec60 <__muldf3+0x588>
   4e964:	00c00744 	movi	r3,29
   4e968:	123ffe04 	addi	r8,r2,-8
   4e96c:	1907c83a 	sub	r3,r3,r4
   4e970:	8a22983a 	sll	r17,r17,r8
   4e974:	30c6d83a 	srl	r3,r6,r3
   4e978:	3210983a 	sll	r8,r6,r8
   4e97c:	1c62b03a 	or	r17,r3,r17
   4e980:	1080fcc4 	addi	r2,r2,1011
   4e984:	0085c83a 	sub	r2,zero,r2
   4e988:	000b883a 	mov	r5,zero
   4e98c:	003f8306 	br	4e79c <__alt_data_end+0xfffce79c>
   4e990:	b02b883a 	mov	r21,r22
   4e994:	0081ffc4 	movi	r2,2047
   4e998:	000b883a 	mov	r5,zero
   4e99c:	0029883a 	mov	r20,zero
   4e9a0:	003fac06 	br	4e854 <__alt_data_end+0xfffce854>
   4e9a4:	0023883a 	mov	r17,zero
   4e9a8:	0011883a 	mov	r8,zero
   4e9ac:	01400044 	movi	r5,1
   4e9b0:	003f7a06 	br	4e79c <__alt_data_end+0xfffce79c>
   4e9b4:	014000c4 	movi	r5,3
   4e9b8:	003f7806 	br	4e79c <__alt_data_end+0xfffce79c>
   4e9bc:	04c00104 	movi	r19,4
   4e9c0:	0021883a 	mov	r16,zero
   4e9c4:	0029883a 	mov	r20,zero
   4e9c8:	07000044 	movi	fp,1
   4e9cc:	003f6106 	br	4e754 <__alt_data_end+0xfffce754>
   4e9d0:	04c00304 	movi	r19,12
   4e9d4:	070000c4 	movi	fp,3
   4e9d8:	003f5e06 	br	4e754 <__alt_data_end+0xfffce754>
   4e9dc:	01400434 	movhi	r5,16
   4e9e0:	002b883a 	mov	r21,zero
   4e9e4:	297fffc4 	addi	r5,r5,-1
   4e9e8:	053fffc4 	movi	r20,-1
   4e9ec:	0081ffc4 	movi	r2,2047
   4e9f0:	003f9806 	br	4e854 <__alt_data_end+0xfffce854>
   4e9f4:	8023883a 	mov	r17,r16
   4e9f8:	a011883a 	mov	r8,r20
   4e9fc:	e00b883a 	mov	r5,fp
   4ea00:	003f8a06 	br	4e82c <__alt_data_end+0xfffce82c>
   4ea04:	8023883a 	mov	r17,r16
   4ea08:	a011883a 	mov	r8,r20
   4ea0c:	482d883a 	mov	r22,r9
   4ea10:	e00b883a 	mov	r5,fp
   4ea14:	003f8506 	br	4e82c <__alt_data_end+0xfffce82c>
   4ea18:	a00ad43a 	srli	r5,r20,16
   4ea1c:	401ad43a 	srli	r13,r8,16
   4ea20:	a53fffcc 	andi	r20,r20,65535
   4ea24:	423fffcc 	andi	r8,r8,65535
   4ea28:	4519383a 	mul	r12,r8,r20
   4ea2c:	4147383a 	mul	r3,r8,r5
   4ea30:	6d09383a 	mul	r4,r13,r20
   4ea34:	600cd43a 	srli	r6,r12,16
   4ea38:	2b5d383a 	mul	r14,r5,r13
   4ea3c:	20c9883a 	add	r4,r4,r3
   4ea40:	310d883a 	add	r6,r6,r4
   4ea44:	30c0022e 	bgeu	r6,r3,4ea50 <__muldf3+0x378>
   4ea48:	00c00074 	movhi	r3,1
   4ea4c:	70dd883a 	add	r14,r14,r3
   4ea50:	8826d43a 	srli	r19,r17,16
   4ea54:	8bffffcc 	andi	r15,r17,65535
   4ea58:	7d23383a 	mul	r17,r15,r20
   4ea5c:	7949383a 	mul	r4,r15,r5
   4ea60:	9d29383a 	mul	r20,r19,r20
   4ea64:	8814d43a 	srli	r10,r17,16
   4ea68:	3012943a 	slli	r9,r6,16
   4ea6c:	a129883a 	add	r20,r20,r4
   4ea70:	633fffcc 	andi	r12,r12,65535
   4ea74:	5515883a 	add	r10,r10,r20
   4ea78:	3006d43a 	srli	r3,r6,16
   4ea7c:	4b13883a 	add	r9,r9,r12
   4ea80:	2ccb383a 	mul	r5,r5,r19
   4ea84:	5100022e 	bgeu	r10,r4,4ea90 <__muldf3+0x3b8>
   4ea88:	01000074 	movhi	r4,1
   4ea8c:	290b883a 	add	r5,r5,r4
   4ea90:	802ad43a 	srli	r21,r16,16
   4ea94:	843fffcc 	andi	r16,r16,65535
   4ea98:	440d383a 	mul	r6,r8,r16
   4ea9c:	4565383a 	mul	r18,r8,r21
   4eaa0:	8349383a 	mul	r4,r16,r13
   4eaa4:	500e943a 	slli	r7,r10,16
   4eaa8:	3010d43a 	srli	r8,r6,16
   4eaac:	5028d43a 	srli	r20,r10,16
   4eab0:	2489883a 	add	r4,r4,r18
   4eab4:	8abfffcc 	andi	r10,r17,65535
   4eab8:	3a95883a 	add	r10,r7,r10
   4eabc:	4119883a 	add	r12,r8,r4
   4eac0:	a169883a 	add	r20,r20,r5
   4eac4:	1a87883a 	add	r3,r3,r10
   4eac8:	6d5b383a 	mul	r13,r13,r21
   4eacc:	6480022e 	bgeu	r12,r18,4ead8 <__muldf3+0x400>
   4ead0:	01000074 	movhi	r4,1
   4ead4:	691b883a 	add	r13,r13,r4
   4ead8:	7c25383a 	mul	r18,r15,r16
   4eadc:	7d4b383a 	mul	r5,r15,r21
   4eae0:	84cf383a 	mul	r7,r16,r19
   4eae4:	901ed43a 	srli	r15,r18,16
   4eae8:	6008d43a 	srli	r4,r12,16
   4eaec:	6010943a 	slli	r8,r12,16
   4eaf0:	394f883a 	add	r7,r7,r5
   4eaf4:	333fffcc 	andi	r12,r6,65535
   4eaf8:	79df883a 	add	r15,r15,r7
   4eafc:	235b883a 	add	r13,r4,r13
   4eb00:	9d63383a 	mul	r17,r19,r21
   4eb04:	4309883a 	add	r4,r8,r12
   4eb08:	7940022e 	bgeu	r15,r5,4eb14 <__muldf3+0x43c>
   4eb0c:	01400074 	movhi	r5,1
   4eb10:	8963883a 	add	r17,r17,r5
   4eb14:	780a943a 	slli	r5,r15,16
   4eb18:	91bfffcc 	andi	r6,r18,65535
   4eb1c:	70c7883a 	add	r3,r14,r3
   4eb20:	298d883a 	add	r6,r5,r6
   4eb24:	1a8f803a 	cmpltu	r7,r3,r10
   4eb28:	350b883a 	add	r5,r6,r20
   4eb2c:	20c7883a 	add	r3,r4,r3
   4eb30:	3955883a 	add	r10,r7,r5
   4eb34:	1909803a 	cmpltu	r4,r3,r4
   4eb38:	6a91883a 	add	r8,r13,r10
   4eb3c:	780cd43a 	srli	r6,r15,16
   4eb40:	2219883a 	add	r12,r4,r8
   4eb44:	2d0b803a 	cmpltu	r5,r5,r20
   4eb48:	51cf803a 	cmpltu	r7,r10,r7
   4eb4c:	29ceb03a 	or	r7,r5,r7
   4eb50:	4351803a 	cmpltu	r8,r8,r13
   4eb54:	610b803a 	cmpltu	r5,r12,r4
   4eb58:	4148b03a 	or	r4,r8,r5
   4eb5c:	398f883a 	add	r7,r7,r6
   4eb60:	3909883a 	add	r4,r7,r4
   4eb64:	1810927a 	slli	r8,r3,9
   4eb68:	2449883a 	add	r4,r4,r17
   4eb6c:	2008927a 	slli	r4,r4,9
   4eb70:	6022d5fa 	srli	r17,r12,23
   4eb74:	1806d5fa 	srli	r3,r3,23
   4eb78:	4252b03a 	or	r9,r8,r9
   4eb7c:	600a927a 	slli	r5,r12,9
   4eb80:	4810c03a 	cmpne	r8,r9,zero
   4eb84:	2462b03a 	or	r17,r4,r17
   4eb88:	40c6b03a 	or	r3,r8,r3
   4eb8c:	8900402c 	andhi	r4,r17,256
   4eb90:	1950b03a 	or	r8,r3,r5
   4eb94:	20000726 	beq	r4,zero,4ebb4 <__muldf3+0x4dc>
   4eb98:	4006d07a 	srli	r3,r8,1
   4eb9c:	880497fa 	slli	r2,r17,31
   4eba0:	4200004c 	andi	r8,r8,1
   4eba4:	8822d07a 	srli	r17,r17,1
   4eba8:	1a10b03a 	or	r8,r3,r8
   4ebac:	1210b03a 	or	r8,r2,r8
   4ebb0:	5805883a 	mov	r2,r11
   4ebb4:	1140ffc4 	addi	r5,r2,1023
   4ebb8:	0140440e 	bge	zero,r5,4eccc <__muldf3+0x5f4>
   4ebbc:	40c001cc 	andi	r3,r8,7
   4ebc0:	18000726 	beq	r3,zero,4ebe0 <__muldf3+0x508>
   4ebc4:	40c003cc 	andi	r3,r8,15
   4ebc8:	01000104 	movi	r4,4
   4ebcc:	19000426 	beq	r3,r4,4ebe0 <__muldf3+0x508>
   4ebd0:	4107883a 	add	r3,r8,r4
   4ebd4:	1a11803a 	cmpltu	r8,r3,r8
   4ebd8:	8a23883a 	add	r17,r17,r8
   4ebdc:	1811883a 	mov	r8,r3
   4ebe0:	88c0402c 	andhi	r3,r17,256
   4ebe4:	18000426 	beq	r3,zero,4ebf8 <__muldf3+0x520>
   4ebe8:	11410004 	addi	r5,r2,1024
   4ebec:	00bfc034 	movhi	r2,65280
   4ebf0:	10bfffc4 	addi	r2,r2,-1
   4ebf4:	88a2703a 	and	r17,r17,r2
   4ebf8:	0081ff84 	movi	r2,2046
   4ebfc:	117f6416 	blt	r2,r5,4e990 <__alt_data_end+0xfffce990>
   4ec00:	8828977a 	slli	r20,r17,29
   4ec04:	4010d0fa 	srli	r8,r8,3
   4ec08:	8822927a 	slli	r17,r17,9
   4ec0c:	2881ffcc 	andi	r2,r5,2047
   4ec10:	a228b03a 	or	r20,r20,r8
   4ec14:	880ad33a 	srli	r5,r17,12
   4ec18:	b02b883a 	mov	r21,r22
   4ec1c:	003f0d06 	br	4e854 <__alt_data_end+0xfffce854>
   4ec20:	8080022c 	andhi	r2,r16,8
   4ec24:	10000926 	beq	r2,zero,4ec4c <__muldf3+0x574>
   4ec28:	8880022c 	andhi	r2,r17,8
   4ec2c:	1000071e 	bne	r2,zero,4ec4c <__muldf3+0x574>
   4ec30:	00800434 	movhi	r2,16
   4ec34:	89400234 	orhi	r5,r17,8
   4ec38:	10bfffc4 	addi	r2,r2,-1
   4ec3c:	b82b883a 	mov	r21,r23
   4ec40:	288a703a 	and	r5,r5,r2
   4ec44:	4029883a 	mov	r20,r8
   4ec48:	003f6806 	br	4e9ec <__alt_data_end+0xfffce9ec>
   4ec4c:	00800434 	movhi	r2,16
   4ec50:	81400234 	orhi	r5,r16,8
   4ec54:	10bfffc4 	addi	r2,r2,-1
   4ec58:	288a703a 	and	r5,r5,r2
   4ec5c:	003f6306 	br	4e9ec <__alt_data_end+0xfffce9ec>
   4ec60:	147ff604 	addi	r17,r2,-40
   4ec64:	3462983a 	sll	r17,r6,r17
   4ec68:	0011883a 	mov	r8,zero
   4ec6c:	003f4406 	br	4e980 <__alt_data_end+0xfffce980>
   4ec70:	3009883a 	mov	r4,r6
   4ec74:	d9800215 	stw	r6,8(sp)
   4ec78:	da400115 	stw	r9,4(sp)
   4ec7c:	da800015 	stw	r10,0(sp)
   4ec80:	004f8f00 	call	4f8f0 <__clzsi2>
   4ec84:	10800804 	addi	r2,r2,32
   4ec88:	da800017 	ldw	r10,0(sp)
   4ec8c:	da400117 	ldw	r9,4(sp)
   4ec90:	d9800217 	ldw	r6,8(sp)
   4ec94:	003f3006 	br	4e958 <__alt_data_end+0xfffce958>
   4ec98:	143ff604 	addi	r16,r2,-40
   4ec9c:	9c20983a 	sll	r16,r19,r16
   4eca0:	0029883a 	mov	r20,zero
   4eca4:	003f1606 	br	4e900 <__alt_data_end+0xfffce900>
   4eca8:	d9800215 	stw	r6,8(sp)
   4ecac:	d9c00015 	stw	r7,0(sp)
   4ecb0:	da400115 	stw	r9,4(sp)
   4ecb4:	004f8f00 	call	4f8f0 <__clzsi2>
   4ecb8:	10800804 	addi	r2,r2,32
   4ecbc:	da400117 	ldw	r9,4(sp)
   4ecc0:	d9c00017 	ldw	r7,0(sp)
   4ecc4:	d9800217 	ldw	r6,8(sp)
   4ecc8:	003f0306 	br	4e8d8 <__alt_data_end+0xfffce8d8>
   4eccc:	00c00044 	movi	r3,1
   4ecd0:	1947c83a 	sub	r3,r3,r5
   4ecd4:	00800e04 	movi	r2,56
   4ecd8:	10feda16 	blt	r2,r3,4e844 <__alt_data_end+0xfffce844>
   4ecdc:	008007c4 	movi	r2,31
   4ece0:	10c01b16 	blt	r2,r3,4ed50 <__muldf3+0x678>
   4ece4:	00800804 	movi	r2,32
   4ece8:	10c5c83a 	sub	r2,r2,r3
   4ecec:	888a983a 	sll	r5,r17,r2
   4ecf0:	40c8d83a 	srl	r4,r8,r3
   4ecf4:	4084983a 	sll	r2,r8,r2
   4ecf8:	88e2d83a 	srl	r17,r17,r3
   4ecfc:	2906b03a 	or	r3,r5,r4
   4ed00:	1004c03a 	cmpne	r2,r2,zero
   4ed04:	1886b03a 	or	r3,r3,r2
   4ed08:	188001cc 	andi	r2,r3,7
   4ed0c:	10000726 	beq	r2,zero,4ed2c <__muldf3+0x654>
   4ed10:	188003cc 	andi	r2,r3,15
   4ed14:	01000104 	movi	r4,4
   4ed18:	11000426 	beq	r2,r4,4ed2c <__muldf3+0x654>
   4ed1c:	1805883a 	mov	r2,r3
   4ed20:	10c00104 	addi	r3,r2,4
   4ed24:	1885803a 	cmpltu	r2,r3,r2
   4ed28:	88a3883a 	add	r17,r17,r2
   4ed2c:	8880202c 	andhi	r2,r17,128
   4ed30:	10001c26 	beq	r2,zero,4eda4 <__muldf3+0x6cc>
   4ed34:	b02b883a 	mov	r21,r22
   4ed38:	00800044 	movi	r2,1
   4ed3c:	000b883a 	mov	r5,zero
   4ed40:	0029883a 	mov	r20,zero
   4ed44:	003ec306 	br	4e854 <__alt_data_end+0xfffce854>
   4ed48:	5805883a 	mov	r2,r11
   4ed4c:	003f9906 	br	4ebb4 <__alt_data_end+0xfffcebb4>
   4ed50:	00bff844 	movi	r2,-31
   4ed54:	1145c83a 	sub	r2,r2,r5
   4ed58:	8888d83a 	srl	r4,r17,r2
   4ed5c:	00800804 	movi	r2,32
   4ed60:	18801a26 	beq	r3,r2,4edcc <__muldf3+0x6f4>
   4ed64:	00801004 	movi	r2,64
   4ed68:	10c5c83a 	sub	r2,r2,r3
   4ed6c:	8884983a 	sll	r2,r17,r2
   4ed70:	1204b03a 	or	r2,r2,r8
   4ed74:	1004c03a 	cmpne	r2,r2,zero
   4ed78:	2084b03a 	or	r2,r4,r2
   4ed7c:	144001cc 	andi	r17,r2,7
   4ed80:	88000d1e 	bne	r17,zero,4edb8 <__muldf3+0x6e0>
   4ed84:	000b883a 	mov	r5,zero
   4ed88:	1028d0fa 	srli	r20,r2,3
   4ed8c:	b02b883a 	mov	r21,r22
   4ed90:	0005883a 	mov	r2,zero
   4ed94:	a468b03a 	or	r20,r20,r17
   4ed98:	003eae06 	br	4e854 <__alt_data_end+0xfffce854>
   4ed9c:	1007883a 	mov	r3,r2
   4eda0:	0023883a 	mov	r17,zero
   4eda4:	880a927a 	slli	r5,r17,9
   4eda8:	1805883a 	mov	r2,r3
   4edac:	8822977a 	slli	r17,r17,29
   4edb0:	280ad33a 	srli	r5,r5,12
   4edb4:	003ff406 	br	4ed88 <__alt_data_end+0xfffced88>
   4edb8:	10c003cc 	andi	r3,r2,15
   4edbc:	01000104 	movi	r4,4
   4edc0:	193ff626 	beq	r3,r4,4ed9c <__alt_data_end+0xfffced9c>
   4edc4:	0023883a 	mov	r17,zero
   4edc8:	003fd506 	br	4ed20 <__alt_data_end+0xfffced20>
   4edcc:	0005883a 	mov	r2,zero
   4edd0:	003fe706 	br	4ed70 <__alt_data_end+0xfffced70>
   4edd4:	00800434 	movhi	r2,16
   4edd8:	89400234 	orhi	r5,r17,8
   4eddc:	10bfffc4 	addi	r2,r2,-1
   4ede0:	b02b883a 	mov	r21,r22
   4ede4:	288a703a 	and	r5,r5,r2
   4ede8:	4029883a 	mov	r20,r8
   4edec:	003eff06 	br	4e9ec <__alt_data_end+0xfffce9ec>

0004edf0 <__subdf3>:
   4edf0:	02000434 	movhi	r8,16
   4edf4:	423fffc4 	addi	r8,r8,-1
   4edf8:	defffb04 	addi	sp,sp,-20
   4edfc:	2a14703a 	and	r10,r5,r8
   4ee00:	3812d53a 	srli	r9,r7,20
   4ee04:	3a10703a 	and	r8,r7,r8
   4ee08:	2006d77a 	srli	r3,r4,29
   4ee0c:	3004d77a 	srli	r2,r6,29
   4ee10:	dc000015 	stw	r16,0(sp)
   4ee14:	501490fa 	slli	r10,r10,3
   4ee18:	2820d53a 	srli	r16,r5,20
   4ee1c:	401090fa 	slli	r8,r8,3
   4ee20:	dc800215 	stw	r18,8(sp)
   4ee24:	dc400115 	stw	r17,4(sp)
   4ee28:	dfc00415 	stw	ra,16(sp)
   4ee2c:	202290fa 	slli	r17,r4,3
   4ee30:	dcc00315 	stw	r19,12(sp)
   4ee34:	4a41ffcc 	andi	r9,r9,2047
   4ee38:	0101ffc4 	movi	r4,2047
   4ee3c:	2824d7fa 	srli	r18,r5,31
   4ee40:	8401ffcc 	andi	r16,r16,2047
   4ee44:	50c6b03a 	or	r3,r10,r3
   4ee48:	380ed7fa 	srli	r7,r7,31
   4ee4c:	408ab03a 	or	r5,r8,r2
   4ee50:	300c90fa 	slli	r6,r6,3
   4ee54:	49009626 	beq	r9,r4,4f0b0 <__subdf3+0x2c0>
   4ee58:	39c0005c 	xori	r7,r7,1
   4ee5c:	8245c83a 	sub	r2,r16,r9
   4ee60:	3c807426 	beq	r7,r18,4f034 <__subdf3+0x244>
   4ee64:	0080af0e 	bge	zero,r2,4f124 <__subdf3+0x334>
   4ee68:	48002a1e 	bne	r9,zero,4ef14 <__subdf3+0x124>
   4ee6c:	2988b03a 	or	r4,r5,r6
   4ee70:	20009a1e 	bne	r4,zero,4f0dc <__subdf3+0x2ec>
   4ee74:	888001cc 	andi	r2,r17,7
   4ee78:	10000726 	beq	r2,zero,4ee98 <__subdf3+0xa8>
   4ee7c:	888003cc 	andi	r2,r17,15
   4ee80:	01000104 	movi	r4,4
   4ee84:	11000426 	beq	r2,r4,4ee98 <__subdf3+0xa8>
   4ee88:	890b883a 	add	r5,r17,r4
   4ee8c:	2c63803a 	cmpltu	r17,r5,r17
   4ee90:	1c47883a 	add	r3,r3,r17
   4ee94:	2823883a 	mov	r17,r5
   4ee98:	1880202c 	andhi	r2,r3,128
   4ee9c:	10005926 	beq	r2,zero,4f004 <__subdf3+0x214>
   4eea0:	84000044 	addi	r16,r16,1
   4eea4:	0081ffc4 	movi	r2,2047
   4eea8:	8080be26 	beq	r16,r2,4f1a4 <__subdf3+0x3b4>
   4eeac:	017fe034 	movhi	r5,65408
   4eeb0:	297fffc4 	addi	r5,r5,-1
   4eeb4:	1946703a 	and	r3,r3,r5
   4eeb8:	1804977a 	slli	r2,r3,29
   4eebc:	1806927a 	slli	r3,r3,9
   4eec0:	8822d0fa 	srli	r17,r17,3
   4eec4:	8401ffcc 	andi	r16,r16,2047
   4eec8:	180ad33a 	srli	r5,r3,12
   4eecc:	9100004c 	andi	r4,r18,1
   4eed0:	1444b03a 	or	r2,r2,r17
   4eed4:	80c1ffcc 	andi	r3,r16,2047
   4eed8:	1820953a 	slli	r16,r3,20
   4eedc:	20c03fcc 	andi	r3,r4,255
   4eee0:	180897fa 	slli	r4,r3,31
   4eee4:	00c00434 	movhi	r3,16
   4eee8:	18ffffc4 	addi	r3,r3,-1
   4eeec:	28c6703a 	and	r3,r5,r3
   4eef0:	1c06b03a 	or	r3,r3,r16
   4eef4:	1906b03a 	or	r3,r3,r4
   4eef8:	dfc00417 	ldw	ra,16(sp)
   4eefc:	dcc00317 	ldw	r19,12(sp)
   4ef00:	dc800217 	ldw	r18,8(sp)
   4ef04:	dc400117 	ldw	r17,4(sp)
   4ef08:	dc000017 	ldw	r16,0(sp)
   4ef0c:	dec00504 	addi	sp,sp,20
   4ef10:	f800283a 	ret
   4ef14:	0101ffc4 	movi	r4,2047
   4ef18:	813fd626 	beq	r16,r4,4ee74 <__alt_data_end+0xfffcee74>
   4ef1c:	29402034 	orhi	r5,r5,128
   4ef20:	01000e04 	movi	r4,56
   4ef24:	2080a316 	blt	r4,r2,4f1b4 <__subdf3+0x3c4>
   4ef28:	010007c4 	movi	r4,31
   4ef2c:	2080c616 	blt	r4,r2,4f248 <__subdf3+0x458>
   4ef30:	01000804 	movi	r4,32
   4ef34:	2089c83a 	sub	r4,r4,r2
   4ef38:	2910983a 	sll	r8,r5,r4
   4ef3c:	308ed83a 	srl	r7,r6,r2
   4ef40:	3108983a 	sll	r4,r6,r4
   4ef44:	2884d83a 	srl	r2,r5,r2
   4ef48:	41ccb03a 	or	r6,r8,r7
   4ef4c:	2008c03a 	cmpne	r4,r4,zero
   4ef50:	310cb03a 	or	r6,r6,r4
   4ef54:	898dc83a 	sub	r6,r17,r6
   4ef58:	89a3803a 	cmpltu	r17,r17,r6
   4ef5c:	1887c83a 	sub	r3,r3,r2
   4ef60:	1c47c83a 	sub	r3,r3,r17
   4ef64:	3023883a 	mov	r17,r6
   4ef68:	1880202c 	andhi	r2,r3,128
   4ef6c:	10002326 	beq	r2,zero,4effc <__subdf3+0x20c>
   4ef70:	04c02034 	movhi	r19,128
   4ef74:	9cffffc4 	addi	r19,r19,-1
   4ef78:	1ce6703a 	and	r19,r3,r19
   4ef7c:	98007a26 	beq	r19,zero,4f168 <__subdf3+0x378>
   4ef80:	9809883a 	mov	r4,r19
   4ef84:	004f8f00 	call	4f8f0 <__clzsi2>
   4ef88:	113ffe04 	addi	r4,r2,-8
   4ef8c:	00c007c4 	movi	r3,31
   4ef90:	19007b16 	blt	r3,r4,4f180 <__subdf3+0x390>
   4ef94:	00800804 	movi	r2,32
   4ef98:	1105c83a 	sub	r2,r2,r4
   4ef9c:	8884d83a 	srl	r2,r17,r2
   4efa0:	9906983a 	sll	r3,r19,r4
   4efa4:	8922983a 	sll	r17,r17,r4
   4efa8:	10c4b03a 	or	r2,r2,r3
   4efac:	24007816 	blt	r4,r16,4f190 <__subdf3+0x3a0>
   4efb0:	2421c83a 	sub	r16,r4,r16
   4efb4:	80c00044 	addi	r3,r16,1
   4efb8:	010007c4 	movi	r4,31
   4efbc:	20c09516 	blt	r4,r3,4f214 <__subdf3+0x424>
   4efc0:	01400804 	movi	r5,32
   4efc4:	28cbc83a 	sub	r5,r5,r3
   4efc8:	88c8d83a 	srl	r4,r17,r3
   4efcc:	8962983a 	sll	r17,r17,r5
   4efd0:	114a983a 	sll	r5,r2,r5
   4efd4:	10c6d83a 	srl	r3,r2,r3
   4efd8:	8804c03a 	cmpne	r2,r17,zero
   4efdc:	290ab03a 	or	r5,r5,r4
   4efe0:	28a2b03a 	or	r17,r5,r2
   4efe4:	0021883a 	mov	r16,zero
   4efe8:	003fa206 	br	4ee74 <__alt_data_end+0xfffcee74>
   4efec:	2090b03a 	or	r8,r4,r2
   4eff0:	40018e26 	beq	r8,zero,4f62c <__subdf3+0x83c>
   4eff4:	1007883a 	mov	r3,r2
   4eff8:	2023883a 	mov	r17,r4
   4effc:	888001cc 	andi	r2,r17,7
   4f000:	103f9e1e 	bne	r2,zero,4ee7c <__alt_data_end+0xfffcee7c>
   4f004:	1804977a 	slli	r2,r3,29
   4f008:	8822d0fa 	srli	r17,r17,3
   4f00c:	1810d0fa 	srli	r8,r3,3
   4f010:	9100004c 	andi	r4,r18,1
   4f014:	1444b03a 	or	r2,r2,r17
   4f018:	00c1ffc4 	movi	r3,2047
   4f01c:	80c02826 	beq	r16,r3,4f0c0 <__subdf3+0x2d0>
   4f020:	01400434 	movhi	r5,16
   4f024:	297fffc4 	addi	r5,r5,-1
   4f028:	80e0703a 	and	r16,r16,r3
   4f02c:	414a703a 	and	r5,r8,r5
   4f030:	003fa806 	br	4eed4 <__alt_data_end+0xfffceed4>
   4f034:	0080630e 	bge	zero,r2,4f1c4 <__subdf3+0x3d4>
   4f038:	48003026 	beq	r9,zero,4f0fc <__subdf3+0x30c>
   4f03c:	0101ffc4 	movi	r4,2047
   4f040:	813f8c26 	beq	r16,r4,4ee74 <__alt_data_end+0xfffcee74>
   4f044:	29402034 	orhi	r5,r5,128
   4f048:	01000e04 	movi	r4,56
   4f04c:	2080a90e 	bge	r4,r2,4f2f4 <__subdf3+0x504>
   4f050:	298cb03a 	or	r6,r5,r6
   4f054:	3012c03a 	cmpne	r9,r6,zero
   4f058:	0005883a 	mov	r2,zero
   4f05c:	4c53883a 	add	r9,r9,r17
   4f060:	4c63803a 	cmpltu	r17,r9,r17
   4f064:	10c7883a 	add	r3,r2,r3
   4f068:	88c7883a 	add	r3,r17,r3
   4f06c:	4823883a 	mov	r17,r9
   4f070:	1880202c 	andhi	r2,r3,128
   4f074:	1000d026 	beq	r2,zero,4f3b8 <__subdf3+0x5c8>
   4f078:	84000044 	addi	r16,r16,1
   4f07c:	0081ffc4 	movi	r2,2047
   4f080:	8080fe26 	beq	r16,r2,4f47c <__subdf3+0x68c>
   4f084:	00bfe034 	movhi	r2,65408
   4f088:	10bfffc4 	addi	r2,r2,-1
   4f08c:	1886703a 	and	r3,r3,r2
   4f090:	880ad07a 	srli	r5,r17,1
   4f094:	180497fa 	slli	r2,r3,31
   4f098:	8900004c 	andi	r4,r17,1
   4f09c:	2922b03a 	or	r17,r5,r4
   4f0a0:	1806d07a 	srli	r3,r3,1
   4f0a4:	1462b03a 	or	r17,r2,r17
   4f0a8:	3825883a 	mov	r18,r7
   4f0ac:	003f7106 	br	4ee74 <__alt_data_end+0xfffcee74>
   4f0b0:	2984b03a 	or	r2,r5,r6
   4f0b4:	103f6826 	beq	r2,zero,4ee58 <__alt_data_end+0xfffcee58>
   4f0b8:	39c03fcc 	andi	r7,r7,255
   4f0bc:	003f6706 	br	4ee5c <__alt_data_end+0xfffcee5c>
   4f0c0:	4086b03a 	or	r3,r8,r2
   4f0c4:	18015226 	beq	r3,zero,4f610 <__subdf3+0x820>
   4f0c8:	00c00434 	movhi	r3,16
   4f0cc:	41400234 	orhi	r5,r8,8
   4f0d0:	18ffffc4 	addi	r3,r3,-1
   4f0d4:	28ca703a 	and	r5,r5,r3
   4f0d8:	003f7e06 	br	4eed4 <__alt_data_end+0xfffceed4>
   4f0dc:	10bfffc4 	addi	r2,r2,-1
   4f0e0:	1000491e 	bne	r2,zero,4f208 <__subdf3+0x418>
   4f0e4:	898fc83a 	sub	r7,r17,r6
   4f0e8:	89e3803a 	cmpltu	r17,r17,r7
   4f0ec:	1947c83a 	sub	r3,r3,r5
   4f0f0:	1c47c83a 	sub	r3,r3,r17
   4f0f4:	3823883a 	mov	r17,r7
   4f0f8:	003f9b06 	br	4ef68 <__alt_data_end+0xfffcef68>
   4f0fc:	2988b03a 	or	r4,r5,r6
   4f100:	203f5c26 	beq	r4,zero,4ee74 <__alt_data_end+0xfffcee74>
   4f104:	10bfffc4 	addi	r2,r2,-1
   4f108:	1000931e 	bne	r2,zero,4f358 <__subdf3+0x568>
   4f10c:	898d883a 	add	r6,r17,r6
   4f110:	3463803a 	cmpltu	r17,r6,r17
   4f114:	1947883a 	add	r3,r3,r5
   4f118:	88c7883a 	add	r3,r17,r3
   4f11c:	3023883a 	mov	r17,r6
   4f120:	003fd306 	br	4f070 <__alt_data_end+0xfffcf070>
   4f124:	1000541e 	bne	r2,zero,4f278 <__subdf3+0x488>
   4f128:	80800044 	addi	r2,r16,1
   4f12c:	1081ffcc 	andi	r2,r2,2047
   4f130:	01000044 	movi	r4,1
   4f134:	2080a20e 	bge	r4,r2,4f3c0 <__subdf3+0x5d0>
   4f138:	8989c83a 	sub	r4,r17,r6
   4f13c:	8905803a 	cmpltu	r2,r17,r4
   4f140:	1967c83a 	sub	r19,r3,r5
   4f144:	98a7c83a 	sub	r19,r19,r2
   4f148:	9880202c 	andhi	r2,r19,128
   4f14c:	10006326 	beq	r2,zero,4f2dc <__subdf3+0x4ec>
   4f150:	3463c83a 	sub	r17,r6,r17
   4f154:	28c7c83a 	sub	r3,r5,r3
   4f158:	344d803a 	cmpltu	r6,r6,r17
   4f15c:	19a7c83a 	sub	r19,r3,r6
   4f160:	3825883a 	mov	r18,r7
   4f164:	983f861e 	bne	r19,zero,4ef80 <__alt_data_end+0xfffcef80>
   4f168:	8809883a 	mov	r4,r17
   4f16c:	004f8f00 	call	4f8f0 <__clzsi2>
   4f170:	10800804 	addi	r2,r2,32
   4f174:	113ffe04 	addi	r4,r2,-8
   4f178:	00c007c4 	movi	r3,31
   4f17c:	193f850e 	bge	r3,r4,4ef94 <__alt_data_end+0xfffcef94>
   4f180:	10bff604 	addi	r2,r2,-40
   4f184:	8884983a 	sll	r2,r17,r2
   4f188:	0023883a 	mov	r17,zero
   4f18c:	243f880e 	bge	r4,r16,4efb0 <__alt_data_end+0xfffcefb0>
   4f190:	00ffe034 	movhi	r3,65408
   4f194:	18ffffc4 	addi	r3,r3,-1
   4f198:	8121c83a 	sub	r16,r16,r4
   4f19c:	10c6703a 	and	r3,r2,r3
   4f1a0:	003f3406 	br	4ee74 <__alt_data_end+0xfffcee74>
   4f1a4:	9100004c 	andi	r4,r18,1
   4f1a8:	000b883a 	mov	r5,zero
   4f1ac:	0005883a 	mov	r2,zero
   4f1b0:	003f4806 	br	4eed4 <__alt_data_end+0xfffceed4>
   4f1b4:	298cb03a 	or	r6,r5,r6
   4f1b8:	300cc03a 	cmpne	r6,r6,zero
   4f1bc:	0005883a 	mov	r2,zero
   4f1c0:	003f6406 	br	4ef54 <__alt_data_end+0xfffcef54>
   4f1c4:	10009a1e 	bne	r2,zero,4f430 <__subdf3+0x640>
   4f1c8:	82400044 	addi	r9,r16,1
   4f1cc:	4881ffcc 	andi	r2,r9,2047
   4f1d0:	02800044 	movi	r10,1
   4f1d4:	5080670e 	bge	r10,r2,4f374 <__subdf3+0x584>
   4f1d8:	0081ffc4 	movi	r2,2047
   4f1dc:	4880af26 	beq	r9,r2,4f49c <__subdf3+0x6ac>
   4f1e0:	898d883a 	add	r6,r17,r6
   4f1e4:	1945883a 	add	r2,r3,r5
   4f1e8:	3447803a 	cmpltu	r3,r6,r17
   4f1ec:	1887883a 	add	r3,r3,r2
   4f1f0:	182297fa 	slli	r17,r3,31
   4f1f4:	300cd07a 	srli	r6,r6,1
   4f1f8:	1806d07a 	srli	r3,r3,1
   4f1fc:	4821883a 	mov	r16,r9
   4f200:	89a2b03a 	or	r17,r17,r6
   4f204:	003f1b06 	br	4ee74 <__alt_data_end+0xfffcee74>
   4f208:	0101ffc4 	movi	r4,2047
   4f20c:	813f441e 	bne	r16,r4,4ef20 <__alt_data_end+0xfffcef20>
   4f210:	003f1806 	br	4ee74 <__alt_data_end+0xfffcee74>
   4f214:	843ff844 	addi	r16,r16,-31
   4f218:	01400804 	movi	r5,32
   4f21c:	1408d83a 	srl	r4,r2,r16
   4f220:	19405026 	beq	r3,r5,4f364 <__subdf3+0x574>
   4f224:	01401004 	movi	r5,64
   4f228:	28c7c83a 	sub	r3,r5,r3
   4f22c:	10c4983a 	sll	r2,r2,r3
   4f230:	88a2b03a 	or	r17,r17,r2
   4f234:	8822c03a 	cmpne	r17,r17,zero
   4f238:	2462b03a 	or	r17,r4,r17
   4f23c:	0007883a 	mov	r3,zero
   4f240:	0021883a 	mov	r16,zero
   4f244:	003f6d06 	br	4effc <__alt_data_end+0xfffceffc>
   4f248:	11fff804 	addi	r7,r2,-32
   4f24c:	01000804 	movi	r4,32
   4f250:	29ced83a 	srl	r7,r5,r7
   4f254:	11004526 	beq	r2,r4,4f36c <__subdf3+0x57c>
   4f258:	01001004 	movi	r4,64
   4f25c:	2089c83a 	sub	r4,r4,r2
   4f260:	2904983a 	sll	r2,r5,r4
   4f264:	118cb03a 	or	r6,r2,r6
   4f268:	300cc03a 	cmpne	r6,r6,zero
   4f26c:	398cb03a 	or	r6,r7,r6
   4f270:	0005883a 	mov	r2,zero
   4f274:	003f3706 	br	4ef54 <__alt_data_end+0xfffcef54>
   4f278:	80002a26 	beq	r16,zero,4f324 <__subdf3+0x534>
   4f27c:	0101ffc4 	movi	r4,2047
   4f280:	49006626 	beq	r9,r4,4f41c <__subdf3+0x62c>
   4f284:	0085c83a 	sub	r2,zero,r2
   4f288:	18c02034 	orhi	r3,r3,128
   4f28c:	01000e04 	movi	r4,56
   4f290:	20807e16 	blt	r4,r2,4f48c <__subdf3+0x69c>
   4f294:	010007c4 	movi	r4,31
   4f298:	2080e716 	blt	r4,r2,4f638 <__subdf3+0x848>
   4f29c:	01000804 	movi	r4,32
   4f2a0:	2089c83a 	sub	r4,r4,r2
   4f2a4:	1914983a 	sll	r10,r3,r4
   4f2a8:	8890d83a 	srl	r8,r17,r2
   4f2ac:	8908983a 	sll	r4,r17,r4
   4f2b0:	1884d83a 	srl	r2,r3,r2
   4f2b4:	5222b03a 	or	r17,r10,r8
   4f2b8:	2006c03a 	cmpne	r3,r4,zero
   4f2bc:	88e2b03a 	or	r17,r17,r3
   4f2c0:	3463c83a 	sub	r17,r6,r17
   4f2c4:	2885c83a 	sub	r2,r5,r2
   4f2c8:	344d803a 	cmpltu	r6,r6,r17
   4f2cc:	1187c83a 	sub	r3,r2,r6
   4f2d0:	4821883a 	mov	r16,r9
   4f2d4:	3825883a 	mov	r18,r7
   4f2d8:	003f2306 	br	4ef68 <__alt_data_end+0xfffcef68>
   4f2dc:	24d0b03a 	or	r8,r4,r19
   4f2e0:	40001b1e 	bne	r8,zero,4f350 <__subdf3+0x560>
   4f2e4:	0005883a 	mov	r2,zero
   4f2e8:	0009883a 	mov	r4,zero
   4f2ec:	0021883a 	mov	r16,zero
   4f2f0:	003f4906 	br	4f018 <__alt_data_end+0xfffcf018>
   4f2f4:	010007c4 	movi	r4,31
   4f2f8:	20803a16 	blt	r4,r2,4f3e4 <__subdf3+0x5f4>
   4f2fc:	01000804 	movi	r4,32
   4f300:	2089c83a 	sub	r4,r4,r2
   4f304:	2912983a 	sll	r9,r5,r4
   4f308:	3090d83a 	srl	r8,r6,r2
   4f30c:	3108983a 	sll	r4,r6,r4
   4f310:	2884d83a 	srl	r2,r5,r2
   4f314:	4a12b03a 	or	r9,r9,r8
   4f318:	2008c03a 	cmpne	r4,r4,zero
   4f31c:	4912b03a 	or	r9,r9,r4
   4f320:	003f4e06 	br	4f05c <__alt_data_end+0xfffcf05c>
   4f324:	1c48b03a 	or	r4,r3,r17
   4f328:	20003c26 	beq	r4,zero,4f41c <__subdf3+0x62c>
   4f32c:	0084303a 	nor	r2,zero,r2
   4f330:	1000381e 	bne	r2,zero,4f414 <__subdf3+0x624>
   4f334:	3463c83a 	sub	r17,r6,r17
   4f338:	28c5c83a 	sub	r2,r5,r3
   4f33c:	344d803a 	cmpltu	r6,r6,r17
   4f340:	1187c83a 	sub	r3,r2,r6
   4f344:	4821883a 	mov	r16,r9
   4f348:	3825883a 	mov	r18,r7
   4f34c:	003f0606 	br	4ef68 <__alt_data_end+0xfffcef68>
   4f350:	2023883a 	mov	r17,r4
   4f354:	003f0906 	br	4ef7c <__alt_data_end+0xfffcef7c>
   4f358:	0101ffc4 	movi	r4,2047
   4f35c:	813f3a1e 	bne	r16,r4,4f048 <__alt_data_end+0xfffcf048>
   4f360:	003ec406 	br	4ee74 <__alt_data_end+0xfffcee74>
   4f364:	0005883a 	mov	r2,zero
   4f368:	003fb106 	br	4f230 <__alt_data_end+0xfffcf230>
   4f36c:	0005883a 	mov	r2,zero
   4f370:	003fbc06 	br	4f264 <__alt_data_end+0xfffcf264>
   4f374:	1c44b03a 	or	r2,r3,r17
   4f378:	80008e1e 	bne	r16,zero,4f5b4 <__subdf3+0x7c4>
   4f37c:	1000c826 	beq	r2,zero,4f6a0 <__subdf3+0x8b0>
   4f380:	2984b03a 	or	r2,r5,r6
   4f384:	103ebb26 	beq	r2,zero,4ee74 <__alt_data_end+0xfffcee74>
   4f388:	8989883a 	add	r4,r17,r6
   4f38c:	1945883a 	add	r2,r3,r5
   4f390:	2447803a 	cmpltu	r3,r4,r17
   4f394:	1887883a 	add	r3,r3,r2
   4f398:	1880202c 	andhi	r2,r3,128
   4f39c:	2023883a 	mov	r17,r4
   4f3a0:	103f1626 	beq	r2,zero,4effc <__alt_data_end+0xfffceffc>
   4f3a4:	00bfe034 	movhi	r2,65408
   4f3a8:	10bfffc4 	addi	r2,r2,-1
   4f3ac:	5021883a 	mov	r16,r10
   4f3b0:	1886703a 	and	r3,r3,r2
   4f3b4:	003eaf06 	br	4ee74 <__alt_data_end+0xfffcee74>
   4f3b8:	3825883a 	mov	r18,r7
   4f3bc:	003f0f06 	br	4effc <__alt_data_end+0xfffceffc>
   4f3c0:	1c44b03a 	or	r2,r3,r17
   4f3c4:	8000251e 	bne	r16,zero,4f45c <__subdf3+0x66c>
   4f3c8:	1000661e 	bne	r2,zero,4f564 <__subdf3+0x774>
   4f3cc:	2990b03a 	or	r8,r5,r6
   4f3d0:	40009626 	beq	r8,zero,4f62c <__subdf3+0x83c>
   4f3d4:	2807883a 	mov	r3,r5
   4f3d8:	3023883a 	mov	r17,r6
   4f3dc:	3825883a 	mov	r18,r7
   4f3e0:	003ea406 	br	4ee74 <__alt_data_end+0xfffcee74>
   4f3e4:	127ff804 	addi	r9,r2,-32
   4f3e8:	01000804 	movi	r4,32
   4f3ec:	2a52d83a 	srl	r9,r5,r9
   4f3f0:	11008c26 	beq	r2,r4,4f624 <__subdf3+0x834>
   4f3f4:	01001004 	movi	r4,64
   4f3f8:	2085c83a 	sub	r2,r4,r2
   4f3fc:	2884983a 	sll	r2,r5,r2
   4f400:	118cb03a 	or	r6,r2,r6
   4f404:	300cc03a 	cmpne	r6,r6,zero
   4f408:	4992b03a 	or	r9,r9,r6
   4f40c:	0005883a 	mov	r2,zero
   4f410:	003f1206 	br	4f05c <__alt_data_end+0xfffcf05c>
   4f414:	0101ffc4 	movi	r4,2047
   4f418:	493f9c1e 	bne	r9,r4,4f28c <__alt_data_end+0xfffcf28c>
   4f41c:	2807883a 	mov	r3,r5
   4f420:	3023883a 	mov	r17,r6
   4f424:	4821883a 	mov	r16,r9
   4f428:	3825883a 	mov	r18,r7
   4f42c:	003e9106 	br	4ee74 <__alt_data_end+0xfffcee74>
   4f430:	80001f1e 	bne	r16,zero,4f4b0 <__subdf3+0x6c0>
   4f434:	1c48b03a 	or	r4,r3,r17
   4f438:	20005a26 	beq	r4,zero,4f5a4 <__subdf3+0x7b4>
   4f43c:	0084303a 	nor	r2,zero,r2
   4f440:	1000561e 	bne	r2,zero,4f59c <__subdf3+0x7ac>
   4f444:	89a3883a 	add	r17,r17,r6
   4f448:	1945883a 	add	r2,r3,r5
   4f44c:	898d803a 	cmpltu	r6,r17,r6
   4f450:	3087883a 	add	r3,r6,r2
   4f454:	4821883a 	mov	r16,r9
   4f458:	003f0506 	br	4f070 <__alt_data_end+0xfffcf070>
   4f45c:	10002b1e 	bne	r2,zero,4f50c <__subdf3+0x71c>
   4f460:	2984b03a 	or	r2,r5,r6
   4f464:	10008026 	beq	r2,zero,4f668 <__subdf3+0x878>
   4f468:	2807883a 	mov	r3,r5
   4f46c:	3023883a 	mov	r17,r6
   4f470:	3825883a 	mov	r18,r7
   4f474:	0401ffc4 	movi	r16,2047
   4f478:	003e7e06 	br	4ee74 <__alt_data_end+0xfffcee74>
   4f47c:	3809883a 	mov	r4,r7
   4f480:	0011883a 	mov	r8,zero
   4f484:	0005883a 	mov	r2,zero
   4f488:	003ee306 	br	4f018 <__alt_data_end+0xfffcf018>
   4f48c:	1c62b03a 	or	r17,r3,r17
   4f490:	8822c03a 	cmpne	r17,r17,zero
   4f494:	0005883a 	mov	r2,zero
   4f498:	003f8906 	br	4f2c0 <__alt_data_end+0xfffcf2c0>
   4f49c:	3809883a 	mov	r4,r7
   4f4a0:	4821883a 	mov	r16,r9
   4f4a4:	0011883a 	mov	r8,zero
   4f4a8:	0005883a 	mov	r2,zero
   4f4ac:	003eda06 	br	4f018 <__alt_data_end+0xfffcf018>
   4f4b0:	0101ffc4 	movi	r4,2047
   4f4b4:	49003b26 	beq	r9,r4,4f5a4 <__subdf3+0x7b4>
   4f4b8:	0085c83a 	sub	r2,zero,r2
   4f4bc:	18c02034 	orhi	r3,r3,128
   4f4c0:	01000e04 	movi	r4,56
   4f4c4:	20806e16 	blt	r4,r2,4f680 <__subdf3+0x890>
   4f4c8:	010007c4 	movi	r4,31
   4f4cc:	20807716 	blt	r4,r2,4f6ac <__subdf3+0x8bc>
   4f4d0:	01000804 	movi	r4,32
   4f4d4:	2089c83a 	sub	r4,r4,r2
   4f4d8:	1914983a 	sll	r10,r3,r4
   4f4dc:	8890d83a 	srl	r8,r17,r2
   4f4e0:	8908983a 	sll	r4,r17,r4
   4f4e4:	1884d83a 	srl	r2,r3,r2
   4f4e8:	5222b03a 	or	r17,r10,r8
   4f4ec:	2006c03a 	cmpne	r3,r4,zero
   4f4f0:	88e2b03a 	or	r17,r17,r3
   4f4f4:	89a3883a 	add	r17,r17,r6
   4f4f8:	1145883a 	add	r2,r2,r5
   4f4fc:	898d803a 	cmpltu	r6,r17,r6
   4f500:	3087883a 	add	r3,r6,r2
   4f504:	4821883a 	mov	r16,r9
   4f508:	003ed906 	br	4f070 <__alt_data_end+0xfffcf070>
   4f50c:	2984b03a 	or	r2,r5,r6
   4f510:	10004226 	beq	r2,zero,4f61c <__subdf3+0x82c>
   4f514:	1808d0fa 	srli	r4,r3,3
   4f518:	8822d0fa 	srli	r17,r17,3
   4f51c:	1806977a 	slli	r3,r3,29
   4f520:	2080022c 	andhi	r2,r4,8
   4f524:	1c62b03a 	or	r17,r3,r17
   4f528:	10000826 	beq	r2,zero,4f54c <__subdf3+0x75c>
   4f52c:	2812d0fa 	srli	r9,r5,3
   4f530:	4880022c 	andhi	r2,r9,8
   4f534:	1000051e 	bne	r2,zero,4f54c <__subdf3+0x75c>
   4f538:	300cd0fa 	srli	r6,r6,3
   4f53c:	2804977a 	slli	r2,r5,29
   4f540:	4809883a 	mov	r4,r9
   4f544:	3825883a 	mov	r18,r7
   4f548:	11a2b03a 	or	r17,r2,r6
   4f54c:	8806d77a 	srli	r3,r17,29
   4f550:	200890fa 	slli	r4,r4,3
   4f554:	882290fa 	slli	r17,r17,3
   4f558:	0401ffc4 	movi	r16,2047
   4f55c:	1906b03a 	or	r3,r3,r4
   4f560:	003e4406 	br	4ee74 <__alt_data_end+0xfffcee74>
   4f564:	2984b03a 	or	r2,r5,r6
   4f568:	103e4226 	beq	r2,zero,4ee74 <__alt_data_end+0xfffcee74>
   4f56c:	8989c83a 	sub	r4,r17,r6
   4f570:	8911803a 	cmpltu	r8,r17,r4
   4f574:	1945c83a 	sub	r2,r3,r5
   4f578:	1205c83a 	sub	r2,r2,r8
   4f57c:	1200202c 	andhi	r8,r2,128
   4f580:	403e9a26 	beq	r8,zero,4efec <__alt_data_end+0xfffcefec>
   4f584:	3463c83a 	sub	r17,r6,r17
   4f588:	28c5c83a 	sub	r2,r5,r3
   4f58c:	344d803a 	cmpltu	r6,r6,r17
   4f590:	1187c83a 	sub	r3,r2,r6
   4f594:	3825883a 	mov	r18,r7
   4f598:	003e3606 	br	4ee74 <__alt_data_end+0xfffcee74>
   4f59c:	0101ffc4 	movi	r4,2047
   4f5a0:	493fc71e 	bne	r9,r4,4f4c0 <__alt_data_end+0xfffcf4c0>
   4f5a4:	2807883a 	mov	r3,r5
   4f5a8:	3023883a 	mov	r17,r6
   4f5ac:	4821883a 	mov	r16,r9
   4f5b0:	003e3006 	br	4ee74 <__alt_data_end+0xfffcee74>
   4f5b4:	10003626 	beq	r2,zero,4f690 <__subdf3+0x8a0>
   4f5b8:	2984b03a 	or	r2,r5,r6
   4f5bc:	10001726 	beq	r2,zero,4f61c <__subdf3+0x82c>
   4f5c0:	1808d0fa 	srli	r4,r3,3
   4f5c4:	8822d0fa 	srli	r17,r17,3
   4f5c8:	1806977a 	slli	r3,r3,29
   4f5cc:	2080022c 	andhi	r2,r4,8
   4f5d0:	1c62b03a 	or	r17,r3,r17
   4f5d4:	10000726 	beq	r2,zero,4f5f4 <__subdf3+0x804>
   4f5d8:	2812d0fa 	srli	r9,r5,3
   4f5dc:	4880022c 	andhi	r2,r9,8
   4f5e0:	1000041e 	bne	r2,zero,4f5f4 <__subdf3+0x804>
   4f5e4:	300cd0fa 	srli	r6,r6,3
   4f5e8:	2804977a 	slli	r2,r5,29
   4f5ec:	4809883a 	mov	r4,r9
   4f5f0:	11a2b03a 	or	r17,r2,r6
   4f5f4:	8806d77a 	srli	r3,r17,29
   4f5f8:	200890fa 	slli	r4,r4,3
   4f5fc:	882290fa 	slli	r17,r17,3
   4f600:	3825883a 	mov	r18,r7
   4f604:	1906b03a 	or	r3,r3,r4
   4f608:	0401ffc4 	movi	r16,2047
   4f60c:	003e1906 	br	4ee74 <__alt_data_end+0xfffcee74>
   4f610:	000b883a 	mov	r5,zero
   4f614:	0005883a 	mov	r2,zero
   4f618:	003e2e06 	br	4eed4 <__alt_data_end+0xfffceed4>
   4f61c:	0401ffc4 	movi	r16,2047
   4f620:	003e1406 	br	4ee74 <__alt_data_end+0xfffcee74>
   4f624:	0005883a 	mov	r2,zero
   4f628:	003f7506 	br	4f400 <__alt_data_end+0xfffcf400>
   4f62c:	0005883a 	mov	r2,zero
   4f630:	0009883a 	mov	r4,zero
   4f634:	003e7806 	br	4f018 <__alt_data_end+0xfffcf018>
   4f638:	123ff804 	addi	r8,r2,-32
   4f63c:	01000804 	movi	r4,32
   4f640:	1a10d83a 	srl	r8,r3,r8
   4f644:	11002526 	beq	r2,r4,4f6dc <__subdf3+0x8ec>
   4f648:	01001004 	movi	r4,64
   4f64c:	2085c83a 	sub	r2,r4,r2
   4f650:	1884983a 	sll	r2,r3,r2
   4f654:	1444b03a 	or	r2,r2,r17
   4f658:	1004c03a 	cmpne	r2,r2,zero
   4f65c:	40a2b03a 	or	r17,r8,r2
   4f660:	0005883a 	mov	r2,zero
   4f664:	003f1606 	br	4f2c0 <__alt_data_end+0xfffcf2c0>
   4f668:	02000434 	movhi	r8,16
   4f66c:	0009883a 	mov	r4,zero
   4f670:	423fffc4 	addi	r8,r8,-1
   4f674:	00bfffc4 	movi	r2,-1
   4f678:	0401ffc4 	movi	r16,2047
   4f67c:	003e6606 	br	4f018 <__alt_data_end+0xfffcf018>
   4f680:	1c62b03a 	or	r17,r3,r17
   4f684:	8822c03a 	cmpne	r17,r17,zero
   4f688:	0005883a 	mov	r2,zero
   4f68c:	003f9906 	br	4f4f4 <__alt_data_end+0xfffcf4f4>
   4f690:	2807883a 	mov	r3,r5
   4f694:	3023883a 	mov	r17,r6
   4f698:	0401ffc4 	movi	r16,2047
   4f69c:	003df506 	br	4ee74 <__alt_data_end+0xfffcee74>
   4f6a0:	2807883a 	mov	r3,r5
   4f6a4:	3023883a 	mov	r17,r6
   4f6a8:	003df206 	br	4ee74 <__alt_data_end+0xfffcee74>
   4f6ac:	123ff804 	addi	r8,r2,-32
   4f6b0:	01000804 	movi	r4,32
   4f6b4:	1a10d83a 	srl	r8,r3,r8
   4f6b8:	11000a26 	beq	r2,r4,4f6e4 <__subdf3+0x8f4>
   4f6bc:	01001004 	movi	r4,64
   4f6c0:	2085c83a 	sub	r2,r4,r2
   4f6c4:	1884983a 	sll	r2,r3,r2
   4f6c8:	1444b03a 	or	r2,r2,r17
   4f6cc:	1004c03a 	cmpne	r2,r2,zero
   4f6d0:	40a2b03a 	or	r17,r8,r2
   4f6d4:	0005883a 	mov	r2,zero
   4f6d8:	003f8606 	br	4f4f4 <__alt_data_end+0xfffcf4f4>
   4f6dc:	0005883a 	mov	r2,zero
   4f6e0:	003fdc06 	br	4f654 <__alt_data_end+0xfffcf654>
   4f6e4:	0005883a 	mov	r2,zero
   4f6e8:	003ff706 	br	4f6c8 <__alt_data_end+0xfffcf6c8>

0004f6ec <__fixdfsi>:
   4f6ec:	280cd53a 	srli	r6,r5,20
   4f6f0:	00c00434 	movhi	r3,16
   4f6f4:	18ffffc4 	addi	r3,r3,-1
   4f6f8:	3181ffcc 	andi	r6,r6,2047
   4f6fc:	01c0ff84 	movi	r7,1022
   4f700:	28c6703a 	and	r3,r5,r3
   4f704:	280ad7fa 	srli	r5,r5,31
   4f708:	3980120e 	bge	r7,r6,4f754 <__fixdfsi+0x68>
   4f70c:	00810744 	movi	r2,1053
   4f710:	11800c16 	blt	r2,r6,4f744 <__fixdfsi+0x58>
   4f714:	00810cc4 	movi	r2,1075
   4f718:	1185c83a 	sub	r2,r2,r6
   4f71c:	01c007c4 	movi	r7,31
   4f720:	18c00434 	orhi	r3,r3,16
   4f724:	38800d16 	blt	r7,r2,4f75c <__fixdfsi+0x70>
   4f728:	31befb44 	addi	r6,r6,-1043
   4f72c:	2084d83a 	srl	r2,r4,r2
   4f730:	1986983a 	sll	r3,r3,r6
   4f734:	1884b03a 	or	r2,r3,r2
   4f738:	28000726 	beq	r5,zero,4f758 <__fixdfsi+0x6c>
   4f73c:	0085c83a 	sub	r2,zero,r2
   4f740:	f800283a 	ret
   4f744:	00a00034 	movhi	r2,32768
   4f748:	10bfffc4 	addi	r2,r2,-1
   4f74c:	2885883a 	add	r2,r5,r2
   4f750:	f800283a 	ret
   4f754:	0005883a 	mov	r2,zero
   4f758:	f800283a 	ret
   4f75c:	008104c4 	movi	r2,1043
   4f760:	1185c83a 	sub	r2,r2,r6
   4f764:	1884d83a 	srl	r2,r3,r2
   4f768:	003ff306 	br	4f738 <__alt_data_end+0xfffcf738>

0004f76c <__floatsidf>:
   4f76c:	defffd04 	addi	sp,sp,-12
   4f770:	dfc00215 	stw	ra,8(sp)
   4f774:	dc400115 	stw	r17,4(sp)
   4f778:	dc000015 	stw	r16,0(sp)
   4f77c:	20002b26 	beq	r4,zero,4f82c <__floatsidf+0xc0>
   4f780:	2023883a 	mov	r17,r4
   4f784:	2020d7fa 	srli	r16,r4,31
   4f788:	20002d16 	blt	r4,zero,4f840 <__floatsidf+0xd4>
   4f78c:	8809883a 	mov	r4,r17
   4f790:	004f8f00 	call	4f8f0 <__clzsi2>
   4f794:	01410784 	movi	r5,1054
   4f798:	288bc83a 	sub	r5,r5,r2
   4f79c:	01010cc4 	movi	r4,1075
   4f7a0:	2149c83a 	sub	r4,r4,r5
   4f7a4:	00c007c4 	movi	r3,31
   4f7a8:	1900160e 	bge	r3,r4,4f804 <__floatsidf+0x98>
   4f7ac:	00c104c4 	movi	r3,1043
   4f7b0:	1947c83a 	sub	r3,r3,r5
   4f7b4:	88c6983a 	sll	r3,r17,r3
   4f7b8:	00800434 	movhi	r2,16
   4f7bc:	10bfffc4 	addi	r2,r2,-1
   4f7c0:	1886703a 	and	r3,r3,r2
   4f7c4:	2941ffcc 	andi	r5,r5,2047
   4f7c8:	800d883a 	mov	r6,r16
   4f7cc:	0005883a 	mov	r2,zero
   4f7d0:	280a953a 	slli	r5,r5,20
   4f7d4:	31803fcc 	andi	r6,r6,255
   4f7d8:	01000434 	movhi	r4,16
   4f7dc:	300c97fa 	slli	r6,r6,31
   4f7e0:	213fffc4 	addi	r4,r4,-1
   4f7e4:	1906703a 	and	r3,r3,r4
   4f7e8:	1946b03a 	or	r3,r3,r5
   4f7ec:	1986b03a 	or	r3,r3,r6
   4f7f0:	dfc00217 	ldw	ra,8(sp)
   4f7f4:	dc400117 	ldw	r17,4(sp)
   4f7f8:	dc000017 	ldw	r16,0(sp)
   4f7fc:	dec00304 	addi	sp,sp,12
   4f800:	f800283a 	ret
   4f804:	00c002c4 	movi	r3,11
   4f808:	1887c83a 	sub	r3,r3,r2
   4f80c:	88c6d83a 	srl	r3,r17,r3
   4f810:	8904983a 	sll	r2,r17,r4
   4f814:	01000434 	movhi	r4,16
   4f818:	213fffc4 	addi	r4,r4,-1
   4f81c:	2941ffcc 	andi	r5,r5,2047
   4f820:	1906703a 	and	r3,r3,r4
   4f824:	800d883a 	mov	r6,r16
   4f828:	003fe906 	br	4f7d0 <__alt_data_end+0xfffcf7d0>
   4f82c:	000d883a 	mov	r6,zero
   4f830:	000b883a 	mov	r5,zero
   4f834:	0007883a 	mov	r3,zero
   4f838:	0005883a 	mov	r2,zero
   4f83c:	003fe406 	br	4f7d0 <__alt_data_end+0xfffcf7d0>
   4f840:	0123c83a 	sub	r17,zero,r4
   4f844:	003fd106 	br	4f78c <__alt_data_end+0xfffcf78c>

0004f848 <__floatunsidf>:
   4f848:	defffe04 	addi	sp,sp,-8
   4f84c:	dc000015 	stw	r16,0(sp)
   4f850:	dfc00115 	stw	ra,4(sp)
   4f854:	2021883a 	mov	r16,r4
   4f858:	20002226 	beq	r4,zero,4f8e4 <__floatunsidf+0x9c>
   4f85c:	004f8f00 	call	4f8f0 <__clzsi2>
   4f860:	01010784 	movi	r4,1054
   4f864:	2089c83a 	sub	r4,r4,r2
   4f868:	01810cc4 	movi	r6,1075
   4f86c:	310dc83a 	sub	r6,r6,r4
   4f870:	00c007c4 	movi	r3,31
   4f874:	1980120e 	bge	r3,r6,4f8c0 <__floatunsidf+0x78>
   4f878:	00c104c4 	movi	r3,1043
   4f87c:	1907c83a 	sub	r3,r3,r4
   4f880:	80ca983a 	sll	r5,r16,r3
   4f884:	00800434 	movhi	r2,16
   4f888:	10bfffc4 	addi	r2,r2,-1
   4f88c:	2101ffcc 	andi	r4,r4,2047
   4f890:	0021883a 	mov	r16,zero
   4f894:	288a703a 	and	r5,r5,r2
   4f898:	2008953a 	slli	r4,r4,20
   4f89c:	00c00434 	movhi	r3,16
   4f8a0:	18ffffc4 	addi	r3,r3,-1
   4f8a4:	28c6703a 	and	r3,r5,r3
   4f8a8:	8005883a 	mov	r2,r16
   4f8ac:	1906b03a 	or	r3,r3,r4
   4f8b0:	dfc00117 	ldw	ra,4(sp)
   4f8b4:	dc000017 	ldw	r16,0(sp)
   4f8b8:	dec00204 	addi	sp,sp,8
   4f8bc:	f800283a 	ret
   4f8c0:	00c002c4 	movi	r3,11
   4f8c4:	188bc83a 	sub	r5,r3,r2
   4f8c8:	814ad83a 	srl	r5,r16,r5
   4f8cc:	00c00434 	movhi	r3,16
   4f8d0:	18ffffc4 	addi	r3,r3,-1
   4f8d4:	81a0983a 	sll	r16,r16,r6
   4f8d8:	2101ffcc 	andi	r4,r4,2047
   4f8dc:	28ca703a 	and	r5,r5,r3
   4f8e0:	003fed06 	br	4f898 <__alt_data_end+0xfffcf898>
   4f8e4:	0009883a 	mov	r4,zero
   4f8e8:	000b883a 	mov	r5,zero
   4f8ec:	003fea06 	br	4f898 <__alt_data_end+0xfffcf898>

0004f8f0 <__clzsi2>:
   4f8f0:	00bfffd4 	movui	r2,65535
   4f8f4:	11000536 	bltu	r2,r4,4f90c <__clzsi2+0x1c>
   4f8f8:	00803fc4 	movi	r2,255
   4f8fc:	11000f36 	bltu	r2,r4,4f93c <__clzsi2+0x4c>
   4f900:	00800804 	movi	r2,32
   4f904:	0007883a 	mov	r3,zero
   4f908:	00000506 	br	4f920 <__clzsi2+0x30>
   4f90c:	00804034 	movhi	r2,256
   4f910:	10bfffc4 	addi	r2,r2,-1
   4f914:	11000c2e 	bgeu	r2,r4,4f948 <__clzsi2+0x58>
   4f918:	00800204 	movi	r2,8
   4f91c:	00c00604 	movi	r3,24
   4f920:	20c8d83a 	srl	r4,r4,r3
   4f924:	00c00174 	movhi	r3,5
   4f928:	18c13304 	addi	r3,r3,1228
   4f92c:	1909883a 	add	r4,r3,r4
   4f930:	20c00003 	ldbu	r3,0(r4)
   4f934:	10c5c83a 	sub	r2,r2,r3
   4f938:	f800283a 	ret
   4f93c:	00800604 	movi	r2,24
   4f940:	00c00204 	movi	r3,8
   4f944:	003ff606 	br	4f920 <__alt_data_end+0xfffcf920>
   4f948:	00800404 	movi	r2,16
   4f94c:	1007883a 	mov	r3,r2
   4f950:	003ff306 	br	4f920 <__alt_data_end+0xfffcf920>

0004f954 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   4f954:	defffd04 	addi	sp,sp,-12
   4f958:	df000215 	stw	fp,8(sp)
   4f95c:	df000204 	addi	fp,sp,8
   4f960:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   4f964:	0001883a 	nop
   4f968:	e0bfff17 	ldw	r2,-4(fp)
   4f96c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   4f970:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   4f974:	10000226 	beq	r2,zero,4f980 <_exit+0x2c>
    ALT_SIM_FAIL();
   4f978:	002af070 	cmpltui	zero,zero,43969
   4f97c:	00000106 	br	4f984 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   4f980:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   4f984:	003fff06 	br	4f984 <__alt_data_end+0xfffcf984>

0004f988 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4f988:	defffe04 	addi	sp,sp,-8
   4f98c:	dfc00115 	stw	ra,4(sp)
   4f990:	df000015 	stw	fp,0(sp)
   4f994:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4f998:	d0a00717 	ldw	r2,-32740(gp)
   4f99c:	10000326 	beq	r2,zero,4f9ac <alt_get_errno+0x24>
   4f9a0:	d0a00717 	ldw	r2,-32740(gp)
   4f9a4:	103ee83a 	callr	r2
   4f9a8:	00000106 	br	4f9b0 <alt_get_errno+0x28>
   4f9ac:	d0a6d604 	addi	r2,gp,-25768
}
   4f9b0:	e037883a 	mov	sp,fp
   4f9b4:	dfc00117 	ldw	ra,4(sp)
   4f9b8:	df000017 	ldw	fp,0(sp)
   4f9bc:	dec00204 	addi	sp,sp,8
   4f9c0:	f800283a 	ret

0004f9c4 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   4f9c4:	defffb04 	addi	sp,sp,-20
   4f9c8:	dfc00415 	stw	ra,16(sp)
   4f9cc:	df000315 	stw	fp,12(sp)
   4f9d0:	df000304 	addi	fp,sp,12
   4f9d4:	e13ffe15 	stw	r4,-8(fp)
   4f9d8:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4f9dc:	e0bffe17 	ldw	r2,-8(fp)
   4f9e0:	10000616 	blt	r2,zero,4f9fc <fstat+0x38>
   4f9e4:	e0bffe17 	ldw	r2,-8(fp)
   4f9e8:	10c00324 	muli	r3,r2,12
   4f9ec:	00800174 	movhi	r2,5
   4f9f0:	10859504 	addi	r2,r2,5716
   4f9f4:	1885883a 	add	r2,r3,r2
   4f9f8:	00000106 	br	4fa00 <fstat+0x3c>
   4f9fc:	0005883a 	mov	r2,zero
   4fa00:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   4fa04:	e0bffd17 	ldw	r2,-12(fp)
   4fa08:	10001026 	beq	r2,zero,4fa4c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   4fa0c:	e0bffd17 	ldw	r2,-12(fp)
   4fa10:	10800017 	ldw	r2,0(r2)
   4fa14:	10800817 	ldw	r2,32(r2)
   4fa18:	10000726 	beq	r2,zero,4fa38 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   4fa1c:	e0bffd17 	ldw	r2,-12(fp)
   4fa20:	10800017 	ldw	r2,0(r2)
   4fa24:	10800817 	ldw	r2,32(r2)
   4fa28:	e17fff17 	ldw	r5,-4(fp)
   4fa2c:	e13ffd17 	ldw	r4,-12(fp)
   4fa30:	103ee83a 	callr	r2
   4fa34:	00000a06 	br	4fa60 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   4fa38:	e0bfff17 	ldw	r2,-4(fp)
   4fa3c:	00c80004 	movi	r3,8192
   4fa40:	10c00115 	stw	r3,4(r2)
      return 0;
   4fa44:	0005883a 	mov	r2,zero
   4fa48:	00000506 	br	4fa60 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4fa4c:	004f9880 	call	4f988 <alt_get_errno>
   4fa50:	1007883a 	mov	r3,r2
   4fa54:	00801444 	movi	r2,81
   4fa58:	18800015 	stw	r2,0(r3)
    return -1;
   4fa5c:	00bfffc4 	movi	r2,-1
  }
}
   4fa60:	e037883a 	mov	sp,fp
   4fa64:	dfc00117 	ldw	ra,4(sp)
   4fa68:	df000017 	ldw	fp,0(sp)
   4fa6c:	dec00204 	addi	sp,sp,8
   4fa70:	f800283a 	ret

0004fa74 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4fa74:	defffe04 	addi	sp,sp,-8
   4fa78:	dfc00115 	stw	ra,4(sp)
   4fa7c:	df000015 	stw	fp,0(sp)
   4fa80:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4fa84:	d0a00717 	ldw	r2,-32740(gp)
   4fa88:	10000326 	beq	r2,zero,4fa98 <alt_get_errno+0x24>
   4fa8c:	d0a00717 	ldw	r2,-32740(gp)
   4fa90:	103ee83a 	callr	r2
   4fa94:	00000106 	br	4fa9c <alt_get_errno+0x28>
   4fa98:	d0a6d604 	addi	r2,gp,-25768
}
   4fa9c:	e037883a 	mov	sp,fp
   4faa0:	dfc00117 	ldw	ra,4(sp)
   4faa4:	df000017 	ldw	fp,0(sp)
   4faa8:	dec00204 	addi	sp,sp,8
   4faac:	f800283a 	ret

0004fab0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   4fab0:	deffed04 	addi	sp,sp,-76
   4fab4:	dfc01215 	stw	ra,72(sp)
   4fab8:	df001115 	stw	fp,68(sp)
   4fabc:	df001104 	addi	fp,sp,68
   4fac0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4fac4:	e0bfff17 	ldw	r2,-4(fp)
   4fac8:	10000616 	blt	r2,zero,4fae4 <isatty+0x34>
   4facc:	e0bfff17 	ldw	r2,-4(fp)
   4fad0:	10c00324 	muli	r3,r2,12
   4fad4:	00800174 	movhi	r2,5
   4fad8:	10859504 	addi	r2,r2,5716
   4fadc:	1885883a 	add	r2,r3,r2
   4fae0:	00000106 	br	4fae8 <isatty+0x38>
   4fae4:	0005883a 	mov	r2,zero
   4fae8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   4faec:	e0bfef17 	ldw	r2,-68(fp)
   4faf0:	10000e26 	beq	r2,zero,4fb2c <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   4faf4:	e0bfef17 	ldw	r2,-68(fp)
   4faf8:	10800017 	ldw	r2,0(r2)
   4fafc:	10800817 	ldw	r2,32(r2)
   4fb00:	1000021e 	bne	r2,zero,4fb0c <isatty+0x5c>
    {
      return 1;
   4fb04:	00800044 	movi	r2,1
   4fb08:	00000d06 	br	4fb40 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   4fb0c:	e0bff004 	addi	r2,fp,-64
   4fb10:	100b883a 	mov	r5,r2
   4fb14:	e13fff17 	ldw	r4,-4(fp)
   4fb18:	004f9c40 	call	4f9c4 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   4fb1c:	e0bff117 	ldw	r2,-60(fp)
   4fb20:	10880020 	cmpeqi	r2,r2,8192
   4fb24:	10803fcc 	andi	r2,r2,255
   4fb28:	00000506 	br	4fb40 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   4fb2c:	004fa740 	call	4fa74 <alt_get_errno>
   4fb30:	1007883a 	mov	r3,r2
   4fb34:	00801444 	movi	r2,81
   4fb38:	18800015 	stw	r2,0(r3)
    return 0;
   4fb3c:	0005883a 	mov	r2,zero
  }
}
   4fb40:	e037883a 	mov	sp,fp
   4fb44:	dfc00117 	ldw	ra,4(sp)
   4fb48:	df000017 	ldw	fp,0(sp)
   4fb4c:	dec00204 	addi	sp,sp,8
   4fb50:	f800283a 	ret

0004fb54 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4fb54:	defffe04 	addi	sp,sp,-8
   4fb58:	dfc00115 	stw	ra,4(sp)
   4fb5c:	df000015 	stw	fp,0(sp)
   4fb60:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4fb64:	d0a00717 	ldw	r2,-32740(gp)
   4fb68:	10000326 	beq	r2,zero,4fb78 <alt_get_errno+0x24>
   4fb6c:	d0a00717 	ldw	r2,-32740(gp)
   4fb70:	103ee83a 	callr	r2
   4fb74:	00000106 	br	4fb7c <alt_get_errno+0x28>
   4fb78:	d0a6d604 	addi	r2,gp,-25768
}
   4fb7c:	e037883a 	mov	sp,fp
   4fb80:	dfc00117 	ldw	ra,4(sp)
   4fb84:	df000017 	ldw	fp,0(sp)
   4fb88:	dec00204 	addi	sp,sp,8
   4fb8c:	f800283a 	ret

0004fb90 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   4fb90:	defff904 	addi	sp,sp,-28
   4fb94:	dfc00615 	stw	ra,24(sp)
   4fb98:	df000515 	stw	fp,20(sp)
   4fb9c:	df000504 	addi	fp,sp,20
   4fba0:	e13ffd15 	stw	r4,-12(fp)
   4fba4:	e17ffe15 	stw	r5,-8(fp)
   4fba8:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   4fbac:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4fbb0:	e0bffd17 	ldw	r2,-12(fp)
   4fbb4:	10000616 	blt	r2,zero,4fbd0 <lseek+0x40>
   4fbb8:	e0bffd17 	ldw	r2,-12(fp)
   4fbbc:	10c00324 	muli	r3,r2,12
   4fbc0:	00800174 	movhi	r2,5
   4fbc4:	10859504 	addi	r2,r2,5716
   4fbc8:	1885883a 	add	r2,r3,r2
   4fbcc:	00000106 	br	4fbd4 <lseek+0x44>
   4fbd0:	0005883a 	mov	r2,zero
   4fbd4:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   4fbd8:	e0bffc17 	ldw	r2,-16(fp)
   4fbdc:	10001026 	beq	r2,zero,4fc20 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   4fbe0:	e0bffc17 	ldw	r2,-16(fp)
   4fbe4:	10800017 	ldw	r2,0(r2)
   4fbe8:	10800717 	ldw	r2,28(r2)
   4fbec:	10000926 	beq	r2,zero,4fc14 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   4fbf0:	e0bffc17 	ldw	r2,-16(fp)
   4fbf4:	10800017 	ldw	r2,0(r2)
   4fbf8:	10800717 	ldw	r2,28(r2)
   4fbfc:	e1bfff17 	ldw	r6,-4(fp)
   4fc00:	e17ffe17 	ldw	r5,-8(fp)
   4fc04:	e13ffc17 	ldw	r4,-16(fp)
   4fc08:	103ee83a 	callr	r2
   4fc0c:	e0bffb15 	stw	r2,-20(fp)
   4fc10:	00000506 	br	4fc28 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   4fc14:	00bfde84 	movi	r2,-134
   4fc18:	e0bffb15 	stw	r2,-20(fp)
   4fc1c:	00000206 	br	4fc28 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   4fc20:	00bfebc4 	movi	r2,-81
   4fc24:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   4fc28:	e0bffb17 	ldw	r2,-20(fp)
   4fc2c:	1000070e 	bge	r2,zero,4fc4c <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   4fc30:	004fb540 	call	4fb54 <alt_get_errno>
   4fc34:	1007883a 	mov	r3,r2
   4fc38:	e0bffb17 	ldw	r2,-20(fp)
   4fc3c:	0085c83a 	sub	r2,zero,r2
   4fc40:	18800015 	stw	r2,0(r3)
    rc = -1;
   4fc44:	00bfffc4 	movi	r2,-1
   4fc48:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   4fc4c:	e0bffb17 	ldw	r2,-20(fp)
}
   4fc50:	e037883a 	mov	sp,fp
   4fc54:	dfc00117 	ldw	ra,4(sp)
   4fc58:	df000017 	ldw	fp,0(sp)
   4fc5c:	dec00204 	addi	sp,sp,8
   4fc60:	f800283a 	ret

0004fc64 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   4fc64:	defffe04 	addi	sp,sp,-8
   4fc68:	df000115 	stw	fp,4(sp)
   4fc6c:	df000104 	addi	fp,sp,4
   4fc70:	e13fff15 	stw	r4,-4(fp)
}
   4fc74:	0001883a 	nop
   4fc78:	e037883a 	mov	sp,fp
   4fc7c:	df000017 	ldw	fp,0(sp)
   4fc80:	dec00104 	addi	sp,sp,4
   4fc84:	f800283a 	ret

0004fc88 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   4fc88:	defffe04 	addi	sp,sp,-8
   4fc8c:	df000115 	stw	fp,4(sp)
   4fc90:	df000104 	addi	fp,sp,4
   4fc94:	e13fff15 	stw	r4,-4(fp)
}
   4fc98:	0001883a 	nop
   4fc9c:	e037883a 	mov	sp,fp
   4fca0:	df000017 	ldw	fp,0(sp)
   4fca4:	dec00104 	addi	sp,sp,4
   4fca8:	f800283a 	ret

0004fcac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4fcac:	defffe04 	addi	sp,sp,-8
   4fcb0:	dfc00115 	stw	ra,4(sp)
   4fcb4:	df000015 	stw	fp,0(sp)
   4fcb8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4fcbc:	d0a00717 	ldw	r2,-32740(gp)
   4fcc0:	10000326 	beq	r2,zero,4fcd0 <alt_get_errno+0x24>
   4fcc4:	d0a00717 	ldw	r2,-32740(gp)
   4fcc8:	103ee83a 	callr	r2
   4fccc:	00000106 	br	4fcd4 <alt_get_errno+0x28>
   4fcd0:	d0a6d604 	addi	r2,gp,-25768
}
   4fcd4:	e037883a 	mov	sp,fp
   4fcd8:	dfc00117 	ldw	ra,4(sp)
   4fcdc:	df000017 	ldw	fp,0(sp)
   4fce0:	dec00204 	addi	sp,sp,8
   4fce4:	f800283a 	ret

0004fce8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   4fce8:	defff904 	addi	sp,sp,-28
   4fcec:	dfc00615 	stw	ra,24(sp)
   4fcf0:	df000515 	stw	fp,20(sp)
   4fcf4:	df000504 	addi	fp,sp,20
   4fcf8:	e13ffd15 	stw	r4,-12(fp)
   4fcfc:	e17ffe15 	stw	r5,-8(fp)
   4fd00:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4fd04:	e0bffd17 	ldw	r2,-12(fp)
   4fd08:	10000616 	blt	r2,zero,4fd24 <read+0x3c>
   4fd0c:	e0bffd17 	ldw	r2,-12(fp)
   4fd10:	10c00324 	muli	r3,r2,12
   4fd14:	00800174 	movhi	r2,5
   4fd18:	10859504 	addi	r2,r2,5716
   4fd1c:	1885883a 	add	r2,r3,r2
   4fd20:	00000106 	br	4fd28 <read+0x40>
   4fd24:	0005883a 	mov	r2,zero
   4fd28:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   4fd2c:	e0bffb17 	ldw	r2,-20(fp)
   4fd30:	10002226 	beq	r2,zero,4fdbc <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   4fd34:	e0bffb17 	ldw	r2,-20(fp)
   4fd38:	10800217 	ldw	r2,8(r2)
   4fd3c:	108000cc 	andi	r2,r2,3
   4fd40:	10800060 	cmpeqi	r2,r2,1
   4fd44:	1000181e 	bne	r2,zero,4fda8 <read+0xc0>
        (fd->dev->read))
   4fd48:	e0bffb17 	ldw	r2,-20(fp)
   4fd4c:	10800017 	ldw	r2,0(r2)
   4fd50:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   4fd54:	10001426 	beq	r2,zero,4fda8 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   4fd58:	e0bffb17 	ldw	r2,-20(fp)
   4fd5c:	10800017 	ldw	r2,0(r2)
   4fd60:	10800517 	ldw	r2,20(r2)
   4fd64:	e0ffff17 	ldw	r3,-4(fp)
   4fd68:	180d883a 	mov	r6,r3
   4fd6c:	e17ffe17 	ldw	r5,-8(fp)
   4fd70:	e13ffb17 	ldw	r4,-20(fp)
   4fd74:	103ee83a 	callr	r2
   4fd78:	e0bffc15 	stw	r2,-16(fp)
   4fd7c:	e0bffc17 	ldw	r2,-16(fp)
   4fd80:	1000070e 	bge	r2,zero,4fda0 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   4fd84:	004fcac0 	call	4fcac <alt_get_errno>
   4fd88:	1007883a 	mov	r3,r2
   4fd8c:	e0bffc17 	ldw	r2,-16(fp)
   4fd90:	0085c83a 	sub	r2,zero,r2
   4fd94:	18800015 	stw	r2,0(r3)
          return -1;
   4fd98:	00bfffc4 	movi	r2,-1
   4fd9c:	00000c06 	br	4fdd0 <read+0xe8>
        }
        return rval;
   4fda0:	e0bffc17 	ldw	r2,-16(fp)
   4fda4:	00000a06 	br	4fdd0 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   4fda8:	004fcac0 	call	4fcac <alt_get_errno>
   4fdac:	1007883a 	mov	r3,r2
   4fdb0:	00800344 	movi	r2,13
   4fdb4:	18800015 	stw	r2,0(r3)
   4fdb8:	00000406 	br	4fdcc <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   4fdbc:	004fcac0 	call	4fcac <alt_get_errno>
   4fdc0:	1007883a 	mov	r3,r2
   4fdc4:	00801444 	movi	r2,81
   4fdc8:	18800015 	stw	r2,0(r3)
  }
  return -1;
   4fdcc:	00bfffc4 	movi	r2,-1
}
   4fdd0:	e037883a 	mov	sp,fp
   4fdd4:	dfc00117 	ldw	ra,4(sp)
   4fdd8:	df000017 	ldw	fp,0(sp)
   4fddc:	dec00204 	addi	sp,sp,8
   4fde0:	f800283a 	ret

0004fde4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   4fde4:	defff904 	addi	sp,sp,-28
   4fde8:	df000615 	stw	fp,24(sp)
   4fdec:	df000604 	addi	fp,sp,24
   4fdf0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   4fdf4:	0005303a 	rdctl	r2,status
   4fdf8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   4fdfc:	e0fffe17 	ldw	r3,-8(fp)
   4fe00:	00bfff84 	movi	r2,-2
   4fe04:	1884703a 	and	r2,r3,r2
   4fe08:	1001703a 	wrctl	status,r2
  
  return context;
   4fe0c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   4fe10:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   4fe14:	d0a01117 	ldw	r2,-32700(gp)
   4fe18:	10c000c4 	addi	r3,r2,3
   4fe1c:	00bfff04 	movi	r2,-4
   4fe20:	1884703a 	and	r2,r3,r2
   4fe24:	d0a01115 	stw	r2,-32700(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   4fe28:	d0e01117 	ldw	r3,-32700(gp)
   4fe2c:	e0bfff17 	ldw	r2,-4(fp)
   4fe30:	1887883a 	add	r3,r3,r2
   4fe34:	00800234 	movhi	r2,8
   4fe38:	10800004 	addi	r2,r2,0
   4fe3c:	10c0062e 	bgeu	r2,r3,4fe58 <sbrk+0x74>
   4fe40:	e0bffb17 	ldw	r2,-20(fp)
   4fe44:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   4fe48:	e0bffa17 	ldw	r2,-24(fp)
   4fe4c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   4fe50:	00bfffc4 	movi	r2,-1
   4fe54:	00000b06 	br	4fe84 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   4fe58:	d0a01117 	ldw	r2,-32700(gp)
   4fe5c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   4fe60:	d0e01117 	ldw	r3,-32700(gp)
   4fe64:	e0bfff17 	ldw	r2,-4(fp)
   4fe68:	1885883a 	add	r2,r3,r2
   4fe6c:	d0a01115 	stw	r2,-32700(gp)
   4fe70:	e0bffb17 	ldw	r2,-20(fp)
   4fe74:	e0bffc15 	stw	r2,-16(fp)
   4fe78:	e0bffc17 	ldw	r2,-16(fp)
   4fe7c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   4fe80:	e0bffd17 	ldw	r2,-12(fp)
} 
   4fe84:	e037883a 	mov	sp,fp
   4fe88:	df000017 	ldw	fp,0(sp)
   4fe8c:	dec00104 	addi	sp,sp,4
   4fe90:	f800283a 	ret

0004fe94 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   4fe94:	defffe04 	addi	sp,sp,-8
   4fe98:	dfc00115 	stw	ra,4(sp)
   4fe9c:	df000015 	stw	fp,0(sp)
   4fea0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   4fea4:	d0a00717 	ldw	r2,-32740(gp)
   4fea8:	10000326 	beq	r2,zero,4feb8 <alt_get_errno+0x24>
   4feac:	d0a00717 	ldw	r2,-32740(gp)
   4feb0:	103ee83a 	callr	r2
   4feb4:	00000106 	br	4febc <alt_get_errno+0x28>
   4feb8:	d0a6d604 	addi	r2,gp,-25768
}
   4febc:	e037883a 	mov	sp,fp
   4fec0:	dfc00117 	ldw	ra,4(sp)
   4fec4:	df000017 	ldw	fp,0(sp)
   4fec8:	dec00204 	addi	sp,sp,8
   4fecc:	f800283a 	ret

0004fed0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   4fed0:	defff904 	addi	sp,sp,-28
   4fed4:	dfc00615 	stw	ra,24(sp)
   4fed8:	df000515 	stw	fp,20(sp)
   4fedc:	df000504 	addi	fp,sp,20
   4fee0:	e13ffd15 	stw	r4,-12(fp)
   4fee4:	e17ffe15 	stw	r5,-8(fp)
   4fee8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   4feec:	e0bffd17 	ldw	r2,-12(fp)
   4fef0:	10000616 	blt	r2,zero,4ff0c <write+0x3c>
   4fef4:	e0bffd17 	ldw	r2,-12(fp)
   4fef8:	10c00324 	muli	r3,r2,12
   4fefc:	00800174 	movhi	r2,5
   4ff00:	10859504 	addi	r2,r2,5716
   4ff04:	1885883a 	add	r2,r3,r2
   4ff08:	00000106 	br	4ff10 <write+0x40>
   4ff0c:	0005883a 	mov	r2,zero
   4ff10:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   4ff14:	e0bffb17 	ldw	r2,-20(fp)
   4ff18:	10002126 	beq	r2,zero,4ffa0 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   4ff1c:	e0bffb17 	ldw	r2,-20(fp)
   4ff20:	10800217 	ldw	r2,8(r2)
   4ff24:	108000cc 	andi	r2,r2,3
   4ff28:	10001826 	beq	r2,zero,4ff8c <write+0xbc>
   4ff2c:	e0bffb17 	ldw	r2,-20(fp)
   4ff30:	10800017 	ldw	r2,0(r2)
   4ff34:	10800617 	ldw	r2,24(r2)
   4ff38:	10001426 	beq	r2,zero,4ff8c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   4ff3c:	e0bffb17 	ldw	r2,-20(fp)
   4ff40:	10800017 	ldw	r2,0(r2)
   4ff44:	10800617 	ldw	r2,24(r2)
   4ff48:	e0ffff17 	ldw	r3,-4(fp)
   4ff4c:	180d883a 	mov	r6,r3
   4ff50:	e17ffe17 	ldw	r5,-8(fp)
   4ff54:	e13ffb17 	ldw	r4,-20(fp)
   4ff58:	103ee83a 	callr	r2
   4ff5c:	e0bffc15 	stw	r2,-16(fp)
   4ff60:	e0bffc17 	ldw	r2,-16(fp)
   4ff64:	1000070e 	bge	r2,zero,4ff84 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   4ff68:	004fe940 	call	4fe94 <alt_get_errno>
   4ff6c:	1007883a 	mov	r3,r2
   4ff70:	e0bffc17 	ldw	r2,-16(fp)
   4ff74:	0085c83a 	sub	r2,zero,r2
   4ff78:	18800015 	stw	r2,0(r3)
        return -1;
   4ff7c:	00bfffc4 	movi	r2,-1
   4ff80:	00000c06 	br	4ffb4 <write+0xe4>
      }
      return rval;
   4ff84:	e0bffc17 	ldw	r2,-16(fp)
   4ff88:	00000a06 	br	4ffb4 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   4ff8c:	004fe940 	call	4fe94 <alt_get_errno>
   4ff90:	1007883a 	mov	r3,r2
   4ff94:	00800344 	movi	r2,13
   4ff98:	18800015 	stw	r2,0(r3)
   4ff9c:	00000406 	br	4ffb0 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   4ffa0:	004fe940 	call	4fe94 <alt_get_errno>
   4ffa4:	1007883a 	mov	r3,r2
   4ffa8:	00801444 	movi	r2,81
   4ffac:	18800015 	stw	r2,0(r3)
  }
  return -1;
   4ffb0:	00bfffc4 	movi	r2,-1
}
   4ffb4:	e037883a 	mov	sp,fp
   4ffb8:	dfc00117 	ldw	ra,4(sp)
   4ffbc:	df000017 	ldw	fp,0(sp)
   4ffc0:	dec00204 	addi	sp,sp,8
   4ffc4:	f800283a 	ret

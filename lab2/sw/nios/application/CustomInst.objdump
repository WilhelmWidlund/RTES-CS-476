
CustomInst.elf:     file format elf32-littlenios2
CustomInst.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000244

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00010518 memsz 0x00010518 flags r-x
    LOAD off    0x00011538 vaddr 0x00010538 paddr 0x0001202c align 2**12
         filesz 0x00001af4 memsz 0x00001af4 flags rw-
    LOAD off    0x00013b20 vaddr 0x00013b20 paddr 0x00013b20 align 2**12
         filesz 0x00000000 memsz 0x000020a0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000fd3c  00000244  00000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000005b8  0000ff80  0000ff80  00010f80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001af4  00010538  0001202c  00011538  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000020a0  00013b20  00013b20  00013b20  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00015bc0  00015bc0  0001302c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0001302c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000f38  00000000  00000000  00013050  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000240ae  00000000  00000000  00013f88  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000935e  00000000  00000000  00038036  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000b874  00000000  00000000  00041394  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002308  00000000  00000000  0004cc08  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003990  00000000  00000000  0004ef10  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000179b5  00000000  00000000  000528a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  0006a258  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000018d8  00000000  00000000  0006a288  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006ee6a  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0006ee6d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0006ee79  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006ee7a  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0006ee7b  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0006ee86  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0006ee91  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000a  00000000  00000000  0006ee9c  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000017  00000000  00000000  0006eea6  2**0
                  CONTENTS, READONLY
 26 .jdi          0000595c  00000000  00000000  0006eebd  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0003a867  00000000  00000000  00074819  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000244 l    d  .text	00000000 .text
0000ff80 l    d  .rodata	00000000 .rodata
00010538 l    d  .rwdata	00000000 .rwdata
00013b20 l    d  .bss	00000000 .bss
00015bc0 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/RTES/lab2/sw/nios/CustomInst_bsp//obj/HAL/src/crt0.o
0000028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_load.c
0000087c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000c4c l     F .text	00000034 alt_dev_reg
00010538 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00000f34 l     F .text	0000020c altera_avalon_jtag_uart_irq
00001140 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_performance_counter.c
00000000 l    df *ABS*	00000000 perf_print_formatted_report.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00001cb4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
00001dc0 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00001dec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00002260 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
000023a0 l     F .text	0000003c alt_get_errno
000023dc l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
00011740 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000102b6 l     O .rodata	00000010 zeroes.4404
00005218 l     F .text	000000bc __sbprintf
000102c6 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 dtoa.c
00005818 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00007348 l     F .text	00000008 __fp_unlock
0000735c l     F .text	0000019c __sinit.part.1
000074f8 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 locale.c
00011b84 l     O .rwdata	00000020 lc_ctype_charset
00011b64 l     O .rwdata	00000020 lc_message_charset
00011ba4 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
000102f4 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
00009c30 l     F .text	000000fc __sprint_r.part.0
00010428 l     O .rodata	00000010 blanks.4348
00010418 l     O .rodata	00000010 zeroes.4349
0000b1bc l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000f940 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0000fa2c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
0000fb0c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0000fc64 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sbrk.c
00012028 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000fe4c l     F .text	0000003c alt_get_errno
00013b38 g     O .bss	00000004 alt_instruction_exception_handler
000097d8 g     F .text	00000074 _mprec_log10
000098c4 g     F .text	0000008c __any_on
0000bc14 g     F .text	00000054 _isatty_r
00010300 g     O .rodata	00000028 __mprec_tinytens
00000968 g     F .text	0000007c alt_main
00015ac0 g     O .bss	00000100 alt_irq
0000bc68 g     F .text	00000060 _lseek_r
0001202c g       *ABS*	00000000 __flash_rwdata_start
0000e438 g     F .text	00000088 .hidden __eqdf2
00015bc0 g       *ABS*	00000000 __alt_heap_start
00002dc8 g     F .text	0000003c printf
0000c3e8 g     F .text	0000009c _wcrtomb_r
00009af0 g     F .text	0000005c __sseek
00007698 g     F .text	00000010 __sinit
00013b80 g     O .bss	00000fa0 out_1000
000018e4 g     F .text	00000024 alt_get_cpu_freq
000052d4 g     F .text	00000140 __swbuf_r
00007ca4 g     F .text	0000007c _setlocale_r
00007500 g     F .text	00000068 __sfmoreglue
0000fc40 g     F .text	00000024 __malloc_unlock
00000398 g     F .text	000000ac software_1000
0000bcc8 g     F .text	0000015c memmove
00001908 g     F .text	00000280 perf_print_formatted_report
00007680 g     F .text	00000018 _cleanup
00008954 g     F .text	000000a8 _Balloc
0000e4c0 g     F .text	000000dc .hidden __gtdf2
000027fc g     F .text	00000024 altera_nios2_gen2_irq_init
00000000 g     F .entry	0000001c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
0000b6fc g     F .text	0000005c _fstat_r
00013b3c g     O .bss	00000004 errno
00009a6c g     F .text	00000008 __seofread
00013b24 g     O .bss	00000004 alt_argv
00019fe4 g       *ABS*	00000000 _gp
000115c0 g     O .rwdata	00000180 alt_fd_list
00002820 g     F .text	00000090 alt_find_dev
00002c50 g     F .text	00000148 memcpy
00007350 g     F .text	0000000c _cleanup_r
0000f724 g     F .text	000000dc .hidden __floatsidf
00002324 g     F .text	0000007c alt_io_redirect
0000e59c g     F .text	000000f4 .hidden __ltdf2
0000ff80 g       *ABS*	00000000 __DTOR_END__
00000598 g     F .text	000000b4 test_method_once
00002aec g     F .text	0000009c alt_exception_cause_generated_bad_addr
00009950 g     F .text	00000074 __fpclassifyd
00009734 g     F .text	000000a4 __ratio
0000b1a0 g     F .text	0000001c __vfiprintf_internal
00001338 g     F .text	0000021c altera_avalon_jtag_uart_read
00002d98 g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0000d1e8 g     F .text	00000064 .hidden __udivsi3
0000fa68 g     F .text	000000a4 isatty
00010350 g     O .rodata	000000c8 __mprec_tens
00007d20 g     F .text	0000000c __locale_charset
00002a5c g     F .text	00000090 alt_icache_flush
00013b54 g     O .bss	00000004 __malloc_top_pad
00001880 g     F .text	00000040 perf_get_num_starts
00012018 g     O .rwdata	00000004 __mb_cur_max
00007d50 g     F .text	0000000c _localeconv_r
0000b758 g     F .text	000004bc __sfvwrite_r
00008d60 g     F .text	0000003c __i2b
000099c4 g     F .text	00000054 _sbrk_r
0000be24 g     F .text	00000060 _read_r
00011ffc g     O .rwdata	00000004 alt_max_fd
00000444 g     F .text	000000a0 custom_1000
0000b3f0 g     F .text	000000f0 _fclose_r
00007318 g     F .text	00000030 fflush
00013b50 g     O .bss	00000004 __malloc_max_sbrked_mem
0000d2a4 g     F .text	000008ac .hidden __adddf3
000094dc g     F .text	0000010c __b2d
0000cbb8 g     F .text	00000538 .hidden __umoddi3
0000fb48 g     F .text	000000d4 lseek
00012010 g     O .rwdata	00000004 _global_impure_ptr
0000be84 g     F .text	00000564 _realloc_r
00015bc0 g       *ABS*	00000000 __bss_end
00002170 g     F .text	000000f0 alt_iic_isr_register
000026f4 g     F .text	00000108 alt_tick
0000c640 g     F .text	00000578 .hidden __udivdi3
0000b658 g     F .text	00000024 _fputwc_r
00010328 g     O .rodata	00000028 __mprec_bigtens
00008b44 g     F .text	00000104 __s2b
0000f800 g     F .text	000000a8 .hidden __floatunsidf
0000921c g     F .text	00000060 __mcmp
000076b8 g     F .text	00000018 __fp_lock_all
00002124 g     F .text	0000004c alt_ic_irq_enabled
00002658 g     F .text	0000009c alt_alarm_stop
00013b2c g     O .bss	00000004 alt_irq_active
000000fc g     F .exceptions	000000d4 alt_irq_handler
00011598 g     O .rwdata	00000028 alt_dev_null
00000834 g     F .text	00000048 alt_dcache_flush_all
00008c48 g     F .text	00000068 __hi0bits
0000f6a4 g     F .text	00000080 .hidden __fixdfsi
0001202c g       *ABS*	00000000 __ram_rwdata_end
00011ff4 g     O .rwdata	00000008 alt_dev_list
0000fe88 g     F .text	000000f8 write
00002e04 g     F .text	000000a0 _putc_r
00010538 g       *ABS*	00000000 __ram_rodata_end
0000f97c g     F .text	000000b0 fstat
0000e59c g     F .text	000000f4 .hidden __ledf2
00008f94 g     F .text	00000140 __pow5mult
00009d44 g     F .text	0000145c ___vfiprintf_internal_r
00013b48 g     O .bss	00000004 __nlocale_changed
0000d24c g     F .text	00000058 .hidden __umodsi3
00015bc0 g       *ABS*	00000000 end
00000e74 g     F .text	000000c0 altera_avalon_jtag_uart_init
000001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0000ff80 g       *ABS*	00000000 __CTOR_LIST__
00040000 g       *ABS*	00000000 __alt_stack_pointer
0000f8a8 g     F .text	00000064 .hidden __clzsi2
00001554 g     F .text	00000224 altera_avalon_jtag_uart_write
000076a8 g     F .text	00000004 __sfp_lock_acquire
00008748 g     F .text	000000e4 memchr
00003004 g     F .text	000021f8 ___vfprintf_internal_r
0000780c g     F .text	00000310 _free_r
000009e4 g     F .text	0000022c alt_printf
00007d2c g     F .text	00000010 __locale_mb_cur_max
00005698 g     F .text	00000180 __call_exitprocs
00011fe4 g     O .rwdata	00000004 test
00013b44 g     O .bss	00000004 __mlocale_changed
0001201c g     O .rwdata	00000004 __malloc_sbrk_base
00000244 g     F .text	0000004c _start
00013b30 g     O .bss	00000004 _alt_tick_rate
0000c5d0 g     F .text	00000070 .hidden __floatundidf
000090d4 g     F .text	00000148 __lshift
00013b34 g     O .bss	00000004 _alt_nticks
0000fca0 g     F .text	000000fc read
00000cb8 g     F .text	00000058 alt_sys_init
00005580 g     F .text	00000118 __register_exitproc
00008d9c g     F .text	000001f8 __multiply
000011e0 g     F .text	00000068 altera_avalon_jtag_uart_close
00010538 g       *ABS*	00000000 __ram_rwdata_start
0000ff80 g       *ABS*	00000000 __ram_rodata_start
00013b58 g     O .bss	00000028 __malloc_current_mallinfo
000095e8 g     F .text	0000014c __d2b
00000d10 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000029b8 g     F .text	000000a4 alt_get_fd
0000b2d8 g     F .text	00000054 _close_r
00001778 g     F .text	000000bc perf_get_section_time
00002bd4 g     F .text	0000007c memcmp
00000dd0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00015bc0 g       *ABS*	00000000 __alt_stack_base
00000e20 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0000542c g     F .text	00000154 __swsetup_r
0000db50 g     F .text	000008e8 .hidden __divdf3
00007568 g     F .text	00000118 __sfp
0000984c g     F .text	00000078 __copybits
00001834 g     F .text	0000004c perf_get_total_time
00011bdc g     O .rwdata	00000408 __malloc_av_
000076b4 g     F .text	00000004 __sinit_lock_release
0000e690 g     F .text	00000718 .hidden __muldf3
00009a18 g     F .text	00000054 __sread
000028b0 g     F .text	00000108 alt_find_file
00001e28 g     F .text	000000a4 alt_dev_llist_insert
0000fc1c g     F .text	00000024 __malloc_lock
0000fd9c g     F .text	000000b0 sbrk
000072bc g     F .text	0000005c _fflush_r
0000b32c g     F .text	000000c4 _calloc_r
00013b20 g       *ABS*	00000000 __bss_start
0000882c g     F .text	00000128 memset
00000758 g     F .text	000000dc main
00013b28 g     O .bss	00000004 alt_envp
00013b4c g     O .bss	00000004 __malloc_max_total_mem
00000d70 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00005414 g     F .text	00000018 __swbuf
00009b4c g     F .text	00000008 __sclose
00040000 g       *ABS*	00000000 __alt_heap_limit
0000b4e0 g     F .text	00000014 fclose
00005a18 g     F .text	00001688 _dtoa_r
00007f3c g     F .text	0000080c _malloc_r
0000c544 g     F .text	00000030 __ascii_wctomb
00012000 g     O .rwdata	00000004 alt_errno
00007b1c g     F .text	000000c4 _fwalk
00002ea4 g     F .text	000000c8 putc
0000d0f0 g     F .text	00000084 .hidden __divsi3
000076e8 g     F .text	00000124 _malloc_trim_r
00000290 g     F .text	0000006c init_tables
0000ff80 g       *ABS*	00000000 __CTOR_END__
0000064c g     F .text	0000010c test_implementations
00009b54 g     F .text	000000dc strcmp
0000ff80 g       *ABS*	00000000 __flash_rodata_start
0000ff80 g       *ABS*	00000000 __DTOR_LIST__
0000e438 g     F .text	00000088 .hidden __nedf2
000002fc g     F .text	0000009c software_custom_inst
00000c80 g     F .text	00000038 alt_irq_init
000025f4 g     F .text	00000064 alt_release_fd
00010438 g     O .rodata	00000100 .hidden __clz_tab
00013b40 g     O .bss	00000004 _PathLocale
00002b88 g     F .text	00000014 atexit
0000b278 g     F .text	00000060 _write_r
00007d5c g     F .text	00000018 setlocale
00012014 g     O .rwdata	00000004 _impure_ptr
00013b20 g     O .bss	00000004 alt_argc
000070a0 g     F .text	0000021c __sflush_r
00001f2c g     F .text	00000060 _do_dtors
00007d48 g     F .text	00000008 __locale_cjk_lang
00000020 g       .exceptions	00000000 alt_irq_entry
00009478 g     F .text	00000064 __ulp
000076d0 g     F .text	00000018 __fp_unlock_all
00011fec g     O .rwdata	00000008 alt_fs_list
00000020 g       *ABS*	00000000 __ram_exceptions_start
00007d74 g     F .text	0000000c localeconv
000004e4 g     F .text	000000b4 use_accelerator
00001fc0 g     F .text	00000050 alt_ic_isr_register
0001202c g       *ABS*	00000000 _edata
00015bc0 g       *ABS*	00000000 _end
0000b4f4 g     F .text	00000164 __fputwc
00000244 g       *ABS*	00000000 __ram_exceptions_end
00001248 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
00002098 g     F .text	0000008c alt_ic_irq_disable
00009a74 g     F .text	0000007c __swrite
00012020 g     O .rwdata	00000004 __malloc_trim_threshold
000018c0 g     F .text	00000024 alt_get_performance_counter_base
00007d3c g     F .text	0000000c __locale_msgcharset
00002b9c g     F .text	00000038 exit
00007be0 g     F .text	000000c4 _fwalk_reent
0000927c g     F .text	000001fc __mdiff
0000d174 g     F .text	00000074 .hidden __modsi3
00040000 g       *ABS*	00000000 __alt_data_end
00000020 g     F .exceptions	00000000 alt_exception
000076ac g     F .text	00000004 __sfp_lock_release
0000f90c g     F .text	00000034 _exit
00001b88 g     F .text	0000012c alt_alarm_start
00007d80 g     F .text	000001bc __smakebuf_r
00002f6c g     F .text	00000098 strlen
000024a0 g     F .text	00000154 open
0000e4c0 g     F .text	000000dc .hidden __gedf2
00000c10 g     F .text	0000003c alt_putchar
00012024 g     O .rwdata	00000004 __wctomb
00009d2c g     F .text	00000018 __sprint_r
00001f8c g     F .text	00000034 alt_icache_flush_all
00012004 g     O .rwdata	00000004 alt_priority_mask
00002010 g     F .text	00000088 alt_ic_irq_enable
000051fc g     F .text	0000001c __vfprintf_internal
0000c574 g     F .text	0000005c _wctomb_r
0000eda8 g     F .text	000008fc .hidden __subdf3
00008cb0 g     F .text	000000b0 __lo0bits
00012008 g     O .rwdata	00000008 alt_alarm_list
00001ecc g     F .text	00000060 _do_ctors
00014b20 g     O .bss	00000fa0 in_1000
0000c484 g     F .text	000000c0 wcrtomb
00001cf0 g     F .text	000000d0 close
000008e4 g     F .text	00000084 alt_load
00011fe8 g     O .rwdata	00000004 truth
0000b67c g     F .text	00000080 fputwc
000076b0 g     F .text	00000004 __sinit_lock_acquire
00008a24 g     F .text	00000120 __multadd
000089fc g     F .text	00000028 _Bfree



Disassembly of section .entry:

00000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   0:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   4:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   8:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   c:	00bffd16 	blt	zero,r2,4 <__alt_data_end+0xfffc0004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
  10:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
  14:	08409114 	ori	at,at,580
    jmp r1
  18:	0800683a 	jmp	at
  1c:	00000000 	call	0 <__reset>

Disassembly of section .exceptions:

00000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  20:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  24:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  28:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  2c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  30:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  34:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  38:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  3c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  40:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  44:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  48:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  4c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  50:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  54:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  58:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  5c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  60:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  64:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  68:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  6c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  70:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  74:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  78:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  7c:	10000326 	beq	r2,zero,8c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  80:	20000226 	beq	r4,zero,8c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  84:	00000fc0 	call	fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  88:	00000706 	br	a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  8c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  90:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  94:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  98:	00001d00 	call	1d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  9c:	1000021e 	bne	r2,zero,a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  f8:	ef80083a 	eret

000000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  fc:	defff904 	addi	sp,sp,-28
 100:	dfc00615 	stw	ra,24(sp)
 104:	df000515 	stw	fp,20(sp)
 108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 10c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 110:	0005313a 	rdctl	r2,ipending
 114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 11c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 124:	00800044 	movi	r2,1
 128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 12c:	e0fffb17 	ldw	r3,-20(fp)
 130:	e0bffc17 	ldw	r2,-16(fp)
 134:	1884703a 	and	r2,r3,r2
 138:	10001426 	beq	r2,zero,18c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 13c:	00800074 	movhi	r2,1
 140:	1096b004 	addi	r2,r2,23232
 144:	e0fffd17 	ldw	r3,-12(fp)
 148:	180690fa 	slli	r3,r3,3
 14c:	10c5883a 	add	r2,r2,r3
 150:	10c00017 	ldw	r3,0(r2)
 154:	00800074 	movhi	r2,1
 158:	1096b004 	addi	r2,r2,23232
 15c:	e13ffd17 	ldw	r4,-12(fp)
 160:	200890fa 	slli	r4,r4,3
 164:	1105883a 	add	r2,r2,r4
 168:	10800104 	addi	r2,r2,4
 16c:	10800017 	ldw	r2,0(r2)
 170:	1009883a 	mov	r4,r2
 174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 17c:	0005313a 	rdctl	r2,ipending
 180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 184:	e0bfff17 	ldw	r2,-4(fp)
 188:	00000706 	br	1a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 18c:	e0bffc17 	ldw	r2,-16(fp)
 190:	1085883a 	add	r2,r2,r2
 194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 198:	e0bffd17 	ldw	r2,-12(fp)
 19c:	10800044 	addi	r2,r2,1
 1a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 1a4:	003fe106 	br	12c <__alt_data_end+0xfffc012c>

    active = alt_irq_pending ();
 1a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 1ac:	e0bffb17 	ldw	r2,-20(fp)
 1b0:	103fdb1e 	bne	r2,zero,120 <__alt_data_end+0xfffc0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 1b4:	0001883a 	nop
}
 1b8:	0001883a 	nop
 1bc:	e037883a 	mov	sp,fp
 1c0:	dfc00117 	ldw	ra,4(sp)
 1c4:	df000017 	ldw	fp,0(sp)
 1c8:	dec00204 	addi	sp,sp,8
 1cc:	f800283a 	ret

000001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 1d0:	defffb04 	addi	sp,sp,-20
 1d4:	dfc00415 	stw	ra,16(sp)
 1d8:	df000315 	stw	fp,12(sp)
 1dc:	df000304 	addi	fp,sp,12
 1e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 1e4:	000531fa 	rdctl	r2,exception
 1e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 1ec:	e0bffd17 	ldw	r2,-12(fp)
 1f0:	10801f0c 	andi	r2,r2,124
 1f4:	1004d0ba 	srli	r2,r2,2
 1f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 1fc:	0005333a 	rdctl	r2,badaddr
 200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 204:	d0a6d517 	ldw	r2,-25772(gp)
 208:	10000726 	beq	r2,zero,228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 20c:	d0a6d517 	ldw	r2,-25772(gp)
 210:	e0fffd17 	ldw	r3,-12(fp)
 214:	e1bffe17 	ldw	r6,-8(fp)
 218:	e17fff17 	ldw	r5,-4(fp)
 21c:	1809883a 	mov	r4,r3
 220:	103ee83a 	callr	r2
 224:	00000206 	br	230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 22c:	0005883a 	mov	r2,zero
}
 230:	e037883a 	mov	sp,fp
 234:	dfc00117 	ldw	ra,4(sp)
 238:	df000017 	ldw	fp,0(sp)
 23c:	dec00204 	addi	sp,sp,8
 240:	f800283a 	ret

Disassembly of section .text:

00000244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
     244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
     248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     24c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
     250:	00bffd16 	blt	zero,r2,248 <__alt_data_end+0xfffc0248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     254:	06c00134 	movhi	sp,4
    ori sp, sp, %lo(__alt_stack_pointer)
     258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     25c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     260:	d6a7f914 	ori	gp,gp,40932
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     264:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     268:	108ec814 	ori	r2,r2,15136

    movhi r3, %hi(__bss_end)
     26c:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     270:	18d6f014 	ori	r3,r3,23488

    beq r2, r3, 1f
     274:	10c00326 	beq	r2,r3,284 <_start+0x40>

0:
    stw zero, (r2)
     278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     27c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     280:	10fffd36 	bltu	r2,r3,278 <__alt_data_end+0xfffc0278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     284:	00008e40 	call	8e4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     288:	00009680 	call	968 <alt_main>

0000028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     28c:	003fff06 	br	28c <__alt_data_end+0xfffc028c>

00000290 <init_tables>:
#define ACC_InputStartAddr	0
#define	ACC_OutputStartAddr	4
#define ACC_Num				8

void init_tables()
{
     290:	defffd04 	addi	sp,sp,-12
     294:	dfc00215 	stw	ra,8(sp)
     298:	df000115 	stw	fp,4(sp)
     29c:	df000104 	addi	fp,sp,4
	int i;
	for(i=0; i<1000; i++)
     2a0:	e03fff15 	stw	zero,-4(fp)
     2a4:	00000b06 	br	2d4 <init_tables+0x44>
	{
		in_1000[i] = test;
     2a8:	d1200017 	ldw	r4,-32768(gp)
     2ac:	00800074 	movhi	r2,1
     2b0:	1092c804 	addi	r2,r2,19232
     2b4:	e0ffff17 	ldw	r3,-4(fp)
     2b8:	18c7883a 	add	r3,r3,r3
     2bc:	18c7883a 	add	r3,r3,r3
     2c0:	10c5883a 	add	r2,r2,r3
     2c4:	11000015 	stw	r4,0(r2)
#define ACC_Num				8

void init_tables()
{
	int i;
	for(i=0; i<1000; i++)
     2c8:	e0bfff17 	ldw	r2,-4(fp)
     2cc:	10800044 	addi	r2,r2,1
     2d0:	e0bfff15 	stw	r2,-4(fp)
     2d4:	e0bfff17 	ldw	r2,-4(fp)
     2d8:	1080fa10 	cmplti	r2,r2,1000
     2dc:	103ff21e 	bne	r2,zero,2a8 <__alt_data_end+0xfffc02a8>
	{
		in_1000[i] = test;
	}
	alt_dcache_flush_all();
     2e0:	00008340 	call	834 <alt_dcache_flush_all>
}
     2e4:	0001883a 	nop
     2e8:	e037883a 	mov	sp,fp
     2ec:	dfc00117 	ldw	ra,4(sp)
     2f0:	df000017 	ldw	fp,0(sp)
     2f4:	dec00204 	addi	sp,sp,8
     2f8:	f800283a 	ret

000002fc <software_custom_inst>:

uint32_t software_custom_inst(uint32_t input)
{
     2fc:	defffb04 	addi	sp,sp,-20
     300:	df000415 	stw	fp,16(sp)
     304:	df000404 	addi	fp,sp,16
     308:	e13fff15 	stw	r4,-4(fp)
	uint32_t output;
	output = (input<<24) & 0xff000000;
     30c:	e0bfff17 	ldw	r2,-4(fp)
     310:	1004963a 	slli	r2,r2,24
     314:	e0bffc15 	stw	r2,-16(fp)
	output = output + ((input & 0xff000000)>>24);
     318:	e0bfff17 	ldw	r2,-4(fp)
     31c:	1004d63a 	srli	r2,r2,24
     320:	e0fffc17 	ldw	r3,-16(fp)
     324:	1885883a 	add	r2,r3,r2
     328:	e0bffc15 	stw	r2,-16(fp)
	uint32_t sought_bit;
	int i;
	for(i=8; i<24; i++)
     32c:	00800204 	movi	r2,8
     330:	e0bffd15 	stw	r2,-12(fp)
     334:	00001006 	br	378 <software_custom_inst+0x7c>
	{
		sought_bit = (input<<i)&0x80000000;
     338:	e0ffff17 	ldw	r3,-4(fp)
     33c:	e0bffd17 	ldw	r2,-12(fp)
     340:	1884983a 	sll	r2,r3,r2
     344:	10a0002c 	andhi	r2,r2,32768
     348:	e0bffe15 	stw	r2,-8(fp)
		output = output + (sought_bit>>(31 - i));
     34c:	00c007c4 	movi	r3,31
     350:	e0bffd17 	ldw	r2,-12(fp)
     354:	1885c83a 	sub	r2,r3,r2
     358:	e0fffe17 	ldw	r3,-8(fp)
     35c:	1884d83a 	srl	r2,r3,r2
     360:	e0fffc17 	ldw	r3,-16(fp)
     364:	1885883a 	add	r2,r3,r2
     368:	e0bffc15 	stw	r2,-16(fp)
	uint32_t output;
	output = (input<<24) & 0xff000000;
	output = output + ((input & 0xff000000)>>24);
	uint32_t sought_bit;
	int i;
	for(i=8; i<24; i++)
     36c:	e0bffd17 	ldw	r2,-12(fp)
     370:	10800044 	addi	r2,r2,1
     374:	e0bffd15 	stw	r2,-12(fp)
     378:	e0bffd17 	ldw	r2,-12(fp)
     37c:	10800610 	cmplti	r2,r2,24
     380:	103fed1e 	bne	r2,zero,338 <__alt_data_end+0xfffc0338>
	{
		sought_bit = (input<<i)&0x80000000;
		output = output + (sought_bit>>(31 - i));
	}
	return output;
     384:	e0bffc17 	ldw	r2,-16(fp)
}
     388:	e037883a 	mov	sp,fp
     38c:	df000017 	ldw	fp,0(sp)
     390:	dec00104 	addi	sp,sp,4
     394:	f800283a 	ret

00000398 <software_1000>:

void software_1000()
{
     398:	defffd04 	addi	sp,sp,-12
     39c:	dfc00215 	stw	ra,8(sp)
     3a0:	df000115 	stw	fp,4(sp)
     3a4:	df000104 	addi	fp,sp,4
	// Start performance counter
	PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);
     3a8:	0007883a 	mov	r3,zero
     3ac:	00800134 	movhi	r2,4
     3b0:	10840504 	addi	r2,r2,4116
     3b4:	10c00035 	stwio	r3,0(r2)

	int i;
	for(i=0; i<1000; i++)
     3b8:	e03fff15 	stw	zero,-4(fp)
     3bc:	00001406 	br	410 <software_1000+0x78>
	{
		out_1000[i] = software_custom_inst(in_1000[i]);
     3c0:	00800074 	movhi	r2,1
     3c4:	1092c804 	addi	r2,r2,19232
     3c8:	e0ffff17 	ldw	r3,-4(fp)
     3cc:	18c7883a 	add	r3,r3,r3
     3d0:	18c7883a 	add	r3,r3,r3
     3d4:	10c5883a 	add	r2,r2,r3
     3d8:	10800017 	ldw	r2,0(r2)
     3dc:	1009883a 	mov	r4,r2
     3e0:	00002fc0 	call	2fc <software_custom_inst>
     3e4:	1009883a 	mov	r4,r2
     3e8:	00800074 	movhi	r2,1
     3ec:	108ee004 	addi	r2,r2,15232
     3f0:	e0ffff17 	ldw	r3,-4(fp)
     3f4:	18c7883a 	add	r3,r3,r3
     3f8:	18c7883a 	add	r3,r3,r3
     3fc:	10c5883a 	add	r2,r2,r3
     400:	11000015 	stw	r4,0(r2)
{
	// Start performance counter
	PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 1);

	int i;
	for(i=0; i<1000; i++)
     404:	e0bfff17 	ldw	r2,-4(fp)
     408:	10800044 	addi	r2,r2,1
     40c:	e0bfff15 	stw	r2,-4(fp)
     410:	e0bfff17 	ldw	r2,-4(fp)
     414:	1080fa10 	cmplti	r2,r2,1000
     418:	103fe91e 	bne	r2,zero,3c0 <__alt_data_end+0xfffc03c0>
	{
		out_1000[i] = software_custom_inst(in_1000[i]);
	}

	// Stop performance counter
	PERF_END(PERFORMANCE_COUNTER_0_BASE, 1);
     41c:	0007883a 	mov	r3,zero
     420:	00800134 	movhi	r2,4
     424:	10840404 	addi	r2,r2,4112
     428:	10c00035 	stwio	r3,0(r2)
}
     42c:	0001883a 	nop
     430:	e037883a 	mov	sp,fp
     434:	dfc00117 	ldw	ra,4(sp)
     438:	df000017 	ldw	fp,0(sp)
     43c:	dec00204 	addi	sp,sp,8
     440:	f800283a 	ret

00000444 <custom_1000>:

void custom_1000()
{
     444:	defffe04 	addi	sp,sp,-8
     448:	df000115 	stw	fp,4(sp)
     44c:	df000104 	addi	fp,sp,4
	// Start performance counter
	PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 2);
     450:	0007883a 	mov	r3,zero
     454:	00800134 	movhi	r2,4
     458:	10840904 	addi	r2,r2,4132
     45c:	10c00035 	stwio	r3,0(r2)

	int i;
	for(i=0; i<1000; i++)
     460:	e03fff15 	stw	zero,-4(fp)
     464:	00001306 	br	4b4 <custom_1000+0x70>
	{
		out_1000[i] = ALT_CI_CUSTOM_INSTRUCTION_0(in_1000[i]);
     468:	00800074 	movhi	r2,1
     46c:	1092c804 	addi	r2,r2,19232
     470:	e0ffff17 	ldw	r3,-4(fp)
     474:	18c7883a 	add	r3,r3,r3
     478:	18c7883a 	add	r3,r3,r3
     47c:	10c5883a 	add	r2,r2,r3
     480:	10800017 	ldw	r2,0(r2)
     484:	1005c032 	custom	0,r2,r2,zero
     488:	1009883a 	mov	r4,r2
     48c:	00800074 	movhi	r2,1
     490:	108ee004 	addi	r2,r2,15232
     494:	e0ffff17 	ldw	r3,-4(fp)
     498:	18c7883a 	add	r3,r3,r3
     49c:	18c7883a 	add	r3,r3,r3
     4a0:	10c5883a 	add	r2,r2,r3
     4a4:	11000015 	stw	r4,0(r2)
{
	// Start performance counter
	PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 2);

	int i;
	for(i=0; i<1000; i++)
     4a8:	e0bfff17 	ldw	r2,-4(fp)
     4ac:	10800044 	addi	r2,r2,1
     4b0:	e0bfff15 	stw	r2,-4(fp)
     4b4:	e0bfff17 	ldw	r2,-4(fp)
     4b8:	1080fa10 	cmplti	r2,r2,1000
     4bc:	103fea1e 	bne	r2,zero,468 <__alt_data_end+0xfffc0468>
	{
		out_1000[i] = ALT_CI_CUSTOM_INSTRUCTION_0(in_1000[i]);
	}

	// Stop performance counter
	PERF_END(PERFORMANCE_COUNTER_0_BASE, 2);
     4c0:	0007883a 	mov	r3,zero
     4c4:	00800134 	movhi	r2,4
     4c8:	10840804 	addi	r2,r2,4128
     4cc:	10c00035 	stwio	r3,0(r2)
}
     4d0:	0001883a 	nop
     4d4:	e037883a 	mov	sp,fp
     4d8:	df000017 	ldw	fp,0(sp)
     4dc:	dec00104 	addi	sp,sp,4
     4e0:	f800283a 	ret

000004e4 <use_accelerator>:

void use_accelerator(uint32_t in_addr, uint32_t out_addr, uint32_t length)
{
     4e4:	defffb04 	addi	sp,sp,-20
     4e8:	df000415 	stw	fp,16(sp)
     4ec:	df000404 	addi	fp,sp,16
     4f0:	e13ffd15 	stw	r4,-12(fp)
     4f4:	e17ffe15 	stw	r5,-8(fp)
     4f8:	e1bfff15 	stw	r6,-4(fp)
	// Check if the device is already working
	uint32_t status = IORD_32DIRECT(ACCELERATOR_0_BASE, 0x0);
     4fc:	00800134 	movhi	r2,4
     500:	10842004 	addi	r2,r2,4224
     504:	10800037 	ldwio	r2,0(r2)
     508:	e0bffc15 	stw	r2,-16(fp)
	if(status == ACC_BUSY)
     50c:	e0bffc17 	ldw	r2,-16(fp)
     510:	10800098 	cmpnei	r2,r2,2
     514:	10001b26 	beq	r2,zero,584 <use_accelerator+0xa0>
	{
		return;
	}

	// Start performance counter
	PERF_BEGIN(PERFORMANCE_COUNTER_0_BASE, 3);
     518:	0007883a 	mov	r3,zero
     51c:	00800134 	movhi	r2,4
     520:	10840d04 	addi	r2,r2,4148
     524:	10c00035 	stwio	r3,0(r2)

	// Write the three arguments
	IOWR_32DIRECT(ACCELERATOR_0_BASE, ACC_InputStartAddr, in_addr);
     528:	e0fffd17 	ldw	r3,-12(fp)
     52c:	00800134 	movhi	r2,4
     530:	10842004 	addi	r2,r2,4224
     534:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(ACCELERATOR_0_BASE, ACC_OutputStartAddr, out_addr);
     538:	e0fffe17 	ldw	r3,-8(fp)
     53c:	00800134 	movhi	r2,4
     540:	10842104 	addi	r2,r2,4228
     544:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(ACCELERATOR_0_BASE, ACC_Num, length);
     548:	e0ffff17 	ldw	r3,-4(fp)
     54c:	00800134 	movhi	r2,4
     550:	10842204 	addi	r2,r2,4232
     554:	10c00035 	stwio	r3,0(r2)

	// Wait for it to be done
	while(IORD_32DIRECT(ACCELERATOR_0_BASE, 0x0) != ACC_DONE);
     558:	0001883a 	nop
     55c:	00800134 	movhi	r2,4
     560:	10842004 	addi	r2,r2,4224
     564:	10800037 	ldwio	r2,0(r2)
     568:	10800058 	cmpnei	r2,r2,1
     56c:	103ffb1e 	bne	r2,zero,55c <__alt_data_end+0xfffc055c>

	// Stop performance counter
	PERF_END(PERFORMANCE_COUNTER_0_BASE, 3);
     570:	0007883a 	mov	r3,zero
     574:	00800134 	movhi	r2,4
     578:	10840c04 	addi	r2,r2,4144
     57c:	10c00035 	stwio	r3,0(r2)
     580:	00000106 	br	588 <use_accelerator+0xa4>
{
	// Check if the device is already working
	uint32_t status = IORD_32DIRECT(ACCELERATOR_0_BASE, 0x0);
	if(status == ACC_BUSY)
	{
		return;
     584:	0001883a 	nop
	// Wait for it to be done
	while(IORD_32DIRECT(ACCELERATOR_0_BASE, 0x0) != ACC_DONE);

	// Stop performance counter
	PERF_END(PERFORMANCE_COUNTER_0_BASE, 3);
}
     588:	e037883a 	mov	sp,fp
     58c:	df000017 	ldw	fp,0(sp)
     590:	dec00104 	addi	sp,sp,4
     594:	f800283a 	ret

00000598 <test_method_once>:

int test_method_once(uint32_t input, uint32_t exp_output, int method)
{
     598:	defffa04 	addi	sp,sp,-24
     59c:	dfc00515 	stw	ra,20(sp)
     5a0:	df000415 	stw	fp,16(sp)
     5a4:	df000404 	addi	fp,sp,16
     5a8:	e13ffd15 	stw	r4,-12(fp)
     5ac:	e17ffe15 	stw	r5,-8(fp)
     5b0:	e1bfff15 	stw	r6,-4(fp)
	// and 0 otherwise
	// method = 1 -> C software implementation
	// method = 2 -> Custom instruction implementation
	// method = 3 -> Hardware accelerator implementation
	uint32_t result;
	if(method == 1)
     5b4:	e0bfff17 	ldw	r2,-4(fp)
     5b8:	10800058 	cmpnei	r2,r2,1
     5bc:	1000051e 	bne	r2,zero,5d4 <test_method_once+0x3c>
	{
		result = software_custom_inst(input);
     5c0:	e0bffd17 	ldw	r2,-12(fp)
     5c4:	1009883a 	mov	r4,r2
     5c8:	00002fc0 	call	2fc <software_custom_inst>
     5cc:	e0bffc15 	stw	r2,-16(fp)
     5d0:	00001506 	br	628 <test_method_once+0x90>
	}
	else if(method == 2)
     5d4:	e0bfff17 	ldw	r2,-4(fp)
     5d8:	10800098 	cmpnei	r2,r2,2
     5dc:	1000041e 	bne	r2,zero,5f0 <test_method_once+0x58>
	{
		result = ALT_CI_CUSTOM_INSTRUCTION_0(input);
     5e0:	e0bffd17 	ldw	r2,-12(fp)
     5e4:	1005c032 	custom	0,r2,r2,zero
     5e8:	e0bffc15 	stw	r2,-16(fp)
     5ec:	00000e06 	br	628 <test_method_once+0x90>
	}
	else if(method == 3)
     5f0:	e0bfff17 	ldw	r2,-4(fp)
     5f4:	108000d8 	cmpnei	r2,r2,3
     5f8:	10000b1e 	bne	r2,zero,628 <test_method_once+0x90>
	{
		use_accelerator((uint32_t)&input, (uint32_t)&out_1000, 0x1);
     5fc:	e0fffd04 	addi	r3,fp,-12
     600:	00800074 	movhi	r2,1
     604:	108ee004 	addi	r2,r2,15232
     608:	01800044 	movi	r6,1
     60c:	100b883a 	mov	r5,r2
     610:	1809883a 	mov	r4,r3
     614:	00004e40 	call	4e4 <use_accelerator>
		result = out_1000[0];
     618:	00800074 	movhi	r2,1
     61c:	108ee004 	addi	r2,r2,15232
     620:	10800017 	ldw	r2,0(r2)
     624:	e0bffc15 	stw	r2,-16(fp)
	}
	return result == exp_output;
     628:	e0fffc17 	ldw	r3,-16(fp)
     62c:	e0bffe17 	ldw	r2,-8(fp)
     630:	1885003a 	cmpeq	r2,r3,r2
     634:	10803fcc 	andi	r2,r2,255
}
     638:	e037883a 	mov	sp,fp
     63c:	dfc00117 	ldw	ra,4(sp)
     640:	df000017 	ldw	fp,0(sp)
     644:	dec00204 	addi	sp,sp,8
     648:	f800283a 	ret

0000064c <test_implementations>:

void test_implementations()
{
     64c:	defffe04 	addi	sp,sp,-8
     650:	dfc00115 	stw	ra,4(sp)
     654:	df000015 	stw	fp,0(sp)
     658:	d839883a 	mov	fp,sp
	// Test software implementation
	alt_printf("Software implementation test 1: Expected is 1, it gives %x \n", test_method_once(test, truth, 1));
     65c:	d0a00017 	ldw	r2,-32768(gp)
     660:	d0e00117 	ldw	r3,-32764(gp)
     664:	01800044 	movi	r6,1
     668:	180b883a 	mov	r5,r3
     66c:	1009883a 	mov	r4,r2
     670:	00005980 	call	598 <test_method_once>
     674:	100b883a 	mov	r5,r2
     678:	01000074 	movhi	r4,1
     67c:	213fe004 	addi	r4,r4,-128
     680:	00009e40 	call	9e4 <alt_printf>
	alt_printf("Software implementation test 2: Expected is 0, it gives %x \n", test_method_once(test, 0xffffffff, 1));
     684:	d0a00017 	ldw	r2,-32768(gp)
     688:	01800044 	movi	r6,1
     68c:	017fffc4 	movi	r5,-1
     690:	1009883a 	mov	r4,r2
     694:	00005980 	call	598 <test_method_once>
     698:	100b883a 	mov	r5,r2
     69c:	01000074 	movhi	r4,1
     6a0:	213ff004 	addi	r4,r4,-64
     6a4:	00009e40 	call	9e4 <alt_printf>

	// Test custom instruction implementation
	alt_printf("Custom instruction implementation test 1: Expected is 1, it gives %x \n", test_method_once(test, truth, 2));
     6a8:	d0a00017 	ldw	r2,-32768(gp)
     6ac:	d0e00117 	ldw	r3,-32764(gp)
     6b0:	01800084 	movi	r6,2
     6b4:	180b883a 	mov	r5,r3
     6b8:	1009883a 	mov	r4,r2
     6bc:	00005980 	call	598 <test_method_once>
     6c0:	100b883a 	mov	r5,r2
     6c4:	01000074 	movhi	r4,1
     6c8:	21000004 	addi	r4,r4,0
     6cc:	00009e40 	call	9e4 <alt_printf>
	alt_printf("Custom instruction implementation test 2: Expected is 0, it gives %x \n", test_method_once(test, 0xffffffff, 2));
     6d0:	d0a00017 	ldw	r2,-32768(gp)
     6d4:	01800084 	movi	r6,2
     6d8:	017fffc4 	movi	r5,-1
     6dc:	1009883a 	mov	r4,r2
     6e0:	00005980 	call	598 <test_method_once>
     6e4:	100b883a 	mov	r5,r2
     6e8:	01000074 	movhi	r4,1
     6ec:	21001204 	addi	r4,r4,72
     6f0:	00009e40 	call	9e4 <alt_printf>

	// Test accelerator implementation
	alt_printf("Accelerator implementation test 1: Expected is 1, it gives %x \n", test_method_once(test, truth, 3));
     6f4:	d0a00017 	ldw	r2,-32768(gp)
     6f8:	d0e00117 	ldw	r3,-32764(gp)
     6fc:	018000c4 	movi	r6,3
     700:	180b883a 	mov	r5,r3
     704:	1009883a 	mov	r4,r2
     708:	00005980 	call	598 <test_method_once>
     70c:	100b883a 	mov	r5,r2
     710:	01000074 	movhi	r4,1
     714:	21002404 	addi	r4,r4,144
     718:	00009e40 	call	9e4 <alt_printf>
	alt_printf("Accelerator implementation test 2: Expected is 0, it gives %x \n", test_method_once(test, 0xffffffff, 3));
     71c:	d0a00017 	ldw	r2,-32768(gp)
     720:	018000c4 	movi	r6,3
     724:	017fffc4 	movi	r5,-1
     728:	1009883a 	mov	r4,r2
     72c:	00005980 	call	598 <test_method_once>
     730:	100b883a 	mov	r5,r2
     734:	01000074 	movhi	r4,1
     738:	21003404 	addi	r4,r4,208
     73c:	00009e40 	call	9e4 <alt_printf>
}
     740:	0001883a 	nop
     744:	e037883a 	mov	sp,fp
     748:	dfc00117 	ldw	ra,4(sp)
     74c:	df000017 	ldw	fp,0(sp)
     750:	dec00204 	addi	sp,sp,8
     754:	f800283a 	ret

00000758 <main>:

int main()
{
     758:	defff904 	addi	sp,sp,-28
     75c:	dfc00615 	stw	ra,24(sp)
     760:	df000515 	stw	fp,20(sp)
     764:	df000504 	addi	fp,sp,20
	// Setup stuff for 1000 words of indata
	init_tables();
     768:	00002900 	call	290 <init_tables>
	void* in_addr_1000 = (uint32_t)&in_1000[0];
     76c:	00800074 	movhi	r2,1
     770:	1092c804 	addi	r2,r2,19232
     774:	e0bffd15 	stw	r2,-12(fp)
	void* out_addr_1000 = (uint32_t)&out_1000[0];
     778:	00800074 	movhi	r2,1
     77c:	108ee004 	addi	r2,r2,15232
     780:	e0bffe15 	stw	r2,-8(fp)
	uint32_t len_1000 = 0x000003E8;
     784:	0080fa04 	movi	r2,1000
     788:	e0bfff15 	stw	r2,-4(fp)

	// Test the implementations
	test_implementations();
     78c:	000064c0 	call	64c <test_implementations>

	// Start overall performance counter
	PERF_RESET(PERFORMANCE_COUNTER_0_BASE);
     790:	00c00044 	movi	r3,1
     794:	00800134 	movhi	r2,4
     798:	10840004 	addi	r2,r2,4096
     79c:	10c00035 	stwio	r3,0(r2)
	PERF_START_MEASURING(PERFORMANCE_COUNTER_0_BASE);
     7a0:	0007883a 	mov	r3,zero
     7a4:	00800134 	movhi	r2,4
     7a8:	10840104 	addi	r2,r2,4100
     7ac:	10c00035 	stwio	r3,0(r2)

	// Run software implementation on 1000 words of indata
	software_1000();
     7b0:	00003980 	call	398 <software_1000>

	// Run custom instruction implementation on 1000 words of indata
	custom_1000();
     7b4:	00004440 	call	444 <custom_1000>

	// Run accelerator implementation on 1000 words of indata
	use_accelerator(in_addr_1000, out_addr_1000, len_1000);
     7b8:	e0bffd17 	ldw	r2,-12(fp)
     7bc:	e0fffe17 	ldw	r3,-8(fp)
     7c0:	e1bfff17 	ldw	r6,-4(fp)
     7c4:	180b883a 	mov	r5,r3
     7c8:	1009883a 	mov	r4,r2
     7cc:	00004e40 	call	4e4 <use_accelerator>

	// Stop overall performance counter and print results
	PERF_STOP_MEASURING(PERFORMANCE_COUNTER_0_BASE);
     7d0:	0007883a 	mov	r3,zero
     7d4:	00800134 	movhi	r2,4
     7d8:	10840004 	addi	r2,r2,4096
     7dc:	10c00035 	stwio	r3,0(r2)
	perf_print_formatted_report(PERFORMANCE_COUNTER_0_BASE, alt_get_cpu_freq(), 3, "C software", "Custom instruction", "Accelerator");
     7e0:	00018e40 	call	18e4 <alt_get_cpu_freq>
     7e4:	1007883a 	mov	r3,r2
     7e8:	00800074 	movhi	r2,1
     7ec:	10804704 	addi	r2,r2,284
     7f0:	d8800115 	stw	r2,4(sp)
     7f4:	00800074 	movhi	r2,1
     7f8:	10804a04 	addi	r2,r2,296
     7fc:	d8800015 	stw	r2,0(sp)
     800:	01c00074 	movhi	r7,1
     804:	39c04404 	addi	r7,r7,272
     808:	018000c4 	movi	r6,3
     80c:	180b883a 	mov	r5,r3
     810:	01000134 	movhi	r4,4
     814:	21040004 	addi	r4,r4,4096
     818:	00019080 	call	1908 <perf_print_formatted_report>
     81c:	0005883a 	mov	r2,zero
}
     820:	e037883a 	mov	sp,fp
     824:	dfc00117 	ldw	ra,4(sp)
     828:	df000017 	ldw	fp,0(sp)
     82c:	dec00204 	addi	sp,sp,8
     830:	f800283a 	ret

00000834 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
     834:	defffe04 	addi	sp,sp,-8
     838:	df000115 	stw	fp,4(sp)
     83c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
     840:	e03fff15 	stw	zero,-4(fp)
     844:	00000506 	br	85c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
     848:	e0bfff17 	ldw	r2,-4(fp)
     84c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
     850:	e0bfff17 	ldw	r2,-4(fp)
     854:	10800804 	addi	r2,r2,32
     858:	e0bfff15 	stw	r2,-4(fp)
     85c:	e0bfff17 	ldw	r2,-4(fp)
     860:	10820030 	cmpltui	r2,r2,2048
     864:	103ff81e 	bne	r2,zero,848 <__alt_data_end+0xfffc0848>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
     868:	0001883a 	nop
     86c:	e037883a 	mov	sp,fp
     870:	df000017 	ldw	fp,0(sp)
     874:	dec00104 	addi	sp,sp,4
     878:	f800283a 	ret

0000087c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
     87c:	defffc04 	addi	sp,sp,-16
     880:	df000315 	stw	fp,12(sp)
     884:	df000304 	addi	fp,sp,12
     888:	e13ffd15 	stw	r4,-12(fp)
     88c:	e17ffe15 	stw	r5,-8(fp)
     890:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
     894:	e0fffe17 	ldw	r3,-8(fp)
     898:	e0bffd17 	ldw	r2,-12(fp)
     89c:	18800c26 	beq	r3,r2,8d0 <alt_load_section+0x54>
  {
    while( to != end )
     8a0:	00000806 	br	8c4 <alt_load_section+0x48>
    {
      *to++ = *from++;
     8a4:	e0bffe17 	ldw	r2,-8(fp)
     8a8:	10c00104 	addi	r3,r2,4
     8ac:	e0fffe15 	stw	r3,-8(fp)
     8b0:	e0fffd17 	ldw	r3,-12(fp)
     8b4:	19000104 	addi	r4,r3,4
     8b8:	e13ffd15 	stw	r4,-12(fp)
     8bc:	18c00017 	ldw	r3,0(r3)
     8c0:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
     8c4:	e0fffe17 	ldw	r3,-8(fp)
     8c8:	e0bfff17 	ldw	r2,-4(fp)
     8cc:	18bff51e 	bne	r3,r2,8a4 <__alt_data_end+0xfffc08a4>
    {
      *to++ = *from++;
    }
  }
}
     8d0:	0001883a 	nop
     8d4:	e037883a 	mov	sp,fp
     8d8:	df000017 	ldw	fp,0(sp)
     8dc:	dec00104 	addi	sp,sp,4
     8e0:	f800283a 	ret

000008e4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
     8e4:	defffe04 	addi	sp,sp,-8
     8e8:	dfc00115 	stw	ra,4(sp)
     8ec:	df000015 	stw	fp,0(sp)
     8f0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
     8f4:	01800074 	movhi	r6,1
     8f8:	31880b04 	addi	r6,r6,8236
     8fc:	01400074 	movhi	r5,1
     900:	29414e04 	addi	r5,r5,1336
     904:	01000074 	movhi	r4,1
     908:	21080b04 	addi	r4,r4,8236
     90c:	000087c0 	call	87c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
     910:	01800034 	movhi	r6,0
     914:	31809104 	addi	r6,r6,580
     918:	01400034 	movhi	r5,0
     91c:	29400804 	addi	r5,r5,32
     920:	01000034 	movhi	r4,0
     924:	21000804 	addi	r4,r4,32
     928:	000087c0 	call	87c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
     92c:	01800074 	movhi	r6,1
     930:	31814e04 	addi	r6,r6,1336
     934:	01400074 	movhi	r5,1
     938:	297fe004 	addi	r5,r5,-128
     93c:	01000074 	movhi	r4,1
     940:	213fe004 	addi	r4,r4,-128
     944:	000087c0 	call	87c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
     948:	00008340 	call	834 <alt_dcache_flush_all>
  alt_icache_flush_all();
     94c:	0001f8c0 	call	1f8c <alt_icache_flush_all>
}
     950:	0001883a 	nop
     954:	e037883a 	mov	sp,fp
     958:	dfc00117 	ldw	ra,4(sp)
     95c:	df000017 	ldw	fp,0(sp)
     960:	dec00204 	addi	sp,sp,8
     964:	f800283a 	ret

00000968 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
     968:	defffd04 	addi	sp,sp,-12
     96c:	dfc00215 	stw	ra,8(sp)
     970:	df000115 	stw	fp,4(sp)
     974:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
     978:	0009883a 	mov	r4,zero
     97c:	0000c800 	call	c80 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
     980:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
     984:	0000cb80 	call	cb8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
     988:	01800074 	movhi	r6,1
     98c:	31804f04 	addi	r6,r6,316
     990:	01400074 	movhi	r5,1
     994:	29404f04 	addi	r5,r5,316
     998:	01000074 	movhi	r4,1
     99c:	21004f04 	addi	r4,r4,316
     9a0:	00023240 	call	2324 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
     9a4:	0001ecc0 	call	1ecc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
     9a8:	01000034 	movhi	r4,0
     9ac:	2107cb04 	addi	r4,r4,7980
     9b0:	0002b880 	call	2b88 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
     9b4:	d0a6cf17 	ldw	r2,-25796(gp)
     9b8:	d0e6d017 	ldw	r3,-25792(gp)
     9bc:	d126d117 	ldw	r4,-25788(gp)
     9c0:	200d883a 	mov	r6,r4
     9c4:	180b883a 	mov	r5,r3
     9c8:	1009883a 	mov	r4,r2
     9cc:	00007580 	call	758 <main>
     9d0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
     9d4:	01000044 	movi	r4,1
     9d8:	0001cf00 	call	1cf0 <close>
  exit (result);
     9dc:	e13fff17 	ldw	r4,-4(fp)
     9e0:	0002b9c0 	call	2b9c <exit>

000009e4 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
     9e4:	defff204 	addi	sp,sp,-56
     9e8:	dfc00a15 	stw	ra,40(sp)
     9ec:	df000915 	stw	fp,36(sp)
     9f0:	df000904 	addi	fp,sp,36
     9f4:	e13fff15 	stw	r4,-4(fp)
     9f8:	e1400215 	stw	r5,8(fp)
     9fc:	e1800315 	stw	r6,12(fp)
     a00:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
     a04:	e0800204 	addi	r2,fp,8
     a08:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
     a0c:	e0bfff17 	ldw	r2,-4(fp)
     a10:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
     a14:	00006f06 	br	bd4 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
     a18:	e0bff807 	ldb	r2,-32(fp)
     a1c:	10800960 	cmpeqi	r2,r2,37
     a20:	1000041e 	bne	r2,zero,a34 <alt_printf+0x50>
        {
            alt_putchar(c);
     a24:	e0bff807 	ldb	r2,-32(fp)
     a28:	1009883a 	mov	r4,r2
     a2c:	0000c100 	call	c10 <alt_putchar>
     a30:	00006806 	br	bd4 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
     a34:	e0bff717 	ldw	r2,-36(fp)
     a38:	10c00044 	addi	r3,r2,1
     a3c:	e0fff715 	stw	r3,-36(fp)
     a40:	10800003 	ldbu	r2,0(r2)
     a44:	e0bff805 	stb	r2,-32(fp)
     a48:	e0bff807 	ldb	r2,-32(fp)
     a4c:	10006926 	beq	r2,zero,bf4 <alt_printf+0x210>
            {
                if (c == '%')
     a50:	e0bff807 	ldb	r2,-32(fp)
     a54:	10800958 	cmpnei	r2,r2,37
     a58:	1000041e 	bne	r2,zero,a6c <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
     a5c:	e0bff807 	ldb	r2,-32(fp)
     a60:	1009883a 	mov	r4,r2
     a64:	0000c100 	call	c10 <alt_putchar>
     a68:	00005a06 	br	bd4 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
     a6c:	e0bff807 	ldb	r2,-32(fp)
     a70:	108018d8 	cmpnei	r2,r2,99
     a74:	1000081e 	bne	r2,zero,a98 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
     a78:	e0bffe17 	ldw	r2,-8(fp)
     a7c:	10c00104 	addi	r3,r2,4
     a80:	e0fffe15 	stw	r3,-8(fp)
     a84:	10800017 	ldw	r2,0(r2)
     a88:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
     a8c:	e13ffd17 	ldw	r4,-12(fp)
     a90:	0000c100 	call	c10 <alt_putchar>
     a94:	00004f06 	br	bd4 <alt_printf+0x1f0>
                }
                else if (c == 'x')
     a98:	e0bff807 	ldb	r2,-32(fp)
     a9c:	10801e18 	cmpnei	r2,r2,120
     aa0:	1000341e 	bne	r2,zero,b74 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
     aa4:	e0bffe17 	ldw	r2,-8(fp)
     aa8:	10c00104 	addi	r3,r2,4
     aac:	e0fffe15 	stw	r3,-8(fp)
     ab0:	10800017 	ldw	r2,0(r2)
     ab4:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
     ab8:	e0bffb17 	ldw	r2,-20(fp)
     abc:	1000031e 	bne	r2,zero,acc <alt_printf+0xe8>
                    {
                        alt_putchar('0');
     ac0:	01000c04 	movi	r4,48
     ac4:	0000c100 	call	c10 <alt_putchar>
                        continue;
     ac8:	00004206 	br	bd4 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
     acc:	00800704 	movi	r2,28
     ad0:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
     ad4:	00000306 	br	ae4 <alt_printf+0x100>
                        digit_shift -= 4;
     ad8:	e0bff917 	ldw	r2,-28(fp)
     adc:	10bfff04 	addi	r2,r2,-4
     ae0:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
     ae4:	00c003c4 	movi	r3,15
     ae8:	e0bff917 	ldw	r2,-28(fp)
     aec:	1884983a 	sll	r2,r3,r2
     af0:	1007883a 	mov	r3,r2
     af4:	e0bffb17 	ldw	r2,-20(fp)
     af8:	1884703a 	and	r2,r3,r2
     afc:	103ff626 	beq	r2,zero,ad8 <__alt_data_end+0xfffc0ad8>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
     b00:	00001906 	br	b68 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
     b04:	00c003c4 	movi	r3,15
     b08:	e0bff917 	ldw	r2,-28(fp)
     b0c:	1884983a 	sll	r2,r3,r2
     b10:	1007883a 	mov	r3,r2
     b14:	e0bffb17 	ldw	r2,-20(fp)
     b18:	1886703a 	and	r3,r3,r2
     b1c:	e0bff917 	ldw	r2,-28(fp)
     b20:	1884d83a 	srl	r2,r3,r2
     b24:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
     b28:	e0bffc17 	ldw	r2,-16(fp)
     b2c:	108002a8 	cmpgeui	r2,r2,10
     b30:	1000041e 	bne	r2,zero,b44 <alt_printf+0x160>
                            c = '0' + digit;
     b34:	e0bffc17 	ldw	r2,-16(fp)
     b38:	10800c04 	addi	r2,r2,48
     b3c:	e0bff805 	stb	r2,-32(fp)
     b40:	00000306 	br	b50 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
     b44:	e0bffc17 	ldw	r2,-16(fp)
     b48:	108015c4 	addi	r2,r2,87
     b4c:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
     b50:	e0bff807 	ldb	r2,-32(fp)
     b54:	1009883a 	mov	r4,r2
     b58:	0000c100 	call	c10 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
     b5c:	e0bff917 	ldw	r2,-28(fp)
     b60:	10bfff04 	addi	r2,r2,-4
     b64:	e0bff915 	stw	r2,-28(fp)
     b68:	e0bff917 	ldw	r2,-28(fp)
     b6c:	103fe50e 	bge	r2,zero,b04 <__alt_data_end+0xfffc0b04>
     b70:	00001806 	br	bd4 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
     b74:	e0bff807 	ldb	r2,-32(fp)
     b78:	10801cd8 	cmpnei	r2,r2,115
     b7c:	1000151e 	bne	r2,zero,bd4 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
     b80:	e0bffe17 	ldw	r2,-8(fp)
     b84:	10c00104 	addi	r3,r2,4
     b88:	e0fffe15 	stw	r3,-8(fp)
     b8c:	10800017 	ldw	r2,0(r2)
     b90:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
     b94:	00000906 	br	bbc <alt_printf+0x1d8>
                      alt_putchar(*s++);
     b98:	e0bffa17 	ldw	r2,-24(fp)
     b9c:	10c00044 	addi	r3,r2,1
     ba0:	e0fffa15 	stw	r3,-24(fp)
     ba4:	10800003 	ldbu	r2,0(r2)
     ba8:	10803fcc 	andi	r2,r2,255
     bac:	1080201c 	xori	r2,r2,128
     bb0:	10bfe004 	addi	r2,r2,-128
     bb4:	1009883a 	mov	r4,r2
     bb8:	0000c100 	call	c10 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
     bbc:	e0bffa17 	ldw	r2,-24(fp)
     bc0:	10800003 	ldbu	r2,0(r2)
     bc4:	10803fcc 	andi	r2,r2,255
     bc8:	1080201c 	xori	r2,r2,128
     bcc:	10bfe004 	addi	r2,r2,-128
     bd0:	103ff11e 	bne	r2,zero,b98 <__alt_data_end+0xfffc0b98>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
     bd4:	e0bff717 	ldw	r2,-36(fp)
     bd8:	10c00044 	addi	r3,r2,1
     bdc:	e0fff715 	stw	r3,-36(fp)
     be0:	10800003 	ldbu	r2,0(r2)
     be4:	e0bff805 	stb	r2,-32(fp)
     be8:	e0bff807 	ldb	r2,-32(fp)
     bec:	103f8a1e 	bne	r2,zero,a18 <__alt_data_end+0xfffc0a18>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
     bf0:	00000106 	br	bf8 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
     bf4:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
     bf8:	0001883a 	nop
     bfc:	e037883a 	mov	sp,fp
     c00:	dfc00117 	ldw	ra,4(sp)
     c04:	df000017 	ldw	fp,0(sp)
     c08:	dec00504 	addi	sp,sp,20
     c0c:	f800283a 	ret

00000c10 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
     c10:	defffd04 	addi	sp,sp,-12
     c14:	dfc00215 	stw	ra,8(sp)
     c18:	df000115 	stw	fp,4(sp)
     c1c:	df000104 	addi	fp,sp,4
     c20:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
     c24:	d0a00c17 	ldw	r2,-32720(gp)
     c28:	10800217 	ldw	r2,8(r2)
     c2c:	100b883a 	mov	r5,r2
     c30:	e13fff17 	ldw	r4,-4(fp)
     c34:	0002ea40 	call	2ea4 <putc>
#endif
#endif
}
     c38:	e037883a 	mov	sp,fp
     c3c:	dfc00117 	ldw	ra,4(sp)
     c40:	df000017 	ldw	fp,0(sp)
     c44:	dec00204 	addi	sp,sp,8
     c48:	f800283a 	ret

00000c4c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
     c4c:	defffd04 	addi	sp,sp,-12
     c50:	dfc00215 	stw	ra,8(sp)
     c54:	df000115 	stw	fp,4(sp)
     c58:	df000104 	addi	fp,sp,4
     c5c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
     c60:	d1600404 	addi	r5,gp,-32752
     c64:	e13fff17 	ldw	r4,-4(fp)
     c68:	0001e280 	call	1e28 <alt_dev_llist_insert>
}
     c6c:	e037883a 	mov	sp,fp
     c70:	dfc00117 	ldw	ra,4(sp)
     c74:	df000017 	ldw	fp,0(sp)
     c78:	dec00204 	addi	sp,sp,8
     c7c:	f800283a 	ret

00000c80 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
     c80:	defffd04 	addi	sp,sp,-12
     c84:	dfc00215 	stw	ra,8(sp)
     c88:	df000115 	stw	fp,4(sp)
     c8c:	df000104 	addi	fp,sp,4
     c90:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
     c94:	00027fc0 	call	27fc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
     c98:	00800044 	movi	r2,1
     c9c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
     ca0:	0001883a 	nop
     ca4:	e037883a 	mov	sp,fp
     ca8:	dfc00117 	ldw	ra,4(sp)
     cac:	df000017 	ldw	fp,0(sp)
     cb0:	dec00204 	addi	sp,sp,8
     cb4:	f800283a 	ret

00000cb8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
     cb8:	defffe04 	addi	sp,sp,-8
     cbc:	dfc00115 	stw	ra,4(sp)
     cc0:	df000015 	stw	fp,0(sp)
     cc4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
     cc8:	000d883a 	mov	r6,zero
     ccc:	000b883a 	mov	r5,zero
     cd0:	01000074 	movhi	r4,1
     cd4:	21015804 	addi	r4,r4,1376
     cd8:	0000e740 	call	e74 <altera_avalon_jtag_uart_init>
     cdc:	01000074 	movhi	r4,1
     ce0:	21014e04 	addi	r4,r4,1336
     ce4:	0000c4c0 	call	c4c <alt_dev_reg>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER_0, performance_counter_0);
     ce8:	00c00044 	movi	r3,1
     cec:	00800134 	movhi	r2,4
     cf0:	10840004 	addi	r2,r2,4096
     cf4:	10c00035 	stwio	r3,0(r2)
}
     cf8:	0001883a 	nop
     cfc:	e037883a 	mov	sp,fp
     d00:	dfc00117 	ldw	ra,4(sp)
     d04:	df000017 	ldw	fp,0(sp)
     d08:	dec00204 	addi	sp,sp,8
     d0c:	f800283a 	ret

00000d10 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
     d10:	defffa04 	addi	sp,sp,-24
     d14:	dfc00515 	stw	ra,20(sp)
     d18:	df000415 	stw	fp,16(sp)
     d1c:	df000404 	addi	fp,sp,16
     d20:	e13ffd15 	stw	r4,-12(fp)
     d24:	e17ffe15 	stw	r5,-8(fp)
     d28:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     d2c:	e0bffd17 	ldw	r2,-12(fp)
     d30:	10800017 	ldw	r2,0(r2)
     d34:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
     d38:	e0bffc17 	ldw	r2,-16(fp)
     d3c:	10c00a04 	addi	r3,r2,40
     d40:	e0bffd17 	ldw	r2,-12(fp)
     d44:	10800217 	ldw	r2,8(r2)
     d48:	100f883a 	mov	r7,r2
     d4c:	e1bfff17 	ldw	r6,-4(fp)
     d50:	e17ffe17 	ldw	r5,-8(fp)
     d54:	1809883a 	mov	r4,r3
     d58:	00013380 	call	1338 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
     d5c:	e037883a 	mov	sp,fp
     d60:	dfc00117 	ldw	ra,4(sp)
     d64:	df000017 	ldw	fp,0(sp)
     d68:	dec00204 	addi	sp,sp,8
     d6c:	f800283a 	ret

00000d70 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
     d70:	defffa04 	addi	sp,sp,-24
     d74:	dfc00515 	stw	ra,20(sp)
     d78:	df000415 	stw	fp,16(sp)
     d7c:	df000404 	addi	fp,sp,16
     d80:	e13ffd15 	stw	r4,-12(fp)
     d84:	e17ffe15 	stw	r5,-8(fp)
     d88:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     d8c:	e0bffd17 	ldw	r2,-12(fp)
     d90:	10800017 	ldw	r2,0(r2)
     d94:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
     d98:	e0bffc17 	ldw	r2,-16(fp)
     d9c:	10c00a04 	addi	r3,r2,40
     da0:	e0bffd17 	ldw	r2,-12(fp)
     da4:	10800217 	ldw	r2,8(r2)
     da8:	100f883a 	mov	r7,r2
     dac:	e1bfff17 	ldw	r6,-4(fp)
     db0:	e17ffe17 	ldw	r5,-8(fp)
     db4:	1809883a 	mov	r4,r3
     db8:	00015540 	call	1554 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
     dbc:	e037883a 	mov	sp,fp
     dc0:	dfc00117 	ldw	ra,4(sp)
     dc4:	df000017 	ldw	fp,0(sp)
     dc8:	dec00204 	addi	sp,sp,8
     dcc:	f800283a 	ret

00000dd0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
     dd0:	defffc04 	addi	sp,sp,-16
     dd4:	dfc00315 	stw	ra,12(sp)
     dd8:	df000215 	stw	fp,8(sp)
     ddc:	df000204 	addi	fp,sp,8
     de0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
     de4:	e0bfff17 	ldw	r2,-4(fp)
     de8:	10800017 	ldw	r2,0(r2)
     dec:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
     df0:	e0bffe17 	ldw	r2,-8(fp)
     df4:	10c00a04 	addi	r3,r2,40
     df8:	e0bfff17 	ldw	r2,-4(fp)
     dfc:	10800217 	ldw	r2,8(r2)
     e00:	100b883a 	mov	r5,r2
     e04:	1809883a 	mov	r4,r3
     e08:	00011e00 	call	11e0 <altera_avalon_jtag_uart_close>
}
     e0c:	e037883a 	mov	sp,fp
     e10:	dfc00117 	ldw	ra,4(sp)
     e14:	df000017 	ldw	fp,0(sp)
     e18:	dec00204 	addi	sp,sp,8
     e1c:	f800283a 	ret

00000e20 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
     e20:	defffa04 	addi	sp,sp,-24
     e24:	dfc00515 	stw	ra,20(sp)
     e28:	df000415 	stw	fp,16(sp)
     e2c:	df000404 	addi	fp,sp,16
     e30:	e13ffd15 	stw	r4,-12(fp)
     e34:	e17ffe15 	stw	r5,-8(fp)
     e38:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
     e3c:	e0bffd17 	ldw	r2,-12(fp)
     e40:	10800017 	ldw	r2,0(r2)
     e44:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
     e48:	e0bffc17 	ldw	r2,-16(fp)
     e4c:	10800a04 	addi	r2,r2,40
     e50:	e1bfff17 	ldw	r6,-4(fp)
     e54:	e17ffe17 	ldw	r5,-8(fp)
     e58:	1009883a 	mov	r4,r2
     e5c:	00012480 	call	1248 <altera_avalon_jtag_uart_ioctl>
}
     e60:	e037883a 	mov	sp,fp
     e64:	dfc00117 	ldw	ra,4(sp)
     e68:	df000017 	ldw	fp,0(sp)
     e6c:	dec00204 	addi	sp,sp,8
     e70:	f800283a 	ret

00000e74 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
     e74:	defffa04 	addi	sp,sp,-24
     e78:	dfc00515 	stw	ra,20(sp)
     e7c:	df000415 	stw	fp,16(sp)
     e80:	df000404 	addi	fp,sp,16
     e84:	e13ffd15 	stw	r4,-12(fp)
     e88:	e17ffe15 	stw	r5,-8(fp)
     e8c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
     e90:	e0bffd17 	ldw	r2,-12(fp)
     e94:	00c00044 	movi	r3,1
     e98:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
     e9c:	e0bffd17 	ldw	r2,-12(fp)
     ea0:	10800017 	ldw	r2,0(r2)
     ea4:	10800104 	addi	r2,r2,4
     ea8:	1007883a 	mov	r3,r2
     eac:	e0bffd17 	ldw	r2,-12(fp)
     eb0:	10800817 	ldw	r2,32(r2)
     eb4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
     eb8:	e0bffe17 	ldw	r2,-8(fp)
     ebc:	e0ffff17 	ldw	r3,-4(fp)
     ec0:	d8000015 	stw	zero,0(sp)
     ec4:	e1fffd17 	ldw	r7,-12(fp)
     ec8:	01800034 	movhi	r6,0
     ecc:	3183cd04 	addi	r6,r6,3892
     ed0:	180b883a 	mov	r5,r3
     ed4:	1009883a 	mov	r4,r2
     ed8:	0001fc00 	call	1fc0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
     edc:	e0bffd17 	ldw	r2,-12(fp)
     ee0:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
     ee4:	e0bffd17 	ldw	r2,-12(fp)
     ee8:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
     eec:	d0e6d317 	ldw	r3,-25780(gp)
     ef0:	e1fffd17 	ldw	r7,-12(fp)
     ef4:	01800034 	movhi	r6,0
     ef8:	31845004 	addi	r6,r6,4416
     efc:	180b883a 	mov	r5,r3
     f00:	1009883a 	mov	r4,r2
     f04:	0001b880 	call	1b88 <alt_alarm_start>
     f08:	1000040e 	bge	r2,zero,f1c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
     f0c:	e0fffd17 	ldw	r3,-12(fp)
     f10:	00a00034 	movhi	r2,32768
     f14:	10bfffc4 	addi	r2,r2,-1
     f18:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
     f1c:	0001883a 	nop
     f20:	e037883a 	mov	sp,fp
     f24:	dfc00117 	ldw	ra,4(sp)
     f28:	df000017 	ldw	fp,0(sp)
     f2c:	dec00204 	addi	sp,sp,8
     f30:	f800283a 	ret

00000f34 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
     f34:	defff804 	addi	sp,sp,-32
     f38:	df000715 	stw	fp,28(sp)
     f3c:	df000704 	addi	fp,sp,28
     f40:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
     f44:	e0bfff17 	ldw	r2,-4(fp)
     f48:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
     f4c:	e0bffb17 	ldw	r2,-20(fp)
     f50:	10800017 	ldw	r2,0(r2)
     f54:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
     f58:	e0bffc17 	ldw	r2,-16(fp)
     f5c:	10800104 	addi	r2,r2,4
     f60:	10800037 	ldwio	r2,0(r2)
     f64:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
     f68:	e0bffd17 	ldw	r2,-12(fp)
     f6c:	1080c00c 	andi	r2,r2,768
     f70:	10006d26 	beq	r2,zero,1128 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
     f74:	e0bffd17 	ldw	r2,-12(fp)
     f78:	1080400c 	andi	r2,r2,256
     f7c:	10003526 	beq	r2,zero,1054 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
     f80:	00800074 	movhi	r2,1
     f84:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     f88:	e0bffb17 	ldw	r2,-20(fp)
     f8c:	10800a17 	ldw	r2,40(r2)
     f90:	10800044 	addi	r2,r2,1
     f94:	1081ffcc 	andi	r2,r2,2047
     f98:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
     f9c:	e0bffb17 	ldw	r2,-20(fp)
     fa0:	10c00b17 	ldw	r3,44(r2)
     fa4:	e0bffe17 	ldw	r2,-8(fp)
     fa8:	18801526 	beq	r3,r2,1000 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
     fac:	e0bffc17 	ldw	r2,-16(fp)
     fb0:	10800037 	ldwio	r2,0(r2)
     fb4:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
     fb8:	e0bff917 	ldw	r2,-28(fp)
     fbc:	10a0000c 	andi	r2,r2,32768
     fc0:	10001126 	beq	r2,zero,1008 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
     fc4:	e0bffb17 	ldw	r2,-20(fp)
     fc8:	10800a17 	ldw	r2,40(r2)
     fcc:	e0fff917 	ldw	r3,-28(fp)
     fd0:	1809883a 	mov	r4,r3
     fd4:	e0fffb17 	ldw	r3,-20(fp)
     fd8:	1885883a 	add	r2,r3,r2
     fdc:	10800e04 	addi	r2,r2,56
     fe0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
     fe4:	e0bffb17 	ldw	r2,-20(fp)
     fe8:	10800a17 	ldw	r2,40(r2)
     fec:	10800044 	addi	r2,r2,1
     ff0:	10c1ffcc 	andi	r3,r2,2047
     ff4:	e0bffb17 	ldw	r2,-20(fp)
     ff8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
     ffc:	003fe206 	br	f88 <__alt_data_end+0xfffc0f88>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    1000:	0001883a 	nop
    1004:	00000106 	br	100c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    1008:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    100c:	e0bff917 	ldw	r2,-28(fp)
    1010:	10bfffec 	andhi	r2,r2,65535
    1014:	10000f26 	beq	r2,zero,1054 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    1018:	e0bffb17 	ldw	r2,-20(fp)
    101c:	10c00817 	ldw	r3,32(r2)
    1020:	00bfff84 	movi	r2,-2
    1024:	1886703a 	and	r3,r3,r2
    1028:	e0bffb17 	ldw	r2,-20(fp)
    102c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    1030:	e0bffc17 	ldw	r2,-16(fp)
    1034:	10800104 	addi	r2,r2,4
    1038:	1007883a 	mov	r3,r2
    103c:	e0bffb17 	ldw	r2,-20(fp)
    1040:	10800817 	ldw	r2,32(r2)
    1044:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    1048:	e0bffc17 	ldw	r2,-16(fp)
    104c:	10800104 	addi	r2,r2,4
    1050:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    1054:	e0bffd17 	ldw	r2,-12(fp)
    1058:	1080800c 	andi	r2,r2,512
    105c:	103fbe26 	beq	r2,zero,f58 <__alt_data_end+0xfffc0f58>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    1060:	e0bffd17 	ldw	r2,-12(fp)
    1064:	1004d43a 	srli	r2,r2,16
    1068:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    106c:	00001406 	br	10c0 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    1070:	e0bffc17 	ldw	r2,-16(fp)
    1074:	e0fffb17 	ldw	r3,-20(fp)
    1078:	18c00d17 	ldw	r3,52(r3)
    107c:	e13ffb17 	ldw	r4,-20(fp)
    1080:	20c7883a 	add	r3,r4,r3
    1084:	18c20e04 	addi	r3,r3,2104
    1088:	18c00003 	ldbu	r3,0(r3)
    108c:	18c03fcc 	andi	r3,r3,255
    1090:	18c0201c 	xori	r3,r3,128
    1094:	18ffe004 	addi	r3,r3,-128
    1098:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    109c:	e0bffb17 	ldw	r2,-20(fp)
    10a0:	10800d17 	ldw	r2,52(r2)
    10a4:	10800044 	addi	r2,r2,1
    10a8:	10c1ffcc 	andi	r3,r2,2047
    10ac:	e0bffb17 	ldw	r2,-20(fp)
    10b0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    10b4:	e0bffa17 	ldw	r2,-24(fp)
    10b8:	10bfffc4 	addi	r2,r2,-1
    10bc:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    10c0:	e0bffa17 	ldw	r2,-24(fp)
    10c4:	10000526 	beq	r2,zero,10dc <altera_avalon_jtag_uart_irq+0x1a8>
    10c8:	e0bffb17 	ldw	r2,-20(fp)
    10cc:	10c00d17 	ldw	r3,52(r2)
    10d0:	e0bffb17 	ldw	r2,-20(fp)
    10d4:	10800c17 	ldw	r2,48(r2)
    10d8:	18bfe51e 	bne	r3,r2,1070 <__alt_data_end+0xfffc1070>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    10dc:	e0bffa17 	ldw	r2,-24(fp)
    10e0:	103f9d26 	beq	r2,zero,f58 <__alt_data_end+0xfffc0f58>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    10e4:	e0bffb17 	ldw	r2,-20(fp)
    10e8:	10c00817 	ldw	r3,32(r2)
    10ec:	00bfff44 	movi	r2,-3
    10f0:	1886703a 	and	r3,r3,r2
    10f4:	e0bffb17 	ldw	r2,-20(fp)
    10f8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    10fc:	e0bffb17 	ldw	r2,-20(fp)
    1100:	10800017 	ldw	r2,0(r2)
    1104:	10800104 	addi	r2,r2,4
    1108:	1007883a 	mov	r3,r2
    110c:	e0bffb17 	ldw	r2,-20(fp)
    1110:	10800817 	ldw	r2,32(r2)
    1114:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    1118:	e0bffc17 	ldw	r2,-16(fp)
    111c:	10800104 	addi	r2,r2,4
    1120:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    1124:	003f8c06 	br	f58 <__alt_data_end+0xfffc0f58>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    1128:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    112c:	0001883a 	nop
    1130:	e037883a 	mov	sp,fp
    1134:	df000017 	ldw	fp,0(sp)
    1138:	dec00104 	addi	sp,sp,4
    113c:	f800283a 	ret

00001140 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    1140:	defff804 	addi	sp,sp,-32
    1144:	df000715 	stw	fp,28(sp)
    1148:	df000704 	addi	fp,sp,28
    114c:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    1150:	e0bffb17 	ldw	r2,-20(fp)
    1154:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    1158:	e0bff917 	ldw	r2,-28(fp)
    115c:	10800017 	ldw	r2,0(r2)
    1160:	10800104 	addi	r2,r2,4
    1164:	10800037 	ldwio	r2,0(r2)
    1168:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    116c:	e0bffa17 	ldw	r2,-24(fp)
    1170:	1081000c 	andi	r2,r2,1024
    1174:	10000b26 	beq	r2,zero,11a4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    1178:	e0bff917 	ldw	r2,-28(fp)
    117c:	10800017 	ldw	r2,0(r2)
    1180:	10800104 	addi	r2,r2,4
    1184:	1007883a 	mov	r3,r2
    1188:	e0bff917 	ldw	r2,-28(fp)
    118c:	10800817 	ldw	r2,32(r2)
    1190:	10810014 	ori	r2,r2,1024
    1194:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    1198:	e0bff917 	ldw	r2,-28(fp)
    119c:	10000915 	stw	zero,36(r2)
    11a0:	00000a06 	br	11cc <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    11a4:	e0bff917 	ldw	r2,-28(fp)
    11a8:	10c00917 	ldw	r3,36(r2)
    11ac:	00a00034 	movhi	r2,32768
    11b0:	10bfff04 	addi	r2,r2,-4
    11b4:	10c00536 	bltu	r2,r3,11cc <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    11b8:	e0bff917 	ldw	r2,-28(fp)
    11bc:	10800917 	ldw	r2,36(r2)
    11c0:	10c00044 	addi	r3,r2,1
    11c4:	e0bff917 	ldw	r2,-28(fp)
    11c8:	10c00915 	stw	r3,36(r2)
    11cc:	d0a6d317 	ldw	r2,-25780(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    11d0:	e037883a 	mov	sp,fp
    11d4:	df000017 	ldw	fp,0(sp)
    11d8:	dec00104 	addi	sp,sp,4
    11dc:	f800283a 	ret

000011e0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    11e0:	defffd04 	addi	sp,sp,-12
    11e4:	df000215 	stw	fp,8(sp)
    11e8:	df000204 	addi	fp,sp,8
    11ec:	e13ffe15 	stw	r4,-8(fp)
    11f0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    11f4:	00000506 	br	120c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    11f8:	e0bfff17 	ldw	r2,-4(fp)
    11fc:	1090000c 	andi	r2,r2,16384
    1200:	10000226 	beq	r2,zero,120c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    1204:	00bffd44 	movi	r2,-11
    1208:	00000b06 	br	1238 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    120c:	e0bffe17 	ldw	r2,-8(fp)
    1210:	10c00d17 	ldw	r3,52(r2)
    1214:	e0bffe17 	ldw	r2,-8(fp)
    1218:	10800c17 	ldw	r2,48(r2)
    121c:	18800526 	beq	r3,r2,1234 <altera_avalon_jtag_uart_close+0x54>
    1220:	e0bffe17 	ldw	r2,-8(fp)
    1224:	10c00917 	ldw	r3,36(r2)
    1228:	e0bffe17 	ldw	r2,-8(fp)
    122c:	10800117 	ldw	r2,4(r2)
    1230:	18bff136 	bltu	r3,r2,11f8 <__alt_data_end+0xfffc11f8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    1234:	0005883a 	mov	r2,zero
}
    1238:	e037883a 	mov	sp,fp
    123c:	df000017 	ldw	fp,0(sp)
    1240:	dec00104 	addi	sp,sp,4
    1244:	f800283a 	ret

00001248 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    1248:	defffa04 	addi	sp,sp,-24
    124c:	df000515 	stw	fp,20(sp)
    1250:	df000504 	addi	fp,sp,20
    1254:	e13ffd15 	stw	r4,-12(fp)
    1258:	e17ffe15 	stw	r5,-8(fp)
    125c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    1260:	00bff9c4 	movi	r2,-25
    1264:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    1268:	e0bffe17 	ldw	r2,-8(fp)
    126c:	10da8060 	cmpeqi	r3,r2,27137
    1270:	1800031e 	bne	r3,zero,1280 <altera_avalon_jtag_uart_ioctl+0x38>
    1274:	109a80a0 	cmpeqi	r2,r2,27138
    1278:	1000181e 	bne	r2,zero,12dc <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    127c:	00002906 	br	1324 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    1280:	e0bffd17 	ldw	r2,-12(fp)
    1284:	10c00117 	ldw	r3,4(r2)
    1288:	00a00034 	movhi	r2,32768
    128c:	10bfffc4 	addi	r2,r2,-1
    1290:	18802126 	beq	r3,r2,1318 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    1294:	e0bfff17 	ldw	r2,-4(fp)
    1298:	10800017 	ldw	r2,0(r2)
    129c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    12a0:	e0bffc17 	ldw	r2,-16(fp)
    12a4:	10800090 	cmplti	r2,r2,2
    12a8:	1000061e 	bne	r2,zero,12c4 <altera_avalon_jtag_uart_ioctl+0x7c>
    12ac:	e0fffc17 	ldw	r3,-16(fp)
    12b0:	00a00034 	movhi	r2,32768
    12b4:	10bfffc4 	addi	r2,r2,-1
    12b8:	18800226 	beq	r3,r2,12c4 <altera_avalon_jtag_uart_ioctl+0x7c>
    12bc:	e0bffc17 	ldw	r2,-16(fp)
    12c0:	00000206 	br	12cc <altera_avalon_jtag_uart_ioctl+0x84>
    12c4:	00a00034 	movhi	r2,32768
    12c8:	10bfff84 	addi	r2,r2,-2
    12cc:	e0fffd17 	ldw	r3,-12(fp)
    12d0:	18800115 	stw	r2,4(r3)
      rc = 0;
    12d4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    12d8:	00000f06 	br	1318 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    12dc:	e0bffd17 	ldw	r2,-12(fp)
    12e0:	10c00117 	ldw	r3,4(r2)
    12e4:	00a00034 	movhi	r2,32768
    12e8:	10bfffc4 	addi	r2,r2,-1
    12ec:	18800c26 	beq	r3,r2,1320 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    12f0:	e0bffd17 	ldw	r2,-12(fp)
    12f4:	10c00917 	ldw	r3,36(r2)
    12f8:	e0bffd17 	ldw	r2,-12(fp)
    12fc:	10800117 	ldw	r2,4(r2)
    1300:	1885803a 	cmpltu	r2,r3,r2
    1304:	10c03fcc 	andi	r3,r2,255
    1308:	e0bfff17 	ldw	r2,-4(fp)
    130c:	10c00015 	stw	r3,0(r2)
      rc = 0;
    1310:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    1314:	00000206 	br	1320 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    1318:	0001883a 	nop
    131c:	00000106 	br	1324 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    1320:	0001883a 	nop

  default:
    break;
  }

  return rc;
    1324:	e0bffb17 	ldw	r2,-20(fp)
}
    1328:	e037883a 	mov	sp,fp
    132c:	df000017 	ldw	fp,0(sp)
    1330:	dec00104 	addi	sp,sp,4
    1334:	f800283a 	ret

00001338 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    1338:	defff304 	addi	sp,sp,-52
    133c:	dfc00c15 	stw	ra,48(sp)
    1340:	df000b15 	stw	fp,44(sp)
    1344:	df000b04 	addi	fp,sp,44
    1348:	e13ffc15 	stw	r4,-16(fp)
    134c:	e17ffd15 	stw	r5,-12(fp)
    1350:	e1bffe15 	stw	r6,-8(fp)
    1354:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    1358:	e0bffd17 	ldw	r2,-12(fp)
    135c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    1360:	00004706 	br	1480 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    1364:	e0bffc17 	ldw	r2,-16(fp)
    1368:	10800a17 	ldw	r2,40(r2)
    136c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    1370:	e0bffc17 	ldw	r2,-16(fp)
    1374:	10800b17 	ldw	r2,44(r2)
    1378:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    137c:	e0fff717 	ldw	r3,-36(fp)
    1380:	e0bff817 	ldw	r2,-32(fp)
    1384:	18800536 	bltu	r3,r2,139c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    1388:	e0fff717 	ldw	r3,-36(fp)
    138c:	e0bff817 	ldw	r2,-32(fp)
    1390:	1885c83a 	sub	r2,r3,r2
    1394:	e0bff615 	stw	r2,-40(fp)
    1398:	00000406 	br	13ac <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    139c:	00c20004 	movi	r3,2048
    13a0:	e0bff817 	ldw	r2,-32(fp)
    13a4:	1885c83a 	sub	r2,r3,r2
    13a8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    13ac:	e0bff617 	ldw	r2,-40(fp)
    13b0:	10001e26 	beq	r2,zero,142c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    13b4:	e0fffe17 	ldw	r3,-8(fp)
    13b8:	e0bff617 	ldw	r2,-40(fp)
    13bc:	1880022e 	bgeu	r3,r2,13c8 <altera_avalon_jtag_uart_read+0x90>
        n = space;
    13c0:	e0bffe17 	ldw	r2,-8(fp)
    13c4:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    13c8:	e0bffc17 	ldw	r2,-16(fp)
    13cc:	10c00e04 	addi	r3,r2,56
    13d0:	e0bff817 	ldw	r2,-32(fp)
    13d4:	1885883a 	add	r2,r3,r2
    13d8:	e1bff617 	ldw	r6,-40(fp)
    13dc:	100b883a 	mov	r5,r2
    13e0:	e13ff517 	ldw	r4,-44(fp)
    13e4:	0002c500 	call	2c50 <memcpy>
      ptr   += n;
    13e8:	e0fff517 	ldw	r3,-44(fp)
    13ec:	e0bff617 	ldw	r2,-40(fp)
    13f0:	1885883a 	add	r2,r3,r2
    13f4:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    13f8:	e0fffe17 	ldw	r3,-8(fp)
    13fc:	e0bff617 	ldw	r2,-40(fp)
    1400:	1885c83a 	sub	r2,r3,r2
    1404:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1408:	e0fff817 	ldw	r3,-32(fp)
    140c:	e0bff617 	ldw	r2,-40(fp)
    1410:	1885883a 	add	r2,r3,r2
    1414:	10c1ffcc 	andi	r3,r2,2047
    1418:	e0bffc17 	ldw	r2,-16(fp)
    141c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    1420:	e0bffe17 	ldw	r2,-8(fp)
    1424:	00bfcf16 	blt	zero,r2,1364 <__alt_data_end+0xfffc1364>
    1428:	00000106 	br	1430 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    142c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    1430:	e0fff517 	ldw	r3,-44(fp)
    1434:	e0bffd17 	ldw	r2,-12(fp)
    1438:	1880141e 	bne	r3,r2,148c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    143c:	e0bfff17 	ldw	r2,-4(fp)
    1440:	1090000c 	andi	r2,r2,16384
    1444:	1000131e 	bne	r2,zero,1494 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    1448:	0001883a 	nop
    144c:	e0bffc17 	ldw	r2,-16(fp)
    1450:	10c00a17 	ldw	r3,40(r2)
    1454:	e0bff717 	ldw	r2,-36(fp)
    1458:	1880051e 	bne	r3,r2,1470 <altera_avalon_jtag_uart_read+0x138>
    145c:	e0bffc17 	ldw	r2,-16(fp)
    1460:	10c00917 	ldw	r3,36(r2)
    1464:	e0bffc17 	ldw	r2,-16(fp)
    1468:	10800117 	ldw	r2,4(r2)
    146c:	18bff736 	bltu	r3,r2,144c <__alt_data_end+0xfffc144c>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    1470:	e0bffc17 	ldw	r2,-16(fp)
    1474:	10c00a17 	ldw	r3,40(r2)
    1478:	e0bff717 	ldw	r2,-36(fp)
    147c:	18800726 	beq	r3,r2,149c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    1480:	e0bffe17 	ldw	r2,-8(fp)
    1484:	00bfb716 	blt	zero,r2,1364 <__alt_data_end+0xfffc1364>
    1488:	00000506 	br	14a0 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    148c:	0001883a 	nop
    1490:	00000306 	br	14a0 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    1494:	0001883a 	nop
    1498:	00000106 	br	14a0 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    149c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    14a0:	e0fff517 	ldw	r3,-44(fp)
    14a4:	e0bffd17 	ldw	r2,-12(fp)
    14a8:	18801826 	beq	r3,r2,150c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    14ac:	0005303a 	rdctl	r2,status
    14b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    14b4:	e0fffb17 	ldw	r3,-20(fp)
    14b8:	00bfff84 	movi	r2,-2
    14bc:	1884703a 	and	r2,r3,r2
    14c0:	1001703a 	wrctl	status,r2
  
  return context;
    14c4:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    14c8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    14cc:	e0bffc17 	ldw	r2,-16(fp)
    14d0:	10800817 	ldw	r2,32(r2)
    14d4:	10c00054 	ori	r3,r2,1
    14d8:	e0bffc17 	ldw	r2,-16(fp)
    14dc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    14e0:	e0bffc17 	ldw	r2,-16(fp)
    14e4:	10800017 	ldw	r2,0(r2)
    14e8:	10800104 	addi	r2,r2,4
    14ec:	1007883a 	mov	r3,r2
    14f0:	e0bffc17 	ldw	r2,-16(fp)
    14f4:	10800817 	ldw	r2,32(r2)
    14f8:	18800035 	stwio	r2,0(r3)
    14fc:	e0bffa17 	ldw	r2,-24(fp)
    1500:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1504:	e0bff917 	ldw	r2,-28(fp)
    1508:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    150c:	e0fff517 	ldw	r3,-44(fp)
    1510:	e0bffd17 	ldw	r2,-12(fp)
    1514:	18800426 	beq	r3,r2,1528 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    1518:	e0fff517 	ldw	r3,-44(fp)
    151c:	e0bffd17 	ldw	r2,-12(fp)
    1520:	1885c83a 	sub	r2,r3,r2
    1524:	00000606 	br	1540 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    1528:	e0bfff17 	ldw	r2,-4(fp)
    152c:	1090000c 	andi	r2,r2,16384
    1530:	10000226 	beq	r2,zero,153c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    1534:	00bffd44 	movi	r2,-11
    1538:	00000106 	br	1540 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    153c:	00bffec4 	movi	r2,-5
}
    1540:	e037883a 	mov	sp,fp
    1544:	dfc00117 	ldw	ra,4(sp)
    1548:	df000017 	ldw	fp,0(sp)
    154c:	dec00204 	addi	sp,sp,8
    1550:	f800283a 	ret

00001554 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    1554:	defff304 	addi	sp,sp,-52
    1558:	dfc00c15 	stw	ra,48(sp)
    155c:	df000b15 	stw	fp,44(sp)
    1560:	df000b04 	addi	fp,sp,44
    1564:	e13ffc15 	stw	r4,-16(fp)
    1568:	e17ffd15 	stw	r5,-12(fp)
    156c:	e1bffe15 	stw	r6,-8(fp)
    1570:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    1574:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    1578:	e0bffd17 	ldw	r2,-12(fp)
    157c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    1580:	00003706 	br	1660 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    1584:	e0bffc17 	ldw	r2,-16(fp)
    1588:	10800c17 	ldw	r2,48(r2)
    158c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    1590:	e0bffc17 	ldw	r2,-16(fp)
    1594:	10800d17 	ldw	r2,52(r2)
    1598:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    159c:	e0fff917 	ldw	r3,-28(fp)
    15a0:	e0bff517 	ldw	r2,-44(fp)
    15a4:	1880062e 	bgeu	r3,r2,15c0 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    15a8:	e0fff517 	ldw	r3,-44(fp)
    15ac:	e0bff917 	ldw	r2,-28(fp)
    15b0:	1885c83a 	sub	r2,r3,r2
    15b4:	10bfffc4 	addi	r2,r2,-1
    15b8:	e0bff615 	stw	r2,-40(fp)
    15bc:	00000b06 	br	15ec <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    15c0:	e0bff517 	ldw	r2,-44(fp)
    15c4:	10000526 	beq	r2,zero,15dc <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    15c8:	00c20004 	movi	r3,2048
    15cc:	e0bff917 	ldw	r2,-28(fp)
    15d0:	1885c83a 	sub	r2,r3,r2
    15d4:	e0bff615 	stw	r2,-40(fp)
    15d8:	00000406 	br	15ec <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    15dc:	00c1ffc4 	movi	r3,2047
    15e0:	e0bff917 	ldw	r2,-28(fp)
    15e4:	1885c83a 	sub	r2,r3,r2
    15e8:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    15ec:	e0bff617 	ldw	r2,-40(fp)
    15f0:	10001e26 	beq	r2,zero,166c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    15f4:	e0fffe17 	ldw	r3,-8(fp)
    15f8:	e0bff617 	ldw	r2,-40(fp)
    15fc:	1880022e 	bgeu	r3,r2,1608 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    1600:	e0bffe17 	ldw	r2,-8(fp)
    1604:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    1608:	e0bffc17 	ldw	r2,-16(fp)
    160c:	10c20e04 	addi	r3,r2,2104
    1610:	e0bff917 	ldw	r2,-28(fp)
    1614:	1885883a 	add	r2,r3,r2
    1618:	e1bff617 	ldw	r6,-40(fp)
    161c:	e17ffd17 	ldw	r5,-12(fp)
    1620:	1009883a 	mov	r4,r2
    1624:	0002c500 	call	2c50 <memcpy>
      ptr   += n;
    1628:	e0fffd17 	ldw	r3,-12(fp)
    162c:	e0bff617 	ldw	r2,-40(fp)
    1630:	1885883a 	add	r2,r3,r2
    1634:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    1638:	e0fffe17 	ldw	r3,-8(fp)
    163c:	e0bff617 	ldw	r2,-40(fp)
    1640:	1885c83a 	sub	r2,r3,r2
    1644:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    1648:	e0fff917 	ldw	r3,-28(fp)
    164c:	e0bff617 	ldw	r2,-40(fp)
    1650:	1885883a 	add	r2,r3,r2
    1654:	10c1ffcc 	andi	r3,r2,2047
    1658:	e0bffc17 	ldw	r2,-16(fp)
    165c:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    1660:	e0bffe17 	ldw	r2,-8(fp)
    1664:	00bfc716 	blt	zero,r2,1584 <__alt_data_end+0xfffc1584>
    1668:	00000106 	br	1670 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    166c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1670:	0005303a 	rdctl	r2,status
    1674:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1678:	e0fffb17 	ldw	r3,-20(fp)
    167c:	00bfff84 	movi	r2,-2
    1680:	1884703a 	and	r2,r3,r2
    1684:	1001703a 	wrctl	status,r2
  
  return context;
    1688:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    168c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    1690:	e0bffc17 	ldw	r2,-16(fp)
    1694:	10800817 	ldw	r2,32(r2)
    1698:	10c00094 	ori	r3,r2,2
    169c:	e0bffc17 	ldw	r2,-16(fp)
    16a0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    16a4:	e0bffc17 	ldw	r2,-16(fp)
    16a8:	10800017 	ldw	r2,0(r2)
    16ac:	10800104 	addi	r2,r2,4
    16b0:	1007883a 	mov	r3,r2
    16b4:	e0bffc17 	ldw	r2,-16(fp)
    16b8:	10800817 	ldw	r2,32(r2)
    16bc:	18800035 	stwio	r2,0(r3)
    16c0:	e0bffa17 	ldw	r2,-24(fp)
    16c4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    16c8:	e0bff817 	ldw	r2,-32(fp)
    16cc:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    16d0:	e0bffe17 	ldw	r2,-8(fp)
    16d4:	0080100e 	bge	zero,r2,1718 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    16d8:	e0bfff17 	ldw	r2,-4(fp)
    16dc:	1090000c 	andi	r2,r2,16384
    16e0:	1000101e 	bne	r2,zero,1724 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    16e4:	0001883a 	nop
    16e8:	e0bffc17 	ldw	r2,-16(fp)
    16ec:	10c00d17 	ldw	r3,52(r2)
    16f0:	e0bff517 	ldw	r2,-44(fp)
    16f4:	1880051e 	bne	r3,r2,170c <altera_avalon_jtag_uart_write+0x1b8>
    16f8:	e0bffc17 	ldw	r2,-16(fp)
    16fc:	10c00917 	ldw	r3,36(r2)
    1700:	e0bffc17 	ldw	r2,-16(fp)
    1704:	10800117 	ldw	r2,4(r2)
    1708:	18bff736 	bltu	r3,r2,16e8 <__alt_data_end+0xfffc16e8>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    170c:	e0bffc17 	ldw	r2,-16(fp)
    1710:	10800917 	ldw	r2,36(r2)
    1714:	1000051e 	bne	r2,zero,172c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    1718:	e0bffe17 	ldw	r2,-8(fp)
    171c:	00bfd016 	blt	zero,r2,1660 <__alt_data_end+0xfffc1660>
    1720:	00000306 	br	1730 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    1724:	0001883a 	nop
    1728:	00000106 	br	1730 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    172c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    1730:	e0fffd17 	ldw	r3,-12(fp)
    1734:	e0bff717 	ldw	r2,-36(fp)
    1738:	18800426 	beq	r3,r2,174c <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    173c:	e0fffd17 	ldw	r3,-12(fp)
    1740:	e0bff717 	ldw	r2,-36(fp)
    1744:	1885c83a 	sub	r2,r3,r2
    1748:	00000606 	br	1764 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    174c:	e0bfff17 	ldw	r2,-4(fp)
    1750:	1090000c 	andi	r2,r2,16384
    1754:	10000226 	beq	r2,zero,1760 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    1758:	00bffd44 	movi	r2,-11
    175c:	00000106 	br	1764 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    1760:	00bffec4 	movi	r2,-5
}
    1764:	e037883a 	mov	sp,fp
    1768:	dfc00117 	ldw	ra,4(sp)
    176c:	df000017 	ldw	fp,0(sp)
    1770:	dec00204 	addi	sp,sp,8
    1774:	f800283a 	ret

00001778 <perf_get_section_time>:

#include "altera_avalon_performance_counter.h"
#include "system.h"

alt_u64 perf_get_section_time (void* hw_base_address, int which_section)
{
    1778:	defff904 	addi	sp,sp,-28
    177c:	df000615 	stw	fp,24(sp)
    1780:	df000604 	addi	fp,sp,24
    1784:	e13ffe15 	stw	r4,-8(fp)
    1788:	e17fff15 	stw	r5,-4(fp)
  alt_u32 lo;
  alt_u32 hi;
  alt_u64 result = 0;
    178c:	e03ffa15 	stw	zero,-24(fp)
    1790:	e03ffb15 	stw	zero,-20(fp)

  PERF_STOP_MEASURING(hw_base_address);
    1794:	000b883a 	mov	r5,zero
    1798:	e13ffe17 	ldw	r4,-8(fp)
    179c:	21400035 	stwio	r5,0(r4)
  lo = IORD(hw_base_address, ( which_section*4   ));
    17a0:	e13fff17 	ldw	r4,-4(fp)
    17a4:	2008913a 	slli	r4,r4,4
    17a8:	200b883a 	mov	r5,r4
    17ac:	e13ffe17 	ldw	r4,-8(fp)
    17b0:	2149883a 	add	r4,r4,r5
    17b4:	21000037 	ldwio	r4,0(r4)
    17b8:	e13ffc15 	stw	r4,-16(fp)
  hi = IORD(hw_base_address, ((which_section*4)+1));
    17bc:	e13fff17 	ldw	r4,-4(fp)
    17c0:	2008913a 	slli	r4,r4,4
    17c4:	21000104 	addi	r4,r4,4
    17c8:	200b883a 	mov	r5,r4
    17cc:	e13ffe17 	ldw	r4,-8(fp)
    17d0:	2149883a 	add	r4,r4,r5
    17d4:	21000037 	ldwio	r4,0(r4)
    17d8:	e13ffd15 	stw	r4,-12(fp)

  result = ((alt_u64)(((alt_u64) hi) << ((alt_u64)32))) | 
    17dc:	e13ffd17 	ldw	r4,-12(fp)
    17e0:	2011883a 	mov	r8,r4
    17e4:	0013883a 	mov	r9,zero
    17e8:	4006983a 	sll	r3,r8,zero
    17ec:	0005883a 	mov	r2,zero
           ((alt_u64)(((alt_u64) lo)                 ))  ;
    17f0:	e13ffc17 	ldw	r4,-16(fp)
    17f4:	200d883a 	mov	r6,r4
    17f8:	000f883a 	mov	r7,zero

  PERF_STOP_MEASURING(hw_base_address);
  lo = IORD(hw_base_address, ( which_section*4   ));
  hi = IORD(hw_base_address, ((which_section*4)+1));

  result = ((alt_u64)(((alt_u64) hi) << ((alt_u64)32))) | 
    17fc:	1188b03a 	or	r4,r2,r6
    1800:	e13ffa15 	stw	r4,-24(fp)
    1804:	19c4b03a 	or	r2,r3,r7
    1808:	e0bffb15 	stw	r2,-20(fp)
           ((alt_u64)(((alt_u64) lo)                 ))  ;
  return result;
    180c:	e0bffa17 	ldw	r2,-24(fp)
    1810:	e0fffb17 	ldw	r3,-20(fp)
    1814:	1009883a 	mov	r4,r2
    1818:	180b883a 	mov	r5,r3
}
    181c:	2005883a 	mov	r2,r4
    1820:	2807883a 	mov	r3,r5
    1824:	e037883a 	mov	sp,fp
    1828:	df000017 	ldw	fp,0(sp)
    182c:	dec00104 	addi	sp,sp,4
    1830:	f800283a 	ret

00001834 <perf_get_total_time>:

alt_u64 perf_get_total_time   (void* hw_base_address)
{
    1834:	defffd04 	addi	sp,sp,-12
    1838:	dfc00215 	stw	ra,8(sp)
    183c:	df000115 	stw	fp,4(sp)
    1840:	df000104 	addi	fp,sp,4
    1844:	e13fff15 	stw	r4,-4(fp)
  return perf_get_section_time (hw_base_address, 0);
    1848:	000b883a 	mov	r5,zero
    184c:	e13fff17 	ldw	r4,-4(fp)
    1850:	00017780 	call	1778 <perf_get_section_time>
    1854:	100b883a 	mov	r5,r2
    1858:	180d883a 	mov	r6,r3
    185c:	2807883a 	mov	r3,r5
    1860:	3009883a 	mov	r4,r6
}
    1864:	1805883a 	mov	r2,r3
    1868:	2007883a 	mov	r3,r4
    186c:	e037883a 	mov	sp,fp
    1870:	dfc00117 	ldw	ra,4(sp)
    1874:	df000017 	ldw	fp,0(sp)
    1878:	dec00204 	addi	sp,sp,8
    187c:	f800283a 	ret

00001880 <perf_get_num_starts>:

alt_u32 perf_get_num_starts   (void* hw_base_address, int which_section)
{
    1880:	defffd04 	addi	sp,sp,-12
    1884:	df000215 	stw	fp,8(sp)
    1888:	df000204 	addi	fp,sp,8
    188c:	e13ffe15 	stw	r4,-8(fp)
    1890:	e17fff15 	stw	r5,-4(fp)
  return IORD(hw_base_address, ((which_section*4)+2));
    1894:	e0bfff17 	ldw	r2,-4(fp)
    1898:	1004913a 	slli	r2,r2,4
    189c:	10800204 	addi	r2,r2,8
    18a0:	1007883a 	mov	r3,r2
    18a4:	e0bffe17 	ldw	r2,-8(fp)
    18a8:	10c5883a 	add	r2,r2,r3
    18ac:	10800037 	ldwio	r2,0(r2)
}
    18b0:	e037883a 	mov	sp,fp
    18b4:	df000017 	ldw	fp,0(sp)
    18b8:	dec00104 	addi	sp,sp,4
    18bc:	f800283a 	ret

000018c0 <alt_get_performance_counter_base>:
 * in Nios II IDE just like is done for the system clock timer and
 * timestamp timer.
 */
void* 
alt_get_performance_counter_base()
{
    18c0:	deffff04 	addi	sp,sp,-4
    18c4:	df000015 	stw	fp,0(sp)
    18c8:	d839883a 	mov	fp,sp
#ifdef PERFORMANCE_COUNTER_0_BASE
    return (void*)PERFORMANCE_COUNTER_0_BASE;
    18cc:	00800134 	movhi	r2,4
    18d0:	10840004 	addi	r2,r2,4096
#else
    return (void*)0;
#endif
}
    18d4:	e037883a 	mov	sp,fp
    18d8:	df000017 	ldw	fp,0(sp)
    18dc:	dec00104 	addi	sp,sp,4
    18e0:	f800283a 	ret

000018e4 <alt_get_cpu_freq>:
 * If the performance counter peripheral is in a different time domain,
 * this won't necessarily be the same frequency of the CPU.
 */
alt_u32 
alt_get_cpu_freq()
{
    18e4:	deffff04 	addi	sp,sp,-4
    18e8:	df000015 	stw	fp,0(sp)
    18ec:	d839883a 	mov	fp,sp
    return ALT_CPU_FREQ;
    18f0:	0080bef4 	movhi	r2,763
    18f4:	10bc2004 	addi	r2,r2,-3968
}
    18f8:	e037883a 	mov	sp,fp
    18fc:	df000017 	ldw	fp,0(sp)
    1900:	dec00104 	addi	sp,sp,4
    1904:	f800283a 	ret

00001908 <perf_print_formatted_report>:

#ifndef SMALL_C_LIB 
int perf_print_formatted_report (void* perf_base, 
                                 alt_u32 clock_freq_hertz,
                                 int num_sections, ...)
{
    1908:	deffe504 	addi	sp,sp,-108
    190c:	dfc01915 	stw	ra,100(sp)
    1910:	df001815 	stw	fp,96(sp)
    1914:	dcc01715 	stw	r19,92(sp)
    1918:	dc801615 	stw	r18,88(sp)
    191c:	dc401515 	stw	r17,84(sp)
    1920:	dc001415 	stw	r16,80(sp)
    1924:	df001804 	addi	fp,sp,96
    1928:	e13ff915 	stw	r4,-28(fp)
    192c:	e17ffa15 	stw	r5,-24(fp)
    1930:	e1bffb15 	stw	r6,-20(fp)
    1934:	e1c00215 	stw	r7,8(fp)
  va_list name_args;
  double total_sec;
  alt_u64 total_clocks;
  alt_u64 section_clocks;
  char* section_name;
  int section_num = 1;
    1938:	00800044 	movi	r2,1
    193c:	e0bfef15 	stw	r2,-68(fp)

  const char* separator = 
    1940:	00800074 	movhi	r2,1
    1944:	10805904 	addi	r2,r2,356
    1948:	e0bff015 	stw	r2,-64(fp)
    "+---------------+-----+-----------+---------------+-----------+\n";
  const char* column_header = 
    194c:	00800074 	movhi	r2,1
    1950:	10806a04 	addi	r2,r2,424
    1954:	e0bff115 	stw	r2,-60(fp)
    "| Section       |  %  | Time (sec)|  Time (clocks)|Occurrences|\n";

  PERF_STOP_MEASURING (perf_base);
    1958:	0007883a 	mov	r3,zero
    195c:	e0bff917 	ldw	r2,-28(fp)
    1960:	10c00035 	stwio	r3,0(r2)

  va_start (name_args, num_sections);
    1964:	e0800204 	addi	r2,fp,8
    1968:	e0bff815 	stw	r2,-32(fp)

  total_clocks = perf_get_total_time (perf_base);
    196c:	e13ff917 	ldw	r4,-28(fp)
    1970:	00018340 	call	1834 <perf_get_total_time>
    1974:	e0bff215 	stw	r2,-56(fp)
    1978:	e0fff315 	stw	r3,-52(fp)
  total_sec    = ((double)total_clocks) / clock_freq_hertz;
    197c:	e13ff217 	ldw	r4,-56(fp)
    1980:	e17ff317 	ldw	r5,-52(fp)
    1984:	000c5d00 	call	c5d0 <__floatundidf>
    1988:	1021883a 	mov	r16,r2
    198c:	1823883a 	mov	r17,r3
    1990:	e13ffa17 	ldw	r4,-24(fp)
    1994:	000f8000 	call	f800 <__floatunsidf>
    1998:	1009883a 	mov	r4,r2
    199c:	180b883a 	mov	r5,r3
    19a0:	200d883a 	mov	r6,r4
    19a4:	280f883a 	mov	r7,r5
    19a8:	8009883a 	mov	r4,r16
    19ac:	880b883a 	mov	r5,r17
    19b0:	000db500 	call	db50 <__divdf3>
    19b4:	1009883a 	mov	r4,r2
    19b8:	180b883a 	mov	r5,r3
    19bc:	e13ff415 	stw	r4,-48(fp)
    19c0:	e17ff515 	stw	r5,-44(fp)

  // Print the total at the top:
  printf ("--Performance Counter Report--\nTotal Time: %3G seconds  (%lld clock-cycles)\n%s%s%s",
    19c4:	e0bff017 	ldw	r2,-64(fp)
    19c8:	d8800315 	stw	r2,12(sp)
    19cc:	e0bff117 	ldw	r2,-60(fp)
    19d0:	d8800215 	stw	r2,8(sp)
    19d4:	e0bff017 	ldw	r2,-64(fp)
    19d8:	d8800115 	stw	r2,4(sp)
    19dc:	e0bff317 	ldw	r2,-52(fp)
    19e0:	d8800015 	stw	r2,0(sp)
    19e4:	e1fff217 	ldw	r7,-56(fp)
    19e8:	e17ff417 	ldw	r5,-48(fp)
    19ec:	e1bff517 	ldw	r6,-44(fp)
    19f0:	01000074 	movhi	r4,1
    19f4:	21007b04 	addi	r4,r4,492
    19f8:	0002dc80 	call	2dc8 <printf>
          total_sec, total_clocks, separator, column_header, separator);

  section_name = va_arg(name_args, char*);
    19fc:	e0bff817 	ldw	r2,-32(fp)
    1a00:	10c00104 	addi	r3,r2,4
    1a04:	e0fff815 	stw	r3,-32(fp)
    1a08:	10800017 	ldw	r2,0(r2)
    1a0c:	e0bfee15 	stw	r2,-72(fp)

  for (section_num = 1; section_num <= num_sections; section_num++)
    1a10:	00800044 	movi	r2,1
    1a14:	e0bfef15 	stw	r2,-68(fp)
    1a18:	00004e06 	br	1b54 <perf_print_formatted_report+0x24c>
    {
      section_clocks = perf_get_section_time (perf_base, section_num);
    1a1c:	e17fef17 	ldw	r5,-68(fp)
    1a20:	e13ff917 	ldw	r4,-28(fp)
    1a24:	00017780 	call	1778 <perf_get_section_time>
    1a28:	e0bff615 	stw	r2,-40(fp)
    1a2c:	e0fff715 	stw	r3,-36(fp)

      printf ("|%-15s|%5.3g|%11.5f|%15lld|%11u|\n%s",
              section_name,
              ((((double) section_clocks)) * 100) / total_clocks,
    1a30:	e13ff617 	ldw	r4,-40(fp)
    1a34:	e17ff717 	ldw	r5,-36(fp)
    1a38:	000c5d00 	call	c5d0 <__floatundidf>
    1a3c:	1011883a 	mov	r8,r2
    1a40:	1813883a 	mov	r9,r3
    1a44:	000d883a 	mov	r6,zero
    1a48:	01d01674 	movhi	r7,16473
    1a4c:	4009883a 	mov	r4,r8
    1a50:	480b883a 	mov	r5,r9
    1a54:	000e6900 	call	e690 <__muldf3>
    1a58:	1009883a 	mov	r4,r2
    1a5c:	180b883a 	mov	r5,r3
    1a60:	2021883a 	mov	r16,r4
    1a64:	2823883a 	mov	r17,r5

  for (section_num = 1; section_num <= num_sections; section_num++)
    {
      section_clocks = perf_get_section_time (perf_base, section_num);

      printf ("|%-15s|%5.3g|%11.5f|%15lld|%11u|\n%s",
    1a68:	e13ff217 	ldw	r4,-56(fp)
    1a6c:	e17ff317 	ldw	r5,-52(fp)
    1a70:	000c5d00 	call	c5d0 <__floatundidf>
    1a74:	1009883a 	mov	r4,r2
    1a78:	180b883a 	mov	r5,r3
    1a7c:	200d883a 	mov	r6,r4
    1a80:	280f883a 	mov	r7,r5
    1a84:	8009883a 	mov	r4,r16
    1a88:	880b883a 	mov	r5,r17
    1a8c:	000db500 	call	db50 <__divdf3>
    1a90:	1009883a 	mov	r4,r2
    1a94:	180b883a 	mov	r5,r3
    1a98:	2025883a 	mov	r18,r4
    1a9c:	2827883a 	mov	r19,r5
              section_name,
              ((((double) section_clocks)) * 100) / total_clocks,
              (((double) section_clocks)) / clock_freq_hertz,
    1aa0:	e13ff617 	ldw	r4,-40(fp)
    1aa4:	e17ff717 	ldw	r5,-36(fp)
    1aa8:	000c5d00 	call	c5d0 <__floatundidf>
    1aac:	1021883a 	mov	r16,r2
    1ab0:	1823883a 	mov	r17,r3

  for (section_num = 1; section_num <= num_sections; section_num++)
    {
      section_clocks = perf_get_section_time (perf_base, section_num);

      printf ("|%-15s|%5.3g|%11.5f|%15lld|%11u|\n%s",
    1ab4:	e13ffa17 	ldw	r4,-24(fp)
    1ab8:	000f8000 	call	f800 <__floatunsidf>
    1abc:	1009883a 	mov	r4,r2
    1ac0:	180b883a 	mov	r5,r3
    1ac4:	200d883a 	mov	r6,r4
    1ac8:	280f883a 	mov	r7,r5
    1acc:	8009883a 	mov	r4,r16
    1ad0:	880b883a 	mov	r5,r17
    1ad4:	000db500 	call	db50 <__divdf3>
    1ad8:	1009883a 	mov	r4,r2
    1adc:	180b883a 	mov	r5,r3
    1ae0:	2021883a 	mov	r16,r4
    1ae4:	2823883a 	mov	r17,r5
              section_name,
              ((((double) section_clocks)) * 100) / total_clocks,
              (((double) section_clocks)) / clock_freq_hertz,
              section_clocks,
              (unsigned int) perf_get_num_starts (perf_base, section_num),
    1ae8:	e17fef17 	ldw	r5,-68(fp)
    1aec:	e13ff917 	ldw	r4,-28(fp)
    1af0:	00018800 	call	1880 <perf_get_num_starts>
    1af4:	1007883a 	mov	r3,r2

  for (section_num = 1; section_num <= num_sections; section_num++)
    {
      section_clocks = perf_get_section_time (perf_base, section_num);

      printf ("|%-15s|%5.3g|%11.5f|%15lld|%11u|\n%s",
    1af8:	e0bff017 	ldw	r2,-64(fp)
    1afc:	d8800515 	stw	r2,20(sp)
    1b00:	d8c00415 	stw	r3,16(sp)
    1b04:	e0bff617 	ldw	r2,-40(fp)
    1b08:	d8800215 	stw	r2,8(sp)
    1b0c:	e0bff717 	ldw	r2,-36(fp)
    1b10:	d8800315 	stw	r2,12(sp)
    1b14:	dc000015 	stw	r16,0(sp)
    1b18:	dc400115 	stw	r17,4(sp)
    1b1c:	900d883a 	mov	r6,r18
    1b20:	980f883a 	mov	r7,r19
    1b24:	e17fee17 	ldw	r5,-72(fp)
    1b28:	01000074 	movhi	r4,1
    1b2c:	21009004 	addi	r4,r4,576
    1b30:	0002dc80 	call	2dc8 <printf>
              section_clocks,
              (unsigned int) perf_get_num_starts (perf_base, section_num),
              separator
              );

      section_name = va_arg(name_args, char*);
    1b34:	e0bff817 	ldw	r2,-32(fp)
    1b38:	10c00104 	addi	r3,r2,4
    1b3c:	e0fff815 	stw	r3,-32(fp)
    1b40:	10800017 	ldw	r2,0(r2)
    1b44:	e0bfee15 	stw	r2,-72(fp)
  printf ("--Performance Counter Report--\nTotal Time: %3G seconds  (%lld clock-cycles)\n%s%s%s",
          total_sec, total_clocks, separator, column_header, separator);

  section_name = va_arg(name_args, char*);

  for (section_num = 1; section_num <= num_sections; section_num++)
    1b48:	e0bfef17 	ldw	r2,-68(fp)
    1b4c:	10800044 	addi	r2,r2,1
    1b50:	e0bfef15 	stw	r2,-68(fp)
    1b54:	e0bfef17 	ldw	r2,-68(fp)
    1b58:	e0fffb17 	ldw	r3,-20(fp)
    1b5c:	18bfaf0e 	bge	r3,r2,1a1c <__alt_data_end+0xfffc1a1c>
      section_name = va_arg(name_args, char*);
    }

  va_end (name_args);

  return 0;
    1b60:	0005883a 	mov	r2,zero
}
    1b64:	e6fffc04 	addi	sp,fp,-16
    1b68:	dfc00517 	ldw	ra,20(sp)
    1b6c:	df000417 	ldw	fp,16(sp)
    1b70:	dcc00317 	ldw	r19,12(sp)
    1b74:	dc800217 	ldw	r18,8(sp)
    1b78:	dc400117 	ldw	r17,4(sp)
    1b7c:	dc000017 	ldw	r16,0(sp)
    1b80:	dec00704 	addi	sp,sp,28
    1b84:	f800283a 	ret

00001b88 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    1b88:	defff504 	addi	sp,sp,-44
    1b8c:	df000a15 	stw	fp,40(sp)
    1b90:	df000a04 	addi	fp,sp,40
    1b94:	e13ffc15 	stw	r4,-16(fp)
    1b98:	e17ffd15 	stw	r5,-12(fp)
    1b9c:	e1bffe15 	stw	r6,-8(fp)
    1ba0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    1ba4:	e03ff615 	stw	zero,-40(fp)
    1ba8:	d0a6d317 	ldw	r2,-25780(gp)
  
  if (alt_ticks_per_second ())
    1bac:	10003c26 	beq	r2,zero,1ca0 <alt_alarm_start+0x118>
  {
    if (alarm)
    1bb0:	e0bffc17 	ldw	r2,-16(fp)
    1bb4:	10003826 	beq	r2,zero,1c98 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
    1bb8:	e0bffc17 	ldw	r2,-16(fp)
    1bbc:	e0fffe17 	ldw	r3,-8(fp)
    1bc0:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    1bc4:	e0bffc17 	ldw	r2,-16(fp)
    1bc8:	e0ffff17 	ldw	r3,-4(fp)
    1bcc:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    1bd0:	0005303a 	rdctl	r2,status
    1bd4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    1bd8:	e0fff917 	ldw	r3,-28(fp)
    1bdc:	00bfff84 	movi	r2,-2
    1be0:	1884703a 	and	r2,r3,r2
    1be4:	1001703a 	wrctl	status,r2
  
  return context;
    1be8:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    1bec:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    1bf0:	d0a6d417 	ldw	r2,-25776(gp)
      
      current_nticks = alt_nticks();
    1bf4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    1bf8:	e0fffd17 	ldw	r3,-12(fp)
    1bfc:	e0bff617 	ldw	r2,-40(fp)
    1c00:	1885883a 	add	r2,r3,r2
    1c04:	10c00044 	addi	r3,r2,1
    1c08:	e0bffc17 	ldw	r2,-16(fp)
    1c0c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    1c10:	e0bffc17 	ldw	r2,-16(fp)
    1c14:	10c00217 	ldw	r3,8(r2)
    1c18:	e0bff617 	ldw	r2,-40(fp)
    1c1c:	1880042e 	bgeu	r3,r2,1c30 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
    1c20:	e0bffc17 	ldw	r2,-16(fp)
    1c24:	00c00044 	movi	r3,1
    1c28:	10c00405 	stb	r3,16(r2)
    1c2c:	00000206 	br	1c38 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
    1c30:	e0bffc17 	ldw	r2,-16(fp)
    1c34:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    1c38:	e0bffc17 	ldw	r2,-16(fp)
    1c3c:	d0e00904 	addi	r3,gp,-32732
    1c40:	e0fffa15 	stw	r3,-24(fp)
    1c44:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    1c48:	e0bffb17 	ldw	r2,-20(fp)
    1c4c:	e0fffa17 	ldw	r3,-24(fp)
    1c50:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    1c54:	e0bffa17 	ldw	r2,-24(fp)
    1c58:	10c00017 	ldw	r3,0(r2)
    1c5c:	e0bffb17 	ldw	r2,-20(fp)
    1c60:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    1c64:	e0bffa17 	ldw	r2,-24(fp)
    1c68:	10800017 	ldw	r2,0(r2)
    1c6c:	e0fffb17 	ldw	r3,-20(fp)
    1c70:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    1c74:	e0bffa17 	ldw	r2,-24(fp)
    1c78:	e0fffb17 	ldw	r3,-20(fp)
    1c7c:	10c00015 	stw	r3,0(r2)
    1c80:	e0bff817 	ldw	r2,-32(fp)
    1c84:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    1c88:	e0bff717 	ldw	r2,-36(fp)
    1c8c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    1c90:	0005883a 	mov	r2,zero
    1c94:	00000306 	br	1ca4 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
    1c98:	00bffa84 	movi	r2,-22
    1c9c:	00000106 	br	1ca4 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
    1ca0:	00bfde84 	movi	r2,-134
  }
}
    1ca4:	e037883a 	mov	sp,fp
    1ca8:	df000017 	ldw	fp,0(sp)
    1cac:	dec00104 	addi	sp,sp,4
    1cb0:	f800283a 	ret

00001cb4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    1cb4:	defffe04 	addi	sp,sp,-8
    1cb8:	dfc00115 	stw	ra,4(sp)
    1cbc:	df000015 	stw	fp,0(sp)
    1cc0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    1cc4:	d0a00717 	ldw	r2,-32740(gp)
    1cc8:	10000326 	beq	r2,zero,1cd8 <alt_get_errno+0x24>
    1ccc:	d0a00717 	ldw	r2,-32740(gp)
    1cd0:	103ee83a 	callr	r2
    1cd4:	00000106 	br	1cdc <alt_get_errno+0x28>
    1cd8:	d0a6d604 	addi	r2,gp,-25768
}
    1cdc:	e037883a 	mov	sp,fp
    1ce0:	dfc00117 	ldw	ra,4(sp)
    1ce4:	df000017 	ldw	fp,0(sp)
    1ce8:	dec00204 	addi	sp,sp,8
    1cec:	f800283a 	ret

00001cf0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    1cf0:	defffb04 	addi	sp,sp,-20
    1cf4:	dfc00415 	stw	ra,16(sp)
    1cf8:	df000315 	stw	fp,12(sp)
    1cfc:	df000304 	addi	fp,sp,12
    1d00:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    1d04:	e0bfff17 	ldw	r2,-4(fp)
    1d08:	10000616 	blt	r2,zero,1d24 <close+0x34>
    1d0c:	e0bfff17 	ldw	r2,-4(fp)
    1d10:	10c00324 	muli	r3,r2,12
    1d14:	00800074 	movhi	r2,1
    1d18:	10857004 	addi	r2,r2,5568
    1d1c:	1885883a 	add	r2,r3,r2
    1d20:	00000106 	br	1d28 <close+0x38>
    1d24:	0005883a 	mov	r2,zero
    1d28:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    1d2c:	e0bffd17 	ldw	r2,-12(fp)
    1d30:	10001926 	beq	r2,zero,1d98 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    1d34:	e0bffd17 	ldw	r2,-12(fp)
    1d38:	10800017 	ldw	r2,0(r2)
    1d3c:	10800417 	ldw	r2,16(r2)
    1d40:	10000626 	beq	r2,zero,1d5c <close+0x6c>
    1d44:	e0bffd17 	ldw	r2,-12(fp)
    1d48:	10800017 	ldw	r2,0(r2)
    1d4c:	10800417 	ldw	r2,16(r2)
    1d50:	e13ffd17 	ldw	r4,-12(fp)
    1d54:	103ee83a 	callr	r2
    1d58:	00000106 	br	1d60 <close+0x70>
    1d5c:	0005883a 	mov	r2,zero
    1d60:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    1d64:	e13fff17 	ldw	r4,-4(fp)
    1d68:	00025f40 	call	25f4 <alt_release_fd>
    if (rval < 0)
    1d6c:	e0bffe17 	ldw	r2,-8(fp)
    1d70:	1000070e 	bge	r2,zero,1d90 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    1d74:	0001cb40 	call	1cb4 <alt_get_errno>
    1d78:	1007883a 	mov	r3,r2
    1d7c:	e0bffe17 	ldw	r2,-8(fp)
    1d80:	0085c83a 	sub	r2,zero,r2
    1d84:	18800015 	stw	r2,0(r3)
      return -1;
    1d88:	00bfffc4 	movi	r2,-1
    1d8c:	00000706 	br	1dac <close+0xbc>
    }
    return 0;
    1d90:	0005883a 	mov	r2,zero
    1d94:	00000506 	br	1dac <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    1d98:	0001cb40 	call	1cb4 <alt_get_errno>
    1d9c:	1007883a 	mov	r3,r2
    1da0:	00801444 	movi	r2,81
    1da4:	18800015 	stw	r2,0(r3)
    return -1;
    1da8:	00bfffc4 	movi	r2,-1
  }
}
    1dac:	e037883a 	mov	sp,fp
    1db0:	dfc00117 	ldw	ra,4(sp)
    1db4:	df000017 	ldw	fp,0(sp)
    1db8:	dec00204 	addi	sp,sp,8
    1dbc:	f800283a 	ret

00001dc0 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    1dc0:	defffc04 	addi	sp,sp,-16
    1dc4:	df000315 	stw	fp,12(sp)
    1dc8:	df000304 	addi	fp,sp,12
    1dcc:	e13ffd15 	stw	r4,-12(fp)
    1dd0:	e17ffe15 	stw	r5,-8(fp)
    1dd4:	e1bfff15 	stw	r6,-4(fp)
  return len;
    1dd8:	e0bfff17 	ldw	r2,-4(fp)
}
    1ddc:	e037883a 	mov	sp,fp
    1de0:	df000017 	ldw	fp,0(sp)
    1de4:	dec00104 	addi	sp,sp,4
    1de8:	f800283a 	ret

00001dec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    1dec:	defffe04 	addi	sp,sp,-8
    1df0:	dfc00115 	stw	ra,4(sp)
    1df4:	df000015 	stw	fp,0(sp)
    1df8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    1dfc:	d0a00717 	ldw	r2,-32740(gp)
    1e00:	10000326 	beq	r2,zero,1e10 <alt_get_errno+0x24>
    1e04:	d0a00717 	ldw	r2,-32740(gp)
    1e08:	103ee83a 	callr	r2
    1e0c:	00000106 	br	1e14 <alt_get_errno+0x28>
    1e10:	d0a6d604 	addi	r2,gp,-25768
}
    1e14:	e037883a 	mov	sp,fp
    1e18:	dfc00117 	ldw	ra,4(sp)
    1e1c:	df000017 	ldw	fp,0(sp)
    1e20:	dec00204 	addi	sp,sp,8
    1e24:	f800283a 	ret

00001e28 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    1e28:	defffa04 	addi	sp,sp,-24
    1e2c:	dfc00515 	stw	ra,20(sp)
    1e30:	df000415 	stw	fp,16(sp)
    1e34:	df000404 	addi	fp,sp,16
    1e38:	e13ffe15 	stw	r4,-8(fp)
    1e3c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    1e40:	e0bffe17 	ldw	r2,-8(fp)
    1e44:	10000326 	beq	r2,zero,1e54 <alt_dev_llist_insert+0x2c>
    1e48:	e0bffe17 	ldw	r2,-8(fp)
    1e4c:	10800217 	ldw	r2,8(r2)
    1e50:	1000061e 	bne	r2,zero,1e6c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    1e54:	0001dec0 	call	1dec <alt_get_errno>
    1e58:	1007883a 	mov	r3,r2
    1e5c:	00800584 	movi	r2,22
    1e60:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    1e64:	00bffa84 	movi	r2,-22
    1e68:	00001306 	br	1eb8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    1e6c:	e0bffe17 	ldw	r2,-8(fp)
    1e70:	e0ffff17 	ldw	r3,-4(fp)
    1e74:	e0fffc15 	stw	r3,-16(fp)
    1e78:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    1e7c:	e0bffd17 	ldw	r2,-12(fp)
    1e80:	e0fffc17 	ldw	r3,-16(fp)
    1e84:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    1e88:	e0bffc17 	ldw	r2,-16(fp)
    1e8c:	10c00017 	ldw	r3,0(r2)
    1e90:	e0bffd17 	ldw	r2,-12(fp)
    1e94:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    1e98:	e0bffc17 	ldw	r2,-16(fp)
    1e9c:	10800017 	ldw	r2,0(r2)
    1ea0:	e0fffd17 	ldw	r3,-12(fp)
    1ea4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    1ea8:	e0bffc17 	ldw	r2,-16(fp)
    1eac:	e0fffd17 	ldw	r3,-12(fp)
    1eb0:	10c00015 	stw	r3,0(r2)

  return 0;  
    1eb4:	0005883a 	mov	r2,zero
}
    1eb8:	e037883a 	mov	sp,fp
    1ebc:	dfc00117 	ldw	ra,4(sp)
    1ec0:	df000017 	ldw	fp,0(sp)
    1ec4:	dec00204 	addi	sp,sp,8
    1ec8:	f800283a 	ret

00001ecc <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    1ecc:	defffd04 	addi	sp,sp,-12
    1ed0:	dfc00215 	stw	ra,8(sp)
    1ed4:	df000115 	stw	fp,4(sp)
    1ed8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    1edc:	00800074 	movhi	r2,1
    1ee0:	10bfdf04 	addi	r2,r2,-132
    1ee4:	e0bfff15 	stw	r2,-4(fp)
    1ee8:	00000606 	br	1f04 <_do_ctors+0x38>
        (*ctor) (); 
    1eec:	e0bfff17 	ldw	r2,-4(fp)
    1ef0:	10800017 	ldw	r2,0(r2)
    1ef4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    1ef8:	e0bfff17 	ldw	r2,-4(fp)
    1efc:	10bfff04 	addi	r2,r2,-4
    1f00:	e0bfff15 	stw	r2,-4(fp)
    1f04:	e0ffff17 	ldw	r3,-4(fp)
    1f08:	00800074 	movhi	r2,1
    1f0c:	10bfe004 	addi	r2,r2,-128
    1f10:	18bff62e 	bgeu	r3,r2,1eec <__alt_data_end+0xfffc1eec>
        (*ctor) (); 
}
    1f14:	0001883a 	nop
    1f18:	e037883a 	mov	sp,fp
    1f1c:	dfc00117 	ldw	ra,4(sp)
    1f20:	df000017 	ldw	fp,0(sp)
    1f24:	dec00204 	addi	sp,sp,8
    1f28:	f800283a 	ret

00001f2c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    1f2c:	defffd04 	addi	sp,sp,-12
    1f30:	dfc00215 	stw	ra,8(sp)
    1f34:	df000115 	stw	fp,4(sp)
    1f38:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    1f3c:	00800074 	movhi	r2,1
    1f40:	10bfdf04 	addi	r2,r2,-132
    1f44:	e0bfff15 	stw	r2,-4(fp)
    1f48:	00000606 	br	1f64 <_do_dtors+0x38>
        (*dtor) (); 
    1f4c:	e0bfff17 	ldw	r2,-4(fp)
    1f50:	10800017 	ldw	r2,0(r2)
    1f54:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    1f58:	e0bfff17 	ldw	r2,-4(fp)
    1f5c:	10bfff04 	addi	r2,r2,-4
    1f60:	e0bfff15 	stw	r2,-4(fp)
    1f64:	e0ffff17 	ldw	r3,-4(fp)
    1f68:	00800074 	movhi	r2,1
    1f6c:	10bfe004 	addi	r2,r2,-128
    1f70:	18bff62e 	bgeu	r3,r2,1f4c <__alt_data_end+0xfffc1f4c>
        (*dtor) (); 
}
    1f74:	0001883a 	nop
    1f78:	e037883a 	mov	sp,fp
    1f7c:	dfc00117 	ldw	ra,4(sp)
    1f80:	df000017 	ldw	fp,0(sp)
    1f84:	dec00204 	addi	sp,sp,8
    1f88:	f800283a 	ret

00001f8c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    1f8c:	defffe04 	addi	sp,sp,-8
    1f90:	dfc00115 	stw	ra,4(sp)
    1f94:	df000015 	stw	fp,0(sp)
    1f98:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    1f9c:	01440004 	movi	r5,4096
    1fa0:	0009883a 	mov	r4,zero
    1fa4:	0002a5c0 	call	2a5c <alt_icache_flush>
#endif
}
    1fa8:	0001883a 	nop
    1fac:	e037883a 	mov	sp,fp
    1fb0:	dfc00117 	ldw	ra,4(sp)
    1fb4:	df000017 	ldw	fp,0(sp)
    1fb8:	dec00204 	addi	sp,sp,8
    1fbc:	f800283a 	ret

00001fc0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    1fc0:	defff904 	addi	sp,sp,-28
    1fc4:	dfc00615 	stw	ra,24(sp)
    1fc8:	df000515 	stw	fp,20(sp)
    1fcc:	df000504 	addi	fp,sp,20
    1fd0:	e13ffc15 	stw	r4,-16(fp)
    1fd4:	e17ffd15 	stw	r5,-12(fp)
    1fd8:	e1bffe15 	stw	r6,-8(fp)
    1fdc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    1fe0:	e0800217 	ldw	r2,8(fp)
    1fe4:	d8800015 	stw	r2,0(sp)
    1fe8:	e1ffff17 	ldw	r7,-4(fp)
    1fec:	e1bffe17 	ldw	r6,-8(fp)
    1ff0:	e17ffd17 	ldw	r5,-12(fp)
    1ff4:	e13ffc17 	ldw	r4,-16(fp)
    1ff8:	00021700 	call	2170 <alt_iic_isr_register>
}  
    1ffc:	e037883a 	mov	sp,fp
    2000:	dfc00117 	ldw	ra,4(sp)
    2004:	df000017 	ldw	fp,0(sp)
    2008:	dec00204 	addi	sp,sp,8
    200c:	f800283a 	ret

00002010 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    2010:	defff904 	addi	sp,sp,-28
    2014:	df000615 	stw	fp,24(sp)
    2018:	df000604 	addi	fp,sp,24
    201c:	e13ffe15 	stw	r4,-8(fp)
    2020:	e17fff15 	stw	r5,-4(fp)
    2024:	e0bfff17 	ldw	r2,-4(fp)
    2028:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    202c:	0005303a 	rdctl	r2,status
    2030:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2034:	e0fffb17 	ldw	r3,-20(fp)
    2038:	00bfff84 	movi	r2,-2
    203c:	1884703a 	and	r2,r3,r2
    2040:	1001703a 	wrctl	status,r2
  
  return context;
    2044:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    2048:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    204c:	00c00044 	movi	r3,1
    2050:	e0bffa17 	ldw	r2,-24(fp)
    2054:	1884983a 	sll	r2,r3,r2
    2058:	1007883a 	mov	r3,r2
    205c:	d0a6d217 	ldw	r2,-25784(gp)
    2060:	1884b03a 	or	r2,r3,r2
    2064:	d0a6d215 	stw	r2,-25784(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    2068:	d0a6d217 	ldw	r2,-25784(gp)
    206c:	100170fa 	wrctl	ienable,r2
    2070:	e0bffc17 	ldw	r2,-16(fp)
    2074:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2078:	e0bffd17 	ldw	r2,-12(fp)
    207c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    2080:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    2084:	0001883a 	nop
}
    2088:	e037883a 	mov	sp,fp
    208c:	df000017 	ldw	fp,0(sp)
    2090:	dec00104 	addi	sp,sp,4
    2094:	f800283a 	ret

00002098 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    2098:	defff904 	addi	sp,sp,-28
    209c:	df000615 	stw	fp,24(sp)
    20a0:	df000604 	addi	fp,sp,24
    20a4:	e13ffe15 	stw	r4,-8(fp)
    20a8:	e17fff15 	stw	r5,-4(fp)
    20ac:	e0bfff17 	ldw	r2,-4(fp)
    20b0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    20b4:	0005303a 	rdctl	r2,status
    20b8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    20bc:	e0fffb17 	ldw	r3,-20(fp)
    20c0:	00bfff84 	movi	r2,-2
    20c4:	1884703a 	and	r2,r3,r2
    20c8:	1001703a 	wrctl	status,r2
  
  return context;
    20cc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    20d0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    20d4:	00c00044 	movi	r3,1
    20d8:	e0bffa17 	ldw	r2,-24(fp)
    20dc:	1884983a 	sll	r2,r3,r2
    20e0:	0084303a 	nor	r2,zero,r2
    20e4:	1007883a 	mov	r3,r2
    20e8:	d0a6d217 	ldw	r2,-25784(gp)
    20ec:	1884703a 	and	r2,r3,r2
    20f0:	d0a6d215 	stw	r2,-25784(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    20f4:	d0a6d217 	ldw	r2,-25784(gp)
    20f8:	100170fa 	wrctl	ienable,r2
    20fc:	e0bffc17 	ldw	r2,-16(fp)
    2100:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2104:	e0bffd17 	ldw	r2,-12(fp)
    2108:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    210c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    2110:	0001883a 	nop
}
    2114:	e037883a 	mov	sp,fp
    2118:	df000017 	ldw	fp,0(sp)
    211c:	dec00104 	addi	sp,sp,4
    2120:	f800283a 	ret

00002124 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    2124:	defffc04 	addi	sp,sp,-16
    2128:	df000315 	stw	fp,12(sp)
    212c:	df000304 	addi	fp,sp,12
    2130:	e13ffe15 	stw	r4,-8(fp)
    2134:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    2138:	000530fa 	rdctl	r2,ienable
    213c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    2140:	00c00044 	movi	r3,1
    2144:	e0bfff17 	ldw	r2,-4(fp)
    2148:	1884983a 	sll	r2,r3,r2
    214c:	1007883a 	mov	r3,r2
    2150:	e0bffd17 	ldw	r2,-12(fp)
    2154:	1884703a 	and	r2,r3,r2
    2158:	1004c03a 	cmpne	r2,r2,zero
    215c:	10803fcc 	andi	r2,r2,255
}
    2160:	e037883a 	mov	sp,fp
    2164:	df000017 	ldw	fp,0(sp)
    2168:	dec00104 	addi	sp,sp,4
    216c:	f800283a 	ret

00002170 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    2170:	defff504 	addi	sp,sp,-44
    2174:	dfc00a15 	stw	ra,40(sp)
    2178:	df000915 	stw	fp,36(sp)
    217c:	df000904 	addi	fp,sp,36
    2180:	e13ffc15 	stw	r4,-16(fp)
    2184:	e17ffd15 	stw	r5,-12(fp)
    2188:	e1bffe15 	stw	r6,-8(fp)
    218c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    2190:	00bffa84 	movi	r2,-22
    2194:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    2198:	e0bffd17 	ldw	r2,-12(fp)
    219c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    21a0:	e0bff817 	ldw	r2,-32(fp)
    21a4:	10800808 	cmpgei	r2,r2,32
    21a8:	1000271e 	bne	r2,zero,2248 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    21ac:	0005303a 	rdctl	r2,status
    21b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    21b4:	e0fffb17 	ldw	r3,-20(fp)
    21b8:	00bfff84 	movi	r2,-2
    21bc:	1884703a 	and	r2,r3,r2
    21c0:	1001703a 	wrctl	status,r2
  
  return context;
    21c4:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    21c8:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    21cc:	00800074 	movhi	r2,1
    21d0:	1096b004 	addi	r2,r2,23232
    21d4:	e0fff817 	ldw	r3,-32(fp)
    21d8:	180690fa 	slli	r3,r3,3
    21dc:	10c5883a 	add	r2,r2,r3
    21e0:	e0fffe17 	ldw	r3,-8(fp)
    21e4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    21e8:	00800074 	movhi	r2,1
    21ec:	1096b004 	addi	r2,r2,23232
    21f0:	e0fff817 	ldw	r3,-32(fp)
    21f4:	180690fa 	slli	r3,r3,3
    21f8:	10c5883a 	add	r2,r2,r3
    21fc:	10800104 	addi	r2,r2,4
    2200:	e0ffff17 	ldw	r3,-4(fp)
    2204:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    2208:	e0bffe17 	ldw	r2,-8(fp)
    220c:	10000526 	beq	r2,zero,2224 <alt_iic_isr_register+0xb4>
    2210:	e0bff817 	ldw	r2,-32(fp)
    2214:	100b883a 	mov	r5,r2
    2218:	e13ffc17 	ldw	r4,-16(fp)
    221c:	00020100 	call	2010 <alt_ic_irq_enable>
    2220:	00000406 	br	2234 <alt_iic_isr_register+0xc4>
    2224:	e0bff817 	ldw	r2,-32(fp)
    2228:	100b883a 	mov	r5,r2
    222c:	e13ffc17 	ldw	r4,-16(fp)
    2230:	00020980 	call	2098 <alt_ic_irq_disable>
    2234:	e0bff715 	stw	r2,-36(fp)
    2238:	e0bffa17 	ldw	r2,-24(fp)
    223c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    2240:	e0bff917 	ldw	r2,-28(fp)
    2244:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    2248:	e0bff717 	ldw	r2,-36(fp)
}
    224c:	e037883a 	mov	sp,fp
    2250:	dfc00117 	ldw	ra,4(sp)
    2254:	df000017 	ldw	fp,0(sp)
    2258:	dec00204 	addi	sp,sp,8
    225c:	f800283a 	ret

00002260 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    2260:	defff904 	addi	sp,sp,-28
    2264:	dfc00615 	stw	ra,24(sp)
    2268:	df000515 	stw	fp,20(sp)
    226c:	df000504 	addi	fp,sp,20
    2270:	e13ffc15 	stw	r4,-16(fp)
    2274:	e17ffd15 	stw	r5,-12(fp)
    2278:	e1bffe15 	stw	r6,-8(fp)
    227c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    2280:	e1bfff17 	ldw	r6,-4(fp)
    2284:	e17ffe17 	ldw	r5,-8(fp)
    2288:	e13ffd17 	ldw	r4,-12(fp)
    228c:	00024a00 	call	24a0 <open>
    2290:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    2294:	e0bffb17 	ldw	r2,-20(fp)
    2298:	10001c16 	blt	r2,zero,230c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
    229c:	00800074 	movhi	r2,1
    22a0:	10857004 	addi	r2,r2,5568
    22a4:	e0fffb17 	ldw	r3,-20(fp)
    22a8:	18c00324 	muli	r3,r3,12
    22ac:	10c5883a 	add	r2,r2,r3
    22b0:	10c00017 	ldw	r3,0(r2)
    22b4:	e0bffc17 	ldw	r2,-16(fp)
    22b8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    22bc:	00800074 	movhi	r2,1
    22c0:	10857004 	addi	r2,r2,5568
    22c4:	e0fffb17 	ldw	r3,-20(fp)
    22c8:	18c00324 	muli	r3,r3,12
    22cc:	10c5883a 	add	r2,r2,r3
    22d0:	10800104 	addi	r2,r2,4
    22d4:	10c00017 	ldw	r3,0(r2)
    22d8:	e0bffc17 	ldw	r2,-16(fp)
    22dc:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    22e0:	00800074 	movhi	r2,1
    22e4:	10857004 	addi	r2,r2,5568
    22e8:	e0fffb17 	ldw	r3,-20(fp)
    22ec:	18c00324 	muli	r3,r3,12
    22f0:	10c5883a 	add	r2,r2,r3
    22f4:	10800204 	addi	r2,r2,8
    22f8:	10c00017 	ldw	r3,0(r2)
    22fc:	e0bffc17 	ldw	r2,-16(fp)
    2300:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    2304:	e13ffb17 	ldw	r4,-20(fp)
    2308:	00025f40 	call	25f4 <alt_release_fd>
  }
} 
    230c:	0001883a 	nop
    2310:	e037883a 	mov	sp,fp
    2314:	dfc00117 	ldw	ra,4(sp)
    2318:	df000017 	ldw	fp,0(sp)
    231c:	dec00204 	addi	sp,sp,8
    2320:	f800283a 	ret

00002324 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    2324:	defffb04 	addi	sp,sp,-20
    2328:	dfc00415 	stw	ra,16(sp)
    232c:	df000315 	stw	fp,12(sp)
    2330:	df000304 	addi	fp,sp,12
    2334:	e13ffd15 	stw	r4,-12(fp)
    2338:	e17ffe15 	stw	r5,-8(fp)
    233c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    2340:	01c07fc4 	movi	r7,511
    2344:	01800044 	movi	r6,1
    2348:	e17ffd17 	ldw	r5,-12(fp)
    234c:	01000074 	movhi	r4,1
    2350:	21057304 	addi	r4,r4,5580
    2354:	00022600 	call	2260 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    2358:	01c07fc4 	movi	r7,511
    235c:	000d883a 	mov	r6,zero
    2360:	e17ffe17 	ldw	r5,-8(fp)
    2364:	01000074 	movhi	r4,1
    2368:	21057004 	addi	r4,r4,5568
    236c:	00022600 	call	2260 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    2370:	01c07fc4 	movi	r7,511
    2374:	01800044 	movi	r6,1
    2378:	e17fff17 	ldw	r5,-4(fp)
    237c:	01000074 	movhi	r4,1
    2380:	21057604 	addi	r4,r4,5592
    2384:	00022600 	call	2260 <alt_open_fd>
}  
    2388:	0001883a 	nop
    238c:	e037883a 	mov	sp,fp
    2390:	dfc00117 	ldw	ra,4(sp)
    2394:	df000017 	ldw	fp,0(sp)
    2398:	dec00204 	addi	sp,sp,8
    239c:	f800283a 	ret

000023a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    23a0:	defffe04 	addi	sp,sp,-8
    23a4:	dfc00115 	stw	ra,4(sp)
    23a8:	df000015 	stw	fp,0(sp)
    23ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    23b0:	d0a00717 	ldw	r2,-32740(gp)
    23b4:	10000326 	beq	r2,zero,23c4 <alt_get_errno+0x24>
    23b8:	d0a00717 	ldw	r2,-32740(gp)
    23bc:	103ee83a 	callr	r2
    23c0:	00000106 	br	23c8 <alt_get_errno+0x28>
    23c4:	d0a6d604 	addi	r2,gp,-25768
}
    23c8:	e037883a 	mov	sp,fp
    23cc:	dfc00117 	ldw	ra,4(sp)
    23d0:	df000017 	ldw	fp,0(sp)
    23d4:	dec00204 	addi	sp,sp,8
    23d8:	f800283a 	ret

000023dc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    23dc:	defffd04 	addi	sp,sp,-12
    23e0:	df000215 	stw	fp,8(sp)
    23e4:	df000204 	addi	fp,sp,8
    23e8:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    23ec:	e0bfff17 	ldw	r2,-4(fp)
    23f0:	10800217 	ldw	r2,8(r2)
    23f4:	10d00034 	orhi	r3,r2,16384
    23f8:	e0bfff17 	ldw	r2,-4(fp)
    23fc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    2400:	e03ffe15 	stw	zero,-8(fp)
    2404:	00001d06 	br	247c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    2408:	00800074 	movhi	r2,1
    240c:	10857004 	addi	r2,r2,5568
    2410:	e0fffe17 	ldw	r3,-8(fp)
    2414:	18c00324 	muli	r3,r3,12
    2418:	10c5883a 	add	r2,r2,r3
    241c:	10c00017 	ldw	r3,0(r2)
    2420:	e0bfff17 	ldw	r2,-4(fp)
    2424:	10800017 	ldw	r2,0(r2)
    2428:	1880111e 	bne	r3,r2,2470 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    242c:	00800074 	movhi	r2,1
    2430:	10857004 	addi	r2,r2,5568
    2434:	e0fffe17 	ldw	r3,-8(fp)
    2438:	18c00324 	muli	r3,r3,12
    243c:	10c5883a 	add	r2,r2,r3
    2440:	10800204 	addi	r2,r2,8
    2444:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    2448:	1000090e 	bge	r2,zero,2470 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    244c:	e0bffe17 	ldw	r2,-8(fp)
    2450:	10c00324 	muli	r3,r2,12
    2454:	00800074 	movhi	r2,1
    2458:	10857004 	addi	r2,r2,5568
    245c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    2460:	e0bfff17 	ldw	r2,-4(fp)
    2464:	18800226 	beq	r3,r2,2470 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    2468:	00bffcc4 	movi	r2,-13
    246c:	00000806 	br	2490 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    2470:	e0bffe17 	ldw	r2,-8(fp)
    2474:	10800044 	addi	r2,r2,1
    2478:	e0bffe15 	stw	r2,-8(fp)
    247c:	d0a00617 	ldw	r2,-32744(gp)
    2480:	1007883a 	mov	r3,r2
    2484:	e0bffe17 	ldw	r2,-8(fp)
    2488:	18bfdf2e 	bgeu	r3,r2,2408 <__alt_data_end+0xfffc2408>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    248c:	0005883a 	mov	r2,zero
}
    2490:	e037883a 	mov	sp,fp
    2494:	df000017 	ldw	fp,0(sp)
    2498:	dec00104 	addi	sp,sp,4
    249c:	f800283a 	ret

000024a0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    24a0:	defff604 	addi	sp,sp,-40
    24a4:	dfc00915 	stw	ra,36(sp)
    24a8:	df000815 	stw	fp,32(sp)
    24ac:	df000804 	addi	fp,sp,32
    24b0:	e13ffd15 	stw	r4,-12(fp)
    24b4:	e17ffe15 	stw	r5,-8(fp)
    24b8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    24bc:	00bfffc4 	movi	r2,-1
    24c0:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    24c4:	00bffb44 	movi	r2,-19
    24c8:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    24cc:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    24d0:	d1600404 	addi	r5,gp,-32752
    24d4:	e13ffd17 	ldw	r4,-12(fp)
    24d8:	00028200 	call	2820 <alt_find_dev>
    24dc:	e0bff815 	stw	r2,-32(fp)
    24e0:	e0bff817 	ldw	r2,-32(fp)
    24e4:	1000051e 	bne	r2,zero,24fc <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    24e8:	e13ffd17 	ldw	r4,-12(fp)
    24ec:	00028b00 	call	28b0 <alt_find_file>
    24f0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    24f4:	00800044 	movi	r2,1
    24f8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    24fc:	e0bff817 	ldw	r2,-32(fp)
    2500:	10002926 	beq	r2,zero,25a8 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
    2504:	e13ff817 	ldw	r4,-32(fp)
    2508:	00029b80 	call	29b8 <alt_get_fd>
    250c:	e0bff915 	stw	r2,-28(fp)
    2510:	e0bff917 	ldw	r2,-28(fp)
    2514:	1000030e 	bge	r2,zero,2524 <open+0x84>
    {
      status = index;
    2518:	e0bff917 	ldw	r2,-28(fp)
    251c:	e0bffa15 	stw	r2,-24(fp)
    2520:	00002306 	br	25b0 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
    2524:	e0bff917 	ldw	r2,-28(fp)
    2528:	10c00324 	muli	r3,r2,12
    252c:	00800074 	movhi	r2,1
    2530:	10857004 	addi	r2,r2,5568
    2534:	1885883a 	add	r2,r3,r2
    2538:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    253c:	e0fffe17 	ldw	r3,-8(fp)
    2540:	00900034 	movhi	r2,16384
    2544:	10bfffc4 	addi	r2,r2,-1
    2548:	1886703a 	and	r3,r3,r2
    254c:	e0bffc17 	ldw	r2,-16(fp)
    2550:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    2554:	e0bffb17 	ldw	r2,-20(fp)
    2558:	1000051e 	bne	r2,zero,2570 <open+0xd0>
    255c:	e13ffc17 	ldw	r4,-16(fp)
    2560:	00023dc0 	call	23dc <alt_file_locked>
    2564:	e0bffa15 	stw	r2,-24(fp)
    2568:	e0bffa17 	ldw	r2,-24(fp)
    256c:	10001016 	blt	r2,zero,25b0 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    2570:	e0bff817 	ldw	r2,-32(fp)
    2574:	10800317 	ldw	r2,12(r2)
    2578:	10000826 	beq	r2,zero,259c <open+0xfc>
    257c:	e0bff817 	ldw	r2,-32(fp)
    2580:	10800317 	ldw	r2,12(r2)
    2584:	e1ffff17 	ldw	r7,-4(fp)
    2588:	e1bffe17 	ldw	r6,-8(fp)
    258c:	e17ffd17 	ldw	r5,-12(fp)
    2590:	e13ffc17 	ldw	r4,-16(fp)
    2594:	103ee83a 	callr	r2
    2598:	00000106 	br	25a0 <open+0x100>
    259c:	0005883a 	mov	r2,zero
    25a0:	e0bffa15 	stw	r2,-24(fp)
    25a4:	00000206 	br	25b0 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
    25a8:	00bffb44 	movi	r2,-19
    25ac:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    25b0:	e0bffa17 	ldw	r2,-24(fp)
    25b4:	1000090e 	bge	r2,zero,25dc <open+0x13c>
  {
    alt_release_fd (index);  
    25b8:	e13ff917 	ldw	r4,-28(fp)
    25bc:	00025f40 	call	25f4 <alt_release_fd>
    ALT_ERRNO = -status;
    25c0:	00023a00 	call	23a0 <alt_get_errno>
    25c4:	1007883a 	mov	r3,r2
    25c8:	e0bffa17 	ldw	r2,-24(fp)
    25cc:	0085c83a 	sub	r2,zero,r2
    25d0:	18800015 	stw	r2,0(r3)
    return -1;
    25d4:	00bfffc4 	movi	r2,-1
    25d8:	00000106 	br	25e0 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
    25dc:	e0bff917 	ldw	r2,-28(fp)
}
    25e0:	e037883a 	mov	sp,fp
    25e4:	dfc00117 	ldw	ra,4(sp)
    25e8:	df000017 	ldw	fp,0(sp)
    25ec:	dec00204 	addi	sp,sp,8
    25f0:	f800283a 	ret

000025f4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    25f4:	defffe04 	addi	sp,sp,-8
    25f8:	df000115 	stw	fp,4(sp)
    25fc:	df000104 	addi	fp,sp,4
    2600:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    2604:	e0bfff17 	ldw	r2,-4(fp)
    2608:	108000d0 	cmplti	r2,r2,3
    260c:	10000d1e 	bne	r2,zero,2644 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    2610:	00800074 	movhi	r2,1
    2614:	10857004 	addi	r2,r2,5568
    2618:	e0ffff17 	ldw	r3,-4(fp)
    261c:	18c00324 	muli	r3,r3,12
    2620:	10c5883a 	add	r2,r2,r3
    2624:	10800204 	addi	r2,r2,8
    2628:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    262c:	00800074 	movhi	r2,1
    2630:	10857004 	addi	r2,r2,5568
    2634:	e0ffff17 	ldw	r3,-4(fp)
    2638:	18c00324 	muli	r3,r3,12
    263c:	10c5883a 	add	r2,r2,r3
    2640:	10000015 	stw	zero,0(r2)
  }
}
    2644:	0001883a 	nop
    2648:	e037883a 	mov	sp,fp
    264c:	df000017 	ldw	fp,0(sp)
    2650:	dec00104 	addi	sp,sp,4
    2654:	f800283a 	ret

00002658 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    2658:	defffa04 	addi	sp,sp,-24
    265c:	df000515 	stw	fp,20(sp)
    2660:	df000504 	addi	fp,sp,20
    2664:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    2668:	0005303a 	rdctl	r2,status
    266c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    2670:	e0fffc17 	ldw	r3,-16(fp)
    2674:	00bfff84 	movi	r2,-2
    2678:	1884703a 	and	r2,r3,r2
    267c:	1001703a 	wrctl	status,r2
  
  return context;
    2680:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    2684:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    2688:	e0bfff17 	ldw	r2,-4(fp)
    268c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    2690:	e0bffd17 	ldw	r2,-12(fp)
    2694:	10800017 	ldw	r2,0(r2)
    2698:	e0fffd17 	ldw	r3,-12(fp)
    269c:	18c00117 	ldw	r3,4(r3)
    26a0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    26a4:	e0bffd17 	ldw	r2,-12(fp)
    26a8:	10800117 	ldw	r2,4(r2)
    26ac:	e0fffd17 	ldw	r3,-12(fp)
    26b0:	18c00017 	ldw	r3,0(r3)
    26b4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    26b8:	e0bffd17 	ldw	r2,-12(fp)
    26bc:	e0fffd17 	ldw	r3,-12(fp)
    26c0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    26c4:	e0bffd17 	ldw	r2,-12(fp)
    26c8:	e0fffd17 	ldw	r3,-12(fp)
    26cc:	10c00015 	stw	r3,0(r2)
    26d0:	e0bffb17 	ldw	r2,-20(fp)
    26d4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    26d8:	e0bffe17 	ldw	r2,-8(fp)
    26dc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    26e0:	0001883a 	nop
    26e4:	e037883a 	mov	sp,fp
    26e8:	df000017 	ldw	fp,0(sp)
    26ec:	dec00104 	addi	sp,sp,4
    26f0:	f800283a 	ret

000026f4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    26f4:	defffb04 	addi	sp,sp,-20
    26f8:	dfc00415 	stw	ra,16(sp)
    26fc:	df000315 	stw	fp,12(sp)
    2700:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    2704:	d0a00917 	ldw	r2,-32732(gp)
    2708:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    270c:	d0a6d417 	ldw	r2,-25776(gp)
    2710:	10800044 	addi	r2,r2,1
    2714:	d0a6d415 	stw	r2,-25776(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    2718:	00002e06 	br	27d4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    271c:	e0bffd17 	ldw	r2,-12(fp)
    2720:	10800017 	ldw	r2,0(r2)
    2724:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    2728:	e0bffd17 	ldw	r2,-12(fp)
    272c:	10800403 	ldbu	r2,16(r2)
    2730:	10803fcc 	andi	r2,r2,255
    2734:	10000426 	beq	r2,zero,2748 <alt_tick+0x54>
    2738:	d0a6d417 	ldw	r2,-25776(gp)
    273c:	1000021e 	bne	r2,zero,2748 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    2740:	e0bffd17 	ldw	r2,-12(fp)
    2744:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    2748:	e0bffd17 	ldw	r2,-12(fp)
    274c:	10800217 	ldw	r2,8(r2)
    2750:	d0e6d417 	ldw	r3,-25776(gp)
    2754:	18801d36 	bltu	r3,r2,27cc <alt_tick+0xd8>
    2758:	e0bffd17 	ldw	r2,-12(fp)
    275c:	10800403 	ldbu	r2,16(r2)
    2760:	10803fcc 	andi	r2,r2,255
    2764:	1000191e 	bne	r2,zero,27cc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    2768:	e0bffd17 	ldw	r2,-12(fp)
    276c:	10800317 	ldw	r2,12(r2)
    2770:	e0fffd17 	ldw	r3,-12(fp)
    2774:	18c00517 	ldw	r3,20(r3)
    2778:	1809883a 	mov	r4,r3
    277c:	103ee83a 	callr	r2
    2780:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    2784:	e0bfff17 	ldw	r2,-4(fp)
    2788:	1000031e 	bne	r2,zero,2798 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    278c:	e13ffd17 	ldw	r4,-12(fp)
    2790:	00026580 	call	2658 <alt_alarm_stop>
    2794:	00000d06 	br	27cc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    2798:	e0bffd17 	ldw	r2,-12(fp)
    279c:	10c00217 	ldw	r3,8(r2)
    27a0:	e0bfff17 	ldw	r2,-4(fp)
    27a4:	1887883a 	add	r3,r3,r2
    27a8:	e0bffd17 	ldw	r2,-12(fp)
    27ac:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    27b0:	e0bffd17 	ldw	r2,-12(fp)
    27b4:	10c00217 	ldw	r3,8(r2)
    27b8:	d0a6d417 	ldw	r2,-25776(gp)
    27bc:	1880032e 	bgeu	r3,r2,27cc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    27c0:	e0bffd17 	ldw	r2,-12(fp)
    27c4:	00c00044 	movi	r3,1
    27c8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    27cc:	e0bffe17 	ldw	r2,-8(fp)
    27d0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    27d4:	e0fffd17 	ldw	r3,-12(fp)
    27d8:	d0a00904 	addi	r2,gp,-32732
    27dc:	18bfcf1e 	bne	r3,r2,271c <__alt_data_end+0xfffc271c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    27e0:	0001883a 	nop
}
    27e4:	0001883a 	nop
    27e8:	e037883a 	mov	sp,fp
    27ec:	dfc00117 	ldw	ra,4(sp)
    27f0:	df000017 	ldw	fp,0(sp)
    27f4:	dec00204 	addi	sp,sp,8
    27f8:	f800283a 	ret

000027fc <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    27fc:	deffff04 	addi	sp,sp,-4
    2800:	df000015 	stw	fp,0(sp)
    2804:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    2808:	000170fa 	wrctl	ienable,zero
}
    280c:	0001883a 	nop
    2810:	e037883a 	mov	sp,fp
    2814:	df000017 	ldw	fp,0(sp)
    2818:	dec00104 	addi	sp,sp,4
    281c:	f800283a 	ret

00002820 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    2820:	defffa04 	addi	sp,sp,-24
    2824:	dfc00515 	stw	ra,20(sp)
    2828:	df000415 	stw	fp,16(sp)
    282c:	df000404 	addi	fp,sp,16
    2830:	e13ffe15 	stw	r4,-8(fp)
    2834:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    2838:	e0bfff17 	ldw	r2,-4(fp)
    283c:	10800017 	ldw	r2,0(r2)
    2840:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    2844:	e13ffe17 	ldw	r4,-8(fp)
    2848:	0002f6c0 	call	2f6c <strlen>
    284c:	10800044 	addi	r2,r2,1
    2850:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    2854:	00000d06 	br	288c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    2858:	e0bffc17 	ldw	r2,-16(fp)
    285c:	10800217 	ldw	r2,8(r2)
    2860:	e0fffd17 	ldw	r3,-12(fp)
    2864:	180d883a 	mov	r6,r3
    2868:	e17ffe17 	ldw	r5,-8(fp)
    286c:	1009883a 	mov	r4,r2
    2870:	0002bd40 	call	2bd4 <memcmp>
    2874:	1000021e 	bne	r2,zero,2880 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    2878:	e0bffc17 	ldw	r2,-16(fp)
    287c:	00000706 	br	289c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    2880:	e0bffc17 	ldw	r2,-16(fp)
    2884:	10800017 	ldw	r2,0(r2)
    2888:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    288c:	e0fffc17 	ldw	r3,-16(fp)
    2890:	e0bfff17 	ldw	r2,-4(fp)
    2894:	18bff01e 	bne	r3,r2,2858 <__alt_data_end+0xfffc2858>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    2898:	0005883a 	mov	r2,zero
}
    289c:	e037883a 	mov	sp,fp
    28a0:	dfc00117 	ldw	ra,4(sp)
    28a4:	df000017 	ldw	fp,0(sp)
    28a8:	dec00204 	addi	sp,sp,8
    28ac:	f800283a 	ret

000028b0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    28b0:	defffb04 	addi	sp,sp,-20
    28b4:	dfc00415 	stw	ra,16(sp)
    28b8:	df000315 	stw	fp,12(sp)
    28bc:	df000304 	addi	fp,sp,12
    28c0:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    28c4:	d0a00217 	ldw	r2,-32760(gp)
    28c8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    28cc:	00003106 	br	2994 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    28d0:	e0bffd17 	ldw	r2,-12(fp)
    28d4:	10800217 	ldw	r2,8(r2)
    28d8:	1009883a 	mov	r4,r2
    28dc:	0002f6c0 	call	2f6c <strlen>
    28e0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    28e4:	e0bffd17 	ldw	r2,-12(fp)
    28e8:	10c00217 	ldw	r3,8(r2)
    28ec:	e0bffe17 	ldw	r2,-8(fp)
    28f0:	10bfffc4 	addi	r2,r2,-1
    28f4:	1885883a 	add	r2,r3,r2
    28f8:	10800003 	ldbu	r2,0(r2)
    28fc:	10803fcc 	andi	r2,r2,255
    2900:	1080201c 	xori	r2,r2,128
    2904:	10bfe004 	addi	r2,r2,-128
    2908:	10800bd8 	cmpnei	r2,r2,47
    290c:	1000031e 	bne	r2,zero,291c <alt_find_file+0x6c>
    {
      len -= 1;
    2910:	e0bffe17 	ldw	r2,-8(fp)
    2914:	10bfffc4 	addi	r2,r2,-1
    2918:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    291c:	e0bffe17 	ldw	r2,-8(fp)
    2920:	e0ffff17 	ldw	r3,-4(fp)
    2924:	1885883a 	add	r2,r3,r2
    2928:	10800003 	ldbu	r2,0(r2)
    292c:	10803fcc 	andi	r2,r2,255
    2930:	1080201c 	xori	r2,r2,128
    2934:	10bfe004 	addi	r2,r2,-128
    2938:	10800be0 	cmpeqi	r2,r2,47
    293c:	1000081e 	bne	r2,zero,2960 <alt_find_file+0xb0>
    2940:	e0bffe17 	ldw	r2,-8(fp)
    2944:	e0ffff17 	ldw	r3,-4(fp)
    2948:	1885883a 	add	r2,r3,r2
    294c:	10800003 	ldbu	r2,0(r2)
    2950:	10803fcc 	andi	r2,r2,255
    2954:	1080201c 	xori	r2,r2,128
    2958:	10bfe004 	addi	r2,r2,-128
    295c:	10000a1e 	bne	r2,zero,2988 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    2960:	e0bffd17 	ldw	r2,-12(fp)
    2964:	10800217 	ldw	r2,8(r2)
    2968:	e0fffe17 	ldw	r3,-8(fp)
    296c:	180d883a 	mov	r6,r3
    2970:	e17fff17 	ldw	r5,-4(fp)
    2974:	1009883a 	mov	r4,r2
    2978:	0002bd40 	call	2bd4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    297c:	1000021e 	bne	r2,zero,2988 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    2980:	e0bffd17 	ldw	r2,-12(fp)
    2984:	00000706 	br	29a4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    2988:	e0bffd17 	ldw	r2,-12(fp)
    298c:	10800017 	ldw	r2,0(r2)
    2990:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    2994:	e0fffd17 	ldw	r3,-12(fp)
    2998:	d0a00204 	addi	r2,gp,-32760
    299c:	18bfcc1e 	bne	r3,r2,28d0 <__alt_data_end+0xfffc28d0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    29a0:	0005883a 	mov	r2,zero
}
    29a4:	e037883a 	mov	sp,fp
    29a8:	dfc00117 	ldw	ra,4(sp)
    29ac:	df000017 	ldw	fp,0(sp)
    29b0:	dec00204 	addi	sp,sp,8
    29b4:	f800283a 	ret

000029b8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    29b8:	defffc04 	addi	sp,sp,-16
    29bc:	df000315 	stw	fp,12(sp)
    29c0:	df000304 	addi	fp,sp,12
    29c4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    29c8:	00bffa04 	movi	r2,-24
    29cc:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    29d0:	e03ffd15 	stw	zero,-12(fp)
    29d4:	00001906 	br	2a3c <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
    29d8:	00800074 	movhi	r2,1
    29dc:	10857004 	addi	r2,r2,5568
    29e0:	e0fffd17 	ldw	r3,-12(fp)
    29e4:	18c00324 	muli	r3,r3,12
    29e8:	10c5883a 	add	r2,r2,r3
    29ec:	10800017 	ldw	r2,0(r2)
    29f0:	10000f1e 	bne	r2,zero,2a30 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
    29f4:	00800074 	movhi	r2,1
    29f8:	10857004 	addi	r2,r2,5568
    29fc:	e0fffd17 	ldw	r3,-12(fp)
    2a00:	18c00324 	muli	r3,r3,12
    2a04:	10c5883a 	add	r2,r2,r3
    2a08:	e0ffff17 	ldw	r3,-4(fp)
    2a0c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    2a10:	d0e00617 	ldw	r3,-32744(gp)
    2a14:	e0bffd17 	ldw	r2,-12(fp)
    2a18:	1880020e 	bge	r3,r2,2a24 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
    2a1c:	e0bffd17 	ldw	r2,-12(fp)
    2a20:	d0a00615 	stw	r2,-32744(gp)
      }
      rc = i;
    2a24:	e0bffd17 	ldw	r2,-12(fp)
    2a28:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    2a2c:	00000606 	br	2a48 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    2a30:	e0bffd17 	ldw	r2,-12(fp)
    2a34:	10800044 	addi	r2,r2,1
    2a38:	e0bffd15 	stw	r2,-12(fp)
    2a3c:	e0bffd17 	ldw	r2,-12(fp)
    2a40:	10800810 	cmplti	r2,r2,32
    2a44:	103fe41e 	bne	r2,zero,29d8 <__alt_data_end+0xfffc29d8>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    2a48:	e0bffe17 	ldw	r2,-8(fp)
}
    2a4c:	e037883a 	mov	sp,fp
    2a50:	df000017 	ldw	fp,0(sp)
    2a54:	dec00104 	addi	sp,sp,4
    2a58:	f800283a 	ret

00002a5c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    2a5c:	defffb04 	addi	sp,sp,-20
    2a60:	df000415 	stw	fp,16(sp)
    2a64:	df000404 	addi	fp,sp,16
    2a68:	e13ffe15 	stw	r4,-8(fp)
    2a6c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    2a70:	e0bfff17 	ldw	r2,-4(fp)
    2a74:	10840070 	cmpltui	r2,r2,4097
    2a78:	1000021e 	bne	r2,zero,2a84 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    2a7c:	00840004 	movi	r2,4096
    2a80:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    2a84:	e0fffe17 	ldw	r3,-8(fp)
    2a88:	e0bfff17 	ldw	r2,-4(fp)
    2a8c:	1885883a 	add	r2,r3,r2
    2a90:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    2a94:	e0bffe17 	ldw	r2,-8(fp)
    2a98:	e0bffc15 	stw	r2,-16(fp)
    2a9c:	00000506 	br	2ab4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    2aa0:	e0bffc17 	ldw	r2,-16(fp)
    2aa4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    2aa8:	e0bffc17 	ldw	r2,-16(fp)
    2aac:	10800804 	addi	r2,r2,32
    2ab0:	e0bffc15 	stw	r2,-16(fp)
    2ab4:	e0fffc17 	ldw	r3,-16(fp)
    2ab8:	e0bffd17 	ldw	r2,-12(fp)
    2abc:	18bff836 	bltu	r3,r2,2aa0 <__alt_data_end+0xfffc2aa0>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    2ac0:	e0bffe17 	ldw	r2,-8(fp)
    2ac4:	108007cc 	andi	r2,r2,31
    2ac8:	10000226 	beq	r2,zero,2ad4 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    2acc:	e0bffc17 	ldw	r2,-16(fp)
    2ad0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    2ad4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    2ad8:	0001883a 	nop
    2adc:	e037883a 	mov	sp,fp
    2ae0:	df000017 	ldw	fp,0(sp)
    2ae4:	dec00104 	addi	sp,sp,4
    2ae8:	f800283a 	ret

00002aec <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    2aec:	defffe04 	addi	sp,sp,-8
    2af0:	df000115 	stw	fp,4(sp)
    2af4:	df000104 	addi	fp,sp,4
    2af8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    2afc:	e0bfff17 	ldw	r2,-4(fp)
    2b00:	10bffe84 	addi	r2,r2,-6
    2b04:	10c00428 	cmpgeui	r3,r2,16
    2b08:	18001a1e 	bne	r3,zero,2b74 <alt_exception_cause_generated_bad_addr+0x88>
    2b0c:	100690ba 	slli	r3,r2,2
    2b10:	00800034 	movhi	r2,0
    2b14:	108ac904 	addi	r2,r2,11044
    2b18:	1885883a 	add	r2,r3,r2
    2b1c:	10800017 	ldw	r2,0(r2)
    2b20:	1000683a 	jmp	r2
    2b24:	00002b64 	muli	zero,zero,173
    2b28:	00002b64 	muli	zero,zero,173
    2b2c:	00002b74 	movhi	zero,173
    2b30:	00002b74 	movhi	zero,173
    2b34:	00002b74 	movhi	zero,173
    2b38:	00002b64 	muli	zero,zero,173
    2b3c:	00002b6c 	andhi	zero,zero,173
    2b40:	00002b74 	movhi	zero,173
    2b44:	00002b64 	muli	zero,zero,173
    2b48:	00002b64 	muli	zero,zero,173
    2b4c:	00002b74 	movhi	zero,173
    2b50:	00002b64 	muli	zero,zero,173
    2b54:	00002b6c 	andhi	zero,zero,173
    2b58:	00002b74 	movhi	zero,173
    2b5c:	00002b74 	movhi	zero,173
    2b60:	00002b64 	muli	zero,zero,173
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    2b64:	00800044 	movi	r2,1
    2b68:	00000306 	br	2b78 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    2b6c:	0005883a 	mov	r2,zero
    2b70:	00000106 	br	2b78 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    2b74:	0005883a 	mov	r2,zero
  }
}
    2b78:	e037883a 	mov	sp,fp
    2b7c:	df000017 	ldw	fp,0(sp)
    2b80:	dec00104 	addi	sp,sp,4
    2b84:	f800283a 	ret

00002b88 <atexit>:
    2b88:	200b883a 	mov	r5,r4
    2b8c:	000f883a 	mov	r7,zero
    2b90:	000d883a 	mov	r6,zero
    2b94:	0009883a 	mov	r4,zero
    2b98:	00055801 	jmpi	5580 <__register_exitproc>

00002b9c <exit>:
    2b9c:	defffe04 	addi	sp,sp,-8
    2ba0:	000b883a 	mov	r5,zero
    2ba4:	dc000015 	stw	r16,0(sp)
    2ba8:	dfc00115 	stw	ra,4(sp)
    2bac:	2021883a 	mov	r16,r4
    2bb0:	00056980 	call	5698 <__call_exitprocs>
    2bb4:	00800074 	movhi	r2,1
    2bb8:	10880404 	addi	r2,r2,8208
    2bbc:	11000017 	ldw	r4,0(r2)
    2bc0:	20800f17 	ldw	r2,60(r4)
    2bc4:	10000126 	beq	r2,zero,2bcc <exit+0x30>
    2bc8:	103ee83a 	callr	r2
    2bcc:	8009883a 	mov	r4,r16
    2bd0:	000f90c0 	call	f90c <_exit>

00002bd4 <memcmp>:
    2bd4:	01c000c4 	movi	r7,3
    2bd8:	3980192e 	bgeu	r7,r6,2c40 <memcmp+0x6c>
    2bdc:	2144b03a 	or	r2,r4,r5
    2be0:	11c4703a 	and	r2,r2,r7
    2be4:	10000f26 	beq	r2,zero,2c24 <memcmp+0x50>
    2be8:	20800003 	ldbu	r2,0(r4)
    2bec:	28c00003 	ldbu	r3,0(r5)
    2bf0:	10c0151e 	bne	r2,r3,2c48 <memcmp+0x74>
    2bf4:	31bfff84 	addi	r6,r6,-2
    2bf8:	01ffffc4 	movi	r7,-1
    2bfc:	00000406 	br	2c10 <memcmp+0x3c>
    2c00:	20800003 	ldbu	r2,0(r4)
    2c04:	28c00003 	ldbu	r3,0(r5)
    2c08:	31bfffc4 	addi	r6,r6,-1
    2c0c:	10c00e1e 	bne	r2,r3,2c48 <memcmp+0x74>
    2c10:	21000044 	addi	r4,r4,1
    2c14:	29400044 	addi	r5,r5,1
    2c18:	31fff91e 	bne	r6,r7,2c00 <__alt_data_end+0xfffc2c00>
    2c1c:	0005883a 	mov	r2,zero
    2c20:	f800283a 	ret
    2c24:	20c00017 	ldw	r3,0(r4)
    2c28:	28800017 	ldw	r2,0(r5)
    2c2c:	18bfee1e 	bne	r3,r2,2be8 <__alt_data_end+0xfffc2be8>
    2c30:	31bfff04 	addi	r6,r6,-4
    2c34:	21000104 	addi	r4,r4,4
    2c38:	29400104 	addi	r5,r5,4
    2c3c:	39bff936 	bltu	r7,r6,2c24 <__alt_data_end+0xfffc2c24>
    2c40:	303fe91e 	bne	r6,zero,2be8 <__alt_data_end+0xfffc2be8>
    2c44:	003ff506 	br	2c1c <__alt_data_end+0xfffc2c1c>
    2c48:	10c5c83a 	sub	r2,r2,r3
    2c4c:	f800283a 	ret

00002c50 <memcpy>:
    2c50:	defffd04 	addi	sp,sp,-12
    2c54:	dfc00215 	stw	ra,8(sp)
    2c58:	dc400115 	stw	r17,4(sp)
    2c5c:	dc000015 	stw	r16,0(sp)
    2c60:	00c003c4 	movi	r3,15
    2c64:	2005883a 	mov	r2,r4
    2c68:	1980452e 	bgeu	r3,r6,2d80 <memcpy+0x130>
    2c6c:	2906b03a 	or	r3,r5,r4
    2c70:	18c000cc 	andi	r3,r3,3
    2c74:	1800441e 	bne	r3,zero,2d88 <memcpy+0x138>
    2c78:	347ffc04 	addi	r17,r6,-16
    2c7c:	8822d13a 	srli	r17,r17,4
    2c80:	28c00104 	addi	r3,r5,4
    2c84:	23400104 	addi	r13,r4,4
    2c88:	8820913a 	slli	r16,r17,4
    2c8c:	2b000204 	addi	r12,r5,8
    2c90:	22c00204 	addi	r11,r4,8
    2c94:	84000504 	addi	r16,r16,20
    2c98:	2a800304 	addi	r10,r5,12
    2c9c:	22400304 	addi	r9,r4,12
    2ca0:	2c21883a 	add	r16,r5,r16
    2ca4:	2811883a 	mov	r8,r5
    2ca8:	200f883a 	mov	r7,r4
    2cac:	41000017 	ldw	r4,0(r8)
    2cb0:	1fc00017 	ldw	ra,0(r3)
    2cb4:	63c00017 	ldw	r15,0(r12)
    2cb8:	39000015 	stw	r4,0(r7)
    2cbc:	53800017 	ldw	r14,0(r10)
    2cc0:	6fc00015 	stw	ra,0(r13)
    2cc4:	5bc00015 	stw	r15,0(r11)
    2cc8:	4b800015 	stw	r14,0(r9)
    2ccc:	18c00404 	addi	r3,r3,16
    2cd0:	39c00404 	addi	r7,r7,16
    2cd4:	42000404 	addi	r8,r8,16
    2cd8:	6b400404 	addi	r13,r13,16
    2cdc:	63000404 	addi	r12,r12,16
    2ce0:	5ac00404 	addi	r11,r11,16
    2ce4:	52800404 	addi	r10,r10,16
    2ce8:	4a400404 	addi	r9,r9,16
    2cec:	1c3fef1e 	bne	r3,r16,2cac <__alt_data_end+0xfffc2cac>
    2cf0:	89c00044 	addi	r7,r17,1
    2cf4:	380e913a 	slli	r7,r7,4
    2cf8:	310003cc 	andi	r4,r6,15
    2cfc:	02c000c4 	movi	r11,3
    2d00:	11c7883a 	add	r3,r2,r7
    2d04:	29cb883a 	add	r5,r5,r7
    2d08:	5900212e 	bgeu	r11,r4,2d90 <memcpy+0x140>
    2d0c:	1813883a 	mov	r9,r3
    2d10:	2811883a 	mov	r8,r5
    2d14:	200f883a 	mov	r7,r4
    2d18:	42800017 	ldw	r10,0(r8)
    2d1c:	4a400104 	addi	r9,r9,4
    2d20:	39ffff04 	addi	r7,r7,-4
    2d24:	4abfff15 	stw	r10,-4(r9)
    2d28:	42000104 	addi	r8,r8,4
    2d2c:	59fffa36 	bltu	r11,r7,2d18 <__alt_data_end+0xfffc2d18>
    2d30:	213fff04 	addi	r4,r4,-4
    2d34:	2008d0ba 	srli	r4,r4,2
    2d38:	318000cc 	andi	r6,r6,3
    2d3c:	21000044 	addi	r4,r4,1
    2d40:	2109883a 	add	r4,r4,r4
    2d44:	2109883a 	add	r4,r4,r4
    2d48:	1907883a 	add	r3,r3,r4
    2d4c:	290b883a 	add	r5,r5,r4
    2d50:	30000626 	beq	r6,zero,2d6c <memcpy+0x11c>
    2d54:	198d883a 	add	r6,r3,r6
    2d58:	29c00003 	ldbu	r7,0(r5)
    2d5c:	18c00044 	addi	r3,r3,1
    2d60:	29400044 	addi	r5,r5,1
    2d64:	19ffffc5 	stb	r7,-1(r3)
    2d68:	19bffb1e 	bne	r3,r6,2d58 <__alt_data_end+0xfffc2d58>
    2d6c:	dfc00217 	ldw	ra,8(sp)
    2d70:	dc400117 	ldw	r17,4(sp)
    2d74:	dc000017 	ldw	r16,0(sp)
    2d78:	dec00304 	addi	sp,sp,12
    2d7c:	f800283a 	ret
    2d80:	2007883a 	mov	r3,r4
    2d84:	003ff206 	br	2d50 <__alt_data_end+0xfffc2d50>
    2d88:	2007883a 	mov	r3,r4
    2d8c:	003ff106 	br	2d54 <__alt_data_end+0xfffc2d54>
    2d90:	200d883a 	mov	r6,r4
    2d94:	003fee06 	br	2d50 <__alt_data_end+0xfffc2d50>

00002d98 <_printf_r>:
    2d98:	defffd04 	addi	sp,sp,-12
    2d9c:	2805883a 	mov	r2,r5
    2da0:	dfc00015 	stw	ra,0(sp)
    2da4:	d9800115 	stw	r6,4(sp)
    2da8:	d9c00215 	stw	r7,8(sp)
    2dac:	21400217 	ldw	r5,8(r4)
    2db0:	d9c00104 	addi	r7,sp,4
    2db4:	100d883a 	mov	r6,r2
    2db8:	00030040 	call	3004 <___vfprintf_internal_r>
    2dbc:	dfc00017 	ldw	ra,0(sp)
    2dc0:	dec00304 	addi	sp,sp,12
    2dc4:	f800283a 	ret

00002dc8 <printf>:
    2dc8:	defffc04 	addi	sp,sp,-16
    2dcc:	dfc00015 	stw	ra,0(sp)
    2dd0:	d9400115 	stw	r5,4(sp)
    2dd4:	d9800215 	stw	r6,8(sp)
    2dd8:	d9c00315 	stw	r7,12(sp)
    2ddc:	00800074 	movhi	r2,1
    2de0:	10880504 	addi	r2,r2,8212
    2de4:	10800017 	ldw	r2,0(r2)
    2de8:	200b883a 	mov	r5,r4
    2dec:	d9800104 	addi	r6,sp,4
    2df0:	11000217 	ldw	r4,8(r2)
    2df4:	00051fc0 	call	51fc <__vfprintf_internal>
    2df8:	dfc00017 	ldw	ra,0(sp)
    2dfc:	dec00404 	addi	sp,sp,16
    2e00:	f800283a 	ret

00002e04 <_putc_r>:
    2e04:	defffc04 	addi	sp,sp,-16
    2e08:	dc000215 	stw	r16,8(sp)
    2e0c:	dfc00315 	stw	ra,12(sp)
    2e10:	2021883a 	mov	r16,r4
    2e14:	20000226 	beq	r4,zero,2e20 <_putc_r+0x1c>
    2e18:	20800e17 	ldw	r2,56(r4)
    2e1c:	10001b26 	beq	r2,zero,2e8c <_putc_r+0x88>
    2e20:	30800217 	ldw	r2,8(r6)
    2e24:	10bfffc4 	addi	r2,r2,-1
    2e28:	30800215 	stw	r2,8(r6)
    2e2c:	10000a16 	blt	r2,zero,2e58 <_putc_r+0x54>
    2e30:	30800017 	ldw	r2,0(r6)
    2e34:	11400005 	stb	r5,0(r2)
    2e38:	30800017 	ldw	r2,0(r6)
    2e3c:	10c00044 	addi	r3,r2,1
    2e40:	30c00015 	stw	r3,0(r6)
    2e44:	10800003 	ldbu	r2,0(r2)
    2e48:	dfc00317 	ldw	ra,12(sp)
    2e4c:	dc000217 	ldw	r16,8(sp)
    2e50:	dec00404 	addi	sp,sp,16
    2e54:	f800283a 	ret
    2e58:	30c00617 	ldw	r3,24(r6)
    2e5c:	10c00616 	blt	r2,r3,2e78 <_putc_r+0x74>
    2e60:	30800017 	ldw	r2,0(r6)
    2e64:	00c00284 	movi	r3,10
    2e68:	11400005 	stb	r5,0(r2)
    2e6c:	30800017 	ldw	r2,0(r6)
    2e70:	11400003 	ldbu	r5,0(r2)
    2e74:	28fff11e 	bne	r5,r3,2e3c <__alt_data_end+0xfffc2e3c>
    2e78:	8009883a 	mov	r4,r16
    2e7c:	dfc00317 	ldw	ra,12(sp)
    2e80:	dc000217 	ldw	r16,8(sp)
    2e84:	dec00404 	addi	sp,sp,16
    2e88:	00052d41 	jmpi	52d4 <__swbuf_r>
    2e8c:	d9400015 	stw	r5,0(sp)
    2e90:	d9800115 	stw	r6,4(sp)
    2e94:	00076980 	call	7698 <__sinit>
    2e98:	d9800117 	ldw	r6,4(sp)
    2e9c:	d9400017 	ldw	r5,0(sp)
    2ea0:	003fdf06 	br	2e20 <__alt_data_end+0xfffc2e20>

00002ea4 <putc>:
    2ea4:	00800074 	movhi	r2,1
    2ea8:	defffc04 	addi	sp,sp,-16
    2eac:	10880504 	addi	r2,r2,8212
    2eb0:	dc000115 	stw	r16,4(sp)
    2eb4:	14000017 	ldw	r16,0(r2)
    2eb8:	dc400215 	stw	r17,8(sp)
    2ebc:	dfc00315 	stw	ra,12(sp)
    2ec0:	2023883a 	mov	r17,r4
    2ec4:	80000226 	beq	r16,zero,2ed0 <putc+0x2c>
    2ec8:	80800e17 	ldw	r2,56(r16)
    2ecc:	10001a26 	beq	r2,zero,2f38 <putc+0x94>
    2ed0:	28800217 	ldw	r2,8(r5)
    2ed4:	10bfffc4 	addi	r2,r2,-1
    2ed8:	28800215 	stw	r2,8(r5)
    2edc:	10000b16 	blt	r2,zero,2f0c <putc+0x68>
    2ee0:	28800017 	ldw	r2,0(r5)
    2ee4:	14400005 	stb	r17,0(r2)
    2ee8:	28800017 	ldw	r2,0(r5)
    2eec:	10c00044 	addi	r3,r2,1
    2ef0:	28c00015 	stw	r3,0(r5)
    2ef4:	10800003 	ldbu	r2,0(r2)
    2ef8:	dfc00317 	ldw	ra,12(sp)
    2efc:	dc400217 	ldw	r17,8(sp)
    2f00:	dc000117 	ldw	r16,4(sp)
    2f04:	dec00404 	addi	sp,sp,16
    2f08:	f800283a 	ret
    2f0c:	28c00617 	ldw	r3,24(r5)
    2f10:	10c00e16 	blt	r2,r3,2f4c <putc+0xa8>
    2f14:	28800017 	ldw	r2,0(r5)
    2f18:	01000284 	movi	r4,10
    2f1c:	14400005 	stb	r17,0(r2)
    2f20:	28800017 	ldw	r2,0(r5)
    2f24:	10c00003 	ldbu	r3,0(r2)
    2f28:	193ff01e 	bne	r3,r4,2eec <__alt_data_end+0xfffc2eec>
    2f2c:	280d883a 	mov	r6,r5
    2f30:	180b883a 	mov	r5,r3
    2f34:	00000706 	br	2f54 <putc+0xb0>
    2f38:	8009883a 	mov	r4,r16
    2f3c:	d9400015 	stw	r5,0(sp)
    2f40:	00076980 	call	7698 <__sinit>
    2f44:	d9400017 	ldw	r5,0(sp)
    2f48:	003fe106 	br	2ed0 <__alt_data_end+0xfffc2ed0>
    2f4c:	280d883a 	mov	r6,r5
    2f50:	880b883a 	mov	r5,r17
    2f54:	8009883a 	mov	r4,r16
    2f58:	dfc00317 	ldw	ra,12(sp)
    2f5c:	dc400217 	ldw	r17,8(sp)
    2f60:	dc000117 	ldw	r16,4(sp)
    2f64:	dec00404 	addi	sp,sp,16
    2f68:	00052d41 	jmpi	52d4 <__swbuf_r>

00002f6c <strlen>:
    2f6c:	208000cc 	andi	r2,r4,3
    2f70:	10002026 	beq	r2,zero,2ff4 <strlen+0x88>
    2f74:	20800007 	ldb	r2,0(r4)
    2f78:	10002026 	beq	r2,zero,2ffc <strlen+0x90>
    2f7c:	2005883a 	mov	r2,r4
    2f80:	00000206 	br	2f8c <strlen+0x20>
    2f84:	10c00007 	ldb	r3,0(r2)
    2f88:	18001826 	beq	r3,zero,2fec <strlen+0x80>
    2f8c:	10800044 	addi	r2,r2,1
    2f90:	10c000cc 	andi	r3,r2,3
    2f94:	183ffb1e 	bne	r3,zero,2f84 <__alt_data_end+0xfffc2f84>
    2f98:	10c00017 	ldw	r3,0(r2)
    2f9c:	01ffbff4 	movhi	r7,65279
    2fa0:	39ffbfc4 	addi	r7,r7,-257
    2fa4:	00ca303a 	nor	r5,zero,r3
    2fa8:	01a02074 	movhi	r6,32897
    2fac:	19c7883a 	add	r3,r3,r7
    2fb0:	31a02004 	addi	r6,r6,-32640
    2fb4:	1946703a 	and	r3,r3,r5
    2fb8:	1986703a 	and	r3,r3,r6
    2fbc:	1800091e 	bne	r3,zero,2fe4 <strlen+0x78>
    2fc0:	10800104 	addi	r2,r2,4
    2fc4:	10c00017 	ldw	r3,0(r2)
    2fc8:	19cb883a 	add	r5,r3,r7
    2fcc:	00c6303a 	nor	r3,zero,r3
    2fd0:	28c6703a 	and	r3,r5,r3
    2fd4:	1986703a 	and	r3,r3,r6
    2fd8:	183ff926 	beq	r3,zero,2fc0 <__alt_data_end+0xfffc2fc0>
    2fdc:	00000106 	br	2fe4 <strlen+0x78>
    2fe0:	10800044 	addi	r2,r2,1
    2fe4:	10c00007 	ldb	r3,0(r2)
    2fe8:	183ffd1e 	bne	r3,zero,2fe0 <__alt_data_end+0xfffc2fe0>
    2fec:	1105c83a 	sub	r2,r2,r4
    2ff0:	f800283a 	ret
    2ff4:	2005883a 	mov	r2,r4
    2ff8:	003fe706 	br	2f98 <__alt_data_end+0xfffc2f98>
    2ffc:	0005883a 	mov	r2,zero
    3000:	f800283a 	ret

00003004 <___vfprintf_internal_r>:
    3004:	deffb804 	addi	sp,sp,-288
    3008:	dfc04715 	stw	ra,284(sp)
    300c:	ddc04515 	stw	r23,276(sp)
    3010:	dd404315 	stw	r21,268(sp)
    3014:	d9002c15 	stw	r4,176(sp)
    3018:	282f883a 	mov	r23,r5
    301c:	302b883a 	mov	r21,r6
    3020:	d9c02d15 	stw	r7,180(sp)
    3024:	df004615 	stw	fp,280(sp)
    3028:	dd804415 	stw	r22,272(sp)
    302c:	dd004215 	stw	r20,264(sp)
    3030:	dcc04115 	stw	r19,260(sp)
    3034:	dc804015 	stw	r18,256(sp)
    3038:	dc403f15 	stw	r17,252(sp)
    303c:	dc003e15 	stw	r16,248(sp)
    3040:	0007d500 	call	7d50 <_localeconv_r>
    3044:	10800017 	ldw	r2,0(r2)
    3048:	1009883a 	mov	r4,r2
    304c:	d8803415 	stw	r2,208(sp)
    3050:	0002f6c0 	call	2f6c <strlen>
    3054:	d8803715 	stw	r2,220(sp)
    3058:	d8802c17 	ldw	r2,176(sp)
    305c:	10000226 	beq	r2,zero,3068 <___vfprintf_internal_r+0x64>
    3060:	10800e17 	ldw	r2,56(r2)
    3064:	1000f926 	beq	r2,zero,344c <___vfprintf_internal_r+0x448>
    3068:	b880030b 	ldhu	r2,12(r23)
    306c:	10c8000c 	andi	r3,r2,8192
    3070:	1800061e 	bne	r3,zero,308c <___vfprintf_internal_r+0x88>
    3074:	b9001917 	ldw	r4,100(r23)
    3078:	00f7ffc4 	movi	r3,-8193
    307c:	10880014 	ori	r2,r2,8192
    3080:	20c6703a 	and	r3,r4,r3
    3084:	b880030d 	sth	r2,12(r23)
    3088:	b8c01915 	stw	r3,100(r23)
    308c:	10c0020c 	andi	r3,r2,8
    3090:	1800c126 	beq	r3,zero,3398 <___vfprintf_internal_r+0x394>
    3094:	b8c00417 	ldw	r3,16(r23)
    3098:	1800bf26 	beq	r3,zero,3398 <___vfprintf_internal_r+0x394>
    309c:	1080068c 	andi	r2,r2,26
    30a0:	00c00284 	movi	r3,10
    30a4:	10c0c426 	beq	r2,r3,33b8 <___vfprintf_internal_r+0x3b4>
    30a8:	d8c00404 	addi	r3,sp,16
    30ac:	05000074 	movhi	r20,1
    30b0:	d9001e04 	addi	r4,sp,120
    30b4:	a500ad84 	addi	r20,r20,694
    30b8:	d8c01e15 	stw	r3,120(sp)
    30bc:	d8002015 	stw	zero,128(sp)
    30c0:	d8001f15 	stw	zero,124(sp)
    30c4:	d8003315 	stw	zero,204(sp)
    30c8:	d8003615 	stw	zero,216(sp)
    30cc:	d8003815 	stw	zero,224(sp)
    30d0:	1811883a 	mov	r8,r3
    30d4:	d8003915 	stw	zero,228(sp)
    30d8:	d8003a15 	stw	zero,232(sp)
    30dc:	d8002f15 	stw	zero,188(sp)
    30e0:	d9002815 	stw	r4,160(sp)
    30e4:	a8800007 	ldb	r2,0(r21)
    30e8:	10027b26 	beq	r2,zero,3ad8 <___vfprintf_internal_r+0xad4>
    30ec:	00c00944 	movi	r3,37
    30f0:	a821883a 	mov	r16,r21
    30f4:	10c0021e 	bne	r2,r3,3100 <___vfprintf_internal_r+0xfc>
    30f8:	00001406 	br	314c <___vfprintf_internal_r+0x148>
    30fc:	10c00326 	beq	r2,r3,310c <___vfprintf_internal_r+0x108>
    3100:	84000044 	addi	r16,r16,1
    3104:	80800007 	ldb	r2,0(r16)
    3108:	103ffc1e 	bne	r2,zero,30fc <__alt_data_end+0xfffc30fc>
    310c:	8563c83a 	sub	r17,r16,r21
    3110:	88000e26 	beq	r17,zero,314c <___vfprintf_internal_r+0x148>
    3114:	d8c02017 	ldw	r3,128(sp)
    3118:	d8801f17 	ldw	r2,124(sp)
    311c:	45400015 	stw	r21,0(r8)
    3120:	1c47883a 	add	r3,r3,r17
    3124:	10800044 	addi	r2,r2,1
    3128:	d8c02015 	stw	r3,128(sp)
    312c:	44400115 	stw	r17,4(r8)
    3130:	d8801f15 	stw	r2,124(sp)
    3134:	00c001c4 	movi	r3,7
    3138:	1880a716 	blt	r3,r2,33d8 <___vfprintf_internal_r+0x3d4>
    313c:	42000204 	addi	r8,r8,8
    3140:	d9402f17 	ldw	r5,188(sp)
    3144:	2c4b883a 	add	r5,r5,r17
    3148:	d9402f15 	stw	r5,188(sp)
    314c:	80800007 	ldb	r2,0(r16)
    3150:	1000a826 	beq	r2,zero,33f4 <___vfprintf_internal_r+0x3f0>
    3154:	84400047 	ldb	r17,1(r16)
    3158:	00bfffc4 	movi	r2,-1
    315c:	85400044 	addi	r21,r16,1
    3160:	d8002785 	stb	zero,158(sp)
    3164:	0007883a 	mov	r3,zero
    3168:	000f883a 	mov	r7,zero
    316c:	d8802915 	stw	r2,164(sp)
    3170:	d8003115 	stw	zero,196(sp)
    3174:	0025883a 	mov	r18,zero
    3178:	01401604 	movi	r5,88
    317c:	01800244 	movi	r6,9
    3180:	02800a84 	movi	r10,42
    3184:	02401b04 	movi	r9,108
    3188:	ad400044 	addi	r21,r21,1
    318c:	88bff804 	addi	r2,r17,-32
    3190:	28830436 	bltu	r5,r2,3da4 <___vfprintf_internal_r+0xda0>
    3194:	100490ba 	slli	r2,r2,2
    3198:	01000034 	movhi	r4,0
    319c:	210c6b04 	addi	r4,r4,12716
    31a0:	1105883a 	add	r2,r2,r4
    31a4:	10800017 	ldw	r2,0(r2)
    31a8:	1000683a 	jmp	r2
    31ac:	00003cc4 	movi	zero,243
    31b0:	00003da4 	muli	zero,zero,246
    31b4:	00003da4 	muli	zero,zero,246
    31b8:	00003ce4 	muli	zero,zero,243
    31bc:	00003da4 	muli	zero,zero,246
    31c0:	00003da4 	muli	zero,zero,246
    31c4:	00003da4 	muli	zero,zero,246
    31c8:	00003da4 	muli	zero,zero,246
    31cc:	00003da4 	muli	zero,zero,246
    31d0:	00003da4 	muli	zero,zero,246
    31d4:	00003458 	cmpnei	zero,zero,209
    31d8:	00003c00 	call	3c0 <software_1000+0x28>
    31dc:	00003da4 	muli	zero,zero,246
    31e0:	00003320 	cmpeqi	zero,zero,204
    31e4:	00003480 	call	348 <software_custom_inst+0x4c>
    31e8:	00003da4 	muli	zero,zero,246
    31ec:	000034c0 	call	34c <software_custom_inst+0x50>
    31f0:	000034cc 	andi	zero,zero,211
    31f4:	000034cc 	andi	zero,zero,211
    31f8:	000034cc 	andi	zero,zero,211
    31fc:	000034cc 	andi	zero,zero,211
    3200:	000034cc 	andi	zero,zero,211
    3204:	000034cc 	andi	zero,zero,211
    3208:	000034cc 	andi	zero,zero,211
    320c:	000034cc 	andi	zero,zero,211
    3210:	000034cc 	andi	zero,zero,211
    3214:	00003da4 	muli	zero,zero,246
    3218:	00003da4 	muli	zero,zero,246
    321c:	00003da4 	muli	zero,zero,246
    3220:	00003da4 	muli	zero,zero,246
    3224:	00003da4 	muli	zero,zero,246
    3228:	00003da4 	muli	zero,zero,246
    322c:	00003da4 	muli	zero,zero,246
    3230:	00003da4 	muli	zero,zero,246
    3234:	00003da4 	muli	zero,zero,246
    3238:	00003da4 	muli	zero,zero,246
    323c:	00003500 	call	350 <software_custom_inst+0x54>
    3240:	000035bc 	xorhi	zero,zero,214
    3244:	00003da4 	muli	zero,zero,246
    3248:	000035bc 	xorhi	zero,zero,214
    324c:	00003da4 	muli	zero,zero,246
    3250:	00003da4 	muli	zero,zero,246
    3254:	00003da4 	muli	zero,zero,246
    3258:	00003da4 	muli	zero,zero,246
    325c:	0000365c 	xori	zero,zero,217
    3260:	00003da4 	muli	zero,zero,246
    3264:	00003da4 	muli	zero,zero,246
    3268:	00003668 	cmpgeui	zero,zero,217
    326c:	00003da4 	muli	zero,zero,246
    3270:	00003da4 	muli	zero,zero,246
    3274:	00003da4 	muli	zero,zero,246
    3278:	00003da4 	muli	zero,zero,246
    327c:	00003da4 	muli	zero,zero,246
    3280:	00003ae0 	cmpeqi	zero,zero,235
    3284:	00003da4 	muli	zero,zero,246
    3288:	00003da4 	muli	zero,zero,246
    328c:	00003b40 	call	3b4 <software_1000+0x1c>
    3290:	00003da4 	muli	zero,zero,246
    3294:	00003da4 	muli	zero,zero,246
    3298:	00003da4 	muli	zero,zero,246
    329c:	00003da4 	muli	zero,zero,246
    32a0:	00003da4 	muli	zero,zero,246
    32a4:	00003da4 	muli	zero,zero,246
    32a8:	00003da4 	muli	zero,zero,246
    32ac:	00003da4 	muli	zero,zero,246
    32b0:	00003da4 	muli	zero,zero,246
    32b4:	00003da4 	muli	zero,zero,246
    32b8:	00003d50 	cmplti	zero,zero,245
    32bc:	00003cf0 	cmpltui	zero,zero,243
    32c0:	000035bc 	xorhi	zero,zero,214
    32c4:	000035bc 	xorhi	zero,zero,214
    32c8:	000035bc 	xorhi	zero,zero,214
    32cc:	00003d00 	call	3d0 <software_1000+0x38>
    32d0:	00003cf0 	cmpltui	zero,zero,243
    32d4:	00003da4 	muli	zero,zero,246
    32d8:	00003da4 	muli	zero,zero,246
    32dc:	00003d0c 	andi	zero,zero,244
    32e0:	00003da4 	muli	zero,zero,246
    32e4:	00003d1c 	xori	zero,zero,244
    32e8:	00003bf0 	cmpltui	zero,zero,239
    32ec:	0000332c 	andhi	zero,zero,204
    32f0:	00003c10 	cmplti	zero,zero,240
    32f4:	00003da4 	muli	zero,zero,246
    32f8:	00003c1c 	xori	zero,zero,240
    32fc:	00003da4 	muli	zero,zero,246
    3300:	00003c78 	rdprs	zero,zero,241
    3304:	00003da4 	muli	zero,zero,246
    3308:	00003da4 	muli	zero,zero,246
    330c:	00003c88 	cmpgei	zero,zero,242
    3310:	d9003117 	ldw	r4,196(sp)
    3314:	d8802d15 	stw	r2,180(sp)
    3318:	0109c83a 	sub	r4,zero,r4
    331c:	d9003115 	stw	r4,196(sp)
    3320:	94800114 	ori	r18,r18,4
    3324:	ac400007 	ldb	r17,0(r21)
    3328:	003f9706 	br	3188 <__alt_data_end+0xfffc3188>
    332c:	00800c04 	movi	r2,48
    3330:	d9002d17 	ldw	r4,180(sp)
    3334:	d9402917 	ldw	r5,164(sp)
    3338:	d8802705 	stb	r2,156(sp)
    333c:	00801e04 	movi	r2,120
    3340:	d8802745 	stb	r2,157(sp)
    3344:	d8002785 	stb	zero,158(sp)
    3348:	20c00104 	addi	r3,r4,4
    334c:	24c00017 	ldw	r19,0(r4)
    3350:	002d883a 	mov	r22,zero
    3354:	90800094 	ori	r2,r18,2
    3358:	28029a16 	blt	r5,zero,3dc4 <___vfprintf_internal_r+0xdc0>
    335c:	00bfdfc4 	movi	r2,-129
    3360:	90a4703a 	and	r18,r18,r2
    3364:	d8c02d15 	stw	r3,180(sp)
    3368:	94800094 	ori	r18,r18,2
    336c:	9802871e 	bne	r19,zero,3d8c <___vfprintf_internal_r+0xd88>
    3370:	00800074 	movhi	r2,1
    3374:	1080a604 	addi	r2,r2,664
    3378:	d8803915 	stw	r2,228(sp)
    337c:	04401e04 	movi	r17,120
    3380:	d8802917 	ldw	r2,164(sp)
    3384:	0039883a 	mov	fp,zero
    3388:	1001e926 	beq	r2,zero,3b30 <___vfprintf_internal_r+0xb2c>
    338c:	0027883a 	mov	r19,zero
    3390:	002d883a 	mov	r22,zero
    3394:	00020506 	br	3bac <___vfprintf_internal_r+0xba8>
    3398:	d9002c17 	ldw	r4,176(sp)
    339c:	b80b883a 	mov	r5,r23
    33a0:	000542c0 	call	542c <__swsetup_r>
    33a4:	1005ac1e 	bne	r2,zero,4a58 <___vfprintf_internal_r+0x1a54>
    33a8:	b880030b 	ldhu	r2,12(r23)
    33ac:	00c00284 	movi	r3,10
    33b0:	1080068c 	andi	r2,r2,26
    33b4:	10ff3c1e 	bne	r2,r3,30a8 <__alt_data_end+0xfffc30a8>
    33b8:	b880038f 	ldh	r2,14(r23)
    33bc:	103f3a16 	blt	r2,zero,30a8 <__alt_data_end+0xfffc30a8>
    33c0:	d9c02d17 	ldw	r7,180(sp)
    33c4:	d9002c17 	ldw	r4,176(sp)
    33c8:	a80d883a 	mov	r6,r21
    33cc:	b80b883a 	mov	r5,r23
    33d0:	00052180 	call	5218 <__sbprintf>
    33d4:	00001106 	br	341c <___vfprintf_internal_r+0x418>
    33d8:	d9002c17 	ldw	r4,176(sp)
    33dc:	d9801e04 	addi	r6,sp,120
    33e0:	b80b883a 	mov	r5,r23
    33e4:	0009d2c0 	call	9d2c <__sprint_r>
    33e8:	1000081e 	bne	r2,zero,340c <___vfprintf_internal_r+0x408>
    33ec:	da000404 	addi	r8,sp,16
    33f0:	003f5306 	br	3140 <__alt_data_end+0xfffc3140>
    33f4:	d8802017 	ldw	r2,128(sp)
    33f8:	10000426 	beq	r2,zero,340c <___vfprintf_internal_r+0x408>
    33fc:	d9002c17 	ldw	r4,176(sp)
    3400:	d9801e04 	addi	r6,sp,120
    3404:	b80b883a 	mov	r5,r23
    3408:	0009d2c0 	call	9d2c <__sprint_r>
    340c:	b880030b 	ldhu	r2,12(r23)
    3410:	1080100c 	andi	r2,r2,64
    3414:	1005901e 	bne	r2,zero,4a58 <___vfprintf_internal_r+0x1a54>
    3418:	d8802f17 	ldw	r2,188(sp)
    341c:	dfc04717 	ldw	ra,284(sp)
    3420:	df004617 	ldw	fp,280(sp)
    3424:	ddc04517 	ldw	r23,276(sp)
    3428:	dd804417 	ldw	r22,272(sp)
    342c:	dd404317 	ldw	r21,268(sp)
    3430:	dd004217 	ldw	r20,264(sp)
    3434:	dcc04117 	ldw	r19,260(sp)
    3438:	dc804017 	ldw	r18,256(sp)
    343c:	dc403f17 	ldw	r17,252(sp)
    3440:	dc003e17 	ldw	r16,248(sp)
    3444:	dec04804 	addi	sp,sp,288
    3448:	f800283a 	ret
    344c:	d9002c17 	ldw	r4,176(sp)
    3450:	00076980 	call	7698 <__sinit>
    3454:	003f0406 	br	3068 <__alt_data_end+0xfffc3068>
    3458:	d8802d17 	ldw	r2,180(sp)
    345c:	d9002d17 	ldw	r4,180(sp)
    3460:	10800017 	ldw	r2,0(r2)
    3464:	d8803115 	stw	r2,196(sp)
    3468:	20800104 	addi	r2,r4,4
    346c:	d9003117 	ldw	r4,196(sp)
    3470:	203fa716 	blt	r4,zero,3310 <__alt_data_end+0xfffc3310>
    3474:	d8802d15 	stw	r2,180(sp)
    3478:	ac400007 	ldb	r17,0(r21)
    347c:	003f4206 	br	3188 <__alt_data_end+0xfffc3188>
    3480:	ac400007 	ldb	r17,0(r21)
    3484:	aac00044 	addi	r11,r21,1
    3488:	8a872826 	beq	r17,r10,512c <___vfprintf_internal_r+0x2128>
    348c:	88bff404 	addi	r2,r17,-48
    3490:	0009883a 	mov	r4,zero
    3494:	30867d36 	bltu	r6,r2,4e8c <___vfprintf_internal_r+0x1e88>
    3498:	5c400007 	ldb	r17,0(r11)
    349c:	210002a4 	muli	r4,r4,10
    34a0:	5d400044 	addi	r21,r11,1
    34a4:	a817883a 	mov	r11,r21
    34a8:	2089883a 	add	r4,r4,r2
    34ac:	88bff404 	addi	r2,r17,-48
    34b0:	30bff92e 	bgeu	r6,r2,3498 <__alt_data_end+0xfffc3498>
    34b4:	2005c916 	blt	r4,zero,4bdc <___vfprintf_internal_r+0x1bd8>
    34b8:	d9002915 	stw	r4,164(sp)
    34bc:	003f3306 	br	318c <__alt_data_end+0xfffc318c>
    34c0:	94802014 	ori	r18,r18,128
    34c4:	ac400007 	ldb	r17,0(r21)
    34c8:	003f2f06 	br	3188 <__alt_data_end+0xfffc3188>
    34cc:	a809883a 	mov	r4,r21
    34d0:	d8003115 	stw	zero,196(sp)
    34d4:	88bff404 	addi	r2,r17,-48
    34d8:	0017883a 	mov	r11,zero
    34dc:	24400007 	ldb	r17,0(r4)
    34e0:	5ac002a4 	muli	r11,r11,10
    34e4:	ad400044 	addi	r21,r21,1
    34e8:	a809883a 	mov	r4,r21
    34ec:	12d7883a 	add	r11,r2,r11
    34f0:	88bff404 	addi	r2,r17,-48
    34f4:	30bff92e 	bgeu	r6,r2,34dc <__alt_data_end+0xfffc34dc>
    34f8:	dac03115 	stw	r11,196(sp)
    34fc:	003f2306 	br	318c <__alt_data_end+0xfffc318c>
    3500:	18c03fcc 	andi	r3,r3,255
    3504:	18072b1e 	bne	r3,zero,51b4 <___vfprintf_internal_r+0x21b0>
    3508:	94800414 	ori	r18,r18,16
    350c:	9080080c 	andi	r2,r18,32
    3510:	10037b26 	beq	r2,zero,4300 <___vfprintf_internal_r+0x12fc>
    3514:	d9402d17 	ldw	r5,180(sp)
    3518:	28800117 	ldw	r2,4(r5)
    351c:	2cc00017 	ldw	r19,0(r5)
    3520:	29400204 	addi	r5,r5,8
    3524:	d9402d15 	stw	r5,180(sp)
    3528:	102d883a 	mov	r22,r2
    352c:	10044b16 	blt	r2,zero,465c <___vfprintf_internal_r+0x1658>
    3530:	d9402917 	ldw	r5,164(sp)
    3534:	df002783 	ldbu	fp,158(sp)
    3538:	2803bc16 	blt	r5,zero,442c <___vfprintf_internal_r+0x1428>
    353c:	00ffdfc4 	movi	r3,-129
    3540:	9d84b03a 	or	r2,r19,r22
    3544:	90e4703a 	and	r18,r18,r3
    3548:	10017726 	beq	r2,zero,3b28 <___vfprintf_internal_r+0xb24>
    354c:	b0038326 	beq	r22,zero,435c <___vfprintf_internal_r+0x1358>
    3550:	dc402a15 	stw	r17,168(sp)
    3554:	dc001e04 	addi	r16,sp,120
    3558:	b023883a 	mov	r17,r22
    355c:	402d883a 	mov	r22,r8
    3560:	9809883a 	mov	r4,r19
    3564:	880b883a 	mov	r5,r17
    3568:	01800284 	movi	r6,10
    356c:	000f883a 	mov	r7,zero
    3570:	000cbb80 	call	cbb8 <__umoddi3>
    3574:	10800c04 	addi	r2,r2,48
    3578:	843fffc4 	addi	r16,r16,-1
    357c:	9809883a 	mov	r4,r19
    3580:	880b883a 	mov	r5,r17
    3584:	80800005 	stb	r2,0(r16)
    3588:	01800284 	movi	r6,10
    358c:	000f883a 	mov	r7,zero
    3590:	000c6400 	call	c640 <__udivdi3>
    3594:	1027883a 	mov	r19,r2
    3598:	10c4b03a 	or	r2,r2,r3
    359c:	1823883a 	mov	r17,r3
    35a0:	103fef1e 	bne	r2,zero,3560 <__alt_data_end+0xfffc3560>
    35a4:	d8c02817 	ldw	r3,160(sp)
    35a8:	dc402a17 	ldw	r17,168(sp)
    35ac:	b011883a 	mov	r8,r22
    35b0:	1c07c83a 	sub	r3,r3,r16
    35b4:	d8c02e15 	stw	r3,184(sp)
    35b8:	00005906 	br	3720 <___vfprintf_internal_r+0x71c>
    35bc:	18c03fcc 	andi	r3,r3,255
    35c0:	1806fa1e 	bne	r3,zero,51ac <___vfprintf_internal_r+0x21a8>
    35c4:	9080020c 	andi	r2,r18,8
    35c8:	10048a26 	beq	r2,zero,47f4 <___vfprintf_internal_r+0x17f0>
    35cc:	d8c02d17 	ldw	r3,180(sp)
    35d0:	d9002d17 	ldw	r4,180(sp)
    35d4:	d9402d17 	ldw	r5,180(sp)
    35d8:	18c00017 	ldw	r3,0(r3)
    35dc:	21000117 	ldw	r4,4(r4)
    35e0:	29400204 	addi	r5,r5,8
    35e4:	d8c03615 	stw	r3,216(sp)
    35e8:	d9003815 	stw	r4,224(sp)
    35ec:	d9402d15 	stw	r5,180(sp)
    35f0:	d9003617 	ldw	r4,216(sp)
    35f4:	d9403817 	ldw	r5,224(sp)
    35f8:	da003d15 	stw	r8,244(sp)
    35fc:	04000044 	movi	r16,1
    3600:	00099500 	call	9950 <__fpclassifyd>
    3604:	da003d17 	ldw	r8,244(sp)
    3608:	14041f1e 	bne	r2,r16,4688 <___vfprintf_internal_r+0x1684>
    360c:	d9003617 	ldw	r4,216(sp)
    3610:	d9403817 	ldw	r5,224(sp)
    3614:	000d883a 	mov	r6,zero
    3618:	000f883a 	mov	r7,zero
    361c:	000e59c0 	call	e59c <__ledf2>
    3620:	da003d17 	ldw	r8,244(sp)
    3624:	1005be16 	blt	r2,zero,4d20 <___vfprintf_internal_r+0x1d1c>
    3628:	df002783 	ldbu	fp,158(sp)
    362c:	008011c4 	movi	r2,71
    3630:	1445330e 	bge	r2,r17,4b00 <___vfprintf_internal_r+0x1afc>
    3634:	04000074 	movhi	r16,1
    3638:	84009e04 	addi	r16,r16,632
    363c:	00c000c4 	movi	r3,3
    3640:	00bfdfc4 	movi	r2,-129
    3644:	d8c02a15 	stw	r3,168(sp)
    3648:	90a4703a 	and	r18,r18,r2
    364c:	d8c02e15 	stw	r3,184(sp)
    3650:	d8002915 	stw	zero,164(sp)
    3654:	d8003215 	stw	zero,200(sp)
    3658:	00003706 	br	3738 <___vfprintf_internal_r+0x734>
    365c:	94800214 	ori	r18,r18,8
    3660:	ac400007 	ldb	r17,0(r21)
    3664:	003ec806 	br	3188 <__alt_data_end+0xfffc3188>
    3668:	18c03fcc 	andi	r3,r3,255
    366c:	1806db1e 	bne	r3,zero,51dc <___vfprintf_internal_r+0x21d8>
    3670:	94800414 	ori	r18,r18,16
    3674:	9080080c 	andi	r2,r18,32
    3678:	1002d826 	beq	r2,zero,41dc <___vfprintf_internal_r+0x11d8>
    367c:	d9402d17 	ldw	r5,180(sp)
    3680:	d8c02917 	ldw	r3,164(sp)
    3684:	d8002785 	stb	zero,158(sp)
    3688:	28800204 	addi	r2,r5,8
    368c:	2cc00017 	ldw	r19,0(r5)
    3690:	2d800117 	ldw	r22,4(r5)
    3694:	18048f16 	blt	r3,zero,48d4 <___vfprintf_internal_r+0x18d0>
    3698:	013fdfc4 	movi	r4,-129
    369c:	9d86b03a 	or	r3,r19,r22
    36a0:	d8802d15 	stw	r2,180(sp)
    36a4:	9124703a 	and	r18,r18,r4
    36a8:	1802d91e 	bne	r3,zero,4210 <___vfprintf_internal_r+0x120c>
    36ac:	d8c02917 	ldw	r3,164(sp)
    36b0:	0039883a 	mov	fp,zero
    36b4:	1805c326 	beq	r3,zero,4dc4 <___vfprintf_internal_r+0x1dc0>
    36b8:	0027883a 	mov	r19,zero
    36bc:	002d883a 	mov	r22,zero
    36c0:	dc001e04 	addi	r16,sp,120
    36c4:	9806d0fa 	srli	r3,r19,3
    36c8:	b008977a 	slli	r4,r22,29
    36cc:	b02cd0fa 	srli	r22,r22,3
    36d0:	9cc001cc 	andi	r19,r19,7
    36d4:	98800c04 	addi	r2,r19,48
    36d8:	843fffc4 	addi	r16,r16,-1
    36dc:	20e6b03a 	or	r19,r4,r3
    36e0:	80800005 	stb	r2,0(r16)
    36e4:	9d86b03a 	or	r3,r19,r22
    36e8:	183ff61e 	bne	r3,zero,36c4 <__alt_data_end+0xfffc36c4>
    36ec:	90c0004c 	andi	r3,r18,1
    36f0:	18013b26 	beq	r3,zero,3be0 <___vfprintf_internal_r+0xbdc>
    36f4:	10803fcc 	andi	r2,r2,255
    36f8:	1080201c 	xori	r2,r2,128
    36fc:	10bfe004 	addi	r2,r2,-128
    3700:	00c00c04 	movi	r3,48
    3704:	10c13626 	beq	r2,r3,3be0 <___vfprintf_internal_r+0xbdc>
    3708:	80ffffc5 	stb	r3,-1(r16)
    370c:	d8c02817 	ldw	r3,160(sp)
    3710:	80bfffc4 	addi	r2,r16,-1
    3714:	1021883a 	mov	r16,r2
    3718:	1887c83a 	sub	r3,r3,r2
    371c:	d8c02e15 	stw	r3,184(sp)
    3720:	d8802e17 	ldw	r2,184(sp)
    3724:	d9002917 	ldw	r4,164(sp)
    3728:	1100010e 	bge	r2,r4,3730 <___vfprintf_internal_r+0x72c>
    372c:	2005883a 	mov	r2,r4
    3730:	d8802a15 	stw	r2,168(sp)
    3734:	d8003215 	stw	zero,200(sp)
    3738:	e7003fcc 	andi	fp,fp,255
    373c:	e700201c 	xori	fp,fp,128
    3740:	e73fe004 	addi	fp,fp,-128
    3744:	e0000326 	beq	fp,zero,3754 <___vfprintf_internal_r+0x750>
    3748:	d8c02a17 	ldw	r3,168(sp)
    374c:	18c00044 	addi	r3,r3,1
    3750:	d8c02a15 	stw	r3,168(sp)
    3754:	90c0008c 	andi	r3,r18,2
    3758:	d8c02b15 	stw	r3,172(sp)
    375c:	18000326 	beq	r3,zero,376c <___vfprintf_internal_r+0x768>
    3760:	d8c02a17 	ldw	r3,168(sp)
    3764:	18c00084 	addi	r3,r3,2
    3768:	d8c02a15 	stw	r3,168(sp)
    376c:	90c0210c 	andi	r3,r18,132
    3770:	d8c03015 	stw	r3,192(sp)
    3774:	1801a31e 	bne	r3,zero,3e04 <___vfprintf_internal_r+0xe00>
    3778:	d9003117 	ldw	r4,196(sp)
    377c:	d8c02a17 	ldw	r3,168(sp)
    3780:	20e7c83a 	sub	r19,r4,r3
    3784:	04c19f0e 	bge	zero,r19,3e04 <___vfprintf_internal_r+0xe00>
    3788:	02400404 	movi	r9,16
    378c:	d8c02017 	ldw	r3,128(sp)
    3790:	d8801f17 	ldw	r2,124(sp)
    3794:	4cc50d0e 	bge	r9,r19,4bcc <___vfprintf_internal_r+0x1bc8>
    3798:	01400074 	movhi	r5,1
    379c:	2940b184 	addi	r5,r5,710
    37a0:	dc403b15 	stw	r17,236(sp)
    37a4:	d9403515 	stw	r5,212(sp)
    37a8:	9823883a 	mov	r17,r19
    37ac:	482d883a 	mov	r22,r9
    37b0:	9027883a 	mov	r19,r18
    37b4:	070001c4 	movi	fp,7
    37b8:	8025883a 	mov	r18,r16
    37bc:	dc002c17 	ldw	r16,176(sp)
    37c0:	00000306 	br	37d0 <___vfprintf_internal_r+0x7cc>
    37c4:	8c7ffc04 	addi	r17,r17,-16
    37c8:	42000204 	addi	r8,r8,8
    37cc:	b440130e 	bge	r22,r17,381c <___vfprintf_internal_r+0x818>
    37d0:	01000074 	movhi	r4,1
    37d4:	18c00404 	addi	r3,r3,16
    37d8:	10800044 	addi	r2,r2,1
    37dc:	2100b184 	addi	r4,r4,710
    37e0:	41000015 	stw	r4,0(r8)
    37e4:	45800115 	stw	r22,4(r8)
    37e8:	d8c02015 	stw	r3,128(sp)
    37ec:	d8801f15 	stw	r2,124(sp)
    37f0:	e0bff40e 	bge	fp,r2,37c4 <__alt_data_end+0xfffc37c4>
    37f4:	d9801e04 	addi	r6,sp,120
    37f8:	b80b883a 	mov	r5,r23
    37fc:	8009883a 	mov	r4,r16
    3800:	0009d2c0 	call	9d2c <__sprint_r>
    3804:	103f011e 	bne	r2,zero,340c <__alt_data_end+0xfffc340c>
    3808:	8c7ffc04 	addi	r17,r17,-16
    380c:	d8c02017 	ldw	r3,128(sp)
    3810:	d8801f17 	ldw	r2,124(sp)
    3814:	da000404 	addi	r8,sp,16
    3818:	b47fed16 	blt	r22,r17,37d0 <__alt_data_end+0xfffc37d0>
    381c:	9021883a 	mov	r16,r18
    3820:	9825883a 	mov	r18,r19
    3824:	8827883a 	mov	r19,r17
    3828:	dc403b17 	ldw	r17,236(sp)
    382c:	d9403517 	ldw	r5,212(sp)
    3830:	98c7883a 	add	r3,r19,r3
    3834:	10800044 	addi	r2,r2,1
    3838:	41400015 	stw	r5,0(r8)
    383c:	44c00115 	stw	r19,4(r8)
    3840:	d8c02015 	stw	r3,128(sp)
    3844:	d8801f15 	stw	r2,124(sp)
    3848:	010001c4 	movi	r4,7
    384c:	2082a316 	blt	r4,r2,42dc <___vfprintf_internal_r+0x12d8>
    3850:	df002787 	ldb	fp,158(sp)
    3854:	42000204 	addi	r8,r8,8
    3858:	e0000c26 	beq	fp,zero,388c <___vfprintf_internal_r+0x888>
    385c:	d8801f17 	ldw	r2,124(sp)
    3860:	d9002784 	addi	r4,sp,158
    3864:	18c00044 	addi	r3,r3,1
    3868:	10800044 	addi	r2,r2,1
    386c:	41000015 	stw	r4,0(r8)
    3870:	01000044 	movi	r4,1
    3874:	41000115 	stw	r4,4(r8)
    3878:	d8c02015 	stw	r3,128(sp)
    387c:	d8801f15 	stw	r2,124(sp)
    3880:	010001c4 	movi	r4,7
    3884:	20823c16 	blt	r4,r2,4178 <___vfprintf_internal_r+0x1174>
    3888:	42000204 	addi	r8,r8,8
    388c:	d8802b17 	ldw	r2,172(sp)
    3890:	10000c26 	beq	r2,zero,38c4 <___vfprintf_internal_r+0x8c0>
    3894:	d8801f17 	ldw	r2,124(sp)
    3898:	d9002704 	addi	r4,sp,156
    389c:	18c00084 	addi	r3,r3,2
    38a0:	10800044 	addi	r2,r2,1
    38a4:	41000015 	stw	r4,0(r8)
    38a8:	01000084 	movi	r4,2
    38ac:	41000115 	stw	r4,4(r8)
    38b0:	d8c02015 	stw	r3,128(sp)
    38b4:	d8801f15 	stw	r2,124(sp)
    38b8:	010001c4 	movi	r4,7
    38bc:	20823616 	blt	r4,r2,4198 <___vfprintf_internal_r+0x1194>
    38c0:	42000204 	addi	r8,r8,8
    38c4:	d9003017 	ldw	r4,192(sp)
    38c8:	00802004 	movi	r2,128
    38cc:	20819926 	beq	r4,r2,3f34 <___vfprintf_internal_r+0xf30>
    38d0:	d9402917 	ldw	r5,164(sp)
    38d4:	d8802e17 	ldw	r2,184(sp)
    38d8:	28adc83a 	sub	r22,r5,r2
    38dc:	0580310e 	bge	zero,r22,39a4 <___vfprintf_internal_r+0x9a0>
    38e0:	07000404 	movi	fp,16
    38e4:	d8801f17 	ldw	r2,124(sp)
    38e8:	e584140e 	bge	fp,r22,493c <___vfprintf_internal_r+0x1938>
    38ec:	01400074 	movhi	r5,1
    38f0:	2940ad84 	addi	r5,r5,694
    38f4:	dc402915 	stw	r17,164(sp)
    38f8:	d9402b15 	stw	r5,172(sp)
    38fc:	b023883a 	mov	r17,r22
    3900:	04c001c4 	movi	r19,7
    3904:	a82d883a 	mov	r22,r21
    3908:	902b883a 	mov	r21,r18
    390c:	8025883a 	mov	r18,r16
    3910:	dc002c17 	ldw	r16,176(sp)
    3914:	00000306 	br	3924 <___vfprintf_internal_r+0x920>
    3918:	8c7ffc04 	addi	r17,r17,-16
    391c:	42000204 	addi	r8,r8,8
    3920:	e440110e 	bge	fp,r17,3968 <___vfprintf_internal_r+0x964>
    3924:	18c00404 	addi	r3,r3,16
    3928:	10800044 	addi	r2,r2,1
    392c:	45000015 	stw	r20,0(r8)
    3930:	47000115 	stw	fp,4(r8)
    3934:	d8c02015 	stw	r3,128(sp)
    3938:	d8801f15 	stw	r2,124(sp)
    393c:	98bff60e 	bge	r19,r2,3918 <__alt_data_end+0xfffc3918>
    3940:	d9801e04 	addi	r6,sp,120
    3944:	b80b883a 	mov	r5,r23
    3948:	8009883a 	mov	r4,r16
    394c:	0009d2c0 	call	9d2c <__sprint_r>
    3950:	103eae1e 	bne	r2,zero,340c <__alt_data_end+0xfffc340c>
    3954:	8c7ffc04 	addi	r17,r17,-16
    3958:	d8c02017 	ldw	r3,128(sp)
    395c:	d8801f17 	ldw	r2,124(sp)
    3960:	da000404 	addi	r8,sp,16
    3964:	e47fef16 	blt	fp,r17,3924 <__alt_data_end+0xfffc3924>
    3968:	9021883a 	mov	r16,r18
    396c:	a825883a 	mov	r18,r21
    3970:	b02b883a 	mov	r21,r22
    3974:	882d883a 	mov	r22,r17
    3978:	dc402917 	ldw	r17,164(sp)
    397c:	d9002b17 	ldw	r4,172(sp)
    3980:	1d87883a 	add	r3,r3,r22
    3984:	10800044 	addi	r2,r2,1
    3988:	41000015 	stw	r4,0(r8)
    398c:	45800115 	stw	r22,4(r8)
    3990:	d8c02015 	stw	r3,128(sp)
    3994:	d8801f15 	stw	r2,124(sp)
    3998:	010001c4 	movi	r4,7
    399c:	2081ee16 	blt	r4,r2,4158 <___vfprintf_internal_r+0x1154>
    39a0:	42000204 	addi	r8,r8,8
    39a4:	9080400c 	andi	r2,r18,256
    39a8:	1001181e 	bne	r2,zero,3e0c <___vfprintf_internal_r+0xe08>
    39ac:	d9402e17 	ldw	r5,184(sp)
    39b0:	d8801f17 	ldw	r2,124(sp)
    39b4:	44000015 	stw	r16,0(r8)
    39b8:	1947883a 	add	r3,r3,r5
    39bc:	10800044 	addi	r2,r2,1
    39c0:	41400115 	stw	r5,4(r8)
    39c4:	d8c02015 	stw	r3,128(sp)
    39c8:	d8801f15 	stw	r2,124(sp)
    39cc:	010001c4 	movi	r4,7
    39d0:	2081d316 	blt	r4,r2,4120 <___vfprintf_internal_r+0x111c>
    39d4:	42000204 	addi	r8,r8,8
    39d8:	9480010c 	andi	r18,r18,4
    39dc:	90003226 	beq	r18,zero,3aa8 <___vfprintf_internal_r+0xaa4>
    39e0:	d9403117 	ldw	r5,196(sp)
    39e4:	d8802a17 	ldw	r2,168(sp)
    39e8:	28a1c83a 	sub	r16,r5,r2
    39ec:	04002e0e 	bge	zero,r16,3aa8 <___vfprintf_internal_r+0xaa4>
    39f0:	04400404 	movi	r17,16
    39f4:	d8801f17 	ldw	r2,124(sp)
    39f8:	8c04a20e 	bge	r17,r16,4c84 <___vfprintf_internal_r+0x1c80>
    39fc:	01400074 	movhi	r5,1
    3a00:	2940b184 	addi	r5,r5,710
    3a04:	d9403515 	stw	r5,212(sp)
    3a08:	048001c4 	movi	r18,7
    3a0c:	dcc02c17 	ldw	r19,176(sp)
    3a10:	00000306 	br	3a20 <___vfprintf_internal_r+0xa1c>
    3a14:	843ffc04 	addi	r16,r16,-16
    3a18:	42000204 	addi	r8,r8,8
    3a1c:	8c00130e 	bge	r17,r16,3a6c <___vfprintf_internal_r+0xa68>
    3a20:	01000074 	movhi	r4,1
    3a24:	18c00404 	addi	r3,r3,16
    3a28:	10800044 	addi	r2,r2,1
    3a2c:	2100b184 	addi	r4,r4,710
    3a30:	41000015 	stw	r4,0(r8)
    3a34:	44400115 	stw	r17,4(r8)
    3a38:	d8c02015 	stw	r3,128(sp)
    3a3c:	d8801f15 	stw	r2,124(sp)
    3a40:	90bff40e 	bge	r18,r2,3a14 <__alt_data_end+0xfffc3a14>
    3a44:	d9801e04 	addi	r6,sp,120
    3a48:	b80b883a 	mov	r5,r23
    3a4c:	9809883a 	mov	r4,r19
    3a50:	0009d2c0 	call	9d2c <__sprint_r>
    3a54:	103e6d1e 	bne	r2,zero,340c <__alt_data_end+0xfffc340c>
    3a58:	843ffc04 	addi	r16,r16,-16
    3a5c:	d8c02017 	ldw	r3,128(sp)
    3a60:	d8801f17 	ldw	r2,124(sp)
    3a64:	da000404 	addi	r8,sp,16
    3a68:	8c3fed16 	blt	r17,r16,3a20 <__alt_data_end+0xfffc3a20>
    3a6c:	d9403517 	ldw	r5,212(sp)
    3a70:	1c07883a 	add	r3,r3,r16
    3a74:	10800044 	addi	r2,r2,1
    3a78:	41400015 	stw	r5,0(r8)
    3a7c:	44000115 	stw	r16,4(r8)
    3a80:	d8c02015 	stw	r3,128(sp)
    3a84:	d8801f15 	stw	r2,124(sp)
    3a88:	010001c4 	movi	r4,7
    3a8c:	2080060e 	bge	r4,r2,3aa8 <___vfprintf_internal_r+0xaa4>
    3a90:	d9002c17 	ldw	r4,176(sp)
    3a94:	d9801e04 	addi	r6,sp,120
    3a98:	b80b883a 	mov	r5,r23
    3a9c:	0009d2c0 	call	9d2c <__sprint_r>
    3aa0:	103e5a1e 	bne	r2,zero,340c <__alt_data_end+0xfffc340c>
    3aa4:	d8c02017 	ldw	r3,128(sp)
    3aa8:	d8803117 	ldw	r2,196(sp)
    3aac:	d9002a17 	ldw	r4,168(sp)
    3ab0:	1100010e 	bge	r2,r4,3ab8 <___vfprintf_internal_r+0xab4>
    3ab4:	2005883a 	mov	r2,r4
    3ab8:	d9402f17 	ldw	r5,188(sp)
    3abc:	288b883a 	add	r5,r5,r2
    3ac0:	d9402f15 	stw	r5,188(sp)
    3ac4:	18019e1e 	bne	r3,zero,4140 <___vfprintf_internal_r+0x113c>
    3ac8:	a8800007 	ldb	r2,0(r21)
    3acc:	d8001f15 	stw	zero,124(sp)
    3ad0:	da000404 	addi	r8,sp,16
    3ad4:	103d851e 	bne	r2,zero,30ec <__alt_data_end+0xfffc30ec>
    3ad8:	a821883a 	mov	r16,r21
    3adc:	003d9b06 	br	314c <__alt_data_end+0xfffc314c>
    3ae0:	18c03fcc 	andi	r3,r3,255
    3ae4:	1805c11e 	bne	r3,zero,51ec <___vfprintf_internal_r+0x21e8>
    3ae8:	94800414 	ori	r18,r18,16
    3aec:	9080080c 	andi	r2,r18,32
    3af0:	10020c26 	beq	r2,zero,4324 <___vfprintf_internal_r+0x1320>
    3af4:	d8802d17 	ldw	r2,180(sp)
    3af8:	d9002917 	ldw	r4,164(sp)
    3afc:	d8002785 	stb	zero,158(sp)
    3b00:	10c00204 	addi	r3,r2,8
    3b04:	14c00017 	ldw	r19,0(r2)
    3b08:	15800117 	ldw	r22,4(r2)
    3b0c:	20040f16 	blt	r4,zero,4b4c <___vfprintf_internal_r+0x1b48>
    3b10:	013fdfc4 	movi	r4,-129
    3b14:	9d84b03a 	or	r2,r19,r22
    3b18:	d8c02d15 	stw	r3,180(sp)
    3b1c:	9124703a 	and	r18,r18,r4
    3b20:	0039883a 	mov	fp,zero
    3b24:	103e891e 	bne	r2,zero,354c <__alt_data_end+0xfffc354c>
    3b28:	d9002917 	ldw	r4,164(sp)
    3b2c:	2002c11e 	bne	r4,zero,4634 <___vfprintf_internal_r+0x1630>
    3b30:	d8002915 	stw	zero,164(sp)
    3b34:	d8002e15 	stw	zero,184(sp)
    3b38:	dc001e04 	addi	r16,sp,120
    3b3c:	003ef806 	br	3720 <__alt_data_end+0xfffc3720>
    3b40:	18c03fcc 	andi	r3,r3,255
    3b44:	18059d1e 	bne	r3,zero,51bc <___vfprintf_internal_r+0x21b8>
    3b48:	01400074 	movhi	r5,1
    3b4c:	2940a104 	addi	r5,r5,644
    3b50:	d9403915 	stw	r5,228(sp)
    3b54:	9080080c 	andi	r2,r18,32
    3b58:	10005226 	beq	r2,zero,3ca4 <___vfprintf_internal_r+0xca0>
    3b5c:	d8802d17 	ldw	r2,180(sp)
    3b60:	14c00017 	ldw	r19,0(r2)
    3b64:	15800117 	ldw	r22,4(r2)
    3b68:	10800204 	addi	r2,r2,8
    3b6c:	d8802d15 	stw	r2,180(sp)
    3b70:	9080004c 	andi	r2,r18,1
    3b74:	10019026 	beq	r2,zero,41b8 <___vfprintf_internal_r+0x11b4>
    3b78:	9d84b03a 	or	r2,r19,r22
    3b7c:	10036926 	beq	r2,zero,4924 <___vfprintf_internal_r+0x1920>
    3b80:	d8c02917 	ldw	r3,164(sp)
    3b84:	00800c04 	movi	r2,48
    3b88:	d8802705 	stb	r2,156(sp)
    3b8c:	dc402745 	stb	r17,157(sp)
    3b90:	d8002785 	stb	zero,158(sp)
    3b94:	90800094 	ori	r2,r18,2
    3b98:	18045d16 	blt	r3,zero,4d10 <___vfprintf_internal_r+0x1d0c>
    3b9c:	00bfdfc4 	movi	r2,-129
    3ba0:	90a4703a 	and	r18,r18,r2
    3ba4:	94800094 	ori	r18,r18,2
    3ba8:	0039883a 	mov	fp,zero
    3bac:	d9003917 	ldw	r4,228(sp)
    3bb0:	dc001e04 	addi	r16,sp,120
    3bb4:	988003cc 	andi	r2,r19,15
    3bb8:	b006973a 	slli	r3,r22,28
    3bbc:	2085883a 	add	r2,r4,r2
    3bc0:	9826d13a 	srli	r19,r19,4
    3bc4:	10800003 	ldbu	r2,0(r2)
    3bc8:	b02cd13a 	srli	r22,r22,4
    3bcc:	843fffc4 	addi	r16,r16,-1
    3bd0:	1ce6b03a 	or	r19,r3,r19
    3bd4:	80800005 	stb	r2,0(r16)
    3bd8:	9d84b03a 	or	r2,r19,r22
    3bdc:	103ff51e 	bne	r2,zero,3bb4 <__alt_data_end+0xfffc3bb4>
    3be0:	d8c02817 	ldw	r3,160(sp)
    3be4:	1c07c83a 	sub	r3,r3,r16
    3be8:	d8c02e15 	stw	r3,184(sp)
    3bec:	003ecc06 	br	3720 <__alt_data_end+0xfffc3720>
    3bf0:	18c03fcc 	andi	r3,r3,255
    3bf4:	183e9f26 	beq	r3,zero,3674 <__alt_data_end+0xfffc3674>
    3bf8:	d9c02785 	stb	r7,158(sp)
    3bfc:	003e9d06 	br	3674 <__alt_data_end+0xfffc3674>
    3c00:	00c00044 	movi	r3,1
    3c04:	01c00ac4 	movi	r7,43
    3c08:	ac400007 	ldb	r17,0(r21)
    3c0c:	003d5e06 	br	3188 <__alt_data_end+0xfffc3188>
    3c10:	94800814 	ori	r18,r18,32
    3c14:	ac400007 	ldb	r17,0(r21)
    3c18:	003d5b06 	br	3188 <__alt_data_end+0xfffc3188>
    3c1c:	d8c02d17 	ldw	r3,180(sp)
    3c20:	d8002785 	stb	zero,158(sp)
    3c24:	1c000017 	ldw	r16,0(r3)
    3c28:	1cc00104 	addi	r19,r3,4
    3c2c:	80041926 	beq	r16,zero,4c94 <___vfprintf_internal_r+0x1c90>
    3c30:	d9002917 	ldw	r4,164(sp)
    3c34:	2003d016 	blt	r4,zero,4b78 <___vfprintf_internal_r+0x1b74>
    3c38:	200d883a 	mov	r6,r4
    3c3c:	000b883a 	mov	r5,zero
    3c40:	8009883a 	mov	r4,r16
    3c44:	da003d15 	stw	r8,244(sp)
    3c48:	00087480 	call	8748 <memchr>
    3c4c:	da003d17 	ldw	r8,244(sp)
    3c50:	10045426 	beq	r2,zero,4da4 <___vfprintf_internal_r+0x1da0>
    3c54:	1405c83a 	sub	r2,r2,r16
    3c58:	d8802e15 	stw	r2,184(sp)
    3c5c:	1003cc16 	blt	r2,zero,4b90 <___vfprintf_internal_r+0x1b8c>
    3c60:	df002783 	ldbu	fp,158(sp)
    3c64:	d8802a15 	stw	r2,168(sp)
    3c68:	dcc02d15 	stw	r19,180(sp)
    3c6c:	d8002915 	stw	zero,164(sp)
    3c70:	d8003215 	stw	zero,200(sp)
    3c74:	003eb006 	br	3738 <__alt_data_end+0xfffc3738>
    3c78:	18c03fcc 	andi	r3,r3,255
    3c7c:	183f9b26 	beq	r3,zero,3aec <__alt_data_end+0xfffc3aec>
    3c80:	d9c02785 	stb	r7,158(sp)
    3c84:	003f9906 	br	3aec <__alt_data_end+0xfffc3aec>
    3c88:	18c03fcc 	andi	r3,r3,255
    3c8c:	1805551e 	bne	r3,zero,51e4 <___vfprintf_internal_r+0x21e0>
    3c90:	01400074 	movhi	r5,1
    3c94:	2940a604 	addi	r5,r5,664
    3c98:	d9403915 	stw	r5,228(sp)
    3c9c:	9080080c 	andi	r2,r18,32
    3ca0:	103fae1e 	bne	r2,zero,3b5c <__alt_data_end+0xfffc3b5c>
    3ca4:	9080040c 	andi	r2,r18,16
    3ca8:	1002de26 	beq	r2,zero,4824 <___vfprintf_internal_r+0x1820>
    3cac:	d8c02d17 	ldw	r3,180(sp)
    3cb0:	002d883a 	mov	r22,zero
    3cb4:	1cc00017 	ldw	r19,0(r3)
    3cb8:	18c00104 	addi	r3,r3,4
    3cbc:	d8c02d15 	stw	r3,180(sp)
    3cc0:	003fab06 	br	3b70 <__alt_data_end+0xfffc3b70>
    3cc4:	38803fcc 	andi	r2,r7,255
    3cc8:	1080201c 	xori	r2,r2,128
    3ccc:	10bfe004 	addi	r2,r2,-128
    3cd0:	1002d21e 	bne	r2,zero,481c <___vfprintf_internal_r+0x1818>
    3cd4:	00c00044 	movi	r3,1
    3cd8:	01c00804 	movi	r7,32
    3cdc:	ac400007 	ldb	r17,0(r21)
    3ce0:	003d2906 	br	3188 <__alt_data_end+0xfffc3188>
    3ce4:	94800054 	ori	r18,r18,1
    3ce8:	ac400007 	ldb	r17,0(r21)
    3cec:	003d2606 	br	3188 <__alt_data_end+0xfffc3188>
    3cf0:	18c03fcc 	andi	r3,r3,255
    3cf4:	183e0526 	beq	r3,zero,350c <__alt_data_end+0xfffc350c>
    3cf8:	d9c02785 	stb	r7,158(sp)
    3cfc:	003e0306 	br	350c <__alt_data_end+0xfffc350c>
    3d00:	94801014 	ori	r18,r18,64
    3d04:	ac400007 	ldb	r17,0(r21)
    3d08:	003d1f06 	br	3188 <__alt_data_end+0xfffc3188>
    3d0c:	ac400007 	ldb	r17,0(r21)
    3d10:	8a438726 	beq	r17,r9,4b30 <___vfprintf_internal_r+0x1b2c>
    3d14:	94800414 	ori	r18,r18,16
    3d18:	003d1b06 	br	3188 <__alt_data_end+0xfffc3188>
    3d1c:	18c03fcc 	andi	r3,r3,255
    3d20:	1805341e 	bne	r3,zero,51f4 <___vfprintf_internal_r+0x21f0>
    3d24:	9080080c 	andi	r2,r18,32
    3d28:	1002cd26 	beq	r2,zero,4860 <___vfprintf_internal_r+0x185c>
    3d2c:	d9402d17 	ldw	r5,180(sp)
    3d30:	d9002f17 	ldw	r4,188(sp)
    3d34:	28800017 	ldw	r2,0(r5)
    3d38:	2007d7fa 	srai	r3,r4,31
    3d3c:	29400104 	addi	r5,r5,4
    3d40:	d9402d15 	stw	r5,180(sp)
    3d44:	11000015 	stw	r4,0(r2)
    3d48:	10c00115 	stw	r3,4(r2)
    3d4c:	003ce506 	br	30e4 <__alt_data_end+0xfffc30e4>
    3d50:	d8c02d17 	ldw	r3,180(sp)
    3d54:	d9002d17 	ldw	r4,180(sp)
    3d58:	d8002785 	stb	zero,158(sp)
    3d5c:	18800017 	ldw	r2,0(r3)
    3d60:	21000104 	addi	r4,r4,4
    3d64:	00c00044 	movi	r3,1
    3d68:	d8c02a15 	stw	r3,168(sp)
    3d6c:	d8801405 	stb	r2,80(sp)
    3d70:	d9002d15 	stw	r4,180(sp)
    3d74:	d8c02e15 	stw	r3,184(sp)
    3d78:	d8002915 	stw	zero,164(sp)
    3d7c:	d8003215 	stw	zero,200(sp)
    3d80:	dc001404 	addi	r16,sp,80
    3d84:	0039883a 	mov	fp,zero
    3d88:	003e7206 	br	3754 <__alt_data_end+0xfffc3754>
    3d8c:	01000074 	movhi	r4,1
    3d90:	2100a604 	addi	r4,r4,664
    3d94:	0039883a 	mov	fp,zero
    3d98:	d9003915 	stw	r4,228(sp)
    3d9c:	04401e04 	movi	r17,120
    3da0:	003f8206 	br	3bac <__alt_data_end+0xfffc3bac>
    3da4:	18c03fcc 	andi	r3,r3,255
    3da8:	1805061e 	bne	r3,zero,51c4 <___vfprintf_internal_r+0x21c0>
    3dac:	883d9126 	beq	r17,zero,33f4 <__alt_data_end+0xfffc33f4>
    3db0:	00c00044 	movi	r3,1
    3db4:	d8c02a15 	stw	r3,168(sp)
    3db8:	dc401405 	stb	r17,80(sp)
    3dbc:	d8002785 	stb	zero,158(sp)
    3dc0:	003fec06 	br	3d74 <__alt_data_end+0xfffc3d74>
    3dc4:	01400074 	movhi	r5,1
    3dc8:	2940a604 	addi	r5,r5,664
    3dcc:	d9403915 	stw	r5,228(sp)
    3dd0:	d8c02d15 	stw	r3,180(sp)
    3dd4:	1025883a 	mov	r18,r2
    3dd8:	04401e04 	movi	r17,120
    3ddc:	9d84b03a 	or	r2,r19,r22
    3de0:	1000fc1e 	bne	r2,zero,41d4 <___vfprintf_internal_r+0x11d0>
    3de4:	0039883a 	mov	fp,zero
    3de8:	00800084 	movi	r2,2
    3dec:	10803fcc 	andi	r2,r2,255
    3df0:	00c00044 	movi	r3,1
    3df4:	10c20f26 	beq	r2,r3,4634 <___vfprintf_internal_r+0x1630>
    3df8:	00c00084 	movi	r3,2
    3dfc:	10fd6326 	beq	r2,r3,338c <__alt_data_end+0xfffc338c>
    3e00:	003e2d06 	br	36b8 <__alt_data_end+0xfffc36b8>
    3e04:	d8c02017 	ldw	r3,128(sp)
    3e08:	003e9306 	br	3858 <__alt_data_end+0xfffc3858>
    3e0c:	00801944 	movi	r2,101
    3e10:	14407e0e 	bge	r2,r17,400c <___vfprintf_internal_r+0x1008>
    3e14:	d9003617 	ldw	r4,216(sp)
    3e18:	d9403817 	ldw	r5,224(sp)
    3e1c:	000d883a 	mov	r6,zero
    3e20:	000f883a 	mov	r7,zero
    3e24:	d8c03c15 	stw	r3,240(sp)
    3e28:	da003d15 	stw	r8,244(sp)
    3e2c:	000e4380 	call	e438 <__eqdf2>
    3e30:	d8c03c17 	ldw	r3,240(sp)
    3e34:	da003d17 	ldw	r8,244(sp)
    3e38:	1000f71e 	bne	r2,zero,4218 <___vfprintf_internal_r+0x1214>
    3e3c:	d8801f17 	ldw	r2,124(sp)
    3e40:	01000074 	movhi	r4,1
    3e44:	2100ad04 	addi	r4,r4,692
    3e48:	18c00044 	addi	r3,r3,1
    3e4c:	10800044 	addi	r2,r2,1
    3e50:	41000015 	stw	r4,0(r8)
    3e54:	01000044 	movi	r4,1
    3e58:	41000115 	stw	r4,4(r8)
    3e5c:	d8c02015 	stw	r3,128(sp)
    3e60:	d8801f15 	stw	r2,124(sp)
    3e64:	010001c4 	movi	r4,7
    3e68:	2082b816 	blt	r4,r2,494c <___vfprintf_internal_r+0x1948>
    3e6c:	42000204 	addi	r8,r8,8
    3e70:	d8802617 	ldw	r2,152(sp)
    3e74:	d9403317 	ldw	r5,204(sp)
    3e78:	11400216 	blt	r2,r5,3e84 <___vfprintf_internal_r+0xe80>
    3e7c:	9080004c 	andi	r2,r18,1
    3e80:	103ed526 	beq	r2,zero,39d8 <__alt_data_end+0xfffc39d8>
    3e84:	d8803717 	ldw	r2,220(sp)
    3e88:	d9003417 	ldw	r4,208(sp)
    3e8c:	d9403717 	ldw	r5,220(sp)
    3e90:	1887883a 	add	r3,r3,r2
    3e94:	d8801f17 	ldw	r2,124(sp)
    3e98:	41000015 	stw	r4,0(r8)
    3e9c:	41400115 	stw	r5,4(r8)
    3ea0:	10800044 	addi	r2,r2,1
    3ea4:	d8c02015 	stw	r3,128(sp)
    3ea8:	d8801f15 	stw	r2,124(sp)
    3eac:	010001c4 	movi	r4,7
    3eb0:	20832916 	blt	r4,r2,4b58 <___vfprintf_internal_r+0x1b54>
    3eb4:	42000204 	addi	r8,r8,8
    3eb8:	d8803317 	ldw	r2,204(sp)
    3ebc:	143fffc4 	addi	r16,r2,-1
    3ec0:	043ec50e 	bge	zero,r16,39d8 <__alt_data_end+0xfffc39d8>
    3ec4:	04400404 	movi	r17,16
    3ec8:	d8801f17 	ldw	r2,124(sp)
    3ecc:	8c00880e 	bge	r17,r16,40f0 <___vfprintf_internal_r+0x10ec>
    3ed0:	01400074 	movhi	r5,1
    3ed4:	2940ad84 	addi	r5,r5,694
    3ed8:	d9402b15 	stw	r5,172(sp)
    3edc:	058001c4 	movi	r22,7
    3ee0:	dcc02c17 	ldw	r19,176(sp)
    3ee4:	00000306 	br	3ef4 <___vfprintf_internal_r+0xef0>
    3ee8:	42000204 	addi	r8,r8,8
    3eec:	843ffc04 	addi	r16,r16,-16
    3ef0:	8c00820e 	bge	r17,r16,40fc <___vfprintf_internal_r+0x10f8>
    3ef4:	18c00404 	addi	r3,r3,16
    3ef8:	10800044 	addi	r2,r2,1
    3efc:	45000015 	stw	r20,0(r8)
    3f00:	44400115 	stw	r17,4(r8)
    3f04:	d8c02015 	stw	r3,128(sp)
    3f08:	d8801f15 	stw	r2,124(sp)
    3f0c:	b0bff60e 	bge	r22,r2,3ee8 <__alt_data_end+0xfffc3ee8>
    3f10:	d9801e04 	addi	r6,sp,120
    3f14:	b80b883a 	mov	r5,r23
    3f18:	9809883a 	mov	r4,r19
    3f1c:	0009d2c0 	call	9d2c <__sprint_r>
    3f20:	103d3a1e 	bne	r2,zero,340c <__alt_data_end+0xfffc340c>
    3f24:	d8c02017 	ldw	r3,128(sp)
    3f28:	d8801f17 	ldw	r2,124(sp)
    3f2c:	da000404 	addi	r8,sp,16
    3f30:	003fee06 	br	3eec <__alt_data_end+0xfffc3eec>
    3f34:	d9403117 	ldw	r5,196(sp)
    3f38:	d8802a17 	ldw	r2,168(sp)
    3f3c:	28adc83a 	sub	r22,r5,r2
    3f40:	05be630e 	bge	zero,r22,38d0 <__alt_data_end+0xfffc38d0>
    3f44:	07000404 	movi	fp,16
    3f48:	d8801f17 	ldw	r2,124(sp)
    3f4c:	e5838f0e 	bge	fp,r22,4d8c <___vfprintf_internal_r+0x1d88>
    3f50:	01400074 	movhi	r5,1
    3f54:	2940ad84 	addi	r5,r5,694
    3f58:	dc403015 	stw	r17,192(sp)
    3f5c:	d9402b15 	stw	r5,172(sp)
    3f60:	b023883a 	mov	r17,r22
    3f64:	04c001c4 	movi	r19,7
    3f68:	a82d883a 	mov	r22,r21
    3f6c:	902b883a 	mov	r21,r18
    3f70:	8025883a 	mov	r18,r16
    3f74:	dc002c17 	ldw	r16,176(sp)
    3f78:	00000306 	br	3f88 <___vfprintf_internal_r+0xf84>
    3f7c:	8c7ffc04 	addi	r17,r17,-16
    3f80:	42000204 	addi	r8,r8,8
    3f84:	e440110e 	bge	fp,r17,3fcc <___vfprintf_internal_r+0xfc8>
    3f88:	18c00404 	addi	r3,r3,16
    3f8c:	10800044 	addi	r2,r2,1
    3f90:	45000015 	stw	r20,0(r8)
    3f94:	47000115 	stw	fp,4(r8)
    3f98:	d8c02015 	stw	r3,128(sp)
    3f9c:	d8801f15 	stw	r2,124(sp)
    3fa0:	98bff60e 	bge	r19,r2,3f7c <__alt_data_end+0xfffc3f7c>
    3fa4:	d9801e04 	addi	r6,sp,120
    3fa8:	b80b883a 	mov	r5,r23
    3fac:	8009883a 	mov	r4,r16
    3fb0:	0009d2c0 	call	9d2c <__sprint_r>
    3fb4:	103d151e 	bne	r2,zero,340c <__alt_data_end+0xfffc340c>
    3fb8:	8c7ffc04 	addi	r17,r17,-16
    3fbc:	d8c02017 	ldw	r3,128(sp)
    3fc0:	d8801f17 	ldw	r2,124(sp)
    3fc4:	da000404 	addi	r8,sp,16
    3fc8:	e47fef16 	blt	fp,r17,3f88 <__alt_data_end+0xfffc3f88>
    3fcc:	9021883a 	mov	r16,r18
    3fd0:	a825883a 	mov	r18,r21
    3fd4:	b02b883a 	mov	r21,r22
    3fd8:	882d883a 	mov	r22,r17
    3fdc:	dc403017 	ldw	r17,192(sp)
    3fe0:	d9002b17 	ldw	r4,172(sp)
    3fe4:	1d87883a 	add	r3,r3,r22
    3fe8:	10800044 	addi	r2,r2,1
    3fec:	41000015 	stw	r4,0(r8)
    3ff0:	45800115 	stw	r22,4(r8)
    3ff4:	d8c02015 	stw	r3,128(sp)
    3ff8:	d8801f15 	stw	r2,124(sp)
    3ffc:	010001c4 	movi	r4,7
    4000:	20818e16 	blt	r4,r2,463c <___vfprintf_internal_r+0x1638>
    4004:	42000204 	addi	r8,r8,8
    4008:	003e3106 	br	38d0 <__alt_data_end+0xfffc38d0>
    400c:	d9403317 	ldw	r5,204(sp)
    4010:	00800044 	movi	r2,1
    4014:	18c00044 	addi	r3,r3,1
    4018:	1141530e 	bge	r2,r5,4568 <___vfprintf_internal_r+0x1564>
    401c:	dc401f17 	ldw	r17,124(sp)
    4020:	00800044 	movi	r2,1
    4024:	40800115 	stw	r2,4(r8)
    4028:	8c400044 	addi	r17,r17,1
    402c:	44000015 	stw	r16,0(r8)
    4030:	d8c02015 	stw	r3,128(sp)
    4034:	dc401f15 	stw	r17,124(sp)
    4038:	008001c4 	movi	r2,7
    403c:	14416b16 	blt	r2,r17,45ec <___vfprintf_internal_r+0x15e8>
    4040:	42000204 	addi	r8,r8,8
    4044:	d8803717 	ldw	r2,220(sp)
    4048:	d9003417 	ldw	r4,208(sp)
    404c:	8c400044 	addi	r17,r17,1
    4050:	10c7883a 	add	r3,r2,r3
    4054:	40800115 	stw	r2,4(r8)
    4058:	41000015 	stw	r4,0(r8)
    405c:	d8c02015 	stw	r3,128(sp)
    4060:	dc401f15 	stw	r17,124(sp)
    4064:	008001c4 	movi	r2,7
    4068:	14416916 	blt	r2,r17,4610 <___vfprintf_internal_r+0x160c>
    406c:	45800204 	addi	r22,r8,8
    4070:	d9003617 	ldw	r4,216(sp)
    4074:	d9403817 	ldw	r5,224(sp)
    4078:	000d883a 	mov	r6,zero
    407c:	000f883a 	mov	r7,zero
    4080:	d8c03c15 	stw	r3,240(sp)
    4084:	000e4380 	call	e438 <__eqdf2>
    4088:	d8c03c17 	ldw	r3,240(sp)
    408c:	1000bc26 	beq	r2,zero,4380 <___vfprintf_internal_r+0x137c>
    4090:	d9403317 	ldw	r5,204(sp)
    4094:	84000044 	addi	r16,r16,1
    4098:	8c400044 	addi	r17,r17,1
    409c:	28bfffc4 	addi	r2,r5,-1
    40a0:	1887883a 	add	r3,r3,r2
    40a4:	b0800115 	stw	r2,4(r22)
    40a8:	b4000015 	stw	r16,0(r22)
    40ac:	d8c02015 	stw	r3,128(sp)
    40b0:	dc401f15 	stw	r17,124(sp)
    40b4:	008001c4 	movi	r2,7
    40b8:	14414316 	blt	r2,r17,45c8 <___vfprintf_internal_r+0x15c4>
    40bc:	b5800204 	addi	r22,r22,8
    40c0:	d9003a17 	ldw	r4,232(sp)
    40c4:	df0022c4 	addi	fp,sp,139
    40c8:	8c400044 	addi	r17,r17,1
    40cc:	20c7883a 	add	r3,r4,r3
    40d0:	b7000015 	stw	fp,0(r22)
    40d4:	b1000115 	stw	r4,4(r22)
    40d8:	d8c02015 	stw	r3,128(sp)
    40dc:	dc401f15 	stw	r17,124(sp)
    40e0:	008001c4 	movi	r2,7
    40e4:	14400e16 	blt	r2,r17,4120 <___vfprintf_internal_r+0x111c>
    40e8:	b2000204 	addi	r8,r22,8
    40ec:	003e3a06 	br	39d8 <__alt_data_end+0xfffc39d8>
    40f0:	01000074 	movhi	r4,1
    40f4:	2100ad84 	addi	r4,r4,694
    40f8:	d9002b15 	stw	r4,172(sp)
    40fc:	d9002b17 	ldw	r4,172(sp)
    4100:	1c07883a 	add	r3,r3,r16
    4104:	44000115 	stw	r16,4(r8)
    4108:	41000015 	stw	r4,0(r8)
    410c:	10800044 	addi	r2,r2,1
    4110:	d8c02015 	stw	r3,128(sp)
    4114:	d8801f15 	stw	r2,124(sp)
    4118:	010001c4 	movi	r4,7
    411c:	20be2d0e 	bge	r4,r2,39d4 <__alt_data_end+0xfffc39d4>
    4120:	d9002c17 	ldw	r4,176(sp)
    4124:	d9801e04 	addi	r6,sp,120
    4128:	b80b883a 	mov	r5,r23
    412c:	0009d2c0 	call	9d2c <__sprint_r>
    4130:	103cb61e 	bne	r2,zero,340c <__alt_data_end+0xfffc340c>
    4134:	d8c02017 	ldw	r3,128(sp)
    4138:	da000404 	addi	r8,sp,16
    413c:	003e2606 	br	39d8 <__alt_data_end+0xfffc39d8>
    4140:	d9002c17 	ldw	r4,176(sp)
    4144:	d9801e04 	addi	r6,sp,120
    4148:	b80b883a 	mov	r5,r23
    414c:	0009d2c0 	call	9d2c <__sprint_r>
    4150:	103e5d26 	beq	r2,zero,3ac8 <__alt_data_end+0xfffc3ac8>
    4154:	003cad06 	br	340c <__alt_data_end+0xfffc340c>
    4158:	d9002c17 	ldw	r4,176(sp)
    415c:	d9801e04 	addi	r6,sp,120
    4160:	b80b883a 	mov	r5,r23
    4164:	0009d2c0 	call	9d2c <__sprint_r>
    4168:	103ca81e 	bne	r2,zero,340c <__alt_data_end+0xfffc340c>
    416c:	d8c02017 	ldw	r3,128(sp)
    4170:	da000404 	addi	r8,sp,16
    4174:	003e0b06 	br	39a4 <__alt_data_end+0xfffc39a4>
    4178:	d9002c17 	ldw	r4,176(sp)
    417c:	d9801e04 	addi	r6,sp,120
    4180:	b80b883a 	mov	r5,r23
    4184:	0009d2c0 	call	9d2c <__sprint_r>
    4188:	103ca01e 	bne	r2,zero,340c <__alt_data_end+0xfffc340c>
    418c:	d8c02017 	ldw	r3,128(sp)
    4190:	da000404 	addi	r8,sp,16
    4194:	003dbd06 	br	388c <__alt_data_end+0xfffc388c>
    4198:	d9002c17 	ldw	r4,176(sp)
    419c:	d9801e04 	addi	r6,sp,120
    41a0:	b80b883a 	mov	r5,r23
    41a4:	0009d2c0 	call	9d2c <__sprint_r>
    41a8:	103c981e 	bne	r2,zero,340c <__alt_data_end+0xfffc340c>
    41ac:	d8c02017 	ldw	r3,128(sp)
    41b0:	da000404 	addi	r8,sp,16
    41b4:	003dc306 	br	38c4 <__alt_data_end+0xfffc38c4>
    41b8:	d8802917 	ldw	r2,164(sp)
    41bc:	d8002785 	stb	zero,158(sp)
    41c0:	103f0616 	blt	r2,zero,3ddc <__alt_data_end+0xfffc3ddc>
    41c4:	00ffdfc4 	movi	r3,-129
    41c8:	9d84b03a 	or	r2,r19,r22
    41cc:	90e4703a 	and	r18,r18,r3
    41d0:	103c6b26 	beq	r2,zero,3380 <__alt_data_end+0xfffc3380>
    41d4:	0039883a 	mov	fp,zero
    41d8:	003e7406 	br	3bac <__alt_data_end+0xfffc3bac>
    41dc:	9080040c 	andi	r2,r18,16
    41e0:	1001b326 	beq	r2,zero,48b0 <___vfprintf_internal_r+0x18ac>
    41e4:	d9002d17 	ldw	r4,180(sp)
    41e8:	d9402917 	ldw	r5,164(sp)
    41ec:	d8002785 	stb	zero,158(sp)
    41f0:	20800104 	addi	r2,r4,4
    41f4:	24c00017 	ldw	r19,0(r4)
    41f8:	002d883a 	mov	r22,zero
    41fc:	2801b516 	blt	r5,zero,48d4 <___vfprintf_internal_r+0x18d0>
    4200:	00ffdfc4 	movi	r3,-129
    4204:	d8802d15 	stw	r2,180(sp)
    4208:	90e4703a 	and	r18,r18,r3
    420c:	983d2726 	beq	r19,zero,36ac <__alt_data_end+0xfffc36ac>
    4210:	0039883a 	mov	fp,zero
    4214:	003d2a06 	br	36c0 <__alt_data_end+0xfffc36c0>
    4218:	dc402617 	ldw	r17,152(sp)
    421c:	0441d30e 	bge	zero,r17,496c <___vfprintf_internal_r+0x1968>
    4220:	dc403217 	ldw	r17,200(sp)
    4224:	d8803317 	ldw	r2,204(sp)
    4228:	1440010e 	bge	r2,r17,4230 <___vfprintf_internal_r+0x122c>
    422c:	1023883a 	mov	r17,r2
    4230:	04400a0e 	bge	zero,r17,425c <___vfprintf_internal_r+0x1258>
    4234:	d8801f17 	ldw	r2,124(sp)
    4238:	1c47883a 	add	r3,r3,r17
    423c:	44000015 	stw	r16,0(r8)
    4240:	10800044 	addi	r2,r2,1
    4244:	44400115 	stw	r17,4(r8)
    4248:	d8c02015 	stw	r3,128(sp)
    424c:	d8801f15 	stw	r2,124(sp)
    4250:	010001c4 	movi	r4,7
    4254:	20826516 	blt	r4,r2,4bec <___vfprintf_internal_r+0x1be8>
    4258:	42000204 	addi	r8,r8,8
    425c:	88026116 	blt	r17,zero,4be4 <___vfprintf_internal_r+0x1be0>
    4260:	d9003217 	ldw	r4,200(sp)
    4264:	2463c83a 	sub	r17,r4,r17
    4268:	04407b0e 	bge	zero,r17,4458 <___vfprintf_internal_r+0x1454>
    426c:	05800404 	movi	r22,16
    4270:	d8801f17 	ldw	r2,124(sp)
    4274:	b4419d0e 	bge	r22,r17,48ec <___vfprintf_internal_r+0x18e8>
    4278:	01000074 	movhi	r4,1
    427c:	2100ad84 	addi	r4,r4,694
    4280:	d9002b15 	stw	r4,172(sp)
    4284:	070001c4 	movi	fp,7
    4288:	dcc02c17 	ldw	r19,176(sp)
    428c:	00000306 	br	429c <___vfprintf_internal_r+0x1298>
    4290:	42000204 	addi	r8,r8,8
    4294:	8c7ffc04 	addi	r17,r17,-16
    4298:	b441970e 	bge	r22,r17,48f8 <___vfprintf_internal_r+0x18f4>
    429c:	18c00404 	addi	r3,r3,16
    42a0:	10800044 	addi	r2,r2,1
    42a4:	45000015 	stw	r20,0(r8)
    42a8:	45800115 	stw	r22,4(r8)
    42ac:	d8c02015 	stw	r3,128(sp)
    42b0:	d8801f15 	stw	r2,124(sp)
    42b4:	e0bff60e 	bge	fp,r2,4290 <__alt_data_end+0xfffc4290>
    42b8:	d9801e04 	addi	r6,sp,120
    42bc:	b80b883a 	mov	r5,r23
    42c0:	9809883a 	mov	r4,r19
    42c4:	0009d2c0 	call	9d2c <__sprint_r>
    42c8:	103c501e 	bne	r2,zero,340c <__alt_data_end+0xfffc340c>
    42cc:	d8c02017 	ldw	r3,128(sp)
    42d0:	d8801f17 	ldw	r2,124(sp)
    42d4:	da000404 	addi	r8,sp,16
    42d8:	003fee06 	br	4294 <__alt_data_end+0xfffc4294>
    42dc:	d9002c17 	ldw	r4,176(sp)
    42e0:	d9801e04 	addi	r6,sp,120
    42e4:	b80b883a 	mov	r5,r23
    42e8:	0009d2c0 	call	9d2c <__sprint_r>
    42ec:	103c471e 	bne	r2,zero,340c <__alt_data_end+0xfffc340c>
    42f0:	d8c02017 	ldw	r3,128(sp)
    42f4:	df002787 	ldb	fp,158(sp)
    42f8:	da000404 	addi	r8,sp,16
    42fc:	003d5606 	br	3858 <__alt_data_end+0xfffc3858>
    4300:	9080040c 	andi	r2,r18,16
    4304:	10016126 	beq	r2,zero,488c <___vfprintf_internal_r+0x1888>
    4308:	d8802d17 	ldw	r2,180(sp)
    430c:	14c00017 	ldw	r19,0(r2)
    4310:	10800104 	addi	r2,r2,4
    4314:	d8802d15 	stw	r2,180(sp)
    4318:	982dd7fa 	srai	r22,r19,31
    431c:	b005883a 	mov	r2,r22
    4320:	003c8206 	br	352c <__alt_data_end+0xfffc352c>
    4324:	9080040c 	andi	r2,r18,16
    4328:	10003526 	beq	r2,zero,4400 <___vfprintf_internal_r+0x13fc>
    432c:	d9402d17 	ldw	r5,180(sp)
    4330:	d8c02917 	ldw	r3,164(sp)
    4334:	d8002785 	stb	zero,158(sp)
    4338:	28800104 	addi	r2,r5,4
    433c:	2cc00017 	ldw	r19,0(r5)
    4340:	002d883a 	mov	r22,zero
    4344:	18003716 	blt	r3,zero,4424 <___vfprintf_internal_r+0x1420>
    4348:	00ffdfc4 	movi	r3,-129
    434c:	d8802d15 	stw	r2,180(sp)
    4350:	90e4703a 	and	r18,r18,r3
    4354:	0039883a 	mov	fp,zero
    4358:	983df326 	beq	r19,zero,3b28 <__alt_data_end+0xfffc3b28>
    435c:	00800244 	movi	r2,9
    4360:	14fc7b36 	bltu	r2,r19,3550 <__alt_data_end+0xfffc3550>
    4364:	d8c02817 	ldw	r3,160(sp)
    4368:	dc001dc4 	addi	r16,sp,119
    436c:	9cc00c04 	addi	r19,r19,48
    4370:	1c07c83a 	sub	r3,r3,r16
    4374:	dcc01dc5 	stb	r19,119(sp)
    4378:	d8c02e15 	stw	r3,184(sp)
    437c:	003ce806 	br	3720 <__alt_data_end+0xfffc3720>
    4380:	d8803317 	ldw	r2,204(sp)
    4384:	143fffc4 	addi	r16,r2,-1
    4388:	043f4d0e 	bge	zero,r16,40c0 <__alt_data_end+0xfffc40c0>
    438c:	07000404 	movi	fp,16
    4390:	e400810e 	bge	fp,r16,4598 <___vfprintf_internal_r+0x1594>
    4394:	01400074 	movhi	r5,1
    4398:	2940ad84 	addi	r5,r5,694
    439c:	d9402b15 	stw	r5,172(sp)
    43a0:	01c001c4 	movi	r7,7
    43a4:	dcc02c17 	ldw	r19,176(sp)
    43a8:	00000306 	br	43b8 <___vfprintf_internal_r+0x13b4>
    43ac:	b5800204 	addi	r22,r22,8
    43b0:	843ffc04 	addi	r16,r16,-16
    43b4:	e4007b0e 	bge	fp,r16,45a4 <___vfprintf_internal_r+0x15a0>
    43b8:	18c00404 	addi	r3,r3,16
    43bc:	8c400044 	addi	r17,r17,1
    43c0:	b5000015 	stw	r20,0(r22)
    43c4:	b7000115 	stw	fp,4(r22)
    43c8:	d8c02015 	stw	r3,128(sp)
    43cc:	dc401f15 	stw	r17,124(sp)
    43d0:	3c7ff60e 	bge	r7,r17,43ac <__alt_data_end+0xfffc43ac>
    43d4:	d9801e04 	addi	r6,sp,120
    43d8:	b80b883a 	mov	r5,r23
    43dc:	9809883a 	mov	r4,r19
    43e0:	d9c03c15 	stw	r7,240(sp)
    43e4:	0009d2c0 	call	9d2c <__sprint_r>
    43e8:	d9c03c17 	ldw	r7,240(sp)
    43ec:	103c071e 	bne	r2,zero,340c <__alt_data_end+0xfffc340c>
    43f0:	d8c02017 	ldw	r3,128(sp)
    43f4:	dc401f17 	ldw	r17,124(sp)
    43f8:	dd800404 	addi	r22,sp,16
    43fc:	003fec06 	br	43b0 <__alt_data_end+0xfffc43b0>
    4400:	9080100c 	andi	r2,r18,64
    4404:	d8002785 	stb	zero,158(sp)
    4408:	10010e26 	beq	r2,zero,4844 <___vfprintf_internal_r+0x1840>
    440c:	d9002d17 	ldw	r4,180(sp)
    4410:	d9402917 	ldw	r5,164(sp)
    4414:	002d883a 	mov	r22,zero
    4418:	20800104 	addi	r2,r4,4
    441c:	24c0000b 	ldhu	r19,0(r4)
    4420:	283fc90e 	bge	r5,zero,4348 <__alt_data_end+0xfffc4348>
    4424:	d8802d15 	stw	r2,180(sp)
    4428:	0039883a 	mov	fp,zero
    442c:	9d84b03a 	or	r2,r19,r22
    4430:	103c461e 	bne	r2,zero,354c <__alt_data_end+0xfffc354c>
    4434:	00800044 	movi	r2,1
    4438:	003e6c06 	br	3dec <__alt_data_end+0xfffc3dec>
    443c:	d9002c17 	ldw	r4,176(sp)
    4440:	d9801e04 	addi	r6,sp,120
    4444:	b80b883a 	mov	r5,r23
    4448:	0009d2c0 	call	9d2c <__sprint_r>
    444c:	103bef1e 	bne	r2,zero,340c <__alt_data_end+0xfffc340c>
    4450:	d8c02017 	ldw	r3,128(sp)
    4454:	da000404 	addi	r8,sp,16
    4458:	d9003217 	ldw	r4,200(sp)
    445c:	d8802617 	ldw	r2,152(sp)
    4460:	d9403317 	ldw	r5,204(sp)
    4464:	8123883a 	add	r17,r16,r4
    4468:	11400216 	blt	r2,r5,4474 <___vfprintf_internal_r+0x1470>
    446c:	9100004c 	andi	r4,r18,1
    4470:	20000d26 	beq	r4,zero,44a8 <___vfprintf_internal_r+0x14a4>
    4474:	d9003717 	ldw	r4,220(sp)
    4478:	d9403417 	ldw	r5,208(sp)
    447c:	1907883a 	add	r3,r3,r4
    4480:	d9001f17 	ldw	r4,124(sp)
    4484:	41400015 	stw	r5,0(r8)
    4488:	d9403717 	ldw	r5,220(sp)
    448c:	21000044 	addi	r4,r4,1
    4490:	d8c02015 	stw	r3,128(sp)
    4494:	41400115 	stw	r5,4(r8)
    4498:	d9001f15 	stw	r4,124(sp)
    449c:	014001c4 	movi	r5,7
    44a0:	2901e816 	blt	r5,r4,4c44 <___vfprintf_internal_r+0x1c40>
    44a4:	42000204 	addi	r8,r8,8
    44a8:	d9003317 	ldw	r4,204(sp)
    44ac:	8121883a 	add	r16,r16,r4
    44b0:	2085c83a 	sub	r2,r4,r2
    44b4:	8461c83a 	sub	r16,r16,r17
    44b8:	1400010e 	bge	r2,r16,44c0 <___vfprintf_internal_r+0x14bc>
    44bc:	1021883a 	mov	r16,r2
    44c0:	04000a0e 	bge	zero,r16,44ec <___vfprintf_internal_r+0x14e8>
    44c4:	d9001f17 	ldw	r4,124(sp)
    44c8:	1c07883a 	add	r3,r3,r16
    44cc:	44400015 	stw	r17,0(r8)
    44d0:	21000044 	addi	r4,r4,1
    44d4:	44000115 	stw	r16,4(r8)
    44d8:	d8c02015 	stw	r3,128(sp)
    44dc:	d9001f15 	stw	r4,124(sp)
    44e0:	014001c4 	movi	r5,7
    44e4:	2901fb16 	blt	r5,r4,4cd4 <___vfprintf_internal_r+0x1cd0>
    44e8:	42000204 	addi	r8,r8,8
    44ec:	8001f716 	blt	r16,zero,4ccc <___vfprintf_internal_r+0x1cc8>
    44f0:	1421c83a 	sub	r16,r2,r16
    44f4:	043d380e 	bge	zero,r16,39d8 <__alt_data_end+0xfffc39d8>
    44f8:	04400404 	movi	r17,16
    44fc:	d8801f17 	ldw	r2,124(sp)
    4500:	8c3efb0e 	bge	r17,r16,40f0 <__alt_data_end+0xfffc40f0>
    4504:	01400074 	movhi	r5,1
    4508:	2940ad84 	addi	r5,r5,694
    450c:	d9402b15 	stw	r5,172(sp)
    4510:	058001c4 	movi	r22,7
    4514:	dcc02c17 	ldw	r19,176(sp)
    4518:	00000306 	br	4528 <___vfprintf_internal_r+0x1524>
    451c:	42000204 	addi	r8,r8,8
    4520:	843ffc04 	addi	r16,r16,-16
    4524:	8c3ef50e 	bge	r17,r16,40fc <__alt_data_end+0xfffc40fc>
    4528:	18c00404 	addi	r3,r3,16
    452c:	10800044 	addi	r2,r2,1
    4530:	45000015 	stw	r20,0(r8)
    4534:	44400115 	stw	r17,4(r8)
    4538:	d8c02015 	stw	r3,128(sp)
    453c:	d8801f15 	stw	r2,124(sp)
    4540:	b0bff60e 	bge	r22,r2,451c <__alt_data_end+0xfffc451c>
    4544:	d9801e04 	addi	r6,sp,120
    4548:	b80b883a 	mov	r5,r23
    454c:	9809883a 	mov	r4,r19
    4550:	0009d2c0 	call	9d2c <__sprint_r>
    4554:	103bad1e 	bne	r2,zero,340c <__alt_data_end+0xfffc340c>
    4558:	d8c02017 	ldw	r3,128(sp)
    455c:	d8801f17 	ldw	r2,124(sp)
    4560:	da000404 	addi	r8,sp,16
    4564:	003fee06 	br	4520 <__alt_data_end+0xfffc4520>
    4568:	9088703a 	and	r4,r18,r2
    456c:	203eab1e 	bne	r4,zero,401c <__alt_data_end+0xfffc401c>
    4570:	dc401f17 	ldw	r17,124(sp)
    4574:	40800115 	stw	r2,4(r8)
    4578:	44000015 	stw	r16,0(r8)
    457c:	8c400044 	addi	r17,r17,1
    4580:	d8c02015 	stw	r3,128(sp)
    4584:	dc401f15 	stw	r17,124(sp)
    4588:	008001c4 	movi	r2,7
    458c:	14400e16 	blt	r2,r17,45c8 <___vfprintf_internal_r+0x15c4>
    4590:	45800204 	addi	r22,r8,8
    4594:	003eca06 	br	40c0 <__alt_data_end+0xfffc40c0>
    4598:	01000074 	movhi	r4,1
    459c:	2100ad84 	addi	r4,r4,694
    45a0:	d9002b15 	stw	r4,172(sp)
    45a4:	d8802b17 	ldw	r2,172(sp)
    45a8:	1c07883a 	add	r3,r3,r16
    45ac:	8c400044 	addi	r17,r17,1
    45b0:	b0800015 	stw	r2,0(r22)
    45b4:	b4000115 	stw	r16,4(r22)
    45b8:	d8c02015 	stw	r3,128(sp)
    45bc:	dc401f15 	stw	r17,124(sp)
    45c0:	008001c4 	movi	r2,7
    45c4:	147ebd0e 	bge	r2,r17,40bc <__alt_data_end+0xfffc40bc>
    45c8:	d9002c17 	ldw	r4,176(sp)
    45cc:	d9801e04 	addi	r6,sp,120
    45d0:	b80b883a 	mov	r5,r23
    45d4:	0009d2c0 	call	9d2c <__sprint_r>
    45d8:	103b8c1e 	bne	r2,zero,340c <__alt_data_end+0xfffc340c>
    45dc:	d8c02017 	ldw	r3,128(sp)
    45e0:	dc401f17 	ldw	r17,124(sp)
    45e4:	dd800404 	addi	r22,sp,16
    45e8:	003eb506 	br	40c0 <__alt_data_end+0xfffc40c0>
    45ec:	d9002c17 	ldw	r4,176(sp)
    45f0:	d9801e04 	addi	r6,sp,120
    45f4:	b80b883a 	mov	r5,r23
    45f8:	0009d2c0 	call	9d2c <__sprint_r>
    45fc:	103b831e 	bne	r2,zero,340c <__alt_data_end+0xfffc340c>
    4600:	d8c02017 	ldw	r3,128(sp)
    4604:	dc401f17 	ldw	r17,124(sp)
    4608:	da000404 	addi	r8,sp,16
    460c:	003e8d06 	br	4044 <__alt_data_end+0xfffc4044>
    4610:	d9002c17 	ldw	r4,176(sp)
    4614:	d9801e04 	addi	r6,sp,120
    4618:	b80b883a 	mov	r5,r23
    461c:	0009d2c0 	call	9d2c <__sprint_r>
    4620:	103b7a1e 	bne	r2,zero,340c <__alt_data_end+0xfffc340c>
    4624:	d8c02017 	ldw	r3,128(sp)
    4628:	dc401f17 	ldw	r17,124(sp)
    462c:	dd800404 	addi	r22,sp,16
    4630:	003e8f06 	br	4070 <__alt_data_end+0xfffc4070>
    4634:	0027883a 	mov	r19,zero
    4638:	003f4a06 	br	4364 <__alt_data_end+0xfffc4364>
    463c:	d9002c17 	ldw	r4,176(sp)
    4640:	d9801e04 	addi	r6,sp,120
    4644:	b80b883a 	mov	r5,r23
    4648:	0009d2c0 	call	9d2c <__sprint_r>
    464c:	103b6f1e 	bne	r2,zero,340c <__alt_data_end+0xfffc340c>
    4650:	d8c02017 	ldw	r3,128(sp)
    4654:	da000404 	addi	r8,sp,16
    4658:	003c9d06 	br	38d0 <__alt_data_end+0xfffc38d0>
    465c:	04e7c83a 	sub	r19,zero,r19
    4660:	9804c03a 	cmpne	r2,r19,zero
    4664:	05adc83a 	sub	r22,zero,r22
    4668:	b0adc83a 	sub	r22,r22,r2
    466c:	d8802917 	ldw	r2,164(sp)
    4670:	07000b44 	movi	fp,45
    4674:	df002785 	stb	fp,158(sp)
    4678:	10017b16 	blt	r2,zero,4c68 <___vfprintf_internal_r+0x1c64>
    467c:	00bfdfc4 	movi	r2,-129
    4680:	90a4703a 	and	r18,r18,r2
    4684:	003bb106 	br	354c <__alt_data_end+0xfffc354c>
    4688:	d9003617 	ldw	r4,216(sp)
    468c:	d9403817 	ldw	r5,224(sp)
    4690:	da003d15 	stw	r8,244(sp)
    4694:	00099500 	call	9950 <__fpclassifyd>
    4698:	da003d17 	ldw	r8,244(sp)
    469c:	1000f026 	beq	r2,zero,4a60 <___vfprintf_internal_r+0x1a5c>
    46a0:	d9002917 	ldw	r4,164(sp)
    46a4:	05bff7c4 	movi	r22,-33
    46a8:	00bfffc4 	movi	r2,-1
    46ac:	8dac703a 	and	r22,r17,r22
    46b0:	20820026 	beq	r4,r2,4eb4 <___vfprintf_internal_r+0x1eb0>
    46b4:	008011c4 	movi	r2,71
    46b8:	b081f726 	beq	r22,r2,4e98 <___vfprintf_internal_r+0x1e94>
    46bc:	d9003817 	ldw	r4,224(sp)
    46c0:	90c04014 	ori	r3,r18,256
    46c4:	d8c02b15 	stw	r3,172(sp)
    46c8:	20021516 	blt	r4,zero,4f20 <___vfprintf_internal_r+0x1f1c>
    46cc:	dcc03817 	ldw	r19,224(sp)
    46d0:	d8002a05 	stb	zero,168(sp)
    46d4:	00801984 	movi	r2,102
    46d8:	8881f926 	beq	r17,r2,4ec0 <___vfprintf_internal_r+0x1ebc>
    46dc:	00801184 	movi	r2,70
    46e0:	88821c26 	beq	r17,r2,4f54 <___vfprintf_internal_r+0x1f50>
    46e4:	00801144 	movi	r2,69
    46e8:	b081ef26 	beq	r22,r2,4ea8 <___vfprintf_internal_r+0x1ea4>
    46ec:	d8c02917 	ldw	r3,164(sp)
    46f0:	d8802104 	addi	r2,sp,132
    46f4:	d8800315 	stw	r2,12(sp)
    46f8:	d9403617 	ldw	r5,216(sp)
    46fc:	d8802504 	addi	r2,sp,148
    4700:	d9002c17 	ldw	r4,176(sp)
    4704:	d8800215 	stw	r2,8(sp)
    4708:	d8802604 	addi	r2,sp,152
    470c:	d8c00015 	stw	r3,0(sp)
    4710:	d8800115 	stw	r2,4(sp)
    4714:	01c00084 	movi	r7,2
    4718:	980d883a 	mov	r6,r19
    471c:	d8c03c15 	stw	r3,240(sp)
    4720:	da003d15 	stw	r8,244(sp)
    4724:	0005a180 	call	5a18 <_dtoa_r>
    4728:	1021883a 	mov	r16,r2
    472c:	008019c4 	movi	r2,103
    4730:	d8c03c17 	ldw	r3,240(sp)
    4734:	da003d17 	ldw	r8,244(sp)
    4738:	88817126 	beq	r17,r2,4d00 <___vfprintf_internal_r+0x1cfc>
    473c:	008011c4 	movi	r2,71
    4740:	88829226 	beq	r17,r2,518c <___vfprintf_internal_r+0x2188>
    4744:	80f9883a 	add	fp,r16,r3
    4748:	d9003617 	ldw	r4,216(sp)
    474c:	000d883a 	mov	r6,zero
    4750:	000f883a 	mov	r7,zero
    4754:	980b883a 	mov	r5,r19
    4758:	da003d15 	stw	r8,244(sp)
    475c:	000e4380 	call	e438 <__eqdf2>
    4760:	da003d17 	ldw	r8,244(sp)
    4764:	10018d26 	beq	r2,zero,4d9c <___vfprintf_internal_r+0x1d98>
    4768:	d8802117 	ldw	r2,132(sp)
    476c:	1700062e 	bgeu	r2,fp,4788 <___vfprintf_internal_r+0x1784>
    4770:	01000c04 	movi	r4,48
    4774:	10c00044 	addi	r3,r2,1
    4778:	d8c02115 	stw	r3,132(sp)
    477c:	11000005 	stb	r4,0(r2)
    4780:	d8802117 	ldw	r2,132(sp)
    4784:	173ffb36 	bltu	r2,fp,4774 <__alt_data_end+0xfffc4774>
    4788:	1405c83a 	sub	r2,r2,r16
    478c:	d8803315 	stw	r2,204(sp)
    4790:	008011c4 	movi	r2,71
    4794:	b0817626 	beq	r22,r2,4d70 <___vfprintf_internal_r+0x1d6c>
    4798:	00801944 	movi	r2,101
    479c:	1442810e 	bge	r2,r17,51a4 <___vfprintf_internal_r+0x21a0>
    47a0:	d8c02617 	ldw	r3,152(sp)
    47a4:	00801984 	movi	r2,102
    47a8:	d8c03215 	stw	r3,200(sp)
    47ac:	8881fe26 	beq	r17,r2,4fa8 <___vfprintf_internal_r+0x1fa4>
    47b0:	d8c03217 	ldw	r3,200(sp)
    47b4:	d9003317 	ldw	r4,204(sp)
    47b8:	1901dd16 	blt	r3,r4,4f30 <___vfprintf_internal_r+0x1f2c>
    47bc:	9480004c 	andi	r18,r18,1
    47c0:	90022b1e 	bne	r18,zero,5070 <___vfprintf_internal_r+0x206c>
    47c4:	1805883a 	mov	r2,r3
    47c8:	18028016 	blt	r3,zero,51cc <___vfprintf_internal_r+0x21c8>
    47cc:	d8c03217 	ldw	r3,200(sp)
    47d0:	044019c4 	movi	r17,103
    47d4:	d8c02e15 	stw	r3,184(sp)
    47d8:	df002a07 	ldb	fp,168(sp)
    47dc:	e001531e 	bne	fp,zero,4d2c <___vfprintf_internal_r+0x1d28>
    47e0:	df002783 	ldbu	fp,158(sp)
    47e4:	d8802a15 	stw	r2,168(sp)
    47e8:	dc802b17 	ldw	r18,172(sp)
    47ec:	d8002915 	stw	zero,164(sp)
    47f0:	003bd106 	br	3738 <__alt_data_end+0xfffc3738>
    47f4:	d8802d17 	ldw	r2,180(sp)
    47f8:	d8c02d17 	ldw	r3,180(sp)
    47fc:	d9002d17 	ldw	r4,180(sp)
    4800:	10800017 	ldw	r2,0(r2)
    4804:	18c00117 	ldw	r3,4(r3)
    4808:	21000204 	addi	r4,r4,8
    480c:	d8803615 	stw	r2,216(sp)
    4810:	d8c03815 	stw	r3,224(sp)
    4814:	d9002d15 	stw	r4,180(sp)
    4818:	003b7506 	br	35f0 <__alt_data_end+0xfffc35f0>
    481c:	ac400007 	ldb	r17,0(r21)
    4820:	003a5906 	br	3188 <__alt_data_end+0xfffc3188>
    4824:	9080100c 	andi	r2,r18,64
    4828:	1000a826 	beq	r2,zero,4acc <___vfprintf_internal_r+0x1ac8>
    482c:	d9002d17 	ldw	r4,180(sp)
    4830:	002d883a 	mov	r22,zero
    4834:	24c0000b 	ldhu	r19,0(r4)
    4838:	21000104 	addi	r4,r4,4
    483c:	d9002d15 	stw	r4,180(sp)
    4840:	003ccb06 	br	3b70 <__alt_data_end+0xfffc3b70>
    4844:	d8c02d17 	ldw	r3,180(sp)
    4848:	d9002917 	ldw	r4,164(sp)
    484c:	002d883a 	mov	r22,zero
    4850:	18800104 	addi	r2,r3,4
    4854:	1cc00017 	ldw	r19,0(r3)
    4858:	203ebb0e 	bge	r4,zero,4348 <__alt_data_end+0xfffc4348>
    485c:	003ef106 	br	4424 <__alt_data_end+0xfffc4424>
    4860:	9080040c 	andi	r2,r18,16
    4864:	1000921e 	bne	r2,zero,4ab0 <___vfprintf_internal_r+0x1aac>
    4868:	9480100c 	andi	r18,r18,64
    486c:	90013926 	beq	r18,zero,4d54 <___vfprintf_internal_r+0x1d50>
    4870:	d9002d17 	ldw	r4,180(sp)
    4874:	d9402f17 	ldw	r5,188(sp)
    4878:	20800017 	ldw	r2,0(r4)
    487c:	21000104 	addi	r4,r4,4
    4880:	d9002d15 	stw	r4,180(sp)
    4884:	1140000d 	sth	r5,0(r2)
    4888:	003a1606 	br	30e4 <__alt_data_end+0xfffc30e4>
    488c:	9080100c 	andi	r2,r18,64
    4890:	10008026 	beq	r2,zero,4a94 <___vfprintf_internal_r+0x1a90>
    4894:	d8c02d17 	ldw	r3,180(sp)
    4898:	1cc0000f 	ldh	r19,0(r3)
    489c:	18c00104 	addi	r3,r3,4
    48a0:	d8c02d15 	stw	r3,180(sp)
    48a4:	982dd7fa 	srai	r22,r19,31
    48a8:	b005883a 	mov	r2,r22
    48ac:	003b1f06 	br	352c <__alt_data_end+0xfffc352c>
    48b0:	9080100c 	andi	r2,r18,64
    48b4:	d8002785 	stb	zero,158(sp)
    48b8:	10008a1e 	bne	r2,zero,4ae4 <___vfprintf_internal_r+0x1ae0>
    48bc:	d9402d17 	ldw	r5,180(sp)
    48c0:	d8c02917 	ldw	r3,164(sp)
    48c4:	002d883a 	mov	r22,zero
    48c8:	28800104 	addi	r2,r5,4
    48cc:	2cc00017 	ldw	r19,0(r5)
    48d0:	183e4b0e 	bge	r3,zero,4200 <__alt_data_end+0xfffc4200>
    48d4:	9d86b03a 	or	r3,r19,r22
    48d8:	d8802d15 	stw	r2,180(sp)
    48dc:	183e4c1e 	bne	r3,zero,4210 <__alt_data_end+0xfffc4210>
    48e0:	0039883a 	mov	fp,zero
    48e4:	0005883a 	mov	r2,zero
    48e8:	003d4006 	br	3dec <__alt_data_end+0xfffc3dec>
    48ec:	01400074 	movhi	r5,1
    48f0:	2940ad84 	addi	r5,r5,694
    48f4:	d9402b15 	stw	r5,172(sp)
    48f8:	d9402b17 	ldw	r5,172(sp)
    48fc:	1c47883a 	add	r3,r3,r17
    4900:	10800044 	addi	r2,r2,1
    4904:	41400015 	stw	r5,0(r8)
    4908:	44400115 	stw	r17,4(r8)
    490c:	d8c02015 	stw	r3,128(sp)
    4910:	d8801f15 	stw	r2,124(sp)
    4914:	010001c4 	movi	r4,7
    4918:	20bec816 	blt	r4,r2,443c <__alt_data_end+0xfffc443c>
    491c:	42000204 	addi	r8,r8,8
    4920:	003ecd06 	br	4458 <__alt_data_end+0xfffc4458>
    4924:	d9002917 	ldw	r4,164(sp)
    4928:	d8002785 	stb	zero,158(sp)
    492c:	203d2d16 	blt	r4,zero,3de4 <__alt_data_end+0xfffc3de4>
    4930:	00bfdfc4 	movi	r2,-129
    4934:	90a4703a 	and	r18,r18,r2
    4938:	003a9106 	br	3380 <__alt_data_end+0xfffc3380>
    493c:	01000074 	movhi	r4,1
    4940:	2100ad84 	addi	r4,r4,694
    4944:	d9002b15 	stw	r4,172(sp)
    4948:	003c0c06 	br	397c <__alt_data_end+0xfffc397c>
    494c:	d9002c17 	ldw	r4,176(sp)
    4950:	d9801e04 	addi	r6,sp,120
    4954:	b80b883a 	mov	r5,r23
    4958:	0009d2c0 	call	9d2c <__sprint_r>
    495c:	103aab1e 	bne	r2,zero,340c <__alt_data_end+0xfffc340c>
    4960:	d8c02017 	ldw	r3,128(sp)
    4964:	da000404 	addi	r8,sp,16
    4968:	003d4106 	br	3e70 <__alt_data_end+0xfffc3e70>
    496c:	d8801f17 	ldw	r2,124(sp)
    4970:	01400074 	movhi	r5,1
    4974:	01000044 	movi	r4,1
    4978:	18c00044 	addi	r3,r3,1
    497c:	10800044 	addi	r2,r2,1
    4980:	2940ad04 	addi	r5,r5,692
    4984:	41000115 	stw	r4,4(r8)
    4988:	41400015 	stw	r5,0(r8)
    498c:	d8c02015 	stw	r3,128(sp)
    4990:	d8801f15 	stw	r2,124(sp)
    4994:	010001c4 	movi	r4,7
    4998:	20805c16 	blt	r4,r2,4b0c <___vfprintf_internal_r+0x1b08>
    499c:	42000204 	addi	r8,r8,8
    49a0:	8800041e 	bne	r17,zero,49b4 <___vfprintf_internal_r+0x19b0>
    49a4:	d8803317 	ldw	r2,204(sp)
    49a8:	1000021e 	bne	r2,zero,49b4 <___vfprintf_internal_r+0x19b0>
    49ac:	9080004c 	andi	r2,r18,1
    49b0:	103c0926 	beq	r2,zero,39d8 <__alt_data_end+0xfffc39d8>
    49b4:	d9003717 	ldw	r4,220(sp)
    49b8:	d8801f17 	ldw	r2,124(sp)
    49bc:	d9403417 	ldw	r5,208(sp)
    49c0:	20c7883a 	add	r3,r4,r3
    49c4:	10800044 	addi	r2,r2,1
    49c8:	41000115 	stw	r4,4(r8)
    49cc:	41400015 	stw	r5,0(r8)
    49d0:	d8c02015 	stw	r3,128(sp)
    49d4:	d8801f15 	stw	r2,124(sp)
    49d8:	010001c4 	movi	r4,7
    49dc:	20812116 	blt	r4,r2,4e64 <___vfprintf_internal_r+0x1e60>
    49e0:	42000204 	addi	r8,r8,8
    49e4:	0463c83a 	sub	r17,zero,r17
    49e8:	0440730e 	bge	zero,r17,4bb8 <___vfprintf_internal_r+0x1bb4>
    49ec:	05800404 	movi	r22,16
    49f0:	b440860e 	bge	r22,r17,4c0c <___vfprintf_internal_r+0x1c08>
    49f4:	01400074 	movhi	r5,1
    49f8:	2940ad84 	addi	r5,r5,694
    49fc:	d9402b15 	stw	r5,172(sp)
    4a00:	070001c4 	movi	fp,7
    4a04:	dcc02c17 	ldw	r19,176(sp)
    4a08:	00000306 	br	4a18 <___vfprintf_internal_r+0x1a14>
    4a0c:	42000204 	addi	r8,r8,8
    4a10:	8c7ffc04 	addi	r17,r17,-16
    4a14:	b440800e 	bge	r22,r17,4c18 <___vfprintf_internal_r+0x1c14>
    4a18:	18c00404 	addi	r3,r3,16
    4a1c:	10800044 	addi	r2,r2,1
    4a20:	45000015 	stw	r20,0(r8)
    4a24:	45800115 	stw	r22,4(r8)
    4a28:	d8c02015 	stw	r3,128(sp)
    4a2c:	d8801f15 	stw	r2,124(sp)
    4a30:	e0bff60e 	bge	fp,r2,4a0c <__alt_data_end+0xfffc4a0c>
    4a34:	d9801e04 	addi	r6,sp,120
    4a38:	b80b883a 	mov	r5,r23
    4a3c:	9809883a 	mov	r4,r19
    4a40:	0009d2c0 	call	9d2c <__sprint_r>
    4a44:	103a711e 	bne	r2,zero,340c <__alt_data_end+0xfffc340c>
    4a48:	d8c02017 	ldw	r3,128(sp)
    4a4c:	d8801f17 	ldw	r2,124(sp)
    4a50:	da000404 	addi	r8,sp,16
    4a54:	003fee06 	br	4a10 <__alt_data_end+0xfffc4a10>
    4a58:	00bfffc4 	movi	r2,-1
    4a5c:	003a6f06 	br	341c <__alt_data_end+0xfffc341c>
    4a60:	008011c4 	movi	r2,71
    4a64:	1440b816 	blt	r2,r17,4d48 <___vfprintf_internal_r+0x1d44>
    4a68:	04000074 	movhi	r16,1
    4a6c:	84009f04 	addi	r16,r16,636
    4a70:	00c000c4 	movi	r3,3
    4a74:	00bfdfc4 	movi	r2,-129
    4a78:	d8c02a15 	stw	r3,168(sp)
    4a7c:	90a4703a 	and	r18,r18,r2
    4a80:	df002783 	ldbu	fp,158(sp)
    4a84:	d8c02e15 	stw	r3,184(sp)
    4a88:	d8002915 	stw	zero,164(sp)
    4a8c:	d8003215 	stw	zero,200(sp)
    4a90:	003b2906 	br	3738 <__alt_data_end+0xfffc3738>
    4a94:	d9002d17 	ldw	r4,180(sp)
    4a98:	24c00017 	ldw	r19,0(r4)
    4a9c:	21000104 	addi	r4,r4,4
    4aa0:	d9002d15 	stw	r4,180(sp)
    4aa4:	982dd7fa 	srai	r22,r19,31
    4aa8:	b005883a 	mov	r2,r22
    4aac:	003a9f06 	br	352c <__alt_data_end+0xfffc352c>
    4ab0:	d9402d17 	ldw	r5,180(sp)
    4ab4:	d8c02f17 	ldw	r3,188(sp)
    4ab8:	28800017 	ldw	r2,0(r5)
    4abc:	29400104 	addi	r5,r5,4
    4ac0:	d9402d15 	stw	r5,180(sp)
    4ac4:	10c00015 	stw	r3,0(r2)
    4ac8:	00398606 	br	30e4 <__alt_data_end+0xfffc30e4>
    4acc:	d9402d17 	ldw	r5,180(sp)
    4ad0:	002d883a 	mov	r22,zero
    4ad4:	2cc00017 	ldw	r19,0(r5)
    4ad8:	29400104 	addi	r5,r5,4
    4adc:	d9402d15 	stw	r5,180(sp)
    4ae0:	003c2306 	br	3b70 <__alt_data_end+0xfffc3b70>
    4ae4:	d8c02d17 	ldw	r3,180(sp)
    4ae8:	d9002917 	ldw	r4,164(sp)
    4aec:	002d883a 	mov	r22,zero
    4af0:	18800104 	addi	r2,r3,4
    4af4:	1cc0000b 	ldhu	r19,0(r3)
    4af8:	203dc10e 	bge	r4,zero,4200 <__alt_data_end+0xfffc4200>
    4afc:	003f7506 	br	48d4 <__alt_data_end+0xfffc48d4>
    4b00:	04000074 	movhi	r16,1
    4b04:	84009d04 	addi	r16,r16,628
    4b08:	003acc06 	br	363c <__alt_data_end+0xfffc363c>
    4b0c:	d9002c17 	ldw	r4,176(sp)
    4b10:	d9801e04 	addi	r6,sp,120
    4b14:	b80b883a 	mov	r5,r23
    4b18:	0009d2c0 	call	9d2c <__sprint_r>
    4b1c:	103a3b1e 	bne	r2,zero,340c <__alt_data_end+0xfffc340c>
    4b20:	dc402617 	ldw	r17,152(sp)
    4b24:	d8c02017 	ldw	r3,128(sp)
    4b28:	da000404 	addi	r8,sp,16
    4b2c:	003f9c06 	br	49a0 <__alt_data_end+0xfffc49a0>
    4b30:	ac400043 	ldbu	r17,1(r21)
    4b34:	94800814 	ori	r18,r18,32
    4b38:	ad400044 	addi	r21,r21,1
    4b3c:	8c403fcc 	andi	r17,r17,255
    4b40:	8c40201c 	xori	r17,r17,128
    4b44:	8c7fe004 	addi	r17,r17,-128
    4b48:	00398f06 	br	3188 <__alt_data_end+0xfffc3188>
    4b4c:	d8c02d15 	stw	r3,180(sp)
    4b50:	0039883a 	mov	fp,zero
    4b54:	003e3506 	br	442c <__alt_data_end+0xfffc442c>
    4b58:	d9002c17 	ldw	r4,176(sp)
    4b5c:	d9801e04 	addi	r6,sp,120
    4b60:	b80b883a 	mov	r5,r23
    4b64:	0009d2c0 	call	9d2c <__sprint_r>
    4b68:	103a281e 	bne	r2,zero,340c <__alt_data_end+0xfffc340c>
    4b6c:	d8c02017 	ldw	r3,128(sp)
    4b70:	da000404 	addi	r8,sp,16
    4b74:	003cd006 	br	3eb8 <__alt_data_end+0xfffc3eb8>
    4b78:	8009883a 	mov	r4,r16
    4b7c:	da003d15 	stw	r8,244(sp)
    4b80:	0002f6c0 	call	2f6c <strlen>
    4b84:	d8802e15 	stw	r2,184(sp)
    4b88:	da003d17 	ldw	r8,244(sp)
    4b8c:	103c340e 	bge	r2,zero,3c60 <__alt_data_end+0xfffc3c60>
    4b90:	0005883a 	mov	r2,zero
    4b94:	003c3206 	br	3c60 <__alt_data_end+0xfffc3c60>
    4b98:	d9002c17 	ldw	r4,176(sp)
    4b9c:	d9801e04 	addi	r6,sp,120
    4ba0:	b80b883a 	mov	r5,r23
    4ba4:	0009d2c0 	call	9d2c <__sprint_r>
    4ba8:	103a181e 	bne	r2,zero,340c <__alt_data_end+0xfffc340c>
    4bac:	d8c02017 	ldw	r3,128(sp)
    4bb0:	d8801f17 	ldw	r2,124(sp)
    4bb4:	da000404 	addi	r8,sp,16
    4bb8:	d9403317 	ldw	r5,204(sp)
    4bbc:	10800044 	addi	r2,r2,1
    4bc0:	44000015 	stw	r16,0(r8)
    4bc4:	28c7883a 	add	r3,r5,r3
    4bc8:	003b7d06 	br	39c0 <__alt_data_end+0xfffc39c0>
    4bcc:	01000074 	movhi	r4,1
    4bd0:	2100b184 	addi	r4,r4,710
    4bd4:	d9003515 	stw	r4,212(sp)
    4bd8:	003b1406 	br	382c <__alt_data_end+0xfffc382c>
    4bdc:	013fffc4 	movi	r4,-1
    4be0:	003a3506 	br	34b8 <__alt_data_end+0xfffc34b8>
    4be4:	0023883a 	mov	r17,zero
    4be8:	003d9d06 	br	4260 <__alt_data_end+0xfffc4260>
    4bec:	d9002c17 	ldw	r4,176(sp)
    4bf0:	d9801e04 	addi	r6,sp,120
    4bf4:	b80b883a 	mov	r5,r23
    4bf8:	0009d2c0 	call	9d2c <__sprint_r>
    4bfc:	103a031e 	bne	r2,zero,340c <__alt_data_end+0xfffc340c>
    4c00:	d8c02017 	ldw	r3,128(sp)
    4c04:	da000404 	addi	r8,sp,16
    4c08:	003d9406 	br	425c <__alt_data_end+0xfffc425c>
    4c0c:	01000074 	movhi	r4,1
    4c10:	2100ad84 	addi	r4,r4,694
    4c14:	d9002b15 	stw	r4,172(sp)
    4c18:	d9002b17 	ldw	r4,172(sp)
    4c1c:	1c47883a 	add	r3,r3,r17
    4c20:	10800044 	addi	r2,r2,1
    4c24:	41000015 	stw	r4,0(r8)
    4c28:	44400115 	stw	r17,4(r8)
    4c2c:	d8c02015 	stw	r3,128(sp)
    4c30:	d8801f15 	stw	r2,124(sp)
    4c34:	010001c4 	movi	r4,7
    4c38:	20bfd716 	blt	r4,r2,4b98 <__alt_data_end+0xfffc4b98>
    4c3c:	42000204 	addi	r8,r8,8
    4c40:	003fdd06 	br	4bb8 <__alt_data_end+0xfffc4bb8>
    4c44:	d9002c17 	ldw	r4,176(sp)
    4c48:	d9801e04 	addi	r6,sp,120
    4c4c:	b80b883a 	mov	r5,r23
    4c50:	0009d2c0 	call	9d2c <__sprint_r>
    4c54:	1039ed1e 	bne	r2,zero,340c <__alt_data_end+0xfffc340c>
    4c58:	d8802617 	ldw	r2,152(sp)
    4c5c:	d8c02017 	ldw	r3,128(sp)
    4c60:	da000404 	addi	r8,sp,16
    4c64:	003e1006 	br	44a8 <__alt_data_end+0xfffc44a8>
    4c68:	00800044 	movi	r2,1
    4c6c:	10803fcc 	andi	r2,r2,255
    4c70:	00c00044 	movi	r3,1
    4c74:	10fa3526 	beq	r2,r3,354c <__alt_data_end+0xfffc354c>
    4c78:	00c00084 	movi	r3,2
    4c7c:	10fbcb26 	beq	r2,r3,3bac <__alt_data_end+0xfffc3bac>
    4c80:	003a8f06 	br	36c0 <__alt_data_end+0xfffc36c0>
    4c84:	01000074 	movhi	r4,1
    4c88:	2100b184 	addi	r4,r4,710
    4c8c:	d9003515 	stw	r4,212(sp)
    4c90:	003b7606 	br	3a6c <__alt_data_end+0xfffc3a6c>
    4c94:	d8802917 	ldw	r2,164(sp)
    4c98:	00c00184 	movi	r3,6
    4c9c:	1880012e 	bgeu	r3,r2,4ca4 <___vfprintf_internal_r+0x1ca0>
    4ca0:	1805883a 	mov	r2,r3
    4ca4:	d8802e15 	stw	r2,184(sp)
    4ca8:	1000ef16 	blt	r2,zero,5068 <___vfprintf_internal_r+0x2064>
    4cac:	04000074 	movhi	r16,1
    4cb0:	d8802a15 	stw	r2,168(sp)
    4cb4:	dcc02d15 	stw	r19,180(sp)
    4cb8:	d8002915 	stw	zero,164(sp)
    4cbc:	d8003215 	stw	zero,200(sp)
    4cc0:	8400ab04 	addi	r16,r16,684
    4cc4:	0039883a 	mov	fp,zero
    4cc8:	003aa206 	br	3754 <__alt_data_end+0xfffc3754>
    4ccc:	0021883a 	mov	r16,zero
    4cd0:	003e0706 	br	44f0 <__alt_data_end+0xfffc44f0>
    4cd4:	d9002c17 	ldw	r4,176(sp)
    4cd8:	d9801e04 	addi	r6,sp,120
    4cdc:	b80b883a 	mov	r5,r23
    4ce0:	0009d2c0 	call	9d2c <__sprint_r>
    4ce4:	1039c91e 	bne	r2,zero,340c <__alt_data_end+0xfffc340c>
    4ce8:	d8802617 	ldw	r2,152(sp)
    4cec:	d9403317 	ldw	r5,204(sp)
    4cf0:	d8c02017 	ldw	r3,128(sp)
    4cf4:	da000404 	addi	r8,sp,16
    4cf8:	2885c83a 	sub	r2,r5,r2
    4cfc:	003dfb06 	br	44ec <__alt_data_end+0xfffc44ec>
    4d00:	9080004c 	andi	r2,r18,1
    4d04:	103e8f1e 	bne	r2,zero,4744 <__alt_data_end+0xfffc4744>
    4d08:	d8802117 	ldw	r2,132(sp)
    4d0c:	003e9e06 	br	4788 <__alt_data_end+0xfffc4788>
    4d10:	1025883a 	mov	r18,r2
    4d14:	0039883a 	mov	fp,zero
    4d18:	00800084 	movi	r2,2
    4d1c:	003fd306 	br	4c6c <__alt_data_end+0xfffc4c6c>
    4d20:	07000b44 	movi	fp,45
    4d24:	df002785 	stb	fp,158(sp)
    4d28:	003a4006 	br	362c <__alt_data_end+0xfffc362c>
    4d2c:	00c00b44 	movi	r3,45
    4d30:	d8c02785 	stb	r3,158(sp)
    4d34:	d8802a15 	stw	r2,168(sp)
    4d38:	dc802b17 	ldw	r18,172(sp)
    4d3c:	d8002915 	stw	zero,164(sp)
    4d40:	07000b44 	movi	fp,45
    4d44:	003a8006 	br	3748 <__alt_data_end+0xfffc3748>
    4d48:	04000074 	movhi	r16,1
    4d4c:	8400a004 	addi	r16,r16,640
    4d50:	003f4706 	br	4a70 <__alt_data_end+0xfffc4a70>
    4d54:	d8c02d17 	ldw	r3,180(sp)
    4d58:	d9002f17 	ldw	r4,188(sp)
    4d5c:	18800017 	ldw	r2,0(r3)
    4d60:	18c00104 	addi	r3,r3,4
    4d64:	d8c02d15 	stw	r3,180(sp)
    4d68:	11000015 	stw	r4,0(r2)
    4d6c:	0038dd06 	br	30e4 <__alt_data_end+0xfffc30e4>
    4d70:	dd802617 	ldw	r22,152(sp)
    4d74:	00bfff44 	movi	r2,-3
    4d78:	b0801c16 	blt	r22,r2,4dec <___vfprintf_internal_r+0x1de8>
    4d7c:	d9402917 	ldw	r5,164(sp)
    4d80:	2d801a16 	blt	r5,r22,4dec <___vfprintf_internal_r+0x1de8>
    4d84:	dd803215 	stw	r22,200(sp)
    4d88:	003e8906 	br	47b0 <__alt_data_end+0xfffc47b0>
    4d8c:	01000074 	movhi	r4,1
    4d90:	2100ad84 	addi	r4,r4,694
    4d94:	d9002b15 	stw	r4,172(sp)
    4d98:	003c9106 	br	3fe0 <__alt_data_end+0xfffc3fe0>
    4d9c:	e005883a 	mov	r2,fp
    4da0:	003e7906 	br	4788 <__alt_data_end+0xfffc4788>
    4da4:	d9402917 	ldw	r5,164(sp)
    4da8:	df002783 	ldbu	fp,158(sp)
    4dac:	dcc02d15 	stw	r19,180(sp)
    4db0:	d9402a15 	stw	r5,168(sp)
    4db4:	d9402e15 	stw	r5,184(sp)
    4db8:	d8002915 	stw	zero,164(sp)
    4dbc:	d8003215 	stw	zero,200(sp)
    4dc0:	003a5d06 	br	3738 <__alt_data_end+0xfffc3738>
    4dc4:	9080004c 	andi	r2,r18,1
    4dc8:	0039883a 	mov	fp,zero
    4dcc:	10000426 	beq	r2,zero,4de0 <___vfprintf_internal_r+0x1ddc>
    4dd0:	00800c04 	movi	r2,48
    4dd4:	dc001dc4 	addi	r16,sp,119
    4dd8:	d8801dc5 	stb	r2,119(sp)
    4ddc:	003b8006 	br	3be0 <__alt_data_end+0xfffc3be0>
    4de0:	d8002e15 	stw	zero,184(sp)
    4de4:	dc001e04 	addi	r16,sp,120
    4de8:	003a4d06 	br	3720 <__alt_data_end+0xfffc3720>
    4dec:	8c7fff84 	addi	r17,r17,-2
    4df0:	b5bfffc4 	addi	r22,r22,-1
    4df4:	dd802615 	stw	r22,152(sp)
    4df8:	dc4022c5 	stb	r17,139(sp)
    4dfc:	b000bf16 	blt	r22,zero,50fc <___vfprintf_internal_r+0x20f8>
    4e00:	00800ac4 	movi	r2,43
    4e04:	d8802305 	stb	r2,140(sp)
    4e08:	00800244 	movi	r2,9
    4e0c:	15807016 	blt	r2,r22,4fd0 <___vfprintf_internal_r+0x1fcc>
    4e10:	00800c04 	movi	r2,48
    4e14:	b5800c04 	addi	r22,r22,48
    4e18:	d8802345 	stb	r2,141(sp)
    4e1c:	dd802385 	stb	r22,142(sp)
    4e20:	d88023c4 	addi	r2,sp,143
    4e24:	df0022c4 	addi	fp,sp,139
    4e28:	d8c03317 	ldw	r3,204(sp)
    4e2c:	1739c83a 	sub	fp,r2,fp
    4e30:	d9003317 	ldw	r4,204(sp)
    4e34:	e0c7883a 	add	r3,fp,r3
    4e38:	df003a15 	stw	fp,232(sp)
    4e3c:	d8c02e15 	stw	r3,184(sp)
    4e40:	00800044 	movi	r2,1
    4e44:	1100b30e 	bge	r2,r4,5114 <___vfprintf_internal_r+0x2110>
    4e48:	d8c02e17 	ldw	r3,184(sp)
    4e4c:	18c00044 	addi	r3,r3,1
    4e50:	d8c02e15 	stw	r3,184(sp)
    4e54:	1805883a 	mov	r2,r3
    4e58:	1800ac16 	blt	r3,zero,510c <___vfprintf_internal_r+0x2108>
    4e5c:	d8003215 	stw	zero,200(sp)
    4e60:	003e5d06 	br	47d8 <__alt_data_end+0xfffc47d8>
    4e64:	d9002c17 	ldw	r4,176(sp)
    4e68:	d9801e04 	addi	r6,sp,120
    4e6c:	b80b883a 	mov	r5,r23
    4e70:	0009d2c0 	call	9d2c <__sprint_r>
    4e74:	1039651e 	bne	r2,zero,340c <__alt_data_end+0xfffc340c>
    4e78:	dc402617 	ldw	r17,152(sp)
    4e7c:	d8c02017 	ldw	r3,128(sp)
    4e80:	d8801f17 	ldw	r2,124(sp)
    4e84:	da000404 	addi	r8,sp,16
    4e88:	003ed606 	br	49e4 <__alt_data_end+0xfffc49e4>
    4e8c:	582b883a 	mov	r21,r11
    4e90:	d8002915 	stw	zero,164(sp)
    4e94:	0038bd06 	br	318c <__alt_data_end+0xfffc318c>
    4e98:	d8802917 	ldw	r2,164(sp)
    4e9c:	103e071e 	bne	r2,zero,46bc <__alt_data_end+0xfffc46bc>
    4ea0:	dc002915 	stw	r16,164(sp)
    4ea4:	003e0506 	br	46bc <__alt_data_end+0xfffc46bc>
    4ea8:	d9002917 	ldw	r4,164(sp)
    4eac:	20c00044 	addi	r3,r4,1
    4eb0:	003e0f06 	br	46f0 <__alt_data_end+0xfffc46f0>
    4eb4:	01400184 	movi	r5,6
    4eb8:	d9402915 	stw	r5,164(sp)
    4ebc:	003dff06 	br	46bc <__alt_data_end+0xfffc46bc>
    4ec0:	d8802104 	addi	r2,sp,132
    4ec4:	d8800315 	stw	r2,12(sp)
    4ec8:	d8802504 	addi	r2,sp,148
    4ecc:	d8800215 	stw	r2,8(sp)
    4ed0:	d8802604 	addi	r2,sp,152
    4ed4:	d8800115 	stw	r2,4(sp)
    4ed8:	d8802917 	ldw	r2,164(sp)
    4edc:	d9403617 	ldw	r5,216(sp)
    4ee0:	d9002c17 	ldw	r4,176(sp)
    4ee4:	d8800015 	stw	r2,0(sp)
    4ee8:	01c000c4 	movi	r7,3
    4eec:	980d883a 	mov	r6,r19
    4ef0:	da003d15 	stw	r8,244(sp)
    4ef4:	0005a180 	call	5a18 <_dtoa_r>
    4ef8:	d8c02917 	ldw	r3,164(sp)
    4efc:	da003d17 	ldw	r8,244(sp)
    4f00:	1021883a 	mov	r16,r2
    4f04:	10f9883a 	add	fp,r2,r3
    4f08:	81000007 	ldb	r4,0(r16)
    4f0c:	00800c04 	movi	r2,48
    4f10:	20805e26 	beq	r4,r2,508c <___vfprintf_internal_r+0x2088>
    4f14:	d8c02617 	ldw	r3,152(sp)
    4f18:	e0f9883a 	add	fp,fp,r3
    4f1c:	003e0a06 	br	4748 <__alt_data_end+0xfffc4748>
    4f20:	00c00b44 	movi	r3,45
    4f24:	24e0003c 	xorhi	r19,r4,32768
    4f28:	d8c02a05 	stb	r3,168(sp)
    4f2c:	003de906 	br	46d4 <__alt_data_end+0xfffc46d4>
    4f30:	d8c03217 	ldw	r3,200(sp)
    4f34:	00c07a0e 	bge	zero,r3,5120 <___vfprintf_internal_r+0x211c>
    4f38:	00800044 	movi	r2,1
    4f3c:	d9003317 	ldw	r4,204(sp)
    4f40:	1105883a 	add	r2,r2,r4
    4f44:	d8802e15 	stw	r2,184(sp)
    4f48:	10004e16 	blt	r2,zero,5084 <___vfprintf_internal_r+0x2080>
    4f4c:	044019c4 	movi	r17,103
    4f50:	003e2106 	br	47d8 <__alt_data_end+0xfffc47d8>
    4f54:	d9002917 	ldw	r4,164(sp)
    4f58:	d8802104 	addi	r2,sp,132
    4f5c:	d8800315 	stw	r2,12(sp)
    4f60:	d9000015 	stw	r4,0(sp)
    4f64:	d8802504 	addi	r2,sp,148
    4f68:	d9403617 	ldw	r5,216(sp)
    4f6c:	d9002c17 	ldw	r4,176(sp)
    4f70:	d8800215 	stw	r2,8(sp)
    4f74:	d8802604 	addi	r2,sp,152
    4f78:	d8800115 	stw	r2,4(sp)
    4f7c:	01c000c4 	movi	r7,3
    4f80:	980d883a 	mov	r6,r19
    4f84:	da003d15 	stw	r8,244(sp)
    4f88:	0005a180 	call	5a18 <_dtoa_r>
    4f8c:	d8c02917 	ldw	r3,164(sp)
    4f90:	da003d17 	ldw	r8,244(sp)
    4f94:	1021883a 	mov	r16,r2
    4f98:	00801184 	movi	r2,70
    4f9c:	80f9883a 	add	fp,r16,r3
    4fa0:	88bfd926 	beq	r17,r2,4f08 <__alt_data_end+0xfffc4f08>
    4fa4:	003de806 	br	4748 <__alt_data_end+0xfffc4748>
    4fa8:	d9002917 	ldw	r4,164(sp)
    4fac:	00c04d0e 	bge	zero,r3,50e4 <___vfprintf_internal_r+0x20e0>
    4fb0:	2000441e 	bne	r4,zero,50c4 <___vfprintf_internal_r+0x20c0>
    4fb4:	9480004c 	andi	r18,r18,1
    4fb8:	9000421e 	bne	r18,zero,50c4 <___vfprintf_internal_r+0x20c0>
    4fbc:	1805883a 	mov	r2,r3
    4fc0:	18007016 	blt	r3,zero,5184 <___vfprintf_internal_r+0x2180>
    4fc4:	d8c03217 	ldw	r3,200(sp)
    4fc8:	d8c02e15 	stw	r3,184(sp)
    4fcc:	003e0206 	br	47d8 <__alt_data_end+0xfffc47d8>
    4fd0:	df0022c4 	addi	fp,sp,139
    4fd4:	dc002915 	stw	r16,164(sp)
    4fd8:	4027883a 	mov	r19,r8
    4fdc:	e021883a 	mov	r16,fp
    4fe0:	b009883a 	mov	r4,r22
    4fe4:	01400284 	movi	r5,10
    4fe8:	000d1740 	call	d174 <__modsi3>
    4fec:	10800c04 	addi	r2,r2,48
    4ff0:	843fffc4 	addi	r16,r16,-1
    4ff4:	b009883a 	mov	r4,r22
    4ff8:	01400284 	movi	r5,10
    4ffc:	80800005 	stb	r2,0(r16)
    5000:	000d0f00 	call	d0f0 <__divsi3>
    5004:	102d883a 	mov	r22,r2
    5008:	00800244 	movi	r2,9
    500c:	15bff416 	blt	r2,r22,4fe0 <__alt_data_end+0xfffc4fe0>
    5010:	9811883a 	mov	r8,r19
    5014:	b0800c04 	addi	r2,r22,48
    5018:	8027883a 	mov	r19,r16
    501c:	997fffc4 	addi	r5,r19,-1
    5020:	98bfffc5 	stb	r2,-1(r19)
    5024:	dc002917 	ldw	r16,164(sp)
    5028:	2f006a2e 	bgeu	r5,fp,51d4 <___vfprintf_internal_r+0x21d0>
    502c:	d9c02384 	addi	r7,sp,142
    5030:	3ccfc83a 	sub	r7,r7,r19
    5034:	d9002344 	addi	r4,sp,141
    5038:	e1cf883a 	add	r7,fp,r7
    503c:	00000106 	br	5044 <___vfprintf_internal_r+0x2040>
    5040:	28800003 	ldbu	r2,0(r5)
    5044:	20800005 	stb	r2,0(r4)
    5048:	21000044 	addi	r4,r4,1
    504c:	29400044 	addi	r5,r5,1
    5050:	393ffb1e 	bne	r7,r4,5040 <__alt_data_end+0xfffc5040>
    5054:	d8802304 	addi	r2,sp,140
    5058:	14c5c83a 	sub	r2,r2,r19
    505c:	d8c02344 	addi	r3,sp,141
    5060:	1885883a 	add	r2,r3,r2
    5064:	003f7006 	br	4e28 <__alt_data_end+0xfffc4e28>
    5068:	0005883a 	mov	r2,zero
    506c:	003f0f06 	br	4cac <__alt_data_end+0xfffc4cac>
    5070:	d8c03217 	ldw	r3,200(sp)
    5074:	18c00044 	addi	r3,r3,1
    5078:	d8c02e15 	stw	r3,184(sp)
    507c:	1805883a 	mov	r2,r3
    5080:	183fb20e 	bge	r3,zero,4f4c <__alt_data_end+0xfffc4f4c>
    5084:	0005883a 	mov	r2,zero
    5088:	003fb006 	br	4f4c <__alt_data_end+0xfffc4f4c>
    508c:	d9003617 	ldw	r4,216(sp)
    5090:	000d883a 	mov	r6,zero
    5094:	000f883a 	mov	r7,zero
    5098:	980b883a 	mov	r5,r19
    509c:	d8c03c15 	stw	r3,240(sp)
    50a0:	da003d15 	stw	r8,244(sp)
    50a4:	000e4380 	call	e438 <__eqdf2>
    50a8:	d8c03c17 	ldw	r3,240(sp)
    50ac:	da003d17 	ldw	r8,244(sp)
    50b0:	103f9826 	beq	r2,zero,4f14 <__alt_data_end+0xfffc4f14>
    50b4:	00800044 	movi	r2,1
    50b8:	10c7c83a 	sub	r3,r2,r3
    50bc:	d8c02615 	stw	r3,152(sp)
    50c0:	003f9506 	br	4f18 <__alt_data_end+0xfffc4f18>
    50c4:	d9002917 	ldw	r4,164(sp)
    50c8:	d8c03217 	ldw	r3,200(sp)
    50cc:	20800044 	addi	r2,r4,1
    50d0:	1885883a 	add	r2,r3,r2
    50d4:	d8802e15 	stw	r2,184(sp)
    50d8:	103dbf0e 	bge	r2,zero,47d8 <__alt_data_end+0xfffc47d8>
    50dc:	0005883a 	mov	r2,zero
    50e0:	003dbd06 	br	47d8 <__alt_data_end+0xfffc47d8>
    50e4:	2000211e 	bne	r4,zero,516c <___vfprintf_internal_r+0x2168>
    50e8:	9480004c 	andi	r18,r18,1
    50ec:	90001f1e 	bne	r18,zero,516c <___vfprintf_internal_r+0x2168>
    50f0:	00800044 	movi	r2,1
    50f4:	d8802e15 	stw	r2,184(sp)
    50f8:	003db706 	br	47d8 <__alt_data_end+0xfffc47d8>
    50fc:	00800b44 	movi	r2,45
    5100:	05adc83a 	sub	r22,zero,r22
    5104:	d8802305 	stb	r2,140(sp)
    5108:	003f3f06 	br	4e08 <__alt_data_end+0xfffc4e08>
    510c:	0005883a 	mov	r2,zero
    5110:	003f5206 	br	4e5c <__alt_data_end+0xfffc4e5c>
    5114:	90a4703a 	and	r18,r18,r2
    5118:	903f4e26 	beq	r18,zero,4e54 <__alt_data_end+0xfffc4e54>
    511c:	003f4a06 	br	4e48 <__alt_data_end+0xfffc4e48>
    5120:	00800084 	movi	r2,2
    5124:	10c5c83a 	sub	r2,r2,r3
    5128:	003f8406 	br	4f3c <__alt_data_end+0xfffc4f3c>
    512c:	d8802d17 	ldw	r2,180(sp)
    5130:	d9002d17 	ldw	r4,180(sp)
    5134:	ac400043 	ldbu	r17,1(r21)
    5138:	10800017 	ldw	r2,0(r2)
    513c:	582b883a 	mov	r21,r11
    5140:	d8802915 	stw	r2,164(sp)
    5144:	20800104 	addi	r2,r4,4
    5148:	d9002917 	ldw	r4,164(sp)
    514c:	d8802d15 	stw	r2,180(sp)
    5150:	203e7a0e 	bge	r4,zero,4b3c <__alt_data_end+0xfffc4b3c>
    5154:	8c403fcc 	andi	r17,r17,255
    5158:	00bfffc4 	movi	r2,-1
    515c:	8c40201c 	xori	r17,r17,128
    5160:	d8802915 	stw	r2,164(sp)
    5164:	8c7fe004 	addi	r17,r17,-128
    5168:	00380706 	br	3188 <__alt_data_end+0xfffc3188>
    516c:	d8c02917 	ldw	r3,164(sp)
    5170:	18c00084 	addi	r3,r3,2
    5174:	d8c02e15 	stw	r3,184(sp)
    5178:	1805883a 	mov	r2,r3
    517c:	183d960e 	bge	r3,zero,47d8 <__alt_data_end+0xfffc47d8>
    5180:	003fd606 	br	50dc <__alt_data_end+0xfffc50dc>
    5184:	0005883a 	mov	r2,zero
    5188:	003f8e06 	br	4fc4 <__alt_data_end+0xfffc4fc4>
    518c:	9080004c 	andi	r2,r18,1
    5190:	103f811e 	bne	r2,zero,4f98 <__alt_data_end+0xfffc4f98>
    5194:	d8802117 	ldw	r2,132(sp)
    5198:	1405c83a 	sub	r2,r2,r16
    519c:	d8803315 	stw	r2,204(sp)
    51a0:	b47ef326 	beq	r22,r17,4d70 <__alt_data_end+0xfffc4d70>
    51a4:	dd802617 	ldw	r22,152(sp)
    51a8:	003f1106 	br	4df0 <__alt_data_end+0xfffc4df0>
    51ac:	d9c02785 	stb	r7,158(sp)
    51b0:	00390406 	br	35c4 <__alt_data_end+0xfffc35c4>
    51b4:	d9c02785 	stb	r7,158(sp)
    51b8:	0038d306 	br	3508 <__alt_data_end+0xfffc3508>
    51bc:	d9c02785 	stb	r7,158(sp)
    51c0:	003a6106 	br	3b48 <__alt_data_end+0xfffc3b48>
    51c4:	d9c02785 	stb	r7,158(sp)
    51c8:	003af806 	br	3dac <__alt_data_end+0xfffc3dac>
    51cc:	0005883a 	mov	r2,zero
    51d0:	003d7e06 	br	47cc <__alt_data_end+0xfffc47cc>
    51d4:	d8802344 	addi	r2,sp,141
    51d8:	003f1306 	br	4e28 <__alt_data_end+0xfffc4e28>
    51dc:	d9c02785 	stb	r7,158(sp)
    51e0:	00392306 	br	3670 <__alt_data_end+0xfffc3670>
    51e4:	d9c02785 	stb	r7,158(sp)
    51e8:	003aa906 	br	3c90 <__alt_data_end+0xfffc3c90>
    51ec:	d9c02785 	stb	r7,158(sp)
    51f0:	003a3d06 	br	3ae8 <__alt_data_end+0xfffc3ae8>
    51f4:	d9c02785 	stb	r7,158(sp)
    51f8:	003aca06 	br	3d24 <__alt_data_end+0xfffc3d24>

000051fc <__vfprintf_internal>:
    51fc:	00800074 	movhi	r2,1
    5200:	10880504 	addi	r2,r2,8212
    5204:	300f883a 	mov	r7,r6
    5208:	280d883a 	mov	r6,r5
    520c:	200b883a 	mov	r5,r4
    5210:	11000017 	ldw	r4,0(r2)
    5214:	00030041 	jmpi	3004 <___vfprintf_internal_r>

00005218 <__sbprintf>:
    5218:	2880030b 	ldhu	r2,12(r5)
    521c:	2ac01917 	ldw	r11,100(r5)
    5220:	2a80038b 	ldhu	r10,14(r5)
    5224:	2a400717 	ldw	r9,28(r5)
    5228:	2a000917 	ldw	r8,36(r5)
    522c:	defee204 	addi	sp,sp,-1144
    5230:	00c10004 	movi	r3,1024
    5234:	dc011a15 	stw	r16,1128(sp)
    5238:	10bfff4c 	andi	r2,r2,65533
    523c:	2821883a 	mov	r16,r5
    5240:	d8cb883a 	add	r5,sp,r3
    5244:	dc811c15 	stw	r18,1136(sp)
    5248:	dc411b15 	stw	r17,1132(sp)
    524c:	dfc11d15 	stw	ra,1140(sp)
    5250:	2025883a 	mov	r18,r4
    5254:	d881030d 	sth	r2,1036(sp)
    5258:	dac11915 	stw	r11,1124(sp)
    525c:	da81038d 	sth	r10,1038(sp)
    5260:	da410715 	stw	r9,1052(sp)
    5264:	da010915 	stw	r8,1060(sp)
    5268:	dec10015 	stw	sp,1024(sp)
    526c:	dec10415 	stw	sp,1040(sp)
    5270:	d8c10215 	stw	r3,1032(sp)
    5274:	d8c10515 	stw	r3,1044(sp)
    5278:	d8010615 	stw	zero,1048(sp)
    527c:	00030040 	call	3004 <___vfprintf_internal_r>
    5280:	1023883a 	mov	r17,r2
    5284:	10000416 	blt	r2,zero,5298 <__sbprintf+0x80>
    5288:	d9410004 	addi	r5,sp,1024
    528c:	9009883a 	mov	r4,r18
    5290:	00072bc0 	call	72bc <_fflush_r>
    5294:	10000d1e 	bne	r2,zero,52cc <__sbprintf+0xb4>
    5298:	d881030b 	ldhu	r2,1036(sp)
    529c:	1080100c 	andi	r2,r2,64
    52a0:	10000326 	beq	r2,zero,52b0 <__sbprintf+0x98>
    52a4:	8080030b 	ldhu	r2,12(r16)
    52a8:	10801014 	ori	r2,r2,64
    52ac:	8080030d 	sth	r2,12(r16)
    52b0:	8805883a 	mov	r2,r17
    52b4:	dfc11d17 	ldw	ra,1140(sp)
    52b8:	dc811c17 	ldw	r18,1136(sp)
    52bc:	dc411b17 	ldw	r17,1132(sp)
    52c0:	dc011a17 	ldw	r16,1128(sp)
    52c4:	dec11e04 	addi	sp,sp,1144
    52c8:	f800283a 	ret
    52cc:	047fffc4 	movi	r17,-1
    52d0:	003ff106 	br	5298 <__alt_data_end+0xfffc5298>

000052d4 <__swbuf_r>:
    52d4:	defffb04 	addi	sp,sp,-20
    52d8:	dcc00315 	stw	r19,12(sp)
    52dc:	dc800215 	stw	r18,8(sp)
    52e0:	dc000015 	stw	r16,0(sp)
    52e4:	dfc00415 	stw	ra,16(sp)
    52e8:	dc400115 	stw	r17,4(sp)
    52ec:	2025883a 	mov	r18,r4
    52f0:	2827883a 	mov	r19,r5
    52f4:	3021883a 	mov	r16,r6
    52f8:	20000226 	beq	r4,zero,5304 <__swbuf_r+0x30>
    52fc:	20800e17 	ldw	r2,56(r4)
    5300:	10004226 	beq	r2,zero,540c <__swbuf_r+0x138>
    5304:	80800617 	ldw	r2,24(r16)
    5308:	8100030b 	ldhu	r4,12(r16)
    530c:	80800215 	stw	r2,8(r16)
    5310:	2080020c 	andi	r2,r4,8
    5314:	10003626 	beq	r2,zero,53f0 <__swbuf_r+0x11c>
    5318:	80c00417 	ldw	r3,16(r16)
    531c:	18003426 	beq	r3,zero,53f0 <__swbuf_r+0x11c>
    5320:	2088000c 	andi	r2,r4,8192
    5324:	9c403fcc 	andi	r17,r19,255
    5328:	10001a26 	beq	r2,zero,5394 <__swbuf_r+0xc0>
    532c:	80800017 	ldw	r2,0(r16)
    5330:	81000517 	ldw	r4,20(r16)
    5334:	10c7c83a 	sub	r3,r2,r3
    5338:	1900200e 	bge	r3,r4,53bc <__swbuf_r+0xe8>
    533c:	18c00044 	addi	r3,r3,1
    5340:	81000217 	ldw	r4,8(r16)
    5344:	11400044 	addi	r5,r2,1
    5348:	81400015 	stw	r5,0(r16)
    534c:	213fffc4 	addi	r4,r4,-1
    5350:	81000215 	stw	r4,8(r16)
    5354:	14c00005 	stb	r19,0(r2)
    5358:	80800517 	ldw	r2,20(r16)
    535c:	10c01e26 	beq	r2,r3,53d8 <__swbuf_r+0x104>
    5360:	8080030b 	ldhu	r2,12(r16)
    5364:	1080004c 	andi	r2,r2,1
    5368:	10000226 	beq	r2,zero,5374 <__swbuf_r+0xa0>
    536c:	00800284 	movi	r2,10
    5370:	88801926 	beq	r17,r2,53d8 <__swbuf_r+0x104>
    5374:	8805883a 	mov	r2,r17
    5378:	dfc00417 	ldw	ra,16(sp)
    537c:	dcc00317 	ldw	r19,12(sp)
    5380:	dc800217 	ldw	r18,8(sp)
    5384:	dc400117 	ldw	r17,4(sp)
    5388:	dc000017 	ldw	r16,0(sp)
    538c:	dec00504 	addi	sp,sp,20
    5390:	f800283a 	ret
    5394:	81401917 	ldw	r5,100(r16)
    5398:	00b7ffc4 	movi	r2,-8193
    539c:	21080014 	ori	r4,r4,8192
    53a0:	2884703a 	and	r2,r5,r2
    53a4:	80801915 	stw	r2,100(r16)
    53a8:	80800017 	ldw	r2,0(r16)
    53ac:	8100030d 	sth	r4,12(r16)
    53b0:	81000517 	ldw	r4,20(r16)
    53b4:	10c7c83a 	sub	r3,r2,r3
    53b8:	193fe016 	blt	r3,r4,533c <__alt_data_end+0xfffc533c>
    53bc:	800b883a 	mov	r5,r16
    53c0:	9009883a 	mov	r4,r18
    53c4:	00072bc0 	call	72bc <_fflush_r>
    53c8:	1000071e 	bne	r2,zero,53e8 <__swbuf_r+0x114>
    53cc:	80800017 	ldw	r2,0(r16)
    53d0:	00c00044 	movi	r3,1
    53d4:	003fda06 	br	5340 <__alt_data_end+0xfffc5340>
    53d8:	800b883a 	mov	r5,r16
    53dc:	9009883a 	mov	r4,r18
    53e0:	00072bc0 	call	72bc <_fflush_r>
    53e4:	103fe326 	beq	r2,zero,5374 <__alt_data_end+0xfffc5374>
    53e8:	00bfffc4 	movi	r2,-1
    53ec:	003fe206 	br	5378 <__alt_data_end+0xfffc5378>
    53f0:	800b883a 	mov	r5,r16
    53f4:	9009883a 	mov	r4,r18
    53f8:	000542c0 	call	542c <__swsetup_r>
    53fc:	103ffa1e 	bne	r2,zero,53e8 <__alt_data_end+0xfffc53e8>
    5400:	8100030b 	ldhu	r4,12(r16)
    5404:	80c00417 	ldw	r3,16(r16)
    5408:	003fc506 	br	5320 <__alt_data_end+0xfffc5320>
    540c:	00076980 	call	7698 <__sinit>
    5410:	003fbc06 	br	5304 <__alt_data_end+0xfffc5304>

00005414 <__swbuf>:
    5414:	00800074 	movhi	r2,1
    5418:	10880504 	addi	r2,r2,8212
    541c:	280d883a 	mov	r6,r5
    5420:	200b883a 	mov	r5,r4
    5424:	11000017 	ldw	r4,0(r2)
    5428:	00052d41 	jmpi	52d4 <__swbuf_r>

0000542c <__swsetup_r>:
    542c:	00800074 	movhi	r2,1
    5430:	defffd04 	addi	sp,sp,-12
    5434:	10880504 	addi	r2,r2,8212
    5438:	dc400115 	stw	r17,4(sp)
    543c:	2023883a 	mov	r17,r4
    5440:	11000017 	ldw	r4,0(r2)
    5444:	dc000015 	stw	r16,0(sp)
    5448:	dfc00215 	stw	ra,8(sp)
    544c:	2821883a 	mov	r16,r5
    5450:	20000226 	beq	r4,zero,545c <__swsetup_r+0x30>
    5454:	20800e17 	ldw	r2,56(r4)
    5458:	10003126 	beq	r2,zero,5520 <__swsetup_r+0xf4>
    545c:	8080030b 	ldhu	r2,12(r16)
    5460:	10c0020c 	andi	r3,r2,8
    5464:	1009883a 	mov	r4,r2
    5468:	18000f26 	beq	r3,zero,54a8 <__swsetup_r+0x7c>
    546c:	80c00417 	ldw	r3,16(r16)
    5470:	18001526 	beq	r3,zero,54c8 <__swsetup_r+0x9c>
    5474:	1100004c 	andi	r4,r2,1
    5478:	20001c1e 	bne	r4,zero,54ec <__swsetup_r+0xc0>
    547c:	1080008c 	andi	r2,r2,2
    5480:	1000291e 	bne	r2,zero,5528 <__swsetup_r+0xfc>
    5484:	80800517 	ldw	r2,20(r16)
    5488:	80800215 	stw	r2,8(r16)
    548c:	18001c26 	beq	r3,zero,5500 <__swsetup_r+0xd4>
    5490:	0005883a 	mov	r2,zero
    5494:	dfc00217 	ldw	ra,8(sp)
    5498:	dc400117 	ldw	r17,4(sp)
    549c:	dc000017 	ldw	r16,0(sp)
    54a0:	dec00304 	addi	sp,sp,12
    54a4:	f800283a 	ret
    54a8:	2080040c 	andi	r2,r4,16
    54ac:	10002e26 	beq	r2,zero,5568 <__swsetup_r+0x13c>
    54b0:	2080010c 	andi	r2,r4,4
    54b4:	10001e1e 	bne	r2,zero,5530 <__swsetup_r+0x104>
    54b8:	80c00417 	ldw	r3,16(r16)
    54bc:	20800214 	ori	r2,r4,8
    54c0:	8080030d 	sth	r2,12(r16)
    54c4:	183feb1e 	bne	r3,zero,5474 <__alt_data_end+0xfffc5474>
    54c8:	1100a00c 	andi	r4,r2,640
    54cc:	01408004 	movi	r5,512
    54d0:	217fe826 	beq	r4,r5,5474 <__alt_data_end+0xfffc5474>
    54d4:	800b883a 	mov	r5,r16
    54d8:	8809883a 	mov	r4,r17
    54dc:	0007d800 	call	7d80 <__smakebuf_r>
    54e0:	8080030b 	ldhu	r2,12(r16)
    54e4:	80c00417 	ldw	r3,16(r16)
    54e8:	003fe206 	br	5474 <__alt_data_end+0xfffc5474>
    54ec:	80800517 	ldw	r2,20(r16)
    54f0:	80000215 	stw	zero,8(r16)
    54f4:	0085c83a 	sub	r2,zero,r2
    54f8:	80800615 	stw	r2,24(r16)
    54fc:	183fe41e 	bne	r3,zero,5490 <__alt_data_end+0xfffc5490>
    5500:	80c0030b 	ldhu	r3,12(r16)
    5504:	0005883a 	mov	r2,zero
    5508:	1900200c 	andi	r4,r3,128
    550c:	203fe126 	beq	r4,zero,5494 <__alt_data_end+0xfffc5494>
    5510:	18c01014 	ori	r3,r3,64
    5514:	80c0030d 	sth	r3,12(r16)
    5518:	00bfffc4 	movi	r2,-1
    551c:	003fdd06 	br	5494 <__alt_data_end+0xfffc5494>
    5520:	00076980 	call	7698 <__sinit>
    5524:	003fcd06 	br	545c <__alt_data_end+0xfffc545c>
    5528:	0005883a 	mov	r2,zero
    552c:	003fd606 	br	5488 <__alt_data_end+0xfffc5488>
    5530:	81400c17 	ldw	r5,48(r16)
    5534:	28000626 	beq	r5,zero,5550 <__swsetup_r+0x124>
    5538:	80801004 	addi	r2,r16,64
    553c:	28800326 	beq	r5,r2,554c <__swsetup_r+0x120>
    5540:	8809883a 	mov	r4,r17
    5544:	000780c0 	call	780c <_free_r>
    5548:	8100030b 	ldhu	r4,12(r16)
    554c:	80000c15 	stw	zero,48(r16)
    5550:	80c00417 	ldw	r3,16(r16)
    5554:	00bff6c4 	movi	r2,-37
    5558:	1108703a 	and	r4,r2,r4
    555c:	80000115 	stw	zero,4(r16)
    5560:	80c00015 	stw	r3,0(r16)
    5564:	003fd506 	br	54bc <__alt_data_end+0xfffc54bc>
    5568:	00800244 	movi	r2,9
    556c:	88800015 	stw	r2,0(r17)
    5570:	20801014 	ori	r2,r4,64
    5574:	8080030d 	sth	r2,12(r16)
    5578:	00bfffc4 	movi	r2,-1
    557c:	003fc506 	br	5494 <__alt_data_end+0xfffc5494>

00005580 <__register_exitproc>:
    5580:	defffa04 	addi	sp,sp,-24
    5584:	dc000315 	stw	r16,12(sp)
    5588:	04000074 	movhi	r16,1
    558c:	84080404 	addi	r16,r16,8208
    5590:	80c00017 	ldw	r3,0(r16)
    5594:	dc400415 	stw	r17,16(sp)
    5598:	dfc00515 	stw	ra,20(sp)
    559c:	18805217 	ldw	r2,328(r3)
    55a0:	2023883a 	mov	r17,r4
    55a4:	10003726 	beq	r2,zero,5684 <__register_exitproc+0x104>
    55a8:	10c00117 	ldw	r3,4(r2)
    55ac:	010007c4 	movi	r4,31
    55b0:	20c00e16 	blt	r4,r3,55ec <__register_exitproc+0x6c>
    55b4:	1a000044 	addi	r8,r3,1
    55b8:	8800221e 	bne	r17,zero,5644 <__register_exitproc+0xc4>
    55bc:	18c00084 	addi	r3,r3,2
    55c0:	18c7883a 	add	r3,r3,r3
    55c4:	18c7883a 	add	r3,r3,r3
    55c8:	12000115 	stw	r8,4(r2)
    55cc:	10c7883a 	add	r3,r2,r3
    55d0:	19400015 	stw	r5,0(r3)
    55d4:	0005883a 	mov	r2,zero
    55d8:	dfc00517 	ldw	ra,20(sp)
    55dc:	dc400417 	ldw	r17,16(sp)
    55e0:	dc000317 	ldw	r16,12(sp)
    55e4:	dec00604 	addi	sp,sp,24
    55e8:	f800283a 	ret
    55ec:	00800034 	movhi	r2,0
    55f0:	10800004 	addi	r2,r2,0
    55f4:	10002626 	beq	r2,zero,5690 <__register_exitproc+0x110>
    55f8:	01006404 	movi	r4,400
    55fc:	d9400015 	stw	r5,0(sp)
    5600:	d9800115 	stw	r6,4(sp)
    5604:	d9c00215 	stw	r7,8(sp)
    5608:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
    560c:	d9400017 	ldw	r5,0(sp)
    5610:	d9800117 	ldw	r6,4(sp)
    5614:	d9c00217 	ldw	r7,8(sp)
    5618:	10001d26 	beq	r2,zero,5690 <__register_exitproc+0x110>
    561c:	81000017 	ldw	r4,0(r16)
    5620:	10000115 	stw	zero,4(r2)
    5624:	02000044 	movi	r8,1
    5628:	22405217 	ldw	r9,328(r4)
    562c:	0007883a 	mov	r3,zero
    5630:	12400015 	stw	r9,0(r2)
    5634:	20805215 	stw	r2,328(r4)
    5638:	10006215 	stw	zero,392(r2)
    563c:	10006315 	stw	zero,396(r2)
    5640:	883fde26 	beq	r17,zero,55bc <__alt_data_end+0xfffc55bc>
    5644:	18c9883a 	add	r4,r3,r3
    5648:	2109883a 	add	r4,r4,r4
    564c:	1109883a 	add	r4,r2,r4
    5650:	21802215 	stw	r6,136(r4)
    5654:	01800044 	movi	r6,1
    5658:	12406217 	ldw	r9,392(r2)
    565c:	30cc983a 	sll	r6,r6,r3
    5660:	4992b03a 	or	r9,r9,r6
    5664:	12406215 	stw	r9,392(r2)
    5668:	21c04215 	stw	r7,264(r4)
    566c:	01000084 	movi	r4,2
    5670:	893fd21e 	bne	r17,r4,55bc <__alt_data_end+0xfffc55bc>
    5674:	11006317 	ldw	r4,396(r2)
    5678:	218cb03a 	or	r6,r4,r6
    567c:	11806315 	stw	r6,396(r2)
    5680:	003fce06 	br	55bc <__alt_data_end+0xfffc55bc>
    5684:	18805304 	addi	r2,r3,332
    5688:	18805215 	stw	r2,328(r3)
    568c:	003fc606 	br	55a8 <__alt_data_end+0xfffc55a8>
    5690:	00bfffc4 	movi	r2,-1
    5694:	003fd006 	br	55d8 <__alt_data_end+0xfffc55d8>

00005698 <__call_exitprocs>:
    5698:	defff504 	addi	sp,sp,-44
    569c:	df000915 	stw	fp,36(sp)
    56a0:	dd400615 	stw	r21,24(sp)
    56a4:	dc800315 	stw	r18,12(sp)
    56a8:	dfc00a15 	stw	ra,40(sp)
    56ac:	ddc00815 	stw	r23,32(sp)
    56b0:	dd800715 	stw	r22,28(sp)
    56b4:	dd000515 	stw	r20,20(sp)
    56b8:	dcc00415 	stw	r19,16(sp)
    56bc:	dc400215 	stw	r17,8(sp)
    56c0:	dc000115 	stw	r16,4(sp)
    56c4:	d9000015 	stw	r4,0(sp)
    56c8:	2839883a 	mov	fp,r5
    56cc:	04800044 	movi	r18,1
    56d0:	057fffc4 	movi	r21,-1
    56d4:	00800074 	movhi	r2,1
    56d8:	10880404 	addi	r2,r2,8208
    56dc:	12000017 	ldw	r8,0(r2)
    56e0:	45005217 	ldw	r20,328(r8)
    56e4:	44c05204 	addi	r19,r8,328
    56e8:	a0001c26 	beq	r20,zero,575c <__call_exitprocs+0xc4>
    56ec:	a0800117 	ldw	r2,4(r20)
    56f0:	15ffffc4 	addi	r23,r2,-1
    56f4:	b8000d16 	blt	r23,zero,572c <__call_exitprocs+0x94>
    56f8:	14000044 	addi	r16,r2,1
    56fc:	8421883a 	add	r16,r16,r16
    5700:	8421883a 	add	r16,r16,r16
    5704:	84402004 	addi	r17,r16,128
    5708:	a463883a 	add	r17,r20,r17
    570c:	a421883a 	add	r16,r20,r16
    5710:	e0001e26 	beq	fp,zero,578c <__call_exitprocs+0xf4>
    5714:	80804017 	ldw	r2,256(r16)
    5718:	e0801c26 	beq	fp,r2,578c <__call_exitprocs+0xf4>
    571c:	bdffffc4 	addi	r23,r23,-1
    5720:	843fff04 	addi	r16,r16,-4
    5724:	8c7fff04 	addi	r17,r17,-4
    5728:	bd7ff91e 	bne	r23,r21,5710 <__alt_data_end+0xfffc5710>
    572c:	00800034 	movhi	r2,0
    5730:	10800004 	addi	r2,r2,0
    5734:	10000926 	beq	r2,zero,575c <__call_exitprocs+0xc4>
    5738:	a0800117 	ldw	r2,4(r20)
    573c:	1000301e 	bne	r2,zero,5800 <__call_exitprocs+0x168>
    5740:	a0800017 	ldw	r2,0(r20)
    5744:	10003226 	beq	r2,zero,5810 <__call_exitprocs+0x178>
    5748:	a009883a 	mov	r4,r20
    574c:	98800015 	stw	r2,0(r19)
    5750:	00000000 	call	0 <__alt_mem_onchip_memory2_0>
    5754:	9d000017 	ldw	r20,0(r19)
    5758:	a03fe41e 	bne	r20,zero,56ec <__alt_data_end+0xfffc56ec>
    575c:	dfc00a17 	ldw	ra,40(sp)
    5760:	df000917 	ldw	fp,36(sp)
    5764:	ddc00817 	ldw	r23,32(sp)
    5768:	dd800717 	ldw	r22,28(sp)
    576c:	dd400617 	ldw	r21,24(sp)
    5770:	dd000517 	ldw	r20,20(sp)
    5774:	dcc00417 	ldw	r19,16(sp)
    5778:	dc800317 	ldw	r18,12(sp)
    577c:	dc400217 	ldw	r17,8(sp)
    5780:	dc000117 	ldw	r16,4(sp)
    5784:	dec00b04 	addi	sp,sp,44
    5788:	f800283a 	ret
    578c:	a0800117 	ldw	r2,4(r20)
    5790:	80c00017 	ldw	r3,0(r16)
    5794:	10bfffc4 	addi	r2,r2,-1
    5798:	15c01426 	beq	r2,r23,57ec <__call_exitprocs+0x154>
    579c:	80000015 	stw	zero,0(r16)
    57a0:	183fde26 	beq	r3,zero,571c <__alt_data_end+0xfffc571c>
    57a4:	95c8983a 	sll	r4,r18,r23
    57a8:	a0806217 	ldw	r2,392(r20)
    57ac:	a5800117 	ldw	r22,4(r20)
    57b0:	2084703a 	and	r2,r4,r2
    57b4:	10000b26 	beq	r2,zero,57e4 <__call_exitprocs+0x14c>
    57b8:	a0806317 	ldw	r2,396(r20)
    57bc:	2088703a 	and	r4,r4,r2
    57c0:	20000c1e 	bne	r4,zero,57f4 <__call_exitprocs+0x15c>
    57c4:	89400017 	ldw	r5,0(r17)
    57c8:	d9000017 	ldw	r4,0(sp)
    57cc:	183ee83a 	callr	r3
    57d0:	a0800117 	ldw	r2,4(r20)
    57d4:	15bfbf1e 	bne	r2,r22,56d4 <__alt_data_end+0xfffc56d4>
    57d8:	98800017 	ldw	r2,0(r19)
    57dc:	153fcf26 	beq	r2,r20,571c <__alt_data_end+0xfffc571c>
    57e0:	003fbc06 	br	56d4 <__alt_data_end+0xfffc56d4>
    57e4:	183ee83a 	callr	r3
    57e8:	003ff906 	br	57d0 <__alt_data_end+0xfffc57d0>
    57ec:	a5c00115 	stw	r23,4(r20)
    57f0:	003feb06 	br	57a0 <__alt_data_end+0xfffc57a0>
    57f4:	89000017 	ldw	r4,0(r17)
    57f8:	183ee83a 	callr	r3
    57fc:	003ff406 	br	57d0 <__alt_data_end+0xfffc57d0>
    5800:	a0800017 	ldw	r2,0(r20)
    5804:	a027883a 	mov	r19,r20
    5808:	1029883a 	mov	r20,r2
    580c:	003fb606 	br	56e8 <__alt_data_end+0xfffc56e8>
    5810:	0005883a 	mov	r2,zero
    5814:	003ffb06 	br	5804 <__alt_data_end+0xfffc5804>

00005818 <quorem>:
    5818:	defff704 	addi	sp,sp,-36
    581c:	dc800215 	stw	r18,8(sp)
    5820:	20800417 	ldw	r2,16(r4)
    5824:	2c800417 	ldw	r18,16(r5)
    5828:	dfc00815 	stw	ra,32(sp)
    582c:	ddc00715 	stw	r23,28(sp)
    5830:	dd800615 	stw	r22,24(sp)
    5834:	dd400515 	stw	r21,20(sp)
    5838:	dd000415 	stw	r20,16(sp)
    583c:	dcc00315 	stw	r19,12(sp)
    5840:	dc400115 	stw	r17,4(sp)
    5844:	dc000015 	stw	r16,0(sp)
    5848:	14807116 	blt	r2,r18,5a10 <quorem+0x1f8>
    584c:	94bfffc4 	addi	r18,r18,-1
    5850:	94ad883a 	add	r22,r18,r18
    5854:	b5ad883a 	add	r22,r22,r22
    5858:	2c400504 	addi	r17,r5,20
    585c:	8da9883a 	add	r20,r17,r22
    5860:	25400504 	addi	r21,r4,20
    5864:	282f883a 	mov	r23,r5
    5868:	adad883a 	add	r22,r21,r22
    586c:	a1400017 	ldw	r5,0(r20)
    5870:	2021883a 	mov	r16,r4
    5874:	b1000017 	ldw	r4,0(r22)
    5878:	29400044 	addi	r5,r5,1
    587c:	000d1e80 	call	d1e8 <__udivsi3>
    5880:	1027883a 	mov	r19,r2
    5884:	10002c26 	beq	r2,zero,5938 <quorem+0x120>
    5888:	a813883a 	mov	r9,r21
    588c:	880b883a 	mov	r5,r17
    5890:	0009883a 	mov	r4,zero
    5894:	000d883a 	mov	r6,zero
    5898:	2a000017 	ldw	r8,0(r5)
    589c:	49c00017 	ldw	r7,0(r9)
    58a0:	29400104 	addi	r5,r5,4
    58a4:	40bfffcc 	andi	r2,r8,65535
    58a8:	14c5383a 	mul	r2,r2,r19
    58ac:	4010d43a 	srli	r8,r8,16
    58b0:	38ffffcc 	andi	r3,r7,65535
    58b4:	1105883a 	add	r2,r2,r4
    58b8:	1008d43a 	srli	r4,r2,16
    58bc:	44d1383a 	mul	r8,r8,r19
    58c0:	198d883a 	add	r6,r3,r6
    58c4:	10ffffcc 	andi	r3,r2,65535
    58c8:	30c7c83a 	sub	r3,r6,r3
    58cc:	380ed43a 	srli	r7,r7,16
    58d0:	4105883a 	add	r2,r8,r4
    58d4:	180dd43a 	srai	r6,r3,16
    58d8:	113fffcc 	andi	r4,r2,65535
    58dc:	390fc83a 	sub	r7,r7,r4
    58e0:	398d883a 	add	r6,r7,r6
    58e4:	300e943a 	slli	r7,r6,16
    58e8:	18ffffcc 	andi	r3,r3,65535
    58ec:	1008d43a 	srli	r4,r2,16
    58f0:	38ceb03a 	or	r7,r7,r3
    58f4:	49c00015 	stw	r7,0(r9)
    58f8:	300dd43a 	srai	r6,r6,16
    58fc:	4a400104 	addi	r9,r9,4
    5900:	a17fe52e 	bgeu	r20,r5,5898 <__alt_data_end+0xfffc5898>
    5904:	b0800017 	ldw	r2,0(r22)
    5908:	10000b1e 	bne	r2,zero,5938 <quorem+0x120>
    590c:	b0bfff04 	addi	r2,r22,-4
    5910:	a880082e 	bgeu	r21,r2,5934 <quorem+0x11c>
    5914:	b0ffff17 	ldw	r3,-4(r22)
    5918:	18000326 	beq	r3,zero,5928 <quorem+0x110>
    591c:	00000506 	br	5934 <quorem+0x11c>
    5920:	10c00017 	ldw	r3,0(r2)
    5924:	1800031e 	bne	r3,zero,5934 <quorem+0x11c>
    5928:	10bfff04 	addi	r2,r2,-4
    592c:	94bfffc4 	addi	r18,r18,-1
    5930:	a8bffb36 	bltu	r21,r2,5920 <__alt_data_end+0xfffc5920>
    5934:	84800415 	stw	r18,16(r16)
    5938:	b80b883a 	mov	r5,r23
    593c:	8009883a 	mov	r4,r16
    5940:	000921c0 	call	921c <__mcmp>
    5944:	10002616 	blt	r2,zero,59e0 <quorem+0x1c8>
    5948:	9cc00044 	addi	r19,r19,1
    594c:	a805883a 	mov	r2,r21
    5950:	000b883a 	mov	r5,zero
    5954:	11000017 	ldw	r4,0(r2)
    5958:	89800017 	ldw	r6,0(r17)
    595c:	10800104 	addi	r2,r2,4
    5960:	20ffffcc 	andi	r3,r4,65535
    5964:	194b883a 	add	r5,r3,r5
    5968:	30ffffcc 	andi	r3,r6,65535
    596c:	28c7c83a 	sub	r3,r5,r3
    5970:	300cd43a 	srli	r6,r6,16
    5974:	2008d43a 	srli	r4,r4,16
    5978:	180bd43a 	srai	r5,r3,16
    597c:	18ffffcc 	andi	r3,r3,65535
    5980:	2189c83a 	sub	r4,r4,r6
    5984:	2149883a 	add	r4,r4,r5
    5988:	200c943a 	slli	r6,r4,16
    598c:	8c400104 	addi	r17,r17,4
    5990:	200bd43a 	srai	r5,r4,16
    5994:	30c6b03a 	or	r3,r6,r3
    5998:	10ffff15 	stw	r3,-4(r2)
    599c:	a47fed2e 	bgeu	r20,r17,5954 <__alt_data_end+0xfffc5954>
    59a0:	9485883a 	add	r2,r18,r18
    59a4:	1085883a 	add	r2,r2,r2
    59a8:	a887883a 	add	r3,r21,r2
    59ac:	18800017 	ldw	r2,0(r3)
    59b0:	10000b1e 	bne	r2,zero,59e0 <quorem+0x1c8>
    59b4:	18bfff04 	addi	r2,r3,-4
    59b8:	a880082e 	bgeu	r21,r2,59dc <quorem+0x1c4>
    59bc:	18ffff17 	ldw	r3,-4(r3)
    59c0:	18000326 	beq	r3,zero,59d0 <quorem+0x1b8>
    59c4:	00000506 	br	59dc <quorem+0x1c4>
    59c8:	10c00017 	ldw	r3,0(r2)
    59cc:	1800031e 	bne	r3,zero,59dc <quorem+0x1c4>
    59d0:	10bfff04 	addi	r2,r2,-4
    59d4:	94bfffc4 	addi	r18,r18,-1
    59d8:	a8bffb36 	bltu	r21,r2,59c8 <__alt_data_end+0xfffc59c8>
    59dc:	84800415 	stw	r18,16(r16)
    59e0:	9805883a 	mov	r2,r19
    59e4:	dfc00817 	ldw	ra,32(sp)
    59e8:	ddc00717 	ldw	r23,28(sp)
    59ec:	dd800617 	ldw	r22,24(sp)
    59f0:	dd400517 	ldw	r21,20(sp)
    59f4:	dd000417 	ldw	r20,16(sp)
    59f8:	dcc00317 	ldw	r19,12(sp)
    59fc:	dc800217 	ldw	r18,8(sp)
    5a00:	dc400117 	ldw	r17,4(sp)
    5a04:	dc000017 	ldw	r16,0(sp)
    5a08:	dec00904 	addi	sp,sp,36
    5a0c:	f800283a 	ret
    5a10:	0005883a 	mov	r2,zero
    5a14:	003ff306 	br	59e4 <__alt_data_end+0xfffc59e4>

00005a18 <_dtoa_r>:
    5a18:	20801017 	ldw	r2,64(r4)
    5a1c:	deffde04 	addi	sp,sp,-136
    5a20:	df002015 	stw	fp,128(sp)
    5a24:	dcc01b15 	stw	r19,108(sp)
    5a28:	dc801a15 	stw	r18,104(sp)
    5a2c:	dc401915 	stw	r17,100(sp)
    5a30:	dc001815 	stw	r16,96(sp)
    5a34:	dfc02115 	stw	ra,132(sp)
    5a38:	ddc01f15 	stw	r23,124(sp)
    5a3c:	dd801e15 	stw	r22,120(sp)
    5a40:	dd401d15 	stw	r21,116(sp)
    5a44:	dd001c15 	stw	r20,112(sp)
    5a48:	d9c00315 	stw	r7,12(sp)
    5a4c:	2039883a 	mov	fp,r4
    5a50:	3023883a 	mov	r17,r6
    5a54:	2825883a 	mov	r18,r5
    5a58:	dc002417 	ldw	r16,144(sp)
    5a5c:	3027883a 	mov	r19,r6
    5a60:	10000826 	beq	r2,zero,5a84 <_dtoa_r+0x6c>
    5a64:	21801117 	ldw	r6,68(r4)
    5a68:	00c00044 	movi	r3,1
    5a6c:	100b883a 	mov	r5,r2
    5a70:	1986983a 	sll	r3,r3,r6
    5a74:	11800115 	stw	r6,4(r2)
    5a78:	10c00215 	stw	r3,8(r2)
    5a7c:	00089fc0 	call	89fc <_Bfree>
    5a80:	e0001015 	stw	zero,64(fp)
    5a84:	88002e16 	blt	r17,zero,5b40 <_dtoa_r+0x128>
    5a88:	80000015 	stw	zero,0(r16)
    5a8c:	889ffc2c 	andhi	r2,r17,32752
    5a90:	00dffc34 	movhi	r3,32752
    5a94:	10c01c26 	beq	r2,r3,5b08 <_dtoa_r+0xf0>
    5a98:	000d883a 	mov	r6,zero
    5a9c:	000f883a 	mov	r7,zero
    5aa0:	9009883a 	mov	r4,r18
    5aa4:	980b883a 	mov	r5,r19
    5aa8:	000e4380 	call	e438 <__eqdf2>
    5aac:	10002b1e 	bne	r2,zero,5b5c <_dtoa_r+0x144>
    5ab0:	d9c02317 	ldw	r7,140(sp)
    5ab4:	00800044 	movi	r2,1
    5ab8:	38800015 	stw	r2,0(r7)
    5abc:	d8802517 	ldw	r2,148(sp)
    5ac0:	10019e26 	beq	r2,zero,613c <_dtoa_r+0x724>
    5ac4:	d8c02517 	ldw	r3,148(sp)
    5ac8:	00800074 	movhi	r2,1
    5acc:	1080ad44 	addi	r2,r2,693
    5ad0:	18800015 	stw	r2,0(r3)
    5ad4:	10bfffc4 	addi	r2,r2,-1
    5ad8:	dfc02117 	ldw	ra,132(sp)
    5adc:	df002017 	ldw	fp,128(sp)
    5ae0:	ddc01f17 	ldw	r23,124(sp)
    5ae4:	dd801e17 	ldw	r22,120(sp)
    5ae8:	dd401d17 	ldw	r21,116(sp)
    5aec:	dd001c17 	ldw	r20,112(sp)
    5af0:	dcc01b17 	ldw	r19,108(sp)
    5af4:	dc801a17 	ldw	r18,104(sp)
    5af8:	dc401917 	ldw	r17,100(sp)
    5afc:	dc001817 	ldw	r16,96(sp)
    5b00:	dec02204 	addi	sp,sp,136
    5b04:	f800283a 	ret
    5b08:	d8c02317 	ldw	r3,140(sp)
    5b0c:	0089c3c4 	movi	r2,9999
    5b10:	18800015 	stw	r2,0(r3)
    5b14:	90017726 	beq	r18,zero,60f4 <_dtoa_r+0x6dc>
    5b18:	00800074 	movhi	r2,1
    5b1c:	1080b904 	addi	r2,r2,740
    5b20:	d9002517 	ldw	r4,148(sp)
    5b24:	203fec26 	beq	r4,zero,5ad8 <__alt_data_end+0xfffc5ad8>
    5b28:	10c000c7 	ldb	r3,3(r2)
    5b2c:	1801781e 	bne	r3,zero,6110 <_dtoa_r+0x6f8>
    5b30:	10c000c4 	addi	r3,r2,3
    5b34:	d9802517 	ldw	r6,148(sp)
    5b38:	30c00015 	stw	r3,0(r6)
    5b3c:	003fe606 	br	5ad8 <__alt_data_end+0xfffc5ad8>
    5b40:	04e00034 	movhi	r19,32768
    5b44:	9cffffc4 	addi	r19,r19,-1
    5b48:	00800044 	movi	r2,1
    5b4c:	8ce6703a 	and	r19,r17,r19
    5b50:	80800015 	stw	r2,0(r16)
    5b54:	9823883a 	mov	r17,r19
    5b58:	003fcc06 	br	5a8c <__alt_data_end+0xfffc5a8c>
    5b5c:	d8800204 	addi	r2,sp,8
    5b60:	d8800015 	stw	r2,0(sp)
    5b64:	d9c00104 	addi	r7,sp,4
    5b68:	900b883a 	mov	r5,r18
    5b6c:	980d883a 	mov	r6,r19
    5b70:	e009883a 	mov	r4,fp
    5b74:	8820d53a 	srli	r16,r17,20
    5b78:	00095e80 	call	95e8 <__d2b>
    5b7c:	d8800915 	stw	r2,36(sp)
    5b80:	8001651e 	bne	r16,zero,6118 <_dtoa_r+0x700>
    5b84:	dd800217 	ldw	r22,8(sp)
    5b88:	dc000117 	ldw	r16,4(sp)
    5b8c:	00800804 	movi	r2,32
    5b90:	b421883a 	add	r16,r22,r16
    5b94:	80c10c84 	addi	r3,r16,1074
    5b98:	10c2d10e 	bge	r2,r3,66e0 <_dtoa_r+0xcc8>
    5b9c:	00801004 	movi	r2,64
    5ba0:	81010484 	addi	r4,r16,1042
    5ba4:	10c7c83a 	sub	r3,r2,r3
    5ba8:	9108d83a 	srl	r4,r18,r4
    5bac:	88e2983a 	sll	r17,r17,r3
    5bb0:	2448b03a 	or	r4,r4,r17
    5bb4:	000f8000 	call	f800 <__floatunsidf>
    5bb8:	017f8434 	movhi	r5,65040
    5bbc:	01800044 	movi	r6,1
    5bc0:	1009883a 	mov	r4,r2
    5bc4:	194b883a 	add	r5,r3,r5
    5bc8:	843fffc4 	addi	r16,r16,-1
    5bcc:	d9801115 	stw	r6,68(sp)
    5bd0:	000d883a 	mov	r6,zero
    5bd4:	01cffe34 	movhi	r7,16376
    5bd8:	000eda80 	call	eda8 <__subdf3>
    5bdc:	0198dbf4 	movhi	r6,25455
    5be0:	01cff4f4 	movhi	r7,16339
    5be4:	3190d844 	addi	r6,r6,17249
    5be8:	39e1e9c4 	addi	r7,r7,-30809
    5bec:	1009883a 	mov	r4,r2
    5bf0:	180b883a 	mov	r5,r3
    5bf4:	000e6900 	call	e690 <__muldf3>
    5bf8:	01a2d874 	movhi	r6,35681
    5bfc:	01cff1f4 	movhi	r7,16327
    5c00:	31b22cc4 	addi	r6,r6,-14157
    5c04:	39e28a04 	addi	r7,r7,-30168
    5c08:	180b883a 	mov	r5,r3
    5c0c:	1009883a 	mov	r4,r2
    5c10:	000d2a40 	call	d2a4 <__adddf3>
    5c14:	8009883a 	mov	r4,r16
    5c18:	1029883a 	mov	r20,r2
    5c1c:	1823883a 	mov	r17,r3
    5c20:	000f7240 	call	f724 <__floatsidf>
    5c24:	019427f4 	movhi	r6,20639
    5c28:	01cff4f4 	movhi	r7,16339
    5c2c:	319e7ec4 	addi	r6,r6,31227
    5c30:	39d104c4 	addi	r7,r7,17427
    5c34:	1009883a 	mov	r4,r2
    5c38:	180b883a 	mov	r5,r3
    5c3c:	000e6900 	call	e690 <__muldf3>
    5c40:	100d883a 	mov	r6,r2
    5c44:	180f883a 	mov	r7,r3
    5c48:	a009883a 	mov	r4,r20
    5c4c:	880b883a 	mov	r5,r17
    5c50:	000d2a40 	call	d2a4 <__adddf3>
    5c54:	1009883a 	mov	r4,r2
    5c58:	180b883a 	mov	r5,r3
    5c5c:	1029883a 	mov	r20,r2
    5c60:	1823883a 	mov	r17,r3
    5c64:	000f6a40 	call	f6a4 <__fixdfsi>
    5c68:	000d883a 	mov	r6,zero
    5c6c:	000f883a 	mov	r7,zero
    5c70:	a009883a 	mov	r4,r20
    5c74:	880b883a 	mov	r5,r17
    5c78:	d8800515 	stw	r2,20(sp)
    5c7c:	000e59c0 	call	e59c <__ledf2>
    5c80:	10028716 	blt	r2,zero,66a0 <_dtoa_r+0xc88>
    5c84:	d8c00517 	ldw	r3,20(sp)
    5c88:	00800584 	movi	r2,22
    5c8c:	10c27536 	bltu	r2,r3,6664 <_dtoa_r+0xc4c>
    5c90:	180490fa 	slli	r2,r3,3
    5c94:	00c00074 	movhi	r3,1
    5c98:	18c0d404 	addi	r3,r3,848
    5c9c:	1885883a 	add	r2,r3,r2
    5ca0:	11000017 	ldw	r4,0(r2)
    5ca4:	11400117 	ldw	r5,4(r2)
    5ca8:	900d883a 	mov	r6,r18
    5cac:	980f883a 	mov	r7,r19
    5cb0:	000e4c00 	call	e4c0 <__gedf2>
    5cb4:	00828d0e 	bge	zero,r2,66ec <_dtoa_r+0xcd4>
    5cb8:	d9000517 	ldw	r4,20(sp)
    5cbc:	d8000e15 	stw	zero,56(sp)
    5cc0:	213fffc4 	addi	r4,r4,-1
    5cc4:	d9000515 	stw	r4,20(sp)
    5cc8:	b42dc83a 	sub	r22,r22,r16
    5ccc:	b5bfffc4 	addi	r22,r22,-1
    5cd0:	b0026f16 	blt	r22,zero,6690 <_dtoa_r+0xc78>
    5cd4:	d8000815 	stw	zero,32(sp)
    5cd8:	d9c00517 	ldw	r7,20(sp)
    5cdc:	38026416 	blt	r7,zero,6670 <_dtoa_r+0xc58>
    5ce0:	b1ed883a 	add	r22,r22,r7
    5ce4:	d9c00d15 	stw	r7,52(sp)
    5ce8:	d8000a15 	stw	zero,40(sp)
    5cec:	d9800317 	ldw	r6,12(sp)
    5cf0:	00800244 	movi	r2,9
    5cf4:	11811436 	bltu	r2,r6,6148 <_dtoa_r+0x730>
    5cf8:	00800144 	movi	r2,5
    5cfc:	1184e10e 	bge	r2,r6,7084 <_dtoa_r+0x166c>
    5d00:	31bfff04 	addi	r6,r6,-4
    5d04:	d9800315 	stw	r6,12(sp)
    5d08:	0023883a 	mov	r17,zero
    5d0c:	d9800317 	ldw	r6,12(sp)
    5d10:	008000c4 	movi	r2,3
    5d14:	30836726 	beq	r6,r2,6ab4 <_dtoa_r+0x109c>
    5d18:	1183410e 	bge	r2,r6,6a20 <_dtoa_r+0x1008>
    5d1c:	d9c00317 	ldw	r7,12(sp)
    5d20:	00800104 	movi	r2,4
    5d24:	38827c26 	beq	r7,r2,6718 <_dtoa_r+0xd00>
    5d28:	00800144 	movi	r2,5
    5d2c:	3884c41e 	bne	r7,r2,7040 <_dtoa_r+0x1628>
    5d30:	00800044 	movi	r2,1
    5d34:	d8800b15 	stw	r2,44(sp)
    5d38:	d8c00517 	ldw	r3,20(sp)
    5d3c:	d9002217 	ldw	r4,136(sp)
    5d40:	1907883a 	add	r3,r3,r4
    5d44:	19800044 	addi	r6,r3,1
    5d48:	d8c00c15 	stw	r3,48(sp)
    5d4c:	d9800615 	stw	r6,24(sp)
    5d50:	0183a40e 	bge	zero,r6,6be4 <_dtoa_r+0x11cc>
    5d54:	d9800617 	ldw	r6,24(sp)
    5d58:	3021883a 	mov	r16,r6
    5d5c:	e0001115 	stw	zero,68(fp)
    5d60:	008005c4 	movi	r2,23
    5d64:	1184c92e 	bgeu	r2,r6,708c <_dtoa_r+0x1674>
    5d68:	00c00044 	movi	r3,1
    5d6c:	00800104 	movi	r2,4
    5d70:	1085883a 	add	r2,r2,r2
    5d74:	11000504 	addi	r4,r2,20
    5d78:	180b883a 	mov	r5,r3
    5d7c:	18c00044 	addi	r3,r3,1
    5d80:	313ffb2e 	bgeu	r6,r4,5d70 <__alt_data_end+0xfffc5d70>
    5d84:	e1401115 	stw	r5,68(fp)
    5d88:	e009883a 	mov	r4,fp
    5d8c:	00089540 	call	8954 <_Balloc>
    5d90:	d8800715 	stw	r2,28(sp)
    5d94:	e0801015 	stw	r2,64(fp)
    5d98:	00800384 	movi	r2,14
    5d9c:	1400f736 	bltu	r2,r16,617c <_dtoa_r+0x764>
    5da0:	8800f626 	beq	r17,zero,617c <_dtoa_r+0x764>
    5da4:	d9c00517 	ldw	r7,20(sp)
    5da8:	01c39a0e 	bge	zero,r7,6c14 <_dtoa_r+0x11fc>
    5dac:	388003cc 	andi	r2,r7,15
    5db0:	100490fa 	slli	r2,r2,3
    5db4:	382bd13a 	srai	r21,r7,4
    5db8:	00c00074 	movhi	r3,1
    5dbc:	18c0d404 	addi	r3,r3,848
    5dc0:	1885883a 	add	r2,r3,r2
    5dc4:	a8c0040c 	andi	r3,r21,16
    5dc8:	12400017 	ldw	r9,0(r2)
    5dcc:	12000117 	ldw	r8,4(r2)
    5dd0:	18037926 	beq	r3,zero,6bb8 <_dtoa_r+0x11a0>
    5dd4:	00800074 	movhi	r2,1
    5dd8:	1080ca04 	addi	r2,r2,808
    5ddc:	11800817 	ldw	r6,32(r2)
    5de0:	11c00917 	ldw	r7,36(r2)
    5de4:	9009883a 	mov	r4,r18
    5de8:	980b883a 	mov	r5,r19
    5dec:	da001715 	stw	r8,92(sp)
    5df0:	da401615 	stw	r9,88(sp)
    5df4:	000db500 	call	db50 <__divdf3>
    5df8:	da001717 	ldw	r8,92(sp)
    5dfc:	da401617 	ldw	r9,88(sp)
    5e00:	ad4003cc 	andi	r21,r21,15
    5e04:	040000c4 	movi	r16,3
    5e08:	1023883a 	mov	r17,r2
    5e0c:	1829883a 	mov	r20,r3
    5e10:	a8001126 	beq	r21,zero,5e58 <_dtoa_r+0x440>
    5e14:	05c00074 	movhi	r23,1
    5e18:	bdc0ca04 	addi	r23,r23,808
    5e1c:	4805883a 	mov	r2,r9
    5e20:	4007883a 	mov	r3,r8
    5e24:	a980004c 	andi	r6,r21,1
    5e28:	1009883a 	mov	r4,r2
    5e2c:	a82bd07a 	srai	r21,r21,1
    5e30:	180b883a 	mov	r5,r3
    5e34:	30000426 	beq	r6,zero,5e48 <_dtoa_r+0x430>
    5e38:	b9800017 	ldw	r6,0(r23)
    5e3c:	b9c00117 	ldw	r7,4(r23)
    5e40:	84000044 	addi	r16,r16,1
    5e44:	000e6900 	call	e690 <__muldf3>
    5e48:	bdc00204 	addi	r23,r23,8
    5e4c:	a83ff51e 	bne	r21,zero,5e24 <__alt_data_end+0xfffc5e24>
    5e50:	1013883a 	mov	r9,r2
    5e54:	1811883a 	mov	r8,r3
    5e58:	480d883a 	mov	r6,r9
    5e5c:	400f883a 	mov	r7,r8
    5e60:	8809883a 	mov	r4,r17
    5e64:	a00b883a 	mov	r5,r20
    5e68:	000db500 	call	db50 <__divdf3>
    5e6c:	d8800f15 	stw	r2,60(sp)
    5e70:	d8c01015 	stw	r3,64(sp)
    5e74:	d8c00e17 	ldw	r3,56(sp)
    5e78:	18000626 	beq	r3,zero,5e94 <_dtoa_r+0x47c>
    5e7c:	d9000f17 	ldw	r4,60(sp)
    5e80:	d9401017 	ldw	r5,64(sp)
    5e84:	000d883a 	mov	r6,zero
    5e88:	01cffc34 	movhi	r7,16368
    5e8c:	000e59c0 	call	e59c <__ledf2>
    5e90:	10040b16 	blt	r2,zero,6ec0 <_dtoa_r+0x14a8>
    5e94:	8009883a 	mov	r4,r16
    5e98:	000f7240 	call	f724 <__floatsidf>
    5e9c:	d9800f17 	ldw	r6,60(sp)
    5ea0:	d9c01017 	ldw	r7,64(sp)
    5ea4:	1009883a 	mov	r4,r2
    5ea8:	180b883a 	mov	r5,r3
    5eac:	000e6900 	call	e690 <__muldf3>
    5eb0:	000d883a 	mov	r6,zero
    5eb4:	01d00734 	movhi	r7,16412
    5eb8:	1009883a 	mov	r4,r2
    5ebc:	180b883a 	mov	r5,r3
    5ec0:	000d2a40 	call	d2a4 <__adddf3>
    5ec4:	1021883a 	mov	r16,r2
    5ec8:	d8800617 	ldw	r2,24(sp)
    5ecc:	047f3034 	movhi	r17,64704
    5ed0:	1c63883a 	add	r17,r3,r17
    5ed4:	10031826 	beq	r2,zero,6b38 <_dtoa_r+0x1120>
    5ed8:	d8c00517 	ldw	r3,20(sp)
    5edc:	db000617 	ldw	r12,24(sp)
    5ee0:	d8c01315 	stw	r3,76(sp)
    5ee4:	d9000b17 	ldw	r4,44(sp)
    5ee8:	20038f26 	beq	r4,zero,6d28 <_dtoa_r+0x1310>
    5eec:	60bfffc4 	addi	r2,r12,-1
    5ef0:	100490fa 	slli	r2,r2,3
    5ef4:	00c00074 	movhi	r3,1
    5ef8:	18c0d404 	addi	r3,r3,848
    5efc:	1885883a 	add	r2,r3,r2
    5f00:	11800017 	ldw	r6,0(r2)
    5f04:	11c00117 	ldw	r7,4(r2)
    5f08:	d8800717 	ldw	r2,28(sp)
    5f0c:	0009883a 	mov	r4,zero
    5f10:	014ff834 	movhi	r5,16352
    5f14:	db001615 	stw	r12,88(sp)
    5f18:	15c00044 	addi	r23,r2,1
    5f1c:	000db500 	call	db50 <__divdf3>
    5f20:	800d883a 	mov	r6,r16
    5f24:	880f883a 	mov	r7,r17
    5f28:	1009883a 	mov	r4,r2
    5f2c:	180b883a 	mov	r5,r3
    5f30:	000eda80 	call	eda8 <__subdf3>
    5f34:	d9401017 	ldw	r5,64(sp)
    5f38:	d9000f17 	ldw	r4,60(sp)
    5f3c:	102b883a 	mov	r21,r2
    5f40:	d8c01215 	stw	r3,72(sp)
    5f44:	000f6a40 	call	f6a4 <__fixdfsi>
    5f48:	1009883a 	mov	r4,r2
    5f4c:	1029883a 	mov	r20,r2
    5f50:	000f7240 	call	f724 <__floatsidf>
    5f54:	d9000f17 	ldw	r4,60(sp)
    5f58:	d9401017 	ldw	r5,64(sp)
    5f5c:	100d883a 	mov	r6,r2
    5f60:	180f883a 	mov	r7,r3
    5f64:	000eda80 	call	eda8 <__subdf3>
    5f68:	1823883a 	mov	r17,r3
    5f6c:	d8c00717 	ldw	r3,28(sp)
    5f70:	d9401217 	ldw	r5,72(sp)
    5f74:	a2000c04 	addi	r8,r20,48
    5f78:	1021883a 	mov	r16,r2
    5f7c:	1a000005 	stb	r8,0(r3)
    5f80:	800d883a 	mov	r6,r16
    5f84:	880f883a 	mov	r7,r17
    5f88:	a809883a 	mov	r4,r21
    5f8c:	4029883a 	mov	r20,r8
    5f90:	000e4c00 	call	e4c0 <__gedf2>
    5f94:	00841d16 	blt	zero,r2,700c <_dtoa_r+0x15f4>
    5f98:	800d883a 	mov	r6,r16
    5f9c:	880f883a 	mov	r7,r17
    5fa0:	0009883a 	mov	r4,zero
    5fa4:	014ffc34 	movhi	r5,16368
    5fa8:	000eda80 	call	eda8 <__subdf3>
    5fac:	d9401217 	ldw	r5,72(sp)
    5fb0:	100d883a 	mov	r6,r2
    5fb4:	180f883a 	mov	r7,r3
    5fb8:	a809883a 	mov	r4,r21
    5fbc:	000e4c00 	call	e4c0 <__gedf2>
    5fc0:	db001617 	ldw	r12,88(sp)
    5fc4:	00840e16 	blt	zero,r2,7000 <_dtoa_r+0x15e8>
    5fc8:	00800044 	movi	r2,1
    5fcc:	13006b0e 	bge	r2,r12,617c <_dtoa_r+0x764>
    5fd0:	d9000717 	ldw	r4,28(sp)
    5fd4:	dd800f15 	stw	r22,60(sp)
    5fd8:	dcc01015 	stw	r19,64(sp)
    5fdc:	2319883a 	add	r12,r4,r12
    5fe0:	dcc01217 	ldw	r19,72(sp)
    5fe4:	602d883a 	mov	r22,r12
    5fe8:	dc801215 	stw	r18,72(sp)
    5fec:	b825883a 	mov	r18,r23
    5ff0:	00000906 	br	6018 <_dtoa_r+0x600>
    5ff4:	000eda80 	call	eda8 <__subdf3>
    5ff8:	a80d883a 	mov	r6,r21
    5ffc:	980f883a 	mov	r7,r19
    6000:	1009883a 	mov	r4,r2
    6004:	180b883a 	mov	r5,r3
    6008:	000e59c0 	call	e59c <__ledf2>
    600c:	1003e816 	blt	r2,zero,6fb0 <_dtoa_r+0x1598>
    6010:	b825883a 	mov	r18,r23
    6014:	bd83e926 	beq	r23,r22,6fbc <_dtoa_r+0x15a4>
    6018:	a809883a 	mov	r4,r21
    601c:	980b883a 	mov	r5,r19
    6020:	000d883a 	mov	r6,zero
    6024:	01d00934 	movhi	r7,16420
    6028:	000e6900 	call	e690 <__muldf3>
    602c:	000d883a 	mov	r6,zero
    6030:	01d00934 	movhi	r7,16420
    6034:	8009883a 	mov	r4,r16
    6038:	880b883a 	mov	r5,r17
    603c:	102b883a 	mov	r21,r2
    6040:	1827883a 	mov	r19,r3
    6044:	000e6900 	call	e690 <__muldf3>
    6048:	180b883a 	mov	r5,r3
    604c:	1009883a 	mov	r4,r2
    6050:	1821883a 	mov	r16,r3
    6054:	1023883a 	mov	r17,r2
    6058:	000f6a40 	call	f6a4 <__fixdfsi>
    605c:	1009883a 	mov	r4,r2
    6060:	1029883a 	mov	r20,r2
    6064:	000f7240 	call	f724 <__floatsidf>
    6068:	8809883a 	mov	r4,r17
    606c:	800b883a 	mov	r5,r16
    6070:	100d883a 	mov	r6,r2
    6074:	180f883a 	mov	r7,r3
    6078:	000eda80 	call	eda8 <__subdf3>
    607c:	a5000c04 	addi	r20,r20,48
    6080:	a80d883a 	mov	r6,r21
    6084:	980f883a 	mov	r7,r19
    6088:	1009883a 	mov	r4,r2
    608c:	180b883a 	mov	r5,r3
    6090:	95000005 	stb	r20,0(r18)
    6094:	1021883a 	mov	r16,r2
    6098:	1823883a 	mov	r17,r3
    609c:	000e59c0 	call	e59c <__ledf2>
    60a0:	bdc00044 	addi	r23,r23,1
    60a4:	800d883a 	mov	r6,r16
    60a8:	880f883a 	mov	r7,r17
    60ac:	0009883a 	mov	r4,zero
    60b0:	014ffc34 	movhi	r5,16368
    60b4:	103fcf0e 	bge	r2,zero,5ff4 <__alt_data_end+0xfffc5ff4>
    60b8:	d8c01317 	ldw	r3,76(sp)
    60bc:	d8c00515 	stw	r3,20(sp)
    60c0:	d9400917 	ldw	r5,36(sp)
    60c4:	e009883a 	mov	r4,fp
    60c8:	00089fc0 	call	89fc <_Bfree>
    60cc:	d9000517 	ldw	r4,20(sp)
    60d0:	d9802317 	ldw	r6,140(sp)
    60d4:	d9c02517 	ldw	r7,148(sp)
    60d8:	b8000005 	stb	zero,0(r23)
    60dc:	20800044 	addi	r2,r4,1
    60e0:	30800015 	stw	r2,0(r6)
    60e4:	3802aa26 	beq	r7,zero,6b90 <_dtoa_r+0x1178>
    60e8:	3dc00015 	stw	r23,0(r7)
    60ec:	d8800717 	ldw	r2,28(sp)
    60f0:	003e7906 	br	5ad8 <__alt_data_end+0xfffc5ad8>
    60f4:	00800434 	movhi	r2,16
    60f8:	10bfffc4 	addi	r2,r2,-1
    60fc:	88a2703a 	and	r17,r17,r2
    6100:	883e851e 	bne	r17,zero,5b18 <__alt_data_end+0xfffc5b18>
    6104:	00800074 	movhi	r2,1
    6108:	1080b604 	addi	r2,r2,728
    610c:	003e8406 	br	5b20 <__alt_data_end+0xfffc5b20>
    6110:	10c00204 	addi	r3,r2,8
    6114:	003e8706 	br	5b34 <__alt_data_end+0xfffc5b34>
    6118:	01400434 	movhi	r5,16
    611c:	297fffc4 	addi	r5,r5,-1
    6120:	994a703a 	and	r5,r19,r5
    6124:	9009883a 	mov	r4,r18
    6128:	843f0044 	addi	r16,r16,-1023
    612c:	294ffc34 	orhi	r5,r5,16368
    6130:	dd800217 	ldw	r22,8(sp)
    6134:	d8001115 	stw	zero,68(sp)
    6138:	003ea506 	br	5bd0 <__alt_data_end+0xfffc5bd0>
    613c:	00800074 	movhi	r2,1
    6140:	1080ad04 	addi	r2,r2,692
    6144:	003e6406 	br	5ad8 <__alt_data_end+0xfffc5ad8>
    6148:	e0001115 	stw	zero,68(fp)
    614c:	000b883a 	mov	r5,zero
    6150:	e009883a 	mov	r4,fp
    6154:	00089540 	call	8954 <_Balloc>
    6158:	01bfffc4 	movi	r6,-1
    615c:	01c00044 	movi	r7,1
    6160:	d8800715 	stw	r2,28(sp)
    6164:	d9800c15 	stw	r6,48(sp)
    6168:	e0801015 	stw	r2,64(fp)
    616c:	d8000315 	stw	zero,12(sp)
    6170:	d9c00b15 	stw	r7,44(sp)
    6174:	d9800615 	stw	r6,24(sp)
    6178:	d8002215 	stw	zero,136(sp)
    617c:	d8800117 	ldw	r2,4(sp)
    6180:	10008916 	blt	r2,zero,63a8 <_dtoa_r+0x990>
    6184:	d9000517 	ldw	r4,20(sp)
    6188:	00c00384 	movi	r3,14
    618c:	19008616 	blt	r3,r4,63a8 <_dtoa_r+0x990>
    6190:	200490fa 	slli	r2,r4,3
    6194:	00c00074 	movhi	r3,1
    6198:	d9802217 	ldw	r6,136(sp)
    619c:	18c0d404 	addi	r3,r3,848
    61a0:	1885883a 	add	r2,r3,r2
    61a4:	14000017 	ldw	r16,0(r2)
    61a8:	14400117 	ldw	r17,4(r2)
    61ac:	30016316 	blt	r6,zero,673c <_dtoa_r+0xd24>
    61b0:	800d883a 	mov	r6,r16
    61b4:	880f883a 	mov	r7,r17
    61b8:	9009883a 	mov	r4,r18
    61bc:	980b883a 	mov	r5,r19
    61c0:	000db500 	call	db50 <__divdf3>
    61c4:	180b883a 	mov	r5,r3
    61c8:	1009883a 	mov	r4,r2
    61cc:	000f6a40 	call	f6a4 <__fixdfsi>
    61d0:	1009883a 	mov	r4,r2
    61d4:	102b883a 	mov	r21,r2
    61d8:	000f7240 	call	f724 <__floatsidf>
    61dc:	800d883a 	mov	r6,r16
    61e0:	880f883a 	mov	r7,r17
    61e4:	1009883a 	mov	r4,r2
    61e8:	180b883a 	mov	r5,r3
    61ec:	000e6900 	call	e690 <__muldf3>
    61f0:	100d883a 	mov	r6,r2
    61f4:	180f883a 	mov	r7,r3
    61f8:	9009883a 	mov	r4,r18
    61fc:	980b883a 	mov	r5,r19
    6200:	000eda80 	call	eda8 <__subdf3>
    6204:	d9c00717 	ldw	r7,28(sp)
    6208:	1009883a 	mov	r4,r2
    620c:	a8800c04 	addi	r2,r21,48
    6210:	38800005 	stb	r2,0(r7)
    6214:	3dc00044 	addi	r23,r7,1
    6218:	d9c00617 	ldw	r7,24(sp)
    621c:	01800044 	movi	r6,1
    6220:	180b883a 	mov	r5,r3
    6224:	2005883a 	mov	r2,r4
    6228:	39803826 	beq	r7,r6,630c <_dtoa_r+0x8f4>
    622c:	000d883a 	mov	r6,zero
    6230:	01d00934 	movhi	r7,16420
    6234:	000e6900 	call	e690 <__muldf3>
    6238:	000d883a 	mov	r6,zero
    623c:	000f883a 	mov	r7,zero
    6240:	1009883a 	mov	r4,r2
    6244:	180b883a 	mov	r5,r3
    6248:	1025883a 	mov	r18,r2
    624c:	1827883a 	mov	r19,r3
    6250:	000e4380 	call	e438 <__eqdf2>
    6254:	103f9a26 	beq	r2,zero,60c0 <__alt_data_end+0xfffc60c0>
    6258:	d9c00617 	ldw	r7,24(sp)
    625c:	d8c00717 	ldw	r3,28(sp)
    6260:	b829883a 	mov	r20,r23
    6264:	38bfffc4 	addi	r2,r7,-1
    6268:	18ad883a 	add	r22,r3,r2
    626c:	00000a06 	br	6298 <_dtoa_r+0x880>
    6270:	000e6900 	call	e690 <__muldf3>
    6274:	000d883a 	mov	r6,zero
    6278:	000f883a 	mov	r7,zero
    627c:	1009883a 	mov	r4,r2
    6280:	180b883a 	mov	r5,r3
    6284:	1025883a 	mov	r18,r2
    6288:	1827883a 	mov	r19,r3
    628c:	b829883a 	mov	r20,r23
    6290:	000e4380 	call	e438 <__eqdf2>
    6294:	103f8a26 	beq	r2,zero,60c0 <__alt_data_end+0xfffc60c0>
    6298:	800d883a 	mov	r6,r16
    629c:	880f883a 	mov	r7,r17
    62a0:	9009883a 	mov	r4,r18
    62a4:	980b883a 	mov	r5,r19
    62a8:	000db500 	call	db50 <__divdf3>
    62ac:	180b883a 	mov	r5,r3
    62b0:	1009883a 	mov	r4,r2
    62b4:	000f6a40 	call	f6a4 <__fixdfsi>
    62b8:	1009883a 	mov	r4,r2
    62bc:	102b883a 	mov	r21,r2
    62c0:	000f7240 	call	f724 <__floatsidf>
    62c4:	800d883a 	mov	r6,r16
    62c8:	880f883a 	mov	r7,r17
    62cc:	1009883a 	mov	r4,r2
    62d0:	180b883a 	mov	r5,r3
    62d4:	000e6900 	call	e690 <__muldf3>
    62d8:	100d883a 	mov	r6,r2
    62dc:	180f883a 	mov	r7,r3
    62e0:	9009883a 	mov	r4,r18
    62e4:	980b883a 	mov	r5,r19
    62e8:	000eda80 	call	eda8 <__subdf3>
    62ec:	aa000c04 	addi	r8,r21,48
    62f0:	a2000005 	stb	r8,0(r20)
    62f4:	000d883a 	mov	r6,zero
    62f8:	01d00934 	movhi	r7,16420
    62fc:	1009883a 	mov	r4,r2
    6300:	180b883a 	mov	r5,r3
    6304:	a5c00044 	addi	r23,r20,1
    6308:	b53fd91e 	bne	r22,r20,6270 <__alt_data_end+0xfffc6270>
    630c:	100d883a 	mov	r6,r2
    6310:	180f883a 	mov	r7,r3
    6314:	1009883a 	mov	r4,r2
    6318:	180b883a 	mov	r5,r3
    631c:	000d2a40 	call	d2a4 <__adddf3>
    6320:	100d883a 	mov	r6,r2
    6324:	180f883a 	mov	r7,r3
    6328:	8009883a 	mov	r4,r16
    632c:	880b883a 	mov	r5,r17
    6330:	1027883a 	mov	r19,r2
    6334:	1825883a 	mov	r18,r3
    6338:	000e59c0 	call	e59c <__ledf2>
    633c:	10000816 	blt	r2,zero,6360 <_dtoa_r+0x948>
    6340:	980d883a 	mov	r6,r19
    6344:	900f883a 	mov	r7,r18
    6348:	8009883a 	mov	r4,r16
    634c:	880b883a 	mov	r5,r17
    6350:	000e4380 	call	e438 <__eqdf2>
    6354:	103f5a1e 	bne	r2,zero,60c0 <__alt_data_end+0xfffc60c0>
    6358:	ad40004c 	andi	r21,r21,1
    635c:	a83f5826 	beq	r21,zero,60c0 <__alt_data_end+0xfffc60c0>
    6360:	bd3fffc3 	ldbu	r20,-1(r23)
    6364:	b8bfffc4 	addi	r2,r23,-1
    6368:	1007883a 	mov	r3,r2
    636c:	01400e44 	movi	r5,57
    6370:	d9800717 	ldw	r6,28(sp)
    6374:	00000506 	br	638c <_dtoa_r+0x974>
    6378:	18ffffc4 	addi	r3,r3,-1
    637c:	11824726 	beq	r2,r6,6c9c <_dtoa_r+0x1284>
    6380:	1d000003 	ldbu	r20,0(r3)
    6384:	102f883a 	mov	r23,r2
    6388:	10bfffc4 	addi	r2,r2,-1
    638c:	a1003fcc 	andi	r4,r20,255
    6390:	2100201c 	xori	r4,r4,128
    6394:	213fe004 	addi	r4,r4,-128
    6398:	217ff726 	beq	r4,r5,6378 <__alt_data_end+0xfffc6378>
    639c:	a2000044 	addi	r8,r20,1
    63a0:	12000005 	stb	r8,0(r2)
    63a4:	003f4606 	br	60c0 <__alt_data_end+0xfffc60c0>
    63a8:	d9000b17 	ldw	r4,44(sp)
    63ac:	2000c826 	beq	r4,zero,66d0 <_dtoa_r+0xcb8>
    63b0:	d9800317 	ldw	r6,12(sp)
    63b4:	00c00044 	movi	r3,1
    63b8:	1980f90e 	bge	r3,r6,67a0 <_dtoa_r+0xd88>
    63bc:	d8800617 	ldw	r2,24(sp)
    63c0:	d8c00a17 	ldw	r3,40(sp)
    63c4:	157fffc4 	addi	r21,r2,-1
    63c8:	1d41f316 	blt	r3,r21,6b98 <_dtoa_r+0x1180>
    63cc:	1d6bc83a 	sub	r21,r3,r21
    63d0:	d9c00617 	ldw	r7,24(sp)
    63d4:	3802aa16 	blt	r7,zero,6e80 <_dtoa_r+0x1468>
    63d8:	dd000817 	ldw	r20,32(sp)
    63dc:	d8800617 	ldw	r2,24(sp)
    63e0:	d8c00817 	ldw	r3,32(sp)
    63e4:	01400044 	movi	r5,1
    63e8:	e009883a 	mov	r4,fp
    63ec:	1887883a 	add	r3,r3,r2
    63f0:	d8c00815 	stw	r3,32(sp)
    63f4:	b0ad883a 	add	r22,r22,r2
    63f8:	0008d600 	call	8d60 <__i2b>
    63fc:	1023883a 	mov	r17,r2
    6400:	a0000826 	beq	r20,zero,6424 <_dtoa_r+0xa0c>
    6404:	0580070e 	bge	zero,r22,6424 <_dtoa_r+0xa0c>
    6408:	a005883a 	mov	r2,r20
    640c:	b500b916 	blt	r22,r20,66f4 <_dtoa_r+0xcdc>
    6410:	d9000817 	ldw	r4,32(sp)
    6414:	a0a9c83a 	sub	r20,r20,r2
    6418:	b0adc83a 	sub	r22,r22,r2
    641c:	2089c83a 	sub	r4,r4,r2
    6420:	d9000815 	stw	r4,32(sp)
    6424:	d9800a17 	ldw	r6,40(sp)
    6428:	0181810e 	bge	zero,r6,6a30 <_dtoa_r+0x1018>
    642c:	d9c00b17 	ldw	r7,44(sp)
    6430:	3800b326 	beq	r7,zero,6700 <_dtoa_r+0xce8>
    6434:	a800b226 	beq	r21,zero,6700 <_dtoa_r+0xce8>
    6438:	880b883a 	mov	r5,r17
    643c:	a80d883a 	mov	r6,r21
    6440:	e009883a 	mov	r4,fp
    6444:	0008f940 	call	8f94 <__pow5mult>
    6448:	d9800917 	ldw	r6,36(sp)
    644c:	100b883a 	mov	r5,r2
    6450:	e009883a 	mov	r4,fp
    6454:	1023883a 	mov	r17,r2
    6458:	0008d9c0 	call	8d9c <__multiply>
    645c:	1021883a 	mov	r16,r2
    6460:	d8800a17 	ldw	r2,40(sp)
    6464:	d9400917 	ldw	r5,36(sp)
    6468:	e009883a 	mov	r4,fp
    646c:	1545c83a 	sub	r2,r2,r21
    6470:	d8800a15 	stw	r2,40(sp)
    6474:	00089fc0 	call	89fc <_Bfree>
    6478:	d8c00a17 	ldw	r3,40(sp)
    647c:	18009f1e 	bne	r3,zero,66fc <_dtoa_r+0xce4>
    6480:	05c00044 	movi	r23,1
    6484:	e009883a 	mov	r4,fp
    6488:	b80b883a 	mov	r5,r23
    648c:	0008d600 	call	8d60 <__i2b>
    6490:	d9000d17 	ldw	r4,52(sp)
    6494:	102b883a 	mov	r21,r2
    6498:	2000ce26 	beq	r4,zero,67d4 <_dtoa_r+0xdbc>
    649c:	200d883a 	mov	r6,r4
    64a0:	100b883a 	mov	r5,r2
    64a4:	e009883a 	mov	r4,fp
    64a8:	0008f940 	call	8f94 <__pow5mult>
    64ac:	d9800317 	ldw	r6,12(sp)
    64b0:	102b883a 	mov	r21,r2
    64b4:	b981810e 	bge	r23,r6,6abc <_dtoa_r+0x10a4>
    64b8:	0027883a 	mov	r19,zero
    64bc:	a8800417 	ldw	r2,16(r21)
    64c0:	05c00804 	movi	r23,32
    64c4:	10800104 	addi	r2,r2,4
    64c8:	1085883a 	add	r2,r2,r2
    64cc:	1085883a 	add	r2,r2,r2
    64d0:	a885883a 	add	r2,r21,r2
    64d4:	11000017 	ldw	r4,0(r2)
    64d8:	0008c480 	call	8c48 <__hi0bits>
    64dc:	b885c83a 	sub	r2,r23,r2
    64e0:	1585883a 	add	r2,r2,r22
    64e4:	108007cc 	andi	r2,r2,31
    64e8:	1000b326 	beq	r2,zero,67b8 <_dtoa_r+0xda0>
    64ec:	00c00804 	movi	r3,32
    64f0:	1887c83a 	sub	r3,r3,r2
    64f4:	01000104 	movi	r4,4
    64f8:	20c2cd0e 	bge	r4,r3,7030 <_dtoa_r+0x1618>
    64fc:	00c00704 	movi	r3,28
    6500:	1885c83a 	sub	r2,r3,r2
    6504:	d8c00817 	ldw	r3,32(sp)
    6508:	a0a9883a 	add	r20,r20,r2
    650c:	b0ad883a 	add	r22,r22,r2
    6510:	1887883a 	add	r3,r3,r2
    6514:	d8c00815 	stw	r3,32(sp)
    6518:	d9800817 	ldw	r6,32(sp)
    651c:	0180040e 	bge	zero,r6,6530 <_dtoa_r+0xb18>
    6520:	800b883a 	mov	r5,r16
    6524:	e009883a 	mov	r4,fp
    6528:	00090d40 	call	90d4 <__lshift>
    652c:	1021883a 	mov	r16,r2
    6530:	0580050e 	bge	zero,r22,6548 <_dtoa_r+0xb30>
    6534:	a80b883a 	mov	r5,r21
    6538:	b00d883a 	mov	r6,r22
    653c:	e009883a 	mov	r4,fp
    6540:	00090d40 	call	90d4 <__lshift>
    6544:	102b883a 	mov	r21,r2
    6548:	d9c00e17 	ldw	r7,56(sp)
    654c:	3801211e 	bne	r7,zero,69d4 <_dtoa_r+0xfbc>
    6550:	d9800617 	ldw	r6,24(sp)
    6554:	0181380e 	bge	zero,r6,6a38 <_dtoa_r+0x1020>
    6558:	d8c00b17 	ldw	r3,44(sp)
    655c:	1800ab1e 	bne	r3,zero,680c <_dtoa_r+0xdf4>
    6560:	dc800717 	ldw	r18,28(sp)
    6564:	dcc00617 	ldw	r19,24(sp)
    6568:	9029883a 	mov	r20,r18
    656c:	00000206 	br	6578 <_dtoa_r+0xb60>
    6570:	0008a240 	call	8a24 <__multadd>
    6574:	1021883a 	mov	r16,r2
    6578:	a80b883a 	mov	r5,r21
    657c:	8009883a 	mov	r4,r16
    6580:	00058180 	call	5818 <quorem>
    6584:	10800c04 	addi	r2,r2,48
    6588:	90800005 	stb	r2,0(r18)
    658c:	94800044 	addi	r18,r18,1
    6590:	9507c83a 	sub	r3,r18,r20
    6594:	000f883a 	mov	r7,zero
    6598:	01800284 	movi	r6,10
    659c:	800b883a 	mov	r5,r16
    65a0:	e009883a 	mov	r4,fp
    65a4:	1cfff216 	blt	r3,r19,6570 <__alt_data_end+0xfffc6570>
    65a8:	1011883a 	mov	r8,r2
    65ac:	d8800617 	ldw	r2,24(sp)
    65b0:	0082370e 	bge	zero,r2,6e90 <_dtoa_r+0x1478>
    65b4:	d9000717 	ldw	r4,28(sp)
    65b8:	0025883a 	mov	r18,zero
    65bc:	20af883a 	add	r23,r4,r2
    65c0:	01800044 	movi	r6,1
    65c4:	800b883a 	mov	r5,r16
    65c8:	e009883a 	mov	r4,fp
    65cc:	da001715 	stw	r8,92(sp)
    65d0:	00090d40 	call	90d4 <__lshift>
    65d4:	a80b883a 	mov	r5,r21
    65d8:	1009883a 	mov	r4,r2
    65dc:	d8800915 	stw	r2,36(sp)
    65e0:	000921c0 	call	921c <__mcmp>
    65e4:	da001717 	ldw	r8,92(sp)
    65e8:	0081800e 	bge	zero,r2,6bec <_dtoa_r+0x11d4>
    65ec:	b93fffc3 	ldbu	r4,-1(r23)
    65f0:	b8bfffc4 	addi	r2,r23,-1
    65f4:	1007883a 	mov	r3,r2
    65f8:	01800e44 	movi	r6,57
    65fc:	d9c00717 	ldw	r7,28(sp)
    6600:	00000506 	br	6618 <_dtoa_r+0xc00>
    6604:	18ffffc4 	addi	r3,r3,-1
    6608:	11c12326 	beq	r2,r7,6a98 <_dtoa_r+0x1080>
    660c:	19000003 	ldbu	r4,0(r3)
    6610:	102f883a 	mov	r23,r2
    6614:	10bfffc4 	addi	r2,r2,-1
    6618:	21403fcc 	andi	r5,r4,255
    661c:	2940201c 	xori	r5,r5,128
    6620:	297fe004 	addi	r5,r5,-128
    6624:	29bff726 	beq	r5,r6,6604 <__alt_data_end+0xfffc6604>
    6628:	21000044 	addi	r4,r4,1
    662c:	11000005 	stb	r4,0(r2)
    6630:	a80b883a 	mov	r5,r21
    6634:	e009883a 	mov	r4,fp
    6638:	00089fc0 	call	89fc <_Bfree>
    663c:	883ea026 	beq	r17,zero,60c0 <__alt_data_end+0xfffc60c0>
    6640:	90000426 	beq	r18,zero,6654 <_dtoa_r+0xc3c>
    6644:	94400326 	beq	r18,r17,6654 <_dtoa_r+0xc3c>
    6648:	900b883a 	mov	r5,r18
    664c:	e009883a 	mov	r4,fp
    6650:	00089fc0 	call	89fc <_Bfree>
    6654:	880b883a 	mov	r5,r17
    6658:	e009883a 	mov	r4,fp
    665c:	00089fc0 	call	89fc <_Bfree>
    6660:	003e9706 	br	60c0 <__alt_data_end+0xfffc60c0>
    6664:	01800044 	movi	r6,1
    6668:	d9800e15 	stw	r6,56(sp)
    666c:	003d9606 	br	5cc8 <__alt_data_end+0xfffc5cc8>
    6670:	d8800817 	ldw	r2,32(sp)
    6674:	d8c00517 	ldw	r3,20(sp)
    6678:	d8000d15 	stw	zero,52(sp)
    667c:	10c5c83a 	sub	r2,r2,r3
    6680:	00c9c83a 	sub	r4,zero,r3
    6684:	d8800815 	stw	r2,32(sp)
    6688:	d9000a15 	stw	r4,40(sp)
    668c:	003d9706 	br	5cec <__alt_data_end+0xfffc5cec>
    6690:	05adc83a 	sub	r22,zero,r22
    6694:	dd800815 	stw	r22,32(sp)
    6698:	002d883a 	mov	r22,zero
    669c:	003d8e06 	br	5cd8 <__alt_data_end+0xfffc5cd8>
    66a0:	d9000517 	ldw	r4,20(sp)
    66a4:	000f7240 	call	f724 <__floatsidf>
    66a8:	100d883a 	mov	r6,r2
    66ac:	180f883a 	mov	r7,r3
    66b0:	a009883a 	mov	r4,r20
    66b4:	880b883a 	mov	r5,r17
    66b8:	000e4380 	call	e438 <__eqdf2>
    66bc:	103d7126 	beq	r2,zero,5c84 <__alt_data_end+0xfffc5c84>
    66c0:	d9c00517 	ldw	r7,20(sp)
    66c4:	39ffffc4 	addi	r7,r7,-1
    66c8:	d9c00515 	stw	r7,20(sp)
    66cc:	003d6d06 	br	5c84 <__alt_data_end+0xfffc5c84>
    66d0:	dd400a17 	ldw	r21,40(sp)
    66d4:	dd000817 	ldw	r20,32(sp)
    66d8:	0023883a 	mov	r17,zero
    66dc:	003f4806 	br	6400 <__alt_data_end+0xfffc6400>
    66e0:	10e3c83a 	sub	r17,r2,r3
    66e4:	9448983a 	sll	r4,r18,r17
    66e8:	003d3206 	br	5bb4 <__alt_data_end+0xfffc5bb4>
    66ec:	d8000e15 	stw	zero,56(sp)
    66f0:	003d7506 	br	5cc8 <__alt_data_end+0xfffc5cc8>
    66f4:	b005883a 	mov	r2,r22
    66f8:	003f4506 	br	6410 <__alt_data_end+0xfffc6410>
    66fc:	dc000915 	stw	r16,36(sp)
    6700:	d9800a17 	ldw	r6,40(sp)
    6704:	d9400917 	ldw	r5,36(sp)
    6708:	e009883a 	mov	r4,fp
    670c:	0008f940 	call	8f94 <__pow5mult>
    6710:	1021883a 	mov	r16,r2
    6714:	003f5a06 	br	6480 <__alt_data_end+0xfffc6480>
    6718:	01c00044 	movi	r7,1
    671c:	d9c00b15 	stw	r7,44(sp)
    6720:	d8802217 	ldw	r2,136(sp)
    6724:	0081280e 	bge	zero,r2,6bc8 <_dtoa_r+0x11b0>
    6728:	100d883a 	mov	r6,r2
    672c:	1021883a 	mov	r16,r2
    6730:	d8800c15 	stw	r2,48(sp)
    6734:	d8800615 	stw	r2,24(sp)
    6738:	003d8806 	br	5d5c <__alt_data_end+0xfffc5d5c>
    673c:	d8800617 	ldw	r2,24(sp)
    6740:	00be9b16 	blt	zero,r2,61b0 <__alt_data_end+0xfffc61b0>
    6744:	10010f1e 	bne	r2,zero,6b84 <_dtoa_r+0x116c>
    6748:	880b883a 	mov	r5,r17
    674c:	000d883a 	mov	r6,zero
    6750:	01d00534 	movhi	r7,16404
    6754:	8009883a 	mov	r4,r16
    6758:	000e6900 	call	e690 <__muldf3>
    675c:	900d883a 	mov	r6,r18
    6760:	980f883a 	mov	r7,r19
    6764:	1009883a 	mov	r4,r2
    6768:	180b883a 	mov	r5,r3
    676c:	000e4c00 	call	e4c0 <__gedf2>
    6770:	002b883a 	mov	r21,zero
    6774:	0023883a 	mov	r17,zero
    6778:	1000bf16 	blt	r2,zero,6a78 <_dtoa_r+0x1060>
    677c:	d9802217 	ldw	r6,136(sp)
    6780:	ddc00717 	ldw	r23,28(sp)
    6784:	018c303a 	nor	r6,zero,r6
    6788:	d9800515 	stw	r6,20(sp)
    678c:	a80b883a 	mov	r5,r21
    6790:	e009883a 	mov	r4,fp
    6794:	00089fc0 	call	89fc <_Bfree>
    6798:	883e4926 	beq	r17,zero,60c0 <__alt_data_end+0xfffc60c0>
    679c:	003fad06 	br	6654 <__alt_data_end+0xfffc6654>
    67a0:	d9c01117 	ldw	r7,68(sp)
    67a4:	3801bc26 	beq	r7,zero,6e98 <_dtoa_r+0x1480>
    67a8:	10810cc4 	addi	r2,r2,1075
    67ac:	dd400a17 	ldw	r21,40(sp)
    67b0:	dd000817 	ldw	r20,32(sp)
    67b4:	003f0a06 	br	63e0 <__alt_data_end+0xfffc63e0>
    67b8:	00800704 	movi	r2,28
    67bc:	d9000817 	ldw	r4,32(sp)
    67c0:	a0a9883a 	add	r20,r20,r2
    67c4:	b0ad883a 	add	r22,r22,r2
    67c8:	2089883a 	add	r4,r4,r2
    67cc:	d9000815 	stw	r4,32(sp)
    67d0:	003f5106 	br	6518 <__alt_data_end+0xfffc6518>
    67d4:	d8c00317 	ldw	r3,12(sp)
    67d8:	b8c1fc0e 	bge	r23,r3,6fcc <_dtoa_r+0x15b4>
    67dc:	0027883a 	mov	r19,zero
    67e0:	b805883a 	mov	r2,r23
    67e4:	003f3e06 	br	64e0 <__alt_data_end+0xfffc64e0>
    67e8:	880b883a 	mov	r5,r17
    67ec:	e009883a 	mov	r4,fp
    67f0:	000f883a 	mov	r7,zero
    67f4:	01800284 	movi	r6,10
    67f8:	0008a240 	call	8a24 <__multadd>
    67fc:	d9000c17 	ldw	r4,48(sp)
    6800:	1023883a 	mov	r17,r2
    6804:	0102040e 	bge	zero,r4,7018 <_dtoa_r+0x1600>
    6808:	d9000615 	stw	r4,24(sp)
    680c:	0500050e 	bge	zero,r20,6824 <_dtoa_r+0xe0c>
    6810:	880b883a 	mov	r5,r17
    6814:	a00d883a 	mov	r6,r20
    6818:	e009883a 	mov	r4,fp
    681c:	00090d40 	call	90d4 <__lshift>
    6820:	1023883a 	mov	r17,r2
    6824:	9801241e 	bne	r19,zero,6cb8 <_dtoa_r+0x12a0>
    6828:	8829883a 	mov	r20,r17
    682c:	d9000617 	ldw	r4,24(sp)
    6830:	dcc00717 	ldw	r19,28(sp)
    6834:	9480004c 	andi	r18,r18,1
    6838:	20bfffc4 	addi	r2,r4,-1
    683c:	9885883a 	add	r2,r19,r2
    6840:	d8800415 	stw	r2,16(sp)
    6844:	dc800615 	stw	r18,24(sp)
    6848:	a80b883a 	mov	r5,r21
    684c:	8009883a 	mov	r4,r16
    6850:	00058180 	call	5818 <quorem>
    6854:	880b883a 	mov	r5,r17
    6858:	8009883a 	mov	r4,r16
    685c:	102f883a 	mov	r23,r2
    6860:	000921c0 	call	921c <__mcmp>
    6864:	a80b883a 	mov	r5,r21
    6868:	a00d883a 	mov	r6,r20
    686c:	e009883a 	mov	r4,fp
    6870:	102d883a 	mov	r22,r2
    6874:	000927c0 	call	927c <__mdiff>
    6878:	1007883a 	mov	r3,r2
    687c:	10800317 	ldw	r2,12(r2)
    6880:	bc800c04 	addi	r18,r23,48
    6884:	180b883a 	mov	r5,r3
    6888:	10004e1e 	bne	r2,zero,69c4 <_dtoa_r+0xfac>
    688c:	8009883a 	mov	r4,r16
    6890:	d8c01615 	stw	r3,88(sp)
    6894:	000921c0 	call	921c <__mcmp>
    6898:	d8c01617 	ldw	r3,88(sp)
    689c:	e009883a 	mov	r4,fp
    68a0:	d8801615 	stw	r2,88(sp)
    68a4:	180b883a 	mov	r5,r3
    68a8:	00089fc0 	call	89fc <_Bfree>
    68ac:	d8801617 	ldw	r2,88(sp)
    68b0:	1000041e 	bne	r2,zero,68c4 <_dtoa_r+0xeac>
    68b4:	d9800317 	ldw	r6,12(sp)
    68b8:	3000021e 	bne	r6,zero,68c4 <_dtoa_r+0xeac>
    68bc:	d8c00617 	ldw	r3,24(sp)
    68c0:	18003726 	beq	r3,zero,69a0 <_dtoa_r+0xf88>
    68c4:	b0002016 	blt	r22,zero,6948 <_dtoa_r+0xf30>
    68c8:	b000041e 	bne	r22,zero,68dc <_dtoa_r+0xec4>
    68cc:	d9000317 	ldw	r4,12(sp)
    68d0:	2000021e 	bne	r4,zero,68dc <_dtoa_r+0xec4>
    68d4:	d8c00617 	ldw	r3,24(sp)
    68d8:	18001b26 	beq	r3,zero,6948 <_dtoa_r+0xf30>
    68dc:	00810716 	blt	zero,r2,6cfc <_dtoa_r+0x12e4>
    68e0:	d8c00417 	ldw	r3,16(sp)
    68e4:	9d800044 	addi	r22,r19,1
    68e8:	9c800005 	stb	r18,0(r19)
    68ec:	b02f883a 	mov	r23,r22
    68f0:	98c10626 	beq	r19,r3,6d0c <_dtoa_r+0x12f4>
    68f4:	800b883a 	mov	r5,r16
    68f8:	000f883a 	mov	r7,zero
    68fc:	01800284 	movi	r6,10
    6900:	e009883a 	mov	r4,fp
    6904:	0008a240 	call	8a24 <__multadd>
    6908:	1021883a 	mov	r16,r2
    690c:	000f883a 	mov	r7,zero
    6910:	01800284 	movi	r6,10
    6914:	880b883a 	mov	r5,r17
    6918:	e009883a 	mov	r4,fp
    691c:	8d002526 	beq	r17,r20,69b4 <_dtoa_r+0xf9c>
    6920:	0008a240 	call	8a24 <__multadd>
    6924:	a00b883a 	mov	r5,r20
    6928:	000f883a 	mov	r7,zero
    692c:	01800284 	movi	r6,10
    6930:	e009883a 	mov	r4,fp
    6934:	1023883a 	mov	r17,r2
    6938:	0008a240 	call	8a24 <__multadd>
    693c:	1029883a 	mov	r20,r2
    6940:	b027883a 	mov	r19,r22
    6944:	003fc006 	br	6848 <__alt_data_end+0xfffc6848>
    6948:	9011883a 	mov	r8,r18
    694c:	00800e0e 	bge	zero,r2,6988 <_dtoa_r+0xf70>
    6950:	800b883a 	mov	r5,r16
    6954:	01800044 	movi	r6,1
    6958:	e009883a 	mov	r4,fp
    695c:	da001715 	stw	r8,92(sp)
    6960:	00090d40 	call	90d4 <__lshift>
    6964:	a80b883a 	mov	r5,r21
    6968:	1009883a 	mov	r4,r2
    696c:	1021883a 	mov	r16,r2
    6970:	000921c0 	call	921c <__mcmp>
    6974:	da001717 	ldw	r8,92(sp)
    6978:	0081960e 	bge	zero,r2,6fd4 <_dtoa_r+0x15bc>
    697c:	00800e44 	movi	r2,57
    6980:	40817026 	beq	r8,r2,6f44 <_dtoa_r+0x152c>
    6984:	ba000c44 	addi	r8,r23,49
    6988:	8825883a 	mov	r18,r17
    698c:	9dc00044 	addi	r23,r19,1
    6990:	9a000005 	stb	r8,0(r19)
    6994:	a023883a 	mov	r17,r20
    6998:	dc000915 	stw	r16,36(sp)
    699c:	003f2406 	br	6630 <__alt_data_end+0xfffc6630>
    69a0:	00800e44 	movi	r2,57
    69a4:	9011883a 	mov	r8,r18
    69a8:	90816626 	beq	r18,r2,6f44 <_dtoa_r+0x152c>
    69ac:	05bff516 	blt	zero,r22,6984 <__alt_data_end+0xfffc6984>
    69b0:	003ff506 	br	6988 <__alt_data_end+0xfffc6988>
    69b4:	0008a240 	call	8a24 <__multadd>
    69b8:	1023883a 	mov	r17,r2
    69bc:	1029883a 	mov	r20,r2
    69c0:	003fdf06 	br	6940 <__alt_data_end+0xfffc6940>
    69c4:	e009883a 	mov	r4,fp
    69c8:	00089fc0 	call	89fc <_Bfree>
    69cc:	00800044 	movi	r2,1
    69d0:	003fbc06 	br	68c4 <__alt_data_end+0xfffc68c4>
    69d4:	a80b883a 	mov	r5,r21
    69d8:	8009883a 	mov	r4,r16
    69dc:	000921c0 	call	921c <__mcmp>
    69e0:	103edb0e 	bge	r2,zero,6550 <__alt_data_end+0xfffc6550>
    69e4:	800b883a 	mov	r5,r16
    69e8:	000f883a 	mov	r7,zero
    69ec:	01800284 	movi	r6,10
    69f0:	e009883a 	mov	r4,fp
    69f4:	0008a240 	call	8a24 <__multadd>
    69f8:	1021883a 	mov	r16,r2
    69fc:	d8800517 	ldw	r2,20(sp)
    6a00:	d8c00b17 	ldw	r3,44(sp)
    6a04:	10bfffc4 	addi	r2,r2,-1
    6a08:	d8800515 	stw	r2,20(sp)
    6a0c:	183f761e 	bne	r3,zero,67e8 <__alt_data_end+0xfffc67e8>
    6a10:	d9000c17 	ldw	r4,48(sp)
    6a14:	0101730e 	bge	zero,r4,6fe4 <_dtoa_r+0x15cc>
    6a18:	d9000615 	stw	r4,24(sp)
    6a1c:	003ed006 	br	6560 <__alt_data_end+0xfffc6560>
    6a20:	00800084 	movi	r2,2
    6a24:	3081861e 	bne	r6,r2,7040 <_dtoa_r+0x1628>
    6a28:	d8000b15 	stw	zero,44(sp)
    6a2c:	003f3c06 	br	6720 <__alt_data_end+0xfffc6720>
    6a30:	dc000917 	ldw	r16,36(sp)
    6a34:	003e9206 	br	6480 <__alt_data_end+0xfffc6480>
    6a38:	d9c00317 	ldw	r7,12(sp)
    6a3c:	00800084 	movi	r2,2
    6a40:	11fec50e 	bge	r2,r7,6558 <__alt_data_end+0xfffc6558>
    6a44:	d9000617 	ldw	r4,24(sp)
    6a48:	20013c1e 	bne	r4,zero,6f3c <_dtoa_r+0x1524>
    6a4c:	a80b883a 	mov	r5,r21
    6a50:	000f883a 	mov	r7,zero
    6a54:	01800144 	movi	r6,5
    6a58:	e009883a 	mov	r4,fp
    6a5c:	0008a240 	call	8a24 <__multadd>
    6a60:	100b883a 	mov	r5,r2
    6a64:	8009883a 	mov	r4,r16
    6a68:	102b883a 	mov	r21,r2
    6a6c:	000921c0 	call	921c <__mcmp>
    6a70:	dc000915 	stw	r16,36(sp)
    6a74:	00bf410e 	bge	zero,r2,677c <__alt_data_end+0xfffc677c>
    6a78:	d9c00717 	ldw	r7,28(sp)
    6a7c:	00800c44 	movi	r2,49
    6a80:	38800005 	stb	r2,0(r7)
    6a84:	d8800517 	ldw	r2,20(sp)
    6a88:	3dc00044 	addi	r23,r7,1
    6a8c:	10800044 	addi	r2,r2,1
    6a90:	d8800515 	stw	r2,20(sp)
    6a94:	003f3d06 	br	678c <__alt_data_end+0xfffc678c>
    6a98:	d9800517 	ldw	r6,20(sp)
    6a9c:	d9c00717 	ldw	r7,28(sp)
    6aa0:	00800c44 	movi	r2,49
    6aa4:	31800044 	addi	r6,r6,1
    6aa8:	d9800515 	stw	r6,20(sp)
    6aac:	38800005 	stb	r2,0(r7)
    6ab0:	003edf06 	br	6630 <__alt_data_end+0xfffc6630>
    6ab4:	d8000b15 	stw	zero,44(sp)
    6ab8:	003c9f06 	br	5d38 <__alt_data_end+0xfffc5d38>
    6abc:	903e7e1e 	bne	r18,zero,64b8 <__alt_data_end+0xfffc64b8>
    6ac0:	00800434 	movhi	r2,16
    6ac4:	10bfffc4 	addi	r2,r2,-1
    6ac8:	9884703a 	and	r2,r19,r2
    6acc:	1000ea1e 	bne	r2,zero,6e78 <_dtoa_r+0x1460>
    6ad0:	9cdffc2c 	andhi	r19,r19,32752
    6ad4:	9800e826 	beq	r19,zero,6e78 <_dtoa_r+0x1460>
    6ad8:	d9c00817 	ldw	r7,32(sp)
    6adc:	b5800044 	addi	r22,r22,1
    6ae0:	04c00044 	movi	r19,1
    6ae4:	39c00044 	addi	r7,r7,1
    6ae8:	d9c00815 	stw	r7,32(sp)
    6aec:	d8800d17 	ldw	r2,52(sp)
    6af0:	103e721e 	bne	r2,zero,64bc <__alt_data_end+0xfffc64bc>
    6af4:	00800044 	movi	r2,1
    6af8:	003e7906 	br	64e0 <__alt_data_end+0xfffc64e0>
    6afc:	8009883a 	mov	r4,r16
    6b00:	000f7240 	call	f724 <__floatsidf>
    6b04:	d9800f17 	ldw	r6,60(sp)
    6b08:	d9c01017 	ldw	r7,64(sp)
    6b0c:	1009883a 	mov	r4,r2
    6b10:	180b883a 	mov	r5,r3
    6b14:	000e6900 	call	e690 <__muldf3>
    6b18:	000d883a 	mov	r6,zero
    6b1c:	01d00734 	movhi	r7,16412
    6b20:	1009883a 	mov	r4,r2
    6b24:	180b883a 	mov	r5,r3
    6b28:	000d2a40 	call	d2a4 <__adddf3>
    6b2c:	047f3034 	movhi	r17,64704
    6b30:	1021883a 	mov	r16,r2
    6b34:	1c63883a 	add	r17,r3,r17
    6b38:	d9000f17 	ldw	r4,60(sp)
    6b3c:	d9401017 	ldw	r5,64(sp)
    6b40:	000d883a 	mov	r6,zero
    6b44:	01d00534 	movhi	r7,16404
    6b48:	000eda80 	call	eda8 <__subdf3>
    6b4c:	800d883a 	mov	r6,r16
    6b50:	880f883a 	mov	r7,r17
    6b54:	1009883a 	mov	r4,r2
    6b58:	180b883a 	mov	r5,r3
    6b5c:	102b883a 	mov	r21,r2
    6b60:	1829883a 	mov	r20,r3
    6b64:	000e4c00 	call	e4c0 <__gedf2>
    6b68:	00806c16 	blt	zero,r2,6d1c <_dtoa_r+0x1304>
    6b6c:	89e0003c 	xorhi	r7,r17,32768
    6b70:	800d883a 	mov	r6,r16
    6b74:	a809883a 	mov	r4,r21
    6b78:	a00b883a 	mov	r5,r20
    6b7c:	000e59c0 	call	e59c <__ledf2>
    6b80:	103d7e0e 	bge	r2,zero,617c <__alt_data_end+0xfffc617c>
    6b84:	002b883a 	mov	r21,zero
    6b88:	0023883a 	mov	r17,zero
    6b8c:	003efb06 	br	677c <__alt_data_end+0xfffc677c>
    6b90:	d8800717 	ldw	r2,28(sp)
    6b94:	003bd006 	br	5ad8 <__alt_data_end+0xfffc5ad8>
    6b98:	d9000a17 	ldw	r4,40(sp)
    6b9c:	d9800d17 	ldw	r6,52(sp)
    6ba0:	dd400a15 	stw	r21,40(sp)
    6ba4:	a905c83a 	sub	r2,r21,r4
    6ba8:	308d883a 	add	r6,r6,r2
    6bac:	d9800d15 	stw	r6,52(sp)
    6bb0:	002b883a 	mov	r21,zero
    6bb4:	003e0606 	br	63d0 <__alt_data_end+0xfffc63d0>
    6bb8:	9023883a 	mov	r17,r18
    6bbc:	9829883a 	mov	r20,r19
    6bc0:	04000084 	movi	r16,2
    6bc4:	003c9206 	br	5e10 <__alt_data_end+0xfffc5e10>
    6bc8:	04000044 	movi	r16,1
    6bcc:	dc000c15 	stw	r16,48(sp)
    6bd0:	dc000615 	stw	r16,24(sp)
    6bd4:	dc002215 	stw	r16,136(sp)
    6bd8:	e0001115 	stw	zero,68(fp)
    6bdc:	000b883a 	mov	r5,zero
    6be0:	003c6906 	br	5d88 <__alt_data_end+0xfffc5d88>
    6be4:	3021883a 	mov	r16,r6
    6be8:	003ffb06 	br	6bd8 <__alt_data_end+0xfffc6bd8>
    6bec:	1000021e 	bne	r2,zero,6bf8 <_dtoa_r+0x11e0>
    6bf0:	4200004c 	andi	r8,r8,1
    6bf4:	403e7d1e 	bne	r8,zero,65ec <__alt_data_end+0xfffc65ec>
    6bf8:	01000c04 	movi	r4,48
    6bfc:	00000106 	br	6c04 <_dtoa_r+0x11ec>
    6c00:	102f883a 	mov	r23,r2
    6c04:	b8bfffc4 	addi	r2,r23,-1
    6c08:	10c00007 	ldb	r3,0(r2)
    6c0c:	193ffc26 	beq	r3,r4,6c00 <__alt_data_end+0xfffc6c00>
    6c10:	003e8706 	br	6630 <__alt_data_end+0xfffc6630>
    6c14:	d8800517 	ldw	r2,20(sp)
    6c18:	00a3c83a 	sub	r17,zero,r2
    6c1c:	8800a426 	beq	r17,zero,6eb0 <_dtoa_r+0x1498>
    6c20:	888003cc 	andi	r2,r17,15
    6c24:	100490fa 	slli	r2,r2,3
    6c28:	00c00074 	movhi	r3,1
    6c2c:	18c0d404 	addi	r3,r3,848
    6c30:	1885883a 	add	r2,r3,r2
    6c34:	11800017 	ldw	r6,0(r2)
    6c38:	11c00117 	ldw	r7,4(r2)
    6c3c:	9009883a 	mov	r4,r18
    6c40:	980b883a 	mov	r5,r19
    6c44:	8823d13a 	srai	r17,r17,4
    6c48:	000e6900 	call	e690 <__muldf3>
    6c4c:	d8800f15 	stw	r2,60(sp)
    6c50:	d8c01015 	stw	r3,64(sp)
    6c54:	8800e826 	beq	r17,zero,6ff8 <_dtoa_r+0x15e0>
    6c58:	05000074 	movhi	r20,1
    6c5c:	a500ca04 	addi	r20,r20,808
    6c60:	04000084 	movi	r16,2
    6c64:	8980004c 	andi	r6,r17,1
    6c68:	1009883a 	mov	r4,r2
    6c6c:	8823d07a 	srai	r17,r17,1
    6c70:	180b883a 	mov	r5,r3
    6c74:	30000426 	beq	r6,zero,6c88 <_dtoa_r+0x1270>
    6c78:	a1800017 	ldw	r6,0(r20)
    6c7c:	a1c00117 	ldw	r7,4(r20)
    6c80:	84000044 	addi	r16,r16,1
    6c84:	000e6900 	call	e690 <__muldf3>
    6c88:	a5000204 	addi	r20,r20,8
    6c8c:	883ff51e 	bne	r17,zero,6c64 <__alt_data_end+0xfffc6c64>
    6c90:	d8800f15 	stw	r2,60(sp)
    6c94:	d8c01015 	stw	r3,64(sp)
    6c98:	003c7606 	br	5e74 <__alt_data_end+0xfffc5e74>
    6c9c:	00c00c04 	movi	r3,48
    6ca0:	10c00005 	stb	r3,0(r2)
    6ca4:	d8c00517 	ldw	r3,20(sp)
    6ca8:	bd3fffc3 	ldbu	r20,-1(r23)
    6cac:	18c00044 	addi	r3,r3,1
    6cb0:	d8c00515 	stw	r3,20(sp)
    6cb4:	003db906 	br	639c <__alt_data_end+0xfffc639c>
    6cb8:	89400117 	ldw	r5,4(r17)
    6cbc:	e009883a 	mov	r4,fp
    6cc0:	00089540 	call	8954 <_Balloc>
    6cc4:	89800417 	ldw	r6,16(r17)
    6cc8:	89400304 	addi	r5,r17,12
    6ccc:	11000304 	addi	r4,r2,12
    6cd0:	31800084 	addi	r6,r6,2
    6cd4:	318d883a 	add	r6,r6,r6
    6cd8:	318d883a 	add	r6,r6,r6
    6cdc:	1027883a 	mov	r19,r2
    6ce0:	0002c500 	call	2c50 <memcpy>
    6ce4:	01800044 	movi	r6,1
    6ce8:	980b883a 	mov	r5,r19
    6cec:	e009883a 	mov	r4,fp
    6cf0:	00090d40 	call	90d4 <__lshift>
    6cf4:	1029883a 	mov	r20,r2
    6cf8:	003ecc06 	br	682c <__alt_data_end+0xfffc682c>
    6cfc:	00800e44 	movi	r2,57
    6d00:	90809026 	beq	r18,r2,6f44 <_dtoa_r+0x152c>
    6d04:	92000044 	addi	r8,r18,1
    6d08:	003f1f06 	br	6988 <__alt_data_end+0xfffc6988>
    6d0c:	9011883a 	mov	r8,r18
    6d10:	8825883a 	mov	r18,r17
    6d14:	a023883a 	mov	r17,r20
    6d18:	003e2906 	br	65c0 <__alt_data_end+0xfffc65c0>
    6d1c:	002b883a 	mov	r21,zero
    6d20:	0023883a 	mov	r17,zero
    6d24:	003f5406 	br	6a78 <__alt_data_end+0xfffc6a78>
    6d28:	61bfffc4 	addi	r6,r12,-1
    6d2c:	300490fa 	slli	r2,r6,3
    6d30:	00c00074 	movhi	r3,1
    6d34:	18c0d404 	addi	r3,r3,848
    6d38:	1885883a 	add	r2,r3,r2
    6d3c:	11000017 	ldw	r4,0(r2)
    6d40:	11400117 	ldw	r5,4(r2)
    6d44:	d8800717 	ldw	r2,28(sp)
    6d48:	880f883a 	mov	r7,r17
    6d4c:	d9801215 	stw	r6,72(sp)
    6d50:	800d883a 	mov	r6,r16
    6d54:	db001615 	stw	r12,88(sp)
    6d58:	15c00044 	addi	r23,r2,1
    6d5c:	000e6900 	call	e690 <__muldf3>
    6d60:	d9401017 	ldw	r5,64(sp)
    6d64:	d9000f17 	ldw	r4,60(sp)
    6d68:	d8c01515 	stw	r3,84(sp)
    6d6c:	d8801415 	stw	r2,80(sp)
    6d70:	000f6a40 	call	f6a4 <__fixdfsi>
    6d74:	1009883a 	mov	r4,r2
    6d78:	1021883a 	mov	r16,r2
    6d7c:	000f7240 	call	f724 <__floatsidf>
    6d80:	d9000f17 	ldw	r4,60(sp)
    6d84:	d9401017 	ldw	r5,64(sp)
    6d88:	100d883a 	mov	r6,r2
    6d8c:	180f883a 	mov	r7,r3
    6d90:	000eda80 	call	eda8 <__subdf3>
    6d94:	1829883a 	mov	r20,r3
    6d98:	d8c00717 	ldw	r3,28(sp)
    6d9c:	84000c04 	addi	r16,r16,48
    6da0:	1023883a 	mov	r17,r2
    6da4:	1c000005 	stb	r16,0(r3)
    6da8:	db001617 	ldw	r12,88(sp)
    6dac:	00800044 	movi	r2,1
    6db0:	60802226 	beq	r12,r2,6e3c <_dtoa_r+0x1424>
    6db4:	d9c00717 	ldw	r7,28(sp)
    6db8:	8805883a 	mov	r2,r17
    6dbc:	b82b883a 	mov	r21,r23
    6dc0:	3b19883a 	add	r12,r7,r12
    6dc4:	6023883a 	mov	r17,r12
    6dc8:	a007883a 	mov	r3,r20
    6dcc:	dc800f15 	stw	r18,60(sp)
    6dd0:	000d883a 	mov	r6,zero
    6dd4:	01d00934 	movhi	r7,16420
    6dd8:	1009883a 	mov	r4,r2
    6ddc:	180b883a 	mov	r5,r3
    6de0:	000e6900 	call	e690 <__muldf3>
    6de4:	180b883a 	mov	r5,r3
    6de8:	1009883a 	mov	r4,r2
    6dec:	1829883a 	mov	r20,r3
    6df0:	1025883a 	mov	r18,r2
    6df4:	000f6a40 	call	f6a4 <__fixdfsi>
    6df8:	1009883a 	mov	r4,r2
    6dfc:	1021883a 	mov	r16,r2
    6e00:	000f7240 	call	f724 <__floatsidf>
    6e04:	100d883a 	mov	r6,r2
    6e08:	180f883a 	mov	r7,r3
    6e0c:	9009883a 	mov	r4,r18
    6e10:	a00b883a 	mov	r5,r20
    6e14:	84000c04 	addi	r16,r16,48
    6e18:	000eda80 	call	eda8 <__subdf3>
    6e1c:	ad400044 	addi	r21,r21,1
    6e20:	ac3fffc5 	stb	r16,-1(r21)
    6e24:	ac7fea1e 	bne	r21,r17,6dd0 <__alt_data_end+0xfffc6dd0>
    6e28:	1023883a 	mov	r17,r2
    6e2c:	d8801217 	ldw	r2,72(sp)
    6e30:	dc800f17 	ldw	r18,60(sp)
    6e34:	1829883a 	mov	r20,r3
    6e38:	b8af883a 	add	r23,r23,r2
    6e3c:	d9001417 	ldw	r4,80(sp)
    6e40:	d9401517 	ldw	r5,84(sp)
    6e44:	000d883a 	mov	r6,zero
    6e48:	01cff834 	movhi	r7,16352
    6e4c:	000d2a40 	call	d2a4 <__adddf3>
    6e50:	880d883a 	mov	r6,r17
    6e54:	a00f883a 	mov	r7,r20
    6e58:	1009883a 	mov	r4,r2
    6e5c:	180b883a 	mov	r5,r3
    6e60:	000e59c0 	call	e59c <__ledf2>
    6e64:	10003e0e 	bge	r2,zero,6f60 <_dtoa_r+0x1548>
    6e68:	d9001317 	ldw	r4,76(sp)
    6e6c:	bd3fffc3 	ldbu	r20,-1(r23)
    6e70:	d9000515 	stw	r4,20(sp)
    6e74:	003d3b06 	br	6364 <__alt_data_end+0xfffc6364>
    6e78:	0027883a 	mov	r19,zero
    6e7c:	003f1b06 	br	6aec <__alt_data_end+0xfffc6aec>
    6e80:	d8800817 	ldw	r2,32(sp)
    6e84:	11e9c83a 	sub	r20,r2,r7
    6e88:	0005883a 	mov	r2,zero
    6e8c:	003d5406 	br	63e0 <__alt_data_end+0xfffc63e0>
    6e90:	00800044 	movi	r2,1
    6e94:	003dc706 	br	65b4 <__alt_data_end+0xfffc65b4>
    6e98:	d8c00217 	ldw	r3,8(sp)
    6e9c:	00800d84 	movi	r2,54
    6ea0:	dd400a17 	ldw	r21,40(sp)
    6ea4:	10c5c83a 	sub	r2,r2,r3
    6ea8:	dd000817 	ldw	r20,32(sp)
    6eac:	003d4c06 	br	63e0 <__alt_data_end+0xfffc63e0>
    6eb0:	dc800f15 	stw	r18,60(sp)
    6eb4:	dcc01015 	stw	r19,64(sp)
    6eb8:	04000084 	movi	r16,2
    6ebc:	003bed06 	br	5e74 <__alt_data_end+0xfffc5e74>
    6ec0:	d9000617 	ldw	r4,24(sp)
    6ec4:	203f0d26 	beq	r4,zero,6afc <__alt_data_end+0xfffc6afc>
    6ec8:	d9800c17 	ldw	r6,48(sp)
    6ecc:	01bcab0e 	bge	zero,r6,617c <__alt_data_end+0xfffc617c>
    6ed0:	d9401017 	ldw	r5,64(sp)
    6ed4:	d9000f17 	ldw	r4,60(sp)
    6ed8:	000d883a 	mov	r6,zero
    6edc:	01d00934 	movhi	r7,16420
    6ee0:	000e6900 	call	e690 <__muldf3>
    6ee4:	81000044 	addi	r4,r16,1
    6ee8:	d8800f15 	stw	r2,60(sp)
    6eec:	d8c01015 	stw	r3,64(sp)
    6ef0:	000f7240 	call	f724 <__floatsidf>
    6ef4:	d9800f17 	ldw	r6,60(sp)
    6ef8:	d9c01017 	ldw	r7,64(sp)
    6efc:	1009883a 	mov	r4,r2
    6f00:	180b883a 	mov	r5,r3
    6f04:	000e6900 	call	e690 <__muldf3>
    6f08:	01d00734 	movhi	r7,16412
    6f0c:	000d883a 	mov	r6,zero
    6f10:	1009883a 	mov	r4,r2
    6f14:	180b883a 	mov	r5,r3
    6f18:	000d2a40 	call	d2a4 <__adddf3>
    6f1c:	d9c00517 	ldw	r7,20(sp)
    6f20:	047f3034 	movhi	r17,64704
    6f24:	1021883a 	mov	r16,r2
    6f28:	39ffffc4 	addi	r7,r7,-1
    6f2c:	d9c01315 	stw	r7,76(sp)
    6f30:	1c63883a 	add	r17,r3,r17
    6f34:	db000c17 	ldw	r12,48(sp)
    6f38:	003bea06 	br	5ee4 <__alt_data_end+0xfffc5ee4>
    6f3c:	dc000915 	stw	r16,36(sp)
    6f40:	003e0e06 	br	677c <__alt_data_end+0xfffc677c>
    6f44:	01000e44 	movi	r4,57
    6f48:	8825883a 	mov	r18,r17
    6f4c:	9dc00044 	addi	r23,r19,1
    6f50:	99000005 	stb	r4,0(r19)
    6f54:	a023883a 	mov	r17,r20
    6f58:	dc000915 	stw	r16,36(sp)
    6f5c:	003da406 	br	65f0 <__alt_data_end+0xfffc65f0>
    6f60:	d9801417 	ldw	r6,80(sp)
    6f64:	d9c01517 	ldw	r7,84(sp)
    6f68:	0009883a 	mov	r4,zero
    6f6c:	014ff834 	movhi	r5,16352
    6f70:	000eda80 	call	eda8 <__subdf3>
    6f74:	880d883a 	mov	r6,r17
    6f78:	a00f883a 	mov	r7,r20
    6f7c:	1009883a 	mov	r4,r2
    6f80:	180b883a 	mov	r5,r3
    6f84:	000e4c00 	call	e4c0 <__gedf2>
    6f88:	00bc7c0e 	bge	zero,r2,617c <__alt_data_end+0xfffc617c>
    6f8c:	01000c04 	movi	r4,48
    6f90:	00000106 	br	6f98 <_dtoa_r+0x1580>
    6f94:	102f883a 	mov	r23,r2
    6f98:	b8bfffc4 	addi	r2,r23,-1
    6f9c:	10c00007 	ldb	r3,0(r2)
    6fa0:	193ffc26 	beq	r3,r4,6f94 <__alt_data_end+0xfffc6f94>
    6fa4:	d9801317 	ldw	r6,76(sp)
    6fa8:	d9800515 	stw	r6,20(sp)
    6fac:	003c4406 	br	60c0 <__alt_data_end+0xfffc60c0>
    6fb0:	d9801317 	ldw	r6,76(sp)
    6fb4:	d9800515 	stw	r6,20(sp)
    6fb8:	003cea06 	br	6364 <__alt_data_end+0xfffc6364>
    6fbc:	dd800f17 	ldw	r22,60(sp)
    6fc0:	dcc01017 	ldw	r19,64(sp)
    6fc4:	dc801217 	ldw	r18,72(sp)
    6fc8:	003c6c06 	br	617c <__alt_data_end+0xfffc617c>
    6fcc:	903e031e 	bne	r18,zero,67dc <__alt_data_end+0xfffc67dc>
    6fd0:	003ebb06 	br	6ac0 <__alt_data_end+0xfffc6ac0>
    6fd4:	103e6c1e 	bne	r2,zero,6988 <__alt_data_end+0xfffc6988>
    6fd8:	4080004c 	andi	r2,r8,1
    6fdc:	103e6a26 	beq	r2,zero,6988 <__alt_data_end+0xfffc6988>
    6fe0:	003e6606 	br	697c <__alt_data_end+0xfffc697c>
    6fe4:	d8c00317 	ldw	r3,12(sp)
    6fe8:	00800084 	movi	r2,2
    6fec:	10c02916 	blt	r2,r3,7094 <_dtoa_r+0x167c>
    6ff0:	d9000c17 	ldw	r4,48(sp)
    6ff4:	003e8806 	br	6a18 <__alt_data_end+0xfffc6a18>
    6ff8:	04000084 	movi	r16,2
    6ffc:	003b9d06 	br	5e74 <__alt_data_end+0xfffc5e74>
    7000:	d9001317 	ldw	r4,76(sp)
    7004:	d9000515 	stw	r4,20(sp)
    7008:	003cd606 	br	6364 <__alt_data_end+0xfffc6364>
    700c:	d8801317 	ldw	r2,76(sp)
    7010:	d8800515 	stw	r2,20(sp)
    7014:	003c2a06 	br	60c0 <__alt_data_end+0xfffc60c0>
    7018:	d9800317 	ldw	r6,12(sp)
    701c:	00800084 	movi	r2,2
    7020:	11801516 	blt	r2,r6,7078 <_dtoa_r+0x1660>
    7024:	d9c00c17 	ldw	r7,48(sp)
    7028:	d9c00615 	stw	r7,24(sp)
    702c:	003df706 	br	680c <__alt_data_end+0xfffc680c>
    7030:	193d3926 	beq	r3,r4,6518 <__alt_data_end+0xfffc6518>
    7034:	00c00f04 	movi	r3,60
    7038:	1885c83a 	sub	r2,r3,r2
    703c:	003ddf06 	br	67bc <__alt_data_end+0xfffc67bc>
    7040:	e009883a 	mov	r4,fp
    7044:	e0001115 	stw	zero,68(fp)
    7048:	000b883a 	mov	r5,zero
    704c:	00089540 	call	8954 <_Balloc>
    7050:	d8800715 	stw	r2,28(sp)
    7054:	d8c00717 	ldw	r3,28(sp)
    7058:	00bfffc4 	movi	r2,-1
    705c:	01000044 	movi	r4,1
    7060:	d8800c15 	stw	r2,48(sp)
    7064:	e0c01015 	stw	r3,64(fp)
    7068:	d9000b15 	stw	r4,44(sp)
    706c:	d8800615 	stw	r2,24(sp)
    7070:	d8002215 	stw	zero,136(sp)
    7074:	003c4106 	br	617c <__alt_data_end+0xfffc617c>
    7078:	d8c00c17 	ldw	r3,48(sp)
    707c:	d8c00615 	stw	r3,24(sp)
    7080:	003e7006 	br	6a44 <__alt_data_end+0xfffc6a44>
    7084:	04400044 	movi	r17,1
    7088:	003b2006 	br	5d0c <__alt_data_end+0xfffc5d0c>
    708c:	000b883a 	mov	r5,zero
    7090:	003b3d06 	br	5d88 <__alt_data_end+0xfffc5d88>
    7094:	d8800c17 	ldw	r2,48(sp)
    7098:	d8800615 	stw	r2,24(sp)
    709c:	003e6906 	br	6a44 <__alt_data_end+0xfffc6a44>

000070a0 <__sflush_r>:
    70a0:	2880030b 	ldhu	r2,12(r5)
    70a4:	defffb04 	addi	sp,sp,-20
    70a8:	dcc00315 	stw	r19,12(sp)
    70ac:	dc400115 	stw	r17,4(sp)
    70b0:	dfc00415 	stw	ra,16(sp)
    70b4:	dc800215 	stw	r18,8(sp)
    70b8:	dc000015 	stw	r16,0(sp)
    70bc:	10c0020c 	andi	r3,r2,8
    70c0:	2823883a 	mov	r17,r5
    70c4:	2027883a 	mov	r19,r4
    70c8:	1800311e 	bne	r3,zero,7190 <__sflush_r+0xf0>
    70cc:	28c00117 	ldw	r3,4(r5)
    70d0:	10820014 	ori	r2,r2,2048
    70d4:	2880030d 	sth	r2,12(r5)
    70d8:	00c04b0e 	bge	zero,r3,7208 <__sflush_r+0x168>
    70dc:	8a000a17 	ldw	r8,40(r17)
    70e0:	40002326 	beq	r8,zero,7170 <__sflush_r+0xd0>
    70e4:	9c000017 	ldw	r16,0(r19)
    70e8:	10c4000c 	andi	r3,r2,4096
    70ec:	98000015 	stw	zero,0(r19)
    70f0:	18004826 	beq	r3,zero,7214 <__sflush_r+0x174>
    70f4:	89801417 	ldw	r6,80(r17)
    70f8:	10c0010c 	andi	r3,r2,4
    70fc:	18000626 	beq	r3,zero,7118 <__sflush_r+0x78>
    7100:	88c00117 	ldw	r3,4(r17)
    7104:	88800c17 	ldw	r2,48(r17)
    7108:	30cdc83a 	sub	r6,r6,r3
    710c:	10000226 	beq	r2,zero,7118 <__sflush_r+0x78>
    7110:	88800f17 	ldw	r2,60(r17)
    7114:	308dc83a 	sub	r6,r6,r2
    7118:	89400717 	ldw	r5,28(r17)
    711c:	000f883a 	mov	r7,zero
    7120:	9809883a 	mov	r4,r19
    7124:	403ee83a 	callr	r8
    7128:	00ffffc4 	movi	r3,-1
    712c:	10c04426 	beq	r2,r3,7240 <__sflush_r+0x1a0>
    7130:	88c0030b 	ldhu	r3,12(r17)
    7134:	89000417 	ldw	r4,16(r17)
    7138:	88000115 	stw	zero,4(r17)
    713c:	197dffcc 	andi	r5,r3,63487
    7140:	8940030d 	sth	r5,12(r17)
    7144:	89000015 	stw	r4,0(r17)
    7148:	18c4000c 	andi	r3,r3,4096
    714c:	18002c1e 	bne	r3,zero,7200 <__sflush_r+0x160>
    7150:	89400c17 	ldw	r5,48(r17)
    7154:	9c000015 	stw	r16,0(r19)
    7158:	28000526 	beq	r5,zero,7170 <__sflush_r+0xd0>
    715c:	88801004 	addi	r2,r17,64
    7160:	28800226 	beq	r5,r2,716c <__sflush_r+0xcc>
    7164:	9809883a 	mov	r4,r19
    7168:	000780c0 	call	780c <_free_r>
    716c:	88000c15 	stw	zero,48(r17)
    7170:	0005883a 	mov	r2,zero
    7174:	dfc00417 	ldw	ra,16(sp)
    7178:	dcc00317 	ldw	r19,12(sp)
    717c:	dc800217 	ldw	r18,8(sp)
    7180:	dc400117 	ldw	r17,4(sp)
    7184:	dc000017 	ldw	r16,0(sp)
    7188:	dec00504 	addi	sp,sp,20
    718c:	f800283a 	ret
    7190:	2c800417 	ldw	r18,16(r5)
    7194:	903ff626 	beq	r18,zero,7170 <__alt_data_end+0xfffc7170>
    7198:	2c000017 	ldw	r16,0(r5)
    719c:	108000cc 	andi	r2,r2,3
    71a0:	2c800015 	stw	r18,0(r5)
    71a4:	84a1c83a 	sub	r16,r16,r18
    71a8:	1000131e 	bne	r2,zero,71f8 <__sflush_r+0x158>
    71ac:	28800517 	ldw	r2,20(r5)
    71b0:	88800215 	stw	r2,8(r17)
    71b4:	04000316 	blt	zero,r16,71c4 <__sflush_r+0x124>
    71b8:	003fed06 	br	7170 <__alt_data_end+0xfffc7170>
    71bc:	90a5883a 	add	r18,r18,r2
    71c0:	043feb0e 	bge	zero,r16,7170 <__alt_data_end+0xfffc7170>
    71c4:	88800917 	ldw	r2,36(r17)
    71c8:	89400717 	ldw	r5,28(r17)
    71cc:	800f883a 	mov	r7,r16
    71d0:	900d883a 	mov	r6,r18
    71d4:	9809883a 	mov	r4,r19
    71d8:	103ee83a 	callr	r2
    71dc:	80a1c83a 	sub	r16,r16,r2
    71e0:	00bff616 	blt	zero,r2,71bc <__alt_data_end+0xfffc71bc>
    71e4:	88c0030b 	ldhu	r3,12(r17)
    71e8:	00bfffc4 	movi	r2,-1
    71ec:	18c01014 	ori	r3,r3,64
    71f0:	88c0030d 	sth	r3,12(r17)
    71f4:	003fdf06 	br	7174 <__alt_data_end+0xfffc7174>
    71f8:	0005883a 	mov	r2,zero
    71fc:	003fec06 	br	71b0 <__alt_data_end+0xfffc71b0>
    7200:	88801415 	stw	r2,80(r17)
    7204:	003fd206 	br	7150 <__alt_data_end+0xfffc7150>
    7208:	28c00f17 	ldw	r3,60(r5)
    720c:	00ffb316 	blt	zero,r3,70dc <__alt_data_end+0xfffc70dc>
    7210:	003fd706 	br	7170 <__alt_data_end+0xfffc7170>
    7214:	89400717 	ldw	r5,28(r17)
    7218:	000d883a 	mov	r6,zero
    721c:	01c00044 	movi	r7,1
    7220:	9809883a 	mov	r4,r19
    7224:	403ee83a 	callr	r8
    7228:	100d883a 	mov	r6,r2
    722c:	00bfffc4 	movi	r2,-1
    7230:	30801426 	beq	r6,r2,7284 <__sflush_r+0x1e4>
    7234:	8880030b 	ldhu	r2,12(r17)
    7238:	8a000a17 	ldw	r8,40(r17)
    723c:	003fae06 	br	70f8 <__alt_data_end+0xfffc70f8>
    7240:	98c00017 	ldw	r3,0(r19)
    7244:	183fba26 	beq	r3,zero,7130 <__alt_data_end+0xfffc7130>
    7248:	01000744 	movi	r4,29
    724c:	19000626 	beq	r3,r4,7268 <__sflush_r+0x1c8>
    7250:	01000584 	movi	r4,22
    7254:	19000426 	beq	r3,r4,7268 <__sflush_r+0x1c8>
    7258:	88c0030b 	ldhu	r3,12(r17)
    725c:	18c01014 	ori	r3,r3,64
    7260:	88c0030d 	sth	r3,12(r17)
    7264:	003fc306 	br	7174 <__alt_data_end+0xfffc7174>
    7268:	8880030b 	ldhu	r2,12(r17)
    726c:	88c00417 	ldw	r3,16(r17)
    7270:	88000115 	stw	zero,4(r17)
    7274:	10bdffcc 	andi	r2,r2,63487
    7278:	8880030d 	sth	r2,12(r17)
    727c:	88c00015 	stw	r3,0(r17)
    7280:	003fb306 	br	7150 <__alt_data_end+0xfffc7150>
    7284:	98800017 	ldw	r2,0(r19)
    7288:	103fea26 	beq	r2,zero,7234 <__alt_data_end+0xfffc7234>
    728c:	00c00744 	movi	r3,29
    7290:	10c00226 	beq	r2,r3,729c <__sflush_r+0x1fc>
    7294:	00c00584 	movi	r3,22
    7298:	10c0031e 	bne	r2,r3,72a8 <__sflush_r+0x208>
    729c:	9c000015 	stw	r16,0(r19)
    72a0:	0005883a 	mov	r2,zero
    72a4:	003fb306 	br	7174 <__alt_data_end+0xfffc7174>
    72a8:	88c0030b 	ldhu	r3,12(r17)
    72ac:	3005883a 	mov	r2,r6
    72b0:	18c01014 	ori	r3,r3,64
    72b4:	88c0030d 	sth	r3,12(r17)
    72b8:	003fae06 	br	7174 <__alt_data_end+0xfffc7174>

000072bc <_fflush_r>:
    72bc:	defffd04 	addi	sp,sp,-12
    72c0:	dc000115 	stw	r16,4(sp)
    72c4:	dfc00215 	stw	ra,8(sp)
    72c8:	2021883a 	mov	r16,r4
    72cc:	20000226 	beq	r4,zero,72d8 <_fflush_r+0x1c>
    72d0:	20800e17 	ldw	r2,56(r4)
    72d4:	10000c26 	beq	r2,zero,7308 <_fflush_r+0x4c>
    72d8:	2880030f 	ldh	r2,12(r5)
    72dc:	1000051e 	bne	r2,zero,72f4 <_fflush_r+0x38>
    72e0:	0005883a 	mov	r2,zero
    72e4:	dfc00217 	ldw	ra,8(sp)
    72e8:	dc000117 	ldw	r16,4(sp)
    72ec:	dec00304 	addi	sp,sp,12
    72f0:	f800283a 	ret
    72f4:	8009883a 	mov	r4,r16
    72f8:	dfc00217 	ldw	ra,8(sp)
    72fc:	dc000117 	ldw	r16,4(sp)
    7300:	dec00304 	addi	sp,sp,12
    7304:	00070a01 	jmpi	70a0 <__sflush_r>
    7308:	d9400015 	stw	r5,0(sp)
    730c:	00076980 	call	7698 <__sinit>
    7310:	d9400017 	ldw	r5,0(sp)
    7314:	003ff006 	br	72d8 <__alt_data_end+0xfffc72d8>

00007318 <fflush>:
    7318:	20000526 	beq	r4,zero,7330 <fflush+0x18>
    731c:	00800074 	movhi	r2,1
    7320:	10880504 	addi	r2,r2,8212
    7324:	200b883a 	mov	r5,r4
    7328:	11000017 	ldw	r4,0(r2)
    732c:	00072bc1 	jmpi	72bc <_fflush_r>
    7330:	00800074 	movhi	r2,1
    7334:	10880404 	addi	r2,r2,8208
    7338:	11000017 	ldw	r4,0(r2)
    733c:	01400034 	movhi	r5,0
    7340:	295caf04 	addi	r5,r5,29372
    7344:	0007be01 	jmpi	7be0 <_fwalk_reent>

00007348 <__fp_unlock>:
    7348:	0005883a 	mov	r2,zero
    734c:	f800283a 	ret

00007350 <_cleanup_r>:
    7350:	01400074 	movhi	r5,1
    7354:	296cfc04 	addi	r5,r5,-19472
    7358:	0007be01 	jmpi	7be0 <_fwalk_reent>

0000735c <__sinit.part.1>:
    735c:	defff704 	addi	sp,sp,-36
    7360:	00c00034 	movhi	r3,0
    7364:	dfc00815 	stw	ra,32(sp)
    7368:	ddc00715 	stw	r23,28(sp)
    736c:	dd800615 	stw	r22,24(sp)
    7370:	dd400515 	stw	r21,20(sp)
    7374:	dd000415 	stw	r20,16(sp)
    7378:	dcc00315 	stw	r19,12(sp)
    737c:	dc800215 	stw	r18,8(sp)
    7380:	dc400115 	stw	r17,4(sp)
    7384:	dc000015 	stw	r16,0(sp)
    7388:	18dcd404 	addi	r3,r3,29520
    738c:	24000117 	ldw	r16,4(r4)
    7390:	20c00f15 	stw	r3,60(r4)
    7394:	2080bb04 	addi	r2,r4,748
    7398:	00c000c4 	movi	r3,3
    739c:	20c0b915 	stw	r3,740(r4)
    73a0:	2080ba15 	stw	r2,744(r4)
    73a4:	2000b815 	stw	zero,736(r4)
    73a8:	05c00204 	movi	r23,8
    73ac:	00800104 	movi	r2,4
    73b0:	2025883a 	mov	r18,r4
    73b4:	b80d883a 	mov	r6,r23
    73b8:	81001704 	addi	r4,r16,92
    73bc:	000b883a 	mov	r5,zero
    73c0:	80000015 	stw	zero,0(r16)
    73c4:	80000115 	stw	zero,4(r16)
    73c8:	80000215 	stw	zero,8(r16)
    73cc:	8080030d 	sth	r2,12(r16)
    73d0:	80001915 	stw	zero,100(r16)
    73d4:	8000038d 	sth	zero,14(r16)
    73d8:	80000415 	stw	zero,16(r16)
    73dc:	80000515 	stw	zero,20(r16)
    73e0:	80000615 	stw	zero,24(r16)
    73e4:	000882c0 	call	882c <memset>
    73e8:	05800074 	movhi	r22,1
    73ec:	94400217 	ldw	r17,8(r18)
    73f0:	05400074 	movhi	r21,1
    73f4:	05000074 	movhi	r20,1
    73f8:	04c00074 	movhi	r19,1
    73fc:	b5a68604 	addi	r22,r22,-26088
    7400:	ad669d04 	addi	r21,r21,-25996
    7404:	a526bc04 	addi	r20,r20,-25872
    7408:	9ce6d304 	addi	r19,r19,-25780
    740c:	85800815 	stw	r22,32(r16)
    7410:	85400915 	stw	r21,36(r16)
    7414:	85000a15 	stw	r20,40(r16)
    7418:	84c00b15 	stw	r19,44(r16)
    741c:	84000715 	stw	r16,28(r16)
    7420:	00800284 	movi	r2,10
    7424:	8880030d 	sth	r2,12(r17)
    7428:	00800044 	movi	r2,1
    742c:	b80d883a 	mov	r6,r23
    7430:	89001704 	addi	r4,r17,92
    7434:	000b883a 	mov	r5,zero
    7438:	88000015 	stw	zero,0(r17)
    743c:	88000115 	stw	zero,4(r17)
    7440:	88000215 	stw	zero,8(r17)
    7444:	88001915 	stw	zero,100(r17)
    7448:	8880038d 	sth	r2,14(r17)
    744c:	88000415 	stw	zero,16(r17)
    7450:	88000515 	stw	zero,20(r17)
    7454:	88000615 	stw	zero,24(r17)
    7458:	000882c0 	call	882c <memset>
    745c:	94000317 	ldw	r16,12(r18)
    7460:	00800484 	movi	r2,18
    7464:	8c400715 	stw	r17,28(r17)
    7468:	8d800815 	stw	r22,32(r17)
    746c:	8d400915 	stw	r21,36(r17)
    7470:	8d000a15 	stw	r20,40(r17)
    7474:	8cc00b15 	stw	r19,44(r17)
    7478:	8080030d 	sth	r2,12(r16)
    747c:	00800084 	movi	r2,2
    7480:	80000015 	stw	zero,0(r16)
    7484:	80000115 	stw	zero,4(r16)
    7488:	80000215 	stw	zero,8(r16)
    748c:	80001915 	stw	zero,100(r16)
    7490:	8080038d 	sth	r2,14(r16)
    7494:	80000415 	stw	zero,16(r16)
    7498:	80000515 	stw	zero,20(r16)
    749c:	80000615 	stw	zero,24(r16)
    74a0:	b80d883a 	mov	r6,r23
    74a4:	000b883a 	mov	r5,zero
    74a8:	81001704 	addi	r4,r16,92
    74ac:	000882c0 	call	882c <memset>
    74b0:	00800044 	movi	r2,1
    74b4:	84000715 	stw	r16,28(r16)
    74b8:	85800815 	stw	r22,32(r16)
    74bc:	85400915 	stw	r21,36(r16)
    74c0:	85000a15 	stw	r20,40(r16)
    74c4:	84c00b15 	stw	r19,44(r16)
    74c8:	90800e15 	stw	r2,56(r18)
    74cc:	dfc00817 	ldw	ra,32(sp)
    74d0:	ddc00717 	ldw	r23,28(sp)
    74d4:	dd800617 	ldw	r22,24(sp)
    74d8:	dd400517 	ldw	r21,20(sp)
    74dc:	dd000417 	ldw	r20,16(sp)
    74e0:	dcc00317 	ldw	r19,12(sp)
    74e4:	dc800217 	ldw	r18,8(sp)
    74e8:	dc400117 	ldw	r17,4(sp)
    74ec:	dc000017 	ldw	r16,0(sp)
    74f0:	dec00904 	addi	sp,sp,36
    74f4:	f800283a 	ret

000074f8 <__fp_lock>:
    74f8:	0005883a 	mov	r2,zero
    74fc:	f800283a 	ret

00007500 <__sfmoreglue>:
    7500:	defffc04 	addi	sp,sp,-16
    7504:	dc400115 	stw	r17,4(sp)
    7508:	2c7fffc4 	addi	r17,r5,-1
    750c:	8c401a24 	muli	r17,r17,104
    7510:	dc800215 	stw	r18,8(sp)
    7514:	2825883a 	mov	r18,r5
    7518:	89401d04 	addi	r5,r17,116
    751c:	dc000015 	stw	r16,0(sp)
    7520:	dfc00315 	stw	ra,12(sp)
    7524:	0007f3c0 	call	7f3c <_malloc_r>
    7528:	1021883a 	mov	r16,r2
    752c:	10000726 	beq	r2,zero,754c <__sfmoreglue+0x4c>
    7530:	11000304 	addi	r4,r2,12
    7534:	10000015 	stw	zero,0(r2)
    7538:	14800115 	stw	r18,4(r2)
    753c:	11000215 	stw	r4,8(r2)
    7540:	89801a04 	addi	r6,r17,104
    7544:	000b883a 	mov	r5,zero
    7548:	000882c0 	call	882c <memset>
    754c:	8005883a 	mov	r2,r16
    7550:	dfc00317 	ldw	ra,12(sp)
    7554:	dc800217 	ldw	r18,8(sp)
    7558:	dc400117 	ldw	r17,4(sp)
    755c:	dc000017 	ldw	r16,0(sp)
    7560:	dec00404 	addi	sp,sp,16
    7564:	f800283a 	ret

00007568 <__sfp>:
    7568:	defffb04 	addi	sp,sp,-20
    756c:	dc000015 	stw	r16,0(sp)
    7570:	04000074 	movhi	r16,1
    7574:	84080404 	addi	r16,r16,8208
    7578:	dcc00315 	stw	r19,12(sp)
    757c:	2027883a 	mov	r19,r4
    7580:	81000017 	ldw	r4,0(r16)
    7584:	dfc00415 	stw	ra,16(sp)
    7588:	dc800215 	stw	r18,8(sp)
    758c:	20800e17 	ldw	r2,56(r4)
    7590:	dc400115 	stw	r17,4(sp)
    7594:	1000021e 	bne	r2,zero,75a0 <__sfp+0x38>
    7598:	000735c0 	call	735c <__sinit.part.1>
    759c:	81000017 	ldw	r4,0(r16)
    75a0:	2480b804 	addi	r18,r4,736
    75a4:	047fffc4 	movi	r17,-1
    75a8:	91000117 	ldw	r4,4(r18)
    75ac:	94000217 	ldw	r16,8(r18)
    75b0:	213fffc4 	addi	r4,r4,-1
    75b4:	20000a16 	blt	r4,zero,75e0 <__sfp+0x78>
    75b8:	8080030f 	ldh	r2,12(r16)
    75bc:	10000c26 	beq	r2,zero,75f0 <__sfp+0x88>
    75c0:	80c01d04 	addi	r3,r16,116
    75c4:	00000206 	br	75d0 <__sfp+0x68>
    75c8:	18bfe60f 	ldh	r2,-104(r3)
    75cc:	10000826 	beq	r2,zero,75f0 <__sfp+0x88>
    75d0:	213fffc4 	addi	r4,r4,-1
    75d4:	1c3ffd04 	addi	r16,r3,-12
    75d8:	18c01a04 	addi	r3,r3,104
    75dc:	247ffa1e 	bne	r4,r17,75c8 <__alt_data_end+0xfffc75c8>
    75e0:	90800017 	ldw	r2,0(r18)
    75e4:	10001d26 	beq	r2,zero,765c <__sfp+0xf4>
    75e8:	1025883a 	mov	r18,r2
    75ec:	003fee06 	br	75a8 <__alt_data_end+0xfffc75a8>
    75f0:	00bfffc4 	movi	r2,-1
    75f4:	8080038d 	sth	r2,14(r16)
    75f8:	00800044 	movi	r2,1
    75fc:	8080030d 	sth	r2,12(r16)
    7600:	80001915 	stw	zero,100(r16)
    7604:	80000015 	stw	zero,0(r16)
    7608:	80000215 	stw	zero,8(r16)
    760c:	80000115 	stw	zero,4(r16)
    7610:	80000415 	stw	zero,16(r16)
    7614:	80000515 	stw	zero,20(r16)
    7618:	80000615 	stw	zero,24(r16)
    761c:	01800204 	movi	r6,8
    7620:	000b883a 	mov	r5,zero
    7624:	81001704 	addi	r4,r16,92
    7628:	000882c0 	call	882c <memset>
    762c:	8005883a 	mov	r2,r16
    7630:	80000c15 	stw	zero,48(r16)
    7634:	80000d15 	stw	zero,52(r16)
    7638:	80001115 	stw	zero,68(r16)
    763c:	80001215 	stw	zero,72(r16)
    7640:	dfc00417 	ldw	ra,16(sp)
    7644:	dcc00317 	ldw	r19,12(sp)
    7648:	dc800217 	ldw	r18,8(sp)
    764c:	dc400117 	ldw	r17,4(sp)
    7650:	dc000017 	ldw	r16,0(sp)
    7654:	dec00504 	addi	sp,sp,20
    7658:	f800283a 	ret
    765c:	01400104 	movi	r5,4
    7660:	9809883a 	mov	r4,r19
    7664:	00075000 	call	7500 <__sfmoreglue>
    7668:	90800015 	stw	r2,0(r18)
    766c:	103fde1e 	bne	r2,zero,75e8 <__alt_data_end+0xfffc75e8>
    7670:	00800304 	movi	r2,12
    7674:	98800015 	stw	r2,0(r19)
    7678:	0005883a 	mov	r2,zero
    767c:	003ff006 	br	7640 <__alt_data_end+0xfffc7640>

00007680 <_cleanup>:
    7680:	00800074 	movhi	r2,1
    7684:	10880404 	addi	r2,r2,8208
    7688:	11000017 	ldw	r4,0(r2)
    768c:	01400074 	movhi	r5,1
    7690:	296cfc04 	addi	r5,r5,-19472
    7694:	0007be01 	jmpi	7be0 <_fwalk_reent>

00007698 <__sinit>:
    7698:	20800e17 	ldw	r2,56(r4)
    769c:	10000126 	beq	r2,zero,76a4 <__sinit+0xc>
    76a0:	f800283a 	ret
    76a4:	000735c1 	jmpi	735c <__sinit.part.1>

000076a8 <__sfp_lock_acquire>:
    76a8:	f800283a 	ret

000076ac <__sfp_lock_release>:
    76ac:	f800283a 	ret

000076b0 <__sinit_lock_acquire>:
    76b0:	f800283a 	ret

000076b4 <__sinit_lock_release>:
    76b4:	f800283a 	ret

000076b8 <__fp_lock_all>:
    76b8:	00800074 	movhi	r2,1
    76bc:	10880504 	addi	r2,r2,8212
    76c0:	11000017 	ldw	r4,0(r2)
    76c4:	01400034 	movhi	r5,0
    76c8:	295d3e04 	addi	r5,r5,29944
    76cc:	0007b1c1 	jmpi	7b1c <_fwalk>

000076d0 <__fp_unlock_all>:
    76d0:	00800074 	movhi	r2,1
    76d4:	10880504 	addi	r2,r2,8212
    76d8:	11000017 	ldw	r4,0(r2)
    76dc:	01400034 	movhi	r5,0
    76e0:	295cd204 	addi	r5,r5,29512
    76e4:	0007b1c1 	jmpi	7b1c <_fwalk>

000076e8 <_malloc_trim_r>:
    76e8:	defffb04 	addi	sp,sp,-20
    76ec:	dcc00315 	stw	r19,12(sp)
    76f0:	04c00074 	movhi	r19,1
    76f4:	dc800215 	stw	r18,8(sp)
    76f8:	dc400115 	stw	r17,4(sp)
    76fc:	dc000015 	stw	r16,0(sp)
    7700:	dfc00415 	stw	ra,16(sp)
    7704:	2821883a 	mov	r16,r5
    7708:	9cc6f704 	addi	r19,r19,7132
    770c:	2025883a 	mov	r18,r4
    7710:	000fc1c0 	call	fc1c <__malloc_lock>
    7714:	98800217 	ldw	r2,8(r19)
    7718:	14400117 	ldw	r17,4(r2)
    771c:	00bfff04 	movi	r2,-4
    7720:	88a2703a 	and	r17,r17,r2
    7724:	8c21c83a 	sub	r16,r17,r16
    7728:	8403fbc4 	addi	r16,r16,4079
    772c:	8020d33a 	srli	r16,r16,12
    7730:	0083ffc4 	movi	r2,4095
    7734:	843fffc4 	addi	r16,r16,-1
    7738:	8020933a 	slli	r16,r16,12
    773c:	1400060e 	bge	r2,r16,7758 <_malloc_trim_r+0x70>
    7740:	000b883a 	mov	r5,zero
    7744:	9009883a 	mov	r4,r18
    7748:	00099c40 	call	99c4 <_sbrk_r>
    774c:	98c00217 	ldw	r3,8(r19)
    7750:	1c47883a 	add	r3,r3,r17
    7754:	10c00a26 	beq	r2,r3,7780 <_malloc_trim_r+0x98>
    7758:	9009883a 	mov	r4,r18
    775c:	000fc400 	call	fc40 <__malloc_unlock>
    7760:	0005883a 	mov	r2,zero
    7764:	dfc00417 	ldw	ra,16(sp)
    7768:	dcc00317 	ldw	r19,12(sp)
    776c:	dc800217 	ldw	r18,8(sp)
    7770:	dc400117 	ldw	r17,4(sp)
    7774:	dc000017 	ldw	r16,0(sp)
    7778:	dec00504 	addi	sp,sp,20
    777c:	f800283a 	ret
    7780:	040bc83a 	sub	r5,zero,r16
    7784:	9009883a 	mov	r4,r18
    7788:	00099c40 	call	99c4 <_sbrk_r>
    778c:	00ffffc4 	movi	r3,-1
    7790:	10c00d26 	beq	r2,r3,77c8 <_malloc_trim_r+0xe0>
    7794:	00c00074 	movhi	r3,1
    7798:	18ced604 	addi	r3,r3,15192
    779c:	18800017 	ldw	r2,0(r3)
    77a0:	99000217 	ldw	r4,8(r19)
    77a4:	8c23c83a 	sub	r17,r17,r16
    77a8:	8c400054 	ori	r17,r17,1
    77ac:	1421c83a 	sub	r16,r2,r16
    77b0:	24400115 	stw	r17,4(r4)
    77b4:	9009883a 	mov	r4,r18
    77b8:	1c000015 	stw	r16,0(r3)
    77bc:	000fc400 	call	fc40 <__malloc_unlock>
    77c0:	00800044 	movi	r2,1
    77c4:	003fe706 	br	7764 <__alt_data_end+0xfffc7764>
    77c8:	000b883a 	mov	r5,zero
    77cc:	9009883a 	mov	r4,r18
    77d0:	00099c40 	call	99c4 <_sbrk_r>
    77d4:	99000217 	ldw	r4,8(r19)
    77d8:	014003c4 	movi	r5,15
    77dc:	1107c83a 	sub	r3,r2,r4
    77e0:	28ffdd0e 	bge	r5,r3,7758 <__alt_data_end+0xfffc7758>
    77e4:	01400074 	movhi	r5,1
    77e8:	29480704 	addi	r5,r5,8220
    77ec:	29400017 	ldw	r5,0(r5)
    77f0:	18c00054 	ori	r3,r3,1
    77f4:	20c00115 	stw	r3,4(r4)
    77f8:	00c00074 	movhi	r3,1
    77fc:	1145c83a 	sub	r2,r2,r5
    7800:	18ced604 	addi	r3,r3,15192
    7804:	18800015 	stw	r2,0(r3)
    7808:	003fd306 	br	7758 <__alt_data_end+0xfffc7758>

0000780c <_free_r>:
    780c:	28004126 	beq	r5,zero,7914 <_free_r+0x108>
    7810:	defffd04 	addi	sp,sp,-12
    7814:	dc400115 	stw	r17,4(sp)
    7818:	dc000015 	stw	r16,0(sp)
    781c:	2023883a 	mov	r17,r4
    7820:	2821883a 	mov	r16,r5
    7824:	dfc00215 	stw	ra,8(sp)
    7828:	000fc1c0 	call	fc1c <__malloc_lock>
    782c:	81ffff17 	ldw	r7,-4(r16)
    7830:	00bfff84 	movi	r2,-2
    7834:	01000074 	movhi	r4,1
    7838:	81bffe04 	addi	r6,r16,-8
    783c:	3884703a 	and	r2,r7,r2
    7840:	2106f704 	addi	r4,r4,7132
    7844:	308b883a 	add	r5,r6,r2
    7848:	2a400117 	ldw	r9,4(r5)
    784c:	22000217 	ldw	r8,8(r4)
    7850:	00ffff04 	movi	r3,-4
    7854:	48c6703a 	and	r3,r9,r3
    7858:	2a005726 	beq	r5,r8,79b8 <_free_r+0x1ac>
    785c:	28c00115 	stw	r3,4(r5)
    7860:	39c0004c 	andi	r7,r7,1
    7864:	3800091e 	bne	r7,zero,788c <_free_r+0x80>
    7868:	823ffe17 	ldw	r8,-8(r16)
    786c:	22400204 	addi	r9,r4,8
    7870:	320dc83a 	sub	r6,r6,r8
    7874:	31c00217 	ldw	r7,8(r6)
    7878:	1205883a 	add	r2,r2,r8
    787c:	3a406526 	beq	r7,r9,7a14 <_free_r+0x208>
    7880:	32000317 	ldw	r8,12(r6)
    7884:	3a000315 	stw	r8,12(r7)
    7888:	41c00215 	stw	r7,8(r8)
    788c:	28cf883a 	add	r7,r5,r3
    7890:	39c00117 	ldw	r7,4(r7)
    7894:	39c0004c 	andi	r7,r7,1
    7898:	38003a26 	beq	r7,zero,7984 <_free_r+0x178>
    789c:	10c00054 	ori	r3,r2,1
    78a0:	30c00115 	stw	r3,4(r6)
    78a4:	3087883a 	add	r3,r6,r2
    78a8:	18800015 	stw	r2,0(r3)
    78ac:	00c07fc4 	movi	r3,511
    78b0:	18801936 	bltu	r3,r2,7918 <_free_r+0x10c>
    78b4:	1004d0fa 	srli	r2,r2,3
    78b8:	01c00044 	movi	r7,1
    78bc:	21400117 	ldw	r5,4(r4)
    78c0:	10c00044 	addi	r3,r2,1
    78c4:	18c7883a 	add	r3,r3,r3
    78c8:	1005d0ba 	srai	r2,r2,2
    78cc:	18c7883a 	add	r3,r3,r3
    78d0:	18c7883a 	add	r3,r3,r3
    78d4:	1907883a 	add	r3,r3,r4
    78d8:	3884983a 	sll	r2,r7,r2
    78dc:	19c00017 	ldw	r7,0(r3)
    78e0:	1a3ffe04 	addi	r8,r3,-8
    78e4:	1144b03a 	or	r2,r2,r5
    78e8:	32000315 	stw	r8,12(r6)
    78ec:	31c00215 	stw	r7,8(r6)
    78f0:	20800115 	stw	r2,4(r4)
    78f4:	19800015 	stw	r6,0(r3)
    78f8:	39800315 	stw	r6,12(r7)
    78fc:	8809883a 	mov	r4,r17
    7900:	dfc00217 	ldw	ra,8(sp)
    7904:	dc400117 	ldw	r17,4(sp)
    7908:	dc000017 	ldw	r16,0(sp)
    790c:	dec00304 	addi	sp,sp,12
    7910:	000fc401 	jmpi	fc40 <__malloc_unlock>
    7914:	f800283a 	ret
    7918:	100ad27a 	srli	r5,r2,9
    791c:	00c00104 	movi	r3,4
    7920:	19404a36 	bltu	r3,r5,7a4c <_free_r+0x240>
    7924:	100ad1ba 	srli	r5,r2,6
    7928:	28c00e44 	addi	r3,r5,57
    792c:	18c7883a 	add	r3,r3,r3
    7930:	29400e04 	addi	r5,r5,56
    7934:	18c7883a 	add	r3,r3,r3
    7938:	18c7883a 	add	r3,r3,r3
    793c:	1909883a 	add	r4,r3,r4
    7940:	20c00017 	ldw	r3,0(r4)
    7944:	01c00074 	movhi	r7,1
    7948:	213ffe04 	addi	r4,r4,-8
    794c:	39c6f704 	addi	r7,r7,7132
    7950:	20c04426 	beq	r4,r3,7a64 <_free_r+0x258>
    7954:	01ffff04 	movi	r7,-4
    7958:	19400117 	ldw	r5,4(r3)
    795c:	29ca703a 	and	r5,r5,r7
    7960:	1140022e 	bgeu	r2,r5,796c <_free_r+0x160>
    7964:	18c00217 	ldw	r3,8(r3)
    7968:	20fffb1e 	bne	r4,r3,7958 <__alt_data_end+0xfffc7958>
    796c:	19000317 	ldw	r4,12(r3)
    7970:	31000315 	stw	r4,12(r6)
    7974:	30c00215 	stw	r3,8(r6)
    7978:	21800215 	stw	r6,8(r4)
    797c:	19800315 	stw	r6,12(r3)
    7980:	003fde06 	br	78fc <__alt_data_end+0xfffc78fc>
    7984:	29c00217 	ldw	r7,8(r5)
    7988:	10c5883a 	add	r2,r2,r3
    798c:	00c00074 	movhi	r3,1
    7990:	18c6f904 	addi	r3,r3,7140
    7994:	38c03b26 	beq	r7,r3,7a84 <_free_r+0x278>
    7998:	2a000317 	ldw	r8,12(r5)
    799c:	11400054 	ori	r5,r2,1
    79a0:	3087883a 	add	r3,r6,r2
    79a4:	3a000315 	stw	r8,12(r7)
    79a8:	41c00215 	stw	r7,8(r8)
    79ac:	31400115 	stw	r5,4(r6)
    79b0:	18800015 	stw	r2,0(r3)
    79b4:	003fbd06 	br	78ac <__alt_data_end+0xfffc78ac>
    79b8:	39c0004c 	andi	r7,r7,1
    79bc:	10c5883a 	add	r2,r2,r3
    79c0:	3800071e 	bne	r7,zero,79e0 <_free_r+0x1d4>
    79c4:	81fffe17 	ldw	r7,-8(r16)
    79c8:	31cdc83a 	sub	r6,r6,r7
    79cc:	30c00317 	ldw	r3,12(r6)
    79d0:	31400217 	ldw	r5,8(r6)
    79d4:	11c5883a 	add	r2,r2,r7
    79d8:	28c00315 	stw	r3,12(r5)
    79dc:	19400215 	stw	r5,8(r3)
    79e0:	10c00054 	ori	r3,r2,1
    79e4:	30c00115 	stw	r3,4(r6)
    79e8:	00c00074 	movhi	r3,1
    79ec:	18c80804 	addi	r3,r3,8224
    79f0:	18c00017 	ldw	r3,0(r3)
    79f4:	21800215 	stw	r6,8(r4)
    79f8:	10ffc036 	bltu	r2,r3,78fc <__alt_data_end+0xfffc78fc>
    79fc:	00800074 	movhi	r2,1
    7a00:	108ed504 	addi	r2,r2,15188
    7a04:	11400017 	ldw	r5,0(r2)
    7a08:	8809883a 	mov	r4,r17
    7a0c:	00076e80 	call	76e8 <_malloc_trim_r>
    7a10:	003fba06 	br	78fc <__alt_data_end+0xfffc78fc>
    7a14:	28c9883a 	add	r4,r5,r3
    7a18:	21000117 	ldw	r4,4(r4)
    7a1c:	2100004c 	andi	r4,r4,1
    7a20:	2000391e 	bne	r4,zero,7b08 <_free_r+0x2fc>
    7a24:	29c00217 	ldw	r7,8(r5)
    7a28:	29000317 	ldw	r4,12(r5)
    7a2c:	1885883a 	add	r2,r3,r2
    7a30:	10c00054 	ori	r3,r2,1
    7a34:	39000315 	stw	r4,12(r7)
    7a38:	21c00215 	stw	r7,8(r4)
    7a3c:	30c00115 	stw	r3,4(r6)
    7a40:	308d883a 	add	r6,r6,r2
    7a44:	30800015 	stw	r2,0(r6)
    7a48:	003fac06 	br	78fc <__alt_data_end+0xfffc78fc>
    7a4c:	00c00504 	movi	r3,20
    7a50:	19401536 	bltu	r3,r5,7aa8 <_free_r+0x29c>
    7a54:	28c01704 	addi	r3,r5,92
    7a58:	18c7883a 	add	r3,r3,r3
    7a5c:	294016c4 	addi	r5,r5,91
    7a60:	003fb406 	br	7934 <__alt_data_end+0xfffc7934>
    7a64:	280bd0ba 	srai	r5,r5,2
    7a68:	00c00044 	movi	r3,1
    7a6c:	38800117 	ldw	r2,4(r7)
    7a70:	194a983a 	sll	r5,r3,r5
    7a74:	2007883a 	mov	r3,r4
    7a78:	2884b03a 	or	r2,r5,r2
    7a7c:	38800115 	stw	r2,4(r7)
    7a80:	003fbb06 	br	7970 <__alt_data_end+0xfffc7970>
    7a84:	21800515 	stw	r6,20(r4)
    7a88:	21800415 	stw	r6,16(r4)
    7a8c:	10c00054 	ori	r3,r2,1
    7a90:	31c00315 	stw	r7,12(r6)
    7a94:	31c00215 	stw	r7,8(r6)
    7a98:	30c00115 	stw	r3,4(r6)
    7a9c:	308d883a 	add	r6,r6,r2
    7aa0:	30800015 	stw	r2,0(r6)
    7aa4:	003f9506 	br	78fc <__alt_data_end+0xfffc78fc>
    7aa8:	00c01504 	movi	r3,84
    7aac:	19400536 	bltu	r3,r5,7ac4 <_free_r+0x2b8>
    7ab0:	100ad33a 	srli	r5,r2,12
    7ab4:	28c01bc4 	addi	r3,r5,111
    7ab8:	18c7883a 	add	r3,r3,r3
    7abc:	29401b84 	addi	r5,r5,110
    7ac0:	003f9c06 	br	7934 <__alt_data_end+0xfffc7934>
    7ac4:	00c05504 	movi	r3,340
    7ac8:	19400536 	bltu	r3,r5,7ae0 <_free_r+0x2d4>
    7acc:	100ad3fa 	srli	r5,r2,15
    7ad0:	28c01e04 	addi	r3,r5,120
    7ad4:	18c7883a 	add	r3,r3,r3
    7ad8:	29401dc4 	addi	r5,r5,119
    7adc:	003f9506 	br	7934 <__alt_data_end+0xfffc7934>
    7ae0:	00c15504 	movi	r3,1364
    7ae4:	19400536 	bltu	r3,r5,7afc <_free_r+0x2f0>
    7ae8:	100ad4ba 	srli	r5,r2,18
    7aec:	28c01f44 	addi	r3,r5,125
    7af0:	18c7883a 	add	r3,r3,r3
    7af4:	29401f04 	addi	r5,r5,124
    7af8:	003f8e06 	br	7934 <__alt_data_end+0xfffc7934>
    7afc:	00c03f84 	movi	r3,254
    7b00:	01401f84 	movi	r5,126
    7b04:	003f8b06 	br	7934 <__alt_data_end+0xfffc7934>
    7b08:	10c00054 	ori	r3,r2,1
    7b0c:	30c00115 	stw	r3,4(r6)
    7b10:	308d883a 	add	r6,r6,r2
    7b14:	30800015 	stw	r2,0(r6)
    7b18:	003f7806 	br	78fc <__alt_data_end+0xfffc78fc>

00007b1c <_fwalk>:
    7b1c:	defff704 	addi	sp,sp,-36
    7b20:	dd000415 	stw	r20,16(sp)
    7b24:	dfc00815 	stw	ra,32(sp)
    7b28:	ddc00715 	stw	r23,28(sp)
    7b2c:	dd800615 	stw	r22,24(sp)
    7b30:	dd400515 	stw	r21,20(sp)
    7b34:	dcc00315 	stw	r19,12(sp)
    7b38:	dc800215 	stw	r18,8(sp)
    7b3c:	dc400115 	stw	r17,4(sp)
    7b40:	dc000015 	stw	r16,0(sp)
    7b44:	2500b804 	addi	r20,r4,736
    7b48:	a0002326 	beq	r20,zero,7bd8 <_fwalk+0xbc>
    7b4c:	282b883a 	mov	r21,r5
    7b50:	002f883a 	mov	r23,zero
    7b54:	05800044 	movi	r22,1
    7b58:	04ffffc4 	movi	r19,-1
    7b5c:	a4400117 	ldw	r17,4(r20)
    7b60:	a4800217 	ldw	r18,8(r20)
    7b64:	8c7fffc4 	addi	r17,r17,-1
    7b68:	88000d16 	blt	r17,zero,7ba0 <_fwalk+0x84>
    7b6c:	94000304 	addi	r16,r18,12
    7b70:	94800384 	addi	r18,r18,14
    7b74:	8080000b 	ldhu	r2,0(r16)
    7b78:	8c7fffc4 	addi	r17,r17,-1
    7b7c:	813ffd04 	addi	r4,r16,-12
    7b80:	b080042e 	bgeu	r22,r2,7b94 <_fwalk+0x78>
    7b84:	9080000f 	ldh	r2,0(r18)
    7b88:	14c00226 	beq	r2,r19,7b94 <_fwalk+0x78>
    7b8c:	a83ee83a 	callr	r21
    7b90:	b8aeb03a 	or	r23,r23,r2
    7b94:	84001a04 	addi	r16,r16,104
    7b98:	94801a04 	addi	r18,r18,104
    7b9c:	8cfff51e 	bne	r17,r19,7b74 <__alt_data_end+0xfffc7b74>
    7ba0:	a5000017 	ldw	r20,0(r20)
    7ba4:	a03fed1e 	bne	r20,zero,7b5c <__alt_data_end+0xfffc7b5c>
    7ba8:	b805883a 	mov	r2,r23
    7bac:	dfc00817 	ldw	ra,32(sp)
    7bb0:	ddc00717 	ldw	r23,28(sp)
    7bb4:	dd800617 	ldw	r22,24(sp)
    7bb8:	dd400517 	ldw	r21,20(sp)
    7bbc:	dd000417 	ldw	r20,16(sp)
    7bc0:	dcc00317 	ldw	r19,12(sp)
    7bc4:	dc800217 	ldw	r18,8(sp)
    7bc8:	dc400117 	ldw	r17,4(sp)
    7bcc:	dc000017 	ldw	r16,0(sp)
    7bd0:	dec00904 	addi	sp,sp,36
    7bd4:	f800283a 	ret
    7bd8:	002f883a 	mov	r23,zero
    7bdc:	003ff206 	br	7ba8 <__alt_data_end+0xfffc7ba8>

00007be0 <_fwalk_reent>:
    7be0:	defff704 	addi	sp,sp,-36
    7be4:	dd000415 	stw	r20,16(sp)
    7be8:	dfc00815 	stw	ra,32(sp)
    7bec:	ddc00715 	stw	r23,28(sp)
    7bf0:	dd800615 	stw	r22,24(sp)
    7bf4:	dd400515 	stw	r21,20(sp)
    7bf8:	dcc00315 	stw	r19,12(sp)
    7bfc:	dc800215 	stw	r18,8(sp)
    7c00:	dc400115 	stw	r17,4(sp)
    7c04:	dc000015 	stw	r16,0(sp)
    7c08:	2500b804 	addi	r20,r4,736
    7c0c:	a0002326 	beq	r20,zero,7c9c <_fwalk_reent+0xbc>
    7c10:	282b883a 	mov	r21,r5
    7c14:	2027883a 	mov	r19,r4
    7c18:	002f883a 	mov	r23,zero
    7c1c:	05800044 	movi	r22,1
    7c20:	04bfffc4 	movi	r18,-1
    7c24:	a4400117 	ldw	r17,4(r20)
    7c28:	a4000217 	ldw	r16,8(r20)
    7c2c:	8c7fffc4 	addi	r17,r17,-1
    7c30:	88000c16 	blt	r17,zero,7c64 <_fwalk_reent+0x84>
    7c34:	84000304 	addi	r16,r16,12
    7c38:	8080000b 	ldhu	r2,0(r16)
    7c3c:	8c7fffc4 	addi	r17,r17,-1
    7c40:	817ffd04 	addi	r5,r16,-12
    7c44:	b080052e 	bgeu	r22,r2,7c5c <_fwalk_reent+0x7c>
    7c48:	8080008f 	ldh	r2,2(r16)
    7c4c:	9809883a 	mov	r4,r19
    7c50:	14800226 	beq	r2,r18,7c5c <_fwalk_reent+0x7c>
    7c54:	a83ee83a 	callr	r21
    7c58:	b8aeb03a 	or	r23,r23,r2
    7c5c:	84001a04 	addi	r16,r16,104
    7c60:	8cbff51e 	bne	r17,r18,7c38 <__alt_data_end+0xfffc7c38>
    7c64:	a5000017 	ldw	r20,0(r20)
    7c68:	a03fee1e 	bne	r20,zero,7c24 <__alt_data_end+0xfffc7c24>
    7c6c:	b805883a 	mov	r2,r23
    7c70:	dfc00817 	ldw	ra,32(sp)
    7c74:	ddc00717 	ldw	r23,28(sp)
    7c78:	dd800617 	ldw	r22,24(sp)
    7c7c:	dd400517 	ldw	r21,20(sp)
    7c80:	dd000417 	ldw	r20,16(sp)
    7c84:	dcc00317 	ldw	r19,12(sp)
    7c88:	dc800217 	ldw	r18,8(sp)
    7c8c:	dc400117 	ldw	r17,4(sp)
    7c90:	dc000017 	ldw	r16,0(sp)
    7c94:	dec00904 	addi	sp,sp,36
    7c98:	f800283a 	ret
    7c9c:	002f883a 	mov	r23,zero
    7ca0:	003ff206 	br	7c6c <__alt_data_end+0xfffc7c6c>

00007ca4 <_setlocale_r>:
    7ca4:	30001b26 	beq	r6,zero,7d14 <_setlocale_r+0x70>
    7ca8:	01400074 	movhi	r5,1
    7cac:	defffe04 	addi	sp,sp,-8
    7cb0:	2940ba04 	addi	r5,r5,744
    7cb4:	3009883a 	mov	r4,r6
    7cb8:	dc000015 	stw	r16,0(sp)
    7cbc:	dfc00115 	stw	ra,4(sp)
    7cc0:	3021883a 	mov	r16,r6
    7cc4:	0009b540 	call	9b54 <strcmp>
    7cc8:	1000061e 	bne	r2,zero,7ce4 <_setlocale_r+0x40>
    7ccc:	00800074 	movhi	r2,1
    7cd0:	10809c04 	addi	r2,r2,624
    7cd4:	dfc00117 	ldw	ra,4(sp)
    7cd8:	dc000017 	ldw	r16,0(sp)
    7cdc:	dec00204 	addi	sp,sp,8
    7ce0:	f800283a 	ret
    7ce4:	01400074 	movhi	r5,1
    7ce8:	29409c04 	addi	r5,r5,624
    7cec:	8009883a 	mov	r4,r16
    7cf0:	0009b540 	call	9b54 <strcmp>
    7cf4:	103ff526 	beq	r2,zero,7ccc <__alt_data_end+0xfffc7ccc>
    7cf8:	01400074 	movhi	r5,1
    7cfc:	2940a504 	addi	r5,r5,660
    7d00:	8009883a 	mov	r4,r16
    7d04:	0009b540 	call	9b54 <strcmp>
    7d08:	103ff026 	beq	r2,zero,7ccc <__alt_data_end+0xfffc7ccc>
    7d0c:	0005883a 	mov	r2,zero
    7d10:	003ff006 	br	7cd4 <__alt_data_end+0xfffc7cd4>
    7d14:	00800074 	movhi	r2,1
    7d18:	10809c04 	addi	r2,r2,624
    7d1c:	f800283a 	ret

00007d20 <__locale_charset>:
    7d20:	00800074 	movhi	r2,1
    7d24:	1086e104 	addi	r2,r2,7044
    7d28:	f800283a 	ret

00007d2c <__locale_mb_cur_max>:
    7d2c:	00800074 	movhi	r2,1
    7d30:	10880604 	addi	r2,r2,8216
    7d34:	10800017 	ldw	r2,0(r2)
    7d38:	f800283a 	ret

00007d3c <__locale_msgcharset>:
    7d3c:	00800074 	movhi	r2,1
    7d40:	1086d904 	addi	r2,r2,7012
    7d44:	f800283a 	ret

00007d48 <__locale_cjk_lang>:
    7d48:	0005883a 	mov	r2,zero
    7d4c:	f800283a 	ret

00007d50 <_localeconv_r>:
    7d50:	00800074 	movhi	r2,1
    7d54:	1086e904 	addi	r2,r2,7076
    7d58:	f800283a 	ret

00007d5c <setlocale>:
    7d5c:	00800074 	movhi	r2,1
    7d60:	10880504 	addi	r2,r2,8212
    7d64:	280d883a 	mov	r6,r5
    7d68:	200b883a 	mov	r5,r4
    7d6c:	11000017 	ldw	r4,0(r2)
    7d70:	0007ca41 	jmpi	7ca4 <_setlocale_r>

00007d74 <localeconv>:
    7d74:	00800074 	movhi	r2,1
    7d78:	1086e904 	addi	r2,r2,7076
    7d7c:	f800283a 	ret

00007d80 <__smakebuf_r>:
    7d80:	2880030b 	ldhu	r2,12(r5)
    7d84:	10c0008c 	andi	r3,r2,2
    7d88:	1800411e 	bne	r3,zero,7e90 <__smakebuf_r+0x110>
    7d8c:	deffec04 	addi	sp,sp,-80
    7d90:	dc000f15 	stw	r16,60(sp)
    7d94:	2821883a 	mov	r16,r5
    7d98:	2940038f 	ldh	r5,14(r5)
    7d9c:	dc401015 	stw	r17,64(sp)
    7da0:	dfc01315 	stw	ra,76(sp)
    7da4:	dcc01215 	stw	r19,72(sp)
    7da8:	dc801115 	stw	r18,68(sp)
    7dac:	2023883a 	mov	r17,r4
    7db0:	28001c16 	blt	r5,zero,7e24 <__smakebuf_r+0xa4>
    7db4:	d80d883a 	mov	r6,sp
    7db8:	000b6fc0 	call	b6fc <_fstat_r>
    7dbc:	10001816 	blt	r2,zero,7e20 <__smakebuf_r+0xa0>
    7dc0:	d8800117 	ldw	r2,4(sp)
    7dc4:	00e00014 	movui	r3,32768
    7dc8:	10bc000c 	andi	r2,r2,61440
    7dcc:	14c80020 	cmpeqi	r19,r2,8192
    7dd0:	10c03726 	beq	r2,r3,7eb0 <__smakebuf_r+0x130>
    7dd4:	80c0030b 	ldhu	r3,12(r16)
    7dd8:	18c20014 	ori	r3,r3,2048
    7ddc:	80c0030d 	sth	r3,12(r16)
    7de0:	00c80004 	movi	r3,8192
    7de4:	10c0521e 	bne	r2,r3,7f30 <__smakebuf_r+0x1b0>
    7de8:	8140038f 	ldh	r5,14(r16)
    7dec:	8809883a 	mov	r4,r17
    7df0:	000bc140 	call	bc14 <_isatty_r>
    7df4:	10004c26 	beq	r2,zero,7f28 <__smakebuf_r+0x1a8>
    7df8:	8080030b 	ldhu	r2,12(r16)
    7dfc:	80c010c4 	addi	r3,r16,67
    7e00:	80c00015 	stw	r3,0(r16)
    7e04:	10800054 	ori	r2,r2,1
    7e08:	8080030d 	sth	r2,12(r16)
    7e0c:	00800044 	movi	r2,1
    7e10:	80c00415 	stw	r3,16(r16)
    7e14:	80800515 	stw	r2,20(r16)
    7e18:	04810004 	movi	r18,1024
    7e1c:	00000706 	br	7e3c <__smakebuf_r+0xbc>
    7e20:	8080030b 	ldhu	r2,12(r16)
    7e24:	10c0200c 	andi	r3,r2,128
    7e28:	18001f1e 	bne	r3,zero,7ea8 <__smakebuf_r+0x128>
    7e2c:	04810004 	movi	r18,1024
    7e30:	10820014 	ori	r2,r2,2048
    7e34:	8080030d 	sth	r2,12(r16)
    7e38:	0027883a 	mov	r19,zero
    7e3c:	900b883a 	mov	r5,r18
    7e40:	8809883a 	mov	r4,r17
    7e44:	0007f3c0 	call	7f3c <_malloc_r>
    7e48:	10002c26 	beq	r2,zero,7efc <__smakebuf_r+0x17c>
    7e4c:	80c0030b 	ldhu	r3,12(r16)
    7e50:	01000034 	movhi	r4,0
    7e54:	211cd404 	addi	r4,r4,29520
    7e58:	89000f15 	stw	r4,60(r17)
    7e5c:	18c02014 	ori	r3,r3,128
    7e60:	80c0030d 	sth	r3,12(r16)
    7e64:	80800015 	stw	r2,0(r16)
    7e68:	80800415 	stw	r2,16(r16)
    7e6c:	84800515 	stw	r18,20(r16)
    7e70:	98001a1e 	bne	r19,zero,7edc <__smakebuf_r+0x15c>
    7e74:	dfc01317 	ldw	ra,76(sp)
    7e78:	dcc01217 	ldw	r19,72(sp)
    7e7c:	dc801117 	ldw	r18,68(sp)
    7e80:	dc401017 	ldw	r17,64(sp)
    7e84:	dc000f17 	ldw	r16,60(sp)
    7e88:	dec01404 	addi	sp,sp,80
    7e8c:	f800283a 	ret
    7e90:	288010c4 	addi	r2,r5,67
    7e94:	28800015 	stw	r2,0(r5)
    7e98:	28800415 	stw	r2,16(r5)
    7e9c:	00800044 	movi	r2,1
    7ea0:	28800515 	stw	r2,20(r5)
    7ea4:	f800283a 	ret
    7ea8:	04801004 	movi	r18,64
    7eac:	003fe006 	br	7e30 <__alt_data_end+0xfffc7e30>
    7eb0:	81000a17 	ldw	r4,40(r16)
    7eb4:	00c00074 	movhi	r3,1
    7eb8:	18e6bc04 	addi	r3,r3,-25872
    7ebc:	20ffc51e 	bne	r4,r3,7dd4 <__alt_data_end+0xfffc7dd4>
    7ec0:	8080030b 	ldhu	r2,12(r16)
    7ec4:	04810004 	movi	r18,1024
    7ec8:	84801315 	stw	r18,76(r16)
    7ecc:	1484b03a 	or	r2,r2,r18
    7ed0:	8080030d 	sth	r2,12(r16)
    7ed4:	0027883a 	mov	r19,zero
    7ed8:	003fd806 	br	7e3c <__alt_data_end+0xfffc7e3c>
    7edc:	8140038f 	ldh	r5,14(r16)
    7ee0:	8809883a 	mov	r4,r17
    7ee4:	000bc140 	call	bc14 <_isatty_r>
    7ee8:	103fe226 	beq	r2,zero,7e74 <__alt_data_end+0xfffc7e74>
    7eec:	8080030b 	ldhu	r2,12(r16)
    7ef0:	10800054 	ori	r2,r2,1
    7ef4:	8080030d 	sth	r2,12(r16)
    7ef8:	003fde06 	br	7e74 <__alt_data_end+0xfffc7e74>
    7efc:	8080030b 	ldhu	r2,12(r16)
    7f00:	10c0800c 	andi	r3,r2,512
    7f04:	183fdb1e 	bne	r3,zero,7e74 <__alt_data_end+0xfffc7e74>
    7f08:	10800094 	ori	r2,r2,2
    7f0c:	80c010c4 	addi	r3,r16,67
    7f10:	8080030d 	sth	r2,12(r16)
    7f14:	00800044 	movi	r2,1
    7f18:	80c00015 	stw	r3,0(r16)
    7f1c:	80c00415 	stw	r3,16(r16)
    7f20:	80800515 	stw	r2,20(r16)
    7f24:	003fd306 	br	7e74 <__alt_data_end+0xfffc7e74>
    7f28:	04810004 	movi	r18,1024
    7f2c:	003fc306 	br	7e3c <__alt_data_end+0xfffc7e3c>
    7f30:	0027883a 	mov	r19,zero
    7f34:	04810004 	movi	r18,1024
    7f38:	003fc006 	br	7e3c <__alt_data_end+0xfffc7e3c>

00007f3c <_malloc_r>:
    7f3c:	defff504 	addi	sp,sp,-44
    7f40:	dc800315 	stw	r18,12(sp)
    7f44:	dfc00a15 	stw	ra,40(sp)
    7f48:	df000915 	stw	fp,36(sp)
    7f4c:	ddc00815 	stw	r23,32(sp)
    7f50:	dd800715 	stw	r22,28(sp)
    7f54:	dd400615 	stw	r21,24(sp)
    7f58:	dd000515 	stw	r20,20(sp)
    7f5c:	dcc00415 	stw	r19,16(sp)
    7f60:	dc400215 	stw	r17,8(sp)
    7f64:	dc000115 	stw	r16,4(sp)
    7f68:	288002c4 	addi	r2,r5,11
    7f6c:	00c00584 	movi	r3,22
    7f70:	2025883a 	mov	r18,r4
    7f74:	18807f2e 	bgeu	r3,r2,8174 <_malloc_r+0x238>
    7f78:	047ffe04 	movi	r17,-8
    7f7c:	1462703a 	and	r17,r2,r17
    7f80:	8800a316 	blt	r17,zero,8210 <_malloc_r+0x2d4>
    7f84:	8940a236 	bltu	r17,r5,8210 <_malloc_r+0x2d4>
    7f88:	000fc1c0 	call	fc1c <__malloc_lock>
    7f8c:	00807dc4 	movi	r2,503
    7f90:	1441e92e 	bgeu	r2,r17,8738 <_malloc_r+0x7fc>
    7f94:	8804d27a 	srli	r2,r17,9
    7f98:	1000a126 	beq	r2,zero,8220 <_malloc_r+0x2e4>
    7f9c:	00c00104 	movi	r3,4
    7fa0:	18811e36 	bltu	r3,r2,841c <_malloc_r+0x4e0>
    7fa4:	8804d1ba 	srli	r2,r17,6
    7fa8:	12000e44 	addi	r8,r2,57
    7fac:	11c00e04 	addi	r7,r2,56
    7fb0:	4209883a 	add	r4,r8,r8
    7fb4:	04c00074 	movhi	r19,1
    7fb8:	2109883a 	add	r4,r4,r4
    7fbc:	9cc6f704 	addi	r19,r19,7132
    7fc0:	2109883a 	add	r4,r4,r4
    7fc4:	9909883a 	add	r4,r19,r4
    7fc8:	24000117 	ldw	r16,4(r4)
    7fcc:	213ffe04 	addi	r4,r4,-8
    7fd0:	24009726 	beq	r4,r16,8230 <_malloc_r+0x2f4>
    7fd4:	80800117 	ldw	r2,4(r16)
    7fd8:	01bfff04 	movi	r6,-4
    7fdc:	014003c4 	movi	r5,15
    7fe0:	1184703a 	and	r2,r2,r6
    7fe4:	1447c83a 	sub	r3,r2,r17
    7fe8:	28c00716 	blt	r5,r3,8008 <_malloc_r+0xcc>
    7fec:	1800920e 	bge	r3,zero,8238 <_malloc_r+0x2fc>
    7ff0:	84000317 	ldw	r16,12(r16)
    7ff4:	24008e26 	beq	r4,r16,8230 <_malloc_r+0x2f4>
    7ff8:	80800117 	ldw	r2,4(r16)
    7ffc:	1184703a 	and	r2,r2,r6
    8000:	1447c83a 	sub	r3,r2,r17
    8004:	28fff90e 	bge	r5,r3,7fec <__alt_data_end+0xfffc7fec>
    8008:	3809883a 	mov	r4,r7
    800c:	01800074 	movhi	r6,1
    8010:	9c000417 	ldw	r16,16(r19)
    8014:	3186f704 	addi	r6,r6,7132
    8018:	32000204 	addi	r8,r6,8
    801c:	82013426 	beq	r16,r8,84f0 <_malloc_r+0x5b4>
    8020:	80c00117 	ldw	r3,4(r16)
    8024:	00bfff04 	movi	r2,-4
    8028:	188e703a 	and	r7,r3,r2
    802c:	3c45c83a 	sub	r2,r7,r17
    8030:	00c003c4 	movi	r3,15
    8034:	18811f16 	blt	r3,r2,84b4 <_malloc_r+0x578>
    8038:	32000515 	stw	r8,20(r6)
    803c:	32000415 	stw	r8,16(r6)
    8040:	10007f0e 	bge	r2,zero,8240 <_malloc_r+0x304>
    8044:	00807fc4 	movi	r2,511
    8048:	11c0fd36 	bltu	r2,r7,8440 <_malloc_r+0x504>
    804c:	3806d0fa 	srli	r3,r7,3
    8050:	01c00044 	movi	r7,1
    8054:	30800117 	ldw	r2,4(r6)
    8058:	19400044 	addi	r5,r3,1
    805c:	294b883a 	add	r5,r5,r5
    8060:	1807d0ba 	srai	r3,r3,2
    8064:	294b883a 	add	r5,r5,r5
    8068:	294b883a 	add	r5,r5,r5
    806c:	298b883a 	add	r5,r5,r6
    8070:	38c6983a 	sll	r3,r7,r3
    8074:	29c00017 	ldw	r7,0(r5)
    8078:	2a7ffe04 	addi	r9,r5,-8
    807c:	1886b03a 	or	r3,r3,r2
    8080:	82400315 	stw	r9,12(r16)
    8084:	81c00215 	stw	r7,8(r16)
    8088:	30c00115 	stw	r3,4(r6)
    808c:	2c000015 	stw	r16,0(r5)
    8090:	3c000315 	stw	r16,12(r7)
    8094:	2005d0ba 	srai	r2,r4,2
    8098:	01400044 	movi	r5,1
    809c:	288a983a 	sll	r5,r5,r2
    80a0:	19406f36 	bltu	r3,r5,8260 <_malloc_r+0x324>
    80a4:	28c4703a 	and	r2,r5,r3
    80a8:	10000a1e 	bne	r2,zero,80d4 <_malloc_r+0x198>
    80ac:	00bfff04 	movi	r2,-4
    80b0:	294b883a 	add	r5,r5,r5
    80b4:	2088703a 	and	r4,r4,r2
    80b8:	28c4703a 	and	r2,r5,r3
    80bc:	21000104 	addi	r4,r4,4
    80c0:	1000041e 	bne	r2,zero,80d4 <_malloc_r+0x198>
    80c4:	294b883a 	add	r5,r5,r5
    80c8:	28c4703a 	and	r2,r5,r3
    80cc:	21000104 	addi	r4,r4,4
    80d0:	103ffc26 	beq	r2,zero,80c4 <__alt_data_end+0xfffc80c4>
    80d4:	02bfff04 	movi	r10,-4
    80d8:	024003c4 	movi	r9,15
    80dc:	21800044 	addi	r6,r4,1
    80e0:	318d883a 	add	r6,r6,r6
    80e4:	318d883a 	add	r6,r6,r6
    80e8:	318d883a 	add	r6,r6,r6
    80ec:	998d883a 	add	r6,r19,r6
    80f0:	333ffe04 	addi	r12,r6,-8
    80f4:	2017883a 	mov	r11,r4
    80f8:	31800104 	addi	r6,r6,4
    80fc:	34000017 	ldw	r16,0(r6)
    8100:	31fffd04 	addi	r7,r6,-12
    8104:	81c0041e 	bne	r16,r7,8118 <_malloc_r+0x1dc>
    8108:	0000fb06 	br	84f8 <_malloc_r+0x5bc>
    810c:	1801030e 	bge	r3,zero,851c <_malloc_r+0x5e0>
    8110:	84000317 	ldw	r16,12(r16)
    8114:	81c0f826 	beq	r16,r7,84f8 <_malloc_r+0x5bc>
    8118:	80800117 	ldw	r2,4(r16)
    811c:	1284703a 	and	r2,r2,r10
    8120:	1447c83a 	sub	r3,r2,r17
    8124:	48fff90e 	bge	r9,r3,810c <__alt_data_end+0xfffc810c>
    8128:	80800317 	ldw	r2,12(r16)
    812c:	81000217 	ldw	r4,8(r16)
    8130:	89400054 	ori	r5,r17,1
    8134:	81400115 	stw	r5,4(r16)
    8138:	20800315 	stw	r2,12(r4)
    813c:	11000215 	stw	r4,8(r2)
    8140:	8463883a 	add	r17,r16,r17
    8144:	9c400515 	stw	r17,20(r19)
    8148:	9c400415 	stw	r17,16(r19)
    814c:	18800054 	ori	r2,r3,1
    8150:	88800115 	stw	r2,4(r17)
    8154:	8a000315 	stw	r8,12(r17)
    8158:	8a000215 	stw	r8,8(r17)
    815c:	88e3883a 	add	r17,r17,r3
    8160:	88c00015 	stw	r3,0(r17)
    8164:	9009883a 	mov	r4,r18
    8168:	000fc400 	call	fc40 <__malloc_unlock>
    816c:	80800204 	addi	r2,r16,8
    8170:	00001b06 	br	81e0 <_malloc_r+0x2a4>
    8174:	04400404 	movi	r17,16
    8178:	89402536 	bltu	r17,r5,8210 <_malloc_r+0x2d4>
    817c:	000fc1c0 	call	fc1c <__malloc_lock>
    8180:	00800184 	movi	r2,6
    8184:	01000084 	movi	r4,2
    8188:	04c00074 	movhi	r19,1
    818c:	1085883a 	add	r2,r2,r2
    8190:	9cc6f704 	addi	r19,r19,7132
    8194:	1085883a 	add	r2,r2,r2
    8198:	9885883a 	add	r2,r19,r2
    819c:	14000117 	ldw	r16,4(r2)
    81a0:	10fffe04 	addi	r3,r2,-8
    81a4:	80c0d926 	beq	r16,r3,850c <_malloc_r+0x5d0>
    81a8:	80c00117 	ldw	r3,4(r16)
    81ac:	81000317 	ldw	r4,12(r16)
    81b0:	00bfff04 	movi	r2,-4
    81b4:	1884703a 	and	r2,r3,r2
    81b8:	81400217 	ldw	r5,8(r16)
    81bc:	8085883a 	add	r2,r16,r2
    81c0:	10c00117 	ldw	r3,4(r2)
    81c4:	29000315 	stw	r4,12(r5)
    81c8:	21400215 	stw	r5,8(r4)
    81cc:	18c00054 	ori	r3,r3,1
    81d0:	10c00115 	stw	r3,4(r2)
    81d4:	9009883a 	mov	r4,r18
    81d8:	000fc400 	call	fc40 <__malloc_unlock>
    81dc:	80800204 	addi	r2,r16,8
    81e0:	dfc00a17 	ldw	ra,40(sp)
    81e4:	df000917 	ldw	fp,36(sp)
    81e8:	ddc00817 	ldw	r23,32(sp)
    81ec:	dd800717 	ldw	r22,28(sp)
    81f0:	dd400617 	ldw	r21,24(sp)
    81f4:	dd000517 	ldw	r20,20(sp)
    81f8:	dcc00417 	ldw	r19,16(sp)
    81fc:	dc800317 	ldw	r18,12(sp)
    8200:	dc400217 	ldw	r17,8(sp)
    8204:	dc000117 	ldw	r16,4(sp)
    8208:	dec00b04 	addi	sp,sp,44
    820c:	f800283a 	ret
    8210:	00800304 	movi	r2,12
    8214:	90800015 	stw	r2,0(r18)
    8218:	0005883a 	mov	r2,zero
    821c:	003ff006 	br	81e0 <__alt_data_end+0xfffc81e0>
    8220:	01002004 	movi	r4,128
    8224:	02001004 	movi	r8,64
    8228:	01c00fc4 	movi	r7,63
    822c:	003f6106 	br	7fb4 <__alt_data_end+0xfffc7fb4>
    8230:	4009883a 	mov	r4,r8
    8234:	003f7506 	br	800c <__alt_data_end+0xfffc800c>
    8238:	81000317 	ldw	r4,12(r16)
    823c:	003fde06 	br	81b8 <__alt_data_end+0xfffc81b8>
    8240:	81c5883a 	add	r2,r16,r7
    8244:	11400117 	ldw	r5,4(r2)
    8248:	9009883a 	mov	r4,r18
    824c:	29400054 	ori	r5,r5,1
    8250:	11400115 	stw	r5,4(r2)
    8254:	000fc400 	call	fc40 <__malloc_unlock>
    8258:	80800204 	addi	r2,r16,8
    825c:	003fe006 	br	81e0 <__alt_data_end+0xfffc81e0>
    8260:	9c000217 	ldw	r16,8(r19)
    8264:	00bfff04 	movi	r2,-4
    8268:	85800117 	ldw	r22,4(r16)
    826c:	b0ac703a 	and	r22,r22,r2
    8270:	b4400336 	bltu	r22,r17,8280 <_malloc_r+0x344>
    8274:	b445c83a 	sub	r2,r22,r17
    8278:	00c003c4 	movi	r3,15
    827c:	18805d16 	blt	r3,r2,83f4 <_malloc_r+0x4b8>
    8280:	05c00074 	movhi	r23,1
    8284:	00800074 	movhi	r2,1
    8288:	108ed504 	addi	r2,r2,15188
    828c:	bdc80704 	addi	r23,r23,8220
    8290:	15400017 	ldw	r21,0(r2)
    8294:	b8c00017 	ldw	r3,0(r23)
    8298:	00bfffc4 	movi	r2,-1
    829c:	858d883a 	add	r6,r16,r22
    82a0:	8d6b883a 	add	r21,r17,r21
    82a4:	1880ea26 	beq	r3,r2,8650 <_malloc_r+0x714>
    82a8:	ad4403c4 	addi	r21,r21,4111
    82ac:	00bc0004 	movi	r2,-4096
    82b0:	a8aa703a 	and	r21,r21,r2
    82b4:	a80b883a 	mov	r5,r21
    82b8:	9009883a 	mov	r4,r18
    82bc:	d9800015 	stw	r6,0(sp)
    82c0:	00099c40 	call	99c4 <_sbrk_r>
    82c4:	1029883a 	mov	r20,r2
    82c8:	00bfffc4 	movi	r2,-1
    82cc:	d9800017 	ldw	r6,0(sp)
    82d0:	a080e826 	beq	r20,r2,8674 <_malloc_r+0x738>
    82d4:	a180a636 	bltu	r20,r6,8570 <_malloc_r+0x634>
    82d8:	07000074 	movhi	fp,1
    82dc:	e70ed604 	addi	fp,fp,15192
    82e0:	e0800017 	ldw	r2,0(fp)
    82e4:	a887883a 	add	r3,r21,r2
    82e8:	e0c00015 	stw	r3,0(fp)
    82ec:	3500e626 	beq	r6,r20,8688 <_malloc_r+0x74c>
    82f0:	b9000017 	ldw	r4,0(r23)
    82f4:	00bfffc4 	movi	r2,-1
    82f8:	2080ee26 	beq	r4,r2,86b4 <_malloc_r+0x778>
    82fc:	a185c83a 	sub	r2,r20,r6
    8300:	10c5883a 	add	r2,r2,r3
    8304:	e0800015 	stw	r2,0(fp)
    8308:	a0c001cc 	andi	r3,r20,7
    830c:	1800bc26 	beq	r3,zero,8600 <_malloc_r+0x6c4>
    8310:	a0e9c83a 	sub	r20,r20,r3
    8314:	00840204 	movi	r2,4104
    8318:	a5000204 	addi	r20,r20,8
    831c:	10c7c83a 	sub	r3,r2,r3
    8320:	a545883a 	add	r2,r20,r21
    8324:	1083ffcc 	andi	r2,r2,4095
    8328:	18abc83a 	sub	r21,r3,r2
    832c:	a80b883a 	mov	r5,r21
    8330:	9009883a 	mov	r4,r18
    8334:	00099c40 	call	99c4 <_sbrk_r>
    8338:	00ffffc4 	movi	r3,-1
    833c:	10c0e126 	beq	r2,r3,86c4 <_malloc_r+0x788>
    8340:	1505c83a 	sub	r2,r2,r20
    8344:	1545883a 	add	r2,r2,r21
    8348:	10800054 	ori	r2,r2,1
    834c:	e0c00017 	ldw	r3,0(fp)
    8350:	9d000215 	stw	r20,8(r19)
    8354:	a0800115 	stw	r2,4(r20)
    8358:	a8c7883a 	add	r3,r21,r3
    835c:	e0c00015 	stw	r3,0(fp)
    8360:	84c00e26 	beq	r16,r19,839c <_malloc_r+0x460>
    8364:	018003c4 	movi	r6,15
    8368:	3580a72e 	bgeu	r6,r22,8608 <_malloc_r+0x6cc>
    836c:	81400117 	ldw	r5,4(r16)
    8370:	013ffe04 	movi	r4,-8
    8374:	b0bffd04 	addi	r2,r22,-12
    8378:	1104703a 	and	r2,r2,r4
    837c:	2900004c 	andi	r4,r5,1
    8380:	2088b03a 	or	r4,r4,r2
    8384:	81000115 	stw	r4,4(r16)
    8388:	01400144 	movi	r5,5
    838c:	8089883a 	add	r4,r16,r2
    8390:	21400115 	stw	r5,4(r4)
    8394:	21400215 	stw	r5,8(r4)
    8398:	3080cd36 	bltu	r6,r2,86d0 <_malloc_r+0x794>
    839c:	00800074 	movhi	r2,1
    83a0:	108ed404 	addi	r2,r2,15184
    83a4:	11000017 	ldw	r4,0(r2)
    83a8:	20c0012e 	bgeu	r4,r3,83b0 <_malloc_r+0x474>
    83ac:	10c00015 	stw	r3,0(r2)
    83b0:	00800074 	movhi	r2,1
    83b4:	108ed304 	addi	r2,r2,15180
    83b8:	11000017 	ldw	r4,0(r2)
    83bc:	9c000217 	ldw	r16,8(r19)
    83c0:	20c0012e 	bgeu	r4,r3,83c8 <_malloc_r+0x48c>
    83c4:	10c00015 	stw	r3,0(r2)
    83c8:	80c00117 	ldw	r3,4(r16)
    83cc:	00bfff04 	movi	r2,-4
    83d0:	1886703a 	and	r3,r3,r2
    83d4:	1c45c83a 	sub	r2,r3,r17
    83d8:	1c400236 	bltu	r3,r17,83e4 <_malloc_r+0x4a8>
    83dc:	00c003c4 	movi	r3,15
    83e0:	18800416 	blt	r3,r2,83f4 <_malloc_r+0x4b8>
    83e4:	9009883a 	mov	r4,r18
    83e8:	000fc400 	call	fc40 <__malloc_unlock>
    83ec:	0005883a 	mov	r2,zero
    83f0:	003f7b06 	br	81e0 <__alt_data_end+0xfffc81e0>
    83f4:	88c00054 	ori	r3,r17,1
    83f8:	80c00115 	stw	r3,4(r16)
    83fc:	8463883a 	add	r17,r16,r17
    8400:	10800054 	ori	r2,r2,1
    8404:	9c400215 	stw	r17,8(r19)
    8408:	88800115 	stw	r2,4(r17)
    840c:	9009883a 	mov	r4,r18
    8410:	000fc400 	call	fc40 <__malloc_unlock>
    8414:	80800204 	addi	r2,r16,8
    8418:	003f7106 	br	81e0 <__alt_data_end+0xfffc81e0>
    841c:	00c00504 	movi	r3,20
    8420:	18804a2e 	bgeu	r3,r2,854c <_malloc_r+0x610>
    8424:	00c01504 	movi	r3,84
    8428:	18806e36 	bltu	r3,r2,85e4 <_malloc_r+0x6a8>
    842c:	8804d33a 	srli	r2,r17,12
    8430:	12001bc4 	addi	r8,r2,111
    8434:	11c01b84 	addi	r7,r2,110
    8438:	4209883a 	add	r4,r8,r8
    843c:	003edd06 	br	7fb4 <__alt_data_end+0xfffc7fb4>
    8440:	3804d27a 	srli	r2,r7,9
    8444:	00c00104 	movi	r3,4
    8448:	1880442e 	bgeu	r3,r2,855c <_malloc_r+0x620>
    844c:	00c00504 	movi	r3,20
    8450:	18808136 	bltu	r3,r2,8658 <_malloc_r+0x71c>
    8454:	11401704 	addi	r5,r2,92
    8458:	10c016c4 	addi	r3,r2,91
    845c:	294b883a 	add	r5,r5,r5
    8460:	294b883a 	add	r5,r5,r5
    8464:	294b883a 	add	r5,r5,r5
    8468:	994b883a 	add	r5,r19,r5
    846c:	28800017 	ldw	r2,0(r5)
    8470:	01800074 	movhi	r6,1
    8474:	297ffe04 	addi	r5,r5,-8
    8478:	3186f704 	addi	r6,r6,7132
    847c:	28806526 	beq	r5,r2,8614 <_malloc_r+0x6d8>
    8480:	01bfff04 	movi	r6,-4
    8484:	10c00117 	ldw	r3,4(r2)
    8488:	1986703a 	and	r3,r3,r6
    848c:	38c0022e 	bgeu	r7,r3,8498 <_malloc_r+0x55c>
    8490:	10800217 	ldw	r2,8(r2)
    8494:	28bffb1e 	bne	r5,r2,8484 <__alt_data_end+0xfffc8484>
    8498:	11400317 	ldw	r5,12(r2)
    849c:	98c00117 	ldw	r3,4(r19)
    84a0:	81400315 	stw	r5,12(r16)
    84a4:	80800215 	stw	r2,8(r16)
    84a8:	2c000215 	stw	r16,8(r5)
    84ac:	14000315 	stw	r16,12(r2)
    84b0:	003ef806 	br	8094 <__alt_data_end+0xfffc8094>
    84b4:	88c00054 	ori	r3,r17,1
    84b8:	80c00115 	stw	r3,4(r16)
    84bc:	8463883a 	add	r17,r16,r17
    84c0:	34400515 	stw	r17,20(r6)
    84c4:	34400415 	stw	r17,16(r6)
    84c8:	10c00054 	ori	r3,r2,1
    84cc:	8a000315 	stw	r8,12(r17)
    84d0:	8a000215 	stw	r8,8(r17)
    84d4:	88c00115 	stw	r3,4(r17)
    84d8:	88a3883a 	add	r17,r17,r2
    84dc:	88800015 	stw	r2,0(r17)
    84e0:	9009883a 	mov	r4,r18
    84e4:	000fc400 	call	fc40 <__malloc_unlock>
    84e8:	80800204 	addi	r2,r16,8
    84ec:	003f3c06 	br	81e0 <__alt_data_end+0xfffc81e0>
    84f0:	30c00117 	ldw	r3,4(r6)
    84f4:	003ee706 	br	8094 <__alt_data_end+0xfffc8094>
    84f8:	5ac00044 	addi	r11,r11,1
    84fc:	588000cc 	andi	r2,r11,3
    8500:	31800204 	addi	r6,r6,8
    8504:	103efd1e 	bne	r2,zero,80fc <__alt_data_end+0xfffc80fc>
    8508:	00002406 	br	859c <_malloc_r+0x660>
    850c:	14000317 	ldw	r16,12(r2)
    8510:	143f251e 	bne	r2,r16,81a8 <__alt_data_end+0xfffc81a8>
    8514:	21000084 	addi	r4,r4,2
    8518:	003ebc06 	br	800c <__alt_data_end+0xfffc800c>
    851c:	8085883a 	add	r2,r16,r2
    8520:	10c00117 	ldw	r3,4(r2)
    8524:	81000317 	ldw	r4,12(r16)
    8528:	81400217 	ldw	r5,8(r16)
    852c:	18c00054 	ori	r3,r3,1
    8530:	10c00115 	stw	r3,4(r2)
    8534:	29000315 	stw	r4,12(r5)
    8538:	21400215 	stw	r5,8(r4)
    853c:	9009883a 	mov	r4,r18
    8540:	000fc400 	call	fc40 <__malloc_unlock>
    8544:	80800204 	addi	r2,r16,8
    8548:	003f2506 	br	81e0 <__alt_data_end+0xfffc81e0>
    854c:	12001704 	addi	r8,r2,92
    8550:	11c016c4 	addi	r7,r2,91
    8554:	4209883a 	add	r4,r8,r8
    8558:	003e9606 	br	7fb4 <__alt_data_end+0xfffc7fb4>
    855c:	3804d1ba 	srli	r2,r7,6
    8560:	11400e44 	addi	r5,r2,57
    8564:	10c00e04 	addi	r3,r2,56
    8568:	294b883a 	add	r5,r5,r5
    856c:	003fbc06 	br	8460 <__alt_data_end+0xfffc8460>
    8570:	84ff5926 	beq	r16,r19,82d8 <__alt_data_end+0xfffc82d8>
    8574:	00800074 	movhi	r2,1
    8578:	1086f704 	addi	r2,r2,7132
    857c:	14000217 	ldw	r16,8(r2)
    8580:	00bfff04 	movi	r2,-4
    8584:	80c00117 	ldw	r3,4(r16)
    8588:	1886703a 	and	r3,r3,r2
    858c:	003f9106 	br	83d4 <__alt_data_end+0xfffc83d4>
    8590:	60800217 	ldw	r2,8(r12)
    8594:	213fffc4 	addi	r4,r4,-1
    8598:	1300651e 	bne	r2,r12,8730 <_malloc_r+0x7f4>
    859c:	208000cc 	andi	r2,r4,3
    85a0:	633ffe04 	addi	r12,r12,-8
    85a4:	103ffa1e 	bne	r2,zero,8590 <__alt_data_end+0xfffc8590>
    85a8:	98800117 	ldw	r2,4(r19)
    85ac:	0146303a 	nor	r3,zero,r5
    85b0:	1884703a 	and	r2,r3,r2
    85b4:	98800115 	stw	r2,4(r19)
    85b8:	294b883a 	add	r5,r5,r5
    85bc:	117f2836 	bltu	r2,r5,8260 <__alt_data_end+0xfffc8260>
    85c0:	283f2726 	beq	r5,zero,8260 <__alt_data_end+0xfffc8260>
    85c4:	2886703a 	and	r3,r5,r2
    85c8:	5809883a 	mov	r4,r11
    85cc:	183ec31e 	bne	r3,zero,80dc <__alt_data_end+0xfffc80dc>
    85d0:	294b883a 	add	r5,r5,r5
    85d4:	2886703a 	and	r3,r5,r2
    85d8:	21000104 	addi	r4,r4,4
    85dc:	183ffc26 	beq	r3,zero,85d0 <__alt_data_end+0xfffc85d0>
    85e0:	003ebe06 	br	80dc <__alt_data_end+0xfffc80dc>
    85e4:	00c05504 	movi	r3,340
    85e8:	18801236 	bltu	r3,r2,8634 <_malloc_r+0x6f8>
    85ec:	8804d3fa 	srli	r2,r17,15
    85f0:	12001e04 	addi	r8,r2,120
    85f4:	11c01dc4 	addi	r7,r2,119
    85f8:	4209883a 	add	r4,r8,r8
    85fc:	003e6d06 	br	7fb4 <__alt_data_end+0xfffc7fb4>
    8600:	00c40004 	movi	r3,4096
    8604:	003f4606 	br	8320 <__alt_data_end+0xfffc8320>
    8608:	00800044 	movi	r2,1
    860c:	a0800115 	stw	r2,4(r20)
    8610:	003f7406 	br	83e4 <__alt_data_end+0xfffc83e4>
    8614:	1805d0ba 	srai	r2,r3,2
    8618:	01c00044 	movi	r7,1
    861c:	30c00117 	ldw	r3,4(r6)
    8620:	388e983a 	sll	r7,r7,r2
    8624:	2805883a 	mov	r2,r5
    8628:	38c6b03a 	or	r3,r7,r3
    862c:	30c00115 	stw	r3,4(r6)
    8630:	003f9b06 	br	84a0 <__alt_data_end+0xfffc84a0>
    8634:	00c15504 	movi	r3,1364
    8638:	18801a36 	bltu	r3,r2,86a4 <_malloc_r+0x768>
    863c:	8804d4ba 	srli	r2,r17,18
    8640:	12001f44 	addi	r8,r2,125
    8644:	11c01f04 	addi	r7,r2,124
    8648:	4209883a 	add	r4,r8,r8
    864c:	003e5906 	br	7fb4 <__alt_data_end+0xfffc7fb4>
    8650:	ad400404 	addi	r21,r21,16
    8654:	003f1706 	br	82b4 <__alt_data_end+0xfffc82b4>
    8658:	00c01504 	movi	r3,84
    865c:	18802336 	bltu	r3,r2,86ec <_malloc_r+0x7b0>
    8660:	3804d33a 	srli	r2,r7,12
    8664:	11401bc4 	addi	r5,r2,111
    8668:	10c01b84 	addi	r3,r2,110
    866c:	294b883a 	add	r5,r5,r5
    8670:	003f7b06 	br	8460 <__alt_data_end+0xfffc8460>
    8674:	9c000217 	ldw	r16,8(r19)
    8678:	00bfff04 	movi	r2,-4
    867c:	80c00117 	ldw	r3,4(r16)
    8680:	1886703a 	and	r3,r3,r2
    8684:	003f5306 	br	83d4 <__alt_data_end+0xfffc83d4>
    8688:	3083ffcc 	andi	r2,r6,4095
    868c:	103f181e 	bne	r2,zero,82f0 <__alt_data_end+0xfffc82f0>
    8690:	99000217 	ldw	r4,8(r19)
    8694:	b545883a 	add	r2,r22,r21
    8698:	10800054 	ori	r2,r2,1
    869c:	20800115 	stw	r2,4(r4)
    86a0:	003f3e06 	br	839c <__alt_data_end+0xfffc839c>
    86a4:	01003f84 	movi	r4,254
    86a8:	02001fc4 	movi	r8,127
    86ac:	01c01f84 	movi	r7,126
    86b0:	003e4006 	br	7fb4 <__alt_data_end+0xfffc7fb4>
    86b4:	00800074 	movhi	r2,1
    86b8:	10880704 	addi	r2,r2,8220
    86bc:	15000015 	stw	r20,0(r2)
    86c0:	003f1106 	br	8308 <__alt_data_end+0xfffc8308>
    86c4:	00800044 	movi	r2,1
    86c8:	002b883a 	mov	r21,zero
    86cc:	003f1f06 	br	834c <__alt_data_end+0xfffc834c>
    86d0:	81400204 	addi	r5,r16,8
    86d4:	9009883a 	mov	r4,r18
    86d8:	000780c0 	call	780c <_free_r>
    86dc:	00800074 	movhi	r2,1
    86e0:	108ed604 	addi	r2,r2,15192
    86e4:	10c00017 	ldw	r3,0(r2)
    86e8:	003f2c06 	br	839c <__alt_data_end+0xfffc839c>
    86ec:	00c05504 	movi	r3,340
    86f0:	18800536 	bltu	r3,r2,8708 <_malloc_r+0x7cc>
    86f4:	3804d3fa 	srli	r2,r7,15
    86f8:	11401e04 	addi	r5,r2,120
    86fc:	10c01dc4 	addi	r3,r2,119
    8700:	294b883a 	add	r5,r5,r5
    8704:	003f5606 	br	8460 <__alt_data_end+0xfffc8460>
    8708:	00c15504 	movi	r3,1364
    870c:	18800536 	bltu	r3,r2,8724 <_malloc_r+0x7e8>
    8710:	3804d4ba 	srli	r2,r7,18
    8714:	11401f44 	addi	r5,r2,125
    8718:	10c01f04 	addi	r3,r2,124
    871c:	294b883a 	add	r5,r5,r5
    8720:	003f4f06 	br	8460 <__alt_data_end+0xfffc8460>
    8724:	01403f84 	movi	r5,254
    8728:	00c01f84 	movi	r3,126
    872c:	003f4c06 	br	8460 <__alt_data_end+0xfffc8460>
    8730:	98800117 	ldw	r2,4(r19)
    8734:	003fa006 	br	85b8 <__alt_data_end+0xfffc85b8>
    8738:	8808d0fa 	srli	r4,r17,3
    873c:	20800044 	addi	r2,r4,1
    8740:	1085883a 	add	r2,r2,r2
    8744:	003e9006 	br	8188 <__alt_data_end+0xfffc8188>

00008748 <memchr>:
    8748:	208000cc 	andi	r2,r4,3
    874c:	280f883a 	mov	r7,r5
    8750:	10003426 	beq	r2,zero,8824 <memchr+0xdc>
    8754:	30bfffc4 	addi	r2,r6,-1
    8758:	30001a26 	beq	r6,zero,87c4 <memchr+0x7c>
    875c:	20c00003 	ldbu	r3,0(r4)
    8760:	29803fcc 	andi	r6,r5,255
    8764:	30c0051e 	bne	r6,r3,877c <memchr+0x34>
    8768:	00001806 	br	87cc <memchr+0x84>
    876c:	10001526 	beq	r2,zero,87c4 <memchr+0x7c>
    8770:	20c00003 	ldbu	r3,0(r4)
    8774:	10bfffc4 	addi	r2,r2,-1
    8778:	30c01426 	beq	r6,r3,87cc <memchr+0x84>
    877c:	21000044 	addi	r4,r4,1
    8780:	20c000cc 	andi	r3,r4,3
    8784:	183ff91e 	bne	r3,zero,876c <__alt_data_end+0xfffc876c>
    8788:	020000c4 	movi	r8,3
    878c:	40801136 	bltu	r8,r2,87d4 <memchr+0x8c>
    8790:	10000c26 	beq	r2,zero,87c4 <memchr+0x7c>
    8794:	20c00003 	ldbu	r3,0(r4)
    8798:	29403fcc 	andi	r5,r5,255
    879c:	28c00b26 	beq	r5,r3,87cc <memchr+0x84>
    87a0:	20c00044 	addi	r3,r4,1
    87a4:	39803fcc 	andi	r6,r7,255
    87a8:	2089883a 	add	r4,r4,r2
    87ac:	00000306 	br	87bc <memchr+0x74>
    87b0:	18c00044 	addi	r3,r3,1
    87b4:	197fffc3 	ldbu	r5,-1(r3)
    87b8:	31400526 	beq	r6,r5,87d0 <memchr+0x88>
    87bc:	1805883a 	mov	r2,r3
    87c0:	20fffb1e 	bne	r4,r3,87b0 <__alt_data_end+0xfffc87b0>
    87c4:	0005883a 	mov	r2,zero
    87c8:	f800283a 	ret
    87cc:	2005883a 	mov	r2,r4
    87d0:	f800283a 	ret
    87d4:	28c03fcc 	andi	r3,r5,255
    87d8:	1812923a 	slli	r9,r3,8
    87dc:	02ffbff4 	movhi	r11,65279
    87e0:	02a02074 	movhi	r10,32897
    87e4:	48d2b03a 	or	r9,r9,r3
    87e8:	4806943a 	slli	r3,r9,16
    87ec:	5affbfc4 	addi	r11,r11,-257
    87f0:	52a02004 	addi	r10,r10,-32640
    87f4:	48d2b03a 	or	r9,r9,r3
    87f8:	20c00017 	ldw	r3,0(r4)
    87fc:	48c6f03a 	xor	r3,r9,r3
    8800:	1acd883a 	add	r6,r3,r11
    8804:	00c6303a 	nor	r3,zero,r3
    8808:	30c6703a 	and	r3,r6,r3
    880c:	1a86703a 	and	r3,r3,r10
    8810:	183fe01e 	bne	r3,zero,8794 <__alt_data_end+0xfffc8794>
    8814:	10bfff04 	addi	r2,r2,-4
    8818:	21000104 	addi	r4,r4,4
    881c:	40bff636 	bltu	r8,r2,87f8 <__alt_data_end+0xfffc87f8>
    8820:	003fdb06 	br	8790 <__alt_data_end+0xfffc8790>
    8824:	3005883a 	mov	r2,r6
    8828:	003fd706 	br	8788 <__alt_data_end+0xfffc8788>

0000882c <memset>:
    882c:	20c000cc 	andi	r3,r4,3
    8830:	2005883a 	mov	r2,r4
    8834:	18004426 	beq	r3,zero,8948 <memset+0x11c>
    8838:	31ffffc4 	addi	r7,r6,-1
    883c:	30004026 	beq	r6,zero,8940 <memset+0x114>
    8840:	2813883a 	mov	r9,r5
    8844:	200d883a 	mov	r6,r4
    8848:	2007883a 	mov	r3,r4
    884c:	00000406 	br	8860 <memset+0x34>
    8850:	3a3fffc4 	addi	r8,r7,-1
    8854:	31800044 	addi	r6,r6,1
    8858:	38003926 	beq	r7,zero,8940 <memset+0x114>
    885c:	400f883a 	mov	r7,r8
    8860:	18c00044 	addi	r3,r3,1
    8864:	32400005 	stb	r9,0(r6)
    8868:	1a0000cc 	andi	r8,r3,3
    886c:	403ff81e 	bne	r8,zero,8850 <__alt_data_end+0xfffc8850>
    8870:	010000c4 	movi	r4,3
    8874:	21c02d2e 	bgeu	r4,r7,892c <memset+0x100>
    8878:	29003fcc 	andi	r4,r5,255
    887c:	200c923a 	slli	r6,r4,8
    8880:	3108b03a 	or	r4,r6,r4
    8884:	200c943a 	slli	r6,r4,16
    8888:	218cb03a 	or	r6,r4,r6
    888c:	010003c4 	movi	r4,15
    8890:	21c0182e 	bgeu	r4,r7,88f4 <memset+0xc8>
    8894:	3b3ffc04 	addi	r12,r7,-16
    8898:	6018d13a 	srli	r12,r12,4
    889c:	1a000104 	addi	r8,r3,4
    88a0:	1ac00204 	addi	r11,r3,8
    88a4:	6008913a 	slli	r4,r12,4
    88a8:	1a800304 	addi	r10,r3,12
    88ac:	1813883a 	mov	r9,r3
    88b0:	21000504 	addi	r4,r4,20
    88b4:	1909883a 	add	r4,r3,r4
    88b8:	49800015 	stw	r6,0(r9)
    88bc:	41800015 	stw	r6,0(r8)
    88c0:	59800015 	stw	r6,0(r11)
    88c4:	51800015 	stw	r6,0(r10)
    88c8:	42000404 	addi	r8,r8,16
    88cc:	4a400404 	addi	r9,r9,16
    88d0:	5ac00404 	addi	r11,r11,16
    88d4:	52800404 	addi	r10,r10,16
    88d8:	413ff71e 	bne	r8,r4,88b8 <__alt_data_end+0xfffc88b8>
    88dc:	63000044 	addi	r12,r12,1
    88e0:	6018913a 	slli	r12,r12,4
    88e4:	39c003cc 	andi	r7,r7,15
    88e8:	010000c4 	movi	r4,3
    88ec:	1b07883a 	add	r3,r3,r12
    88f0:	21c00e2e 	bgeu	r4,r7,892c <memset+0x100>
    88f4:	1813883a 	mov	r9,r3
    88f8:	3811883a 	mov	r8,r7
    88fc:	010000c4 	movi	r4,3
    8900:	49800015 	stw	r6,0(r9)
    8904:	423fff04 	addi	r8,r8,-4
    8908:	4a400104 	addi	r9,r9,4
    890c:	223ffc36 	bltu	r4,r8,8900 <__alt_data_end+0xfffc8900>
    8910:	393fff04 	addi	r4,r7,-4
    8914:	2008d0ba 	srli	r4,r4,2
    8918:	39c000cc 	andi	r7,r7,3
    891c:	21000044 	addi	r4,r4,1
    8920:	2109883a 	add	r4,r4,r4
    8924:	2109883a 	add	r4,r4,r4
    8928:	1907883a 	add	r3,r3,r4
    892c:	38000526 	beq	r7,zero,8944 <memset+0x118>
    8930:	19cf883a 	add	r7,r3,r7
    8934:	19400005 	stb	r5,0(r3)
    8938:	18c00044 	addi	r3,r3,1
    893c:	38fffd1e 	bne	r7,r3,8934 <__alt_data_end+0xfffc8934>
    8940:	f800283a 	ret
    8944:	f800283a 	ret
    8948:	2007883a 	mov	r3,r4
    894c:	300f883a 	mov	r7,r6
    8950:	003fc706 	br	8870 <__alt_data_end+0xfffc8870>

00008954 <_Balloc>:
    8954:	20801317 	ldw	r2,76(r4)
    8958:	defffc04 	addi	sp,sp,-16
    895c:	dc400115 	stw	r17,4(sp)
    8960:	dc000015 	stw	r16,0(sp)
    8964:	dfc00315 	stw	ra,12(sp)
    8968:	dc800215 	stw	r18,8(sp)
    896c:	2023883a 	mov	r17,r4
    8970:	2821883a 	mov	r16,r5
    8974:	10000f26 	beq	r2,zero,89b4 <_Balloc+0x60>
    8978:	8407883a 	add	r3,r16,r16
    897c:	18c7883a 	add	r3,r3,r3
    8980:	10c7883a 	add	r3,r2,r3
    8984:	18800017 	ldw	r2,0(r3)
    8988:	10001126 	beq	r2,zero,89d0 <_Balloc+0x7c>
    898c:	11000017 	ldw	r4,0(r2)
    8990:	19000015 	stw	r4,0(r3)
    8994:	10000415 	stw	zero,16(r2)
    8998:	10000315 	stw	zero,12(r2)
    899c:	dfc00317 	ldw	ra,12(sp)
    89a0:	dc800217 	ldw	r18,8(sp)
    89a4:	dc400117 	ldw	r17,4(sp)
    89a8:	dc000017 	ldw	r16,0(sp)
    89ac:	dec00404 	addi	sp,sp,16
    89b0:	f800283a 	ret
    89b4:	01800844 	movi	r6,33
    89b8:	01400104 	movi	r5,4
    89bc:	000b32c0 	call	b32c <_calloc_r>
    89c0:	88801315 	stw	r2,76(r17)
    89c4:	103fec1e 	bne	r2,zero,8978 <__alt_data_end+0xfffc8978>
    89c8:	0005883a 	mov	r2,zero
    89cc:	003ff306 	br	899c <__alt_data_end+0xfffc899c>
    89d0:	01400044 	movi	r5,1
    89d4:	2c24983a 	sll	r18,r5,r16
    89d8:	8809883a 	mov	r4,r17
    89dc:	91800144 	addi	r6,r18,5
    89e0:	318d883a 	add	r6,r6,r6
    89e4:	318d883a 	add	r6,r6,r6
    89e8:	000b32c0 	call	b32c <_calloc_r>
    89ec:	103ff626 	beq	r2,zero,89c8 <__alt_data_end+0xfffc89c8>
    89f0:	14000115 	stw	r16,4(r2)
    89f4:	14800215 	stw	r18,8(r2)
    89f8:	003fe606 	br	8994 <__alt_data_end+0xfffc8994>

000089fc <_Bfree>:
    89fc:	28000826 	beq	r5,zero,8a20 <_Bfree+0x24>
    8a00:	28c00117 	ldw	r3,4(r5)
    8a04:	20801317 	ldw	r2,76(r4)
    8a08:	18c7883a 	add	r3,r3,r3
    8a0c:	18c7883a 	add	r3,r3,r3
    8a10:	10c5883a 	add	r2,r2,r3
    8a14:	10c00017 	ldw	r3,0(r2)
    8a18:	28c00015 	stw	r3,0(r5)
    8a1c:	11400015 	stw	r5,0(r2)
    8a20:	f800283a 	ret

00008a24 <__multadd>:
    8a24:	defffa04 	addi	sp,sp,-24
    8a28:	dc800315 	stw	r18,12(sp)
    8a2c:	dc400215 	stw	r17,8(sp)
    8a30:	dc000115 	stw	r16,4(sp)
    8a34:	2823883a 	mov	r17,r5
    8a38:	2c000417 	ldw	r16,16(r5)
    8a3c:	dfc00515 	stw	ra,20(sp)
    8a40:	dcc00415 	stw	r19,16(sp)
    8a44:	2025883a 	mov	r18,r4
    8a48:	29400504 	addi	r5,r5,20
    8a4c:	0011883a 	mov	r8,zero
    8a50:	28c00017 	ldw	r3,0(r5)
    8a54:	29400104 	addi	r5,r5,4
    8a58:	42000044 	addi	r8,r8,1
    8a5c:	18bfffcc 	andi	r2,r3,65535
    8a60:	1185383a 	mul	r2,r2,r6
    8a64:	1806d43a 	srli	r3,r3,16
    8a68:	11cf883a 	add	r7,r2,r7
    8a6c:	3808d43a 	srli	r4,r7,16
    8a70:	1987383a 	mul	r3,r3,r6
    8a74:	38bfffcc 	andi	r2,r7,65535
    8a78:	1907883a 	add	r3,r3,r4
    8a7c:	1808943a 	slli	r4,r3,16
    8a80:	180ed43a 	srli	r7,r3,16
    8a84:	2085883a 	add	r2,r4,r2
    8a88:	28bfff15 	stw	r2,-4(r5)
    8a8c:	443ff016 	blt	r8,r16,8a50 <__alt_data_end+0xfffc8a50>
    8a90:	38000926 	beq	r7,zero,8ab8 <__multadd+0x94>
    8a94:	88800217 	ldw	r2,8(r17)
    8a98:	80800f0e 	bge	r16,r2,8ad8 <__multadd+0xb4>
    8a9c:	80800144 	addi	r2,r16,5
    8aa0:	1085883a 	add	r2,r2,r2
    8aa4:	1085883a 	add	r2,r2,r2
    8aa8:	8885883a 	add	r2,r17,r2
    8aac:	11c00015 	stw	r7,0(r2)
    8ab0:	84000044 	addi	r16,r16,1
    8ab4:	8c000415 	stw	r16,16(r17)
    8ab8:	8805883a 	mov	r2,r17
    8abc:	dfc00517 	ldw	ra,20(sp)
    8ac0:	dcc00417 	ldw	r19,16(sp)
    8ac4:	dc800317 	ldw	r18,12(sp)
    8ac8:	dc400217 	ldw	r17,8(sp)
    8acc:	dc000117 	ldw	r16,4(sp)
    8ad0:	dec00604 	addi	sp,sp,24
    8ad4:	f800283a 	ret
    8ad8:	89400117 	ldw	r5,4(r17)
    8adc:	9009883a 	mov	r4,r18
    8ae0:	d9c00015 	stw	r7,0(sp)
    8ae4:	29400044 	addi	r5,r5,1
    8ae8:	00089540 	call	8954 <_Balloc>
    8aec:	89800417 	ldw	r6,16(r17)
    8af0:	89400304 	addi	r5,r17,12
    8af4:	11000304 	addi	r4,r2,12
    8af8:	31800084 	addi	r6,r6,2
    8afc:	318d883a 	add	r6,r6,r6
    8b00:	318d883a 	add	r6,r6,r6
    8b04:	1027883a 	mov	r19,r2
    8b08:	0002c500 	call	2c50 <memcpy>
    8b0c:	d9c00017 	ldw	r7,0(sp)
    8b10:	88000a26 	beq	r17,zero,8b3c <__multadd+0x118>
    8b14:	88c00117 	ldw	r3,4(r17)
    8b18:	90801317 	ldw	r2,76(r18)
    8b1c:	18c7883a 	add	r3,r3,r3
    8b20:	18c7883a 	add	r3,r3,r3
    8b24:	10c5883a 	add	r2,r2,r3
    8b28:	10c00017 	ldw	r3,0(r2)
    8b2c:	88c00015 	stw	r3,0(r17)
    8b30:	14400015 	stw	r17,0(r2)
    8b34:	9823883a 	mov	r17,r19
    8b38:	003fd806 	br	8a9c <__alt_data_end+0xfffc8a9c>
    8b3c:	9823883a 	mov	r17,r19
    8b40:	003fd606 	br	8a9c <__alt_data_end+0xfffc8a9c>

00008b44 <__s2b>:
    8b44:	defff904 	addi	sp,sp,-28
    8b48:	dc400115 	stw	r17,4(sp)
    8b4c:	dc000015 	stw	r16,0(sp)
    8b50:	2023883a 	mov	r17,r4
    8b54:	2821883a 	mov	r16,r5
    8b58:	39000204 	addi	r4,r7,8
    8b5c:	01400244 	movi	r5,9
    8b60:	dcc00315 	stw	r19,12(sp)
    8b64:	dc800215 	stw	r18,8(sp)
    8b68:	dfc00615 	stw	ra,24(sp)
    8b6c:	dd400515 	stw	r21,20(sp)
    8b70:	dd000415 	stw	r20,16(sp)
    8b74:	3825883a 	mov	r18,r7
    8b78:	3027883a 	mov	r19,r6
    8b7c:	000d0f00 	call	d0f0 <__divsi3>
    8b80:	00c00044 	movi	r3,1
    8b84:	000b883a 	mov	r5,zero
    8b88:	1880030e 	bge	r3,r2,8b98 <__s2b+0x54>
    8b8c:	18c7883a 	add	r3,r3,r3
    8b90:	29400044 	addi	r5,r5,1
    8b94:	18bffd16 	blt	r3,r2,8b8c <__alt_data_end+0xfffc8b8c>
    8b98:	8809883a 	mov	r4,r17
    8b9c:	00089540 	call	8954 <_Balloc>
    8ba0:	d8c00717 	ldw	r3,28(sp)
    8ba4:	10c00515 	stw	r3,20(r2)
    8ba8:	00c00044 	movi	r3,1
    8bac:	10c00415 	stw	r3,16(r2)
    8bb0:	00c00244 	movi	r3,9
    8bb4:	1cc0210e 	bge	r3,r19,8c3c <__s2b+0xf8>
    8bb8:	80eb883a 	add	r21,r16,r3
    8bbc:	a829883a 	mov	r20,r21
    8bc0:	84e1883a 	add	r16,r16,r19
    8bc4:	a1c00007 	ldb	r7,0(r20)
    8bc8:	01800284 	movi	r6,10
    8bcc:	a5000044 	addi	r20,r20,1
    8bd0:	100b883a 	mov	r5,r2
    8bd4:	39fff404 	addi	r7,r7,-48
    8bd8:	8809883a 	mov	r4,r17
    8bdc:	0008a240 	call	8a24 <__multadd>
    8be0:	a43ff81e 	bne	r20,r16,8bc4 <__alt_data_end+0xfffc8bc4>
    8be4:	ace1883a 	add	r16,r21,r19
    8be8:	843ffe04 	addi	r16,r16,-8
    8bec:	9c800a0e 	bge	r19,r18,8c18 <__s2b+0xd4>
    8bf0:	94e5c83a 	sub	r18,r18,r19
    8bf4:	84a5883a 	add	r18,r16,r18
    8bf8:	81c00007 	ldb	r7,0(r16)
    8bfc:	01800284 	movi	r6,10
    8c00:	84000044 	addi	r16,r16,1
    8c04:	100b883a 	mov	r5,r2
    8c08:	39fff404 	addi	r7,r7,-48
    8c0c:	8809883a 	mov	r4,r17
    8c10:	0008a240 	call	8a24 <__multadd>
    8c14:	84bff81e 	bne	r16,r18,8bf8 <__alt_data_end+0xfffc8bf8>
    8c18:	dfc00617 	ldw	ra,24(sp)
    8c1c:	dd400517 	ldw	r21,20(sp)
    8c20:	dd000417 	ldw	r20,16(sp)
    8c24:	dcc00317 	ldw	r19,12(sp)
    8c28:	dc800217 	ldw	r18,8(sp)
    8c2c:	dc400117 	ldw	r17,4(sp)
    8c30:	dc000017 	ldw	r16,0(sp)
    8c34:	dec00704 	addi	sp,sp,28
    8c38:	f800283a 	ret
    8c3c:	84000284 	addi	r16,r16,10
    8c40:	1827883a 	mov	r19,r3
    8c44:	003fe906 	br	8bec <__alt_data_end+0xfffc8bec>

00008c48 <__hi0bits>:
    8c48:	20bfffec 	andhi	r2,r4,65535
    8c4c:	1000141e 	bne	r2,zero,8ca0 <__hi0bits+0x58>
    8c50:	2008943a 	slli	r4,r4,16
    8c54:	00800404 	movi	r2,16
    8c58:	20ffc02c 	andhi	r3,r4,65280
    8c5c:	1800021e 	bne	r3,zero,8c68 <__hi0bits+0x20>
    8c60:	2008923a 	slli	r4,r4,8
    8c64:	10800204 	addi	r2,r2,8
    8c68:	20fc002c 	andhi	r3,r4,61440
    8c6c:	1800021e 	bne	r3,zero,8c78 <__hi0bits+0x30>
    8c70:	2008913a 	slli	r4,r4,4
    8c74:	10800104 	addi	r2,r2,4
    8c78:	20f0002c 	andhi	r3,r4,49152
    8c7c:	1800031e 	bne	r3,zero,8c8c <__hi0bits+0x44>
    8c80:	2109883a 	add	r4,r4,r4
    8c84:	10800084 	addi	r2,r2,2
    8c88:	2109883a 	add	r4,r4,r4
    8c8c:	20000316 	blt	r4,zero,8c9c <__hi0bits+0x54>
    8c90:	2110002c 	andhi	r4,r4,16384
    8c94:	2000041e 	bne	r4,zero,8ca8 <__hi0bits+0x60>
    8c98:	00800804 	movi	r2,32
    8c9c:	f800283a 	ret
    8ca0:	0005883a 	mov	r2,zero
    8ca4:	003fec06 	br	8c58 <__alt_data_end+0xfffc8c58>
    8ca8:	10800044 	addi	r2,r2,1
    8cac:	f800283a 	ret

00008cb0 <__lo0bits>:
    8cb0:	20c00017 	ldw	r3,0(r4)
    8cb4:	188001cc 	andi	r2,r3,7
    8cb8:	10000826 	beq	r2,zero,8cdc <__lo0bits+0x2c>
    8cbc:	1880004c 	andi	r2,r3,1
    8cc0:	1000211e 	bne	r2,zero,8d48 <__lo0bits+0x98>
    8cc4:	1880008c 	andi	r2,r3,2
    8cc8:	1000211e 	bne	r2,zero,8d50 <__lo0bits+0xa0>
    8ccc:	1806d0ba 	srli	r3,r3,2
    8cd0:	00800084 	movi	r2,2
    8cd4:	20c00015 	stw	r3,0(r4)
    8cd8:	f800283a 	ret
    8cdc:	18bfffcc 	andi	r2,r3,65535
    8ce0:	10001326 	beq	r2,zero,8d30 <__lo0bits+0x80>
    8ce4:	0005883a 	mov	r2,zero
    8ce8:	19403fcc 	andi	r5,r3,255
    8cec:	2800021e 	bne	r5,zero,8cf8 <__lo0bits+0x48>
    8cf0:	1806d23a 	srli	r3,r3,8
    8cf4:	10800204 	addi	r2,r2,8
    8cf8:	194003cc 	andi	r5,r3,15
    8cfc:	2800021e 	bne	r5,zero,8d08 <__lo0bits+0x58>
    8d00:	1806d13a 	srli	r3,r3,4
    8d04:	10800104 	addi	r2,r2,4
    8d08:	194000cc 	andi	r5,r3,3
    8d0c:	2800021e 	bne	r5,zero,8d18 <__lo0bits+0x68>
    8d10:	1806d0ba 	srli	r3,r3,2
    8d14:	10800084 	addi	r2,r2,2
    8d18:	1940004c 	andi	r5,r3,1
    8d1c:	2800081e 	bne	r5,zero,8d40 <__lo0bits+0x90>
    8d20:	1806d07a 	srli	r3,r3,1
    8d24:	1800051e 	bne	r3,zero,8d3c <__lo0bits+0x8c>
    8d28:	00800804 	movi	r2,32
    8d2c:	f800283a 	ret
    8d30:	1806d43a 	srli	r3,r3,16
    8d34:	00800404 	movi	r2,16
    8d38:	003feb06 	br	8ce8 <__alt_data_end+0xfffc8ce8>
    8d3c:	10800044 	addi	r2,r2,1
    8d40:	20c00015 	stw	r3,0(r4)
    8d44:	f800283a 	ret
    8d48:	0005883a 	mov	r2,zero
    8d4c:	f800283a 	ret
    8d50:	1806d07a 	srli	r3,r3,1
    8d54:	00800044 	movi	r2,1
    8d58:	20c00015 	stw	r3,0(r4)
    8d5c:	f800283a 	ret

00008d60 <__i2b>:
    8d60:	defffd04 	addi	sp,sp,-12
    8d64:	dc000015 	stw	r16,0(sp)
    8d68:	04000044 	movi	r16,1
    8d6c:	dc400115 	stw	r17,4(sp)
    8d70:	2823883a 	mov	r17,r5
    8d74:	800b883a 	mov	r5,r16
    8d78:	dfc00215 	stw	ra,8(sp)
    8d7c:	00089540 	call	8954 <_Balloc>
    8d80:	14400515 	stw	r17,20(r2)
    8d84:	14000415 	stw	r16,16(r2)
    8d88:	dfc00217 	ldw	ra,8(sp)
    8d8c:	dc400117 	ldw	r17,4(sp)
    8d90:	dc000017 	ldw	r16,0(sp)
    8d94:	dec00304 	addi	sp,sp,12
    8d98:	f800283a 	ret

00008d9c <__multiply>:
    8d9c:	defffa04 	addi	sp,sp,-24
    8da0:	dcc00315 	stw	r19,12(sp)
    8da4:	dc800215 	stw	r18,8(sp)
    8da8:	34c00417 	ldw	r19,16(r6)
    8dac:	2c800417 	ldw	r18,16(r5)
    8db0:	dd000415 	stw	r20,16(sp)
    8db4:	dc400115 	stw	r17,4(sp)
    8db8:	dfc00515 	stw	ra,20(sp)
    8dbc:	dc000015 	stw	r16,0(sp)
    8dc0:	2829883a 	mov	r20,r5
    8dc4:	3023883a 	mov	r17,r6
    8dc8:	94c0050e 	bge	r18,r19,8de0 <__multiply+0x44>
    8dcc:	9007883a 	mov	r3,r18
    8dd0:	3029883a 	mov	r20,r6
    8dd4:	9825883a 	mov	r18,r19
    8dd8:	2823883a 	mov	r17,r5
    8ddc:	1827883a 	mov	r19,r3
    8de0:	a0800217 	ldw	r2,8(r20)
    8de4:	94e1883a 	add	r16,r18,r19
    8de8:	a1400117 	ldw	r5,4(r20)
    8dec:	1400010e 	bge	r2,r16,8df4 <__multiply+0x58>
    8df0:	29400044 	addi	r5,r5,1
    8df4:	00089540 	call	8954 <_Balloc>
    8df8:	8415883a 	add	r10,r16,r16
    8dfc:	12c00504 	addi	r11,r2,20
    8e00:	5295883a 	add	r10,r10,r10
    8e04:	5a95883a 	add	r10,r11,r10
    8e08:	5807883a 	mov	r3,r11
    8e0c:	5a80032e 	bgeu	r11,r10,8e1c <__multiply+0x80>
    8e10:	18000015 	stw	zero,0(r3)
    8e14:	18c00104 	addi	r3,r3,4
    8e18:	1abffd36 	bltu	r3,r10,8e10 <__alt_data_end+0xfffc8e10>
    8e1c:	9ce7883a 	add	r19,r19,r19
    8e20:	94a5883a 	add	r18,r18,r18
    8e24:	89800504 	addi	r6,r17,20
    8e28:	9ce7883a 	add	r19,r19,r19
    8e2c:	a3400504 	addi	r13,r20,20
    8e30:	94a5883a 	add	r18,r18,r18
    8e34:	34d9883a 	add	r12,r6,r19
    8e38:	6c93883a 	add	r9,r13,r18
    8e3c:	3300422e 	bgeu	r6,r12,8f48 <__multiply+0x1ac>
    8e40:	37c00017 	ldw	ra,0(r6)
    8e44:	fbffffcc 	andi	r15,ra,65535
    8e48:	78001b26 	beq	r15,zero,8eb8 <__multiply+0x11c>
    8e4c:	5811883a 	mov	r8,r11
    8e50:	681d883a 	mov	r14,r13
    8e54:	000f883a 	mov	r7,zero
    8e58:	71000017 	ldw	r4,0(r14)
    8e5c:	40c00017 	ldw	r3,0(r8)
    8e60:	73800104 	addi	r14,r14,4
    8e64:	217fffcc 	andi	r5,r4,65535
    8e68:	2bcb383a 	mul	r5,r5,r15
    8e6c:	2008d43a 	srli	r4,r4,16
    8e70:	1c7fffcc 	andi	r17,r3,65535
    8e74:	2c4b883a 	add	r5,r5,r17
    8e78:	29cb883a 	add	r5,r5,r7
    8e7c:	23c9383a 	mul	r4,r4,r15
    8e80:	1806d43a 	srli	r3,r3,16
    8e84:	280ed43a 	srli	r7,r5,16
    8e88:	297fffcc 	andi	r5,r5,65535
    8e8c:	20c7883a 	add	r3,r4,r3
    8e90:	19c7883a 	add	r3,r3,r7
    8e94:	1808943a 	slli	r4,r3,16
    8e98:	4023883a 	mov	r17,r8
    8e9c:	180ed43a 	srli	r7,r3,16
    8ea0:	214ab03a 	or	r5,r4,r5
    8ea4:	41400015 	stw	r5,0(r8)
    8ea8:	42000104 	addi	r8,r8,4
    8eac:	727fea36 	bltu	r14,r9,8e58 <__alt_data_end+0xfffc8e58>
    8eb0:	89c00115 	stw	r7,4(r17)
    8eb4:	37c00017 	ldw	ra,0(r6)
    8eb8:	f83ed43a 	srli	ra,ra,16
    8ebc:	f8001f26 	beq	ra,zero,8f3c <__multiply+0x1a0>
    8ec0:	58c00017 	ldw	r3,0(r11)
    8ec4:	681d883a 	mov	r14,r13
    8ec8:	581f883a 	mov	r15,r11
    8ecc:	1811883a 	mov	r8,r3
    8ed0:	5825883a 	mov	r18,r11
    8ed4:	000f883a 	mov	r7,zero
    8ed8:	00000106 	br	8ee0 <__multiply+0x144>
    8edc:	8825883a 	mov	r18,r17
    8ee0:	7140000b 	ldhu	r5,0(r14)
    8ee4:	4010d43a 	srli	r8,r8,16
    8ee8:	193fffcc 	andi	r4,r3,65535
    8eec:	2fcb383a 	mul	r5,r5,ra
    8ef0:	7bc00104 	addi	r15,r15,4
    8ef4:	73800104 	addi	r14,r14,4
    8ef8:	2a0b883a 	add	r5,r5,r8
    8efc:	29cb883a 	add	r5,r5,r7
    8f00:	2806943a 	slli	r3,r5,16
    8f04:	94400104 	addi	r17,r18,4
    8f08:	280ad43a 	srli	r5,r5,16
    8f0c:	1908b03a 	or	r4,r3,r4
    8f10:	793fff15 	stw	r4,-4(r15)
    8f14:	70ffff17 	ldw	r3,-4(r14)
    8f18:	8a000017 	ldw	r8,0(r17)
    8f1c:	1806d43a 	srli	r3,r3,16
    8f20:	413fffcc 	andi	r4,r8,65535
    8f24:	1fc7383a 	mul	r3,r3,ra
    8f28:	1907883a 	add	r3,r3,r4
    8f2c:	1947883a 	add	r3,r3,r5
    8f30:	180ed43a 	srli	r7,r3,16
    8f34:	727fe936 	bltu	r14,r9,8edc <__alt_data_end+0xfffc8edc>
    8f38:	90c00115 	stw	r3,4(r18)
    8f3c:	31800104 	addi	r6,r6,4
    8f40:	5ac00104 	addi	r11,r11,4
    8f44:	333fbe36 	bltu	r6,r12,8e40 <__alt_data_end+0xfffc8e40>
    8f48:	0400090e 	bge	zero,r16,8f70 <__multiply+0x1d4>
    8f4c:	50ffff17 	ldw	r3,-4(r10)
    8f50:	52bfff04 	addi	r10,r10,-4
    8f54:	18000326 	beq	r3,zero,8f64 <__multiply+0x1c8>
    8f58:	00000506 	br	8f70 <__multiply+0x1d4>
    8f5c:	50c00017 	ldw	r3,0(r10)
    8f60:	1800031e 	bne	r3,zero,8f70 <__multiply+0x1d4>
    8f64:	843fffc4 	addi	r16,r16,-1
    8f68:	52bfff04 	addi	r10,r10,-4
    8f6c:	803ffb1e 	bne	r16,zero,8f5c <__alt_data_end+0xfffc8f5c>
    8f70:	14000415 	stw	r16,16(r2)
    8f74:	dfc00517 	ldw	ra,20(sp)
    8f78:	dd000417 	ldw	r20,16(sp)
    8f7c:	dcc00317 	ldw	r19,12(sp)
    8f80:	dc800217 	ldw	r18,8(sp)
    8f84:	dc400117 	ldw	r17,4(sp)
    8f88:	dc000017 	ldw	r16,0(sp)
    8f8c:	dec00604 	addi	sp,sp,24
    8f90:	f800283a 	ret

00008f94 <__pow5mult>:
    8f94:	defffa04 	addi	sp,sp,-24
    8f98:	dcc00315 	stw	r19,12(sp)
    8f9c:	dc000015 	stw	r16,0(sp)
    8fa0:	dfc00515 	stw	ra,20(sp)
    8fa4:	dd000415 	stw	r20,16(sp)
    8fa8:	dc800215 	stw	r18,8(sp)
    8fac:	dc400115 	stw	r17,4(sp)
    8fb0:	308000cc 	andi	r2,r6,3
    8fb4:	3021883a 	mov	r16,r6
    8fb8:	2027883a 	mov	r19,r4
    8fbc:	10002f1e 	bne	r2,zero,907c <__pow5mult+0xe8>
    8fc0:	2825883a 	mov	r18,r5
    8fc4:	8021d0ba 	srai	r16,r16,2
    8fc8:	80001a26 	beq	r16,zero,9034 <__pow5mult+0xa0>
    8fcc:	9c401217 	ldw	r17,72(r19)
    8fd0:	8800061e 	bne	r17,zero,8fec <__pow5mult+0x58>
    8fd4:	00003406 	br	90a8 <__pow5mult+0x114>
    8fd8:	8021d07a 	srai	r16,r16,1
    8fdc:	80001526 	beq	r16,zero,9034 <__pow5mult+0xa0>
    8fe0:	88800017 	ldw	r2,0(r17)
    8fe4:	10001c26 	beq	r2,zero,9058 <__pow5mult+0xc4>
    8fe8:	1023883a 	mov	r17,r2
    8fec:	8080004c 	andi	r2,r16,1
    8ff0:	103ff926 	beq	r2,zero,8fd8 <__alt_data_end+0xfffc8fd8>
    8ff4:	880d883a 	mov	r6,r17
    8ff8:	900b883a 	mov	r5,r18
    8ffc:	9809883a 	mov	r4,r19
    9000:	0008d9c0 	call	8d9c <__multiply>
    9004:	90001b26 	beq	r18,zero,9074 <__pow5mult+0xe0>
    9008:	91000117 	ldw	r4,4(r18)
    900c:	98c01317 	ldw	r3,76(r19)
    9010:	8021d07a 	srai	r16,r16,1
    9014:	2109883a 	add	r4,r4,r4
    9018:	2109883a 	add	r4,r4,r4
    901c:	1907883a 	add	r3,r3,r4
    9020:	19000017 	ldw	r4,0(r3)
    9024:	91000015 	stw	r4,0(r18)
    9028:	1c800015 	stw	r18,0(r3)
    902c:	1025883a 	mov	r18,r2
    9030:	803feb1e 	bne	r16,zero,8fe0 <__alt_data_end+0xfffc8fe0>
    9034:	9005883a 	mov	r2,r18
    9038:	dfc00517 	ldw	ra,20(sp)
    903c:	dd000417 	ldw	r20,16(sp)
    9040:	dcc00317 	ldw	r19,12(sp)
    9044:	dc800217 	ldw	r18,8(sp)
    9048:	dc400117 	ldw	r17,4(sp)
    904c:	dc000017 	ldw	r16,0(sp)
    9050:	dec00604 	addi	sp,sp,24
    9054:	f800283a 	ret
    9058:	880d883a 	mov	r6,r17
    905c:	880b883a 	mov	r5,r17
    9060:	9809883a 	mov	r4,r19
    9064:	0008d9c0 	call	8d9c <__multiply>
    9068:	88800015 	stw	r2,0(r17)
    906c:	10000015 	stw	zero,0(r2)
    9070:	003fdd06 	br	8fe8 <__alt_data_end+0xfffc8fe8>
    9074:	1025883a 	mov	r18,r2
    9078:	003fd706 	br	8fd8 <__alt_data_end+0xfffc8fd8>
    907c:	10bfffc4 	addi	r2,r2,-1
    9080:	1085883a 	add	r2,r2,r2
    9084:	00c00074 	movhi	r3,1
    9088:	18c0bd04 	addi	r3,r3,756
    908c:	1085883a 	add	r2,r2,r2
    9090:	1885883a 	add	r2,r3,r2
    9094:	11800017 	ldw	r6,0(r2)
    9098:	000f883a 	mov	r7,zero
    909c:	0008a240 	call	8a24 <__multadd>
    90a0:	1025883a 	mov	r18,r2
    90a4:	003fc706 	br	8fc4 <__alt_data_end+0xfffc8fc4>
    90a8:	05000044 	movi	r20,1
    90ac:	a00b883a 	mov	r5,r20
    90b0:	9809883a 	mov	r4,r19
    90b4:	00089540 	call	8954 <_Balloc>
    90b8:	1023883a 	mov	r17,r2
    90bc:	00809c44 	movi	r2,625
    90c0:	88800515 	stw	r2,20(r17)
    90c4:	8d000415 	stw	r20,16(r17)
    90c8:	9c401215 	stw	r17,72(r19)
    90cc:	88000015 	stw	zero,0(r17)
    90d0:	003fc606 	br	8fec <__alt_data_end+0xfffc8fec>

000090d4 <__lshift>:
    90d4:	defff904 	addi	sp,sp,-28
    90d8:	dd400515 	stw	r21,20(sp)
    90dc:	dcc00315 	stw	r19,12(sp)
    90e0:	302bd17a 	srai	r21,r6,5
    90e4:	2cc00417 	ldw	r19,16(r5)
    90e8:	28800217 	ldw	r2,8(r5)
    90ec:	dd000415 	stw	r20,16(sp)
    90f0:	ace7883a 	add	r19,r21,r19
    90f4:	dc800215 	stw	r18,8(sp)
    90f8:	dc400115 	stw	r17,4(sp)
    90fc:	dc000015 	stw	r16,0(sp)
    9100:	dfc00615 	stw	ra,24(sp)
    9104:	9c000044 	addi	r16,r19,1
    9108:	2823883a 	mov	r17,r5
    910c:	3029883a 	mov	r20,r6
    9110:	2025883a 	mov	r18,r4
    9114:	29400117 	ldw	r5,4(r5)
    9118:	1400030e 	bge	r2,r16,9128 <__lshift+0x54>
    911c:	1085883a 	add	r2,r2,r2
    9120:	29400044 	addi	r5,r5,1
    9124:	143ffd16 	blt	r2,r16,911c <__alt_data_end+0xfffc911c>
    9128:	9009883a 	mov	r4,r18
    912c:	00089540 	call	8954 <_Balloc>
    9130:	10c00504 	addi	r3,r2,20
    9134:	0540070e 	bge	zero,r21,9154 <__lshift+0x80>
    9138:	ad6b883a 	add	r21,r21,r21
    913c:	ad6b883a 	add	r21,r21,r21
    9140:	1809883a 	mov	r4,r3
    9144:	1d47883a 	add	r3,r3,r21
    9148:	20000015 	stw	zero,0(r4)
    914c:	21000104 	addi	r4,r4,4
    9150:	193ffd1e 	bne	r3,r4,9148 <__alt_data_end+0xfffc9148>
    9154:	8a000417 	ldw	r8,16(r17)
    9158:	89000504 	addi	r4,r17,20
    915c:	a18007cc 	andi	r6,r20,31
    9160:	4211883a 	add	r8,r8,r8
    9164:	4211883a 	add	r8,r8,r8
    9168:	2211883a 	add	r8,r4,r8
    916c:	30002326 	beq	r6,zero,91fc <__lshift+0x128>
    9170:	02400804 	movi	r9,32
    9174:	4993c83a 	sub	r9,r9,r6
    9178:	000b883a 	mov	r5,zero
    917c:	21c00017 	ldw	r7,0(r4)
    9180:	1815883a 	mov	r10,r3
    9184:	18c00104 	addi	r3,r3,4
    9188:	398e983a 	sll	r7,r7,r6
    918c:	21000104 	addi	r4,r4,4
    9190:	394ab03a 	or	r5,r7,r5
    9194:	197fff15 	stw	r5,-4(r3)
    9198:	217fff17 	ldw	r5,-4(r4)
    919c:	2a4ad83a 	srl	r5,r5,r9
    91a0:	223ff636 	bltu	r4,r8,917c <__alt_data_end+0xfffc917c>
    91a4:	51400115 	stw	r5,4(r10)
    91a8:	28001a1e 	bne	r5,zero,9214 <__lshift+0x140>
    91ac:	843fffc4 	addi	r16,r16,-1
    91b0:	14000415 	stw	r16,16(r2)
    91b4:	88000826 	beq	r17,zero,91d8 <__lshift+0x104>
    91b8:	89000117 	ldw	r4,4(r17)
    91bc:	90c01317 	ldw	r3,76(r18)
    91c0:	2109883a 	add	r4,r4,r4
    91c4:	2109883a 	add	r4,r4,r4
    91c8:	1907883a 	add	r3,r3,r4
    91cc:	19000017 	ldw	r4,0(r3)
    91d0:	89000015 	stw	r4,0(r17)
    91d4:	1c400015 	stw	r17,0(r3)
    91d8:	dfc00617 	ldw	ra,24(sp)
    91dc:	dd400517 	ldw	r21,20(sp)
    91e0:	dd000417 	ldw	r20,16(sp)
    91e4:	dcc00317 	ldw	r19,12(sp)
    91e8:	dc800217 	ldw	r18,8(sp)
    91ec:	dc400117 	ldw	r17,4(sp)
    91f0:	dc000017 	ldw	r16,0(sp)
    91f4:	dec00704 	addi	sp,sp,28
    91f8:	f800283a 	ret
    91fc:	21400017 	ldw	r5,0(r4)
    9200:	18c00104 	addi	r3,r3,4
    9204:	21000104 	addi	r4,r4,4
    9208:	197fff15 	stw	r5,-4(r3)
    920c:	223ffb36 	bltu	r4,r8,91fc <__alt_data_end+0xfffc91fc>
    9210:	003fe606 	br	91ac <__alt_data_end+0xfffc91ac>
    9214:	9c000084 	addi	r16,r19,2
    9218:	003fe406 	br	91ac <__alt_data_end+0xfffc91ac>

0000921c <__mcmp>:
    921c:	20800417 	ldw	r2,16(r4)
    9220:	28c00417 	ldw	r3,16(r5)
    9224:	10c5c83a 	sub	r2,r2,r3
    9228:	1000111e 	bne	r2,zero,9270 <__mcmp+0x54>
    922c:	18c7883a 	add	r3,r3,r3
    9230:	18c7883a 	add	r3,r3,r3
    9234:	21000504 	addi	r4,r4,20
    9238:	29400504 	addi	r5,r5,20
    923c:	20c5883a 	add	r2,r4,r3
    9240:	28cb883a 	add	r5,r5,r3
    9244:	00000106 	br	924c <__mcmp+0x30>
    9248:	20800a2e 	bgeu	r4,r2,9274 <__mcmp+0x58>
    924c:	10bfff04 	addi	r2,r2,-4
    9250:	297fff04 	addi	r5,r5,-4
    9254:	11800017 	ldw	r6,0(r2)
    9258:	28c00017 	ldw	r3,0(r5)
    925c:	30fffa26 	beq	r6,r3,9248 <__alt_data_end+0xfffc9248>
    9260:	30c00236 	bltu	r6,r3,926c <__mcmp+0x50>
    9264:	00800044 	movi	r2,1
    9268:	f800283a 	ret
    926c:	00bfffc4 	movi	r2,-1
    9270:	f800283a 	ret
    9274:	0005883a 	mov	r2,zero
    9278:	f800283a 	ret

0000927c <__mdiff>:
    927c:	28c00417 	ldw	r3,16(r5)
    9280:	30800417 	ldw	r2,16(r6)
    9284:	defffa04 	addi	sp,sp,-24
    9288:	dcc00315 	stw	r19,12(sp)
    928c:	dc800215 	stw	r18,8(sp)
    9290:	dfc00515 	stw	ra,20(sp)
    9294:	dd000415 	stw	r20,16(sp)
    9298:	dc400115 	stw	r17,4(sp)
    929c:	dc000015 	stw	r16,0(sp)
    92a0:	1887c83a 	sub	r3,r3,r2
    92a4:	2825883a 	mov	r18,r5
    92a8:	3027883a 	mov	r19,r6
    92ac:	1800141e 	bne	r3,zero,9300 <__mdiff+0x84>
    92b0:	1085883a 	add	r2,r2,r2
    92b4:	1085883a 	add	r2,r2,r2
    92b8:	2a000504 	addi	r8,r5,20
    92bc:	34000504 	addi	r16,r6,20
    92c0:	4087883a 	add	r3,r8,r2
    92c4:	8085883a 	add	r2,r16,r2
    92c8:	00000106 	br	92d0 <__mdiff+0x54>
    92cc:	40c0592e 	bgeu	r8,r3,9434 <__mdiff+0x1b8>
    92d0:	18ffff04 	addi	r3,r3,-4
    92d4:	10bfff04 	addi	r2,r2,-4
    92d8:	19c00017 	ldw	r7,0(r3)
    92dc:	11400017 	ldw	r5,0(r2)
    92e0:	397ffa26 	beq	r7,r5,92cc <__alt_data_end+0xfffc92cc>
    92e4:	3940592e 	bgeu	r7,r5,944c <__mdiff+0x1d0>
    92e8:	9005883a 	mov	r2,r18
    92ec:	4023883a 	mov	r17,r8
    92f0:	9825883a 	mov	r18,r19
    92f4:	05000044 	movi	r20,1
    92f8:	1027883a 	mov	r19,r2
    92fc:	00000406 	br	9310 <__mdiff+0x94>
    9300:	18005616 	blt	r3,zero,945c <__mdiff+0x1e0>
    9304:	34400504 	addi	r17,r6,20
    9308:	2c000504 	addi	r16,r5,20
    930c:	0029883a 	mov	r20,zero
    9310:	91400117 	ldw	r5,4(r18)
    9314:	00089540 	call	8954 <_Balloc>
    9318:	92400417 	ldw	r9,16(r18)
    931c:	9b000417 	ldw	r12,16(r19)
    9320:	12c00504 	addi	r11,r2,20
    9324:	4a51883a 	add	r8,r9,r9
    9328:	6319883a 	add	r12,r12,r12
    932c:	4211883a 	add	r8,r8,r8
    9330:	6319883a 	add	r12,r12,r12
    9334:	15000315 	stw	r20,12(r2)
    9338:	8211883a 	add	r8,r16,r8
    933c:	8b19883a 	add	r12,r17,r12
    9340:	0007883a 	mov	r3,zero
    9344:	81400017 	ldw	r5,0(r16)
    9348:	89c00017 	ldw	r7,0(r17)
    934c:	59800104 	addi	r6,r11,4
    9350:	293fffcc 	andi	r4,r5,65535
    9354:	20c7883a 	add	r3,r4,r3
    9358:	393fffcc 	andi	r4,r7,65535
    935c:	1909c83a 	sub	r4,r3,r4
    9360:	280ad43a 	srli	r5,r5,16
    9364:	380ed43a 	srli	r7,r7,16
    9368:	2007d43a 	srai	r3,r4,16
    936c:	213fffcc 	andi	r4,r4,65535
    9370:	29cbc83a 	sub	r5,r5,r7
    9374:	28c7883a 	add	r3,r5,r3
    9378:	180a943a 	slli	r5,r3,16
    937c:	8c400104 	addi	r17,r17,4
    9380:	84000104 	addi	r16,r16,4
    9384:	2908b03a 	or	r4,r5,r4
    9388:	59000015 	stw	r4,0(r11)
    938c:	1807d43a 	srai	r3,r3,16
    9390:	3015883a 	mov	r10,r6
    9394:	3017883a 	mov	r11,r6
    9398:	8b3fea36 	bltu	r17,r12,9344 <__alt_data_end+0xfffc9344>
    939c:	8200162e 	bgeu	r16,r8,93f8 <__mdiff+0x17c>
    93a0:	8017883a 	mov	r11,r16
    93a4:	59400017 	ldw	r5,0(r11)
    93a8:	31800104 	addi	r6,r6,4
    93ac:	5ac00104 	addi	r11,r11,4
    93b0:	293fffcc 	andi	r4,r5,65535
    93b4:	20c7883a 	add	r3,r4,r3
    93b8:	280ed43a 	srli	r7,r5,16
    93bc:	180bd43a 	srai	r5,r3,16
    93c0:	193fffcc 	andi	r4,r3,65535
    93c4:	3947883a 	add	r3,r7,r5
    93c8:	180a943a 	slli	r5,r3,16
    93cc:	1807d43a 	srai	r3,r3,16
    93d0:	2908b03a 	or	r4,r5,r4
    93d4:	313fff15 	stw	r4,-4(r6)
    93d8:	5a3ff236 	bltu	r11,r8,93a4 <__alt_data_end+0xfffc93a4>
    93dc:	0406303a 	nor	r3,zero,r16
    93e0:	1a07883a 	add	r3,r3,r8
    93e4:	1806d0ba 	srli	r3,r3,2
    93e8:	18c00044 	addi	r3,r3,1
    93ec:	18c7883a 	add	r3,r3,r3
    93f0:	18c7883a 	add	r3,r3,r3
    93f4:	50d5883a 	add	r10,r10,r3
    93f8:	50ffff04 	addi	r3,r10,-4
    93fc:	2000041e 	bne	r4,zero,9410 <__mdiff+0x194>
    9400:	18ffff04 	addi	r3,r3,-4
    9404:	19000017 	ldw	r4,0(r3)
    9408:	4a7fffc4 	addi	r9,r9,-1
    940c:	203ffc26 	beq	r4,zero,9400 <__alt_data_end+0xfffc9400>
    9410:	12400415 	stw	r9,16(r2)
    9414:	dfc00517 	ldw	ra,20(sp)
    9418:	dd000417 	ldw	r20,16(sp)
    941c:	dcc00317 	ldw	r19,12(sp)
    9420:	dc800217 	ldw	r18,8(sp)
    9424:	dc400117 	ldw	r17,4(sp)
    9428:	dc000017 	ldw	r16,0(sp)
    942c:	dec00604 	addi	sp,sp,24
    9430:	f800283a 	ret
    9434:	000b883a 	mov	r5,zero
    9438:	00089540 	call	8954 <_Balloc>
    943c:	00c00044 	movi	r3,1
    9440:	10c00415 	stw	r3,16(r2)
    9444:	10000515 	stw	zero,20(r2)
    9448:	003ff206 	br	9414 <__alt_data_end+0xfffc9414>
    944c:	8023883a 	mov	r17,r16
    9450:	0029883a 	mov	r20,zero
    9454:	4021883a 	mov	r16,r8
    9458:	003fad06 	br	9310 <__alt_data_end+0xfffc9310>
    945c:	9005883a 	mov	r2,r18
    9460:	94400504 	addi	r17,r18,20
    9464:	9c000504 	addi	r16,r19,20
    9468:	9825883a 	mov	r18,r19
    946c:	05000044 	movi	r20,1
    9470:	1027883a 	mov	r19,r2
    9474:	003fa606 	br	9310 <__alt_data_end+0xfffc9310>

00009478 <__ulp>:
    9478:	295ffc2c 	andhi	r5,r5,32752
    947c:	00bf3034 	movhi	r2,64704
    9480:	2887883a 	add	r3,r5,r2
    9484:	00c0020e 	bge	zero,r3,9490 <__ulp+0x18>
    9488:	0005883a 	mov	r2,zero
    948c:	f800283a 	ret
    9490:	00c7c83a 	sub	r3,zero,r3
    9494:	1807d53a 	srai	r3,r3,20
    9498:	008004c4 	movi	r2,19
    949c:	10c00b0e 	bge	r2,r3,94cc <__ulp+0x54>
    94a0:	18bffb04 	addi	r2,r3,-20
    94a4:	01000784 	movi	r4,30
    94a8:	0007883a 	mov	r3,zero
    94ac:	20800516 	blt	r4,r2,94c4 <__ulp+0x4c>
    94b0:	010007c4 	movi	r4,31
    94b4:	2089c83a 	sub	r4,r4,r2
    94b8:	00800044 	movi	r2,1
    94bc:	1104983a 	sll	r2,r2,r4
    94c0:	f800283a 	ret
    94c4:	00800044 	movi	r2,1
    94c8:	f800283a 	ret
    94cc:	01400234 	movhi	r5,8
    94d0:	28c7d83a 	sra	r3,r5,r3
    94d4:	0005883a 	mov	r2,zero
    94d8:	f800283a 	ret

000094dc <__b2d>:
    94dc:	defffa04 	addi	sp,sp,-24
    94e0:	dc000015 	stw	r16,0(sp)
    94e4:	24000417 	ldw	r16,16(r4)
    94e8:	dc400115 	stw	r17,4(sp)
    94ec:	24400504 	addi	r17,r4,20
    94f0:	8421883a 	add	r16,r16,r16
    94f4:	8421883a 	add	r16,r16,r16
    94f8:	8c21883a 	add	r16,r17,r16
    94fc:	dc800215 	stw	r18,8(sp)
    9500:	84bfff17 	ldw	r18,-4(r16)
    9504:	dd000415 	stw	r20,16(sp)
    9508:	dcc00315 	stw	r19,12(sp)
    950c:	9009883a 	mov	r4,r18
    9510:	2829883a 	mov	r20,r5
    9514:	dfc00515 	stw	ra,20(sp)
    9518:	0008c480 	call	8c48 <__hi0bits>
    951c:	00c00804 	movi	r3,32
    9520:	1889c83a 	sub	r4,r3,r2
    9524:	a1000015 	stw	r4,0(r20)
    9528:	01000284 	movi	r4,10
    952c:	84ffff04 	addi	r19,r16,-4
    9530:	20801216 	blt	r4,r2,957c <__b2d+0xa0>
    9534:	018002c4 	movi	r6,11
    9538:	308dc83a 	sub	r6,r6,r2
    953c:	9186d83a 	srl	r3,r18,r6
    9540:	18cffc34 	orhi	r3,r3,16368
    9544:	8cc0212e 	bgeu	r17,r19,95cc <__b2d+0xf0>
    9548:	813ffe17 	ldw	r4,-8(r16)
    954c:	218cd83a 	srl	r6,r4,r6
    9550:	10800544 	addi	r2,r2,21
    9554:	9084983a 	sll	r2,r18,r2
    9558:	1184b03a 	or	r2,r2,r6
    955c:	dfc00517 	ldw	ra,20(sp)
    9560:	dd000417 	ldw	r20,16(sp)
    9564:	dcc00317 	ldw	r19,12(sp)
    9568:	dc800217 	ldw	r18,8(sp)
    956c:	dc400117 	ldw	r17,4(sp)
    9570:	dc000017 	ldw	r16,0(sp)
    9574:	dec00604 	addi	sp,sp,24
    9578:	f800283a 	ret
    957c:	8cc00f2e 	bgeu	r17,r19,95bc <__b2d+0xe0>
    9580:	117ffd44 	addi	r5,r2,-11
    9584:	80bffe17 	ldw	r2,-8(r16)
    9588:	28000e26 	beq	r5,zero,95c4 <__b2d+0xe8>
    958c:	1949c83a 	sub	r4,r3,r5
    9590:	9164983a 	sll	r18,r18,r5
    9594:	1106d83a 	srl	r3,r2,r4
    9598:	81bffe04 	addi	r6,r16,-8
    959c:	948ffc34 	orhi	r18,r18,16368
    95a0:	90c6b03a 	or	r3,r18,r3
    95a4:	89800e2e 	bgeu	r17,r6,95e0 <__b2d+0x104>
    95a8:	81bffd17 	ldw	r6,-12(r16)
    95ac:	1144983a 	sll	r2,r2,r5
    95b0:	310ad83a 	srl	r5,r6,r4
    95b4:	2884b03a 	or	r2,r5,r2
    95b8:	003fe806 	br	955c <__alt_data_end+0xfffc955c>
    95bc:	10bffd44 	addi	r2,r2,-11
    95c0:	1000041e 	bne	r2,zero,95d4 <__b2d+0xf8>
    95c4:	90cffc34 	orhi	r3,r18,16368
    95c8:	003fe406 	br	955c <__alt_data_end+0xfffc955c>
    95cc:	000d883a 	mov	r6,zero
    95d0:	003fdf06 	br	9550 <__alt_data_end+0xfffc9550>
    95d4:	90a4983a 	sll	r18,r18,r2
    95d8:	0005883a 	mov	r2,zero
    95dc:	003ff906 	br	95c4 <__alt_data_end+0xfffc95c4>
    95e0:	1144983a 	sll	r2,r2,r5
    95e4:	003fdd06 	br	955c <__alt_data_end+0xfffc955c>

000095e8 <__d2b>:
    95e8:	defff804 	addi	sp,sp,-32
    95ec:	dc000215 	stw	r16,8(sp)
    95f0:	3021883a 	mov	r16,r6
    95f4:	dc400315 	stw	r17,12(sp)
    95f8:	8022907a 	slli	r17,r16,1
    95fc:	dd000615 	stw	r20,24(sp)
    9600:	2829883a 	mov	r20,r5
    9604:	01400044 	movi	r5,1
    9608:	dcc00515 	stw	r19,20(sp)
    960c:	dc800415 	stw	r18,16(sp)
    9610:	dfc00715 	stw	ra,28(sp)
    9614:	3825883a 	mov	r18,r7
    9618:	8822d57a 	srli	r17,r17,21
    961c:	00089540 	call	8954 <_Balloc>
    9620:	1027883a 	mov	r19,r2
    9624:	00800434 	movhi	r2,16
    9628:	10bfffc4 	addi	r2,r2,-1
    962c:	808c703a 	and	r6,r16,r2
    9630:	88000126 	beq	r17,zero,9638 <__d2b+0x50>
    9634:	31800434 	orhi	r6,r6,16
    9638:	d9800015 	stw	r6,0(sp)
    963c:	a0002426 	beq	r20,zero,96d0 <__d2b+0xe8>
    9640:	d9000104 	addi	r4,sp,4
    9644:	dd000115 	stw	r20,4(sp)
    9648:	0008cb00 	call	8cb0 <__lo0bits>
    964c:	d8c00017 	ldw	r3,0(sp)
    9650:	10002f1e 	bne	r2,zero,9710 <__d2b+0x128>
    9654:	d9000117 	ldw	r4,4(sp)
    9658:	99000515 	stw	r4,20(r19)
    965c:	1821003a 	cmpeq	r16,r3,zero
    9660:	01000084 	movi	r4,2
    9664:	2421c83a 	sub	r16,r4,r16
    9668:	98c00615 	stw	r3,24(r19)
    966c:	9c000415 	stw	r16,16(r19)
    9670:	88001f1e 	bne	r17,zero,96f0 <__d2b+0x108>
    9674:	10bef384 	addi	r2,r2,-1074
    9678:	90800015 	stw	r2,0(r18)
    967c:	00900034 	movhi	r2,16384
    9680:	10bfffc4 	addi	r2,r2,-1
    9684:	8085883a 	add	r2,r16,r2
    9688:	1085883a 	add	r2,r2,r2
    968c:	1085883a 	add	r2,r2,r2
    9690:	9885883a 	add	r2,r19,r2
    9694:	11000517 	ldw	r4,20(r2)
    9698:	8020917a 	slli	r16,r16,5
    969c:	0008c480 	call	8c48 <__hi0bits>
    96a0:	d8c00817 	ldw	r3,32(sp)
    96a4:	8085c83a 	sub	r2,r16,r2
    96a8:	18800015 	stw	r2,0(r3)
    96ac:	9805883a 	mov	r2,r19
    96b0:	dfc00717 	ldw	ra,28(sp)
    96b4:	dd000617 	ldw	r20,24(sp)
    96b8:	dcc00517 	ldw	r19,20(sp)
    96bc:	dc800417 	ldw	r18,16(sp)
    96c0:	dc400317 	ldw	r17,12(sp)
    96c4:	dc000217 	ldw	r16,8(sp)
    96c8:	dec00804 	addi	sp,sp,32
    96cc:	f800283a 	ret
    96d0:	d809883a 	mov	r4,sp
    96d4:	0008cb00 	call	8cb0 <__lo0bits>
    96d8:	d8c00017 	ldw	r3,0(sp)
    96dc:	04000044 	movi	r16,1
    96e0:	9c000415 	stw	r16,16(r19)
    96e4:	98c00515 	stw	r3,20(r19)
    96e8:	10800804 	addi	r2,r2,32
    96ec:	883fe126 	beq	r17,zero,9674 <__alt_data_end+0xfffc9674>
    96f0:	00c00d44 	movi	r3,53
    96f4:	8c7ef344 	addi	r17,r17,-1075
    96f8:	88a3883a 	add	r17,r17,r2
    96fc:	1885c83a 	sub	r2,r3,r2
    9700:	d8c00817 	ldw	r3,32(sp)
    9704:	94400015 	stw	r17,0(r18)
    9708:	18800015 	stw	r2,0(r3)
    970c:	003fe706 	br	96ac <__alt_data_end+0xfffc96ac>
    9710:	01000804 	movi	r4,32
    9714:	2089c83a 	sub	r4,r4,r2
    9718:	1908983a 	sll	r4,r3,r4
    971c:	d9400117 	ldw	r5,4(sp)
    9720:	1886d83a 	srl	r3,r3,r2
    9724:	2148b03a 	or	r4,r4,r5
    9728:	99000515 	stw	r4,20(r19)
    972c:	d8c00015 	stw	r3,0(sp)
    9730:	003fca06 	br	965c <__alt_data_end+0xfffc965c>

00009734 <__ratio>:
    9734:	defff904 	addi	sp,sp,-28
    9738:	dc400315 	stw	r17,12(sp)
    973c:	2823883a 	mov	r17,r5
    9740:	d9400104 	addi	r5,sp,4
    9744:	dfc00615 	stw	ra,24(sp)
    9748:	dcc00515 	stw	r19,20(sp)
    974c:	dc800415 	stw	r18,16(sp)
    9750:	2027883a 	mov	r19,r4
    9754:	dc000215 	stw	r16,8(sp)
    9758:	00094dc0 	call	94dc <__b2d>
    975c:	d80b883a 	mov	r5,sp
    9760:	8809883a 	mov	r4,r17
    9764:	1025883a 	mov	r18,r2
    9768:	1821883a 	mov	r16,r3
    976c:	00094dc0 	call	94dc <__b2d>
    9770:	8a000417 	ldw	r8,16(r17)
    9774:	99000417 	ldw	r4,16(r19)
    9778:	d9400117 	ldw	r5,4(sp)
    977c:	2209c83a 	sub	r4,r4,r8
    9780:	2010917a 	slli	r8,r4,5
    9784:	d9000017 	ldw	r4,0(sp)
    9788:	2909c83a 	sub	r4,r5,r4
    978c:	4109883a 	add	r4,r8,r4
    9790:	01000e0e 	bge	zero,r4,97cc <__ratio+0x98>
    9794:	2008953a 	slli	r4,r4,20
    9798:	2421883a 	add	r16,r4,r16
    979c:	100d883a 	mov	r6,r2
    97a0:	180f883a 	mov	r7,r3
    97a4:	9009883a 	mov	r4,r18
    97a8:	800b883a 	mov	r5,r16
    97ac:	000db500 	call	db50 <__divdf3>
    97b0:	dfc00617 	ldw	ra,24(sp)
    97b4:	dcc00517 	ldw	r19,20(sp)
    97b8:	dc800417 	ldw	r18,16(sp)
    97bc:	dc400317 	ldw	r17,12(sp)
    97c0:	dc000217 	ldw	r16,8(sp)
    97c4:	dec00704 	addi	sp,sp,28
    97c8:	f800283a 	ret
    97cc:	2008953a 	slli	r4,r4,20
    97d0:	1907c83a 	sub	r3,r3,r4
    97d4:	003ff106 	br	979c <__alt_data_end+0xfffc979c>

000097d8 <_mprec_log10>:
    97d8:	defffe04 	addi	sp,sp,-8
    97dc:	dc000015 	stw	r16,0(sp)
    97e0:	dfc00115 	stw	ra,4(sp)
    97e4:	008005c4 	movi	r2,23
    97e8:	2021883a 	mov	r16,r4
    97ec:	11000d0e 	bge	r2,r4,9824 <_mprec_log10+0x4c>
    97f0:	0005883a 	mov	r2,zero
    97f4:	00cffc34 	movhi	r3,16368
    97f8:	843fffc4 	addi	r16,r16,-1
    97fc:	000d883a 	mov	r6,zero
    9800:	01d00934 	movhi	r7,16420
    9804:	1009883a 	mov	r4,r2
    9808:	180b883a 	mov	r5,r3
    980c:	000e6900 	call	e690 <__muldf3>
    9810:	803ff91e 	bne	r16,zero,97f8 <__alt_data_end+0xfffc97f8>
    9814:	dfc00117 	ldw	ra,4(sp)
    9818:	dc000017 	ldw	r16,0(sp)
    981c:	dec00204 	addi	sp,sp,8
    9820:	f800283a 	ret
    9824:	202090fa 	slli	r16,r4,3
    9828:	00800074 	movhi	r2,1
    982c:	1080d404 	addi	r2,r2,848
    9830:	1421883a 	add	r16,r2,r16
    9834:	80800017 	ldw	r2,0(r16)
    9838:	80c00117 	ldw	r3,4(r16)
    983c:	dfc00117 	ldw	ra,4(sp)
    9840:	dc000017 	ldw	r16,0(sp)
    9844:	dec00204 	addi	sp,sp,8
    9848:	f800283a 	ret

0000984c <__copybits>:
    984c:	297fffc4 	addi	r5,r5,-1
    9850:	280fd17a 	srai	r7,r5,5
    9854:	30c00417 	ldw	r3,16(r6)
    9858:	30800504 	addi	r2,r6,20
    985c:	39c00044 	addi	r7,r7,1
    9860:	18c7883a 	add	r3,r3,r3
    9864:	39cf883a 	add	r7,r7,r7
    9868:	18c7883a 	add	r3,r3,r3
    986c:	39cf883a 	add	r7,r7,r7
    9870:	10c7883a 	add	r3,r2,r3
    9874:	21cf883a 	add	r7,r4,r7
    9878:	10c00d2e 	bgeu	r2,r3,98b0 <__copybits+0x64>
    987c:	200b883a 	mov	r5,r4
    9880:	12000017 	ldw	r8,0(r2)
    9884:	29400104 	addi	r5,r5,4
    9888:	10800104 	addi	r2,r2,4
    988c:	2a3fff15 	stw	r8,-4(r5)
    9890:	10fffb36 	bltu	r2,r3,9880 <__alt_data_end+0xfffc9880>
    9894:	1985c83a 	sub	r2,r3,r6
    9898:	10bffac4 	addi	r2,r2,-21
    989c:	1004d0ba 	srli	r2,r2,2
    98a0:	10800044 	addi	r2,r2,1
    98a4:	1085883a 	add	r2,r2,r2
    98a8:	1085883a 	add	r2,r2,r2
    98ac:	2089883a 	add	r4,r4,r2
    98b0:	21c0032e 	bgeu	r4,r7,98c0 <__copybits+0x74>
    98b4:	20000015 	stw	zero,0(r4)
    98b8:	21000104 	addi	r4,r4,4
    98bc:	21fffd36 	bltu	r4,r7,98b4 <__alt_data_end+0xfffc98b4>
    98c0:	f800283a 	ret

000098c4 <__any_on>:
    98c4:	20c00417 	ldw	r3,16(r4)
    98c8:	2805d17a 	srai	r2,r5,5
    98cc:	21000504 	addi	r4,r4,20
    98d0:	18800d0e 	bge	r3,r2,9908 <__any_on+0x44>
    98d4:	18c7883a 	add	r3,r3,r3
    98d8:	18c7883a 	add	r3,r3,r3
    98dc:	20c7883a 	add	r3,r4,r3
    98e0:	20c0192e 	bgeu	r4,r3,9948 <__any_on+0x84>
    98e4:	18bfff17 	ldw	r2,-4(r3)
    98e8:	18ffff04 	addi	r3,r3,-4
    98ec:	1000041e 	bne	r2,zero,9900 <__any_on+0x3c>
    98f0:	20c0142e 	bgeu	r4,r3,9944 <__any_on+0x80>
    98f4:	18ffff04 	addi	r3,r3,-4
    98f8:	19400017 	ldw	r5,0(r3)
    98fc:	283ffc26 	beq	r5,zero,98f0 <__alt_data_end+0xfffc98f0>
    9900:	00800044 	movi	r2,1
    9904:	f800283a 	ret
    9908:	10c00a0e 	bge	r2,r3,9934 <__any_on+0x70>
    990c:	1085883a 	add	r2,r2,r2
    9910:	1085883a 	add	r2,r2,r2
    9914:	294007cc 	andi	r5,r5,31
    9918:	2087883a 	add	r3,r4,r2
    991c:	283ff026 	beq	r5,zero,98e0 <__alt_data_end+0xfffc98e0>
    9920:	19800017 	ldw	r6,0(r3)
    9924:	3144d83a 	srl	r2,r6,r5
    9928:	114a983a 	sll	r5,r2,r5
    992c:	317ff41e 	bne	r6,r5,9900 <__alt_data_end+0xfffc9900>
    9930:	003feb06 	br	98e0 <__alt_data_end+0xfffc98e0>
    9934:	1085883a 	add	r2,r2,r2
    9938:	1085883a 	add	r2,r2,r2
    993c:	2087883a 	add	r3,r4,r2
    9940:	003fe706 	br	98e0 <__alt_data_end+0xfffc98e0>
    9944:	f800283a 	ret
    9948:	0005883a 	mov	r2,zero
    994c:	f800283a 	ret

00009950 <__fpclassifyd>:
    9950:	00a00034 	movhi	r2,32768
    9954:	10bfffc4 	addi	r2,r2,-1
    9958:	2884703a 	and	r2,r5,r2
    995c:	10000726 	beq	r2,zero,997c <__fpclassifyd+0x2c>
    9960:	00fffc34 	movhi	r3,65520
    9964:	019ff834 	movhi	r6,32736
    9968:	28c7883a 	add	r3,r5,r3
    996c:	31bfffc4 	addi	r6,r6,-1
    9970:	30c00536 	bltu	r6,r3,9988 <__fpclassifyd+0x38>
    9974:	00800104 	movi	r2,4
    9978:	f800283a 	ret
    997c:	2000021e 	bne	r4,zero,9988 <__fpclassifyd+0x38>
    9980:	00800084 	movi	r2,2
    9984:	f800283a 	ret
    9988:	00dffc34 	movhi	r3,32752
    998c:	019ff834 	movhi	r6,32736
    9990:	28cb883a 	add	r5,r5,r3
    9994:	31bfffc4 	addi	r6,r6,-1
    9998:	317ff62e 	bgeu	r6,r5,9974 <__alt_data_end+0xfffc9974>
    999c:	01400434 	movhi	r5,16
    99a0:	297fffc4 	addi	r5,r5,-1
    99a4:	28800236 	bltu	r5,r2,99b0 <__fpclassifyd+0x60>
    99a8:	008000c4 	movi	r2,3
    99ac:	f800283a 	ret
    99b0:	10c00226 	beq	r2,r3,99bc <__fpclassifyd+0x6c>
    99b4:	0005883a 	mov	r2,zero
    99b8:	f800283a 	ret
    99bc:	2005003a 	cmpeq	r2,r4,zero
    99c0:	f800283a 	ret

000099c4 <_sbrk_r>:
    99c4:	defffd04 	addi	sp,sp,-12
    99c8:	dc000015 	stw	r16,0(sp)
    99cc:	04000074 	movhi	r16,1
    99d0:	dc400115 	stw	r17,4(sp)
    99d4:	840ecf04 	addi	r16,r16,15164
    99d8:	2023883a 	mov	r17,r4
    99dc:	2809883a 	mov	r4,r5
    99e0:	dfc00215 	stw	ra,8(sp)
    99e4:	80000015 	stw	zero,0(r16)
    99e8:	000fd9c0 	call	fd9c <sbrk>
    99ec:	00ffffc4 	movi	r3,-1
    99f0:	10c00526 	beq	r2,r3,9a08 <_sbrk_r+0x44>
    99f4:	dfc00217 	ldw	ra,8(sp)
    99f8:	dc400117 	ldw	r17,4(sp)
    99fc:	dc000017 	ldw	r16,0(sp)
    9a00:	dec00304 	addi	sp,sp,12
    9a04:	f800283a 	ret
    9a08:	80c00017 	ldw	r3,0(r16)
    9a0c:	183ff926 	beq	r3,zero,99f4 <__alt_data_end+0xfffc99f4>
    9a10:	88c00015 	stw	r3,0(r17)
    9a14:	003ff706 	br	99f4 <__alt_data_end+0xfffc99f4>

00009a18 <__sread>:
    9a18:	defffe04 	addi	sp,sp,-8
    9a1c:	dc000015 	stw	r16,0(sp)
    9a20:	2821883a 	mov	r16,r5
    9a24:	2940038f 	ldh	r5,14(r5)
    9a28:	dfc00115 	stw	ra,4(sp)
    9a2c:	000be240 	call	be24 <_read_r>
    9a30:	10000716 	blt	r2,zero,9a50 <__sread+0x38>
    9a34:	80c01417 	ldw	r3,80(r16)
    9a38:	1887883a 	add	r3,r3,r2
    9a3c:	80c01415 	stw	r3,80(r16)
    9a40:	dfc00117 	ldw	ra,4(sp)
    9a44:	dc000017 	ldw	r16,0(sp)
    9a48:	dec00204 	addi	sp,sp,8
    9a4c:	f800283a 	ret
    9a50:	80c0030b 	ldhu	r3,12(r16)
    9a54:	18fbffcc 	andi	r3,r3,61439
    9a58:	80c0030d 	sth	r3,12(r16)
    9a5c:	dfc00117 	ldw	ra,4(sp)
    9a60:	dc000017 	ldw	r16,0(sp)
    9a64:	dec00204 	addi	sp,sp,8
    9a68:	f800283a 	ret

00009a6c <__seofread>:
    9a6c:	0005883a 	mov	r2,zero
    9a70:	f800283a 	ret

00009a74 <__swrite>:
    9a74:	2880030b 	ldhu	r2,12(r5)
    9a78:	defffb04 	addi	sp,sp,-20
    9a7c:	dcc00315 	stw	r19,12(sp)
    9a80:	dc800215 	stw	r18,8(sp)
    9a84:	dc400115 	stw	r17,4(sp)
    9a88:	dc000015 	stw	r16,0(sp)
    9a8c:	dfc00415 	stw	ra,16(sp)
    9a90:	10c0400c 	andi	r3,r2,256
    9a94:	2821883a 	mov	r16,r5
    9a98:	2023883a 	mov	r17,r4
    9a9c:	3025883a 	mov	r18,r6
    9aa0:	3827883a 	mov	r19,r7
    9aa4:	18000526 	beq	r3,zero,9abc <__swrite+0x48>
    9aa8:	2940038f 	ldh	r5,14(r5)
    9aac:	01c00084 	movi	r7,2
    9ab0:	000d883a 	mov	r6,zero
    9ab4:	000bc680 	call	bc68 <_lseek_r>
    9ab8:	8080030b 	ldhu	r2,12(r16)
    9abc:	8140038f 	ldh	r5,14(r16)
    9ac0:	10bbffcc 	andi	r2,r2,61439
    9ac4:	980f883a 	mov	r7,r19
    9ac8:	900d883a 	mov	r6,r18
    9acc:	8809883a 	mov	r4,r17
    9ad0:	8080030d 	sth	r2,12(r16)
    9ad4:	dfc00417 	ldw	ra,16(sp)
    9ad8:	dcc00317 	ldw	r19,12(sp)
    9adc:	dc800217 	ldw	r18,8(sp)
    9ae0:	dc400117 	ldw	r17,4(sp)
    9ae4:	dc000017 	ldw	r16,0(sp)
    9ae8:	dec00504 	addi	sp,sp,20
    9aec:	000b2781 	jmpi	b278 <_write_r>

00009af0 <__sseek>:
    9af0:	defffe04 	addi	sp,sp,-8
    9af4:	dc000015 	stw	r16,0(sp)
    9af8:	2821883a 	mov	r16,r5
    9afc:	2940038f 	ldh	r5,14(r5)
    9b00:	dfc00115 	stw	ra,4(sp)
    9b04:	000bc680 	call	bc68 <_lseek_r>
    9b08:	00ffffc4 	movi	r3,-1
    9b0c:	10c00826 	beq	r2,r3,9b30 <__sseek+0x40>
    9b10:	80c0030b 	ldhu	r3,12(r16)
    9b14:	80801415 	stw	r2,80(r16)
    9b18:	18c40014 	ori	r3,r3,4096
    9b1c:	80c0030d 	sth	r3,12(r16)
    9b20:	dfc00117 	ldw	ra,4(sp)
    9b24:	dc000017 	ldw	r16,0(sp)
    9b28:	dec00204 	addi	sp,sp,8
    9b2c:	f800283a 	ret
    9b30:	80c0030b 	ldhu	r3,12(r16)
    9b34:	18fbffcc 	andi	r3,r3,61439
    9b38:	80c0030d 	sth	r3,12(r16)
    9b3c:	dfc00117 	ldw	ra,4(sp)
    9b40:	dc000017 	ldw	r16,0(sp)
    9b44:	dec00204 	addi	sp,sp,8
    9b48:	f800283a 	ret

00009b4c <__sclose>:
    9b4c:	2940038f 	ldh	r5,14(r5)
    9b50:	000b2d81 	jmpi	b2d8 <_close_r>

00009b54 <strcmp>:
    9b54:	2144b03a 	or	r2,r4,r5
    9b58:	108000cc 	andi	r2,r2,3
    9b5c:	1000171e 	bne	r2,zero,9bbc <strcmp+0x68>
    9b60:	20800017 	ldw	r2,0(r4)
    9b64:	28c00017 	ldw	r3,0(r5)
    9b68:	10c0141e 	bne	r2,r3,9bbc <strcmp+0x68>
    9b6c:	027fbff4 	movhi	r9,65279
    9b70:	4a7fbfc4 	addi	r9,r9,-257
    9b74:	0086303a 	nor	r3,zero,r2
    9b78:	02202074 	movhi	r8,32897
    9b7c:	1245883a 	add	r2,r2,r9
    9b80:	42202004 	addi	r8,r8,-32640
    9b84:	10c4703a 	and	r2,r2,r3
    9b88:	1204703a 	and	r2,r2,r8
    9b8c:	10000226 	beq	r2,zero,9b98 <strcmp+0x44>
    9b90:	00002306 	br	9c20 <strcmp+0xcc>
    9b94:	1000221e 	bne	r2,zero,9c20 <strcmp+0xcc>
    9b98:	21000104 	addi	r4,r4,4
    9b9c:	20c00017 	ldw	r3,0(r4)
    9ba0:	29400104 	addi	r5,r5,4
    9ba4:	29800017 	ldw	r6,0(r5)
    9ba8:	1a4f883a 	add	r7,r3,r9
    9bac:	00c4303a 	nor	r2,zero,r3
    9bb0:	3884703a 	and	r2,r7,r2
    9bb4:	1204703a 	and	r2,r2,r8
    9bb8:	19bff626 	beq	r3,r6,9b94 <__alt_data_end+0xfffc9b94>
    9bbc:	20800003 	ldbu	r2,0(r4)
    9bc0:	10c03fcc 	andi	r3,r2,255
    9bc4:	18c0201c 	xori	r3,r3,128
    9bc8:	18ffe004 	addi	r3,r3,-128
    9bcc:	18000c26 	beq	r3,zero,9c00 <strcmp+0xac>
    9bd0:	29800007 	ldb	r6,0(r5)
    9bd4:	19800326 	beq	r3,r6,9be4 <strcmp+0x90>
    9bd8:	00001306 	br	9c28 <strcmp+0xd4>
    9bdc:	29800007 	ldb	r6,0(r5)
    9be0:	11800b1e 	bne	r2,r6,9c10 <strcmp+0xbc>
    9be4:	21000044 	addi	r4,r4,1
    9be8:	20c00003 	ldbu	r3,0(r4)
    9bec:	29400044 	addi	r5,r5,1
    9bf0:	18803fcc 	andi	r2,r3,255
    9bf4:	1080201c 	xori	r2,r2,128
    9bf8:	10bfe004 	addi	r2,r2,-128
    9bfc:	103ff71e 	bne	r2,zero,9bdc <__alt_data_end+0xfffc9bdc>
    9c00:	0007883a 	mov	r3,zero
    9c04:	28800003 	ldbu	r2,0(r5)
    9c08:	1885c83a 	sub	r2,r3,r2
    9c0c:	f800283a 	ret
    9c10:	28800003 	ldbu	r2,0(r5)
    9c14:	18c03fcc 	andi	r3,r3,255
    9c18:	1885c83a 	sub	r2,r3,r2
    9c1c:	f800283a 	ret
    9c20:	0005883a 	mov	r2,zero
    9c24:	f800283a 	ret
    9c28:	10c03fcc 	andi	r3,r2,255
    9c2c:	003ff506 	br	9c04 <__alt_data_end+0xfffc9c04>

00009c30 <__sprint_r.part.0>:
    9c30:	28801917 	ldw	r2,100(r5)
    9c34:	defff604 	addi	sp,sp,-40
    9c38:	dd400515 	stw	r21,20(sp)
    9c3c:	dfc00915 	stw	ra,36(sp)
    9c40:	df000815 	stw	fp,32(sp)
    9c44:	ddc00715 	stw	r23,28(sp)
    9c48:	dd800615 	stw	r22,24(sp)
    9c4c:	dd000415 	stw	r20,16(sp)
    9c50:	dcc00315 	stw	r19,12(sp)
    9c54:	dc800215 	stw	r18,8(sp)
    9c58:	dc400115 	stw	r17,4(sp)
    9c5c:	dc000015 	stw	r16,0(sp)
    9c60:	1088000c 	andi	r2,r2,8192
    9c64:	302b883a 	mov	r21,r6
    9c68:	10002e26 	beq	r2,zero,9d24 <__sprint_r.part.0+0xf4>
    9c6c:	30800217 	ldw	r2,8(r6)
    9c70:	35800017 	ldw	r22,0(r6)
    9c74:	10002926 	beq	r2,zero,9d1c <__sprint_r.part.0+0xec>
    9c78:	2827883a 	mov	r19,r5
    9c7c:	2029883a 	mov	r20,r4
    9c80:	b5c00104 	addi	r23,r22,4
    9c84:	04bfffc4 	movi	r18,-1
    9c88:	bc400017 	ldw	r17,0(r23)
    9c8c:	b4000017 	ldw	r16,0(r22)
    9c90:	0039883a 	mov	fp,zero
    9c94:	8822d0ba 	srli	r17,r17,2
    9c98:	8800031e 	bne	r17,zero,9ca8 <__sprint_r.part.0+0x78>
    9c9c:	00001806 	br	9d00 <__sprint_r.part.0+0xd0>
    9ca0:	84000104 	addi	r16,r16,4
    9ca4:	8f001526 	beq	r17,fp,9cfc <__sprint_r.part.0+0xcc>
    9ca8:	81400017 	ldw	r5,0(r16)
    9cac:	980d883a 	mov	r6,r19
    9cb0:	a009883a 	mov	r4,r20
    9cb4:	000b6580 	call	b658 <_fputwc_r>
    9cb8:	e7000044 	addi	fp,fp,1
    9cbc:	14bff81e 	bne	r2,r18,9ca0 <__alt_data_end+0xfffc9ca0>
    9cc0:	9005883a 	mov	r2,r18
    9cc4:	a8000215 	stw	zero,8(r21)
    9cc8:	a8000115 	stw	zero,4(r21)
    9ccc:	dfc00917 	ldw	ra,36(sp)
    9cd0:	df000817 	ldw	fp,32(sp)
    9cd4:	ddc00717 	ldw	r23,28(sp)
    9cd8:	dd800617 	ldw	r22,24(sp)
    9cdc:	dd400517 	ldw	r21,20(sp)
    9ce0:	dd000417 	ldw	r20,16(sp)
    9ce4:	dcc00317 	ldw	r19,12(sp)
    9ce8:	dc800217 	ldw	r18,8(sp)
    9cec:	dc400117 	ldw	r17,4(sp)
    9cf0:	dc000017 	ldw	r16,0(sp)
    9cf4:	dec00a04 	addi	sp,sp,40
    9cf8:	f800283a 	ret
    9cfc:	a8800217 	ldw	r2,8(r21)
    9d00:	8c63883a 	add	r17,r17,r17
    9d04:	8c63883a 	add	r17,r17,r17
    9d08:	1445c83a 	sub	r2,r2,r17
    9d0c:	a8800215 	stw	r2,8(r21)
    9d10:	b5800204 	addi	r22,r22,8
    9d14:	bdc00204 	addi	r23,r23,8
    9d18:	103fdb1e 	bne	r2,zero,9c88 <__alt_data_end+0xfffc9c88>
    9d1c:	0005883a 	mov	r2,zero
    9d20:	003fe806 	br	9cc4 <__alt_data_end+0xfffc9cc4>
    9d24:	000b7580 	call	b758 <__sfvwrite_r>
    9d28:	003fe606 	br	9cc4 <__alt_data_end+0xfffc9cc4>

00009d2c <__sprint_r>:
    9d2c:	30c00217 	ldw	r3,8(r6)
    9d30:	18000126 	beq	r3,zero,9d38 <__sprint_r+0xc>
    9d34:	0009c301 	jmpi	9c30 <__sprint_r.part.0>
    9d38:	30000115 	stw	zero,4(r6)
    9d3c:	0005883a 	mov	r2,zero
    9d40:	f800283a 	ret

00009d44 <___vfiprintf_internal_r>:
    9d44:	deffc904 	addi	sp,sp,-220
    9d48:	df003515 	stw	fp,212(sp)
    9d4c:	dd003115 	stw	r20,196(sp)
    9d50:	dfc03615 	stw	ra,216(sp)
    9d54:	ddc03415 	stw	r23,208(sp)
    9d58:	dd803315 	stw	r22,204(sp)
    9d5c:	dd403215 	stw	r21,200(sp)
    9d60:	dcc03015 	stw	r19,192(sp)
    9d64:	dc802f15 	stw	r18,188(sp)
    9d68:	dc402e15 	stw	r17,184(sp)
    9d6c:	dc002d15 	stw	r16,180(sp)
    9d70:	d9002015 	stw	r4,128(sp)
    9d74:	d9c02215 	stw	r7,136(sp)
    9d78:	2829883a 	mov	r20,r5
    9d7c:	3039883a 	mov	fp,r6
    9d80:	20000226 	beq	r4,zero,9d8c <___vfiprintf_internal_r+0x48>
    9d84:	20800e17 	ldw	r2,56(r4)
    9d88:	1000cf26 	beq	r2,zero,a0c8 <___vfiprintf_internal_r+0x384>
    9d8c:	a080030b 	ldhu	r2,12(r20)
    9d90:	10c8000c 	andi	r3,r2,8192
    9d94:	1800061e 	bne	r3,zero,9db0 <___vfiprintf_internal_r+0x6c>
    9d98:	a1001917 	ldw	r4,100(r20)
    9d9c:	00f7ffc4 	movi	r3,-8193
    9da0:	10880014 	ori	r2,r2,8192
    9da4:	20c6703a 	and	r3,r4,r3
    9da8:	a080030d 	sth	r2,12(r20)
    9dac:	a0c01915 	stw	r3,100(r20)
    9db0:	10c0020c 	andi	r3,r2,8
    9db4:	1800a926 	beq	r3,zero,a05c <___vfiprintf_internal_r+0x318>
    9db8:	a0c00417 	ldw	r3,16(r20)
    9dbc:	1800a726 	beq	r3,zero,a05c <___vfiprintf_internal_r+0x318>
    9dc0:	1080068c 	andi	r2,r2,26
    9dc4:	00c00284 	movi	r3,10
    9dc8:	10c0ac26 	beq	r2,r3,a07c <___vfiprintf_internal_r+0x338>
    9dcc:	da801a04 	addi	r10,sp,104
    9dd0:	da801e15 	stw	r10,120(sp)
    9dd4:	d8801e17 	ldw	r2,120(sp)
    9dd8:	da8019c4 	addi	r10,sp,103
    9ddc:	05800074 	movhi	r22,1
    9de0:	05c00074 	movhi	r23,1
    9de4:	da801f15 	stw	r10,124(sp)
    9de8:	1295c83a 	sub	r10,r2,r10
    9dec:	b5810a04 	addi	r22,r22,1064
    9df0:	bdc10604 	addi	r23,r23,1048
    9df4:	dec01a15 	stw	sp,104(sp)
    9df8:	d8001c15 	stw	zero,112(sp)
    9dfc:	d8001b15 	stw	zero,108(sp)
    9e00:	d8002615 	stw	zero,152(sp)
    9e04:	d8002315 	stw	zero,140(sp)
    9e08:	da802715 	stw	r10,156(sp)
    9e0c:	d811883a 	mov	r8,sp
    9e10:	dd002115 	stw	r20,132(sp)
    9e14:	e021883a 	mov	r16,fp
    9e18:	80800007 	ldb	r2,0(r16)
    9e1c:	1003ea26 	beq	r2,zero,adc8 <___vfiprintf_internal_r+0x1084>
    9e20:	00c00944 	movi	r3,37
    9e24:	8025883a 	mov	r18,r16
    9e28:	10c0021e 	bne	r2,r3,9e34 <___vfiprintf_internal_r+0xf0>
    9e2c:	00001606 	br	9e88 <___vfiprintf_internal_r+0x144>
    9e30:	10c00326 	beq	r2,r3,9e40 <___vfiprintf_internal_r+0xfc>
    9e34:	94800044 	addi	r18,r18,1
    9e38:	90800007 	ldb	r2,0(r18)
    9e3c:	103ffc1e 	bne	r2,zero,9e30 <__alt_data_end+0xfffc9e30>
    9e40:	9423c83a 	sub	r17,r18,r16
    9e44:	88001026 	beq	r17,zero,9e88 <___vfiprintf_internal_r+0x144>
    9e48:	d8c01c17 	ldw	r3,112(sp)
    9e4c:	d8801b17 	ldw	r2,108(sp)
    9e50:	44000015 	stw	r16,0(r8)
    9e54:	88c7883a 	add	r3,r17,r3
    9e58:	10800044 	addi	r2,r2,1
    9e5c:	44400115 	stw	r17,4(r8)
    9e60:	d8c01c15 	stw	r3,112(sp)
    9e64:	d8801b15 	stw	r2,108(sp)
    9e68:	010001c4 	movi	r4,7
    9e6c:	2080760e 	bge	r4,r2,a048 <___vfiprintf_internal_r+0x304>
    9e70:	1803821e 	bne	r3,zero,ac7c <___vfiprintf_internal_r+0xf38>
    9e74:	da802317 	ldw	r10,140(sp)
    9e78:	d8001b15 	stw	zero,108(sp)
    9e7c:	d811883a 	mov	r8,sp
    9e80:	5455883a 	add	r10,r10,r17
    9e84:	da802315 	stw	r10,140(sp)
    9e88:	90800007 	ldb	r2,0(r18)
    9e8c:	10044626 	beq	r2,zero,afa8 <___vfiprintf_internal_r+0x1264>
    9e90:	90c00047 	ldb	r3,1(r18)
    9e94:	94000044 	addi	r16,r18,1
    9e98:	d8001d85 	stb	zero,118(sp)
    9e9c:	0009883a 	mov	r4,zero
    9ea0:	000f883a 	mov	r7,zero
    9ea4:	027fffc4 	movi	r9,-1
    9ea8:	0023883a 	mov	r17,zero
    9eac:	0029883a 	mov	r20,zero
    9eb0:	01401604 	movi	r5,88
    9eb4:	01800244 	movi	r6,9
    9eb8:	03400a84 	movi	r13,42
    9ebc:	03001b04 	movi	r12,108
    9ec0:	84000044 	addi	r16,r16,1
    9ec4:	18bff804 	addi	r2,r3,-32
    9ec8:	28827336 	bltu	r5,r2,a898 <___vfiprintf_internal_r+0xb54>
    9ecc:	100490ba 	slli	r2,r2,2
    9ed0:	02800074 	movhi	r10,1
    9ed4:	52a7b904 	addi	r10,r10,-24860
    9ed8:	1285883a 	add	r2,r2,r10
    9edc:	10800017 	ldw	r2,0(r2)
    9ee0:	1000683a 	jmp	r2
    9ee4:	0000a5cc 	andi	zero,zero,663
    9ee8:	0000a898 	cmpnei	zero,zero,674
    9eec:	0000a898 	cmpnei	zero,zero,674
    9ef0:	0000a5ec 	andhi	zero,zero,663
    9ef4:	0000a898 	cmpnei	zero,zero,674
    9ef8:	0000a898 	cmpnei	zero,zero,674
    9efc:	0000a898 	cmpnei	zero,zero,674
    9f00:	0000a898 	cmpnei	zero,zero,674
    9f04:	0000a898 	cmpnei	zero,zero,674
    9f08:	0000a898 	cmpnei	zero,zero,674
    9f0c:	0000a7d4 	movui	zero,671
    9f10:	0000a7f0 	cmpltui	zero,zero,671
    9f14:	0000a898 	cmpnei	zero,zero,674
    9f18:	0000a0d8 	cmpnei	zero,zero,643
    9f1c:	0000a800 	call	a80 <alt_printf+0x9c>
    9f20:	0000a898 	cmpnei	zero,zero,674
    9f24:	0000a5f8 	rdprs	zero,zero,663
    9f28:	0000a604 	movi	zero,664
    9f2c:	0000a604 	movi	zero,664
    9f30:	0000a604 	movi	zero,664
    9f34:	0000a604 	movi	zero,664
    9f38:	0000a604 	movi	zero,664
    9f3c:	0000a604 	movi	zero,664
    9f40:	0000a604 	movi	zero,664
    9f44:	0000a604 	movi	zero,664
    9f48:	0000a604 	movi	zero,664
    9f4c:	0000a898 	cmpnei	zero,zero,674
    9f50:	0000a898 	cmpnei	zero,zero,674
    9f54:	0000a898 	cmpnei	zero,zero,674
    9f58:	0000a898 	cmpnei	zero,zero,674
    9f5c:	0000a898 	cmpnei	zero,zero,674
    9f60:	0000a898 	cmpnei	zero,zero,674
    9f64:	0000a898 	cmpnei	zero,zero,674
    9f68:	0000a898 	cmpnei	zero,zero,674
    9f6c:	0000a898 	cmpnei	zero,zero,674
    9f70:	0000a898 	cmpnei	zero,zero,674
    9f74:	0000a630 	cmpltui	zero,zero,664
    9f78:	0000a898 	cmpnei	zero,zero,674
    9f7c:	0000a898 	cmpnei	zero,zero,674
    9f80:	0000a898 	cmpnei	zero,zero,674
    9f84:	0000a898 	cmpnei	zero,zero,674
    9f88:	0000a898 	cmpnei	zero,zero,674
    9f8c:	0000a898 	cmpnei	zero,zero,674
    9f90:	0000a898 	cmpnei	zero,zero,674
    9f94:	0000a898 	cmpnei	zero,zero,674
    9f98:	0000a898 	cmpnei	zero,zero,674
    9f9c:	0000a898 	cmpnei	zero,zero,674
    9fa0:	0000a668 	cmpgeui	zero,zero,665
    9fa4:	0000a898 	cmpnei	zero,zero,674
    9fa8:	0000a898 	cmpnei	zero,zero,674
    9fac:	0000a898 	cmpnei	zero,zero,674
    9fb0:	0000a898 	cmpnei	zero,zero,674
    9fb4:	0000a898 	cmpnei	zero,zero,674
    9fb8:	0000a6c0 	call	a6c <alt_printf+0x88>
    9fbc:	0000a898 	cmpnei	zero,zero,674
    9fc0:	0000a898 	cmpnei	zero,zero,674
    9fc4:	0000a730 	cmpltui	zero,zero,668
    9fc8:	0000a898 	cmpnei	zero,zero,674
    9fcc:	0000a898 	cmpnei	zero,zero,674
    9fd0:	0000a898 	cmpnei	zero,zero,674
    9fd4:	0000a898 	cmpnei	zero,zero,674
    9fd8:	0000a898 	cmpnei	zero,zero,674
    9fdc:	0000a898 	cmpnei	zero,zero,674
    9fe0:	0000a898 	cmpnei	zero,zero,674
    9fe4:	0000a898 	cmpnei	zero,zero,674
    9fe8:	0000a898 	cmpnei	zero,zero,674
    9fec:	0000a898 	cmpnei	zero,zero,674
    9ff0:	0000a4dc 	xori	zero,zero,659
    9ff4:	0000a508 	cmpgei	zero,zero,660
    9ff8:	0000a898 	cmpnei	zero,zero,674
    9ffc:	0000a898 	cmpnei	zero,zero,674
    a000:	0000a898 	cmpnei	zero,zero,674
    a004:	0000a840 	call	a84 <alt_printf+0xa0>
    a008:	0000a508 	cmpgei	zero,zero,660
    a00c:	0000a898 	cmpnei	zero,zero,674
    a010:	0000a898 	cmpnei	zero,zero,674
    a014:	0000a39c 	xori	zero,zero,654
    a018:	0000a898 	cmpnei	zero,zero,674
    a01c:	0000a3ac 	andhi	zero,zero,654
    a020:	0000a3e8 	cmpgeui	zero,zero,655
    a024:	0000a0e4 	muli	zero,zero,643
    a028:	0000a390 	cmplti	zero,zero,654
    a02c:	0000a898 	cmpnei	zero,zero,674
    a030:	0000a76c 	andhi	zero,zero,669
    a034:	0000a898 	cmpnei	zero,zero,674
    a038:	0000a7c4 	movi	zero,671
    a03c:	0000a898 	cmpnei	zero,zero,674
    a040:	0000a898 	cmpnei	zero,zero,674
    a044:	0000a488 	cmpgei	zero,zero,658
    a048:	42000204 	addi	r8,r8,8
    a04c:	da802317 	ldw	r10,140(sp)
    a050:	5455883a 	add	r10,r10,r17
    a054:	da802315 	stw	r10,140(sp)
    a058:	003f8b06 	br	9e88 <__alt_data_end+0xfffc9e88>
    a05c:	d9002017 	ldw	r4,128(sp)
    a060:	a00b883a 	mov	r5,r20
    a064:	000542c0 	call	542c <__swsetup_r>
    a068:	1003b11e 	bne	r2,zero,af30 <___vfiprintf_internal_r+0x11ec>
    a06c:	a080030b 	ldhu	r2,12(r20)
    a070:	00c00284 	movi	r3,10
    a074:	1080068c 	andi	r2,r2,26
    a078:	10ff541e 	bne	r2,r3,9dcc <__alt_data_end+0xfffc9dcc>
    a07c:	a080038f 	ldh	r2,14(r20)
    a080:	103f5216 	blt	r2,zero,9dcc <__alt_data_end+0xfffc9dcc>
    a084:	d9c02217 	ldw	r7,136(sp)
    a088:	d9002017 	ldw	r4,128(sp)
    a08c:	e00d883a 	mov	r6,fp
    a090:	a00b883a 	mov	r5,r20
    a094:	000b1bc0 	call	b1bc <__sbprintf>
    a098:	dfc03617 	ldw	ra,216(sp)
    a09c:	df003517 	ldw	fp,212(sp)
    a0a0:	ddc03417 	ldw	r23,208(sp)
    a0a4:	dd803317 	ldw	r22,204(sp)
    a0a8:	dd403217 	ldw	r21,200(sp)
    a0ac:	dd003117 	ldw	r20,196(sp)
    a0b0:	dcc03017 	ldw	r19,192(sp)
    a0b4:	dc802f17 	ldw	r18,188(sp)
    a0b8:	dc402e17 	ldw	r17,184(sp)
    a0bc:	dc002d17 	ldw	r16,180(sp)
    a0c0:	dec03704 	addi	sp,sp,220
    a0c4:	f800283a 	ret
    a0c8:	00076980 	call	7698 <__sinit>
    a0cc:	003f2f06 	br	9d8c <__alt_data_end+0xfffc9d8c>
    a0d0:	0463c83a 	sub	r17,zero,r17
    a0d4:	d8802215 	stw	r2,136(sp)
    a0d8:	a5000114 	ori	r20,r20,4
    a0dc:	80c00007 	ldb	r3,0(r16)
    a0e0:	003f7706 	br	9ec0 <__alt_data_end+0xfffc9ec0>
    a0e4:	00800c04 	movi	r2,48
    a0e8:	da802217 	ldw	r10,136(sp)
    a0ec:	d8801d05 	stb	r2,116(sp)
    a0f0:	00801e04 	movi	r2,120
    a0f4:	d8801d45 	stb	r2,117(sp)
    a0f8:	d8001d85 	stb	zero,118(sp)
    a0fc:	50c00104 	addi	r3,r10,4
    a100:	54800017 	ldw	r18,0(r10)
    a104:	0027883a 	mov	r19,zero
    a108:	a0800094 	ori	r2,r20,2
    a10c:	48030b16 	blt	r9,zero,ad3c <___vfiprintf_internal_r+0xff8>
    a110:	00bfdfc4 	movi	r2,-129
    a114:	a096703a 	and	r11,r20,r2
    a118:	d8c02215 	stw	r3,136(sp)
    a11c:	5d000094 	ori	r20,r11,2
    a120:	90032b1e 	bne	r18,zero,add0 <___vfiprintf_internal_r+0x108c>
    a124:	00800074 	movhi	r2,1
    a128:	1080a604 	addi	r2,r2,664
    a12c:	d8802615 	stw	r2,152(sp)
    a130:	0039883a 	mov	fp,zero
    a134:	48017b1e 	bne	r9,zero,a724 <___vfiprintf_internal_r+0x9e0>
    a138:	0013883a 	mov	r9,zero
    a13c:	0027883a 	mov	r19,zero
    a140:	dd401a04 	addi	r21,sp,104
    a144:	4825883a 	mov	r18,r9
    a148:	4cc0010e 	bge	r9,r19,a150 <___vfiprintf_internal_r+0x40c>
    a14c:	9825883a 	mov	r18,r19
    a150:	e7003fcc 	andi	fp,fp,255
    a154:	e700201c 	xori	fp,fp,128
    a158:	e73fe004 	addi	fp,fp,-128
    a15c:	e0000126 	beq	fp,zero,a164 <___vfiprintf_internal_r+0x420>
    a160:	94800044 	addi	r18,r18,1
    a164:	a380008c 	andi	r14,r20,2
    a168:	70000126 	beq	r14,zero,a170 <___vfiprintf_internal_r+0x42c>
    a16c:	94800084 	addi	r18,r18,2
    a170:	a700210c 	andi	fp,r20,132
    a174:	e001df1e 	bne	fp,zero,a8f4 <___vfiprintf_internal_r+0xbb0>
    a178:	8c87c83a 	sub	r3,r17,r18
    a17c:	00c1dd0e 	bge	zero,r3,a8f4 <___vfiprintf_internal_r+0xbb0>
    a180:	01c00404 	movi	r7,16
    a184:	d8801c17 	ldw	r2,112(sp)
    a188:	38c3ad0e 	bge	r7,r3,b040 <___vfiprintf_internal_r+0x12fc>
    a18c:	02800074 	movhi	r10,1
    a190:	52810a04 	addi	r10,r10,1064
    a194:	dc002915 	stw	r16,164(sp)
    a198:	d9801b17 	ldw	r6,108(sp)
    a19c:	da802415 	stw	r10,144(sp)
    a1a0:	03c001c4 	movi	r15,7
    a1a4:	da402515 	stw	r9,148(sp)
    a1a8:	db802815 	stw	r14,160(sp)
    a1ac:	1821883a 	mov	r16,r3
    a1b0:	00000506 	br	a1c8 <___vfiprintf_internal_r+0x484>
    a1b4:	31400084 	addi	r5,r6,2
    a1b8:	42000204 	addi	r8,r8,8
    a1bc:	200d883a 	mov	r6,r4
    a1c0:	843ffc04 	addi	r16,r16,-16
    a1c4:	3c000d0e 	bge	r7,r16,a1fc <___vfiprintf_internal_r+0x4b8>
    a1c8:	10800404 	addi	r2,r2,16
    a1cc:	31000044 	addi	r4,r6,1
    a1d0:	45800015 	stw	r22,0(r8)
    a1d4:	41c00115 	stw	r7,4(r8)
    a1d8:	d8801c15 	stw	r2,112(sp)
    a1dc:	d9001b15 	stw	r4,108(sp)
    a1e0:	793ff40e 	bge	r15,r4,a1b4 <__alt_data_end+0xfffca1b4>
    a1e4:	1001b51e 	bne	r2,zero,a8bc <___vfiprintf_internal_r+0xb78>
    a1e8:	843ffc04 	addi	r16,r16,-16
    a1ec:	000d883a 	mov	r6,zero
    a1f0:	01400044 	movi	r5,1
    a1f4:	d811883a 	mov	r8,sp
    a1f8:	3c3ff316 	blt	r7,r16,a1c8 <__alt_data_end+0xfffca1c8>
    a1fc:	8007883a 	mov	r3,r16
    a200:	da402517 	ldw	r9,148(sp)
    a204:	db802817 	ldw	r14,160(sp)
    a208:	dc002917 	ldw	r16,164(sp)
    a20c:	da802417 	ldw	r10,144(sp)
    a210:	1885883a 	add	r2,r3,r2
    a214:	40c00115 	stw	r3,4(r8)
    a218:	42800015 	stw	r10,0(r8)
    a21c:	d8801c15 	stw	r2,112(sp)
    a220:	d9401b15 	stw	r5,108(sp)
    a224:	00c001c4 	movi	r3,7
    a228:	19426016 	blt	r3,r5,abac <___vfiprintf_internal_r+0xe68>
    a22c:	d8c01d87 	ldb	r3,118(sp)
    a230:	42000204 	addi	r8,r8,8
    a234:	29000044 	addi	r4,r5,1
    a238:	1801b31e 	bne	r3,zero,a908 <___vfiprintf_internal_r+0xbc4>
    a23c:	7001c026 	beq	r14,zero,a940 <___vfiprintf_internal_r+0xbfc>
    a240:	d8c01d04 	addi	r3,sp,116
    a244:	10800084 	addi	r2,r2,2
    a248:	40c00015 	stw	r3,0(r8)
    a24c:	00c00084 	movi	r3,2
    a250:	40c00115 	stw	r3,4(r8)
    a254:	d8801c15 	stw	r2,112(sp)
    a258:	d9001b15 	stw	r4,108(sp)
    a25c:	00c001c4 	movi	r3,7
    a260:	1902650e 	bge	r3,r4,abf8 <___vfiprintf_internal_r+0xeb4>
    a264:	10029a1e 	bne	r2,zero,acd0 <___vfiprintf_internal_r+0xf8c>
    a268:	00c02004 	movi	r3,128
    a26c:	01000044 	movi	r4,1
    a270:	000b883a 	mov	r5,zero
    a274:	d811883a 	mov	r8,sp
    a278:	e0c1b31e 	bne	fp,r3,a948 <___vfiprintf_internal_r+0xc04>
    a27c:	8cb9c83a 	sub	fp,r17,r18
    a280:	0701b10e 	bge	zero,fp,a948 <___vfiprintf_internal_r+0xc04>
    a284:	01c00404 	movi	r7,16
    a288:	3f03890e 	bge	r7,fp,b0b0 <___vfiprintf_internal_r+0x136c>
    a28c:	00c00074 	movhi	r3,1
    a290:	18c10604 	addi	r3,r3,1048
    a294:	d8c02415 	stw	r3,144(sp)
    a298:	8007883a 	mov	r3,r16
    a29c:	034001c4 	movi	r13,7
    a2a0:	e021883a 	mov	r16,fp
    a2a4:	da402515 	stw	r9,148(sp)
    a2a8:	1839883a 	mov	fp,r3
    a2ac:	00000506 	br	a2c4 <___vfiprintf_internal_r+0x580>
    a2b0:	29800084 	addi	r6,r5,2
    a2b4:	42000204 	addi	r8,r8,8
    a2b8:	180b883a 	mov	r5,r3
    a2bc:	843ffc04 	addi	r16,r16,-16
    a2c0:	3c000d0e 	bge	r7,r16,a2f8 <___vfiprintf_internal_r+0x5b4>
    a2c4:	10800404 	addi	r2,r2,16
    a2c8:	28c00044 	addi	r3,r5,1
    a2cc:	45c00015 	stw	r23,0(r8)
    a2d0:	41c00115 	stw	r7,4(r8)
    a2d4:	d8801c15 	stw	r2,112(sp)
    a2d8:	d8c01b15 	stw	r3,108(sp)
    a2dc:	68fff40e 	bge	r13,r3,a2b0 <__alt_data_end+0xfffca2b0>
    a2e0:	1002241e 	bne	r2,zero,ab74 <___vfiprintf_internal_r+0xe30>
    a2e4:	843ffc04 	addi	r16,r16,-16
    a2e8:	01800044 	movi	r6,1
    a2ec:	000b883a 	mov	r5,zero
    a2f0:	d811883a 	mov	r8,sp
    a2f4:	3c3ff316 	blt	r7,r16,a2c4 <__alt_data_end+0xfffca2c4>
    a2f8:	da402517 	ldw	r9,148(sp)
    a2fc:	e007883a 	mov	r3,fp
    a300:	8039883a 	mov	fp,r16
    a304:	1821883a 	mov	r16,r3
    a308:	d8c02417 	ldw	r3,144(sp)
    a30c:	1705883a 	add	r2,r2,fp
    a310:	47000115 	stw	fp,4(r8)
    a314:	40c00015 	stw	r3,0(r8)
    a318:	d8801c15 	stw	r2,112(sp)
    a31c:	d9801b15 	stw	r6,108(sp)
    a320:	00c001c4 	movi	r3,7
    a324:	19827616 	blt	r3,r6,ad00 <___vfiprintf_internal_r+0xfbc>
    a328:	4cf9c83a 	sub	fp,r9,r19
    a32c:	42000204 	addi	r8,r8,8
    a330:	31000044 	addi	r4,r6,1
    a334:	300b883a 	mov	r5,r6
    a338:	07018516 	blt	zero,fp,a950 <___vfiprintf_internal_r+0xc0c>
    a33c:	9885883a 	add	r2,r19,r2
    a340:	45400015 	stw	r21,0(r8)
    a344:	44c00115 	stw	r19,4(r8)
    a348:	d8801c15 	stw	r2,112(sp)
    a34c:	d9001b15 	stw	r4,108(sp)
    a350:	00c001c4 	movi	r3,7
    a354:	1901dd0e 	bge	r3,r4,aacc <___vfiprintf_internal_r+0xd88>
    a358:	1002401e 	bne	r2,zero,ac5c <___vfiprintf_internal_r+0xf18>
    a35c:	d8001b15 	stw	zero,108(sp)
    a360:	a2c0010c 	andi	r11,r20,4
    a364:	58000226 	beq	r11,zero,a370 <___vfiprintf_internal_r+0x62c>
    a368:	8ca7c83a 	sub	r19,r17,r18
    a36c:	04c2f216 	blt	zero,r19,af38 <___vfiprintf_internal_r+0x11f4>
    a370:	8c80010e 	bge	r17,r18,a378 <___vfiprintf_internal_r+0x634>
    a374:	9023883a 	mov	r17,r18
    a378:	da802317 	ldw	r10,140(sp)
    a37c:	5455883a 	add	r10,r10,r17
    a380:	da802315 	stw	r10,140(sp)
    a384:	d8001b15 	stw	zero,108(sp)
    a388:	d811883a 	mov	r8,sp
    a38c:	003ea206 	br	9e18 <__alt_data_end+0xfffc9e18>
    a390:	a5000814 	ori	r20,r20,32
    a394:	80c00007 	ldb	r3,0(r16)
    a398:	003ec906 	br	9ec0 <__alt_data_end+0xfffc9ec0>
    a39c:	80c00007 	ldb	r3,0(r16)
    a3a0:	1b030926 	beq	r3,r12,afc8 <___vfiprintf_internal_r+0x1284>
    a3a4:	a5000414 	ori	r20,r20,16
    a3a8:	003ec506 	br	9ec0 <__alt_data_end+0xfffc9ec0>
    a3ac:	21003fcc 	andi	r4,r4,255
    a3b0:	20035e1e 	bne	r4,zero,b12c <___vfiprintf_internal_r+0x13e8>
    a3b4:	a080080c 	andi	r2,r20,32
    a3b8:	1002a526 	beq	r2,zero,ae50 <___vfiprintf_internal_r+0x110c>
    a3bc:	da802217 	ldw	r10,136(sp)
    a3c0:	50800017 	ldw	r2,0(r10)
    a3c4:	da802317 	ldw	r10,140(sp)
    a3c8:	5007d7fa 	srai	r3,r10,31
    a3cc:	da802217 	ldw	r10,136(sp)
    a3d0:	10c00115 	stw	r3,4(r2)
    a3d4:	52800104 	addi	r10,r10,4
    a3d8:	da802215 	stw	r10,136(sp)
    a3dc:	da802317 	ldw	r10,140(sp)
    a3e0:	12800015 	stw	r10,0(r2)
    a3e4:	003e8c06 	br	9e18 <__alt_data_end+0xfffc9e18>
    a3e8:	21003fcc 	andi	r4,r4,255
    a3ec:	2003511e 	bne	r4,zero,b134 <___vfiprintf_internal_r+0x13f0>
    a3f0:	a080080c 	andi	r2,r20,32
    a3f4:	1000a126 	beq	r2,zero,a67c <___vfiprintf_internal_r+0x938>
    a3f8:	da802217 	ldw	r10,136(sp)
    a3fc:	d8001d85 	stb	zero,118(sp)
    a400:	50800204 	addi	r2,r10,8
    a404:	54800017 	ldw	r18,0(r10)
    a408:	54c00117 	ldw	r19,4(r10)
    a40c:	4802b416 	blt	r9,zero,aee0 <___vfiprintf_internal_r+0x119c>
    a410:	013fdfc4 	movi	r4,-129
    a414:	94c6b03a 	or	r3,r18,r19
    a418:	d8802215 	stw	r2,136(sp)
    a41c:	a128703a 	and	r20,r20,r4
    a420:	1800a226 	beq	r3,zero,a6ac <___vfiprintf_internal_r+0x968>
    a424:	0039883a 	mov	fp,zero
    a428:	dd401a04 	addi	r21,sp,104
    a42c:	9006d0fa 	srli	r3,r18,3
    a430:	9808977a 	slli	r4,r19,29
    a434:	9826d0fa 	srli	r19,r19,3
    a438:	948001cc 	andi	r18,r18,7
    a43c:	90800c04 	addi	r2,r18,48
    a440:	ad7fffc4 	addi	r21,r21,-1
    a444:	20e4b03a 	or	r18,r4,r3
    a448:	a8800005 	stb	r2,0(r21)
    a44c:	94c6b03a 	or	r3,r18,r19
    a450:	183ff61e 	bne	r3,zero,a42c <__alt_data_end+0xfffca42c>
    a454:	a0c0004c 	andi	r3,r20,1
    a458:	18005926 	beq	r3,zero,a5c0 <___vfiprintf_internal_r+0x87c>
    a45c:	10803fcc 	andi	r2,r2,255
    a460:	1080201c 	xori	r2,r2,128
    a464:	10bfe004 	addi	r2,r2,-128
    a468:	00c00c04 	movi	r3,48
    a46c:	10c05426 	beq	r2,r3,a5c0 <___vfiprintf_internal_r+0x87c>
    a470:	da801e17 	ldw	r10,120(sp)
    a474:	a8bfffc4 	addi	r2,r21,-1
    a478:	a8ffffc5 	stb	r3,-1(r21)
    a47c:	50a7c83a 	sub	r19,r10,r2
    a480:	102b883a 	mov	r21,r2
    a484:	003f2f06 	br	a144 <__alt_data_end+0xfffca144>
    a488:	21003fcc 	andi	r4,r4,255
    a48c:	2003421e 	bne	r4,zero,b198 <___vfiprintf_internal_r+0x1454>
    a490:	00800074 	movhi	r2,1
    a494:	1080a604 	addi	r2,r2,664
    a498:	d8802615 	stw	r2,152(sp)
    a49c:	a080080c 	andi	r2,r20,32
    a4a0:	1000aa26 	beq	r2,zero,a74c <___vfiprintf_internal_r+0xa08>
    a4a4:	da802217 	ldw	r10,136(sp)
    a4a8:	54800017 	ldw	r18,0(r10)
    a4ac:	54c00117 	ldw	r19,4(r10)
    a4b0:	52800204 	addi	r10,r10,8
    a4b4:	da802215 	stw	r10,136(sp)
    a4b8:	a080004c 	andi	r2,r20,1
    a4bc:	1001d226 	beq	r2,zero,ac08 <___vfiprintf_internal_r+0xec4>
    a4c0:	94c4b03a 	or	r2,r18,r19
    a4c4:	1002351e 	bne	r2,zero,ad9c <___vfiprintf_internal_r+0x1058>
    a4c8:	d8001d85 	stb	zero,118(sp)
    a4cc:	48022216 	blt	r9,zero,ad58 <___vfiprintf_internal_r+0x1014>
    a4d0:	00bfdfc4 	movi	r2,-129
    a4d4:	a0a8703a 	and	r20,r20,r2
    a4d8:	003f1506 	br	a130 <__alt_data_end+0xfffca130>
    a4dc:	da802217 	ldw	r10,136(sp)
    a4e0:	04800044 	movi	r18,1
    a4e4:	d8001d85 	stb	zero,118(sp)
    a4e8:	50800017 	ldw	r2,0(r10)
    a4ec:	52800104 	addi	r10,r10,4
    a4f0:	da802215 	stw	r10,136(sp)
    a4f4:	d8801005 	stb	r2,64(sp)
    a4f8:	9027883a 	mov	r19,r18
    a4fc:	dd401004 	addi	r21,sp,64
    a500:	0013883a 	mov	r9,zero
    a504:	003f1706 	br	a164 <__alt_data_end+0xfffca164>
    a508:	21003fcc 	andi	r4,r4,255
    a50c:	2003201e 	bne	r4,zero,b190 <___vfiprintf_internal_r+0x144c>
    a510:	a080080c 	andi	r2,r20,32
    a514:	10004b26 	beq	r2,zero,a644 <___vfiprintf_internal_r+0x900>
    a518:	da802217 	ldw	r10,136(sp)
    a51c:	50800117 	ldw	r2,4(r10)
    a520:	54800017 	ldw	r18,0(r10)
    a524:	52800204 	addi	r10,r10,8
    a528:	da802215 	stw	r10,136(sp)
    a52c:	1027883a 	mov	r19,r2
    a530:	10022c16 	blt	r2,zero,ade4 <___vfiprintf_internal_r+0x10a0>
    a534:	df001d83 	ldbu	fp,118(sp)
    a538:	48007216 	blt	r9,zero,a704 <___vfiprintf_internal_r+0x9c0>
    a53c:	00ffdfc4 	movi	r3,-129
    a540:	94c4b03a 	or	r2,r18,r19
    a544:	a0e8703a 	and	r20,r20,r3
    a548:	1000cc26 	beq	r2,zero,a87c <___vfiprintf_internal_r+0xb38>
    a54c:	98021026 	beq	r19,zero,ad90 <___vfiprintf_internal_r+0x104c>
    a550:	dc402415 	stw	r17,144(sp)
    a554:	dc002515 	stw	r16,148(sp)
    a558:	9823883a 	mov	r17,r19
    a55c:	9021883a 	mov	r16,r18
    a560:	dd401a04 	addi	r21,sp,104
    a564:	4825883a 	mov	r18,r9
    a568:	4027883a 	mov	r19,r8
    a56c:	8009883a 	mov	r4,r16
    a570:	880b883a 	mov	r5,r17
    a574:	01800284 	movi	r6,10
    a578:	000f883a 	mov	r7,zero
    a57c:	000cbb80 	call	cbb8 <__umoddi3>
    a580:	10800c04 	addi	r2,r2,48
    a584:	ad7fffc4 	addi	r21,r21,-1
    a588:	8009883a 	mov	r4,r16
    a58c:	880b883a 	mov	r5,r17
    a590:	a8800005 	stb	r2,0(r21)
    a594:	01800284 	movi	r6,10
    a598:	000f883a 	mov	r7,zero
    a59c:	000c6400 	call	c640 <__udivdi3>
    a5a0:	1021883a 	mov	r16,r2
    a5a4:	10c4b03a 	or	r2,r2,r3
    a5a8:	1823883a 	mov	r17,r3
    a5ac:	103fef1e 	bne	r2,zero,a56c <__alt_data_end+0xfffca56c>
    a5b0:	dc402417 	ldw	r17,144(sp)
    a5b4:	dc002517 	ldw	r16,148(sp)
    a5b8:	9013883a 	mov	r9,r18
    a5bc:	9811883a 	mov	r8,r19
    a5c0:	da801e17 	ldw	r10,120(sp)
    a5c4:	5567c83a 	sub	r19,r10,r21
    a5c8:	003ede06 	br	a144 <__alt_data_end+0xfffca144>
    a5cc:	38803fcc 	andi	r2,r7,255
    a5d0:	1080201c 	xori	r2,r2,128
    a5d4:	10bfe004 	addi	r2,r2,-128
    a5d8:	1002371e 	bne	r2,zero,aeb8 <___vfiprintf_internal_r+0x1174>
    a5dc:	01000044 	movi	r4,1
    a5e0:	01c00804 	movi	r7,32
    a5e4:	80c00007 	ldb	r3,0(r16)
    a5e8:	003e3506 	br	9ec0 <__alt_data_end+0xfffc9ec0>
    a5ec:	a5000054 	ori	r20,r20,1
    a5f0:	80c00007 	ldb	r3,0(r16)
    a5f4:	003e3206 	br	9ec0 <__alt_data_end+0xfffc9ec0>
    a5f8:	a5002014 	ori	r20,r20,128
    a5fc:	80c00007 	ldb	r3,0(r16)
    a600:	003e2f06 	br	9ec0 <__alt_data_end+0xfffc9ec0>
    a604:	8015883a 	mov	r10,r16
    a608:	0023883a 	mov	r17,zero
    a60c:	18bff404 	addi	r2,r3,-48
    a610:	50c00007 	ldb	r3,0(r10)
    a614:	8c4002a4 	muli	r17,r17,10
    a618:	84000044 	addi	r16,r16,1
    a61c:	8015883a 	mov	r10,r16
    a620:	1463883a 	add	r17,r2,r17
    a624:	18bff404 	addi	r2,r3,-48
    a628:	30bff92e 	bgeu	r6,r2,a610 <__alt_data_end+0xfffca610>
    a62c:	003e2506 	br	9ec4 <__alt_data_end+0xfffc9ec4>
    a630:	21003fcc 	andi	r4,r4,255
    a634:	2002d41e 	bne	r4,zero,b188 <___vfiprintf_internal_r+0x1444>
    a638:	a5000414 	ori	r20,r20,16
    a63c:	a080080c 	andi	r2,r20,32
    a640:	103fb51e 	bne	r2,zero,a518 <__alt_data_end+0xfffca518>
    a644:	a080040c 	andi	r2,r20,16
    a648:	1001f826 	beq	r2,zero,ae2c <___vfiprintf_internal_r+0x10e8>
    a64c:	da802217 	ldw	r10,136(sp)
    a650:	54800017 	ldw	r18,0(r10)
    a654:	52800104 	addi	r10,r10,4
    a658:	da802215 	stw	r10,136(sp)
    a65c:	9027d7fa 	srai	r19,r18,31
    a660:	9805883a 	mov	r2,r19
    a664:	003fb206 	br	a530 <__alt_data_end+0xfffca530>
    a668:	21003fcc 	andi	r4,r4,255
    a66c:	2002c41e 	bne	r4,zero,b180 <___vfiprintf_internal_r+0x143c>
    a670:	a5000414 	ori	r20,r20,16
    a674:	a080080c 	andi	r2,r20,32
    a678:	103f5f1e 	bne	r2,zero,a3f8 <__alt_data_end+0xfffca3f8>
    a67c:	a080040c 	andi	r2,r20,16
    a680:	10020f26 	beq	r2,zero,aec0 <___vfiprintf_internal_r+0x117c>
    a684:	da802217 	ldw	r10,136(sp)
    a688:	d8001d85 	stb	zero,118(sp)
    a68c:	0027883a 	mov	r19,zero
    a690:	50800104 	addi	r2,r10,4
    a694:	54800017 	ldw	r18,0(r10)
    a698:	48021116 	blt	r9,zero,aee0 <___vfiprintf_internal_r+0x119c>
    a69c:	00ffdfc4 	movi	r3,-129
    a6a0:	d8802215 	stw	r2,136(sp)
    a6a4:	a0e8703a 	and	r20,r20,r3
    a6a8:	903f5e1e 	bne	r18,zero,a424 <__alt_data_end+0xfffca424>
    a6ac:	0039883a 	mov	fp,zero
    a6b0:	4802a626 	beq	r9,zero,b14c <___vfiprintf_internal_r+0x1408>
    a6b4:	0025883a 	mov	r18,zero
    a6b8:	0027883a 	mov	r19,zero
    a6bc:	003f5a06 	br	a428 <__alt_data_end+0xfffca428>
    a6c0:	21003fcc 	andi	r4,r4,255
    a6c4:	20029f1e 	bne	r4,zero,b144 <___vfiprintf_internal_r+0x1400>
    a6c8:	a5000414 	ori	r20,r20,16
    a6cc:	a080080c 	andi	r2,r20,32
    a6d0:	10005e1e 	bne	r2,zero,a84c <___vfiprintf_internal_r+0xb08>
    a6d4:	a080040c 	andi	r2,r20,16
    a6d8:	1001a21e 	bne	r2,zero,ad64 <___vfiprintf_internal_r+0x1020>
    a6dc:	a080100c 	andi	r2,r20,64
    a6e0:	d8001d85 	stb	zero,118(sp)
    a6e4:	da802217 	ldw	r10,136(sp)
    a6e8:	1002231e 	bne	r2,zero,af78 <___vfiprintf_internal_r+0x1234>
    a6ec:	50800104 	addi	r2,r10,4
    a6f0:	54800017 	ldw	r18,0(r10)
    a6f4:	0027883a 	mov	r19,zero
    a6f8:	4801a00e 	bge	r9,zero,ad7c <___vfiprintf_internal_r+0x1038>
    a6fc:	d8802215 	stw	r2,136(sp)
    a700:	0039883a 	mov	fp,zero
    a704:	94c4b03a 	or	r2,r18,r19
    a708:	103f901e 	bne	r2,zero,a54c <__alt_data_end+0xfffca54c>
    a70c:	00800044 	movi	r2,1
    a710:	10803fcc 	andi	r2,r2,255
    a714:	00c00044 	movi	r3,1
    a718:	10c05926 	beq	r2,r3,a880 <___vfiprintf_internal_r+0xb3c>
    a71c:	00c00084 	movi	r3,2
    a720:	10ffe41e 	bne	r2,r3,a6b4 <__alt_data_end+0xfffca6b4>
    a724:	0025883a 	mov	r18,zero
    a728:	0027883a 	mov	r19,zero
    a72c:	00013d06 	br	ac24 <___vfiprintf_internal_r+0xee0>
    a730:	21003fcc 	andi	r4,r4,255
    a734:	2002811e 	bne	r4,zero,b13c <___vfiprintf_internal_r+0x13f8>
    a738:	00800074 	movhi	r2,1
    a73c:	1080a104 	addi	r2,r2,644
    a740:	d8802615 	stw	r2,152(sp)
    a744:	a080080c 	andi	r2,r20,32
    a748:	103f561e 	bne	r2,zero,a4a4 <__alt_data_end+0xfffca4a4>
    a74c:	a080040c 	andi	r2,r20,16
    a750:	1001d126 	beq	r2,zero,ae98 <___vfiprintf_internal_r+0x1154>
    a754:	da802217 	ldw	r10,136(sp)
    a758:	0027883a 	mov	r19,zero
    a75c:	54800017 	ldw	r18,0(r10)
    a760:	52800104 	addi	r10,r10,4
    a764:	da802215 	stw	r10,136(sp)
    a768:	003f5306 	br	a4b8 <__alt_data_end+0xfffca4b8>
    a76c:	da802217 	ldw	r10,136(sp)
    a770:	d8001d85 	stb	zero,118(sp)
    a774:	55400017 	ldw	r21,0(r10)
    a778:	50c00104 	addi	r3,r10,4
    a77c:	a8024226 	beq	r21,zero,b088 <___vfiprintf_internal_r+0x1344>
    a780:	48021816 	blt	r9,zero,afe4 <___vfiprintf_internal_r+0x12a0>
    a784:	480d883a 	mov	r6,r9
    a788:	000b883a 	mov	r5,zero
    a78c:	a809883a 	mov	r4,r21
    a790:	d8c02a15 	stw	r3,168(sp)
    a794:	da002b15 	stw	r8,172(sp)
    a798:	da402c15 	stw	r9,176(sp)
    a79c:	00087480 	call	8748 <memchr>
    a7a0:	d8c02a17 	ldw	r3,168(sp)
    a7a4:	da002b17 	ldw	r8,172(sp)
    a7a8:	da402c17 	ldw	r9,176(sp)
    a7ac:	10024826 	beq	r2,zero,b0d0 <___vfiprintf_internal_r+0x138c>
    a7b0:	1567c83a 	sub	r19,r2,r21
    a7b4:	df001d83 	ldbu	fp,118(sp)
    a7b8:	d8c02215 	stw	r3,136(sp)
    a7bc:	0013883a 	mov	r9,zero
    a7c0:	003e6006 	br	a144 <__alt_data_end+0xfffca144>
    a7c4:	21003fcc 	andi	r4,r4,255
    a7c8:	203fc026 	beq	r4,zero,a6cc <__alt_data_end+0xfffca6cc>
    a7cc:	d9c01d85 	stb	r7,118(sp)
    a7d0:	003fbe06 	br	a6cc <__alt_data_end+0xfffca6cc>
    a7d4:	da802217 	ldw	r10,136(sp)
    a7d8:	54400017 	ldw	r17,0(r10)
    a7dc:	50800104 	addi	r2,r10,4
    a7e0:	883e3b16 	blt	r17,zero,a0d0 <__alt_data_end+0xfffca0d0>
    a7e4:	d8802215 	stw	r2,136(sp)
    a7e8:	80c00007 	ldb	r3,0(r16)
    a7ec:	003db406 	br	9ec0 <__alt_data_end+0xfffc9ec0>
    a7f0:	01000044 	movi	r4,1
    a7f4:	01c00ac4 	movi	r7,43
    a7f8:	80c00007 	ldb	r3,0(r16)
    a7fc:	003db006 	br	9ec0 <__alt_data_end+0xfffc9ec0>
    a800:	80c00007 	ldb	r3,0(r16)
    a804:	82800044 	addi	r10,r16,1
    a808:	1b423c26 	beq	r3,r13,b0fc <___vfiprintf_internal_r+0x13b8>
    a80c:	18bff404 	addi	r2,r3,-48
    a810:	0013883a 	mov	r9,zero
    a814:	30822b36 	bltu	r6,r2,b0c4 <___vfiprintf_internal_r+0x1380>
    a818:	50c00007 	ldb	r3,0(r10)
    a81c:	4a4002a4 	muli	r9,r9,10
    a820:	54000044 	addi	r16,r10,1
    a824:	8015883a 	mov	r10,r16
    a828:	4893883a 	add	r9,r9,r2
    a82c:	18bff404 	addi	r2,r3,-48
    a830:	30bff92e 	bgeu	r6,r2,a818 <__alt_data_end+0xfffca818>
    a834:	483da30e 	bge	r9,zero,9ec4 <__alt_data_end+0xfffc9ec4>
    a838:	027fffc4 	movi	r9,-1
    a83c:	003da106 	br	9ec4 <__alt_data_end+0xfffc9ec4>
    a840:	a5001014 	ori	r20,r20,64
    a844:	80c00007 	ldb	r3,0(r16)
    a848:	003d9d06 	br	9ec0 <__alt_data_end+0xfffc9ec0>
    a84c:	da802217 	ldw	r10,136(sp)
    a850:	d8001d85 	stb	zero,118(sp)
    a854:	50c00204 	addi	r3,r10,8
    a858:	54800017 	ldw	r18,0(r10)
    a85c:	54c00117 	ldw	r19,4(r10)
    a860:	4801ca16 	blt	r9,zero,af8c <___vfiprintf_internal_r+0x1248>
    a864:	013fdfc4 	movi	r4,-129
    a868:	94c4b03a 	or	r2,r18,r19
    a86c:	d8c02215 	stw	r3,136(sp)
    a870:	a128703a 	and	r20,r20,r4
    a874:	0039883a 	mov	fp,zero
    a878:	103f341e 	bne	r2,zero,a54c <__alt_data_end+0xfffca54c>
    a87c:	483e2e26 	beq	r9,zero,a138 <__alt_data_end+0xfffca138>
    a880:	0025883a 	mov	r18,zero
    a884:	94800c04 	addi	r18,r18,48
    a888:	dc8019c5 	stb	r18,103(sp)
    a88c:	dcc02717 	ldw	r19,156(sp)
    a890:	dd4019c4 	addi	r21,sp,103
    a894:	003e2b06 	br	a144 <__alt_data_end+0xfffca144>
    a898:	21003fcc 	andi	r4,r4,255
    a89c:	2002361e 	bne	r4,zero,b178 <___vfiprintf_internal_r+0x1434>
    a8a0:	1801c126 	beq	r3,zero,afa8 <___vfiprintf_internal_r+0x1264>
    a8a4:	04800044 	movi	r18,1
    a8a8:	d8c01005 	stb	r3,64(sp)
    a8ac:	d8001d85 	stb	zero,118(sp)
    a8b0:	9027883a 	mov	r19,r18
    a8b4:	dd401004 	addi	r21,sp,64
    a8b8:	003f1106 	br	a500 <__alt_data_end+0xfffca500>
    a8bc:	d9402117 	ldw	r5,132(sp)
    a8c0:	d9002017 	ldw	r4,128(sp)
    a8c4:	d9801a04 	addi	r6,sp,104
    a8c8:	d9c02b15 	stw	r7,172(sp)
    a8cc:	dbc02a15 	stw	r15,168(sp)
    a8d0:	0009c300 	call	9c30 <__sprint_r.part.0>
    a8d4:	d9c02b17 	ldw	r7,172(sp)
    a8d8:	dbc02a17 	ldw	r15,168(sp)
    a8dc:	10006d1e 	bne	r2,zero,aa94 <___vfiprintf_internal_r+0xd50>
    a8e0:	d9801b17 	ldw	r6,108(sp)
    a8e4:	d8801c17 	ldw	r2,112(sp)
    a8e8:	d811883a 	mov	r8,sp
    a8ec:	31400044 	addi	r5,r6,1
    a8f0:	003e3306 	br	a1c0 <__alt_data_end+0xfffca1c0>
    a8f4:	d9401b17 	ldw	r5,108(sp)
    a8f8:	d8801c17 	ldw	r2,112(sp)
    a8fc:	29000044 	addi	r4,r5,1
    a900:	d8c01d87 	ldb	r3,118(sp)
    a904:	183e4d26 	beq	r3,zero,a23c <__alt_data_end+0xfffca23c>
    a908:	00c00044 	movi	r3,1
    a90c:	d9401d84 	addi	r5,sp,118
    a910:	10c5883a 	add	r2,r2,r3
    a914:	41400015 	stw	r5,0(r8)
    a918:	40c00115 	stw	r3,4(r8)
    a91c:	d8801c15 	stw	r2,112(sp)
    a920:	d9001b15 	stw	r4,108(sp)
    a924:	014001c4 	movi	r5,7
    a928:	2900a90e 	bge	r5,r4,abd0 <___vfiprintf_internal_r+0xe8c>
    a92c:	1000da1e 	bne	r2,zero,ac98 <___vfiprintf_internal_r+0xf54>
    a930:	7000ab1e 	bne	r14,zero,abe0 <___vfiprintf_internal_r+0xe9c>
    a934:	000b883a 	mov	r5,zero
    a938:	1809883a 	mov	r4,r3
    a93c:	d811883a 	mov	r8,sp
    a940:	00c02004 	movi	r3,128
    a944:	e0fe4d26 	beq	fp,r3,a27c <__alt_data_end+0xfffca27c>
    a948:	4cf9c83a 	sub	fp,r9,r19
    a94c:	073e7b0e 	bge	zero,fp,a33c <__alt_data_end+0xfffca33c>
    a950:	01c00404 	movi	r7,16
    a954:	3f01900e 	bge	r7,fp,af98 <___vfiprintf_internal_r+0x1254>
    a958:	00c00074 	movhi	r3,1
    a95c:	18c10604 	addi	r3,r3,1048
    a960:	d8c02415 	stw	r3,144(sp)
    a964:	034001c4 	movi	r13,7
    a968:	00000506 	br	a980 <___vfiprintf_internal_r+0xc3c>
    a96c:	29000084 	addi	r4,r5,2
    a970:	42000204 	addi	r8,r8,8
    a974:	180b883a 	mov	r5,r3
    a978:	e73ffc04 	addi	fp,fp,-16
    a97c:	3f000d0e 	bge	r7,fp,a9b4 <___vfiprintf_internal_r+0xc70>
    a980:	10800404 	addi	r2,r2,16
    a984:	28c00044 	addi	r3,r5,1
    a988:	45c00015 	stw	r23,0(r8)
    a98c:	41c00115 	stw	r7,4(r8)
    a990:	d8801c15 	stw	r2,112(sp)
    a994:	d8c01b15 	stw	r3,108(sp)
    a998:	68fff40e 	bge	r13,r3,a96c <__alt_data_end+0xfffca96c>
    a99c:	1000101e 	bne	r2,zero,a9e0 <___vfiprintf_internal_r+0xc9c>
    a9a0:	e73ffc04 	addi	fp,fp,-16
    a9a4:	01000044 	movi	r4,1
    a9a8:	000b883a 	mov	r5,zero
    a9ac:	d811883a 	mov	r8,sp
    a9b0:	3f3ff316 	blt	r7,fp,a980 <__alt_data_end+0xfffca980>
    a9b4:	da802417 	ldw	r10,144(sp)
    a9b8:	1705883a 	add	r2,r2,fp
    a9bc:	47000115 	stw	fp,4(r8)
    a9c0:	42800015 	stw	r10,0(r8)
    a9c4:	d8801c15 	stw	r2,112(sp)
    a9c8:	d9001b15 	stw	r4,108(sp)
    a9cc:	00c001c4 	movi	r3,7
    a9d0:	19003616 	blt	r3,r4,aaac <___vfiprintf_internal_r+0xd68>
    a9d4:	42000204 	addi	r8,r8,8
    a9d8:	21000044 	addi	r4,r4,1
    a9dc:	003e5706 	br	a33c <__alt_data_end+0xfffca33c>
    a9e0:	d9402117 	ldw	r5,132(sp)
    a9e4:	d9002017 	ldw	r4,128(sp)
    a9e8:	d9801a04 	addi	r6,sp,104
    a9ec:	d9c02b15 	stw	r7,172(sp)
    a9f0:	db402a15 	stw	r13,168(sp)
    a9f4:	0009c300 	call	9c30 <__sprint_r.part.0>
    a9f8:	d9c02b17 	ldw	r7,172(sp)
    a9fc:	db402a17 	ldw	r13,168(sp)
    aa00:	1000241e 	bne	r2,zero,aa94 <___vfiprintf_internal_r+0xd50>
    aa04:	d9401b17 	ldw	r5,108(sp)
    aa08:	d8801c17 	ldw	r2,112(sp)
    aa0c:	d811883a 	mov	r8,sp
    aa10:	29000044 	addi	r4,r5,1
    aa14:	003fd806 	br	a978 <__alt_data_end+0xfffca978>
    aa18:	d9401b17 	ldw	r5,108(sp)
    aa1c:	00c00074 	movhi	r3,1
    aa20:	18c10a04 	addi	r3,r3,1064
    aa24:	d8c02415 	stw	r3,144(sp)
    aa28:	29400044 	addi	r5,r5,1
    aa2c:	d8c02417 	ldw	r3,144(sp)
    aa30:	14c5883a 	add	r2,r2,r19
    aa34:	44c00115 	stw	r19,4(r8)
    aa38:	40c00015 	stw	r3,0(r8)
    aa3c:	d8801c15 	stw	r2,112(sp)
    aa40:	d9401b15 	stw	r5,108(sp)
    aa44:	00c001c4 	movi	r3,7
    aa48:	1940070e 	bge	r3,r5,aa68 <___vfiprintf_internal_r+0xd24>
    aa4c:	103e4826 	beq	r2,zero,a370 <__alt_data_end+0xfffca370>
    aa50:	d9402117 	ldw	r5,132(sp)
    aa54:	d9002017 	ldw	r4,128(sp)
    aa58:	d9801a04 	addi	r6,sp,104
    aa5c:	0009c300 	call	9c30 <__sprint_r.part.0>
    aa60:	10000c1e 	bne	r2,zero,aa94 <___vfiprintf_internal_r+0xd50>
    aa64:	d8801c17 	ldw	r2,112(sp)
    aa68:	8c80010e 	bge	r17,r18,aa70 <___vfiprintf_internal_r+0xd2c>
    aa6c:	9023883a 	mov	r17,r18
    aa70:	da802317 	ldw	r10,140(sp)
    aa74:	5455883a 	add	r10,r10,r17
    aa78:	da802315 	stw	r10,140(sp)
    aa7c:	103e4126 	beq	r2,zero,a384 <__alt_data_end+0xfffca384>
    aa80:	d9402117 	ldw	r5,132(sp)
    aa84:	d9002017 	ldw	r4,128(sp)
    aa88:	d9801a04 	addi	r6,sp,104
    aa8c:	0009c300 	call	9c30 <__sprint_r.part.0>
    aa90:	103e3c26 	beq	r2,zero,a384 <__alt_data_end+0xfffca384>
    aa94:	dd002117 	ldw	r20,132(sp)
    aa98:	a080030b 	ldhu	r2,12(r20)
    aa9c:	1080100c 	andi	r2,r2,64
    aaa0:	1001231e 	bne	r2,zero,af30 <___vfiprintf_internal_r+0x11ec>
    aaa4:	d8802317 	ldw	r2,140(sp)
    aaa8:	003d7b06 	br	a098 <__alt_data_end+0xfffca098>
    aaac:	1000991e 	bne	r2,zero,ad14 <___vfiprintf_internal_r+0xfd0>
    aab0:	00c00044 	movi	r3,1
    aab4:	9805883a 	mov	r2,r19
    aab8:	dd400015 	stw	r21,0(sp)
    aabc:	dcc00115 	stw	r19,4(sp)
    aac0:	dcc01c15 	stw	r19,112(sp)
    aac4:	d8c01b15 	stw	r3,108(sp)
    aac8:	d811883a 	mov	r8,sp
    aacc:	42000204 	addi	r8,r8,8
    aad0:	a2c0010c 	andi	r11,r20,4
    aad4:	583fe426 	beq	r11,zero,aa68 <__alt_data_end+0xfffcaa68>
    aad8:	8ca7c83a 	sub	r19,r17,r18
    aadc:	04ffe20e 	bge	zero,r19,aa68 <__alt_data_end+0xfffcaa68>
    aae0:	01c00404 	movi	r7,16
    aae4:	3cffcc0e 	bge	r7,r19,aa18 <__alt_data_end+0xfffcaa18>
    aae8:	02800074 	movhi	r10,1
    aaec:	52810a04 	addi	r10,r10,1064
    aaf0:	d9001b17 	ldw	r4,108(sp)
    aaf4:	da802415 	stw	r10,144(sp)
    aaf8:	382b883a 	mov	r21,r7
    aafc:	050001c4 	movi	r20,7
    ab00:	df002017 	ldw	fp,128(sp)
    ab04:	00000506 	br	ab1c <___vfiprintf_internal_r+0xdd8>
    ab08:	21400084 	addi	r5,r4,2
    ab0c:	42000204 	addi	r8,r8,8
    ab10:	1809883a 	mov	r4,r3
    ab14:	9cfffc04 	addi	r19,r19,-16
    ab18:	acffc40e 	bge	r21,r19,aa2c <__alt_data_end+0xfffcaa2c>
    ab1c:	10800404 	addi	r2,r2,16
    ab20:	20c00044 	addi	r3,r4,1
    ab24:	45800015 	stw	r22,0(r8)
    ab28:	45400115 	stw	r21,4(r8)
    ab2c:	d8801c15 	stw	r2,112(sp)
    ab30:	d8c01b15 	stw	r3,108(sp)
    ab34:	a0fff40e 	bge	r20,r3,ab08 <__alt_data_end+0xfffcab08>
    ab38:	1000041e 	bne	r2,zero,ab4c <___vfiprintf_internal_r+0xe08>
    ab3c:	01400044 	movi	r5,1
    ab40:	0009883a 	mov	r4,zero
    ab44:	d811883a 	mov	r8,sp
    ab48:	003ff206 	br	ab14 <__alt_data_end+0xfffcab14>
    ab4c:	d9402117 	ldw	r5,132(sp)
    ab50:	d9801a04 	addi	r6,sp,104
    ab54:	e009883a 	mov	r4,fp
    ab58:	0009c300 	call	9c30 <__sprint_r.part.0>
    ab5c:	103fcd1e 	bne	r2,zero,aa94 <__alt_data_end+0xfffcaa94>
    ab60:	d9001b17 	ldw	r4,108(sp)
    ab64:	d8801c17 	ldw	r2,112(sp)
    ab68:	d811883a 	mov	r8,sp
    ab6c:	21400044 	addi	r5,r4,1
    ab70:	003fe806 	br	ab14 <__alt_data_end+0xfffcab14>
    ab74:	d9402117 	ldw	r5,132(sp)
    ab78:	d9002017 	ldw	r4,128(sp)
    ab7c:	d9801a04 	addi	r6,sp,104
    ab80:	d9c02b15 	stw	r7,172(sp)
    ab84:	db402a15 	stw	r13,168(sp)
    ab88:	0009c300 	call	9c30 <__sprint_r.part.0>
    ab8c:	d9c02b17 	ldw	r7,172(sp)
    ab90:	db402a17 	ldw	r13,168(sp)
    ab94:	103fbf1e 	bne	r2,zero,aa94 <__alt_data_end+0xfffcaa94>
    ab98:	d9401b17 	ldw	r5,108(sp)
    ab9c:	d8801c17 	ldw	r2,112(sp)
    aba0:	d811883a 	mov	r8,sp
    aba4:	29800044 	addi	r6,r5,1
    aba8:	003dc406 	br	a2bc <__alt_data_end+0xfffca2bc>
    abac:	1000d21e 	bne	r2,zero,aef8 <___vfiprintf_internal_r+0x11b4>
    abb0:	d8c01d87 	ldb	r3,118(sp)
    abb4:	18009526 	beq	r3,zero,ae0c <___vfiprintf_internal_r+0x10c8>
    abb8:	00800044 	movi	r2,1
    abbc:	d8c01d84 	addi	r3,sp,118
    abc0:	1009883a 	mov	r4,r2
    abc4:	d8c00015 	stw	r3,0(sp)
    abc8:	d8800115 	stw	r2,4(sp)
    abcc:	d811883a 	mov	r8,sp
    abd0:	200b883a 	mov	r5,r4
    abd4:	42000204 	addi	r8,r8,8
    abd8:	21000044 	addi	r4,r4,1
    abdc:	003d9706 	br	a23c <__alt_data_end+0xfffca23c>
    abe0:	d9001d04 	addi	r4,sp,116
    abe4:	00800084 	movi	r2,2
    abe8:	d9000015 	stw	r4,0(sp)
    abec:	d8800115 	stw	r2,4(sp)
    abf0:	1809883a 	mov	r4,r3
    abf4:	d811883a 	mov	r8,sp
    abf8:	200b883a 	mov	r5,r4
    abfc:	42000204 	addi	r8,r8,8
    ac00:	21000044 	addi	r4,r4,1
    ac04:	003f4e06 	br	a940 <__alt_data_end+0xfffca940>
    ac08:	d8001d85 	stb	zero,118(sp)
    ac0c:	48005016 	blt	r9,zero,ad50 <___vfiprintf_internal_r+0x100c>
    ac10:	00ffdfc4 	movi	r3,-129
    ac14:	94c4b03a 	or	r2,r18,r19
    ac18:	a0e8703a 	and	r20,r20,r3
    ac1c:	103d4426 	beq	r2,zero,a130 <__alt_data_end+0xfffca130>
    ac20:	0039883a 	mov	fp,zero
    ac24:	d9002617 	ldw	r4,152(sp)
    ac28:	dd401a04 	addi	r21,sp,104
    ac2c:	908003cc 	andi	r2,r18,15
    ac30:	9806973a 	slli	r3,r19,28
    ac34:	2085883a 	add	r2,r4,r2
    ac38:	9024d13a 	srli	r18,r18,4
    ac3c:	10800003 	ldbu	r2,0(r2)
    ac40:	9826d13a 	srli	r19,r19,4
    ac44:	ad7fffc4 	addi	r21,r21,-1
    ac48:	1ca4b03a 	or	r18,r3,r18
    ac4c:	a8800005 	stb	r2,0(r21)
    ac50:	94c4b03a 	or	r2,r18,r19
    ac54:	103ff51e 	bne	r2,zero,ac2c <__alt_data_end+0xfffcac2c>
    ac58:	003e5906 	br	a5c0 <__alt_data_end+0xfffca5c0>
    ac5c:	d9402117 	ldw	r5,132(sp)
    ac60:	d9002017 	ldw	r4,128(sp)
    ac64:	d9801a04 	addi	r6,sp,104
    ac68:	0009c300 	call	9c30 <__sprint_r.part.0>
    ac6c:	103f891e 	bne	r2,zero,aa94 <__alt_data_end+0xfffcaa94>
    ac70:	d8801c17 	ldw	r2,112(sp)
    ac74:	d811883a 	mov	r8,sp
    ac78:	003f9506 	br	aad0 <__alt_data_end+0xfffcaad0>
    ac7c:	d9402117 	ldw	r5,132(sp)
    ac80:	d9002017 	ldw	r4,128(sp)
    ac84:	d9801a04 	addi	r6,sp,104
    ac88:	0009c300 	call	9c30 <__sprint_r.part.0>
    ac8c:	103f811e 	bne	r2,zero,aa94 <__alt_data_end+0xfffcaa94>
    ac90:	d811883a 	mov	r8,sp
    ac94:	003ced06 	br	a04c <__alt_data_end+0xfffca04c>
    ac98:	d9402117 	ldw	r5,132(sp)
    ac9c:	d9002017 	ldw	r4,128(sp)
    aca0:	d9801a04 	addi	r6,sp,104
    aca4:	da402c15 	stw	r9,176(sp)
    aca8:	db802a15 	stw	r14,168(sp)
    acac:	0009c300 	call	9c30 <__sprint_r.part.0>
    acb0:	da402c17 	ldw	r9,176(sp)
    acb4:	db802a17 	ldw	r14,168(sp)
    acb8:	103f761e 	bne	r2,zero,aa94 <__alt_data_end+0xfffcaa94>
    acbc:	d9401b17 	ldw	r5,108(sp)
    acc0:	d8801c17 	ldw	r2,112(sp)
    acc4:	d811883a 	mov	r8,sp
    acc8:	29000044 	addi	r4,r5,1
    accc:	003d5b06 	br	a23c <__alt_data_end+0xfffca23c>
    acd0:	d9402117 	ldw	r5,132(sp)
    acd4:	d9002017 	ldw	r4,128(sp)
    acd8:	d9801a04 	addi	r6,sp,104
    acdc:	da402c15 	stw	r9,176(sp)
    ace0:	0009c300 	call	9c30 <__sprint_r.part.0>
    ace4:	da402c17 	ldw	r9,176(sp)
    ace8:	103f6a1e 	bne	r2,zero,aa94 <__alt_data_end+0xfffcaa94>
    acec:	d9401b17 	ldw	r5,108(sp)
    acf0:	d8801c17 	ldw	r2,112(sp)
    acf4:	d811883a 	mov	r8,sp
    acf8:	29000044 	addi	r4,r5,1
    acfc:	003f1006 	br	a940 <__alt_data_end+0xfffca940>
    ad00:	1000c31e 	bne	r2,zero,b010 <___vfiprintf_internal_r+0x12cc>
    ad04:	01000044 	movi	r4,1
    ad08:	000b883a 	mov	r5,zero
    ad0c:	d811883a 	mov	r8,sp
    ad10:	003f0d06 	br	a948 <__alt_data_end+0xfffca948>
    ad14:	d9402117 	ldw	r5,132(sp)
    ad18:	d9002017 	ldw	r4,128(sp)
    ad1c:	d9801a04 	addi	r6,sp,104
    ad20:	0009c300 	call	9c30 <__sprint_r.part.0>
    ad24:	103f5b1e 	bne	r2,zero,aa94 <__alt_data_end+0xfffcaa94>
    ad28:	d9001b17 	ldw	r4,108(sp)
    ad2c:	d8801c17 	ldw	r2,112(sp)
    ad30:	d811883a 	mov	r8,sp
    ad34:	21000044 	addi	r4,r4,1
    ad38:	003d8006 	br	a33c <__alt_data_end+0xfffca33c>
    ad3c:	01000074 	movhi	r4,1
    ad40:	2100a604 	addi	r4,r4,664
    ad44:	d9002615 	stw	r4,152(sp)
    ad48:	d8c02215 	stw	r3,136(sp)
    ad4c:	1029883a 	mov	r20,r2
    ad50:	94c4b03a 	or	r2,r18,r19
    ad54:	103fb21e 	bne	r2,zero,ac20 <__alt_data_end+0xfffcac20>
    ad58:	0039883a 	mov	fp,zero
    ad5c:	00800084 	movi	r2,2
    ad60:	003e6b06 	br	a710 <__alt_data_end+0xfffca710>
    ad64:	da802217 	ldw	r10,136(sp)
    ad68:	d8001d85 	stb	zero,118(sp)
    ad6c:	0027883a 	mov	r19,zero
    ad70:	50800104 	addi	r2,r10,4
    ad74:	54800017 	ldw	r18,0(r10)
    ad78:	483e6016 	blt	r9,zero,a6fc <__alt_data_end+0xfffca6fc>
    ad7c:	00ffdfc4 	movi	r3,-129
    ad80:	d8802215 	stw	r2,136(sp)
    ad84:	a0e8703a 	and	r20,r20,r3
    ad88:	0039883a 	mov	fp,zero
    ad8c:	903ebb26 	beq	r18,zero,a87c <__alt_data_end+0xfffca87c>
    ad90:	00800244 	movi	r2,9
    ad94:	14bdee36 	bltu	r2,r18,a550 <__alt_data_end+0xfffca550>
    ad98:	003eba06 	br	a884 <__alt_data_end+0xfffca884>
    ad9c:	00800c04 	movi	r2,48
    ada0:	d8c01d45 	stb	r3,117(sp)
    ada4:	d8801d05 	stb	r2,116(sp)
    ada8:	d8001d85 	stb	zero,118(sp)
    adac:	a0c00094 	ori	r3,r20,2
    adb0:	4800a916 	blt	r9,zero,b058 <___vfiprintf_internal_r+0x1314>
    adb4:	00bfdfc4 	movi	r2,-129
    adb8:	a096703a 	and	r11,r20,r2
    adbc:	5d000094 	ori	r20,r11,2
    adc0:	0039883a 	mov	fp,zero
    adc4:	003f9706 	br	ac24 <__alt_data_end+0xfffcac24>
    adc8:	8025883a 	mov	r18,r16
    adcc:	003c2e06 	br	9e88 <__alt_data_end+0xfffc9e88>
    add0:	00800074 	movhi	r2,1
    add4:	1080a604 	addi	r2,r2,664
    add8:	0039883a 	mov	fp,zero
    addc:	d8802615 	stw	r2,152(sp)
    ade0:	003f9006 	br	ac24 <__alt_data_end+0xfffcac24>
    ade4:	04a5c83a 	sub	r18,zero,r18
    ade8:	07000b44 	movi	fp,45
    adec:	9004c03a 	cmpne	r2,r18,zero
    adf0:	04e7c83a 	sub	r19,zero,r19
    adf4:	df001d85 	stb	fp,118(sp)
    adf8:	98a7c83a 	sub	r19,r19,r2
    adfc:	48009f16 	blt	r9,zero,b07c <___vfiprintf_internal_r+0x1338>
    ae00:	00bfdfc4 	movi	r2,-129
    ae04:	a0a8703a 	and	r20,r20,r2
    ae08:	003dd006 	br	a54c <__alt_data_end+0xfffca54c>
    ae0c:	70004c26 	beq	r14,zero,af40 <___vfiprintf_internal_r+0x11fc>
    ae10:	00800084 	movi	r2,2
    ae14:	d8c01d04 	addi	r3,sp,116
    ae18:	d8c00015 	stw	r3,0(sp)
    ae1c:	d8800115 	stw	r2,4(sp)
    ae20:	01000044 	movi	r4,1
    ae24:	d811883a 	mov	r8,sp
    ae28:	003f7306 	br	abf8 <__alt_data_end+0xfffcabf8>
    ae2c:	a080100c 	andi	r2,r20,64
    ae30:	da802217 	ldw	r10,136(sp)
    ae34:	103e0626 	beq	r2,zero,a650 <__alt_data_end+0xfffca650>
    ae38:	5480000f 	ldh	r18,0(r10)
    ae3c:	52800104 	addi	r10,r10,4
    ae40:	da802215 	stw	r10,136(sp)
    ae44:	9027d7fa 	srai	r19,r18,31
    ae48:	9805883a 	mov	r2,r19
    ae4c:	003db806 	br	a530 <__alt_data_end+0xfffca530>
    ae50:	a080040c 	andi	r2,r20,16
    ae54:	1000091e 	bne	r2,zero,ae7c <___vfiprintf_internal_r+0x1138>
    ae58:	a2c0100c 	andi	r11,r20,64
    ae5c:	58000726 	beq	r11,zero,ae7c <___vfiprintf_internal_r+0x1138>
    ae60:	da802217 	ldw	r10,136(sp)
    ae64:	50800017 	ldw	r2,0(r10)
    ae68:	52800104 	addi	r10,r10,4
    ae6c:	da802215 	stw	r10,136(sp)
    ae70:	da802317 	ldw	r10,140(sp)
    ae74:	1280000d 	sth	r10,0(r2)
    ae78:	003be706 	br	9e18 <__alt_data_end+0xfffc9e18>
    ae7c:	da802217 	ldw	r10,136(sp)
    ae80:	50800017 	ldw	r2,0(r10)
    ae84:	52800104 	addi	r10,r10,4
    ae88:	da802215 	stw	r10,136(sp)
    ae8c:	da802317 	ldw	r10,140(sp)
    ae90:	12800015 	stw	r10,0(r2)
    ae94:	003be006 	br	9e18 <__alt_data_end+0xfffc9e18>
    ae98:	a080100c 	andi	r2,r20,64
    ae9c:	da802217 	ldw	r10,136(sp)
    aea0:	10003026 	beq	r2,zero,af64 <___vfiprintf_internal_r+0x1220>
    aea4:	5480000b 	ldhu	r18,0(r10)
    aea8:	52800104 	addi	r10,r10,4
    aeac:	0027883a 	mov	r19,zero
    aeb0:	da802215 	stw	r10,136(sp)
    aeb4:	003d8006 	br	a4b8 <__alt_data_end+0xfffca4b8>
    aeb8:	80c00007 	ldb	r3,0(r16)
    aebc:	003c0006 	br	9ec0 <__alt_data_end+0xfffc9ec0>
    aec0:	a080100c 	andi	r2,r20,64
    aec4:	d8001d85 	stb	zero,118(sp)
    aec8:	da802217 	ldw	r10,136(sp)
    aecc:	1000201e 	bne	r2,zero,af50 <___vfiprintf_internal_r+0x120c>
    aed0:	50800104 	addi	r2,r10,4
    aed4:	54800017 	ldw	r18,0(r10)
    aed8:	0027883a 	mov	r19,zero
    aedc:	483def0e 	bge	r9,zero,a69c <__alt_data_end+0xfffca69c>
    aee0:	94c6b03a 	or	r3,r18,r19
    aee4:	d8802215 	stw	r2,136(sp)
    aee8:	183d4e1e 	bne	r3,zero,a424 <__alt_data_end+0xfffca424>
    aeec:	0039883a 	mov	fp,zero
    aef0:	0005883a 	mov	r2,zero
    aef4:	003e0606 	br	a710 <__alt_data_end+0xfffca710>
    aef8:	d9402117 	ldw	r5,132(sp)
    aefc:	d9002017 	ldw	r4,128(sp)
    af00:	d9801a04 	addi	r6,sp,104
    af04:	da402c15 	stw	r9,176(sp)
    af08:	db802a15 	stw	r14,168(sp)
    af0c:	0009c300 	call	9c30 <__sprint_r.part.0>
    af10:	da402c17 	ldw	r9,176(sp)
    af14:	db802a17 	ldw	r14,168(sp)
    af18:	103ede1e 	bne	r2,zero,aa94 <__alt_data_end+0xfffcaa94>
    af1c:	d9401b17 	ldw	r5,108(sp)
    af20:	d8801c17 	ldw	r2,112(sp)
    af24:	d811883a 	mov	r8,sp
    af28:	29000044 	addi	r4,r5,1
    af2c:	003e7406 	br	a900 <__alt_data_end+0xfffca900>
    af30:	00bfffc4 	movi	r2,-1
    af34:	003c5806 	br	a098 <__alt_data_end+0xfffca098>
    af38:	d811883a 	mov	r8,sp
    af3c:	003ee806 	br	aae0 <__alt_data_end+0xfffcaae0>
    af40:	000b883a 	mov	r5,zero
    af44:	01000044 	movi	r4,1
    af48:	d811883a 	mov	r8,sp
    af4c:	003e7c06 	br	a940 <__alt_data_end+0xfffca940>
    af50:	50800104 	addi	r2,r10,4
    af54:	5480000b 	ldhu	r18,0(r10)
    af58:	0027883a 	mov	r19,zero
    af5c:	483dcf0e 	bge	r9,zero,a69c <__alt_data_end+0xfffca69c>
    af60:	003fdf06 	br	aee0 <__alt_data_end+0xfffcaee0>
    af64:	54800017 	ldw	r18,0(r10)
    af68:	52800104 	addi	r10,r10,4
    af6c:	0027883a 	mov	r19,zero
    af70:	da802215 	stw	r10,136(sp)
    af74:	003d5006 	br	a4b8 <__alt_data_end+0xfffca4b8>
    af78:	50800104 	addi	r2,r10,4
    af7c:	5480000b 	ldhu	r18,0(r10)
    af80:	0027883a 	mov	r19,zero
    af84:	483f7d0e 	bge	r9,zero,ad7c <__alt_data_end+0xfffcad7c>
    af88:	003ddc06 	br	a6fc <__alt_data_end+0xfffca6fc>
    af8c:	d8c02215 	stw	r3,136(sp)
    af90:	0039883a 	mov	fp,zero
    af94:	003ddb06 	br	a704 <__alt_data_end+0xfffca704>
    af98:	02800074 	movhi	r10,1
    af9c:	52810604 	addi	r10,r10,1048
    afa0:	da802415 	stw	r10,144(sp)
    afa4:	003e8306 	br	a9b4 <__alt_data_end+0xfffca9b4>
    afa8:	d8801c17 	ldw	r2,112(sp)
    afac:	dd002117 	ldw	r20,132(sp)
    afb0:	103eb926 	beq	r2,zero,aa98 <__alt_data_end+0xfffcaa98>
    afb4:	d9002017 	ldw	r4,128(sp)
    afb8:	d9801a04 	addi	r6,sp,104
    afbc:	a00b883a 	mov	r5,r20
    afc0:	0009c300 	call	9c30 <__sprint_r.part.0>
    afc4:	003eb406 	br	aa98 <__alt_data_end+0xfffcaa98>
    afc8:	80c00043 	ldbu	r3,1(r16)
    afcc:	a5000814 	ori	r20,r20,32
    afd0:	84000044 	addi	r16,r16,1
    afd4:	18c03fcc 	andi	r3,r3,255
    afd8:	18c0201c 	xori	r3,r3,128
    afdc:	18ffe004 	addi	r3,r3,-128
    afe0:	003bb706 	br	9ec0 <__alt_data_end+0xfffc9ec0>
    afe4:	a809883a 	mov	r4,r21
    afe8:	d8c02a15 	stw	r3,168(sp)
    afec:	da002b15 	stw	r8,172(sp)
    aff0:	0002f6c0 	call	2f6c <strlen>
    aff4:	d8c02a17 	ldw	r3,168(sp)
    aff8:	1027883a 	mov	r19,r2
    affc:	df001d83 	ldbu	fp,118(sp)
    b000:	d8c02215 	stw	r3,136(sp)
    b004:	0013883a 	mov	r9,zero
    b008:	da002b17 	ldw	r8,172(sp)
    b00c:	003c4d06 	br	a144 <__alt_data_end+0xfffca144>
    b010:	d9402117 	ldw	r5,132(sp)
    b014:	d9002017 	ldw	r4,128(sp)
    b018:	d9801a04 	addi	r6,sp,104
    b01c:	da402c15 	stw	r9,176(sp)
    b020:	0009c300 	call	9c30 <__sprint_r.part.0>
    b024:	da402c17 	ldw	r9,176(sp)
    b028:	103e9a1e 	bne	r2,zero,aa94 <__alt_data_end+0xfffcaa94>
    b02c:	d9401b17 	ldw	r5,108(sp)
    b030:	d8801c17 	ldw	r2,112(sp)
    b034:	d811883a 	mov	r8,sp
    b038:	29000044 	addi	r4,r5,1
    b03c:	003e4206 	br	a948 <__alt_data_end+0xfffca948>
    b040:	d9401b17 	ldw	r5,108(sp)
    b044:	01000074 	movhi	r4,1
    b048:	21010a04 	addi	r4,r4,1064
    b04c:	d9002415 	stw	r4,144(sp)
    b050:	29400044 	addi	r5,r5,1
    b054:	003c6d06 	br	a20c <__alt_data_end+0xfffca20c>
    b058:	0039883a 	mov	fp,zero
    b05c:	00800084 	movi	r2,2
    b060:	10803fcc 	andi	r2,r2,255
    b064:	01000044 	movi	r4,1
    b068:	11001e26 	beq	r2,r4,b0e4 <___vfiprintf_internal_r+0x13a0>
    b06c:	01000084 	movi	r4,2
    b070:	11001e1e 	bne	r2,r4,b0ec <___vfiprintf_internal_r+0x13a8>
    b074:	1829883a 	mov	r20,r3
    b078:	003eea06 	br	ac24 <__alt_data_end+0xfffcac24>
    b07c:	a007883a 	mov	r3,r20
    b080:	00800044 	movi	r2,1
    b084:	003ff606 	br	b060 <__alt_data_end+0xfffcb060>
    b088:	00800184 	movi	r2,6
    b08c:	1240012e 	bgeu	r2,r9,b094 <___vfiprintf_internal_r+0x1350>
    b090:	1013883a 	mov	r9,r2
    b094:	4827883a 	mov	r19,r9
    b098:	4825883a 	mov	r18,r9
    b09c:	48001516 	blt	r9,zero,b0f4 <___vfiprintf_internal_r+0x13b0>
    b0a0:	05400074 	movhi	r21,1
    b0a4:	d8c02215 	stw	r3,136(sp)
    b0a8:	ad40ab04 	addi	r21,r21,684
    b0ac:	003d1406 	br	a500 <__alt_data_end+0xfffca500>
    b0b0:	02800074 	movhi	r10,1
    b0b4:	52810604 	addi	r10,r10,1048
    b0b8:	da802415 	stw	r10,144(sp)
    b0bc:	200d883a 	mov	r6,r4
    b0c0:	003c9106 	br	a308 <__alt_data_end+0xfffca308>
    b0c4:	5021883a 	mov	r16,r10
    b0c8:	0013883a 	mov	r9,zero
    b0cc:	003b7d06 	br	9ec4 <__alt_data_end+0xfffc9ec4>
    b0d0:	4827883a 	mov	r19,r9
    b0d4:	df001d83 	ldbu	fp,118(sp)
    b0d8:	d8c02215 	stw	r3,136(sp)
    b0dc:	0013883a 	mov	r9,zero
    b0e0:	003c1806 	br	a144 <__alt_data_end+0xfffca144>
    b0e4:	1829883a 	mov	r20,r3
    b0e8:	003d1806 	br	a54c <__alt_data_end+0xfffca54c>
    b0ec:	1829883a 	mov	r20,r3
    b0f0:	003ccd06 	br	a428 <__alt_data_end+0xfffca428>
    b0f4:	0025883a 	mov	r18,zero
    b0f8:	003fe906 	br	b0a0 <__alt_data_end+0xfffcb0a0>
    b0fc:	d8802217 	ldw	r2,136(sp)
    b100:	80c00043 	ldbu	r3,1(r16)
    b104:	5021883a 	mov	r16,r10
    b108:	12400017 	ldw	r9,0(r2)
    b10c:	10800104 	addi	r2,r2,4
    b110:	d8802215 	stw	r2,136(sp)
    b114:	483faf0e 	bge	r9,zero,afd4 <__alt_data_end+0xfffcafd4>
    b118:	18c03fcc 	andi	r3,r3,255
    b11c:	18c0201c 	xori	r3,r3,128
    b120:	027fffc4 	movi	r9,-1
    b124:	18ffe004 	addi	r3,r3,-128
    b128:	003b6506 	br	9ec0 <__alt_data_end+0xfffc9ec0>
    b12c:	d9c01d85 	stb	r7,118(sp)
    b130:	003ca006 	br	a3b4 <__alt_data_end+0xfffca3b4>
    b134:	d9c01d85 	stb	r7,118(sp)
    b138:	003cad06 	br	a3f0 <__alt_data_end+0xfffca3f0>
    b13c:	d9c01d85 	stb	r7,118(sp)
    b140:	003d7d06 	br	a738 <__alt_data_end+0xfffca738>
    b144:	d9c01d85 	stb	r7,118(sp)
    b148:	003d5f06 	br	a6c8 <__alt_data_end+0xfffca6c8>
    b14c:	a080004c 	andi	r2,r20,1
    b150:	0039883a 	mov	fp,zero
    b154:	10000526 	beq	r2,zero,b16c <___vfiprintf_internal_r+0x1428>
    b158:	00800c04 	movi	r2,48
    b15c:	d88019c5 	stb	r2,103(sp)
    b160:	dcc02717 	ldw	r19,156(sp)
    b164:	dd4019c4 	addi	r21,sp,103
    b168:	003bf606 	br	a144 <__alt_data_end+0xfffca144>
    b16c:	0027883a 	mov	r19,zero
    b170:	dd401a04 	addi	r21,sp,104
    b174:	003bf306 	br	a144 <__alt_data_end+0xfffca144>
    b178:	d9c01d85 	stb	r7,118(sp)
    b17c:	003dc806 	br	a8a0 <__alt_data_end+0xfffca8a0>
    b180:	d9c01d85 	stb	r7,118(sp)
    b184:	003d3a06 	br	a670 <__alt_data_end+0xfffca670>
    b188:	d9c01d85 	stb	r7,118(sp)
    b18c:	003d2a06 	br	a638 <__alt_data_end+0xfffca638>
    b190:	d9c01d85 	stb	r7,118(sp)
    b194:	003cde06 	br	a510 <__alt_data_end+0xfffca510>
    b198:	d9c01d85 	stb	r7,118(sp)
    b19c:	003cbc06 	br	a490 <__alt_data_end+0xfffca490>

0000b1a0 <__vfiprintf_internal>:
    b1a0:	00800074 	movhi	r2,1
    b1a4:	10880504 	addi	r2,r2,8212
    b1a8:	300f883a 	mov	r7,r6
    b1ac:	280d883a 	mov	r6,r5
    b1b0:	200b883a 	mov	r5,r4
    b1b4:	11000017 	ldw	r4,0(r2)
    b1b8:	0009d441 	jmpi	9d44 <___vfiprintf_internal_r>

0000b1bc <__sbprintf>:
    b1bc:	2880030b 	ldhu	r2,12(r5)
    b1c0:	2ac01917 	ldw	r11,100(r5)
    b1c4:	2a80038b 	ldhu	r10,14(r5)
    b1c8:	2a400717 	ldw	r9,28(r5)
    b1cc:	2a000917 	ldw	r8,36(r5)
    b1d0:	defee204 	addi	sp,sp,-1144
    b1d4:	00c10004 	movi	r3,1024
    b1d8:	dc011a15 	stw	r16,1128(sp)
    b1dc:	10bfff4c 	andi	r2,r2,65533
    b1e0:	2821883a 	mov	r16,r5
    b1e4:	d8cb883a 	add	r5,sp,r3
    b1e8:	dc811c15 	stw	r18,1136(sp)
    b1ec:	dc411b15 	stw	r17,1132(sp)
    b1f0:	dfc11d15 	stw	ra,1140(sp)
    b1f4:	2025883a 	mov	r18,r4
    b1f8:	d881030d 	sth	r2,1036(sp)
    b1fc:	dac11915 	stw	r11,1124(sp)
    b200:	da81038d 	sth	r10,1038(sp)
    b204:	da410715 	stw	r9,1052(sp)
    b208:	da010915 	stw	r8,1060(sp)
    b20c:	dec10015 	stw	sp,1024(sp)
    b210:	dec10415 	stw	sp,1040(sp)
    b214:	d8c10215 	stw	r3,1032(sp)
    b218:	d8c10515 	stw	r3,1044(sp)
    b21c:	d8010615 	stw	zero,1048(sp)
    b220:	0009d440 	call	9d44 <___vfiprintf_internal_r>
    b224:	1023883a 	mov	r17,r2
    b228:	10000416 	blt	r2,zero,b23c <__sbprintf+0x80>
    b22c:	d9410004 	addi	r5,sp,1024
    b230:	9009883a 	mov	r4,r18
    b234:	00072bc0 	call	72bc <_fflush_r>
    b238:	10000d1e 	bne	r2,zero,b270 <__sbprintf+0xb4>
    b23c:	d881030b 	ldhu	r2,1036(sp)
    b240:	1080100c 	andi	r2,r2,64
    b244:	10000326 	beq	r2,zero,b254 <__sbprintf+0x98>
    b248:	8080030b 	ldhu	r2,12(r16)
    b24c:	10801014 	ori	r2,r2,64
    b250:	8080030d 	sth	r2,12(r16)
    b254:	8805883a 	mov	r2,r17
    b258:	dfc11d17 	ldw	ra,1140(sp)
    b25c:	dc811c17 	ldw	r18,1136(sp)
    b260:	dc411b17 	ldw	r17,1132(sp)
    b264:	dc011a17 	ldw	r16,1128(sp)
    b268:	dec11e04 	addi	sp,sp,1144
    b26c:	f800283a 	ret
    b270:	047fffc4 	movi	r17,-1
    b274:	003ff106 	br	b23c <__alt_data_end+0xfffcb23c>

0000b278 <_write_r>:
    b278:	defffd04 	addi	sp,sp,-12
    b27c:	2805883a 	mov	r2,r5
    b280:	dc000015 	stw	r16,0(sp)
    b284:	04000074 	movhi	r16,1
    b288:	dc400115 	stw	r17,4(sp)
    b28c:	300b883a 	mov	r5,r6
    b290:	840ecf04 	addi	r16,r16,15164
    b294:	2023883a 	mov	r17,r4
    b298:	380d883a 	mov	r6,r7
    b29c:	1009883a 	mov	r4,r2
    b2a0:	dfc00215 	stw	ra,8(sp)
    b2a4:	80000015 	stw	zero,0(r16)
    b2a8:	000fe880 	call	fe88 <write>
    b2ac:	00ffffc4 	movi	r3,-1
    b2b0:	10c00526 	beq	r2,r3,b2c8 <_write_r+0x50>
    b2b4:	dfc00217 	ldw	ra,8(sp)
    b2b8:	dc400117 	ldw	r17,4(sp)
    b2bc:	dc000017 	ldw	r16,0(sp)
    b2c0:	dec00304 	addi	sp,sp,12
    b2c4:	f800283a 	ret
    b2c8:	80c00017 	ldw	r3,0(r16)
    b2cc:	183ff926 	beq	r3,zero,b2b4 <__alt_data_end+0xfffcb2b4>
    b2d0:	88c00015 	stw	r3,0(r17)
    b2d4:	003ff706 	br	b2b4 <__alt_data_end+0xfffcb2b4>

0000b2d8 <_close_r>:
    b2d8:	defffd04 	addi	sp,sp,-12
    b2dc:	dc000015 	stw	r16,0(sp)
    b2e0:	04000074 	movhi	r16,1
    b2e4:	dc400115 	stw	r17,4(sp)
    b2e8:	840ecf04 	addi	r16,r16,15164
    b2ec:	2023883a 	mov	r17,r4
    b2f0:	2809883a 	mov	r4,r5
    b2f4:	dfc00215 	stw	ra,8(sp)
    b2f8:	80000015 	stw	zero,0(r16)
    b2fc:	0001cf00 	call	1cf0 <close>
    b300:	00ffffc4 	movi	r3,-1
    b304:	10c00526 	beq	r2,r3,b31c <_close_r+0x44>
    b308:	dfc00217 	ldw	ra,8(sp)
    b30c:	dc400117 	ldw	r17,4(sp)
    b310:	dc000017 	ldw	r16,0(sp)
    b314:	dec00304 	addi	sp,sp,12
    b318:	f800283a 	ret
    b31c:	80c00017 	ldw	r3,0(r16)
    b320:	183ff926 	beq	r3,zero,b308 <__alt_data_end+0xfffcb308>
    b324:	88c00015 	stw	r3,0(r17)
    b328:	003ff706 	br	b308 <__alt_data_end+0xfffcb308>

0000b32c <_calloc_r>:
    b32c:	298b383a 	mul	r5,r5,r6
    b330:	defffe04 	addi	sp,sp,-8
    b334:	dfc00115 	stw	ra,4(sp)
    b338:	dc000015 	stw	r16,0(sp)
    b33c:	0007f3c0 	call	7f3c <_malloc_r>
    b340:	10002926 	beq	r2,zero,b3e8 <_calloc_r+0xbc>
    b344:	11bfff17 	ldw	r6,-4(r2)
    b348:	1021883a 	mov	r16,r2
    b34c:	00bfff04 	movi	r2,-4
    b350:	308c703a 	and	r6,r6,r2
    b354:	00c00904 	movi	r3,36
    b358:	308d883a 	add	r6,r6,r2
    b35c:	19801636 	bltu	r3,r6,b3b8 <_calloc_r+0x8c>
    b360:	008004c4 	movi	r2,19
    b364:	11800b2e 	bgeu	r2,r6,b394 <_calloc_r+0x68>
    b368:	80000015 	stw	zero,0(r16)
    b36c:	80000115 	stw	zero,4(r16)
    b370:	008006c4 	movi	r2,27
    b374:	11801a2e 	bgeu	r2,r6,b3e0 <_calloc_r+0xb4>
    b378:	80000215 	stw	zero,8(r16)
    b37c:	80000315 	stw	zero,12(r16)
    b380:	30c0151e 	bne	r6,r3,b3d8 <_calloc_r+0xac>
    b384:	80000415 	stw	zero,16(r16)
    b388:	80800604 	addi	r2,r16,24
    b38c:	80000515 	stw	zero,20(r16)
    b390:	00000106 	br	b398 <_calloc_r+0x6c>
    b394:	8005883a 	mov	r2,r16
    b398:	10000015 	stw	zero,0(r2)
    b39c:	10000115 	stw	zero,4(r2)
    b3a0:	10000215 	stw	zero,8(r2)
    b3a4:	8005883a 	mov	r2,r16
    b3a8:	dfc00117 	ldw	ra,4(sp)
    b3ac:	dc000017 	ldw	r16,0(sp)
    b3b0:	dec00204 	addi	sp,sp,8
    b3b4:	f800283a 	ret
    b3b8:	000b883a 	mov	r5,zero
    b3bc:	8009883a 	mov	r4,r16
    b3c0:	000882c0 	call	882c <memset>
    b3c4:	8005883a 	mov	r2,r16
    b3c8:	dfc00117 	ldw	ra,4(sp)
    b3cc:	dc000017 	ldw	r16,0(sp)
    b3d0:	dec00204 	addi	sp,sp,8
    b3d4:	f800283a 	ret
    b3d8:	80800404 	addi	r2,r16,16
    b3dc:	003fee06 	br	b398 <__alt_data_end+0xfffcb398>
    b3e0:	80800204 	addi	r2,r16,8
    b3e4:	003fec06 	br	b398 <__alt_data_end+0xfffcb398>
    b3e8:	0005883a 	mov	r2,zero
    b3ec:	003fee06 	br	b3a8 <__alt_data_end+0xfffcb3a8>

0000b3f0 <_fclose_r>:
    b3f0:	28003926 	beq	r5,zero,b4d8 <_fclose_r+0xe8>
    b3f4:	defffc04 	addi	sp,sp,-16
    b3f8:	dc400115 	stw	r17,4(sp)
    b3fc:	dc000015 	stw	r16,0(sp)
    b400:	dfc00315 	stw	ra,12(sp)
    b404:	dc800215 	stw	r18,8(sp)
    b408:	2023883a 	mov	r17,r4
    b40c:	2821883a 	mov	r16,r5
    b410:	20000226 	beq	r4,zero,b41c <_fclose_r+0x2c>
    b414:	20800e17 	ldw	r2,56(r4)
    b418:	10002726 	beq	r2,zero,b4b8 <_fclose_r+0xc8>
    b41c:	8080030f 	ldh	r2,12(r16)
    b420:	1000071e 	bne	r2,zero,b440 <_fclose_r+0x50>
    b424:	0005883a 	mov	r2,zero
    b428:	dfc00317 	ldw	ra,12(sp)
    b42c:	dc800217 	ldw	r18,8(sp)
    b430:	dc400117 	ldw	r17,4(sp)
    b434:	dc000017 	ldw	r16,0(sp)
    b438:	dec00404 	addi	sp,sp,16
    b43c:	f800283a 	ret
    b440:	800b883a 	mov	r5,r16
    b444:	8809883a 	mov	r4,r17
    b448:	00070a00 	call	70a0 <__sflush_r>
    b44c:	1025883a 	mov	r18,r2
    b450:	80800b17 	ldw	r2,44(r16)
    b454:	10000426 	beq	r2,zero,b468 <_fclose_r+0x78>
    b458:	81400717 	ldw	r5,28(r16)
    b45c:	8809883a 	mov	r4,r17
    b460:	103ee83a 	callr	r2
    b464:	10001616 	blt	r2,zero,b4c0 <_fclose_r+0xd0>
    b468:	8080030b 	ldhu	r2,12(r16)
    b46c:	1080200c 	andi	r2,r2,128
    b470:	1000151e 	bne	r2,zero,b4c8 <_fclose_r+0xd8>
    b474:	81400c17 	ldw	r5,48(r16)
    b478:	28000526 	beq	r5,zero,b490 <_fclose_r+0xa0>
    b47c:	80801004 	addi	r2,r16,64
    b480:	28800226 	beq	r5,r2,b48c <_fclose_r+0x9c>
    b484:	8809883a 	mov	r4,r17
    b488:	000780c0 	call	780c <_free_r>
    b48c:	80000c15 	stw	zero,48(r16)
    b490:	81401117 	ldw	r5,68(r16)
    b494:	28000326 	beq	r5,zero,b4a4 <_fclose_r+0xb4>
    b498:	8809883a 	mov	r4,r17
    b49c:	000780c0 	call	780c <_free_r>
    b4a0:	80001115 	stw	zero,68(r16)
    b4a4:	00076a80 	call	76a8 <__sfp_lock_acquire>
    b4a8:	8000030d 	sth	zero,12(r16)
    b4ac:	00076ac0 	call	76ac <__sfp_lock_release>
    b4b0:	9005883a 	mov	r2,r18
    b4b4:	003fdc06 	br	b428 <__alt_data_end+0xfffcb428>
    b4b8:	00076980 	call	7698 <__sinit>
    b4bc:	003fd706 	br	b41c <__alt_data_end+0xfffcb41c>
    b4c0:	04bfffc4 	movi	r18,-1
    b4c4:	003fe806 	br	b468 <__alt_data_end+0xfffcb468>
    b4c8:	81400417 	ldw	r5,16(r16)
    b4cc:	8809883a 	mov	r4,r17
    b4d0:	000780c0 	call	780c <_free_r>
    b4d4:	003fe706 	br	b474 <__alt_data_end+0xfffcb474>
    b4d8:	0005883a 	mov	r2,zero
    b4dc:	f800283a 	ret

0000b4e0 <fclose>:
    b4e0:	00800074 	movhi	r2,1
    b4e4:	10880504 	addi	r2,r2,8212
    b4e8:	200b883a 	mov	r5,r4
    b4ec:	11000017 	ldw	r4,0(r2)
    b4f0:	000b3f01 	jmpi	b3f0 <_fclose_r>

0000b4f4 <__fputwc>:
    b4f4:	defff804 	addi	sp,sp,-32
    b4f8:	dcc00415 	stw	r19,16(sp)
    b4fc:	dc800315 	stw	r18,12(sp)
    b500:	dc000115 	stw	r16,4(sp)
    b504:	dfc00715 	stw	ra,28(sp)
    b508:	dd400615 	stw	r21,24(sp)
    b50c:	dd000515 	stw	r20,20(sp)
    b510:	dc400215 	stw	r17,8(sp)
    b514:	2027883a 	mov	r19,r4
    b518:	2825883a 	mov	r18,r5
    b51c:	3021883a 	mov	r16,r6
    b520:	0007d2c0 	call	7d2c <__locale_mb_cur_max>
    b524:	00c00044 	movi	r3,1
    b528:	10c03e26 	beq	r2,r3,b624 <__fputwc+0x130>
    b52c:	81c01704 	addi	r7,r16,92
    b530:	900d883a 	mov	r6,r18
    b534:	d80b883a 	mov	r5,sp
    b538:	9809883a 	mov	r4,r19
    b53c:	000c3e80 	call	c3e8 <_wcrtomb_r>
    b540:	1029883a 	mov	r20,r2
    b544:	00bfffc4 	movi	r2,-1
    b548:	a0802026 	beq	r20,r2,b5cc <__fputwc+0xd8>
    b54c:	d9400003 	ldbu	r5,0(sp)
    b550:	a0001c26 	beq	r20,zero,b5c4 <__fputwc+0xd0>
    b554:	0023883a 	mov	r17,zero
    b558:	05400284 	movi	r21,10
    b55c:	00000906 	br	b584 <__fputwc+0x90>
    b560:	80800017 	ldw	r2,0(r16)
    b564:	11400005 	stb	r5,0(r2)
    b568:	80c00017 	ldw	r3,0(r16)
    b56c:	18c00044 	addi	r3,r3,1
    b570:	80c00015 	stw	r3,0(r16)
    b574:	8c400044 	addi	r17,r17,1
    b578:	dc45883a 	add	r2,sp,r17
    b57c:	8d00112e 	bgeu	r17,r20,b5c4 <__fputwc+0xd0>
    b580:	11400003 	ldbu	r5,0(r2)
    b584:	80c00217 	ldw	r3,8(r16)
    b588:	18ffffc4 	addi	r3,r3,-1
    b58c:	80c00215 	stw	r3,8(r16)
    b590:	183ff30e 	bge	r3,zero,b560 <__alt_data_end+0xfffcb560>
    b594:	80800617 	ldw	r2,24(r16)
    b598:	18801916 	blt	r3,r2,b600 <__fputwc+0x10c>
    b59c:	80800017 	ldw	r2,0(r16)
    b5a0:	11400005 	stb	r5,0(r2)
    b5a4:	80800017 	ldw	r2,0(r16)
    b5a8:	10c00003 	ldbu	r3,0(r2)
    b5ac:	10800044 	addi	r2,r2,1
    b5b0:	1d402326 	beq	r3,r21,b640 <__fputwc+0x14c>
    b5b4:	80800015 	stw	r2,0(r16)
    b5b8:	8c400044 	addi	r17,r17,1
    b5bc:	dc45883a 	add	r2,sp,r17
    b5c0:	8d3fef36 	bltu	r17,r20,b580 <__alt_data_end+0xfffcb580>
    b5c4:	9005883a 	mov	r2,r18
    b5c8:	00000406 	br	b5dc <__fputwc+0xe8>
    b5cc:	80c0030b 	ldhu	r3,12(r16)
    b5d0:	a005883a 	mov	r2,r20
    b5d4:	18c01014 	ori	r3,r3,64
    b5d8:	80c0030d 	sth	r3,12(r16)
    b5dc:	dfc00717 	ldw	ra,28(sp)
    b5e0:	dd400617 	ldw	r21,24(sp)
    b5e4:	dd000517 	ldw	r20,20(sp)
    b5e8:	dcc00417 	ldw	r19,16(sp)
    b5ec:	dc800317 	ldw	r18,12(sp)
    b5f0:	dc400217 	ldw	r17,8(sp)
    b5f4:	dc000117 	ldw	r16,4(sp)
    b5f8:	dec00804 	addi	sp,sp,32
    b5fc:	f800283a 	ret
    b600:	800d883a 	mov	r6,r16
    b604:	29403fcc 	andi	r5,r5,255
    b608:	9809883a 	mov	r4,r19
    b60c:	00052d40 	call	52d4 <__swbuf_r>
    b610:	10bfffe0 	cmpeqi	r2,r2,-1
    b614:	10803fcc 	andi	r2,r2,255
    b618:	103fd626 	beq	r2,zero,b574 <__alt_data_end+0xfffcb574>
    b61c:	00bfffc4 	movi	r2,-1
    b620:	003fee06 	br	b5dc <__alt_data_end+0xfffcb5dc>
    b624:	90ffffc4 	addi	r3,r18,-1
    b628:	01003f84 	movi	r4,254
    b62c:	20ffbf36 	bltu	r4,r3,b52c <__alt_data_end+0xfffcb52c>
    b630:	900b883a 	mov	r5,r18
    b634:	dc800005 	stb	r18,0(sp)
    b638:	1029883a 	mov	r20,r2
    b63c:	003fc506 	br	b554 <__alt_data_end+0xfffcb554>
    b640:	800d883a 	mov	r6,r16
    b644:	a80b883a 	mov	r5,r21
    b648:	9809883a 	mov	r4,r19
    b64c:	00052d40 	call	52d4 <__swbuf_r>
    b650:	10bfffe0 	cmpeqi	r2,r2,-1
    b654:	003fef06 	br	b614 <__alt_data_end+0xfffcb614>

0000b658 <_fputwc_r>:
    b658:	3080030b 	ldhu	r2,12(r6)
    b65c:	10c8000c 	andi	r3,r2,8192
    b660:	1800051e 	bne	r3,zero,b678 <_fputwc_r+0x20>
    b664:	30c01917 	ldw	r3,100(r6)
    b668:	10880014 	ori	r2,r2,8192
    b66c:	3080030d 	sth	r2,12(r6)
    b670:	18880014 	ori	r2,r3,8192
    b674:	30801915 	stw	r2,100(r6)
    b678:	000b4f41 	jmpi	b4f4 <__fputwc>

0000b67c <fputwc>:
    b67c:	00800074 	movhi	r2,1
    b680:	defffc04 	addi	sp,sp,-16
    b684:	10880504 	addi	r2,r2,8212
    b688:	dc000115 	stw	r16,4(sp)
    b68c:	14000017 	ldw	r16,0(r2)
    b690:	dc400215 	stw	r17,8(sp)
    b694:	dfc00315 	stw	ra,12(sp)
    b698:	2023883a 	mov	r17,r4
    b69c:	80000226 	beq	r16,zero,b6a8 <fputwc+0x2c>
    b6a0:	80800e17 	ldw	r2,56(r16)
    b6a4:	10001026 	beq	r2,zero,b6e8 <fputwc+0x6c>
    b6a8:	2880030b 	ldhu	r2,12(r5)
    b6ac:	10c8000c 	andi	r3,r2,8192
    b6b0:	1800051e 	bne	r3,zero,b6c8 <fputwc+0x4c>
    b6b4:	28c01917 	ldw	r3,100(r5)
    b6b8:	10880014 	ori	r2,r2,8192
    b6bc:	2880030d 	sth	r2,12(r5)
    b6c0:	18880014 	ori	r2,r3,8192
    b6c4:	28801915 	stw	r2,100(r5)
    b6c8:	280d883a 	mov	r6,r5
    b6cc:	8009883a 	mov	r4,r16
    b6d0:	880b883a 	mov	r5,r17
    b6d4:	dfc00317 	ldw	ra,12(sp)
    b6d8:	dc400217 	ldw	r17,8(sp)
    b6dc:	dc000117 	ldw	r16,4(sp)
    b6e0:	dec00404 	addi	sp,sp,16
    b6e4:	000b4f41 	jmpi	b4f4 <__fputwc>
    b6e8:	8009883a 	mov	r4,r16
    b6ec:	d9400015 	stw	r5,0(sp)
    b6f0:	00076980 	call	7698 <__sinit>
    b6f4:	d9400017 	ldw	r5,0(sp)
    b6f8:	003feb06 	br	b6a8 <__alt_data_end+0xfffcb6a8>

0000b6fc <_fstat_r>:
    b6fc:	defffd04 	addi	sp,sp,-12
    b700:	2805883a 	mov	r2,r5
    b704:	dc000015 	stw	r16,0(sp)
    b708:	04000074 	movhi	r16,1
    b70c:	dc400115 	stw	r17,4(sp)
    b710:	840ecf04 	addi	r16,r16,15164
    b714:	2023883a 	mov	r17,r4
    b718:	300b883a 	mov	r5,r6
    b71c:	1009883a 	mov	r4,r2
    b720:	dfc00215 	stw	ra,8(sp)
    b724:	80000015 	stw	zero,0(r16)
    b728:	000f97c0 	call	f97c <fstat>
    b72c:	00ffffc4 	movi	r3,-1
    b730:	10c00526 	beq	r2,r3,b748 <_fstat_r+0x4c>
    b734:	dfc00217 	ldw	ra,8(sp)
    b738:	dc400117 	ldw	r17,4(sp)
    b73c:	dc000017 	ldw	r16,0(sp)
    b740:	dec00304 	addi	sp,sp,12
    b744:	f800283a 	ret
    b748:	80c00017 	ldw	r3,0(r16)
    b74c:	183ff926 	beq	r3,zero,b734 <__alt_data_end+0xfffcb734>
    b750:	88c00015 	stw	r3,0(r17)
    b754:	003ff706 	br	b734 <__alt_data_end+0xfffcb734>

0000b758 <__sfvwrite_r>:
    b758:	30800217 	ldw	r2,8(r6)
    b75c:	10006726 	beq	r2,zero,b8fc <__sfvwrite_r+0x1a4>
    b760:	28c0030b 	ldhu	r3,12(r5)
    b764:	defff404 	addi	sp,sp,-48
    b768:	dd400715 	stw	r21,28(sp)
    b76c:	dd000615 	stw	r20,24(sp)
    b770:	dc000215 	stw	r16,8(sp)
    b774:	dfc00b15 	stw	ra,44(sp)
    b778:	df000a15 	stw	fp,40(sp)
    b77c:	ddc00915 	stw	r23,36(sp)
    b780:	dd800815 	stw	r22,32(sp)
    b784:	dcc00515 	stw	r19,20(sp)
    b788:	dc800415 	stw	r18,16(sp)
    b78c:	dc400315 	stw	r17,12(sp)
    b790:	1880020c 	andi	r2,r3,8
    b794:	2821883a 	mov	r16,r5
    b798:	202b883a 	mov	r21,r4
    b79c:	3029883a 	mov	r20,r6
    b7a0:	10002726 	beq	r2,zero,b840 <__sfvwrite_r+0xe8>
    b7a4:	28800417 	ldw	r2,16(r5)
    b7a8:	10002526 	beq	r2,zero,b840 <__sfvwrite_r+0xe8>
    b7ac:	1880008c 	andi	r2,r3,2
    b7b0:	a4400017 	ldw	r17,0(r20)
    b7b4:	10002a26 	beq	r2,zero,b860 <__sfvwrite_r+0x108>
    b7b8:	05a00034 	movhi	r22,32768
    b7bc:	0027883a 	mov	r19,zero
    b7c0:	0025883a 	mov	r18,zero
    b7c4:	b5bf0004 	addi	r22,r22,-1024
    b7c8:	980d883a 	mov	r6,r19
    b7cc:	a809883a 	mov	r4,r21
    b7d0:	90004626 	beq	r18,zero,b8ec <__sfvwrite_r+0x194>
    b7d4:	900f883a 	mov	r7,r18
    b7d8:	b480022e 	bgeu	r22,r18,b7e4 <__sfvwrite_r+0x8c>
    b7dc:	01e00034 	movhi	r7,32768
    b7e0:	39ff0004 	addi	r7,r7,-1024
    b7e4:	80800917 	ldw	r2,36(r16)
    b7e8:	81400717 	ldw	r5,28(r16)
    b7ec:	103ee83a 	callr	r2
    b7f0:	0080570e 	bge	zero,r2,b950 <__sfvwrite_r+0x1f8>
    b7f4:	a0c00217 	ldw	r3,8(r20)
    b7f8:	98a7883a 	add	r19,r19,r2
    b7fc:	90a5c83a 	sub	r18,r18,r2
    b800:	1885c83a 	sub	r2,r3,r2
    b804:	a0800215 	stw	r2,8(r20)
    b808:	103fef1e 	bne	r2,zero,b7c8 <__alt_data_end+0xfffcb7c8>
    b80c:	0005883a 	mov	r2,zero
    b810:	dfc00b17 	ldw	ra,44(sp)
    b814:	df000a17 	ldw	fp,40(sp)
    b818:	ddc00917 	ldw	r23,36(sp)
    b81c:	dd800817 	ldw	r22,32(sp)
    b820:	dd400717 	ldw	r21,28(sp)
    b824:	dd000617 	ldw	r20,24(sp)
    b828:	dcc00517 	ldw	r19,20(sp)
    b82c:	dc800417 	ldw	r18,16(sp)
    b830:	dc400317 	ldw	r17,12(sp)
    b834:	dc000217 	ldw	r16,8(sp)
    b838:	dec00c04 	addi	sp,sp,48
    b83c:	f800283a 	ret
    b840:	800b883a 	mov	r5,r16
    b844:	a809883a 	mov	r4,r21
    b848:	000542c0 	call	542c <__swsetup_r>
    b84c:	1000eb1e 	bne	r2,zero,bbfc <__sfvwrite_r+0x4a4>
    b850:	80c0030b 	ldhu	r3,12(r16)
    b854:	a4400017 	ldw	r17,0(r20)
    b858:	1880008c 	andi	r2,r3,2
    b85c:	103fd61e 	bne	r2,zero,b7b8 <__alt_data_end+0xfffcb7b8>
    b860:	1880004c 	andi	r2,r3,1
    b864:	10003f1e 	bne	r2,zero,b964 <__sfvwrite_r+0x20c>
    b868:	0039883a 	mov	fp,zero
    b86c:	0025883a 	mov	r18,zero
    b870:	90001a26 	beq	r18,zero,b8dc <__sfvwrite_r+0x184>
    b874:	1880800c 	andi	r2,r3,512
    b878:	84c00217 	ldw	r19,8(r16)
    b87c:	10002126 	beq	r2,zero,b904 <__sfvwrite_r+0x1ac>
    b880:	982f883a 	mov	r23,r19
    b884:	94c09336 	bltu	r18,r19,bad4 <__sfvwrite_r+0x37c>
    b888:	1881200c 	andi	r2,r3,1152
    b88c:	10009e1e 	bne	r2,zero,bb08 <__sfvwrite_r+0x3b0>
    b890:	81000017 	ldw	r4,0(r16)
    b894:	b80d883a 	mov	r6,r23
    b898:	e00b883a 	mov	r5,fp
    b89c:	000bcc80 	call	bcc8 <memmove>
    b8a0:	80c00217 	ldw	r3,8(r16)
    b8a4:	81000017 	ldw	r4,0(r16)
    b8a8:	9005883a 	mov	r2,r18
    b8ac:	1ce7c83a 	sub	r19,r3,r19
    b8b0:	25cf883a 	add	r7,r4,r23
    b8b4:	84c00215 	stw	r19,8(r16)
    b8b8:	81c00015 	stw	r7,0(r16)
    b8bc:	a0c00217 	ldw	r3,8(r20)
    b8c0:	e0b9883a 	add	fp,fp,r2
    b8c4:	90a5c83a 	sub	r18,r18,r2
    b8c8:	18a7c83a 	sub	r19,r3,r2
    b8cc:	a4c00215 	stw	r19,8(r20)
    b8d0:	983fce26 	beq	r19,zero,b80c <__alt_data_end+0xfffcb80c>
    b8d4:	80c0030b 	ldhu	r3,12(r16)
    b8d8:	903fe61e 	bne	r18,zero,b874 <__alt_data_end+0xfffcb874>
    b8dc:	8f000017 	ldw	fp,0(r17)
    b8e0:	8c800117 	ldw	r18,4(r17)
    b8e4:	8c400204 	addi	r17,r17,8
    b8e8:	003fe106 	br	b870 <__alt_data_end+0xfffcb870>
    b8ec:	8cc00017 	ldw	r19,0(r17)
    b8f0:	8c800117 	ldw	r18,4(r17)
    b8f4:	8c400204 	addi	r17,r17,8
    b8f8:	003fb306 	br	b7c8 <__alt_data_end+0xfffcb7c8>
    b8fc:	0005883a 	mov	r2,zero
    b900:	f800283a 	ret
    b904:	81000017 	ldw	r4,0(r16)
    b908:	80800417 	ldw	r2,16(r16)
    b90c:	11005736 	bltu	r2,r4,ba6c <__sfvwrite_r+0x314>
    b910:	85c00517 	ldw	r23,20(r16)
    b914:	95c05536 	bltu	r18,r23,ba6c <__sfvwrite_r+0x314>
    b918:	00a00034 	movhi	r2,32768
    b91c:	10bfffc4 	addi	r2,r2,-1
    b920:	9009883a 	mov	r4,r18
    b924:	1480012e 	bgeu	r2,r18,b92c <__sfvwrite_r+0x1d4>
    b928:	1009883a 	mov	r4,r2
    b92c:	b80b883a 	mov	r5,r23
    b930:	000d0f00 	call	d0f0 <__divsi3>
    b934:	15cf383a 	mul	r7,r2,r23
    b938:	81400717 	ldw	r5,28(r16)
    b93c:	80800917 	ldw	r2,36(r16)
    b940:	e00d883a 	mov	r6,fp
    b944:	a809883a 	mov	r4,r21
    b948:	103ee83a 	callr	r2
    b94c:	00bfdb16 	blt	zero,r2,b8bc <__alt_data_end+0xfffcb8bc>
    b950:	8080030b 	ldhu	r2,12(r16)
    b954:	10801014 	ori	r2,r2,64
    b958:	8080030d 	sth	r2,12(r16)
    b95c:	00bfffc4 	movi	r2,-1
    b960:	003fab06 	br	b810 <__alt_data_end+0xfffcb810>
    b964:	0027883a 	mov	r19,zero
    b968:	0011883a 	mov	r8,zero
    b96c:	0039883a 	mov	fp,zero
    b970:	0025883a 	mov	r18,zero
    b974:	90001f26 	beq	r18,zero,b9f4 <__sfvwrite_r+0x29c>
    b978:	40005a26 	beq	r8,zero,bae4 <__sfvwrite_r+0x38c>
    b97c:	982d883a 	mov	r22,r19
    b980:	94c0012e 	bgeu	r18,r19,b988 <__sfvwrite_r+0x230>
    b984:	902d883a 	mov	r22,r18
    b988:	81000017 	ldw	r4,0(r16)
    b98c:	80800417 	ldw	r2,16(r16)
    b990:	b02f883a 	mov	r23,r22
    b994:	81c00517 	ldw	r7,20(r16)
    b998:	1100032e 	bgeu	r2,r4,b9a8 <__sfvwrite_r+0x250>
    b99c:	80c00217 	ldw	r3,8(r16)
    b9a0:	38c7883a 	add	r3,r7,r3
    b9a4:	1d801816 	blt	r3,r22,ba08 <__sfvwrite_r+0x2b0>
    b9a8:	b1c03e16 	blt	r22,r7,baa4 <__sfvwrite_r+0x34c>
    b9ac:	80800917 	ldw	r2,36(r16)
    b9b0:	81400717 	ldw	r5,28(r16)
    b9b4:	e00d883a 	mov	r6,fp
    b9b8:	da000115 	stw	r8,4(sp)
    b9bc:	a809883a 	mov	r4,r21
    b9c0:	103ee83a 	callr	r2
    b9c4:	102f883a 	mov	r23,r2
    b9c8:	da000117 	ldw	r8,4(sp)
    b9cc:	00bfe00e 	bge	zero,r2,b950 <__alt_data_end+0xfffcb950>
    b9d0:	9de7c83a 	sub	r19,r19,r23
    b9d4:	98001f26 	beq	r19,zero,ba54 <__sfvwrite_r+0x2fc>
    b9d8:	a0800217 	ldw	r2,8(r20)
    b9dc:	e5f9883a 	add	fp,fp,r23
    b9e0:	95e5c83a 	sub	r18,r18,r23
    b9e4:	15efc83a 	sub	r23,r2,r23
    b9e8:	a5c00215 	stw	r23,8(r20)
    b9ec:	b83f8726 	beq	r23,zero,b80c <__alt_data_end+0xfffcb80c>
    b9f0:	903fe11e 	bne	r18,zero,b978 <__alt_data_end+0xfffcb978>
    b9f4:	8f000017 	ldw	fp,0(r17)
    b9f8:	8c800117 	ldw	r18,4(r17)
    b9fc:	0011883a 	mov	r8,zero
    ba00:	8c400204 	addi	r17,r17,8
    ba04:	003fdb06 	br	b974 <__alt_data_end+0xfffcb974>
    ba08:	180d883a 	mov	r6,r3
    ba0c:	e00b883a 	mov	r5,fp
    ba10:	da000115 	stw	r8,4(sp)
    ba14:	d8c00015 	stw	r3,0(sp)
    ba18:	000bcc80 	call	bcc8 <memmove>
    ba1c:	d8c00017 	ldw	r3,0(sp)
    ba20:	80800017 	ldw	r2,0(r16)
    ba24:	800b883a 	mov	r5,r16
    ba28:	a809883a 	mov	r4,r21
    ba2c:	10c5883a 	add	r2,r2,r3
    ba30:	80800015 	stw	r2,0(r16)
    ba34:	d8c00015 	stw	r3,0(sp)
    ba38:	00072bc0 	call	72bc <_fflush_r>
    ba3c:	d8c00017 	ldw	r3,0(sp)
    ba40:	da000117 	ldw	r8,4(sp)
    ba44:	103fc21e 	bne	r2,zero,b950 <__alt_data_end+0xfffcb950>
    ba48:	182f883a 	mov	r23,r3
    ba4c:	9de7c83a 	sub	r19,r19,r23
    ba50:	983fe11e 	bne	r19,zero,b9d8 <__alt_data_end+0xfffcb9d8>
    ba54:	800b883a 	mov	r5,r16
    ba58:	a809883a 	mov	r4,r21
    ba5c:	00072bc0 	call	72bc <_fflush_r>
    ba60:	103fbb1e 	bne	r2,zero,b950 <__alt_data_end+0xfffcb950>
    ba64:	0011883a 	mov	r8,zero
    ba68:	003fdb06 	br	b9d8 <__alt_data_end+0xfffcb9d8>
    ba6c:	94c0012e 	bgeu	r18,r19,ba74 <__sfvwrite_r+0x31c>
    ba70:	9027883a 	mov	r19,r18
    ba74:	980d883a 	mov	r6,r19
    ba78:	e00b883a 	mov	r5,fp
    ba7c:	000bcc80 	call	bcc8 <memmove>
    ba80:	80800217 	ldw	r2,8(r16)
    ba84:	80c00017 	ldw	r3,0(r16)
    ba88:	14c5c83a 	sub	r2,r2,r19
    ba8c:	1cc7883a 	add	r3,r3,r19
    ba90:	80800215 	stw	r2,8(r16)
    ba94:	80c00015 	stw	r3,0(r16)
    ba98:	10004326 	beq	r2,zero,bba8 <__sfvwrite_r+0x450>
    ba9c:	9805883a 	mov	r2,r19
    baa0:	003f8606 	br	b8bc <__alt_data_end+0xfffcb8bc>
    baa4:	b00d883a 	mov	r6,r22
    baa8:	e00b883a 	mov	r5,fp
    baac:	da000115 	stw	r8,4(sp)
    bab0:	000bcc80 	call	bcc8 <memmove>
    bab4:	80800217 	ldw	r2,8(r16)
    bab8:	80c00017 	ldw	r3,0(r16)
    babc:	da000117 	ldw	r8,4(sp)
    bac0:	1585c83a 	sub	r2,r2,r22
    bac4:	1dad883a 	add	r22,r3,r22
    bac8:	80800215 	stw	r2,8(r16)
    bacc:	85800015 	stw	r22,0(r16)
    bad0:	003fbf06 	br	b9d0 <__alt_data_end+0xfffcb9d0>
    bad4:	81000017 	ldw	r4,0(r16)
    bad8:	9027883a 	mov	r19,r18
    badc:	902f883a 	mov	r23,r18
    bae0:	003f6c06 	br	b894 <__alt_data_end+0xfffcb894>
    bae4:	900d883a 	mov	r6,r18
    bae8:	01400284 	movi	r5,10
    baec:	e009883a 	mov	r4,fp
    baf0:	00087480 	call	8748 <memchr>
    baf4:	10003e26 	beq	r2,zero,bbf0 <__sfvwrite_r+0x498>
    baf8:	10800044 	addi	r2,r2,1
    bafc:	1727c83a 	sub	r19,r2,fp
    bb00:	02000044 	movi	r8,1
    bb04:	003f9d06 	br	b97c <__alt_data_end+0xfffcb97c>
    bb08:	80800517 	ldw	r2,20(r16)
    bb0c:	81400417 	ldw	r5,16(r16)
    bb10:	81c00017 	ldw	r7,0(r16)
    bb14:	10a7883a 	add	r19,r2,r2
    bb18:	9885883a 	add	r2,r19,r2
    bb1c:	1026d7fa 	srli	r19,r2,31
    bb20:	396dc83a 	sub	r22,r7,r5
    bb24:	b1000044 	addi	r4,r22,1
    bb28:	9885883a 	add	r2,r19,r2
    bb2c:	1027d07a 	srai	r19,r2,1
    bb30:	2485883a 	add	r2,r4,r18
    bb34:	980d883a 	mov	r6,r19
    bb38:	9880022e 	bgeu	r19,r2,bb44 <__sfvwrite_r+0x3ec>
    bb3c:	1027883a 	mov	r19,r2
    bb40:	100d883a 	mov	r6,r2
    bb44:	18c1000c 	andi	r3,r3,1024
    bb48:	18001c26 	beq	r3,zero,bbbc <__sfvwrite_r+0x464>
    bb4c:	300b883a 	mov	r5,r6
    bb50:	a809883a 	mov	r4,r21
    bb54:	0007f3c0 	call	7f3c <_malloc_r>
    bb58:	102f883a 	mov	r23,r2
    bb5c:	10002926 	beq	r2,zero,bc04 <__sfvwrite_r+0x4ac>
    bb60:	81400417 	ldw	r5,16(r16)
    bb64:	b00d883a 	mov	r6,r22
    bb68:	1009883a 	mov	r4,r2
    bb6c:	0002c500 	call	2c50 <memcpy>
    bb70:	8080030b 	ldhu	r2,12(r16)
    bb74:	00fedfc4 	movi	r3,-1153
    bb78:	10c4703a 	and	r2,r2,r3
    bb7c:	10802014 	ori	r2,r2,128
    bb80:	8080030d 	sth	r2,12(r16)
    bb84:	bd89883a 	add	r4,r23,r22
    bb88:	9d8fc83a 	sub	r7,r19,r22
    bb8c:	85c00415 	stw	r23,16(r16)
    bb90:	84c00515 	stw	r19,20(r16)
    bb94:	81000015 	stw	r4,0(r16)
    bb98:	9027883a 	mov	r19,r18
    bb9c:	81c00215 	stw	r7,8(r16)
    bba0:	902f883a 	mov	r23,r18
    bba4:	003f3b06 	br	b894 <__alt_data_end+0xfffcb894>
    bba8:	800b883a 	mov	r5,r16
    bbac:	a809883a 	mov	r4,r21
    bbb0:	00072bc0 	call	72bc <_fflush_r>
    bbb4:	103fb926 	beq	r2,zero,ba9c <__alt_data_end+0xfffcba9c>
    bbb8:	003f6506 	br	b950 <__alt_data_end+0xfffcb950>
    bbbc:	a809883a 	mov	r4,r21
    bbc0:	000be840 	call	be84 <_realloc_r>
    bbc4:	102f883a 	mov	r23,r2
    bbc8:	103fee1e 	bne	r2,zero,bb84 <__alt_data_end+0xfffcbb84>
    bbcc:	81400417 	ldw	r5,16(r16)
    bbd0:	a809883a 	mov	r4,r21
    bbd4:	000780c0 	call	780c <_free_r>
    bbd8:	8080030b 	ldhu	r2,12(r16)
    bbdc:	00ffdfc4 	movi	r3,-129
    bbe0:	1884703a 	and	r2,r3,r2
    bbe4:	00c00304 	movi	r3,12
    bbe8:	a8c00015 	stw	r3,0(r21)
    bbec:	003f5906 	br	b954 <__alt_data_end+0xfffcb954>
    bbf0:	94c00044 	addi	r19,r18,1
    bbf4:	02000044 	movi	r8,1
    bbf8:	003f6006 	br	b97c <__alt_data_end+0xfffcb97c>
    bbfc:	00bfffc4 	movi	r2,-1
    bc00:	003f0306 	br	b810 <__alt_data_end+0xfffcb810>
    bc04:	00800304 	movi	r2,12
    bc08:	a8800015 	stw	r2,0(r21)
    bc0c:	8080030b 	ldhu	r2,12(r16)
    bc10:	003f5006 	br	b954 <__alt_data_end+0xfffcb954>

0000bc14 <_isatty_r>:
    bc14:	defffd04 	addi	sp,sp,-12
    bc18:	dc000015 	stw	r16,0(sp)
    bc1c:	04000074 	movhi	r16,1
    bc20:	dc400115 	stw	r17,4(sp)
    bc24:	840ecf04 	addi	r16,r16,15164
    bc28:	2023883a 	mov	r17,r4
    bc2c:	2809883a 	mov	r4,r5
    bc30:	dfc00215 	stw	ra,8(sp)
    bc34:	80000015 	stw	zero,0(r16)
    bc38:	000fa680 	call	fa68 <isatty>
    bc3c:	00ffffc4 	movi	r3,-1
    bc40:	10c00526 	beq	r2,r3,bc58 <_isatty_r+0x44>
    bc44:	dfc00217 	ldw	ra,8(sp)
    bc48:	dc400117 	ldw	r17,4(sp)
    bc4c:	dc000017 	ldw	r16,0(sp)
    bc50:	dec00304 	addi	sp,sp,12
    bc54:	f800283a 	ret
    bc58:	80c00017 	ldw	r3,0(r16)
    bc5c:	183ff926 	beq	r3,zero,bc44 <__alt_data_end+0xfffcbc44>
    bc60:	88c00015 	stw	r3,0(r17)
    bc64:	003ff706 	br	bc44 <__alt_data_end+0xfffcbc44>

0000bc68 <_lseek_r>:
    bc68:	defffd04 	addi	sp,sp,-12
    bc6c:	2805883a 	mov	r2,r5
    bc70:	dc000015 	stw	r16,0(sp)
    bc74:	04000074 	movhi	r16,1
    bc78:	dc400115 	stw	r17,4(sp)
    bc7c:	300b883a 	mov	r5,r6
    bc80:	840ecf04 	addi	r16,r16,15164
    bc84:	2023883a 	mov	r17,r4
    bc88:	380d883a 	mov	r6,r7
    bc8c:	1009883a 	mov	r4,r2
    bc90:	dfc00215 	stw	ra,8(sp)
    bc94:	80000015 	stw	zero,0(r16)
    bc98:	000fb480 	call	fb48 <lseek>
    bc9c:	00ffffc4 	movi	r3,-1
    bca0:	10c00526 	beq	r2,r3,bcb8 <_lseek_r+0x50>
    bca4:	dfc00217 	ldw	ra,8(sp)
    bca8:	dc400117 	ldw	r17,4(sp)
    bcac:	dc000017 	ldw	r16,0(sp)
    bcb0:	dec00304 	addi	sp,sp,12
    bcb4:	f800283a 	ret
    bcb8:	80c00017 	ldw	r3,0(r16)
    bcbc:	183ff926 	beq	r3,zero,bca4 <__alt_data_end+0xfffcbca4>
    bcc0:	88c00015 	stw	r3,0(r17)
    bcc4:	003ff706 	br	bca4 <__alt_data_end+0xfffcbca4>

0000bcc8 <memmove>:
    bcc8:	2005883a 	mov	r2,r4
    bccc:	29000b2e 	bgeu	r5,r4,bcfc <memmove+0x34>
    bcd0:	298f883a 	add	r7,r5,r6
    bcd4:	21c0092e 	bgeu	r4,r7,bcfc <memmove+0x34>
    bcd8:	2187883a 	add	r3,r4,r6
    bcdc:	198bc83a 	sub	r5,r3,r6
    bce0:	30004826 	beq	r6,zero,be04 <memmove+0x13c>
    bce4:	39ffffc4 	addi	r7,r7,-1
    bce8:	39000003 	ldbu	r4,0(r7)
    bcec:	18ffffc4 	addi	r3,r3,-1
    bcf0:	19000005 	stb	r4,0(r3)
    bcf4:	28fffb1e 	bne	r5,r3,bce4 <__alt_data_end+0xfffcbce4>
    bcf8:	f800283a 	ret
    bcfc:	00c003c4 	movi	r3,15
    bd00:	1980412e 	bgeu	r3,r6,be08 <memmove+0x140>
    bd04:	2886b03a 	or	r3,r5,r2
    bd08:	18c000cc 	andi	r3,r3,3
    bd0c:	1800401e 	bne	r3,zero,be10 <memmove+0x148>
    bd10:	33fffc04 	addi	r15,r6,-16
    bd14:	781ed13a 	srli	r15,r15,4
    bd18:	28c00104 	addi	r3,r5,4
    bd1c:	13400104 	addi	r13,r2,4
    bd20:	781c913a 	slli	r14,r15,4
    bd24:	2b000204 	addi	r12,r5,8
    bd28:	12c00204 	addi	r11,r2,8
    bd2c:	73800504 	addi	r14,r14,20
    bd30:	2a800304 	addi	r10,r5,12
    bd34:	12400304 	addi	r9,r2,12
    bd38:	2b9d883a 	add	r14,r5,r14
    bd3c:	2811883a 	mov	r8,r5
    bd40:	100f883a 	mov	r7,r2
    bd44:	41000017 	ldw	r4,0(r8)
    bd48:	39c00404 	addi	r7,r7,16
    bd4c:	18c00404 	addi	r3,r3,16
    bd50:	393ffc15 	stw	r4,-16(r7)
    bd54:	193ffc17 	ldw	r4,-16(r3)
    bd58:	6b400404 	addi	r13,r13,16
    bd5c:	5ac00404 	addi	r11,r11,16
    bd60:	693ffc15 	stw	r4,-16(r13)
    bd64:	61000017 	ldw	r4,0(r12)
    bd68:	4a400404 	addi	r9,r9,16
    bd6c:	42000404 	addi	r8,r8,16
    bd70:	593ffc15 	stw	r4,-16(r11)
    bd74:	51000017 	ldw	r4,0(r10)
    bd78:	63000404 	addi	r12,r12,16
    bd7c:	52800404 	addi	r10,r10,16
    bd80:	493ffc15 	stw	r4,-16(r9)
    bd84:	1bbfef1e 	bne	r3,r14,bd44 <__alt_data_end+0xfffcbd44>
    bd88:	79000044 	addi	r4,r15,1
    bd8c:	2008913a 	slli	r4,r4,4
    bd90:	328003cc 	andi	r10,r6,15
    bd94:	02c000c4 	movi	r11,3
    bd98:	1107883a 	add	r3,r2,r4
    bd9c:	290b883a 	add	r5,r5,r4
    bda0:	5a801e2e 	bgeu	r11,r10,be1c <memmove+0x154>
    bda4:	1813883a 	mov	r9,r3
    bda8:	2811883a 	mov	r8,r5
    bdac:	500f883a 	mov	r7,r10
    bdb0:	41000017 	ldw	r4,0(r8)
    bdb4:	4a400104 	addi	r9,r9,4
    bdb8:	39ffff04 	addi	r7,r7,-4
    bdbc:	493fff15 	stw	r4,-4(r9)
    bdc0:	42000104 	addi	r8,r8,4
    bdc4:	59fffa36 	bltu	r11,r7,bdb0 <__alt_data_end+0xfffcbdb0>
    bdc8:	513fff04 	addi	r4,r10,-4
    bdcc:	2008d0ba 	srli	r4,r4,2
    bdd0:	318000cc 	andi	r6,r6,3
    bdd4:	21000044 	addi	r4,r4,1
    bdd8:	2109883a 	add	r4,r4,r4
    bddc:	2109883a 	add	r4,r4,r4
    bde0:	1907883a 	add	r3,r3,r4
    bde4:	290b883a 	add	r5,r5,r4
    bde8:	30000b26 	beq	r6,zero,be18 <memmove+0x150>
    bdec:	198d883a 	add	r6,r3,r6
    bdf0:	29c00003 	ldbu	r7,0(r5)
    bdf4:	18c00044 	addi	r3,r3,1
    bdf8:	29400044 	addi	r5,r5,1
    bdfc:	19ffffc5 	stb	r7,-1(r3)
    be00:	19bffb1e 	bne	r3,r6,bdf0 <__alt_data_end+0xfffcbdf0>
    be04:	f800283a 	ret
    be08:	1007883a 	mov	r3,r2
    be0c:	003ff606 	br	bde8 <__alt_data_end+0xfffcbde8>
    be10:	1007883a 	mov	r3,r2
    be14:	003ff506 	br	bdec <__alt_data_end+0xfffcbdec>
    be18:	f800283a 	ret
    be1c:	500d883a 	mov	r6,r10
    be20:	003ff106 	br	bde8 <__alt_data_end+0xfffcbde8>

0000be24 <_read_r>:
    be24:	defffd04 	addi	sp,sp,-12
    be28:	2805883a 	mov	r2,r5
    be2c:	dc000015 	stw	r16,0(sp)
    be30:	04000074 	movhi	r16,1
    be34:	dc400115 	stw	r17,4(sp)
    be38:	300b883a 	mov	r5,r6
    be3c:	840ecf04 	addi	r16,r16,15164
    be40:	2023883a 	mov	r17,r4
    be44:	380d883a 	mov	r6,r7
    be48:	1009883a 	mov	r4,r2
    be4c:	dfc00215 	stw	ra,8(sp)
    be50:	80000015 	stw	zero,0(r16)
    be54:	000fca00 	call	fca0 <read>
    be58:	00ffffc4 	movi	r3,-1
    be5c:	10c00526 	beq	r2,r3,be74 <_read_r+0x50>
    be60:	dfc00217 	ldw	ra,8(sp)
    be64:	dc400117 	ldw	r17,4(sp)
    be68:	dc000017 	ldw	r16,0(sp)
    be6c:	dec00304 	addi	sp,sp,12
    be70:	f800283a 	ret
    be74:	80c00017 	ldw	r3,0(r16)
    be78:	183ff926 	beq	r3,zero,be60 <__alt_data_end+0xfffcbe60>
    be7c:	88c00015 	stw	r3,0(r17)
    be80:	003ff706 	br	be60 <__alt_data_end+0xfffcbe60>

0000be84 <_realloc_r>:
    be84:	defff604 	addi	sp,sp,-40
    be88:	dc800215 	stw	r18,8(sp)
    be8c:	dfc00915 	stw	ra,36(sp)
    be90:	df000815 	stw	fp,32(sp)
    be94:	ddc00715 	stw	r23,28(sp)
    be98:	dd800615 	stw	r22,24(sp)
    be9c:	dd400515 	stw	r21,20(sp)
    bea0:	dd000415 	stw	r20,16(sp)
    bea4:	dcc00315 	stw	r19,12(sp)
    bea8:	dc400115 	stw	r17,4(sp)
    beac:	dc000015 	stw	r16,0(sp)
    beb0:	3025883a 	mov	r18,r6
    beb4:	2800b726 	beq	r5,zero,c194 <_realloc_r+0x310>
    beb8:	282b883a 	mov	r21,r5
    bebc:	2029883a 	mov	r20,r4
    bec0:	000fc1c0 	call	fc1c <__malloc_lock>
    bec4:	a8bfff17 	ldw	r2,-4(r21)
    bec8:	043fff04 	movi	r16,-4
    becc:	90c002c4 	addi	r3,r18,11
    bed0:	01000584 	movi	r4,22
    bed4:	acfffe04 	addi	r19,r21,-8
    bed8:	1420703a 	and	r16,r2,r16
    bedc:	20c0332e 	bgeu	r4,r3,bfac <_realloc_r+0x128>
    bee0:	047ffe04 	movi	r17,-8
    bee4:	1c62703a 	and	r17,r3,r17
    bee8:	8807883a 	mov	r3,r17
    beec:	88005816 	blt	r17,zero,c050 <_realloc_r+0x1cc>
    bef0:	8c805736 	bltu	r17,r18,c050 <_realloc_r+0x1cc>
    bef4:	80c0300e 	bge	r16,r3,bfb8 <_realloc_r+0x134>
    bef8:	07000074 	movhi	fp,1
    befc:	e706f704 	addi	fp,fp,7132
    bf00:	e1c00217 	ldw	r7,8(fp)
    bf04:	9c09883a 	add	r4,r19,r16
    bf08:	22000117 	ldw	r8,4(r4)
    bf0c:	21c06326 	beq	r4,r7,c09c <_realloc_r+0x218>
    bf10:	017fff84 	movi	r5,-2
    bf14:	414a703a 	and	r5,r8,r5
    bf18:	214b883a 	add	r5,r4,r5
    bf1c:	29800117 	ldw	r6,4(r5)
    bf20:	3180004c 	andi	r6,r6,1
    bf24:	30003f26 	beq	r6,zero,c024 <_realloc_r+0x1a0>
    bf28:	1080004c 	andi	r2,r2,1
    bf2c:	10008326 	beq	r2,zero,c13c <_realloc_r+0x2b8>
    bf30:	900b883a 	mov	r5,r18
    bf34:	a009883a 	mov	r4,r20
    bf38:	0007f3c0 	call	7f3c <_malloc_r>
    bf3c:	1025883a 	mov	r18,r2
    bf40:	10011e26 	beq	r2,zero,c3bc <_realloc_r+0x538>
    bf44:	a93fff17 	ldw	r4,-4(r21)
    bf48:	10fffe04 	addi	r3,r2,-8
    bf4c:	00bfff84 	movi	r2,-2
    bf50:	2084703a 	and	r2,r4,r2
    bf54:	9885883a 	add	r2,r19,r2
    bf58:	1880ee26 	beq	r3,r2,c314 <_realloc_r+0x490>
    bf5c:	81bfff04 	addi	r6,r16,-4
    bf60:	00800904 	movi	r2,36
    bf64:	1180b836 	bltu	r2,r6,c248 <_realloc_r+0x3c4>
    bf68:	00c004c4 	movi	r3,19
    bf6c:	19809636 	bltu	r3,r6,c1c8 <_realloc_r+0x344>
    bf70:	9005883a 	mov	r2,r18
    bf74:	a807883a 	mov	r3,r21
    bf78:	19000017 	ldw	r4,0(r3)
    bf7c:	11000015 	stw	r4,0(r2)
    bf80:	19000117 	ldw	r4,4(r3)
    bf84:	11000115 	stw	r4,4(r2)
    bf88:	18c00217 	ldw	r3,8(r3)
    bf8c:	10c00215 	stw	r3,8(r2)
    bf90:	a80b883a 	mov	r5,r21
    bf94:	a009883a 	mov	r4,r20
    bf98:	000780c0 	call	780c <_free_r>
    bf9c:	a009883a 	mov	r4,r20
    bfa0:	000fc400 	call	fc40 <__malloc_unlock>
    bfa4:	9005883a 	mov	r2,r18
    bfa8:	00001206 	br	bff4 <_realloc_r+0x170>
    bfac:	00c00404 	movi	r3,16
    bfb0:	1823883a 	mov	r17,r3
    bfb4:	003fce06 	br	bef0 <__alt_data_end+0xfffcbef0>
    bfb8:	a825883a 	mov	r18,r21
    bfbc:	8445c83a 	sub	r2,r16,r17
    bfc0:	00c003c4 	movi	r3,15
    bfc4:	18802636 	bltu	r3,r2,c060 <_realloc_r+0x1dc>
    bfc8:	99800117 	ldw	r6,4(r19)
    bfcc:	9c07883a 	add	r3,r19,r16
    bfd0:	3180004c 	andi	r6,r6,1
    bfd4:	3420b03a 	or	r16,r6,r16
    bfd8:	9c000115 	stw	r16,4(r19)
    bfdc:	18800117 	ldw	r2,4(r3)
    bfe0:	10800054 	ori	r2,r2,1
    bfe4:	18800115 	stw	r2,4(r3)
    bfe8:	a009883a 	mov	r4,r20
    bfec:	000fc400 	call	fc40 <__malloc_unlock>
    bff0:	9005883a 	mov	r2,r18
    bff4:	dfc00917 	ldw	ra,36(sp)
    bff8:	df000817 	ldw	fp,32(sp)
    bffc:	ddc00717 	ldw	r23,28(sp)
    c000:	dd800617 	ldw	r22,24(sp)
    c004:	dd400517 	ldw	r21,20(sp)
    c008:	dd000417 	ldw	r20,16(sp)
    c00c:	dcc00317 	ldw	r19,12(sp)
    c010:	dc800217 	ldw	r18,8(sp)
    c014:	dc400117 	ldw	r17,4(sp)
    c018:	dc000017 	ldw	r16,0(sp)
    c01c:	dec00a04 	addi	sp,sp,40
    c020:	f800283a 	ret
    c024:	017fff04 	movi	r5,-4
    c028:	414a703a 	and	r5,r8,r5
    c02c:	814d883a 	add	r6,r16,r5
    c030:	30c01f16 	blt	r6,r3,c0b0 <_realloc_r+0x22c>
    c034:	20800317 	ldw	r2,12(r4)
    c038:	20c00217 	ldw	r3,8(r4)
    c03c:	a825883a 	mov	r18,r21
    c040:	3021883a 	mov	r16,r6
    c044:	18800315 	stw	r2,12(r3)
    c048:	10c00215 	stw	r3,8(r2)
    c04c:	003fdb06 	br	bfbc <__alt_data_end+0xfffcbfbc>
    c050:	00800304 	movi	r2,12
    c054:	a0800015 	stw	r2,0(r20)
    c058:	0005883a 	mov	r2,zero
    c05c:	003fe506 	br	bff4 <__alt_data_end+0xfffcbff4>
    c060:	98c00117 	ldw	r3,4(r19)
    c064:	9c4b883a 	add	r5,r19,r17
    c068:	11000054 	ori	r4,r2,1
    c06c:	18c0004c 	andi	r3,r3,1
    c070:	1c62b03a 	or	r17,r3,r17
    c074:	9c400115 	stw	r17,4(r19)
    c078:	29000115 	stw	r4,4(r5)
    c07c:	2885883a 	add	r2,r5,r2
    c080:	10c00117 	ldw	r3,4(r2)
    c084:	29400204 	addi	r5,r5,8
    c088:	a009883a 	mov	r4,r20
    c08c:	18c00054 	ori	r3,r3,1
    c090:	10c00115 	stw	r3,4(r2)
    c094:	000780c0 	call	780c <_free_r>
    c098:	003fd306 	br	bfe8 <__alt_data_end+0xfffcbfe8>
    c09c:	017fff04 	movi	r5,-4
    c0a0:	414a703a 	and	r5,r8,r5
    c0a4:	89800404 	addi	r6,r17,16
    c0a8:	8151883a 	add	r8,r16,r5
    c0ac:	4180590e 	bge	r8,r6,c214 <_realloc_r+0x390>
    c0b0:	1080004c 	andi	r2,r2,1
    c0b4:	103f9e1e 	bne	r2,zero,bf30 <__alt_data_end+0xfffcbf30>
    c0b8:	adbffe17 	ldw	r22,-8(r21)
    c0bc:	00bfff04 	movi	r2,-4
    c0c0:	9dadc83a 	sub	r22,r19,r22
    c0c4:	b1800117 	ldw	r6,4(r22)
    c0c8:	3084703a 	and	r2,r6,r2
    c0cc:	20002026 	beq	r4,zero,c150 <_realloc_r+0x2cc>
    c0d0:	80af883a 	add	r23,r16,r2
    c0d4:	b96f883a 	add	r23,r23,r5
    c0d8:	21c05f26 	beq	r4,r7,c258 <_realloc_r+0x3d4>
    c0dc:	b8c01c16 	blt	r23,r3,c150 <_realloc_r+0x2cc>
    c0e0:	20800317 	ldw	r2,12(r4)
    c0e4:	20c00217 	ldw	r3,8(r4)
    c0e8:	81bfff04 	addi	r6,r16,-4
    c0ec:	01000904 	movi	r4,36
    c0f0:	18800315 	stw	r2,12(r3)
    c0f4:	10c00215 	stw	r3,8(r2)
    c0f8:	b0c00217 	ldw	r3,8(r22)
    c0fc:	b0800317 	ldw	r2,12(r22)
    c100:	b4800204 	addi	r18,r22,8
    c104:	18800315 	stw	r2,12(r3)
    c108:	10c00215 	stw	r3,8(r2)
    c10c:	21801b36 	bltu	r4,r6,c17c <_realloc_r+0x2f8>
    c110:	008004c4 	movi	r2,19
    c114:	1180352e 	bgeu	r2,r6,c1ec <_realloc_r+0x368>
    c118:	a8800017 	ldw	r2,0(r21)
    c11c:	b0800215 	stw	r2,8(r22)
    c120:	a8800117 	ldw	r2,4(r21)
    c124:	b0800315 	stw	r2,12(r22)
    c128:	008006c4 	movi	r2,27
    c12c:	11807f36 	bltu	r2,r6,c32c <_realloc_r+0x4a8>
    c130:	b0800404 	addi	r2,r22,16
    c134:	ad400204 	addi	r21,r21,8
    c138:	00002d06 	br	c1f0 <_realloc_r+0x36c>
    c13c:	adbffe17 	ldw	r22,-8(r21)
    c140:	00bfff04 	movi	r2,-4
    c144:	9dadc83a 	sub	r22,r19,r22
    c148:	b1000117 	ldw	r4,4(r22)
    c14c:	2084703a 	and	r2,r4,r2
    c150:	b03f7726 	beq	r22,zero,bf30 <__alt_data_end+0xfffcbf30>
    c154:	80af883a 	add	r23,r16,r2
    c158:	b8ff7516 	blt	r23,r3,bf30 <__alt_data_end+0xfffcbf30>
    c15c:	b0800317 	ldw	r2,12(r22)
    c160:	b0c00217 	ldw	r3,8(r22)
    c164:	81bfff04 	addi	r6,r16,-4
    c168:	01000904 	movi	r4,36
    c16c:	18800315 	stw	r2,12(r3)
    c170:	10c00215 	stw	r3,8(r2)
    c174:	b4800204 	addi	r18,r22,8
    c178:	21bfe52e 	bgeu	r4,r6,c110 <__alt_data_end+0xfffcc110>
    c17c:	a80b883a 	mov	r5,r21
    c180:	9009883a 	mov	r4,r18
    c184:	000bcc80 	call	bcc8 <memmove>
    c188:	b821883a 	mov	r16,r23
    c18c:	b027883a 	mov	r19,r22
    c190:	003f8a06 	br	bfbc <__alt_data_end+0xfffcbfbc>
    c194:	300b883a 	mov	r5,r6
    c198:	dfc00917 	ldw	ra,36(sp)
    c19c:	df000817 	ldw	fp,32(sp)
    c1a0:	ddc00717 	ldw	r23,28(sp)
    c1a4:	dd800617 	ldw	r22,24(sp)
    c1a8:	dd400517 	ldw	r21,20(sp)
    c1ac:	dd000417 	ldw	r20,16(sp)
    c1b0:	dcc00317 	ldw	r19,12(sp)
    c1b4:	dc800217 	ldw	r18,8(sp)
    c1b8:	dc400117 	ldw	r17,4(sp)
    c1bc:	dc000017 	ldw	r16,0(sp)
    c1c0:	dec00a04 	addi	sp,sp,40
    c1c4:	0007f3c1 	jmpi	7f3c <_malloc_r>
    c1c8:	a8c00017 	ldw	r3,0(r21)
    c1cc:	90c00015 	stw	r3,0(r18)
    c1d0:	a8c00117 	ldw	r3,4(r21)
    c1d4:	90c00115 	stw	r3,4(r18)
    c1d8:	00c006c4 	movi	r3,27
    c1dc:	19804536 	bltu	r3,r6,c2f4 <_realloc_r+0x470>
    c1e0:	90800204 	addi	r2,r18,8
    c1e4:	a8c00204 	addi	r3,r21,8
    c1e8:	003f6306 	br	bf78 <__alt_data_end+0xfffcbf78>
    c1ec:	9005883a 	mov	r2,r18
    c1f0:	a8c00017 	ldw	r3,0(r21)
    c1f4:	b821883a 	mov	r16,r23
    c1f8:	b027883a 	mov	r19,r22
    c1fc:	10c00015 	stw	r3,0(r2)
    c200:	a8c00117 	ldw	r3,4(r21)
    c204:	10c00115 	stw	r3,4(r2)
    c208:	a8c00217 	ldw	r3,8(r21)
    c20c:	10c00215 	stw	r3,8(r2)
    c210:	003f6a06 	br	bfbc <__alt_data_end+0xfffcbfbc>
    c214:	9c67883a 	add	r19,r19,r17
    c218:	4445c83a 	sub	r2,r8,r17
    c21c:	e4c00215 	stw	r19,8(fp)
    c220:	10800054 	ori	r2,r2,1
    c224:	98800115 	stw	r2,4(r19)
    c228:	a8bfff17 	ldw	r2,-4(r21)
    c22c:	a009883a 	mov	r4,r20
    c230:	1080004c 	andi	r2,r2,1
    c234:	1462b03a 	or	r17,r2,r17
    c238:	ac7fff15 	stw	r17,-4(r21)
    c23c:	000fc400 	call	fc40 <__malloc_unlock>
    c240:	a805883a 	mov	r2,r21
    c244:	003f6b06 	br	bff4 <__alt_data_end+0xfffcbff4>
    c248:	a80b883a 	mov	r5,r21
    c24c:	9009883a 	mov	r4,r18
    c250:	000bcc80 	call	bcc8 <memmove>
    c254:	003f4e06 	br	bf90 <__alt_data_end+0xfffcbf90>
    c258:	89000404 	addi	r4,r17,16
    c25c:	b93fbc16 	blt	r23,r4,c150 <__alt_data_end+0xfffcc150>
    c260:	b0800317 	ldw	r2,12(r22)
    c264:	b0c00217 	ldw	r3,8(r22)
    c268:	81bfff04 	addi	r6,r16,-4
    c26c:	01000904 	movi	r4,36
    c270:	18800315 	stw	r2,12(r3)
    c274:	10c00215 	stw	r3,8(r2)
    c278:	b4800204 	addi	r18,r22,8
    c27c:	21804336 	bltu	r4,r6,c38c <_realloc_r+0x508>
    c280:	008004c4 	movi	r2,19
    c284:	11803f2e 	bgeu	r2,r6,c384 <_realloc_r+0x500>
    c288:	a8800017 	ldw	r2,0(r21)
    c28c:	b0800215 	stw	r2,8(r22)
    c290:	a8800117 	ldw	r2,4(r21)
    c294:	b0800315 	stw	r2,12(r22)
    c298:	008006c4 	movi	r2,27
    c29c:	11803f36 	bltu	r2,r6,c39c <_realloc_r+0x518>
    c2a0:	b0800404 	addi	r2,r22,16
    c2a4:	ad400204 	addi	r21,r21,8
    c2a8:	a8c00017 	ldw	r3,0(r21)
    c2ac:	10c00015 	stw	r3,0(r2)
    c2b0:	a8c00117 	ldw	r3,4(r21)
    c2b4:	10c00115 	stw	r3,4(r2)
    c2b8:	a8c00217 	ldw	r3,8(r21)
    c2bc:	10c00215 	stw	r3,8(r2)
    c2c0:	b447883a 	add	r3,r22,r17
    c2c4:	bc45c83a 	sub	r2,r23,r17
    c2c8:	e0c00215 	stw	r3,8(fp)
    c2cc:	10800054 	ori	r2,r2,1
    c2d0:	18800115 	stw	r2,4(r3)
    c2d4:	b0800117 	ldw	r2,4(r22)
    c2d8:	a009883a 	mov	r4,r20
    c2dc:	1080004c 	andi	r2,r2,1
    c2e0:	1462b03a 	or	r17,r2,r17
    c2e4:	b4400115 	stw	r17,4(r22)
    c2e8:	000fc400 	call	fc40 <__malloc_unlock>
    c2ec:	9005883a 	mov	r2,r18
    c2f0:	003f4006 	br	bff4 <__alt_data_end+0xfffcbff4>
    c2f4:	a8c00217 	ldw	r3,8(r21)
    c2f8:	90c00215 	stw	r3,8(r18)
    c2fc:	a8c00317 	ldw	r3,12(r21)
    c300:	90c00315 	stw	r3,12(r18)
    c304:	30801126 	beq	r6,r2,c34c <_realloc_r+0x4c8>
    c308:	90800404 	addi	r2,r18,16
    c30c:	a8c00404 	addi	r3,r21,16
    c310:	003f1906 	br	bf78 <__alt_data_end+0xfffcbf78>
    c314:	90ffff17 	ldw	r3,-4(r18)
    c318:	00bfff04 	movi	r2,-4
    c31c:	a825883a 	mov	r18,r21
    c320:	1884703a 	and	r2,r3,r2
    c324:	80a1883a 	add	r16,r16,r2
    c328:	003f2406 	br	bfbc <__alt_data_end+0xfffcbfbc>
    c32c:	a8800217 	ldw	r2,8(r21)
    c330:	b0800415 	stw	r2,16(r22)
    c334:	a8800317 	ldw	r2,12(r21)
    c338:	b0800515 	stw	r2,20(r22)
    c33c:	31000a26 	beq	r6,r4,c368 <_realloc_r+0x4e4>
    c340:	b0800604 	addi	r2,r22,24
    c344:	ad400404 	addi	r21,r21,16
    c348:	003fa906 	br	c1f0 <__alt_data_end+0xfffcc1f0>
    c34c:	a9000417 	ldw	r4,16(r21)
    c350:	90800604 	addi	r2,r18,24
    c354:	a8c00604 	addi	r3,r21,24
    c358:	91000415 	stw	r4,16(r18)
    c35c:	a9000517 	ldw	r4,20(r21)
    c360:	91000515 	stw	r4,20(r18)
    c364:	003f0406 	br	bf78 <__alt_data_end+0xfffcbf78>
    c368:	a8c00417 	ldw	r3,16(r21)
    c36c:	ad400604 	addi	r21,r21,24
    c370:	b0800804 	addi	r2,r22,32
    c374:	b0c00615 	stw	r3,24(r22)
    c378:	a8ffff17 	ldw	r3,-4(r21)
    c37c:	b0c00715 	stw	r3,28(r22)
    c380:	003f9b06 	br	c1f0 <__alt_data_end+0xfffcc1f0>
    c384:	9005883a 	mov	r2,r18
    c388:	003fc706 	br	c2a8 <__alt_data_end+0xfffcc2a8>
    c38c:	a80b883a 	mov	r5,r21
    c390:	9009883a 	mov	r4,r18
    c394:	000bcc80 	call	bcc8 <memmove>
    c398:	003fc906 	br	c2c0 <__alt_data_end+0xfffcc2c0>
    c39c:	a8800217 	ldw	r2,8(r21)
    c3a0:	b0800415 	stw	r2,16(r22)
    c3a4:	a8800317 	ldw	r2,12(r21)
    c3a8:	b0800515 	stw	r2,20(r22)
    c3ac:	31000726 	beq	r6,r4,c3cc <_realloc_r+0x548>
    c3b0:	b0800604 	addi	r2,r22,24
    c3b4:	ad400404 	addi	r21,r21,16
    c3b8:	003fbb06 	br	c2a8 <__alt_data_end+0xfffcc2a8>
    c3bc:	a009883a 	mov	r4,r20
    c3c0:	000fc400 	call	fc40 <__malloc_unlock>
    c3c4:	0005883a 	mov	r2,zero
    c3c8:	003f0a06 	br	bff4 <__alt_data_end+0xfffcbff4>
    c3cc:	a8c00417 	ldw	r3,16(r21)
    c3d0:	ad400604 	addi	r21,r21,24
    c3d4:	b0800804 	addi	r2,r22,32
    c3d8:	b0c00615 	stw	r3,24(r22)
    c3dc:	a8ffff17 	ldw	r3,-4(r21)
    c3e0:	b0c00715 	stw	r3,28(r22)
    c3e4:	003fb006 	br	c2a8 <__alt_data_end+0xfffcc2a8>

0000c3e8 <_wcrtomb_r>:
    c3e8:	defff604 	addi	sp,sp,-40
    c3ec:	00800074 	movhi	r2,1
    c3f0:	dc800815 	stw	r18,32(sp)
    c3f4:	dc400715 	stw	r17,28(sp)
    c3f8:	dc000615 	stw	r16,24(sp)
    c3fc:	10880904 	addi	r2,r2,8228
    c400:	dfc00915 	stw	ra,36(sp)
    c404:	2021883a 	mov	r16,r4
    c408:	3823883a 	mov	r17,r7
    c40c:	14800017 	ldw	r18,0(r2)
    c410:	28001426 	beq	r5,zero,c464 <_wcrtomb_r+0x7c>
    c414:	d9400415 	stw	r5,16(sp)
    c418:	d9800515 	stw	r6,20(sp)
    c41c:	0007d200 	call	7d20 <__locale_charset>
    c420:	d9800517 	ldw	r6,20(sp)
    c424:	d9400417 	ldw	r5,16(sp)
    c428:	100f883a 	mov	r7,r2
    c42c:	dc400015 	stw	r17,0(sp)
    c430:	8009883a 	mov	r4,r16
    c434:	903ee83a 	callr	r18
    c438:	00ffffc4 	movi	r3,-1
    c43c:	10c0031e 	bne	r2,r3,c44c <_wcrtomb_r+0x64>
    c440:	88000015 	stw	zero,0(r17)
    c444:	00c02284 	movi	r3,138
    c448:	80c00015 	stw	r3,0(r16)
    c44c:	dfc00917 	ldw	ra,36(sp)
    c450:	dc800817 	ldw	r18,32(sp)
    c454:	dc400717 	ldw	r17,28(sp)
    c458:	dc000617 	ldw	r16,24(sp)
    c45c:	dec00a04 	addi	sp,sp,40
    c460:	f800283a 	ret
    c464:	0007d200 	call	7d20 <__locale_charset>
    c468:	100f883a 	mov	r7,r2
    c46c:	dc400015 	stw	r17,0(sp)
    c470:	000d883a 	mov	r6,zero
    c474:	d9400104 	addi	r5,sp,4
    c478:	8009883a 	mov	r4,r16
    c47c:	903ee83a 	callr	r18
    c480:	003fed06 	br	c438 <__alt_data_end+0xfffcc438>

0000c484 <wcrtomb>:
    c484:	defff604 	addi	sp,sp,-40
    c488:	00800074 	movhi	r2,1
    c48c:	dc800615 	stw	r18,24(sp)
    c490:	dc400515 	stw	r17,20(sp)
    c494:	10880504 	addi	r2,r2,8212
    c498:	dfc00915 	stw	ra,36(sp)
    c49c:	dd000815 	stw	r20,32(sp)
    c4a0:	dcc00715 	stw	r19,28(sp)
    c4a4:	dc000415 	stw	r16,16(sp)
    c4a8:	3025883a 	mov	r18,r6
    c4ac:	14400017 	ldw	r17,0(r2)
    c4b0:	20001926 	beq	r4,zero,c518 <wcrtomb+0x94>
    c4b4:	00800074 	movhi	r2,1
    c4b8:	10880904 	addi	r2,r2,8228
    c4bc:	15000017 	ldw	r20,0(r2)
    c4c0:	2021883a 	mov	r16,r4
    c4c4:	2827883a 	mov	r19,r5
    c4c8:	0007d200 	call	7d20 <__locale_charset>
    c4cc:	100f883a 	mov	r7,r2
    c4d0:	dc800015 	stw	r18,0(sp)
    c4d4:	980d883a 	mov	r6,r19
    c4d8:	800b883a 	mov	r5,r16
    c4dc:	8809883a 	mov	r4,r17
    c4e0:	a03ee83a 	callr	r20
    c4e4:	00ffffc4 	movi	r3,-1
    c4e8:	10c0031e 	bne	r2,r3,c4f8 <wcrtomb+0x74>
    c4ec:	90000015 	stw	zero,0(r18)
    c4f0:	00c02284 	movi	r3,138
    c4f4:	88c00015 	stw	r3,0(r17)
    c4f8:	dfc00917 	ldw	ra,36(sp)
    c4fc:	dd000817 	ldw	r20,32(sp)
    c500:	dcc00717 	ldw	r19,28(sp)
    c504:	dc800617 	ldw	r18,24(sp)
    c508:	dc400517 	ldw	r17,20(sp)
    c50c:	dc000417 	ldw	r16,16(sp)
    c510:	dec00a04 	addi	sp,sp,40
    c514:	f800283a 	ret
    c518:	00800074 	movhi	r2,1
    c51c:	10880904 	addi	r2,r2,8228
    c520:	14000017 	ldw	r16,0(r2)
    c524:	0007d200 	call	7d20 <__locale_charset>
    c528:	100f883a 	mov	r7,r2
    c52c:	dc800015 	stw	r18,0(sp)
    c530:	000d883a 	mov	r6,zero
    c534:	d9400104 	addi	r5,sp,4
    c538:	8809883a 	mov	r4,r17
    c53c:	803ee83a 	callr	r16
    c540:	003fe806 	br	c4e4 <__alt_data_end+0xfffcc4e4>

0000c544 <__ascii_wctomb>:
    c544:	28000526 	beq	r5,zero,c55c <__ascii_wctomb+0x18>
    c548:	00803fc4 	movi	r2,255
    c54c:	11800536 	bltu	r2,r6,c564 <__ascii_wctomb+0x20>
    c550:	29800005 	stb	r6,0(r5)
    c554:	00800044 	movi	r2,1
    c558:	f800283a 	ret
    c55c:	0005883a 	mov	r2,zero
    c560:	f800283a 	ret
    c564:	00802284 	movi	r2,138
    c568:	20800015 	stw	r2,0(r4)
    c56c:	00bfffc4 	movi	r2,-1
    c570:	f800283a 	ret

0000c574 <_wctomb_r>:
    c574:	00800074 	movhi	r2,1
    c578:	defff904 	addi	sp,sp,-28
    c57c:	10880904 	addi	r2,r2,8228
    c580:	dfc00615 	stw	ra,24(sp)
    c584:	dc400515 	stw	r17,20(sp)
    c588:	dc000415 	stw	r16,16(sp)
    c58c:	3823883a 	mov	r17,r7
    c590:	14000017 	ldw	r16,0(r2)
    c594:	d9000115 	stw	r4,4(sp)
    c598:	d9400215 	stw	r5,8(sp)
    c59c:	d9800315 	stw	r6,12(sp)
    c5a0:	0007d200 	call	7d20 <__locale_charset>
    c5a4:	d9800317 	ldw	r6,12(sp)
    c5a8:	d9400217 	ldw	r5,8(sp)
    c5ac:	d9000117 	ldw	r4,4(sp)
    c5b0:	100f883a 	mov	r7,r2
    c5b4:	dc400015 	stw	r17,0(sp)
    c5b8:	803ee83a 	callr	r16
    c5bc:	dfc00617 	ldw	ra,24(sp)
    c5c0:	dc400517 	ldw	r17,20(sp)
    c5c4:	dc000417 	ldw	r16,16(sp)
    c5c8:	dec00704 	addi	sp,sp,28
    c5cc:	f800283a 	ret

0000c5d0 <__floatundidf>:
    c5d0:	defffc04 	addi	sp,sp,-16
    c5d4:	dc800215 	stw	r18,8(sp)
    c5d8:	2025883a 	mov	r18,r4
    c5dc:	2809883a 	mov	r4,r5
    c5e0:	dfc00315 	stw	ra,12(sp)
    c5e4:	dc400115 	stw	r17,4(sp)
    c5e8:	dc000015 	stw	r16,0(sp)
    c5ec:	000f8000 	call	f800 <__floatunsidf>
    c5f0:	000d883a 	mov	r6,zero
    c5f4:	01d07c34 	movhi	r7,16880
    c5f8:	180b883a 	mov	r5,r3
    c5fc:	1009883a 	mov	r4,r2
    c600:	000e6900 	call	e690 <__muldf3>
    c604:	9009883a 	mov	r4,r18
    c608:	1023883a 	mov	r17,r2
    c60c:	1821883a 	mov	r16,r3
    c610:	000f8000 	call	f800 <__floatunsidf>
    c614:	880d883a 	mov	r6,r17
    c618:	800f883a 	mov	r7,r16
    c61c:	1009883a 	mov	r4,r2
    c620:	180b883a 	mov	r5,r3
    c624:	000d2a40 	call	d2a4 <__adddf3>
    c628:	dfc00317 	ldw	ra,12(sp)
    c62c:	dc800217 	ldw	r18,8(sp)
    c630:	dc400117 	ldw	r17,4(sp)
    c634:	dc000017 	ldw	r16,0(sp)
    c638:	dec00404 	addi	sp,sp,16
    c63c:	f800283a 	ret

0000c640 <__udivdi3>:
    c640:	defff504 	addi	sp,sp,-44
    c644:	dcc00415 	stw	r19,16(sp)
    c648:	dc000115 	stw	r16,4(sp)
    c64c:	dfc00a15 	stw	ra,40(sp)
    c650:	df000915 	stw	fp,36(sp)
    c654:	ddc00815 	stw	r23,32(sp)
    c658:	dd800715 	stw	r22,28(sp)
    c65c:	dd400615 	stw	r21,24(sp)
    c660:	dd000515 	stw	r20,20(sp)
    c664:	dc800315 	stw	r18,12(sp)
    c668:	dc400215 	stw	r17,8(sp)
    c66c:	2027883a 	mov	r19,r4
    c670:	2821883a 	mov	r16,r5
    c674:	3800411e 	bne	r7,zero,c77c <__udivdi3+0x13c>
    c678:	3023883a 	mov	r17,r6
    c67c:	2025883a 	mov	r18,r4
    c680:	2980522e 	bgeu	r5,r6,c7cc <__udivdi3+0x18c>
    c684:	00bfffd4 	movui	r2,65535
    c688:	282d883a 	mov	r22,r5
    c68c:	1180a836 	bltu	r2,r6,c930 <__udivdi3+0x2f0>
    c690:	00803fc4 	movi	r2,255
    c694:	1185803a 	cmpltu	r2,r2,r6
    c698:	100490fa 	slli	r2,r2,3
    c69c:	3086d83a 	srl	r3,r6,r2
    c6a0:	01000074 	movhi	r4,1
    c6a4:	21010e04 	addi	r4,r4,1080
    c6a8:	20c7883a 	add	r3,r4,r3
    c6ac:	18c00003 	ldbu	r3,0(r3)
    c6b0:	1885883a 	add	r2,r3,r2
    c6b4:	00c00804 	movi	r3,32
    c6b8:	1887c83a 	sub	r3,r3,r2
    c6bc:	18000526 	beq	r3,zero,c6d4 <__udivdi3+0x94>
    c6c0:	80e0983a 	sll	r16,r16,r3
    c6c4:	9884d83a 	srl	r2,r19,r2
    c6c8:	30e2983a 	sll	r17,r6,r3
    c6cc:	98e4983a 	sll	r18,r19,r3
    c6d0:	142cb03a 	or	r22,r2,r16
    c6d4:	882ad43a 	srli	r21,r17,16
    c6d8:	b009883a 	mov	r4,r22
    c6dc:	8d3fffcc 	andi	r20,r17,65535
    c6e0:	a80b883a 	mov	r5,r21
    c6e4:	000d24c0 	call	d24c <__umodsi3>
    c6e8:	b009883a 	mov	r4,r22
    c6ec:	a80b883a 	mov	r5,r21
    c6f0:	1027883a 	mov	r19,r2
    c6f4:	000d1e80 	call	d1e8 <__udivsi3>
    c6f8:	102d883a 	mov	r22,r2
    c6fc:	9826943a 	slli	r19,r19,16
    c700:	9004d43a 	srli	r2,r18,16
    c704:	a5a1383a 	mul	r16,r20,r22
    c708:	14c4b03a 	or	r2,r2,r19
    c70c:	1400052e 	bgeu	r2,r16,c724 <__udivdi3+0xe4>
    c710:	1445883a 	add	r2,r2,r17
    c714:	b0ffffc4 	addi	r3,r22,-1
    c718:	14400136 	bltu	r2,r17,c720 <__udivdi3+0xe0>
    c71c:	14012336 	bltu	r2,r16,cbac <__udivdi3+0x56c>
    c720:	182d883a 	mov	r22,r3
    c724:	1421c83a 	sub	r16,r2,r16
    c728:	a80b883a 	mov	r5,r21
    c72c:	8009883a 	mov	r4,r16
    c730:	000d24c0 	call	d24c <__umodsi3>
    c734:	1027883a 	mov	r19,r2
    c738:	a80b883a 	mov	r5,r21
    c73c:	8009883a 	mov	r4,r16
    c740:	000d1e80 	call	d1e8 <__udivsi3>
    c744:	9826943a 	slli	r19,r19,16
    c748:	a0a9383a 	mul	r20,r20,r2
    c74c:	94bfffcc 	andi	r18,r18,65535
    c750:	94e4b03a 	or	r18,r18,r19
    c754:	9500052e 	bgeu	r18,r20,c76c <__udivdi3+0x12c>
    c758:	8ca5883a 	add	r18,r17,r18
    c75c:	10ffffc4 	addi	r3,r2,-1
    c760:	9440f136 	bltu	r18,r17,cb28 <__udivdi3+0x4e8>
    c764:	9500f02e 	bgeu	r18,r20,cb28 <__udivdi3+0x4e8>
    c768:	10bfff84 	addi	r2,r2,-2
    c76c:	b00c943a 	slli	r6,r22,16
    c770:	0007883a 	mov	r3,zero
    c774:	3084b03a 	or	r2,r6,r2
    c778:	00005906 	br	c8e0 <__udivdi3+0x2a0>
    c77c:	29c05636 	bltu	r5,r7,c8d8 <__udivdi3+0x298>
    c780:	00bfffd4 	movui	r2,65535
    c784:	11c0622e 	bgeu	r2,r7,c910 <__udivdi3+0x2d0>
    c788:	00804034 	movhi	r2,256
    c78c:	10bfffc4 	addi	r2,r2,-1
    c790:	11c0ee36 	bltu	r2,r7,cb4c <__udivdi3+0x50c>
    c794:	00800404 	movi	r2,16
    c798:	3886d83a 	srl	r3,r7,r2
    c79c:	01000074 	movhi	r4,1
    c7a0:	21010e04 	addi	r4,r4,1080
    c7a4:	20c7883a 	add	r3,r4,r3
    c7a8:	18c00003 	ldbu	r3,0(r3)
    c7ac:	05400804 	movi	r21,32
    c7b0:	1885883a 	add	r2,r3,r2
    c7b4:	a8abc83a 	sub	r21,r21,r2
    c7b8:	a800621e 	bne	r21,zero,c944 <__udivdi3+0x304>
    c7bc:	3c00e936 	bltu	r7,r16,cb64 <__udivdi3+0x524>
    c7c0:	9985403a 	cmpgeu	r2,r19,r6
    c7c4:	0007883a 	mov	r3,zero
    c7c8:	00004506 	br	c8e0 <__udivdi3+0x2a0>
    c7cc:	3000041e 	bne	r6,zero,c7e0 <__udivdi3+0x1a0>
    c7d0:	000b883a 	mov	r5,zero
    c7d4:	01000044 	movi	r4,1
    c7d8:	000d1e80 	call	d1e8 <__udivsi3>
    c7dc:	1023883a 	mov	r17,r2
    c7e0:	00bfffd4 	movui	r2,65535
    c7e4:	14404e2e 	bgeu	r2,r17,c920 <__udivdi3+0x2e0>
    c7e8:	00804034 	movhi	r2,256
    c7ec:	10bfffc4 	addi	r2,r2,-1
    c7f0:	1440d836 	bltu	r2,r17,cb54 <__udivdi3+0x514>
    c7f4:	00800404 	movi	r2,16
    c7f8:	8886d83a 	srl	r3,r17,r2
    c7fc:	01000074 	movhi	r4,1
    c800:	21010e04 	addi	r4,r4,1080
    c804:	20c7883a 	add	r3,r4,r3
    c808:	18c00003 	ldbu	r3,0(r3)
    c80c:	1885883a 	add	r2,r3,r2
    c810:	00c00804 	movi	r3,32
    c814:	1887c83a 	sub	r3,r3,r2
    c818:	18008f1e 	bne	r3,zero,ca58 <__udivdi3+0x418>
    c81c:	882ad43a 	srli	r21,r17,16
    c820:	8461c83a 	sub	r16,r16,r17
    c824:	8d3fffcc 	andi	r20,r17,65535
    c828:	00c00044 	movi	r3,1
    c82c:	8009883a 	mov	r4,r16
    c830:	a80b883a 	mov	r5,r21
    c834:	d8c00015 	stw	r3,0(sp)
    c838:	000d24c0 	call	d24c <__umodsi3>
    c83c:	8009883a 	mov	r4,r16
    c840:	a80b883a 	mov	r5,r21
    c844:	1027883a 	mov	r19,r2
    c848:	000d1e80 	call	d1e8 <__udivsi3>
    c84c:	9826943a 	slli	r19,r19,16
    c850:	9008d43a 	srli	r4,r18,16
    c854:	1521383a 	mul	r16,r2,r20
    c858:	102d883a 	mov	r22,r2
    c85c:	24c8b03a 	or	r4,r4,r19
    c860:	d8c00017 	ldw	r3,0(sp)
    c864:	2400052e 	bgeu	r4,r16,c87c <__udivdi3+0x23c>
    c868:	2449883a 	add	r4,r4,r17
    c86c:	b0bfffc4 	addi	r2,r22,-1
    c870:	24400136 	bltu	r4,r17,c878 <__udivdi3+0x238>
    c874:	2400ca36 	bltu	r4,r16,cba0 <__udivdi3+0x560>
    c878:	102d883a 	mov	r22,r2
    c87c:	2421c83a 	sub	r16,r4,r16
    c880:	a80b883a 	mov	r5,r21
    c884:	8009883a 	mov	r4,r16
    c888:	d8c00015 	stw	r3,0(sp)
    c88c:	000d24c0 	call	d24c <__umodsi3>
    c890:	1027883a 	mov	r19,r2
    c894:	a80b883a 	mov	r5,r21
    c898:	8009883a 	mov	r4,r16
    c89c:	000d1e80 	call	d1e8 <__udivsi3>
    c8a0:	9826943a 	slli	r19,r19,16
    c8a4:	1529383a 	mul	r20,r2,r20
    c8a8:	94bfffcc 	andi	r18,r18,65535
    c8ac:	94e4b03a 	or	r18,r18,r19
    c8b0:	d8c00017 	ldw	r3,0(sp)
    c8b4:	9500052e 	bgeu	r18,r20,c8cc <__udivdi3+0x28c>
    c8b8:	8ca5883a 	add	r18,r17,r18
    c8bc:	113fffc4 	addi	r4,r2,-1
    c8c0:	94409736 	bltu	r18,r17,cb20 <__udivdi3+0x4e0>
    c8c4:	9500962e 	bgeu	r18,r20,cb20 <__udivdi3+0x4e0>
    c8c8:	10bfff84 	addi	r2,r2,-2
    c8cc:	b00c943a 	slli	r6,r22,16
    c8d0:	3084b03a 	or	r2,r6,r2
    c8d4:	00000206 	br	c8e0 <__udivdi3+0x2a0>
    c8d8:	0007883a 	mov	r3,zero
    c8dc:	0005883a 	mov	r2,zero
    c8e0:	dfc00a17 	ldw	ra,40(sp)
    c8e4:	df000917 	ldw	fp,36(sp)
    c8e8:	ddc00817 	ldw	r23,32(sp)
    c8ec:	dd800717 	ldw	r22,28(sp)
    c8f0:	dd400617 	ldw	r21,24(sp)
    c8f4:	dd000517 	ldw	r20,20(sp)
    c8f8:	dcc00417 	ldw	r19,16(sp)
    c8fc:	dc800317 	ldw	r18,12(sp)
    c900:	dc400217 	ldw	r17,8(sp)
    c904:	dc000117 	ldw	r16,4(sp)
    c908:	dec00b04 	addi	sp,sp,44
    c90c:	f800283a 	ret
    c910:	00803fc4 	movi	r2,255
    c914:	11c5803a 	cmpltu	r2,r2,r7
    c918:	100490fa 	slli	r2,r2,3
    c91c:	003f9e06 	br	c798 <__alt_data_end+0xfffcc798>
    c920:	00803fc4 	movi	r2,255
    c924:	1445803a 	cmpltu	r2,r2,r17
    c928:	100490fa 	slli	r2,r2,3
    c92c:	003fb206 	br	c7f8 <__alt_data_end+0xfffcc7f8>
    c930:	00804034 	movhi	r2,256
    c934:	10bfffc4 	addi	r2,r2,-1
    c938:	11808836 	bltu	r2,r6,cb5c <__udivdi3+0x51c>
    c93c:	00800404 	movi	r2,16
    c940:	003f5606 	br	c69c <__alt_data_end+0xfffcc69c>
    c944:	30aed83a 	srl	r23,r6,r2
    c948:	3d4e983a 	sll	r7,r7,r21
    c94c:	80acd83a 	srl	r22,r16,r2
    c950:	9884d83a 	srl	r2,r19,r2
    c954:	3deeb03a 	or	r23,r7,r23
    c958:	b824d43a 	srli	r18,r23,16
    c95c:	8560983a 	sll	r16,r16,r21
    c960:	b009883a 	mov	r4,r22
    c964:	900b883a 	mov	r5,r18
    c968:	3568983a 	sll	r20,r6,r21
    c96c:	1420b03a 	or	r16,r2,r16
    c970:	000d24c0 	call	d24c <__umodsi3>
    c974:	b009883a 	mov	r4,r22
    c978:	900b883a 	mov	r5,r18
    c97c:	1023883a 	mov	r17,r2
    c980:	000d1e80 	call	d1e8 <__udivsi3>
    c984:	8808943a 	slli	r4,r17,16
    c988:	bf3fffcc 	andi	fp,r23,65535
    c98c:	8006d43a 	srli	r3,r16,16
    c990:	e0a3383a 	mul	r17,fp,r2
    c994:	100d883a 	mov	r6,r2
    c998:	1906b03a 	or	r3,r3,r4
    c99c:	1c40042e 	bgeu	r3,r17,c9b0 <__udivdi3+0x370>
    c9a0:	1dc7883a 	add	r3,r3,r23
    c9a4:	10bfffc4 	addi	r2,r2,-1
    c9a8:	1dc0752e 	bgeu	r3,r23,cb80 <__udivdi3+0x540>
    c9ac:	100d883a 	mov	r6,r2
    c9b0:	1c63c83a 	sub	r17,r3,r17
    c9b4:	900b883a 	mov	r5,r18
    c9b8:	8809883a 	mov	r4,r17
    c9bc:	d9800015 	stw	r6,0(sp)
    c9c0:	000d24c0 	call	d24c <__umodsi3>
    c9c4:	102d883a 	mov	r22,r2
    c9c8:	8809883a 	mov	r4,r17
    c9cc:	900b883a 	mov	r5,r18
    c9d0:	000d1e80 	call	d1e8 <__udivsi3>
    c9d4:	b02c943a 	slli	r22,r22,16
    c9d8:	e089383a 	mul	r4,fp,r2
    c9dc:	843fffcc 	andi	r16,r16,65535
    c9e0:	85a0b03a 	or	r16,r16,r22
    c9e4:	d9800017 	ldw	r6,0(sp)
    c9e8:	8100042e 	bgeu	r16,r4,c9fc <__udivdi3+0x3bc>
    c9ec:	85e1883a 	add	r16,r16,r23
    c9f0:	10ffffc4 	addi	r3,r2,-1
    c9f4:	85c05e2e 	bgeu	r16,r23,cb70 <__udivdi3+0x530>
    c9f8:	1805883a 	mov	r2,r3
    c9fc:	300c943a 	slli	r6,r6,16
    ca00:	a17fffcc 	andi	r5,r20,65535
    ca04:	a028d43a 	srli	r20,r20,16
    ca08:	3084b03a 	or	r2,r6,r2
    ca0c:	10ffffcc 	andi	r3,r2,65535
    ca10:	100cd43a 	srli	r6,r2,16
    ca14:	194f383a 	mul	r7,r3,r5
    ca18:	1d07383a 	mul	r3,r3,r20
    ca1c:	314b383a 	mul	r5,r6,r5
    ca20:	3810d43a 	srli	r8,r7,16
    ca24:	8121c83a 	sub	r16,r16,r4
    ca28:	1947883a 	add	r3,r3,r5
    ca2c:	40c7883a 	add	r3,r8,r3
    ca30:	350d383a 	mul	r6,r6,r20
    ca34:	1940022e 	bgeu	r3,r5,ca40 <__udivdi3+0x400>
    ca38:	01000074 	movhi	r4,1
    ca3c:	310d883a 	add	r6,r6,r4
    ca40:	1828d43a 	srli	r20,r3,16
    ca44:	a18d883a 	add	r6,r20,r6
    ca48:	81803e36 	bltu	r16,r6,cb44 <__udivdi3+0x504>
    ca4c:	81803826 	beq	r16,r6,cb30 <__udivdi3+0x4f0>
    ca50:	0007883a 	mov	r3,zero
    ca54:	003fa206 	br	c8e0 <__alt_data_end+0xfffcc8e0>
    ca58:	88e2983a 	sll	r17,r17,r3
    ca5c:	80a8d83a 	srl	r20,r16,r2
    ca60:	80e0983a 	sll	r16,r16,r3
    ca64:	882ad43a 	srli	r21,r17,16
    ca68:	9884d83a 	srl	r2,r19,r2
    ca6c:	a009883a 	mov	r4,r20
    ca70:	a80b883a 	mov	r5,r21
    ca74:	142eb03a 	or	r23,r2,r16
    ca78:	98e4983a 	sll	r18,r19,r3
    ca7c:	000d24c0 	call	d24c <__umodsi3>
    ca80:	a009883a 	mov	r4,r20
    ca84:	a80b883a 	mov	r5,r21
    ca88:	1021883a 	mov	r16,r2
    ca8c:	000d1e80 	call	d1e8 <__udivsi3>
    ca90:	1039883a 	mov	fp,r2
    ca94:	8d3fffcc 	andi	r20,r17,65535
    ca98:	8020943a 	slli	r16,r16,16
    ca9c:	b804d43a 	srli	r2,r23,16
    caa0:	a72d383a 	mul	r22,r20,fp
    caa4:	1404b03a 	or	r2,r2,r16
    caa8:	1580062e 	bgeu	r2,r22,cac4 <__udivdi3+0x484>
    caac:	1445883a 	add	r2,r2,r17
    cab0:	e0ffffc4 	addi	r3,fp,-1
    cab4:	14403836 	bltu	r2,r17,cb98 <__udivdi3+0x558>
    cab8:	1580372e 	bgeu	r2,r22,cb98 <__udivdi3+0x558>
    cabc:	e73fff84 	addi	fp,fp,-2
    cac0:	1445883a 	add	r2,r2,r17
    cac4:	15adc83a 	sub	r22,r2,r22
    cac8:	a80b883a 	mov	r5,r21
    cacc:	b009883a 	mov	r4,r22
    cad0:	000d24c0 	call	d24c <__umodsi3>
    cad4:	1027883a 	mov	r19,r2
    cad8:	b009883a 	mov	r4,r22
    cadc:	a80b883a 	mov	r5,r21
    cae0:	000d1e80 	call	d1e8 <__udivsi3>
    cae4:	9826943a 	slli	r19,r19,16
    cae8:	a0a1383a 	mul	r16,r20,r2
    caec:	b93fffcc 	andi	r4,r23,65535
    caf0:	24c8b03a 	or	r4,r4,r19
    caf4:	2400062e 	bgeu	r4,r16,cb10 <__udivdi3+0x4d0>
    caf8:	2449883a 	add	r4,r4,r17
    cafc:	10ffffc4 	addi	r3,r2,-1
    cb00:	24402336 	bltu	r4,r17,cb90 <__udivdi3+0x550>
    cb04:	2400222e 	bgeu	r4,r16,cb90 <__udivdi3+0x550>
    cb08:	10bfff84 	addi	r2,r2,-2
    cb0c:	2449883a 	add	r4,r4,r17
    cb10:	e038943a 	slli	fp,fp,16
    cb14:	2421c83a 	sub	r16,r4,r16
    cb18:	e086b03a 	or	r3,fp,r2
    cb1c:	003f4306 	br	c82c <__alt_data_end+0xfffcc82c>
    cb20:	2005883a 	mov	r2,r4
    cb24:	003f6906 	br	c8cc <__alt_data_end+0xfffcc8cc>
    cb28:	1805883a 	mov	r2,r3
    cb2c:	003f0f06 	br	c76c <__alt_data_end+0xfffcc76c>
    cb30:	1806943a 	slli	r3,r3,16
    cb34:	9d66983a 	sll	r19,r19,r21
    cb38:	39ffffcc 	andi	r7,r7,65535
    cb3c:	19c7883a 	add	r3,r3,r7
    cb40:	98ffc32e 	bgeu	r19,r3,ca50 <__alt_data_end+0xfffcca50>
    cb44:	10bfffc4 	addi	r2,r2,-1
    cb48:	003fc106 	br	ca50 <__alt_data_end+0xfffcca50>
    cb4c:	00800604 	movi	r2,24
    cb50:	003f1106 	br	c798 <__alt_data_end+0xfffcc798>
    cb54:	00800604 	movi	r2,24
    cb58:	003f2706 	br	c7f8 <__alt_data_end+0xfffcc7f8>
    cb5c:	00800604 	movi	r2,24
    cb60:	003ece06 	br	c69c <__alt_data_end+0xfffcc69c>
    cb64:	0007883a 	mov	r3,zero
    cb68:	00800044 	movi	r2,1
    cb6c:	003f5c06 	br	c8e0 <__alt_data_end+0xfffcc8e0>
    cb70:	813fa12e 	bgeu	r16,r4,c9f8 <__alt_data_end+0xfffcc9f8>
    cb74:	10bfff84 	addi	r2,r2,-2
    cb78:	85e1883a 	add	r16,r16,r23
    cb7c:	003f9f06 	br	c9fc <__alt_data_end+0xfffcc9fc>
    cb80:	1c7f8a2e 	bgeu	r3,r17,c9ac <__alt_data_end+0xfffcc9ac>
    cb84:	31bfff84 	addi	r6,r6,-2
    cb88:	1dc7883a 	add	r3,r3,r23
    cb8c:	003f8806 	br	c9b0 <__alt_data_end+0xfffcc9b0>
    cb90:	1805883a 	mov	r2,r3
    cb94:	003fde06 	br	cb10 <__alt_data_end+0xfffccb10>
    cb98:	1839883a 	mov	fp,r3
    cb9c:	003fc906 	br	cac4 <__alt_data_end+0xfffccac4>
    cba0:	b5bfff84 	addi	r22,r22,-2
    cba4:	2449883a 	add	r4,r4,r17
    cba8:	003f3406 	br	c87c <__alt_data_end+0xfffcc87c>
    cbac:	b5bfff84 	addi	r22,r22,-2
    cbb0:	1445883a 	add	r2,r2,r17
    cbb4:	003edb06 	br	c724 <__alt_data_end+0xfffcc724>

0000cbb8 <__umoddi3>:
    cbb8:	defff404 	addi	sp,sp,-48
    cbbc:	df000a15 	stw	fp,40(sp)
    cbc0:	dc400315 	stw	r17,12(sp)
    cbc4:	dc000215 	stw	r16,8(sp)
    cbc8:	dfc00b15 	stw	ra,44(sp)
    cbcc:	ddc00915 	stw	r23,36(sp)
    cbd0:	dd800815 	stw	r22,32(sp)
    cbd4:	dd400715 	stw	r21,28(sp)
    cbd8:	dd000615 	stw	r20,24(sp)
    cbdc:	dcc00515 	stw	r19,20(sp)
    cbe0:	dc800415 	stw	r18,16(sp)
    cbe4:	2021883a 	mov	r16,r4
    cbe8:	2823883a 	mov	r17,r5
    cbec:	2839883a 	mov	fp,r5
    cbf0:	38003c1e 	bne	r7,zero,cce4 <__umoddi3+0x12c>
    cbf4:	3027883a 	mov	r19,r6
    cbf8:	2029883a 	mov	r20,r4
    cbfc:	2980512e 	bgeu	r5,r6,cd44 <__umoddi3+0x18c>
    cc00:	00bfffd4 	movui	r2,65535
    cc04:	11809a36 	bltu	r2,r6,ce70 <__umoddi3+0x2b8>
    cc08:	01003fc4 	movi	r4,255
    cc0c:	2189803a 	cmpltu	r4,r4,r6
    cc10:	200890fa 	slli	r4,r4,3
    cc14:	3104d83a 	srl	r2,r6,r4
    cc18:	00c00074 	movhi	r3,1
    cc1c:	18c10e04 	addi	r3,r3,1080
    cc20:	1885883a 	add	r2,r3,r2
    cc24:	10c00003 	ldbu	r3,0(r2)
    cc28:	00800804 	movi	r2,32
    cc2c:	1909883a 	add	r4,r3,r4
    cc30:	1125c83a 	sub	r18,r2,r4
    cc34:	90000526 	beq	r18,zero,cc4c <__umoddi3+0x94>
    cc38:	8ca2983a 	sll	r17,r17,r18
    cc3c:	8108d83a 	srl	r4,r16,r4
    cc40:	34a6983a 	sll	r19,r6,r18
    cc44:	84a8983a 	sll	r20,r16,r18
    cc48:	2478b03a 	or	fp,r4,r17
    cc4c:	982ed43a 	srli	r23,r19,16
    cc50:	e009883a 	mov	r4,fp
    cc54:	9dbfffcc 	andi	r22,r19,65535
    cc58:	b80b883a 	mov	r5,r23
    cc5c:	000d24c0 	call	d24c <__umodsi3>
    cc60:	e009883a 	mov	r4,fp
    cc64:	b80b883a 	mov	r5,r23
    cc68:	102b883a 	mov	r21,r2
    cc6c:	000d1e80 	call	d1e8 <__udivsi3>
    cc70:	a806943a 	slli	r3,r21,16
    cc74:	a008d43a 	srli	r4,r20,16
    cc78:	b085383a 	mul	r2,r22,r2
    cc7c:	20c8b03a 	or	r4,r4,r3
    cc80:	2080032e 	bgeu	r4,r2,cc90 <__umoddi3+0xd8>
    cc84:	24c9883a 	add	r4,r4,r19
    cc88:	24c00136 	bltu	r4,r19,cc90 <__umoddi3+0xd8>
    cc8c:	20811036 	bltu	r4,r2,d0d0 <__umoddi3+0x518>
    cc90:	20abc83a 	sub	r21,r4,r2
    cc94:	b80b883a 	mov	r5,r23
    cc98:	a809883a 	mov	r4,r21
    cc9c:	000d24c0 	call	d24c <__umodsi3>
    cca0:	1023883a 	mov	r17,r2
    cca4:	b80b883a 	mov	r5,r23
    cca8:	a809883a 	mov	r4,r21
    ccac:	000d1e80 	call	d1e8 <__udivsi3>
    ccb0:	8822943a 	slli	r17,r17,16
    ccb4:	b085383a 	mul	r2,r22,r2
    ccb8:	a0ffffcc 	andi	r3,r20,65535
    ccbc:	1c46b03a 	or	r3,r3,r17
    ccc0:	1880042e 	bgeu	r3,r2,ccd4 <__umoddi3+0x11c>
    ccc4:	1cc7883a 	add	r3,r3,r19
    ccc8:	1cc00236 	bltu	r3,r19,ccd4 <__umoddi3+0x11c>
    cccc:	1880012e 	bgeu	r3,r2,ccd4 <__umoddi3+0x11c>
    ccd0:	1cc7883a 	add	r3,r3,r19
    ccd4:	1885c83a 	sub	r2,r3,r2
    ccd8:	1484d83a 	srl	r2,r2,r18
    ccdc:	0007883a 	mov	r3,zero
    cce0:	00004f06 	br	ce20 <__umoddi3+0x268>
    cce4:	29c04c36 	bltu	r5,r7,ce18 <__umoddi3+0x260>
    cce8:	00bfffd4 	movui	r2,65535
    ccec:	11c0582e 	bgeu	r2,r7,ce50 <__umoddi3+0x298>
    ccf0:	00804034 	movhi	r2,256
    ccf4:	10bfffc4 	addi	r2,r2,-1
    ccf8:	11c0e736 	bltu	r2,r7,d098 <__umoddi3+0x4e0>
    ccfc:	01000404 	movi	r4,16
    cd00:	3904d83a 	srl	r2,r7,r4
    cd04:	00c00074 	movhi	r3,1
    cd08:	18c10e04 	addi	r3,r3,1080
    cd0c:	1885883a 	add	r2,r3,r2
    cd10:	14c00003 	ldbu	r19,0(r2)
    cd14:	00c00804 	movi	r3,32
    cd18:	9927883a 	add	r19,r19,r4
    cd1c:	1ce9c83a 	sub	r20,r3,r19
    cd20:	a000581e 	bne	r20,zero,ce84 <__umoddi3+0x2cc>
    cd24:	3c400136 	bltu	r7,r17,cd2c <__umoddi3+0x174>
    cd28:	8180eb36 	bltu	r16,r6,d0d8 <__umoddi3+0x520>
    cd2c:	8185c83a 	sub	r2,r16,r6
    cd30:	89e3c83a 	sub	r17,r17,r7
    cd34:	8089803a 	cmpltu	r4,r16,r2
    cd38:	8939c83a 	sub	fp,r17,r4
    cd3c:	e007883a 	mov	r3,fp
    cd40:	00003706 	br	ce20 <__umoddi3+0x268>
    cd44:	3000041e 	bne	r6,zero,cd58 <__umoddi3+0x1a0>
    cd48:	000b883a 	mov	r5,zero
    cd4c:	01000044 	movi	r4,1
    cd50:	000d1e80 	call	d1e8 <__udivsi3>
    cd54:	1027883a 	mov	r19,r2
    cd58:	00bfffd4 	movui	r2,65535
    cd5c:	14c0402e 	bgeu	r2,r19,ce60 <__umoddi3+0x2a8>
    cd60:	00804034 	movhi	r2,256
    cd64:	10bfffc4 	addi	r2,r2,-1
    cd68:	14c0cd36 	bltu	r2,r19,d0a0 <__umoddi3+0x4e8>
    cd6c:	00800404 	movi	r2,16
    cd70:	9886d83a 	srl	r3,r19,r2
    cd74:	01000074 	movhi	r4,1
    cd78:	21010e04 	addi	r4,r4,1080
    cd7c:	20c7883a 	add	r3,r4,r3
    cd80:	18c00003 	ldbu	r3,0(r3)
    cd84:	1887883a 	add	r3,r3,r2
    cd88:	00800804 	movi	r2,32
    cd8c:	10e5c83a 	sub	r18,r2,r3
    cd90:	9000901e 	bne	r18,zero,cfd4 <__umoddi3+0x41c>
    cd94:	982cd43a 	srli	r22,r19,16
    cd98:	8ce3c83a 	sub	r17,r17,r19
    cd9c:	9d7fffcc 	andi	r21,r19,65535
    cda0:	b00b883a 	mov	r5,r22
    cda4:	8809883a 	mov	r4,r17
    cda8:	000d24c0 	call	d24c <__umodsi3>
    cdac:	8809883a 	mov	r4,r17
    cdb0:	b00b883a 	mov	r5,r22
    cdb4:	1021883a 	mov	r16,r2
    cdb8:	000d1e80 	call	d1e8 <__udivsi3>
    cdbc:	8006943a 	slli	r3,r16,16
    cdc0:	a008d43a 	srli	r4,r20,16
    cdc4:	1545383a 	mul	r2,r2,r21
    cdc8:	20c8b03a 	or	r4,r4,r3
    cdcc:	2080042e 	bgeu	r4,r2,cde0 <__umoddi3+0x228>
    cdd0:	24c9883a 	add	r4,r4,r19
    cdd4:	24c00236 	bltu	r4,r19,cde0 <__umoddi3+0x228>
    cdd8:	2080012e 	bgeu	r4,r2,cde0 <__umoddi3+0x228>
    cddc:	24c9883a 	add	r4,r4,r19
    cde0:	20a1c83a 	sub	r16,r4,r2
    cde4:	b00b883a 	mov	r5,r22
    cde8:	8009883a 	mov	r4,r16
    cdec:	000d24c0 	call	d24c <__umodsi3>
    cdf0:	1023883a 	mov	r17,r2
    cdf4:	b00b883a 	mov	r5,r22
    cdf8:	8009883a 	mov	r4,r16
    cdfc:	000d1e80 	call	d1e8 <__udivsi3>
    ce00:	8822943a 	slli	r17,r17,16
    ce04:	1545383a 	mul	r2,r2,r21
    ce08:	a53fffcc 	andi	r20,r20,65535
    ce0c:	a446b03a 	or	r3,r20,r17
    ce10:	18bfb02e 	bgeu	r3,r2,ccd4 <__alt_data_end+0xfffcccd4>
    ce14:	003fab06 	br	ccc4 <__alt_data_end+0xfffcccc4>
    ce18:	2005883a 	mov	r2,r4
    ce1c:	2807883a 	mov	r3,r5
    ce20:	dfc00b17 	ldw	ra,44(sp)
    ce24:	df000a17 	ldw	fp,40(sp)
    ce28:	ddc00917 	ldw	r23,36(sp)
    ce2c:	dd800817 	ldw	r22,32(sp)
    ce30:	dd400717 	ldw	r21,28(sp)
    ce34:	dd000617 	ldw	r20,24(sp)
    ce38:	dcc00517 	ldw	r19,20(sp)
    ce3c:	dc800417 	ldw	r18,16(sp)
    ce40:	dc400317 	ldw	r17,12(sp)
    ce44:	dc000217 	ldw	r16,8(sp)
    ce48:	dec00c04 	addi	sp,sp,48
    ce4c:	f800283a 	ret
    ce50:	04c03fc4 	movi	r19,255
    ce54:	99c9803a 	cmpltu	r4,r19,r7
    ce58:	200890fa 	slli	r4,r4,3
    ce5c:	003fa806 	br	cd00 <__alt_data_end+0xfffccd00>
    ce60:	00803fc4 	movi	r2,255
    ce64:	14c5803a 	cmpltu	r2,r2,r19
    ce68:	100490fa 	slli	r2,r2,3
    ce6c:	003fc006 	br	cd70 <__alt_data_end+0xfffccd70>
    ce70:	00804034 	movhi	r2,256
    ce74:	10bfffc4 	addi	r2,r2,-1
    ce78:	11808b36 	bltu	r2,r6,d0a8 <__umoddi3+0x4f0>
    ce7c:	01000404 	movi	r4,16
    ce80:	003f6406 	br	cc14 <__alt_data_end+0xfffccc14>
    ce84:	34c4d83a 	srl	r2,r6,r19
    ce88:	3d0e983a 	sll	r7,r7,r20
    ce8c:	8cf8d83a 	srl	fp,r17,r19
    ce90:	8d10983a 	sll	r8,r17,r20
    ce94:	38aab03a 	or	r21,r7,r2
    ce98:	a82cd43a 	srli	r22,r21,16
    ce9c:	84e2d83a 	srl	r17,r16,r19
    cea0:	e009883a 	mov	r4,fp
    cea4:	b00b883a 	mov	r5,r22
    cea8:	8a22b03a 	or	r17,r17,r8
    ceac:	3524983a 	sll	r18,r6,r20
    ceb0:	000d24c0 	call	d24c <__umodsi3>
    ceb4:	e009883a 	mov	r4,fp
    ceb8:	b00b883a 	mov	r5,r22
    cebc:	102f883a 	mov	r23,r2
    cec0:	000d1e80 	call	d1e8 <__udivsi3>
    cec4:	100d883a 	mov	r6,r2
    cec8:	b808943a 	slli	r4,r23,16
    cecc:	aa3fffcc 	andi	r8,r21,65535
    ced0:	8804d43a 	srli	r2,r17,16
    ced4:	41af383a 	mul	r23,r8,r6
    ced8:	8520983a 	sll	r16,r16,r20
    cedc:	1104b03a 	or	r2,r2,r4
    cee0:	15c0042e 	bgeu	r2,r23,cef4 <__umoddi3+0x33c>
    cee4:	1545883a 	add	r2,r2,r21
    cee8:	30ffffc4 	addi	r3,r6,-1
    ceec:	1540742e 	bgeu	r2,r21,d0c0 <__umoddi3+0x508>
    cef0:	180d883a 	mov	r6,r3
    cef4:	15efc83a 	sub	r23,r2,r23
    cef8:	b00b883a 	mov	r5,r22
    cefc:	b809883a 	mov	r4,r23
    cf00:	d9800115 	stw	r6,4(sp)
    cf04:	da000015 	stw	r8,0(sp)
    cf08:	000d24c0 	call	d24c <__umodsi3>
    cf0c:	b00b883a 	mov	r5,r22
    cf10:	b809883a 	mov	r4,r23
    cf14:	1039883a 	mov	fp,r2
    cf18:	000d1e80 	call	d1e8 <__udivsi3>
    cf1c:	da000017 	ldw	r8,0(sp)
    cf20:	e038943a 	slli	fp,fp,16
    cf24:	100b883a 	mov	r5,r2
    cf28:	4089383a 	mul	r4,r8,r2
    cf2c:	8a3fffcc 	andi	r8,r17,65535
    cf30:	4710b03a 	or	r8,r8,fp
    cf34:	d9800117 	ldw	r6,4(sp)
    cf38:	4100042e 	bgeu	r8,r4,cf4c <__umoddi3+0x394>
    cf3c:	4551883a 	add	r8,r8,r21
    cf40:	10bfffc4 	addi	r2,r2,-1
    cf44:	45405a2e 	bgeu	r8,r21,d0b0 <__umoddi3+0x4f8>
    cf48:	100b883a 	mov	r5,r2
    cf4c:	300c943a 	slli	r6,r6,16
    cf50:	91ffffcc 	andi	r7,r18,65535
    cf54:	9004d43a 	srli	r2,r18,16
    cf58:	314cb03a 	or	r6,r6,r5
    cf5c:	317fffcc 	andi	r5,r6,65535
    cf60:	300cd43a 	srli	r6,r6,16
    cf64:	29d3383a 	mul	r9,r5,r7
    cf68:	288b383a 	mul	r5,r5,r2
    cf6c:	31cf383a 	mul	r7,r6,r7
    cf70:	4806d43a 	srli	r3,r9,16
    cf74:	4111c83a 	sub	r8,r8,r4
    cf78:	29cb883a 	add	r5,r5,r7
    cf7c:	194b883a 	add	r5,r3,r5
    cf80:	3085383a 	mul	r2,r6,r2
    cf84:	29c0022e 	bgeu	r5,r7,cf90 <__umoddi3+0x3d8>
    cf88:	00c00074 	movhi	r3,1
    cf8c:	10c5883a 	add	r2,r2,r3
    cf90:	2808d43a 	srli	r4,r5,16
    cf94:	280a943a 	slli	r5,r5,16
    cf98:	4a7fffcc 	andi	r9,r9,65535
    cf9c:	2085883a 	add	r2,r4,r2
    cfa0:	2a4b883a 	add	r5,r5,r9
    cfa4:	40803636 	bltu	r8,r2,d080 <__umoddi3+0x4c8>
    cfa8:	40804d26 	beq	r8,r2,d0e0 <__umoddi3+0x528>
    cfac:	4089c83a 	sub	r4,r8,r2
    cfb0:	280f883a 	mov	r7,r5
    cfb4:	81cfc83a 	sub	r7,r16,r7
    cfb8:	81c7803a 	cmpltu	r3,r16,r7
    cfbc:	20c7c83a 	sub	r3,r4,r3
    cfc0:	1cc4983a 	sll	r2,r3,r19
    cfc4:	3d0ed83a 	srl	r7,r7,r20
    cfc8:	1d06d83a 	srl	r3,r3,r20
    cfcc:	11c4b03a 	or	r2,r2,r7
    cfd0:	003f9306 	br	ce20 <__alt_data_end+0xfffcce20>
    cfd4:	9ca6983a 	sll	r19,r19,r18
    cfd8:	88e8d83a 	srl	r20,r17,r3
    cfdc:	80c4d83a 	srl	r2,r16,r3
    cfe0:	982cd43a 	srli	r22,r19,16
    cfe4:	8ca2983a 	sll	r17,r17,r18
    cfe8:	a009883a 	mov	r4,r20
    cfec:	b00b883a 	mov	r5,r22
    cff0:	1478b03a 	or	fp,r2,r17
    cff4:	000d24c0 	call	d24c <__umodsi3>
    cff8:	a009883a 	mov	r4,r20
    cffc:	b00b883a 	mov	r5,r22
    d000:	1023883a 	mov	r17,r2
    d004:	000d1e80 	call	d1e8 <__udivsi3>
    d008:	9d7fffcc 	andi	r21,r19,65535
    d00c:	880a943a 	slli	r5,r17,16
    d010:	e008d43a 	srli	r4,fp,16
    d014:	a885383a 	mul	r2,r21,r2
    d018:	84a8983a 	sll	r20,r16,r18
    d01c:	2148b03a 	or	r4,r4,r5
    d020:	2080042e 	bgeu	r4,r2,d034 <__umoddi3+0x47c>
    d024:	24c9883a 	add	r4,r4,r19
    d028:	24c00236 	bltu	r4,r19,d034 <__umoddi3+0x47c>
    d02c:	2080012e 	bgeu	r4,r2,d034 <__umoddi3+0x47c>
    d030:	24c9883a 	add	r4,r4,r19
    d034:	20a3c83a 	sub	r17,r4,r2
    d038:	b00b883a 	mov	r5,r22
    d03c:	8809883a 	mov	r4,r17
    d040:	000d24c0 	call	d24c <__umodsi3>
    d044:	102f883a 	mov	r23,r2
    d048:	8809883a 	mov	r4,r17
    d04c:	b00b883a 	mov	r5,r22
    d050:	000d1e80 	call	d1e8 <__udivsi3>
    d054:	b82e943a 	slli	r23,r23,16
    d058:	a885383a 	mul	r2,r21,r2
    d05c:	e13fffcc 	andi	r4,fp,65535
    d060:	25c8b03a 	or	r4,r4,r23
    d064:	2080042e 	bgeu	r4,r2,d078 <__umoddi3+0x4c0>
    d068:	24c9883a 	add	r4,r4,r19
    d06c:	24c00236 	bltu	r4,r19,d078 <__umoddi3+0x4c0>
    d070:	2080012e 	bgeu	r4,r2,d078 <__umoddi3+0x4c0>
    d074:	24c9883a 	add	r4,r4,r19
    d078:	20a3c83a 	sub	r17,r4,r2
    d07c:	003f4806 	br	cda0 <__alt_data_end+0xfffccda0>
    d080:	2c8fc83a 	sub	r7,r5,r18
    d084:	1545c83a 	sub	r2,r2,r21
    d088:	29cb803a 	cmpltu	r5,r5,r7
    d08c:	1145c83a 	sub	r2,r2,r5
    d090:	4089c83a 	sub	r4,r8,r2
    d094:	003fc706 	br	cfb4 <__alt_data_end+0xfffccfb4>
    d098:	01000604 	movi	r4,24
    d09c:	003f1806 	br	cd00 <__alt_data_end+0xfffccd00>
    d0a0:	00800604 	movi	r2,24
    d0a4:	003f3206 	br	cd70 <__alt_data_end+0xfffccd70>
    d0a8:	01000604 	movi	r4,24
    d0ac:	003ed906 	br	cc14 <__alt_data_end+0xfffccc14>
    d0b0:	413fa52e 	bgeu	r8,r4,cf48 <__alt_data_end+0xfffccf48>
    d0b4:	297fff84 	addi	r5,r5,-2
    d0b8:	4551883a 	add	r8,r8,r21
    d0bc:	003fa306 	br	cf4c <__alt_data_end+0xfffccf4c>
    d0c0:	15ff8b2e 	bgeu	r2,r23,cef0 <__alt_data_end+0xfffccef0>
    d0c4:	31bfff84 	addi	r6,r6,-2
    d0c8:	1545883a 	add	r2,r2,r21
    d0cc:	003f8906 	br	cef4 <__alt_data_end+0xfffccef4>
    d0d0:	24c9883a 	add	r4,r4,r19
    d0d4:	003eee06 	br	cc90 <__alt_data_end+0xfffccc90>
    d0d8:	8005883a 	mov	r2,r16
    d0dc:	003f1706 	br	cd3c <__alt_data_end+0xfffccd3c>
    d0e0:	817fe736 	bltu	r16,r5,d080 <__alt_data_end+0xfffcd080>
    d0e4:	280f883a 	mov	r7,r5
    d0e8:	0009883a 	mov	r4,zero
    d0ec:	003fb106 	br	cfb4 <__alt_data_end+0xfffccfb4>

0000d0f0 <__divsi3>:
    d0f0:	20001b16 	blt	r4,zero,d160 <__divsi3+0x70>
    d0f4:	000f883a 	mov	r7,zero
    d0f8:	28001616 	blt	r5,zero,d154 <__divsi3+0x64>
    d0fc:	200d883a 	mov	r6,r4
    d100:	29001a2e 	bgeu	r5,r4,d16c <__divsi3+0x7c>
    d104:	00800804 	movi	r2,32
    d108:	00c00044 	movi	r3,1
    d10c:	00000106 	br	d114 <__divsi3+0x24>
    d110:	10000d26 	beq	r2,zero,d148 <__divsi3+0x58>
    d114:	294b883a 	add	r5,r5,r5
    d118:	10bfffc4 	addi	r2,r2,-1
    d11c:	18c7883a 	add	r3,r3,r3
    d120:	293ffb36 	bltu	r5,r4,d110 <__alt_data_end+0xfffcd110>
    d124:	0005883a 	mov	r2,zero
    d128:	18000726 	beq	r3,zero,d148 <__divsi3+0x58>
    d12c:	0005883a 	mov	r2,zero
    d130:	31400236 	bltu	r6,r5,d13c <__divsi3+0x4c>
    d134:	314dc83a 	sub	r6,r6,r5
    d138:	10c4b03a 	or	r2,r2,r3
    d13c:	1806d07a 	srli	r3,r3,1
    d140:	280ad07a 	srli	r5,r5,1
    d144:	183ffa1e 	bne	r3,zero,d130 <__alt_data_end+0xfffcd130>
    d148:	38000126 	beq	r7,zero,d150 <__divsi3+0x60>
    d14c:	0085c83a 	sub	r2,zero,r2
    d150:	f800283a 	ret
    d154:	014bc83a 	sub	r5,zero,r5
    d158:	39c0005c 	xori	r7,r7,1
    d15c:	003fe706 	br	d0fc <__alt_data_end+0xfffcd0fc>
    d160:	0109c83a 	sub	r4,zero,r4
    d164:	01c00044 	movi	r7,1
    d168:	003fe306 	br	d0f8 <__alt_data_end+0xfffcd0f8>
    d16c:	00c00044 	movi	r3,1
    d170:	003fee06 	br	d12c <__alt_data_end+0xfffcd12c>

0000d174 <__modsi3>:
    d174:	20001716 	blt	r4,zero,d1d4 <__modsi3+0x60>
    d178:	000f883a 	mov	r7,zero
    d17c:	2005883a 	mov	r2,r4
    d180:	28001216 	blt	r5,zero,d1cc <__modsi3+0x58>
    d184:	2900162e 	bgeu	r5,r4,d1e0 <__modsi3+0x6c>
    d188:	01800804 	movi	r6,32
    d18c:	00c00044 	movi	r3,1
    d190:	00000106 	br	d198 <__modsi3+0x24>
    d194:	30000a26 	beq	r6,zero,d1c0 <__modsi3+0x4c>
    d198:	294b883a 	add	r5,r5,r5
    d19c:	31bfffc4 	addi	r6,r6,-1
    d1a0:	18c7883a 	add	r3,r3,r3
    d1a4:	293ffb36 	bltu	r5,r4,d194 <__alt_data_end+0xfffcd194>
    d1a8:	18000526 	beq	r3,zero,d1c0 <__modsi3+0x4c>
    d1ac:	1806d07a 	srli	r3,r3,1
    d1b0:	11400136 	bltu	r2,r5,d1b8 <__modsi3+0x44>
    d1b4:	1145c83a 	sub	r2,r2,r5
    d1b8:	280ad07a 	srli	r5,r5,1
    d1bc:	183ffb1e 	bne	r3,zero,d1ac <__alt_data_end+0xfffcd1ac>
    d1c0:	38000126 	beq	r7,zero,d1c8 <__modsi3+0x54>
    d1c4:	0085c83a 	sub	r2,zero,r2
    d1c8:	f800283a 	ret
    d1cc:	014bc83a 	sub	r5,zero,r5
    d1d0:	003fec06 	br	d184 <__alt_data_end+0xfffcd184>
    d1d4:	0109c83a 	sub	r4,zero,r4
    d1d8:	01c00044 	movi	r7,1
    d1dc:	003fe706 	br	d17c <__alt_data_end+0xfffcd17c>
    d1e0:	00c00044 	movi	r3,1
    d1e4:	003ff106 	br	d1ac <__alt_data_end+0xfffcd1ac>

0000d1e8 <__udivsi3>:
    d1e8:	200d883a 	mov	r6,r4
    d1ec:	2900152e 	bgeu	r5,r4,d244 <__udivsi3+0x5c>
    d1f0:	28001416 	blt	r5,zero,d244 <__udivsi3+0x5c>
    d1f4:	00800804 	movi	r2,32
    d1f8:	00c00044 	movi	r3,1
    d1fc:	00000206 	br	d208 <__udivsi3+0x20>
    d200:	10000e26 	beq	r2,zero,d23c <__udivsi3+0x54>
    d204:	28000516 	blt	r5,zero,d21c <__udivsi3+0x34>
    d208:	294b883a 	add	r5,r5,r5
    d20c:	10bfffc4 	addi	r2,r2,-1
    d210:	18c7883a 	add	r3,r3,r3
    d214:	293ffa36 	bltu	r5,r4,d200 <__alt_data_end+0xfffcd200>
    d218:	18000826 	beq	r3,zero,d23c <__udivsi3+0x54>
    d21c:	0005883a 	mov	r2,zero
    d220:	31400236 	bltu	r6,r5,d22c <__udivsi3+0x44>
    d224:	314dc83a 	sub	r6,r6,r5
    d228:	10c4b03a 	or	r2,r2,r3
    d22c:	1806d07a 	srli	r3,r3,1
    d230:	280ad07a 	srli	r5,r5,1
    d234:	183ffa1e 	bne	r3,zero,d220 <__alt_data_end+0xfffcd220>
    d238:	f800283a 	ret
    d23c:	0005883a 	mov	r2,zero
    d240:	f800283a 	ret
    d244:	00c00044 	movi	r3,1
    d248:	003ff406 	br	d21c <__alt_data_end+0xfffcd21c>

0000d24c <__umodsi3>:
    d24c:	2005883a 	mov	r2,r4
    d250:	2900122e 	bgeu	r5,r4,d29c <__umodsi3+0x50>
    d254:	28001116 	blt	r5,zero,d29c <__umodsi3+0x50>
    d258:	01800804 	movi	r6,32
    d25c:	00c00044 	movi	r3,1
    d260:	00000206 	br	d26c <__umodsi3+0x20>
    d264:	30000c26 	beq	r6,zero,d298 <__umodsi3+0x4c>
    d268:	28000516 	blt	r5,zero,d280 <__umodsi3+0x34>
    d26c:	294b883a 	add	r5,r5,r5
    d270:	31bfffc4 	addi	r6,r6,-1
    d274:	18c7883a 	add	r3,r3,r3
    d278:	293ffa36 	bltu	r5,r4,d264 <__alt_data_end+0xfffcd264>
    d27c:	18000626 	beq	r3,zero,d298 <__umodsi3+0x4c>
    d280:	1806d07a 	srli	r3,r3,1
    d284:	11400136 	bltu	r2,r5,d28c <__umodsi3+0x40>
    d288:	1145c83a 	sub	r2,r2,r5
    d28c:	280ad07a 	srli	r5,r5,1
    d290:	183ffb1e 	bne	r3,zero,d280 <__alt_data_end+0xfffcd280>
    d294:	f800283a 	ret
    d298:	f800283a 	ret
    d29c:	00c00044 	movi	r3,1
    d2a0:	003ff706 	br	d280 <__alt_data_end+0xfffcd280>

0000d2a4 <__adddf3>:
    d2a4:	02c00434 	movhi	r11,16
    d2a8:	5affffc4 	addi	r11,r11,-1
    d2ac:	2806d7fa 	srli	r3,r5,31
    d2b0:	2ad4703a 	and	r10,r5,r11
    d2b4:	3ad2703a 	and	r9,r7,r11
    d2b8:	3804d53a 	srli	r2,r7,20
    d2bc:	3018d77a 	srli	r12,r6,29
    d2c0:	280ad53a 	srli	r5,r5,20
    d2c4:	501490fa 	slli	r10,r10,3
    d2c8:	2010d77a 	srli	r8,r4,29
    d2cc:	481290fa 	slli	r9,r9,3
    d2d0:	380ed7fa 	srli	r7,r7,31
    d2d4:	defffb04 	addi	sp,sp,-20
    d2d8:	dc800215 	stw	r18,8(sp)
    d2dc:	dc400115 	stw	r17,4(sp)
    d2e0:	dc000015 	stw	r16,0(sp)
    d2e4:	dfc00415 	stw	ra,16(sp)
    d2e8:	dcc00315 	stw	r19,12(sp)
    d2ec:	1c803fcc 	andi	r18,r3,255
    d2f0:	2c01ffcc 	andi	r16,r5,2047
    d2f4:	5210b03a 	or	r8,r10,r8
    d2f8:	202290fa 	slli	r17,r4,3
    d2fc:	1081ffcc 	andi	r2,r2,2047
    d300:	4b12b03a 	or	r9,r9,r12
    d304:	300c90fa 	slli	r6,r6,3
    d308:	91c07526 	beq	r18,r7,d4e0 <__adddf3+0x23c>
    d30c:	8087c83a 	sub	r3,r16,r2
    d310:	00c0ab0e 	bge	zero,r3,d5c0 <__adddf3+0x31c>
    d314:	10002a1e 	bne	r2,zero,d3c0 <__adddf3+0x11c>
    d318:	4984b03a 	or	r2,r9,r6
    d31c:	1000961e 	bne	r2,zero,d578 <__adddf3+0x2d4>
    d320:	888001cc 	andi	r2,r17,7
    d324:	10000726 	beq	r2,zero,d344 <__adddf3+0xa0>
    d328:	888003cc 	andi	r2,r17,15
    d32c:	00c00104 	movi	r3,4
    d330:	10c00426 	beq	r2,r3,d344 <__adddf3+0xa0>
    d334:	88c7883a 	add	r3,r17,r3
    d338:	1c63803a 	cmpltu	r17,r3,r17
    d33c:	4451883a 	add	r8,r8,r17
    d340:	1823883a 	mov	r17,r3
    d344:	4080202c 	andhi	r2,r8,128
    d348:	10005926 	beq	r2,zero,d4b0 <__adddf3+0x20c>
    d34c:	84000044 	addi	r16,r16,1
    d350:	0081ffc4 	movi	r2,2047
    d354:	8080ba26 	beq	r16,r2,d640 <__adddf3+0x39c>
    d358:	00bfe034 	movhi	r2,65408
    d35c:	10bfffc4 	addi	r2,r2,-1
    d360:	4090703a 	and	r8,r8,r2
    d364:	4004977a 	slli	r2,r8,29
    d368:	4010927a 	slli	r8,r8,9
    d36c:	8822d0fa 	srli	r17,r17,3
    d370:	8401ffcc 	andi	r16,r16,2047
    d374:	4010d33a 	srli	r8,r8,12
    d378:	9007883a 	mov	r3,r18
    d37c:	1444b03a 	or	r2,r2,r17
    d380:	8401ffcc 	andi	r16,r16,2047
    d384:	8020953a 	slli	r16,r16,20
    d388:	18c03fcc 	andi	r3,r3,255
    d38c:	01000434 	movhi	r4,16
    d390:	213fffc4 	addi	r4,r4,-1
    d394:	180697fa 	slli	r3,r3,31
    d398:	4110703a 	and	r8,r8,r4
    d39c:	4410b03a 	or	r8,r8,r16
    d3a0:	40c6b03a 	or	r3,r8,r3
    d3a4:	dfc00417 	ldw	ra,16(sp)
    d3a8:	dcc00317 	ldw	r19,12(sp)
    d3ac:	dc800217 	ldw	r18,8(sp)
    d3b0:	dc400117 	ldw	r17,4(sp)
    d3b4:	dc000017 	ldw	r16,0(sp)
    d3b8:	dec00504 	addi	sp,sp,20
    d3bc:	f800283a 	ret
    d3c0:	0081ffc4 	movi	r2,2047
    d3c4:	80bfd626 	beq	r16,r2,d320 <__alt_data_end+0xfffcd320>
    d3c8:	4a402034 	orhi	r9,r9,128
    d3cc:	00800e04 	movi	r2,56
    d3d0:	10c09f16 	blt	r2,r3,d650 <__adddf3+0x3ac>
    d3d4:	008007c4 	movi	r2,31
    d3d8:	10c0c216 	blt	r2,r3,d6e4 <__adddf3+0x440>
    d3dc:	00800804 	movi	r2,32
    d3e0:	10c5c83a 	sub	r2,r2,r3
    d3e4:	488a983a 	sll	r5,r9,r2
    d3e8:	30c8d83a 	srl	r4,r6,r3
    d3ec:	3084983a 	sll	r2,r6,r2
    d3f0:	48c6d83a 	srl	r3,r9,r3
    d3f4:	290cb03a 	or	r6,r5,r4
    d3f8:	1004c03a 	cmpne	r2,r2,zero
    d3fc:	308cb03a 	or	r6,r6,r2
    d400:	898dc83a 	sub	r6,r17,r6
    d404:	89a3803a 	cmpltu	r17,r17,r6
    d408:	40d1c83a 	sub	r8,r8,r3
    d40c:	4451c83a 	sub	r8,r8,r17
    d410:	3023883a 	mov	r17,r6
    d414:	4080202c 	andhi	r2,r8,128
    d418:	10002326 	beq	r2,zero,d4a8 <__adddf3+0x204>
    d41c:	04c02034 	movhi	r19,128
    d420:	9cffffc4 	addi	r19,r19,-1
    d424:	44e6703a 	and	r19,r8,r19
    d428:	98007626 	beq	r19,zero,d604 <__adddf3+0x360>
    d42c:	9809883a 	mov	r4,r19
    d430:	000f8a80 	call	f8a8 <__clzsi2>
    d434:	10fffe04 	addi	r3,r2,-8
    d438:	010007c4 	movi	r4,31
    d43c:	20c07716 	blt	r4,r3,d61c <__adddf3+0x378>
    d440:	00800804 	movi	r2,32
    d444:	10c5c83a 	sub	r2,r2,r3
    d448:	8884d83a 	srl	r2,r17,r2
    d44c:	98d0983a 	sll	r8,r19,r3
    d450:	88e2983a 	sll	r17,r17,r3
    d454:	1204b03a 	or	r2,r2,r8
    d458:	1c007416 	blt	r3,r16,d62c <__adddf3+0x388>
    d45c:	1c21c83a 	sub	r16,r3,r16
    d460:	82000044 	addi	r8,r16,1
    d464:	00c007c4 	movi	r3,31
    d468:	1a009116 	blt	r3,r8,d6b0 <__adddf3+0x40c>
    d46c:	00c00804 	movi	r3,32
    d470:	1a07c83a 	sub	r3,r3,r8
    d474:	8a08d83a 	srl	r4,r17,r8
    d478:	88e2983a 	sll	r17,r17,r3
    d47c:	10c6983a 	sll	r3,r2,r3
    d480:	1210d83a 	srl	r8,r2,r8
    d484:	8804c03a 	cmpne	r2,r17,zero
    d488:	1906b03a 	or	r3,r3,r4
    d48c:	18a2b03a 	or	r17,r3,r2
    d490:	0021883a 	mov	r16,zero
    d494:	003fa206 	br	d320 <__alt_data_end+0xfffcd320>
    d498:	1890b03a 	or	r8,r3,r2
    d49c:	40017d26 	beq	r8,zero,da94 <__adddf3+0x7f0>
    d4a0:	1011883a 	mov	r8,r2
    d4a4:	1823883a 	mov	r17,r3
    d4a8:	888001cc 	andi	r2,r17,7
    d4ac:	103f9e1e 	bne	r2,zero,d328 <__alt_data_end+0xfffcd328>
    d4b0:	4004977a 	slli	r2,r8,29
    d4b4:	8822d0fa 	srli	r17,r17,3
    d4b8:	4010d0fa 	srli	r8,r8,3
    d4bc:	9007883a 	mov	r3,r18
    d4c0:	1444b03a 	or	r2,r2,r17
    d4c4:	0101ffc4 	movi	r4,2047
    d4c8:	81002426 	beq	r16,r4,d55c <__adddf3+0x2b8>
    d4cc:	8120703a 	and	r16,r16,r4
    d4d0:	01000434 	movhi	r4,16
    d4d4:	213fffc4 	addi	r4,r4,-1
    d4d8:	4110703a 	and	r8,r8,r4
    d4dc:	003fa806 	br	d380 <__alt_data_end+0xfffcd380>
    d4e0:	8089c83a 	sub	r4,r16,r2
    d4e4:	01005e0e 	bge	zero,r4,d660 <__adddf3+0x3bc>
    d4e8:	10002b26 	beq	r2,zero,d598 <__adddf3+0x2f4>
    d4ec:	0081ffc4 	movi	r2,2047
    d4f0:	80bf8b26 	beq	r16,r2,d320 <__alt_data_end+0xfffcd320>
    d4f4:	4a402034 	orhi	r9,r9,128
    d4f8:	00800e04 	movi	r2,56
    d4fc:	1100a40e 	bge	r2,r4,d790 <__adddf3+0x4ec>
    d500:	498cb03a 	or	r6,r9,r6
    d504:	300ac03a 	cmpne	r5,r6,zero
    d508:	0013883a 	mov	r9,zero
    d50c:	2c4b883a 	add	r5,r5,r17
    d510:	2c63803a 	cmpltu	r17,r5,r17
    d514:	4a11883a 	add	r8,r9,r8
    d518:	8a11883a 	add	r8,r17,r8
    d51c:	2823883a 	mov	r17,r5
    d520:	4080202c 	andhi	r2,r8,128
    d524:	103fe026 	beq	r2,zero,d4a8 <__alt_data_end+0xfffcd4a8>
    d528:	84000044 	addi	r16,r16,1
    d52c:	0081ffc4 	movi	r2,2047
    d530:	8080d226 	beq	r16,r2,d87c <__adddf3+0x5d8>
    d534:	00bfe034 	movhi	r2,65408
    d538:	10bfffc4 	addi	r2,r2,-1
    d53c:	4090703a 	and	r8,r8,r2
    d540:	880ad07a 	srli	r5,r17,1
    d544:	400897fa 	slli	r4,r8,31
    d548:	88c0004c 	andi	r3,r17,1
    d54c:	28e2b03a 	or	r17,r5,r3
    d550:	4010d07a 	srli	r8,r8,1
    d554:	2462b03a 	or	r17,r4,r17
    d558:	003f7106 	br	d320 <__alt_data_end+0xfffcd320>
    d55c:	4088b03a 	or	r4,r8,r2
    d560:	20014526 	beq	r4,zero,da78 <__adddf3+0x7d4>
    d564:	01000434 	movhi	r4,16
    d568:	42000234 	orhi	r8,r8,8
    d56c:	213fffc4 	addi	r4,r4,-1
    d570:	4110703a 	and	r8,r8,r4
    d574:	003f8206 	br	d380 <__alt_data_end+0xfffcd380>
    d578:	18ffffc4 	addi	r3,r3,-1
    d57c:	1800491e 	bne	r3,zero,d6a4 <__adddf3+0x400>
    d580:	898bc83a 	sub	r5,r17,r6
    d584:	8963803a 	cmpltu	r17,r17,r5
    d588:	4251c83a 	sub	r8,r8,r9
    d58c:	4451c83a 	sub	r8,r8,r17
    d590:	2823883a 	mov	r17,r5
    d594:	003f9f06 	br	d414 <__alt_data_end+0xfffcd414>
    d598:	4984b03a 	or	r2,r9,r6
    d59c:	103f6026 	beq	r2,zero,d320 <__alt_data_end+0xfffcd320>
    d5a0:	213fffc4 	addi	r4,r4,-1
    d5a4:	2000931e 	bne	r4,zero,d7f4 <__adddf3+0x550>
    d5a8:	898d883a 	add	r6,r17,r6
    d5ac:	3463803a 	cmpltu	r17,r6,r17
    d5b0:	4251883a 	add	r8,r8,r9
    d5b4:	8a11883a 	add	r8,r17,r8
    d5b8:	3023883a 	mov	r17,r6
    d5bc:	003fd806 	br	d520 <__alt_data_end+0xfffcd520>
    d5c0:	1800541e 	bne	r3,zero,d714 <__adddf3+0x470>
    d5c4:	80800044 	addi	r2,r16,1
    d5c8:	1081ffcc 	andi	r2,r2,2047
    d5cc:	00c00044 	movi	r3,1
    d5d0:	1880a00e 	bge	r3,r2,d854 <__adddf3+0x5b0>
    d5d4:	8989c83a 	sub	r4,r17,r6
    d5d8:	8905803a 	cmpltu	r2,r17,r4
    d5dc:	4267c83a 	sub	r19,r8,r9
    d5e0:	98a7c83a 	sub	r19,r19,r2
    d5e4:	9880202c 	andhi	r2,r19,128
    d5e8:	10006326 	beq	r2,zero,d778 <__adddf3+0x4d4>
    d5ec:	3463c83a 	sub	r17,r6,r17
    d5f0:	4a07c83a 	sub	r3,r9,r8
    d5f4:	344d803a 	cmpltu	r6,r6,r17
    d5f8:	19a7c83a 	sub	r19,r3,r6
    d5fc:	3825883a 	mov	r18,r7
    d600:	983f8a1e 	bne	r19,zero,d42c <__alt_data_end+0xfffcd42c>
    d604:	8809883a 	mov	r4,r17
    d608:	000f8a80 	call	f8a8 <__clzsi2>
    d60c:	10800804 	addi	r2,r2,32
    d610:	10fffe04 	addi	r3,r2,-8
    d614:	010007c4 	movi	r4,31
    d618:	20ff890e 	bge	r4,r3,d440 <__alt_data_end+0xfffcd440>
    d61c:	10bff604 	addi	r2,r2,-40
    d620:	8884983a 	sll	r2,r17,r2
    d624:	0023883a 	mov	r17,zero
    d628:	1c3f8c0e 	bge	r3,r16,d45c <__alt_data_end+0xfffcd45c>
    d62c:	023fe034 	movhi	r8,65408
    d630:	423fffc4 	addi	r8,r8,-1
    d634:	80e1c83a 	sub	r16,r16,r3
    d638:	1210703a 	and	r8,r2,r8
    d63c:	003f3806 	br	d320 <__alt_data_end+0xfffcd320>
    d640:	9007883a 	mov	r3,r18
    d644:	0011883a 	mov	r8,zero
    d648:	0005883a 	mov	r2,zero
    d64c:	003f4c06 	br	d380 <__alt_data_end+0xfffcd380>
    d650:	498cb03a 	or	r6,r9,r6
    d654:	300cc03a 	cmpne	r6,r6,zero
    d658:	0007883a 	mov	r3,zero
    d65c:	003f6806 	br	d400 <__alt_data_end+0xfffcd400>
    d660:	20009c1e 	bne	r4,zero,d8d4 <__adddf3+0x630>
    d664:	80800044 	addi	r2,r16,1
    d668:	1141ffcc 	andi	r5,r2,2047
    d66c:	01000044 	movi	r4,1
    d670:	2140670e 	bge	r4,r5,d810 <__adddf3+0x56c>
    d674:	0101ffc4 	movi	r4,2047
    d678:	11007f26 	beq	r2,r4,d878 <__adddf3+0x5d4>
    d67c:	898d883a 	add	r6,r17,r6
    d680:	4247883a 	add	r3,r8,r9
    d684:	3451803a 	cmpltu	r8,r6,r17
    d688:	40d1883a 	add	r8,r8,r3
    d68c:	402297fa 	slli	r17,r8,31
    d690:	300cd07a 	srli	r6,r6,1
    d694:	4010d07a 	srli	r8,r8,1
    d698:	1021883a 	mov	r16,r2
    d69c:	89a2b03a 	or	r17,r17,r6
    d6a0:	003f1f06 	br	d320 <__alt_data_end+0xfffcd320>
    d6a4:	0081ffc4 	movi	r2,2047
    d6a8:	80bf481e 	bne	r16,r2,d3cc <__alt_data_end+0xfffcd3cc>
    d6ac:	003f1c06 	br	d320 <__alt_data_end+0xfffcd320>
    d6b0:	843ff844 	addi	r16,r16,-31
    d6b4:	01000804 	movi	r4,32
    d6b8:	1406d83a 	srl	r3,r2,r16
    d6bc:	41005026 	beq	r8,r4,d800 <__adddf3+0x55c>
    d6c0:	01001004 	movi	r4,64
    d6c4:	2211c83a 	sub	r8,r4,r8
    d6c8:	1204983a 	sll	r2,r2,r8
    d6cc:	88a2b03a 	or	r17,r17,r2
    d6d0:	8822c03a 	cmpne	r17,r17,zero
    d6d4:	1c62b03a 	or	r17,r3,r17
    d6d8:	0011883a 	mov	r8,zero
    d6dc:	0021883a 	mov	r16,zero
    d6e0:	003f7106 	br	d4a8 <__alt_data_end+0xfffcd4a8>
    d6e4:	193ff804 	addi	r4,r3,-32
    d6e8:	00800804 	movi	r2,32
    d6ec:	4908d83a 	srl	r4,r9,r4
    d6f0:	18804526 	beq	r3,r2,d808 <__adddf3+0x564>
    d6f4:	00801004 	movi	r2,64
    d6f8:	10c5c83a 	sub	r2,r2,r3
    d6fc:	4886983a 	sll	r3,r9,r2
    d700:	198cb03a 	or	r6,r3,r6
    d704:	300cc03a 	cmpne	r6,r6,zero
    d708:	218cb03a 	or	r6,r4,r6
    d70c:	0007883a 	mov	r3,zero
    d710:	003f3b06 	br	d400 <__alt_data_end+0xfffcd400>
    d714:	80002a26 	beq	r16,zero,d7c0 <__adddf3+0x51c>
    d718:	0101ffc4 	movi	r4,2047
    d71c:	11006826 	beq	r2,r4,d8c0 <__adddf3+0x61c>
    d720:	00c7c83a 	sub	r3,zero,r3
    d724:	42002034 	orhi	r8,r8,128
    d728:	01000e04 	movi	r4,56
    d72c:	20c07c16 	blt	r4,r3,d920 <__adddf3+0x67c>
    d730:	010007c4 	movi	r4,31
    d734:	20c0da16 	blt	r4,r3,daa0 <__adddf3+0x7fc>
    d738:	01000804 	movi	r4,32
    d73c:	20c9c83a 	sub	r4,r4,r3
    d740:	4114983a 	sll	r10,r8,r4
    d744:	88cad83a 	srl	r5,r17,r3
    d748:	8908983a 	sll	r4,r17,r4
    d74c:	40c6d83a 	srl	r3,r8,r3
    d750:	5162b03a 	or	r17,r10,r5
    d754:	2008c03a 	cmpne	r4,r4,zero
    d758:	8922b03a 	or	r17,r17,r4
    d75c:	3463c83a 	sub	r17,r6,r17
    d760:	48c7c83a 	sub	r3,r9,r3
    d764:	344d803a 	cmpltu	r6,r6,r17
    d768:	1991c83a 	sub	r8,r3,r6
    d76c:	1021883a 	mov	r16,r2
    d770:	3825883a 	mov	r18,r7
    d774:	003f2706 	br	d414 <__alt_data_end+0xfffcd414>
    d778:	24d0b03a 	or	r8,r4,r19
    d77c:	40001b1e 	bne	r8,zero,d7ec <__adddf3+0x548>
    d780:	0005883a 	mov	r2,zero
    d784:	0007883a 	mov	r3,zero
    d788:	0021883a 	mov	r16,zero
    d78c:	003f4d06 	br	d4c4 <__alt_data_end+0xfffcd4c4>
    d790:	008007c4 	movi	r2,31
    d794:	11003c16 	blt	r2,r4,d888 <__adddf3+0x5e4>
    d798:	00800804 	movi	r2,32
    d79c:	1105c83a 	sub	r2,r2,r4
    d7a0:	488e983a 	sll	r7,r9,r2
    d7a4:	310ad83a 	srl	r5,r6,r4
    d7a8:	3084983a 	sll	r2,r6,r2
    d7ac:	4912d83a 	srl	r9,r9,r4
    d7b0:	394ab03a 	or	r5,r7,r5
    d7b4:	1004c03a 	cmpne	r2,r2,zero
    d7b8:	288ab03a 	or	r5,r5,r2
    d7bc:	003f5306 	br	d50c <__alt_data_end+0xfffcd50c>
    d7c0:	4448b03a 	or	r4,r8,r17
    d7c4:	20003e26 	beq	r4,zero,d8c0 <__adddf3+0x61c>
    d7c8:	00c6303a 	nor	r3,zero,r3
    d7cc:	18003a1e 	bne	r3,zero,d8b8 <__adddf3+0x614>
    d7d0:	3463c83a 	sub	r17,r6,r17
    d7d4:	4a07c83a 	sub	r3,r9,r8
    d7d8:	344d803a 	cmpltu	r6,r6,r17
    d7dc:	1991c83a 	sub	r8,r3,r6
    d7e0:	1021883a 	mov	r16,r2
    d7e4:	3825883a 	mov	r18,r7
    d7e8:	003f0a06 	br	d414 <__alt_data_end+0xfffcd414>
    d7ec:	2023883a 	mov	r17,r4
    d7f0:	003f0d06 	br	d428 <__alt_data_end+0xfffcd428>
    d7f4:	0081ffc4 	movi	r2,2047
    d7f8:	80bf3f1e 	bne	r16,r2,d4f8 <__alt_data_end+0xfffcd4f8>
    d7fc:	003ec806 	br	d320 <__alt_data_end+0xfffcd320>
    d800:	0005883a 	mov	r2,zero
    d804:	003fb106 	br	d6cc <__alt_data_end+0xfffcd6cc>
    d808:	0007883a 	mov	r3,zero
    d80c:	003fbc06 	br	d700 <__alt_data_end+0xfffcd700>
    d810:	4444b03a 	or	r2,r8,r17
    d814:	8000871e 	bne	r16,zero,da34 <__adddf3+0x790>
    d818:	1000ba26 	beq	r2,zero,db04 <__adddf3+0x860>
    d81c:	4984b03a 	or	r2,r9,r6
    d820:	103ebf26 	beq	r2,zero,d320 <__alt_data_end+0xfffcd320>
    d824:	8985883a 	add	r2,r17,r6
    d828:	4247883a 	add	r3,r8,r9
    d82c:	1451803a 	cmpltu	r8,r2,r17
    d830:	40d1883a 	add	r8,r8,r3
    d834:	40c0202c 	andhi	r3,r8,128
    d838:	1023883a 	mov	r17,r2
    d83c:	183f1a26 	beq	r3,zero,d4a8 <__alt_data_end+0xfffcd4a8>
    d840:	00bfe034 	movhi	r2,65408
    d844:	10bfffc4 	addi	r2,r2,-1
    d848:	2021883a 	mov	r16,r4
    d84c:	4090703a 	and	r8,r8,r2
    d850:	003eb306 	br	d320 <__alt_data_end+0xfffcd320>
    d854:	4444b03a 	or	r2,r8,r17
    d858:	8000291e 	bne	r16,zero,d900 <__adddf3+0x65c>
    d85c:	10004b1e 	bne	r2,zero,d98c <__adddf3+0x6e8>
    d860:	4990b03a 	or	r8,r9,r6
    d864:	40008b26 	beq	r8,zero,da94 <__adddf3+0x7f0>
    d868:	4811883a 	mov	r8,r9
    d86c:	3023883a 	mov	r17,r6
    d870:	3825883a 	mov	r18,r7
    d874:	003eaa06 	br	d320 <__alt_data_end+0xfffcd320>
    d878:	1021883a 	mov	r16,r2
    d87c:	0011883a 	mov	r8,zero
    d880:	0005883a 	mov	r2,zero
    d884:	003f0f06 	br	d4c4 <__alt_data_end+0xfffcd4c4>
    d888:	217ff804 	addi	r5,r4,-32
    d88c:	00800804 	movi	r2,32
    d890:	494ad83a 	srl	r5,r9,r5
    d894:	20807d26 	beq	r4,r2,da8c <__adddf3+0x7e8>
    d898:	00801004 	movi	r2,64
    d89c:	1109c83a 	sub	r4,r2,r4
    d8a0:	4912983a 	sll	r9,r9,r4
    d8a4:	498cb03a 	or	r6,r9,r6
    d8a8:	300cc03a 	cmpne	r6,r6,zero
    d8ac:	298ab03a 	or	r5,r5,r6
    d8b0:	0013883a 	mov	r9,zero
    d8b4:	003f1506 	br	d50c <__alt_data_end+0xfffcd50c>
    d8b8:	0101ffc4 	movi	r4,2047
    d8bc:	113f9a1e 	bne	r2,r4,d728 <__alt_data_end+0xfffcd728>
    d8c0:	4811883a 	mov	r8,r9
    d8c4:	3023883a 	mov	r17,r6
    d8c8:	1021883a 	mov	r16,r2
    d8cc:	3825883a 	mov	r18,r7
    d8d0:	003e9306 	br	d320 <__alt_data_end+0xfffcd320>
    d8d4:	8000161e 	bne	r16,zero,d930 <__adddf3+0x68c>
    d8d8:	444ab03a 	or	r5,r8,r17
    d8dc:	28005126 	beq	r5,zero,da24 <__adddf3+0x780>
    d8e0:	0108303a 	nor	r4,zero,r4
    d8e4:	20004d1e 	bne	r4,zero,da1c <__adddf3+0x778>
    d8e8:	89a3883a 	add	r17,r17,r6
    d8ec:	4253883a 	add	r9,r8,r9
    d8f0:	898d803a 	cmpltu	r6,r17,r6
    d8f4:	3251883a 	add	r8,r6,r9
    d8f8:	1021883a 	mov	r16,r2
    d8fc:	003f0806 	br	d520 <__alt_data_end+0xfffcd520>
    d900:	1000301e 	bne	r2,zero,d9c4 <__adddf3+0x720>
    d904:	4984b03a 	or	r2,r9,r6
    d908:	10007126 	beq	r2,zero,dad0 <__adddf3+0x82c>
    d90c:	4811883a 	mov	r8,r9
    d910:	3023883a 	mov	r17,r6
    d914:	3825883a 	mov	r18,r7
    d918:	0401ffc4 	movi	r16,2047
    d91c:	003e8006 	br	d320 <__alt_data_end+0xfffcd320>
    d920:	4462b03a 	or	r17,r8,r17
    d924:	8822c03a 	cmpne	r17,r17,zero
    d928:	0007883a 	mov	r3,zero
    d92c:	003f8b06 	br	d75c <__alt_data_end+0xfffcd75c>
    d930:	0141ffc4 	movi	r5,2047
    d934:	11403b26 	beq	r2,r5,da24 <__adddf3+0x780>
    d938:	0109c83a 	sub	r4,zero,r4
    d93c:	42002034 	orhi	r8,r8,128
    d940:	01400e04 	movi	r5,56
    d944:	29006716 	blt	r5,r4,dae4 <__adddf3+0x840>
    d948:	014007c4 	movi	r5,31
    d94c:	29007016 	blt	r5,r4,db10 <__adddf3+0x86c>
    d950:	01400804 	movi	r5,32
    d954:	290bc83a 	sub	r5,r5,r4
    d958:	4154983a 	sll	r10,r8,r5
    d95c:	890ed83a 	srl	r7,r17,r4
    d960:	894a983a 	sll	r5,r17,r5
    d964:	4108d83a 	srl	r4,r8,r4
    d968:	51e2b03a 	or	r17,r10,r7
    d96c:	280ac03a 	cmpne	r5,r5,zero
    d970:	8962b03a 	or	r17,r17,r5
    d974:	89a3883a 	add	r17,r17,r6
    d978:	2253883a 	add	r9,r4,r9
    d97c:	898d803a 	cmpltu	r6,r17,r6
    d980:	3251883a 	add	r8,r6,r9
    d984:	1021883a 	mov	r16,r2
    d988:	003ee506 	br	d520 <__alt_data_end+0xfffcd520>
    d98c:	4984b03a 	or	r2,r9,r6
    d990:	103e6326 	beq	r2,zero,d320 <__alt_data_end+0xfffcd320>
    d994:	8987c83a 	sub	r3,r17,r6
    d998:	88c9803a 	cmpltu	r4,r17,r3
    d99c:	4245c83a 	sub	r2,r8,r9
    d9a0:	1105c83a 	sub	r2,r2,r4
    d9a4:	1100202c 	andhi	r4,r2,128
    d9a8:	203ebb26 	beq	r4,zero,d498 <__alt_data_end+0xfffcd498>
    d9ac:	3463c83a 	sub	r17,r6,r17
    d9b0:	4a07c83a 	sub	r3,r9,r8
    d9b4:	344d803a 	cmpltu	r6,r6,r17
    d9b8:	1991c83a 	sub	r8,r3,r6
    d9bc:	3825883a 	mov	r18,r7
    d9c0:	003e5706 	br	d320 <__alt_data_end+0xfffcd320>
    d9c4:	4984b03a 	or	r2,r9,r6
    d9c8:	10002e26 	beq	r2,zero,da84 <__adddf3+0x7e0>
    d9cc:	4004d0fa 	srli	r2,r8,3
    d9d0:	8822d0fa 	srli	r17,r17,3
    d9d4:	4010977a 	slli	r8,r8,29
    d9d8:	10c0022c 	andhi	r3,r2,8
    d9dc:	4462b03a 	or	r17,r8,r17
    d9e0:	18000826 	beq	r3,zero,da04 <__adddf3+0x760>
    d9e4:	4808d0fa 	srli	r4,r9,3
    d9e8:	20c0022c 	andhi	r3,r4,8
    d9ec:	1800051e 	bne	r3,zero,da04 <__adddf3+0x760>
    d9f0:	300cd0fa 	srli	r6,r6,3
    d9f4:	4806977a 	slli	r3,r9,29
    d9f8:	2005883a 	mov	r2,r4
    d9fc:	3825883a 	mov	r18,r7
    da00:	19a2b03a 	or	r17,r3,r6
    da04:	8810d77a 	srli	r8,r17,29
    da08:	100490fa 	slli	r2,r2,3
    da0c:	882290fa 	slli	r17,r17,3
    da10:	0401ffc4 	movi	r16,2047
    da14:	4090b03a 	or	r8,r8,r2
    da18:	003e4106 	br	d320 <__alt_data_end+0xfffcd320>
    da1c:	0141ffc4 	movi	r5,2047
    da20:	117fc71e 	bne	r2,r5,d940 <__alt_data_end+0xfffcd940>
    da24:	4811883a 	mov	r8,r9
    da28:	3023883a 	mov	r17,r6
    da2c:	1021883a 	mov	r16,r2
    da30:	003e3b06 	br	d320 <__alt_data_end+0xfffcd320>
    da34:	10002f26 	beq	r2,zero,daf4 <__adddf3+0x850>
    da38:	4984b03a 	or	r2,r9,r6
    da3c:	10001126 	beq	r2,zero,da84 <__adddf3+0x7e0>
    da40:	4004d0fa 	srli	r2,r8,3
    da44:	8822d0fa 	srli	r17,r17,3
    da48:	4010977a 	slli	r8,r8,29
    da4c:	10c0022c 	andhi	r3,r2,8
    da50:	4462b03a 	or	r17,r8,r17
    da54:	183feb26 	beq	r3,zero,da04 <__alt_data_end+0xfffcda04>
    da58:	4808d0fa 	srli	r4,r9,3
    da5c:	20c0022c 	andhi	r3,r4,8
    da60:	183fe81e 	bne	r3,zero,da04 <__alt_data_end+0xfffcda04>
    da64:	300cd0fa 	srli	r6,r6,3
    da68:	4806977a 	slli	r3,r9,29
    da6c:	2005883a 	mov	r2,r4
    da70:	19a2b03a 	or	r17,r3,r6
    da74:	003fe306 	br	da04 <__alt_data_end+0xfffcda04>
    da78:	0011883a 	mov	r8,zero
    da7c:	0005883a 	mov	r2,zero
    da80:	003e3f06 	br	d380 <__alt_data_end+0xfffcd380>
    da84:	0401ffc4 	movi	r16,2047
    da88:	003e2506 	br	d320 <__alt_data_end+0xfffcd320>
    da8c:	0013883a 	mov	r9,zero
    da90:	003f8406 	br	d8a4 <__alt_data_end+0xfffcd8a4>
    da94:	0005883a 	mov	r2,zero
    da98:	0007883a 	mov	r3,zero
    da9c:	003e8906 	br	d4c4 <__alt_data_end+0xfffcd4c4>
    daa0:	197ff804 	addi	r5,r3,-32
    daa4:	01000804 	movi	r4,32
    daa8:	414ad83a 	srl	r5,r8,r5
    daac:	19002426 	beq	r3,r4,db40 <__adddf3+0x89c>
    dab0:	01001004 	movi	r4,64
    dab4:	20c7c83a 	sub	r3,r4,r3
    dab8:	40c6983a 	sll	r3,r8,r3
    dabc:	1c46b03a 	or	r3,r3,r17
    dac0:	1806c03a 	cmpne	r3,r3,zero
    dac4:	28e2b03a 	or	r17,r5,r3
    dac8:	0007883a 	mov	r3,zero
    dacc:	003f2306 	br	d75c <__alt_data_end+0xfffcd75c>
    dad0:	0007883a 	mov	r3,zero
    dad4:	5811883a 	mov	r8,r11
    dad8:	00bfffc4 	movi	r2,-1
    dadc:	0401ffc4 	movi	r16,2047
    dae0:	003e7806 	br	d4c4 <__alt_data_end+0xfffcd4c4>
    dae4:	4462b03a 	or	r17,r8,r17
    dae8:	8822c03a 	cmpne	r17,r17,zero
    daec:	0009883a 	mov	r4,zero
    daf0:	003fa006 	br	d974 <__alt_data_end+0xfffcd974>
    daf4:	4811883a 	mov	r8,r9
    daf8:	3023883a 	mov	r17,r6
    dafc:	0401ffc4 	movi	r16,2047
    db00:	003e0706 	br	d320 <__alt_data_end+0xfffcd320>
    db04:	4811883a 	mov	r8,r9
    db08:	3023883a 	mov	r17,r6
    db0c:	003e0406 	br	d320 <__alt_data_end+0xfffcd320>
    db10:	21fff804 	addi	r7,r4,-32
    db14:	01400804 	movi	r5,32
    db18:	41ced83a 	srl	r7,r8,r7
    db1c:	21400a26 	beq	r4,r5,db48 <__adddf3+0x8a4>
    db20:	01401004 	movi	r5,64
    db24:	2909c83a 	sub	r4,r5,r4
    db28:	4108983a 	sll	r4,r8,r4
    db2c:	2448b03a 	or	r4,r4,r17
    db30:	2008c03a 	cmpne	r4,r4,zero
    db34:	3922b03a 	or	r17,r7,r4
    db38:	0009883a 	mov	r4,zero
    db3c:	003f8d06 	br	d974 <__alt_data_end+0xfffcd974>
    db40:	0007883a 	mov	r3,zero
    db44:	003fdd06 	br	dabc <__alt_data_end+0xfffcdabc>
    db48:	0009883a 	mov	r4,zero
    db4c:	003ff706 	br	db2c <__alt_data_end+0xfffcdb2c>

0000db50 <__divdf3>:
    db50:	defff204 	addi	sp,sp,-56
    db54:	dd400915 	stw	r21,36(sp)
    db58:	282ad53a 	srli	r21,r5,20
    db5c:	dd000815 	stw	r20,32(sp)
    db60:	2828d7fa 	srli	r20,r5,31
    db64:	dc000415 	stw	r16,16(sp)
    db68:	04000434 	movhi	r16,16
    db6c:	df000c15 	stw	fp,48(sp)
    db70:	843fffc4 	addi	r16,r16,-1
    db74:	dfc00d15 	stw	ra,52(sp)
    db78:	ddc00b15 	stw	r23,44(sp)
    db7c:	dd800a15 	stw	r22,40(sp)
    db80:	dcc00715 	stw	r19,28(sp)
    db84:	dc800615 	stw	r18,24(sp)
    db88:	dc400515 	stw	r17,20(sp)
    db8c:	ad41ffcc 	andi	r21,r21,2047
    db90:	2c20703a 	and	r16,r5,r16
    db94:	a7003fcc 	andi	fp,r20,255
    db98:	a8006126 	beq	r21,zero,dd20 <__divdf3+0x1d0>
    db9c:	0081ffc4 	movi	r2,2047
    dba0:	2025883a 	mov	r18,r4
    dba4:	a8803726 	beq	r21,r2,dc84 <__divdf3+0x134>
    dba8:	80800434 	orhi	r2,r16,16
    dbac:	100490fa 	slli	r2,r2,3
    dbb0:	2020d77a 	srli	r16,r4,29
    dbb4:	202490fa 	slli	r18,r4,3
    dbb8:	ad7f0044 	addi	r21,r21,-1023
    dbbc:	80a0b03a 	or	r16,r16,r2
    dbc0:	0027883a 	mov	r19,zero
    dbc4:	0013883a 	mov	r9,zero
    dbc8:	3804d53a 	srli	r2,r7,20
    dbcc:	382cd7fa 	srli	r22,r7,31
    dbd0:	04400434 	movhi	r17,16
    dbd4:	8c7fffc4 	addi	r17,r17,-1
    dbd8:	1081ffcc 	andi	r2,r2,2047
    dbdc:	3011883a 	mov	r8,r6
    dbe0:	3c62703a 	and	r17,r7,r17
    dbe4:	b5c03fcc 	andi	r23,r22,255
    dbe8:	10006c26 	beq	r2,zero,dd9c <__divdf3+0x24c>
    dbec:	00c1ffc4 	movi	r3,2047
    dbf0:	10c06426 	beq	r2,r3,dd84 <__divdf3+0x234>
    dbf4:	88c00434 	orhi	r3,r17,16
    dbf8:	180690fa 	slli	r3,r3,3
    dbfc:	3022d77a 	srli	r17,r6,29
    dc00:	301090fa 	slli	r8,r6,3
    dc04:	10bf0044 	addi	r2,r2,-1023
    dc08:	88e2b03a 	or	r17,r17,r3
    dc0c:	000f883a 	mov	r7,zero
    dc10:	a58cf03a 	xor	r6,r20,r22
    dc14:	3cc8b03a 	or	r4,r7,r19
    dc18:	a8abc83a 	sub	r21,r21,r2
    dc1c:	008003c4 	movi	r2,15
    dc20:	3007883a 	mov	r3,r6
    dc24:	34c03fcc 	andi	r19,r6,255
    dc28:	11009036 	bltu	r2,r4,de6c <__divdf3+0x31c>
    dc2c:	200890ba 	slli	r4,r4,2
    dc30:	00800074 	movhi	r2,1
    dc34:	10b71104 	addi	r2,r2,-9148
    dc38:	2089883a 	add	r4,r4,r2
    dc3c:	20800017 	ldw	r2,0(r4)
    dc40:	1000683a 	jmp	r2
    dc44:	0000de6c 	andhi	zero,zero,889
    dc48:	0000dcbc 	xorhi	zero,zero,882
    dc4c:	0000de5c 	xori	zero,zero,889
    dc50:	0000dcb0 	cmpltui	zero,zero,882
    dc54:	0000de5c 	xori	zero,zero,889
    dc58:	0000de30 	cmpltui	zero,zero,888
    dc5c:	0000de5c 	xori	zero,zero,889
    dc60:	0000dcb0 	cmpltui	zero,zero,882
    dc64:	0000dcbc 	xorhi	zero,zero,882
    dc68:	0000dcbc 	xorhi	zero,zero,882
    dc6c:	0000de30 	cmpltui	zero,zero,888
    dc70:	0000dcb0 	cmpltui	zero,zero,882
    dc74:	0000dca0 	cmpeqi	zero,zero,882
    dc78:	0000dca0 	cmpeqi	zero,zero,882
    dc7c:	0000dca0 	cmpeqi	zero,zero,882
    dc80:	0000e150 	cmplti	zero,zero,901
    dc84:	2404b03a 	or	r2,r4,r16
    dc88:	1000661e 	bne	r2,zero,de24 <__divdf3+0x2d4>
    dc8c:	04c00204 	movi	r19,8
    dc90:	0021883a 	mov	r16,zero
    dc94:	0025883a 	mov	r18,zero
    dc98:	02400084 	movi	r9,2
    dc9c:	003fca06 	br	dbc8 <__alt_data_end+0xfffcdbc8>
    dca0:	8023883a 	mov	r17,r16
    dca4:	9011883a 	mov	r8,r18
    dca8:	e02f883a 	mov	r23,fp
    dcac:	480f883a 	mov	r7,r9
    dcb0:	00800084 	movi	r2,2
    dcb4:	3881311e 	bne	r7,r2,e17c <__divdf3+0x62c>
    dcb8:	b827883a 	mov	r19,r23
    dcbc:	98c0004c 	andi	r3,r19,1
    dcc0:	0081ffc4 	movi	r2,2047
    dcc4:	000b883a 	mov	r5,zero
    dcc8:	0025883a 	mov	r18,zero
    dccc:	1004953a 	slli	r2,r2,20
    dcd0:	18c03fcc 	andi	r3,r3,255
    dcd4:	04400434 	movhi	r17,16
    dcd8:	8c7fffc4 	addi	r17,r17,-1
    dcdc:	180697fa 	slli	r3,r3,31
    dce0:	2c4a703a 	and	r5,r5,r17
    dce4:	288ab03a 	or	r5,r5,r2
    dce8:	28c6b03a 	or	r3,r5,r3
    dcec:	9005883a 	mov	r2,r18
    dcf0:	dfc00d17 	ldw	ra,52(sp)
    dcf4:	df000c17 	ldw	fp,48(sp)
    dcf8:	ddc00b17 	ldw	r23,44(sp)
    dcfc:	dd800a17 	ldw	r22,40(sp)
    dd00:	dd400917 	ldw	r21,36(sp)
    dd04:	dd000817 	ldw	r20,32(sp)
    dd08:	dcc00717 	ldw	r19,28(sp)
    dd0c:	dc800617 	ldw	r18,24(sp)
    dd10:	dc400517 	ldw	r17,20(sp)
    dd14:	dc000417 	ldw	r16,16(sp)
    dd18:	dec00e04 	addi	sp,sp,56
    dd1c:	f800283a 	ret
    dd20:	2404b03a 	or	r2,r4,r16
    dd24:	2027883a 	mov	r19,r4
    dd28:	10003926 	beq	r2,zero,de10 <__divdf3+0x2c0>
    dd2c:	80012e26 	beq	r16,zero,e1e8 <__divdf3+0x698>
    dd30:	8009883a 	mov	r4,r16
    dd34:	d9800315 	stw	r6,12(sp)
    dd38:	d9c00215 	stw	r7,8(sp)
    dd3c:	000f8a80 	call	f8a8 <__clzsi2>
    dd40:	d9800317 	ldw	r6,12(sp)
    dd44:	d9c00217 	ldw	r7,8(sp)
    dd48:	113ffd44 	addi	r4,r2,-11
    dd4c:	00c00704 	movi	r3,28
    dd50:	19012116 	blt	r3,r4,e1d8 <__divdf3+0x688>
    dd54:	00c00744 	movi	r3,29
    dd58:	147ffe04 	addi	r17,r2,-8
    dd5c:	1907c83a 	sub	r3,r3,r4
    dd60:	8460983a 	sll	r16,r16,r17
    dd64:	98c6d83a 	srl	r3,r19,r3
    dd68:	9c64983a 	sll	r18,r19,r17
    dd6c:	1c20b03a 	or	r16,r3,r16
    dd70:	1080fcc4 	addi	r2,r2,1011
    dd74:	00abc83a 	sub	r21,zero,r2
    dd78:	0027883a 	mov	r19,zero
    dd7c:	0013883a 	mov	r9,zero
    dd80:	003f9106 	br	dbc8 <__alt_data_end+0xfffcdbc8>
    dd84:	3446b03a 	or	r3,r6,r17
    dd88:	18001f1e 	bne	r3,zero,de08 <__divdf3+0x2b8>
    dd8c:	0023883a 	mov	r17,zero
    dd90:	0011883a 	mov	r8,zero
    dd94:	01c00084 	movi	r7,2
    dd98:	003f9d06 	br	dc10 <__alt_data_end+0xfffcdc10>
    dd9c:	3446b03a 	or	r3,r6,r17
    dda0:	18001526 	beq	r3,zero,ddf8 <__divdf3+0x2a8>
    dda4:	88011b26 	beq	r17,zero,e214 <__divdf3+0x6c4>
    dda8:	8809883a 	mov	r4,r17
    ddac:	d9800315 	stw	r6,12(sp)
    ddb0:	da400115 	stw	r9,4(sp)
    ddb4:	000f8a80 	call	f8a8 <__clzsi2>
    ddb8:	d9800317 	ldw	r6,12(sp)
    ddbc:	da400117 	ldw	r9,4(sp)
    ddc0:	113ffd44 	addi	r4,r2,-11
    ddc4:	00c00704 	movi	r3,28
    ddc8:	19010e16 	blt	r3,r4,e204 <__divdf3+0x6b4>
    ddcc:	00c00744 	movi	r3,29
    ddd0:	123ffe04 	addi	r8,r2,-8
    ddd4:	1907c83a 	sub	r3,r3,r4
    ddd8:	8a22983a 	sll	r17,r17,r8
    dddc:	30c6d83a 	srl	r3,r6,r3
    dde0:	3210983a 	sll	r8,r6,r8
    dde4:	1c62b03a 	or	r17,r3,r17
    dde8:	1080fcc4 	addi	r2,r2,1011
    ddec:	0085c83a 	sub	r2,zero,r2
    ddf0:	000f883a 	mov	r7,zero
    ddf4:	003f8606 	br	dc10 <__alt_data_end+0xfffcdc10>
    ddf8:	0023883a 	mov	r17,zero
    ddfc:	0011883a 	mov	r8,zero
    de00:	01c00044 	movi	r7,1
    de04:	003f8206 	br	dc10 <__alt_data_end+0xfffcdc10>
    de08:	01c000c4 	movi	r7,3
    de0c:	003f8006 	br	dc10 <__alt_data_end+0xfffcdc10>
    de10:	04c00104 	movi	r19,4
    de14:	0021883a 	mov	r16,zero
    de18:	0025883a 	mov	r18,zero
    de1c:	02400044 	movi	r9,1
    de20:	003f6906 	br	dbc8 <__alt_data_end+0xfffcdbc8>
    de24:	04c00304 	movi	r19,12
    de28:	024000c4 	movi	r9,3
    de2c:	003f6606 	br	dbc8 <__alt_data_end+0xfffcdbc8>
    de30:	01400434 	movhi	r5,16
    de34:	0007883a 	mov	r3,zero
    de38:	297fffc4 	addi	r5,r5,-1
    de3c:	04bfffc4 	movi	r18,-1
    de40:	0081ffc4 	movi	r2,2047
    de44:	003fa106 	br	dccc <__alt_data_end+0xfffcdccc>
    de48:	00c00044 	movi	r3,1
    de4c:	1887c83a 	sub	r3,r3,r2
    de50:	01000e04 	movi	r4,56
    de54:	20c1210e 	bge	r4,r3,e2dc <__divdf3+0x78c>
    de58:	98c0004c 	andi	r3,r19,1
    de5c:	0005883a 	mov	r2,zero
    de60:	000b883a 	mov	r5,zero
    de64:	0025883a 	mov	r18,zero
    de68:	003f9806 	br	dccc <__alt_data_end+0xfffcdccc>
    de6c:	8c00fd36 	bltu	r17,r16,e264 <__divdf3+0x714>
    de70:	8440fb26 	beq	r16,r17,e260 <__divdf3+0x710>
    de74:	8007883a 	mov	r3,r16
    de78:	ad7fffc4 	addi	r21,r21,-1
    de7c:	0021883a 	mov	r16,zero
    de80:	4004d63a 	srli	r2,r8,24
    de84:	8822923a 	slli	r17,r17,8
    de88:	1809883a 	mov	r4,r3
    de8c:	402c923a 	slli	r22,r8,8
    de90:	88b8b03a 	or	fp,r17,r2
    de94:	e028d43a 	srli	r20,fp,16
    de98:	d8c00015 	stw	r3,0(sp)
    de9c:	e5ffffcc 	andi	r23,fp,65535
    dea0:	a00b883a 	mov	r5,r20
    dea4:	000d1e80 	call	d1e8 <__udivsi3>
    dea8:	d8c00017 	ldw	r3,0(sp)
    deac:	a00b883a 	mov	r5,r20
    deb0:	d8800315 	stw	r2,12(sp)
    deb4:	1809883a 	mov	r4,r3
    deb8:	000d24c0 	call	d24c <__umodsi3>
    debc:	d9800317 	ldw	r6,12(sp)
    dec0:	1006943a 	slli	r3,r2,16
    dec4:	9004d43a 	srli	r2,r18,16
    dec8:	b9a3383a 	mul	r17,r23,r6
    decc:	10c4b03a 	or	r2,r2,r3
    ded0:	1440062e 	bgeu	r2,r17,deec <__divdf3+0x39c>
    ded4:	1705883a 	add	r2,r2,fp
    ded8:	30ffffc4 	addi	r3,r6,-1
    dedc:	1700ee36 	bltu	r2,fp,e298 <__divdf3+0x748>
    dee0:	1440ed2e 	bgeu	r2,r17,e298 <__divdf3+0x748>
    dee4:	31bfff84 	addi	r6,r6,-2
    dee8:	1705883a 	add	r2,r2,fp
    deec:	1463c83a 	sub	r17,r2,r17
    def0:	a00b883a 	mov	r5,r20
    def4:	8809883a 	mov	r4,r17
    def8:	d9800315 	stw	r6,12(sp)
    defc:	000d1e80 	call	d1e8 <__udivsi3>
    df00:	a00b883a 	mov	r5,r20
    df04:	8809883a 	mov	r4,r17
    df08:	d8800215 	stw	r2,8(sp)
    df0c:	000d24c0 	call	d24c <__umodsi3>
    df10:	d9c00217 	ldw	r7,8(sp)
    df14:	1004943a 	slli	r2,r2,16
    df18:	94bfffcc 	andi	r18,r18,65535
    df1c:	b9d1383a 	mul	r8,r23,r7
    df20:	90a4b03a 	or	r18,r18,r2
    df24:	d9800317 	ldw	r6,12(sp)
    df28:	9200062e 	bgeu	r18,r8,df44 <__divdf3+0x3f4>
    df2c:	9725883a 	add	r18,r18,fp
    df30:	38bfffc4 	addi	r2,r7,-1
    df34:	9700d636 	bltu	r18,fp,e290 <__divdf3+0x740>
    df38:	9200d52e 	bgeu	r18,r8,e290 <__divdf3+0x740>
    df3c:	39ffff84 	addi	r7,r7,-2
    df40:	9725883a 	add	r18,r18,fp
    df44:	3004943a 	slli	r2,r6,16
    df48:	b012d43a 	srli	r9,r22,16
    df4c:	b1bfffcc 	andi	r6,r22,65535
    df50:	11e2b03a 	or	r17,r2,r7
    df54:	8806d43a 	srli	r3,r17,16
    df58:	893fffcc 	andi	r4,r17,65535
    df5c:	218b383a 	mul	r5,r4,r6
    df60:	30c5383a 	mul	r2,r6,r3
    df64:	2249383a 	mul	r4,r4,r9
    df68:	280ed43a 	srli	r7,r5,16
    df6c:	9225c83a 	sub	r18,r18,r8
    df70:	2089883a 	add	r4,r4,r2
    df74:	3909883a 	add	r4,r7,r4
    df78:	1a47383a 	mul	r3,r3,r9
    df7c:	2080022e 	bgeu	r4,r2,df88 <__divdf3+0x438>
    df80:	00800074 	movhi	r2,1
    df84:	1887883a 	add	r3,r3,r2
    df88:	2004d43a 	srli	r2,r4,16
    df8c:	2008943a 	slli	r4,r4,16
    df90:	297fffcc 	andi	r5,r5,65535
    df94:	10c7883a 	add	r3,r2,r3
    df98:	2149883a 	add	r4,r4,r5
    df9c:	90c0a536 	bltu	r18,r3,e234 <__divdf3+0x6e4>
    dfa0:	90c0bf26 	beq	r18,r3,e2a0 <__divdf3+0x750>
    dfa4:	90c7c83a 	sub	r3,r18,r3
    dfa8:	810fc83a 	sub	r7,r16,r4
    dfac:	81e5803a 	cmpltu	r18,r16,r7
    dfb0:	1ca5c83a 	sub	r18,r3,r18
    dfb4:	e480c126 	beq	fp,r18,e2bc <__divdf3+0x76c>
    dfb8:	a00b883a 	mov	r5,r20
    dfbc:	9009883a 	mov	r4,r18
    dfc0:	d9800315 	stw	r6,12(sp)
    dfc4:	d9c00215 	stw	r7,8(sp)
    dfc8:	da400115 	stw	r9,4(sp)
    dfcc:	000d1e80 	call	d1e8 <__udivsi3>
    dfd0:	a00b883a 	mov	r5,r20
    dfd4:	9009883a 	mov	r4,r18
    dfd8:	d8800015 	stw	r2,0(sp)
    dfdc:	000d24c0 	call	d24c <__umodsi3>
    dfe0:	d9c00217 	ldw	r7,8(sp)
    dfe4:	da000017 	ldw	r8,0(sp)
    dfe8:	1006943a 	slli	r3,r2,16
    dfec:	3804d43a 	srli	r2,r7,16
    dff0:	ba21383a 	mul	r16,r23,r8
    dff4:	d9800317 	ldw	r6,12(sp)
    dff8:	10c4b03a 	or	r2,r2,r3
    dffc:	da400117 	ldw	r9,4(sp)
    e000:	1400062e 	bgeu	r2,r16,e01c <__divdf3+0x4cc>
    e004:	1705883a 	add	r2,r2,fp
    e008:	40ffffc4 	addi	r3,r8,-1
    e00c:	1700ad36 	bltu	r2,fp,e2c4 <__divdf3+0x774>
    e010:	1400ac2e 	bgeu	r2,r16,e2c4 <__divdf3+0x774>
    e014:	423fff84 	addi	r8,r8,-2
    e018:	1705883a 	add	r2,r2,fp
    e01c:	1421c83a 	sub	r16,r2,r16
    e020:	a00b883a 	mov	r5,r20
    e024:	8009883a 	mov	r4,r16
    e028:	d9800315 	stw	r6,12(sp)
    e02c:	d9c00215 	stw	r7,8(sp)
    e030:	da000015 	stw	r8,0(sp)
    e034:	da400115 	stw	r9,4(sp)
    e038:	000d1e80 	call	d1e8 <__udivsi3>
    e03c:	8009883a 	mov	r4,r16
    e040:	a00b883a 	mov	r5,r20
    e044:	1025883a 	mov	r18,r2
    e048:	000d24c0 	call	d24c <__umodsi3>
    e04c:	d9c00217 	ldw	r7,8(sp)
    e050:	1004943a 	slli	r2,r2,16
    e054:	bcaf383a 	mul	r23,r23,r18
    e058:	393fffcc 	andi	r4,r7,65535
    e05c:	2088b03a 	or	r4,r4,r2
    e060:	d9800317 	ldw	r6,12(sp)
    e064:	da000017 	ldw	r8,0(sp)
    e068:	da400117 	ldw	r9,4(sp)
    e06c:	25c0062e 	bgeu	r4,r23,e088 <__divdf3+0x538>
    e070:	2709883a 	add	r4,r4,fp
    e074:	90bfffc4 	addi	r2,r18,-1
    e078:	27009436 	bltu	r4,fp,e2cc <__divdf3+0x77c>
    e07c:	25c0932e 	bgeu	r4,r23,e2cc <__divdf3+0x77c>
    e080:	94bfff84 	addi	r18,r18,-2
    e084:	2709883a 	add	r4,r4,fp
    e088:	4004943a 	slli	r2,r8,16
    e08c:	25efc83a 	sub	r23,r4,r23
    e090:	1490b03a 	or	r8,r2,r18
    e094:	4008d43a 	srli	r4,r8,16
    e098:	40ffffcc 	andi	r3,r8,65535
    e09c:	30c5383a 	mul	r2,r6,r3
    e0a0:	1a47383a 	mul	r3,r3,r9
    e0a4:	310d383a 	mul	r6,r6,r4
    e0a8:	100ad43a 	srli	r5,r2,16
    e0ac:	4913383a 	mul	r9,r9,r4
    e0b0:	1987883a 	add	r3,r3,r6
    e0b4:	28c7883a 	add	r3,r5,r3
    e0b8:	1980022e 	bgeu	r3,r6,e0c4 <__divdf3+0x574>
    e0bc:	01000074 	movhi	r4,1
    e0c0:	4913883a 	add	r9,r9,r4
    e0c4:	1808d43a 	srli	r4,r3,16
    e0c8:	1806943a 	slli	r3,r3,16
    e0cc:	10bfffcc 	andi	r2,r2,65535
    e0d0:	2253883a 	add	r9,r4,r9
    e0d4:	1887883a 	add	r3,r3,r2
    e0d8:	ba403836 	bltu	r23,r9,e1bc <__divdf3+0x66c>
    e0dc:	ba403626 	beq	r23,r9,e1b8 <__divdf3+0x668>
    e0e0:	42000054 	ori	r8,r8,1
    e0e4:	a880ffc4 	addi	r2,r21,1023
    e0e8:	00bf570e 	bge	zero,r2,de48 <__alt_data_end+0xfffcde48>
    e0ec:	40c001cc 	andi	r3,r8,7
    e0f0:	18000726 	beq	r3,zero,e110 <__divdf3+0x5c0>
    e0f4:	40c003cc 	andi	r3,r8,15
    e0f8:	01000104 	movi	r4,4
    e0fc:	19000426 	beq	r3,r4,e110 <__divdf3+0x5c0>
    e100:	4107883a 	add	r3,r8,r4
    e104:	1a11803a 	cmpltu	r8,r3,r8
    e108:	8a23883a 	add	r17,r17,r8
    e10c:	1811883a 	mov	r8,r3
    e110:	88c0402c 	andhi	r3,r17,256
    e114:	18000426 	beq	r3,zero,e128 <__divdf3+0x5d8>
    e118:	00ffc034 	movhi	r3,65280
    e11c:	18ffffc4 	addi	r3,r3,-1
    e120:	a8810004 	addi	r2,r21,1024
    e124:	88e2703a 	and	r17,r17,r3
    e128:	00c1ff84 	movi	r3,2046
    e12c:	18bee316 	blt	r3,r2,dcbc <__alt_data_end+0xfffcdcbc>
    e130:	8824977a 	slli	r18,r17,29
    e134:	4010d0fa 	srli	r8,r8,3
    e138:	8822927a 	slli	r17,r17,9
    e13c:	1081ffcc 	andi	r2,r2,2047
    e140:	9224b03a 	or	r18,r18,r8
    e144:	880ad33a 	srli	r5,r17,12
    e148:	98c0004c 	andi	r3,r19,1
    e14c:	003edf06 	br	dccc <__alt_data_end+0xfffcdccc>
    e150:	8080022c 	andhi	r2,r16,8
    e154:	10001226 	beq	r2,zero,e1a0 <__divdf3+0x650>
    e158:	8880022c 	andhi	r2,r17,8
    e15c:	1000101e 	bne	r2,zero,e1a0 <__divdf3+0x650>
    e160:	00800434 	movhi	r2,16
    e164:	89400234 	orhi	r5,r17,8
    e168:	10bfffc4 	addi	r2,r2,-1
    e16c:	b007883a 	mov	r3,r22
    e170:	288a703a 	and	r5,r5,r2
    e174:	4025883a 	mov	r18,r8
    e178:	003f3106 	br	de40 <__alt_data_end+0xfffcde40>
    e17c:	008000c4 	movi	r2,3
    e180:	3880a626 	beq	r7,r2,e41c <__divdf3+0x8cc>
    e184:	00800044 	movi	r2,1
    e188:	3880521e 	bne	r7,r2,e2d4 <__divdf3+0x784>
    e18c:	b807883a 	mov	r3,r23
    e190:	0005883a 	mov	r2,zero
    e194:	000b883a 	mov	r5,zero
    e198:	0025883a 	mov	r18,zero
    e19c:	003ecb06 	br	dccc <__alt_data_end+0xfffcdccc>
    e1a0:	00800434 	movhi	r2,16
    e1a4:	81400234 	orhi	r5,r16,8
    e1a8:	10bfffc4 	addi	r2,r2,-1
    e1ac:	a007883a 	mov	r3,r20
    e1b0:	288a703a 	and	r5,r5,r2
    e1b4:	003f2206 	br	de40 <__alt_data_end+0xfffcde40>
    e1b8:	183fca26 	beq	r3,zero,e0e4 <__alt_data_end+0xfffce0e4>
    e1bc:	e5ef883a 	add	r23,fp,r23
    e1c0:	40bfffc4 	addi	r2,r8,-1
    e1c4:	bf00392e 	bgeu	r23,fp,e2ac <__divdf3+0x75c>
    e1c8:	1011883a 	mov	r8,r2
    e1cc:	ba7fc41e 	bne	r23,r9,e0e0 <__alt_data_end+0xfffce0e0>
    e1d0:	b0ffc31e 	bne	r22,r3,e0e0 <__alt_data_end+0xfffce0e0>
    e1d4:	003fc306 	br	e0e4 <__alt_data_end+0xfffce0e4>
    e1d8:	143ff604 	addi	r16,r2,-40
    e1dc:	9c20983a 	sll	r16,r19,r16
    e1e0:	0025883a 	mov	r18,zero
    e1e4:	003ee206 	br	dd70 <__alt_data_end+0xfffcdd70>
    e1e8:	d9800315 	stw	r6,12(sp)
    e1ec:	d9c00215 	stw	r7,8(sp)
    e1f0:	000f8a80 	call	f8a8 <__clzsi2>
    e1f4:	10800804 	addi	r2,r2,32
    e1f8:	d9c00217 	ldw	r7,8(sp)
    e1fc:	d9800317 	ldw	r6,12(sp)
    e200:	003ed106 	br	dd48 <__alt_data_end+0xfffcdd48>
    e204:	147ff604 	addi	r17,r2,-40
    e208:	3462983a 	sll	r17,r6,r17
    e20c:	0011883a 	mov	r8,zero
    e210:	003ef506 	br	dde8 <__alt_data_end+0xfffcdde8>
    e214:	3009883a 	mov	r4,r6
    e218:	d9800315 	stw	r6,12(sp)
    e21c:	da400115 	stw	r9,4(sp)
    e220:	000f8a80 	call	f8a8 <__clzsi2>
    e224:	10800804 	addi	r2,r2,32
    e228:	da400117 	ldw	r9,4(sp)
    e22c:	d9800317 	ldw	r6,12(sp)
    e230:	003ee306 	br	ddc0 <__alt_data_end+0xfffcddc0>
    e234:	85a1883a 	add	r16,r16,r22
    e238:	8585803a 	cmpltu	r2,r16,r22
    e23c:	1705883a 	add	r2,r2,fp
    e240:	14a5883a 	add	r18,r2,r18
    e244:	88bfffc4 	addi	r2,r17,-1
    e248:	e4800c2e 	bgeu	fp,r18,e27c <__divdf3+0x72c>
    e24c:	90c03e36 	bltu	r18,r3,e348 <__divdf3+0x7f8>
    e250:	1c806926 	beq	r3,r18,e3f8 <__divdf3+0x8a8>
    e254:	90c7c83a 	sub	r3,r18,r3
    e258:	1023883a 	mov	r17,r2
    e25c:	003f5206 	br	dfa8 <__alt_data_end+0xfffcdfa8>
    e260:	923f0436 	bltu	r18,r8,de74 <__alt_data_end+0xfffcde74>
    e264:	800897fa 	slli	r4,r16,31
    e268:	9004d07a 	srli	r2,r18,1
    e26c:	8006d07a 	srli	r3,r16,1
    e270:	902097fa 	slli	r16,r18,31
    e274:	20a4b03a 	or	r18,r4,r2
    e278:	003f0106 	br	de80 <__alt_data_end+0xfffcde80>
    e27c:	e4bff51e 	bne	fp,r18,e254 <__alt_data_end+0xfffce254>
    e280:	85bff22e 	bgeu	r16,r22,e24c <__alt_data_end+0xfffce24c>
    e284:	e0c7c83a 	sub	r3,fp,r3
    e288:	1023883a 	mov	r17,r2
    e28c:	003f4606 	br	dfa8 <__alt_data_end+0xfffcdfa8>
    e290:	100f883a 	mov	r7,r2
    e294:	003f2b06 	br	df44 <__alt_data_end+0xfffcdf44>
    e298:	180d883a 	mov	r6,r3
    e29c:	003f1306 	br	deec <__alt_data_end+0xfffcdeec>
    e2a0:	813fe436 	bltu	r16,r4,e234 <__alt_data_end+0xfffce234>
    e2a4:	0007883a 	mov	r3,zero
    e2a8:	003f3f06 	br	dfa8 <__alt_data_end+0xfffcdfa8>
    e2ac:	ba402c36 	bltu	r23,r9,e360 <__divdf3+0x810>
    e2b0:	4dc05426 	beq	r9,r23,e404 <__divdf3+0x8b4>
    e2b4:	1011883a 	mov	r8,r2
    e2b8:	003f8906 	br	e0e0 <__alt_data_end+0xfffce0e0>
    e2bc:	023fffc4 	movi	r8,-1
    e2c0:	003f8806 	br	e0e4 <__alt_data_end+0xfffce0e4>
    e2c4:	1811883a 	mov	r8,r3
    e2c8:	003f5406 	br	e01c <__alt_data_end+0xfffce01c>
    e2cc:	1025883a 	mov	r18,r2
    e2d0:	003f6d06 	br	e088 <__alt_data_end+0xfffce088>
    e2d4:	b827883a 	mov	r19,r23
    e2d8:	003f8206 	br	e0e4 <__alt_data_end+0xfffce0e4>
    e2dc:	010007c4 	movi	r4,31
    e2e0:	20c02616 	blt	r4,r3,e37c <__divdf3+0x82c>
    e2e4:	00800804 	movi	r2,32
    e2e8:	10c5c83a 	sub	r2,r2,r3
    e2ec:	888a983a 	sll	r5,r17,r2
    e2f0:	40c8d83a 	srl	r4,r8,r3
    e2f4:	4084983a 	sll	r2,r8,r2
    e2f8:	88e2d83a 	srl	r17,r17,r3
    e2fc:	2906b03a 	or	r3,r5,r4
    e300:	1004c03a 	cmpne	r2,r2,zero
    e304:	1886b03a 	or	r3,r3,r2
    e308:	188001cc 	andi	r2,r3,7
    e30c:	10000726 	beq	r2,zero,e32c <__divdf3+0x7dc>
    e310:	188003cc 	andi	r2,r3,15
    e314:	01000104 	movi	r4,4
    e318:	11000426 	beq	r2,r4,e32c <__divdf3+0x7dc>
    e31c:	1805883a 	mov	r2,r3
    e320:	10c00104 	addi	r3,r2,4
    e324:	1885803a 	cmpltu	r2,r3,r2
    e328:	88a3883a 	add	r17,r17,r2
    e32c:	8880202c 	andhi	r2,r17,128
    e330:	10002726 	beq	r2,zero,e3d0 <__divdf3+0x880>
    e334:	98c0004c 	andi	r3,r19,1
    e338:	00800044 	movi	r2,1
    e33c:	000b883a 	mov	r5,zero
    e340:	0025883a 	mov	r18,zero
    e344:	003e6106 	br	dccc <__alt_data_end+0xfffcdccc>
    e348:	85a1883a 	add	r16,r16,r22
    e34c:	8585803a 	cmpltu	r2,r16,r22
    e350:	1705883a 	add	r2,r2,fp
    e354:	14a5883a 	add	r18,r2,r18
    e358:	8c7fff84 	addi	r17,r17,-2
    e35c:	003f1106 	br	dfa4 <__alt_data_end+0xfffcdfa4>
    e360:	b589883a 	add	r4,r22,r22
    e364:	25ad803a 	cmpltu	r22,r4,r22
    e368:	b739883a 	add	fp,r22,fp
    e36c:	40bfff84 	addi	r2,r8,-2
    e370:	bf2f883a 	add	r23,r23,fp
    e374:	202d883a 	mov	r22,r4
    e378:	003f9306 	br	e1c8 <__alt_data_end+0xfffce1c8>
    e37c:	013ff844 	movi	r4,-31
    e380:	2085c83a 	sub	r2,r4,r2
    e384:	8888d83a 	srl	r4,r17,r2
    e388:	00800804 	movi	r2,32
    e38c:	18802126 	beq	r3,r2,e414 <__divdf3+0x8c4>
    e390:	00801004 	movi	r2,64
    e394:	10c5c83a 	sub	r2,r2,r3
    e398:	8884983a 	sll	r2,r17,r2
    e39c:	1204b03a 	or	r2,r2,r8
    e3a0:	1004c03a 	cmpne	r2,r2,zero
    e3a4:	2084b03a 	or	r2,r4,r2
    e3a8:	144001cc 	andi	r17,r2,7
    e3ac:	88000d1e 	bne	r17,zero,e3e4 <__divdf3+0x894>
    e3b0:	000b883a 	mov	r5,zero
    e3b4:	1024d0fa 	srli	r18,r2,3
    e3b8:	98c0004c 	andi	r3,r19,1
    e3bc:	0005883a 	mov	r2,zero
    e3c0:	9464b03a 	or	r18,r18,r17
    e3c4:	003e4106 	br	dccc <__alt_data_end+0xfffcdccc>
    e3c8:	1007883a 	mov	r3,r2
    e3cc:	0023883a 	mov	r17,zero
    e3d0:	880a927a 	slli	r5,r17,9
    e3d4:	1805883a 	mov	r2,r3
    e3d8:	8822977a 	slli	r17,r17,29
    e3dc:	280ad33a 	srli	r5,r5,12
    e3e0:	003ff406 	br	e3b4 <__alt_data_end+0xfffce3b4>
    e3e4:	10c003cc 	andi	r3,r2,15
    e3e8:	01000104 	movi	r4,4
    e3ec:	193ff626 	beq	r3,r4,e3c8 <__alt_data_end+0xfffce3c8>
    e3f0:	0023883a 	mov	r17,zero
    e3f4:	003fca06 	br	e320 <__alt_data_end+0xfffce320>
    e3f8:	813fd336 	bltu	r16,r4,e348 <__alt_data_end+0xfffce348>
    e3fc:	1023883a 	mov	r17,r2
    e400:	003fa806 	br	e2a4 <__alt_data_end+0xfffce2a4>
    e404:	b0ffd636 	bltu	r22,r3,e360 <__alt_data_end+0xfffce360>
    e408:	1011883a 	mov	r8,r2
    e40c:	b0ff341e 	bne	r22,r3,e0e0 <__alt_data_end+0xfffce0e0>
    e410:	003f3406 	br	e0e4 <__alt_data_end+0xfffce0e4>
    e414:	0005883a 	mov	r2,zero
    e418:	003fe006 	br	e39c <__alt_data_end+0xfffce39c>
    e41c:	00800434 	movhi	r2,16
    e420:	89400234 	orhi	r5,r17,8
    e424:	10bfffc4 	addi	r2,r2,-1
    e428:	b807883a 	mov	r3,r23
    e42c:	288a703a 	and	r5,r5,r2
    e430:	4025883a 	mov	r18,r8
    e434:	003e8206 	br	de40 <__alt_data_end+0xfffcde40>

0000e438 <__eqdf2>:
    e438:	2804d53a 	srli	r2,r5,20
    e43c:	3806d53a 	srli	r3,r7,20
    e440:	02000434 	movhi	r8,16
    e444:	423fffc4 	addi	r8,r8,-1
    e448:	1081ffcc 	andi	r2,r2,2047
    e44c:	0281ffc4 	movi	r10,2047
    e450:	2a12703a 	and	r9,r5,r8
    e454:	18c1ffcc 	andi	r3,r3,2047
    e458:	3a10703a 	and	r8,r7,r8
    e45c:	280ad7fa 	srli	r5,r5,31
    e460:	380ed7fa 	srli	r7,r7,31
    e464:	12801026 	beq	r2,r10,e4a8 <__eqdf2+0x70>
    e468:	0281ffc4 	movi	r10,2047
    e46c:	1a800a26 	beq	r3,r10,e498 <__eqdf2+0x60>
    e470:	10c00226 	beq	r2,r3,e47c <__eqdf2+0x44>
    e474:	00800044 	movi	r2,1
    e478:	f800283a 	ret
    e47c:	4a3ffd1e 	bne	r9,r8,e474 <__alt_data_end+0xfffce474>
    e480:	21bffc1e 	bne	r4,r6,e474 <__alt_data_end+0xfffce474>
    e484:	29c00c26 	beq	r5,r7,e4b8 <__eqdf2+0x80>
    e488:	103ffa1e 	bne	r2,zero,e474 <__alt_data_end+0xfffce474>
    e48c:	2244b03a 	or	r2,r4,r9
    e490:	1004c03a 	cmpne	r2,r2,zero
    e494:	f800283a 	ret
    e498:	3214b03a 	or	r10,r6,r8
    e49c:	503ff426 	beq	r10,zero,e470 <__alt_data_end+0xfffce470>
    e4a0:	00800044 	movi	r2,1
    e4a4:	f800283a 	ret
    e4a8:	2254b03a 	or	r10,r4,r9
    e4ac:	503fee26 	beq	r10,zero,e468 <__alt_data_end+0xfffce468>
    e4b0:	00800044 	movi	r2,1
    e4b4:	f800283a 	ret
    e4b8:	0005883a 	mov	r2,zero
    e4bc:	f800283a 	ret

0000e4c0 <__gedf2>:
    e4c0:	2804d53a 	srli	r2,r5,20
    e4c4:	3806d53a 	srli	r3,r7,20
    e4c8:	02000434 	movhi	r8,16
    e4cc:	423fffc4 	addi	r8,r8,-1
    e4d0:	1081ffcc 	andi	r2,r2,2047
    e4d4:	0241ffc4 	movi	r9,2047
    e4d8:	2a14703a 	and	r10,r5,r8
    e4dc:	18c1ffcc 	andi	r3,r3,2047
    e4e0:	3a10703a 	and	r8,r7,r8
    e4e4:	280ad7fa 	srli	r5,r5,31
    e4e8:	380ed7fa 	srli	r7,r7,31
    e4ec:	12401d26 	beq	r2,r9,e564 <__gedf2+0xa4>
    e4f0:	0241ffc4 	movi	r9,2047
    e4f4:	1a401226 	beq	r3,r9,e540 <__gedf2+0x80>
    e4f8:	1000081e 	bne	r2,zero,e51c <__gedf2+0x5c>
    e4fc:	2296b03a 	or	r11,r4,r10
    e500:	5813003a 	cmpeq	r9,r11,zero
    e504:	1800091e 	bne	r3,zero,e52c <__gedf2+0x6c>
    e508:	3218b03a 	or	r12,r6,r8
    e50c:	6000071e 	bne	r12,zero,e52c <__gedf2+0x6c>
    e510:	0005883a 	mov	r2,zero
    e514:	5800101e 	bne	r11,zero,e558 <__gedf2+0x98>
    e518:	f800283a 	ret
    e51c:	18000c1e 	bne	r3,zero,e550 <__gedf2+0x90>
    e520:	3212b03a 	or	r9,r6,r8
    e524:	48000c26 	beq	r9,zero,e558 <__gedf2+0x98>
    e528:	0013883a 	mov	r9,zero
    e52c:	39c03fcc 	andi	r7,r7,255
    e530:	48000826 	beq	r9,zero,e554 <__gedf2+0x94>
    e534:	38000926 	beq	r7,zero,e55c <__gedf2+0x9c>
    e538:	00800044 	movi	r2,1
    e53c:	f800283a 	ret
    e540:	3212b03a 	or	r9,r6,r8
    e544:	483fec26 	beq	r9,zero,e4f8 <__alt_data_end+0xfffce4f8>
    e548:	00bfff84 	movi	r2,-2
    e54c:	f800283a 	ret
    e550:	39c03fcc 	andi	r7,r7,255
    e554:	29c00626 	beq	r5,r7,e570 <__gedf2+0xb0>
    e558:	283ff726 	beq	r5,zero,e538 <__alt_data_end+0xfffce538>
    e55c:	00bfffc4 	movi	r2,-1
    e560:	f800283a 	ret
    e564:	2292b03a 	or	r9,r4,r10
    e568:	483fe126 	beq	r9,zero,e4f0 <__alt_data_end+0xfffce4f0>
    e56c:	003ff606 	br	e548 <__alt_data_end+0xfffce548>
    e570:	18bff916 	blt	r3,r2,e558 <__alt_data_end+0xfffce558>
    e574:	10c00316 	blt	r2,r3,e584 <__gedf2+0xc4>
    e578:	42bff736 	bltu	r8,r10,e558 <__alt_data_end+0xfffce558>
    e57c:	52000326 	beq	r10,r8,e58c <__gedf2+0xcc>
    e580:	5200042e 	bgeu	r10,r8,e594 <__gedf2+0xd4>
    e584:	283fec1e 	bne	r5,zero,e538 <__alt_data_end+0xfffce538>
    e588:	003ff406 	br	e55c <__alt_data_end+0xfffce55c>
    e58c:	313ff236 	bltu	r6,r4,e558 <__alt_data_end+0xfffce558>
    e590:	21bffc36 	bltu	r4,r6,e584 <__alt_data_end+0xfffce584>
    e594:	0005883a 	mov	r2,zero
    e598:	f800283a 	ret

0000e59c <__ledf2>:
    e59c:	2804d53a 	srli	r2,r5,20
    e5a0:	3810d53a 	srli	r8,r7,20
    e5a4:	00c00434 	movhi	r3,16
    e5a8:	18ffffc4 	addi	r3,r3,-1
    e5ac:	1081ffcc 	andi	r2,r2,2047
    e5b0:	0241ffc4 	movi	r9,2047
    e5b4:	28d4703a 	and	r10,r5,r3
    e5b8:	4201ffcc 	andi	r8,r8,2047
    e5bc:	38c6703a 	and	r3,r7,r3
    e5c0:	280ad7fa 	srli	r5,r5,31
    e5c4:	380ed7fa 	srli	r7,r7,31
    e5c8:	12401f26 	beq	r2,r9,e648 <__ledf2+0xac>
    e5cc:	0241ffc4 	movi	r9,2047
    e5d0:	42401426 	beq	r8,r9,e624 <__ledf2+0x88>
    e5d4:	1000091e 	bne	r2,zero,e5fc <__ledf2+0x60>
    e5d8:	2296b03a 	or	r11,r4,r10
    e5dc:	5813003a 	cmpeq	r9,r11,zero
    e5e0:	29403fcc 	andi	r5,r5,255
    e5e4:	40000a1e 	bne	r8,zero,e610 <__ledf2+0x74>
    e5e8:	30d8b03a 	or	r12,r6,r3
    e5ec:	6000081e 	bne	r12,zero,e610 <__ledf2+0x74>
    e5f0:	0005883a 	mov	r2,zero
    e5f4:	5800111e 	bne	r11,zero,e63c <__ledf2+0xa0>
    e5f8:	f800283a 	ret
    e5fc:	29403fcc 	andi	r5,r5,255
    e600:	40000c1e 	bne	r8,zero,e634 <__ledf2+0x98>
    e604:	30d2b03a 	or	r9,r6,r3
    e608:	48000c26 	beq	r9,zero,e63c <__ledf2+0xa0>
    e60c:	0013883a 	mov	r9,zero
    e610:	39c03fcc 	andi	r7,r7,255
    e614:	48000826 	beq	r9,zero,e638 <__ledf2+0x9c>
    e618:	38001126 	beq	r7,zero,e660 <__ledf2+0xc4>
    e61c:	00800044 	movi	r2,1
    e620:	f800283a 	ret
    e624:	30d2b03a 	or	r9,r6,r3
    e628:	483fea26 	beq	r9,zero,e5d4 <__alt_data_end+0xfffce5d4>
    e62c:	00800084 	movi	r2,2
    e630:	f800283a 	ret
    e634:	39c03fcc 	andi	r7,r7,255
    e638:	39400726 	beq	r7,r5,e658 <__ledf2+0xbc>
    e63c:	2800081e 	bne	r5,zero,e660 <__ledf2+0xc4>
    e640:	00800044 	movi	r2,1
    e644:	f800283a 	ret
    e648:	2292b03a 	or	r9,r4,r10
    e64c:	483fdf26 	beq	r9,zero,e5cc <__alt_data_end+0xfffce5cc>
    e650:	00800084 	movi	r2,2
    e654:	f800283a 	ret
    e658:	4080030e 	bge	r8,r2,e668 <__ledf2+0xcc>
    e65c:	383fef26 	beq	r7,zero,e61c <__alt_data_end+0xfffce61c>
    e660:	00bfffc4 	movi	r2,-1
    e664:	f800283a 	ret
    e668:	123feb16 	blt	r2,r8,e618 <__alt_data_end+0xfffce618>
    e66c:	1abff336 	bltu	r3,r10,e63c <__alt_data_end+0xfffce63c>
    e670:	50c00326 	beq	r10,r3,e680 <__ledf2+0xe4>
    e674:	50c0042e 	bgeu	r10,r3,e688 <__ledf2+0xec>
    e678:	283fe81e 	bne	r5,zero,e61c <__alt_data_end+0xfffce61c>
    e67c:	003ff806 	br	e660 <__alt_data_end+0xfffce660>
    e680:	313fee36 	bltu	r6,r4,e63c <__alt_data_end+0xfffce63c>
    e684:	21bffc36 	bltu	r4,r6,e678 <__alt_data_end+0xfffce678>
    e688:	0005883a 	mov	r2,zero
    e68c:	f800283a 	ret

0000e690 <__muldf3>:
    e690:	defff304 	addi	sp,sp,-52
    e694:	2804d53a 	srli	r2,r5,20
    e698:	dd800915 	stw	r22,36(sp)
    e69c:	282cd7fa 	srli	r22,r5,31
    e6a0:	dc000315 	stw	r16,12(sp)
    e6a4:	04000434 	movhi	r16,16
    e6a8:	dd400815 	stw	r21,32(sp)
    e6ac:	dc800515 	stw	r18,20(sp)
    e6b0:	843fffc4 	addi	r16,r16,-1
    e6b4:	dfc00c15 	stw	ra,48(sp)
    e6b8:	df000b15 	stw	fp,44(sp)
    e6bc:	ddc00a15 	stw	r23,40(sp)
    e6c0:	dd000715 	stw	r20,28(sp)
    e6c4:	dcc00615 	stw	r19,24(sp)
    e6c8:	dc400415 	stw	r17,16(sp)
    e6cc:	1481ffcc 	andi	r18,r2,2047
    e6d0:	2c20703a 	and	r16,r5,r16
    e6d4:	b02b883a 	mov	r21,r22
    e6d8:	b2403fcc 	andi	r9,r22,255
    e6dc:	90006026 	beq	r18,zero,e860 <__muldf3+0x1d0>
    e6e0:	0081ffc4 	movi	r2,2047
    e6e4:	2029883a 	mov	r20,r4
    e6e8:	90803626 	beq	r18,r2,e7c4 <__muldf3+0x134>
    e6ec:	80800434 	orhi	r2,r16,16
    e6f0:	100490fa 	slli	r2,r2,3
    e6f4:	2020d77a 	srli	r16,r4,29
    e6f8:	202890fa 	slli	r20,r4,3
    e6fc:	94bf0044 	addi	r18,r18,-1023
    e700:	80a0b03a 	or	r16,r16,r2
    e704:	0027883a 	mov	r19,zero
    e708:	0039883a 	mov	fp,zero
    e70c:	3804d53a 	srli	r2,r7,20
    e710:	382ed7fa 	srli	r23,r7,31
    e714:	04400434 	movhi	r17,16
    e718:	8c7fffc4 	addi	r17,r17,-1
    e71c:	1081ffcc 	andi	r2,r2,2047
    e720:	3011883a 	mov	r8,r6
    e724:	3c62703a 	and	r17,r7,r17
    e728:	ba803fcc 	andi	r10,r23,255
    e72c:	10006d26 	beq	r2,zero,e8e4 <__muldf3+0x254>
    e730:	00c1ffc4 	movi	r3,2047
    e734:	10c06526 	beq	r2,r3,e8cc <__muldf3+0x23c>
    e738:	88c00434 	orhi	r3,r17,16
    e73c:	180690fa 	slli	r3,r3,3
    e740:	3022d77a 	srli	r17,r6,29
    e744:	301090fa 	slli	r8,r6,3
    e748:	10bf0044 	addi	r2,r2,-1023
    e74c:	88e2b03a 	or	r17,r17,r3
    e750:	000b883a 	mov	r5,zero
    e754:	9085883a 	add	r2,r18,r2
    e758:	2cc8b03a 	or	r4,r5,r19
    e75c:	00c003c4 	movi	r3,15
    e760:	bdacf03a 	xor	r22,r23,r22
    e764:	12c00044 	addi	r11,r2,1
    e768:	19009936 	bltu	r3,r4,e9d0 <__muldf3+0x340>
    e76c:	200890ba 	slli	r4,r4,2
    e770:	00c00074 	movhi	r3,1
    e774:	18f9e104 	addi	r3,r3,-6268
    e778:	20c9883a 	add	r4,r4,r3
    e77c:	20c00017 	ldw	r3,0(r4)
    e780:	1800683a 	jmp	r3
    e784:	0000e9d0 	cmplti	zero,zero,935
    e788:	0000e7e4 	muli	zero,zero,927
    e78c:	0000e7e4 	muli	zero,zero,927
    e790:	0000e7e0 	cmpeqi	zero,zero,927
    e794:	0000e9ac 	andhi	zero,zero,934
    e798:	0000e9ac 	andhi	zero,zero,934
    e79c:	0000e994 	movui	zero,934
    e7a0:	0000e7e0 	cmpeqi	zero,zero,927
    e7a4:	0000e9ac 	andhi	zero,zero,934
    e7a8:	0000e994 	movui	zero,934
    e7ac:	0000e9ac 	andhi	zero,zero,934
    e7b0:	0000e7e0 	cmpeqi	zero,zero,927
    e7b4:	0000e9bc 	xorhi	zero,zero,934
    e7b8:	0000e9bc 	xorhi	zero,zero,934
    e7bc:	0000e9bc 	xorhi	zero,zero,934
    e7c0:	0000ebd8 	cmpnei	zero,zero,943
    e7c4:	2404b03a 	or	r2,r4,r16
    e7c8:	10006f1e 	bne	r2,zero,e988 <__muldf3+0x2f8>
    e7cc:	04c00204 	movi	r19,8
    e7d0:	0021883a 	mov	r16,zero
    e7d4:	0029883a 	mov	r20,zero
    e7d8:	07000084 	movi	fp,2
    e7dc:	003fcb06 	br	e70c <__alt_data_end+0xfffce70c>
    e7e0:	502d883a 	mov	r22,r10
    e7e4:	00800084 	movi	r2,2
    e7e8:	28805726 	beq	r5,r2,e948 <__muldf3+0x2b8>
    e7ec:	008000c4 	movi	r2,3
    e7f0:	28816626 	beq	r5,r2,ed8c <__muldf3+0x6fc>
    e7f4:	00800044 	movi	r2,1
    e7f8:	2881411e 	bne	r5,r2,ed00 <__muldf3+0x670>
    e7fc:	b02b883a 	mov	r21,r22
    e800:	0005883a 	mov	r2,zero
    e804:	000b883a 	mov	r5,zero
    e808:	0029883a 	mov	r20,zero
    e80c:	1004953a 	slli	r2,r2,20
    e810:	a8c03fcc 	andi	r3,r21,255
    e814:	04400434 	movhi	r17,16
    e818:	8c7fffc4 	addi	r17,r17,-1
    e81c:	180697fa 	slli	r3,r3,31
    e820:	2c4a703a 	and	r5,r5,r17
    e824:	288ab03a 	or	r5,r5,r2
    e828:	28c6b03a 	or	r3,r5,r3
    e82c:	a005883a 	mov	r2,r20
    e830:	dfc00c17 	ldw	ra,48(sp)
    e834:	df000b17 	ldw	fp,44(sp)
    e838:	ddc00a17 	ldw	r23,40(sp)
    e83c:	dd800917 	ldw	r22,36(sp)
    e840:	dd400817 	ldw	r21,32(sp)
    e844:	dd000717 	ldw	r20,28(sp)
    e848:	dcc00617 	ldw	r19,24(sp)
    e84c:	dc800517 	ldw	r18,20(sp)
    e850:	dc400417 	ldw	r17,16(sp)
    e854:	dc000317 	ldw	r16,12(sp)
    e858:	dec00d04 	addi	sp,sp,52
    e85c:	f800283a 	ret
    e860:	2404b03a 	or	r2,r4,r16
    e864:	2027883a 	mov	r19,r4
    e868:	10004226 	beq	r2,zero,e974 <__muldf3+0x2e4>
    e86c:	8000fc26 	beq	r16,zero,ec60 <__muldf3+0x5d0>
    e870:	8009883a 	mov	r4,r16
    e874:	d9800215 	stw	r6,8(sp)
    e878:	d9c00015 	stw	r7,0(sp)
    e87c:	da400115 	stw	r9,4(sp)
    e880:	000f8a80 	call	f8a8 <__clzsi2>
    e884:	d9800217 	ldw	r6,8(sp)
    e888:	d9c00017 	ldw	r7,0(sp)
    e88c:	da400117 	ldw	r9,4(sp)
    e890:	113ffd44 	addi	r4,r2,-11
    e894:	00c00704 	movi	r3,28
    e898:	1900ed16 	blt	r3,r4,ec50 <__muldf3+0x5c0>
    e89c:	00c00744 	movi	r3,29
    e8a0:	147ffe04 	addi	r17,r2,-8
    e8a4:	1907c83a 	sub	r3,r3,r4
    e8a8:	8460983a 	sll	r16,r16,r17
    e8ac:	98c6d83a 	srl	r3,r19,r3
    e8b0:	9c68983a 	sll	r20,r19,r17
    e8b4:	1c20b03a 	or	r16,r3,r16
    e8b8:	1080fcc4 	addi	r2,r2,1011
    e8bc:	00a5c83a 	sub	r18,zero,r2
    e8c0:	0027883a 	mov	r19,zero
    e8c4:	0039883a 	mov	fp,zero
    e8c8:	003f9006 	br	e70c <__alt_data_end+0xfffce70c>
    e8cc:	3446b03a 	or	r3,r6,r17
    e8d0:	1800261e 	bne	r3,zero,e96c <__muldf3+0x2dc>
    e8d4:	0023883a 	mov	r17,zero
    e8d8:	0011883a 	mov	r8,zero
    e8dc:	01400084 	movi	r5,2
    e8e0:	003f9c06 	br	e754 <__alt_data_end+0xfffce754>
    e8e4:	3446b03a 	or	r3,r6,r17
    e8e8:	18001c26 	beq	r3,zero,e95c <__muldf3+0x2cc>
    e8ec:	8800ce26 	beq	r17,zero,ec28 <__muldf3+0x598>
    e8f0:	8809883a 	mov	r4,r17
    e8f4:	d9800215 	stw	r6,8(sp)
    e8f8:	da400115 	stw	r9,4(sp)
    e8fc:	da800015 	stw	r10,0(sp)
    e900:	000f8a80 	call	f8a8 <__clzsi2>
    e904:	d9800217 	ldw	r6,8(sp)
    e908:	da400117 	ldw	r9,4(sp)
    e90c:	da800017 	ldw	r10,0(sp)
    e910:	113ffd44 	addi	r4,r2,-11
    e914:	00c00704 	movi	r3,28
    e918:	1900bf16 	blt	r3,r4,ec18 <__muldf3+0x588>
    e91c:	00c00744 	movi	r3,29
    e920:	123ffe04 	addi	r8,r2,-8
    e924:	1907c83a 	sub	r3,r3,r4
    e928:	8a22983a 	sll	r17,r17,r8
    e92c:	30c6d83a 	srl	r3,r6,r3
    e930:	3210983a 	sll	r8,r6,r8
    e934:	1c62b03a 	or	r17,r3,r17
    e938:	1080fcc4 	addi	r2,r2,1011
    e93c:	0085c83a 	sub	r2,zero,r2
    e940:	000b883a 	mov	r5,zero
    e944:	003f8306 	br	e754 <__alt_data_end+0xfffce754>
    e948:	b02b883a 	mov	r21,r22
    e94c:	0081ffc4 	movi	r2,2047
    e950:	000b883a 	mov	r5,zero
    e954:	0029883a 	mov	r20,zero
    e958:	003fac06 	br	e80c <__alt_data_end+0xfffce80c>
    e95c:	0023883a 	mov	r17,zero
    e960:	0011883a 	mov	r8,zero
    e964:	01400044 	movi	r5,1
    e968:	003f7a06 	br	e754 <__alt_data_end+0xfffce754>
    e96c:	014000c4 	movi	r5,3
    e970:	003f7806 	br	e754 <__alt_data_end+0xfffce754>
    e974:	04c00104 	movi	r19,4
    e978:	0021883a 	mov	r16,zero
    e97c:	0029883a 	mov	r20,zero
    e980:	07000044 	movi	fp,1
    e984:	003f6106 	br	e70c <__alt_data_end+0xfffce70c>
    e988:	04c00304 	movi	r19,12
    e98c:	070000c4 	movi	fp,3
    e990:	003f5e06 	br	e70c <__alt_data_end+0xfffce70c>
    e994:	01400434 	movhi	r5,16
    e998:	002b883a 	mov	r21,zero
    e99c:	297fffc4 	addi	r5,r5,-1
    e9a0:	053fffc4 	movi	r20,-1
    e9a4:	0081ffc4 	movi	r2,2047
    e9a8:	003f9806 	br	e80c <__alt_data_end+0xfffce80c>
    e9ac:	8023883a 	mov	r17,r16
    e9b0:	a011883a 	mov	r8,r20
    e9b4:	e00b883a 	mov	r5,fp
    e9b8:	003f8a06 	br	e7e4 <__alt_data_end+0xfffce7e4>
    e9bc:	8023883a 	mov	r17,r16
    e9c0:	a011883a 	mov	r8,r20
    e9c4:	482d883a 	mov	r22,r9
    e9c8:	e00b883a 	mov	r5,fp
    e9cc:	003f8506 	br	e7e4 <__alt_data_end+0xfffce7e4>
    e9d0:	a00ad43a 	srli	r5,r20,16
    e9d4:	401ad43a 	srli	r13,r8,16
    e9d8:	a53fffcc 	andi	r20,r20,65535
    e9dc:	423fffcc 	andi	r8,r8,65535
    e9e0:	4519383a 	mul	r12,r8,r20
    e9e4:	4147383a 	mul	r3,r8,r5
    e9e8:	6d09383a 	mul	r4,r13,r20
    e9ec:	600cd43a 	srli	r6,r12,16
    e9f0:	2b5d383a 	mul	r14,r5,r13
    e9f4:	20c9883a 	add	r4,r4,r3
    e9f8:	310d883a 	add	r6,r6,r4
    e9fc:	30c0022e 	bgeu	r6,r3,ea08 <__muldf3+0x378>
    ea00:	00c00074 	movhi	r3,1
    ea04:	70dd883a 	add	r14,r14,r3
    ea08:	8826d43a 	srli	r19,r17,16
    ea0c:	8bffffcc 	andi	r15,r17,65535
    ea10:	7d23383a 	mul	r17,r15,r20
    ea14:	7949383a 	mul	r4,r15,r5
    ea18:	9d29383a 	mul	r20,r19,r20
    ea1c:	8814d43a 	srli	r10,r17,16
    ea20:	3012943a 	slli	r9,r6,16
    ea24:	a129883a 	add	r20,r20,r4
    ea28:	633fffcc 	andi	r12,r12,65535
    ea2c:	5515883a 	add	r10,r10,r20
    ea30:	3006d43a 	srli	r3,r6,16
    ea34:	4b13883a 	add	r9,r9,r12
    ea38:	2ccb383a 	mul	r5,r5,r19
    ea3c:	5100022e 	bgeu	r10,r4,ea48 <__muldf3+0x3b8>
    ea40:	01000074 	movhi	r4,1
    ea44:	290b883a 	add	r5,r5,r4
    ea48:	802ad43a 	srli	r21,r16,16
    ea4c:	843fffcc 	andi	r16,r16,65535
    ea50:	440d383a 	mul	r6,r8,r16
    ea54:	4565383a 	mul	r18,r8,r21
    ea58:	8349383a 	mul	r4,r16,r13
    ea5c:	500e943a 	slli	r7,r10,16
    ea60:	3010d43a 	srli	r8,r6,16
    ea64:	5028d43a 	srli	r20,r10,16
    ea68:	2489883a 	add	r4,r4,r18
    ea6c:	8abfffcc 	andi	r10,r17,65535
    ea70:	3a95883a 	add	r10,r7,r10
    ea74:	4119883a 	add	r12,r8,r4
    ea78:	a169883a 	add	r20,r20,r5
    ea7c:	1a87883a 	add	r3,r3,r10
    ea80:	6d5b383a 	mul	r13,r13,r21
    ea84:	6480022e 	bgeu	r12,r18,ea90 <__muldf3+0x400>
    ea88:	01000074 	movhi	r4,1
    ea8c:	691b883a 	add	r13,r13,r4
    ea90:	7c25383a 	mul	r18,r15,r16
    ea94:	7d4b383a 	mul	r5,r15,r21
    ea98:	84cf383a 	mul	r7,r16,r19
    ea9c:	901ed43a 	srli	r15,r18,16
    eaa0:	6008d43a 	srli	r4,r12,16
    eaa4:	6010943a 	slli	r8,r12,16
    eaa8:	394f883a 	add	r7,r7,r5
    eaac:	333fffcc 	andi	r12,r6,65535
    eab0:	79df883a 	add	r15,r15,r7
    eab4:	235b883a 	add	r13,r4,r13
    eab8:	9d63383a 	mul	r17,r19,r21
    eabc:	4309883a 	add	r4,r8,r12
    eac0:	7940022e 	bgeu	r15,r5,eacc <__muldf3+0x43c>
    eac4:	01400074 	movhi	r5,1
    eac8:	8963883a 	add	r17,r17,r5
    eacc:	780a943a 	slli	r5,r15,16
    ead0:	91bfffcc 	andi	r6,r18,65535
    ead4:	70c7883a 	add	r3,r14,r3
    ead8:	298d883a 	add	r6,r5,r6
    eadc:	1a8f803a 	cmpltu	r7,r3,r10
    eae0:	350b883a 	add	r5,r6,r20
    eae4:	20c7883a 	add	r3,r4,r3
    eae8:	3955883a 	add	r10,r7,r5
    eaec:	1909803a 	cmpltu	r4,r3,r4
    eaf0:	6a91883a 	add	r8,r13,r10
    eaf4:	780cd43a 	srli	r6,r15,16
    eaf8:	2219883a 	add	r12,r4,r8
    eafc:	2d0b803a 	cmpltu	r5,r5,r20
    eb00:	51cf803a 	cmpltu	r7,r10,r7
    eb04:	29ceb03a 	or	r7,r5,r7
    eb08:	4351803a 	cmpltu	r8,r8,r13
    eb0c:	610b803a 	cmpltu	r5,r12,r4
    eb10:	4148b03a 	or	r4,r8,r5
    eb14:	398f883a 	add	r7,r7,r6
    eb18:	3909883a 	add	r4,r7,r4
    eb1c:	1810927a 	slli	r8,r3,9
    eb20:	2449883a 	add	r4,r4,r17
    eb24:	2008927a 	slli	r4,r4,9
    eb28:	6022d5fa 	srli	r17,r12,23
    eb2c:	1806d5fa 	srli	r3,r3,23
    eb30:	4252b03a 	or	r9,r8,r9
    eb34:	600a927a 	slli	r5,r12,9
    eb38:	4810c03a 	cmpne	r8,r9,zero
    eb3c:	2462b03a 	or	r17,r4,r17
    eb40:	40c6b03a 	or	r3,r8,r3
    eb44:	8900402c 	andhi	r4,r17,256
    eb48:	1950b03a 	or	r8,r3,r5
    eb4c:	20000726 	beq	r4,zero,eb6c <__muldf3+0x4dc>
    eb50:	4006d07a 	srli	r3,r8,1
    eb54:	880497fa 	slli	r2,r17,31
    eb58:	4200004c 	andi	r8,r8,1
    eb5c:	8822d07a 	srli	r17,r17,1
    eb60:	1a10b03a 	or	r8,r3,r8
    eb64:	1210b03a 	or	r8,r2,r8
    eb68:	5805883a 	mov	r2,r11
    eb6c:	1140ffc4 	addi	r5,r2,1023
    eb70:	0140440e 	bge	zero,r5,ec84 <__muldf3+0x5f4>
    eb74:	40c001cc 	andi	r3,r8,7
    eb78:	18000726 	beq	r3,zero,eb98 <__muldf3+0x508>
    eb7c:	40c003cc 	andi	r3,r8,15
    eb80:	01000104 	movi	r4,4
    eb84:	19000426 	beq	r3,r4,eb98 <__muldf3+0x508>
    eb88:	4107883a 	add	r3,r8,r4
    eb8c:	1a11803a 	cmpltu	r8,r3,r8
    eb90:	8a23883a 	add	r17,r17,r8
    eb94:	1811883a 	mov	r8,r3
    eb98:	88c0402c 	andhi	r3,r17,256
    eb9c:	18000426 	beq	r3,zero,ebb0 <__muldf3+0x520>
    eba0:	11410004 	addi	r5,r2,1024
    eba4:	00bfc034 	movhi	r2,65280
    eba8:	10bfffc4 	addi	r2,r2,-1
    ebac:	88a2703a 	and	r17,r17,r2
    ebb0:	0081ff84 	movi	r2,2046
    ebb4:	117f6416 	blt	r2,r5,e948 <__alt_data_end+0xfffce948>
    ebb8:	8828977a 	slli	r20,r17,29
    ebbc:	4010d0fa 	srli	r8,r8,3
    ebc0:	8822927a 	slli	r17,r17,9
    ebc4:	2881ffcc 	andi	r2,r5,2047
    ebc8:	a228b03a 	or	r20,r20,r8
    ebcc:	880ad33a 	srli	r5,r17,12
    ebd0:	b02b883a 	mov	r21,r22
    ebd4:	003f0d06 	br	e80c <__alt_data_end+0xfffce80c>
    ebd8:	8080022c 	andhi	r2,r16,8
    ebdc:	10000926 	beq	r2,zero,ec04 <__muldf3+0x574>
    ebe0:	8880022c 	andhi	r2,r17,8
    ebe4:	1000071e 	bne	r2,zero,ec04 <__muldf3+0x574>
    ebe8:	00800434 	movhi	r2,16
    ebec:	89400234 	orhi	r5,r17,8
    ebf0:	10bfffc4 	addi	r2,r2,-1
    ebf4:	b82b883a 	mov	r21,r23
    ebf8:	288a703a 	and	r5,r5,r2
    ebfc:	4029883a 	mov	r20,r8
    ec00:	003f6806 	br	e9a4 <__alt_data_end+0xfffce9a4>
    ec04:	00800434 	movhi	r2,16
    ec08:	81400234 	orhi	r5,r16,8
    ec0c:	10bfffc4 	addi	r2,r2,-1
    ec10:	288a703a 	and	r5,r5,r2
    ec14:	003f6306 	br	e9a4 <__alt_data_end+0xfffce9a4>
    ec18:	147ff604 	addi	r17,r2,-40
    ec1c:	3462983a 	sll	r17,r6,r17
    ec20:	0011883a 	mov	r8,zero
    ec24:	003f4406 	br	e938 <__alt_data_end+0xfffce938>
    ec28:	3009883a 	mov	r4,r6
    ec2c:	d9800215 	stw	r6,8(sp)
    ec30:	da400115 	stw	r9,4(sp)
    ec34:	da800015 	stw	r10,0(sp)
    ec38:	000f8a80 	call	f8a8 <__clzsi2>
    ec3c:	10800804 	addi	r2,r2,32
    ec40:	da800017 	ldw	r10,0(sp)
    ec44:	da400117 	ldw	r9,4(sp)
    ec48:	d9800217 	ldw	r6,8(sp)
    ec4c:	003f3006 	br	e910 <__alt_data_end+0xfffce910>
    ec50:	143ff604 	addi	r16,r2,-40
    ec54:	9c20983a 	sll	r16,r19,r16
    ec58:	0029883a 	mov	r20,zero
    ec5c:	003f1606 	br	e8b8 <__alt_data_end+0xfffce8b8>
    ec60:	d9800215 	stw	r6,8(sp)
    ec64:	d9c00015 	stw	r7,0(sp)
    ec68:	da400115 	stw	r9,4(sp)
    ec6c:	000f8a80 	call	f8a8 <__clzsi2>
    ec70:	10800804 	addi	r2,r2,32
    ec74:	da400117 	ldw	r9,4(sp)
    ec78:	d9c00017 	ldw	r7,0(sp)
    ec7c:	d9800217 	ldw	r6,8(sp)
    ec80:	003f0306 	br	e890 <__alt_data_end+0xfffce890>
    ec84:	00c00044 	movi	r3,1
    ec88:	1947c83a 	sub	r3,r3,r5
    ec8c:	00800e04 	movi	r2,56
    ec90:	10feda16 	blt	r2,r3,e7fc <__alt_data_end+0xfffce7fc>
    ec94:	008007c4 	movi	r2,31
    ec98:	10c01b16 	blt	r2,r3,ed08 <__muldf3+0x678>
    ec9c:	00800804 	movi	r2,32
    eca0:	10c5c83a 	sub	r2,r2,r3
    eca4:	888a983a 	sll	r5,r17,r2
    eca8:	40c8d83a 	srl	r4,r8,r3
    ecac:	4084983a 	sll	r2,r8,r2
    ecb0:	88e2d83a 	srl	r17,r17,r3
    ecb4:	2906b03a 	or	r3,r5,r4
    ecb8:	1004c03a 	cmpne	r2,r2,zero
    ecbc:	1886b03a 	or	r3,r3,r2
    ecc0:	188001cc 	andi	r2,r3,7
    ecc4:	10000726 	beq	r2,zero,ece4 <__muldf3+0x654>
    ecc8:	188003cc 	andi	r2,r3,15
    eccc:	01000104 	movi	r4,4
    ecd0:	11000426 	beq	r2,r4,ece4 <__muldf3+0x654>
    ecd4:	1805883a 	mov	r2,r3
    ecd8:	10c00104 	addi	r3,r2,4
    ecdc:	1885803a 	cmpltu	r2,r3,r2
    ece0:	88a3883a 	add	r17,r17,r2
    ece4:	8880202c 	andhi	r2,r17,128
    ece8:	10001c26 	beq	r2,zero,ed5c <__muldf3+0x6cc>
    ecec:	b02b883a 	mov	r21,r22
    ecf0:	00800044 	movi	r2,1
    ecf4:	000b883a 	mov	r5,zero
    ecf8:	0029883a 	mov	r20,zero
    ecfc:	003ec306 	br	e80c <__alt_data_end+0xfffce80c>
    ed00:	5805883a 	mov	r2,r11
    ed04:	003f9906 	br	eb6c <__alt_data_end+0xfffceb6c>
    ed08:	00bff844 	movi	r2,-31
    ed0c:	1145c83a 	sub	r2,r2,r5
    ed10:	8888d83a 	srl	r4,r17,r2
    ed14:	00800804 	movi	r2,32
    ed18:	18801a26 	beq	r3,r2,ed84 <__muldf3+0x6f4>
    ed1c:	00801004 	movi	r2,64
    ed20:	10c5c83a 	sub	r2,r2,r3
    ed24:	8884983a 	sll	r2,r17,r2
    ed28:	1204b03a 	or	r2,r2,r8
    ed2c:	1004c03a 	cmpne	r2,r2,zero
    ed30:	2084b03a 	or	r2,r4,r2
    ed34:	144001cc 	andi	r17,r2,7
    ed38:	88000d1e 	bne	r17,zero,ed70 <__muldf3+0x6e0>
    ed3c:	000b883a 	mov	r5,zero
    ed40:	1028d0fa 	srli	r20,r2,3
    ed44:	b02b883a 	mov	r21,r22
    ed48:	0005883a 	mov	r2,zero
    ed4c:	a468b03a 	or	r20,r20,r17
    ed50:	003eae06 	br	e80c <__alt_data_end+0xfffce80c>
    ed54:	1007883a 	mov	r3,r2
    ed58:	0023883a 	mov	r17,zero
    ed5c:	880a927a 	slli	r5,r17,9
    ed60:	1805883a 	mov	r2,r3
    ed64:	8822977a 	slli	r17,r17,29
    ed68:	280ad33a 	srli	r5,r5,12
    ed6c:	003ff406 	br	ed40 <__alt_data_end+0xfffced40>
    ed70:	10c003cc 	andi	r3,r2,15
    ed74:	01000104 	movi	r4,4
    ed78:	193ff626 	beq	r3,r4,ed54 <__alt_data_end+0xfffced54>
    ed7c:	0023883a 	mov	r17,zero
    ed80:	003fd506 	br	ecd8 <__alt_data_end+0xfffcecd8>
    ed84:	0005883a 	mov	r2,zero
    ed88:	003fe706 	br	ed28 <__alt_data_end+0xfffced28>
    ed8c:	00800434 	movhi	r2,16
    ed90:	89400234 	orhi	r5,r17,8
    ed94:	10bfffc4 	addi	r2,r2,-1
    ed98:	b02b883a 	mov	r21,r22
    ed9c:	288a703a 	and	r5,r5,r2
    eda0:	4029883a 	mov	r20,r8
    eda4:	003eff06 	br	e9a4 <__alt_data_end+0xfffce9a4>

0000eda8 <__subdf3>:
    eda8:	02000434 	movhi	r8,16
    edac:	423fffc4 	addi	r8,r8,-1
    edb0:	defffb04 	addi	sp,sp,-20
    edb4:	2a14703a 	and	r10,r5,r8
    edb8:	3812d53a 	srli	r9,r7,20
    edbc:	3a10703a 	and	r8,r7,r8
    edc0:	2006d77a 	srli	r3,r4,29
    edc4:	3004d77a 	srli	r2,r6,29
    edc8:	dc000015 	stw	r16,0(sp)
    edcc:	501490fa 	slli	r10,r10,3
    edd0:	2820d53a 	srli	r16,r5,20
    edd4:	401090fa 	slli	r8,r8,3
    edd8:	dc800215 	stw	r18,8(sp)
    eddc:	dc400115 	stw	r17,4(sp)
    ede0:	dfc00415 	stw	ra,16(sp)
    ede4:	202290fa 	slli	r17,r4,3
    ede8:	dcc00315 	stw	r19,12(sp)
    edec:	4a41ffcc 	andi	r9,r9,2047
    edf0:	0101ffc4 	movi	r4,2047
    edf4:	2824d7fa 	srli	r18,r5,31
    edf8:	8401ffcc 	andi	r16,r16,2047
    edfc:	50c6b03a 	or	r3,r10,r3
    ee00:	380ed7fa 	srli	r7,r7,31
    ee04:	408ab03a 	or	r5,r8,r2
    ee08:	300c90fa 	slli	r6,r6,3
    ee0c:	49009626 	beq	r9,r4,f068 <__subdf3+0x2c0>
    ee10:	39c0005c 	xori	r7,r7,1
    ee14:	8245c83a 	sub	r2,r16,r9
    ee18:	3c807426 	beq	r7,r18,efec <__subdf3+0x244>
    ee1c:	0080af0e 	bge	zero,r2,f0dc <__subdf3+0x334>
    ee20:	48002a1e 	bne	r9,zero,eecc <__subdf3+0x124>
    ee24:	2988b03a 	or	r4,r5,r6
    ee28:	20009a1e 	bne	r4,zero,f094 <__subdf3+0x2ec>
    ee2c:	888001cc 	andi	r2,r17,7
    ee30:	10000726 	beq	r2,zero,ee50 <__subdf3+0xa8>
    ee34:	888003cc 	andi	r2,r17,15
    ee38:	01000104 	movi	r4,4
    ee3c:	11000426 	beq	r2,r4,ee50 <__subdf3+0xa8>
    ee40:	890b883a 	add	r5,r17,r4
    ee44:	2c63803a 	cmpltu	r17,r5,r17
    ee48:	1c47883a 	add	r3,r3,r17
    ee4c:	2823883a 	mov	r17,r5
    ee50:	1880202c 	andhi	r2,r3,128
    ee54:	10005926 	beq	r2,zero,efbc <__subdf3+0x214>
    ee58:	84000044 	addi	r16,r16,1
    ee5c:	0081ffc4 	movi	r2,2047
    ee60:	8080be26 	beq	r16,r2,f15c <__subdf3+0x3b4>
    ee64:	017fe034 	movhi	r5,65408
    ee68:	297fffc4 	addi	r5,r5,-1
    ee6c:	1946703a 	and	r3,r3,r5
    ee70:	1804977a 	slli	r2,r3,29
    ee74:	1806927a 	slli	r3,r3,9
    ee78:	8822d0fa 	srli	r17,r17,3
    ee7c:	8401ffcc 	andi	r16,r16,2047
    ee80:	180ad33a 	srli	r5,r3,12
    ee84:	9100004c 	andi	r4,r18,1
    ee88:	1444b03a 	or	r2,r2,r17
    ee8c:	80c1ffcc 	andi	r3,r16,2047
    ee90:	1820953a 	slli	r16,r3,20
    ee94:	20c03fcc 	andi	r3,r4,255
    ee98:	180897fa 	slli	r4,r3,31
    ee9c:	00c00434 	movhi	r3,16
    eea0:	18ffffc4 	addi	r3,r3,-1
    eea4:	28c6703a 	and	r3,r5,r3
    eea8:	1c06b03a 	or	r3,r3,r16
    eeac:	1906b03a 	or	r3,r3,r4
    eeb0:	dfc00417 	ldw	ra,16(sp)
    eeb4:	dcc00317 	ldw	r19,12(sp)
    eeb8:	dc800217 	ldw	r18,8(sp)
    eebc:	dc400117 	ldw	r17,4(sp)
    eec0:	dc000017 	ldw	r16,0(sp)
    eec4:	dec00504 	addi	sp,sp,20
    eec8:	f800283a 	ret
    eecc:	0101ffc4 	movi	r4,2047
    eed0:	813fd626 	beq	r16,r4,ee2c <__alt_data_end+0xfffcee2c>
    eed4:	29402034 	orhi	r5,r5,128
    eed8:	01000e04 	movi	r4,56
    eedc:	2080a316 	blt	r4,r2,f16c <__subdf3+0x3c4>
    eee0:	010007c4 	movi	r4,31
    eee4:	2080c616 	blt	r4,r2,f200 <__subdf3+0x458>
    eee8:	01000804 	movi	r4,32
    eeec:	2089c83a 	sub	r4,r4,r2
    eef0:	2910983a 	sll	r8,r5,r4
    eef4:	308ed83a 	srl	r7,r6,r2
    eef8:	3108983a 	sll	r4,r6,r4
    eefc:	2884d83a 	srl	r2,r5,r2
    ef00:	41ccb03a 	or	r6,r8,r7
    ef04:	2008c03a 	cmpne	r4,r4,zero
    ef08:	310cb03a 	or	r6,r6,r4
    ef0c:	898dc83a 	sub	r6,r17,r6
    ef10:	89a3803a 	cmpltu	r17,r17,r6
    ef14:	1887c83a 	sub	r3,r3,r2
    ef18:	1c47c83a 	sub	r3,r3,r17
    ef1c:	3023883a 	mov	r17,r6
    ef20:	1880202c 	andhi	r2,r3,128
    ef24:	10002326 	beq	r2,zero,efb4 <__subdf3+0x20c>
    ef28:	04c02034 	movhi	r19,128
    ef2c:	9cffffc4 	addi	r19,r19,-1
    ef30:	1ce6703a 	and	r19,r3,r19
    ef34:	98007a26 	beq	r19,zero,f120 <__subdf3+0x378>
    ef38:	9809883a 	mov	r4,r19
    ef3c:	000f8a80 	call	f8a8 <__clzsi2>
    ef40:	113ffe04 	addi	r4,r2,-8
    ef44:	00c007c4 	movi	r3,31
    ef48:	19007b16 	blt	r3,r4,f138 <__subdf3+0x390>
    ef4c:	00800804 	movi	r2,32
    ef50:	1105c83a 	sub	r2,r2,r4
    ef54:	8884d83a 	srl	r2,r17,r2
    ef58:	9906983a 	sll	r3,r19,r4
    ef5c:	8922983a 	sll	r17,r17,r4
    ef60:	10c4b03a 	or	r2,r2,r3
    ef64:	24007816 	blt	r4,r16,f148 <__subdf3+0x3a0>
    ef68:	2421c83a 	sub	r16,r4,r16
    ef6c:	80c00044 	addi	r3,r16,1
    ef70:	010007c4 	movi	r4,31
    ef74:	20c09516 	blt	r4,r3,f1cc <__subdf3+0x424>
    ef78:	01400804 	movi	r5,32
    ef7c:	28cbc83a 	sub	r5,r5,r3
    ef80:	88c8d83a 	srl	r4,r17,r3
    ef84:	8962983a 	sll	r17,r17,r5
    ef88:	114a983a 	sll	r5,r2,r5
    ef8c:	10c6d83a 	srl	r3,r2,r3
    ef90:	8804c03a 	cmpne	r2,r17,zero
    ef94:	290ab03a 	or	r5,r5,r4
    ef98:	28a2b03a 	or	r17,r5,r2
    ef9c:	0021883a 	mov	r16,zero
    efa0:	003fa206 	br	ee2c <__alt_data_end+0xfffcee2c>
    efa4:	2090b03a 	or	r8,r4,r2
    efa8:	40018e26 	beq	r8,zero,f5e4 <__subdf3+0x83c>
    efac:	1007883a 	mov	r3,r2
    efb0:	2023883a 	mov	r17,r4
    efb4:	888001cc 	andi	r2,r17,7
    efb8:	103f9e1e 	bne	r2,zero,ee34 <__alt_data_end+0xfffcee34>
    efbc:	1804977a 	slli	r2,r3,29
    efc0:	8822d0fa 	srli	r17,r17,3
    efc4:	1810d0fa 	srli	r8,r3,3
    efc8:	9100004c 	andi	r4,r18,1
    efcc:	1444b03a 	or	r2,r2,r17
    efd0:	00c1ffc4 	movi	r3,2047
    efd4:	80c02826 	beq	r16,r3,f078 <__subdf3+0x2d0>
    efd8:	01400434 	movhi	r5,16
    efdc:	297fffc4 	addi	r5,r5,-1
    efe0:	80e0703a 	and	r16,r16,r3
    efe4:	414a703a 	and	r5,r8,r5
    efe8:	003fa806 	br	ee8c <__alt_data_end+0xfffcee8c>
    efec:	0080630e 	bge	zero,r2,f17c <__subdf3+0x3d4>
    eff0:	48003026 	beq	r9,zero,f0b4 <__subdf3+0x30c>
    eff4:	0101ffc4 	movi	r4,2047
    eff8:	813f8c26 	beq	r16,r4,ee2c <__alt_data_end+0xfffcee2c>
    effc:	29402034 	orhi	r5,r5,128
    f000:	01000e04 	movi	r4,56
    f004:	2080a90e 	bge	r4,r2,f2ac <__subdf3+0x504>
    f008:	298cb03a 	or	r6,r5,r6
    f00c:	3012c03a 	cmpne	r9,r6,zero
    f010:	0005883a 	mov	r2,zero
    f014:	4c53883a 	add	r9,r9,r17
    f018:	4c63803a 	cmpltu	r17,r9,r17
    f01c:	10c7883a 	add	r3,r2,r3
    f020:	88c7883a 	add	r3,r17,r3
    f024:	4823883a 	mov	r17,r9
    f028:	1880202c 	andhi	r2,r3,128
    f02c:	1000d026 	beq	r2,zero,f370 <__subdf3+0x5c8>
    f030:	84000044 	addi	r16,r16,1
    f034:	0081ffc4 	movi	r2,2047
    f038:	8080fe26 	beq	r16,r2,f434 <__subdf3+0x68c>
    f03c:	00bfe034 	movhi	r2,65408
    f040:	10bfffc4 	addi	r2,r2,-1
    f044:	1886703a 	and	r3,r3,r2
    f048:	880ad07a 	srli	r5,r17,1
    f04c:	180497fa 	slli	r2,r3,31
    f050:	8900004c 	andi	r4,r17,1
    f054:	2922b03a 	or	r17,r5,r4
    f058:	1806d07a 	srli	r3,r3,1
    f05c:	1462b03a 	or	r17,r2,r17
    f060:	3825883a 	mov	r18,r7
    f064:	003f7106 	br	ee2c <__alt_data_end+0xfffcee2c>
    f068:	2984b03a 	or	r2,r5,r6
    f06c:	103f6826 	beq	r2,zero,ee10 <__alt_data_end+0xfffcee10>
    f070:	39c03fcc 	andi	r7,r7,255
    f074:	003f6706 	br	ee14 <__alt_data_end+0xfffcee14>
    f078:	4086b03a 	or	r3,r8,r2
    f07c:	18015226 	beq	r3,zero,f5c8 <__subdf3+0x820>
    f080:	00c00434 	movhi	r3,16
    f084:	41400234 	orhi	r5,r8,8
    f088:	18ffffc4 	addi	r3,r3,-1
    f08c:	28ca703a 	and	r5,r5,r3
    f090:	003f7e06 	br	ee8c <__alt_data_end+0xfffcee8c>
    f094:	10bfffc4 	addi	r2,r2,-1
    f098:	1000491e 	bne	r2,zero,f1c0 <__subdf3+0x418>
    f09c:	898fc83a 	sub	r7,r17,r6
    f0a0:	89e3803a 	cmpltu	r17,r17,r7
    f0a4:	1947c83a 	sub	r3,r3,r5
    f0a8:	1c47c83a 	sub	r3,r3,r17
    f0ac:	3823883a 	mov	r17,r7
    f0b0:	003f9b06 	br	ef20 <__alt_data_end+0xfffcef20>
    f0b4:	2988b03a 	or	r4,r5,r6
    f0b8:	203f5c26 	beq	r4,zero,ee2c <__alt_data_end+0xfffcee2c>
    f0bc:	10bfffc4 	addi	r2,r2,-1
    f0c0:	1000931e 	bne	r2,zero,f310 <__subdf3+0x568>
    f0c4:	898d883a 	add	r6,r17,r6
    f0c8:	3463803a 	cmpltu	r17,r6,r17
    f0cc:	1947883a 	add	r3,r3,r5
    f0d0:	88c7883a 	add	r3,r17,r3
    f0d4:	3023883a 	mov	r17,r6
    f0d8:	003fd306 	br	f028 <__alt_data_end+0xfffcf028>
    f0dc:	1000541e 	bne	r2,zero,f230 <__subdf3+0x488>
    f0e0:	80800044 	addi	r2,r16,1
    f0e4:	1081ffcc 	andi	r2,r2,2047
    f0e8:	01000044 	movi	r4,1
    f0ec:	2080a20e 	bge	r4,r2,f378 <__subdf3+0x5d0>
    f0f0:	8989c83a 	sub	r4,r17,r6
    f0f4:	8905803a 	cmpltu	r2,r17,r4
    f0f8:	1967c83a 	sub	r19,r3,r5
    f0fc:	98a7c83a 	sub	r19,r19,r2
    f100:	9880202c 	andhi	r2,r19,128
    f104:	10006326 	beq	r2,zero,f294 <__subdf3+0x4ec>
    f108:	3463c83a 	sub	r17,r6,r17
    f10c:	28c7c83a 	sub	r3,r5,r3
    f110:	344d803a 	cmpltu	r6,r6,r17
    f114:	19a7c83a 	sub	r19,r3,r6
    f118:	3825883a 	mov	r18,r7
    f11c:	983f861e 	bne	r19,zero,ef38 <__alt_data_end+0xfffcef38>
    f120:	8809883a 	mov	r4,r17
    f124:	000f8a80 	call	f8a8 <__clzsi2>
    f128:	10800804 	addi	r2,r2,32
    f12c:	113ffe04 	addi	r4,r2,-8
    f130:	00c007c4 	movi	r3,31
    f134:	193f850e 	bge	r3,r4,ef4c <__alt_data_end+0xfffcef4c>
    f138:	10bff604 	addi	r2,r2,-40
    f13c:	8884983a 	sll	r2,r17,r2
    f140:	0023883a 	mov	r17,zero
    f144:	243f880e 	bge	r4,r16,ef68 <__alt_data_end+0xfffcef68>
    f148:	00ffe034 	movhi	r3,65408
    f14c:	18ffffc4 	addi	r3,r3,-1
    f150:	8121c83a 	sub	r16,r16,r4
    f154:	10c6703a 	and	r3,r2,r3
    f158:	003f3406 	br	ee2c <__alt_data_end+0xfffcee2c>
    f15c:	9100004c 	andi	r4,r18,1
    f160:	000b883a 	mov	r5,zero
    f164:	0005883a 	mov	r2,zero
    f168:	003f4806 	br	ee8c <__alt_data_end+0xfffcee8c>
    f16c:	298cb03a 	or	r6,r5,r6
    f170:	300cc03a 	cmpne	r6,r6,zero
    f174:	0005883a 	mov	r2,zero
    f178:	003f6406 	br	ef0c <__alt_data_end+0xfffcef0c>
    f17c:	10009a1e 	bne	r2,zero,f3e8 <__subdf3+0x640>
    f180:	82400044 	addi	r9,r16,1
    f184:	4881ffcc 	andi	r2,r9,2047
    f188:	02800044 	movi	r10,1
    f18c:	5080670e 	bge	r10,r2,f32c <__subdf3+0x584>
    f190:	0081ffc4 	movi	r2,2047
    f194:	4880af26 	beq	r9,r2,f454 <__subdf3+0x6ac>
    f198:	898d883a 	add	r6,r17,r6
    f19c:	1945883a 	add	r2,r3,r5
    f1a0:	3447803a 	cmpltu	r3,r6,r17
    f1a4:	1887883a 	add	r3,r3,r2
    f1a8:	182297fa 	slli	r17,r3,31
    f1ac:	300cd07a 	srli	r6,r6,1
    f1b0:	1806d07a 	srli	r3,r3,1
    f1b4:	4821883a 	mov	r16,r9
    f1b8:	89a2b03a 	or	r17,r17,r6
    f1bc:	003f1b06 	br	ee2c <__alt_data_end+0xfffcee2c>
    f1c0:	0101ffc4 	movi	r4,2047
    f1c4:	813f441e 	bne	r16,r4,eed8 <__alt_data_end+0xfffceed8>
    f1c8:	003f1806 	br	ee2c <__alt_data_end+0xfffcee2c>
    f1cc:	843ff844 	addi	r16,r16,-31
    f1d0:	01400804 	movi	r5,32
    f1d4:	1408d83a 	srl	r4,r2,r16
    f1d8:	19405026 	beq	r3,r5,f31c <__subdf3+0x574>
    f1dc:	01401004 	movi	r5,64
    f1e0:	28c7c83a 	sub	r3,r5,r3
    f1e4:	10c4983a 	sll	r2,r2,r3
    f1e8:	88a2b03a 	or	r17,r17,r2
    f1ec:	8822c03a 	cmpne	r17,r17,zero
    f1f0:	2462b03a 	or	r17,r4,r17
    f1f4:	0007883a 	mov	r3,zero
    f1f8:	0021883a 	mov	r16,zero
    f1fc:	003f6d06 	br	efb4 <__alt_data_end+0xfffcefb4>
    f200:	11fff804 	addi	r7,r2,-32
    f204:	01000804 	movi	r4,32
    f208:	29ced83a 	srl	r7,r5,r7
    f20c:	11004526 	beq	r2,r4,f324 <__subdf3+0x57c>
    f210:	01001004 	movi	r4,64
    f214:	2089c83a 	sub	r4,r4,r2
    f218:	2904983a 	sll	r2,r5,r4
    f21c:	118cb03a 	or	r6,r2,r6
    f220:	300cc03a 	cmpne	r6,r6,zero
    f224:	398cb03a 	or	r6,r7,r6
    f228:	0005883a 	mov	r2,zero
    f22c:	003f3706 	br	ef0c <__alt_data_end+0xfffcef0c>
    f230:	80002a26 	beq	r16,zero,f2dc <__subdf3+0x534>
    f234:	0101ffc4 	movi	r4,2047
    f238:	49006626 	beq	r9,r4,f3d4 <__subdf3+0x62c>
    f23c:	0085c83a 	sub	r2,zero,r2
    f240:	18c02034 	orhi	r3,r3,128
    f244:	01000e04 	movi	r4,56
    f248:	20807e16 	blt	r4,r2,f444 <__subdf3+0x69c>
    f24c:	010007c4 	movi	r4,31
    f250:	2080e716 	blt	r4,r2,f5f0 <__subdf3+0x848>
    f254:	01000804 	movi	r4,32
    f258:	2089c83a 	sub	r4,r4,r2
    f25c:	1914983a 	sll	r10,r3,r4
    f260:	8890d83a 	srl	r8,r17,r2
    f264:	8908983a 	sll	r4,r17,r4
    f268:	1884d83a 	srl	r2,r3,r2
    f26c:	5222b03a 	or	r17,r10,r8
    f270:	2006c03a 	cmpne	r3,r4,zero
    f274:	88e2b03a 	or	r17,r17,r3
    f278:	3463c83a 	sub	r17,r6,r17
    f27c:	2885c83a 	sub	r2,r5,r2
    f280:	344d803a 	cmpltu	r6,r6,r17
    f284:	1187c83a 	sub	r3,r2,r6
    f288:	4821883a 	mov	r16,r9
    f28c:	3825883a 	mov	r18,r7
    f290:	003f2306 	br	ef20 <__alt_data_end+0xfffcef20>
    f294:	24d0b03a 	or	r8,r4,r19
    f298:	40001b1e 	bne	r8,zero,f308 <__subdf3+0x560>
    f29c:	0005883a 	mov	r2,zero
    f2a0:	0009883a 	mov	r4,zero
    f2a4:	0021883a 	mov	r16,zero
    f2a8:	003f4906 	br	efd0 <__alt_data_end+0xfffcefd0>
    f2ac:	010007c4 	movi	r4,31
    f2b0:	20803a16 	blt	r4,r2,f39c <__subdf3+0x5f4>
    f2b4:	01000804 	movi	r4,32
    f2b8:	2089c83a 	sub	r4,r4,r2
    f2bc:	2912983a 	sll	r9,r5,r4
    f2c0:	3090d83a 	srl	r8,r6,r2
    f2c4:	3108983a 	sll	r4,r6,r4
    f2c8:	2884d83a 	srl	r2,r5,r2
    f2cc:	4a12b03a 	or	r9,r9,r8
    f2d0:	2008c03a 	cmpne	r4,r4,zero
    f2d4:	4912b03a 	or	r9,r9,r4
    f2d8:	003f4e06 	br	f014 <__alt_data_end+0xfffcf014>
    f2dc:	1c48b03a 	or	r4,r3,r17
    f2e0:	20003c26 	beq	r4,zero,f3d4 <__subdf3+0x62c>
    f2e4:	0084303a 	nor	r2,zero,r2
    f2e8:	1000381e 	bne	r2,zero,f3cc <__subdf3+0x624>
    f2ec:	3463c83a 	sub	r17,r6,r17
    f2f0:	28c5c83a 	sub	r2,r5,r3
    f2f4:	344d803a 	cmpltu	r6,r6,r17
    f2f8:	1187c83a 	sub	r3,r2,r6
    f2fc:	4821883a 	mov	r16,r9
    f300:	3825883a 	mov	r18,r7
    f304:	003f0606 	br	ef20 <__alt_data_end+0xfffcef20>
    f308:	2023883a 	mov	r17,r4
    f30c:	003f0906 	br	ef34 <__alt_data_end+0xfffcef34>
    f310:	0101ffc4 	movi	r4,2047
    f314:	813f3a1e 	bne	r16,r4,f000 <__alt_data_end+0xfffcf000>
    f318:	003ec406 	br	ee2c <__alt_data_end+0xfffcee2c>
    f31c:	0005883a 	mov	r2,zero
    f320:	003fb106 	br	f1e8 <__alt_data_end+0xfffcf1e8>
    f324:	0005883a 	mov	r2,zero
    f328:	003fbc06 	br	f21c <__alt_data_end+0xfffcf21c>
    f32c:	1c44b03a 	or	r2,r3,r17
    f330:	80008e1e 	bne	r16,zero,f56c <__subdf3+0x7c4>
    f334:	1000c826 	beq	r2,zero,f658 <__subdf3+0x8b0>
    f338:	2984b03a 	or	r2,r5,r6
    f33c:	103ebb26 	beq	r2,zero,ee2c <__alt_data_end+0xfffcee2c>
    f340:	8989883a 	add	r4,r17,r6
    f344:	1945883a 	add	r2,r3,r5
    f348:	2447803a 	cmpltu	r3,r4,r17
    f34c:	1887883a 	add	r3,r3,r2
    f350:	1880202c 	andhi	r2,r3,128
    f354:	2023883a 	mov	r17,r4
    f358:	103f1626 	beq	r2,zero,efb4 <__alt_data_end+0xfffcefb4>
    f35c:	00bfe034 	movhi	r2,65408
    f360:	10bfffc4 	addi	r2,r2,-1
    f364:	5021883a 	mov	r16,r10
    f368:	1886703a 	and	r3,r3,r2
    f36c:	003eaf06 	br	ee2c <__alt_data_end+0xfffcee2c>
    f370:	3825883a 	mov	r18,r7
    f374:	003f0f06 	br	efb4 <__alt_data_end+0xfffcefb4>
    f378:	1c44b03a 	or	r2,r3,r17
    f37c:	8000251e 	bne	r16,zero,f414 <__subdf3+0x66c>
    f380:	1000661e 	bne	r2,zero,f51c <__subdf3+0x774>
    f384:	2990b03a 	or	r8,r5,r6
    f388:	40009626 	beq	r8,zero,f5e4 <__subdf3+0x83c>
    f38c:	2807883a 	mov	r3,r5
    f390:	3023883a 	mov	r17,r6
    f394:	3825883a 	mov	r18,r7
    f398:	003ea406 	br	ee2c <__alt_data_end+0xfffcee2c>
    f39c:	127ff804 	addi	r9,r2,-32
    f3a0:	01000804 	movi	r4,32
    f3a4:	2a52d83a 	srl	r9,r5,r9
    f3a8:	11008c26 	beq	r2,r4,f5dc <__subdf3+0x834>
    f3ac:	01001004 	movi	r4,64
    f3b0:	2085c83a 	sub	r2,r4,r2
    f3b4:	2884983a 	sll	r2,r5,r2
    f3b8:	118cb03a 	or	r6,r2,r6
    f3bc:	300cc03a 	cmpne	r6,r6,zero
    f3c0:	4992b03a 	or	r9,r9,r6
    f3c4:	0005883a 	mov	r2,zero
    f3c8:	003f1206 	br	f014 <__alt_data_end+0xfffcf014>
    f3cc:	0101ffc4 	movi	r4,2047
    f3d0:	493f9c1e 	bne	r9,r4,f244 <__alt_data_end+0xfffcf244>
    f3d4:	2807883a 	mov	r3,r5
    f3d8:	3023883a 	mov	r17,r6
    f3dc:	4821883a 	mov	r16,r9
    f3e0:	3825883a 	mov	r18,r7
    f3e4:	003e9106 	br	ee2c <__alt_data_end+0xfffcee2c>
    f3e8:	80001f1e 	bne	r16,zero,f468 <__subdf3+0x6c0>
    f3ec:	1c48b03a 	or	r4,r3,r17
    f3f0:	20005a26 	beq	r4,zero,f55c <__subdf3+0x7b4>
    f3f4:	0084303a 	nor	r2,zero,r2
    f3f8:	1000561e 	bne	r2,zero,f554 <__subdf3+0x7ac>
    f3fc:	89a3883a 	add	r17,r17,r6
    f400:	1945883a 	add	r2,r3,r5
    f404:	898d803a 	cmpltu	r6,r17,r6
    f408:	3087883a 	add	r3,r6,r2
    f40c:	4821883a 	mov	r16,r9
    f410:	003f0506 	br	f028 <__alt_data_end+0xfffcf028>
    f414:	10002b1e 	bne	r2,zero,f4c4 <__subdf3+0x71c>
    f418:	2984b03a 	or	r2,r5,r6
    f41c:	10008026 	beq	r2,zero,f620 <__subdf3+0x878>
    f420:	2807883a 	mov	r3,r5
    f424:	3023883a 	mov	r17,r6
    f428:	3825883a 	mov	r18,r7
    f42c:	0401ffc4 	movi	r16,2047
    f430:	003e7e06 	br	ee2c <__alt_data_end+0xfffcee2c>
    f434:	3809883a 	mov	r4,r7
    f438:	0011883a 	mov	r8,zero
    f43c:	0005883a 	mov	r2,zero
    f440:	003ee306 	br	efd0 <__alt_data_end+0xfffcefd0>
    f444:	1c62b03a 	or	r17,r3,r17
    f448:	8822c03a 	cmpne	r17,r17,zero
    f44c:	0005883a 	mov	r2,zero
    f450:	003f8906 	br	f278 <__alt_data_end+0xfffcf278>
    f454:	3809883a 	mov	r4,r7
    f458:	4821883a 	mov	r16,r9
    f45c:	0011883a 	mov	r8,zero
    f460:	0005883a 	mov	r2,zero
    f464:	003eda06 	br	efd0 <__alt_data_end+0xfffcefd0>
    f468:	0101ffc4 	movi	r4,2047
    f46c:	49003b26 	beq	r9,r4,f55c <__subdf3+0x7b4>
    f470:	0085c83a 	sub	r2,zero,r2
    f474:	18c02034 	orhi	r3,r3,128
    f478:	01000e04 	movi	r4,56
    f47c:	20806e16 	blt	r4,r2,f638 <__subdf3+0x890>
    f480:	010007c4 	movi	r4,31
    f484:	20807716 	blt	r4,r2,f664 <__subdf3+0x8bc>
    f488:	01000804 	movi	r4,32
    f48c:	2089c83a 	sub	r4,r4,r2
    f490:	1914983a 	sll	r10,r3,r4
    f494:	8890d83a 	srl	r8,r17,r2
    f498:	8908983a 	sll	r4,r17,r4
    f49c:	1884d83a 	srl	r2,r3,r2
    f4a0:	5222b03a 	or	r17,r10,r8
    f4a4:	2006c03a 	cmpne	r3,r4,zero
    f4a8:	88e2b03a 	or	r17,r17,r3
    f4ac:	89a3883a 	add	r17,r17,r6
    f4b0:	1145883a 	add	r2,r2,r5
    f4b4:	898d803a 	cmpltu	r6,r17,r6
    f4b8:	3087883a 	add	r3,r6,r2
    f4bc:	4821883a 	mov	r16,r9
    f4c0:	003ed906 	br	f028 <__alt_data_end+0xfffcf028>
    f4c4:	2984b03a 	or	r2,r5,r6
    f4c8:	10004226 	beq	r2,zero,f5d4 <__subdf3+0x82c>
    f4cc:	1808d0fa 	srli	r4,r3,3
    f4d0:	8822d0fa 	srli	r17,r17,3
    f4d4:	1806977a 	slli	r3,r3,29
    f4d8:	2080022c 	andhi	r2,r4,8
    f4dc:	1c62b03a 	or	r17,r3,r17
    f4e0:	10000826 	beq	r2,zero,f504 <__subdf3+0x75c>
    f4e4:	2812d0fa 	srli	r9,r5,3
    f4e8:	4880022c 	andhi	r2,r9,8
    f4ec:	1000051e 	bne	r2,zero,f504 <__subdf3+0x75c>
    f4f0:	300cd0fa 	srli	r6,r6,3
    f4f4:	2804977a 	slli	r2,r5,29
    f4f8:	4809883a 	mov	r4,r9
    f4fc:	3825883a 	mov	r18,r7
    f500:	11a2b03a 	or	r17,r2,r6
    f504:	8806d77a 	srli	r3,r17,29
    f508:	200890fa 	slli	r4,r4,3
    f50c:	882290fa 	slli	r17,r17,3
    f510:	0401ffc4 	movi	r16,2047
    f514:	1906b03a 	or	r3,r3,r4
    f518:	003e4406 	br	ee2c <__alt_data_end+0xfffcee2c>
    f51c:	2984b03a 	or	r2,r5,r6
    f520:	103e4226 	beq	r2,zero,ee2c <__alt_data_end+0xfffcee2c>
    f524:	8989c83a 	sub	r4,r17,r6
    f528:	8911803a 	cmpltu	r8,r17,r4
    f52c:	1945c83a 	sub	r2,r3,r5
    f530:	1205c83a 	sub	r2,r2,r8
    f534:	1200202c 	andhi	r8,r2,128
    f538:	403e9a26 	beq	r8,zero,efa4 <__alt_data_end+0xfffcefa4>
    f53c:	3463c83a 	sub	r17,r6,r17
    f540:	28c5c83a 	sub	r2,r5,r3
    f544:	344d803a 	cmpltu	r6,r6,r17
    f548:	1187c83a 	sub	r3,r2,r6
    f54c:	3825883a 	mov	r18,r7
    f550:	003e3606 	br	ee2c <__alt_data_end+0xfffcee2c>
    f554:	0101ffc4 	movi	r4,2047
    f558:	493fc71e 	bne	r9,r4,f478 <__alt_data_end+0xfffcf478>
    f55c:	2807883a 	mov	r3,r5
    f560:	3023883a 	mov	r17,r6
    f564:	4821883a 	mov	r16,r9
    f568:	003e3006 	br	ee2c <__alt_data_end+0xfffcee2c>
    f56c:	10003626 	beq	r2,zero,f648 <__subdf3+0x8a0>
    f570:	2984b03a 	or	r2,r5,r6
    f574:	10001726 	beq	r2,zero,f5d4 <__subdf3+0x82c>
    f578:	1808d0fa 	srli	r4,r3,3
    f57c:	8822d0fa 	srli	r17,r17,3
    f580:	1806977a 	slli	r3,r3,29
    f584:	2080022c 	andhi	r2,r4,8
    f588:	1c62b03a 	or	r17,r3,r17
    f58c:	10000726 	beq	r2,zero,f5ac <__subdf3+0x804>
    f590:	2812d0fa 	srli	r9,r5,3
    f594:	4880022c 	andhi	r2,r9,8
    f598:	1000041e 	bne	r2,zero,f5ac <__subdf3+0x804>
    f59c:	300cd0fa 	srli	r6,r6,3
    f5a0:	2804977a 	slli	r2,r5,29
    f5a4:	4809883a 	mov	r4,r9
    f5a8:	11a2b03a 	or	r17,r2,r6
    f5ac:	8806d77a 	srli	r3,r17,29
    f5b0:	200890fa 	slli	r4,r4,3
    f5b4:	882290fa 	slli	r17,r17,3
    f5b8:	3825883a 	mov	r18,r7
    f5bc:	1906b03a 	or	r3,r3,r4
    f5c0:	0401ffc4 	movi	r16,2047
    f5c4:	003e1906 	br	ee2c <__alt_data_end+0xfffcee2c>
    f5c8:	000b883a 	mov	r5,zero
    f5cc:	0005883a 	mov	r2,zero
    f5d0:	003e2e06 	br	ee8c <__alt_data_end+0xfffcee8c>
    f5d4:	0401ffc4 	movi	r16,2047
    f5d8:	003e1406 	br	ee2c <__alt_data_end+0xfffcee2c>
    f5dc:	0005883a 	mov	r2,zero
    f5e0:	003f7506 	br	f3b8 <__alt_data_end+0xfffcf3b8>
    f5e4:	0005883a 	mov	r2,zero
    f5e8:	0009883a 	mov	r4,zero
    f5ec:	003e7806 	br	efd0 <__alt_data_end+0xfffcefd0>
    f5f0:	123ff804 	addi	r8,r2,-32
    f5f4:	01000804 	movi	r4,32
    f5f8:	1a10d83a 	srl	r8,r3,r8
    f5fc:	11002526 	beq	r2,r4,f694 <__subdf3+0x8ec>
    f600:	01001004 	movi	r4,64
    f604:	2085c83a 	sub	r2,r4,r2
    f608:	1884983a 	sll	r2,r3,r2
    f60c:	1444b03a 	or	r2,r2,r17
    f610:	1004c03a 	cmpne	r2,r2,zero
    f614:	40a2b03a 	or	r17,r8,r2
    f618:	0005883a 	mov	r2,zero
    f61c:	003f1606 	br	f278 <__alt_data_end+0xfffcf278>
    f620:	02000434 	movhi	r8,16
    f624:	0009883a 	mov	r4,zero
    f628:	423fffc4 	addi	r8,r8,-1
    f62c:	00bfffc4 	movi	r2,-1
    f630:	0401ffc4 	movi	r16,2047
    f634:	003e6606 	br	efd0 <__alt_data_end+0xfffcefd0>
    f638:	1c62b03a 	or	r17,r3,r17
    f63c:	8822c03a 	cmpne	r17,r17,zero
    f640:	0005883a 	mov	r2,zero
    f644:	003f9906 	br	f4ac <__alt_data_end+0xfffcf4ac>
    f648:	2807883a 	mov	r3,r5
    f64c:	3023883a 	mov	r17,r6
    f650:	0401ffc4 	movi	r16,2047
    f654:	003df506 	br	ee2c <__alt_data_end+0xfffcee2c>
    f658:	2807883a 	mov	r3,r5
    f65c:	3023883a 	mov	r17,r6
    f660:	003df206 	br	ee2c <__alt_data_end+0xfffcee2c>
    f664:	123ff804 	addi	r8,r2,-32
    f668:	01000804 	movi	r4,32
    f66c:	1a10d83a 	srl	r8,r3,r8
    f670:	11000a26 	beq	r2,r4,f69c <__subdf3+0x8f4>
    f674:	01001004 	movi	r4,64
    f678:	2085c83a 	sub	r2,r4,r2
    f67c:	1884983a 	sll	r2,r3,r2
    f680:	1444b03a 	or	r2,r2,r17
    f684:	1004c03a 	cmpne	r2,r2,zero
    f688:	40a2b03a 	or	r17,r8,r2
    f68c:	0005883a 	mov	r2,zero
    f690:	003f8606 	br	f4ac <__alt_data_end+0xfffcf4ac>
    f694:	0005883a 	mov	r2,zero
    f698:	003fdc06 	br	f60c <__alt_data_end+0xfffcf60c>
    f69c:	0005883a 	mov	r2,zero
    f6a0:	003ff706 	br	f680 <__alt_data_end+0xfffcf680>

0000f6a4 <__fixdfsi>:
    f6a4:	280cd53a 	srli	r6,r5,20
    f6a8:	00c00434 	movhi	r3,16
    f6ac:	18ffffc4 	addi	r3,r3,-1
    f6b0:	3181ffcc 	andi	r6,r6,2047
    f6b4:	01c0ff84 	movi	r7,1022
    f6b8:	28c6703a 	and	r3,r5,r3
    f6bc:	280ad7fa 	srli	r5,r5,31
    f6c0:	3980120e 	bge	r7,r6,f70c <__fixdfsi+0x68>
    f6c4:	00810744 	movi	r2,1053
    f6c8:	11800c16 	blt	r2,r6,f6fc <__fixdfsi+0x58>
    f6cc:	00810cc4 	movi	r2,1075
    f6d0:	1185c83a 	sub	r2,r2,r6
    f6d4:	01c007c4 	movi	r7,31
    f6d8:	18c00434 	orhi	r3,r3,16
    f6dc:	38800d16 	blt	r7,r2,f714 <__fixdfsi+0x70>
    f6e0:	31befb44 	addi	r6,r6,-1043
    f6e4:	2084d83a 	srl	r2,r4,r2
    f6e8:	1986983a 	sll	r3,r3,r6
    f6ec:	1884b03a 	or	r2,r3,r2
    f6f0:	28000726 	beq	r5,zero,f710 <__fixdfsi+0x6c>
    f6f4:	0085c83a 	sub	r2,zero,r2
    f6f8:	f800283a 	ret
    f6fc:	00a00034 	movhi	r2,32768
    f700:	10bfffc4 	addi	r2,r2,-1
    f704:	2885883a 	add	r2,r5,r2
    f708:	f800283a 	ret
    f70c:	0005883a 	mov	r2,zero
    f710:	f800283a 	ret
    f714:	008104c4 	movi	r2,1043
    f718:	1185c83a 	sub	r2,r2,r6
    f71c:	1884d83a 	srl	r2,r3,r2
    f720:	003ff306 	br	f6f0 <__alt_data_end+0xfffcf6f0>

0000f724 <__floatsidf>:
    f724:	defffd04 	addi	sp,sp,-12
    f728:	dfc00215 	stw	ra,8(sp)
    f72c:	dc400115 	stw	r17,4(sp)
    f730:	dc000015 	stw	r16,0(sp)
    f734:	20002b26 	beq	r4,zero,f7e4 <__floatsidf+0xc0>
    f738:	2023883a 	mov	r17,r4
    f73c:	2020d7fa 	srli	r16,r4,31
    f740:	20002d16 	blt	r4,zero,f7f8 <__floatsidf+0xd4>
    f744:	8809883a 	mov	r4,r17
    f748:	000f8a80 	call	f8a8 <__clzsi2>
    f74c:	01410784 	movi	r5,1054
    f750:	288bc83a 	sub	r5,r5,r2
    f754:	01010cc4 	movi	r4,1075
    f758:	2149c83a 	sub	r4,r4,r5
    f75c:	00c007c4 	movi	r3,31
    f760:	1900160e 	bge	r3,r4,f7bc <__floatsidf+0x98>
    f764:	00c104c4 	movi	r3,1043
    f768:	1947c83a 	sub	r3,r3,r5
    f76c:	88c6983a 	sll	r3,r17,r3
    f770:	00800434 	movhi	r2,16
    f774:	10bfffc4 	addi	r2,r2,-1
    f778:	1886703a 	and	r3,r3,r2
    f77c:	2941ffcc 	andi	r5,r5,2047
    f780:	800d883a 	mov	r6,r16
    f784:	0005883a 	mov	r2,zero
    f788:	280a953a 	slli	r5,r5,20
    f78c:	31803fcc 	andi	r6,r6,255
    f790:	01000434 	movhi	r4,16
    f794:	300c97fa 	slli	r6,r6,31
    f798:	213fffc4 	addi	r4,r4,-1
    f79c:	1906703a 	and	r3,r3,r4
    f7a0:	1946b03a 	or	r3,r3,r5
    f7a4:	1986b03a 	or	r3,r3,r6
    f7a8:	dfc00217 	ldw	ra,8(sp)
    f7ac:	dc400117 	ldw	r17,4(sp)
    f7b0:	dc000017 	ldw	r16,0(sp)
    f7b4:	dec00304 	addi	sp,sp,12
    f7b8:	f800283a 	ret
    f7bc:	00c002c4 	movi	r3,11
    f7c0:	1887c83a 	sub	r3,r3,r2
    f7c4:	88c6d83a 	srl	r3,r17,r3
    f7c8:	8904983a 	sll	r2,r17,r4
    f7cc:	01000434 	movhi	r4,16
    f7d0:	213fffc4 	addi	r4,r4,-1
    f7d4:	2941ffcc 	andi	r5,r5,2047
    f7d8:	1906703a 	and	r3,r3,r4
    f7dc:	800d883a 	mov	r6,r16
    f7e0:	003fe906 	br	f788 <__alt_data_end+0xfffcf788>
    f7e4:	000d883a 	mov	r6,zero
    f7e8:	000b883a 	mov	r5,zero
    f7ec:	0007883a 	mov	r3,zero
    f7f0:	0005883a 	mov	r2,zero
    f7f4:	003fe406 	br	f788 <__alt_data_end+0xfffcf788>
    f7f8:	0123c83a 	sub	r17,zero,r4
    f7fc:	003fd106 	br	f744 <__alt_data_end+0xfffcf744>

0000f800 <__floatunsidf>:
    f800:	defffe04 	addi	sp,sp,-8
    f804:	dc000015 	stw	r16,0(sp)
    f808:	dfc00115 	stw	ra,4(sp)
    f80c:	2021883a 	mov	r16,r4
    f810:	20002226 	beq	r4,zero,f89c <__floatunsidf+0x9c>
    f814:	000f8a80 	call	f8a8 <__clzsi2>
    f818:	01010784 	movi	r4,1054
    f81c:	2089c83a 	sub	r4,r4,r2
    f820:	01810cc4 	movi	r6,1075
    f824:	310dc83a 	sub	r6,r6,r4
    f828:	00c007c4 	movi	r3,31
    f82c:	1980120e 	bge	r3,r6,f878 <__floatunsidf+0x78>
    f830:	00c104c4 	movi	r3,1043
    f834:	1907c83a 	sub	r3,r3,r4
    f838:	80ca983a 	sll	r5,r16,r3
    f83c:	00800434 	movhi	r2,16
    f840:	10bfffc4 	addi	r2,r2,-1
    f844:	2101ffcc 	andi	r4,r4,2047
    f848:	0021883a 	mov	r16,zero
    f84c:	288a703a 	and	r5,r5,r2
    f850:	2008953a 	slli	r4,r4,20
    f854:	00c00434 	movhi	r3,16
    f858:	18ffffc4 	addi	r3,r3,-1
    f85c:	28c6703a 	and	r3,r5,r3
    f860:	8005883a 	mov	r2,r16
    f864:	1906b03a 	or	r3,r3,r4
    f868:	dfc00117 	ldw	ra,4(sp)
    f86c:	dc000017 	ldw	r16,0(sp)
    f870:	dec00204 	addi	sp,sp,8
    f874:	f800283a 	ret
    f878:	00c002c4 	movi	r3,11
    f87c:	188bc83a 	sub	r5,r3,r2
    f880:	814ad83a 	srl	r5,r16,r5
    f884:	00c00434 	movhi	r3,16
    f888:	18ffffc4 	addi	r3,r3,-1
    f88c:	81a0983a 	sll	r16,r16,r6
    f890:	2101ffcc 	andi	r4,r4,2047
    f894:	28ca703a 	and	r5,r5,r3
    f898:	003fed06 	br	f850 <__alt_data_end+0xfffcf850>
    f89c:	0009883a 	mov	r4,zero
    f8a0:	000b883a 	mov	r5,zero
    f8a4:	003fea06 	br	f850 <__alt_data_end+0xfffcf850>

0000f8a8 <__clzsi2>:
    f8a8:	00bfffd4 	movui	r2,65535
    f8ac:	11000536 	bltu	r2,r4,f8c4 <__clzsi2+0x1c>
    f8b0:	00803fc4 	movi	r2,255
    f8b4:	11000f36 	bltu	r2,r4,f8f4 <__clzsi2+0x4c>
    f8b8:	00800804 	movi	r2,32
    f8bc:	0007883a 	mov	r3,zero
    f8c0:	00000506 	br	f8d8 <__clzsi2+0x30>
    f8c4:	00804034 	movhi	r2,256
    f8c8:	10bfffc4 	addi	r2,r2,-1
    f8cc:	11000c2e 	bgeu	r2,r4,f900 <__clzsi2+0x58>
    f8d0:	00800204 	movi	r2,8
    f8d4:	00c00604 	movi	r3,24
    f8d8:	20c8d83a 	srl	r4,r4,r3
    f8dc:	00c00074 	movhi	r3,1
    f8e0:	18c10e04 	addi	r3,r3,1080
    f8e4:	1909883a 	add	r4,r3,r4
    f8e8:	20c00003 	ldbu	r3,0(r4)
    f8ec:	10c5c83a 	sub	r2,r2,r3
    f8f0:	f800283a 	ret
    f8f4:	00800604 	movi	r2,24
    f8f8:	00c00204 	movi	r3,8
    f8fc:	003ff606 	br	f8d8 <__alt_data_end+0xfffcf8d8>
    f900:	00800404 	movi	r2,16
    f904:	1007883a 	mov	r3,r2
    f908:	003ff306 	br	f8d8 <__alt_data_end+0xfffcf8d8>

0000f90c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    f90c:	defffd04 	addi	sp,sp,-12
    f910:	df000215 	stw	fp,8(sp)
    f914:	df000204 	addi	fp,sp,8
    f918:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    f91c:	0001883a 	nop
    f920:	e0bfff17 	ldw	r2,-4(fp)
    f924:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    f928:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    f92c:	10000226 	beq	r2,zero,f938 <_exit+0x2c>
    ALT_SIM_FAIL();
    f930:	002af070 	cmpltui	zero,zero,43969
    f934:	00000106 	br	f93c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    f938:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    f93c:	003fff06 	br	f93c <__alt_data_end+0xfffcf93c>

0000f940 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f940:	defffe04 	addi	sp,sp,-8
    f944:	dfc00115 	stw	ra,4(sp)
    f948:	df000015 	stw	fp,0(sp)
    f94c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f950:	d0a00717 	ldw	r2,-32740(gp)
    f954:	10000326 	beq	r2,zero,f964 <alt_get_errno+0x24>
    f958:	d0a00717 	ldw	r2,-32740(gp)
    f95c:	103ee83a 	callr	r2
    f960:	00000106 	br	f968 <alt_get_errno+0x28>
    f964:	d0a6d604 	addi	r2,gp,-25768
}
    f968:	e037883a 	mov	sp,fp
    f96c:	dfc00117 	ldw	ra,4(sp)
    f970:	df000017 	ldw	fp,0(sp)
    f974:	dec00204 	addi	sp,sp,8
    f978:	f800283a 	ret

0000f97c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    f97c:	defffb04 	addi	sp,sp,-20
    f980:	dfc00415 	stw	ra,16(sp)
    f984:	df000315 	stw	fp,12(sp)
    f988:	df000304 	addi	fp,sp,12
    f98c:	e13ffe15 	stw	r4,-8(fp)
    f990:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    f994:	e0bffe17 	ldw	r2,-8(fp)
    f998:	10000616 	blt	r2,zero,f9b4 <fstat+0x38>
    f99c:	e0bffe17 	ldw	r2,-8(fp)
    f9a0:	10c00324 	muli	r3,r2,12
    f9a4:	00800074 	movhi	r2,1
    f9a8:	10857004 	addi	r2,r2,5568
    f9ac:	1885883a 	add	r2,r3,r2
    f9b0:	00000106 	br	f9b8 <fstat+0x3c>
    f9b4:	0005883a 	mov	r2,zero
    f9b8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    f9bc:	e0bffd17 	ldw	r2,-12(fp)
    f9c0:	10001026 	beq	r2,zero,fa04 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    f9c4:	e0bffd17 	ldw	r2,-12(fp)
    f9c8:	10800017 	ldw	r2,0(r2)
    f9cc:	10800817 	ldw	r2,32(r2)
    f9d0:	10000726 	beq	r2,zero,f9f0 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    f9d4:	e0bffd17 	ldw	r2,-12(fp)
    f9d8:	10800017 	ldw	r2,0(r2)
    f9dc:	10800817 	ldw	r2,32(r2)
    f9e0:	e17fff17 	ldw	r5,-4(fp)
    f9e4:	e13ffd17 	ldw	r4,-12(fp)
    f9e8:	103ee83a 	callr	r2
    f9ec:	00000a06 	br	fa18 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    f9f0:	e0bfff17 	ldw	r2,-4(fp)
    f9f4:	00c80004 	movi	r3,8192
    f9f8:	10c00115 	stw	r3,4(r2)
      return 0;
    f9fc:	0005883a 	mov	r2,zero
    fa00:	00000506 	br	fa18 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    fa04:	000f9400 	call	f940 <alt_get_errno>
    fa08:	1007883a 	mov	r3,r2
    fa0c:	00801444 	movi	r2,81
    fa10:	18800015 	stw	r2,0(r3)
    return -1;
    fa14:	00bfffc4 	movi	r2,-1
  }
}
    fa18:	e037883a 	mov	sp,fp
    fa1c:	dfc00117 	ldw	ra,4(sp)
    fa20:	df000017 	ldw	fp,0(sp)
    fa24:	dec00204 	addi	sp,sp,8
    fa28:	f800283a 	ret

0000fa2c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    fa2c:	defffe04 	addi	sp,sp,-8
    fa30:	dfc00115 	stw	ra,4(sp)
    fa34:	df000015 	stw	fp,0(sp)
    fa38:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    fa3c:	d0a00717 	ldw	r2,-32740(gp)
    fa40:	10000326 	beq	r2,zero,fa50 <alt_get_errno+0x24>
    fa44:	d0a00717 	ldw	r2,-32740(gp)
    fa48:	103ee83a 	callr	r2
    fa4c:	00000106 	br	fa54 <alt_get_errno+0x28>
    fa50:	d0a6d604 	addi	r2,gp,-25768
}
    fa54:	e037883a 	mov	sp,fp
    fa58:	dfc00117 	ldw	ra,4(sp)
    fa5c:	df000017 	ldw	fp,0(sp)
    fa60:	dec00204 	addi	sp,sp,8
    fa64:	f800283a 	ret

0000fa68 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    fa68:	deffed04 	addi	sp,sp,-76
    fa6c:	dfc01215 	stw	ra,72(sp)
    fa70:	df001115 	stw	fp,68(sp)
    fa74:	df001104 	addi	fp,sp,68
    fa78:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    fa7c:	e0bfff17 	ldw	r2,-4(fp)
    fa80:	10000616 	blt	r2,zero,fa9c <isatty+0x34>
    fa84:	e0bfff17 	ldw	r2,-4(fp)
    fa88:	10c00324 	muli	r3,r2,12
    fa8c:	00800074 	movhi	r2,1
    fa90:	10857004 	addi	r2,r2,5568
    fa94:	1885883a 	add	r2,r3,r2
    fa98:	00000106 	br	faa0 <isatty+0x38>
    fa9c:	0005883a 	mov	r2,zero
    faa0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    faa4:	e0bfef17 	ldw	r2,-68(fp)
    faa8:	10000e26 	beq	r2,zero,fae4 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    faac:	e0bfef17 	ldw	r2,-68(fp)
    fab0:	10800017 	ldw	r2,0(r2)
    fab4:	10800817 	ldw	r2,32(r2)
    fab8:	1000021e 	bne	r2,zero,fac4 <isatty+0x5c>
    {
      return 1;
    fabc:	00800044 	movi	r2,1
    fac0:	00000d06 	br	faf8 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    fac4:	e0bff004 	addi	r2,fp,-64
    fac8:	100b883a 	mov	r5,r2
    facc:	e13fff17 	ldw	r4,-4(fp)
    fad0:	000f97c0 	call	f97c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    fad4:	e0bff117 	ldw	r2,-60(fp)
    fad8:	10880020 	cmpeqi	r2,r2,8192
    fadc:	10803fcc 	andi	r2,r2,255
    fae0:	00000506 	br	faf8 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    fae4:	000fa2c0 	call	fa2c <alt_get_errno>
    fae8:	1007883a 	mov	r3,r2
    faec:	00801444 	movi	r2,81
    faf0:	18800015 	stw	r2,0(r3)
    return 0;
    faf4:	0005883a 	mov	r2,zero
  }
}
    faf8:	e037883a 	mov	sp,fp
    fafc:	dfc00117 	ldw	ra,4(sp)
    fb00:	df000017 	ldw	fp,0(sp)
    fb04:	dec00204 	addi	sp,sp,8
    fb08:	f800283a 	ret

0000fb0c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    fb0c:	defffe04 	addi	sp,sp,-8
    fb10:	dfc00115 	stw	ra,4(sp)
    fb14:	df000015 	stw	fp,0(sp)
    fb18:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    fb1c:	d0a00717 	ldw	r2,-32740(gp)
    fb20:	10000326 	beq	r2,zero,fb30 <alt_get_errno+0x24>
    fb24:	d0a00717 	ldw	r2,-32740(gp)
    fb28:	103ee83a 	callr	r2
    fb2c:	00000106 	br	fb34 <alt_get_errno+0x28>
    fb30:	d0a6d604 	addi	r2,gp,-25768
}
    fb34:	e037883a 	mov	sp,fp
    fb38:	dfc00117 	ldw	ra,4(sp)
    fb3c:	df000017 	ldw	fp,0(sp)
    fb40:	dec00204 	addi	sp,sp,8
    fb44:	f800283a 	ret

0000fb48 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    fb48:	defff904 	addi	sp,sp,-28
    fb4c:	dfc00615 	stw	ra,24(sp)
    fb50:	df000515 	stw	fp,20(sp)
    fb54:	df000504 	addi	fp,sp,20
    fb58:	e13ffd15 	stw	r4,-12(fp)
    fb5c:	e17ffe15 	stw	r5,-8(fp)
    fb60:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    fb64:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    fb68:	e0bffd17 	ldw	r2,-12(fp)
    fb6c:	10000616 	blt	r2,zero,fb88 <lseek+0x40>
    fb70:	e0bffd17 	ldw	r2,-12(fp)
    fb74:	10c00324 	muli	r3,r2,12
    fb78:	00800074 	movhi	r2,1
    fb7c:	10857004 	addi	r2,r2,5568
    fb80:	1885883a 	add	r2,r3,r2
    fb84:	00000106 	br	fb8c <lseek+0x44>
    fb88:	0005883a 	mov	r2,zero
    fb8c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    fb90:	e0bffc17 	ldw	r2,-16(fp)
    fb94:	10001026 	beq	r2,zero,fbd8 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    fb98:	e0bffc17 	ldw	r2,-16(fp)
    fb9c:	10800017 	ldw	r2,0(r2)
    fba0:	10800717 	ldw	r2,28(r2)
    fba4:	10000926 	beq	r2,zero,fbcc <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    fba8:	e0bffc17 	ldw	r2,-16(fp)
    fbac:	10800017 	ldw	r2,0(r2)
    fbb0:	10800717 	ldw	r2,28(r2)
    fbb4:	e1bfff17 	ldw	r6,-4(fp)
    fbb8:	e17ffe17 	ldw	r5,-8(fp)
    fbbc:	e13ffc17 	ldw	r4,-16(fp)
    fbc0:	103ee83a 	callr	r2
    fbc4:	e0bffb15 	stw	r2,-20(fp)
    fbc8:	00000506 	br	fbe0 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    fbcc:	00bfde84 	movi	r2,-134
    fbd0:	e0bffb15 	stw	r2,-20(fp)
    fbd4:	00000206 	br	fbe0 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    fbd8:	00bfebc4 	movi	r2,-81
    fbdc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    fbe0:	e0bffb17 	ldw	r2,-20(fp)
    fbe4:	1000070e 	bge	r2,zero,fc04 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    fbe8:	000fb0c0 	call	fb0c <alt_get_errno>
    fbec:	1007883a 	mov	r3,r2
    fbf0:	e0bffb17 	ldw	r2,-20(fp)
    fbf4:	0085c83a 	sub	r2,zero,r2
    fbf8:	18800015 	stw	r2,0(r3)
    rc = -1;
    fbfc:	00bfffc4 	movi	r2,-1
    fc00:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    fc04:	e0bffb17 	ldw	r2,-20(fp)
}
    fc08:	e037883a 	mov	sp,fp
    fc0c:	dfc00117 	ldw	ra,4(sp)
    fc10:	df000017 	ldw	fp,0(sp)
    fc14:	dec00204 	addi	sp,sp,8
    fc18:	f800283a 	ret

0000fc1c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    fc1c:	defffe04 	addi	sp,sp,-8
    fc20:	df000115 	stw	fp,4(sp)
    fc24:	df000104 	addi	fp,sp,4
    fc28:	e13fff15 	stw	r4,-4(fp)
}
    fc2c:	0001883a 	nop
    fc30:	e037883a 	mov	sp,fp
    fc34:	df000017 	ldw	fp,0(sp)
    fc38:	dec00104 	addi	sp,sp,4
    fc3c:	f800283a 	ret

0000fc40 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    fc40:	defffe04 	addi	sp,sp,-8
    fc44:	df000115 	stw	fp,4(sp)
    fc48:	df000104 	addi	fp,sp,4
    fc4c:	e13fff15 	stw	r4,-4(fp)
}
    fc50:	0001883a 	nop
    fc54:	e037883a 	mov	sp,fp
    fc58:	df000017 	ldw	fp,0(sp)
    fc5c:	dec00104 	addi	sp,sp,4
    fc60:	f800283a 	ret

0000fc64 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    fc64:	defffe04 	addi	sp,sp,-8
    fc68:	dfc00115 	stw	ra,4(sp)
    fc6c:	df000015 	stw	fp,0(sp)
    fc70:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    fc74:	d0a00717 	ldw	r2,-32740(gp)
    fc78:	10000326 	beq	r2,zero,fc88 <alt_get_errno+0x24>
    fc7c:	d0a00717 	ldw	r2,-32740(gp)
    fc80:	103ee83a 	callr	r2
    fc84:	00000106 	br	fc8c <alt_get_errno+0x28>
    fc88:	d0a6d604 	addi	r2,gp,-25768
}
    fc8c:	e037883a 	mov	sp,fp
    fc90:	dfc00117 	ldw	ra,4(sp)
    fc94:	df000017 	ldw	fp,0(sp)
    fc98:	dec00204 	addi	sp,sp,8
    fc9c:	f800283a 	ret

0000fca0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    fca0:	defff904 	addi	sp,sp,-28
    fca4:	dfc00615 	stw	ra,24(sp)
    fca8:	df000515 	stw	fp,20(sp)
    fcac:	df000504 	addi	fp,sp,20
    fcb0:	e13ffd15 	stw	r4,-12(fp)
    fcb4:	e17ffe15 	stw	r5,-8(fp)
    fcb8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    fcbc:	e0bffd17 	ldw	r2,-12(fp)
    fcc0:	10000616 	blt	r2,zero,fcdc <read+0x3c>
    fcc4:	e0bffd17 	ldw	r2,-12(fp)
    fcc8:	10c00324 	muli	r3,r2,12
    fccc:	00800074 	movhi	r2,1
    fcd0:	10857004 	addi	r2,r2,5568
    fcd4:	1885883a 	add	r2,r3,r2
    fcd8:	00000106 	br	fce0 <read+0x40>
    fcdc:	0005883a 	mov	r2,zero
    fce0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    fce4:	e0bffb17 	ldw	r2,-20(fp)
    fce8:	10002226 	beq	r2,zero,fd74 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    fcec:	e0bffb17 	ldw	r2,-20(fp)
    fcf0:	10800217 	ldw	r2,8(r2)
    fcf4:	108000cc 	andi	r2,r2,3
    fcf8:	10800060 	cmpeqi	r2,r2,1
    fcfc:	1000181e 	bne	r2,zero,fd60 <read+0xc0>
        (fd->dev->read))
    fd00:	e0bffb17 	ldw	r2,-20(fp)
    fd04:	10800017 	ldw	r2,0(r2)
    fd08:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    fd0c:	10001426 	beq	r2,zero,fd60 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    fd10:	e0bffb17 	ldw	r2,-20(fp)
    fd14:	10800017 	ldw	r2,0(r2)
    fd18:	10800517 	ldw	r2,20(r2)
    fd1c:	e0ffff17 	ldw	r3,-4(fp)
    fd20:	180d883a 	mov	r6,r3
    fd24:	e17ffe17 	ldw	r5,-8(fp)
    fd28:	e13ffb17 	ldw	r4,-20(fp)
    fd2c:	103ee83a 	callr	r2
    fd30:	e0bffc15 	stw	r2,-16(fp)
    fd34:	e0bffc17 	ldw	r2,-16(fp)
    fd38:	1000070e 	bge	r2,zero,fd58 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    fd3c:	000fc640 	call	fc64 <alt_get_errno>
    fd40:	1007883a 	mov	r3,r2
    fd44:	e0bffc17 	ldw	r2,-16(fp)
    fd48:	0085c83a 	sub	r2,zero,r2
    fd4c:	18800015 	stw	r2,0(r3)
          return -1;
    fd50:	00bfffc4 	movi	r2,-1
    fd54:	00000c06 	br	fd88 <read+0xe8>
        }
        return rval;
    fd58:	e0bffc17 	ldw	r2,-16(fp)
    fd5c:	00000a06 	br	fd88 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    fd60:	000fc640 	call	fc64 <alt_get_errno>
    fd64:	1007883a 	mov	r3,r2
    fd68:	00800344 	movi	r2,13
    fd6c:	18800015 	stw	r2,0(r3)
    fd70:	00000406 	br	fd84 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    fd74:	000fc640 	call	fc64 <alt_get_errno>
    fd78:	1007883a 	mov	r3,r2
    fd7c:	00801444 	movi	r2,81
    fd80:	18800015 	stw	r2,0(r3)
  }
  return -1;
    fd84:	00bfffc4 	movi	r2,-1
}
    fd88:	e037883a 	mov	sp,fp
    fd8c:	dfc00117 	ldw	ra,4(sp)
    fd90:	df000017 	ldw	fp,0(sp)
    fd94:	dec00204 	addi	sp,sp,8
    fd98:	f800283a 	ret

0000fd9c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    fd9c:	defff904 	addi	sp,sp,-28
    fda0:	df000615 	stw	fp,24(sp)
    fda4:	df000604 	addi	fp,sp,24
    fda8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    fdac:	0005303a 	rdctl	r2,status
    fdb0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    fdb4:	e0fffe17 	ldw	r3,-8(fp)
    fdb8:	00bfff84 	movi	r2,-2
    fdbc:	1884703a 	and	r2,r3,r2
    fdc0:	1001703a 	wrctl	status,r2
  
  return context;
    fdc4:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    fdc8:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    fdcc:	d0a01117 	ldw	r2,-32700(gp)
    fdd0:	10c000c4 	addi	r3,r2,3
    fdd4:	00bfff04 	movi	r2,-4
    fdd8:	1884703a 	and	r2,r3,r2
    fddc:	d0a01115 	stw	r2,-32700(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    fde0:	d0e01117 	ldw	r3,-32700(gp)
    fde4:	e0bfff17 	ldw	r2,-4(fp)
    fde8:	1887883a 	add	r3,r3,r2
    fdec:	00800134 	movhi	r2,4
    fdf0:	10800004 	addi	r2,r2,0
    fdf4:	10c0062e 	bgeu	r2,r3,fe10 <sbrk+0x74>
    fdf8:	e0bffb17 	ldw	r2,-20(fp)
    fdfc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    fe00:	e0bffa17 	ldw	r2,-24(fp)
    fe04:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    fe08:	00bfffc4 	movi	r2,-1
    fe0c:	00000b06 	br	fe3c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    fe10:	d0a01117 	ldw	r2,-32700(gp)
    fe14:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    fe18:	d0e01117 	ldw	r3,-32700(gp)
    fe1c:	e0bfff17 	ldw	r2,-4(fp)
    fe20:	1885883a 	add	r2,r3,r2
    fe24:	d0a01115 	stw	r2,-32700(gp)
    fe28:	e0bffb17 	ldw	r2,-20(fp)
    fe2c:	e0bffc15 	stw	r2,-16(fp)
    fe30:	e0bffc17 	ldw	r2,-16(fp)
    fe34:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    fe38:	e0bffd17 	ldw	r2,-12(fp)
} 
    fe3c:	e037883a 	mov	sp,fp
    fe40:	df000017 	ldw	fp,0(sp)
    fe44:	dec00104 	addi	sp,sp,4
    fe48:	f800283a 	ret

0000fe4c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    fe4c:	defffe04 	addi	sp,sp,-8
    fe50:	dfc00115 	stw	ra,4(sp)
    fe54:	df000015 	stw	fp,0(sp)
    fe58:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    fe5c:	d0a00717 	ldw	r2,-32740(gp)
    fe60:	10000326 	beq	r2,zero,fe70 <alt_get_errno+0x24>
    fe64:	d0a00717 	ldw	r2,-32740(gp)
    fe68:	103ee83a 	callr	r2
    fe6c:	00000106 	br	fe74 <alt_get_errno+0x28>
    fe70:	d0a6d604 	addi	r2,gp,-25768
}
    fe74:	e037883a 	mov	sp,fp
    fe78:	dfc00117 	ldw	ra,4(sp)
    fe7c:	df000017 	ldw	fp,0(sp)
    fe80:	dec00204 	addi	sp,sp,8
    fe84:	f800283a 	ret

0000fe88 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    fe88:	defff904 	addi	sp,sp,-28
    fe8c:	dfc00615 	stw	ra,24(sp)
    fe90:	df000515 	stw	fp,20(sp)
    fe94:	df000504 	addi	fp,sp,20
    fe98:	e13ffd15 	stw	r4,-12(fp)
    fe9c:	e17ffe15 	stw	r5,-8(fp)
    fea0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    fea4:	e0bffd17 	ldw	r2,-12(fp)
    fea8:	10000616 	blt	r2,zero,fec4 <write+0x3c>
    feac:	e0bffd17 	ldw	r2,-12(fp)
    feb0:	10c00324 	muli	r3,r2,12
    feb4:	00800074 	movhi	r2,1
    feb8:	10857004 	addi	r2,r2,5568
    febc:	1885883a 	add	r2,r3,r2
    fec0:	00000106 	br	fec8 <write+0x40>
    fec4:	0005883a 	mov	r2,zero
    fec8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    fecc:	e0bffb17 	ldw	r2,-20(fp)
    fed0:	10002126 	beq	r2,zero,ff58 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    fed4:	e0bffb17 	ldw	r2,-20(fp)
    fed8:	10800217 	ldw	r2,8(r2)
    fedc:	108000cc 	andi	r2,r2,3
    fee0:	10001826 	beq	r2,zero,ff44 <write+0xbc>
    fee4:	e0bffb17 	ldw	r2,-20(fp)
    fee8:	10800017 	ldw	r2,0(r2)
    feec:	10800617 	ldw	r2,24(r2)
    fef0:	10001426 	beq	r2,zero,ff44 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    fef4:	e0bffb17 	ldw	r2,-20(fp)
    fef8:	10800017 	ldw	r2,0(r2)
    fefc:	10800617 	ldw	r2,24(r2)
    ff00:	e0ffff17 	ldw	r3,-4(fp)
    ff04:	180d883a 	mov	r6,r3
    ff08:	e17ffe17 	ldw	r5,-8(fp)
    ff0c:	e13ffb17 	ldw	r4,-20(fp)
    ff10:	103ee83a 	callr	r2
    ff14:	e0bffc15 	stw	r2,-16(fp)
    ff18:	e0bffc17 	ldw	r2,-16(fp)
    ff1c:	1000070e 	bge	r2,zero,ff3c <write+0xb4>
      {
        ALT_ERRNO = -rval;
    ff20:	000fe4c0 	call	fe4c <alt_get_errno>
    ff24:	1007883a 	mov	r3,r2
    ff28:	e0bffc17 	ldw	r2,-16(fp)
    ff2c:	0085c83a 	sub	r2,zero,r2
    ff30:	18800015 	stw	r2,0(r3)
        return -1;
    ff34:	00bfffc4 	movi	r2,-1
    ff38:	00000c06 	br	ff6c <write+0xe4>
      }
      return rval;
    ff3c:	e0bffc17 	ldw	r2,-16(fp)
    ff40:	00000a06 	br	ff6c <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    ff44:	000fe4c0 	call	fe4c <alt_get_errno>
    ff48:	1007883a 	mov	r3,r2
    ff4c:	00800344 	movi	r2,13
    ff50:	18800015 	stw	r2,0(r3)
    ff54:	00000406 	br	ff68 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    ff58:	000fe4c0 	call	fe4c <alt_get_errno>
    ff5c:	1007883a 	mov	r3,r2
    ff60:	00801444 	movi	r2,81
    ff64:	18800015 	stw	r2,0(r3)
  }
  return -1;
    ff68:	00bfffc4 	movi	r2,-1
}
    ff6c:	e037883a 	mov	sp,fp
    ff70:	dfc00117 	ldw	ra,4(sp)
    ff74:	df000017 	ldw	fp,0(sp)
    ff78:	dec00204 	addi	sp,sp,8
    ff7c:	f800283a 	ret

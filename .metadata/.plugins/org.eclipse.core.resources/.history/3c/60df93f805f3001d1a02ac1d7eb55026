/* Audio system main file
 * To monitor terminal in powershell:
 * nios2-terminal --device 2 --instance 0

 * To download code to board
 * nios2-download -g SysAudio.elf --device 2 --instance 0
 */

#include <stdio.h>
#include "system.h"
#include "io.h"
#include <stdint.h>
#include <unistd.h>
#include <string.h>
#include "altera_avalon_mailbox_simple.h"
#include <altera_avalon_performance_counter.h>
#include "altera_up_avalon_audio.h"

// PIO definitions for the interrupt handling on the switches
#define PIO_IntrSwitch_Data	0
#define PIO_IntrSwitch_IRQEN	4*2
#define PIO_IntrSwitch_IRQFLAG	4*3


// ----------------- Mailbox functions ----------------------------------------

void send_callback(void* report, int status)
{
	if(!status)
	{
		printf("Sending completed.\n");
	}
	else
	{
		printf("Sending error.\n");
	}
}

void send_mail(alt_u32 start_addr, alt_u32 storage_length)
{
	// Load mailbox
	altera_avalon_mailbox_dev* mailbox_AudioToSigProc = altera_avalon_mailbox_open("/dev/Mailbox_AudioToSigProc", send_callback, NULL);
	// Create mail "envelope"
	alt_u32 mail[2] = {start_addr, storage_length};
	// Send message
	altera_avalon_mailbox_send(mailbox_AudioToSigProc, mail, 0, POLL);
	// Close mailbox
	altera_avalon_mailbox_close(mailbox_AudioToSigProc);
}

void receive_callback(void* message)
{
	if(message != NULL)
	{
		printf("Receiving completed.\n");
	}
	else
	{
		printf("Receiving error.\n");
	}
}

void receive_mail()
{
	// Load mailbox
	altera_avalon_mailbox_dev* mailbox_SigProcToAudio = altera_avalon_mailbox_open("/dev/Mailbox_SigProcToAudio", NULL, receive_callback);
	// Message storage array
	alt_u32 mail[2];
	altera_avalon_mailbox_retrieve_poll(mailbox_SigProcToAudio, mail, 0);
	alt_dcache_flush_all();
	// TODO: mail now contains the received message, handle it appropriately
}

// -------------------- Audio functions ---------------------------------------------------

void setup_audio(alt_up_audio_dev * audio_dev)
{
	// open the Audio port
	audio_dev = alt_up_audio_open_dev ("/dev/SysAudio_Audio_Core");
	if ( audio_dev == NULL)
	alt_printf ("Error: could not open audio device \n");
	else
	alt_printf ("Opened audio device \n");
}

void record_audio(int *start_addr_ptr, int record_words)
{
	int words_recorded = 0;
	while( words_recorded < record_words)
	{
		int fifospace = alt_up_audio_read_fifo_avail (audio_dev, ALT_UP_AUDIO_RIGHT);
		int current_iter_count = 0;
		// Check for available data
		if ( fifospace > 95 )
		{
			words_recorded = words_recorded + alt_up_audio_record_l(audio_dev, start_addr_ptr+words_recorded, fifospace);
		}
	}
}

void play_audio(int *start_addr_ptr, int play_words)
{
	int words_played = 0;
	while( words_played < play_words - 128)
	{
		unsigned int space = alt_up_audio_write_fifo_space (audio, ALT_UP_AUDIO_LEFT);
		if (space > BUF_THRESHOLD)
		{
			words_played = words_played + alt_up_audio_write_fifo(audio_dev, start_addr_ptr + words_played, space, ALT_UP_AUDIO_LEFT);
		}
	}

	while(alt_up_audio_write_fifo_space(audio_dev, ALT_UP_AUDIO_LEFT) < (play_words - words_played)){}
	alt_up_audio_write_fifo(audio_dev, start_addr_ptr + words_played, (play_words - words_played), ALT_UP_AUDIO_LEFT);
}

void test_audio()
{
	/* used for audio record/playback */
	unsigned int l_buf;
	/* read and echo audio data */
	while(1)
	{
		int fifospace = alt_up_audio_read_fifo_avail (audio_dev, ALT_UP_AUDIO_LEFT);
		if ( fifospace > 0 ) // check if data is available
		{
			// read audio buffer
			alt_up_audio_read_fifo (audio_dev, &(l_buf), 1, ALT_UP_AUDIO_LEFT);
			// write audio buffer
			alt_up_audio_write_fifo (audio_dev, &(l_buf), 1, ALT_UP_AUDIO_LEFT);
		}
	}
}

// ----------------- Interrupt and task choosing functions -------------------------

void choose_task(int task)
{
	if(task == 1)
	{
		// First switch (SW0) Record audio for a second
	}
	else if(task == 2)
	{
		// Second switch (SW1) Playback processed audio
	}
	else if(task == 4)
	{
		// Third switch (SW2)
		// Etc. add as needed...
	}
}

void isr_switches(void* context)
{
	// Read interrupt source
	uint8_t pinvals = IORD_8DIRECT(PIO_SWITCHES_BASE, PIO__IntrSwitch_IRQFLAG);
	// Save choice
	choice = (int)pinvals;
	// Clear the interrupt flag
	IOWR_8DIRECT(PIO_SWITCHES_BASE, PIO__IntrSwitch_IRQFLAG, pinvals);
}

void setup_switch_interrupts(uint8_t chosen_switches)
{
	// Setup interrupts on the chosen switches
	IOWR_8DIRECT(PIO_SWITCHES_BASE, PIO_IntrSwitch_IRQEN, chosen_switches);
	alt_ic_isr_register(PIO_SWITCHES_IRQ_INTERRUPT_CONTROLLER_ID, PIO_SWITCHES_IRQ, isr_switches, NULL, NULL);
	return;
}

// ----------------------- Main function ----------------------------------

int main()
{
	// Setup audio core
	alt_up_audio_dev * audio_dev;
	setup_audio(audio_dev);
	// Setup interrupts on the first 2 switches
	setup_switch_interrupts(0x3);

  	return 0;
}

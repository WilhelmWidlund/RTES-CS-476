#include <stdio.h>
#include "sys/alt_stdio.h"
#include "sys/alt_cache.h"
//#include <altera_avalon_performance_counter.h>
#include "io.h"
#include "system.h"
#include <stdint.h>


// Define a test number and it's expected result from the custom instruction
uint32_t test = 0x12AAAAEF;
uint32_t truth = 0xEF555512;

// Define tables for testing 1000 long data
uint32_t in_1000[1000];
uint32_t out_1000[1000];

void init_tables()
{
	int i;
	for(i=0; i<1000; i++)
	{
		in_1000[i] = test;
	}
	alt_dcache_flush_all();
}

uint32_t software_custom_inst(uint32_t input)
{
	uint32_t output;
	output = (input<<24) & 0xff000000;
	output = output + ((input & 0xff000000)>>24);
	uint32_t sought_bit;
	int i;
	for(i=8; i<24; i++)
	{
		sought_bit = (input<<i)&0x80000000;
		output = output + (sought_bit>>(31 - i));
	}
	return output;
}

int test_software_once(uint32_t input, uint32_t exp_output)
{
	uint32_t result;
	result = software_custom_inst(input);
	return result == exp_output;
}

int test_software_1000(uint32_t* indata, uint32_t truth)
{
	init_tables();

}

int main()
{
	// Test software implementation once
	int result = test_software_once(test, truth);
	alt_printf("It gives %x \n", result);
}


cpu_1_project.elf:     file format elf32-littlenios2
cpu_1_project.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04020244

Program Header:
    LOAD off    0x00001000 vaddr 0x04020000 paddr 0x04020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04020020 paddr 0x04020020 align 2**12
         filesz 0x00011650 memsz 0x00011650 flags r-x
    LOAD off    0x00012670 vaddr 0x04031670 paddr 0x0403321c align 2**12
         filesz 0x00001bac memsz 0x00001bac flags rw-
    LOAD off    0x00014dc8 vaddr 0x04034dc8 paddr 0x04034dc8 align 2**12
         filesz 0x00000000 memsz 0x00000164 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04020000  04020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  04020020  04020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00010cb4  04020244  04020244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000778  04030ef8  04030ef8  00011ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bac  04031670  0403321c  00012670  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000164  04034dc8  04034dc8  00014dc8  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_controller_2 00000000  00000000  00000000  0001421c  2**0
                  CONTENTS
  7 .onchip_memory_1 00000000  04034f2c  04034f2c  0001421c  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001421c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000fe8  00000000  00000000  00014240  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00025ff3  00000000  00000000  00015228  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00009cc0  00000000  00000000  0003b21b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c2bf  00000000  00000000  00044edb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000274c  00000000  00000000  0005119c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003ef3  00000000  00000000  000538e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00017b4d  00000000  00000000  000577db  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  0006f328  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001920  00000000  00000000  0006f388  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00074566  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  00074569  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0007456e  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0007456f  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  00074570  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  0007457b  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  00074586  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000a  00000000  00000000  00074591  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000017  00000000  00000000  0007459b  2**0
                  CONTENTS, READONLY
 27 .jdi          0000b01f  00000000  00000000  000745b2  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     000c44d7  00000000  00000000  0007f5d1  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04020000 l    d  .entry	00000000 .entry
04020020 l    d  .exceptions	00000000 .exceptions
04020244 l    d  .text	00000000 .text
04030ef8 l    d  .rodata	00000000 .rodata
04031670 l    d  .rwdata	00000000 .rwdata
04034dc8 l    d  .bss	00000000 .bss
00000000 l    d  .sdram_controller_2	00000000 .sdram_controller_2
04034f2c l    d  .onchip_memory_1	00000000 .onchip_memory_1
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/RTES/lab3/sw/nios/cpu_1_project_bsp//obj/HAL/src/crt0.o
0402028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0403125e l     O .rodata	00000010 zeroes.4404
04022d94 l     F .text	000000bc __sbprintf
0403126e l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
04022fa4 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
04024ad4 l     F .text	00000008 __fp_unlock
04024ae8 l     F .text	0000019c __sinit.part.1
04024c84 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
04031670 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
04031ab4 l     O .rwdata	00000020 lc_ctype_charset
04031a94 l     O .rwdata	00000020 lc_message_charset
04031ad4 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
040312a0 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
040281e8 l     F .text	000000fc __sprint_r.part.0
040313d4 l     O .rodata	00000010 blanks.4348
040313c4 l     O .rodata	00000010 zeroes.4349
04029774 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0402d430 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0402d584 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0402d5b0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0402d93c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0402da1c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0402db08 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0402dcdc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
04033200 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0402df58 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0402e08c l     F .text	00000034 alt_dev_reg
0402e0c0 l     F .text	0000003c alt_get_errno
0402e0fc l     F .text	00000068 alt_avalon_mutex_reg
040320bc l     O .rwdata	00001060 jtag_uart_1
0403311c l     O .rwdata	00000048 mailbox_simple_0
04033164 l     O .rwdata	00000010 mutex_0
04033174 l     O .rwdata	0000002c parallel_port_1
040331a0 l     O .rwdata	0000002c parallel_port_2
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0402e468 l     F .text	0000020c altera_avalon_jtag_uart_irq
0402e674 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mailbox_simple.c
0402ecac l     F .text	00000090 altera_avalon_mailbox_identify
0402ed3c l     F .text	00000078 altera_avalon_mailbox_post
0402edb4 l     F .text	00000138 altera_avalon_mailbox_simple_tx_isr
0402eeec l     F .text	000000a8 altera_avalon_mailbox_simple_rx_isr
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
0402f60c l     F .text	0000003c alt_get_errno
0402f648 l     F .text	0000007c alt_mutex_trylock
00000000 l    df *ABS*	00000000 altera_avalon_performance_counter.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0402fa64 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 perf_print_formatted_report.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0403005c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0403035c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0403049c l     F .text	0000003c alt_get_errno
040304d8 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_exit.c
04034df8 g     O .bss	00000004 alt_instruction_exception_handler
040209fc g     F .text	00000018 putchar
040276c4 g     F .text	00000074 _mprec_log10
0402f380 g     F .text	00000150 altera_avalon_mailbox_send
040277b0 g     F .text	0000008c __any_on
04029e68 g     F .text	00000054 _isatty_r
040312ac g     O .rodata	00000028 __mprec_tinytens
0402dc18 g     F .text	0000007c alt_main
04020a14 g     F .text	000000c0 _puts_r
04034e2c g     O .bss	00000100 alt_irq
04029ebc g     F .text	00000060 _lseek_r
0403321c g       *ABS*	00000000 __flash_rwdata_start
0402bf5c g     F .text	00000088 .hidden __eqdf2
04034f2c g       *ABS*	00000000 __alt_heap_start
040209b8 g     F .text	0000003c printf
04029f7c g     F .text	0000009c _wcrtomb_r
040280a8 g     F .text	0000005c __sseek
04024e24 g     F .text	00000010 __sinit
0402fa40 g     F .text	00000024 alt_get_cpu_freq
04029830 g     F .text	00000140 __swbuf_r
040258ec g     F .text	0000007c _setlocale_r
04024c8c g     F .text	00000068 __sfmoreglue
0402dcb8 g     F .text	00000024 __malloc_unlock
04020290 g     F .text	00000038 part1
040265bc g     F .text	0000015c memmove
0402fb58 g     F .text	00000280 perf_print_formatted_report
040205d0 g     F .text	00000140 hwcounter
04024e0c g     F .text	00000018 _cleanup
0402f780 g     F .text	00000040 altera_avalon_mutex_trylock
04026840 g     F .text	000000a8 _Balloc
0402bfe4 g     F .text	000000dc .hidden __gtdf2
04030894 g     F .text	00000024 altera_nios2_gen2_irq_init
04020000 g     F .entry	0000001c __reset
0402f814 g     F .text	00000074 altera_avalon_mutex_is_mine
04020020 g       *ABS*	00000000 __flash_exceptions_start
04029e0c g     F .text	0000005c _fstat_r
04034de4 g     O .bss	00000004 errno
04028024 g     F .text	00000008 __seofread
04020710 g     F .text	00000050 receive_callback
04034df0 g     O .bss	00000004 alt_argv
0403b1cc g       *ABS*	00000000 _gp
0402f4d0 g     F .text	0000013c altera_avalon_mailbox_retrieve_poll
0402df28 g     F .text	00000030 usleep
04031f3c g     O .rwdata	00000180 alt_fd_list
040209f4 g     F .text	00000008 _putchar_r
040301fc g     F .text	00000090 alt_find_dev
04026474 g     F .text	00000148 memcpy
04024adc g     F .text	0000000c _cleanup_r
0402d248 g     F .text	000000dc .hidden __floatsidf
04030420 g     F .text	0000007c alt_io_redirect
0402c0c0 g     F .text	000000f4 .hidden __ltdf2
04030ef8 g       *ABS*	00000000 __DTOR_END__
04020ad4 g     F .text	00000014 puts
040302c0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0402ef94 g     F .text	00000078 altera_avalon_mailbox_simple_init
04027f08 g     F .text	00000074 __fpclassifyd
04027620 g     F .text	000000a4 __ratio
04029758 g     F .text	0000001c __vfiprintf_internal
0402e86c g     F .text	0000021c altera_avalon_jtag_uart_read
04020988 g     F .text	00000030 _printf_r
0402ad0c g     F .text	00000064 .hidden __udivsi3
0402d978 g     F .text	000000a4 isatty
040312fc g     O .rodata	000000c8 __mprec_tens
0402f308 g     F .text	00000078 altera_avalon_mailbox_status
0402f1f0 g     F .text	00000118 altera_avalon_mailbox_close
04025968 g     F .text	0000000c __locale_charset
04030a64 g     F .text	00000090 alt_icache_flush
04034de0 g     O .bss	00000004 __malloc_top_pad
0402f9e0 g     F .text	00000040 perf_get_num_starts
040331d4 g     O .rwdata	00000004 __mb_cur_max
04025998 g     F .text	0000000c _localeconv_r
04026c4c g     F .text	0000003c __i2b
040252a8 g     F .text	000004bc __sfvwrite_r
04027f7c g     F .text	00000054 _sbrk_r
04029f1c g     F .text	00000060 _read_r
040331f4 g     O .rwdata	00000004 alt_max_fd
04029b00 g     F .text	000000f0 _fclose_r
04024aa4 g     F .text	00000030 fflush
04034ddc g     O .bss	00000004 __malloc_max_sbrked_mem
0402adc8 g     F .text	000008ac .hidden __adddf3
040273c8 g     F .text	0000010c __b2d
0402a6dc g     F .text	00000538 .hidden __umoddi3
0402db44 g     F .text	000000d4 lseek
0402f888 g     F .text	00000050 altera_avalon_mutex_first_lock
040331cc g     O .rwdata	00000004 _global_impure_ptr
040279a4 g     F .text	00000564 _realloc_r
04034f2c g       *ABS*	00000000 __bss_end
0402d84c g     F .text	000000f0 alt_iic_isr_register
0403078c g     F .text	00000108 alt_tick
0402a164 g     F .text	00000578 .hidden __udivdi3
04029d68 g     F .text	00000024 _fputwc_r
040312d4 g     O .rodata	00000028 __mprec_bigtens
04026a30 g     F .text	00000104 __s2b
0402d324 g     F .text	000000a8 .hidden __floatunsidf
04027108 g     F .text	00000060 __mcmp
04024e44 g     F .text	00000018 __fp_lock_all
0402d800 g     F .text	0000004c alt_ic_irq_enabled
040306f0 g     F .text	0000009c alt_alarm_stop
04034de8 g     O .bss	00000004 alt_irq_active
040200fc g     F .exceptions	000000d4 alt_irq_handler
04031f14 g     O .rwdata	00000028 alt_dev_null
040208c4 g     F .text	00000050 isr_buttons
0402048c g     F .text	00000144 hwmutex
0402f6c4 g     F .text	00000054 altera_avalon_mutex_open
0402d53c g     F .text	00000048 alt_dcache_flush_all
04026b34 g     F .text	00000068 __hi0bits
0402d1c8 g     F .text	00000080 .hidden __fixdfsi
0403321c g       *ABS*	00000000 __ram_rwdata_end
040331ec g     O .rwdata	00000008 alt_dev_list
0402df94 g     F .text	000000f8 write
0402783c g     F .text	000000a0 _putc_r
0403320c g     O .rwdata	00000008 alt_mutex_list
04031670 g       *ABS*	00000000 __ram_rodata_end
0402d5ec g     F .text	000000b0 fstat
0402c0c0 g     F .text	000000f4 .hidden __ledf2
04026e80 g     F .text	00000140 __pow5mult
040282fc g     F .text	0000145c ___vfiprintf_internal_r
04034dd4 g     O .bss	00000004 __nlocale_changed
0402ad70 g     F .text	00000058 .hidden __umodsi3
04034f2c g       *ABS*	00000000 end
0402e3a8 g     F .text	000000c0 altera_avalon_jtag_uart_init
040201d0 g     F .exceptions	00000074 alt_instruction_exception_entry
04030ef8 g       *ABS*	00000000 __CTOR_LIST__
04040000 g       *ABS*	00000000 __alt_stack_pointer
0402fadc g     F .text	0000007c alt_avalon_timer_sc_init
0402d3cc g     F .text	00000064 .hidden __clzsi2
0402ea88 g     F .text	00000224 altera_avalon_jtag_uart_write
04024e34 g     F .text	00000004 __sfp_lock_acquire
04026390 g     F .text	000000e4 memchr
04020b80 g     F .text	000021f8 ___vfprintf_internal_r
04020834 g     F .text	00000090 choose_task
04024f98 g     F .text	00000310 _free_r
04025974 g     F .text	00000010 __locale_mb_cur_max
04030cd4 g     F .text	00000180 __call_exitprocs
04034dd0 g     O .bss	00000004 __mlocale_changed
04020000 g       *ABS*	00000000 __alt_mem_onchip_memory_1
040331d8 g     O .rwdata	00000004 __malloc_sbrk_base
04020244 g     F .text	0000004c _start
04034dfc g     O .bss	00000004 _alt_tick_rate
04030e54 g     F .text	00000070 .hidden __floatundidf
04026fc0 g     F .text	00000148 __lshift
04034e00 g     O .bss	00000004 _alt_nticks
0402dd18 g     F .text	000000fc read
0402e19c g     F .text	000000a8 alt_sys_init
04030bbc g     F .text	00000118 __register_exitproc
04020760 g     F .text	000000d4 receive_mail
0402f7c0 g     F .text	00000054 altera_avalon_mutex_unlock
04026c88 g     F .text	000001f8 __multiply
0402e714 g     F .text	00000068 altera_avalon_jtag_uart_close
04031670 g       *ABS*	00000000 __ram_rwdata_start
04030ef8 g       *ABS*	00000000 __ram_rodata_start
04034e04 g     O .bss	00000028 __malloc_current_mallinfo
040274d4 g     F .text	0000014c __d2b
0402e244 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
040309c0 g     F .text	000000a4 alt_get_fd
0402ff04 g     F .text	00000158 alt_busy_sleep
040299e8 g     F .text	00000054 _close_r
0402f8d8 g     F .text	000000bc perf_get_section_time
04030b40 g     F .text	0000007c memcmp
0402e304 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
04034f2c g       *ABS*	00000000 __alt_stack_base
0402e354 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
04022e50 g     F .text	00000154 __swsetup_r
0402b674 g     F .text	000008e8 .hidden __divdf3
04024cf4 g     F .text	00000118 __sfp
04027738 g     F .text	00000078 __copybits
0402f994 g     F .text	0000004c perf_get_total_time
04031b0c g     O .rwdata	00000408 __malloc_av_
04024e40 g     F .text	00000004 __sinit_lock_release
0402c1b4 g     F .text	00000718 .hidden __muldf3
04027fd0 g     F .text	00000054 __sread
040308b8 g     F .text	00000108 alt_find_file
04030098 g     F .text	000000a4 alt_dev_llist_insert
0402dc94 g     F .text	00000024 __malloc_lock
0402de78 g     F .text	000000b0 sbrk
04024a48 g     F .text	0000005c _fflush_r
04029a3c g     F .text	000000c4 _calloc_r
04034dc8 g     O .bss	00000004 choice
04034dc8 g       *ABS*	00000000 __bss_start
04026718 g     F .text	00000128 memset
04020914 g     F .text	00000074 main
04034df4 g     O .bss	00000004 alt_envp
04034dd8 g     O .bss	00000004 __malloc_max_total_mem
0402e2a4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
04029970 g     F .text	00000018 __swbuf
04028104 g     F .text	00000008 __sclose
04040000 g       *ABS*	00000000 __alt_heap_limit
04029bf0 g     F .text	00000014 fclose
0402f73c g     F .text	00000044 altera_avalon_mutex_lock
040231a4 g     F .text	00001688 _dtoa_r
04025b84 g     F .text	0000080c _malloc_r
0402a0d8 g     F .text	00000030 __ascii_wctomb
040331f8 g     O .rwdata	00000004 alt_errno
04025764 g     F .text	000000c4 _fwalk
040278dc g     F .text	000000c8 putc
0402ac14 g     F .text	00000084 .hidden __divsi3
04024e74 g     F .text	00000124 _malloc_trim_r
04030ef8 g       *ABS*	00000000 __CTOR_END__
0402810c g     F .text	000000dc strcmp
04030ef8 g       *ABS*	00000000 __flash_rodata_start
04030ef8 g       *ABS*	00000000 __DTOR_LIST__
0402bf5c g     F .text	00000088 .hidden __nedf2
0402e164 g     F .text	00000038 alt_irq_init
0402de14 g     F .text	00000064 alt_release_fd
040313e4 g     O .rodata	00000100 .hidden __clz_tab
04034dcc g     O .bss	00000004 _PathLocale
04030af4 g     F .text	00000014 atexit
04029988 g     F .text	00000060 _write_r
040259a4 g     F .text	00000018 setlocale
040331d0 g     O .rwdata	00000004 _impure_ptr
04034dec g     O .bss	00000004 alt_argc
0402482c g     F .text	0000021c __sflush_r
0403019c g     F .text	00000060 _do_dtors
04025990 g     F .text	00000008 __locale_cjk_lang
00000000 g       *ABS*	00000000 __alt_mem_sdram_controller_2
04020020 g       .exceptions	00000000 alt_irq_entry
04027364 g     F .text	00000064 __ulp
04024e5c g     F .text	00000018 __fp_unlock_all
040331e4 g     O .rwdata	00000008 alt_fs_list
04020020 g       *ABS*	00000000 __ram_exceptions_start
040259bc g     F .text	0000000c localeconv
0402d69c g     F .text	00000050 alt_ic_isr_register
0403321c g       *ABS*	00000000 _edata
04034f2c g       *ABS*	00000000 _end
04029c04 g     F .text	00000164 __fputwc
04020244 g       *ABS*	00000000 __ram_exceptions_end
0402e77c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0402d774 g     F .text	0000008c alt_ic_irq_disable
04033204 g     O .rwdata	00000008 alt_mailbox_simple_list
0402802c g     F .text	0000007c __swrite
040331dc g     O .rwdata	00000004 __malloc_trim_threshold
0402fa20 g     F .text	00000020 alt_get_performance_counter_base
04025984 g     F .text	0000000c __locale_msgcharset
04030b08 g     F .text	00000038 exit
04025828 g     F .text	000000c4 _fwalk_reent
04027168 g     F .text	000001fc __mdiff
0402ac98 g     F .text	00000074 .hidden __modsi3
04040000 g       *ABS*	00000000 __alt_data_end
04020020 g     F .exceptions	00000000 alt_exception
04024e38 g     F .text	00000004 __sfp_lock_release
0402f00c g     F .text	000001e4 altera_avalon_mailbox_open
04030ec4 g     F .text	00000034 _exit
0402fdd8 g     F .text	0000012c alt_alarm_start
040259c8 g     F .text	000001bc __smakebuf_r
04020ae8 g     F .text	00000098 strlen
0403059c g     F .text	00000154 open
0402bfe4 g     F .text	000000dc .hidden __gedf2
040331e0 g     O .rwdata	00000004 __wctomb
040282e4 g     F .text	00000018 __sprint_r
0403028c g     F .text	00000034 alt_icache_flush_all
040331fc g     O .rwdata	00000004 alt_priority_mask
0402d6ec g     F .text	00000088 alt_ic_irq_enable
04022d78 g     F .text	0000001c __vfprintf_internal
0402f718 g     F .text	00000024 altera_avalon_mutex_close
0402a108 g     F .text	0000005c _wctomb_r
0402c8cc g     F .text	000008fc .hidden __subdf3
04026b9c g     F .text	000000b0 __lo0bits
04033214 g     O .rwdata	00000008 alt_alarm_list
0403013c g     F .text	00000060 _do_ctors
0402a018 g     F .text	000000c0 wcrtomb
0402d46c g     F .text	000000d0 close
040202c8 g     F .text	000001c4 pptest
0402da84 g     F .text	00000084 alt_load
04029d8c g     F .text	00000080 fputwc
04024e3c g     F .text	00000004 __sinit_lock_acquire
04026910 g     F .text	00000120 __multadd
040268e8 g     F .text	00000028 _Bfree



Disassembly of section .entry:

04020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 4020000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 4020004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 4020008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 402000c:	00bffd16 	blt	zero,r2,4020004 <__alt_data_end+0xfffe0004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4020010:	004100b4 	movhi	at,1026
    ori r1, r1, %lo(_start)
 4020014:	08409114 	ori	at,at,580
    jmp r1
 4020018:	0800683a 	jmp	at
 402001c:	00000000 	call	0 <__alt_mem_sdram_controller_2>

Disassembly of section .exceptions:

04020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4020020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4020024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4020028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 402002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4020030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4020034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4020038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 402003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4020040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4020044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4020048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 402004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4020050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4020054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4020058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 402005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4020060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4020064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4020068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 402006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4020070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4020074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4020078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 402007c:	10000326 	beq	r2,zero,402008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4020080:	20000226 	beq	r4,zero,402008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4020084:	40200fc0 	call	40200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4020088:	00000706 	br	40200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 402008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4020090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4020094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4020098:	40201d00 	call	40201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 402009c:	1000021e 	bne	r2,zero,40200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40200f8:	ef80083a 	eret

040200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40200fc:	defff904 	addi	sp,sp,-28
 4020100:	dfc00615 	stw	ra,24(sp)
 4020104:	df000515 	stw	fp,20(sp)
 4020108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 402010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4020110:	0005313a 	rdctl	r2,ipending
 4020114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4020118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 402011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4020120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4020124:	00800044 	movi	r2,1
 4020128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 402012c:	e0fffb17 	ldw	r3,-20(fp)
 4020130:	e0bffc17 	ldw	r2,-16(fp)
 4020134:	1884703a 	and	r2,r3,r2
 4020138:	10001426 	beq	r2,zero,402018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 402013c:	008100f4 	movhi	r2,1027
 4020140:	10938b04 	addi	r2,r2,20012
 4020144:	e0fffd17 	ldw	r3,-12(fp)
 4020148:	180690fa 	slli	r3,r3,3
 402014c:	10c5883a 	add	r2,r2,r3
 4020150:	10c00017 	ldw	r3,0(r2)
 4020154:	008100f4 	movhi	r2,1027
 4020158:	10938b04 	addi	r2,r2,20012
 402015c:	e13ffd17 	ldw	r4,-12(fp)
 4020160:	200890fa 	slli	r4,r4,3
 4020164:	1105883a 	add	r2,r2,r4
 4020168:	10800104 	addi	r2,r2,4
 402016c:	10800017 	ldw	r2,0(r2)
 4020170:	1009883a 	mov	r4,r2
 4020174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4020178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 402017c:	0005313a 	rdctl	r2,ipending
 4020180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4020184:	e0bfff17 	ldw	r2,-4(fp)
 4020188:	00000706 	br	40201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 402018c:	e0bffc17 	ldw	r2,-16(fp)
 4020190:	1085883a 	add	r2,r2,r2
 4020194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4020198:	e0bffd17 	ldw	r2,-12(fp)
 402019c:	10800044 	addi	r2,r2,1
 40201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40201a4:	003fe106 	br	402012c <__alt_data_end+0xfffe012c>

    active = alt_irq_pending ();
 40201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 40201ac:	e0bffb17 	ldw	r2,-20(fp)
 40201b0:	103fdb1e 	bne	r2,zero,4020120 <__alt_data_end+0xfffe0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40201b4:	0001883a 	nop
}
 40201b8:	0001883a 	nop
 40201bc:	e037883a 	mov	sp,fp
 40201c0:	dfc00117 	ldw	ra,4(sp)
 40201c4:	df000017 	ldw	fp,0(sp)
 40201c8:	dec00204 	addi	sp,sp,8
 40201cc:	f800283a 	ret

040201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 40201d0:	defffb04 	addi	sp,sp,-20
 40201d4:	dfc00415 	stw	ra,16(sp)
 40201d8:	df000315 	stw	fp,12(sp)
 40201dc:	df000304 	addi	fp,sp,12
 40201e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 40201e4:	000531fa 	rdctl	r2,exception
 40201e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 40201ec:	e0bffd17 	ldw	r2,-12(fp)
 40201f0:	10801f0c 	andi	r2,r2,124
 40201f4:	1004d0ba 	srli	r2,r2,2
 40201f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 40201fc:	0005333a 	rdctl	r2,badaddr
 4020200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 4020204:	d0a70b17 	ldw	r2,-25556(gp)
 4020208:	10000726 	beq	r2,zero,4020228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 402020c:	d0a70b17 	ldw	r2,-25556(gp)
 4020210:	e0fffd17 	ldw	r3,-12(fp)
 4020214:	e1bffe17 	ldw	r6,-8(fp)
 4020218:	e17fff17 	ldw	r5,-4(fp)
 402021c:	1809883a 	mov	r4,r3
 4020220:	103ee83a 	callr	r2
 4020224:	00000206 	br	4020230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4020228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 402022c:	0005883a 	mov	r2,zero
}
 4020230:	e037883a 	mov	sp,fp
 4020234:	dfc00117 	ldw	ra,4(sp)
 4020238:	df000017 	ldw	fp,0(sp)
 402023c:	dec00204 	addi	sp,sp,8
 4020240:	f800283a 	ret

Disassembly of section .text:

04020244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 4020244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 4020248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 402024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 4020250:	00bffd16 	blt	zero,r2,4020248 <__alt_data_end+0xfffe0248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4020254:	06c10134 	movhi	sp,1028
    ori sp, sp, %lo(__alt_stack_pointer)
 4020258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 402025c:	068100f4 	movhi	gp,1027
    ori gp, gp, %lo(_gp)
 4020260:	d6ac7314 	ori	gp,gp,45516
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4020264:	008100f4 	movhi	r2,1027
    ori r2, r2, %lo(__bss_start)
 4020268:	10937214 	ori	r2,r2,19912

    movhi r3, %hi(__bss_end)
 402026c:	00c100f4 	movhi	r3,1027
    ori r3, r3, %lo(__bss_end)
 4020270:	18d3cb14 	ori	r3,r3,20268

    beq r2, r3, 1f
 4020274:	10c00326 	beq	r2,r3,4020284 <_start+0x40>

0:
    stw zero, (r2)
 4020278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 402027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 4020280:	10fffd36 	bltu	r2,r3,4020278 <__alt_data_end+0xfffe0278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4020284:	402da840 	call	402da84 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4020288:	402dc180 	call	402dc18 <alt_main>

0402028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 402028c:	003fff06 	br	402028c <__alt_data_end+0xfffe028c>

04020290 <part1>:
#define PIO_IRQFLAG	4*3
// Variable for recording choices made by interrupt
volatile int choice;

void part1()
{
 4020290:	defffe04 	addi	sp,sp,-8
 4020294:	dfc00115 	stw	ra,4(sp)
 4020298:	df000015 	stw	fp,0(sp)
 402029c:	d839883a 	mov	fp,sp
	printf("Hello from the multicore system, this is CPU %d talking! \n", NIOS2_CPU_ID_VALUE);
 40202a0:	000b883a 	mov	r5,zero
 40202a4:	010100f4 	movhi	r4,1027
 40202a8:	2103be04 	addi	r4,r4,3832
 40202ac:	40209b80 	call	40209b8 <printf>
}
 40202b0:	0001883a 	nop
 40202b4:	e037883a 	mov	sp,fp
 40202b8:	dfc00117 	ldw	ra,4(sp)
 40202bc:	df000017 	ldw	fp,0(sp)
 40202c0:	dec00204 	addi	sp,sp,8
 40202c4:	f800283a 	ret

040202c8 <pptest>:

// Access parallel port 1 connected to LEDs 6, 5 & 4
// and increment counter 1 every mscound milliseconds
// for iterations amount of times.
void pptest(int msdelay, uint32_t iterations)
{
 40202c8:	defff804 	addi	sp,sp,-32
 40202cc:	dfc00715 	stw	ra,28(sp)
 40202d0:	df000615 	stw	fp,24(sp)
 40202d4:	df000604 	addi	fp,sp,24
 40202d8:	e13ffe15 	stw	r4,-8(fp)
 40202dc:	e17fff15 	stw	r5,-4(fp)
	// Start overall performance counter
	PERF_RESET(PERFORMANCE_COUNTER_1_BASE);
 40202e0:	00c00044 	movi	r3,1
 40202e4:	00810134 	movhi	r2,1028
 40202e8:	10840004 	addi	r2,r2,4096
 40202ec:	10c00035 	stwio	r3,0(r2)
	PERF_START_MEASURING(PERFORMANCE_COUNTER_1_BASE);
 40202f0:	0007883a 	mov	r3,zero
 40202f4:	00810134 	movhi	r2,1028
 40202f8:	10840104 	addi	r2,r2,4100
 40202fc:	10c00035 	stwio	r3,0(r2)
	// Start performance counter, recording the setup portion (1)
	PERF_BEGIN(PERFORMANCE_COUNTER_1_BASE, 1);
 4020300:	0007883a 	mov	r3,zero
 4020304:	00810134 	movhi	r2,1028
 4020308:	10840504 	addi	r2,r2,4116
 402030c:	10c00035 	stwio	r3,0(r2)
	printf("Starting parallel port test on CPU %d\n", NIOS2_CPU_ID_VALUE);
 4020310:	000b883a 	mov	r5,zero
 4020314:	010100f4 	movhi	r4,1027
 4020318:	2103cd04 	addi	r4,r4,3892
 402031c:	40209b80 	call	40209b8 <printf>
	uint32_t itercount = 0x00;
 4020320:	e03ffc15 	stw	zero,-16(fp)
	uint8_t curr_lamp = 0x00;
 4020324:	e03ffd05 	stb	zero,-12(fp)
	// Reset custom counter
	IOWR_32DIRECT(CUSTOM_COUNTER_1_BASE, CustomCounterReset, ArbVal);
 4020328:	00ffffc4 	movi	r3,-1
 402032c:	00810134 	movhi	r2,1028
 4020330:	10842104 	addi	r2,r2,4228
 4020334:	10c00035 	stwio	r3,0(r2)
	// Set target value to be larger than iterations to be sure we never reach it (avoid triggering interrupt)
	IOWR_32DIRECT(CUSTOM_COUNTER_1_BASE, CustomCounterTarget, iterations + 1);
 4020338:	e0bfff17 	ldw	r2,-4(fp)
 402033c:	10800044 	addi	r2,r2,1
 4020340:	1007883a 	mov	r3,r2
 4020344:	00810134 	movhi	r2,1028
 4020348:	10842604 	addi	r2,r2,4248
 402034c:	10c00035 	stwio	r3,0(r2)
	// Stop performance counter for the setup portion (1)
	PERF_END(PERFORMANCE_COUNTER_1_BASE, 1);
 4020350:	0007883a 	mov	r3,zero
 4020354:	00810134 	movhi	r2,1028
 4020358:	10840404 	addi	r2,r2,4112
 402035c:	10c00035 	stwio	r3,0(r2)
	while(itercount < iterations)
 4020360:	00002806 	br	4020404 <pptest+0x13c>
	{
		// Start performance counter, recording the iterative work (2)
		PERF_BEGIN(PERFORMANCE_COUNTER_1_BASE, 2);
 4020364:	0007883a 	mov	r3,zero
 4020368:	00810134 	movhi	r2,1028
 402036c:	10840904 	addi	r2,r2,4132
 4020370:	10c00035 	stwio	r3,0(r2)
		// Access parallel port to toggle LED
		IOWR_8DIRECT(PARALLEL_PORT_1_BASE, 0, curr_lamp);
 4020374:	e0fffd03 	ldbu	r3,-12(fp)
 4020378:	00810134 	movhi	r2,1028
 402037c:	10843404 	addi	r2,r2,4304
 4020380:	10c00025 	stbio	r3,0(r2)
		// Increment counter
		IOWR_32DIRECT(CUSTOM_COUNTER_1_BASE, CustomCounterIncr, 0x01);
 4020384:	00c00044 	movi	r3,1
 4020388:	00810134 	movhi	r2,1028
 402038c:	10842704 	addi	r2,r2,4252
 4020390:	10c00035 	stwio	r3,0(r2)
		// Make sure to toggle LEDs correctly for 3 available
		if(curr_lamp < 0x07)
 4020394:	e0bffd03 	ldbu	r2,-12(fp)
 4020398:	108001e8 	cmpgeui	r2,r2,7
 402039c:	1000041e 	bne	r2,zero,40203b0 <pptest+0xe8>
		{
			curr_lamp = curr_lamp + 0x01;
 40203a0:	e0bffd03 	ldbu	r2,-12(fp)
 40203a4:	10800044 	addi	r2,r2,1
 40203a8:	e0bffd05 	stb	r2,-12(fp)
 40203ac:	00000106 	br	40203b4 <pptest+0xec>
		}
		else
		{
			curr_lamp = 0x00;
 40203b0:	e03ffd05 	stb	zero,-12(fp)
		}
		// Stop performance counter for the iterative work (2)
		PERF_END(PERFORMANCE_COUNTER_1_BASE, 2);
 40203b4:	0007883a 	mov	r3,zero
 40203b8:	00810134 	movhi	r2,1028
 40203bc:	10840804 	addi	r2,r2,4128
 40203c0:	10c00035 	stwio	r3,0(r2)
		// Start performance counter, recording the wait (3)
		PERF_BEGIN(PERFORMANCE_COUNTER_1_BASE, 3);
 40203c4:	0007883a 	mov	r3,zero
 40203c8:	00810134 	movhi	r2,1028
 40203cc:	10840d04 	addi	r2,r2,4148
 40203d0:	10c00035 	stwio	r3,0(r2)
		// Wait msdelay ms
		usleep(1000 * msdelay);
 40203d4:	e0bffe17 	ldw	r2,-8(fp)
 40203d8:	1080fa24 	muli	r2,r2,1000
 40203dc:	1009883a 	mov	r4,r2
 40203e0:	402df280 	call	402df28 <usleep>
		// Stop performance counter for the wait (3)
		PERF_END(PERFORMANCE_COUNTER_1_BASE, 3);
 40203e4:	0007883a 	mov	r3,zero
 40203e8:	00810134 	movhi	r2,1028
 40203ec:	10840c04 	addi	r2,r2,4144
 40203f0:	10c00035 	stwio	r3,0(r2)
		// Get count value
		itercount = IORD_32DIRECT(CUSTOM_COUNTER_1_BASE, CustomCounterValue);
 40203f4:	00810134 	movhi	r2,1028
 40203f8:	10842004 	addi	r2,r2,4224
 40203fc:	10800037 	ldwio	r2,0(r2)
 4020400:	e0bffc15 	stw	r2,-16(fp)
	IOWR_32DIRECT(CUSTOM_COUNTER_1_BASE, CustomCounterReset, ArbVal);
	// Set target value to be larger than iterations to be sure we never reach it (avoid triggering interrupt)
	IOWR_32DIRECT(CUSTOM_COUNTER_1_BASE, CustomCounterTarget, iterations + 1);
	// Stop performance counter for the setup portion (1)
	PERF_END(PERFORMANCE_COUNTER_1_BASE, 1);
	while(itercount < iterations)
 4020404:	e0fffc17 	ldw	r3,-16(fp)
 4020408:	e0bfff17 	ldw	r2,-4(fp)
 402040c:	18bfd536 	bltu	r3,r2,4020364 <__alt_data_end+0xfffe0364>
		// Stop performance counter for the wait (3)
		PERF_END(PERFORMANCE_COUNTER_1_BASE, 3);
		// Get count value
		itercount = IORD_32DIRECT(CUSTOM_COUNTER_1_BASE, CustomCounterValue);
	}
	printf("Parallel port test on CPU %d finished\n\n", NIOS2_CPU_ID_VALUE);
 4020410:	000b883a 	mov	r5,zero
 4020414:	010100f4 	movhi	r4,1027
 4020418:	2103d704 	addi	r4,r4,3932
 402041c:	40209b80 	call	40209b8 <printf>
	// Stop overall performance counter and print results
	PERF_STOP_MEASURING(PERFORMANCE_COUNTER_1_BASE);
 4020420:	0007883a 	mov	r3,zero
 4020424:	00810134 	movhi	r2,1028
 4020428:	10840004 	addi	r2,r2,4096
 402042c:	10c00035 	stwio	r3,0(r2)
	perf_print_formatted_report(PERFORMANCE_COUNTER_1_BASE, alt_get_cpu_freq(), 3, "Startup", "Iterations", "Sleep");
 4020430:	402fa400 	call	402fa40 <alt_get_cpu_freq>
 4020434:	1007883a 	mov	r3,r2
 4020438:	008100f4 	movhi	r2,1027
 402043c:	1083e304 	addi	r2,r2,3980
 4020440:	d8800115 	stw	r2,4(sp)
 4020444:	008100f4 	movhi	r2,1027
 4020448:	1083e504 	addi	r2,r2,3988
 402044c:	d8800015 	stw	r2,0(sp)
 4020450:	01c100f4 	movhi	r7,1027
 4020454:	39c3e104 	addi	r7,r7,3972
 4020458:	018000c4 	movi	r6,3
 402045c:	180b883a 	mov	r5,r3
 4020460:	01010134 	movhi	r4,1028
 4020464:	21040004 	addi	r4,r4,4096
 4020468:	402fb580 	call	402fb58 <perf_print_formatted_report>
	printf("\n");
 402046c:	01000284 	movi	r4,10
 4020470:	40209fc0 	call	40209fc <putchar>
}
 4020474:	0001883a 	nop
 4020478:	e037883a 	mov	sp,fp
 402047c:	dfc00117 	ldw	ra,4(sp)
 4020480:	df000017 	ldw	fp,0(sp)
 4020484:	dec00204 	addi	sp,sp,8
 4020488:	f800283a 	ret

0402048c <hwmutex>:

void hwmutex()
{
 402048c:	defffa04 	addi	sp,sp,-24
 4020490:	dfc00515 	stw	ra,20(sp)
 4020494:	df000415 	stw	fp,16(sp)
 4020498:	df000404 	addi	fp,sp,16
	// Initialize counter and timer variables
	uint8_t counter = 0x1;
 402049c:	00800044 	movi	r2,1
 40204a0:	e0bffc05 	stb	r2,-16(fp)
	uint32_t timer_start = 0x0;
 40204a4:	e03ffd15 	stw	zero,-12(fp)
	uint32_t timer_stop = 0x0;
 40204a8:	e03ffe15 	stw	zero,-8(fp)
	// Fetch mutex address
	alt_mutex_dev* common_mutex = altera_avalon_mutex_open(MUTEX_0_NAME);
 40204ac:	010100f4 	movhi	r4,1027
 40204b0:	2103e804 	addi	r4,r4,4000
 40204b4:	402f6c40 	call	402f6c4 <altera_avalon_mutex_open>
 40204b8:	e0bfff15 	stw	r2,-4(fp)
	// Wait for cpu_0 to finish setting up
	while(!altera_avalon_mutex_first_lock(common_mutex)){};
 40204bc:	0001883a 	nop
 40204c0:	e13fff17 	ldw	r4,-4(fp)
 40204c4:	402f8880 	call	402f888 <altera_avalon_mutex_first_lock>
 40204c8:	103ffd26 	beq	r2,zero,40204c0 <__alt_data_end+0xfffe04c0>
	// Setup and start custom counter
	IOWR_32DIRECT(CUSTOM_COUNTER_1_BASE, CustomCounterReset, ArbVal);
 40204cc:	00ffffc4 	movi	r3,-1
 40204d0:	00810134 	movhi	r2,1028
 40204d4:	10842104 	addi	r2,r2,4228
 40204d8:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(CUSTOM_COUNTER_1_BASE, CustomCounterCommand, 0x0);
 40204dc:	0007883a 	mov	r3,zero
 40204e0:	00810134 	movhi	r2,1028
 40204e4:	10842404 	addi	r2,r2,4240
 40204e8:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(CUSTOM_COUNTER_1_BASE, CustomCounterTarget, 0xffffffff);
 40204ec:	00ffffc4 	movi	r3,-1
 40204f0:	00810134 	movhi	r2,1028
 40204f4:	10842604 	addi	r2,r2,4248
 40204f8:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(CUSTOM_COUNTER_1_BASE, CustomCounterStart, ArbVal);
 40204fc:	00ffffc4 	movi	r3,-1
 4020500:	00810134 	movhi	r2,1028
 4020504:	10842204 	addi	r2,r2,4232
 4020508:	10c00035 	stwio	r3,0(r2)
	printf("Starting decrementation synchronized by Mutex.\n");
 402050c:	010100f4 	movhi	r4,1027
 4020510:	2103ec04 	addi	r4,r4,4016
 4020514:	4020ad40 	call	4020ad4 <puts>
	while(counter > 0x0)
 4020518:	00002206 	br	40205a4 <hwmutex+0x118>
	{
		// Decrement every 10 ms
		usleep(10000);
 402051c:	0109c404 	movi	r4,10000
 4020520:	402df280 	call	402df28 <usleep>
		timer_start = IORD_32DIRECT(CUSTOM_COUNTER_1_BASE, CustomCounterValue);
 4020524:	00810134 	movhi	r2,1028
 4020528:	10842004 	addi	r2,r2,4224
 402052c:	10800037 	ldwio	r2,0(r2)
 4020530:	e0bffd15 	stw	r2,-12(fp)
		altera_avalon_mutex_lock(common_mutex, 2);
 4020534:	01400084 	movi	r5,2
 4020538:	e13fff17 	ldw	r4,-4(fp)
 402053c:	402f73c0 	call	402f73c <altera_avalon_mutex_lock>
		counter = IORD_8DIRECT(PARALLEL_PORT_2_BASE, 0);
 4020540:	00810134 	movhi	r2,1028
 4020544:	10843004 	addi	r2,r2,4288
 4020548:	10800023 	ldbuio	r2,0(r2)
 402054c:	10803fcc 	andi	r2,r2,255
 4020550:	e0bffc05 	stb	r2,-16(fp)
		counter = counter - 1;
 4020554:	e0bffc03 	ldbu	r2,-16(fp)
 4020558:	10bfffc4 	addi	r2,r2,-1
 402055c:	e0bffc05 	stb	r2,-16(fp)
		IOWR_8DIRECT(PARALLEL_PORT_2_BASE, 0, counter);
 4020560:	e0fffc03 	ldbu	r3,-16(fp)
 4020564:	00810134 	movhi	r2,1028
 4020568:	10843004 	addi	r2,r2,4288
 402056c:	10c00025 	stbio	r3,0(r2)
		altera_avalon_mutex_unlock(common_mutex);
 4020570:	e13fff17 	ldw	r4,-4(fp)
 4020574:	402f7c00 	call	402f7c0 <altera_avalon_mutex_unlock>
		timer_stop = IORD_32DIRECT(CUSTOM_COUNTER_1_BASE, CustomCounterValue);
 4020578:	00810134 	movhi	r2,1028
 402057c:	10842004 	addi	r2,r2,4224
 4020580:	10800037 	ldwio	r2,0(r2)
 4020584:	e0bffe15 	stw	r2,-8(fp)
		printf("Decrement time: %ld cycles.\n", (timer_stop - timer_start));
 4020588:	e0fffe17 	ldw	r3,-8(fp)
 402058c:	e0bffd17 	ldw	r2,-12(fp)
 4020590:	1885c83a 	sub	r2,r3,r2
 4020594:	100b883a 	mov	r5,r2
 4020598:	010100f4 	movhi	r4,1027
 402059c:	2103f804 	addi	r4,r4,4064
 40205a0:	40209b80 	call	40209b8 <printf>
	IOWR_32DIRECT(CUSTOM_COUNTER_1_BASE, CustomCounterReset, ArbVal);
	IOWR_32DIRECT(CUSTOM_COUNTER_1_BASE, CustomCounterCommand, 0x0);
	IOWR_32DIRECT(CUSTOM_COUNTER_1_BASE, CustomCounterTarget, 0xffffffff);
	IOWR_32DIRECT(CUSTOM_COUNTER_1_BASE, CustomCounterStart, ArbVal);
	printf("Starting decrementation synchronized by Mutex.\n");
	while(counter > 0x0)
 40205a4:	e0bffc03 	ldbu	r2,-16(fp)
 40205a8:	103fdc1e 	bne	r2,zero,402051c <__alt_data_end+0xfffe051c>
		IOWR_8DIRECT(PARALLEL_PORT_2_BASE, 0, counter);
		altera_avalon_mutex_unlock(common_mutex);
		timer_stop = IORD_32DIRECT(CUSTOM_COUNTER_1_BASE, CustomCounterValue);
		printf("Decrement time: %ld cycles.\n", (timer_stop - timer_start));
	}
	printf("Finished with decrementation synchronized by Mutex.\n\n");
 40205ac:	010100f4 	movhi	r4,1027
 40205b0:	21040004 	addi	r4,r4,4096
 40205b4:	4020ad40 	call	4020ad4 <puts>
}
 40205b8:	0001883a 	nop
 40205bc:	e037883a 	mov	sp,fp
 40205c0:	dfc00117 	ldw	ra,4(sp)
 40205c4:	df000017 	ldw	fp,0(sp)
 40205c8:	dec00204 	addi	sp,sp,8
 40205cc:	f800283a 	ret

040205d0 <hwcounter>:

void hwcounter()
{
 40205d0:	defffb04 	addi	sp,sp,-20
 40205d4:	dfc00415 	stw	ra,16(sp)
 40205d8:	df000315 	stw	fp,12(sp)
 40205dc:	df000304 	addi	fp,sp,12
	// Initialize counter and timer variables
	uint8_t LED_Counter = 0x0f;
 40205e0:	008003c4 	movi	r2,15
 40205e4:	e0bffd05 	stb	r2,-12(fp)
	uint32_t timer_start = 0x0;
 40205e8:	e03ffe15 	stw	zero,-8(fp)
	uint32_t timer_stop = 0x0;
 40205ec:	e03fff15 	stw	zero,-4(fp)
	// Setup and start custom counter 1, used for measuring how long access takes
	IOWR_32DIRECT(CUSTOM_COUNTER_1_BASE, CustomCounterReset, ArbVal);
 40205f0:	00ffffc4 	movi	r3,-1
 40205f4:	00810134 	movhi	r2,1028
 40205f8:	10842104 	addi	r2,r2,4228
 40205fc:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(CUSTOM_COUNTER_1_BASE, CustomCounterCommand, 0x0);
 4020600:	0007883a 	mov	r3,zero
 4020604:	00810134 	movhi	r2,1028
 4020608:	10842404 	addi	r2,r2,4240
 402060c:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(CUSTOM_COUNTER_1_BASE, CustomCounterTarget, 0xffffffff);
 4020610:	00ffffc4 	movi	r3,-1
 4020614:	00810134 	movhi	r2,1028
 4020618:	10842604 	addi	r2,r2,4248
 402061c:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(CUSTOM_COUNTER_1_BASE, CustomCounterStart, ArbVal);
 4020620:	00ffffc4 	movi	r3,-1
 4020624:	00810134 	movhi	r2,1028
 4020628:	10842204 	addi	r2,r2,4232
 402062c:	10c00035 	stwio	r3,0(r2)
	// Wait for the other processor to finish setting up custom counter 2
	uint8_t ready = (uint8_t)(IORD_32DIRECT(CUSTOM_COUNTER_2_BASE, CustomCounterValue) & 0xff);
 4020630:	00810134 	movhi	r2,1028
 4020634:	10841004 	addi	r2,r2,4160
 4020638:	10800037 	ldwio	r2,0(r2)
 402063c:	e0bffd45 	stb	r2,-11(fp)
	while(ready != LED_Counter)
 4020640:	00000406 	br	4020654 <hwcounter+0x84>
	{
		ready = (uint8_t)(IORD_32DIRECT(CUSTOM_COUNTER_2_BASE, CustomCounterValue) & 0xff);
 4020644:	00810134 	movhi	r2,1028
 4020648:	10841004 	addi	r2,r2,4160
 402064c:	10800037 	ldwio	r2,0(r2)
 4020650:	e0bffd45 	stb	r2,-11(fp)
	IOWR_32DIRECT(CUSTOM_COUNTER_1_BASE, CustomCounterCommand, 0x0);
	IOWR_32DIRECT(CUSTOM_COUNTER_1_BASE, CustomCounterTarget, 0xffffffff);
	IOWR_32DIRECT(CUSTOM_COUNTER_1_BASE, CustomCounterStart, ArbVal);
	// Wait for the other processor to finish setting up custom counter 2
	uint8_t ready = (uint8_t)(IORD_32DIRECT(CUSTOM_COUNTER_2_BASE, CustomCounterValue) & 0xff);
	while(ready != LED_Counter)
 4020654:	e0fffd43 	ldbu	r3,-11(fp)
 4020658:	e0bffd03 	ldbu	r2,-12(fp)
 402065c:	18bff91e 	bne	r3,r2,4020644 <__alt_data_end+0xfffe0644>
	{
		ready = (uint8_t)(IORD_32DIRECT(CUSTOM_COUNTER_2_BASE, CustomCounterValue) & 0xff);
	}
	printf("Starting decrementation of shared hardware counter.\n");
 4020660:	010100f4 	movhi	r4,1027
 4020664:	21040e04 	addi	r4,r4,4152
 4020668:	4020ad40 	call	4020ad4 <puts>
	while(LED_Counter > 0x0)
 402066c:	00001d06 	br	40206e4 <hwcounter+0x114>
	{
		// Decrement every 10 ms
		usleep(10000);
 4020670:	0109c404 	movi	r4,10000
 4020674:	402df280 	call	402df28 <usleep>
		// Read start value
		timer_start = IORD_32DIRECT(CUSTOM_COUNTER_1_BASE, CustomCounterValue);
 4020678:	00810134 	movhi	r2,1028
 402067c:	10842004 	addi	r2,r2,4224
 4020680:	10800037 	ldwio	r2,0(r2)
 4020684:	e0bffe15 	stw	r2,-8(fp)

		// Decrement counter 2
		IOWR_32DIRECT(CUSTOM_COUNTER_2_BASE, CustomCounterDecr, 0x01);
 4020688:	00c00044 	movi	r3,1
 402068c:	00810134 	movhi	r2,1028
 4020690:	10841004 	addi	r2,r2,4160
 4020694:	10c00035 	stwio	r3,0(r2)
		// Read counter 2 value
		LED_Counter = (uint8_t)(IORD_32DIRECT(CUSTOM_COUNTER_2_BASE, 0) & 0xFF);
 4020698:	00810134 	movhi	r2,1028
 402069c:	10841004 	addi	r2,r2,4160
 40206a0:	10800037 	ldwio	r2,0(r2)
 40206a4:	e0bffd05 	stb	r2,-12(fp)

		// Display new value on LED
		IOWR_8DIRECT(PARALLEL_PORT_2_BASE, 0, LED_Counter);
 40206a8:	e0fffd03 	ldbu	r3,-12(fp)
 40206ac:	00810134 	movhi	r2,1028
 40206b0:	10843004 	addi	r2,r2,4288
 40206b4:	10c00025 	stbio	r3,0(r2)

		timer_stop = IORD_32DIRECT(CUSTOM_COUNTER_1_BASE, CustomCounterValue);
 40206b8:	00810134 	movhi	r2,1028
 40206bc:	10842004 	addi	r2,r2,4224
 40206c0:	10800037 	ldwio	r2,0(r2)
 40206c4:	e0bfff15 	stw	r2,-4(fp)
		printf("Decrement time: %ld cycles.\n", (timer_stop - timer_start));
 40206c8:	e0ffff17 	ldw	r3,-4(fp)
 40206cc:	e0bffe17 	ldw	r2,-8(fp)
 40206d0:	1885c83a 	sub	r2,r3,r2
 40206d4:	100b883a 	mov	r5,r2
 40206d8:	010100f4 	movhi	r4,1027
 40206dc:	2103f804 	addi	r4,r4,4064
 40206e0:	40209b80 	call	40209b8 <printf>
	while(ready != LED_Counter)
	{
		ready = (uint8_t)(IORD_32DIRECT(CUSTOM_COUNTER_2_BASE, CustomCounterValue) & 0xff);
	}
	printf("Starting decrementation of shared hardware counter.\n");
	while(LED_Counter > 0x0)
 40206e4:	e0bffd03 	ldbu	r2,-12(fp)
 40206e8:	103fe11e 	bne	r2,zero,4020670 <__alt_data_end+0xfffe0670>

		timer_stop = IORD_32DIRECT(CUSTOM_COUNTER_1_BASE, CustomCounterValue);
		printf("Decrement time: %ld cycles.\n", (timer_stop - timer_start));

	}
	printf("Finished with decrementation of shared hardware counter.\n\n");
 40206ec:	010100f4 	movhi	r4,1027
 40206f0:	21041b04 	addi	r4,r4,4204
 40206f4:	4020ad40 	call	4020ad4 <puts>
}
 40206f8:	0001883a 	nop
 40206fc:	e037883a 	mov	sp,fp
 4020700:	dfc00117 	ldw	ra,4(sp)
 4020704:	df000017 	ldw	fp,0(sp)
 4020708:	dec00204 	addi	sp,sp,8
 402070c:	f800283a 	ret

04020710 <receive_callback>:

void receive_callback(void* message)
{
 4020710:	defffd04 	addi	sp,sp,-12
 4020714:	dfc00215 	stw	ra,8(sp)
 4020718:	df000115 	stw	fp,4(sp)
 402071c:	df000104 	addi	fp,sp,4
 4020720:	e13fff15 	stw	r4,-4(fp)
	if(message != NULL)
 4020724:	e0bfff17 	ldw	r2,-4(fp)
 4020728:	10000426 	beq	r2,zero,402073c <receive_callback+0x2c>
	{
		printf("Receiving completed.\n");
 402072c:	010100f4 	movhi	r4,1027
 4020730:	21042a04 	addi	r4,r4,4264
 4020734:	4020ad40 	call	4020ad4 <puts>
	}
	else
	{
		printf("Receiving error.\n");
	}
}
 4020738:	00000306 	br	4020748 <receive_callback+0x38>
	{
		printf("Receiving completed.\n");
	}
	else
	{
		printf("Receiving error.\n");
 402073c:	010100f4 	movhi	r4,1027
 4020740:	21043004 	addi	r4,r4,4288
 4020744:	4020ad40 	call	4020ad4 <puts>
	}
}
 4020748:	0001883a 	nop
 402074c:	e037883a 	mov	sp,fp
 4020750:	dfc00117 	ldw	ra,4(sp)
 4020754:	df000017 	ldw	fp,0(sp)
 4020758:	dec00204 	addi	sp,sp,8
 402075c:	f800283a 	ret

04020760 <receive_mail>:

void receive_mail()
{
 4020760:	defff904 	addi	sp,sp,-28
 4020764:	dfc00615 	stw	ra,24(sp)
 4020768:	df000515 	stw	fp,20(sp)
 402076c:	df000504 	addi	fp,sp,20
	printf("Using the mailbox, receiver side.\n");
 4020770:	010100f4 	movhi	r4,1027
 4020774:	21043504 	addi	r4,r4,4308
 4020778:	4020ad40 	call	4020ad4 <puts>
	// Load mailbox
	altera_avalon_mailbox_dev* mailbox = altera_avalon_mailbox_open("/dev/mailbox_simple_0", NULL, receive_callback);
 402077c:	018100b4 	movhi	r6,1026
 4020780:	3181c404 	addi	r6,r6,1808
 4020784:	000b883a 	mov	r5,zero
 4020788:	010100f4 	movhi	r4,1027
 402078c:	21043e04 	addi	r4,r4,4344
 4020790:	402f00c0 	call	402f00c <altera_avalon_mailbox_open>
 4020794:	e0bffc15 	stw	r2,-16(fp)
	// Message storage array
	alt_u32 mail[2];
	altera_avalon_mailbox_retrieve_poll(mailbox, mail, 0);
 4020798:	e0bffe04 	addi	r2,fp,-8
 402079c:	000d883a 	mov	r6,zero
 40207a0:	100b883a 	mov	r5,r2
 40207a4:	e13ffc17 	ldw	r4,-16(fp)
 40207a8:	402f4d00 	call	402f4d0 <altera_avalon_mailbox_retrieve_poll>
	alt_dcache_flush_all();
 40207ac:	402d53c0 	call	402d53c <alt_dcache_flush_all>
	char *msg_ptr = (void*) mail[1];
 40207b0:	e0bfff17 	ldw	r2,-4(fp)
 40207b4:	e0bffd15 	stw	r2,-12(fp)
	printf("Received message with contents: ");
 40207b8:	010100f4 	movhi	r4,1027
 40207bc:	21044404 	addi	r4,r4,4368
 40207c0:	40209b80 	call	40209b8 <printf>
	for(int i = 0; i < mail[0]; i++)
 40207c4:	e03ffb15 	stw	zero,-20(fp)
 40207c8:	00000c06 	br	40207fc <receive_mail+0x9c>
	{
		printf("%c", *(msg_ptr + i));
 40207cc:	e0bffb17 	ldw	r2,-20(fp)
 40207d0:	e0fffd17 	ldw	r3,-12(fp)
 40207d4:	1885883a 	add	r2,r3,r2
 40207d8:	10800003 	ldbu	r2,0(r2)
 40207dc:	10803fcc 	andi	r2,r2,255
 40207e0:	1080201c 	xori	r2,r2,128
 40207e4:	10bfe004 	addi	r2,r2,-128
 40207e8:	1009883a 	mov	r4,r2
 40207ec:	40209fc0 	call	40209fc <putchar>
	alt_u32 mail[2];
	altera_avalon_mailbox_retrieve_poll(mailbox, mail, 0);
	alt_dcache_flush_all();
	char *msg_ptr = (void*) mail[1];
	printf("Received message with contents: ");
	for(int i = 0; i < mail[0]; i++)
 40207f0:	e0bffb17 	ldw	r2,-20(fp)
 40207f4:	10800044 	addi	r2,r2,1
 40207f8:	e0bffb15 	stw	r2,-20(fp)
 40207fc:	e0bffe17 	ldw	r2,-8(fp)
 4020800:	e0fffb17 	ldw	r3,-20(fp)
 4020804:	18bff136 	bltu	r3,r2,40207cc <__alt_data_end+0xfffe07cc>
	{
		printf("%c", *(msg_ptr + i));
	}
	altera_avalon_mailbox_close(mailbox);
 4020808:	e13ffc17 	ldw	r4,-16(fp)
 402080c:	402f1f00 	call	402f1f0 <altera_avalon_mailbox_close>
	printf("\nDone using the mailbox, receiver side.\n\n");
 4020810:	010100f4 	movhi	r4,1027
 4020814:	21044d04 	addi	r4,r4,4404
 4020818:	4020ad40 	call	4020ad4 <puts>
}
 402081c:	0001883a 	nop
 4020820:	e037883a 	mov	sp,fp
 4020824:	dfc00117 	ldw	ra,4(sp)
 4020828:	df000017 	ldw	fp,0(sp)
 402082c:	dec00204 	addi	sp,sp,8
 4020830:	f800283a 	ret

04020834 <choose_task>:

void choose_task(int task)
{
 4020834:	defffb04 	addi	sp,sp,-20
 4020838:	dfc00415 	stw	ra,16(sp)
 402083c:	df000315 	stw	fp,12(sp)
 4020840:	df000304 	addi	fp,sp,12
 4020844:	e13fff15 	stw	r4,-4(fp)
	if(task == 1)
 4020848:	e0bfff17 	ldw	r2,-4(fp)
 402084c:	10800058 	cmpnei	r2,r2,1
 4020850:	1000081e 	bne	r2,zero,4020874 <choose_task+0x40>
	{
		// 3.1 Parallel port test, 100 iterations, 50 ms each
		uint32_t iters = 0x64;
 4020854:	00801904 	movi	r2,100
 4020858:	e0bffd15 	stw	r2,-12(fp)
		int delaytime = 50;
 402085c:	00800c84 	movi	r2,50
 4020860:	e0bffe15 	stw	r2,-8(fp)
		pptest(delaytime, iters);
 4020864:	e17ffd17 	ldw	r5,-12(fp)
 4020868:	e13ffe17 	ldw	r4,-8(fp)
 402086c:	40202c80 	call	40202c8 <pptest>
	else if(task == 8)
	{
		// Manipulation 4: hardware counter
		hwcounter();
	}
}
 4020870:	00000e06 	br	40208ac <choose_task+0x78>
		// 3.1 Parallel port test, 100 iterations, 50 ms each
		uint32_t iters = 0x64;
		int delaytime = 50;
		pptest(delaytime, iters);
	}
	else if(task == 2)
 4020874:	e0bfff17 	ldw	r2,-4(fp)
 4020878:	10800098 	cmpnei	r2,r2,2
 402087c:	1000021e 	bne	r2,zero,4020888 <choose_task+0x54>
	{
		// Manipulation 2: hardware mutex
		hwmutex();
 4020880:	402048c0 	call	402048c <hwmutex>
	else if(task == 8)
	{
		// Manipulation 4: hardware counter
		hwcounter();
	}
}
 4020884:	00000906 	br	40208ac <choose_task+0x78>
	else if(task == 2)
	{
		// Manipulation 2: hardware mutex
		hwmutex();
	}
	else if(task == 4)
 4020888:	e0bfff17 	ldw	r2,-4(fp)
 402088c:	10800118 	cmpnei	r2,r2,4
 4020890:	1000021e 	bne	r2,zero,402089c <choose_task+0x68>
	{
		// Manipulation 3: hardware mailbox
		receive_mail();
 4020894:	40207600 	call	4020760 <receive_mail>
	else if(task == 8)
	{
		// Manipulation 4: hardware counter
		hwcounter();
	}
}
 4020898:	00000406 	br	40208ac <choose_task+0x78>
	else if(task == 4)
	{
		// Manipulation 3: hardware mailbox
		receive_mail();
	}
	else if(task == 8)
 402089c:	e0bfff17 	ldw	r2,-4(fp)
 40208a0:	10800218 	cmpnei	r2,r2,8
 40208a4:	1000011e 	bne	r2,zero,40208ac <choose_task+0x78>
	{
		// Manipulation 4: hardware counter
		hwcounter();
 40208a8:	40205d00 	call	40205d0 <hwcounter>
	}
}
 40208ac:	0001883a 	nop
 40208b0:	e037883a 	mov	sp,fp
 40208b4:	dfc00117 	ldw	ra,4(sp)
 40208b8:	df000017 	ldw	fp,0(sp)
 40208bc:	dec00204 	addi	sp,sp,8
 40208c0:	f800283a 	ret

040208c4 <isr_buttons>:

void isr_buttons(void* context)
{
 40208c4:	defffd04 	addi	sp,sp,-12
 40208c8:	df000215 	stw	fp,8(sp)
 40208cc:	df000204 	addi	fp,sp,8
 40208d0:	e13fff15 	stw	r4,-4(fp)
	uint8_t pinvals = IORD_8DIRECT(PIO_2_BASE, PIO_IRQFLAG);
 40208d4:	00810134 	movhi	r2,1028
 40208d8:	10842b04 	addi	r2,r2,4268
 40208dc:	10800023 	ldbuio	r2,0(r2)
 40208e0:	10803fcc 	andi	r2,r2,255
 40208e4:	e0bffe05 	stb	r2,-8(fp)
	choice = (int)pinvals;
 40208e8:	e0bffe03 	ldbu	r2,-8(fp)
 40208ec:	d0a6ff15 	stw	r2,-25604(gp)
	// Clear the interrupt flag
	IOWR_8DIRECT(PIO_2_BASE, PIO_IRQFLAG, pinvals);
 40208f0:	e0fffe03 	ldbu	r3,-8(fp)
 40208f4:	00810134 	movhi	r2,1028
 40208f8:	10842b04 	addi	r2,r2,4268
 40208fc:	10c00025 	stbio	r3,0(r2)
}
 4020900:	0001883a 	nop
 4020904:	e037883a 	mov	sp,fp
 4020908:	df000017 	ldw	fp,0(sp)
 402090c:	dec00104 	addi	sp,sp,4
 4020910:	f800283a 	ret

04020914 <main>:

int main()
{
 4020914:	defffd04 	addi	sp,sp,-12
 4020918:	dfc00215 	stw	ra,8(sp)
 402091c:	df000115 	stw	fp,4(sp)
 4020920:	df000104 	addi	fp,sp,4
	// Setup interrupts on input pins
	IOWR_8DIRECT(PIO_2_BASE, PIO_IRQEN, 0xff);
 4020924:	00ffffc4 	movi	r3,-1
 4020928:	00810134 	movhi	r2,1028
 402092c:	10842a04 	addi	r2,r2,4264
 4020930:	10c00025 	stbio	r3,0(r2)
	alt_ic_isr_register(PIO_2_IRQ_INTERRUPT_CONTROLLER_ID, PIO_2_IRQ, isr_buttons, NULL, NULL);
 4020934:	d8000015 	stw	zero,0(sp)
 4020938:	000f883a 	mov	r7,zero
 402093c:	018100b4 	movhi	r6,1026
 4020940:	31823104 	addi	r6,r6,2244
 4020944:	01400104 	movi	r5,4
 4020948:	0009883a 	mov	r4,zero
 402094c:	402d69c0 	call	402d69c <alt_ic_isr_register>
	// Print which CPU it is
	choose_task(1);
 4020950:	01000044 	movi	r4,1
 4020954:	40208340 	call	4020834 <choose_task>
	printf("Use switches for performing tasks:\nSwitch No. |   Task\n   0       |   Parallel Port test\n   1       |   Hardware mutex\n   2       |   Hardware mailbox\n   3       |   Hardware counter\n\n");
 4020958:	010100f4 	movhi	r4,1027
 402095c:	21045804 	addi	r4,r4,4448
 4020960:	4020ad40 	call	4020ad4 <puts>
	// Wait for buttons
	while(1)
	{
		// Poll choice once every millisecond
		usleep(1000);
 4020964:	0100fa04 	movi	r4,1000
 4020968:	402df280 	call	402df28 <usleep>
		if(choice != 0x0)
 402096c:	d0a6ff17 	ldw	r2,-25604(gp)
 4020970:	103ffc26 	beq	r2,zero,4020964 <__alt_data_end+0xfffe0964>
		{
			choose_task(choice);
 4020974:	d0a6ff17 	ldw	r2,-25604(gp)
 4020978:	1009883a 	mov	r4,r2
 402097c:	40208340 	call	4020834 <choose_task>
			choice = 0x0;
 4020980:	d026ff15 	stw	zero,-25604(gp)
		}
	};
 4020984:	003ff706 	br	4020964 <__alt_data_end+0xfffe0964>

04020988 <_printf_r>:
 4020988:	defffd04 	addi	sp,sp,-12
 402098c:	2805883a 	mov	r2,r5
 4020990:	dfc00015 	stw	ra,0(sp)
 4020994:	d9800115 	stw	r6,4(sp)
 4020998:	d9c00215 	stw	r7,8(sp)
 402099c:	21400217 	ldw	r5,8(r4)
 40209a0:	d9c00104 	addi	r7,sp,4
 40209a4:	100d883a 	mov	r6,r2
 40209a8:	4020b800 	call	4020b80 <___vfprintf_internal_r>
 40209ac:	dfc00017 	ldw	ra,0(sp)
 40209b0:	dec00304 	addi	sp,sp,12
 40209b4:	f800283a 	ret

040209b8 <printf>:
 40209b8:	defffc04 	addi	sp,sp,-16
 40209bc:	dfc00015 	stw	ra,0(sp)
 40209c0:	d9400115 	stw	r5,4(sp)
 40209c4:	d9800215 	stw	r6,8(sp)
 40209c8:	d9c00315 	stw	r7,12(sp)
 40209cc:	008100f4 	movhi	r2,1027
 40209d0:	108c7404 	addi	r2,r2,12752
 40209d4:	10800017 	ldw	r2,0(r2)
 40209d8:	200b883a 	mov	r5,r4
 40209dc:	d9800104 	addi	r6,sp,4
 40209e0:	11000217 	ldw	r4,8(r2)
 40209e4:	4022d780 	call	4022d78 <__vfprintf_internal>
 40209e8:	dfc00017 	ldw	ra,0(sp)
 40209ec:	dec00404 	addi	sp,sp,16
 40209f0:	f800283a 	ret

040209f4 <_putchar_r>:
 40209f4:	21800217 	ldw	r6,8(r4)
 40209f8:	402783c1 	jmpi	402783c <_putc_r>

040209fc <putchar>:
 40209fc:	008100f4 	movhi	r2,1027
 4020a00:	108c7404 	addi	r2,r2,12752
 4020a04:	200b883a 	mov	r5,r4
 4020a08:	11000017 	ldw	r4,0(r2)
 4020a0c:	21800217 	ldw	r6,8(r4)
 4020a10:	402783c1 	jmpi	402783c <_putc_r>

04020a14 <_puts_r>:
 4020a14:	defff604 	addi	sp,sp,-40
 4020a18:	dc000715 	stw	r16,28(sp)
 4020a1c:	2021883a 	mov	r16,r4
 4020a20:	2809883a 	mov	r4,r5
 4020a24:	dc400815 	stw	r17,32(sp)
 4020a28:	dfc00915 	stw	ra,36(sp)
 4020a2c:	2823883a 	mov	r17,r5
 4020a30:	4020ae80 	call	4020ae8 <strlen>
 4020a34:	10c00044 	addi	r3,r2,1
 4020a38:	d8800115 	stw	r2,4(sp)
 4020a3c:	008100f4 	movhi	r2,1027
 4020a40:	10848604 	addi	r2,r2,4632
 4020a44:	d8800215 	stw	r2,8(sp)
 4020a48:	00800044 	movi	r2,1
 4020a4c:	d8800315 	stw	r2,12(sp)
 4020a50:	00800084 	movi	r2,2
 4020a54:	dc400015 	stw	r17,0(sp)
 4020a58:	d8c00615 	stw	r3,24(sp)
 4020a5c:	dec00415 	stw	sp,16(sp)
 4020a60:	d8800515 	stw	r2,20(sp)
 4020a64:	80000226 	beq	r16,zero,4020a70 <_puts_r+0x5c>
 4020a68:	80800e17 	ldw	r2,56(r16)
 4020a6c:	10001426 	beq	r2,zero,4020ac0 <_puts_r+0xac>
 4020a70:	81400217 	ldw	r5,8(r16)
 4020a74:	2880030b 	ldhu	r2,12(r5)
 4020a78:	10c8000c 	andi	r3,r2,8192
 4020a7c:	1800061e 	bne	r3,zero,4020a98 <_puts_r+0x84>
 4020a80:	29001917 	ldw	r4,100(r5)
 4020a84:	00f7ffc4 	movi	r3,-8193
 4020a88:	10880014 	ori	r2,r2,8192
 4020a8c:	20c6703a 	and	r3,r4,r3
 4020a90:	2880030d 	sth	r2,12(r5)
 4020a94:	28c01915 	stw	r3,100(r5)
 4020a98:	d9800404 	addi	r6,sp,16
 4020a9c:	8009883a 	mov	r4,r16
 4020aa0:	40252a80 	call	40252a8 <__sfvwrite_r>
 4020aa4:	1000091e 	bne	r2,zero,4020acc <_puts_r+0xb8>
 4020aa8:	00800284 	movi	r2,10
 4020aac:	dfc00917 	ldw	ra,36(sp)
 4020ab0:	dc400817 	ldw	r17,32(sp)
 4020ab4:	dc000717 	ldw	r16,28(sp)
 4020ab8:	dec00a04 	addi	sp,sp,40
 4020abc:	f800283a 	ret
 4020ac0:	8009883a 	mov	r4,r16
 4020ac4:	4024e240 	call	4024e24 <__sinit>
 4020ac8:	003fe906 	br	4020a70 <__alt_data_end+0xfffe0a70>
 4020acc:	00bfffc4 	movi	r2,-1
 4020ad0:	003ff606 	br	4020aac <__alt_data_end+0xfffe0aac>

04020ad4 <puts>:
 4020ad4:	008100f4 	movhi	r2,1027
 4020ad8:	108c7404 	addi	r2,r2,12752
 4020adc:	200b883a 	mov	r5,r4
 4020ae0:	11000017 	ldw	r4,0(r2)
 4020ae4:	4020a141 	jmpi	4020a14 <_puts_r>

04020ae8 <strlen>:
 4020ae8:	208000cc 	andi	r2,r4,3
 4020aec:	10002026 	beq	r2,zero,4020b70 <strlen+0x88>
 4020af0:	20800007 	ldb	r2,0(r4)
 4020af4:	10002026 	beq	r2,zero,4020b78 <strlen+0x90>
 4020af8:	2005883a 	mov	r2,r4
 4020afc:	00000206 	br	4020b08 <strlen+0x20>
 4020b00:	10c00007 	ldb	r3,0(r2)
 4020b04:	18001826 	beq	r3,zero,4020b68 <strlen+0x80>
 4020b08:	10800044 	addi	r2,r2,1
 4020b0c:	10c000cc 	andi	r3,r2,3
 4020b10:	183ffb1e 	bne	r3,zero,4020b00 <__alt_data_end+0xfffe0b00>
 4020b14:	10c00017 	ldw	r3,0(r2)
 4020b18:	01ffbff4 	movhi	r7,65279
 4020b1c:	39ffbfc4 	addi	r7,r7,-257
 4020b20:	00ca303a 	nor	r5,zero,r3
 4020b24:	01a02074 	movhi	r6,32897
 4020b28:	19c7883a 	add	r3,r3,r7
 4020b2c:	31a02004 	addi	r6,r6,-32640
 4020b30:	1946703a 	and	r3,r3,r5
 4020b34:	1986703a 	and	r3,r3,r6
 4020b38:	1800091e 	bne	r3,zero,4020b60 <strlen+0x78>
 4020b3c:	10800104 	addi	r2,r2,4
 4020b40:	10c00017 	ldw	r3,0(r2)
 4020b44:	19cb883a 	add	r5,r3,r7
 4020b48:	00c6303a 	nor	r3,zero,r3
 4020b4c:	28c6703a 	and	r3,r5,r3
 4020b50:	1986703a 	and	r3,r3,r6
 4020b54:	183ff926 	beq	r3,zero,4020b3c <__alt_data_end+0xfffe0b3c>
 4020b58:	00000106 	br	4020b60 <strlen+0x78>
 4020b5c:	10800044 	addi	r2,r2,1
 4020b60:	10c00007 	ldb	r3,0(r2)
 4020b64:	183ffd1e 	bne	r3,zero,4020b5c <__alt_data_end+0xfffe0b5c>
 4020b68:	1105c83a 	sub	r2,r2,r4
 4020b6c:	f800283a 	ret
 4020b70:	2005883a 	mov	r2,r4
 4020b74:	003fe706 	br	4020b14 <__alt_data_end+0xfffe0b14>
 4020b78:	0005883a 	mov	r2,zero
 4020b7c:	f800283a 	ret

04020b80 <___vfprintf_internal_r>:
 4020b80:	deffb804 	addi	sp,sp,-288
 4020b84:	dfc04715 	stw	ra,284(sp)
 4020b88:	ddc04515 	stw	r23,276(sp)
 4020b8c:	dd404315 	stw	r21,268(sp)
 4020b90:	d9002c15 	stw	r4,176(sp)
 4020b94:	282f883a 	mov	r23,r5
 4020b98:	302b883a 	mov	r21,r6
 4020b9c:	d9c02d15 	stw	r7,180(sp)
 4020ba0:	df004615 	stw	fp,280(sp)
 4020ba4:	dd804415 	stw	r22,272(sp)
 4020ba8:	dd004215 	stw	r20,264(sp)
 4020bac:	dcc04115 	stw	r19,260(sp)
 4020bb0:	dc804015 	stw	r18,256(sp)
 4020bb4:	dc403f15 	stw	r17,252(sp)
 4020bb8:	dc003e15 	stw	r16,248(sp)
 4020bbc:	40259980 	call	4025998 <_localeconv_r>
 4020bc0:	10800017 	ldw	r2,0(r2)
 4020bc4:	1009883a 	mov	r4,r2
 4020bc8:	d8803415 	stw	r2,208(sp)
 4020bcc:	4020ae80 	call	4020ae8 <strlen>
 4020bd0:	d8803715 	stw	r2,220(sp)
 4020bd4:	d8802c17 	ldw	r2,176(sp)
 4020bd8:	10000226 	beq	r2,zero,4020be4 <___vfprintf_internal_r+0x64>
 4020bdc:	10800e17 	ldw	r2,56(r2)
 4020be0:	1000f926 	beq	r2,zero,4020fc8 <___vfprintf_internal_r+0x448>
 4020be4:	b880030b 	ldhu	r2,12(r23)
 4020be8:	10c8000c 	andi	r3,r2,8192
 4020bec:	1800061e 	bne	r3,zero,4020c08 <___vfprintf_internal_r+0x88>
 4020bf0:	b9001917 	ldw	r4,100(r23)
 4020bf4:	00f7ffc4 	movi	r3,-8193
 4020bf8:	10880014 	ori	r2,r2,8192
 4020bfc:	20c6703a 	and	r3,r4,r3
 4020c00:	b880030d 	sth	r2,12(r23)
 4020c04:	b8c01915 	stw	r3,100(r23)
 4020c08:	10c0020c 	andi	r3,r2,8
 4020c0c:	1800c126 	beq	r3,zero,4020f14 <___vfprintf_internal_r+0x394>
 4020c10:	b8c00417 	ldw	r3,16(r23)
 4020c14:	1800bf26 	beq	r3,zero,4020f14 <___vfprintf_internal_r+0x394>
 4020c18:	1080068c 	andi	r2,r2,26
 4020c1c:	00c00284 	movi	r3,10
 4020c20:	10c0c426 	beq	r2,r3,4020f34 <___vfprintf_internal_r+0x3b4>
 4020c24:	d8c00404 	addi	r3,sp,16
 4020c28:	050100f4 	movhi	r20,1027
 4020c2c:	d9001e04 	addi	r4,sp,120
 4020c30:	a5049784 	addi	r20,r20,4702
 4020c34:	d8c01e15 	stw	r3,120(sp)
 4020c38:	d8002015 	stw	zero,128(sp)
 4020c3c:	d8001f15 	stw	zero,124(sp)
 4020c40:	d8003315 	stw	zero,204(sp)
 4020c44:	d8003615 	stw	zero,216(sp)
 4020c48:	d8003815 	stw	zero,224(sp)
 4020c4c:	1811883a 	mov	r8,r3
 4020c50:	d8003915 	stw	zero,228(sp)
 4020c54:	d8003a15 	stw	zero,232(sp)
 4020c58:	d8002f15 	stw	zero,188(sp)
 4020c5c:	d9002815 	stw	r4,160(sp)
 4020c60:	a8800007 	ldb	r2,0(r21)
 4020c64:	10027b26 	beq	r2,zero,4021654 <___vfprintf_internal_r+0xad4>
 4020c68:	00c00944 	movi	r3,37
 4020c6c:	a821883a 	mov	r16,r21
 4020c70:	10c0021e 	bne	r2,r3,4020c7c <___vfprintf_internal_r+0xfc>
 4020c74:	00001406 	br	4020cc8 <___vfprintf_internal_r+0x148>
 4020c78:	10c00326 	beq	r2,r3,4020c88 <___vfprintf_internal_r+0x108>
 4020c7c:	84000044 	addi	r16,r16,1
 4020c80:	80800007 	ldb	r2,0(r16)
 4020c84:	103ffc1e 	bne	r2,zero,4020c78 <__alt_data_end+0xfffe0c78>
 4020c88:	8563c83a 	sub	r17,r16,r21
 4020c8c:	88000e26 	beq	r17,zero,4020cc8 <___vfprintf_internal_r+0x148>
 4020c90:	d8c02017 	ldw	r3,128(sp)
 4020c94:	d8801f17 	ldw	r2,124(sp)
 4020c98:	45400015 	stw	r21,0(r8)
 4020c9c:	1c47883a 	add	r3,r3,r17
 4020ca0:	10800044 	addi	r2,r2,1
 4020ca4:	d8c02015 	stw	r3,128(sp)
 4020ca8:	44400115 	stw	r17,4(r8)
 4020cac:	d8801f15 	stw	r2,124(sp)
 4020cb0:	00c001c4 	movi	r3,7
 4020cb4:	1880a716 	blt	r3,r2,4020f54 <___vfprintf_internal_r+0x3d4>
 4020cb8:	42000204 	addi	r8,r8,8
 4020cbc:	d9402f17 	ldw	r5,188(sp)
 4020cc0:	2c4b883a 	add	r5,r5,r17
 4020cc4:	d9402f15 	stw	r5,188(sp)
 4020cc8:	80800007 	ldb	r2,0(r16)
 4020ccc:	1000a826 	beq	r2,zero,4020f70 <___vfprintf_internal_r+0x3f0>
 4020cd0:	84400047 	ldb	r17,1(r16)
 4020cd4:	00bfffc4 	movi	r2,-1
 4020cd8:	85400044 	addi	r21,r16,1
 4020cdc:	d8002785 	stb	zero,158(sp)
 4020ce0:	0007883a 	mov	r3,zero
 4020ce4:	000f883a 	mov	r7,zero
 4020ce8:	d8802915 	stw	r2,164(sp)
 4020cec:	d8003115 	stw	zero,196(sp)
 4020cf0:	0025883a 	mov	r18,zero
 4020cf4:	01401604 	movi	r5,88
 4020cf8:	01800244 	movi	r6,9
 4020cfc:	02800a84 	movi	r10,42
 4020d00:	02401b04 	movi	r9,108
 4020d04:	ad400044 	addi	r21,r21,1
 4020d08:	88bff804 	addi	r2,r17,-32
 4020d0c:	28830436 	bltu	r5,r2,4021920 <___vfprintf_internal_r+0xda0>
 4020d10:	100490ba 	slli	r2,r2,2
 4020d14:	010100b4 	movhi	r4,1026
 4020d18:	21034a04 	addi	r4,r4,3368
 4020d1c:	1105883a 	add	r2,r2,r4
 4020d20:	10800017 	ldw	r2,0(r2)
 4020d24:	1000683a 	jmp	r2
 4020d28:	04021840 	call	402184 <__alt_mem_sdram_controller_2+0x402184>
 4020d2c:	04021920 	cmpeqi	r16,zero,2148
 4020d30:	04021920 	cmpeqi	r16,zero,2148
 4020d34:	04021860 	cmpeqi	r16,zero,2145
 4020d38:	04021920 	cmpeqi	r16,zero,2148
 4020d3c:	04021920 	cmpeqi	r16,zero,2148
 4020d40:	04021920 	cmpeqi	r16,zero,2148
 4020d44:	04021920 	cmpeqi	r16,zero,2148
 4020d48:	04021920 	cmpeqi	r16,zero,2148
 4020d4c:	04021920 	cmpeqi	r16,zero,2148
 4020d50:	04020fd4 	movui	r16,2111
 4020d54:	0402177c 	xorhi	r16,zero,2141
 4020d58:	04021920 	cmpeqi	r16,zero,2148
 4020d5c:	04020e9c 	xori	r16,zero,2106
 4020d60:	04020ffc 	xorhi	r16,zero,2111
 4020d64:	04021920 	cmpeqi	r16,zero,2148
 4020d68:	0402103c 	xorhi	r16,zero,2112
 4020d6c:	04021048 	cmpgei	r16,zero,2113
 4020d70:	04021048 	cmpgei	r16,zero,2113
 4020d74:	04021048 	cmpgei	r16,zero,2113
 4020d78:	04021048 	cmpgei	r16,zero,2113
 4020d7c:	04021048 	cmpgei	r16,zero,2113
 4020d80:	04021048 	cmpgei	r16,zero,2113
 4020d84:	04021048 	cmpgei	r16,zero,2113
 4020d88:	04021048 	cmpgei	r16,zero,2113
 4020d8c:	04021048 	cmpgei	r16,zero,2113
 4020d90:	04021920 	cmpeqi	r16,zero,2148
 4020d94:	04021920 	cmpeqi	r16,zero,2148
 4020d98:	04021920 	cmpeqi	r16,zero,2148
 4020d9c:	04021920 	cmpeqi	r16,zero,2148
 4020da0:	04021920 	cmpeqi	r16,zero,2148
 4020da4:	04021920 	cmpeqi	r16,zero,2148
 4020da8:	04021920 	cmpeqi	r16,zero,2148
 4020dac:	04021920 	cmpeqi	r16,zero,2148
 4020db0:	04021920 	cmpeqi	r16,zero,2148
 4020db4:	04021920 	cmpeqi	r16,zero,2148
 4020db8:	0402107c 	xorhi	r16,zero,2113
 4020dbc:	04021138 	rdprs	r16,zero,2116
 4020dc0:	04021920 	cmpeqi	r16,zero,2148
 4020dc4:	04021138 	rdprs	r16,zero,2116
 4020dc8:	04021920 	cmpeqi	r16,zero,2148
 4020dcc:	04021920 	cmpeqi	r16,zero,2148
 4020dd0:	04021920 	cmpeqi	r16,zero,2148
 4020dd4:	04021920 	cmpeqi	r16,zero,2148
 4020dd8:	040211d8 	cmpnei	r16,zero,2119
 4020ddc:	04021920 	cmpeqi	r16,zero,2148
 4020de0:	04021920 	cmpeqi	r16,zero,2148
 4020de4:	040211e4 	muli	r16,zero,2119
 4020de8:	04021920 	cmpeqi	r16,zero,2148
 4020dec:	04021920 	cmpeqi	r16,zero,2148
 4020df0:	04021920 	cmpeqi	r16,zero,2148
 4020df4:	04021920 	cmpeqi	r16,zero,2148
 4020df8:	04021920 	cmpeqi	r16,zero,2148
 4020dfc:	0402165c 	xori	r16,zero,2137
 4020e00:	04021920 	cmpeqi	r16,zero,2148
 4020e04:	04021920 	cmpeqi	r16,zero,2148
 4020e08:	040216bc 	xorhi	r16,zero,2138
 4020e0c:	04021920 	cmpeqi	r16,zero,2148
 4020e10:	04021920 	cmpeqi	r16,zero,2148
 4020e14:	04021920 	cmpeqi	r16,zero,2148
 4020e18:	04021920 	cmpeqi	r16,zero,2148
 4020e1c:	04021920 	cmpeqi	r16,zero,2148
 4020e20:	04021920 	cmpeqi	r16,zero,2148
 4020e24:	04021920 	cmpeqi	r16,zero,2148
 4020e28:	04021920 	cmpeqi	r16,zero,2148
 4020e2c:	04021920 	cmpeqi	r16,zero,2148
 4020e30:	04021920 	cmpeqi	r16,zero,2148
 4020e34:	040218cc 	andi	r16,zero,2147
 4020e38:	0402186c 	andhi	r16,zero,2145
 4020e3c:	04021138 	rdprs	r16,zero,2116
 4020e40:	04021138 	rdprs	r16,zero,2116
 4020e44:	04021138 	rdprs	r16,zero,2116
 4020e48:	0402187c 	xorhi	r16,zero,2145
 4020e4c:	0402186c 	andhi	r16,zero,2145
 4020e50:	04021920 	cmpeqi	r16,zero,2148
 4020e54:	04021920 	cmpeqi	r16,zero,2148
 4020e58:	04021888 	cmpgei	r16,zero,2146
 4020e5c:	04021920 	cmpeqi	r16,zero,2148
 4020e60:	04021898 	cmpnei	r16,zero,2146
 4020e64:	0402176c 	andhi	r16,zero,2141
 4020e68:	04020ea8 	cmpgeui	r16,zero,2106
 4020e6c:	0402178c 	andi	r16,zero,2142
 4020e70:	04021920 	cmpeqi	r16,zero,2148
 4020e74:	04021798 	cmpnei	r16,zero,2142
 4020e78:	04021920 	cmpeqi	r16,zero,2148
 4020e7c:	040217f4 	movhi	r16,2143
 4020e80:	04021920 	cmpeqi	r16,zero,2148
 4020e84:	04021920 	cmpeqi	r16,zero,2148
 4020e88:	04021804 	movi	r16,2144
 4020e8c:	d9003117 	ldw	r4,196(sp)
 4020e90:	d8802d15 	stw	r2,180(sp)
 4020e94:	0109c83a 	sub	r4,zero,r4
 4020e98:	d9003115 	stw	r4,196(sp)
 4020e9c:	94800114 	ori	r18,r18,4
 4020ea0:	ac400007 	ldb	r17,0(r21)
 4020ea4:	003f9706 	br	4020d04 <__alt_data_end+0xfffe0d04>
 4020ea8:	00800c04 	movi	r2,48
 4020eac:	d9002d17 	ldw	r4,180(sp)
 4020eb0:	d9402917 	ldw	r5,164(sp)
 4020eb4:	d8802705 	stb	r2,156(sp)
 4020eb8:	00801e04 	movi	r2,120
 4020ebc:	d8802745 	stb	r2,157(sp)
 4020ec0:	d8002785 	stb	zero,158(sp)
 4020ec4:	20c00104 	addi	r3,r4,4
 4020ec8:	24c00017 	ldw	r19,0(r4)
 4020ecc:	002d883a 	mov	r22,zero
 4020ed0:	90800094 	ori	r2,r18,2
 4020ed4:	28029a16 	blt	r5,zero,4021940 <___vfprintf_internal_r+0xdc0>
 4020ed8:	00bfdfc4 	movi	r2,-129
 4020edc:	90a4703a 	and	r18,r18,r2
 4020ee0:	d8c02d15 	stw	r3,180(sp)
 4020ee4:	94800094 	ori	r18,r18,2
 4020ee8:	9802871e 	bne	r19,zero,4021908 <___vfprintf_internal_r+0xd88>
 4020eec:	008100f4 	movhi	r2,1027
 4020ef0:	10849004 	addi	r2,r2,4672
 4020ef4:	d8803915 	stw	r2,228(sp)
 4020ef8:	04401e04 	movi	r17,120
 4020efc:	d8802917 	ldw	r2,164(sp)
 4020f00:	0039883a 	mov	fp,zero
 4020f04:	1001e926 	beq	r2,zero,40216ac <___vfprintf_internal_r+0xb2c>
 4020f08:	0027883a 	mov	r19,zero
 4020f0c:	002d883a 	mov	r22,zero
 4020f10:	00020506 	br	4021728 <___vfprintf_internal_r+0xba8>
 4020f14:	d9002c17 	ldw	r4,176(sp)
 4020f18:	b80b883a 	mov	r5,r23
 4020f1c:	4022e500 	call	4022e50 <__swsetup_r>
 4020f20:	1005ac1e 	bne	r2,zero,40225d4 <___vfprintf_internal_r+0x1a54>
 4020f24:	b880030b 	ldhu	r2,12(r23)
 4020f28:	00c00284 	movi	r3,10
 4020f2c:	1080068c 	andi	r2,r2,26
 4020f30:	10ff3c1e 	bne	r2,r3,4020c24 <__alt_data_end+0xfffe0c24>
 4020f34:	b880038f 	ldh	r2,14(r23)
 4020f38:	103f3a16 	blt	r2,zero,4020c24 <__alt_data_end+0xfffe0c24>
 4020f3c:	d9c02d17 	ldw	r7,180(sp)
 4020f40:	d9002c17 	ldw	r4,176(sp)
 4020f44:	a80d883a 	mov	r6,r21
 4020f48:	b80b883a 	mov	r5,r23
 4020f4c:	4022d940 	call	4022d94 <__sbprintf>
 4020f50:	00001106 	br	4020f98 <___vfprintf_internal_r+0x418>
 4020f54:	d9002c17 	ldw	r4,176(sp)
 4020f58:	d9801e04 	addi	r6,sp,120
 4020f5c:	b80b883a 	mov	r5,r23
 4020f60:	40282e40 	call	40282e4 <__sprint_r>
 4020f64:	1000081e 	bne	r2,zero,4020f88 <___vfprintf_internal_r+0x408>
 4020f68:	da000404 	addi	r8,sp,16
 4020f6c:	003f5306 	br	4020cbc <__alt_data_end+0xfffe0cbc>
 4020f70:	d8802017 	ldw	r2,128(sp)
 4020f74:	10000426 	beq	r2,zero,4020f88 <___vfprintf_internal_r+0x408>
 4020f78:	d9002c17 	ldw	r4,176(sp)
 4020f7c:	d9801e04 	addi	r6,sp,120
 4020f80:	b80b883a 	mov	r5,r23
 4020f84:	40282e40 	call	40282e4 <__sprint_r>
 4020f88:	b880030b 	ldhu	r2,12(r23)
 4020f8c:	1080100c 	andi	r2,r2,64
 4020f90:	1005901e 	bne	r2,zero,40225d4 <___vfprintf_internal_r+0x1a54>
 4020f94:	d8802f17 	ldw	r2,188(sp)
 4020f98:	dfc04717 	ldw	ra,284(sp)
 4020f9c:	df004617 	ldw	fp,280(sp)
 4020fa0:	ddc04517 	ldw	r23,276(sp)
 4020fa4:	dd804417 	ldw	r22,272(sp)
 4020fa8:	dd404317 	ldw	r21,268(sp)
 4020fac:	dd004217 	ldw	r20,264(sp)
 4020fb0:	dcc04117 	ldw	r19,260(sp)
 4020fb4:	dc804017 	ldw	r18,256(sp)
 4020fb8:	dc403f17 	ldw	r17,252(sp)
 4020fbc:	dc003e17 	ldw	r16,248(sp)
 4020fc0:	dec04804 	addi	sp,sp,288
 4020fc4:	f800283a 	ret
 4020fc8:	d9002c17 	ldw	r4,176(sp)
 4020fcc:	4024e240 	call	4024e24 <__sinit>
 4020fd0:	003f0406 	br	4020be4 <__alt_data_end+0xfffe0be4>
 4020fd4:	d8802d17 	ldw	r2,180(sp)
 4020fd8:	d9002d17 	ldw	r4,180(sp)
 4020fdc:	10800017 	ldw	r2,0(r2)
 4020fe0:	d8803115 	stw	r2,196(sp)
 4020fe4:	20800104 	addi	r2,r4,4
 4020fe8:	d9003117 	ldw	r4,196(sp)
 4020fec:	203fa716 	blt	r4,zero,4020e8c <__alt_data_end+0xfffe0e8c>
 4020ff0:	d8802d15 	stw	r2,180(sp)
 4020ff4:	ac400007 	ldb	r17,0(r21)
 4020ff8:	003f4206 	br	4020d04 <__alt_data_end+0xfffe0d04>
 4020ffc:	ac400007 	ldb	r17,0(r21)
 4021000:	aac00044 	addi	r11,r21,1
 4021004:	8a872826 	beq	r17,r10,4022ca8 <___vfprintf_internal_r+0x2128>
 4021008:	88bff404 	addi	r2,r17,-48
 402100c:	0009883a 	mov	r4,zero
 4021010:	30867d36 	bltu	r6,r2,4022a08 <___vfprintf_internal_r+0x1e88>
 4021014:	5c400007 	ldb	r17,0(r11)
 4021018:	210002a4 	muli	r4,r4,10
 402101c:	5d400044 	addi	r21,r11,1
 4021020:	a817883a 	mov	r11,r21
 4021024:	2089883a 	add	r4,r4,r2
 4021028:	88bff404 	addi	r2,r17,-48
 402102c:	30bff92e 	bgeu	r6,r2,4021014 <__alt_data_end+0xfffe1014>
 4021030:	2005c916 	blt	r4,zero,4022758 <___vfprintf_internal_r+0x1bd8>
 4021034:	d9002915 	stw	r4,164(sp)
 4021038:	003f3306 	br	4020d08 <__alt_data_end+0xfffe0d08>
 402103c:	94802014 	ori	r18,r18,128
 4021040:	ac400007 	ldb	r17,0(r21)
 4021044:	003f2f06 	br	4020d04 <__alt_data_end+0xfffe0d04>
 4021048:	a809883a 	mov	r4,r21
 402104c:	d8003115 	stw	zero,196(sp)
 4021050:	88bff404 	addi	r2,r17,-48
 4021054:	0017883a 	mov	r11,zero
 4021058:	24400007 	ldb	r17,0(r4)
 402105c:	5ac002a4 	muli	r11,r11,10
 4021060:	ad400044 	addi	r21,r21,1
 4021064:	a809883a 	mov	r4,r21
 4021068:	12d7883a 	add	r11,r2,r11
 402106c:	88bff404 	addi	r2,r17,-48
 4021070:	30bff92e 	bgeu	r6,r2,4021058 <__alt_data_end+0xfffe1058>
 4021074:	dac03115 	stw	r11,196(sp)
 4021078:	003f2306 	br	4020d08 <__alt_data_end+0xfffe0d08>
 402107c:	18c03fcc 	andi	r3,r3,255
 4021080:	18072b1e 	bne	r3,zero,4022d30 <___vfprintf_internal_r+0x21b0>
 4021084:	94800414 	ori	r18,r18,16
 4021088:	9080080c 	andi	r2,r18,32
 402108c:	10037b26 	beq	r2,zero,4021e7c <___vfprintf_internal_r+0x12fc>
 4021090:	d9402d17 	ldw	r5,180(sp)
 4021094:	28800117 	ldw	r2,4(r5)
 4021098:	2cc00017 	ldw	r19,0(r5)
 402109c:	29400204 	addi	r5,r5,8
 40210a0:	d9402d15 	stw	r5,180(sp)
 40210a4:	102d883a 	mov	r22,r2
 40210a8:	10044b16 	blt	r2,zero,40221d8 <___vfprintf_internal_r+0x1658>
 40210ac:	d9402917 	ldw	r5,164(sp)
 40210b0:	df002783 	ldbu	fp,158(sp)
 40210b4:	2803bc16 	blt	r5,zero,4021fa8 <___vfprintf_internal_r+0x1428>
 40210b8:	00ffdfc4 	movi	r3,-129
 40210bc:	9d84b03a 	or	r2,r19,r22
 40210c0:	90e4703a 	and	r18,r18,r3
 40210c4:	10017726 	beq	r2,zero,40216a4 <___vfprintf_internal_r+0xb24>
 40210c8:	b0038326 	beq	r22,zero,4021ed8 <___vfprintf_internal_r+0x1358>
 40210cc:	dc402a15 	stw	r17,168(sp)
 40210d0:	dc001e04 	addi	r16,sp,120
 40210d4:	b023883a 	mov	r17,r22
 40210d8:	402d883a 	mov	r22,r8
 40210dc:	9809883a 	mov	r4,r19
 40210e0:	880b883a 	mov	r5,r17
 40210e4:	01800284 	movi	r6,10
 40210e8:	000f883a 	mov	r7,zero
 40210ec:	402a6dc0 	call	402a6dc <__umoddi3>
 40210f0:	10800c04 	addi	r2,r2,48
 40210f4:	843fffc4 	addi	r16,r16,-1
 40210f8:	9809883a 	mov	r4,r19
 40210fc:	880b883a 	mov	r5,r17
 4021100:	80800005 	stb	r2,0(r16)
 4021104:	01800284 	movi	r6,10
 4021108:	000f883a 	mov	r7,zero
 402110c:	402a1640 	call	402a164 <__udivdi3>
 4021110:	1027883a 	mov	r19,r2
 4021114:	10c4b03a 	or	r2,r2,r3
 4021118:	1823883a 	mov	r17,r3
 402111c:	103fef1e 	bne	r2,zero,40210dc <__alt_data_end+0xfffe10dc>
 4021120:	d8c02817 	ldw	r3,160(sp)
 4021124:	dc402a17 	ldw	r17,168(sp)
 4021128:	b011883a 	mov	r8,r22
 402112c:	1c07c83a 	sub	r3,r3,r16
 4021130:	d8c02e15 	stw	r3,184(sp)
 4021134:	00005906 	br	402129c <___vfprintf_internal_r+0x71c>
 4021138:	18c03fcc 	andi	r3,r3,255
 402113c:	1806fa1e 	bne	r3,zero,4022d28 <___vfprintf_internal_r+0x21a8>
 4021140:	9080020c 	andi	r2,r18,8
 4021144:	10048a26 	beq	r2,zero,4022370 <___vfprintf_internal_r+0x17f0>
 4021148:	d8c02d17 	ldw	r3,180(sp)
 402114c:	d9002d17 	ldw	r4,180(sp)
 4021150:	d9402d17 	ldw	r5,180(sp)
 4021154:	18c00017 	ldw	r3,0(r3)
 4021158:	21000117 	ldw	r4,4(r4)
 402115c:	29400204 	addi	r5,r5,8
 4021160:	d8c03615 	stw	r3,216(sp)
 4021164:	d9003815 	stw	r4,224(sp)
 4021168:	d9402d15 	stw	r5,180(sp)
 402116c:	d9003617 	ldw	r4,216(sp)
 4021170:	d9403817 	ldw	r5,224(sp)
 4021174:	da003d15 	stw	r8,244(sp)
 4021178:	04000044 	movi	r16,1
 402117c:	4027f080 	call	4027f08 <__fpclassifyd>
 4021180:	da003d17 	ldw	r8,244(sp)
 4021184:	14041f1e 	bne	r2,r16,4022204 <___vfprintf_internal_r+0x1684>
 4021188:	d9003617 	ldw	r4,216(sp)
 402118c:	d9403817 	ldw	r5,224(sp)
 4021190:	000d883a 	mov	r6,zero
 4021194:	000f883a 	mov	r7,zero
 4021198:	402c0c00 	call	402c0c0 <__ledf2>
 402119c:	da003d17 	ldw	r8,244(sp)
 40211a0:	1005be16 	blt	r2,zero,402289c <___vfprintf_internal_r+0x1d1c>
 40211a4:	df002783 	ldbu	fp,158(sp)
 40211a8:	008011c4 	movi	r2,71
 40211ac:	1445330e 	bge	r2,r17,402267c <___vfprintf_internal_r+0x1afc>
 40211b0:	040100f4 	movhi	r16,1027
 40211b4:	84048804 	addi	r16,r16,4640
 40211b8:	00c000c4 	movi	r3,3
 40211bc:	00bfdfc4 	movi	r2,-129
 40211c0:	d8c02a15 	stw	r3,168(sp)
 40211c4:	90a4703a 	and	r18,r18,r2
 40211c8:	d8c02e15 	stw	r3,184(sp)
 40211cc:	d8002915 	stw	zero,164(sp)
 40211d0:	d8003215 	stw	zero,200(sp)
 40211d4:	00003706 	br	40212b4 <___vfprintf_internal_r+0x734>
 40211d8:	94800214 	ori	r18,r18,8
 40211dc:	ac400007 	ldb	r17,0(r21)
 40211e0:	003ec806 	br	4020d04 <__alt_data_end+0xfffe0d04>
 40211e4:	18c03fcc 	andi	r3,r3,255
 40211e8:	1806db1e 	bne	r3,zero,4022d58 <___vfprintf_internal_r+0x21d8>
 40211ec:	94800414 	ori	r18,r18,16
 40211f0:	9080080c 	andi	r2,r18,32
 40211f4:	1002d826 	beq	r2,zero,4021d58 <___vfprintf_internal_r+0x11d8>
 40211f8:	d9402d17 	ldw	r5,180(sp)
 40211fc:	d8c02917 	ldw	r3,164(sp)
 4021200:	d8002785 	stb	zero,158(sp)
 4021204:	28800204 	addi	r2,r5,8
 4021208:	2cc00017 	ldw	r19,0(r5)
 402120c:	2d800117 	ldw	r22,4(r5)
 4021210:	18048f16 	blt	r3,zero,4022450 <___vfprintf_internal_r+0x18d0>
 4021214:	013fdfc4 	movi	r4,-129
 4021218:	9d86b03a 	or	r3,r19,r22
 402121c:	d8802d15 	stw	r2,180(sp)
 4021220:	9124703a 	and	r18,r18,r4
 4021224:	1802d91e 	bne	r3,zero,4021d8c <___vfprintf_internal_r+0x120c>
 4021228:	d8c02917 	ldw	r3,164(sp)
 402122c:	0039883a 	mov	fp,zero
 4021230:	1805c326 	beq	r3,zero,4022940 <___vfprintf_internal_r+0x1dc0>
 4021234:	0027883a 	mov	r19,zero
 4021238:	002d883a 	mov	r22,zero
 402123c:	dc001e04 	addi	r16,sp,120
 4021240:	9806d0fa 	srli	r3,r19,3
 4021244:	b008977a 	slli	r4,r22,29
 4021248:	b02cd0fa 	srli	r22,r22,3
 402124c:	9cc001cc 	andi	r19,r19,7
 4021250:	98800c04 	addi	r2,r19,48
 4021254:	843fffc4 	addi	r16,r16,-1
 4021258:	20e6b03a 	or	r19,r4,r3
 402125c:	80800005 	stb	r2,0(r16)
 4021260:	9d86b03a 	or	r3,r19,r22
 4021264:	183ff61e 	bne	r3,zero,4021240 <__alt_data_end+0xfffe1240>
 4021268:	90c0004c 	andi	r3,r18,1
 402126c:	18013b26 	beq	r3,zero,402175c <___vfprintf_internal_r+0xbdc>
 4021270:	10803fcc 	andi	r2,r2,255
 4021274:	1080201c 	xori	r2,r2,128
 4021278:	10bfe004 	addi	r2,r2,-128
 402127c:	00c00c04 	movi	r3,48
 4021280:	10c13626 	beq	r2,r3,402175c <___vfprintf_internal_r+0xbdc>
 4021284:	80ffffc5 	stb	r3,-1(r16)
 4021288:	d8c02817 	ldw	r3,160(sp)
 402128c:	80bfffc4 	addi	r2,r16,-1
 4021290:	1021883a 	mov	r16,r2
 4021294:	1887c83a 	sub	r3,r3,r2
 4021298:	d8c02e15 	stw	r3,184(sp)
 402129c:	d8802e17 	ldw	r2,184(sp)
 40212a0:	d9002917 	ldw	r4,164(sp)
 40212a4:	1100010e 	bge	r2,r4,40212ac <___vfprintf_internal_r+0x72c>
 40212a8:	2005883a 	mov	r2,r4
 40212ac:	d8802a15 	stw	r2,168(sp)
 40212b0:	d8003215 	stw	zero,200(sp)
 40212b4:	e7003fcc 	andi	fp,fp,255
 40212b8:	e700201c 	xori	fp,fp,128
 40212bc:	e73fe004 	addi	fp,fp,-128
 40212c0:	e0000326 	beq	fp,zero,40212d0 <___vfprintf_internal_r+0x750>
 40212c4:	d8c02a17 	ldw	r3,168(sp)
 40212c8:	18c00044 	addi	r3,r3,1
 40212cc:	d8c02a15 	stw	r3,168(sp)
 40212d0:	90c0008c 	andi	r3,r18,2
 40212d4:	d8c02b15 	stw	r3,172(sp)
 40212d8:	18000326 	beq	r3,zero,40212e8 <___vfprintf_internal_r+0x768>
 40212dc:	d8c02a17 	ldw	r3,168(sp)
 40212e0:	18c00084 	addi	r3,r3,2
 40212e4:	d8c02a15 	stw	r3,168(sp)
 40212e8:	90c0210c 	andi	r3,r18,132
 40212ec:	d8c03015 	stw	r3,192(sp)
 40212f0:	1801a31e 	bne	r3,zero,4021980 <___vfprintf_internal_r+0xe00>
 40212f4:	d9003117 	ldw	r4,196(sp)
 40212f8:	d8c02a17 	ldw	r3,168(sp)
 40212fc:	20e7c83a 	sub	r19,r4,r3
 4021300:	04c19f0e 	bge	zero,r19,4021980 <___vfprintf_internal_r+0xe00>
 4021304:	02400404 	movi	r9,16
 4021308:	d8c02017 	ldw	r3,128(sp)
 402130c:	d8801f17 	ldw	r2,124(sp)
 4021310:	4cc50d0e 	bge	r9,r19,4022748 <___vfprintf_internal_r+0x1bc8>
 4021314:	014100f4 	movhi	r5,1027
 4021318:	29449b84 	addi	r5,r5,4718
 402131c:	dc403b15 	stw	r17,236(sp)
 4021320:	d9403515 	stw	r5,212(sp)
 4021324:	9823883a 	mov	r17,r19
 4021328:	482d883a 	mov	r22,r9
 402132c:	9027883a 	mov	r19,r18
 4021330:	070001c4 	movi	fp,7
 4021334:	8025883a 	mov	r18,r16
 4021338:	dc002c17 	ldw	r16,176(sp)
 402133c:	00000306 	br	402134c <___vfprintf_internal_r+0x7cc>
 4021340:	8c7ffc04 	addi	r17,r17,-16
 4021344:	42000204 	addi	r8,r8,8
 4021348:	b440130e 	bge	r22,r17,4021398 <___vfprintf_internal_r+0x818>
 402134c:	010100f4 	movhi	r4,1027
 4021350:	18c00404 	addi	r3,r3,16
 4021354:	10800044 	addi	r2,r2,1
 4021358:	21049b84 	addi	r4,r4,4718
 402135c:	41000015 	stw	r4,0(r8)
 4021360:	45800115 	stw	r22,4(r8)
 4021364:	d8c02015 	stw	r3,128(sp)
 4021368:	d8801f15 	stw	r2,124(sp)
 402136c:	e0bff40e 	bge	fp,r2,4021340 <__alt_data_end+0xfffe1340>
 4021370:	d9801e04 	addi	r6,sp,120
 4021374:	b80b883a 	mov	r5,r23
 4021378:	8009883a 	mov	r4,r16
 402137c:	40282e40 	call	40282e4 <__sprint_r>
 4021380:	103f011e 	bne	r2,zero,4020f88 <__alt_data_end+0xfffe0f88>
 4021384:	8c7ffc04 	addi	r17,r17,-16
 4021388:	d8c02017 	ldw	r3,128(sp)
 402138c:	d8801f17 	ldw	r2,124(sp)
 4021390:	da000404 	addi	r8,sp,16
 4021394:	b47fed16 	blt	r22,r17,402134c <__alt_data_end+0xfffe134c>
 4021398:	9021883a 	mov	r16,r18
 402139c:	9825883a 	mov	r18,r19
 40213a0:	8827883a 	mov	r19,r17
 40213a4:	dc403b17 	ldw	r17,236(sp)
 40213a8:	d9403517 	ldw	r5,212(sp)
 40213ac:	98c7883a 	add	r3,r19,r3
 40213b0:	10800044 	addi	r2,r2,1
 40213b4:	41400015 	stw	r5,0(r8)
 40213b8:	44c00115 	stw	r19,4(r8)
 40213bc:	d8c02015 	stw	r3,128(sp)
 40213c0:	d8801f15 	stw	r2,124(sp)
 40213c4:	010001c4 	movi	r4,7
 40213c8:	2082a316 	blt	r4,r2,4021e58 <___vfprintf_internal_r+0x12d8>
 40213cc:	df002787 	ldb	fp,158(sp)
 40213d0:	42000204 	addi	r8,r8,8
 40213d4:	e0000c26 	beq	fp,zero,4021408 <___vfprintf_internal_r+0x888>
 40213d8:	d8801f17 	ldw	r2,124(sp)
 40213dc:	d9002784 	addi	r4,sp,158
 40213e0:	18c00044 	addi	r3,r3,1
 40213e4:	10800044 	addi	r2,r2,1
 40213e8:	41000015 	stw	r4,0(r8)
 40213ec:	01000044 	movi	r4,1
 40213f0:	41000115 	stw	r4,4(r8)
 40213f4:	d8c02015 	stw	r3,128(sp)
 40213f8:	d8801f15 	stw	r2,124(sp)
 40213fc:	010001c4 	movi	r4,7
 4021400:	20823c16 	blt	r4,r2,4021cf4 <___vfprintf_internal_r+0x1174>
 4021404:	42000204 	addi	r8,r8,8
 4021408:	d8802b17 	ldw	r2,172(sp)
 402140c:	10000c26 	beq	r2,zero,4021440 <___vfprintf_internal_r+0x8c0>
 4021410:	d8801f17 	ldw	r2,124(sp)
 4021414:	d9002704 	addi	r4,sp,156
 4021418:	18c00084 	addi	r3,r3,2
 402141c:	10800044 	addi	r2,r2,1
 4021420:	41000015 	stw	r4,0(r8)
 4021424:	01000084 	movi	r4,2
 4021428:	41000115 	stw	r4,4(r8)
 402142c:	d8c02015 	stw	r3,128(sp)
 4021430:	d8801f15 	stw	r2,124(sp)
 4021434:	010001c4 	movi	r4,7
 4021438:	20823616 	blt	r4,r2,4021d14 <___vfprintf_internal_r+0x1194>
 402143c:	42000204 	addi	r8,r8,8
 4021440:	d9003017 	ldw	r4,192(sp)
 4021444:	00802004 	movi	r2,128
 4021448:	20819926 	beq	r4,r2,4021ab0 <___vfprintf_internal_r+0xf30>
 402144c:	d9402917 	ldw	r5,164(sp)
 4021450:	d8802e17 	ldw	r2,184(sp)
 4021454:	28adc83a 	sub	r22,r5,r2
 4021458:	0580310e 	bge	zero,r22,4021520 <___vfprintf_internal_r+0x9a0>
 402145c:	07000404 	movi	fp,16
 4021460:	d8801f17 	ldw	r2,124(sp)
 4021464:	e584140e 	bge	fp,r22,40224b8 <___vfprintf_internal_r+0x1938>
 4021468:	014100f4 	movhi	r5,1027
 402146c:	29449784 	addi	r5,r5,4702
 4021470:	dc402915 	stw	r17,164(sp)
 4021474:	d9402b15 	stw	r5,172(sp)
 4021478:	b023883a 	mov	r17,r22
 402147c:	04c001c4 	movi	r19,7
 4021480:	a82d883a 	mov	r22,r21
 4021484:	902b883a 	mov	r21,r18
 4021488:	8025883a 	mov	r18,r16
 402148c:	dc002c17 	ldw	r16,176(sp)
 4021490:	00000306 	br	40214a0 <___vfprintf_internal_r+0x920>
 4021494:	8c7ffc04 	addi	r17,r17,-16
 4021498:	42000204 	addi	r8,r8,8
 402149c:	e440110e 	bge	fp,r17,40214e4 <___vfprintf_internal_r+0x964>
 40214a0:	18c00404 	addi	r3,r3,16
 40214a4:	10800044 	addi	r2,r2,1
 40214a8:	45000015 	stw	r20,0(r8)
 40214ac:	47000115 	stw	fp,4(r8)
 40214b0:	d8c02015 	stw	r3,128(sp)
 40214b4:	d8801f15 	stw	r2,124(sp)
 40214b8:	98bff60e 	bge	r19,r2,4021494 <__alt_data_end+0xfffe1494>
 40214bc:	d9801e04 	addi	r6,sp,120
 40214c0:	b80b883a 	mov	r5,r23
 40214c4:	8009883a 	mov	r4,r16
 40214c8:	40282e40 	call	40282e4 <__sprint_r>
 40214cc:	103eae1e 	bne	r2,zero,4020f88 <__alt_data_end+0xfffe0f88>
 40214d0:	8c7ffc04 	addi	r17,r17,-16
 40214d4:	d8c02017 	ldw	r3,128(sp)
 40214d8:	d8801f17 	ldw	r2,124(sp)
 40214dc:	da000404 	addi	r8,sp,16
 40214e0:	e47fef16 	blt	fp,r17,40214a0 <__alt_data_end+0xfffe14a0>
 40214e4:	9021883a 	mov	r16,r18
 40214e8:	a825883a 	mov	r18,r21
 40214ec:	b02b883a 	mov	r21,r22
 40214f0:	882d883a 	mov	r22,r17
 40214f4:	dc402917 	ldw	r17,164(sp)
 40214f8:	d9002b17 	ldw	r4,172(sp)
 40214fc:	1d87883a 	add	r3,r3,r22
 4021500:	10800044 	addi	r2,r2,1
 4021504:	41000015 	stw	r4,0(r8)
 4021508:	45800115 	stw	r22,4(r8)
 402150c:	d8c02015 	stw	r3,128(sp)
 4021510:	d8801f15 	stw	r2,124(sp)
 4021514:	010001c4 	movi	r4,7
 4021518:	2081ee16 	blt	r4,r2,4021cd4 <___vfprintf_internal_r+0x1154>
 402151c:	42000204 	addi	r8,r8,8
 4021520:	9080400c 	andi	r2,r18,256
 4021524:	1001181e 	bne	r2,zero,4021988 <___vfprintf_internal_r+0xe08>
 4021528:	d9402e17 	ldw	r5,184(sp)
 402152c:	d8801f17 	ldw	r2,124(sp)
 4021530:	44000015 	stw	r16,0(r8)
 4021534:	1947883a 	add	r3,r3,r5
 4021538:	10800044 	addi	r2,r2,1
 402153c:	41400115 	stw	r5,4(r8)
 4021540:	d8c02015 	stw	r3,128(sp)
 4021544:	d8801f15 	stw	r2,124(sp)
 4021548:	010001c4 	movi	r4,7
 402154c:	2081d316 	blt	r4,r2,4021c9c <___vfprintf_internal_r+0x111c>
 4021550:	42000204 	addi	r8,r8,8
 4021554:	9480010c 	andi	r18,r18,4
 4021558:	90003226 	beq	r18,zero,4021624 <___vfprintf_internal_r+0xaa4>
 402155c:	d9403117 	ldw	r5,196(sp)
 4021560:	d8802a17 	ldw	r2,168(sp)
 4021564:	28a1c83a 	sub	r16,r5,r2
 4021568:	04002e0e 	bge	zero,r16,4021624 <___vfprintf_internal_r+0xaa4>
 402156c:	04400404 	movi	r17,16
 4021570:	d8801f17 	ldw	r2,124(sp)
 4021574:	8c04a20e 	bge	r17,r16,4022800 <___vfprintf_internal_r+0x1c80>
 4021578:	014100f4 	movhi	r5,1027
 402157c:	29449b84 	addi	r5,r5,4718
 4021580:	d9403515 	stw	r5,212(sp)
 4021584:	048001c4 	movi	r18,7
 4021588:	dcc02c17 	ldw	r19,176(sp)
 402158c:	00000306 	br	402159c <___vfprintf_internal_r+0xa1c>
 4021590:	843ffc04 	addi	r16,r16,-16
 4021594:	42000204 	addi	r8,r8,8
 4021598:	8c00130e 	bge	r17,r16,40215e8 <___vfprintf_internal_r+0xa68>
 402159c:	010100f4 	movhi	r4,1027
 40215a0:	18c00404 	addi	r3,r3,16
 40215a4:	10800044 	addi	r2,r2,1
 40215a8:	21049b84 	addi	r4,r4,4718
 40215ac:	41000015 	stw	r4,0(r8)
 40215b0:	44400115 	stw	r17,4(r8)
 40215b4:	d8c02015 	stw	r3,128(sp)
 40215b8:	d8801f15 	stw	r2,124(sp)
 40215bc:	90bff40e 	bge	r18,r2,4021590 <__alt_data_end+0xfffe1590>
 40215c0:	d9801e04 	addi	r6,sp,120
 40215c4:	b80b883a 	mov	r5,r23
 40215c8:	9809883a 	mov	r4,r19
 40215cc:	40282e40 	call	40282e4 <__sprint_r>
 40215d0:	103e6d1e 	bne	r2,zero,4020f88 <__alt_data_end+0xfffe0f88>
 40215d4:	843ffc04 	addi	r16,r16,-16
 40215d8:	d8c02017 	ldw	r3,128(sp)
 40215dc:	d8801f17 	ldw	r2,124(sp)
 40215e0:	da000404 	addi	r8,sp,16
 40215e4:	8c3fed16 	blt	r17,r16,402159c <__alt_data_end+0xfffe159c>
 40215e8:	d9403517 	ldw	r5,212(sp)
 40215ec:	1c07883a 	add	r3,r3,r16
 40215f0:	10800044 	addi	r2,r2,1
 40215f4:	41400015 	stw	r5,0(r8)
 40215f8:	44000115 	stw	r16,4(r8)
 40215fc:	d8c02015 	stw	r3,128(sp)
 4021600:	d8801f15 	stw	r2,124(sp)
 4021604:	010001c4 	movi	r4,7
 4021608:	2080060e 	bge	r4,r2,4021624 <___vfprintf_internal_r+0xaa4>
 402160c:	d9002c17 	ldw	r4,176(sp)
 4021610:	d9801e04 	addi	r6,sp,120
 4021614:	b80b883a 	mov	r5,r23
 4021618:	40282e40 	call	40282e4 <__sprint_r>
 402161c:	103e5a1e 	bne	r2,zero,4020f88 <__alt_data_end+0xfffe0f88>
 4021620:	d8c02017 	ldw	r3,128(sp)
 4021624:	d8803117 	ldw	r2,196(sp)
 4021628:	d9002a17 	ldw	r4,168(sp)
 402162c:	1100010e 	bge	r2,r4,4021634 <___vfprintf_internal_r+0xab4>
 4021630:	2005883a 	mov	r2,r4
 4021634:	d9402f17 	ldw	r5,188(sp)
 4021638:	288b883a 	add	r5,r5,r2
 402163c:	d9402f15 	stw	r5,188(sp)
 4021640:	18019e1e 	bne	r3,zero,4021cbc <___vfprintf_internal_r+0x113c>
 4021644:	a8800007 	ldb	r2,0(r21)
 4021648:	d8001f15 	stw	zero,124(sp)
 402164c:	da000404 	addi	r8,sp,16
 4021650:	103d851e 	bne	r2,zero,4020c68 <__alt_data_end+0xfffe0c68>
 4021654:	a821883a 	mov	r16,r21
 4021658:	003d9b06 	br	4020cc8 <__alt_data_end+0xfffe0cc8>
 402165c:	18c03fcc 	andi	r3,r3,255
 4021660:	1805c11e 	bne	r3,zero,4022d68 <___vfprintf_internal_r+0x21e8>
 4021664:	94800414 	ori	r18,r18,16
 4021668:	9080080c 	andi	r2,r18,32
 402166c:	10020c26 	beq	r2,zero,4021ea0 <___vfprintf_internal_r+0x1320>
 4021670:	d8802d17 	ldw	r2,180(sp)
 4021674:	d9002917 	ldw	r4,164(sp)
 4021678:	d8002785 	stb	zero,158(sp)
 402167c:	10c00204 	addi	r3,r2,8
 4021680:	14c00017 	ldw	r19,0(r2)
 4021684:	15800117 	ldw	r22,4(r2)
 4021688:	20040f16 	blt	r4,zero,40226c8 <___vfprintf_internal_r+0x1b48>
 402168c:	013fdfc4 	movi	r4,-129
 4021690:	9d84b03a 	or	r2,r19,r22
 4021694:	d8c02d15 	stw	r3,180(sp)
 4021698:	9124703a 	and	r18,r18,r4
 402169c:	0039883a 	mov	fp,zero
 40216a0:	103e891e 	bne	r2,zero,40210c8 <__alt_data_end+0xfffe10c8>
 40216a4:	d9002917 	ldw	r4,164(sp)
 40216a8:	2002c11e 	bne	r4,zero,40221b0 <___vfprintf_internal_r+0x1630>
 40216ac:	d8002915 	stw	zero,164(sp)
 40216b0:	d8002e15 	stw	zero,184(sp)
 40216b4:	dc001e04 	addi	r16,sp,120
 40216b8:	003ef806 	br	402129c <__alt_data_end+0xfffe129c>
 40216bc:	18c03fcc 	andi	r3,r3,255
 40216c0:	18059d1e 	bne	r3,zero,4022d38 <___vfprintf_internal_r+0x21b8>
 40216c4:	014100f4 	movhi	r5,1027
 40216c8:	29448b04 	addi	r5,r5,4652
 40216cc:	d9403915 	stw	r5,228(sp)
 40216d0:	9080080c 	andi	r2,r18,32
 40216d4:	10005226 	beq	r2,zero,4021820 <___vfprintf_internal_r+0xca0>
 40216d8:	d8802d17 	ldw	r2,180(sp)
 40216dc:	14c00017 	ldw	r19,0(r2)
 40216e0:	15800117 	ldw	r22,4(r2)
 40216e4:	10800204 	addi	r2,r2,8
 40216e8:	d8802d15 	stw	r2,180(sp)
 40216ec:	9080004c 	andi	r2,r18,1
 40216f0:	10019026 	beq	r2,zero,4021d34 <___vfprintf_internal_r+0x11b4>
 40216f4:	9d84b03a 	or	r2,r19,r22
 40216f8:	10036926 	beq	r2,zero,40224a0 <___vfprintf_internal_r+0x1920>
 40216fc:	d8c02917 	ldw	r3,164(sp)
 4021700:	00800c04 	movi	r2,48
 4021704:	d8802705 	stb	r2,156(sp)
 4021708:	dc402745 	stb	r17,157(sp)
 402170c:	d8002785 	stb	zero,158(sp)
 4021710:	90800094 	ori	r2,r18,2
 4021714:	18045d16 	blt	r3,zero,402288c <___vfprintf_internal_r+0x1d0c>
 4021718:	00bfdfc4 	movi	r2,-129
 402171c:	90a4703a 	and	r18,r18,r2
 4021720:	94800094 	ori	r18,r18,2
 4021724:	0039883a 	mov	fp,zero
 4021728:	d9003917 	ldw	r4,228(sp)
 402172c:	dc001e04 	addi	r16,sp,120
 4021730:	988003cc 	andi	r2,r19,15
 4021734:	b006973a 	slli	r3,r22,28
 4021738:	2085883a 	add	r2,r4,r2
 402173c:	9826d13a 	srli	r19,r19,4
 4021740:	10800003 	ldbu	r2,0(r2)
 4021744:	b02cd13a 	srli	r22,r22,4
 4021748:	843fffc4 	addi	r16,r16,-1
 402174c:	1ce6b03a 	or	r19,r3,r19
 4021750:	80800005 	stb	r2,0(r16)
 4021754:	9d84b03a 	or	r2,r19,r22
 4021758:	103ff51e 	bne	r2,zero,4021730 <__alt_data_end+0xfffe1730>
 402175c:	d8c02817 	ldw	r3,160(sp)
 4021760:	1c07c83a 	sub	r3,r3,r16
 4021764:	d8c02e15 	stw	r3,184(sp)
 4021768:	003ecc06 	br	402129c <__alt_data_end+0xfffe129c>
 402176c:	18c03fcc 	andi	r3,r3,255
 4021770:	183e9f26 	beq	r3,zero,40211f0 <__alt_data_end+0xfffe11f0>
 4021774:	d9c02785 	stb	r7,158(sp)
 4021778:	003e9d06 	br	40211f0 <__alt_data_end+0xfffe11f0>
 402177c:	00c00044 	movi	r3,1
 4021780:	01c00ac4 	movi	r7,43
 4021784:	ac400007 	ldb	r17,0(r21)
 4021788:	003d5e06 	br	4020d04 <__alt_data_end+0xfffe0d04>
 402178c:	94800814 	ori	r18,r18,32
 4021790:	ac400007 	ldb	r17,0(r21)
 4021794:	003d5b06 	br	4020d04 <__alt_data_end+0xfffe0d04>
 4021798:	d8c02d17 	ldw	r3,180(sp)
 402179c:	d8002785 	stb	zero,158(sp)
 40217a0:	1c000017 	ldw	r16,0(r3)
 40217a4:	1cc00104 	addi	r19,r3,4
 40217a8:	80041926 	beq	r16,zero,4022810 <___vfprintf_internal_r+0x1c90>
 40217ac:	d9002917 	ldw	r4,164(sp)
 40217b0:	2003d016 	blt	r4,zero,40226f4 <___vfprintf_internal_r+0x1b74>
 40217b4:	200d883a 	mov	r6,r4
 40217b8:	000b883a 	mov	r5,zero
 40217bc:	8009883a 	mov	r4,r16
 40217c0:	da003d15 	stw	r8,244(sp)
 40217c4:	40263900 	call	4026390 <memchr>
 40217c8:	da003d17 	ldw	r8,244(sp)
 40217cc:	10045426 	beq	r2,zero,4022920 <___vfprintf_internal_r+0x1da0>
 40217d0:	1405c83a 	sub	r2,r2,r16
 40217d4:	d8802e15 	stw	r2,184(sp)
 40217d8:	1003cc16 	blt	r2,zero,402270c <___vfprintf_internal_r+0x1b8c>
 40217dc:	df002783 	ldbu	fp,158(sp)
 40217e0:	d8802a15 	stw	r2,168(sp)
 40217e4:	dcc02d15 	stw	r19,180(sp)
 40217e8:	d8002915 	stw	zero,164(sp)
 40217ec:	d8003215 	stw	zero,200(sp)
 40217f0:	003eb006 	br	40212b4 <__alt_data_end+0xfffe12b4>
 40217f4:	18c03fcc 	andi	r3,r3,255
 40217f8:	183f9b26 	beq	r3,zero,4021668 <__alt_data_end+0xfffe1668>
 40217fc:	d9c02785 	stb	r7,158(sp)
 4021800:	003f9906 	br	4021668 <__alt_data_end+0xfffe1668>
 4021804:	18c03fcc 	andi	r3,r3,255
 4021808:	1805551e 	bne	r3,zero,4022d60 <___vfprintf_internal_r+0x21e0>
 402180c:	014100f4 	movhi	r5,1027
 4021810:	29449004 	addi	r5,r5,4672
 4021814:	d9403915 	stw	r5,228(sp)
 4021818:	9080080c 	andi	r2,r18,32
 402181c:	103fae1e 	bne	r2,zero,40216d8 <__alt_data_end+0xfffe16d8>
 4021820:	9080040c 	andi	r2,r18,16
 4021824:	1002de26 	beq	r2,zero,40223a0 <___vfprintf_internal_r+0x1820>
 4021828:	d8c02d17 	ldw	r3,180(sp)
 402182c:	002d883a 	mov	r22,zero
 4021830:	1cc00017 	ldw	r19,0(r3)
 4021834:	18c00104 	addi	r3,r3,4
 4021838:	d8c02d15 	stw	r3,180(sp)
 402183c:	003fab06 	br	40216ec <__alt_data_end+0xfffe16ec>
 4021840:	38803fcc 	andi	r2,r7,255
 4021844:	1080201c 	xori	r2,r2,128
 4021848:	10bfe004 	addi	r2,r2,-128
 402184c:	1002d21e 	bne	r2,zero,4022398 <___vfprintf_internal_r+0x1818>
 4021850:	00c00044 	movi	r3,1
 4021854:	01c00804 	movi	r7,32
 4021858:	ac400007 	ldb	r17,0(r21)
 402185c:	003d2906 	br	4020d04 <__alt_data_end+0xfffe0d04>
 4021860:	94800054 	ori	r18,r18,1
 4021864:	ac400007 	ldb	r17,0(r21)
 4021868:	003d2606 	br	4020d04 <__alt_data_end+0xfffe0d04>
 402186c:	18c03fcc 	andi	r3,r3,255
 4021870:	183e0526 	beq	r3,zero,4021088 <__alt_data_end+0xfffe1088>
 4021874:	d9c02785 	stb	r7,158(sp)
 4021878:	003e0306 	br	4021088 <__alt_data_end+0xfffe1088>
 402187c:	94801014 	ori	r18,r18,64
 4021880:	ac400007 	ldb	r17,0(r21)
 4021884:	003d1f06 	br	4020d04 <__alt_data_end+0xfffe0d04>
 4021888:	ac400007 	ldb	r17,0(r21)
 402188c:	8a438726 	beq	r17,r9,40226ac <___vfprintf_internal_r+0x1b2c>
 4021890:	94800414 	ori	r18,r18,16
 4021894:	003d1b06 	br	4020d04 <__alt_data_end+0xfffe0d04>
 4021898:	18c03fcc 	andi	r3,r3,255
 402189c:	1805341e 	bne	r3,zero,4022d70 <___vfprintf_internal_r+0x21f0>
 40218a0:	9080080c 	andi	r2,r18,32
 40218a4:	1002cd26 	beq	r2,zero,40223dc <___vfprintf_internal_r+0x185c>
 40218a8:	d9402d17 	ldw	r5,180(sp)
 40218ac:	d9002f17 	ldw	r4,188(sp)
 40218b0:	28800017 	ldw	r2,0(r5)
 40218b4:	2007d7fa 	srai	r3,r4,31
 40218b8:	29400104 	addi	r5,r5,4
 40218bc:	d9402d15 	stw	r5,180(sp)
 40218c0:	11000015 	stw	r4,0(r2)
 40218c4:	10c00115 	stw	r3,4(r2)
 40218c8:	003ce506 	br	4020c60 <__alt_data_end+0xfffe0c60>
 40218cc:	d8c02d17 	ldw	r3,180(sp)
 40218d0:	d9002d17 	ldw	r4,180(sp)
 40218d4:	d8002785 	stb	zero,158(sp)
 40218d8:	18800017 	ldw	r2,0(r3)
 40218dc:	21000104 	addi	r4,r4,4
 40218e0:	00c00044 	movi	r3,1
 40218e4:	d8c02a15 	stw	r3,168(sp)
 40218e8:	d8801405 	stb	r2,80(sp)
 40218ec:	d9002d15 	stw	r4,180(sp)
 40218f0:	d8c02e15 	stw	r3,184(sp)
 40218f4:	d8002915 	stw	zero,164(sp)
 40218f8:	d8003215 	stw	zero,200(sp)
 40218fc:	dc001404 	addi	r16,sp,80
 4021900:	0039883a 	mov	fp,zero
 4021904:	003e7206 	br	40212d0 <__alt_data_end+0xfffe12d0>
 4021908:	010100f4 	movhi	r4,1027
 402190c:	21049004 	addi	r4,r4,4672
 4021910:	0039883a 	mov	fp,zero
 4021914:	d9003915 	stw	r4,228(sp)
 4021918:	04401e04 	movi	r17,120
 402191c:	003f8206 	br	4021728 <__alt_data_end+0xfffe1728>
 4021920:	18c03fcc 	andi	r3,r3,255
 4021924:	1805061e 	bne	r3,zero,4022d40 <___vfprintf_internal_r+0x21c0>
 4021928:	883d9126 	beq	r17,zero,4020f70 <__alt_data_end+0xfffe0f70>
 402192c:	00c00044 	movi	r3,1
 4021930:	d8c02a15 	stw	r3,168(sp)
 4021934:	dc401405 	stb	r17,80(sp)
 4021938:	d8002785 	stb	zero,158(sp)
 402193c:	003fec06 	br	40218f0 <__alt_data_end+0xfffe18f0>
 4021940:	014100f4 	movhi	r5,1027
 4021944:	29449004 	addi	r5,r5,4672
 4021948:	d9403915 	stw	r5,228(sp)
 402194c:	d8c02d15 	stw	r3,180(sp)
 4021950:	1025883a 	mov	r18,r2
 4021954:	04401e04 	movi	r17,120
 4021958:	9d84b03a 	or	r2,r19,r22
 402195c:	1000fc1e 	bne	r2,zero,4021d50 <___vfprintf_internal_r+0x11d0>
 4021960:	0039883a 	mov	fp,zero
 4021964:	00800084 	movi	r2,2
 4021968:	10803fcc 	andi	r2,r2,255
 402196c:	00c00044 	movi	r3,1
 4021970:	10c20f26 	beq	r2,r3,40221b0 <___vfprintf_internal_r+0x1630>
 4021974:	00c00084 	movi	r3,2
 4021978:	10fd6326 	beq	r2,r3,4020f08 <__alt_data_end+0xfffe0f08>
 402197c:	003e2d06 	br	4021234 <__alt_data_end+0xfffe1234>
 4021980:	d8c02017 	ldw	r3,128(sp)
 4021984:	003e9306 	br	40213d4 <__alt_data_end+0xfffe13d4>
 4021988:	00801944 	movi	r2,101
 402198c:	14407e0e 	bge	r2,r17,4021b88 <___vfprintf_internal_r+0x1008>
 4021990:	d9003617 	ldw	r4,216(sp)
 4021994:	d9403817 	ldw	r5,224(sp)
 4021998:	000d883a 	mov	r6,zero
 402199c:	000f883a 	mov	r7,zero
 40219a0:	d8c03c15 	stw	r3,240(sp)
 40219a4:	da003d15 	stw	r8,244(sp)
 40219a8:	402bf5c0 	call	402bf5c <__eqdf2>
 40219ac:	d8c03c17 	ldw	r3,240(sp)
 40219b0:	da003d17 	ldw	r8,244(sp)
 40219b4:	1000f71e 	bne	r2,zero,4021d94 <___vfprintf_internal_r+0x1214>
 40219b8:	d8801f17 	ldw	r2,124(sp)
 40219bc:	010100f4 	movhi	r4,1027
 40219c0:	21049704 	addi	r4,r4,4700
 40219c4:	18c00044 	addi	r3,r3,1
 40219c8:	10800044 	addi	r2,r2,1
 40219cc:	41000015 	stw	r4,0(r8)
 40219d0:	01000044 	movi	r4,1
 40219d4:	41000115 	stw	r4,4(r8)
 40219d8:	d8c02015 	stw	r3,128(sp)
 40219dc:	d8801f15 	stw	r2,124(sp)
 40219e0:	010001c4 	movi	r4,7
 40219e4:	2082b816 	blt	r4,r2,40224c8 <___vfprintf_internal_r+0x1948>
 40219e8:	42000204 	addi	r8,r8,8
 40219ec:	d8802617 	ldw	r2,152(sp)
 40219f0:	d9403317 	ldw	r5,204(sp)
 40219f4:	11400216 	blt	r2,r5,4021a00 <___vfprintf_internal_r+0xe80>
 40219f8:	9080004c 	andi	r2,r18,1
 40219fc:	103ed526 	beq	r2,zero,4021554 <__alt_data_end+0xfffe1554>
 4021a00:	d8803717 	ldw	r2,220(sp)
 4021a04:	d9003417 	ldw	r4,208(sp)
 4021a08:	d9403717 	ldw	r5,220(sp)
 4021a0c:	1887883a 	add	r3,r3,r2
 4021a10:	d8801f17 	ldw	r2,124(sp)
 4021a14:	41000015 	stw	r4,0(r8)
 4021a18:	41400115 	stw	r5,4(r8)
 4021a1c:	10800044 	addi	r2,r2,1
 4021a20:	d8c02015 	stw	r3,128(sp)
 4021a24:	d8801f15 	stw	r2,124(sp)
 4021a28:	010001c4 	movi	r4,7
 4021a2c:	20832916 	blt	r4,r2,40226d4 <___vfprintf_internal_r+0x1b54>
 4021a30:	42000204 	addi	r8,r8,8
 4021a34:	d8803317 	ldw	r2,204(sp)
 4021a38:	143fffc4 	addi	r16,r2,-1
 4021a3c:	043ec50e 	bge	zero,r16,4021554 <__alt_data_end+0xfffe1554>
 4021a40:	04400404 	movi	r17,16
 4021a44:	d8801f17 	ldw	r2,124(sp)
 4021a48:	8c00880e 	bge	r17,r16,4021c6c <___vfprintf_internal_r+0x10ec>
 4021a4c:	014100f4 	movhi	r5,1027
 4021a50:	29449784 	addi	r5,r5,4702
 4021a54:	d9402b15 	stw	r5,172(sp)
 4021a58:	058001c4 	movi	r22,7
 4021a5c:	dcc02c17 	ldw	r19,176(sp)
 4021a60:	00000306 	br	4021a70 <___vfprintf_internal_r+0xef0>
 4021a64:	42000204 	addi	r8,r8,8
 4021a68:	843ffc04 	addi	r16,r16,-16
 4021a6c:	8c00820e 	bge	r17,r16,4021c78 <___vfprintf_internal_r+0x10f8>
 4021a70:	18c00404 	addi	r3,r3,16
 4021a74:	10800044 	addi	r2,r2,1
 4021a78:	45000015 	stw	r20,0(r8)
 4021a7c:	44400115 	stw	r17,4(r8)
 4021a80:	d8c02015 	stw	r3,128(sp)
 4021a84:	d8801f15 	stw	r2,124(sp)
 4021a88:	b0bff60e 	bge	r22,r2,4021a64 <__alt_data_end+0xfffe1a64>
 4021a8c:	d9801e04 	addi	r6,sp,120
 4021a90:	b80b883a 	mov	r5,r23
 4021a94:	9809883a 	mov	r4,r19
 4021a98:	40282e40 	call	40282e4 <__sprint_r>
 4021a9c:	103d3a1e 	bne	r2,zero,4020f88 <__alt_data_end+0xfffe0f88>
 4021aa0:	d8c02017 	ldw	r3,128(sp)
 4021aa4:	d8801f17 	ldw	r2,124(sp)
 4021aa8:	da000404 	addi	r8,sp,16
 4021aac:	003fee06 	br	4021a68 <__alt_data_end+0xfffe1a68>
 4021ab0:	d9403117 	ldw	r5,196(sp)
 4021ab4:	d8802a17 	ldw	r2,168(sp)
 4021ab8:	28adc83a 	sub	r22,r5,r2
 4021abc:	05be630e 	bge	zero,r22,402144c <__alt_data_end+0xfffe144c>
 4021ac0:	07000404 	movi	fp,16
 4021ac4:	d8801f17 	ldw	r2,124(sp)
 4021ac8:	e5838f0e 	bge	fp,r22,4022908 <___vfprintf_internal_r+0x1d88>
 4021acc:	014100f4 	movhi	r5,1027
 4021ad0:	29449784 	addi	r5,r5,4702
 4021ad4:	dc403015 	stw	r17,192(sp)
 4021ad8:	d9402b15 	stw	r5,172(sp)
 4021adc:	b023883a 	mov	r17,r22
 4021ae0:	04c001c4 	movi	r19,7
 4021ae4:	a82d883a 	mov	r22,r21
 4021ae8:	902b883a 	mov	r21,r18
 4021aec:	8025883a 	mov	r18,r16
 4021af0:	dc002c17 	ldw	r16,176(sp)
 4021af4:	00000306 	br	4021b04 <___vfprintf_internal_r+0xf84>
 4021af8:	8c7ffc04 	addi	r17,r17,-16
 4021afc:	42000204 	addi	r8,r8,8
 4021b00:	e440110e 	bge	fp,r17,4021b48 <___vfprintf_internal_r+0xfc8>
 4021b04:	18c00404 	addi	r3,r3,16
 4021b08:	10800044 	addi	r2,r2,1
 4021b0c:	45000015 	stw	r20,0(r8)
 4021b10:	47000115 	stw	fp,4(r8)
 4021b14:	d8c02015 	stw	r3,128(sp)
 4021b18:	d8801f15 	stw	r2,124(sp)
 4021b1c:	98bff60e 	bge	r19,r2,4021af8 <__alt_data_end+0xfffe1af8>
 4021b20:	d9801e04 	addi	r6,sp,120
 4021b24:	b80b883a 	mov	r5,r23
 4021b28:	8009883a 	mov	r4,r16
 4021b2c:	40282e40 	call	40282e4 <__sprint_r>
 4021b30:	103d151e 	bne	r2,zero,4020f88 <__alt_data_end+0xfffe0f88>
 4021b34:	8c7ffc04 	addi	r17,r17,-16
 4021b38:	d8c02017 	ldw	r3,128(sp)
 4021b3c:	d8801f17 	ldw	r2,124(sp)
 4021b40:	da000404 	addi	r8,sp,16
 4021b44:	e47fef16 	blt	fp,r17,4021b04 <__alt_data_end+0xfffe1b04>
 4021b48:	9021883a 	mov	r16,r18
 4021b4c:	a825883a 	mov	r18,r21
 4021b50:	b02b883a 	mov	r21,r22
 4021b54:	882d883a 	mov	r22,r17
 4021b58:	dc403017 	ldw	r17,192(sp)
 4021b5c:	d9002b17 	ldw	r4,172(sp)
 4021b60:	1d87883a 	add	r3,r3,r22
 4021b64:	10800044 	addi	r2,r2,1
 4021b68:	41000015 	stw	r4,0(r8)
 4021b6c:	45800115 	stw	r22,4(r8)
 4021b70:	d8c02015 	stw	r3,128(sp)
 4021b74:	d8801f15 	stw	r2,124(sp)
 4021b78:	010001c4 	movi	r4,7
 4021b7c:	20818e16 	blt	r4,r2,40221b8 <___vfprintf_internal_r+0x1638>
 4021b80:	42000204 	addi	r8,r8,8
 4021b84:	003e3106 	br	402144c <__alt_data_end+0xfffe144c>
 4021b88:	d9403317 	ldw	r5,204(sp)
 4021b8c:	00800044 	movi	r2,1
 4021b90:	18c00044 	addi	r3,r3,1
 4021b94:	1141530e 	bge	r2,r5,40220e4 <___vfprintf_internal_r+0x1564>
 4021b98:	dc401f17 	ldw	r17,124(sp)
 4021b9c:	00800044 	movi	r2,1
 4021ba0:	40800115 	stw	r2,4(r8)
 4021ba4:	8c400044 	addi	r17,r17,1
 4021ba8:	44000015 	stw	r16,0(r8)
 4021bac:	d8c02015 	stw	r3,128(sp)
 4021bb0:	dc401f15 	stw	r17,124(sp)
 4021bb4:	008001c4 	movi	r2,7
 4021bb8:	14416b16 	blt	r2,r17,4022168 <___vfprintf_internal_r+0x15e8>
 4021bbc:	42000204 	addi	r8,r8,8
 4021bc0:	d8803717 	ldw	r2,220(sp)
 4021bc4:	d9003417 	ldw	r4,208(sp)
 4021bc8:	8c400044 	addi	r17,r17,1
 4021bcc:	10c7883a 	add	r3,r2,r3
 4021bd0:	40800115 	stw	r2,4(r8)
 4021bd4:	41000015 	stw	r4,0(r8)
 4021bd8:	d8c02015 	stw	r3,128(sp)
 4021bdc:	dc401f15 	stw	r17,124(sp)
 4021be0:	008001c4 	movi	r2,7
 4021be4:	14416916 	blt	r2,r17,402218c <___vfprintf_internal_r+0x160c>
 4021be8:	45800204 	addi	r22,r8,8
 4021bec:	d9003617 	ldw	r4,216(sp)
 4021bf0:	d9403817 	ldw	r5,224(sp)
 4021bf4:	000d883a 	mov	r6,zero
 4021bf8:	000f883a 	mov	r7,zero
 4021bfc:	d8c03c15 	stw	r3,240(sp)
 4021c00:	402bf5c0 	call	402bf5c <__eqdf2>
 4021c04:	d8c03c17 	ldw	r3,240(sp)
 4021c08:	1000bc26 	beq	r2,zero,4021efc <___vfprintf_internal_r+0x137c>
 4021c0c:	d9403317 	ldw	r5,204(sp)
 4021c10:	84000044 	addi	r16,r16,1
 4021c14:	8c400044 	addi	r17,r17,1
 4021c18:	28bfffc4 	addi	r2,r5,-1
 4021c1c:	1887883a 	add	r3,r3,r2
 4021c20:	b0800115 	stw	r2,4(r22)
 4021c24:	b4000015 	stw	r16,0(r22)
 4021c28:	d8c02015 	stw	r3,128(sp)
 4021c2c:	dc401f15 	stw	r17,124(sp)
 4021c30:	008001c4 	movi	r2,7
 4021c34:	14414316 	blt	r2,r17,4022144 <___vfprintf_internal_r+0x15c4>
 4021c38:	b5800204 	addi	r22,r22,8
 4021c3c:	d9003a17 	ldw	r4,232(sp)
 4021c40:	df0022c4 	addi	fp,sp,139
 4021c44:	8c400044 	addi	r17,r17,1
 4021c48:	20c7883a 	add	r3,r4,r3
 4021c4c:	b7000015 	stw	fp,0(r22)
 4021c50:	b1000115 	stw	r4,4(r22)
 4021c54:	d8c02015 	stw	r3,128(sp)
 4021c58:	dc401f15 	stw	r17,124(sp)
 4021c5c:	008001c4 	movi	r2,7
 4021c60:	14400e16 	blt	r2,r17,4021c9c <___vfprintf_internal_r+0x111c>
 4021c64:	b2000204 	addi	r8,r22,8
 4021c68:	003e3a06 	br	4021554 <__alt_data_end+0xfffe1554>
 4021c6c:	010100f4 	movhi	r4,1027
 4021c70:	21049784 	addi	r4,r4,4702
 4021c74:	d9002b15 	stw	r4,172(sp)
 4021c78:	d9002b17 	ldw	r4,172(sp)
 4021c7c:	1c07883a 	add	r3,r3,r16
 4021c80:	44000115 	stw	r16,4(r8)
 4021c84:	41000015 	stw	r4,0(r8)
 4021c88:	10800044 	addi	r2,r2,1
 4021c8c:	d8c02015 	stw	r3,128(sp)
 4021c90:	d8801f15 	stw	r2,124(sp)
 4021c94:	010001c4 	movi	r4,7
 4021c98:	20be2d0e 	bge	r4,r2,4021550 <__alt_data_end+0xfffe1550>
 4021c9c:	d9002c17 	ldw	r4,176(sp)
 4021ca0:	d9801e04 	addi	r6,sp,120
 4021ca4:	b80b883a 	mov	r5,r23
 4021ca8:	40282e40 	call	40282e4 <__sprint_r>
 4021cac:	103cb61e 	bne	r2,zero,4020f88 <__alt_data_end+0xfffe0f88>
 4021cb0:	d8c02017 	ldw	r3,128(sp)
 4021cb4:	da000404 	addi	r8,sp,16
 4021cb8:	003e2606 	br	4021554 <__alt_data_end+0xfffe1554>
 4021cbc:	d9002c17 	ldw	r4,176(sp)
 4021cc0:	d9801e04 	addi	r6,sp,120
 4021cc4:	b80b883a 	mov	r5,r23
 4021cc8:	40282e40 	call	40282e4 <__sprint_r>
 4021ccc:	103e5d26 	beq	r2,zero,4021644 <__alt_data_end+0xfffe1644>
 4021cd0:	003cad06 	br	4020f88 <__alt_data_end+0xfffe0f88>
 4021cd4:	d9002c17 	ldw	r4,176(sp)
 4021cd8:	d9801e04 	addi	r6,sp,120
 4021cdc:	b80b883a 	mov	r5,r23
 4021ce0:	40282e40 	call	40282e4 <__sprint_r>
 4021ce4:	103ca81e 	bne	r2,zero,4020f88 <__alt_data_end+0xfffe0f88>
 4021ce8:	d8c02017 	ldw	r3,128(sp)
 4021cec:	da000404 	addi	r8,sp,16
 4021cf0:	003e0b06 	br	4021520 <__alt_data_end+0xfffe1520>
 4021cf4:	d9002c17 	ldw	r4,176(sp)
 4021cf8:	d9801e04 	addi	r6,sp,120
 4021cfc:	b80b883a 	mov	r5,r23
 4021d00:	40282e40 	call	40282e4 <__sprint_r>
 4021d04:	103ca01e 	bne	r2,zero,4020f88 <__alt_data_end+0xfffe0f88>
 4021d08:	d8c02017 	ldw	r3,128(sp)
 4021d0c:	da000404 	addi	r8,sp,16
 4021d10:	003dbd06 	br	4021408 <__alt_data_end+0xfffe1408>
 4021d14:	d9002c17 	ldw	r4,176(sp)
 4021d18:	d9801e04 	addi	r6,sp,120
 4021d1c:	b80b883a 	mov	r5,r23
 4021d20:	40282e40 	call	40282e4 <__sprint_r>
 4021d24:	103c981e 	bne	r2,zero,4020f88 <__alt_data_end+0xfffe0f88>
 4021d28:	d8c02017 	ldw	r3,128(sp)
 4021d2c:	da000404 	addi	r8,sp,16
 4021d30:	003dc306 	br	4021440 <__alt_data_end+0xfffe1440>
 4021d34:	d8802917 	ldw	r2,164(sp)
 4021d38:	d8002785 	stb	zero,158(sp)
 4021d3c:	103f0616 	blt	r2,zero,4021958 <__alt_data_end+0xfffe1958>
 4021d40:	00ffdfc4 	movi	r3,-129
 4021d44:	9d84b03a 	or	r2,r19,r22
 4021d48:	90e4703a 	and	r18,r18,r3
 4021d4c:	103c6b26 	beq	r2,zero,4020efc <__alt_data_end+0xfffe0efc>
 4021d50:	0039883a 	mov	fp,zero
 4021d54:	003e7406 	br	4021728 <__alt_data_end+0xfffe1728>
 4021d58:	9080040c 	andi	r2,r18,16
 4021d5c:	1001b326 	beq	r2,zero,402242c <___vfprintf_internal_r+0x18ac>
 4021d60:	d9002d17 	ldw	r4,180(sp)
 4021d64:	d9402917 	ldw	r5,164(sp)
 4021d68:	d8002785 	stb	zero,158(sp)
 4021d6c:	20800104 	addi	r2,r4,4
 4021d70:	24c00017 	ldw	r19,0(r4)
 4021d74:	002d883a 	mov	r22,zero
 4021d78:	2801b516 	blt	r5,zero,4022450 <___vfprintf_internal_r+0x18d0>
 4021d7c:	00ffdfc4 	movi	r3,-129
 4021d80:	d8802d15 	stw	r2,180(sp)
 4021d84:	90e4703a 	and	r18,r18,r3
 4021d88:	983d2726 	beq	r19,zero,4021228 <__alt_data_end+0xfffe1228>
 4021d8c:	0039883a 	mov	fp,zero
 4021d90:	003d2a06 	br	402123c <__alt_data_end+0xfffe123c>
 4021d94:	dc402617 	ldw	r17,152(sp)
 4021d98:	0441d30e 	bge	zero,r17,40224e8 <___vfprintf_internal_r+0x1968>
 4021d9c:	dc403217 	ldw	r17,200(sp)
 4021da0:	d8803317 	ldw	r2,204(sp)
 4021da4:	1440010e 	bge	r2,r17,4021dac <___vfprintf_internal_r+0x122c>
 4021da8:	1023883a 	mov	r17,r2
 4021dac:	04400a0e 	bge	zero,r17,4021dd8 <___vfprintf_internal_r+0x1258>
 4021db0:	d8801f17 	ldw	r2,124(sp)
 4021db4:	1c47883a 	add	r3,r3,r17
 4021db8:	44000015 	stw	r16,0(r8)
 4021dbc:	10800044 	addi	r2,r2,1
 4021dc0:	44400115 	stw	r17,4(r8)
 4021dc4:	d8c02015 	stw	r3,128(sp)
 4021dc8:	d8801f15 	stw	r2,124(sp)
 4021dcc:	010001c4 	movi	r4,7
 4021dd0:	20826516 	blt	r4,r2,4022768 <___vfprintf_internal_r+0x1be8>
 4021dd4:	42000204 	addi	r8,r8,8
 4021dd8:	88026116 	blt	r17,zero,4022760 <___vfprintf_internal_r+0x1be0>
 4021ddc:	d9003217 	ldw	r4,200(sp)
 4021de0:	2463c83a 	sub	r17,r4,r17
 4021de4:	04407b0e 	bge	zero,r17,4021fd4 <___vfprintf_internal_r+0x1454>
 4021de8:	05800404 	movi	r22,16
 4021dec:	d8801f17 	ldw	r2,124(sp)
 4021df0:	b4419d0e 	bge	r22,r17,4022468 <___vfprintf_internal_r+0x18e8>
 4021df4:	010100f4 	movhi	r4,1027
 4021df8:	21049784 	addi	r4,r4,4702
 4021dfc:	d9002b15 	stw	r4,172(sp)
 4021e00:	070001c4 	movi	fp,7
 4021e04:	dcc02c17 	ldw	r19,176(sp)
 4021e08:	00000306 	br	4021e18 <___vfprintf_internal_r+0x1298>
 4021e0c:	42000204 	addi	r8,r8,8
 4021e10:	8c7ffc04 	addi	r17,r17,-16
 4021e14:	b441970e 	bge	r22,r17,4022474 <___vfprintf_internal_r+0x18f4>
 4021e18:	18c00404 	addi	r3,r3,16
 4021e1c:	10800044 	addi	r2,r2,1
 4021e20:	45000015 	stw	r20,0(r8)
 4021e24:	45800115 	stw	r22,4(r8)
 4021e28:	d8c02015 	stw	r3,128(sp)
 4021e2c:	d8801f15 	stw	r2,124(sp)
 4021e30:	e0bff60e 	bge	fp,r2,4021e0c <__alt_data_end+0xfffe1e0c>
 4021e34:	d9801e04 	addi	r6,sp,120
 4021e38:	b80b883a 	mov	r5,r23
 4021e3c:	9809883a 	mov	r4,r19
 4021e40:	40282e40 	call	40282e4 <__sprint_r>
 4021e44:	103c501e 	bne	r2,zero,4020f88 <__alt_data_end+0xfffe0f88>
 4021e48:	d8c02017 	ldw	r3,128(sp)
 4021e4c:	d8801f17 	ldw	r2,124(sp)
 4021e50:	da000404 	addi	r8,sp,16
 4021e54:	003fee06 	br	4021e10 <__alt_data_end+0xfffe1e10>
 4021e58:	d9002c17 	ldw	r4,176(sp)
 4021e5c:	d9801e04 	addi	r6,sp,120
 4021e60:	b80b883a 	mov	r5,r23
 4021e64:	40282e40 	call	40282e4 <__sprint_r>
 4021e68:	103c471e 	bne	r2,zero,4020f88 <__alt_data_end+0xfffe0f88>
 4021e6c:	d8c02017 	ldw	r3,128(sp)
 4021e70:	df002787 	ldb	fp,158(sp)
 4021e74:	da000404 	addi	r8,sp,16
 4021e78:	003d5606 	br	40213d4 <__alt_data_end+0xfffe13d4>
 4021e7c:	9080040c 	andi	r2,r18,16
 4021e80:	10016126 	beq	r2,zero,4022408 <___vfprintf_internal_r+0x1888>
 4021e84:	d8802d17 	ldw	r2,180(sp)
 4021e88:	14c00017 	ldw	r19,0(r2)
 4021e8c:	10800104 	addi	r2,r2,4
 4021e90:	d8802d15 	stw	r2,180(sp)
 4021e94:	982dd7fa 	srai	r22,r19,31
 4021e98:	b005883a 	mov	r2,r22
 4021e9c:	003c8206 	br	40210a8 <__alt_data_end+0xfffe10a8>
 4021ea0:	9080040c 	andi	r2,r18,16
 4021ea4:	10003526 	beq	r2,zero,4021f7c <___vfprintf_internal_r+0x13fc>
 4021ea8:	d9402d17 	ldw	r5,180(sp)
 4021eac:	d8c02917 	ldw	r3,164(sp)
 4021eb0:	d8002785 	stb	zero,158(sp)
 4021eb4:	28800104 	addi	r2,r5,4
 4021eb8:	2cc00017 	ldw	r19,0(r5)
 4021ebc:	002d883a 	mov	r22,zero
 4021ec0:	18003716 	blt	r3,zero,4021fa0 <___vfprintf_internal_r+0x1420>
 4021ec4:	00ffdfc4 	movi	r3,-129
 4021ec8:	d8802d15 	stw	r2,180(sp)
 4021ecc:	90e4703a 	and	r18,r18,r3
 4021ed0:	0039883a 	mov	fp,zero
 4021ed4:	983df326 	beq	r19,zero,40216a4 <__alt_data_end+0xfffe16a4>
 4021ed8:	00800244 	movi	r2,9
 4021edc:	14fc7b36 	bltu	r2,r19,40210cc <__alt_data_end+0xfffe10cc>
 4021ee0:	d8c02817 	ldw	r3,160(sp)
 4021ee4:	dc001dc4 	addi	r16,sp,119
 4021ee8:	9cc00c04 	addi	r19,r19,48
 4021eec:	1c07c83a 	sub	r3,r3,r16
 4021ef0:	dcc01dc5 	stb	r19,119(sp)
 4021ef4:	d8c02e15 	stw	r3,184(sp)
 4021ef8:	003ce806 	br	402129c <__alt_data_end+0xfffe129c>
 4021efc:	d8803317 	ldw	r2,204(sp)
 4021f00:	143fffc4 	addi	r16,r2,-1
 4021f04:	043f4d0e 	bge	zero,r16,4021c3c <__alt_data_end+0xfffe1c3c>
 4021f08:	07000404 	movi	fp,16
 4021f0c:	e400810e 	bge	fp,r16,4022114 <___vfprintf_internal_r+0x1594>
 4021f10:	014100f4 	movhi	r5,1027
 4021f14:	29449784 	addi	r5,r5,4702
 4021f18:	d9402b15 	stw	r5,172(sp)
 4021f1c:	01c001c4 	movi	r7,7
 4021f20:	dcc02c17 	ldw	r19,176(sp)
 4021f24:	00000306 	br	4021f34 <___vfprintf_internal_r+0x13b4>
 4021f28:	b5800204 	addi	r22,r22,8
 4021f2c:	843ffc04 	addi	r16,r16,-16
 4021f30:	e4007b0e 	bge	fp,r16,4022120 <___vfprintf_internal_r+0x15a0>
 4021f34:	18c00404 	addi	r3,r3,16
 4021f38:	8c400044 	addi	r17,r17,1
 4021f3c:	b5000015 	stw	r20,0(r22)
 4021f40:	b7000115 	stw	fp,4(r22)
 4021f44:	d8c02015 	stw	r3,128(sp)
 4021f48:	dc401f15 	stw	r17,124(sp)
 4021f4c:	3c7ff60e 	bge	r7,r17,4021f28 <__alt_data_end+0xfffe1f28>
 4021f50:	d9801e04 	addi	r6,sp,120
 4021f54:	b80b883a 	mov	r5,r23
 4021f58:	9809883a 	mov	r4,r19
 4021f5c:	d9c03c15 	stw	r7,240(sp)
 4021f60:	40282e40 	call	40282e4 <__sprint_r>
 4021f64:	d9c03c17 	ldw	r7,240(sp)
 4021f68:	103c071e 	bne	r2,zero,4020f88 <__alt_data_end+0xfffe0f88>
 4021f6c:	d8c02017 	ldw	r3,128(sp)
 4021f70:	dc401f17 	ldw	r17,124(sp)
 4021f74:	dd800404 	addi	r22,sp,16
 4021f78:	003fec06 	br	4021f2c <__alt_data_end+0xfffe1f2c>
 4021f7c:	9080100c 	andi	r2,r18,64
 4021f80:	d8002785 	stb	zero,158(sp)
 4021f84:	10010e26 	beq	r2,zero,40223c0 <___vfprintf_internal_r+0x1840>
 4021f88:	d9002d17 	ldw	r4,180(sp)
 4021f8c:	d9402917 	ldw	r5,164(sp)
 4021f90:	002d883a 	mov	r22,zero
 4021f94:	20800104 	addi	r2,r4,4
 4021f98:	24c0000b 	ldhu	r19,0(r4)
 4021f9c:	283fc90e 	bge	r5,zero,4021ec4 <__alt_data_end+0xfffe1ec4>
 4021fa0:	d8802d15 	stw	r2,180(sp)
 4021fa4:	0039883a 	mov	fp,zero
 4021fa8:	9d84b03a 	or	r2,r19,r22
 4021fac:	103c461e 	bne	r2,zero,40210c8 <__alt_data_end+0xfffe10c8>
 4021fb0:	00800044 	movi	r2,1
 4021fb4:	003e6c06 	br	4021968 <__alt_data_end+0xfffe1968>
 4021fb8:	d9002c17 	ldw	r4,176(sp)
 4021fbc:	d9801e04 	addi	r6,sp,120
 4021fc0:	b80b883a 	mov	r5,r23
 4021fc4:	40282e40 	call	40282e4 <__sprint_r>
 4021fc8:	103bef1e 	bne	r2,zero,4020f88 <__alt_data_end+0xfffe0f88>
 4021fcc:	d8c02017 	ldw	r3,128(sp)
 4021fd0:	da000404 	addi	r8,sp,16
 4021fd4:	d9003217 	ldw	r4,200(sp)
 4021fd8:	d8802617 	ldw	r2,152(sp)
 4021fdc:	d9403317 	ldw	r5,204(sp)
 4021fe0:	8123883a 	add	r17,r16,r4
 4021fe4:	11400216 	blt	r2,r5,4021ff0 <___vfprintf_internal_r+0x1470>
 4021fe8:	9100004c 	andi	r4,r18,1
 4021fec:	20000d26 	beq	r4,zero,4022024 <___vfprintf_internal_r+0x14a4>
 4021ff0:	d9003717 	ldw	r4,220(sp)
 4021ff4:	d9403417 	ldw	r5,208(sp)
 4021ff8:	1907883a 	add	r3,r3,r4
 4021ffc:	d9001f17 	ldw	r4,124(sp)
 4022000:	41400015 	stw	r5,0(r8)
 4022004:	d9403717 	ldw	r5,220(sp)
 4022008:	21000044 	addi	r4,r4,1
 402200c:	d8c02015 	stw	r3,128(sp)
 4022010:	41400115 	stw	r5,4(r8)
 4022014:	d9001f15 	stw	r4,124(sp)
 4022018:	014001c4 	movi	r5,7
 402201c:	2901e816 	blt	r5,r4,40227c0 <___vfprintf_internal_r+0x1c40>
 4022020:	42000204 	addi	r8,r8,8
 4022024:	d9003317 	ldw	r4,204(sp)
 4022028:	8121883a 	add	r16,r16,r4
 402202c:	2085c83a 	sub	r2,r4,r2
 4022030:	8461c83a 	sub	r16,r16,r17
 4022034:	1400010e 	bge	r2,r16,402203c <___vfprintf_internal_r+0x14bc>
 4022038:	1021883a 	mov	r16,r2
 402203c:	04000a0e 	bge	zero,r16,4022068 <___vfprintf_internal_r+0x14e8>
 4022040:	d9001f17 	ldw	r4,124(sp)
 4022044:	1c07883a 	add	r3,r3,r16
 4022048:	44400015 	stw	r17,0(r8)
 402204c:	21000044 	addi	r4,r4,1
 4022050:	44000115 	stw	r16,4(r8)
 4022054:	d8c02015 	stw	r3,128(sp)
 4022058:	d9001f15 	stw	r4,124(sp)
 402205c:	014001c4 	movi	r5,7
 4022060:	2901fb16 	blt	r5,r4,4022850 <___vfprintf_internal_r+0x1cd0>
 4022064:	42000204 	addi	r8,r8,8
 4022068:	8001f716 	blt	r16,zero,4022848 <___vfprintf_internal_r+0x1cc8>
 402206c:	1421c83a 	sub	r16,r2,r16
 4022070:	043d380e 	bge	zero,r16,4021554 <__alt_data_end+0xfffe1554>
 4022074:	04400404 	movi	r17,16
 4022078:	d8801f17 	ldw	r2,124(sp)
 402207c:	8c3efb0e 	bge	r17,r16,4021c6c <__alt_data_end+0xfffe1c6c>
 4022080:	014100f4 	movhi	r5,1027
 4022084:	29449784 	addi	r5,r5,4702
 4022088:	d9402b15 	stw	r5,172(sp)
 402208c:	058001c4 	movi	r22,7
 4022090:	dcc02c17 	ldw	r19,176(sp)
 4022094:	00000306 	br	40220a4 <___vfprintf_internal_r+0x1524>
 4022098:	42000204 	addi	r8,r8,8
 402209c:	843ffc04 	addi	r16,r16,-16
 40220a0:	8c3ef50e 	bge	r17,r16,4021c78 <__alt_data_end+0xfffe1c78>
 40220a4:	18c00404 	addi	r3,r3,16
 40220a8:	10800044 	addi	r2,r2,1
 40220ac:	45000015 	stw	r20,0(r8)
 40220b0:	44400115 	stw	r17,4(r8)
 40220b4:	d8c02015 	stw	r3,128(sp)
 40220b8:	d8801f15 	stw	r2,124(sp)
 40220bc:	b0bff60e 	bge	r22,r2,4022098 <__alt_data_end+0xfffe2098>
 40220c0:	d9801e04 	addi	r6,sp,120
 40220c4:	b80b883a 	mov	r5,r23
 40220c8:	9809883a 	mov	r4,r19
 40220cc:	40282e40 	call	40282e4 <__sprint_r>
 40220d0:	103bad1e 	bne	r2,zero,4020f88 <__alt_data_end+0xfffe0f88>
 40220d4:	d8c02017 	ldw	r3,128(sp)
 40220d8:	d8801f17 	ldw	r2,124(sp)
 40220dc:	da000404 	addi	r8,sp,16
 40220e0:	003fee06 	br	402209c <__alt_data_end+0xfffe209c>
 40220e4:	9088703a 	and	r4,r18,r2
 40220e8:	203eab1e 	bne	r4,zero,4021b98 <__alt_data_end+0xfffe1b98>
 40220ec:	dc401f17 	ldw	r17,124(sp)
 40220f0:	40800115 	stw	r2,4(r8)
 40220f4:	44000015 	stw	r16,0(r8)
 40220f8:	8c400044 	addi	r17,r17,1
 40220fc:	d8c02015 	stw	r3,128(sp)
 4022100:	dc401f15 	stw	r17,124(sp)
 4022104:	008001c4 	movi	r2,7
 4022108:	14400e16 	blt	r2,r17,4022144 <___vfprintf_internal_r+0x15c4>
 402210c:	45800204 	addi	r22,r8,8
 4022110:	003eca06 	br	4021c3c <__alt_data_end+0xfffe1c3c>
 4022114:	010100f4 	movhi	r4,1027
 4022118:	21049784 	addi	r4,r4,4702
 402211c:	d9002b15 	stw	r4,172(sp)
 4022120:	d8802b17 	ldw	r2,172(sp)
 4022124:	1c07883a 	add	r3,r3,r16
 4022128:	8c400044 	addi	r17,r17,1
 402212c:	b0800015 	stw	r2,0(r22)
 4022130:	b4000115 	stw	r16,4(r22)
 4022134:	d8c02015 	stw	r3,128(sp)
 4022138:	dc401f15 	stw	r17,124(sp)
 402213c:	008001c4 	movi	r2,7
 4022140:	147ebd0e 	bge	r2,r17,4021c38 <__alt_data_end+0xfffe1c38>
 4022144:	d9002c17 	ldw	r4,176(sp)
 4022148:	d9801e04 	addi	r6,sp,120
 402214c:	b80b883a 	mov	r5,r23
 4022150:	40282e40 	call	40282e4 <__sprint_r>
 4022154:	103b8c1e 	bne	r2,zero,4020f88 <__alt_data_end+0xfffe0f88>
 4022158:	d8c02017 	ldw	r3,128(sp)
 402215c:	dc401f17 	ldw	r17,124(sp)
 4022160:	dd800404 	addi	r22,sp,16
 4022164:	003eb506 	br	4021c3c <__alt_data_end+0xfffe1c3c>
 4022168:	d9002c17 	ldw	r4,176(sp)
 402216c:	d9801e04 	addi	r6,sp,120
 4022170:	b80b883a 	mov	r5,r23
 4022174:	40282e40 	call	40282e4 <__sprint_r>
 4022178:	103b831e 	bne	r2,zero,4020f88 <__alt_data_end+0xfffe0f88>
 402217c:	d8c02017 	ldw	r3,128(sp)
 4022180:	dc401f17 	ldw	r17,124(sp)
 4022184:	da000404 	addi	r8,sp,16
 4022188:	003e8d06 	br	4021bc0 <__alt_data_end+0xfffe1bc0>
 402218c:	d9002c17 	ldw	r4,176(sp)
 4022190:	d9801e04 	addi	r6,sp,120
 4022194:	b80b883a 	mov	r5,r23
 4022198:	40282e40 	call	40282e4 <__sprint_r>
 402219c:	103b7a1e 	bne	r2,zero,4020f88 <__alt_data_end+0xfffe0f88>
 40221a0:	d8c02017 	ldw	r3,128(sp)
 40221a4:	dc401f17 	ldw	r17,124(sp)
 40221a8:	dd800404 	addi	r22,sp,16
 40221ac:	003e8f06 	br	4021bec <__alt_data_end+0xfffe1bec>
 40221b0:	0027883a 	mov	r19,zero
 40221b4:	003f4a06 	br	4021ee0 <__alt_data_end+0xfffe1ee0>
 40221b8:	d9002c17 	ldw	r4,176(sp)
 40221bc:	d9801e04 	addi	r6,sp,120
 40221c0:	b80b883a 	mov	r5,r23
 40221c4:	40282e40 	call	40282e4 <__sprint_r>
 40221c8:	103b6f1e 	bne	r2,zero,4020f88 <__alt_data_end+0xfffe0f88>
 40221cc:	d8c02017 	ldw	r3,128(sp)
 40221d0:	da000404 	addi	r8,sp,16
 40221d4:	003c9d06 	br	402144c <__alt_data_end+0xfffe144c>
 40221d8:	04e7c83a 	sub	r19,zero,r19
 40221dc:	9804c03a 	cmpne	r2,r19,zero
 40221e0:	05adc83a 	sub	r22,zero,r22
 40221e4:	b0adc83a 	sub	r22,r22,r2
 40221e8:	d8802917 	ldw	r2,164(sp)
 40221ec:	07000b44 	movi	fp,45
 40221f0:	df002785 	stb	fp,158(sp)
 40221f4:	10017b16 	blt	r2,zero,40227e4 <___vfprintf_internal_r+0x1c64>
 40221f8:	00bfdfc4 	movi	r2,-129
 40221fc:	90a4703a 	and	r18,r18,r2
 4022200:	003bb106 	br	40210c8 <__alt_data_end+0xfffe10c8>
 4022204:	d9003617 	ldw	r4,216(sp)
 4022208:	d9403817 	ldw	r5,224(sp)
 402220c:	da003d15 	stw	r8,244(sp)
 4022210:	4027f080 	call	4027f08 <__fpclassifyd>
 4022214:	da003d17 	ldw	r8,244(sp)
 4022218:	1000f026 	beq	r2,zero,40225dc <___vfprintf_internal_r+0x1a5c>
 402221c:	d9002917 	ldw	r4,164(sp)
 4022220:	05bff7c4 	movi	r22,-33
 4022224:	00bfffc4 	movi	r2,-1
 4022228:	8dac703a 	and	r22,r17,r22
 402222c:	20820026 	beq	r4,r2,4022a30 <___vfprintf_internal_r+0x1eb0>
 4022230:	008011c4 	movi	r2,71
 4022234:	b081f726 	beq	r22,r2,4022a14 <___vfprintf_internal_r+0x1e94>
 4022238:	d9003817 	ldw	r4,224(sp)
 402223c:	90c04014 	ori	r3,r18,256
 4022240:	d8c02b15 	stw	r3,172(sp)
 4022244:	20021516 	blt	r4,zero,4022a9c <___vfprintf_internal_r+0x1f1c>
 4022248:	dcc03817 	ldw	r19,224(sp)
 402224c:	d8002a05 	stb	zero,168(sp)
 4022250:	00801984 	movi	r2,102
 4022254:	8881f926 	beq	r17,r2,4022a3c <___vfprintf_internal_r+0x1ebc>
 4022258:	00801184 	movi	r2,70
 402225c:	88821c26 	beq	r17,r2,4022ad0 <___vfprintf_internal_r+0x1f50>
 4022260:	00801144 	movi	r2,69
 4022264:	b081ef26 	beq	r22,r2,4022a24 <___vfprintf_internal_r+0x1ea4>
 4022268:	d8c02917 	ldw	r3,164(sp)
 402226c:	d8802104 	addi	r2,sp,132
 4022270:	d8800315 	stw	r2,12(sp)
 4022274:	d9403617 	ldw	r5,216(sp)
 4022278:	d8802504 	addi	r2,sp,148
 402227c:	d9002c17 	ldw	r4,176(sp)
 4022280:	d8800215 	stw	r2,8(sp)
 4022284:	d8802604 	addi	r2,sp,152
 4022288:	d8c00015 	stw	r3,0(sp)
 402228c:	d8800115 	stw	r2,4(sp)
 4022290:	01c00084 	movi	r7,2
 4022294:	980d883a 	mov	r6,r19
 4022298:	d8c03c15 	stw	r3,240(sp)
 402229c:	da003d15 	stw	r8,244(sp)
 40222a0:	40231a40 	call	40231a4 <_dtoa_r>
 40222a4:	1021883a 	mov	r16,r2
 40222a8:	008019c4 	movi	r2,103
 40222ac:	d8c03c17 	ldw	r3,240(sp)
 40222b0:	da003d17 	ldw	r8,244(sp)
 40222b4:	88817126 	beq	r17,r2,402287c <___vfprintf_internal_r+0x1cfc>
 40222b8:	008011c4 	movi	r2,71
 40222bc:	88829226 	beq	r17,r2,4022d08 <___vfprintf_internal_r+0x2188>
 40222c0:	80f9883a 	add	fp,r16,r3
 40222c4:	d9003617 	ldw	r4,216(sp)
 40222c8:	000d883a 	mov	r6,zero
 40222cc:	000f883a 	mov	r7,zero
 40222d0:	980b883a 	mov	r5,r19
 40222d4:	da003d15 	stw	r8,244(sp)
 40222d8:	402bf5c0 	call	402bf5c <__eqdf2>
 40222dc:	da003d17 	ldw	r8,244(sp)
 40222e0:	10018d26 	beq	r2,zero,4022918 <___vfprintf_internal_r+0x1d98>
 40222e4:	d8802117 	ldw	r2,132(sp)
 40222e8:	1700062e 	bgeu	r2,fp,4022304 <___vfprintf_internal_r+0x1784>
 40222ec:	01000c04 	movi	r4,48
 40222f0:	10c00044 	addi	r3,r2,1
 40222f4:	d8c02115 	stw	r3,132(sp)
 40222f8:	11000005 	stb	r4,0(r2)
 40222fc:	d8802117 	ldw	r2,132(sp)
 4022300:	173ffb36 	bltu	r2,fp,40222f0 <__alt_data_end+0xfffe22f0>
 4022304:	1405c83a 	sub	r2,r2,r16
 4022308:	d8803315 	stw	r2,204(sp)
 402230c:	008011c4 	movi	r2,71
 4022310:	b0817626 	beq	r22,r2,40228ec <___vfprintf_internal_r+0x1d6c>
 4022314:	00801944 	movi	r2,101
 4022318:	1442810e 	bge	r2,r17,4022d20 <___vfprintf_internal_r+0x21a0>
 402231c:	d8c02617 	ldw	r3,152(sp)
 4022320:	00801984 	movi	r2,102
 4022324:	d8c03215 	stw	r3,200(sp)
 4022328:	8881fe26 	beq	r17,r2,4022b24 <___vfprintf_internal_r+0x1fa4>
 402232c:	d8c03217 	ldw	r3,200(sp)
 4022330:	d9003317 	ldw	r4,204(sp)
 4022334:	1901dd16 	blt	r3,r4,4022aac <___vfprintf_internal_r+0x1f2c>
 4022338:	9480004c 	andi	r18,r18,1
 402233c:	90022b1e 	bne	r18,zero,4022bec <___vfprintf_internal_r+0x206c>
 4022340:	1805883a 	mov	r2,r3
 4022344:	18028016 	blt	r3,zero,4022d48 <___vfprintf_internal_r+0x21c8>
 4022348:	d8c03217 	ldw	r3,200(sp)
 402234c:	044019c4 	movi	r17,103
 4022350:	d8c02e15 	stw	r3,184(sp)
 4022354:	df002a07 	ldb	fp,168(sp)
 4022358:	e001531e 	bne	fp,zero,40228a8 <___vfprintf_internal_r+0x1d28>
 402235c:	df002783 	ldbu	fp,158(sp)
 4022360:	d8802a15 	stw	r2,168(sp)
 4022364:	dc802b17 	ldw	r18,172(sp)
 4022368:	d8002915 	stw	zero,164(sp)
 402236c:	003bd106 	br	40212b4 <__alt_data_end+0xfffe12b4>
 4022370:	d8802d17 	ldw	r2,180(sp)
 4022374:	d8c02d17 	ldw	r3,180(sp)
 4022378:	d9002d17 	ldw	r4,180(sp)
 402237c:	10800017 	ldw	r2,0(r2)
 4022380:	18c00117 	ldw	r3,4(r3)
 4022384:	21000204 	addi	r4,r4,8
 4022388:	d8803615 	stw	r2,216(sp)
 402238c:	d8c03815 	stw	r3,224(sp)
 4022390:	d9002d15 	stw	r4,180(sp)
 4022394:	003b7506 	br	402116c <__alt_data_end+0xfffe116c>
 4022398:	ac400007 	ldb	r17,0(r21)
 402239c:	003a5906 	br	4020d04 <__alt_data_end+0xfffe0d04>
 40223a0:	9080100c 	andi	r2,r18,64
 40223a4:	1000a826 	beq	r2,zero,4022648 <___vfprintf_internal_r+0x1ac8>
 40223a8:	d9002d17 	ldw	r4,180(sp)
 40223ac:	002d883a 	mov	r22,zero
 40223b0:	24c0000b 	ldhu	r19,0(r4)
 40223b4:	21000104 	addi	r4,r4,4
 40223b8:	d9002d15 	stw	r4,180(sp)
 40223bc:	003ccb06 	br	40216ec <__alt_data_end+0xfffe16ec>
 40223c0:	d8c02d17 	ldw	r3,180(sp)
 40223c4:	d9002917 	ldw	r4,164(sp)
 40223c8:	002d883a 	mov	r22,zero
 40223cc:	18800104 	addi	r2,r3,4
 40223d0:	1cc00017 	ldw	r19,0(r3)
 40223d4:	203ebb0e 	bge	r4,zero,4021ec4 <__alt_data_end+0xfffe1ec4>
 40223d8:	003ef106 	br	4021fa0 <__alt_data_end+0xfffe1fa0>
 40223dc:	9080040c 	andi	r2,r18,16
 40223e0:	1000921e 	bne	r2,zero,402262c <___vfprintf_internal_r+0x1aac>
 40223e4:	9480100c 	andi	r18,r18,64
 40223e8:	90013926 	beq	r18,zero,40228d0 <___vfprintf_internal_r+0x1d50>
 40223ec:	d9002d17 	ldw	r4,180(sp)
 40223f0:	d9402f17 	ldw	r5,188(sp)
 40223f4:	20800017 	ldw	r2,0(r4)
 40223f8:	21000104 	addi	r4,r4,4
 40223fc:	d9002d15 	stw	r4,180(sp)
 4022400:	1140000d 	sth	r5,0(r2)
 4022404:	003a1606 	br	4020c60 <__alt_data_end+0xfffe0c60>
 4022408:	9080100c 	andi	r2,r18,64
 402240c:	10008026 	beq	r2,zero,4022610 <___vfprintf_internal_r+0x1a90>
 4022410:	d8c02d17 	ldw	r3,180(sp)
 4022414:	1cc0000f 	ldh	r19,0(r3)
 4022418:	18c00104 	addi	r3,r3,4
 402241c:	d8c02d15 	stw	r3,180(sp)
 4022420:	982dd7fa 	srai	r22,r19,31
 4022424:	b005883a 	mov	r2,r22
 4022428:	003b1f06 	br	40210a8 <__alt_data_end+0xfffe10a8>
 402242c:	9080100c 	andi	r2,r18,64
 4022430:	d8002785 	stb	zero,158(sp)
 4022434:	10008a1e 	bne	r2,zero,4022660 <___vfprintf_internal_r+0x1ae0>
 4022438:	d9402d17 	ldw	r5,180(sp)
 402243c:	d8c02917 	ldw	r3,164(sp)
 4022440:	002d883a 	mov	r22,zero
 4022444:	28800104 	addi	r2,r5,4
 4022448:	2cc00017 	ldw	r19,0(r5)
 402244c:	183e4b0e 	bge	r3,zero,4021d7c <__alt_data_end+0xfffe1d7c>
 4022450:	9d86b03a 	or	r3,r19,r22
 4022454:	d8802d15 	stw	r2,180(sp)
 4022458:	183e4c1e 	bne	r3,zero,4021d8c <__alt_data_end+0xfffe1d8c>
 402245c:	0039883a 	mov	fp,zero
 4022460:	0005883a 	mov	r2,zero
 4022464:	003d4006 	br	4021968 <__alt_data_end+0xfffe1968>
 4022468:	014100f4 	movhi	r5,1027
 402246c:	29449784 	addi	r5,r5,4702
 4022470:	d9402b15 	stw	r5,172(sp)
 4022474:	d9402b17 	ldw	r5,172(sp)
 4022478:	1c47883a 	add	r3,r3,r17
 402247c:	10800044 	addi	r2,r2,1
 4022480:	41400015 	stw	r5,0(r8)
 4022484:	44400115 	stw	r17,4(r8)
 4022488:	d8c02015 	stw	r3,128(sp)
 402248c:	d8801f15 	stw	r2,124(sp)
 4022490:	010001c4 	movi	r4,7
 4022494:	20bec816 	blt	r4,r2,4021fb8 <__alt_data_end+0xfffe1fb8>
 4022498:	42000204 	addi	r8,r8,8
 402249c:	003ecd06 	br	4021fd4 <__alt_data_end+0xfffe1fd4>
 40224a0:	d9002917 	ldw	r4,164(sp)
 40224a4:	d8002785 	stb	zero,158(sp)
 40224a8:	203d2d16 	blt	r4,zero,4021960 <__alt_data_end+0xfffe1960>
 40224ac:	00bfdfc4 	movi	r2,-129
 40224b0:	90a4703a 	and	r18,r18,r2
 40224b4:	003a9106 	br	4020efc <__alt_data_end+0xfffe0efc>
 40224b8:	010100f4 	movhi	r4,1027
 40224bc:	21049784 	addi	r4,r4,4702
 40224c0:	d9002b15 	stw	r4,172(sp)
 40224c4:	003c0c06 	br	40214f8 <__alt_data_end+0xfffe14f8>
 40224c8:	d9002c17 	ldw	r4,176(sp)
 40224cc:	d9801e04 	addi	r6,sp,120
 40224d0:	b80b883a 	mov	r5,r23
 40224d4:	40282e40 	call	40282e4 <__sprint_r>
 40224d8:	103aab1e 	bne	r2,zero,4020f88 <__alt_data_end+0xfffe0f88>
 40224dc:	d8c02017 	ldw	r3,128(sp)
 40224e0:	da000404 	addi	r8,sp,16
 40224e4:	003d4106 	br	40219ec <__alt_data_end+0xfffe19ec>
 40224e8:	d8801f17 	ldw	r2,124(sp)
 40224ec:	014100f4 	movhi	r5,1027
 40224f0:	01000044 	movi	r4,1
 40224f4:	18c00044 	addi	r3,r3,1
 40224f8:	10800044 	addi	r2,r2,1
 40224fc:	29449704 	addi	r5,r5,4700
 4022500:	41000115 	stw	r4,4(r8)
 4022504:	41400015 	stw	r5,0(r8)
 4022508:	d8c02015 	stw	r3,128(sp)
 402250c:	d8801f15 	stw	r2,124(sp)
 4022510:	010001c4 	movi	r4,7
 4022514:	20805c16 	blt	r4,r2,4022688 <___vfprintf_internal_r+0x1b08>
 4022518:	42000204 	addi	r8,r8,8
 402251c:	8800041e 	bne	r17,zero,4022530 <___vfprintf_internal_r+0x19b0>
 4022520:	d8803317 	ldw	r2,204(sp)
 4022524:	1000021e 	bne	r2,zero,4022530 <___vfprintf_internal_r+0x19b0>
 4022528:	9080004c 	andi	r2,r18,1
 402252c:	103c0926 	beq	r2,zero,4021554 <__alt_data_end+0xfffe1554>
 4022530:	d9003717 	ldw	r4,220(sp)
 4022534:	d8801f17 	ldw	r2,124(sp)
 4022538:	d9403417 	ldw	r5,208(sp)
 402253c:	20c7883a 	add	r3,r4,r3
 4022540:	10800044 	addi	r2,r2,1
 4022544:	41000115 	stw	r4,4(r8)
 4022548:	41400015 	stw	r5,0(r8)
 402254c:	d8c02015 	stw	r3,128(sp)
 4022550:	d8801f15 	stw	r2,124(sp)
 4022554:	010001c4 	movi	r4,7
 4022558:	20812116 	blt	r4,r2,40229e0 <___vfprintf_internal_r+0x1e60>
 402255c:	42000204 	addi	r8,r8,8
 4022560:	0463c83a 	sub	r17,zero,r17
 4022564:	0440730e 	bge	zero,r17,4022734 <___vfprintf_internal_r+0x1bb4>
 4022568:	05800404 	movi	r22,16
 402256c:	b440860e 	bge	r22,r17,4022788 <___vfprintf_internal_r+0x1c08>
 4022570:	014100f4 	movhi	r5,1027
 4022574:	29449784 	addi	r5,r5,4702
 4022578:	d9402b15 	stw	r5,172(sp)
 402257c:	070001c4 	movi	fp,7
 4022580:	dcc02c17 	ldw	r19,176(sp)
 4022584:	00000306 	br	4022594 <___vfprintf_internal_r+0x1a14>
 4022588:	42000204 	addi	r8,r8,8
 402258c:	8c7ffc04 	addi	r17,r17,-16
 4022590:	b440800e 	bge	r22,r17,4022794 <___vfprintf_internal_r+0x1c14>
 4022594:	18c00404 	addi	r3,r3,16
 4022598:	10800044 	addi	r2,r2,1
 402259c:	45000015 	stw	r20,0(r8)
 40225a0:	45800115 	stw	r22,4(r8)
 40225a4:	d8c02015 	stw	r3,128(sp)
 40225a8:	d8801f15 	stw	r2,124(sp)
 40225ac:	e0bff60e 	bge	fp,r2,4022588 <__alt_data_end+0xfffe2588>
 40225b0:	d9801e04 	addi	r6,sp,120
 40225b4:	b80b883a 	mov	r5,r23
 40225b8:	9809883a 	mov	r4,r19
 40225bc:	40282e40 	call	40282e4 <__sprint_r>
 40225c0:	103a711e 	bne	r2,zero,4020f88 <__alt_data_end+0xfffe0f88>
 40225c4:	d8c02017 	ldw	r3,128(sp)
 40225c8:	d8801f17 	ldw	r2,124(sp)
 40225cc:	da000404 	addi	r8,sp,16
 40225d0:	003fee06 	br	402258c <__alt_data_end+0xfffe258c>
 40225d4:	00bfffc4 	movi	r2,-1
 40225d8:	003a6f06 	br	4020f98 <__alt_data_end+0xfffe0f98>
 40225dc:	008011c4 	movi	r2,71
 40225e0:	1440b816 	blt	r2,r17,40228c4 <___vfprintf_internal_r+0x1d44>
 40225e4:	040100f4 	movhi	r16,1027
 40225e8:	84048904 	addi	r16,r16,4644
 40225ec:	00c000c4 	movi	r3,3
 40225f0:	00bfdfc4 	movi	r2,-129
 40225f4:	d8c02a15 	stw	r3,168(sp)
 40225f8:	90a4703a 	and	r18,r18,r2
 40225fc:	df002783 	ldbu	fp,158(sp)
 4022600:	d8c02e15 	stw	r3,184(sp)
 4022604:	d8002915 	stw	zero,164(sp)
 4022608:	d8003215 	stw	zero,200(sp)
 402260c:	003b2906 	br	40212b4 <__alt_data_end+0xfffe12b4>
 4022610:	d9002d17 	ldw	r4,180(sp)
 4022614:	24c00017 	ldw	r19,0(r4)
 4022618:	21000104 	addi	r4,r4,4
 402261c:	d9002d15 	stw	r4,180(sp)
 4022620:	982dd7fa 	srai	r22,r19,31
 4022624:	b005883a 	mov	r2,r22
 4022628:	003a9f06 	br	40210a8 <__alt_data_end+0xfffe10a8>
 402262c:	d9402d17 	ldw	r5,180(sp)
 4022630:	d8c02f17 	ldw	r3,188(sp)
 4022634:	28800017 	ldw	r2,0(r5)
 4022638:	29400104 	addi	r5,r5,4
 402263c:	d9402d15 	stw	r5,180(sp)
 4022640:	10c00015 	stw	r3,0(r2)
 4022644:	00398606 	br	4020c60 <__alt_data_end+0xfffe0c60>
 4022648:	d9402d17 	ldw	r5,180(sp)
 402264c:	002d883a 	mov	r22,zero
 4022650:	2cc00017 	ldw	r19,0(r5)
 4022654:	29400104 	addi	r5,r5,4
 4022658:	d9402d15 	stw	r5,180(sp)
 402265c:	003c2306 	br	40216ec <__alt_data_end+0xfffe16ec>
 4022660:	d8c02d17 	ldw	r3,180(sp)
 4022664:	d9002917 	ldw	r4,164(sp)
 4022668:	002d883a 	mov	r22,zero
 402266c:	18800104 	addi	r2,r3,4
 4022670:	1cc0000b 	ldhu	r19,0(r3)
 4022674:	203dc10e 	bge	r4,zero,4021d7c <__alt_data_end+0xfffe1d7c>
 4022678:	003f7506 	br	4022450 <__alt_data_end+0xfffe2450>
 402267c:	040100f4 	movhi	r16,1027
 4022680:	84048704 	addi	r16,r16,4636
 4022684:	003acc06 	br	40211b8 <__alt_data_end+0xfffe11b8>
 4022688:	d9002c17 	ldw	r4,176(sp)
 402268c:	d9801e04 	addi	r6,sp,120
 4022690:	b80b883a 	mov	r5,r23
 4022694:	40282e40 	call	40282e4 <__sprint_r>
 4022698:	103a3b1e 	bne	r2,zero,4020f88 <__alt_data_end+0xfffe0f88>
 402269c:	dc402617 	ldw	r17,152(sp)
 40226a0:	d8c02017 	ldw	r3,128(sp)
 40226a4:	da000404 	addi	r8,sp,16
 40226a8:	003f9c06 	br	402251c <__alt_data_end+0xfffe251c>
 40226ac:	ac400043 	ldbu	r17,1(r21)
 40226b0:	94800814 	ori	r18,r18,32
 40226b4:	ad400044 	addi	r21,r21,1
 40226b8:	8c403fcc 	andi	r17,r17,255
 40226bc:	8c40201c 	xori	r17,r17,128
 40226c0:	8c7fe004 	addi	r17,r17,-128
 40226c4:	00398f06 	br	4020d04 <__alt_data_end+0xfffe0d04>
 40226c8:	d8c02d15 	stw	r3,180(sp)
 40226cc:	0039883a 	mov	fp,zero
 40226d0:	003e3506 	br	4021fa8 <__alt_data_end+0xfffe1fa8>
 40226d4:	d9002c17 	ldw	r4,176(sp)
 40226d8:	d9801e04 	addi	r6,sp,120
 40226dc:	b80b883a 	mov	r5,r23
 40226e0:	40282e40 	call	40282e4 <__sprint_r>
 40226e4:	103a281e 	bne	r2,zero,4020f88 <__alt_data_end+0xfffe0f88>
 40226e8:	d8c02017 	ldw	r3,128(sp)
 40226ec:	da000404 	addi	r8,sp,16
 40226f0:	003cd006 	br	4021a34 <__alt_data_end+0xfffe1a34>
 40226f4:	8009883a 	mov	r4,r16
 40226f8:	da003d15 	stw	r8,244(sp)
 40226fc:	4020ae80 	call	4020ae8 <strlen>
 4022700:	d8802e15 	stw	r2,184(sp)
 4022704:	da003d17 	ldw	r8,244(sp)
 4022708:	103c340e 	bge	r2,zero,40217dc <__alt_data_end+0xfffe17dc>
 402270c:	0005883a 	mov	r2,zero
 4022710:	003c3206 	br	40217dc <__alt_data_end+0xfffe17dc>
 4022714:	d9002c17 	ldw	r4,176(sp)
 4022718:	d9801e04 	addi	r6,sp,120
 402271c:	b80b883a 	mov	r5,r23
 4022720:	40282e40 	call	40282e4 <__sprint_r>
 4022724:	103a181e 	bne	r2,zero,4020f88 <__alt_data_end+0xfffe0f88>
 4022728:	d8c02017 	ldw	r3,128(sp)
 402272c:	d8801f17 	ldw	r2,124(sp)
 4022730:	da000404 	addi	r8,sp,16
 4022734:	d9403317 	ldw	r5,204(sp)
 4022738:	10800044 	addi	r2,r2,1
 402273c:	44000015 	stw	r16,0(r8)
 4022740:	28c7883a 	add	r3,r5,r3
 4022744:	003b7d06 	br	402153c <__alt_data_end+0xfffe153c>
 4022748:	010100f4 	movhi	r4,1027
 402274c:	21049b84 	addi	r4,r4,4718
 4022750:	d9003515 	stw	r4,212(sp)
 4022754:	003b1406 	br	40213a8 <__alt_data_end+0xfffe13a8>
 4022758:	013fffc4 	movi	r4,-1
 402275c:	003a3506 	br	4021034 <__alt_data_end+0xfffe1034>
 4022760:	0023883a 	mov	r17,zero
 4022764:	003d9d06 	br	4021ddc <__alt_data_end+0xfffe1ddc>
 4022768:	d9002c17 	ldw	r4,176(sp)
 402276c:	d9801e04 	addi	r6,sp,120
 4022770:	b80b883a 	mov	r5,r23
 4022774:	40282e40 	call	40282e4 <__sprint_r>
 4022778:	103a031e 	bne	r2,zero,4020f88 <__alt_data_end+0xfffe0f88>
 402277c:	d8c02017 	ldw	r3,128(sp)
 4022780:	da000404 	addi	r8,sp,16
 4022784:	003d9406 	br	4021dd8 <__alt_data_end+0xfffe1dd8>
 4022788:	010100f4 	movhi	r4,1027
 402278c:	21049784 	addi	r4,r4,4702
 4022790:	d9002b15 	stw	r4,172(sp)
 4022794:	d9002b17 	ldw	r4,172(sp)
 4022798:	1c47883a 	add	r3,r3,r17
 402279c:	10800044 	addi	r2,r2,1
 40227a0:	41000015 	stw	r4,0(r8)
 40227a4:	44400115 	stw	r17,4(r8)
 40227a8:	d8c02015 	stw	r3,128(sp)
 40227ac:	d8801f15 	stw	r2,124(sp)
 40227b0:	010001c4 	movi	r4,7
 40227b4:	20bfd716 	blt	r4,r2,4022714 <__alt_data_end+0xfffe2714>
 40227b8:	42000204 	addi	r8,r8,8
 40227bc:	003fdd06 	br	4022734 <__alt_data_end+0xfffe2734>
 40227c0:	d9002c17 	ldw	r4,176(sp)
 40227c4:	d9801e04 	addi	r6,sp,120
 40227c8:	b80b883a 	mov	r5,r23
 40227cc:	40282e40 	call	40282e4 <__sprint_r>
 40227d0:	1039ed1e 	bne	r2,zero,4020f88 <__alt_data_end+0xfffe0f88>
 40227d4:	d8802617 	ldw	r2,152(sp)
 40227d8:	d8c02017 	ldw	r3,128(sp)
 40227dc:	da000404 	addi	r8,sp,16
 40227e0:	003e1006 	br	4022024 <__alt_data_end+0xfffe2024>
 40227e4:	00800044 	movi	r2,1
 40227e8:	10803fcc 	andi	r2,r2,255
 40227ec:	00c00044 	movi	r3,1
 40227f0:	10fa3526 	beq	r2,r3,40210c8 <__alt_data_end+0xfffe10c8>
 40227f4:	00c00084 	movi	r3,2
 40227f8:	10fbcb26 	beq	r2,r3,4021728 <__alt_data_end+0xfffe1728>
 40227fc:	003a8f06 	br	402123c <__alt_data_end+0xfffe123c>
 4022800:	010100f4 	movhi	r4,1027
 4022804:	21049b84 	addi	r4,r4,4718
 4022808:	d9003515 	stw	r4,212(sp)
 402280c:	003b7606 	br	40215e8 <__alt_data_end+0xfffe15e8>
 4022810:	d8802917 	ldw	r2,164(sp)
 4022814:	00c00184 	movi	r3,6
 4022818:	1880012e 	bgeu	r3,r2,4022820 <___vfprintf_internal_r+0x1ca0>
 402281c:	1805883a 	mov	r2,r3
 4022820:	d8802e15 	stw	r2,184(sp)
 4022824:	1000ef16 	blt	r2,zero,4022be4 <___vfprintf_internal_r+0x2064>
 4022828:	040100f4 	movhi	r16,1027
 402282c:	d8802a15 	stw	r2,168(sp)
 4022830:	dcc02d15 	stw	r19,180(sp)
 4022834:	d8002915 	stw	zero,164(sp)
 4022838:	d8003215 	stw	zero,200(sp)
 402283c:	84049504 	addi	r16,r16,4692
 4022840:	0039883a 	mov	fp,zero
 4022844:	003aa206 	br	40212d0 <__alt_data_end+0xfffe12d0>
 4022848:	0021883a 	mov	r16,zero
 402284c:	003e0706 	br	402206c <__alt_data_end+0xfffe206c>
 4022850:	d9002c17 	ldw	r4,176(sp)
 4022854:	d9801e04 	addi	r6,sp,120
 4022858:	b80b883a 	mov	r5,r23
 402285c:	40282e40 	call	40282e4 <__sprint_r>
 4022860:	1039c91e 	bne	r2,zero,4020f88 <__alt_data_end+0xfffe0f88>
 4022864:	d8802617 	ldw	r2,152(sp)
 4022868:	d9403317 	ldw	r5,204(sp)
 402286c:	d8c02017 	ldw	r3,128(sp)
 4022870:	da000404 	addi	r8,sp,16
 4022874:	2885c83a 	sub	r2,r5,r2
 4022878:	003dfb06 	br	4022068 <__alt_data_end+0xfffe2068>
 402287c:	9080004c 	andi	r2,r18,1
 4022880:	103e8f1e 	bne	r2,zero,40222c0 <__alt_data_end+0xfffe22c0>
 4022884:	d8802117 	ldw	r2,132(sp)
 4022888:	003e9e06 	br	4022304 <__alt_data_end+0xfffe2304>
 402288c:	1025883a 	mov	r18,r2
 4022890:	0039883a 	mov	fp,zero
 4022894:	00800084 	movi	r2,2
 4022898:	003fd306 	br	40227e8 <__alt_data_end+0xfffe27e8>
 402289c:	07000b44 	movi	fp,45
 40228a0:	df002785 	stb	fp,158(sp)
 40228a4:	003a4006 	br	40211a8 <__alt_data_end+0xfffe11a8>
 40228a8:	00c00b44 	movi	r3,45
 40228ac:	d8c02785 	stb	r3,158(sp)
 40228b0:	d8802a15 	stw	r2,168(sp)
 40228b4:	dc802b17 	ldw	r18,172(sp)
 40228b8:	d8002915 	stw	zero,164(sp)
 40228bc:	07000b44 	movi	fp,45
 40228c0:	003a8006 	br	40212c4 <__alt_data_end+0xfffe12c4>
 40228c4:	040100f4 	movhi	r16,1027
 40228c8:	84048a04 	addi	r16,r16,4648
 40228cc:	003f4706 	br	40225ec <__alt_data_end+0xfffe25ec>
 40228d0:	d8c02d17 	ldw	r3,180(sp)
 40228d4:	d9002f17 	ldw	r4,188(sp)
 40228d8:	18800017 	ldw	r2,0(r3)
 40228dc:	18c00104 	addi	r3,r3,4
 40228e0:	d8c02d15 	stw	r3,180(sp)
 40228e4:	11000015 	stw	r4,0(r2)
 40228e8:	0038dd06 	br	4020c60 <__alt_data_end+0xfffe0c60>
 40228ec:	dd802617 	ldw	r22,152(sp)
 40228f0:	00bfff44 	movi	r2,-3
 40228f4:	b0801c16 	blt	r22,r2,4022968 <___vfprintf_internal_r+0x1de8>
 40228f8:	d9402917 	ldw	r5,164(sp)
 40228fc:	2d801a16 	blt	r5,r22,4022968 <___vfprintf_internal_r+0x1de8>
 4022900:	dd803215 	stw	r22,200(sp)
 4022904:	003e8906 	br	402232c <__alt_data_end+0xfffe232c>
 4022908:	010100f4 	movhi	r4,1027
 402290c:	21049784 	addi	r4,r4,4702
 4022910:	d9002b15 	stw	r4,172(sp)
 4022914:	003c9106 	br	4021b5c <__alt_data_end+0xfffe1b5c>
 4022918:	e005883a 	mov	r2,fp
 402291c:	003e7906 	br	4022304 <__alt_data_end+0xfffe2304>
 4022920:	d9402917 	ldw	r5,164(sp)
 4022924:	df002783 	ldbu	fp,158(sp)
 4022928:	dcc02d15 	stw	r19,180(sp)
 402292c:	d9402a15 	stw	r5,168(sp)
 4022930:	d9402e15 	stw	r5,184(sp)
 4022934:	d8002915 	stw	zero,164(sp)
 4022938:	d8003215 	stw	zero,200(sp)
 402293c:	003a5d06 	br	40212b4 <__alt_data_end+0xfffe12b4>
 4022940:	9080004c 	andi	r2,r18,1
 4022944:	0039883a 	mov	fp,zero
 4022948:	10000426 	beq	r2,zero,402295c <___vfprintf_internal_r+0x1ddc>
 402294c:	00800c04 	movi	r2,48
 4022950:	dc001dc4 	addi	r16,sp,119
 4022954:	d8801dc5 	stb	r2,119(sp)
 4022958:	003b8006 	br	402175c <__alt_data_end+0xfffe175c>
 402295c:	d8002e15 	stw	zero,184(sp)
 4022960:	dc001e04 	addi	r16,sp,120
 4022964:	003a4d06 	br	402129c <__alt_data_end+0xfffe129c>
 4022968:	8c7fff84 	addi	r17,r17,-2
 402296c:	b5bfffc4 	addi	r22,r22,-1
 4022970:	dd802615 	stw	r22,152(sp)
 4022974:	dc4022c5 	stb	r17,139(sp)
 4022978:	b000bf16 	blt	r22,zero,4022c78 <___vfprintf_internal_r+0x20f8>
 402297c:	00800ac4 	movi	r2,43
 4022980:	d8802305 	stb	r2,140(sp)
 4022984:	00800244 	movi	r2,9
 4022988:	15807016 	blt	r2,r22,4022b4c <___vfprintf_internal_r+0x1fcc>
 402298c:	00800c04 	movi	r2,48
 4022990:	b5800c04 	addi	r22,r22,48
 4022994:	d8802345 	stb	r2,141(sp)
 4022998:	dd802385 	stb	r22,142(sp)
 402299c:	d88023c4 	addi	r2,sp,143
 40229a0:	df0022c4 	addi	fp,sp,139
 40229a4:	d8c03317 	ldw	r3,204(sp)
 40229a8:	1739c83a 	sub	fp,r2,fp
 40229ac:	d9003317 	ldw	r4,204(sp)
 40229b0:	e0c7883a 	add	r3,fp,r3
 40229b4:	df003a15 	stw	fp,232(sp)
 40229b8:	d8c02e15 	stw	r3,184(sp)
 40229bc:	00800044 	movi	r2,1
 40229c0:	1100b30e 	bge	r2,r4,4022c90 <___vfprintf_internal_r+0x2110>
 40229c4:	d8c02e17 	ldw	r3,184(sp)
 40229c8:	18c00044 	addi	r3,r3,1
 40229cc:	d8c02e15 	stw	r3,184(sp)
 40229d0:	1805883a 	mov	r2,r3
 40229d4:	1800ac16 	blt	r3,zero,4022c88 <___vfprintf_internal_r+0x2108>
 40229d8:	d8003215 	stw	zero,200(sp)
 40229dc:	003e5d06 	br	4022354 <__alt_data_end+0xfffe2354>
 40229e0:	d9002c17 	ldw	r4,176(sp)
 40229e4:	d9801e04 	addi	r6,sp,120
 40229e8:	b80b883a 	mov	r5,r23
 40229ec:	40282e40 	call	40282e4 <__sprint_r>
 40229f0:	1039651e 	bne	r2,zero,4020f88 <__alt_data_end+0xfffe0f88>
 40229f4:	dc402617 	ldw	r17,152(sp)
 40229f8:	d8c02017 	ldw	r3,128(sp)
 40229fc:	d8801f17 	ldw	r2,124(sp)
 4022a00:	da000404 	addi	r8,sp,16
 4022a04:	003ed606 	br	4022560 <__alt_data_end+0xfffe2560>
 4022a08:	582b883a 	mov	r21,r11
 4022a0c:	d8002915 	stw	zero,164(sp)
 4022a10:	0038bd06 	br	4020d08 <__alt_data_end+0xfffe0d08>
 4022a14:	d8802917 	ldw	r2,164(sp)
 4022a18:	103e071e 	bne	r2,zero,4022238 <__alt_data_end+0xfffe2238>
 4022a1c:	dc002915 	stw	r16,164(sp)
 4022a20:	003e0506 	br	4022238 <__alt_data_end+0xfffe2238>
 4022a24:	d9002917 	ldw	r4,164(sp)
 4022a28:	20c00044 	addi	r3,r4,1
 4022a2c:	003e0f06 	br	402226c <__alt_data_end+0xfffe226c>
 4022a30:	01400184 	movi	r5,6
 4022a34:	d9402915 	stw	r5,164(sp)
 4022a38:	003dff06 	br	4022238 <__alt_data_end+0xfffe2238>
 4022a3c:	d8802104 	addi	r2,sp,132
 4022a40:	d8800315 	stw	r2,12(sp)
 4022a44:	d8802504 	addi	r2,sp,148
 4022a48:	d8800215 	stw	r2,8(sp)
 4022a4c:	d8802604 	addi	r2,sp,152
 4022a50:	d8800115 	stw	r2,4(sp)
 4022a54:	d8802917 	ldw	r2,164(sp)
 4022a58:	d9403617 	ldw	r5,216(sp)
 4022a5c:	d9002c17 	ldw	r4,176(sp)
 4022a60:	d8800015 	stw	r2,0(sp)
 4022a64:	01c000c4 	movi	r7,3
 4022a68:	980d883a 	mov	r6,r19
 4022a6c:	da003d15 	stw	r8,244(sp)
 4022a70:	40231a40 	call	40231a4 <_dtoa_r>
 4022a74:	d8c02917 	ldw	r3,164(sp)
 4022a78:	da003d17 	ldw	r8,244(sp)
 4022a7c:	1021883a 	mov	r16,r2
 4022a80:	10f9883a 	add	fp,r2,r3
 4022a84:	81000007 	ldb	r4,0(r16)
 4022a88:	00800c04 	movi	r2,48
 4022a8c:	20805e26 	beq	r4,r2,4022c08 <___vfprintf_internal_r+0x2088>
 4022a90:	d8c02617 	ldw	r3,152(sp)
 4022a94:	e0f9883a 	add	fp,fp,r3
 4022a98:	003e0a06 	br	40222c4 <__alt_data_end+0xfffe22c4>
 4022a9c:	00c00b44 	movi	r3,45
 4022aa0:	24e0003c 	xorhi	r19,r4,32768
 4022aa4:	d8c02a05 	stb	r3,168(sp)
 4022aa8:	003de906 	br	4022250 <__alt_data_end+0xfffe2250>
 4022aac:	d8c03217 	ldw	r3,200(sp)
 4022ab0:	00c07a0e 	bge	zero,r3,4022c9c <___vfprintf_internal_r+0x211c>
 4022ab4:	00800044 	movi	r2,1
 4022ab8:	d9003317 	ldw	r4,204(sp)
 4022abc:	1105883a 	add	r2,r2,r4
 4022ac0:	d8802e15 	stw	r2,184(sp)
 4022ac4:	10004e16 	blt	r2,zero,4022c00 <___vfprintf_internal_r+0x2080>
 4022ac8:	044019c4 	movi	r17,103
 4022acc:	003e2106 	br	4022354 <__alt_data_end+0xfffe2354>
 4022ad0:	d9002917 	ldw	r4,164(sp)
 4022ad4:	d8802104 	addi	r2,sp,132
 4022ad8:	d8800315 	stw	r2,12(sp)
 4022adc:	d9000015 	stw	r4,0(sp)
 4022ae0:	d8802504 	addi	r2,sp,148
 4022ae4:	d9403617 	ldw	r5,216(sp)
 4022ae8:	d9002c17 	ldw	r4,176(sp)
 4022aec:	d8800215 	stw	r2,8(sp)
 4022af0:	d8802604 	addi	r2,sp,152
 4022af4:	d8800115 	stw	r2,4(sp)
 4022af8:	01c000c4 	movi	r7,3
 4022afc:	980d883a 	mov	r6,r19
 4022b00:	da003d15 	stw	r8,244(sp)
 4022b04:	40231a40 	call	40231a4 <_dtoa_r>
 4022b08:	d8c02917 	ldw	r3,164(sp)
 4022b0c:	da003d17 	ldw	r8,244(sp)
 4022b10:	1021883a 	mov	r16,r2
 4022b14:	00801184 	movi	r2,70
 4022b18:	80f9883a 	add	fp,r16,r3
 4022b1c:	88bfd926 	beq	r17,r2,4022a84 <__alt_data_end+0xfffe2a84>
 4022b20:	003de806 	br	40222c4 <__alt_data_end+0xfffe22c4>
 4022b24:	d9002917 	ldw	r4,164(sp)
 4022b28:	00c04d0e 	bge	zero,r3,4022c60 <___vfprintf_internal_r+0x20e0>
 4022b2c:	2000441e 	bne	r4,zero,4022c40 <___vfprintf_internal_r+0x20c0>
 4022b30:	9480004c 	andi	r18,r18,1
 4022b34:	9000421e 	bne	r18,zero,4022c40 <___vfprintf_internal_r+0x20c0>
 4022b38:	1805883a 	mov	r2,r3
 4022b3c:	18007016 	blt	r3,zero,4022d00 <___vfprintf_internal_r+0x2180>
 4022b40:	d8c03217 	ldw	r3,200(sp)
 4022b44:	d8c02e15 	stw	r3,184(sp)
 4022b48:	003e0206 	br	4022354 <__alt_data_end+0xfffe2354>
 4022b4c:	df0022c4 	addi	fp,sp,139
 4022b50:	dc002915 	stw	r16,164(sp)
 4022b54:	4027883a 	mov	r19,r8
 4022b58:	e021883a 	mov	r16,fp
 4022b5c:	b009883a 	mov	r4,r22
 4022b60:	01400284 	movi	r5,10
 4022b64:	402ac980 	call	402ac98 <__modsi3>
 4022b68:	10800c04 	addi	r2,r2,48
 4022b6c:	843fffc4 	addi	r16,r16,-1
 4022b70:	b009883a 	mov	r4,r22
 4022b74:	01400284 	movi	r5,10
 4022b78:	80800005 	stb	r2,0(r16)
 4022b7c:	402ac140 	call	402ac14 <__divsi3>
 4022b80:	102d883a 	mov	r22,r2
 4022b84:	00800244 	movi	r2,9
 4022b88:	15bff416 	blt	r2,r22,4022b5c <__alt_data_end+0xfffe2b5c>
 4022b8c:	9811883a 	mov	r8,r19
 4022b90:	b0800c04 	addi	r2,r22,48
 4022b94:	8027883a 	mov	r19,r16
 4022b98:	997fffc4 	addi	r5,r19,-1
 4022b9c:	98bfffc5 	stb	r2,-1(r19)
 4022ba0:	dc002917 	ldw	r16,164(sp)
 4022ba4:	2f006a2e 	bgeu	r5,fp,4022d50 <___vfprintf_internal_r+0x21d0>
 4022ba8:	d9c02384 	addi	r7,sp,142
 4022bac:	3ccfc83a 	sub	r7,r7,r19
 4022bb0:	d9002344 	addi	r4,sp,141
 4022bb4:	e1cf883a 	add	r7,fp,r7
 4022bb8:	00000106 	br	4022bc0 <___vfprintf_internal_r+0x2040>
 4022bbc:	28800003 	ldbu	r2,0(r5)
 4022bc0:	20800005 	stb	r2,0(r4)
 4022bc4:	21000044 	addi	r4,r4,1
 4022bc8:	29400044 	addi	r5,r5,1
 4022bcc:	393ffb1e 	bne	r7,r4,4022bbc <__alt_data_end+0xfffe2bbc>
 4022bd0:	d8802304 	addi	r2,sp,140
 4022bd4:	14c5c83a 	sub	r2,r2,r19
 4022bd8:	d8c02344 	addi	r3,sp,141
 4022bdc:	1885883a 	add	r2,r3,r2
 4022be0:	003f7006 	br	40229a4 <__alt_data_end+0xfffe29a4>
 4022be4:	0005883a 	mov	r2,zero
 4022be8:	003f0f06 	br	4022828 <__alt_data_end+0xfffe2828>
 4022bec:	d8c03217 	ldw	r3,200(sp)
 4022bf0:	18c00044 	addi	r3,r3,1
 4022bf4:	d8c02e15 	stw	r3,184(sp)
 4022bf8:	1805883a 	mov	r2,r3
 4022bfc:	183fb20e 	bge	r3,zero,4022ac8 <__alt_data_end+0xfffe2ac8>
 4022c00:	0005883a 	mov	r2,zero
 4022c04:	003fb006 	br	4022ac8 <__alt_data_end+0xfffe2ac8>
 4022c08:	d9003617 	ldw	r4,216(sp)
 4022c0c:	000d883a 	mov	r6,zero
 4022c10:	000f883a 	mov	r7,zero
 4022c14:	980b883a 	mov	r5,r19
 4022c18:	d8c03c15 	stw	r3,240(sp)
 4022c1c:	da003d15 	stw	r8,244(sp)
 4022c20:	402bf5c0 	call	402bf5c <__eqdf2>
 4022c24:	d8c03c17 	ldw	r3,240(sp)
 4022c28:	da003d17 	ldw	r8,244(sp)
 4022c2c:	103f9826 	beq	r2,zero,4022a90 <__alt_data_end+0xfffe2a90>
 4022c30:	00800044 	movi	r2,1
 4022c34:	10c7c83a 	sub	r3,r2,r3
 4022c38:	d8c02615 	stw	r3,152(sp)
 4022c3c:	003f9506 	br	4022a94 <__alt_data_end+0xfffe2a94>
 4022c40:	d9002917 	ldw	r4,164(sp)
 4022c44:	d8c03217 	ldw	r3,200(sp)
 4022c48:	20800044 	addi	r2,r4,1
 4022c4c:	1885883a 	add	r2,r3,r2
 4022c50:	d8802e15 	stw	r2,184(sp)
 4022c54:	103dbf0e 	bge	r2,zero,4022354 <__alt_data_end+0xfffe2354>
 4022c58:	0005883a 	mov	r2,zero
 4022c5c:	003dbd06 	br	4022354 <__alt_data_end+0xfffe2354>
 4022c60:	2000211e 	bne	r4,zero,4022ce8 <___vfprintf_internal_r+0x2168>
 4022c64:	9480004c 	andi	r18,r18,1
 4022c68:	90001f1e 	bne	r18,zero,4022ce8 <___vfprintf_internal_r+0x2168>
 4022c6c:	00800044 	movi	r2,1
 4022c70:	d8802e15 	stw	r2,184(sp)
 4022c74:	003db706 	br	4022354 <__alt_data_end+0xfffe2354>
 4022c78:	00800b44 	movi	r2,45
 4022c7c:	05adc83a 	sub	r22,zero,r22
 4022c80:	d8802305 	stb	r2,140(sp)
 4022c84:	003f3f06 	br	4022984 <__alt_data_end+0xfffe2984>
 4022c88:	0005883a 	mov	r2,zero
 4022c8c:	003f5206 	br	40229d8 <__alt_data_end+0xfffe29d8>
 4022c90:	90a4703a 	and	r18,r18,r2
 4022c94:	903f4e26 	beq	r18,zero,40229d0 <__alt_data_end+0xfffe29d0>
 4022c98:	003f4a06 	br	40229c4 <__alt_data_end+0xfffe29c4>
 4022c9c:	00800084 	movi	r2,2
 4022ca0:	10c5c83a 	sub	r2,r2,r3
 4022ca4:	003f8406 	br	4022ab8 <__alt_data_end+0xfffe2ab8>
 4022ca8:	d8802d17 	ldw	r2,180(sp)
 4022cac:	d9002d17 	ldw	r4,180(sp)
 4022cb0:	ac400043 	ldbu	r17,1(r21)
 4022cb4:	10800017 	ldw	r2,0(r2)
 4022cb8:	582b883a 	mov	r21,r11
 4022cbc:	d8802915 	stw	r2,164(sp)
 4022cc0:	20800104 	addi	r2,r4,4
 4022cc4:	d9002917 	ldw	r4,164(sp)
 4022cc8:	d8802d15 	stw	r2,180(sp)
 4022ccc:	203e7a0e 	bge	r4,zero,40226b8 <__alt_data_end+0xfffe26b8>
 4022cd0:	8c403fcc 	andi	r17,r17,255
 4022cd4:	00bfffc4 	movi	r2,-1
 4022cd8:	8c40201c 	xori	r17,r17,128
 4022cdc:	d8802915 	stw	r2,164(sp)
 4022ce0:	8c7fe004 	addi	r17,r17,-128
 4022ce4:	00380706 	br	4020d04 <__alt_data_end+0xfffe0d04>
 4022ce8:	d8c02917 	ldw	r3,164(sp)
 4022cec:	18c00084 	addi	r3,r3,2
 4022cf0:	d8c02e15 	stw	r3,184(sp)
 4022cf4:	1805883a 	mov	r2,r3
 4022cf8:	183d960e 	bge	r3,zero,4022354 <__alt_data_end+0xfffe2354>
 4022cfc:	003fd606 	br	4022c58 <__alt_data_end+0xfffe2c58>
 4022d00:	0005883a 	mov	r2,zero
 4022d04:	003f8e06 	br	4022b40 <__alt_data_end+0xfffe2b40>
 4022d08:	9080004c 	andi	r2,r18,1
 4022d0c:	103f811e 	bne	r2,zero,4022b14 <__alt_data_end+0xfffe2b14>
 4022d10:	d8802117 	ldw	r2,132(sp)
 4022d14:	1405c83a 	sub	r2,r2,r16
 4022d18:	d8803315 	stw	r2,204(sp)
 4022d1c:	b47ef326 	beq	r22,r17,40228ec <__alt_data_end+0xfffe28ec>
 4022d20:	dd802617 	ldw	r22,152(sp)
 4022d24:	003f1106 	br	402296c <__alt_data_end+0xfffe296c>
 4022d28:	d9c02785 	stb	r7,158(sp)
 4022d2c:	00390406 	br	4021140 <__alt_data_end+0xfffe1140>
 4022d30:	d9c02785 	stb	r7,158(sp)
 4022d34:	0038d306 	br	4021084 <__alt_data_end+0xfffe1084>
 4022d38:	d9c02785 	stb	r7,158(sp)
 4022d3c:	003a6106 	br	40216c4 <__alt_data_end+0xfffe16c4>
 4022d40:	d9c02785 	stb	r7,158(sp)
 4022d44:	003af806 	br	4021928 <__alt_data_end+0xfffe1928>
 4022d48:	0005883a 	mov	r2,zero
 4022d4c:	003d7e06 	br	4022348 <__alt_data_end+0xfffe2348>
 4022d50:	d8802344 	addi	r2,sp,141
 4022d54:	003f1306 	br	40229a4 <__alt_data_end+0xfffe29a4>
 4022d58:	d9c02785 	stb	r7,158(sp)
 4022d5c:	00392306 	br	40211ec <__alt_data_end+0xfffe11ec>
 4022d60:	d9c02785 	stb	r7,158(sp)
 4022d64:	003aa906 	br	402180c <__alt_data_end+0xfffe180c>
 4022d68:	d9c02785 	stb	r7,158(sp)
 4022d6c:	003a3d06 	br	4021664 <__alt_data_end+0xfffe1664>
 4022d70:	d9c02785 	stb	r7,158(sp)
 4022d74:	003aca06 	br	40218a0 <__alt_data_end+0xfffe18a0>

04022d78 <__vfprintf_internal>:
 4022d78:	008100f4 	movhi	r2,1027
 4022d7c:	108c7404 	addi	r2,r2,12752
 4022d80:	300f883a 	mov	r7,r6
 4022d84:	280d883a 	mov	r6,r5
 4022d88:	200b883a 	mov	r5,r4
 4022d8c:	11000017 	ldw	r4,0(r2)
 4022d90:	4020b801 	jmpi	4020b80 <___vfprintf_internal_r>

04022d94 <__sbprintf>:
 4022d94:	2880030b 	ldhu	r2,12(r5)
 4022d98:	2ac01917 	ldw	r11,100(r5)
 4022d9c:	2a80038b 	ldhu	r10,14(r5)
 4022da0:	2a400717 	ldw	r9,28(r5)
 4022da4:	2a000917 	ldw	r8,36(r5)
 4022da8:	defee204 	addi	sp,sp,-1144
 4022dac:	00c10004 	movi	r3,1024
 4022db0:	dc011a15 	stw	r16,1128(sp)
 4022db4:	10bfff4c 	andi	r2,r2,65533
 4022db8:	2821883a 	mov	r16,r5
 4022dbc:	d8cb883a 	add	r5,sp,r3
 4022dc0:	dc811c15 	stw	r18,1136(sp)
 4022dc4:	dc411b15 	stw	r17,1132(sp)
 4022dc8:	dfc11d15 	stw	ra,1140(sp)
 4022dcc:	2025883a 	mov	r18,r4
 4022dd0:	d881030d 	sth	r2,1036(sp)
 4022dd4:	dac11915 	stw	r11,1124(sp)
 4022dd8:	da81038d 	sth	r10,1038(sp)
 4022ddc:	da410715 	stw	r9,1052(sp)
 4022de0:	da010915 	stw	r8,1060(sp)
 4022de4:	dec10015 	stw	sp,1024(sp)
 4022de8:	dec10415 	stw	sp,1040(sp)
 4022dec:	d8c10215 	stw	r3,1032(sp)
 4022df0:	d8c10515 	stw	r3,1044(sp)
 4022df4:	d8010615 	stw	zero,1048(sp)
 4022df8:	4020b800 	call	4020b80 <___vfprintf_internal_r>
 4022dfc:	1023883a 	mov	r17,r2
 4022e00:	10000416 	blt	r2,zero,4022e14 <__sbprintf+0x80>
 4022e04:	d9410004 	addi	r5,sp,1024
 4022e08:	9009883a 	mov	r4,r18
 4022e0c:	4024a480 	call	4024a48 <_fflush_r>
 4022e10:	10000d1e 	bne	r2,zero,4022e48 <__sbprintf+0xb4>
 4022e14:	d881030b 	ldhu	r2,1036(sp)
 4022e18:	1080100c 	andi	r2,r2,64
 4022e1c:	10000326 	beq	r2,zero,4022e2c <__sbprintf+0x98>
 4022e20:	8080030b 	ldhu	r2,12(r16)
 4022e24:	10801014 	ori	r2,r2,64
 4022e28:	8080030d 	sth	r2,12(r16)
 4022e2c:	8805883a 	mov	r2,r17
 4022e30:	dfc11d17 	ldw	ra,1140(sp)
 4022e34:	dc811c17 	ldw	r18,1136(sp)
 4022e38:	dc411b17 	ldw	r17,1132(sp)
 4022e3c:	dc011a17 	ldw	r16,1128(sp)
 4022e40:	dec11e04 	addi	sp,sp,1144
 4022e44:	f800283a 	ret
 4022e48:	047fffc4 	movi	r17,-1
 4022e4c:	003ff106 	br	4022e14 <__alt_data_end+0xfffe2e14>

04022e50 <__swsetup_r>:
 4022e50:	008100f4 	movhi	r2,1027
 4022e54:	defffd04 	addi	sp,sp,-12
 4022e58:	108c7404 	addi	r2,r2,12752
 4022e5c:	dc400115 	stw	r17,4(sp)
 4022e60:	2023883a 	mov	r17,r4
 4022e64:	11000017 	ldw	r4,0(r2)
 4022e68:	dc000015 	stw	r16,0(sp)
 4022e6c:	dfc00215 	stw	ra,8(sp)
 4022e70:	2821883a 	mov	r16,r5
 4022e74:	20000226 	beq	r4,zero,4022e80 <__swsetup_r+0x30>
 4022e78:	20800e17 	ldw	r2,56(r4)
 4022e7c:	10003126 	beq	r2,zero,4022f44 <__swsetup_r+0xf4>
 4022e80:	8080030b 	ldhu	r2,12(r16)
 4022e84:	10c0020c 	andi	r3,r2,8
 4022e88:	1009883a 	mov	r4,r2
 4022e8c:	18000f26 	beq	r3,zero,4022ecc <__swsetup_r+0x7c>
 4022e90:	80c00417 	ldw	r3,16(r16)
 4022e94:	18001526 	beq	r3,zero,4022eec <__swsetup_r+0x9c>
 4022e98:	1100004c 	andi	r4,r2,1
 4022e9c:	20001c1e 	bne	r4,zero,4022f10 <__swsetup_r+0xc0>
 4022ea0:	1080008c 	andi	r2,r2,2
 4022ea4:	1000291e 	bne	r2,zero,4022f4c <__swsetup_r+0xfc>
 4022ea8:	80800517 	ldw	r2,20(r16)
 4022eac:	80800215 	stw	r2,8(r16)
 4022eb0:	18001c26 	beq	r3,zero,4022f24 <__swsetup_r+0xd4>
 4022eb4:	0005883a 	mov	r2,zero
 4022eb8:	dfc00217 	ldw	ra,8(sp)
 4022ebc:	dc400117 	ldw	r17,4(sp)
 4022ec0:	dc000017 	ldw	r16,0(sp)
 4022ec4:	dec00304 	addi	sp,sp,12
 4022ec8:	f800283a 	ret
 4022ecc:	2080040c 	andi	r2,r4,16
 4022ed0:	10002e26 	beq	r2,zero,4022f8c <__swsetup_r+0x13c>
 4022ed4:	2080010c 	andi	r2,r4,4
 4022ed8:	10001e1e 	bne	r2,zero,4022f54 <__swsetup_r+0x104>
 4022edc:	80c00417 	ldw	r3,16(r16)
 4022ee0:	20800214 	ori	r2,r4,8
 4022ee4:	8080030d 	sth	r2,12(r16)
 4022ee8:	183feb1e 	bne	r3,zero,4022e98 <__alt_data_end+0xfffe2e98>
 4022eec:	1100a00c 	andi	r4,r2,640
 4022ef0:	01408004 	movi	r5,512
 4022ef4:	217fe826 	beq	r4,r5,4022e98 <__alt_data_end+0xfffe2e98>
 4022ef8:	800b883a 	mov	r5,r16
 4022efc:	8809883a 	mov	r4,r17
 4022f00:	40259c80 	call	40259c8 <__smakebuf_r>
 4022f04:	8080030b 	ldhu	r2,12(r16)
 4022f08:	80c00417 	ldw	r3,16(r16)
 4022f0c:	003fe206 	br	4022e98 <__alt_data_end+0xfffe2e98>
 4022f10:	80800517 	ldw	r2,20(r16)
 4022f14:	80000215 	stw	zero,8(r16)
 4022f18:	0085c83a 	sub	r2,zero,r2
 4022f1c:	80800615 	stw	r2,24(r16)
 4022f20:	183fe41e 	bne	r3,zero,4022eb4 <__alt_data_end+0xfffe2eb4>
 4022f24:	80c0030b 	ldhu	r3,12(r16)
 4022f28:	0005883a 	mov	r2,zero
 4022f2c:	1900200c 	andi	r4,r3,128
 4022f30:	203fe126 	beq	r4,zero,4022eb8 <__alt_data_end+0xfffe2eb8>
 4022f34:	18c01014 	ori	r3,r3,64
 4022f38:	80c0030d 	sth	r3,12(r16)
 4022f3c:	00bfffc4 	movi	r2,-1
 4022f40:	003fdd06 	br	4022eb8 <__alt_data_end+0xfffe2eb8>
 4022f44:	4024e240 	call	4024e24 <__sinit>
 4022f48:	003fcd06 	br	4022e80 <__alt_data_end+0xfffe2e80>
 4022f4c:	0005883a 	mov	r2,zero
 4022f50:	003fd606 	br	4022eac <__alt_data_end+0xfffe2eac>
 4022f54:	81400c17 	ldw	r5,48(r16)
 4022f58:	28000626 	beq	r5,zero,4022f74 <__swsetup_r+0x124>
 4022f5c:	80801004 	addi	r2,r16,64
 4022f60:	28800326 	beq	r5,r2,4022f70 <__swsetup_r+0x120>
 4022f64:	8809883a 	mov	r4,r17
 4022f68:	4024f980 	call	4024f98 <_free_r>
 4022f6c:	8100030b 	ldhu	r4,12(r16)
 4022f70:	80000c15 	stw	zero,48(r16)
 4022f74:	80c00417 	ldw	r3,16(r16)
 4022f78:	00bff6c4 	movi	r2,-37
 4022f7c:	1108703a 	and	r4,r2,r4
 4022f80:	80000115 	stw	zero,4(r16)
 4022f84:	80c00015 	stw	r3,0(r16)
 4022f88:	003fd506 	br	4022ee0 <__alt_data_end+0xfffe2ee0>
 4022f8c:	00800244 	movi	r2,9
 4022f90:	88800015 	stw	r2,0(r17)
 4022f94:	20801014 	ori	r2,r4,64
 4022f98:	8080030d 	sth	r2,12(r16)
 4022f9c:	00bfffc4 	movi	r2,-1
 4022fa0:	003fc506 	br	4022eb8 <__alt_data_end+0xfffe2eb8>

04022fa4 <quorem>:
 4022fa4:	defff704 	addi	sp,sp,-36
 4022fa8:	dc800215 	stw	r18,8(sp)
 4022fac:	20800417 	ldw	r2,16(r4)
 4022fb0:	2c800417 	ldw	r18,16(r5)
 4022fb4:	dfc00815 	stw	ra,32(sp)
 4022fb8:	ddc00715 	stw	r23,28(sp)
 4022fbc:	dd800615 	stw	r22,24(sp)
 4022fc0:	dd400515 	stw	r21,20(sp)
 4022fc4:	dd000415 	stw	r20,16(sp)
 4022fc8:	dcc00315 	stw	r19,12(sp)
 4022fcc:	dc400115 	stw	r17,4(sp)
 4022fd0:	dc000015 	stw	r16,0(sp)
 4022fd4:	14807116 	blt	r2,r18,402319c <quorem+0x1f8>
 4022fd8:	94bfffc4 	addi	r18,r18,-1
 4022fdc:	94ad883a 	add	r22,r18,r18
 4022fe0:	b5ad883a 	add	r22,r22,r22
 4022fe4:	2c400504 	addi	r17,r5,20
 4022fe8:	8da9883a 	add	r20,r17,r22
 4022fec:	25400504 	addi	r21,r4,20
 4022ff0:	282f883a 	mov	r23,r5
 4022ff4:	adad883a 	add	r22,r21,r22
 4022ff8:	a1400017 	ldw	r5,0(r20)
 4022ffc:	2021883a 	mov	r16,r4
 4023000:	b1000017 	ldw	r4,0(r22)
 4023004:	29400044 	addi	r5,r5,1
 4023008:	402ad0c0 	call	402ad0c <__udivsi3>
 402300c:	1027883a 	mov	r19,r2
 4023010:	10002c26 	beq	r2,zero,40230c4 <quorem+0x120>
 4023014:	a813883a 	mov	r9,r21
 4023018:	880b883a 	mov	r5,r17
 402301c:	0009883a 	mov	r4,zero
 4023020:	000d883a 	mov	r6,zero
 4023024:	2a000017 	ldw	r8,0(r5)
 4023028:	49c00017 	ldw	r7,0(r9)
 402302c:	29400104 	addi	r5,r5,4
 4023030:	40bfffcc 	andi	r2,r8,65535
 4023034:	14c5383a 	mul	r2,r2,r19
 4023038:	4010d43a 	srli	r8,r8,16
 402303c:	38ffffcc 	andi	r3,r7,65535
 4023040:	1105883a 	add	r2,r2,r4
 4023044:	1008d43a 	srli	r4,r2,16
 4023048:	44d1383a 	mul	r8,r8,r19
 402304c:	198d883a 	add	r6,r3,r6
 4023050:	10ffffcc 	andi	r3,r2,65535
 4023054:	30c7c83a 	sub	r3,r6,r3
 4023058:	380ed43a 	srli	r7,r7,16
 402305c:	4105883a 	add	r2,r8,r4
 4023060:	180dd43a 	srai	r6,r3,16
 4023064:	113fffcc 	andi	r4,r2,65535
 4023068:	390fc83a 	sub	r7,r7,r4
 402306c:	398d883a 	add	r6,r7,r6
 4023070:	300e943a 	slli	r7,r6,16
 4023074:	18ffffcc 	andi	r3,r3,65535
 4023078:	1008d43a 	srli	r4,r2,16
 402307c:	38ceb03a 	or	r7,r7,r3
 4023080:	49c00015 	stw	r7,0(r9)
 4023084:	300dd43a 	srai	r6,r6,16
 4023088:	4a400104 	addi	r9,r9,4
 402308c:	a17fe52e 	bgeu	r20,r5,4023024 <__alt_data_end+0xfffe3024>
 4023090:	b0800017 	ldw	r2,0(r22)
 4023094:	10000b1e 	bne	r2,zero,40230c4 <quorem+0x120>
 4023098:	b0bfff04 	addi	r2,r22,-4
 402309c:	a880082e 	bgeu	r21,r2,40230c0 <quorem+0x11c>
 40230a0:	b0ffff17 	ldw	r3,-4(r22)
 40230a4:	18000326 	beq	r3,zero,40230b4 <quorem+0x110>
 40230a8:	00000506 	br	40230c0 <quorem+0x11c>
 40230ac:	10c00017 	ldw	r3,0(r2)
 40230b0:	1800031e 	bne	r3,zero,40230c0 <quorem+0x11c>
 40230b4:	10bfff04 	addi	r2,r2,-4
 40230b8:	94bfffc4 	addi	r18,r18,-1
 40230bc:	a8bffb36 	bltu	r21,r2,40230ac <__alt_data_end+0xfffe30ac>
 40230c0:	84800415 	stw	r18,16(r16)
 40230c4:	b80b883a 	mov	r5,r23
 40230c8:	8009883a 	mov	r4,r16
 40230cc:	40271080 	call	4027108 <__mcmp>
 40230d0:	10002616 	blt	r2,zero,402316c <quorem+0x1c8>
 40230d4:	9cc00044 	addi	r19,r19,1
 40230d8:	a805883a 	mov	r2,r21
 40230dc:	000b883a 	mov	r5,zero
 40230e0:	11000017 	ldw	r4,0(r2)
 40230e4:	89800017 	ldw	r6,0(r17)
 40230e8:	10800104 	addi	r2,r2,4
 40230ec:	20ffffcc 	andi	r3,r4,65535
 40230f0:	194b883a 	add	r5,r3,r5
 40230f4:	30ffffcc 	andi	r3,r6,65535
 40230f8:	28c7c83a 	sub	r3,r5,r3
 40230fc:	300cd43a 	srli	r6,r6,16
 4023100:	2008d43a 	srli	r4,r4,16
 4023104:	180bd43a 	srai	r5,r3,16
 4023108:	18ffffcc 	andi	r3,r3,65535
 402310c:	2189c83a 	sub	r4,r4,r6
 4023110:	2149883a 	add	r4,r4,r5
 4023114:	200c943a 	slli	r6,r4,16
 4023118:	8c400104 	addi	r17,r17,4
 402311c:	200bd43a 	srai	r5,r4,16
 4023120:	30c6b03a 	or	r3,r6,r3
 4023124:	10ffff15 	stw	r3,-4(r2)
 4023128:	a47fed2e 	bgeu	r20,r17,40230e0 <__alt_data_end+0xfffe30e0>
 402312c:	9485883a 	add	r2,r18,r18
 4023130:	1085883a 	add	r2,r2,r2
 4023134:	a887883a 	add	r3,r21,r2
 4023138:	18800017 	ldw	r2,0(r3)
 402313c:	10000b1e 	bne	r2,zero,402316c <quorem+0x1c8>
 4023140:	18bfff04 	addi	r2,r3,-4
 4023144:	a880082e 	bgeu	r21,r2,4023168 <quorem+0x1c4>
 4023148:	18ffff17 	ldw	r3,-4(r3)
 402314c:	18000326 	beq	r3,zero,402315c <quorem+0x1b8>
 4023150:	00000506 	br	4023168 <quorem+0x1c4>
 4023154:	10c00017 	ldw	r3,0(r2)
 4023158:	1800031e 	bne	r3,zero,4023168 <quorem+0x1c4>
 402315c:	10bfff04 	addi	r2,r2,-4
 4023160:	94bfffc4 	addi	r18,r18,-1
 4023164:	a8bffb36 	bltu	r21,r2,4023154 <__alt_data_end+0xfffe3154>
 4023168:	84800415 	stw	r18,16(r16)
 402316c:	9805883a 	mov	r2,r19
 4023170:	dfc00817 	ldw	ra,32(sp)
 4023174:	ddc00717 	ldw	r23,28(sp)
 4023178:	dd800617 	ldw	r22,24(sp)
 402317c:	dd400517 	ldw	r21,20(sp)
 4023180:	dd000417 	ldw	r20,16(sp)
 4023184:	dcc00317 	ldw	r19,12(sp)
 4023188:	dc800217 	ldw	r18,8(sp)
 402318c:	dc400117 	ldw	r17,4(sp)
 4023190:	dc000017 	ldw	r16,0(sp)
 4023194:	dec00904 	addi	sp,sp,36
 4023198:	f800283a 	ret
 402319c:	0005883a 	mov	r2,zero
 40231a0:	003ff306 	br	4023170 <__alt_data_end+0xfffe3170>

040231a4 <_dtoa_r>:
 40231a4:	20801017 	ldw	r2,64(r4)
 40231a8:	deffde04 	addi	sp,sp,-136
 40231ac:	df002015 	stw	fp,128(sp)
 40231b0:	dcc01b15 	stw	r19,108(sp)
 40231b4:	dc801a15 	stw	r18,104(sp)
 40231b8:	dc401915 	stw	r17,100(sp)
 40231bc:	dc001815 	stw	r16,96(sp)
 40231c0:	dfc02115 	stw	ra,132(sp)
 40231c4:	ddc01f15 	stw	r23,124(sp)
 40231c8:	dd801e15 	stw	r22,120(sp)
 40231cc:	dd401d15 	stw	r21,116(sp)
 40231d0:	dd001c15 	stw	r20,112(sp)
 40231d4:	d9c00315 	stw	r7,12(sp)
 40231d8:	2039883a 	mov	fp,r4
 40231dc:	3023883a 	mov	r17,r6
 40231e0:	2825883a 	mov	r18,r5
 40231e4:	dc002417 	ldw	r16,144(sp)
 40231e8:	3027883a 	mov	r19,r6
 40231ec:	10000826 	beq	r2,zero,4023210 <_dtoa_r+0x6c>
 40231f0:	21801117 	ldw	r6,68(r4)
 40231f4:	00c00044 	movi	r3,1
 40231f8:	100b883a 	mov	r5,r2
 40231fc:	1986983a 	sll	r3,r3,r6
 4023200:	11800115 	stw	r6,4(r2)
 4023204:	10c00215 	stw	r3,8(r2)
 4023208:	40268e80 	call	40268e8 <_Bfree>
 402320c:	e0001015 	stw	zero,64(fp)
 4023210:	88002e16 	blt	r17,zero,40232cc <_dtoa_r+0x128>
 4023214:	80000015 	stw	zero,0(r16)
 4023218:	889ffc2c 	andhi	r2,r17,32752
 402321c:	00dffc34 	movhi	r3,32752
 4023220:	10c01c26 	beq	r2,r3,4023294 <_dtoa_r+0xf0>
 4023224:	000d883a 	mov	r6,zero
 4023228:	000f883a 	mov	r7,zero
 402322c:	9009883a 	mov	r4,r18
 4023230:	980b883a 	mov	r5,r19
 4023234:	402bf5c0 	call	402bf5c <__eqdf2>
 4023238:	10002b1e 	bne	r2,zero,40232e8 <_dtoa_r+0x144>
 402323c:	d9c02317 	ldw	r7,140(sp)
 4023240:	00800044 	movi	r2,1
 4023244:	38800015 	stw	r2,0(r7)
 4023248:	d8802517 	ldw	r2,148(sp)
 402324c:	10019e26 	beq	r2,zero,40238c8 <_dtoa_r+0x724>
 4023250:	d8c02517 	ldw	r3,148(sp)
 4023254:	008100f4 	movhi	r2,1027
 4023258:	10849744 	addi	r2,r2,4701
 402325c:	18800015 	stw	r2,0(r3)
 4023260:	10bfffc4 	addi	r2,r2,-1
 4023264:	dfc02117 	ldw	ra,132(sp)
 4023268:	df002017 	ldw	fp,128(sp)
 402326c:	ddc01f17 	ldw	r23,124(sp)
 4023270:	dd801e17 	ldw	r22,120(sp)
 4023274:	dd401d17 	ldw	r21,116(sp)
 4023278:	dd001c17 	ldw	r20,112(sp)
 402327c:	dcc01b17 	ldw	r19,108(sp)
 4023280:	dc801a17 	ldw	r18,104(sp)
 4023284:	dc401917 	ldw	r17,100(sp)
 4023288:	dc001817 	ldw	r16,96(sp)
 402328c:	dec02204 	addi	sp,sp,136
 4023290:	f800283a 	ret
 4023294:	d8c02317 	ldw	r3,140(sp)
 4023298:	0089c3c4 	movi	r2,9999
 402329c:	18800015 	stw	r2,0(r3)
 40232a0:	90017726 	beq	r18,zero,4023880 <_dtoa_r+0x6dc>
 40232a4:	008100f4 	movhi	r2,1027
 40232a8:	1084a304 	addi	r2,r2,4748
 40232ac:	d9002517 	ldw	r4,148(sp)
 40232b0:	203fec26 	beq	r4,zero,4023264 <__alt_data_end+0xfffe3264>
 40232b4:	10c000c7 	ldb	r3,3(r2)
 40232b8:	1801781e 	bne	r3,zero,402389c <_dtoa_r+0x6f8>
 40232bc:	10c000c4 	addi	r3,r2,3
 40232c0:	d9802517 	ldw	r6,148(sp)
 40232c4:	30c00015 	stw	r3,0(r6)
 40232c8:	003fe606 	br	4023264 <__alt_data_end+0xfffe3264>
 40232cc:	04e00034 	movhi	r19,32768
 40232d0:	9cffffc4 	addi	r19,r19,-1
 40232d4:	00800044 	movi	r2,1
 40232d8:	8ce6703a 	and	r19,r17,r19
 40232dc:	80800015 	stw	r2,0(r16)
 40232e0:	9823883a 	mov	r17,r19
 40232e4:	003fcc06 	br	4023218 <__alt_data_end+0xfffe3218>
 40232e8:	d8800204 	addi	r2,sp,8
 40232ec:	d8800015 	stw	r2,0(sp)
 40232f0:	d9c00104 	addi	r7,sp,4
 40232f4:	900b883a 	mov	r5,r18
 40232f8:	980d883a 	mov	r6,r19
 40232fc:	e009883a 	mov	r4,fp
 4023300:	8820d53a 	srli	r16,r17,20
 4023304:	40274d40 	call	40274d4 <__d2b>
 4023308:	d8800915 	stw	r2,36(sp)
 402330c:	8001651e 	bne	r16,zero,40238a4 <_dtoa_r+0x700>
 4023310:	dd800217 	ldw	r22,8(sp)
 4023314:	dc000117 	ldw	r16,4(sp)
 4023318:	00800804 	movi	r2,32
 402331c:	b421883a 	add	r16,r22,r16
 4023320:	80c10c84 	addi	r3,r16,1074
 4023324:	10c2d10e 	bge	r2,r3,4023e6c <_dtoa_r+0xcc8>
 4023328:	00801004 	movi	r2,64
 402332c:	81010484 	addi	r4,r16,1042
 4023330:	10c7c83a 	sub	r3,r2,r3
 4023334:	9108d83a 	srl	r4,r18,r4
 4023338:	88e2983a 	sll	r17,r17,r3
 402333c:	2448b03a 	or	r4,r4,r17
 4023340:	402d3240 	call	402d324 <__floatunsidf>
 4023344:	017f8434 	movhi	r5,65040
 4023348:	01800044 	movi	r6,1
 402334c:	1009883a 	mov	r4,r2
 4023350:	194b883a 	add	r5,r3,r5
 4023354:	843fffc4 	addi	r16,r16,-1
 4023358:	d9801115 	stw	r6,68(sp)
 402335c:	000d883a 	mov	r6,zero
 4023360:	01cffe34 	movhi	r7,16376
 4023364:	402c8cc0 	call	402c8cc <__subdf3>
 4023368:	0198dbf4 	movhi	r6,25455
 402336c:	01cff4f4 	movhi	r7,16339
 4023370:	3190d844 	addi	r6,r6,17249
 4023374:	39e1e9c4 	addi	r7,r7,-30809
 4023378:	1009883a 	mov	r4,r2
 402337c:	180b883a 	mov	r5,r3
 4023380:	402c1b40 	call	402c1b4 <__muldf3>
 4023384:	01a2d874 	movhi	r6,35681
 4023388:	01cff1f4 	movhi	r7,16327
 402338c:	31b22cc4 	addi	r6,r6,-14157
 4023390:	39e28a04 	addi	r7,r7,-30168
 4023394:	180b883a 	mov	r5,r3
 4023398:	1009883a 	mov	r4,r2
 402339c:	402adc80 	call	402adc8 <__adddf3>
 40233a0:	8009883a 	mov	r4,r16
 40233a4:	1029883a 	mov	r20,r2
 40233a8:	1823883a 	mov	r17,r3
 40233ac:	402d2480 	call	402d248 <__floatsidf>
 40233b0:	019427f4 	movhi	r6,20639
 40233b4:	01cff4f4 	movhi	r7,16339
 40233b8:	319e7ec4 	addi	r6,r6,31227
 40233bc:	39d104c4 	addi	r7,r7,17427
 40233c0:	1009883a 	mov	r4,r2
 40233c4:	180b883a 	mov	r5,r3
 40233c8:	402c1b40 	call	402c1b4 <__muldf3>
 40233cc:	100d883a 	mov	r6,r2
 40233d0:	180f883a 	mov	r7,r3
 40233d4:	a009883a 	mov	r4,r20
 40233d8:	880b883a 	mov	r5,r17
 40233dc:	402adc80 	call	402adc8 <__adddf3>
 40233e0:	1009883a 	mov	r4,r2
 40233e4:	180b883a 	mov	r5,r3
 40233e8:	1029883a 	mov	r20,r2
 40233ec:	1823883a 	mov	r17,r3
 40233f0:	402d1c80 	call	402d1c8 <__fixdfsi>
 40233f4:	000d883a 	mov	r6,zero
 40233f8:	000f883a 	mov	r7,zero
 40233fc:	a009883a 	mov	r4,r20
 4023400:	880b883a 	mov	r5,r17
 4023404:	d8800515 	stw	r2,20(sp)
 4023408:	402c0c00 	call	402c0c0 <__ledf2>
 402340c:	10028716 	blt	r2,zero,4023e2c <_dtoa_r+0xc88>
 4023410:	d8c00517 	ldw	r3,20(sp)
 4023414:	00800584 	movi	r2,22
 4023418:	10c27536 	bltu	r2,r3,4023df0 <_dtoa_r+0xc4c>
 402341c:	180490fa 	slli	r2,r3,3
 4023420:	00c100f4 	movhi	r3,1027
 4023424:	18c4bf04 	addi	r3,r3,4860
 4023428:	1885883a 	add	r2,r3,r2
 402342c:	11000017 	ldw	r4,0(r2)
 4023430:	11400117 	ldw	r5,4(r2)
 4023434:	900d883a 	mov	r6,r18
 4023438:	980f883a 	mov	r7,r19
 402343c:	402bfe40 	call	402bfe4 <__gedf2>
 4023440:	00828d0e 	bge	zero,r2,4023e78 <_dtoa_r+0xcd4>
 4023444:	d9000517 	ldw	r4,20(sp)
 4023448:	d8000e15 	stw	zero,56(sp)
 402344c:	213fffc4 	addi	r4,r4,-1
 4023450:	d9000515 	stw	r4,20(sp)
 4023454:	b42dc83a 	sub	r22,r22,r16
 4023458:	b5bfffc4 	addi	r22,r22,-1
 402345c:	b0026f16 	blt	r22,zero,4023e1c <_dtoa_r+0xc78>
 4023460:	d8000815 	stw	zero,32(sp)
 4023464:	d9c00517 	ldw	r7,20(sp)
 4023468:	38026416 	blt	r7,zero,4023dfc <_dtoa_r+0xc58>
 402346c:	b1ed883a 	add	r22,r22,r7
 4023470:	d9c00d15 	stw	r7,52(sp)
 4023474:	d8000a15 	stw	zero,40(sp)
 4023478:	d9800317 	ldw	r6,12(sp)
 402347c:	00800244 	movi	r2,9
 4023480:	11811436 	bltu	r2,r6,40238d4 <_dtoa_r+0x730>
 4023484:	00800144 	movi	r2,5
 4023488:	1184e10e 	bge	r2,r6,4024810 <_dtoa_r+0x166c>
 402348c:	31bfff04 	addi	r6,r6,-4
 4023490:	d9800315 	stw	r6,12(sp)
 4023494:	0023883a 	mov	r17,zero
 4023498:	d9800317 	ldw	r6,12(sp)
 402349c:	008000c4 	movi	r2,3
 40234a0:	30836726 	beq	r6,r2,4024240 <_dtoa_r+0x109c>
 40234a4:	1183410e 	bge	r2,r6,40241ac <_dtoa_r+0x1008>
 40234a8:	d9c00317 	ldw	r7,12(sp)
 40234ac:	00800104 	movi	r2,4
 40234b0:	38827c26 	beq	r7,r2,4023ea4 <_dtoa_r+0xd00>
 40234b4:	00800144 	movi	r2,5
 40234b8:	3884c41e 	bne	r7,r2,40247cc <_dtoa_r+0x1628>
 40234bc:	00800044 	movi	r2,1
 40234c0:	d8800b15 	stw	r2,44(sp)
 40234c4:	d8c00517 	ldw	r3,20(sp)
 40234c8:	d9002217 	ldw	r4,136(sp)
 40234cc:	1907883a 	add	r3,r3,r4
 40234d0:	19800044 	addi	r6,r3,1
 40234d4:	d8c00c15 	stw	r3,48(sp)
 40234d8:	d9800615 	stw	r6,24(sp)
 40234dc:	0183a40e 	bge	zero,r6,4024370 <_dtoa_r+0x11cc>
 40234e0:	d9800617 	ldw	r6,24(sp)
 40234e4:	3021883a 	mov	r16,r6
 40234e8:	e0001115 	stw	zero,68(fp)
 40234ec:	008005c4 	movi	r2,23
 40234f0:	1184c92e 	bgeu	r2,r6,4024818 <_dtoa_r+0x1674>
 40234f4:	00c00044 	movi	r3,1
 40234f8:	00800104 	movi	r2,4
 40234fc:	1085883a 	add	r2,r2,r2
 4023500:	11000504 	addi	r4,r2,20
 4023504:	180b883a 	mov	r5,r3
 4023508:	18c00044 	addi	r3,r3,1
 402350c:	313ffb2e 	bgeu	r6,r4,40234fc <__alt_data_end+0xfffe34fc>
 4023510:	e1401115 	stw	r5,68(fp)
 4023514:	e009883a 	mov	r4,fp
 4023518:	40268400 	call	4026840 <_Balloc>
 402351c:	d8800715 	stw	r2,28(sp)
 4023520:	e0801015 	stw	r2,64(fp)
 4023524:	00800384 	movi	r2,14
 4023528:	1400f736 	bltu	r2,r16,4023908 <_dtoa_r+0x764>
 402352c:	8800f626 	beq	r17,zero,4023908 <_dtoa_r+0x764>
 4023530:	d9c00517 	ldw	r7,20(sp)
 4023534:	01c39a0e 	bge	zero,r7,40243a0 <_dtoa_r+0x11fc>
 4023538:	388003cc 	andi	r2,r7,15
 402353c:	100490fa 	slli	r2,r2,3
 4023540:	382bd13a 	srai	r21,r7,4
 4023544:	00c100f4 	movhi	r3,1027
 4023548:	18c4bf04 	addi	r3,r3,4860
 402354c:	1885883a 	add	r2,r3,r2
 4023550:	a8c0040c 	andi	r3,r21,16
 4023554:	12400017 	ldw	r9,0(r2)
 4023558:	12000117 	ldw	r8,4(r2)
 402355c:	18037926 	beq	r3,zero,4024344 <_dtoa_r+0x11a0>
 4023560:	008100f4 	movhi	r2,1027
 4023564:	1084b504 	addi	r2,r2,4820
 4023568:	11800817 	ldw	r6,32(r2)
 402356c:	11c00917 	ldw	r7,36(r2)
 4023570:	9009883a 	mov	r4,r18
 4023574:	980b883a 	mov	r5,r19
 4023578:	da001715 	stw	r8,92(sp)
 402357c:	da401615 	stw	r9,88(sp)
 4023580:	402b6740 	call	402b674 <__divdf3>
 4023584:	da001717 	ldw	r8,92(sp)
 4023588:	da401617 	ldw	r9,88(sp)
 402358c:	ad4003cc 	andi	r21,r21,15
 4023590:	040000c4 	movi	r16,3
 4023594:	1023883a 	mov	r17,r2
 4023598:	1829883a 	mov	r20,r3
 402359c:	a8001126 	beq	r21,zero,40235e4 <_dtoa_r+0x440>
 40235a0:	05c100f4 	movhi	r23,1027
 40235a4:	bdc4b504 	addi	r23,r23,4820
 40235a8:	4805883a 	mov	r2,r9
 40235ac:	4007883a 	mov	r3,r8
 40235b0:	a980004c 	andi	r6,r21,1
 40235b4:	1009883a 	mov	r4,r2
 40235b8:	a82bd07a 	srai	r21,r21,1
 40235bc:	180b883a 	mov	r5,r3
 40235c0:	30000426 	beq	r6,zero,40235d4 <_dtoa_r+0x430>
 40235c4:	b9800017 	ldw	r6,0(r23)
 40235c8:	b9c00117 	ldw	r7,4(r23)
 40235cc:	84000044 	addi	r16,r16,1
 40235d0:	402c1b40 	call	402c1b4 <__muldf3>
 40235d4:	bdc00204 	addi	r23,r23,8
 40235d8:	a83ff51e 	bne	r21,zero,40235b0 <__alt_data_end+0xfffe35b0>
 40235dc:	1013883a 	mov	r9,r2
 40235e0:	1811883a 	mov	r8,r3
 40235e4:	480d883a 	mov	r6,r9
 40235e8:	400f883a 	mov	r7,r8
 40235ec:	8809883a 	mov	r4,r17
 40235f0:	a00b883a 	mov	r5,r20
 40235f4:	402b6740 	call	402b674 <__divdf3>
 40235f8:	d8800f15 	stw	r2,60(sp)
 40235fc:	d8c01015 	stw	r3,64(sp)
 4023600:	d8c00e17 	ldw	r3,56(sp)
 4023604:	18000626 	beq	r3,zero,4023620 <_dtoa_r+0x47c>
 4023608:	d9000f17 	ldw	r4,60(sp)
 402360c:	d9401017 	ldw	r5,64(sp)
 4023610:	000d883a 	mov	r6,zero
 4023614:	01cffc34 	movhi	r7,16368
 4023618:	402c0c00 	call	402c0c0 <__ledf2>
 402361c:	10040b16 	blt	r2,zero,402464c <_dtoa_r+0x14a8>
 4023620:	8009883a 	mov	r4,r16
 4023624:	402d2480 	call	402d248 <__floatsidf>
 4023628:	d9800f17 	ldw	r6,60(sp)
 402362c:	d9c01017 	ldw	r7,64(sp)
 4023630:	1009883a 	mov	r4,r2
 4023634:	180b883a 	mov	r5,r3
 4023638:	402c1b40 	call	402c1b4 <__muldf3>
 402363c:	000d883a 	mov	r6,zero
 4023640:	01d00734 	movhi	r7,16412
 4023644:	1009883a 	mov	r4,r2
 4023648:	180b883a 	mov	r5,r3
 402364c:	402adc80 	call	402adc8 <__adddf3>
 4023650:	1021883a 	mov	r16,r2
 4023654:	d8800617 	ldw	r2,24(sp)
 4023658:	047f3034 	movhi	r17,64704
 402365c:	1c63883a 	add	r17,r3,r17
 4023660:	10031826 	beq	r2,zero,40242c4 <_dtoa_r+0x1120>
 4023664:	d8c00517 	ldw	r3,20(sp)
 4023668:	db000617 	ldw	r12,24(sp)
 402366c:	d8c01315 	stw	r3,76(sp)
 4023670:	d9000b17 	ldw	r4,44(sp)
 4023674:	20038f26 	beq	r4,zero,40244b4 <_dtoa_r+0x1310>
 4023678:	60bfffc4 	addi	r2,r12,-1
 402367c:	100490fa 	slli	r2,r2,3
 4023680:	00c100f4 	movhi	r3,1027
 4023684:	18c4bf04 	addi	r3,r3,4860
 4023688:	1885883a 	add	r2,r3,r2
 402368c:	11800017 	ldw	r6,0(r2)
 4023690:	11c00117 	ldw	r7,4(r2)
 4023694:	d8800717 	ldw	r2,28(sp)
 4023698:	0009883a 	mov	r4,zero
 402369c:	014ff834 	movhi	r5,16352
 40236a0:	db001615 	stw	r12,88(sp)
 40236a4:	15c00044 	addi	r23,r2,1
 40236a8:	402b6740 	call	402b674 <__divdf3>
 40236ac:	800d883a 	mov	r6,r16
 40236b0:	880f883a 	mov	r7,r17
 40236b4:	1009883a 	mov	r4,r2
 40236b8:	180b883a 	mov	r5,r3
 40236bc:	402c8cc0 	call	402c8cc <__subdf3>
 40236c0:	d9401017 	ldw	r5,64(sp)
 40236c4:	d9000f17 	ldw	r4,60(sp)
 40236c8:	102b883a 	mov	r21,r2
 40236cc:	d8c01215 	stw	r3,72(sp)
 40236d0:	402d1c80 	call	402d1c8 <__fixdfsi>
 40236d4:	1009883a 	mov	r4,r2
 40236d8:	1029883a 	mov	r20,r2
 40236dc:	402d2480 	call	402d248 <__floatsidf>
 40236e0:	d9000f17 	ldw	r4,60(sp)
 40236e4:	d9401017 	ldw	r5,64(sp)
 40236e8:	100d883a 	mov	r6,r2
 40236ec:	180f883a 	mov	r7,r3
 40236f0:	402c8cc0 	call	402c8cc <__subdf3>
 40236f4:	1823883a 	mov	r17,r3
 40236f8:	d8c00717 	ldw	r3,28(sp)
 40236fc:	d9401217 	ldw	r5,72(sp)
 4023700:	a2000c04 	addi	r8,r20,48
 4023704:	1021883a 	mov	r16,r2
 4023708:	1a000005 	stb	r8,0(r3)
 402370c:	800d883a 	mov	r6,r16
 4023710:	880f883a 	mov	r7,r17
 4023714:	a809883a 	mov	r4,r21
 4023718:	4029883a 	mov	r20,r8
 402371c:	402bfe40 	call	402bfe4 <__gedf2>
 4023720:	00841d16 	blt	zero,r2,4024798 <_dtoa_r+0x15f4>
 4023724:	800d883a 	mov	r6,r16
 4023728:	880f883a 	mov	r7,r17
 402372c:	0009883a 	mov	r4,zero
 4023730:	014ffc34 	movhi	r5,16368
 4023734:	402c8cc0 	call	402c8cc <__subdf3>
 4023738:	d9401217 	ldw	r5,72(sp)
 402373c:	100d883a 	mov	r6,r2
 4023740:	180f883a 	mov	r7,r3
 4023744:	a809883a 	mov	r4,r21
 4023748:	402bfe40 	call	402bfe4 <__gedf2>
 402374c:	db001617 	ldw	r12,88(sp)
 4023750:	00840e16 	blt	zero,r2,402478c <_dtoa_r+0x15e8>
 4023754:	00800044 	movi	r2,1
 4023758:	13006b0e 	bge	r2,r12,4023908 <_dtoa_r+0x764>
 402375c:	d9000717 	ldw	r4,28(sp)
 4023760:	dd800f15 	stw	r22,60(sp)
 4023764:	dcc01015 	stw	r19,64(sp)
 4023768:	2319883a 	add	r12,r4,r12
 402376c:	dcc01217 	ldw	r19,72(sp)
 4023770:	602d883a 	mov	r22,r12
 4023774:	dc801215 	stw	r18,72(sp)
 4023778:	b825883a 	mov	r18,r23
 402377c:	00000906 	br	40237a4 <_dtoa_r+0x600>
 4023780:	402c8cc0 	call	402c8cc <__subdf3>
 4023784:	a80d883a 	mov	r6,r21
 4023788:	980f883a 	mov	r7,r19
 402378c:	1009883a 	mov	r4,r2
 4023790:	180b883a 	mov	r5,r3
 4023794:	402c0c00 	call	402c0c0 <__ledf2>
 4023798:	1003e816 	blt	r2,zero,402473c <_dtoa_r+0x1598>
 402379c:	b825883a 	mov	r18,r23
 40237a0:	bd83e926 	beq	r23,r22,4024748 <_dtoa_r+0x15a4>
 40237a4:	a809883a 	mov	r4,r21
 40237a8:	980b883a 	mov	r5,r19
 40237ac:	000d883a 	mov	r6,zero
 40237b0:	01d00934 	movhi	r7,16420
 40237b4:	402c1b40 	call	402c1b4 <__muldf3>
 40237b8:	000d883a 	mov	r6,zero
 40237bc:	01d00934 	movhi	r7,16420
 40237c0:	8009883a 	mov	r4,r16
 40237c4:	880b883a 	mov	r5,r17
 40237c8:	102b883a 	mov	r21,r2
 40237cc:	1827883a 	mov	r19,r3
 40237d0:	402c1b40 	call	402c1b4 <__muldf3>
 40237d4:	180b883a 	mov	r5,r3
 40237d8:	1009883a 	mov	r4,r2
 40237dc:	1821883a 	mov	r16,r3
 40237e0:	1023883a 	mov	r17,r2
 40237e4:	402d1c80 	call	402d1c8 <__fixdfsi>
 40237e8:	1009883a 	mov	r4,r2
 40237ec:	1029883a 	mov	r20,r2
 40237f0:	402d2480 	call	402d248 <__floatsidf>
 40237f4:	8809883a 	mov	r4,r17
 40237f8:	800b883a 	mov	r5,r16
 40237fc:	100d883a 	mov	r6,r2
 4023800:	180f883a 	mov	r7,r3
 4023804:	402c8cc0 	call	402c8cc <__subdf3>
 4023808:	a5000c04 	addi	r20,r20,48
 402380c:	a80d883a 	mov	r6,r21
 4023810:	980f883a 	mov	r7,r19
 4023814:	1009883a 	mov	r4,r2
 4023818:	180b883a 	mov	r5,r3
 402381c:	95000005 	stb	r20,0(r18)
 4023820:	1021883a 	mov	r16,r2
 4023824:	1823883a 	mov	r17,r3
 4023828:	402c0c00 	call	402c0c0 <__ledf2>
 402382c:	bdc00044 	addi	r23,r23,1
 4023830:	800d883a 	mov	r6,r16
 4023834:	880f883a 	mov	r7,r17
 4023838:	0009883a 	mov	r4,zero
 402383c:	014ffc34 	movhi	r5,16368
 4023840:	103fcf0e 	bge	r2,zero,4023780 <__alt_data_end+0xfffe3780>
 4023844:	d8c01317 	ldw	r3,76(sp)
 4023848:	d8c00515 	stw	r3,20(sp)
 402384c:	d9400917 	ldw	r5,36(sp)
 4023850:	e009883a 	mov	r4,fp
 4023854:	40268e80 	call	40268e8 <_Bfree>
 4023858:	d9000517 	ldw	r4,20(sp)
 402385c:	d9802317 	ldw	r6,140(sp)
 4023860:	d9c02517 	ldw	r7,148(sp)
 4023864:	b8000005 	stb	zero,0(r23)
 4023868:	20800044 	addi	r2,r4,1
 402386c:	30800015 	stw	r2,0(r6)
 4023870:	3802aa26 	beq	r7,zero,402431c <_dtoa_r+0x1178>
 4023874:	3dc00015 	stw	r23,0(r7)
 4023878:	d8800717 	ldw	r2,28(sp)
 402387c:	003e7906 	br	4023264 <__alt_data_end+0xfffe3264>
 4023880:	00800434 	movhi	r2,16
 4023884:	10bfffc4 	addi	r2,r2,-1
 4023888:	88a2703a 	and	r17,r17,r2
 402388c:	883e851e 	bne	r17,zero,40232a4 <__alt_data_end+0xfffe32a4>
 4023890:	008100f4 	movhi	r2,1027
 4023894:	1084a004 	addi	r2,r2,4736
 4023898:	003e8406 	br	40232ac <__alt_data_end+0xfffe32ac>
 402389c:	10c00204 	addi	r3,r2,8
 40238a0:	003e8706 	br	40232c0 <__alt_data_end+0xfffe32c0>
 40238a4:	01400434 	movhi	r5,16
 40238a8:	297fffc4 	addi	r5,r5,-1
 40238ac:	994a703a 	and	r5,r19,r5
 40238b0:	9009883a 	mov	r4,r18
 40238b4:	843f0044 	addi	r16,r16,-1023
 40238b8:	294ffc34 	orhi	r5,r5,16368
 40238bc:	dd800217 	ldw	r22,8(sp)
 40238c0:	d8001115 	stw	zero,68(sp)
 40238c4:	003ea506 	br	402335c <__alt_data_end+0xfffe335c>
 40238c8:	008100f4 	movhi	r2,1027
 40238cc:	10849704 	addi	r2,r2,4700
 40238d0:	003e6406 	br	4023264 <__alt_data_end+0xfffe3264>
 40238d4:	e0001115 	stw	zero,68(fp)
 40238d8:	000b883a 	mov	r5,zero
 40238dc:	e009883a 	mov	r4,fp
 40238e0:	40268400 	call	4026840 <_Balloc>
 40238e4:	01bfffc4 	movi	r6,-1
 40238e8:	01c00044 	movi	r7,1
 40238ec:	d8800715 	stw	r2,28(sp)
 40238f0:	d9800c15 	stw	r6,48(sp)
 40238f4:	e0801015 	stw	r2,64(fp)
 40238f8:	d8000315 	stw	zero,12(sp)
 40238fc:	d9c00b15 	stw	r7,44(sp)
 4023900:	d9800615 	stw	r6,24(sp)
 4023904:	d8002215 	stw	zero,136(sp)
 4023908:	d8800117 	ldw	r2,4(sp)
 402390c:	10008916 	blt	r2,zero,4023b34 <_dtoa_r+0x990>
 4023910:	d9000517 	ldw	r4,20(sp)
 4023914:	00c00384 	movi	r3,14
 4023918:	19008616 	blt	r3,r4,4023b34 <_dtoa_r+0x990>
 402391c:	200490fa 	slli	r2,r4,3
 4023920:	00c100f4 	movhi	r3,1027
 4023924:	d9802217 	ldw	r6,136(sp)
 4023928:	18c4bf04 	addi	r3,r3,4860
 402392c:	1885883a 	add	r2,r3,r2
 4023930:	14000017 	ldw	r16,0(r2)
 4023934:	14400117 	ldw	r17,4(r2)
 4023938:	30016316 	blt	r6,zero,4023ec8 <_dtoa_r+0xd24>
 402393c:	800d883a 	mov	r6,r16
 4023940:	880f883a 	mov	r7,r17
 4023944:	9009883a 	mov	r4,r18
 4023948:	980b883a 	mov	r5,r19
 402394c:	402b6740 	call	402b674 <__divdf3>
 4023950:	180b883a 	mov	r5,r3
 4023954:	1009883a 	mov	r4,r2
 4023958:	402d1c80 	call	402d1c8 <__fixdfsi>
 402395c:	1009883a 	mov	r4,r2
 4023960:	102b883a 	mov	r21,r2
 4023964:	402d2480 	call	402d248 <__floatsidf>
 4023968:	800d883a 	mov	r6,r16
 402396c:	880f883a 	mov	r7,r17
 4023970:	1009883a 	mov	r4,r2
 4023974:	180b883a 	mov	r5,r3
 4023978:	402c1b40 	call	402c1b4 <__muldf3>
 402397c:	100d883a 	mov	r6,r2
 4023980:	180f883a 	mov	r7,r3
 4023984:	9009883a 	mov	r4,r18
 4023988:	980b883a 	mov	r5,r19
 402398c:	402c8cc0 	call	402c8cc <__subdf3>
 4023990:	d9c00717 	ldw	r7,28(sp)
 4023994:	1009883a 	mov	r4,r2
 4023998:	a8800c04 	addi	r2,r21,48
 402399c:	38800005 	stb	r2,0(r7)
 40239a0:	3dc00044 	addi	r23,r7,1
 40239a4:	d9c00617 	ldw	r7,24(sp)
 40239a8:	01800044 	movi	r6,1
 40239ac:	180b883a 	mov	r5,r3
 40239b0:	2005883a 	mov	r2,r4
 40239b4:	39803826 	beq	r7,r6,4023a98 <_dtoa_r+0x8f4>
 40239b8:	000d883a 	mov	r6,zero
 40239bc:	01d00934 	movhi	r7,16420
 40239c0:	402c1b40 	call	402c1b4 <__muldf3>
 40239c4:	000d883a 	mov	r6,zero
 40239c8:	000f883a 	mov	r7,zero
 40239cc:	1009883a 	mov	r4,r2
 40239d0:	180b883a 	mov	r5,r3
 40239d4:	1025883a 	mov	r18,r2
 40239d8:	1827883a 	mov	r19,r3
 40239dc:	402bf5c0 	call	402bf5c <__eqdf2>
 40239e0:	103f9a26 	beq	r2,zero,402384c <__alt_data_end+0xfffe384c>
 40239e4:	d9c00617 	ldw	r7,24(sp)
 40239e8:	d8c00717 	ldw	r3,28(sp)
 40239ec:	b829883a 	mov	r20,r23
 40239f0:	38bfffc4 	addi	r2,r7,-1
 40239f4:	18ad883a 	add	r22,r3,r2
 40239f8:	00000a06 	br	4023a24 <_dtoa_r+0x880>
 40239fc:	402c1b40 	call	402c1b4 <__muldf3>
 4023a00:	000d883a 	mov	r6,zero
 4023a04:	000f883a 	mov	r7,zero
 4023a08:	1009883a 	mov	r4,r2
 4023a0c:	180b883a 	mov	r5,r3
 4023a10:	1025883a 	mov	r18,r2
 4023a14:	1827883a 	mov	r19,r3
 4023a18:	b829883a 	mov	r20,r23
 4023a1c:	402bf5c0 	call	402bf5c <__eqdf2>
 4023a20:	103f8a26 	beq	r2,zero,402384c <__alt_data_end+0xfffe384c>
 4023a24:	800d883a 	mov	r6,r16
 4023a28:	880f883a 	mov	r7,r17
 4023a2c:	9009883a 	mov	r4,r18
 4023a30:	980b883a 	mov	r5,r19
 4023a34:	402b6740 	call	402b674 <__divdf3>
 4023a38:	180b883a 	mov	r5,r3
 4023a3c:	1009883a 	mov	r4,r2
 4023a40:	402d1c80 	call	402d1c8 <__fixdfsi>
 4023a44:	1009883a 	mov	r4,r2
 4023a48:	102b883a 	mov	r21,r2
 4023a4c:	402d2480 	call	402d248 <__floatsidf>
 4023a50:	800d883a 	mov	r6,r16
 4023a54:	880f883a 	mov	r7,r17
 4023a58:	1009883a 	mov	r4,r2
 4023a5c:	180b883a 	mov	r5,r3
 4023a60:	402c1b40 	call	402c1b4 <__muldf3>
 4023a64:	100d883a 	mov	r6,r2
 4023a68:	180f883a 	mov	r7,r3
 4023a6c:	9009883a 	mov	r4,r18
 4023a70:	980b883a 	mov	r5,r19
 4023a74:	402c8cc0 	call	402c8cc <__subdf3>
 4023a78:	aa000c04 	addi	r8,r21,48
 4023a7c:	a2000005 	stb	r8,0(r20)
 4023a80:	000d883a 	mov	r6,zero
 4023a84:	01d00934 	movhi	r7,16420
 4023a88:	1009883a 	mov	r4,r2
 4023a8c:	180b883a 	mov	r5,r3
 4023a90:	a5c00044 	addi	r23,r20,1
 4023a94:	b53fd91e 	bne	r22,r20,40239fc <__alt_data_end+0xfffe39fc>
 4023a98:	100d883a 	mov	r6,r2
 4023a9c:	180f883a 	mov	r7,r3
 4023aa0:	1009883a 	mov	r4,r2
 4023aa4:	180b883a 	mov	r5,r3
 4023aa8:	402adc80 	call	402adc8 <__adddf3>
 4023aac:	100d883a 	mov	r6,r2
 4023ab0:	180f883a 	mov	r7,r3
 4023ab4:	8009883a 	mov	r4,r16
 4023ab8:	880b883a 	mov	r5,r17
 4023abc:	1027883a 	mov	r19,r2
 4023ac0:	1825883a 	mov	r18,r3
 4023ac4:	402c0c00 	call	402c0c0 <__ledf2>
 4023ac8:	10000816 	blt	r2,zero,4023aec <_dtoa_r+0x948>
 4023acc:	980d883a 	mov	r6,r19
 4023ad0:	900f883a 	mov	r7,r18
 4023ad4:	8009883a 	mov	r4,r16
 4023ad8:	880b883a 	mov	r5,r17
 4023adc:	402bf5c0 	call	402bf5c <__eqdf2>
 4023ae0:	103f5a1e 	bne	r2,zero,402384c <__alt_data_end+0xfffe384c>
 4023ae4:	ad40004c 	andi	r21,r21,1
 4023ae8:	a83f5826 	beq	r21,zero,402384c <__alt_data_end+0xfffe384c>
 4023aec:	bd3fffc3 	ldbu	r20,-1(r23)
 4023af0:	b8bfffc4 	addi	r2,r23,-1
 4023af4:	1007883a 	mov	r3,r2
 4023af8:	01400e44 	movi	r5,57
 4023afc:	d9800717 	ldw	r6,28(sp)
 4023b00:	00000506 	br	4023b18 <_dtoa_r+0x974>
 4023b04:	18ffffc4 	addi	r3,r3,-1
 4023b08:	11824726 	beq	r2,r6,4024428 <_dtoa_r+0x1284>
 4023b0c:	1d000003 	ldbu	r20,0(r3)
 4023b10:	102f883a 	mov	r23,r2
 4023b14:	10bfffc4 	addi	r2,r2,-1
 4023b18:	a1003fcc 	andi	r4,r20,255
 4023b1c:	2100201c 	xori	r4,r4,128
 4023b20:	213fe004 	addi	r4,r4,-128
 4023b24:	217ff726 	beq	r4,r5,4023b04 <__alt_data_end+0xfffe3b04>
 4023b28:	a2000044 	addi	r8,r20,1
 4023b2c:	12000005 	stb	r8,0(r2)
 4023b30:	003f4606 	br	402384c <__alt_data_end+0xfffe384c>
 4023b34:	d9000b17 	ldw	r4,44(sp)
 4023b38:	2000c826 	beq	r4,zero,4023e5c <_dtoa_r+0xcb8>
 4023b3c:	d9800317 	ldw	r6,12(sp)
 4023b40:	00c00044 	movi	r3,1
 4023b44:	1980f90e 	bge	r3,r6,4023f2c <_dtoa_r+0xd88>
 4023b48:	d8800617 	ldw	r2,24(sp)
 4023b4c:	d8c00a17 	ldw	r3,40(sp)
 4023b50:	157fffc4 	addi	r21,r2,-1
 4023b54:	1d41f316 	blt	r3,r21,4024324 <_dtoa_r+0x1180>
 4023b58:	1d6bc83a 	sub	r21,r3,r21
 4023b5c:	d9c00617 	ldw	r7,24(sp)
 4023b60:	3802aa16 	blt	r7,zero,402460c <_dtoa_r+0x1468>
 4023b64:	dd000817 	ldw	r20,32(sp)
 4023b68:	d8800617 	ldw	r2,24(sp)
 4023b6c:	d8c00817 	ldw	r3,32(sp)
 4023b70:	01400044 	movi	r5,1
 4023b74:	e009883a 	mov	r4,fp
 4023b78:	1887883a 	add	r3,r3,r2
 4023b7c:	d8c00815 	stw	r3,32(sp)
 4023b80:	b0ad883a 	add	r22,r22,r2
 4023b84:	4026c4c0 	call	4026c4c <__i2b>
 4023b88:	1023883a 	mov	r17,r2
 4023b8c:	a0000826 	beq	r20,zero,4023bb0 <_dtoa_r+0xa0c>
 4023b90:	0580070e 	bge	zero,r22,4023bb0 <_dtoa_r+0xa0c>
 4023b94:	a005883a 	mov	r2,r20
 4023b98:	b500b916 	blt	r22,r20,4023e80 <_dtoa_r+0xcdc>
 4023b9c:	d9000817 	ldw	r4,32(sp)
 4023ba0:	a0a9c83a 	sub	r20,r20,r2
 4023ba4:	b0adc83a 	sub	r22,r22,r2
 4023ba8:	2089c83a 	sub	r4,r4,r2
 4023bac:	d9000815 	stw	r4,32(sp)
 4023bb0:	d9800a17 	ldw	r6,40(sp)
 4023bb4:	0181810e 	bge	zero,r6,40241bc <_dtoa_r+0x1018>
 4023bb8:	d9c00b17 	ldw	r7,44(sp)
 4023bbc:	3800b326 	beq	r7,zero,4023e8c <_dtoa_r+0xce8>
 4023bc0:	a800b226 	beq	r21,zero,4023e8c <_dtoa_r+0xce8>
 4023bc4:	880b883a 	mov	r5,r17
 4023bc8:	a80d883a 	mov	r6,r21
 4023bcc:	e009883a 	mov	r4,fp
 4023bd0:	4026e800 	call	4026e80 <__pow5mult>
 4023bd4:	d9800917 	ldw	r6,36(sp)
 4023bd8:	100b883a 	mov	r5,r2
 4023bdc:	e009883a 	mov	r4,fp
 4023be0:	1023883a 	mov	r17,r2
 4023be4:	4026c880 	call	4026c88 <__multiply>
 4023be8:	1021883a 	mov	r16,r2
 4023bec:	d8800a17 	ldw	r2,40(sp)
 4023bf0:	d9400917 	ldw	r5,36(sp)
 4023bf4:	e009883a 	mov	r4,fp
 4023bf8:	1545c83a 	sub	r2,r2,r21
 4023bfc:	d8800a15 	stw	r2,40(sp)
 4023c00:	40268e80 	call	40268e8 <_Bfree>
 4023c04:	d8c00a17 	ldw	r3,40(sp)
 4023c08:	18009f1e 	bne	r3,zero,4023e88 <_dtoa_r+0xce4>
 4023c0c:	05c00044 	movi	r23,1
 4023c10:	e009883a 	mov	r4,fp
 4023c14:	b80b883a 	mov	r5,r23
 4023c18:	4026c4c0 	call	4026c4c <__i2b>
 4023c1c:	d9000d17 	ldw	r4,52(sp)
 4023c20:	102b883a 	mov	r21,r2
 4023c24:	2000ce26 	beq	r4,zero,4023f60 <_dtoa_r+0xdbc>
 4023c28:	200d883a 	mov	r6,r4
 4023c2c:	100b883a 	mov	r5,r2
 4023c30:	e009883a 	mov	r4,fp
 4023c34:	4026e800 	call	4026e80 <__pow5mult>
 4023c38:	d9800317 	ldw	r6,12(sp)
 4023c3c:	102b883a 	mov	r21,r2
 4023c40:	b981810e 	bge	r23,r6,4024248 <_dtoa_r+0x10a4>
 4023c44:	0027883a 	mov	r19,zero
 4023c48:	a8800417 	ldw	r2,16(r21)
 4023c4c:	05c00804 	movi	r23,32
 4023c50:	10800104 	addi	r2,r2,4
 4023c54:	1085883a 	add	r2,r2,r2
 4023c58:	1085883a 	add	r2,r2,r2
 4023c5c:	a885883a 	add	r2,r21,r2
 4023c60:	11000017 	ldw	r4,0(r2)
 4023c64:	4026b340 	call	4026b34 <__hi0bits>
 4023c68:	b885c83a 	sub	r2,r23,r2
 4023c6c:	1585883a 	add	r2,r2,r22
 4023c70:	108007cc 	andi	r2,r2,31
 4023c74:	1000b326 	beq	r2,zero,4023f44 <_dtoa_r+0xda0>
 4023c78:	00c00804 	movi	r3,32
 4023c7c:	1887c83a 	sub	r3,r3,r2
 4023c80:	01000104 	movi	r4,4
 4023c84:	20c2cd0e 	bge	r4,r3,40247bc <_dtoa_r+0x1618>
 4023c88:	00c00704 	movi	r3,28
 4023c8c:	1885c83a 	sub	r2,r3,r2
 4023c90:	d8c00817 	ldw	r3,32(sp)
 4023c94:	a0a9883a 	add	r20,r20,r2
 4023c98:	b0ad883a 	add	r22,r22,r2
 4023c9c:	1887883a 	add	r3,r3,r2
 4023ca0:	d8c00815 	stw	r3,32(sp)
 4023ca4:	d9800817 	ldw	r6,32(sp)
 4023ca8:	0180040e 	bge	zero,r6,4023cbc <_dtoa_r+0xb18>
 4023cac:	800b883a 	mov	r5,r16
 4023cb0:	e009883a 	mov	r4,fp
 4023cb4:	4026fc00 	call	4026fc0 <__lshift>
 4023cb8:	1021883a 	mov	r16,r2
 4023cbc:	0580050e 	bge	zero,r22,4023cd4 <_dtoa_r+0xb30>
 4023cc0:	a80b883a 	mov	r5,r21
 4023cc4:	b00d883a 	mov	r6,r22
 4023cc8:	e009883a 	mov	r4,fp
 4023ccc:	4026fc00 	call	4026fc0 <__lshift>
 4023cd0:	102b883a 	mov	r21,r2
 4023cd4:	d9c00e17 	ldw	r7,56(sp)
 4023cd8:	3801211e 	bne	r7,zero,4024160 <_dtoa_r+0xfbc>
 4023cdc:	d9800617 	ldw	r6,24(sp)
 4023ce0:	0181380e 	bge	zero,r6,40241c4 <_dtoa_r+0x1020>
 4023ce4:	d8c00b17 	ldw	r3,44(sp)
 4023ce8:	1800ab1e 	bne	r3,zero,4023f98 <_dtoa_r+0xdf4>
 4023cec:	dc800717 	ldw	r18,28(sp)
 4023cf0:	dcc00617 	ldw	r19,24(sp)
 4023cf4:	9029883a 	mov	r20,r18
 4023cf8:	00000206 	br	4023d04 <_dtoa_r+0xb60>
 4023cfc:	40269100 	call	4026910 <__multadd>
 4023d00:	1021883a 	mov	r16,r2
 4023d04:	a80b883a 	mov	r5,r21
 4023d08:	8009883a 	mov	r4,r16
 4023d0c:	4022fa40 	call	4022fa4 <quorem>
 4023d10:	10800c04 	addi	r2,r2,48
 4023d14:	90800005 	stb	r2,0(r18)
 4023d18:	94800044 	addi	r18,r18,1
 4023d1c:	9507c83a 	sub	r3,r18,r20
 4023d20:	000f883a 	mov	r7,zero
 4023d24:	01800284 	movi	r6,10
 4023d28:	800b883a 	mov	r5,r16
 4023d2c:	e009883a 	mov	r4,fp
 4023d30:	1cfff216 	blt	r3,r19,4023cfc <__alt_data_end+0xfffe3cfc>
 4023d34:	1011883a 	mov	r8,r2
 4023d38:	d8800617 	ldw	r2,24(sp)
 4023d3c:	0082370e 	bge	zero,r2,402461c <_dtoa_r+0x1478>
 4023d40:	d9000717 	ldw	r4,28(sp)
 4023d44:	0025883a 	mov	r18,zero
 4023d48:	20af883a 	add	r23,r4,r2
 4023d4c:	01800044 	movi	r6,1
 4023d50:	800b883a 	mov	r5,r16
 4023d54:	e009883a 	mov	r4,fp
 4023d58:	da001715 	stw	r8,92(sp)
 4023d5c:	4026fc00 	call	4026fc0 <__lshift>
 4023d60:	a80b883a 	mov	r5,r21
 4023d64:	1009883a 	mov	r4,r2
 4023d68:	d8800915 	stw	r2,36(sp)
 4023d6c:	40271080 	call	4027108 <__mcmp>
 4023d70:	da001717 	ldw	r8,92(sp)
 4023d74:	0081800e 	bge	zero,r2,4024378 <_dtoa_r+0x11d4>
 4023d78:	b93fffc3 	ldbu	r4,-1(r23)
 4023d7c:	b8bfffc4 	addi	r2,r23,-1
 4023d80:	1007883a 	mov	r3,r2
 4023d84:	01800e44 	movi	r6,57
 4023d88:	d9c00717 	ldw	r7,28(sp)
 4023d8c:	00000506 	br	4023da4 <_dtoa_r+0xc00>
 4023d90:	18ffffc4 	addi	r3,r3,-1
 4023d94:	11c12326 	beq	r2,r7,4024224 <_dtoa_r+0x1080>
 4023d98:	19000003 	ldbu	r4,0(r3)
 4023d9c:	102f883a 	mov	r23,r2
 4023da0:	10bfffc4 	addi	r2,r2,-1
 4023da4:	21403fcc 	andi	r5,r4,255
 4023da8:	2940201c 	xori	r5,r5,128
 4023dac:	297fe004 	addi	r5,r5,-128
 4023db0:	29bff726 	beq	r5,r6,4023d90 <__alt_data_end+0xfffe3d90>
 4023db4:	21000044 	addi	r4,r4,1
 4023db8:	11000005 	stb	r4,0(r2)
 4023dbc:	a80b883a 	mov	r5,r21
 4023dc0:	e009883a 	mov	r4,fp
 4023dc4:	40268e80 	call	40268e8 <_Bfree>
 4023dc8:	883ea026 	beq	r17,zero,402384c <__alt_data_end+0xfffe384c>
 4023dcc:	90000426 	beq	r18,zero,4023de0 <_dtoa_r+0xc3c>
 4023dd0:	94400326 	beq	r18,r17,4023de0 <_dtoa_r+0xc3c>
 4023dd4:	900b883a 	mov	r5,r18
 4023dd8:	e009883a 	mov	r4,fp
 4023ddc:	40268e80 	call	40268e8 <_Bfree>
 4023de0:	880b883a 	mov	r5,r17
 4023de4:	e009883a 	mov	r4,fp
 4023de8:	40268e80 	call	40268e8 <_Bfree>
 4023dec:	003e9706 	br	402384c <__alt_data_end+0xfffe384c>
 4023df0:	01800044 	movi	r6,1
 4023df4:	d9800e15 	stw	r6,56(sp)
 4023df8:	003d9606 	br	4023454 <__alt_data_end+0xfffe3454>
 4023dfc:	d8800817 	ldw	r2,32(sp)
 4023e00:	d8c00517 	ldw	r3,20(sp)
 4023e04:	d8000d15 	stw	zero,52(sp)
 4023e08:	10c5c83a 	sub	r2,r2,r3
 4023e0c:	00c9c83a 	sub	r4,zero,r3
 4023e10:	d8800815 	stw	r2,32(sp)
 4023e14:	d9000a15 	stw	r4,40(sp)
 4023e18:	003d9706 	br	4023478 <__alt_data_end+0xfffe3478>
 4023e1c:	05adc83a 	sub	r22,zero,r22
 4023e20:	dd800815 	stw	r22,32(sp)
 4023e24:	002d883a 	mov	r22,zero
 4023e28:	003d8e06 	br	4023464 <__alt_data_end+0xfffe3464>
 4023e2c:	d9000517 	ldw	r4,20(sp)
 4023e30:	402d2480 	call	402d248 <__floatsidf>
 4023e34:	100d883a 	mov	r6,r2
 4023e38:	180f883a 	mov	r7,r3
 4023e3c:	a009883a 	mov	r4,r20
 4023e40:	880b883a 	mov	r5,r17
 4023e44:	402bf5c0 	call	402bf5c <__eqdf2>
 4023e48:	103d7126 	beq	r2,zero,4023410 <__alt_data_end+0xfffe3410>
 4023e4c:	d9c00517 	ldw	r7,20(sp)
 4023e50:	39ffffc4 	addi	r7,r7,-1
 4023e54:	d9c00515 	stw	r7,20(sp)
 4023e58:	003d6d06 	br	4023410 <__alt_data_end+0xfffe3410>
 4023e5c:	dd400a17 	ldw	r21,40(sp)
 4023e60:	dd000817 	ldw	r20,32(sp)
 4023e64:	0023883a 	mov	r17,zero
 4023e68:	003f4806 	br	4023b8c <__alt_data_end+0xfffe3b8c>
 4023e6c:	10e3c83a 	sub	r17,r2,r3
 4023e70:	9448983a 	sll	r4,r18,r17
 4023e74:	003d3206 	br	4023340 <__alt_data_end+0xfffe3340>
 4023e78:	d8000e15 	stw	zero,56(sp)
 4023e7c:	003d7506 	br	4023454 <__alt_data_end+0xfffe3454>
 4023e80:	b005883a 	mov	r2,r22
 4023e84:	003f4506 	br	4023b9c <__alt_data_end+0xfffe3b9c>
 4023e88:	dc000915 	stw	r16,36(sp)
 4023e8c:	d9800a17 	ldw	r6,40(sp)
 4023e90:	d9400917 	ldw	r5,36(sp)
 4023e94:	e009883a 	mov	r4,fp
 4023e98:	4026e800 	call	4026e80 <__pow5mult>
 4023e9c:	1021883a 	mov	r16,r2
 4023ea0:	003f5a06 	br	4023c0c <__alt_data_end+0xfffe3c0c>
 4023ea4:	01c00044 	movi	r7,1
 4023ea8:	d9c00b15 	stw	r7,44(sp)
 4023eac:	d8802217 	ldw	r2,136(sp)
 4023eb0:	0081280e 	bge	zero,r2,4024354 <_dtoa_r+0x11b0>
 4023eb4:	100d883a 	mov	r6,r2
 4023eb8:	1021883a 	mov	r16,r2
 4023ebc:	d8800c15 	stw	r2,48(sp)
 4023ec0:	d8800615 	stw	r2,24(sp)
 4023ec4:	003d8806 	br	40234e8 <__alt_data_end+0xfffe34e8>
 4023ec8:	d8800617 	ldw	r2,24(sp)
 4023ecc:	00be9b16 	blt	zero,r2,402393c <__alt_data_end+0xfffe393c>
 4023ed0:	10010f1e 	bne	r2,zero,4024310 <_dtoa_r+0x116c>
 4023ed4:	880b883a 	mov	r5,r17
 4023ed8:	000d883a 	mov	r6,zero
 4023edc:	01d00534 	movhi	r7,16404
 4023ee0:	8009883a 	mov	r4,r16
 4023ee4:	402c1b40 	call	402c1b4 <__muldf3>
 4023ee8:	900d883a 	mov	r6,r18
 4023eec:	980f883a 	mov	r7,r19
 4023ef0:	1009883a 	mov	r4,r2
 4023ef4:	180b883a 	mov	r5,r3
 4023ef8:	402bfe40 	call	402bfe4 <__gedf2>
 4023efc:	002b883a 	mov	r21,zero
 4023f00:	0023883a 	mov	r17,zero
 4023f04:	1000bf16 	blt	r2,zero,4024204 <_dtoa_r+0x1060>
 4023f08:	d9802217 	ldw	r6,136(sp)
 4023f0c:	ddc00717 	ldw	r23,28(sp)
 4023f10:	018c303a 	nor	r6,zero,r6
 4023f14:	d9800515 	stw	r6,20(sp)
 4023f18:	a80b883a 	mov	r5,r21
 4023f1c:	e009883a 	mov	r4,fp
 4023f20:	40268e80 	call	40268e8 <_Bfree>
 4023f24:	883e4926 	beq	r17,zero,402384c <__alt_data_end+0xfffe384c>
 4023f28:	003fad06 	br	4023de0 <__alt_data_end+0xfffe3de0>
 4023f2c:	d9c01117 	ldw	r7,68(sp)
 4023f30:	3801bc26 	beq	r7,zero,4024624 <_dtoa_r+0x1480>
 4023f34:	10810cc4 	addi	r2,r2,1075
 4023f38:	dd400a17 	ldw	r21,40(sp)
 4023f3c:	dd000817 	ldw	r20,32(sp)
 4023f40:	003f0a06 	br	4023b6c <__alt_data_end+0xfffe3b6c>
 4023f44:	00800704 	movi	r2,28
 4023f48:	d9000817 	ldw	r4,32(sp)
 4023f4c:	a0a9883a 	add	r20,r20,r2
 4023f50:	b0ad883a 	add	r22,r22,r2
 4023f54:	2089883a 	add	r4,r4,r2
 4023f58:	d9000815 	stw	r4,32(sp)
 4023f5c:	003f5106 	br	4023ca4 <__alt_data_end+0xfffe3ca4>
 4023f60:	d8c00317 	ldw	r3,12(sp)
 4023f64:	b8c1fc0e 	bge	r23,r3,4024758 <_dtoa_r+0x15b4>
 4023f68:	0027883a 	mov	r19,zero
 4023f6c:	b805883a 	mov	r2,r23
 4023f70:	003f3e06 	br	4023c6c <__alt_data_end+0xfffe3c6c>
 4023f74:	880b883a 	mov	r5,r17
 4023f78:	e009883a 	mov	r4,fp
 4023f7c:	000f883a 	mov	r7,zero
 4023f80:	01800284 	movi	r6,10
 4023f84:	40269100 	call	4026910 <__multadd>
 4023f88:	d9000c17 	ldw	r4,48(sp)
 4023f8c:	1023883a 	mov	r17,r2
 4023f90:	0102040e 	bge	zero,r4,40247a4 <_dtoa_r+0x1600>
 4023f94:	d9000615 	stw	r4,24(sp)
 4023f98:	0500050e 	bge	zero,r20,4023fb0 <_dtoa_r+0xe0c>
 4023f9c:	880b883a 	mov	r5,r17
 4023fa0:	a00d883a 	mov	r6,r20
 4023fa4:	e009883a 	mov	r4,fp
 4023fa8:	4026fc00 	call	4026fc0 <__lshift>
 4023fac:	1023883a 	mov	r17,r2
 4023fb0:	9801241e 	bne	r19,zero,4024444 <_dtoa_r+0x12a0>
 4023fb4:	8829883a 	mov	r20,r17
 4023fb8:	d9000617 	ldw	r4,24(sp)
 4023fbc:	dcc00717 	ldw	r19,28(sp)
 4023fc0:	9480004c 	andi	r18,r18,1
 4023fc4:	20bfffc4 	addi	r2,r4,-1
 4023fc8:	9885883a 	add	r2,r19,r2
 4023fcc:	d8800415 	stw	r2,16(sp)
 4023fd0:	dc800615 	stw	r18,24(sp)
 4023fd4:	a80b883a 	mov	r5,r21
 4023fd8:	8009883a 	mov	r4,r16
 4023fdc:	4022fa40 	call	4022fa4 <quorem>
 4023fe0:	880b883a 	mov	r5,r17
 4023fe4:	8009883a 	mov	r4,r16
 4023fe8:	102f883a 	mov	r23,r2
 4023fec:	40271080 	call	4027108 <__mcmp>
 4023ff0:	a80b883a 	mov	r5,r21
 4023ff4:	a00d883a 	mov	r6,r20
 4023ff8:	e009883a 	mov	r4,fp
 4023ffc:	102d883a 	mov	r22,r2
 4024000:	40271680 	call	4027168 <__mdiff>
 4024004:	1007883a 	mov	r3,r2
 4024008:	10800317 	ldw	r2,12(r2)
 402400c:	bc800c04 	addi	r18,r23,48
 4024010:	180b883a 	mov	r5,r3
 4024014:	10004e1e 	bne	r2,zero,4024150 <_dtoa_r+0xfac>
 4024018:	8009883a 	mov	r4,r16
 402401c:	d8c01615 	stw	r3,88(sp)
 4024020:	40271080 	call	4027108 <__mcmp>
 4024024:	d8c01617 	ldw	r3,88(sp)
 4024028:	e009883a 	mov	r4,fp
 402402c:	d8801615 	stw	r2,88(sp)
 4024030:	180b883a 	mov	r5,r3
 4024034:	40268e80 	call	40268e8 <_Bfree>
 4024038:	d8801617 	ldw	r2,88(sp)
 402403c:	1000041e 	bne	r2,zero,4024050 <_dtoa_r+0xeac>
 4024040:	d9800317 	ldw	r6,12(sp)
 4024044:	3000021e 	bne	r6,zero,4024050 <_dtoa_r+0xeac>
 4024048:	d8c00617 	ldw	r3,24(sp)
 402404c:	18003726 	beq	r3,zero,402412c <_dtoa_r+0xf88>
 4024050:	b0002016 	blt	r22,zero,40240d4 <_dtoa_r+0xf30>
 4024054:	b000041e 	bne	r22,zero,4024068 <_dtoa_r+0xec4>
 4024058:	d9000317 	ldw	r4,12(sp)
 402405c:	2000021e 	bne	r4,zero,4024068 <_dtoa_r+0xec4>
 4024060:	d8c00617 	ldw	r3,24(sp)
 4024064:	18001b26 	beq	r3,zero,40240d4 <_dtoa_r+0xf30>
 4024068:	00810716 	blt	zero,r2,4024488 <_dtoa_r+0x12e4>
 402406c:	d8c00417 	ldw	r3,16(sp)
 4024070:	9d800044 	addi	r22,r19,1
 4024074:	9c800005 	stb	r18,0(r19)
 4024078:	b02f883a 	mov	r23,r22
 402407c:	98c10626 	beq	r19,r3,4024498 <_dtoa_r+0x12f4>
 4024080:	800b883a 	mov	r5,r16
 4024084:	000f883a 	mov	r7,zero
 4024088:	01800284 	movi	r6,10
 402408c:	e009883a 	mov	r4,fp
 4024090:	40269100 	call	4026910 <__multadd>
 4024094:	1021883a 	mov	r16,r2
 4024098:	000f883a 	mov	r7,zero
 402409c:	01800284 	movi	r6,10
 40240a0:	880b883a 	mov	r5,r17
 40240a4:	e009883a 	mov	r4,fp
 40240a8:	8d002526 	beq	r17,r20,4024140 <_dtoa_r+0xf9c>
 40240ac:	40269100 	call	4026910 <__multadd>
 40240b0:	a00b883a 	mov	r5,r20
 40240b4:	000f883a 	mov	r7,zero
 40240b8:	01800284 	movi	r6,10
 40240bc:	e009883a 	mov	r4,fp
 40240c0:	1023883a 	mov	r17,r2
 40240c4:	40269100 	call	4026910 <__multadd>
 40240c8:	1029883a 	mov	r20,r2
 40240cc:	b027883a 	mov	r19,r22
 40240d0:	003fc006 	br	4023fd4 <__alt_data_end+0xfffe3fd4>
 40240d4:	9011883a 	mov	r8,r18
 40240d8:	00800e0e 	bge	zero,r2,4024114 <_dtoa_r+0xf70>
 40240dc:	800b883a 	mov	r5,r16
 40240e0:	01800044 	movi	r6,1
 40240e4:	e009883a 	mov	r4,fp
 40240e8:	da001715 	stw	r8,92(sp)
 40240ec:	4026fc00 	call	4026fc0 <__lshift>
 40240f0:	a80b883a 	mov	r5,r21
 40240f4:	1009883a 	mov	r4,r2
 40240f8:	1021883a 	mov	r16,r2
 40240fc:	40271080 	call	4027108 <__mcmp>
 4024100:	da001717 	ldw	r8,92(sp)
 4024104:	0081960e 	bge	zero,r2,4024760 <_dtoa_r+0x15bc>
 4024108:	00800e44 	movi	r2,57
 402410c:	40817026 	beq	r8,r2,40246d0 <_dtoa_r+0x152c>
 4024110:	ba000c44 	addi	r8,r23,49
 4024114:	8825883a 	mov	r18,r17
 4024118:	9dc00044 	addi	r23,r19,1
 402411c:	9a000005 	stb	r8,0(r19)
 4024120:	a023883a 	mov	r17,r20
 4024124:	dc000915 	stw	r16,36(sp)
 4024128:	003f2406 	br	4023dbc <__alt_data_end+0xfffe3dbc>
 402412c:	00800e44 	movi	r2,57
 4024130:	9011883a 	mov	r8,r18
 4024134:	90816626 	beq	r18,r2,40246d0 <_dtoa_r+0x152c>
 4024138:	05bff516 	blt	zero,r22,4024110 <__alt_data_end+0xfffe4110>
 402413c:	003ff506 	br	4024114 <__alt_data_end+0xfffe4114>
 4024140:	40269100 	call	4026910 <__multadd>
 4024144:	1023883a 	mov	r17,r2
 4024148:	1029883a 	mov	r20,r2
 402414c:	003fdf06 	br	40240cc <__alt_data_end+0xfffe40cc>
 4024150:	e009883a 	mov	r4,fp
 4024154:	40268e80 	call	40268e8 <_Bfree>
 4024158:	00800044 	movi	r2,1
 402415c:	003fbc06 	br	4024050 <__alt_data_end+0xfffe4050>
 4024160:	a80b883a 	mov	r5,r21
 4024164:	8009883a 	mov	r4,r16
 4024168:	40271080 	call	4027108 <__mcmp>
 402416c:	103edb0e 	bge	r2,zero,4023cdc <__alt_data_end+0xfffe3cdc>
 4024170:	800b883a 	mov	r5,r16
 4024174:	000f883a 	mov	r7,zero
 4024178:	01800284 	movi	r6,10
 402417c:	e009883a 	mov	r4,fp
 4024180:	40269100 	call	4026910 <__multadd>
 4024184:	1021883a 	mov	r16,r2
 4024188:	d8800517 	ldw	r2,20(sp)
 402418c:	d8c00b17 	ldw	r3,44(sp)
 4024190:	10bfffc4 	addi	r2,r2,-1
 4024194:	d8800515 	stw	r2,20(sp)
 4024198:	183f761e 	bne	r3,zero,4023f74 <__alt_data_end+0xfffe3f74>
 402419c:	d9000c17 	ldw	r4,48(sp)
 40241a0:	0101730e 	bge	zero,r4,4024770 <_dtoa_r+0x15cc>
 40241a4:	d9000615 	stw	r4,24(sp)
 40241a8:	003ed006 	br	4023cec <__alt_data_end+0xfffe3cec>
 40241ac:	00800084 	movi	r2,2
 40241b0:	3081861e 	bne	r6,r2,40247cc <_dtoa_r+0x1628>
 40241b4:	d8000b15 	stw	zero,44(sp)
 40241b8:	003f3c06 	br	4023eac <__alt_data_end+0xfffe3eac>
 40241bc:	dc000917 	ldw	r16,36(sp)
 40241c0:	003e9206 	br	4023c0c <__alt_data_end+0xfffe3c0c>
 40241c4:	d9c00317 	ldw	r7,12(sp)
 40241c8:	00800084 	movi	r2,2
 40241cc:	11fec50e 	bge	r2,r7,4023ce4 <__alt_data_end+0xfffe3ce4>
 40241d0:	d9000617 	ldw	r4,24(sp)
 40241d4:	20013c1e 	bne	r4,zero,40246c8 <_dtoa_r+0x1524>
 40241d8:	a80b883a 	mov	r5,r21
 40241dc:	000f883a 	mov	r7,zero
 40241e0:	01800144 	movi	r6,5
 40241e4:	e009883a 	mov	r4,fp
 40241e8:	40269100 	call	4026910 <__multadd>
 40241ec:	100b883a 	mov	r5,r2
 40241f0:	8009883a 	mov	r4,r16
 40241f4:	102b883a 	mov	r21,r2
 40241f8:	40271080 	call	4027108 <__mcmp>
 40241fc:	dc000915 	stw	r16,36(sp)
 4024200:	00bf410e 	bge	zero,r2,4023f08 <__alt_data_end+0xfffe3f08>
 4024204:	d9c00717 	ldw	r7,28(sp)
 4024208:	00800c44 	movi	r2,49
 402420c:	38800005 	stb	r2,0(r7)
 4024210:	d8800517 	ldw	r2,20(sp)
 4024214:	3dc00044 	addi	r23,r7,1
 4024218:	10800044 	addi	r2,r2,1
 402421c:	d8800515 	stw	r2,20(sp)
 4024220:	003f3d06 	br	4023f18 <__alt_data_end+0xfffe3f18>
 4024224:	d9800517 	ldw	r6,20(sp)
 4024228:	d9c00717 	ldw	r7,28(sp)
 402422c:	00800c44 	movi	r2,49
 4024230:	31800044 	addi	r6,r6,1
 4024234:	d9800515 	stw	r6,20(sp)
 4024238:	38800005 	stb	r2,0(r7)
 402423c:	003edf06 	br	4023dbc <__alt_data_end+0xfffe3dbc>
 4024240:	d8000b15 	stw	zero,44(sp)
 4024244:	003c9f06 	br	40234c4 <__alt_data_end+0xfffe34c4>
 4024248:	903e7e1e 	bne	r18,zero,4023c44 <__alt_data_end+0xfffe3c44>
 402424c:	00800434 	movhi	r2,16
 4024250:	10bfffc4 	addi	r2,r2,-1
 4024254:	9884703a 	and	r2,r19,r2
 4024258:	1000ea1e 	bne	r2,zero,4024604 <_dtoa_r+0x1460>
 402425c:	9cdffc2c 	andhi	r19,r19,32752
 4024260:	9800e826 	beq	r19,zero,4024604 <_dtoa_r+0x1460>
 4024264:	d9c00817 	ldw	r7,32(sp)
 4024268:	b5800044 	addi	r22,r22,1
 402426c:	04c00044 	movi	r19,1
 4024270:	39c00044 	addi	r7,r7,1
 4024274:	d9c00815 	stw	r7,32(sp)
 4024278:	d8800d17 	ldw	r2,52(sp)
 402427c:	103e721e 	bne	r2,zero,4023c48 <__alt_data_end+0xfffe3c48>
 4024280:	00800044 	movi	r2,1
 4024284:	003e7906 	br	4023c6c <__alt_data_end+0xfffe3c6c>
 4024288:	8009883a 	mov	r4,r16
 402428c:	402d2480 	call	402d248 <__floatsidf>
 4024290:	d9800f17 	ldw	r6,60(sp)
 4024294:	d9c01017 	ldw	r7,64(sp)
 4024298:	1009883a 	mov	r4,r2
 402429c:	180b883a 	mov	r5,r3
 40242a0:	402c1b40 	call	402c1b4 <__muldf3>
 40242a4:	000d883a 	mov	r6,zero
 40242a8:	01d00734 	movhi	r7,16412
 40242ac:	1009883a 	mov	r4,r2
 40242b0:	180b883a 	mov	r5,r3
 40242b4:	402adc80 	call	402adc8 <__adddf3>
 40242b8:	047f3034 	movhi	r17,64704
 40242bc:	1021883a 	mov	r16,r2
 40242c0:	1c63883a 	add	r17,r3,r17
 40242c4:	d9000f17 	ldw	r4,60(sp)
 40242c8:	d9401017 	ldw	r5,64(sp)
 40242cc:	000d883a 	mov	r6,zero
 40242d0:	01d00534 	movhi	r7,16404
 40242d4:	402c8cc0 	call	402c8cc <__subdf3>
 40242d8:	800d883a 	mov	r6,r16
 40242dc:	880f883a 	mov	r7,r17
 40242e0:	1009883a 	mov	r4,r2
 40242e4:	180b883a 	mov	r5,r3
 40242e8:	102b883a 	mov	r21,r2
 40242ec:	1829883a 	mov	r20,r3
 40242f0:	402bfe40 	call	402bfe4 <__gedf2>
 40242f4:	00806c16 	blt	zero,r2,40244a8 <_dtoa_r+0x1304>
 40242f8:	89e0003c 	xorhi	r7,r17,32768
 40242fc:	800d883a 	mov	r6,r16
 4024300:	a809883a 	mov	r4,r21
 4024304:	a00b883a 	mov	r5,r20
 4024308:	402c0c00 	call	402c0c0 <__ledf2>
 402430c:	103d7e0e 	bge	r2,zero,4023908 <__alt_data_end+0xfffe3908>
 4024310:	002b883a 	mov	r21,zero
 4024314:	0023883a 	mov	r17,zero
 4024318:	003efb06 	br	4023f08 <__alt_data_end+0xfffe3f08>
 402431c:	d8800717 	ldw	r2,28(sp)
 4024320:	003bd006 	br	4023264 <__alt_data_end+0xfffe3264>
 4024324:	d9000a17 	ldw	r4,40(sp)
 4024328:	d9800d17 	ldw	r6,52(sp)
 402432c:	dd400a15 	stw	r21,40(sp)
 4024330:	a905c83a 	sub	r2,r21,r4
 4024334:	308d883a 	add	r6,r6,r2
 4024338:	d9800d15 	stw	r6,52(sp)
 402433c:	002b883a 	mov	r21,zero
 4024340:	003e0606 	br	4023b5c <__alt_data_end+0xfffe3b5c>
 4024344:	9023883a 	mov	r17,r18
 4024348:	9829883a 	mov	r20,r19
 402434c:	04000084 	movi	r16,2
 4024350:	003c9206 	br	402359c <__alt_data_end+0xfffe359c>
 4024354:	04000044 	movi	r16,1
 4024358:	dc000c15 	stw	r16,48(sp)
 402435c:	dc000615 	stw	r16,24(sp)
 4024360:	dc002215 	stw	r16,136(sp)
 4024364:	e0001115 	stw	zero,68(fp)
 4024368:	000b883a 	mov	r5,zero
 402436c:	003c6906 	br	4023514 <__alt_data_end+0xfffe3514>
 4024370:	3021883a 	mov	r16,r6
 4024374:	003ffb06 	br	4024364 <__alt_data_end+0xfffe4364>
 4024378:	1000021e 	bne	r2,zero,4024384 <_dtoa_r+0x11e0>
 402437c:	4200004c 	andi	r8,r8,1
 4024380:	403e7d1e 	bne	r8,zero,4023d78 <__alt_data_end+0xfffe3d78>
 4024384:	01000c04 	movi	r4,48
 4024388:	00000106 	br	4024390 <_dtoa_r+0x11ec>
 402438c:	102f883a 	mov	r23,r2
 4024390:	b8bfffc4 	addi	r2,r23,-1
 4024394:	10c00007 	ldb	r3,0(r2)
 4024398:	193ffc26 	beq	r3,r4,402438c <__alt_data_end+0xfffe438c>
 402439c:	003e8706 	br	4023dbc <__alt_data_end+0xfffe3dbc>
 40243a0:	d8800517 	ldw	r2,20(sp)
 40243a4:	00a3c83a 	sub	r17,zero,r2
 40243a8:	8800a426 	beq	r17,zero,402463c <_dtoa_r+0x1498>
 40243ac:	888003cc 	andi	r2,r17,15
 40243b0:	100490fa 	slli	r2,r2,3
 40243b4:	00c100f4 	movhi	r3,1027
 40243b8:	18c4bf04 	addi	r3,r3,4860
 40243bc:	1885883a 	add	r2,r3,r2
 40243c0:	11800017 	ldw	r6,0(r2)
 40243c4:	11c00117 	ldw	r7,4(r2)
 40243c8:	9009883a 	mov	r4,r18
 40243cc:	980b883a 	mov	r5,r19
 40243d0:	8823d13a 	srai	r17,r17,4
 40243d4:	402c1b40 	call	402c1b4 <__muldf3>
 40243d8:	d8800f15 	stw	r2,60(sp)
 40243dc:	d8c01015 	stw	r3,64(sp)
 40243e0:	8800e826 	beq	r17,zero,4024784 <_dtoa_r+0x15e0>
 40243e4:	050100f4 	movhi	r20,1027
 40243e8:	a504b504 	addi	r20,r20,4820
 40243ec:	04000084 	movi	r16,2
 40243f0:	8980004c 	andi	r6,r17,1
 40243f4:	1009883a 	mov	r4,r2
 40243f8:	8823d07a 	srai	r17,r17,1
 40243fc:	180b883a 	mov	r5,r3
 4024400:	30000426 	beq	r6,zero,4024414 <_dtoa_r+0x1270>
 4024404:	a1800017 	ldw	r6,0(r20)
 4024408:	a1c00117 	ldw	r7,4(r20)
 402440c:	84000044 	addi	r16,r16,1
 4024410:	402c1b40 	call	402c1b4 <__muldf3>
 4024414:	a5000204 	addi	r20,r20,8
 4024418:	883ff51e 	bne	r17,zero,40243f0 <__alt_data_end+0xfffe43f0>
 402441c:	d8800f15 	stw	r2,60(sp)
 4024420:	d8c01015 	stw	r3,64(sp)
 4024424:	003c7606 	br	4023600 <__alt_data_end+0xfffe3600>
 4024428:	00c00c04 	movi	r3,48
 402442c:	10c00005 	stb	r3,0(r2)
 4024430:	d8c00517 	ldw	r3,20(sp)
 4024434:	bd3fffc3 	ldbu	r20,-1(r23)
 4024438:	18c00044 	addi	r3,r3,1
 402443c:	d8c00515 	stw	r3,20(sp)
 4024440:	003db906 	br	4023b28 <__alt_data_end+0xfffe3b28>
 4024444:	89400117 	ldw	r5,4(r17)
 4024448:	e009883a 	mov	r4,fp
 402444c:	40268400 	call	4026840 <_Balloc>
 4024450:	89800417 	ldw	r6,16(r17)
 4024454:	89400304 	addi	r5,r17,12
 4024458:	11000304 	addi	r4,r2,12
 402445c:	31800084 	addi	r6,r6,2
 4024460:	318d883a 	add	r6,r6,r6
 4024464:	318d883a 	add	r6,r6,r6
 4024468:	1027883a 	mov	r19,r2
 402446c:	40264740 	call	4026474 <memcpy>
 4024470:	01800044 	movi	r6,1
 4024474:	980b883a 	mov	r5,r19
 4024478:	e009883a 	mov	r4,fp
 402447c:	4026fc00 	call	4026fc0 <__lshift>
 4024480:	1029883a 	mov	r20,r2
 4024484:	003ecc06 	br	4023fb8 <__alt_data_end+0xfffe3fb8>
 4024488:	00800e44 	movi	r2,57
 402448c:	90809026 	beq	r18,r2,40246d0 <_dtoa_r+0x152c>
 4024490:	92000044 	addi	r8,r18,1
 4024494:	003f1f06 	br	4024114 <__alt_data_end+0xfffe4114>
 4024498:	9011883a 	mov	r8,r18
 402449c:	8825883a 	mov	r18,r17
 40244a0:	a023883a 	mov	r17,r20
 40244a4:	003e2906 	br	4023d4c <__alt_data_end+0xfffe3d4c>
 40244a8:	002b883a 	mov	r21,zero
 40244ac:	0023883a 	mov	r17,zero
 40244b0:	003f5406 	br	4024204 <__alt_data_end+0xfffe4204>
 40244b4:	61bfffc4 	addi	r6,r12,-1
 40244b8:	300490fa 	slli	r2,r6,3
 40244bc:	00c100f4 	movhi	r3,1027
 40244c0:	18c4bf04 	addi	r3,r3,4860
 40244c4:	1885883a 	add	r2,r3,r2
 40244c8:	11000017 	ldw	r4,0(r2)
 40244cc:	11400117 	ldw	r5,4(r2)
 40244d0:	d8800717 	ldw	r2,28(sp)
 40244d4:	880f883a 	mov	r7,r17
 40244d8:	d9801215 	stw	r6,72(sp)
 40244dc:	800d883a 	mov	r6,r16
 40244e0:	db001615 	stw	r12,88(sp)
 40244e4:	15c00044 	addi	r23,r2,1
 40244e8:	402c1b40 	call	402c1b4 <__muldf3>
 40244ec:	d9401017 	ldw	r5,64(sp)
 40244f0:	d9000f17 	ldw	r4,60(sp)
 40244f4:	d8c01515 	stw	r3,84(sp)
 40244f8:	d8801415 	stw	r2,80(sp)
 40244fc:	402d1c80 	call	402d1c8 <__fixdfsi>
 4024500:	1009883a 	mov	r4,r2
 4024504:	1021883a 	mov	r16,r2
 4024508:	402d2480 	call	402d248 <__floatsidf>
 402450c:	d9000f17 	ldw	r4,60(sp)
 4024510:	d9401017 	ldw	r5,64(sp)
 4024514:	100d883a 	mov	r6,r2
 4024518:	180f883a 	mov	r7,r3
 402451c:	402c8cc0 	call	402c8cc <__subdf3>
 4024520:	1829883a 	mov	r20,r3
 4024524:	d8c00717 	ldw	r3,28(sp)
 4024528:	84000c04 	addi	r16,r16,48
 402452c:	1023883a 	mov	r17,r2
 4024530:	1c000005 	stb	r16,0(r3)
 4024534:	db001617 	ldw	r12,88(sp)
 4024538:	00800044 	movi	r2,1
 402453c:	60802226 	beq	r12,r2,40245c8 <_dtoa_r+0x1424>
 4024540:	d9c00717 	ldw	r7,28(sp)
 4024544:	8805883a 	mov	r2,r17
 4024548:	b82b883a 	mov	r21,r23
 402454c:	3b19883a 	add	r12,r7,r12
 4024550:	6023883a 	mov	r17,r12
 4024554:	a007883a 	mov	r3,r20
 4024558:	dc800f15 	stw	r18,60(sp)
 402455c:	000d883a 	mov	r6,zero
 4024560:	01d00934 	movhi	r7,16420
 4024564:	1009883a 	mov	r4,r2
 4024568:	180b883a 	mov	r5,r3
 402456c:	402c1b40 	call	402c1b4 <__muldf3>
 4024570:	180b883a 	mov	r5,r3
 4024574:	1009883a 	mov	r4,r2
 4024578:	1829883a 	mov	r20,r3
 402457c:	1025883a 	mov	r18,r2
 4024580:	402d1c80 	call	402d1c8 <__fixdfsi>
 4024584:	1009883a 	mov	r4,r2
 4024588:	1021883a 	mov	r16,r2
 402458c:	402d2480 	call	402d248 <__floatsidf>
 4024590:	100d883a 	mov	r6,r2
 4024594:	180f883a 	mov	r7,r3
 4024598:	9009883a 	mov	r4,r18
 402459c:	a00b883a 	mov	r5,r20
 40245a0:	84000c04 	addi	r16,r16,48
 40245a4:	402c8cc0 	call	402c8cc <__subdf3>
 40245a8:	ad400044 	addi	r21,r21,1
 40245ac:	ac3fffc5 	stb	r16,-1(r21)
 40245b0:	ac7fea1e 	bne	r21,r17,402455c <__alt_data_end+0xfffe455c>
 40245b4:	1023883a 	mov	r17,r2
 40245b8:	d8801217 	ldw	r2,72(sp)
 40245bc:	dc800f17 	ldw	r18,60(sp)
 40245c0:	1829883a 	mov	r20,r3
 40245c4:	b8af883a 	add	r23,r23,r2
 40245c8:	d9001417 	ldw	r4,80(sp)
 40245cc:	d9401517 	ldw	r5,84(sp)
 40245d0:	000d883a 	mov	r6,zero
 40245d4:	01cff834 	movhi	r7,16352
 40245d8:	402adc80 	call	402adc8 <__adddf3>
 40245dc:	880d883a 	mov	r6,r17
 40245e0:	a00f883a 	mov	r7,r20
 40245e4:	1009883a 	mov	r4,r2
 40245e8:	180b883a 	mov	r5,r3
 40245ec:	402c0c00 	call	402c0c0 <__ledf2>
 40245f0:	10003e0e 	bge	r2,zero,40246ec <_dtoa_r+0x1548>
 40245f4:	d9001317 	ldw	r4,76(sp)
 40245f8:	bd3fffc3 	ldbu	r20,-1(r23)
 40245fc:	d9000515 	stw	r4,20(sp)
 4024600:	003d3b06 	br	4023af0 <__alt_data_end+0xfffe3af0>
 4024604:	0027883a 	mov	r19,zero
 4024608:	003f1b06 	br	4024278 <__alt_data_end+0xfffe4278>
 402460c:	d8800817 	ldw	r2,32(sp)
 4024610:	11e9c83a 	sub	r20,r2,r7
 4024614:	0005883a 	mov	r2,zero
 4024618:	003d5406 	br	4023b6c <__alt_data_end+0xfffe3b6c>
 402461c:	00800044 	movi	r2,1
 4024620:	003dc706 	br	4023d40 <__alt_data_end+0xfffe3d40>
 4024624:	d8c00217 	ldw	r3,8(sp)
 4024628:	00800d84 	movi	r2,54
 402462c:	dd400a17 	ldw	r21,40(sp)
 4024630:	10c5c83a 	sub	r2,r2,r3
 4024634:	dd000817 	ldw	r20,32(sp)
 4024638:	003d4c06 	br	4023b6c <__alt_data_end+0xfffe3b6c>
 402463c:	dc800f15 	stw	r18,60(sp)
 4024640:	dcc01015 	stw	r19,64(sp)
 4024644:	04000084 	movi	r16,2
 4024648:	003bed06 	br	4023600 <__alt_data_end+0xfffe3600>
 402464c:	d9000617 	ldw	r4,24(sp)
 4024650:	203f0d26 	beq	r4,zero,4024288 <__alt_data_end+0xfffe4288>
 4024654:	d9800c17 	ldw	r6,48(sp)
 4024658:	01bcab0e 	bge	zero,r6,4023908 <__alt_data_end+0xfffe3908>
 402465c:	d9401017 	ldw	r5,64(sp)
 4024660:	d9000f17 	ldw	r4,60(sp)
 4024664:	000d883a 	mov	r6,zero
 4024668:	01d00934 	movhi	r7,16420
 402466c:	402c1b40 	call	402c1b4 <__muldf3>
 4024670:	81000044 	addi	r4,r16,1
 4024674:	d8800f15 	stw	r2,60(sp)
 4024678:	d8c01015 	stw	r3,64(sp)
 402467c:	402d2480 	call	402d248 <__floatsidf>
 4024680:	d9800f17 	ldw	r6,60(sp)
 4024684:	d9c01017 	ldw	r7,64(sp)
 4024688:	1009883a 	mov	r4,r2
 402468c:	180b883a 	mov	r5,r3
 4024690:	402c1b40 	call	402c1b4 <__muldf3>
 4024694:	01d00734 	movhi	r7,16412
 4024698:	000d883a 	mov	r6,zero
 402469c:	1009883a 	mov	r4,r2
 40246a0:	180b883a 	mov	r5,r3
 40246a4:	402adc80 	call	402adc8 <__adddf3>
 40246a8:	d9c00517 	ldw	r7,20(sp)
 40246ac:	047f3034 	movhi	r17,64704
 40246b0:	1021883a 	mov	r16,r2
 40246b4:	39ffffc4 	addi	r7,r7,-1
 40246b8:	d9c01315 	stw	r7,76(sp)
 40246bc:	1c63883a 	add	r17,r3,r17
 40246c0:	db000c17 	ldw	r12,48(sp)
 40246c4:	003bea06 	br	4023670 <__alt_data_end+0xfffe3670>
 40246c8:	dc000915 	stw	r16,36(sp)
 40246cc:	003e0e06 	br	4023f08 <__alt_data_end+0xfffe3f08>
 40246d0:	01000e44 	movi	r4,57
 40246d4:	8825883a 	mov	r18,r17
 40246d8:	9dc00044 	addi	r23,r19,1
 40246dc:	99000005 	stb	r4,0(r19)
 40246e0:	a023883a 	mov	r17,r20
 40246e4:	dc000915 	stw	r16,36(sp)
 40246e8:	003da406 	br	4023d7c <__alt_data_end+0xfffe3d7c>
 40246ec:	d9801417 	ldw	r6,80(sp)
 40246f0:	d9c01517 	ldw	r7,84(sp)
 40246f4:	0009883a 	mov	r4,zero
 40246f8:	014ff834 	movhi	r5,16352
 40246fc:	402c8cc0 	call	402c8cc <__subdf3>
 4024700:	880d883a 	mov	r6,r17
 4024704:	a00f883a 	mov	r7,r20
 4024708:	1009883a 	mov	r4,r2
 402470c:	180b883a 	mov	r5,r3
 4024710:	402bfe40 	call	402bfe4 <__gedf2>
 4024714:	00bc7c0e 	bge	zero,r2,4023908 <__alt_data_end+0xfffe3908>
 4024718:	01000c04 	movi	r4,48
 402471c:	00000106 	br	4024724 <_dtoa_r+0x1580>
 4024720:	102f883a 	mov	r23,r2
 4024724:	b8bfffc4 	addi	r2,r23,-1
 4024728:	10c00007 	ldb	r3,0(r2)
 402472c:	193ffc26 	beq	r3,r4,4024720 <__alt_data_end+0xfffe4720>
 4024730:	d9801317 	ldw	r6,76(sp)
 4024734:	d9800515 	stw	r6,20(sp)
 4024738:	003c4406 	br	402384c <__alt_data_end+0xfffe384c>
 402473c:	d9801317 	ldw	r6,76(sp)
 4024740:	d9800515 	stw	r6,20(sp)
 4024744:	003cea06 	br	4023af0 <__alt_data_end+0xfffe3af0>
 4024748:	dd800f17 	ldw	r22,60(sp)
 402474c:	dcc01017 	ldw	r19,64(sp)
 4024750:	dc801217 	ldw	r18,72(sp)
 4024754:	003c6c06 	br	4023908 <__alt_data_end+0xfffe3908>
 4024758:	903e031e 	bne	r18,zero,4023f68 <__alt_data_end+0xfffe3f68>
 402475c:	003ebb06 	br	402424c <__alt_data_end+0xfffe424c>
 4024760:	103e6c1e 	bne	r2,zero,4024114 <__alt_data_end+0xfffe4114>
 4024764:	4080004c 	andi	r2,r8,1
 4024768:	103e6a26 	beq	r2,zero,4024114 <__alt_data_end+0xfffe4114>
 402476c:	003e6606 	br	4024108 <__alt_data_end+0xfffe4108>
 4024770:	d8c00317 	ldw	r3,12(sp)
 4024774:	00800084 	movi	r2,2
 4024778:	10c02916 	blt	r2,r3,4024820 <_dtoa_r+0x167c>
 402477c:	d9000c17 	ldw	r4,48(sp)
 4024780:	003e8806 	br	40241a4 <__alt_data_end+0xfffe41a4>
 4024784:	04000084 	movi	r16,2
 4024788:	003b9d06 	br	4023600 <__alt_data_end+0xfffe3600>
 402478c:	d9001317 	ldw	r4,76(sp)
 4024790:	d9000515 	stw	r4,20(sp)
 4024794:	003cd606 	br	4023af0 <__alt_data_end+0xfffe3af0>
 4024798:	d8801317 	ldw	r2,76(sp)
 402479c:	d8800515 	stw	r2,20(sp)
 40247a0:	003c2a06 	br	402384c <__alt_data_end+0xfffe384c>
 40247a4:	d9800317 	ldw	r6,12(sp)
 40247a8:	00800084 	movi	r2,2
 40247ac:	11801516 	blt	r2,r6,4024804 <_dtoa_r+0x1660>
 40247b0:	d9c00c17 	ldw	r7,48(sp)
 40247b4:	d9c00615 	stw	r7,24(sp)
 40247b8:	003df706 	br	4023f98 <__alt_data_end+0xfffe3f98>
 40247bc:	193d3926 	beq	r3,r4,4023ca4 <__alt_data_end+0xfffe3ca4>
 40247c0:	00c00f04 	movi	r3,60
 40247c4:	1885c83a 	sub	r2,r3,r2
 40247c8:	003ddf06 	br	4023f48 <__alt_data_end+0xfffe3f48>
 40247cc:	e009883a 	mov	r4,fp
 40247d0:	e0001115 	stw	zero,68(fp)
 40247d4:	000b883a 	mov	r5,zero
 40247d8:	40268400 	call	4026840 <_Balloc>
 40247dc:	d8800715 	stw	r2,28(sp)
 40247e0:	d8c00717 	ldw	r3,28(sp)
 40247e4:	00bfffc4 	movi	r2,-1
 40247e8:	01000044 	movi	r4,1
 40247ec:	d8800c15 	stw	r2,48(sp)
 40247f0:	e0c01015 	stw	r3,64(fp)
 40247f4:	d9000b15 	stw	r4,44(sp)
 40247f8:	d8800615 	stw	r2,24(sp)
 40247fc:	d8002215 	stw	zero,136(sp)
 4024800:	003c4106 	br	4023908 <__alt_data_end+0xfffe3908>
 4024804:	d8c00c17 	ldw	r3,48(sp)
 4024808:	d8c00615 	stw	r3,24(sp)
 402480c:	003e7006 	br	40241d0 <__alt_data_end+0xfffe41d0>
 4024810:	04400044 	movi	r17,1
 4024814:	003b2006 	br	4023498 <__alt_data_end+0xfffe3498>
 4024818:	000b883a 	mov	r5,zero
 402481c:	003b3d06 	br	4023514 <__alt_data_end+0xfffe3514>
 4024820:	d8800c17 	ldw	r2,48(sp)
 4024824:	d8800615 	stw	r2,24(sp)
 4024828:	003e6906 	br	40241d0 <__alt_data_end+0xfffe41d0>

0402482c <__sflush_r>:
 402482c:	2880030b 	ldhu	r2,12(r5)
 4024830:	defffb04 	addi	sp,sp,-20
 4024834:	dcc00315 	stw	r19,12(sp)
 4024838:	dc400115 	stw	r17,4(sp)
 402483c:	dfc00415 	stw	ra,16(sp)
 4024840:	dc800215 	stw	r18,8(sp)
 4024844:	dc000015 	stw	r16,0(sp)
 4024848:	10c0020c 	andi	r3,r2,8
 402484c:	2823883a 	mov	r17,r5
 4024850:	2027883a 	mov	r19,r4
 4024854:	1800311e 	bne	r3,zero,402491c <__sflush_r+0xf0>
 4024858:	28c00117 	ldw	r3,4(r5)
 402485c:	10820014 	ori	r2,r2,2048
 4024860:	2880030d 	sth	r2,12(r5)
 4024864:	00c04b0e 	bge	zero,r3,4024994 <__sflush_r+0x168>
 4024868:	8a000a17 	ldw	r8,40(r17)
 402486c:	40002326 	beq	r8,zero,40248fc <__sflush_r+0xd0>
 4024870:	9c000017 	ldw	r16,0(r19)
 4024874:	10c4000c 	andi	r3,r2,4096
 4024878:	98000015 	stw	zero,0(r19)
 402487c:	18004826 	beq	r3,zero,40249a0 <__sflush_r+0x174>
 4024880:	89801417 	ldw	r6,80(r17)
 4024884:	10c0010c 	andi	r3,r2,4
 4024888:	18000626 	beq	r3,zero,40248a4 <__sflush_r+0x78>
 402488c:	88c00117 	ldw	r3,4(r17)
 4024890:	88800c17 	ldw	r2,48(r17)
 4024894:	30cdc83a 	sub	r6,r6,r3
 4024898:	10000226 	beq	r2,zero,40248a4 <__sflush_r+0x78>
 402489c:	88800f17 	ldw	r2,60(r17)
 40248a0:	308dc83a 	sub	r6,r6,r2
 40248a4:	89400717 	ldw	r5,28(r17)
 40248a8:	000f883a 	mov	r7,zero
 40248ac:	9809883a 	mov	r4,r19
 40248b0:	403ee83a 	callr	r8
 40248b4:	00ffffc4 	movi	r3,-1
 40248b8:	10c04426 	beq	r2,r3,40249cc <__sflush_r+0x1a0>
 40248bc:	88c0030b 	ldhu	r3,12(r17)
 40248c0:	89000417 	ldw	r4,16(r17)
 40248c4:	88000115 	stw	zero,4(r17)
 40248c8:	197dffcc 	andi	r5,r3,63487
 40248cc:	8940030d 	sth	r5,12(r17)
 40248d0:	89000015 	stw	r4,0(r17)
 40248d4:	18c4000c 	andi	r3,r3,4096
 40248d8:	18002c1e 	bne	r3,zero,402498c <__sflush_r+0x160>
 40248dc:	89400c17 	ldw	r5,48(r17)
 40248e0:	9c000015 	stw	r16,0(r19)
 40248e4:	28000526 	beq	r5,zero,40248fc <__sflush_r+0xd0>
 40248e8:	88801004 	addi	r2,r17,64
 40248ec:	28800226 	beq	r5,r2,40248f8 <__sflush_r+0xcc>
 40248f0:	9809883a 	mov	r4,r19
 40248f4:	4024f980 	call	4024f98 <_free_r>
 40248f8:	88000c15 	stw	zero,48(r17)
 40248fc:	0005883a 	mov	r2,zero
 4024900:	dfc00417 	ldw	ra,16(sp)
 4024904:	dcc00317 	ldw	r19,12(sp)
 4024908:	dc800217 	ldw	r18,8(sp)
 402490c:	dc400117 	ldw	r17,4(sp)
 4024910:	dc000017 	ldw	r16,0(sp)
 4024914:	dec00504 	addi	sp,sp,20
 4024918:	f800283a 	ret
 402491c:	2c800417 	ldw	r18,16(r5)
 4024920:	903ff626 	beq	r18,zero,40248fc <__alt_data_end+0xfffe48fc>
 4024924:	2c000017 	ldw	r16,0(r5)
 4024928:	108000cc 	andi	r2,r2,3
 402492c:	2c800015 	stw	r18,0(r5)
 4024930:	84a1c83a 	sub	r16,r16,r18
 4024934:	1000131e 	bne	r2,zero,4024984 <__sflush_r+0x158>
 4024938:	28800517 	ldw	r2,20(r5)
 402493c:	88800215 	stw	r2,8(r17)
 4024940:	04000316 	blt	zero,r16,4024950 <__sflush_r+0x124>
 4024944:	003fed06 	br	40248fc <__alt_data_end+0xfffe48fc>
 4024948:	90a5883a 	add	r18,r18,r2
 402494c:	043feb0e 	bge	zero,r16,40248fc <__alt_data_end+0xfffe48fc>
 4024950:	88800917 	ldw	r2,36(r17)
 4024954:	89400717 	ldw	r5,28(r17)
 4024958:	800f883a 	mov	r7,r16
 402495c:	900d883a 	mov	r6,r18
 4024960:	9809883a 	mov	r4,r19
 4024964:	103ee83a 	callr	r2
 4024968:	80a1c83a 	sub	r16,r16,r2
 402496c:	00bff616 	blt	zero,r2,4024948 <__alt_data_end+0xfffe4948>
 4024970:	88c0030b 	ldhu	r3,12(r17)
 4024974:	00bfffc4 	movi	r2,-1
 4024978:	18c01014 	ori	r3,r3,64
 402497c:	88c0030d 	sth	r3,12(r17)
 4024980:	003fdf06 	br	4024900 <__alt_data_end+0xfffe4900>
 4024984:	0005883a 	mov	r2,zero
 4024988:	003fec06 	br	402493c <__alt_data_end+0xfffe493c>
 402498c:	88801415 	stw	r2,80(r17)
 4024990:	003fd206 	br	40248dc <__alt_data_end+0xfffe48dc>
 4024994:	28c00f17 	ldw	r3,60(r5)
 4024998:	00ffb316 	blt	zero,r3,4024868 <__alt_data_end+0xfffe4868>
 402499c:	003fd706 	br	40248fc <__alt_data_end+0xfffe48fc>
 40249a0:	89400717 	ldw	r5,28(r17)
 40249a4:	000d883a 	mov	r6,zero
 40249a8:	01c00044 	movi	r7,1
 40249ac:	9809883a 	mov	r4,r19
 40249b0:	403ee83a 	callr	r8
 40249b4:	100d883a 	mov	r6,r2
 40249b8:	00bfffc4 	movi	r2,-1
 40249bc:	30801426 	beq	r6,r2,4024a10 <__sflush_r+0x1e4>
 40249c0:	8880030b 	ldhu	r2,12(r17)
 40249c4:	8a000a17 	ldw	r8,40(r17)
 40249c8:	003fae06 	br	4024884 <__alt_data_end+0xfffe4884>
 40249cc:	98c00017 	ldw	r3,0(r19)
 40249d0:	183fba26 	beq	r3,zero,40248bc <__alt_data_end+0xfffe48bc>
 40249d4:	01000744 	movi	r4,29
 40249d8:	19000626 	beq	r3,r4,40249f4 <__sflush_r+0x1c8>
 40249dc:	01000584 	movi	r4,22
 40249e0:	19000426 	beq	r3,r4,40249f4 <__sflush_r+0x1c8>
 40249e4:	88c0030b 	ldhu	r3,12(r17)
 40249e8:	18c01014 	ori	r3,r3,64
 40249ec:	88c0030d 	sth	r3,12(r17)
 40249f0:	003fc306 	br	4024900 <__alt_data_end+0xfffe4900>
 40249f4:	8880030b 	ldhu	r2,12(r17)
 40249f8:	88c00417 	ldw	r3,16(r17)
 40249fc:	88000115 	stw	zero,4(r17)
 4024a00:	10bdffcc 	andi	r2,r2,63487
 4024a04:	8880030d 	sth	r2,12(r17)
 4024a08:	88c00015 	stw	r3,0(r17)
 4024a0c:	003fb306 	br	40248dc <__alt_data_end+0xfffe48dc>
 4024a10:	98800017 	ldw	r2,0(r19)
 4024a14:	103fea26 	beq	r2,zero,40249c0 <__alt_data_end+0xfffe49c0>
 4024a18:	00c00744 	movi	r3,29
 4024a1c:	10c00226 	beq	r2,r3,4024a28 <__sflush_r+0x1fc>
 4024a20:	00c00584 	movi	r3,22
 4024a24:	10c0031e 	bne	r2,r3,4024a34 <__sflush_r+0x208>
 4024a28:	9c000015 	stw	r16,0(r19)
 4024a2c:	0005883a 	mov	r2,zero
 4024a30:	003fb306 	br	4024900 <__alt_data_end+0xfffe4900>
 4024a34:	88c0030b 	ldhu	r3,12(r17)
 4024a38:	3005883a 	mov	r2,r6
 4024a3c:	18c01014 	ori	r3,r3,64
 4024a40:	88c0030d 	sth	r3,12(r17)
 4024a44:	003fae06 	br	4024900 <__alt_data_end+0xfffe4900>

04024a48 <_fflush_r>:
 4024a48:	defffd04 	addi	sp,sp,-12
 4024a4c:	dc000115 	stw	r16,4(sp)
 4024a50:	dfc00215 	stw	ra,8(sp)
 4024a54:	2021883a 	mov	r16,r4
 4024a58:	20000226 	beq	r4,zero,4024a64 <_fflush_r+0x1c>
 4024a5c:	20800e17 	ldw	r2,56(r4)
 4024a60:	10000c26 	beq	r2,zero,4024a94 <_fflush_r+0x4c>
 4024a64:	2880030f 	ldh	r2,12(r5)
 4024a68:	1000051e 	bne	r2,zero,4024a80 <_fflush_r+0x38>
 4024a6c:	0005883a 	mov	r2,zero
 4024a70:	dfc00217 	ldw	ra,8(sp)
 4024a74:	dc000117 	ldw	r16,4(sp)
 4024a78:	dec00304 	addi	sp,sp,12
 4024a7c:	f800283a 	ret
 4024a80:	8009883a 	mov	r4,r16
 4024a84:	dfc00217 	ldw	ra,8(sp)
 4024a88:	dc000117 	ldw	r16,4(sp)
 4024a8c:	dec00304 	addi	sp,sp,12
 4024a90:	402482c1 	jmpi	402482c <__sflush_r>
 4024a94:	d9400015 	stw	r5,0(sp)
 4024a98:	4024e240 	call	4024e24 <__sinit>
 4024a9c:	d9400017 	ldw	r5,0(sp)
 4024aa0:	003ff006 	br	4024a64 <__alt_data_end+0xfffe4a64>

04024aa4 <fflush>:
 4024aa4:	20000526 	beq	r4,zero,4024abc <fflush+0x18>
 4024aa8:	008100f4 	movhi	r2,1027
 4024aac:	108c7404 	addi	r2,r2,12752
 4024ab0:	200b883a 	mov	r5,r4
 4024ab4:	11000017 	ldw	r4,0(r2)
 4024ab8:	4024a481 	jmpi	4024a48 <_fflush_r>
 4024abc:	008100f4 	movhi	r2,1027
 4024ac0:	108c7304 	addi	r2,r2,12748
 4024ac4:	11000017 	ldw	r4,0(r2)
 4024ac8:	014100b4 	movhi	r5,1026
 4024acc:	29529204 	addi	r5,r5,19016
 4024ad0:	40258281 	jmpi	4025828 <_fwalk_reent>

04024ad4 <__fp_unlock>:
 4024ad4:	0005883a 	mov	r2,zero
 4024ad8:	f800283a 	ret

04024adc <_cleanup_r>:
 4024adc:	014100f4 	movhi	r5,1027
 4024ae0:	2966c004 	addi	r5,r5,-25856
 4024ae4:	40258281 	jmpi	4025828 <_fwalk_reent>

04024ae8 <__sinit.part.1>:
 4024ae8:	defff704 	addi	sp,sp,-36
 4024aec:	00c100b4 	movhi	r3,1026
 4024af0:	dfc00815 	stw	ra,32(sp)
 4024af4:	ddc00715 	stw	r23,28(sp)
 4024af8:	dd800615 	stw	r22,24(sp)
 4024afc:	dd400515 	stw	r21,20(sp)
 4024b00:	dd000415 	stw	r20,16(sp)
 4024b04:	dcc00315 	stw	r19,12(sp)
 4024b08:	dc800215 	stw	r18,8(sp)
 4024b0c:	dc400115 	stw	r17,4(sp)
 4024b10:	dc000015 	stw	r16,0(sp)
 4024b14:	18d2b704 	addi	r3,r3,19164
 4024b18:	24000117 	ldw	r16,4(r4)
 4024b1c:	20c00f15 	stw	r3,60(r4)
 4024b20:	2080bb04 	addi	r2,r4,748
 4024b24:	00c000c4 	movi	r3,3
 4024b28:	20c0b915 	stw	r3,740(r4)
 4024b2c:	2080ba15 	stw	r2,744(r4)
 4024b30:	2000b815 	stw	zero,736(r4)
 4024b34:	05c00204 	movi	r23,8
 4024b38:	00800104 	movi	r2,4
 4024b3c:	2025883a 	mov	r18,r4
 4024b40:	b80d883a 	mov	r6,r23
 4024b44:	81001704 	addi	r4,r16,92
 4024b48:	000b883a 	mov	r5,zero
 4024b4c:	80000015 	stw	zero,0(r16)
 4024b50:	80000115 	stw	zero,4(r16)
 4024b54:	80000215 	stw	zero,8(r16)
 4024b58:	8080030d 	sth	r2,12(r16)
 4024b5c:	80001915 	stw	zero,100(r16)
 4024b60:	8000038d 	sth	zero,14(r16)
 4024b64:	80000415 	stw	zero,16(r16)
 4024b68:	80000515 	stw	zero,20(r16)
 4024b6c:	80000615 	stw	zero,24(r16)
 4024b70:	40267180 	call	4026718 <memset>
 4024b74:	058100b4 	movhi	r22,1026
 4024b78:	94400217 	ldw	r17,8(r18)
 4024b7c:	054100f4 	movhi	r21,1027
 4024b80:	050100f4 	movhi	r20,1027
 4024b84:	04c100f4 	movhi	r19,1027
 4024b88:	b59ff404 	addi	r22,r22,32720
 4024b8c:	ad600b04 	addi	r21,r21,-32724
 4024b90:	a5202a04 	addi	r20,r20,-32600
 4024b94:	9ce04104 	addi	r19,r19,-32508
 4024b98:	85800815 	stw	r22,32(r16)
 4024b9c:	85400915 	stw	r21,36(r16)
 4024ba0:	85000a15 	stw	r20,40(r16)
 4024ba4:	84c00b15 	stw	r19,44(r16)
 4024ba8:	84000715 	stw	r16,28(r16)
 4024bac:	00800284 	movi	r2,10
 4024bb0:	8880030d 	sth	r2,12(r17)
 4024bb4:	00800044 	movi	r2,1
 4024bb8:	b80d883a 	mov	r6,r23
 4024bbc:	89001704 	addi	r4,r17,92
 4024bc0:	000b883a 	mov	r5,zero
 4024bc4:	88000015 	stw	zero,0(r17)
 4024bc8:	88000115 	stw	zero,4(r17)
 4024bcc:	88000215 	stw	zero,8(r17)
 4024bd0:	88001915 	stw	zero,100(r17)
 4024bd4:	8880038d 	sth	r2,14(r17)
 4024bd8:	88000415 	stw	zero,16(r17)
 4024bdc:	88000515 	stw	zero,20(r17)
 4024be0:	88000615 	stw	zero,24(r17)
 4024be4:	40267180 	call	4026718 <memset>
 4024be8:	94000317 	ldw	r16,12(r18)
 4024bec:	00800484 	movi	r2,18
 4024bf0:	8c400715 	stw	r17,28(r17)
 4024bf4:	8d800815 	stw	r22,32(r17)
 4024bf8:	8d400915 	stw	r21,36(r17)
 4024bfc:	8d000a15 	stw	r20,40(r17)
 4024c00:	8cc00b15 	stw	r19,44(r17)
 4024c04:	8080030d 	sth	r2,12(r16)
 4024c08:	00800084 	movi	r2,2
 4024c0c:	80000015 	stw	zero,0(r16)
 4024c10:	80000115 	stw	zero,4(r16)
 4024c14:	80000215 	stw	zero,8(r16)
 4024c18:	80001915 	stw	zero,100(r16)
 4024c1c:	8080038d 	sth	r2,14(r16)
 4024c20:	80000415 	stw	zero,16(r16)
 4024c24:	80000515 	stw	zero,20(r16)
 4024c28:	80000615 	stw	zero,24(r16)
 4024c2c:	b80d883a 	mov	r6,r23
 4024c30:	000b883a 	mov	r5,zero
 4024c34:	81001704 	addi	r4,r16,92
 4024c38:	40267180 	call	4026718 <memset>
 4024c3c:	00800044 	movi	r2,1
 4024c40:	84000715 	stw	r16,28(r16)
 4024c44:	85800815 	stw	r22,32(r16)
 4024c48:	85400915 	stw	r21,36(r16)
 4024c4c:	85000a15 	stw	r20,40(r16)
 4024c50:	84c00b15 	stw	r19,44(r16)
 4024c54:	90800e15 	stw	r2,56(r18)
 4024c58:	dfc00817 	ldw	ra,32(sp)
 4024c5c:	ddc00717 	ldw	r23,28(sp)
 4024c60:	dd800617 	ldw	r22,24(sp)
 4024c64:	dd400517 	ldw	r21,20(sp)
 4024c68:	dd000417 	ldw	r20,16(sp)
 4024c6c:	dcc00317 	ldw	r19,12(sp)
 4024c70:	dc800217 	ldw	r18,8(sp)
 4024c74:	dc400117 	ldw	r17,4(sp)
 4024c78:	dc000017 	ldw	r16,0(sp)
 4024c7c:	dec00904 	addi	sp,sp,36
 4024c80:	f800283a 	ret

04024c84 <__fp_lock>:
 4024c84:	0005883a 	mov	r2,zero
 4024c88:	f800283a 	ret

04024c8c <__sfmoreglue>:
 4024c8c:	defffc04 	addi	sp,sp,-16
 4024c90:	dc400115 	stw	r17,4(sp)
 4024c94:	2c7fffc4 	addi	r17,r5,-1
 4024c98:	8c401a24 	muli	r17,r17,104
 4024c9c:	dc800215 	stw	r18,8(sp)
 4024ca0:	2825883a 	mov	r18,r5
 4024ca4:	89401d04 	addi	r5,r17,116
 4024ca8:	dc000015 	stw	r16,0(sp)
 4024cac:	dfc00315 	stw	ra,12(sp)
 4024cb0:	4025b840 	call	4025b84 <_malloc_r>
 4024cb4:	1021883a 	mov	r16,r2
 4024cb8:	10000726 	beq	r2,zero,4024cd8 <__sfmoreglue+0x4c>
 4024cbc:	11000304 	addi	r4,r2,12
 4024cc0:	10000015 	stw	zero,0(r2)
 4024cc4:	14800115 	stw	r18,4(r2)
 4024cc8:	11000215 	stw	r4,8(r2)
 4024ccc:	89801a04 	addi	r6,r17,104
 4024cd0:	000b883a 	mov	r5,zero
 4024cd4:	40267180 	call	4026718 <memset>
 4024cd8:	8005883a 	mov	r2,r16
 4024cdc:	dfc00317 	ldw	ra,12(sp)
 4024ce0:	dc800217 	ldw	r18,8(sp)
 4024ce4:	dc400117 	ldw	r17,4(sp)
 4024ce8:	dc000017 	ldw	r16,0(sp)
 4024cec:	dec00404 	addi	sp,sp,16
 4024cf0:	f800283a 	ret

04024cf4 <__sfp>:
 4024cf4:	defffb04 	addi	sp,sp,-20
 4024cf8:	dc000015 	stw	r16,0(sp)
 4024cfc:	040100f4 	movhi	r16,1027
 4024d00:	840c7304 	addi	r16,r16,12748
 4024d04:	dcc00315 	stw	r19,12(sp)
 4024d08:	2027883a 	mov	r19,r4
 4024d0c:	81000017 	ldw	r4,0(r16)
 4024d10:	dfc00415 	stw	ra,16(sp)
 4024d14:	dc800215 	stw	r18,8(sp)
 4024d18:	20800e17 	ldw	r2,56(r4)
 4024d1c:	dc400115 	stw	r17,4(sp)
 4024d20:	1000021e 	bne	r2,zero,4024d2c <__sfp+0x38>
 4024d24:	4024ae80 	call	4024ae8 <__sinit.part.1>
 4024d28:	81000017 	ldw	r4,0(r16)
 4024d2c:	2480b804 	addi	r18,r4,736
 4024d30:	047fffc4 	movi	r17,-1
 4024d34:	91000117 	ldw	r4,4(r18)
 4024d38:	94000217 	ldw	r16,8(r18)
 4024d3c:	213fffc4 	addi	r4,r4,-1
 4024d40:	20000a16 	blt	r4,zero,4024d6c <__sfp+0x78>
 4024d44:	8080030f 	ldh	r2,12(r16)
 4024d48:	10000c26 	beq	r2,zero,4024d7c <__sfp+0x88>
 4024d4c:	80c01d04 	addi	r3,r16,116
 4024d50:	00000206 	br	4024d5c <__sfp+0x68>
 4024d54:	18bfe60f 	ldh	r2,-104(r3)
 4024d58:	10000826 	beq	r2,zero,4024d7c <__sfp+0x88>
 4024d5c:	213fffc4 	addi	r4,r4,-1
 4024d60:	1c3ffd04 	addi	r16,r3,-12
 4024d64:	18c01a04 	addi	r3,r3,104
 4024d68:	247ffa1e 	bne	r4,r17,4024d54 <__alt_data_end+0xfffe4d54>
 4024d6c:	90800017 	ldw	r2,0(r18)
 4024d70:	10001d26 	beq	r2,zero,4024de8 <__sfp+0xf4>
 4024d74:	1025883a 	mov	r18,r2
 4024d78:	003fee06 	br	4024d34 <__alt_data_end+0xfffe4d34>
 4024d7c:	00bfffc4 	movi	r2,-1
 4024d80:	8080038d 	sth	r2,14(r16)
 4024d84:	00800044 	movi	r2,1
 4024d88:	8080030d 	sth	r2,12(r16)
 4024d8c:	80001915 	stw	zero,100(r16)
 4024d90:	80000015 	stw	zero,0(r16)
 4024d94:	80000215 	stw	zero,8(r16)
 4024d98:	80000115 	stw	zero,4(r16)
 4024d9c:	80000415 	stw	zero,16(r16)
 4024da0:	80000515 	stw	zero,20(r16)
 4024da4:	80000615 	stw	zero,24(r16)
 4024da8:	01800204 	movi	r6,8
 4024dac:	000b883a 	mov	r5,zero
 4024db0:	81001704 	addi	r4,r16,92
 4024db4:	40267180 	call	4026718 <memset>
 4024db8:	8005883a 	mov	r2,r16
 4024dbc:	80000c15 	stw	zero,48(r16)
 4024dc0:	80000d15 	stw	zero,52(r16)
 4024dc4:	80001115 	stw	zero,68(r16)
 4024dc8:	80001215 	stw	zero,72(r16)
 4024dcc:	dfc00417 	ldw	ra,16(sp)
 4024dd0:	dcc00317 	ldw	r19,12(sp)
 4024dd4:	dc800217 	ldw	r18,8(sp)
 4024dd8:	dc400117 	ldw	r17,4(sp)
 4024ddc:	dc000017 	ldw	r16,0(sp)
 4024de0:	dec00504 	addi	sp,sp,20
 4024de4:	f800283a 	ret
 4024de8:	01400104 	movi	r5,4
 4024dec:	9809883a 	mov	r4,r19
 4024df0:	4024c8c0 	call	4024c8c <__sfmoreglue>
 4024df4:	90800015 	stw	r2,0(r18)
 4024df8:	103fde1e 	bne	r2,zero,4024d74 <__alt_data_end+0xfffe4d74>
 4024dfc:	00800304 	movi	r2,12
 4024e00:	98800015 	stw	r2,0(r19)
 4024e04:	0005883a 	mov	r2,zero
 4024e08:	003ff006 	br	4024dcc <__alt_data_end+0xfffe4dcc>

04024e0c <_cleanup>:
 4024e0c:	008100f4 	movhi	r2,1027
 4024e10:	108c7304 	addi	r2,r2,12748
 4024e14:	11000017 	ldw	r4,0(r2)
 4024e18:	014100f4 	movhi	r5,1027
 4024e1c:	2966c004 	addi	r5,r5,-25856
 4024e20:	40258281 	jmpi	4025828 <_fwalk_reent>

04024e24 <__sinit>:
 4024e24:	20800e17 	ldw	r2,56(r4)
 4024e28:	10000126 	beq	r2,zero,4024e30 <__sinit+0xc>
 4024e2c:	f800283a 	ret
 4024e30:	4024ae81 	jmpi	4024ae8 <__sinit.part.1>

04024e34 <__sfp_lock_acquire>:
 4024e34:	f800283a 	ret

04024e38 <__sfp_lock_release>:
 4024e38:	f800283a 	ret

04024e3c <__sinit_lock_acquire>:
 4024e3c:	f800283a 	ret

04024e40 <__sinit_lock_release>:
 4024e40:	f800283a 	ret

04024e44 <__fp_lock_all>:
 4024e44:	008100f4 	movhi	r2,1027
 4024e48:	108c7404 	addi	r2,r2,12752
 4024e4c:	11000017 	ldw	r4,0(r2)
 4024e50:	014100b4 	movhi	r5,1026
 4024e54:	29532104 	addi	r5,r5,19588
 4024e58:	40257641 	jmpi	4025764 <_fwalk>

04024e5c <__fp_unlock_all>:
 4024e5c:	008100f4 	movhi	r2,1027
 4024e60:	108c7404 	addi	r2,r2,12752
 4024e64:	11000017 	ldw	r4,0(r2)
 4024e68:	014100b4 	movhi	r5,1026
 4024e6c:	2952b504 	addi	r5,r5,19156
 4024e70:	40257641 	jmpi	4025764 <_fwalk>

04024e74 <_malloc_trim_r>:
 4024e74:	defffb04 	addi	sp,sp,-20
 4024e78:	dcc00315 	stw	r19,12(sp)
 4024e7c:	04c100f4 	movhi	r19,1027
 4024e80:	dc800215 	stw	r18,8(sp)
 4024e84:	dc400115 	stw	r17,4(sp)
 4024e88:	dc000015 	stw	r16,0(sp)
 4024e8c:	dfc00415 	stw	ra,16(sp)
 4024e90:	2821883a 	mov	r16,r5
 4024e94:	9cc6c304 	addi	r19,r19,6924
 4024e98:	2025883a 	mov	r18,r4
 4024e9c:	402dc940 	call	402dc94 <__malloc_lock>
 4024ea0:	98800217 	ldw	r2,8(r19)
 4024ea4:	14400117 	ldw	r17,4(r2)
 4024ea8:	00bfff04 	movi	r2,-4
 4024eac:	88a2703a 	and	r17,r17,r2
 4024eb0:	8c21c83a 	sub	r16,r17,r16
 4024eb4:	8403fbc4 	addi	r16,r16,4079
 4024eb8:	8020d33a 	srli	r16,r16,12
 4024ebc:	0083ffc4 	movi	r2,4095
 4024ec0:	843fffc4 	addi	r16,r16,-1
 4024ec4:	8020933a 	slli	r16,r16,12
 4024ec8:	1400060e 	bge	r2,r16,4024ee4 <_malloc_trim_r+0x70>
 4024ecc:	000b883a 	mov	r5,zero
 4024ed0:	9009883a 	mov	r4,r18
 4024ed4:	4027f7c0 	call	4027f7c <_sbrk_r>
 4024ed8:	98c00217 	ldw	r3,8(r19)
 4024edc:	1c47883a 	add	r3,r3,r17
 4024ee0:	10c00a26 	beq	r2,r3,4024f0c <_malloc_trim_r+0x98>
 4024ee4:	9009883a 	mov	r4,r18
 4024ee8:	402dcb80 	call	402dcb8 <__malloc_unlock>
 4024eec:	0005883a 	mov	r2,zero
 4024ef0:	dfc00417 	ldw	ra,16(sp)
 4024ef4:	dcc00317 	ldw	r19,12(sp)
 4024ef8:	dc800217 	ldw	r18,8(sp)
 4024efc:	dc400117 	ldw	r17,4(sp)
 4024f00:	dc000017 	ldw	r16,0(sp)
 4024f04:	dec00504 	addi	sp,sp,20
 4024f08:	f800283a 	ret
 4024f0c:	040bc83a 	sub	r5,zero,r16
 4024f10:	9009883a 	mov	r4,r18
 4024f14:	4027f7c0 	call	4027f7c <_sbrk_r>
 4024f18:	00ffffc4 	movi	r3,-1
 4024f1c:	10c00d26 	beq	r2,r3,4024f54 <_malloc_trim_r+0xe0>
 4024f20:	00c100f4 	movhi	r3,1027
 4024f24:	18d38104 	addi	r3,r3,19972
 4024f28:	18800017 	ldw	r2,0(r3)
 4024f2c:	99000217 	ldw	r4,8(r19)
 4024f30:	8c23c83a 	sub	r17,r17,r16
 4024f34:	8c400054 	ori	r17,r17,1
 4024f38:	1421c83a 	sub	r16,r2,r16
 4024f3c:	24400115 	stw	r17,4(r4)
 4024f40:	9009883a 	mov	r4,r18
 4024f44:	1c000015 	stw	r16,0(r3)
 4024f48:	402dcb80 	call	402dcb8 <__malloc_unlock>
 4024f4c:	00800044 	movi	r2,1
 4024f50:	003fe706 	br	4024ef0 <__alt_data_end+0xfffe4ef0>
 4024f54:	000b883a 	mov	r5,zero
 4024f58:	9009883a 	mov	r4,r18
 4024f5c:	4027f7c0 	call	4027f7c <_sbrk_r>
 4024f60:	99000217 	ldw	r4,8(r19)
 4024f64:	014003c4 	movi	r5,15
 4024f68:	1107c83a 	sub	r3,r2,r4
 4024f6c:	28ffdd0e 	bge	r5,r3,4024ee4 <__alt_data_end+0xfffe4ee4>
 4024f70:	014100f4 	movhi	r5,1027
 4024f74:	294c7604 	addi	r5,r5,12760
 4024f78:	29400017 	ldw	r5,0(r5)
 4024f7c:	18c00054 	ori	r3,r3,1
 4024f80:	20c00115 	stw	r3,4(r4)
 4024f84:	00c100f4 	movhi	r3,1027
 4024f88:	1145c83a 	sub	r2,r2,r5
 4024f8c:	18d38104 	addi	r3,r3,19972
 4024f90:	18800015 	stw	r2,0(r3)
 4024f94:	003fd306 	br	4024ee4 <__alt_data_end+0xfffe4ee4>

04024f98 <_free_r>:
 4024f98:	28004126 	beq	r5,zero,40250a0 <_free_r+0x108>
 4024f9c:	defffd04 	addi	sp,sp,-12
 4024fa0:	dc400115 	stw	r17,4(sp)
 4024fa4:	dc000015 	stw	r16,0(sp)
 4024fa8:	2023883a 	mov	r17,r4
 4024fac:	2821883a 	mov	r16,r5
 4024fb0:	dfc00215 	stw	ra,8(sp)
 4024fb4:	402dc940 	call	402dc94 <__malloc_lock>
 4024fb8:	81ffff17 	ldw	r7,-4(r16)
 4024fbc:	00bfff84 	movi	r2,-2
 4024fc0:	010100f4 	movhi	r4,1027
 4024fc4:	81bffe04 	addi	r6,r16,-8
 4024fc8:	3884703a 	and	r2,r7,r2
 4024fcc:	2106c304 	addi	r4,r4,6924
 4024fd0:	308b883a 	add	r5,r6,r2
 4024fd4:	2a400117 	ldw	r9,4(r5)
 4024fd8:	22000217 	ldw	r8,8(r4)
 4024fdc:	00ffff04 	movi	r3,-4
 4024fe0:	48c6703a 	and	r3,r9,r3
 4024fe4:	2a005726 	beq	r5,r8,4025144 <_free_r+0x1ac>
 4024fe8:	28c00115 	stw	r3,4(r5)
 4024fec:	39c0004c 	andi	r7,r7,1
 4024ff0:	3800091e 	bne	r7,zero,4025018 <_free_r+0x80>
 4024ff4:	823ffe17 	ldw	r8,-8(r16)
 4024ff8:	22400204 	addi	r9,r4,8
 4024ffc:	320dc83a 	sub	r6,r6,r8
 4025000:	31c00217 	ldw	r7,8(r6)
 4025004:	1205883a 	add	r2,r2,r8
 4025008:	3a406526 	beq	r7,r9,40251a0 <_free_r+0x208>
 402500c:	32000317 	ldw	r8,12(r6)
 4025010:	3a000315 	stw	r8,12(r7)
 4025014:	41c00215 	stw	r7,8(r8)
 4025018:	28cf883a 	add	r7,r5,r3
 402501c:	39c00117 	ldw	r7,4(r7)
 4025020:	39c0004c 	andi	r7,r7,1
 4025024:	38003a26 	beq	r7,zero,4025110 <_free_r+0x178>
 4025028:	10c00054 	ori	r3,r2,1
 402502c:	30c00115 	stw	r3,4(r6)
 4025030:	3087883a 	add	r3,r6,r2
 4025034:	18800015 	stw	r2,0(r3)
 4025038:	00c07fc4 	movi	r3,511
 402503c:	18801936 	bltu	r3,r2,40250a4 <_free_r+0x10c>
 4025040:	1004d0fa 	srli	r2,r2,3
 4025044:	01c00044 	movi	r7,1
 4025048:	21400117 	ldw	r5,4(r4)
 402504c:	10c00044 	addi	r3,r2,1
 4025050:	18c7883a 	add	r3,r3,r3
 4025054:	1005d0ba 	srai	r2,r2,2
 4025058:	18c7883a 	add	r3,r3,r3
 402505c:	18c7883a 	add	r3,r3,r3
 4025060:	1907883a 	add	r3,r3,r4
 4025064:	3884983a 	sll	r2,r7,r2
 4025068:	19c00017 	ldw	r7,0(r3)
 402506c:	1a3ffe04 	addi	r8,r3,-8
 4025070:	1144b03a 	or	r2,r2,r5
 4025074:	32000315 	stw	r8,12(r6)
 4025078:	31c00215 	stw	r7,8(r6)
 402507c:	20800115 	stw	r2,4(r4)
 4025080:	19800015 	stw	r6,0(r3)
 4025084:	39800315 	stw	r6,12(r7)
 4025088:	8809883a 	mov	r4,r17
 402508c:	dfc00217 	ldw	ra,8(sp)
 4025090:	dc400117 	ldw	r17,4(sp)
 4025094:	dc000017 	ldw	r16,0(sp)
 4025098:	dec00304 	addi	sp,sp,12
 402509c:	402dcb81 	jmpi	402dcb8 <__malloc_unlock>
 40250a0:	f800283a 	ret
 40250a4:	100ad27a 	srli	r5,r2,9
 40250a8:	00c00104 	movi	r3,4
 40250ac:	19404a36 	bltu	r3,r5,40251d8 <_free_r+0x240>
 40250b0:	100ad1ba 	srli	r5,r2,6
 40250b4:	28c00e44 	addi	r3,r5,57
 40250b8:	18c7883a 	add	r3,r3,r3
 40250bc:	29400e04 	addi	r5,r5,56
 40250c0:	18c7883a 	add	r3,r3,r3
 40250c4:	18c7883a 	add	r3,r3,r3
 40250c8:	1909883a 	add	r4,r3,r4
 40250cc:	20c00017 	ldw	r3,0(r4)
 40250d0:	01c100f4 	movhi	r7,1027
 40250d4:	213ffe04 	addi	r4,r4,-8
 40250d8:	39c6c304 	addi	r7,r7,6924
 40250dc:	20c04426 	beq	r4,r3,40251f0 <_free_r+0x258>
 40250e0:	01ffff04 	movi	r7,-4
 40250e4:	19400117 	ldw	r5,4(r3)
 40250e8:	29ca703a 	and	r5,r5,r7
 40250ec:	1140022e 	bgeu	r2,r5,40250f8 <_free_r+0x160>
 40250f0:	18c00217 	ldw	r3,8(r3)
 40250f4:	20fffb1e 	bne	r4,r3,40250e4 <__alt_data_end+0xfffe50e4>
 40250f8:	19000317 	ldw	r4,12(r3)
 40250fc:	31000315 	stw	r4,12(r6)
 4025100:	30c00215 	stw	r3,8(r6)
 4025104:	21800215 	stw	r6,8(r4)
 4025108:	19800315 	stw	r6,12(r3)
 402510c:	003fde06 	br	4025088 <__alt_data_end+0xfffe5088>
 4025110:	29c00217 	ldw	r7,8(r5)
 4025114:	10c5883a 	add	r2,r2,r3
 4025118:	00c100f4 	movhi	r3,1027
 402511c:	18c6c504 	addi	r3,r3,6932
 4025120:	38c03b26 	beq	r7,r3,4025210 <_free_r+0x278>
 4025124:	2a000317 	ldw	r8,12(r5)
 4025128:	11400054 	ori	r5,r2,1
 402512c:	3087883a 	add	r3,r6,r2
 4025130:	3a000315 	stw	r8,12(r7)
 4025134:	41c00215 	stw	r7,8(r8)
 4025138:	31400115 	stw	r5,4(r6)
 402513c:	18800015 	stw	r2,0(r3)
 4025140:	003fbd06 	br	4025038 <__alt_data_end+0xfffe5038>
 4025144:	39c0004c 	andi	r7,r7,1
 4025148:	10c5883a 	add	r2,r2,r3
 402514c:	3800071e 	bne	r7,zero,402516c <_free_r+0x1d4>
 4025150:	81fffe17 	ldw	r7,-8(r16)
 4025154:	31cdc83a 	sub	r6,r6,r7
 4025158:	30c00317 	ldw	r3,12(r6)
 402515c:	31400217 	ldw	r5,8(r6)
 4025160:	11c5883a 	add	r2,r2,r7
 4025164:	28c00315 	stw	r3,12(r5)
 4025168:	19400215 	stw	r5,8(r3)
 402516c:	10c00054 	ori	r3,r2,1
 4025170:	30c00115 	stw	r3,4(r6)
 4025174:	00c100f4 	movhi	r3,1027
 4025178:	18cc7704 	addi	r3,r3,12764
 402517c:	18c00017 	ldw	r3,0(r3)
 4025180:	21800215 	stw	r6,8(r4)
 4025184:	10ffc036 	bltu	r2,r3,4025088 <__alt_data_end+0xfffe5088>
 4025188:	008100f4 	movhi	r2,1027
 402518c:	10937804 	addi	r2,r2,19936
 4025190:	11400017 	ldw	r5,0(r2)
 4025194:	8809883a 	mov	r4,r17
 4025198:	4024e740 	call	4024e74 <_malloc_trim_r>
 402519c:	003fba06 	br	4025088 <__alt_data_end+0xfffe5088>
 40251a0:	28c9883a 	add	r4,r5,r3
 40251a4:	21000117 	ldw	r4,4(r4)
 40251a8:	2100004c 	andi	r4,r4,1
 40251ac:	2000391e 	bne	r4,zero,4025294 <_free_r+0x2fc>
 40251b0:	29c00217 	ldw	r7,8(r5)
 40251b4:	29000317 	ldw	r4,12(r5)
 40251b8:	1885883a 	add	r2,r3,r2
 40251bc:	10c00054 	ori	r3,r2,1
 40251c0:	39000315 	stw	r4,12(r7)
 40251c4:	21c00215 	stw	r7,8(r4)
 40251c8:	30c00115 	stw	r3,4(r6)
 40251cc:	308d883a 	add	r6,r6,r2
 40251d0:	30800015 	stw	r2,0(r6)
 40251d4:	003fac06 	br	4025088 <__alt_data_end+0xfffe5088>
 40251d8:	00c00504 	movi	r3,20
 40251dc:	19401536 	bltu	r3,r5,4025234 <_free_r+0x29c>
 40251e0:	28c01704 	addi	r3,r5,92
 40251e4:	18c7883a 	add	r3,r3,r3
 40251e8:	294016c4 	addi	r5,r5,91
 40251ec:	003fb406 	br	40250c0 <__alt_data_end+0xfffe50c0>
 40251f0:	280bd0ba 	srai	r5,r5,2
 40251f4:	00c00044 	movi	r3,1
 40251f8:	38800117 	ldw	r2,4(r7)
 40251fc:	194a983a 	sll	r5,r3,r5
 4025200:	2007883a 	mov	r3,r4
 4025204:	2884b03a 	or	r2,r5,r2
 4025208:	38800115 	stw	r2,4(r7)
 402520c:	003fbb06 	br	40250fc <__alt_data_end+0xfffe50fc>
 4025210:	21800515 	stw	r6,20(r4)
 4025214:	21800415 	stw	r6,16(r4)
 4025218:	10c00054 	ori	r3,r2,1
 402521c:	31c00315 	stw	r7,12(r6)
 4025220:	31c00215 	stw	r7,8(r6)
 4025224:	30c00115 	stw	r3,4(r6)
 4025228:	308d883a 	add	r6,r6,r2
 402522c:	30800015 	stw	r2,0(r6)
 4025230:	003f9506 	br	4025088 <__alt_data_end+0xfffe5088>
 4025234:	00c01504 	movi	r3,84
 4025238:	19400536 	bltu	r3,r5,4025250 <_free_r+0x2b8>
 402523c:	100ad33a 	srli	r5,r2,12
 4025240:	28c01bc4 	addi	r3,r5,111
 4025244:	18c7883a 	add	r3,r3,r3
 4025248:	29401b84 	addi	r5,r5,110
 402524c:	003f9c06 	br	40250c0 <__alt_data_end+0xfffe50c0>
 4025250:	00c05504 	movi	r3,340
 4025254:	19400536 	bltu	r3,r5,402526c <_free_r+0x2d4>
 4025258:	100ad3fa 	srli	r5,r2,15
 402525c:	28c01e04 	addi	r3,r5,120
 4025260:	18c7883a 	add	r3,r3,r3
 4025264:	29401dc4 	addi	r5,r5,119
 4025268:	003f9506 	br	40250c0 <__alt_data_end+0xfffe50c0>
 402526c:	00c15504 	movi	r3,1364
 4025270:	19400536 	bltu	r3,r5,4025288 <_free_r+0x2f0>
 4025274:	100ad4ba 	srli	r5,r2,18
 4025278:	28c01f44 	addi	r3,r5,125
 402527c:	18c7883a 	add	r3,r3,r3
 4025280:	29401f04 	addi	r5,r5,124
 4025284:	003f8e06 	br	40250c0 <__alt_data_end+0xfffe50c0>
 4025288:	00c03f84 	movi	r3,254
 402528c:	01401f84 	movi	r5,126
 4025290:	003f8b06 	br	40250c0 <__alt_data_end+0xfffe50c0>
 4025294:	10c00054 	ori	r3,r2,1
 4025298:	30c00115 	stw	r3,4(r6)
 402529c:	308d883a 	add	r6,r6,r2
 40252a0:	30800015 	stw	r2,0(r6)
 40252a4:	003f7806 	br	4025088 <__alt_data_end+0xfffe5088>

040252a8 <__sfvwrite_r>:
 40252a8:	30800217 	ldw	r2,8(r6)
 40252ac:	10006726 	beq	r2,zero,402544c <__sfvwrite_r+0x1a4>
 40252b0:	28c0030b 	ldhu	r3,12(r5)
 40252b4:	defff404 	addi	sp,sp,-48
 40252b8:	dd400715 	stw	r21,28(sp)
 40252bc:	dd000615 	stw	r20,24(sp)
 40252c0:	dc000215 	stw	r16,8(sp)
 40252c4:	dfc00b15 	stw	ra,44(sp)
 40252c8:	df000a15 	stw	fp,40(sp)
 40252cc:	ddc00915 	stw	r23,36(sp)
 40252d0:	dd800815 	stw	r22,32(sp)
 40252d4:	dcc00515 	stw	r19,20(sp)
 40252d8:	dc800415 	stw	r18,16(sp)
 40252dc:	dc400315 	stw	r17,12(sp)
 40252e0:	1880020c 	andi	r2,r3,8
 40252e4:	2821883a 	mov	r16,r5
 40252e8:	202b883a 	mov	r21,r4
 40252ec:	3029883a 	mov	r20,r6
 40252f0:	10002726 	beq	r2,zero,4025390 <__sfvwrite_r+0xe8>
 40252f4:	28800417 	ldw	r2,16(r5)
 40252f8:	10002526 	beq	r2,zero,4025390 <__sfvwrite_r+0xe8>
 40252fc:	1880008c 	andi	r2,r3,2
 4025300:	a4400017 	ldw	r17,0(r20)
 4025304:	10002a26 	beq	r2,zero,40253b0 <__sfvwrite_r+0x108>
 4025308:	05a00034 	movhi	r22,32768
 402530c:	0027883a 	mov	r19,zero
 4025310:	0025883a 	mov	r18,zero
 4025314:	b5bf0004 	addi	r22,r22,-1024
 4025318:	980d883a 	mov	r6,r19
 402531c:	a809883a 	mov	r4,r21
 4025320:	90004626 	beq	r18,zero,402543c <__sfvwrite_r+0x194>
 4025324:	900f883a 	mov	r7,r18
 4025328:	b480022e 	bgeu	r22,r18,4025334 <__sfvwrite_r+0x8c>
 402532c:	01e00034 	movhi	r7,32768
 4025330:	39ff0004 	addi	r7,r7,-1024
 4025334:	80800917 	ldw	r2,36(r16)
 4025338:	81400717 	ldw	r5,28(r16)
 402533c:	103ee83a 	callr	r2
 4025340:	0080570e 	bge	zero,r2,40254a0 <__sfvwrite_r+0x1f8>
 4025344:	a0c00217 	ldw	r3,8(r20)
 4025348:	98a7883a 	add	r19,r19,r2
 402534c:	90a5c83a 	sub	r18,r18,r2
 4025350:	1885c83a 	sub	r2,r3,r2
 4025354:	a0800215 	stw	r2,8(r20)
 4025358:	103fef1e 	bne	r2,zero,4025318 <__alt_data_end+0xfffe5318>
 402535c:	0005883a 	mov	r2,zero
 4025360:	dfc00b17 	ldw	ra,44(sp)
 4025364:	df000a17 	ldw	fp,40(sp)
 4025368:	ddc00917 	ldw	r23,36(sp)
 402536c:	dd800817 	ldw	r22,32(sp)
 4025370:	dd400717 	ldw	r21,28(sp)
 4025374:	dd000617 	ldw	r20,24(sp)
 4025378:	dcc00517 	ldw	r19,20(sp)
 402537c:	dc800417 	ldw	r18,16(sp)
 4025380:	dc400317 	ldw	r17,12(sp)
 4025384:	dc000217 	ldw	r16,8(sp)
 4025388:	dec00c04 	addi	sp,sp,48
 402538c:	f800283a 	ret
 4025390:	800b883a 	mov	r5,r16
 4025394:	a809883a 	mov	r4,r21
 4025398:	4022e500 	call	4022e50 <__swsetup_r>
 402539c:	1000eb1e 	bne	r2,zero,402574c <__sfvwrite_r+0x4a4>
 40253a0:	80c0030b 	ldhu	r3,12(r16)
 40253a4:	a4400017 	ldw	r17,0(r20)
 40253a8:	1880008c 	andi	r2,r3,2
 40253ac:	103fd61e 	bne	r2,zero,4025308 <__alt_data_end+0xfffe5308>
 40253b0:	1880004c 	andi	r2,r3,1
 40253b4:	10003f1e 	bne	r2,zero,40254b4 <__sfvwrite_r+0x20c>
 40253b8:	0039883a 	mov	fp,zero
 40253bc:	0025883a 	mov	r18,zero
 40253c0:	90001a26 	beq	r18,zero,402542c <__sfvwrite_r+0x184>
 40253c4:	1880800c 	andi	r2,r3,512
 40253c8:	84c00217 	ldw	r19,8(r16)
 40253cc:	10002126 	beq	r2,zero,4025454 <__sfvwrite_r+0x1ac>
 40253d0:	982f883a 	mov	r23,r19
 40253d4:	94c09336 	bltu	r18,r19,4025624 <__sfvwrite_r+0x37c>
 40253d8:	1881200c 	andi	r2,r3,1152
 40253dc:	10009e1e 	bne	r2,zero,4025658 <__sfvwrite_r+0x3b0>
 40253e0:	81000017 	ldw	r4,0(r16)
 40253e4:	b80d883a 	mov	r6,r23
 40253e8:	e00b883a 	mov	r5,fp
 40253ec:	40265bc0 	call	40265bc <memmove>
 40253f0:	80c00217 	ldw	r3,8(r16)
 40253f4:	81000017 	ldw	r4,0(r16)
 40253f8:	9005883a 	mov	r2,r18
 40253fc:	1ce7c83a 	sub	r19,r3,r19
 4025400:	25cf883a 	add	r7,r4,r23
 4025404:	84c00215 	stw	r19,8(r16)
 4025408:	81c00015 	stw	r7,0(r16)
 402540c:	a0c00217 	ldw	r3,8(r20)
 4025410:	e0b9883a 	add	fp,fp,r2
 4025414:	90a5c83a 	sub	r18,r18,r2
 4025418:	18a7c83a 	sub	r19,r3,r2
 402541c:	a4c00215 	stw	r19,8(r20)
 4025420:	983fce26 	beq	r19,zero,402535c <__alt_data_end+0xfffe535c>
 4025424:	80c0030b 	ldhu	r3,12(r16)
 4025428:	903fe61e 	bne	r18,zero,40253c4 <__alt_data_end+0xfffe53c4>
 402542c:	8f000017 	ldw	fp,0(r17)
 4025430:	8c800117 	ldw	r18,4(r17)
 4025434:	8c400204 	addi	r17,r17,8
 4025438:	003fe106 	br	40253c0 <__alt_data_end+0xfffe53c0>
 402543c:	8cc00017 	ldw	r19,0(r17)
 4025440:	8c800117 	ldw	r18,4(r17)
 4025444:	8c400204 	addi	r17,r17,8
 4025448:	003fb306 	br	4025318 <__alt_data_end+0xfffe5318>
 402544c:	0005883a 	mov	r2,zero
 4025450:	f800283a 	ret
 4025454:	81000017 	ldw	r4,0(r16)
 4025458:	80800417 	ldw	r2,16(r16)
 402545c:	11005736 	bltu	r2,r4,40255bc <__sfvwrite_r+0x314>
 4025460:	85c00517 	ldw	r23,20(r16)
 4025464:	95c05536 	bltu	r18,r23,40255bc <__sfvwrite_r+0x314>
 4025468:	00a00034 	movhi	r2,32768
 402546c:	10bfffc4 	addi	r2,r2,-1
 4025470:	9009883a 	mov	r4,r18
 4025474:	1480012e 	bgeu	r2,r18,402547c <__sfvwrite_r+0x1d4>
 4025478:	1009883a 	mov	r4,r2
 402547c:	b80b883a 	mov	r5,r23
 4025480:	402ac140 	call	402ac14 <__divsi3>
 4025484:	15cf383a 	mul	r7,r2,r23
 4025488:	81400717 	ldw	r5,28(r16)
 402548c:	80800917 	ldw	r2,36(r16)
 4025490:	e00d883a 	mov	r6,fp
 4025494:	a809883a 	mov	r4,r21
 4025498:	103ee83a 	callr	r2
 402549c:	00bfdb16 	blt	zero,r2,402540c <__alt_data_end+0xfffe540c>
 40254a0:	8080030b 	ldhu	r2,12(r16)
 40254a4:	10801014 	ori	r2,r2,64
 40254a8:	8080030d 	sth	r2,12(r16)
 40254ac:	00bfffc4 	movi	r2,-1
 40254b0:	003fab06 	br	4025360 <__alt_data_end+0xfffe5360>
 40254b4:	0027883a 	mov	r19,zero
 40254b8:	0011883a 	mov	r8,zero
 40254bc:	0039883a 	mov	fp,zero
 40254c0:	0025883a 	mov	r18,zero
 40254c4:	90001f26 	beq	r18,zero,4025544 <__sfvwrite_r+0x29c>
 40254c8:	40005a26 	beq	r8,zero,4025634 <__sfvwrite_r+0x38c>
 40254cc:	982d883a 	mov	r22,r19
 40254d0:	94c0012e 	bgeu	r18,r19,40254d8 <__sfvwrite_r+0x230>
 40254d4:	902d883a 	mov	r22,r18
 40254d8:	81000017 	ldw	r4,0(r16)
 40254dc:	80800417 	ldw	r2,16(r16)
 40254e0:	b02f883a 	mov	r23,r22
 40254e4:	81c00517 	ldw	r7,20(r16)
 40254e8:	1100032e 	bgeu	r2,r4,40254f8 <__sfvwrite_r+0x250>
 40254ec:	80c00217 	ldw	r3,8(r16)
 40254f0:	38c7883a 	add	r3,r7,r3
 40254f4:	1d801816 	blt	r3,r22,4025558 <__sfvwrite_r+0x2b0>
 40254f8:	b1c03e16 	blt	r22,r7,40255f4 <__sfvwrite_r+0x34c>
 40254fc:	80800917 	ldw	r2,36(r16)
 4025500:	81400717 	ldw	r5,28(r16)
 4025504:	e00d883a 	mov	r6,fp
 4025508:	da000115 	stw	r8,4(sp)
 402550c:	a809883a 	mov	r4,r21
 4025510:	103ee83a 	callr	r2
 4025514:	102f883a 	mov	r23,r2
 4025518:	da000117 	ldw	r8,4(sp)
 402551c:	00bfe00e 	bge	zero,r2,40254a0 <__alt_data_end+0xfffe54a0>
 4025520:	9de7c83a 	sub	r19,r19,r23
 4025524:	98001f26 	beq	r19,zero,40255a4 <__sfvwrite_r+0x2fc>
 4025528:	a0800217 	ldw	r2,8(r20)
 402552c:	e5f9883a 	add	fp,fp,r23
 4025530:	95e5c83a 	sub	r18,r18,r23
 4025534:	15efc83a 	sub	r23,r2,r23
 4025538:	a5c00215 	stw	r23,8(r20)
 402553c:	b83f8726 	beq	r23,zero,402535c <__alt_data_end+0xfffe535c>
 4025540:	903fe11e 	bne	r18,zero,40254c8 <__alt_data_end+0xfffe54c8>
 4025544:	8f000017 	ldw	fp,0(r17)
 4025548:	8c800117 	ldw	r18,4(r17)
 402554c:	0011883a 	mov	r8,zero
 4025550:	8c400204 	addi	r17,r17,8
 4025554:	003fdb06 	br	40254c4 <__alt_data_end+0xfffe54c4>
 4025558:	180d883a 	mov	r6,r3
 402555c:	e00b883a 	mov	r5,fp
 4025560:	da000115 	stw	r8,4(sp)
 4025564:	d8c00015 	stw	r3,0(sp)
 4025568:	40265bc0 	call	40265bc <memmove>
 402556c:	d8c00017 	ldw	r3,0(sp)
 4025570:	80800017 	ldw	r2,0(r16)
 4025574:	800b883a 	mov	r5,r16
 4025578:	a809883a 	mov	r4,r21
 402557c:	10c5883a 	add	r2,r2,r3
 4025580:	80800015 	stw	r2,0(r16)
 4025584:	d8c00015 	stw	r3,0(sp)
 4025588:	4024a480 	call	4024a48 <_fflush_r>
 402558c:	d8c00017 	ldw	r3,0(sp)
 4025590:	da000117 	ldw	r8,4(sp)
 4025594:	103fc21e 	bne	r2,zero,40254a0 <__alt_data_end+0xfffe54a0>
 4025598:	182f883a 	mov	r23,r3
 402559c:	9de7c83a 	sub	r19,r19,r23
 40255a0:	983fe11e 	bne	r19,zero,4025528 <__alt_data_end+0xfffe5528>
 40255a4:	800b883a 	mov	r5,r16
 40255a8:	a809883a 	mov	r4,r21
 40255ac:	4024a480 	call	4024a48 <_fflush_r>
 40255b0:	103fbb1e 	bne	r2,zero,40254a0 <__alt_data_end+0xfffe54a0>
 40255b4:	0011883a 	mov	r8,zero
 40255b8:	003fdb06 	br	4025528 <__alt_data_end+0xfffe5528>
 40255bc:	94c0012e 	bgeu	r18,r19,40255c4 <__sfvwrite_r+0x31c>
 40255c0:	9027883a 	mov	r19,r18
 40255c4:	980d883a 	mov	r6,r19
 40255c8:	e00b883a 	mov	r5,fp
 40255cc:	40265bc0 	call	40265bc <memmove>
 40255d0:	80800217 	ldw	r2,8(r16)
 40255d4:	80c00017 	ldw	r3,0(r16)
 40255d8:	14c5c83a 	sub	r2,r2,r19
 40255dc:	1cc7883a 	add	r3,r3,r19
 40255e0:	80800215 	stw	r2,8(r16)
 40255e4:	80c00015 	stw	r3,0(r16)
 40255e8:	10004326 	beq	r2,zero,40256f8 <__sfvwrite_r+0x450>
 40255ec:	9805883a 	mov	r2,r19
 40255f0:	003f8606 	br	402540c <__alt_data_end+0xfffe540c>
 40255f4:	b00d883a 	mov	r6,r22
 40255f8:	e00b883a 	mov	r5,fp
 40255fc:	da000115 	stw	r8,4(sp)
 4025600:	40265bc0 	call	40265bc <memmove>
 4025604:	80800217 	ldw	r2,8(r16)
 4025608:	80c00017 	ldw	r3,0(r16)
 402560c:	da000117 	ldw	r8,4(sp)
 4025610:	1585c83a 	sub	r2,r2,r22
 4025614:	1dad883a 	add	r22,r3,r22
 4025618:	80800215 	stw	r2,8(r16)
 402561c:	85800015 	stw	r22,0(r16)
 4025620:	003fbf06 	br	4025520 <__alt_data_end+0xfffe5520>
 4025624:	81000017 	ldw	r4,0(r16)
 4025628:	9027883a 	mov	r19,r18
 402562c:	902f883a 	mov	r23,r18
 4025630:	003f6c06 	br	40253e4 <__alt_data_end+0xfffe53e4>
 4025634:	900d883a 	mov	r6,r18
 4025638:	01400284 	movi	r5,10
 402563c:	e009883a 	mov	r4,fp
 4025640:	40263900 	call	4026390 <memchr>
 4025644:	10003e26 	beq	r2,zero,4025740 <__sfvwrite_r+0x498>
 4025648:	10800044 	addi	r2,r2,1
 402564c:	1727c83a 	sub	r19,r2,fp
 4025650:	02000044 	movi	r8,1
 4025654:	003f9d06 	br	40254cc <__alt_data_end+0xfffe54cc>
 4025658:	80800517 	ldw	r2,20(r16)
 402565c:	81400417 	ldw	r5,16(r16)
 4025660:	81c00017 	ldw	r7,0(r16)
 4025664:	10a7883a 	add	r19,r2,r2
 4025668:	9885883a 	add	r2,r19,r2
 402566c:	1026d7fa 	srli	r19,r2,31
 4025670:	396dc83a 	sub	r22,r7,r5
 4025674:	b1000044 	addi	r4,r22,1
 4025678:	9885883a 	add	r2,r19,r2
 402567c:	1027d07a 	srai	r19,r2,1
 4025680:	2485883a 	add	r2,r4,r18
 4025684:	980d883a 	mov	r6,r19
 4025688:	9880022e 	bgeu	r19,r2,4025694 <__sfvwrite_r+0x3ec>
 402568c:	1027883a 	mov	r19,r2
 4025690:	100d883a 	mov	r6,r2
 4025694:	18c1000c 	andi	r3,r3,1024
 4025698:	18001c26 	beq	r3,zero,402570c <__sfvwrite_r+0x464>
 402569c:	300b883a 	mov	r5,r6
 40256a0:	a809883a 	mov	r4,r21
 40256a4:	4025b840 	call	4025b84 <_malloc_r>
 40256a8:	102f883a 	mov	r23,r2
 40256ac:	10002926 	beq	r2,zero,4025754 <__sfvwrite_r+0x4ac>
 40256b0:	81400417 	ldw	r5,16(r16)
 40256b4:	b00d883a 	mov	r6,r22
 40256b8:	1009883a 	mov	r4,r2
 40256bc:	40264740 	call	4026474 <memcpy>
 40256c0:	8080030b 	ldhu	r2,12(r16)
 40256c4:	00fedfc4 	movi	r3,-1153
 40256c8:	10c4703a 	and	r2,r2,r3
 40256cc:	10802014 	ori	r2,r2,128
 40256d0:	8080030d 	sth	r2,12(r16)
 40256d4:	bd89883a 	add	r4,r23,r22
 40256d8:	9d8fc83a 	sub	r7,r19,r22
 40256dc:	85c00415 	stw	r23,16(r16)
 40256e0:	84c00515 	stw	r19,20(r16)
 40256e4:	81000015 	stw	r4,0(r16)
 40256e8:	9027883a 	mov	r19,r18
 40256ec:	81c00215 	stw	r7,8(r16)
 40256f0:	902f883a 	mov	r23,r18
 40256f4:	003f3b06 	br	40253e4 <__alt_data_end+0xfffe53e4>
 40256f8:	800b883a 	mov	r5,r16
 40256fc:	a809883a 	mov	r4,r21
 4025700:	4024a480 	call	4024a48 <_fflush_r>
 4025704:	103fb926 	beq	r2,zero,40255ec <__alt_data_end+0xfffe55ec>
 4025708:	003f6506 	br	40254a0 <__alt_data_end+0xfffe54a0>
 402570c:	a809883a 	mov	r4,r21
 4025710:	40279a40 	call	40279a4 <_realloc_r>
 4025714:	102f883a 	mov	r23,r2
 4025718:	103fee1e 	bne	r2,zero,40256d4 <__alt_data_end+0xfffe56d4>
 402571c:	81400417 	ldw	r5,16(r16)
 4025720:	a809883a 	mov	r4,r21
 4025724:	4024f980 	call	4024f98 <_free_r>
 4025728:	8080030b 	ldhu	r2,12(r16)
 402572c:	00ffdfc4 	movi	r3,-129
 4025730:	1884703a 	and	r2,r3,r2
 4025734:	00c00304 	movi	r3,12
 4025738:	a8c00015 	stw	r3,0(r21)
 402573c:	003f5906 	br	40254a4 <__alt_data_end+0xfffe54a4>
 4025740:	94c00044 	addi	r19,r18,1
 4025744:	02000044 	movi	r8,1
 4025748:	003f6006 	br	40254cc <__alt_data_end+0xfffe54cc>
 402574c:	00bfffc4 	movi	r2,-1
 4025750:	003f0306 	br	4025360 <__alt_data_end+0xfffe5360>
 4025754:	00800304 	movi	r2,12
 4025758:	a8800015 	stw	r2,0(r21)
 402575c:	8080030b 	ldhu	r2,12(r16)
 4025760:	003f5006 	br	40254a4 <__alt_data_end+0xfffe54a4>

04025764 <_fwalk>:
 4025764:	defff704 	addi	sp,sp,-36
 4025768:	dd000415 	stw	r20,16(sp)
 402576c:	dfc00815 	stw	ra,32(sp)
 4025770:	ddc00715 	stw	r23,28(sp)
 4025774:	dd800615 	stw	r22,24(sp)
 4025778:	dd400515 	stw	r21,20(sp)
 402577c:	dcc00315 	stw	r19,12(sp)
 4025780:	dc800215 	stw	r18,8(sp)
 4025784:	dc400115 	stw	r17,4(sp)
 4025788:	dc000015 	stw	r16,0(sp)
 402578c:	2500b804 	addi	r20,r4,736
 4025790:	a0002326 	beq	r20,zero,4025820 <_fwalk+0xbc>
 4025794:	282b883a 	mov	r21,r5
 4025798:	002f883a 	mov	r23,zero
 402579c:	05800044 	movi	r22,1
 40257a0:	04ffffc4 	movi	r19,-1
 40257a4:	a4400117 	ldw	r17,4(r20)
 40257a8:	a4800217 	ldw	r18,8(r20)
 40257ac:	8c7fffc4 	addi	r17,r17,-1
 40257b0:	88000d16 	blt	r17,zero,40257e8 <_fwalk+0x84>
 40257b4:	94000304 	addi	r16,r18,12
 40257b8:	94800384 	addi	r18,r18,14
 40257bc:	8080000b 	ldhu	r2,0(r16)
 40257c0:	8c7fffc4 	addi	r17,r17,-1
 40257c4:	813ffd04 	addi	r4,r16,-12
 40257c8:	b080042e 	bgeu	r22,r2,40257dc <_fwalk+0x78>
 40257cc:	9080000f 	ldh	r2,0(r18)
 40257d0:	14c00226 	beq	r2,r19,40257dc <_fwalk+0x78>
 40257d4:	a83ee83a 	callr	r21
 40257d8:	b8aeb03a 	or	r23,r23,r2
 40257dc:	84001a04 	addi	r16,r16,104
 40257e0:	94801a04 	addi	r18,r18,104
 40257e4:	8cfff51e 	bne	r17,r19,40257bc <__alt_data_end+0xfffe57bc>
 40257e8:	a5000017 	ldw	r20,0(r20)
 40257ec:	a03fed1e 	bne	r20,zero,40257a4 <__alt_data_end+0xfffe57a4>
 40257f0:	b805883a 	mov	r2,r23
 40257f4:	dfc00817 	ldw	ra,32(sp)
 40257f8:	ddc00717 	ldw	r23,28(sp)
 40257fc:	dd800617 	ldw	r22,24(sp)
 4025800:	dd400517 	ldw	r21,20(sp)
 4025804:	dd000417 	ldw	r20,16(sp)
 4025808:	dcc00317 	ldw	r19,12(sp)
 402580c:	dc800217 	ldw	r18,8(sp)
 4025810:	dc400117 	ldw	r17,4(sp)
 4025814:	dc000017 	ldw	r16,0(sp)
 4025818:	dec00904 	addi	sp,sp,36
 402581c:	f800283a 	ret
 4025820:	002f883a 	mov	r23,zero
 4025824:	003ff206 	br	40257f0 <__alt_data_end+0xfffe57f0>

04025828 <_fwalk_reent>:
 4025828:	defff704 	addi	sp,sp,-36
 402582c:	dd000415 	stw	r20,16(sp)
 4025830:	dfc00815 	stw	ra,32(sp)
 4025834:	ddc00715 	stw	r23,28(sp)
 4025838:	dd800615 	stw	r22,24(sp)
 402583c:	dd400515 	stw	r21,20(sp)
 4025840:	dcc00315 	stw	r19,12(sp)
 4025844:	dc800215 	stw	r18,8(sp)
 4025848:	dc400115 	stw	r17,4(sp)
 402584c:	dc000015 	stw	r16,0(sp)
 4025850:	2500b804 	addi	r20,r4,736
 4025854:	a0002326 	beq	r20,zero,40258e4 <_fwalk_reent+0xbc>
 4025858:	282b883a 	mov	r21,r5
 402585c:	2027883a 	mov	r19,r4
 4025860:	002f883a 	mov	r23,zero
 4025864:	05800044 	movi	r22,1
 4025868:	04bfffc4 	movi	r18,-1
 402586c:	a4400117 	ldw	r17,4(r20)
 4025870:	a4000217 	ldw	r16,8(r20)
 4025874:	8c7fffc4 	addi	r17,r17,-1
 4025878:	88000c16 	blt	r17,zero,40258ac <_fwalk_reent+0x84>
 402587c:	84000304 	addi	r16,r16,12
 4025880:	8080000b 	ldhu	r2,0(r16)
 4025884:	8c7fffc4 	addi	r17,r17,-1
 4025888:	817ffd04 	addi	r5,r16,-12
 402588c:	b080052e 	bgeu	r22,r2,40258a4 <_fwalk_reent+0x7c>
 4025890:	8080008f 	ldh	r2,2(r16)
 4025894:	9809883a 	mov	r4,r19
 4025898:	14800226 	beq	r2,r18,40258a4 <_fwalk_reent+0x7c>
 402589c:	a83ee83a 	callr	r21
 40258a0:	b8aeb03a 	or	r23,r23,r2
 40258a4:	84001a04 	addi	r16,r16,104
 40258a8:	8cbff51e 	bne	r17,r18,4025880 <__alt_data_end+0xfffe5880>
 40258ac:	a5000017 	ldw	r20,0(r20)
 40258b0:	a03fee1e 	bne	r20,zero,402586c <__alt_data_end+0xfffe586c>
 40258b4:	b805883a 	mov	r2,r23
 40258b8:	dfc00817 	ldw	ra,32(sp)
 40258bc:	ddc00717 	ldw	r23,28(sp)
 40258c0:	dd800617 	ldw	r22,24(sp)
 40258c4:	dd400517 	ldw	r21,20(sp)
 40258c8:	dd000417 	ldw	r20,16(sp)
 40258cc:	dcc00317 	ldw	r19,12(sp)
 40258d0:	dc800217 	ldw	r18,8(sp)
 40258d4:	dc400117 	ldw	r17,4(sp)
 40258d8:	dc000017 	ldw	r16,0(sp)
 40258dc:	dec00904 	addi	sp,sp,36
 40258e0:	f800283a 	ret
 40258e4:	002f883a 	mov	r23,zero
 40258e8:	003ff206 	br	40258b4 <__alt_data_end+0xfffe58b4>

040258ec <_setlocale_r>:
 40258ec:	30001b26 	beq	r6,zero,402595c <_setlocale_r+0x70>
 40258f0:	014100f4 	movhi	r5,1027
 40258f4:	defffe04 	addi	sp,sp,-8
 40258f8:	2944a504 	addi	r5,r5,4756
 40258fc:	3009883a 	mov	r4,r6
 4025900:	dc000015 	stw	r16,0(sp)
 4025904:	dfc00115 	stw	ra,4(sp)
 4025908:	3021883a 	mov	r16,r6
 402590c:	402810c0 	call	402810c <strcmp>
 4025910:	1000061e 	bne	r2,zero,402592c <_setlocale_r+0x40>
 4025914:	008100f4 	movhi	r2,1027
 4025918:	1084a404 	addi	r2,r2,4752
 402591c:	dfc00117 	ldw	ra,4(sp)
 4025920:	dc000017 	ldw	r16,0(sp)
 4025924:	dec00204 	addi	sp,sp,8
 4025928:	f800283a 	ret
 402592c:	014100f4 	movhi	r5,1027
 4025930:	2944a404 	addi	r5,r5,4752
 4025934:	8009883a 	mov	r4,r16
 4025938:	402810c0 	call	402810c <strcmp>
 402593c:	103ff526 	beq	r2,zero,4025914 <__alt_data_end+0xfffe5914>
 4025940:	014100f4 	movhi	r5,1027
 4025944:	29448f04 	addi	r5,r5,4668
 4025948:	8009883a 	mov	r4,r16
 402594c:	402810c0 	call	402810c <strcmp>
 4025950:	103ff026 	beq	r2,zero,4025914 <__alt_data_end+0xfffe5914>
 4025954:	0005883a 	mov	r2,zero
 4025958:	003ff006 	br	402591c <__alt_data_end+0xfffe591c>
 402595c:	008100f4 	movhi	r2,1027
 4025960:	1084a404 	addi	r2,r2,4752
 4025964:	f800283a 	ret

04025968 <__locale_charset>:
 4025968:	008100f4 	movhi	r2,1027
 402596c:	1086ad04 	addi	r2,r2,6836
 4025970:	f800283a 	ret

04025974 <__locale_mb_cur_max>:
 4025974:	008100f4 	movhi	r2,1027
 4025978:	108c7504 	addi	r2,r2,12756
 402597c:	10800017 	ldw	r2,0(r2)
 4025980:	f800283a 	ret

04025984 <__locale_msgcharset>:
 4025984:	008100f4 	movhi	r2,1027
 4025988:	1086a504 	addi	r2,r2,6804
 402598c:	f800283a 	ret

04025990 <__locale_cjk_lang>:
 4025990:	0005883a 	mov	r2,zero
 4025994:	f800283a 	ret

04025998 <_localeconv_r>:
 4025998:	008100f4 	movhi	r2,1027
 402599c:	1086b504 	addi	r2,r2,6868
 40259a0:	f800283a 	ret

040259a4 <setlocale>:
 40259a4:	008100f4 	movhi	r2,1027
 40259a8:	108c7404 	addi	r2,r2,12752
 40259ac:	280d883a 	mov	r6,r5
 40259b0:	200b883a 	mov	r5,r4
 40259b4:	11000017 	ldw	r4,0(r2)
 40259b8:	40258ec1 	jmpi	40258ec <_setlocale_r>

040259bc <localeconv>:
 40259bc:	008100f4 	movhi	r2,1027
 40259c0:	1086b504 	addi	r2,r2,6868
 40259c4:	f800283a 	ret

040259c8 <__smakebuf_r>:
 40259c8:	2880030b 	ldhu	r2,12(r5)
 40259cc:	10c0008c 	andi	r3,r2,2
 40259d0:	1800411e 	bne	r3,zero,4025ad8 <__smakebuf_r+0x110>
 40259d4:	deffec04 	addi	sp,sp,-80
 40259d8:	dc000f15 	stw	r16,60(sp)
 40259dc:	2821883a 	mov	r16,r5
 40259e0:	2940038f 	ldh	r5,14(r5)
 40259e4:	dc401015 	stw	r17,64(sp)
 40259e8:	dfc01315 	stw	ra,76(sp)
 40259ec:	dcc01215 	stw	r19,72(sp)
 40259f0:	dc801115 	stw	r18,68(sp)
 40259f4:	2023883a 	mov	r17,r4
 40259f8:	28001c16 	blt	r5,zero,4025a6c <__smakebuf_r+0xa4>
 40259fc:	d80d883a 	mov	r6,sp
 4025a00:	4029e0c0 	call	4029e0c <_fstat_r>
 4025a04:	10001816 	blt	r2,zero,4025a68 <__smakebuf_r+0xa0>
 4025a08:	d8800117 	ldw	r2,4(sp)
 4025a0c:	00e00014 	movui	r3,32768
 4025a10:	10bc000c 	andi	r2,r2,61440
 4025a14:	14c80020 	cmpeqi	r19,r2,8192
 4025a18:	10c03726 	beq	r2,r3,4025af8 <__smakebuf_r+0x130>
 4025a1c:	80c0030b 	ldhu	r3,12(r16)
 4025a20:	18c20014 	ori	r3,r3,2048
 4025a24:	80c0030d 	sth	r3,12(r16)
 4025a28:	00c80004 	movi	r3,8192
 4025a2c:	10c0521e 	bne	r2,r3,4025b78 <__smakebuf_r+0x1b0>
 4025a30:	8140038f 	ldh	r5,14(r16)
 4025a34:	8809883a 	mov	r4,r17
 4025a38:	4029e680 	call	4029e68 <_isatty_r>
 4025a3c:	10004c26 	beq	r2,zero,4025b70 <__smakebuf_r+0x1a8>
 4025a40:	8080030b 	ldhu	r2,12(r16)
 4025a44:	80c010c4 	addi	r3,r16,67
 4025a48:	80c00015 	stw	r3,0(r16)
 4025a4c:	10800054 	ori	r2,r2,1
 4025a50:	8080030d 	sth	r2,12(r16)
 4025a54:	00800044 	movi	r2,1
 4025a58:	80c00415 	stw	r3,16(r16)
 4025a5c:	80800515 	stw	r2,20(r16)
 4025a60:	04810004 	movi	r18,1024
 4025a64:	00000706 	br	4025a84 <__smakebuf_r+0xbc>
 4025a68:	8080030b 	ldhu	r2,12(r16)
 4025a6c:	10c0200c 	andi	r3,r2,128
 4025a70:	18001f1e 	bne	r3,zero,4025af0 <__smakebuf_r+0x128>
 4025a74:	04810004 	movi	r18,1024
 4025a78:	10820014 	ori	r2,r2,2048
 4025a7c:	8080030d 	sth	r2,12(r16)
 4025a80:	0027883a 	mov	r19,zero
 4025a84:	900b883a 	mov	r5,r18
 4025a88:	8809883a 	mov	r4,r17
 4025a8c:	4025b840 	call	4025b84 <_malloc_r>
 4025a90:	10002c26 	beq	r2,zero,4025b44 <__smakebuf_r+0x17c>
 4025a94:	80c0030b 	ldhu	r3,12(r16)
 4025a98:	010100b4 	movhi	r4,1026
 4025a9c:	2112b704 	addi	r4,r4,19164
 4025aa0:	89000f15 	stw	r4,60(r17)
 4025aa4:	18c02014 	ori	r3,r3,128
 4025aa8:	80c0030d 	sth	r3,12(r16)
 4025aac:	80800015 	stw	r2,0(r16)
 4025ab0:	80800415 	stw	r2,16(r16)
 4025ab4:	84800515 	stw	r18,20(r16)
 4025ab8:	98001a1e 	bne	r19,zero,4025b24 <__smakebuf_r+0x15c>
 4025abc:	dfc01317 	ldw	ra,76(sp)
 4025ac0:	dcc01217 	ldw	r19,72(sp)
 4025ac4:	dc801117 	ldw	r18,68(sp)
 4025ac8:	dc401017 	ldw	r17,64(sp)
 4025acc:	dc000f17 	ldw	r16,60(sp)
 4025ad0:	dec01404 	addi	sp,sp,80
 4025ad4:	f800283a 	ret
 4025ad8:	288010c4 	addi	r2,r5,67
 4025adc:	28800015 	stw	r2,0(r5)
 4025ae0:	28800415 	stw	r2,16(r5)
 4025ae4:	00800044 	movi	r2,1
 4025ae8:	28800515 	stw	r2,20(r5)
 4025aec:	f800283a 	ret
 4025af0:	04801004 	movi	r18,64
 4025af4:	003fe006 	br	4025a78 <__alt_data_end+0xfffe5a78>
 4025af8:	81000a17 	ldw	r4,40(r16)
 4025afc:	00c100f4 	movhi	r3,1027
 4025b00:	18e02a04 	addi	r3,r3,-32600
 4025b04:	20ffc51e 	bne	r4,r3,4025a1c <__alt_data_end+0xfffe5a1c>
 4025b08:	8080030b 	ldhu	r2,12(r16)
 4025b0c:	04810004 	movi	r18,1024
 4025b10:	84801315 	stw	r18,76(r16)
 4025b14:	1484b03a 	or	r2,r2,r18
 4025b18:	8080030d 	sth	r2,12(r16)
 4025b1c:	0027883a 	mov	r19,zero
 4025b20:	003fd806 	br	4025a84 <__alt_data_end+0xfffe5a84>
 4025b24:	8140038f 	ldh	r5,14(r16)
 4025b28:	8809883a 	mov	r4,r17
 4025b2c:	4029e680 	call	4029e68 <_isatty_r>
 4025b30:	103fe226 	beq	r2,zero,4025abc <__alt_data_end+0xfffe5abc>
 4025b34:	8080030b 	ldhu	r2,12(r16)
 4025b38:	10800054 	ori	r2,r2,1
 4025b3c:	8080030d 	sth	r2,12(r16)
 4025b40:	003fde06 	br	4025abc <__alt_data_end+0xfffe5abc>
 4025b44:	8080030b 	ldhu	r2,12(r16)
 4025b48:	10c0800c 	andi	r3,r2,512
 4025b4c:	183fdb1e 	bne	r3,zero,4025abc <__alt_data_end+0xfffe5abc>
 4025b50:	10800094 	ori	r2,r2,2
 4025b54:	80c010c4 	addi	r3,r16,67
 4025b58:	8080030d 	sth	r2,12(r16)
 4025b5c:	00800044 	movi	r2,1
 4025b60:	80c00015 	stw	r3,0(r16)
 4025b64:	80c00415 	stw	r3,16(r16)
 4025b68:	80800515 	stw	r2,20(r16)
 4025b6c:	003fd306 	br	4025abc <__alt_data_end+0xfffe5abc>
 4025b70:	04810004 	movi	r18,1024
 4025b74:	003fc306 	br	4025a84 <__alt_data_end+0xfffe5a84>
 4025b78:	0027883a 	mov	r19,zero
 4025b7c:	04810004 	movi	r18,1024
 4025b80:	003fc006 	br	4025a84 <__alt_data_end+0xfffe5a84>

04025b84 <_malloc_r>:
 4025b84:	defff504 	addi	sp,sp,-44
 4025b88:	dc800315 	stw	r18,12(sp)
 4025b8c:	dfc00a15 	stw	ra,40(sp)
 4025b90:	df000915 	stw	fp,36(sp)
 4025b94:	ddc00815 	stw	r23,32(sp)
 4025b98:	dd800715 	stw	r22,28(sp)
 4025b9c:	dd400615 	stw	r21,24(sp)
 4025ba0:	dd000515 	stw	r20,20(sp)
 4025ba4:	dcc00415 	stw	r19,16(sp)
 4025ba8:	dc400215 	stw	r17,8(sp)
 4025bac:	dc000115 	stw	r16,4(sp)
 4025bb0:	288002c4 	addi	r2,r5,11
 4025bb4:	00c00584 	movi	r3,22
 4025bb8:	2025883a 	mov	r18,r4
 4025bbc:	18807f2e 	bgeu	r3,r2,4025dbc <_malloc_r+0x238>
 4025bc0:	047ffe04 	movi	r17,-8
 4025bc4:	1462703a 	and	r17,r2,r17
 4025bc8:	8800a316 	blt	r17,zero,4025e58 <_malloc_r+0x2d4>
 4025bcc:	8940a236 	bltu	r17,r5,4025e58 <_malloc_r+0x2d4>
 4025bd0:	402dc940 	call	402dc94 <__malloc_lock>
 4025bd4:	00807dc4 	movi	r2,503
 4025bd8:	1441e92e 	bgeu	r2,r17,4026380 <_malloc_r+0x7fc>
 4025bdc:	8804d27a 	srli	r2,r17,9
 4025be0:	1000a126 	beq	r2,zero,4025e68 <_malloc_r+0x2e4>
 4025be4:	00c00104 	movi	r3,4
 4025be8:	18811e36 	bltu	r3,r2,4026064 <_malloc_r+0x4e0>
 4025bec:	8804d1ba 	srli	r2,r17,6
 4025bf0:	12000e44 	addi	r8,r2,57
 4025bf4:	11c00e04 	addi	r7,r2,56
 4025bf8:	4209883a 	add	r4,r8,r8
 4025bfc:	04c100f4 	movhi	r19,1027
 4025c00:	2109883a 	add	r4,r4,r4
 4025c04:	9cc6c304 	addi	r19,r19,6924
 4025c08:	2109883a 	add	r4,r4,r4
 4025c0c:	9909883a 	add	r4,r19,r4
 4025c10:	24000117 	ldw	r16,4(r4)
 4025c14:	213ffe04 	addi	r4,r4,-8
 4025c18:	24009726 	beq	r4,r16,4025e78 <_malloc_r+0x2f4>
 4025c1c:	80800117 	ldw	r2,4(r16)
 4025c20:	01bfff04 	movi	r6,-4
 4025c24:	014003c4 	movi	r5,15
 4025c28:	1184703a 	and	r2,r2,r6
 4025c2c:	1447c83a 	sub	r3,r2,r17
 4025c30:	28c00716 	blt	r5,r3,4025c50 <_malloc_r+0xcc>
 4025c34:	1800920e 	bge	r3,zero,4025e80 <_malloc_r+0x2fc>
 4025c38:	84000317 	ldw	r16,12(r16)
 4025c3c:	24008e26 	beq	r4,r16,4025e78 <_malloc_r+0x2f4>
 4025c40:	80800117 	ldw	r2,4(r16)
 4025c44:	1184703a 	and	r2,r2,r6
 4025c48:	1447c83a 	sub	r3,r2,r17
 4025c4c:	28fff90e 	bge	r5,r3,4025c34 <__alt_data_end+0xfffe5c34>
 4025c50:	3809883a 	mov	r4,r7
 4025c54:	018100f4 	movhi	r6,1027
 4025c58:	9c000417 	ldw	r16,16(r19)
 4025c5c:	3186c304 	addi	r6,r6,6924
 4025c60:	32000204 	addi	r8,r6,8
 4025c64:	82013426 	beq	r16,r8,4026138 <_malloc_r+0x5b4>
 4025c68:	80c00117 	ldw	r3,4(r16)
 4025c6c:	00bfff04 	movi	r2,-4
 4025c70:	188e703a 	and	r7,r3,r2
 4025c74:	3c45c83a 	sub	r2,r7,r17
 4025c78:	00c003c4 	movi	r3,15
 4025c7c:	18811f16 	blt	r3,r2,40260fc <_malloc_r+0x578>
 4025c80:	32000515 	stw	r8,20(r6)
 4025c84:	32000415 	stw	r8,16(r6)
 4025c88:	10007f0e 	bge	r2,zero,4025e88 <_malloc_r+0x304>
 4025c8c:	00807fc4 	movi	r2,511
 4025c90:	11c0fd36 	bltu	r2,r7,4026088 <_malloc_r+0x504>
 4025c94:	3806d0fa 	srli	r3,r7,3
 4025c98:	01c00044 	movi	r7,1
 4025c9c:	30800117 	ldw	r2,4(r6)
 4025ca0:	19400044 	addi	r5,r3,1
 4025ca4:	294b883a 	add	r5,r5,r5
 4025ca8:	1807d0ba 	srai	r3,r3,2
 4025cac:	294b883a 	add	r5,r5,r5
 4025cb0:	294b883a 	add	r5,r5,r5
 4025cb4:	298b883a 	add	r5,r5,r6
 4025cb8:	38c6983a 	sll	r3,r7,r3
 4025cbc:	29c00017 	ldw	r7,0(r5)
 4025cc0:	2a7ffe04 	addi	r9,r5,-8
 4025cc4:	1886b03a 	or	r3,r3,r2
 4025cc8:	82400315 	stw	r9,12(r16)
 4025ccc:	81c00215 	stw	r7,8(r16)
 4025cd0:	30c00115 	stw	r3,4(r6)
 4025cd4:	2c000015 	stw	r16,0(r5)
 4025cd8:	3c000315 	stw	r16,12(r7)
 4025cdc:	2005d0ba 	srai	r2,r4,2
 4025ce0:	01400044 	movi	r5,1
 4025ce4:	288a983a 	sll	r5,r5,r2
 4025ce8:	19406f36 	bltu	r3,r5,4025ea8 <_malloc_r+0x324>
 4025cec:	28c4703a 	and	r2,r5,r3
 4025cf0:	10000a1e 	bne	r2,zero,4025d1c <_malloc_r+0x198>
 4025cf4:	00bfff04 	movi	r2,-4
 4025cf8:	294b883a 	add	r5,r5,r5
 4025cfc:	2088703a 	and	r4,r4,r2
 4025d00:	28c4703a 	and	r2,r5,r3
 4025d04:	21000104 	addi	r4,r4,4
 4025d08:	1000041e 	bne	r2,zero,4025d1c <_malloc_r+0x198>
 4025d0c:	294b883a 	add	r5,r5,r5
 4025d10:	28c4703a 	and	r2,r5,r3
 4025d14:	21000104 	addi	r4,r4,4
 4025d18:	103ffc26 	beq	r2,zero,4025d0c <__alt_data_end+0xfffe5d0c>
 4025d1c:	02bfff04 	movi	r10,-4
 4025d20:	024003c4 	movi	r9,15
 4025d24:	21800044 	addi	r6,r4,1
 4025d28:	318d883a 	add	r6,r6,r6
 4025d2c:	318d883a 	add	r6,r6,r6
 4025d30:	318d883a 	add	r6,r6,r6
 4025d34:	998d883a 	add	r6,r19,r6
 4025d38:	333ffe04 	addi	r12,r6,-8
 4025d3c:	2017883a 	mov	r11,r4
 4025d40:	31800104 	addi	r6,r6,4
 4025d44:	34000017 	ldw	r16,0(r6)
 4025d48:	31fffd04 	addi	r7,r6,-12
 4025d4c:	81c0041e 	bne	r16,r7,4025d60 <_malloc_r+0x1dc>
 4025d50:	0000fb06 	br	4026140 <_malloc_r+0x5bc>
 4025d54:	1801030e 	bge	r3,zero,4026164 <_malloc_r+0x5e0>
 4025d58:	84000317 	ldw	r16,12(r16)
 4025d5c:	81c0f826 	beq	r16,r7,4026140 <_malloc_r+0x5bc>
 4025d60:	80800117 	ldw	r2,4(r16)
 4025d64:	1284703a 	and	r2,r2,r10
 4025d68:	1447c83a 	sub	r3,r2,r17
 4025d6c:	48fff90e 	bge	r9,r3,4025d54 <__alt_data_end+0xfffe5d54>
 4025d70:	80800317 	ldw	r2,12(r16)
 4025d74:	81000217 	ldw	r4,8(r16)
 4025d78:	89400054 	ori	r5,r17,1
 4025d7c:	81400115 	stw	r5,4(r16)
 4025d80:	20800315 	stw	r2,12(r4)
 4025d84:	11000215 	stw	r4,8(r2)
 4025d88:	8463883a 	add	r17,r16,r17
 4025d8c:	9c400515 	stw	r17,20(r19)
 4025d90:	9c400415 	stw	r17,16(r19)
 4025d94:	18800054 	ori	r2,r3,1
 4025d98:	88800115 	stw	r2,4(r17)
 4025d9c:	8a000315 	stw	r8,12(r17)
 4025da0:	8a000215 	stw	r8,8(r17)
 4025da4:	88e3883a 	add	r17,r17,r3
 4025da8:	88c00015 	stw	r3,0(r17)
 4025dac:	9009883a 	mov	r4,r18
 4025db0:	402dcb80 	call	402dcb8 <__malloc_unlock>
 4025db4:	80800204 	addi	r2,r16,8
 4025db8:	00001b06 	br	4025e28 <_malloc_r+0x2a4>
 4025dbc:	04400404 	movi	r17,16
 4025dc0:	89402536 	bltu	r17,r5,4025e58 <_malloc_r+0x2d4>
 4025dc4:	402dc940 	call	402dc94 <__malloc_lock>
 4025dc8:	00800184 	movi	r2,6
 4025dcc:	01000084 	movi	r4,2
 4025dd0:	04c100f4 	movhi	r19,1027
 4025dd4:	1085883a 	add	r2,r2,r2
 4025dd8:	9cc6c304 	addi	r19,r19,6924
 4025ddc:	1085883a 	add	r2,r2,r2
 4025de0:	9885883a 	add	r2,r19,r2
 4025de4:	14000117 	ldw	r16,4(r2)
 4025de8:	10fffe04 	addi	r3,r2,-8
 4025dec:	80c0d926 	beq	r16,r3,4026154 <_malloc_r+0x5d0>
 4025df0:	80c00117 	ldw	r3,4(r16)
 4025df4:	81000317 	ldw	r4,12(r16)
 4025df8:	00bfff04 	movi	r2,-4
 4025dfc:	1884703a 	and	r2,r3,r2
 4025e00:	81400217 	ldw	r5,8(r16)
 4025e04:	8085883a 	add	r2,r16,r2
 4025e08:	10c00117 	ldw	r3,4(r2)
 4025e0c:	29000315 	stw	r4,12(r5)
 4025e10:	21400215 	stw	r5,8(r4)
 4025e14:	18c00054 	ori	r3,r3,1
 4025e18:	10c00115 	stw	r3,4(r2)
 4025e1c:	9009883a 	mov	r4,r18
 4025e20:	402dcb80 	call	402dcb8 <__malloc_unlock>
 4025e24:	80800204 	addi	r2,r16,8
 4025e28:	dfc00a17 	ldw	ra,40(sp)
 4025e2c:	df000917 	ldw	fp,36(sp)
 4025e30:	ddc00817 	ldw	r23,32(sp)
 4025e34:	dd800717 	ldw	r22,28(sp)
 4025e38:	dd400617 	ldw	r21,24(sp)
 4025e3c:	dd000517 	ldw	r20,20(sp)
 4025e40:	dcc00417 	ldw	r19,16(sp)
 4025e44:	dc800317 	ldw	r18,12(sp)
 4025e48:	dc400217 	ldw	r17,8(sp)
 4025e4c:	dc000117 	ldw	r16,4(sp)
 4025e50:	dec00b04 	addi	sp,sp,44
 4025e54:	f800283a 	ret
 4025e58:	00800304 	movi	r2,12
 4025e5c:	90800015 	stw	r2,0(r18)
 4025e60:	0005883a 	mov	r2,zero
 4025e64:	003ff006 	br	4025e28 <__alt_data_end+0xfffe5e28>
 4025e68:	01002004 	movi	r4,128
 4025e6c:	02001004 	movi	r8,64
 4025e70:	01c00fc4 	movi	r7,63
 4025e74:	003f6106 	br	4025bfc <__alt_data_end+0xfffe5bfc>
 4025e78:	4009883a 	mov	r4,r8
 4025e7c:	003f7506 	br	4025c54 <__alt_data_end+0xfffe5c54>
 4025e80:	81000317 	ldw	r4,12(r16)
 4025e84:	003fde06 	br	4025e00 <__alt_data_end+0xfffe5e00>
 4025e88:	81c5883a 	add	r2,r16,r7
 4025e8c:	11400117 	ldw	r5,4(r2)
 4025e90:	9009883a 	mov	r4,r18
 4025e94:	29400054 	ori	r5,r5,1
 4025e98:	11400115 	stw	r5,4(r2)
 4025e9c:	402dcb80 	call	402dcb8 <__malloc_unlock>
 4025ea0:	80800204 	addi	r2,r16,8
 4025ea4:	003fe006 	br	4025e28 <__alt_data_end+0xfffe5e28>
 4025ea8:	9c000217 	ldw	r16,8(r19)
 4025eac:	00bfff04 	movi	r2,-4
 4025eb0:	85800117 	ldw	r22,4(r16)
 4025eb4:	b0ac703a 	and	r22,r22,r2
 4025eb8:	b4400336 	bltu	r22,r17,4025ec8 <_malloc_r+0x344>
 4025ebc:	b445c83a 	sub	r2,r22,r17
 4025ec0:	00c003c4 	movi	r3,15
 4025ec4:	18805d16 	blt	r3,r2,402603c <_malloc_r+0x4b8>
 4025ec8:	05c100f4 	movhi	r23,1027
 4025ecc:	008100f4 	movhi	r2,1027
 4025ed0:	10937804 	addi	r2,r2,19936
 4025ed4:	bdcc7604 	addi	r23,r23,12760
 4025ed8:	15400017 	ldw	r21,0(r2)
 4025edc:	b8c00017 	ldw	r3,0(r23)
 4025ee0:	00bfffc4 	movi	r2,-1
 4025ee4:	858d883a 	add	r6,r16,r22
 4025ee8:	8d6b883a 	add	r21,r17,r21
 4025eec:	1880ea26 	beq	r3,r2,4026298 <_malloc_r+0x714>
 4025ef0:	ad4403c4 	addi	r21,r21,4111
 4025ef4:	00bc0004 	movi	r2,-4096
 4025ef8:	a8aa703a 	and	r21,r21,r2
 4025efc:	a80b883a 	mov	r5,r21
 4025f00:	9009883a 	mov	r4,r18
 4025f04:	d9800015 	stw	r6,0(sp)
 4025f08:	4027f7c0 	call	4027f7c <_sbrk_r>
 4025f0c:	1029883a 	mov	r20,r2
 4025f10:	00bfffc4 	movi	r2,-1
 4025f14:	d9800017 	ldw	r6,0(sp)
 4025f18:	a080e826 	beq	r20,r2,40262bc <_malloc_r+0x738>
 4025f1c:	a180a636 	bltu	r20,r6,40261b8 <_malloc_r+0x634>
 4025f20:	070100f4 	movhi	fp,1027
 4025f24:	e7138104 	addi	fp,fp,19972
 4025f28:	e0800017 	ldw	r2,0(fp)
 4025f2c:	a887883a 	add	r3,r21,r2
 4025f30:	e0c00015 	stw	r3,0(fp)
 4025f34:	3500e626 	beq	r6,r20,40262d0 <_malloc_r+0x74c>
 4025f38:	b9000017 	ldw	r4,0(r23)
 4025f3c:	00bfffc4 	movi	r2,-1
 4025f40:	2080ee26 	beq	r4,r2,40262fc <_malloc_r+0x778>
 4025f44:	a185c83a 	sub	r2,r20,r6
 4025f48:	10c5883a 	add	r2,r2,r3
 4025f4c:	e0800015 	stw	r2,0(fp)
 4025f50:	a0c001cc 	andi	r3,r20,7
 4025f54:	1800bc26 	beq	r3,zero,4026248 <_malloc_r+0x6c4>
 4025f58:	a0e9c83a 	sub	r20,r20,r3
 4025f5c:	00840204 	movi	r2,4104
 4025f60:	a5000204 	addi	r20,r20,8
 4025f64:	10c7c83a 	sub	r3,r2,r3
 4025f68:	a545883a 	add	r2,r20,r21
 4025f6c:	1083ffcc 	andi	r2,r2,4095
 4025f70:	18abc83a 	sub	r21,r3,r2
 4025f74:	a80b883a 	mov	r5,r21
 4025f78:	9009883a 	mov	r4,r18
 4025f7c:	4027f7c0 	call	4027f7c <_sbrk_r>
 4025f80:	00ffffc4 	movi	r3,-1
 4025f84:	10c0e126 	beq	r2,r3,402630c <_malloc_r+0x788>
 4025f88:	1505c83a 	sub	r2,r2,r20
 4025f8c:	1545883a 	add	r2,r2,r21
 4025f90:	10800054 	ori	r2,r2,1
 4025f94:	e0c00017 	ldw	r3,0(fp)
 4025f98:	9d000215 	stw	r20,8(r19)
 4025f9c:	a0800115 	stw	r2,4(r20)
 4025fa0:	a8c7883a 	add	r3,r21,r3
 4025fa4:	e0c00015 	stw	r3,0(fp)
 4025fa8:	84c00e26 	beq	r16,r19,4025fe4 <_malloc_r+0x460>
 4025fac:	018003c4 	movi	r6,15
 4025fb0:	3580a72e 	bgeu	r6,r22,4026250 <_malloc_r+0x6cc>
 4025fb4:	81400117 	ldw	r5,4(r16)
 4025fb8:	013ffe04 	movi	r4,-8
 4025fbc:	b0bffd04 	addi	r2,r22,-12
 4025fc0:	1104703a 	and	r2,r2,r4
 4025fc4:	2900004c 	andi	r4,r5,1
 4025fc8:	2088b03a 	or	r4,r4,r2
 4025fcc:	81000115 	stw	r4,4(r16)
 4025fd0:	01400144 	movi	r5,5
 4025fd4:	8089883a 	add	r4,r16,r2
 4025fd8:	21400115 	stw	r5,4(r4)
 4025fdc:	21400215 	stw	r5,8(r4)
 4025fe0:	3080cd36 	bltu	r6,r2,4026318 <_malloc_r+0x794>
 4025fe4:	008100f4 	movhi	r2,1027
 4025fe8:	10937704 	addi	r2,r2,19932
 4025fec:	11000017 	ldw	r4,0(r2)
 4025ff0:	20c0012e 	bgeu	r4,r3,4025ff8 <_malloc_r+0x474>
 4025ff4:	10c00015 	stw	r3,0(r2)
 4025ff8:	008100f4 	movhi	r2,1027
 4025ffc:	10937604 	addi	r2,r2,19928
 4026000:	11000017 	ldw	r4,0(r2)
 4026004:	9c000217 	ldw	r16,8(r19)
 4026008:	20c0012e 	bgeu	r4,r3,4026010 <_malloc_r+0x48c>
 402600c:	10c00015 	stw	r3,0(r2)
 4026010:	80c00117 	ldw	r3,4(r16)
 4026014:	00bfff04 	movi	r2,-4
 4026018:	1886703a 	and	r3,r3,r2
 402601c:	1c45c83a 	sub	r2,r3,r17
 4026020:	1c400236 	bltu	r3,r17,402602c <_malloc_r+0x4a8>
 4026024:	00c003c4 	movi	r3,15
 4026028:	18800416 	blt	r3,r2,402603c <_malloc_r+0x4b8>
 402602c:	9009883a 	mov	r4,r18
 4026030:	402dcb80 	call	402dcb8 <__malloc_unlock>
 4026034:	0005883a 	mov	r2,zero
 4026038:	003f7b06 	br	4025e28 <__alt_data_end+0xfffe5e28>
 402603c:	88c00054 	ori	r3,r17,1
 4026040:	80c00115 	stw	r3,4(r16)
 4026044:	8463883a 	add	r17,r16,r17
 4026048:	10800054 	ori	r2,r2,1
 402604c:	9c400215 	stw	r17,8(r19)
 4026050:	88800115 	stw	r2,4(r17)
 4026054:	9009883a 	mov	r4,r18
 4026058:	402dcb80 	call	402dcb8 <__malloc_unlock>
 402605c:	80800204 	addi	r2,r16,8
 4026060:	003f7106 	br	4025e28 <__alt_data_end+0xfffe5e28>
 4026064:	00c00504 	movi	r3,20
 4026068:	18804a2e 	bgeu	r3,r2,4026194 <_malloc_r+0x610>
 402606c:	00c01504 	movi	r3,84
 4026070:	18806e36 	bltu	r3,r2,402622c <_malloc_r+0x6a8>
 4026074:	8804d33a 	srli	r2,r17,12
 4026078:	12001bc4 	addi	r8,r2,111
 402607c:	11c01b84 	addi	r7,r2,110
 4026080:	4209883a 	add	r4,r8,r8
 4026084:	003edd06 	br	4025bfc <__alt_data_end+0xfffe5bfc>
 4026088:	3804d27a 	srli	r2,r7,9
 402608c:	00c00104 	movi	r3,4
 4026090:	1880442e 	bgeu	r3,r2,40261a4 <_malloc_r+0x620>
 4026094:	00c00504 	movi	r3,20
 4026098:	18808136 	bltu	r3,r2,40262a0 <_malloc_r+0x71c>
 402609c:	11401704 	addi	r5,r2,92
 40260a0:	10c016c4 	addi	r3,r2,91
 40260a4:	294b883a 	add	r5,r5,r5
 40260a8:	294b883a 	add	r5,r5,r5
 40260ac:	294b883a 	add	r5,r5,r5
 40260b0:	994b883a 	add	r5,r19,r5
 40260b4:	28800017 	ldw	r2,0(r5)
 40260b8:	018100f4 	movhi	r6,1027
 40260bc:	297ffe04 	addi	r5,r5,-8
 40260c0:	3186c304 	addi	r6,r6,6924
 40260c4:	28806526 	beq	r5,r2,402625c <_malloc_r+0x6d8>
 40260c8:	01bfff04 	movi	r6,-4
 40260cc:	10c00117 	ldw	r3,4(r2)
 40260d0:	1986703a 	and	r3,r3,r6
 40260d4:	38c0022e 	bgeu	r7,r3,40260e0 <_malloc_r+0x55c>
 40260d8:	10800217 	ldw	r2,8(r2)
 40260dc:	28bffb1e 	bne	r5,r2,40260cc <__alt_data_end+0xfffe60cc>
 40260e0:	11400317 	ldw	r5,12(r2)
 40260e4:	98c00117 	ldw	r3,4(r19)
 40260e8:	81400315 	stw	r5,12(r16)
 40260ec:	80800215 	stw	r2,8(r16)
 40260f0:	2c000215 	stw	r16,8(r5)
 40260f4:	14000315 	stw	r16,12(r2)
 40260f8:	003ef806 	br	4025cdc <__alt_data_end+0xfffe5cdc>
 40260fc:	88c00054 	ori	r3,r17,1
 4026100:	80c00115 	stw	r3,4(r16)
 4026104:	8463883a 	add	r17,r16,r17
 4026108:	34400515 	stw	r17,20(r6)
 402610c:	34400415 	stw	r17,16(r6)
 4026110:	10c00054 	ori	r3,r2,1
 4026114:	8a000315 	stw	r8,12(r17)
 4026118:	8a000215 	stw	r8,8(r17)
 402611c:	88c00115 	stw	r3,4(r17)
 4026120:	88a3883a 	add	r17,r17,r2
 4026124:	88800015 	stw	r2,0(r17)
 4026128:	9009883a 	mov	r4,r18
 402612c:	402dcb80 	call	402dcb8 <__malloc_unlock>
 4026130:	80800204 	addi	r2,r16,8
 4026134:	003f3c06 	br	4025e28 <__alt_data_end+0xfffe5e28>
 4026138:	30c00117 	ldw	r3,4(r6)
 402613c:	003ee706 	br	4025cdc <__alt_data_end+0xfffe5cdc>
 4026140:	5ac00044 	addi	r11,r11,1
 4026144:	588000cc 	andi	r2,r11,3
 4026148:	31800204 	addi	r6,r6,8
 402614c:	103efd1e 	bne	r2,zero,4025d44 <__alt_data_end+0xfffe5d44>
 4026150:	00002406 	br	40261e4 <_malloc_r+0x660>
 4026154:	14000317 	ldw	r16,12(r2)
 4026158:	143f251e 	bne	r2,r16,4025df0 <__alt_data_end+0xfffe5df0>
 402615c:	21000084 	addi	r4,r4,2
 4026160:	003ebc06 	br	4025c54 <__alt_data_end+0xfffe5c54>
 4026164:	8085883a 	add	r2,r16,r2
 4026168:	10c00117 	ldw	r3,4(r2)
 402616c:	81000317 	ldw	r4,12(r16)
 4026170:	81400217 	ldw	r5,8(r16)
 4026174:	18c00054 	ori	r3,r3,1
 4026178:	10c00115 	stw	r3,4(r2)
 402617c:	29000315 	stw	r4,12(r5)
 4026180:	21400215 	stw	r5,8(r4)
 4026184:	9009883a 	mov	r4,r18
 4026188:	402dcb80 	call	402dcb8 <__malloc_unlock>
 402618c:	80800204 	addi	r2,r16,8
 4026190:	003f2506 	br	4025e28 <__alt_data_end+0xfffe5e28>
 4026194:	12001704 	addi	r8,r2,92
 4026198:	11c016c4 	addi	r7,r2,91
 402619c:	4209883a 	add	r4,r8,r8
 40261a0:	003e9606 	br	4025bfc <__alt_data_end+0xfffe5bfc>
 40261a4:	3804d1ba 	srli	r2,r7,6
 40261a8:	11400e44 	addi	r5,r2,57
 40261ac:	10c00e04 	addi	r3,r2,56
 40261b0:	294b883a 	add	r5,r5,r5
 40261b4:	003fbc06 	br	40260a8 <__alt_data_end+0xfffe60a8>
 40261b8:	84ff5926 	beq	r16,r19,4025f20 <__alt_data_end+0xfffe5f20>
 40261bc:	008100f4 	movhi	r2,1027
 40261c0:	1086c304 	addi	r2,r2,6924
 40261c4:	14000217 	ldw	r16,8(r2)
 40261c8:	00bfff04 	movi	r2,-4
 40261cc:	80c00117 	ldw	r3,4(r16)
 40261d0:	1886703a 	and	r3,r3,r2
 40261d4:	003f9106 	br	402601c <__alt_data_end+0xfffe601c>
 40261d8:	60800217 	ldw	r2,8(r12)
 40261dc:	213fffc4 	addi	r4,r4,-1
 40261e0:	1300651e 	bne	r2,r12,4026378 <_malloc_r+0x7f4>
 40261e4:	208000cc 	andi	r2,r4,3
 40261e8:	633ffe04 	addi	r12,r12,-8
 40261ec:	103ffa1e 	bne	r2,zero,40261d8 <__alt_data_end+0xfffe61d8>
 40261f0:	98800117 	ldw	r2,4(r19)
 40261f4:	0146303a 	nor	r3,zero,r5
 40261f8:	1884703a 	and	r2,r3,r2
 40261fc:	98800115 	stw	r2,4(r19)
 4026200:	294b883a 	add	r5,r5,r5
 4026204:	117f2836 	bltu	r2,r5,4025ea8 <__alt_data_end+0xfffe5ea8>
 4026208:	283f2726 	beq	r5,zero,4025ea8 <__alt_data_end+0xfffe5ea8>
 402620c:	2886703a 	and	r3,r5,r2
 4026210:	5809883a 	mov	r4,r11
 4026214:	183ec31e 	bne	r3,zero,4025d24 <__alt_data_end+0xfffe5d24>
 4026218:	294b883a 	add	r5,r5,r5
 402621c:	2886703a 	and	r3,r5,r2
 4026220:	21000104 	addi	r4,r4,4
 4026224:	183ffc26 	beq	r3,zero,4026218 <__alt_data_end+0xfffe6218>
 4026228:	003ebe06 	br	4025d24 <__alt_data_end+0xfffe5d24>
 402622c:	00c05504 	movi	r3,340
 4026230:	18801236 	bltu	r3,r2,402627c <_malloc_r+0x6f8>
 4026234:	8804d3fa 	srli	r2,r17,15
 4026238:	12001e04 	addi	r8,r2,120
 402623c:	11c01dc4 	addi	r7,r2,119
 4026240:	4209883a 	add	r4,r8,r8
 4026244:	003e6d06 	br	4025bfc <__alt_data_end+0xfffe5bfc>
 4026248:	00c40004 	movi	r3,4096
 402624c:	003f4606 	br	4025f68 <__alt_data_end+0xfffe5f68>
 4026250:	00800044 	movi	r2,1
 4026254:	a0800115 	stw	r2,4(r20)
 4026258:	003f7406 	br	402602c <__alt_data_end+0xfffe602c>
 402625c:	1805d0ba 	srai	r2,r3,2
 4026260:	01c00044 	movi	r7,1
 4026264:	30c00117 	ldw	r3,4(r6)
 4026268:	388e983a 	sll	r7,r7,r2
 402626c:	2805883a 	mov	r2,r5
 4026270:	38c6b03a 	or	r3,r7,r3
 4026274:	30c00115 	stw	r3,4(r6)
 4026278:	003f9b06 	br	40260e8 <__alt_data_end+0xfffe60e8>
 402627c:	00c15504 	movi	r3,1364
 4026280:	18801a36 	bltu	r3,r2,40262ec <_malloc_r+0x768>
 4026284:	8804d4ba 	srli	r2,r17,18
 4026288:	12001f44 	addi	r8,r2,125
 402628c:	11c01f04 	addi	r7,r2,124
 4026290:	4209883a 	add	r4,r8,r8
 4026294:	003e5906 	br	4025bfc <__alt_data_end+0xfffe5bfc>
 4026298:	ad400404 	addi	r21,r21,16
 402629c:	003f1706 	br	4025efc <__alt_data_end+0xfffe5efc>
 40262a0:	00c01504 	movi	r3,84
 40262a4:	18802336 	bltu	r3,r2,4026334 <_malloc_r+0x7b0>
 40262a8:	3804d33a 	srli	r2,r7,12
 40262ac:	11401bc4 	addi	r5,r2,111
 40262b0:	10c01b84 	addi	r3,r2,110
 40262b4:	294b883a 	add	r5,r5,r5
 40262b8:	003f7b06 	br	40260a8 <__alt_data_end+0xfffe60a8>
 40262bc:	9c000217 	ldw	r16,8(r19)
 40262c0:	00bfff04 	movi	r2,-4
 40262c4:	80c00117 	ldw	r3,4(r16)
 40262c8:	1886703a 	and	r3,r3,r2
 40262cc:	003f5306 	br	402601c <__alt_data_end+0xfffe601c>
 40262d0:	3083ffcc 	andi	r2,r6,4095
 40262d4:	103f181e 	bne	r2,zero,4025f38 <__alt_data_end+0xfffe5f38>
 40262d8:	99000217 	ldw	r4,8(r19)
 40262dc:	b545883a 	add	r2,r22,r21
 40262e0:	10800054 	ori	r2,r2,1
 40262e4:	20800115 	stw	r2,4(r4)
 40262e8:	003f3e06 	br	4025fe4 <__alt_data_end+0xfffe5fe4>
 40262ec:	01003f84 	movi	r4,254
 40262f0:	02001fc4 	movi	r8,127
 40262f4:	01c01f84 	movi	r7,126
 40262f8:	003e4006 	br	4025bfc <__alt_data_end+0xfffe5bfc>
 40262fc:	008100f4 	movhi	r2,1027
 4026300:	108c7604 	addi	r2,r2,12760
 4026304:	15000015 	stw	r20,0(r2)
 4026308:	003f1106 	br	4025f50 <__alt_data_end+0xfffe5f50>
 402630c:	00800044 	movi	r2,1
 4026310:	002b883a 	mov	r21,zero
 4026314:	003f1f06 	br	4025f94 <__alt_data_end+0xfffe5f94>
 4026318:	81400204 	addi	r5,r16,8
 402631c:	9009883a 	mov	r4,r18
 4026320:	4024f980 	call	4024f98 <_free_r>
 4026324:	008100f4 	movhi	r2,1027
 4026328:	10938104 	addi	r2,r2,19972
 402632c:	10c00017 	ldw	r3,0(r2)
 4026330:	003f2c06 	br	4025fe4 <__alt_data_end+0xfffe5fe4>
 4026334:	00c05504 	movi	r3,340
 4026338:	18800536 	bltu	r3,r2,4026350 <_malloc_r+0x7cc>
 402633c:	3804d3fa 	srli	r2,r7,15
 4026340:	11401e04 	addi	r5,r2,120
 4026344:	10c01dc4 	addi	r3,r2,119
 4026348:	294b883a 	add	r5,r5,r5
 402634c:	003f5606 	br	40260a8 <__alt_data_end+0xfffe60a8>
 4026350:	00c15504 	movi	r3,1364
 4026354:	18800536 	bltu	r3,r2,402636c <_malloc_r+0x7e8>
 4026358:	3804d4ba 	srli	r2,r7,18
 402635c:	11401f44 	addi	r5,r2,125
 4026360:	10c01f04 	addi	r3,r2,124
 4026364:	294b883a 	add	r5,r5,r5
 4026368:	003f4f06 	br	40260a8 <__alt_data_end+0xfffe60a8>
 402636c:	01403f84 	movi	r5,254
 4026370:	00c01f84 	movi	r3,126
 4026374:	003f4c06 	br	40260a8 <__alt_data_end+0xfffe60a8>
 4026378:	98800117 	ldw	r2,4(r19)
 402637c:	003fa006 	br	4026200 <__alt_data_end+0xfffe6200>
 4026380:	8808d0fa 	srli	r4,r17,3
 4026384:	20800044 	addi	r2,r4,1
 4026388:	1085883a 	add	r2,r2,r2
 402638c:	003e9006 	br	4025dd0 <__alt_data_end+0xfffe5dd0>

04026390 <memchr>:
 4026390:	208000cc 	andi	r2,r4,3
 4026394:	280f883a 	mov	r7,r5
 4026398:	10003426 	beq	r2,zero,402646c <memchr+0xdc>
 402639c:	30bfffc4 	addi	r2,r6,-1
 40263a0:	30001a26 	beq	r6,zero,402640c <memchr+0x7c>
 40263a4:	20c00003 	ldbu	r3,0(r4)
 40263a8:	29803fcc 	andi	r6,r5,255
 40263ac:	30c0051e 	bne	r6,r3,40263c4 <memchr+0x34>
 40263b0:	00001806 	br	4026414 <memchr+0x84>
 40263b4:	10001526 	beq	r2,zero,402640c <memchr+0x7c>
 40263b8:	20c00003 	ldbu	r3,0(r4)
 40263bc:	10bfffc4 	addi	r2,r2,-1
 40263c0:	30c01426 	beq	r6,r3,4026414 <memchr+0x84>
 40263c4:	21000044 	addi	r4,r4,1
 40263c8:	20c000cc 	andi	r3,r4,3
 40263cc:	183ff91e 	bne	r3,zero,40263b4 <__alt_data_end+0xfffe63b4>
 40263d0:	020000c4 	movi	r8,3
 40263d4:	40801136 	bltu	r8,r2,402641c <memchr+0x8c>
 40263d8:	10000c26 	beq	r2,zero,402640c <memchr+0x7c>
 40263dc:	20c00003 	ldbu	r3,0(r4)
 40263e0:	29403fcc 	andi	r5,r5,255
 40263e4:	28c00b26 	beq	r5,r3,4026414 <memchr+0x84>
 40263e8:	20c00044 	addi	r3,r4,1
 40263ec:	39803fcc 	andi	r6,r7,255
 40263f0:	2089883a 	add	r4,r4,r2
 40263f4:	00000306 	br	4026404 <memchr+0x74>
 40263f8:	18c00044 	addi	r3,r3,1
 40263fc:	197fffc3 	ldbu	r5,-1(r3)
 4026400:	31400526 	beq	r6,r5,4026418 <memchr+0x88>
 4026404:	1805883a 	mov	r2,r3
 4026408:	20fffb1e 	bne	r4,r3,40263f8 <__alt_data_end+0xfffe63f8>
 402640c:	0005883a 	mov	r2,zero
 4026410:	f800283a 	ret
 4026414:	2005883a 	mov	r2,r4
 4026418:	f800283a 	ret
 402641c:	28c03fcc 	andi	r3,r5,255
 4026420:	1812923a 	slli	r9,r3,8
 4026424:	02ffbff4 	movhi	r11,65279
 4026428:	02a02074 	movhi	r10,32897
 402642c:	48d2b03a 	or	r9,r9,r3
 4026430:	4806943a 	slli	r3,r9,16
 4026434:	5affbfc4 	addi	r11,r11,-257
 4026438:	52a02004 	addi	r10,r10,-32640
 402643c:	48d2b03a 	or	r9,r9,r3
 4026440:	20c00017 	ldw	r3,0(r4)
 4026444:	48c6f03a 	xor	r3,r9,r3
 4026448:	1acd883a 	add	r6,r3,r11
 402644c:	00c6303a 	nor	r3,zero,r3
 4026450:	30c6703a 	and	r3,r6,r3
 4026454:	1a86703a 	and	r3,r3,r10
 4026458:	183fe01e 	bne	r3,zero,40263dc <__alt_data_end+0xfffe63dc>
 402645c:	10bfff04 	addi	r2,r2,-4
 4026460:	21000104 	addi	r4,r4,4
 4026464:	40bff636 	bltu	r8,r2,4026440 <__alt_data_end+0xfffe6440>
 4026468:	003fdb06 	br	40263d8 <__alt_data_end+0xfffe63d8>
 402646c:	3005883a 	mov	r2,r6
 4026470:	003fd706 	br	40263d0 <__alt_data_end+0xfffe63d0>

04026474 <memcpy>:
 4026474:	defffd04 	addi	sp,sp,-12
 4026478:	dfc00215 	stw	ra,8(sp)
 402647c:	dc400115 	stw	r17,4(sp)
 4026480:	dc000015 	stw	r16,0(sp)
 4026484:	00c003c4 	movi	r3,15
 4026488:	2005883a 	mov	r2,r4
 402648c:	1980452e 	bgeu	r3,r6,40265a4 <memcpy+0x130>
 4026490:	2906b03a 	or	r3,r5,r4
 4026494:	18c000cc 	andi	r3,r3,3
 4026498:	1800441e 	bne	r3,zero,40265ac <memcpy+0x138>
 402649c:	347ffc04 	addi	r17,r6,-16
 40264a0:	8822d13a 	srli	r17,r17,4
 40264a4:	28c00104 	addi	r3,r5,4
 40264a8:	23400104 	addi	r13,r4,4
 40264ac:	8820913a 	slli	r16,r17,4
 40264b0:	2b000204 	addi	r12,r5,8
 40264b4:	22c00204 	addi	r11,r4,8
 40264b8:	84000504 	addi	r16,r16,20
 40264bc:	2a800304 	addi	r10,r5,12
 40264c0:	22400304 	addi	r9,r4,12
 40264c4:	2c21883a 	add	r16,r5,r16
 40264c8:	2811883a 	mov	r8,r5
 40264cc:	200f883a 	mov	r7,r4
 40264d0:	41000017 	ldw	r4,0(r8)
 40264d4:	1fc00017 	ldw	ra,0(r3)
 40264d8:	63c00017 	ldw	r15,0(r12)
 40264dc:	39000015 	stw	r4,0(r7)
 40264e0:	53800017 	ldw	r14,0(r10)
 40264e4:	6fc00015 	stw	ra,0(r13)
 40264e8:	5bc00015 	stw	r15,0(r11)
 40264ec:	4b800015 	stw	r14,0(r9)
 40264f0:	18c00404 	addi	r3,r3,16
 40264f4:	39c00404 	addi	r7,r7,16
 40264f8:	42000404 	addi	r8,r8,16
 40264fc:	6b400404 	addi	r13,r13,16
 4026500:	63000404 	addi	r12,r12,16
 4026504:	5ac00404 	addi	r11,r11,16
 4026508:	52800404 	addi	r10,r10,16
 402650c:	4a400404 	addi	r9,r9,16
 4026510:	1c3fef1e 	bne	r3,r16,40264d0 <__alt_data_end+0xfffe64d0>
 4026514:	89c00044 	addi	r7,r17,1
 4026518:	380e913a 	slli	r7,r7,4
 402651c:	310003cc 	andi	r4,r6,15
 4026520:	02c000c4 	movi	r11,3
 4026524:	11c7883a 	add	r3,r2,r7
 4026528:	29cb883a 	add	r5,r5,r7
 402652c:	5900212e 	bgeu	r11,r4,40265b4 <memcpy+0x140>
 4026530:	1813883a 	mov	r9,r3
 4026534:	2811883a 	mov	r8,r5
 4026538:	200f883a 	mov	r7,r4
 402653c:	42800017 	ldw	r10,0(r8)
 4026540:	4a400104 	addi	r9,r9,4
 4026544:	39ffff04 	addi	r7,r7,-4
 4026548:	4abfff15 	stw	r10,-4(r9)
 402654c:	42000104 	addi	r8,r8,4
 4026550:	59fffa36 	bltu	r11,r7,402653c <__alt_data_end+0xfffe653c>
 4026554:	213fff04 	addi	r4,r4,-4
 4026558:	2008d0ba 	srli	r4,r4,2
 402655c:	318000cc 	andi	r6,r6,3
 4026560:	21000044 	addi	r4,r4,1
 4026564:	2109883a 	add	r4,r4,r4
 4026568:	2109883a 	add	r4,r4,r4
 402656c:	1907883a 	add	r3,r3,r4
 4026570:	290b883a 	add	r5,r5,r4
 4026574:	30000626 	beq	r6,zero,4026590 <memcpy+0x11c>
 4026578:	198d883a 	add	r6,r3,r6
 402657c:	29c00003 	ldbu	r7,0(r5)
 4026580:	18c00044 	addi	r3,r3,1
 4026584:	29400044 	addi	r5,r5,1
 4026588:	19ffffc5 	stb	r7,-1(r3)
 402658c:	19bffb1e 	bne	r3,r6,402657c <__alt_data_end+0xfffe657c>
 4026590:	dfc00217 	ldw	ra,8(sp)
 4026594:	dc400117 	ldw	r17,4(sp)
 4026598:	dc000017 	ldw	r16,0(sp)
 402659c:	dec00304 	addi	sp,sp,12
 40265a0:	f800283a 	ret
 40265a4:	2007883a 	mov	r3,r4
 40265a8:	003ff206 	br	4026574 <__alt_data_end+0xfffe6574>
 40265ac:	2007883a 	mov	r3,r4
 40265b0:	003ff106 	br	4026578 <__alt_data_end+0xfffe6578>
 40265b4:	200d883a 	mov	r6,r4
 40265b8:	003fee06 	br	4026574 <__alt_data_end+0xfffe6574>

040265bc <memmove>:
 40265bc:	2005883a 	mov	r2,r4
 40265c0:	29000b2e 	bgeu	r5,r4,40265f0 <memmove+0x34>
 40265c4:	298f883a 	add	r7,r5,r6
 40265c8:	21c0092e 	bgeu	r4,r7,40265f0 <memmove+0x34>
 40265cc:	2187883a 	add	r3,r4,r6
 40265d0:	198bc83a 	sub	r5,r3,r6
 40265d4:	30004826 	beq	r6,zero,40266f8 <memmove+0x13c>
 40265d8:	39ffffc4 	addi	r7,r7,-1
 40265dc:	39000003 	ldbu	r4,0(r7)
 40265e0:	18ffffc4 	addi	r3,r3,-1
 40265e4:	19000005 	stb	r4,0(r3)
 40265e8:	28fffb1e 	bne	r5,r3,40265d8 <__alt_data_end+0xfffe65d8>
 40265ec:	f800283a 	ret
 40265f0:	00c003c4 	movi	r3,15
 40265f4:	1980412e 	bgeu	r3,r6,40266fc <memmove+0x140>
 40265f8:	2886b03a 	or	r3,r5,r2
 40265fc:	18c000cc 	andi	r3,r3,3
 4026600:	1800401e 	bne	r3,zero,4026704 <memmove+0x148>
 4026604:	33fffc04 	addi	r15,r6,-16
 4026608:	781ed13a 	srli	r15,r15,4
 402660c:	28c00104 	addi	r3,r5,4
 4026610:	13400104 	addi	r13,r2,4
 4026614:	781c913a 	slli	r14,r15,4
 4026618:	2b000204 	addi	r12,r5,8
 402661c:	12c00204 	addi	r11,r2,8
 4026620:	73800504 	addi	r14,r14,20
 4026624:	2a800304 	addi	r10,r5,12
 4026628:	12400304 	addi	r9,r2,12
 402662c:	2b9d883a 	add	r14,r5,r14
 4026630:	2811883a 	mov	r8,r5
 4026634:	100f883a 	mov	r7,r2
 4026638:	41000017 	ldw	r4,0(r8)
 402663c:	39c00404 	addi	r7,r7,16
 4026640:	18c00404 	addi	r3,r3,16
 4026644:	393ffc15 	stw	r4,-16(r7)
 4026648:	193ffc17 	ldw	r4,-16(r3)
 402664c:	6b400404 	addi	r13,r13,16
 4026650:	5ac00404 	addi	r11,r11,16
 4026654:	693ffc15 	stw	r4,-16(r13)
 4026658:	61000017 	ldw	r4,0(r12)
 402665c:	4a400404 	addi	r9,r9,16
 4026660:	42000404 	addi	r8,r8,16
 4026664:	593ffc15 	stw	r4,-16(r11)
 4026668:	51000017 	ldw	r4,0(r10)
 402666c:	63000404 	addi	r12,r12,16
 4026670:	52800404 	addi	r10,r10,16
 4026674:	493ffc15 	stw	r4,-16(r9)
 4026678:	1bbfef1e 	bne	r3,r14,4026638 <__alt_data_end+0xfffe6638>
 402667c:	79000044 	addi	r4,r15,1
 4026680:	2008913a 	slli	r4,r4,4
 4026684:	328003cc 	andi	r10,r6,15
 4026688:	02c000c4 	movi	r11,3
 402668c:	1107883a 	add	r3,r2,r4
 4026690:	290b883a 	add	r5,r5,r4
 4026694:	5a801e2e 	bgeu	r11,r10,4026710 <memmove+0x154>
 4026698:	1813883a 	mov	r9,r3
 402669c:	2811883a 	mov	r8,r5
 40266a0:	500f883a 	mov	r7,r10
 40266a4:	41000017 	ldw	r4,0(r8)
 40266a8:	4a400104 	addi	r9,r9,4
 40266ac:	39ffff04 	addi	r7,r7,-4
 40266b0:	493fff15 	stw	r4,-4(r9)
 40266b4:	42000104 	addi	r8,r8,4
 40266b8:	59fffa36 	bltu	r11,r7,40266a4 <__alt_data_end+0xfffe66a4>
 40266bc:	513fff04 	addi	r4,r10,-4
 40266c0:	2008d0ba 	srli	r4,r4,2
 40266c4:	318000cc 	andi	r6,r6,3
 40266c8:	21000044 	addi	r4,r4,1
 40266cc:	2109883a 	add	r4,r4,r4
 40266d0:	2109883a 	add	r4,r4,r4
 40266d4:	1907883a 	add	r3,r3,r4
 40266d8:	290b883a 	add	r5,r5,r4
 40266dc:	30000b26 	beq	r6,zero,402670c <memmove+0x150>
 40266e0:	198d883a 	add	r6,r3,r6
 40266e4:	29c00003 	ldbu	r7,0(r5)
 40266e8:	18c00044 	addi	r3,r3,1
 40266ec:	29400044 	addi	r5,r5,1
 40266f0:	19ffffc5 	stb	r7,-1(r3)
 40266f4:	19bffb1e 	bne	r3,r6,40266e4 <__alt_data_end+0xfffe66e4>
 40266f8:	f800283a 	ret
 40266fc:	1007883a 	mov	r3,r2
 4026700:	003ff606 	br	40266dc <__alt_data_end+0xfffe66dc>
 4026704:	1007883a 	mov	r3,r2
 4026708:	003ff506 	br	40266e0 <__alt_data_end+0xfffe66e0>
 402670c:	f800283a 	ret
 4026710:	500d883a 	mov	r6,r10
 4026714:	003ff106 	br	40266dc <__alt_data_end+0xfffe66dc>

04026718 <memset>:
 4026718:	20c000cc 	andi	r3,r4,3
 402671c:	2005883a 	mov	r2,r4
 4026720:	18004426 	beq	r3,zero,4026834 <memset+0x11c>
 4026724:	31ffffc4 	addi	r7,r6,-1
 4026728:	30004026 	beq	r6,zero,402682c <memset+0x114>
 402672c:	2813883a 	mov	r9,r5
 4026730:	200d883a 	mov	r6,r4
 4026734:	2007883a 	mov	r3,r4
 4026738:	00000406 	br	402674c <memset+0x34>
 402673c:	3a3fffc4 	addi	r8,r7,-1
 4026740:	31800044 	addi	r6,r6,1
 4026744:	38003926 	beq	r7,zero,402682c <memset+0x114>
 4026748:	400f883a 	mov	r7,r8
 402674c:	18c00044 	addi	r3,r3,1
 4026750:	32400005 	stb	r9,0(r6)
 4026754:	1a0000cc 	andi	r8,r3,3
 4026758:	403ff81e 	bne	r8,zero,402673c <__alt_data_end+0xfffe673c>
 402675c:	010000c4 	movi	r4,3
 4026760:	21c02d2e 	bgeu	r4,r7,4026818 <memset+0x100>
 4026764:	29003fcc 	andi	r4,r5,255
 4026768:	200c923a 	slli	r6,r4,8
 402676c:	3108b03a 	or	r4,r6,r4
 4026770:	200c943a 	slli	r6,r4,16
 4026774:	218cb03a 	or	r6,r4,r6
 4026778:	010003c4 	movi	r4,15
 402677c:	21c0182e 	bgeu	r4,r7,40267e0 <memset+0xc8>
 4026780:	3b3ffc04 	addi	r12,r7,-16
 4026784:	6018d13a 	srli	r12,r12,4
 4026788:	1a000104 	addi	r8,r3,4
 402678c:	1ac00204 	addi	r11,r3,8
 4026790:	6008913a 	slli	r4,r12,4
 4026794:	1a800304 	addi	r10,r3,12
 4026798:	1813883a 	mov	r9,r3
 402679c:	21000504 	addi	r4,r4,20
 40267a0:	1909883a 	add	r4,r3,r4
 40267a4:	49800015 	stw	r6,0(r9)
 40267a8:	41800015 	stw	r6,0(r8)
 40267ac:	59800015 	stw	r6,0(r11)
 40267b0:	51800015 	stw	r6,0(r10)
 40267b4:	42000404 	addi	r8,r8,16
 40267b8:	4a400404 	addi	r9,r9,16
 40267bc:	5ac00404 	addi	r11,r11,16
 40267c0:	52800404 	addi	r10,r10,16
 40267c4:	413ff71e 	bne	r8,r4,40267a4 <__alt_data_end+0xfffe67a4>
 40267c8:	63000044 	addi	r12,r12,1
 40267cc:	6018913a 	slli	r12,r12,4
 40267d0:	39c003cc 	andi	r7,r7,15
 40267d4:	010000c4 	movi	r4,3
 40267d8:	1b07883a 	add	r3,r3,r12
 40267dc:	21c00e2e 	bgeu	r4,r7,4026818 <memset+0x100>
 40267e0:	1813883a 	mov	r9,r3
 40267e4:	3811883a 	mov	r8,r7
 40267e8:	010000c4 	movi	r4,3
 40267ec:	49800015 	stw	r6,0(r9)
 40267f0:	423fff04 	addi	r8,r8,-4
 40267f4:	4a400104 	addi	r9,r9,4
 40267f8:	223ffc36 	bltu	r4,r8,40267ec <__alt_data_end+0xfffe67ec>
 40267fc:	393fff04 	addi	r4,r7,-4
 4026800:	2008d0ba 	srli	r4,r4,2
 4026804:	39c000cc 	andi	r7,r7,3
 4026808:	21000044 	addi	r4,r4,1
 402680c:	2109883a 	add	r4,r4,r4
 4026810:	2109883a 	add	r4,r4,r4
 4026814:	1907883a 	add	r3,r3,r4
 4026818:	38000526 	beq	r7,zero,4026830 <memset+0x118>
 402681c:	19cf883a 	add	r7,r3,r7
 4026820:	19400005 	stb	r5,0(r3)
 4026824:	18c00044 	addi	r3,r3,1
 4026828:	38fffd1e 	bne	r7,r3,4026820 <__alt_data_end+0xfffe6820>
 402682c:	f800283a 	ret
 4026830:	f800283a 	ret
 4026834:	2007883a 	mov	r3,r4
 4026838:	300f883a 	mov	r7,r6
 402683c:	003fc706 	br	402675c <__alt_data_end+0xfffe675c>

04026840 <_Balloc>:
 4026840:	20801317 	ldw	r2,76(r4)
 4026844:	defffc04 	addi	sp,sp,-16
 4026848:	dc400115 	stw	r17,4(sp)
 402684c:	dc000015 	stw	r16,0(sp)
 4026850:	dfc00315 	stw	ra,12(sp)
 4026854:	dc800215 	stw	r18,8(sp)
 4026858:	2023883a 	mov	r17,r4
 402685c:	2821883a 	mov	r16,r5
 4026860:	10000f26 	beq	r2,zero,40268a0 <_Balloc+0x60>
 4026864:	8407883a 	add	r3,r16,r16
 4026868:	18c7883a 	add	r3,r3,r3
 402686c:	10c7883a 	add	r3,r2,r3
 4026870:	18800017 	ldw	r2,0(r3)
 4026874:	10001126 	beq	r2,zero,40268bc <_Balloc+0x7c>
 4026878:	11000017 	ldw	r4,0(r2)
 402687c:	19000015 	stw	r4,0(r3)
 4026880:	10000415 	stw	zero,16(r2)
 4026884:	10000315 	stw	zero,12(r2)
 4026888:	dfc00317 	ldw	ra,12(sp)
 402688c:	dc800217 	ldw	r18,8(sp)
 4026890:	dc400117 	ldw	r17,4(sp)
 4026894:	dc000017 	ldw	r16,0(sp)
 4026898:	dec00404 	addi	sp,sp,16
 402689c:	f800283a 	ret
 40268a0:	01800844 	movi	r6,33
 40268a4:	01400104 	movi	r5,4
 40268a8:	4029a3c0 	call	4029a3c <_calloc_r>
 40268ac:	88801315 	stw	r2,76(r17)
 40268b0:	103fec1e 	bne	r2,zero,4026864 <__alt_data_end+0xfffe6864>
 40268b4:	0005883a 	mov	r2,zero
 40268b8:	003ff306 	br	4026888 <__alt_data_end+0xfffe6888>
 40268bc:	01400044 	movi	r5,1
 40268c0:	2c24983a 	sll	r18,r5,r16
 40268c4:	8809883a 	mov	r4,r17
 40268c8:	91800144 	addi	r6,r18,5
 40268cc:	318d883a 	add	r6,r6,r6
 40268d0:	318d883a 	add	r6,r6,r6
 40268d4:	4029a3c0 	call	4029a3c <_calloc_r>
 40268d8:	103ff626 	beq	r2,zero,40268b4 <__alt_data_end+0xfffe68b4>
 40268dc:	14000115 	stw	r16,4(r2)
 40268e0:	14800215 	stw	r18,8(r2)
 40268e4:	003fe606 	br	4026880 <__alt_data_end+0xfffe6880>

040268e8 <_Bfree>:
 40268e8:	28000826 	beq	r5,zero,402690c <_Bfree+0x24>
 40268ec:	28c00117 	ldw	r3,4(r5)
 40268f0:	20801317 	ldw	r2,76(r4)
 40268f4:	18c7883a 	add	r3,r3,r3
 40268f8:	18c7883a 	add	r3,r3,r3
 40268fc:	10c5883a 	add	r2,r2,r3
 4026900:	10c00017 	ldw	r3,0(r2)
 4026904:	28c00015 	stw	r3,0(r5)
 4026908:	11400015 	stw	r5,0(r2)
 402690c:	f800283a 	ret

04026910 <__multadd>:
 4026910:	defffa04 	addi	sp,sp,-24
 4026914:	dc800315 	stw	r18,12(sp)
 4026918:	dc400215 	stw	r17,8(sp)
 402691c:	dc000115 	stw	r16,4(sp)
 4026920:	2823883a 	mov	r17,r5
 4026924:	2c000417 	ldw	r16,16(r5)
 4026928:	dfc00515 	stw	ra,20(sp)
 402692c:	dcc00415 	stw	r19,16(sp)
 4026930:	2025883a 	mov	r18,r4
 4026934:	29400504 	addi	r5,r5,20
 4026938:	0011883a 	mov	r8,zero
 402693c:	28c00017 	ldw	r3,0(r5)
 4026940:	29400104 	addi	r5,r5,4
 4026944:	42000044 	addi	r8,r8,1
 4026948:	18bfffcc 	andi	r2,r3,65535
 402694c:	1185383a 	mul	r2,r2,r6
 4026950:	1806d43a 	srli	r3,r3,16
 4026954:	11cf883a 	add	r7,r2,r7
 4026958:	3808d43a 	srli	r4,r7,16
 402695c:	1987383a 	mul	r3,r3,r6
 4026960:	38bfffcc 	andi	r2,r7,65535
 4026964:	1907883a 	add	r3,r3,r4
 4026968:	1808943a 	slli	r4,r3,16
 402696c:	180ed43a 	srli	r7,r3,16
 4026970:	2085883a 	add	r2,r4,r2
 4026974:	28bfff15 	stw	r2,-4(r5)
 4026978:	443ff016 	blt	r8,r16,402693c <__alt_data_end+0xfffe693c>
 402697c:	38000926 	beq	r7,zero,40269a4 <__multadd+0x94>
 4026980:	88800217 	ldw	r2,8(r17)
 4026984:	80800f0e 	bge	r16,r2,40269c4 <__multadd+0xb4>
 4026988:	80800144 	addi	r2,r16,5
 402698c:	1085883a 	add	r2,r2,r2
 4026990:	1085883a 	add	r2,r2,r2
 4026994:	8885883a 	add	r2,r17,r2
 4026998:	11c00015 	stw	r7,0(r2)
 402699c:	84000044 	addi	r16,r16,1
 40269a0:	8c000415 	stw	r16,16(r17)
 40269a4:	8805883a 	mov	r2,r17
 40269a8:	dfc00517 	ldw	ra,20(sp)
 40269ac:	dcc00417 	ldw	r19,16(sp)
 40269b0:	dc800317 	ldw	r18,12(sp)
 40269b4:	dc400217 	ldw	r17,8(sp)
 40269b8:	dc000117 	ldw	r16,4(sp)
 40269bc:	dec00604 	addi	sp,sp,24
 40269c0:	f800283a 	ret
 40269c4:	89400117 	ldw	r5,4(r17)
 40269c8:	9009883a 	mov	r4,r18
 40269cc:	d9c00015 	stw	r7,0(sp)
 40269d0:	29400044 	addi	r5,r5,1
 40269d4:	40268400 	call	4026840 <_Balloc>
 40269d8:	89800417 	ldw	r6,16(r17)
 40269dc:	89400304 	addi	r5,r17,12
 40269e0:	11000304 	addi	r4,r2,12
 40269e4:	31800084 	addi	r6,r6,2
 40269e8:	318d883a 	add	r6,r6,r6
 40269ec:	318d883a 	add	r6,r6,r6
 40269f0:	1027883a 	mov	r19,r2
 40269f4:	40264740 	call	4026474 <memcpy>
 40269f8:	d9c00017 	ldw	r7,0(sp)
 40269fc:	88000a26 	beq	r17,zero,4026a28 <__multadd+0x118>
 4026a00:	88c00117 	ldw	r3,4(r17)
 4026a04:	90801317 	ldw	r2,76(r18)
 4026a08:	18c7883a 	add	r3,r3,r3
 4026a0c:	18c7883a 	add	r3,r3,r3
 4026a10:	10c5883a 	add	r2,r2,r3
 4026a14:	10c00017 	ldw	r3,0(r2)
 4026a18:	88c00015 	stw	r3,0(r17)
 4026a1c:	14400015 	stw	r17,0(r2)
 4026a20:	9823883a 	mov	r17,r19
 4026a24:	003fd806 	br	4026988 <__alt_data_end+0xfffe6988>
 4026a28:	9823883a 	mov	r17,r19
 4026a2c:	003fd606 	br	4026988 <__alt_data_end+0xfffe6988>

04026a30 <__s2b>:
 4026a30:	defff904 	addi	sp,sp,-28
 4026a34:	dc400115 	stw	r17,4(sp)
 4026a38:	dc000015 	stw	r16,0(sp)
 4026a3c:	2023883a 	mov	r17,r4
 4026a40:	2821883a 	mov	r16,r5
 4026a44:	39000204 	addi	r4,r7,8
 4026a48:	01400244 	movi	r5,9
 4026a4c:	dcc00315 	stw	r19,12(sp)
 4026a50:	dc800215 	stw	r18,8(sp)
 4026a54:	dfc00615 	stw	ra,24(sp)
 4026a58:	dd400515 	stw	r21,20(sp)
 4026a5c:	dd000415 	stw	r20,16(sp)
 4026a60:	3825883a 	mov	r18,r7
 4026a64:	3027883a 	mov	r19,r6
 4026a68:	402ac140 	call	402ac14 <__divsi3>
 4026a6c:	00c00044 	movi	r3,1
 4026a70:	000b883a 	mov	r5,zero
 4026a74:	1880030e 	bge	r3,r2,4026a84 <__s2b+0x54>
 4026a78:	18c7883a 	add	r3,r3,r3
 4026a7c:	29400044 	addi	r5,r5,1
 4026a80:	18bffd16 	blt	r3,r2,4026a78 <__alt_data_end+0xfffe6a78>
 4026a84:	8809883a 	mov	r4,r17
 4026a88:	40268400 	call	4026840 <_Balloc>
 4026a8c:	d8c00717 	ldw	r3,28(sp)
 4026a90:	10c00515 	stw	r3,20(r2)
 4026a94:	00c00044 	movi	r3,1
 4026a98:	10c00415 	stw	r3,16(r2)
 4026a9c:	00c00244 	movi	r3,9
 4026aa0:	1cc0210e 	bge	r3,r19,4026b28 <__s2b+0xf8>
 4026aa4:	80eb883a 	add	r21,r16,r3
 4026aa8:	a829883a 	mov	r20,r21
 4026aac:	84e1883a 	add	r16,r16,r19
 4026ab0:	a1c00007 	ldb	r7,0(r20)
 4026ab4:	01800284 	movi	r6,10
 4026ab8:	a5000044 	addi	r20,r20,1
 4026abc:	100b883a 	mov	r5,r2
 4026ac0:	39fff404 	addi	r7,r7,-48
 4026ac4:	8809883a 	mov	r4,r17
 4026ac8:	40269100 	call	4026910 <__multadd>
 4026acc:	a43ff81e 	bne	r20,r16,4026ab0 <__alt_data_end+0xfffe6ab0>
 4026ad0:	ace1883a 	add	r16,r21,r19
 4026ad4:	843ffe04 	addi	r16,r16,-8
 4026ad8:	9c800a0e 	bge	r19,r18,4026b04 <__s2b+0xd4>
 4026adc:	94e5c83a 	sub	r18,r18,r19
 4026ae0:	84a5883a 	add	r18,r16,r18
 4026ae4:	81c00007 	ldb	r7,0(r16)
 4026ae8:	01800284 	movi	r6,10
 4026aec:	84000044 	addi	r16,r16,1
 4026af0:	100b883a 	mov	r5,r2
 4026af4:	39fff404 	addi	r7,r7,-48
 4026af8:	8809883a 	mov	r4,r17
 4026afc:	40269100 	call	4026910 <__multadd>
 4026b00:	84bff81e 	bne	r16,r18,4026ae4 <__alt_data_end+0xfffe6ae4>
 4026b04:	dfc00617 	ldw	ra,24(sp)
 4026b08:	dd400517 	ldw	r21,20(sp)
 4026b0c:	dd000417 	ldw	r20,16(sp)
 4026b10:	dcc00317 	ldw	r19,12(sp)
 4026b14:	dc800217 	ldw	r18,8(sp)
 4026b18:	dc400117 	ldw	r17,4(sp)
 4026b1c:	dc000017 	ldw	r16,0(sp)
 4026b20:	dec00704 	addi	sp,sp,28
 4026b24:	f800283a 	ret
 4026b28:	84000284 	addi	r16,r16,10
 4026b2c:	1827883a 	mov	r19,r3
 4026b30:	003fe906 	br	4026ad8 <__alt_data_end+0xfffe6ad8>

04026b34 <__hi0bits>:
 4026b34:	20bfffec 	andhi	r2,r4,65535
 4026b38:	1000141e 	bne	r2,zero,4026b8c <__hi0bits+0x58>
 4026b3c:	2008943a 	slli	r4,r4,16
 4026b40:	00800404 	movi	r2,16
 4026b44:	20ffc02c 	andhi	r3,r4,65280
 4026b48:	1800021e 	bne	r3,zero,4026b54 <__hi0bits+0x20>
 4026b4c:	2008923a 	slli	r4,r4,8
 4026b50:	10800204 	addi	r2,r2,8
 4026b54:	20fc002c 	andhi	r3,r4,61440
 4026b58:	1800021e 	bne	r3,zero,4026b64 <__hi0bits+0x30>
 4026b5c:	2008913a 	slli	r4,r4,4
 4026b60:	10800104 	addi	r2,r2,4
 4026b64:	20f0002c 	andhi	r3,r4,49152
 4026b68:	1800031e 	bne	r3,zero,4026b78 <__hi0bits+0x44>
 4026b6c:	2109883a 	add	r4,r4,r4
 4026b70:	10800084 	addi	r2,r2,2
 4026b74:	2109883a 	add	r4,r4,r4
 4026b78:	20000316 	blt	r4,zero,4026b88 <__hi0bits+0x54>
 4026b7c:	2110002c 	andhi	r4,r4,16384
 4026b80:	2000041e 	bne	r4,zero,4026b94 <__hi0bits+0x60>
 4026b84:	00800804 	movi	r2,32
 4026b88:	f800283a 	ret
 4026b8c:	0005883a 	mov	r2,zero
 4026b90:	003fec06 	br	4026b44 <__alt_data_end+0xfffe6b44>
 4026b94:	10800044 	addi	r2,r2,1
 4026b98:	f800283a 	ret

04026b9c <__lo0bits>:
 4026b9c:	20c00017 	ldw	r3,0(r4)
 4026ba0:	188001cc 	andi	r2,r3,7
 4026ba4:	10000826 	beq	r2,zero,4026bc8 <__lo0bits+0x2c>
 4026ba8:	1880004c 	andi	r2,r3,1
 4026bac:	1000211e 	bne	r2,zero,4026c34 <__lo0bits+0x98>
 4026bb0:	1880008c 	andi	r2,r3,2
 4026bb4:	1000211e 	bne	r2,zero,4026c3c <__lo0bits+0xa0>
 4026bb8:	1806d0ba 	srli	r3,r3,2
 4026bbc:	00800084 	movi	r2,2
 4026bc0:	20c00015 	stw	r3,0(r4)
 4026bc4:	f800283a 	ret
 4026bc8:	18bfffcc 	andi	r2,r3,65535
 4026bcc:	10001326 	beq	r2,zero,4026c1c <__lo0bits+0x80>
 4026bd0:	0005883a 	mov	r2,zero
 4026bd4:	19403fcc 	andi	r5,r3,255
 4026bd8:	2800021e 	bne	r5,zero,4026be4 <__lo0bits+0x48>
 4026bdc:	1806d23a 	srli	r3,r3,8
 4026be0:	10800204 	addi	r2,r2,8
 4026be4:	194003cc 	andi	r5,r3,15
 4026be8:	2800021e 	bne	r5,zero,4026bf4 <__lo0bits+0x58>
 4026bec:	1806d13a 	srli	r3,r3,4
 4026bf0:	10800104 	addi	r2,r2,4
 4026bf4:	194000cc 	andi	r5,r3,3
 4026bf8:	2800021e 	bne	r5,zero,4026c04 <__lo0bits+0x68>
 4026bfc:	1806d0ba 	srli	r3,r3,2
 4026c00:	10800084 	addi	r2,r2,2
 4026c04:	1940004c 	andi	r5,r3,1
 4026c08:	2800081e 	bne	r5,zero,4026c2c <__lo0bits+0x90>
 4026c0c:	1806d07a 	srli	r3,r3,1
 4026c10:	1800051e 	bne	r3,zero,4026c28 <__lo0bits+0x8c>
 4026c14:	00800804 	movi	r2,32
 4026c18:	f800283a 	ret
 4026c1c:	1806d43a 	srli	r3,r3,16
 4026c20:	00800404 	movi	r2,16
 4026c24:	003feb06 	br	4026bd4 <__alt_data_end+0xfffe6bd4>
 4026c28:	10800044 	addi	r2,r2,1
 4026c2c:	20c00015 	stw	r3,0(r4)
 4026c30:	f800283a 	ret
 4026c34:	0005883a 	mov	r2,zero
 4026c38:	f800283a 	ret
 4026c3c:	1806d07a 	srli	r3,r3,1
 4026c40:	00800044 	movi	r2,1
 4026c44:	20c00015 	stw	r3,0(r4)
 4026c48:	f800283a 	ret

04026c4c <__i2b>:
 4026c4c:	defffd04 	addi	sp,sp,-12
 4026c50:	dc000015 	stw	r16,0(sp)
 4026c54:	04000044 	movi	r16,1
 4026c58:	dc400115 	stw	r17,4(sp)
 4026c5c:	2823883a 	mov	r17,r5
 4026c60:	800b883a 	mov	r5,r16
 4026c64:	dfc00215 	stw	ra,8(sp)
 4026c68:	40268400 	call	4026840 <_Balloc>
 4026c6c:	14400515 	stw	r17,20(r2)
 4026c70:	14000415 	stw	r16,16(r2)
 4026c74:	dfc00217 	ldw	ra,8(sp)
 4026c78:	dc400117 	ldw	r17,4(sp)
 4026c7c:	dc000017 	ldw	r16,0(sp)
 4026c80:	dec00304 	addi	sp,sp,12
 4026c84:	f800283a 	ret

04026c88 <__multiply>:
 4026c88:	defffa04 	addi	sp,sp,-24
 4026c8c:	dcc00315 	stw	r19,12(sp)
 4026c90:	dc800215 	stw	r18,8(sp)
 4026c94:	34c00417 	ldw	r19,16(r6)
 4026c98:	2c800417 	ldw	r18,16(r5)
 4026c9c:	dd000415 	stw	r20,16(sp)
 4026ca0:	dc400115 	stw	r17,4(sp)
 4026ca4:	dfc00515 	stw	ra,20(sp)
 4026ca8:	dc000015 	stw	r16,0(sp)
 4026cac:	2829883a 	mov	r20,r5
 4026cb0:	3023883a 	mov	r17,r6
 4026cb4:	94c0050e 	bge	r18,r19,4026ccc <__multiply+0x44>
 4026cb8:	9007883a 	mov	r3,r18
 4026cbc:	3029883a 	mov	r20,r6
 4026cc0:	9825883a 	mov	r18,r19
 4026cc4:	2823883a 	mov	r17,r5
 4026cc8:	1827883a 	mov	r19,r3
 4026ccc:	a0800217 	ldw	r2,8(r20)
 4026cd0:	94e1883a 	add	r16,r18,r19
 4026cd4:	a1400117 	ldw	r5,4(r20)
 4026cd8:	1400010e 	bge	r2,r16,4026ce0 <__multiply+0x58>
 4026cdc:	29400044 	addi	r5,r5,1
 4026ce0:	40268400 	call	4026840 <_Balloc>
 4026ce4:	8415883a 	add	r10,r16,r16
 4026ce8:	12c00504 	addi	r11,r2,20
 4026cec:	5295883a 	add	r10,r10,r10
 4026cf0:	5a95883a 	add	r10,r11,r10
 4026cf4:	5807883a 	mov	r3,r11
 4026cf8:	5a80032e 	bgeu	r11,r10,4026d08 <__multiply+0x80>
 4026cfc:	18000015 	stw	zero,0(r3)
 4026d00:	18c00104 	addi	r3,r3,4
 4026d04:	1abffd36 	bltu	r3,r10,4026cfc <__alt_data_end+0xfffe6cfc>
 4026d08:	9ce7883a 	add	r19,r19,r19
 4026d0c:	94a5883a 	add	r18,r18,r18
 4026d10:	89800504 	addi	r6,r17,20
 4026d14:	9ce7883a 	add	r19,r19,r19
 4026d18:	a3400504 	addi	r13,r20,20
 4026d1c:	94a5883a 	add	r18,r18,r18
 4026d20:	34d9883a 	add	r12,r6,r19
 4026d24:	6c93883a 	add	r9,r13,r18
 4026d28:	3300422e 	bgeu	r6,r12,4026e34 <__multiply+0x1ac>
 4026d2c:	37c00017 	ldw	ra,0(r6)
 4026d30:	fbffffcc 	andi	r15,ra,65535
 4026d34:	78001b26 	beq	r15,zero,4026da4 <__multiply+0x11c>
 4026d38:	5811883a 	mov	r8,r11
 4026d3c:	681d883a 	mov	r14,r13
 4026d40:	000f883a 	mov	r7,zero
 4026d44:	71000017 	ldw	r4,0(r14)
 4026d48:	40c00017 	ldw	r3,0(r8)
 4026d4c:	73800104 	addi	r14,r14,4
 4026d50:	217fffcc 	andi	r5,r4,65535
 4026d54:	2bcb383a 	mul	r5,r5,r15
 4026d58:	2008d43a 	srli	r4,r4,16
 4026d5c:	1c7fffcc 	andi	r17,r3,65535
 4026d60:	2c4b883a 	add	r5,r5,r17
 4026d64:	29cb883a 	add	r5,r5,r7
 4026d68:	23c9383a 	mul	r4,r4,r15
 4026d6c:	1806d43a 	srli	r3,r3,16
 4026d70:	280ed43a 	srli	r7,r5,16
 4026d74:	297fffcc 	andi	r5,r5,65535
 4026d78:	20c7883a 	add	r3,r4,r3
 4026d7c:	19c7883a 	add	r3,r3,r7
 4026d80:	1808943a 	slli	r4,r3,16
 4026d84:	4023883a 	mov	r17,r8
 4026d88:	180ed43a 	srli	r7,r3,16
 4026d8c:	214ab03a 	or	r5,r4,r5
 4026d90:	41400015 	stw	r5,0(r8)
 4026d94:	42000104 	addi	r8,r8,4
 4026d98:	727fea36 	bltu	r14,r9,4026d44 <__alt_data_end+0xfffe6d44>
 4026d9c:	89c00115 	stw	r7,4(r17)
 4026da0:	37c00017 	ldw	ra,0(r6)
 4026da4:	f83ed43a 	srli	ra,ra,16
 4026da8:	f8001f26 	beq	ra,zero,4026e28 <__multiply+0x1a0>
 4026dac:	58c00017 	ldw	r3,0(r11)
 4026db0:	681d883a 	mov	r14,r13
 4026db4:	581f883a 	mov	r15,r11
 4026db8:	1811883a 	mov	r8,r3
 4026dbc:	5825883a 	mov	r18,r11
 4026dc0:	000f883a 	mov	r7,zero
 4026dc4:	00000106 	br	4026dcc <__multiply+0x144>
 4026dc8:	8825883a 	mov	r18,r17
 4026dcc:	7140000b 	ldhu	r5,0(r14)
 4026dd0:	4010d43a 	srli	r8,r8,16
 4026dd4:	193fffcc 	andi	r4,r3,65535
 4026dd8:	2fcb383a 	mul	r5,r5,ra
 4026ddc:	7bc00104 	addi	r15,r15,4
 4026de0:	73800104 	addi	r14,r14,4
 4026de4:	2a0b883a 	add	r5,r5,r8
 4026de8:	29cb883a 	add	r5,r5,r7
 4026dec:	2806943a 	slli	r3,r5,16
 4026df0:	94400104 	addi	r17,r18,4
 4026df4:	280ad43a 	srli	r5,r5,16
 4026df8:	1908b03a 	or	r4,r3,r4
 4026dfc:	793fff15 	stw	r4,-4(r15)
 4026e00:	70ffff17 	ldw	r3,-4(r14)
 4026e04:	8a000017 	ldw	r8,0(r17)
 4026e08:	1806d43a 	srli	r3,r3,16
 4026e0c:	413fffcc 	andi	r4,r8,65535
 4026e10:	1fc7383a 	mul	r3,r3,ra
 4026e14:	1907883a 	add	r3,r3,r4
 4026e18:	1947883a 	add	r3,r3,r5
 4026e1c:	180ed43a 	srli	r7,r3,16
 4026e20:	727fe936 	bltu	r14,r9,4026dc8 <__alt_data_end+0xfffe6dc8>
 4026e24:	90c00115 	stw	r3,4(r18)
 4026e28:	31800104 	addi	r6,r6,4
 4026e2c:	5ac00104 	addi	r11,r11,4
 4026e30:	333fbe36 	bltu	r6,r12,4026d2c <__alt_data_end+0xfffe6d2c>
 4026e34:	0400090e 	bge	zero,r16,4026e5c <__multiply+0x1d4>
 4026e38:	50ffff17 	ldw	r3,-4(r10)
 4026e3c:	52bfff04 	addi	r10,r10,-4
 4026e40:	18000326 	beq	r3,zero,4026e50 <__multiply+0x1c8>
 4026e44:	00000506 	br	4026e5c <__multiply+0x1d4>
 4026e48:	50c00017 	ldw	r3,0(r10)
 4026e4c:	1800031e 	bne	r3,zero,4026e5c <__multiply+0x1d4>
 4026e50:	843fffc4 	addi	r16,r16,-1
 4026e54:	52bfff04 	addi	r10,r10,-4
 4026e58:	803ffb1e 	bne	r16,zero,4026e48 <__alt_data_end+0xfffe6e48>
 4026e5c:	14000415 	stw	r16,16(r2)
 4026e60:	dfc00517 	ldw	ra,20(sp)
 4026e64:	dd000417 	ldw	r20,16(sp)
 4026e68:	dcc00317 	ldw	r19,12(sp)
 4026e6c:	dc800217 	ldw	r18,8(sp)
 4026e70:	dc400117 	ldw	r17,4(sp)
 4026e74:	dc000017 	ldw	r16,0(sp)
 4026e78:	dec00604 	addi	sp,sp,24
 4026e7c:	f800283a 	ret

04026e80 <__pow5mult>:
 4026e80:	defffa04 	addi	sp,sp,-24
 4026e84:	dcc00315 	stw	r19,12(sp)
 4026e88:	dc000015 	stw	r16,0(sp)
 4026e8c:	dfc00515 	stw	ra,20(sp)
 4026e90:	dd000415 	stw	r20,16(sp)
 4026e94:	dc800215 	stw	r18,8(sp)
 4026e98:	dc400115 	stw	r17,4(sp)
 4026e9c:	308000cc 	andi	r2,r6,3
 4026ea0:	3021883a 	mov	r16,r6
 4026ea4:	2027883a 	mov	r19,r4
 4026ea8:	10002f1e 	bne	r2,zero,4026f68 <__pow5mult+0xe8>
 4026eac:	2825883a 	mov	r18,r5
 4026eb0:	8021d0ba 	srai	r16,r16,2
 4026eb4:	80001a26 	beq	r16,zero,4026f20 <__pow5mult+0xa0>
 4026eb8:	9c401217 	ldw	r17,72(r19)
 4026ebc:	8800061e 	bne	r17,zero,4026ed8 <__pow5mult+0x58>
 4026ec0:	00003406 	br	4026f94 <__pow5mult+0x114>
 4026ec4:	8021d07a 	srai	r16,r16,1
 4026ec8:	80001526 	beq	r16,zero,4026f20 <__pow5mult+0xa0>
 4026ecc:	88800017 	ldw	r2,0(r17)
 4026ed0:	10001c26 	beq	r2,zero,4026f44 <__pow5mult+0xc4>
 4026ed4:	1023883a 	mov	r17,r2
 4026ed8:	8080004c 	andi	r2,r16,1
 4026edc:	103ff926 	beq	r2,zero,4026ec4 <__alt_data_end+0xfffe6ec4>
 4026ee0:	880d883a 	mov	r6,r17
 4026ee4:	900b883a 	mov	r5,r18
 4026ee8:	9809883a 	mov	r4,r19
 4026eec:	4026c880 	call	4026c88 <__multiply>
 4026ef0:	90001b26 	beq	r18,zero,4026f60 <__pow5mult+0xe0>
 4026ef4:	91000117 	ldw	r4,4(r18)
 4026ef8:	98c01317 	ldw	r3,76(r19)
 4026efc:	8021d07a 	srai	r16,r16,1
 4026f00:	2109883a 	add	r4,r4,r4
 4026f04:	2109883a 	add	r4,r4,r4
 4026f08:	1907883a 	add	r3,r3,r4
 4026f0c:	19000017 	ldw	r4,0(r3)
 4026f10:	91000015 	stw	r4,0(r18)
 4026f14:	1c800015 	stw	r18,0(r3)
 4026f18:	1025883a 	mov	r18,r2
 4026f1c:	803feb1e 	bne	r16,zero,4026ecc <__alt_data_end+0xfffe6ecc>
 4026f20:	9005883a 	mov	r2,r18
 4026f24:	dfc00517 	ldw	ra,20(sp)
 4026f28:	dd000417 	ldw	r20,16(sp)
 4026f2c:	dcc00317 	ldw	r19,12(sp)
 4026f30:	dc800217 	ldw	r18,8(sp)
 4026f34:	dc400117 	ldw	r17,4(sp)
 4026f38:	dc000017 	ldw	r16,0(sp)
 4026f3c:	dec00604 	addi	sp,sp,24
 4026f40:	f800283a 	ret
 4026f44:	880d883a 	mov	r6,r17
 4026f48:	880b883a 	mov	r5,r17
 4026f4c:	9809883a 	mov	r4,r19
 4026f50:	4026c880 	call	4026c88 <__multiply>
 4026f54:	88800015 	stw	r2,0(r17)
 4026f58:	10000015 	stw	zero,0(r2)
 4026f5c:	003fdd06 	br	4026ed4 <__alt_data_end+0xfffe6ed4>
 4026f60:	1025883a 	mov	r18,r2
 4026f64:	003fd706 	br	4026ec4 <__alt_data_end+0xfffe6ec4>
 4026f68:	10bfffc4 	addi	r2,r2,-1
 4026f6c:	1085883a 	add	r2,r2,r2
 4026f70:	00c100f4 	movhi	r3,1027
 4026f74:	18c4a804 	addi	r3,r3,4768
 4026f78:	1085883a 	add	r2,r2,r2
 4026f7c:	1885883a 	add	r2,r3,r2
 4026f80:	11800017 	ldw	r6,0(r2)
 4026f84:	000f883a 	mov	r7,zero
 4026f88:	40269100 	call	4026910 <__multadd>
 4026f8c:	1025883a 	mov	r18,r2
 4026f90:	003fc706 	br	4026eb0 <__alt_data_end+0xfffe6eb0>
 4026f94:	05000044 	movi	r20,1
 4026f98:	a00b883a 	mov	r5,r20
 4026f9c:	9809883a 	mov	r4,r19
 4026fa0:	40268400 	call	4026840 <_Balloc>
 4026fa4:	1023883a 	mov	r17,r2
 4026fa8:	00809c44 	movi	r2,625
 4026fac:	88800515 	stw	r2,20(r17)
 4026fb0:	8d000415 	stw	r20,16(r17)
 4026fb4:	9c401215 	stw	r17,72(r19)
 4026fb8:	88000015 	stw	zero,0(r17)
 4026fbc:	003fc606 	br	4026ed8 <__alt_data_end+0xfffe6ed8>

04026fc0 <__lshift>:
 4026fc0:	defff904 	addi	sp,sp,-28
 4026fc4:	dd400515 	stw	r21,20(sp)
 4026fc8:	dcc00315 	stw	r19,12(sp)
 4026fcc:	302bd17a 	srai	r21,r6,5
 4026fd0:	2cc00417 	ldw	r19,16(r5)
 4026fd4:	28800217 	ldw	r2,8(r5)
 4026fd8:	dd000415 	stw	r20,16(sp)
 4026fdc:	ace7883a 	add	r19,r21,r19
 4026fe0:	dc800215 	stw	r18,8(sp)
 4026fe4:	dc400115 	stw	r17,4(sp)
 4026fe8:	dc000015 	stw	r16,0(sp)
 4026fec:	dfc00615 	stw	ra,24(sp)
 4026ff0:	9c000044 	addi	r16,r19,1
 4026ff4:	2823883a 	mov	r17,r5
 4026ff8:	3029883a 	mov	r20,r6
 4026ffc:	2025883a 	mov	r18,r4
 4027000:	29400117 	ldw	r5,4(r5)
 4027004:	1400030e 	bge	r2,r16,4027014 <__lshift+0x54>
 4027008:	1085883a 	add	r2,r2,r2
 402700c:	29400044 	addi	r5,r5,1
 4027010:	143ffd16 	blt	r2,r16,4027008 <__alt_data_end+0xfffe7008>
 4027014:	9009883a 	mov	r4,r18
 4027018:	40268400 	call	4026840 <_Balloc>
 402701c:	10c00504 	addi	r3,r2,20
 4027020:	0540070e 	bge	zero,r21,4027040 <__lshift+0x80>
 4027024:	ad6b883a 	add	r21,r21,r21
 4027028:	ad6b883a 	add	r21,r21,r21
 402702c:	1809883a 	mov	r4,r3
 4027030:	1d47883a 	add	r3,r3,r21
 4027034:	20000015 	stw	zero,0(r4)
 4027038:	21000104 	addi	r4,r4,4
 402703c:	193ffd1e 	bne	r3,r4,4027034 <__alt_data_end+0xfffe7034>
 4027040:	8a000417 	ldw	r8,16(r17)
 4027044:	89000504 	addi	r4,r17,20
 4027048:	a18007cc 	andi	r6,r20,31
 402704c:	4211883a 	add	r8,r8,r8
 4027050:	4211883a 	add	r8,r8,r8
 4027054:	2211883a 	add	r8,r4,r8
 4027058:	30002326 	beq	r6,zero,40270e8 <__lshift+0x128>
 402705c:	02400804 	movi	r9,32
 4027060:	4993c83a 	sub	r9,r9,r6
 4027064:	000b883a 	mov	r5,zero
 4027068:	21c00017 	ldw	r7,0(r4)
 402706c:	1815883a 	mov	r10,r3
 4027070:	18c00104 	addi	r3,r3,4
 4027074:	398e983a 	sll	r7,r7,r6
 4027078:	21000104 	addi	r4,r4,4
 402707c:	394ab03a 	or	r5,r7,r5
 4027080:	197fff15 	stw	r5,-4(r3)
 4027084:	217fff17 	ldw	r5,-4(r4)
 4027088:	2a4ad83a 	srl	r5,r5,r9
 402708c:	223ff636 	bltu	r4,r8,4027068 <__alt_data_end+0xfffe7068>
 4027090:	51400115 	stw	r5,4(r10)
 4027094:	28001a1e 	bne	r5,zero,4027100 <__lshift+0x140>
 4027098:	843fffc4 	addi	r16,r16,-1
 402709c:	14000415 	stw	r16,16(r2)
 40270a0:	88000826 	beq	r17,zero,40270c4 <__lshift+0x104>
 40270a4:	89000117 	ldw	r4,4(r17)
 40270a8:	90c01317 	ldw	r3,76(r18)
 40270ac:	2109883a 	add	r4,r4,r4
 40270b0:	2109883a 	add	r4,r4,r4
 40270b4:	1907883a 	add	r3,r3,r4
 40270b8:	19000017 	ldw	r4,0(r3)
 40270bc:	89000015 	stw	r4,0(r17)
 40270c0:	1c400015 	stw	r17,0(r3)
 40270c4:	dfc00617 	ldw	ra,24(sp)
 40270c8:	dd400517 	ldw	r21,20(sp)
 40270cc:	dd000417 	ldw	r20,16(sp)
 40270d0:	dcc00317 	ldw	r19,12(sp)
 40270d4:	dc800217 	ldw	r18,8(sp)
 40270d8:	dc400117 	ldw	r17,4(sp)
 40270dc:	dc000017 	ldw	r16,0(sp)
 40270e0:	dec00704 	addi	sp,sp,28
 40270e4:	f800283a 	ret
 40270e8:	21400017 	ldw	r5,0(r4)
 40270ec:	18c00104 	addi	r3,r3,4
 40270f0:	21000104 	addi	r4,r4,4
 40270f4:	197fff15 	stw	r5,-4(r3)
 40270f8:	223ffb36 	bltu	r4,r8,40270e8 <__alt_data_end+0xfffe70e8>
 40270fc:	003fe606 	br	4027098 <__alt_data_end+0xfffe7098>
 4027100:	9c000084 	addi	r16,r19,2
 4027104:	003fe406 	br	4027098 <__alt_data_end+0xfffe7098>

04027108 <__mcmp>:
 4027108:	20800417 	ldw	r2,16(r4)
 402710c:	28c00417 	ldw	r3,16(r5)
 4027110:	10c5c83a 	sub	r2,r2,r3
 4027114:	1000111e 	bne	r2,zero,402715c <__mcmp+0x54>
 4027118:	18c7883a 	add	r3,r3,r3
 402711c:	18c7883a 	add	r3,r3,r3
 4027120:	21000504 	addi	r4,r4,20
 4027124:	29400504 	addi	r5,r5,20
 4027128:	20c5883a 	add	r2,r4,r3
 402712c:	28cb883a 	add	r5,r5,r3
 4027130:	00000106 	br	4027138 <__mcmp+0x30>
 4027134:	20800a2e 	bgeu	r4,r2,4027160 <__mcmp+0x58>
 4027138:	10bfff04 	addi	r2,r2,-4
 402713c:	297fff04 	addi	r5,r5,-4
 4027140:	11800017 	ldw	r6,0(r2)
 4027144:	28c00017 	ldw	r3,0(r5)
 4027148:	30fffa26 	beq	r6,r3,4027134 <__alt_data_end+0xfffe7134>
 402714c:	30c00236 	bltu	r6,r3,4027158 <__mcmp+0x50>
 4027150:	00800044 	movi	r2,1
 4027154:	f800283a 	ret
 4027158:	00bfffc4 	movi	r2,-1
 402715c:	f800283a 	ret
 4027160:	0005883a 	mov	r2,zero
 4027164:	f800283a 	ret

04027168 <__mdiff>:
 4027168:	28c00417 	ldw	r3,16(r5)
 402716c:	30800417 	ldw	r2,16(r6)
 4027170:	defffa04 	addi	sp,sp,-24
 4027174:	dcc00315 	stw	r19,12(sp)
 4027178:	dc800215 	stw	r18,8(sp)
 402717c:	dfc00515 	stw	ra,20(sp)
 4027180:	dd000415 	stw	r20,16(sp)
 4027184:	dc400115 	stw	r17,4(sp)
 4027188:	dc000015 	stw	r16,0(sp)
 402718c:	1887c83a 	sub	r3,r3,r2
 4027190:	2825883a 	mov	r18,r5
 4027194:	3027883a 	mov	r19,r6
 4027198:	1800141e 	bne	r3,zero,40271ec <__mdiff+0x84>
 402719c:	1085883a 	add	r2,r2,r2
 40271a0:	1085883a 	add	r2,r2,r2
 40271a4:	2a000504 	addi	r8,r5,20
 40271a8:	34000504 	addi	r16,r6,20
 40271ac:	4087883a 	add	r3,r8,r2
 40271b0:	8085883a 	add	r2,r16,r2
 40271b4:	00000106 	br	40271bc <__mdiff+0x54>
 40271b8:	40c0592e 	bgeu	r8,r3,4027320 <__mdiff+0x1b8>
 40271bc:	18ffff04 	addi	r3,r3,-4
 40271c0:	10bfff04 	addi	r2,r2,-4
 40271c4:	19c00017 	ldw	r7,0(r3)
 40271c8:	11400017 	ldw	r5,0(r2)
 40271cc:	397ffa26 	beq	r7,r5,40271b8 <__alt_data_end+0xfffe71b8>
 40271d0:	3940592e 	bgeu	r7,r5,4027338 <__mdiff+0x1d0>
 40271d4:	9005883a 	mov	r2,r18
 40271d8:	4023883a 	mov	r17,r8
 40271dc:	9825883a 	mov	r18,r19
 40271e0:	05000044 	movi	r20,1
 40271e4:	1027883a 	mov	r19,r2
 40271e8:	00000406 	br	40271fc <__mdiff+0x94>
 40271ec:	18005616 	blt	r3,zero,4027348 <__mdiff+0x1e0>
 40271f0:	34400504 	addi	r17,r6,20
 40271f4:	2c000504 	addi	r16,r5,20
 40271f8:	0029883a 	mov	r20,zero
 40271fc:	91400117 	ldw	r5,4(r18)
 4027200:	40268400 	call	4026840 <_Balloc>
 4027204:	92400417 	ldw	r9,16(r18)
 4027208:	9b000417 	ldw	r12,16(r19)
 402720c:	12c00504 	addi	r11,r2,20
 4027210:	4a51883a 	add	r8,r9,r9
 4027214:	6319883a 	add	r12,r12,r12
 4027218:	4211883a 	add	r8,r8,r8
 402721c:	6319883a 	add	r12,r12,r12
 4027220:	15000315 	stw	r20,12(r2)
 4027224:	8211883a 	add	r8,r16,r8
 4027228:	8b19883a 	add	r12,r17,r12
 402722c:	0007883a 	mov	r3,zero
 4027230:	81400017 	ldw	r5,0(r16)
 4027234:	89c00017 	ldw	r7,0(r17)
 4027238:	59800104 	addi	r6,r11,4
 402723c:	293fffcc 	andi	r4,r5,65535
 4027240:	20c7883a 	add	r3,r4,r3
 4027244:	393fffcc 	andi	r4,r7,65535
 4027248:	1909c83a 	sub	r4,r3,r4
 402724c:	280ad43a 	srli	r5,r5,16
 4027250:	380ed43a 	srli	r7,r7,16
 4027254:	2007d43a 	srai	r3,r4,16
 4027258:	213fffcc 	andi	r4,r4,65535
 402725c:	29cbc83a 	sub	r5,r5,r7
 4027260:	28c7883a 	add	r3,r5,r3
 4027264:	180a943a 	slli	r5,r3,16
 4027268:	8c400104 	addi	r17,r17,4
 402726c:	84000104 	addi	r16,r16,4
 4027270:	2908b03a 	or	r4,r5,r4
 4027274:	59000015 	stw	r4,0(r11)
 4027278:	1807d43a 	srai	r3,r3,16
 402727c:	3015883a 	mov	r10,r6
 4027280:	3017883a 	mov	r11,r6
 4027284:	8b3fea36 	bltu	r17,r12,4027230 <__alt_data_end+0xfffe7230>
 4027288:	8200162e 	bgeu	r16,r8,40272e4 <__mdiff+0x17c>
 402728c:	8017883a 	mov	r11,r16
 4027290:	59400017 	ldw	r5,0(r11)
 4027294:	31800104 	addi	r6,r6,4
 4027298:	5ac00104 	addi	r11,r11,4
 402729c:	293fffcc 	andi	r4,r5,65535
 40272a0:	20c7883a 	add	r3,r4,r3
 40272a4:	280ed43a 	srli	r7,r5,16
 40272a8:	180bd43a 	srai	r5,r3,16
 40272ac:	193fffcc 	andi	r4,r3,65535
 40272b0:	3947883a 	add	r3,r7,r5
 40272b4:	180a943a 	slli	r5,r3,16
 40272b8:	1807d43a 	srai	r3,r3,16
 40272bc:	2908b03a 	or	r4,r5,r4
 40272c0:	313fff15 	stw	r4,-4(r6)
 40272c4:	5a3ff236 	bltu	r11,r8,4027290 <__alt_data_end+0xfffe7290>
 40272c8:	0406303a 	nor	r3,zero,r16
 40272cc:	1a07883a 	add	r3,r3,r8
 40272d0:	1806d0ba 	srli	r3,r3,2
 40272d4:	18c00044 	addi	r3,r3,1
 40272d8:	18c7883a 	add	r3,r3,r3
 40272dc:	18c7883a 	add	r3,r3,r3
 40272e0:	50d5883a 	add	r10,r10,r3
 40272e4:	50ffff04 	addi	r3,r10,-4
 40272e8:	2000041e 	bne	r4,zero,40272fc <__mdiff+0x194>
 40272ec:	18ffff04 	addi	r3,r3,-4
 40272f0:	19000017 	ldw	r4,0(r3)
 40272f4:	4a7fffc4 	addi	r9,r9,-1
 40272f8:	203ffc26 	beq	r4,zero,40272ec <__alt_data_end+0xfffe72ec>
 40272fc:	12400415 	stw	r9,16(r2)
 4027300:	dfc00517 	ldw	ra,20(sp)
 4027304:	dd000417 	ldw	r20,16(sp)
 4027308:	dcc00317 	ldw	r19,12(sp)
 402730c:	dc800217 	ldw	r18,8(sp)
 4027310:	dc400117 	ldw	r17,4(sp)
 4027314:	dc000017 	ldw	r16,0(sp)
 4027318:	dec00604 	addi	sp,sp,24
 402731c:	f800283a 	ret
 4027320:	000b883a 	mov	r5,zero
 4027324:	40268400 	call	4026840 <_Balloc>
 4027328:	00c00044 	movi	r3,1
 402732c:	10c00415 	stw	r3,16(r2)
 4027330:	10000515 	stw	zero,20(r2)
 4027334:	003ff206 	br	4027300 <__alt_data_end+0xfffe7300>
 4027338:	8023883a 	mov	r17,r16
 402733c:	0029883a 	mov	r20,zero
 4027340:	4021883a 	mov	r16,r8
 4027344:	003fad06 	br	40271fc <__alt_data_end+0xfffe71fc>
 4027348:	9005883a 	mov	r2,r18
 402734c:	94400504 	addi	r17,r18,20
 4027350:	9c000504 	addi	r16,r19,20
 4027354:	9825883a 	mov	r18,r19
 4027358:	05000044 	movi	r20,1
 402735c:	1027883a 	mov	r19,r2
 4027360:	003fa606 	br	40271fc <__alt_data_end+0xfffe71fc>

04027364 <__ulp>:
 4027364:	295ffc2c 	andhi	r5,r5,32752
 4027368:	00bf3034 	movhi	r2,64704
 402736c:	2887883a 	add	r3,r5,r2
 4027370:	00c0020e 	bge	zero,r3,402737c <__ulp+0x18>
 4027374:	0005883a 	mov	r2,zero
 4027378:	f800283a 	ret
 402737c:	00c7c83a 	sub	r3,zero,r3
 4027380:	1807d53a 	srai	r3,r3,20
 4027384:	008004c4 	movi	r2,19
 4027388:	10c00b0e 	bge	r2,r3,40273b8 <__ulp+0x54>
 402738c:	18bffb04 	addi	r2,r3,-20
 4027390:	01000784 	movi	r4,30
 4027394:	0007883a 	mov	r3,zero
 4027398:	20800516 	blt	r4,r2,40273b0 <__ulp+0x4c>
 402739c:	010007c4 	movi	r4,31
 40273a0:	2089c83a 	sub	r4,r4,r2
 40273a4:	00800044 	movi	r2,1
 40273a8:	1104983a 	sll	r2,r2,r4
 40273ac:	f800283a 	ret
 40273b0:	00800044 	movi	r2,1
 40273b4:	f800283a 	ret
 40273b8:	01400234 	movhi	r5,8
 40273bc:	28c7d83a 	sra	r3,r5,r3
 40273c0:	0005883a 	mov	r2,zero
 40273c4:	f800283a 	ret

040273c8 <__b2d>:
 40273c8:	defffa04 	addi	sp,sp,-24
 40273cc:	dc000015 	stw	r16,0(sp)
 40273d0:	24000417 	ldw	r16,16(r4)
 40273d4:	dc400115 	stw	r17,4(sp)
 40273d8:	24400504 	addi	r17,r4,20
 40273dc:	8421883a 	add	r16,r16,r16
 40273e0:	8421883a 	add	r16,r16,r16
 40273e4:	8c21883a 	add	r16,r17,r16
 40273e8:	dc800215 	stw	r18,8(sp)
 40273ec:	84bfff17 	ldw	r18,-4(r16)
 40273f0:	dd000415 	stw	r20,16(sp)
 40273f4:	dcc00315 	stw	r19,12(sp)
 40273f8:	9009883a 	mov	r4,r18
 40273fc:	2829883a 	mov	r20,r5
 4027400:	dfc00515 	stw	ra,20(sp)
 4027404:	4026b340 	call	4026b34 <__hi0bits>
 4027408:	00c00804 	movi	r3,32
 402740c:	1889c83a 	sub	r4,r3,r2
 4027410:	a1000015 	stw	r4,0(r20)
 4027414:	01000284 	movi	r4,10
 4027418:	84ffff04 	addi	r19,r16,-4
 402741c:	20801216 	blt	r4,r2,4027468 <__b2d+0xa0>
 4027420:	018002c4 	movi	r6,11
 4027424:	308dc83a 	sub	r6,r6,r2
 4027428:	9186d83a 	srl	r3,r18,r6
 402742c:	18cffc34 	orhi	r3,r3,16368
 4027430:	8cc0212e 	bgeu	r17,r19,40274b8 <__b2d+0xf0>
 4027434:	813ffe17 	ldw	r4,-8(r16)
 4027438:	218cd83a 	srl	r6,r4,r6
 402743c:	10800544 	addi	r2,r2,21
 4027440:	9084983a 	sll	r2,r18,r2
 4027444:	1184b03a 	or	r2,r2,r6
 4027448:	dfc00517 	ldw	ra,20(sp)
 402744c:	dd000417 	ldw	r20,16(sp)
 4027450:	dcc00317 	ldw	r19,12(sp)
 4027454:	dc800217 	ldw	r18,8(sp)
 4027458:	dc400117 	ldw	r17,4(sp)
 402745c:	dc000017 	ldw	r16,0(sp)
 4027460:	dec00604 	addi	sp,sp,24
 4027464:	f800283a 	ret
 4027468:	8cc00f2e 	bgeu	r17,r19,40274a8 <__b2d+0xe0>
 402746c:	117ffd44 	addi	r5,r2,-11
 4027470:	80bffe17 	ldw	r2,-8(r16)
 4027474:	28000e26 	beq	r5,zero,40274b0 <__b2d+0xe8>
 4027478:	1949c83a 	sub	r4,r3,r5
 402747c:	9164983a 	sll	r18,r18,r5
 4027480:	1106d83a 	srl	r3,r2,r4
 4027484:	81bffe04 	addi	r6,r16,-8
 4027488:	948ffc34 	orhi	r18,r18,16368
 402748c:	90c6b03a 	or	r3,r18,r3
 4027490:	89800e2e 	bgeu	r17,r6,40274cc <__b2d+0x104>
 4027494:	81bffd17 	ldw	r6,-12(r16)
 4027498:	1144983a 	sll	r2,r2,r5
 402749c:	310ad83a 	srl	r5,r6,r4
 40274a0:	2884b03a 	or	r2,r5,r2
 40274a4:	003fe806 	br	4027448 <__alt_data_end+0xfffe7448>
 40274a8:	10bffd44 	addi	r2,r2,-11
 40274ac:	1000041e 	bne	r2,zero,40274c0 <__b2d+0xf8>
 40274b0:	90cffc34 	orhi	r3,r18,16368
 40274b4:	003fe406 	br	4027448 <__alt_data_end+0xfffe7448>
 40274b8:	000d883a 	mov	r6,zero
 40274bc:	003fdf06 	br	402743c <__alt_data_end+0xfffe743c>
 40274c0:	90a4983a 	sll	r18,r18,r2
 40274c4:	0005883a 	mov	r2,zero
 40274c8:	003ff906 	br	40274b0 <__alt_data_end+0xfffe74b0>
 40274cc:	1144983a 	sll	r2,r2,r5
 40274d0:	003fdd06 	br	4027448 <__alt_data_end+0xfffe7448>

040274d4 <__d2b>:
 40274d4:	defff804 	addi	sp,sp,-32
 40274d8:	dc000215 	stw	r16,8(sp)
 40274dc:	3021883a 	mov	r16,r6
 40274e0:	dc400315 	stw	r17,12(sp)
 40274e4:	8022907a 	slli	r17,r16,1
 40274e8:	dd000615 	stw	r20,24(sp)
 40274ec:	2829883a 	mov	r20,r5
 40274f0:	01400044 	movi	r5,1
 40274f4:	dcc00515 	stw	r19,20(sp)
 40274f8:	dc800415 	stw	r18,16(sp)
 40274fc:	dfc00715 	stw	ra,28(sp)
 4027500:	3825883a 	mov	r18,r7
 4027504:	8822d57a 	srli	r17,r17,21
 4027508:	40268400 	call	4026840 <_Balloc>
 402750c:	1027883a 	mov	r19,r2
 4027510:	00800434 	movhi	r2,16
 4027514:	10bfffc4 	addi	r2,r2,-1
 4027518:	808c703a 	and	r6,r16,r2
 402751c:	88000126 	beq	r17,zero,4027524 <__d2b+0x50>
 4027520:	31800434 	orhi	r6,r6,16
 4027524:	d9800015 	stw	r6,0(sp)
 4027528:	a0002426 	beq	r20,zero,40275bc <__d2b+0xe8>
 402752c:	d9000104 	addi	r4,sp,4
 4027530:	dd000115 	stw	r20,4(sp)
 4027534:	4026b9c0 	call	4026b9c <__lo0bits>
 4027538:	d8c00017 	ldw	r3,0(sp)
 402753c:	10002f1e 	bne	r2,zero,40275fc <__d2b+0x128>
 4027540:	d9000117 	ldw	r4,4(sp)
 4027544:	99000515 	stw	r4,20(r19)
 4027548:	1821003a 	cmpeq	r16,r3,zero
 402754c:	01000084 	movi	r4,2
 4027550:	2421c83a 	sub	r16,r4,r16
 4027554:	98c00615 	stw	r3,24(r19)
 4027558:	9c000415 	stw	r16,16(r19)
 402755c:	88001f1e 	bne	r17,zero,40275dc <__d2b+0x108>
 4027560:	10bef384 	addi	r2,r2,-1074
 4027564:	90800015 	stw	r2,0(r18)
 4027568:	00900034 	movhi	r2,16384
 402756c:	10bfffc4 	addi	r2,r2,-1
 4027570:	8085883a 	add	r2,r16,r2
 4027574:	1085883a 	add	r2,r2,r2
 4027578:	1085883a 	add	r2,r2,r2
 402757c:	9885883a 	add	r2,r19,r2
 4027580:	11000517 	ldw	r4,20(r2)
 4027584:	8020917a 	slli	r16,r16,5
 4027588:	4026b340 	call	4026b34 <__hi0bits>
 402758c:	d8c00817 	ldw	r3,32(sp)
 4027590:	8085c83a 	sub	r2,r16,r2
 4027594:	18800015 	stw	r2,0(r3)
 4027598:	9805883a 	mov	r2,r19
 402759c:	dfc00717 	ldw	ra,28(sp)
 40275a0:	dd000617 	ldw	r20,24(sp)
 40275a4:	dcc00517 	ldw	r19,20(sp)
 40275a8:	dc800417 	ldw	r18,16(sp)
 40275ac:	dc400317 	ldw	r17,12(sp)
 40275b0:	dc000217 	ldw	r16,8(sp)
 40275b4:	dec00804 	addi	sp,sp,32
 40275b8:	f800283a 	ret
 40275bc:	d809883a 	mov	r4,sp
 40275c0:	4026b9c0 	call	4026b9c <__lo0bits>
 40275c4:	d8c00017 	ldw	r3,0(sp)
 40275c8:	04000044 	movi	r16,1
 40275cc:	9c000415 	stw	r16,16(r19)
 40275d0:	98c00515 	stw	r3,20(r19)
 40275d4:	10800804 	addi	r2,r2,32
 40275d8:	883fe126 	beq	r17,zero,4027560 <__alt_data_end+0xfffe7560>
 40275dc:	00c00d44 	movi	r3,53
 40275e0:	8c7ef344 	addi	r17,r17,-1075
 40275e4:	88a3883a 	add	r17,r17,r2
 40275e8:	1885c83a 	sub	r2,r3,r2
 40275ec:	d8c00817 	ldw	r3,32(sp)
 40275f0:	94400015 	stw	r17,0(r18)
 40275f4:	18800015 	stw	r2,0(r3)
 40275f8:	003fe706 	br	4027598 <__alt_data_end+0xfffe7598>
 40275fc:	01000804 	movi	r4,32
 4027600:	2089c83a 	sub	r4,r4,r2
 4027604:	1908983a 	sll	r4,r3,r4
 4027608:	d9400117 	ldw	r5,4(sp)
 402760c:	1886d83a 	srl	r3,r3,r2
 4027610:	2148b03a 	or	r4,r4,r5
 4027614:	99000515 	stw	r4,20(r19)
 4027618:	d8c00015 	stw	r3,0(sp)
 402761c:	003fca06 	br	4027548 <__alt_data_end+0xfffe7548>

04027620 <__ratio>:
 4027620:	defff904 	addi	sp,sp,-28
 4027624:	dc400315 	stw	r17,12(sp)
 4027628:	2823883a 	mov	r17,r5
 402762c:	d9400104 	addi	r5,sp,4
 4027630:	dfc00615 	stw	ra,24(sp)
 4027634:	dcc00515 	stw	r19,20(sp)
 4027638:	dc800415 	stw	r18,16(sp)
 402763c:	2027883a 	mov	r19,r4
 4027640:	dc000215 	stw	r16,8(sp)
 4027644:	40273c80 	call	40273c8 <__b2d>
 4027648:	d80b883a 	mov	r5,sp
 402764c:	8809883a 	mov	r4,r17
 4027650:	1025883a 	mov	r18,r2
 4027654:	1821883a 	mov	r16,r3
 4027658:	40273c80 	call	40273c8 <__b2d>
 402765c:	8a000417 	ldw	r8,16(r17)
 4027660:	99000417 	ldw	r4,16(r19)
 4027664:	d9400117 	ldw	r5,4(sp)
 4027668:	2209c83a 	sub	r4,r4,r8
 402766c:	2010917a 	slli	r8,r4,5
 4027670:	d9000017 	ldw	r4,0(sp)
 4027674:	2909c83a 	sub	r4,r5,r4
 4027678:	4109883a 	add	r4,r8,r4
 402767c:	01000e0e 	bge	zero,r4,40276b8 <__ratio+0x98>
 4027680:	2008953a 	slli	r4,r4,20
 4027684:	2421883a 	add	r16,r4,r16
 4027688:	100d883a 	mov	r6,r2
 402768c:	180f883a 	mov	r7,r3
 4027690:	9009883a 	mov	r4,r18
 4027694:	800b883a 	mov	r5,r16
 4027698:	402b6740 	call	402b674 <__divdf3>
 402769c:	dfc00617 	ldw	ra,24(sp)
 40276a0:	dcc00517 	ldw	r19,20(sp)
 40276a4:	dc800417 	ldw	r18,16(sp)
 40276a8:	dc400317 	ldw	r17,12(sp)
 40276ac:	dc000217 	ldw	r16,8(sp)
 40276b0:	dec00704 	addi	sp,sp,28
 40276b4:	f800283a 	ret
 40276b8:	2008953a 	slli	r4,r4,20
 40276bc:	1907c83a 	sub	r3,r3,r4
 40276c0:	003ff106 	br	4027688 <__alt_data_end+0xfffe7688>

040276c4 <_mprec_log10>:
 40276c4:	defffe04 	addi	sp,sp,-8
 40276c8:	dc000015 	stw	r16,0(sp)
 40276cc:	dfc00115 	stw	ra,4(sp)
 40276d0:	008005c4 	movi	r2,23
 40276d4:	2021883a 	mov	r16,r4
 40276d8:	11000d0e 	bge	r2,r4,4027710 <_mprec_log10+0x4c>
 40276dc:	0005883a 	mov	r2,zero
 40276e0:	00cffc34 	movhi	r3,16368
 40276e4:	843fffc4 	addi	r16,r16,-1
 40276e8:	000d883a 	mov	r6,zero
 40276ec:	01d00934 	movhi	r7,16420
 40276f0:	1009883a 	mov	r4,r2
 40276f4:	180b883a 	mov	r5,r3
 40276f8:	402c1b40 	call	402c1b4 <__muldf3>
 40276fc:	803ff91e 	bne	r16,zero,40276e4 <__alt_data_end+0xfffe76e4>
 4027700:	dfc00117 	ldw	ra,4(sp)
 4027704:	dc000017 	ldw	r16,0(sp)
 4027708:	dec00204 	addi	sp,sp,8
 402770c:	f800283a 	ret
 4027710:	202090fa 	slli	r16,r4,3
 4027714:	008100f4 	movhi	r2,1027
 4027718:	1084bf04 	addi	r2,r2,4860
 402771c:	1421883a 	add	r16,r2,r16
 4027720:	80800017 	ldw	r2,0(r16)
 4027724:	80c00117 	ldw	r3,4(r16)
 4027728:	dfc00117 	ldw	ra,4(sp)
 402772c:	dc000017 	ldw	r16,0(sp)
 4027730:	dec00204 	addi	sp,sp,8
 4027734:	f800283a 	ret

04027738 <__copybits>:
 4027738:	297fffc4 	addi	r5,r5,-1
 402773c:	280fd17a 	srai	r7,r5,5
 4027740:	30c00417 	ldw	r3,16(r6)
 4027744:	30800504 	addi	r2,r6,20
 4027748:	39c00044 	addi	r7,r7,1
 402774c:	18c7883a 	add	r3,r3,r3
 4027750:	39cf883a 	add	r7,r7,r7
 4027754:	18c7883a 	add	r3,r3,r3
 4027758:	39cf883a 	add	r7,r7,r7
 402775c:	10c7883a 	add	r3,r2,r3
 4027760:	21cf883a 	add	r7,r4,r7
 4027764:	10c00d2e 	bgeu	r2,r3,402779c <__copybits+0x64>
 4027768:	200b883a 	mov	r5,r4
 402776c:	12000017 	ldw	r8,0(r2)
 4027770:	29400104 	addi	r5,r5,4
 4027774:	10800104 	addi	r2,r2,4
 4027778:	2a3fff15 	stw	r8,-4(r5)
 402777c:	10fffb36 	bltu	r2,r3,402776c <__alt_data_end+0xfffe776c>
 4027780:	1985c83a 	sub	r2,r3,r6
 4027784:	10bffac4 	addi	r2,r2,-21
 4027788:	1004d0ba 	srli	r2,r2,2
 402778c:	10800044 	addi	r2,r2,1
 4027790:	1085883a 	add	r2,r2,r2
 4027794:	1085883a 	add	r2,r2,r2
 4027798:	2089883a 	add	r4,r4,r2
 402779c:	21c0032e 	bgeu	r4,r7,40277ac <__copybits+0x74>
 40277a0:	20000015 	stw	zero,0(r4)
 40277a4:	21000104 	addi	r4,r4,4
 40277a8:	21fffd36 	bltu	r4,r7,40277a0 <__alt_data_end+0xfffe77a0>
 40277ac:	f800283a 	ret

040277b0 <__any_on>:
 40277b0:	20c00417 	ldw	r3,16(r4)
 40277b4:	2805d17a 	srai	r2,r5,5
 40277b8:	21000504 	addi	r4,r4,20
 40277bc:	18800d0e 	bge	r3,r2,40277f4 <__any_on+0x44>
 40277c0:	18c7883a 	add	r3,r3,r3
 40277c4:	18c7883a 	add	r3,r3,r3
 40277c8:	20c7883a 	add	r3,r4,r3
 40277cc:	20c0192e 	bgeu	r4,r3,4027834 <__any_on+0x84>
 40277d0:	18bfff17 	ldw	r2,-4(r3)
 40277d4:	18ffff04 	addi	r3,r3,-4
 40277d8:	1000041e 	bne	r2,zero,40277ec <__any_on+0x3c>
 40277dc:	20c0142e 	bgeu	r4,r3,4027830 <__any_on+0x80>
 40277e0:	18ffff04 	addi	r3,r3,-4
 40277e4:	19400017 	ldw	r5,0(r3)
 40277e8:	283ffc26 	beq	r5,zero,40277dc <__alt_data_end+0xfffe77dc>
 40277ec:	00800044 	movi	r2,1
 40277f0:	f800283a 	ret
 40277f4:	10c00a0e 	bge	r2,r3,4027820 <__any_on+0x70>
 40277f8:	1085883a 	add	r2,r2,r2
 40277fc:	1085883a 	add	r2,r2,r2
 4027800:	294007cc 	andi	r5,r5,31
 4027804:	2087883a 	add	r3,r4,r2
 4027808:	283ff026 	beq	r5,zero,40277cc <__alt_data_end+0xfffe77cc>
 402780c:	19800017 	ldw	r6,0(r3)
 4027810:	3144d83a 	srl	r2,r6,r5
 4027814:	114a983a 	sll	r5,r2,r5
 4027818:	317ff41e 	bne	r6,r5,40277ec <__alt_data_end+0xfffe77ec>
 402781c:	003feb06 	br	40277cc <__alt_data_end+0xfffe77cc>
 4027820:	1085883a 	add	r2,r2,r2
 4027824:	1085883a 	add	r2,r2,r2
 4027828:	2087883a 	add	r3,r4,r2
 402782c:	003fe706 	br	40277cc <__alt_data_end+0xfffe77cc>
 4027830:	f800283a 	ret
 4027834:	0005883a 	mov	r2,zero
 4027838:	f800283a 	ret

0402783c <_putc_r>:
 402783c:	defffc04 	addi	sp,sp,-16
 4027840:	dc000215 	stw	r16,8(sp)
 4027844:	dfc00315 	stw	ra,12(sp)
 4027848:	2021883a 	mov	r16,r4
 402784c:	20000226 	beq	r4,zero,4027858 <_putc_r+0x1c>
 4027850:	20800e17 	ldw	r2,56(r4)
 4027854:	10001b26 	beq	r2,zero,40278c4 <_putc_r+0x88>
 4027858:	30800217 	ldw	r2,8(r6)
 402785c:	10bfffc4 	addi	r2,r2,-1
 4027860:	30800215 	stw	r2,8(r6)
 4027864:	10000a16 	blt	r2,zero,4027890 <_putc_r+0x54>
 4027868:	30800017 	ldw	r2,0(r6)
 402786c:	11400005 	stb	r5,0(r2)
 4027870:	30800017 	ldw	r2,0(r6)
 4027874:	10c00044 	addi	r3,r2,1
 4027878:	30c00015 	stw	r3,0(r6)
 402787c:	10800003 	ldbu	r2,0(r2)
 4027880:	dfc00317 	ldw	ra,12(sp)
 4027884:	dc000217 	ldw	r16,8(sp)
 4027888:	dec00404 	addi	sp,sp,16
 402788c:	f800283a 	ret
 4027890:	30c00617 	ldw	r3,24(r6)
 4027894:	10c00616 	blt	r2,r3,40278b0 <_putc_r+0x74>
 4027898:	30800017 	ldw	r2,0(r6)
 402789c:	00c00284 	movi	r3,10
 40278a0:	11400005 	stb	r5,0(r2)
 40278a4:	30800017 	ldw	r2,0(r6)
 40278a8:	11400003 	ldbu	r5,0(r2)
 40278ac:	28fff11e 	bne	r5,r3,4027874 <__alt_data_end+0xfffe7874>
 40278b0:	8009883a 	mov	r4,r16
 40278b4:	dfc00317 	ldw	ra,12(sp)
 40278b8:	dc000217 	ldw	r16,8(sp)
 40278bc:	dec00404 	addi	sp,sp,16
 40278c0:	40298301 	jmpi	4029830 <__swbuf_r>
 40278c4:	d9400015 	stw	r5,0(sp)
 40278c8:	d9800115 	stw	r6,4(sp)
 40278cc:	4024e240 	call	4024e24 <__sinit>
 40278d0:	d9800117 	ldw	r6,4(sp)
 40278d4:	d9400017 	ldw	r5,0(sp)
 40278d8:	003fdf06 	br	4027858 <__alt_data_end+0xfffe7858>

040278dc <putc>:
 40278dc:	008100f4 	movhi	r2,1027
 40278e0:	defffc04 	addi	sp,sp,-16
 40278e4:	108c7404 	addi	r2,r2,12752
 40278e8:	dc000115 	stw	r16,4(sp)
 40278ec:	14000017 	ldw	r16,0(r2)
 40278f0:	dc400215 	stw	r17,8(sp)
 40278f4:	dfc00315 	stw	ra,12(sp)
 40278f8:	2023883a 	mov	r17,r4
 40278fc:	80000226 	beq	r16,zero,4027908 <putc+0x2c>
 4027900:	80800e17 	ldw	r2,56(r16)
 4027904:	10001a26 	beq	r2,zero,4027970 <putc+0x94>
 4027908:	28800217 	ldw	r2,8(r5)
 402790c:	10bfffc4 	addi	r2,r2,-1
 4027910:	28800215 	stw	r2,8(r5)
 4027914:	10000b16 	blt	r2,zero,4027944 <putc+0x68>
 4027918:	28800017 	ldw	r2,0(r5)
 402791c:	14400005 	stb	r17,0(r2)
 4027920:	28800017 	ldw	r2,0(r5)
 4027924:	10c00044 	addi	r3,r2,1
 4027928:	28c00015 	stw	r3,0(r5)
 402792c:	10800003 	ldbu	r2,0(r2)
 4027930:	dfc00317 	ldw	ra,12(sp)
 4027934:	dc400217 	ldw	r17,8(sp)
 4027938:	dc000117 	ldw	r16,4(sp)
 402793c:	dec00404 	addi	sp,sp,16
 4027940:	f800283a 	ret
 4027944:	28c00617 	ldw	r3,24(r5)
 4027948:	10c00e16 	blt	r2,r3,4027984 <putc+0xa8>
 402794c:	28800017 	ldw	r2,0(r5)
 4027950:	01000284 	movi	r4,10
 4027954:	14400005 	stb	r17,0(r2)
 4027958:	28800017 	ldw	r2,0(r5)
 402795c:	10c00003 	ldbu	r3,0(r2)
 4027960:	193ff01e 	bne	r3,r4,4027924 <__alt_data_end+0xfffe7924>
 4027964:	280d883a 	mov	r6,r5
 4027968:	180b883a 	mov	r5,r3
 402796c:	00000706 	br	402798c <putc+0xb0>
 4027970:	8009883a 	mov	r4,r16
 4027974:	d9400015 	stw	r5,0(sp)
 4027978:	4024e240 	call	4024e24 <__sinit>
 402797c:	d9400017 	ldw	r5,0(sp)
 4027980:	003fe106 	br	4027908 <__alt_data_end+0xfffe7908>
 4027984:	280d883a 	mov	r6,r5
 4027988:	880b883a 	mov	r5,r17
 402798c:	8009883a 	mov	r4,r16
 4027990:	dfc00317 	ldw	ra,12(sp)
 4027994:	dc400217 	ldw	r17,8(sp)
 4027998:	dc000117 	ldw	r16,4(sp)
 402799c:	dec00404 	addi	sp,sp,16
 40279a0:	40298301 	jmpi	4029830 <__swbuf_r>

040279a4 <_realloc_r>:
 40279a4:	defff604 	addi	sp,sp,-40
 40279a8:	dc800215 	stw	r18,8(sp)
 40279ac:	dfc00915 	stw	ra,36(sp)
 40279b0:	df000815 	stw	fp,32(sp)
 40279b4:	ddc00715 	stw	r23,28(sp)
 40279b8:	dd800615 	stw	r22,24(sp)
 40279bc:	dd400515 	stw	r21,20(sp)
 40279c0:	dd000415 	stw	r20,16(sp)
 40279c4:	dcc00315 	stw	r19,12(sp)
 40279c8:	dc400115 	stw	r17,4(sp)
 40279cc:	dc000015 	stw	r16,0(sp)
 40279d0:	3025883a 	mov	r18,r6
 40279d4:	2800b726 	beq	r5,zero,4027cb4 <_realloc_r+0x310>
 40279d8:	282b883a 	mov	r21,r5
 40279dc:	2029883a 	mov	r20,r4
 40279e0:	402dc940 	call	402dc94 <__malloc_lock>
 40279e4:	a8bfff17 	ldw	r2,-4(r21)
 40279e8:	043fff04 	movi	r16,-4
 40279ec:	90c002c4 	addi	r3,r18,11
 40279f0:	01000584 	movi	r4,22
 40279f4:	acfffe04 	addi	r19,r21,-8
 40279f8:	1420703a 	and	r16,r2,r16
 40279fc:	20c0332e 	bgeu	r4,r3,4027acc <_realloc_r+0x128>
 4027a00:	047ffe04 	movi	r17,-8
 4027a04:	1c62703a 	and	r17,r3,r17
 4027a08:	8807883a 	mov	r3,r17
 4027a0c:	88005816 	blt	r17,zero,4027b70 <_realloc_r+0x1cc>
 4027a10:	8c805736 	bltu	r17,r18,4027b70 <_realloc_r+0x1cc>
 4027a14:	80c0300e 	bge	r16,r3,4027ad8 <_realloc_r+0x134>
 4027a18:	070100f4 	movhi	fp,1027
 4027a1c:	e706c304 	addi	fp,fp,6924
 4027a20:	e1c00217 	ldw	r7,8(fp)
 4027a24:	9c09883a 	add	r4,r19,r16
 4027a28:	22000117 	ldw	r8,4(r4)
 4027a2c:	21c06326 	beq	r4,r7,4027bbc <_realloc_r+0x218>
 4027a30:	017fff84 	movi	r5,-2
 4027a34:	414a703a 	and	r5,r8,r5
 4027a38:	214b883a 	add	r5,r4,r5
 4027a3c:	29800117 	ldw	r6,4(r5)
 4027a40:	3180004c 	andi	r6,r6,1
 4027a44:	30003f26 	beq	r6,zero,4027b44 <_realloc_r+0x1a0>
 4027a48:	1080004c 	andi	r2,r2,1
 4027a4c:	10008326 	beq	r2,zero,4027c5c <_realloc_r+0x2b8>
 4027a50:	900b883a 	mov	r5,r18
 4027a54:	a009883a 	mov	r4,r20
 4027a58:	4025b840 	call	4025b84 <_malloc_r>
 4027a5c:	1025883a 	mov	r18,r2
 4027a60:	10011e26 	beq	r2,zero,4027edc <_realloc_r+0x538>
 4027a64:	a93fff17 	ldw	r4,-4(r21)
 4027a68:	10fffe04 	addi	r3,r2,-8
 4027a6c:	00bfff84 	movi	r2,-2
 4027a70:	2084703a 	and	r2,r4,r2
 4027a74:	9885883a 	add	r2,r19,r2
 4027a78:	1880ee26 	beq	r3,r2,4027e34 <_realloc_r+0x490>
 4027a7c:	81bfff04 	addi	r6,r16,-4
 4027a80:	00800904 	movi	r2,36
 4027a84:	1180b836 	bltu	r2,r6,4027d68 <_realloc_r+0x3c4>
 4027a88:	00c004c4 	movi	r3,19
 4027a8c:	19809636 	bltu	r3,r6,4027ce8 <_realloc_r+0x344>
 4027a90:	9005883a 	mov	r2,r18
 4027a94:	a807883a 	mov	r3,r21
 4027a98:	19000017 	ldw	r4,0(r3)
 4027a9c:	11000015 	stw	r4,0(r2)
 4027aa0:	19000117 	ldw	r4,4(r3)
 4027aa4:	11000115 	stw	r4,4(r2)
 4027aa8:	18c00217 	ldw	r3,8(r3)
 4027aac:	10c00215 	stw	r3,8(r2)
 4027ab0:	a80b883a 	mov	r5,r21
 4027ab4:	a009883a 	mov	r4,r20
 4027ab8:	4024f980 	call	4024f98 <_free_r>
 4027abc:	a009883a 	mov	r4,r20
 4027ac0:	402dcb80 	call	402dcb8 <__malloc_unlock>
 4027ac4:	9005883a 	mov	r2,r18
 4027ac8:	00001206 	br	4027b14 <_realloc_r+0x170>
 4027acc:	00c00404 	movi	r3,16
 4027ad0:	1823883a 	mov	r17,r3
 4027ad4:	003fce06 	br	4027a10 <__alt_data_end+0xfffe7a10>
 4027ad8:	a825883a 	mov	r18,r21
 4027adc:	8445c83a 	sub	r2,r16,r17
 4027ae0:	00c003c4 	movi	r3,15
 4027ae4:	18802636 	bltu	r3,r2,4027b80 <_realloc_r+0x1dc>
 4027ae8:	99800117 	ldw	r6,4(r19)
 4027aec:	9c07883a 	add	r3,r19,r16
 4027af0:	3180004c 	andi	r6,r6,1
 4027af4:	3420b03a 	or	r16,r6,r16
 4027af8:	9c000115 	stw	r16,4(r19)
 4027afc:	18800117 	ldw	r2,4(r3)
 4027b00:	10800054 	ori	r2,r2,1
 4027b04:	18800115 	stw	r2,4(r3)
 4027b08:	a009883a 	mov	r4,r20
 4027b0c:	402dcb80 	call	402dcb8 <__malloc_unlock>
 4027b10:	9005883a 	mov	r2,r18
 4027b14:	dfc00917 	ldw	ra,36(sp)
 4027b18:	df000817 	ldw	fp,32(sp)
 4027b1c:	ddc00717 	ldw	r23,28(sp)
 4027b20:	dd800617 	ldw	r22,24(sp)
 4027b24:	dd400517 	ldw	r21,20(sp)
 4027b28:	dd000417 	ldw	r20,16(sp)
 4027b2c:	dcc00317 	ldw	r19,12(sp)
 4027b30:	dc800217 	ldw	r18,8(sp)
 4027b34:	dc400117 	ldw	r17,4(sp)
 4027b38:	dc000017 	ldw	r16,0(sp)
 4027b3c:	dec00a04 	addi	sp,sp,40
 4027b40:	f800283a 	ret
 4027b44:	017fff04 	movi	r5,-4
 4027b48:	414a703a 	and	r5,r8,r5
 4027b4c:	814d883a 	add	r6,r16,r5
 4027b50:	30c01f16 	blt	r6,r3,4027bd0 <_realloc_r+0x22c>
 4027b54:	20800317 	ldw	r2,12(r4)
 4027b58:	20c00217 	ldw	r3,8(r4)
 4027b5c:	a825883a 	mov	r18,r21
 4027b60:	3021883a 	mov	r16,r6
 4027b64:	18800315 	stw	r2,12(r3)
 4027b68:	10c00215 	stw	r3,8(r2)
 4027b6c:	003fdb06 	br	4027adc <__alt_data_end+0xfffe7adc>
 4027b70:	00800304 	movi	r2,12
 4027b74:	a0800015 	stw	r2,0(r20)
 4027b78:	0005883a 	mov	r2,zero
 4027b7c:	003fe506 	br	4027b14 <__alt_data_end+0xfffe7b14>
 4027b80:	98c00117 	ldw	r3,4(r19)
 4027b84:	9c4b883a 	add	r5,r19,r17
 4027b88:	11000054 	ori	r4,r2,1
 4027b8c:	18c0004c 	andi	r3,r3,1
 4027b90:	1c62b03a 	or	r17,r3,r17
 4027b94:	9c400115 	stw	r17,4(r19)
 4027b98:	29000115 	stw	r4,4(r5)
 4027b9c:	2885883a 	add	r2,r5,r2
 4027ba0:	10c00117 	ldw	r3,4(r2)
 4027ba4:	29400204 	addi	r5,r5,8
 4027ba8:	a009883a 	mov	r4,r20
 4027bac:	18c00054 	ori	r3,r3,1
 4027bb0:	10c00115 	stw	r3,4(r2)
 4027bb4:	4024f980 	call	4024f98 <_free_r>
 4027bb8:	003fd306 	br	4027b08 <__alt_data_end+0xfffe7b08>
 4027bbc:	017fff04 	movi	r5,-4
 4027bc0:	414a703a 	and	r5,r8,r5
 4027bc4:	89800404 	addi	r6,r17,16
 4027bc8:	8151883a 	add	r8,r16,r5
 4027bcc:	4180590e 	bge	r8,r6,4027d34 <_realloc_r+0x390>
 4027bd0:	1080004c 	andi	r2,r2,1
 4027bd4:	103f9e1e 	bne	r2,zero,4027a50 <__alt_data_end+0xfffe7a50>
 4027bd8:	adbffe17 	ldw	r22,-8(r21)
 4027bdc:	00bfff04 	movi	r2,-4
 4027be0:	9dadc83a 	sub	r22,r19,r22
 4027be4:	b1800117 	ldw	r6,4(r22)
 4027be8:	3084703a 	and	r2,r6,r2
 4027bec:	20002026 	beq	r4,zero,4027c70 <_realloc_r+0x2cc>
 4027bf0:	80af883a 	add	r23,r16,r2
 4027bf4:	b96f883a 	add	r23,r23,r5
 4027bf8:	21c05f26 	beq	r4,r7,4027d78 <_realloc_r+0x3d4>
 4027bfc:	b8c01c16 	blt	r23,r3,4027c70 <_realloc_r+0x2cc>
 4027c00:	20800317 	ldw	r2,12(r4)
 4027c04:	20c00217 	ldw	r3,8(r4)
 4027c08:	81bfff04 	addi	r6,r16,-4
 4027c0c:	01000904 	movi	r4,36
 4027c10:	18800315 	stw	r2,12(r3)
 4027c14:	10c00215 	stw	r3,8(r2)
 4027c18:	b0c00217 	ldw	r3,8(r22)
 4027c1c:	b0800317 	ldw	r2,12(r22)
 4027c20:	b4800204 	addi	r18,r22,8
 4027c24:	18800315 	stw	r2,12(r3)
 4027c28:	10c00215 	stw	r3,8(r2)
 4027c2c:	21801b36 	bltu	r4,r6,4027c9c <_realloc_r+0x2f8>
 4027c30:	008004c4 	movi	r2,19
 4027c34:	1180352e 	bgeu	r2,r6,4027d0c <_realloc_r+0x368>
 4027c38:	a8800017 	ldw	r2,0(r21)
 4027c3c:	b0800215 	stw	r2,8(r22)
 4027c40:	a8800117 	ldw	r2,4(r21)
 4027c44:	b0800315 	stw	r2,12(r22)
 4027c48:	008006c4 	movi	r2,27
 4027c4c:	11807f36 	bltu	r2,r6,4027e4c <_realloc_r+0x4a8>
 4027c50:	b0800404 	addi	r2,r22,16
 4027c54:	ad400204 	addi	r21,r21,8
 4027c58:	00002d06 	br	4027d10 <_realloc_r+0x36c>
 4027c5c:	adbffe17 	ldw	r22,-8(r21)
 4027c60:	00bfff04 	movi	r2,-4
 4027c64:	9dadc83a 	sub	r22,r19,r22
 4027c68:	b1000117 	ldw	r4,4(r22)
 4027c6c:	2084703a 	and	r2,r4,r2
 4027c70:	b03f7726 	beq	r22,zero,4027a50 <__alt_data_end+0xfffe7a50>
 4027c74:	80af883a 	add	r23,r16,r2
 4027c78:	b8ff7516 	blt	r23,r3,4027a50 <__alt_data_end+0xfffe7a50>
 4027c7c:	b0800317 	ldw	r2,12(r22)
 4027c80:	b0c00217 	ldw	r3,8(r22)
 4027c84:	81bfff04 	addi	r6,r16,-4
 4027c88:	01000904 	movi	r4,36
 4027c8c:	18800315 	stw	r2,12(r3)
 4027c90:	10c00215 	stw	r3,8(r2)
 4027c94:	b4800204 	addi	r18,r22,8
 4027c98:	21bfe52e 	bgeu	r4,r6,4027c30 <__alt_data_end+0xfffe7c30>
 4027c9c:	a80b883a 	mov	r5,r21
 4027ca0:	9009883a 	mov	r4,r18
 4027ca4:	40265bc0 	call	40265bc <memmove>
 4027ca8:	b821883a 	mov	r16,r23
 4027cac:	b027883a 	mov	r19,r22
 4027cb0:	003f8a06 	br	4027adc <__alt_data_end+0xfffe7adc>
 4027cb4:	300b883a 	mov	r5,r6
 4027cb8:	dfc00917 	ldw	ra,36(sp)
 4027cbc:	df000817 	ldw	fp,32(sp)
 4027cc0:	ddc00717 	ldw	r23,28(sp)
 4027cc4:	dd800617 	ldw	r22,24(sp)
 4027cc8:	dd400517 	ldw	r21,20(sp)
 4027ccc:	dd000417 	ldw	r20,16(sp)
 4027cd0:	dcc00317 	ldw	r19,12(sp)
 4027cd4:	dc800217 	ldw	r18,8(sp)
 4027cd8:	dc400117 	ldw	r17,4(sp)
 4027cdc:	dc000017 	ldw	r16,0(sp)
 4027ce0:	dec00a04 	addi	sp,sp,40
 4027ce4:	4025b841 	jmpi	4025b84 <_malloc_r>
 4027ce8:	a8c00017 	ldw	r3,0(r21)
 4027cec:	90c00015 	stw	r3,0(r18)
 4027cf0:	a8c00117 	ldw	r3,4(r21)
 4027cf4:	90c00115 	stw	r3,4(r18)
 4027cf8:	00c006c4 	movi	r3,27
 4027cfc:	19804536 	bltu	r3,r6,4027e14 <_realloc_r+0x470>
 4027d00:	90800204 	addi	r2,r18,8
 4027d04:	a8c00204 	addi	r3,r21,8
 4027d08:	003f6306 	br	4027a98 <__alt_data_end+0xfffe7a98>
 4027d0c:	9005883a 	mov	r2,r18
 4027d10:	a8c00017 	ldw	r3,0(r21)
 4027d14:	b821883a 	mov	r16,r23
 4027d18:	b027883a 	mov	r19,r22
 4027d1c:	10c00015 	stw	r3,0(r2)
 4027d20:	a8c00117 	ldw	r3,4(r21)
 4027d24:	10c00115 	stw	r3,4(r2)
 4027d28:	a8c00217 	ldw	r3,8(r21)
 4027d2c:	10c00215 	stw	r3,8(r2)
 4027d30:	003f6a06 	br	4027adc <__alt_data_end+0xfffe7adc>
 4027d34:	9c67883a 	add	r19,r19,r17
 4027d38:	4445c83a 	sub	r2,r8,r17
 4027d3c:	e4c00215 	stw	r19,8(fp)
 4027d40:	10800054 	ori	r2,r2,1
 4027d44:	98800115 	stw	r2,4(r19)
 4027d48:	a8bfff17 	ldw	r2,-4(r21)
 4027d4c:	a009883a 	mov	r4,r20
 4027d50:	1080004c 	andi	r2,r2,1
 4027d54:	1462b03a 	or	r17,r2,r17
 4027d58:	ac7fff15 	stw	r17,-4(r21)
 4027d5c:	402dcb80 	call	402dcb8 <__malloc_unlock>
 4027d60:	a805883a 	mov	r2,r21
 4027d64:	003f6b06 	br	4027b14 <__alt_data_end+0xfffe7b14>
 4027d68:	a80b883a 	mov	r5,r21
 4027d6c:	9009883a 	mov	r4,r18
 4027d70:	40265bc0 	call	40265bc <memmove>
 4027d74:	003f4e06 	br	4027ab0 <__alt_data_end+0xfffe7ab0>
 4027d78:	89000404 	addi	r4,r17,16
 4027d7c:	b93fbc16 	blt	r23,r4,4027c70 <__alt_data_end+0xfffe7c70>
 4027d80:	b0800317 	ldw	r2,12(r22)
 4027d84:	b0c00217 	ldw	r3,8(r22)
 4027d88:	81bfff04 	addi	r6,r16,-4
 4027d8c:	01000904 	movi	r4,36
 4027d90:	18800315 	stw	r2,12(r3)
 4027d94:	10c00215 	stw	r3,8(r2)
 4027d98:	b4800204 	addi	r18,r22,8
 4027d9c:	21804336 	bltu	r4,r6,4027eac <_realloc_r+0x508>
 4027da0:	008004c4 	movi	r2,19
 4027da4:	11803f2e 	bgeu	r2,r6,4027ea4 <_realloc_r+0x500>
 4027da8:	a8800017 	ldw	r2,0(r21)
 4027dac:	b0800215 	stw	r2,8(r22)
 4027db0:	a8800117 	ldw	r2,4(r21)
 4027db4:	b0800315 	stw	r2,12(r22)
 4027db8:	008006c4 	movi	r2,27
 4027dbc:	11803f36 	bltu	r2,r6,4027ebc <_realloc_r+0x518>
 4027dc0:	b0800404 	addi	r2,r22,16
 4027dc4:	ad400204 	addi	r21,r21,8
 4027dc8:	a8c00017 	ldw	r3,0(r21)
 4027dcc:	10c00015 	stw	r3,0(r2)
 4027dd0:	a8c00117 	ldw	r3,4(r21)
 4027dd4:	10c00115 	stw	r3,4(r2)
 4027dd8:	a8c00217 	ldw	r3,8(r21)
 4027ddc:	10c00215 	stw	r3,8(r2)
 4027de0:	b447883a 	add	r3,r22,r17
 4027de4:	bc45c83a 	sub	r2,r23,r17
 4027de8:	e0c00215 	stw	r3,8(fp)
 4027dec:	10800054 	ori	r2,r2,1
 4027df0:	18800115 	stw	r2,4(r3)
 4027df4:	b0800117 	ldw	r2,4(r22)
 4027df8:	a009883a 	mov	r4,r20
 4027dfc:	1080004c 	andi	r2,r2,1
 4027e00:	1462b03a 	or	r17,r2,r17
 4027e04:	b4400115 	stw	r17,4(r22)
 4027e08:	402dcb80 	call	402dcb8 <__malloc_unlock>
 4027e0c:	9005883a 	mov	r2,r18
 4027e10:	003f4006 	br	4027b14 <__alt_data_end+0xfffe7b14>
 4027e14:	a8c00217 	ldw	r3,8(r21)
 4027e18:	90c00215 	stw	r3,8(r18)
 4027e1c:	a8c00317 	ldw	r3,12(r21)
 4027e20:	90c00315 	stw	r3,12(r18)
 4027e24:	30801126 	beq	r6,r2,4027e6c <_realloc_r+0x4c8>
 4027e28:	90800404 	addi	r2,r18,16
 4027e2c:	a8c00404 	addi	r3,r21,16
 4027e30:	003f1906 	br	4027a98 <__alt_data_end+0xfffe7a98>
 4027e34:	90ffff17 	ldw	r3,-4(r18)
 4027e38:	00bfff04 	movi	r2,-4
 4027e3c:	a825883a 	mov	r18,r21
 4027e40:	1884703a 	and	r2,r3,r2
 4027e44:	80a1883a 	add	r16,r16,r2
 4027e48:	003f2406 	br	4027adc <__alt_data_end+0xfffe7adc>
 4027e4c:	a8800217 	ldw	r2,8(r21)
 4027e50:	b0800415 	stw	r2,16(r22)
 4027e54:	a8800317 	ldw	r2,12(r21)
 4027e58:	b0800515 	stw	r2,20(r22)
 4027e5c:	31000a26 	beq	r6,r4,4027e88 <_realloc_r+0x4e4>
 4027e60:	b0800604 	addi	r2,r22,24
 4027e64:	ad400404 	addi	r21,r21,16
 4027e68:	003fa906 	br	4027d10 <__alt_data_end+0xfffe7d10>
 4027e6c:	a9000417 	ldw	r4,16(r21)
 4027e70:	90800604 	addi	r2,r18,24
 4027e74:	a8c00604 	addi	r3,r21,24
 4027e78:	91000415 	stw	r4,16(r18)
 4027e7c:	a9000517 	ldw	r4,20(r21)
 4027e80:	91000515 	stw	r4,20(r18)
 4027e84:	003f0406 	br	4027a98 <__alt_data_end+0xfffe7a98>
 4027e88:	a8c00417 	ldw	r3,16(r21)
 4027e8c:	ad400604 	addi	r21,r21,24
 4027e90:	b0800804 	addi	r2,r22,32
 4027e94:	b0c00615 	stw	r3,24(r22)
 4027e98:	a8ffff17 	ldw	r3,-4(r21)
 4027e9c:	b0c00715 	stw	r3,28(r22)
 4027ea0:	003f9b06 	br	4027d10 <__alt_data_end+0xfffe7d10>
 4027ea4:	9005883a 	mov	r2,r18
 4027ea8:	003fc706 	br	4027dc8 <__alt_data_end+0xfffe7dc8>
 4027eac:	a80b883a 	mov	r5,r21
 4027eb0:	9009883a 	mov	r4,r18
 4027eb4:	40265bc0 	call	40265bc <memmove>
 4027eb8:	003fc906 	br	4027de0 <__alt_data_end+0xfffe7de0>
 4027ebc:	a8800217 	ldw	r2,8(r21)
 4027ec0:	b0800415 	stw	r2,16(r22)
 4027ec4:	a8800317 	ldw	r2,12(r21)
 4027ec8:	b0800515 	stw	r2,20(r22)
 4027ecc:	31000726 	beq	r6,r4,4027eec <_realloc_r+0x548>
 4027ed0:	b0800604 	addi	r2,r22,24
 4027ed4:	ad400404 	addi	r21,r21,16
 4027ed8:	003fbb06 	br	4027dc8 <__alt_data_end+0xfffe7dc8>
 4027edc:	a009883a 	mov	r4,r20
 4027ee0:	402dcb80 	call	402dcb8 <__malloc_unlock>
 4027ee4:	0005883a 	mov	r2,zero
 4027ee8:	003f0a06 	br	4027b14 <__alt_data_end+0xfffe7b14>
 4027eec:	a8c00417 	ldw	r3,16(r21)
 4027ef0:	ad400604 	addi	r21,r21,24
 4027ef4:	b0800804 	addi	r2,r22,32
 4027ef8:	b0c00615 	stw	r3,24(r22)
 4027efc:	a8ffff17 	ldw	r3,-4(r21)
 4027f00:	b0c00715 	stw	r3,28(r22)
 4027f04:	003fb006 	br	4027dc8 <__alt_data_end+0xfffe7dc8>

04027f08 <__fpclassifyd>:
 4027f08:	00a00034 	movhi	r2,32768
 4027f0c:	10bfffc4 	addi	r2,r2,-1
 4027f10:	2884703a 	and	r2,r5,r2
 4027f14:	10000726 	beq	r2,zero,4027f34 <__fpclassifyd+0x2c>
 4027f18:	00fffc34 	movhi	r3,65520
 4027f1c:	019ff834 	movhi	r6,32736
 4027f20:	28c7883a 	add	r3,r5,r3
 4027f24:	31bfffc4 	addi	r6,r6,-1
 4027f28:	30c00536 	bltu	r6,r3,4027f40 <__fpclassifyd+0x38>
 4027f2c:	00800104 	movi	r2,4
 4027f30:	f800283a 	ret
 4027f34:	2000021e 	bne	r4,zero,4027f40 <__fpclassifyd+0x38>
 4027f38:	00800084 	movi	r2,2
 4027f3c:	f800283a 	ret
 4027f40:	00dffc34 	movhi	r3,32752
 4027f44:	019ff834 	movhi	r6,32736
 4027f48:	28cb883a 	add	r5,r5,r3
 4027f4c:	31bfffc4 	addi	r6,r6,-1
 4027f50:	317ff62e 	bgeu	r6,r5,4027f2c <__alt_data_end+0xfffe7f2c>
 4027f54:	01400434 	movhi	r5,16
 4027f58:	297fffc4 	addi	r5,r5,-1
 4027f5c:	28800236 	bltu	r5,r2,4027f68 <__fpclassifyd+0x60>
 4027f60:	008000c4 	movi	r2,3
 4027f64:	f800283a 	ret
 4027f68:	10c00226 	beq	r2,r3,4027f74 <__fpclassifyd+0x6c>
 4027f6c:	0005883a 	mov	r2,zero
 4027f70:	f800283a 	ret
 4027f74:	2005003a 	cmpeq	r2,r4,zero
 4027f78:	f800283a 	ret

04027f7c <_sbrk_r>:
 4027f7c:	defffd04 	addi	sp,sp,-12
 4027f80:	dc000015 	stw	r16,0(sp)
 4027f84:	040100f4 	movhi	r16,1027
 4027f88:	dc400115 	stw	r17,4(sp)
 4027f8c:	84137904 	addi	r16,r16,19940
 4027f90:	2023883a 	mov	r17,r4
 4027f94:	2809883a 	mov	r4,r5
 4027f98:	dfc00215 	stw	ra,8(sp)
 4027f9c:	80000015 	stw	zero,0(r16)
 4027fa0:	402de780 	call	402de78 <sbrk>
 4027fa4:	00ffffc4 	movi	r3,-1
 4027fa8:	10c00526 	beq	r2,r3,4027fc0 <_sbrk_r+0x44>
 4027fac:	dfc00217 	ldw	ra,8(sp)
 4027fb0:	dc400117 	ldw	r17,4(sp)
 4027fb4:	dc000017 	ldw	r16,0(sp)
 4027fb8:	dec00304 	addi	sp,sp,12
 4027fbc:	f800283a 	ret
 4027fc0:	80c00017 	ldw	r3,0(r16)
 4027fc4:	183ff926 	beq	r3,zero,4027fac <__alt_data_end+0xfffe7fac>
 4027fc8:	88c00015 	stw	r3,0(r17)
 4027fcc:	003ff706 	br	4027fac <__alt_data_end+0xfffe7fac>

04027fd0 <__sread>:
 4027fd0:	defffe04 	addi	sp,sp,-8
 4027fd4:	dc000015 	stw	r16,0(sp)
 4027fd8:	2821883a 	mov	r16,r5
 4027fdc:	2940038f 	ldh	r5,14(r5)
 4027fe0:	dfc00115 	stw	ra,4(sp)
 4027fe4:	4029f1c0 	call	4029f1c <_read_r>
 4027fe8:	10000716 	blt	r2,zero,4028008 <__sread+0x38>
 4027fec:	80c01417 	ldw	r3,80(r16)
 4027ff0:	1887883a 	add	r3,r3,r2
 4027ff4:	80c01415 	stw	r3,80(r16)
 4027ff8:	dfc00117 	ldw	ra,4(sp)
 4027ffc:	dc000017 	ldw	r16,0(sp)
 4028000:	dec00204 	addi	sp,sp,8
 4028004:	f800283a 	ret
 4028008:	80c0030b 	ldhu	r3,12(r16)
 402800c:	18fbffcc 	andi	r3,r3,61439
 4028010:	80c0030d 	sth	r3,12(r16)
 4028014:	dfc00117 	ldw	ra,4(sp)
 4028018:	dc000017 	ldw	r16,0(sp)
 402801c:	dec00204 	addi	sp,sp,8
 4028020:	f800283a 	ret

04028024 <__seofread>:
 4028024:	0005883a 	mov	r2,zero
 4028028:	f800283a 	ret

0402802c <__swrite>:
 402802c:	2880030b 	ldhu	r2,12(r5)
 4028030:	defffb04 	addi	sp,sp,-20
 4028034:	dcc00315 	stw	r19,12(sp)
 4028038:	dc800215 	stw	r18,8(sp)
 402803c:	dc400115 	stw	r17,4(sp)
 4028040:	dc000015 	stw	r16,0(sp)
 4028044:	dfc00415 	stw	ra,16(sp)
 4028048:	10c0400c 	andi	r3,r2,256
 402804c:	2821883a 	mov	r16,r5
 4028050:	2023883a 	mov	r17,r4
 4028054:	3025883a 	mov	r18,r6
 4028058:	3827883a 	mov	r19,r7
 402805c:	18000526 	beq	r3,zero,4028074 <__swrite+0x48>
 4028060:	2940038f 	ldh	r5,14(r5)
 4028064:	01c00084 	movi	r7,2
 4028068:	000d883a 	mov	r6,zero
 402806c:	4029ebc0 	call	4029ebc <_lseek_r>
 4028070:	8080030b 	ldhu	r2,12(r16)
 4028074:	8140038f 	ldh	r5,14(r16)
 4028078:	10bbffcc 	andi	r2,r2,61439
 402807c:	980f883a 	mov	r7,r19
 4028080:	900d883a 	mov	r6,r18
 4028084:	8809883a 	mov	r4,r17
 4028088:	8080030d 	sth	r2,12(r16)
 402808c:	dfc00417 	ldw	ra,16(sp)
 4028090:	dcc00317 	ldw	r19,12(sp)
 4028094:	dc800217 	ldw	r18,8(sp)
 4028098:	dc400117 	ldw	r17,4(sp)
 402809c:	dc000017 	ldw	r16,0(sp)
 40280a0:	dec00504 	addi	sp,sp,20
 40280a4:	40299881 	jmpi	4029988 <_write_r>

040280a8 <__sseek>:
 40280a8:	defffe04 	addi	sp,sp,-8
 40280ac:	dc000015 	stw	r16,0(sp)
 40280b0:	2821883a 	mov	r16,r5
 40280b4:	2940038f 	ldh	r5,14(r5)
 40280b8:	dfc00115 	stw	ra,4(sp)
 40280bc:	4029ebc0 	call	4029ebc <_lseek_r>
 40280c0:	00ffffc4 	movi	r3,-1
 40280c4:	10c00826 	beq	r2,r3,40280e8 <__sseek+0x40>
 40280c8:	80c0030b 	ldhu	r3,12(r16)
 40280cc:	80801415 	stw	r2,80(r16)
 40280d0:	18c40014 	ori	r3,r3,4096
 40280d4:	80c0030d 	sth	r3,12(r16)
 40280d8:	dfc00117 	ldw	ra,4(sp)
 40280dc:	dc000017 	ldw	r16,0(sp)
 40280e0:	dec00204 	addi	sp,sp,8
 40280e4:	f800283a 	ret
 40280e8:	80c0030b 	ldhu	r3,12(r16)
 40280ec:	18fbffcc 	andi	r3,r3,61439
 40280f0:	80c0030d 	sth	r3,12(r16)
 40280f4:	dfc00117 	ldw	ra,4(sp)
 40280f8:	dc000017 	ldw	r16,0(sp)
 40280fc:	dec00204 	addi	sp,sp,8
 4028100:	f800283a 	ret

04028104 <__sclose>:
 4028104:	2940038f 	ldh	r5,14(r5)
 4028108:	40299e81 	jmpi	40299e8 <_close_r>

0402810c <strcmp>:
 402810c:	2144b03a 	or	r2,r4,r5
 4028110:	108000cc 	andi	r2,r2,3
 4028114:	1000171e 	bne	r2,zero,4028174 <strcmp+0x68>
 4028118:	20800017 	ldw	r2,0(r4)
 402811c:	28c00017 	ldw	r3,0(r5)
 4028120:	10c0141e 	bne	r2,r3,4028174 <strcmp+0x68>
 4028124:	027fbff4 	movhi	r9,65279
 4028128:	4a7fbfc4 	addi	r9,r9,-257
 402812c:	0086303a 	nor	r3,zero,r2
 4028130:	02202074 	movhi	r8,32897
 4028134:	1245883a 	add	r2,r2,r9
 4028138:	42202004 	addi	r8,r8,-32640
 402813c:	10c4703a 	and	r2,r2,r3
 4028140:	1204703a 	and	r2,r2,r8
 4028144:	10000226 	beq	r2,zero,4028150 <strcmp+0x44>
 4028148:	00002306 	br	40281d8 <strcmp+0xcc>
 402814c:	1000221e 	bne	r2,zero,40281d8 <strcmp+0xcc>
 4028150:	21000104 	addi	r4,r4,4
 4028154:	20c00017 	ldw	r3,0(r4)
 4028158:	29400104 	addi	r5,r5,4
 402815c:	29800017 	ldw	r6,0(r5)
 4028160:	1a4f883a 	add	r7,r3,r9
 4028164:	00c4303a 	nor	r2,zero,r3
 4028168:	3884703a 	and	r2,r7,r2
 402816c:	1204703a 	and	r2,r2,r8
 4028170:	19bff626 	beq	r3,r6,402814c <__alt_data_end+0xfffe814c>
 4028174:	20800003 	ldbu	r2,0(r4)
 4028178:	10c03fcc 	andi	r3,r2,255
 402817c:	18c0201c 	xori	r3,r3,128
 4028180:	18ffe004 	addi	r3,r3,-128
 4028184:	18000c26 	beq	r3,zero,40281b8 <strcmp+0xac>
 4028188:	29800007 	ldb	r6,0(r5)
 402818c:	19800326 	beq	r3,r6,402819c <strcmp+0x90>
 4028190:	00001306 	br	40281e0 <strcmp+0xd4>
 4028194:	29800007 	ldb	r6,0(r5)
 4028198:	11800b1e 	bne	r2,r6,40281c8 <strcmp+0xbc>
 402819c:	21000044 	addi	r4,r4,1
 40281a0:	20c00003 	ldbu	r3,0(r4)
 40281a4:	29400044 	addi	r5,r5,1
 40281a8:	18803fcc 	andi	r2,r3,255
 40281ac:	1080201c 	xori	r2,r2,128
 40281b0:	10bfe004 	addi	r2,r2,-128
 40281b4:	103ff71e 	bne	r2,zero,4028194 <__alt_data_end+0xfffe8194>
 40281b8:	0007883a 	mov	r3,zero
 40281bc:	28800003 	ldbu	r2,0(r5)
 40281c0:	1885c83a 	sub	r2,r3,r2
 40281c4:	f800283a 	ret
 40281c8:	28800003 	ldbu	r2,0(r5)
 40281cc:	18c03fcc 	andi	r3,r3,255
 40281d0:	1885c83a 	sub	r2,r3,r2
 40281d4:	f800283a 	ret
 40281d8:	0005883a 	mov	r2,zero
 40281dc:	f800283a 	ret
 40281e0:	10c03fcc 	andi	r3,r2,255
 40281e4:	003ff506 	br	40281bc <__alt_data_end+0xfffe81bc>

040281e8 <__sprint_r.part.0>:
 40281e8:	28801917 	ldw	r2,100(r5)
 40281ec:	defff604 	addi	sp,sp,-40
 40281f0:	dd400515 	stw	r21,20(sp)
 40281f4:	dfc00915 	stw	ra,36(sp)
 40281f8:	df000815 	stw	fp,32(sp)
 40281fc:	ddc00715 	stw	r23,28(sp)
 4028200:	dd800615 	stw	r22,24(sp)
 4028204:	dd000415 	stw	r20,16(sp)
 4028208:	dcc00315 	stw	r19,12(sp)
 402820c:	dc800215 	stw	r18,8(sp)
 4028210:	dc400115 	stw	r17,4(sp)
 4028214:	dc000015 	stw	r16,0(sp)
 4028218:	1088000c 	andi	r2,r2,8192
 402821c:	302b883a 	mov	r21,r6
 4028220:	10002e26 	beq	r2,zero,40282dc <__sprint_r.part.0+0xf4>
 4028224:	30800217 	ldw	r2,8(r6)
 4028228:	35800017 	ldw	r22,0(r6)
 402822c:	10002926 	beq	r2,zero,40282d4 <__sprint_r.part.0+0xec>
 4028230:	2827883a 	mov	r19,r5
 4028234:	2029883a 	mov	r20,r4
 4028238:	b5c00104 	addi	r23,r22,4
 402823c:	04bfffc4 	movi	r18,-1
 4028240:	bc400017 	ldw	r17,0(r23)
 4028244:	b4000017 	ldw	r16,0(r22)
 4028248:	0039883a 	mov	fp,zero
 402824c:	8822d0ba 	srli	r17,r17,2
 4028250:	8800031e 	bne	r17,zero,4028260 <__sprint_r.part.0+0x78>
 4028254:	00001806 	br	40282b8 <__sprint_r.part.0+0xd0>
 4028258:	84000104 	addi	r16,r16,4
 402825c:	8f001526 	beq	r17,fp,40282b4 <__sprint_r.part.0+0xcc>
 4028260:	81400017 	ldw	r5,0(r16)
 4028264:	980d883a 	mov	r6,r19
 4028268:	a009883a 	mov	r4,r20
 402826c:	4029d680 	call	4029d68 <_fputwc_r>
 4028270:	e7000044 	addi	fp,fp,1
 4028274:	14bff81e 	bne	r2,r18,4028258 <__alt_data_end+0xfffe8258>
 4028278:	9005883a 	mov	r2,r18
 402827c:	a8000215 	stw	zero,8(r21)
 4028280:	a8000115 	stw	zero,4(r21)
 4028284:	dfc00917 	ldw	ra,36(sp)
 4028288:	df000817 	ldw	fp,32(sp)
 402828c:	ddc00717 	ldw	r23,28(sp)
 4028290:	dd800617 	ldw	r22,24(sp)
 4028294:	dd400517 	ldw	r21,20(sp)
 4028298:	dd000417 	ldw	r20,16(sp)
 402829c:	dcc00317 	ldw	r19,12(sp)
 40282a0:	dc800217 	ldw	r18,8(sp)
 40282a4:	dc400117 	ldw	r17,4(sp)
 40282a8:	dc000017 	ldw	r16,0(sp)
 40282ac:	dec00a04 	addi	sp,sp,40
 40282b0:	f800283a 	ret
 40282b4:	a8800217 	ldw	r2,8(r21)
 40282b8:	8c63883a 	add	r17,r17,r17
 40282bc:	8c63883a 	add	r17,r17,r17
 40282c0:	1445c83a 	sub	r2,r2,r17
 40282c4:	a8800215 	stw	r2,8(r21)
 40282c8:	b5800204 	addi	r22,r22,8
 40282cc:	bdc00204 	addi	r23,r23,8
 40282d0:	103fdb1e 	bne	r2,zero,4028240 <__alt_data_end+0xfffe8240>
 40282d4:	0005883a 	mov	r2,zero
 40282d8:	003fe806 	br	402827c <__alt_data_end+0xfffe827c>
 40282dc:	40252a80 	call	40252a8 <__sfvwrite_r>
 40282e0:	003fe606 	br	402827c <__alt_data_end+0xfffe827c>

040282e4 <__sprint_r>:
 40282e4:	30c00217 	ldw	r3,8(r6)
 40282e8:	18000126 	beq	r3,zero,40282f0 <__sprint_r+0xc>
 40282ec:	40281e81 	jmpi	40281e8 <__sprint_r.part.0>
 40282f0:	30000115 	stw	zero,4(r6)
 40282f4:	0005883a 	mov	r2,zero
 40282f8:	f800283a 	ret

040282fc <___vfiprintf_internal_r>:
 40282fc:	deffc904 	addi	sp,sp,-220
 4028300:	df003515 	stw	fp,212(sp)
 4028304:	dd003115 	stw	r20,196(sp)
 4028308:	dfc03615 	stw	ra,216(sp)
 402830c:	ddc03415 	stw	r23,208(sp)
 4028310:	dd803315 	stw	r22,204(sp)
 4028314:	dd403215 	stw	r21,200(sp)
 4028318:	dcc03015 	stw	r19,192(sp)
 402831c:	dc802f15 	stw	r18,188(sp)
 4028320:	dc402e15 	stw	r17,184(sp)
 4028324:	dc002d15 	stw	r16,180(sp)
 4028328:	d9002015 	stw	r4,128(sp)
 402832c:	d9c02215 	stw	r7,136(sp)
 4028330:	2829883a 	mov	r20,r5
 4028334:	3039883a 	mov	fp,r6
 4028338:	20000226 	beq	r4,zero,4028344 <___vfiprintf_internal_r+0x48>
 402833c:	20800e17 	ldw	r2,56(r4)
 4028340:	1000cf26 	beq	r2,zero,4028680 <___vfiprintf_internal_r+0x384>
 4028344:	a080030b 	ldhu	r2,12(r20)
 4028348:	10c8000c 	andi	r3,r2,8192
 402834c:	1800061e 	bne	r3,zero,4028368 <___vfiprintf_internal_r+0x6c>
 4028350:	a1001917 	ldw	r4,100(r20)
 4028354:	00f7ffc4 	movi	r3,-8193
 4028358:	10880014 	ori	r2,r2,8192
 402835c:	20c6703a 	and	r3,r4,r3
 4028360:	a080030d 	sth	r2,12(r20)
 4028364:	a0c01915 	stw	r3,100(r20)
 4028368:	10c0020c 	andi	r3,r2,8
 402836c:	1800a926 	beq	r3,zero,4028614 <___vfiprintf_internal_r+0x318>
 4028370:	a0c00417 	ldw	r3,16(r20)
 4028374:	1800a726 	beq	r3,zero,4028614 <___vfiprintf_internal_r+0x318>
 4028378:	1080068c 	andi	r2,r2,26
 402837c:	00c00284 	movi	r3,10
 4028380:	10c0ac26 	beq	r2,r3,4028634 <___vfiprintf_internal_r+0x338>
 4028384:	da801a04 	addi	r10,sp,104
 4028388:	da801e15 	stw	r10,120(sp)
 402838c:	d8801e17 	ldw	r2,120(sp)
 4028390:	da8019c4 	addi	r10,sp,103
 4028394:	058100f4 	movhi	r22,1027
 4028398:	05c100f4 	movhi	r23,1027
 402839c:	da801f15 	stw	r10,124(sp)
 40283a0:	1295c83a 	sub	r10,r2,r10
 40283a4:	b584f504 	addi	r22,r22,5076
 40283a8:	bdc4f104 	addi	r23,r23,5060
 40283ac:	dec01a15 	stw	sp,104(sp)
 40283b0:	d8001c15 	stw	zero,112(sp)
 40283b4:	d8001b15 	stw	zero,108(sp)
 40283b8:	d8002615 	stw	zero,152(sp)
 40283bc:	d8002315 	stw	zero,140(sp)
 40283c0:	da802715 	stw	r10,156(sp)
 40283c4:	d811883a 	mov	r8,sp
 40283c8:	dd002115 	stw	r20,132(sp)
 40283cc:	e021883a 	mov	r16,fp
 40283d0:	80800007 	ldb	r2,0(r16)
 40283d4:	1003ea26 	beq	r2,zero,4029380 <___vfiprintf_internal_r+0x1084>
 40283d8:	00c00944 	movi	r3,37
 40283dc:	8025883a 	mov	r18,r16
 40283e0:	10c0021e 	bne	r2,r3,40283ec <___vfiprintf_internal_r+0xf0>
 40283e4:	00001606 	br	4028440 <___vfiprintf_internal_r+0x144>
 40283e8:	10c00326 	beq	r2,r3,40283f8 <___vfiprintf_internal_r+0xfc>
 40283ec:	94800044 	addi	r18,r18,1
 40283f0:	90800007 	ldb	r2,0(r18)
 40283f4:	103ffc1e 	bne	r2,zero,40283e8 <__alt_data_end+0xfffe83e8>
 40283f8:	9423c83a 	sub	r17,r18,r16
 40283fc:	88001026 	beq	r17,zero,4028440 <___vfiprintf_internal_r+0x144>
 4028400:	d8c01c17 	ldw	r3,112(sp)
 4028404:	d8801b17 	ldw	r2,108(sp)
 4028408:	44000015 	stw	r16,0(r8)
 402840c:	88c7883a 	add	r3,r17,r3
 4028410:	10800044 	addi	r2,r2,1
 4028414:	44400115 	stw	r17,4(r8)
 4028418:	d8c01c15 	stw	r3,112(sp)
 402841c:	d8801b15 	stw	r2,108(sp)
 4028420:	010001c4 	movi	r4,7
 4028424:	2080760e 	bge	r4,r2,4028600 <___vfiprintf_internal_r+0x304>
 4028428:	1803821e 	bne	r3,zero,4029234 <___vfiprintf_internal_r+0xf38>
 402842c:	da802317 	ldw	r10,140(sp)
 4028430:	d8001b15 	stw	zero,108(sp)
 4028434:	d811883a 	mov	r8,sp
 4028438:	5455883a 	add	r10,r10,r17
 402843c:	da802315 	stw	r10,140(sp)
 4028440:	90800007 	ldb	r2,0(r18)
 4028444:	10044626 	beq	r2,zero,4029560 <___vfiprintf_internal_r+0x1264>
 4028448:	90c00047 	ldb	r3,1(r18)
 402844c:	94000044 	addi	r16,r18,1
 4028450:	d8001d85 	stb	zero,118(sp)
 4028454:	0009883a 	mov	r4,zero
 4028458:	000f883a 	mov	r7,zero
 402845c:	027fffc4 	movi	r9,-1
 4028460:	0023883a 	mov	r17,zero
 4028464:	0029883a 	mov	r20,zero
 4028468:	01401604 	movi	r5,88
 402846c:	01800244 	movi	r6,9
 4028470:	03400a84 	movi	r13,42
 4028474:	03001b04 	movi	r12,108
 4028478:	84000044 	addi	r16,r16,1
 402847c:	18bff804 	addi	r2,r3,-32
 4028480:	28827336 	bltu	r5,r2,4028e50 <___vfiprintf_internal_r+0xb54>
 4028484:	100490ba 	slli	r2,r2,2
 4028488:	028100f4 	movhi	r10,1027
 402848c:	52a12704 	addi	r10,r10,-31588
 4028490:	1285883a 	add	r2,r2,r10
 4028494:	10800017 	ldw	r2,0(r2)
 4028498:	1000683a 	jmp	r2
 402849c:	04028b84 	movi	r16,2606
 40284a0:	04028e50 	cmplti	r16,zero,2617
 40284a4:	04028e50 	cmplti	r16,zero,2617
 40284a8:	04028ba4 	muli	r16,zero,2606
 40284ac:	04028e50 	cmplti	r16,zero,2617
 40284b0:	04028e50 	cmplti	r16,zero,2617
 40284b4:	04028e50 	cmplti	r16,zero,2617
 40284b8:	04028e50 	cmplti	r16,zero,2617
 40284bc:	04028e50 	cmplti	r16,zero,2617
 40284c0:	04028e50 	cmplti	r16,zero,2617
 40284c4:	04028d8c 	andi	r16,zero,2614
 40284c8:	04028da8 	cmpgeui	r16,zero,2614
 40284cc:	04028e50 	cmplti	r16,zero,2617
 40284d0:	04028690 	cmplti	r16,zero,2586
 40284d4:	04028db8 	rdprs	r16,zero,2614
 40284d8:	04028e50 	cmplti	r16,zero,2617
 40284dc:	04028bb0 	cmpltui	r16,zero,2606
 40284e0:	04028bbc 	xorhi	r16,zero,2606
 40284e4:	04028bbc 	xorhi	r16,zero,2606
 40284e8:	04028bbc 	xorhi	r16,zero,2606
 40284ec:	04028bbc 	xorhi	r16,zero,2606
 40284f0:	04028bbc 	xorhi	r16,zero,2606
 40284f4:	04028bbc 	xorhi	r16,zero,2606
 40284f8:	04028bbc 	xorhi	r16,zero,2606
 40284fc:	04028bbc 	xorhi	r16,zero,2606
 4028500:	04028bbc 	xorhi	r16,zero,2606
 4028504:	04028e50 	cmplti	r16,zero,2617
 4028508:	04028e50 	cmplti	r16,zero,2617
 402850c:	04028e50 	cmplti	r16,zero,2617
 4028510:	04028e50 	cmplti	r16,zero,2617
 4028514:	04028e50 	cmplti	r16,zero,2617
 4028518:	04028e50 	cmplti	r16,zero,2617
 402851c:	04028e50 	cmplti	r16,zero,2617
 4028520:	04028e50 	cmplti	r16,zero,2617
 4028524:	04028e50 	cmplti	r16,zero,2617
 4028528:	04028e50 	cmplti	r16,zero,2617
 402852c:	04028be8 	cmpgeui	r16,zero,2607
 4028530:	04028e50 	cmplti	r16,zero,2617
 4028534:	04028e50 	cmplti	r16,zero,2617
 4028538:	04028e50 	cmplti	r16,zero,2617
 402853c:	04028e50 	cmplti	r16,zero,2617
 4028540:	04028e50 	cmplti	r16,zero,2617
 4028544:	04028e50 	cmplti	r16,zero,2617
 4028548:	04028e50 	cmplti	r16,zero,2617
 402854c:	04028e50 	cmplti	r16,zero,2617
 4028550:	04028e50 	cmplti	r16,zero,2617
 4028554:	04028e50 	cmplti	r16,zero,2617
 4028558:	04028c20 	cmpeqi	r16,zero,2608
 402855c:	04028e50 	cmplti	r16,zero,2617
 4028560:	04028e50 	cmplti	r16,zero,2617
 4028564:	04028e50 	cmplti	r16,zero,2617
 4028568:	04028e50 	cmplti	r16,zero,2617
 402856c:	04028e50 	cmplti	r16,zero,2617
 4028570:	04028c78 	rdprs	r16,zero,2609
 4028574:	04028e50 	cmplti	r16,zero,2617
 4028578:	04028e50 	cmplti	r16,zero,2617
 402857c:	04028ce8 	cmpgeui	r16,zero,2611
 4028580:	04028e50 	cmplti	r16,zero,2617
 4028584:	04028e50 	cmplti	r16,zero,2617
 4028588:	04028e50 	cmplti	r16,zero,2617
 402858c:	04028e50 	cmplti	r16,zero,2617
 4028590:	04028e50 	cmplti	r16,zero,2617
 4028594:	04028e50 	cmplti	r16,zero,2617
 4028598:	04028e50 	cmplti	r16,zero,2617
 402859c:	04028e50 	cmplti	r16,zero,2617
 40285a0:	04028e50 	cmplti	r16,zero,2617
 40285a4:	04028e50 	cmplti	r16,zero,2617
 40285a8:	04028a94 	movui	r16,2602
 40285ac:	04028ac0 	call	4028ac <__alt_mem_sdram_controller_2+0x4028ac>
 40285b0:	04028e50 	cmplti	r16,zero,2617
 40285b4:	04028e50 	cmplti	r16,zero,2617
 40285b8:	04028e50 	cmplti	r16,zero,2617
 40285bc:	04028df8 	rdprs	r16,zero,2615
 40285c0:	04028ac0 	call	4028ac <__alt_mem_sdram_controller_2+0x4028ac>
 40285c4:	04028e50 	cmplti	r16,zero,2617
 40285c8:	04028e50 	cmplti	r16,zero,2617
 40285cc:	04028954 	movui	r16,2597
 40285d0:	04028e50 	cmplti	r16,zero,2617
 40285d4:	04028964 	muli	r16,zero,2597
 40285d8:	040289a0 	cmpeqi	r16,zero,2598
 40285dc:	0402869c 	xori	r16,zero,2586
 40285e0:	04028948 	cmpgei	r16,zero,2597
 40285e4:	04028e50 	cmplti	r16,zero,2617
 40285e8:	04028d24 	muli	r16,zero,2612
 40285ec:	04028e50 	cmplti	r16,zero,2617
 40285f0:	04028d7c 	xorhi	r16,zero,2613
 40285f4:	04028e50 	cmplti	r16,zero,2617
 40285f8:	04028e50 	cmplti	r16,zero,2617
 40285fc:	04028a40 	call	4028a4 <__alt_mem_sdram_controller_2+0x4028a4>
 4028600:	42000204 	addi	r8,r8,8
 4028604:	da802317 	ldw	r10,140(sp)
 4028608:	5455883a 	add	r10,r10,r17
 402860c:	da802315 	stw	r10,140(sp)
 4028610:	003f8b06 	br	4028440 <__alt_data_end+0xfffe8440>
 4028614:	d9002017 	ldw	r4,128(sp)
 4028618:	a00b883a 	mov	r5,r20
 402861c:	4022e500 	call	4022e50 <__swsetup_r>
 4028620:	1003b11e 	bne	r2,zero,40294e8 <___vfiprintf_internal_r+0x11ec>
 4028624:	a080030b 	ldhu	r2,12(r20)
 4028628:	00c00284 	movi	r3,10
 402862c:	1080068c 	andi	r2,r2,26
 4028630:	10ff541e 	bne	r2,r3,4028384 <__alt_data_end+0xfffe8384>
 4028634:	a080038f 	ldh	r2,14(r20)
 4028638:	103f5216 	blt	r2,zero,4028384 <__alt_data_end+0xfffe8384>
 402863c:	d9c02217 	ldw	r7,136(sp)
 4028640:	d9002017 	ldw	r4,128(sp)
 4028644:	e00d883a 	mov	r6,fp
 4028648:	a00b883a 	mov	r5,r20
 402864c:	40297740 	call	4029774 <__sbprintf>
 4028650:	dfc03617 	ldw	ra,216(sp)
 4028654:	df003517 	ldw	fp,212(sp)
 4028658:	ddc03417 	ldw	r23,208(sp)
 402865c:	dd803317 	ldw	r22,204(sp)
 4028660:	dd403217 	ldw	r21,200(sp)
 4028664:	dd003117 	ldw	r20,196(sp)
 4028668:	dcc03017 	ldw	r19,192(sp)
 402866c:	dc802f17 	ldw	r18,188(sp)
 4028670:	dc402e17 	ldw	r17,184(sp)
 4028674:	dc002d17 	ldw	r16,180(sp)
 4028678:	dec03704 	addi	sp,sp,220
 402867c:	f800283a 	ret
 4028680:	4024e240 	call	4024e24 <__sinit>
 4028684:	003f2f06 	br	4028344 <__alt_data_end+0xfffe8344>
 4028688:	0463c83a 	sub	r17,zero,r17
 402868c:	d8802215 	stw	r2,136(sp)
 4028690:	a5000114 	ori	r20,r20,4
 4028694:	80c00007 	ldb	r3,0(r16)
 4028698:	003f7706 	br	4028478 <__alt_data_end+0xfffe8478>
 402869c:	00800c04 	movi	r2,48
 40286a0:	da802217 	ldw	r10,136(sp)
 40286a4:	d8801d05 	stb	r2,116(sp)
 40286a8:	00801e04 	movi	r2,120
 40286ac:	d8801d45 	stb	r2,117(sp)
 40286b0:	d8001d85 	stb	zero,118(sp)
 40286b4:	50c00104 	addi	r3,r10,4
 40286b8:	54800017 	ldw	r18,0(r10)
 40286bc:	0027883a 	mov	r19,zero
 40286c0:	a0800094 	ori	r2,r20,2
 40286c4:	48030b16 	blt	r9,zero,40292f4 <___vfiprintf_internal_r+0xff8>
 40286c8:	00bfdfc4 	movi	r2,-129
 40286cc:	a096703a 	and	r11,r20,r2
 40286d0:	d8c02215 	stw	r3,136(sp)
 40286d4:	5d000094 	ori	r20,r11,2
 40286d8:	90032b1e 	bne	r18,zero,4029388 <___vfiprintf_internal_r+0x108c>
 40286dc:	008100f4 	movhi	r2,1027
 40286e0:	10849004 	addi	r2,r2,4672
 40286e4:	d8802615 	stw	r2,152(sp)
 40286e8:	0039883a 	mov	fp,zero
 40286ec:	48017b1e 	bne	r9,zero,4028cdc <___vfiprintf_internal_r+0x9e0>
 40286f0:	0013883a 	mov	r9,zero
 40286f4:	0027883a 	mov	r19,zero
 40286f8:	dd401a04 	addi	r21,sp,104
 40286fc:	4825883a 	mov	r18,r9
 4028700:	4cc0010e 	bge	r9,r19,4028708 <___vfiprintf_internal_r+0x40c>
 4028704:	9825883a 	mov	r18,r19
 4028708:	e7003fcc 	andi	fp,fp,255
 402870c:	e700201c 	xori	fp,fp,128
 4028710:	e73fe004 	addi	fp,fp,-128
 4028714:	e0000126 	beq	fp,zero,402871c <___vfiprintf_internal_r+0x420>
 4028718:	94800044 	addi	r18,r18,1
 402871c:	a380008c 	andi	r14,r20,2
 4028720:	70000126 	beq	r14,zero,4028728 <___vfiprintf_internal_r+0x42c>
 4028724:	94800084 	addi	r18,r18,2
 4028728:	a700210c 	andi	fp,r20,132
 402872c:	e001df1e 	bne	fp,zero,4028eac <___vfiprintf_internal_r+0xbb0>
 4028730:	8c87c83a 	sub	r3,r17,r18
 4028734:	00c1dd0e 	bge	zero,r3,4028eac <___vfiprintf_internal_r+0xbb0>
 4028738:	01c00404 	movi	r7,16
 402873c:	d8801c17 	ldw	r2,112(sp)
 4028740:	38c3ad0e 	bge	r7,r3,40295f8 <___vfiprintf_internal_r+0x12fc>
 4028744:	028100f4 	movhi	r10,1027
 4028748:	5284f504 	addi	r10,r10,5076
 402874c:	dc002915 	stw	r16,164(sp)
 4028750:	d9801b17 	ldw	r6,108(sp)
 4028754:	da802415 	stw	r10,144(sp)
 4028758:	03c001c4 	movi	r15,7
 402875c:	da402515 	stw	r9,148(sp)
 4028760:	db802815 	stw	r14,160(sp)
 4028764:	1821883a 	mov	r16,r3
 4028768:	00000506 	br	4028780 <___vfiprintf_internal_r+0x484>
 402876c:	31400084 	addi	r5,r6,2
 4028770:	42000204 	addi	r8,r8,8
 4028774:	200d883a 	mov	r6,r4
 4028778:	843ffc04 	addi	r16,r16,-16
 402877c:	3c000d0e 	bge	r7,r16,40287b4 <___vfiprintf_internal_r+0x4b8>
 4028780:	10800404 	addi	r2,r2,16
 4028784:	31000044 	addi	r4,r6,1
 4028788:	45800015 	stw	r22,0(r8)
 402878c:	41c00115 	stw	r7,4(r8)
 4028790:	d8801c15 	stw	r2,112(sp)
 4028794:	d9001b15 	stw	r4,108(sp)
 4028798:	793ff40e 	bge	r15,r4,402876c <__alt_data_end+0xfffe876c>
 402879c:	1001b51e 	bne	r2,zero,4028e74 <___vfiprintf_internal_r+0xb78>
 40287a0:	843ffc04 	addi	r16,r16,-16
 40287a4:	000d883a 	mov	r6,zero
 40287a8:	01400044 	movi	r5,1
 40287ac:	d811883a 	mov	r8,sp
 40287b0:	3c3ff316 	blt	r7,r16,4028780 <__alt_data_end+0xfffe8780>
 40287b4:	8007883a 	mov	r3,r16
 40287b8:	da402517 	ldw	r9,148(sp)
 40287bc:	db802817 	ldw	r14,160(sp)
 40287c0:	dc002917 	ldw	r16,164(sp)
 40287c4:	da802417 	ldw	r10,144(sp)
 40287c8:	1885883a 	add	r2,r3,r2
 40287cc:	40c00115 	stw	r3,4(r8)
 40287d0:	42800015 	stw	r10,0(r8)
 40287d4:	d8801c15 	stw	r2,112(sp)
 40287d8:	d9401b15 	stw	r5,108(sp)
 40287dc:	00c001c4 	movi	r3,7
 40287e0:	19426016 	blt	r3,r5,4029164 <___vfiprintf_internal_r+0xe68>
 40287e4:	d8c01d87 	ldb	r3,118(sp)
 40287e8:	42000204 	addi	r8,r8,8
 40287ec:	29000044 	addi	r4,r5,1
 40287f0:	1801b31e 	bne	r3,zero,4028ec0 <___vfiprintf_internal_r+0xbc4>
 40287f4:	7001c026 	beq	r14,zero,4028ef8 <___vfiprintf_internal_r+0xbfc>
 40287f8:	d8c01d04 	addi	r3,sp,116
 40287fc:	10800084 	addi	r2,r2,2
 4028800:	40c00015 	stw	r3,0(r8)
 4028804:	00c00084 	movi	r3,2
 4028808:	40c00115 	stw	r3,4(r8)
 402880c:	d8801c15 	stw	r2,112(sp)
 4028810:	d9001b15 	stw	r4,108(sp)
 4028814:	00c001c4 	movi	r3,7
 4028818:	1902650e 	bge	r3,r4,40291b0 <___vfiprintf_internal_r+0xeb4>
 402881c:	10029a1e 	bne	r2,zero,4029288 <___vfiprintf_internal_r+0xf8c>
 4028820:	00c02004 	movi	r3,128
 4028824:	01000044 	movi	r4,1
 4028828:	000b883a 	mov	r5,zero
 402882c:	d811883a 	mov	r8,sp
 4028830:	e0c1b31e 	bne	fp,r3,4028f00 <___vfiprintf_internal_r+0xc04>
 4028834:	8cb9c83a 	sub	fp,r17,r18
 4028838:	0701b10e 	bge	zero,fp,4028f00 <___vfiprintf_internal_r+0xc04>
 402883c:	01c00404 	movi	r7,16
 4028840:	3f03890e 	bge	r7,fp,4029668 <___vfiprintf_internal_r+0x136c>
 4028844:	00c100f4 	movhi	r3,1027
 4028848:	18c4f104 	addi	r3,r3,5060
 402884c:	d8c02415 	stw	r3,144(sp)
 4028850:	8007883a 	mov	r3,r16
 4028854:	034001c4 	movi	r13,7
 4028858:	e021883a 	mov	r16,fp
 402885c:	da402515 	stw	r9,148(sp)
 4028860:	1839883a 	mov	fp,r3
 4028864:	00000506 	br	402887c <___vfiprintf_internal_r+0x580>
 4028868:	29800084 	addi	r6,r5,2
 402886c:	42000204 	addi	r8,r8,8
 4028870:	180b883a 	mov	r5,r3
 4028874:	843ffc04 	addi	r16,r16,-16
 4028878:	3c000d0e 	bge	r7,r16,40288b0 <___vfiprintf_internal_r+0x5b4>
 402887c:	10800404 	addi	r2,r2,16
 4028880:	28c00044 	addi	r3,r5,1
 4028884:	45c00015 	stw	r23,0(r8)
 4028888:	41c00115 	stw	r7,4(r8)
 402888c:	d8801c15 	stw	r2,112(sp)
 4028890:	d8c01b15 	stw	r3,108(sp)
 4028894:	68fff40e 	bge	r13,r3,4028868 <__alt_data_end+0xfffe8868>
 4028898:	1002241e 	bne	r2,zero,402912c <___vfiprintf_internal_r+0xe30>
 402889c:	843ffc04 	addi	r16,r16,-16
 40288a0:	01800044 	movi	r6,1
 40288a4:	000b883a 	mov	r5,zero
 40288a8:	d811883a 	mov	r8,sp
 40288ac:	3c3ff316 	blt	r7,r16,402887c <__alt_data_end+0xfffe887c>
 40288b0:	da402517 	ldw	r9,148(sp)
 40288b4:	e007883a 	mov	r3,fp
 40288b8:	8039883a 	mov	fp,r16
 40288bc:	1821883a 	mov	r16,r3
 40288c0:	d8c02417 	ldw	r3,144(sp)
 40288c4:	1705883a 	add	r2,r2,fp
 40288c8:	47000115 	stw	fp,4(r8)
 40288cc:	40c00015 	stw	r3,0(r8)
 40288d0:	d8801c15 	stw	r2,112(sp)
 40288d4:	d9801b15 	stw	r6,108(sp)
 40288d8:	00c001c4 	movi	r3,7
 40288dc:	19827616 	blt	r3,r6,40292b8 <___vfiprintf_internal_r+0xfbc>
 40288e0:	4cf9c83a 	sub	fp,r9,r19
 40288e4:	42000204 	addi	r8,r8,8
 40288e8:	31000044 	addi	r4,r6,1
 40288ec:	300b883a 	mov	r5,r6
 40288f0:	07018516 	blt	zero,fp,4028f08 <___vfiprintf_internal_r+0xc0c>
 40288f4:	9885883a 	add	r2,r19,r2
 40288f8:	45400015 	stw	r21,0(r8)
 40288fc:	44c00115 	stw	r19,4(r8)
 4028900:	d8801c15 	stw	r2,112(sp)
 4028904:	d9001b15 	stw	r4,108(sp)
 4028908:	00c001c4 	movi	r3,7
 402890c:	1901dd0e 	bge	r3,r4,4029084 <___vfiprintf_internal_r+0xd88>
 4028910:	1002401e 	bne	r2,zero,4029214 <___vfiprintf_internal_r+0xf18>
 4028914:	d8001b15 	stw	zero,108(sp)
 4028918:	a2c0010c 	andi	r11,r20,4
 402891c:	58000226 	beq	r11,zero,4028928 <___vfiprintf_internal_r+0x62c>
 4028920:	8ca7c83a 	sub	r19,r17,r18
 4028924:	04c2f216 	blt	zero,r19,40294f0 <___vfiprintf_internal_r+0x11f4>
 4028928:	8c80010e 	bge	r17,r18,4028930 <___vfiprintf_internal_r+0x634>
 402892c:	9023883a 	mov	r17,r18
 4028930:	da802317 	ldw	r10,140(sp)
 4028934:	5455883a 	add	r10,r10,r17
 4028938:	da802315 	stw	r10,140(sp)
 402893c:	d8001b15 	stw	zero,108(sp)
 4028940:	d811883a 	mov	r8,sp
 4028944:	003ea206 	br	40283d0 <__alt_data_end+0xfffe83d0>
 4028948:	a5000814 	ori	r20,r20,32
 402894c:	80c00007 	ldb	r3,0(r16)
 4028950:	003ec906 	br	4028478 <__alt_data_end+0xfffe8478>
 4028954:	80c00007 	ldb	r3,0(r16)
 4028958:	1b030926 	beq	r3,r12,4029580 <___vfiprintf_internal_r+0x1284>
 402895c:	a5000414 	ori	r20,r20,16
 4028960:	003ec506 	br	4028478 <__alt_data_end+0xfffe8478>
 4028964:	21003fcc 	andi	r4,r4,255
 4028968:	20035e1e 	bne	r4,zero,40296e4 <___vfiprintf_internal_r+0x13e8>
 402896c:	a080080c 	andi	r2,r20,32
 4028970:	1002a526 	beq	r2,zero,4029408 <___vfiprintf_internal_r+0x110c>
 4028974:	da802217 	ldw	r10,136(sp)
 4028978:	50800017 	ldw	r2,0(r10)
 402897c:	da802317 	ldw	r10,140(sp)
 4028980:	5007d7fa 	srai	r3,r10,31
 4028984:	da802217 	ldw	r10,136(sp)
 4028988:	10c00115 	stw	r3,4(r2)
 402898c:	52800104 	addi	r10,r10,4
 4028990:	da802215 	stw	r10,136(sp)
 4028994:	da802317 	ldw	r10,140(sp)
 4028998:	12800015 	stw	r10,0(r2)
 402899c:	003e8c06 	br	40283d0 <__alt_data_end+0xfffe83d0>
 40289a0:	21003fcc 	andi	r4,r4,255
 40289a4:	2003511e 	bne	r4,zero,40296ec <___vfiprintf_internal_r+0x13f0>
 40289a8:	a080080c 	andi	r2,r20,32
 40289ac:	1000a126 	beq	r2,zero,4028c34 <___vfiprintf_internal_r+0x938>
 40289b0:	da802217 	ldw	r10,136(sp)
 40289b4:	d8001d85 	stb	zero,118(sp)
 40289b8:	50800204 	addi	r2,r10,8
 40289bc:	54800017 	ldw	r18,0(r10)
 40289c0:	54c00117 	ldw	r19,4(r10)
 40289c4:	4802b416 	blt	r9,zero,4029498 <___vfiprintf_internal_r+0x119c>
 40289c8:	013fdfc4 	movi	r4,-129
 40289cc:	94c6b03a 	or	r3,r18,r19
 40289d0:	d8802215 	stw	r2,136(sp)
 40289d4:	a128703a 	and	r20,r20,r4
 40289d8:	1800a226 	beq	r3,zero,4028c64 <___vfiprintf_internal_r+0x968>
 40289dc:	0039883a 	mov	fp,zero
 40289e0:	dd401a04 	addi	r21,sp,104
 40289e4:	9006d0fa 	srli	r3,r18,3
 40289e8:	9808977a 	slli	r4,r19,29
 40289ec:	9826d0fa 	srli	r19,r19,3
 40289f0:	948001cc 	andi	r18,r18,7
 40289f4:	90800c04 	addi	r2,r18,48
 40289f8:	ad7fffc4 	addi	r21,r21,-1
 40289fc:	20e4b03a 	or	r18,r4,r3
 4028a00:	a8800005 	stb	r2,0(r21)
 4028a04:	94c6b03a 	or	r3,r18,r19
 4028a08:	183ff61e 	bne	r3,zero,40289e4 <__alt_data_end+0xfffe89e4>
 4028a0c:	a0c0004c 	andi	r3,r20,1
 4028a10:	18005926 	beq	r3,zero,4028b78 <___vfiprintf_internal_r+0x87c>
 4028a14:	10803fcc 	andi	r2,r2,255
 4028a18:	1080201c 	xori	r2,r2,128
 4028a1c:	10bfe004 	addi	r2,r2,-128
 4028a20:	00c00c04 	movi	r3,48
 4028a24:	10c05426 	beq	r2,r3,4028b78 <___vfiprintf_internal_r+0x87c>
 4028a28:	da801e17 	ldw	r10,120(sp)
 4028a2c:	a8bfffc4 	addi	r2,r21,-1
 4028a30:	a8ffffc5 	stb	r3,-1(r21)
 4028a34:	50a7c83a 	sub	r19,r10,r2
 4028a38:	102b883a 	mov	r21,r2
 4028a3c:	003f2f06 	br	40286fc <__alt_data_end+0xfffe86fc>
 4028a40:	21003fcc 	andi	r4,r4,255
 4028a44:	2003421e 	bne	r4,zero,4029750 <___vfiprintf_internal_r+0x1454>
 4028a48:	008100f4 	movhi	r2,1027
 4028a4c:	10849004 	addi	r2,r2,4672
 4028a50:	d8802615 	stw	r2,152(sp)
 4028a54:	a080080c 	andi	r2,r20,32
 4028a58:	1000aa26 	beq	r2,zero,4028d04 <___vfiprintf_internal_r+0xa08>
 4028a5c:	da802217 	ldw	r10,136(sp)
 4028a60:	54800017 	ldw	r18,0(r10)
 4028a64:	54c00117 	ldw	r19,4(r10)
 4028a68:	52800204 	addi	r10,r10,8
 4028a6c:	da802215 	stw	r10,136(sp)
 4028a70:	a080004c 	andi	r2,r20,1
 4028a74:	1001d226 	beq	r2,zero,40291c0 <___vfiprintf_internal_r+0xec4>
 4028a78:	94c4b03a 	or	r2,r18,r19
 4028a7c:	1002351e 	bne	r2,zero,4029354 <___vfiprintf_internal_r+0x1058>
 4028a80:	d8001d85 	stb	zero,118(sp)
 4028a84:	48022216 	blt	r9,zero,4029310 <___vfiprintf_internal_r+0x1014>
 4028a88:	00bfdfc4 	movi	r2,-129
 4028a8c:	a0a8703a 	and	r20,r20,r2
 4028a90:	003f1506 	br	40286e8 <__alt_data_end+0xfffe86e8>
 4028a94:	da802217 	ldw	r10,136(sp)
 4028a98:	04800044 	movi	r18,1
 4028a9c:	d8001d85 	stb	zero,118(sp)
 4028aa0:	50800017 	ldw	r2,0(r10)
 4028aa4:	52800104 	addi	r10,r10,4
 4028aa8:	da802215 	stw	r10,136(sp)
 4028aac:	d8801005 	stb	r2,64(sp)
 4028ab0:	9027883a 	mov	r19,r18
 4028ab4:	dd401004 	addi	r21,sp,64
 4028ab8:	0013883a 	mov	r9,zero
 4028abc:	003f1706 	br	402871c <__alt_data_end+0xfffe871c>
 4028ac0:	21003fcc 	andi	r4,r4,255
 4028ac4:	2003201e 	bne	r4,zero,4029748 <___vfiprintf_internal_r+0x144c>
 4028ac8:	a080080c 	andi	r2,r20,32
 4028acc:	10004b26 	beq	r2,zero,4028bfc <___vfiprintf_internal_r+0x900>
 4028ad0:	da802217 	ldw	r10,136(sp)
 4028ad4:	50800117 	ldw	r2,4(r10)
 4028ad8:	54800017 	ldw	r18,0(r10)
 4028adc:	52800204 	addi	r10,r10,8
 4028ae0:	da802215 	stw	r10,136(sp)
 4028ae4:	1027883a 	mov	r19,r2
 4028ae8:	10022c16 	blt	r2,zero,402939c <___vfiprintf_internal_r+0x10a0>
 4028aec:	df001d83 	ldbu	fp,118(sp)
 4028af0:	48007216 	blt	r9,zero,4028cbc <___vfiprintf_internal_r+0x9c0>
 4028af4:	00ffdfc4 	movi	r3,-129
 4028af8:	94c4b03a 	or	r2,r18,r19
 4028afc:	a0e8703a 	and	r20,r20,r3
 4028b00:	1000cc26 	beq	r2,zero,4028e34 <___vfiprintf_internal_r+0xb38>
 4028b04:	98021026 	beq	r19,zero,4029348 <___vfiprintf_internal_r+0x104c>
 4028b08:	dc402415 	stw	r17,144(sp)
 4028b0c:	dc002515 	stw	r16,148(sp)
 4028b10:	9823883a 	mov	r17,r19
 4028b14:	9021883a 	mov	r16,r18
 4028b18:	dd401a04 	addi	r21,sp,104
 4028b1c:	4825883a 	mov	r18,r9
 4028b20:	4027883a 	mov	r19,r8
 4028b24:	8009883a 	mov	r4,r16
 4028b28:	880b883a 	mov	r5,r17
 4028b2c:	01800284 	movi	r6,10
 4028b30:	000f883a 	mov	r7,zero
 4028b34:	402a6dc0 	call	402a6dc <__umoddi3>
 4028b38:	10800c04 	addi	r2,r2,48
 4028b3c:	ad7fffc4 	addi	r21,r21,-1
 4028b40:	8009883a 	mov	r4,r16
 4028b44:	880b883a 	mov	r5,r17
 4028b48:	a8800005 	stb	r2,0(r21)
 4028b4c:	01800284 	movi	r6,10
 4028b50:	000f883a 	mov	r7,zero
 4028b54:	402a1640 	call	402a164 <__udivdi3>
 4028b58:	1021883a 	mov	r16,r2
 4028b5c:	10c4b03a 	or	r2,r2,r3
 4028b60:	1823883a 	mov	r17,r3
 4028b64:	103fef1e 	bne	r2,zero,4028b24 <__alt_data_end+0xfffe8b24>
 4028b68:	dc402417 	ldw	r17,144(sp)
 4028b6c:	dc002517 	ldw	r16,148(sp)
 4028b70:	9013883a 	mov	r9,r18
 4028b74:	9811883a 	mov	r8,r19
 4028b78:	da801e17 	ldw	r10,120(sp)
 4028b7c:	5567c83a 	sub	r19,r10,r21
 4028b80:	003ede06 	br	40286fc <__alt_data_end+0xfffe86fc>
 4028b84:	38803fcc 	andi	r2,r7,255
 4028b88:	1080201c 	xori	r2,r2,128
 4028b8c:	10bfe004 	addi	r2,r2,-128
 4028b90:	1002371e 	bne	r2,zero,4029470 <___vfiprintf_internal_r+0x1174>
 4028b94:	01000044 	movi	r4,1
 4028b98:	01c00804 	movi	r7,32
 4028b9c:	80c00007 	ldb	r3,0(r16)
 4028ba0:	003e3506 	br	4028478 <__alt_data_end+0xfffe8478>
 4028ba4:	a5000054 	ori	r20,r20,1
 4028ba8:	80c00007 	ldb	r3,0(r16)
 4028bac:	003e3206 	br	4028478 <__alt_data_end+0xfffe8478>
 4028bb0:	a5002014 	ori	r20,r20,128
 4028bb4:	80c00007 	ldb	r3,0(r16)
 4028bb8:	003e2f06 	br	4028478 <__alt_data_end+0xfffe8478>
 4028bbc:	8015883a 	mov	r10,r16
 4028bc0:	0023883a 	mov	r17,zero
 4028bc4:	18bff404 	addi	r2,r3,-48
 4028bc8:	50c00007 	ldb	r3,0(r10)
 4028bcc:	8c4002a4 	muli	r17,r17,10
 4028bd0:	84000044 	addi	r16,r16,1
 4028bd4:	8015883a 	mov	r10,r16
 4028bd8:	1463883a 	add	r17,r2,r17
 4028bdc:	18bff404 	addi	r2,r3,-48
 4028be0:	30bff92e 	bgeu	r6,r2,4028bc8 <__alt_data_end+0xfffe8bc8>
 4028be4:	003e2506 	br	402847c <__alt_data_end+0xfffe847c>
 4028be8:	21003fcc 	andi	r4,r4,255
 4028bec:	2002d41e 	bne	r4,zero,4029740 <___vfiprintf_internal_r+0x1444>
 4028bf0:	a5000414 	ori	r20,r20,16
 4028bf4:	a080080c 	andi	r2,r20,32
 4028bf8:	103fb51e 	bne	r2,zero,4028ad0 <__alt_data_end+0xfffe8ad0>
 4028bfc:	a080040c 	andi	r2,r20,16
 4028c00:	1001f826 	beq	r2,zero,40293e4 <___vfiprintf_internal_r+0x10e8>
 4028c04:	da802217 	ldw	r10,136(sp)
 4028c08:	54800017 	ldw	r18,0(r10)
 4028c0c:	52800104 	addi	r10,r10,4
 4028c10:	da802215 	stw	r10,136(sp)
 4028c14:	9027d7fa 	srai	r19,r18,31
 4028c18:	9805883a 	mov	r2,r19
 4028c1c:	003fb206 	br	4028ae8 <__alt_data_end+0xfffe8ae8>
 4028c20:	21003fcc 	andi	r4,r4,255
 4028c24:	2002c41e 	bne	r4,zero,4029738 <___vfiprintf_internal_r+0x143c>
 4028c28:	a5000414 	ori	r20,r20,16
 4028c2c:	a080080c 	andi	r2,r20,32
 4028c30:	103f5f1e 	bne	r2,zero,40289b0 <__alt_data_end+0xfffe89b0>
 4028c34:	a080040c 	andi	r2,r20,16
 4028c38:	10020f26 	beq	r2,zero,4029478 <___vfiprintf_internal_r+0x117c>
 4028c3c:	da802217 	ldw	r10,136(sp)
 4028c40:	d8001d85 	stb	zero,118(sp)
 4028c44:	0027883a 	mov	r19,zero
 4028c48:	50800104 	addi	r2,r10,4
 4028c4c:	54800017 	ldw	r18,0(r10)
 4028c50:	48021116 	blt	r9,zero,4029498 <___vfiprintf_internal_r+0x119c>
 4028c54:	00ffdfc4 	movi	r3,-129
 4028c58:	d8802215 	stw	r2,136(sp)
 4028c5c:	a0e8703a 	and	r20,r20,r3
 4028c60:	903f5e1e 	bne	r18,zero,40289dc <__alt_data_end+0xfffe89dc>
 4028c64:	0039883a 	mov	fp,zero
 4028c68:	4802a626 	beq	r9,zero,4029704 <___vfiprintf_internal_r+0x1408>
 4028c6c:	0025883a 	mov	r18,zero
 4028c70:	0027883a 	mov	r19,zero
 4028c74:	003f5a06 	br	40289e0 <__alt_data_end+0xfffe89e0>
 4028c78:	21003fcc 	andi	r4,r4,255
 4028c7c:	20029f1e 	bne	r4,zero,40296fc <___vfiprintf_internal_r+0x1400>
 4028c80:	a5000414 	ori	r20,r20,16
 4028c84:	a080080c 	andi	r2,r20,32
 4028c88:	10005e1e 	bne	r2,zero,4028e04 <___vfiprintf_internal_r+0xb08>
 4028c8c:	a080040c 	andi	r2,r20,16
 4028c90:	1001a21e 	bne	r2,zero,402931c <___vfiprintf_internal_r+0x1020>
 4028c94:	a080100c 	andi	r2,r20,64
 4028c98:	d8001d85 	stb	zero,118(sp)
 4028c9c:	da802217 	ldw	r10,136(sp)
 4028ca0:	1002231e 	bne	r2,zero,4029530 <___vfiprintf_internal_r+0x1234>
 4028ca4:	50800104 	addi	r2,r10,4
 4028ca8:	54800017 	ldw	r18,0(r10)
 4028cac:	0027883a 	mov	r19,zero
 4028cb0:	4801a00e 	bge	r9,zero,4029334 <___vfiprintf_internal_r+0x1038>
 4028cb4:	d8802215 	stw	r2,136(sp)
 4028cb8:	0039883a 	mov	fp,zero
 4028cbc:	94c4b03a 	or	r2,r18,r19
 4028cc0:	103f901e 	bne	r2,zero,4028b04 <__alt_data_end+0xfffe8b04>
 4028cc4:	00800044 	movi	r2,1
 4028cc8:	10803fcc 	andi	r2,r2,255
 4028ccc:	00c00044 	movi	r3,1
 4028cd0:	10c05926 	beq	r2,r3,4028e38 <___vfiprintf_internal_r+0xb3c>
 4028cd4:	00c00084 	movi	r3,2
 4028cd8:	10ffe41e 	bne	r2,r3,4028c6c <__alt_data_end+0xfffe8c6c>
 4028cdc:	0025883a 	mov	r18,zero
 4028ce0:	0027883a 	mov	r19,zero
 4028ce4:	00013d06 	br	40291dc <___vfiprintf_internal_r+0xee0>
 4028ce8:	21003fcc 	andi	r4,r4,255
 4028cec:	2002811e 	bne	r4,zero,40296f4 <___vfiprintf_internal_r+0x13f8>
 4028cf0:	008100f4 	movhi	r2,1027
 4028cf4:	10848b04 	addi	r2,r2,4652
 4028cf8:	d8802615 	stw	r2,152(sp)
 4028cfc:	a080080c 	andi	r2,r20,32
 4028d00:	103f561e 	bne	r2,zero,4028a5c <__alt_data_end+0xfffe8a5c>
 4028d04:	a080040c 	andi	r2,r20,16
 4028d08:	1001d126 	beq	r2,zero,4029450 <___vfiprintf_internal_r+0x1154>
 4028d0c:	da802217 	ldw	r10,136(sp)
 4028d10:	0027883a 	mov	r19,zero
 4028d14:	54800017 	ldw	r18,0(r10)
 4028d18:	52800104 	addi	r10,r10,4
 4028d1c:	da802215 	stw	r10,136(sp)
 4028d20:	003f5306 	br	4028a70 <__alt_data_end+0xfffe8a70>
 4028d24:	da802217 	ldw	r10,136(sp)
 4028d28:	d8001d85 	stb	zero,118(sp)
 4028d2c:	55400017 	ldw	r21,0(r10)
 4028d30:	50c00104 	addi	r3,r10,4
 4028d34:	a8024226 	beq	r21,zero,4029640 <___vfiprintf_internal_r+0x1344>
 4028d38:	48021816 	blt	r9,zero,402959c <___vfiprintf_internal_r+0x12a0>
 4028d3c:	480d883a 	mov	r6,r9
 4028d40:	000b883a 	mov	r5,zero
 4028d44:	a809883a 	mov	r4,r21
 4028d48:	d8c02a15 	stw	r3,168(sp)
 4028d4c:	da002b15 	stw	r8,172(sp)
 4028d50:	da402c15 	stw	r9,176(sp)
 4028d54:	40263900 	call	4026390 <memchr>
 4028d58:	d8c02a17 	ldw	r3,168(sp)
 4028d5c:	da002b17 	ldw	r8,172(sp)
 4028d60:	da402c17 	ldw	r9,176(sp)
 4028d64:	10024826 	beq	r2,zero,4029688 <___vfiprintf_internal_r+0x138c>
 4028d68:	1567c83a 	sub	r19,r2,r21
 4028d6c:	df001d83 	ldbu	fp,118(sp)
 4028d70:	d8c02215 	stw	r3,136(sp)
 4028d74:	0013883a 	mov	r9,zero
 4028d78:	003e6006 	br	40286fc <__alt_data_end+0xfffe86fc>
 4028d7c:	21003fcc 	andi	r4,r4,255
 4028d80:	203fc026 	beq	r4,zero,4028c84 <__alt_data_end+0xfffe8c84>
 4028d84:	d9c01d85 	stb	r7,118(sp)
 4028d88:	003fbe06 	br	4028c84 <__alt_data_end+0xfffe8c84>
 4028d8c:	da802217 	ldw	r10,136(sp)
 4028d90:	54400017 	ldw	r17,0(r10)
 4028d94:	50800104 	addi	r2,r10,4
 4028d98:	883e3b16 	blt	r17,zero,4028688 <__alt_data_end+0xfffe8688>
 4028d9c:	d8802215 	stw	r2,136(sp)
 4028da0:	80c00007 	ldb	r3,0(r16)
 4028da4:	003db406 	br	4028478 <__alt_data_end+0xfffe8478>
 4028da8:	01000044 	movi	r4,1
 4028dac:	01c00ac4 	movi	r7,43
 4028db0:	80c00007 	ldb	r3,0(r16)
 4028db4:	003db006 	br	4028478 <__alt_data_end+0xfffe8478>
 4028db8:	80c00007 	ldb	r3,0(r16)
 4028dbc:	82800044 	addi	r10,r16,1
 4028dc0:	1b423c26 	beq	r3,r13,40296b4 <___vfiprintf_internal_r+0x13b8>
 4028dc4:	18bff404 	addi	r2,r3,-48
 4028dc8:	0013883a 	mov	r9,zero
 4028dcc:	30822b36 	bltu	r6,r2,402967c <___vfiprintf_internal_r+0x1380>
 4028dd0:	50c00007 	ldb	r3,0(r10)
 4028dd4:	4a4002a4 	muli	r9,r9,10
 4028dd8:	54000044 	addi	r16,r10,1
 4028ddc:	8015883a 	mov	r10,r16
 4028de0:	4893883a 	add	r9,r9,r2
 4028de4:	18bff404 	addi	r2,r3,-48
 4028de8:	30bff92e 	bgeu	r6,r2,4028dd0 <__alt_data_end+0xfffe8dd0>
 4028dec:	483da30e 	bge	r9,zero,402847c <__alt_data_end+0xfffe847c>
 4028df0:	027fffc4 	movi	r9,-1
 4028df4:	003da106 	br	402847c <__alt_data_end+0xfffe847c>
 4028df8:	a5001014 	ori	r20,r20,64
 4028dfc:	80c00007 	ldb	r3,0(r16)
 4028e00:	003d9d06 	br	4028478 <__alt_data_end+0xfffe8478>
 4028e04:	da802217 	ldw	r10,136(sp)
 4028e08:	d8001d85 	stb	zero,118(sp)
 4028e0c:	50c00204 	addi	r3,r10,8
 4028e10:	54800017 	ldw	r18,0(r10)
 4028e14:	54c00117 	ldw	r19,4(r10)
 4028e18:	4801ca16 	blt	r9,zero,4029544 <___vfiprintf_internal_r+0x1248>
 4028e1c:	013fdfc4 	movi	r4,-129
 4028e20:	94c4b03a 	or	r2,r18,r19
 4028e24:	d8c02215 	stw	r3,136(sp)
 4028e28:	a128703a 	and	r20,r20,r4
 4028e2c:	0039883a 	mov	fp,zero
 4028e30:	103f341e 	bne	r2,zero,4028b04 <__alt_data_end+0xfffe8b04>
 4028e34:	483e2e26 	beq	r9,zero,40286f0 <__alt_data_end+0xfffe86f0>
 4028e38:	0025883a 	mov	r18,zero
 4028e3c:	94800c04 	addi	r18,r18,48
 4028e40:	dc8019c5 	stb	r18,103(sp)
 4028e44:	dcc02717 	ldw	r19,156(sp)
 4028e48:	dd4019c4 	addi	r21,sp,103
 4028e4c:	003e2b06 	br	40286fc <__alt_data_end+0xfffe86fc>
 4028e50:	21003fcc 	andi	r4,r4,255
 4028e54:	2002361e 	bne	r4,zero,4029730 <___vfiprintf_internal_r+0x1434>
 4028e58:	1801c126 	beq	r3,zero,4029560 <___vfiprintf_internal_r+0x1264>
 4028e5c:	04800044 	movi	r18,1
 4028e60:	d8c01005 	stb	r3,64(sp)
 4028e64:	d8001d85 	stb	zero,118(sp)
 4028e68:	9027883a 	mov	r19,r18
 4028e6c:	dd401004 	addi	r21,sp,64
 4028e70:	003f1106 	br	4028ab8 <__alt_data_end+0xfffe8ab8>
 4028e74:	d9402117 	ldw	r5,132(sp)
 4028e78:	d9002017 	ldw	r4,128(sp)
 4028e7c:	d9801a04 	addi	r6,sp,104
 4028e80:	d9c02b15 	stw	r7,172(sp)
 4028e84:	dbc02a15 	stw	r15,168(sp)
 4028e88:	40281e80 	call	40281e8 <__sprint_r.part.0>
 4028e8c:	d9c02b17 	ldw	r7,172(sp)
 4028e90:	dbc02a17 	ldw	r15,168(sp)
 4028e94:	10006d1e 	bne	r2,zero,402904c <___vfiprintf_internal_r+0xd50>
 4028e98:	d9801b17 	ldw	r6,108(sp)
 4028e9c:	d8801c17 	ldw	r2,112(sp)
 4028ea0:	d811883a 	mov	r8,sp
 4028ea4:	31400044 	addi	r5,r6,1
 4028ea8:	003e3306 	br	4028778 <__alt_data_end+0xfffe8778>
 4028eac:	d9401b17 	ldw	r5,108(sp)
 4028eb0:	d8801c17 	ldw	r2,112(sp)
 4028eb4:	29000044 	addi	r4,r5,1
 4028eb8:	d8c01d87 	ldb	r3,118(sp)
 4028ebc:	183e4d26 	beq	r3,zero,40287f4 <__alt_data_end+0xfffe87f4>
 4028ec0:	00c00044 	movi	r3,1
 4028ec4:	d9401d84 	addi	r5,sp,118
 4028ec8:	10c5883a 	add	r2,r2,r3
 4028ecc:	41400015 	stw	r5,0(r8)
 4028ed0:	40c00115 	stw	r3,4(r8)
 4028ed4:	d8801c15 	stw	r2,112(sp)
 4028ed8:	d9001b15 	stw	r4,108(sp)
 4028edc:	014001c4 	movi	r5,7
 4028ee0:	2900a90e 	bge	r5,r4,4029188 <___vfiprintf_internal_r+0xe8c>
 4028ee4:	1000da1e 	bne	r2,zero,4029250 <___vfiprintf_internal_r+0xf54>
 4028ee8:	7000ab1e 	bne	r14,zero,4029198 <___vfiprintf_internal_r+0xe9c>
 4028eec:	000b883a 	mov	r5,zero
 4028ef0:	1809883a 	mov	r4,r3
 4028ef4:	d811883a 	mov	r8,sp
 4028ef8:	00c02004 	movi	r3,128
 4028efc:	e0fe4d26 	beq	fp,r3,4028834 <__alt_data_end+0xfffe8834>
 4028f00:	4cf9c83a 	sub	fp,r9,r19
 4028f04:	073e7b0e 	bge	zero,fp,40288f4 <__alt_data_end+0xfffe88f4>
 4028f08:	01c00404 	movi	r7,16
 4028f0c:	3f01900e 	bge	r7,fp,4029550 <___vfiprintf_internal_r+0x1254>
 4028f10:	00c100f4 	movhi	r3,1027
 4028f14:	18c4f104 	addi	r3,r3,5060
 4028f18:	d8c02415 	stw	r3,144(sp)
 4028f1c:	034001c4 	movi	r13,7
 4028f20:	00000506 	br	4028f38 <___vfiprintf_internal_r+0xc3c>
 4028f24:	29000084 	addi	r4,r5,2
 4028f28:	42000204 	addi	r8,r8,8
 4028f2c:	180b883a 	mov	r5,r3
 4028f30:	e73ffc04 	addi	fp,fp,-16
 4028f34:	3f000d0e 	bge	r7,fp,4028f6c <___vfiprintf_internal_r+0xc70>
 4028f38:	10800404 	addi	r2,r2,16
 4028f3c:	28c00044 	addi	r3,r5,1
 4028f40:	45c00015 	stw	r23,0(r8)
 4028f44:	41c00115 	stw	r7,4(r8)
 4028f48:	d8801c15 	stw	r2,112(sp)
 4028f4c:	d8c01b15 	stw	r3,108(sp)
 4028f50:	68fff40e 	bge	r13,r3,4028f24 <__alt_data_end+0xfffe8f24>
 4028f54:	1000101e 	bne	r2,zero,4028f98 <___vfiprintf_internal_r+0xc9c>
 4028f58:	e73ffc04 	addi	fp,fp,-16
 4028f5c:	01000044 	movi	r4,1
 4028f60:	000b883a 	mov	r5,zero
 4028f64:	d811883a 	mov	r8,sp
 4028f68:	3f3ff316 	blt	r7,fp,4028f38 <__alt_data_end+0xfffe8f38>
 4028f6c:	da802417 	ldw	r10,144(sp)
 4028f70:	1705883a 	add	r2,r2,fp
 4028f74:	47000115 	stw	fp,4(r8)
 4028f78:	42800015 	stw	r10,0(r8)
 4028f7c:	d8801c15 	stw	r2,112(sp)
 4028f80:	d9001b15 	stw	r4,108(sp)
 4028f84:	00c001c4 	movi	r3,7
 4028f88:	19003616 	blt	r3,r4,4029064 <___vfiprintf_internal_r+0xd68>
 4028f8c:	42000204 	addi	r8,r8,8
 4028f90:	21000044 	addi	r4,r4,1
 4028f94:	003e5706 	br	40288f4 <__alt_data_end+0xfffe88f4>
 4028f98:	d9402117 	ldw	r5,132(sp)
 4028f9c:	d9002017 	ldw	r4,128(sp)
 4028fa0:	d9801a04 	addi	r6,sp,104
 4028fa4:	d9c02b15 	stw	r7,172(sp)
 4028fa8:	db402a15 	stw	r13,168(sp)
 4028fac:	40281e80 	call	40281e8 <__sprint_r.part.0>
 4028fb0:	d9c02b17 	ldw	r7,172(sp)
 4028fb4:	db402a17 	ldw	r13,168(sp)
 4028fb8:	1000241e 	bne	r2,zero,402904c <___vfiprintf_internal_r+0xd50>
 4028fbc:	d9401b17 	ldw	r5,108(sp)
 4028fc0:	d8801c17 	ldw	r2,112(sp)
 4028fc4:	d811883a 	mov	r8,sp
 4028fc8:	29000044 	addi	r4,r5,1
 4028fcc:	003fd806 	br	4028f30 <__alt_data_end+0xfffe8f30>
 4028fd0:	d9401b17 	ldw	r5,108(sp)
 4028fd4:	00c100f4 	movhi	r3,1027
 4028fd8:	18c4f504 	addi	r3,r3,5076
 4028fdc:	d8c02415 	stw	r3,144(sp)
 4028fe0:	29400044 	addi	r5,r5,1
 4028fe4:	d8c02417 	ldw	r3,144(sp)
 4028fe8:	14c5883a 	add	r2,r2,r19
 4028fec:	44c00115 	stw	r19,4(r8)
 4028ff0:	40c00015 	stw	r3,0(r8)
 4028ff4:	d8801c15 	stw	r2,112(sp)
 4028ff8:	d9401b15 	stw	r5,108(sp)
 4028ffc:	00c001c4 	movi	r3,7
 4029000:	1940070e 	bge	r3,r5,4029020 <___vfiprintf_internal_r+0xd24>
 4029004:	103e4826 	beq	r2,zero,4028928 <__alt_data_end+0xfffe8928>
 4029008:	d9402117 	ldw	r5,132(sp)
 402900c:	d9002017 	ldw	r4,128(sp)
 4029010:	d9801a04 	addi	r6,sp,104
 4029014:	40281e80 	call	40281e8 <__sprint_r.part.0>
 4029018:	10000c1e 	bne	r2,zero,402904c <___vfiprintf_internal_r+0xd50>
 402901c:	d8801c17 	ldw	r2,112(sp)
 4029020:	8c80010e 	bge	r17,r18,4029028 <___vfiprintf_internal_r+0xd2c>
 4029024:	9023883a 	mov	r17,r18
 4029028:	da802317 	ldw	r10,140(sp)
 402902c:	5455883a 	add	r10,r10,r17
 4029030:	da802315 	stw	r10,140(sp)
 4029034:	103e4126 	beq	r2,zero,402893c <__alt_data_end+0xfffe893c>
 4029038:	d9402117 	ldw	r5,132(sp)
 402903c:	d9002017 	ldw	r4,128(sp)
 4029040:	d9801a04 	addi	r6,sp,104
 4029044:	40281e80 	call	40281e8 <__sprint_r.part.0>
 4029048:	103e3c26 	beq	r2,zero,402893c <__alt_data_end+0xfffe893c>
 402904c:	dd002117 	ldw	r20,132(sp)
 4029050:	a080030b 	ldhu	r2,12(r20)
 4029054:	1080100c 	andi	r2,r2,64
 4029058:	1001231e 	bne	r2,zero,40294e8 <___vfiprintf_internal_r+0x11ec>
 402905c:	d8802317 	ldw	r2,140(sp)
 4029060:	003d7b06 	br	4028650 <__alt_data_end+0xfffe8650>
 4029064:	1000991e 	bne	r2,zero,40292cc <___vfiprintf_internal_r+0xfd0>
 4029068:	00c00044 	movi	r3,1
 402906c:	9805883a 	mov	r2,r19
 4029070:	dd400015 	stw	r21,0(sp)
 4029074:	dcc00115 	stw	r19,4(sp)
 4029078:	dcc01c15 	stw	r19,112(sp)
 402907c:	d8c01b15 	stw	r3,108(sp)
 4029080:	d811883a 	mov	r8,sp
 4029084:	42000204 	addi	r8,r8,8
 4029088:	a2c0010c 	andi	r11,r20,4
 402908c:	583fe426 	beq	r11,zero,4029020 <__alt_data_end+0xfffe9020>
 4029090:	8ca7c83a 	sub	r19,r17,r18
 4029094:	04ffe20e 	bge	zero,r19,4029020 <__alt_data_end+0xfffe9020>
 4029098:	01c00404 	movi	r7,16
 402909c:	3cffcc0e 	bge	r7,r19,4028fd0 <__alt_data_end+0xfffe8fd0>
 40290a0:	028100f4 	movhi	r10,1027
 40290a4:	5284f504 	addi	r10,r10,5076
 40290a8:	d9001b17 	ldw	r4,108(sp)
 40290ac:	da802415 	stw	r10,144(sp)
 40290b0:	382b883a 	mov	r21,r7
 40290b4:	050001c4 	movi	r20,7
 40290b8:	df002017 	ldw	fp,128(sp)
 40290bc:	00000506 	br	40290d4 <___vfiprintf_internal_r+0xdd8>
 40290c0:	21400084 	addi	r5,r4,2
 40290c4:	42000204 	addi	r8,r8,8
 40290c8:	1809883a 	mov	r4,r3
 40290cc:	9cfffc04 	addi	r19,r19,-16
 40290d0:	acffc40e 	bge	r21,r19,4028fe4 <__alt_data_end+0xfffe8fe4>
 40290d4:	10800404 	addi	r2,r2,16
 40290d8:	20c00044 	addi	r3,r4,1
 40290dc:	45800015 	stw	r22,0(r8)
 40290e0:	45400115 	stw	r21,4(r8)
 40290e4:	d8801c15 	stw	r2,112(sp)
 40290e8:	d8c01b15 	stw	r3,108(sp)
 40290ec:	a0fff40e 	bge	r20,r3,40290c0 <__alt_data_end+0xfffe90c0>
 40290f0:	1000041e 	bne	r2,zero,4029104 <___vfiprintf_internal_r+0xe08>
 40290f4:	01400044 	movi	r5,1
 40290f8:	0009883a 	mov	r4,zero
 40290fc:	d811883a 	mov	r8,sp
 4029100:	003ff206 	br	40290cc <__alt_data_end+0xfffe90cc>
 4029104:	d9402117 	ldw	r5,132(sp)
 4029108:	d9801a04 	addi	r6,sp,104
 402910c:	e009883a 	mov	r4,fp
 4029110:	40281e80 	call	40281e8 <__sprint_r.part.0>
 4029114:	103fcd1e 	bne	r2,zero,402904c <__alt_data_end+0xfffe904c>
 4029118:	d9001b17 	ldw	r4,108(sp)
 402911c:	d8801c17 	ldw	r2,112(sp)
 4029120:	d811883a 	mov	r8,sp
 4029124:	21400044 	addi	r5,r4,1
 4029128:	003fe806 	br	40290cc <__alt_data_end+0xfffe90cc>
 402912c:	d9402117 	ldw	r5,132(sp)
 4029130:	d9002017 	ldw	r4,128(sp)
 4029134:	d9801a04 	addi	r6,sp,104
 4029138:	d9c02b15 	stw	r7,172(sp)
 402913c:	db402a15 	stw	r13,168(sp)
 4029140:	40281e80 	call	40281e8 <__sprint_r.part.0>
 4029144:	d9c02b17 	ldw	r7,172(sp)
 4029148:	db402a17 	ldw	r13,168(sp)
 402914c:	103fbf1e 	bne	r2,zero,402904c <__alt_data_end+0xfffe904c>
 4029150:	d9401b17 	ldw	r5,108(sp)
 4029154:	d8801c17 	ldw	r2,112(sp)
 4029158:	d811883a 	mov	r8,sp
 402915c:	29800044 	addi	r6,r5,1
 4029160:	003dc406 	br	4028874 <__alt_data_end+0xfffe8874>
 4029164:	1000d21e 	bne	r2,zero,40294b0 <___vfiprintf_internal_r+0x11b4>
 4029168:	d8c01d87 	ldb	r3,118(sp)
 402916c:	18009526 	beq	r3,zero,40293c4 <___vfiprintf_internal_r+0x10c8>
 4029170:	00800044 	movi	r2,1
 4029174:	d8c01d84 	addi	r3,sp,118
 4029178:	1009883a 	mov	r4,r2
 402917c:	d8c00015 	stw	r3,0(sp)
 4029180:	d8800115 	stw	r2,4(sp)
 4029184:	d811883a 	mov	r8,sp
 4029188:	200b883a 	mov	r5,r4
 402918c:	42000204 	addi	r8,r8,8
 4029190:	21000044 	addi	r4,r4,1
 4029194:	003d9706 	br	40287f4 <__alt_data_end+0xfffe87f4>
 4029198:	d9001d04 	addi	r4,sp,116
 402919c:	00800084 	movi	r2,2
 40291a0:	d9000015 	stw	r4,0(sp)
 40291a4:	d8800115 	stw	r2,4(sp)
 40291a8:	1809883a 	mov	r4,r3
 40291ac:	d811883a 	mov	r8,sp
 40291b0:	200b883a 	mov	r5,r4
 40291b4:	42000204 	addi	r8,r8,8
 40291b8:	21000044 	addi	r4,r4,1
 40291bc:	003f4e06 	br	4028ef8 <__alt_data_end+0xfffe8ef8>
 40291c0:	d8001d85 	stb	zero,118(sp)
 40291c4:	48005016 	blt	r9,zero,4029308 <___vfiprintf_internal_r+0x100c>
 40291c8:	00ffdfc4 	movi	r3,-129
 40291cc:	94c4b03a 	or	r2,r18,r19
 40291d0:	a0e8703a 	and	r20,r20,r3
 40291d4:	103d4426 	beq	r2,zero,40286e8 <__alt_data_end+0xfffe86e8>
 40291d8:	0039883a 	mov	fp,zero
 40291dc:	d9002617 	ldw	r4,152(sp)
 40291e0:	dd401a04 	addi	r21,sp,104
 40291e4:	908003cc 	andi	r2,r18,15
 40291e8:	9806973a 	slli	r3,r19,28
 40291ec:	2085883a 	add	r2,r4,r2
 40291f0:	9024d13a 	srli	r18,r18,4
 40291f4:	10800003 	ldbu	r2,0(r2)
 40291f8:	9826d13a 	srli	r19,r19,4
 40291fc:	ad7fffc4 	addi	r21,r21,-1
 4029200:	1ca4b03a 	or	r18,r3,r18
 4029204:	a8800005 	stb	r2,0(r21)
 4029208:	94c4b03a 	or	r2,r18,r19
 402920c:	103ff51e 	bne	r2,zero,40291e4 <__alt_data_end+0xfffe91e4>
 4029210:	003e5906 	br	4028b78 <__alt_data_end+0xfffe8b78>
 4029214:	d9402117 	ldw	r5,132(sp)
 4029218:	d9002017 	ldw	r4,128(sp)
 402921c:	d9801a04 	addi	r6,sp,104
 4029220:	40281e80 	call	40281e8 <__sprint_r.part.0>
 4029224:	103f891e 	bne	r2,zero,402904c <__alt_data_end+0xfffe904c>
 4029228:	d8801c17 	ldw	r2,112(sp)
 402922c:	d811883a 	mov	r8,sp
 4029230:	003f9506 	br	4029088 <__alt_data_end+0xfffe9088>
 4029234:	d9402117 	ldw	r5,132(sp)
 4029238:	d9002017 	ldw	r4,128(sp)
 402923c:	d9801a04 	addi	r6,sp,104
 4029240:	40281e80 	call	40281e8 <__sprint_r.part.0>
 4029244:	103f811e 	bne	r2,zero,402904c <__alt_data_end+0xfffe904c>
 4029248:	d811883a 	mov	r8,sp
 402924c:	003ced06 	br	4028604 <__alt_data_end+0xfffe8604>
 4029250:	d9402117 	ldw	r5,132(sp)
 4029254:	d9002017 	ldw	r4,128(sp)
 4029258:	d9801a04 	addi	r6,sp,104
 402925c:	da402c15 	stw	r9,176(sp)
 4029260:	db802a15 	stw	r14,168(sp)
 4029264:	40281e80 	call	40281e8 <__sprint_r.part.0>
 4029268:	da402c17 	ldw	r9,176(sp)
 402926c:	db802a17 	ldw	r14,168(sp)
 4029270:	103f761e 	bne	r2,zero,402904c <__alt_data_end+0xfffe904c>
 4029274:	d9401b17 	ldw	r5,108(sp)
 4029278:	d8801c17 	ldw	r2,112(sp)
 402927c:	d811883a 	mov	r8,sp
 4029280:	29000044 	addi	r4,r5,1
 4029284:	003d5b06 	br	40287f4 <__alt_data_end+0xfffe87f4>
 4029288:	d9402117 	ldw	r5,132(sp)
 402928c:	d9002017 	ldw	r4,128(sp)
 4029290:	d9801a04 	addi	r6,sp,104
 4029294:	da402c15 	stw	r9,176(sp)
 4029298:	40281e80 	call	40281e8 <__sprint_r.part.0>
 402929c:	da402c17 	ldw	r9,176(sp)
 40292a0:	103f6a1e 	bne	r2,zero,402904c <__alt_data_end+0xfffe904c>
 40292a4:	d9401b17 	ldw	r5,108(sp)
 40292a8:	d8801c17 	ldw	r2,112(sp)
 40292ac:	d811883a 	mov	r8,sp
 40292b0:	29000044 	addi	r4,r5,1
 40292b4:	003f1006 	br	4028ef8 <__alt_data_end+0xfffe8ef8>
 40292b8:	1000c31e 	bne	r2,zero,40295c8 <___vfiprintf_internal_r+0x12cc>
 40292bc:	01000044 	movi	r4,1
 40292c0:	000b883a 	mov	r5,zero
 40292c4:	d811883a 	mov	r8,sp
 40292c8:	003f0d06 	br	4028f00 <__alt_data_end+0xfffe8f00>
 40292cc:	d9402117 	ldw	r5,132(sp)
 40292d0:	d9002017 	ldw	r4,128(sp)
 40292d4:	d9801a04 	addi	r6,sp,104
 40292d8:	40281e80 	call	40281e8 <__sprint_r.part.0>
 40292dc:	103f5b1e 	bne	r2,zero,402904c <__alt_data_end+0xfffe904c>
 40292e0:	d9001b17 	ldw	r4,108(sp)
 40292e4:	d8801c17 	ldw	r2,112(sp)
 40292e8:	d811883a 	mov	r8,sp
 40292ec:	21000044 	addi	r4,r4,1
 40292f0:	003d8006 	br	40288f4 <__alt_data_end+0xfffe88f4>
 40292f4:	010100f4 	movhi	r4,1027
 40292f8:	21049004 	addi	r4,r4,4672
 40292fc:	d9002615 	stw	r4,152(sp)
 4029300:	d8c02215 	stw	r3,136(sp)
 4029304:	1029883a 	mov	r20,r2
 4029308:	94c4b03a 	or	r2,r18,r19
 402930c:	103fb21e 	bne	r2,zero,40291d8 <__alt_data_end+0xfffe91d8>
 4029310:	0039883a 	mov	fp,zero
 4029314:	00800084 	movi	r2,2
 4029318:	003e6b06 	br	4028cc8 <__alt_data_end+0xfffe8cc8>
 402931c:	da802217 	ldw	r10,136(sp)
 4029320:	d8001d85 	stb	zero,118(sp)
 4029324:	0027883a 	mov	r19,zero
 4029328:	50800104 	addi	r2,r10,4
 402932c:	54800017 	ldw	r18,0(r10)
 4029330:	483e6016 	blt	r9,zero,4028cb4 <__alt_data_end+0xfffe8cb4>
 4029334:	00ffdfc4 	movi	r3,-129
 4029338:	d8802215 	stw	r2,136(sp)
 402933c:	a0e8703a 	and	r20,r20,r3
 4029340:	0039883a 	mov	fp,zero
 4029344:	903ebb26 	beq	r18,zero,4028e34 <__alt_data_end+0xfffe8e34>
 4029348:	00800244 	movi	r2,9
 402934c:	14bdee36 	bltu	r2,r18,4028b08 <__alt_data_end+0xfffe8b08>
 4029350:	003eba06 	br	4028e3c <__alt_data_end+0xfffe8e3c>
 4029354:	00800c04 	movi	r2,48
 4029358:	d8c01d45 	stb	r3,117(sp)
 402935c:	d8801d05 	stb	r2,116(sp)
 4029360:	d8001d85 	stb	zero,118(sp)
 4029364:	a0c00094 	ori	r3,r20,2
 4029368:	4800a916 	blt	r9,zero,4029610 <___vfiprintf_internal_r+0x1314>
 402936c:	00bfdfc4 	movi	r2,-129
 4029370:	a096703a 	and	r11,r20,r2
 4029374:	5d000094 	ori	r20,r11,2
 4029378:	0039883a 	mov	fp,zero
 402937c:	003f9706 	br	40291dc <__alt_data_end+0xfffe91dc>
 4029380:	8025883a 	mov	r18,r16
 4029384:	003c2e06 	br	4028440 <__alt_data_end+0xfffe8440>
 4029388:	008100f4 	movhi	r2,1027
 402938c:	10849004 	addi	r2,r2,4672
 4029390:	0039883a 	mov	fp,zero
 4029394:	d8802615 	stw	r2,152(sp)
 4029398:	003f9006 	br	40291dc <__alt_data_end+0xfffe91dc>
 402939c:	04a5c83a 	sub	r18,zero,r18
 40293a0:	07000b44 	movi	fp,45
 40293a4:	9004c03a 	cmpne	r2,r18,zero
 40293a8:	04e7c83a 	sub	r19,zero,r19
 40293ac:	df001d85 	stb	fp,118(sp)
 40293b0:	98a7c83a 	sub	r19,r19,r2
 40293b4:	48009f16 	blt	r9,zero,4029634 <___vfiprintf_internal_r+0x1338>
 40293b8:	00bfdfc4 	movi	r2,-129
 40293bc:	a0a8703a 	and	r20,r20,r2
 40293c0:	003dd006 	br	4028b04 <__alt_data_end+0xfffe8b04>
 40293c4:	70004c26 	beq	r14,zero,40294f8 <___vfiprintf_internal_r+0x11fc>
 40293c8:	00800084 	movi	r2,2
 40293cc:	d8c01d04 	addi	r3,sp,116
 40293d0:	d8c00015 	stw	r3,0(sp)
 40293d4:	d8800115 	stw	r2,4(sp)
 40293d8:	01000044 	movi	r4,1
 40293dc:	d811883a 	mov	r8,sp
 40293e0:	003f7306 	br	40291b0 <__alt_data_end+0xfffe91b0>
 40293e4:	a080100c 	andi	r2,r20,64
 40293e8:	da802217 	ldw	r10,136(sp)
 40293ec:	103e0626 	beq	r2,zero,4028c08 <__alt_data_end+0xfffe8c08>
 40293f0:	5480000f 	ldh	r18,0(r10)
 40293f4:	52800104 	addi	r10,r10,4
 40293f8:	da802215 	stw	r10,136(sp)
 40293fc:	9027d7fa 	srai	r19,r18,31
 4029400:	9805883a 	mov	r2,r19
 4029404:	003db806 	br	4028ae8 <__alt_data_end+0xfffe8ae8>
 4029408:	a080040c 	andi	r2,r20,16
 402940c:	1000091e 	bne	r2,zero,4029434 <___vfiprintf_internal_r+0x1138>
 4029410:	a2c0100c 	andi	r11,r20,64
 4029414:	58000726 	beq	r11,zero,4029434 <___vfiprintf_internal_r+0x1138>
 4029418:	da802217 	ldw	r10,136(sp)
 402941c:	50800017 	ldw	r2,0(r10)
 4029420:	52800104 	addi	r10,r10,4
 4029424:	da802215 	stw	r10,136(sp)
 4029428:	da802317 	ldw	r10,140(sp)
 402942c:	1280000d 	sth	r10,0(r2)
 4029430:	003be706 	br	40283d0 <__alt_data_end+0xfffe83d0>
 4029434:	da802217 	ldw	r10,136(sp)
 4029438:	50800017 	ldw	r2,0(r10)
 402943c:	52800104 	addi	r10,r10,4
 4029440:	da802215 	stw	r10,136(sp)
 4029444:	da802317 	ldw	r10,140(sp)
 4029448:	12800015 	stw	r10,0(r2)
 402944c:	003be006 	br	40283d0 <__alt_data_end+0xfffe83d0>
 4029450:	a080100c 	andi	r2,r20,64
 4029454:	da802217 	ldw	r10,136(sp)
 4029458:	10003026 	beq	r2,zero,402951c <___vfiprintf_internal_r+0x1220>
 402945c:	5480000b 	ldhu	r18,0(r10)
 4029460:	52800104 	addi	r10,r10,4
 4029464:	0027883a 	mov	r19,zero
 4029468:	da802215 	stw	r10,136(sp)
 402946c:	003d8006 	br	4028a70 <__alt_data_end+0xfffe8a70>
 4029470:	80c00007 	ldb	r3,0(r16)
 4029474:	003c0006 	br	4028478 <__alt_data_end+0xfffe8478>
 4029478:	a080100c 	andi	r2,r20,64
 402947c:	d8001d85 	stb	zero,118(sp)
 4029480:	da802217 	ldw	r10,136(sp)
 4029484:	1000201e 	bne	r2,zero,4029508 <___vfiprintf_internal_r+0x120c>
 4029488:	50800104 	addi	r2,r10,4
 402948c:	54800017 	ldw	r18,0(r10)
 4029490:	0027883a 	mov	r19,zero
 4029494:	483def0e 	bge	r9,zero,4028c54 <__alt_data_end+0xfffe8c54>
 4029498:	94c6b03a 	or	r3,r18,r19
 402949c:	d8802215 	stw	r2,136(sp)
 40294a0:	183d4e1e 	bne	r3,zero,40289dc <__alt_data_end+0xfffe89dc>
 40294a4:	0039883a 	mov	fp,zero
 40294a8:	0005883a 	mov	r2,zero
 40294ac:	003e0606 	br	4028cc8 <__alt_data_end+0xfffe8cc8>
 40294b0:	d9402117 	ldw	r5,132(sp)
 40294b4:	d9002017 	ldw	r4,128(sp)
 40294b8:	d9801a04 	addi	r6,sp,104
 40294bc:	da402c15 	stw	r9,176(sp)
 40294c0:	db802a15 	stw	r14,168(sp)
 40294c4:	40281e80 	call	40281e8 <__sprint_r.part.0>
 40294c8:	da402c17 	ldw	r9,176(sp)
 40294cc:	db802a17 	ldw	r14,168(sp)
 40294d0:	103ede1e 	bne	r2,zero,402904c <__alt_data_end+0xfffe904c>
 40294d4:	d9401b17 	ldw	r5,108(sp)
 40294d8:	d8801c17 	ldw	r2,112(sp)
 40294dc:	d811883a 	mov	r8,sp
 40294e0:	29000044 	addi	r4,r5,1
 40294e4:	003e7406 	br	4028eb8 <__alt_data_end+0xfffe8eb8>
 40294e8:	00bfffc4 	movi	r2,-1
 40294ec:	003c5806 	br	4028650 <__alt_data_end+0xfffe8650>
 40294f0:	d811883a 	mov	r8,sp
 40294f4:	003ee806 	br	4029098 <__alt_data_end+0xfffe9098>
 40294f8:	000b883a 	mov	r5,zero
 40294fc:	01000044 	movi	r4,1
 4029500:	d811883a 	mov	r8,sp
 4029504:	003e7c06 	br	4028ef8 <__alt_data_end+0xfffe8ef8>
 4029508:	50800104 	addi	r2,r10,4
 402950c:	5480000b 	ldhu	r18,0(r10)
 4029510:	0027883a 	mov	r19,zero
 4029514:	483dcf0e 	bge	r9,zero,4028c54 <__alt_data_end+0xfffe8c54>
 4029518:	003fdf06 	br	4029498 <__alt_data_end+0xfffe9498>
 402951c:	54800017 	ldw	r18,0(r10)
 4029520:	52800104 	addi	r10,r10,4
 4029524:	0027883a 	mov	r19,zero
 4029528:	da802215 	stw	r10,136(sp)
 402952c:	003d5006 	br	4028a70 <__alt_data_end+0xfffe8a70>
 4029530:	50800104 	addi	r2,r10,4
 4029534:	5480000b 	ldhu	r18,0(r10)
 4029538:	0027883a 	mov	r19,zero
 402953c:	483f7d0e 	bge	r9,zero,4029334 <__alt_data_end+0xfffe9334>
 4029540:	003ddc06 	br	4028cb4 <__alt_data_end+0xfffe8cb4>
 4029544:	d8c02215 	stw	r3,136(sp)
 4029548:	0039883a 	mov	fp,zero
 402954c:	003ddb06 	br	4028cbc <__alt_data_end+0xfffe8cbc>
 4029550:	028100f4 	movhi	r10,1027
 4029554:	5284f104 	addi	r10,r10,5060
 4029558:	da802415 	stw	r10,144(sp)
 402955c:	003e8306 	br	4028f6c <__alt_data_end+0xfffe8f6c>
 4029560:	d8801c17 	ldw	r2,112(sp)
 4029564:	dd002117 	ldw	r20,132(sp)
 4029568:	103eb926 	beq	r2,zero,4029050 <__alt_data_end+0xfffe9050>
 402956c:	d9002017 	ldw	r4,128(sp)
 4029570:	d9801a04 	addi	r6,sp,104
 4029574:	a00b883a 	mov	r5,r20
 4029578:	40281e80 	call	40281e8 <__sprint_r.part.0>
 402957c:	003eb406 	br	4029050 <__alt_data_end+0xfffe9050>
 4029580:	80c00043 	ldbu	r3,1(r16)
 4029584:	a5000814 	ori	r20,r20,32
 4029588:	84000044 	addi	r16,r16,1
 402958c:	18c03fcc 	andi	r3,r3,255
 4029590:	18c0201c 	xori	r3,r3,128
 4029594:	18ffe004 	addi	r3,r3,-128
 4029598:	003bb706 	br	4028478 <__alt_data_end+0xfffe8478>
 402959c:	a809883a 	mov	r4,r21
 40295a0:	d8c02a15 	stw	r3,168(sp)
 40295a4:	da002b15 	stw	r8,172(sp)
 40295a8:	4020ae80 	call	4020ae8 <strlen>
 40295ac:	d8c02a17 	ldw	r3,168(sp)
 40295b0:	1027883a 	mov	r19,r2
 40295b4:	df001d83 	ldbu	fp,118(sp)
 40295b8:	d8c02215 	stw	r3,136(sp)
 40295bc:	0013883a 	mov	r9,zero
 40295c0:	da002b17 	ldw	r8,172(sp)
 40295c4:	003c4d06 	br	40286fc <__alt_data_end+0xfffe86fc>
 40295c8:	d9402117 	ldw	r5,132(sp)
 40295cc:	d9002017 	ldw	r4,128(sp)
 40295d0:	d9801a04 	addi	r6,sp,104
 40295d4:	da402c15 	stw	r9,176(sp)
 40295d8:	40281e80 	call	40281e8 <__sprint_r.part.0>
 40295dc:	da402c17 	ldw	r9,176(sp)
 40295e0:	103e9a1e 	bne	r2,zero,402904c <__alt_data_end+0xfffe904c>
 40295e4:	d9401b17 	ldw	r5,108(sp)
 40295e8:	d8801c17 	ldw	r2,112(sp)
 40295ec:	d811883a 	mov	r8,sp
 40295f0:	29000044 	addi	r4,r5,1
 40295f4:	003e4206 	br	4028f00 <__alt_data_end+0xfffe8f00>
 40295f8:	d9401b17 	ldw	r5,108(sp)
 40295fc:	010100f4 	movhi	r4,1027
 4029600:	2104f504 	addi	r4,r4,5076
 4029604:	d9002415 	stw	r4,144(sp)
 4029608:	29400044 	addi	r5,r5,1
 402960c:	003c6d06 	br	40287c4 <__alt_data_end+0xfffe87c4>
 4029610:	0039883a 	mov	fp,zero
 4029614:	00800084 	movi	r2,2
 4029618:	10803fcc 	andi	r2,r2,255
 402961c:	01000044 	movi	r4,1
 4029620:	11001e26 	beq	r2,r4,402969c <___vfiprintf_internal_r+0x13a0>
 4029624:	01000084 	movi	r4,2
 4029628:	11001e1e 	bne	r2,r4,40296a4 <___vfiprintf_internal_r+0x13a8>
 402962c:	1829883a 	mov	r20,r3
 4029630:	003eea06 	br	40291dc <__alt_data_end+0xfffe91dc>
 4029634:	a007883a 	mov	r3,r20
 4029638:	00800044 	movi	r2,1
 402963c:	003ff606 	br	4029618 <__alt_data_end+0xfffe9618>
 4029640:	00800184 	movi	r2,6
 4029644:	1240012e 	bgeu	r2,r9,402964c <___vfiprintf_internal_r+0x1350>
 4029648:	1013883a 	mov	r9,r2
 402964c:	4827883a 	mov	r19,r9
 4029650:	4825883a 	mov	r18,r9
 4029654:	48001516 	blt	r9,zero,40296ac <___vfiprintf_internal_r+0x13b0>
 4029658:	054100f4 	movhi	r21,1027
 402965c:	d8c02215 	stw	r3,136(sp)
 4029660:	ad449504 	addi	r21,r21,4692
 4029664:	003d1406 	br	4028ab8 <__alt_data_end+0xfffe8ab8>
 4029668:	028100f4 	movhi	r10,1027
 402966c:	5284f104 	addi	r10,r10,5060
 4029670:	da802415 	stw	r10,144(sp)
 4029674:	200d883a 	mov	r6,r4
 4029678:	003c9106 	br	40288c0 <__alt_data_end+0xfffe88c0>
 402967c:	5021883a 	mov	r16,r10
 4029680:	0013883a 	mov	r9,zero
 4029684:	003b7d06 	br	402847c <__alt_data_end+0xfffe847c>
 4029688:	4827883a 	mov	r19,r9
 402968c:	df001d83 	ldbu	fp,118(sp)
 4029690:	d8c02215 	stw	r3,136(sp)
 4029694:	0013883a 	mov	r9,zero
 4029698:	003c1806 	br	40286fc <__alt_data_end+0xfffe86fc>
 402969c:	1829883a 	mov	r20,r3
 40296a0:	003d1806 	br	4028b04 <__alt_data_end+0xfffe8b04>
 40296a4:	1829883a 	mov	r20,r3
 40296a8:	003ccd06 	br	40289e0 <__alt_data_end+0xfffe89e0>
 40296ac:	0025883a 	mov	r18,zero
 40296b0:	003fe906 	br	4029658 <__alt_data_end+0xfffe9658>
 40296b4:	d8802217 	ldw	r2,136(sp)
 40296b8:	80c00043 	ldbu	r3,1(r16)
 40296bc:	5021883a 	mov	r16,r10
 40296c0:	12400017 	ldw	r9,0(r2)
 40296c4:	10800104 	addi	r2,r2,4
 40296c8:	d8802215 	stw	r2,136(sp)
 40296cc:	483faf0e 	bge	r9,zero,402958c <__alt_data_end+0xfffe958c>
 40296d0:	18c03fcc 	andi	r3,r3,255
 40296d4:	18c0201c 	xori	r3,r3,128
 40296d8:	027fffc4 	movi	r9,-1
 40296dc:	18ffe004 	addi	r3,r3,-128
 40296e0:	003b6506 	br	4028478 <__alt_data_end+0xfffe8478>
 40296e4:	d9c01d85 	stb	r7,118(sp)
 40296e8:	003ca006 	br	402896c <__alt_data_end+0xfffe896c>
 40296ec:	d9c01d85 	stb	r7,118(sp)
 40296f0:	003cad06 	br	40289a8 <__alt_data_end+0xfffe89a8>
 40296f4:	d9c01d85 	stb	r7,118(sp)
 40296f8:	003d7d06 	br	4028cf0 <__alt_data_end+0xfffe8cf0>
 40296fc:	d9c01d85 	stb	r7,118(sp)
 4029700:	003d5f06 	br	4028c80 <__alt_data_end+0xfffe8c80>
 4029704:	a080004c 	andi	r2,r20,1
 4029708:	0039883a 	mov	fp,zero
 402970c:	10000526 	beq	r2,zero,4029724 <___vfiprintf_internal_r+0x1428>
 4029710:	00800c04 	movi	r2,48
 4029714:	d88019c5 	stb	r2,103(sp)
 4029718:	dcc02717 	ldw	r19,156(sp)
 402971c:	dd4019c4 	addi	r21,sp,103
 4029720:	003bf606 	br	40286fc <__alt_data_end+0xfffe86fc>
 4029724:	0027883a 	mov	r19,zero
 4029728:	dd401a04 	addi	r21,sp,104
 402972c:	003bf306 	br	40286fc <__alt_data_end+0xfffe86fc>
 4029730:	d9c01d85 	stb	r7,118(sp)
 4029734:	003dc806 	br	4028e58 <__alt_data_end+0xfffe8e58>
 4029738:	d9c01d85 	stb	r7,118(sp)
 402973c:	003d3a06 	br	4028c28 <__alt_data_end+0xfffe8c28>
 4029740:	d9c01d85 	stb	r7,118(sp)
 4029744:	003d2a06 	br	4028bf0 <__alt_data_end+0xfffe8bf0>
 4029748:	d9c01d85 	stb	r7,118(sp)
 402974c:	003cde06 	br	4028ac8 <__alt_data_end+0xfffe8ac8>
 4029750:	d9c01d85 	stb	r7,118(sp)
 4029754:	003cbc06 	br	4028a48 <__alt_data_end+0xfffe8a48>

04029758 <__vfiprintf_internal>:
 4029758:	008100f4 	movhi	r2,1027
 402975c:	108c7404 	addi	r2,r2,12752
 4029760:	300f883a 	mov	r7,r6
 4029764:	280d883a 	mov	r6,r5
 4029768:	200b883a 	mov	r5,r4
 402976c:	11000017 	ldw	r4,0(r2)
 4029770:	40282fc1 	jmpi	40282fc <___vfiprintf_internal_r>

04029774 <__sbprintf>:
 4029774:	2880030b 	ldhu	r2,12(r5)
 4029778:	2ac01917 	ldw	r11,100(r5)
 402977c:	2a80038b 	ldhu	r10,14(r5)
 4029780:	2a400717 	ldw	r9,28(r5)
 4029784:	2a000917 	ldw	r8,36(r5)
 4029788:	defee204 	addi	sp,sp,-1144
 402978c:	00c10004 	movi	r3,1024
 4029790:	dc011a15 	stw	r16,1128(sp)
 4029794:	10bfff4c 	andi	r2,r2,65533
 4029798:	2821883a 	mov	r16,r5
 402979c:	d8cb883a 	add	r5,sp,r3
 40297a0:	dc811c15 	stw	r18,1136(sp)
 40297a4:	dc411b15 	stw	r17,1132(sp)
 40297a8:	dfc11d15 	stw	ra,1140(sp)
 40297ac:	2025883a 	mov	r18,r4
 40297b0:	d881030d 	sth	r2,1036(sp)
 40297b4:	dac11915 	stw	r11,1124(sp)
 40297b8:	da81038d 	sth	r10,1038(sp)
 40297bc:	da410715 	stw	r9,1052(sp)
 40297c0:	da010915 	stw	r8,1060(sp)
 40297c4:	dec10015 	stw	sp,1024(sp)
 40297c8:	dec10415 	stw	sp,1040(sp)
 40297cc:	d8c10215 	stw	r3,1032(sp)
 40297d0:	d8c10515 	stw	r3,1044(sp)
 40297d4:	d8010615 	stw	zero,1048(sp)
 40297d8:	40282fc0 	call	40282fc <___vfiprintf_internal_r>
 40297dc:	1023883a 	mov	r17,r2
 40297e0:	10000416 	blt	r2,zero,40297f4 <__sbprintf+0x80>
 40297e4:	d9410004 	addi	r5,sp,1024
 40297e8:	9009883a 	mov	r4,r18
 40297ec:	4024a480 	call	4024a48 <_fflush_r>
 40297f0:	10000d1e 	bne	r2,zero,4029828 <__sbprintf+0xb4>
 40297f4:	d881030b 	ldhu	r2,1036(sp)
 40297f8:	1080100c 	andi	r2,r2,64
 40297fc:	10000326 	beq	r2,zero,402980c <__sbprintf+0x98>
 4029800:	8080030b 	ldhu	r2,12(r16)
 4029804:	10801014 	ori	r2,r2,64
 4029808:	8080030d 	sth	r2,12(r16)
 402980c:	8805883a 	mov	r2,r17
 4029810:	dfc11d17 	ldw	ra,1140(sp)
 4029814:	dc811c17 	ldw	r18,1136(sp)
 4029818:	dc411b17 	ldw	r17,1132(sp)
 402981c:	dc011a17 	ldw	r16,1128(sp)
 4029820:	dec11e04 	addi	sp,sp,1144
 4029824:	f800283a 	ret
 4029828:	047fffc4 	movi	r17,-1
 402982c:	003ff106 	br	40297f4 <__alt_data_end+0xfffe97f4>

04029830 <__swbuf_r>:
 4029830:	defffb04 	addi	sp,sp,-20
 4029834:	dcc00315 	stw	r19,12(sp)
 4029838:	dc800215 	stw	r18,8(sp)
 402983c:	dc000015 	stw	r16,0(sp)
 4029840:	dfc00415 	stw	ra,16(sp)
 4029844:	dc400115 	stw	r17,4(sp)
 4029848:	2025883a 	mov	r18,r4
 402984c:	2827883a 	mov	r19,r5
 4029850:	3021883a 	mov	r16,r6
 4029854:	20000226 	beq	r4,zero,4029860 <__swbuf_r+0x30>
 4029858:	20800e17 	ldw	r2,56(r4)
 402985c:	10004226 	beq	r2,zero,4029968 <__swbuf_r+0x138>
 4029860:	80800617 	ldw	r2,24(r16)
 4029864:	8100030b 	ldhu	r4,12(r16)
 4029868:	80800215 	stw	r2,8(r16)
 402986c:	2080020c 	andi	r2,r4,8
 4029870:	10003626 	beq	r2,zero,402994c <__swbuf_r+0x11c>
 4029874:	80c00417 	ldw	r3,16(r16)
 4029878:	18003426 	beq	r3,zero,402994c <__swbuf_r+0x11c>
 402987c:	2088000c 	andi	r2,r4,8192
 4029880:	9c403fcc 	andi	r17,r19,255
 4029884:	10001a26 	beq	r2,zero,40298f0 <__swbuf_r+0xc0>
 4029888:	80800017 	ldw	r2,0(r16)
 402988c:	81000517 	ldw	r4,20(r16)
 4029890:	10c7c83a 	sub	r3,r2,r3
 4029894:	1900200e 	bge	r3,r4,4029918 <__swbuf_r+0xe8>
 4029898:	18c00044 	addi	r3,r3,1
 402989c:	81000217 	ldw	r4,8(r16)
 40298a0:	11400044 	addi	r5,r2,1
 40298a4:	81400015 	stw	r5,0(r16)
 40298a8:	213fffc4 	addi	r4,r4,-1
 40298ac:	81000215 	stw	r4,8(r16)
 40298b0:	14c00005 	stb	r19,0(r2)
 40298b4:	80800517 	ldw	r2,20(r16)
 40298b8:	10c01e26 	beq	r2,r3,4029934 <__swbuf_r+0x104>
 40298bc:	8080030b 	ldhu	r2,12(r16)
 40298c0:	1080004c 	andi	r2,r2,1
 40298c4:	10000226 	beq	r2,zero,40298d0 <__swbuf_r+0xa0>
 40298c8:	00800284 	movi	r2,10
 40298cc:	88801926 	beq	r17,r2,4029934 <__swbuf_r+0x104>
 40298d0:	8805883a 	mov	r2,r17
 40298d4:	dfc00417 	ldw	ra,16(sp)
 40298d8:	dcc00317 	ldw	r19,12(sp)
 40298dc:	dc800217 	ldw	r18,8(sp)
 40298e0:	dc400117 	ldw	r17,4(sp)
 40298e4:	dc000017 	ldw	r16,0(sp)
 40298e8:	dec00504 	addi	sp,sp,20
 40298ec:	f800283a 	ret
 40298f0:	81401917 	ldw	r5,100(r16)
 40298f4:	00b7ffc4 	movi	r2,-8193
 40298f8:	21080014 	ori	r4,r4,8192
 40298fc:	2884703a 	and	r2,r5,r2
 4029900:	80801915 	stw	r2,100(r16)
 4029904:	80800017 	ldw	r2,0(r16)
 4029908:	8100030d 	sth	r4,12(r16)
 402990c:	81000517 	ldw	r4,20(r16)
 4029910:	10c7c83a 	sub	r3,r2,r3
 4029914:	193fe016 	blt	r3,r4,4029898 <__alt_data_end+0xfffe9898>
 4029918:	800b883a 	mov	r5,r16
 402991c:	9009883a 	mov	r4,r18
 4029920:	4024a480 	call	4024a48 <_fflush_r>
 4029924:	1000071e 	bne	r2,zero,4029944 <__swbuf_r+0x114>
 4029928:	80800017 	ldw	r2,0(r16)
 402992c:	00c00044 	movi	r3,1
 4029930:	003fda06 	br	402989c <__alt_data_end+0xfffe989c>
 4029934:	800b883a 	mov	r5,r16
 4029938:	9009883a 	mov	r4,r18
 402993c:	4024a480 	call	4024a48 <_fflush_r>
 4029940:	103fe326 	beq	r2,zero,40298d0 <__alt_data_end+0xfffe98d0>
 4029944:	00bfffc4 	movi	r2,-1
 4029948:	003fe206 	br	40298d4 <__alt_data_end+0xfffe98d4>
 402994c:	800b883a 	mov	r5,r16
 4029950:	9009883a 	mov	r4,r18
 4029954:	4022e500 	call	4022e50 <__swsetup_r>
 4029958:	103ffa1e 	bne	r2,zero,4029944 <__alt_data_end+0xfffe9944>
 402995c:	8100030b 	ldhu	r4,12(r16)
 4029960:	80c00417 	ldw	r3,16(r16)
 4029964:	003fc506 	br	402987c <__alt_data_end+0xfffe987c>
 4029968:	4024e240 	call	4024e24 <__sinit>
 402996c:	003fbc06 	br	4029860 <__alt_data_end+0xfffe9860>

04029970 <__swbuf>:
 4029970:	008100f4 	movhi	r2,1027
 4029974:	108c7404 	addi	r2,r2,12752
 4029978:	280d883a 	mov	r6,r5
 402997c:	200b883a 	mov	r5,r4
 4029980:	11000017 	ldw	r4,0(r2)
 4029984:	40298301 	jmpi	4029830 <__swbuf_r>

04029988 <_write_r>:
 4029988:	defffd04 	addi	sp,sp,-12
 402998c:	2805883a 	mov	r2,r5
 4029990:	dc000015 	stw	r16,0(sp)
 4029994:	040100f4 	movhi	r16,1027
 4029998:	dc400115 	stw	r17,4(sp)
 402999c:	300b883a 	mov	r5,r6
 40299a0:	84137904 	addi	r16,r16,19940
 40299a4:	2023883a 	mov	r17,r4
 40299a8:	380d883a 	mov	r6,r7
 40299ac:	1009883a 	mov	r4,r2
 40299b0:	dfc00215 	stw	ra,8(sp)
 40299b4:	80000015 	stw	zero,0(r16)
 40299b8:	402df940 	call	402df94 <write>
 40299bc:	00ffffc4 	movi	r3,-1
 40299c0:	10c00526 	beq	r2,r3,40299d8 <_write_r+0x50>
 40299c4:	dfc00217 	ldw	ra,8(sp)
 40299c8:	dc400117 	ldw	r17,4(sp)
 40299cc:	dc000017 	ldw	r16,0(sp)
 40299d0:	dec00304 	addi	sp,sp,12
 40299d4:	f800283a 	ret
 40299d8:	80c00017 	ldw	r3,0(r16)
 40299dc:	183ff926 	beq	r3,zero,40299c4 <__alt_data_end+0xfffe99c4>
 40299e0:	88c00015 	stw	r3,0(r17)
 40299e4:	003ff706 	br	40299c4 <__alt_data_end+0xfffe99c4>

040299e8 <_close_r>:
 40299e8:	defffd04 	addi	sp,sp,-12
 40299ec:	dc000015 	stw	r16,0(sp)
 40299f0:	040100f4 	movhi	r16,1027
 40299f4:	dc400115 	stw	r17,4(sp)
 40299f8:	84137904 	addi	r16,r16,19940
 40299fc:	2023883a 	mov	r17,r4
 4029a00:	2809883a 	mov	r4,r5
 4029a04:	dfc00215 	stw	ra,8(sp)
 4029a08:	80000015 	stw	zero,0(r16)
 4029a0c:	402d46c0 	call	402d46c <close>
 4029a10:	00ffffc4 	movi	r3,-1
 4029a14:	10c00526 	beq	r2,r3,4029a2c <_close_r+0x44>
 4029a18:	dfc00217 	ldw	ra,8(sp)
 4029a1c:	dc400117 	ldw	r17,4(sp)
 4029a20:	dc000017 	ldw	r16,0(sp)
 4029a24:	dec00304 	addi	sp,sp,12
 4029a28:	f800283a 	ret
 4029a2c:	80c00017 	ldw	r3,0(r16)
 4029a30:	183ff926 	beq	r3,zero,4029a18 <__alt_data_end+0xfffe9a18>
 4029a34:	88c00015 	stw	r3,0(r17)
 4029a38:	003ff706 	br	4029a18 <__alt_data_end+0xfffe9a18>

04029a3c <_calloc_r>:
 4029a3c:	298b383a 	mul	r5,r5,r6
 4029a40:	defffe04 	addi	sp,sp,-8
 4029a44:	dfc00115 	stw	ra,4(sp)
 4029a48:	dc000015 	stw	r16,0(sp)
 4029a4c:	4025b840 	call	4025b84 <_malloc_r>
 4029a50:	10002926 	beq	r2,zero,4029af8 <_calloc_r+0xbc>
 4029a54:	11bfff17 	ldw	r6,-4(r2)
 4029a58:	1021883a 	mov	r16,r2
 4029a5c:	00bfff04 	movi	r2,-4
 4029a60:	308c703a 	and	r6,r6,r2
 4029a64:	00c00904 	movi	r3,36
 4029a68:	308d883a 	add	r6,r6,r2
 4029a6c:	19801636 	bltu	r3,r6,4029ac8 <_calloc_r+0x8c>
 4029a70:	008004c4 	movi	r2,19
 4029a74:	11800b2e 	bgeu	r2,r6,4029aa4 <_calloc_r+0x68>
 4029a78:	80000015 	stw	zero,0(r16)
 4029a7c:	80000115 	stw	zero,4(r16)
 4029a80:	008006c4 	movi	r2,27
 4029a84:	11801a2e 	bgeu	r2,r6,4029af0 <_calloc_r+0xb4>
 4029a88:	80000215 	stw	zero,8(r16)
 4029a8c:	80000315 	stw	zero,12(r16)
 4029a90:	30c0151e 	bne	r6,r3,4029ae8 <_calloc_r+0xac>
 4029a94:	80000415 	stw	zero,16(r16)
 4029a98:	80800604 	addi	r2,r16,24
 4029a9c:	80000515 	stw	zero,20(r16)
 4029aa0:	00000106 	br	4029aa8 <_calloc_r+0x6c>
 4029aa4:	8005883a 	mov	r2,r16
 4029aa8:	10000015 	stw	zero,0(r2)
 4029aac:	10000115 	stw	zero,4(r2)
 4029ab0:	10000215 	stw	zero,8(r2)
 4029ab4:	8005883a 	mov	r2,r16
 4029ab8:	dfc00117 	ldw	ra,4(sp)
 4029abc:	dc000017 	ldw	r16,0(sp)
 4029ac0:	dec00204 	addi	sp,sp,8
 4029ac4:	f800283a 	ret
 4029ac8:	000b883a 	mov	r5,zero
 4029acc:	8009883a 	mov	r4,r16
 4029ad0:	40267180 	call	4026718 <memset>
 4029ad4:	8005883a 	mov	r2,r16
 4029ad8:	dfc00117 	ldw	ra,4(sp)
 4029adc:	dc000017 	ldw	r16,0(sp)
 4029ae0:	dec00204 	addi	sp,sp,8
 4029ae4:	f800283a 	ret
 4029ae8:	80800404 	addi	r2,r16,16
 4029aec:	003fee06 	br	4029aa8 <__alt_data_end+0xfffe9aa8>
 4029af0:	80800204 	addi	r2,r16,8
 4029af4:	003fec06 	br	4029aa8 <__alt_data_end+0xfffe9aa8>
 4029af8:	0005883a 	mov	r2,zero
 4029afc:	003fee06 	br	4029ab8 <__alt_data_end+0xfffe9ab8>

04029b00 <_fclose_r>:
 4029b00:	28003926 	beq	r5,zero,4029be8 <_fclose_r+0xe8>
 4029b04:	defffc04 	addi	sp,sp,-16
 4029b08:	dc400115 	stw	r17,4(sp)
 4029b0c:	dc000015 	stw	r16,0(sp)
 4029b10:	dfc00315 	stw	ra,12(sp)
 4029b14:	dc800215 	stw	r18,8(sp)
 4029b18:	2023883a 	mov	r17,r4
 4029b1c:	2821883a 	mov	r16,r5
 4029b20:	20000226 	beq	r4,zero,4029b2c <_fclose_r+0x2c>
 4029b24:	20800e17 	ldw	r2,56(r4)
 4029b28:	10002726 	beq	r2,zero,4029bc8 <_fclose_r+0xc8>
 4029b2c:	8080030f 	ldh	r2,12(r16)
 4029b30:	1000071e 	bne	r2,zero,4029b50 <_fclose_r+0x50>
 4029b34:	0005883a 	mov	r2,zero
 4029b38:	dfc00317 	ldw	ra,12(sp)
 4029b3c:	dc800217 	ldw	r18,8(sp)
 4029b40:	dc400117 	ldw	r17,4(sp)
 4029b44:	dc000017 	ldw	r16,0(sp)
 4029b48:	dec00404 	addi	sp,sp,16
 4029b4c:	f800283a 	ret
 4029b50:	800b883a 	mov	r5,r16
 4029b54:	8809883a 	mov	r4,r17
 4029b58:	402482c0 	call	402482c <__sflush_r>
 4029b5c:	1025883a 	mov	r18,r2
 4029b60:	80800b17 	ldw	r2,44(r16)
 4029b64:	10000426 	beq	r2,zero,4029b78 <_fclose_r+0x78>
 4029b68:	81400717 	ldw	r5,28(r16)
 4029b6c:	8809883a 	mov	r4,r17
 4029b70:	103ee83a 	callr	r2
 4029b74:	10001616 	blt	r2,zero,4029bd0 <_fclose_r+0xd0>
 4029b78:	8080030b 	ldhu	r2,12(r16)
 4029b7c:	1080200c 	andi	r2,r2,128
 4029b80:	1000151e 	bne	r2,zero,4029bd8 <_fclose_r+0xd8>
 4029b84:	81400c17 	ldw	r5,48(r16)
 4029b88:	28000526 	beq	r5,zero,4029ba0 <_fclose_r+0xa0>
 4029b8c:	80801004 	addi	r2,r16,64
 4029b90:	28800226 	beq	r5,r2,4029b9c <_fclose_r+0x9c>
 4029b94:	8809883a 	mov	r4,r17
 4029b98:	4024f980 	call	4024f98 <_free_r>
 4029b9c:	80000c15 	stw	zero,48(r16)
 4029ba0:	81401117 	ldw	r5,68(r16)
 4029ba4:	28000326 	beq	r5,zero,4029bb4 <_fclose_r+0xb4>
 4029ba8:	8809883a 	mov	r4,r17
 4029bac:	4024f980 	call	4024f98 <_free_r>
 4029bb0:	80001115 	stw	zero,68(r16)
 4029bb4:	4024e340 	call	4024e34 <__sfp_lock_acquire>
 4029bb8:	8000030d 	sth	zero,12(r16)
 4029bbc:	4024e380 	call	4024e38 <__sfp_lock_release>
 4029bc0:	9005883a 	mov	r2,r18
 4029bc4:	003fdc06 	br	4029b38 <__alt_data_end+0xfffe9b38>
 4029bc8:	4024e240 	call	4024e24 <__sinit>
 4029bcc:	003fd706 	br	4029b2c <__alt_data_end+0xfffe9b2c>
 4029bd0:	04bfffc4 	movi	r18,-1
 4029bd4:	003fe806 	br	4029b78 <__alt_data_end+0xfffe9b78>
 4029bd8:	81400417 	ldw	r5,16(r16)
 4029bdc:	8809883a 	mov	r4,r17
 4029be0:	4024f980 	call	4024f98 <_free_r>
 4029be4:	003fe706 	br	4029b84 <__alt_data_end+0xfffe9b84>
 4029be8:	0005883a 	mov	r2,zero
 4029bec:	f800283a 	ret

04029bf0 <fclose>:
 4029bf0:	008100f4 	movhi	r2,1027
 4029bf4:	108c7404 	addi	r2,r2,12752
 4029bf8:	200b883a 	mov	r5,r4
 4029bfc:	11000017 	ldw	r4,0(r2)
 4029c00:	4029b001 	jmpi	4029b00 <_fclose_r>

04029c04 <__fputwc>:
 4029c04:	defff804 	addi	sp,sp,-32
 4029c08:	dcc00415 	stw	r19,16(sp)
 4029c0c:	dc800315 	stw	r18,12(sp)
 4029c10:	dc000115 	stw	r16,4(sp)
 4029c14:	dfc00715 	stw	ra,28(sp)
 4029c18:	dd400615 	stw	r21,24(sp)
 4029c1c:	dd000515 	stw	r20,20(sp)
 4029c20:	dc400215 	stw	r17,8(sp)
 4029c24:	2027883a 	mov	r19,r4
 4029c28:	2825883a 	mov	r18,r5
 4029c2c:	3021883a 	mov	r16,r6
 4029c30:	40259740 	call	4025974 <__locale_mb_cur_max>
 4029c34:	00c00044 	movi	r3,1
 4029c38:	10c03e26 	beq	r2,r3,4029d34 <__fputwc+0x130>
 4029c3c:	81c01704 	addi	r7,r16,92
 4029c40:	900d883a 	mov	r6,r18
 4029c44:	d80b883a 	mov	r5,sp
 4029c48:	9809883a 	mov	r4,r19
 4029c4c:	4029f7c0 	call	4029f7c <_wcrtomb_r>
 4029c50:	1029883a 	mov	r20,r2
 4029c54:	00bfffc4 	movi	r2,-1
 4029c58:	a0802026 	beq	r20,r2,4029cdc <__fputwc+0xd8>
 4029c5c:	d9400003 	ldbu	r5,0(sp)
 4029c60:	a0001c26 	beq	r20,zero,4029cd4 <__fputwc+0xd0>
 4029c64:	0023883a 	mov	r17,zero
 4029c68:	05400284 	movi	r21,10
 4029c6c:	00000906 	br	4029c94 <__fputwc+0x90>
 4029c70:	80800017 	ldw	r2,0(r16)
 4029c74:	11400005 	stb	r5,0(r2)
 4029c78:	80c00017 	ldw	r3,0(r16)
 4029c7c:	18c00044 	addi	r3,r3,1
 4029c80:	80c00015 	stw	r3,0(r16)
 4029c84:	8c400044 	addi	r17,r17,1
 4029c88:	dc45883a 	add	r2,sp,r17
 4029c8c:	8d00112e 	bgeu	r17,r20,4029cd4 <__fputwc+0xd0>
 4029c90:	11400003 	ldbu	r5,0(r2)
 4029c94:	80c00217 	ldw	r3,8(r16)
 4029c98:	18ffffc4 	addi	r3,r3,-1
 4029c9c:	80c00215 	stw	r3,8(r16)
 4029ca0:	183ff30e 	bge	r3,zero,4029c70 <__alt_data_end+0xfffe9c70>
 4029ca4:	80800617 	ldw	r2,24(r16)
 4029ca8:	18801916 	blt	r3,r2,4029d10 <__fputwc+0x10c>
 4029cac:	80800017 	ldw	r2,0(r16)
 4029cb0:	11400005 	stb	r5,0(r2)
 4029cb4:	80800017 	ldw	r2,0(r16)
 4029cb8:	10c00003 	ldbu	r3,0(r2)
 4029cbc:	10800044 	addi	r2,r2,1
 4029cc0:	1d402326 	beq	r3,r21,4029d50 <__fputwc+0x14c>
 4029cc4:	80800015 	stw	r2,0(r16)
 4029cc8:	8c400044 	addi	r17,r17,1
 4029ccc:	dc45883a 	add	r2,sp,r17
 4029cd0:	8d3fef36 	bltu	r17,r20,4029c90 <__alt_data_end+0xfffe9c90>
 4029cd4:	9005883a 	mov	r2,r18
 4029cd8:	00000406 	br	4029cec <__fputwc+0xe8>
 4029cdc:	80c0030b 	ldhu	r3,12(r16)
 4029ce0:	a005883a 	mov	r2,r20
 4029ce4:	18c01014 	ori	r3,r3,64
 4029ce8:	80c0030d 	sth	r3,12(r16)
 4029cec:	dfc00717 	ldw	ra,28(sp)
 4029cf0:	dd400617 	ldw	r21,24(sp)
 4029cf4:	dd000517 	ldw	r20,20(sp)
 4029cf8:	dcc00417 	ldw	r19,16(sp)
 4029cfc:	dc800317 	ldw	r18,12(sp)
 4029d00:	dc400217 	ldw	r17,8(sp)
 4029d04:	dc000117 	ldw	r16,4(sp)
 4029d08:	dec00804 	addi	sp,sp,32
 4029d0c:	f800283a 	ret
 4029d10:	800d883a 	mov	r6,r16
 4029d14:	29403fcc 	andi	r5,r5,255
 4029d18:	9809883a 	mov	r4,r19
 4029d1c:	40298300 	call	4029830 <__swbuf_r>
 4029d20:	10bfffe0 	cmpeqi	r2,r2,-1
 4029d24:	10803fcc 	andi	r2,r2,255
 4029d28:	103fd626 	beq	r2,zero,4029c84 <__alt_data_end+0xfffe9c84>
 4029d2c:	00bfffc4 	movi	r2,-1
 4029d30:	003fee06 	br	4029cec <__alt_data_end+0xfffe9cec>
 4029d34:	90ffffc4 	addi	r3,r18,-1
 4029d38:	01003f84 	movi	r4,254
 4029d3c:	20ffbf36 	bltu	r4,r3,4029c3c <__alt_data_end+0xfffe9c3c>
 4029d40:	900b883a 	mov	r5,r18
 4029d44:	dc800005 	stb	r18,0(sp)
 4029d48:	1029883a 	mov	r20,r2
 4029d4c:	003fc506 	br	4029c64 <__alt_data_end+0xfffe9c64>
 4029d50:	800d883a 	mov	r6,r16
 4029d54:	a80b883a 	mov	r5,r21
 4029d58:	9809883a 	mov	r4,r19
 4029d5c:	40298300 	call	4029830 <__swbuf_r>
 4029d60:	10bfffe0 	cmpeqi	r2,r2,-1
 4029d64:	003fef06 	br	4029d24 <__alt_data_end+0xfffe9d24>

04029d68 <_fputwc_r>:
 4029d68:	3080030b 	ldhu	r2,12(r6)
 4029d6c:	10c8000c 	andi	r3,r2,8192
 4029d70:	1800051e 	bne	r3,zero,4029d88 <_fputwc_r+0x20>
 4029d74:	30c01917 	ldw	r3,100(r6)
 4029d78:	10880014 	ori	r2,r2,8192
 4029d7c:	3080030d 	sth	r2,12(r6)
 4029d80:	18880014 	ori	r2,r3,8192
 4029d84:	30801915 	stw	r2,100(r6)
 4029d88:	4029c041 	jmpi	4029c04 <__fputwc>

04029d8c <fputwc>:
 4029d8c:	008100f4 	movhi	r2,1027
 4029d90:	defffc04 	addi	sp,sp,-16
 4029d94:	108c7404 	addi	r2,r2,12752
 4029d98:	dc000115 	stw	r16,4(sp)
 4029d9c:	14000017 	ldw	r16,0(r2)
 4029da0:	dc400215 	stw	r17,8(sp)
 4029da4:	dfc00315 	stw	ra,12(sp)
 4029da8:	2023883a 	mov	r17,r4
 4029dac:	80000226 	beq	r16,zero,4029db8 <fputwc+0x2c>
 4029db0:	80800e17 	ldw	r2,56(r16)
 4029db4:	10001026 	beq	r2,zero,4029df8 <fputwc+0x6c>
 4029db8:	2880030b 	ldhu	r2,12(r5)
 4029dbc:	10c8000c 	andi	r3,r2,8192
 4029dc0:	1800051e 	bne	r3,zero,4029dd8 <fputwc+0x4c>
 4029dc4:	28c01917 	ldw	r3,100(r5)
 4029dc8:	10880014 	ori	r2,r2,8192
 4029dcc:	2880030d 	sth	r2,12(r5)
 4029dd0:	18880014 	ori	r2,r3,8192
 4029dd4:	28801915 	stw	r2,100(r5)
 4029dd8:	280d883a 	mov	r6,r5
 4029ddc:	8009883a 	mov	r4,r16
 4029de0:	880b883a 	mov	r5,r17
 4029de4:	dfc00317 	ldw	ra,12(sp)
 4029de8:	dc400217 	ldw	r17,8(sp)
 4029dec:	dc000117 	ldw	r16,4(sp)
 4029df0:	dec00404 	addi	sp,sp,16
 4029df4:	4029c041 	jmpi	4029c04 <__fputwc>
 4029df8:	8009883a 	mov	r4,r16
 4029dfc:	d9400015 	stw	r5,0(sp)
 4029e00:	4024e240 	call	4024e24 <__sinit>
 4029e04:	d9400017 	ldw	r5,0(sp)
 4029e08:	003feb06 	br	4029db8 <__alt_data_end+0xfffe9db8>

04029e0c <_fstat_r>:
 4029e0c:	defffd04 	addi	sp,sp,-12
 4029e10:	2805883a 	mov	r2,r5
 4029e14:	dc000015 	stw	r16,0(sp)
 4029e18:	040100f4 	movhi	r16,1027
 4029e1c:	dc400115 	stw	r17,4(sp)
 4029e20:	84137904 	addi	r16,r16,19940
 4029e24:	2023883a 	mov	r17,r4
 4029e28:	300b883a 	mov	r5,r6
 4029e2c:	1009883a 	mov	r4,r2
 4029e30:	dfc00215 	stw	ra,8(sp)
 4029e34:	80000015 	stw	zero,0(r16)
 4029e38:	402d5ec0 	call	402d5ec <fstat>
 4029e3c:	00ffffc4 	movi	r3,-1
 4029e40:	10c00526 	beq	r2,r3,4029e58 <_fstat_r+0x4c>
 4029e44:	dfc00217 	ldw	ra,8(sp)
 4029e48:	dc400117 	ldw	r17,4(sp)
 4029e4c:	dc000017 	ldw	r16,0(sp)
 4029e50:	dec00304 	addi	sp,sp,12
 4029e54:	f800283a 	ret
 4029e58:	80c00017 	ldw	r3,0(r16)
 4029e5c:	183ff926 	beq	r3,zero,4029e44 <__alt_data_end+0xfffe9e44>
 4029e60:	88c00015 	stw	r3,0(r17)
 4029e64:	003ff706 	br	4029e44 <__alt_data_end+0xfffe9e44>

04029e68 <_isatty_r>:
 4029e68:	defffd04 	addi	sp,sp,-12
 4029e6c:	dc000015 	stw	r16,0(sp)
 4029e70:	040100f4 	movhi	r16,1027
 4029e74:	dc400115 	stw	r17,4(sp)
 4029e78:	84137904 	addi	r16,r16,19940
 4029e7c:	2023883a 	mov	r17,r4
 4029e80:	2809883a 	mov	r4,r5
 4029e84:	dfc00215 	stw	ra,8(sp)
 4029e88:	80000015 	stw	zero,0(r16)
 4029e8c:	402d9780 	call	402d978 <isatty>
 4029e90:	00ffffc4 	movi	r3,-1
 4029e94:	10c00526 	beq	r2,r3,4029eac <_isatty_r+0x44>
 4029e98:	dfc00217 	ldw	ra,8(sp)
 4029e9c:	dc400117 	ldw	r17,4(sp)
 4029ea0:	dc000017 	ldw	r16,0(sp)
 4029ea4:	dec00304 	addi	sp,sp,12
 4029ea8:	f800283a 	ret
 4029eac:	80c00017 	ldw	r3,0(r16)
 4029eb0:	183ff926 	beq	r3,zero,4029e98 <__alt_data_end+0xfffe9e98>
 4029eb4:	88c00015 	stw	r3,0(r17)
 4029eb8:	003ff706 	br	4029e98 <__alt_data_end+0xfffe9e98>

04029ebc <_lseek_r>:
 4029ebc:	defffd04 	addi	sp,sp,-12
 4029ec0:	2805883a 	mov	r2,r5
 4029ec4:	dc000015 	stw	r16,0(sp)
 4029ec8:	040100f4 	movhi	r16,1027
 4029ecc:	dc400115 	stw	r17,4(sp)
 4029ed0:	300b883a 	mov	r5,r6
 4029ed4:	84137904 	addi	r16,r16,19940
 4029ed8:	2023883a 	mov	r17,r4
 4029edc:	380d883a 	mov	r6,r7
 4029ee0:	1009883a 	mov	r4,r2
 4029ee4:	dfc00215 	stw	ra,8(sp)
 4029ee8:	80000015 	stw	zero,0(r16)
 4029eec:	402db440 	call	402db44 <lseek>
 4029ef0:	00ffffc4 	movi	r3,-1
 4029ef4:	10c00526 	beq	r2,r3,4029f0c <_lseek_r+0x50>
 4029ef8:	dfc00217 	ldw	ra,8(sp)
 4029efc:	dc400117 	ldw	r17,4(sp)
 4029f00:	dc000017 	ldw	r16,0(sp)
 4029f04:	dec00304 	addi	sp,sp,12
 4029f08:	f800283a 	ret
 4029f0c:	80c00017 	ldw	r3,0(r16)
 4029f10:	183ff926 	beq	r3,zero,4029ef8 <__alt_data_end+0xfffe9ef8>
 4029f14:	88c00015 	stw	r3,0(r17)
 4029f18:	003ff706 	br	4029ef8 <__alt_data_end+0xfffe9ef8>

04029f1c <_read_r>:
 4029f1c:	defffd04 	addi	sp,sp,-12
 4029f20:	2805883a 	mov	r2,r5
 4029f24:	dc000015 	stw	r16,0(sp)
 4029f28:	040100f4 	movhi	r16,1027
 4029f2c:	dc400115 	stw	r17,4(sp)
 4029f30:	300b883a 	mov	r5,r6
 4029f34:	84137904 	addi	r16,r16,19940
 4029f38:	2023883a 	mov	r17,r4
 4029f3c:	380d883a 	mov	r6,r7
 4029f40:	1009883a 	mov	r4,r2
 4029f44:	dfc00215 	stw	ra,8(sp)
 4029f48:	80000015 	stw	zero,0(r16)
 4029f4c:	402dd180 	call	402dd18 <read>
 4029f50:	00ffffc4 	movi	r3,-1
 4029f54:	10c00526 	beq	r2,r3,4029f6c <_read_r+0x50>
 4029f58:	dfc00217 	ldw	ra,8(sp)
 4029f5c:	dc400117 	ldw	r17,4(sp)
 4029f60:	dc000017 	ldw	r16,0(sp)
 4029f64:	dec00304 	addi	sp,sp,12
 4029f68:	f800283a 	ret
 4029f6c:	80c00017 	ldw	r3,0(r16)
 4029f70:	183ff926 	beq	r3,zero,4029f58 <__alt_data_end+0xfffe9f58>
 4029f74:	88c00015 	stw	r3,0(r17)
 4029f78:	003ff706 	br	4029f58 <__alt_data_end+0xfffe9f58>

04029f7c <_wcrtomb_r>:
 4029f7c:	defff604 	addi	sp,sp,-40
 4029f80:	008100f4 	movhi	r2,1027
 4029f84:	dc800815 	stw	r18,32(sp)
 4029f88:	dc400715 	stw	r17,28(sp)
 4029f8c:	dc000615 	stw	r16,24(sp)
 4029f90:	108c7804 	addi	r2,r2,12768
 4029f94:	dfc00915 	stw	ra,36(sp)
 4029f98:	2021883a 	mov	r16,r4
 4029f9c:	3823883a 	mov	r17,r7
 4029fa0:	14800017 	ldw	r18,0(r2)
 4029fa4:	28001426 	beq	r5,zero,4029ff8 <_wcrtomb_r+0x7c>
 4029fa8:	d9400415 	stw	r5,16(sp)
 4029fac:	d9800515 	stw	r6,20(sp)
 4029fb0:	40259680 	call	4025968 <__locale_charset>
 4029fb4:	d9800517 	ldw	r6,20(sp)
 4029fb8:	d9400417 	ldw	r5,16(sp)
 4029fbc:	100f883a 	mov	r7,r2
 4029fc0:	dc400015 	stw	r17,0(sp)
 4029fc4:	8009883a 	mov	r4,r16
 4029fc8:	903ee83a 	callr	r18
 4029fcc:	00ffffc4 	movi	r3,-1
 4029fd0:	10c0031e 	bne	r2,r3,4029fe0 <_wcrtomb_r+0x64>
 4029fd4:	88000015 	stw	zero,0(r17)
 4029fd8:	00c02284 	movi	r3,138
 4029fdc:	80c00015 	stw	r3,0(r16)
 4029fe0:	dfc00917 	ldw	ra,36(sp)
 4029fe4:	dc800817 	ldw	r18,32(sp)
 4029fe8:	dc400717 	ldw	r17,28(sp)
 4029fec:	dc000617 	ldw	r16,24(sp)
 4029ff0:	dec00a04 	addi	sp,sp,40
 4029ff4:	f800283a 	ret
 4029ff8:	40259680 	call	4025968 <__locale_charset>
 4029ffc:	100f883a 	mov	r7,r2
 402a000:	dc400015 	stw	r17,0(sp)
 402a004:	000d883a 	mov	r6,zero
 402a008:	d9400104 	addi	r5,sp,4
 402a00c:	8009883a 	mov	r4,r16
 402a010:	903ee83a 	callr	r18
 402a014:	003fed06 	br	4029fcc <__alt_data_end+0xfffe9fcc>

0402a018 <wcrtomb>:
 402a018:	defff604 	addi	sp,sp,-40
 402a01c:	008100f4 	movhi	r2,1027
 402a020:	dc800615 	stw	r18,24(sp)
 402a024:	dc400515 	stw	r17,20(sp)
 402a028:	108c7404 	addi	r2,r2,12752
 402a02c:	dfc00915 	stw	ra,36(sp)
 402a030:	dd000815 	stw	r20,32(sp)
 402a034:	dcc00715 	stw	r19,28(sp)
 402a038:	dc000415 	stw	r16,16(sp)
 402a03c:	3025883a 	mov	r18,r6
 402a040:	14400017 	ldw	r17,0(r2)
 402a044:	20001926 	beq	r4,zero,402a0ac <wcrtomb+0x94>
 402a048:	008100f4 	movhi	r2,1027
 402a04c:	108c7804 	addi	r2,r2,12768
 402a050:	15000017 	ldw	r20,0(r2)
 402a054:	2021883a 	mov	r16,r4
 402a058:	2827883a 	mov	r19,r5
 402a05c:	40259680 	call	4025968 <__locale_charset>
 402a060:	100f883a 	mov	r7,r2
 402a064:	dc800015 	stw	r18,0(sp)
 402a068:	980d883a 	mov	r6,r19
 402a06c:	800b883a 	mov	r5,r16
 402a070:	8809883a 	mov	r4,r17
 402a074:	a03ee83a 	callr	r20
 402a078:	00ffffc4 	movi	r3,-1
 402a07c:	10c0031e 	bne	r2,r3,402a08c <wcrtomb+0x74>
 402a080:	90000015 	stw	zero,0(r18)
 402a084:	00c02284 	movi	r3,138
 402a088:	88c00015 	stw	r3,0(r17)
 402a08c:	dfc00917 	ldw	ra,36(sp)
 402a090:	dd000817 	ldw	r20,32(sp)
 402a094:	dcc00717 	ldw	r19,28(sp)
 402a098:	dc800617 	ldw	r18,24(sp)
 402a09c:	dc400517 	ldw	r17,20(sp)
 402a0a0:	dc000417 	ldw	r16,16(sp)
 402a0a4:	dec00a04 	addi	sp,sp,40
 402a0a8:	f800283a 	ret
 402a0ac:	008100f4 	movhi	r2,1027
 402a0b0:	108c7804 	addi	r2,r2,12768
 402a0b4:	14000017 	ldw	r16,0(r2)
 402a0b8:	40259680 	call	4025968 <__locale_charset>
 402a0bc:	100f883a 	mov	r7,r2
 402a0c0:	dc800015 	stw	r18,0(sp)
 402a0c4:	000d883a 	mov	r6,zero
 402a0c8:	d9400104 	addi	r5,sp,4
 402a0cc:	8809883a 	mov	r4,r17
 402a0d0:	803ee83a 	callr	r16
 402a0d4:	003fe806 	br	402a078 <__alt_data_end+0xfffea078>

0402a0d8 <__ascii_wctomb>:
 402a0d8:	28000526 	beq	r5,zero,402a0f0 <__ascii_wctomb+0x18>
 402a0dc:	00803fc4 	movi	r2,255
 402a0e0:	11800536 	bltu	r2,r6,402a0f8 <__ascii_wctomb+0x20>
 402a0e4:	29800005 	stb	r6,0(r5)
 402a0e8:	00800044 	movi	r2,1
 402a0ec:	f800283a 	ret
 402a0f0:	0005883a 	mov	r2,zero
 402a0f4:	f800283a 	ret
 402a0f8:	00802284 	movi	r2,138
 402a0fc:	20800015 	stw	r2,0(r4)
 402a100:	00bfffc4 	movi	r2,-1
 402a104:	f800283a 	ret

0402a108 <_wctomb_r>:
 402a108:	008100f4 	movhi	r2,1027
 402a10c:	defff904 	addi	sp,sp,-28
 402a110:	108c7804 	addi	r2,r2,12768
 402a114:	dfc00615 	stw	ra,24(sp)
 402a118:	dc400515 	stw	r17,20(sp)
 402a11c:	dc000415 	stw	r16,16(sp)
 402a120:	3823883a 	mov	r17,r7
 402a124:	14000017 	ldw	r16,0(r2)
 402a128:	d9000115 	stw	r4,4(sp)
 402a12c:	d9400215 	stw	r5,8(sp)
 402a130:	d9800315 	stw	r6,12(sp)
 402a134:	40259680 	call	4025968 <__locale_charset>
 402a138:	d9800317 	ldw	r6,12(sp)
 402a13c:	d9400217 	ldw	r5,8(sp)
 402a140:	d9000117 	ldw	r4,4(sp)
 402a144:	100f883a 	mov	r7,r2
 402a148:	dc400015 	stw	r17,0(sp)
 402a14c:	803ee83a 	callr	r16
 402a150:	dfc00617 	ldw	ra,24(sp)
 402a154:	dc400517 	ldw	r17,20(sp)
 402a158:	dc000417 	ldw	r16,16(sp)
 402a15c:	dec00704 	addi	sp,sp,28
 402a160:	f800283a 	ret

0402a164 <__udivdi3>:
 402a164:	defff504 	addi	sp,sp,-44
 402a168:	dcc00415 	stw	r19,16(sp)
 402a16c:	dc000115 	stw	r16,4(sp)
 402a170:	dfc00a15 	stw	ra,40(sp)
 402a174:	df000915 	stw	fp,36(sp)
 402a178:	ddc00815 	stw	r23,32(sp)
 402a17c:	dd800715 	stw	r22,28(sp)
 402a180:	dd400615 	stw	r21,24(sp)
 402a184:	dd000515 	stw	r20,20(sp)
 402a188:	dc800315 	stw	r18,12(sp)
 402a18c:	dc400215 	stw	r17,8(sp)
 402a190:	2027883a 	mov	r19,r4
 402a194:	2821883a 	mov	r16,r5
 402a198:	3800411e 	bne	r7,zero,402a2a0 <__udivdi3+0x13c>
 402a19c:	3023883a 	mov	r17,r6
 402a1a0:	2025883a 	mov	r18,r4
 402a1a4:	2980522e 	bgeu	r5,r6,402a2f0 <__udivdi3+0x18c>
 402a1a8:	00bfffd4 	movui	r2,65535
 402a1ac:	282d883a 	mov	r22,r5
 402a1b0:	1180a836 	bltu	r2,r6,402a454 <__udivdi3+0x2f0>
 402a1b4:	00803fc4 	movi	r2,255
 402a1b8:	1185803a 	cmpltu	r2,r2,r6
 402a1bc:	100490fa 	slli	r2,r2,3
 402a1c0:	3086d83a 	srl	r3,r6,r2
 402a1c4:	010100f4 	movhi	r4,1027
 402a1c8:	2104f904 	addi	r4,r4,5092
 402a1cc:	20c7883a 	add	r3,r4,r3
 402a1d0:	18c00003 	ldbu	r3,0(r3)
 402a1d4:	1885883a 	add	r2,r3,r2
 402a1d8:	00c00804 	movi	r3,32
 402a1dc:	1887c83a 	sub	r3,r3,r2
 402a1e0:	18000526 	beq	r3,zero,402a1f8 <__udivdi3+0x94>
 402a1e4:	80e0983a 	sll	r16,r16,r3
 402a1e8:	9884d83a 	srl	r2,r19,r2
 402a1ec:	30e2983a 	sll	r17,r6,r3
 402a1f0:	98e4983a 	sll	r18,r19,r3
 402a1f4:	142cb03a 	or	r22,r2,r16
 402a1f8:	882ad43a 	srli	r21,r17,16
 402a1fc:	b009883a 	mov	r4,r22
 402a200:	8d3fffcc 	andi	r20,r17,65535
 402a204:	a80b883a 	mov	r5,r21
 402a208:	402ad700 	call	402ad70 <__umodsi3>
 402a20c:	b009883a 	mov	r4,r22
 402a210:	a80b883a 	mov	r5,r21
 402a214:	1027883a 	mov	r19,r2
 402a218:	402ad0c0 	call	402ad0c <__udivsi3>
 402a21c:	102d883a 	mov	r22,r2
 402a220:	9826943a 	slli	r19,r19,16
 402a224:	9004d43a 	srli	r2,r18,16
 402a228:	a5a1383a 	mul	r16,r20,r22
 402a22c:	14c4b03a 	or	r2,r2,r19
 402a230:	1400052e 	bgeu	r2,r16,402a248 <__udivdi3+0xe4>
 402a234:	1445883a 	add	r2,r2,r17
 402a238:	b0ffffc4 	addi	r3,r22,-1
 402a23c:	14400136 	bltu	r2,r17,402a244 <__udivdi3+0xe0>
 402a240:	14012336 	bltu	r2,r16,402a6d0 <__udivdi3+0x56c>
 402a244:	182d883a 	mov	r22,r3
 402a248:	1421c83a 	sub	r16,r2,r16
 402a24c:	a80b883a 	mov	r5,r21
 402a250:	8009883a 	mov	r4,r16
 402a254:	402ad700 	call	402ad70 <__umodsi3>
 402a258:	1027883a 	mov	r19,r2
 402a25c:	a80b883a 	mov	r5,r21
 402a260:	8009883a 	mov	r4,r16
 402a264:	402ad0c0 	call	402ad0c <__udivsi3>
 402a268:	9826943a 	slli	r19,r19,16
 402a26c:	a0a9383a 	mul	r20,r20,r2
 402a270:	94bfffcc 	andi	r18,r18,65535
 402a274:	94e4b03a 	or	r18,r18,r19
 402a278:	9500052e 	bgeu	r18,r20,402a290 <__udivdi3+0x12c>
 402a27c:	8ca5883a 	add	r18,r17,r18
 402a280:	10ffffc4 	addi	r3,r2,-1
 402a284:	9440f136 	bltu	r18,r17,402a64c <__udivdi3+0x4e8>
 402a288:	9500f02e 	bgeu	r18,r20,402a64c <__udivdi3+0x4e8>
 402a28c:	10bfff84 	addi	r2,r2,-2
 402a290:	b00c943a 	slli	r6,r22,16
 402a294:	0007883a 	mov	r3,zero
 402a298:	3084b03a 	or	r2,r6,r2
 402a29c:	00005906 	br	402a404 <__udivdi3+0x2a0>
 402a2a0:	29c05636 	bltu	r5,r7,402a3fc <__udivdi3+0x298>
 402a2a4:	00bfffd4 	movui	r2,65535
 402a2a8:	11c0622e 	bgeu	r2,r7,402a434 <__udivdi3+0x2d0>
 402a2ac:	00804034 	movhi	r2,256
 402a2b0:	10bfffc4 	addi	r2,r2,-1
 402a2b4:	11c0ee36 	bltu	r2,r7,402a670 <__udivdi3+0x50c>
 402a2b8:	00800404 	movi	r2,16
 402a2bc:	3886d83a 	srl	r3,r7,r2
 402a2c0:	010100f4 	movhi	r4,1027
 402a2c4:	2104f904 	addi	r4,r4,5092
 402a2c8:	20c7883a 	add	r3,r4,r3
 402a2cc:	18c00003 	ldbu	r3,0(r3)
 402a2d0:	05400804 	movi	r21,32
 402a2d4:	1885883a 	add	r2,r3,r2
 402a2d8:	a8abc83a 	sub	r21,r21,r2
 402a2dc:	a800621e 	bne	r21,zero,402a468 <__udivdi3+0x304>
 402a2e0:	3c00e936 	bltu	r7,r16,402a688 <__udivdi3+0x524>
 402a2e4:	9985403a 	cmpgeu	r2,r19,r6
 402a2e8:	0007883a 	mov	r3,zero
 402a2ec:	00004506 	br	402a404 <__udivdi3+0x2a0>
 402a2f0:	3000041e 	bne	r6,zero,402a304 <__udivdi3+0x1a0>
 402a2f4:	000b883a 	mov	r5,zero
 402a2f8:	01000044 	movi	r4,1
 402a2fc:	402ad0c0 	call	402ad0c <__udivsi3>
 402a300:	1023883a 	mov	r17,r2
 402a304:	00bfffd4 	movui	r2,65535
 402a308:	14404e2e 	bgeu	r2,r17,402a444 <__udivdi3+0x2e0>
 402a30c:	00804034 	movhi	r2,256
 402a310:	10bfffc4 	addi	r2,r2,-1
 402a314:	1440d836 	bltu	r2,r17,402a678 <__udivdi3+0x514>
 402a318:	00800404 	movi	r2,16
 402a31c:	8886d83a 	srl	r3,r17,r2
 402a320:	010100f4 	movhi	r4,1027
 402a324:	2104f904 	addi	r4,r4,5092
 402a328:	20c7883a 	add	r3,r4,r3
 402a32c:	18c00003 	ldbu	r3,0(r3)
 402a330:	1885883a 	add	r2,r3,r2
 402a334:	00c00804 	movi	r3,32
 402a338:	1887c83a 	sub	r3,r3,r2
 402a33c:	18008f1e 	bne	r3,zero,402a57c <__udivdi3+0x418>
 402a340:	882ad43a 	srli	r21,r17,16
 402a344:	8461c83a 	sub	r16,r16,r17
 402a348:	8d3fffcc 	andi	r20,r17,65535
 402a34c:	00c00044 	movi	r3,1
 402a350:	8009883a 	mov	r4,r16
 402a354:	a80b883a 	mov	r5,r21
 402a358:	d8c00015 	stw	r3,0(sp)
 402a35c:	402ad700 	call	402ad70 <__umodsi3>
 402a360:	8009883a 	mov	r4,r16
 402a364:	a80b883a 	mov	r5,r21
 402a368:	1027883a 	mov	r19,r2
 402a36c:	402ad0c0 	call	402ad0c <__udivsi3>
 402a370:	9826943a 	slli	r19,r19,16
 402a374:	9008d43a 	srli	r4,r18,16
 402a378:	1521383a 	mul	r16,r2,r20
 402a37c:	102d883a 	mov	r22,r2
 402a380:	24c8b03a 	or	r4,r4,r19
 402a384:	d8c00017 	ldw	r3,0(sp)
 402a388:	2400052e 	bgeu	r4,r16,402a3a0 <__udivdi3+0x23c>
 402a38c:	2449883a 	add	r4,r4,r17
 402a390:	b0bfffc4 	addi	r2,r22,-1
 402a394:	24400136 	bltu	r4,r17,402a39c <__udivdi3+0x238>
 402a398:	2400ca36 	bltu	r4,r16,402a6c4 <__udivdi3+0x560>
 402a39c:	102d883a 	mov	r22,r2
 402a3a0:	2421c83a 	sub	r16,r4,r16
 402a3a4:	a80b883a 	mov	r5,r21
 402a3a8:	8009883a 	mov	r4,r16
 402a3ac:	d8c00015 	stw	r3,0(sp)
 402a3b0:	402ad700 	call	402ad70 <__umodsi3>
 402a3b4:	1027883a 	mov	r19,r2
 402a3b8:	a80b883a 	mov	r5,r21
 402a3bc:	8009883a 	mov	r4,r16
 402a3c0:	402ad0c0 	call	402ad0c <__udivsi3>
 402a3c4:	9826943a 	slli	r19,r19,16
 402a3c8:	1529383a 	mul	r20,r2,r20
 402a3cc:	94bfffcc 	andi	r18,r18,65535
 402a3d0:	94e4b03a 	or	r18,r18,r19
 402a3d4:	d8c00017 	ldw	r3,0(sp)
 402a3d8:	9500052e 	bgeu	r18,r20,402a3f0 <__udivdi3+0x28c>
 402a3dc:	8ca5883a 	add	r18,r17,r18
 402a3e0:	113fffc4 	addi	r4,r2,-1
 402a3e4:	94409736 	bltu	r18,r17,402a644 <__udivdi3+0x4e0>
 402a3e8:	9500962e 	bgeu	r18,r20,402a644 <__udivdi3+0x4e0>
 402a3ec:	10bfff84 	addi	r2,r2,-2
 402a3f0:	b00c943a 	slli	r6,r22,16
 402a3f4:	3084b03a 	or	r2,r6,r2
 402a3f8:	00000206 	br	402a404 <__udivdi3+0x2a0>
 402a3fc:	0007883a 	mov	r3,zero
 402a400:	0005883a 	mov	r2,zero
 402a404:	dfc00a17 	ldw	ra,40(sp)
 402a408:	df000917 	ldw	fp,36(sp)
 402a40c:	ddc00817 	ldw	r23,32(sp)
 402a410:	dd800717 	ldw	r22,28(sp)
 402a414:	dd400617 	ldw	r21,24(sp)
 402a418:	dd000517 	ldw	r20,20(sp)
 402a41c:	dcc00417 	ldw	r19,16(sp)
 402a420:	dc800317 	ldw	r18,12(sp)
 402a424:	dc400217 	ldw	r17,8(sp)
 402a428:	dc000117 	ldw	r16,4(sp)
 402a42c:	dec00b04 	addi	sp,sp,44
 402a430:	f800283a 	ret
 402a434:	00803fc4 	movi	r2,255
 402a438:	11c5803a 	cmpltu	r2,r2,r7
 402a43c:	100490fa 	slli	r2,r2,3
 402a440:	003f9e06 	br	402a2bc <__alt_data_end+0xfffea2bc>
 402a444:	00803fc4 	movi	r2,255
 402a448:	1445803a 	cmpltu	r2,r2,r17
 402a44c:	100490fa 	slli	r2,r2,3
 402a450:	003fb206 	br	402a31c <__alt_data_end+0xfffea31c>
 402a454:	00804034 	movhi	r2,256
 402a458:	10bfffc4 	addi	r2,r2,-1
 402a45c:	11808836 	bltu	r2,r6,402a680 <__udivdi3+0x51c>
 402a460:	00800404 	movi	r2,16
 402a464:	003f5606 	br	402a1c0 <__alt_data_end+0xfffea1c0>
 402a468:	30aed83a 	srl	r23,r6,r2
 402a46c:	3d4e983a 	sll	r7,r7,r21
 402a470:	80acd83a 	srl	r22,r16,r2
 402a474:	9884d83a 	srl	r2,r19,r2
 402a478:	3deeb03a 	or	r23,r7,r23
 402a47c:	b824d43a 	srli	r18,r23,16
 402a480:	8560983a 	sll	r16,r16,r21
 402a484:	b009883a 	mov	r4,r22
 402a488:	900b883a 	mov	r5,r18
 402a48c:	3568983a 	sll	r20,r6,r21
 402a490:	1420b03a 	or	r16,r2,r16
 402a494:	402ad700 	call	402ad70 <__umodsi3>
 402a498:	b009883a 	mov	r4,r22
 402a49c:	900b883a 	mov	r5,r18
 402a4a0:	1023883a 	mov	r17,r2
 402a4a4:	402ad0c0 	call	402ad0c <__udivsi3>
 402a4a8:	8808943a 	slli	r4,r17,16
 402a4ac:	bf3fffcc 	andi	fp,r23,65535
 402a4b0:	8006d43a 	srli	r3,r16,16
 402a4b4:	e0a3383a 	mul	r17,fp,r2
 402a4b8:	100d883a 	mov	r6,r2
 402a4bc:	1906b03a 	or	r3,r3,r4
 402a4c0:	1c40042e 	bgeu	r3,r17,402a4d4 <__udivdi3+0x370>
 402a4c4:	1dc7883a 	add	r3,r3,r23
 402a4c8:	10bfffc4 	addi	r2,r2,-1
 402a4cc:	1dc0752e 	bgeu	r3,r23,402a6a4 <__udivdi3+0x540>
 402a4d0:	100d883a 	mov	r6,r2
 402a4d4:	1c63c83a 	sub	r17,r3,r17
 402a4d8:	900b883a 	mov	r5,r18
 402a4dc:	8809883a 	mov	r4,r17
 402a4e0:	d9800015 	stw	r6,0(sp)
 402a4e4:	402ad700 	call	402ad70 <__umodsi3>
 402a4e8:	102d883a 	mov	r22,r2
 402a4ec:	8809883a 	mov	r4,r17
 402a4f0:	900b883a 	mov	r5,r18
 402a4f4:	402ad0c0 	call	402ad0c <__udivsi3>
 402a4f8:	b02c943a 	slli	r22,r22,16
 402a4fc:	e089383a 	mul	r4,fp,r2
 402a500:	843fffcc 	andi	r16,r16,65535
 402a504:	85a0b03a 	or	r16,r16,r22
 402a508:	d9800017 	ldw	r6,0(sp)
 402a50c:	8100042e 	bgeu	r16,r4,402a520 <__udivdi3+0x3bc>
 402a510:	85e1883a 	add	r16,r16,r23
 402a514:	10ffffc4 	addi	r3,r2,-1
 402a518:	85c05e2e 	bgeu	r16,r23,402a694 <__udivdi3+0x530>
 402a51c:	1805883a 	mov	r2,r3
 402a520:	300c943a 	slli	r6,r6,16
 402a524:	a17fffcc 	andi	r5,r20,65535
 402a528:	a028d43a 	srli	r20,r20,16
 402a52c:	3084b03a 	or	r2,r6,r2
 402a530:	10ffffcc 	andi	r3,r2,65535
 402a534:	100cd43a 	srli	r6,r2,16
 402a538:	194f383a 	mul	r7,r3,r5
 402a53c:	1d07383a 	mul	r3,r3,r20
 402a540:	314b383a 	mul	r5,r6,r5
 402a544:	3810d43a 	srli	r8,r7,16
 402a548:	8121c83a 	sub	r16,r16,r4
 402a54c:	1947883a 	add	r3,r3,r5
 402a550:	40c7883a 	add	r3,r8,r3
 402a554:	350d383a 	mul	r6,r6,r20
 402a558:	1940022e 	bgeu	r3,r5,402a564 <__udivdi3+0x400>
 402a55c:	01000074 	movhi	r4,1
 402a560:	310d883a 	add	r6,r6,r4
 402a564:	1828d43a 	srli	r20,r3,16
 402a568:	a18d883a 	add	r6,r20,r6
 402a56c:	81803e36 	bltu	r16,r6,402a668 <__udivdi3+0x504>
 402a570:	81803826 	beq	r16,r6,402a654 <__udivdi3+0x4f0>
 402a574:	0007883a 	mov	r3,zero
 402a578:	003fa206 	br	402a404 <__alt_data_end+0xfffea404>
 402a57c:	88e2983a 	sll	r17,r17,r3
 402a580:	80a8d83a 	srl	r20,r16,r2
 402a584:	80e0983a 	sll	r16,r16,r3
 402a588:	882ad43a 	srli	r21,r17,16
 402a58c:	9884d83a 	srl	r2,r19,r2
 402a590:	a009883a 	mov	r4,r20
 402a594:	a80b883a 	mov	r5,r21
 402a598:	142eb03a 	or	r23,r2,r16
 402a59c:	98e4983a 	sll	r18,r19,r3
 402a5a0:	402ad700 	call	402ad70 <__umodsi3>
 402a5a4:	a009883a 	mov	r4,r20
 402a5a8:	a80b883a 	mov	r5,r21
 402a5ac:	1021883a 	mov	r16,r2
 402a5b0:	402ad0c0 	call	402ad0c <__udivsi3>
 402a5b4:	1039883a 	mov	fp,r2
 402a5b8:	8d3fffcc 	andi	r20,r17,65535
 402a5bc:	8020943a 	slli	r16,r16,16
 402a5c0:	b804d43a 	srli	r2,r23,16
 402a5c4:	a72d383a 	mul	r22,r20,fp
 402a5c8:	1404b03a 	or	r2,r2,r16
 402a5cc:	1580062e 	bgeu	r2,r22,402a5e8 <__udivdi3+0x484>
 402a5d0:	1445883a 	add	r2,r2,r17
 402a5d4:	e0ffffc4 	addi	r3,fp,-1
 402a5d8:	14403836 	bltu	r2,r17,402a6bc <__udivdi3+0x558>
 402a5dc:	1580372e 	bgeu	r2,r22,402a6bc <__udivdi3+0x558>
 402a5e0:	e73fff84 	addi	fp,fp,-2
 402a5e4:	1445883a 	add	r2,r2,r17
 402a5e8:	15adc83a 	sub	r22,r2,r22
 402a5ec:	a80b883a 	mov	r5,r21
 402a5f0:	b009883a 	mov	r4,r22
 402a5f4:	402ad700 	call	402ad70 <__umodsi3>
 402a5f8:	1027883a 	mov	r19,r2
 402a5fc:	b009883a 	mov	r4,r22
 402a600:	a80b883a 	mov	r5,r21
 402a604:	402ad0c0 	call	402ad0c <__udivsi3>
 402a608:	9826943a 	slli	r19,r19,16
 402a60c:	a0a1383a 	mul	r16,r20,r2
 402a610:	b93fffcc 	andi	r4,r23,65535
 402a614:	24c8b03a 	or	r4,r4,r19
 402a618:	2400062e 	bgeu	r4,r16,402a634 <__udivdi3+0x4d0>
 402a61c:	2449883a 	add	r4,r4,r17
 402a620:	10ffffc4 	addi	r3,r2,-1
 402a624:	24402336 	bltu	r4,r17,402a6b4 <__udivdi3+0x550>
 402a628:	2400222e 	bgeu	r4,r16,402a6b4 <__udivdi3+0x550>
 402a62c:	10bfff84 	addi	r2,r2,-2
 402a630:	2449883a 	add	r4,r4,r17
 402a634:	e038943a 	slli	fp,fp,16
 402a638:	2421c83a 	sub	r16,r4,r16
 402a63c:	e086b03a 	or	r3,fp,r2
 402a640:	003f4306 	br	402a350 <__alt_data_end+0xfffea350>
 402a644:	2005883a 	mov	r2,r4
 402a648:	003f6906 	br	402a3f0 <__alt_data_end+0xfffea3f0>
 402a64c:	1805883a 	mov	r2,r3
 402a650:	003f0f06 	br	402a290 <__alt_data_end+0xfffea290>
 402a654:	1806943a 	slli	r3,r3,16
 402a658:	9d66983a 	sll	r19,r19,r21
 402a65c:	39ffffcc 	andi	r7,r7,65535
 402a660:	19c7883a 	add	r3,r3,r7
 402a664:	98ffc32e 	bgeu	r19,r3,402a574 <__alt_data_end+0xfffea574>
 402a668:	10bfffc4 	addi	r2,r2,-1
 402a66c:	003fc106 	br	402a574 <__alt_data_end+0xfffea574>
 402a670:	00800604 	movi	r2,24
 402a674:	003f1106 	br	402a2bc <__alt_data_end+0xfffea2bc>
 402a678:	00800604 	movi	r2,24
 402a67c:	003f2706 	br	402a31c <__alt_data_end+0xfffea31c>
 402a680:	00800604 	movi	r2,24
 402a684:	003ece06 	br	402a1c0 <__alt_data_end+0xfffea1c0>
 402a688:	0007883a 	mov	r3,zero
 402a68c:	00800044 	movi	r2,1
 402a690:	003f5c06 	br	402a404 <__alt_data_end+0xfffea404>
 402a694:	813fa12e 	bgeu	r16,r4,402a51c <__alt_data_end+0xfffea51c>
 402a698:	10bfff84 	addi	r2,r2,-2
 402a69c:	85e1883a 	add	r16,r16,r23
 402a6a0:	003f9f06 	br	402a520 <__alt_data_end+0xfffea520>
 402a6a4:	1c7f8a2e 	bgeu	r3,r17,402a4d0 <__alt_data_end+0xfffea4d0>
 402a6a8:	31bfff84 	addi	r6,r6,-2
 402a6ac:	1dc7883a 	add	r3,r3,r23
 402a6b0:	003f8806 	br	402a4d4 <__alt_data_end+0xfffea4d4>
 402a6b4:	1805883a 	mov	r2,r3
 402a6b8:	003fde06 	br	402a634 <__alt_data_end+0xfffea634>
 402a6bc:	1839883a 	mov	fp,r3
 402a6c0:	003fc906 	br	402a5e8 <__alt_data_end+0xfffea5e8>
 402a6c4:	b5bfff84 	addi	r22,r22,-2
 402a6c8:	2449883a 	add	r4,r4,r17
 402a6cc:	003f3406 	br	402a3a0 <__alt_data_end+0xfffea3a0>
 402a6d0:	b5bfff84 	addi	r22,r22,-2
 402a6d4:	1445883a 	add	r2,r2,r17
 402a6d8:	003edb06 	br	402a248 <__alt_data_end+0xfffea248>

0402a6dc <__umoddi3>:
 402a6dc:	defff404 	addi	sp,sp,-48
 402a6e0:	df000a15 	stw	fp,40(sp)
 402a6e4:	dc400315 	stw	r17,12(sp)
 402a6e8:	dc000215 	stw	r16,8(sp)
 402a6ec:	dfc00b15 	stw	ra,44(sp)
 402a6f0:	ddc00915 	stw	r23,36(sp)
 402a6f4:	dd800815 	stw	r22,32(sp)
 402a6f8:	dd400715 	stw	r21,28(sp)
 402a6fc:	dd000615 	stw	r20,24(sp)
 402a700:	dcc00515 	stw	r19,20(sp)
 402a704:	dc800415 	stw	r18,16(sp)
 402a708:	2021883a 	mov	r16,r4
 402a70c:	2823883a 	mov	r17,r5
 402a710:	2839883a 	mov	fp,r5
 402a714:	38003c1e 	bne	r7,zero,402a808 <__umoddi3+0x12c>
 402a718:	3027883a 	mov	r19,r6
 402a71c:	2029883a 	mov	r20,r4
 402a720:	2980512e 	bgeu	r5,r6,402a868 <__umoddi3+0x18c>
 402a724:	00bfffd4 	movui	r2,65535
 402a728:	11809a36 	bltu	r2,r6,402a994 <__umoddi3+0x2b8>
 402a72c:	01003fc4 	movi	r4,255
 402a730:	2189803a 	cmpltu	r4,r4,r6
 402a734:	200890fa 	slli	r4,r4,3
 402a738:	3104d83a 	srl	r2,r6,r4
 402a73c:	00c100f4 	movhi	r3,1027
 402a740:	18c4f904 	addi	r3,r3,5092
 402a744:	1885883a 	add	r2,r3,r2
 402a748:	10c00003 	ldbu	r3,0(r2)
 402a74c:	00800804 	movi	r2,32
 402a750:	1909883a 	add	r4,r3,r4
 402a754:	1125c83a 	sub	r18,r2,r4
 402a758:	90000526 	beq	r18,zero,402a770 <__umoddi3+0x94>
 402a75c:	8ca2983a 	sll	r17,r17,r18
 402a760:	8108d83a 	srl	r4,r16,r4
 402a764:	34a6983a 	sll	r19,r6,r18
 402a768:	84a8983a 	sll	r20,r16,r18
 402a76c:	2478b03a 	or	fp,r4,r17
 402a770:	982ed43a 	srli	r23,r19,16
 402a774:	e009883a 	mov	r4,fp
 402a778:	9dbfffcc 	andi	r22,r19,65535
 402a77c:	b80b883a 	mov	r5,r23
 402a780:	402ad700 	call	402ad70 <__umodsi3>
 402a784:	e009883a 	mov	r4,fp
 402a788:	b80b883a 	mov	r5,r23
 402a78c:	102b883a 	mov	r21,r2
 402a790:	402ad0c0 	call	402ad0c <__udivsi3>
 402a794:	a806943a 	slli	r3,r21,16
 402a798:	a008d43a 	srli	r4,r20,16
 402a79c:	b085383a 	mul	r2,r22,r2
 402a7a0:	20c8b03a 	or	r4,r4,r3
 402a7a4:	2080032e 	bgeu	r4,r2,402a7b4 <__umoddi3+0xd8>
 402a7a8:	24c9883a 	add	r4,r4,r19
 402a7ac:	24c00136 	bltu	r4,r19,402a7b4 <__umoddi3+0xd8>
 402a7b0:	20811036 	bltu	r4,r2,402abf4 <__umoddi3+0x518>
 402a7b4:	20abc83a 	sub	r21,r4,r2
 402a7b8:	b80b883a 	mov	r5,r23
 402a7bc:	a809883a 	mov	r4,r21
 402a7c0:	402ad700 	call	402ad70 <__umodsi3>
 402a7c4:	1023883a 	mov	r17,r2
 402a7c8:	b80b883a 	mov	r5,r23
 402a7cc:	a809883a 	mov	r4,r21
 402a7d0:	402ad0c0 	call	402ad0c <__udivsi3>
 402a7d4:	8822943a 	slli	r17,r17,16
 402a7d8:	b085383a 	mul	r2,r22,r2
 402a7dc:	a0ffffcc 	andi	r3,r20,65535
 402a7e0:	1c46b03a 	or	r3,r3,r17
 402a7e4:	1880042e 	bgeu	r3,r2,402a7f8 <__umoddi3+0x11c>
 402a7e8:	1cc7883a 	add	r3,r3,r19
 402a7ec:	1cc00236 	bltu	r3,r19,402a7f8 <__umoddi3+0x11c>
 402a7f0:	1880012e 	bgeu	r3,r2,402a7f8 <__umoddi3+0x11c>
 402a7f4:	1cc7883a 	add	r3,r3,r19
 402a7f8:	1885c83a 	sub	r2,r3,r2
 402a7fc:	1484d83a 	srl	r2,r2,r18
 402a800:	0007883a 	mov	r3,zero
 402a804:	00004f06 	br	402a944 <__umoddi3+0x268>
 402a808:	29c04c36 	bltu	r5,r7,402a93c <__umoddi3+0x260>
 402a80c:	00bfffd4 	movui	r2,65535
 402a810:	11c0582e 	bgeu	r2,r7,402a974 <__umoddi3+0x298>
 402a814:	00804034 	movhi	r2,256
 402a818:	10bfffc4 	addi	r2,r2,-1
 402a81c:	11c0e736 	bltu	r2,r7,402abbc <__umoddi3+0x4e0>
 402a820:	01000404 	movi	r4,16
 402a824:	3904d83a 	srl	r2,r7,r4
 402a828:	00c100f4 	movhi	r3,1027
 402a82c:	18c4f904 	addi	r3,r3,5092
 402a830:	1885883a 	add	r2,r3,r2
 402a834:	14c00003 	ldbu	r19,0(r2)
 402a838:	00c00804 	movi	r3,32
 402a83c:	9927883a 	add	r19,r19,r4
 402a840:	1ce9c83a 	sub	r20,r3,r19
 402a844:	a000581e 	bne	r20,zero,402a9a8 <__umoddi3+0x2cc>
 402a848:	3c400136 	bltu	r7,r17,402a850 <__umoddi3+0x174>
 402a84c:	8180eb36 	bltu	r16,r6,402abfc <__umoddi3+0x520>
 402a850:	8185c83a 	sub	r2,r16,r6
 402a854:	89e3c83a 	sub	r17,r17,r7
 402a858:	8089803a 	cmpltu	r4,r16,r2
 402a85c:	8939c83a 	sub	fp,r17,r4
 402a860:	e007883a 	mov	r3,fp
 402a864:	00003706 	br	402a944 <__umoddi3+0x268>
 402a868:	3000041e 	bne	r6,zero,402a87c <__umoddi3+0x1a0>
 402a86c:	000b883a 	mov	r5,zero
 402a870:	01000044 	movi	r4,1
 402a874:	402ad0c0 	call	402ad0c <__udivsi3>
 402a878:	1027883a 	mov	r19,r2
 402a87c:	00bfffd4 	movui	r2,65535
 402a880:	14c0402e 	bgeu	r2,r19,402a984 <__umoddi3+0x2a8>
 402a884:	00804034 	movhi	r2,256
 402a888:	10bfffc4 	addi	r2,r2,-1
 402a88c:	14c0cd36 	bltu	r2,r19,402abc4 <__umoddi3+0x4e8>
 402a890:	00800404 	movi	r2,16
 402a894:	9886d83a 	srl	r3,r19,r2
 402a898:	010100f4 	movhi	r4,1027
 402a89c:	2104f904 	addi	r4,r4,5092
 402a8a0:	20c7883a 	add	r3,r4,r3
 402a8a4:	18c00003 	ldbu	r3,0(r3)
 402a8a8:	1887883a 	add	r3,r3,r2
 402a8ac:	00800804 	movi	r2,32
 402a8b0:	10e5c83a 	sub	r18,r2,r3
 402a8b4:	9000901e 	bne	r18,zero,402aaf8 <__umoddi3+0x41c>
 402a8b8:	982cd43a 	srli	r22,r19,16
 402a8bc:	8ce3c83a 	sub	r17,r17,r19
 402a8c0:	9d7fffcc 	andi	r21,r19,65535
 402a8c4:	b00b883a 	mov	r5,r22
 402a8c8:	8809883a 	mov	r4,r17
 402a8cc:	402ad700 	call	402ad70 <__umodsi3>
 402a8d0:	8809883a 	mov	r4,r17
 402a8d4:	b00b883a 	mov	r5,r22
 402a8d8:	1021883a 	mov	r16,r2
 402a8dc:	402ad0c0 	call	402ad0c <__udivsi3>
 402a8e0:	8006943a 	slli	r3,r16,16
 402a8e4:	a008d43a 	srli	r4,r20,16
 402a8e8:	1545383a 	mul	r2,r2,r21
 402a8ec:	20c8b03a 	or	r4,r4,r3
 402a8f0:	2080042e 	bgeu	r4,r2,402a904 <__umoddi3+0x228>
 402a8f4:	24c9883a 	add	r4,r4,r19
 402a8f8:	24c00236 	bltu	r4,r19,402a904 <__umoddi3+0x228>
 402a8fc:	2080012e 	bgeu	r4,r2,402a904 <__umoddi3+0x228>
 402a900:	24c9883a 	add	r4,r4,r19
 402a904:	20a1c83a 	sub	r16,r4,r2
 402a908:	b00b883a 	mov	r5,r22
 402a90c:	8009883a 	mov	r4,r16
 402a910:	402ad700 	call	402ad70 <__umodsi3>
 402a914:	1023883a 	mov	r17,r2
 402a918:	b00b883a 	mov	r5,r22
 402a91c:	8009883a 	mov	r4,r16
 402a920:	402ad0c0 	call	402ad0c <__udivsi3>
 402a924:	8822943a 	slli	r17,r17,16
 402a928:	1545383a 	mul	r2,r2,r21
 402a92c:	a53fffcc 	andi	r20,r20,65535
 402a930:	a446b03a 	or	r3,r20,r17
 402a934:	18bfb02e 	bgeu	r3,r2,402a7f8 <__alt_data_end+0xfffea7f8>
 402a938:	003fab06 	br	402a7e8 <__alt_data_end+0xfffea7e8>
 402a93c:	2005883a 	mov	r2,r4
 402a940:	2807883a 	mov	r3,r5
 402a944:	dfc00b17 	ldw	ra,44(sp)
 402a948:	df000a17 	ldw	fp,40(sp)
 402a94c:	ddc00917 	ldw	r23,36(sp)
 402a950:	dd800817 	ldw	r22,32(sp)
 402a954:	dd400717 	ldw	r21,28(sp)
 402a958:	dd000617 	ldw	r20,24(sp)
 402a95c:	dcc00517 	ldw	r19,20(sp)
 402a960:	dc800417 	ldw	r18,16(sp)
 402a964:	dc400317 	ldw	r17,12(sp)
 402a968:	dc000217 	ldw	r16,8(sp)
 402a96c:	dec00c04 	addi	sp,sp,48
 402a970:	f800283a 	ret
 402a974:	04c03fc4 	movi	r19,255
 402a978:	99c9803a 	cmpltu	r4,r19,r7
 402a97c:	200890fa 	slli	r4,r4,3
 402a980:	003fa806 	br	402a824 <__alt_data_end+0xfffea824>
 402a984:	00803fc4 	movi	r2,255
 402a988:	14c5803a 	cmpltu	r2,r2,r19
 402a98c:	100490fa 	slli	r2,r2,3
 402a990:	003fc006 	br	402a894 <__alt_data_end+0xfffea894>
 402a994:	00804034 	movhi	r2,256
 402a998:	10bfffc4 	addi	r2,r2,-1
 402a99c:	11808b36 	bltu	r2,r6,402abcc <__umoddi3+0x4f0>
 402a9a0:	01000404 	movi	r4,16
 402a9a4:	003f6406 	br	402a738 <__alt_data_end+0xfffea738>
 402a9a8:	34c4d83a 	srl	r2,r6,r19
 402a9ac:	3d0e983a 	sll	r7,r7,r20
 402a9b0:	8cf8d83a 	srl	fp,r17,r19
 402a9b4:	8d10983a 	sll	r8,r17,r20
 402a9b8:	38aab03a 	or	r21,r7,r2
 402a9bc:	a82cd43a 	srli	r22,r21,16
 402a9c0:	84e2d83a 	srl	r17,r16,r19
 402a9c4:	e009883a 	mov	r4,fp
 402a9c8:	b00b883a 	mov	r5,r22
 402a9cc:	8a22b03a 	or	r17,r17,r8
 402a9d0:	3524983a 	sll	r18,r6,r20
 402a9d4:	402ad700 	call	402ad70 <__umodsi3>
 402a9d8:	e009883a 	mov	r4,fp
 402a9dc:	b00b883a 	mov	r5,r22
 402a9e0:	102f883a 	mov	r23,r2
 402a9e4:	402ad0c0 	call	402ad0c <__udivsi3>
 402a9e8:	100d883a 	mov	r6,r2
 402a9ec:	b808943a 	slli	r4,r23,16
 402a9f0:	aa3fffcc 	andi	r8,r21,65535
 402a9f4:	8804d43a 	srli	r2,r17,16
 402a9f8:	41af383a 	mul	r23,r8,r6
 402a9fc:	8520983a 	sll	r16,r16,r20
 402aa00:	1104b03a 	or	r2,r2,r4
 402aa04:	15c0042e 	bgeu	r2,r23,402aa18 <__umoddi3+0x33c>
 402aa08:	1545883a 	add	r2,r2,r21
 402aa0c:	30ffffc4 	addi	r3,r6,-1
 402aa10:	1540742e 	bgeu	r2,r21,402abe4 <__umoddi3+0x508>
 402aa14:	180d883a 	mov	r6,r3
 402aa18:	15efc83a 	sub	r23,r2,r23
 402aa1c:	b00b883a 	mov	r5,r22
 402aa20:	b809883a 	mov	r4,r23
 402aa24:	d9800115 	stw	r6,4(sp)
 402aa28:	da000015 	stw	r8,0(sp)
 402aa2c:	402ad700 	call	402ad70 <__umodsi3>
 402aa30:	b00b883a 	mov	r5,r22
 402aa34:	b809883a 	mov	r4,r23
 402aa38:	1039883a 	mov	fp,r2
 402aa3c:	402ad0c0 	call	402ad0c <__udivsi3>
 402aa40:	da000017 	ldw	r8,0(sp)
 402aa44:	e038943a 	slli	fp,fp,16
 402aa48:	100b883a 	mov	r5,r2
 402aa4c:	4089383a 	mul	r4,r8,r2
 402aa50:	8a3fffcc 	andi	r8,r17,65535
 402aa54:	4710b03a 	or	r8,r8,fp
 402aa58:	d9800117 	ldw	r6,4(sp)
 402aa5c:	4100042e 	bgeu	r8,r4,402aa70 <__umoddi3+0x394>
 402aa60:	4551883a 	add	r8,r8,r21
 402aa64:	10bfffc4 	addi	r2,r2,-1
 402aa68:	45405a2e 	bgeu	r8,r21,402abd4 <__umoddi3+0x4f8>
 402aa6c:	100b883a 	mov	r5,r2
 402aa70:	300c943a 	slli	r6,r6,16
 402aa74:	91ffffcc 	andi	r7,r18,65535
 402aa78:	9004d43a 	srli	r2,r18,16
 402aa7c:	314cb03a 	or	r6,r6,r5
 402aa80:	317fffcc 	andi	r5,r6,65535
 402aa84:	300cd43a 	srli	r6,r6,16
 402aa88:	29d3383a 	mul	r9,r5,r7
 402aa8c:	288b383a 	mul	r5,r5,r2
 402aa90:	31cf383a 	mul	r7,r6,r7
 402aa94:	4806d43a 	srli	r3,r9,16
 402aa98:	4111c83a 	sub	r8,r8,r4
 402aa9c:	29cb883a 	add	r5,r5,r7
 402aaa0:	194b883a 	add	r5,r3,r5
 402aaa4:	3085383a 	mul	r2,r6,r2
 402aaa8:	29c0022e 	bgeu	r5,r7,402aab4 <__umoddi3+0x3d8>
 402aaac:	00c00074 	movhi	r3,1
 402aab0:	10c5883a 	add	r2,r2,r3
 402aab4:	2808d43a 	srli	r4,r5,16
 402aab8:	280a943a 	slli	r5,r5,16
 402aabc:	4a7fffcc 	andi	r9,r9,65535
 402aac0:	2085883a 	add	r2,r4,r2
 402aac4:	2a4b883a 	add	r5,r5,r9
 402aac8:	40803636 	bltu	r8,r2,402aba4 <__umoddi3+0x4c8>
 402aacc:	40804d26 	beq	r8,r2,402ac04 <__umoddi3+0x528>
 402aad0:	4089c83a 	sub	r4,r8,r2
 402aad4:	280f883a 	mov	r7,r5
 402aad8:	81cfc83a 	sub	r7,r16,r7
 402aadc:	81c7803a 	cmpltu	r3,r16,r7
 402aae0:	20c7c83a 	sub	r3,r4,r3
 402aae4:	1cc4983a 	sll	r2,r3,r19
 402aae8:	3d0ed83a 	srl	r7,r7,r20
 402aaec:	1d06d83a 	srl	r3,r3,r20
 402aaf0:	11c4b03a 	or	r2,r2,r7
 402aaf4:	003f9306 	br	402a944 <__alt_data_end+0xfffea944>
 402aaf8:	9ca6983a 	sll	r19,r19,r18
 402aafc:	88e8d83a 	srl	r20,r17,r3
 402ab00:	80c4d83a 	srl	r2,r16,r3
 402ab04:	982cd43a 	srli	r22,r19,16
 402ab08:	8ca2983a 	sll	r17,r17,r18
 402ab0c:	a009883a 	mov	r4,r20
 402ab10:	b00b883a 	mov	r5,r22
 402ab14:	1478b03a 	or	fp,r2,r17
 402ab18:	402ad700 	call	402ad70 <__umodsi3>
 402ab1c:	a009883a 	mov	r4,r20
 402ab20:	b00b883a 	mov	r5,r22
 402ab24:	1023883a 	mov	r17,r2
 402ab28:	402ad0c0 	call	402ad0c <__udivsi3>
 402ab2c:	9d7fffcc 	andi	r21,r19,65535
 402ab30:	880a943a 	slli	r5,r17,16
 402ab34:	e008d43a 	srli	r4,fp,16
 402ab38:	a885383a 	mul	r2,r21,r2
 402ab3c:	84a8983a 	sll	r20,r16,r18
 402ab40:	2148b03a 	or	r4,r4,r5
 402ab44:	2080042e 	bgeu	r4,r2,402ab58 <__umoddi3+0x47c>
 402ab48:	24c9883a 	add	r4,r4,r19
 402ab4c:	24c00236 	bltu	r4,r19,402ab58 <__umoddi3+0x47c>
 402ab50:	2080012e 	bgeu	r4,r2,402ab58 <__umoddi3+0x47c>
 402ab54:	24c9883a 	add	r4,r4,r19
 402ab58:	20a3c83a 	sub	r17,r4,r2
 402ab5c:	b00b883a 	mov	r5,r22
 402ab60:	8809883a 	mov	r4,r17
 402ab64:	402ad700 	call	402ad70 <__umodsi3>
 402ab68:	102f883a 	mov	r23,r2
 402ab6c:	8809883a 	mov	r4,r17
 402ab70:	b00b883a 	mov	r5,r22
 402ab74:	402ad0c0 	call	402ad0c <__udivsi3>
 402ab78:	b82e943a 	slli	r23,r23,16
 402ab7c:	a885383a 	mul	r2,r21,r2
 402ab80:	e13fffcc 	andi	r4,fp,65535
 402ab84:	25c8b03a 	or	r4,r4,r23
 402ab88:	2080042e 	bgeu	r4,r2,402ab9c <__umoddi3+0x4c0>
 402ab8c:	24c9883a 	add	r4,r4,r19
 402ab90:	24c00236 	bltu	r4,r19,402ab9c <__umoddi3+0x4c0>
 402ab94:	2080012e 	bgeu	r4,r2,402ab9c <__umoddi3+0x4c0>
 402ab98:	24c9883a 	add	r4,r4,r19
 402ab9c:	20a3c83a 	sub	r17,r4,r2
 402aba0:	003f4806 	br	402a8c4 <__alt_data_end+0xfffea8c4>
 402aba4:	2c8fc83a 	sub	r7,r5,r18
 402aba8:	1545c83a 	sub	r2,r2,r21
 402abac:	29cb803a 	cmpltu	r5,r5,r7
 402abb0:	1145c83a 	sub	r2,r2,r5
 402abb4:	4089c83a 	sub	r4,r8,r2
 402abb8:	003fc706 	br	402aad8 <__alt_data_end+0xfffeaad8>
 402abbc:	01000604 	movi	r4,24
 402abc0:	003f1806 	br	402a824 <__alt_data_end+0xfffea824>
 402abc4:	00800604 	movi	r2,24
 402abc8:	003f3206 	br	402a894 <__alt_data_end+0xfffea894>
 402abcc:	01000604 	movi	r4,24
 402abd0:	003ed906 	br	402a738 <__alt_data_end+0xfffea738>
 402abd4:	413fa52e 	bgeu	r8,r4,402aa6c <__alt_data_end+0xfffeaa6c>
 402abd8:	297fff84 	addi	r5,r5,-2
 402abdc:	4551883a 	add	r8,r8,r21
 402abe0:	003fa306 	br	402aa70 <__alt_data_end+0xfffeaa70>
 402abe4:	15ff8b2e 	bgeu	r2,r23,402aa14 <__alt_data_end+0xfffeaa14>
 402abe8:	31bfff84 	addi	r6,r6,-2
 402abec:	1545883a 	add	r2,r2,r21
 402abf0:	003f8906 	br	402aa18 <__alt_data_end+0xfffeaa18>
 402abf4:	24c9883a 	add	r4,r4,r19
 402abf8:	003eee06 	br	402a7b4 <__alt_data_end+0xfffea7b4>
 402abfc:	8005883a 	mov	r2,r16
 402ac00:	003f1706 	br	402a860 <__alt_data_end+0xfffea860>
 402ac04:	817fe736 	bltu	r16,r5,402aba4 <__alt_data_end+0xfffeaba4>
 402ac08:	280f883a 	mov	r7,r5
 402ac0c:	0009883a 	mov	r4,zero
 402ac10:	003fb106 	br	402aad8 <__alt_data_end+0xfffeaad8>

0402ac14 <__divsi3>:
 402ac14:	20001b16 	blt	r4,zero,402ac84 <__divsi3+0x70>
 402ac18:	000f883a 	mov	r7,zero
 402ac1c:	28001616 	blt	r5,zero,402ac78 <__divsi3+0x64>
 402ac20:	200d883a 	mov	r6,r4
 402ac24:	29001a2e 	bgeu	r5,r4,402ac90 <__divsi3+0x7c>
 402ac28:	00800804 	movi	r2,32
 402ac2c:	00c00044 	movi	r3,1
 402ac30:	00000106 	br	402ac38 <__divsi3+0x24>
 402ac34:	10000d26 	beq	r2,zero,402ac6c <__divsi3+0x58>
 402ac38:	294b883a 	add	r5,r5,r5
 402ac3c:	10bfffc4 	addi	r2,r2,-1
 402ac40:	18c7883a 	add	r3,r3,r3
 402ac44:	293ffb36 	bltu	r5,r4,402ac34 <__alt_data_end+0xfffeac34>
 402ac48:	0005883a 	mov	r2,zero
 402ac4c:	18000726 	beq	r3,zero,402ac6c <__divsi3+0x58>
 402ac50:	0005883a 	mov	r2,zero
 402ac54:	31400236 	bltu	r6,r5,402ac60 <__divsi3+0x4c>
 402ac58:	314dc83a 	sub	r6,r6,r5
 402ac5c:	10c4b03a 	or	r2,r2,r3
 402ac60:	1806d07a 	srli	r3,r3,1
 402ac64:	280ad07a 	srli	r5,r5,1
 402ac68:	183ffa1e 	bne	r3,zero,402ac54 <__alt_data_end+0xfffeac54>
 402ac6c:	38000126 	beq	r7,zero,402ac74 <__divsi3+0x60>
 402ac70:	0085c83a 	sub	r2,zero,r2
 402ac74:	f800283a 	ret
 402ac78:	014bc83a 	sub	r5,zero,r5
 402ac7c:	39c0005c 	xori	r7,r7,1
 402ac80:	003fe706 	br	402ac20 <__alt_data_end+0xfffeac20>
 402ac84:	0109c83a 	sub	r4,zero,r4
 402ac88:	01c00044 	movi	r7,1
 402ac8c:	003fe306 	br	402ac1c <__alt_data_end+0xfffeac1c>
 402ac90:	00c00044 	movi	r3,1
 402ac94:	003fee06 	br	402ac50 <__alt_data_end+0xfffeac50>

0402ac98 <__modsi3>:
 402ac98:	20001716 	blt	r4,zero,402acf8 <__modsi3+0x60>
 402ac9c:	000f883a 	mov	r7,zero
 402aca0:	2005883a 	mov	r2,r4
 402aca4:	28001216 	blt	r5,zero,402acf0 <__modsi3+0x58>
 402aca8:	2900162e 	bgeu	r5,r4,402ad04 <__modsi3+0x6c>
 402acac:	01800804 	movi	r6,32
 402acb0:	00c00044 	movi	r3,1
 402acb4:	00000106 	br	402acbc <__modsi3+0x24>
 402acb8:	30000a26 	beq	r6,zero,402ace4 <__modsi3+0x4c>
 402acbc:	294b883a 	add	r5,r5,r5
 402acc0:	31bfffc4 	addi	r6,r6,-1
 402acc4:	18c7883a 	add	r3,r3,r3
 402acc8:	293ffb36 	bltu	r5,r4,402acb8 <__alt_data_end+0xfffeacb8>
 402accc:	18000526 	beq	r3,zero,402ace4 <__modsi3+0x4c>
 402acd0:	1806d07a 	srli	r3,r3,1
 402acd4:	11400136 	bltu	r2,r5,402acdc <__modsi3+0x44>
 402acd8:	1145c83a 	sub	r2,r2,r5
 402acdc:	280ad07a 	srli	r5,r5,1
 402ace0:	183ffb1e 	bne	r3,zero,402acd0 <__alt_data_end+0xfffeacd0>
 402ace4:	38000126 	beq	r7,zero,402acec <__modsi3+0x54>
 402ace8:	0085c83a 	sub	r2,zero,r2
 402acec:	f800283a 	ret
 402acf0:	014bc83a 	sub	r5,zero,r5
 402acf4:	003fec06 	br	402aca8 <__alt_data_end+0xfffeaca8>
 402acf8:	0109c83a 	sub	r4,zero,r4
 402acfc:	01c00044 	movi	r7,1
 402ad00:	003fe706 	br	402aca0 <__alt_data_end+0xfffeaca0>
 402ad04:	00c00044 	movi	r3,1
 402ad08:	003ff106 	br	402acd0 <__alt_data_end+0xfffeacd0>

0402ad0c <__udivsi3>:
 402ad0c:	200d883a 	mov	r6,r4
 402ad10:	2900152e 	bgeu	r5,r4,402ad68 <__udivsi3+0x5c>
 402ad14:	28001416 	blt	r5,zero,402ad68 <__udivsi3+0x5c>
 402ad18:	00800804 	movi	r2,32
 402ad1c:	00c00044 	movi	r3,1
 402ad20:	00000206 	br	402ad2c <__udivsi3+0x20>
 402ad24:	10000e26 	beq	r2,zero,402ad60 <__udivsi3+0x54>
 402ad28:	28000516 	blt	r5,zero,402ad40 <__udivsi3+0x34>
 402ad2c:	294b883a 	add	r5,r5,r5
 402ad30:	10bfffc4 	addi	r2,r2,-1
 402ad34:	18c7883a 	add	r3,r3,r3
 402ad38:	293ffa36 	bltu	r5,r4,402ad24 <__alt_data_end+0xfffead24>
 402ad3c:	18000826 	beq	r3,zero,402ad60 <__udivsi3+0x54>
 402ad40:	0005883a 	mov	r2,zero
 402ad44:	31400236 	bltu	r6,r5,402ad50 <__udivsi3+0x44>
 402ad48:	314dc83a 	sub	r6,r6,r5
 402ad4c:	10c4b03a 	or	r2,r2,r3
 402ad50:	1806d07a 	srli	r3,r3,1
 402ad54:	280ad07a 	srli	r5,r5,1
 402ad58:	183ffa1e 	bne	r3,zero,402ad44 <__alt_data_end+0xfffead44>
 402ad5c:	f800283a 	ret
 402ad60:	0005883a 	mov	r2,zero
 402ad64:	f800283a 	ret
 402ad68:	00c00044 	movi	r3,1
 402ad6c:	003ff406 	br	402ad40 <__alt_data_end+0xfffead40>

0402ad70 <__umodsi3>:
 402ad70:	2005883a 	mov	r2,r4
 402ad74:	2900122e 	bgeu	r5,r4,402adc0 <__umodsi3+0x50>
 402ad78:	28001116 	blt	r5,zero,402adc0 <__umodsi3+0x50>
 402ad7c:	01800804 	movi	r6,32
 402ad80:	00c00044 	movi	r3,1
 402ad84:	00000206 	br	402ad90 <__umodsi3+0x20>
 402ad88:	30000c26 	beq	r6,zero,402adbc <__umodsi3+0x4c>
 402ad8c:	28000516 	blt	r5,zero,402ada4 <__umodsi3+0x34>
 402ad90:	294b883a 	add	r5,r5,r5
 402ad94:	31bfffc4 	addi	r6,r6,-1
 402ad98:	18c7883a 	add	r3,r3,r3
 402ad9c:	293ffa36 	bltu	r5,r4,402ad88 <__alt_data_end+0xfffead88>
 402ada0:	18000626 	beq	r3,zero,402adbc <__umodsi3+0x4c>
 402ada4:	1806d07a 	srli	r3,r3,1
 402ada8:	11400136 	bltu	r2,r5,402adb0 <__umodsi3+0x40>
 402adac:	1145c83a 	sub	r2,r2,r5
 402adb0:	280ad07a 	srli	r5,r5,1
 402adb4:	183ffb1e 	bne	r3,zero,402ada4 <__alt_data_end+0xfffeada4>
 402adb8:	f800283a 	ret
 402adbc:	f800283a 	ret
 402adc0:	00c00044 	movi	r3,1
 402adc4:	003ff706 	br	402ada4 <__alt_data_end+0xfffeada4>

0402adc8 <__adddf3>:
 402adc8:	02c00434 	movhi	r11,16
 402adcc:	5affffc4 	addi	r11,r11,-1
 402add0:	2806d7fa 	srli	r3,r5,31
 402add4:	2ad4703a 	and	r10,r5,r11
 402add8:	3ad2703a 	and	r9,r7,r11
 402addc:	3804d53a 	srli	r2,r7,20
 402ade0:	3018d77a 	srli	r12,r6,29
 402ade4:	280ad53a 	srli	r5,r5,20
 402ade8:	501490fa 	slli	r10,r10,3
 402adec:	2010d77a 	srli	r8,r4,29
 402adf0:	481290fa 	slli	r9,r9,3
 402adf4:	380ed7fa 	srli	r7,r7,31
 402adf8:	defffb04 	addi	sp,sp,-20
 402adfc:	dc800215 	stw	r18,8(sp)
 402ae00:	dc400115 	stw	r17,4(sp)
 402ae04:	dc000015 	stw	r16,0(sp)
 402ae08:	dfc00415 	stw	ra,16(sp)
 402ae0c:	dcc00315 	stw	r19,12(sp)
 402ae10:	1c803fcc 	andi	r18,r3,255
 402ae14:	2c01ffcc 	andi	r16,r5,2047
 402ae18:	5210b03a 	or	r8,r10,r8
 402ae1c:	202290fa 	slli	r17,r4,3
 402ae20:	1081ffcc 	andi	r2,r2,2047
 402ae24:	4b12b03a 	or	r9,r9,r12
 402ae28:	300c90fa 	slli	r6,r6,3
 402ae2c:	91c07526 	beq	r18,r7,402b004 <__adddf3+0x23c>
 402ae30:	8087c83a 	sub	r3,r16,r2
 402ae34:	00c0ab0e 	bge	zero,r3,402b0e4 <__adddf3+0x31c>
 402ae38:	10002a1e 	bne	r2,zero,402aee4 <__adddf3+0x11c>
 402ae3c:	4984b03a 	or	r2,r9,r6
 402ae40:	1000961e 	bne	r2,zero,402b09c <__adddf3+0x2d4>
 402ae44:	888001cc 	andi	r2,r17,7
 402ae48:	10000726 	beq	r2,zero,402ae68 <__adddf3+0xa0>
 402ae4c:	888003cc 	andi	r2,r17,15
 402ae50:	00c00104 	movi	r3,4
 402ae54:	10c00426 	beq	r2,r3,402ae68 <__adddf3+0xa0>
 402ae58:	88c7883a 	add	r3,r17,r3
 402ae5c:	1c63803a 	cmpltu	r17,r3,r17
 402ae60:	4451883a 	add	r8,r8,r17
 402ae64:	1823883a 	mov	r17,r3
 402ae68:	4080202c 	andhi	r2,r8,128
 402ae6c:	10005926 	beq	r2,zero,402afd4 <__adddf3+0x20c>
 402ae70:	84000044 	addi	r16,r16,1
 402ae74:	0081ffc4 	movi	r2,2047
 402ae78:	8080ba26 	beq	r16,r2,402b164 <__adddf3+0x39c>
 402ae7c:	00bfe034 	movhi	r2,65408
 402ae80:	10bfffc4 	addi	r2,r2,-1
 402ae84:	4090703a 	and	r8,r8,r2
 402ae88:	4004977a 	slli	r2,r8,29
 402ae8c:	4010927a 	slli	r8,r8,9
 402ae90:	8822d0fa 	srli	r17,r17,3
 402ae94:	8401ffcc 	andi	r16,r16,2047
 402ae98:	4010d33a 	srli	r8,r8,12
 402ae9c:	9007883a 	mov	r3,r18
 402aea0:	1444b03a 	or	r2,r2,r17
 402aea4:	8401ffcc 	andi	r16,r16,2047
 402aea8:	8020953a 	slli	r16,r16,20
 402aeac:	18c03fcc 	andi	r3,r3,255
 402aeb0:	01000434 	movhi	r4,16
 402aeb4:	213fffc4 	addi	r4,r4,-1
 402aeb8:	180697fa 	slli	r3,r3,31
 402aebc:	4110703a 	and	r8,r8,r4
 402aec0:	4410b03a 	or	r8,r8,r16
 402aec4:	40c6b03a 	or	r3,r8,r3
 402aec8:	dfc00417 	ldw	ra,16(sp)
 402aecc:	dcc00317 	ldw	r19,12(sp)
 402aed0:	dc800217 	ldw	r18,8(sp)
 402aed4:	dc400117 	ldw	r17,4(sp)
 402aed8:	dc000017 	ldw	r16,0(sp)
 402aedc:	dec00504 	addi	sp,sp,20
 402aee0:	f800283a 	ret
 402aee4:	0081ffc4 	movi	r2,2047
 402aee8:	80bfd626 	beq	r16,r2,402ae44 <__alt_data_end+0xfffeae44>
 402aeec:	4a402034 	orhi	r9,r9,128
 402aef0:	00800e04 	movi	r2,56
 402aef4:	10c09f16 	blt	r2,r3,402b174 <__adddf3+0x3ac>
 402aef8:	008007c4 	movi	r2,31
 402aefc:	10c0c216 	blt	r2,r3,402b208 <__adddf3+0x440>
 402af00:	00800804 	movi	r2,32
 402af04:	10c5c83a 	sub	r2,r2,r3
 402af08:	488a983a 	sll	r5,r9,r2
 402af0c:	30c8d83a 	srl	r4,r6,r3
 402af10:	3084983a 	sll	r2,r6,r2
 402af14:	48c6d83a 	srl	r3,r9,r3
 402af18:	290cb03a 	or	r6,r5,r4
 402af1c:	1004c03a 	cmpne	r2,r2,zero
 402af20:	308cb03a 	or	r6,r6,r2
 402af24:	898dc83a 	sub	r6,r17,r6
 402af28:	89a3803a 	cmpltu	r17,r17,r6
 402af2c:	40d1c83a 	sub	r8,r8,r3
 402af30:	4451c83a 	sub	r8,r8,r17
 402af34:	3023883a 	mov	r17,r6
 402af38:	4080202c 	andhi	r2,r8,128
 402af3c:	10002326 	beq	r2,zero,402afcc <__adddf3+0x204>
 402af40:	04c02034 	movhi	r19,128
 402af44:	9cffffc4 	addi	r19,r19,-1
 402af48:	44e6703a 	and	r19,r8,r19
 402af4c:	98007626 	beq	r19,zero,402b128 <__adddf3+0x360>
 402af50:	9809883a 	mov	r4,r19
 402af54:	402d3cc0 	call	402d3cc <__clzsi2>
 402af58:	10fffe04 	addi	r3,r2,-8
 402af5c:	010007c4 	movi	r4,31
 402af60:	20c07716 	blt	r4,r3,402b140 <__adddf3+0x378>
 402af64:	00800804 	movi	r2,32
 402af68:	10c5c83a 	sub	r2,r2,r3
 402af6c:	8884d83a 	srl	r2,r17,r2
 402af70:	98d0983a 	sll	r8,r19,r3
 402af74:	88e2983a 	sll	r17,r17,r3
 402af78:	1204b03a 	or	r2,r2,r8
 402af7c:	1c007416 	blt	r3,r16,402b150 <__adddf3+0x388>
 402af80:	1c21c83a 	sub	r16,r3,r16
 402af84:	82000044 	addi	r8,r16,1
 402af88:	00c007c4 	movi	r3,31
 402af8c:	1a009116 	blt	r3,r8,402b1d4 <__adddf3+0x40c>
 402af90:	00c00804 	movi	r3,32
 402af94:	1a07c83a 	sub	r3,r3,r8
 402af98:	8a08d83a 	srl	r4,r17,r8
 402af9c:	88e2983a 	sll	r17,r17,r3
 402afa0:	10c6983a 	sll	r3,r2,r3
 402afa4:	1210d83a 	srl	r8,r2,r8
 402afa8:	8804c03a 	cmpne	r2,r17,zero
 402afac:	1906b03a 	or	r3,r3,r4
 402afb0:	18a2b03a 	or	r17,r3,r2
 402afb4:	0021883a 	mov	r16,zero
 402afb8:	003fa206 	br	402ae44 <__alt_data_end+0xfffeae44>
 402afbc:	1890b03a 	or	r8,r3,r2
 402afc0:	40017d26 	beq	r8,zero,402b5b8 <__adddf3+0x7f0>
 402afc4:	1011883a 	mov	r8,r2
 402afc8:	1823883a 	mov	r17,r3
 402afcc:	888001cc 	andi	r2,r17,7
 402afd0:	103f9e1e 	bne	r2,zero,402ae4c <__alt_data_end+0xfffeae4c>
 402afd4:	4004977a 	slli	r2,r8,29
 402afd8:	8822d0fa 	srli	r17,r17,3
 402afdc:	4010d0fa 	srli	r8,r8,3
 402afe0:	9007883a 	mov	r3,r18
 402afe4:	1444b03a 	or	r2,r2,r17
 402afe8:	0101ffc4 	movi	r4,2047
 402afec:	81002426 	beq	r16,r4,402b080 <__adddf3+0x2b8>
 402aff0:	8120703a 	and	r16,r16,r4
 402aff4:	01000434 	movhi	r4,16
 402aff8:	213fffc4 	addi	r4,r4,-1
 402affc:	4110703a 	and	r8,r8,r4
 402b000:	003fa806 	br	402aea4 <__alt_data_end+0xfffeaea4>
 402b004:	8089c83a 	sub	r4,r16,r2
 402b008:	01005e0e 	bge	zero,r4,402b184 <__adddf3+0x3bc>
 402b00c:	10002b26 	beq	r2,zero,402b0bc <__adddf3+0x2f4>
 402b010:	0081ffc4 	movi	r2,2047
 402b014:	80bf8b26 	beq	r16,r2,402ae44 <__alt_data_end+0xfffeae44>
 402b018:	4a402034 	orhi	r9,r9,128
 402b01c:	00800e04 	movi	r2,56
 402b020:	1100a40e 	bge	r2,r4,402b2b4 <__adddf3+0x4ec>
 402b024:	498cb03a 	or	r6,r9,r6
 402b028:	300ac03a 	cmpne	r5,r6,zero
 402b02c:	0013883a 	mov	r9,zero
 402b030:	2c4b883a 	add	r5,r5,r17
 402b034:	2c63803a 	cmpltu	r17,r5,r17
 402b038:	4a11883a 	add	r8,r9,r8
 402b03c:	8a11883a 	add	r8,r17,r8
 402b040:	2823883a 	mov	r17,r5
 402b044:	4080202c 	andhi	r2,r8,128
 402b048:	103fe026 	beq	r2,zero,402afcc <__alt_data_end+0xfffeafcc>
 402b04c:	84000044 	addi	r16,r16,1
 402b050:	0081ffc4 	movi	r2,2047
 402b054:	8080d226 	beq	r16,r2,402b3a0 <__adddf3+0x5d8>
 402b058:	00bfe034 	movhi	r2,65408
 402b05c:	10bfffc4 	addi	r2,r2,-1
 402b060:	4090703a 	and	r8,r8,r2
 402b064:	880ad07a 	srli	r5,r17,1
 402b068:	400897fa 	slli	r4,r8,31
 402b06c:	88c0004c 	andi	r3,r17,1
 402b070:	28e2b03a 	or	r17,r5,r3
 402b074:	4010d07a 	srli	r8,r8,1
 402b078:	2462b03a 	or	r17,r4,r17
 402b07c:	003f7106 	br	402ae44 <__alt_data_end+0xfffeae44>
 402b080:	4088b03a 	or	r4,r8,r2
 402b084:	20014526 	beq	r4,zero,402b59c <__adddf3+0x7d4>
 402b088:	01000434 	movhi	r4,16
 402b08c:	42000234 	orhi	r8,r8,8
 402b090:	213fffc4 	addi	r4,r4,-1
 402b094:	4110703a 	and	r8,r8,r4
 402b098:	003f8206 	br	402aea4 <__alt_data_end+0xfffeaea4>
 402b09c:	18ffffc4 	addi	r3,r3,-1
 402b0a0:	1800491e 	bne	r3,zero,402b1c8 <__adddf3+0x400>
 402b0a4:	898bc83a 	sub	r5,r17,r6
 402b0a8:	8963803a 	cmpltu	r17,r17,r5
 402b0ac:	4251c83a 	sub	r8,r8,r9
 402b0b0:	4451c83a 	sub	r8,r8,r17
 402b0b4:	2823883a 	mov	r17,r5
 402b0b8:	003f9f06 	br	402af38 <__alt_data_end+0xfffeaf38>
 402b0bc:	4984b03a 	or	r2,r9,r6
 402b0c0:	103f6026 	beq	r2,zero,402ae44 <__alt_data_end+0xfffeae44>
 402b0c4:	213fffc4 	addi	r4,r4,-1
 402b0c8:	2000931e 	bne	r4,zero,402b318 <__adddf3+0x550>
 402b0cc:	898d883a 	add	r6,r17,r6
 402b0d0:	3463803a 	cmpltu	r17,r6,r17
 402b0d4:	4251883a 	add	r8,r8,r9
 402b0d8:	8a11883a 	add	r8,r17,r8
 402b0dc:	3023883a 	mov	r17,r6
 402b0e0:	003fd806 	br	402b044 <__alt_data_end+0xfffeb044>
 402b0e4:	1800541e 	bne	r3,zero,402b238 <__adddf3+0x470>
 402b0e8:	80800044 	addi	r2,r16,1
 402b0ec:	1081ffcc 	andi	r2,r2,2047
 402b0f0:	00c00044 	movi	r3,1
 402b0f4:	1880a00e 	bge	r3,r2,402b378 <__adddf3+0x5b0>
 402b0f8:	8989c83a 	sub	r4,r17,r6
 402b0fc:	8905803a 	cmpltu	r2,r17,r4
 402b100:	4267c83a 	sub	r19,r8,r9
 402b104:	98a7c83a 	sub	r19,r19,r2
 402b108:	9880202c 	andhi	r2,r19,128
 402b10c:	10006326 	beq	r2,zero,402b29c <__adddf3+0x4d4>
 402b110:	3463c83a 	sub	r17,r6,r17
 402b114:	4a07c83a 	sub	r3,r9,r8
 402b118:	344d803a 	cmpltu	r6,r6,r17
 402b11c:	19a7c83a 	sub	r19,r3,r6
 402b120:	3825883a 	mov	r18,r7
 402b124:	983f8a1e 	bne	r19,zero,402af50 <__alt_data_end+0xfffeaf50>
 402b128:	8809883a 	mov	r4,r17
 402b12c:	402d3cc0 	call	402d3cc <__clzsi2>
 402b130:	10800804 	addi	r2,r2,32
 402b134:	10fffe04 	addi	r3,r2,-8
 402b138:	010007c4 	movi	r4,31
 402b13c:	20ff890e 	bge	r4,r3,402af64 <__alt_data_end+0xfffeaf64>
 402b140:	10bff604 	addi	r2,r2,-40
 402b144:	8884983a 	sll	r2,r17,r2
 402b148:	0023883a 	mov	r17,zero
 402b14c:	1c3f8c0e 	bge	r3,r16,402af80 <__alt_data_end+0xfffeaf80>
 402b150:	023fe034 	movhi	r8,65408
 402b154:	423fffc4 	addi	r8,r8,-1
 402b158:	80e1c83a 	sub	r16,r16,r3
 402b15c:	1210703a 	and	r8,r2,r8
 402b160:	003f3806 	br	402ae44 <__alt_data_end+0xfffeae44>
 402b164:	9007883a 	mov	r3,r18
 402b168:	0011883a 	mov	r8,zero
 402b16c:	0005883a 	mov	r2,zero
 402b170:	003f4c06 	br	402aea4 <__alt_data_end+0xfffeaea4>
 402b174:	498cb03a 	or	r6,r9,r6
 402b178:	300cc03a 	cmpne	r6,r6,zero
 402b17c:	0007883a 	mov	r3,zero
 402b180:	003f6806 	br	402af24 <__alt_data_end+0xfffeaf24>
 402b184:	20009c1e 	bne	r4,zero,402b3f8 <__adddf3+0x630>
 402b188:	80800044 	addi	r2,r16,1
 402b18c:	1141ffcc 	andi	r5,r2,2047
 402b190:	01000044 	movi	r4,1
 402b194:	2140670e 	bge	r4,r5,402b334 <__adddf3+0x56c>
 402b198:	0101ffc4 	movi	r4,2047
 402b19c:	11007f26 	beq	r2,r4,402b39c <__adddf3+0x5d4>
 402b1a0:	898d883a 	add	r6,r17,r6
 402b1a4:	4247883a 	add	r3,r8,r9
 402b1a8:	3451803a 	cmpltu	r8,r6,r17
 402b1ac:	40d1883a 	add	r8,r8,r3
 402b1b0:	402297fa 	slli	r17,r8,31
 402b1b4:	300cd07a 	srli	r6,r6,1
 402b1b8:	4010d07a 	srli	r8,r8,1
 402b1bc:	1021883a 	mov	r16,r2
 402b1c0:	89a2b03a 	or	r17,r17,r6
 402b1c4:	003f1f06 	br	402ae44 <__alt_data_end+0xfffeae44>
 402b1c8:	0081ffc4 	movi	r2,2047
 402b1cc:	80bf481e 	bne	r16,r2,402aef0 <__alt_data_end+0xfffeaef0>
 402b1d0:	003f1c06 	br	402ae44 <__alt_data_end+0xfffeae44>
 402b1d4:	843ff844 	addi	r16,r16,-31
 402b1d8:	01000804 	movi	r4,32
 402b1dc:	1406d83a 	srl	r3,r2,r16
 402b1e0:	41005026 	beq	r8,r4,402b324 <__adddf3+0x55c>
 402b1e4:	01001004 	movi	r4,64
 402b1e8:	2211c83a 	sub	r8,r4,r8
 402b1ec:	1204983a 	sll	r2,r2,r8
 402b1f0:	88a2b03a 	or	r17,r17,r2
 402b1f4:	8822c03a 	cmpne	r17,r17,zero
 402b1f8:	1c62b03a 	or	r17,r3,r17
 402b1fc:	0011883a 	mov	r8,zero
 402b200:	0021883a 	mov	r16,zero
 402b204:	003f7106 	br	402afcc <__alt_data_end+0xfffeafcc>
 402b208:	193ff804 	addi	r4,r3,-32
 402b20c:	00800804 	movi	r2,32
 402b210:	4908d83a 	srl	r4,r9,r4
 402b214:	18804526 	beq	r3,r2,402b32c <__adddf3+0x564>
 402b218:	00801004 	movi	r2,64
 402b21c:	10c5c83a 	sub	r2,r2,r3
 402b220:	4886983a 	sll	r3,r9,r2
 402b224:	198cb03a 	or	r6,r3,r6
 402b228:	300cc03a 	cmpne	r6,r6,zero
 402b22c:	218cb03a 	or	r6,r4,r6
 402b230:	0007883a 	mov	r3,zero
 402b234:	003f3b06 	br	402af24 <__alt_data_end+0xfffeaf24>
 402b238:	80002a26 	beq	r16,zero,402b2e4 <__adddf3+0x51c>
 402b23c:	0101ffc4 	movi	r4,2047
 402b240:	11006826 	beq	r2,r4,402b3e4 <__adddf3+0x61c>
 402b244:	00c7c83a 	sub	r3,zero,r3
 402b248:	42002034 	orhi	r8,r8,128
 402b24c:	01000e04 	movi	r4,56
 402b250:	20c07c16 	blt	r4,r3,402b444 <__adddf3+0x67c>
 402b254:	010007c4 	movi	r4,31
 402b258:	20c0da16 	blt	r4,r3,402b5c4 <__adddf3+0x7fc>
 402b25c:	01000804 	movi	r4,32
 402b260:	20c9c83a 	sub	r4,r4,r3
 402b264:	4114983a 	sll	r10,r8,r4
 402b268:	88cad83a 	srl	r5,r17,r3
 402b26c:	8908983a 	sll	r4,r17,r4
 402b270:	40c6d83a 	srl	r3,r8,r3
 402b274:	5162b03a 	or	r17,r10,r5
 402b278:	2008c03a 	cmpne	r4,r4,zero
 402b27c:	8922b03a 	or	r17,r17,r4
 402b280:	3463c83a 	sub	r17,r6,r17
 402b284:	48c7c83a 	sub	r3,r9,r3
 402b288:	344d803a 	cmpltu	r6,r6,r17
 402b28c:	1991c83a 	sub	r8,r3,r6
 402b290:	1021883a 	mov	r16,r2
 402b294:	3825883a 	mov	r18,r7
 402b298:	003f2706 	br	402af38 <__alt_data_end+0xfffeaf38>
 402b29c:	24d0b03a 	or	r8,r4,r19
 402b2a0:	40001b1e 	bne	r8,zero,402b310 <__adddf3+0x548>
 402b2a4:	0005883a 	mov	r2,zero
 402b2a8:	0007883a 	mov	r3,zero
 402b2ac:	0021883a 	mov	r16,zero
 402b2b0:	003f4d06 	br	402afe8 <__alt_data_end+0xfffeafe8>
 402b2b4:	008007c4 	movi	r2,31
 402b2b8:	11003c16 	blt	r2,r4,402b3ac <__adddf3+0x5e4>
 402b2bc:	00800804 	movi	r2,32
 402b2c0:	1105c83a 	sub	r2,r2,r4
 402b2c4:	488e983a 	sll	r7,r9,r2
 402b2c8:	310ad83a 	srl	r5,r6,r4
 402b2cc:	3084983a 	sll	r2,r6,r2
 402b2d0:	4912d83a 	srl	r9,r9,r4
 402b2d4:	394ab03a 	or	r5,r7,r5
 402b2d8:	1004c03a 	cmpne	r2,r2,zero
 402b2dc:	288ab03a 	or	r5,r5,r2
 402b2e0:	003f5306 	br	402b030 <__alt_data_end+0xfffeb030>
 402b2e4:	4448b03a 	or	r4,r8,r17
 402b2e8:	20003e26 	beq	r4,zero,402b3e4 <__adddf3+0x61c>
 402b2ec:	00c6303a 	nor	r3,zero,r3
 402b2f0:	18003a1e 	bne	r3,zero,402b3dc <__adddf3+0x614>
 402b2f4:	3463c83a 	sub	r17,r6,r17
 402b2f8:	4a07c83a 	sub	r3,r9,r8
 402b2fc:	344d803a 	cmpltu	r6,r6,r17
 402b300:	1991c83a 	sub	r8,r3,r6
 402b304:	1021883a 	mov	r16,r2
 402b308:	3825883a 	mov	r18,r7
 402b30c:	003f0a06 	br	402af38 <__alt_data_end+0xfffeaf38>
 402b310:	2023883a 	mov	r17,r4
 402b314:	003f0d06 	br	402af4c <__alt_data_end+0xfffeaf4c>
 402b318:	0081ffc4 	movi	r2,2047
 402b31c:	80bf3f1e 	bne	r16,r2,402b01c <__alt_data_end+0xfffeb01c>
 402b320:	003ec806 	br	402ae44 <__alt_data_end+0xfffeae44>
 402b324:	0005883a 	mov	r2,zero
 402b328:	003fb106 	br	402b1f0 <__alt_data_end+0xfffeb1f0>
 402b32c:	0007883a 	mov	r3,zero
 402b330:	003fbc06 	br	402b224 <__alt_data_end+0xfffeb224>
 402b334:	4444b03a 	or	r2,r8,r17
 402b338:	8000871e 	bne	r16,zero,402b558 <__adddf3+0x790>
 402b33c:	1000ba26 	beq	r2,zero,402b628 <__adddf3+0x860>
 402b340:	4984b03a 	or	r2,r9,r6
 402b344:	103ebf26 	beq	r2,zero,402ae44 <__alt_data_end+0xfffeae44>
 402b348:	8985883a 	add	r2,r17,r6
 402b34c:	4247883a 	add	r3,r8,r9
 402b350:	1451803a 	cmpltu	r8,r2,r17
 402b354:	40d1883a 	add	r8,r8,r3
 402b358:	40c0202c 	andhi	r3,r8,128
 402b35c:	1023883a 	mov	r17,r2
 402b360:	183f1a26 	beq	r3,zero,402afcc <__alt_data_end+0xfffeafcc>
 402b364:	00bfe034 	movhi	r2,65408
 402b368:	10bfffc4 	addi	r2,r2,-1
 402b36c:	2021883a 	mov	r16,r4
 402b370:	4090703a 	and	r8,r8,r2
 402b374:	003eb306 	br	402ae44 <__alt_data_end+0xfffeae44>
 402b378:	4444b03a 	or	r2,r8,r17
 402b37c:	8000291e 	bne	r16,zero,402b424 <__adddf3+0x65c>
 402b380:	10004b1e 	bne	r2,zero,402b4b0 <__adddf3+0x6e8>
 402b384:	4990b03a 	or	r8,r9,r6
 402b388:	40008b26 	beq	r8,zero,402b5b8 <__adddf3+0x7f0>
 402b38c:	4811883a 	mov	r8,r9
 402b390:	3023883a 	mov	r17,r6
 402b394:	3825883a 	mov	r18,r7
 402b398:	003eaa06 	br	402ae44 <__alt_data_end+0xfffeae44>
 402b39c:	1021883a 	mov	r16,r2
 402b3a0:	0011883a 	mov	r8,zero
 402b3a4:	0005883a 	mov	r2,zero
 402b3a8:	003f0f06 	br	402afe8 <__alt_data_end+0xfffeafe8>
 402b3ac:	217ff804 	addi	r5,r4,-32
 402b3b0:	00800804 	movi	r2,32
 402b3b4:	494ad83a 	srl	r5,r9,r5
 402b3b8:	20807d26 	beq	r4,r2,402b5b0 <__adddf3+0x7e8>
 402b3bc:	00801004 	movi	r2,64
 402b3c0:	1109c83a 	sub	r4,r2,r4
 402b3c4:	4912983a 	sll	r9,r9,r4
 402b3c8:	498cb03a 	or	r6,r9,r6
 402b3cc:	300cc03a 	cmpne	r6,r6,zero
 402b3d0:	298ab03a 	or	r5,r5,r6
 402b3d4:	0013883a 	mov	r9,zero
 402b3d8:	003f1506 	br	402b030 <__alt_data_end+0xfffeb030>
 402b3dc:	0101ffc4 	movi	r4,2047
 402b3e0:	113f9a1e 	bne	r2,r4,402b24c <__alt_data_end+0xfffeb24c>
 402b3e4:	4811883a 	mov	r8,r9
 402b3e8:	3023883a 	mov	r17,r6
 402b3ec:	1021883a 	mov	r16,r2
 402b3f0:	3825883a 	mov	r18,r7
 402b3f4:	003e9306 	br	402ae44 <__alt_data_end+0xfffeae44>
 402b3f8:	8000161e 	bne	r16,zero,402b454 <__adddf3+0x68c>
 402b3fc:	444ab03a 	or	r5,r8,r17
 402b400:	28005126 	beq	r5,zero,402b548 <__adddf3+0x780>
 402b404:	0108303a 	nor	r4,zero,r4
 402b408:	20004d1e 	bne	r4,zero,402b540 <__adddf3+0x778>
 402b40c:	89a3883a 	add	r17,r17,r6
 402b410:	4253883a 	add	r9,r8,r9
 402b414:	898d803a 	cmpltu	r6,r17,r6
 402b418:	3251883a 	add	r8,r6,r9
 402b41c:	1021883a 	mov	r16,r2
 402b420:	003f0806 	br	402b044 <__alt_data_end+0xfffeb044>
 402b424:	1000301e 	bne	r2,zero,402b4e8 <__adddf3+0x720>
 402b428:	4984b03a 	or	r2,r9,r6
 402b42c:	10007126 	beq	r2,zero,402b5f4 <__adddf3+0x82c>
 402b430:	4811883a 	mov	r8,r9
 402b434:	3023883a 	mov	r17,r6
 402b438:	3825883a 	mov	r18,r7
 402b43c:	0401ffc4 	movi	r16,2047
 402b440:	003e8006 	br	402ae44 <__alt_data_end+0xfffeae44>
 402b444:	4462b03a 	or	r17,r8,r17
 402b448:	8822c03a 	cmpne	r17,r17,zero
 402b44c:	0007883a 	mov	r3,zero
 402b450:	003f8b06 	br	402b280 <__alt_data_end+0xfffeb280>
 402b454:	0141ffc4 	movi	r5,2047
 402b458:	11403b26 	beq	r2,r5,402b548 <__adddf3+0x780>
 402b45c:	0109c83a 	sub	r4,zero,r4
 402b460:	42002034 	orhi	r8,r8,128
 402b464:	01400e04 	movi	r5,56
 402b468:	29006716 	blt	r5,r4,402b608 <__adddf3+0x840>
 402b46c:	014007c4 	movi	r5,31
 402b470:	29007016 	blt	r5,r4,402b634 <__adddf3+0x86c>
 402b474:	01400804 	movi	r5,32
 402b478:	290bc83a 	sub	r5,r5,r4
 402b47c:	4154983a 	sll	r10,r8,r5
 402b480:	890ed83a 	srl	r7,r17,r4
 402b484:	894a983a 	sll	r5,r17,r5
 402b488:	4108d83a 	srl	r4,r8,r4
 402b48c:	51e2b03a 	or	r17,r10,r7
 402b490:	280ac03a 	cmpne	r5,r5,zero
 402b494:	8962b03a 	or	r17,r17,r5
 402b498:	89a3883a 	add	r17,r17,r6
 402b49c:	2253883a 	add	r9,r4,r9
 402b4a0:	898d803a 	cmpltu	r6,r17,r6
 402b4a4:	3251883a 	add	r8,r6,r9
 402b4a8:	1021883a 	mov	r16,r2
 402b4ac:	003ee506 	br	402b044 <__alt_data_end+0xfffeb044>
 402b4b0:	4984b03a 	or	r2,r9,r6
 402b4b4:	103e6326 	beq	r2,zero,402ae44 <__alt_data_end+0xfffeae44>
 402b4b8:	8987c83a 	sub	r3,r17,r6
 402b4bc:	88c9803a 	cmpltu	r4,r17,r3
 402b4c0:	4245c83a 	sub	r2,r8,r9
 402b4c4:	1105c83a 	sub	r2,r2,r4
 402b4c8:	1100202c 	andhi	r4,r2,128
 402b4cc:	203ebb26 	beq	r4,zero,402afbc <__alt_data_end+0xfffeafbc>
 402b4d0:	3463c83a 	sub	r17,r6,r17
 402b4d4:	4a07c83a 	sub	r3,r9,r8
 402b4d8:	344d803a 	cmpltu	r6,r6,r17
 402b4dc:	1991c83a 	sub	r8,r3,r6
 402b4e0:	3825883a 	mov	r18,r7
 402b4e4:	003e5706 	br	402ae44 <__alt_data_end+0xfffeae44>
 402b4e8:	4984b03a 	or	r2,r9,r6
 402b4ec:	10002e26 	beq	r2,zero,402b5a8 <__adddf3+0x7e0>
 402b4f0:	4004d0fa 	srli	r2,r8,3
 402b4f4:	8822d0fa 	srli	r17,r17,3
 402b4f8:	4010977a 	slli	r8,r8,29
 402b4fc:	10c0022c 	andhi	r3,r2,8
 402b500:	4462b03a 	or	r17,r8,r17
 402b504:	18000826 	beq	r3,zero,402b528 <__adddf3+0x760>
 402b508:	4808d0fa 	srli	r4,r9,3
 402b50c:	20c0022c 	andhi	r3,r4,8
 402b510:	1800051e 	bne	r3,zero,402b528 <__adddf3+0x760>
 402b514:	300cd0fa 	srli	r6,r6,3
 402b518:	4806977a 	slli	r3,r9,29
 402b51c:	2005883a 	mov	r2,r4
 402b520:	3825883a 	mov	r18,r7
 402b524:	19a2b03a 	or	r17,r3,r6
 402b528:	8810d77a 	srli	r8,r17,29
 402b52c:	100490fa 	slli	r2,r2,3
 402b530:	882290fa 	slli	r17,r17,3
 402b534:	0401ffc4 	movi	r16,2047
 402b538:	4090b03a 	or	r8,r8,r2
 402b53c:	003e4106 	br	402ae44 <__alt_data_end+0xfffeae44>
 402b540:	0141ffc4 	movi	r5,2047
 402b544:	117fc71e 	bne	r2,r5,402b464 <__alt_data_end+0xfffeb464>
 402b548:	4811883a 	mov	r8,r9
 402b54c:	3023883a 	mov	r17,r6
 402b550:	1021883a 	mov	r16,r2
 402b554:	003e3b06 	br	402ae44 <__alt_data_end+0xfffeae44>
 402b558:	10002f26 	beq	r2,zero,402b618 <__adddf3+0x850>
 402b55c:	4984b03a 	or	r2,r9,r6
 402b560:	10001126 	beq	r2,zero,402b5a8 <__adddf3+0x7e0>
 402b564:	4004d0fa 	srli	r2,r8,3
 402b568:	8822d0fa 	srli	r17,r17,3
 402b56c:	4010977a 	slli	r8,r8,29
 402b570:	10c0022c 	andhi	r3,r2,8
 402b574:	4462b03a 	or	r17,r8,r17
 402b578:	183feb26 	beq	r3,zero,402b528 <__alt_data_end+0xfffeb528>
 402b57c:	4808d0fa 	srli	r4,r9,3
 402b580:	20c0022c 	andhi	r3,r4,8
 402b584:	183fe81e 	bne	r3,zero,402b528 <__alt_data_end+0xfffeb528>
 402b588:	300cd0fa 	srli	r6,r6,3
 402b58c:	4806977a 	slli	r3,r9,29
 402b590:	2005883a 	mov	r2,r4
 402b594:	19a2b03a 	or	r17,r3,r6
 402b598:	003fe306 	br	402b528 <__alt_data_end+0xfffeb528>
 402b59c:	0011883a 	mov	r8,zero
 402b5a0:	0005883a 	mov	r2,zero
 402b5a4:	003e3f06 	br	402aea4 <__alt_data_end+0xfffeaea4>
 402b5a8:	0401ffc4 	movi	r16,2047
 402b5ac:	003e2506 	br	402ae44 <__alt_data_end+0xfffeae44>
 402b5b0:	0013883a 	mov	r9,zero
 402b5b4:	003f8406 	br	402b3c8 <__alt_data_end+0xfffeb3c8>
 402b5b8:	0005883a 	mov	r2,zero
 402b5bc:	0007883a 	mov	r3,zero
 402b5c0:	003e8906 	br	402afe8 <__alt_data_end+0xfffeafe8>
 402b5c4:	197ff804 	addi	r5,r3,-32
 402b5c8:	01000804 	movi	r4,32
 402b5cc:	414ad83a 	srl	r5,r8,r5
 402b5d0:	19002426 	beq	r3,r4,402b664 <__adddf3+0x89c>
 402b5d4:	01001004 	movi	r4,64
 402b5d8:	20c7c83a 	sub	r3,r4,r3
 402b5dc:	40c6983a 	sll	r3,r8,r3
 402b5e0:	1c46b03a 	or	r3,r3,r17
 402b5e4:	1806c03a 	cmpne	r3,r3,zero
 402b5e8:	28e2b03a 	or	r17,r5,r3
 402b5ec:	0007883a 	mov	r3,zero
 402b5f0:	003f2306 	br	402b280 <__alt_data_end+0xfffeb280>
 402b5f4:	0007883a 	mov	r3,zero
 402b5f8:	5811883a 	mov	r8,r11
 402b5fc:	00bfffc4 	movi	r2,-1
 402b600:	0401ffc4 	movi	r16,2047
 402b604:	003e7806 	br	402afe8 <__alt_data_end+0xfffeafe8>
 402b608:	4462b03a 	or	r17,r8,r17
 402b60c:	8822c03a 	cmpne	r17,r17,zero
 402b610:	0009883a 	mov	r4,zero
 402b614:	003fa006 	br	402b498 <__alt_data_end+0xfffeb498>
 402b618:	4811883a 	mov	r8,r9
 402b61c:	3023883a 	mov	r17,r6
 402b620:	0401ffc4 	movi	r16,2047
 402b624:	003e0706 	br	402ae44 <__alt_data_end+0xfffeae44>
 402b628:	4811883a 	mov	r8,r9
 402b62c:	3023883a 	mov	r17,r6
 402b630:	003e0406 	br	402ae44 <__alt_data_end+0xfffeae44>
 402b634:	21fff804 	addi	r7,r4,-32
 402b638:	01400804 	movi	r5,32
 402b63c:	41ced83a 	srl	r7,r8,r7
 402b640:	21400a26 	beq	r4,r5,402b66c <__adddf3+0x8a4>
 402b644:	01401004 	movi	r5,64
 402b648:	2909c83a 	sub	r4,r5,r4
 402b64c:	4108983a 	sll	r4,r8,r4
 402b650:	2448b03a 	or	r4,r4,r17
 402b654:	2008c03a 	cmpne	r4,r4,zero
 402b658:	3922b03a 	or	r17,r7,r4
 402b65c:	0009883a 	mov	r4,zero
 402b660:	003f8d06 	br	402b498 <__alt_data_end+0xfffeb498>
 402b664:	0007883a 	mov	r3,zero
 402b668:	003fdd06 	br	402b5e0 <__alt_data_end+0xfffeb5e0>
 402b66c:	0009883a 	mov	r4,zero
 402b670:	003ff706 	br	402b650 <__alt_data_end+0xfffeb650>

0402b674 <__divdf3>:
 402b674:	defff204 	addi	sp,sp,-56
 402b678:	dd400915 	stw	r21,36(sp)
 402b67c:	282ad53a 	srli	r21,r5,20
 402b680:	dd000815 	stw	r20,32(sp)
 402b684:	2828d7fa 	srli	r20,r5,31
 402b688:	dc000415 	stw	r16,16(sp)
 402b68c:	04000434 	movhi	r16,16
 402b690:	df000c15 	stw	fp,48(sp)
 402b694:	843fffc4 	addi	r16,r16,-1
 402b698:	dfc00d15 	stw	ra,52(sp)
 402b69c:	ddc00b15 	stw	r23,44(sp)
 402b6a0:	dd800a15 	stw	r22,40(sp)
 402b6a4:	dcc00715 	stw	r19,28(sp)
 402b6a8:	dc800615 	stw	r18,24(sp)
 402b6ac:	dc400515 	stw	r17,20(sp)
 402b6b0:	ad41ffcc 	andi	r21,r21,2047
 402b6b4:	2c20703a 	and	r16,r5,r16
 402b6b8:	a7003fcc 	andi	fp,r20,255
 402b6bc:	a8006126 	beq	r21,zero,402b844 <__divdf3+0x1d0>
 402b6c0:	0081ffc4 	movi	r2,2047
 402b6c4:	2025883a 	mov	r18,r4
 402b6c8:	a8803726 	beq	r21,r2,402b7a8 <__divdf3+0x134>
 402b6cc:	80800434 	orhi	r2,r16,16
 402b6d0:	100490fa 	slli	r2,r2,3
 402b6d4:	2020d77a 	srli	r16,r4,29
 402b6d8:	202490fa 	slli	r18,r4,3
 402b6dc:	ad7f0044 	addi	r21,r21,-1023
 402b6e0:	80a0b03a 	or	r16,r16,r2
 402b6e4:	0027883a 	mov	r19,zero
 402b6e8:	0013883a 	mov	r9,zero
 402b6ec:	3804d53a 	srli	r2,r7,20
 402b6f0:	382cd7fa 	srli	r22,r7,31
 402b6f4:	04400434 	movhi	r17,16
 402b6f8:	8c7fffc4 	addi	r17,r17,-1
 402b6fc:	1081ffcc 	andi	r2,r2,2047
 402b700:	3011883a 	mov	r8,r6
 402b704:	3c62703a 	and	r17,r7,r17
 402b708:	b5c03fcc 	andi	r23,r22,255
 402b70c:	10006c26 	beq	r2,zero,402b8c0 <__divdf3+0x24c>
 402b710:	00c1ffc4 	movi	r3,2047
 402b714:	10c06426 	beq	r2,r3,402b8a8 <__divdf3+0x234>
 402b718:	88c00434 	orhi	r3,r17,16
 402b71c:	180690fa 	slli	r3,r3,3
 402b720:	3022d77a 	srli	r17,r6,29
 402b724:	301090fa 	slli	r8,r6,3
 402b728:	10bf0044 	addi	r2,r2,-1023
 402b72c:	88e2b03a 	or	r17,r17,r3
 402b730:	000f883a 	mov	r7,zero
 402b734:	a58cf03a 	xor	r6,r20,r22
 402b738:	3cc8b03a 	or	r4,r7,r19
 402b73c:	a8abc83a 	sub	r21,r21,r2
 402b740:	008003c4 	movi	r2,15
 402b744:	3007883a 	mov	r3,r6
 402b748:	34c03fcc 	andi	r19,r6,255
 402b74c:	11009036 	bltu	r2,r4,402b990 <__divdf3+0x31c>
 402b750:	200890ba 	slli	r4,r4,2
 402b754:	008100f4 	movhi	r2,1027
 402b758:	10adda04 	addi	r2,r2,-18584
 402b75c:	2089883a 	add	r4,r4,r2
 402b760:	20800017 	ldw	r2,0(r4)
 402b764:	1000683a 	jmp	r2
 402b768:	0402b990 	cmplti	r16,zero,2790
 402b76c:	0402b7e0 	cmpeqi	r16,zero,2783
 402b770:	0402b980 	call	402b98 <__alt_mem_sdram_controller_2+0x402b98>
 402b774:	0402b7d4 	movui	r16,2783
 402b778:	0402b980 	call	402b98 <__alt_mem_sdram_controller_2+0x402b98>
 402b77c:	0402b954 	movui	r16,2789
 402b780:	0402b980 	call	402b98 <__alt_mem_sdram_controller_2+0x402b98>
 402b784:	0402b7d4 	movui	r16,2783
 402b788:	0402b7e0 	cmpeqi	r16,zero,2783
 402b78c:	0402b7e0 	cmpeqi	r16,zero,2783
 402b790:	0402b954 	movui	r16,2789
 402b794:	0402b7d4 	movui	r16,2783
 402b798:	0402b7c4 	movi	r16,2783
 402b79c:	0402b7c4 	movi	r16,2783
 402b7a0:	0402b7c4 	movi	r16,2783
 402b7a4:	0402bc74 	movhi	r16,2801
 402b7a8:	2404b03a 	or	r2,r4,r16
 402b7ac:	1000661e 	bne	r2,zero,402b948 <__divdf3+0x2d4>
 402b7b0:	04c00204 	movi	r19,8
 402b7b4:	0021883a 	mov	r16,zero
 402b7b8:	0025883a 	mov	r18,zero
 402b7bc:	02400084 	movi	r9,2
 402b7c0:	003fca06 	br	402b6ec <__alt_data_end+0xfffeb6ec>
 402b7c4:	8023883a 	mov	r17,r16
 402b7c8:	9011883a 	mov	r8,r18
 402b7cc:	e02f883a 	mov	r23,fp
 402b7d0:	480f883a 	mov	r7,r9
 402b7d4:	00800084 	movi	r2,2
 402b7d8:	3881311e 	bne	r7,r2,402bca0 <__divdf3+0x62c>
 402b7dc:	b827883a 	mov	r19,r23
 402b7e0:	98c0004c 	andi	r3,r19,1
 402b7e4:	0081ffc4 	movi	r2,2047
 402b7e8:	000b883a 	mov	r5,zero
 402b7ec:	0025883a 	mov	r18,zero
 402b7f0:	1004953a 	slli	r2,r2,20
 402b7f4:	18c03fcc 	andi	r3,r3,255
 402b7f8:	04400434 	movhi	r17,16
 402b7fc:	8c7fffc4 	addi	r17,r17,-1
 402b800:	180697fa 	slli	r3,r3,31
 402b804:	2c4a703a 	and	r5,r5,r17
 402b808:	288ab03a 	or	r5,r5,r2
 402b80c:	28c6b03a 	or	r3,r5,r3
 402b810:	9005883a 	mov	r2,r18
 402b814:	dfc00d17 	ldw	ra,52(sp)
 402b818:	df000c17 	ldw	fp,48(sp)
 402b81c:	ddc00b17 	ldw	r23,44(sp)
 402b820:	dd800a17 	ldw	r22,40(sp)
 402b824:	dd400917 	ldw	r21,36(sp)
 402b828:	dd000817 	ldw	r20,32(sp)
 402b82c:	dcc00717 	ldw	r19,28(sp)
 402b830:	dc800617 	ldw	r18,24(sp)
 402b834:	dc400517 	ldw	r17,20(sp)
 402b838:	dc000417 	ldw	r16,16(sp)
 402b83c:	dec00e04 	addi	sp,sp,56
 402b840:	f800283a 	ret
 402b844:	2404b03a 	or	r2,r4,r16
 402b848:	2027883a 	mov	r19,r4
 402b84c:	10003926 	beq	r2,zero,402b934 <__divdf3+0x2c0>
 402b850:	80012e26 	beq	r16,zero,402bd0c <__divdf3+0x698>
 402b854:	8009883a 	mov	r4,r16
 402b858:	d9800315 	stw	r6,12(sp)
 402b85c:	d9c00215 	stw	r7,8(sp)
 402b860:	402d3cc0 	call	402d3cc <__clzsi2>
 402b864:	d9800317 	ldw	r6,12(sp)
 402b868:	d9c00217 	ldw	r7,8(sp)
 402b86c:	113ffd44 	addi	r4,r2,-11
 402b870:	00c00704 	movi	r3,28
 402b874:	19012116 	blt	r3,r4,402bcfc <__divdf3+0x688>
 402b878:	00c00744 	movi	r3,29
 402b87c:	147ffe04 	addi	r17,r2,-8
 402b880:	1907c83a 	sub	r3,r3,r4
 402b884:	8460983a 	sll	r16,r16,r17
 402b888:	98c6d83a 	srl	r3,r19,r3
 402b88c:	9c64983a 	sll	r18,r19,r17
 402b890:	1c20b03a 	or	r16,r3,r16
 402b894:	1080fcc4 	addi	r2,r2,1011
 402b898:	00abc83a 	sub	r21,zero,r2
 402b89c:	0027883a 	mov	r19,zero
 402b8a0:	0013883a 	mov	r9,zero
 402b8a4:	003f9106 	br	402b6ec <__alt_data_end+0xfffeb6ec>
 402b8a8:	3446b03a 	or	r3,r6,r17
 402b8ac:	18001f1e 	bne	r3,zero,402b92c <__divdf3+0x2b8>
 402b8b0:	0023883a 	mov	r17,zero
 402b8b4:	0011883a 	mov	r8,zero
 402b8b8:	01c00084 	movi	r7,2
 402b8bc:	003f9d06 	br	402b734 <__alt_data_end+0xfffeb734>
 402b8c0:	3446b03a 	or	r3,r6,r17
 402b8c4:	18001526 	beq	r3,zero,402b91c <__divdf3+0x2a8>
 402b8c8:	88011b26 	beq	r17,zero,402bd38 <__divdf3+0x6c4>
 402b8cc:	8809883a 	mov	r4,r17
 402b8d0:	d9800315 	stw	r6,12(sp)
 402b8d4:	da400115 	stw	r9,4(sp)
 402b8d8:	402d3cc0 	call	402d3cc <__clzsi2>
 402b8dc:	d9800317 	ldw	r6,12(sp)
 402b8e0:	da400117 	ldw	r9,4(sp)
 402b8e4:	113ffd44 	addi	r4,r2,-11
 402b8e8:	00c00704 	movi	r3,28
 402b8ec:	19010e16 	blt	r3,r4,402bd28 <__divdf3+0x6b4>
 402b8f0:	00c00744 	movi	r3,29
 402b8f4:	123ffe04 	addi	r8,r2,-8
 402b8f8:	1907c83a 	sub	r3,r3,r4
 402b8fc:	8a22983a 	sll	r17,r17,r8
 402b900:	30c6d83a 	srl	r3,r6,r3
 402b904:	3210983a 	sll	r8,r6,r8
 402b908:	1c62b03a 	or	r17,r3,r17
 402b90c:	1080fcc4 	addi	r2,r2,1011
 402b910:	0085c83a 	sub	r2,zero,r2
 402b914:	000f883a 	mov	r7,zero
 402b918:	003f8606 	br	402b734 <__alt_data_end+0xfffeb734>
 402b91c:	0023883a 	mov	r17,zero
 402b920:	0011883a 	mov	r8,zero
 402b924:	01c00044 	movi	r7,1
 402b928:	003f8206 	br	402b734 <__alt_data_end+0xfffeb734>
 402b92c:	01c000c4 	movi	r7,3
 402b930:	003f8006 	br	402b734 <__alt_data_end+0xfffeb734>
 402b934:	04c00104 	movi	r19,4
 402b938:	0021883a 	mov	r16,zero
 402b93c:	0025883a 	mov	r18,zero
 402b940:	02400044 	movi	r9,1
 402b944:	003f6906 	br	402b6ec <__alt_data_end+0xfffeb6ec>
 402b948:	04c00304 	movi	r19,12
 402b94c:	024000c4 	movi	r9,3
 402b950:	003f6606 	br	402b6ec <__alt_data_end+0xfffeb6ec>
 402b954:	01400434 	movhi	r5,16
 402b958:	0007883a 	mov	r3,zero
 402b95c:	297fffc4 	addi	r5,r5,-1
 402b960:	04bfffc4 	movi	r18,-1
 402b964:	0081ffc4 	movi	r2,2047
 402b968:	003fa106 	br	402b7f0 <__alt_data_end+0xfffeb7f0>
 402b96c:	00c00044 	movi	r3,1
 402b970:	1887c83a 	sub	r3,r3,r2
 402b974:	01000e04 	movi	r4,56
 402b978:	20c1210e 	bge	r4,r3,402be00 <__divdf3+0x78c>
 402b97c:	98c0004c 	andi	r3,r19,1
 402b980:	0005883a 	mov	r2,zero
 402b984:	000b883a 	mov	r5,zero
 402b988:	0025883a 	mov	r18,zero
 402b98c:	003f9806 	br	402b7f0 <__alt_data_end+0xfffeb7f0>
 402b990:	8c00fd36 	bltu	r17,r16,402bd88 <__divdf3+0x714>
 402b994:	8440fb26 	beq	r16,r17,402bd84 <__divdf3+0x710>
 402b998:	8007883a 	mov	r3,r16
 402b99c:	ad7fffc4 	addi	r21,r21,-1
 402b9a0:	0021883a 	mov	r16,zero
 402b9a4:	4004d63a 	srli	r2,r8,24
 402b9a8:	8822923a 	slli	r17,r17,8
 402b9ac:	1809883a 	mov	r4,r3
 402b9b0:	402c923a 	slli	r22,r8,8
 402b9b4:	88b8b03a 	or	fp,r17,r2
 402b9b8:	e028d43a 	srli	r20,fp,16
 402b9bc:	d8c00015 	stw	r3,0(sp)
 402b9c0:	e5ffffcc 	andi	r23,fp,65535
 402b9c4:	a00b883a 	mov	r5,r20
 402b9c8:	402ad0c0 	call	402ad0c <__udivsi3>
 402b9cc:	d8c00017 	ldw	r3,0(sp)
 402b9d0:	a00b883a 	mov	r5,r20
 402b9d4:	d8800315 	stw	r2,12(sp)
 402b9d8:	1809883a 	mov	r4,r3
 402b9dc:	402ad700 	call	402ad70 <__umodsi3>
 402b9e0:	d9800317 	ldw	r6,12(sp)
 402b9e4:	1006943a 	slli	r3,r2,16
 402b9e8:	9004d43a 	srli	r2,r18,16
 402b9ec:	b9a3383a 	mul	r17,r23,r6
 402b9f0:	10c4b03a 	or	r2,r2,r3
 402b9f4:	1440062e 	bgeu	r2,r17,402ba10 <__divdf3+0x39c>
 402b9f8:	1705883a 	add	r2,r2,fp
 402b9fc:	30ffffc4 	addi	r3,r6,-1
 402ba00:	1700ee36 	bltu	r2,fp,402bdbc <__divdf3+0x748>
 402ba04:	1440ed2e 	bgeu	r2,r17,402bdbc <__divdf3+0x748>
 402ba08:	31bfff84 	addi	r6,r6,-2
 402ba0c:	1705883a 	add	r2,r2,fp
 402ba10:	1463c83a 	sub	r17,r2,r17
 402ba14:	a00b883a 	mov	r5,r20
 402ba18:	8809883a 	mov	r4,r17
 402ba1c:	d9800315 	stw	r6,12(sp)
 402ba20:	402ad0c0 	call	402ad0c <__udivsi3>
 402ba24:	a00b883a 	mov	r5,r20
 402ba28:	8809883a 	mov	r4,r17
 402ba2c:	d8800215 	stw	r2,8(sp)
 402ba30:	402ad700 	call	402ad70 <__umodsi3>
 402ba34:	d9c00217 	ldw	r7,8(sp)
 402ba38:	1004943a 	slli	r2,r2,16
 402ba3c:	94bfffcc 	andi	r18,r18,65535
 402ba40:	b9d1383a 	mul	r8,r23,r7
 402ba44:	90a4b03a 	or	r18,r18,r2
 402ba48:	d9800317 	ldw	r6,12(sp)
 402ba4c:	9200062e 	bgeu	r18,r8,402ba68 <__divdf3+0x3f4>
 402ba50:	9725883a 	add	r18,r18,fp
 402ba54:	38bfffc4 	addi	r2,r7,-1
 402ba58:	9700d636 	bltu	r18,fp,402bdb4 <__divdf3+0x740>
 402ba5c:	9200d52e 	bgeu	r18,r8,402bdb4 <__divdf3+0x740>
 402ba60:	39ffff84 	addi	r7,r7,-2
 402ba64:	9725883a 	add	r18,r18,fp
 402ba68:	3004943a 	slli	r2,r6,16
 402ba6c:	b012d43a 	srli	r9,r22,16
 402ba70:	b1bfffcc 	andi	r6,r22,65535
 402ba74:	11e2b03a 	or	r17,r2,r7
 402ba78:	8806d43a 	srli	r3,r17,16
 402ba7c:	893fffcc 	andi	r4,r17,65535
 402ba80:	218b383a 	mul	r5,r4,r6
 402ba84:	30c5383a 	mul	r2,r6,r3
 402ba88:	2249383a 	mul	r4,r4,r9
 402ba8c:	280ed43a 	srli	r7,r5,16
 402ba90:	9225c83a 	sub	r18,r18,r8
 402ba94:	2089883a 	add	r4,r4,r2
 402ba98:	3909883a 	add	r4,r7,r4
 402ba9c:	1a47383a 	mul	r3,r3,r9
 402baa0:	2080022e 	bgeu	r4,r2,402baac <__divdf3+0x438>
 402baa4:	00800074 	movhi	r2,1
 402baa8:	1887883a 	add	r3,r3,r2
 402baac:	2004d43a 	srli	r2,r4,16
 402bab0:	2008943a 	slli	r4,r4,16
 402bab4:	297fffcc 	andi	r5,r5,65535
 402bab8:	10c7883a 	add	r3,r2,r3
 402babc:	2149883a 	add	r4,r4,r5
 402bac0:	90c0a536 	bltu	r18,r3,402bd58 <__divdf3+0x6e4>
 402bac4:	90c0bf26 	beq	r18,r3,402bdc4 <__divdf3+0x750>
 402bac8:	90c7c83a 	sub	r3,r18,r3
 402bacc:	810fc83a 	sub	r7,r16,r4
 402bad0:	81e5803a 	cmpltu	r18,r16,r7
 402bad4:	1ca5c83a 	sub	r18,r3,r18
 402bad8:	e480c126 	beq	fp,r18,402bde0 <__divdf3+0x76c>
 402badc:	a00b883a 	mov	r5,r20
 402bae0:	9009883a 	mov	r4,r18
 402bae4:	d9800315 	stw	r6,12(sp)
 402bae8:	d9c00215 	stw	r7,8(sp)
 402baec:	da400115 	stw	r9,4(sp)
 402baf0:	402ad0c0 	call	402ad0c <__udivsi3>
 402baf4:	a00b883a 	mov	r5,r20
 402baf8:	9009883a 	mov	r4,r18
 402bafc:	d8800015 	stw	r2,0(sp)
 402bb00:	402ad700 	call	402ad70 <__umodsi3>
 402bb04:	d9c00217 	ldw	r7,8(sp)
 402bb08:	da000017 	ldw	r8,0(sp)
 402bb0c:	1006943a 	slli	r3,r2,16
 402bb10:	3804d43a 	srli	r2,r7,16
 402bb14:	ba21383a 	mul	r16,r23,r8
 402bb18:	d9800317 	ldw	r6,12(sp)
 402bb1c:	10c4b03a 	or	r2,r2,r3
 402bb20:	da400117 	ldw	r9,4(sp)
 402bb24:	1400062e 	bgeu	r2,r16,402bb40 <__divdf3+0x4cc>
 402bb28:	1705883a 	add	r2,r2,fp
 402bb2c:	40ffffc4 	addi	r3,r8,-1
 402bb30:	1700ad36 	bltu	r2,fp,402bde8 <__divdf3+0x774>
 402bb34:	1400ac2e 	bgeu	r2,r16,402bde8 <__divdf3+0x774>
 402bb38:	423fff84 	addi	r8,r8,-2
 402bb3c:	1705883a 	add	r2,r2,fp
 402bb40:	1421c83a 	sub	r16,r2,r16
 402bb44:	a00b883a 	mov	r5,r20
 402bb48:	8009883a 	mov	r4,r16
 402bb4c:	d9800315 	stw	r6,12(sp)
 402bb50:	d9c00215 	stw	r7,8(sp)
 402bb54:	da000015 	stw	r8,0(sp)
 402bb58:	da400115 	stw	r9,4(sp)
 402bb5c:	402ad0c0 	call	402ad0c <__udivsi3>
 402bb60:	8009883a 	mov	r4,r16
 402bb64:	a00b883a 	mov	r5,r20
 402bb68:	1025883a 	mov	r18,r2
 402bb6c:	402ad700 	call	402ad70 <__umodsi3>
 402bb70:	d9c00217 	ldw	r7,8(sp)
 402bb74:	1004943a 	slli	r2,r2,16
 402bb78:	bcaf383a 	mul	r23,r23,r18
 402bb7c:	393fffcc 	andi	r4,r7,65535
 402bb80:	2088b03a 	or	r4,r4,r2
 402bb84:	d9800317 	ldw	r6,12(sp)
 402bb88:	da000017 	ldw	r8,0(sp)
 402bb8c:	da400117 	ldw	r9,4(sp)
 402bb90:	25c0062e 	bgeu	r4,r23,402bbac <__divdf3+0x538>
 402bb94:	2709883a 	add	r4,r4,fp
 402bb98:	90bfffc4 	addi	r2,r18,-1
 402bb9c:	27009436 	bltu	r4,fp,402bdf0 <__divdf3+0x77c>
 402bba0:	25c0932e 	bgeu	r4,r23,402bdf0 <__divdf3+0x77c>
 402bba4:	94bfff84 	addi	r18,r18,-2
 402bba8:	2709883a 	add	r4,r4,fp
 402bbac:	4004943a 	slli	r2,r8,16
 402bbb0:	25efc83a 	sub	r23,r4,r23
 402bbb4:	1490b03a 	or	r8,r2,r18
 402bbb8:	4008d43a 	srli	r4,r8,16
 402bbbc:	40ffffcc 	andi	r3,r8,65535
 402bbc0:	30c5383a 	mul	r2,r6,r3
 402bbc4:	1a47383a 	mul	r3,r3,r9
 402bbc8:	310d383a 	mul	r6,r6,r4
 402bbcc:	100ad43a 	srli	r5,r2,16
 402bbd0:	4913383a 	mul	r9,r9,r4
 402bbd4:	1987883a 	add	r3,r3,r6
 402bbd8:	28c7883a 	add	r3,r5,r3
 402bbdc:	1980022e 	bgeu	r3,r6,402bbe8 <__divdf3+0x574>
 402bbe0:	01000074 	movhi	r4,1
 402bbe4:	4913883a 	add	r9,r9,r4
 402bbe8:	1808d43a 	srli	r4,r3,16
 402bbec:	1806943a 	slli	r3,r3,16
 402bbf0:	10bfffcc 	andi	r2,r2,65535
 402bbf4:	2253883a 	add	r9,r4,r9
 402bbf8:	1887883a 	add	r3,r3,r2
 402bbfc:	ba403836 	bltu	r23,r9,402bce0 <__divdf3+0x66c>
 402bc00:	ba403626 	beq	r23,r9,402bcdc <__divdf3+0x668>
 402bc04:	42000054 	ori	r8,r8,1
 402bc08:	a880ffc4 	addi	r2,r21,1023
 402bc0c:	00bf570e 	bge	zero,r2,402b96c <__alt_data_end+0xfffeb96c>
 402bc10:	40c001cc 	andi	r3,r8,7
 402bc14:	18000726 	beq	r3,zero,402bc34 <__divdf3+0x5c0>
 402bc18:	40c003cc 	andi	r3,r8,15
 402bc1c:	01000104 	movi	r4,4
 402bc20:	19000426 	beq	r3,r4,402bc34 <__divdf3+0x5c0>
 402bc24:	4107883a 	add	r3,r8,r4
 402bc28:	1a11803a 	cmpltu	r8,r3,r8
 402bc2c:	8a23883a 	add	r17,r17,r8
 402bc30:	1811883a 	mov	r8,r3
 402bc34:	88c0402c 	andhi	r3,r17,256
 402bc38:	18000426 	beq	r3,zero,402bc4c <__divdf3+0x5d8>
 402bc3c:	00ffc034 	movhi	r3,65280
 402bc40:	18ffffc4 	addi	r3,r3,-1
 402bc44:	a8810004 	addi	r2,r21,1024
 402bc48:	88e2703a 	and	r17,r17,r3
 402bc4c:	00c1ff84 	movi	r3,2046
 402bc50:	18bee316 	blt	r3,r2,402b7e0 <__alt_data_end+0xfffeb7e0>
 402bc54:	8824977a 	slli	r18,r17,29
 402bc58:	4010d0fa 	srli	r8,r8,3
 402bc5c:	8822927a 	slli	r17,r17,9
 402bc60:	1081ffcc 	andi	r2,r2,2047
 402bc64:	9224b03a 	or	r18,r18,r8
 402bc68:	880ad33a 	srli	r5,r17,12
 402bc6c:	98c0004c 	andi	r3,r19,1
 402bc70:	003edf06 	br	402b7f0 <__alt_data_end+0xfffeb7f0>
 402bc74:	8080022c 	andhi	r2,r16,8
 402bc78:	10001226 	beq	r2,zero,402bcc4 <__divdf3+0x650>
 402bc7c:	8880022c 	andhi	r2,r17,8
 402bc80:	1000101e 	bne	r2,zero,402bcc4 <__divdf3+0x650>
 402bc84:	00800434 	movhi	r2,16
 402bc88:	89400234 	orhi	r5,r17,8
 402bc8c:	10bfffc4 	addi	r2,r2,-1
 402bc90:	b007883a 	mov	r3,r22
 402bc94:	288a703a 	and	r5,r5,r2
 402bc98:	4025883a 	mov	r18,r8
 402bc9c:	003f3106 	br	402b964 <__alt_data_end+0xfffeb964>
 402bca0:	008000c4 	movi	r2,3
 402bca4:	3880a626 	beq	r7,r2,402bf40 <__divdf3+0x8cc>
 402bca8:	00800044 	movi	r2,1
 402bcac:	3880521e 	bne	r7,r2,402bdf8 <__divdf3+0x784>
 402bcb0:	b807883a 	mov	r3,r23
 402bcb4:	0005883a 	mov	r2,zero
 402bcb8:	000b883a 	mov	r5,zero
 402bcbc:	0025883a 	mov	r18,zero
 402bcc0:	003ecb06 	br	402b7f0 <__alt_data_end+0xfffeb7f0>
 402bcc4:	00800434 	movhi	r2,16
 402bcc8:	81400234 	orhi	r5,r16,8
 402bccc:	10bfffc4 	addi	r2,r2,-1
 402bcd0:	a007883a 	mov	r3,r20
 402bcd4:	288a703a 	and	r5,r5,r2
 402bcd8:	003f2206 	br	402b964 <__alt_data_end+0xfffeb964>
 402bcdc:	183fca26 	beq	r3,zero,402bc08 <__alt_data_end+0xfffebc08>
 402bce0:	e5ef883a 	add	r23,fp,r23
 402bce4:	40bfffc4 	addi	r2,r8,-1
 402bce8:	bf00392e 	bgeu	r23,fp,402bdd0 <__divdf3+0x75c>
 402bcec:	1011883a 	mov	r8,r2
 402bcf0:	ba7fc41e 	bne	r23,r9,402bc04 <__alt_data_end+0xfffebc04>
 402bcf4:	b0ffc31e 	bne	r22,r3,402bc04 <__alt_data_end+0xfffebc04>
 402bcf8:	003fc306 	br	402bc08 <__alt_data_end+0xfffebc08>
 402bcfc:	143ff604 	addi	r16,r2,-40
 402bd00:	9c20983a 	sll	r16,r19,r16
 402bd04:	0025883a 	mov	r18,zero
 402bd08:	003ee206 	br	402b894 <__alt_data_end+0xfffeb894>
 402bd0c:	d9800315 	stw	r6,12(sp)
 402bd10:	d9c00215 	stw	r7,8(sp)
 402bd14:	402d3cc0 	call	402d3cc <__clzsi2>
 402bd18:	10800804 	addi	r2,r2,32
 402bd1c:	d9c00217 	ldw	r7,8(sp)
 402bd20:	d9800317 	ldw	r6,12(sp)
 402bd24:	003ed106 	br	402b86c <__alt_data_end+0xfffeb86c>
 402bd28:	147ff604 	addi	r17,r2,-40
 402bd2c:	3462983a 	sll	r17,r6,r17
 402bd30:	0011883a 	mov	r8,zero
 402bd34:	003ef506 	br	402b90c <__alt_data_end+0xfffeb90c>
 402bd38:	3009883a 	mov	r4,r6
 402bd3c:	d9800315 	stw	r6,12(sp)
 402bd40:	da400115 	stw	r9,4(sp)
 402bd44:	402d3cc0 	call	402d3cc <__clzsi2>
 402bd48:	10800804 	addi	r2,r2,32
 402bd4c:	da400117 	ldw	r9,4(sp)
 402bd50:	d9800317 	ldw	r6,12(sp)
 402bd54:	003ee306 	br	402b8e4 <__alt_data_end+0xfffeb8e4>
 402bd58:	85a1883a 	add	r16,r16,r22
 402bd5c:	8585803a 	cmpltu	r2,r16,r22
 402bd60:	1705883a 	add	r2,r2,fp
 402bd64:	14a5883a 	add	r18,r2,r18
 402bd68:	88bfffc4 	addi	r2,r17,-1
 402bd6c:	e4800c2e 	bgeu	fp,r18,402bda0 <__divdf3+0x72c>
 402bd70:	90c03e36 	bltu	r18,r3,402be6c <__divdf3+0x7f8>
 402bd74:	1c806926 	beq	r3,r18,402bf1c <__divdf3+0x8a8>
 402bd78:	90c7c83a 	sub	r3,r18,r3
 402bd7c:	1023883a 	mov	r17,r2
 402bd80:	003f5206 	br	402bacc <__alt_data_end+0xfffebacc>
 402bd84:	923f0436 	bltu	r18,r8,402b998 <__alt_data_end+0xfffeb998>
 402bd88:	800897fa 	slli	r4,r16,31
 402bd8c:	9004d07a 	srli	r2,r18,1
 402bd90:	8006d07a 	srli	r3,r16,1
 402bd94:	902097fa 	slli	r16,r18,31
 402bd98:	20a4b03a 	or	r18,r4,r2
 402bd9c:	003f0106 	br	402b9a4 <__alt_data_end+0xfffeb9a4>
 402bda0:	e4bff51e 	bne	fp,r18,402bd78 <__alt_data_end+0xfffebd78>
 402bda4:	85bff22e 	bgeu	r16,r22,402bd70 <__alt_data_end+0xfffebd70>
 402bda8:	e0c7c83a 	sub	r3,fp,r3
 402bdac:	1023883a 	mov	r17,r2
 402bdb0:	003f4606 	br	402bacc <__alt_data_end+0xfffebacc>
 402bdb4:	100f883a 	mov	r7,r2
 402bdb8:	003f2b06 	br	402ba68 <__alt_data_end+0xfffeba68>
 402bdbc:	180d883a 	mov	r6,r3
 402bdc0:	003f1306 	br	402ba10 <__alt_data_end+0xfffeba10>
 402bdc4:	813fe436 	bltu	r16,r4,402bd58 <__alt_data_end+0xfffebd58>
 402bdc8:	0007883a 	mov	r3,zero
 402bdcc:	003f3f06 	br	402bacc <__alt_data_end+0xfffebacc>
 402bdd0:	ba402c36 	bltu	r23,r9,402be84 <__divdf3+0x810>
 402bdd4:	4dc05426 	beq	r9,r23,402bf28 <__divdf3+0x8b4>
 402bdd8:	1011883a 	mov	r8,r2
 402bddc:	003f8906 	br	402bc04 <__alt_data_end+0xfffebc04>
 402bde0:	023fffc4 	movi	r8,-1
 402bde4:	003f8806 	br	402bc08 <__alt_data_end+0xfffebc08>
 402bde8:	1811883a 	mov	r8,r3
 402bdec:	003f5406 	br	402bb40 <__alt_data_end+0xfffebb40>
 402bdf0:	1025883a 	mov	r18,r2
 402bdf4:	003f6d06 	br	402bbac <__alt_data_end+0xfffebbac>
 402bdf8:	b827883a 	mov	r19,r23
 402bdfc:	003f8206 	br	402bc08 <__alt_data_end+0xfffebc08>
 402be00:	010007c4 	movi	r4,31
 402be04:	20c02616 	blt	r4,r3,402bea0 <__divdf3+0x82c>
 402be08:	00800804 	movi	r2,32
 402be0c:	10c5c83a 	sub	r2,r2,r3
 402be10:	888a983a 	sll	r5,r17,r2
 402be14:	40c8d83a 	srl	r4,r8,r3
 402be18:	4084983a 	sll	r2,r8,r2
 402be1c:	88e2d83a 	srl	r17,r17,r3
 402be20:	2906b03a 	or	r3,r5,r4
 402be24:	1004c03a 	cmpne	r2,r2,zero
 402be28:	1886b03a 	or	r3,r3,r2
 402be2c:	188001cc 	andi	r2,r3,7
 402be30:	10000726 	beq	r2,zero,402be50 <__divdf3+0x7dc>
 402be34:	188003cc 	andi	r2,r3,15
 402be38:	01000104 	movi	r4,4
 402be3c:	11000426 	beq	r2,r4,402be50 <__divdf3+0x7dc>
 402be40:	1805883a 	mov	r2,r3
 402be44:	10c00104 	addi	r3,r2,4
 402be48:	1885803a 	cmpltu	r2,r3,r2
 402be4c:	88a3883a 	add	r17,r17,r2
 402be50:	8880202c 	andhi	r2,r17,128
 402be54:	10002726 	beq	r2,zero,402bef4 <__divdf3+0x880>
 402be58:	98c0004c 	andi	r3,r19,1
 402be5c:	00800044 	movi	r2,1
 402be60:	000b883a 	mov	r5,zero
 402be64:	0025883a 	mov	r18,zero
 402be68:	003e6106 	br	402b7f0 <__alt_data_end+0xfffeb7f0>
 402be6c:	85a1883a 	add	r16,r16,r22
 402be70:	8585803a 	cmpltu	r2,r16,r22
 402be74:	1705883a 	add	r2,r2,fp
 402be78:	14a5883a 	add	r18,r2,r18
 402be7c:	8c7fff84 	addi	r17,r17,-2
 402be80:	003f1106 	br	402bac8 <__alt_data_end+0xfffebac8>
 402be84:	b589883a 	add	r4,r22,r22
 402be88:	25ad803a 	cmpltu	r22,r4,r22
 402be8c:	b739883a 	add	fp,r22,fp
 402be90:	40bfff84 	addi	r2,r8,-2
 402be94:	bf2f883a 	add	r23,r23,fp
 402be98:	202d883a 	mov	r22,r4
 402be9c:	003f9306 	br	402bcec <__alt_data_end+0xfffebcec>
 402bea0:	013ff844 	movi	r4,-31
 402bea4:	2085c83a 	sub	r2,r4,r2
 402bea8:	8888d83a 	srl	r4,r17,r2
 402beac:	00800804 	movi	r2,32
 402beb0:	18802126 	beq	r3,r2,402bf38 <__divdf3+0x8c4>
 402beb4:	00801004 	movi	r2,64
 402beb8:	10c5c83a 	sub	r2,r2,r3
 402bebc:	8884983a 	sll	r2,r17,r2
 402bec0:	1204b03a 	or	r2,r2,r8
 402bec4:	1004c03a 	cmpne	r2,r2,zero
 402bec8:	2084b03a 	or	r2,r4,r2
 402becc:	144001cc 	andi	r17,r2,7
 402bed0:	88000d1e 	bne	r17,zero,402bf08 <__divdf3+0x894>
 402bed4:	000b883a 	mov	r5,zero
 402bed8:	1024d0fa 	srli	r18,r2,3
 402bedc:	98c0004c 	andi	r3,r19,1
 402bee0:	0005883a 	mov	r2,zero
 402bee4:	9464b03a 	or	r18,r18,r17
 402bee8:	003e4106 	br	402b7f0 <__alt_data_end+0xfffeb7f0>
 402beec:	1007883a 	mov	r3,r2
 402bef0:	0023883a 	mov	r17,zero
 402bef4:	880a927a 	slli	r5,r17,9
 402bef8:	1805883a 	mov	r2,r3
 402befc:	8822977a 	slli	r17,r17,29
 402bf00:	280ad33a 	srli	r5,r5,12
 402bf04:	003ff406 	br	402bed8 <__alt_data_end+0xfffebed8>
 402bf08:	10c003cc 	andi	r3,r2,15
 402bf0c:	01000104 	movi	r4,4
 402bf10:	193ff626 	beq	r3,r4,402beec <__alt_data_end+0xfffebeec>
 402bf14:	0023883a 	mov	r17,zero
 402bf18:	003fca06 	br	402be44 <__alt_data_end+0xfffebe44>
 402bf1c:	813fd336 	bltu	r16,r4,402be6c <__alt_data_end+0xfffebe6c>
 402bf20:	1023883a 	mov	r17,r2
 402bf24:	003fa806 	br	402bdc8 <__alt_data_end+0xfffebdc8>
 402bf28:	b0ffd636 	bltu	r22,r3,402be84 <__alt_data_end+0xfffebe84>
 402bf2c:	1011883a 	mov	r8,r2
 402bf30:	b0ff341e 	bne	r22,r3,402bc04 <__alt_data_end+0xfffebc04>
 402bf34:	003f3406 	br	402bc08 <__alt_data_end+0xfffebc08>
 402bf38:	0005883a 	mov	r2,zero
 402bf3c:	003fe006 	br	402bec0 <__alt_data_end+0xfffebec0>
 402bf40:	00800434 	movhi	r2,16
 402bf44:	89400234 	orhi	r5,r17,8
 402bf48:	10bfffc4 	addi	r2,r2,-1
 402bf4c:	b807883a 	mov	r3,r23
 402bf50:	288a703a 	and	r5,r5,r2
 402bf54:	4025883a 	mov	r18,r8
 402bf58:	003e8206 	br	402b964 <__alt_data_end+0xfffeb964>

0402bf5c <__eqdf2>:
 402bf5c:	2804d53a 	srli	r2,r5,20
 402bf60:	3806d53a 	srli	r3,r7,20
 402bf64:	02000434 	movhi	r8,16
 402bf68:	423fffc4 	addi	r8,r8,-1
 402bf6c:	1081ffcc 	andi	r2,r2,2047
 402bf70:	0281ffc4 	movi	r10,2047
 402bf74:	2a12703a 	and	r9,r5,r8
 402bf78:	18c1ffcc 	andi	r3,r3,2047
 402bf7c:	3a10703a 	and	r8,r7,r8
 402bf80:	280ad7fa 	srli	r5,r5,31
 402bf84:	380ed7fa 	srli	r7,r7,31
 402bf88:	12801026 	beq	r2,r10,402bfcc <__eqdf2+0x70>
 402bf8c:	0281ffc4 	movi	r10,2047
 402bf90:	1a800a26 	beq	r3,r10,402bfbc <__eqdf2+0x60>
 402bf94:	10c00226 	beq	r2,r3,402bfa0 <__eqdf2+0x44>
 402bf98:	00800044 	movi	r2,1
 402bf9c:	f800283a 	ret
 402bfa0:	4a3ffd1e 	bne	r9,r8,402bf98 <__alt_data_end+0xfffebf98>
 402bfa4:	21bffc1e 	bne	r4,r6,402bf98 <__alt_data_end+0xfffebf98>
 402bfa8:	29c00c26 	beq	r5,r7,402bfdc <__eqdf2+0x80>
 402bfac:	103ffa1e 	bne	r2,zero,402bf98 <__alt_data_end+0xfffebf98>
 402bfb0:	2244b03a 	or	r2,r4,r9
 402bfb4:	1004c03a 	cmpne	r2,r2,zero
 402bfb8:	f800283a 	ret
 402bfbc:	3214b03a 	or	r10,r6,r8
 402bfc0:	503ff426 	beq	r10,zero,402bf94 <__alt_data_end+0xfffebf94>
 402bfc4:	00800044 	movi	r2,1
 402bfc8:	f800283a 	ret
 402bfcc:	2254b03a 	or	r10,r4,r9
 402bfd0:	503fee26 	beq	r10,zero,402bf8c <__alt_data_end+0xfffebf8c>
 402bfd4:	00800044 	movi	r2,1
 402bfd8:	f800283a 	ret
 402bfdc:	0005883a 	mov	r2,zero
 402bfe0:	f800283a 	ret

0402bfe4 <__gedf2>:
 402bfe4:	2804d53a 	srli	r2,r5,20
 402bfe8:	3806d53a 	srli	r3,r7,20
 402bfec:	02000434 	movhi	r8,16
 402bff0:	423fffc4 	addi	r8,r8,-1
 402bff4:	1081ffcc 	andi	r2,r2,2047
 402bff8:	0241ffc4 	movi	r9,2047
 402bffc:	2a14703a 	and	r10,r5,r8
 402c000:	18c1ffcc 	andi	r3,r3,2047
 402c004:	3a10703a 	and	r8,r7,r8
 402c008:	280ad7fa 	srli	r5,r5,31
 402c00c:	380ed7fa 	srli	r7,r7,31
 402c010:	12401d26 	beq	r2,r9,402c088 <__gedf2+0xa4>
 402c014:	0241ffc4 	movi	r9,2047
 402c018:	1a401226 	beq	r3,r9,402c064 <__gedf2+0x80>
 402c01c:	1000081e 	bne	r2,zero,402c040 <__gedf2+0x5c>
 402c020:	2296b03a 	or	r11,r4,r10
 402c024:	5813003a 	cmpeq	r9,r11,zero
 402c028:	1800091e 	bne	r3,zero,402c050 <__gedf2+0x6c>
 402c02c:	3218b03a 	or	r12,r6,r8
 402c030:	6000071e 	bne	r12,zero,402c050 <__gedf2+0x6c>
 402c034:	0005883a 	mov	r2,zero
 402c038:	5800101e 	bne	r11,zero,402c07c <__gedf2+0x98>
 402c03c:	f800283a 	ret
 402c040:	18000c1e 	bne	r3,zero,402c074 <__gedf2+0x90>
 402c044:	3212b03a 	or	r9,r6,r8
 402c048:	48000c26 	beq	r9,zero,402c07c <__gedf2+0x98>
 402c04c:	0013883a 	mov	r9,zero
 402c050:	39c03fcc 	andi	r7,r7,255
 402c054:	48000826 	beq	r9,zero,402c078 <__gedf2+0x94>
 402c058:	38000926 	beq	r7,zero,402c080 <__gedf2+0x9c>
 402c05c:	00800044 	movi	r2,1
 402c060:	f800283a 	ret
 402c064:	3212b03a 	or	r9,r6,r8
 402c068:	483fec26 	beq	r9,zero,402c01c <__alt_data_end+0xfffec01c>
 402c06c:	00bfff84 	movi	r2,-2
 402c070:	f800283a 	ret
 402c074:	39c03fcc 	andi	r7,r7,255
 402c078:	29c00626 	beq	r5,r7,402c094 <__gedf2+0xb0>
 402c07c:	283ff726 	beq	r5,zero,402c05c <__alt_data_end+0xfffec05c>
 402c080:	00bfffc4 	movi	r2,-1
 402c084:	f800283a 	ret
 402c088:	2292b03a 	or	r9,r4,r10
 402c08c:	483fe126 	beq	r9,zero,402c014 <__alt_data_end+0xfffec014>
 402c090:	003ff606 	br	402c06c <__alt_data_end+0xfffec06c>
 402c094:	18bff916 	blt	r3,r2,402c07c <__alt_data_end+0xfffec07c>
 402c098:	10c00316 	blt	r2,r3,402c0a8 <__gedf2+0xc4>
 402c09c:	42bff736 	bltu	r8,r10,402c07c <__alt_data_end+0xfffec07c>
 402c0a0:	52000326 	beq	r10,r8,402c0b0 <__gedf2+0xcc>
 402c0a4:	5200042e 	bgeu	r10,r8,402c0b8 <__gedf2+0xd4>
 402c0a8:	283fec1e 	bne	r5,zero,402c05c <__alt_data_end+0xfffec05c>
 402c0ac:	003ff406 	br	402c080 <__alt_data_end+0xfffec080>
 402c0b0:	313ff236 	bltu	r6,r4,402c07c <__alt_data_end+0xfffec07c>
 402c0b4:	21bffc36 	bltu	r4,r6,402c0a8 <__alt_data_end+0xfffec0a8>
 402c0b8:	0005883a 	mov	r2,zero
 402c0bc:	f800283a 	ret

0402c0c0 <__ledf2>:
 402c0c0:	2804d53a 	srli	r2,r5,20
 402c0c4:	3810d53a 	srli	r8,r7,20
 402c0c8:	00c00434 	movhi	r3,16
 402c0cc:	18ffffc4 	addi	r3,r3,-1
 402c0d0:	1081ffcc 	andi	r2,r2,2047
 402c0d4:	0241ffc4 	movi	r9,2047
 402c0d8:	28d4703a 	and	r10,r5,r3
 402c0dc:	4201ffcc 	andi	r8,r8,2047
 402c0e0:	38c6703a 	and	r3,r7,r3
 402c0e4:	280ad7fa 	srli	r5,r5,31
 402c0e8:	380ed7fa 	srli	r7,r7,31
 402c0ec:	12401f26 	beq	r2,r9,402c16c <__ledf2+0xac>
 402c0f0:	0241ffc4 	movi	r9,2047
 402c0f4:	42401426 	beq	r8,r9,402c148 <__ledf2+0x88>
 402c0f8:	1000091e 	bne	r2,zero,402c120 <__ledf2+0x60>
 402c0fc:	2296b03a 	or	r11,r4,r10
 402c100:	5813003a 	cmpeq	r9,r11,zero
 402c104:	29403fcc 	andi	r5,r5,255
 402c108:	40000a1e 	bne	r8,zero,402c134 <__ledf2+0x74>
 402c10c:	30d8b03a 	or	r12,r6,r3
 402c110:	6000081e 	bne	r12,zero,402c134 <__ledf2+0x74>
 402c114:	0005883a 	mov	r2,zero
 402c118:	5800111e 	bne	r11,zero,402c160 <__ledf2+0xa0>
 402c11c:	f800283a 	ret
 402c120:	29403fcc 	andi	r5,r5,255
 402c124:	40000c1e 	bne	r8,zero,402c158 <__ledf2+0x98>
 402c128:	30d2b03a 	or	r9,r6,r3
 402c12c:	48000c26 	beq	r9,zero,402c160 <__ledf2+0xa0>
 402c130:	0013883a 	mov	r9,zero
 402c134:	39c03fcc 	andi	r7,r7,255
 402c138:	48000826 	beq	r9,zero,402c15c <__ledf2+0x9c>
 402c13c:	38001126 	beq	r7,zero,402c184 <__ledf2+0xc4>
 402c140:	00800044 	movi	r2,1
 402c144:	f800283a 	ret
 402c148:	30d2b03a 	or	r9,r6,r3
 402c14c:	483fea26 	beq	r9,zero,402c0f8 <__alt_data_end+0xfffec0f8>
 402c150:	00800084 	movi	r2,2
 402c154:	f800283a 	ret
 402c158:	39c03fcc 	andi	r7,r7,255
 402c15c:	39400726 	beq	r7,r5,402c17c <__ledf2+0xbc>
 402c160:	2800081e 	bne	r5,zero,402c184 <__ledf2+0xc4>
 402c164:	00800044 	movi	r2,1
 402c168:	f800283a 	ret
 402c16c:	2292b03a 	or	r9,r4,r10
 402c170:	483fdf26 	beq	r9,zero,402c0f0 <__alt_data_end+0xfffec0f0>
 402c174:	00800084 	movi	r2,2
 402c178:	f800283a 	ret
 402c17c:	4080030e 	bge	r8,r2,402c18c <__ledf2+0xcc>
 402c180:	383fef26 	beq	r7,zero,402c140 <__alt_data_end+0xfffec140>
 402c184:	00bfffc4 	movi	r2,-1
 402c188:	f800283a 	ret
 402c18c:	123feb16 	blt	r2,r8,402c13c <__alt_data_end+0xfffec13c>
 402c190:	1abff336 	bltu	r3,r10,402c160 <__alt_data_end+0xfffec160>
 402c194:	50c00326 	beq	r10,r3,402c1a4 <__ledf2+0xe4>
 402c198:	50c0042e 	bgeu	r10,r3,402c1ac <__ledf2+0xec>
 402c19c:	283fe81e 	bne	r5,zero,402c140 <__alt_data_end+0xfffec140>
 402c1a0:	003ff806 	br	402c184 <__alt_data_end+0xfffec184>
 402c1a4:	313fee36 	bltu	r6,r4,402c160 <__alt_data_end+0xfffec160>
 402c1a8:	21bffc36 	bltu	r4,r6,402c19c <__alt_data_end+0xfffec19c>
 402c1ac:	0005883a 	mov	r2,zero
 402c1b0:	f800283a 	ret

0402c1b4 <__muldf3>:
 402c1b4:	defff304 	addi	sp,sp,-52
 402c1b8:	2804d53a 	srli	r2,r5,20
 402c1bc:	dd800915 	stw	r22,36(sp)
 402c1c0:	282cd7fa 	srli	r22,r5,31
 402c1c4:	dc000315 	stw	r16,12(sp)
 402c1c8:	04000434 	movhi	r16,16
 402c1cc:	dd400815 	stw	r21,32(sp)
 402c1d0:	dc800515 	stw	r18,20(sp)
 402c1d4:	843fffc4 	addi	r16,r16,-1
 402c1d8:	dfc00c15 	stw	ra,48(sp)
 402c1dc:	df000b15 	stw	fp,44(sp)
 402c1e0:	ddc00a15 	stw	r23,40(sp)
 402c1e4:	dd000715 	stw	r20,28(sp)
 402c1e8:	dcc00615 	stw	r19,24(sp)
 402c1ec:	dc400415 	stw	r17,16(sp)
 402c1f0:	1481ffcc 	andi	r18,r2,2047
 402c1f4:	2c20703a 	and	r16,r5,r16
 402c1f8:	b02b883a 	mov	r21,r22
 402c1fc:	b2403fcc 	andi	r9,r22,255
 402c200:	90006026 	beq	r18,zero,402c384 <__muldf3+0x1d0>
 402c204:	0081ffc4 	movi	r2,2047
 402c208:	2029883a 	mov	r20,r4
 402c20c:	90803626 	beq	r18,r2,402c2e8 <__muldf3+0x134>
 402c210:	80800434 	orhi	r2,r16,16
 402c214:	100490fa 	slli	r2,r2,3
 402c218:	2020d77a 	srli	r16,r4,29
 402c21c:	202890fa 	slli	r20,r4,3
 402c220:	94bf0044 	addi	r18,r18,-1023
 402c224:	80a0b03a 	or	r16,r16,r2
 402c228:	0027883a 	mov	r19,zero
 402c22c:	0039883a 	mov	fp,zero
 402c230:	3804d53a 	srli	r2,r7,20
 402c234:	382ed7fa 	srli	r23,r7,31
 402c238:	04400434 	movhi	r17,16
 402c23c:	8c7fffc4 	addi	r17,r17,-1
 402c240:	1081ffcc 	andi	r2,r2,2047
 402c244:	3011883a 	mov	r8,r6
 402c248:	3c62703a 	and	r17,r7,r17
 402c24c:	ba803fcc 	andi	r10,r23,255
 402c250:	10006d26 	beq	r2,zero,402c408 <__muldf3+0x254>
 402c254:	00c1ffc4 	movi	r3,2047
 402c258:	10c06526 	beq	r2,r3,402c3f0 <__muldf3+0x23c>
 402c25c:	88c00434 	orhi	r3,r17,16
 402c260:	180690fa 	slli	r3,r3,3
 402c264:	3022d77a 	srli	r17,r6,29
 402c268:	301090fa 	slli	r8,r6,3
 402c26c:	10bf0044 	addi	r2,r2,-1023
 402c270:	88e2b03a 	or	r17,r17,r3
 402c274:	000b883a 	mov	r5,zero
 402c278:	9085883a 	add	r2,r18,r2
 402c27c:	2cc8b03a 	or	r4,r5,r19
 402c280:	00c003c4 	movi	r3,15
 402c284:	bdacf03a 	xor	r22,r23,r22
 402c288:	12c00044 	addi	r11,r2,1
 402c28c:	19009936 	bltu	r3,r4,402c4f4 <__muldf3+0x340>
 402c290:	200890ba 	slli	r4,r4,2
 402c294:	00c100f4 	movhi	r3,1027
 402c298:	18f0aa04 	addi	r3,r3,-15704
 402c29c:	20c9883a 	add	r4,r4,r3
 402c2a0:	20c00017 	ldw	r3,0(r4)
 402c2a4:	1800683a 	jmp	r3
 402c2a8:	0402c4f4 	movhi	r16,2835
 402c2ac:	0402c308 	cmpgei	r16,zero,2828
 402c2b0:	0402c308 	cmpgei	r16,zero,2828
 402c2b4:	0402c304 	movi	r16,2828
 402c2b8:	0402c4d0 	cmplti	r16,zero,2835
 402c2bc:	0402c4d0 	cmplti	r16,zero,2835
 402c2c0:	0402c4b8 	rdprs	r16,zero,2834
 402c2c4:	0402c304 	movi	r16,2828
 402c2c8:	0402c4d0 	cmplti	r16,zero,2835
 402c2cc:	0402c4b8 	rdprs	r16,zero,2834
 402c2d0:	0402c4d0 	cmplti	r16,zero,2835
 402c2d4:	0402c304 	movi	r16,2828
 402c2d8:	0402c4e0 	cmpeqi	r16,zero,2835
 402c2dc:	0402c4e0 	cmpeqi	r16,zero,2835
 402c2e0:	0402c4e0 	cmpeqi	r16,zero,2835
 402c2e4:	0402c6fc 	xorhi	r16,zero,2843
 402c2e8:	2404b03a 	or	r2,r4,r16
 402c2ec:	10006f1e 	bne	r2,zero,402c4ac <__muldf3+0x2f8>
 402c2f0:	04c00204 	movi	r19,8
 402c2f4:	0021883a 	mov	r16,zero
 402c2f8:	0029883a 	mov	r20,zero
 402c2fc:	07000084 	movi	fp,2
 402c300:	003fcb06 	br	402c230 <__alt_data_end+0xfffec230>
 402c304:	502d883a 	mov	r22,r10
 402c308:	00800084 	movi	r2,2
 402c30c:	28805726 	beq	r5,r2,402c46c <__muldf3+0x2b8>
 402c310:	008000c4 	movi	r2,3
 402c314:	28816626 	beq	r5,r2,402c8b0 <__muldf3+0x6fc>
 402c318:	00800044 	movi	r2,1
 402c31c:	2881411e 	bne	r5,r2,402c824 <__muldf3+0x670>
 402c320:	b02b883a 	mov	r21,r22
 402c324:	0005883a 	mov	r2,zero
 402c328:	000b883a 	mov	r5,zero
 402c32c:	0029883a 	mov	r20,zero
 402c330:	1004953a 	slli	r2,r2,20
 402c334:	a8c03fcc 	andi	r3,r21,255
 402c338:	04400434 	movhi	r17,16
 402c33c:	8c7fffc4 	addi	r17,r17,-1
 402c340:	180697fa 	slli	r3,r3,31
 402c344:	2c4a703a 	and	r5,r5,r17
 402c348:	288ab03a 	or	r5,r5,r2
 402c34c:	28c6b03a 	or	r3,r5,r3
 402c350:	a005883a 	mov	r2,r20
 402c354:	dfc00c17 	ldw	ra,48(sp)
 402c358:	df000b17 	ldw	fp,44(sp)
 402c35c:	ddc00a17 	ldw	r23,40(sp)
 402c360:	dd800917 	ldw	r22,36(sp)
 402c364:	dd400817 	ldw	r21,32(sp)
 402c368:	dd000717 	ldw	r20,28(sp)
 402c36c:	dcc00617 	ldw	r19,24(sp)
 402c370:	dc800517 	ldw	r18,20(sp)
 402c374:	dc400417 	ldw	r17,16(sp)
 402c378:	dc000317 	ldw	r16,12(sp)
 402c37c:	dec00d04 	addi	sp,sp,52
 402c380:	f800283a 	ret
 402c384:	2404b03a 	or	r2,r4,r16
 402c388:	2027883a 	mov	r19,r4
 402c38c:	10004226 	beq	r2,zero,402c498 <__muldf3+0x2e4>
 402c390:	8000fc26 	beq	r16,zero,402c784 <__muldf3+0x5d0>
 402c394:	8009883a 	mov	r4,r16
 402c398:	d9800215 	stw	r6,8(sp)
 402c39c:	d9c00015 	stw	r7,0(sp)
 402c3a0:	da400115 	stw	r9,4(sp)
 402c3a4:	402d3cc0 	call	402d3cc <__clzsi2>
 402c3a8:	d9800217 	ldw	r6,8(sp)
 402c3ac:	d9c00017 	ldw	r7,0(sp)
 402c3b0:	da400117 	ldw	r9,4(sp)
 402c3b4:	113ffd44 	addi	r4,r2,-11
 402c3b8:	00c00704 	movi	r3,28
 402c3bc:	1900ed16 	blt	r3,r4,402c774 <__muldf3+0x5c0>
 402c3c0:	00c00744 	movi	r3,29
 402c3c4:	147ffe04 	addi	r17,r2,-8
 402c3c8:	1907c83a 	sub	r3,r3,r4
 402c3cc:	8460983a 	sll	r16,r16,r17
 402c3d0:	98c6d83a 	srl	r3,r19,r3
 402c3d4:	9c68983a 	sll	r20,r19,r17
 402c3d8:	1c20b03a 	or	r16,r3,r16
 402c3dc:	1080fcc4 	addi	r2,r2,1011
 402c3e0:	00a5c83a 	sub	r18,zero,r2
 402c3e4:	0027883a 	mov	r19,zero
 402c3e8:	0039883a 	mov	fp,zero
 402c3ec:	003f9006 	br	402c230 <__alt_data_end+0xfffec230>
 402c3f0:	3446b03a 	or	r3,r6,r17
 402c3f4:	1800261e 	bne	r3,zero,402c490 <__muldf3+0x2dc>
 402c3f8:	0023883a 	mov	r17,zero
 402c3fc:	0011883a 	mov	r8,zero
 402c400:	01400084 	movi	r5,2
 402c404:	003f9c06 	br	402c278 <__alt_data_end+0xfffec278>
 402c408:	3446b03a 	or	r3,r6,r17
 402c40c:	18001c26 	beq	r3,zero,402c480 <__muldf3+0x2cc>
 402c410:	8800ce26 	beq	r17,zero,402c74c <__muldf3+0x598>
 402c414:	8809883a 	mov	r4,r17
 402c418:	d9800215 	stw	r6,8(sp)
 402c41c:	da400115 	stw	r9,4(sp)
 402c420:	da800015 	stw	r10,0(sp)
 402c424:	402d3cc0 	call	402d3cc <__clzsi2>
 402c428:	d9800217 	ldw	r6,8(sp)
 402c42c:	da400117 	ldw	r9,4(sp)
 402c430:	da800017 	ldw	r10,0(sp)
 402c434:	113ffd44 	addi	r4,r2,-11
 402c438:	00c00704 	movi	r3,28
 402c43c:	1900bf16 	blt	r3,r4,402c73c <__muldf3+0x588>
 402c440:	00c00744 	movi	r3,29
 402c444:	123ffe04 	addi	r8,r2,-8
 402c448:	1907c83a 	sub	r3,r3,r4
 402c44c:	8a22983a 	sll	r17,r17,r8
 402c450:	30c6d83a 	srl	r3,r6,r3
 402c454:	3210983a 	sll	r8,r6,r8
 402c458:	1c62b03a 	or	r17,r3,r17
 402c45c:	1080fcc4 	addi	r2,r2,1011
 402c460:	0085c83a 	sub	r2,zero,r2
 402c464:	000b883a 	mov	r5,zero
 402c468:	003f8306 	br	402c278 <__alt_data_end+0xfffec278>
 402c46c:	b02b883a 	mov	r21,r22
 402c470:	0081ffc4 	movi	r2,2047
 402c474:	000b883a 	mov	r5,zero
 402c478:	0029883a 	mov	r20,zero
 402c47c:	003fac06 	br	402c330 <__alt_data_end+0xfffec330>
 402c480:	0023883a 	mov	r17,zero
 402c484:	0011883a 	mov	r8,zero
 402c488:	01400044 	movi	r5,1
 402c48c:	003f7a06 	br	402c278 <__alt_data_end+0xfffec278>
 402c490:	014000c4 	movi	r5,3
 402c494:	003f7806 	br	402c278 <__alt_data_end+0xfffec278>
 402c498:	04c00104 	movi	r19,4
 402c49c:	0021883a 	mov	r16,zero
 402c4a0:	0029883a 	mov	r20,zero
 402c4a4:	07000044 	movi	fp,1
 402c4a8:	003f6106 	br	402c230 <__alt_data_end+0xfffec230>
 402c4ac:	04c00304 	movi	r19,12
 402c4b0:	070000c4 	movi	fp,3
 402c4b4:	003f5e06 	br	402c230 <__alt_data_end+0xfffec230>
 402c4b8:	01400434 	movhi	r5,16
 402c4bc:	002b883a 	mov	r21,zero
 402c4c0:	297fffc4 	addi	r5,r5,-1
 402c4c4:	053fffc4 	movi	r20,-1
 402c4c8:	0081ffc4 	movi	r2,2047
 402c4cc:	003f9806 	br	402c330 <__alt_data_end+0xfffec330>
 402c4d0:	8023883a 	mov	r17,r16
 402c4d4:	a011883a 	mov	r8,r20
 402c4d8:	e00b883a 	mov	r5,fp
 402c4dc:	003f8a06 	br	402c308 <__alt_data_end+0xfffec308>
 402c4e0:	8023883a 	mov	r17,r16
 402c4e4:	a011883a 	mov	r8,r20
 402c4e8:	482d883a 	mov	r22,r9
 402c4ec:	e00b883a 	mov	r5,fp
 402c4f0:	003f8506 	br	402c308 <__alt_data_end+0xfffec308>
 402c4f4:	a00ad43a 	srli	r5,r20,16
 402c4f8:	401ad43a 	srli	r13,r8,16
 402c4fc:	a53fffcc 	andi	r20,r20,65535
 402c500:	423fffcc 	andi	r8,r8,65535
 402c504:	4519383a 	mul	r12,r8,r20
 402c508:	4147383a 	mul	r3,r8,r5
 402c50c:	6d09383a 	mul	r4,r13,r20
 402c510:	600cd43a 	srli	r6,r12,16
 402c514:	2b5d383a 	mul	r14,r5,r13
 402c518:	20c9883a 	add	r4,r4,r3
 402c51c:	310d883a 	add	r6,r6,r4
 402c520:	30c0022e 	bgeu	r6,r3,402c52c <__muldf3+0x378>
 402c524:	00c00074 	movhi	r3,1
 402c528:	70dd883a 	add	r14,r14,r3
 402c52c:	8826d43a 	srli	r19,r17,16
 402c530:	8bffffcc 	andi	r15,r17,65535
 402c534:	7d23383a 	mul	r17,r15,r20
 402c538:	7949383a 	mul	r4,r15,r5
 402c53c:	9d29383a 	mul	r20,r19,r20
 402c540:	8814d43a 	srli	r10,r17,16
 402c544:	3012943a 	slli	r9,r6,16
 402c548:	a129883a 	add	r20,r20,r4
 402c54c:	633fffcc 	andi	r12,r12,65535
 402c550:	5515883a 	add	r10,r10,r20
 402c554:	3006d43a 	srli	r3,r6,16
 402c558:	4b13883a 	add	r9,r9,r12
 402c55c:	2ccb383a 	mul	r5,r5,r19
 402c560:	5100022e 	bgeu	r10,r4,402c56c <__muldf3+0x3b8>
 402c564:	01000074 	movhi	r4,1
 402c568:	290b883a 	add	r5,r5,r4
 402c56c:	802ad43a 	srli	r21,r16,16
 402c570:	843fffcc 	andi	r16,r16,65535
 402c574:	440d383a 	mul	r6,r8,r16
 402c578:	4565383a 	mul	r18,r8,r21
 402c57c:	8349383a 	mul	r4,r16,r13
 402c580:	500e943a 	slli	r7,r10,16
 402c584:	3010d43a 	srli	r8,r6,16
 402c588:	5028d43a 	srli	r20,r10,16
 402c58c:	2489883a 	add	r4,r4,r18
 402c590:	8abfffcc 	andi	r10,r17,65535
 402c594:	3a95883a 	add	r10,r7,r10
 402c598:	4119883a 	add	r12,r8,r4
 402c59c:	a169883a 	add	r20,r20,r5
 402c5a0:	1a87883a 	add	r3,r3,r10
 402c5a4:	6d5b383a 	mul	r13,r13,r21
 402c5a8:	6480022e 	bgeu	r12,r18,402c5b4 <__muldf3+0x400>
 402c5ac:	01000074 	movhi	r4,1
 402c5b0:	691b883a 	add	r13,r13,r4
 402c5b4:	7c25383a 	mul	r18,r15,r16
 402c5b8:	7d4b383a 	mul	r5,r15,r21
 402c5bc:	84cf383a 	mul	r7,r16,r19
 402c5c0:	901ed43a 	srli	r15,r18,16
 402c5c4:	6008d43a 	srli	r4,r12,16
 402c5c8:	6010943a 	slli	r8,r12,16
 402c5cc:	394f883a 	add	r7,r7,r5
 402c5d0:	333fffcc 	andi	r12,r6,65535
 402c5d4:	79df883a 	add	r15,r15,r7
 402c5d8:	235b883a 	add	r13,r4,r13
 402c5dc:	9d63383a 	mul	r17,r19,r21
 402c5e0:	4309883a 	add	r4,r8,r12
 402c5e4:	7940022e 	bgeu	r15,r5,402c5f0 <__muldf3+0x43c>
 402c5e8:	01400074 	movhi	r5,1
 402c5ec:	8963883a 	add	r17,r17,r5
 402c5f0:	780a943a 	slli	r5,r15,16
 402c5f4:	91bfffcc 	andi	r6,r18,65535
 402c5f8:	70c7883a 	add	r3,r14,r3
 402c5fc:	298d883a 	add	r6,r5,r6
 402c600:	1a8f803a 	cmpltu	r7,r3,r10
 402c604:	350b883a 	add	r5,r6,r20
 402c608:	20c7883a 	add	r3,r4,r3
 402c60c:	3955883a 	add	r10,r7,r5
 402c610:	1909803a 	cmpltu	r4,r3,r4
 402c614:	6a91883a 	add	r8,r13,r10
 402c618:	780cd43a 	srli	r6,r15,16
 402c61c:	2219883a 	add	r12,r4,r8
 402c620:	2d0b803a 	cmpltu	r5,r5,r20
 402c624:	51cf803a 	cmpltu	r7,r10,r7
 402c628:	29ceb03a 	or	r7,r5,r7
 402c62c:	4351803a 	cmpltu	r8,r8,r13
 402c630:	610b803a 	cmpltu	r5,r12,r4
 402c634:	4148b03a 	or	r4,r8,r5
 402c638:	398f883a 	add	r7,r7,r6
 402c63c:	3909883a 	add	r4,r7,r4
 402c640:	1810927a 	slli	r8,r3,9
 402c644:	2449883a 	add	r4,r4,r17
 402c648:	2008927a 	slli	r4,r4,9
 402c64c:	6022d5fa 	srli	r17,r12,23
 402c650:	1806d5fa 	srli	r3,r3,23
 402c654:	4252b03a 	or	r9,r8,r9
 402c658:	600a927a 	slli	r5,r12,9
 402c65c:	4810c03a 	cmpne	r8,r9,zero
 402c660:	2462b03a 	or	r17,r4,r17
 402c664:	40c6b03a 	or	r3,r8,r3
 402c668:	8900402c 	andhi	r4,r17,256
 402c66c:	1950b03a 	or	r8,r3,r5
 402c670:	20000726 	beq	r4,zero,402c690 <__muldf3+0x4dc>
 402c674:	4006d07a 	srli	r3,r8,1
 402c678:	880497fa 	slli	r2,r17,31
 402c67c:	4200004c 	andi	r8,r8,1
 402c680:	8822d07a 	srli	r17,r17,1
 402c684:	1a10b03a 	or	r8,r3,r8
 402c688:	1210b03a 	or	r8,r2,r8
 402c68c:	5805883a 	mov	r2,r11
 402c690:	1140ffc4 	addi	r5,r2,1023
 402c694:	0140440e 	bge	zero,r5,402c7a8 <__muldf3+0x5f4>
 402c698:	40c001cc 	andi	r3,r8,7
 402c69c:	18000726 	beq	r3,zero,402c6bc <__muldf3+0x508>
 402c6a0:	40c003cc 	andi	r3,r8,15
 402c6a4:	01000104 	movi	r4,4
 402c6a8:	19000426 	beq	r3,r4,402c6bc <__muldf3+0x508>
 402c6ac:	4107883a 	add	r3,r8,r4
 402c6b0:	1a11803a 	cmpltu	r8,r3,r8
 402c6b4:	8a23883a 	add	r17,r17,r8
 402c6b8:	1811883a 	mov	r8,r3
 402c6bc:	88c0402c 	andhi	r3,r17,256
 402c6c0:	18000426 	beq	r3,zero,402c6d4 <__muldf3+0x520>
 402c6c4:	11410004 	addi	r5,r2,1024
 402c6c8:	00bfc034 	movhi	r2,65280
 402c6cc:	10bfffc4 	addi	r2,r2,-1
 402c6d0:	88a2703a 	and	r17,r17,r2
 402c6d4:	0081ff84 	movi	r2,2046
 402c6d8:	117f6416 	blt	r2,r5,402c46c <__alt_data_end+0xfffec46c>
 402c6dc:	8828977a 	slli	r20,r17,29
 402c6e0:	4010d0fa 	srli	r8,r8,3
 402c6e4:	8822927a 	slli	r17,r17,9
 402c6e8:	2881ffcc 	andi	r2,r5,2047
 402c6ec:	a228b03a 	or	r20,r20,r8
 402c6f0:	880ad33a 	srli	r5,r17,12
 402c6f4:	b02b883a 	mov	r21,r22
 402c6f8:	003f0d06 	br	402c330 <__alt_data_end+0xfffec330>
 402c6fc:	8080022c 	andhi	r2,r16,8
 402c700:	10000926 	beq	r2,zero,402c728 <__muldf3+0x574>
 402c704:	8880022c 	andhi	r2,r17,8
 402c708:	1000071e 	bne	r2,zero,402c728 <__muldf3+0x574>
 402c70c:	00800434 	movhi	r2,16
 402c710:	89400234 	orhi	r5,r17,8
 402c714:	10bfffc4 	addi	r2,r2,-1
 402c718:	b82b883a 	mov	r21,r23
 402c71c:	288a703a 	and	r5,r5,r2
 402c720:	4029883a 	mov	r20,r8
 402c724:	003f6806 	br	402c4c8 <__alt_data_end+0xfffec4c8>
 402c728:	00800434 	movhi	r2,16
 402c72c:	81400234 	orhi	r5,r16,8
 402c730:	10bfffc4 	addi	r2,r2,-1
 402c734:	288a703a 	and	r5,r5,r2
 402c738:	003f6306 	br	402c4c8 <__alt_data_end+0xfffec4c8>
 402c73c:	147ff604 	addi	r17,r2,-40
 402c740:	3462983a 	sll	r17,r6,r17
 402c744:	0011883a 	mov	r8,zero
 402c748:	003f4406 	br	402c45c <__alt_data_end+0xfffec45c>
 402c74c:	3009883a 	mov	r4,r6
 402c750:	d9800215 	stw	r6,8(sp)
 402c754:	da400115 	stw	r9,4(sp)
 402c758:	da800015 	stw	r10,0(sp)
 402c75c:	402d3cc0 	call	402d3cc <__clzsi2>
 402c760:	10800804 	addi	r2,r2,32
 402c764:	da800017 	ldw	r10,0(sp)
 402c768:	da400117 	ldw	r9,4(sp)
 402c76c:	d9800217 	ldw	r6,8(sp)
 402c770:	003f3006 	br	402c434 <__alt_data_end+0xfffec434>
 402c774:	143ff604 	addi	r16,r2,-40
 402c778:	9c20983a 	sll	r16,r19,r16
 402c77c:	0029883a 	mov	r20,zero
 402c780:	003f1606 	br	402c3dc <__alt_data_end+0xfffec3dc>
 402c784:	d9800215 	stw	r6,8(sp)
 402c788:	d9c00015 	stw	r7,0(sp)
 402c78c:	da400115 	stw	r9,4(sp)
 402c790:	402d3cc0 	call	402d3cc <__clzsi2>
 402c794:	10800804 	addi	r2,r2,32
 402c798:	da400117 	ldw	r9,4(sp)
 402c79c:	d9c00017 	ldw	r7,0(sp)
 402c7a0:	d9800217 	ldw	r6,8(sp)
 402c7a4:	003f0306 	br	402c3b4 <__alt_data_end+0xfffec3b4>
 402c7a8:	00c00044 	movi	r3,1
 402c7ac:	1947c83a 	sub	r3,r3,r5
 402c7b0:	00800e04 	movi	r2,56
 402c7b4:	10feda16 	blt	r2,r3,402c320 <__alt_data_end+0xfffec320>
 402c7b8:	008007c4 	movi	r2,31
 402c7bc:	10c01b16 	blt	r2,r3,402c82c <__muldf3+0x678>
 402c7c0:	00800804 	movi	r2,32
 402c7c4:	10c5c83a 	sub	r2,r2,r3
 402c7c8:	888a983a 	sll	r5,r17,r2
 402c7cc:	40c8d83a 	srl	r4,r8,r3
 402c7d0:	4084983a 	sll	r2,r8,r2
 402c7d4:	88e2d83a 	srl	r17,r17,r3
 402c7d8:	2906b03a 	or	r3,r5,r4
 402c7dc:	1004c03a 	cmpne	r2,r2,zero
 402c7e0:	1886b03a 	or	r3,r3,r2
 402c7e4:	188001cc 	andi	r2,r3,7
 402c7e8:	10000726 	beq	r2,zero,402c808 <__muldf3+0x654>
 402c7ec:	188003cc 	andi	r2,r3,15
 402c7f0:	01000104 	movi	r4,4
 402c7f4:	11000426 	beq	r2,r4,402c808 <__muldf3+0x654>
 402c7f8:	1805883a 	mov	r2,r3
 402c7fc:	10c00104 	addi	r3,r2,4
 402c800:	1885803a 	cmpltu	r2,r3,r2
 402c804:	88a3883a 	add	r17,r17,r2
 402c808:	8880202c 	andhi	r2,r17,128
 402c80c:	10001c26 	beq	r2,zero,402c880 <__muldf3+0x6cc>
 402c810:	b02b883a 	mov	r21,r22
 402c814:	00800044 	movi	r2,1
 402c818:	000b883a 	mov	r5,zero
 402c81c:	0029883a 	mov	r20,zero
 402c820:	003ec306 	br	402c330 <__alt_data_end+0xfffec330>
 402c824:	5805883a 	mov	r2,r11
 402c828:	003f9906 	br	402c690 <__alt_data_end+0xfffec690>
 402c82c:	00bff844 	movi	r2,-31
 402c830:	1145c83a 	sub	r2,r2,r5
 402c834:	8888d83a 	srl	r4,r17,r2
 402c838:	00800804 	movi	r2,32
 402c83c:	18801a26 	beq	r3,r2,402c8a8 <__muldf3+0x6f4>
 402c840:	00801004 	movi	r2,64
 402c844:	10c5c83a 	sub	r2,r2,r3
 402c848:	8884983a 	sll	r2,r17,r2
 402c84c:	1204b03a 	or	r2,r2,r8
 402c850:	1004c03a 	cmpne	r2,r2,zero
 402c854:	2084b03a 	or	r2,r4,r2
 402c858:	144001cc 	andi	r17,r2,7
 402c85c:	88000d1e 	bne	r17,zero,402c894 <__muldf3+0x6e0>
 402c860:	000b883a 	mov	r5,zero
 402c864:	1028d0fa 	srli	r20,r2,3
 402c868:	b02b883a 	mov	r21,r22
 402c86c:	0005883a 	mov	r2,zero
 402c870:	a468b03a 	or	r20,r20,r17
 402c874:	003eae06 	br	402c330 <__alt_data_end+0xfffec330>
 402c878:	1007883a 	mov	r3,r2
 402c87c:	0023883a 	mov	r17,zero
 402c880:	880a927a 	slli	r5,r17,9
 402c884:	1805883a 	mov	r2,r3
 402c888:	8822977a 	slli	r17,r17,29
 402c88c:	280ad33a 	srli	r5,r5,12
 402c890:	003ff406 	br	402c864 <__alt_data_end+0xfffec864>
 402c894:	10c003cc 	andi	r3,r2,15
 402c898:	01000104 	movi	r4,4
 402c89c:	193ff626 	beq	r3,r4,402c878 <__alt_data_end+0xfffec878>
 402c8a0:	0023883a 	mov	r17,zero
 402c8a4:	003fd506 	br	402c7fc <__alt_data_end+0xfffec7fc>
 402c8a8:	0005883a 	mov	r2,zero
 402c8ac:	003fe706 	br	402c84c <__alt_data_end+0xfffec84c>
 402c8b0:	00800434 	movhi	r2,16
 402c8b4:	89400234 	orhi	r5,r17,8
 402c8b8:	10bfffc4 	addi	r2,r2,-1
 402c8bc:	b02b883a 	mov	r21,r22
 402c8c0:	288a703a 	and	r5,r5,r2
 402c8c4:	4029883a 	mov	r20,r8
 402c8c8:	003eff06 	br	402c4c8 <__alt_data_end+0xfffec4c8>

0402c8cc <__subdf3>:
 402c8cc:	02000434 	movhi	r8,16
 402c8d0:	423fffc4 	addi	r8,r8,-1
 402c8d4:	defffb04 	addi	sp,sp,-20
 402c8d8:	2a14703a 	and	r10,r5,r8
 402c8dc:	3812d53a 	srli	r9,r7,20
 402c8e0:	3a10703a 	and	r8,r7,r8
 402c8e4:	2006d77a 	srli	r3,r4,29
 402c8e8:	3004d77a 	srli	r2,r6,29
 402c8ec:	dc000015 	stw	r16,0(sp)
 402c8f0:	501490fa 	slli	r10,r10,3
 402c8f4:	2820d53a 	srli	r16,r5,20
 402c8f8:	401090fa 	slli	r8,r8,3
 402c8fc:	dc800215 	stw	r18,8(sp)
 402c900:	dc400115 	stw	r17,4(sp)
 402c904:	dfc00415 	stw	ra,16(sp)
 402c908:	202290fa 	slli	r17,r4,3
 402c90c:	dcc00315 	stw	r19,12(sp)
 402c910:	4a41ffcc 	andi	r9,r9,2047
 402c914:	0101ffc4 	movi	r4,2047
 402c918:	2824d7fa 	srli	r18,r5,31
 402c91c:	8401ffcc 	andi	r16,r16,2047
 402c920:	50c6b03a 	or	r3,r10,r3
 402c924:	380ed7fa 	srli	r7,r7,31
 402c928:	408ab03a 	or	r5,r8,r2
 402c92c:	300c90fa 	slli	r6,r6,3
 402c930:	49009626 	beq	r9,r4,402cb8c <__subdf3+0x2c0>
 402c934:	39c0005c 	xori	r7,r7,1
 402c938:	8245c83a 	sub	r2,r16,r9
 402c93c:	3c807426 	beq	r7,r18,402cb10 <__subdf3+0x244>
 402c940:	0080af0e 	bge	zero,r2,402cc00 <__subdf3+0x334>
 402c944:	48002a1e 	bne	r9,zero,402c9f0 <__subdf3+0x124>
 402c948:	2988b03a 	or	r4,r5,r6
 402c94c:	20009a1e 	bne	r4,zero,402cbb8 <__subdf3+0x2ec>
 402c950:	888001cc 	andi	r2,r17,7
 402c954:	10000726 	beq	r2,zero,402c974 <__subdf3+0xa8>
 402c958:	888003cc 	andi	r2,r17,15
 402c95c:	01000104 	movi	r4,4
 402c960:	11000426 	beq	r2,r4,402c974 <__subdf3+0xa8>
 402c964:	890b883a 	add	r5,r17,r4
 402c968:	2c63803a 	cmpltu	r17,r5,r17
 402c96c:	1c47883a 	add	r3,r3,r17
 402c970:	2823883a 	mov	r17,r5
 402c974:	1880202c 	andhi	r2,r3,128
 402c978:	10005926 	beq	r2,zero,402cae0 <__subdf3+0x214>
 402c97c:	84000044 	addi	r16,r16,1
 402c980:	0081ffc4 	movi	r2,2047
 402c984:	8080be26 	beq	r16,r2,402cc80 <__subdf3+0x3b4>
 402c988:	017fe034 	movhi	r5,65408
 402c98c:	297fffc4 	addi	r5,r5,-1
 402c990:	1946703a 	and	r3,r3,r5
 402c994:	1804977a 	slli	r2,r3,29
 402c998:	1806927a 	slli	r3,r3,9
 402c99c:	8822d0fa 	srli	r17,r17,3
 402c9a0:	8401ffcc 	andi	r16,r16,2047
 402c9a4:	180ad33a 	srli	r5,r3,12
 402c9a8:	9100004c 	andi	r4,r18,1
 402c9ac:	1444b03a 	or	r2,r2,r17
 402c9b0:	80c1ffcc 	andi	r3,r16,2047
 402c9b4:	1820953a 	slli	r16,r3,20
 402c9b8:	20c03fcc 	andi	r3,r4,255
 402c9bc:	180897fa 	slli	r4,r3,31
 402c9c0:	00c00434 	movhi	r3,16
 402c9c4:	18ffffc4 	addi	r3,r3,-1
 402c9c8:	28c6703a 	and	r3,r5,r3
 402c9cc:	1c06b03a 	or	r3,r3,r16
 402c9d0:	1906b03a 	or	r3,r3,r4
 402c9d4:	dfc00417 	ldw	ra,16(sp)
 402c9d8:	dcc00317 	ldw	r19,12(sp)
 402c9dc:	dc800217 	ldw	r18,8(sp)
 402c9e0:	dc400117 	ldw	r17,4(sp)
 402c9e4:	dc000017 	ldw	r16,0(sp)
 402c9e8:	dec00504 	addi	sp,sp,20
 402c9ec:	f800283a 	ret
 402c9f0:	0101ffc4 	movi	r4,2047
 402c9f4:	813fd626 	beq	r16,r4,402c950 <__alt_data_end+0xfffec950>
 402c9f8:	29402034 	orhi	r5,r5,128
 402c9fc:	01000e04 	movi	r4,56
 402ca00:	2080a316 	blt	r4,r2,402cc90 <__subdf3+0x3c4>
 402ca04:	010007c4 	movi	r4,31
 402ca08:	2080c616 	blt	r4,r2,402cd24 <__subdf3+0x458>
 402ca0c:	01000804 	movi	r4,32
 402ca10:	2089c83a 	sub	r4,r4,r2
 402ca14:	2910983a 	sll	r8,r5,r4
 402ca18:	308ed83a 	srl	r7,r6,r2
 402ca1c:	3108983a 	sll	r4,r6,r4
 402ca20:	2884d83a 	srl	r2,r5,r2
 402ca24:	41ccb03a 	or	r6,r8,r7
 402ca28:	2008c03a 	cmpne	r4,r4,zero
 402ca2c:	310cb03a 	or	r6,r6,r4
 402ca30:	898dc83a 	sub	r6,r17,r6
 402ca34:	89a3803a 	cmpltu	r17,r17,r6
 402ca38:	1887c83a 	sub	r3,r3,r2
 402ca3c:	1c47c83a 	sub	r3,r3,r17
 402ca40:	3023883a 	mov	r17,r6
 402ca44:	1880202c 	andhi	r2,r3,128
 402ca48:	10002326 	beq	r2,zero,402cad8 <__subdf3+0x20c>
 402ca4c:	04c02034 	movhi	r19,128
 402ca50:	9cffffc4 	addi	r19,r19,-1
 402ca54:	1ce6703a 	and	r19,r3,r19
 402ca58:	98007a26 	beq	r19,zero,402cc44 <__subdf3+0x378>
 402ca5c:	9809883a 	mov	r4,r19
 402ca60:	402d3cc0 	call	402d3cc <__clzsi2>
 402ca64:	113ffe04 	addi	r4,r2,-8
 402ca68:	00c007c4 	movi	r3,31
 402ca6c:	19007b16 	blt	r3,r4,402cc5c <__subdf3+0x390>
 402ca70:	00800804 	movi	r2,32
 402ca74:	1105c83a 	sub	r2,r2,r4
 402ca78:	8884d83a 	srl	r2,r17,r2
 402ca7c:	9906983a 	sll	r3,r19,r4
 402ca80:	8922983a 	sll	r17,r17,r4
 402ca84:	10c4b03a 	or	r2,r2,r3
 402ca88:	24007816 	blt	r4,r16,402cc6c <__subdf3+0x3a0>
 402ca8c:	2421c83a 	sub	r16,r4,r16
 402ca90:	80c00044 	addi	r3,r16,1
 402ca94:	010007c4 	movi	r4,31
 402ca98:	20c09516 	blt	r4,r3,402ccf0 <__subdf3+0x424>
 402ca9c:	01400804 	movi	r5,32
 402caa0:	28cbc83a 	sub	r5,r5,r3
 402caa4:	88c8d83a 	srl	r4,r17,r3
 402caa8:	8962983a 	sll	r17,r17,r5
 402caac:	114a983a 	sll	r5,r2,r5
 402cab0:	10c6d83a 	srl	r3,r2,r3
 402cab4:	8804c03a 	cmpne	r2,r17,zero
 402cab8:	290ab03a 	or	r5,r5,r4
 402cabc:	28a2b03a 	or	r17,r5,r2
 402cac0:	0021883a 	mov	r16,zero
 402cac4:	003fa206 	br	402c950 <__alt_data_end+0xfffec950>
 402cac8:	2090b03a 	or	r8,r4,r2
 402cacc:	40018e26 	beq	r8,zero,402d108 <__subdf3+0x83c>
 402cad0:	1007883a 	mov	r3,r2
 402cad4:	2023883a 	mov	r17,r4
 402cad8:	888001cc 	andi	r2,r17,7
 402cadc:	103f9e1e 	bne	r2,zero,402c958 <__alt_data_end+0xfffec958>
 402cae0:	1804977a 	slli	r2,r3,29
 402cae4:	8822d0fa 	srli	r17,r17,3
 402cae8:	1810d0fa 	srli	r8,r3,3
 402caec:	9100004c 	andi	r4,r18,1
 402caf0:	1444b03a 	or	r2,r2,r17
 402caf4:	00c1ffc4 	movi	r3,2047
 402caf8:	80c02826 	beq	r16,r3,402cb9c <__subdf3+0x2d0>
 402cafc:	01400434 	movhi	r5,16
 402cb00:	297fffc4 	addi	r5,r5,-1
 402cb04:	80e0703a 	and	r16,r16,r3
 402cb08:	414a703a 	and	r5,r8,r5
 402cb0c:	003fa806 	br	402c9b0 <__alt_data_end+0xfffec9b0>
 402cb10:	0080630e 	bge	zero,r2,402cca0 <__subdf3+0x3d4>
 402cb14:	48003026 	beq	r9,zero,402cbd8 <__subdf3+0x30c>
 402cb18:	0101ffc4 	movi	r4,2047
 402cb1c:	813f8c26 	beq	r16,r4,402c950 <__alt_data_end+0xfffec950>
 402cb20:	29402034 	orhi	r5,r5,128
 402cb24:	01000e04 	movi	r4,56
 402cb28:	2080a90e 	bge	r4,r2,402cdd0 <__subdf3+0x504>
 402cb2c:	298cb03a 	or	r6,r5,r6
 402cb30:	3012c03a 	cmpne	r9,r6,zero
 402cb34:	0005883a 	mov	r2,zero
 402cb38:	4c53883a 	add	r9,r9,r17
 402cb3c:	4c63803a 	cmpltu	r17,r9,r17
 402cb40:	10c7883a 	add	r3,r2,r3
 402cb44:	88c7883a 	add	r3,r17,r3
 402cb48:	4823883a 	mov	r17,r9
 402cb4c:	1880202c 	andhi	r2,r3,128
 402cb50:	1000d026 	beq	r2,zero,402ce94 <__subdf3+0x5c8>
 402cb54:	84000044 	addi	r16,r16,1
 402cb58:	0081ffc4 	movi	r2,2047
 402cb5c:	8080fe26 	beq	r16,r2,402cf58 <__subdf3+0x68c>
 402cb60:	00bfe034 	movhi	r2,65408
 402cb64:	10bfffc4 	addi	r2,r2,-1
 402cb68:	1886703a 	and	r3,r3,r2
 402cb6c:	880ad07a 	srli	r5,r17,1
 402cb70:	180497fa 	slli	r2,r3,31
 402cb74:	8900004c 	andi	r4,r17,1
 402cb78:	2922b03a 	or	r17,r5,r4
 402cb7c:	1806d07a 	srli	r3,r3,1
 402cb80:	1462b03a 	or	r17,r2,r17
 402cb84:	3825883a 	mov	r18,r7
 402cb88:	003f7106 	br	402c950 <__alt_data_end+0xfffec950>
 402cb8c:	2984b03a 	or	r2,r5,r6
 402cb90:	103f6826 	beq	r2,zero,402c934 <__alt_data_end+0xfffec934>
 402cb94:	39c03fcc 	andi	r7,r7,255
 402cb98:	003f6706 	br	402c938 <__alt_data_end+0xfffec938>
 402cb9c:	4086b03a 	or	r3,r8,r2
 402cba0:	18015226 	beq	r3,zero,402d0ec <__subdf3+0x820>
 402cba4:	00c00434 	movhi	r3,16
 402cba8:	41400234 	orhi	r5,r8,8
 402cbac:	18ffffc4 	addi	r3,r3,-1
 402cbb0:	28ca703a 	and	r5,r5,r3
 402cbb4:	003f7e06 	br	402c9b0 <__alt_data_end+0xfffec9b0>
 402cbb8:	10bfffc4 	addi	r2,r2,-1
 402cbbc:	1000491e 	bne	r2,zero,402cce4 <__subdf3+0x418>
 402cbc0:	898fc83a 	sub	r7,r17,r6
 402cbc4:	89e3803a 	cmpltu	r17,r17,r7
 402cbc8:	1947c83a 	sub	r3,r3,r5
 402cbcc:	1c47c83a 	sub	r3,r3,r17
 402cbd0:	3823883a 	mov	r17,r7
 402cbd4:	003f9b06 	br	402ca44 <__alt_data_end+0xfffeca44>
 402cbd8:	2988b03a 	or	r4,r5,r6
 402cbdc:	203f5c26 	beq	r4,zero,402c950 <__alt_data_end+0xfffec950>
 402cbe0:	10bfffc4 	addi	r2,r2,-1
 402cbe4:	1000931e 	bne	r2,zero,402ce34 <__subdf3+0x568>
 402cbe8:	898d883a 	add	r6,r17,r6
 402cbec:	3463803a 	cmpltu	r17,r6,r17
 402cbf0:	1947883a 	add	r3,r3,r5
 402cbf4:	88c7883a 	add	r3,r17,r3
 402cbf8:	3023883a 	mov	r17,r6
 402cbfc:	003fd306 	br	402cb4c <__alt_data_end+0xfffecb4c>
 402cc00:	1000541e 	bne	r2,zero,402cd54 <__subdf3+0x488>
 402cc04:	80800044 	addi	r2,r16,1
 402cc08:	1081ffcc 	andi	r2,r2,2047
 402cc0c:	01000044 	movi	r4,1
 402cc10:	2080a20e 	bge	r4,r2,402ce9c <__subdf3+0x5d0>
 402cc14:	8989c83a 	sub	r4,r17,r6
 402cc18:	8905803a 	cmpltu	r2,r17,r4
 402cc1c:	1967c83a 	sub	r19,r3,r5
 402cc20:	98a7c83a 	sub	r19,r19,r2
 402cc24:	9880202c 	andhi	r2,r19,128
 402cc28:	10006326 	beq	r2,zero,402cdb8 <__subdf3+0x4ec>
 402cc2c:	3463c83a 	sub	r17,r6,r17
 402cc30:	28c7c83a 	sub	r3,r5,r3
 402cc34:	344d803a 	cmpltu	r6,r6,r17
 402cc38:	19a7c83a 	sub	r19,r3,r6
 402cc3c:	3825883a 	mov	r18,r7
 402cc40:	983f861e 	bne	r19,zero,402ca5c <__alt_data_end+0xfffeca5c>
 402cc44:	8809883a 	mov	r4,r17
 402cc48:	402d3cc0 	call	402d3cc <__clzsi2>
 402cc4c:	10800804 	addi	r2,r2,32
 402cc50:	113ffe04 	addi	r4,r2,-8
 402cc54:	00c007c4 	movi	r3,31
 402cc58:	193f850e 	bge	r3,r4,402ca70 <__alt_data_end+0xfffeca70>
 402cc5c:	10bff604 	addi	r2,r2,-40
 402cc60:	8884983a 	sll	r2,r17,r2
 402cc64:	0023883a 	mov	r17,zero
 402cc68:	243f880e 	bge	r4,r16,402ca8c <__alt_data_end+0xfffeca8c>
 402cc6c:	00ffe034 	movhi	r3,65408
 402cc70:	18ffffc4 	addi	r3,r3,-1
 402cc74:	8121c83a 	sub	r16,r16,r4
 402cc78:	10c6703a 	and	r3,r2,r3
 402cc7c:	003f3406 	br	402c950 <__alt_data_end+0xfffec950>
 402cc80:	9100004c 	andi	r4,r18,1
 402cc84:	000b883a 	mov	r5,zero
 402cc88:	0005883a 	mov	r2,zero
 402cc8c:	003f4806 	br	402c9b0 <__alt_data_end+0xfffec9b0>
 402cc90:	298cb03a 	or	r6,r5,r6
 402cc94:	300cc03a 	cmpne	r6,r6,zero
 402cc98:	0005883a 	mov	r2,zero
 402cc9c:	003f6406 	br	402ca30 <__alt_data_end+0xfffeca30>
 402cca0:	10009a1e 	bne	r2,zero,402cf0c <__subdf3+0x640>
 402cca4:	82400044 	addi	r9,r16,1
 402cca8:	4881ffcc 	andi	r2,r9,2047
 402ccac:	02800044 	movi	r10,1
 402ccb0:	5080670e 	bge	r10,r2,402ce50 <__subdf3+0x584>
 402ccb4:	0081ffc4 	movi	r2,2047
 402ccb8:	4880af26 	beq	r9,r2,402cf78 <__subdf3+0x6ac>
 402ccbc:	898d883a 	add	r6,r17,r6
 402ccc0:	1945883a 	add	r2,r3,r5
 402ccc4:	3447803a 	cmpltu	r3,r6,r17
 402ccc8:	1887883a 	add	r3,r3,r2
 402cccc:	182297fa 	slli	r17,r3,31
 402ccd0:	300cd07a 	srli	r6,r6,1
 402ccd4:	1806d07a 	srli	r3,r3,1
 402ccd8:	4821883a 	mov	r16,r9
 402ccdc:	89a2b03a 	or	r17,r17,r6
 402cce0:	003f1b06 	br	402c950 <__alt_data_end+0xfffec950>
 402cce4:	0101ffc4 	movi	r4,2047
 402cce8:	813f441e 	bne	r16,r4,402c9fc <__alt_data_end+0xfffec9fc>
 402ccec:	003f1806 	br	402c950 <__alt_data_end+0xfffec950>
 402ccf0:	843ff844 	addi	r16,r16,-31
 402ccf4:	01400804 	movi	r5,32
 402ccf8:	1408d83a 	srl	r4,r2,r16
 402ccfc:	19405026 	beq	r3,r5,402ce40 <__subdf3+0x574>
 402cd00:	01401004 	movi	r5,64
 402cd04:	28c7c83a 	sub	r3,r5,r3
 402cd08:	10c4983a 	sll	r2,r2,r3
 402cd0c:	88a2b03a 	or	r17,r17,r2
 402cd10:	8822c03a 	cmpne	r17,r17,zero
 402cd14:	2462b03a 	or	r17,r4,r17
 402cd18:	0007883a 	mov	r3,zero
 402cd1c:	0021883a 	mov	r16,zero
 402cd20:	003f6d06 	br	402cad8 <__alt_data_end+0xfffecad8>
 402cd24:	11fff804 	addi	r7,r2,-32
 402cd28:	01000804 	movi	r4,32
 402cd2c:	29ced83a 	srl	r7,r5,r7
 402cd30:	11004526 	beq	r2,r4,402ce48 <__subdf3+0x57c>
 402cd34:	01001004 	movi	r4,64
 402cd38:	2089c83a 	sub	r4,r4,r2
 402cd3c:	2904983a 	sll	r2,r5,r4
 402cd40:	118cb03a 	or	r6,r2,r6
 402cd44:	300cc03a 	cmpne	r6,r6,zero
 402cd48:	398cb03a 	or	r6,r7,r6
 402cd4c:	0005883a 	mov	r2,zero
 402cd50:	003f3706 	br	402ca30 <__alt_data_end+0xfffeca30>
 402cd54:	80002a26 	beq	r16,zero,402ce00 <__subdf3+0x534>
 402cd58:	0101ffc4 	movi	r4,2047
 402cd5c:	49006626 	beq	r9,r4,402cef8 <__subdf3+0x62c>
 402cd60:	0085c83a 	sub	r2,zero,r2
 402cd64:	18c02034 	orhi	r3,r3,128
 402cd68:	01000e04 	movi	r4,56
 402cd6c:	20807e16 	blt	r4,r2,402cf68 <__subdf3+0x69c>
 402cd70:	010007c4 	movi	r4,31
 402cd74:	2080e716 	blt	r4,r2,402d114 <__subdf3+0x848>
 402cd78:	01000804 	movi	r4,32
 402cd7c:	2089c83a 	sub	r4,r4,r2
 402cd80:	1914983a 	sll	r10,r3,r4
 402cd84:	8890d83a 	srl	r8,r17,r2
 402cd88:	8908983a 	sll	r4,r17,r4
 402cd8c:	1884d83a 	srl	r2,r3,r2
 402cd90:	5222b03a 	or	r17,r10,r8
 402cd94:	2006c03a 	cmpne	r3,r4,zero
 402cd98:	88e2b03a 	or	r17,r17,r3
 402cd9c:	3463c83a 	sub	r17,r6,r17
 402cda0:	2885c83a 	sub	r2,r5,r2
 402cda4:	344d803a 	cmpltu	r6,r6,r17
 402cda8:	1187c83a 	sub	r3,r2,r6
 402cdac:	4821883a 	mov	r16,r9
 402cdb0:	3825883a 	mov	r18,r7
 402cdb4:	003f2306 	br	402ca44 <__alt_data_end+0xfffeca44>
 402cdb8:	24d0b03a 	or	r8,r4,r19
 402cdbc:	40001b1e 	bne	r8,zero,402ce2c <__subdf3+0x560>
 402cdc0:	0005883a 	mov	r2,zero
 402cdc4:	0009883a 	mov	r4,zero
 402cdc8:	0021883a 	mov	r16,zero
 402cdcc:	003f4906 	br	402caf4 <__alt_data_end+0xfffecaf4>
 402cdd0:	010007c4 	movi	r4,31
 402cdd4:	20803a16 	blt	r4,r2,402cec0 <__subdf3+0x5f4>
 402cdd8:	01000804 	movi	r4,32
 402cddc:	2089c83a 	sub	r4,r4,r2
 402cde0:	2912983a 	sll	r9,r5,r4
 402cde4:	3090d83a 	srl	r8,r6,r2
 402cde8:	3108983a 	sll	r4,r6,r4
 402cdec:	2884d83a 	srl	r2,r5,r2
 402cdf0:	4a12b03a 	or	r9,r9,r8
 402cdf4:	2008c03a 	cmpne	r4,r4,zero
 402cdf8:	4912b03a 	or	r9,r9,r4
 402cdfc:	003f4e06 	br	402cb38 <__alt_data_end+0xfffecb38>
 402ce00:	1c48b03a 	or	r4,r3,r17
 402ce04:	20003c26 	beq	r4,zero,402cef8 <__subdf3+0x62c>
 402ce08:	0084303a 	nor	r2,zero,r2
 402ce0c:	1000381e 	bne	r2,zero,402cef0 <__subdf3+0x624>
 402ce10:	3463c83a 	sub	r17,r6,r17
 402ce14:	28c5c83a 	sub	r2,r5,r3
 402ce18:	344d803a 	cmpltu	r6,r6,r17
 402ce1c:	1187c83a 	sub	r3,r2,r6
 402ce20:	4821883a 	mov	r16,r9
 402ce24:	3825883a 	mov	r18,r7
 402ce28:	003f0606 	br	402ca44 <__alt_data_end+0xfffeca44>
 402ce2c:	2023883a 	mov	r17,r4
 402ce30:	003f0906 	br	402ca58 <__alt_data_end+0xfffeca58>
 402ce34:	0101ffc4 	movi	r4,2047
 402ce38:	813f3a1e 	bne	r16,r4,402cb24 <__alt_data_end+0xfffecb24>
 402ce3c:	003ec406 	br	402c950 <__alt_data_end+0xfffec950>
 402ce40:	0005883a 	mov	r2,zero
 402ce44:	003fb106 	br	402cd0c <__alt_data_end+0xfffecd0c>
 402ce48:	0005883a 	mov	r2,zero
 402ce4c:	003fbc06 	br	402cd40 <__alt_data_end+0xfffecd40>
 402ce50:	1c44b03a 	or	r2,r3,r17
 402ce54:	80008e1e 	bne	r16,zero,402d090 <__subdf3+0x7c4>
 402ce58:	1000c826 	beq	r2,zero,402d17c <__subdf3+0x8b0>
 402ce5c:	2984b03a 	or	r2,r5,r6
 402ce60:	103ebb26 	beq	r2,zero,402c950 <__alt_data_end+0xfffec950>
 402ce64:	8989883a 	add	r4,r17,r6
 402ce68:	1945883a 	add	r2,r3,r5
 402ce6c:	2447803a 	cmpltu	r3,r4,r17
 402ce70:	1887883a 	add	r3,r3,r2
 402ce74:	1880202c 	andhi	r2,r3,128
 402ce78:	2023883a 	mov	r17,r4
 402ce7c:	103f1626 	beq	r2,zero,402cad8 <__alt_data_end+0xfffecad8>
 402ce80:	00bfe034 	movhi	r2,65408
 402ce84:	10bfffc4 	addi	r2,r2,-1
 402ce88:	5021883a 	mov	r16,r10
 402ce8c:	1886703a 	and	r3,r3,r2
 402ce90:	003eaf06 	br	402c950 <__alt_data_end+0xfffec950>
 402ce94:	3825883a 	mov	r18,r7
 402ce98:	003f0f06 	br	402cad8 <__alt_data_end+0xfffecad8>
 402ce9c:	1c44b03a 	or	r2,r3,r17
 402cea0:	8000251e 	bne	r16,zero,402cf38 <__subdf3+0x66c>
 402cea4:	1000661e 	bne	r2,zero,402d040 <__subdf3+0x774>
 402cea8:	2990b03a 	or	r8,r5,r6
 402ceac:	40009626 	beq	r8,zero,402d108 <__subdf3+0x83c>
 402ceb0:	2807883a 	mov	r3,r5
 402ceb4:	3023883a 	mov	r17,r6
 402ceb8:	3825883a 	mov	r18,r7
 402cebc:	003ea406 	br	402c950 <__alt_data_end+0xfffec950>
 402cec0:	127ff804 	addi	r9,r2,-32
 402cec4:	01000804 	movi	r4,32
 402cec8:	2a52d83a 	srl	r9,r5,r9
 402cecc:	11008c26 	beq	r2,r4,402d100 <__subdf3+0x834>
 402ced0:	01001004 	movi	r4,64
 402ced4:	2085c83a 	sub	r2,r4,r2
 402ced8:	2884983a 	sll	r2,r5,r2
 402cedc:	118cb03a 	or	r6,r2,r6
 402cee0:	300cc03a 	cmpne	r6,r6,zero
 402cee4:	4992b03a 	or	r9,r9,r6
 402cee8:	0005883a 	mov	r2,zero
 402ceec:	003f1206 	br	402cb38 <__alt_data_end+0xfffecb38>
 402cef0:	0101ffc4 	movi	r4,2047
 402cef4:	493f9c1e 	bne	r9,r4,402cd68 <__alt_data_end+0xfffecd68>
 402cef8:	2807883a 	mov	r3,r5
 402cefc:	3023883a 	mov	r17,r6
 402cf00:	4821883a 	mov	r16,r9
 402cf04:	3825883a 	mov	r18,r7
 402cf08:	003e9106 	br	402c950 <__alt_data_end+0xfffec950>
 402cf0c:	80001f1e 	bne	r16,zero,402cf8c <__subdf3+0x6c0>
 402cf10:	1c48b03a 	or	r4,r3,r17
 402cf14:	20005a26 	beq	r4,zero,402d080 <__subdf3+0x7b4>
 402cf18:	0084303a 	nor	r2,zero,r2
 402cf1c:	1000561e 	bne	r2,zero,402d078 <__subdf3+0x7ac>
 402cf20:	89a3883a 	add	r17,r17,r6
 402cf24:	1945883a 	add	r2,r3,r5
 402cf28:	898d803a 	cmpltu	r6,r17,r6
 402cf2c:	3087883a 	add	r3,r6,r2
 402cf30:	4821883a 	mov	r16,r9
 402cf34:	003f0506 	br	402cb4c <__alt_data_end+0xfffecb4c>
 402cf38:	10002b1e 	bne	r2,zero,402cfe8 <__subdf3+0x71c>
 402cf3c:	2984b03a 	or	r2,r5,r6
 402cf40:	10008026 	beq	r2,zero,402d144 <__subdf3+0x878>
 402cf44:	2807883a 	mov	r3,r5
 402cf48:	3023883a 	mov	r17,r6
 402cf4c:	3825883a 	mov	r18,r7
 402cf50:	0401ffc4 	movi	r16,2047
 402cf54:	003e7e06 	br	402c950 <__alt_data_end+0xfffec950>
 402cf58:	3809883a 	mov	r4,r7
 402cf5c:	0011883a 	mov	r8,zero
 402cf60:	0005883a 	mov	r2,zero
 402cf64:	003ee306 	br	402caf4 <__alt_data_end+0xfffecaf4>
 402cf68:	1c62b03a 	or	r17,r3,r17
 402cf6c:	8822c03a 	cmpne	r17,r17,zero
 402cf70:	0005883a 	mov	r2,zero
 402cf74:	003f8906 	br	402cd9c <__alt_data_end+0xfffecd9c>
 402cf78:	3809883a 	mov	r4,r7
 402cf7c:	4821883a 	mov	r16,r9
 402cf80:	0011883a 	mov	r8,zero
 402cf84:	0005883a 	mov	r2,zero
 402cf88:	003eda06 	br	402caf4 <__alt_data_end+0xfffecaf4>
 402cf8c:	0101ffc4 	movi	r4,2047
 402cf90:	49003b26 	beq	r9,r4,402d080 <__subdf3+0x7b4>
 402cf94:	0085c83a 	sub	r2,zero,r2
 402cf98:	18c02034 	orhi	r3,r3,128
 402cf9c:	01000e04 	movi	r4,56
 402cfa0:	20806e16 	blt	r4,r2,402d15c <__subdf3+0x890>
 402cfa4:	010007c4 	movi	r4,31
 402cfa8:	20807716 	blt	r4,r2,402d188 <__subdf3+0x8bc>
 402cfac:	01000804 	movi	r4,32
 402cfb0:	2089c83a 	sub	r4,r4,r2
 402cfb4:	1914983a 	sll	r10,r3,r4
 402cfb8:	8890d83a 	srl	r8,r17,r2
 402cfbc:	8908983a 	sll	r4,r17,r4
 402cfc0:	1884d83a 	srl	r2,r3,r2
 402cfc4:	5222b03a 	or	r17,r10,r8
 402cfc8:	2006c03a 	cmpne	r3,r4,zero
 402cfcc:	88e2b03a 	or	r17,r17,r3
 402cfd0:	89a3883a 	add	r17,r17,r6
 402cfd4:	1145883a 	add	r2,r2,r5
 402cfd8:	898d803a 	cmpltu	r6,r17,r6
 402cfdc:	3087883a 	add	r3,r6,r2
 402cfe0:	4821883a 	mov	r16,r9
 402cfe4:	003ed906 	br	402cb4c <__alt_data_end+0xfffecb4c>
 402cfe8:	2984b03a 	or	r2,r5,r6
 402cfec:	10004226 	beq	r2,zero,402d0f8 <__subdf3+0x82c>
 402cff0:	1808d0fa 	srli	r4,r3,3
 402cff4:	8822d0fa 	srli	r17,r17,3
 402cff8:	1806977a 	slli	r3,r3,29
 402cffc:	2080022c 	andhi	r2,r4,8
 402d000:	1c62b03a 	or	r17,r3,r17
 402d004:	10000826 	beq	r2,zero,402d028 <__subdf3+0x75c>
 402d008:	2812d0fa 	srli	r9,r5,3
 402d00c:	4880022c 	andhi	r2,r9,8
 402d010:	1000051e 	bne	r2,zero,402d028 <__subdf3+0x75c>
 402d014:	300cd0fa 	srli	r6,r6,3
 402d018:	2804977a 	slli	r2,r5,29
 402d01c:	4809883a 	mov	r4,r9
 402d020:	3825883a 	mov	r18,r7
 402d024:	11a2b03a 	or	r17,r2,r6
 402d028:	8806d77a 	srli	r3,r17,29
 402d02c:	200890fa 	slli	r4,r4,3
 402d030:	882290fa 	slli	r17,r17,3
 402d034:	0401ffc4 	movi	r16,2047
 402d038:	1906b03a 	or	r3,r3,r4
 402d03c:	003e4406 	br	402c950 <__alt_data_end+0xfffec950>
 402d040:	2984b03a 	or	r2,r5,r6
 402d044:	103e4226 	beq	r2,zero,402c950 <__alt_data_end+0xfffec950>
 402d048:	8989c83a 	sub	r4,r17,r6
 402d04c:	8911803a 	cmpltu	r8,r17,r4
 402d050:	1945c83a 	sub	r2,r3,r5
 402d054:	1205c83a 	sub	r2,r2,r8
 402d058:	1200202c 	andhi	r8,r2,128
 402d05c:	403e9a26 	beq	r8,zero,402cac8 <__alt_data_end+0xfffecac8>
 402d060:	3463c83a 	sub	r17,r6,r17
 402d064:	28c5c83a 	sub	r2,r5,r3
 402d068:	344d803a 	cmpltu	r6,r6,r17
 402d06c:	1187c83a 	sub	r3,r2,r6
 402d070:	3825883a 	mov	r18,r7
 402d074:	003e3606 	br	402c950 <__alt_data_end+0xfffec950>
 402d078:	0101ffc4 	movi	r4,2047
 402d07c:	493fc71e 	bne	r9,r4,402cf9c <__alt_data_end+0xfffecf9c>
 402d080:	2807883a 	mov	r3,r5
 402d084:	3023883a 	mov	r17,r6
 402d088:	4821883a 	mov	r16,r9
 402d08c:	003e3006 	br	402c950 <__alt_data_end+0xfffec950>
 402d090:	10003626 	beq	r2,zero,402d16c <__subdf3+0x8a0>
 402d094:	2984b03a 	or	r2,r5,r6
 402d098:	10001726 	beq	r2,zero,402d0f8 <__subdf3+0x82c>
 402d09c:	1808d0fa 	srli	r4,r3,3
 402d0a0:	8822d0fa 	srli	r17,r17,3
 402d0a4:	1806977a 	slli	r3,r3,29
 402d0a8:	2080022c 	andhi	r2,r4,8
 402d0ac:	1c62b03a 	or	r17,r3,r17
 402d0b0:	10000726 	beq	r2,zero,402d0d0 <__subdf3+0x804>
 402d0b4:	2812d0fa 	srli	r9,r5,3
 402d0b8:	4880022c 	andhi	r2,r9,8
 402d0bc:	1000041e 	bne	r2,zero,402d0d0 <__subdf3+0x804>
 402d0c0:	300cd0fa 	srli	r6,r6,3
 402d0c4:	2804977a 	slli	r2,r5,29
 402d0c8:	4809883a 	mov	r4,r9
 402d0cc:	11a2b03a 	or	r17,r2,r6
 402d0d0:	8806d77a 	srli	r3,r17,29
 402d0d4:	200890fa 	slli	r4,r4,3
 402d0d8:	882290fa 	slli	r17,r17,3
 402d0dc:	3825883a 	mov	r18,r7
 402d0e0:	1906b03a 	or	r3,r3,r4
 402d0e4:	0401ffc4 	movi	r16,2047
 402d0e8:	003e1906 	br	402c950 <__alt_data_end+0xfffec950>
 402d0ec:	000b883a 	mov	r5,zero
 402d0f0:	0005883a 	mov	r2,zero
 402d0f4:	003e2e06 	br	402c9b0 <__alt_data_end+0xfffec9b0>
 402d0f8:	0401ffc4 	movi	r16,2047
 402d0fc:	003e1406 	br	402c950 <__alt_data_end+0xfffec950>
 402d100:	0005883a 	mov	r2,zero
 402d104:	003f7506 	br	402cedc <__alt_data_end+0xfffecedc>
 402d108:	0005883a 	mov	r2,zero
 402d10c:	0009883a 	mov	r4,zero
 402d110:	003e7806 	br	402caf4 <__alt_data_end+0xfffecaf4>
 402d114:	123ff804 	addi	r8,r2,-32
 402d118:	01000804 	movi	r4,32
 402d11c:	1a10d83a 	srl	r8,r3,r8
 402d120:	11002526 	beq	r2,r4,402d1b8 <__subdf3+0x8ec>
 402d124:	01001004 	movi	r4,64
 402d128:	2085c83a 	sub	r2,r4,r2
 402d12c:	1884983a 	sll	r2,r3,r2
 402d130:	1444b03a 	or	r2,r2,r17
 402d134:	1004c03a 	cmpne	r2,r2,zero
 402d138:	40a2b03a 	or	r17,r8,r2
 402d13c:	0005883a 	mov	r2,zero
 402d140:	003f1606 	br	402cd9c <__alt_data_end+0xfffecd9c>
 402d144:	02000434 	movhi	r8,16
 402d148:	0009883a 	mov	r4,zero
 402d14c:	423fffc4 	addi	r8,r8,-1
 402d150:	00bfffc4 	movi	r2,-1
 402d154:	0401ffc4 	movi	r16,2047
 402d158:	003e6606 	br	402caf4 <__alt_data_end+0xfffecaf4>
 402d15c:	1c62b03a 	or	r17,r3,r17
 402d160:	8822c03a 	cmpne	r17,r17,zero
 402d164:	0005883a 	mov	r2,zero
 402d168:	003f9906 	br	402cfd0 <__alt_data_end+0xfffecfd0>
 402d16c:	2807883a 	mov	r3,r5
 402d170:	3023883a 	mov	r17,r6
 402d174:	0401ffc4 	movi	r16,2047
 402d178:	003df506 	br	402c950 <__alt_data_end+0xfffec950>
 402d17c:	2807883a 	mov	r3,r5
 402d180:	3023883a 	mov	r17,r6
 402d184:	003df206 	br	402c950 <__alt_data_end+0xfffec950>
 402d188:	123ff804 	addi	r8,r2,-32
 402d18c:	01000804 	movi	r4,32
 402d190:	1a10d83a 	srl	r8,r3,r8
 402d194:	11000a26 	beq	r2,r4,402d1c0 <__subdf3+0x8f4>
 402d198:	01001004 	movi	r4,64
 402d19c:	2085c83a 	sub	r2,r4,r2
 402d1a0:	1884983a 	sll	r2,r3,r2
 402d1a4:	1444b03a 	or	r2,r2,r17
 402d1a8:	1004c03a 	cmpne	r2,r2,zero
 402d1ac:	40a2b03a 	or	r17,r8,r2
 402d1b0:	0005883a 	mov	r2,zero
 402d1b4:	003f8606 	br	402cfd0 <__alt_data_end+0xfffecfd0>
 402d1b8:	0005883a 	mov	r2,zero
 402d1bc:	003fdc06 	br	402d130 <__alt_data_end+0xfffed130>
 402d1c0:	0005883a 	mov	r2,zero
 402d1c4:	003ff706 	br	402d1a4 <__alt_data_end+0xfffed1a4>

0402d1c8 <__fixdfsi>:
 402d1c8:	280cd53a 	srli	r6,r5,20
 402d1cc:	00c00434 	movhi	r3,16
 402d1d0:	18ffffc4 	addi	r3,r3,-1
 402d1d4:	3181ffcc 	andi	r6,r6,2047
 402d1d8:	01c0ff84 	movi	r7,1022
 402d1dc:	28c6703a 	and	r3,r5,r3
 402d1e0:	280ad7fa 	srli	r5,r5,31
 402d1e4:	3980120e 	bge	r7,r6,402d230 <__fixdfsi+0x68>
 402d1e8:	00810744 	movi	r2,1053
 402d1ec:	11800c16 	blt	r2,r6,402d220 <__fixdfsi+0x58>
 402d1f0:	00810cc4 	movi	r2,1075
 402d1f4:	1185c83a 	sub	r2,r2,r6
 402d1f8:	01c007c4 	movi	r7,31
 402d1fc:	18c00434 	orhi	r3,r3,16
 402d200:	38800d16 	blt	r7,r2,402d238 <__fixdfsi+0x70>
 402d204:	31befb44 	addi	r6,r6,-1043
 402d208:	2084d83a 	srl	r2,r4,r2
 402d20c:	1986983a 	sll	r3,r3,r6
 402d210:	1884b03a 	or	r2,r3,r2
 402d214:	28000726 	beq	r5,zero,402d234 <__fixdfsi+0x6c>
 402d218:	0085c83a 	sub	r2,zero,r2
 402d21c:	f800283a 	ret
 402d220:	00a00034 	movhi	r2,32768
 402d224:	10bfffc4 	addi	r2,r2,-1
 402d228:	2885883a 	add	r2,r5,r2
 402d22c:	f800283a 	ret
 402d230:	0005883a 	mov	r2,zero
 402d234:	f800283a 	ret
 402d238:	008104c4 	movi	r2,1043
 402d23c:	1185c83a 	sub	r2,r2,r6
 402d240:	1884d83a 	srl	r2,r3,r2
 402d244:	003ff306 	br	402d214 <__alt_data_end+0xfffed214>

0402d248 <__floatsidf>:
 402d248:	defffd04 	addi	sp,sp,-12
 402d24c:	dfc00215 	stw	ra,8(sp)
 402d250:	dc400115 	stw	r17,4(sp)
 402d254:	dc000015 	stw	r16,0(sp)
 402d258:	20002b26 	beq	r4,zero,402d308 <__floatsidf+0xc0>
 402d25c:	2023883a 	mov	r17,r4
 402d260:	2020d7fa 	srli	r16,r4,31
 402d264:	20002d16 	blt	r4,zero,402d31c <__floatsidf+0xd4>
 402d268:	8809883a 	mov	r4,r17
 402d26c:	402d3cc0 	call	402d3cc <__clzsi2>
 402d270:	01410784 	movi	r5,1054
 402d274:	288bc83a 	sub	r5,r5,r2
 402d278:	01010cc4 	movi	r4,1075
 402d27c:	2149c83a 	sub	r4,r4,r5
 402d280:	00c007c4 	movi	r3,31
 402d284:	1900160e 	bge	r3,r4,402d2e0 <__floatsidf+0x98>
 402d288:	00c104c4 	movi	r3,1043
 402d28c:	1947c83a 	sub	r3,r3,r5
 402d290:	88c6983a 	sll	r3,r17,r3
 402d294:	00800434 	movhi	r2,16
 402d298:	10bfffc4 	addi	r2,r2,-1
 402d29c:	1886703a 	and	r3,r3,r2
 402d2a0:	2941ffcc 	andi	r5,r5,2047
 402d2a4:	800d883a 	mov	r6,r16
 402d2a8:	0005883a 	mov	r2,zero
 402d2ac:	280a953a 	slli	r5,r5,20
 402d2b0:	31803fcc 	andi	r6,r6,255
 402d2b4:	01000434 	movhi	r4,16
 402d2b8:	300c97fa 	slli	r6,r6,31
 402d2bc:	213fffc4 	addi	r4,r4,-1
 402d2c0:	1906703a 	and	r3,r3,r4
 402d2c4:	1946b03a 	or	r3,r3,r5
 402d2c8:	1986b03a 	or	r3,r3,r6
 402d2cc:	dfc00217 	ldw	ra,8(sp)
 402d2d0:	dc400117 	ldw	r17,4(sp)
 402d2d4:	dc000017 	ldw	r16,0(sp)
 402d2d8:	dec00304 	addi	sp,sp,12
 402d2dc:	f800283a 	ret
 402d2e0:	00c002c4 	movi	r3,11
 402d2e4:	1887c83a 	sub	r3,r3,r2
 402d2e8:	88c6d83a 	srl	r3,r17,r3
 402d2ec:	8904983a 	sll	r2,r17,r4
 402d2f0:	01000434 	movhi	r4,16
 402d2f4:	213fffc4 	addi	r4,r4,-1
 402d2f8:	2941ffcc 	andi	r5,r5,2047
 402d2fc:	1906703a 	and	r3,r3,r4
 402d300:	800d883a 	mov	r6,r16
 402d304:	003fe906 	br	402d2ac <__alt_data_end+0xfffed2ac>
 402d308:	000d883a 	mov	r6,zero
 402d30c:	000b883a 	mov	r5,zero
 402d310:	0007883a 	mov	r3,zero
 402d314:	0005883a 	mov	r2,zero
 402d318:	003fe406 	br	402d2ac <__alt_data_end+0xfffed2ac>
 402d31c:	0123c83a 	sub	r17,zero,r4
 402d320:	003fd106 	br	402d268 <__alt_data_end+0xfffed268>

0402d324 <__floatunsidf>:
 402d324:	defffe04 	addi	sp,sp,-8
 402d328:	dc000015 	stw	r16,0(sp)
 402d32c:	dfc00115 	stw	ra,4(sp)
 402d330:	2021883a 	mov	r16,r4
 402d334:	20002226 	beq	r4,zero,402d3c0 <__floatunsidf+0x9c>
 402d338:	402d3cc0 	call	402d3cc <__clzsi2>
 402d33c:	01010784 	movi	r4,1054
 402d340:	2089c83a 	sub	r4,r4,r2
 402d344:	01810cc4 	movi	r6,1075
 402d348:	310dc83a 	sub	r6,r6,r4
 402d34c:	00c007c4 	movi	r3,31
 402d350:	1980120e 	bge	r3,r6,402d39c <__floatunsidf+0x78>
 402d354:	00c104c4 	movi	r3,1043
 402d358:	1907c83a 	sub	r3,r3,r4
 402d35c:	80ca983a 	sll	r5,r16,r3
 402d360:	00800434 	movhi	r2,16
 402d364:	10bfffc4 	addi	r2,r2,-1
 402d368:	2101ffcc 	andi	r4,r4,2047
 402d36c:	0021883a 	mov	r16,zero
 402d370:	288a703a 	and	r5,r5,r2
 402d374:	2008953a 	slli	r4,r4,20
 402d378:	00c00434 	movhi	r3,16
 402d37c:	18ffffc4 	addi	r3,r3,-1
 402d380:	28c6703a 	and	r3,r5,r3
 402d384:	8005883a 	mov	r2,r16
 402d388:	1906b03a 	or	r3,r3,r4
 402d38c:	dfc00117 	ldw	ra,4(sp)
 402d390:	dc000017 	ldw	r16,0(sp)
 402d394:	dec00204 	addi	sp,sp,8
 402d398:	f800283a 	ret
 402d39c:	00c002c4 	movi	r3,11
 402d3a0:	188bc83a 	sub	r5,r3,r2
 402d3a4:	814ad83a 	srl	r5,r16,r5
 402d3a8:	00c00434 	movhi	r3,16
 402d3ac:	18ffffc4 	addi	r3,r3,-1
 402d3b0:	81a0983a 	sll	r16,r16,r6
 402d3b4:	2101ffcc 	andi	r4,r4,2047
 402d3b8:	28ca703a 	and	r5,r5,r3
 402d3bc:	003fed06 	br	402d374 <__alt_data_end+0xfffed374>
 402d3c0:	0009883a 	mov	r4,zero
 402d3c4:	000b883a 	mov	r5,zero
 402d3c8:	003fea06 	br	402d374 <__alt_data_end+0xfffed374>

0402d3cc <__clzsi2>:
 402d3cc:	00bfffd4 	movui	r2,65535
 402d3d0:	11000536 	bltu	r2,r4,402d3e8 <__clzsi2+0x1c>
 402d3d4:	00803fc4 	movi	r2,255
 402d3d8:	11000f36 	bltu	r2,r4,402d418 <__clzsi2+0x4c>
 402d3dc:	00800804 	movi	r2,32
 402d3e0:	0007883a 	mov	r3,zero
 402d3e4:	00000506 	br	402d3fc <__clzsi2+0x30>
 402d3e8:	00804034 	movhi	r2,256
 402d3ec:	10bfffc4 	addi	r2,r2,-1
 402d3f0:	11000c2e 	bgeu	r2,r4,402d424 <__clzsi2+0x58>
 402d3f4:	00800204 	movi	r2,8
 402d3f8:	00c00604 	movi	r3,24
 402d3fc:	20c8d83a 	srl	r4,r4,r3
 402d400:	00c100f4 	movhi	r3,1027
 402d404:	18c4f904 	addi	r3,r3,5092
 402d408:	1909883a 	add	r4,r3,r4
 402d40c:	20c00003 	ldbu	r3,0(r4)
 402d410:	10c5c83a 	sub	r2,r2,r3
 402d414:	f800283a 	ret
 402d418:	00800604 	movi	r2,24
 402d41c:	00c00204 	movi	r3,8
 402d420:	003ff606 	br	402d3fc <__alt_data_end+0xfffed3fc>
 402d424:	00800404 	movi	r2,16
 402d428:	1007883a 	mov	r3,r2
 402d42c:	003ff306 	br	402d3fc <__alt_data_end+0xfffed3fc>

0402d430 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 402d430:	defffe04 	addi	sp,sp,-8
 402d434:	dfc00115 	stw	ra,4(sp)
 402d438:	df000015 	stw	fp,0(sp)
 402d43c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 402d440:	d0a00b17 	ldw	r2,-32724(gp)
 402d444:	10000326 	beq	r2,zero,402d454 <alt_get_errno+0x24>
 402d448:	d0a00b17 	ldw	r2,-32724(gp)
 402d44c:	103ee83a 	callr	r2
 402d450:	00000106 	br	402d458 <alt_get_errno+0x28>
 402d454:	d0a70604 	addi	r2,gp,-25576
}
 402d458:	e037883a 	mov	sp,fp
 402d45c:	dfc00117 	ldw	ra,4(sp)
 402d460:	df000017 	ldw	fp,0(sp)
 402d464:	dec00204 	addi	sp,sp,8
 402d468:	f800283a 	ret

0402d46c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 402d46c:	defffb04 	addi	sp,sp,-20
 402d470:	dfc00415 	stw	ra,16(sp)
 402d474:	df000315 	stw	fp,12(sp)
 402d478:	df000304 	addi	fp,sp,12
 402d47c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 402d480:	e0bfff17 	ldw	r2,-4(fp)
 402d484:	10000616 	blt	r2,zero,402d4a0 <close+0x34>
 402d488:	e0bfff17 	ldw	r2,-4(fp)
 402d48c:	10c00324 	muli	r3,r2,12
 402d490:	008100f4 	movhi	r2,1027
 402d494:	1087cf04 	addi	r2,r2,7996
 402d498:	1885883a 	add	r2,r3,r2
 402d49c:	00000106 	br	402d4a4 <close+0x38>
 402d4a0:	0005883a 	mov	r2,zero
 402d4a4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 402d4a8:	e0bffd17 	ldw	r2,-12(fp)
 402d4ac:	10001926 	beq	r2,zero,402d514 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 402d4b0:	e0bffd17 	ldw	r2,-12(fp)
 402d4b4:	10800017 	ldw	r2,0(r2)
 402d4b8:	10800417 	ldw	r2,16(r2)
 402d4bc:	10000626 	beq	r2,zero,402d4d8 <close+0x6c>
 402d4c0:	e0bffd17 	ldw	r2,-12(fp)
 402d4c4:	10800017 	ldw	r2,0(r2)
 402d4c8:	10800417 	ldw	r2,16(r2)
 402d4cc:	e13ffd17 	ldw	r4,-12(fp)
 402d4d0:	103ee83a 	callr	r2
 402d4d4:	00000106 	br	402d4dc <close+0x70>
 402d4d8:	0005883a 	mov	r2,zero
 402d4dc:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 402d4e0:	e13fff17 	ldw	r4,-4(fp)
 402d4e4:	402de140 	call	402de14 <alt_release_fd>
    if (rval < 0)
 402d4e8:	e0bffe17 	ldw	r2,-8(fp)
 402d4ec:	1000070e 	bge	r2,zero,402d50c <close+0xa0>
    {
      ALT_ERRNO = -rval;
 402d4f0:	402d4300 	call	402d430 <alt_get_errno>
 402d4f4:	1007883a 	mov	r3,r2
 402d4f8:	e0bffe17 	ldw	r2,-8(fp)
 402d4fc:	0085c83a 	sub	r2,zero,r2
 402d500:	18800015 	stw	r2,0(r3)
      return -1;
 402d504:	00bfffc4 	movi	r2,-1
 402d508:	00000706 	br	402d528 <close+0xbc>
    }
    return 0;
 402d50c:	0005883a 	mov	r2,zero
 402d510:	00000506 	br	402d528 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 402d514:	402d4300 	call	402d430 <alt_get_errno>
 402d518:	1007883a 	mov	r3,r2
 402d51c:	00801444 	movi	r2,81
 402d520:	18800015 	stw	r2,0(r3)
    return -1;
 402d524:	00bfffc4 	movi	r2,-1
  }
}
 402d528:	e037883a 	mov	sp,fp
 402d52c:	dfc00117 	ldw	ra,4(sp)
 402d530:	df000017 	ldw	fp,0(sp)
 402d534:	dec00204 	addi	sp,sp,8
 402d538:	f800283a 	ret

0402d53c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 402d53c:	defffe04 	addi	sp,sp,-8
 402d540:	df000115 	stw	fp,4(sp)
 402d544:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 402d548:	e03fff15 	stw	zero,-4(fp)
 402d54c:	00000506 	br	402d564 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 402d550:	e0bfff17 	ldw	r2,-4(fp)
 402d554:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 402d558:	e0bfff17 	ldw	r2,-4(fp)
 402d55c:	10800804 	addi	r2,r2,32
 402d560:	e0bfff15 	stw	r2,-4(fp)
 402d564:	e0bfff17 	ldw	r2,-4(fp)
 402d568:	10820030 	cmpltui	r2,r2,2048
 402d56c:	103ff81e 	bne	r2,zero,402d550 <__alt_data_end+0xfffed550>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 402d570:	0001883a 	nop
 402d574:	e037883a 	mov	sp,fp
 402d578:	df000017 	ldw	fp,0(sp)
 402d57c:	dec00104 	addi	sp,sp,4
 402d580:	f800283a 	ret

0402d584 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 402d584:	defffc04 	addi	sp,sp,-16
 402d588:	df000315 	stw	fp,12(sp)
 402d58c:	df000304 	addi	fp,sp,12
 402d590:	e13ffd15 	stw	r4,-12(fp)
 402d594:	e17ffe15 	stw	r5,-8(fp)
 402d598:	e1bfff15 	stw	r6,-4(fp)
  return len;
 402d59c:	e0bfff17 	ldw	r2,-4(fp)
}
 402d5a0:	e037883a 	mov	sp,fp
 402d5a4:	df000017 	ldw	fp,0(sp)
 402d5a8:	dec00104 	addi	sp,sp,4
 402d5ac:	f800283a 	ret

0402d5b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 402d5b0:	defffe04 	addi	sp,sp,-8
 402d5b4:	dfc00115 	stw	ra,4(sp)
 402d5b8:	df000015 	stw	fp,0(sp)
 402d5bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 402d5c0:	d0a00b17 	ldw	r2,-32724(gp)
 402d5c4:	10000326 	beq	r2,zero,402d5d4 <alt_get_errno+0x24>
 402d5c8:	d0a00b17 	ldw	r2,-32724(gp)
 402d5cc:	103ee83a 	callr	r2
 402d5d0:	00000106 	br	402d5d8 <alt_get_errno+0x28>
 402d5d4:	d0a70604 	addi	r2,gp,-25576
}
 402d5d8:	e037883a 	mov	sp,fp
 402d5dc:	dfc00117 	ldw	ra,4(sp)
 402d5e0:	df000017 	ldw	fp,0(sp)
 402d5e4:	dec00204 	addi	sp,sp,8
 402d5e8:	f800283a 	ret

0402d5ec <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 402d5ec:	defffb04 	addi	sp,sp,-20
 402d5f0:	dfc00415 	stw	ra,16(sp)
 402d5f4:	df000315 	stw	fp,12(sp)
 402d5f8:	df000304 	addi	fp,sp,12
 402d5fc:	e13ffe15 	stw	r4,-8(fp)
 402d600:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 402d604:	e0bffe17 	ldw	r2,-8(fp)
 402d608:	10000616 	blt	r2,zero,402d624 <fstat+0x38>
 402d60c:	e0bffe17 	ldw	r2,-8(fp)
 402d610:	10c00324 	muli	r3,r2,12
 402d614:	008100f4 	movhi	r2,1027
 402d618:	1087cf04 	addi	r2,r2,7996
 402d61c:	1885883a 	add	r2,r3,r2
 402d620:	00000106 	br	402d628 <fstat+0x3c>
 402d624:	0005883a 	mov	r2,zero
 402d628:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 402d62c:	e0bffd17 	ldw	r2,-12(fp)
 402d630:	10001026 	beq	r2,zero,402d674 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 402d634:	e0bffd17 	ldw	r2,-12(fp)
 402d638:	10800017 	ldw	r2,0(r2)
 402d63c:	10800817 	ldw	r2,32(r2)
 402d640:	10000726 	beq	r2,zero,402d660 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 402d644:	e0bffd17 	ldw	r2,-12(fp)
 402d648:	10800017 	ldw	r2,0(r2)
 402d64c:	10800817 	ldw	r2,32(r2)
 402d650:	e17fff17 	ldw	r5,-4(fp)
 402d654:	e13ffd17 	ldw	r4,-12(fp)
 402d658:	103ee83a 	callr	r2
 402d65c:	00000a06 	br	402d688 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 402d660:	e0bfff17 	ldw	r2,-4(fp)
 402d664:	00c80004 	movi	r3,8192
 402d668:	10c00115 	stw	r3,4(r2)
      return 0;
 402d66c:	0005883a 	mov	r2,zero
 402d670:	00000506 	br	402d688 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 402d674:	402d5b00 	call	402d5b0 <alt_get_errno>
 402d678:	1007883a 	mov	r3,r2
 402d67c:	00801444 	movi	r2,81
 402d680:	18800015 	stw	r2,0(r3)
    return -1;
 402d684:	00bfffc4 	movi	r2,-1
  }
}
 402d688:	e037883a 	mov	sp,fp
 402d68c:	dfc00117 	ldw	ra,4(sp)
 402d690:	df000017 	ldw	fp,0(sp)
 402d694:	dec00204 	addi	sp,sp,8
 402d698:	f800283a 	ret

0402d69c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 402d69c:	defff904 	addi	sp,sp,-28
 402d6a0:	dfc00615 	stw	ra,24(sp)
 402d6a4:	df000515 	stw	fp,20(sp)
 402d6a8:	df000504 	addi	fp,sp,20
 402d6ac:	e13ffc15 	stw	r4,-16(fp)
 402d6b0:	e17ffd15 	stw	r5,-12(fp)
 402d6b4:	e1bffe15 	stw	r6,-8(fp)
 402d6b8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 402d6bc:	e0800217 	ldw	r2,8(fp)
 402d6c0:	d8800015 	stw	r2,0(sp)
 402d6c4:	e1ffff17 	ldw	r7,-4(fp)
 402d6c8:	e1bffe17 	ldw	r6,-8(fp)
 402d6cc:	e17ffd17 	ldw	r5,-12(fp)
 402d6d0:	e13ffc17 	ldw	r4,-16(fp)
 402d6d4:	402d84c0 	call	402d84c <alt_iic_isr_register>
}  
 402d6d8:	e037883a 	mov	sp,fp
 402d6dc:	dfc00117 	ldw	ra,4(sp)
 402d6e0:	df000017 	ldw	fp,0(sp)
 402d6e4:	dec00204 	addi	sp,sp,8
 402d6e8:	f800283a 	ret

0402d6ec <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 402d6ec:	defff904 	addi	sp,sp,-28
 402d6f0:	df000615 	stw	fp,24(sp)
 402d6f4:	df000604 	addi	fp,sp,24
 402d6f8:	e13ffe15 	stw	r4,-8(fp)
 402d6fc:	e17fff15 	stw	r5,-4(fp)
 402d700:	e0bfff17 	ldw	r2,-4(fp)
 402d704:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402d708:	0005303a 	rdctl	r2,status
 402d70c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402d710:	e0fffb17 	ldw	r3,-20(fp)
 402d714:	00bfff84 	movi	r2,-2
 402d718:	1884703a 	and	r2,r3,r2
 402d71c:	1001703a 	wrctl	status,r2
  
  return context;
 402d720:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 402d724:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 402d728:	00c00044 	movi	r3,1
 402d72c:	e0bffa17 	ldw	r2,-24(fp)
 402d730:	1884983a 	sll	r2,r3,r2
 402d734:	1007883a 	mov	r3,r2
 402d738:	d0a70717 	ldw	r2,-25572(gp)
 402d73c:	1884b03a 	or	r2,r3,r2
 402d740:	d0a70715 	stw	r2,-25572(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 402d744:	d0a70717 	ldw	r2,-25572(gp)
 402d748:	100170fa 	wrctl	ienable,r2
 402d74c:	e0bffc17 	ldw	r2,-16(fp)
 402d750:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402d754:	e0bffd17 	ldw	r2,-12(fp)
 402d758:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 402d75c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 402d760:	0001883a 	nop
}
 402d764:	e037883a 	mov	sp,fp
 402d768:	df000017 	ldw	fp,0(sp)
 402d76c:	dec00104 	addi	sp,sp,4
 402d770:	f800283a 	ret

0402d774 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 402d774:	defff904 	addi	sp,sp,-28
 402d778:	df000615 	stw	fp,24(sp)
 402d77c:	df000604 	addi	fp,sp,24
 402d780:	e13ffe15 	stw	r4,-8(fp)
 402d784:	e17fff15 	stw	r5,-4(fp)
 402d788:	e0bfff17 	ldw	r2,-4(fp)
 402d78c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402d790:	0005303a 	rdctl	r2,status
 402d794:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402d798:	e0fffb17 	ldw	r3,-20(fp)
 402d79c:	00bfff84 	movi	r2,-2
 402d7a0:	1884703a 	and	r2,r3,r2
 402d7a4:	1001703a 	wrctl	status,r2
  
  return context;
 402d7a8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 402d7ac:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 402d7b0:	00c00044 	movi	r3,1
 402d7b4:	e0bffa17 	ldw	r2,-24(fp)
 402d7b8:	1884983a 	sll	r2,r3,r2
 402d7bc:	0084303a 	nor	r2,zero,r2
 402d7c0:	1007883a 	mov	r3,r2
 402d7c4:	d0a70717 	ldw	r2,-25572(gp)
 402d7c8:	1884703a 	and	r2,r3,r2
 402d7cc:	d0a70715 	stw	r2,-25572(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 402d7d0:	d0a70717 	ldw	r2,-25572(gp)
 402d7d4:	100170fa 	wrctl	ienable,r2
 402d7d8:	e0bffc17 	ldw	r2,-16(fp)
 402d7dc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402d7e0:	e0bffd17 	ldw	r2,-12(fp)
 402d7e4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 402d7e8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 402d7ec:	0001883a 	nop
}
 402d7f0:	e037883a 	mov	sp,fp
 402d7f4:	df000017 	ldw	fp,0(sp)
 402d7f8:	dec00104 	addi	sp,sp,4
 402d7fc:	f800283a 	ret

0402d800 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 402d800:	defffc04 	addi	sp,sp,-16
 402d804:	df000315 	stw	fp,12(sp)
 402d808:	df000304 	addi	fp,sp,12
 402d80c:	e13ffe15 	stw	r4,-8(fp)
 402d810:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 402d814:	000530fa 	rdctl	r2,ienable
 402d818:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 402d81c:	00c00044 	movi	r3,1
 402d820:	e0bfff17 	ldw	r2,-4(fp)
 402d824:	1884983a 	sll	r2,r3,r2
 402d828:	1007883a 	mov	r3,r2
 402d82c:	e0bffd17 	ldw	r2,-12(fp)
 402d830:	1884703a 	and	r2,r3,r2
 402d834:	1004c03a 	cmpne	r2,r2,zero
 402d838:	10803fcc 	andi	r2,r2,255
}
 402d83c:	e037883a 	mov	sp,fp
 402d840:	df000017 	ldw	fp,0(sp)
 402d844:	dec00104 	addi	sp,sp,4
 402d848:	f800283a 	ret

0402d84c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 402d84c:	defff504 	addi	sp,sp,-44
 402d850:	dfc00a15 	stw	ra,40(sp)
 402d854:	df000915 	stw	fp,36(sp)
 402d858:	df000904 	addi	fp,sp,36
 402d85c:	e13ffc15 	stw	r4,-16(fp)
 402d860:	e17ffd15 	stw	r5,-12(fp)
 402d864:	e1bffe15 	stw	r6,-8(fp)
 402d868:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 402d86c:	00bffa84 	movi	r2,-22
 402d870:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 402d874:	e0bffd17 	ldw	r2,-12(fp)
 402d878:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 402d87c:	e0bff817 	ldw	r2,-32(fp)
 402d880:	10800808 	cmpgei	r2,r2,32
 402d884:	1000271e 	bne	r2,zero,402d924 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402d888:	0005303a 	rdctl	r2,status
 402d88c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402d890:	e0fffb17 	ldw	r3,-20(fp)
 402d894:	00bfff84 	movi	r2,-2
 402d898:	1884703a 	and	r2,r3,r2
 402d89c:	1001703a 	wrctl	status,r2
  
  return context;
 402d8a0:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 402d8a4:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 402d8a8:	008100f4 	movhi	r2,1027
 402d8ac:	10938b04 	addi	r2,r2,20012
 402d8b0:	e0fff817 	ldw	r3,-32(fp)
 402d8b4:	180690fa 	slli	r3,r3,3
 402d8b8:	10c5883a 	add	r2,r2,r3
 402d8bc:	e0fffe17 	ldw	r3,-8(fp)
 402d8c0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 402d8c4:	008100f4 	movhi	r2,1027
 402d8c8:	10938b04 	addi	r2,r2,20012
 402d8cc:	e0fff817 	ldw	r3,-32(fp)
 402d8d0:	180690fa 	slli	r3,r3,3
 402d8d4:	10c5883a 	add	r2,r2,r3
 402d8d8:	10800104 	addi	r2,r2,4
 402d8dc:	e0ffff17 	ldw	r3,-4(fp)
 402d8e0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 402d8e4:	e0bffe17 	ldw	r2,-8(fp)
 402d8e8:	10000526 	beq	r2,zero,402d900 <alt_iic_isr_register+0xb4>
 402d8ec:	e0bff817 	ldw	r2,-32(fp)
 402d8f0:	100b883a 	mov	r5,r2
 402d8f4:	e13ffc17 	ldw	r4,-16(fp)
 402d8f8:	402d6ec0 	call	402d6ec <alt_ic_irq_enable>
 402d8fc:	00000406 	br	402d910 <alt_iic_isr_register+0xc4>
 402d900:	e0bff817 	ldw	r2,-32(fp)
 402d904:	100b883a 	mov	r5,r2
 402d908:	e13ffc17 	ldw	r4,-16(fp)
 402d90c:	402d7740 	call	402d774 <alt_ic_irq_disable>
 402d910:	e0bff715 	stw	r2,-36(fp)
 402d914:	e0bffa17 	ldw	r2,-24(fp)
 402d918:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402d91c:	e0bff917 	ldw	r2,-28(fp)
 402d920:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 402d924:	e0bff717 	ldw	r2,-36(fp)
}
 402d928:	e037883a 	mov	sp,fp
 402d92c:	dfc00117 	ldw	ra,4(sp)
 402d930:	df000017 	ldw	fp,0(sp)
 402d934:	dec00204 	addi	sp,sp,8
 402d938:	f800283a 	ret

0402d93c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 402d93c:	defffe04 	addi	sp,sp,-8
 402d940:	dfc00115 	stw	ra,4(sp)
 402d944:	df000015 	stw	fp,0(sp)
 402d948:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 402d94c:	d0a00b17 	ldw	r2,-32724(gp)
 402d950:	10000326 	beq	r2,zero,402d960 <alt_get_errno+0x24>
 402d954:	d0a00b17 	ldw	r2,-32724(gp)
 402d958:	103ee83a 	callr	r2
 402d95c:	00000106 	br	402d964 <alt_get_errno+0x28>
 402d960:	d0a70604 	addi	r2,gp,-25576
}
 402d964:	e037883a 	mov	sp,fp
 402d968:	dfc00117 	ldw	ra,4(sp)
 402d96c:	df000017 	ldw	fp,0(sp)
 402d970:	dec00204 	addi	sp,sp,8
 402d974:	f800283a 	ret

0402d978 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 402d978:	deffed04 	addi	sp,sp,-76
 402d97c:	dfc01215 	stw	ra,72(sp)
 402d980:	df001115 	stw	fp,68(sp)
 402d984:	df001104 	addi	fp,sp,68
 402d988:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 402d98c:	e0bfff17 	ldw	r2,-4(fp)
 402d990:	10000616 	blt	r2,zero,402d9ac <isatty+0x34>
 402d994:	e0bfff17 	ldw	r2,-4(fp)
 402d998:	10c00324 	muli	r3,r2,12
 402d99c:	008100f4 	movhi	r2,1027
 402d9a0:	1087cf04 	addi	r2,r2,7996
 402d9a4:	1885883a 	add	r2,r3,r2
 402d9a8:	00000106 	br	402d9b0 <isatty+0x38>
 402d9ac:	0005883a 	mov	r2,zero
 402d9b0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 402d9b4:	e0bfef17 	ldw	r2,-68(fp)
 402d9b8:	10000e26 	beq	r2,zero,402d9f4 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 402d9bc:	e0bfef17 	ldw	r2,-68(fp)
 402d9c0:	10800017 	ldw	r2,0(r2)
 402d9c4:	10800817 	ldw	r2,32(r2)
 402d9c8:	1000021e 	bne	r2,zero,402d9d4 <isatty+0x5c>
    {
      return 1;
 402d9cc:	00800044 	movi	r2,1
 402d9d0:	00000d06 	br	402da08 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 402d9d4:	e0bff004 	addi	r2,fp,-64
 402d9d8:	100b883a 	mov	r5,r2
 402d9dc:	e13fff17 	ldw	r4,-4(fp)
 402d9e0:	402d5ec0 	call	402d5ec <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 402d9e4:	e0bff117 	ldw	r2,-60(fp)
 402d9e8:	10880020 	cmpeqi	r2,r2,8192
 402d9ec:	10803fcc 	andi	r2,r2,255
 402d9f0:	00000506 	br	402da08 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 402d9f4:	402d93c0 	call	402d93c <alt_get_errno>
 402d9f8:	1007883a 	mov	r3,r2
 402d9fc:	00801444 	movi	r2,81
 402da00:	18800015 	stw	r2,0(r3)
    return 0;
 402da04:	0005883a 	mov	r2,zero
  }
}
 402da08:	e037883a 	mov	sp,fp
 402da0c:	dfc00117 	ldw	ra,4(sp)
 402da10:	df000017 	ldw	fp,0(sp)
 402da14:	dec00204 	addi	sp,sp,8
 402da18:	f800283a 	ret

0402da1c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 402da1c:	defffc04 	addi	sp,sp,-16
 402da20:	df000315 	stw	fp,12(sp)
 402da24:	df000304 	addi	fp,sp,12
 402da28:	e13ffd15 	stw	r4,-12(fp)
 402da2c:	e17ffe15 	stw	r5,-8(fp)
 402da30:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 402da34:	e0fffe17 	ldw	r3,-8(fp)
 402da38:	e0bffd17 	ldw	r2,-12(fp)
 402da3c:	18800c26 	beq	r3,r2,402da70 <alt_load_section+0x54>
  {
    while( to != end )
 402da40:	00000806 	br	402da64 <alt_load_section+0x48>
    {
      *to++ = *from++;
 402da44:	e0bffe17 	ldw	r2,-8(fp)
 402da48:	10c00104 	addi	r3,r2,4
 402da4c:	e0fffe15 	stw	r3,-8(fp)
 402da50:	e0fffd17 	ldw	r3,-12(fp)
 402da54:	19000104 	addi	r4,r3,4
 402da58:	e13ffd15 	stw	r4,-12(fp)
 402da5c:	18c00017 	ldw	r3,0(r3)
 402da60:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 402da64:	e0fffe17 	ldw	r3,-8(fp)
 402da68:	e0bfff17 	ldw	r2,-4(fp)
 402da6c:	18bff51e 	bne	r3,r2,402da44 <__alt_data_end+0xfffeda44>
    {
      *to++ = *from++;
    }
  }
}
 402da70:	0001883a 	nop
 402da74:	e037883a 	mov	sp,fp
 402da78:	df000017 	ldw	fp,0(sp)
 402da7c:	dec00104 	addi	sp,sp,4
 402da80:	f800283a 	ret

0402da84 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 402da84:	defffe04 	addi	sp,sp,-8
 402da88:	dfc00115 	stw	ra,4(sp)
 402da8c:	df000015 	stw	fp,0(sp)
 402da90:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 402da94:	018100f4 	movhi	r6,1027
 402da98:	318c8704 	addi	r6,r6,12828
 402da9c:	014100f4 	movhi	r5,1027
 402daa0:	29459c04 	addi	r5,r5,5744
 402daa4:	010100f4 	movhi	r4,1027
 402daa8:	210c8704 	addi	r4,r4,12828
 402daac:	402da1c0 	call	402da1c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 402dab0:	018100b4 	movhi	r6,1026
 402dab4:	31809104 	addi	r6,r6,580
 402dab8:	014100b4 	movhi	r5,1026
 402dabc:	29400804 	addi	r5,r5,32
 402dac0:	010100b4 	movhi	r4,1026
 402dac4:	21000804 	addi	r4,r4,32
 402dac8:	402da1c0 	call	402da1c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 402dacc:	018100f4 	movhi	r6,1027
 402dad0:	31859c04 	addi	r6,r6,5744
 402dad4:	014100f4 	movhi	r5,1027
 402dad8:	2943be04 	addi	r5,r5,3832
 402dadc:	010100f4 	movhi	r4,1027
 402dae0:	2103be04 	addi	r4,r4,3832
 402dae4:	402da1c0 	call	402da1c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 402dae8:	402d53c0 	call	402d53c <alt_dcache_flush_all>
  alt_icache_flush_all();
 402daec:	403028c0 	call	403028c <alt_icache_flush_all>
}
 402daf0:	0001883a 	nop
 402daf4:	e037883a 	mov	sp,fp
 402daf8:	dfc00117 	ldw	ra,4(sp)
 402dafc:	df000017 	ldw	fp,0(sp)
 402db00:	dec00204 	addi	sp,sp,8
 402db04:	f800283a 	ret

0402db08 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 402db08:	defffe04 	addi	sp,sp,-8
 402db0c:	dfc00115 	stw	ra,4(sp)
 402db10:	df000015 	stw	fp,0(sp)
 402db14:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 402db18:	d0a00b17 	ldw	r2,-32724(gp)
 402db1c:	10000326 	beq	r2,zero,402db2c <alt_get_errno+0x24>
 402db20:	d0a00b17 	ldw	r2,-32724(gp)
 402db24:	103ee83a 	callr	r2
 402db28:	00000106 	br	402db30 <alt_get_errno+0x28>
 402db2c:	d0a70604 	addi	r2,gp,-25576
}
 402db30:	e037883a 	mov	sp,fp
 402db34:	dfc00117 	ldw	ra,4(sp)
 402db38:	df000017 	ldw	fp,0(sp)
 402db3c:	dec00204 	addi	sp,sp,8
 402db40:	f800283a 	ret

0402db44 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 402db44:	defff904 	addi	sp,sp,-28
 402db48:	dfc00615 	stw	ra,24(sp)
 402db4c:	df000515 	stw	fp,20(sp)
 402db50:	df000504 	addi	fp,sp,20
 402db54:	e13ffd15 	stw	r4,-12(fp)
 402db58:	e17ffe15 	stw	r5,-8(fp)
 402db5c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 402db60:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 402db64:	e0bffd17 	ldw	r2,-12(fp)
 402db68:	10000616 	blt	r2,zero,402db84 <lseek+0x40>
 402db6c:	e0bffd17 	ldw	r2,-12(fp)
 402db70:	10c00324 	muli	r3,r2,12
 402db74:	008100f4 	movhi	r2,1027
 402db78:	1087cf04 	addi	r2,r2,7996
 402db7c:	1885883a 	add	r2,r3,r2
 402db80:	00000106 	br	402db88 <lseek+0x44>
 402db84:	0005883a 	mov	r2,zero
 402db88:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 402db8c:	e0bffc17 	ldw	r2,-16(fp)
 402db90:	10001026 	beq	r2,zero,402dbd4 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 402db94:	e0bffc17 	ldw	r2,-16(fp)
 402db98:	10800017 	ldw	r2,0(r2)
 402db9c:	10800717 	ldw	r2,28(r2)
 402dba0:	10000926 	beq	r2,zero,402dbc8 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 402dba4:	e0bffc17 	ldw	r2,-16(fp)
 402dba8:	10800017 	ldw	r2,0(r2)
 402dbac:	10800717 	ldw	r2,28(r2)
 402dbb0:	e1bfff17 	ldw	r6,-4(fp)
 402dbb4:	e17ffe17 	ldw	r5,-8(fp)
 402dbb8:	e13ffc17 	ldw	r4,-16(fp)
 402dbbc:	103ee83a 	callr	r2
 402dbc0:	e0bffb15 	stw	r2,-20(fp)
 402dbc4:	00000506 	br	402dbdc <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 402dbc8:	00bfde84 	movi	r2,-134
 402dbcc:	e0bffb15 	stw	r2,-20(fp)
 402dbd0:	00000206 	br	402dbdc <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 402dbd4:	00bfebc4 	movi	r2,-81
 402dbd8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 402dbdc:	e0bffb17 	ldw	r2,-20(fp)
 402dbe0:	1000070e 	bge	r2,zero,402dc00 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 402dbe4:	402db080 	call	402db08 <alt_get_errno>
 402dbe8:	1007883a 	mov	r3,r2
 402dbec:	e0bffb17 	ldw	r2,-20(fp)
 402dbf0:	0085c83a 	sub	r2,zero,r2
 402dbf4:	18800015 	stw	r2,0(r3)
    rc = -1;
 402dbf8:	00bfffc4 	movi	r2,-1
 402dbfc:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 402dc00:	e0bffb17 	ldw	r2,-20(fp)
}
 402dc04:	e037883a 	mov	sp,fp
 402dc08:	dfc00117 	ldw	ra,4(sp)
 402dc0c:	df000017 	ldw	fp,0(sp)
 402dc10:	dec00204 	addi	sp,sp,8
 402dc14:	f800283a 	ret

0402dc18 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 402dc18:	defffd04 	addi	sp,sp,-12
 402dc1c:	dfc00215 	stw	ra,8(sp)
 402dc20:	df000115 	stw	fp,4(sp)
 402dc24:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 402dc28:	0009883a 	mov	r4,zero
 402dc2c:	402e1640 	call	402e164 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 402dc30:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 402dc34:	402e19c0 	call	402e19c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 402dc38:	018100f4 	movhi	r6,1027
 402dc3c:	31853c04 	addi	r6,r6,5360
 402dc40:	014100f4 	movhi	r5,1027
 402dc44:	29453c04 	addi	r5,r5,5360
 402dc48:	010100f4 	movhi	r4,1027
 402dc4c:	21053c04 	addi	r4,r4,5360
 402dc50:	40304200 	call	4030420 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 402dc54:	403013c0 	call	403013c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 402dc58:	010100f4 	movhi	r4,1027
 402dc5c:	21006704 	addi	r4,r4,412
 402dc60:	4030af40 	call	4030af4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 402dc64:	d0a70817 	ldw	r2,-25568(gp)
 402dc68:	d0e70917 	ldw	r3,-25564(gp)
 402dc6c:	d1270a17 	ldw	r4,-25560(gp)
 402dc70:	200d883a 	mov	r6,r4
 402dc74:	180b883a 	mov	r5,r3
 402dc78:	1009883a 	mov	r4,r2
 402dc7c:	40209140 	call	4020914 <main>
 402dc80:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 402dc84:	01000044 	movi	r4,1
 402dc88:	402d46c0 	call	402d46c <close>
  exit (result);
 402dc8c:	e13fff17 	ldw	r4,-4(fp)
 402dc90:	4030b080 	call	4030b08 <exit>

0402dc94 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 402dc94:	defffe04 	addi	sp,sp,-8
 402dc98:	df000115 	stw	fp,4(sp)
 402dc9c:	df000104 	addi	fp,sp,4
 402dca0:	e13fff15 	stw	r4,-4(fp)
}
 402dca4:	0001883a 	nop
 402dca8:	e037883a 	mov	sp,fp
 402dcac:	df000017 	ldw	fp,0(sp)
 402dcb0:	dec00104 	addi	sp,sp,4
 402dcb4:	f800283a 	ret

0402dcb8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 402dcb8:	defffe04 	addi	sp,sp,-8
 402dcbc:	df000115 	stw	fp,4(sp)
 402dcc0:	df000104 	addi	fp,sp,4
 402dcc4:	e13fff15 	stw	r4,-4(fp)
}
 402dcc8:	0001883a 	nop
 402dccc:	e037883a 	mov	sp,fp
 402dcd0:	df000017 	ldw	fp,0(sp)
 402dcd4:	dec00104 	addi	sp,sp,4
 402dcd8:	f800283a 	ret

0402dcdc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 402dcdc:	defffe04 	addi	sp,sp,-8
 402dce0:	dfc00115 	stw	ra,4(sp)
 402dce4:	df000015 	stw	fp,0(sp)
 402dce8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 402dcec:	d0a00b17 	ldw	r2,-32724(gp)
 402dcf0:	10000326 	beq	r2,zero,402dd00 <alt_get_errno+0x24>
 402dcf4:	d0a00b17 	ldw	r2,-32724(gp)
 402dcf8:	103ee83a 	callr	r2
 402dcfc:	00000106 	br	402dd04 <alt_get_errno+0x28>
 402dd00:	d0a70604 	addi	r2,gp,-25576
}
 402dd04:	e037883a 	mov	sp,fp
 402dd08:	dfc00117 	ldw	ra,4(sp)
 402dd0c:	df000017 	ldw	fp,0(sp)
 402dd10:	dec00204 	addi	sp,sp,8
 402dd14:	f800283a 	ret

0402dd18 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 402dd18:	defff904 	addi	sp,sp,-28
 402dd1c:	dfc00615 	stw	ra,24(sp)
 402dd20:	df000515 	stw	fp,20(sp)
 402dd24:	df000504 	addi	fp,sp,20
 402dd28:	e13ffd15 	stw	r4,-12(fp)
 402dd2c:	e17ffe15 	stw	r5,-8(fp)
 402dd30:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 402dd34:	e0bffd17 	ldw	r2,-12(fp)
 402dd38:	10000616 	blt	r2,zero,402dd54 <read+0x3c>
 402dd3c:	e0bffd17 	ldw	r2,-12(fp)
 402dd40:	10c00324 	muli	r3,r2,12
 402dd44:	008100f4 	movhi	r2,1027
 402dd48:	1087cf04 	addi	r2,r2,7996
 402dd4c:	1885883a 	add	r2,r3,r2
 402dd50:	00000106 	br	402dd58 <read+0x40>
 402dd54:	0005883a 	mov	r2,zero
 402dd58:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 402dd5c:	e0bffb17 	ldw	r2,-20(fp)
 402dd60:	10002226 	beq	r2,zero,402ddec <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 402dd64:	e0bffb17 	ldw	r2,-20(fp)
 402dd68:	10800217 	ldw	r2,8(r2)
 402dd6c:	108000cc 	andi	r2,r2,3
 402dd70:	10800060 	cmpeqi	r2,r2,1
 402dd74:	1000181e 	bne	r2,zero,402ddd8 <read+0xc0>
        (fd->dev->read))
 402dd78:	e0bffb17 	ldw	r2,-20(fp)
 402dd7c:	10800017 	ldw	r2,0(r2)
 402dd80:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 402dd84:	10001426 	beq	r2,zero,402ddd8 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 402dd88:	e0bffb17 	ldw	r2,-20(fp)
 402dd8c:	10800017 	ldw	r2,0(r2)
 402dd90:	10800517 	ldw	r2,20(r2)
 402dd94:	e0ffff17 	ldw	r3,-4(fp)
 402dd98:	180d883a 	mov	r6,r3
 402dd9c:	e17ffe17 	ldw	r5,-8(fp)
 402dda0:	e13ffb17 	ldw	r4,-20(fp)
 402dda4:	103ee83a 	callr	r2
 402dda8:	e0bffc15 	stw	r2,-16(fp)
 402ddac:	e0bffc17 	ldw	r2,-16(fp)
 402ddb0:	1000070e 	bge	r2,zero,402ddd0 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 402ddb4:	402dcdc0 	call	402dcdc <alt_get_errno>
 402ddb8:	1007883a 	mov	r3,r2
 402ddbc:	e0bffc17 	ldw	r2,-16(fp)
 402ddc0:	0085c83a 	sub	r2,zero,r2
 402ddc4:	18800015 	stw	r2,0(r3)
          return -1;
 402ddc8:	00bfffc4 	movi	r2,-1
 402ddcc:	00000c06 	br	402de00 <read+0xe8>
        }
        return rval;
 402ddd0:	e0bffc17 	ldw	r2,-16(fp)
 402ddd4:	00000a06 	br	402de00 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 402ddd8:	402dcdc0 	call	402dcdc <alt_get_errno>
 402dddc:	1007883a 	mov	r3,r2
 402dde0:	00800344 	movi	r2,13
 402dde4:	18800015 	stw	r2,0(r3)
 402dde8:	00000406 	br	402ddfc <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 402ddec:	402dcdc0 	call	402dcdc <alt_get_errno>
 402ddf0:	1007883a 	mov	r3,r2
 402ddf4:	00801444 	movi	r2,81
 402ddf8:	18800015 	stw	r2,0(r3)
  }
  return -1;
 402ddfc:	00bfffc4 	movi	r2,-1
}
 402de00:	e037883a 	mov	sp,fp
 402de04:	dfc00117 	ldw	ra,4(sp)
 402de08:	df000017 	ldw	fp,0(sp)
 402de0c:	dec00204 	addi	sp,sp,8
 402de10:	f800283a 	ret

0402de14 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 402de14:	defffe04 	addi	sp,sp,-8
 402de18:	df000115 	stw	fp,4(sp)
 402de1c:	df000104 	addi	fp,sp,4
 402de20:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 402de24:	e0bfff17 	ldw	r2,-4(fp)
 402de28:	108000d0 	cmplti	r2,r2,3
 402de2c:	10000d1e 	bne	r2,zero,402de64 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 402de30:	008100f4 	movhi	r2,1027
 402de34:	1087cf04 	addi	r2,r2,7996
 402de38:	e0ffff17 	ldw	r3,-4(fp)
 402de3c:	18c00324 	muli	r3,r3,12
 402de40:	10c5883a 	add	r2,r2,r3
 402de44:	10800204 	addi	r2,r2,8
 402de48:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 402de4c:	008100f4 	movhi	r2,1027
 402de50:	1087cf04 	addi	r2,r2,7996
 402de54:	e0ffff17 	ldw	r3,-4(fp)
 402de58:	18c00324 	muli	r3,r3,12
 402de5c:	10c5883a 	add	r2,r2,r3
 402de60:	10000015 	stw	zero,0(r2)
  }
}
 402de64:	0001883a 	nop
 402de68:	e037883a 	mov	sp,fp
 402de6c:	df000017 	ldw	fp,0(sp)
 402de70:	dec00104 	addi	sp,sp,4
 402de74:	f800283a 	ret

0402de78 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 402de78:	defff904 	addi	sp,sp,-28
 402de7c:	df000615 	stw	fp,24(sp)
 402de80:	df000604 	addi	fp,sp,24
 402de84:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402de88:	0005303a 	rdctl	r2,status
 402de8c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402de90:	e0fffe17 	ldw	r3,-8(fp)
 402de94:	00bfff84 	movi	r2,-2
 402de98:	1884703a 	and	r2,r3,r2
 402de9c:	1001703a 	wrctl	status,r2
  
  return context;
 402dea0:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 402dea4:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 402dea8:	d0a00d17 	ldw	r2,-32716(gp)
 402deac:	10c000c4 	addi	r3,r2,3
 402deb0:	00bfff04 	movi	r2,-4
 402deb4:	1884703a 	and	r2,r3,r2
 402deb8:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 402debc:	d0e00d17 	ldw	r3,-32716(gp)
 402dec0:	e0bfff17 	ldw	r2,-4(fp)
 402dec4:	1887883a 	add	r3,r3,r2
 402dec8:	00810134 	movhi	r2,1028
 402decc:	10800004 	addi	r2,r2,0
 402ded0:	10c0062e 	bgeu	r2,r3,402deec <sbrk+0x74>
 402ded4:	e0bffb17 	ldw	r2,-20(fp)
 402ded8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402dedc:	e0bffa17 	ldw	r2,-24(fp)
 402dee0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 402dee4:	00bfffc4 	movi	r2,-1
 402dee8:	00000b06 	br	402df18 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 402deec:	d0a00d17 	ldw	r2,-32716(gp)
 402def0:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 402def4:	d0e00d17 	ldw	r3,-32716(gp)
 402def8:	e0bfff17 	ldw	r2,-4(fp)
 402defc:	1885883a 	add	r2,r3,r2
 402df00:	d0a00d15 	stw	r2,-32716(gp)
 402df04:	e0bffb17 	ldw	r2,-20(fp)
 402df08:	e0bffc15 	stw	r2,-16(fp)
 402df0c:	e0bffc17 	ldw	r2,-16(fp)
 402df10:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 402df14:	e0bffd17 	ldw	r2,-12(fp)
} 
 402df18:	e037883a 	mov	sp,fp
 402df1c:	df000017 	ldw	fp,0(sp)
 402df20:	dec00104 	addi	sp,sp,4
 402df24:	f800283a 	ret

0402df28 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 402df28:	defffd04 	addi	sp,sp,-12
 402df2c:	dfc00215 	stw	ra,8(sp)
 402df30:	df000115 	stw	fp,4(sp)
 402df34:	df000104 	addi	fp,sp,4
 402df38:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 402df3c:	e13fff17 	ldw	r4,-4(fp)
 402df40:	402ff040 	call	402ff04 <alt_busy_sleep>
}
 402df44:	e037883a 	mov	sp,fp
 402df48:	dfc00117 	ldw	ra,4(sp)
 402df4c:	df000017 	ldw	fp,0(sp)
 402df50:	dec00204 	addi	sp,sp,8
 402df54:	f800283a 	ret

0402df58 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 402df58:	defffe04 	addi	sp,sp,-8
 402df5c:	dfc00115 	stw	ra,4(sp)
 402df60:	df000015 	stw	fp,0(sp)
 402df64:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 402df68:	d0a00b17 	ldw	r2,-32724(gp)
 402df6c:	10000326 	beq	r2,zero,402df7c <alt_get_errno+0x24>
 402df70:	d0a00b17 	ldw	r2,-32724(gp)
 402df74:	103ee83a 	callr	r2
 402df78:	00000106 	br	402df80 <alt_get_errno+0x28>
 402df7c:	d0a70604 	addi	r2,gp,-25576
}
 402df80:	e037883a 	mov	sp,fp
 402df84:	dfc00117 	ldw	ra,4(sp)
 402df88:	df000017 	ldw	fp,0(sp)
 402df8c:	dec00204 	addi	sp,sp,8
 402df90:	f800283a 	ret

0402df94 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 402df94:	defff904 	addi	sp,sp,-28
 402df98:	dfc00615 	stw	ra,24(sp)
 402df9c:	df000515 	stw	fp,20(sp)
 402dfa0:	df000504 	addi	fp,sp,20
 402dfa4:	e13ffd15 	stw	r4,-12(fp)
 402dfa8:	e17ffe15 	stw	r5,-8(fp)
 402dfac:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 402dfb0:	e0bffd17 	ldw	r2,-12(fp)
 402dfb4:	10000616 	blt	r2,zero,402dfd0 <write+0x3c>
 402dfb8:	e0bffd17 	ldw	r2,-12(fp)
 402dfbc:	10c00324 	muli	r3,r2,12
 402dfc0:	008100f4 	movhi	r2,1027
 402dfc4:	1087cf04 	addi	r2,r2,7996
 402dfc8:	1885883a 	add	r2,r3,r2
 402dfcc:	00000106 	br	402dfd4 <write+0x40>
 402dfd0:	0005883a 	mov	r2,zero
 402dfd4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 402dfd8:	e0bffb17 	ldw	r2,-20(fp)
 402dfdc:	10002126 	beq	r2,zero,402e064 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 402dfe0:	e0bffb17 	ldw	r2,-20(fp)
 402dfe4:	10800217 	ldw	r2,8(r2)
 402dfe8:	108000cc 	andi	r2,r2,3
 402dfec:	10001826 	beq	r2,zero,402e050 <write+0xbc>
 402dff0:	e0bffb17 	ldw	r2,-20(fp)
 402dff4:	10800017 	ldw	r2,0(r2)
 402dff8:	10800617 	ldw	r2,24(r2)
 402dffc:	10001426 	beq	r2,zero,402e050 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 402e000:	e0bffb17 	ldw	r2,-20(fp)
 402e004:	10800017 	ldw	r2,0(r2)
 402e008:	10800617 	ldw	r2,24(r2)
 402e00c:	e0ffff17 	ldw	r3,-4(fp)
 402e010:	180d883a 	mov	r6,r3
 402e014:	e17ffe17 	ldw	r5,-8(fp)
 402e018:	e13ffb17 	ldw	r4,-20(fp)
 402e01c:	103ee83a 	callr	r2
 402e020:	e0bffc15 	stw	r2,-16(fp)
 402e024:	e0bffc17 	ldw	r2,-16(fp)
 402e028:	1000070e 	bge	r2,zero,402e048 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 402e02c:	402df580 	call	402df58 <alt_get_errno>
 402e030:	1007883a 	mov	r3,r2
 402e034:	e0bffc17 	ldw	r2,-16(fp)
 402e038:	0085c83a 	sub	r2,zero,r2
 402e03c:	18800015 	stw	r2,0(r3)
        return -1;
 402e040:	00bfffc4 	movi	r2,-1
 402e044:	00000c06 	br	402e078 <write+0xe4>
      }
      return rval;
 402e048:	e0bffc17 	ldw	r2,-16(fp)
 402e04c:	00000a06 	br	402e078 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 402e050:	402df580 	call	402df58 <alt_get_errno>
 402e054:	1007883a 	mov	r3,r2
 402e058:	00800344 	movi	r2,13
 402e05c:	18800015 	stw	r2,0(r3)
 402e060:	00000406 	br	402e074 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 402e064:	402df580 	call	402df58 <alt_get_errno>
 402e068:	1007883a 	mov	r3,r2
 402e06c:	00801444 	movi	r2,81
 402e070:	18800015 	stw	r2,0(r3)
  }
  return -1;
 402e074:	00bfffc4 	movi	r2,-1
}
 402e078:	e037883a 	mov	sp,fp
 402e07c:	dfc00117 	ldw	ra,4(sp)
 402e080:	df000017 	ldw	fp,0(sp)
 402e084:	dec00204 	addi	sp,sp,8
 402e088:	f800283a 	ret

0402e08c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 402e08c:	defffd04 	addi	sp,sp,-12
 402e090:	dfc00215 	stw	ra,8(sp)
 402e094:	df000115 	stw	fp,4(sp)
 402e098:	df000104 	addi	fp,sp,4
 402e09c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 402e0a0:	d1600804 	addi	r5,gp,-32736
 402e0a4:	e13fff17 	ldw	r4,-4(fp)
 402e0a8:	40300980 	call	4030098 <alt_dev_llist_insert>
}
 402e0ac:	e037883a 	mov	sp,fp
 402e0b0:	dfc00117 	ldw	ra,4(sp)
 402e0b4:	df000017 	ldw	fp,0(sp)
 402e0b8:	dec00204 	addi	sp,sp,8
 402e0bc:	f800283a 	ret

0402e0c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 402e0c0:	defffe04 	addi	sp,sp,-8
 402e0c4:	dfc00115 	stw	ra,4(sp)
 402e0c8:	df000015 	stw	fp,0(sp)
 402e0cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 402e0d0:	d0a00b17 	ldw	r2,-32724(gp)
 402e0d4:	10000326 	beq	r2,zero,402e0e4 <alt_get_errno+0x24>
 402e0d8:	d0a00b17 	ldw	r2,-32724(gp)
 402e0dc:	103ee83a 	callr	r2
 402e0e0:	00000106 	br	402e0e8 <alt_get_errno+0x28>
 402e0e4:	d0a70604 	addi	r2,gp,-25576
}
 402e0e8:	e037883a 	mov	sp,fp
 402e0ec:	dfc00117 	ldw	ra,4(sp)
 402e0f0:	df000017 	ldw	fp,0(sp)
 402e0f4:	dec00204 	addi	sp,sp,8
 402e0f8:	f800283a 	ret

0402e0fc <alt_avalon_mutex_reg>:
/*
 * Register a Mutex device
 */

static ALT_INLINE int alt_avalon_mutex_reg (alt_mutex_dev* dev)
{
 402e0fc:	defffc04 	addi	sp,sp,-16
 402e100:	dfc00315 	stw	ra,12(sp)
 402e104:	df000215 	stw	fp,8(sp)
 402e108:	df000204 	addi	fp,sp,8
 402e10c:	e13fff15 	stw	r4,-4(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 402e110:	0005883a 	mov	r2,zero
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
 402e114:	e0bffe15 	stw	r2,-8(fp)
  if (!ret_code)
 402e118:	e0bffe17 	ldw	r2,-8(fp)
 402e11c:	1000051e 	bne	r2,zero,402e134 <alt_avalon_mutex_reg+0x38>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
 402e120:	d1601004 	addi	r5,gp,-32704
 402e124:	e13fff17 	ldw	r4,-4(fp)
 402e128:	40300980 	call	4030098 <alt_dev_llist_insert>
 402e12c:	e0bffe15 	stw	r2,-8(fp)
 402e130:	00000606 	br	402e14c <alt_avalon_mutex_reg+0x50>
  }
  else
  {
    ALT_ERRNO = ENOMEM;
 402e134:	402e0c00 	call	402e0c0 <alt_get_errno>
 402e138:	1007883a 	mov	r3,r2
 402e13c:	00800304 	movi	r2,12
 402e140:	18800015 	stw	r2,0(r3)
    ret_code = -ENOMEM;
 402e144:	00bffd04 	movi	r2,-12
 402e148:	e0bffe15 	stw	r2,-8(fp)
  }

  return ret_code;
 402e14c:	e0bffe17 	ldw	r2,-8(fp)
}
 402e150:	e037883a 	mov	sp,fp
 402e154:	dfc00117 	ldw	ra,4(sp)
 402e158:	df000017 	ldw	fp,0(sp)
 402e15c:	dec00204 	addi	sp,sp,8
 402e160:	f800283a 	ret

0402e164 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 402e164:	defffd04 	addi	sp,sp,-12
 402e168:	dfc00215 	stw	ra,8(sp)
 402e16c:	df000115 	stw	fp,4(sp)
 402e170:	df000104 	addi	fp,sp,4
 402e174:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU_1, cpu_1);
 402e178:	40308940 	call	4030894 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 402e17c:	00800044 	movi	r2,1
 402e180:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 402e184:	0001883a 	nop
 402e188:	e037883a 	mov	sp,fp
 402e18c:	dfc00117 	ldw	ra,4(sp)
 402e190:	df000017 	ldw	fp,0(sp)
 402e194:	dec00204 	addi	sp,sp,8
 402e198:	f800283a 	ret

0402e19c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 402e19c:	defffe04 	addi	sp,sp,-8
 402e1a0:	dfc00115 	stw	ra,4(sp)
 402e1a4:	df000015 	stw	fp,0(sp)
 402e1a8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
 402e1ac:	01c0fa04 	movi	r7,1000
 402e1b0:	018000c4 	movi	r6,3
 402e1b4:	000b883a 	mov	r5,zero
 402e1b8:	01010134 	movhi	r4,1028
 402e1bc:	21041804 	addi	r4,r4,4192
 402e1c0:	402fadc0 	call	402fadc <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_1, jtag_uart_1);
 402e1c4:	01800084 	movi	r6,2
 402e1c8:	000b883a 	mov	r5,zero
 402e1cc:	010100f4 	movhi	r4,1027
 402e1d0:	21083904 	addi	r4,r4,8420
 402e1d4:	402e3a80 	call	402e3a8 <altera_avalon_jtag_uart_init>
 402e1d8:	010100f4 	movhi	r4,1027
 402e1dc:	21082f04 	addi	r4,r4,8380
 402e1e0:	402e08c0 	call	402e08c <alt_dev_reg>
    ALTERA_AVALON_MAILBOX_SIMPLE_INIT ( MAILBOX_SIMPLE_0, mailbox_simple_0);
 402e1e4:	000d883a 	mov	r6,zero
 402e1e8:	000b883a 	mov	r5,zero
 402e1ec:	010100f4 	movhi	r4,1027
 402e1f0:	210c4704 	addi	r4,r4,12572
 402e1f4:	402ef940 	call	402ef94 <altera_avalon_mailbox_simple_init>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX_0, mutex_0);
 402e1f8:	010100f4 	movhi	r4,1027
 402e1fc:	210c5904 	addi	r4,r4,12644
 402e200:	402e0fc0 	call	402e0fc <alt_avalon_mutex_reg>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER_1, performance_counter_1);
 402e204:	00c00044 	movi	r3,1
 402e208:	00810134 	movhi	r2,1028
 402e20c:	10840004 	addi	r2,r2,4096
 402e210:	10c00035 	stwio	r3,0(r2)
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PARALLEL_PORT_1, parallel_port_1);
 402e214:	010100f4 	movhi	r4,1027
 402e218:	210c5d04 	addi	r4,r4,12660
 402e21c:	402e08c0 	call	402e08c <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PARALLEL_PORT_2, parallel_port_2);
 402e220:	010100f4 	movhi	r4,1027
 402e224:	210c6804 	addi	r4,r4,12704
 402e228:	402e08c0 	call	402e08c <alt_dev_reg>
}
 402e22c:	0001883a 	nop
 402e230:	e037883a 	mov	sp,fp
 402e234:	dfc00117 	ldw	ra,4(sp)
 402e238:	df000017 	ldw	fp,0(sp)
 402e23c:	dec00204 	addi	sp,sp,8
 402e240:	f800283a 	ret

0402e244 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 402e244:	defffa04 	addi	sp,sp,-24
 402e248:	dfc00515 	stw	ra,20(sp)
 402e24c:	df000415 	stw	fp,16(sp)
 402e250:	df000404 	addi	fp,sp,16
 402e254:	e13ffd15 	stw	r4,-12(fp)
 402e258:	e17ffe15 	stw	r5,-8(fp)
 402e25c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 402e260:	e0bffd17 	ldw	r2,-12(fp)
 402e264:	10800017 	ldw	r2,0(r2)
 402e268:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 402e26c:	e0bffc17 	ldw	r2,-16(fp)
 402e270:	10c00a04 	addi	r3,r2,40
 402e274:	e0bffd17 	ldw	r2,-12(fp)
 402e278:	10800217 	ldw	r2,8(r2)
 402e27c:	100f883a 	mov	r7,r2
 402e280:	e1bfff17 	ldw	r6,-4(fp)
 402e284:	e17ffe17 	ldw	r5,-8(fp)
 402e288:	1809883a 	mov	r4,r3
 402e28c:	402e86c0 	call	402e86c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 402e290:	e037883a 	mov	sp,fp
 402e294:	dfc00117 	ldw	ra,4(sp)
 402e298:	df000017 	ldw	fp,0(sp)
 402e29c:	dec00204 	addi	sp,sp,8
 402e2a0:	f800283a 	ret

0402e2a4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 402e2a4:	defffa04 	addi	sp,sp,-24
 402e2a8:	dfc00515 	stw	ra,20(sp)
 402e2ac:	df000415 	stw	fp,16(sp)
 402e2b0:	df000404 	addi	fp,sp,16
 402e2b4:	e13ffd15 	stw	r4,-12(fp)
 402e2b8:	e17ffe15 	stw	r5,-8(fp)
 402e2bc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 402e2c0:	e0bffd17 	ldw	r2,-12(fp)
 402e2c4:	10800017 	ldw	r2,0(r2)
 402e2c8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 402e2cc:	e0bffc17 	ldw	r2,-16(fp)
 402e2d0:	10c00a04 	addi	r3,r2,40
 402e2d4:	e0bffd17 	ldw	r2,-12(fp)
 402e2d8:	10800217 	ldw	r2,8(r2)
 402e2dc:	100f883a 	mov	r7,r2
 402e2e0:	e1bfff17 	ldw	r6,-4(fp)
 402e2e4:	e17ffe17 	ldw	r5,-8(fp)
 402e2e8:	1809883a 	mov	r4,r3
 402e2ec:	402ea880 	call	402ea88 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 402e2f0:	e037883a 	mov	sp,fp
 402e2f4:	dfc00117 	ldw	ra,4(sp)
 402e2f8:	df000017 	ldw	fp,0(sp)
 402e2fc:	dec00204 	addi	sp,sp,8
 402e300:	f800283a 	ret

0402e304 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 402e304:	defffc04 	addi	sp,sp,-16
 402e308:	dfc00315 	stw	ra,12(sp)
 402e30c:	df000215 	stw	fp,8(sp)
 402e310:	df000204 	addi	fp,sp,8
 402e314:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 402e318:	e0bfff17 	ldw	r2,-4(fp)
 402e31c:	10800017 	ldw	r2,0(r2)
 402e320:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 402e324:	e0bffe17 	ldw	r2,-8(fp)
 402e328:	10c00a04 	addi	r3,r2,40
 402e32c:	e0bfff17 	ldw	r2,-4(fp)
 402e330:	10800217 	ldw	r2,8(r2)
 402e334:	100b883a 	mov	r5,r2
 402e338:	1809883a 	mov	r4,r3
 402e33c:	402e7140 	call	402e714 <altera_avalon_jtag_uart_close>
}
 402e340:	e037883a 	mov	sp,fp
 402e344:	dfc00117 	ldw	ra,4(sp)
 402e348:	df000017 	ldw	fp,0(sp)
 402e34c:	dec00204 	addi	sp,sp,8
 402e350:	f800283a 	ret

0402e354 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 402e354:	defffa04 	addi	sp,sp,-24
 402e358:	dfc00515 	stw	ra,20(sp)
 402e35c:	df000415 	stw	fp,16(sp)
 402e360:	df000404 	addi	fp,sp,16
 402e364:	e13ffd15 	stw	r4,-12(fp)
 402e368:	e17ffe15 	stw	r5,-8(fp)
 402e36c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 402e370:	e0bffd17 	ldw	r2,-12(fp)
 402e374:	10800017 	ldw	r2,0(r2)
 402e378:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 402e37c:	e0bffc17 	ldw	r2,-16(fp)
 402e380:	10800a04 	addi	r2,r2,40
 402e384:	e1bfff17 	ldw	r6,-4(fp)
 402e388:	e17ffe17 	ldw	r5,-8(fp)
 402e38c:	1009883a 	mov	r4,r2
 402e390:	402e77c0 	call	402e77c <altera_avalon_jtag_uart_ioctl>
}
 402e394:	e037883a 	mov	sp,fp
 402e398:	dfc00117 	ldw	ra,4(sp)
 402e39c:	df000017 	ldw	fp,0(sp)
 402e3a0:	dec00204 	addi	sp,sp,8
 402e3a4:	f800283a 	ret

0402e3a8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 402e3a8:	defffa04 	addi	sp,sp,-24
 402e3ac:	dfc00515 	stw	ra,20(sp)
 402e3b0:	df000415 	stw	fp,16(sp)
 402e3b4:	df000404 	addi	fp,sp,16
 402e3b8:	e13ffd15 	stw	r4,-12(fp)
 402e3bc:	e17ffe15 	stw	r5,-8(fp)
 402e3c0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 402e3c4:	e0bffd17 	ldw	r2,-12(fp)
 402e3c8:	00c00044 	movi	r3,1
 402e3cc:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 402e3d0:	e0bffd17 	ldw	r2,-12(fp)
 402e3d4:	10800017 	ldw	r2,0(r2)
 402e3d8:	10800104 	addi	r2,r2,4
 402e3dc:	1007883a 	mov	r3,r2
 402e3e0:	e0bffd17 	ldw	r2,-12(fp)
 402e3e4:	10800817 	ldw	r2,32(r2)
 402e3e8:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 402e3ec:	e0bffe17 	ldw	r2,-8(fp)
 402e3f0:	e0ffff17 	ldw	r3,-4(fp)
 402e3f4:	d8000015 	stw	zero,0(sp)
 402e3f8:	e1fffd17 	ldw	r7,-12(fp)
 402e3fc:	018100f4 	movhi	r6,1027
 402e400:	31b91a04 	addi	r6,r6,-7064
 402e404:	180b883a 	mov	r5,r3
 402e408:	1009883a 	mov	r4,r2
 402e40c:	402d69c0 	call	402d69c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 402e410:	e0bffd17 	ldw	r2,-12(fp)
 402e414:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 402e418:	e0bffd17 	ldw	r2,-12(fp)
 402e41c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 402e420:	d0e70c17 	ldw	r3,-25552(gp)
 402e424:	e1fffd17 	ldw	r7,-12(fp)
 402e428:	018100f4 	movhi	r6,1027
 402e42c:	31b99d04 	addi	r6,r6,-6540
 402e430:	180b883a 	mov	r5,r3
 402e434:	1009883a 	mov	r4,r2
 402e438:	402fdd80 	call	402fdd8 <alt_alarm_start>
 402e43c:	1000040e 	bge	r2,zero,402e450 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 402e440:	e0fffd17 	ldw	r3,-12(fp)
 402e444:	00a00034 	movhi	r2,32768
 402e448:	10bfffc4 	addi	r2,r2,-1
 402e44c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 402e450:	0001883a 	nop
 402e454:	e037883a 	mov	sp,fp
 402e458:	dfc00117 	ldw	ra,4(sp)
 402e45c:	df000017 	ldw	fp,0(sp)
 402e460:	dec00204 	addi	sp,sp,8
 402e464:	f800283a 	ret

0402e468 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 402e468:	defff804 	addi	sp,sp,-32
 402e46c:	df000715 	stw	fp,28(sp)
 402e470:	df000704 	addi	fp,sp,28
 402e474:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 402e478:	e0bfff17 	ldw	r2,-4(fp)
 402e47c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 402e480:	e0bffb17 	ldw	r2,-20(fp)
 402e484:	10800017 	ldw	r2,0(r2)
 402e488:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 402e48c:	e0bffc17 	ldw	r2,-16(fp)
 402e490:	10800104 	addi	r2,r2,4
 402e494:	10800037 	ldwio	r2,0(r2)
 402e498:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 402e49c:	e0bffd17 	ldw	r2,-12(fp)
 402e4a0:	1080c00c 	andi	r2,r2,768
 402e4a4:	10006d26 	beq	r2,zero,402e65c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 402e4a8:	e0bffd17 	ldw	r2,-12(fp)
 402e4ac:	1080400c 	andi	r2,r2,256
 402e4b0:	10003526 	beq	r2,zero,402e588 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 402e4b4:	00800074 	movhi	r2,1
 402e4b8:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 402e4bc:	e0bffb17 	ldw	r2,-20(fp)
 402e4c0:	10800a17 	ldw	r2,40(r2)
 402e4c4:	10800044 	addi	r2,r2,1
 402e4c8:	1081ffcc 	andi	r2,r2,2047
 402e4cc:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 402e4d0:	e0bffb17 	ldw	r2,-20(fp)
 402e4d4:	10c00b17 	ldw	r3,44(r2)
 402e4d8:	e0bffe17 	ldw	r2,-8(fp)
 402e4dc:	18801526 	beq	r3,r2,402e534 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 402e4e0:	e0bffc17 	ldw	r2,-16(fp)
 402e4e4:	10800037 	ldwio	r2,0(r2)
 402e4e8:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 402e4ec:	e0bff917 	ldw	r2,-28(fp)
 402e4f0:	10a0000c 	andi	r2,r2,32768
 402e4f4:	10001126 	beq	r2,zero,402e53c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 402e4f8:	e0bffb17 	ldw	r2,-20(fp)
 402e4fc:	10800a17 	ldw	r2,40(r2)
 402e500:	e0fff917 	ldw	r3,-28(fp)
 402e504:	1809883a 	mov	r4,r3
 402e508:	e0fffb17 	ldw	r3,-20(fp)
 402e50c:	1885883a 	add	r2,r3,r2
 402e510:	10800e04 	addi	r2,r2,56
 402e514:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 402e518:	e0bffb17 	ldw	r2,-20(fp)
 402e51c:	10800a17 	ldw	r2,40(r2)
 402e520:	10800044 	addi	r2,r2,1
 402e524:	10c1ffcc 	andi	r3,r2,2047
 402e528:	e0bffb17 	ldw	r2,-20(fp)
 402e52c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 402e530:	003fe206 	br	402e4bc <__alt_data_end+0xfffee4bc>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 402e534:	0001883a 	nop
 402e538:	00000106 	br	402e540 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 402e53c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 402e540:	e0bff917 	ldw	r2,-28(fp)
 402e544:	10bfffec 	andhi	r2,r2,65535
 402e548:	10000f26 	beq	r2,zero,402e588 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 402e54c:	e0bffb17 	ldw	r2,-20(fp)
 402e550:	10c00817 	ldw	r3,32(r2)
 402e554:	00bfff84 	movi	r2,-2
 402e558:	1886703a 	and	r3,r3,r2
 402e55c:	e0bffb17 	ldw	r2,-20(fp)
 402e560:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 402e564:	e0bffc17 	ldw	r2,-16(fp)
 402e568:	10800104 	addi	r2,r2,4
 402e56c:	1007883a 	mov	r3,r2
 402e570:	e0bffb17 	ldw	r2,-20(fp)
 402e574:	10800817 	ldw	r2,32(r2)
 402e578:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 402e57c:	e0bffc17 	ldw	r2,-16(fp)
 402e580:	10800104 	addi	r2,r2,4
 402e584:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 402e588:	e0bffd17 	ldw	r2,-12(fp)
 402e58c:	1080800c 	andi	r2,r2,512
 402e590:	103fbe26 	beq	r2,zero,402e48c <__alt_data_end+0xfffee48c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 402e594:	e0bffd17 	ldw	r2,-12(fp)
 402e598:	1004d43a 	srli	r2,r2,16
 402e59c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 402e5a0:	00001406 	br	402e5f4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 402e5a4:	e0bffc17 	ldw	r2,-16(fp)
 402e5a8:	e0fffb17 	ldw	r3,-20(fp)
 402e5ac:	18c00d17 	ldw	r3,52(r3)
 402e5b0:	e13ffb17 	ldw	r4,-20(fp)
 402e5b4:	20c7883a 	add	r3,r4,r3
 402e5b8:	18c20e04 	addi	r3,r3,2104
 402e5bc:	18c00003 	ldbu	r3,0(r3)
 402e5c0:	18c03fcc 	andi	r3,r3,255
 402e5c4:	18c0201c 	xori	r3,r3,128
 402e5c8:	18ffe004 	addi	r3,r3,-128
 402e5cc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 402e5d0:	e0bffb17 	ldw	r2,-20(fp)
 402e5d4:	10800d17 	ldw	r2,52(r2)
 402e5d8:	10800044 	addi	r2,r2,1
 402e5dc:	10c1ffcc 	andi	r3,r2,2047
 402e5e0:	e0bffb17 	ldw	r2,-20(fp)
 402e5e4:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 402e5e8:	e0bffa17 	ldw	r2,-24(fp)
 402e5ec:	10bfffc4 	addi	r2,r2,-1
 402e5f0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 402e5f4:	e0bffa17 	ldw	r2,-24(fp)
 402e5f8:	10000526 	beq	r2,zero,402e610 <altera_avalon_jtag_uart_irq+0x1a8>
 402e5fc:	e0bffb17 	ldw	r2,-20(fp)
 402e600:	10c00d17 	ldw	r3,52(r2)
 402e604:	e0bffb17 	ldw	r2,-20(fp)
 402e608:	10800c17 	ldw	r2,48(r2)
 402e60c:	18bfe51e 	bne	r3,r2,402e5a4 <__alt_data_end+0xfffee5a4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 402e610:	e0bffa17 	ldw	r2,-24(fp)
 402e614:	103f9d26 	beq	r2,zero,402e48c <__alt_data_end+0xfffee48c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 402e618:	e0bffb17 	ldw	r2,-20(fp)
 402e61c:	10c00817 	ldw	r3,32(r2)
 402e620:	00bfff44 	movi	r2,-3
 402e624:	1886703a 	and	r3,r3,r2
 402e628:	e0bffb17 	ldw	r2,-20(fp)
 402e62c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 402e630:	e0bffb17 	ldw	r2,-20(fp)
 402e634:	10800017 	ldw	r2,0(r2)
 402e638:	10800104 	addi	r2,r2,4
 402e63c:	1007883a 	mov	r3,r2
 402e640:	e0bffb17 	ldw	r2,-20(fp)
 402e644:	10800817 	ldw	r2,32(r2)
 402e648:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 402e64c:	e0bffc17 	ldw	r2,-16(fp)
 402e650:	10800104 	addi	r2,r2,4
 402e654:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 402e658:	003f8c06 	br	402e48c <__alt_data_end+0xfffee48c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 402e65c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 402e660:	0001883a 	nop
 402e664:	e037883a 	mov	sp,fp
 402e668:	df000017 	ldw	fp,0(sp)
 402e66c:	dec00104 	addi	sp,sp,4
 402e670:	f800283a 	ret

0402e674 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 402e674:	defff804 	addi	sp,sp,-32
 402e678:	df000715 	stw	fp,28(sp)
 402e67c:	df000704 	addi	fp,sp,28
 402e680:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 402e684:	e0bffb17 	ldw	r2,-20(fp)
 402e688:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 402e68c:	e0bff917 	ldw	r2,-28(fp)
 402e690:	10800017 	ldw	r2,0(r2)
 402e694:	10800104 	addi	r2,r2,4
 402e698:	10800037 	ldwio	r2,0(r2)
 402e69c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 402e6a0:	e0bffa17 	ldw	r2,-24(fp)
 402e6a4:	1081000c 	andi	r2,r2,1024
 402e6a8:	10000b26 	beq	r2,zero,402e6d8 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 402e6ac:	e0bff917 	ldw	r2,-28(fp)
 402e6b0:	10800017 	ldw	r2,0(r2)
 402e6b4:	10800104 	addi	r2,r2,4
 402e6b8:	1007883a 	mov	r3,r2
 402e6bc:	e0bff917 	ldw	r2,-28(fp)
 402e6c0:	10800817 	ldw	r2,32(r2)
 402e6c4:	10810014 	ori	r2,r2,1024
 402e6c8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 402e6cc:	e0bff917 	ldw	r2,-28(fp)
 402e6d0:	10000915 	stw	zero,36(r2)
 402e6d4:	00000a06 	br	402e700 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 402e6d8:	e0bff917 	ldw	r2,-28(fp)
 402e6dc:	10c00917 	ldw	r3,36(r2)
 402e6e0:	00a00034 	movhi	r2,32768
 402e6e4:	10bfff04 	addi	r2,r2,-4
 402e6e8:	10c00536 	bltu	r2,r3,402e700 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 402e6ec:	e0bff917 	ldw	r2,-28(fp)
 402e6f0:	10800917 	ldw	r2,36(r2)
 402e6f4:	10c00044 	addi	r3,r2,1
 402e6f8:	e0bff917 	ldw	r2,-28(fp)
 402e6fc:	10c00915 	stw	r3,36(r2)
 402e700:	d0a70c17 	ldw	r2,-25552(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 402e704:	e037883a 	mov	sp,fp
 402e708:	df000017 	ldw	fp,0(sp)
 402e70c:	dec00104 	addi	sp,sp,4
 402e710:	f800283a 	ret

0402e714 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 402e714:	defffd04 	addi	sp,sp,-12
 402e718:	df000215 	stw	fp,8(sp)
 402e71c:	df000204 	addi	fp,sp,8
 402e720:	e13ffe15 	stw	r4,-8(fp)
 402e724:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 402e728:	00000506 	br	402e740 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 402e72c:	e0bfff17 	ldw	r2,-4(fp)
 402e730:	1090000c 	andi	r2,r2,16384
 402e734:	10000226 	beq	r2,zero,402e740 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 402e738:	00bffd44 	movi	r2,-11
 402e73c:	00000b06 	br	402e76c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 402e740:	e0bffe17 	ldw	r2,-8(fp)
 402e744:	10c00d17 	ldw	r3,52(r2)
 402e748:	e0bffe17 	ldw	r2,-8(fp)
 402e74c:	10800c17 	ldw	r2,48(r2)
 402e750:	18800526 	beq	r3,r2,402e768 <altera_avalon_jtag_uart_close+0x54>
 402e754:	e0bffe17 	ldw	r2,-8(fp)
 402e758:	10c00917 	ldw	r3,36(r2)
 402e75c:	e0bffe17 	ldw	r2,-8(fp)
 402e760:	10800117 	ldw	r2,4(r2)
 402e764:	18bff136 	bltu	r3,r2,402e72c <__alt_data_end+0xfffee72c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 402e768:	0005883a 	mov	r2,zero
}
 402e76c:	e037883a 	mov	sp,fp
 402e770:	df000017 	ldw	fp,0(sp)
 402e774:	dec00104 	addi	sp,sp,4
 402e778:	f800283a 	ret

0402e77c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 402e77c:	defffa04 	addi	sp,sp,-24
 402e780:	df000515 	stw	fp,20(sp)
 402e784:	df000504 	addi	fp,sp,20
 402e788:	e13ffd15 	stw	r4,-12(fp)
 402e78c:	e17ffe15 	stw	r5,-8(fp)
 402e790:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 402e794:	00bff9c4 	movi	r2,-25
 402e798:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 402e79c:	e0bffe17 	ldw	r2,-8(fp)
 402e7a0:	10da8060 	cmpeqi	r3,r2,27137
 402e7a4:	1800031e 	bne	r3,zero,402e7b4 <altera_avalon_jtag_uart_ioctl+0x38>
 402e7a8:	109a80a0 	cmpeqi	r2,r2,27138
 402e7ac:	1000181e 	bne	r2,zero,402e810 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 402e7b0:	00002906 	br	402e858 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 402e7b4:	e0bffd17 	ldw	r2,-12(fp)
 402e7b8:	10c00117 	ldw	r3,4(r2)
 402e7bc:	00a00034 	movhi	r2,32768
 402e7c0:	10bfffc4 	addi	r2,r2,-1
 402e7c4:	18802126 	beq	r3,r2,402e84c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 402e7c8:	e0bfff17 	ldw	r2,-4(fp)
 402e7cc:	10800017 	ldw	r2,0(r2)
 402e7d0:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 402e7d4:	e0bffc17 	ldw	r2,-16(fp)
 402e7d8:	10800090 	cmplti	r2,r2,2
 402e7dc:	1000061e 	bne	r2,zero,402e7f8 <altera_avalon_jtag_uart_ioctl+0x7c>
 402e7e0:	e0fffc17 	ldw	r3,-16(fp)
 402e7e4:	00a00034 	movhi	r2,32768
 402e7e8:	10bfffc4 	addi	r2,r2,-1
 402e7ec:	18800226 	beq	r3,r2,402e7f8 <altera_avalon_jtag_uart_ioctl+0x7c>
 402e7f0:	e0bffc17 	ldw	r2,-16(fp)
 402e7f4:	00000206 	br	402e800 <altera_avalon_jtag_uart_ioctl+0x84>
 402e7f8:	00a00034 	movhi	r2,32768
 402e7fc:	10bfff84 	addi	r2,r2,-2
 402e800:	e0fffd17 	ldw	r3,-12(fp)
 402e804:	18800115 	stw	r2,4(r3)
      rc = 0;
 402e808:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 402e80c:	00000f06 	br	402e84c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 402e810:	e0bffd17 	ldw	r2,-12(fp)
 402e814:	10c00117 	ldw	r3,4(r2)
 402e818:	00a00034 	movhi	r2,32768
 402e81c:	10bfffc4 	addi	r2,r2,-1
 402e820:	18800c26 	beq	r3,r2,402e854 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 402e824:	e0bffd17 	ldw	r2,-12(fp)
 402e828:	10c00917 	ldw	r3,36(r2)
 402e82c:	e0bffd17 	ldw	r2,-12(fp)
 402e830:	10800117 	ldw	r2,4(r2)
 402e834:	1885803a 	cmpltu	r2,r3,r2
 402e838:	10c03fcc 	andi	r3,r2,255
 402e83c:	e0bfff17 	ldw	r2,-4(fp)
 402e840:	10c00015 	stw	r3,0(r2)
      rc = 0;
 402e844:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 402e848:	00000206 	br	402e854 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 402e84c:	0001883a 	nop
 402e850:	00000106 	br	402e858 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 402e854:	0001883a 	nop

  default:
    break;
  }

  return rc;
 402e858:	e0bffb17 	ldw	r2,-20(fp)
}
 402e85c:	e037883a 	mov	sp,fp
 402e860:	df000017 	ldw	fp,0(sp)
 402e864:	dec00104 	addi	sp,sp,4
 402e868:	f800283a 	ret

0402e86c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 402e86c:	defff304 	addi	sp,sp,-52
 402e870:	dfc00c15 	stw	ra,48(sp)
 402e874:	df000b15 	stw	fp,44(sp)
 402e878:	df000b04 	addi	fp,sp,44
 402e87c:	e13ffc15 	stw	r4,-16(fp)
 402e880:	e17ffd15 	stw	r5,-12(fp)
 402e884:	e1bffe15 	stw	r6,-8(fp)
 402e888:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 402e88c:	e0bffd17 	ldw	r2,-12(fp)
 402e890:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 402e894:	00004706 	br	402e9b4 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 402e898:	e0bffc17 	ldw	r2,-16(fp)
 402e89c:	10800a17 	ldw	r2,40(r2)
 402e8a0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 402e8a4:	e0bffc17 	ldw	r2,-16(fp)
 402e8a8:	10800b17 	ldw	r2,44(r2)
 402e8ac:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 402e8b0:	e0fff717 	ldw	r3,-36(fp)
 402e8b4:	e0bff817 	ldw	r2,-32(fp)
 402e8b8:	18800536 	bltu	r3,r2,402e8d0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 402e8bc:	e0fff717 	ldw	r3,-36(fp)
 402e8c0:	e0bff817 	ldw	r2,-32(fp)
 402e8c4:	1885c83a 	sub	r2,r3,r2
 402e8c8:	e0bff615 	stw	r2,-40(fp)
 402e8cc:	00000406 	br	402e8e0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 402e8d0:	00c20004 	movi	r3,2048
 402e8d4:	e0bff817 	ldw	r2,-32(fp)
 402e8d8:	1885c83a 	sub	r2,r3,r2
 402e8dc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 402e8e0:	e0bff617 	ldw	r2,-40(fp)
 402e8e4:	10001e26 	beq	r2,zero,402e960 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 402e8e8:	e0fffe17 	ldw	r3,-8(fp)
 402e8ec:	e0bff617 	ldw	r2,-40(fp)
 402e8f0:	1880022e 	bgeu	r3,r2,402e8fc <altera_avalon_jtag_uart_read+0x90>
        n = space;
 402e8f4:	e0bffe17 	ldw	r2,-8(fp)
 402e8f8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 402e8fc:	e0bffc17 	ldw	r2,-16(fp)
 402e900:	10c00e04 	addi	r3,r2,56
 402e904:	e0bff817 	ldw	r2,-32(fp)
 402e908:	1885883a 	add	r2,r3,r2
 402e90c:	e1bff617 	ldw	r6,-40(fp)
 402e910:	100b883a 	mov	r5,r2
 402e914:	e13ff517 	ldw	r4,-44(fp)
 402e918:	40264740 	call	4026474 <memcpy>
      ptr   += n;
 402e91c:	e0fff517 	ldw	r3,-44(fp)
 402e920:	e0bff617 	ldw	r2,-40(fp)
 402e924:	1885883a 	add	r2,r3,r2
 402e928:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 402e92c:	e0fffe17 	ldw	r3,-8(fp)
 402e930:	e0bff617 	ldw	r2,-40(fp)
 402e934:	1885c83a 	sub	r2,r3,r2
 402e938:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 402e93c:	e0fff817 	ldw	r3,-32(fp)
 402e940:	e0bff617 	ldw	r2,-40(fp)
 402e944:	1885883a 	add	r2,r3,r2
 402e948:	10c1ffcc 	andi	r3,r2,2047
 402e94c:	e0bffc17 	ldw	r2,-16(fp)
 402e950:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 402e954:	e0bffe17 	ldw	r2,-8(fp)
 402e958:	00bfcf16 	blt	zero,r2,402e898 <__alt_data_end+0xfffee898>
 402e95c:	00000106 	br	402e964 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 402e960:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 402e964:	e0fff517 	ldw	r3,-44(fp)
 402e968:	e0bffd17 	ldw	r2,-12(fp)
 402e96c:	1880141e 	bne	r3,r2,402e9c0 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 402e970:	e0bfff17 	ldw	r2,-4(fp)
 402e974:	1090000c 	andi	r2,r2,16384
 402e978:	1000131e 	bne	r2,zero,402e9c8 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 402e97c:	0001883a 	nop
 402e980:	e0bffc17 	ldw	r2,-16(fp)
 402e984:	10c00a17 	ldw	r3,40(r2)
 402e988:	e0bff717 	ldw	r2,-36(fp)
 402e98c:	1880051e 	bne	r3,r2,402e9a4 <altera_avalon_jtag_uart_read+0x138>
 402e990:	e0bffc17 	ldw	r2,-16(fp)
 402e994:	10c00917 	ldw	r3,36(r2)
 402e998:	e0bffc17 	ldw	r2,-16(fp)
 402e99c:	10800117 	ldw	r2,4(r2)
 402e9a0:	18bff736 	bltu	r3,r2,402e980 <__alt_data_end+0xfffee980>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 402e9a4:	e0bffc17 	ldw	r2,-16(fp)
 402e9a8:	10c00a17 	ldw	r3,40(r2)
 402e9ac:	e0bff717 	ldw	r2,-36(fp)
 402e9b0:	18800726 	beq	r3,r2,402e9d0 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 402e9b4:	e0bffe17 	ldw	r2,-8(fp)
 402e9b8:	00bfb716 	blt	zero,r2,402e898 <__alt_data_end+0xfffee898>
 402e9bc:	00000506 	br	402e9d4 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 402e9c0:	0001883a 	nop
 402e9c4:	00000306 	br	402e9d4 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 402e9c8:	0001883a 	nop
 402e9cc:	00000106 	br	402e9d4 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 402e9d0:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 402e9d4:	e0fff517 	ldw	r3,-44(fp)
 402e9d8:	e0bffd17 	ldw	r2,-12(fp)
 402e9dc:	18801826 	beq	r3,r2,402ea40 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402e9e0:	0005303a 	rdctl	r2,status
 402e9e4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402e9e8:	e0fffb17 	ldw	r3,-20(fp)
 402e9ec:	00bfff84 	movi	r2,-2
 402e9f0:	1884703a 	and	r2,r3,r2
 402e9f4:	1001703a 	wrctl	status,r2
  
  return context;
 402e9f8:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 402e9fc:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 402ea00:	e0bffc17 	ldw	r2,-16(fp)
 402ea04:	10800817 	ldw	r2,32(r2)
 402ea08:	10c00054 	ori	r3,r2,1
 402ea0c:	e0bffc17 	ldw	r2,-16(fp)
 402ea10:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 402ea14:	e0bffc17 	ldw	r2,-16(fp)
 402ea18:	10800017 	ldw	r2,0(r2)
 402ea1c:	10800104 	addi	r2,r2,4
 402ea20:	1007883a 	mov	r3,r2
 402ea24:	e0bffc17 	ldw	r2,-16(fp)
 402ea28:	10800817 	ldw	r2,32(r2)
 402ea2c:	18800035 	stwio	r2,0(r3)
 402ea30:	e0bffa17 	ldw	r2,-24(fp)
 402ea34:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402ea38:	e0bff917 	ldw	r2,-28(fp)
 402ea3c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 402ea40:	e0fff517 	ldw	r3,-44(fp)
 402ea44:	e0bffd17 	ldw	r2,-12(fp)
 402ea48:	18800426 	beq	r3,r2,402ea5c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 402ea4c:	e0fff517 	ldw	r3,-44(fp)
 402ea50:	e0bffd17 	ldw	r2,-12(fp)
 402ea54:	1885c83a 	sub	r2,r3,r2
 402ea58:	00000606 	br	402ea74 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 402ea5c:	e0bfff17 	ldw	r2,-4(fp)
 402ea60:	1090000c 	andi	r2,r2,16384
 402ea64:	10000226 	beq	r2,zero,402ea70 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 402ea68:	00bffd44 	movi	r2,-11
 402ea6c:	00000106 	br	402ea74 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 402ea70:	00bffec4 	movi	r2,-5
}
 402ea74:	e037883a 	mov	sp,fp
 402ea78:	dfc00117 	ldw	ra,4(sp)
 402ea7c:	df000017 	ldw	fp,0(sp)
 402ea80:	dec00204 	addi	sp,sp,8
 402ea84:	f800283a 	ret

0402ea88 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 402ea88:	defff304 	addi	sp,sp,-52
 402ea8c:	dfc00c15 	stw	ra,48(sp)
 402ea90:	df000b15 	stw	fp,44(sp)
 402ea94:	df000b04 	addi	fp,sp,44
 402ea98:	e13ffc15 	stw	r4,-16(fp)
 402ea9c:	e17ffd15 	stw	r5,-12(fp)
 402eaa0:	e1bffe15 	stw	r6,-8(fp)
 402eaa4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 402eaa8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 402eaac:	e0bffd17 	ldw	r2,-12(fp)
 402eab0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 402eab4:	00003706 	br	402eb94 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 402eab8:	e0bffc17 	ldw	r2,-16(fp)
 402eabc:	10800c17 	ldw	r2,48(r2)
 402eac0:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 402eac4:	e0bffc17 	ldw	r2,-16(fp)
 402eac8:	10800d17 	ldw	r2,52(r2)
 402eacc:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 402ead0:	e0fff917 	ldw	r3,-28(fp)
 402ead4:	e0bff517 	ldw	r2,-44(fp)
 402ead8:	1880062e 	bgeu	r3,r2,402eaf4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 402eadc:	e0fff517 	ldw	r3,-44(fp)
 402eae0:	e0bff917 	ldw	r2,-28(fp)
 402eae4:	1885c83a 	sub	r2,r3,r2
 402eae8:	10bfffc4 	addi	r2,r2,-1
 402eaec:	e0bff615 	stw	r2,-40(fp)
 402eaf0:	00000b06 	br	402eb20 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 402eaf4:	e0bff517 	ldw	r2,-44(fp)
 402eaf8:	10000526 	beq	r2,zero,402eb10 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 402eafc:	00c20004 	movi	r3,2048
 402eb00:	e0bff917 	ldw	r2,-28(fp)
 402eb04:	1885c83a 	sub	r2,r3,r2
 402eb08:	e0bff615 	stw	r2,-40(fp)
 402eb0c:	00000406 	br	402eb20 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 402eb10:	00c1ffc4 	movi	r3,2047
 402eb14:	e0bff917 	ldw	r2,-28(fp)
 402eb18:	1885c83a 	sub	r2,r3,r2
 402eb1c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 402eb20:	e0bff617 	ldw	r2,-40(fp)
 402eb24:	10001e26 	beq	r2,zero,402eba0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 402eb28:	e0fffe17 	ldw	r3,-8(fp)
 402eb2c:	e0bff617 	ldw	r2,-40(fp)
 402eb30:	1880022e 	bgeu	r3,r2,402eb3c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 402eb34:	e0bffe17 	ldw	r2,-8(fp)
 402eb38:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 402eb3c:	e0bffc17 	ldw	r2,-16(fp)
 402eb40:	10c20e04 	addi	r3,r2,2104
 402eb44:	e0bff917 	ldw	r2,-28(fp)
 402eb48:	1885883a 	add	r2,r3,r2
 402eb4c:	e1bff617 	ldw	r6,-40(fp)
 402eb50:	e17ffd17 	ldw	r5,-12(fp)
 402eb54:	1009883a 	mov	r4,r2
 402eb58:	40264740 	call	4026474 <memcpy>
      ptr   += n;
 402eb5c:	e0fffd17 	ldw	r3,-12(fp)
 402eb60:	e0bff617 	ldw	r2,-40(fp)
 402eb64:	1885883a 	add	r2,r3,r2
 402eb68:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 402eb6c:	e0fffe17 	ldw	r3,-8(fp)
 402eb70:	e0bff617 	ldw	r2,-40(fp)
 402eb74:	1885c83a 	sub	r2,r3,r2
 402eb78:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 402eb7c:	e0fff917 	ldw	r3,-28(fp)
 402eb80:	e0bff617 	ldw	r2,-40(fp)
 402eb84:	1885883a 	add	r2,r3,r2
 402eb88:	10c1ffcc 	andi	r3,r2,2047
 402eb8c:	e0bffc17 	ldw	r2,-16(fp)
 402eb90:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 402eb94:	e0bffe17 	ldw	r2,-8(fp)
 402eb98:	00bfc716 	blt	zero,r2,402eab8 <__alt_data_end+0xfffeeab8>
 402eb9c:	00000106 	br	402eba4 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 402eba0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402eba4:	0005303a 	rdctl	r2,status
 402eba8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402ebac:	e0fffb17 	ldw	r3,-20(fp)
 402ebb0:	00bfff84 	movi	r2,-2
 402ebb4:	1884703a 	and	r2,r3,r2
 402ebb8:	1001703a 	wrctl	status,r2
  
  return context;
 402ebbc:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 402ebc0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 402ebc4:	e0bffc17 	ldw	r2,-16(fp)
 402ebc8:	10800817 	ldw	r2,32(r2)
 402ebcc:	10c00094 	ori	r3,r2,2
 402ebd0:	e0bffc17 	ldw	r2,-16(fp)
 402ebd4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 402ebd8:	e0bffc17 	ldw	r2,-16(fp)
 402ebdc:	10800017 	ldw	r2,0(r2)
 402ebe0:	10800104 	addi	r2,r2,4
 402ebe4:	1007883a 	mov	r3,r2
 402ebe8:	e0bffc17 	ldw	r2,-16(fp)
 402ebec:	10800817 	ldw	r2,32(r2)
 402ebf0:	18800035 	stwio	r2,0(r3)
 402ebf4:	e0bffa17 	ldw	r2,-24(fp)
 402ebf8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402ebfc:	e0bff817 	ldw	r2,-32(fp)
 402ec00:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 402ec04:	e0bffe17 	ldw	r2,-8(fp)
 402ec08:	0080100e 	bge	zero,r2,402ec4c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 402ec0c:	e0bfff17 	ldw	r2,-4(fp)
 402ec10:	1090000c 	andi	r2,r2,16384
 402ec14:	1000101e 	bne	r2,zero,402ec58 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 402ec18:	0001883a 	nop
 402ec1c:	e0bffc17 	ldw	r2,-16(fp)
 402ec20:	10c00d17 	ldw	r3,52(r2)
 402ec24:	e0bff517 	ldw	r2,-44(fp)
 402ec28:	1880051e 	bne	r3,r2,402ec40 <altera_avalon_jtag_uart_write+0x1b8>
 402ec2c:	e0bffc17 	ldw	r2,-16(fp)
 402ec30:	10c00917 	ldw	r3,36(r2)
 402ec34:	e0bffc17 	ldw	r2,-16(fp)
 402ec38:	10800117 	ldw	r2,4(r2)
 402ec3c:	18bff736 	bltu	r3,r2,402ec1c <__alt_data_end+0xfffeec1c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 402ec40:	e0bffc17 	ldw	r2,-16(fp)
 402ec44:	10800917 	ldw	r2,36(r2)
 402ec48:	1000051e 	bne	r2,zero,402ec60 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 402ec4c:	e0bffe17 	ldw	r2,-8(fp)
 402ec50:	00bfd016 	blt	zero,r2,402eb94 <__alt_data_end+0xfffeeb94>
 402ec54:	00000306 	br	402ec64 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 402ec58:	0001883a 	nop
 402ec5c:	00000106 	br	402ec64 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 402ec60:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 402ec64:	e0fffd17 	ldw	r3,-12(fp)
 402ec68:	e0bff717 	ldw	r2,-36(fp)
 402ec6c:	18800426 	beq	r3,r2,402ec80 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 402ec70:	e0fffd17 	ldw	r3,-12(fp)
 402ec74:	e0bff717 	ldw	r2,-36(fp)
 402ec78:	1885c83a 	sub	r2,r3,r2
 402ec7c:	00000606 	br	402ec98 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 402ec80:	e0bfff17 	ldw	r2,-4(fp)
 402ec84:	1090000c 	andi	r2,r2,16384
 402ec88:	10000226 	beq	r2,zero,402ec94 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 402ec8c:	00bffd44 	movi	r2,-11
 402ec90:	00000106 	br	402ec98 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 402ec94:	00bffec4 	movi	r2,-5
}
 402ec98:	e037883a 	mov	sp,fp
 402ec9c:	dfc00117 	ldw	ra,4(sp)
 402eca0:	df000017 	ldw	fp,0(sp)
 402eca4:	dec00204 	addi	sp,sp,8
 402eca8:	f800283a 	ret

0402ecac <altera_avalon_mailbox_identify>:
 * Check an instance open match
 * with the callback register
 */

static void altera_avalon_mailbox_identify (altera_avalon_mailbox_dev *dev)
{
 402ecac:	defffd04 	addi	sp,sp,-12
 402ecb0:	df000215 	stw	fp,8(sp)
 402ecb4:	df000204 	addi	fp,sp,8
 402ecb8:	e13fff15 	stw	r4,-4(fp)
    /* Random signature to test mailbox ownership */
    alt_u32 magic_num = 0x3A11B045;
 402ecbc:	008e84b4 	movhi	r2,14866
 402ecc0:	10ac1144 	addi	r2,r2,-20411
 402ecc4:	e0bffe15 	stw	r2,-8(fp)

    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, magic_num);
 402ecc8:	e0bfff17 	ldw	r2,-4(fp)
 402eccc:	10800a17 	ldw	r2,40(r2)
 402ecd0:	10800104 	addi	r2,r2,4
 402ecd4:	1007883a 	mov	r3,r2
 402ecd8:	e0bffe17 	ldw	r2,-8(fp)
 402ecdc:	18800035 	stwio	r2,0(r3)
    if((IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST)) == magic_num)
 402ece0:	e0bfff17 	ldw	r2,-4(fp)
 402ece4:	10800a17 	ldw	r2,40(r2)
 402ece8:	10800104 	addi	r2,r2,4
 402ecec:	10800037 	ldwio	r2,0(r2)
 402ecf0:	1007883a 	mov	r3,r2
 402ecf4:	e0bffe17 	ldw	r2,-8(fp)
 402ecf8:	1880081e 	bne	r3,r2,402ed1c <altera_avalon_mailbox_identify+0x70>
    {
        dev-> mbox_type = MBOX_TX;
 402ecfc:	e0bfff17 	ldw	r2,-4(fp)
 402ed00:	10000f15 	stw	zero,60(r2)
        /* Clear message_ptr to default */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, 0x0);
 402ed04:	e0bfff17 	ldw	r2,-4(fp)
 402ed08:	10800a17 	ldw	r2,40(r2)
 402ed0c:	10800104 	addi	r2,r2,4
 402ed10:	0007883a 	mov	r3,zero
 402ed14:	10c00035 	stwio	r3,0(r2)
    } else
    {
	    dev->mbox_type = MBOX_RX;
    }
}
 402ed18:	00000306 	br	402ed28 <altera_avalon_mailbox_identify+0x7c>
        dev-> mbox_type = MBOX_TX;
        /* Clear message_ptr to default */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, 0x0);
    } else
    {
	    dev->mbox_type = MBOX_RX;
 402ed1c:	e0bfff17 	ldw	r2,-4(fp)
 402ed20:	00c00044 	movi	r3,1
 402ed24:	10c00f15 	stw	r3,60(r2)
    }
}
 402ed28:	0001883a 	nop
 402ed2c:	e037883a 	mov	sp,fp
 402ed30:	df000017 	ldw	fp,0(sp)
 402ed34:	dec00104 	addi	sp,sp,4
 402ed38:	f800283a 	ret

0402ed3c <altera_avalon_mailbox_post>:
/*
 *   altera_avalon_mailbox_post
 *   This function post message out through sender mailbox
 */
static alt_32 altera_avalon_mailbox_post (altera_avalon_mailbox_dev *dev,  void *message)
{
 402ed3c:	defffc04 	addi	sp,sp,-16
 402ed40:	df000315 	stw	fp,12(sp)
 402ed44:	df000304 	addi	fp,sp,12
 402ed48:	e13ffe15 	stw	r4,-8(fp)
 402ed4c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 *mbox_msg = (alt_u32*) message ;
 402ed50:	e0bfff17 	ldw	r2,-4(fp)
 402ed54:	e0bffd15 	stw	r2,-12(fp)

    if (mbox_msg != NULL) {
 402ed58:	e0bffd17 	ldw	r2,-12(fp)
 402ed5c:	10001026 	beq	r2,zero,402eda0 <altera_avalon_mailbox_post+0x64>
        /* When message space available, post the message out */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, mbox_msg[1]);
 402ed60:	e0bffe17 	ldw	r2,-8(fp)
 402ed64:	10800a17 	ldw	r2,40(r2)
 402ed68:	10800104 	addi	r2,r2,4
 402ed6c:	1007883a 	mov	r3,r2
 402ed70:	e0bffd17 	ldw	r2,-12(fp)
 402ed74:	10800104 	addi	r2,r2,4
 402ed78:	10800017 	ldw	r2,0(r2)
 402ed7c:	18800035 	stwio	r2,0(r3)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, mbox_msg[0]);
 402ed80:	e0bffe17 	ldw	r2,-8(fp)
 402ed84:	10800a17 	ldw	r2,40(r2)
 402ed88:	1007883a 	mov	r3,r2
 402ed8c:	e0bffd17 	ldw	r2,-12(fp)
 402ed90:	10800017 	ldw	r2,0(r2)
 402ed94:	18800035 	stwio	r2,0(r3)
        return 0;
 402ed98:	0005883a 	mov	r2,zero
 402ed9c:	00000106 	br	402eda4 <altera_avalon_mailbox_post+0x68>
    }
    /* Invalid NULL message received */
    return -EINVAL;
 402eda0:	00bffa84 	movi	r2,-22
}
 402eda4:	e037883a 	mov	sp,fp
 402eda8:	df000017 	ldw	fp,0(sp)
 402edac:	dec00104 	addi	sp,sp,4
 402edb0:	f800283a 	ret

0402edb4 <altera_avalon_mailbox_simple_tx_isr>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_tx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_tx_isr(void *context, alt_u32 id)
#endif
{
 402edb4:	defff604 	addi	sp,sp,-40
 402edb8:	dfc00915 	stw	ra,36(sp)
 402edbc:	df000815 	stw	fp,32(sp)
 402edc0:	df000804 	addi	fp,sp,32
 402edc4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
 402edc8:	e0bfff17 	ldw	r2,-4(fp)
 402edcc:	e0bff815 	stw	r2,-32(fp)
    int status = 0;
 402edd0:	e03ff915 	stw	zero,-28(fp)
    alt_u32 data;
    alt_irq_context cpu_sr;
    alt_u32 *message = dev->mbox_msg;
 402edd4:	e0bff817 	ldw	r2,-32(fp)
 402edd8:	10801017 	ldw	r2,64(r2)
 402eddc:	e0bffa15 	stw	r2,-24(fp)

    /* Mask mailbox interrupt */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 402ede0:	e0bff817 	ldw	r2,-32(fp)
 402ede4:	10800a17 	ldw	r2,40(r2)
 402ede8:	10800304 	addi	r2,r2,12
 402edec:	10800037 	ldwio	r2,0(r2)
 402edf0:	1007883a 	mov	r3,r2
 402edf4:	00bfff44 	movi	r2,-3
 402edf8:	1884703a 	and	r2,r3,r2
 402edfc:	e0bffb15 	stw	r2,-20(fp)
               (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 402ee00:	e0bff817 	ldw	r2,-32(fp)
 402ee04:	10800a17 	ldw	r2,40(r2)
 402ee08:	10800304 	addi	r2,r2,12
 402ee0c:	1007883a 	mov	r3,r2
 402ee10:	e0bffb17 	ldw	r2,-20(fp)
 402ee14:	18800035 	stwio	r2,0(r3)

    if (message != NULL)
 402ee18:	e0bffa17 	ldw	r2,-24(fp)
 402ee1c:	10002d26 	beq	r2,zero,402eed4 <altera_avalon_mailbox_simple_tx_isr+0x120>
    {
        /* Post out message requested */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, message[1]);
 402ee20:	e0bff817 	ldw	r2,-32(fp)
 402ee24:	10800a17 	ldw	r2,40(r2)
 402ee28:	10800104 	addi	r2,r2,4
 402ee2c:	1007883a 	mov	r3,r2
 402ee30:	e0bffa17 	ldw	r2,-24(fp)
 402ee34:	10800104 	addi	r2,r2,4
 402ee38:	10800017 	ldw	r2,0(r2)
 402ee3c:	18800035 	stwio	r2,0(r3)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, message[0]);
 402ee40:	e0bff817 	ldw	r2,-32(fp)
 402ee44:	10800a17 	ldw	r2,40(r2)
 402ee48:	1007883a 	mov	r3,r2
 402ee4c:	e0bffa17 	ldw	r2,-24(fp)
 402ee50:	10800017 	ldw	r2,0(r2)
 402ee54:	18800035 	stwio	r2,0(r3)
    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 402ee58:	e0bff817 	ldw	r2,-32(fp)
 402ee5c:	10800a17 	ldw	r2,40(r2)
 402ee60:	10800204 	addi	r2,r2,8
 402ee64:	10800037 	ldwio	r2,0(r2)
        		  & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
 402ee68:	1080008c 	andi	r2,r2,2
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, message[0]);
    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 402ee6c:	1005d07a 	srai	r2,r2,1
 402ee70:	e0bff915 	stw	r2,-28(fp)
        		  & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
        if (dev->tx_cb)
 402ee74:	e0bff817 	ldw	r2,-32(fp)
 402ee78:	10800d17 	ldw	r2,52(r2)
 402ee7c:	10001126 	beq	r2,zero,402eec4 <altera_avalon_mailbox_simple_tx_isr+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402ee80:	0005303a 	rdctl	r2,status
 402ee84:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402ee88:	e0fffd17 	ldw	r3,-12(fp)
 402ee8c:	00bfff84 	movi	r2,-2
 402ee90:	1884703a 	and	r2,r3,r2
 402ee94:	1001703a 	wrctl	status,r2
  
  return context;
 402ee98:	e0bffd17 	ldw	r2,-12(fp)
        {
            cpu_sr = alt_irq_disable_all();
 402ee9c:	e0bffc15 	stw	r2,-16(fp)
  	        (dev->tx_cb)(message, status);
 402eea0:	e0bff817 	ldw	r2,-32(fp)
 402eea4:	10800d17 	ldw	r2,52(r2)
 402eea8:	e17ff917 	ldw	r5,-28(fp)
 402eeac:	e13ffa17 	ldw	r4,-24(fp)
 402eeb0:	103ee83a 	callr	r2
 402eeb4:	e0bffc17 	ldw	r2,-16(fp)
 402eeb8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402eebc:	e0bffe17 	ldw	r2,-8(fp)
 402eec0:	1001703a 	wrctl	status,r2
            alt_irq_enable_all(cpu_sr);
        }
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
 402eec4:	e0bff817 	ldw	r2,-32(fp)
 402eec8:	10001015 	stw	zero,64(r2)
        dev->lock = 0;
 402eecc:	e0bff817 	ldw	r2,-32(fp)
 402eed0:	10001105 	stb	zero,68(r2)
    }
}
 402eed4:	0001883a 	nop
 402eed8:	e037883a 	mov	sp,fp
 402eedc:	dfc00117 	ldw	ra,4(sp)
 402eee0:	df000017 	ldw	fp,0(sp)
 402eee4:	dec00204 	addi	sp,sp,8
 402eee8:	f800283a 	ret

0402eeec <altera_avalon_mailbox_simple_rx_isr>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_rx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_rx_isr(void *context, alt_u32 id)
#endif
{
 402eeec:	defff704 	addi	sp,sp,-36
 402eef0:	dfc00815 	stw	ra,32(sp)
 402eef4:	df000715 	stw	fp,28(sp)
 402eef8:	df000704 	addi	fp,sp,28
 402eefc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
 402ef00:	e0bfff17 	ldw	r2,-4(fp)
 402ef04:	e0bff915 	stw	r2,-28(fp)
    alt_irq_context cpu_sr;
    alt_u32 inbox[2];

    inbox[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
 402ef08:	e0bff917 	ldw	r2,-28(fp)
 402ef0c:	10800a17 	ldw	r2,40(r2)
 402ef10:	10800104 	addi	r2,r2,4
 402ef14:	10800037 	ldwio	r2,0(r2)
 402ef18:	e0bffe15 	stw	r2,-8(fp)
    inbox[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
 402ef1c:	e0bff917 	ldw	r2,-28(fp)
 402ef20:	10800a17 	ldw	r2,40(r2)
 402ef24:	10800037 	ldwio	r2,0(r2)
 402ef28:	e0bffd15 	stw	r2,-12(fp)

    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
    if (dev->rx_cb)
 402ef2c:	e0bff917 	ldw	r2,-28(fp)
 402ef30:	10800e17 	ldw	r2,56(r2)
 402ef34:	10001126 	beq	r2,zero,402ef7c <altera_avalon_mailbox_simple_rx_isr+0x90>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402ef38:	0005303a 	rdctl	r2,status
 402ef3c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402ef40:	e0fffb17 	ldw	r3,-20(fp)
 402ef44:	00bfff84 	movi	r2,-2
 402ef48:	1884703a 	and	r2,r3,r2
 402ef4c:	1001703a 	wrctl	status,r2
  
  return context;
 402ef50:	e0bffb17 	ldw	r2,-20(fp)
    {
        cpu_sr = alt_irq_disable_all();
 402ef54:	e0bffa15 	stw	r2,-24(fp)
        (dev->rx_cb)(inbox);
 402ef58:	e0bff917 	ldw	r2,-28(fp)
 402ef5c:	10800e17 	ldw	r2,56(r2)
 402ef60:	e0fffd04 	addi	r3,fp,-12
 402ef64:	1809883a 	mov	r4,r3
 402ef68:	103ee83a 	callr	r2
 402ef6c:	e0bffa17 	ldw	r2,-24(fp)
 402ef70:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402ef74:	e0bffc17 	ldw	r2,-16(fp)
 402ef78:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }
}
 402ef7c:	0001883a 	nop
 402ef80:	e037883a 	mov	sp,fp
 402ef84:	dfc00117 	ldw	ra,4(sp)
 402ef88:	df000017 	ldw	fp,0(sp)
 402ef8c:	dec00204 	addi	sp,sp,8
 402ef90:	f800283a 	ret

0402ef94 <altera_avalon_mailbox_simple_init>:
 * Altera avalon mailbox init
 * Initialize mailbox device and identify sender/receiver mailbox
 */
void altera_avalon_mailbox_simple_init (altera_avalon_mailbox_dev *dev,
		                               int intr_id, int irq)
{
 402ef94:	defffb04 	addi	sp,sp,-20
 402ef98:	dfc00415 	stw	ra,16(sp)
 402ef9c:	df000315 	stw	fp,12(sp)
 402efa0:	df000304 	addi	fp,sp,12
 402efa4:	e13ffd15 	stw	r4,-12(fp)
 402efa8:	e17ffe15 	stw	r5,-8(fp)
 402efac:	e1bfff15 	stw	r6,-4(fp)
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mailbox_simple_list);
 402efb0:	d1600e04 	addi	r5,gp,-32712
 402efb4:	e13ffd17 	ldw	r4,-12(fp)
 402efb8:	40300980 	call	4030098 <alt_dev_llist_insert>
    
    dev->mailbox_irq    = irq;
 402efbc:	e0ffff17 	ldw	r3,-4(fp)
 402efc0:	e0bffd17 	ldw	r2,-12(fp)
 402efc4:	10c00b15 	stw	r3,44(r2)
    dev->mailbox_intr_ctrl_id = intr_id;
 402efc8:	e0fffe17 	ldw	r3,-8(fp)
 402efcc:	e0bffd17 	ldw	r2,-12(fp)
 402efd0:	10c00c15 	stw	r3,48(r2)
    dev->rx_cb = NULL;
 402efd4:	e0bffd17 	ldw	r2,-12(fp)
 402efd8:	10000e15 	stw	zero,56(r2)
    dev->tx_cb = NULL;
 402efdc:	e0bffd17 	ldw	r2,-12(fp)
 402efe0:	10000d15 	stw	zero,52(r2)
    dev->mbox_msg = NULL;
 402efe4:	e0bffd17 	ldw	r2,-12(fp)
 402efe8:	10001015 	stw	zero,64(r2)
    
    ALT_SEM_CREATE (&dev->write_lock, 1);

    altera_avalon_mailbox_identify(dev);
 402efec:	e13ffd17 	ldw	r4,-12(fp)
 402eff0:	402ecac0 	call	402ecac <altera_avalon_mailbox_identify>
}
 402eff4:	0001883a 	nop
 402eff8:	e037883a 	mov	sp,fp
 402effc:	dfc00117 	ldw	ra,4(sp)
 402f000:	df000017 	ldw	fp,0(sp)
 402f004:	dec00204 	addi	sp,sp,8
 402f008:	f800283a 	ret

0402f00c <altera_avalon_mailbox_open>:
 * Search the list of registered mailboxes for one with the supplied name.
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
altera_avalon_mailbox_dev* altera_avalon_mailbox_open (const char *name,
		altera_mailbox_tx_cb tx_callback, altera_mailbox_rx_cb rx_callback)
{
 402f00c:	defff804 	addi	sp,sp,-32
 402f010:	dfc00715 	stw	ra,28(sp)
 402f014:	df000615 	stw	fp,24(sp)
 402f018:	df000604 	addi	fp,sp,24
 402f01c:	e13ffd15 	stw	r4,-12(fp)
 402f020:	e17ffe15 	stw	r5,-8(fp)
 402f024:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_mailbox_dev *dev;
    alt_u32 data;

    /* Find requested device */
    dev = (altera_avalon_mailbox_dev*) alt_find_dev (name, &alt_mailbox_simple_list);
 402f028:	d1600e04 	addi	r5,gp,-32712
 402f02c:	e13ffd17 	ldw	r4,-12(fp)
 402f030:	40301fc0 	call	40301fc <alt_find_dev>
 402f034:	e0bffb15 	stw	r2,-20(fp)
    if (dev == NULL)
 402f038:	e0bffb17 	ldw	r2,-20(fp)
 402f03c:	1000021e 	bne	r2,zero,402f048 <altera_avalon_mailbox_open+0x3c>
    {
        return NULL;
 402f040:	0005883a 	mov	r2,zero
 402f044:	00006506 	br	402f1dc <altera_avalon_mailbox_open+0x1d0>
    }

    /* Mask mailbox interrupt before ISR is being registered. */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
 402f048:	e0bffb17 	ldw	r2,-20(fp)
 402f04c:	10800a17 	ldw	r2,40(r2)
 402f050:	10800304 	addi	r2,r2,12
 402f054:	10800037 	ldwio	r2,0(r2)
 402f058:	e0bffc15 	stw	r2,-16(fp)
    if (dev->mbox_type == MBOX_TX) {
 402f05c:	e0bffb17 	ldw	r2,-20(fp)
 402f060:	10800f17 	ldw	r2,60(r2)
 402f064:	1000081e 	bne	r2,zero,402f088 <altera_avalon_mailbox_open+0x7c>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
 402f068:	e0bffb17 	ldw	r2,-20(fp)
 402f06c:	10800a17 	ldw	r2,40(r2)
 402f070:	10800304 	addi	r2,r2,12
 402f074:	1009883a 	mov	r4,r2
 402f078:	e0fffc17 	ldw	r3,-16(fp)
 402f07c:	00bfff44 	movi	r2,-3
 402f080:	1884703a 	and	r2,r3,r2
 402f084:	20800035 	stwio	r2,0(r4)
            (data & ~(ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK)));
    }
    if (dev->mbox_type == MBOX_RX) {
 402f088:	e0bffb17 	ldw	r2,-20(fp)
 402f08c:	10800f17 	ldw	r2,60(r2)
 402f090:	10800058 	cmpnei	r2,r2,1
 402f094:	1000081e 	bne	r2,zero,402f0b8 <altera_avalon_mailbox_open+0xac>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
 402f098:	e0bffb17 	ldw	r2,-20(fp)
 402f09c:	10800a17 	ldw	r2,40(r2)
 402f0a0:	10800304 	addi	r2,r2,12
 402f0a4:	1009883a 	mov	r4,r2
 402f0a8:	e0fffc17 	ldw	r3,-16(fp)
 402f0ac:	00bfff84 	movi	r2,-2
 402f0b0:	1884703a 	and	r2,r3,r2
 402f0b4:	20800035 	stwio	r2,0(r4)
    }

    /* If IRQ not connected, return device pointer without ISR register,
     * in polling mode.
     */
    if (dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED)
 402f0b8:	e0bffb17 	ldw	r2,-20(fp)
 402f0bc:	10800b17 	ldw	r2,44(r2)
 402f0c0:	10bfffd8 	cmpnei	r2,r2,-1
 402f0c4:	1000021e 	bne	r2,zero,402f0d0 <altera_avalon_mailbox_open+0xc4>
        return dev;
 402f0c8:	e0bffb17 	ldw	r2,-20(fp)
 402f0cc:	00004306 	br	402f1dc <altera_avalon_mailbox_open+0x1d0>

    /* For IRQ connected case */

    if ((tx_callback == NULL) && (rx_callback == NULL))
 402f0d0:	e0bffe17 	ldw	r2,-8(fp)
 402f0d4:	1000041e 	bne	r2,zero,402f0e8 <altera_avalon_mailbox_open+0xdc>
 402f0d8:	e0bfff17 	ldw	r2,-4(fp)
 402f0dc:	1000021e 	bne	r2,zero,402f0e8 <altera_avalon_mailbox_open+0xdc>
    {
    /* No callback, polling mode */
        return dev;
 402f0e0:	e0bffb17 	ldw	r2,-20(fp)
 402f0e4:	00003d06 	br	402f1dc <altera_avalon_mailbox_open+0x1d0>
    }

    /* Ensure user correctly use the mailbox
     * Return - Null if wrong direction set
     */
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
 402f0e8:	e0bffb17 	ldw	r2,-20(fp)
 402f0ec:	10800f17 	ldw	r2,60(r2)
 402f0f0:	1000021e 	bne	r2,zero,402f0fc <altera_avalon_mailbox_open+0xf0>
 402f0f4:	e0bfff17 	ldw	r2,-4(fp)
 402f0f8:	1000061e 	bne	r2,zero,402f114 <altera_avalon_mailbox_open+0x108>
	    ((dev->mbox_type == MBOX_RX) && (tx_callback != NULL)))
 402f0fc:	e0bffb17 	ldw	r2,-20(fp)
 402f100:	10800f17 	ldw	r2,60(r2)
    }

    /* Ensure user correctly use the mailbox
     * Return - Null if wrong direction set
     */
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
 402f104:	10800058 	cmpnei	r2,r2,1
 402f108:	1000041e 	bne	r2,zero,402f11c <altera_avalon_mailbox_open+0x110>
	    ((dev->mbox_type == MBOX_RX) && (tx_callback != NULL)))
 402f10c:	e0bffe17 	ldw	r2,-8(fp)
 402f110:	10000226 	beq	r2,zero,402f11c <altera_avalon_mailbox_open+0x110>
  	  /* Invalid callback  */
        return NULL;
 402f114:	0005883a 	mov	r2,zero
 402f118:	00003006 	br	402f1dc <altera_avalon_mailbox_open+0x1d0>

    /* IRQ is valid register callback
     * to current mailbox device
     */
    dev->tx_cb  = tx_callback;
 402f11c:	e0bffb17 	ldw	r2,-20(fp)
 402f120:	e0fffe17 	ldw	r3,-8(fp)
 402f124:	10c00d15 	stw	r3,52(r2)
    dev->rx_cb  = rx_callback;
 402f128:	e0bffb17 	ldw	r2,-20(fp)
 402f12c:	e0ffff17 	ldw	r3,-4(fp)
 402f130:	10c00e15 	stw	r3,56(r2)

    /* Register Mailbox's ISR */
    if (dev->mbox_type == MBOX_TX)
 402f134:	e0bffb17 	ldw	r2,-20(fp)
 402f138:	10800f17 	ldw	r2,60(r2)
 402f13c:	10000b1e 	bne	r2,zero,402f16c <altera_avalon_mailbox_open+0x160>
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_tx_isr,
 402f140:	e0bffb17 	ldw	r2,-20(fp)
 402f144:	10c00c17 	ldw	r3,48(r2)
 402f148:	e0bffb17 	ldw	r2,-20(fp)
 402f14c:	10800b17 	ldw	r2,44(r2)
 402f150:	d8000015 	stw	zero,0(sp)
 402f154:	e1fffb17 	ldw	r7,-20(fp)
 402f158:	018100f4 	movhi	r6,1027
 402f15c:	31bb6d04 	addi	r6,r6,-4684
 402f160:	100b883a 	mov	r5,r2
 402f164:	1809883a 	mov	r4,r3
 402f168:	402d69c0 	call	402d69c <alt_ic_isr_register>
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_tx_isr);
    #endif
    }
  
    if (dev->mbox_type == MBOX_RX)
 402f16c:	e0bffb17 	ldw	r2,-20(fp)
 402f170:	10800f17 	ldw	r2,60(r2)
 402f174:	10800058 	cmpnei	r2,r2,1
 402f178:	1000171e 	bne	r2,zero,402f1d8 <altera_avalon_mailbox_open+0x1cc>
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_rx_isr,
 402f17c:	e0bffb17 	ldw	r2,-20(fp)
 402f180:	10c00c17 	ldw	r3,48(r2)
 402f184:	e0bffb17 	ldw	r2,-20(fp)
 402f188:	10800b17 	ldw	r2,44(r2)
 402f18c:	d8000015 	stw	zero,0(sp)
 402f190:	e1fffb17 	ldw	r7,-20(fp)
 402f194:	018100f4 	movhi	r6,1027
 402f198:	31bbbb04 	addi	r6,r6,-4372
 402f19c:	100b883a 	mov	r5,r2
 402f1a0:	1809883a 	mov	r4,r3
 402f1a4:	402d69c0 	call	402d69c <alt_ic_isr_register>
                            dev, NULL);
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_rx_isr);
    #endif
        /* Enable Receiver interrupt to listen mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
 402f1a8:	e0bffb17 	ldw	r2,-20(fp)
 402f1ac:	10800a17 	ldw	r2,40(r2)
 402f1b0:	10800304 	addi	r2,r2,12
 402f1b4:	10800037 	ldwio	r2,0(r2)
 402f1b8:	10800054 	ori	r2,r2,1
 402f1bc:	e0bffc15 	stw	r2,-16(fp)
  	             (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 402f1c0:	e0bffb17 	ldw	r2,-20(fp)
 402f1c4:	10800a17 	ldw	r2,40(r2)
 402f1c8:	10800304 	addi	r2,r2,12
 402f1cc:	1007883a 	mov	r3,r2
 402f1d0:	e0bffc17 	ldw	r2,-16(fp)
 402f1d4:	18800035 	stwio	r2,0(r3)
    }
    return dev;
 402f1d8:	e0bffb17 	ldw	r2,-20(fp)
}
 402f1dc:	e037883a 	mov	sp,fp
 402f1e0:	dfc00117 	ldw	ra,4(sp)
 402f1e4:	df000017 	ldw	fp,0(sp)
 402f1e8:	dec00204 	addi	sp,sp,8
 402f1ec:	f800283a 	ret

0402f1f0 <altera_avalon_mailbox_close>:
/*
 * altera_avalon_mailbox_close
 * Disable mailbox interrupt and irq
 */
void altera_avalon_mailbox_close (altera_avalon_mailbox_dev *dev)
{
 402f1f0:	defffb04 	addi	sp,sp,-20
 402f1f4:	dfc00415 	stw	ra,16(sp)
 402f1f8:	df000315 	stw	fp,12(sp)
 402f1fc:	df000304 	addi	fp,sp,12
 402f200:	e13fff15 	stw	r4,-4(fp)
    alt_u32 data;
    if ((dev != NULL) && (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED))
 402f204:	e0bfff17 	ldw	r2,-4(fp)
 402f208:	10003926 	beq	r2,zero,402f2f0 <altera_avalon_mailbox_close+0x100>
 402f20c:	e0bfff17 	ldw	r2,-4(fp)
 402f210:	10800b17 	ldw	r2,44(r2)
 402f214:	10bfffe0 	cmpeqi	r2,r2,-1
 402f218:	1000351e 	bne	r2,zero,402f2f0 <altera_avalon_mailbox_close+0x100>
    {
        /* Mask interrupt */
        if (dev->mbox_type == MBOX_TX)
 402f21c:	e0bfff17 	ldw	r2,-4(fp)
 402f220:	10800f17 	ldw	r2,60(r2)
 402f224:	10000e1e 	bne	r2,zero,402f260 <altera_avalon_mailbox_close+0x70>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 402f228:	e0bfff17 	ldw	r2,-4(fp)
 402f22c:	10800a17 	ldw	r2,40(r2)
 402f230:	10800304 	addi	r2,r2,12
 402f234:	10800037 	ldwio	r2,0(r2)
 402f238:	1007883a 	mov	r3,r2
 402f23c:	00bfff44 	movi	r2,-3
 402f240:	1884703a 	and	r2,r3,r2
 402f244:	e0bffe15 	stw	r2,-8(fp)
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 402f248:	e0bfff17 	ldw	r2,-4(fp)
 402f24c:	10800a17 	ldw	r2,40(r2)
 402f250:	10800304 	addi	r2,r2,12
 402f254:	1007883a 	mov	r3,r2
 402f258:	e0bffe17 	ldw	r2,-8(fp)
 402f25c:	18800035 	stwio	r2,0(r3)
        }
        if (dev->mbox_type == MBOX_RX)
 402f260:	e0bfff17 	ldw	r2,-4(fp)
 402f264:	10800f17 	ldw	r2,60(r2)
 402f268:	10800058 	cmpnei	r2,r2,1
 402f26c:	10000e1e 	bne	r2,zero,402f2a8 <altera_avalon_mailbox_close+0xb8>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 402f270:	e0bfff17 	ldw	r2,-4(fp)
 402f274:	10800a17 	ldw	r2,40(r2)
 402f278:	10800304 	addi	r2,r2,12
 402f27c:	10800037 	ldwio	r2,0(r2)
 402f280:	1007883a 	mov	r3,r2
 402f284:	00bfff84 	movi	r2,-2
 402f288:	1884703a 	and	r2,r3,r2
 402f28c:	e0bffe15 	stw	r2,-8(fp)
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 402f290:	e0bfff17 	ldw	r2,-4(fp)
 402f294:	10800a17 	ldw	r2,40(r2)
 402f298:	10800304 	addi	r2,r2,12
 402f29c:	1007883a 	mov	r3,r2
 402f2a0:	e0bffe17 	ldw	r2,-8(fp)
 402f2a4:	18800035 	stwio	r2,0(r3)
        }
  
        /* De-register mailbox irq) */
        if (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED)
 402f2a8:	e0bfff17 	ldw	r2,-4(fp)
 402f2ac:	10800b17 	ldw	r2,44(r2)
 402f2b0:	10bfffe0 	cmpeqi	r2,r2,-1
 402f2b4:	10000a1e 	bne	r2,zero,402f2e0 <altera_avalon_mailbox_close+0xf0>
        {
        #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
            alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, NULL,
 402f2b8:	e0bfff17 	ldw	r2,-4(fp)
 402f2bc:	10c00c17 	ldw	r3,48(r2)
 402f2c0:	e0bfff17 	ldw	r2,-4(fp)
 402f2c4:	10800b17 	ldw	r2,44(r2)
 402f2c8:	d8000015 	stw	zero,0(sp)
 402f2cc:	e1ffff17 	ldw	r7,-4(fp)
 402f2d0:	000d883a 	mov	r6,zero
 402f2d4:	100b883a 	mov	r5,r2
 402f2d8:	1809883a 	mov	r4,r3
 402f2dc:	402d69c0 	call	402d69c <alt_ic_isr_register>
        #else
            alt_irq_register(dev->mailbox_irq, dev, NULL);
        #endif
        }
        /* De-registering callback to mailbox */
        dev->tx_cb  = NULL;
 402f2e0:	e0bfff17 	ldw	r2,-4(fp)
 402f2e4:	10000d15 	stw	zero,52(r2)
        dev->rx_cb  = NULL;
 402f2e8:	e0bfff17 	ldw	r2,-4(fp)
 402f2ec:	10000e15 	stw	zero,56(r2)
    }
}
 402f2f0:	0001883a 	nop
 402f2f4:	e037883a 	mov	sp,fp
 402f2f8:	dfc00117 	ldw	ra,4(sp)
 402f2fc:	df000017 	ldw	fp,0(sp)
 402f300:	dec00204 	addi	sp,sp,8
 402f304:	f800283a 	ret

0402f308 <altera_avalon_mailbox_status>:
 *   Return 0 when mailbox is empty or no pending message
 *   Return 1 when mailbox space is full or there is a message pending
 */

alt_u32 altera_avalon_mailbox_status (altera_avalon_mailbox_dev *dev)
{
 402f308:	defffd04 	addi	sp,sp,-12
 402f30c:	df000215 	stw	fp,8(sp)
 402f310:	df000204 	addi	fp,sp,8
 402f314:	e13fff15 	stw	r4,-4(fp)
    alt_u32 mailbox_sts = 0;
 402f318:	e03ffe15 	stw	zero,-8(fp)

    mailbox_sts = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_STS_OFST) & ALTERA_AVALON_MAILBOX_SIMPLE_STS_MSK);
 402f31c:	e0bfff17 	ldw	r2,-4(fp)
 402f320:	10800a17 	ldw	r2,40(r2)
 402f324:	10800204 	addi	r2,r2,8
 402f328:	10800037 	ldwio	r2,0(r2)
 402f32c:	108000cc 	andi	r2,r2,3
 402f330:	e0bffe15 	stw	r2,-8(fp)

    if (dev->mbox_type == MBOX_TX)
 402f334:	e0bfff17 	ldw	r2,-4(fp)
 402f338:	10800f17 	ldw	r2,60(r2)
 402f33c:	1000041e 	bne	r2,zero,402f350 <altera_avalon_mailbox_status+0x48>
        mailbox_sts = (mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
 402f340:	e0bffe17 	ldw	r2,-8(fp)
 402f344:	1080008c 	andi	r2,r2,2
 402f348:	1004d07a 	srli	r2,r2,1
 402f34c:	e0bffe15 	stw	r2,-8(fp)

    if (dev->mbox_type == MBOX_RX)
 402f350:	e0bfff17 	ldw	r2,-4(fp)
 402f354:	10800f17 	ldw	r2,60(r2)
 402f358:	10800058 	cmpnei	r2,r2,1
 402f35c:	1000031e 	bne	r2,zero,402f36c <altera_avalon_mailbox_status+0x64>
        mailbox_sts = mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_PENDING_MSK;
 402f360:	e0bffe17 	ldw	r2,-8(fp)
 402f364:	1080004c 	andi	r2,r2,1
 402f368:	e0bffe15 	stw	r2,-8(fp)

    return mailbox_sts;
 402f36c:	e0bffe17 	ldw	r2,-8(fp)
}
 402f370:	e037883a 	mov	sp,fp
 402f374:	df000017 	ldw	fp,0(sp)
 402f378:	dec00104 	addi	sp,sp,4
 402f37c:	f800283a 	ret

0402f380 <altera_avalon_mailbox_send>:
 * For polling mode, '0' timeout value for infinite polling
 * otherwise timeout when expired
 */
int altera_avalon_mailbox_send
(altera_avalon_mailbox_dev *dev, void *message, int timeout, EventType event)
{
 402f380:	defff704 	addi	sp,sp,-36
 402f384:	dfc00815 	stw	ra,32(sp)
 402f388:	df000715 	stw	fp,28(sp)
 402f38c:	df000704 	addi	fp,sp,28
 402f390:	e13ffc15 	stw	r4,-16(fp)
 402f394:	e17ffd15 	stw	r5,-12(fp)
 402f398:	e1bffe15 	stw	r6,-8(fp)
 402f39c:	e1ffff15 	stw	r7,-4(fp)
    int status = 0;
 402f3a0:	e03ff915 	stw	zero,-28(fp)
     * Obtain the "write_lock"semaphore to ensures 
     * that writing to the device is thread-safe in multi-thread enviroment
     */
    ALT_SEM_PEND (dev->write_lock, 0);

    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 402f3a4:	e0bffc17 	ldw	r2,-16(fp)
 402f3a8:	10801103 	ldbu	r2,68(r2)
 402f3ac:	10803fcc 	andi	r2,r2,255
 402f3b0:	1000061e 	bne	r2,zero,402f3cc <altera_avalon_mailbox_send+0x4c>
 402f3b4:	e0bffc17 	ldw	r2,-16(fp)
 402f3b8:	10800a17 	ldw	r2,40(r2)
 402f3bc:	10800204 	addi	r2,r2,8
 402f3c0:	10800037 	ldwio	r2,0(r2)
    		          & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK))
 402f3c4:	1080008c 	andi	r2,r2,2
     * Obtain the "write_lock"semaphore to ensures 
     * that writing to the device is thread-safe in multi-thread enviroment
     */
    ALT_SEM_PEND (dev->write_lock, 0);

    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 402f3c8:	10000226 	beq	r2,zero,402f3d4 <altera_avalon_mailbox_send+0x54>
    		          & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK))
    {
    	/* dev is lock or no free space to send */
    	return -1;
 402f3cc:	00bfffc4 	movi	r2,-1
 402f3d0:	00003a06 	br	402f4bc <altera_avalon_mailbox_send+0x13c>
    }
    else
    {
        dev->mbox_msg = message;
 402f3d4:	e0bffc17 	ldw	r2,-16(fp)
 402f3d8:	e0fffd17 	ldw	r3,-12(fp)
 402f3dc:	10c01015 	stw	r3,64(r2)
        dev->lock = 1;
 402f3e0:	e0bffc17 	ldw	r2,-16(fp)
 402f3e4:	00c00044 	movi	r3,1
 402f3e8:	10c01105 	stb	r3,68(r2)
     */
    ALT_SEM_POST (dev->write_lock);



    if ((dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED) || (event==POLL))
 402f3ec:	e0bffc17 	ldw	r2,-16(fp)
 402f3f0:	10800b17 	ldw	r2,44(r2)
 402f3f4:	10bfffe0 	cmpeqi	r2,r2,-1
 402f3f8:	1000031e 	bne	r2,zero,402f408 <altera_avalon_mailbox_send+0x88>
 402f3fc:	e0bfff17 	ldw	r2,-4(fp)
 402f400:	10800058 	cmpnei	r2,r2,1
 402f404:	1000201e 	bne	r2,zero,402f488 <altera_avalon_mailbox_send+0x108>
    {
        /* Polling mode */
        if (timeout ==0)
 402f408:	e0bffe17 	ldw	r2,-8(fp)
 402f40c:	1000061e 	bne	r2,zero,402f428 <altera_avalon_mailbox_send+0xa8>
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
 402f410:	e13ffc17 	ldw	r4,-16(fp)
 402f414:	402f3080 	call	402f308 <altera_avalon_mailbox_status>
 402f418:	e0bffb15 	stw	r2,-20(fp)
            } while (mbox_status);
 402f41c:	e0bffb17 	ldw	r2,-20(fp)
 402f420:	103ffb1e 	bne	r2,zero,402f410 <__alt_data_end+0xfffef410>
 402f424:	00000e06 	br	402f460 <altera_avalon_mailbox_send+0xe0>
        } else
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
 402f428:	e13ffc17 	ldw	r4,-16(fp)
 402f42c:	402f3080 	call	402f308 <altera_avalon_mailbox_status>
 402f430:	e0bffb15 	stw	r2,-20(fp)
                timeout--;
 402f434:	e0bffe17 	ldw	r2,-8(fp)
 402f438:	10bfffc4 	addi	r2,r2,-1
 402f43c:	e0bffe15 	stw	r2,-8(fp)
            } while (mbox_status && (timeout != 0));
 402f440:	e0bffb17 	ldw	r2,-20(fp)
 402f444:	10000226 	beq	r2,zero,402f450 <altera_avalon_mailbox_send+0xd0>
 402f448:	e0bffe17 	ldw	r2,-8(fp)
 402f44c:	103ff61e 	bne	r2,zero,402f428 <__alt_data_end+0xfffef428>
            if (timeout == 0)
 402f450:	e0bffe17 	ldw	r2,-8(fp)
 402f454:	1000021e 	bne	r2,zero,402f460 <altera_avalon_mailbox_send+0xe0>
            {    /* Timeout occur or fail sending */
                return -ETIME;
 402f458:	00bff084 	movi	r2,-62
 402f45c:	00001706 	br	402f4bc <altera_avalon_mailbox_send+0x13c>
            }
        }
        status = altera_avalon_mailbox_post (dev, message);
 402f460:	e17ffd17 	ldw	r5,-12(fp)
 402f464:	e13ffc17 	ldw	r4,-16(fp)
 402f468:	402ed3c0 	call	402ed3c <altera_avalon_mailbox_post>
 402f46c:	e0bff915 	stw	r2,-28(fp)
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
 402f470:	e0bffc17 	ldw	r2,-16(fp)
 402f474:	10001015 	stw	zero,64(r2)
        /* Release lock when message posted */
        dev->lock =0;
 402f478:	e0bffc17 	ldw	r2,-16(fp)
 402f47c:	10001105 	stb	zero,68(r2)
        return status;
 402f480:	e0bff917 	ldw	r2,-28(fp)
 402f484:	00000d06 	br	402f4bc <altera_avalon_mailbox_send+0x13c>
    } else
    {
        /* Enable Sender interrupt */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
 402f488:	e0bffc17 	ldw	r2,-16(fp)
 402f48c:	10800a17 	ldw	r2,40(r2)
 402f490:	10800304 	addi	r2,r2,12
 402f494:	10800037 	ldwio	r2,0(r2)
 402f498:	10800094 	ori	r2,r2,2
 402f49c:	e0bffa15 	stw	r2,-24(fp)
                   (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 402f4a0:	e0bffc17 	ldw	r2,-16(fp)
 402f4a4:	10800a17 	ldw	r2,40(r2)
 402f4a8:	10800304 	addi	r2,r2,12
 402f4ac:	1007883a 	mov	r3,r2
 402f4b0:	e0bffa17 	ldw	r2,-24(fp)
 402f4b4:	18800035 	stwio	r2,0(r3)
    }
  return 0;
 402f4b8:	0005883a 	mov	r2,zero
}
 402f4bc:	e037883a 	mov	sp,fp
 402f4c0:	dfc00117 	ldw	ra,4(sp)
 402f4c4:	df000017 	ldw	fp,0(sp)
 402f4c8:	dec00204 	addi	sp,sp,8
 402f4cc:	f800283a 	ret

0402f4d0 <altera_avalon_mailbox_retrieve_poll>:
 * If a message is available in the mailbox return it otherwise return NULL
 * This function is blocking
 *
 */
int altera_avalon_mailbox_retrieve_poll (altera_avalon_mailbox_dev *dev, alt_u32 *message, alt_u32 timeout)
{
 402f4d0:	defff904 	addi	sp,sp,-28
 402f4d4:	dfc00615 	stw	ra,24(sp)
 402f4d8:	df000515 	stw	fp,20(sp)
 402f4dc:	df000504 	addi	fp,sp,20
 402f4e0:	e13ffd15 	stw	r4,-12(fp)
 402f4e4:	e17ffe15 	stw	r5,-8(fp)
 402f4e8:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 status = 0;
 402f4ec:	e03ffb15 	stw	zero,-20(fp)
    alt_u32 data;

    if (dev != NULL && message != NULL)
 402f4f0:	e0bffd17 	ldw	r2,-12(fp)
 402f4f4:	10003a26 	beq	r2,zero,402f5e0 <altera_avalon_mailbox_retrieve_poll+0x110>
 402f4f8:	e0bffe17 	ldw	r2,-8(fp)
 402f4fc:	10003826 	beq	r2,zero,402f5e0 <altera_avalon_mailbox_retrieve_poll+0x110>
    {
        /* Mask receiver mailbox interrupt when in polling mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
 402f500:	e0bffd17 	ldw	r2,-12(fp)
 402f504:	10800a17 	ldw	r2,40(r2)
 402f508:	10800304 	addi	r2,r2,12
 402f50c:	10800037 	ldwio	r2,0(r2)
 402f510:	e0bffc15 	stw	r2,-16(fp)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST,
 402f514:	e0bffd17 	ldw	r2,-12(fp)
 402f518:	10800a17 	ldw	r2,40(r2)
 402f51c:	10800304 	addi	r2,r2,12
 402f520:	1009883a 	mov	r4,r2
 402f524:	e0fffc17 	ldw	r3,-16(fp)
 402f528:	00bfff84 	movi	r2,-2
 402f52c:	1884703a 	and	r2,r3,r2
 402f530:	20800035 	stwio	r2,0(r4)
            (data & (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK)));


        /* If timeout is '0', poll till message availabe in mailbox */
        if (timeout == 0)
 402f534:	e0bfff17 	ldw	r2,-4(fp)
 402f538:	1000061e 	bne	r2,zero,402f554 <altera_avalon_mailbox_retrieve_poll+0x84>
        {
            do
            {
                status = altera_avalon_mailbox_status (dev);
 402f53c:	e13ffd17 	ldw	r4,-12(fp)
 402f540:	402f3080 	call	402f308 <altera_avalon_mailbox_status>
 402f544:	e0bffb15 	stw	r2,-20(fp)
            } while (status == 0);
 402f548:	e0bffb17 	ldw	r2,-20(fp)
 402f54c:	103ffb26 	beq	r2,zero,402f53c <__alt_data_end+0xfffef53c>
 402f550:	00000a06 	br	402f57c <altera_avalon_mailbox_retrieve_poll+0xac>
        } else
        {
            do
            {
                 status = altera_avalon_mailbox_status (dev);
 402f554:	e13ffd17 	ldw	r4,-12(fp)
 402f558:	402f3080 	call	402f308 <altera_avalon_mailbox_status>
 402f55c:	e0bffb15 	stw	r2,-20(fp)
                 timeout-- ;
 402f560:	e0bfff17 	ldw	r2,-4(fp)
 402f564:	10bfffc4 	addi	r2,r2,-1
 402f568:	e0bfff15 	stw	r2,-4(fp)
            } while ((status == 0) && timeout);
 402f56c:	e0bffb17 	ldw	r2,-20(fp)
 402f570:	1000021e 	bne	r2,zero,402f57c <altera_avalon_mailbox_retrieve_poll+0xac>
 402f574:	e0bfff17 	ldw	r2,-4(fp)
 402f578:	103ff61e 	bne	r2,zero,402f554 <__alt_data_end+0xfffef554>
        }

        /* if timeout, status remain 0 */
        if (status)
 402f57c:	e0bffb17 	ldw	r2,-20(fp)
 402f580:	10000d26 	beq	r2,zero,402f5b8 <altera_avalon_mailbox_retrieve_poll+0xe8>
        {
            message[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
 402f584:	e0bffe17 	ldw	r2,-8(fp)
 402f588:	10800104 	addi	r2,r2,4
 402f58c:	e0fffd17 	ldw	r3,-12(fp)
 402f590:	18c00a17 	ldw	r3,40(r3)
 402f594:	18c00104 	addi	r3,r3,4
 402f598:	18c00037 	ldwio	r3,0(r3)
 402f59c:	10c00015 	stw	r3,0(r2)
            message[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
 402f5a0:	e0bffd17 	ldw	r2,-12(fp)
 402f5a4:	10800a17 	ldw	r2,40(r2)
 402f5a8:	10800037 	ldwio	r2,0(r2)
 402f5ac:	1007883a 	mov	r3,r2
 402f5b0:	e0bffe17 	ldw	r2,-8(fp)
 402f5b4:	10c00015 	stw	r3,0(r2)
        }
        /* Restore original state of interrupt mask */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 402f5b8:	e0bffd17 	ldw	r2,-12(fp)
 402f5bc:	10800a17 	ldw	r2,40(r2)
 402f5c0:	10800304 	addi	r2,r2,12
 402f5c4:	1007883a 	mov	r3,r2
 402f5c8:	e0bffc17 	ldw	r2,-16(fp)
 402f5cc:	18800035 	stwio	r2,0(r3)

        /* Return success on complete retrieve message
         * otherwise timeout and exit with error
         */
        if (status)
 402f5d0:	e0bffb17 	ldw	r2,-20(fp)
 402f5d4:	10000226 	beq	r2,zero,402f5e0 <altera_avalon_mailbox_retrieve_poll+0x110>
          return 0;
 402f5d8:	0005883a 	mov	r2,zero
 402f5dc:	00000606 	br	402f5f8 <altera_avalon_mailbox_retrieve_poll+0x128>
      }
      /* Invalid Null dev and message */
      message[1] = 0;
 402f5e0:	e0bffe17 	ldw	r2,-8(fp)
 402f5e4:	10800104 	addi	r2,r2,4
 402f5e8:	10000015 	stw	zero,0(r2)
      message[0] = 0;
 402f5ec:	e0bffe17 	ldw	r2,-8(fp)
 402f5f0:	10000015 	stw	zero,0(r2)
      return -EINVAL;
 402f5f4:	00bffa84 	movi	r2,-22
}
 402f5f8:	e037883a 	mov	sp,fp
 402f5fc:	dfc00117 	ldw	ra,4(sp)
 402f600:	df000017 	ldw	fp,0(sp)
 402f604:	dec00204 	addi	sp,sp,8
 402f608:	f800283a 	ret

0402f60c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 402f60c:	defffe04 	addi	sp,sp,-8
 402f610:	dfc00115 	stw	ra,4(sp)
 402f614:	df000015 	stw	fp,0(sp)
 402f618:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 402f61c:	d0a00b17 	ldw	r2,-32724(gp)
 402f620:	10000326 	beq	r2,zero,402f630 <alt_get_errno+0x24>
 402f624:	d0a00b17 	ldw	r2,-32724(gp)
 402f628:	103ee83a 	callr	r2
 402f62c:	00000106 	br	402f634 <alt_get_errno+0x28>
 402f630:	d0a70604 	addi	r2,gp,-25576
}
 402f634:	e037883a 	mov	sp,fp
 402f638:	dfc00117 	ldw	ra,4(sp)
 402f63c:	df000017 	ldw	fp,0(sp)
 402f640:	dec00204 	addi	sp,sp,8
 402f644:	f800283a 	ret

0402f648 <alt_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 402f648:	defff904 	addi	sp,sp,-28
 402f64c:	df000615 	stw	fp,24(sp)
 402f650:	df000604 	addi	fp,sp,24
 402f654:	e13ffe15 	stw	r4,-8(fp)
 402f658:	e17fff15 	stw	r5,-4(fp)
  alt_u32 id, data, check;
  int ret_code = -1;
 402f65c:	00bfffc4 	movi	r2,-1
 402f660:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_READ_CPUID(id);
 402f664:	0005317a 	rdctl	r2,cpuid
 402f668:	e0bffb15 	stw	r2,-20(fp)

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
 402f66c:	e0bffb17 	ldw	r2,-20(fp)
 402f670:	1006943a 	slli	r3,r2,16
 402f674:	e0bfff17 	ldw	r2,-4(fp)
 402f678:	1884b03a 	or	r2,r3,r2
 402f67c:	e0bffc15 	stw	r2,-16(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
 402f680:	e0bffe17 	ldw	r2,-8(fp)
 402f684:	10800317 	ldw	r2,12(r2)
 402f688:	e0fffc17 	ldw	r3,-16(fp)
 402f68c:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 402f690:	e0bffe17 	ldw	r2,-8(fp)
 402f694:	10800317 	ldw	r2,12(r2)
 402f698:	10800037 	ldwio	r2,0(r2)
 402f69c:	e0bffd15 	stw	r2,-12(fp)

  if ( check == data)
 402f6a0:	e0fffd17 	ldw	r3,-12(fp)
 402f6a4:	e0bffc17 	ldw	r2,-16(fp)
 402f6a8:	1880011e 	bne	r3,r2,402f6b0 <alt_mutex_trylock+0x68>
  {
    ret_code = 0;
 402f6ac:	e03ffa15 	stw	zero,-24(fp)
  }

  return ret_code;
 402f6b0:	e0bffa17 	ldw	r2,-24(fp)
}
 402f6b4:	e037883a 	mov	sp,fp
 402f6b8:	df000017 	ldw	fp,0(sp)
 402f6bc:	dec00104 	addi	sp,sp,4
 402f6c0:	f800283a 	ret

0402f6c4 <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
 402f6c4:	defffc04 	addi	sp,sp,-16
 402f6c8:	dfc00315 	stw	ra,12(sp)
 402f6cc:	df000215 	stw	fp,8(sp)
 402f6d0:	df000204 	addi	fp,sp,8
 402f6d4:	e13fff15 	stw	r4,-4(fp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
 402f6d8:	d1601004 	addi	r5,gp,-32704
 402f6dc:	e13fff17 	ldw	r4,-4(fp)
 402f6e0:	40301fc0 	call	40301fc <alt_find_dev>
 402f6e4:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
 402f6e8:	e0bffe17 	ldw	r2,-8(fp)
 402f6ec:	1000041e 	bne	r2,zero,402f700 <altera_avalon_mutex_open+0x3c>
  {
    ALT_ERRNO = ENODEV;
 402f6f0:	402f60c0 	call	402f60c <alt_get_errno>
 402f6f4:	1007883a 	mov	r3,r2
 402f6f8:	008004c4 	movi	r2,19
 402f6fc:	18800015 	stw	r2,0(r3)
  }

  return dev;
 402f700:	e0bffe17 	ldw	r2,-8(fp)
}
 402f704:	e037883a 	mov	sp,fp
 402f708:	dfc00117 	ldw	ra,4(sp)
 402f70c:	df000017 	ldw	fp,0(sp)
 402f710:	dec00204 	addi	sp,sp,8
 402f714:	f800283a 	ret

0402f718 <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
 402f718:	defffe04 	addi	sp,sp,-8
 402f71c:	df000115 	stw	fp,4(sp)
 402f720:	df000104 	addi	fp,sp,4
 402f724:	e13fff15 	stw	r4,-4(fp)
  return;
 402f728:	0001883a 	nop
}
 402f72c:	e037883a 	mov	sp,fp
 402f730:	df000017 	ldw	fp,0(sp)
 402f734:	dec00104 	addi	sp,sp,4
 402f738:	f800283a 	ret

0402f73c <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
 402f73c:	defffc04 	addi	sp,sp,-16
 402f740:	dfc00315 	stw	ra,12(sp)
 402f744:	df000215 	stw	fp,8(sp)
 402f748:	df000204 	addi	fp,sp,8
 402f74c:	e13ffe15 	stw	r4,-8(fp)
 402f750:	e17fff15 	stw	r5,-4(fp)
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);

  while ( alt_mutex_trylock( dev, value ) != 0);
 402f754:	0001883a 	nop
 402f758:	e17fff17 	ldw	r5,-4(fp)
 402f75c:	e13ffe17 	ldw	r4,-8(fp)
 402f760:	402f6480 	call	402f648 <alt_mutex_trylock>
 402f764:	103ffc1e 	bne	r2,zero,402f758 <__alt_data_end+0xfffef758>
}
 402f768:	0001883a 	nop
 402f76c:	e037883a 	mov	sp,fp
 402f770:	dfc00117 	ldw	ra,4(sp)
 402f774:	df000017 	ldw	fp,0(sp)
 402f778:	dec00204 	addi	sp,sp,8
 402f77c:	f800283a 	ret

0402f780 <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 402f780:	defffa04 	addi	sp,sp,-24
 402f784:	dfc00515 	stw	ra,20(sp)
 402f788:	df000415 	stw	fp,16(sp)
 402f78c:	df000404 	addi	fp,sp,16
 402f790:	e13ffd15 	stw	r4,-12(fp)
 402f794:	e17ffe15 	stw	r5,-8(fp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);

  ret_code = alt_mutex_trylock( dev, value);
 402f798:	e17ffe17 	ldw	r5,-8(fp)
 402f79c:	e13ffd17 	ldw	r4,-12(fp)
 402f7a0:	402f6480 	call	402f648 <alt_mutex_trylock>
 402f7a4:	e0bffc15 	stw	r2,-16(fp)
  if (ret_code)
  {
    ALT_SEM_POST (dev->lock);
  }

  return ret_code;
 402f7a8:	e0bffc17 	ldw	r2,-16(fp)
}
 402f7ac:	e037883a 	mov	sp,fp
 402f7b0:	dfc00117 	ldw	ra,4(sp)
 402f7b4:	df000017 	ldw	fp,0(sp)
 402f7b8:	dec00204 	addi	sp,sp,8
 402f7bc:	f800283a 	ret

0402f7c0 <altera_avalon_mutex_unlock>:
 * This function does not check that you own the Mutex if you try to release
 * a Mutex you do not own the behaviour is undefined
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
 402f7c0:	defffd04 	addi	sp,sp,-12
 402f7c4:	df000215 	stw	fp,8(sp)
 402f7c8:	df000204 	addi	fp,sp,8
 402f7cc:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id;
  NIOS2_READ_CPUID(id);
 402f7d0:	0005317a 	rdctl	r2,cpuid
 402f7d4:	e0bffe15 	stw	r2,-8(fp)

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
 402f7d8:	e0bfff17 	ldw	r2,-4(fp)
 402f7dc:	10800317 	ldw	r2,12(r2)
 402f7e0:	10800104 	addi	r2,r2,4
 402f7e4:	00c00044 	movi	r3,1
 402f7e8:	10c00035 	stwio	r3,0(r2)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
 402f7ec:	e0bfff17 	ldw	r2,-4(fp)
 402f7f0:	10800317 	ldw	r2,12(r2)
 402f7f4:	e0fffe17 	ldw	r3,-8(fp)
 402f7f8:	1806943a 	slli	r3,r3,16
 402f7fc:	10c00035 	stwio	r3,0(r2)

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
}
 402f800:	0001883a 	nop
 402f804:	e037883a 	mov	sp,fp
 402f808:	df000017 	ldw	fp,0(sp)
 402f80c:	dec00104 	addi	sp,sp,4
 402f810:	f800283a 	ret

0402f814 <altera_avalon_mutex_is_mine>:
 * altera_avalon_mutex_is_mine - Do I own the Mutex?
 *
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
 402f814:	defff904 	addi	sp,sp,-28
 402f818:	df000615 	stw	fp,24(sp)
 402f81c:	df000604 	addi	fp,sp,24
 402f820:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id, data, owner, value;
  int ret_code = 0;
 402f824:	e03ffa15 	stw	zero,-24(fp)

  NIOS2_READ_CPUID(id);
 402f828:	0005317a 	rdctl	r2,cpuid
 402f82c:	e0bffb15 	stw	r2,-20(fp)

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 402f830:	e0bfff17 	ldw	r2,-4(fp)
 402f834:	10800317 	ldw	r2,12(r2)
 402f838:	10800037 	ldwio	r2,0(r2)
 402f83c:	e0bffc15 	stw	r2,-16(fp)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
 402f840:	e0bffc17 	ldw	r2,-16(fp)
 402f844:	1004d43a 	srli	r2,r2,16
 402f848:	e0bffd15 	stw	r2,-12(fp)
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
 402f84c:	e0fffd17 	ldw	r3,-12(fp)
 402f850:	e0bffb17 	ldw	r2,-20(fp)
 402f854:	1880071e 	bne	r3,r2,402f874 <altera_avalon_mutex_is_mine+0x60>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
 402f858:	e0bffc17 	ldw	r2,-16(fp)
 402f85c:	10bfffcc 	andi	r2,r2,65535
 402f860:	e0bffe15 	stw	r2,-8(fp)
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
 402f864:	e0bffe17 	ldw	r2,-8(fp)
 402f868:	10000226 	beq	r2,zero,402f874 <altera_avalon_mutex_is_mine+0x60>
    {
      ret_code = 1;
 402f86c:	00800044 	movi	r2,1
 402f870:	e0bffa15 	stw	r2,-24(fp)
    }
  }

  return ret_code;
 402f874:	e0bffa17 	ldw	r2,-24(fp)
}
 402f878:	e037883a 	mov	sp,fp
 402f87c:	df000017 	ldw	fp,0(sp)
 402f880:	dec00104 	addi	sp,sp,4
 402f884:	f800283a 	ret

0402f888 <altera_avalon_mutex_first_lock>:
 *
 * Has this Mutex been released since reset if not return 1
 * otherwise return 0
 */
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
 402f888:	defffc04 	addi	sp,sp,-16
 402f88c:	df000315 	stw	fp,12(sp)
 402f890:	df000304 	addi	fp,sp,12
 402f894:	e13fff15 	stw	r4,-4(fp)
  alt_u32 data;
  int ret_code = 0;
 402f898:	e03ffd15 	stw	zero,-12(fp)

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
 402f89c:	e0bfff17 	ldw	r2,-4(fp)
 402f8a0:	10800317 	ldw	r2,12(r2)
 402f8a4:	10800104 	addi	r2,r2,4
 402f8a8:	10800037 	ldwio	r2,0(r2)
 402f8ac:	e0bffe15 	stw	r2,-8(fp)

  if (data & ALTERA_AVALON_MUTEX_RESET_RESET_MSK) 
 402f8b0:	e0bffe17 	ldw	r2,-8(fp)
 402f8b4:	1080004c 	andi	r2,r2,1
 402f8b8:	10000226 	beq	r2,zero,402f8c4 <altera_avalon_mutex_first_lock+0x3c>
  {
    ret_code = 1;
 402f8bc:	00800044 	movi	r2,1
 402f8c0:	e0bffd15 	stw	r2,-12(fp)
  }

  return ret_code;
 402f8c4:	e0bffd17 	ldw	r2,-12(fp)
}
 402f8c8:	e037883a 	mov	sp,fp
 402f8cc:	df000017 	ldw	fp,0(sp)
 402f8d0:	dec00104 	addi	sp,sp,4
 402f8d4:	f800283a 	ret

0402f8d8 <perf_get_section_time>:

#include "altera_avalon_performance_counter.h"
#include "system.h"

alt_u64 perf_get_section_time (void* hw_base_address, int which_section)
{
 402f8d8:	defff904 	addi	sp,sp,-28
 402f8dc:	df000615 	stw	fp,24(sp)
 402f8e0:	df000604 	addi	fp,sp,24
 402f8e4:	e13ffe15 	stw	r4,-8(fp)
 402f8e8:	e17fff15 	stw	r5,-4(fp)
  alt_u32 lo;
  alt_u32 hi;
  alt_u64 result = 0;
 402f8ec:	e03ffa15 	stw	zero,-24(fp)
 402f8f0:	e03ffb15 	stw	zero,-20(fp)

  PERF_STOP_MEASURING(hw_base_address);
 402f8f4:	000b883a 	mov	r5,zero
 402f8f8:	e13ffe17 	ldw	r4,-8(fp)
 402f8fc:	21400035 	stwio	r5,0(r4)
  lo = IORD(hw_base_address, ( which_section*4   ));
 402f900:	e13fff17 	ldw	r4,-4(fp)
 402f904:	2008913a 	slli	r4,r4,4
 402f908:	200b883a 	mov	r5,r4
 402f90c:	e13ffe17 	ldw	r4,-8(fp)
 402f910:	2149883a 	add	r4,r4,r5
 402f914:	21000037 	ldwio	r4,0(r4)
 402f918:	e13ffc15 	stw	r4,-16(fp)
  hi = IORD(hw_base_address, ((which_section*4)+1));
 402f91c:	e13fff17 	ldw	r4,-4(fp)
 402f920:	2008913a 	slli	r4,r4,4
 402f924:	21000104 	addi	r4,r4,4
 402f928:	200b883a 	mov	r5,r4
 402f92c:	e13ffe17 	ldw	r4,-8(fp)
 402f930:	2149883a 	add	r4,r4,r5
 402f934:	21000037 	ldwio	r4,0(r4)
 402f938:	e13ffd15 	stw	r4,-12(fp)

  result = ((alt_u64)(((alt_u64) hi) << ((alt_u64)32))) | 
 402f93c:	e13ffd17 	ldw	r4,-12(fp)
 402f940:	2011883a 	mov	r8,r4
 402f944:	0013883a 	mov	r9,zero
 402f948:	4006983a 	sll	r3,r8,zero
 402f94c:	0005883a 	mov	r2,zero
           ((alt_u64)(((alt_u64) lo)                 ))  ;
 402f950:	e13ffc17 	ldw	r4,-16(fp)
 402f954:	200d883a 	mov	r6,r4
 402f958:	000f883a 	mov	r7,zero

  PERF_STOP_MEASURING(hw_base_address);
  lo = IORD(hw_base_address, ( which_section*4   ));
  hi = IORD(hw_base_address, ((which_section*4)+1));

  result = ((alt_u64)(((alt_u64) hi) << ((alt_u64)32))) | 
 402f95c:	1188b03a 	or	r4,r2,r6
 402f960:	e13ffa15 	stw	r4,-24(fp)
 402f964:	19c4b03a 	or	r2,r3,r7
 402f968:	e0bffb15 	stw	r2,-20(fp)
           ((alt_u64)(((alt_u64) lo)                 ))  ;
  return result;
 402f96c:	e0bffa17 	ldw	r2,-24(fp)
 402f970:	e0fffb17 	ldw	r3,-20(fp)
 402f974:	1009883a 	mov	r4,r2
 402f978:	180b883a 	mov	r5,r3
}
 402f97c:	2005883a 	mov	r2,r4
 402f980:	2807883a 	mov	r3,r5
 402f984:	e037883a 	mov	sp,fp
 402f988:	df000017 	ldw	fp,0(sp)
 402f98c:	dec00104 	addi	sp,sp,4
 402f990:	f800283a 	ret

0402f994 <perf_get_total_time>:

alt_u64 perf_get_total_time   (void* hw_base_address)
{
 402f994:	defffd04 	addi	sp,sp,-12
 402f998:	dfc00215 	stw	ra,8(sp)
 402f99c:	df000115 	stw	fp,4(sp)
 402f9a0:	df000104 	addi	fp,sp,4
 402f9a4:	e13fff15 	stw	r4,-4(fp)
  return perf_get_section_time (hw_base_address, 0);
 402f9a8:	000b883a 	mov	r5,zero
 402f9ac:	e13fff17 	ldw	r4,-4(fp)
 402f9b0:	402f8d80 	call	402f8d8 <perf_get_section_time>
 402f9b4:	100b883a 	mov	r5,r2
 402f9b8:	180d883a 	mov	r6,r3
 402f9bc:	2807883a 	mov	r3,r5
 402f9c0:	3009883a 	mov	r4,r6
}
 402f9c4:	1805883a 	mov	r2,r3
 402f9c8:	2007883a 	mov	r3,r4
 402f9cc:	e037883a 	mov	sp,fp
 402f9d0:	dfc00117 	ldw	ra,4(sp)
 402f9d4:	df000017 	ldw	fp,0(sp)
 402f9d8:	dec00204 	addi	sp,sp,8
 402f9dc:	f800283a 	ret

0402f9e0 <perf_get_num_starts>:

alt_u32 perf_get_num_starts   (void* hw_base_address, int which_section)
{
 402f9e0:	defffd04 	addi	sp,sp,-12
 402f9e4:	df000215 	stw	fp,8(sp)
 402f9e8:	df000204 	addi	fp,sp,8
 402f9ec:	e13ffe15 	stw	r4,-8(fp)
 402f9f0:	e17fff15 	stw	r5,-4(fp)
  return IORD(hw_base_address, ((which_section*4)+2));
 402f9f4:	e0bfff17 	ldw	r2,-4(fp)
 402f9f8:	1004913a 	slli	r2,r2,4
 402f9fc:	10800204 	addi	r2,r2,8
 402fa00:	1007883a 	mov	r3,r2
 402fa04:	e0bffe17 	ldw	r2,-8(fp)
 402fa08:	10c5883a 	add	r2,r2,r3
 402fa0c:	10800037 	ldwio	r2,0(r2)
}
 402fa10:	e037883a 	mov	sp,fp
 402fa14:	df000017 	ldw	fp,0(sp)
 402fa18:	dec00104 	addi	sp,sp,4
 402fa1c:	f800283a 	ret

0402fa20 <alt_get_performance_counter_base>:
 * in Nios II IDE just like is done for the system clock timer and
 * timestamp timer.
 */
void* 
alt_get_performance_counter_base()
{
 402fa20:	deffff04 	addi	sp,sp,-4
 402fa24:	df000015 	stw	fp,0(sp)
 402fa28:	d839883a 	mov	fp,sp
#ifdef PERFORMANCE_COUNTER_0_BASE
    return (void*)PERFORMANCE_COUNTER_0_BASE;
#else
    return (void*)0;
 402fa2c:	0005883a 	mov	r2,zero
#endif
}
 402fa30:	e037883a 	mov	sp,fp
 402fa34:	df000017 	ldw	fp,0(sp)
 402fa38:	dec00104 	addi	sp,sp,4
 402fa3c:	f800283a 	ret

0402fa40 <alt_get_cpu_freq>:
 * If the performance counter peripheral is in a different time domain,
 * this won't necessarily be the same frequency of the CPU.
 */
alt_u32 
alt_get_cpu_freq()
{
 402fa40:	deffff04 	addi	sp,sp,-4
 402fa44:	df000015 	stw	fp,0(sp)
 402fa48:	d839883a 	mov	fp,sp
    return ALT_CPU_FREQ;
 402fa4c:	0080bef4 	movhi	r2,763
 402fa50:	10bc2004 	addi	r2,r2,-3968
}
 402fa54:	e037883a 	mov	sp,fp
 402fa58:	df000017 	ldw	fp,0(sp)
 402fa5c:	dec00104 	addi	sp,sp,4
 402fa60:	f800283a 	ret

0402fa64 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 402fa64:	defffa04 	addi	sp,sp,-24
 402fa68:	dfc00515 	stw	ra,20(sp)
 402fa6c:	df000415 	stw	fp,16(sp)
 402fa70:	df000404 	addi	fp,sp,16
 402fa74:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 402fa78:	0007883a 	mov	r3,zero
 402fa7c:	e0bfff17 	ldw	r2,-4(fp)
 402fa80:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 402fa84:	e0bfff17 	ldw	r2,-4(fp)
 402fa88:	10800104 	addi	r2,r2,4
 402fa8c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402fa90:	0005303a 	rdctl	r2,status
 402fa94:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402fa98:	e0fffd17 	ldw	r3,-12(fp)
 402fa9c:	00bfff84 	movi	r2,-2
 402faa0:	1884703a 	and	r2,r3,r2
 402faa4:	1001703a 	wrctl	status,r2
  
  return context;
 402faa8:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 402faac:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 402fab0:	403078c0 	call	403078c <alt_tick>
 402fab4:	e0bffc17 	ldw	r2,-16(fp)
 402fab8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402fabc:	e0bffe17 	ldw	r2,-8(fp)
 402fac0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 402fac4:	0001883a 	nop
 402fac8:	e037883a 	mov	sp,fp
 402facc:	dfc00117 	ldw	ra,4(sp)
 402fad0:	df000017 	ldw	fp,0(sp)
 402fad4:	dec00204 	addi	sp,sp,8
 402fad8:	f800283a 	ret

0402fadc <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 402fadc:	defff804 	addi	sp,sp,-32
 402fae0:	dfc00715 	stw	ra,28(sp)
 402fae4:	df000615 	stw	fp,24(sp)
 402fae8:	df000604 	addi	fp,sp,24
 402faec:	e13ffc15 	stw	r4,-16(fp)
 402faf0:	e17ffd15 	stw	r5,-12(fp)
 402faf4:	e1bffe15 	stw	r6,-8(fp)
 402faf8:	e1ffff15 	stw	r7,-4(fp)
 402fafc:	e0bfff17 	ldw	r2,-4(fp)
 402fb00:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 402fb04:	d0a70c17 	ldw	r2,-25552(gp)
 402fb08:	1000021e 	bne	r2,zero,402fb14 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 402fb0c:	e0bffb17 	ldw	r2,-20(fp)
 402fb10:	d0a70c15 	stw	r2,-25552(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 402fb14:	e0bffc17 	ldw	r2,-16(fp)
 402fb18:	10800104 	addi	r2,r2,4
 402fb1c:	00c001c4 	movi	r3,7
 402fb20:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 402fb24:	d8000015 	stw	zero,0(sp)
 402fb28:	e1fffc17 	ldw	r7,-16(fp)
 402fb2c:	018100f4 	movhi	r6,1027
 402fb30:	31be9904 	addi	r6,r6,-1436
 402fb34:	e17ffe17 	ldw	r5,-8(fp)
 402fb38:	e13ffd17 	ldw	r4,-12(fp)
 402fb3c:	402d69c0 	call	402d69c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 402fb40:	0001883a 	nop
 402fb44:	e037883a 	mov	sp,fp
 402fb48:	dfc00117 	ldw	ra,4(sp)
 402fb4c:	df000017 	ldw	fp,0(sp)
 402fb50:	dec00204 	addi	sp,sp,8
 402fb54:	f800283a 	ret

0402fb58 <perf_print_formatted_report>:

#ifndef SMALL_C_LIB 
int perf_print_formatted_report (void* perf_base, 
                                 alt_u32 clock_freq_hertz,
                                 int num_sections, ...)
{
 402fb58:	deffe504 	addi	sp,sp,-108
 402fb5c:	dfc01915 	stw	ra,100(sp)
 402fb60:	df001815 	stw	fp,96(sp)
 402fb64:	dcc01715 	stw	r19,92(sp)
 402fb68:	dc801615 	stw	r18,88(sp)
 402fb6c:	dc401515 	stw	r17,84(sp)
 402fb70:	dc001415 	stw	r16,80(sp)
 402fb74:	df001804 	addi	fp,sp,96
 402fb78:	e13ff915 	stw	r4,-28(fp)
 402fb7c:	e17ffa15 	stw	r5,-24(fp)
 402fb80:	e1bffb15 	stw	r6,-20(fp)
 402fb84:	e1c00215 	stw	r7,8(fp)
  va_list name_args;
  double total_sec;
  alt_u64 total_clocks;
  alt_u64 section_clocks;
  char* section_name;
  int section_num = 1;
 402fb88:	00800044 	movi	r2,1
 402fb8c:	e0bfef15 	stw	r2,-68(fp)

  const char* separator = 
 402fb90:	008100f4 	movhi	r2,1027
 402fb94:	10855c04 	addi	r2,r2,5488
 402fb98:	e0bff015 	stw	r2,-64(fp)
    "+---------------+-----+-----------+---------------+-----------+\n";
  const char* column_header = 
 402fb9c:	008100f4 	movhi	r2,1027
 402fba0:	10856d04 	addi	r2,r2,5556
 402fba4:	e0bff115 	stw	r2,-60(fp)
    "| Section       |  %  | Time (sec)|  Time (clocks)|Occurrences|\n";

  PERF_STOP_MEASURING (perf_base);
 402fba8:	0007883a 	mov	r3,zero
 402fbac:	e0bff917 	ldw	r2,-28(fp)
 402fbb0:	10c00035 	stwio	r3,0(r2)

  va_start (name_args, num_sections);
 402fbb4:	e0800204 	addi	r2,fp,8
 402fbb8:	e0bff815 	stw	r2,-32(fp)

  total_clocks = perf_get_total_time (perf_base);
 402fbbc:	e13ff917 	ldw	r4,-28(fp)
 402fbc0:	402f9940 	call	402f994 <perf_get_total_time>
 402fbc4:	e0bff215 	stw	r2,-56(fp)
 402fbc8:	e0fff315 	stw	r3,-52(fp)
  total_sec    = ((double)total_clocks) / clock_freq_hertz;
 402fbcc:	e13ff217 	ldw	r4,-56(fp)
 402fbd0:	e17ff317 	ldw	r5,-52(fp)
 402fbd4:	4030e540 	call	4030e54 <__floatundidf>
 402fbd8:	1021883a 	mov	r16,r2
 402fbdc:	1823883a 	mov	r17,r3
 402fbe0:	e13ffa17 	ldw	r4,-24(fp)
 402fbe4:	402d3240 	call	402d324 <__floatunsidf>
 402fbe8:	1009883a 	mov	r4,r2
 402fbec:	180b883a 	mov	r5,r3
 402fbf0:	200d883a 	mov	r6,r4
 402fbf4:	280f883a 	mov	r7,r5
 402fbf8:	8009883a 	mov	r4,r16
 402fbfc:	880b883a 	mov	r5,r17
 402fc00:	402b6740 	call	402b674 <__divdf3>
 402fc04:	1009883a 	mov	r4,r2
 402fc08:	180b883a 	mov	r5,r3
 402fc0c:	e13ff415 	stw	r4,-48(fp)
 402fc10:	e17ff515 	stw	r5,-44(fp)

  // Print the total at the top:
  printf ("--Performance Counter Report--\nTotal Time: %3G seconds  (%lld clock-cycles)\n%s%s%s",
 402fc14:	e0bff017 	ldw	r2,-64(fp)
 402fc18:	d8800315 	stw	r2,12(sp)
 402fc1c:	e0bff117 	ldw	r2,-60(fp)
 402fc20:	d8800215 	stw	r2,8(sp)
 402fc24:	e0bff017 	ldw	r2,-64(fp)
 402fc28:	d8800115 	stw	r2,4(sp)
 402fc2c:	e0bff317 	ldw	r2,-52(fp)
 402fc30:	d8800015 	stw	r2,0(sp)
 402fc34:	e1fff217 	ldw	r7,-56(fp)
 402fc38:	e17ff417 	ldw	r5,-48(fp)
 402fc3c:	e1bff517 	ldw	r6,-44(fp)
 402fc40:	010100f4 	movhi	r4,1027
 402fc44:	21057e04 	addi	r4,r4,5624
 402fc48:	40209b80 	call	40209b8 <printf>
          total_sec, total_clocks, separator, column_header, separator);

  section_name = va_arg(name_args, char*);
 402fc4c:	e0bff817 	ldw	r2,-32(fp)
 402fc50:	10c00104 	addi	r3,r2,4
 402fc54:	e0fff815 	stw	r3,-32(fp)
 402fc58:	10800017 	ldw	r2,0(r2)
 402fc5c:	e0bfee15 	stw	r2,-72(fp)

  for (section_num = 1; section_num <= num_sections; section_num++)
 402fc60:	00800044 	movi	r2,1
 402fc64:	e0bfef15 	stw	r2,-68(fp)
 402fc68:	00004e06 	br	402fda4 <perf_print_formatted_report+0x24c>
    {
      section_clocks = perf_get_section_time (perf_base, section_num);
 402fc6c:	e17fef17 	ldw	r5,-68(fp)
 402fc70:	e13ff917 	ldw	r4,-28(fp)
 402fc74:	402f8d80 	call	402f8d8 <perf_get_section_time>
 402fc78:	e0bff615 	stw	r2,-40(fp)
 402fc7c:	e0fff715 	stw	r3,-36(fp)

      printf ("|%-15s|%5.3g|%11.5f|%15lld|%11u|\n%s",
              section_name,
              ((((double) section_clocks)) * 100) / total_clocks,
 402fc80:	e13ff617 	ldw	r4,-40(fp)
 402fc84:	e17ff717 	ldw	r5,-36(fp)
 402fc88:	4030e540 	call	4030e54 <__floatundidf>
 402fc8c:	1011883a 	mov	r8,r2
 402fc90:	1813883a 	mov	r9,r3
 402fc94:	000d883a 	mov	r6,zero
 402fc98:	01d01674 	movhi	r7,16473
 402fc9c:	4009883a 	mov	r4,r8
 402fca0:	480b883a 	mov	r5,r9
 402fca4:	402c1b40 	call	402c1b4 <__muldf3>
 402fca8:	1009883a 	mov	r4,r2
 402fcac:	180b883a 	mov	r5,r3
 402fcb0:	2021883a 	mov	r16,r4
 402fcb4:	2823883a 	mov	r17,r5

  for (section_num = 1; section_num <= num_sections; section_num++)
    {
      section_clocks = perf_get_section_time (perf_base, section_num);

      printf ("|%-15s|%5.3g|%11.5f|%15lld|%11u|\n%s",
 402fcb8:	e13ff217 	ldw	r4,-56(fp)
 402fcbc:	e17ff317 	ldw	r5,-52(fp)
 402fcc0:	4030e540 	call	4030e54 <__floatundidf>
 402fcc4:	1009883a 	mov	r4,r2
 402fcc8:	180b883a 	mov	r5,r3
 402fccc:	200d883a 	mov	r6,r4
 402fcd0:	280f883a 	mov	r7,r5
 402fcd4:	8009883a 	mov	r4,r16
 402fcd8:	880b883a 	mov	r5,r17
 402fcdc:	402b6740 	call	402b674 <__divdf3>
 402fce0:	1009883a 	mov	r4,r2
 402fce4:	180b883a 	mov	r5,r3
 402fce8:	2025883a 	mov	r18,r4
 402fcec:	2827883a 	mov	r19,r5
              section_name,
              ((((double) section_clocks)) * 100) / total_clocks,
              (((double) section_clocks)) / clock_freq_hertz,
 402fcf0:	e13ff617 	ldw	r4,-40(fp)
 402fcf4:	e17ff717 	ldw	r5,-36(fp)
 402fcf8:	4030e540 	call	4030e54 <__floatundidf>
 402fcfc:	1021883a 	mov	r16,r2
 402fd00:	1823883a 	mov	r17,r3

  for (section_num = 1; section_num <= num_sections; section_num++)
    {
      section_clocks = perf_get_section_time (perf_base, section_num);

      printf ("|%-15s|%5.3g|%11.5f|%15lld|%11u|\n%s",
 402fd04:	e13ffa17 	ldw	r4,-24(fp)
 402fd08:	402d3240 	call	402d324 <__floatunsidf>
 402fd0c:	1009883a 	mov	r4,r2
 402fd10:	180b883a 	mov	r5,r3
 402fd14:	200d883a 	mov	r6,r4
 402fd18:	280f883a 	mov	r7,r5
 402fd1c:	8009883a 	mov	r4,r16
 402fd20:	880b883a 	mov	r5,r17
 402fd24:	402b6740 	call	402b674 <__divdf3>
 402fd28:	1009883a 	mov	r4,r2
 402fd2c:	180b883a 	mov	r5,r3
 402fd30:	2021883a 	mov	r16,r4
 402fd34:	2823883a 	mov	r17,r5
              section_name,
              ((((double) section_clocks)) * 100) / total_clocks,
              (((double) section_clocks)) / clock_freq_hertz,
              section_clocks,
              (unsigned int) perf_get_num_starts (perf_base, section_num),
 402fd38:	e17fef17 	ldw	r5,-68(fp)
 402fd3c:	e13ff917 	ldw	r4,-28(fp)
 402fd40:	402f9e00 	call	402f9e0 <perf_get_num_starts>
 402fd44:	1007883a 	mov	r3,r2

  for (section_num = 1; section_num <= num_sections; section_num++)
    {
      section_clocks = perf_get_section_time (perf_base, section_num);

      printf ("|%-15s|%5.3g|%11.5f|%15lld|%11u|\n%s",
 402fd48:	e0bff017 	ldw	r2,-64(fp)
 402fd4c:	d8800515 	stw	r2,20(sp)
 402fd50:	d8c00415 	stw	r3,16(sp)
 402fd54:	e0bff617 	ldw	r2,-40(fp)
 402fd58:	d8800215 	stw	r2,8(sp)
 402fd5c:	e0bff717 	ldw	r2,-36(fp)
 402fd60:	d8800315 	stw	r2,12(sp)
 402fd64:	dc000015 	stw	r16,0(sp)
 402fd68:	dc400115 	stw	r17,4(sp)
 402fd6c:	900d883a 	mov	r6,r18
 402fd70:	980f883a 	mov	r7,r19
 402fd74:	e17fee17 	ldw	r5,-72(fp)
 402fd78:	010100f4 	movhi	r4,1027
 402fd7c:	21059304 	addi	r4,r4,5708
 402fd80:	40209b80 	call	40209b8 <printf>
              section_clocks,
              (unsigned int) perf_get_num_starts (perf_base, section_num),
              separator
              );

      section_name = va_arg(name_args, char*);
 402fd84:	e0bff817 	ldw	r2,-32(fp)
 402fd88:	10c00104 	addi	r3,r2,4
 402fd8c:	e0fff815 	stw	r3,-32(fp)
 402fd90:	10800017 	ldw	r2,0(r2)
 402fd94:	e0bfee15 	stw	r2,-72(fp)
  printf ("--Performance Counter Report--\nTotal Time: %3G seconds  (%lld clock-cycles)\n%s%s%s",
          total_sec, total_clocks, separator, column_header, separator);

  section_name = va_arg(name_args, char*);

  for (section_num = 1; section_num <= num_sections; section_num++)
 402fd98:	e0bfef17 	ldw	r2,-68(fp)
 402fd9c:	10800044 	addi	r2,r2,1
 402fda0:	e0bfef15 	stw	r2,-68(fp)
 402fda4:	e0bfef17 	ldw	r2,-68(fp)
 402fda8:	e0fffb17 	ldw	r3,-20(fp)
 402fdac:	18bfaf0e 	bge	r3,r2,402fc6c <__alt_data_end+0xfffefc6c>
      section_name = va_arg(name_args, char*);
    }

  va_end (name_args);

  return 0;
 402fdb0:	0005883a 	mov	r2,zero
}
 402fdb4:	e6fffc04 	addi	sp,fp,-16
 402fdb8:	dfc00517 	ldw	ra,20(sp)
 402fdbc:	df000417 	ldw	fp,16(sp)
 402fdc0:	dcc00317 	ldw	r19,12(sp)
 402fdc4:	dc800217 	ldw	r18,8(sp)
 402fdc8:	dc400117 	ldw	r17,4(sp)
 402fdcc:	dc000017 	ldw	r16,0(sp)
 402fdd0:	dec00704 	addi	sp,sp,28
 402fdd4:	f800283a 	ret

0402fdd8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 402fdd8:	defff504 	addi	sp,sp,-44
 402fddc:	df000a15 	stw	fp,40(sp)
 402fde0:	df000a04 	addi	fp,sp,40
 402fde4:	e13ffc15 	stw	r4,-16(fp)
 402fde8:	e17ffd15 	stw	r5,-12(fp)
 402fdec:	e1bffe15 	stw	r6,-8(fp)
 402fdf0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 402fdf4:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 402fdf8:	d0a70c17 	ldw	r2,-25552(gp)
  
  if (alt_ticks_per_second ())
 402fdfc:	10003c26 	beq	r2,zero,402fef0 <alt_alarm_start+0x118>
  {
    if (alarm)
 402fe00:	e0bffc17 	ldw	r2,-16(fp)
 402fe04:	10003826 	beq	r2,zero,402fee8 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 402fe08:	e0bffc17 	ldw	r2,-16(fp)
 402fe0c:	e0fffe17 	ldw	r3,-8(fp)
 402fe10:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 402fe14:	e0bffc17 	ldw	r2,-16(fp)
 402fe18:	e0ffff17 	ldw	r3,-4(fp)
 402fe1c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402fe20:	0005303a 	rdctl	r2,status
 402fe24:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402fe28:	e0fff917 	ldw	r3,-28(fp)
 402fe2c:	00bfff84 	movi	r2,-2
 402fe30:	1884703a 	and	r2,r3,r2
 402fe34:	1001703a 	wrctl	status,r2
  
  return context;
 402fe38:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 402fe3c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 402fe40:	d0a70d17 	ldw	r2,-25548(gp)
      
      current_nticks = alt_nticks();
 402fe44:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 402fe48:	e0fffd17 	ldw	r3,-12(fp)
 402fe4c:	e0bff617 	ldw	r2,-40(fp)
 402fe50:	1885883a 	add	r2,r3,r2
 402fe54:	10c00044 	addi	r3,r2,1
 402fe58:	e0bffc17 	ldw	r2,-16(fp)
 402fe5c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 402fe60:	e0bffc17 	ldw	r2,-16(fp)
 402fe64:	10c00217 	ldw	r3,8(r2)
 402fe68:	e0bff617 	ldw	r2,-40(fp)
 402fe6c:	1880042e 	bgeu	r3,r2,402fe80 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 402fe70:	e0bffc17 	ldw	r2,-16(fp)
 402fe74:	00c00044 	movi	r3,1
 402fe78:	10c00405 	stb	r3,16(r2)
 402fe7c:	00000206 	br	402fe88 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 402fe80:	e0bffc17 	ldw	r2,-16(fp)
 402fe84:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 402fe88:	e0bffc17 	ldw	r2,-16(fp)
 402fe8c:	d0e01204 	addi	r3,gp,-32696
 402fe90:	e0fffa15 	stw	r3,-24(fp)
 402fe94:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 402fe98:	e0bffb17 	ldw	r2,-20(fp)
 402fe9c:	e0fffa17 	ldw	r3,-24(fp)
 402fea0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 402fea4:	e0bffa17 	ldw	r2,-24(fp)
 402fea8:	10c00017 	ldw	r3,0(r2)
 402feac:	e0bffb17 	ldw	r2,-20(fp)
 402feb0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 402feb4:	e0bffa17 	ldw	r2,-24(fp)
 402feb8:	10800017 	ldw	r2,0(r2)
 402febc:	e0fffb17 	ldw	r3,-20(fp)
 402fec0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 402fec4:	e0bffa17 	ldw	r2,-24(fp)
 402fec8:	e0fffb17 	ldw	r3,-20(fp)
 402fecc:	10c00015 	stw	r3,0(r2)
 402fed0:	e0bff817 	ldw	r2,-32(fp)
 402fed4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402fed8:	e0bff717 	ldw	r2,-36(fp)
 402fedc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 402fee0:	0005883a 	mov	r2,zero
 402fee4:	00000306 	br	402fef4 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 402fee8:	00bffa84 	movi	r2,-22
 402feec:	00000106 	br	402fef4 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 402fef0:	00bfde84 	movi	r2,-134
  }
}
 402fef4:	e037883a 	mov	sp,fp
 402fef8:	df000017 	ldw	fp,0(sp)
 402fefc:	dec00104 	addi	sp,sp,4
 402ff00:	f800283a 	ret

0402ff04 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 402ff04:	defffa04 	addi	sp,sp,-24
 402ff08:	dfc00515 	stw	ra,20(sp)
 402ff0c:	df000415 	stw	fp,16(sp)
 402ff10:	df000404 	addi	fp,sp,16
 402ff14:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 402ff18:	008000c4 	movi	r2,3
 402ff1c:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 402ff20:	e0fffd17 	ldw	r3,-12(fp)
 402ff24:	008003f4 	movhi	r2,15
 402ff28:	10909004 	addi	r2,r2,16960
 402ff2c:	1885383a 	mul	r2,r3,r2
 402ff30:	100b883a 	mov	r5,r2
 402ff34:	0100bef4 	movhi	r4,763
 402ff38:	213c2004 	addi	r4,r4,-3968
 402ff3c:	402ad0c0 	call	402ad0c <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 402ff40:	100b883a 	mov	r5,r2
 402ff44:	01200034 	movhi	r4,32768
 402ff48:	213fffc4 	addi	r4,r4,-1
 402ff4c:	402ad0c0 	call	402ad0c <__udivsi3>
 402ff50:	100b883a 	mov	r5,r2
 402ff54:	e13fff17 	ldw	r4,-4(fp)
 402ff58:	402ad0c0 	call	402ad0c <__udivsi3>
 402ff5c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 402ff60:	e0bffe17 	ldw	r2,-8(fp)
 402ff64:	10002a26 	beq	r2,zero,4030010 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 402ff68:	e03ffc15 	stw	zero,-16(fp)
 402ff6c:	00001706 	br	402ffcc <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 402ff70:	00a00034 	movhi	r2,32768
 402ff74:	10bfffc4 	addi	r2,r2,-1
 402ff78:	10bfffc4 	addi	r2,r2,-1
 402ff7c:	103ffe1e 	bne	r2,zero,402ff78 <__alt_data_end+0xfffeff78>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 402ff80:	e0fffd17 	ldw	r3,-12(fp)
 402ff84:	008003f4 	movhi	r2,15
 402ff88:	10909004 	addi	r2,r2,16960
 402ff8c:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 402ff90:	100b883a 	mov	r5,r2
 402ff94:	0100bef4 	movhi	r4,763
 402ff98:	213c2004 	addi	r4,r4,-3968
 402ff9c:	402ad0c0 	call	402ad0c <__udivsi3>
 402ffa0:	100b883a 	mov	r5,r2
 402ffa4:	01200034 	movhi	r4,32768
 402ffa8:	213fffc4 	addi	r4,r4,-1
 402ffac:	402ad0c0 	call	402ad0c <__udivsi3>
 402ffb0:	1007883a 	mov	r3,r2
 402ffb4:	e0bfff17 	ldw	r2,-4(fp)
 402ffb8:	10c5c83a 	sub	r2,r2,r3
 402ffbc:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 402ffc0:	e0bffc17 	ldw	r2,-16(fp)
 402ffc4:	10800044 	addi	r2,r2,1
 402ffc8:	e0bffc15 	stw	r2,-16(fp)
 402ffcc:	e0fffc17 	ldw	r3,-16(fp)
 402ffd0:	e0bffe17 	ldw	r2,-8(fp)
 402ffd4:	18bfe616 	blt	r3,r2,402ff70 <__alt_data_end+0xfffeff70>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 402ffd8:	e0fffd17 	ldw	r3,-12(fp)
 402ffdc:	008003f4 	movhi	r2,15
 402ffe0:	10909004 	addi	r2,r2,16960
 402ffe4:	1885383a 	mul	r2,r3,r2
 402ffe8:	100b883a 	mov	r5,r2
 402ffec:	0100bef4 	movhi	r4,763
 402fff0:	213c2004 	addi	r4,r4,-3968
 402fff4:	402ad0c0 	call	402ad0c <__udivsi3>
 402fff8:	1007883a 	mov	r3,r2
 402fffc:	e0bfff17 	ldw	r2,-4(fp)
 4030000:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 4030004:	10bfffc4 	addi	r2,r2,-1
 4030008:	103ffe1e 	bne	r2,zero,4030004 <__alt_data_end+0xffff0004>
 403000c:	00000d06 	br	4030044 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4030010:	e0fffd17 	ldw	r3,-12(fp)
 4030014:	008003f4 	movhi	r2,15
 4030018:	10909004 	addi	r2,r2,16960
 403001c:	1885383a 	mul	r2,r3,r2
 4030020:	100b883a 	mov	r5,r2
 4030024:	0100bef4 	movhi	r4,763
 4030028:	213c2004 	addi	r4,r4,-3968
 403002c:	402ad0c0 	call	402ad0c <__udivsi3>
 4030030:	1007883a 	mov	r3,r2
 4030034:	e0bfff17 	ldw	r2,-4(fp)
 4030038:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 403003c:	10bfffc4 	addi	r2,r2,-1
 4030040:	00bffe16 	blt	zero,r2,403003c <__alt_data_end+0xffff003c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 4030044:	0005883a 	mov	r2,zero
}
 4030048:	e037883a 	mov	sp,fp
 403004c:	dfc00117 	ldw	ra,4(sp)
 4030050:	df000017 	ldw	fp,0(sp)
 4030054:	dec00204 	addi	sp,sp,8
 4030058:	f800283a 	ret

0403005c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 403005c:	defffe04 	addi	sp,sp,-8
 4030060:	dfc00115 	stw	ra,4(sp)
 4030064:	df000015 	stw	fp,0(sp)
 4030068:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 403006c:	d0a00b17 	ldw	r2,-32724(gp)
 4030070:	10000326 	beq	r2,zero,4030080 <alt_get_errno+0x24>
 4030074:	d0a00b17 	ldw	r2,-32724(gp)
 4030078:	103ee83a 	callr	r2
 403007c:	00000106 	br	4030084 <alt_get_errno+0x28>
 4030080:	d0a70604 	addi	r2,gp,-25576
}
 4030084:	e037883a 	mov	sp,fp
 4030088:	dfc00117 	ldw	ra,4(sp)
 403008c:	df000017 	ldw	fp,0(sp)
 4030090:	dec00204 	addi	sp,sp,8
 4030094:	f800283a 	ret

04030098 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 4030098:	defffa04 	addi	sp,sp,-24
 403009c:	dfc00515 	stw	ra,20(sp)
 40300a0:	df000415 	stw	fp,16(sp)
 40300a4:	df000404 	addi	fp,sp,16
 40300a8:	e13ffe15 	stw	r4,-8(fp)
 40300ac:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 40300b0:	e0bffe17 	ldw	r2,-8(fp)
 40300b4:	10000326 	beq	r2,zero,40300c4 <alt_dev_llist_insert+0x2c>
 40300b8:	e0bffe17 	ldw	r2,-8(fp)
 40300bc:	10800217 	ldw	r2,8(r2)
 40300c0:	1000061e 	bne	r2,zero,40300dc <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 40300c4:	403005c0 	call	403005c <alt_get_errno>
 40300c8:	1007883a 	mov	r3,r2
 40300cc:	00800584 	movi	r2,22
 40300d0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 40300d4:	00bffa84 	movi	r2,-22
 40300d8:	00001306 	br	4030128 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 40300dc:	e0bffe17 	ldw	r2,-8(fp)
 40300e0:	e0ffff17 	ldw	r3,-4(fp)
 40300e4:	e0fffc15 	stw	r3,-16(fp)
 40300e8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 40300ec:	e0bffd17 	ldw	r2,-12(fp)
 40300f0:	e0fffc17 	ldw	r3,-16(fp)
 40300f4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 40300f8:	e0bffc17 	ldw	r2,-16(fp)
 40300fc:	10c00017 	ldw	r3,0(r2)
 4030100:	e0bffd17 	ldw	r2,-12(fp)
 4030104:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4030108:	e0bffc17 	ldw	r2,-16(fp)
 403010c:	10800017 	ldw	r2,0(r2)
 4030110:	e0fffd17 	ldw	r3,-12(fp)
 4030114:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4030118:	e0bffc17 	ldw	r2,-16(fp)
 403011c:	e0fffd17 	ldw	r3,-12(fp)
 4030120:	10c00015 	stw	r3,0(r2)

  return 0;  
 4030124:	0005883a 	mov	r2,zero
}
 4030128:	e037883a 	mov	sp,fp
 403012c:	dfc00117 	ldw	ra,4(sp)
 4030130:	df000017 	ldw	fp,0(sp)
 4030134:	dec00204 	addi	sp,sp,8
 4030138:	f800283a 	ret

0403013c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 403013c:	defffd04 	addi	sp,sp,-12
 4030140:	dfc00215 	stw	ra,8(sp)
 4030144:	df000115 	stw	fp,4(sp)
 4030148:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 403014c:	008100f4 	movhi	r2,1027
 4030150:	1083bd04 	addi	r2,r2,3828
 4030154:	e0bfff15 	stw	r2,-4(fp)
 4030158:	00000606 	br	4030174 <_do_ctors+0x38>
        (*ctor) (); 
 403015c:	e0bfff17 	ldw	r2,-4(fp)
 4030160:	10800017 	ldw	r2,0(r2)
 4030164:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4030168:	e0bfff17 	ldw	r2,-4(fp)
 403016c:	10bfff04 	addi	r2,r2,-4
 4030170:	e0bfff15 	stw	r2,-4(fp)
 4030174:	e0ffff17 	ldw	r3,-4(fp)
 4030178:	008100f4 	movhi	r2,1027
 403017c:	1083be04 	addi	r2,r2,3832
 4030180:	18bff62e 	bgeu	r3,r2,403015c <__alt_data_end+0xffff015c>
        (*ctor) (); 
}
 4030184:	0001883a 	nop
 4030188:	e037883a 	mov	sp,fp
 403018c:	dfc00117 	ldw	ra,4(sp)
 4030190:	df000017 	ldw	fp,0(sp)
 4030194:	dec00204 	addi	sp,sp,8
 4030198:	f800283a 	ret

0403019c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 403019c:	defffd04 	addi	sp,sp,-12
 40301a0:	dfc00215 	stw	ra,8(sp)
 40301a4:	df000115 	stw	fp,4(sp)
 40301a8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 40301ac:	008100f4 	movhi	r2,1027
 40301b0:	1083bd04 	addi	r2,r2,3828
 40301b4:	e0bfff15 	stw	r2,-4(fp)
 40301b8:	00000606 	br	40301d4 <_do_dtors+0x38>
        (*dtor) (); 
 40301bc:	e0bfff17 	ldw	r2,-4(fp)
 40301c0:	10800017 	ldw	r2,0(r2)
 40301c4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 40301c8:	e0bfff17 	ldw	r2,-4(fp)
 40301cc:	10bfff04 	addi	r2,r2,-4
 40301d0:	e0bfff15 	stw	r2,-4(fp)
 40301d4:	e0ffff17 	ldw	r3,-4(fp)
 40301d8:	008100f4 	movhi	r2,1027
 40301dc:	1083be04 	addi	r2,r2,3832
 40301e0:	18bff62e 	bgeu	r3,r2,40301bc <__alt_data_end+0xffff01bc>
        (*dtor) (); 
}
 40301e4:	0001883a 	nop
 40301e8:	e037883a 	mov	sp,fp
 40301ec:	dfc00117 	ldw	ra,4(sp)
 40301f0:	df000017 	ldw	fp,0(sp)
 40301f4:	dec00204 	addi	sp,sp,8
 40301f8:	f800283a 	ret

040301fc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 40301fc:	defffa04 	addi	sp,sp,-24
 4030200:	dfc00515 	stw	ra,20(sp)
 4030204:	df000415 	stw	fp,16(sp)
 4030208:	df000404 	addi	fp,sp,16
 403020c:	e13ffe15 	stw	r4,-8(fp)
 4030210:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 4030214:	e0bfff17 	ldw	r2,-4(fp)
 4030218:	10800017 	ldw	r2,0(r2)
 403021c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 4030220:	e13ffe17 	ldw	r4,-8(fp)
 4030224:	4020ae80 	call	4020ae8 <strlen>
 4030228:	10800044 	addi	r2,r2,1
 403022c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4030230:	00000d06 	br	4030268 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 4030234:	e0bffc17 	ldw	r2,-16(fp)
 4030238:	10800217 	ldw	r2,8(r2)
 403023c:	e0fffd17 	ldw	r3,-12(fp)
 4030240:	180d883a 	mov	r6,r3
 4030244:	e17ffe17 	ldw	r5,-8(fp)
 4030248:	1009883a 	mov	r4,r2
 403024c:	4030b400 	call	4030b40 <memcmp>
 4030250:	1000021e 	bne	r2,zero,403025c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 4030254:	e0bffc17 	ldw	r2,-16(fp)
 4030258:	00000706 	br	4030278 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 403025c:	e0bffc17 	ldw	r2,-16(fp)
 4030260:	10800017 	ldw	r2,0(r2)
 4030264:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4030268:	e0fffc17 	ldw	r3,-16(fp)
 403026c:	e0bfff17 	ldw	r2,-4(fp)
 4030270:	18bff01e 	bne	r3,r2,4030234 <__alt_data_end+0xffff0234>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 4030274:	0005883a 	mov	r2,zero
}
 4030278:	e037883a 	mov	sp,fp
 403027c:	dfc00117 	ldw	ra,4(sp)
 4030280:	df000017 	ldw	fp,0(sp)
 4030284:	dec00204 	addi	sp,sp,8
 4030288:	f800283a 	ret

0403028c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 403028c:	defffe04 	addi	sp,sp,-8
 4030290:	dfc00115 	stw	ra,4(sp)
 4030294:	df000015 	stw	fp,0(sp)
 4030298:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 403029c:	01440004 	movi	r5,4096
 40302a0:	0009883a 	mov	r4,zero
 40302a4:	4030a640 	call	4030a64 <alt_icache_flush>
#endif
}
 40302a8:	0001883a 	nop
 40302ac:	e037883a 	mov	sp,fp
 40302b0:	dfc00117 	ldw	ra,4(sp)
 40302b4:	df000017 	ldw	fp,0(sp)
 40302b8:	dec00204 	addi	sp,sp,8
 40302bc:	f800283a 	ret

040302c0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 40302c0:	defffe04 	addi	sp,sp,-8
 40302c4:	df000115 	stw	fp,4(sp)
 40302c8:	df000104 	addi	fp,sp,4
 40302cc:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 40302d0:	e0bfff17 	ldw	r2,-4(fp)
 40302d4:	10bffe84 	addi	r2,r2,-6
 40302d8:	10c00428 	cmpgeui	r3,r2,16
 40302dc:	18001a1e 	bne	r3,zero,4030348 <alt_exception_cause_generated_bad_addr+0x88>
 40302e0:	100690ba 	slli	r3,r2,2
 40302e4:	008100f4 	movhi	r2,1027
 40302e8:	1080be04 	addi	r2,r2,760
 40302ec:	1885883a 	add	r2,r3,r2
 40302f0:	10800017 	ldw	r2,0(r2)
 40302f4:	1000683a 	jmp	r2
 40302f8:	04030338 	rdprs	r16,zero,3084
 40302fc:	04030338 	rdprs	r16,zero,3084
 4030300:	04030348 	cmpgei	r16,zero,3085
 4030304:	04030348 	cmpgei	r16,zero,3085
 4030308:	04030348 	cmpgei	r16,zero,3085
 403030c:	04030338 	rdprs	r16,zero,3084
 4030310:	04030340 	call	403034 <__alt_mem_sdram_controller_2+0x403034>
 4030314:	04030348 	cmpgei	r16,zero,3085
 4030318:	04030338 	rdprs	r16,zero,3084
 403031c:	04030338 	rdprs	r16,zero,3084
 4030320:	04030348 	cmpgei	r16,zero,3085
 4030324:	04030338 	rdprs	r16,zero,3084
 4030328:	04030340 	call	403034 <__alt_mem_sdram_controller_2+0x403034>
 403032c:	04030348 	cmpgei	r16,zero,3085
 4030330:	04030348 	cmpgei	r16,zero,3085
 4030334:	04030338 	rdprs	r16,zero,3084
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 4030338:	00800044 	movi	r2,1
 403033c:	00000306 	br	403034c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 4030340:	0005883a 	mov	r2,zero
 4030344:	00000106 	br	403034c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 4030348:	0005883a 	mov	r2,zero
  }
}
 403034c:	e037883a 	mov	sp,fp
 4030350:	df000017 	ldw	fp,0(sp)
 4030354:	dec00104 	addi	sp,sp,4
 4030358:	f800283a 	ret

0403035c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 403035c:	defff904 	addi	sp,sp,-28
 4030360:	dfc00615 	stw	ra,24(sp)
 4030364:	df000515 	stw	fp,20(sp)
 4030368:	df000504 	addi	fp,sp,20
 403036c:	e13ffc15 	stw	r4,-16(fp)
 4030370:	e17ffd15 	stw	r5,-12(fp)
 4030374:	e1bffe15 	stw	r6,-8(fp)
 4030378:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 403037c:	e1bfff17 	ldw	r6,-4(fp)
 4030380:	e17ffe17 	ldw	r5,-8(fp)
 4030384:	e13ffd17 	ldw	r4,-12(fp)
 4030388:	403059c0 	call	403059c <open>
 403038c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 4030390:	e0bffb17 	ldw	r2,-20(fp)
 4030394:	10001c16 	blt	r2,zero,4030408 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 4030398:	008100f4 	movhi	r2,1027
 403039c:	1087cf04 	addi	r2,r2,7996
 40303a0:	e0fffb17 	ldw	r3,-20(fp)
 40303a4:	18c00324 	muli	r3,r3,12
 40303a8:	10c5883a 	add	r2,r2,r3
 40303ac:	10c00017 	ldw	r3,0(r2)
 40303b0:	e0bffc17 	ldw	r2,-16(fp)
 40303b4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 40303b8:	008100f4 	movhi	r2,1027
 40303bc:	1087cf04 	addi	r2,r2,7996
 40303c0:	e0fffb17 	ldw	r3,-20(fp)
 40303c4:	18c00324 	muli	r3,r3,12
 40303c8:	10c5883a 	add	r2,r2,r3
 40303cc:	10800104 	addi	r2,r2,4
 40303d0:	10c00017 	ldw	r3,0(r2)
 40303d4:	e0bffc17 	ldw	r2,-16(fp)
 40303d8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 40303dc:	008100f4 	movhi	r2,1027
 40303e0:	1087cf04 	addi	r2,r2,7996
 40303e4:	e0fffb17 	ldw	r3,-20(fp)
 40303e8:	18c00324 	muli	r3,r3,12
 40303ec:	10c5883a 	add	r2,r2,r3
 40303f0:	10800204 	addi	r2,r2,8
 40303f4:	10c00017 	ldw	r3,0(r2)
 40303f8:	e0bffc17 	ldw	r2,-16(fp)
 40303fc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 4030400:	e13ffb17 	ldw	r4,-20(fp)
 4030404:	402de140 	call	402de14 <alt_release_fd>
  }
} 
 4030408:	0001883a 	nop
 403040c:	e037883a 	mov	sp,fp
 4030410:	dfc00117 	ldw	ra,4(sp)
 4030414:	df000017 	ldw	fp,0(sp)
 4030418:	dec00204 	addi	sp,sp,8
 403041c:	f800283a 	ret

04030420 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 4030420:	defffb04 	addi	sp,sp,-20
 4030424:	dfc00415 	stw	ra,16(sp)
 4030428:	df000315 	stw	fp,12(sp)
 403042c:	df000304 	addi	fp,sp,12
 4030430:	e13ffd15 	stw	r4,-12(fp)
 4030434:	e17ffe15 	stw	r5,-8(fp)
 4030438:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 403043c:	01c07fc4 	movi	r7,511
 4030440:	01800044 	movi	r6,1
 4030444:	e17ffd17 	ldw	r5,-12(fp)
 4030448:	010100f4 	movhi	r4,1027
 403044c:	2107d204 	addi	r4,r4,8008
 4030450:	403035c0 	call	403035c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 4030454:	01c07fc4 	movi	r7,511
 4030458:	000d883a 	mov	r6,zero
 403045c:	e17ffe17 	ldw	r5,-8(fp)
 4030460:	010100f4 	movhi	r4,1027
 4030464:	2107cf04 	addi	r4,r4,7996
 4030468:	403035c0 	call	403035c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 403046c:	01c07fc4 	movi	r7,511
 4030470:	01800044 	movi	r6,1
 4030474:	e17fff17 	ldw	r5,-4(fp)
 4030478:	010100f4 	movhi	r4,1027
 403047c:	2107d504 	addi	r4,r4,8020
 4030480:	403035c0 	call	403035c <alt_open_fd>
}  
 4030484:	0001883a 	nop
 4030488:	e037883a 	mov	sp,fp
 403048c:	dfc00117 	ldw	ra,4(sp)
 4030490:	df000017 	ldw	fp,0(sp)
 4030494:	dec00204 	addi	sp,sp,8
 4030498:	f800283a 	ret

0403049c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 403049c:	defffe04 	addi	sp,sp,-8
 40304a0:	dfc00115 	stw	ra,4(sp)
 40304a4:	df000015 	stw	fp,0(sp)
 40304a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40304ac:	d0a00b17 	ldw	r2,-32724(gp)
 40304b0:	10000326 	beq	r2,zero,40304c0 <alt_get_errno+0x24>
 40304b4:	d0a00b17 	ldw	r2,-32724(gp)
 40304b8:	103ee83a 	callr	r2
 40304bc:	00000106 	br	40304c4 <alt_get_errno+0x28>
 40304c0:	d0a70604 	addi	r2,gp,-25576
}
 40304c4:	e037883a 	mov	sp,fp
 40304c8:	dfc00117 	ldw	ra,4(sp)
 40304cc:	df000017 	ldw	fp,0(sp)
 40304d0:	dec00204 	addi	sp,sp,8
 40304d4:	f800283a 	ret

040304d8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 40304d8:	defffd04 	addi	sp,sp,-12
 40304dc:	df000215 	stw	fp,8(sp)
 40304e0:	df000204 	addi	fp,sp,8
 40304e4:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 40304e8:	e0bfff17 	ldw	r2,-4(fp)
 40304ec:	10800217 	ldw	r2,8(r2)
 40304f0:	10d00034 	orhi	r3,r2,16384
 40304f4:	e0bfff17 	ldw	r2,-4(fp)
 40304f8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 40304fc:	e03ffe15 	stw	zero,-8(fp)
 4030500:	00001d06 	br	4030578 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4030504:	008100f4 	movhi	r2,1027
 4030508:	1087cf04 	addi	r2,r2,7996
 403050c:	e0fffe17 	ldw	r3,-8(fp)
 4030510:	18c00324 	muli	r3,r3,12
 4030514:	10c5883a 	add	r2,r2,r3
 4030518:	10c00017 	ldw	r3,0(r2)
 403051c:	e0bfff17 	ldw	r2,-4(fp)
 4030520:	10800017 	ldw	r2,0(r2)
 4030524:	1880111e 	bne	r3,r2,403056c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4030528:	008100f4 	movhi	r2,1027
 403052c:	1087cf04 	addi	r2,r2,7996
 4030530:	e0fffe17 	ldw	r3,-8(fp)
 4030534:	18c00324 	muli	r3,r3,12
 4030538:	10c5883a 	add	r2,r2,r3
 403053c:	10800204 	addi	r2,r2,8
 4030540:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4030544:	1000090e 	bge	r2,zero,403056c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 4030548:	e0bffe17 	ldw	r2,-8(fp)
 403054c:	10c00324 	muli	r3,r2,12
 4030550:	008100f4 	movhi	r2,1027
 4030554:	1087cf04 	addi	r2,r2,7996
 4030558:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 403055c:	e0bfff17 	ldw	r2,-4(fp)
 4030560:	18800226 	beq	r3,r2,403056c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 4030564:	00bffcc4 	movi	r2,-13
 4030568:	00000806 	br	403058c <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 403056c:	e0bffe17 	ldw	r2,-8(fp)
 4030570:	10800044 	addi	r2,r2,1
 4030574:	e0bffe15 	stw	r2,-8(fp)
 4030578:	d0a00a17 	ldw	r2,-32728(gp)
 403057c:	1007883a 	mov	r3,r2
 4030580:	e0bffe17 	ldw	r2,-8(fp)
 4030584:	18bfdf2e 	bgeu	r3,r2,4030504 <__alt_data_end+0xffff0504>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 4030588:	0005883a 	mov	r2,zero
}
 403058c:	e037883a 	mov	sp,fp
 4030590:	df000017 	ldw	fp,0(sp)
 4030594:	dec00104 	addi	sp,sp,4
 4030598:	f800283a 	ret

0403059c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 403059c:	defff604 	addi	sp,sp,-40
 40305a0:	dfc00915 	stw	ra,36(sp)
 40305a4:	df000815 	stw	fp,32(sp)
 40305a8:	df000804 	addi	fp,sp,32
 40305ac:	e13ffd15 	stw	r4,-12(fp)
 40305b0:	e17ffe15 	stw	r5,-8(fp)
 40305b4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 40305b8:	00bfffc4 	movi	r2,-1
 40305bc:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 40305c0:	00bffb44 	movi	r2,-19
 40305c4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 40305c8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 40305cc:	d1600804 	addi	r5,gp,-32736
 40305d0:	e13ffd17 	ldw	r4,-12(fp)
 40305d4:	40301fc0 	call	40301fc <alt_find_dev>
 40305d8:	e0bff815 	stw	r2,-32(fp)
 40305dc:	e0bff817 	ldw	r2,-32(fp)
 40305e0:	1000051e 	bne	r2,zero,40305f8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 40305e4:	e13ffd17 	ldw	r4,-12(fp)
 40305e8:	40308b80 	call	40308b8 <alt_find_file>
 40305ec:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 40305f0:	00800044 	movi	r2,1
 40305f4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 40305f8:	e0bff817 	ldw	r2,-32(fp)
 40305fc:	10002926 	beq	r2,zero,40306a4 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 4030600:	e13ff817 	ldw	r4,-32(fp)
 4030604:	40309c00 	call	40309c0 <alt_get_fd>
 4030608:	e0bff915 	stw	r2,-28(fp)
 403060c:	e0bff917 	ldw	r2,-28(fp)
 4030610:	1000030e 	bge	r2,zero,4030620 <open+0x84>
    {
      status = index;
 4030614:	e0bff917 	ldw	r2,-28(fp)
 4030618:	e0bffa15 	stw	r2,-24(fp)
 403061c:	00002306 	br	40306ac <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 4030620:	e0bff917 	ldw	r2,-28(fp)
 4030624:	10c00324 	muli	r3,r2,12
 4030628:	008100f4 	movhi	r2,1027
 403062c:	1087cf04 	addi	r2,r2,7996
 4030630:	1885883a 	add	r2,r3,r2
 4030634:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 4030638:	e0fffe17 	ldw	r3,-8(fp)
 403063c:	00900034 	movhi	r2,16384
 4030640:	10bfffc4 	addi	r2,r2,-1
 4030644:	1886703a 	and	r3,r3,r2
 4030648:	e0bffc17 	ldw	r2,-16(fp)
 403064c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 4030650:	e0bffb17 	ldw	r2,-20(fp)
 4030654:	1000051e 	bne	r2,zero,403066c <open+0xd0>
 4030658:	e13ffc17 	ldw	r4,-16(fp)
 403065c:	40304d80 	call	40304d8 <alt_file_locked>
 4030660:	e0bffa15 	stw	r2,-24(fp)
 4030664:	e0bffa17 	ldw	r2,-24(fp)
 4030668:	10001016 	blt	r2,zero,40306ac <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 403066c:	e0bff817 	ldw	r2,-32(fp)
 4030670:	10800317 	ldw	r2,12(r2)
 4030674:	10000826 	beq	r2,zero,4030698 <open+0xfc>
 4030678:	e0bff817 	ldw	r2,-32(fp)
 403067c:	10800317 	ldw	r2,12(r2)
 4030680:	e1ffff17 	ldw	r7,-4(fp)
 4030684:	e1bffe17 	ldw	r6,-8(fp)
 4030688:	e17ffd17 	ldw	r5,-12(fp)
 403068c:	e13ffc17 	ldw	r4,-16(fp)
 4030690:	103ee83a 	callr	r2
 4030694:	00000106 	br	403069c <open+0x100>
 4030698:	0005883a 	mov	r2,zero
 403069c:	e0bffa15 	stw	r2,-24(fp)
 40306a0:	00000206 	br	40306ac <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 40306a4:	00bffb44 	movi	r2,-19
 40306a8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 40306ac:	e0bffa17 	ldw	r2,-24(fp)
 40306b0:	1000090e 	bge	r2,zero,40306d8 <open+0x13c>
  {
    alt_release_fd (index);  
 40306b4:	e13ff917 	ldw	r4,-28(fp)
 40306b8:	402de140 	call	402de14 <alt_release_fd>
    ALT_ERRNO = -status;
 40306bc:	403049c0 	call	403049c <alt_get_errno>
 40306c0:	1007883a 	mov	r3,r2
 40306c4:	e0bffa17 	ldw	r2,-24(fp)
 40306c8:	0085c83a 	sub	r2,zero,r2
 40306cc:	18800015 	stw	r2,0(r3)
    return -1;
 40306d0:	00bfffc4 	movi	r2,-1
 40306d4:	00000106 	br	40306dc <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 40306d8:	e0bff917 	ldw	r2,-28(fp)
}
 40306dc:	e037883a 	mov	sp,fp
 40306e0:	dfc00117 	ldw	ra,4(sp)
 40306e4:	df000017 	ldw	fp,0(sp)
 40306e8:	dec00204 	addi	sp,sp,8
 40306ec:	f800283a 	ret

040306f0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 40306f0:	defffa04 	addi	sp,sp,-24
 40306f4:	df000515 	stw	fp,20(sp)
 40306f8:	df000504 	addi	fp,sp,20
 40306fc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4030700:	0005303a 	rdctl	r2,status
 4030704:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4030708:	e0fffc17 	ldw	r3,-16(fp)
 403070c:	00bfff84 	movi	r2,-2
 4030710:	1884703a 	and	r2,r3,r2
 4030714:	1001703a 	wrctl	status,r2
  
  return context;
 4030718:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 403071c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 4030720:	e0bfff17 	ldw	r2,-4(fp)
 4030724:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 4030728:	e0bffd17 	ldw	r2,-12(fp)
 403072c:	10800017 	ldw	r2,0(r2)
 4030730:	e0fffd17 	ldw	r3,-12(fp)
 4030734:	18c00117 	ldw	r3,4(r3)
 4030738:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 403073c:	e0bffd17 	ldw	r2,-12(fp)
 4030740:	10800117 	ldw	r2,4(r2)
 4030744:	e0fffd17 	ldw	r3,-12(fp)
 4030748:	18c00017 	ldw	r3,0(r3)
 403074c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 4030750:	e0bffd17 	ldw	r2,-12(fp)
 4030754:	e0fffd17 	ldw	r3,-12(fp)
 4030758:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 403075c:	e0bffd17 	ldw	r2,-12(fp)
 4030760:	e0fffd17 	ldw	r3,-12(fp)
 4030764:	10c00015 	stw	r3,0(r2)
 4030768:	e0bffb17 	ldw	r2,-20(fp)
 403076c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4030770:	e0bffe17 	ldw	r2,-8(fp)
 4030774:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 4030778:	0001883a 	nop
 403077c:	e037883a 	mov	sp,fp
 4030780:	df000017 	ldw	fp,0(sp)
 4030784:	dec00104 	addi	sp,sp,4
 4030788:	f800283a 	ret

0403078c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 403078c:	defffb04 	addi	sp,sp,-20
 4030790:	dfc00415 	stw	ra,16(sp)
 4030794:	df000315 	stw	fp,12(sp)
 4030798:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 403079c:	d0a01217 	ldw	r2,-32696(gp)
 40307a0:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 40307a4:	d0a70d17 	ldw	r2,-25548(gp)
 40307a8:	10800044 	addi	r2,r2,1
 40307ac:	d0a70d15 	stw	r2,-25548(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 40307b0:	00002e06 	br	403086c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 40307b4:	e0bffd17 	ldw	r2,-12(fp)
 40307b8:	10800017 	ldw	r2,0(r2)
 40307bc:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 40307c0:	e0bffd17 	ldw	r2,-12(fp)
 40307c4:	10800403 	ldbu	r2,16(r2)
 40307c8:	10803fcc 	andi	r2,r2,255
 40307cc:	10000426 	beq	r2,zero,40307e0 <alt_tick+0x54>
 40307d0:	d0a70d17 	ldw	r2,-25548(gp)
 40307d4:	1000021e 	bne	r2,zero,40307e0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 40307d8:	e0bffd17 	ldw	r2,-12(fp)
 40307dc:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 40307e0:	e0bffd17 	ldw	r2,-12(fp)
 40307e4:	10800217 	ldw	r2,8(r2)
 40307e8:	d0e70d17 	ldw	r3,-25548(gp)
 40307ec:	18801d36 	bltu	r3,r2,4030864 <alt_tick+0xd8>
 40307f0:	e0bffd17 	ldw	r2,-12(fp)
 40307f4:	10800403 	ldbu	r2,16(r2)
 40307f8:	10803fcc 	andi	r2,r2,255
 40307fc:	1000191e 	bne	r2,zero,4030864 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 4030800:	e0bffd17 	ldw	r2,-12(fp)
 4030804:	10800317 	ldw	r2,12(r2)
 4030808:	e0fffd17 	ldw	r3,-12(fp)
 403080c:	18c00517 	ldw	r3,20(r3)
 4030810:	1809883a 	mov	r4,r3
 4030814:	103ee83a 	callr	r2
 4030818:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 403081c:	e0bfff17 	ldw	r2,-4(fp)
 4030820:	1000031e 	bne	r2,zero,4030830 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 4030824:	e13ffd17 	ldw	r4,-12(fp)
 4030828:	40306f00 	call	40306f0 <alt_alarm_stop>
 403082c:	00000d06 	br	4030864 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 4030830:	e0bffd17 	ldw	r2,-12(fp)
 4030834:	10c00217 	ldw	r3,8(r2)
 4030838:	e0bfff17 	ldw	r2,-4(fp)
 403083c:	1887883a 	add	r3,r3,r2
 4030840:	e0bffd17 	ldw	r2,-12(fp)
 4030844:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 4030848:	e0bffd17 	ldw	r2,-12(fp)
 403084c:	10c00217 	ldw	r3,8(r2)
 4030850:	d0a70d17 	ldw	r2,-25548(gp)
 4030854:	1880032e 	bgeu	r3,r2,4030864 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 4030858:	e0bffd17 	ldw	r2,-12(fp)
 403085c:	00c00044 	movi	r3,1
 4030860:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 4030864:	e0bffe17 	ldw	r2,-8(fp)
 4030868:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 403086c:	e0fffd17 	ldw	r3,-12(fp)
 4030870:	d0a01204 	addi	r2,gp,-32696
 4030874:	18bfcf1e 	bne	r3,r2,40307b4 <__alt_data_end+0xffff07b4>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 4030878:	0001883a 	nop
}
 403087c:	0001883a 	nop
 4030880:	e037883a 	mov	sp,fp
 4030884:	dfc00117 	ldw	ra,4(sp)
 4030888:	df000017 	ldw	fp,0(sp)
 403088c:	dec00204 	addi	sp,sp,8
 4030890:	f800283a 	ret

04030894 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 4030894:	deffff04 	addi	sp,sp,-4
 4030898:	df000015 	stw	fp,0(sp)
 403089c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 40308a0:	000170fa 	wrctl	ienable,zero
}
 40308a4:	0001883a 	nop
 40308a8:	e037883a 	mov	sp,fp
 40308ac:	df000017 	ldw	fp,0(sp)
 40308b0:	dec00104 	addi	sp,sp,4
 40308b4:	f800283a 	ret

040308b8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 40308b8:	defffb04 	addi	sp,sp,-20
 40308bc:	dfc00415 	stw	ra,16(sp)
 40308c0:	df000315 	stw	fp,12(sp)
 40308c4:	df000304 	addi	fp,sp,12
 40308c8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 40308cc:	d0a00617 	ldw	r2,-32744(gp)
 40308d0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 40308d4:	00003106 	br	403099c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 40308d8:	e0bffd17 	ldw	r2,-12(fp)
 40308dc:	10800217 	ldw	r2,8(r2)
 40308e0:	1009883a 	mov	r4,r2
 40308e4:	4020ae80 	call	4020ae8 <strlen>
 40308e8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 40308ec:	e0bffd17 	ldw	r2,-12(fp)
 40308f0:	10c00217 	ldw	r3,8(r2)
 40308f4:	e0bffe17 	ldw	r2,-8(fp)
 40308f8:	10bfffc4 	addi	r2,r2,-1
 40308fc:	1885883a 	add	r2,r3,r2
 4030900:	10800003 	ldbu	r2,0(r2)
 4030904:	10803fcc 	andi	r2,r2,255
 4030908:	1080201c 	xori	r2,r2,128
 403090c:	10bfe004 	addi	r2,r2,-128
 4030910:	10800bd8 	cmpnei	r2,r2,47
 4030914:	1000031e 	bne	r2,zero,4030924 <alt_find_file+0x6c>
    {
      len -= 1;
 4030918:	e0bffe17 	ldw	r2,-8(fp)
 403091c:	10bfffc4 	addi	r2,r2,-1
 4030920:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4030924:	e0bffe17 	ldw	r2,-8(fp)
 4030928:	e0ffff17 	ldw	r3,-4(fp)
 403092c:	1885883a 	add	r2,r3,r2
 4030930:	10800003 	ldbu	r2,0(r2)
 4030934:	10803fcc 	andi	r2,r2,255
 4030938:	1080201c 	xori	r2,r2,128
 403093c:	10bfe004 	addi	r2,r2,-128
 4030940:	10800be0 	cmpeqi	r2,r2,47
 4030944:	1000081e 	bne	r2,zero,4030968 <alt_find_file+0xb0>
 4030948:	e0bffe17 	ldw	r2,-8(fp)
 403094c:	e0ffff17 	ldw	r3,-4(fp)
 4030950:	1885883a 	add	r2,r3,r2
 4030954:	10800003 	ldbu	r2,0(r2)
 4030958:	10803fcc 	andi	r2,r2,255
 403095c:	1080201c 	xori	r2,r2,128
 4030960:	10bfe004 	addi	r2,r2,-128
 4030964:	10000a1e 	bne	r2,zero,4030990 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 4030968:	e0bffd17 	ldw	r2,-12(fp)
 403096c:	10800217 	ldw	r2,8(r2)
 4030970:	e0fffe17 	ldw	r3,-8(fp)
 4030974:	180d883a 	mov	r6,r3
 4030978:	e17fff17 	ldw	r5,-4(fp)
 403097c:	1009883a 	mov	r4,r2
 4030980:	4030b400 	call	4030b40 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4030984:	1000021e 	bne	r2,zero,4030990 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 4030988:	e0bffd17 	ldw	r2,-12(fp)
 403098c:	00000706 	br	40309ac <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 4030990:	e0bffd17 	ldw	r2,-12(fp)
 4030994:	10800017 	ldw	r2,0(r2)
 4030998:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 403099c:	e0fffd17 	ldw	r3,-12(fp)
 40309a0:	d0a00604 	addi	r2,gp,-32744
 40309a4:	18bfcc1e 	bne	r3,r2,40308d8 <__alt_data_end+0xffff08d8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 40309a8:	0005883a 	mov	r2,zero
}
 40309ac:	e037883a 	mov	sp,fp
 40309b0:	dfc00117 	ldw	ra,4(sp)
 40309b4:	df000017 	ldw	fp,0(sp)
 40309b8:	dec00204 	addi	sp,sp,8
 40309bc:	f800283a 	ret

040309c0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 40309c0:	defffc04 	addi	sp,sp,-16
 40309c4:	df000315 	stw	fp,12(sp)
 40309c8:	df000304 	addi	fp,sp,12
 40309cc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 40309d0:	00bffa04 	movi	r2,-24
 40309d4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 40309d8:	e03ffd15 	stw	zero,-12(fp)
 40309dc:	00001906 	br	4030a44 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 40309e0:	008100f4 	movhi	r2,1027
 40309e4:	1087cf04 	addi	r2,r2,7996
 40309e8:	e0fffd17 	ldw	r3,-12(fp)
 40309ec:	18c00324 	muli	r3,r3,12
 40309f0:	10c5883a 	add	r2,r2,r3
 40309f4:	10800017 	ldw	r2,0(r2)
 40309f8:	10000f1e 	bne	r2,zero,4030a38 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 40309fc:	008100f4 	movhi	r2,1027
 4030a00:	1087cf04 	addi	r2,r2,7996
 4030a04:	e0fffd17 	ldw	r3,-12(fp)
 4030a08:	18c00324 	muli	r3,r3,12
 4030a0c:	10c5883a 	add	r2,r2,r3
 4030a10:	e0ffff17 	ldw	r3,-4(fp)
 4030a14:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 4030a18:	d0e00a17 	ldw	r3,-32728(gp)
 4030a1c:	e0bffd17 	ldw	r2,-12(fp)
 4030a20:	1880020e 	bge	r3,r2,4030a2c <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 4030a24:	e0bffd17 	ldw	r2,-12(fp)
 4030a28:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
 4030a2c:	e0bffd17 	ldw	r2,-12(fp)
 4030a30:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 4030a34:	00000606 	br	4030a50 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4030a38:	e0bffd17 	ldw	r2,-12(fp)
 4030a3c:	10800044 	addi	r2,r2,1
 4030a40:	e0bffd15 	stw	r2,-12(fp)
 4030a44:	e0bffd17 	ldw	r2,-12(fp)
 4030a48:	10800810 	cmplti	r2,r2,32
 4030a4c:	103fe41e 	bne	r2,zero,40309e0 <__alt_data_end+0xffff09e0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 4030a50:	e0bffe17 	ldw	r2,-8(fp)
}
 4030a54:	e037883a 	mov	sp,fp
 4030a58:	df000017 	ldw	fp,0(sp)
 4030a5c:	dec00104 	addi	sp,sp,4
 4030a60:	f800283a 	ret

04030a64 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 4030a64:	defffb04 	addi	sp,sp,-20
 4030a68:	df000415 	stw	fp,16(sp)
 4030a6c:	df000404 	addi	fp,sp,16
 4030a70:	e13ffe15 	stw	r4,-8(fp)
 4030a74:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 4030a78:	e0bfff17 	ldw	r2,-4(fp)
 4030a7c:	10840070 	cmpltui	r2,r2,4097
 4030a80:	1000021e 	bne	r2,zero,4030a8c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 4030a84:	00840004 	movi	r2,4096
 4030a88:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 4030a8c:	e0fffe17 	ldw	r3,-8(fp)
 4030a90:	e0bfff17 	ldw	r2,-4(fp)
 4030a94:	1885883a 	add	r2,r3,r2
 4030a98:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 4030a9c:	e0bffe17 	ldw	r2,-8(fp)
 4030aa0:	e0bffc15 	stw	r2,-16(fp)
 4030aa4:	00000506 	br	4030abc <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 4030aa8:	e0bffc17 	ldw	r2,-16(fp)
 4030aac:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 4030ab0:	e0bffc17 	ldw	r2,-16(fp)
 4030ab4:	10800804 	addi	r2,r2,32
 4030ab8:	e0bffc15 	stw	r2,-16(fp)
 4030abc:	e0fffc17 	ldw	r3,-16(fp)
 4030ac0:	e0bffd17 	ldw	r2,-12(fp)
 4030ac4:	18bff836 	bltu	r3,r2,4030aa8 <__alt_data_end+0xffff0aa8>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 4030ac8:	e0bffe17 	ldw	r2,-8(fp)
 4030acc:	108007cc 	andi	r2,r2,31
 4030ad0:	10000226 	beq	r2,zero,4030adc <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 4030ad4:	e0bffc17 	ldw	r2,-16(fp)
 4030ad8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 4030adc:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 4030ae0:	0001883a 	nop
 4030ae4:	e037883a 	mov	sp,fp
 4030ae8:	df000017 	ldw	fp,0(sp)
 4030aec:	dec00104 	addi	sp,sp,4
 4030af0:	f800283a 	ret

04030af4 <atexit>:
 4030af4:	200b883a 	mov	r5,r4
 4030af8:	000f883a 	mov	r7,zero
 4030afc:	000d883a 	mov	r6,zero
 4030b00:	0009883a 	mov	r4,zero
 4030b04:	4030bbc1 	jmpi	4030bbc <__register_exitproc>

04030b08 <exit>:
 4030b08:	defffe04 	addi	sp,sp,-8
 4030b0c:	000b883a 	mov	r5,zero
 4030b10:	dc000015 	stw	r16,0(sp)
 4030b14:	dfc00115 	stw	ra,4(sp)
 4030b18:	2021883a 	mov	r16,r4
 4030b1c:	4030cd40 	call	4030cd4 <__call_exitprocs>
 4030b20:	008100f4 	movhi	r2,1027
 4030b24:	108c7304 	addi	r2,r2,12748
 4030b28:	11000017 	ldw	r4,0(r2)
 4030b2c:	20800f17 	ldw	r2,60(r4)
 4030b30:	10000126 	beq	r2,zero,4030b38 <exit+0x30>
 4030b34:	103ee83a 	callr	r2
 4030b38:	8009883a 	mov	r4,r16
 4030b3c:	4030ec40 	call	4030ec4 <_exit>

04030b40 <memcmp>:
 4030b40:	01c000c4 	movi	r7,3
 4030b44:	3980192e 	bgeu	r7,r6,4030bac <memcmp+0x6c>
 4030b48:	2144b03a 	or	r2,r4,r5
 4030b4c:	11c4703a 	and	r2,r2,r7
 4030b50:	10000f26 	beq	r2,zero,4030b90 <memcmp+0x50>
 4030b54:	20800003 	ldbu	r2,0(r4)
 4030b58:	28c00003 	ldbu	r3,0(r5)
 4030b5c:	10c0151e 	bne	r2,r3,4030bb4 <memcmp+0x74>
 4030b60:	31bfff84 	addi	r6,r6,-2
 4030b64:	01ffffc4 	movi	r7,-1
 4030b68:	00000406 	br	4030b7c <memcmp+0x3c>
 4030b6c:	20800003 	ldbu	r2,0(r4)
 4030b70:	28c00003 	ldbu	r3,0(r5)
 4030b74:	31bfffc4 	addi	r6,r6,-1
 4030b78:	10c00e1e 	bne	r2,r3,4030bb4 <memcmp+0x74>
 4030b7c:	21000044 	addi	r4,r4,1
 4030b80:	29400044 	addi	r5,r5,1
 4030b84:	31fff91e 	bne	r6,r7,4030b6c <__alt_data_end+0xffff0b6c>
 4030b88:	0005883a 	mov	r2,zero
 4030b8c:	f800283a 	ret
 4030b90:	20c00017 	ldw	r3,0(r4)
 4030b94:	28800017 	ldw	r2,0(r5)
 4030b98:	18bfee1e 	bne	r3,r2,4030b54 <__alt_data_end+0xffff0b54>
 4030b9c:	31bfff04 	addi	r6,r6,-4
 4030ba0:	21000104 	addi	r4,r4,4
 4030ba4:	29400104 	addi	r5,r5,4
 4030ba8:	39bff936 	bltu	r7,r6,4030b90 <__alt_data_end+0xffff0b90>
 4030bac:	303fe91e 	bne	r6,zero,4030b54 <__alt_data_end+0xffff0b54>
 4030bb0:	003ff506 	br	4030b88 <__alt_data_end+0xffff0b88>
 4030bb4:	10c5c83a 	sub	r2,r2,r3
 4030bb8:	f800283a 	ret

04030bbc <__register_exitproc>:
 4030bbc:	defffa04 	addi	sp,sp,-24
 4030bc0:	dc000315 	stw	r16,12(sp)
 4030bc4:	040100f4 	movhi	r16,1027
 4030bc8:	840c7304 	addi	r16,r16,12748
 4030bcc:	80c00017 	ldw	r3,0(r16)
 4030bd0:	dc400415 	stw	r17,16(sp)
 4030bd4:	dfc00515 	stw	ra,20(sp)
 4030bd8:	18805217 	ldw	r2,328(r3)
 4030bdc:	2023883a 	mov	r17,r4
 4030be0:	10003726 	beq	r2,zero,4030cc0 <__register_exitproc+0x104>
 4030be4:	10c00117 	ldw	r3,4(r2)
 4030be8:	010007c4 	movi	r4,31
 4030bec:	20c00e16 	blt	r4,r3,4030c28 <__register_exitproc+0x6c>
 4030bf0:	1a000044 	addi	r8,r3,1
 4030bf4:	8800221e 	bne	r17,zero,4030c80 <__register_exitproc+0xc4>
 4030bf8:	18c00084 	addi	r3,r3,2
 4030bfc:	18c7883a 	add	r3,r3,r3
 4030c00:	18c7883a 	add	r3,r3,r3
 4030c04:	12000115 	stw	r8,4(r2)
 4030c08:	10c7883a 	add	r3,r2,r3
 4030c0c:	19400015 	stw	r5,0(r3)
 4030c10:	0005883a 	mov	r2,zero
 4030c14:	dfc00517 	ldw	ra,20(sp)
 4030c18:	dc400417 	ldw	r17,16(sp)
 4030c1c:	dc000317 	ldw	r16,12(sp)
 4030c20:	dec00604 	addi	sp,sp,24
 4030c24:	f800283a 	ret
 4030c28:	00800034 	movhi	r2,0
 4030c2c:	10800004 	addi	r2,r2,0
 4030c30:	10002626 	beq	r2,zero,4030ccc <__register_exitproc+0x110>
 4030c34:	01006404 	movi	r4,400
 4030c38:	d9400015 	stw	r5,0(sp)
 4030c3c:	d9800115 	stw	r6,4(sp)
 4030c40:	d9c00215 	stw	r7,8(sp)
 4030c44:	00000000 	call	0 <__alt_mem_sdram_controller_2>
 4030c48:	d9400017 	ldw	r5,0(sp)
 4030c4c:	d9800117 	ldw	r6,4(sp)
 4030c50:	d9c00217 	ldw	r7,8(sp)
 4030c54:	10001d26 	beq	r2,zero,4030ccc <__register_exitproc+0x110>
 4030c58:	81000017 	ldw	r4,0(r16)
 4030c5c:	10000115 	stw	zero,4(r2)
 4030c60:	02000044 	movi	r8,1
 4030c64:	22405217 	ldw	r9,328(r4)
 4030c68:	0007883a 	mov	r3,zero
 4030c6c:	12400015 	stw	r9,0(r2)
 4030c70:	20805215 	stw	r2,328(r4)
 4030c74:	10006215 	stw	zero,392(r2)
 4030c78:	10006315 	stw	zero,396(r2)
 4030c7c:	883fde26 	beq	r17,zero,4030bf8 <__alt_data_end+0xffff0bf8>
 4030c80:	18c9883a 	add	r4,r3,r3
 4030c84:	2109883a 	add	r4,r4,r4
 4030c88:	1109883a 	add	r4,r2,r4
 4030c8c:	21802215 	stw	r6,136(r4)
 4030c90:	01800044 	movi	r6,1
 4030c94:	12406217 	ldw	r9,392(r2)
 4030c98:	30cc983a 	sll	r6,r6,r3
 4030c9c:	4992b03a 	or	r9,r9,r6
 4030ca0:	12406215 	stw	r9,392(r2)
 4030ca4:	21c04215 	stw	r7,264(r4)
 4030ca8:	01000084 	movi	r4,2
 4030cac:	893fd21e 	bne	r17,r4,4030bf8 <__alt_data_end+0xffff0bf8>
 4030cb0:	11006317 	ldw	r4,396(r2)
 4030cb4:	218cb03a 	or	r6,r4,r6
 4030cb8:	11806315 	stw	r6,396(r2)
 4030cbc:	003fce06 	br	4030bf8 <__alt_data_end+0xffff0bf8>
 4030cc0:	18805304 	addi	r2,r3,332
 4030cc4:	18805215 	stw	r2,328(r3)
 4030cc8:	003fc606 	br	4030be4 <__alt_data_end+0xffff0be4>
 4030ccc:	00bfffc4 	movi	r2,-1
 4030cd0:	003fd006 	br	4030c14 <__alt_data_end+0xffff0c14>

04030cd4 <__call_exitprocs>:
 4030cd4:	defff504 	addi	sp,sp,-44
 4030cd8:	df000915 	stw	fp,36(sp)
 4030cdc:	dd400615 	stw	r21,24(sp)
 4030ce0:	dc800315 	stw	r18,12(sp)
 4030ce4:	dfc00a15 	stw	ra,40(sp)
 4030ce8:	ddc00815 	stw	r23,32(sp)
 4030cec:	dd800715 	stw	r22,28(sp)
 4030cf0:	dd000515 	stw	r20,20(sp)
 4030cf4:	dcc00415 	stw	r19,16(sp)
 4030cf8:	dc400215 	stw	r17,8(sp)
 4030cfc:	dc000115 	stw	r16,4(sp)
 4030d00:	d9000015 	stw	r4,0(sp)
 4030d04:	2839883a 	mov	fp,r5
 4030d08:	04800044 	movi	r18,1
 4030d0c:	057fffc4 	movi	r21,-1
 4030d10:	008100f4 	movhi	r2,1027
 4030d14:	108c7304 	addi	r2,r2,12748
 4030d18:	12000017 	ldw	r8,0(r2)
 4030d1c:	45005217 	ldw	r20,328(r8)
 4030d20:	44c05204 	addi	r19,r8,328
 4030d24:	a0001c26 	beq	r20,zero,4030d98 <__call_exitprocs+0xc4>
 4030d28:	a0800117 	ldw	r2,4(r20)
 4030d2c:	15ffffc4 	addi	r23,r2,-1
 4030d30:	b8000d16 	blt	r23,zero,4030d68 <__call_exitprocs+0x94>
 4030d34:	14000044 	addi	r16,r2,1
 4030d38:	8421883a 	add	r16,r16,r16
 4030d3c:	8421883a 	add	r16,r16,r16
 4030d40:	84402004 	addi	r17,r16,128
 4030d44:	a463883a 	add	r17,r20,r17
 4030d48:	a421883a 	add	r16,r20,r16
 4030d4c:	e0001e26 	beq	fp,zero,4030dc8 <__call_exitprocs+0xf4>
 4030d50:	80804017 	ldw	r2,256(r16)
 4030d54:	e0801c26 	beq	fp,r2,4030dc8 <__call_exitprocs+0xf4>
 4030d58:	bdffffc4 	addi	r23,r23,-1
 4030d5c:	843fff04 	addi	r16,r16,-4
 4030d60:	8c7fff04 	addi	r17,r17,-4
 4030d64:	bd7ff91e 	bne	r23,r21,4030d4c <__alt_data_end+0xffff0d4c>
 4030d68:	00800034 	movhi	r2,0
 4030d6c:	10800004 	addi	r2,r2,0
 4030d70:	10000926 	beq	r2,zero,4030d98 <__call_exitprocs+0xc4>
 4030d74:	a0800117 	ldw	r2,4(r20)
 4030d78:	1000301e 	bne	r2,zero,4030e3c <__call_exitprocs+0x168>
 4030d7c:	a0800017 	ldw	r2,0(r20)
 4030d80:	10003226 	beq	r2,zero,4030e4c <__call_exitprocs+0x178>
 4030d84:	a009883a 	mov	r4,r20
 4030d88:	98800015 	stw	r2,0(r19)
 4030d8c:	00000000 	call	0 <__alt_mem_sdram_controller_2>
 4030d90:	9d000017 	ldw	r20,0(r19)
 4030d94:	a03fe41e 	bne	r20,zero,4030d28 <__alt_data_end+0xffff0d28>
 4030d98:	dfc00a17 	ldw	ra,40(sp)
 4030d9c:	df000917 	ldw	fp,36(sp)
 4030da0:	ddc00817 	ldw	r23,32(sp)
 4030da4:	dd800717 	ldw	r22,28(sp)
 4030da8:	dd400617 	ldw	r21,24(sp)
 4030dac:	dd000517 	ldw	r20,20(sp)
 4030db0:	dcc00417 	ldw	r19,16(sp)
 4030db4:	dc800317 	ldw	r18,12(sp)
 4030db8:	dc400217 	ldw	r17,8(sp)
 4030dbc:	dc000117 	ldw	r16,4(sp)
 4030dc0:	dec00b04 	addi	sp,sp,44
 4030dc4:	f800283a 	ret
 4030dc8:	a0800117 	ldw	r2,4(r20)
 4030dcc:	80c00017 	ldw	r3,0(r16)
 4030dd0:	10bfffc4 	addi	r2,r2,-1
 4030dd4:	15c01426 	beq	r2,r23,4030e28 <__call_exitprocs+0x154>
 4030dd8:	80000015 	stw	zero,0(r16)
 4030ddc:	183fde26 	beq	r3,zero,4030d58 <__alt_data_end+0xffff0d58>
 4030de0:	95c8983a 	sll	r4,r18,r23
 4030de4:	a0806217 	ldw	r2,392(r20)
 4030de8:	a5800117 	ldw	r22,4(r20)
 4030dec:	2084703a 	and	r2,r4,r2
 4030df0:	10000b26 	beq	r2,zero,4030e20 <__call_exitprocs+0x14c>
 4030df4:	a0806317 	ldw	r2,396(r20)
 4030df8:	2088703a 	and	r4,r4,r2
 4030dfc:	20000c1e 	bne	r4,zero,4030e30 <__call_exitprocs+0x15c>
 4030e00:	89400017 	ldw	r5,0(r17)
 4030e04:	d9000017 	ldw	r4,0(sp)
 4030e08:	183ee83a 	callr	r3
 4030e0c:	a0800117 	ldw	r2,4(r20)
 4030e10:	15bfbf1e 	bne	r2,r22,4030d10 <__alt_data_end+0xffff0d10>
 4030e14:	98800017 	ldw	r2,0(r19)
 4030e18:	153fcf26 	beq	r2,r20,4030d58 <__alt_data_end+0xffff0d58>
 4030e1c:	003fbc06 	br	4030d10 <__alt_data_end+0xffff0d10>
 4030e20:	183ee83a 	callr	r3
 4030e24:	003ff906 	br	4030e0c <__alt_data_end+0xffff0e0c>
 4030e28:	a5c00115 	stw	r23,4(r20)
 4030e2c:	003feb06 	br	4030ddc <__alt_data_end+0xffff0ddc>
 4030e30:	89000017 	ldw	r4,0(r17)
 4030e34:	183ee83a 	callr	r3
 4030e38:	003ff406 	br	4030e0c <__alt_data_end+0xffff0e0c>
 4030e3c:	a0800017 	ldw	r2,0(r20)
 4030e40:	a027883a 	mov	r19,r20
 4030e44:	1029883a 	mov	r20,r2
 4030e48:	003fb606 	br	4030d24 <__alt_data_end+0xffff0d24>
 4030e4c:	0005883a 	mov	r2,zero
 4030e50:	003ffb06 	br	4030e40 <__alt_data_end+0xffff0e40>

04030e54 <__floatundidf>:
 4030e54:	defffc04 	addi	sp,sp,-16
 4030e58:	dc800215 	stw	r18,8(sp)
 4030e5c:	2025883a 	mov	r18,r4
 4030e60:	2809883a 	mov	r4,r5
 4030e64:	dfc00315 	stw	ra,12(sp)
 4030e68:	dc400115 	stw	r17,4(sp)
 4030e6c:	dc000015 	stw	r16,0(sp)
 4030e70:	402d3240 	call	402d324 <__floatunsidf>
 4030e74:	000d883a 	mov	r6,zero
 4030e78:	01d07c34 	movhi	r7,16880
 4030e7c:	180b883a 	mov	r5,r3
 4030e80:	1009883a 	mov	r4,r2
 4030e84:	402c1b40 	call	402c1b4 <__muldf3>
 4030e88:	9009883a 	mov	r4,r18
 4030e8c:	1023883a 	mov	r17,r2
 4030e90:	1821883a 	mov	r16,r3
 4030e94:	402d3240 	call	402d324 <__floatunsidf>
 4030e98:	880d883a 	mov	r6,r17
 4030e9c:	800f883a 	mov	r7,r16
 4030ea0:	1009883a 	mov	r4,r2
 4030ea4:	180b883a 	mov	r5,r3
 4030ea8:	402adc80 	call	402adc8 <__adddf3>
 4030eac:	dfc00317 	ldw	ra,12(sp)
 4030eb0:	dc800217 	ldw	r18,8(sp)
 4030eb4:	dc400117 	ldw	r17,4(sp)
 4030eb8:	dc000017 	ldw	r16,0(sp)
 4030ebc:	dec00404 	addi	sp,sp,16
 4030ec0:	f800283a 	ret

04030ec4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 4030ec4:	defffd04 	addi	sp,sp,-12
 4030ec8:	df000215 	stw	fp,8(sp)
 4030ecc:	df000204 	addi	fp,sp,8
 4030ed0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 4030ed4:	0001883a 	nop
 4030ed8:	e0bfff17 	ldw	r2,-4(fp)
 4030edc:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 4030ee0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 4030ee4:	10000226 	beq	r2,zero,4030ef0 <_exit+0x2c>
    ALT_SIM_FAIL();
 4030ee8:	002af070 	cmpltui	zero,zero,43969
 4030eec:	00000106 	br	4030ef4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 4030ef0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 4030ef4:	003fff06 	br	4030ef4 <__alt_data_end+0xffff0ef4>

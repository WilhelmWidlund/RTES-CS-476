
cpu_0_project.elf:     file format elf32-littlenios2
cpu_0_project.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04020244

Program Header:
    LOAD off    0x00001000 vaddr 0x04020000 paddr 0x04020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04020020 paddr 0x04020020 align 2**12
         filesz 0x00010640 memsz 0x00010640 flags r-x
    LOAD off    0x00011660 vaddr 0x04030660 paddr 0x04032248 align 2**12
         filesz 0x00001be8 memsz 0x00001be8 flags rw-
    LOAD off    0x00013e30 vaddr 0x04033e30 paddr 0x04033e30 align 2**12
         filesz 0x00000000 memsz 0x00000160 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04020000  04020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  04020020  04020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001006c  04020244  04020244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003b0  040302b0  040302b0  000112b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001be8  04030660  04032248  00011660  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000160  04033e30  04033e30  00013e30  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_controller_2 00000000  00000000  00000000  00013248  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  04033f90  04033f90  00013248  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00013248  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000f10  00000000  00000000  00013270  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00023ac0  00000000  00000000  00014180  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000093ae  00000000  00000000  00037c40  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b912  00000000  00000000  00040fee  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002458  00000000  00000000  0004c900  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003c0d  00000000  00000000  0004ed58  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00017751  00000000  00000000  00052965  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  0006a0b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001890  00000000  00000000  0006a118  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0006efa2  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  0006efa5  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0006efaa  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0006efab  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  0006efac  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  0006efb7  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  0006efc2  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000a  00000000  00000000  0006efcd  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000017  00000000  00000000  0006efd7  2**0
                  CONTENTS, READONLY
 27 .jdi          0000b01f  00000000  00000000  0006efee  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     000c18f3  00000000  00000000  0007a00d  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04020000 l    d  .entry	00000000 .entry
04020020 l    d  .exceptions	00000000 .exceptions
04020244 l    d  .text	00000000 .text
040302b0 l    d  .rodata	00000000 .rodata
04030660 l    d  .rwdata	00000000 .rwdata
04033e30 l    d  .bss	00000000 .bss
00000000 l    d  .sdram_controller_2	00000000 .sdram_controller_2
04033f90 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/RTES/lab3/sw/nios/cpu_0_project_bsp//obj/HAL/src/crt0.o
0402028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
0403032e l     O .rodata	00000010 zeroes.4404
04022680 l     F .text	000000bc __sbprintf
0403033e l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
04022890 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
040243c0 l     F .text	00000008 __fp_unlock
040243d4 l     F .text	0000019c __sinit.part.1
04024570 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
04030660 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
04030aa4 l     O .rwdata	00000020 lc_ctype_charset
04030a84 l     O .rwdata	00000020 lc_message_charset
04030ac4 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
04030370 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
04026e88 l     F .text	000000fc __sprint_r.part.0
040304a4 l     O .rodata	00000010 blanks.4348
04030494 l     O .rodata	00000010 zeroes.4349
04028414 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0402cc4c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0402cd58 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0402cd84 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0402ce70 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0402cf50 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0402d03c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0402d210 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
04032228 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0402d48c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0402d5c0 l     F .text	00000034 alt_dev_reg
0402d5f4 l     F .text	0000003c alt_get_errno
0402d630 l     F .text	00000068 alt_avalon_mutex_reg
040310ac l     O .rwdata	00001060 jtag_uart_0
0403210c l     O .rwdata	00000048 mailbox_simple_0
04032154 l     O .rwdata	00000010 mutex_0
04032164 l     O .rwdata	00000010 mutex_1
04032174 l     O .rwdata	0000002c Debug_PP
040321a0 l     O .rwdata	0000002c parallel_port_0
040321cc l     O .rwdata	0000002c parallel_port_2
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0402d9b4 l     F .text	0000020c altera_avalon_jtag_uart_irq
0402dbc0 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mailbox_simple.c
0402e1f8 l     F .text	00000090 altera_avalon_mailbox_identify
0402e288 l     F .text	00000078 altera_avalon_mailbox_post
0402e300 l     F .text	00000138 altera_avalon_mailbox_simple_tx_isr
0402e438 l     F .text	000000a8 altera_avalon_mailbox_simple_rx_isr
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
0402eb58 l     F .text	0000003c alt_get_errno
0402eb94 l     F .text	0000007c alt_mutex_trylock
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0402ee24 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0402f1e4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0402f6e8 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0402f828 l     F .text	0000003c alt_get_errno
0402f864 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
04033e64 g     O .bss	00000004 alt_instruction_exception_handler
04026998 g     F .text	00000074 _mprec_log10
0402e8cc g     F .text	00000150 altera_avalon_mailbox_send
04026a84 g     F .text	0000008c __any_on
04028e6c g     F .text	00000054 _isatty_r
0403037c g     O .rodata	00000028 __mprec_tinytens
0402d14c g     F .text	0000007c alt_main
04033e90 g     O .bss	00000100 alt_irq
04028ec0 g     F .text	00000060 _lseek_r
04032248 g       *ABS*	00000000 __flash_rwdata_start
0402b778 g     F .text	00000088 .hidden __eqdf2
04033f90 g       *ABS*	00000000 __alt_heap_start
04020430 g     F .text	0000003c printf
04029798 g     F .text	0000009c _wcrtomb_r
04026cb0 g     F .text	0000005c __sseek
04024710 g     F .text	00000010 __sinit
04029640 g     F .text	00000140 __swbuf_r
04024d1c g     F .text	0000007c _setlocale_r
04024578 g     F .text	00000068 __sfmoreglue
0402d1ec g     F .text	00000024 __malloc_unlock
04020290 g     F .text	00000038 part1
04028f20 g     F .text	0000015c memmove
040246f8 g     F .text	00000018 _cleanup
0402eccc g     F .text	00000040 altera_avalon_mutex_trylock
04025b14 g     F .text	000000a8 _Balloc
0402b800 g     F .text	000000dc .hidden __gtdf2
0402fc20 g     F .text	00000024 altera_nios2_gen2_irq_init
04020000 g     F .entry	0000001c __reset
0402ed60 g     F .text	00000074 altera_avalon_mutex_is_mine
04020020 g       *ABS*	00000000 __flash_exceptions_start
04028954 g     F .text	0000005c _fstat_r
04033e48 g     O .bss	00000004 errno
04026c2c g     F .text	00000008 __seofread
04033e50 g     O .bss	00000004 alt_argv
0403a1f8 g       *ABS*	00000000 _gp
0402ea1c g     F .text	0000013c altera_avalon_mailbox_retrieve_poll
0402d45c g     F .text	00000030 usleep
04030f2c g     O .rwdata	00000180 alt_fd_list
0402f384 g     F .text	00000090 alt_find_dev
040258a4 g     F .text	00000148 memcpy
040243c8 g     F .text	0000000c _cleanup_r
0402ca64 g     F .text	000000dc .hidden __floatsidf
0402f7ac g     F .text	0000007c alt_io_redirect
0402b8dc g     F .text	000000f4 .hidden __ltdf2
040302b0 g       *ABS*	00000000 __DTOR_END__
0402fe80 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0402e4e0 g     F .text	00000078 altera_avalon_mailbox_simple_init
04026b10 g     F .text	00000074 __fpclassifyd
040268f4 g     F .text	000000a4 __ratio
040283f8 g     F .text	0000001c __vfiprintf_internal
0402ddb8 g     F .text	0000021c altera_avalon_jtag_uart_read
04020400 g     F .text	00000030 _printf_r
04020000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0402a528 g     F .text	00000064 .hidden __udivsi3
0402ceac g     F .text	000000a4 isatty
040303cc g     O .rodata	000000c8 __mprec_tens
0402e854 g     F .text	00000078 altera_avalon_mailbox_status
0402e73c g     F .text	00000118 altera_avalon_mailbox_close
04024d98 g     F .text	0000000c __locale_charset
0402fdf0 g     F .text	00000090 alt_icache_flush
04033e44 g     O .bss	00000004 __malloc_top_pad
04032200 g     O .rwdata	00000004 __mb_cur_max
04024dc8 g     F .text	0000000c _localeconv_r
040289b0 g     F .text	000004bc __sfvwrite_r
04025f20 g     F .text	0000003c __i2b
04026b84 g     F .text	00000054 _sbrk_r
0402907c g     F .text	00000060 _read_r
04032220 g     O .rwdata	00000004 alt_max_fd
04028648 g     F .text	000000f0 _fclose_r
04024390 g     F .text	00000030 fflush
04033e40 g     O .bss	00000004 __malloc_max_sbrked_mem
0402a5e4 g     F .text	000008ac .hidden __adddf3
0402669c g     F .text	0000010c __b2d
04029ef8 g     F .text	00000538 .hidden __umoddi3
0402d078 g     F .text	000000d4 lseek
0402edd4 g     F .text	00000050 altera_avalon_mutex_first_lock
040321f8 g     O .rwdata	00000004 _global_impure_ptr
040290dc g     F .text	00000564 _realloc_r
04033f90 g       *ABS*	00000000 __bss_end
0402f5f8 g     F .text	000000f0 alt_iic_isr_register
0402fb18 g     F .text	00000108 alt_tick
04029980 g     F .text	00000578 .hidden __udivdi3
040288b0 g     F .text	00000024 _fputwc_r
040303a4 g     O .rodata	00000028 __mprec_bigtens
04025d04 g     F .text	00000104 __s2b
0402cb40 g     F .text	000000a8 .hidden __floatunsidf
040263dc g     F .text	00000060 __mcmp
04020390 g     F .text	00000028 increment
04024730 g     F .text	00000018 __fp_lock_all
0402f5ac g     F .text	0000004c alt_ic_irq_enabled
0402fa7c g     F .text	0000009c alt_alarm_stop
04033e58 g     O .bss	00000004 alt_irq_active
040200fc g     F .exceptions	000000d4 alt_irq_handler
04030f04 g     O .rwdata	00000028 alt_dev_null
0402ec10 g     F .text	00000054 altera_avalon_mutex_open
0402f19c g     F .text	00000048 alt_dcache_flush_all
04025e08 g     F .text	00000068 __hi0bits
0402c9e4 g     F .text	00000080 .hidden __fixdfsi
04032248 g       *ABS*	00000000 __ram_rwdata_end
04032218 g     O .rwdata	00000008 alt_dev_list
0402d4c8 g     F .text	000000f8 write
04032234 g     O .rwdata	00000008 alt_mutex_list
04030660 g       *ABS*	00000000 __ram_rodata_end
0402cdc0 g     F .text	000000b0 fstat
0402b8dc g     F .text	000000f4 .hidden __ledf2
04026154 g     F .text	00000140 __pow5mult
04026f9c g     F .text	0000145c ___vfiprintf_internal_r
04033e38 g     O .bss	00000004 __nlocale_changed
0402a58c g     F .text	00000058 .hidden __umodsi3
04033f90 g       *ABS*	00000000 end
0402d8f4 g     F .text	000000c0 altera_avalon_jtag_uart_init
040201d0 g     F .exceptions	00000074 alt_instruction_exception_entry
040302b0 g       *ABS*	00000000 __CTOR_LIST__
04040000 g       *ABS*	00000000 __alt_stack_pointer
0402ee9c g     F .text	0000007c alt_avalon_timer_sc_init
0402cbe8 g     F .text	00000064 .hidden __clzsi2
0402dfd4 g     F .text	00000224 altera_avalon_jtag_uart_write
04024720 g     F .text	00000004 __sfp_lock_acquire
040257c0 g     F .text	000000e4 memchr
0402046c g     F .text	000021f8 ___vfprintf_internal_r
04024884 g     F .text	00000310 _free_r
04024da4 g     F .text	00000010 __locale_mb_cur_max
040300fc g     F .text	00000180 __call_exitprocs
04033e34 g     O .bss	00000004 __mlocale_changed
04032204 g     O .rwdata	00000004 __malloc_sbrk_base
04020244 g     F .text	0000004c _start
04033e5c g     O .bss	00000004 _alt_tick_rate
04026294 g     F .text	00000148 __lshift
04033e60 g     O .bss	00000004 _alt_nticks
0402d24c g     F .text	000000fc read
0402d6d0 g     F .text	000000c0 alt_sys_init
0402ffe4 g     F .text	00000118 __register_exitproc
0402ed0c g     F .text	00000054 altera_avalon_mutex_unlock
04025f5c g     F .text	000001f8 __multiply
0402dc60 g     F .text	00000068 altera_avalon_jtag_uart_close
04030660 g       *ABS*	00000000 __ram_rwdata_start
040302b0 g       *ABS*	00000000 __ram_rodata_start
04033e68 g     O .bss	00000028 __malloc_current_mallinfo
040267a8 g     F .text	0000014c __d2b
0402d790 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0402fd4c g     F .text	000000a4 alt_get_fd
0402f044 g     F .text	00000158 alt_busy_sleep
04028530 g     F .text	00000054 _close_r
0402ff68 g     F .text	0000007c memcmp
0402d850 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
04033f90 g       *ABS*	00000000 __alt_stack_base
0402d8a0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0402273c g     F .text	00000154 __swsetup_r
0402ae90 g     F .text	000008e8 .hidden __divdf3
040245e0 g     F .text	00000118 __sfp
04026a0c g     F .text	00000078 __copybits
04030afc g     O .rwdata	00000408 __malloc_av_
0402472c g     F .text	00000004 __sinit_lock_release
0402b9d0 g     F .text	00000718 .hidden __muldf3
04026bd8 g     F .text	00000054 __sread
0402fc44 g     F .text	00000108 alt_find_file
0402f220 g     F .text	000000a4 alt_dev_llist_insert
0402d1c8 g     F .text	00000024 __malloc_lock
0402d3ac g     F .text	000000b0 sbrk
04024334 g     F .text	0000005c _fflush_r
04028584 g     F .text	000000c4 _calloc_r
04033e30 g       *ABS*	00000000 __bss_start
040259ec g     F .text	00000128 memset
040203b8 g     F .text	00000048 main
04033e54 g     O .bss	00000004 alt_envp
04033e3c g     O .bss	00000004 __malloc_max_total_mem
0402d7f0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
04029780 g     F .text	00000018 __swbuf
04026d0c g     F .text	00000008 __sclose
04040000 g       *ABS*	00000000 __alt_heap_limit
04028738 g     F .text	00000014 fclose
0402ec88 g     F .text	00000044 altera_avalon_mutex_lock
04022a90 g     F .text	00001688 _dtoa_r
04024fb4 g     F .text	0000080c _malloc_r
040298f4 g     F .text	00000030 __ascii_wctomb
04032224 g     O .rwdata	00000004 alt_errno
04024b94 g     F .text	000000c4 _fwalk
0402a430 g     F .text	00000084 .hidden __divsi3
04024760 g     F .text	00000124 _malloc_trim_r
040302b0 g       *ABS*	00000000 __CTOR_END__
04026d14 g     F .text	000000dc strcmp
040302b0 g       *ABS*	00000000 __flash_rodata_start
040302b0 g       *ABS*	00000000 __DTOR_LIST__
0402b778 g     F .text	00000088 .hidden __nedf2
0402d698 g     F .text	00000038 alt_irq_init
0402d348 g     F .text	00000064 alt_release_fd
040304b4 g     O .rodata	00000100 .hidden __clz_tab
04033e30 g     O .bss	00000004 _PathLocale
0402ff1c g     F .text	00000014 atexit
040284d0 g     F .text	00000060 _write_r
04024dd4 g     F .text	00000018 setlocale
040321fc g     O .rwdata	00000004 _impure_ptr
04033e4c g     O .bss	00000004 alt_argc
04024118 g     F .text	0000021c __sflush_r
0402f324 g     F .text	00000060 _do_dtors
04024dc0 g     F .text	00000008 __locale_cjk_lang
00000000 g       *ABS*	00000000 __alt_mem_sdram_controller_2
04020020 g       .exceptions	00000000 alt_irq_entry
04026638 g     F .text	00000064 __ulp
04024748 g     F .text	00000018 __fp_unlock_all
04032210 g     O .rwdata	00000008 alt_fs_list
04020020 g       *ABS*	00000000 __ram_exceptions_start
04024dec g     F .text	0000000c localeconv
0402f448 g     F .text	00000050 alt_ic_isr_register
04032248 g       *ABS*	00000000 _edata
04033f90 g       *ABS*	00000000 _end
0402874c g     F .text	00000164 __fputwc
04020244 g       *ABS*	00000000 __ram_exceptions_end
0402dcc8 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0402f520 g     F .text	0000008c alt_ic_irq_disable
0403222c g     O .rwdata	00000008 alt_mailbox_simple_list
04026c34 g     F .text	0000007c __swrite
04032208 g     O .rwdata	00000004 __malloc_trim_threshold
04024db4 g     F .text	0000000c __locale_msgcharset
0402ff30 g     F .text	00000038 exit
04024c58 g     F .text	000000c4 _fwalk_reent
0402643c g     F .text	000001fc __mdiff
0402a4b4 g     F .text	00000074 .hidden __modsi3
04040000 g       *ABS*	00000000 __alt_data_end
04020020 g     F .exceptions	00000000 alt_exception
04024724 g     F .text	00000004 __sfp_lock_release
0402e558 g     F .text	000001e4 altera_avalon_mailbox_open
0403027c g     F .text	00000034 _exit
0402ef18 g     F .text	0000012c alt_alarm_start
04024df8 g     F .text	000001bc __smakebuf_r
04026df0 g     F .text	00000098 strlen
0402f928 g     F .text	00000154 open
0402b800 g     F .text	000000dc .hidden __gedf2
0403220c g     O .rwdata	00000004 __wctomb
04026f84 g     F .text	00000018 __sprint_r
0402f414 g     F .text	00000034 alt_icache_flush_all
0403223c g     O .rwdata	00000004 alt_priority_mask
0402f498 g     F .text	00000088 alt_ic_irq_enable
04022664 g     F .text	0000001c __vfprintf_internal
0402ec64 g     F .text	00000024 altera_avalon_mutex_close
04029924 g     F .text	0000005c _wctomb_r
0402c0e8 g     F .text	000008fc .hidden __subdf3
04025e70 g     F .text	000000b0 __lo0bits
04032240 g     O .rwdata	00000008 alt_alarm_list
0402f2c4 g     F .text	00000060 _do_ctors
04029834 g     F .text	000000c0 wcrtomb
0402cc88 g     F .text	000000d0 close
040202c8 g     F .text	000000c8 pptest
0402cfb8 g     F .text	00000084 alt_load
040288d4 g     F .text	00000080 fputwc
04024728 g     F .text	00000004 __sinit_lock_acquire
04025be4 g     F .text	00000120 __multadd
04025bbc g     F .text	00000028 _Bfree



Disassembly of section .entry:

04020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 4020000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 4020004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 4020008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 402000c:	00bffd16 	blt	zero,r2,4020004 <__alt_data_end+0xfffe0004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4020010:	004100b4 	movhi	at,1026
    ori r1, r1, %lo(_start)
 4020014:	08409114 	ori	at,at,580
    jmp r1
 4020018:	0800683a 	jmp	at
 402001c:	00000000 	call	0 <__alt_mem_sdram_controller_2>

Disassembly of section .exceptions:

04020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4020020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4020024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4020028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 402002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4020030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4020034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4020038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 402003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4020040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4020044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4020048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 402004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4020050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4020054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4020058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 402005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4020060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4020064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4020068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 402006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4020070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4020074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4020078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 402007c:	10000326 	beq	r2,zero,402008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4020080:	20000226 	beq	r4,zero,402008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4020084:	40200fc0 	call	40200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4020088:	00000706 	br	40200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 402008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4020090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4020094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4020098:	40201d00 	call	40201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 402009c:	1000021e 	bne	r2,zero,40200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40200f8:	ef80083a 	eret

040200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40200fc:	defff904 	addi	sp,sp,-28
 4020100:	dfc00615 	stw	ra,24(sp)
 4020104:	df000515 	stw	fp,20(sp)
 4020108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 402010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4020110:	0005313a 	rdctl	r2,ipending
 4020114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4020118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 402011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4020120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4020124:	00800044 	movi	r2,1
 4020128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 402012c:	e0fffb17 	ldw	r3,-20(fp)
 4020130:	e0bffc17 	ldw	r2,-16(fp)
 4020134:	1884703a 	and	r2,r3,r2
 4020138:	10001426 	beq	r2,zero,402018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 402013c:	008100f4 	movhi	r2,1027
 4020140:	108fa404 	addi	r2,r2,16016
 4020144:	e0fffd17 	ldw	r3,-12(fp)
 4020148:	180690fa 	slli	r3,r3,3
 402014c:	10c5883a 	add	r2,r2,r3
 4020150:	10c00017 	ldw	r3,0(r2)
 4020154:	008100f4 	movhi	r2,1027
 4020158:	108fa404 	addi	r2,r2,16016
 402015c:	e13ffd17 	ldw	r4,-12(fp)
 4020160:	200890fa 	slli	r4,r4,3
 4020164:	1105883a 	add	r2,r2,r4
 4020168:	10800104 	addi	r2,r2,4
 402016c:	10800017 	ldw	r2,0(r2)
 4020170:	1009883a 	mov	r4,r2
 4020174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4020178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 402017c:	0005313a 	rdctl	r2,ipending
 4020180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4020184:	e0bfff17 	ldw	r2,-4(fp)
 4020188:	00000706 	br	40201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 402018c:	e0bffc17 	ldw	r2,-16(fp)
 4020190:	1085883a 	add	r2,r2,r2
 4020194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4020198:	e0bffd17 	ldw	r2,-12(fp)
 402019c:	10800044 	addi	r2,r2,1
 40201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40201a4:	003fe106 	br	402012c <__alt_data_end+0xfffe012c>

    active = alt_irq_pending ();
 40201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 40201ac:	e0bffb17 	ldw	r2,-20(fp)
 40201b0:	103fdb1e 	bne	r2,zero,4020120 <__alt_data_end+0xfffe0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40201b4:	0001883a 	nop
}
 40201b8:	0001883a 	nop
 40201bc:	e037883a 	mov	sp,fp
 40201c0:	dfc00117 	ldw	ra,4(sp)
 40201c4:	df000017 	ldw	fp,0(sp)
 40201c8:	dec00204 	addi	sp,sp,8
 40201cc:	f800283a 	ret

040201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 40201d0:	defffb04 	addi	sp,sp,-20
 40201d4:	dfc00415 	stw	ra,16(sp)
 40201d8:	df000315 	stw	fp,12(sp)
 40201dc:	df000304 	addi	fp,sp,12
 40201e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 40201e4:	000531fa 	rdctl	r2,exception
 40201e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 40201ec:	e0bffd17 	ldw	r2,-12(fp)
 40201f0:	10801f0c 	andi	r2,r2,124
 40201f4:	1004d0ba 	srli	r2,r2,2
 40201f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 40201fc:	0005333a 	rdctl	r2,badaddr
 4020200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 4020204:	d0a71b17 	ldw	r2,-25492(gp)
 4020208:	10000726 	beq	r2,zero,4020228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 402020c:	d0a71b17 	ldw	r2,-25492(gp)
 4020210:	e0fffd17 	ldw	r3,-12(fp)
 4020214:	e1bffe17 	ldw	r6,-8(fp)
 4020218:	e17fff17 	ldw	r5,-4(fp)
 402021c:	1809883a 	mov	r4,r3
 4020220:	103ee83a 	callr	r2
 4020224:	00000206 	br	4020230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4020228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 402022c:	0005883a 	mov	r2,zero
}
 4020230:	e037883a 	mov	sp,fp
 4020234:	dfc00117 	ldw	ra,4(sp)
 4020238:	df000017 	ldw	fp,0(sp)
 402023c:	dec00204 	addi	sp,sp,8
 4020240:	f800283a 	ret

Disassembly of section .text:

04020244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 4020244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 4020248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 402024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 4020250:	00bffd16 	blt	zero,r2,4020248 <__alt_data_end+0xfffe0248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4020254:	06c10134 	movhi	sp,1028
    ori sp, sp, %lo(__alt_stack_pointer)
 4020258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 402025c:	068100f4 	movhi	gp,1027
    ori gp, gp, %lo(_gp)
 4020260:	d6a87e14 	ori	gp,gp,41464
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4020264:	008100f4 	movhi	r2,1027
    ori r2, r2, %lo(__bss_start)
 4020268:	108f8c14 	ori	r2,r2,15920

    movhi r3, %hi(__bss_end)
 402026c:	00c100f4 	movhi	r3,1027
    ori r3, r3, %lo(__bss_end)
 4020270:	18cfe414 	ori	r3,r3,16272

    beq r2, r3, 1f
 4020274:	10c00326 	beq	r2,r3,4020284 <_start+0x40>

0:
    stw zero, (r2)
 4020278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 402027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 4020280:	10fffd36 	bltu	r2,r3,4020278 <__alt_data_end+0xfffe0278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4020284:	402cfb80 	call	402cfb8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4020288:	402d14c0 	call	402d14c <alt_main>

0402028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 402028c:	003fff06 	br	402028c <__alt_data_end+0xfffe028c>

04020290 <part1>:
#define CustomCounterStatus	20
#define CustomCounterTarget 24
#define CustomCounterIncrVal 28

void part1()
{
 4020290:	defffe04 	addi	sp,sp,-8
 4020294:	dfc00115 	stw	ra,4(sp)
 4020298:	df000015 	stw	fp,0(sp)
 402029c:	d839883a 	mov	fp,sp
	printf("Hello from the multicore system, this is CPU %d talking! \n", ALT_CPU_CPU_ID_VALUE);
 40202a0:	000b883a 	mov	r5,zero
 40202a4:	010100f4 	movhi	r4,1027
 40202a8:	2100ac04 	addi	r4,r4,688
 40202ac:	40204300 	call	4020430 <printf>
}
 40202b0:	0001883a 	nop
 40202b4:	e037883a 	mov	sp,fp
 40202b8:	dfc00117 	ldw	ra,4(sp)
 40202bc:	df000017 	ldw	fp,0(sp)
 40202c0:	dec00204 	addi	sp,sp,8
 40202c4:	f800283a 	ret

040202c8 <pptest>:
 *--------------------------------- THIS IS CPU 0 ---------------------------------------------
 */

// Access parallel port 0 connected to LEDs 3, 2 & 1 and increment counter 0 every mscound milliseconds
void pptest(int msdelay, uint32_t iterations)
{
 40202c8:	defffa04 	addi	sp,sp,-24
 40202cc:	dfc00515 	stw	ra,20(sp)
 40202d0:	df000415 	stw	fp,16(sp)
 40202d4:	df000404 	addi	fp,sp,16
 40202d8:	e13ffe15 	stw	r4,-8(fp)
 40202dc:	e17fff15 	stw	r5,-4(fp)
	uint32_t itercount = 0x00;
 40202e0:	e03ffc15 	stw	zero,-16(fp)
	uint8_t curr_lamp = 0x00;
 40202e4:	e03ffd05 	stb	zero,-12(fp)
	// Reset custom counter
	IOWR_32DIRECT(CUSTOM_COUNTER_0_BASE, CustomCounterReset, ArbVal);
 40202e8:	00ffffc4 	movi	r3,-1
 40202ec:	00810134 	movhi	r2,1028
 40202f0:	10841904 	addi	r2,r2,4196
 40202f4:	10c00035 	stwio	r3,0(r2)
	// Set target
	IOWR_32DIRECT(CUSTOM_COUNTER_0_BASE, CustomCounterTarget, iterations);
 40202f8:	e0ffff17 	ldw	r3,-4(fp)
 40202fc:	00810134 	movhi	r2,1028
 4020300:	10841e04 	addi	r2,r2,4216
 4020304:	10c00035 	stwio	r3,0(r2)

	while(itercount < iterations)
 4020308:	00001806 	br	402036c <pptest+0xa4>
	{
		// Access parallel port to toggle LED
		IOWR_8DIRECT(PARALLEL_PORT_0_BASE, 0, curr_lamp);
 402030c:	e0fffd03 	ldbu	r3,-12(fp)
 4020310:	00810134 	movhi	r2,1028
 4020314:	10842c04 	addi	r2,r2,4272
 4020318:	10c00025 	stbio	r3,0(r2)
		// Increment counter
		IOWR_32DIRECT(CUSTOM_COUNTER_0_BASE, CustomCounterIncrVal, 0x01);
 402031c:	00c00044 	movi	r3,1
 4020320:	00810134 	movhi	r2,1028
 4020324:	10841f04 	addi	r2,r2,4220
 4020328:	10c00035 	stwio	r3,0(r2)
		// Make sure to toggle LEDs correctly for 3 available
		if(curr_lamp < 0x07)
 402032c:	e0bffd03 	ldbu	r2,-12(fp)
 4020330:	108001e8 	cmpgeui	r2,r2,7
 4020334:	1000041e 	bne	r2,zero,4020348 <pptest+0x80>
		{
			curr_lamp = curr_lamp + 0x01;
 4020338:	e0bffd03 	ldbu	r2,-12(fp)
 402033c:	10800044 	addi	r2,r2,1
 4020340:	e0bffd05 	stb	r2,-12(fp)
 4020344:	00000106 	br	402034c <pptest+0x84>
		}
		else
		{
			curr_lamp = 0x00;
 4020348:	e03ffd05 	stb	zero,-12(fp)
		}
		// Wait msdelay ms
		usleep(1000 * msdelay);
 402034c:	e0bffe17 	ldw	r2,-8(fp)
 4020350:	1080fa24 	muli	r2,r2,1000
 4020354:	1009883a 	mov	r4,r2
 4020358:	402d45c0 	call	402d45c <usleep>
		// Get count value
		itercount = IORD_32DIRECT(CUSTOM_COUNTER_0_BASE, CustomCounterValue);
 402035c:	00810134 	movhi	r2,1028
 4020360:	10841804 	addi	r2,r2,4192
 4020364:	10800037 	ldwio	r2,0(r2)
 4020368:	e0bffc15 	stw	r2,-16(fp)
	// Reset custom counter
	IOWR_32DIRECT(CUSTOM_COUNTER_0_BASE, CustomCounterReset, ArbVal);
	// Set target
	IOWR_32DIRECT(CUSTOM_COUNTER_0_BASE, CustomCounterTarget, iterations);

	while(itercount < iterations)
 402036c:	e0fffc17 	ldw	r3,-16(fp)
 4020370:	e0bfff17 	ldw	r2,-4(fp)
 4020374:	18bfe536 	bltu	r3,r2,402030c <__alt_data_end+0xfffe030c>
		// Wait msdelay ms
		usleep(1000 * msdelay);
		// Get count value
		itercount = IORD_32DIRECT(CUSTOM_COUNTER_0_BASE, CustomCounterValue);
	}
}
 4020378:	0001883a 	nop
 402037c:	e037883a 	mov	sp,fp
 4020380:	dfc00117 	ldw	ra,4(sp)
 4020384:	df000017 	ldw	fp,0(sp)
 4020388:	dec00204 	addi	sp,sp,8
 402038c:	f800283a 	ret

04020390 <increment>:

void increment(uint32_t address, int incval)
{
 4020390:	defffd04 	addi	sp,sp,-12
 4020394:	df000215 	stw	fp,8(sp)
 4020398:	df000204 	addi	fp,sp,8
 402039c:	e13ffe15 	stw	r4,-8(fp)
 40203a0:	e17fff15 	stw	r5,-4(fp)

}
 40203a4:	0001883a 	nop
 40203a8:	e037883a 	mov	sp,fp
 40203ac:	df000017 	ldw	fp,0(sp)
 40203b0:	dec00104 	addi	sp,sp,4
 40203b4:	f800283a 	ret

040203b8 <main>:


int main()
{
 40203b8:	defffc04 	addi	sp,sp,-16
 40203bc:	dfc00315 	stw	ra,12(sp)
 40203c0:	df000215 	stw	fp,8(sp)
 40203c4:	df000204 	addi	fp,sp,8
	// Manipulation 1
	part1();
 40203c8:	40202900 	call	4020290 <part1>
	// 3.1 Parallel port test, 100 iterations, 50 ms each
	uint32_t iters = 0x64;
 40203cc:	00801904 	movi	r2,100
 40203d0:	e0bffe15 	stw	r2,-8(fp)
	int delaytime = 50;
 40203d4:	00800c84 	movi	r2,50
 40203d8:	e0bfff15 	stw	r2,-4(fp)
	pptest(delaytime, iters);
 40203dc:	e17ffe17 	ldw	r5,-8(fp)
 40203e0:	e13fff17 	ldw	r4,-4(fp)
 40203e4:	40202c80 	call	40202c8 <pptest>

  return 0;
 40203e8:	0005883a 	mov	r2,zero
}
 40203ec:	e037883a 	mov	sp,fp
 40203f0:	dfc00117 	ldw	ra,4(sp)
 40203f4:	df000017 	ldw	fp,0(sp)
 40203f8:	dec00204 	addi	sp,sp,8
 40203fc:	f800283a 	ret

04020400 <_printf_r>:
 4020400:	defffd04 	addi	sp,sp,-12
 4020404:	2805883a 	mov	r2,r5
 4020408:	dfc00015 	stw	ra,0(sp)
 402040c:	d9800115 	stw	r6,4(sp)
 4020410:	d9c00215 	stw	r7,8(sp)
 4020414:	21400217 	ldw	r5,8(r4)
 4020418:	d9c00104 	addi	r7,sp,4
 402041c:	100d883a 	mov	r6,r2
 4020420:	402046c0 	call	402046c <___vfprintf_internal_r>
 4020424:	dfc00017 	ldw	ra,0(sp)
 4020428:	dec00304 	addi	sp,sp,12
 402042c:	f800283a 	ret

04020430 <printf>:
 4020430:	defffc04 	addi	sp,sp,-16
 4020434:	dfc00015 	stw	ra,0(sp)
 4020438:	d9400115 	stw	r5,4(sp)
 402043c:	d9800215 	stw	r6,8(sp)
 4020440:	d9c00315 	stw	r7,12(sp)
 4020444:	008100f4 	movhi	r2,1027
 4020448:	10887f04 	addi	r2,r2,8700
 402044c:	10800017 	ldw	r2,0(r2)
 4020450:	200b883a 	mov	r5,r4
 4020454:	d9800104 	addi	r6,sp,4
 4020458:	11000217 	ldw	r4,8(r2)
 402045c:	40226640 	call	4022664 <__vfprintf_internal>
 4020460:	dfc00017 	ldw	ra,0(sp)
 4020464:	dec00404 	addi	sp,sp,16
 4020468:	f800283a 	ret

0402046c <___vfprintf_internal_r>:
 402046c:	deffb804 	addi	sp,sp,-288
 4020470:	dfc04715 	stw	ra,284(sp)
 4020474:	ddc04515 	stw	r23,276(sp)
 4020478:	dd404315 	stw	r21,268(sp)
 402047c:	d9002c15 	stw	r4,176(sp)
 4020480:	282f883a 	mov	r23,r5
 4020484:	302b883a 	mov	r21,r6
 4020488:	d9c02d15 	stw	r7,180(sp)
 402048c:	df004615 	stw	fp,280(sp)
 4020490:	dd804415 	stw	r22,272(sp)
 4020494:	dd004215 	stw	r20,264(sp)
 4020498:	dcc04115 	stw	r19,260(sp)
 402049c:	dc804015 	stw	r18,256(sp)
 40204a0:	dc403f15 	stw	r17,252(sp)
 40204a4:	dc003e15 	stw	r16,248(sp)
 40204a8:	4024dc80 	call	4024dc8 <_localeconv_r>
 40204ac:	10800017 	ldw	r2,0(r2)
 40204b0:	1009883a 	mov	r4,r2
 40204b4:	d8803415 	stw	r2,208(sp)
 40204b8:	4026df00 	call	4026df0 <strlen>
 40204bc:	d8803715 	stw	r2,220(sp)
 40204c0:	d8802c17 	ldw	r2,176(sp)
 40204c4:	10000226 	beq	r2,zero,40204d0 <___vfprintf_internal_r+0x64>
 40204c8:	10800e17 	ldw	r2,56(r2)
 40204cc:	1000f926 	beq	r2,zero,40208b4 <___vfprintf_internal_r+0x448>
 40204d0:	b880030b 	ldhu	r2,12(r23)
 40204d4:	10c8000c 	andi	r3,r2,8192
 40204d8:	1800061e 	bne	r3,zero,40204f4 <___vfprintf_internal_r+0x88>
 40204dc:	b9001917 	ldw	r4,100(r23)
 40204e0:	00f7ffc4 	movi	r3,-8193
 40204e4:	10880014 	ori	r2,r2,8192
 40204e8:	20c6703a 	and	r3,r4,r3
 40204ec:	b880030d 	sth	r2,12(r23)
 40204f0:	b8c01915 	stw	r3,100(r23)
 40204f4:	10c0020c 	andi	r3,r2,8
 40204f8:	1800c126 	beq	r3,zero,4020800 <___vfprintf_internal_r+0x394>
 40204fc:	b8c00417 	ldw	r3,16(r23)
 4020500:	1800bf26 	beq	r3,zero,4020800 <___vfprintf_internal_r+0x394>
 4020504:	1080068c 	andi	r2,r2,26
 4020508:	00c00284 	movi	r3,10
 402050c:	10c0c426 	beq	r2,r3,4020820 <___vfprintf_internal_r+0x3b4>
 4020510:	d8c00404 	addi	r3,sp,16
 4020514:	050100f4 	movhi	r20,1027
 4020518:	d9001e04 	addi	r4,sp,120
 402051c:	a500cb84 	addi	r20,r20,814
 4020520:	d8c01e15 	stw	r3,120(sp)
 4020524:	d8002015 	stw	zero,128(sp)
 4020528:	d8001f15 	stw	zero,124(sp)
 402052c:	d8003315 	stw	zero,204(sp)
 4020530:	d8003615 	stw	zero,216(sp)
 4020534:	d8003815 	stw	zero,224(sp)
 4020538:	1811883a 	mov	r8,r3
 402053c:	d8003915 	stw	zero,228(sp)
 4020540:	d8003a15 	stw	zero,232(sp)
 4020544:	d8002f15 	stw	zero,188(sp)
 4020548:	d9002815 	stw	r4,160(sp)
 402054c:	a8800007 	ldb	r2,0(r21)
 4020550:	10027b26 	beq	r2,zero,4020f40 <___vfprintf_internal_r+0xad4>
 4020554:	00c00944 	movi	r3,37
 4020558:	a821883a 	mov	r16,r21
 402055c:	10c0021e 	bne	r2,r3,4020568 <___vfprintf_internal_r+0xfc>
 4020560:	00001406 	br	40205b4 <___vfprintf_internal_r+0x148>
 4020564:	10c00326 	beq	r2,r3,4020574 <___vfprintf_internal_r+0x108>
 4020568:	84000044 	addi	r16,r16,1
 402056c:	80800007 	ldb	r2,0(r16)
 4020570:	103ffc1e 	bne	r2,zero,4020564 <__alt_data_end+0xfffe0564>
 4020574:	8563c83a 	sub	r17,r16,r21
 4020578:	88000e26 	beq	r17,zero,40205b4 <___vfprintf_internal_r+0x148>
 402057c:	d8c02017 	ldw	r3,128(sp)
 4020580:	d8801f17 	ldw	r2,124(sp)
 4020584:	45400015 	stw	r21,0(r8)
 4020588:	1c47883a 	add	r3,r3,r17
 402058c:	10800044 	addi	r2,r2,1
 4020590:	d8c02015 	stw	r3,128(sp)
 4020594:	44400115 	stw	r17,4(r8)
 4020598:	d8801f15 	stw	r2,124(sp)
 402059c:	00c001c4 	movi	r3,7
 40205a0:	1880a716 	blt	r3,r2,4020840 <___vfprintf_internal_r+0x3d4>
 40205a4:	42000204 	addi	r8,r8,8
 40205a8:	d9402f17 	ldw	r5,188(sp)
 40205ac:	2c4b883a 	add	r5,r5,r17
 40205b0:	d9402f15 	stw	r5,188(sp)
 40205b4:	80800007 	ldb	r2,0(r16)
 40205b8:	1000a826 	beq	r2,zero,402085c <___vfprintf_internal_r+0x3f0>
 40205bc:	84400047 	ldb	r17,1(r16)
 40205c0:	00bfffc4 	movi	r2,-1
 40205c4:	85400044 	addi	r21,r16,1
 40205c8:	d8002785 	stb	zero,158(sp)
 40205cc:	0007883a 	mov	r3,zero
 40205d0:	000f883a 	mov	r7,zero
 40205d4:	d8802915 	stw	r2,164(sp)
 40205d8:	d8003115 	stw	zero,196(sp)
 40205dc:	0025883a 	mov	r18,zero
 40205e0:	01401604 	movi	r5,88
 40205e4:	01800244 	movi	r6,9
 40205e8:	02800a84 	movi	r10,42
 40205ec:	02401b04 	movi	r9,108
 40205f0:	ad400044 	addi	r21,r21,1
 40205f4:	88bff804 	addi	r2,r17,-32
 40205f8:	28830436 	bltu	r5,r2,402120c <___vfprintf_internal_r+0xda0>
 40205fc:	100490ba 	slli	r2,r2,2
 4020600:	010100b4 	movhi	r4,1026
 4020604:	21018504 	addi	r4,r4,1556
 4020608:	1105883a 	add	r2,r2,r4
 402060c:	10800017 	ldw	r2,0(r2)
 4020610:	1000683a 	jmp	r2
 4020614:	0402112c 	andhi	r16,zero,2116
 4020618:	0402120c 	andi	r16,zero,2120
 402061c:	0402120c 	andi	r16,zero,2120
 4020620:	0402114c 	andi	r16,zero,2117
 4020624:	0402120c 	andi	r16,zero,2120
 4020628:	0402120c 	andi	r16,zero,2120
 402062c:	0402120c 	andi	r16,zero,2120
 4020630:	0402120c 	andi	r16,zero,2120
 4020634:	0402120c 	andi	r16,zero,2120
 4020638:	0402120c 	andi	r16,zero,2120
 402063c:	040208c0 	call	40208c <__alt_mem_sdram_controller_2+0x40208c>
 4020640:	04021068 	cmpgeui	r16,zero,2113
 4020644:	0402120c 	andi	r16,zero,2120
 4020648:	04020788 	cmpgei	r16,zero,2078
 402064c:	040208e8 	cmpgeui	r16,zero,2083
 4020650:	0402120c 	andi	r16,zero,2120
 4020654:	04020928 	cmpgeui	r16,zero,2084
 4020658:	04020934 	movhi	r16,2084
 402065c:	04020934 	movhi	r16,2084
 4020660:	04020934 	movhi	r16,2084
 4020664:	04020934 	movhi	r16,2084
 4020668:	04020934 	movhi	r16,2084
 402066c:	04020934 	movhi	r16,2084
 4020670:	04020934 	movhi	r16,2084
 4020674:	04020934 	movhi	r16,2084
 4020678:	04020934 	movhi	r16,2084
 402067c:	0402120c 	andi	r16,zero,2120
 4020680:	0402120c 	andi	r16,zero,2120
 4020684:	0402120c 	andi	r16,zero,2120
 4020688:	0402120c 	andi	r16,zero,2120
 402068c:	0402120c 	andi	r16,zero,2120
 4020690:	0402120c 	andi	r16,zero,2120
 4020694:	0402120c 	andi	r16,zero,2120
 4020698:	0402120c 	andi	r16,zero,2120
 402069c:	0402120c 	andi	r16,zero,2120
 40206a0:	0402120c 	andi	r16,zero,2120
 40206a4:	04020968 	cmpgeui	r16,zero,2085
 40206a8:	04020a24 	muli	r16,zero,2088
 40206ac:	0402120c 	andi	r16,zero,2120
 40206b0:	04020a24 	muli	r16,zero,2088
 40206b4:	0402120c 	andi	r16,zero,2120
 40206b8:	0402120c 	andi	r16,zero,2120
 40206bc:	0402120c 	andi	r16,zero,2120
 40206c0:	0402120c 	andi	r16,zero,2120
 40206c4:	04020ac4 	movi	r16,2091
 40206c8:	0402120c 	andi	r16,zero,2120
 40206cc:	0402120c 	andi	r16,zero,2120
 40206d0:	04020ad0 	cmplti	r16,zero,2091
 40206d4:	0402120c 	andi	r16,zero,2120
 40206d8:	0402120c 	andi	r16,zero,2120
 40206dc:	0402120c 	andi	r16,zero,2120
 40206e0:	0402120c 	andi	r16,zero,2120
 40206e4:	0402120c 	andi	r16,zero,2120
 40206e8:	04020f48 	cmpgei	r16,zero,2109
 40206ec:	0402120c 	andi	r16,zero,2120
 40206f0:	0402120c 	andi	r16,zero,2120
 40206f4:	04020fa8 	cmpgeui	r16,zero,2110
 40206f8:	0402120c 	andi	r16,zero,2120
 40206fc:	0402120c 	andi	r16,zero,2120
 4020700:	0402120c 	andi	r16,zero,2120
 4020704:	0402120c 	andi	r16,zero,2120
 4020708:	0402120c 	andi	r16,zero,2120
 402070c:	0402120c 	andi	r16,zero,2120
 4020710:	0402120c 	andi	r16,zero,2120
 4020714:	0402120c 	andi	r16,zero,2120
 4020718:	0402120c 	andi	r16,zero,2120
 402071c:	0402120c 	andi	r16,zero,2120
 4020720:	040211b8 	rdprs	r16,zero,2118
 4020724:	04021158 	cmpnei	r16,zero,2117
 4020728:	04020a24 	muli	r16,zero,2088
 402072c:	04020a24 	muli	r16,zero,2088
 4020730:	04020a24 	muli	r16,zero,2088
 4020734:	04021168 	cmpgeui	r16,zero,2117
 4020738:	04021158 	cmpnei	r16,zero,2117
 402073c:	0402120c 	andi	r16,zero,2120
 4020740:	0402120c 	andi	r16,zero,2120
 4020744:	04021174 	movhi	r16,2117
 4020748:	0402120c 	andi	r16,zero,2120
 402074c:	04021184 	movi	r16,2118
 4020750:	04021058 	cmpnei	r16,zero,2113
 4020754:	04020794 	movui	r16,2078
 4020758:	04021078 	rdprs	r16,zero,2113
 402075c:	0402120c 	andi	r16,zero,2120
 4020760:	04021084 	movi	r16,2114
 4020764:	0402120c 	andi	r16,zero,2120
 4020768:	040210e0 	cmpeqi	r16,zero,2115
 402076c:	0402120c 	andi	r16,zero,2120
 4020770:	0402120c 	andi	r16,zero,2120
 4020774:	040210f0 	cmpltui	r16,zero,2115
 4020778:	d9003117 	ldw	r4,196(sp)
 402077c:	d8802d15 	stw	r2,180(sp)
 4020780:	0109c83a 	sub	r4,zero,r4
 4020784:	d9003115 	stw	r4,196(sp)
 4020788:	94800114 	ori	r18,r18,4
 402078c:	ac400007 	ldb	r17,0(r21)
 4020790:	003f9706 	br	40205f0 <__alt_data_end+0xfffe05f0>
 4020794:	00800c04 	movi	r2,48
 4020798:	d9002d17 	ldw	r4,180(sp)
 402079c:	d9402917 	ldw	r5,164(sp)
 40207a0:	d8802705 	stb	r2,156(sp)
 40207a4:	00801e04 	movi	r2,120
 40207a8:	d8802745 	stb	r2,157(sp)
 40207ac:	d8002785 	stb	zero,158(sp)
 40207b0:	20c00104 	addi	r3,r4,4
 40207b4:	24c00017 	ldw	r19,0(r4)
 40207b8:	002d883a 	mov	r22,zero
 40207bc:	90800094 	ori	r2,r18,2
 40207c0:	28029a16 	blt	r5,zero,402122c <___vfprintf_internal_r+0xdc0>
 40207c4:	00bfdfc4 	movi	r2,-129
 40207c8:	90a4703a 	and	r18,r18,r2
 40207cc:	d8c02d15 	stw	r3,180(sp)
 40207d0:	94800094 	ori	r18,r18,2
 40207d4:	9802871e 	bne	r19,zero,40211f4 <___vfprintf_internal_r+0xd88>
 40207d8:	008100f4 	movhi	r2,1027
 40207dc:	1080c404 	addi	r2,r2,784
 40207e0:	d8803915 	stw	r2,228(sp)
 40207e4:	04401e04 	movi	r17,120
 40207e8:	d8802917 	ldw	r2,164(sp)
 40207ec:	0039883a 	mov	fp,zero
 40207f0:	1001e926 	beq	r2,zero,4020f98 <___vfprintf_internal_r+0xb2c>
 40207f4:	0027883a 	mov	r19,zero
 40207f8:	002d883a 	mov	r22,zero
 40207fc:	00020506 	br	4021014 <___vfprintf_internal_r+0xba8>
 4020800:	d9002c17 	ldw	r4,176(sp)
 4020804:	b80b883a 	mov	r5,r23
 4020808:	402273c0 	call	402273c <__swsetup_r>
 402080c:	1005ac1e 	bne	r2,zero,4021ec0 <___vfprintf_internal_r+0x1a54>
 4020810:	b880030b 	ldhu	r2,12(r23)
 4020814:	00c00284 	movi	r3,10
 4020818:	1080068c 	andi	r2,r2,26
 402081c:	10ff3c1e 	bne	r2,r3,4020510 <__alt_data_end+0xfffe0510>
 4020820:	b880038f 	ldh	r2,14(r23)
 4020824:	103f3a16 	blt	r2,zero,4020510 <__alt_data_end+0xfffe0510>
 4020828:	d9c02d17 	ldw	r7,180(sp)
 402082c:	d9002c17 	ldw	r4,176(sp)
 4020830:	a80d883a 	mov	r6,r21
 4020834:	b80b883a 	mov	r5,r23
 4020838:	40226800 	call	4022680 <__sbprintf>
 402083c:	00001106 	br	4020884 <___vfprintf_internal_r+0x418>
 4020840:	d9002c17 	ldw	r4,176(sp)
 4020844:	d9801e04 	addi	r6,sp,120
 4020848:	b80b883a 	mov	r5,r23
 402084c:	4026f840 	call	4026f84 <__sprint_r>
 4020850:	1000081e 	bne	r2,zero,4020874 <___vfprintf_internal_r+0x408>
 4020854:	da000404 	addi	r8,sp,16
 4020858:	003f5306 	br	40205a8 <__alt_data_end+0xfffe05a8>
 402085c:	d8802017 	ldw	r2,128(sp)
 4020860:	10000426 	beq	r2,zero,4020874 <___vfprintf_internal_r+0x408>
 4020864:	d9002c17 	ldw	r4,176(sp)
 4020868:	d9801e04 	addi	r6,sp,120
 402086c:	b80b883a 	mov	r5,r23
 4020870:	4026f840 	call	4026f84 <__sprint_r>
 4020874:	b880030b 	ldhu	r2,12(r23)
 4020878:	1080100c 	andi	r2,r2,64
 402087c:	1005901e 	bne	r2,zero,4021ec0 <___vfprintf_internal_r+0x1a54>
 4020880:	d8802f17 	ldw	r2,188(sp)
 4020884:	dfc04717 	ldw	ra,284(sp)
 4020888:	df004617 	ldw	fp,280(sp)
 402088c:	ddc04517 	ldw	r23,276(sp)
 4020890:	dd804417 	ldw	r22,272(sp)
 4020894:	dd404317 	ldw	r21,268(sp)
 4020898:	dd004217 	ldw	r20,264(sp)
 402089c:	dcc04117 	ldw	r19,260(sp)
 40208a0:	dc804017 	ldw	r18,256(sp)
 40208a4:	dc403f17 	ldw	r17,252(sp)
 40208a8:	dc003e17 	ldw	r16,248(sp)
 40208ac:	dec04804 	addi	sp,sp,288
 40208b0:	f800283a 	ret
 40208b4:	d9002c17 	ldw	r4,176(sp)
 40208b8:	40247100 	call	4024710 <__sinit>
 40208bc:	003f0406 	br	40204d0 <__alt_data_end+0xfffe04d0>
 40208c0:	d8802d17 	ldw	r2,180(sp)
 40208c4:	d9002d17 	ldw	r4,180(sp)
 40208c8:	10800017 	ldw	r2,0(r2)
 40208cc:	d8803115 	stw	r2,196(sp)
 40208d0:	20800104 	addi	r2,r4,4
 40208d4:	d9003117 	ldw	r4,196(sp)
 40208d8:	203fa716 	blt	r4,zero,4020778 <__alt_data_end+0xfffe0778>
 40208dc:	d8802d15 	stw	r2,180(sp)
 40208e0:	ac400007 	ldb	r17,0(r21)
 40208e4:	003f4206 	br	40205f0 <__alt_data_end+0xfffe05f0>
 40208e8:	ac400007 	ldb	r17,0(r21)
 40208ec:	aac00044 	addi	r11,r21,1
 40208f0:	8a872826 	beq	r17,r10,4022594 <___vfprintf_internal_r+0x2128>
 40208f4:	88bff404 	addi	r2,r17,-48
 40208f8:	0009883a 	mov	r4,zero
 40208fc:	30867d36 	bltu	r6,r2,40222f4 <___vfprintf_internal_r+0x1e88>
 4020900:	5c400007 	ldb	r17,0(r11)
 4020904:	210002a4 	muli	r4,r4,10
 4020908:	5d400044 	addi	r21,r11,1
 402090c:	a817883a 	mov	r11,r21
 4020910:	2089883a 	add	r4,r4,r2
 4020914:	88bff404 	addi	r2,r17,-48
 4020918:	30bff92e 	bgeu	r6,r2,4020900 <__alt_data_end+0xfffe0900>
 402091c:	2005c916 	blt	r4,zero,4022044 <___vfprintf_internal_r+0x1bd8>
 4020920:	d9002915 	stw	r4,164(sp)
 4020924:	003f3306 	br	40205f4 <__alt_data_end+0xfffe05f4>
 4020928:	94802014 	ori	r18,r18,128
 402092c:	ac400007 	ldb	r17,0(r21)
 4020930:	003f2f06 	br	40205f0 <__alt_data_end+0xfffe05f0>
 4020934:	a809883a 	mov	r4,r21
 4020938:	d8003115 	stw	zero,196(sp)
 402093c:	88bff404 	addi	r2,r17,-48
 4020940:	0017883a 	mov	r11,zero
 4020944:	24400007 	ldb	r17,0(r4)
 4020948:	5ac002a4 	muli	r11,r11,10
 402094c:	ad400044 	addi	r21,r21,1
 4020950:	a809883a 	mov	r4,r21
 4020954:	12d7883a 	add	r11,r2,r11
 4020958:	88bff404 	addi	r2,r17,-48
 402095c:	30bff92e 	bgeu	r6,r2,4020944 <__alt_data_end+0xfffe0944>
 4020960:	dac03115 	stw	r11,196(sp)
 4020964:	003f2306 	br	40205f4 <__alt_data_end+0xfffe05f4>
 4020968:	18c03fcc 	andi	r3,r3,255
 402096c:	18072b1e 	bne	r3,zero,402261c <___vfprintf_internal_r+0x21b0>
 4020970:	94800414 	ori	r18,r18,16
 4020974:	9080080c 	andi	r2,r18,32
 4020978:	10037b26 	beq	r2,zero,4021768 <___vfprintf_internal_r+0x12fc>
 402097c:	d9402d17 	ldw	r5,180(sp)
 4020980:	28800117 	ldw	r2,4(r5)
 4020984:	2cc00017 	ldw	r19,0(r5)
 4020988:	29400204 	addi	r5,r5,8
 402098c:	d9402d15 	stw	r5,180(sp)
 4020990:	102d883a 	mov	r22,r2
 4020994:	10044b16 	blt	r2,zero,4021ac4 <___vfprintf_internal_r+0x1658>
 4020998:	d9402917 	ldw	r5,164(sp)
 402099c:	df002783 	ldbu	fp,158(sp)
 40209a0:	2803bc16 	blt	r5,zero,4021894 <___vfprintf_internal_r+0x1428>
 40209a4:	00ffdfc4 	movi	r3,-129
 40209a8:	9d84b03a 	or	r2,r19,r22
 40209ac:	90e4703a 	and	r18,r18,r3
 40209b0:	10017726 	beq	r2,zero,4020f90 <___vfprintf_internal_r+0xb24>
 40209b4:	b0038326 	beq	r22,zero,40217c4 <___vfprintf_internal_r+0x1358>
 40209b8:	dc402a15 	stw	r17,168(sp)
 40209bc:	dc001e04 	addi	r16,sp,120
 40209c0:	b023883a 	mov	r17,r22
 40209c4:	402d883a 	mov	r22,r8
 40209c8:	9809883a 	mov	r4,r19
 40209cc:	880b883a 	mov	r5,r17
 40209d0:	01800284 	movi	r6,10
 40209d4:	000f883a 	mov	r7,zero
 40209d8:	4029ef80 	call	4029ef8 <__umoddi3>
 40209dc:	10800c04 	addi	r2,r2,48
 40209e0:	843fffc4 	addi	r16,r16,-1
 40209e4:	9809883a 	mov	r4,r19
 40209e8:	880b883a 	mov	r5,r17
 40209ec:	80800005 	stb	r2,0(r16)
 40209f0:	01800284 	movi	r6,10
 40209f4:	000f883a 	mov	r7,zero
 40209f8:	40299800 	call	4029980 <__udivdi3>
 40209fc:	1027883a 	mov	r19,r2
 4020a00:	10c4b03a 	or	r2,r2,r3
 4020a04:	1823883a 	mov	r17,r3
 4020a08:	103fef1e 	bne	r2,zero,40209c8 <__alt_data_end+0xfffe09c8>
 4020a0c:	d8c02817 	ldw	r3,160(sp)
 4020a10:	dc402a17 	ldw	r17,168(sp)
 4020a14:	b011883a 	mov	r8,r22
 4020a18:	1c07c83a 	sub	r3,r3,r16
 4020a1c:	d8c02e15 	stw	r3,184(sp)
 4020a20:	00005906 	br	4020b88 <___vfprintf_internal_r+0x71c>
 4020a24:	18c03fcc 	andi	r3,r3,255
 4020a28:	1806fa1e 	bne	r3,zero,4022614 <___vfprintf_internal_r+0x21a8>
 4020a2c:	9080020c 	andi	r2,r18,8
 4020a30:	10048a26 	beq	r2,zero,4021c5c <___vfprintf_internal_r+0x17f0>
 4020a34:	d8c02d17 	ldw	r3,180(sp)
 4020a38:	d9002d17 	ldw	r4,180(sp)
 4020a3c:	d9402d17 	ldw	r5,180(sp)
 4020a40:	18c00017 	ldw	r3,0(r3)
 4020a44:	21000117 	ldw	r4,4(r4)
 4020a48:	29400204 	addi	r5,r5,8
 4020a4c:	d8c03615 	stw	r3,216(sp)
 4020a50:	d9003815 	stw	r4,224(sp)
 4020a54:	d9402d15 	stw	r5,180(sp)
 4020a58:	d9003617 	ldw	r4,216(sp)
 4020a5c:	d9403817 	ldw	r5,224(sp)
 4020a60:	da003d15 	stw	r8,244(sp)
 4020a64:	04000044 	movi	r16,1
 4020a68:	4026b100 	call	4026b10 <__fpclassifyd>
 4020a6c:	da003d17 	ldw	r8,244(sp)
 4020a70:	14041f1e 	bne	r2,r16,4021af0 <___vfprintf_internal_r+0x1684>
 4020a74:	d9003617 	ldw	r4,216(sp)
 4020a78:	d9403817 	ldw	r5,224(sp)
 4020a7c:	000d883a 	mov	r6,zero
 4020a80:	000f883a 	mov	r7,zero
 4020a84:	402b8dc0 	call	402b8dc <__ledf2>
 4020a88:	da003d17 	ldw	r8,244(sp)
 4020a8c:	1005be16 	blt	r2,zero,4022188 <___vfprintf_internal_r+0x1d1c>
 4020a90:	df002783 	ldbu	fp,158(sp)
 4020a94:	008011c4 	movi	r2,71
 4020a98:	1445330e 	bge	r2,r17,4021f68 <___vfprintf_internal_r+0x1afc>
 4020a9c:	040100f4 	movhi	r16,1027
 4020aa0:	8400bc04 	addi	r16,r16,752
 4020aa4:	00c000c4 	movi	r3,3
 4020aa8:	00bfdfc4 	movi	r2,-129
 4020aac:	d8c02a15 	stw	r3,168(sp)
 4020ab0:	90a4703a 	and	r18,r18,r2
 4020ab4:	d8c02e15 	stw	r3,184(sp)
 4020ab8:	d8002915 	stw	zero,164(sp)
 4020abc:	d8003215 	stw	zero,200(sp)
 4020ac0:	00003706 	br	4020ba0 <___vfprintf_internal_r+0x734>
 4020ac4:	94800214 	ori	r18,r18,8
 4020ac8:	ac400007 	ldb	r17,0(r21)
 4020acc:	003ec806 	br	40205f0 <__alt_data_end+0xfffe05f0>
 4020ad0:	18c03fcc 	andi	r3,r3,255
 4020ad4:	1806db1e 	bne	r3,zero,4022644 <___vfprintf_internal_r+0x21d8>
 4020ad8:	94800414 	ori	r18,r18,16
 4020adc:	9080080c 	andi	r2,r18,32
 4020ae0:	1002d826 	beq	r2,zero,4021644 <___vfprintf_internal_r+0x11d8>
 4020ae4:	d9402d17 	ldw	r5,180(sp)
 4020ae8:	d8c02917 	ldw	r3,164(sp)
 4020aec:	d8002785 	stb	zero,158(sp)
 4020af0:	28800204 	addi	r2,r5,8
 4020af4:	2cc00017 	ldw	r19,0(r5)
 4020af8:	2d800117 	ldw	r22,4(r5)
 4020afc:	18048f16 	blt	r3,zero,4021d3c <___vfprintf_internal_r+0x18d0>
 4020b00:	013fdfc4 	movi	r4,-129
 4020b04:	9d86b03a 	or	r3,r19,r22
 4020b08:	d8802d15 	stw	r2,180(sp)
 4020b0c:	9124703a 	and	r18,r18,r4
 4020b10:	1802d91e 	bne	r3,zero,4021678 <___vfprintf_internal_r+0x120c>
 4020b14:	d8c02917 	ldw	r3,164(sp)
 4020b18:	0039883a 	mov	fp,zero
 4020b1c:	1805c326 	beq	r3,zero,402222c <___vfprintf_internal_r+0x1dc0>
 4020b20:	0027883a 	mov	r19,zero
 4020b24:	002d883a 	mov	r22,zero
 4020b28:	dc001e04 	addi	r16,sp,120
 4020b2c:	9806d0fa 	srli	r3,r19,3
 4020b30:	b008977a 	slli	r4,r22,29
 4020b34:	b02cd0fa 	srli	r22,r22,3
 4020b38:	9cc001cc 	andi	r19,r19,7
 4020b3c:	98800c04 	addi	r2,r19,48
 4020b40:	843fffc4 	addi	r16,r16,-1
 4020b44:	20e6b03a 	or	r19,r4,r3
 4020b48:	80800005 	stb	r2,0(r16)
 4020b4c:	9d86b03a 	or	r3,r19,r22
 4020b50:	183ff61e 	bne	r3,zero,4020b2c <__alt_data_end+0xfffe0b2c>
 4020b54:	90c0004c 	andi	r3,r18,1
 4020b58:	18013b26 	beq	r3,zero,4021048 <___vfprintf_internal_r+0xbdc>
 4020b5c:	10803fcc 	andi	r2,r2,255
 4020b60:	1080201c 	xori	r2,r2,128
 4020b64:	10bfe004 	addi	r2,r2,-128
 4020b68:	00c00c04 	movi	r3,48
 4020b6c:	10c13626 	beq	r2,r3,4021048 <___vfprintf_internal_r+0xbdc>
 4020b70:	80ffffc5 	stb	r3,-1(r16)
 4020b74:	d8c02817 	ldw	r3,160(sp)
 4020b78:	80bfffc4 	addi	r2,r16,-1
 4020b7c:	1021883a 	mov	r16,r2
 4020b80:	1887c83a 	sub	r3,r3,r2
 4020b84:	d8c02e15 	stw	r3,184(sp)
 4020b88:	d8802e17 	ldw	r2,184(sp)
 4020b8c:	d9002917 	ldw	r4,164(sp)
 4020b90:	1100010e 	bge	r2,r4,4020b98 <___vfprintf_internal_r+0x72c>
 4020b94:	2005883a 	mov	r2,r4
 4020b98:	d8802a15 	stw	r2,168(sp)
 4020b9c:	d8003215 	stw	zero,200(sp)
 4020ba0:	e7003fcc 	andi	fp,fp,255
 4020ba4:	e700201c 	xori	fp,fp,128
 4020ba8:	e73fe004 	addi	fp,fp,-128
 4020bac:	e0000326 	beq	fp,zero,4020bbc <___vfprintf_internal_r+0x750>
 4020bb0:	d8c02a17 	ldw	r3,168(sp)
 4020bb4:	18c00044 	addi	r3,r3,1
 4020bb8:	d8c02a15 	stw	r3,168(sp)
 4020bbc:	90c0008c 	andi	r3,r18,2
 4020bc0:	d8c02b15 	stw	r3,172(sp)
 4020bc4:	18000326 	beq	r3,zero,4020bd4 <___vfprintf_internal_r+0x768>
 4020bc8:	d8c02a17 	ldw	r3,168(sp)
 4020bcc:	18c00084 	addi	r3,r3,2
 4020bd0:	d8c02a15 	stw	r3,168(sp)
 4020bd4:	90c0210c 	andi	r3,r18,132
 4020bd8:	d8c03015 	stw	r3,192(sp)
 4020bdc:	1801a31e 	bne	r3,zero,402126c <___vfprintf_internal_r+0xe00>
 4020be0:	d9003117 	ldw	r4,196(sp)
 4020be4:	d8c02a17 	ldw	r3,168(sp)
 4020be8:	20e7c83a 	sub	r19,r4,r3
 4020bec:	04c19f0e 	bge	zero,r19,402126c <___vfprintf_internal_r+0xe00>
 4020bf0:	02400404 	movi	r9,16
 4020bf4:	d8c02017 	ldw	r3,128(sp)
 4020bf8:	d8801f17 	ldw	r2,124(sp)
 4020bfc:	4cc50d0e 	bge	r9,r19,4022034 <___vfprintf_internal_r+0x1bc8>
 4020c00:	014100f4 	movhi	r5,1027
 4020c04:	2940cf84 	addi	r5,r5,830
 4020c08:	dc403b15 	stw	r17,236(sp)
 4020c0c:	d9403515 	stw	r5,212(sp)
 4020c10:	9823883a 	mov	r17,r19
 4020c14:	482d883a 	mov	r22,r9
 4020c18:	9027883a 	mov	r19,r18
 4020c1c:	070001c4 	movi	fp,7
 4020c20:	8025883a 	mov	r18,r16
 4020c24:	dc002c17 	ldw	r16,176(sp)
 4020c28:	00000306 	br	4020c38 <___vfprintf_internal_r+0x7cc>
 4020c2c:	8c7ffc04 	addi	r17,r17,-16
 4020c30:	42000204 	addi	r8,r8,8
 4020c34:	b440130e 	bge	r22,r17,4020c84 <___vfprintf_internal_r+0x818>
 4020c38:	010100f4 	movhi	r4,1027
 4020c3c:	18c00404 	addi	r3,r3,16
 4020c40:	10800044 	addi	r2,r2,1
 4020c44:	2100cf84 	addi	r4,r4,830
 4020c48:	41000015 	stw	r4,0(r8)
 4020c4c:	45800115 	stw	r22,4(r8)
 4020c50:	d8c02015 	stw	r3,128(sp)
 4020c54:	d8801f15 	stw	r2,124(sp)
 4020c58:	e0bff40e 	bge	fp,r2,4020c2c <__alt_data_end+0xfffe0c2c>
 4020c5c:	d9801e04 	addi	r6,sp,120
 4020c60:	b80b883a 	mov	r5,r23
 4020c64:	8009883a 	mov	r4,r16
 4020c68:	4026f840 	call	4026f84 <__sprint_r>
 4020c6c:	103f011e 	bne	r2,zero,4020874 <__alt_data_end+0xfffe0874>
 4020c70:	8c7ffc04 	addi	r17,r17,-16
 4020c74:	d8c02017 	ldw	r3,128(sp)
 4020c78:	d8801f17 	ldw	r2,124(sp)
 4020c7c:	da000404 	addi	r8,sp,16
 4020c80:	b47fed16 	blt	r22,r17,4020c38 <__alt_data_end+0xfffe0c38>
 4020c84:	9021883a 	mov	r16,r18
 4020c88:	9825883a 	mov	r18,r19
 4020c8c:	8827883a 	mov	r19,r17
 4020c90:	dc403b17 	ldw	r17,236(sp)
 4020c94:	d9403517 	ldw	r5,212(sp)
 4020c98:	98c7883a 	add	r3,r19,r3
 4020c9c:	10800044 	addi	r2,r2,1
 4020ca0:	41400015 	stw	r5,0(r8)
 4020ca4:	44c00115 	stw	r19,4(r8)
 4020ca8:	d8c02015 	stw	r3,128(sp)
 4020cac:	d8801f15 	stw	r2,124(sp)
 4020cb0:	010001c4 	movi	r4,7
 4020cb4:	2082a316 	blt	r4,r2,4021744 <___vfprintf_internal_r+0x12d8>
 4020cb8:	df002787 	ldb	fp,158(sp)
 4020cbc:	42000204 	addi	r8,r8,8
 4020cc0:	e0000c26 	beq	fp,zero,4020cf4 <___vfprintf_internal_r+0x888>
 4020cc4:	d8801f17 	ldw	r2,124(sp)
 4020cc8:	d9002784 	addi	r4,sp,158
 4020ccc:	18c00044 	addi	r3,r3,1
 4020cd0:	10800044 	addi	r2,r2,1
 4020cd4:	41000015 	stw	r4,0(r8)
 4020cd8:	01000044 	movi	r4,1
 4020cdc:	41000115 	stw	r4,4(r8)
 4020ce0:	d8c02015 	stw	r3,128(sp)
 4020ce4:	d8801f15 	stw	r2,124(sp)
 4020ce8:	010001c4 	movi	r4,7
 4020cec:	20823c16 	blt	r4,r2,40215e0 <___vfprintf_internal_r+0x1174>
 4020cf0:	42000204 	addi	r8,r8,8
 4020cf4:	d8802b17 	ldw	r2,172(sp)
 4020cf8:	10000c26 	beq	r2,zero,4020d2c <___vfprintf_internal_r+0x8c0>
 4020cfc:	d8801f17 	ldw	r2,124(sp)
 4020d00:	d9002704 	addi	r4,sp,156
 4020d04:	18c00084 	addi	r3,r3,2
 4020d08:	10800044 	addi	r2,r2,1
 4020d0c:	41000015 	stw	r4,0(r8)
 4020d10:	01000084 	movi	r4,2
 4020d14:	41000115 	stw	r4,4(r8)
 4020d18:	d8c02015 	stw	r3,128(sp)
 4020d1c:	d8801f15 	stw	r2,124(sp)
 4020d20:	010001c4 	movi	r4,7
 4020d24:	20823616 	blt	r4,r2,4021600 <___vfprintf_internal_r+0x1194>
 4020d28:	42000204 	addi	r8,r8,8
 4020d2c:	d9003017 	ldw	r4,192(sp)
 4020d30:	00802004 	movi	r2,128
 4020d34:	20819926 	beq	r4,r2,402139c <___vfprintf_internal_r+0xf30>
 4020d38:	d9402917 	ldw	r5,164(sp)
 4020d3c:	d8802e17 	ldw	r2,184(sp)
 4020d40:	28adc83a 	sub	r22,r5,r2
 4020d44:	0580310e 	bge	zero,r22,4020e0c <___vfprintf_internal_r+0x9a0>
 4020d48:	07000404 	movi	fp,16
 4020d4c:	d8801f17 	ldw	r2,124(sp)
 4020d50:	e584140e 	bge	fp,r22,4021da4 <___vfprintf_internal_r+0x1938>
 4020d54:	014100f4 	movhi	r5,1027
 4020d58:	2940cb84 	addi	r5,r5,814
 4020d5c:	dc402915 	stw	r17,164(sp)
 4020d60:	d9402b15 	stw	r5,172(sp)
 4020d64:	b023883a 	mov	r17,r22
 4020d68:	04c001c4 	movi	r19,7
 4020d6c:	a82d883a 	mov	r22,r21
 4020d70:	902b883a 	mov	r21,r18
 4020d74:	8025883a 	mov	r18,r16
 4020d78:	dc002c17 	ldw	r16,176(sp)
 4020d7c:	00000306 	br	4020d8c <___vfprintf_internal_r+0x920>
 4020d80:	8c7ffc04 	addi	r17,r17,-16
 4020d84:	42000204 	addi	r8,r8,8
 4020d88:	e440110e 	bge	fp,r17,4020dd0 <___vfprintf_internal_r+0x964>
 4020d8c:	18c00404 	addi	r3,r3,16
 4020d90:	10800044 	addi	r2,r2,1
 4020d94:	45000015 	stw	r20,0(r8)
 4020d98:	47000115 	stw	fp,4(r8)
 4020d9c:	d8c02015 	stw	r3,128(sp)
 4020da0:	d8801f15 	stw	r2,124(sp)
 4020da4:	98bff60e 	bge	r19,r2,4020d80 <__alt_data_end+0xfffe0d80>
 4020da8:	d9801e04 	addi	r6,sp,120
 4020dac:	b80b883a 	mov	r5,r23
 4020db0:	8009883a 	mov	r4,r16
 4020db4:	4026f840 	call	4026f84 <__sprint_r>
 4020db8:	103eae1e 	bne	r2,zero,4020874 <__alt_data_end+0xfffe0874>
 4020dbc:	8c7ffc04 	addi	r17,r17,-16
 4020dc0:	d8c02017 	ldw	r3,128(sp)
 4020dc4:	d8801f17 	ldw	r2,124(sp)
 4020dc8:	da000404 	addi	r8,sp,16
 4020dcc:	e47fef16 	blt	fp,r17,4020d8c <__alt_data_end+0xfffe0d8c>
 4020dd0:	9021883a 	mov	r16,r18
 4020dd4:	a825883a 	mov	r18,r21
 4020dd8:	b02b883a 	mov	r21,r22
 4020ddc:	882d883a 	mov	r22,r17
 4020de0:	dc402917 	ldw	r17,164(sp)
 4020de4:	d9002b17 	ldw	r4,172(sp)
 4020de8:	1d87883a 	add	r3,r3,r22
 4020dec:	10800044 	addi	r2,r2,1
 4020df0:	41000015 	stw	r4,0(r8)
 4020df4:	45800115 	stw	r22,4(r8)
 4020df8:	d8c02015 	stw	r3,128(sp)
 4020dfc:	d8801f15 	stw	r2,124(sp)
 4020e00:	010001c4 	movi	r4,7
 4020e04:	2081ee16 	blt	r4,r2,40215c0 <___vfprintf_internal_r+0x1154>
 4020e08:	42000204 	addi	r8,r8,8
 4020e0c:	9080400c 	andi	r2,r18,256
 4020e10:	1001181e 	bne	r2,zero,4021274 <___vfprintf_internal_r+0xe08>
 4020e14:	d9402e17 	ldw	r5,184(sp)
 4020e18:	d8801f17 	ldw	r2,124(sp)
 4020e1c:	44000015 	stw	r16,0(r8)
 4020e20:	1947883a 	add	r3,r3,r5
 4020e24:	10800044 	addi	r2,r2,1
 4020e28:	41400115 	stw	r5,4(r8)
 4020e2c:	d8c02015 	stw	r3,128(sp)
 4020e30:	d8801f15 	stw	r2,124(sp)
 4020e34:	010001c4 	movi	r4,7
 4020e38:	2081d316 	blt	r4,r2,4021588 <___vfprintf_internal_r+0x111c>
 4020e3c:	42000204 	addi	r8,r8,8
 4020e40:	9480010c 	andi	r18,r18,4
 4020e44:	90003226 	beq	r18,zero,4020f10 <___vfprintf_internal_r+0xaa4>
 4020e48:	d9403117 	ldw	r5,196(sp)
 4020e4c:	d8802a17 	ldw	r2,168(sp)
 4020e50:	28a1c83a 	sub	r16,r5,r2
 4020e54:	04002e0e 	bge	zero,r16,4020f10 <___vfprintf_internal_r+0xaa4>
 4020e58:	04400404 	movi	r17,16
 4020e5c:	d8801f17 	ldw	r2,124(sp)
 4020e60:	8c04a20e 	bge	r17,r16,40220ec <___vfprintf_internal_r+0x1c80>
 4020e64:	014100f4 	movhi	r5,1027
 4020e68:	2940cf84 	addi	r5,r5,830
 4020e6c:	d9403515 	stw	r5,212(sp)
 4020e70:	048001c4 	movi	r18,7
 4020e74:	dcc02c17 	ldw	r19,176(sp)
 4020e78:	00000306 	br	4020e88 <___vfprintf_internal_r+0xa1c>
 4020e7c:	843ffc04 	addi	r16,r16,-16
 4020e80:	42000204 	addi	r8,r8,8
 4020e84:	8c00130e 	bge	r17,r16,4020ed4 <___vfprintf_internal_r+0xa68>
 4020e88:	010100f4 	movhi	r4,1027
 4020e8c:	18c00404 	addi	r3,r3,16
 4020e90:	10800044 	addi	r2,r2,1
 4020e94:	2100cf84 	addi	r4,r4,830
 4020e98:	41000015 	stw	r4,0(r8)
 4020e9c:	44400115 	stw	r17,4(r8)
 4020ea0:	d8c02015 	stw	r3,128(sp)
 4020ea4:	d8801f15 	stw	r2,124(sp)
 4020ea8:	90bff40e 	bge	r18,r2,4020e7c <__alt_data_end+0xfffe0e7c>
 4020eac:	d9801e04 	addi	r6,sp,120
 4020eb0:	b80b883a 	mov	r5,r23
 4020eb4:	9809883a 	mov	r4,r19
 4020eb8:	4026f840 	call	4026f84 <__sprint_r>
 4020ebc:	103e6d1e 	bne	r2,zero,4020874 <__alt_data_end+0xfffe0874>
 4020ec0:	843ffc04 	addi	r16,r16,-16
 4020ec4:	d8c02017 	ldw	r3,128(sp)
 4020ec8:	d8801f17 	ldw	r2,124(sp)
 4020ecc:	da000404 	addi	r8,sp,16
 4020ed0:	8c3fed16 	blt	r17,r16,4020e88 <__alt_data_end+0xfffe0e88>
 4020ed4:	d9403517 	ldw	r5,212(sp)
 4020ed8:	1c07883a 	add	r3,r3,r16
 4020edc:	10800044 	addi	r2,r2,1
 4020ee0:	41400015 	stw	r5,0(r8)
 4020ee4:	44000115 	stw	r16,4(r8)
 4020ee8:	d8c02015 	stw	r3,128(sp)
 4020eec:	d8801f15 	stw	r2,124(sp)
 4020ef0:	010001c4 	movi	r4,7
 4020ef4:	2080060e 	bge	r4,r2,4020f10 <___vfprintf_internal_r+0xaa4>
 4020ef8:	d9002c17 	ldw	r4,176(sp)
 4020efc:	d9801e04 	addi	r6,sp,120
 4020f00:	b80b883a 	mov	r5,r23
 4020f04:	4026f840 	call	4026f84 <__sprint_r>
 4020f08:	103e5a1e 	bne	r2,zero,4020874 <__alt_data_end+0xfffe0874>
 4020f0c:	d8c02017 	ldw	r3,128(sp)
 4020f10:	d8803117 	ldw	r2,196(sp)
 4020f14:	d9002a17 	ldw	r4,168(sp)
 4020f18:	1100010e 	bge	r2,r4,4020f20 <___vfprintf_internal_r+0xab4>
 4020f1c:	2005883a 	mov	r2,r4
 4020f20:	d9402f17 	ldw	r5,188(sp)
 4020f24:	288b883a 	add	r5,r5,r2
 4020f28:	d9402f15 	stw	r5,188(sp)
 4020f2c:	18019e1e 	bne	r3,zero,40215a8 <___vfprintf_internal_r+0x113c>
 4020f30:	a8800007 	ldb	r2,0(r21)
 4020f34:	d8001f15 	stw	zero,124(sp)
 4020f38:	da000404 	addi	r8,sp,16
 4020f3c:	103d851e 	bne	r2,zero,4020554 <__alt_data_end+0xfffe0554>
 4020f40:	a821883a 	mov	r16,r21
 4020f44:	003d9b06 	br	40205b4 <__alt_data_end+0xfffe05b4>
 4020f48:	18c03fcc 	andi	r3,r3,255
 4020f4c:	1805c11e 	bne	r3,zero,4022654 <___vfprintf_internal_r+0x21e8>
 4020f50:	94800414 	ori	r18,r18,16
 4020f54:	9080080c 	andi	r2,r18,32
 4020f58:	10020c26 	beq	r2,zero,402178c <___vfprintf_internal_r+0x1320>
 4020f5c:	d8802d17 	ldw	r2,180(sp)
 4020f60:	d9002917 	ldw	r4,164(sp)
 4020f64:	d8002785 	stb	zero,158(sp)
 4020f68:	10c00204 	addi	r3,r2,8
 4020f6c:	14c00017 	ldw	r19,0(r2)
 4020f70:	15800117 	ldw	r22,4(r2)
 4020f74:	20040f16 	blt	r4,zero,4021fb4 <___vfprintf_internal_r+0x1b48>
 4020f78:	013fdfc4 	movi	r4,-129
 4020f7c:	9d84b03a 	or	r2,r19,r22
 4020f80:	d8c02d15 	stw	r3,180(sp)
 4020f84:	9124703a 	and	r18,r18,r4
 4020f88:	0039883a 	mov	fp,zero
 4020f8c:	103e891e 	bne	r2,zero,40209b4 <__alt_data_end+0xfffe09b4>
 4020f90:	d9002917 	ldw	r4,164(sp)
 4020f94:	2002c11e 	bne	r4,zero,4021a9c <___vfprintf_internal_r+0x1630>
 4020f98:	d8002915 	stw	zero,164(sp)
 4020f9c:	d8002e15 	stw	zero,184(sp)
 4020fa0:	dc001e04 	addi	r16,sp,120
 4020fa4:	003ef806 	br	4020b88 <__alt_data_end+0xfffe0b88>
 4020fa8:	18c03fcc 	andi	r3,r3,255
 4020fac:	18059d1e 	bne	r3,zero,4022624 <___vfprintf_internal_r+0x21b8>
 4020fb0:	014100f4 	movhi	r5,1027
 4020fb4:	2940bf04 	addi	r5,r5,764
 4020fb8:	d9403915 	stw	r5,228(sp)
 4020fbc:	9080080c 	andi	r2,r18,32
 4020fc0:	10005226 	beq	r2,zero,402110c <___vfprintf_internal_r+0xca0>
 4020fc4:	d8802d17 	ldw	r2,180(sp)
 4020fc8:	14c00017 	ldw	r19,0(r2)
 4020fcc:	15800117 	ldw	r22,4(r2)
 4020fd0:	10800204 	addi	r2,r2,8
 4020fd4:	d8802d15 	stw	r2,180(sp)
 4020fd8:	9080004c 	andi	r2,r18,1
 4020fdc:	10019026 	beq	r2,zero,4021620 <___vfprintf_internal_r+0x11b4>
 4020fe0:	9d84b03a 	or	r2,r19,r22
 4020fe4:	10036926 	beq	r2,zero,4021d8c <___vfprintf_internal_r+0x1920>
 4020fe8:	d8c02917 	ldw	r3,164(sp)
 4020fec:	00800c04 	movi	r2,48
 4020ff0:	d8802705 	stb	r2,156(sp)
 4020ff4:	dc402745 	stb	r17,157(sp)
 4020ff8:	d8002785 	stb	zero,158(sp)
 4020ffc:	90800094 	ori	r2,r18,2
 4021000:	18045d16 	blt	r3,zero,4022178 <___vfprintf_internal_r+0x1d0c>
 4021004:	00bfdfc4 	movi	r2,-129
 4021008:	90a4703a 	and	r18,r18,r2
 402100c:	94800094 	ori	r18,r18,2
 4021010:	0039883a 	mov	fp,zero
 4021014:	d9003917 	ldw	r4,228(sp)
 4021018:	dc001e04 	addi	r16,sp,120
 402101c:	988003cc 	andi	r2,r19,15
 4021020:	b006973a 	slli	r3,r22,28
 4021024:	2085883a 	add	r2,r4,r2
 4021028:	9826d13a 	srli	r19,r19,4
 402102c:	10800003 	ldbu	r2,0(r2)
 4021030:	b02cd13a 	srli	r22,r22,4
 4021034:	843fffc4 	addi	r16,r16,-1
 4021038:	1ce6b03a 	or	r19,r3,r19
 402103c:	80800005 	stb	r2,0(r16)
 4021040:	9d84b03a 	or	r2,r19,r22
 4021044:	103ff51e 	bne	r2,zero,402101c <__alt_data_end+0xfffe101c>
 4021048:	d8c02817 	ldw	r3,160(sp)
 402104c:	1c07c83a 	sub	r3,r3,r16
 4021050:	d8c02e15 	stw	r3,184(sp)
 4021054:	003ecc06 	br	4020b88 <__alt_data_end+0xfffe0b88>
 4021058:	18c03fcc 	andi	r3,r3,255
 402105c:	183e9f26 	beq	r3,zero,4020adc <__alt_data_end+0xfffe0adc>
 4021060:	d9c02785 	stb	r7,158(sp)
 4021064:	003e9d06 	br	4020adc <__alt_data_end+0xfffe0adc>
 4021068:	00c00044 	movi	r3,1
 402106c:	01c00ac4 	movi	r7,43
 4021070:	ac400007 	ldb	r17,0(r21)
 4021074:	003d5e06 	br	40205f0 <__alt_data_end+0xfffe05f0>
 4021078:	94800814 	ori	r18,r18,32
 402107c:	ac400007 	ldb	r17,0(r21)
 4021080:	003d5b06 	br	40205f0 <__alt_data_end+0xfffe05f0>
 4021084:	d8c02d17 	ldw	r3,180(sp)
 4021088:	d8002785 	stb	zero,158(sp)
 402108c:	1c000017 	ldw	r16,0(r3)
 4021090:	1cc00104 	addi	r19,r3,4
 4021094:	80041926 	beq	r16,zero,40220fc <___vfprintf_internal_r+0x1c90>
 4021098:	d9002917 	ldw	r4,164(sp)
 402109c:	2003d016 	blt	r4,zero,4021fe0 <___vfprintf_internal_r+0x1b74>
 40210a0:	200d883a 	mov	r6,r4
 40210a4:	000b883a 	mov	r5,zero
 40210a8:	8009883a 	mov	r4,r16
 40210ac:	da003d15 	stw	r8,244(sp)
 40210b0:	40257c00 	call	40257c0 <memchr>
 40210b4:	da003d17 	ldw	r8,244(sp)
 40210b8:	10045426 	beq	r2,zero,402220c <___vfprintf_internal_r+0x1da0>
 40210bc:	1405c83a 	sub	r2,r2,r16
 40210c0:	d8802e15 	stw	r2,184(sp)
 40210c4:	1003cc16 	blt	r2,zero,4021ff8 <___vfprintf_internal_r+0x1b8c>
 40210c8:	df002783 	ldbu	fp,158(sp)
 40210cc:	d8802a15 	stw	r2,168(sp)
 40210d0:	dcc02d15 	stw	r19,180(sp)
 40210d4:	d8002915 	stw	zero,164(sp)
 40210d8:	d8003215 	stw	zero,200(sp)
 40210dc:	003eb006 	br	4020ba0 <__alt_data_end+0xfffe0ba0>
 40210e0:	18c03fcc 	andi	r3,r3,255
 40210e4:	183f9b26 	beq	r3,zero,4020f54 <__alt_data_end+0xfffe0f54>
 40210e8:	d9c02785 	stb	r7,158(sp)
 40210ec:	003f9906 	br	4020f54 <__alt_data_end+0xfffe0f54>
 40210f0:	18c03fcc 	andi	r3,r3,255
 40210f4:	1805551e 	bne	r3,zero,402264c <___vfprintf_internal_r+0x21e0>
 40210f8:	014100f4 	movhi	r5,1027
 40210fc:	2940c404 	addi	r5,r5,784
 4021100:	d9403915 	stw	r5,228(sp)
 4021104:	9080080c 	andi	r2,r18,32
 4021108:	103fae1e 	bne	r2,zero,4020fc4 <__alt_data_end+0xfffe0fc4>
 402110c:	9080040c 	andi	r2,r18,16
 4021110:	1002de26 	beq	r2,zero,4021c8c <___vfprintf_internal_r+0x1820>
 4021114:	d8c02d17 	ldw	r3,180(sp)
 4021118:	002d883a 	mov	r22,zero
 402111c:	1cc00017 	ldw	r19,0(r3)
 4021120:	18c00104 	addi	r3,r3,4
 4021124:	d8c02d15 	stw	r3,180(sp)
 4021128:	003fab06 	br	4020fd8 <__alt_data_end+0xfffe0fd8>
 402112c:	38803fcc 	andi	r2,r7,255
 4021130:	1080201c 	xori	r2,r2,128
 4021134:	10bfe004 	addi	r2,r2,-128
 4021138:	1002d21e 	bne	r2,zero,4021c84 <___vfprintf_internal_r+0x1818>
 402113c:	00c00044 	movi	r3,1
 4021140:	01c00804 	movi	r7,32
 4021144:	ac400007 	ldb	r17,0(r21)
 4021148:	003d2906 	br	40205f0 <__alt_data_end+0xfffe05f0>
 402114c:	94800054 	ori	r18,r18,1
 4021150:	ac400007 	ldb	r17,0(r21)
 4021154:	003d2606 	br	40205f0 <__alt_data_end+0xfffe05f0>
 4021158:	18c03fcc 	andi	r3,r3,255
 402115c:	183e0526 	beq	r3,zero,4020974 <__alt_data_end+0xfffe0974>
 4021160:	d9c02785 	stb	r7,158(sp)
 4021164:	003e0306 	br	4020974 <__alt_data_end+0xfffe0974>
 4021168:	94801014 	ori	r18,r18,64
 402116c:	ac400007 	ldb	r17,0(r21)
 4021170:	003d1f06 	br	40205f0 <__alt_data_end+0xfffe05f0>
 4021174:	ac400007 	ldb	r17,0(r21)
 4021178:	8a438726 	beq	r17,r9,4021f98 <___vfprintf_internal_r+0x1b2c>
 402117c:	94800414 	ori	r18,r18,16
 4021180:	003d1b06 	br	40205f0 <__alt_data_end+0xfffe05f0>
 4021184:	18c03fcc 	andi	r3,r3,255
 4021188:	1805341e 	bne	r3,zero,402265c <___vfprintf_internal_r+0x21f0>
 402118c:	9080080c 	andi	r2,r18,32
 4021190:	1002cd26 	beq	r2,zero,4021cc8 <___vfprintf_internal_r+0x185c>
 4021194:	d9402d17 	ldw	r5,180(sp)
 4021198:	d9002f17 	ldw	r4,188(sp)
 402119c:	28800017 	ldw	r2,0(r5)
 40211a0:	2007d7fa 	srai	r3,r4,31
 40211a4:	29400104 	addi	r5,r5,4
 40211a8:	d9402d15 	stw	r5,180(sp)
 40211ac:	11000015 	stw	r4,0(r2)
 40211b0:	10c00115 	stw	r3,4(r2)
 40211b4:	003ce506 	br	402054c <__alt_data_end+0xfffe054c>
 40211b8:	d8c02d17 	ldw	r3,180(sp)
 40211bc:	d9002d17 	ldw	r4,180(sp)
 40211c0:	d8002785 	stb	zero,158(sp)
 40211c4:	18800017 	ldw	r2,0(r3)
 40211c8:	21000104 	addi	r4,r4,4
 40211cc:	00c00044 	movi	r3,1
 40211d0:	d8c02a15 	stw	r3,168(sp)
 40211d4:	d8801405 	stb	r2,80(sp)
 40211d8:	d9002d15 	stw	r4,180(sp)
 40211dc:	d8c02e15 	stw	r3,184(sp)
 40211e0:	d8002915 	stw	zero,164(sp)
 40211e4:	d8003215 	stw	zero,200(sp)
 40211e8:	dc001404 	addi	r16,sp,80
 40211ec:	0039883a 	mov	fp,zero
 40211f0:	003e7206 	br	4020bbc <__alt_data_end+0xfffe0bbc>
 40211f4:	010100f4 	movhi	r4,1027
 40211f8:	2100c404 	addi	r4,r4,784
 40211fc:	0039883a 	mov	fp,zero
 4021200:	d9003915 	stw	r4,228(sp)
 4021204:	04401e04 	movi	r17,120
 4021208:	003f8206 	br	4021014 <__alt_data_end+0xfffe1014>
 402120c:	18c03fcc 	andi	r3,r3,255
 4021210:	1805061e 	bne	r3,zero,402262c <___vfprintf_internal_r+0x21c0>
 4021214:	883d9126 	beq	r17,zero,402085c <__alt_data_end+0xfffe085c>
 4021218:	00c00044 	movi	r3,1
 402121c:	d8c02a15 	stw	r3,168(sp)
 4021220:	dc401405 	stb	r17,80(sp)
 4021224:	d8002785 	stb	zero,158(sp)
 4021228:	003fec06 	br	40211dc <__alt_data_end+0xfffe11dc>
 402122c:	014100f4 	movhi	r5,1027
 4021230:	2940c404 	addi	r5,r5,784
 4021234:	d9403915 	stw	r5,228(sp)
 4021238:	d8c02d15 	stw	r3,180(sp)
 402123c:	1025883a 	mov	r18,r2
 4021240:	04401e04 	movi	r17,120
 4021244:	9d84b03a 	or	r2,r19,r22
 4021248:	1000fc1e 	bne	r2,zero,402163c <___vfprintf_internal_r+0x11d0>
 402124c:	0039883a 	mov	fp,zero
 4021250:	00800084 	movi	r2,2
 4021254:	10803fcc 	andi	r2,r2,255
 4021258:	00c00044 	movi	r3,1
 402125c:	10c20f26 	beq	r2,r3,4021a9c <___vfprintf_internal_r+0x1630>
 4021260:	00c00084 	movi	r3,2
 4021264:	10fd6326 	beq	r2,r3,40207f4 <__alt_data_end+0xfffe07f4>
 4021268:	003e2d06 	br	4020b20 <__alt_data_end+0xfffe0b20>
 402126c:	d8c02017 	ldw	r3,128(sp)
 4021270:	003e9306 	br	4020cc0 <__alt_data_end+0xfffe0cc0>
 4021274:	00801944 	movi	r2,101
 4021278:	14407e0e 	bge	r2,r17,4021474 <___vfprintf_internal_r+0x1008>
 402127c:	d9003617 	ldw	r4,216(sp)
 4021280:	d9403817 	ldw	r5,224(sp)
 4021284:	000d883a 	mov	r6,zero
 4021288:	000f883a 	mov	r7,zero
 402128c:	d8c03c15 	stw	r3,240(sp)
 4021290:	da003d15 	stw	r8,244(sp)
 4021294:	402b7780 	call	402b778 <__eqdf2>
 4021298:	d8c03c17 	ldw	r3,240(sp)
 402129c:	da003d17 	ldw	r8,244(sp)
 40212a0:	1000f71e 	bne	r2,zero,4021680 <___vfprintf_internal_r+0x1214>
 40212a4:	d8801f17 	ldw	r2,124(sp)
 40212a8:	010100f4 	movhi	r4,1027
 40212ac:	2100cb04 	addi	r4,r4,812
 40212b0:	18c00044 	addi	r3,r3,1
 40212b4:	10800044 	addi	r2,r2,1
 40212b8:	41000015 	stw	r4,0(r8)
 40212bc:	01000044 	movi	r4,1
 40212c0:	41000115 	stw	r4,4(r8)
 40212c4:	d8c02015 	stw	r3,128(sp)
 40212c8:	d8801f15 	stw	r2,124(sp)
 40212cc:	010001c4 	movi	r4,7
 40212d0:	2082b816 	blt	r4,r2,4021db4 <___vfprintf_internal_r+0x1948>
 40212d4:	42000204 	addi	r8,r8,8
 40212d8:	d8802617 	ldw	r2,152(sp)
 40212dc:	d9403317 	ldw	r5,204(sp)
 40212e0:	11400216 	blt	r2,r5,40212ec <___vfprintf_internal_r+0xe80>
 40212e4:	9080004c 	andi	r2,r18,1
 40212e8:	103ed526 	beq	r2,zero,4020e40 <__alt_data_end+0xfffe0e40>
 40212ec:	d8803717 	ldw	r2,220(sp)
 40212f0:	d9003417 	ldw	r4,208(sp)
 40212f4:	d9403717 	ldw	r5,220(sp)
 40212f8:	1887883a 	add	r3,r3,r2
 40212fc:	d8801f17 	ldw	r2,124(sp)
 4021300:	41000015 	stw	r4,0(r8)
 4021304:	41400115 	stw	r5,4(r8)
 4021308:	10800044 	addi	r2,r2,1
 402130c:	d8c02015 	stw	r3,128(sp)
 4021310:	d8801f15 	stw	r2,124(sp)
 4021314:	010001c4 	movi	r4,7
 4021318:	20832916 	blt	r4,r2,4021fc0 <___vfprintf_internal_r+0x1b54>
 402131c:	42000204 	addi	r8,r8,8
 4021320:	d8803317 	ldw	r2,204(sp)
 4021324:	143fffc4 	addi	r16,r2,-1
 4021328:	043ec50e 	bge	zero,r16,4020e40 <__alt_data_end+0xfffe0e40>
 402132c:	04400404 	movi	r17,16
 4021330:	d8801f17 	ldw	r2,124(sp)
 4021334:	8c00880e 	bge	r17,r16,4021558 <___vfprintf_internal_r+0x10ec>
 4021338:	014100f4 	movhi	r5,1027
 402133c:	2940cb84 	addi	r5,r5,814
 4021340:	d9402b15 	stw	r5,172(sp)
 4021344:	058001c4 	movi	r22,7
 4021348:	dcc02c17 	ldw	r19,176(sp)
 402134c:	00000306 	br	402135c <___vfprintf_internal_r+0xef0>
 4021350:	42000204 	addi	r8,r8,8
 4021354:	843ffc04 	addi	r16,r16,-16
 4021358:	8c00820e 	bge	r17,r16,4021564 <___vfprintf_internal_r+0x10f8>
 402135c:	18c00404 	addi	r3,r3,16
 4021360:	10800044 	addi	r2,r2,1
 4021364:	45000015 	stw	r20,0(r8)
 4021368:	44400115 	stw	r17,4(r8)
 402136c:	d8c02015 	stw	r3,128(sp)
 4021370:	d8801f15 	stw	r2,124(sp)
 4021374:	b0bff60e 	bge	r22,r2,4021350 <__alt_data_end+0xfffe1350>
 4021378:	d9801e04 	addi	r6,sp,120
 402137c:	b80b883a 	mov	r5,r23
 4021380:	9809883a 	mov	r4,r19
 4021384:	4026f840 	call	4026f84 <__sprint_r>
 4021388:	103d3a1e 	bne	r2,zero,4020874 <__alt_data_end+0xfffe0874>
 402138c:	d8c02017 	ldw	r3,128(sp)
 4021390:	d8801f17 	ldw	r2,124(sp)
 4021394:	da000404 	addi	r8,sp,16
 4021398:	003fee06 	br	4021354 <__alt_data_end+0xfffe1354>
 402139c:	d9403117 	ldw	r5,196(sp)
 40213a0:	d8802a17 	ldw	r2,168(sp)
 40213a4:	28adc83a 	sub	r22,r5,r2
 40213a8:	05be630e 	bge	zero,r22,4020d38 <__alt_data_end+0xfffe0d38>
 40213ac:	07000404 	movi	fp,16
 40213b0:	d8801f17 	ldw	r2,124(sp)
 40213b4:	e5838f0e 	bge	fp,r22,40221f4 <___vfprintf_internal_r+0x1d88>
 40213b8:	014100f4 	movhi	r5,1027
 40213bc:	2940cb84 	addi	r5,r5,814
 40213c0:	dc403015 	stw	r17,192(sp)
 40213c4:	d9402b15 	stw	r5,172(sp)
 40213c8:	b023883a 	mov	r17,r22
 40213cc:	04c001c4 	movi	r19,7
 40213d0:	a82d883a 	mov	r22,r21
 40213d4:	902b883a 	mov	r21,r18
 40213d8:	8025883a 	mov	r18,r16
 40213dc:	dc002c17 	ldw	r16,176(sp)
 40213e0:	00000306 	br	40213f0 <___vfprintf_internal_r+0xf84>
 40213e4:	8c7ffc04 	addi	r17,r17,-16
 40213e8:	42000204 	addi	r8,r8,8
 40213ec:	e440110e 	bge	fp,r17,4021434 <___vfprintf_internal_r+0xfc8>
 40213f0:	18c00404 	addi	r3,r3,16
 40213f4:	10800044 	addi	r2,r2,1
 40213f8:	45000015 	stw	r20,0(r8)
 40213fc:	47000115 	stw	fp,4(r8)
 4021400:	d8c02015 	stw	r3,128(sp)
 4021404:	d8801f15 	stw	r2,124(sp)
 4021408:	98bff60e 	bge	r19,r2,40213e4 <__alt_data_end+0xfffe13e4>
 402140c:	d9801e04 	addi	r6,sp,120
 4021410:	b80b883a 	mov	r5,r23
 4021414:	8009883a 	mov	r4,r16
 4021418:	4026f840 	call	4026f84 <__sprint_r>
 402141c:	103d151e 	bne	r2,zero,4020874 <__alt_data_end+0xfffe0874>
 4021420:	8c7ffc04 	addi	r17,r17,-16
 4021424:	d8c02017 	ldw	r3,128(sp)
 4021428:	d8801f17 	ldw	r2,124(sp)
 402142c:	da000404 	addi	r8,sp,16
 4021430:	e47fef16 	blt	fp,r17,40213f0 <__alt_data_end+0xfffe13f0>
 4021434:	9021883a 	mov	r16,r18
 4021438:	a825883a 	mov	r18,r21
 402143c:	b02b883a 	mov	r21,r22
 4021440:	882d883a 	mov	r22,r17
 4021444:	dc403017 	ldw	r17,192(sp)
 4021448:	d9002b17 	ldw	r4,172(sp)
 402144c:	1d87883a 	add	r3,r3,r22
 4021450:	10800044 	addi	r2,r2,1
 4021454:	41000015 	stw	r4,0(r8)
 4021458:	45800115 	stw	r22,4(r8)
 402145c:	d8c02015 	stw	r3,128(sp)
 4021460:	d8801f15 	stw	r2,124(sp)
 4021464:	010001c4 	movi	r4,7
 4021468:	20818e16 	blt	r4,r2,4021aa4 <___vfprintf_internal_r+0x1638>
 402146c:	42000204 	addi	r8,r8,8
 4021470:	003e3106 	br	4020d38 <__alt_data_end+0xfffe0d38>
 4021474:	d9403317 	ldw	r5,204(sp)
 4021478:	00800044 	movi	r2,1
 402147c:	18c00044 	addi	r3,r3,1
 4021480:	1141530e 	bge	r2,r5,40219d0 <___vfprintf_internal_r+0x1564>
 4021484:	dc401f17 	ldw	r17,124(sp)
 4021488:	00800044 	movi	r2,1
 402148c:	40800115 	stw	r2,4(r8)
 4021490:	8c400044 	addi	r17,r17,1
 4021494:	44000015 	stw	r16,0(r8)
 4021498:	d8c02015 	stw	r3,128(sp)
 402149c:	dc401f15 	stw	r17,124(sp)
 40214a0:	008001c4 	movi	r2,7
 40214a4:	14416b16 	blt	r2,r17,4021a54 <___vfprintf_internal_r+0x15e8>
 40214a8:	42000204 	addi	r8,r8,8
 40214ac:	d8803717 	ldw	r2,220(sp)
 40214b0:	d9003417 	ldw	r4,208(sp)
 40214b4:	8c400044 	addi	r17,r17,1
 40214b8:	10c7883a 	add	r3,r2,r3
 40214bc:	40800115 	stw	r2,4(r8)
 40214c0:	41000015 	stw	r4,0(r8)
 40214c4:	d8c02015 	stw	r3,128(sp)
 40214c8:	dc401f15 	stw	r17,124(sp)
 40214cc:	008001c4 	movi	r2,7
 40214d0:	14416916 	blt	r2,r17,4021a78 <___vfprintf_internal_r+0x160c>
 40214d4:	45800204 	addi	r22,r8,8
 40214d8:	d9003617 	ldw	r4,216(sp)
 40214dc:	d9403817 	ldw	r5,224(sp)
 40214e0:	000d883a 	mov	r6,zero
 40214e4:	000f883a 	mov	r7,zero
 40214e8:	d8c03c15 	stw	r3,240(sp)
 40214ec:	402b7780 	call	402b778 <__eqdf2>
 40214f0:	d8c03c17 	ldw	r3,240(sp)
 40214f4:	1000bc26 	beq	r2,zero,40217e8 <___vfprintf_internal_r+0x137c>
 40214f8:	d9403317 	ldw	r5,204(sp)
 40214fc:	84000044 	addi	r16,r16,1
 4021500:	8c400044 	addi	r17,r17,1
 4021504:	28bfffc4 	addi	r2,r5,-1
 4021508:	1887883a 	add	r3,r3,r2
 402150c:	b0800115 	stw	r2,4(r22)
 4021510:	b4000015 	stw	r16,0(r22)
 4021514:	d8c02015 	stw	r3,128(sp)
 4021518:	dc401f15 	stw	r17,124(sp)
 402151c:	008001c4 	movi	r2,7
 4021520:	14414316 	blt	r2,r17,4021a30 <___vfprintf_internal_r+0x15c4>
 4021524:	b5800204 	addi	r22,r22,8
 4021528:	d9003a17 	ldw	r4,232(sp)
 402152c:	df0022c4 	addi	fp,sp,139
 4021530:	8c400044 	addi	r17,r17,1
 4021534:	20c7883a 	add	r3,r4,r3
 4021538:	b7000015 	stw	fp,0(r22)
 402153c:	b1000115 	stw	r4,4(r22)
 4021540:	d8c02015 	stw	r3,128(sp)
 4021544:	dc401f15 	stw	r17,124(sp)
 4021548:	008001c4 	movi	r2,7
 402154c:	14400e16 	blt	r2,r17,4021588 <___vfprintf_internal_r+0x111c>
 4021550:	b2000204 	addi	r8,r22,8
 4021554:	003e3a06 	br	4020e40 <__alt_data_end+0xfffe0e40>
 4021558:	010100f4 	movhi	r4,1027
 402155c:	2100cb84 	addi	r4,r4,814
 4021560:	d9002b15 	stw	r4,172(sp)
 4021564:	d9002b17 	ldw	r4,172(sp)
 4021568:	1c07883a 	add	r3,r3,r16
 402156c:	44000115 	stw	r16,4(r8)
 4021570:	41000015 	stw	r4,0(r8)
 4021574:	10800044 	addi	r2,r2,1
 4021578:	d8c02015 	stw	r3,128(sp)
 402157c:	d8801f15 	stw	r2,124(sp)
 4021580:	010001c4 	movi	r4,7
 4021584:	20be2d0e 	bge	r4,r2,4020e3c <__alt_data_end+0xfffe0e3c>
 4021588:	d9002c17 	ldw	r4,176(sp)
 402158c:	d9801e04 	addi	r6,sp,120
 4021590:	b80b883a 	mov	r5,r23
 4021594:	4026f840 	call	4026f84 <__sprint_r>
 4021598:	103cb61e 	bne	r2,zero,4020874 <__alt_data_end+0xfffe0874>
 402159c:	d8c02017 	ldw	r3,128(sp)
 40215a0:	da000404 	addi	r8,sp,16
 40215a4:	003e2606 	br	4020e40 <__alt_data_end+0xfffe0e40>
 40215a8:	d9002c17 	ldw	r4,176(sp)
 40215ac:	d9801e04 	addi	r6,sp,120
 40215b0:	b80b883a 	mov	r5,r23
 40215b4:	4026f840 	call	4026f84 <__sprint_r>
 40215b8:	103e5d26 	beq	r2,zero,4020f30 <__alt_data_end+0xfffe0f30>
 40215bc:	003cad06 	br	4020874 <__alt_data_end+0xfffe0874>
 40215c0:	d9002c17 	ldw	r4,176(sp)
 40215c4:	d9801e04 	addi	r6,sp,120
 40215c8:	b80b883a 	mov	r5,r23
 40215cc:	4026f840 	call	4026f84 <__sprint_r>
 40215d0:	103ca81e 	bne	r2,zero,4020874 <__alt_data_end+0xfffe0874>
 40215d4:	d8c02017 	ldw	r3,128(sp)
 40215d8:	da000404 	addi	r8,sp,16
 40215dc:	003e0b06 	br	4020e0c <__alt_data_end+0xfffe0e0c>
 40215e0:	d9002c17 	ldw	r4,176(sp)
 40215e4:	d9801e04 	addi	r6,sp,120
 40215e8:	b80b883a 	mov	r5,r23
 40215ec:	4026f840 	call	4026f84 <__sprint_r>
 40215f0:	103ca01e 	bne	r2,zero,4020874 <__alt_data_end+0xfffe0874>
 40215f4:	d8c02017 	ldw	r3,128(sp)
 40215f8:	da000404 	addi	r8,sp,16
 40215fc:	003dbd06 	br	4020cf4 <__alt_data_end+0xfffe0cf4>
 4021600:	d9002c17 	ldw	r4,176(sp)
 4021604:	d9801e04 	addi	r6,sp,120
 4021608:	b80b883a 	mov	r5,r23
 402160c:	4026f840 	call	4026f84 <__sprint_r>
 4021610:	103c981e 	bne	r2,zero,4020874 <__alt_data_end+0xfffe0874>
 4021614:	d8c02017 	ldw	r3,128(sp)
 4021618:	da000404 	addi	r8,sp,16
 402161c:	003dc306 	br	4020d2c <__alt_data_end+0xfffe0d2c>
 4021620:	d8802917 	ldw	r2,164(sp)
 4021624:	d8002785 	stb	zero,158(sp)
 4021628:	103f0616 	blt	r2,zero,4021244 <__alt_data_end+0xfffe1244>
 402162c:	00ffdfc4 	movi	r3,-129
 4021630:	9d84b03a 	or	r2,r19,r22
 4021634:	90e4703a 	and	r18,r18,r3
 4021638:	103c6b26 	beq	r2,zero,40207e8 <__alt_data_end+0xfffe07e8>
 402163c:	0039883a 	mov	fp,zero
 4021640:	003e7406 	br	4021014 <__alt_data_end+0xfffe1014>
 4021644:	9080040c 	andi	r2,r18,16
 4021648:	1001b326 	beq	r2,zero,4021d18 <___vfprintf_internal_r+0x18ac>
 402164c:	d9002d17 	ldw	r4,180(sp)
 4021650:	d9402917 	ldw	r5,164(sp)
 4021654:	d8002785 	stb	zero,158(sp)
 4021658:	20800104 	addi	r2,r4,4
 402165c:	24c00017 	ldw	r19,0(r4)
 4021660:	002d883a 	mov	r22,zero
 4021664:	2801b516 	blt	r5,zero,4021d3c <___vfprintf_internal_r+0x18d0>
 4021668:	00ffdfc4 	movi	r3,-129
 402166c:	d8802d15 	stw	r2,180(sp)
 4021670:	90e4703a 	and	r18,r18,r3
 4021674:	983d2726 	beq	r19,zero,4020b14 <__alt_data_end+0xfffe0b14>
 4021678:	0039883a 	mov	fp,zero
 402167c:	003d2a06 	br	4020b28 <__alt_data_end+0xfffe0b28>
 4021680:	dc402617 	ldw	r17,152(sp)
 4021684:	0441d30e 	bge	zero,r17,4021dd4 <___vfprintf_internal_r+0x1968>
 4021688:	dc403217 	ldw	r17,200(sp)
 402168c:	d8803317 	ldw	r2,204(sp)
 4021690:	1440010e 	bge	r2,r17,4021698 <___vfprintf_internal_r+0x122c>
 4021694:	1023883a 	mov	r17,r2
 4021698:	04400a0e 	bge	zero,r17,40216c4 <___vfprintf_internal_r+0x1258>
 402169c:	d8801f17 	ldw	r2,124(sp)
 40216a0:	1c47883a 	add	r3,r3,r17
 40216a4:	44000015 	stw	r16,0(r8)
 40216a8:	10800044 	addi	r2,r2,1
 40216ac:	44400115 	stw	r17,4(r8)
 40216b0:	d8c02015 	stw	r3,128(sp)
 40216b4:	d8801f15 	stw	r2,124(sp)
 40216b8:	010001c4 	movi	r4,7
 40216bc:	20826516 	blt	r4,r2,4022054 <___vfprintf_internal_r+0x1be8>
 40216c0:	42000204 	addi	r8,r8,8
 40216c4:	88026116 	blt	r17,zero,402204c <___vfprintf_internal_r+0x1be0>
 40216c8:	d9003217 	ldw	r4,200(sp)
 40216cc:	2463c83a 	sub	r17,r4,r17
 40216d0:	04407b0e 	bge	zero,r17,40218c0 <___vfprintf_internal_r+0x1454>
 40216d4:	05800404 	movi	r22,16
 40216d8:	d8801f17 	ldw	r2,124(sp)
 40216dc:	b4419d0e 	bge	r22,r17,4021d54 <___vfprintf_internal_r+0x18e8>
 40216e0:	010100f4 	movhi	r4,1027
 40216e4:	2100cb84 	addi	r4,r4,814
 40216e8:	d9002b15 	stw	r4,172(sp)
 40216ec:	070001c4 	movi	fp,7
 40216f0:	dcc02c17 	ldw	r19,176(sp)
 40216f4:	00000306 	br	4021704 <___vfprintf_internal_r+0x1298>
 40216f8:	42000204 	addi	r8,r8,8
 40216fc:	8c7ffc04 	addi	r17,r17,-16
 4021700:	b441970e 	bge	r22,r17,4021d60 <___vfprintf_internal_r+0x18f4>
 4021704:	18c00404 	addi	r3,r3,16
 4021708:	10800044 	addi	r2,r2,1
 402170c:	45000015 	stw	r20,0(r8)
 4021710:	45800115 	stw	r22,4(r8)
 4021714:	d8c02015 	stw	r3,128(sp)
 4021718:	d8801f15 	stw	r2,124(sp)
 402171c:	e0bff60e 	bge	fp,r2,40216f8 <__alt_data_end+0xfffe16f8>
 4021720:	d9801e04 	addi	r6,sp,120
 4021724:	b80b883a 	mov	r5,r23
 4021728:	9809883a 	mov	r4,r19
 402172c:	4026f840 	call	4026f84 <__sprint_r>
 4021730:	103c501e 	bne	r2,zero,4020874 <__alt_data_end+0xfffe0874>
 4021734:	d8c02017 	ldw	r3,128(sp)
 4021738:	d8801f17 	ldw	r2,124(sp)
 402173c:	da000404 	addi	r8,sp,16
 4021740:	003fee06 	br	40216fc <__alt_data_end+0xfffe16fc>
 4021744:	d9002c17 	ldw	r4,176(sp)
 4021748:	d9801e04 	addi	r6,sp,120
 402174c:	b80b883a 	mov	r5,r23
 4021750:	4026f840 	call	4026f84 <__sprint_r>
 4021754:	103c471e 	bne	r2,zero,4020874 <__alt_data_end+0xfffe0874>
 4021758:	d8c02017 	ldw	r3,128(sp)
 402175c:	df002787 	ldb	fp,158(sp)
 4021760:	da000404 	addi	r8,sp,16
 4021764:	003d5606 	br	4020cc0 <__alt_data_end+0xfffe0cc0>
 4021768:	9080040c 	andi	r2,r18,16
 402176c:	10016126 	beq	r2,zero,4021cf4 <___vfprintf_internal_r+0x1888>
 4021770:	d8802d17 	ldw	r2,180(sp)
 4021774:	14c00017 	ldw	r19,0(r2)
 4021778:	10800104 	addi	r2,r2,4
 402177c:	d8802d15 	stw	r2,180(sp)
 4021780:	982dd7fa 	srai	r22,r19,31
 4021784:	b005883a 	mov	r2,r22
 4021788:	003c8206 	br	4020994 <__alt_data_end+0xfffe0994>
 402178c:	9080040c 	andi	r2,r18,16
 4021790:	10003526 	beq	r2,zero,4021868 <___vfprintf_internal_r+0x13fc>
 4021794:	d9402d17 	ldw	r5,180(sp)
 4021798:	d8c02917 	ldw	r3,164(sp)
 402179c:	d8002785 	stb	zero,158(sp)
 40217a0:	28800104 	addi	r2,r5,4
 40217a4:	2cc00017 	ldw	r19,0(r5)
 40217a8:	002d883a 	mov	r22,zero
 40217ac:	18003716 	blt	r3,zero,402188c <___vfprintf_internal_r+0x1420>
 40217b0:	00ffdfc4 	movi	r3,-129
 40217b4:	d8802d15 	stw	r2,180(sp)
 40217b8:	90e4703a 	and	r18,r18,r3
 40217bc:	0039883a 	mov	fp,zero
 40217c0:	983df326 	beq	r19,zero,4020f90 <__alt_data_end+0xfffe0f90>
 40217c4:	00800244 	movi	r2,9
 40217c8:	14fc7b36 	bltu	r2,r19,40209b8 <__alt_data_end+0xfffe09b8>
 40217cc:	d8c02817 	ldw	r3,160(sp)
 40217d0:	dc001dc4 	addi	r16,sp,119
 40217d4:	9cc00c04 	addi	r19,r19,48
 40217d8:	1c07c83a 	sub	r3,r3,r16
 40217dc:	dcc01dc5 	stb	r19,119(sp)
 40217e0:	d8c02e15 	stw	r3,184(sp)
 40217e4:	003ce806 	br	4020b88 <__alt_data_end+0xfffe0b88>
 40217e8:	d8803317 	ldw	r2,204(sp)
 40217ec:	143fffc4 	addi	r16,r2,-1
 40217f0:	043f4d0e 	bge	zero,r16,4021528 <__alt_data_end+0xfffe1528>
 40217f4:	07000404 	movi	fp,16
 40217f8:	e400810e 	bge	fp,r16,4021a00 <___vfprintf_internal_r+0x1594>
 40217fc:	014100f4 	movhi	r5,1027
 4021800:	2940cb84 	addi	r5,r5,814
 4021804:	d9402b15 	stw	r5,172(sp)
 4021808:	01c001c4 	movi	r7,7
 402180c:	dcc02c17 	ldw	r19,176(sp)
 4021810:	00000306 	br	4021820 <___vfprintf_internal_r+0x13b4>
 4021814:	b5800204 	addi	r22,r22,8
 4021818:	843ffc04 	addi	r16,r16,-16
 402181c:	e4007b0e 	bge	fp,r16,4021a0c <___vfprintf_internal_r+0x15a0>
 4021820:	18c00404 	addi	r3,r3,16
 4021824:	8c400044 	addi	r17,r17,1
 4021828:	b5000015 	stw	r20,0(r22)
 402182c:	b7000115 	stw	fp,4(r22)
 4021830:	d8c02015 	stw	r3,128(sp)
 4021834:	dc401f15 	stw	r17,124(sp)
 4021838:	3c7ff60e 	bge	r7,r17,4021814 <__alt_data_end+0xfffe1814>
 402183c:	d9801e04 	addi	r6,sp,120
 4021840:	b80b883a 	mov	r5,r23
 4021844:	9809883a 	mov	r4,r19
 4021848:	d9c03c15 	stw	r7,240(sp)
 402184c:	4026f840 	call	4026f84 <__sprint_r>
 4021850:	d9c03c17 	ldw	r7,240(sp)
 4021854:	103c071e 	bne	r2,zero,4020874 <__alt_data_end+0xfffe0874>
 4021858:	d8c02017 	ldw	r3,128(sp)
 402185c:	dc401f17 	ldw	r17,124(sp)
 4021860:	dd800404 	addi	r22,sp,16
 4021864:	003fec06 	br	4021818 <__alt_data_end+0xfffe1818>
 4021868:	9080100c 	andi	r2,r18,64
 402186c:	d8002785 	stb	zero,158(sp)
 4021870:	10010e26 	beq	r2,zero,4021cac <___vfprintf_internal_r+0x1840>
 4021874:	d9002d17 	ldw	r4,180(sp)
 4021878:	d9402917 	ldw	r5,164(sp)
 402187c:	002d883a 	mov	r22,zero
 4021880:	20800104 	addi	r2,r4,4
 4021884:	24c0000b 	ldhu	r19,0(r4)
 4021888:	283fc90e 	bge	r5,zero,40217b0 <__alt_data_end+0xfffe17b0>
 402188c:	d8802d15 	stw	r2,180(sp)
 4021890:	0039883a 	mov	fp,zero
 4021894:	9d84b03a 	or	r2,r19,r22
 4021898:	103c461e 	bne	r2,zero,40209b4 <__alt_data_end+0xfffe09b4>
 402189c:	00800044 	movi	r2,1
 40218a0:	003e6c06 	br	4021254 <__alt_data_end+0xfffe1254>
 40218a4:	d9002c17 	ldw	r4,176(sp)
 40218a8:	d9801e04 	addi	r6,sp,120
 40218ac:	b80b883a 	mov	r5,r23
 40218b0:	4026f840 	call	4026f84 <__sprint_r>
 40218b4:	103bef1e 	bne	r2,zero,4020874 <__alt_data_end+0xfffe0874>
 40218b8:	d8c02017 	ldw	r3,128(sp)
 40218bc:	da000404 	addi	r8,sp,16
 40218c0:	d9003217 	ldw	r4,200(sp)
 40218c4:	d8802617 	ldw	r2,152(sp)
 40218c8:	d9403317 	ldw	r5,204(sp)
 40218cc:	8123883a 	add	r17,r16,r4
 40218d0:	11400216 	blt	r2,r5,40218dc <___vfprintf_internal_r+0x1470>
 40218d4:	9100004c 	andi	r4,r18,1
 40218d8:	20000d26 	beq	r4,zero,4021910 <___vfprintf_internal_r+0x14a4>
 40218dc:	d9003717 	ldw	r4,220(sp)
 40218e0:	d9403417 	ldw	r5,208(sp)
 40218e4:	1907883a 	add	r3,r3,r4
 40218e8:	d9001f17 	ldw	r4,124(sp)
 40218ec:	41400015 	stw	r5,0(r8)
 40218f0:	d9403717 	ldw	r5,220(sp)
 40218f4:	21000044 	addi	r4,r4,1
 40218f8:	d8c02015 	stw	r3,128(sp)
 40218fc:	41400115 	stw	r5,4(r8)
 4021900:	d9001f15 	stw	r4,124(sp)
 4021904:	014001c4 	movi	r5,7
 4021908:	2901e816 	blt	r5,r4,40220ac <___vfprintf_internal_r+0x1c40>
 402190c:	42000204 	addi	r8,r8,8
 4021910:	d9003317 	ldw	r4,204(sp)
 4021914:	8121883a 	add	r16,r16,r4
 4021918:	2085c83a 	sub	r2,r4,r2
 402191c:	8461c83a 	sub	r16,r16,r17
 4021920:	1400010e 	bge	r2,r16,4021928 <___vfprintf_internal_r+0x14bc>
 4021924:	1021883a 	mov	r16,r2
 4021928:	04000a0e 	bge	zero,r16,4021954 <___vfprintf_internal_r+0x14e8>
 402192c:	d9001f17 	ldw	r4,124(sp)
 4021930:	1c07883a 	add	r3,r3,r16
 4021934:	44400015 	stw	r17,0(r8)
 4021938:	21000044 	addi	r4,r4,1
 402193c:	44000115 	stw	r16,4(r8)
 4021940:	d8c02015 	stw	r3,128(sp)
 4021944:	d9001f15 	stw	r4,124(sp)
 4021948:	014001c4 	movi	r5,7
 402194c:	2901fb16 	blt	r5,r4,402213c <___vfprintf_internal_r+0x1cd0>
 4021950:	42000204 	addi	r8,r8,8
 4021954:	8001f716 	blt	r16,zero,4022134 <___vfprintf_internal_r+0x1cc8>
 4021958:	1421c83a 	sub	r16,r2,r16
 402195c:	043d380e 	bge	zero,r16,4020e40 <__alt_data_end+0xfffe0e40>
 4021960:	04400404 	movi	r17,16
 4021964:	d8801f17 	ldw	r2,124(sp)
 4021968:	8c3efb0e 	bge	r17,r16,4021558 <__alt_data_end+0xfffe1558>
 402196c:	014100f4 	movhi	r5,1027
 4021970:	2940cb84 	addi	r5,r5,814
 4021974:	d9402b15 	stw	r5,172(sp)
 4021978:	058001c4 	movi	r22,7
 402197c:	dcc02c17 	ldw	r19,176(sp)
 4021980:	00000306 	br	4021990 <___vfprintf_internal_r+0x1524>
 4021984:	42000204 	addi	r8,r8,8
 4021988:	843ffc04 	addi	r16,r16,-16
 402198c:	8c3ef50e 	bge	r17,r16,4021564 <__alt_data_end+0xfffe1564>
 4021990:	18c00404 	addi	r3,r3,16
 4021994:	10800044 	addi	r2,r2,1
 4021998:	45000015 	stw	r20,0(r8)
 402199c:	44400115 	stw	r17,4(r8)
 40219a0:	d8c02015 	stw	r3,128(sp)
 40219a4:	d8801f15 	stw	r2,124(sp)
 40219a8:	b0bff60e 	bge	r22,r2,4021984 <__alt_data_end+0xfffe1984>
 40219ac:	d9801e04 	addi	r6,sp,120
 40219b0:	b80b883a 	mov	r5,r23
 40219b4:	9809883a 	mov	r4,r19
 40219b8:	4026f840 	call	4026f84 <__sprint_r>
 40219bc:	103bad1e 	bne	r2,zero,4020874 <__alt_data_end+0xfffe0874>
 40219c0:	d8c02017 	ldw	r3,128(sp)
 40219c4:	d8801f17 	ldw	r2,124(sp)
 40219c8:	da000404 	addi	r8,sp,16
 40219cc:	003fee06 	br	4021988 <__alt_data_end+0xfffe1988>
 40219d0:	9088703a 	and	r4,r18,r2
 40219d4:	203eab1e 	bne	r4,zero,4021484 <__alt_data_end+0xfffe1484>
 40219d8:	dc401f17 	ldw	r17,124(sp)
 40219dc:	40800115 	stw	r2,4(r8)
 40219e0:	44000015 	stw	r16,0(r8)
 40219e4:	8c400044 	addi	r17,r17,1
 40219e8:	d8c02015 	stw	r3,128(sp)
 40219ec:	dc401f15 	stw	r17,124(sp)
 40219f0:	008001c4 	movi	r2,7
 40219f4:	14400e16 	blt	r2,r17,4021a30 <___vfprintf_internal_r+0x15c4>
 40219f8:	45800204 	addi	r22,r8,8
 40219fc:	003eca06 	br	4021528 <__alt_data_end+0xfffe1528>
 4021a00:	010100f4 	movhi	r4,1027
 4021a04:	2100cb84 	addi	r4,r4,814
 4021a08:	d9002b15 	stw	r4,172(sp)
 4021a0c:	d8802b17 	ldw	r2,172(sp)
 4021a10:	1c07883a 	add	r3,r3,r16
 4021a14:	8c400044 	addi	r17,r17,1
 4021a18:	b0800015 	stw	r2,0(r22)
 4021a1c:	b4000115 	stw	r16,4(r22)
 4021a20:	d8c02015 	stw	r3,128(sp)
 4021a24:	dc401f15 	stw	r17,124(sp)
 4021a28:	008001c4 	movi	r2,7
 4021a2c:	147ebd0e 	bge	r2,r17,4021524 <__alt_data_end+0xfffe1524>
 4021a30:	d9002c17 	ldw	r4,176(sp)
 4021a34:	d9801e04 	addi	r6,sp,120
 4021a38:	b80b883a 	mov	r5,r23
 4021a3c:	4026f840 	call	4026f84 <__sprint_r>
 4021a40:	103b8c1e 	bne	r2,zero,4020874 <__alt_data_end+0xfffe0874>
 4021a44:	d8c02017 	ldw	r3,128(sp)
 4021a48:	dc401f17 	ldw	r17,124(sp)
 4021a4c:	dd800404 	addi	r22,sp,16
 4021a50:	003eb506 	br	4021528 <__alt_data_end+0xfffe1528>
 4021a54:	d9002c17 	ldw	r4,176(sp)
 4021a58:	d9801e04 	addi	r6,sp,120
 4021a5c:	b80b883a 	mov	r5,r23
 4021a60:	4026f840 	call	4026f84 <__sprint_r>
 4021a64:	103b831e 	bne	r2,zero,4020874 <__alt_data_end+0xfffe0874>
 4021a68:	d8c02017 	ldw	r3,128(sp)
 4021a6c:	dc401f17 	ldw	r17,124(sp)
 4021a70:	da000404 	addi	r8,sp,16
 4021a74:	003e8d06 	br	40214ac <__alt_data_end+0xfffe14ac>
 4021a78:	d9002c17 	ldw	r4,176(sp)
 4021a7c:	d9801e04 	addi	r6,sp,120
 4021a80:	b80b883a 	mov	r5,r23
 4021a84:	4026f840 	call	4026f84 <__sprint_r>
 4021a88:	103b7a1e 	bne	r2,zero,4020874 <__alt_data_end+0xfffe0874>
 4021a8c:	d8c02017 	ldw	r3,128(sp)
 4021a90:	dc401f17 	ldw	r17,124(sp)
 4021a94:	dd800404 	addi	r22,sp,16
 4021a98:	003e8f06 	br	40214d8 <__alt_data_end+0xfffe14d8>
 4021a9c:	0027883a 	mov	r19,zero
 4021aa0:	003f4a06 	br	40217cc <__alt_data_end+0xfffe17cc>
 4021aa4:	d9002c17 	ldw	r4,176(sp)
 4021aa8:	d9801e04 	addi	r6,sp,120
 4021aac:	b80b883a 	mov	r5,r23
 4021ab0:	4026f840 	call	4026f84 <__sprint_r>
 4021ab4:	103b6f1e 	bne	r2,zero,4020874 <__alt_data_end+0xfffe0874>
 4021ab8:	d8c02017 	ldw	r3,128(sp)
 4021abc:	da000404 	addi	r8,sp,16
 4021ac0:	003c9d06 	br	4020d38 <__alt_data_end+0xfffe0d38>
 4021ac4:	04e7c83a 	sub	r19,zero,r19
 4021ac8:	9804c03a 	cmpne	r2,r19,zero
 4021acc:	05adc83a 	sub	r22,zero,r22
 4021ad0:	b0adc83a 	sub	r22,r22,r2
 4021ad4:	d8802917 	ldw	r2,164(sp)
 4021ad8:	07000b44 	movi	fp,45
 4021adc:	df002785 	stb	fp,158(sp)
 4021ae0:	10017b16 	blt	r2,zero,40220d0 <___vfprintf_internal_r+0x1c64>
 4021ae4:	00bfdfc4 	movi	r2,-129
 4021ae8:	90a4703a 	and	r18,r18,r2
 4021aec:	003bb106 	br	40209b4 <__alt_data_end+0xfffe09b4>
 4021af0:	d9003617 	ldw	r4,216(sp)
 4021af4:	d9403817 	ldw	r5,224(sp)
 4021af8:	da003d15 	stw	r8,244(sp)
 4021afc:	4026b100 	call	4026b10 <__fpclassifyd>
 4021b00:	da003d17 	ldw	r8,244(sp)
 4021b04:	1000f026 	beq	r2,zero,4021ec8 <___vfprintf_internal_r+0x1a5c>
 4021b08:	d9002917 	ldw	r4,164(sp)
 4021b0c:	05bff7c4 	movi	r22,-33
 4021b10:	00bfffc4 	movi	r2,-1
 4021b14:	8dac703a 	and	r22,r17,r22
 4021b18:	20820026 	beq	r4,r2,402231c <___vfprintf_internal_r+0x1eb0>
 4021b1c:	008011c4 	movi	r2,71
 4021b20:	b081f726 	beq	r22,r2,4022300 <___vfprintf_internal_r+0x1e94>
 4021b24:	d9003817 	ldw	r4,224(sp)
 4021b28:	90c04014 	ori	r3,r18,256
 4021b2c:	d8c02b15 	stw	r3,172(sp)
 4021b30:	20021516 	blt	r4,zero,4022388 <___vfprintf_internal_r+0x1f1c>
 4021b34:	dcc03817 	ldw	r19,224(sp)
 4021b38:	d8002a05 	stb	zero,168(sp)
 4021b3c:	00801984 	movi	r2,102
 4021b40:	8881f926 	beq	r17,r2,4022328 <___vfprintf_internal_r+0x1ebc>
 4021b44:	00801184 	movi	r2,70
 4021b48:	88821c26 	beq	r17,r2,40223bc <___vfprintf_internal_r+0x1f50>
 4021b4c:	00801144 	movi	r2,69
 4021b50:	b081ef26 	beq	r22,r2,4022310 <___vfprintf_internal_r+0x1ea4>
 4021b54:	d8c02917 	ldw	r3,164(sp)
 4021b58:	d8802104 	addi	r2,sp,132
 4021b5c:	d8800315 	stw	r2,12(sp)
 4021b60:	d9403617 	ldw	r5,216(sp)
 4021b64:	d8802504 	addi	r2,sp,148
 4021b68:	d9002c17 	ldw	r4,176(sp)
 4021b6c:	d8800215 	stw	r2,8(sp)
 4021b70:	d8802604 	addi	r2,sp,152
 4021b74:	d8c00015 	stw	r3,0(sp)
 4021b78:	d8800115 	stw	r2,4(sp)
 4021b7c:	01c00084 	movi	r7,2
 4021b80:	980d883a 	mov	r6,r19
 4021b84:	d8c03c15 	stw	r3,240(sp)
 4021b88:	da003d15 	stw	r8,244(sp)
 4021b8c:	4022a900 	call	4022a90 <_dtoa_r>
 4021b90:	1021883a 	mov	r16,r2
 4021b94:	008019c4 	movi	r2,103
 4021b98:	d8c03c17 	ldw	r3,240(sp)
 4021b9c:	da003d17 	ldw	r8,244(sp)
 4021ba0:	88817126 	beq	r17,r2,4022168 <___vfprintf_internal_r+0x1cfc>
 4021ba4:	008011c4 	movi	r2,71
 4021ba8:	88829226 	beq	r17,r2,40225f4 <___vfprintf_internal_r+0x2188>
 4021bac:	80f9883a 	add	fp,r16,r3
 4021bb0:	d9003617 	ldw	r4,216(sp)
 4021bb4:	000d883a 	mov	r6,zero
 4021bb8:	000f883a 	mov	r7,zero
 4021bbc:	980b883a 	mov	r5,r19
 4021bc0:	da003d15 	stw	r8,244(sp)
 4021bc4:	402b7780 	call	402b778 <__eqdf2>
 4021bc8:	da003d17 	ldw	r8,244(sp)
 4021bcc:	10018d26 	beq	r2,zero,4022204 <___vfprintf_internal_r+0x1d98>
 4021bd0:	d8802117 	ldw	r2,132(sp)
 4021bd4:	1700062e 	bgeu	r2,fp,4021bf0 <___vfprintf_internal_r+0x1784>
 4021bd8:	01000c04 	movi	r4,48
 4021bdc:	10c00044 	addi	r3,r2,1
 4021be0:	d8c02115 	stw	r3,132(sp)
 4021be4:	11000005 	stb	r4,0(r2)
 4021be8:	d8802117 	ldw	r2,132(sp)
 4021bec:	173ffb36 	bltu	r2,fp,4021bdc <__alt_data_end+0xfffe1bdc>
 4021bf0:	1405c83a 	sub	r2,r2,r16
 4021bf4:	d8803315 	stw	r2,204(sp)
 4021bf8:	008011c4 	movi	r2,71
 4021bfc:	b0817626 	beq	r22,r2,40221d8 <___vfprintf_internal_r+0x1d6c>
 4021c00:	00801944 	movi	r2,101
 4021c04:	1442810e 	bge	r2,r17,402260c <___vfprintf_internal_r+0x21a0>
 4021c08:	d8c02617 	ldw	r3,152(sp)
 4021c0c:	00801984 	movi	r2,102
 4021c10:	d8c03215 	stw	r3,200(sp)
 4021c14:	8881fe26 	beq	r17,r2,4022410 <___vfprintf_internal_r+0x1fa4>
 4021c18:	d8c03217 	ldw	r3,200(sp)
 4021c1c:	d9003317 	ldw	r4,204(sp)
 4021c20:	1901dd16 	blt	r3,r4,4022398 <___vfprintf_internal_r+0x1f2c>
 4021c24:	9480004c 	andi	r18,r18,1
 4021c28:	90022b1e 	bne	r18,zero,40224d8 <___vfprintf_internal_r+0x206c>
 4021c2c:	1805883a 	mov	r2,r3
 4021c30:	18028016 	blt	r3,zero,4022634 <___vfprintf_internal_r+0x21c8>
 4021c34:	d8c03217 	ldw	r3,200(sp)
 4021c38:	044019c4 	movi	r17,103
 4021c3c:	d8c02e15 	stw	r3,184(sp)
 4021c40:	df002a07 	ldb	fp,168(sp)
 4021c44:	e001531e 	bne	fp,zero,4022194 <___vfprintf_internal_r+0x1d28>
 4021c48:	df002783 	ldbu	fp,158(sp)
 4021c4c:	d8802a15 	stw	r2,168(sp)
 4021c50:	dc802b17 	ldw	r18,172(sp)
 4021c54:	d8002915 	stw	zero,164(sp)
 4021c58:	003bd106 	br	4020ba0 <__alt_data_end+0xfffe0ba0>
 4021c5c:	d8802d17 	ldw	r2,180(sp)
 4021c60:	d8c02d17 	ldw	r3,180(sp)
 4021c64:	d9002d17 	ldw	r4,180(sp)
 4021c68:	10800017 	ldw	r2,0(r2)
 4021c6c:	18c00117 	ldw	r3,4(r3)
 4021c70:	21000204 	addi	r4,r4,8
 4021c74:	d8803615 	stw	r2,216(sp)
 4021c78:	d8c03815 	stw	r3,224(sp)
 4021c7c:	d9002d15 	stw	r4,180(sp)
 4021c80:	003b7506 	br	4020a58 <__alt_data_end+0xfffe0a58>
 4021c84:	ac400007 	ldb	r17,0(r21)
 4021c88:	003a5906 	br	40205f0 <__alt_data_end+0xfffe05f0>
 4021c8c:	9080100c 	andi	r2,r18,64
 4021c90:	1000a826 	beq	r2,zero,4021f34 <___vfprintf_internal_r+0x1ac8>
 4021c94:	d9002d17 	ldw	r4,180(sp)
 4021c98:	002d883a 	mov	r22,zero
 4021c9c:	24c0000b 	ldhu	r19,0(r4)
 4021ca0:	21000104 	addi	r4,r4,4
 4021ca4:	d9002d15 	stw	r4,180(sp)
 4021ca8:	003ccb06 	br	4020fd8 <__alt_data_end+0xfffe0fd8>
 4021cac:	d8c02d17 	ldw	r3,180(sp)
 4021cb0:	d9002917 	ldw	r4,164(sp)
 4021cb4:	002d883a 	mov	r22,zero
 4021cb8:	18800104 	addi	r2,r3,4
 4021cbc:	1cc00017 	ldw	r19,0(r3)
 4021cc0:	203ebb0e 	bge	r4,zero,40217b0 <__alt_data_end+0xfffe17b0>
 4021cc4:	003ef106 	br	402188c <__alt_data_end+0xfffe188c>
 4021cc8:	9080040c 	andi	r2,r18,16
 4021ccc:	1000921e 	bne	r2,zero,4021f18 <___vfprintf_internal_r+0x1aac>
 4021cd0:	9480100c 	andi	r18,r18,64
 4021cd4:	90013926 	beq	r18,zero,40221bc <___vfprintf_internal_r+0x1d50>
 4021cd8:	d9002d17 	ldw	r4,180(sp)
 4021cdc:	d9402f17 	ldw	r5,188(sp)
 4021ce0:	20800017 	ldw	r2,0(r4)
 4021ce4:	21000104 	addi	r4,r4,4
 4021ce8:	d9002d15 	stw	r4,180(sp)
 4021cec:	1140000d 	sth	r5,0(r2)
 4021cf0:	003a1606 	br	402054c <__alt_data_end+0xfffe054c>
 4021cf4:	9080100c 	andi	r2,r18,64
 4021cf8:	10008026 	beq	r2,zero,4021efc <___vfprintf_internal_r+0x1a90>
 4021cfc:	d8c02d17 	ldw	r3,180(sp)
 4021d00:	1cc0000f 	ldh	r19,0(r3)
 4021d04:	18c00104 	addi	r3,r3,4
 4021d08:	d8c02d15 	stw	r3,180(sp)
 4021d0c:	982dd7fa 	srai	r22,r19,31
 4021d10:	b005883a 	mov	r2,r22
 4021d14:	003b1f06 	br	4020994 <__alt_data_end+0xfffe0994>
 4021d18:	9080100c 	andi	r2,r18,64
 4021d1c:	d8002785 	stb	zero,158(sp)
 4021d20:	10008a1e 	bne	r2,zero,4021f4c <___vfprintf_internal_r+0x1ae0>
 4021d24:	d9402d17 	ldw	r5,180(sp)
 4021d28:	d8c02917 	ldw	r3,164(sp)
 4021d2c:	002d883a 	mov	r22,zero
 4021d30:	28800104 	addi	r2,r5,4
 4021d34:	2cc00017 	ldw	r19,0(r5)
 4021d38:	183e4b0e 	bge	r3,zero,4021668 <__alt_data_end+0xfffe1668>
 4021d3c:	9d86b03a 	or	r3,r19,r22
 4021d40:	d8802d15 	stw	r2,180(sp)
 4021d44:	183e4c1e 	bne	r3,zero,4021678 <__alt_data_end+0xfffe1678>
 4021d48:	0039883a 	mov	fp,zero
 4021d4c:	0005883a 	mov	r2,zero
 4021d50:	003d4006 	br	4021254 <__alt_data_end+0xfffe1254>
 4021d54:	014100f4 	movhi	r5,1027
 4021d58:	2940cb84 	addi	r5,r5,814
 4021d5c:	d9402b15 	stw	r5,172(sp)
 4021d60:	d9402b17 	ldw	r5,172(sp)
 4021d64:	1c47883a 	add	r3,r3,r17
 4021d68:	10800044 	addi	r2,r2,1
 4021d6c:	41400015 	stw	r5,0(r8)
 4021d70:	44400115 	stw	r17,4(r8)
 4021d74:	d8c02015 	stw	r3,128(sp)
 4021d78:	d8801f15 	stw	r2,124(sp)
 4021d7c:	010001c4 	movi	r4,7
 4021d80:	20bec816 	blt	r4,r2,40218a4 <__alt_data_end+0xfffe18a4>
 4021d84:	42000204 	addi	r8,r8,8
 4021d88:	003ecd06 	br	40218c0 <__alt_data_end+0xfffe18c0>
 4021d8c:	d9002917 	ldw	r4,164(sp)
 4021d90:	d8002785 	stb	zero,158(sp)
 4021d94:	203d2d16 	blt	r4,zero,402124c <__alt_data_end+0xfffe124c>
 4021d98:	00bfdfc4 	movi	r2,-129
 4021d9c:	90a4703a 	and	r18,r18,r2
 4021da0:	003a9106 	br	40207e8 <__alt_data_end+0xfffe07e8>
 4021da4:	010100f4 	movhi	r4,1027
 4021da8:	2100cb84 	addi	r4,r4,814
 4021dac:	d9002b15 	stw	r4,172(sp)
 4021db0:	003c0c06 	br	4020de4 <__alt_data_end+0xfffe0de4>
 4021db4:	d9002c17 	ldw	r4,176(sp)
 4021db8:	d9801e04 	addi	r6,sp,120
 4021dbc:	b80b883a 	mov	r5,r23
 4021dc0:	4026f840 	call	4026f84 <__sprint_r>
 4021dc4:	103aab1e 	bne	r2,zero,4020874 <__alt_data_end+0xfffe0874>
 4021dc8:	d8c02017 	ldw	r3,128(sp)
 4021dcc:	da000404 	addi	r8,sp,16
 4021dd0:	003d4106 	br	40212d8 <__alt_data_end+0xfffe12d8>
 4021dd4:	d8801f17 	ldw	r2,124(sp)
 4021dd8:	014100f4 	movhi	r5,1027
 4021ddc:	01000044 	movi	r4,1
 4021de0:	18c00044 	addi	r3,r3,1
 4021de4:	10800044 	addi	r2,r2,1
 4021de8:	2940cb04 	addi	r5,r5,812
 4021dec:	41000115 	stw	r4,4(r8)
 4021df0:	41400015 	stw	r5,0(r8)
 4021df4:	d8c02015 	stw	r3,128(sp)
 4021df8:	d8801f15 	stw	r2,124(sp)
 4021dfc:	010001c4 	movi	r4,7
 4021e00:	20805c16 	blt	r4,r2,4021f74 <___vfprintf_internal_r+0x1b08>
 4021e04:	42000204 	addi	r8,r8,8
 4021e08:	8800041e 	bne	r17,zero,4021e1c <___vfprintf_internal_r+0x19b0>
 4021e0c:	d8803317 	ldw	r2,204(sp)
 4021e10:	1000021e 	bne	r2,zero,4021e1c <___vfprintf_internal_r+0x19b0>
 4021e14:	9080004c 	andi	r2,r18,1
 4021e18:	103c0926 	beq	r2,zero,4020e40 <__alt_data_end+0xfffe0e40>
 4021e1c:	d9003717 	ldw	r4,220(sp)
 4021e20:	d8801f17 	ldw	r2,124(sp)
 4021e24:	d9403417 	ldw	r5,208(sp)
 4021e28:	20c7883a 	add	r3,r4,r3
 4021e2c:	10800044 	addi	r2,r2,1
 4021e30:	41000115 	stw	r4,4(r8)
 4021e34:	41400015 	stw	r5,0(r8)
 4021e38:	d8c02015 	stw	r3,128(sp)
 4021e3c:	d8801f15 	stw	r2,124(sp)
 4021e40:	010001c4 	movi	r4,7
 4021e44:	20812116 	blt	r4,r2,40222cc <___vfprintf_internal_r+0x1e60>
 4021e48:	42000204 	addi	r8,r8,8
 4021e4c:	0463c83a 	sub	r17,zero,r17
 4021e50:	0440730e 	bge	zero,r17,4022020 <___vfprintf_internal_r+0x1bb4>
 4021e54:	05800404 	movi	r22,16
 4021e58:	b440860e 	bge	r22,r17,4022074 <___vfprintf_internal_r+0x1c08>
 4021e5c:	014100f4 	movhi	r5,1027
 4021e60:	2940cb84 	addi	r5,r5,814
 4021e64:	d9402b15 	stw	r5,172(sp)
 4021e68:	070001c4 	movi	fp,7
 4021e6c:	dcc02c17 	ldw	r19,176(sp)
 4021e70:	00000306 	br	4021e80 <___vfprintf_internal_r+0x1a14>
 4021e74:	42000204 	addi	r8,r8,8
 4021e78:	8c7ffc04 	addi	r17,r17,-16
 4021e7c:	b440800e 	bge	r22,r17,4022080 <___vfprintf_internal_r+0x1c14>
 4021e80:	18c00404 	addi	r3,r3,16
 4021e84:	10800044 	addi	r2,r2,1
 4021e88:	45000015 	stw	r20,0(r8)
 4021e8c:	45800115 	stw	r22,4(r8)
 4021e90:	d8c02015 	stw	r3,128(sp)
 4021e94:	d8801f15 	stw	r2,124(sp)
 4021e98:	e0bff60e 	bge	fp,r2,4021e74 <__alt_data_end+0xfffe1e74>
 4021e9c:	d9801e04 	addi	r6,sp,120
 4021ea0:	b80b883a 	mov	r5,r23
 4021ea4:	9809883a 	mov	r4,r19
 4021ea8:	4026f840 	call	4026f84 <__sprint_r>
 4021eac:	103a711e 	bne	r2,zero,4020874 <__alt_data_end+0xfffe0874>
 4021eb0:	d8c02017 	ldw	r3,128(sp)
 4021eb4:	d8801f17 	ldw	r2,124(sp)
 4021eb8:	da000404 	addi	r8,sp,16
 4021ebc:	003fee06 	br	4021e78 <__alt_data_end+0xfffe1e78>
 4021ec0:	00bfffc4 	movi	r2,-1
 4021ec4:	003a6f06 	br	4020884 <__alt_data_end+0xfffe0884>
 4021ec8:	008011c4 	movi	r2,71
 4021ecc:	1440b816 	blt	r2,r17,40221b0 <___vfprintf_internal_r+0x1d44>
 4021ed0:	040100f4 	movhi	r16,1027
 4021ed4:	8400bd04 	addi	r16,r16,756
 4021ed8:	00c000c4 	movi	r3,3
 4021edc:	00bfdfc4 	movi	r2,-129
 4021ee0:	d8c02a15 	stw	r3,168(sp)
 4021ee4:	90a4703a 	and	r18,r18,r2
 4021ee8:	df002783 	ldbu	fp,158(sp)
 4021eec:	d8c02e15 	stw	r3,184(sp)
 4021ef0:	d8002915 	stw	zero,164(sp)
 4021ef4:	d8003215 	stw	zero,200(sp)
 4021ef8:	003b2906 	br	4020ba0 <__alt_data_end+0xfffe0ba0>
 4021efc:	d9002d17 	ldw	r4,180(sp)
 4021f00:	24c00017 	ldw	r19,0(r4)
 4021f04:	21000104 	addi	r4,r4,4
 4021f08:	d9002d15 	stw	r4,180(sp)
 4021f0c:	982dd7fa 	srai	r22,r19,31
 4021f10:	b005883a 	mov	r2,r22
 4021f14:	003a9f06 	br	4020994 <__alt_data_end+0xfffe0994>
 4021f18:	d9402d17 	ldw	r5,180(sp)
 4021f1c:	d8c02f17 	ldw	r3,188(sp)
 4021f20:	28800017 	ldw	r2,0(r5)
 4021f24:	29400104 	addi	r5,r5,4
 4021f28:	d9402d15 	stw	r5,180(sp)
 4021f2c:	10c00015 	stw	r3,0(r2)
 4021f30:	00398606 	br	402054c <__alt_data_end+0xfffe054c>
 4021f34:	d9402d17 	ldw	r5,180(sp)
 4021f38:	002d883a 	mov	r22,zero
 4021f3c:	2cc00017 	ldw	r19,0(r5)
 4021f40:	29400104 	addi	r5,r5,4
 4021f44:	d9402d15 	stw	r5,180(sp)
 4021f48:	003c2306 	br	4020fd8 <__alt_data_end+0xfffe0fd8>
 4021f4c:	d8c02d17 	ldw	r3,180(sp)
 4021f50:	d9002917 	ldw	r4,164(sp)
 4021f54:	002d883a 	mov	r22,zero
 4021f58:	18800104 	addi	r2,r3,4
 4021f5c:	1cc0000b 	ldhu	r19,0(r3)
 4021f60:	203dc10e 	bge	r4,zero,4021668 <__alt_data_end+0xfffe1668>
 4021f64:	003f7506 	br	4021d3c <__alt_data_end+0xfffe1d3c>
 4021f68:	040100f4 	movhi	r16,1027
 4021f6c:	8400bb04 	addi	r16,r16,748
 4021f70:	003acc06 	br	4020aa4 <__alt_data_end+0xfffe0aa4>
 4021f74:	d9002c17 	ldw	r4,176(sp)
 4021f78:	d9801e04 	addi	r6,sp,120
 4021f7c:	b80b883a 	mov	r5,r23
 4021f80:	4026f840 	call	4026f84 <__sprint_r>
 4021f84:	103a3b1e 	bne	r2,zero,4020874 <__alt_data_end+0xfffe0874>
 4021f88:	dc402617 	ldw	r17,152(sp)
 4021f8c:	d8c02017 	ldw	r3,128(sp)
 4021f90:	da000404 	addi	r8,sp,16
 4021f94:	003f9c06 	br	4021e08 <__alt_data_end+0xfffe1e08>
 4021f98:	ac400043 	ldbu	r17,1(r21)
 4021f9c:	94800814 	ori	r18,r18,32
 4021fa0:	ad400044 	addi	r21,r21,1
 4021fa4:	8c403fcc 	andi	r17,r17,255
 4021fa8:	8c40201c 	xori	r17,r17,128
 4021fac:	8c7fe004 	addi	r17,r17,-128
 4021fb0:	00398f06 	br	40205f0 <__alt_data_end+0xfffe05f0>
 4021fb4:	d8c02d15 	stw	r3,180(sp)
 4021fb8:	0039883a 	mov	fp,zero
 4021fbc:	003e3506 	br	4021894 <__alt_data_end+0xfffe1894>
 4021fc0:	d9002c17 	ldw	r4,176(sp)
 4021fc4:	d9801e04 	addi	r6,sp,120
 4021fc8:	b80b883a 	mov	r5,r23
 4021fcc:	4026f840 	call	4026f84 <__sprint_r>
 4021fd0:	103a281e 	bne	r2,zero,4020874 <__alt_data_end+0xfffe0874>
 4021fd4:	d8c02017 	ldw	r3,128(sp)
 4021fd8:	da000404 	addi	r8,sp,16
 4021fdc:	003cd006 	br	4021320 <__alt_data_end+0xfffe1320>
 4021fe0:	8009883a 	mov	r4,r16
 4021fe4:	da003d15 	stw	r8,244(sp)
 4021fe8:	4026df00 	call	4026df0 <strlen>
 4021fec:	d8802e15 	stw	r2,184(sp)
 4021ff0:	da003d17 	ldw	r8,244(sp)
 4021ff4:	103c340e 	bge	r2,zero,40210c8 <__alt_data_end+0xfffe10c8>
 4021ff8:	0005883a 	mov	r2,zero
 4021ffc:	003c3206 	br	40210c8 <__alt_data_end+0xfffe10c8>
 4022000:	d9002c17 	ldw	r4,176(sp)
 4022004:	d9801e04 	addi	r6,sp,120
 4022008:	b80b883a 	mov	r5,r23
 402200c:	4026f840 	call	4026f84 <__sprint_r>
 4022010:	103a181e 	bne	r2,zero,4020874 <__alt_data_end+0xfffe0874>
 4022014:	d8c02017 	ldw	r3,128(sp)
 4022018:	d8801f17 	ldw	r2,124(sp)
 402201c:	da000404 	addi	r8,sp,16
 4022020:	d9403317 	ldw	r5,204(sp)
 4022024:	10800044 	addi	r2,r2,1
 4022028:	44000015 	stw	r16,0(r8)
 402202c:	28c7883a 	add	r3,r5,r3
 4022030:	003b7d06 	br	4020e28 <__alt_data_end+0xfffe0e28>
 4022034:	010100f4 	movhi	r4,1027
 4022038:	2100cf84 	addi	r4,r4,830
 402203c:	d9003515 	stw	r4,212(sp)
 4022040:	003b1406 	br	4020c94 <__alt_data_end+0xfffe0c94>
 4022044:	013fffc4 	movi	r4,-1
 4022048:	003a3506 	br	4020920 <__alt_data_end+0xfffe0920>
 402204c:	0023883a 	mov	r17,zero
 4022050:	003d9d06 	br	40216c8 <__alt_data_end+0xfffe16c8>
 4022054:	d9002c17 	ldw	r4,176(sp)
 4022058:	d9801e04 	addi	r6,sp,120
 402205c:	b80b883a 	mov	r5,r23
 4022060:	4026f840 	call	4026f84 <__sprint_r>
 4022064:	103a031e 	bne	r2,zero,4020874 <__alt_data_end+0xfffe0874>
 4022068:	d8c02017 	ldw	r3,128(sp)
 402206c:	da000404 	addi	r8,sp,16
 4022070:	003d9406 	br	40216c4 <__alt_data_end+0xfffe16c4>
 4022074:	010100f4 	movhi	r4,1027
 4022078:	2100cb84 	addi	r4,r4,814
 402207c:	d9002b15 	stw	r4,172(sp)
 4022080:	d9002b17 	ldw	r4,172(sp)
 4022084:	1c47883a 	add	r3,r3,r17
 4022088:	10800044 	addi	r2,r2,1
 402208c:	41000015 	stw	r4,0(r8)
 4022090:	44400115 	stw	r17,4(r8)
 4022094:	d8c02015 	stw	r3,128(sp)
 4022098:	d8801f15 	stw	r2,124(sp)
 402209c:	010001c4 	movi	r4,7
 40220a0:	20bfd716 	blt	r4,r2,4022000 <__alt_data_end+0xfffe2000>
 40220a4:	42000204 	addi	r8,r8,8
 40220a8:	003fdd06 	br	4022020 <__alt_data_end+0xfffe2020>
 40220ac:	d9002c17 	ldw	r4,176(sp)
 40220b0:	d9801e04 	addi	r6,sp,120
 40220b4:	b80b883a 	mov	r5,r23
 40220b8:	4026f840 	call	4026f84 <__sprint_r>
 40220bc:	1039ed1e 	bne	r2,zero,4020874 <__alt_data_end+0xfffe0874>
 40220c0:	d8802617 	ldw	r2,152(sp)
 40220c4:	d8c02017 	ldw	r3,128(sp)
 40220c8:	da000404 	addi	r8,sp,16
 40220cc:	003e1006 	br	4021910 <__alt_data_end+0xfffe1910>
 40220d0:	00800044 	movi	r2,1
 40220d4:	10803fcc 	andi	r2,r2,255
 40220d8:	00c00044 	movi	r3,1
 40220dc:	10fa3526 	beq	r2,r3,40209b4 <__alt_data_end+0xfffe09b4>
 40220e0:	00c00084 	movi	r3,2
 40220e4:	10fbcb26 	beq	r2,r3,4021014 <__alt_data_end+0xfffe1014>
 40220e8:	003a8f06 	br	4020b28 <__alt_data_end+0xfffe0b28>
 40220ec:	010100f4 	movhi	r4,1027
 40220f0:	2100cf84 	addi	r4,r4,830
 40220f4:	d9003515 	stw	r4,212(sp)
 40220f8:	003b7606 	br	4020ed4 <__alt_data_end+0xfffe0ed4>
 40220fc:	d8802917 	ldw	r2,164(sp)
 4022100:	00c00184 	movi	r3,6
 4022104:	1880012e 	bgeu	r3,r2,402210c <___vfprintf_internal_r+0x1ca0>
 4022108:	1805883a 	mov	r2,r3
 402210c:	d8802e15 	stw	r2,184(sp)
 4022110:	1000ef16 	blt	r2,zero,40224d0 <___vfprintf_internal_r+0x2064>
 4022114:	040100f4 	movhi	r16,1027
 4022118:	d8802a15 	stw	r2,168(sp)
 402211c:	dcc02d15 	stw	r19,180(sp)
 4022120:	d8002915 	stw	zero,164(sp)
 4022124:	d8003215 	stw	zero,200(sp)
 4022128:	8400c904 	addi	r16,r16,804
 402212c:	0039883a 	mov	fp,zero
 4022130:	003aa206 	br	4020bbc <__alt_data_end+0xfffe0bbc>
 4022134:	0021883a 	mov	r16,zero
 4022138:	003e0706 	br	4021958 <__alt_data_end+0xfffe1958>
 402213c:	d9002c17 	ldw	r4,176(sp)
 4022140:	d9801e04 	addi	r6,sp,120
 4022144:	b80b883a 	mov	r5,r23
 4022148:	4026f840 	call	4026f84 <__sprint_r>
 402214c:	1039c91e 	bne	r2,zero,4020874 <__alt_data_end+0xfffe0874>
 4022150:	d8802617 	ldw	r2,152(sp)
 4022154:	d9403317 	ldw	r5,204(sp)
 4022158:	d8c02017 	ldw	r3,128(sp)
 402215c:	da000404 	addi	r8,sp,16
 4022160:	2885c83a 	sub	r2,r5,r2
 4022164:	003dfb06 	br	4021954 <__alt_data_end+0xfffe1954>
 4022168:	9080004c 	andi	r2,r18,1
 402216c:	103e8f1e 	bne	r2,zero,4021bac <__alt_data_end+0xfffe1bac>
 4022170:	d8802117 	ldw	r2,132(sp)
 4022174:	003e9e06 	br	4021bf0 <__alt_data_end+0xfffe1bf0>
 4022178:	1025883a 	mov	r18,r2
 402217c:	0039883a 	mov	fp,zero
 4022180:	00800084 	movi	r2,2
 4022184:	003fd306 	br	40220d4 <__alt_data_end+0xfffe20d4>
 4022188:	07000b44 	movi	fp,45
 402218c:	df002785 	stb	fp,158(sp)
 4022190:	003a4006 	br	4020a94 <__alt_data_end+0xfffe0a94>
 4022194:	00c00b44 	movi	r3,45
 4022198:	d8c02785 	stb	r3,158(sp)
 402219c:	d8802a15 	stw	r2,168(sp)
 40221a0:	dc802b17 	ldw	r18,172(sp)
 40221a4:	d8002915 	stw	zero,164(sp)
 40221a8:	07000b44 	movi	fp,45
 40221ac:	003a8006 	br	4020bb0 <__alt_data_end+0xfffe0bb0>
 40221b0:	040100f4 	movhi	r16,1027
 40221b4:	8400be04 	addi	r16,r16,760
 40221b8:	003f4706 	br	4021ed8 <__alt_data_end+0xfffe1ed8>
 40221bc:	d8c02d17 	ldw	r3,180(sp)
 40221c0:	d9002f17 	ldw	r4,188(sp)
 40221c4:	18800017 	ldw	r2,0(r3)
 40221c8:	18c00104 	addi	r3,r3,4
 40221cc:	d8c02d15 	stw	r3,180(sp)
 40221d0:	11000015 	stw	r4,0(r2)
 40221d4:	0038dd06 	br	402054c <__alt_data_end+0xfffe054c>
 40221d8:	dd802617 	ldw	r22,152(sp)
 40221dc:	00bfff44 	movi	r2,-3
 40221e0:	b0801c16 	blt	r22,r2,4022254 <___vfprintf_internal_r+0x1de8>
 40221e4:	d9402917 	ldw	r5,164(sp)
 40221e8:	2d801a16 	blt	r5,r22,4022254 <___vfprintf_internal_r+0x1de8>
 40221ec:	dd803215 	stw	r22,200(sp)
 40221f0:	003e8906 	br	4021c18 <__alt_data_end+0xfffe1c18>
 40221f4:	010100f4 	movhi	r4,1027
 40221f8:	2100cb84 	addi	r4,r4,814
 40221fc:	d9002b15 	stw	r4,172(sp)
 4022200:	003c9106 	br	4021448 <__alt_data_end+0xfffe1448>
 4022204:	e005883a 	mov	r2,fp
 4022208:	003e7906 	br	4021bf0 <__alt_data_end+0xfffe1bf0>
 402220c:	d9402917 	ldw	r5,164(sp)
 4022210:	df002783 	ldbu	fp,158(sp)
 4022214:	dcc02d15 	stw	r19,180(sp)
 4022218:	d9402a15 	stw	r5,168(sp)
 402221c:	d9402e15 	stw	r5,184(sp)
 4022220:	d8002915 	stw	zero,164(sp)
 4022224:	d8003215 	stw	zero,200(sp)
 4022228:	003a5d06 	br	4020ba0 <__alt_data_end+0xfffe0ba0>
 402222c:	9080004c 	andi	r2,r18,1
 4022230:	0039883a 	mov	fp,zero
 4022234:	10000426 	beq	r2,zero,4022248 <___vfprintf_internal_r+0x1ddc>
 4022238:	00800c04 	movi	r2,48
 402223c:	dc001dc4 	addi	r16,sp,119
 4022240:	d8801dc5 	stb	r2,119(sp)
 4022244:	003b8006 	br	4021048 <__alt_data_end+0xfffe1048>
 4022248:	d8002e15 	stw	zero,184(sp)
 402224c:	dc001e04 	addi	r16,sp,120
 4022250:	003a4d06 	br	4020b88 <__alt_data_end+0xfffe0b88>
 4022254:	8c7fff84 	addi	r17,r17,-2
 4022258:	b5bfffc4 	addi	r22,r22,-1
 402225c:	dd802615 	stw	r22,152(sp)
 4022260:	dc4022c5 	stb	r17,139(sp)
 4022264:	b000bf16 	blt	r22,zero,4022564 <___vfprintf_internal_r+0x20f8>
 4022268:	00800ac4 	movi	r2,43
 402226c:	d8802305 	stb	r2,140(sp)
 4022270:	00800244 	movi	r2,9
 4022274:	15807016 	blt	r2,r22,4022438 <___vfprintf_internal_r+0x1fcc>
 4022278:	00800c04 	movi	r2,48
 402227c:	b5800c04 	addi	r22,r22,48
 4022280:	d8802345 	stb	r2,141(sp)
 4022284:	dd802385 	stb	r22,142(sp)
 4022288:	d88023c4 	addi	r2,sp,143
 402228c:	df0022c4 	addi	fp,sp,139
 4022290:	d8c03317 	ldw	r3,204(sp)
 4022294:	1739c83a 	sub	fp,r2,fp
 4022298:	d9003317 	ldw	r4,204(sp)
 402229c:	e0c7883a 	add	r3,fp,r3
 40222a0:	df003a15 	stw	fp,232(sp)
 40222a4:	d8c02e15 	stw	r3,184(sp)
 40222a8:	00800044 	movi	r2,1
 40222ac:	1100b30e 	bge	r2,r4,402257c <___vfprintf_internal_r+0x2110>
 40222b0:	d8c02e17 	ldw	r3,184(sp)
 40222b4:	18c00044 	addi	r3,r3,1
 40222b8:	d8c02e15 	stw	r3,184(sp)
 40222bc:	1805883a 	mov	r2,r3
 40222c0:	1800ac16 	blt	r3,zero,4022574 <___vfprintf_internal_r+0x2108>
 40222c4:	d8003215 	stw	zero,200(sp)
 40222c8:	003e5d06 	br	4021c40 <__alt_data_end+0xfffe1c40>
 40222cc:	d9002c17 	ldw	r4,176(sp)
 40222d0:	d9801e04 	addi	r6,sp,120
 40222d4:	b80b883a 	mov	r5,r23
 40222d8:	4026f840 	call	4026f84 <__sprint_r>
 40222dc:	1039651e 	bne	r2,zero,4020874 <__alt_data_end+0xfffe0874>
 40222e0:	dc402617 	ldw	r17,152(sp)
 40222e4:	d8c02017 	ldw	r3,128(sp)
 40222e8:	d8801f17 	ldw	r2,124(sp)
 40222ec:	da000404 	addi	r8,sp,16
 40222f0:	003ed606 	br	4021e4c <__alt_data_end+0xfffe1e4c>
 40222f4:	582b883a 	mov	r21,r11
 40222f8:	d8002915 	stw	zero,164(sp)
 40222fc:	0038bd06 	br	40205f4 <__alt_data_end+0xfffe05f4>
 4022300:	d8802917 	ldw	r2,164(sp)
 4022304:	103e071e 	bne	r2,zero,4021b24 <__alt_data_end+0xfffe1b24>
 4022308:	dc002915 	stw	r16,164(sp)
 402230c:	003e0506 	br	4021b24 <__alt_data_end+0xfffe1b24>
 4022310:	d9002917 	ldw	r4,164(sp)
 4022314:	20c00044 	addi	r3,r4,1
 4022318:	003e0f06 	br	4021b58 <__alt_data_end+0xfffe1b58>
 402231c:	01400184 	movi	r5,6
 4022320:	d9402915 	stw	r5,164(sp)
 4022324:	003dff06 	br	4021b24 <__alt_data_end+0xfffe1b24>
 4022328:	d8802104 	addi	r2,sp,132
 402232c:	d8800315 	stw	r2,12(sp)
 4022330:	d8802504 	addi	r2,sp,148
 4022334:	d8800215 	stw	r2,8(sp)
 4022338:	d8802604 	addi	r2,sp,152
 402233c:	d8800115 	stw	r2,4(sp)
 4022340:	d8802917 	ldw	r2,164(sp)
 4022344:	d9403617 	ldw	r5,216(sp)
 4022348:	d9002c17 	ldw	r4,176(sp)
 402234c:	d8800015 	stw	r2,0(sp)
 4022350:	01c000c4 	movi	r7,3
 4022354:	980d883a 	mov	r6,r19
 4022358:	da003d15 	stw	r8,244(sp)
 402235c:	4022a900 	call	4022a90 <_dtoa_r>
 4022360:	d8c02917 	ldw	r3,164(sp)
 4022364:	da003d17 	ldw	r8,244(sp)
 4022368:	1021883a 	mov	r16,r2
 402236c:	10f9883a 	add	fp,r2,r3
 4022370:	81000007 	ldb	r4,0(r16)
 4022374:	00800c04 	movi	r2,48
 4022378:	20805e26 	beq	r4,r2,40224f4 <___vfprintf_internal_r+0x2088>
 402237c:	d8c02617 	ldw	r3,152(sp)
 4022380:	e0f9883a 	add	fp,fp,r3
 4022384:	003e0a06 	br	4021bb0 <__alt_data_end+0xfffe1bb0>
 4022388:	00c00b44 	movi	r3,45
 402238c:	24e0003c 	xorhi	r19,r4,32768
 4022390:	d8c02a05 	stb	r3,168(sp)
 4022394:	003de906 	br	4021b3c <__alt_data_end+0xfffe1b3c>
 4022398:	d8c03217 	ldw	r3,200(sp)
 402239c:	00c07a0e 	bge	zero,r3,4022588 <___vfprintf_internal_r+0x211c>
 40223a0:	00800044 	movi	r2,1
 40223a4:	d9003317 	ldw	r4,204(sp)
 40223a8:	1105883a 	add	r2,r2,r4
 40223ac:	d8802e15 	stw	r2,184(sp)
 40223b0:	10004e16 	blt	r2,zero,40224ec <___vfprintf_internal_r+0x2080>
 40223b4:	044019c4 	movi	r17,103
 40223b8:	003e2106 	br	4021c40 <__alt_data_end+0xfffe1c40>
 40223bc:	d9002917 	ldw	r4,164(sp)
 40223c0:	d8802104 	addi	r2,sp,132
 40223c4:	d8800315 	stw	r2,12(sp)
 40223c8:	d9000015 	stw	r4,0(sp)
 40223cc:	d8802504 	addi	r2,sp,148
 40223d0:	d9403617 	ldw	r5,216(sp)
 40223d4:	d9002c17 	ldw	r4,176(sp)
 40223d8:	d8800215 	stw	r2,8(sp)
 40223dc:	d8802604 	addi	r2,sp,152
 40223e0:	d8800115 	stw	r2,4(sp)
 40223e4:	01c000c4 	movi	r7,3
 40223e8:	980d883a 	mov	r6,r19
 40223ec:	da003d15 	stw	r8,244(sp)
 40223f0:	4022a900 	call	4022a90 <_dtoa_r>
 40223f4:	d8c02917 	ldw	r3,164(sp)
 40223f8:	da003d17 	ldw	r8,244(sp)
 40223fc:	1021883a 	mov	r16,r2
 4022400:	00801184 	movi	r2,70
 4022404:	80f9883a 	add	fp,r16,r3
 4022408:	88bfd926 	beq	r17,r2,4022370 <__alt_data_end+0xfffe2370>
 402240c:	003de806 	br	4021bb0 <__alt_data_end+0xfffe1bb0>
 4022410:	d9002917 	ldw	r4,164(sp)
 4022414:	00c04d0e 	bge	zero,r3,402254c <___vfprintf_internal_r+0x20e0>
 4022418:	2000441e 	bne	r4,zero,402252c <___vfprintf_internal_r+0x20c0>
 402241c:	9480004c 	andi	r18,r18,1
 4022420:	9000421e 	bne	r18,zero,402252c <___vfprintf_internal_r+0x20c0>
 4022424:	1805883a 	mov	r2,r3
 4022428:	18007016 	blt	r3,zero,40225ec <___vfprintf_internal_r+0x2180>
 402242c:	d8c03217 	ldw	r3,200(sp)
 4022430:	d8c02e15 	stw	r3,184(sp)
 4022434:	003e0206 	br	4021c40 <__alt_data_end+0xfffe1c40>
 4022438:	df0022c4 	addi	fp,sp,139
 402243c:	dc002915 	stw	r16,164(sp)
 4022440:	4027883a 	mov	r19,r8
 4022444:	e021883a 	mov	r16,fp
 4022448:	b009883a 	mov	r4,r22
 402244c:	01400284 	movi	r5,10
 4022450:	402a4b40 	call	402a4b4 <__modsi3>
 4022454:	10800c04 	addi	r2,r2,48
 4022458:	843fffc4 	addi	r16,r16,-1
 402245c:	b009883a 	mov	r4,r22
 4022460:	01400284 	movi	r5,10
 4022464:	80800005 	stb	r2,0(r16)
 4022468:	402a4300 	call	402a430 <__divsi3>
 402246c:	102d883a 	mov	r22,r2
 4022470:	00800244 	movi	r2,9
 4022474:	15bff416 	blt	r2,r22,4022448 <__alt_data_end+0xfffe2448>
 4022478:	9811883a 	mov	r8,r19
 402247c:	b0800c04 	addi	r2,r22,48
 4022480:	8027883a 	mov	r19,r16
 4022484:	997fffc4 	addi	r5,r19,-1
 4022488:	98bfffc5 	stb	r2,-1(r19)
 402248c:	dc002917 	ldw	r16,164(sp)
 4022490:	2f006a2e 	bgeu	r5,fp,402263c <___vfprintf_internal_r+0x21d0>
 4022494:	d9c02384 	addi	r7,sp,142
 4022498:	3ccfc83a 	sub	r7,r7,r19
 402249c:	d9002344 	addi	r4,sp,141
 40224a0:	e1cf883a 	add	r7,fp,r7
 40224a4:	00000106 	br	40224ac <___vfprintf_internal_r+0x2040>
 40224a8:	28800003 	ldbu	r2,0(r5)
 40224ac:	20800005 	stb	r2,0(r4)
 40224b0:	21000044 	addi	r4,r4,1
 40224b4:	29400044 	addi	r5,r5,1
 40224b8:	393ffb1e 	bne	r7,r4,40224a8 <__alt_data_end+0xfffe24a8>
 40224bc:	d8802304 	addi	r2,sp,140
 40224c0:	14c5c83a 	sub	r2,r2,r19
 40224c4:	d8c02344 	addi	r3,sp,141
 40224c8:	1885883a 	add	r2,r3,r2
 40224cc:	003f7006 	br	4022290 <__alt_data_end+0xfffe2290>
 40224d0:	0005883a 	mov	r2,zero
 40224d4:	003f0f06 	br	4022114 <__alt_data_end+0xfffe2114>
 40224d8:	d8c03217 	ldw	r3,200(sp)
 40224dc:	18c00044 	addi	r3,r3,1
 40224e0:	d8c02e15 	stw	r3,184(sp)
 40224e4:	1805883a 	mov	r2,r3
 40224e8:	183fb20e 	bge	r3,zero,40223b4 <__alt_data_end+0xfffe23b4>
 40224ec:	0005883a 	mov	r2,zero
 40224f0:	003fb006 	br	40223b4 <__alt_data_end+0xfffe23b4>
 40224f4:	d9003617 	ldw	r4,216(sp)
 40224f8:	000d883a 	mov	r6,zero
 40224fc:	000f883a 	mov	r7,zero
 4022500:	980b883a 	mov	r5,r19
 4022504:	d8c03c15 	stw	r3,240(sp)
 4022508:	da003d15 	stw	r8,244(sp)
 402250c:	402b7780 	call	402b778 <__eqdf2>
 4022510:	d8c03c17 	ldw	r3,240(sp)
 4022514:	da003d17 	ldw	r8,244(sp)
 4022518:	103f9826 	beq	r2,zero,402237c <__alt_data_end+0xfffe237c>
 402251c:	00800044 	movi	r2,1
 4022520:	10c7c83a 	sub	r3,r2,r3
 4022524:	d8c02615 	stw	r3,152(sp)
 4022528:	003f9506 	br	4022380 <__alt_data_end+0xfffe2380>
 402252c:	d9002917 	ldw	r4,164(sp)
 4022530:	d8c03217 	ldw	r3,200(sp)
 4022534:	20800044 	addi	r2,r4,1
 4022538:	1885883a 	add	r2,r3,r2
 402253c:	d8802e15 	stw	r2,184(sp)
 4022540:	103dbf0e 	bge	r2,zero,4021c40 <__alt_data_end+0xfffe1c40>
 4022544:	0005883a 	mov	r2,zero
 4022548:	003dbd06 	br	4021c40 <__alt_data_end+0xfffe1c40>
 402254c:	2000211e 	bne	r4,zero,40225d4 <___vfprintf_internal_r+0x2168>
 4022550:	9480004c 	andi	r18,r18,1
 4022554:	90001f1e 	bne	r18,zero,40225d4 <___vfprintf_internal_r+0x2168>
 4022558:	00800044 	movi	r2,1
 402255c:	d8802e15 	stw	r2,184(sp)
 4022560:	003db706 	br	4021c40 <__alt_data_end+0xfffe1c40>
 4022564:	00800b44 	movi	r2,45
 4022568:	05adc83a 	sub	r22,zero,r22
 402256c:	d8802305 	stb	r2,140(sp)
 4022570:	003f3f06 	br	4022270 <__alt_data_end+0xfffe2270>
 4022574:	0005883a 	mov	r2,zero
 4022578:	003f5206 	br	40222c4 <__alt_data_end+0xfffe22c4>
 402257c:	90a4703a 	and	r18,r18,r2
 4022580:	903f4e26 	beq	r18,zero,40222bc <__alt_data_end+0xfffe22bc>
 4022584:	003f4a06 	br	40222b0 <__alt_data_end+0xfffe22b0>
 4022588:	00800084 	movi	r2,2
 402258c:	10c5c83a 	sub	r2,r2,r3
 4022590:	003f8406 	br	40223a4 <__alt_data_end+0xfffe23a4>
 4022594:	d8802d17 	ldw	r2,180(sp)
 4022598:	d9002d17 	ldw	r4,180(sp)
 402259c:	ac400043 	ldbu	r17,1(r21)
 40225a0:	10800017 	ldw	r2,0(r2)
 40225a4:	582b883a 	mov	r21,r11
 40225a8:	d8802915 	stw	r2,164(sp)
 40225ac:	20800104 	addi	r2,r4,4
 40225b0:	d9002917 	ldw	r4,164(sp)
 40225b4:	d8802d15 	stw	r2,180(sp)
 40225b8:	203e7a0e 	bge	r4,zero,4021fa4 <__alt_data_end+0xfffe1fa4>
 40225bc:	8c403fcc 	andi	r17,r17,255
 40225c0:	00bfffc4 	movi	r2,-1
 40225c4:	8c40201c 	xori	r17,r17,128
 40225c8:	d8802915 	stw	r2,164(sp)
 40225cc:	8c7fe004 	addi	r17,r17,-128
 40225d0:	00380706 	br	40205f0 <__alt_data_end+0xfffe05f0>
 40225d4:	d8c02917 	ldw	r3,164(sp)
 40225d8:	18c00084 	addi	r3,r3,2
 40225dc:	d8c02e15 	stw	r3,184(sp)
 40225e0:	1805883a 	mov	r2,r3
 40225e4:	183d960e 	bge	r3,zero,4021c40 <__alt_data_end+0xfffe1c40>
 40225e8:	003fd606 	br	4022544 <__alt_data_end+0xfffe2544>
 40225ec:	0005883a 	mov	r2,zero
 40225f0:	003f8e06 	br	402242c <__alt_data_end+0xfffe242c>
 40225f4:	9080004c 	andi	r2,r18,1
 40225f8:	103f811e 	bne	r2,zero,4022400 <__alt_data_end+0xfffe2400>
 40225fc:	d8802117 	ldw	r2,132(sp)
 4022600:	1405c83a 	sub	r2,r2,r16
 4022604:	d8803315 	stw	r2,204(sp)
 4022608:	b47ef326 	beq	r22,r17,40221d8 <__alt_data_end+0xfffe21d8>
 402260c:	dd802617 	ldw	r22,152(sp)
 4022610:	003f1106 	br	4022258 <__alt_data_end+0xfffe2258>
 4022614:	d9c02785 	stb	r7,158(sp)
 4022618:	00390406 	br	4020a2c <__alt_data_end+0xfffe0a2c>
 402261c:	d9c02785 	stb	r7,158(sp)
 4022620:	0038d306 	br	4020970 <__alt_data_end+0xfffe0970>
 4022624:	d9c02785 	stb	r7,158(sp)
 4022628:	003a6106 	br	4020fb0 <__alt_data_end+0xfffe0fb0>
 402262c:	d9c02785 	stb	r7,158(sp)
 4022630:	003af806 	br	4021214 <__alt_data_end+0xfffe1214>
 4022634:	0005883a 	mov	r2,zero
 4022638:	003d7e06 	br	4021c34 <__alt_data_end+0xfffe1c34>
 402263c:	d8802344 	addi	r2,sp,141
 4022640:	003f1306 	br	4022290 <__alt_data_end+0xfffe2290>
 4022644:	d9c02785 	stb	r7,158(sp)
 4022648:	00392306 	br	4020ad8 <__alt_data_end+0xfffe0ad8>
 402264c:	d9c02785 	stb	r7,158(sp)
 4022650:	003aa906 	br	40210f8 <__alt_data_end+0xfffe10f8>
 4022654:	d9c02785 	stb	r7,158(sp)
 4022658:	003a3d06 	br	4020f50 <__alt_data_end+0xfffe0f50>
 402265c:	d9c02785 	stb	r7,158(sp)
 4022660:	003aca06 	br	402118c <__alt_data_end+0xfffe118c>

04022664 <__vfprintf_internal>:
 4022664:	008100f4 	movhi	r2,1027
 4022668:	10887f04 	addi	r2,r2,8700
 402266c:	300f883a 	mov	r7,r6
 4022670:	280d883a 	mov	r6,r5
 4022674:	200b883a 	mov	r5,r4
 4022678:	11000017 	ldw	r4,0(r2)
 402267c:	402046c1 	jmpi	402046c <___vfprintf_internal_r>

04022680 <__sbprintf>:
 4022680:	2880030b 	ldhu	r2,12(r5)
 4022684:	2ac01917 	ldw	r11,100(r5)
 4022688:	2a80038b 	ldhu	r10,14(r5)
 402268c:	2a400717 	ldw	r9,28(r5)
 4022690:	2a000917 	ldw	r8,36(r5)
 4022694:	defee204 	addi	sp,sp,-1144
 4022698:	00c10004 	movi	r3,1024
 402269c:	dc011a15 	stw	r16,1128(sp)
 40226a0:	10bfff4c 	andi	r2,r2,65533
 40226a4:	2821883a 	mov	r16,r5
 40226a8:	d8cb883a 	add	r5,sp,r3
 40226ac:	dc811c15 	stw	r18,1136(sp)
 40226b0:	dc411b15 	stw	r17,1132(sp)
 40226b4:	dfc11d15 	stw	ra,1140(sp)
 40226b8:	2025883a 	mov	r18,r4
 40226bc:	d881030d 	sth	r2,1036(sp)
 40226c0:	dac11915 	stw	r11,1124(sp)
 40226c4:	da81038d 	sth	r10,1038(sp)
 40226c8:	da410715 	stw	r9,1052(sp)
 40226cc:	da010915 	stw	r8,1060(sp)
 40226d0:	dec10015 	stw	sp,1024(sp)
 40226d4:	dec10415 	stw	sp,1040(sp)
 40226d8:	d8c10215 	stw	r3,1032(sp)
 40226dc:	d8c10515 	stw	r3,1044(sp)
 40226e0:	d8010615 	stw	zero,1048(sp)
 40226e4:	402046c0 	call	402046c <___vfprintf_internal_r>
 40226e8:	1023883a 	mov	r17,r2
 40226ec:	10000416 	blt	r2,zero,4022700 <__sbprintf+0x80>
 40226f0:	d9410004 	addi	r5,sp,1024
 40226f4:	9009883a 	mov	r4,r18
 40226f8:	40243340 	call	4024334 <_fflush_r>
 40226fc:	10000d1e 	bne	r2,zero,4022734 <__sbprintf+0xb4>
 4022700:	d881030b 	ldhu	r2,1036(sp)
 4022704:	1080100c 	andi	r2,r2,64
 4022708:	10000326 	beq	r2,zero,4022718 <__sbprintf+0x98>
 402270c:	8080030b 	ldhu	r2,12(r16)
 4022710:	10801014 	ori	r2,r2,64
 4022714:	8080030d 	sth	r2,12(r16)
 4022718:	8805883a 	mov	r2,r17
 402271c:	dfc11d17 	ldw	ra,1140(sp)
 4022720:	dc811c17 	ldw	r18,1136(sp)
 4022724:	dc411b17 	ldw	r17,1132(sp)
 4022728:	dc011a17 	ldw	r16,1128(sp)
 402272c:	dec11e04 	addi	sp,sp,1144
 4022730:	f800283a 	ret
 4022734:	047fffc4 	movi	r17,-1
 4022738:	003ff106 	br	4022700 <__alt_data_end+0xfffe2700>

0402273c <__swsetup_r>:
 402273c:	008100f4 	movhi	r2,1027
 4022740:	defffd04 	addi	sp,sp,-12
 4022744:	10887f04 	addi	r2,r2,8700
 4022748:	dc400115 	stw	r17,4(sp)
 402274c:	2023883a 	mov	r17,r4
 4022750:	11000017 	ldw	r4,0(r2)
 4022754:	dc000015 	stw	r16,0(sp)
 4022758:	dfc00215 	stw	ra,8(sp)
 402275c:	2821883a 	mov	r16,r5
 4022760:	20000226 	beq	r4,zero,402276c <__swsetup_r+0x30>
 4022764:	20800e17 	ldw	r2,56(r4)
 4022768:	10003126 	beq	r2,zero,4022830 <__swsetup_r+0xf4>
 402276c:	8080030b 	ldhu	r2,12(r16)
 4022770:	10c0020c 	andi	r3,r2,8
 4022774:	1009883a 	mov	r4,r2
 4022778:	18000f26 	beq	r3,zero,40227b8 <__swsetup_r+0x7c>
 402277c:	80c00417 	ldw	r3,16(r16)
 4022780:	18001526 	beq	r3,zero,40227d8 <__swsetup_r+0x9c>
 4022784:	1100004c 	andi	r4,r2,1
 4022788:	20001c1e 	bne	r4,zero,40227fc <__swsetup_r+0xc0>
 402278c:	1080008c 	andi	r2,r2,2
 4022790:	1000291e 	bne	r2,zero,4022838 <__swsetup_r+0xfc>
 4022794:	80800517 	ldw	r2,20(r16)
 4022798:	80800215 	stw	r2,8(r16)
 402279c:	18001c26 	beq	r3,zero,4022810 <__swsetup_r+0xd4>
 40227a0:	0005883a 	mov	r2,zero
 40227a4:	dfc00217 	ldw	ra,8(sp)
 40227a8:	dc400117 	ldw	r17,4(sp)
 40227ac:	dc000017 	ldw	r16,0(sp)
 40227b0:	dec00304 	addi	sp,sp,12
 40227b4:	f800283a 	ret
 40227b8:	2080040c 	andi	r2,r4,16
 40227bc:	10002e26 	beq	r2,zero,4022878 <__swsetup_r+0x13c>
 40227c0:	2080010c 	andi	r2,r4,4
 40227c4:	10001e1e 	bne	r2,zero,4022840 <__swsetup_r+0x104>
 40227c8:	80c00417 	ldw	r3,16(r16)
 40227cc:	20800214 	ori	r2,r4,8
 40227d0:	8080030d 	sth	r2,12(r16)
 40227d4:	183feb1e 	bne	r3,zero,4022784 <__alt_data_end+0xfffe2784>
 40227d8:	1100a00c 	andi	r4,r2,640
 40227dc:	01408004 	movi	r5,512
 40227e0:	217fe826 	beq	r4,r5,4022784 <__alt_data_end+0xfffe2784>
 40227e4:	800b883a 	mov	r5,r16
 40227e8:	8809883a 	mov	r4,r17
 40227ec:	4024df80 	call	4024df8 <__smakebuf_r>
 40227f0:	8080030b 	ldhu	r2,12(r16)
 40227f4:	80c00417 	ldw	r3,16(r16)
 40227f8:	003fe206 	br	4022784 <__alt_data_end+0xfffe2784>
 40227fc:	80800517 	ldw	r2,20(r16)
 4022800:	80000215 	stw	zero,8(r16)
 4022804:	0085c83a 	sub	r2,zero,r2
 4022808:	80800615 	stw	r2,24(r16)
 402280c:	183fe41e 	bne	r3,zero,40227a0 <__alt_data_end+0xfffe27a0>
 4022810:	80c0030b 	ldhu	r3,12(r16)
 4022814:	0005883a 	mov	r2,zero
 4022818:	1900200c 	andi	r4,r3,128
 402281c:	203fe126 	beq	r4,zero,40227a4 <__alt_data_end+0xfffe27a4>
 4022820:	18c01014 	ori	r3,r3,64
 4022824:	80c0030d 	sth	r3,12(r16)
 4022828:	00bfffc4 	movi	r2,-1
 402282c:	003fdd06 	br	40227a4 <__alt_data_end+0xfffe27a4>
 4022830:	40247100 	call	4024710 <__sinit>
 4022834:	003fcd06 	br	402276c <__alt_data_end+0xfffe276c>
 4022838:	0005883a 	mov	r2,zero
 402283c:	003fd606 	br	4022798 <__alt_data_end+0xfffe2798>
 4022840:	81400c17 	ldw	r5,48(r16)
 4022844:	28000626 	beq	r5,zero,4022860 <__swsetup_r+0x124>
 4022848:	80801004 	addi	r2,r16,64
 402284c:	28800326 	beq	r5,r2,402285c <__swsetup_r+0x120>
 4022850:	8809883a 	mov	r4,r17
 4022854:	40248840 	call	4024884 <_free_r>
 4022858:	8100030b 	ldhu	r4,12(r16)
 402285c:	80000c15 	stw	zero,48(r16)
 4022860:	80c00417 	ldw	r3,16(r16)
 4022864:	00bff6c4 	movi	r2,-37
 4022868:	1108703a 	and	r4,r2,r4
 402286c:	80000115 	stw	zero,4(r16)
 4022870:	80c00015 	stw	r3,0(r16)
 4022874:	003fd506 	br	40227cc <__alt_data_end+0xfffe27cc>
 4022878:	00800244 	movi	r2,9
 402287c:	88800015 	stw	r2,0(r17)
 4022880:	20801014 	ori	r2,r4,64
 4022884:	8080030d 	sth	r2,12(r16)
 4022888:	00bfffc4 	movi	r2,-1
 402288c:	003fc506 	br	40227a4 <__alt_data_end+0xfffe27a4>

04022890 <quorem>:
 4022890:	defff704 	addi	sp,sp,-36
 4022894:	dc800215 	stw	r18,8(sp)
 4022898:	20800417 	ldw	r2,16(r4)
 402289c:	2c800417 	ldw	r18,16(r5)
 40228a0:	dfc00815 	stw	ra,32(sp)
 40228a4:	ddc00715 	stw	r23,28(sp)
 40228a8:	dd800615 	stw	r22,24(sp)
 40228ac:	dd400515 	stw	r21,20(sp)
 40228b0:	dd000415 	stw	r20,16(sp)
 40228b4:	dcc00315 	stw	r19,12(sp)
 40228b8:	dc400115 	stw	r17,4(sp)
 40228bc:	dc000015 	stw	r16,0(sp)
 40228c0:	14807116 	blt	r2,r18,4022a88 <quorem+0x1f8>
 40228c4:	94bfffc4 	addi	r18,r18,-1
 40228c8:	94ad883a 	add	r22,r18,r18
 40228cc:	b5ad883a 	add	r22,r22,r22
 40228d0:	2c400504 	addi	r17,r5,20
 40228d4:	8da9883a 	add	r20,r17,r22
 40228d8:	25400504 	addi	r21,r4,20
 40228dc:	282f883a 	mov	r23,r5
 40228e0:	adad883a 	add	r22,r21,r22
 40228e4:	a1400017 	ldw	r5,0(r20)
 40228e8:	2021883a 	mov	r16,r4
 40228ec:	b1000017 	ldw	r4,0(r22)
 40228f0:	29400044 	addi	r5,r5,1
 40228f4:	402a5280 	call	402a528 <__udivsi3>
 40228f8:	1027883a 	mov	r19,r2
 40228fc:	10002c26 	beq	r2,zero,40229b0 <quorem+0x120>
 4022900:	a813883a 	mov	r9,r21
 4022904:	880b883a 	mov	r5,r17
 4022908:	0009883a 	mov	r4,zero
 402290c:	000d883a 	mov	r6,zero
 4022910:	2a000017 	ldw	r8,0(r5)
 4022914:	49c00017 	ldw	r7,0(r9)
 4022918:	29400104 	addi	r5,r5,4
 402291c:	40bfffcc 	andi	r2,r8,65535
 4022920:	14c5383a 	mul	r2,r2,r19
 4022924:	4010d43a 	srli	r8,r8,16
 4022928:	38ffffcc 	andi	r3,r7,65535
 402292c:	1105883a 	add	r2,r2,r4
 4022930:	1008d43a 	srli	r4,r2,16
 4022934:	44d1383a 	mul	r8,r8,r19
 4022938:	198d883a 	add	r6,r3,r6
 402293c:	10ffffcc 	andi	r3,r2,65535
 4022940:	30c7c83a 	sub	r3,r6,r3
 4022944:	380ed43a 	srli	r7,r7,16
 4022948:	4105883a 	add	r2,r8,r4
 402294c:	180dd43a 	srai	r6,r3,16
 4022950:	113fffcc 	andi	r4,r2,65535
 4022954:	390fc83a 	sub	r7,r7,r4
 4022958:	398d883a 	add	r6,r7,r6
 402295c:	300e943a 	slli	r7,r6,16
 4022960:	18ffffcc 	andi	r3,r3,65535
 4022964:	1008d43a 	srli	r4,r2,16
 4022968:	38ceb03a 	or	r7,r7,r3
 402296c:	49c00015 	stw	r7,0(r9)
 4022970:	300dd43a 	srai	r6,r6,16
 4022974:	4a400104 	addi	r9,r9,4
 4022978:	a17fe52e 	bgeu	r20,r5,4022910 <__alt_data_end+0xfffe2910>
 402297c:	b0800017 	ldw	r2,0(r22)
 4022980:	10000b1e 	bne	r2,zero,40229b0 <quorem+0x120>
 4022984:	b0bfff04 	addi	r2,r22,-4
 4022988:	a880082e 	bgeu	r21,r2,40229ac <quorem+0x11c>
 402298c:	b0ffff17 	ldw	r3,-4(r22)
 4022990:	18000326 	beq	r3,zero,40229a0 <quorem+0x110>
 4022994:	00000506 	br	40229ac <quorem+0x11c>
 4022998:	10c00017 	ldw	r3,0(r2)
 402299c:	1800031e 	bne	r3,zero,40229ac <quorem+0x11c>
 40229a0:	10bfff04 	addi	r2,r2,-4
 40229a4:	94bfffc4 	addi	r18,r18,-1
 40229a8:	a8bffb36 	bltu	r21,r2,4022998 <__alt_data_end+0xfffe2998>
 40229ac:	84800415 	stw	r18,16(r16)
 40229b0:	b80b883a 	mov	r5,r23
 40229b4:	8009883a 	mov	r4,r16
 40229b8:	40263dc0 	call	40263dc <__mcmp>
 40229bc:	10002616 	blt	r2,zero,4022a58 <quorem+0x1c8>
 40229c0:	9cc00044 	addi	r19,r19,1
 40229c4:	a805883a 	mov	r2,r21
 40229c8:	000b883a 	mov	r5,zero
 40229cc:	11000017 	ldw	r4,0(r2)
 40229d0:	89800017 	ldw	r6,0(r17)
 40229d4:	10800104 	addi	r2,r2,4
 40229d8:	20ffffcc 	andi	r3,r4,65535
 40229dc:	194b883a 	add	r5,r3,r5
 40229e0:	30ffffcc 	andi	r3,r6,65535
 40229e4:	28c7c83a 	sub	r3,r5,r3
 40229e8:	300cd43a 	srli	r6,r6,16
 40229ec:	2008d43a 	srli	r4,r4,16
 40229f0:	180bd43a 	srai	r5,r3,16
 40229f4:	18ffffcc 	andi	r3,r3,65535
 40229f8:	2189c83a 	sub	r4,r4,r6
 40229fc:	2149883a 	add	r4,r4,r5
 4022a00:	200c943a 	slli	r6,r4,16
 4022a04:	8c400104 	addi	r17,r17,4
 4022a08:	200bd43a 	srai	r5,r4,16
 4022a0c:	30c6b03a 	or	r3,r6,r3
 4022a10:	10ffff15 	stw	r3,-4(r2)
 4022a14:	a47fed2e 	bgeu	r20,r17,40229cc <__alt_data_end+0xfffe29cc>
 4022a18:	9485883a 	add	r2,r18,r18
 4022a1c:	1085883a 	add	r2,r2,r2
 4022a20:	a887883a 	add	r3,r21,r2
 4022a24:	18800017 	ldw	r2,0(r3)
 4022a28:	10000b1e 	bne	r2,zero,4022a58 <quorem+0x1c8>
 4022a2c:	18bfff04 	addi	r2,r3,-4
 4022a30:	a880082e 	bgeu	r21,r2,4022a54 <quorem+0x1c4>
 4022a34:	18ffff17 	ldw	r3,-4(r3)
 4022a38:	18000326 	beq	r3,zero,4022a48 <quorem+0x1b8>
 4022a3c:	00000506 	br	4022a54 <quorem+0x1c4>
 4022a40:	10c00017 	ldw	r3,0(r2)
 4022a44:	1800031e 	bne	r3,zero,4022a54 <quorem+0x1c4>
 4022a48:	10bfff04 	addi	r2,r2,-4
 4022a4c:	94bfffc4 	addi	r18,r18,-1
 4022a50:	a8bffb36 	bltu	r21,r2,4022a40 <__alt_data_end+0xfffe2a40>
 4022a54:	84800415 	stw	r18,16(r16)
 4022a58:	9805883a 	mov	r2,r19
 4022a5c:	dfc00817 	ldw	ra,32(sp)
 4022a60:	ddc00717 	ldw	r23,28(sp)
 4022a64:	dd800617 	ldw	r22,24(sp)
 4022a68:	dd400517 	ldw	r21,20(sp)
 4022a6c:	dd000417 	ldw	r20,16(sp)
 4022a70:	dcc00317 	ldw	r19,12(sp)
 4022a74:	dc800217 	ldw	r18,8(sp)
 4022a78:	dc400117 	ldw	r17,4(sp)
 4022a7c:	dc000017 	ldw	r16,0(sp)
 4022a80:	dec00904 	addi	sp,sp,36
 4022a84:	f800283a 	ret
 4022a88:	0005883a 	mov	r2,zero
 4022a8c:	003ff306 	br	4022a5c <__alt_data_end+0xfffe2a5c>

04022a90 <_dtoa_r>:
 4022a90:	20801017 	ldw	r2,64(r4)
 4022a94:	deffde04 	addi	sp,sp,-136
 4022a98:	df002015 	stw	fp,128(sp)
 4022a9c:	dcc01b15 	stw	r19,108(sp)
 4022aa0:	dc801a15 	stw	r18,104(sp)
 4022aa4:	dc401915 	stw	r17,100(sp)
 4022aa8:	dc001815 	stw	r16,96(sp)
 4022aac:	dfc02115 	stw	ra,132(sp)
 4022ab0:	ddc01f15 	stw	r23,124(sp)
 4022ab4:	dd801e15 	stw	r22,120(sp)
 4022ab8:	dd401d15 	stw	r21,116(sp)
 4022abc:	dd001c15 	stw	r20,112(sp)
 4022ac0:	d9c00315 	stw	r7,12(sp)
 4022ac4:	2039883a 	mov	fp,r4
 4022ac8:	3023883a 	mov	r17,r6
 4022acc:	2825883a 	mov	r18,r5
 4022ad0:	dc002417 	ldw	r16,144(sp)
 4022ad4:	3027883a 	mov	r19,r6
 4022ad8:	10000826 	beq	r2,zero,4022afc <_dtoa_r+0x6c>
 4022adc:	21801117 	ldw	r6,68(r4)
 4022ae0:	00c00044 	movi	r3,1
 4022ae4:	100b883a 	mov	r5,r2
 4022ae8:	1986983a 	sll	r3,r3,r6
 4022aec:	11800115 	stw	r6,4(r2)
 4022af0:	10c00215 	stw	r3,8(r2)
 4022af4:	4025bbc0 	call	4025bbc <_Bfree>
 4022af8:	e0001015 	stw	zero,64(fp)
 4022afc:	88002e16 	blt	r17,zero,4022bb8 <_dtoa_r+0x128>
 4022b00:	80000015 	stw	zero,0(r16)
 4022b04:	889ffc2c 	andhi	r2,r17,32752
 4022b08:	00dffc34 	movhi	r3,32752
 4022b0c:	10c01c26 	beq	r2,r3,4022b80 <_dtoa_r+0xf0>
 4022b10:	000d883a 	mov	r6,zero
 4022b14:	000f883a 	mov	r7,zero
 4022b18:	9009883a 	mov	r4,r18
 4022b1c:	980b883a 	mov	r5,r19
 4022b20:	402b7780 	call	402b778 <__eqdf2>
 4022b24:	10002b1e 	bne	r2,zero,4022bd4 <_dtoa_r+0x144>
 4022b28:	d9c02317 	ldw	r7,140(sp)
 4022b2c:	00800044 	movi	r2,1
 4022b30:	38800015 	stw	r2,0(r7)
 4022b34:	d8802517 	ldw	r2,148(sp)
 4022b38:	10019e26 	beq	r2,zero,40231b4 <_dtoa_r+0x724>
 4022b3c:	d8c02517 	ldw	r3,148(sp)
 4022b40:	008100f4 	movhi	r2,1027
 4022b44:	1080cb44 	addi	r2,r2,813
 4022b48:	18800015 	stw	r2,0(r3)
 4022b4c:	10bfffc4 	addi	r2,r2,-1
 4022b50:	dfc02117 	ldw	ra,132(sp)
 4022b54:	df002017 	ldw	fp,128(sp)
 4022b58:	ddc01f17 	ldw	r23,124(sp)
 4022b5c:	dd801e17 	ldw	r22,120(sp)
 4022b60:	dd401d17 	ldw	r21,116(sp)
 4022b64:	dd001c17 	ldw	r20,112(sp)
 4022b68:	dcc01b17 	ldw	r19,108(sp)
 4022b6c:	dc801a17 	ldw	r18,104(sp)
 4022b70:	dc401917 	ldw	r17,100(sp)
 4022b74:	dc001817 	ldw	r16,96(sp)
 4022b78:	dec02204 	addi	sp,sp,136
 4022b7c:	f800283a 	ret
 4022b80:	d8c02317 	ldw	r3,140(sp)
 4022b84:	0089c3c4 	movi	r2,9999
 4022b88:	18800015 	stw	r2,0(r3)
 4022b8c:	90017726 	beq	r18,zero,402316c <_dtoa_r+0x6dc>
 4022b90:	008100f4 	movhi	r2,1027
 4022b94:	1080d704 	addi	r2,r2,860
 4022b98:	d9002517 	ldw	r4,148(sp)
 4022b9c:	203fec26 	beq	r4,zero,4022b50 <__alt_data_end+0xfffe2b50>
 4022ba0:	10c000c7 	ldb	r3,3(r2)
 4022ba4:	1801781e 	bne	r3,zero,4023188 <_dtoa_r+0x6f8>
 4022ba8:	10c000c4 	addi	r3,r2,3
 4022bac:	d9802517 	ldw	r6,148(sp)
 4022bb0:	30c00015 	stw	r3,0(r6)
 4022bb4:	003fe606 	br	4022b50 <__alt_data_end+0xfffe2b50>
 4022bb8:	04e00034 	movhi	r19,32768
 4022bbc:	9cffffc4 	addi	r19,r19,-1
 4022bc0:	00800044 	movi	r2,1
 4022bc4:	8ce6703a 	and	r19,r17,r19
 4022bc8:	80800015 	stw	r2,0(r16)
 4022bcc:	9823883a 	mov	r17,r19
 4022bd0:	003fcc06 	br	4022b04 <__alt_data_end+0xfffe2b04>
 4022bd4:	d8800204 	addi	r2,sp,8
 4022bd8:	d8800015 	stw	r2,0(sp)
 4022bdc:	d9c00104 	addi	r7,sp,4
 4022be0:	900b883a 	mov	r5,r18
 4022be4:	980d883a 	mov	r6,r19
 4022be8:	e009883a 	mov	r4,fp
 4022bec:	8820d53a 	srli	r16,r17,20
 4022bf0:	40267a80 	call	40267a8 <__d2b>
 4022bf4:	d8800915 	stw	r2,36(sp)
 4022bf8:	8001651e 	bne	r16,zero,4023190 <_dtoa_r+0x700>
 4022bfc:	dd800217 	ldw	r22,8(sp)
 4022c00:	dc000117 	ldw	r16,4(sp)
 4022c04:	00800804 	movi	r2,32
 4022c08:	b421883a 	add	r16,r22,r16
 4022c0c:	80c10c84 	addi	r3,r16,1074
 4022c10:	10c2d10e 	bge	r2,r3,4023758 <_dtoa_r+0xcc8>
 4022c14:	00801004 	movi	r2,64
 4022c18:	81010484 	addi	r4,r16,1042
 4022c1c:	10c7c83a 	sub	r3,r2,r3
 4022c20:	9108d83a 	srl	r4,r18,r4
 4022c24:	88e2983a 	sll	r17,r17,r3
 4022c28:	2448b03a 	or	r4,r4,r17
 4022c2c:	402cb400 	call	402cb40 <__floatunsidf>
 4022c30:	017f8434 	movhi	r5,65040
 4022c34:	01800044 	movi	r6,1
 4022c38:	1009883a 	mov	r4,r2
 4022c3c:	194b883a 	add	r5,r3,r5
 4022c40:	843fffc4 	addi	r16,r16,-1
 4022c44:	d9801115 	stw	r6,68(sp)
 4022c48:	000d883a 	mov	r6,zero
 4022c4c:	01cffe34 	movhi	r7,16376
 4022c50:	402c0e80 	call	402c0e8 <__subdf3>
 4022c54:	0198dbf4 	movhi	r6,25455
 4022c58:	01cff4f4 	movhi	r7,16339
 4022c5c:	3190d844 	addi	r6,r6,17249
 4022c60:	39e1e9c4 	addi	r7,r7,-30809
 4022c64:	1009883a 	mov	r4,r2
 4022c68:	180b883a 	mov	r5,r3
 4022c6c:	402b9d00 	call	402b9d0 <__muldf3>
 4022c70:	01a2d874 	movhi	r6,35681
 4022c74:	01cff1f4 	movhi	r7,16327
 4022c78:	31b22cc4 	addi	r6,r6,-14157
 4022c7c:	39e28a04 	addi	r7,r7,-30168
 4022c80:	180b883a 	mov	r5,r3
 4022c84:	1009883a 	mov	r4,r2
 4022c88:	402a5e40 	call	402a5e4 <__adddf3>
 4022c8c:	8009883a 	mov	r4,r16
 4022c90:	1029883a 	mov	r20,r2
 4022c94:	1823883a 	mov	r17,r3
 4022c98:	402ca640 	call	402ca64 <__floatsidf>
 4022c9c:	019427f4 	movhi	r6,20639
 4022ca0:	01cff4f4 	movhi	r7,16339
 4022ca4:	319e7ec4 	addi	r6,r6,31227
 4022ca8:	39d104c4 	addi	r7,r7,17427
 4022cac:	1009883a 	mov	r4,r2
 4022cb0:	180b883a 	mov	r5,r3
 4022cb4:	402b9d00 	call	402b9d0 <__muldf3>
 4022cb8:	100d883a 	mov	r6,r2
 4022cbc:	180f883a 	mov	r7,r3
 4022cc0:	a009883a 	mov	r4,r20
 4022cc4:	880b883a 	mov	r5,r17
 4022cc8:	402a5e40 	call	402a5e4 <__adddf3>
 4022ccc:	1009883a 	mov	r4,r2
 4022cd0:	180b883a 	mov	r5,r3
 4022cd4:	1029883a 	mov	r20,r2
 4022cd8:	1823883a 	mov	r17,r3
 4022cdc:	402c9e40 	call	402c9e4 <__fixdfsi>
 4022ce0:	000d883a 	mov	r6,zero
 4022ce4:	000f883a 	mov	r7,zero
 4022ce8:	a009883a 	mov	r4,r20
 4022cec:	880b883a 	mov	r5,r17
 4022cf0:	d8800515 	stw	r2,20(sp)
 4022cf4:	402b8dc0 	call	402b8dc <__ledf2>
 4022cf8:	10028716 	blt	r2,zero,4023718 <_dtoa_r+0xc88>
 4022cfc:	d8c00517 	ldw	r3,20(sp)
 4022d00:	00800584 	movi	r2,22
 4022d04:	10c27536 	bltu	r2,r3,40236dc <_dtoa_r+0xc4c>
 4022d08:	180490fa 	slli	r2,r3,3
 4022d0c:	00c100f4 	movhi	r3,1027
 4022d10:	18c0f304 	addi	r3,r3,972
 4022d14:	1885883a 	add	r2,r3,r2
 4022d18:	11000017 	ldw	r4,0(r2)
 4022d1c:	11400117 	ldw	r5,4(r2)
 4022d20:	900d883a 	mov	r6,r18
 4022d24:	980f883a 	mov	r7,r19
 4022d28:	402b8000 	call	402b800 <__gedf2>
 4022d2c:	00828d0e 	bge	zero,r2,4023764 <_dtoa_r+0xcd4>
 4022d30:	d9000517 	ldw	r4,20(sp)
 4022d34:	d8000e15 	stw	zero,56(sp)
 4022d38:	213fffc4 	addi	r4,r4,-1
 4022d3c:	d9000515 	stw	r4,20(sp)
 4022d40:	b42dc83a 	sub	r22,r22,r16
 4022d44:	b5bfffc4 	addi	r22,r22,-1
 4022d48:	b0026f16 	blt	r22,zero,4023708 <_dtoa_r+0xc78>
 4022d4c:	d8000815 	stw	zero,32(sp)
 4022d50:	d9c00517 	ldw	r7,20(sp)
 4022d54:	38026416 	blt	r7,zero,40236e8 <_dtoa_r+0xc58>
 4022d58:	b1ed883a 	add	r22,r22,r7
 4022d5c:	d9c00d15 	stw	r7,52(sp)
 4022d60:	d8000a15 	stw	zero,40(sp)
 4022d64:	d9800317 	ldw	r6,12(sp)
 4022d68:	00800244 	movi	r2,9
 4022d6c:	11811436 	bltu	r2,r6,40231c0 <_dtoa_r+0x730>
 4022d70:	00800144 	movi	r2,5
 4022d74:	1184e10e 	bge	r2,r6,40240fc <_dtoa_r+0x166c>
 4022d78:	31bfff04 	addi	r6,r6,-4
 4022d7c:	d9800315 	stw	r6,12(sp)
 4022d80:	0023883a 	mov	r17,zero
 4022d84:	d9800317 	ldw	r6,12(sp)
 4022d88:	008000c4 	movi	r2,3
 4022d8c:	30836726 	beq	r6,r2,4023b2c <_dtoa_r+0x109c>
 4022d90:	1183410e 	bge	r2,r6,4023a98 <_dtoa_r+0x1008>
 4022d94:	d9c00317 	ldw	r7,12(sp)
 4022d98:	00800104 	movi	r2,4
 4022d9c:	38827c26 	beq	r7,r2,4023790 <_dtoa_r+0xd00>
 4022da0:	00800144 	movi	r2,5
 4022da4:	3884c41e 	bne	r7,r2,40240b8 <_dtoa_r+0x1628>
 4022da8:	00800044 	movi	r2,1
 4022dac:	d8800b15 	stw	r2,44(sp)
 4022db0:	d8c00517 	ldw	r3,20(sp)
 4022db4:	d9002217 	ldw	r4,136(sp)
 4022db8:	1907883a 	add	r3,r3,r4
 4022dbc:	19800044 	addi	r6,r3,1
 4022dc0:	d8c00c15 	stw	r3,48(sp)
 4022dc4:	d9800615 	stw	r6,24(sp)
 4022dc8:	0183a40e 	bge	zero,r6,4023c5c <_dtoa_r+0x11cc>
 4022dcc:	d9800617 	ldw	r6,24(sp)
 4022dd0:	3021883a 	mov	r16,r6
 4022dd4:	e0001115 	stw	zero,68(fp)
 4022dd8:	008005c4 	movi	r2,23
 4022ddc:	1184c92e 	bgeu	r2,r6,4024104 <_dtoa_r+0x1674>
 4022de0:	00c00044 	movi	r3,1
 4022de4:	00800104 	movi	r2,4
 4022de8:	1085883a 	add	r2,r2,r2
 4022dec:	11000504 	addi	r4,r2,20
 4022df0:	180b883a 	mov	r5,r3
 4022df4:	18c00044 	addi	r3,r3,1
 4022df8:	313ffb2e 	bgeu	r6,r4,4022de8 <__alt_data_end+0xfffe2de8>
 4022dfc:	e1401115 	stw	r5,68(fp)
 4022e00:	e009883a 	mov	r4,fp
 4022e04:	4025b140 	call	4025b14 <_Balloc>
 4022e08:	d8800715 	stw	r2,28(sp)
 4022e0c:	e0801015 	stw	r2,64(fp)
 4022e10:	00800384 	movi	r2,14
 4022e14:	1400f736 	bltu	r2,r16,40231f4 <_dtoa_r+0x764>
 4022e18:	8800f626 	beq	r17,zero,40231f4 <_dtoa_r+0x764>
 4022e1c:	d9c00517 	ldw	r7,20(sp)
 4022e20:	01c39a0e 	bge	zero,r7,4023c8c <_dtoa_r+0x11fc>
 4022e24:	388003cc 	andi	r2,r7,15
 4022e28:	100490fa 	slli	r2,r2,3
 4022e2c:	382bd13a 	srai	r21,r7,4
 4022e30:	00c100f4 	movhi	r3,1027
 4022e34:	18c0f304 	addi	r3,r3,972
 4022e38:	1885883a 	add	r2,r3,r2
 4022e3c:	a8c0040c 	andi	r3,r21,16
 4022e40:	12400017 	ldw	r9,0(r2)
 4022e44:	12000117 	ldw	r8,4(r2)
 4022e48:	18037926 	beq	r3,zero,4023c30 <_dtoa_r+0x11a0>
 4022e4c:	008100f4 	movhi	r2,1027
 4022e50:	1080e904 	addi	r2,r2,932
 4022e54:	11800817 	ldw	r6,32(r2)
 4022e58:	11c00917 	ldw	r7,36(r2)
 4022e5c:	9009883a 	mov	r4,r18
 4022e60:	980b883a 	mov	r5,r19
 4022e64:	da001715 	stw	r8,92(sp)
 4022e68:	da401615 	stw	r9,88(sp)
 4022e6c:	402ae900 	call	402ae90 <__divdf3>
 4022e70:	da001717 	ldw	r8,92(sp)
 4022e74:	da401617 	ldw	r9,88(sp)
 4022e78:	ad4003cc 	andi	r21,r21,15
 4022e7c:	040000c4 	movi	r16,3
 4022e80:	1023883a 	mov	r17,r2
 4022e84:	1829883a 	mov	r20,r3
 4022e88:	a8001126 	beq	r21,zero,4022ed0 <_dtoa_r+0x440>
 4022e8c:	05c100f4 	movhi	r23,1027
 4022e90:	bdc0e904 	addi	r23,r23,932
 4022e94:	4805883a 	mov	r2,r9
 4022e98:	4007883a 	mov	r3,r8
 4022e9c:	a980004c 	andi	r6,r21,1
 4022ea0:	1009883a 	mov	r4,r2
 4022ea4:	a82bd07a 	srai	r21,r21,1
 4022ea8:	180b883a 	mov	r5,r3
 4022eac:	30000426 	beq	r6,zero,4022ec0 <_dtoa_r+0x430>
 4022eb0:	b9800017 	ldw	r6,0(r23)
 4022eb4:	b9c00117 	ldw	r7,4(r23)
 4022eb8:	84000044 	addi	r16,r16,1
 4022ebc:	402b9d00 	call	402b9d0 <__muldf3>
 4022ec0:	bdc00204 	addi	r23,r23,8
 4022ec4:	a83ff51e 	bne	r21,zero,4022e9c <__alt_data_end+0xfffe2e9c>
 4022ec8:	1013883a 	mov	r9,r2
 4022ecc:	1811883a 	mov	r8,r3
 4022ed0:	480d883a 	mov	r6,r9
 4022ed4:	400f883a 	mov	r7,r8
 4022ed8:	8809883a 	mov	r4,r17
 4022edc:	a00b883a 	mov	r5,r20
 4022ee0:	402ae900 	call	402ae90 <__divdf3>
 4022ee4:	d8800f15 	stw	r2,60(sp)
 4022ee8:	d8c01015 	stw	r3,64(sp)
 4022eec:	d8c00e17 	ldw	r3,56(sp)
 4022ef0:	18000626 	beq	r3,zero,4022f0c <_dtoa_r+0x47c>
 4022ef4:	d9000f17 	ldw	r4,60(sp)
 4022ef8:	d9401017 	ldw	r5,64(sp)
 4022efc:	000d883a 	mov	r6,zero
 4022f00:	01cffc34 	movhi	r7,16368
 4022f04:	402b8dc0 	call	402b8dc <__ledf2>
 4022f08:	10040b16 	blt	r2,zero,4023f38 <_dtoa_r+0x14a8>
 4022f0c:	8009883a 	mov	r4,r16
 4022f10:	402ca640 	call	402ca64 <__floatsidf>
 4022f14:	d9800f17 	ldw	r6,60(sp)
 4022f18:	d9c01017 	ldw	r7,64(sp)
 4022f1c:	1009883a 	mov	r4,r2
 4022f20:	180b883a 	mov	r5,r3
 4022f24:	402b9d00 	call	402b9d0 <__muldf3>
 4022f28:	000d883a 	mov	r6,zero
 4022f2c:	01d00734 	movhi	r7,16412
 4022f30:	1009883a 	mov	r4,r2
 4022f34:	180b883a 	mov	r5,r3
 4022f38:	402a5e40 	call	402a5e4 <__adddf3>
 4022f3c:	1021883a 	mov	r16,r2
 4022f40:	d8800617 	ldw	r2,24(sp)
 4022f44:	047f3034 	movhi	r17,64704
 4022f48:	1c63883a 	add	r17,r3,r17
 4022f4c:	10031826 	beq	r2,zero,4023bb0 <_dtoa_r+0x1120>
 4022f50:	d8c00517 	ldw	r3,20(sp)
 4022f54:	db000617 	ldw	r12,24(sp)
 4022f58:	d8c01315 	stw	r3,76(sp)
 4022f5c:	d9000b17 	ldw	r4,44(sp)
 4022f60:	20038f26 	beq	r4,zero,4023da0 <_dtoa_r+0x1310>
 4022f64:	60bfffc4 	addi	r2,r12,-1
 4022f68:	100490fa 	slli	r2,r2,3
 4022f6c:	00c100f4 	movhi	r3,1027
 4022f70:	18c0f304 	addi	r3,r3,972
 4022f74:	1885883a 	add	r2,r3,r2
 4022f78:	11800017 	ldw	r6,0(r2)
 4022f7c:	11c00117 	ldw	r7,4(r2)
 4022f80:	d8800717 	ldw	r2,28(sp)
 4022f84:	0009883a 	mov	r4,zero
 4022f88:	014ff834 	movhi	r5,16352
 4022f8c:	db001615 	stw	r12,88(sp)
 4022f90:	15c00044 	addi	r23,r2,1
 4022f94:	402ae900 	call	402ae90 <__divdf3>
 4022f98:	800d883a 	mov	r6,r16
 4022f9c:	880f883a 	mov	r7,r17
 4022fa0:	1009883a 	mov	r4,r2
 4022fa4:	180b883a 	mov	r5,r3
 4022fa8:	402c0e80 	call	402c0e8 <__subdf3>
 4022fac:	d9401017 	ldw	r5,64(sp)
 4022fb0:	d9000f17 	ldw	r4,60(sp)
 4022fb4:	102b883a 	mov	r21,r2
 4022fb8:	d8c01215 	stw	r3,72(sp)
 4022fbc:	402c9e40 	call	402c9e4 <__fixdfsi>
 4022fc0:	1009883a 	mov	r4,r2
 4022fc4:	1029883a 	mov	r20,r2
 4022fc8:	402ca640 	call	402ca64 <__floatsidf>
 4022fcc:	d9000f17 	ldw	r4,60(sp)
 4022fd0:	d9401017 	ldw	r5,64(sp)
 4022fd4:	100d883a 	mov	r6,r2
 4022fd8:	180f883a 	mov	r7,r3
 4022fdc:	402c0e80 	call	402c0e8 <__subdf3>
 4022fe0:	1823883a 	mov	r17,r3
 4022fe4:	d8c00717 	ldw	r3,28(sp)
 4022fe8:	d9401217 	ldw	r5,72(sp)
 4022fec:	a2000c04 	addi	r8,r20,48
 4022ff0:	1021883a 	mov	r16,r2
 4022ff4:	1a000005 	stb	r8,0(r3)
 4022ff8:	800d883a 	mov	r6,r16
 4022ffc:	880f883a 	mov	r7,r17
 4023000:	a809883a 	mov	r4,r21
 4023004:	4029883a 	mov	r20,r8
 4023008:	402b8000 	call	402b800 <__gedf2>
 402300c:	00841d16 	blt	zero,r2,4024084 <_dtoa_r+0x15f4>
 4023010:	800d883a 	mov	r6,r16
 4023014:	880f883a 	mov	r7,r17
 4023018:	0009883a 	mov	r4,zero
 402301c:	014ffc34 	movhi	r5,16368
 4023020:	402c0e80 	call	402c0e8 <__subdf3>
 4023024:	d9401217 	ldw	r5,72(sp)
 4023028:	100d883a 	mov	r6,r2
 402302c:	180f883a 	mov	r7,r3
 4023030:	a809883a 	mov	r4,r21
 4023034:	402b8000 	call	402b800 <__gedf2>
 4023038:	db001617 	ldw	r12,88(sp)
 402303c:	00840e16 	blt	zero,r2,4024078 <_dtoa_r+0x15e8>
 4023040:	00800044 	movi	r2,1
 4023044:	13006b0e 	bge	r2,r12,40231f4 <_dtoa_r+0x764>
 4023048:	d9000717 	ldw	r4,28(sp)
 402304c:	dd800f15 	stw	r22,60(sp)
 4023050:	dcc01015 	stw	r19,64(sp)
 4023054:	2319883a 	add	r12,r4,r12
 4023058:	dcc01217 	ldw	r19,72(sp)
 402305c:	602d883a 	mov	r22,r12
 4023060:	dc801215 	stw	r18,72(sp)
 4023064:	b825883a 	mov	r18,r23
 4023068:	00000906 	br	4023090 <_dtoa_r+0x600>
 402306c:	402c0e80 	call	402c0e8 <__subdf3>
 4023070:	a80d883a 	mov	r6,r21
 4023074:	980f883a 	mov	r7,r19
 4023078:	1009883a 	mov	r4,r2
 402307c:	180b883a 	mov	r5,r3
 4023080:	402b8dc0 	call	402b8dc <__ledf2>
 4023084:	1003e816 	blt	r2,zero,4024028 <_dtoa_r+0x1598>
 4023088:	b825883a 	mov	r18,r23
 402308c:	bd83e926 	beq	r23,r22,4024034 <_dtoa_r+0x15a4>
 4023090:	a809883a 	mov	r4,r21
 4023094:	980b883a 	mov	r5,r19
 4023098:	000d883a 	mov	r6,zero
 402309c:	01d00934 	movhi	r7,16420
 40230a0:	402b9d00 	call	402b9d0 <__muldf3>
 40230a4:	000d883a 	mov	r6,zero
 40230a8:	01d00934 	movhi	r7,16420
 40230ac:	8009883a 	mov	r4,r16
 40230b0:	880b883a 	mov	r5,r17
 40230b4:	102b883a 	mov	r21,r2
 40230b8:	1827883a 	mov	r19,r3
 40230bc:	402b9d00 	call	402b9d0 <__muldf3>
 40230c0:	180b883a 	mov	r5,r3
 40230c4:	1009883a 	mov	r4,r2
 40230c8:	1821883a 	mov	r16,r3
 40230cc:	1023883a 	mov	r17,r2
 40230d0:	402c9e40 	call	402c9e4 <__fixdfsi>
 40230d4:	1009883a 	mov	r4,r2
 40230d8:	1029883a 	mov	r20,r2
 40230dc:	402ca640 	call	402ca64 <__floatsidf>
 40230e0:	8809883a 	mov	r4,r17
 40230e4:	800b883a 	mov	r5,r16
 40230e8:	100d883a 	mov	r6,r2
 40230ec:	180f883a 	mov	r7,r3
 40230f0:	402c0e80 	call	402c0e8 <__subdf3>
 40230f4:	a5000c04 	addi	r20,r20,48
 40230f8:	a80d883a 	mov	r6,r21
 40230fc:	980f883a 	mov	r7,r19
 4023100:	1009883a 	mov	r4,r2
 4023104:	180b883a 	mov	r5,r3
 4023108:	95000005 	stb	r20,0(r18)
 402310c:	1021883a 	mov	r16,r2
 4023110:	1823883a 	mov	r17,r3
 4023114:	402b8dc0 	call	402b8dc <__ledf2>
 4023118:	bdc00044 	addi	r23,r23,1
 402311c:	800d883a 	mov	r6,r16
 4023120:	880f883a 	mov	r7,r17
 4023124:	0009883a 	mov	r4,zero
 4023128:	014ffc34 	movhi	r5,16368
 402312c:	103fcf0e 	bge	r2,zero,402306c <__alt_data_end+0xfffe306c>
 4023130:	d8c01317 	ldw	r3,76(sp)
 4023134:	d8c00515 	stw	r3,20(sp)
 4023138:	d9400917 	ldw	r5,36(sp)
 402313c:	e009883a 	mov	r4,fp
 4023140:	4025bbc0 	call	4025bbc <_Bfree>
 4023144:	d9000517 	ldw	r4,20(sp)
 4023148:	d9802317 	ldw	r6,140(sp)
 402314c:	d9c02517 	ldw	r7,148(sp)
 4023150:	b8000005 	stb	zero,0(r23)
 4023154:	20800044 	addi	r2,r4,1
 4023158:	30800015 	stw	r2,0(r6)
 402315c:	3802aa26 	beq	r7,zero,4023c08 <_dtoa_r+0x1178>
 4023160:	3dc00015 	stw	r23,0(r7)
 4023164:	d8800717 	ldw	r2,28(sp)
 4023168:	003e7906 	br	4022b50 <__alt_data_end+0xfffe2b50>
 402316c:	00800434 	movhi	r2,16
 4023170:	10bfffc4 	addi	r2,r2,-1
 4023174:	88a2703a 	and	r17,r17,r2
 4023178:	883e851e 	bne	r17,zero,4022b90 <__alt_data_end+0xfffe2b90>
 402317c:	008100f4 	movhi	r2,1027
 4023180:	1080d404 	addi	r2,r2,848
 4023184:	003e8406 	br	4022b98 <__alt_data_end+0xfffe2b98>
 4023188:	10c00204 	addi	r3,r2,8
 402318c:	003e8706 	br	4022bac <__alt_data_end+0xfffe2bac>
 4023190:	01400434 	movhi	r5,16
 4023194:	297fffc4 	addi	r5,r5,-1
 4023198:	994a703a 	and	r5,r19,r5
 402319c:	9009883a 	mov	r4,r18
 40231a0:	843f0044 	addi	r16,r16,-1023
 40231a4:	294ffc34 	orhi	r5,r5,16368
 40231a8:	dd800217 	ldw	r22,8(sp)
 40231ac:	d8001115 	stw	zero,68(sp)
 40231b0:	003ea506 	br	4022c48 <__alt_data_end+0xfffe2c48>
 40231b4:	008100f4 	movhi	r2,1027
 40231b8:	1080cb04 	addi	r2,r2,812
 40231bc:	003e6406 	br	4022b50 <__alt_data_end+0xfffe2b50>
 40231c0:	e0001115 	stw	zero,68(fp)
 40231c4:	000b883a 	mov	r5,zero
 40231c8:	e009883a 	mov	r4,fp
 40231cc:	4025b140 	call	4025b14 <_Balloc>
 40231d0:	01bfffc4 	movi	r6,-1
 40231d4:	01c00044 	movi	r7,1
 40231d8:	d8800715 	stw	r2,28(sp)
 40231dc:	d9800c15 	stw	r6,48(sp)
 40231e0:	e0801015 	stw	r2,64(fp)
 40231e4:	d8000315 	stw	zero,12(sp)
 40231e8:	d9c00b15 	stw	r7,44(sp)
 40231ec:	d9800615 	stw	r6,24(sp)
 40231f0:	d8002215 	stw	zero,136(sp)
 40231f4:	d8800117 	ldw	r2,4(sp)
 40231f8:	10008916 	blt	r2,zero,4023420 <_dtoa_r+0x990>
 40231fc:	d9000517 	ldw	r4,20(sp)
 4023200:	00c00384 	movi	r3,14
 4023204:	19008616 	blt	r3,r4,4023420 <_dtoa_r+0x990>
 4023208:	200490fa 	slli	r2,r4,3
 402320c:	00c100f4 	movhi	r3,1027
 4023210:	d9802217 	ldw	r6,136(sp)
 4023214:	18c0f304 	addi	r3,r3,972
 4023218:	1885883a 	add	r2,r3,r2
 402321c:	14000017 	ldw	r16,0(r2)
 4023220:	14400117 	ldw	r17,4(r2)
 4023224:	30016316 	blt	r6,zero,40237b4 <_dtoa_r+0xd24>
 4023228:	800d883a 	mov	r6,r16
 402322c:	880f883a 	mov	r7,r17
 4023230:	9009883a 	mov	r4,r18
 4023234:	980b883a 	mov	r5,r19
 4023238:	402ae900 	call	402ae90 <__divdf3>
 402323c:	180b883a 	mov	r5,r3
 4023240:	1009883a 	mov	r4,r2
 4023244:	402c9e40 	call	402c9e4 <__fixdfsi>
 4023248:	1009883a 	mov	r4,r2
 402324c:	102b883a 	mov	r21,r2
 4023250:	402ca640 	call	402ca64 <__floatsidf>
 4023254:	800d883a 	mov	r6,r16
 4023258:	880f883a 	mov	r7,r17
 402325c:	1009883a 	mov	r4,r2
 4023260:	180b883a 	mov	r5,r3
 4023264:	402b9d00 	call	402b9d0 <__muldf3>
 4023268:	100d883a 	mov	r6,r2
 402326c:	180f883a 	mov	r7,r3
 4023270:	9009883a 	mov	r4,r18
 4023274:	980b883a 	mov	r5,r19
 4023278:	402c0e80 	call	402c0e8 <__subdf3>
 402327c:	d9c00717 	ldw	r7,28(sp)
 4023280:	1009883a 	mov	r4,r2
 4023284:	a8800c04 	addi	r2,r21,48
 4023288:	38800005 	stb	r2,0(r7)
 402328c:	3dc00044 	addi	r23,r7,1
 4023290:	d9c00617 	ldw	r7,24(sp)
 4023294:	01800044 	movi	r6,1
 4023298:	180b883a 	mov	r5,r3
 402329c:	2005883a 	mov	r2,r4
 40232a0:	39803826 	beq	r7,r6,4023384 <_dtoa_r+0x8f4>
 40232a4:	000d883a 	mov	r6,zero
 40232a8:	01d00934 	movhi	r7,16420
 40232ac:	402b9d00 	call	402b9d0 <__muldf3>
 40232b0:	000d883a 	mov	r6,zero
 40232b4:	000f883a 	mov	r7,zero
 40232b8:	1009883a 	mov	r4,r2
 40232bc:	180b883a 	mov	r5,r3
 40232c0:	1025883a 	mov	r18,r2
 40232c4:	1827883a 	mov	r19,r3
 40232c8:	402b7780 	call	402b778 <__eqdf2>
 40232cc:	103f9a26 	beq	r2,zero,4023138 <__alt_data_end+0xfffe3138>
 40232d0:	d9c00617 	ldw	r7,24(sp)
 40232d4:	d8c00717 	ldw	r3,28(sp)
 40232d8:	b829883a 	mov	r20,r23
 40232dc:	38bfffc4 	addi	r2,r7,-1
 40232e0:	18ad883a 	add	r22,r3,r2
 40232e4:	00000a06 	br	4023310 <_dtoa_r+0x880>
 40232e8:	402b9d00 	call	402b9d0 <__muldf3>
 40232ec:	000d883a 	mov	r6,zero
 40232f0:	000f883a 	mov	r7,zero
 40232f4:	1009883a 	mov	r4,r2
 40232f8:	180b883a 	mov	r5,r3
 40232fc:	1025883a 	mov	r18,r2
 4023300:	1827883a 	mov	r19,r3
 4023304:	b829883a 	mov	r20,r23
 4023308:	402b7780 	call	402b778 <__eqdf2>
 402330c:	103f8a26 	beq	r2,zero,4023138 <__alt_data_end+0xfffe3138>
 4023310:	800d883a 	mov	r6,r16
 4023314:	880f883a 	mov	r7,r17
 4023318:	9009883a 	mov	r4,r18
 402331c:	980b883a 	mov	r5,r19
 4023320:	402ae900 	call	402ae90 <__divdf3>
 4023324:	180b883a 	mov	r5,r3
 4023328:	1009883a 	mov	r4,r2
 402332c:	402c9e40 	call	402c9e4 <__fixdfsi>
 4023330:	1009883a 	mov	r4,r2
 4023334:	102b883a 	mov	r21,r2
 4023338:	402ca640 	call	402ca64 <__floatsidf>
 402333c:	800d883a 	mov	r6,r16
 4023340:	880f883a 	mov	r7,r17
 4023344:	1009883a 	mov	r4,r2
 4023348:	180b883a 	mov	r5,r3
 402334c:	402b9d00 	call	402b9d0 <__muldf3>
 4023350:	100d883a 	mov	r6,r2
 4023354:	180f883a 	mov	r7,r3
 4023358:	9009883a 	mov	r4,r18
 402335c:	980b883a 	mov	r5,r19
 4023360:	402c0e80 	call	402c0e8 <__subdf3>
 4023364:	aa000c04 	addi	r8,r21,48
 4023368:	a2000005 	stb	r8,0(r20)
 402336c:	000d883a 	mov	r6,zero
 4023370:	01d00934 	movhi	r7,16420
 4023374:	1009883a 	mov	r4,r2
 4023378:	180b883a 	mov	r5,r3
 402337c:	a5c00044 	addi	r23,r20,1
 4023380:	b53fd91e 	bne	r22,r20,40232e8 <__alt_data_end+0xfffe32e8>
 4023384:	100d883a 	mov	r6,r2
 4023388:	180f883a 	mov	r7,r3
 402338c:	1009883a 	mov	r4,r2
 4023390:	180b883a 	mov	r5,r3
 4023394:	402a5e40 	call	402a5e4 <__adddf3>
 4023398:	100d883a 	mov	r6,r2
 402339c:	180f883a 	mov	r7,r3
 40233a0:	8009883a 	mov	r4,r16
 40233a4:	880b883a 	mov	r5,r17
 40233a8:	1027883a 	mov	r19,r2
 40233ac:	1825883a 	mov	r18,r3
 40233b0:	402b8dc0 	call	402b8dc <__ledf2>
 40233b4:	10000816 	blt	r2,zero,40233d8 <_dtoa_r+0x948>
 40233b8:	980d883a 	mov	r6,r19
 40233bc:	900f883a 	mov	r7,r18
 40233c0:	8009883a 	mov	r4,r16
 40233c4:	880b883a 	mov	r5,r17
 40233c8:	402b7780 	call	402b778 <__eqdf2>
 40233cc:	103f5a1e 	bne	r2,zero,4023138 <__alt_data_end+0xfffe3138>
 40233d0:	ad40004c 	andi	r21,r21,1
 40233d4:	a83f5826 	beq	r21,zero,4023138 <__alt_data_end+0xfffe3138>
 40233d8:	bd3fffc3 	ldbu	r20,-1(r23)
 40233dc:	b8bfffc4 	addi	r2,r23,-1
 40233e0:	1007883a 	mov	r3,r2
 40233e4:	01400e44 	movi	r5,57
 40233e8:	d9800717 	ldw	r6,28(sp)
 40233ec:	00000506 	br	4023404 <_dtoa_r+0x974>
 40233f0:	18ffffc4 	addi	r3,r3,-1
 40233f4:	11824726 	beq	r2,r6,4023d14 <_dtoa_r+0x1284>
 40233f8:	1d000003 	ldbu	r20,0(r3)
 40233fc:	102f883a 	mov	r23,r2
 4023400:	10bfffc4 	addi	r2,r2,-1
 4023404:	a1003fcc 	andi	r4,r20,255
 4023408:	2100201c 	xori	r4,r4,128
 402340c:	213fe004 	addi	r4,r4,-128
 4023410:	217ff726 	beq	r4,r5,40233f0 <__alt_data_end+0xfffe33f0>
 4023414:	a2000044 	addi	r8,r20,1
 4023418:	12000005 	stb	r8,0(r2)
 402341c:	003f4606 	br	4023138 <__alt_data_end+0xfffe3138>
 4023420:	d9000b17 	ldw	r4,44(sp)
 4023424:	2000c826 	beq	r4,zero,4023748 <_dtoa_r+0xcb8>
 4023428:	d9800317 	ldw	r6,12(sp)
 402342c:	00c00044 	movi	r3,1
 4023430:	1980f90e 	bge	r3,r6,4023818 <_dtoa_r+0xd88>
 4023434:	d8800617 	ldw	r2,24(sp)
 4023438:	d8c00a17 	ldw	r3,40(sp)
 402343c:	157fffc4 	addi	r21,r2,-1
 4023440:	1d41f316 	blt	r3,r21,4023c10 <_dtoa_r+0x1180>
 4023444:	1d6bc83a 	sub	r21,r3,r21
 4023448:	d9c00617 	ldw	r7,24(sp)
 402344c:	3802aa16 	blt	r7,zero,4023ef8 <_dtoa_r+0x1468>
 4023450:	dd000817 	ldw	r20,32(sp)
 4023454:	d8800617 	ldw	r2,24(sp)
 4023458:	d8c00817 	ldw	r3,32(sp)
 402345c:	01400044 	movi	r5,1
 4023460:	e009883a 	mov	r4,fp
 4023464:	1887883a 	add	r3,r3,r2
 4023468:	d8c00815 	stw	r3,32(sp)
 402346c:	b0ad883a 	add	r22,r22,r2
 4023470:	4025f200 	call	4025f20 <__i2b>
 4023474:	1023883a 	mov	r17,r2
 4023478:	a0000826 	beq	r20,zero,402349c <_dtoa_r+0xa0c>
 402347c:	0580070e 	bge	zero,r22,402349c <_dtoa_r+0xa0c>
 4023480:	a005883a 	mov	r2,r20
 4023484:	b500b916 	blt	r22,r20,402376c <_dtoa_r+0xcdc>
 4023488:	d9000817 	ldw	r4,32(sp)
 402348c:	a0a9c83a 	sub	r20,r20,r2
 4023490:	b0adc83a 	sub	r22,r22,r2
 4023494:	2089c83a 	sub	r4,r4,r2
 4023498:	d9000815 	stw	r4,32(sp)
 402349c:	d9800a17 	ldw	r6,40(sp)
 40234a0:	0181810e 	bge	zero,r6,4023aa8 <_dtoa_r+0x1018>
 40234a4:	d9c00b17 	ldw	r7,44(sp)
 40234a8:	3800b326 	beq	r7,zero,4023778 <_dtoa_r+0xce8>
 40234ac:	a800b226 	beq	r21,zero,4023778 <_dtoa_r+0xce8>
 40234b0:	880b883a 	mov	r5,r17
 40234b4:	a80d883a 	mov	r6,r21
 40234b8:	e009883a 	mov	r4,fp
 40234bc:	40261540 	call	4026154 <__pow5mult>
 40234c0:	d9800917 	ldw	r6,36(sp)
 40234c4:	100b883a 	mov	r5,r2
 40234c8:	e009883a 	mov	r4,fp
 40234cc:	1023883a 	mov	r17,r2
 40234d0:	4025f5c0 	call	4025f5c <__multiply>
 40234d4:	1021883a 	mov	r16,r2
 40234d8:	d8800a17 	ldw	r2,40(sp)
 40234dc:	d9400917 	ldw	r5,36(sp)
 40234e0:	e009883a 	mov	r4,fp
 40234e4:	1545c83a 	sub	r2,r2,r21
 40234e8:	d8800a15 	stw	r2,40(sp)
 40234ec:	4025bbc0 	call	4025bbc <_Bfree>
 40234f0:	d8c00a17 	ldw	r3,40(sp)
 40234f4:	18009f1e 	bne	r3,zero,4023774 <_dtoa_r+0xce4>
 40234f8:	05c00044 	movi	r23,1
 40234fc:	e009883a 	mov	r4,fp
 4023500:	b80b883a 	mov	r5,r23
 4023504:	4025f200 	call	4025f20 <__i2b>
 4023508:	d9000d17 	ldw	r4,52(sp)
 402350c:	102b883a 	mov	r21,r2
 4023510:	2000ce26 	beq	r4,zero,402384c <_dtoa_r+0xdbc>
 4023514:	200d883a 	mov	r6,r4
 4023518:	100b883a 	mov	r5,r2
 402351c:	e009883a 	mov	r4,fp
 4023520:	40261540 	call	4026154 <__pow5mult>
 4023524:	d9800317 	ldw	r6,12(sp)
 4023528:	102b883a 	mov	r21,r2
 402352c:	b981810e 	bge	r23,r6,4023b34 <_dtoa_r+0x10a4>
 4023530:	0027883a 	mov	r19,zero
 4023534:	a8800417 	ldw	r2,16(r21)
 4023538:	05c00804 	movi	r23,32
 402353c:	10800104 	addi	r2,r2,4
 4023540:	1085883a 	add	r2,r2,r2
 4023544:	1085883a 	add	r2,r2,r2
 4023548:	a885883a 	add	r2,r21,r2
 402354c:	11000017 	ldw	r4,0(r2)
 4023550:	4025e080 	call	4025e08 <__hi0bits>
 4023554:	b885c83a 	sub	r2,r23,r2
 4023558:	1585883a 	add	r2,r2,r22
 402355c:	108007cc 	andi	r2,r2,31
 4023560:	1000b326 	beq	r2,zero,4023830 <_dtoa_r+0xda0>
 4023564:	00c00804 	movi	r3,32
 4023568:	1887c83a 	sub	r3,r3,r2
 402356c:	01000104 	movi	r4,4
 4023570:	20c2cd0e 	bge	r4,r3,40240a8 <_dtoa_r+0x1618>
 4023574:	00c00704 	movi	r3,28
 4023578:	1885c83a 	sub	r2,r3,r2
 402357c:	d8c00817 	ldw	r3,32(sp)
 4023580:	a0a9883a 	add	r20,r20,r2
 4023584:	b0ad883a 	add	r22,r22,r2
 4023588:	1887883a 	add	r3,r3,r2
 402358c:	d8c00815 	stw	r3,32(sp)
 4023590:	d9800817 	ldw	r6,32(sp)
 4023594:	0180040e 	bge	zero,r6,40235a8 <_dtoa_r+0xb18>
 4023598:	800b883a 	mov	r5,r16
 402359c:	e009883a 	mov	r4,fp
 40235a0:	40262940 	call	4026294 <__lshift>
 40235a4:	1021883a 	mov	r16,r2
 40235a8:	0580050e 	bge	zero,r22,40235c0 <_dtoa_r+0xb30>
 40235ac:	a80b883a 	mov	r5,r21
 40235b0:	b00d883a 	mov	r6,r22
 40235b4:	e009883a 	mov	r4,fp
 40235b8:	40262940 	call	4026294 <__lshift>
 40235bc:	102b883a 	mov	r21,r2
 40235c0:	d9c00e17 	ldw	r7,56(sp)
 40235c4:	3801211e 	bne	r7,zero,4023a4c <_dtoa_r+0xfbc>
 40235c8:	d9800617 	ldw	r6,24(sp)
 40235cc:	0181380e 	bge	zero,r6,4023ab0 <_dtoa_r+0x1020>
 40235d0:	d8c00b17 	ldw	r3,44(sp)
 40235d4:	1800ab1e 	bne	r3,zero,4023884 <_dtoa_r+0xdf4>
 40235d8:	dc800717 	ldw	r18,28(sp)
 40235dc:	dcc00617 	ldw	r19,24(sp)
 40235e0:	9029883a 	mov	r20,r18
 40235e4:	00000206 	br	40235f0 <_dtoa_r+0xb60>
 40235e8:	4025be40 	call	4025be4 <__multadd>
 40235ec:	1021883a 	mov	r16,r2
 40235f0:	a80b883a 	mov	r5,r21
 40235f4:	8009883a 	mov	r4,r16
 40235f8:	40228900 	call	4022890 <quorem>
 40235fc:	10800c04 	addi	r2,r2,48
 4023600:	90800005 	stb	r2,0(r18)
 4023604:	94800044 	addi	r18,r18,1
 4023608:	9507c83a 	sub	r3,r18,r20
 402360c:	000f883a 	mov	r7,zero
 4023610:	01800284 	movi	r6,10
 4023614:	800b883a 	mov	r5,r16
 4023618:	e009883a 	mov	r4,fp
 402361c:	1cfff216 	blt	r3,r19,40235e8 <__alt_data_end+0xfffe35e8>
 4023620:	1011883a 	mov	r8,r2
 4023624:	d8800617 	ldw	r2,24(sp)
 4023628:	0082370e 	bge	zero,r2,4023f08 <_dtoa_r+0x1478>
 402362c:	d9000717 	ldw	r4,28(sp)
 4023630:	0025883a 	mov	r18,zero
 4023634:	20af883a 	add	r23,r4,r2
 4023638:	01800044 	movi	r6,1
 402363c:	800b883a 	mov	r5,r16
 4023640:	e009883a 	mov	r4,fp
 4023644:	da001715 	stw	r8,92(sp)
 4023648:	40262940 	call	4026294 <__lshift>
 402364c:	a80b883a 	mov	r5,r21
 4023650:	1009883a 	mov	r4,r2
 4023654:	d8800915 	stw	r2,36(sp)
 4023658:	40263dc0 	call	40263dc <__mcmp>
 402365c:	da001717 	ldw	r8,92(sp)
 4023660:	0081800e 	bge	zero,r2,4023c64 <_dtoa_r+0x11d4>
 4023664:	b93fffc3 	ldbu	r4,-1(r23)
 4023668:	b8bfffc4 	addi	r2,r23,-1
 402366c:	1007883a 	mov	r3,r2
 4023670:	01800e44 	movi	r6,57
 4023674:	d9c00717 	ldw	r7,28(sp)
 4023678:	00000506 	br	4023690 <_dtoa_r+0xc00>
 402367c:	18ffffc4 	addi	r3,r3,-1
 4023680:	11c12326 	beq	r2,r7,4023b10 <_dtoa_r+0x1080>
 4023684:	19000003 	ldbu	r4,0(r3)
 4023688:	102f883a 	mov	r23,r2
 402368c:	10bfffc4 	addi	r2,r2,-1
 4023690:	21403fcc 	andi	r5,r4,255
 4023694:	2940201c 	xori	r5,r5,128
 4023698:	297fe004 	addi	r5,r5,-128
 402369c:	29bff726 	beq	r5,r6,402367c <__alt_data_end+0xfffe367c>
 40236a0:	21000044 	addi	r4,r4,1
 40236a4:	11000005 	stb	r4,0(r2)
 40236a8:	a80b883a 	mov	r5,r21
 40236ac:	e009883a 	mov	r4,fp
 40236b0:	4025bbc0 	call	4025bbc <_Bfree>
 40236b4:	883ea026 	beq	r17,zero,4023138 <__alt_data_end+0xfffe3138>
 40236b8:	90000426 	beq	r18,zero,40236cc <_dtoa_r+0xc3c>
 40236bc:	94400326 	beq	r18,r17,40236cc <_dtoa_r+0xc3c>
 40236c0:	900b883a 	mov	r5,r18
 40236c4:	e009883a 	mov	r4,fp
 40236c8:	4025bbc0 	call	4025bbc <_Bfree>
 40236cc:	880b883a 	mov	r5,r17
 40236d0:	e009883a 	mov	r4,fp
 40236d4:	4025bbc0 	call	4025bbc <_Bfree>
 40236d8:	003e9706 	br	4023138 <__alt_data_end+0xfffe3138>
 40236dc:	01800044 	movi	r6,1
 40236e0:	d9800e15 	stw	r6,56(sp)
 40236e4:	003d9606 	br	4022d40 <__alt_data_end+0xfffe2d40>
 40236e8:	d8800817 	ldw	r2,32(sp)
 40236ec:	d8c00517 	ldw	r3,20(sp)
 40236f0:	d8000d15 	stw	zero,52(sp)
 40236f4:	10c5c83a 	sub	r2,r2,r3
 40236f8:	00c9c83a 	sub	r4,zero,r3
 40236fc:	d8800815 	stw	r2,32(sp)
 4023700:	d9000a15 	stw	r4,40(sp)
 4023704:	003d9706 	br	4022d64 <__alt_data_end+0xfffe2d64>
 4023708:	05adc83a 	sub	r22,zero,r22
 402370c:	dd800815 	stw	r22,32(sp)
 4023710:	002d883a 	mov	r22,zero
 4023714:	003d8e06 	br	4022d50 <__alt_data_end+0xfffe2d50>
 4023718:	d9000517 	ldw	r4,20(sp)
 402371c:	402ca640 	call	402ca64 <__floatsidf>
 4023720:	100d883a 	mov	r6,r2
 4023724:	180f883a 	mov	r7,r3
 4023728:	a009883a 	mov	r4,r20
 402372c:	880b883a 	mov	r5,r17
 4023730:	402b7780 	call	402b778 <__eqdf2>
 4023734:	103d7126 	beq	r2,zero,4022cfc <__alt_data_end+0xfffe2cfc>
 4023738:	d9c00517 	ldw	r7,20(sp)
 402373c:	39ffffc4 	addi	r7,r7,-1
 4023740:	d9c00515 	stw	r7,20(sp)
 4023744:	003d6d06 	br	4022cfc <__alt_data_end+0xfffe2cfc>
 4023748:	dd400a17 	ldw	r21,40(sp)
 402374c:	dd000817 	ldw	r20,32(sp)
 4023750:	0023883a 	mov	r17,zero
 4023754:	003f4806 	br	4023478 <__alt_data_end+0xfffe3478>
 4023758:	10e3c83a 	sub	r17,r2,r3
 402375c:	9448983a 	sll	r4,r18,r17
 4023760:	003d3206 	br	4022c2c <__alt_data_end+0xfffe2c2c>
 4023764:	d8000e15 	stw	zero,56(sp)
 4023768:	003d7506 	br	4022d40 <__alt_data_end+0xfffe2d40>
 402376c:	b005883a 	mov	r2,r22
 4023770:	003f4506 	br	4023488 <__alt_data_end+0xfffe3488>
 4023774:	dc000915 	stw	r16,36(sp)
 4023778:	d9800a17 	ldw	r6,40(sp)
 402377c:	d9400917 	ldw	r5,36(sp)
 4023780:	e009883a 	mov	r4,fp
 4023784:	40261540 	call	4026154 <__pow5mult>
 4023788:	1021883a 	mov	r16,r2
 402378c:	003f5a06 	br	40234f8 <__alt_data_end+0xfffe34f8>
 4023790:	01c00044 	movi	r7,1
 4023794:	d9c00b15 	stw	r7,44(sp)
 4023798:	d8802217 	ldw	r2,136(sp)
 402379c:	0081280e 	bge	zero,r2,4023c40 <_dtoa_r+0x11b0>
 40237a0:	100d883a 	mov	r6,r2
 40237a4:	1021883a 	mov	r16,r2
 40237a8:	d8800c15 	stw	r2,48(sp)
 40237ac:	d8800615 	stw	r2,24(sp)
 40237b0:	003d8806 	br	4022dd4 <__alt_data_end+0xfffe2dd4>
 40237b4:	d8800617 	ldw	r2,24(sp)
 40237b8:	00be9b16 	blt	zero,r2,4023228 <__alt_data_end+0xfffe3228>
 40237bc:	10010f1e 	bne	r2,zero,4023bfc <_dtoa_r+0x116c>
 40237c0:	880b883a 	mov	r5,r17
 40237c4:	000d883a 	mov	r6,zero
 40237c8:	01d00534 	movhi	r7,16404
 40237cc:	8009883a 	mov	r4,r16
 40237d0:	402b9d00 	call	402b9d0 <__muldf3>
 40237d4:	900d883a 	mov	r6,r18
 40237d8:	980f883a 	mov	r7,r19
 40237dc:	1009883a 	mov	r4,r2
 40237e0:	180b883a 	mov	r5,r3
 40237e4:	402b8000 	call	402b800 <__gedf2>
 40237e8:	002b883a 	mov	r21,zero
 40237ec:	0023883a 	mov	r17,zero
 40237f0:	1000bf16 	blt	r2,zero,4023af0 <_dtoa_r+0x1060>
 40237f4:	d9802217 	ldw	r6,136(sp)
 40237f8:	ddc00717 	ldw	r23,28(sp)
 40237fc:	018c303a 	nor	r6,zero,r6
 4023800:	d9800515 	stw	r6,20(sp)
 4023804:	a80b883a 	mov	r5,r21
 4023808:	e009883a 	mov	r4,fp
 402380c:	4025bbc0 	call	4025bbc <_Bfree>
 4023810:	883e4926 	beq	r17,zero,4023138 <__alt_data_end+0xfffe3138>
 4023814:	003fad06 	br	40236cc <__alt_data_end+0xfffe36cc>
 4023818:	d9c01117 	ldw	r7,68(sp)
 402381c:	3801bc26 	beq	r7,zero,4023f10 <_dtoa_r+0x1480>
 4023820:	10810cc4 	addi	r2,r2,1075
 4023824:	dd400a17 	ldw	r21,40(sp)
 4023828:	dd000817 	ldw	r20,32(sp)
 402382c:	003f0a06 	br	4023458 <__alt_data_end+0xfffe3458>
 4023830:	00800704 	movi	r2,28
 4023834:	d9000817 	ldw	r4,32(sp)
 4023838:	a0a9883a 	add	r20,r20,r2
 402383c:	b0ad883a 	add	r22,r22,r2
 4023840:	2089883a 	add	r4,r4,r2
 4023844:	d9000815 	stw	r4,32(sp)
 4023848:	003f5106 	br	4023590 <__alt_data_end+0xfffe3590>
 402384c:	d8c00317 	ldw	r3,12(sp)
 4023850:	b8c1fc0e 	bge	r23,r3,4024044 <_dtoa_r+0x15b4>
 4023854:	0027883a 	mov	r19,zero
 4023858:	b805883a 	mov	r2,r23
 402385c:	003f3e06 	br	4023558 <__alt_data_end+0xfffe3558>
 4023860:	880b883a 	mov	r5,r17
 4023864:	e009883a 	mov	r4,fp
 4023868:	000f883a 	mov	r7,zero
 402386c:	01800284 	movi	r6,10
 4023870:	4025be40 	call	4025be4 <__multadd>
 4023874:	d9000c17 	ldw	r4,48(sp)
 4023878:	1023883a 	mov	r17,r2
 402387c:	0102040e 	bge	zero,r4,4024090 <_dtoa_r+0x1600>
 4023880:	d9000615 	stw	r4,24(sp)
 4023884:	0500050e 	bge	zero,r20,402389c <_dtoa_r+0xe0c>
 4023888:	880b883a 	mov	r5,r17
 402388c:	a00d883a 	mov	r6,r20
 4023890:	e009883a 	mov	r4,fp
 4023894:	40262940 	call	4026294 <__lshift>
 4023898:	1023883a 	mov	r17,r2
 402389c:	9801241e 	bne	r19,zero,4023d30 <_dtoa_r+0x12a0>
 40238a0:	8829883a 	mov	r20,r17
 40238a4:	d9000617 	ldw	r4,24(sp)
 40238a8:	dcc00717 	ldw	r19,28(sp)
 40238ac:	9480004c 	andi	r18,r18,1
 40238b0:	20bfffc4 	addi	r2,r4,-1
 40238b4:	9885883a 	add	r2,r19,r2
 40238b8:	d8800415 	stw	r2,16(sp)
 40238bc:	dc800615 	stw	r18,24(sp)
 40238c0:	a80b883a 	mov	r5,r21
 40238c4:	8009883a 	mov	r4,r16
 40238c8:	40228900 	call	4022890 <quorem>
 40238cc:	880b883a 	mov	r5,r17
 40238d0:	8009883a 	mov	r4,r16
 40238d4:	102f883a 	mov	r23,r2
 40238d8:	40263dc0 	call	40263dc <__mcmp>
 40238dc:	a80b883a 	mov	r5,r21
 40238e0:	a00d883a 	mov	r6,r20
 40238e4:	e009883a 	mov	r4,fp
 40238e8:	102d883a 	mov	r22,r2
 40238ec:	402643c0 	call	402643c <__mdiff>
 40238f0:	1007883a 	mov	r3,r2
 40238f4:	10800317 	ldw	r2,12(r2)
 40238f8:	bc800c04 	addi	r18,r23,48
 40238fc:	180b883a 	mov	r5,r3
 4023900:	10004e1e 	bne	r2,zero,4023a3c <_dtoa_r+0xfac>
 4023904:	8009883a 	mov	r4,r16
 4023908:	d8c01615 	stw	r3,88(sp)
 402390c:	40263dc0 	call	40263dc <__mcmp>
 4023910:	d8c01617 	ldw	r3,88(sp)
 4023914:	e009883a 	mov	r4,fp
 4023918:	d8801615 	stw	r2,88(sp)
 402391c:	180b883a 	mov	r5,r3
 4023920:	4025bbc0 	call	4025bbc <_Bfree>
 4023924:	d8801617 	ldw	r2,88(sp)
 4023928:	1000041e 	bne	r2,zero,402393c <_dtoa_r+0xeac>
 402392c:	d9800317 	ldw	r6,12(sp)
 4023930:	3000021e 	bne	r6,zero,402393c <_dtoa_r+0xeac>
 4023934:	d8c00617 	ldw	r3,24(sp)
 4023938:	18003726 	beq	r3,zero,4023a18 <_dtoa_r+0xf88>
 402393c:	b0002016 	blt	r22,zero,40239c0 <_dtoa_r+0xf30>
 4023940:	b000041e 	bne	r22,zero,4023954 <_dtoa_r+0xec4>
 4023944:	d9000317 	ldw	r4,12(sp)
 4023948:	2000021e 	bne	r4,zero,4023954 <_dtoa_r+0xec4>
 402394c:	d8c00617 	ldw	r3,24(sp)
 4023950:	18001b26 	beq	r3,zero,40239c0 <_dtoa_r+0xf30>
 4023954:	00810716 	blt	zero,r2,4023d74 <_dtoa_r+0x12e4>
 4023958:	d8c00417 	ldw	r3,16(sp)
 402395c:	9d800044 	addi	r22,r19,1
 4023960:	9c800005 	stb	r18,0(r19)
 4023964:	b02f883a 	mov	r23,r22
 4023968:	98c10626 	beq	r19,r3,4023d84 <_dtoa_r+0x12f4>
 402396c:	800b883a 	mov	r5,r16
 4023970:	000f883a 	mov	r7,zero
 4023974:	01800284 	movi	r6,10
 4023978:	e009883a 	mov	r4,fp
 402397c:	4025be40 	call	4025be4 <__multadd>
 4023980:	1021883a 	mov	r16,r2
 4023984:	000f883a 	mov	r7,zero
 4023988:	01800284 	movi	r6,10
 402398c:	880b883a 	mov	r5,r17
 4023990:	e009883a 	mov	r4,fp
 4023994:	8d002526 	beq	r17,r20,4023a2c <_dtoa_r+0xf9c>
 4023998:	4025be40 	call	4025be4 <__multadd>
 402399c:	a00b883a 	mov	r5,r20
 40239a0:	000f883a 	mov	r7,zero
 40239a4:	01800284 	movi	r6,10
 40239a8:	e009883a 	mov	r4,fp
 40239ac:	1023883a 	mov	r17,r2
 40239b0:	4025be40 	call	4025be4 <__multadd>
 40239b4:	1029883a 	mov	r20,r2
 40239b8:	b027883a 	mov	r19,r22
 40239bc:	003fc006 	br	40238c0 <__alt_data_end+0xfffe38c0>
 40239c0:	9011883a 	mov	r8,r18
 40239c4:	00800e0e 	bge	zero,r2,4023a00 <_dtoa_r+0xf70>
 40239c8:	800b883a 	mov	r5,r16
 40239cc:	01800044 	movi	r6,1
 40239d0:	e009883a 	mov	r4,fp
 40239d4:	da001715 	stw	r8,92(sp)
 40239d8:	40262940 	call	4026294 <__lshift>
 40239dc:	a80b883a 	mov	r5,r21
 40239e0:	1009883a 	mov	r4,r2
 40239e4:	1021883a 	mov	r16,r2
 40239e8:	40263dc0 	call	40263dc <__mcmp>
 40239ec:	da001717 	ldw	r8,92(sp)
 40239f0:	0081960e 	bge	zero,r2,402404c <_dtoa_r+0x15bc>
 40239f4:	00800e44 	movi	r2,57
 40239f8:	40817026 	beq	r8,r2,4023fbc <_dtoa_r+0x152c>
 40239fc:	ba000c44 	addi	r8,r23,49
 4023a00:	8825883a 	mov	r18,r17
 4023a04:	9dc00044 	addi	r23,r19,1
 4023a08:	9a000005 	stb	r8,0(r19)
 4023a0c:	a023883a 	mov	r17,r20
 4023a10:	dc000915 	stw	r16,36(sp)
 4023a14:	003f2406 	br	40236a8 <__alt_data_end+0xfffe36a8>
 4023a18:	00800e44 	movi	r2,57
 4023a1c:	9011883a 	mov	r8,r18
 4023a20:	90816626 	beq	r18,r2,4023fbc <_dtoa_r+0x152c>
 4023a24:	05bff516 	blt	zero,r22,40239fc <__alt_data_end+0xfffe39fc>
 4023a28:	003ff506 	br	4023a00 <__alt_data_end+0xfffe3a00>
 4023a2c:	4025be40 	call	4025be4 <__multadd>
 4023a30:	1023883a 	mov	r17,r2
 4023a34:	1029883a 	mov	r20,r2
 4023a38:	003fdf06 	br	40239b8 <__alt_data_end+0xfffe39b8>
 4023a3c:	e009883a 	mov	r4,fp
 4023a40:	4025bbc0 	call	4025bbc <_Bfree>
 4023a44:	00800044 	movi	r2,1
 4023a48:	003fbc06 	br	402393c <__alt_data_end+0xfffe393c>
 4023a4c:	a80b883a 	mov	r5,r21
 4023a50:	8009883a 	mov	r4,r16
 4023a54:	40263dc0 	call	40263dc <__mcmp>
 4023a58:	103edb0e 	bge	r2,zero,40235c8 <__alt_data_end+0xfffe35c8>
 4023a5c:	800b883a 	mov	r5,r16
 4023a60:	000f883a 	mov	r7,zero
 4023a64:	01800284 	movi	r6,10
 4023a68:	e009883a 	mov	r4,fp
 4023a6c:	4025be40 	call	4025be4 <__multadd>
 4023a70:	1021883a 	mov	r16,r2
 4023a74:	d8800517 	ldw	r2,20(sp)
 4023a78:	d8c00b17 	ldw	r3,44(sp)
 4023a7c:	10bfffc4 	addi	r2,r2,-1
 4023a80:	d8800515 	stw	r2,20(sp)
 4023a84:	183f761e 	bne	r3,zero,4023860 <__alt_data_end+0xfffe3860>
 4023a88:	d9000c17 	ldw	r4,48(sp)
 4023a8c:	0101730e 	bge	zero,r4,402405c <_dtoa_r+0x15cc>
 4023a90:	d9000615 	stw	r4,24(sp)
 4023a94:	003ed006 	br	40235d8 <__alt_data_end+0xfffe35d8>
 4023a98:	00800084 	movi	r2,2
 4023a9c:	3081861e 	bne	r6,r2,40240b8 <_dtoa_r+0x1628>
 4023aa0:	d8000b15 	stw	zero,44(sp)
 4023aa4:	003f3c06 	br	4023798 <__alt_data_end+0xfffe3798>
 4023aa8:	dc000917 	ldw	r16,36(sp)
 4023aac:	003e9206 	br	40234f8 <__alt_data_end+0xfffe34f8>
 4023ab0:	d9c00317 	ldw	r7,12(sp)
 4023ab4:	00800084 	movi	r2,2
 4023ab8:	11fec50e 	bge	r2,r7,40235d0 <__alt_data_end+0xfffe35d0>
 4023abc:	d9000617 	ldw	r4,24(sp)
 4023ac0:	20013c1e 	bne	r4,zero,4023fb4 <_dtoa_r+0x1524>
 4023ac4:	a80b883a 	mov	r5,r21
 4023ac8:	000f883a 	mov	r7,zero
 4023acc:	01800144 	movi	r6,5
 4023ad0:	e009883a 	mov	r4,fp
 4023ad4:	4025be40 	call	4025be4 <__multadd>
 4023ad8:	100b883a 	mov	r5,r2
 4023adc:	8009883a 	mov	r4,r16
 4023ae0:	102b883a 	mov	r21,r2
 4023ae4:	40263dc0 	call	40263dc <__mcmp>
 4023ae8:	dc000915 	stw	r16,36(sp)
 4023aec:	00bf410e 	bge	zero,r2,40237f4 <__alt_data_end+0xfffe37f4>
 4023af0:	d9c00717 	ldw	r7,28(sp)
 4023af4:	00800c44 	movi	r2,49
 4023af8:	38800005 	stb	r2,0(r7)
 4023afc:	d8800517 	ldw	r2,20(sp)
 4023b00:	3dc00044 	addi	r23,r7,1
 4023b04:	10800044 	addi	r2,r2,1
 4023b08:	d8800515 	stw	r2,20(sp)
 4023b0c:	003f3d06 	br	4023804 <__alt_data_end+0xfffe3804>
 4023b10:	d9800517 	ldw	r6,20(sp)
 4023b14:	d9c00717 	ldw	r7,28(sp)
 4023b18:	00800c44 	movi	r2,49
 4023b1c:	31800044 	addi	r6,r6,1
 4023b20:	d9800515 	stw	r6,20(sp)
 4023b24:	38800005 	stb	r2,0(r7)
 4023b28:	003edf06 	br	40236a8 <__alt_data_end+0xfffe36a8>
 4023b2c:	d8000b15 	stw	zero,44(sp)
 4023b30:	003c9f06 	br	4022db0 <__alt_data_end+0xfffe2db0>
 4023b34:	903e7e1e 	bne	r18,zero,4023530 <__alt_data_end+0xfffe3530>
 4023b38:	00800434 	movhi	r2,16
 4023b3c:	10bfffc4 	addi	r2,r2,-1
 4023b40:	9884703a 	and	r2,r19,r2
 4023b44:	1000ea1e 	bne	r2,zero,4023ef0 <_dtoa_r+0x1460>
 4023b48:	9cdffc2c 	andhi	r19,r19,32752
 4023b4c:	9800e826 	beq	r19,zero,4023ef0 <_dtoa_r+0x1460>
 4023b50:	d9c00817 	ldw	r7,32(sp)
 4023b54:	b5800044 	addi	r22,r22,1
 4023b58:	04c00044 	movi	r19,1
 4023b5c:	39c00044 	addi	r7,r7,1
 4023b60:	d9c00815 	stw	r7,32(sp)
 4023b64:	d8800d17 	ldw	r2,52(sp)
 4023b68:	103e721e 	bne	r2,zero,4023534 <__alt_data_end+0xfffe3534>
 4023b6c:	00800044 	movi	r2,1
 4023b70:	003e7906 	br	4023558 <__alt_data_end+0xfffe3558>
 4023b74:	8009883a 	mov	r4,r16
 4023b78:	402ca640 	call	402ca64 <__floatsidf>
 4023b7c:	d9800f17 	ldw	r6,60(sp)
 4023b80:	d9c01017 	ldw	r7,64(sp)
 4023b84:	1009883a 	mov	r4,r2
 4023b88:	180b883a 	mov	r5,r3
 4023b8c:	402b9d00 	call	402b9d0 <__muldf3>
 4023b90:	000d883a 	mov	r6,zero
 4023b94:	01d00734 	movhi	r7,16412
 4023b98:	1009883a 	mov	r4,r2
 4023b9c:	180b883a 	mov	r5,r3
 4023ba0:	402a5e40 	call	402a5e4 <__adddf3>
 4023ba4:	047f3034 	movhi	r17,64704
 4023ba8:	1021883a 	mov	r16,r2
 4023bac:	1c63883a 	add	r17,r3,r17
 4023bb0:	d9000f17 	ldw	r4,60(sp)
 4023bb4:	d9401017 	ldw	r5,64(sp)
 4023bb8:	000d883a 	mov	r6,zero
 4023bbc:	01d00534 	movhi	r7,16404
 4023bc0:	402c0e80 	call	402c0e8 <__subdf3>
 4023bc4:	800d883a 	mov	r6,r16
 4023bc8:	880f883a 	mov	r7,r17
 4023bcc:	1009883a 	mov	r4,r2
 4023bd0:	180b883a 	mov	r5,r3
 4023bd4:	102b883a 	mov	r21,r2
 4023bd8:	1829883a 	mov	r20,r3
 4023bdc:	402b8000 	call	402b800 <__gedf2>
 4023be0:	00806c16 	blt	zero,r2,4023d94 <_dtoa_r+0x1304>
 4023be4:	89e0003c 	xorhi	r7,r17,32768
 4023be8:	800d883a 	mov	r6,r16
 4023bec:	a809883a 	mov	r4,r21
 4023bf0:	a00b883a 	mov	r5,r20
 4023bf4:	402b8dc0 	call	402b8dc <__ledf2>
 4023bf8:	103d7e0e 	bge	r2,zero,40231f4 <__alt_data_end+0xfffe31f4>
 4023bfc:	002b883a 	mov	r21,zero
 4023c00:	0023883a 	mov	r17,zero
 4023c04:	003efb06 	br	40237f4 <__alt_data_end+0xfffe37f4>
 4023c08:	d8800717 	ldw	r2,28(sp)
 4023c0c:	003bd006 	br	4022b50 <__alt_data_end+0xfffe2b50>
 4023c10:	d9000a17 	ldw	r4,40(sp)
 4023c14:	d9800d17 	ldw	r6,52(sp)
 4023c18:	dd400a15 	stw	r21,40(sp)
 4023c1c:	a905c83a 	sub	r2,r21,r4
 4023c20:	308d883a 	add	r6,r6,r2
 4023c24:	d9800d15 	stw	r6,52(sp)
 4023c28:	002b883a 	mov	r21,zero
 4023c2c:	003e0606 	br	4023448 <__alt_data_end+0xfffe3448>
 4023c30:	9023883a 	mov	r17,r18
 4023c34:	9829883a 	mov	r20,r19
 4023c38:	04000084 	movi	r16,2
 4023c3c:	003c9206 	br	4022e88 <__alt_data_end+0xfffe2e88>
 4023c40:	04000044 	movi	r16,1
 4023c44:	dc000c15 	stw	r16,48(sp)
 4023c48:	dc000615 	stw	r16,24(sp)
 4023c4c:	dc002215 	stw	r16,136(sp)
 4023c50:	e0001115 	stw	zero,68(fp)
 4023c54:	000b883a 	mov	r5,zero
 4023c58:	003c6906 	br	4022e00 <__alt_data_end+0xfffe2e00>
 4023c5c:	3021883a 	mov	r16,r6
 4023c60:	003ffb06 	br	4023c50 <__alt_data_end+0xfffe3c50>
 4023c64:	1000021e 	bne	r2,zero,4023c70 <_dtoa_r+0x11e0>
 4023c68:	4200004c 	andi	r8,r8,1
 4023c6c:	403e7d1e 	bne	r8,zero,4023664 <__alt_data_end+0xfffe3664>
 4023c70:	01000c04 	movi	r4,48
 4023c74:	00000106 	br	4023c7c <_dtoa_r+0x11ec>
 4023c78:	102f883a 	mov	r23,r2
 4023c7c:	b8bfffc4 	addi	r2,r23,-1
 4023c80:	10c00007 	ldb	r3,0(r2)
 4023c84:	193ffc26 	beq	r3,r4,4023c78 <__alt_data_end+0xfffe3c78>
 4023c88:	003e8706 	br	40236a8 <__alt_data_end+0xfffe36a8>
 4023c8c:	d8800517 	ldw	r2,20(sp)
 4023c90:	00a3c83a 	sub	r17,zero,r2
 4023c94:	8800a426 	beq	r17,zero,4023f28 <_dtoa_r+0x1498>
 4023c98:	888003cc 	andi	r2,r17,15
 4023c9c:	100490fa 	slli	r2,r2,3
 4023ca0:	00c100f4 	movhi	r3,1027
 4023ca4:	18c0f304 	addi	r3,r3,972
 4023ca8:	1885883a 	add	r2,r3,r2
 4023cac:	11800017 	ldw	r6,0(r2)
 4023cb0:	11c00117 	ldw	r7,4(r2)
 4023cb4:	9009883a 	mov	r4,r18
 4023cb8:	980b883a 	mov	r5,r19
 4023cbc:	8823d13a 	srai	r17,r17,4
 4023cc0:	402b9d00 	call	402b9d0 <__muldf3>
 4023cc4:	d8800f15 	stw	r2,60(sp)
 4023cc8:	d8c01015 	stw	r3,64(sp)
 4023ccc:	8800e826 	beq	r17,zero,4024070 <_dtoa_r+0x15e0>
 4023cd0:	050100f4 	movhi	r20,1027
 4023cd4:	a500e904 	addi	r20,r20,932
 4023cd8:	04000084 	movi	r16,2
 4023cdc:	8980004c 	andi	r6,r17,1
 4023ce0:	1009883a 	mov	r4,r2
 4023ce4:	8823d07a 	srai	r17,r17,1
 4023ce8:	180b883a 	mov	r5,r3
 4023cec:	30000426 	beq	r6,zero,4023d00 <_dtoa_r+0x1270>
 4023cf0:	a1800017 	ldw	r6,0(r20)
 4023cf4:	a1c00117 	ldw	r7,4(r20)
 4023cf8:	84000044 	addi	r16,r16,1
 4023cfc:	402b9d00 	call	402b9d0 <__muldf3>
 4023d00:	a5000204 	addi	r20,r20,8
 4023d04:	883ff51e 	bne	r17,zero,4023cdc <__alt_data_end+0xfffe3cdc>
 4023d08:	d8800f15 	stw	r2,60(sp)
 4023d0c:	d8c01015 	stw	r3,64(sp)
 4023d10:	003c7606 	br	4022eec <__alt_data_end+0xfffe2eec>
 4023d14:	00c00c04 	movi	r3,48
 4023d18:	10c00005 	stb	r3,0(r2)
 4023d1c:	d8c00517 	ldw	r3,20(sp)
 4023d20:	bd3fffc3 	ldbu	r20,-1(r23)
 4023d24:	18c00044 	addi	r3,r3,1
 4023d28:	d8c00515 	stw	r3,20(sp)
 4023d2c:	003db906 	br	4023414 <__alt_data_end+0xfffe3414>
 4023d30:	89400117 	ldw	r5,4(r17)
 4023d34:	e009883a 	mov	r4,fp
 4023d38:	4025b140 	call	4025b14 <_Balloc>
 4023d3c:	89800417 	ldw	r6,16(r17)
 4023d40:	89400304 	addi	r5,r17,12
 4023d44:	11000304 	addi	r4,r2,12
 4023d48:	31800084 	addi	r6,r6,2
 4023d4c:	318d883a 	add	r6,r6,r6
 4023d50:	318d883a 	add	r6,r6,r6
 4023d54:	1027883a 	mov	r19,r2
 4023d58:	40258a40 	call	40258a4 <memcpy>
 4023d5c:	01800044 	movi	r6,1
 4023d60:	980b883a 	mov	r5,r19
 4023d64:	e009883a 	mov	r4,fp
 4023d68:	40262940 	call	4026294 <__lshift>
 4023d6c:	1029883a 	mov	r20,r2
 4023d70:	003ecc06 	br	40238a4 <__alt_data_end+0xfffe38a4>
 4023d74:	00800e44 	movi	r2,57
 4023d78:	90809026 	beq	r18,r2,4023fbc <_dtoa_r+0x152c>
 4023d7c:	92000044 	addi	r8,r18,1
 4023d80:	003f1f06 	br	4023a00 <__alt_data_end+0xfffe3a00>
 4023d84:	9011883a 	mov	r8,r18
 4023d88:	8825883a 	mov	r18,r17
 4023d8c:	a023883a 	mov	r17,r20
 4023d90:	003e2906 	br	4023638 <__alt_data_end+0xfffe3638>
 4023d94:	002b883a 	mov	r21,zero
 4023d98:	0023883a 	mov	r17,zero
 4023d9c:	003f5406 	br	4023af0 <__alt_data_end+0xfffe3af0>
 4023da0:	61bfffc4 	addi	r6,r12,-1
 4023da4:	300490fa 	slli	r2,r6,3
 4023da8:	00c100f4 	movhi	r3,1027
 4023dac:	18c0f304 	addi	r3,r3,972
 4023db0:	1885883a 	add	r2,r3,r2
 4023db4:	11000017 	ldw	r4,0(r2)
 4023db8:	11400117 	ldw	r5,4(r2)
 4023dbc:	d8800717 	ldw	r2,28(sp)
 4023dc0:	880f883a 	mov	r7,r17
 4023dc4:	d9801215 	stw	r6,72(sp)
 4023dc8:	800d883a 	mov	r6,r16
 4023dcc:	db001615 	stw	r12,88(sp)
 4023dd0:	15c00044 	addi	r23,r2,1
 4023dd4:	402b9d00 	call	402b9d0 <__muldf3>
 4023dd8:	d9401017 	ldw	r5,64(sp)
 4023ddc:	d9000f17 	ldw	r4,60(sp)
 4023de0:	d8c01515 	stw	r3,84(sp)
 4023de4:	d8801415 	stw	r2,80(sp)
 4023de8:	402c9e40 	call	402c9e4 <__fixdfsi>
 4023dec:	1009883a 	mov	r4,r2
 4023df0:	1021883a 	mov	r16,r2
 4023df4:	402ca640 	call	402ca64 <__floatsidf>
 4023df8:	d9000f17 	ldw	r4,60(sp)
 4023dfc:	d9401017 	ldw	r5,64(sp)
 4023e00:	100d883a 	mov	r6,r2
 4023e04:	180f883a 	mov	r7,r3
 4023e08:	402c0e80 	call	402c0e8 <__subdf3>
 4023e0c:	1829883a 	mov	r20,r3
 4023e10:	d8c00717 	ldw	r3,28(sp)
 4023e14:	84000c04 	addi	r16,r16,48
 4023e18:	1023883a 	mov	r17,r2
 4023e1c:	1c000005 	stb	r16,0(r3)
 4023e20:	db001617 	ldw	r12,88(sp)
 4023e24:	00800044 	movi	r2,1
 4023e28:	60802226 	beq	r12,r2,4023eb4 <_dtoa_r+0x1424>
 4023e2c:	d9c00717 	ldw	r7,28(sp)
 4023e30:	8805883a 	mov	r2,r17
 4023e34:	b82b883a 	mov	r21,r23
 4023e38:	3b19883a 	add	r12,r7,r12
 4023e3c:	6023883a 	mov	r17,r12
 4023e40:	a007883a 	mov	r3,r20
 4023e44:	dc800f15 	stw	r18,60(sp)
 4023e48:	000d883a 	mov	r6,zero
 4023e4c:	01d00934 	movhi	r7,16420
 4023e50:	1009883a 	mov	r4,r2
 4023e54:	180b883a 	mov	r5,r3
 4023e58:	402b9d00 	call	402b9d0 <__muldf3>
 4023e5c:	180b883a 	mov	r5,r3
 4023e60:	1009883a 	mov	r4,r2
 4023e64:	1829883a 	mov	r20,r3
 4023e68:	1025883a 	mov	r18,r2
 4023e6c:	402c9e40 	call	402c9e4 <__fixdfsi>
 4023e70:	1009883a 	mov	r4,r2
 4023e74:	1021883a 	mov	r16,r2
 4023e78:	402ca640 	call	402ca64 <__floatsidf>
 4023e7c:	100d883a 	mov	r6,r2
 4023e80:	180f883a 	mov	r7,r3
 4023e84:	9009883a 	mov	r4,r18
 4023e88:	a00b883a 	mov	r5,r20
 4023e8c:	84000c04 	addi	r16,r16,48
 4023e90:	402c0e80 	call	402c0e8 <__subdf3>
 4023e94:	ad400044 	addi	r21,r21,1
 4023e98:	ac3fffc5 	stb	r16,-1(r21)
 4023e9c:	ac7fea1e 	bne	r21,r17,4023e48 <__alt_data_end+0xfffe3e48>
 4023ea0:	1023883a 	mov	r17,r2
 4023ea4:	d8801217 	ldw	r2,72(sp)
 4023ea8:	dc800f17 	ldw	r18,60(sp)
 4023eac:	1829883a 	mov	r20,r3
 4023eb0:	b8af883a 	add	r23,r23,r2
 4023eb4:	d9001417 	ldw	r4,80(sp)
 4023eb8:	d9401517 	ldw	r5,84(sp)
 4023ebc:	000d883a 	mov	r6,zero
 4023ec0:	01cff834 	movhi	r7,16352
 4023ec4:	402a5e40 	call	402a5e4 <__adddf3>
 4023ec8:	880d883a 	mov	r6,r17
 4023ecc:	a00f883a 	mov	r7,r20
 4023ed0:	1009883a 	mov	r4,r2
 4023ed4:	180b883a 	mov	r5,r3
 4023ed8:	402b8dc0 	call	402b8dc <__ledf2>
 4023edc:	10003e0e 	bge	r2,zero,4023fd8 <_dtoa_r+0x1548>
 4023ee0:	d9001317 	ldw	r4,76(sp)
 4023ee4:	bd3fffc3 	ldbu	r20,-1(r23)
 4023ee8:	d9000515 	stw	r4,20(sp)
 4023eec:	003d3b06 	br	40233dc <__alt_data_end+0xfffe33dc>
 4023ef0:	0027883a 	mov	r19,zero
 4023ef4:	003f1b06 	br	4023b64 <__alt_data_end+0xfffe3b64>
 4023ef8:	d8800817 	ldw	r2,32(sp)
 4023efc:	11e9c83a 	sub	r20,r2,r7
 4023f00:	0005883a 	mov	r2,zero
 4023f04:	003d5406 	br	4023458 <__alt_data_end+0xfffe3458>
 4023f08:	00800044 	movi	r2,1
 4023f0c:	003dc706 	br	402362c <__alt_data_end+0xfffe362c>
 4023f10:	d8c00217 	ldw	r3,8(sp)
 4023f14:	00800d84 	movi	r2,54
 4023f18:	dd400a17 	ldw	r21,40(sp)
 4023f1c:	10c5c83a 	sub	r2,r2,r3
 4023f20:	dd000817 	ldw	r20,32(sp)
 4023f24:	003d4c06 	br	4023458 <__alt_data_end+0xfffe3458>
 4023f28:	dc800f15 	stw	r18,60(sp)
 4023f2c:	dcc01015 	stw	r19,64(sp)
 4023f30:	04000084 	movi	r16,2
 4023f34:	003bed06 	br	4022eec <__alt_data_end+0xfffe2eec>
 4023f38:	d9000617 	ldw	r4,24(sp)
 4023f3c:	203f0d26 	beq	r4,zero,4023b74 <__alt_data_end+0xfffe3b74>
 4023f40:	d9800c17 	ldw	r6,48(sp)
 4023f44:	01bcab0e 	bge	zero,r6,40231f4 <__alt_data_end+0xfffe31f4>
 4023f48:	d9401017 	ldw	r5,64(sp)
 4023f4c:	d9000f17 	ldw	r4,60(sp)
 4023f50:	000d883a 	mov	r6,zero
 4023f54:	01d00934 	movhi	r7,16420
 4023f58:	402b9d00 	call	402b9d0 <__muldf3>
 4023f5c:	81000044 	addi	r4,r16,1
 4023f60:	d8800f15 	stw	r2,60(sp)
 4023f64:	d8c01015 	stw	r3,64(sp)
 4023f68:	402ca640 	call	402ca64 <__floatsidf>
 4023f6c:	d9800f17 	ldw	r6,60(sp)
 4023f70:	d9c01017 	ldw	r7,64(sp)
 4023f74:	1009883a 	mov	r4,r2
 4023f78:	180b883a 	mov	r5,r3
 4023f7c:	402b9d00 	call	402b9d0 <__muldf3>
 4023f80:	01d00734 	movhi	r7,16412
 4023f84:	000d883a 	mov	r6,zero
 4023f88:	1009883a 	mov	r4,r2
 4023f8c:	180b883a 	mov	r5,r3
 4023f90:	402a5e40 	call	402a5e4 <__adddf3>
 4023f94:	d9c00517 	ldw	r7,20(sp)
 4023f98:	047f3034 	movhi	r17,64704
 4023f9c:	1021883a 	mov	r16,r2
 4023fa0:	39ffffc4 	addi	r7,r7,-1
 4023fa4:	d9c01315 	stw	r7,76(sp)
 4023fa8:	1c63883a 	add	r17,r3,r17
 4023fac:	db000c17 	ldw	r12,48(sp)
 4023fb0:	003bea06 	br	4022f5c <__alt_data_end+0xfffe2f5c>
 4023fb4:	dc000915 	stw	r16,36(sp)
 4023fb8:	003e0e06 	br	40237f4 <__alt_data_end+0xfffe37f4>
 4023fbc:	01000e44 	movi	r4,57
 4023fc0:	8825883a 	mov	r18,r17
 4023fc4:	9dc00044 	addi	r23,r19,1
 4023fc8:	99000005 	stb	r4,0(r19)
 4023fcc:	a023883a 	mov	r17,r20
 4023fd0:	dc000915 	stw	r16,36(sp)
 4023fd4:	003da406 	br	4023668 <__alt_data_end+0xfffe3668>
 4023fd8:	d9801417 	ldw	r6,80(sp)
 4023fdc:	d9c01517 	ldw	r7,84(sp)
 4023fe0:	0009883a 	mov	r4,zero
 4023fe4:	014ff834 	movhi	r5,16352
 4023fe8:	402c0e80 	call	402c0e8 <__subdf3>
 4023fec:	880d883a 	mov	r6,r17
 4023ff0:	a00f883a 	mov	r7,r20
 4023ff4:	1009883a 	mov	r4,r2
 4023ff8:	180b883a 	mov	r5,r3
 4023ffc:	402b8000 	call	402b800 <__gedf2>
 4024000:	00bc7c0e 	bge	zero,r2,40231f4 <__alt_data_end+0xfffe31f4>
 4024004:	01000c04 	movi	r4,48
 4024008:	00000106 	br	4024010 <_dtoa_r+0x1580>
 402400c:	102f883a 	mov	r23,r2
 4024010:	b8bfffc4 	addi	r2,r23,-1
 4024014:	10c00007 	ldb	r3,0(r2)
 4024018:	193ffc26 	beq	r3,r4,402400c <__alt_data_end+0xfffe400c>
 402401c:	d9801317 	ldw	r6,76(sp)
 4024020:	d9800515 	stw	r6,20(sp)
 4024024:	003c4406 	br	4023138 <__alt_data_end+0xfffe3138>
 4024028:	d9801317 	ldw	r6,76(sp)
 402402c:	d9800515 	stw	r6,20(sp)
 4024030:	003cea06 	br	40233dc <__alt_data_end+0xfffe33dc>
 4024034:	dd800f17 	ldw	r22,60(sp)
 4024038:	dcc01017 	ldw	r19,64(sp)
 402403c:	dc801217 	ldw	r18,72(sp)
 4024040:	003c6c06 	br	40231f4 <__alt_data_end+0xfffe31f4>
 4024044:	903e031e 	bne	r18,zero,4023854 <__alt_data_end+0xfffe3854>
 4024048:	003ebb06 	br	4023b38 <__alt_data_end+0xfffe3b38>
 402404c:	103e6c1e 	bne	r2,zero,4023a00 <__alt_data_end+0xfffe3a00>
 4024050:	4080004c 	andi	r2,r8,1
 4024054:	103e6a26 	beq	r2,zero,4023a00 <__alt_data_end+0xfffe3a00>
 4024058:	003e6606 	br	40239f4 <__alt_data_end+0xfffe39f4>
 402405c:	d8c00317 	ldw	r3,12(sp)
 4024060:	00800084 	movi	r2,2
 4024064:	10c02916 	blt	r2,r3,402410c <_dtoa_r+0x167c>
 4024068:	d9000c17 	ldw	r4,48(sp)
 402406c:	003e8806 	br	4023a90 <__alt_data_end+0xfffe3a90>
 4024070:	04000084 	movi	r16,2
 4024074:	003b9d06 	br	4022eec <__alt_data_end+0xfffe2eec>
 4024078:	d9001317 	ldw	r4,76(sp)
 402407c:	d9000515 	stw	r4,20(sp)
 4024080:	003cd606 	br	40233dc <__alt_data_end+0xfffe33dc>
 4024084:	d8801317 	ldw	r2,76(sp)
 4024088:	d8800515 	stw	r2,20(sp)
 402408c:	003c2a06 	br	4023138 <__alt_data_end+0xfffe3138>
 4024090:	d9800317 	ldw	r6,12(sp)
 4024094:	00800084 	movi	r2,2
 4024098:	11801516 	blt	r2,r6,40240f0 <_dtoa_r+0x1660>
 402409c:	d9c00c17 	ldw	r7,48(sp)
 40240a0:	d9c00615 	stw	r7,24(sp)
 40240a4:	003df706 	br	4023884 <__alt_data_end+0xfffe3884>
 40240a8:	193d3926 	beq	r3,r4,4023590 <__alt_data_end+0xfffe3590>
 40240ac:	00c00f04 	movi	r3,60
 40240b0:	1885c83a 	sub	r2,r3,r2
 40240b4:	003ddf06 	br	4023834 <__alt_data_end+0xfffe3834>
 40240b8:	e009883a 	mov	r4,fp
 40240bc:	e0001115 	stw	zero,68(fp)
 40240c0:	000b883a 	mov	r5,zero
 40240c4:	4025b140 	call	4025b14 <_Balloc>
 40240c8:	d8800715 	stw	r2,28(sp)
 40240cc:	d8c00717 	ldw	r3,28(sp)
 40240d0:	00bfffc4 	movi	r2,-1
 40240d4:	01000044 	movi	r4,1
 40240d8:	d8800c15 	stw	r2,48(sp)
 40240dc:	e0c01015 	stw	r3,64(fp)
 40240e0:	d9000b15 	stw	r4,44(sp)
 40240e4:	d8800615 	stw	r2,24(sp)
 40240e8:	d8002215 	stw	zero,136(sp)
 40240ec:	003c4106 	br	40231f4 <__alt_data_end+0xfffe31f4>
 40240f0:	d8c00c17 	ldw	r3,48(sp)
 40240f4:	d8c00615 	stw	r3,24(sp)
 40240f8:	003e7006 	br	4023abc <__alt_data_end+0xfffe3abc>
 40240fc:	04400044 	movi	r17,1
 4024100:	003b2006 	br	4022d84 <__alt_data_end+0xfffe2d84>
 4024104:	000b883a 	mov	r5,zero
 4024108:	003b3d06 	br	4022e00 <__alt_data_end+0xfffe2e00>
 402410c:	d8800c17 	ldw	r2,48(sp)
 4024110:	d8800615 	stw	r2,24(sp)
 4024114:	003e6906 	br	4023abc <__alt_data_end+0xfffe3abc>

04024118 <__sflush_r>:
 4024118:	2880030b 	ldhu	r2,12(r5)
 402411c:	defffb04 	addi	sp,sp,-20
 4024120:	dcc00315 	stw	r19,12(sp)
 4024124:	dc400115 	stw	r17,4(sp)
 4024128:	dfc00415 	stw	ra,16(sp)
 402412c:	dc800215 	stw	r18,8(sp)
 4024130:	dc000015 	stw	r16,0(sp)
 4024134:	10c0020c 	andi	r3,r2,8
 4024138:	2823883a 	mov	r17,r5
 402413c:	2027883a 	mov	r19,r4
 4024140:	1800311e 	bne	r3,zero,4024208 <__sflush_r+0xf0>
 4024144:	28c00117 	ldw	r3,4(r5)
 4024148:	10820014 	ori	r2,r2,2048
 402414c:	2880030d 	sth	r2,12(r5)
 4024150:	00c04b0e 	bge	zero,r3,4024280 <__sflush_r+0x168>
 4024154:	8a000a17 	ldw	r8,40(r17)
 4024158:	40002326 	beq	r8,zero,40241e8 <__sflush_r+0xd0>
 402415c:	9c000017 	ldw	r16,0(r19)
 4024160:	10c4000c 	andi	r3,r2,4096
 4024164:	98000015 	stw	zero,0(r19)
 4024168:	18004826 	beq	r3,zero,402428c <__sflush_r+0x174>
 402416c:	89801417 	ldw	r6,80(r17)
 4024170:	10c0010c 	andi	r3,r2,4
 4024174:	18000626 	beq	r3,zero,4024190 <__sflush_r+0x78>
 4024178:	88c00117 	ldw	r3,4(r17)
 402417c:	88800c17 	ldw	r2,48(r17)
 4024180:	30cdc83a 	sub	r6,r6,r3
 4024184:	10000226 	beq	r2,zero,4024190 <__sflush_r+0x78>
 4024188:	88800f17 	ldw	r2,60(r17)
 402418c:	308dc83a 	sub	r6,r6,r2
 4024190:	89400717 	ldw	r5,28(r17)
 4024194:	000f883a 	mov	r7,zero
 4024198:	9809883a 	mov	r4,r19
 402419c:	403ee83a 	callr	r8
 40241a0:	00ffffc4 	movi	r3,-1
 40241a4:	10c04426 	beq	r2,r3,40242b8 <__sflush_r+0x1a0>
 40241a8:	88c0030b 	ldhu	r3,12(r17)
 40241ac:	89000417 	ldw	r4,16(r17)
 40241b0:	88000115 	stw	zero,4(r17)
 40241b4:	197dffcc 	andi	r5,r3,63487
 40241b8:	8940030d 	sth	r5,12(r17)
 40241bc:	89000015 	stw	r4,0(r17)
 40241c0:	18c4000c 	andi	r3,r3,4096
 40241c4:	18002c1e 	bne	r3,zero,4024278 <__sflush_r+0x160>
 40241c8:	89400c17 	ldw	r5,48(r17)
 40241cc:	9c000015 	stw	r16,0(r19)
 40241d0:	28000526 	beq	r5,zero,40241e8 <__sflush_r+0xd0>
 40241d4:	88801004 	addi	r2,r17,64
 40241d8:	28800226 	beq	r5,r2,40241e4 <__sflush_r+0xcc>
 40241dc:	9809883a 	mov	r4,r19
 40241e0:	40248840 	call	4024884 <_free_r>
 40241e4:	88000c15 	stw	zero,48(r17)
 40241e8:	0005883a 	mov	r2,zero
 40241ec:	dfc00417 	ldw	ra,16(sp)
 40241f0:	dcc00317 	ldw	r19,12(sp)
 40241f4:	dc800217 	ldw	r18,8(sp)
 40241f8:	dc400117 	ldw	r17,4(sp)
 40241fc:	dc000017 	ldw	r16,0(sp)
 4024200:	dec00504 	addi	sp,sp,20
 4024204:	f800283a 	ret
 4024208:	2c800417 	ldw	r18,16(r5)
 402420c:	903ff626 	beq	r18,zero,40241e8 <__alt_data_end+0xfffe41e8>
 4024210:	2c000017 	ldw	r16,0(r5)
 4024214:	108000cc 	andi	r2,r2,3
 4024218:	2c800015 	stw	r18,0(r5)
 402421c:	84a1c83a 	sub	r16,r16,r18
 4024220:	1000131e 	bne	r2,zero,4024270 <__sflush_r+0x158>
 4024224:	28800517 	ldw	r2,20(r5)
 4024228:	88800215 	stw	r2,8(r17)
 402422c:	04000316 	blt	zero,r16,402423c <__sflush_r+0x124>
 4024230:	003fed06 	br	40241e8 <__alt_data_end+0xfffe41e8>
 4024234:	90a5883a 	add	r18,r18,r2
 4024238:	043feb0e 	bge	zero,r16,40241e8 <__alt_data_end+0xfffe41e8>
 402423c:	88800917 	ldw	r2,36(r17)
 4024240:	89400717 	ldw	r5,28(r17)
 4024244:	800f883a 	mov	r7,r16
 4024248:	900d883a 	mov	r6,r18
 402424c:	9809883a 	mov	r4,r19
 4024250:	103ee83a 	callr	r2
 4024254:	80a1c83a 	sub	r16,r16,r2
 4024258:	00bff616 	blt	zero,r2,4024234 <__alt_data_end+0xfffe4234>
 402425c:	88c0030b 	ldhu	r3,12(r17)
 4024260:	00bfffc4 	movi	r2,-1
 4024264:	18c01014 	ori	r3,r3,64
 4024268:	88c0030d 	sth	r3,12(r17)
 402426c:	003fdf06 	br	40241ec <__alt_data_end+0xfffe41ec>
 4024270:	0005883a 	mov	r2,zero
 4024274:	003fec06 	br	4024228 <__alt_data_end+0xfffe4228>
 4024278:	88801415 	stw	r2,80(r17)
 402427c:	003fd206 	br	40241c8 <__alt_data_end+0xfffe41c8>
 4024280:	28c00f17 	ldw	r3,60(r5)
 4024284:	00ffb316 	blt	zero,r3,4024154 <__alt_data_end+0xfffe4154>
 4024288:	003fd706 	br	40241e8 <__alt_data_end+0xfffe41e8>
 402428c:	89400717 	ldw	r5,28(r17)
 4024290:	000d883a 	mov	r6,zero
 4024294:	01c00044 	movi	r7,1
 4024298:	9809883a 	mov	r4,r19
 402429c:	403ee83a 	callr	r8
 40242a0:	100d883a 	mov	r6,r2
 40242a4:	00bfffc4 	movi	r2,-1
 40242a8:	30801426 	beq	r6,r2,40242fc <__sflush_r+0x1e4>
 40242ac:	8880030b 	ldhu	r2,12(r17)
 40242b0:	8a000a17 	ldw	r8,40(r17)
 40242b4:	003fae06 	br	4024170 <__alt_data_end+0xfffe4170>
 40242b8:	98c00017 	ldw	r3,0(r19)
 40242bc:	183fba26 	beq	r3,zero,40241a8 <__alt_data_end+0xfffe41a8>
 40242c0:	01000744 	movi	r4,29
 40242c4:	19000626 	beq	r3,r4,40242e0 <__sflush_r+0x1c8>
 40242c8:	01000584 	movi	r4,22
 40242cc:	19000426 	beq	r3,r4,40242e0 <__sflush_r+0x1c8>
 40242d0:	88c0030b 	ldhu	r3,12(r17)
 40242d4:	18c01014 	ori	r3,r3,64
 40242d8:	88c0030d 	sth	r3,12(r17)
 40242dc:	003fc306 	br	40241ec <__alt_data_end+0xfffe41ec>
 40242e0:	8880030b 	ldhu	r2,12(r17)
 40242e4:	88c00417 	ldw	r3,16(r17)
 40242e8:	88000115 	stw	zero,4(r17)
 40242ec:	10bdffcc 	andi	r2,r2,63487
 40242f0:	8880030d 	sth	r2,12(r17)
 40242f4:	88c00015 	stw	r3,0(r17)
 40242f8:	003fb306 	br	40241c8 <__alt_data_end+0xfffe41c8>
 40242fc:	98800017 	ldw	r2,0(r19)
 4024300:	103fea26 	beq	r2,zero,40242ac <__alt_data_end+0xfffe42ac>
 4024304:	00c00744 	movi	r3,29
 4024308:	10c00226 	beq	r2,r3,4024314 <__sflush_r+0x1fc>
 402430c:	00c00584 	movi	r3,22
 4024310:	10c0031e 	bne	r2,r3,4024320 <__sflush_r+0x208>
 4024314:	9c000015 	stw	r16,0(r19)
 4024318:	0005883a 	mov	r2,zero
 402431c:	003fb306 	br	40241ec <__alt_data_end+0xfffe41ec>
 4024320:	88c0030b 	ldhu	r3,12(r17)
 4024324:	3005883a 	mov	r2,r6
 4024328:	18c01014 	ori	r3,r3,64
 402432c:	88c0030d 	sth	r3,12(r17)
 4024330:	003fae06 	br	40241ec <__alt_data_end+0xfffe41ec>

04024334 <_fflush_r>:
 4024334:	defffd04 	addi	sp,sp,-12
 4024338:	dc000115 	stw	r16,4(sp)
 402433c:	dfc00215 	stw	ra,8(sp)
 4024340:	2021883a 	mov	r16,r4
 4024344:	20000226 	beq	r4,zero,4024350 <_fflush_r+0x1c>
 4024348:	20800e17 	ldw	r2,56(r4)
 402434c:	10000c26 	beq	r2,zero,4024380 <_fflush_r+0x4c>
 4024350:	2880030f 	ldh	r2,12(r5)
 4024354:	1000051e 	bne	r2,zero,402436c <_fflush_r+0x38>
 4024358:	0005883a 	mov	r2,zero
 402435c:	dfc00217 	ldw	ra,8(sp)
 4024360:	dc000117 	ldw	r16,4(sp)
 4024364:	dec00304 	addi	sp,sp,12
 4024368:	f800283a 	ret
 402436c:	8009883a 	mov	r4,r16
 4024370:	dfc00217 	ldw	ra,8(sp)
 4024374:	dc000117 	ldw	r16,4(sp)
 4024378:	dec00304 	addi	sp,sp,12
 402437c:	40241181 	jmpi	4024118 <__sflush_r>
 4024380:	d9400015 	stw	r5,0(sp)
 4024384:	40247100 	call	4024710 <__sinit>
 4024388:	d9400017 	ldw	r5,0(sp)
 402438c:	003ff006 	br	4024350 <__alt_data_end+0xfffe4350>

04024390 <fflush>:
 4024390:	20000526 	beq	r4,zero,40243a8 <fflush+0x18>
 4024394:	008100f4 	movhi	r2,1027
 4024398:	10887f04 	addi	r2,r2,8700
 402439c:	200b883a 	mov	r5,r4
 40243a0:	11000017 	ldw	r4,0(r2)
 40243a4:	40243341 	jmpi	4024334 <_fflush_r>
 40243a8:	008100f4 	movhi	r2,1027
 40243ac:	10887e04 	addi	r2,r2,8696
 40243b0:	11000017 	ldw	r4,0(r2)
 40243b4:	014100b4 	movhi	r5,1026
 40243b8:	2950cd04 	addi	r5,r5,17204
 40243bc:	4024c581 	jmpi	4024c58 <_fwalk_reent>

040243c0 <__fp_unlock>:
 40243c0:	0005883a 	mov	r2,zero
 40243c4:	f800283a 	ret

040243c8 <_cleanup_r>:
 40243c8:	014100f4 	movhi	r5,1027
 40243cc:	29619204 	addi	r5,r5,-31160
 40243d0:	4024c581 	jmpi	4024c58 <_fwalk_reent>

040243d4 <__sinit.part.1>:
 40243d4:	defff704 	addi	sp,sp,-36
 40243d8:	00c100b4 	movhi	r3,1026
 40243dc:	dfc00815 	stw	ra,32(sp)
 40243e0:	ddc00715 	stw	r23,28(sp)
 40243e4:	dd800615 	stw	r22,24(sp)
 40243e8:	dd400515 	stw	r21,20(sp)
 40243ec:	dd000415 	stw	r20,16(sp)
 40243f0:	dcc00315 	stw	r19,12(sp)
 40243f4:	dc800215 	stw	r18,8(sp)
 40243f8:	dc400115 	stw	r17,4(sp)
 40243fc:	dc000015 	stw	r16,0(sp)
 4024400:	18d0f204 	addi	r3,r3,17352
 4024404:	24000117 	ldw	r16,4(r4)
 4024408:	20c00f15 	stw	r3,60(r4)
 402440c:	2080bb04 	addi	r2,r4,748
 4024410:	00c000c4 	movi	r3,3
 4024414:	20c0b915 	stw	r3,740(r4)
 4024418:	2080ba15 	stw	r2,744(r4)
 402441c:	2000b815 	stw	zero,736(r4)
 4024420:	05c00204 	movi	r23,8
 4024424:	00800104 	movi	r2,4
 4024428:	2025883a 	mov	r18,r4
 402442c:	b80d883a 	mov	r6,r23
 4024430:	81001704 	addi	r4,r16,92
 4024434:	000b883a 	mov	r5,zero
 4024438:	80000015 	stw	zero,0(r16)
 402443c:	80000115 	stw	zero,4(r16)
 4024440:	80000215 	stw	zero,8(r16)
 4024444:	8080030d 	sth	r2,12(r16)
 4024448:	80001915 	stw	zero,100(r16)
 402444c:	8000038d 	sth	zero,14(r16)
 4024450:	80000415 	stw	zero,16(r16)
 4024454:	80000515 	stw	zero,20(r16)
 4024458:	80000615 	stw	zero,24(r16)
 402445c:	40259ec0 	call	40259ec <memset>
 4024460:	058100b4 	movhi	r22,1026
 4024464:	94400217 	ldw	r17,8(r18)
 4024468:	054100b4 	movhi	r21,1026
 402446c:	050100b4 	movhi	r20,1026
 4024470:	04c100b4 	movhi	r19,1026
 4024474:	b59af604 	addi	r22,r22,27608
 4024478:	ad5b0d04 	addi	r21,r21,27700
 402447c:	a51b2c04 	addi	r20,r20,27824
 4024480:	9cdb4304 	addi	r19,r19,27916
 4024484:	85800815 	stw	r22,32(r16)
 4024488:	85400915 	stw	r21,36(r16)
 402448c:	85000a15 	stw	r20,40(r16)
 4024490:	84c00b15 	stw	r19,44(r16)
 4024494:	84000715 	stw	r16,28(r16)
 4024498:	00800284 	movi	r2,10
 402449c:	8880030d 	sth	r2,12(r17)
 40244a0:	00800044 	movi	r2,1
 40244a4:	b80d883a 	mov	r6,r23
 40244a8:	89001704 	addi	r4,r17,92
 40244ac:	000b883a 	mov	r5,zero
 40244b0:	88000015 	stw	zero,0(r17)
 40244b4:	88000115 	stw	zero,4(r17)
 40244b8:	88000215 	stw	zero,8(r17)
 40244bc:	88001915 	stw	zero,100(r17)
 40244c0:	8880038d 	sth	r2,14(r17)
 40244c4:	88000415 	stw	zero,16(r17)
 40244c8:	88000515 	stw	zero,20(r17)
 40244cc:	88000615 	stw	zero,24(r17)
 40244d0:	40259ec0 	call	40259ec <memset>
 40244d4:	94000317 	ldw	r16,12(r18)
 40244d8:	00800484 	movi	r2,18
 40244dc:	8c400715 	stw	r17,28(r17)
 40244e0:	8d800815 	stw	r22,32(r17)
 40244e4:	8d400915 	stw	r21,36(r17)
 40244e8:	8d000a15 	stw	r20,40(r17)
 40244ec:	8cc00b15 	stw	r19,44(r17)
 40244f0:	8080030d 	sth	r2,12(r16)
 40244f4:	00800084 	movi	r2,2
 40244f8:	80000015 	stw	zero,0(r16)
 40244fc:	80000115 	stw	zero,4(r16)
 4024500:	80000215 	stw	zero,8(r16)
 4024504:	80001915 	stw	zero,100(r16)
 4024508:	8080038d 	sth	r2,14(r16)
 402450c:	80000415 	stw	zero,16(r16)
 4024510:	80000515 	stw	zero,20(r16)
 4024514:	80000615 	stw	zero,24(r16)
 4024518:	b80d883a 	mov	r6,r23
 402451c:	000b883a 	mov	r5,zero
 4024520:	81001704 	addi	r4,r16,92
 4024524:	40259ec0 	call	40259ec <memset>
 4024528:	00800044 	movi	r2,1
 402452c:	84000715 	stw	r16,28(r16)
 4024530:	85800815 	stw	r22,32(r16)
 4024534:	85400915 	stw	r21,36(r16)
 4024538:	85000a15 	stw	r20,40(r16)
 402453c:	84c00b15 	stw	r19,44(r16)
 4024540:	90800e15 	stw	r2,56(r18)
 4024544:	dfc00817 	ldw	ra,32(sp)
 4024548:	ddc00717 	ldw	r23,28(sp)
 402454c:	dd800617 	ldw	r22,24(sp)
 4024550:	dd400517 	ldw	r21,20(sp)
 4024554:	dd000417 	ldw	r20,16(sp)
 4024558:	dcc00317 	ldw	r19,12(sp)
 402455c:	dc800217 	ldw	r18,8(sp)
 4024560:	dc400117 	ldw	r17,4(sp)
 4024564:	dc000017 	ldw	r16,0(sp)
 4024568:	dec00904 	addi	sp,sp,36
 402456c:	f800283a 	ret

04024570 <__fp_lock>:
 4024570:	0005883a 	mov	r2,zero
 4024574:	f800283a 	ret

04024578 <__sfmoreglue>:
 4024578:	defffc04 	addi	sp,sp,-16
 402457c:	dc400115 	stw	r17,4(sp)
 4024580:	2c7fffc4 	addi	r17,r5,-1
 4024584:	8c401a24 	muli	r17,r17,104
 4024588:	dc800215 	stw	r18,8(sp)
 402458c:	2825883a 	mov	r18,r5
 4024590:	89401d04 	addi	r5,r17,116
 4024594:	dc000015 	stw	r16,0(sp)
 4024598:	dfc00315 	stw	ra,12(sp)
 402459c:	4024fb40 	call	4024fb4 <_malloc_r>
 40245a0:	1021883a 	mov	r16,r2
 40245a4:	10000726 	beq	r2,zero,40245c4 <__sfmoreglue+0x4c>
 40245a8:	11000304 	addi	r4,r2,12
 40245ac:	10000015 	stw	zero,0(r2)
 40245b0:	14800115 	stw	r18,4(r2)
 40245b4:	11000215 	stw	r4,8(r2)
 40245b8:	89801a04 	addi	r6,r17,104
 40245bc:	000b883a 	mov	r5,zero
 40245c0:	40259ec0 	call	40259ec <memset>
 40245c4:	8005883a 	mov	r2,r16
 40245c8:	dfc00317 	ldw	ra,12(sp)
 40245cc:	dc800217 	ldw	r18,8(sp)
 40245d0:	dc400117 	ldw	r17,4(sp)
 40245d4:	dc000017 	ldw	r16,0(sp)
 40245d8:	dec00404 	addi	sp,sp,16
 40245dc:	f800283a 	ret

040245e0 <__sfp>:
 40245e0:	defffb04 	addi	sp,sp,-20
 40245e4:	dc000015 	stw	r16,0(sp)
 40245e8:	040100f4 	movhi	r16,1027
 40245ec:	84087e04 	addi	r16,r16,8696
 40245f0:	dcc00315 	stw	r19,12(sp)
 40245f4:	2027883a 	mov	r19,r4
 40245f8:	81000017 	ldw	r4,0(r16)
 40245fc:	dfc00415 	stw	ra,16(sp)
 4024600:	dc800215 	stw	r18,8(sp)
 4024604:	20800e17 	ldw	r2,56(r4)
 4024608:	dc400115 	stw	r17,4(sp)
 402460c:	1000021e 	bne	r2,zero,4024618 <__sfp+0x38>
 4024610:	40243d40 	call	40243d4 <__sinit.part.1>
 4024614:	81000017 	ldw	r4,0(r16)
 4024618:	2480b804 	addi	r18,r4,736
 402461c:	047fffc4 	movi	r17,-1
 4024620:	91000117 	ldw	r4,4(r18)
 4024624:	94000217 	ldw	r16,8(r18)
 4024628:	213fffc4 	addi	r4,r4,-1
 402462c:	20000a16 	blt	r4,zero,4024658 <__sfp+0x78>
 4024630:	8080030f 	ldh	r2,12(r16)
 4024634:	10000c26 	beq	r2,zero,4024668 <__sfp+0x88>
 4024638:	80c01d04 	addi	r3,r16,116
 402463c:	00000206 	br	4024648 <__sfp+0x68>
 4024640:	18bfe60f 	ldh	r2,-104(r3)
 4024644:	10000826 	beq	r2,zero,4024668 <__sfp+0x88>
 4024648:	213fffc4 	addi	r4,r4,-1
 402464c:	1c3ffd04 	addi	r16,r3,-12
 4024650:	18c01a04 	addi	r3,r3,104
 4024654:	247ffa1e 	bne	r4,r17,4024640 <__alt_data_end+0xfffe4640>
 4024658:	90800017 	ldw	r2,0(r18)
 402465c:	10001d26 	beq	r2,zero,40246d4 <__sfp+0xf4>
 4024660:	1025883a 	mov	r18,r2
 4024664:	003fee06 	br	4024620 <__alt_data_end+0xfffe4620>
 4024668:	00bfffc4 	movi	r2,-1
 402466c:	8080038d 	sth	r2,14(r16)
 4024670:	00800044 	movi	r2,1
 4024674:	8080030d 	sth	r2,12(r16)
 4024678:	80001915 	stw	zero,100(r16)
 402467c:	80000015 	stw	zero,0(r16)
 4024680:	80000215 	stw	zero,8(r16)
 4024684:	80000115 	stw	zero,4(r16)
 4024688:	80000415 	stw	zero,16(r16)
 402468c:	80000515 	stw	zero,20(r16)
 4024690:	80000615 	stw	zero,24(r16)
 4024694:	01800204 	movi	r6,8
 4024698:	000b883a 	mov	r5,zero
 402469c:	81001704 	addi	r4,r16,92
 40246a0:	40259ec0 	call	40259ec <memset>
 40246a4:	8005883a 	mov	r2,r16
 40246a8:	80000c15 	stw	zero,48(r16)
 40246ac:	80000d15 	stw	zero,52(r16)
 40246b0:	80001115 	stw	zero,68(r16)
 40246b4:	80001215 	stw	zero,72(r16)
 40246b8:	dfc00417 	ldw	ra,16(sp)
 40246bc:	dcc00317 	ldw	r19,12(sp)
 40246c0:	dc800217 	ldw	r18,8(sp)
 40246c4:	dc400117 	ldw	r17,4(sp)
 40246c8:	dc000017 	ldw	r16,0(sp)
 40246cc:	dec00504 	addi	sp,sp,20
 40246d0:	f800283a 	ret
 40246d4:	01400104 	movi	r5,4
 40246d8:	9809883a 	mov	r4,r19
 40246dc:	40245780 	call	4024578 <__sfmoreglue>
 40246e0:	90800015 	stw	r2,0(r18)
 40246e4:	103fde1e 	bne	r2,zero,4024660 <__alt_data_end+0xfffe4660>
 40246e8:	00800304 	movi	r2,12
 40246ec:	98800015 	stw	r2,0(r19)
 40246f0:	0005883a 	mov	r2,zero
 40246f4:	003ff006 	br	40246b8 <__alt_data_end+0xfffe46b8>

040246f8 <_cleanup>:
 40246f8:	008100f4 	movhi	r2,1027
 40246fc:	10887e04 	addi	r2,r2,8696
 4024700:	11000017 	ldw	r4,0(r2)
 4024704:	014100f4 	movhi	r5,1027
 4024708:	29619204 	addi	r5,r5,-31160
 402470c:	4024c581 	jmpi	4024c58 <_fwalk_reent>

04024710 <__sinit>:
 4024710:	20800e17 	ldw	r2,56(r4)
 4024714:	10000126 	beq	r2,zero,402471c <__sinit+0xc>
 4024718:	f800283a 	ret
 402471c:	40243d41 	jmpi	40243d4 <__sinit.part.1>

04024720 <__sfp_lock_acquire>:
 4024720:	f800283a 	ret

04024724 <__sfp_lock_release>:
 4024724:	f800283a 	ret

04024728 <__sinit_lock_acquire>:
 4024728:	f800283a 	ret

0402472c <__sinit_lock_release>:
 402472c:	f800283a 	ret

04024730 <__fp_lock_all>:
 4024730:	008100f4 	movhi	r2,1027
 4024734:	10887f04 	addi	r2,r2,8700
 4024738:	11000017 	ldw	r4,0(r2)
 402473c:	014100b4 	movhi	r5,1026
 4024740:	29515c04 	addi	r5,r5,17776
 4024744:	4024b941 	jmpi	4024b94 <_fwalk>

04024748 <__fp_unlock_all>:
 4024748:	008100f4 	movhi	r2,1027
 402474c:	10887f04 	addi	r2,r2,8700
 4024750:	11000017 	ldw	r4,0(r2)
 4024754:	014100b4 	movhi	r5,1026
 4024758:	2950f004 	addi	r5,r5,17344
 402475c:	4024b941 	jmpi	4024b94 <_fwalk>

04024760 <_malloc_trim_r>:
 4024760:	defffb04 	addi	sp,sp,-20
 4024764:	dcc00315 	stw	r19,12(sp)
 4024768:	04c100f4 	movhi	r19,1027
 402476c:	dc800215 	stw	r18,8(sp)
 4024770:	dc400115 	stw	r17,4(sp)
 4024774:	dc000015 	stw	r16,0(sp)
 4024778:	dfc00415 	stw	ra,16(sp)
 402477c:	2821883a 	mov	r16,r5
 4024780:	9cc2bf04 	addi	r19,r19,2812
 4024784:	2025883a 	mov	r18,r4
 4024788:	402d1c80 	call	402d1c8 <__malloc_lock>
 402478c:	98800217 	ldw	r2,8(r19)
 4024790:	14400117 	ldw	r17,4(r2)
 4024794:	00bfff04 	movi	r2,-4
 4024798:	88a2703a 	and	r17,r17,r2
 402479c:	8c21c83a 	sub	r16,r17,r16
 40247a0:	8403fbc4 	addi	r16,r16,4079
 40247a4:	8020d33a 	srli	r16,r16,12
 40247a8:	0083ffc4 	movi	r2,4095
 40247ac:	843fffc4 	addi	r16,r16,-1
 40247b0:	8020933a 	slli	r16,r16,12
 40247b4:	1400060e 	bge	r2,r16,40247d0 <_malloc_trim_r+0x70>
 40247b8:	000b883a 	mov	r5,zero
 40247bc:	9009883a 	mov	r4,r18
 40247c0:	4026b840 	call	4026b84 <_sbrk_r>
 40247c4:	98c00217 	ldw	r3,8(r19)
 40247c8:	1c47883a 	add	r3,r3,r17
 40247cc:	10c00a26 	beq	r2,r3,40247f8 <_malloc_trim_r+0x98>
 40247d0:	9009883a 	mov	r4,r18
 40247d4:	402d1ec0 	call	402d1ec <__malloc_unlock>
 40247d8:	0005883a 	mov	r2,zero
 40247dc:	dfc00417 	ldw	ra,16(sp)
 40247e0:	dcc00317 	ldw	r19,12(sp)
 40247e4:	dc800217 	ldw	r18,8(sp)
 40247e8:	dc400117 	ldw	r17,4(sp)
 40247ec:	dc000017 	ldw	r16,0(sp)
 40247f0:	dec00504 	addi	sp,sp,20
 40247f4:	f800283a 	ret
 40247f8:	040bc83a 	sub	r5,zero,r16
 40247fc:	9009883a 	mov	r4,r18
 4024800:	4026b840 	call	4026b84 <_sbrk_r>
 4024804:	00ffffc4 	movi	r3,-1
 4024808:	10c00d26 	beq	r2,r3,4024840 <_malloc_trim_r+0xe0>
 402480c:	00c100f4 	movhi	r3,1027
 4024810:	18cf9a04 	addi	r3,r3,15976
 4024814:	18800017 	ldw	r2,0(r3)
 4024818:	99000217 	ldw	r4,8(r19)
 402481c:	8c23c83a 	sub	r17,r17,r16
 4024820:	8c400054 	ori	r17,r17,1
 4024824:	1421c83a 	sub	r16,r2,r16
 4024828:	24400115 	stw	r17,4(r4)
 402482c:	9009883a 	mov	r4,r18
 4024830:	1c000015 	stw	r16,0(r3)
 4024834:	402d1ec0 	call	402d1ec <__malloc_unlock>
 4024838:	00800044 	movi	r2,1
 402483c:	003fe706 	br	40247dc <__alt_data_end+0xfffe47dc>
 4024840:	000b883a 	mov	r5,zero
 4024844:	9009883a 	mov	r4,r18
 4024848:	4026b840 	call	4026b84 <_sbrk_r>
 402484c:	99000217 	ldw	r4,8(r19)
 4024850:	014003c4 	movi	r5,15
 4024854:	1107c83a 	sub	r3,r2,r4
 4024858:	28ffdd0e 	bge	r5,r3,40247d0 <__alt_data_end+0xfffe47d0>
 402485c:	014100f4 	movhi	r5,1027
 4024860:	29488104 	addi	r5,r5,8708
 4024864:	29400017 	ldw	r5,0(r5)
 4024868:	18c00054 	ori	r3,r3,1
 402486c:	20c00115 	stw	r3,4(r4)
 4024870:	00c100f4 	movhi	r3,1027
 4024874:	1145c83a 	sub	r2,r2,r5
 4024878:	18cf9a04 	addi	r3,r3,15976
 402487c:	18800015 	stw	r2,0(r3)
 4024880:	003fd306 	br	40247d0 <__alt_data_end+0xfffe47d0>

04024884 <_free_r>:
 4024884:	28004126 	beq	r5,zero,402498c <_free_r+0x108>
 4024888:	defffd04 	addi	sp,sp,-12
 402488c:	dc400115 	stw	r17,4(sp)
 4024890:	dc000015 	stw	r16,0(sp)
 4024894:	2023883a 	mov	r17,r4
 4024898:	2821883a 	mov	r16,r5
 402489c:	dfc00215 	stw	ra,8(sp)
 40248a0:	402d1c80 	call	402d1c8 <__malloc_lock>
 40248a4:	81ffff17 	ldw	r7,-4(r16)
 40248a8:	00bfff84 	movi	r2,-2
 40248ac:	010100f4 	movhi	r4,1027
 40248b0:	81bffe04 	addi	r6,r16,-8
 40248b4:	3884703a 	and	r2,r7,r2
 40248b8:	2102bf04 	addi	r4,r4,2812
 40248bc:	308b883a 	add	r5,r6,r2
 40248c0:	2a400117 	ldw	r9,4(r5)
 40248c4:	22000217 	ldw	r8,8(r4)
 40248c8:	00ffff04 	movi	r3,-4
 40248cc:	48c6703a 	and	r3,r9,r3
 40248d0:	2a005726 	beq	r5,r8,4024a30 <_free_r+0x1ac>
 40248d4:	28c00115 	stw	r3,4(r5)
 40248d8:	39c0004c 	andi	r7,r7,1
 40248dc:	3800091e 	bne	r7,zero,4024904 <_free_r+0x80>
 40248e0:	823ffe17 	ldw	r8,-8(r16)
 40248e4:	22400204 	addi	r9,r4,8
 40248e8:	320dc83a 	sub	r6,r6,r8
 40248ec:	31c00217 	ldw	r7,8(r6)
 40248f0:	1205883a 	add	r2,r2,r8
 40248f4:	3a406526 	beq	r7,r9,4024a8c <_free_r+0x208>
 40248f8:	32000317 	ldw	r8,12(r6)
 40248fc:	3a000315 	stw	r8,12(r7)
 4024900:	41c00215 	stw	r7,8(r8)
 4024904:	28cf883a 	add	r7,r5,r3
 4024908:	39c00117 	ldw	r7,4(r7)
 402490c:	39c0004c 	andi	r7,r7,1
 4024910:	38003a26 	beq	r7,zero,40249fc <_free_r+0x178>
 4024914:	10c00054 	ori	r3,r2,1
 4024918:	30c00115 	stw	r3,4(r6)
 402491c:	3087883a 	add	r3,r6,r2
 4024920:	18800015 	stw	r2,0(r3)
 4024924:	00c07fc4 	movi	r3,511
 4024928:	18801936 	bltu	r3,r2,4024990 <_free_r+0x10c>
 402492c:	1004d0fa 	srli	r2,r2,3
 4024930:	01c00044 	movi	r7,1
 4024934:	21400117 	ldw	r5,4(r4)
 4024938:	10c00044 	addi	r3,r2,1
 402493c:	18c7883a 	add	r3,r3,r3
 4024940:	1005d0ba 	srai	r2,r2,2
 4024944:	18c7883a 	add	r3,r3,r3
 4024948:	18c7883a 	add	r3,r3,r3
 402494c:	1907883a 	add	r3,r3,r4
 4024950:	3884983a 	sll	r2,r7,r2
 4024954:	19c00017 	ldw	r7,0(r3)
 4024958:	1a3ffe04 	addi	r8,r3,-8
 402495c:	1144b03a 	or	r2,r2,r5
 4024960:	32000315 	stw	r8,12(r6)
 4024964:	31c00215 	stw	r7,8(r6)
 4024968:	20800115 	stw	r2,4(r4)
 402496c:	19800015 	stw	r6,0(r3)
 4024970:	39800315 	stw	r6,12(r7)
 4024974:	8809883a 	mov	r4,r17
 4024978:	dfc00217 	ldw	ra,8(sp)
 402497c:	dc400117 	ldw	r17,4(sp)
 4024980:	dc000017 	ldw	r16,0(sp)
 4024984:	dec00304 	addi	sp,sp,12
 4024988:	402d1ec1 	jmpi	402d1ec <__malloc_unlock>
 402498c:	f800283a 	ret
 4024990:	100ad27a 	srli	r5,r2,9
 4024994:	00c00104 	movi	r3,4
 4024998:	19404a36 	bltu	r3,r5,4024ac4 <_free_r+0x240>
 402499c:	100ad1ba 	srli	r5,r2,6
 40249a0:	28c00e44 	addi	r3,r5,57
 40249a4:	18c7883a 	add	r3,r3,r3
 40249a8:	29400e04 	addi	r5,r5,56
 40249ac:	18c7883a 	add	r3,r3,r3
 40249b0:	18c7883a 	add	r3,r3,r3
 40249b4:	1909883a 	add	r4,r3,r4
 40249b8:	20c00017 	ldw	r3,0(r4)
 40249bc:	01c100f4 	movhi	r7,1027
 40249c0:	213ffe04 	addi	r4,r4,-8
 40249c4:	39c2bf04 	addi	r7,r7,2812
 40249c8:	20c04426 	beq	r4,r3,4024adc <_free_r+0x258>
 40249cc:	01ffff04 	movi	r7,-4
 40249d0:	19400117 	ldw	r5,4(r3)
 40249d4:	29ca703a 	and	r5,r5,r7
 40249d8:	1140022e 	bgeu	r2,r5,40249e4 <_free_r+0x160>
 40249dc:	18c00217 	ldw	r3,8(r3)
 40249e0:	20fffb1e 	bne	r4,r3,40249d0 <__alt_data_end+0xfffe49d0>
 40249e4:	19000317 	ldw	r4,12(r3)
 40249e8:	31000315 	stw	r4,12(r6)
 40249ec:	30c00215 	stw	r3,8(r6)
 40249f0:	21800215 	stw	r6,8(r4)
 40249f4:	19800315 	stw	r6,12(r3)
 40249f8:	003fde06 	br	4024974 <__alt_data_end+0xfffe4974>
 40249fc:	29c00217 	ldw	r7,8(r5)
 4024a00:	10c5883a 	add	r2,r2,r3
 4024a04:	00c100f4 	movhi	r3,1027
 4024a08:	18c2c104 	addi	r3,r3,2820
 4024a0c:	38c03b26 	beq	r7,r3,4024afc <_free_r+0x278>
 4024a10:	2a000317 	ldw	r8,12(r5)
 4024a14:	11400054 	ori	r5,r2,1
 4024a18:	3087883a 	add	r3,r6,r2
 4024a1c:	3a000315 	stw	r8,12(r7)
 4024a20:	41c00215 	stw	r7,8(r8)
 4024a24:	31400115 	stw	r5,4(r6)
 4024a28:	18800015 	stw	r2,0(r3)
 4024a2c:	003fbd06 	br	4024924 <__alt_data_end+0xfffe4924>
 4024a30:	39c0004c 	andi	r7,r7,1
 4024a34:	10c5883a 	add	r2,r2,r3
 4024a38:	3800071e 	bne	r7,zero,4024a58 <_free_r+0x1d4>
 4024a3c:	81fffe17 	ldw	r7,-8(r16)
 4024a40:	31cdc83a 	sub	r6,r6,r7
 4024a44:	30c00317 	ldw	r3,12(r6)
 4024a48:	31400217 	ldw	r5,8(r6)
 4024a4c:	11c5883a 	add	r2,r2,r7
 4024a50:	28c00315 	stw	r3,12(r5)
 4024a54:	19400215 	stw	r5,8(r3)
 4024a58:	10c00054 	ori	r3,r2,1
 4024a5c:	30c00115 	stw	r3,4(r6)
 4024a60:	00c100f4 	movhi	r3,1027
 4024a64:	18c88204 	addi	r3,r3,8712
 4024a68:	18c00017 	ldw	r3,0(r3)
 4024a6c:	21800215 	stw	r6,8(r4)
 4024a70:	10ffc036 	bltu	r2,r3,4024974 <__alt_data_end+0xfffe4974>
 4024a74:	008100f4 	movhi	r2,1027
 4024a78:	108f9104 	addi	r2,r2,15940
 4024a7c:	11400017 	ldw	r5,0(r2)
 4024a80:	8809883a 	mov	r4,r17
 4024a84:	40247600 	call	4024760 <_malloc_trim_r>
 4024a88:	003fba06 	br	4024974 <__alt_data_end+0xfffe4974>
 4024a8c:	28c9883a 	add	r4,r5,r3
 4024a90:	21000117 	ldw	r4,4(r4)
 4024a94:	2100004c 	andi	r4,r4,1
 4024a98:	2000391e 	bne	r4,zero,4024b80 <_free_r+0x2fc>
 4024a9c:	29c00217 	ldw	r7,8(r5)
 4024aa0:	29000317 	ldw	r4,12(r5)
 4024aa4:	1885883a 	add	r2,r3,r2
 4024aa8:	10c00054 	ori	r3,r2,1
 4024aac:	39000315 	stw	r4,12(r7)
 4024ab0:	21c00215 	stw	r7,8(r4)
 4024ab4:	30c00115 	stw	r3,4(r6)
 4024ab8:	308d883a 	add	r6,r6,r2
 4024abc:	30800015 	stw	r2,0(r6)
 4024ac0:	003fac06 	br	4024974 <__alt_data_end+0xfffe4974>
 4024ac4:	00c00504 	movi	r3,20
 4024ac8:	19401536 	bltu	r3,r5,4024b20 <_free_r+0x29c>
 4024acc:	28c01704 	addi	r3,r5,92
 4024ad0:	18c7883a 	add	r3,r3,r3
 4024ad4:	294016c4 	addi	r5,r5,91
 4024ad8:	003fb406 	br	40249ac <__alt_data_end+0xfffe49ac>
 4024adc:	280bd0ba 	srai	r5,r5,2
 4024ae0:	00c00044 	movi	r3,1
 4024ae4:	38800117 	ldw	r2,4(r7)
 4024ae8:	194a983a 	sll	r5,r3,r5
 4024aec:	2007883a 	mov	r3,r4
 4024af0:	2884b03a 	or	r2,r5,r2
 4024af4:	38800115 	stw	r2,4(r7)
 4024af8:	003fbb06 	br	40249e8 <__alt_data_end+0xfffe49e8>
 4024afc:	21800515 	stw	r6,20(r4)
 4024b00:	21800415 	stw	r6,16(r4)
 4024b04:	10c00054 	ori	r3,r2,1
 4024b08:	31c00315 	stw	r7,12(r6)
 4024b0c:	31c00215 	stw	r7,8(r6)
 4024b10:	30c00115 	stw	r3,4(r6)
 4024b14:	308d883a 	add	r6,r6,r2
 4024b18:	30800015 	stw	r2,0(r6)
 4024b1c:	003f9506 	br	4024974 <__alt_data_end+0xfffe4974>
 4024b20:	00c01504 	movi	r3,84
 4024b24:	19400536 	bltu	r3,r5,4024b3c <_free_r+0x2b8>
 4024b28:	100ad33a 	srli	r5,r2,12
 4024b2c:	28c01bc4 	addi	r3,r5,111
 4024b30:	18c7883a 	add	r3,r3,r3
 4024b34:	29401b84 	addi	r5,r5,110
 4024b38:	003f9c06 	br	40249ac <__alt_data_end+0xfffe49ac>
 4024b3c:	00c05504 	movi	r3,340
 4024b40:	19400536 	bltu	r3,r5,4024b58 <_free_r+0x2d4>
 4024b44:	100ad3fa 	srli	r5,r2,15
 4024b48:	28c01e04 	addi	r3,r5,120
 4024b4c:	18c7883a 	add	r3,r3,r3
 4024b50:	29401dc4 	addi	r5,r5,119
 4024b54:	003f9506 	br	40249ac <__alt_data_end+0xfffe49ac>
 4024b58:	00c15504 	movi	r3,1364
 4024b5c:	19400536 	bltu	r3,r5,4024b74 <_free_r+0x2f0>
 4024b60:	100ad4ba 	srli	r5,r2,18
 4024b64:	28c01f44 	addi	r3,r5,125
 4024b68:	18c7883a 	add	r3,r3,r3
 4024b6c:	29401f04 	addi	r5,r5,124
 4024b70:	003f8e06 	br	40249ac <__alt_data_end+0xfffe49ac>
 4024b74:	00c03f84 	movi	r3,254
 4024b78:	01401f84 	movi	r5,126
 4024b7c:	003f8b06 	br	40249ac <__alt_data_end+0xfffe49ac>
 4024b80:	10c00054 	ori	r3,r2,1
 4024b84:	30c00115 	stw	r3,4(r6)
 4024b88:	308d883a 	add	r6,r6,r2
 4024b8c:	30800015 	stw	r2,0(r6)
 4024b90:	003f7806 	br	4024974 <__alt_data_end+0xfffe4974>

04024b94 <_fwalk>:
 4024b94:	defff704 	addi	sp,sp,-36
 4024b98:	dd000415 	stw	r20,16(sp)
 4024b9c:	dfc00815 	stw	ra,32(sp)
 4024ba0:	ddc00715 	stw	r23,28(sp)
 4024ba4:	dd800615 	stw	r22,24(sp)
 4024ba8:	dd400515 	stw	r21,20(sp)
 4024bac:	dcc00315 	stw	r19,12(sp)
 4024bb0:	dc800215 	stw	r18,8(sp)
 4024bb4:	dc400115 	stw	r17,4(sp)
 4024bb8:	dc000015 	stw	r16,0(sp)
 4024bbc:	2500b804 	addi	r20,r4,736
 4024bc0:	a0002326 	beq	r20,zero,4024c50 <_fwalk+0xbc>
 4024bc4:	282b883a 	mov	r21,r5
 4024bc8:	002f883a 	mov	r23,zero
 4024bcc:	05800044 	movi	r22,1
 4024bd0:	04ffffc4 	movi	r19,-1
 4024bd4:	a4400117 	ldw	r17,4(r20)
 4024bd8:	a4800217 	ldw	r18,8(r20)
 4024bdc:	8c7fffc4 	addi	r17,r17,-1
 4024be0:	88000d16 	blt	r17,zero,4024c18 <_fwalk+0x84>
 4024be4:	94000304 	addi	r16,r18,12
 4024be8:	94800384 	addi	r18,r18,14
 4024bec:	8080000b 	ldhu	r2,0(r16)
 4024bf0:	8c7fffc4 	addi	r17,r17,-1
 4024bf4:	813ffd04 	addi	r4,r16,-12
 4024bf8:	b080042e 	bgeu	r22,r2,4024c0c <_fwalk+0x78>
 4024bfc:	9080000f 	ldh	r2,0(r18)
 4024c00:	14c00226 	beq	r2,r19,4024c0c <_fwalk+0x78>
 4024c04:	a83ee83a 	callr	r21
 4024c08:	b8aeb03a 	or	r23,r23,r2
 4024c0c:	84001a04 	addi	r16,r16,104
 4024c10:	94801a04 	addi	r18,r18,104
 4024c14:	8cfff51e 	bne	r17,r19,4024bec <__alt_data_end+0xfffe4bec>
 4024c18:	a5000017 	ldw	r20,0(r20)
 4024c1c:	a03fed1e 	bne	r20,zero,4024bd4 <__alt_data_end+0xfffe4bd4>
 4024c20:	b805883a 	mov	r2,r23
 4024c24:	dfc00817 	ldw	ra,32(sp)
 4024c28:	ddc00717 	ldw	r23,28(sp)
 4024c2c:	dd800617 	ldw	r22,24(sp)
 4024c30:	dd400517 	ldw	r21,20(sp)
 4024c34:	dd000417 	ldw	r20,16(sp)
 4024c38:	dcc00317 	ldw	r19,12(sp)
 4024c3c:	dc800217 	ldw	r18,8(sp)
 4024c40:	dc400117 	ldw	r17,4(sp)
 4024c44:	dc000017 	ldw	r16,0(sp)
 4024c48:	dec00904 	addi	sp,sp,36
 4024c4c:	f800283a 	ret
 4024c50:	002f883a 	mov	r23,zero
 4024c54:	003ff206 	br	4024c20 <__alt_data_end+0xfffe4c20>

04024c58 <_fwalk_reent>:
 4024c58:	defff704 	addi	sp,sp,-36
 4024c5c:	dd000415 	stw	r20,16(sp)
 4024c60:	dfc00815 	stw	ra,32(sp)
 4024c64:	ddc00715 	stw	r23,28(sp)
 4024c68:	dd800615 	stw	r22,24(sp)
 4024c6c:	dd400515 	stw	r21,20(sp)
 4024c70:	dcc00315 	stw	r19,12(sp)
 4024c74:	dc800215 	stw	r18,8(sp)
 4024c78:	dc400115 	stw	r17,4(sp)
 4024c7c:	dc000015 	stw	r16,0(sp)
 4024c80:	2500b804 	addi	r20,r4,736
 4024c84:	a0002326 	beq	r20,zero,4024d14 <_fwalk_reent+0xbc>
 4024c88:	282b883a 	mov	r21,r5
 4024c8c:	2027883a 	mov	r19,r4
 4024c90:	002f883a 	mov	r23,zero
 4024c94:	05800044 	movi	r22,1
 4024c98:	04bfffc4 	movi	r18,-1
 4024c9c:	a4400117 	ldw	r17,4(r20)
 4024ca0:	a4000217 	ldw	r16,8(r20)
 4024ca4:	8c7fffc4 	addi	r17,r17,-1
 4024ca8:	88000c16 	blt	r17,zero,4024cdc <_fwalk_reent+0x84>
 4024cac:	84000304 	addi	r16,r16,12
 4024cb0:	8080000b 	ldhu	r2,0(r16)
 4024cb4:	8c7fffc4 	addi	r17,r17,-1
 4024cb8:	817ffd04 	addi	r5,r16,-12
 4024cbc:	b080052e 	bgeu	r22,r2,4024cd4 <_fwalk_reent+0x7c>
 4024cc0:	8080008f 	ldh	r2,2(r16)
 4024cc4:	9809883a 	mov	r4,r19
 4024cc8:	14800226 	beq	r2,r18,4024cd4 <_fwalk_reent+0x7c>
 4024ccc:	a83ee83a 	callr	r21
 4024cd0:	b8aeb03a 	or	r23,r23,r2
 4024cd4:	84001a04 	addi	r16,r16,104
 4024cd8:	8cbff51e 	bne	r17,r18,4024cb0 <__alt_data_end+0xfffe4cb0>
 4024cdc:	a5000017 	ldw	r20,0(r20)
 4024ce0:	a03fee1e 	bne	r20,zero,4024c9c <__alt_data_end+0xfffe4c9c>
 4024ce4:	b805883a 	mov	r2,r23
 4024ce8:	dfc00817 	ldw	ra,32(sp)
 4024cec:	ddc00717 	ldw	r23,28(sp)
 4024cf0:	dd800617 	ldw	r22,24(sp)
 4024cf4:	dd400517 	ldw	r21,20(sp)
 4024cf8:	dd000417 	ldw	r20,16(sp)
 4024cfc:	dcc00317 	ldw	r19,12(sp)
 4024d00:	dc800217 	ldw	r18,8(sp)
 4024d04:	dc400117 	ldw	r17,4(sp)
 4024d08:	dc000017 	ldw	r16,0(sp)
 4024d0c:	dec00904 	addi	sp,sp,36
 4024d10:	f800283a 	ret
 4024d14:	002f883a 	mov	r23,zero
 4024d18:	003ff206 	br	4024ce4 <__alt_data_end+0xfffe4ce4>

04024d1c <_setlocale_r>:
 4024d1c:	30001b26 	beq	r6,zero,4024d8c <_setlocale_r+0x70>
 4024d20:	014100f4 	movhi	r5,1027
 4024d24:	defffe04 	addi	sp,sp,-8
 4024d28:	2940d904 	addi	r5,r5,868
 4024d2c:	3009883a 	mov	r4,r6
 4024d30:	dc000015 	stw	r16,0(sp)
 4024d34:	dfc00115 	stw	ra,4(sp)
 4024d38:	3021883a 	mov	r16,r6
 4024d3c:	4026d140 	call	4026d14 <strcmp>
 4024d40:	1000061e 	bne	r2,zero,4024d5c <_setlocale_r+0x40>
 4024d44:	008100f4 	movhi	r2,1027
 4024d48:	1080d804 	addi	r2,r2,864
 4024d4c:	dfc00117 	ldw	ra,4(sp)
 4024d50:	dc000017 	ldw	r16,0(sp)
 4024d54:	dec00204 	addi	sp,sp,8
 4024d58:	f800283a 	ret
 4024d5c:	014100f4 	movhi	r5,1027
 4024d60:	2940d804 	addi	r5,r5,864
 4024d64:	8009883a 	mov	r4,r16
 4024d68:	4026d140 	call	4026d14 <strcmp>
 4024d6c:	103ff526 	beq	r2,zero,4024d44 <__alt_data_end+0xfffe4d44>
 4024d70:	014100f4 	movhi	r5,1027
 4024d74:	2940c304 	addi	r5,r5,780
 4024d78:	8009883a 	mov	r4,r16
 4024d7c:	4026d140 	call	4026d14 <strcmp>
 4024d80:	103ff026 	beq	r2,zero,4024d44 <__alt_data_end+0xfffe4d44>
 4024d84:	0005883a 	mov	r2,zero
 4024d88:	003ff006 	br	4024d4c <__alt_data_end+0xfffe4d4c>
 4024d8c:	008100f4 	movhi	r2,1027
 4024d90:	1080d804 	addi	r2,r2,864
 4024d94:	f800283a 	ret

04024d98 <__locale_charset>:
 4024d98:	008100f4 	movhi	r2,1027
 4024d9c:	1082a904 	addi	r2,r2,2724
 4024da0:	f800283a 	ret

04024da4 <__locale_mb_cur_max>:
 4024da4:	008100f4 	movhi	r2,1027
 4024da8:	10888004 	addi	r2,r2,8704
 4024dac:	10800017 	ldw	r2,0(r2)
 4024db0:	f800283a 	ret

04024db4 <__locale_msgcharset>:
 4024db4:	008100f4 	movhi	r2,1027
 4024db8:	1082a104 	addi	r2,r2,2692
 4024dbc:	f800283a 	ret

04024dc0 <__locale_cjk_lang>:
 4024dc0:	0005883a 	mov	r2,zero
 4024dc4:	f800283a 	ret

04024dc8 <_localeconv_r>:
 4024dc8:	008100f4 	movhi	r2,1027
 4024dcc:	1082b104 	addi	r2,r2,2756
 4024dd0:	f800283a 	ret

04024dd4 <setlocale>:
 4024dd4:	008100f4 	movhi	r2,1027
 4024dd8:	10887f04 	addi	r2,r2,8700
 4024ddc:	280d883a 	mov	r6,r5
 4024de0:	200b883a 	mov	r5,r4
 4024de4:	11000017 	ldw	r4,0(r2)
 4024de8:	4024d1c1 	jmpi	4024d1c <_setlocale_r>

04024dec <localeconv>:
 4024dec:	008100f4 	movhi	r2,1027
 4024df0:	1082b104 	addi	r2,r2,2756
 4024df4:	f800283a 	ret

04024df8 <__smakebuf_r>:
 4024df8:	2880030b 	ldhu	r2,12(r5)
 4024dfc:	10c0008c 	andi	r3,r2,2
 4024e00:	1800411e 	bne	r3,zero,4024f08 <__smakebuf_r+0x110>
 4024e04:	deffec04 	addi	sp,sp,-80
 4024e08:	dc000f15 	stw	r16,60(sp)
 4024e0c:	2821883a 	mov	r16,r5
 4024e10:	2940038f 	ldh	r5,14(r5)
 4024e14:	dc401015 	stw	r17,64(sp)
 4024e18:	dfc01315 	stw	ra,76(sp)
 4024e1c:	dcc01215 	stw	r19,72(sp)
 4024e20:	dc801115 	stw	r18,68(sp)
 4024e24:	2023883a 	mov	r17,r4
 4024e28:	28001c16 	blt	r5,zero,4024e9c <__smakebuf_r+0xa4>
 4024e2c:	d80d883a 	mov	r6,sp
 4024e30:	40289540 	call	4028954 <_fstat_r>
 4024e34:	10001816 	blt	r2,zero,4024e98 <__smakebuf_r+0xa0>
 4024e38:	d8800117 	ldw	r2,4(sp)
 4024e3c:	00e00014 	movui	r3,32768
 4024e40:	10bc000c 	andi	r2,r2,61440
 4024e44:	14c80020 	cmpeqi	r19,r2,8192
 4024e48:	10c03726 	beq	r2,r3,4024f28 <__smakebuf_r+0x130>
 4024e4c:	80c0030b 	ldhu	r3,12(r16)
 4024e50:	18c20014 	ori	r3,r3,2048
 4024e54:	80c0030d 	sth	r3,12(r16)
 4024e58:	00c80004 	movi	r3,8192
 4024e5c:	10c0521e 	bne	r2,r3,4024fa8 <__smakebuf_r+0x1b0>
 4024e60:	8140038f 	ldh	r5,14(r16)
 4024e64:	8809883a 	mov	r4,r17
 4024e68:	4028e6c0 	call	4028e6c <_isatty_r>
 4024e6c:	10004c26 	beq	r2,zero,4024fa0 <__smakebuf_r+0x1a8>
 4024e70:	8080030b 	ldhu	r2,12(r16)
 4024e74:	80c010c4 	addi	r3,r16,67
 4024e78:	80c00015 	stw	r3,0(r16)
 4024e7c:	10800054 	ori	r2,r2,1
 4024e80:	8080030d 	sth	r2,12(r16)
 4024e84:	00800044 	movi	r2,1
 4024e88:	80c00415 	stw	r3,16(r16)
 4024e8c:	80800515 	stw	r2,20(r16)
 4024e90:	04810004 	movi	r18,1024
 4024e94:	00000706 	br	4024eb4 <__smakebuf_r+0xbc>
 4024e98:	8080030b 	ldhu	r2,12(r16)
 4024e9c:	10c0200c 	andi	r3,r2,128
 4024ea0:	18001f1e 	bne	r3,zero,4024f20 <__smakebuf_r+0x128>
 4024ea4:	04810004 	movi	r18,1024
 4024ea8:	10820014 	ori	r2,r2,2048
 4024eac:	8080030d 	sth	r2,12(r16)
 4024eb0:	0027883a 	mov	r19,zero
 4024eb4:	900b883a 	mov	r5,r18
 4024eb8:	8809883a 	mov	r4,r17
 4024ebc:	4024fb40 	call	4024fb4 <_malloc_r>
 4024ec0:	10002c26 	beq	r2,zero,4024f74 <__smakebuf_r+0x17c>
 4024ec4:	80c0030b 	ldhu	r3,12(r16)
 4024ec8:	010100b4 	movhi	r4,1026
 4024ecc:	2110f204 	addi	r4,r4,17352
 4024ed0:	89000f15 	stw	r4,60(r17)
 4024ed4:	18c02014 	ori	r3,r3,128
 4024ed8:	80c0030d 	sth	r3,12(r16)
 4024edc:	80800015 	stw	r2,0(r16)
 4024ee0:	80800415 	stw	r2,16(r16)
 4024ee4:	84800515 	stw	r18,20(r16)
 4024ee8:	98001a1e 	bne	r19,zero,4024f54 <__smakebuf_r+0x15c>
 4024eec:	dfc01317 	ldw	ra,76(sp)
 4024ef0:	dcc01217 	ldw	r19,72(sp)
 4024ef4:	dc801117 	ldw	r18,68(sp)
 4024ef8:	dc401017 	ldw	r17,64(sp)
 4024efc:	dc000f17 	ldw	r16,60(sp)
 4024f00:	dec01404 	addi	sp,sp,80
 4024f04:	f800283a 	ret
 4024f08:	288010c4 	addi	r2,r5,67
 4024f0c:	28800015 	stw	r2,0(r5)
 4024f10:	28800415 	stw	r2,16(r5)
 4024f14:	00800044 	movi	r2,1
 4024f18:	28800515 	stw	r2,20(r5)
 4024f1c:	f800283a 	ret
 4024f20:	04801004 	movi	r18,64
 4024f24:	003fe006 	br	4024ea8 <__alt_data_end+0xfffe4ea8>
 4024f28:	81000a17 	ldw	r4,40(r16)
 4024f2c:	00c100b4 	movhi	r3,1026
 4024f30:	18db2c04 	addi	r3,r3,27824
 4024f34:	20ffc51e 	bne	r4,r3,4024e4c <__alt_data_end+0xfffe4e4c>
 4024f38:	8080030b 	ldhu	r2,12(r16)
 4024f3c:	04810004 	movi	r18,1024
 4024f40:	84801315 	stw	r18,76(r16)
 4024f44:	1484b03a 	or	r2,r2,r18
 4024f48:	8080030d 	sth	r2,12(r16)
 4024f4c:	0027883a 	mov	r19,zero
 4024f50:	003fd806 	br	4024eb4 <__alt_data_end+0xfffe4eb4>
 4024f54:	8140038f 	ldh	r5,14(r16)
 4024f58:	8809883a 	mov	r4,r17
 4024f5c:	4028e6c0 	call	4028e6c <_isatty_r>
 4024f60:	103fe226 	beq	r2,zero,4024eec <__alt_data_end+0xfffe4eec>
 4024f64:	8080030b 	ldhu	r2,12(r16)
 4024f68:	10800054 	ori	r2,r2,1
 4024f6c:	8080030d 	sth	r2,12(r16)
 4024f70:	003fde06 	br	4024eec <__alt_data_end+0xfffe4eec>
 4024f74:	8080030b 	ldhu	r2,12(r16)
 4024f78:	10c0800c 	andi	r3,r2,512
 4024f7c:	183fdb1e 	bne	r3,zero,4024eec <__alt_data_end+0xfffe4eec>
 4024f80:	10800094 	ori	r2,r2,2
 4024f84:	80c010c4 	addi	r3,r16,67
 4024f88:	8080030d 	sth	r2,12(r16)
 4024f8c:	00800044 	movi	r2,1
 4024f90:	80c00015 	stw	r3,0(r16)
 4024f94:	80c00415 	stw	r3,16(r16)
 4024f98:	80800515 	stw	r2,20(r16)
 4024f9c:	003fd306 	br	4024eec <__alt_data_end+0xfffe4eec>
 4024fa0:	04810004 	movi	r18,1024
 4024fa4:	003fc306 	br	4024eb4 <__alt_data_end+0xfffe4eb4>
 4024fa8:	0027883a 	mov	r19,zero
 4024fac:	04810004 	movi	r18,1024
 4024fb0:	003fc006 	br	4024eb4 <__alt_data_end+0xfffe4eb4>

04024fb4 <_malloc_r>:
 4024fb4:	defff504 	addi	sp,sp,-44
 4024fb8:	dc800315 	stw	r18,12(sp)
 4024fbc:	dfc00a15 	stw	ra,40(sp)
 4024fc0:	df000915 	stw	fp,36(sp)
 4024fc4:	ddc00815 	stw	r23,32(sp)
 4024fc8:	dd800715 	stw	r22,28(sp)
 4024fcc:	dd400615 	stw	r21,24(sp)
 4024fd0:	dd000515 	stw	r20,20(sp)
 4024fd4:	dcc00415 	stw	r19,16(sp)
 4024fd8:	dc400215 	stw	r17,8(sp)
 4024fdc:	dc000115 	stw	r16,4(sp)
 4024fe0:	288002c4 	addi	r2,r5,11
 4024fe4:	00c00584 	movi	r3,22
 4024fe8:	2025883a 	mov	r18,r4
 4024fec:	18807f2e 	bgeu	r3,r2,40251ec <_malloc_r+0x238>
 4024ff0:	047ffe04 	movi	r17,-8
 4024ff4:	1462703a 	and	r17,r2,r17
 4024ff8:	8800a316 	blt	r17,zero,4025288 <_malloc_r+0x2d4>
 4024ffc:	8940a236 	bltu	r17,r5,4025288 <_malloc_r+0x2d4>
 4025000:	402d1c80 	call	402d1c8 <__malloc_lock>
 4025004:	00807dc4 	movi	r2,503
 4025008:	1441e92e 	bgeu	r2,r17,40257b0 <_malloc_r+0x7fc>
 402500c:	8804d27a 	srli	r2,r17,9
 4025010:	1000a126 	beq	r2,zero,4025298 <_malloc_r+0x2e4>
 4025014:	00c00104 	movi	r3,4
 4025018:	18811e36 	bltu	r3,r2,4025494 <_malloc_r+0x4e0>
 402501c:	8804d1ba 	srli	r2,r17,6
 4025020:	12000e44 	addi	r8,r2,57
 4025024:	11c00e04 	addi	r7,r2,56
 4025028:	4209883a 	add	r4,r8,r8
 402502c:	04c100f4 	movhi	r19,1027
 4025030:	2109883a 	add	r4,r4,r4
 4025034:	9cc2bf04 	addi	r19,r19,2812
 4025038:	2109883a 	add	r4,r4,r4
 402503c:	9909883a 	add	r4,r19,r4
 4025040:	24000117 	ldw	r16,4(r4)
 4025044:	213ffe04 	addi	r4,r4,-8
 4025048:	24009726 	beq	r4,r16,40252a8 <_malloc_r+0x2f4>
 402504c:	80800117 	ldw	r2,4(r16)
 4025050:	01bfff04 	movi	r6,-4
 4025054:	014003c4 	movi	r5,15
 4025058:	1184703a 	and	r2,r2,r6
 402505c:	1447c83a 	sub	r3,r2,r17
 4025060:	28c00716 	blt	r5,r3,4025080 <_malloc_r+0xcc>
 4025064:	1800920e 	bge	r3,zero,40252b0 <_malloc_r+0x2fc>
 4025068:	84000317 	ldw	r16,12(r16)
 402506c:	24008e26 	beq	r4,r16,40252a8 <_malloc_r+0x2f4>
 4025070:	80800117 	ldw	r2,4(r16)
 4025074:	1184703a 	and	r2,r2,r6
 4025078:	1447c83a 	sub	r3,r2,r17
 402507c:	28fff90e 	bge	r5,r3,4025064 <__alt_data_end+0xfffe5064>
 4025080:	3809883a 	mov	r4,r7
 4025084:	018100f4 	movhi	r6,1027
 4025088:	9c000417 	ldw	r16,16(r19)
 402508c:	3182bf04 	addi	r6,r6,2812
 4025090:	32000204 	addi	r8,r6,8
 4025094:	82013426 	beq	r16,r8,4025568 <_malloc_r+0x5b4>
 4025098:	80c00117 	ldw	r3,4(r16)
 402509c:	00bfff04 	movi	r2,-4
 40250a0:	188e703a 	and	r7,r3,r2
 40250a4:	3c45c83a 	sub	r2,r7,r17
 40250a8:	00c003c4 	movi	r3,15
 40250ac:	18811f16 	blt	r3,r2,402552c <_malloc_r+0x578>
 40250b0:	32000515 	stw	r8,20(r6)
 40250b4:	32000415 	stw	r8,16(r6)
 40250b8:	10007f0e 	bge	r2,zero,40252b8 <_malloc_r+0x304>
 40250bc:	00807fc4 	movi	r2,511
 40250c0:	11c0fd36 	bltu	r2,r7,40254b8 <_malloc_r+0x504>
 40250c4:	3806d0fa 	srli	r3,r7,3
 40250c8:	01c00044 	movi	r7,1
 40250cc:	30800117 	ldw	r2,4(r6)
 40250d0:	19400044 	addi	r5,r3,1
 40250d4:	294b883a 	add	r5,r5,r5
 40250d8:	1807d0ba 	srai	r3,r3,2
 40250dc:	294b883a 	add	r5,r5,r5
 40250e0:	294b883a 	add	r5,r5,r5
 40250e4:	298b883a 	add	r5,r5,r6
 40250e8:	38c6983a 	sll	r3,r7,r3
 40250ec:	29c00017 	ldw	r7,0(r5)
 40250f0:	2a7ffe04 	addi	r9,r5,-8
 40250f4:	1886b03a 	or	r3,r3,r2
 40250f8:	82400315 	stw	r9,12(r16)
 40250fc:	81c00215 	stw	r7,8(r16)
 4025100:	30c00115 	stw	r3,4(r6)
 4025104:	2c000015 	stw	r16,0(r5)
 4025108:	3c000315 	stw	r16,12(r7)
 402510c:	2005d0ba 	srai	r2,r4,2
 4025110:	01400044 	movi	r5,1
 4025114:	288a983a 	sll	r5,r5,r2
 4025118:	19406f36 	bltu	r3,r5,40252d8 <_malloc_r+0x324>
 402511c:	28c4703a 	and	r2,r5,r3
 4025120:	10000a1e 	bne	r2,zero,402514c <_malloc_r+0x198>
 4025124:	00bfff04 	movi	r2,-4
 4025128:	294b883a 	add	r5,r5,r5
 402512c:	2088703a 	and	r4,r4,r2
 4025130:	28c4703a 	and	r2,r5,r3
 4025134:	21000104 	addi	r4,r4,4
 4025138:	1000041e 	bne	r2,zero,402514c <_malloc_r+0x198>
 402513c:	294b883a 	add	r5,r5,r5
 4025140:	28c4703a 	and	r2,r5,r3
 4025144:	21000104 	addi	r4,r4,4
 4025148:	103ffc26 	beq	r2,zero,402513c <__alt_data_end+0xfffe513c>
 402514c:	02bfff04 	movi	r10,-4
 4025150:	024003c4 	movi	r9,15
 4025154:	21800044 	addi	r6,r4,1
 4025158:	318d883a 	add	r6,r6,r6
 402515c:	318d883a 	add	r6,r6,r6
 4025160:	318d883a 	add	r6,r6,r6
 4025164:	998d883a 	add	r6,r19,r6
 4025168:	333ffe04 	addi	r12,r6,-8
 402516c:	2017883a 	mov	r11,r4
 4025170:	31800104 	addi	r6,r6,4
 4025174:	34000017 	ldw	r16,0(r6)
 4025178:	31fffd04 	addi	r7,r6,-12
 402517c:	81c0041e 	bne	r16,r7,4025190 <_malloc_r+0x1dc>
 4025180:	0000fb06 	br	4025570 <_malloc_r+0x5bc>
 4025184:	1801030e 	bge	r3,zero,4025594 <_malloc_r+0x5e0>
 4025188:	84000317 	ldw	r16,12(r16)
 402518c:	81c0f826 	beq	r16,r7,4025570 <_malloc_r+0x5bc>
 4025190:	80800117 	ldw	r2,4(r16)
 4025194:	1284703a 	and	r2,r2,r10
 4025198:	1447c83a 	sub	r3,r2,r17
 402519c:	48fff90e 	bge	r9,r3,4025184 <__alt_data_end+0xfffe5184>
 40251a0:	80800317 	ldw	r2,12(r16)
 40251a4:	81000217 	ldw	r4,8(r16)
 40251a8:	89400054 	ori	r5,r17,1
 40251ac:	81400115 	stw	r5,4(r16)
 40251b0:	20800315 	stw	r2,12(r4)
 40251b4:	11000215 	stw	r4,8(r2)
 40251b8:	8463883a 	add	r17,r16,r17
 40251bc:	9c400515 	stw	r17,20(r19)
 40251c0:	9c400415 	stw	r17,16(r19)
 40251c4:	18800054 	ori	r2,r3,1
 40251c8:	88800115 	stw	r2,4(r17)
 40251cc:	8a000315 	stw	r8,12(r17)
 40251d0:	8a000215 	stw	r8,8(r17)
 40251d4:	88e3883a 	add	r17,r17,r3
 40251d8:	88c00015 	stw	r3,0(r17)
 40251dc:	9009883a 	mov	r4,r18
 40251e0:	402d1ec0 	call	402d1ec <__malloc_unlock>
 40251e4:	80800204 	addi	r2,r16,8
 40251e8:	00001b06 	br	4025258 <_malloc_r+0x2a4>
 40251ec:	04400404 	movi	r17,16
 40251f0:	89402536 	bltu	r17,r5,4025288 <_malloc_r+0x2d4>
 40251f4:	402d1c80 	call	402d1c8 <__malloc_lock>
 40251f8:	00800184 	movi	r2,6
 40251fc:	01000084 	movi	r4,2
 4025200:	04c100f4 	movhi	r19,1027
 4025204:	1085883a 	add	r2,r2,r2
 4025208:	9cc2bf04 	addi	r19,r19,2812
 402520c:	1085883a 	add	r2,r2,r2
 4025210:	9885883a 	add	r2,r19,r2
 4025214:	14000117 	ldw	r16,4(r2)
 4025218:	10fffe04 	addi	r3,r2,-8
 402521c:	80c0d926 	beq	r16,r3,4025584 <_malloc_r+0x5d0>
 4025220:	80c00117 	ldw	r3,4(r16)
 4025224:	81000317 	ldw	r4,12(r16)
 4025228:	00bfff04 	movi	r2,-4
 402522c:	1884703a 	and	r2,r3,r2
 4025230:	81400217 	ldw	r5,8(r16)
 4025234:	8085883a 	add	r2,r16,r2
 4025238:	10c00117 	ldw	r3,4(r2)
 402523c:	29000315 	stw	r4,12(r5)
 4025240:	21400215 	stw	r5,8(r4)
 4025244:	18c00054 	ori	r3,r3,1
 4025248:	10c00115 	stw	r3,4(r2)
 402524c:	9009883a 	mov	r4,r18
 4025250:	402d1ec0 	call	402d1ec <__malloc_unlock>
 4025254:	80800204 	addi	r2,r16,8
 4025258:	dfc00a17 	ldw	ra,40(sp)
 402525c:	df000917 	ldw	fp,36(sp)
 4025260:	ddc00817 	ldw	r23,32(sp)
 4025264:	dd800717 	ldw	r22,28(sp)
 4025268:	dd400617 	ldw	r21,24(sp)
 402526c:	dd000517 	ldw	r20,20(sp)
 4025270:	dcc00417 	ldw	r19,16(sp)
 4025274:	dc800317 	ldw	r18,12(sp)
 4025278:	dc400217 	ldw	r17,8(sp)
 402527c:	dc000117 	ldw	r16,4(sp)
 4025280:	dec00b04 	addi	sp,sp,44
 4025284:	f800283a 	ret
 4025288:	00800304 	movi	r2,12
 402528c:	90800015 	stw	r2,0(r18)
 4025290:	0005883a 	mov	r2,zero
 4025294:	003ff006 	br	4025258 <__alt_data_end+0xfffe5258>
 4025298:	01002004 	movi	r4,128
 402529c:	02001004 	movi	r8,64
 40252a0:	01c00fc4 	movi	r7,63
 40252a4:	003f6106 	br	402502c <__alt_data_end+0xfffe502c>
 40252a8:	4009883a 	mov	r4,r8
 40252ac:	003f7506 	br	4025084 <__alt_data_end+0xfffe5084>
 40252b0:	81000317 	ldw	r4,12(r16)
 40252b4:	003fde06 	br	4025230 <__alt_data_end+0xfffe5230>
 40252b8:	81c5883a 	add	r2,r16,r7
 40252bc:	11400117 	ldw	r5,4(r2)
 40252c0:	9009883a 	mov	r4,r18
 40252c4:	29400054 	ori	r5,r5,1
 40252c8:	11400115 	stw	r5,4(r2)
 40252cc:	402d1ec0 	call	402d1ec <__malloc_unlock>
 40252d0:	80800204 	addi	r2,r16,8
 40252d4:	003fe006 	br	4025258 <__alt_data_end+0xfffe5258>
 40252d8:	9c000217 	ldw	r16,8(r19)
 40252dc:	00bfff04 	movi	r2,-4
 40252e0:	85800117 	ldw	r22,4(r16)
 40252e4:	b0ac703a 	and	r22,r22,r2
 40252e8:	b4400336 	bltu	r22,r17,40252f8 <_malloc_r+0x344>
 40252ec:	b445c83a 	sub	r2,r22,r17
 40252f0:	00c003c4 	movi	r3,15
 40252f4:	18805d16 	blt	r3,r2,402546c <_malloc_r+0x4b8>
 40252f8:	05c100f4 	movhi	r23,1027
 40252fc:	008100f4 	movhi	r2,1027
 4025300:	108f9104 	addi	r2,r2,15940
 4025304:	bdc88104 	addi	r23,r23,8708
 4025308:	15400017 	ldw	r21,0(r2)
 402530c:	b8c00017 	ldw	r3,0(r23)
 4025310:	00bfffc4 	movi	r2,-1
 4025314:	858d883a 	add	r6,r16,r22
 4025318:	8d6b883a 	add	r21,r17,r21
 402531c:	1880ea26 	beq	r3,r2,40256c8 <_malloc_r+0x714>
 4025320:	ad4403c4 	addi	r21,r21,4111
 4025324:	00bc0004 	movi	r2,-4096
 4025328:	a8aa703a 	and	r21,r21,r2
 402532c:	a80b883a 	mov	r5,r21
 4025330:	9009883a 	mov	r4,r18
 4025334:	d9800015 	stw	r6,0(sp)
 4025338:	4026b840 	call	4026b84 <_sbrk_r>
 402533c:	1029883a 	mov	r20,r2
 4025340:	00bfffc4 	movi	r2,-1
 4025344:	d9800017 	ldw	r6,0(sp)
 4025348:	a080e826 	beq	r20,r2,40256ec <_malloc_r+0x738>
 402534c:	a180a636 	bltu	r20,r6,40255e8 <_malloc_r+0x634>
 4025350:	070100f4 	movhi	fp,1027
 4025354:	e70f9a04 	addi	fp,fp,15976
 4025358:	e0800017 	ldw	r2,0(fp)
 402535c:	a887883a 	add	r3,r21,r2
 4025360:	e0c00015 	stw	r3,0(fp)
 4025364:	3500e626 	beq	r6,r20,4025700 <_malloc_r+0x74c>
 4025368:	b9000017 	ldw	r4,0(r23)
 402536c:	00bfffc4 	movi	r2,-1
 4025370:	2080ee26 	beq	r4,r2,402572c <_malloc_r+0x778>
 4025374:	a185c83a 	sub	r2,r20,r6
 4025378:	10c5883a 	add	r2,r2,r3
 402537c:	e0800015 	stw	r2,0(fp)
 4025380:	a0c001cc 	andi	r3,r20,7
 4025384:	1800bc26 	beq	r3,zero,4025678 <_malloc_r+0x6c4>
 4025388:	a0e9c83a 	sub	r20,r20,r3
 402538c:	00840204 	movi	r2,4104
 4025390:	a5000204 	addi	r20,r20,8
 4025394:	10c7c83a 	sub	r3,r2,r3
 4025398:	a545883a 	add	r2,r20,r21
 402539c:	1083ffcc 	andi	r2,r2,4095
 40253a0:	18abc83a 	sub	r21,r3,r2
 40253a4:	a80b883a 	mov	r5,r21
 40253a8:	9009883a 	mov	r4,r18
 40253ac:	4026b840 	call	4026b84 <_sbrk_r>
 40253b0:	00ffffc4 	movi	r3,-1
 40253b4:	10c0e126 	beq	r2,r3,402573c <_malloc_r+0x788>
 40253b8:	1505c83a 	sub	r2,r2,r20
 40253bc:	1545883a 	add	r2,r2,r21
 40253c0:	10800054 	ori	r2,r2,1
 40253c4:	e0c00017 	ldw	r3,0(fp)
 40253c8:	9d000215 	stw	r20,8(r19)
 40253cc:	a0800115 	stw	r2,4(r20)
 40253d0:	a8c7883a 	add	r3,r21,r3
 40253d4:	e0c00015 	stw	r3,0(fp)
 40253d8:	84c00e26 	beq	r16,r19,4025414 <_malloc_r+0x460>
 40253dc:	018003c4 	movi	r6,15
 40253e0:	3580a72e 	bgeu	r6,r22,4025680 <_malloc_r+0x6cc>
 40253e4:	81400117 	ldw	r5,4(r16)
 40253e8:	013ffe04 	movi	r4,-8
 40253ec:	b0bffd04 	addi	r2,r22,-12
 40253f0:	1104703a 	and	r2,r2,r4
 40253f4:	2900004c 	andi	r4,r5,1
 40253f8:	2088b03a 	or	r4,r4,r2
 40253fc:	81000115 	stw	r4,4(r16)
 4025400:	01400144 	movi	r5,5
 4025404:	8089883a 	add	r4,r16,r2
 4025408:	21400115 	stw	r5,4(r4)
 402540c:	21400215 	stw	r5,8(r4)
 4025410:	3080cd36 	bltu	r6,r2,4025748 <_malloc_r+0x794>
 4025414:	008100f4 	movhi	r2,1027
 4025418:	108f9004 	addi	r2,r2,15936
 402541c:	11000017 	ldw	r4,0(r2)
 4025420:	20c0012e 	bgeu	r4,r3,4025428 <_malloc_r+0x474>
 4025424:	10c00015 	stw	r3,0(r2)
 4025428:	008100f4 	movhi	r2,1027
 402542c:	108f8f04 	addi	r2,r2,15932
 4025430:	11000017 	ldw	r4,0(r2)
 4025434:	9c000217 	ldw	r16,8(r19)
 4025438:	20c0012e 	bgeu	r4,r3,4025440 <_malloc_r+0x48c>
 402543c:	10c00015 	stw	r3,0(r2)
 4025440:	80c00117 	ldw	r3,4(r16)
 4025444:	00bfff04 	movi	r2,-4
 4025448:	1886703a 	and	r3,r3,r2
 402544c:	1c45c83a 	sub	r2,r3,r17
 4025450:	1c400236 	bltu	r3,r17,402545c <_malloc_r+0x4a8>
 4025454:	00c003c4 	movi	r3,15
 4025458:	18800416 	blt	r3,r2,402546c <_malloc_r+0x4b8>
 402545c:	9009883a 	mov	r4,r18
 4025460:	402d1ec0 	call	402d1ec <__malloc_unlock>
 4025464:	0005883a 	mov	r2,zero
 4025468:	003f7b06 	br	4025258 <__alt_data_end+0xfffe5258>
 402546c:	88c00054 	ori	r3,r17,1
 4025470:	80c00115 	stw	r3,4(r16)
 4025474:	8463883a 	add	r17,r16,r17
 4025478:	10800054 	ori	r2,r2,1
 402547c:	9c400215 	stw	r17,8(r19)
 4025480:	88800115 	stw	r2,4(r17)
 4025484:	9009883a 	mov	r4,r18
 4025488:	402d1ec0 	call	402d1ec <__malloc_unlock>
 402548c:	80800204 	addi	r2,r16,8
 4025490:	003f7106 	br	4025258 <__alt_data_end+0xfffe5258>
 4025494:	00c00504 	movi	r3,20
 4025498:	18804a2e 	bgeu	r3,r2,40255c4 <_malloc_r+0x610>
 402549c:	00c01504 	movi	r3,84
 40254a0:	18806e36 	bltu	r3,r2,402565c <_malloc_r+0x6a8>
 40254a4:	8804d33a 	srli	r2,r17,12
 40254a8:	12001bc4 	addi	r8,r2,111
 40254ac:	11c01b84 	addi	r7,r2,110
 40254b0:	4209883a 	add	r4,r8,r8
 40254b4:	003edd06 	br	402502c <__alt_data_end+0xfffe502c>
 40254b8:	3804d27a 	srli	r2,r7,9
 40254bc:	00c00104 	movi	r3,4
 40254c0:	1880442e 	bgeu	r3,r2,40255d4 <_malloc_r+0x620>
 40254c4:	00c00504 	movi	r3,20
 40254c8:	18808136 	bltu	r3,r2,40256d0 <_malloc_r+0x71c>
 40254cc:	11401704 	addi	r5,r2,92
 40254d0:	10c016c4 	addi	r3,r2,91
 40254d4:	294b883a 	add	r5,r5,r5
 40254d8:	294b883a 	add	r5,r5,r5
 40254dc:	294b883a 	add	r5,r5,r5
 40254e0:	994b883a 	add	r5,r19,r5
 40254e4:	28800017 	ldw	r2,0(r5)
 40254e8:	018100f4 	movhi	r6,1027
 40254ec:	297ffe04 	addi	r5,r5,-8
 40254f0:	3182bf04 	addi	r6,r6,2812
 40254f4:	28806526 	beq	r5,r2,402568c <_malloc_r+0x6d8>
 40254f8:	01bfff04 	movi	r6,-4
 40254fc:	10c00117 	ldw	r3,4(r2)
 4025500:	1986703a 	and	r3,r3,r6
 4025504:	38c0022e 	bgeu	r7,r3,4025510 <_malloc_r+0x55c>
 4025508:	10800217 	ldw	r2,8(r2)
 402550c:	28bffb1e 	bne	r5,r2,40254fc <__alt_data_end+0xfffe54fc>
 4025510:	11400317 	ldw	r5,12(r2)
 4025514:	98c00117 	ldw	r3,4(r19)
 4025518:	81400315 	stw	r5,12(r16)
 402551c:	80800215 	stw	r2,8(r16)
 4025520:	2c000215 	stw	r16,8(r5)
 4025524:	14000315 	stw	r16,12(r2)
 4025528:	003ef806 	br	402510c <__alt_data_end+0xfffe510c>
 402552c:	88c00054 	ori	r3,r17,1
 4025530:	80c00115 	stw	r3,4(r16)
 4025534:	8463883a 	add	r17,r16,r17
 4025538:	34400515 	stw	r17,20(r6)
 402553c:	34400415 	stw	r17,16(r6)
 4025540:	10c00054 	ori	r3,r2,1
 4025544:	8a000315 	stw	r8,12(r17)
 4025548:	8a000215 	stw	r8,8(r17)
 402554c:	88c00115 	stw	r3,4(r17)
 4025550:	88a3883a 	add	r17,r17,r2
 4025554:	88800015 	stw	r2,0(r17)
 4025558:	9009883a 	mov	r4,r18
 402555c:	402d1ec0 	call	402d1ec <__malloc_unlock>
 4025560:	80800204 	addi	r2,r16,8
 4025564:	003f3c06 	br	4025258 <__alt_data_end+0xfffe5258>
 4025568:	30c00117 	ldw	r3,4(r6)
 402556c:	003ee706 	br	402510c <__alt_data_end+0xfffe510c>
 4025570:	5ac00044 	addi	r11,r11,1
 4025574:	588000cc 	andi	r2,r11,3
 4025578:	31800204 	addi	r6,r6,8
 402557c:	103efd1e 	bne	r2,zero,4025174 <__alt_data_end+0xfffe5174>
 4025580:	00002406 	br	4025614 <_malloc_r+0x660>
 4025584:	14000317 	ldw	r16,12(r2)
 4025588:	143f251e 	bne	r2,r16,4025220 <__alt_data_end+0xfffe5220>
 402558c:	21000084 	addi	r4,r4,2
 4025590:	003ebc06 	br	4025084 <__alt_data_end+0xfffe5084>
 4025594:	8085883a 	add	r2,r16,r2
 4025598:	10c00117 	ldw	r3,4(r2)
 402559c:	81000317 	ldw	r4,12(r16)
 40255a0:	81400217 	ldw	r5,8(r16)
 40255a4:	18c00054 	ori	r3,r3,1
 40255a8:	10c00115 	stw	r3,4(r2)
 40255ac:	29000315 	stw	r4,12(r5)
 40255b0:	21400215 	stw	r5,8(r4)
 40255b4:	9009883a 	mov	r4,r18
 40255b8:	402d1ec0 	call	402d1ec <__malloc_unlock>
 40255bc:	80800204 	addi	r2,r16,8
 40255c0:	003f2506 	br	4025258 <__alt_data_end+0xfffe5258>
 40255c4:	12001704 	addi	r8,r2,92
 40255c8:	11c016c4 	addi	r7,r2,91
 40255cc:	4209883a 	add	r4,r8,r8
 40255d0:	003e9606 	br	402502c <__alt_data_end+0xfffe502c>
 40255d4:	3804d1ba 	srli	r2,r7,6
 40255d8:	11400e44 	addi	r5,r2,57
 40255dc:	10c00e04 	addi	r3,r2,56
 40255e0:	294b883a 	add	r5,r5,r5
 40255e4:	003fbc06 	br	40254d8 <__alt_data_end+0xfffe54d8>
 40255e8:	84ff5926 	beq	r16,r19,4025350 <__alt_data_end+0xfffe5350>
 40255ec:	008100f4 	movhi	r2,1027
 40255f0:	1082bf04 	addi	r2,r2,2812
 40255f4:	14000217 	ldw	r16,8(r2)
 40255f8:	00bfff04 	movi	r2,-4
 40255fc:	80c00117 	ldw	r3,4(r16)
 4025600:	1886703a 	and	r3,r3,r2
 4025604:	003f9106 	br	402544c <__alt_data_end+0xfffe544c>
 4025608:	60800217 	ldw	r2,8(r12)
 402560c:	213fffc4 	addi	r4,r4,-1
 4025610:	1300651e 	bne	r2,r12,40257a8 <_malloc_r+0x7f4>
 4025614:	208000cc 	andi	r2,r4,3
 4025618:	633ffe04 	addi	r12,r12,-8
 402561c:	103ffa1e 	bne	r2,zero,4025608 <__alt_data_end+0xfffe5608>
 4025620:	98800117 	ldw	r2,4(r19)
 4025624:	0146303a 	nor	r3,zero,r5
 4025628:	1884703a 	and	r2,r3,r2
 402562c:	98800115 	stw	r2,4(r19)
 4025630:	294b883a 	add	r5,r5,r5
 4025634:	117f2836 	bltu	r2,r5,40252d8 <__alt_data_end+0xfffe52d8>
 4025638:	283f2726 	beq	r5,zero,40252d8 <__alt_data_end+0xfffe52d8>
 402563c:	2886703a 	and	r3,r5,r2
 4025640:	5809883a 	mov	r4,r11
 4025644:	183ec31e 	bne	r3,zero,4025154 <__alt_data_end+0xfffe5154>
 4025648:	294b883a 	add	r5,r5,r5
 402564c:	2886703a 	and	r3,r5,r2
 4025650:	21000104 	addi	r4,r4,4
 4025654:	183ffc26 	beq	r3,zero,4025648 <__alt_data_end+0xfffe5648>
 4025658:	003ebe06 	br	4025154 <__alt_data_end+0xfffe5154>
 402565c:	00c05504 	movi	r3,340
 4025660:	18801236 	bltu	r3,r2,40256ac <_malloc_r+0x6f8>
 4025664:	8804d3fa 	srli	r2,r17,15
 4025668:	12001e04 	addi	r8,r2,120
 402566c:	11c01dc4 	addi	r7,r2,119
 4025670:	4209883a 	add	r4,r8,r8
 4025674:	003e6d06 	br	402502c <__alt_data_end+0xfffe502c>
 4025678:	00c40004 	movi	r3,4096
 402567c:	003f4606 	br	4025398 <__alt_data_end+0xfffe5398>
 4025680:	00800044 	movi	r2,1
 4025684:	a0800115 	stw	r2,4(r20)
 4025688:	003f7406 	br	402545c <__alt_data_end+0xfffe545c>
 402568c:	1805d0ba 	srai	r2,r3,2
 4025690:	01c00044 	movi	r7,1
 4025694:	30c00117 	ldw	r3,4(r6)
 4025698:	388e983a 	sll	r7,r7,r2
 402569c:	2805883a 	mov	r2,r5
 40256a0:	38c6b03a 	or	r3,r7,r3
 40256a4:	30c00115 	stw	r3,4(r6)
 40256a8:	003f9b06 	br	4025518 <__alt_data_end+0xfffe5518>
 40256ac:	00c15504 	movi	r3,1364
 40256b0:	18801a36 	bltu	r3,r2,402571c <_malloc_r+0x768>
 40256b4:	8804d4ba 	srli	r2,r17,18
 40256b8:	12001f44 	addi	r8,r2,125
 40256bc:	11c01f04 	addi	r7,r2,124
 40256c0:	4209883a 	add	r4,r8,r8
 40256c4:	003e5906 	br	402502c <__alt_data_end+0xfffe502c>
 40256c8:	ad400404 	addi	r21,r21,16
 40256cc:	003f1706 	br	402532c <__alt_data_end+0xfffe532c>
 40256d0:	00c01504 	movi	r3,84
 40256d4:	18802336 	bltu	r3,r2,4025764 <_malloc_r+0x7b0>
 40256d8:	3804d33a 	srli	r2,r7,12
 40256dc:	11401bc4 	addi	r5,r2,111
 40256e0:	10c01b84 	addi	r3,r2,110
 40256e4:	294b883a 	add	r5,r5,r5
 40256e8:	003f7b06 	br	40254d8 <__alt_data_end+0xfffe54d8>
 40256ec:	9c000217 	ldw	r16,8(r19)
 40256f0:	00bfff04 	movi	r2,-4
 40256f4:	80c00117 	ldw	r3,4(r16)
 40256f8:	1886703a 	and	r3,r3,r2
 40256fc:	003f5306 	br	402544c <__alt_data_end+0xfffe544c>
 4025700:	3083ffcc 	andi	r2,r6,4095
 4025704:	103f181e 	bne	r2,zero,4025368 <__alt_data_end+0xfffe5368>
 4025708:	99000217 	ldw	r4,8(r19)
 402570c:	b545883a 	add	r2,r22,r21
 4025710:	10800054 	ori	r2,r2,1
 4025714:	20800115 	stw	r2,4(r4)
 4025718:	003f3e06 	br	4025414 <__alt_data_end+0xfffe5414>
 402571c:	01003f84 	movi	r4,254
 4025720:	02001fc4 	movi	r8,127
 4025724:	01c01f84 	movi	r7,126
 4025728:	003e4006 	br	402502c <__alt_data_end+0xfffe502c>
 402572c:	008100f4 	movhi	r2,1027
 4025730:	10888104 	addi	r2,r2,8708
 4025734:	15000015 	stw	r20,0(r2)
 4025738:	003f1106 	br	4025380 <__alt_data_end+0xfffe5380>
 402573c:	00800044 	movi	r2,1
 4025740:	002b883a 	mov	r21,zero
 4025744:	003f1f06 	br	40253c4 <__alt_data_end+0xfffe53c4>
 4025748:	81400204 	addi	r5,r16,8
 402574c:	9009883a 	mov	r4,r18
 4025750:	40248840 	call	4024884 <_free_r>
 4025754:	008100f4 	movhi	r2,1027
 4025758:	108f9a04 	addi	r2,r2,15976
 402575c:	10c00017 	ldw	r3,0(r2)
 4025760:	003f2c06 	br	4025414 <__alt_data_end+0xfffe5414>
 4025764:	00c05504 	movi	r3,340
 4025768:	18800536 	bltu	r3,r2,4025780 <_malloc_r+0x7cc>
 402576c:	3804d3fa 	srli	r2,r7,15
 4025770:	11401e04 	addi	r5,r2,120
 4025774:	10c01dc4 	addi	r3,r2,119
 4025778:	294b883a 	add	r5,r5,r5
 402577c:	003f5606 	br	40254d8 <__alt_data_end+0xfffe54d8>
 4025780:	00c15504 	movi	r3,1364
 4025784:	18800536 	bltu	r3,r2,402579c <_malloc_r+0x7e8>
 4025788:	3804d4ba 	srli	r2,r7,18
 402578c:	11401f44 	addi	r5,r2,125
 4025790:	10c01f04 	addi	r3,r2,124
 4025794:	294b883a 	add	r5,r5,r5
 4025798:	003f4f06 	br	40254d8 <__alt_data_end+0xfffe54d8>
 402579c:	01403f84 	movi	r5,254
 40257a0:	00c01f84 	movi	r3,126
 40257a4:	003f4c06 	br	40254d8 <__alt_data_end+0xfffe54d8>
 40257a8:	98800117 	ldw	r2,4(r19)
 40257ac:	003fa006 	br	4025630 <__alt_data_end+0xfffe5630>
 40257b0:	8808d0fa 	srli	r4,r17,3
 40257b4:	20800044 	addi	r2,r4,1
 40257b8:	1085883a 	add	r2,r2,r2
 40257bc:	003e9006 	br	4025200 <__alt_data_end+0xfffe5200>

040257c0 <memchr>:
 40257c0:	208000cc 	andi	r2,r4,3
 40257c4:	280f883a 	mov	r7,r5
 40257c8:	10003426 	beq	r2,zero,402589c <memchr+0xdc>
 40257cc:	30bfffc4 	addi	r2,r6,-1
 40257d0:	30001a26 	beq	r6,zero,402583c <memchr+0x7c>
 40257d4:	20c00003 	ldbu	r3,0(r4)
 40257d8:	29803fcc 	andi	r6,r5,255
 40257dc:	30c0051e 	bne	r6,r3,40257f4 <memchr+0x34>
 40257e0:	00001806 	br	4025844 <memchr+0x84>
 40257e4:	10001526 	beq	r2,zero,402583c <memchr+0x7c>
 40257e8:	20c00003 	ldbu	r3,0(r4)
 40257ec:	10bfffc4 	addi	r2,r2,-1
 40257f0:	30c01426 	beq	r6,r3,4025844 <memchr+0x84>
 40257f4:	21000044 	addi	r4,r4,1
 40257f8:	20c000cc 	andi	r3,r4,3
 40257fc:	183ff91e 	bne	r3,zero,40257e4 <__alt_data_end+0xfffe57e4>
 4025800:	020000c4 	movi	r8,3
 4025804:	40801136 	bltu	r8,r2,402584c <memchr+0x8c>
 4025808:	10000c26 	beq	r2,zero,402583c <memchr+0x7c>
 402580c:	20c00003 	ldbu	r3,0(r4)
 4025810:	29403fcc 	andi	r5,r5,255
 4025814:	28c00b26 	beq	r5,r3,4025844 <memchr+0x84>
 4025818:	20c00044 	addi	r3,r4,1
 402581c:	39803fcc 	andi	r6,r7,255
 4025820:	2089883a 	add	r4,r4,r2
 4025824:	00000306 	br	4025834 <memchr+0x74>
 4025828:	18c00044 	addi	r3,r3,1
 402582c:	197fffc3 	ldbu	r5,-1(r3)
 4025830:	31400526 	beq	r6,r5,4025848 <memchr+0x88>
 4025834:	1805883a 	mov	r2,r3
 4025838:	20fffb1e 	bne	r4,r3,4025828 <__alt_data_end+0xfffe5828>
 402583c:	0005883a 	mov	r2,zero
 4025840:	f800283a 	ret
 4025844:	2005883a 	mov	r2,r4
 4025848:	f800283a 	ret
 402584c:	28c03fcc 	andi	r3,r5,255
 4025850:	1812923a 	slli	r9,r3,8
 4025854:	02ffbff4 	movhi	r11,65279
 4025858:	02a02074 	movhi	r10,32897
 402585c:	48d2b03a 	or	r9,r9,r3
 4025860:	4806943a 	slli	r3,r9,16
 4025864:	5affbfc4 	addi	r11,r11,-257
 4025868:	52a02004 	addi	r10,r10,-32640
 402586c:	48d2b03a 	or	r9,r9,r3
 4025870:	20c00017 	ldw	r3,0(r4)
 4025874:	48c6f03a 	xor	r3,r9,r3
 4025878:	1acd883a 	add	r6,r3,r11
 402587c:	00c6303a 	nor	r3,zero,r3
 4025880:	30c6703a 	and	r3,r6,r3
 4025884:	1a86703a 	and	r3,r3,r10
 4025888:	183fe01e 	bne	r3,zero,402580c <__alt_data_end+0xfffe580c>
 402588c:	10bfff04 	addi	r2,r2,-4
 4025890:	21000104 	addi	r4,r4,4
 4025894:	40bff636 	bltu	r8,r2,4025870 <__alt_data_end+0xfffe5870>
 4025898:	003fdb06 	br	4025808 <__alt_data_end+0xfffe5808>
 402589c:	3005883a 	mov	r2,r6
 40258a0:	003fd706 	br	4025800 <__alt_data_end+0xfffe5800>

040258a4 <memcpy>:
 40258a4:	defffd04 	addi	sp,sp,-12
 40258a8:	dfc00215 	stw	ra,8(sp)
 40258ac:	dc400115 	stw	r17,4(sp)
 40258b0:	dc000015 	stw	r16,0(sp)
 40258b4:	00c003c4 	movi	r3,15
 40258b8:	2005883a 	mov	r2,r4
 40258bc:	1980452e 	bgeu	r3,r6,40259d4 <memcpy+0x130>
 40258c0:	2906b03a 	or	r3,r5,r4
 40258c4:	18c000cc 	andi	r3,r3,3
 40258c8:	1800441e 	bne	r3,zero,40259dc <memcpy+0x138>
 40258cc:	347ffc04 	addi	r17,r6,-16
 40258d0:	8822d13a 	srli	r17,r17,4
 40258d4:	28c00104 	addi	r3,r5,4
 40258d8:	23400104 	addi	r13,r4,4
 40258dc:	8820913a 	slli	r16,r17,4
 40258e0:	2b000204 	addi	r12,r5,8
 40258e4:	22c00204 	addi	r11,r4,8
 40258e8:	84000504 	addi	r16,r16,20
 40258ec:	2a800304 	addi	r10,r5,12
 40258f0:	22400304 	addi	r9,r4,12
 40258f4:	2c21883a 	add	r16,r5,r16
 40258f8:	2811883a 	mov	r8,r5
 40258fc:	200f883a 	mov	r7,r4
 4025900:	41000017 	ldw	r4,0(r8)
 4025904:	1fc00017 	ldw	ra,0(r3)
 4025908:	63c00017 	ldw	r15,0(r12)
 402590c:	39000015 	stw	r4,0(r7)
 4025910:	53800017 	ldw	r14,0(r10)
 4025914:	6fc00015 	stw	ra,0(r13)
 4025918:	5bc00015 	stw	r15,0(r11)
 402591c:	4b800015 	stw	r14,0(r9)
 4025920:	18c00404 	addi	r3,r3,16
 4025924:	39c00404 	addi	r7,r7,16
 4025928:	42000404 	addi	r8,r8,16
 402592c:	6b400404 	addi	r13,r13,16
 4025930:	63000404 	addi	r12,r12,16
 4025934:	5ac00404 	addi	r11,r11,16
 4025938:	52800404 	addi	r10,r10,16
 402593c:	4a400404 	addi	r9,r9,16
 4025940:	1c3fef1e 	bne	r3,r16,4025900 <__alt_data_end+0xfffe5900>
 4025944:	89c00044 	addi	r7,r17,1
 4025948:	380e913a 	slli	r7,r7,4
 402594c:	310003cc 	andi	r4,r6,15
 4025950:	02c000c4 	movi	r11,3
 4025954:	11c7883a 	add	r3,r2,r7
 4025958:	29cb883a 	add	r5,r5,r7
 402595c:	5900212e 	bgeu	r11,r4,40259e4 <memcpy+0x140>
 4025960:	1813883a 	mov	r9,r3
 4025964:	2811883a 	mov	r8,r5
 4025968:	200f883a 	mov	r7,r4
 402596c:	42800017 	ldw	r10,0(r8)
 4025970:	4a400104 	addi	r9,r9,4
 4025974:	39ffff04 	addi	r7,r7,-4
 4025978:	4abfff15 	stw	r10,-4(r9)
 402597c:	42000104 	addi	r8,r8,4
 4025980:	59fffa36 	bltu	r11,r7,402596c <__alt_data_end+0xfffe596c>
 4025984:	213fff04 	addi	r4,r4,-4
 4025988:	2008d0ba 	srli	r4,r4,2
 402598c:	318000cc 	andi	r6,r6,3
 4025990:	21000044 	addi	r4,r4,1
 4025994:	2109883a 	add	r4,r4,r4
 4025998:	2109883a 	add	r4,r4,r4
 402599c:	1907883a 	add	r3,r3,r4
 40259a0:	290b883a 	add	r5,r5,r4
 40259a4:	30000626 	beq	r6,zero,40259c0 <memcpy+0x11c>
 40259a8:	198d883a 	add	r6,r3,r6
 40259ac:	29c00003 	ldbu	r7,0(r5)
 40259b0:	18c00044 	addi	r3,r3,1
 40259b4:	29400044 	addi	r5,r5,1
 40259b8:	19ffffc5 	stb	r7,-1(r3)
 40259bc:	19bffb1e 	bne	r3,r6,40259ac <__alt_data_end+0xfffe59ac>
 40259c0:	dfc00217 	ldw	ra,8(sp)
 40259c4:	dc400117 	ldw	r17,4(sp)
 40259c8:	dc000017 	ldw	r16,0(sp)
 40259cc:	dec00304 	addi	sp,sp,12
 40259d0:	f800283a 	ret
 40259d4:	2007883a 	mov	r3,r4
 40259d8:	003ff206 	br	40259a4 <__alt_data_end+0xfffe59a4>
 40259dc:	2007883a 	mov	r3,r4
 40259e0:	003ff106 	br	40259a8 <__alt_data_end+0xfffe59a8>
 40259e4:	200d883a 	mov	r6,r4
 40259e8:	003fee06 	br	40259a4 <__alt_data_end+0xfffe59a4>

040259ec <memset>:
 40259ec:	20c000cc 	andi	r3,r4,3
 40259f0:	2005883a 	mov	r2,r4
 40259f4:	18004426 	beq	r3,zero,4025b08 <memset+0x11c>
 40259f8:	31ffffc4 	addi	r7,r6,-1
 40259fc:	30004026 	beq	r6,zero,4025b00 <memset+0x114>
 4025a00:	2813883a 	mov	r9,r5
 4025a04:	200d883a 	mov	r6,r4
 4025a08:	2007883a 	mov	r3,r4
 4025a0c:	00000406 	br	4025a20 <memset+0x34>
 4025a10:	3a3fffc4 	addi	r8,r7,-1
 4025a14:	31800044 	addi	r6,r6,1
 4025a18:	38003926 	beq	r7,zero,4025b00 <memset+0x114>
 4025a1c:	400f883a 	mov	r7,r8
 4025a20:	18c00044 	addi	r3,r3,1
 4025a24:	32400005 	stb	r9,0(r6)
 4025a28:	1a0000cc 	andi	r8,r3,3
 4025a2c:	403ff81e 	bne	r8,zero,4025a10 <__alt_data_end+0xfffe5a10>
 4025a30:	010000c4 	movi	r4,3
 4025a34:	21c02d2e 	bgeu	r4,r7,4025aec <memset+0x100>
 4025a38:	29003fcc 	andi	r4,r5,255
 4025a3c:	200c923a 	slli	r6,r4,8
 4025a40:	3108b03a 	or	r4,r6,r4
 4025a44:	200c943a 	slli	r6,r4,16
 4025a48:	218cb03a 	or	r6,r4,r6
 4025a4c:	010003c4 	movi	r4,15
 4025a50:	21c0182e 	bgeu	r4,r7,4025ab4 <memset+0xc8>
 4025a54:	3b3ffc04 	addi	r12,r7,-16
 4025a58:	6018d13a 	srli	r12,r12,4
 4025a5c:	1a000104 	addi	r8,r3,4
 4025a60:	1ac00204 	addi	r11,r3,8
 4025a64:	6008913a 	slli	r4,r12,4
 4025a68:	1a800304 	addi	r10,r3,12
 4025a6c:	1813883a 	mov	r9,r3
 4025a70:	21000504 	addi	r4,r4,20
 4025a74:	1909883a 	add	r4,r3,r4
 4025a78:	49800015 	stw	r6,0(r9)
 4025a7c:	41800015 	stw	r6,0(r8)
 4025a80:	59800015 	stw	r6,0(r11)
 4025a84:	51800015 	stw	r6,0(r10)
 4025a88:	42000404 	addi	r8,r8,16
 4025a8c:	4a400404 	addi	r9,r9,16
 4025a90:	5ac00404 	addi	r11,r11,16
 4025a94:	52800404 	addi	r10,r10,16
 4025a98:	413ff71e 	bne	r8,r4,4025a78 <__alt_data_end+0xfffe5a78>
 4025a9c:	63000044 	addi	r12,r12,1
 4025aa0:	6018913a 	slli	r12,r12,4
 4025aa4:	39c003cc 	andi	r7,r7,15
 4025aa8:	010000c4 	movi	r4,3
 4025aac:	1b07883a 	add	r3,r3,r12
 4025ab0:	21c00e2e 	bgeu	r4,r7,4025aec <memset+0x100>
 4025ab4:	1813883a 	mov	r9,r3
 4025ab8:	3811883a 	mov	r8,r7
 4025abc:	010000c4 	movi	r4,3
 4025ac0:	49800015 	stw	r6,0(r9)
 4025ac4:	423fff04 	addi	r8,r8,-4
 4025ac8:	4a400104 	addi	r9,r9,4
 4025acc:	223ffc36 	bltu	r4,r8,4025ac0 <__alt_data_end+0xfffe5ac0>
 4025ad0:	393fff04 	addi	r4,r7,-4
 4025ad4:	2008d0ba 	srli	r4,r4,2
 4025ad8:	39c000cc 	andi	r7,r7,3
 4025adc:	21000044 	addi	r4,r4,1
 4025ae0:	2109883a 	add	r4,r4,r4
 4025ae4:	2109883a 	add	r4,r4,r4
 4025ae8:	1907883a 	add	r3,r3,r4
 4025aec:	38000526 	beq	r7,zero,4025b04 <memset+0x118>
 4025af0:	19cf883a 	add	r7,r3,r7
 4025af4:	19400005 	stb	r5,0(r3)
 4025af8:	18c00044 	addi	r3,r3,1
 4025afc:	38fffd1e 	bne	r7,r3,4025af4 <__alt_data_end+0xfffe5af4>
 4025b00:	f800283a 	ret
 4025b04:	f800283a 	ret
 4025b08:	2007883a 	mov	r3,r4
 4025b0c:	300f883a 	mov	r7,r6
 4025b10:	003fc706 	br	4025a30 <__alt_data_end+0xfffe5a30>

04025b14 <_Balloc>:
 4025b14:	20801317 	ldw	r2,76(r4)
 4025b18:	defffc04 	addi	sp,sp,-16
 4025b1c:	dc400115 	stw	r17,4(sp)
 4025b20:	dc000015 	stw	r16,0(sp)
 4025b24:	dfc00315 	stw	ra,12(sp)
 4025b28:	dc800215 	stw	r18,8(sp)
 4025b2c:	2023883a 	mov	r17,r4
 4025b30:	2821883a 	mov	r16,r5
 4025b34:	10000f26 	beq	r2,zero,4025b74 <_Balloc+0x60>
 4025b38:	8407883a 	add	r3,r16,r16
 4025b3c:	18c7883a 	add	r3,r3,r3
 4025b40:	10c7883a 	add	r3,r2,r3
 4025b44:	18800017 	ldw	r2,0(r3)
 4025b48:	10001126 	beq	r2,zero,4025b90 <_Balloc+0x7c>
 4025b4c:	11000017 	ldw	r4,0(r2)
 4025b50:	19000015 	stw	r4,0(r3)
 4025b54:	10000415 	stw	zero,16(r2)
 4025b58:	10000315 	stw	zero,12(r2)
 4025b5c:	dfc00317 	ldw	ra,12(sp)
 4025b60:	dc800217 	ldw	r18,8(sp)
 4025b64:	dc400117 	ldw	r17,4(sp)
 4025b68:	dc000017 	ldw	r16,0(sp)
 4025b6c:	dec00404 	addi	sp,sp,16
 4025b70:	f800283a 	ret
 4025b74:	01800844 	movi	r6,33
 4025b78:	01400104 	movi	r5,4
 4025b7c:	40285840 	call	4028584 <_calloc_r>
 4025b80:	88801315 	stw	r2,76(r17)
 4025b84:	103fec1e 	bne	r2,zero,4025b38 <__alt_data_end+0xfffe5b38>
 4025b88:	0005883a 	mov	r2,zero
 4025b8c:	003ff306 	br	4025b5c <__alt_data_end+0xfffe5b5c>
 4025b90:	01400044 	movi	r5,1
 4025b94:	2c24983a 	sll	r18,r5,r16
 4025b98:	8809883a 	mov	r4,r17
 4025b9c:	91800144 	addi	r6,r18,5
 4025ba0:	318d883a 	add	r6,r6,r6
 4025ba4:	318d883a 	add	r6,r6,r6
 4025ba8:	40285840 	call	4028584 <_calloc_r>
 4025bac:	103ff626 	beq	r2,zero,4025b88 <__alt_data_end+0xfffe5b88>
 4025bb0:	14000115 	stw	r16,4(r2)
 4025bb4:	14800215 	stw	r18,8(r2)
 4025bb8:	003fe606 	br	4025b54 <__alt_data_end+0xfffe5b54>

04025bbc <_Bfree>:
 4025bbc:	28000826 	beq	r5,zero,4025be0 <_Bfree+0x24>
 4025bc0:	28c00117 	ldw	r3,4(r5)
 4025bc4:	20801317 	ldw	r2,76(r4)
 4025bc8:	18c7883a 	add	r3,r3,r3
 4025bcc:	18c7883a 	add	r3,r3,r3
 4025bd0:	10c5883a 	add	r2,r2,r3
 4025bd4:	10c00017 	ldw	r3,0(r2)
 4025bd8:	28c00015 	stw	r3,0(r5)
 4025bdc:	11400015 	stw	r5,0(r2)
 4025be0:	f800283a 	ret

04025be4 <__multadd>:
 4025be4:	defffa04 	addi	sp,sp,-24
 4025be8:	dc800315 	stw	r18,12(sp)
 4025bec:	dc400215 	stw	r17,8(sp)
 4025bf0:	dc000115 	stw	r16,4(sp)
 4025bf4:	2823883a 	mov	r17,r5
 4025bf8:	2c000417 	ldw	r16,16(r5)
 4025bfc:	dfc00515 	stw	ra,20(sp)
 4025c00:	dcc00415 	stw	r19,16(sp)
 4025c04:	2025883a 	mov	r18,r4
 4025c08:	29400504 	addi	r5,r5,20
 4025c0c:	0011883a 	mov	r8,zero
 4025c10:	28c00017 	ldw	r3,0(r5)
 4025c14:	29400104 	addi	r5,r5,4
 4025c18:	42000044 	addi	r8,r8,1
 4025c1c:	18bfffcc 	andi	r2,r3,65535
 4025c20:	1185383a 	mul	r2,r2,r6
 4025c24:	1806d43a 	srli	r3,r3,16
 4025c28:	11cf883a 	add	r7,r2,r7
 4025c2c:	3808d43a 	srli	r4,r7,16
 4025c30:	1987383a 	mul	r3,r3,r6
 4025c34:	38bfffcc 	andi	r2,r7,65535
 4025c38:	1907883a 	add	r3,r3,r4
 4025c3c:	1808943a 	slli	r4,r3,16
 4025c40:	180ed43a 	srli	r7,r3,16
 4025c44:	2085883a 	add	r2,r4,r2
 4025c48:	28bfff15 	stw	r2,-4(r5)
 4025c4c:	443ff016 	blt	r8,r16,4025c10 <__alt_data_end+0xfffe5c10>
 4025c50:	38000926 	beq	r7,zero,4025c78 <__multadd+0x94>
 4025c54:	88800217 	ldw	r2,8(r17)
 4025c58:	80800f0e 	bge	r16,r2,4025c98 <__multadd+0xb4>
 4025c5c:	80800144 	addi	r2,r16,5
 4025c60:	1085883a 	add	r2,r2,r2
 4025c64:	1085883a 	add	r2,r2,r2
 4025c68:	8885883a 	add	r2,r17,r2
 4025c6c:	11c00015 	stw	r7,0(r2)
 4025c70:	84000044 	addi	r16,r16,1
 4025c74:	8c000415 	stw	r16,16(r17)
 4025c78:	8805883a 	mov	r2,r17
 4025c7c:	dfc00517 	ldw	ra,20(sp)
 4025c80:	dcc00417 	ldw	r19,16(sp)
 4025c84:	dc800317 	ldw	r18,12(sp)
 4025c88:	dc400217 	ldw	r17,8(sp)
 4025c8c:	dc000117 	ldw	r16,4(sp)
 4025c90:	dec00604 	addi	sp,sp,24
 4025c94:	f800283a 	ret
 4025c98:	89400117 	ldw	r5,4(r17)
 4025c9c:	9009883a 	mov	r4,r18
 4025ca0:	d9c00015 	stw	r7,0(sp)
 4025ca4:	29400044 	addi	r5,r5,1
 4025ca8:	4025b140 	call	4025b14 <_Balloc>
 4025cac:	89800417 	ldw	r6,16(r17)
 4025cb0:	89400304 	addi	r5,r17,12
 4025cb4:	11000304 	addi	r4,r2,12
 4025cb8:	31800084 	addi	r6,r6,2
 4025cbc:	318d883a 	add	r6,r6,r6
 4025cc0:	318d883a 	add	r6,r6,r6
 4025cc4:	1027883a 	mov	r19,r2
 4025cc8:	40258a40 	call	40258a4 <memcpy>
 4025ccc:	d9c00017 	ldw	r7,0(sp)
 4025cd0:	88000a26 	beq	r17,zero,4025cfc <__multadd+0x118>
 4025cd4:	88c00117 	ldw	r3,4(r17)
 4025cd8:	90801317 	ldw	r2,76(r18)
 4025cdc:	18c7883a 	add	r3,r3,r3
 4025ce0:	18c7883a 	add	r3,r3,r3
 4025ce4:	10c5883a 	add	r2,r2,r3
 4025ce8:	10c00017 	ldw	r3,0(r2)
 4025cec:	88c00015 	stw	r3,0(r17)
 4025cf0:	14400015 	stw	r17,0(r2)
 4025cf4:	9823883a 	mov	r17,r19
 4025cf8:	003fd806 	br	4025c5c <__alt_data_end+0xfffe5c5c>
 4025cfc:	9823883a 	mov	r17,r19
 4025d00:	003fd606 	br	4025c5c <__alt_data_end+0xfffe5c5c>

04025d04 <__s2b>:
 4025d04:	defff904 	addi	sp,sp,-28
 4025d08:	dc400115 	stw	r17,4(sp)
 4025d0c:	dc000015 	stw	r16,0(sp)
 4025d10:	2023883a 	mov	r17,r4
 4025d14:	2821883a 	mov	r16,r5
 4025d18:	39000204 	addi	r4,r7,8
 4025d1c:	01400244 	movi	r5,9
 4025d20:	dcc00315 	stw	r19,12(sp)
 4025d24:	dc800215 	stw	r18,8(sp)
 4025d28:	dfc00615 	stw	ra,24(sp)
 4025d2c:	dd400515 	stw	r21,20(sp)
 4025d30:	dd000415 	stw	r20,16(sp)
 4025d34:	3825883a 	mov	r18,r7
 4025d38:	3027883a 	mov	r19,r6
 4025d3c:	402a4300 	call	402a430 <__divsi3>
 4025d40:	00c00044 	movi	r3,1
 4025d44:	000b883a 	mov	r5,zero
 4025d48:	1880030e 	bge	r3,r2,4025d58 <__s2b+0x54>
 4025d4c:	18c7883a 	add	r3,r3,r3
 4025d50:	29400044 	addi	r5,r5,1
 4025d54:	18bffd16 	blt	r3,r2,4025d4c <__alt_data_end+0xfffe5d4c>
 4025d58:	8809883a 	mov	r4,r17
 4025d5c:	4025b140 	call	4025b14 <_Balloc>
 4025d60:	d8c00717 	ldw	r3,28(sp)
 4025d64:	10c00515 	stw	r3,20(r2)
 4025d68:	00c00044 	movi	r3,1
 4025d6c:	10c00415 	stw	r3,16(r2)
 4025d70:	00c00244 	movi	r3,9
 4025d74:	1cc0210e 	bge	r3,r19,4025dfc <__s2b+0xf8>
 4025d78:	80eb883a 	add	r21,r16,r3
 4025d7c:	a829883a 	mov	r20,r21
 4025d80:	84e1883a 	add	r16,r16,r19
 4025d84:	a1c00007 	ldb	r7,0(r20)
 4025d88:	01800284 	movi	r6,10
 4025d8c:	a5000044 	addi	r20,r20,1
 4025d90:	100b883a 	mov	r5,r2
 4025d94:	39fff404 	addi	r7,r7,-48
 4025d98:	8809883a 	mov	r4,r17
 4025d9c:	4025be40 	call	4025be4 <__multadd>
 4025da0:	a43ff81e 	bne	r20,r16,4025d84 <__alt_data_end+0xfffe5d84>
 4025da4:	ace1883a 	add	r16,r21,r19
 4025da8:	843ffe04 	addi	r16,r16,-8
 4025dac:	9c800a0e 	bge	r19,r18,4025dd8 <__s2b+0xd4>
 4025db0:	94e5c83a 	sub	r18,r18,r19
 4025db4:	84a5883a 	add	r18,r16,r18
 4025db8:	81c00007 	ldb	r7,0(r16)
 4025dbc:	01800284 	movi	r6,10
 4025dc0:	84000044 	addi	r16,r16,1
 4025dc4:	100b883a 	mov	r5,r2
 4025dc8:	39fff404 	addi	r7,r7,-48
 4025dcc:	8809883a 	mov	r4,r17
 4025dd0:	4025be40 	call	4025be4 <__multadd>
 4025dd4:	84bff81e 	bne	r16,r18,4025db8 <__alt_data_end+0xfffe5db8>
 4025dd8:	dfc00617 	ldw	ra,24(sp)
 4025ddc:	dd400517 	ldw	r21,20(sp)
 4025de0:	dd000417 	ldw	r20,16(sp)
 4025de4:	dcc00317 	ldw	r19,12(sp)
 4025de8:	dc800217 	ldw	r18,8(sp)
 4025dec:	dc400117 	ldw	r17,4(sp)
 4025df0:	dc000017 	ldw	r16,0(sp)
 4025df4:	dec00704 	addi	sp,sp,28
 4025df8:	f800283a 	ret
 4025dfc:	84000284 	addi	r16,r16,10
 4025e00:	1827883a 	mov	r19,r3
 4025e04:	003fe906 	br	4025dac <__alt_data_end+0xfffe5dac>

04025e08 <__hi0bits>:
 4025e08:	20bfffec 	andhi	r2,r4,65535
 4025e0c:	1000141e 	bne	r2,zero,4025e60 <__hi0bits+0x58>
 4025e10:	2008943a 	slli	r4,r4,16
 4025e14:	00800404 	movi	r2,16
 4025e18:	20ffc02c 	andhi	r3,r4,65280
 4025e1c:	1800021e 	bne	r3,zero,4025e28 <__hi0bits+0x20>
 4025e20:	2008923a 	slli	r4,r4,8
 4025e24:	10800204 	addi	r2,r2,8
 4025e28:	20fc002c 	andhi	r3,r4,61440
 4025e2c:	1800021e 	bne	r3,zero,4025e38 <__hi0bits+0x30>
 4025e30:	2008913a 	slli	r4,r4,4
 4025e34:	10800104 	addi	r2,r2,4
 4025e38:	20f0002c 	andhi	r3,r4,49152
 4025e3c:	1800031e 	bne	r3,zero,4025e4c <__hi0bits+0x44>
 4025e40:	2109883a 	add	r4,r4,r4
 4025e44:	10800084 	addi	r2,r2,2
 4025e48:	2109883a 	add	r4,r4,r4
 4025e4c:	20000316 	blt	r4,zero,4025e5c <__hi0bits+0x54>
 4025e50:	2110002c 	andhi	r4,r4,16384
 4025e54:	2000041e 	bne	r4,zero,4025e68 <__hi0bits+0x60>
 4025e58:	00800804 	movi	r2,32
 4025e5c:	f800283a 	ret
 4025e60:	0005883a 	mov	r2,zero
 4025e64:	003fec06 	br	4025e18 <__alt_data_end+0xfffe5e18>
 4025e68:	10800044 	addi	r2,r2,1
 4025e6c:	f800283a 	ret

04025e70 <__lo0bits>:
 4025e70:	20c00017 	ldw	r3,0(r4)
 4025e74:	188001cc 	andi	r2,r3,7
 4025e78:	10000826 	beq	r2,zero,4025e9c <__lo0bits+0x2c>
 4025e7c:	1880004c 	andi	r2,r3,1
 4025e80:	1000211e 	bne	r2,zero,4025f08 <__lo0bits+0x98>
 4025e84:	1880008c 	andi	r2,r3,2
 4025e88:	1000211e 	bne	r2,zero,4025f10 <__lo0bits+0xa0>
 4025e8c:	1806d0ba 	srli	r3,r3,2
 4025e90:	00800084 	movi	r2,2
 4025e94:	20c00015 	stw	r3,0(r4)
 4025e98:	f800283a 	ret
 4025e9c:	18bfffcc 	andi	r2,r3,65535
 4025ea0:	10001326 	beq	r2,zero,4025ef0 <__lo0bits+0x80>
 4025ea4:	0005883a 	mov	r2,zero
 4025ea8:	19403fcc 	andi	r5,r3,255
 4025eac:	2800021e 	bne	r5,zero,4025eb8 <__lo0bits+0x48>
 4025eb0:	1806d23a 	srli	r3,r3,8
 4025eb4:	10800204 	addi	r2,r2,8
 4025eb8:	194003cc 	andi	r5,r3,15
 4025ebc:	2800021e 	bne	r5,zero,4025ec8 <__lo0bits+0x58>
 4025ec0:	1806d13a 	srli	r3,r3,4
 4025ec4:	10800104 	addi	r2,r2,4
 4025ec8:	194000cc 	andi	r5,r3,3
 4025ecc:	2800021e 	bne	r5,zero,4025ed8 <__lo0bits+0x68>
 4025ed0:	1806d0ba 	srli	r3,r3,2
 4025ed4:	10800084 	addi	r2,r2,2
 4025ed8:	1940004c 	andi	r5,r3,1
 4025edc:	2800081e 	bne	r5,zero,4025f00 <__lo0bits+0x90>
 4025ee0:	1806d07a 	srli	r3,r3,1
 4025ee4:	1800051e 	bne	r3,zero,4025efc <__lo0bits+0x8c>
 4025ee8:	00800804 	movi	r2,32
 4025eec:	f800283a 	ret
 4025ef0:	1806d43a 	srli	r3,r3,16
 4025ef4:	00800404 	movi	r2,16
 4025ef8:	003feb06 	br	4025ea8 <__alt_data_end+0xfffe5ea8>
 4025efc:	10800044 	addi	r2,r2,1
 4025f00:	20c00015 	stw	r3,0(r4)
 4025f04:	f800283a 	ret
 4025f08:	0005883a 	mov	r2,zero
 4025f0c:	f800283a 	ret
 4025f10:	1806d07a 	srli	r3,r3,1
 4025f14:	00800044 	movi	r2,1
 4025f18:	20c00015 	stw	r3,0(r4)
 4025f1c:	f800283a 	ret

04025f20 <__i2b>:
 4025f20:	defffd04 	addi	sp,sp,-12
 4025f24:	dc000015 	stw	r16,0(sp)
 4025f28:	04000044 	movi	r16,1
 4025f2c:	dc400115 	stw	r17,4(sp)
 4025f30:	2823883a 	mov	r17,r5
 4025f34:	800b883a 	mov	r5,r16
 4025f38:	dfc00215 	stw	ra,8(sp)
 4025f3c:	4025b140 	call	4025b14 <_Balloc>
 4025f40:	14400515 	stw	r17,20(r2)
 4025f44:	14000415 	stw	r16,16(r2)
 4025f48:	dfc00217 	ldw	ra,8(sp)
 4025f4c:	dc400117 	ldw	r17,4(sp)
 4025f50:	dc000017 	ldw	r16,0(sp)
 4025f54:	dec00304 	addi	sp,sp,12
 4025f58:	f800283a 	ret

04025f5c <__multiply>:
 4025f5c:	defffa04 	addi	sp,sp,-24
 4025f60:	dcc00315 	stw	r19,12(sp)
 4025f64:	dc800215 	stw	r18,8(sp)
 4025f68:	34c00417 	ldw	r19,16(r6)
 4025f6c:	2c800417 	ldw	r18,16(r5)
 4025f70:	dd000415 	stw	r20,16(sp)
 4025f74:	dc400115 	stw	r17,4(sp)
 4025f78:	dfc00515 	stw	ra,20(sp)
 4025f7c:	dc000015 	stw	r16,0(sp)
 4025f80:	2829883a 	mov	r20,r5
 4025f84:	3023883a 	mov	r17,r6
 4025f88:	94c0050e 	bge	r18,r19,4025fa0 <__multiply+0x44>
 4025f8c:	9007883a 	mov	r3,r18
 4025f90:	3029883a 	mov	r20,r6
 4025f94:	9825883a 	mov	r18,r19
 4025f98:	2823883a 	mov	r17,r5
 4025f9c:	1827883a 	mov	r19,r3
 4025fa0:	a0800217 	ldw	r2,8(r20)
 4025fa4:	94e1883a 	add	r16,r18,r19
 4025fa8:	a1400117 	ldw	r5,4(r20)
 4025fac:	1400010e 	bge	r2,r16,4025fb4 <__multiply+0x58>
 4025fb0:	29400044 	addi	r5,r5,1
 4025fb4:	4025b140 	call	4025b14 <_Balloc>
 4025fb8:	8415883a 	add	r10,r16,r16
 4025fbc:	12c00504 	addi	r11,r2,20
 4025fc0:	5295883a 	add	r10,r10,r10
 4025fc4:	5a95883a 	add	r10,r11,r10
 4025fc8:	5807883a 	mov	r3,r11
 4025fcc:	5a80032e 	bgeu	r11,r10,4025fdc <__multiply+0x80>
 4025fd0:	18000015 	stw	zero,0(r3)
 4025fd4:	18c00104 	addi	r3,r3,4
 4025fd8:	1abffd36 	bltu	r3,r10,4025fd0 <__alt_data_end+0xfffe5fd0>
 4025fdc:	9ce7883a 	add	r19,r19,r19
 4025fe0:	94a5883a 	add	r18,r18,r18
 4025fe4:	89800504 	addi	r6,r17,20
 4025fe8:	9ce7883a 	add	r19,r19,r19
 4025fec:	a3400504 	addi	r13,r20,20
 4025ff0:	94a5883a 	add	r18,r18,r18
 4025ff4:	34d9883a 	add	r12,r6,r19
 4025ff8:	6c93883a 	add	r9,r13,r18
 4025ffc:	3300422e 	bgeu	r6,r12,4026108 <__multiply+0x1ac>
 4026000:	37c00017 	ldw	ra,0(r6)
 4026004:	fbffffcc 	andi	r15,ra,65535
 4026008:	78001b26 	beq	r15,zero,4026078 <__multiply+0x11c>
 402600c:	5811883a 	mov	r8,r11
 4026010:	681d883a 	mov	r14,r13
 4026014:	000f883a 	mov	r7,zero
 4026018:	71000017 	ldw	r4,0(r14)
 402601c:	40c00017 	ldw	r3,0(r8)
 4026020:	73800104 	addi	r14,r14,4
 4026024:	217fffcc 	andi	r5,r4,65535
 4026028:	2bcb383a 	mul	r5,r5,r15
 402602c:	2008d43a 	srli	r4,r4,16
 4026030:	1c7fffcc 	andi	r17,r3,65535
 4026034:	2c4b883a 	add	r5,r5,r17
 4026038:	29cb883a 	add	r5,r5,r7
 402603c:	23c9383a 	mul	r4,r4,r15
 4026040:	1806d43a 	srli	r3,r3,16
 4026044:	280ed43a 	srli	r7,r5,16
 4026048:	297fffcc 	andi	r5,r5,65535
 402604c:	20c7883a 	add	r3,r4,r3
 4026050:	19c7883a 	add	r3,r3,r7
 4026054:	1808943a 	slli	r4,r3,16
 4026058:	4023883a 	mov	r17,r8
 402605c:	180ed43a 	srli	r7,r3,16
 4026060:	214ab03a 	or	r5,r4,r5
 4026064:	41400015 	stw	r5,0(r8)
 4026068:	42000104 	addi	r8,r8,4
 402606c:	727fea36 	bltu	r14,r9,4026018 <__alt_data_end+0xfffe6018>
 4026070:	89c00115 	stw	r7,4(r17)
 4026074:	37c00017 	ldw	ra,0(r6)
 4026078:	f83ed43a 	srli	ra,ra,16
 402607c:	f8001f26 	beq	ra,zero,40260fc <__multiply+0x1a0>
 4026080:	58c00017 	ldw	r3,0(r11)
 4026084:	681d883a 	mov	r14,r13
 4026088:	581f883a 	mov	r15,r11
 402608c:	1811883a 	mov	r8,r3
 4026090:	5825883a 	mov	r18,r11
 4026094:	000f883a 	mov	r7,zero
 4026098:	00000106 	br	40260a0 <__multiply+0x144>
 402609c:	8825883a 	mov	r18,r17
 40260a0:	7140000b 	ldhu	r5,0(r14)
 40260a4:	4010d43a 	srli	r8,r8,16
 40260a8:	193fffcc 	andi	r4,r3,65535
 40260ac:	2fcb383a 	mul	r5,r5,ra
 40260b0:	7bc00104 	addi	r15,r15,4
 40260b4:	73800104 	addi	r14,r14,4
 40260b8:	2a0b883a 	add	r5,r5,r8
 40260bc:	29cb883a 	add	r5,r5,r7
 40260c0:	2806943a 	slli	r3,r5,16
 40260c4:	94400104 	addi	r17,r18,4
 40260c8:	280ad43a 	srli	r5,r5,16
 40260cc:	1908b03a 	or	r4,r3,r4
 40260d0:	793fff15 	stw	r4,-4(r15)
 40260d4:	70ffff17 	ldw	r3,-4(r14)
 40260d8:	8a000017 	ldw	r8,0(r17)
 40260dc:	1806d43a 	srli	r3,r3,16
 40260e0:	413fffcc 	andi	r4,r8,65535
 40260e4:	1fc7383a 	mul	r3,r3,ra
 40260e8:	1907883a 	add	r3,r3,r4
 40260ec:	1947883a 	add	r3,r3,r5
 40260f0:	180ed43a 	srli	r7,r3,16
 40260f4:	727fe936 	bltu	r14,r9,402609c <__alt_data_end+0xfffe609c>
 40260f8:	90c00115 	stw	r3,4(r18)
 40260fc:	31800104 	addi	r6,r6,4
 4026100:	5ac00104 	addi	r11,r11,4
 4026104:	333fbe36 	bltu	r6,r12,4026000 <__alt_data_end+0xfffe6000>
 4026108:	0400090e 	bge	zero,r16,4026130 <__multiply+0x1d4>
 402610c:	50ffff17 	ldw	r3,-4(r10)
 4026110:	52bfff04 	addi	r10,r10,-4
 4026114:	18000326 	beq	r3,zero,4026124 <__multiply+0x1c8>
 4026118:	00000506 	br	4026130 <__multiply+0x1d4>
 402611c:	50c00017 	ldw	r3,0(r10)
 4026120:	1800031e 	bne	r3,zero,4026130 <__multiply+0x1d4>
 4026124:	843fffc4 	addi	r16,r16,-1
 4026128:	52bfff04 	addi	r10,r10,-4
 402612c:	803ffb1e 	bne	r16,zero,402611c <__alt_data_end+0xfffe611c>
 4026130:	14000415 	stw	r16,16(r2)
 4026134:	dfc00517 	ldw	ra,20(sp)
 4026138:	dd000417 	ldw	r20,16(sp)
 402613c:	dcc00317 	ldw	r19,12(sp)
 4026140:	dc800217 	ldw	r18,8(sp)
 4026144:	dc400117 	ldw	r17,4(sp)
 4026148:	dc000017 	ldw	r16,0(sp)
 402614c:	dec00604 	addi	sp,sp,24
 4026150:	f800283a 	ret

04026154 <__pow5mult>:
 4026154:	defffa04 	addi	sp,sp,-24
 4026158:	dcc00315 	stw	r19,12(sp)
 402615c:	dc000015 	stw	r16,0(sp)
 4026160:	dfc00515 	stw	ra,20(sp)
 4026164:	dd000415 	stw	r20,16(sp)
 4026168:	dc800215 	stw	r18,8(sp)
 402616c:	dc400115 	stw	r17,4(sp)
 4026170:	308000cc 	andi	r2,r6,3
 4026174:	3021883a 	mov	r16,r6
 4026178:	2027883a 	mov	r19,r4
 402617c:	10002f1e 	bne	r2,zero,402623c <__pow5mult+0xe8>
 4026180:	2825883a 	mov	r18,r5
 4026184:	8021d0ba 	srai	r16,r16,2
 4026188:	80001a26 	beq	r16,zero,40261f4 <__pow5mult+0xa0>
 402618c:	9c401217 	ldw	r17,72(r19)
 4026190:	8800061e 	bne	r17,zero,40261ac <__pow5mult+0x58>
 4026194:	00003406 	br	4026268 <__pow5mult+0x114>
 4026198:	8021d07a 	srai	r16,r16,1
 402619c:	80001526 	beq	r16,zero,40261f4 <__pow5mult+0xa0>
 40261a0:	88800017 	ldw	r2,0(r17)
 40261a4:	10001c26 	beq	r2,zero,4026218 <__pow5mult+0xc4>
 40261a8:	1023883a 	mov	r17,r2
 40261ac:	8080004c 	andi	r2,r16,1
 40261b0:	103ff926 	beq	r2,zero,4026198 <__alt_data_end+0xfffe6198>
 40261b4:	880d883a 	mov	r6,r17
 40261b8:	900b883a 	mov	r5,r18
 40261bc:	9809883a 	mov	r4,r19
 40261c0:	4025f5c0 	call	4025f5c <__multiply>
 40261c4:	90001b26 	beq	r18,zero,4026234 <__pow5mult+0xe0>
 40261c8:	91000117 	ldw	r4,4(r18)
 40261cc:	98c01317 	ldw	r3,76(r19)
 40261d0:	8021d07a 	srai	r16,r16,1
 40261d4:	2109883a 	add	r4,r4,r4
 40261d8:	2109883a 	add	r4,r4,r4
 40261dc:	1907883a 	add	r3,r3,r4
 40261e0:	19000017 	ldw	r4,0(r3)
 40261e4:	91000015 	stw	r4,0(r18)
 40261e8:	1c800015 	stw	r18,0(r3)
 40261ec:	1025883a 	mov	r18,r2
 40261f0:	803feb1e 	bne	r16,zero,40261a0 <__alt_data_end+0xfffe61a0>
 40261f4:	9005883a 	mov	r2,r18
 40261f8:	dfc00517 	ldw	ra,20(sp)
 40261fc:	dd000417 	ldw	r20,16(sp)
 4026200:	dcc00317 	ldw	r19,12(sp)
 4026204:	dc800217 	ldw	r18,8(sp)
 4026208:	dc400117 	ldw	r17,4(sp)
 402620c:	dc000017 	ldw	r16,0(sp)
 4026210:	dec00604 	addi	sp,sp,24
 4026214:	f800283a 	ret
 4026218:	880d883a 	mov	r6,r17
 402621c:	880b883a 	mov	r5,r17
 4026220:	9809883a 	mov	r4,r19
 4026224:	4025f5c0 	call	4025f5c <__multiply>
 4026228:	88800015 	stw	r2,0(r17)
 402622c:	10000015 	stw	zero,0(r2)
 4026230:	003fdd06 	br	40261a8 <__alt_data_end+0xfffe61a8>
 4026234:	1025883a 	mov	r18,r2
 4026238:	003fd706 	br	4026198 <__alt_data_end+0xfffe6198>
 402623c:	10bfffc4 	addi	r2,r2,-1
 4026240:	1085883a 	add	r2,r2,r2
 4026244:	00c100f4 	movhi	r3,1027
 4026248:	18c0dc04 	addi	r3,r3,880
 402624c:	1085883a 	add	r2,r2,r2
 4026250:	1885883a 	add	r2,r3,r2
 4026254:	11800017 	ldw	r6,0(r2)
 4026258:	000f883a 	mov	r7,zero
 402625c:	4025be40 	call	4025be4 <__multadd>
 4026260:	1025883a 	mov	r18,r2
 4026264:	003fc706 	br	4026184 <__alt_data_end+0xfffe6184>
 4026268:	05000044 	movi	r20,1
 402626c:	a00b883a 	mov	r5,r20
 4026270:	9809883a 	mov	r4,r19
 4026274:	4025b140 	call	4025b14 <_Balloc>
 4026278:	1023883a 	mov	r17,r2
 402627c:	00809c44 	movi	r2,625
 4026280:	88800515 	stw	r2,20(r17)
 4026284:	8d000415 	stw	r20,16(r17)
 4026288:	9c401215 	stw	r17,72(r19)
 402628c:	88000015 	stw	zero,0(r17)
 4026290:	003fc606 	br	40261ac <__alt_data_end+0xfffe61ac>

04026294 <__lshift>:
 4026294:	defff904 	addi	sp,sp,-28
 4026298:	dd400515 	stw	r21,20(sp)
 402629c:	dcc00315 	stw	r19,12(sp)
 40262a0:	302bd17a 	srai	r21,r6,5
 40262a4:	2cc00417 	ldw	r19,16(r5)
 40262a8:	28800217 	ldw	r2,8(r5)
 40262ac:	dd000415 	stw	r20,16(sp)
 40262b0:	ace7883a 	add	r19,r21,r19
 40262b4:	dc800215 	stw	r18,8(sp)
 40262b8:	dc400115 	stw	r17,4(sp)
 40262bc:	dc000015 	stw	r16,0(sp)
 40262c0:	dfc00615 	stw	ra,24(sp)
 40262c4:	9c000044 	addi	r16,r19,1
 40262c8:	2823883a 	mov	r17,r5
 40262cc:	3029883a 	mov	r20,r6
 40262d0:	2025883a 	mov	r18,r4
 40262d4:	29400117 	ldw	r5,4(r5)
 40262d8:	1400030e 	bge	r2,r16,40262e8 <__lshift+0x54>
 40262dc:	1085883a 	add	r2,r2,r2
 40262e0:	29400044 	addi	r5,r5,1
 40262e4:	143ffd16 	blt	r2,r16,40262dc <__alt_data_end+0xfffe62dc>
 40262e8:	9009883a 	mov	r4,r18
 40262ec:	4025b140 	call	4025b14 <_Balloc>
 40262f0:	10c00504 	addi	r3,r2,20
 40262f4:	0540070e 	bge	zero,r21,4026314 <__lshift+0x80>
 40262f8:	ad6b883a 	add	r21,r21,r21
 40262fc:	ad6b883a 	add	r21,r21,r21
 4026300:	1809883a 	mov	r4,r3
 4026304:	1d47883a 	add	r3,r3,r21
 4026308:	20000015 	stw	zero,0(r4)
 402630c:	21000104 	addi	r4,r4,4
 4026310:	193ffd1e 	bne	r3,r4,4026308 <__alt_data_end+0xfffe6308>
 4026314:	8a000417 	ldw	r8,16(r17)
 4026318:	89000504 	addi	r4,r17,20
 402631c:	a18007cc 	andi	r6,r20,31
 4026320:	4211883a 	add	r8,r8,r8
 4026324:	4211883a 	add	r8,r8,r8
 4026328:	2211883a 	add	r8,r4,r8
 402632c:	30002326 	beq	r6,zero,40263bc <__lshift+0x128>
 4026330:	02400804 	movi	r9,32
 4026334:	4993c83a 	sub	r9,r9,r6
 4026338:	000b883a 	mov	r5,zero
 402633c:	21c00017 	ldw	r7,0(r4)
 4026340:	1815883a 	mov	r10,r3
 4026344:	18c00104 	addi	r3,r3,4
 4026348:	398e983a 	sll	r7,r7,r6
 402634c:	21000104 	addi	r4,r4,4
 4026350:	394ab03a 	or	r5,r7,r5
 4026354:	197fff15 	stw	r5,-4(r3)
 4026358:	217fff17 	ldw	r5,-4(r4)
 402635c:	2a4ad83a 	srl	r5,r5,r9
 4026360:	223ff636 	bltu	r4,r8,402633c <__alt_data_end+0xfffe633c>
 4026364:	51400115 	stw	r5,4(r10)
 4026368:	28001a1e 	bne	r5,zero,40263d4 <__lshift+0x140>
 402636c:	843fffc4 	addi	r16,r16,-1
 4026370:	14000415 	stw	r16,16(r2)
 4026374:	88000826 	beq	r17,zero,4026398 <__lshift+0x104>
 4026378:	89000117 	ldw	r4,4(r17)
 402637c:	90c01317 	ldw	r3,76(r18)
 4026380:	2109883a 	add	r4,r4,r4
 4026384:	2109883a 	add	r4,r4,r4
 4026388:	1907883a 	add	r3,r3,r4
 402638c:	19000017 	ldw	r4,0(r3)
 4026390:	89000015 	stw	r4,0(r17)
 4026394:	1c400015 	stw	r17,0(r3)
 4026398:	dfc00617 	ldw	ra,24(sp)
 402639c:	dd400517 	ldw	r21,20(sp)
 40263a0:	dd000417 	ldw	r20,16(sp)
 40263a4:	dcc00317 	ldw	r19,12(sp)
 40263a8:	dc800217 	ldw	r18,8(sp)
 40263ac:	dc400117 	ldw	r17,4(sp)
 40263b0:	dc000017 	ldw	r16,0(sp)
 40263b4:	dec00704 	addi	sp,sp,28
 40263b8:	f800283a 	ret
 40263bc:	21400017 	ldw	r5,0(r4)
 40263c0:	18c00104 	addi	r3,r3,4
 40263c4:	21000104 	addi	r4,r4,4
 40263c8:	197fff15 	stw	r5,-4(r3)
 40263cc:	223ffb36 	bltu	r4,r8,40263bc <__alt_data_end+0xfffe63bc>
 40263d0:	003fe606 	br	402636c <__alt_data_end+0xfffe636c>
 40263d4:	9c000084 	addi	r16,r19,2
 40263d8:	003fe406 	br	402636c <__alt_data_end+0xfffe636c>

040263dc <__mcmp>:
 40263dc:	20800417 	ldw	r2,16(r4)
 40263e0:	28c00417 	ldw	r3,16(r5)
 40263e4:	10c5c83a 	sub	r2,r2,r3
 40263e8:	1000111e 	bne	r2,zero,4026430 <__mcmp+0x54>
 40263ec:	18c7883a 	add	r3,r3,r3
 40263f0:	18c7883a 	add	r3,r3,r3
 40263f4:	21000504 	addi	r4,r4,20
 40263f8:	29400504 	addi	r5,r5,20
 40263fc:	20c5883a 	add	r2,r4,r3
 4026400:	28cb883a 	add	r5,r5,r3
 4026404:	00000106 	br	402640c <__mcmp+0x30>
 4026408:	20800a2e 	bgeu	r4,r2,4026434 <__mcmp+0x58>
 402640c:	10bfff04 	addi	r2,r2,-4
 4026410:	297fff04 	addi	r5,r5,-4
 4026414:	11800017 	ldw	r6,0(r2)
 4026418:	28c00017 	ldw	r3,0(r5)
 402641c:	30fffa26 	beq	r6,r3,4026408 <__alt_data_end+0xfffe6408>
 4026420:	30c00236 	bltu	r6,r3,402642c <__mcmp+0x50>
 4026424:	00800044 	movi	r2,1
 4026428:	f800283a 	ret
 402642c:	00bfffc4 	movi	r2,-1
 4026430:	f800283a 	ret
 4026434:	0005883a 	mov	r2,zero
 4026438:	f800283a 	ret

0402643c <__mdiff>:
 402643c:	28c00417 	ldw	r3,16(r5)
 4026440:	30800417 	ldw	r2,16(r6)
 4026444:	defffa04 	addi	sp,sp,-24
 4026448:	dcc00315 	stw	r19,12(sp)
 402644c:	dc800215 	stw	r18,8(sp)
 4026450:	dfc00515 	stw	ra,20(sp)
 4026454:	dd000415 	stw	r20,16(sp)
 4026458:	dc400115 	stw	r17,4(sp)
 402645c:	dc000015 	stw	r16,0(sp)
 4026460:	1887c83a 	sub	r3,r3,r2
 4026464:	2825883a 	mov	r18,r5
 4026468:	3027883a 	mov	r19,r6
 402646c:	1800141e 	bne	r3,zero,40264c0 <__mdiff+0x84>
 4026470:	1085883a 	add	r2,r2,r2
 4026474:	1085883a 	add	r2,r2,r2
 4026478:	2a000504 	addi	r8,r5,20
 402647c:	34000504 	addi	r16,r6,20
 4026480:	4087883a 	add	r3,r8,r2
 4026484:	8085883a 	add	r2,r16,r2
 4026488:	00000106 	br	4026490 <__mdiff+0x54>
 402648c:	40c0592e 	bgeu	r8,r3,40265f4 <__mdiff+0x1b8>
 4026490:	18ffff04 	addi	r3,r3,-4
 4026494:	10bfff04 	addi	r2,r2,-4
 4026498:	19c00017 	ldw	r7,0(r3)
 402649c:	11400017 	ldw	r5,0(r2)
 40264a0:	397ffa26 	beq	r7,r5,402648c <__alt_data_end+0xfffe648c>
 40264a4:	3940592e 	bgeu	r7,r5,402660c <__mdiff+0x1d0>
 40264a8:	9005883a 	mov	r2,r18
 40264ac:	4023883a 	mov	r17,r8
 40264b0:	9825883a 	mov	r18,r19
 40264b4:	05000044 	movi	r20,1
 40264b8:	1027883a 	mov	r19,r2
 40264bc:	00000406 	br	40264d0 <__mdiff+0x94>
 40264c0:	18005616 	blt	r3,zero,402661c <__mdiff+0x1e0>
 40264c4:	34400504 	addi	r17,r6,20
 40264c8:	2c000504 	addi	r16,r5,20
 40264cc:	0029883a 	mov	r20,zero
 40264d0:	91400117 	ldw	r5,4(r18)
 40264d4:	4025b140 	call	4025b14 <_Balloc>
 40264d8:	92400417 	ldw	r9,16(r18)
 40264dc:	9b000417 	ldw	r12,16(r19)
 40264e0:	12c00504 	addi	r11,r2,20
 40264e4:	4a51883a 	add	r8,r9,r9
 40264e8:	6319883a 	add	r12,r12,r12
 40264ec:	4211883a 	add	r8,r8,r8
 40264f0:	6319883a 	add	r12,r12,r12
 40264f4:	15000315 	stw	r20,12(r2)
 40264f8:	8211883a 	add	r8,r16,r8
 40264fc:	8b19883a 	add	r12,r17,r12
 4026500:	0007883a 	mov	r3,zero
 4026504:	81400017 	ldw	r5,0(r16)
 4026508:	89c00017 	ldw	r7,0(r17)
 402650c:	59800104 	addi	r6,r11,4
 4026510:	293fffcc 	andi	r4,r5,65535
 4026514:	20c7883a 	add	r3,r4,r3
 4026518:	393fffcc 	andi	r4,r7,65535
 402651c:	1909c83a 	sub	r4,r3,r4
 4026520:	280ad43a 	srli	r5,r5,16
 4026524:	380ed43a 	srli	r7,r7,16
 4026528:	2007d43a 	srai	r3,r4,16
 402652c:	213fffcc 	andi	r4,r4,65535
 4026530:	29cbc83a 	sub	r5,r5,r7
 4026534:	28c7883a 	add	r3,r5,r3
 4026538:	180a943a 	slli	r5,r3,16
 402653c:	8c400104 	addi	r17,r17,4
 4026540:	84000104 	addi	r16,r16,4
 4026544:	2908b03a 	or	r4,r5,r4
 4026548:	59000015 	stw	r4,0(r11)
 402654c:	1807d43a 	srai	r3,r3,16
 4026550:	3015883a 	mov	r10,r6
 4026554:	3017883a 	mov	r11,r6
 4026558:	8b3fea36 	bltu	r17,r12,4026504 <__alt_data_end+0xfffe6504>
 402655c:	8200162e 	bgeu	r16,r8,40265b8 <__mdiff+0x17c>
 4026560:	8017883a 	mov	r11,r16
 4026564:	59400017 	ldw	r5,0(r11)
 4026568:	31800104 	addi	r6,r6,4
 402656c:	5ac00104 	addi	r11,r11,4
 4026570:	293fffcc 	andi	r4,r5,65535
 4026574:	20c7883a 	add	r3,r4,r3
 4026578:	280ed43a 	srli	r7,r5,16
 402657c:	180bd43a 	srai	r5,r3,16
 4026580:	193fffcc 	andi	r4,r3,65535
 4026584:	3947883a 	add	r3,r7,r5
 4026588:	180a943a 	slli	r5,r3,16
 402658c:	1807d43a 	srai	r3,r3,16
 4026590:	2908b03a 	or	r4,r5,r4
 4026594:	313fff15 	stw	r4,-4(r6)
 4026598:	5a3ff236 	bltu	r11,r8,4026564 <__alt_data_end+0xfffe6564>
 402659c:	0406303a 	nor	r3,zero,r16
 40265a0:	1a07883a 	add	r3,r3,r8
 40265a4:	1806d0ba 	srli	r3,r3,2
 40265a8:	18c00044 	addi	r3,r3,1
 40265ac:	18c7883a 	add	r3,r3,r3
 40265b0:	18c7883a 	add	r3,r3,r3
 40265b4:	50d5883a 	add	r10,r10,r3
 40265b8:	50ffff04 	addi	r3,r10,-4
 40265bc:	2000041e 	bne	r4,zero,40265d0 <__mdiff+0x194>
 40265c0:	18ffff04 	addi	r3,r3,-4
 40265c4:	19000017 	ldw	r4,0(r3)
 40265c8:	4a7fffc4 	addi	r9,r9,-1
 40265cc:	203ffc26 	beq	r4,zero,40265c0 <__alt_data_end+0xfffe65c0>
 40265d0:	12400415 	stw	r9,16(r2)
 40265d4:	dfc00517 	ldw	ra,20(sp)
 40265d8:	dd000417 	ldw	r20,16(sp)
 40265dc:	dcc00317 	ldw	r19,12(sp)
 40265e0:	dc800217 	ldw	r18,8(sp)
 40265e4:	dc400117 	ldw	r17,4(sp)
 40265e8:	dc000017 	ldw	r16,0(sp)
 40265ec:	dec00604 	addi	sp,sp,24
 40265f0:	f800283a 	ret
 40265f4:	000b883a 	mov	r5,zero
 40265f8:	4025b140 	call	4025b14 <_Balloc>
 40265fc:	00c00044 	movi	r3,1
 4026600:	10c00415 	stw	r3,16(r2)
 4026604:	10000515 	stw	zero,20(r2)
 4026608:	003ff206 	br	40265d4 <__alt_data_end+0xfffe65d4>
 402660c:	8023883a 	mov	r17,r16
 4026610:	0029883a 	mov	r20,zero
 4026614:	4021883a 	mov	r16,r8
 4026618:	003fad06 	br	40264d0 <__alt_data_end+0xfffe64d0>
 402661c:	9005883a 	mov	r2,r18
 4026620:	94400504 	addi	r17,r18,20
 4026624:	9c000504 	addi	r16,r19,20
 4026628:	9825883a 	mov	r18,r19
 402662c:	05000044 	movi	r20,1
 4026630:	1027883a 	mov	r19,r2
 4026634:	003fa606 	br	40264d0 <__alt_data_end+0xfffe64d0>

04026638 <__ulp>:
 4026638:	295ffc2c 	andhi	r5,r5,32752
 402663c:	00bf3034 	movhi	r2,64704
 4026640:	2887883a 	add	r3,r5,r2
 4026644:	00c0020e 	bge	zero,r3,4026650 <__ulp+0x18>
 4026648:	0005883a 	mov	r2,zero
 402664c:	f800283a 	ret
 4026650:	00c7c83a 	sub	r3,zero,r3
 4026654:	1807d53a 	srai	r3,r3,20
 4026658:	008004c4 	movi	r2,19
 402665c:	10c00b0e 	bge	r2,r3,402668c <__ulp+0x54>
 4026660:	18bffb04 	addi	r2,r3,-20
 4026664:	01000784 	movi	r4,30
 4026668:	0007883a 	mov	r3,zero
 402666c:	20800516 	blt	r4,r2,4026684 <__ulp+0x4c>
 4026670:	010007c4 	movi	r4,31
 4026674:	2089c83a 	sub	r4,r4,r2
 4026678:	00800044 	movi	r2,1
 402667c:	1104983a 	sll	r2,r2,r4
 4026680:	f800283a 	ret
 4026684:	00800044 	movi	r2,1
 4026688:	f800283a 	ret
 402668c:	01400234 	movhi	r5,8
 4026690:	28c7d83a 	sra	r3,r5,r3
 4026694:	0005883a 	mov	r2,zero
 4026698:	f800283a 	ret

0402669c <__b2d>:
 402669c:	defffa04 	addi	sp,sp,-24
 40266a0:	dc000015 	stw	r16,0(sp)
 40266a4:	24000417 	ldw	r16,16(r4)
 40266a8:	dc400115 	stw	r17,4(sp)
 40266ac:	24400504 	addi	r17,r4,20
 40266b0:	8421883a 	add	r16,r16,r16
 40266b4:	8421883a 	add	r16,r16,r16
 40266b8:	8c21883a 	add	r16,r17,r16
 40266bc:	dc800215 	stw	r18,8(sp)
 40266c0:	84bfff17 	ldw	r18,-4(r16)
 40266c4:	dd000415 	stw	r20,16(sp)
 40266c8:	dcc00315 	stw	r19,12(sp)
 40266cc:	9009883a 	mov	r4,r18
 40266d0:	2829883a 	mov	r20,r5
 40266d4:	dfc00515 	stw	ra,20(sp)
 40266d8:	4025e080 	call	4025e08 <__hi0bits>
 40266dc:	00c00804 	movi	r3,32
 40266e0:	1889c83a 	sub	r4,r3,r2
 40266e4:	a1000015 	stw	r4,0(r20)
 40266e8:	01000284 	movi	r4,10
 40266ec:	84ffff04 	addi	r19,r16,-4
 40266f0:	20801216 	blt	r4,r2,402673c <__b2d+0xa0>
 40266f4:	018002c4 	movi	r6,11
 40266f8:	308dc83a 	sub	r6,r6,r2
 40266fc:	9186d83a 	srl	r3,r18,r6
 4026700:	18cffc34 	orhi	r3,r3,16368
 4026704:	8cc0212e 	bgeu	r17,r19,402678c <__b2d+0xf0>
 4026708:	813ffe17 	ldw	r4,-8(r16)
 402670c:	218cd83a 	srl	r6,r4,r6
 4026710:	10800544 	addi	r2,r2,21
 4026714:	9084983a 	sll	r2,r18,r2
 4026718:	1184b03a 	or	r2,r2,r6
 402671c:	dfc00517 	ldw	ra,20(sp)
 4026720:	dd000417 	ldw	r20,16(sp)
 4026724:	dcc00317 	ldw	r19,12(sp)
 4026728:	dc800217 	ldw	r18,8(sp)
 402672c:	dc400117 	ldw	r17,4(sp)
 4026730:	dc000017 	ldw	r16,0(sp)
 4026734:	dec00604 	addi	sp,sp,24
 4026738:	f800283a 	ret
 402673c:	8cc00f2e 	bgeu	r17,r19,402677c <__b2d+0xe0>
 4026740:	117ffd44 	addi	r5,r2,-11
 4026744:	80bffe17 	ldw	r2,-8(r16)
 4026748:	28000e26 	beq	r5,zero,4026784 <__b2d+0xe8>
 402674c:	1949c83a 	sub	r4,r3,r5
 4026750:	9164983a 	sll	r18,r18,r5
 4026754:	1106d83a 	srl	r3,r2,r4
 4026758:	81bffe04 	addi	r6,r16,-8
 402675c:	948ffc34 	orhi	r18,r18,16368
 4026760:	90c6b03a 	or	r3,r18,r3
 4026764:	89800e2e 	bgeu	r17,r6,40267a0 <__b2d+0x104>
 4026768:	81bffd17 	ldw	r6,-12(r16)
 402676c:	1144983a 	sll	r2,r2,r5
 4026770:	310ad83a 	srl	r5,r6,r4
 4026774:	2884b03a 	or	r2,r5,r2
 4026778:	003fe806 	br	402671c <__alt_data_end+0xfffe671c>
 402677c:	10bffd44 	addi	r2,r2,-11
 4026780:	1000041e 	bne	r2,zero,4026794 <__b2d+0xf8>
 4026784:	90cffc34 	orhi	r3,r18,16368
 4026788:	003fe406 	br	402671c <__alt_data_end+0xfffe671c>
 402678c:	000d883a 	mov	r6,zero
 4026790:	003fdf06 	br	4026710 <__alt_data_end+0xfffe6710>
 4026794:	90a4983a 	sll	r18,r18,r2
 4026798:	0005883a 	mov	r2,zero
 402679c:	003ff906 	br	4026784 <__alt_data_end+0xfffe6784>
 40267a0:	1144983a 	sll	r2,r2,r5
 40267a4:	003fdd06 	br	402671c <__alt_data_end+0xfffe671c>

040267a8 <__d2b>:
 40267a8:	defff804 	addi	sp,sp,-32
 40267ac:	dc000215 	stw	r16,8(sp)
 40267b0:	3021883a 	mov	r16,r6
 40267b4:	dc400315 	stw	r17,12(sp)
 40267b8:	8022907a 	slli	r17,r16,1
 40267bc:	dd000615 	stw	r20,24(sp)
 40267c0:	2829883a 	mov	r20,r5
 40267c4:	01400044 	movi	r5,1
 40267c8:	dcc00515 	stw	r19,20(sp)
 40267cc:	dc800415 	stw	r18,16(sp)
 40267d0:	dfc00715 	stw	ra,28(sp)
 40267d4:	3825883a 	mov	r18,r7
 40267d8:	8822d57a 	srli	r17,r17,21
 40267dc:	4025b140 	call	4025b14 <_Balloc>
 40267e0:	1027883a 	mov	r19,r2
 40267e4:	00800434 	movhi	r2,16
 40267e8:	10bfffc4 	addi	r2,r2,-1
 40267ec:	808c703a 	and	r6,r16,r2
 40267f0:	88000126 	beq	r17,zero,40267f8 <__d2b+0x50>
 40267f4:	31800434 	orhi	r6,r6,16
 40267f8:	d9800015 	stw	r6,0(sp)
 40267fc:	a0002426 	beq	r20,zero,4026890 <__d2b+0xe8>
 4026800:	d9000104 	addi	r4,sp,4
 4026804:	dd000115 	stw	r20,4(sp)
 4026808:	4025e700 	call	4025e70 <__lo0bits>
 402680c:	d8c00017 	ldw	r3,0(sp)
 4026810:	10002f1e 	bne	r2,zero,40268d0 <__d2b+0x128>
 4026814:	d9000117 	ldw	r4,4(sp)
 4026818:	99000515 	stw	r4,20(r19)
 402681c:	1821003a 	cmpeq	r16,r3,zero
 4026820:	01000084 	movi	r4,2
 4026824:	2421c83a 	sub	r16,r4,r16
 4026828:	98c00615 	stw	r3,24(r19)
 402682c:	9c000415 	stw	r16,16(r19)
 4026830:	88001f1e 	bne	r17,zero,40268b0 <__d2b+0x108>
 4026834:	10bef384 	addi	r2,r2,-1074
 4026838:	90800015 	stw	r2,0(r18)
 402683c:	00900034 	movhi	r2,16384
 4026840:	10bfffc4 	addi	r2,r2,-1
 4026844:	8085883a 	add	r2,r16,r2
 4026848:	1085883a 	add	r2,r2,r2
 402684c:	1085883a 	add	r2,r2,r2
 4026850:	9885883a 	add	r2,r19,r2
 4026854:	11000517 	ldw	r4,20(r2)
 4026858:	8020917a 	slli	r16,r16,5
 402685c:	4025e080 	call	4025e08 <__hi0bits>
 4026860:	d8c00817 	ldw	r3,32(sp)
 4026864:	8085c83a 	sub	r2,r16,r2
 4026868:	18800015 	stw	r2,0(r3)
 402686c:	9805883a 	mov	r2,r19
 4026870:	dfc00717 	ldw	ra,28(sp)
 4026874:	dd000617 	ldw	r20,24(sp)
 4026878:	dcc00517 	ldw	r19,20(sp)
 402687c:	dc800417 	ldw	r18,16(sp)
 4026880:	dc400317 	ldw	r17,12(sp)
 4026884:	dc000217 	ldw	r16,8(sp)
 4026888:	dec00804 	addi	sp,sp,32
 402688c:	f800283a 	ret
 4026890:	d809883a 	mov	r4,sp
 4026894:	4025e700 	call	4025e70 <__lo0bits>
 4026898:	d8c00017 	ldw	r3,0(sp)
 402689c:	04000044 	movi	r16,1
 40268a0:	9c000415 	stw	r16,16(r19)
 40268a4:	98c00515 	stw	r3,20(r19)
 40268a8:	10800804 	addi	r2,r2,32
 40268ac:	883fe126 	beq	r17,zero,4026834 <__alt_data_end+0xfffe6834>
 40268b0:	00c00d44 	movi	r3,53
 40268b4:	8c7ef344 	addi	r17,r17,-1075
 40268b8:	88a3883a 	add	r17,r17,r2
 40268bc:	1885c83a 	sub	r2,r3,r2
 40268c0:	d8c00817 	ldw	r3,32(sp)
 40268c4:	94400015 	stw	r17,0(r18)
 40268c8:	18800015 	stw	r2,0(r3)
 40268cc:	003fe706 	br	402686c <__alt_data_end+0xfffe686c>
 40268d0:	01000804 	movi	r4,32
 40268d4:	2089c83a 	sub	r4,r4,r2
 40268d8:	1908983a 	sll	r4,r3,r4
 40268dc:	d9400117 	ldw	r5,4(sp)
 40268e0:	1886d83a 	srl	r3,r3,r2
 40268e4:	2148b03a 	or	r4,r4,r5
 40268e8:	99000515 	stw	r4,20(r19)
 40268ec:	d8c00015 	stw	r3,0(sp)
 40268f0:	003fca06 	br	402681c <__alt_data_end+0xfffe681c>

040268f4 <__ratio>:
 40268f4:	defff904 	addi	sp,sp,-28
 40268f8:	dc400315 	stw	r17,12(sp)
 40268fc:	2823883a 	mov	r17,r5
 4026900:	d9400104 	addi	r5,sp,4
 4026904:	dfc00615 	stw	ra,24(sp)
 4026908:	dcc00515 	stw	r19,20(sp)
 402690c:	dc800415 	stw	r18,16(sp)
 4026910:	2027883a 	mov	r19,r4
 4026914:	dc000215 	stw	r16,8(sp)
 4026918:	402669c0 	call	402669c <__b2d>
 402691c:	d80b883a 	mov	r5,sp
 4026920:	8809883a 	mov	r4,r17
 4026924:	1025883a 	mov	r18,r2
 4026928:	1821883a 	mov	r16,r3
 402692c:	402669c0 	call	402669c <__b2d>
 4026930:	8a000417 	ldw	r8,16(r17)
 4026934:	99000417 	ldw	r4,16(r19)
 4026938:	d9400117 	ldw	r5,4(sp)
 402693c:	2209c83a 	sub	r4,r4,r8
 4026940:	2010917a 	slli	r8,r4,5
 4026944:	d9000017 	ldw	r4,0(sp)
 4026948:	2909c83a 	sub	r4,r5,r4
 402694c:	4109883a 	add	r4,r8,r4
 4026950:	01000e0e 	bge	zero,r4,402698c <__ratio+0x98>
 4026954:	2008953a 	slli	r4,r4,20
 4026958:	2421883a 	add	r16,r4,r16
 402695c:	100d883a 	mov	r6,r2
 4026960:	180f883a 	mov	r7,r3
 4026964:	9009883a 	mov	r4,r18
 4026968:	800b883a 	mov	r5,r16
 402696c:	402ae900 	call	402ae90 <__divdf3>
 4026970:	dfc00617 	ldw	ra,24(sp)
 4026974:	dcc00517 	ldw	r19,20(sp)
 4026978:	dc800417 	ldw	r18,16(sp)
 402697c:	dc400317 	ldw	r17,12(sp)
 4026980:	dc000217 	ldw	r16,8(sp)
 4026984:	dec00704 	addi	sp,sp,28
 4026988:	f800283a 	ret
 402698c:	2008953a 	slli	r4,r4,20
 4026990:	1907c83a 	sub	r3,r3,r4
 4026994:	003ff106 	br	402695c <__alt_data_end+0xfffe695c>

04026998 <_mprec_log10>:
 4026998:	defffe04 	addi	sp,sp,-8
 402699c:	dc000015 	stw	r16,0(sp)
 40269a0:	dfc00115 	stw	ra,4(sp)
 40269a4:	008005c4 	movi	r2,23
 40269a8:	2021883a 	mov	r16,r4
 40269ac:	11000d0e 	bge	r2,r4,40269e4 <_mprec_log10+0x4c>
 40269b0:	0005883a 	mov	r2,zero
 40269b4:	00cffc34 	movhi	r3,16368
 40269b8:	843fffc4 	addi	r16,r16,-1
 40269bc:	000d883a 	mov	r6,zero
 40269c0:	01d00934 	movhi	r7,16420
 40269c4:	1009883a 	mov	r4,r2
 40269c8:	180b883a 	mov	r5,r3
 40269cc:	402b9d00 	call	402b9d0 <__muldf3>
 40269d0:	803ff91e 	bne	r16,zero,40269b8 <__alt_data_end+0xfffe69b8>
 40269d4:	dfc00117 	ldw	ra,4(sp)
 40269d8:	dc000017 	ldw	r16,0(sp)
 40269dc:	dec00204 	addi	sp,sp,8
 40269e0:	f800283a 	ret
 40269e4:	202090fa 	slli	r16,r4,3
 40269e8:	008100f4 	movhi	r2,1027
 40269ec:	1080f304 	addi	r2,r2,972
 40269f0:	1421883a 	add	r16,r2,r16
 40269f4:	80800017 	ldw	r2,0(r16)
 40269f8:	80c00117 	ldw	r3,4(r16)
 40269fc:	dfc00117 	ldw	ra,4(sp)
 4026a00:	dc000017 	ldw	r16,0(sp)
 4026a04:	dec00204 	addi	sp,sp,8
 4026a08:	f800283a 	ret

04026a0c <__copybits>:
 4026a0c:	297fffc4 	addi	r5,r5,-1
 4026a10:	280fd17a 	srai	r7,r5,5
 4026a14:	30c00417 	ldw	r3,16(r6)
 4026a18:	30800504 	addi	r2,r6,20
 4026a1c:	39c00044 	addi	r7,r7,1
 4026a20:	18c7883a 	add	r3,r3,r3
 4026a24:	39cf883a 	add	r7,r7,r7
 4026a28:	18c7883a 	add	r3,r3,r3
 4026a2c:	39cf883a 	add	r7,r7,r7
 4026a30:	10c7883a 	add	r3,r2,r3
 4026a34:	21cf883a 	add	r7,r4,r7
 4026a38:	10c00d2e 	bgeu	r2,r3,4026a70 <__copybits+0x64>
 4026a3c:	200b883a 	mov	r5,r4
 4026a40:	12000017 	ldw	r8,0(r2)
 4026a44:	29400104 	addi	r5,r5,4
 4026a48:	10800104 	addi	r2,r2,4
 4026a4c:	2a3fff15 	stw	r8,-4(r5)
 4026a50:	10fffb36 	bltu	r2,r3,4026a40 <__alt_data_end+0xfffe6a40>
 4026a54:	1985c83a 	sub	r2,r3,r6
 4026a58:	10bffac4 	addi	r2,r2,-21
 4026a5c:	1004d0ba 	srli	r2,r2,2
 4026a60:	10800044 	addi	r2,r2,1
 4026a64:	1085883a 	add	r2,r2,r2
 4026a68:	1085883a 	add	r2,r2,r2
 4026a6c:	2089883a 	add	r4,r4,r2
 4026a70:	21c0032e 	bgeu	r4,r7,4026a80 <__copybits+0x74>
 4026a74:	20000015 	stw	zero,0(r4)
 4026a78:	21000104 	addi	r4,r4,4
 4026a7c:	21fffd36 	bltu	r4,r7,4026a74 <__alt_data_end+0xfffe6a74>
 4026a80:	f800283a 	ret

04026a84 <__any_on>:
 4026a84:	20c00417 	ldw	r3,16(r4)
 4026a88:	2805d17a 	srai	r2,r5,5
 4026a8c:	21000504 	addi	r4,r4,20
 4026a90:	18800d0e 	bge	r3,r2,4026ac8 <__any_on+0x44>
 4026a94:	18c7883a 	add	r3,r3,r3
 4026a98:	18c7883a 	add	r3,r3,r3
 4026a9c:	20c7883a 	add	r3,r4,r3
 4026aa0:	20c0192e 	bgeu	r4,r3,4026b08 <__any_on+0x84>
 4026aa4:	18bfff17 	ldw	r2,-4(r3)
 4026aa8:	18ffff04 	addi	r3,r3,-4
 4026aac:	1000041e 	bne	r2,zero,4026ac0 <__any_on+0x3c>
 4026ab0:	20c0142e 	bgeu	r4,r3,4026b04 <__any_on+0x80>
 4026ab4:	18ffff04 	addi	r3,r3,-4
 4026ab8:	19400017 	ldw	r5,0(r3)
 4026abc:	283ffc26 	beq	r5,zero,4026ab0 <__alt_data_end+0xfffe6ab0>
 4026ac0:	00800044 	movi	r2,1
 4026ac4:	f800283a 	ret
 4026ac8:	10c00a0e 	bge	r2,r3,4026af4 <__any_on+0x70>
 4026acc:	1085883a 	add	r2,r2,r2
 4026ad0:	1085883a 	add	r2,r2,r2
 4026ad4:	294007cc 	andi	r5,r5,31
 4026ad8:	2087883a 	add	r3,r4,r2
 4026adc:	283ff026 	beq	r5,zero,4026aa0 <__alt_data_end+0xfffe6aa0>
 4026ae0:	19800017 	ldw	r6,0(r3)
 4026ae4:	3144d83a 	srl	r2,r6,r5
 4026ae8:	114a983a 	sll	r5,r2,r5
 4026aec:	317ff41e 	bne	r6,r5,4026ac0 <__alt_data_end+0xfffe6ac0>
 4026af0:	003feb06 	br	4026aa0 <__alt_data_end+0xfffe6aa0>
 4026af4:	1085883a 	add	r2,r2,r2
 4026af8:	1085883a 	add	r2,r2,r2
 4026afc:	2087883a 	add	r3,r4,r2
 4026b00:	003fe706 	br	4026aa0 <__alt_data_end+0xfffe6aa0>
 4026b04:	f800283a 	ret
 4026b08:	0005883a 	mov	r2,zero
 4026b0c:	f800283a 	ret

04026b10 <__fpclassifyd>:
 4026b10:	00a00034 	movhi	r2,32768
 4026b14:	10bfffc4 	addi	r2,r2,-1
 4026b18:	2884703a 	and	r2,r5,r2
 4026b1c:	10000726 	beq	r2,zero,4026b3c <__fpclassifyd+0x2c>
 4026b20:	00fffc34 	movhi	r3,65520
 4026b24:	019ff834 	movhi	r6,32736
 4026b28:	28c7883a 	add	r3,r5,r3
 4026b2c:	31bfffc4 	addi	r6,r6,-1
 4026b30:	30c00536 	bltu	r6,r3,4026b48 <__fpclassifyd+0x38>
 4026b34:	00800104 	movi	r2,4
 4026b38:	f800283a 	ret
 4026b3c:	2000021e 	bne	r4,zero,4026b48 <__fpclassifyd+0x38>
 4026b40:	00800084 	movi	r2,2
 4026b44:	f800283a 	ret
 4026b48:	00dffc34 	movhi	r3,32752
 4026b4c:	019ff834 	movhi	r6,32736
 4026b50:	28cb883a 	add	r5,r5,r3
 4026b54:	31bfffc4 	addi	r6,r6,-1
 4026b58:	317ff62e 	bgeu	r6,r5,4026b34 <__alt_data_end+0xfffe6b34>
 4026b5c:	01400434 	movhi	r5,16
 4026b60:	297fffc4 	addi	r5,r5,-1
 4026b64:	28800236 	bltu	r5,r2,4026b70 <__fpclassifyd+0x60>
 4026b68:	008000c4 	movi	r2,3
 4026b6c:	f800283a 	ret
 4026b70:	10c00226 	beq	r2,r3,4026b7c <__fpclassifyd+0x6c>
 4026b74:	0005883a 	mov	r2,zero
 4026b78:	f800283a 	ret
 4026b7c:	2005003a 	cmpeq	r2,r4,zero
 4026b80:	f800283a 	ret

04026b84 <_sbrk_r>:
 4026b84:	defffd04 	addi	sp,sp,-12
 4026b88:	dc000015 	stw	r16,0(sp)
 4026b8c:	040100f4 	movhi	r16,1027
 4026b90:	dc400115 	stw	r17,4(sp)
 4026b94:	840f9204 	addi	r16,r16,15944
 4026b98:	2023883a 	mov	r17,r4
 4026b9c:	2809883a 	mov	r4,r5
 4026ba0:	dfc00215 	stw	ra,8(sp)
 4026ba4:	80000015 	stw	zero,0(r16)
 4026ba8:	402d3ac0 	call	402d3ac <sbrk>
 4026bac:	00ffffc4 	movi	r3,-1
 4026bb0:	10c00526 	beq	r2,r3,4026bc8 <_sbrk_r+0x44>
 4026bb4:	dfc00217 	ldw	ra,8(sp)
 4026bb8:	dc400117 	ldw	r17,4(sp)
 4026bbc:	dc000017 	ldw	r16,0(sp)
 4026bc0:	dec00304 	addi	sp,sp,12
 4026bc4:	f800283a 	ret
 4026bc8:	80c00017 	ldw	r3,0(r16)
 4026bcc:	183ff926 	beq	r3,zero,4026bb4 <__alt_data_end+0xfffe6bb4>
 4026bd0:	88c00015 	stw	r3,0(r17)
 4026bd4:	003ff706 	br	4026bb4 <__alt_data_end+0xfffe6bb4>

04026bd8 <__sread>:
 4026bd8:	defffe04 	addi	sp,sp,-8
 4026bdc:	dc000015 	stw	r16,0(sp)
 4026be0:	2821883a 	mov	r16,r5
 4026be4:	2940038f 	ldh	r5,14(r5)
 4026be8:	dfc00115 	stw	ra,4(sp)
 4026bec:	402907c0 	call	402907c <_read_r>
 4026bf0:	10000716 	blt	r2,zero,4026c10 <__sread+0x38>
 4026bf4:	80c01417 	ldw	r3,80(r16)
 4026bf8:	1887883a 	add	r3,r3,r2
 4026bfc:	80c01415 	stw	r3,80(r16)
 4026c00:	dfc00117 	ldw	ra,4(sp)
 4026c04:	dc000017 	ldw	r16,0(sp)
 4026c08:	dec00204 	addi	sp,sp,8
 4026c0c:	f800283a 	ret
 4026c10:	80c0030b 	ldhu	r3,12(r16)
 4026c14:	18fbffcc 	andi	r3,r3,61439
 4026c18:	80c0030d 	sth	r3,12(r16)
 4026c1c:	dfc00117 	ldw	ra,4(sp)
 4026c20:	dc000017 	ldw	r16,0(sp)
 4026c24:	dec00204 	addi	sp,sp,8
 4026c28:	f800283a 	ret

04026c2c <__seofread>:
 4026c2c:	0005883a 	mov	r2,zero
 4026c30:	f800283a 	ret

04026c34 <__swrite>:
 4026c34:	2880030b 	ldhu	r2,12(r5)
 4026c38:	defffb04 	addi	sp,sp,-20
 4026c3c:	dcc00315 	stw	r19,12(sp)
 4026c40:	dc800215 	stw	r18,8(sp)
 4026c44:	dc400115 	stw	r17,4(sp)
 4026c48:	dc000015 	stw	r16,0(sp)
 4026c4c:	dfc00415 	stw	ra,16(sp)
 4026c50:	10c0400c 	andi	r3,r2,256
 4026c54:	2821883a 	mov	r16,r5
 4026c58:	2023883a 	mov	r17,r4
 4026c5c:	3025883a 	mov	r18,r6
 4026c60:	3827883a 	mov	r19,r7
 4026c64:	18000526 	beq	r3,zero,4026c7c <__swrite+0x48>
 4026c68:	2940038f 	ldh	r5,14(r5)
 4026c6c:	01c00084 	movi	r7,2
 4026c70:	000d883a 	mov	r6,zero
 4026c74:	4028ec00 	call	4028ec0 <_lseek_r>
 4026c78:	8080030b 	ldhu	r2,12(r16)
 4026c7c:	8140038f 	ldh	r5,14(r16)
 4026c80:	10bbffcc 	andi	r2,r2,61439
 4026c84:	980f883a 	mov	r7,r19
 4026c88:	900d883a 	mov	r6,r18
 4026c8c:	8809883a 	mov	r4,r17
 4026c90:	8080030d 	sth	r2,12(r16)
 4026c94:	dfc00417 	ldw	ra,16(sp)
 4026c98:	dcc00317 	ldw	r19,12(sp)
 4026c9c:	dc800217 	ldw	r18,8(sp)
 4026ca0:	dc400117 	ldw	r17,4(sp)
 4026ca4:	dc000017 	ldw	r16,0(sp)
 4026ca8:	dec00504 	addi	sp,sp,20
 4026cac:	40284d01 	jmpi	40284d0 <_write_r>

04026cb0 <__sseek>:
 4026cb0:	defffe04 	addi	sp,sp,-8
 4026cb4:	dc000015 	stw	r16,0(sp)
 4026cb8:	2821883a 	mov	r16,r5
 4026cbc:	2940038f 	ldh	r5,14(r5)
 4026cc0:	dfc00115 	stw	ra,4(sp)
 4026cc4:	4028ec00 	call	4028ec0 <_lseek_r>
 4026cc8:	00ffffc4 	movi	r3,-1
 4026ccc:	10c00826 	beq	r2,r3,4026cf0 <__sseek+0x40>
 4026cd0:	80c0030b 	ldhu	r3,12(r16)
 4026cd4:	80801415 	stw	r2,80(r16)
 4026cd8:	18c40014 	ori	r3,r3,4096
 4026cdc:	80c0030d 	sth	r3,12(r16)
 4026ce0:	dfc00117 	ldw	ra,4(sp)
 4026ce4:	dc000017 	ldw	r16,0(sp)
 4026ce8:	dec00204 	addi	sp,sp,8
 4026cec:	f800283a 	ret
 4026cf0:	80c0030b 	ldhu	r3,12(r16)
 4026cf4:	18fbffcc 	andi	r3,r3,61439
 4026cf8:	80c0030d 	sth	r3,12(r16)
 4026cfc:	dfc00117 	ldw	ra,4(sp)
 4026d00:	dc000017 	ldw	r16,0(sp)
 4026d04:	dec00204 	addi	sp,sp,8
 4026d08:	f800283a 	ret

04026d0c <__sclose>:
 4026d0c:	2940038f 	ldh	r5,14(r5)
 4026d10:	40285301 	jmpi	4028530 <_close_r>

04026d14 <strcmp>:
 4026d14:	2144b03a 	or	r2,r4,r5
 4026d18:	108000cc 	andi	r2,r2,3
 4026d1c:	1000171e 	bne	r2,zero,4026d7c <strcmp+0x68>
 4026d20:	20800017 	ldw	r2,0(r4)
 4026d24:	28c00017 	ldw	r3,0(r5)
 4026d28:	10c0141e 	bne	r2,r3,4026d7c <strcmp+0x68>
 4026d2c:	027fbff4 	movhi	r9,65279
 4026d30:	4a7fbfc4 	addi	r9,r9,-257
 4026d34:	0086303a 	nor	r3,zero,r2
 4026d38:	02202074 	movhi	r8,32897
 4026d3c:	1245883a 	add	r2,r2,r9
 4026d40:	42202004 	addi	r8,r8,-32640
 4026d44:	10c4703a 	and	r2,r2,r3
 4026d48:	1204703a 	and	r2,r2,r8
 4026d4c:	10000226 	beq	r2,zero,4026d58 <strcmp+0x44>
 4026d50:	00002306 	br	4026de0 <strcmp+0xcc>
 4026d54:	1000221e 	bne	r2,zero,4026de0 <strcmp+0xcc>
 4026d58:	21000104 	addi	r4,r4,4
 4026d5c:	20c00017 	ldw	r3,0(r4)
 4026d60:	29400104 	addi	r5,r5,4
 4026d64:	29800017 	ldw	r6,0(r5)
 4026d68:	1a4f883a 	add	r7,r3,r9
 4026d6c:	00c4303a 	nor	r2,zero,r3
 4026d70:	3884703a 	and	r2,r7,r2
 4026d74:	1204703a 	and	r2,r2,r8
 4026d78:	19bff626 	beq	r3,r6,4026d54 <__alt_data_end+0xfffe6d54>
 4026d7c:	20800003 	ldbu	r2,0(r4)
 4026d80:	10c03fcc 	andi	r3,r2,255
 4026d84:	18c0201c 	xori	r3,r3,128
 4026d88:	18ffe004 	addi	r3,r3,-128
 4026d8c:	18000c26 	beq	r3,zero,4026dc0 <strcmp+0xac>
 4026d90:	29800007 	ldb	r6,0(r5)
 4026d94:	19800326 	beq	r3,r6,4026da4 <strcmp+0x90>
 4026d98:	00001306 	br	4026de8 <strcmp+0xd4>
 4026d9c:	29800007 	ldb	r6,0(r5)
 4026da0:	11800b1e 	bne	r2,r6,4026dd0 <strcmp+0xbc>
 4026da4:	21000044 	addi	r4,r4,1
 4026da8:	20c00003 	ldbu	r3,0(r4)
 4026dac:	29400044 	addi	r5,r5,1
 4026db0:	18803fcc 	andi	r2,r3,255
 4026db4:	1080201c 	xori	r2,r2,128
 4026db8:	10bfe004 	addi	r2,r2,-128
 4026dbc:	103ff71e 	bne	r2,zero,4026d9c <__alt_data_end+0xfffe6d9c>
 4026dc0:	0007883a 	mov	r3,zero
 4026dc4:	28800003 	ldbu	r2,0(r5)
 4026dc8:	1885c83a 	sub	r2,r3,r2
 4026dcc:	f800283a 	ret
 4026dd0:	28800003 	ldbu	r2,0(r5)
 4026dd4:	18c03fcc 	andi	r3,r3,255
 4026dd8:	1885c83a 	sub	r2,r3,r2
 4026ddc:	f800283a 	ret
 4026de0:	0005883a 	mov	r2,zero
 4026de4:	f800283a 	ret
 4026de8:	10c03fcc 	andi	r3,r2,255
 4026dec:	003ff506 	br	4026dc4 <__alt_data_end+0xfffe6dc4>

04026df0 <strlen>:
 4026df0:	208000cc 	andi	r2,r4,3
 4026df4:	10002026 	beq	r2,zero,4026e78 <strlen+0x88>
 4026df8:	20800007 	ldb	r2,0(r4)
 4026dfc:	10002026 	beq	r2,zero,4026e80 <strlen+0x90>
 4026e00:	2005883a 	mov	r2,r4
 4026e04:	00000206 	br	4026e10 <strlen+0x20>
 4026e08:	10c00007 	ldb	r3,0(r2)
 4026e0c:	18001826 	beq	r3,zero,4026e70 <strlen+0x80>
 4026e10:	10800044 	addi	r2,r2,1
 4026e14:	10c000cc 	andi	r3,r2,3
 4026e18:	183ffb1e 	bne	r3,zero,4026e08 <__alt_data_end+0xfffe6e08>
 4026e1c:	10c00017 	ldw	r3,0(r2)
 4026e20:	01ffbff4 	movhi	r7,65279
 4026e24:	39ffbfc4 	addi	r7,r7,-257
 4026e28:	00ca303a 	nor	r5,zero,r3
 4026e2c:	01a02074 	movhi	r6,32897
 4026e30:	19c7883a 	add	r3,r3,r7
 4026e34:	31a02004 	addi	r6,r6,-32640
 4026e38:	1946703a 	and	r3,r3,r5
 4026e3c:	1986703a 	and	r3,r3,r6
 4026e40:	1800091e 	bne	r3,zero,4026e68 <strlen+0x78>
 4026e44:	10800104 	addi	r2,r2,4
 4026e48:	10c00017 	ldw	r3,0(r2)
 4026e4c:	19cb883a 	add	r5,r3,r7
 4026e50:	00c6303a 	nor	r3,zero,r3
 4026e54:	28c6703a 	and	r3,r5,r3
 4026e58:	1986703a 	and	r3,r3,r6
 4026e5c:	183ff926 	beq	r3,zero,4026e44 <__alt_data_end+0xfffe6e44>
 4026e60:	00000106 	br	4026e68 <strlen+0x78>
 4026e64:	10800044 	addi	r2,r2,1
 4026e68:	10c00007 	ldb	r3,0(r2)
 4026e6c:	183ffd1e 	bne	r3,zero,4026e64 <__alt_data_end+0xfffe6e64>
 4026e70:	1105c83a 	sub	r2,r2,r4
 4026e74:	f800283a 	ret
 4026e78:	2005883a 	mov	r2,r4
 4026e7c:	003fe706 	br	4026e1c <__alt_data_end+0xfffe6e1c>
 4026e80:	0005883a 	mov	r2,zero
 4026e84:	f800283a 	ret

04026e88 <__sprint_r.part.0>:
 4026e88:	28801917 	ldw	r2,100(r5)
 4026e8c:	defff604 	addi	sp,sp,-40
 4026e90:	dd400515 	stw	r21,20(sp)
 4026e94:	dfc00915 	stw	ra,36(sp)
 4026e98:	df000815 	stw	fp,32(sp)
 4026e9c:	ddc00715 	stw	r23,28(sp)
 4026ea0:	dd800615 	stw	r22,24(sp)
 4026ea4:	dd000415 	stw	r20,16(sp)
 4026ea8:	dcc00315 	stw	r19,12(sp)
 4026eac:	dc800215 	stw	r18,8(sp)
 4026eb0:	dc400115 	stw	r17,4(sp)
 4026eb4:	dc000015 	stw	r16,0(sp)
 4026eb8:	1088000c 	andi	r2,r2,8192
 4026ebc:	302b883a 	mov	r21,r6
 4026ec0:	10002e26 	beq	r2,zero,4026f7c <__sprint_r.part.0+0xf4>
 4026ec4:	30800217 	ldw	r2,8(r6)
 4026ec8:	35800017 	ldw	r22,0(r6)
 4026ecc:	10002926 	beq	r2,zero,4026f74 <__sprint_r.part.0+0xec>
 4026ed0:	2827883a 	mov	r19,r5
 4026ed4:	2029883a 	mov	r20,r4
 4026ed8:	b5c00104 	addi	r23,r22,4
 4026edc:	04bfffc4 	movi	r18,-1
 4026ee0:	bc400017 	ldw	r17,0(r23)
 4026ee4:	b4000017 	ldw	r16,0(r22)
 4026ee8:	0039883a 	mov	fp,zero
 4026eec:	8822d0ba 	srli	r17,r17,2
 4026ef0:	8800031e 	bne	r17,zero,4026f00 <__sprint_r.part.0+0x78>
 4026ef4:	00001806 	br	4026f58 <__sprint_r.part.0+0xd0>
 4026ef8:	84000104 	addi	r16,r16,4
 4026efc:	8f001526 	beq	r17,fp,4026f54 <__sprint_r.part.0+0xcc>
 4026f00:	81400017 	ldw	r5,0(r16)
 4026f04:	980d883a 	mov	r6,r19
 4026f08:	a009883a 	mov	r4,r20
 4026f0c:	40288b00 	call	40288b0 <_fputwc_r>
 4026f10:	e7000044 	addi	fp,fp,1
 4026f14:	14bff81e 	bne	r2,r18,4026ef8 <__alt_data_end+0xfffe6ef8>
 4026f18:	9005883a 	mov	r2,r18
 4026f1c:	a8000215 	stw	zero,8(r21)
 4026f20:	a8000115 	stw	zero,4(r21)
 4026f24:	dfc00917 	ldw	ra,36(sp)
 4026f28:	df000817 	ldw	fp,32(sp)
 4026f2c:	ddc00717 	ldw	r23,28(sp)
 4026f30:	dd800617 	ldw	r22,24(sp)
 4026f34:	dd400517 	ldw	r21,20(sp)
 4026f38:	dd000417 	ldw	r20,16(sp)
 4026f3c:	dcc00317 	ldw	r19,12(sp)
 4026f40:	dc800217 	ldw	r18,8(sp)
 4026f44:	dc400117 	ldw	r17,4(sp)
 4026f48:	dc000017 	ldw	r16,0(sp)
 4026f4c:	dec00a04 	addi	sp,sp,40
 4026f50:	f800283a 	ret
 4026f54:	a8800217 	ldw	r2,8(r21)
 4026f58:	8c63883a 	add	r17,r17,r17
 4026f5c:	8c63883a 	add	r17,r17,r17
 4026f60:	1445c83a 	sub	r2,r2,r17
 4026f64:	a8800215 	stw	r2,8(r21)
 4026f68:	b5800204 	addi	r22,r22,8
 4026f6c:	bdc00204 	addi	r23,r23,8
 4026f70:	103fdb1e 	bne	r2,zero,4026ee0 <__alt_data_end+0xfffe6ee0>
 4026f74:	0005883a 	mov	r2,zero
 4026f78:	003fe806 	br	4026f1c <__alt_data_end+0xfffe6f1c>
 4026f7c:	40289b00 	call	40289b0 <__sfvwrite_r>
 4026f80:	003fe606 	br	4026f1c <__alt_data_end+0xfffe6f1c>

04026f84 <__sprint_r>:
 4026f84:	30c00217 	ldw	r3,8(r6)
 4026f88:	18000126 	beq	r3,zero,4026f90 <__sprint_r+0xc>
 4026f8c:	4026e881 	jmpi	4026e88 <__sprint_r.part.0>
 4026f90:	30000115 	stw	zero,4(r6)
 4026f94:	0005883a 	mov	r2,zero
 4026f98:	f800283a 	ret

04026f9c <___vfiprintf_internal_r>:
 4026f9c:	deffc904 	addi	sp,sp,-220
 4026fa0:	df003515 	stw	fp,212(sp)
 4026fa4:	dd003115 	stw	r20,196(sp)
 4026fa8:	dfc03615 	stw	ra,216(sp)
 4026fac:	ddc03415 	stw	r23,208(sp)
 4026fb0:	dd803315 	stw	r22,204(sp)
 4026fb4:	dd403215 	stw	r21,200(sp)
 4026fb8:	dcc03015 	stw	r19,192(sp)
 4026fbc:	dc802f15 	stw	r18,188(sp)
 4026fc0:	dc402e15 	stw	r17,184(sp)
 4026fc4:	dc002d15 	stw	r16,180(sp)
 4026fc8:	d9002015 	stw	r4,128(sp)
 4026fcc:	d9c02215 	stw	r7,136(sp)
 4026fd0:	2829883a 	mov	r20,r5
 4026fd4:	3039883a 	mov	fp,r6
 4026fd8:	20000226 	beq	r4,zero,4026fe4 <___vfiprintf_internal_r+0x48>
 4026fdc:	20800e17 	ldw	r2,56(r4)
 4026fe0:	1000cf26 	beq	r2,zero,4027320 <___vfiprintf_internal_r+0x384>
 4026fe4:	a080030b 	ldhu	r2,12(r20)
 4026fe8:	10c8000c 	andi	r3,r2,8192
 4026fec:	1800061e 	bne	r3,zero,4027008 <___vfiprintf_internal_r+0x6c>
 4026ff0:	a1001917 	ldw	r4,100(r20)
 4026ff4:	00f7ffc4 	movi	r3,-8193
 4026ff8:	10880014 	ori	r2,r2,8192
 4026ffc:	20c6703a 	and	r3,r4,r3
 4027000:	a080030d 	sth	r2,12(r20)
 4027004:	a0c01915 	stw	r3,100(r20)
 4027008:	10c0020c 	andi	r3,r2,8
 402700c:	1800a926 	beq	r3,zero,40272b4 <___vfiprintf_internal_r+0x318>
 4027010:	a0c00417 	ldw	r3,16(r20)
 4027014:	1800a726 	beq	r3,zero,40272b4 <___vfiprintf_internal_r+0x318>
 4027018:	1080068c 	andi	r2,r2,26
 402701c:	00c00284 	movi	r3,10
 4027020:	10c0ac26 	beq	r2,r3,40272d4 <___vfiprintf_internal_r+0x338>
 4027024:	da801a04 	addi	r10,sp,104
 4027028:	da801e15 	stw	r10,120(sp)
 402702c:	d8801e17 	ldw	r2,120(sp)
 4027030:	da8019c4 	addi	r10,sp,103
 4027034:	058100f4 	movhi	r22,1027
 4027038:	05c100f4 	movhi	r23,1027
 402703c:	da801f15 	stw	r10,124(sp)
 4027040:	1295c83a 	sub	r10,r2,r10
 4027044:	b5812904 	addi	r22,r22,1188
 4027048:	bdc12504 	addi	r23,r23,1172
 402704c:	dec01a15 	stw	sp,104(sp)
 4027050:	d8001c15 	stw	zero,112(sp)
 4027054:	d8001b15 	stw	zero,108(sp)
 4027058:	d8002615 	stw	zero,152(sp)
 402705c:	d8002315 	stw	zero,140(sp)
 4027060:	da802715 	stw	r10,156(sp)
 4027064:	d811883a 	mov	r8,sp
 4027068:	dd002115 	stw	r20,132(sp)
 402706c:	e021883a 	mov	r16,fp
 4027070:	80800007 	ldb	r2,0(r16)
 4027074:	1003ea26 	beq	r2,zero,4028020 <___vfiprintf_internal_r+0x1084>
 4027078:	00c00944 	movi	r3,37
 402707c:	8025883a 	mov	r18,r16
 4027080:	10c0021e 	bne	r2,r3,402708c <___vfiprintf_internal_r+0xf0>
 4027084:	00001606 	br	40270e0 <___vfiprintf_internal_r+0x144>
 4027088:	10c00326 	beq	r2,r3,4027098 <___vfiprintf_internal_r+0xfc>
 402708c:	94800044 	addi	r18,r18,1
 4027090:	90800007 	ldb	r2,0(r18)
 4027094:	103ffc1e 	bne	r2,zero,4027088 <__alt_data_end+0xfffe7088>
 4027098:	9423c83a 	sub	r17,r18,r16
 402709c:	88001026 	beq	r17,zero,40270e0 <___vfiprintf_internal_r+0x144>
 40270a0:	d8c01c17 	ldw	r3,112(sp)
 40270a4:	d8801b17 	ldw	r2,108(sp)
 40270a8:	44000015 	stw	r16,0(r8)
 40270ac:	88c7883a 	add	r3,r17,r3
 40270b0:	10800044 	addi	r2,r2,1
 40270b4:	44400115 	stw	r17,4(r8)
 40270b8:	d8c01c15 	stw	r3,112(sp)
 40270bc:	d8801b15 	stw	r2,108(sp)
 40270c0:	010001c4 	movi	r4,7
 40270c4:	2080760e 	bge	r4,r2,40272a0 <___vfiprintf_internal_r+0x304>
 40270c8:	1803821e 	bne	r3,zero,4027ed4 <___vfiprintf_internal_r+0xf38>
 40270cc:	da802317 	ldw	r10,140(sp)
 40270d0:	d8001b15 	stw	zero,108(sp)
 40270d4:	d811883a 	mov	r8,sp
 40270d8:	5455883a 	add	r10,r10,r17
 40270dc:	da802315 	stw	r10,140(sp)
 40270e0:	90800007 	ldb	r2,0(r18)
 40270e4:	10044626 	beq	r2,zero,4028200 <___vfiprintf_internal_r+0x1264>
 40270e8:	90c00047 	ldb	r3,1(r18)
 40270ec:	94000044 	addi	r16,r18,1
 40270f0:	d8001d85 	stb	zero,118(sp)
 40270f4:	0009883a 	mov	r4,zero
 40270f8:	000f883a 	mov	r7,zero
 40270fc:	027fffc4 	movi	r9,-1
 4027100:	0023883a 	mov	r17,zero
 4027104:	0029883a 	mov	r20,zero
 4027108:	01401604 	movi	r5,88
 402710c:	01800244 	movi	r6,9
 4027110:	03400a84 	movi	r13,42
 4027114:	03001b04 	movi	r12,108
 4027118:	84000044 	addi	r16,r16,1
 402711c:	18bff804 	addi	r2,r3,-32
 4027120:	28827336 	bltu	r5,r2,4027af0 <___vfiprintf_internal_r+0xb54>
 4027124:	100490ba 	slli	r2,r2,2
 4027128:	028100b4 	movhi	r10,1026
 402712c:	529c4f04 	addi	r10,r10,28988
 4027130:	1285883a 	add	r2,r2,r10
 4027134:	10800017 	ldw	r2,0(r2)
 4027138:	1000683a 	jmp	r2
 402713c:	04027824 	muli	r16,zero,2528
 4027140:	04027af0 	cmpltui	r16,zero,2539
 4027144:	04027af0 	cmpltui	r16,zero,2539
 4027148:	04027844 	movi	r16,2529
 402714c:	04027af0 	cmpltui	r16,zero,2539
 4027150:	04027af0 	cmpltui	r16,zero,2539
 4027154:	04027af0 	cmpltui	r16,zero,2539
 4027158:	04027af0 	cmpltui	r16,zero,2539
 402715c:	04027af0 	cmpltui	r16,zero,2539
 4027160:	04027af0 	cmpltui	r16,zero,2539
 4027164:	04027a2c 	andhi	r16,zero,2536
 4027168:	04027a48 	cmpgei	r16,zero,2537
 402716c:	04027af0 	cmpltui	r16,zero,2539
 4027170:	04027330 	cmpltui	r16,zero,2508
 4027174:	04027a58 	cmpnei	r16,zero,2537
 4027178:	04027af0 	cmpltui	r16,zero,2539
 402717c:	04027850 	cmplti	r16,zero,2529
 4027180:	0402785c 	xori	r16,zero,2529
 4027184:	0402785c 	xori	r16,zero,2529
 4027188:	0402785c 	xori	r16,zero,2529
 402718c:	0402785c 	xori	r16,zero,2529
 4027190:	0402785c 	xori	r16,zero,2529
 4027194:	0402785c 	xori	r16,zero,2529
 4027198:	0402785c 	xori	r16,zero,2529
 402719c:	0402785c 	xori	r16,zero,2529
 40271a0:	0402785c 	xori	r16,zero,2529
 40271a4:	04027af0 	cmpltui	r16,zero,2539
 40271a8:	04027af0 	cmpltui	r16,zero,2539
 40271ac:	04027af0 	cmpltui	r16,zero,2539
 40271b0:	04027af0 	cmpltui	r16,zero,2539
 40271b4:	04027af0 	cmpltui	r16,zero,2539
 40271b8:	04027af0 	cmpltui	r16,zero,2539
 40271bc:	04027af0 	cmpltui	r16,zero,2539
 40271c0:	04027af0 	cmpltui	r16,zero,2539
 40271c4:	04027af0 	cmpltui	r16,zero,2539
 40271c8:	04027af0 	cmpltui	r16,zero,2539
 40271cc:	04027888 	cmpgei	r16,zero,2530
 40271d0:	04027af0 	cmpltui	r16,zero,2539
 40271d4:	04027af0 	cmpltui	r16,zero,2539
 40271d8:	04027af0 	cmpltui	r16,zero,2539
 40271dc:	04027af0 	cmpltui	r16,zero,2539
 40271e0:	04027af0 	cmpltui	r16,zero,2539
 40271e4:	04027af0 	cmpltui	r16,zero,2539
 40271e8:	04027af0 	cmpltui	r16,zero,2539
 40271ec:	04027af0 	cmpltui	r16,zero,2539
 40271f0:	04027af0 	cmpltui	r16,zero,2539
 40271f4:	04027af0 	cmpltui	r16,zero,2539
 40271f8:	040278c0 	call	40278c <__alt_mem_sdram_controller_2+0x40278c>
 40271fc:	04027af0 	cmpltui	r16,zero,2539
 4027200:	04027af0 	cmpltui	r16,zero,2539
 4027204:	04027af0 	cmpltui	r16,zero,2539
 4027208:	04027af0 	cmpltui	r16,zero,2539
 402720c:	04027af0 	cmpltui	r16,zero,2539
 4027210:	04027918 	cmpnei	r16,zero,2532
 4027214:	04027af0 	cmpltui	r16,zero,2539
 4027218:	04027af0 	cmpltui	r16,zero,2539
 402721c:	04027988 	cmpgei	r16,zero,2534
 4027220:	04027af0 	cmpltui	r16,zero,2539
 4027224:	04027af0 	cmpltui	r16,zero,2539
 4027228:	04027af0 	cmpltui	r16,zero,2539
 402722c:	04027af0 	cmpltui	r16,zero,2539
 4027230:	04027af0 	cmpltui	r16,zero,2539
 4027234:	04027af0 	cmpltui	r16,zero,2539
 4027238:	04027af0 	cmpltui	r16,zero,2539
 402723c:	04027af0 	cmpltui	r16,zero,2539
 4027240:	04027af0 	cmpltui	r16,zero,2539
 4027244:	04027af0 	cmpltui	r16,zero,2539
 4027248:	04027734 	movhi	r16,2524
 402724c:	04027760 	cmpeqi	r16,zero,2525
 4027250:	04027af0 	cmpltui	r16,zero,2539
 4027254:	04027af0 	cmpltui	r16,zero,2539
 4027258:	04027af0 	cmpltui	r16,zero,2539
 402725c:	04027a98 	cmpnei	r16,zero,2538
 4027260:	04027760 	cmpeqi	r16,zero,2525
 4027264:	04027af0 	cmpltui	r16,zero,2539
 4027268:	04027af0 	cmpltui	r16,zero,2539
 402726c:	040275f4 	movhi	r16,2519
 4027270:	04027af0 	cmpltui	r16,zero,2539
 4027274:	04027604 	movi	r16,2520
 4027278:	04027640 	call	402764 <__alt_mem_sdram_controller_2+0x402764>
 402727c:	0402733c 	xorhi	r16,zero,2508
 4027280:	040275e8 	cmpgeui	r16,zero,2519
 4027284:	04027af0 	cmpltui	r16,zero,2539
 4027288:	040279c4 	movi	r16,2535
 402728c:	04027af0 	cmpltui	r16,zero,2539
 4027290:	04027a1c 	xori	r16,zero,2536
 4027294:	04027af0 	cmpltui	r16,zero,2539
 4027298:	04027af0 	cmpltui	r16,zero,2539
 402729c:	040276e0 	cmpeqi	r16,zero,2523
 40272a0:	42000204 	addi	r8,r8,8
 40272a4:	da802317 	ldw	r10,140(sp)
 40272a8:	5455883a 	add	r10,r10,r17
 40272ac:	da802315 	stw	r10,140(sp)
 40272b0:	003f8b06 	br	40270e0 <__alt_data_end+0xfffe70e0>
 40272b4:	d9002017 	ldw	r4,128(sp)
 40272b8:	a00b883a 	mov	r5,r20
 40272bc:	402273c0 	call	402273c <__swsetup_r>
 40272c0:	1003b11e 	bne	r2,zero,4028188 <___vfiprintf_internal_r+0x11ec>
 40272c4:	a080030b 	ldhu	r2,12(r20)
 40272c8:	00c00284 	movi	r3,10
 40272cc:	1080068c 	andi	r2,r2,26
 40272d0:	10ff541e 	bne	r2,r3,4027024 <__alt_data_end+0xfffe7024>
 40272d4:	a080038f 	ldh	r2,14(r20)
 40272d8:	103f5216 	blt	r2,zero,4027024 <__alt_data_end+0xfffe7024>
 40272dc:	d9c02217 	ldw	r7,136(sp)
 40272e0:	d9002017 	ldw	r4,128(sp)
 40272e4:	e00d883a 	mov	r6,fp
 40272e8:	a00b883a 	mov	r5,r20
 40272ec:	40284140 	call	4028414 <__sbprintf>
 40272f0:	dfc03617 	ldw	ra,216(sp)
 40272f4:	df003517 	ldw	fp,212(sp)
 40272f8:	ddc03417 	ldw	r23,208(sp)
 40272fc:	dd803317 	ldw	r22,204(sp)
 4027300:	dd403217 	ldw	r21,200(sp)
 4027304:	dd003117 	ldw	r20,196(sp)
 4027308:	dcc03017 	ldw	r19,192(sp)
 402730c:	dc802f17 	ldw	r18,188(sp)
 4027310:	dc402e17 	ldw	r17,184(sp)
 4027314:	dc002d17 	ldw	r16,180(sp)
 4027318:	dec03704 	addi	sp,sp,220
 402731c:	f800283a 	ret
 4027320:	40247100 	call	4024710 <__sinit>
 4027324:	003f2f06 	br	4026fe4 <__alt_data_end+0xfffe6fe4>
 4027328:	0463c83a 	sub	r17,zero,r17
 402732c:	d8802215 	stw	r2,136(sp)
 4027330:	a5000114 	ori	r20,r20,4
 4027334:	80c00007 	ldb	r3,0(r16)
 4027338:	003f7706 	br	4027118 <__alt_data_end+0xfffe7118>
 402733c:	00800c04 	movi	r2,48
 4027340:	da802217 	ldw	r10,136(sp)
 4027344:	d8801d05 	stb	r2,116(sp)
 4027348:	00801e04 	movi	r2,120
 402734c:	d8801d45 	stb	r2,117(sp)
 4027350:	d8001d85 	stb	zero,118(sp)
 4027354:	50c00104 	addi	r3,r10,4
 4027358:	54800017 	ldw	r18,0(r10)
 402735c:	0027883a 	mov	r19,zero
 4027360:	a0800094 	ori	r2,r20,2
 4027364:	48030b16 	blt	r9,zero,4027f94 <___vfiprintf_internal_r+0xff8>
 4027368:	00bfdfc4 	movi	r2,-129
 402736c:	a096703a 	and	r11,r20,r2
 4027370:	d8c02215 	stw	r3,136(sp)
 4027374:	5d000094 	ori	r20,r11,2
 4027378:	90032b1e 	bne	r18,zero,4028028 <___vfiprintf_internal_r+0x108c>
 402737c:	008100f4 	movhi	r2,1027
 4027380:	1080c404 	addi	r2,r2,784
 4027384:	d8802615 	stw	r2,152(sp)
 4027388:	0039883a 	mov	fp,zero
 402738c:	48017b1e 	bne	r9,zero,402797c <___vfiprintf_internal_r+0x9e0>
 4027390:	0013883a 	mov	r9,zero
 4027394:	0027883a 	mov	r19,zero
 4027398:	dd401a04 	addi	r21,sp,104
 402739c:	4825883a 	mov	r18,r9
 40273a0:	4cc0010e 	bge	r9,r19,40273a8 <___vfiprintf_internal_r+0x40c>
 40273a4:	9825883a 	mov	r18,r19
 40273a8:	e7003fcc 	andi	fp,fp,255
 40273ac:	e700201c 	xori	fp,fp,128
 40273b0:	e73fe004 	addi	fp,fp,-128
 40273b4:	e0000126 	beq	fp,zero,40273bc <___vfiprintf_internal_r+0x420>
 40273b8:	94800044 	addi	r18,r18,1
 40273bc:	a380008c 	andi	r14,r20,2
 40273c0:	70000126 	beq	r14,zero,40273c8 <___vfiprintf_internal_r+0x42c>
 40273c4:	94800084 	addi	r18,r18,2
 40273c8:	a700210c 	andi	fp,r20,132
 40273cc:	e001df1e 	bne	fp,zero,4027b4c <___vfiprintf_internal_r+0xbb0>
 40273d0:	8c87c83a 	sub	r3,r17,r18
 40273d4:	00c1dd0e 	bge	zero,r3,4027b4c <___vfiprintf_internal_r+0xbb0>
 40273d8:	01c00404 	movi	r7,16
 40273dc:	d8801c17 	ldw	r2,112(sp)
 40273e0:	38c3ad0e 	bge	r7,r3,4028298 <___vfiprintf_internal_r+0x12fc>
 40273e4:	028100f4 	movhi	r10,1027
 40273e8:	52812904 	addi	r10,r10,1188
 40273ec:	dc002915 	stw	r16,164(sp)
 40273f0:	d9801b17 	ldw	r6,108(sp)
 40273f4:	da802415 	stw	r10,144(sp)
 40273f8:	03c001c4 	movi	r15,7
 40273fc:	da402515 	stw	r9,148(sp)
 4027400:	db802815 	stw	r14,160(sp)
 4027404:	1821883a 	mov	r16,r3
 4027408:	00000506 	br	4027420 <___vfiprintf_internal_r+0x484>
 402740c:	31400084 	addi	r5,r6,2
 4027410:	42000204 	addi	r8,r8,8
 4027414:	200d883a 	mov	r6,r4
 4027418:	843ffc04 	addi	r16,r16,-16
 402741c:	3c000d0e 	bge	r7,r16,4027454 <___vfiprintf_internal_r+0x4b8>
 4027420:	10800404 	addi	r2,r2,16
 4027424:	31000044 	addi	r4,r6,1
 4027428:	45800015 	stw	r22,0(r8)
 402742c:	41c00115 	stw	r7,4(r8)
 4027430:	d8801c15 	stw	r2,112(sp)
 4027434:	d9001b15 	stw	r4,108(sp)
 4027438:	793ff40e 	bge	r15,r4,402740c <__alt_data_end+0xfffe740c>
 402743c:	1001b51e 	bne	r2,zero,4027b14 <___vfiprintf_internal_r+0xb78>
 4027440:	843ffc04 	addi	r16,r16,-16
 4027444:	000d883a 	mov	r6,zero
 4027448:	01400044 	movi	r5,1
 402744c:	d811883a 	mov	r8,sp
 4027450:	3c3ff316 	blt	r7,r16,4027420 <__alt_data_end+0xfffe7420>
 4027454:	8007883a 	mov	r3,r16
 4027458:	da402517 	ldw	r9,148(sp)
 402745c:	db802817 	ldw	r14,160(sp)
 4027460:	dc002917 	ldw	r16,164(sp)
 4027464:	da802417 	ldw	r10,144(sp)
 4027468:	1885883a 	add	r2,r3,r2
 402746c:	40c00115 	stw	r3,4(r8)
 4027470:	42800015 	stw	r10,0(r8)
 4027474:	d8801c15 	stw	r2,112(sp)
 4027478:	d9401b15 	stw	r5,108(sp)
 402747c:	00c001c4 	movi	r3,7
 4027480:	19426016 	blt	r3,r5,4027e04 <___vfiprintf_internal_r+0xe68>
 4027484:	d8c01d87 	ldb	r3,118(sp)
 4027488:	42000204 	addi	r8,r8,8
 402748c:	29000044 	addi	r4,r5,1
 4027490:	1801b31e 	bne	r3,zero,4027b60 <___vfiprintf_internal_r+0xbc4>
 4027494:	7001c026 	beq	r14,zero,4027b98 <___vfiprintf_internal_r+0xbfc>
 4027498:	d8c01d04 	addi	r3,sp,116
 402749c:	10800084 	addi	r2,r2,2
 40274a0:	40c00015 	stw	r3,0(r8)
 40274a4:	00c00084 	movi	r3,2
 40274a8:	40c00115 	stw	r3,4(r8)
 40274ac:	d8801c15 	stw	r2,112(sp)
 40274b0:	d9001b15 	stw	r4,108(sp)
 40274b4:	00c001c4 	movi	r3,7
 40274b8:	1902650e 	bge	r3,r4,4027e50 <___vfiprintf_internal_r+0xeb4>
 40274bc:	10029a1e 	bne	r2,zero,4027f28 <___vfiprintf_internal_r+0xf8c>
 40274c0:	00c02004 	movi	r3,128
 40274c4:	01000044 	movi	r4,1
 40274c8:	000b883a 	mov	r5,zero
 40274cc:	d811883a 	mov	r8,sp
 40274d0:	e0c1b31e 	bne	fp,r3,4027ba0 <___vfiprintf_internal_r+0xc04>
 40274d4:	8cb9c83a 	sub	fp,r17,r18
 40274d8:	0701b10e 	bge	zero,fp,4027ba0 <___vfiprintf_internal_r+0xc04>
 40274dc:	01c00404 	movi	r7,16
 40274e0:	3f03890e 	bge	r7,fp,4028308 <___vfiprintf_internal_r+0x136c>
 40274e4:	00c100f4 	movhi	r3,1027
 40274e8:	18c12504 	addi	r3,r3,1172
 40274ec:	d8c02415 	stw	r3,144(sp)
 40274f0:	8007883a 	mov	r3,r16
 40274f4:	034001c4 	movi	r13,7
 40274f8:	e021883a 	mov	r16,fp
 40274fc:	da402515 	stw	r9,148(sp)
 4027500:	1839883a 	mov	fp,r3
 4027504:	00000506 	br	402751c <___vfiprintf_internal_r+0x580>
 4027508:	29800084 	addi	r6,r5,2
 402750c:	42000204 	addi	r8,r8,8
 4027510:	180b883a 	mov	r5,r3
 4027514:	843ffc04 	addi	r16,r16,-16
 4027518:	3c000d0e 	bge	r7,r16,4027550 <___vfiprintf_internal_r+0x5b4>
 402751c:	10800404 	addi	r2,r2,16
 4027520:	28c00044 	addi	r3,r5,1
 4027524:	45c00015 	stw	r23,0(r8)
 4027528:	41c00115 	stw	r7,4(r8)
 402752c:	d8801c15 	stw	r2,112(sp)
 4027530:	d8c01b15 	stw	r3,108(sp)
 4027534:	68fff40e 	bge	r13,r3,4027508 <__alt_data_end+0xfffe7508>
 4027538:	1002241e 	bne	r2,zero,4027dcc <___vfiprintf_internal_r+0xe30>
 402753c:	843ffc04 	addi	r16,r16,-16
 4027540:	01800044 	movi	r6,1
 4027544:	000b883a 	mov	r5,zero
 4027548:	d811883a 	mov	r8,sp
 402754c:	3c3ff316 	blt	r7,r16,402751c <__alt_data_end+0xfffe751c>
 4027550:	da402517 	ldw	r9,148(sp)
 4027554:	e007883a 	mov	r3,fp
 4027558:	8039883a 	mov	fp,r16
 402755c:	1821883a 	mov	r16,r3
 4027560:	d8c02417 	ldw	r3,144(sp)
 4027564:	1705883a 	add	r2,r2,fp
 4027568:	47000115 	stw	fp,4(r8)
 402756c:	40c00015 	stw	r3,0(r8)
 4027570:	d8801c15 	stw	r2,112(sp)
 4027574:	d9801b15 	stw	r6,108(sp)
 4027578:	00c001c4 	movi	r3,7
 402757c:	19827616 	blt	r3,r6,4027f58 <___vfiprintf_internal_r+0xfbc>
 4027580:	4cf9c83a 	sub	fp,r9,r19
 4027584:	42000204 	addi	r8,r8,8
 4027588:	31000044 	addi	r4,r6,1
 402758c:	300b883a 	mov	r5,r6
 4027590:	07018516 	blt	zero,fp,4027ba8 <___vfiprintf_internal_r+0xc0c>
 4027594:	9885883a 	add	r2,r19,r2
 4027598:	45400015 	stw	r21,0(r8)
 402759c:	44c00115 	stw	r19,4(r8)
 40275a0:	d8801c15 	stw	r2,112(sp)
 40275a4:	d9001b15 	stw	r4,108(sp)
 40275a8:	00c001c4 	movi	r3,7
 40275ac:	1901dd0e 	bge	r3,r4,4027d24 <___vfiprintf_internal_r+0xd88>
 40275b0:	1002401e 	bne	r2,zero,4027eb4 <___vfiprintf_internal_r+0xf18>
 40275b4:	d8001b15 	stw	zero,108(sp)
 40275b8:	a2c0010c 	andi	r11,r20,4
 40275bc:	58000226 	beq	r11,zero,40275c8 <___vfiprintf_internal_r+0x62c>
 40275c0:	8ca7c83a 	sub	r19,r17,r18
 40275c4:	04c2f216 	blt	zero,r19,4028190 <___vfiprintf_internal_r+0x11f4>
 40275c8:	8c80010e 	bge	r17,r18,40275d0 <___vfiprintf_internal_r+0x634>
 40275cc:	9023883a 	mov	r17,r18
 40275d0:	da802317 	ldw	r10,140(sp)
 40275d4:	5455883a 	add	r10,r10,r17
 40275d8:	da802315 	stw	r10,140(sp)
 40275dc:	d8001b15 	stw	zero,108(sp)
 40275e0:	d811883a 	mov	r8,sp
 40275e4:	003ea206 	br	4027070 <__alt_data_end+0xfffe7070>
 40275e8:	a5000814 	ori	r20,r20,32
 40275ec:	80c00007 	ldb	r3,0(r16)
 40275f0:	003ec906 	br	4027118 <__alt_data_end+0xfffe7118>
 40275f4:	80c00007 	ldb	r3,0(r16)
 40275f8:	1b030926 	beq	r3,r12,4028220 <___vfiprintf_internal_r+0x1284>
 40275fc:	a5000414 	ori	r20,r20,16
 4027600:	003ec506 	br	4027118 <__alt_data_end+0xfffe7118>
 4027604:	21003fcc 	andi	r4,r4,255
 4027608:	20035e1e 	bne	r4,zero,4028384 <___vfiprintf_internal_r+0x13e8>
 402760c:	a080080c 	andi	r2,r20,32
 4027610:	1002a526 	beq	r2,zero,40280a8 <___vfiprintf_internal_r+0x110c>
 4027614:	da802217 	ldw	r10,136(sp)
 4027618:	50800017 	ldw	r2,0(r10)
 402761c:	da802317 	ldw	r10,140(sp)
 4027620:	5007d7fa 	srai	r3,r10,31
 4027624:	da802217 	ldw	r10,136(sp)
 4027628:	10c00115 	stw	r3,4(r2)
 402762c:	52800104 	addi	r10,r10,4
 4027630:	da802215 	stw	r10,136(sp)
 4027634:	da802317 	ldw	r10,140(sp)
 4027638:	12800015 	stw	r10,0(r2)
 402763c:	003e8c06 	br	4027070 <__alt_data_end+0xfffe7070>
 4027640:	21003fcc 	andi	r4,r4,255
 4027644:	2003511e 	bne	r4,zero,402838c <___vfiprintf_internal_r+0x13f0>
 4027648:	a080080c 	andi	r2,r20,32
 402764c:	1000a126 	beq	r2,zero,40278d4 <___vfiprintf_internal_r+0x938>
 4027650:	da802217 	ldw	r10,136(sp)
 4027654:	d8001d85 	stb	zero,118(sp)
 4027658:	50800204 	addi	r2,r10,8
 402765c:	54800017 	ldw	r18,0(r10)
 4027660:	54c00117 	ldw	r19,4(r10)
 4027664:	4802b416 	blt	r9,zero,4028138 <___vfiprintf_internal_r+0x119c>
 4027668:	013fdfc4 	movi	r4,-129
 402766c:	94c6b03a 	or	r3,r18,r19
 4027670:	d8802215 	stw	r2,136(sp)
 4027674:	a128703a 	and	r20,r20,r4
 4027678:	1800a226 	beq	r3,zero,4027904 <___vfiprintf_internal_r+0x968>
 402767c:	0039883a 	mov	fp,zero
 4027680:	dd401a04 	addi	r21,sp,104
 4027684:	9006d0fa 	srli	r3,r18,3
 4027688:	9808977a 	slli	r4,r19,29
 402768c:	9826d0fa 	srli	r19,r19,3
 4027690:	948001cc 	andi	r18,r18,7
 4027694:	90800c04 	addi	r2,r18,48
 4027698:	ad7fffc4 	addi	r21,r21,-1
 402769c:	20e4b03a 	or	r18,r4,r3
 40276a0:	a8800005 	stb	r2,0(r21)
 40276a4:	94c6b03a 	or	r3,r18,r19
 40276a8:	183ff61e 	bne	r3,zero,4027684 <__alt_data_end+0xfffe7684>
 40276ac:	a0c0004c 	andi	r3,r20,1
 40276b0:	18005926 	beq	r3,zero,4027818 <___vfiprintf_internal_r+0x87c>
 40276b4:	10803fcc 	andi	r2,r2,255
 40276b8:	1080201c 	xori	r2,r2,128
 40276bc:	10bfe004 	addi	r2,r2,-128
 40276c0:	00c00c04 	movi	r3,48
 40276c4:	10c05426 	beq	r2,r3,4027818 <___vfiprintf_internal_r+0x87c>
 40276c8:	da801e17 	ldw	r10,120(sp)
 40276cc:	a8bfffc4 	addi	r2,r21,-1
 40276d0:	a8ffffc5 	stb	r3,-1(r21)
 40276d4:	50a7c83a 	sub	r19,r10,r2
 40276d8:	102b883a 	mov	r21,r2
 40276dc:	003f2f06 	br	402739c <__alt_data_end+0xfffe739c>
 40276e0:	21003fcc 	andi	r4,r4,255
 40276e4:	2003421e 	bne	r4,zero,40283f0 <___vfiprintf_internal_r+0x1454>
 40276e8:	008100f4 	movhi	r2,1027
 40276ec:	1080c404 	addi	r2,r2,784
 40276f0:	d8802615 	stw	r2,152(sp)
 40276f4:	a080080c 	andi	r2,r20,32
 40276f8:	1000aa26 	beq	r2,zero,40279a4 <___vfiprintf_internal_r+0xa08>
 40276fc:	da802217 	ldw	r10,136(sp)
 4027700:	54800017 	ldw	r18,0(r10)
 4027704:	54c00117 	ldw	r19,4(r10)
 4027708:	52800204 	addi	r10,r10,8
 402770c:	da802215 	stw	r10,136(sp)
 4027710:	a080004c 	andi	r2,r20,1
 4027714:	1001d226 	beq	r2,zero,4027e60 <___vfiprintf_internal_r+0xec4>
 4027718:	94c4b03a 	or	r2,r18,r19
 402771c:	1002351e 	bne	r2,zero,4027ff4 <___vfiprintf_internal_r+0x1058>
 4027720:	d8001d85 	stb	zero,118(sp)
 4027724:	48022216 	blt	r9,zero,4027fb0 <___vfiprintf_internal_r+0x1014>
 4027728:	00bfdfc4 	movi	r2,-129
 402772c:	a0a8703a 	and	r20,r20,r2
 4027730:	003f1506 	br	4027388 <__alt_data_end+0xfffe7388>
 4027734:	da802217 	ldw	r10,136(sp)
 4027738:	04800044 	movi	r18,1
 402773c:	d8001d85 	stb	zero,118(sp)
 4027740:	50800017 	ldw	r2,0(r10)
 4027744:	52800104 	addi	r10,r10,4
 4027748:	da802215 	stw	r10,136(sp)
 402774c:	d8801005 	stb	r2,64(sp)
 4027750:	9027883a 	mov	r19,r18
 4027754:	dd401004 	addi	r21,sp,64
 4027758:	0013883a 	mov	r9,zero
 402775c:	003f1706 	br	40273bc <__alt_data_end+0xfffe73bc>
 4027760:	21003fcc 	andi	r4,r4,255
 4027764:	2003201e 	bne	r4,zero,40283e8 <___vfiprintf_internal_r+0x144c>
 4027768:	a080080c 	andi	r2,r20,32
 402776c:	10004b26 	beq	r2,zero,402789c <___vfiprintf_internal_r+0x900>
 4027770:	da802217 	ldw	r10,136(sp)
 4027774:	50800117 	ldw	r2,4(r10)
 4027778:	54800017 	ldw	r18,0(r10)
 402777c:	52800204 	addi	r10,r10,8
 4027780:	da802215 	stw	r10,136(sp)
 4027784:	1027883a 	mov	r19,r2
 4027788:	10022c16 	blt	r2,zero,402803c <___vfiprintf_internal_r+0x10a0>
 402778c:	df001d83 	ldbu	fp,118(sp)
 4027790:	48007216 	blt	r9,zero,402795c <___vfiprintf_internal_r+0x9c0>
 4027794:	00ffdfc4 	movi	r3,-129
 4027798:	94c4b03a 	or	r2,r18,r19
 402779c:	a0e8703a 	and	r20,r20,r3
 40277a0:	1000cc26 	beq	r2,zero,4027ad4 <___vfiprintf_internal_r+0xb38>
 40277a4:	98021026 	beq	r19,zero,4027fe8 <___vfiprintf_internal_r+0x104c>
 40277a8:	dc402415 	stw	r17,144(sp)
 40277ac:	dc002515 	stw	r16,148(sp)
 40277b0:	9823883a 	mov	r17,r19
 40277b4:	9021883a 	mov	r16,r18
 40277b8:	dd401a04 	addi	r21,sp,104
 40277bc:	4825883a 	mov	r18,r9
 40277c0:	4027883a 	mov	r19,r8
 40277c4:	8009883a 	mov	r4,r16
 40277c8:	880b883a 	mov	r5,r17
 40277cc:	01800284 	movi	r6,10
 40277d0:	000f883a 	mov	r7,zero
 40277d4:	4029ef80 	call	4029ef8 <__umoddi3>
 40277d8:	10800c04 	addi	r2,r2,48
 40277dc:	ad7fffc4 	addi	r21,r21,-1
 40277e0:	8009883a 	mov	r4,r16
 40277e4:	880b883a 	mov	r5,r17
 40277e8:	a8800005 	stb	r2,0(r21)
 40277ec:	01800284 	movi	r6,10
 40277f0:	000f883a 	mov	r7,zero
 40277f4:	40299800 	call	4029980 <__udivdi3>
 40277f8:	1021883a 	mov	r16,r2
 40277fc:	10c4b03a 	or	r2,r2,r3
 4027800:	1823883a 	mov	r17,r3
 4027804:	103fef1e 	bne	r2,zero,40277c4 <__alt_data_end+0xfffe77c4>
 4027808:	dc402417 	ldw	r17,144(sp)
 402780c:	dc002517 	ldw	r16,148(sp)
 4027810:	9013883a 	mov	r9,r18
 4027814:	9811883a 	mov	r8,r19
 4027818:	da801e17 	ldw	r10,120(sp)
 402781c:	5567c83a 	sub	r19,r10,r21
 4027820:	003ede06 	br	402739c <__alt_data_end+0xfffe739c>
 4027824:	38803fcc 	andi	r2,r7,255
 4027828:	1080201c 	xori	r2,r2,128
 402782c:	10bfe004 	addi	r2,r2,-128
 4027830:	1002371e 	bne	r2,zero,4028110 <___vfiprintf_internal_r+0x1174>
 4027834:	01000044 	movi	r4,1
 4027838:	01c00804 	movi	r7,32
 402783c:	80c00007 	ldb	r3,0(r16)
 4027840:	003e3506 	br	4027118 <__alt_data_end+0xfffe7118>
 4027844:	a5000054 	ori	r20,r20,1
 4027848:	80c00007 	ldb	r3,0(r16)
 402784c:	003e3206 	br	4027118 <__alt_data_end+0xfffe7118>
 4027850:	a5002014 	ori	r20,r20,128
 4027854:	80c00007 	ldb	r3,0(r16)
 4027858:	003e2f06 	br	4027118 <__alt_data_end+0xfffe7118>
 402785c:	8015883a 	mov	r10,r16
 4027860:	0023883a 	mov	r17,zero
 4027864:	18bff404 	addi	r2,r3,-48
 4027868:	50c00007 	ldb	r3,0(r10)
 402786c:	8c4002a4 	muli	r17,r17,10
 4027870:	84000044 	addi	r16,r16,1
 4027874:	8015883a 	mov	r10,r16
 4027878:	1463883a 	add	r17,r2,r17
 402787c:	18bff404 	addi	r2,r3,-48
 4027880:	30bff92e 	bgeu	r6,r2,4027868 <__alt_data_end+0xfffe7868>
 4027884:	003e2506 	br	402711c <__alt_data_end+0xfffe711c>
 4027888:	21003fcc 	andi	r4,r4,255
 402788c:	2002d41e 	bne	r4,zero,40283e0 <___vfiprintf_internal_r+0x1444>
 4027890:	a5000414 	ori	r20,r20,16
 4027894:	a080080c 	andi	r2,r20,32
 4027898:	103fb51e 	bne	r2,zero,4027770 <__alt_data_end+0xfffe7770>
 402789c:	a080040c 	andi	r2,r20,16
 40278a0:	1001f826 	beq	r2,zero,4028084 <___vfiprintf_internal_r+0x10e8>
 40278a4:	da802217 	ldw	r10,136(sp)
 40278a8:	54800017 	ldw	r18,0(r10)
 40278ac:	52800104 	addi	r10,r10,4
 40278b0:	da802215 	stw	r10,136(sp)
 40278b4:	9027d7fa 	srai	r19,r18,31
 40278b8:	9805883a 	mov	r2,r19
 40278bc:	003fb206 	br	4027788 <__alt_data_end+0xfffe7788>
 40278c0:	21003fcc 	andi	r4,r4,255
 40278c4:	2002c41e 	bne	r4,zero,40283d8 <___vfiprintf_internal_r+0x143c>
 40278c8:	a5000414 	ori	r20,r20,16
 40278cc:	a080080c 	andi	r2,r20,32
 40278d0:	103f5f1e 	bne	r2,zero,4027650 <__alt_data_end+0xfffe7650>
 40278d4:	a080040c 	andi	r2,r20,16
 40278d8:	10020f26 	beq	r2,zero,4028118 <___vfiprintf_internal_r+0x117c>
 40278dc:	da802217 	ldw	r10,136(sp)
 40278e0:	d8001d85 	stb	zero,118(sp)
 40278e4:	0027883a 	mov	r19,zero
 40278e8:	50800104 	addi	r2,r10,4
 40278ec:	54800017 	ldw	r18,0(r10)
 40278f0:	48021116 	blt	r9,zero,4028138 <___vfiprintf_internal_r+0x119c>
 40278f4:	00ffdfc4 	movi	r3,-129
 40278f8:	d8802215 	stw	r2,136(sp)
 40278fc:	a0e8703a 	and	r20,r20,r3
 4027900:	903f5e1e 	bne	r18,zero,402767c <__alt_data_end+0xfffe767c>
 4027904:	0039883a 	mov	fp,zero
 4027908:	4802a626 	beq	r9,zero,40283a4 <___vfiprintf_internal_r+0x1408>
 402790c:	0025883a 	mov	r18,zero
 4027910:	0027883a 	mov	r19,zero
 4027914:	003f5a06 	br	4027680 <__alt_data_end+0xfffe7680>
 4027918:	21003fcc 	andi	r4,r4,255
 402791c:	20029f1e 	bne	r4,zero,402839c <___vfiprintf_internal_r+0x1400>
 4027920:	a5000414 	ori	r20,r20,16
 4027924:	a080080c 	andi	r2,r20,32
 4027928:	10005e1e 	bne	r2,zero,4027aa4 <___vfiprintf_internal_r+0xb08>
 402792c:	a080040c 	andi	r2,r20,16
 4027930:	1001a21e 	bne	r2,zero,4027fbc <___vfiprintf_internal_r+0x1020>
 4027934:	a080100c 	andi	r2,r20,64
 4027938:	d8001d85 	stb	zero,118(sp)
 402793c:	da802217 	ldw	r10,136(sp)
 4027940:	1002231e 	bne	r2,zero,40281d0 <___vfiprintf_internal_r+0x1234>
 4027944:	50800104 	addi	r2,r10,4
 4027948:	54800017 	ldw	r18,0(r10)
 402794c:	0027883a 	mov	r19,zero
 4027950:	4801a00e 	bge	r9,zero,4027fd4 <___vfiprintf_internal_r+0x1038>
 4027954:	d8802215 	stw	r2,136(sp)
 4027958:	0039883a 	mov	fp,zero
 402795c:	94c4b03a 	or	r2,r18,r19
 4027960:	103f901e 	bne	r2,zero,40277a4 <__alt_data_end+0xfffe77a4>
 4027964:	00800044 	movi	r2,1
 4027968:	10803fcc 	andi	r2,r2,255
 402796c:	00c00044 	movi	r3,1
 4027970:	10c05926 	beq	r2,r3,4027ad8 <___vfiprintf_internal_r+0xb3c>
 4027974:	00c00084 	movi	r3,2
 4027978:	10ffe41e 	bne	r2,r3,402790c <__alt_data_end+0xfffe790c>
 402797c:	0025883a 	mov	r18,zero
 4027980:	0027883a 	mov	r19,zero
 4027984:	00013d06 	br	4027e7c <___vfiprintf_internal_r+0xee0>
 4027988:	21003fcc 	andi	r4,r4,255
 402798c:	2002811e 	bne	r4,zero,4028394 <___vfiprintf_internal_r+0x13f8>
 4027990:	008100f4 	movhi	r2,1027
 4027994:	1080bf04 	addi	r2,r2,764
 4027998:	d8802615 	stw	r2,152(sp)
 402799c:	a080080c 	andi	r2,r20,32
 40279a0:	103f561e 	bne	r2,zero,40276fc <__alt_data_end+0xfffe76fc>
 40279a4:	a080040c 	andi	r2,r20,16
 40279a8:	1001d126 	beq	r2,zero,40280f0 <___vfiprintf_internal_r+0x1154>
 40279ac:	da802217 	ldw	r10,136(sp)
 40279b0:	0027883a 	mov	r19,zero
 40279b4:	54800017 	ldw	r18,0(r10)
 40279b8:	52800104 	addi	r10,r10,4
 40279bc:	da802215 	stw	r10,136(sp)
 40279c0:	003f5306 	br	4027710 <__alt_data_end+0xfffe7710>
 40279c4:	da802217 	ldw	r10,136(sp)
 40279c8:	d8001d85 	stb	zero,118(sp)
 40279cc:	55400017 	ldw	r21,0(r10)
 40279d0:	50c00104 	addi	r3,r10,4
 40279d4:	a8024226 	beq	r21,zero,40282e0 <___vfiprintf_internal_r+0x1344>
 40279d8:	48021816 	blt	r9,zero,402823c <___vfiprintf_internal_r+0x12a0>
 40279dc:	480d883a 	mov	r6,r9
 40279e0:	000b883a 	mov	r5,zero
 40279e4:	a809883a 	mov	r4,r21
 40279e8:	d8c02a15 	stw	r3,168(sp)
 40279ec:	da002b15 	stw	r8,172(sp)
 40279f0:	da402c15 	stw	r9,176(sp)
 40279f4:	40257c00 	call	40257c0 <memchr>
 40279f8:	d8c02a17 	ldw	r3,168(sp)
 40279fc:	da002b17 	ldw	r8,172(sp)
 4027a00:	da402c17 	ldw	r9,176(sp)
 4027a04:	10024826 	beq	r2,zero,4028328 <___vfiprintf_internal_r+0x138c>
 4027a08:	1567c83a 	sub	r19,r2,r21
 4027a0c:	df001d83 	ldbu	fp,118(sp)
 4027a10:	d8c02215 	stw	r3,136(sp)
 4027a14:	0013883a 	mov	r9,zero
 4027a18:	003e6006 	br	402739c <__alt_data_end+0xfffe739c>
 4027a1c:	21003fcc 	andi	r4,r4,255
 4027a20:	203fc026 	beq	r4,zero,4027924 <__alt_data_end+0xfffe7924>
 4027a24:	d9c01d85 	stb	r7,118(sp)
 4027a28:	003fbe06 	br	4027924 <__alt_data_end+0xfffe7924>
 4027a2c:	da802217 	ldw	r10,136(sp)
 4027a30:	54400017 	ldw	r17,0(r10)
 4027a34:	50800104 	addi	r2,r10,4
 4027a38:	883e3b16 	blt	r17,zero,4027328 <__alt_data_end+0xfffe7328>
 4027a3c:	d8802215 	stw	r2,136(sp)
 4027a40:	80c00007 	ldb	r3,0(r16)
 4027a44:	003db406 	br	4027118 <__alt_data_end+0xfffe7118>
 4027a48:	01000044 	movi	r4,1
 4027a4c:	01c00ac4 	movi	r7,43
 4027a50:	80c00007 	ldb	r3,0(r16)
 4027a54:	003db006 	br	4027118 <__alt_data_end+0xfffe7118>
 4027a58:	80c00007 	ldb	r3,0(r16)
 4027a5c:	82800044 	addi	r10,r16,1
 4027a60:	1b423c26 	beq	r3,r13,4028354 <___vfiprintf_internal_r+0x13b8>
 4027a64:	18bff404 	addi	r2,r3,-48
 4027a68:	0013883a 	mov	r9,zero
 4027a6c:	30822b36 	bltu	r6,r2,402831c <___vfiprintf_internal_r+0x1380>
 4027a70:	50c00007 	ldb	r3,0(r10)
 4027a74:	4a4002a4 	muli	r9,r9,10
 4027a78:	54000044 	addi	r16,r10,1
 4027a7c:	8015883a 	mov	r10,r16
 4027a80:	4893883a 	add	r9,r9,r2
 4027a84:	18bff404 	addi	r2,r3,-48
 4027a88:	30bff92e 	bgeu	r6,r2,4027a70 <__alt_data_end+0xfffe7a70>
 4027a8c:	483da30e 	bge	r9,zero,402711c <__alt_data_end+0xfffe711c>
 4027a90:	027fffc4 	movi	r9,-1
 4027a94:	003da106 	br	402711c <__alt_data_end+0xfffe711c>
 4027a98:	a5001014 	ori	r20,r20,64
 4027a9c:	80c00007 	ldb	r3,0(r16)
 4027aa0:	003d9d06 	br	4027118 <__alt_data_end+0xfffe7118>
 4027aa4:	da802217 	ldw	r10,136(sp)
 4027aa8:	d8001d85 	stb	zero,118(sp)
 4027aac:	50c00204 	addi	r3,r10,8
 4027ab0:	54800017 	ldw	r18,0(r10)
 4027ab4:	54c00117 	ldw	r19,4(r10)
 4027ab8:	4801ca16 	blt	r9,zero,40281e4 <___vfiprintf_internal_r+0x1248>
 4027abc:	013fdfc4 	movi	r4,-129
 4027ac0:	94c4b03a 	or	r2,r18,r19
 4027ac4:	d8c02215 	stw	r3,136(sp)
 4027ac8:	a128703a 	and	r20,r20,r4
 4027acc:	0039883a 	mov	fp,zero
 4027ad0:	103f341e 	bne	r2,zero,40277a4 <__alt_data_end+0xfffe77a4>
 4027ad4:	483e2e26 	beq	r9,zero,4027390 <__alt_data_end+0xfffe7390>
 4027ad8:	0025883a 	mov	r18,zero
 4027adc:	94800c04 	addi	r18,r18,48
 4027ae0:	dc8019c5 	stb	r18,103(sp)
 4027ae4:	dcc02717 	ldw	r19,156(sp)
 4027ae8:	dd4019c4 	addi	r21,sp,103
 4027aec:	003e2b06 	br	402739c <__alt_data_end+0xfffe739c>
 4027af0:	21003fcc 	andi	r4,r4,255
 4027af4:	2002361e 	bne	r4,zero,40283d0 <___vfiprintf_internal_r+0x1434>
 4027af8:	1801c126 	beq	r3,zero,4028200 <___vfiprintf_internal_r+0x1264>
 4027afc:	04800044 	movi	r18,1
 4027b00:	d8c01005 	stb	r3,64(sp)
 4027b04:	d8001d85 	stb	zero,118(sp)
 4027b08:	9027883a 	mov	r19,r18
 4027b0c:	dd401004 	addi	r21,sp,64
 4027b10:	003f1106 	br	4027758 <__alt_data_end+0xfffe7758>
 4027b14:	d9402117 	ldw	r5,132(sp)
 4027b18:	d9002017 	ldw	r4,128(sp)
 4027b1c:	d9801a04 	addi	r6,sp,104
 4027b20:	d9c02b15 	stw	r7,172(sp)
 4027b24:	dbc02a15 	stw	r15,168(sp)
 4027b28:	4026e880 	call	4026e88 <__sprint_r.part.0>
 4027b2c:	d9c02b17 	ldw	r7,172(sp)
 4027b30:	dbc02a17 	ldw	r15,168(sp)
 4027b34:	10006d1e 	bne	r2,zero,4027cec <___vfiprintf_internal_r+0xd50>
 4027b38:	d9801b17 	ldw	r6,108(sp)
 4027b3c:	d8801c17 	ldw	r2,112(sp)
 4027b40:	d811883a 	mov	r8,sp
 4027b44:	31400044 	addi	r5,r6,1
 4027b48:	003e3306 	br	4027418 <__alt_data_end+0xfffe7418>
 4027b4c:	d9401b17 	ldw	r5,108(sp)
 4027b50:	d8801c17 	ldw	r2,112(sp)
 4027b54:	29000044 	addi	r4,r5,1
 4027b58:	d8c01d87 	ldb	r3,118(sp)
 4027b5c:	183e4d26 	beq	r3,zero,4027494 <__alt_data_end+0xfffe7494>
 4027b60:	00c00044 	movi	r3,1
 4027b64:	d9401d84 	addi	r5,sp,118
 4027b68:	10c5883a 	add	r2,r2,r3
 4027b6c:	41400015 	stw	r5,0(r8)
 4027b70:	40c00115 	stw	r3,4(r8)
 4027b74:	d8801c15 	stw	r2,112(sp)
 4027b78:	d9001b15 	stw	r4,108(sp)
 4027b7c:	014001c4 	movi	r5,7
 4027b80:	2900a90e 	bge	r5,r4,4027e28 <___vfiprintf_internal_r+0xe8c>
 4027b84:	1000da1e 	bne	r2,zero,4027ef0 <___vfiprintf_internal_r+0xf54>
 4027b88:	7000ab1e 	bne	r14,zero,4027e38 <___vfiprintf_internal_r+0xe9c>
 4027b8c:	000b883a 	mov	r5,zero
 4027b90:	1809883a 	mov	r4,r3
 4027b94:	d811883a 	mov	r8,sp
 4027b98:	00c02004 	movi	r3,128
 4027b9c:	e0fe4d26 	beq	fp,r3,40274d4 <__alt_data_end+0xfffe74d4>
 4027ba0:	4cf9c83a 	sub	fp,r9,r19
 4027ba4:	073e7b0e 	bge	zero,fp,4027594 <__alt_data_end+0xfffe7594>
 4027ba8:	01c00404 	movi	r7,16
 4027bac:	3f01900e 	bge	r7,fp,40281f0 <___vfiprintf_internal_r+0x1254>
 4027bb0:	00c100f4 	movhi	r3,1027
 4027bb4:	18c12504 	addi	r3,r3,1172
 4027bb8:	d8c02415 	stw	r3,144(sp)
 4027bbc:	034001c4 	movi	r13,7
 4027bc0:	00000506 	br	4027bd8 <___vfiprintf_internal_r+0xc3c>
 4027bc4:	29000084 	addi	r4,r5,2
 4027bc8:	42000204 	addi	r8,r8,8
 4027bcc:	180b883a 	mov	r5,r3
 4027bd0:	e73ffc04 	addi	fp,fp,-16
 4027bd4:	3f000d0e 	bge	r7,fp,4027c0c <___vfiprintf_internal_r+0xc70>
 4027bd8:	10800404 	addi	r2,r2,16
 4027bdc:	28c00044 	addi	r3,r5,1
 4027be0:	45c00015 	stw	r23,0(r8)
 4027be4:	41c00115 	stw	r7,4(r8)
 4027be8:	d8801c15 	stw	r2,112(sp)
 4027bec:	d8c01b15 	stw	r3,108(sp)
 4027bf0:	68fff40e 	bge	r13,r3,4027bc4 <__alt_data_end+0xfffe7bc4>
 4027bf4:	1000101e 	bne	r2,zero,4027c38 <___vfiprintf_internal_r+0xc9c>
 4027bf8:	e73ffc04 	addi	fp,fp,-16
 4027bfc:	01000044 	movi	r4,1
 4027c00:	000b883a 	mov	r5,zero
 4027c04:	d811883a 	mov	r8,sp
 4027c08:	3f3ff316 	blt	r7,fp,4027bd8 <__alt_data_end+0xfffe7bd8>
 4027c0c:	da802417 	ldw	r10,144(sp)
 4027c10:	1705883a 	add	r2,r2,fp
 4027c14:	47000115 	stw	fp,4(r8)
 4027c18:	42800015 	stw	r10,0(r8)
 4027c1c:	d8801c15 	stw	r2,112(sp)
 4027c20:	d9001b15 	stw	r4,108(sp)
 4027c24:	00c001c4 	movi	r3,7
 4027c28:	19003616 	blt	r3,r4,4027d04 <___vfiprintf_internal_r+0xd68>
 4027c2c:	42000204 	addi	r8,r8,8
 4027c30:	21000044 	addi	r4,r4,1
 4027c34:	003e5706 	br	4027594 <__alt_data_end+0xfffe7594>
 4027c38:	d9402117 	ldw	r5,132(sp)
 4027c3c:	d9002017 	ldw	r4,128(sp)
 4027c40:	d9801a04 	addi	r6,sp,104
 4027c44:	d9c02b15 	stw	r7,172(sp)
 4027c48:	db402a15 	stw	r13,168(sp)
 4027c4c:	4026e880 	call	4026e88 <__sprint_r.part.0>
 4027c50:	d9c02b17 	ldw	r7,172(sp)
 4027c54:	db402a17 	ldw	r13,168(sp)
 4027c58:	1000241e 	bne	r2,zero,4027cec <___vfiprintf_internal_r+0xd50>
 4027c5c:	d9401b17 	ldw	r5,108(sp)
 4027c60:	d8801c17 	ldw	r2,112(sp)
 4027c64:	d811883a 	mov	r8,sp
 4027c68:	29000044 	addi	r4,r5,1
 4027c6c:	003fd806 	br	4027bd0 <__alt_data_end+0xfffe7bd0>
 4027c70:	d9401b17 	ldw	r5,108(sp)
 4027c74:	00c100f4 	movhi	r3,1027
 4027c78:	18c12904 	addi	r3,r3,1188
 4027c7c:	d8c02415 	stw	r3,144(sp)
 4027c80:	29400044 	addi	r5,r5,1
 4027c84:	d8c02417 	ldw	r3,144(sp)
 4027c88:	14c5883a 	add	r2,r2,r19
 4027c8c:	44c00115 	stw	r19,4(r8)
 4027c90:	40c00015 	stw	r3,0(r8)
 4027c94:	d8801c15 	stw	r2,112(sp)
 4027c98:	d9401b15 	stw	r5,108(sp)
 4027c9c:	00c001c4 	movi	r3,7
 4027ca0:	1940070e 	bge	r3,r5,4027cc0 <___vfiprintf_internal_r+0xd24>
 4027ca4:	103e4826 	beq	r2,zero,40275c8 <__alt_data_end+0xfffe75c8>
 4027ca8:	d9402117 	ldw	r5,132(sp)
 4027cac:	d9002017 	ldw	r4,128(sp)
 4027cb0:	d9801a04 	addi	r6,sp,104
 4027cb4:	4026e880 	call	4026e88 <__sprint_r.part.0>
 4027cb8:	10000c1e 	bne	r2,zero,4027cec <___vfiprintf_internal_r+0xd50>
 4027cbc:	d8801c17 	ldw	r2,112(sp)
 4027cc0:	8c80010e 	bge	r17,r18,4027cc8 <___vfiprintf_internal_r+0xd2c>
 4027cc4:	9023883a 	mov	r17,r18
 4027cc8:	da802317 	ldw	r10,140(sp)
 4027ccc:	5455883a 	add	r10,r10,r17
 4027cd0:	da802315 	stw	r10,140(sp)
 4027cd4:	103e4126 	beq	r2,zero,40275dc <__alt_data_end+0xfffe75dc>
 4027cd8:	d9402117 	ldw	r5,132(sp)
 4027cdc:	d9002017 	ldw	r4,128(sp)
 4027ce0:	d9801a04 	addi	r6,sp,104
 4027ce4:	4026e880 	call	4026e88 <__sprint_r.part.0>
 4027ce8:	103e3c26 	beq	r2,zero,40275dc <__alt_data_end+0xfffe75dc>
 4027cec:	dd002117 	ldw	r20,132(sp)
 4027cf0:	a080030b 	ldhu	r2,12(r20)
 4027cf4:	1080100c 	andi	r2,r2,64
 4027cf8:	1001231e 	bne	r2,zero,4028188 <___vfiprintf_internal_r+0x11ec>
 4027cfc:	d8802317 	ldw	r2,140(sp)
 4027d00:	003d7b06 	br	40272f0 <__alt_data_end+0xfffe72f0>
 4027d04:	1000991e 	bne	r2,zero,4027f6c <___vfiprintf_internal_r+0xfd0>
 4027d08:	00c00044 	movi	r3,1
 4027d0c:	9805883a 	mov	r2,r19
 4027d10:	dd400015 	stw	r21,0(sp)
 4027d14:	dcc00115 	stw	r19,4(sp)
 4027d18:	dcc01c15 	stw	r19,112(sp)
 4027d1c:	d8c01b15 	stw	r3,108(sp)
 4027d20:	d811883a 	mov	r8,sp
 4027d24:	42000204 	addi	r8,r8,8
 4027d28:	a2c0010c 	andi	r11,r20,4
 4027d2c:	583fe426 	beq	r11,zero,4027cc0 <__alt_data_end+0xfffe7cc0>
 4027d30:	8ca7c83a 	sub	r19,r17,r18
 4027d34:	04ffe20e 	bge	zero,r19,4027cc0 <__alt_data_end+0xfffe7cc0>
 4027d38:	01c00404 	movi	r7,16
 4027d3c:	3cffcc0e 	bge	r7,r19,4027c70 <__alt_data_end+0xfffe7c70>
 4027d40:	028100f4 	movhi	r10,1027
 4027d44:	52812904 	addi	r10,r10,1188
 4027d48:	d9001b17 	ldw	r4,108(sp)
 4027d4c:	da802415 	stw	r10,144(sp)
 4027d50:	382b883a 	mov	r21,r7
 4027d54:	050001c4 	movi	r20,7
 4027d58:	df002017 	ldw	fp,128(sp)
 4027d5c:	00000506 	br	4027d74 <___vfiprintf_internal_r+0xdd8>
 4027d60:	21400084 	addi	r5,r4,2
 4027d64:	42000204 	addi	r8,r8,8
 4027d68:	1809883a 	mov	r4,r3
 4027d6c:	9cfffc04 	addi	r19,r19,-16
 4027d70:	acffc40e 	bge	r21,r19,4027c84 <__alt_data_end+0xfffe7c84>
 4027d74:	10800404 	addi	r2,r2,16
 4027d78:	20c00044 	addi	r3,r4,1
 4027d7c:	45800015 	stw	r22,0(r8)
 4027d80:	45400115 	stw	r21,4(r8)
 4027d84:	d8801c15 	stw	r2,112(sp)
 4027d88:	d8c01b15 	stw	r3,108(sp)
 4027d8c:	a0fff40e 	bge	r20,r3,4027d60 <__alt_data_end+0xfffe7d60>
 4027d90:	1000041e 	bne	r2,zero,4027da4 <___vfiprintf_internal_r+0xe08>
 4027d94:	01400044 	movi	r5,1
 4027d98:	0009883a 	mov	r4,zero
 4027d9c:	d811883a 	mov	r8,sp
 4027da0:	003ff206 	br	4027d6c <__alt_data_end+0xfffe7d6c>
 4027da4:	d9402117 	ldw	r5,132(sp)
 4027da8:	d9801a04 	addi	r6,sp,104
 4027dac:	e009883a 	mov	r4,fp
 4027db0:	4026e880 	call	4026e88 <__sprint_r.part.0>
 4027db4:	103fcd1e 	bne	r2,zero,4027cec <__alt_data_end+0xfffe7cec>
 4027db8:	d9001b17 	ldw	r4,108(sp)
 4027dbc:	d8801c17 	ldw	r2,112(sp)
 4027dc0:	d811883a 	mov	r8,sp
 4027dc4:	21400044 	addi	r5,r4,1
 4027dc8:	003fe806 	br	4027d6c <__alt_data_end+0xfffe7d6c>
 4027dcc:	d9402117 	ldw	r5,132(sp)
 4027dd0:	d9002017 	ldw	r4,128(sp)
 4027dd4:	d9801a04 	addi	r6,sp,104
 4027dd8:	d9c02b15 	stw	r7,172(sp)
 4027ddc:	db402a15 	stw	r13,168(sp)
 4027de0:	4026e880 	call	4026e88 <__sprint_r.part.0>
 4027de4:	d9c02b17 	ldw	r7,172(sp)
 4027de8:	db402a17 	ldw	r13,168(sp)
 4027dec:	103fbf1e 	bne	r2,zero,4027cec <__alt_data_end+0xfffe7cec>
 4027df0:	d9401b17 	ldw	r5,108(sp)
 4027df4:	d8801c17 	ldw	r2,112(sp)
 4027df8:	d811883a 	mov	r8,sp
 4027dfc:	29800044 	addi	r6,r5,1
 4027e00:	003dc406 	br	4027514 <__alt_data_end+0xfffe7514>
 4027e04:	1000d21e 	bne	r2,zero,4028150 <___vfiprintf_internal_r+0x11b4>
 4027e08:	d8c01d87 	ldb	r3,118(sp)
 4027e0c:	18009526 	beq	r3,zero,4028064 <___vfiprintf_internal_r+0x10c8>
 4027e10:	00800044 	movi	r2,1
 4027e14:	d8c01d84 	addi	r3,sp,118
 4027e18:	1009883a 	mov	r4,r2
 4027e1c:	d8c00015 	stw	r3,0(sp)
 4027e20:	d8800115 	stw	r2,4(sp)
 4027e24:	d811883a 	mov	r8,sp
 4027e28:	200b883a 	mov	r5,r4
 4027e2c:	42000204 	addi	r8,r8,8
 4027e30:	21000044 	addi	r4,r4,1
 4027e34:	003d9706 	br	4027494 <__alt_data_end+0xfffe7494>
 4027e38:	d9001d04 	addi	r4,sp,116
 4027e3c:	00800084 	movi	r2,2
 4027e40:	d9000015 	stw	r4,0(sp)
 4027e44:	d8800115 	stw	r2,4(sp)
 4027e48:	1809883a 	mov	r4,r3
 4027e4c:	d811883a 	mov	r8,sp
 4027e50:	200b883a 	mov	r5,r4
 4027e54:	42000204 	addi	r8,r8,8
 4027e58:	21000044 	addi	r4,r4,1
 4027e5c:	003f4e06 	br	4027b98 <__alt_data_end+0xfffe7b98>
 4027e60:	d8001d85 	stb	zero,118(sp)
 4027e64:	48005016 	blt	r9,zero,4027fa8 <___vfiprintf_internal_r+0x100c>
 4027e68:	00ffdfc4 	movi	r3,-129
 4027e6c:	94c4b03a 	or	r2,r18,r19
 4027e70:	a0e8703a 	and	r20,r20,r3
 4027e74:	103d4426 	beq	r2,zero,4027388 <__alt_data_end+0xfffe7388>
 4027e78:	0039883a 	mov	fp,zero
 4027e7c:	d9002617 	ldw	r4,152(sp)
 4027e80:	dd401a04 	addi	r21,sp,104
 4027e84:	908003cc 	andi	r2,r18,15
 4027e88:	9806973a 	slli	r3,r19,28
 4027e8c:	2085883a 	add	r2,r4,r2
 4027e90:	9024d13a 	srli	r18,r18,4
 4027e94:	10800003 	ldbu	r2,0(r2)
 4027e98:	9826d13a 	srli	r19,r19,4
 4027e9c:	ad7fffc4 	addi	r21,r21,-1
 4027ea0:	1ca4b03a 	or	r18,r3,r18
 4027ea4:	a8800005 	stb	r2,0(r21)
 4027ea8:	94c4b03a 	or	r2,r18,r19
 4027eac:	103ff51e 	bne	r2,zero,4027e84 <__alt_data_end+0xfffe7e84>
 4027eb0:	003e5906 	br	4027818 <__alt_data_end+0xfffe7818>
 4027eb4:	d9402117 	ldw	r5,132(sp)
 4027eb8:	d9002017 	ldw	r4,128(sp)
 4027ebc:	d9801a04 	addi	r6,sp,104
 4027ec0:	4026e880 	call	4026e88 <__sprint_r.part.0>
 4027ec4:	103f891e 	bne	r2,zero,4027cec <__alt_data_end+0xfffe7cec>
 4027ec8:	d8801c17 	ldw	r2,112(sp)
 4027ecc:	d811883a 	mov	r8,sp
 4027ed0:	003f9506 	br	4027d28 <__alt_data_end+0xfffe7d28>
 4027ed4:	d9402117 	ldw	r5,132(sp)
 4027ed8:	d9002017 	ldw	r4,128(sp)
 4027edc:	d9801a04 	addi	r6,sp,104
 4027ee0:	4026e880 	call	4026e88 <__sprint_r.part.0>
 4027ee4:	103f811e 	bne	r2,zero,4027cec <__alt_data_end+0xfffe7cec>
 4027ee8:	d811883a 	mov	r8,sp
 4027eec:	003ced06 	br	40272a4 <__alt_data_end+0xfffe72a4>
 4027ef0:	d9402117 	ldw	r5,132(sp)
 4027ef4:	d9002017 	ldw	r4,128(sp)
 4027ef8:	d9801a04 	addi	r6,sp,104
 4027efc:	da402c15 	stw	r9,176(sp)
 4027f00:	db802a15 	stw	r14,168(sp)
 4027f04:	4026e880 	call	4026e88 <__sprint_r.part.0>
 4027f08:	da402c17 	ldw	r9,176(sp)
 4027f0c:	db802a17 	ldw	r14,168(sp)
 4027f10:	103f761e 	bne	r2,zero,4027cec <__alt_data_end+0xfffe7cec>
 4027f14:	d9401b17 	ldw	r5,108(sp)
 4027f18:	d8801c17 	ldw	r2,112(sp)
 4027f1c:	d811883a 	mov	r8,sp
 4027f20:	29000044 	addi	r4,r5,1
 4027f24:	003d5b06 	br	4027494 <__alt_data_end+0xfffe7494>
 4027f28:	d9402117 	ldw	r5,132(sp)
 4027f2c:	d9002017 	ldw	r4,128(sp)
 4027f30:	d9801a04 	addi	r6,sp,104
 4027f34:	da402c15 	stw	r9,176(sp)
 4027f38:	4026e880 	call	4026e88 <__sprint_r.part.0>
 4027f3c:	da402c17 	ldw	r9,176(sp)
 4027f40:	103f6a1e 	bne	r2,zero,4027cec <__alt_data_end+0xfffe7cec>
 4027f44:	d9401b17 	ldw	r5,108(sp)
 4027f48:	d8801c17 	ldw	r2,112(sp)
 4027f4c:	d811883a 	mov	r8,sp
 4027f50:	29000044 	addi	r4,r5,1
 4027f54:	003f1006 	br	4027b98 <__alt_data_end+0xfffe7b98>
 4027f58:	1000c31e 	bne	r2,zero,4028268 <___vfiprintf_internal_r+0x12cc>
 4027f5c:	01000044 	movi	r4,1
 4027f60:	000b883a 	mov	r5,zero
 4027f64:	d811883a 	mov	r8,sp
 4027f68:	003f0d06 	br	4027ba0 <__alt_data_end+0xfffe7ba0>
 4027f6c:	d9402117 	ldw	r5,132(sp)
 4027f70:	d9002017 	ldw	r4,128(sp)
 4027f74:	d9801a04 	addi	r6,sp,104
 4027f78:	4026e880 	call	4026e88 <__sprint_r.part.0>
 4027f7c:	103f5b1e 	bne	r2,zero,4027cec <__alt_data_end+0xfffe7cec>
 4027f80:	d9001b17 	ldw	r4,108(sp)
 4027f84:	d8801c17 	ldw	r2,112(sp)
 4027f88:	d811883a 	mov	r8,sp
 4027f8c:	21000044 	addi	r4,r4,1
 4027f90:	003d8006 	br	4027594 <__alt_data_end+0xfffe7594>
 4027f94:	010100f4 	movhi	r4,1027
 4027f98:	2100c404 	addi	r4,r4,784
 4027f9c:	d9002615 	stw	r4,152(sp)
 4027fa0:	d8c02215 	stw	r3,136(sp)
 4027fa4:	1029883a 	mov	r20,r2
 4027fa8:	94c4b03a 	or	r2,r18,r19
 4027fac:	103fb21e 	bne	r2,zero,4027e78 <__alt_data_end+0xfffe7e78>
 4027fb0:	0039883a 	mov	fp,zero
 4027fb4:	00800084 	movi	r2,2
 4027fb8:	003e6b06 	br	4027968 <__alt_data_end+0xfffe7968>
 4027fbc:	da802217 	ldw	r10,136(sp)
 4027fc0:	d8001d85 	stb	zero,118(sp)
 4027fc4:	0027883a 	mov	r19,zero
 4027fc8:	50800104 	addi	r2,r10,4
 4027fcc:	54800017 	ldw	r18,0(r10)
 4027fd0:	483e6016 	blt	r9,zero,4027954 <__alt_data_end+0xfffe7954>
 4027fd4:	00ffdfc4 	movi	r3,-129
 4027fd8:	d8802215 	stw	r2,136(sp)
 4027fdc:	a0e8703a 	and	r20,r20,r3
 4027fe0:	0039883a 	mov	fp,zero
 4027fe4:	903ebb26 	beq	r18,zero,4027ad4 <__alt_data_end+0xfffe7ad4>
 4027fe8:	00800244 	movi	r2,9
 4027fec:	14bdee36 	bltu	r2,r18,40277a8 <__alt_data_end+0xfffe77a8>
 4027ff0:	003eba06 	br	4027adc <__alt_data_end+0xfffe7adc>
 4027ff4:	00800c04 	movi	r2,48
 4027ff8:	d8c01d45 	stb	r3,117(sp)
 4027ffc:	d8801d05 	stb	r2,116(sp)
 4028000:	d8001d85 	stb	zero,118(sp)
 4028004:	a0c00094 	ori	r3,r20,2
 4028008:	4800a916 	blt	r9,zero,40282b0 <___vfiprintf_internal_r+0x1314>
 402800c:	00bfdfc4 	movi	r2,-129
 4028010:	a096703a 	and	r11,r20,r2
 4028014:	5d000094 	ori	r20,r11,2
 4028018:	0039883a 	mov	fp,zero
 402801c:	003f9706 	br	4027e7c <__alt_data_end+0xfffe7e7c>
 4028020:	8025883a 	mov	r18,r16
 4028024:	003c2e06 	br	40270e0 <__alt_data_end+0xfffe70e0>
 4028028:	008100f4 	movhi	r2,1027
 402802c:	1080c404 	addi	r2,r2,784
 4028030:	0039883a 	mov	fp,zero
 4028034:	d8802615 	stw	r2,152(sp)
 4028038:	003f9006 	br	4027e7c <__alt_data_end+0xfffe7e7c>
 402803c:	04a5c83a 	sub	r18,zero,r18
 4028040:	07000b44 	movi	fp,45
 4028044:	9004c03a 	cmpne	r2,r18,zero
 4028048:	04e7c83a 	sub	r19,zero,r19
 402804c:	df001d85 	stb	fp,118(sp)
 4028050:	98a7c83a 	sub	r19,r19,r2
 4028054:	48009f16 	blt	r9,zero,40282d4 <___vfiprintf_internal_r+0x1338>
 4028058:	00bfdfc4 	movi	r2,-129
 402805c:	a0a8703a 	and	r20,r20,r2
 4028060:	003dd006 	br	40277a4 <__alt_data_end+0xfffe77a4>
 4028064:	70004c26 	beq	r14,zero,4028198 <___vfiprintf_internal_r+0x11fc>
 4028068:	00800084 	movi	r2,2
 402806c:	d8c01d04 	addi	r3,sp,116
 4028070:	d8c00015 	stw	r3,0(sp)
 4028074:	d8800115 	stw	r2,4(sp)
 4028078:	01000044 	movi	r4,1
 402807c:	d811883a 	mov	r8,sp
 4028080:	003f7306 	br	4027e50 <__alt_data_end+0xfffe7e50>
 4028084:	a080100c 	andi	r2,r20,64
 4028088:	da802217 	ldw	r10,136(sp)
 402808c:	103e0626 	beq	r2,zero,40278a8 <__alt_data_end+0xfffe78a8>
 4028090:	5480000f 	ldh	r18,0(r10)
 4028094:	52800104 	addi	r10,r10,4
 4028098:	da802215 	stw	r10,136(sp)
 402809c:	9027d7fa 	srai	r19,r18,31
 40280a0:	9805883a 	mov	r2,r19
 40280a4:	003db806 	br	4027788 <__alt_data_end+0xfffe7788>
 40280a8:	a080040c 	andi	r2,r20,16
 40280ac:	1000091e 	bne	r2,zero,40280d4 <___vfiprintf_internal_r+0x1138>
 40280b0:	a2c0100c 	andi	r11,r20,64
 40280b4:	58000726 	beq	r11,zero,40280d4 <___vfiprintf_internal_r+0x1138>
 40280b8:	da802217 	ldw	r10,136(sp)
 40280bc:	50800017 	ldw	r2,0(r10)
 40280c0:	52800104 	addi	r10,r10,4
 40280c4:	da802215 	stw	r10,136(sp)
 40280c8:	da802317 	ldw	r10,140(sp)
 40280cc:	1280000d 	sth	r10,0(r2)
 40280d0:	003be706 	br	4027070 <__alt_data_end+0xfffe7070>
 40280d4:	da802217 	ldw	r10,136(sp)
 40280d8:	50800017 	ldw	r2,0(r10)
 40280dc:	52800104 	addi	r10,r10,4
 40280e0:	da802215 	stw	r10,136(sp)
 40280e4:	da802317 	ldw	r10,140(sp)
 40280e8:	12800015 	stw	r10,0(r2)
 40280ec:	003be006 	br	4027070 <__alt_data_end+0xfffe7070>
 40280f0:	a080100c 	andi	r2,r20,64
 40280f4:	da802217 	ldw	r10,136(sp)
 40280f8:	10003026 	beq	r2,zero,40281bc <___vfiprintf_internal_r+0x1220>
 40280fc:	5480000b 	ldhu	r18,0(r10)
 4028100:	52800104 	addi	r10,r10,4
 4028104:	0027883a 	mov	r19,zero
 4028108:	da802215 	stw	r10,136(sp)
 402810c:	003d8006 	br	4027710 <__alt_data_end+0xfffe7710>
 4028110:	80c00007 	ldb	r3,0(r16)
 4028114:	003c0006 	br	4027118 <__alt_data_end+0xfffe7118>
 4028118:	a080100c 	andi	r2,r20,64
 402811c:	d8001d85 	stb	zero,118(sp)
 4028120:	da802217 	ldw	r10,136(sp)
 4028124:	1000201e 	bne	r2,zero,40281a8 <___vfiprintf_internal_r+0x120c>
 4028128:	50800104 	addi	r2,r10,4
 402812c:	54800017 	ldw	r18,0(r10)
 4028130:	0027883a 	mov	r19,zero
 4028134:	483def0e 	bge	r9,zero,40278f4 <__alt_data_end+0xfffe78f4>
 4028138:	94c6b03a 	or	r3,r18,r19
 402813c:	d8802215 	stw	r2,136(sp)
 4028140:	183d4e1e 	bne	r3,zero,402767c <__alt_data_end+0xfffe767c>
 4028144:	0039883a 	mov	fp,zero
 4028148:	0005883a 	mov	r2,zero
 402814c:	003e0606 	br	4027968 <__alt_data_end+0xfffe7968>
 4028150:	d9402117 	ldw	r5,132(sp)
 4028154:	d9002017 	ldw	r4,128(sp)
 4028158:	d9801a04 	addi	r6,sp,104
 402815c:	da402c15 	stw	r9,176(sp)
 4028160:	db802a15 	stw	r14,168(sp)
 4028164:	4026e880 	call	4026e88 <__sprint_r.part.0>
 4028168:	da402c17 	ldw	r9,176(sp)
 402816c:	db802a17 	ldw	r14,168(sp)
 4028170:	103ede1e 	bne	r2,zero,4027cec <__alt_data_end+0xfffe7cec>
 4028174:	d9401b17 	ldw	r5,108(sp)
 4028178:	d8801c17 	ldw	r2,112(sp)
 402817c:	d811883a 	mov	r8,sp
 4028180:	29000044 	addi	r4,r5,1
 4028184:	003e7406 	br	4027b58 <__alt_data_end+0xfffe7b58>
 4028188:	00bfffc4 	movi	r2,-1
 402818c:	003c5806 	br	40272f0 <__alt_data_end+0xfffe72f0>
 4028190:	d811883a 	mov	r8,sp
 4028194:	003ee806 	br	4027d38 <__alt_data_end+0xfffe7d38>
 4028198:	000b883a 	mov	r5,zero
 402819c:	01000044 	movi	r4,1
 40281a0:	d811883a 	mov	r8,sp
 40281a4:	003e7c06 	br	4027b98 <__alt_data_end+0xfffe7b98>
 40281a8:	50800104 	addi	r2,r10,4
 40281ac:	5480000b 	ldhu	r18,0(r10)
 40281b0:	0027883a 	mov	r19,zero
 40281b4:	483dcf0e 	bge	r9,zero,40278f4 <__alt_data_end+0xfffe78f4>
 40281b8:	003fdf06 	br	4028138 <__alt_data_end+0xfffe8138>
 40281bc:	54800017 	ldw	r18,0(r10)
 40281c0:	52800104 	addi	r10,r10,4
 40281c4:	0027883a 	mov	r19,zero
 40281c8:	da802215 	stw	r10,136(sp)
 40281cc:	003d5006 	br	4027710 <__alt_data_end+0xfffe7710>
 40281d0:	50800104 	addi	r2,r10,4
 40281d4:	5480000b 	ldhu	r18,0(r10)
 40281d8:	0027883a 	mov	r19,zero
 40281dc:	483f7d0e 	bge	r9,zero,4027fd4 <__alt_data_end+0xfffe7fd4>
 40281e0:	003ddc06 	br	4027954 <__alt_data_end+0xfffe7954>
 40281e4:	d8c02215 	stw	r3,136(sp)
 40281e8:	0039883a 	mov	fp,zero
 40281ec:	003ddb06 	br	402795c <__alt_data_end+0xfffe795c>
 40281f0:	028100f4 	movhi	r10,1027
 40281f4:	52812504 	addi	r10,r10,1172
 40281f8:	da802415 	stw	r10,144(sp)
 40281fc:	003e8306 	br	4027c0c <__alt_data_end+0xfffe7c0c>
 4028200:	d8801c17 	ldw	r2,112(sp)
 4028204:	dd002117 	ldw	r20,132(sp)
 4028208:	103eb926 	beq	r2,zero,4027cf0 <__alt_data_end+0xfffe7cf0>
 402820c:	d9002017 	ldw	r4,128(sp)
 4028210:	d9801a04 	addi	r6,sp,104
 4028214:	a00b883a 	mov	r5,r20
 4028218:	4026e880 	call	4026e88 <__sprint_r.part.0>
 402821c:	003eb406 	br	4027cf0 <__alt_data_end+0xfffe7cf0>
 4028220:	80c00043 	ldbu	r3,1(r16)
 4028224:	a5000814 	ori	r20,r20,32
 4028228:	84000044 	addi	r16,r16,1
 402822c:	18c03fcc 	andi	r3,r3,255
 4028230:	18c0201c 	xori	r3,r3,128
 4028234:	18ffe004 	addi	r3,r3,-128
 4028238:	003bb706 	br	4027118 <__alt_data_end+0xfffe7118>
 402823c:	a809883a 	mov	r4,r21
 4028240:	d8c02a15 	stw	r3,168(sp)
 4028244:	da002b15 	stw	r8,172(sp)
 4028248:	4026df00 	call	4026df0 <strlen>
 402824c:	d8c02a17 	ldw	r3,168(sp)
 4028250:	1027883a 	mov	r19,r2
 4028254:	df001d83 	ldbu	fp,118(sp)
 4028258:	d8c02215 	stw	r3,136(sp)
 402825c:	0013883a 	mov	r9,zero
 4028260:	da002b17 	ldw	r8,172(sp)
 4028264:	003c4d06 	br	402739c <__alt_data_end+0xfffe739c>
 4028268:	d9402117 	ldw	r5,132(sp)
 402826c:	d9002017 	ldw	r4,128(sp)
 4028270:	d9801a04 	addi	r6,sp,104
 4028274:	da402c15 	stw	r9,176(sp)
 4028278:	4026e880 	call	4026e88 <__sprint_r.part.0>
 402827c:	da402c17 	ldw	r9,176(sp)
 4028280:	103e9a1e 	bne	r2,zero,4027cec <__alt_data_end+0xfffe7cec>
 4028284:	d9401b17 	ldw	r5,108(sp)
 4028288:	d8801c17 	ldw	r2,112(sp)
 402828c:	d811883a 	mov	r8,sp
 4028290:	29000044 	addi	r4,r5,1
 4028294:	003e4206 	br	4027ba0 <__alt_data_end+0xfffe7ba0>
 4028298:	d9401b17 	ldw	r5,108(sp)
 402829c:	010100f4 	movhi	r4,1027
 40282a0:	21012904 	addi	r4,r4,1188
 40282a4:	d9002415 	stw	r4,144(sp)
 40282a8:	29400044 	addi	r5,r5,1
 40282ac:	003c6d06 	br	4027464 <__alt_data_end+0xfffe7464>
 40282b0:	0039883a 	mov	fp,zero
 40282b4:	00800084 	movi	r2,2
 40282b8:	10803fcc 	andi	r2,r2,255
 40282bc:	01000044 	movi	r4,1
 40282c0:	11001e26 	beq	r2,r4,402833c <___vfiprintf_internal_r+0x13a0>
 40282c4:	01000084 	movi	r4,2
 40282c8:	11001e1e 	bne	r2,r4,4028344 <___vfiprintf_internal_r+0x13a8>
 40282cc:	1829883a 	mov	r20,r3
 40282d0:	003eea06 	br	4027e7c <__alt_data_end+0xfffe7e7c>
 40282d4:	a007883a 	mov	r3,r20
 40282d8:	00800044 	movi	r2,1
 40282dc:	003ff606 	br	40282b8 <__alt_data_end+0xfffe82b8>
 40282e0:	00800184 	movi	r2,6
 40282e4:	1240012e 	bgeu	r2,r9,40282ec <___vfiprintf_internal_r+0x1350>
 40282e8:	1013883a 	mov	r9,r2
 40282ec:	4827883a 	mov	r19,r9
 40282f0:	4825883a 	mov	r18,r9
 40282f4:	48001516 	blt	r9,zero,402834c <___vfiprintf_internal_r+0x13b0>
 40282f8:	054100f4 	movhi	r21,1027
 40282fc:	d8c02215 	stw	r3,136(sp)
 4028300:	ad40c904 	addi	r21,r21,804
 4028304:	003d1406 	br	4027758 <__alt_data_end+0xfffe7758>
 4028308:	028100f4 	movhi	r10,1027
 402830c:	52812504 	addi	r10,r10,1172
 4028310:	da802415 	stw	r10,144(sp)
 4028314:	200d883a 	mov	r6,r4
 4028318:	003c9106 	br	4027560 <__alt_data_end+0xfffe7560>
 402831c:	5021883a 	mov	r16,r10
 4028320:	0013883a 	mov	r9,zero
 4028324:	003b7d06 	br	402711c <__alt_data_end+0xfffe711c>
 4028328:	4827883a 	mov	r19,r9
 402832c:	df001d83 	ldbu	fp,118(sp)
 4028330:	d8c02215 	stw	r3,136(sp)
 4028334:	0013883a 	mov	r9,zero
 4028338:	003c1806 	br	402739c <__alt_data_end+0xfffe739c>
 402833c:	1829883a 	mov	r20,r3
 4028340:	003d1806 	br	40277a4 <__alt_data_end+0xfffe77a4>
 4028344:	1829883a 	mov	r20,r3
 4028348:	003ccd06 	br	4027680 <__alt_data_end+0xfffe7680>
 402834c:	0025883a 	mov	r18,zero
 4028350:	003fe906 	br	40282f8 <__alt_data_end+0xfffe82f8>
 4028354:	d8802217 	ldw	r2,136(sp)
 4028358:	80c00043 	ldbu	r3,1(r16)
 402835c:	5021883a 	mov	r16,r10
 4028360:	12400017 	ldw	r9,0(r2)
 4028364:	10800104 	addi	r2,r2,4
 4028368:	d8802215 	stw	r2,136(sp)
 402836c:	483faf0e 	bge	r9,zero,402822c <__alt_data_end+0xfffe822c>
 4028370:	18c03fcc 	andi	r3,r3,255
 4028374:	18c0201c 	xori	r3,r3,128
 4028378:	027fffc4 	movi	r9,-1
 402837c:	18ffe004 	addi	r3,r3,-128
 4028380:	003b6506 	br	4027118 <__alt_data_end+0xfffe7118>
 4028384:	d9c01d85 	stb	r7,118(sp)
 4028388:	003ca006 	br	402760c <__alt_data_end+0xfffe760c>
 402838c:	d9c01d85 	stb	r7,118(sp)
 4028390:	003cad06 	br	4027648 <__alt_data_end+0xfffe7648>
 4028394:	d9c01d85 	stb	r7,118(sp)
 4028398:	003d7d06 	br	4027990 <__alt_data_end+0xfffe7990>
 402839c:	d9c01d85 	stb	r7,118(sp)
 40283a0:	003d5f06 	br	4027920 <__alt_data_end+0xfffe7920>
 40283a4:	a080004c 	andi	r2,r20,1
 40283a8:	0039883a 	mov	fp,zero
 40283ac:	10000526 	beq	r2,zero,40283c4 <___vfiprintf_internal_r+0x1428>
 40283b0:	00800c04 	movi	r2,48
 40283b4:	d88019c5 	stb	r2,103(sp)
 40283b8:	dcc02717 	ldw	r19,156(sp)
 40283bc:	dd4019c4 	addi	r21,sp,103
 40283c0:	003bf606 	br	402739c <__alt_data_end+0xfffe739c>
 40283c4:	0027883a 	mov	r19,zero
 40283c8:	dd401a04 	addi	r21,sp,104
 40283cc:	003bf306 	br	402739c <__alt_data_end+0xfffe739c>
 40283d0:	d9c01d85 	stb	r7,118(sp)
 40283d4:	003dc806 	br	4027af8 <__alt_data_end+0xfffe7af8>
 40283d8:	d9c01d85 	stb	r7,118(sp)
 40283dc:	003d3a06 	br	40278c8 <__alt_data_end+0xfffe78c8>
 40283e0:	d9c01d85 	stb	r7,118(sp)
 40283e4:	003d2a06 	br	4027890 <__alt_data_end+0xfffe7890>
 40283e8:	d9c01d85 	stb	r7,118(sp)
 40283ec:	003cde06 	br	4027768 <__alt_data_end+0xfffe7768>
 40283f0:	d9c01d85 	stb	r7,118(sp)
 40283f4:	003cbc06 	br	40276e8 <__alt_data_end+0xfffe76e8>

040283f8 <__vfiprintf_internal>:
 40283f8:	008100f4 	movhi	r2,1027
 40283fc:	10887f04 	addi	r2,r2,8700
 4028400:	300f883a 	mov	r7,r6
 4028404:	280d883a 	mov	r6,r5
 4028408:	200b883a 	mov	r5,r4
 402840c:	11000017 	ldw	r4,0(r2)
 4028410:	4026f9c1 	jmpi	4026f9c <___vfiprintf_internal_r>

04028414 <__sbprintf>:
 4028414:	2880030b 	ldhu	r2,12(r5)
 4028418:	2ac01917 	ldw	r11,100(r5)
 402841c:	2a80038b 	ldhu	r10,14(r5)
 4028420:	2a400717 	ldw	r9,28(r5)
 4028424:	2a000917 	ldw	r8,36(r5)
 4028428:	defee204 	addi	sp,sp,-1144
 402842c:	00c10004 	movi	r3,1024
 4028430:	dc011a15 	stw	r16,1128(sp)
 4028434:	10bfff4c 	andi	r2,r2,65533
 4028438:	2821883a 	mov	r16,r5
 402843c:	d8cb883a 	add	r5,sp,r3
 4028440:	dc811c15 	stw	r18,1136(sp)
 4028444:	dc411b15 	stw	r17,1132(sp)
 4028448:	dfc11d15 	stw	ra,1140(sp)
 402844c:	2025883a 	mov	r18,r4
 4028450:	d881030d 	sth	r2,1036(sp)
 4028454:	dac11915 	stw	r11,1124(sp)
 4028458:	da81038d 	sth	r10,1038(sp)
 402845c:	da410715 	stw	r9,1052(sp)
 4028460:	da010915 	stw	r8,1060(sp)
 4028464:	dec10015 	stw	sp,1024(sp)
 4028468:	dec10415 	stw	sp,1040(sp)
 402846c:	d8c10215 	stw	r3,1032(sp)
 4028470:	d8c10515 	stw	r3,1044(sp)
 4028474:	d8010615 	stw	zero,1048(sp)
 4028478:	4026f9c0 	call	4026f9c <___vfiprintf_internal_r>
 402847c:	1023883a 	mov	r17,r2
 4028480:	10000416 	blt	r2,zero,4028494 <__sbprintf+0x80>
 4028484:	d9410004 	addi	r5,sp,1024
 4028488:	9009883a 	mov	r4,r18
 402848c:	40243340 	call	4024334 <_fflush_r>
 4028490:	10000d1e 	bne	r2,zero,40284c8 <__sbprintf+0xb4>
 4028494:	d881030b 	ldhu	r2,1036(sp)
 4028498:	1080100c 	andi	r2,r2,64
 402849c:	10000326 	beq	r2,zero,40284ac <__sbprintf+0x98>
 40284a0:	8080030b 	ldhu	r2,12(r16)
 40284a4:	10801014 	ori	r2,r2,64
 40284a8:	8080030d 	sth	r2,12(r16)
 40284ac:	8805883a 	mov	r2,r17
 40284b0:	dfc11d17 	ldw	ra,1140(sp)
 40284b4:	dc811c17 	ldw	r18,1136(sp)
 40284b8:	dc411b17 	ldw	r17,1132(sp)
 40284bc:	dc011a17 	ldw	r16,1128(sp)
 40284c0:	dec11e04 	addi	sp,sp,1144
 40284c4:	f800283a 	ret
 40284c8:	047fffc4 	movi	r17,-1
 40284cc:	003ff106 	br	4028494 <__alt_data_end+0xfffe8494>

040284d0 <_write_r>:
 40284d0:	defffd04 	addi	sp,sp,-12
 40284d4:	2805883a 	mov	r2,r5
 40284d8:	dc000015 	stw	r16,0(sp)
 40284dc:	040100f4 	movhi	r16,1027
 40284e0:	dc400115 	stw	r17,4(sp)
 40284e4:	300b883a 	mov	r5,r6
 40284e8:	840f9204 	addi	r16,r16,15944
 40284ec:	2023883a 	mov	r17,r4
 40284f0:	380d883a 	mov	r6,r7
 40284f4:	1009883a 	mov	r4,r2
 40284f8:	dfc00215 	stw	ra,8(sp)
 40284fc:	80000015 	stw	zero,0(r16)
 4028500:	402d4c80 	call	402d4c8 <write>
 4028504:	00ffffc4 	movi	r3,-1
 4028508:	10c00526 	beq	r2,r3,4028520 <_write_r+0x50>
 402850c:	dfc00217 	ldw	ra,8(sp)
 4028510:	dc400117 	ldw	r17,4(sp)
 4028514:	dc000017 	ldw	r16,0(sp)
 4028518:	dec00304 	addi	sp,sp,12
 402851c:	f800283a 	ret
 4028520:	80c00017 	ldw	r3,0(r16)
 4028524:	183ff926 	beq	r3,zero,402850c <__alt_data_end+0xfffe850c>
 4028528:	88c00015 	stw	r3,0(r17)
 402852c:	003ff706 	br	402850c <__alt_data_end+0xfffe850c>

04028530 <_close_r>:
 4028530:	defffd04 	addi	sp,sp,-12
 4028534:	dc000015 	stw	r16,0(sp)
 4028538:	040100f4 	movhi	r16,1027
 402853c:	dc400115 	stw	r17,4(sp)
 4028540:	840f9204 	addi	r16,r16,15944
 4028544:	2023883a 	mov	r17,r4
 4028548:	2809883a 	mov	r4,r5
 402854c:	dfc00215 	stw	ra,8(sp)
 4028550:	80000015 	stw	zero,0(r16)
 4028554:	402cc880 	call	402cc88 <close>
 4028558:	00ffffc4 	movi	r3,-1
 402855c:	10c00526 	beq	r2,r3,4028574 <_close_r+0x44>
 4028560:	dfc00217 	ldw	ra,8(sp)
 4028564:	dc400117 	ldw	r17,4(sp)
 4028568:	dc000017 	ldw	r16,0(sp)
 402856c:	dec00304 	addi	sp,sp,12
 4028570:	f800283a 	ret
 4028574:	80c00017 	ldw	r3,0(r16)
 4028578:	183ff926 	beq	r3,zero,4028560 <__alt_data_end+0xfffe8560>
 402857c:	88c00015 	stw	r3,0(r17)
 4028580:	003ff706 	br	4028560 <__alt_data_end+0xfffe8560>

04028584 <_calloc_r>:
 4028584:	298b383a 	mul	r5,r5,r6
 4028588:	defffe04 	addi	sp,sp,-8
 402858c:	dfc00115 	stw	ra,4(sp)
 4028590:	dc000015 	stw	r16,0(sp)
 4028594:	4024fb40 	call	4024fb4 <_malloc_r>
 4028598:	10002926 	beq	r2,zero,4028640 <_calloc_r+0xbc>
 402859c:	11bfff17 	ldw	r6,-4(r2)
 40285a0:	1021883a 	mov	r16,r2
 40285a4:	00bfff04 	movi	r2,-4
 40285a8:	308c703a 	and	r6,r6,r2
 40285ac:	00c00904 	movi	r3,36
 40285b0:	308d883a 	add	r6,r6,r2
 40285b4:	19801636 	bltu	r3,r6,4028610 <_calloc_r+0x8c>
 40285b8:	008004c4 	movi	r2,19
 40285bc:	11800b2e 	bgeu	r2,r6,40285ec <_calloc_r+0x68>
 40285c0:	80000015 	stw	zero,0(r16)
 40285c4:	80000115 	stw	zero,4(r16)
 40285c8:	008006c4 	movi	r2,27
 40285cc:	11801a2e 	bgeu	r2,r6,4028638 <_calloc_r+0xb4>
 40285d0:	80000215 	stw	zero,8(r16)
 40285d4:	80000315 	stw	zero,12(r16)
 40285d8:	30c0151e 	bne	r6,r3,4028630 <_calloc_r+0xac>
 40285dc:	80000415 	stw	zero,16(r16)
 40285e0:	80800604 	addi	r2,r16,24
 40285e4:	80000515 	stw	zero,20(r16)
 40285e8:	00000106 	br	40285f0 <_calloc_r+0x6c>
 40285ec:	8005883a 	mov	r2,r16
 40285f0:	10000015 	stw	zero,0(r2)
 40285f4:	10000115 	stw	zero,4(r2)
 40285f8:	10000215 	stw	zero,8(r2)
 40285fc:	8005883a 	mov	r2,r16
 4028600:	dfc00117 	ldw	ra,4(sp)
 4028604:	dc000017 	ldw	r16,0(sp)
 4028608:	dec00204 	addi	sp,sp,8
 402860c:	f800283a 	ret
 4028610:	000b883a 	mov	r5,zero
 4028614:	8009883a 	mov	r4,r16
 4028618:	40259ec0 	call	40259ec <memset>
 402861c:	8005883a 	mov	r2,r16
 4028620:	dfc00117 	ldw	ra,4(sp)
 4028624:	dc000017 	ldw	r16,0(sp)
 4028628:	dec00204 	addi	sp,sp,8
 402862c:	f800283a 	ret
 4028630:	80800404 	addi	r2,r16,16
 4028634:	003fee06 	br	40285f0 <__alt_data_end+0xfffe85f0>
 4028638:	80800204 	addi	r2,r16,8
 402863c:	003fec06 	br	40285f0 <__alt_data_end+0xfffe85f0>
 4028640:	0005883a 	mov	r2,zero
 4028644:	003fee06 	br	4028600 <__alt_data_end+0xfffe8600>

04028648 <_fclose_r>:
 4028648:	28003926 	beq	r5,zero,4028730 <_fclose_r+0xe8>
 402864c:	defffc04 	addi	sp,sp,-16
 4028650:	dc400115 	stw	r17,4(sp)
 4028654:	dc000015 	stw	r16,0(sp)
 4028658:	dfc00315 	stw	ra,12(sp)
 402865c:	dc800215 	stw	r18,8(sp)
 4028660:	2023883a 	mov	r17,r4
 4028664:	2821883a 	mov	r16,r5
 4028668:	20000226 	beq	r4,zero,4028674 <_fclose_r+0x2c>
 402866c:	20800e17 	ldw	r2,56(r4)
 4028670:	10002726 	beq	r2,zero,4028710 <_fclose_r+0xc8>
 4028674:	8080030f 	ldh	r2,12(r16)
 4028678:	1000071e 	bne	r2,zero,4028698 <_fclose_r+0x50>
 402867c:	0005883a 	mov	r2,zero
 4028680:	dfc00317 	ldw	ra,12(sp)
 4028684:	dc800217 	ldw	r18,8(sp)
 4028688:	dc400117 	ldw	r17,4(sp)
 402868c:	dc000017 	ldw	r16,0(sp)
 4028690:	dec00404 	addi	sp,sp,16
 4028694:	f800283a 	ret
 4028698:	800b883a 	mov	r5,r16
 402869c:	8809883a 	mov	r4,r17
 40286a0:	40241180 	call	4024118 <__sflush_r>
 40286a4:	1025883a 	mov	r18,r2
 40286a8:	80800b17 	ldw	r2,44(r16)
 40286ac:	10000426 	beq	r2,zero,40286c0 <_fclose_r+0x78>
 40286b0:	81400717 	ldw	r5,28(r16)
 40286b4:	8809883a 	mov	r4,r17
 40286b8:	103ee83a 	callr	r2
 40286bc:	10001616 	blt	r2,zero,4028718 <_fclose_r+0xd0>
 40286c0:	8080030b 	ldhu	r2,12(r16)
 40286c4:	1080200c 	andi	r2,r2,128
 40286c8:	1000151e 	bne	r2,zero,4028720 <_fclose_r+0xd8>
 40286cc:	81400c17 	ldw	r5,48(r16)
 40286d0:	28000526 	beq	r5,zero,40286e8 <_fclose_r+0xa0>
 40286d4:	80801004 	addi	r2,r16,64
 40286d8:	28800226 	beq	r5,r2,40286e4 <_fclose_r+0x9c>
 40286dc:	8809883a 	mov	r4,r17
 40286e0:	40248840 	call	4024884 <_free_r>
 40286e4:	80000c15 	stw	zero,48(r16)
 40286e8:	81401117 	ldw	r5,68(r16)
 40286ec:	28000326 	beq	r5,zero,40286fc <_fclose_r+0xb4>
 40286f0:	8809883a 	mov	r4,r17
 40286f4:	40248840 	call	4024884 <_free_r>
 40286f8:	80001115 	stw	zero,68(r16)
 40286fc:	40247200 	call	4024720 <__sfp_lock_acquire>
 4028700:	8000030d 	sth	zero,12(r16)
 4028704:	40247240 	call	4024724 <__sfp_lock_release>
 4028708:	9005883a 	mov	r2,r18
 402870c:	003fdc06 	br	4028680 <__alt_data_end+0xfffe8680>
 4028710:	40247100 	call	4024710 <__sinit>
 4028714:	003fd706 	br	4028674 <__alt_data_end+0xfffe8674>
 4028718:	04bfffc4 	movi	r18,-1
 402871c:	003fe806 	br	40286c0 <__alt_data_end+0xfffe86c0>
 4028720:	81400417 	ldw	r5,16(r16)
 4028724:	8809883a 	mov	r4,r17
 4028728:	40248840 	call	4024884 <_free_r>
 402872c:	003fe706 	br	40286cc <__alt_data_end+0xfffe86cc>
 4028730:	0005883a 	mov	r2,zero
 4028734:	f800283a 	ret

04028738 <fclose>:
 4028738:	008100f4 	movhi	r2,1027
 402873c:	10887f04 	addi	r2,r2,8700
 4028740:	200b883a 	mov	r5,r4
 4028744:	11000017 	ldw	r4,0(r2)
 4028748:	40286481 	jmpi	4028648 <_fclose_r>

0402874c <__fputwc>:
 402874c:	defff804 	addi	sp,sp,-32
 4028750:	dcc00415 	stw	r19,16(sp)
 4028754:	dc800315 	stw	r18,12(sp)
 4028758:	dc000115 	stw	r16,4(sp)
 402875c:	dfc00715 	stw	ra,28(sp)
 4028760:	dd400615 	stw	r21,24(sp)
 4028764:	dd000515 	stw	r20,20(sp)
 4028768:	dc400215 	stw	r17,8(sp)
 402876c:	2027883a 	mov	r19,r4
 4028770:	2825883a 	mov	r18,r5
 4028774:	3021883a 	mov	r16,r6
 4028778:	4024da40 	call	4024da4 <__locale_mb_cur_max>
 402877c:	00c00044 	movi	r3,1
 4028780:	10c03e26 	beq	r2,r3,402887c <__fputwc+0x130>
 4028784:	81c01704 	addi	r7,r16,92
 4028788:	900d883a 	mov	r6,r18
 402878c:	d80b883a 	mov	r5,sp
 4028790:	9809883a 	mov	r4,r19
 4028794:	40297980 	call	4029798 <_wcrtomb_r>
 4028798:	1029883a 	mov	r20,r2
 402879c:	00bfffc4 	movi	r2,-1
 40287a0:	a0802026 	beq	r20,r2,4028824 <__fputwc+0xd8>
 40287a4:	d9400003 	ldbu	r5,0(sp)
 40287a8:	a0001c26 	beq	r20,zero,402881c <__fputwc+0xd0>
 40287ac:	0023883a 	mov	r17,zero
 40287b0:	05400284 	movi	r21,10
 40287b4:	00000906 	br	40287dc <__fputwc+0x90>
 40287b8:	80800017 	ldw	r2,0(r16)
 40287bc:	11400005 	stb	r5,0(r2)
 40287c0:	80c00017 	ldw	r3,0(r16)
 40287c4:	18c00044 	addi	r3,r3,1
 40287c8:	80c00015 	stw	r3,0(r16)
 40287cc:	8c400044 	addi	r17,r17,1
 40287d0:	dc45883a 	add	r2,sp,r17
 40287d4:	8d00112e 	bgeu	r17,r20,402881c <__fputwc+0xd0>
 40287d8:	11400003 	ldbu	r5,0(r2)
 40287dc:	80c00217 	ldw	r3,8(r16)
 40287e0:	18ffffc4 	addi	r3,r3,-1
 40287e4:	80c00215 	stw	r3,8(r16)
 40287e8:	183ff30e 	bge	r3,zero,40287b8 <__alt_data_end+0xfffe87b8>
 40287ec:	80800617 	ldw	r2,24(r16)
 40287f0:	18801916 	blt	r3,r2,4028858 <__fputwc+0x10c>
 40287f4:	80800017 	ldw	r2,0(r16)
 40287f8:	11400005 	stb	r5,0(r2)
 40287fc:	80800017 	ldw	r2,0(r16)
 4028800:	10c00003 	ldbu	r3,0(r2)
 4028804:	10800044 	addi	r2,r2,1
 4028808:	1d402326 	beq	r3,r21,4028898 <__fputwc+0x14c>
 402880c:	80800015 	stw	r2,0(r16)
 4028810:	8c400044 	addi	r17,r17,1
 4028814:	dc45883a 	add	r2,sp,r17
 4028818:	8d3fef36 	bltu	r17,r20,40287d8 <__alt_data_end+0xfffe87d8>
 402881c:	9005883a 	mov	r2,r18
 4028820:	00000406 	br	4028834 <__fputwc+0xe8>
 4028824:	80c0030b 	ldhu	r3,12(r16)
 4028828:	a005883a 	mov	r2,r20
 402882c:	18c01014 	ori	r3,r3,64
 4028830:	80c0030d 	sth	r3,12(r16)
 4028834:	dfc00717 	ldw	ra,28(sp)
 4028838:	dd400617 	ldw	r21,24(sp)
 402883c:	dd000517 	ldw	r20,20(sp)
 4028840:	dcc00417 	ldw	r19,16(sp)
 4028844:	dc800317 	ldw	r18,12(sp)
 4028848:	dc400217 	ldw	r17,8(sp)
 402884c:	dc000117 	ldw	r16,4(sp)
 4028850:	dec00804 	addi	sp,sp,32
 4028854:	f800283a 	ret
 4028858:	800d883a 	mov	r6,r16
 402885c:	29403fcc 	andi	r5,r5,255
 4028860:	9809883a 	mov	r4,r19
 4028864:	40296400 	call	4029640 <__swbuf_r>
 4028868:	10bfffe0 	cmpeqi	r2,r2,-1
 402886c:	10803fcc 	andi	r2,r2,255
 4028870:	103fd626 	beq	r2,zero,40287cc <__alt_data_end+0xfffe87cc>
 4028874:	00bfffc4 	movi	r2,-1
 4028878:	003fee06 	br	4028834 <__alt_data_end+0xfffe8834>
 402887c:	90ffffc4 	addi	r3,r18,-1
 4028880:	01003f84 	movi	r4,254
 4028884:	20ffbf36 	bltu	r4,r3,4028784 <__alt_data_end+0xfffe8784>
 4028888:	900b883a 	mov	r5,r18
 402888c:	dc800005 	stb	r18,0(sp)
 4028890:	1029883a 	mov	r20,r2
 4028894:	003fc506 	br	40287ac <__alt_data_end+0xfffe87ac>
 4028898:	800d883a 	mov	r6,r16
 402889c:	a80b883a 	mov	r5,r21
 40288a0:	9809883a 	mov	r4,r19
 40288a4:	40296400 	call	4029640 <__swbuf_r>
 40288a8:	10bfffe0 	cmpeqi	r2,r2,-1
 40288ac:	003fef06 	br	402886c <__alt_data_end+0xfffe886c>

040288b0 <_fputwc_r>:
 40288b0:	3080030b 	ldhu	r2,12(r6)
 40288b4:	10c8000c 	andi	r3,r2,8192
 40288b8:	1800051e 	bne	r3,zero,40288d0 <_fputwc_r+0x20>
 40288bc:	30c01917 	ldw	r3,100(r6)
 40288c0:	10880014 	ori	r2,r2,8192
 40288c4:	3080030d 	sth	r2,12(r6)
 40288c8:	18880014 	ori	r2,r3,8192
 40288cc:	30801915 	stw	r2,100(r6)
 40288d0:	402874c1 	jmpi	402874c <__fputwc>

040288d4 <fputwc>:
 40288d4:	008100f4 	movhi	r2,1027
 40288d8:	defffc04 	addi	sp,sp,-16
 40288dc:	10887f04 	addi	r2,r2,8700
 40288e0:	dc000115 	stw	r16,4(sp)
 40288e4:	14000017 	ldw	r16,0(r2)
 40288e8:	dc400215 	stw	r17,8(sp)
 40288ec:	dfc00315 	stw	ra,12(sp)
 40288f0:	2023883a 	mov	r17,r4
 40288f4:	80000226 	beq	r16,zero,4028900 <fputwc+0x2c>
 40288f8:	80800e17 	ldw	r2,56(r16)
 40288fc:	10001026 	beq	r2,zero,4028940 <fputwc+0x6c>
 4028900:	2880030b 	ldhu	r2,12(r5)
 4028904:	10c8000c 	andi	r3,r2,8192
 4028908:	1800051e 	bne	r3,zero,4028920 <fputwc+0x4c>
 402890c:	28c01917 	ldw	r3,100(r5)
 4028910:	10880014 	ori	r2,r2,8192
 4028914:	2880030d 	sth	r2,12(r5)
 4028918:	18880014 	ori	r2,r3,8192
 402891c:	28801915 	stw	r2,100(r5)
 4028920:	280d883a 	mov	r6,r5
 4028924:	8009883a 	mov	r4,r16
 4028928:	880b883a 	mov	r5,r17
 402892c:	dfc00317 	ldw	ra,12(sp)
 4028930:	dc400217 	ldw	r17,8(sp)
 4028934:	dc000117 	ldw	r16,4(sp)
 4028938:	dec00404 	addi	sp,sp,16
 402893c:	402874c1 	jmpi	402874c <__fputwc>
 4028940:	8009883a 	mov	r4,r16
 4028944:	d9400015 	stw	r5,0(sp)
 4028948:	40247100 	call	4024710 <__sinit>
 402894c:	d9400017 	ldw	r5,0(sp)
 4028950:	003feb06 	br	4028900 <__alt_data_end+0xfffe8900>

04028954 <_fstat_r>:
 4028954:	defffd04 	addi	sp,sp,-12
 4028958:	2805883a 	mov	r2,r5
 402895c:	dc000015 	stw	r16,0(sp)
 4028960:	040100f4 	movhi	r16,1027
 4028964:	dc400115 	stw	r17,4(sp)
 4028968:	840f9204 	addi	r16,r16,15944
 402896c:	2023883a 	mov	r17,r4
 4028970:	300b883a 	mov	r5,r6
 4028974:	1009883a 	mov	r4,r2
 4028978:	dfc00215 	stw	ra,8(sp)
 402897c:	80000015 	stw	zero,0(r16)
 4028980:	402cdc00 	call	402cdc0 <fstat>
 4028984:	00ffffc4 	movi	r3,-1
 4028988:	10c00526 	beq	r2,r3,40289a0 <_fstat_r+0x4c>
 402898c:	dfc00217 	ldw	ra,8(sp)
 4028990:	dc400117 	ldw	r17,4(sp)
 4028994:	dc000017 	ldw	r16,0(sp)
 4028998:	dec00304 	addi	sp,sp,12
 402899c:	f800283a 	ret
 40289a0:	80c00017 	ldw	r3,0(r16)
 40289a4:	183ff926 	beq	r3,zero,402898c <__alt_data_end+0xfffe898c>
 40289a8:	88c00015 	stw	r3,0(r17)
 40289ac:	003ff706 	br	402898c <__alt_data_end+0xfffe898c>

040289b0 <__sfvwrite_r>:
 40289b0:	30800217 	ldw	r2,8(r6)
 40289b4:	10006726 	beq	r2,zero,4028b54 <__sfvwrite_r+0x1a4>
 40289b8:	28c0030b 	ldhu	r3,12(r5)
 40289bc:	defff404 	addi	sp,sp,-48
 40289c0:	dd400715 	stw	r21,28(sp)
 40289c4:	dd000615 	stw	r20,24(sp)
 40289c8:	dc000215 	stw	r16,8(sp)
 40289cc:	dfc00b15 	stw	ra,44(sp)
 40289d0:	df000a15 	stw	fp,40(sp)
 40289d4:	ddc00915 	stw	r23,36(sp)
 40289d8:	dd800815 	stw	r22,32(sp)
 40289dc:	dcc00515 	stw	r19,20(sp)
 40289e0:	dc800415 	stw	r18,16(sp)
 40289e4:	dc400315 	stw	r17,12(sp)
 40289e8:	1880020c 	andi	r2,r3,8
 40289ec:	2821883a 	mov	r16,r5
 40289f0:	202b883a 	mov	r21,r4
 40289f4:	3029883a 	mov	r20,r6
 40289f8:	10002726 	beq	r2,zero,4028a98 <__sfvwrite_r+0xe8>
 40289fc:	28800417 	ldw	r2,16(r5)
 4028a00:	10002526 	beq	r2,zero,4028a98 <__sfvwrite_r+0xe8>
 4028a04:	1880008c 	andi	r2,r3,2
 4028a08:	a4400017 	ldw	r17,0(r20)
 4028a0c:	10002a26 	beq	r2,zero,4028ab8 <__sfvwrite_r+0x108>
 4028a10:	05a00034 	movhi	r22,32768
 4028a14:	0027883a 	mov	r19,zero
 4028a18:	0025883a 	mov	r18,zero
 4028a1c:	b5bf0004 	addi	r22,r22,-1024
 4028a20:	980d883a 	mov	r6,r19
 4028a24:	a809883a 	mov	r4,r21
 4028a28:	90004626 	beq	r18,zero,4028b44 <__sfvwrite_r+0x194>
 4028a2c:	900f883a 	mov	r7,r18
 4028a30:	b480022e 	bgeu	r22,r18,4028a3c <__sfvwrite_r+0x8c>
 4028a34:	01e00034 	movhi	r7,32768
 4028a38:	39ff0004 	addi	r7,r7,-1024
 4028a3c:	80800917 	ldw	r2,36(r16)
 4028a40:	81400717 	ldw	r5,28(r16)
 4028a44:	103ee83a 	callr	r2
 4028a48:	0080570e 	bge	zero,r2,4028ba8 <__sfvwrite_r+0x1f8>
 4028a4c:	a0c00217 	ldw	r3,8(r20)
 4028a50:	98a7883a 	add	r19,r19,r2
 4028a54:	90a5c83a 	sub	r18,r18,r2
 4028a58:	1885c83a 	sub	r2,r3,r2
 4028a5c:	a0800215 	stw	r2,8(r20)
 4028a60:	103fef1e 	bne	r2,zero,4028a20 <__alt_data_end+0xfffe8a20>
 4028a64:	0005883a 	mov	r2,zero
 4028a68:	dfc00b17 	ldw	ra,44(sp)
 4028a6c:	df000a17 	ldw	fp,40(sp)
 4028a70:	ddc00917 	ldw	r23,36(sp)
 4028a74:	dd800817 	ldw	r22,32(sp)
 4028a78:	dd400717 	ldw	r21,28(sp)
 4028a7c:	dd000617 	ldw	r20,24(sp)
 4028a80:	dcc00517 	ldw	r19,20(sp)
 4028a84:	dc800417 	ldw	r18,16(sp)
 4028a88:	dc400317 	ldw	r17,12(sp)
 4028a8c:	dc000217 	ldw	r16,8(sp)
 4028a90:	dec00c04 	addi	sp,sp,48
 4028a94:	f800283a 	ret
 4028a98:	800b883a 	mov	r5,r16
 4028a9c:	a809883a 	mov	r4,r21
 4028aa0:	402273c0 	call	402273c <__swsetup_r>
 4028aa4:	1000eb1e 	bne	r2,zero,4028e54 <__sfvwrite_r+0x4a4>
 4028aa8:	80c0030b 	ldhu	r3,12(r16)
 4028aac:	a4400017 	ldw	r17,0(r20)
 4028ab0:	1880008c 	andi	r2,r3,2
 4028ab4:	103fd61e 	bne	r2,zero,4028a10 <__alt_data_end+0xfffe8a10>
 4028ab8:	1880004c 	andi	r2,r3,1
 4028abc:	10003f1e 	bne	r2,zero,4028bbc <__sfvwrite_r+0x20c>
 4028ac0:	0039883a 	mov	fp,zero
 4028ac4:	0025883a 	mov	r18,zero
 4028ac8:	90001a26 	beq	r18,zero,4028b34 <__sfvwrite_r+0x184>
 4028acc:	1880800c 	andi	r2,r3,512
 4028ad0:	84c00217 	ldw	r19,8(r16)
 4028ad4:	10002126 	beq	r2,zero,4028b5c <__sfvwrite_r+0x1ac>
 4028ad8:	982f883a 	mov	r23,r19
 4028adc:	94c09336 	bltu	r18,r19,4028d2c <__sfvwrite_r+0x37c>
 4028ae0:	1881200c 	andi	r2,r3,1152
 4028ae4:	10009e1e 	bne	r2,zero,4028d60 <__sfvwrite_r+0x3b0>
 4028ae8:	81000017 	ldw	r4,0(r16)
 4028aec:	b80d883a 	mov	r6,r23
 4028af0:	e00b883a 	mov	r5,fp
 4028af4:	4028f200 	call	4028f20 <memmove>
 4028af8:	80c00217 	ldw	r3,8(r16)
 4028afc:	81000017 	ldw	r4,0(r16)
 4028b00:	9005883a 	mov	r2,r18
 4028b04:	1ce7c83a 	sub	r19,r3,r19
 4028b08:	25cf883a 	add	r7,r4,r23
 4028b0c:	84c00215 	stw	r19,8(r16)
 4028b10:	81c00015 	stw	r7,0(r16)
 4028b14:	a0c00217 	ldw	r3,8(r20)
 4028b18:	e0b9883a 	add	fp,fp,r2
 4028b1c:	90a5c83a 	sub	r18,r18,r2
 4028b20:	18a7c83a 	sub	r19,r3,r2
 4028b24:	a4c00215 	stw	r19,8(r20)
 4028b28:	983fce26 	beq	r19,zero,4028a64 <__alt_data_end+0xfffe8a64>
 4028b2c:	80c0030b 	ldhu	r3,12(r16)
 4028b30:	903fe61e 	bne	r18,zero,4028acc <__alt_data_end+0xfffe8acc>
 4028b34:	8f000017 	ldw	fp,0(r17)
 4028b38:	8c800117 	ldw	r18,4(r17)
 4028b3c:	8c400204 	addi	r17,r17,8
 4028b40:	003fe106 	br	4028ac8 <__alt_data_end+0xfffe8ac8>
 4028b44:	8cc00017 	ldw	r19,0(r17)
 4028b48:	8c800117 	ldw	r18,4(r17)
 4028b4c:	8c400204 	addi	r17,r17,8
 4028b50:	003fb306 	br	4028a20 <__alt_data_end+0xfffe8a20>
 4028b54:	0005883a 	mov	r2,zero
 4028b58:	f800283a 	ret
 4028b5c:	81000017 	ldw	r4,0(r16)
 4028b60:	80800417 	ldw	r2,16(r16)
 4028b64:	11005736 	bltu	r2,r4,4028cc4 <__sfvwrite_r+0x314>
 4028b68:	85c00517 	ldw	r23,20(r16)
 4028b6c:	95c05536 	bltu	r18,r23,4028cc4 <__sfvwrite_r+0x314>
 4028b70:	00a00034 	movhi	r2,32768
 4028b74:	10bfffc4 	addi	r2,r2,-1
 4028b78:	9009883a 	mov	r4,r18
 4028b7c:	1480012e 	bgeu	r2,r18,4028b84 <__sfvwrite_r+0x1d4>
 4028b80:	1009883a 	mov	r4,r2
 4028b84:	b80b883a 	mov	r5,r23
 4028b88:	402a4300 	call	402a430 <__divsi3>
 4028b8c:	15cf383a 	mul	r7,r2,r23
 4028b90:	81400717 	ldw	r5,28(r16)
 4028b94:	80800917 	ldw	r2,36(r16)
 4028b98:	e00d883a 	mov	r6,fp
 4028b9c:	a809883a 	mov	r4,r21
 4028ba0:	103ee83a 	callr	r2
 4028ba4:	00bfdb16 	blt	zero,r2,4028b14 <__alt_data_end+0xfffe8b14>
 4028ba8:	8080030b 	ldhu	r2,12(r16)
 4028bac:	10801014 	ori	r2,r2,64
 4028bb0:	8080030d 	sth	r2,12(r16)
 4028bb4:	00bfffc4 	movi	r2,-1
 4028bb8:	003fab06 	br	4028a68 <__alt_data_end+0xfffe8a68>
 4028bbc:	0027883a 	mov	r19,zero
 4028bc0:	0011883a 	mov	r8,zero
 4028bc4:	0039883a 	mov	fp,zero
 4028bc8:	0025883a 	mov	r18,zero
 4028bcc:	90001f26 	beq	r18,zero,4028c4c <__sfvwrite_r+0x29c>
 4028bd0:	40005a26 	beq	r8,zero,4028d3c <__sfvwrite_r+0x38c>
 4028bd4:	982d883a 	mov	r22,r19
 4028bd8:	94c0012e 	bgeu	r18,r19,4028be0 <__sfvwrite_r+0x230>
 4028bdc:	902d883a 	mov	r22,r18
 4028be0:	81000017 	ldw	r4,0(r16)
 4028be4:	80800417 	ldw	r2,16(r16)
 4028be8:	b02f883a 	mov	r23,r22
 4028bec:	81c00517 	ldw	r7,20(r16)
 4028bf0:	1100032e 	bgeu	r2,r4,4028c00 <__sfvwrite_r+0x250>
 4028bf4:	80c00217 	ldw	r3,8(r16)
 4028bf8:	38c7883a 	add	r3,r7,r3
 4028bfc:	1d801816 	blt	r3,r22,4028c60 <__sfvwrite_r+0x2b0>
 4028c00:	b1c03e16 	blt	r22,r7,4028cfc <__sfvwrite_r+0x34c>
 4028c04:	80800917 	ldw	r2,36(r16)
 4028c08:	81400717 	ldw	r5,28(r16)
 4028c0c:	e00d883a 	mov	r6,fp
 4028c10:	da000115 	stw	r8,4(sp)
 4028c14:	a809883a 	mov	r4,r21
 4028c18:	103ee83a 	callr	r2
 4028c1c:	102f883a 	mov	r23,r2
 4028c20:	da000117 	ldw	r8,4(sp)
 4028c24:	00bfe00e 	bge	zero,r2,4028ba8 <__alt_data_end+0xfffe8ba8>
 4028c28:	9de7c83a 	sub	r19,r19,r23
 4028c2c:	98001f26 	beq	r19,zero,4028cac <__sfvwrite_r+0x2fc>
 4028c30:	a0800217 	ldw	r2,8(r20)
 4028c34:	e5f9883a 	add	fp,fp,r23
 4028c38:	95e5c83a 	sub	r18,r18,r23
 4028c3c:	15efc83a 	sub	r23,r2,r23
 4028c40:	a5c00215 	stw	r23,8(r20)
 4028c44:	b83f8726 	beq	r23,zero,4028a64 <__alt_data_end+0xfffe8a64>
 4028c48:	903fe11e 	bne	r18,zero,4028bd0 <__alt_data_end+0xfffe8bd0>
 4028c4c:	8f000017 	ldw	fp,0(r17)
 4028c50:	8c800117 	ldw	r18,4(r17)
 4028c54:	0011883a 	mov	r8,zero
 4028c58:	8c400204 	addi	r17,r17,8
 4028c5c:	003fdb06 	br	4028bcc <__alt_data_end+0xfffe8bcc>
 4028c60:	180d883a 	mov	r6,r3
 4028c64:	e00b883a 	mov	r5,fp
 4028c68:	da000115 	stw	r8,4(sp)
 4028c6c:	d8c00015 	stw	r3,0(sp)
 4028c70:	4028f200 	call	4028f20 <memmove>
 4028c74:	d8c00017 	ldw	r3,0(sp)
 4028c78:	80800017 	ldw	r2,0(r16)
 4028c7c:	800b883a 	mov	r5,r16
 4028c80:	a809883a 	mov	r4,r21
 4028c84:	10c5883a 	add	r2,r2,r3
 4028c88:	80800015 	stw	r2,0(r16)
 4028c8c:	d8c00015 	stw	r3,0(sp)
 4028c90:	40243340 	call	4024334 <_fflush_r>
 4028c94:	d8c00017 	ldw	r3,0(sp)
 4028c98:	da000117 	ldw	r8,4(sp)
 4028c9c:	103fc21e 	bne	r2,zero,4028ba8 <__alt_data_end+0xfffe8ba8>
 4028ca0:	182f883a 	mov	r23,r3
 4028ca4:	9de7c83a 	sub	r19,r19,r23
 4028ca8:	983fe11e 	bne	r19,zero,4028c30 <__alt_data_end+0xfffe8c30>
 4028cac:	800b883a 	mov	r5,r16
 4028cb0:	a809883a 	mov	r4,r21
 4028cb4:	40243340 	call	4024334 <_fflush_r>
 4028cb8:	103fbb1e 	bne	r2,zero,4028ba8 <__alt_data_end+0xfffe8ba8>
 4028cbc:	0011883a 	mov	r8,zero
 4028cc0:	003fdb06 	br	4028c30 <__alt_data_end+0xfffe8c30>
 4028cc4:	94c0012e 	bgeu	r18,r19,4028ccc <__sfvwrite_r+0x31c>
 4028cc8:	9027883a 	mov	r19,r18
 4028ccc:	980d883a 	mov	r6,r19
 4028cd0:	e00b883a 	mov	r5,fp
 4028cd4:	4028f200 	call	4028f20 <memmove>
 4028cd8:	80800217 	ldw	r2,8(r16)
 4028cdc:	80c00017 	ldw	r3,0(r16)
 4028ce0:	14c5c83a 	sub	r2,r2,r19
 4028ce4:	1cc7883a 	add	r3,r3,r19
 4028ce8:	80800215 	stw	r2,8(r16)
 4028cec:	80c00015 	stw	r3,0(r16)
 4028cf0:	10004326 	beq	r2,zero,4028e00 <__sfvwrite_r+0x450>
 4028cf4:	9805883a 	mov	r2,r19
 4028cf8:	003f8606 	br	4028b14 <__alt_data_end+0xfffe8b14>
 4028cfc:	b00d883a 	mov	r6,r22
 4028d00:	e00b883a 	mov	r5,fp
 4028d04:	da000115 	stw	r8,4(sp)
 4028d08:	4028f200 	call	4028f20 <memmove>
 4028d0c:	80800217 	ldw	r2,8(r16)
 4028d10:	80c00017 	ldw	r3,0(r16)
 4028d14:	da000117 	ldw	r8,4(sp)
 4028d18:	1585c83a 	sub	r2,r2,r22
 4028d1c:	1dad883a 	add	r22,r3,r22
 4028d20:	80800215 	stw	r2,8(r16)
 4028d24:	85800015 	stw	r22,0(r16)
 4028d28:	003fbf06 	br	4028c28 <__alt_data_end+0xfffe8c28>
 4028d2c:	81000017 	ldw	r4,0(r16)
 4028d30:	9027883a 	mov	r19,r18
 4028d34:	902f883a 	mov	r23,r18
 4028d38:	003f6c06 	br	4028aec <__alt_data_end+0xfffe8aec>
 4028d3c:	900d883a 	mov	r6,r18
 4028d40:	01400284 	movi	r5,10
 4028d44:	e009883a 	mov	r4,fp
 4028d48:	40257c00 	call	40257c0 <memchr>
 4028d4c:	10003e26 	beq	r2,zero,4028e48 <__sfvwrite_r+0x498>
 4028d50:	10800044 	addi	r2,r2,1
 4028d54:	1727c83a 	sub	r19,r2,fp
 4028d58:	02000044 	movi	r8,1
 4028d5c:	003f9d06 	br	4028bd4 <__alt_data_end+0xfffe8bd4>
 4028d60:	80800517 	ldw	r2,20(r16)
 4028d64:	81400417 	ldw	r5,16(r16)
 4028d68:	81c00017 	ldw	r7,0(r16)
 4028d6c:	10a7883a 	add	r19,r2,r2
 4028d70:	9885883a 	add	r2,r19,r2
 4028d74:	1026d7fa 	srli	r19,r2,31
 4028d78:	396dc83a 	sub	r22,r7,r5
 4028d7c:	b1000044 	addi	r4,r22,1
 4028d80:	9885883a 	add	r2,r19,r2
 4028d84:	1027d07a 	srai	r19,r2,1
 4028d88:	2485883a 	add	r2,r4,r18
 4028d8c:	980d883a 	mov	r6,r19
 4028d90:	9880022e 	bgeu	r19,r2,4028d9c <__sfvwrite_r+0x3ec>
 4028d94:	1027883a 	mov	r19,r2
 4028d98:	100d883a 	mov	r6,r2
 4028d9c:	18c1000c 	andi	r3,r3,1024
 4028da0:	18001c26 	beq	r3,zero,4028e14 <__sfvwrite_r+0x464>
 4028da4:	300b883a 	mov	r5,r6
 4028da8:	a809883a 	mov	r4,r21
 4028dac:	4024fb40 	call	4024fb4 <_malloc_r>
 4028db0:	102f883a 	mov	r23,r2
 4028db4:	10002926 	beq	r2,zero,4028e5c <__sfvwrite_r+0x4ac>
 4028db8:	81400417 	ldw	r5,16(r16)
 4028dbc:	b00d883a 	mov	r6,r22
 4028dc0:	1009883a 	mov	r4,r2
 4028dc4:	40258a40 	call	40258a4 <memcpy>
 4028dc8:	8080030b 	ldhu	r2,12(r16)
 4028dcc:	00fedfc4 	movi	r3,-1153
 4028dd0:	10c4703a 	and	r2,r2,r3
 4028dd4:	10802014 	ori	r2,r2,128
 4028dd8:	8080030d 	sth	r2,12(r16)
 4028ddc:	bd89883a 	add	r4,r23,r22
 4028de0:	9d8fc83a 	sub	r7,r19,r22
 4028de4:	85c00415 	stw	r23,16(r16)
 4028de8:	84c00515 	stw	r19,20(r16)
 4028dec:	81000015 	stw	r4,0(r16)
 4028df0:	9027883a 	mov	r19,r18
 4028df4:	81c00215 	stw	r7,8(r16)
 4028df8:	902f883a 	mov	r23,r18
 4028dfc:	003f3b06 	br	4028aec <__alt_data_end+0xfffe8aec>
 4028e00:	800b883a 	mov	r5,r16
 4028e04:	a809883a 	mov	r4,r21
 4028e08:	40243340 	call	4024334 <_fflush_r>
 4028e0c:	103fb926 	beq	r2,zero,4028cf4 <__alt_data_end+0xfffe8cf4>
 4028e10:	003f6506 	br	4028ba8 <__alt_data_end+0xfffe8ba8>
 4028e14:	a809883a 	mov	r4,r21
 4028e18:	40290dc0 	call	40290dc <_realloc_r>
 4028e1c:	102f883a 	mov	r23,r2
 4028e20:	103fee1e 	bne	r2,zero,4028ddc <__alt_data_end+0xfffe8ddc>
 4028e24:	81400417 	ldw	r5,16(r16)
 4028e28:	a809883a 	mov	r4,r21
 4028e2c:	40248840 	call	4024884 <_free_r>
 4028e30:	8080030b 	ldhu	r2,12(r16)
 4028e34:	00ffdfc4 	movi	r3,-129
 4028e38:	1884703a 	and	r2,r3,r2
 4028e3c:	00c00304 	movi	r3,12
 4028e40:	a8c00015 	stw	r3,0(r21)
 4028e44:	003f5906 	br	4028bac <__alt_data_end+0xfffe8bac>
 4028e48:	94c00044 	addi	r19,r18,1
 4028e4c:	02000044 	movi	r8,1
 4028e50:	003f6006 	br	4028bd4 <__alt_data_end+0xfffe8bd4>
 4028e54:	00bfffc4 	movi	r2,-1
 4028e58:	003f0306 	br	4028a68 <__alt_data_end+0xfffe8a68>
 4028e5c:	00800304 	movi	r2,12
 4028e60:	a8800015 	stw	r2,0(r21)
 4028e64:	8080030b 	ldhu	r2,12(r16)
 4028e68:	003f5006 	br	4028bac <__alt_data_end+0xfffe8bac>

04028e6c <_isatty_r>:
 4028e6c:	defffd04 	addi	sp,sp,-12
 4028e70:	dc000015 	stw	r16,0(sp)
 4028e74:	040100f4 	movhi	r16,1027
 4028e78:	dc400115 	stw	r17,4(sp)
 4028e7c:	840f9204 	addi	r16,r16,15944
 4028e80:	2023883a 	mov	r17,r4
 4028e84:	2809883a 	mov	r4,r5
 4028e88:	dfc00215 	stw	ra,8(sp)
 4028e8c:	80000015 	stw	zero,0(r16)
 4028e90:	402ceac0 	call	402ceac <isatty>
 4028e94:	00ffffc4 	movi	r3,-1
 4028e98:	10c00526 	beq	r2,r3,4028eb0 <_isatty_r+0x44>
 4028e9c:	dfc00217 	ldw	ra,8(sp)
 4028ea0:	dc400117 	ldw	r17,4(sp)
 4028ea4:	dc000017 	ldw	r16,0(sp)
 4028ea8:	dec00304 	addi	sp,sp,12
 4028eac:	f800283a 	ret
 4028eb0:	80c00017 	ldw	r3,0(r16)
 4028eb4:	183ff926 	beq	r3,zero,4028e9c <__alt_data_end+0xfffe8e9c>
 4028eb8:	88c00015 	stw	r3,0(r17)
 4028ebc:	003ff706 	br	4028e9c <__alt_data_end+0xfffe8e9c>

04028ec0 <_lseek_r>:
 4028ec0:	defffd04 	addi	sp,sp,-12
 4028ec4:	2805883a 	mov	r2,r5
 4028ec8:	dc000015 	stw	r16,0(sp)
 4028ecc:	040100f4 	movhi	r16,1027
 4028ed0:	dc400115 	stw	r17,4(sp)
 4028ed4:	300b883a 	mov	r5,r6
 4028ed8:	840f9204 	addi	r16,r16,15944
 4028edc:	2023883a 	mov	r17,r4
 4028ee0:	380d883a 	mov	r6,r7
 4028ee4:	1009883a 	mov	r4,r2
 4028ee8:	dfc00215 	stw	ra,8(sp)
 4028eec:	80000015 	stw	zero,0(r16)
 4028ef0:	402d0780 	call	402d078 <lseek>
 4028ef4:	00ffffc4 	movi	r3,-1
 4028ef8:	10c00526 	beq	r2,r3,4028f10 <_lseek_r+0x50>
 4028efc:	dfc00217 	ldw	ra,8(sp)
 4028f00:	dc400117 	ldw	r17,4(sp)
 4028f04:	dc000017 	ldw	r16,0(sp)
 4028f08:	dec00304 	addi	sp,sp,12
 4028f0c:	f800283a 	ret
 4028f10:	80c00017 	ldw	r3,0(r16)
 4028f14:	183ff926 	beq	r3,zero,4028efc <__alt_data_end+0xfffe8efc>
 4028f18:	88c00015 	stw	r3,0(r17)
 4028f1c:	003ff706 	br	4028efc <__alt_data_end+0xfffe8efc>

04028f20 <memmove>:
 4028f20:	2005883a 	mov	r2,r4
 4028f24:	29000b2e 	bgeu	r5,r4,4028f54 <memmove+0x34>
 4028f28:	298f883a 	add	r7,r5,r6
 4028f2c:	21c0092e 	bgeu	r4,r7,4028f54 <memmove+0x34>
 4028f30:	2187883a 	add	r3,r4,r6
 4028f34:	198bc83a 	sub	r5,r3,r6
 4028f38:	30004826 	beq	r6,zero,402905c <memmove+0x13c>
 4028f3c:	39ffffc4 	addi	r7,r7,-1
 4028f40:	39000003 	ldbu	r4,0(r7)
 4028f44:	18ffffc4 	addi	r3,r3,-1
 4028f48:	19000005 	stb	r4,0(r3)
 4028f4c:	28fffb1e 	bne	r5,r3,4028f3c <__alt_data_end+0xfffe8f3c>
 4028f50:	f800283a 	ret
 4028f54:	00c003c4 	movi	r3,15
 4028f58:	1980412e 	bgeu	r3,r6,4029060 <memmove+0x140>
 4028f5c:	2886b03a 	or	r3,r5,r2
 4028f60:	18c000cc 	andi	r3,r3,3
 4028f64:	1800401e 	bne	r3,zero,4029068 <memmove+0x148>
 4028f68:	33fffc04 	addi	r15,r6,-16
 4028f6c:	781ed13a 	srli	r15,r15,4
 4028f70:	28c00104 	addi	r3,r5,4
 4028f74:	13400104 	addi	r13,r2,4
 4028f78:	781c913a 	slli	r14,r15,4
 4028f7c:	2b000204 	addi	r12,r5,8
 4028f80:	12c00204 	addi	r11,r2,8
 4028f84:	73800504 	addi	r14,r14,20
 4028f88:	2a800304 	addi	r10,r5,12
 4028f8c:	12400304 	addi	r9,r2,12
 4028f90:	2b9d883a 	add	r14,r5,r14
 4028f94:	2811883a 	mov	r8,r5
 4028f98:	100f883a 	mov	r7,r2
 4028f9c:	41000017 	ldw	r4,0(r8)
 4028fa0:	39c00404 	addi	r7,r7,16
 4028fa4:	18c00404 	addi	r3,r3,16
 4028fa8:	393ffc15 	stw	r4,-16(r7)
 4028fac:	193ffc17 	ldw	r4,-16(r3)
 4028fb0:	6b400404 	addi	r13,r13,16
 4028fb4:	5ac00404 	addi	r11,r11,16
 4028fb8:	693ffc15 	stw	r4,-16(r13)
 4028fbc:	61000017 	ldw	r4,0(r12)
 4028fc0:	4a400404 	addi	r9,r9,16
 4028fc4:	42000404 	addi	r8,r8,16
 4028fc8:	593ffc15 	stw	r4,-16(r11)
 4028fcc:	51000017 	ldw	r4,0(r10)
 4028fd0:	63000404 	addi	r12,r12,16
 4028fd4:	52800404 	addi	r10,r10,16
 4028fd8:	493ffc15 	stw	r4,-16(r9)
 4028fdc:	1bbfef1e 	bne	r3,r14,4028f9c <__alt_data_end+0xfffe8f9c>
 4028fe0:	79000044 	addi	r4,r15,1
 4028fe4:	2008913a 	slli	r4,r4,4
 4028fe8:	328003cc 	andi	r10,r6,15
 4028fec:	02c000c4 	movi	r11,3
 4028ff0:	1107883a 	add	r3,r2,r4
 4028ff4:	290b883a 	add	r5,r5,r4
 4028ff8:	5a801e2e 	bgeu	r11,r10,4029074 <memmove+0x154>
 4028ffc:	1813883a 	mov	r9,r3
 4029000:	2811883a 	mov	r8,r5
 4029004:	500f883a 	mov	r7,r10
 4029008:	41000017 	ldw	r4,0(r8)
 402900c:	4a400104 	addi	r9,r9,4
 4029010:	39ffff04 	addi	r7,r7,-4
 4029014:	493fff15 	stw	r4,-4(r9)
 4029018:	42000104 	addi	r8,r8,4
 402901c:	59fffa36 	bltu	r11,r7,4029008 <__alt_data_end+0xfffe9008>
 4029020:	513fff04 	addi	r4,r10,-4
 4029024:	2008d0ba 	srli	r4,r4,2
 4029028:	318000cc 	andi	r6,r6,3
 402902c:	21000044 	addi	r4,r4,1
 4029030:	2109883a 	add	r4,r4,r4
 4029034:	2109883a 	add	r4,r4,r4
 4029038:	1907883a 	add	r3,r3,r4
 402903c:	290b883a 	add	r5,r5,r4
 4029040:	30000b26 	beq	r6,zero,4029070 <memmove+0x150>
 4029044:	198d883a 	add	r6,r3,r6
 4029048:	29c00003 	ldbu	r7,0(r5)
 402904c:	18c00044 	addi	r3,r3,1
 4029050:	29400044 	addi	r5,r5,1
 4029054:	19ffffc5 	stb	r7,-1(r3)
 4029058:	19bffb1e 	bne	r3,r6,4029048 <__alt_data_end+0xfffe9048>
 402905c:	f800283a 	ret
 4029060:	1007883a 	mov	r3,r2
 4029064:	003ff606 	br	4029040 <__alt_data_end+0xfffe9040>
 4029068:	1007883a 	mov	r3,r2
 402906c:	003ff506 	br	4029044 <__alt_data_end+0xfffe9044>
 4029070:	f800283a 	ret
 4029074:	500d883a 	mov	r6,r10
 4029078:	003ff106 	br	4029040 <__alt_data_end+0xfffe9040>

0402907c <_read_r>:
 402907c:	defffd04 	addi	sp,sp,-12
 4029080:	2805883a 	mov	r2,r5
 4029084:	dc000015 	stw	r16,0(sp)
 4029088:	040100f4 	movhi	r16,1027
 402908c:	dc400115 	stw	r17,4(sp)
 4029090:	300b883a 	mov	r5,r6
 4029094:	840f9204 	addi	r16,r16,15944
 4029098:	2023883a 	mov	r17,r4
 402909c:	380d883a 	mov	r6,r7
 40290a0:	1009883a 	mov	r4,r2
 40290a4:	dfc00215 	stw	ra,8(sp)
 40290a8:	80000015 	stw	zero,0(r16)
 40290ac:	402d24c0 	call	402d24c <read>
 40290b0:	00ffffc4 	movi	r3,-1
 40290b4:	10c00526 	beq	r2,r3,40290cc <_read_r+0x50>
 40290b8:	dfc00217 	ldw	ra,8(sp)
 40290bc:	dc400117 	ldw	r17,4(sp)
 40290c0:	dc000017 	ldw	r16,0(sp)
 40290c4:	dec00304 	addi	sp,sp,12
 40290c8:	f800283a 	ret
 40290cc:	80c00017 	ldw	r3,0(r16)
 40290d0:	183ff926 	beq	r3,zero,40290b8 <__alt_data_end+0xfffe90b8>
 40290d4:	88c00015 	stw	r3,0(r17)
 40290d8:	003ff706 	br	40290b8 <__alt_data_end+0xfffe90b8>

040290dc <_realloc_r>:
 40290dc:	defff604 	addi	sp,sp,-40
 40290e0:	dc800215 	stw	r18,8(sp)
 40290e4:	dfc00915 	stw	ra,36(sp)
 40290e8:	df000815 	stw	fp,32(sp)
 40290ec:	ddc00715 	stw	r23,28(sp)
 40290f0:	dd800615 	stw	r22,24(sp)
 40290f4:	dd400515 	stw	r21,20(sp)
 40290f8:	dd000415 	stw	r20,16(sp)
 40290fc:	dcc00315 	stw	r19,12(sp)
 4029100:	dc400115 	stw	r17,4(sp)
 4029104:	dc000015 	stw	r16,0(sp)
 4029108:	3025883a 	mov	r18,r6
 402910c:	2800b726 	beq	r5,zero,40293ec <_realloc_r+0x310>
 4029110:	282b883a 	mov	r21,r5
 4029114:	2029883a 	mov	r20,r4
 4029118:	402d1c80 	call	402d1c8 <__malloc_lock>
 402911c:	a8bfff17 	ldw	r2,-4(r21)
 4029120:	043fff04 	movi	r16,-4
 4029124:	90c002c4 	addi	r3,r18,11
 4029128:	01000584 	movi	r4,22
 402912c:	acfffe04 	addi	r19,r21,-8
 4029130:	1420703a 	and	r16,r2,r16
 4029134:	20c0332e 	bgeu	r4,r3,4029204 <_realloc_r+0x128>
 4029138:	047ffe04 	movi	r17,-8
 402913c:	1c62703a 	and	r17,r3,r17
 4029140:	8807883a 	mov	r3,r17
 4029144:	88005816 	blt	r17,zero,40292a8 <_realloc_r+0x1cc>
 4029148:	8c805736 	bltu	r17,r18,40292a8 <_realloc_r+0x1cc>
 402914c:	80c0300e 	bge	r16,r3,4029210 <_realloc_r+0x134>
 4029150:	070100f4 	movhi	fp,1027
 4029154:	e702bf04 	addi	fp,fp,2812
 4029158:	e1c00217 	ldw	r7,8(fp)
 402915c:	9c09883a 	add	r4,r19,r16
 4029160:	22000117 	ldw	r8,4(r4)
 4029164:	21c06326 	beq	r4,r7,40292f4 <_realloc_r+0x218>
 4029168:	017fff84 	movi	r5,-2
 402916c:	414a703a 	and	r5,r8,r5
 4029170:	214b883a 	add	r5,r4,r5
 4029174:	29800117 	ldw	r6,4(r5)
 4029178:	3180004c 	andi	r6,r6,1
 402917c:	30003f26 	beq	r6,zero,402927c <_realloc_r+0x1a0>
 4029180:	1080004c 	andi	r2,r2,1
 4029184:	10008326 	beq	r2,zero,4029394 <_realloc_r+0x2b8>
 4029188:	900b883a 	mov	r5,r18
 402918c:	a009883a 	mov	r4,r20
 4029190:	4024fb40 	call	4024fb4 <_malloc_r>
 4029194:	1025883a 	mov	r18,r2
 4029198:	10011e26 	beq	r2,zero,4029614 <_realloc_r+0x538>
 402919c:	a93fff17 	ldw	r4,-4(r21)
 40291a0:	10fffe04 	addi	r3,r2,-8
 40291a4:	00bfff84 	movi	r2,-2
 40291a8:	2084703a 	and	r2,r4,r2
 40291ac:	9885883a 	add	r2,r19,r2
 40291b0:	1880ee26 	beq	r3,r2,402956c <_realloc_r+0x490>
 40291b4:	81bfff04 	addi	r6,r16,-4
 40291b8:	00800904 	movi	r2,36
 40291bc:	1180b836 	bltu	r2,r6,40294a0 <_realloc_r+0x3c4>
 40291c0:	00c004c4 	movi	r3,19
 40291c4:	19809636 	bltu	r3,r6,4029420 <_realloc_r+0x344>
 40291c8:	9005883a 	mov	r2,r18
 40291cc:	a807883a 	mov	r3,r21
 40291d0:	19000017 	ldw	r4,0(r3)
 40291d4:	11000015 	stw	r4,0(r2)
 40291d8:	19000117 	ldw	r4,4(r3)
 40291dc:	11000115 	stw	r4,4(r2)
 40291e0:	18c00217 	ldw	r3,8(r3)
 40291e4:	10c00215 	stw	r3,8(r2)
 40291e8:	a80b883a 	mov	r5,r21
 40291ec:	a009883a 	mov	r4,r20
 40291f0:	40248840 	call	4024884 <_free_r>
 40291f4:	a009883a 	mov	r4,r20
 40291f8:	402d1ec0 	call	402d1ec <__malloc_unlock>
 40291fc:	9005883a 	mov	r2,r18
 4029200:	00001206 	br	402924c <_realloc_r+0x170>
 4029204:	00c00404 	movi	r3,16
 4029208:	1823883a 	mov	r17,r3
 402920c:	003fce06 	br	4029148 <__alt_data_end+0xfffe9148>
 4029210:	a825883a 	mov	r18,r21
 4029214:	8445c83a 	sub	r2,r16,r17
 4029218:	00c003c4 	movi	r3,15
 402921c:	18802636 	bltu	r3,r2,40292b8 <_realloc_r+0x1dc>
 4029220:	99800117 	ldw	r6,4(r19)
 4029224:	9c07883a 	add	r3,r19,r16
 4029228:	3180004c 	andi	r6,r6,1
 402922c:	3420b03a 	or	r16,r6,r16
 4029230:	9c000115 	stw	r16,4(r19)
 4029234:	18800117 	ldw	r2,4(r3)
 4029238:	10800054 	ori	r2,r2,1
 402923c:	18800115 	stw	r2,4(r3)
 4029240:	a009883a 	mov	r4,r20
 4029244:	402d1ec0 	call	402d1ec <__malloc_unlock>
 4029248:	9005883a 	mov	r2,r18
 402924c:	dfc00917 	ldw	ra,36(sp)
 4029250:	df000817 	ldw	fp,32(sp)
 4029254:	ddc00717 	ldw	r23,28(sp)
 4029258:	dd800617 	ldw	r22,24(sp)
 402925c:	dd400517 	ldw	r21,20(sp)
 4029260:	dd000417 	ldw	r20,16(sp)
 4029264:	dcc00317 	ldw	r19,12(sp)
 4029268:	dc800217 	ldw	r18,8(sp)
 402926c:	dc400117 	ldw	r17,4(sp)
 4029270:	dc000017 	ldw	r16,0(sp)
 4029274:	dec00a04 	addi	sp,sp,40
 4029278:	f800283a 	ret
 402927c:	017fff04 	movi	r5,-4
 4029280:	414a703a 	and	r5,r8,r5
 4029284:	814d883a 	add	r6,r16,r5
 4029288:	30c01f16 	blt	r6,r3,4029308 <_realloc_r+0x22c>
 402928c:	20800317 	ldw	r2,12(r4)
 4029290:	20c00217 	ldw	r3,8(r4)
 4029294:	a825883a 	mov	r18,r21
 4029298:	3021883a 	mov	r16,r6
 402929c:	18800315 	stw	r2,12(r3)
 40292a0:	10c00215 	stw	r3,8(r2)
 40292a4:	003fdb06 	br	4029214 <__alt_data_end+0xfffe9214>
 40292a8:	00800304 	movi	r2,12
 40292ac:	a0800015 	stw	r2,0(r20)
 40292b0:	0005883a 	mov	r2,zero
 40292b4:	003fe506 	br	402924c <__alt_data_end+0xfffe924c>
 40292b8:	98c00117 	ldw	r3,4(r19)
 40292bc:	9c4b883a 	add	r5,r19,r17
 40292c0:	11000054 	ori	r4,r2,1
 40292c4:	18c0004c 	andi	r3,r3,1
 40292c8:	1c62b03a 	or	r17,r3,r17
 40292cc:	9c400115 	stw	r17,4(r19)
 40292d0:	29000115 	stw	r4,4(r5)
 40292d4:	2885883a 	add	r2,r5,r2
 40292d8:	10c00117 	ldw	r3,4(r2)
 40292dc:	29400204 	addi	r5,r5,8
 40292e0:	a009883a 	mov	r4,r20
 40292e4:	18c00054 	ori	r3,r3,1
 40292e8:	10c00115 	stw	r3,4(r2)
 40292ec:	40248840 	call	4024884 <_free_r>
 40292f0:	003fd306 	br	4029240 <__alt_data_end+0xfffe9240>
 40292f4:	017fff04 	movi	r5,-4
 40292f8:	414a703a 	and	r5,r8,r5
 40292fc:	89800404 	addi	r6,r17,16
 4029300:	8151883a 	add	r8,r16,r5
 4029304:	4180590e 	bge	r8,r6,402946c <_realloc_r+0x390>
 4029308:	1080004c 	andi	r2,r2,1
 402930c:	103f9e1e 	bne	r2,zero,4029188 <__alt_data_end+0xfffe9188>
 4029310:	adbffe17 	ldw	r22,-8(r21)
 4029314:	00bfff04 	movi	r2,-4
 4029318:	9dadc83a 	sub	r22,r19,r22
 402931c:	b1800117 	ldw	r6,4(r22)
 4029320:	3084703a 	and	r2,r6,r2
 4029324:	20002026 	beq	r4,zero,40293a8 <_realloc_r+0x2cc>
 4029328:	80af883a 	add	r23,r16,r2
 402932c:	b96f883a 	add	r23,r23,r5
 4029330:	21c05f26 	beq	r4,r7,40294b0 <_realloc_r+0x3d4>
 4029334:	b8c01c16 	blt	r23,r3,40293a8 <_realloc_r+0x2cc>
 4029338:	20800317 	ldw	r2,12(r4)
 402933c:	20c00217 	ldw	r3,8(r4)
 4029340:	81bfff04 	addi	r6,r16,-4
 4029344:	01000904 	movi	r4,36
 4029348:	18800315 	stw	r2,12(r3)
 402934c:	10c00215 	stw	r3,8(r2)
 4029350:	b0c00217 	ldw	r3,8(r22)
 4029354:	b0800317 	ldw	r2,12(r22)
 4029358:	b4800204 	addi	r18,r22,8
 402935c:	18800315 	stw	r2,12(r3)
 4029360:	10c00215 	stw	r3,8(r2)
 4029364:	21801b36 	bltu	r4,r6,40293d4 <_realloc_r+0x2f8>
 4029368:	008004c4 	movi	r2,19
 402936c:	1180352e 	bgeu	r2,r6,4029444 <_realloc_r+0x368>
 4029370:	a8800017 	ldw	r2,0(r21)
 4029374:	b0800215 	stw	r2,8(r22)
 4029378:	a8800117 	ldw	r2,4(r21)
 402937c:	b0800315 	stw	r2,12(r22)
 4029380:	008006c4 	movi	r2,27
 4029384:	11807f36 	bltu	r2,r6,4029584 <_realloc_r+0x4a8>
 4029388:	b0800404 	addi	r2,r22,16
 402938c:	ad400204 	addi	r21,r21,8
 4029390:	00002d06 	br	4029448 <_realloc_r+0x36c>
 4029394:	adbffe17 	ldw	r22,-8(r21)
 4029398:	00bfff04 	movi	r2,-4
 402939c:	9dadc83a 	sub	r22,r19,r22
 40293a0:	b1000117 	ldw	r4,4(r22)
 40293a4:	2084703a 	and	r2,r4,r2
 40293a8:	b03f7726 	beq	r22,zero,4029188 <__alt_data_end+0xfffe9188>
 40293ac:	80af883a 	add	r23,r16,r2
 40293b0:	b8ff7516 	blt	r23,r3,4029188 <__alt_data_end+0xfffe9188>
 40293b4:	b0800317 	ldw	r2,12(r22)
 40293b8:	b0c00217 	ldw	r3,8(r22)
 40293bc:	81bfff04 	addi	r6,r16,-4
 40293c0:	01000904 	movi	r4,36
 40293c4:	18800315 	stw	r2,12(r3)
 40293c8:	10c00215 	stw	r3,8(r2)
 40293cc:	b4800204 	addi	r18,r22,8
 40293d0:	21bfe52e 	bgeu	r4,r6,4029368 <__alt_data_end+0xfffe9368>
 40293d4:	a80b883a 	mov	r5,r21
 40293d8:	9009883a 	mov	r4,r18
 40293dc:	4028f200 	call	4028f20 <memmove>
 40293e0:	b821883a 	mov	r16,r23
 40293e4:	b027883a 	mov	r19,r22
 40293e8:	003f8a06 	br	4029214 <__alt_data_end+0xfffe9214>
 40293ec:	300b883a 	mov	r5,r6
 40293f0:	dfc00917 	ldw	ra,36(sp)
 40293f4:	df000817 	ldw	fp,32(sp)
 40293f8:	ddc00717 	ldw	r23,28(sp)
 40293fc:	dd800617 	ldw	r22,24(sp)
 4029400:	dd400517 	ldw	r21,20(sp)
 4029404:	dd000417 	ldw	r20,16(sp)
 4029408:	dcc00317 	ldw	r19,12(sp)
 402940c:	dc800217 	ldw	r18,8(sp)
 4029410:	dc400117 	ldw	r17,4(sp)
 4029414:	dc000017 	ldw	r16,0(sp)
 4029418:	dec00a04 	addi	sp,sp,40
 402941c:	4024fb41 	jmpi	4024fb4 <_malloc_r>
 4029420:	a8c00017 	ldw	r3,0(r21)
 4029424:	90c00015 	stw	r3,0(r18)
 4029428:	a8c00117 	ldw	r3,4(r21)
 402942c:	90c00115 	stw	r3,4(r18)
 4029430:	00c006c4 	movi	r3,27
 4029434:	19804536 	bltu	r3,r6,402954c <_realloc_r+0x470>
 4029438:	90800204 	addi	r2,r18,8
 402943c:	a8c00204 	addi	r3,r21,8
 4029440:	003f6306 	br	40291d0 <__alt_data_end+0xfffe91d0>
 4029444:	9005883a 	mov	r2,r18
 4029448:	a8c00017 	ldw	r3,0(r21)
 402944c:	b821883a 	mov	r16,r23
 4029450:	b027883a 	mov	r19,r22
 4029454:	10c00015 	stw	r3,0(r2)
 4029458:	a8c00117 	ldw	r3,4(r21)
 402945c:	10c00115 	stw	r3,4(r2)
 4029460:	a8c00217 	ldw	r3,8(r21)
 4029464:	10c00215 	stw	r3,8(r2)
 4029468:	003f6a06 	br	4029214 <__alt_data_end+0xfffe9214>
 402946c:	9c67883a 	add	r19,r19,r17
 4029470:	4445c83a 	sub	r2,r8,r17
 4029474:	e4c00215 	stw	r19,8(fp)
 4029478:	10800054 	ori	r2,r2,1
 402947c:	98800115 	stw	r2,4(r19)
 4029480:	a8bfff17 	ldw	r2,-4(r21)
 4029484:	a009883a 	mov	r4,r20
 4029488:	1080004c 	andi	r2,r2,1
 402948c:	1462b03a 	or	r17,r2,r17
 4029490:	ac7fff15 	stw	r17,-4(r21)
 4029494:	402d1ec0 	call	402d1ec <__malloc_unlock>
 4029498:	a805883a 	mov	r2,r21
 402949c:	003f6b06 	br	402924c <__alt_data_end+0xfffe924c>
 40294a0:	a80b883a 	mov	r5,r21
 40294a4:	9009883a 	mov	r4,r18
 40294a8:	4028f200 	call	4028f20 <memmove>
 40294ac:	003f4e06 	br	40291e8 <__alt_data_end+0xfffe91e8>
 40294b0:	89000404 	addi	r4,r17,16
 40294b4:	b93fbc16 	blt	r23,r4,40293a8 <__alt_data_end+0xfffe93a8>
 40294b8:	b0800317 	ldw	r2,12(r22)
 40294bc:	b0c00217 	ldw	r3,8(r22)
 40294c0:	81bfff04 	addi	r6,r16,-4
 40294c4:	01000904 	movi	r4,36
 40294c8:	18800315 	stw	r2,12(r3)
 40294cc:	10c00215 	stw	r3,8(r2)
 40294d0:	b4800204 	addi	r18,r22,8
 40294d4:	21804336 	bltu	r4,r6,40295e4 <_realloc_r+0x508>
 40294d8:	008004c4 	movi	r2,19
 40294dc:	11803f2e 	bgeu	r2,r6,40295dc <_realloc_r+0x500>
 40294e0:	a8800017 	ldw	r2,0(r21)
 40294e4:	b0800215 	stw	r2,8(r22)
 40294e8:	a8800117 	ldw	r2,4(r21)
 40294ec:	b0800315 	stw	r2,12(r22)
 40294f0:	008006c4 	movi	r2,27
 40294f4:	11803f36 	bltu	r2,r6,40295f4 <_realloc_r+0x518>
 40294f8:	b0800404 	addi	r2,r22,16
 40294fc:	ad400204 	addi	r21,r21,8
 4029500:	a8c00017 	ldw	r3,0(r21)
 4029504:	10c00015 	stw	r3,0(r2)
 4029508:	a8c00117 	ldw	r3,4(r21)
 402950c:	10c00115 	stw	r3,4(r2)
 4029510:	a8c00217 	ldw	r3,8(r21)
 4029514:	10c00215 	stw	r3,8(r2)
 4029518:	b447883a 	add	r3,r22,r17
 402951c:	bc45c83a 	sub	r2,r23,r17
 4029520:	e0c00215 	stw	r3,8(fp)
 4029524:	10800054 	ori	r2,r2,1
 4029528:	18800115 	stw	r2,4(r3)
 402952c:	b0800117 	ldw	r2,4(r22)
 4029530:	a009883a 	mov	r4,r20
 4029534:	1080004c 	andi	r2,r2,1
 4029538:	1462b03a 	or	r17,r2,r17
 402953c:	b4400115 	stw	r17,4(r22)
 4029540:	402d1ec0 	call	402d1ec <__malloc_unlock>
 4029544:	9005883a 	mov	r2,r18
 4029548:	003f4006 	br	402924c <__alt_data_end+0xfffe924c>
 402954c:	a8c00217 	ldw	r3,8(r21)
 4029550:	90c00215 	stw	r3,8(r18)
 4029554:	a8c00317 	ldw	r3,12(r21)
 4029558:	90c00315 	stw	r3,12(r18)
 402955c:	30801126 	beq	r6,r2,40295a4 <_realloc_r+0x4c8>
 4029560:	90800404 	addi	r2,r18,16
 4029564:	a8c00404 	addi	r3,r21,16
 4029568:	003f1906 	br	40291d0 <__alt_data_end+0xfffe91d0>
 402956c:	90ffff17 	ldw	r3,-4(r18)
 4029570:	00bfff04 	movi	r2,-4
 4029574:	a825883a 	mov	r18,r21
 4029578:	1884703a 	and	r2,r3,r2
 402957c:	80a1883a 	add	r16,r16,r2
 4029580:	003f2406 	br	4029214 <__alt_data_end+0xfffe9214>
 4029584:	a8800217 	ldw	r2,8(r21)
 4029588:	b0800415 	stw	r2,16(r22)
 402958c:	a8800317 	ldw	r2,12(r21)
 4029590:	b0800515 	stw	r2,20(r22)
 4029594:	31000a26 	beq	r6,r4,40295c0 <_realloc_r+0x4e4>
 4029598:	b0800604 	addi	r2,r22,24
 402959c:	ad400404 	addi	r21,r21,16
 40295a0:	003fa906 	br	4029448 <__alt_data_end+0xfffe9448>
 40295a4:	a9000417 	ldw	r4,16(r21)
 40295a8:	90800604 	addi	r2,r18,24
 40295ac:	a8c00604 	addi	r3,r21,24
 40295b0:	91000415 	stw	r4,16(r18)
 40295b4:	a9000517 	ldw	r4,20(r21)
 40295b8:	91000515 	stw	r4,20(r18)
 40295bc:	003f0406 	br	40291d0 <__alt_data_end+0xfffe91d0>
 40295c0:	a8c00417 	ldw	r3,16(r21)
 40295c4:	ad400604 	addi	r21,r21,24
 40295c8:	b0800804 	addi	r2,r22,32
 40295cc:	b0c00615 	stw	r3,24(r22)
 40295d0:	a8ffff17 	ldw	r3,-4(r21)
 40295d4:	b0c00715 	stw	r3,28(r22)
 40295d8:	003f9b06 	br	4029448 <__alt_data_end+0xfffe9448>
 40295dc:	9005883a 	mov	r2,r18
 40295e0:	003fc706 	br	4029500 <__alt_data_end+0xfffe9500>
 40295e4:	a80b883a 	mov	r5,r21
 40295e8:	9009883a 	mov	r4,r18
 40295ec:	4028f200 	call	4028f20 <memmove>
 40295f0:	003fc906 	br	4029518 <__alt_data_end+0xfffe9518>
 40295f4:	a8800217 	ldw	r2,8(r21)
 40295f8:	b0800415 	stw	r2,16(r22)
 40295fc:	a8800317 	ldw	r2,12(r21)
 4029600:	b0800515 	stw	r2,20(r22)
 4029604:	31000726 	beq	r6,r4,4029624 <_realloc_r+0x548>
 4029608:	b0800604 	addi	r2,r22,24
 402960c:	ad400404 	addi	r21,r21,16
 4029610:	003fbb06 	br	4029500 <__alt_data_end+0xfffe9500>
 4029614:	a009883a 	mov	r4,r20
 4029618:	402d1ec0 	call	402d1ec <__malloc_unlock>
 402961c:	0005883a 	mov	r2,zero
 4029620:	003f0a06 	br	402924c <__alt_data_end+0xfffe924c>
 4029624:	a8c00417 	ldw	r3,16(r21)
 4029628:	ad400604 	addi	r21,r21,24
 402962c:	b0800804 	addi	r2,r22,32
 4029630:	b0c00615 	stw	r3,24(r22)
 4029634:	a8ffff17 	ldw	r3,-4(r21)
 4029638:	b0c00715 	stw	r3,28(r22)
 402963c:	003fb006 	br	4029500 <__alt_data_end+0xfffe9500>

04029640 <__swbuf_r>:
 4029640:	defffb04 	addi	sp,sp,-20
 4029644:	dcc00315 	stw	r19,12(sp)
 4029648:	dc800215 	stw	r18,8(sp)
 402964c:	dc000015 	stw	r16,0(sp)
 4029650:	dfc00415 	stw	ra,16(sp)
 4029654:	dc400115 	stw	r17,4(sp)
 4029658:	2025883a 	mov	r18,r4
 402965c:	2827883a 	mov	r19,r5
 4029660:	3021883a 	mov	r16,r6
 4029664:	20000226 	beq	r4,zero,4029670 <__swbuf_r+0x30>
 4029668:	20800e17 	ldw	r2,56(r4)
 402966c:	10004226 	beq	r2,zero,4029778 <__swbuf_r+0x138>
 4029670:	80800617 	ldw	r2,24(r16)
 4029674:	8100030b 	ldhu	r4,12(r16)
 4029678:	80800215 	stw	r2,8(r16)
 402967c:	2080020c 	andi	r2,r4,8
 4029680:	10003626 	beq	r2,zero,402975c <__swbuf_r+0x11c>
 4029684:	80c00417 	ldw	r3,16(r16)
 4029688:	18003426 	beq	r3,zero,402975c <__swbuf_r+0x11c>
 402968c:	2088000c 	andi	r2,r4,8192
 4029690:	9c403fcc 	andi	r17,r19,255
 4029694:	10001a26 	beq	r2,zero,4029700 <__swbuf_r+0xc0>
 4029698:	80800017 	ldw	r2,0(r16)
 402969c:	81000517 	ldw	r4,20(r16)
 40296a0:	10c7c83a 	sub	r3,r2,r3
 40296a4:	1900200e 	bge	r3,r4,4029728 <__swbuf_r+0xe8>
 40296a8:	18c00044 	addi	r3,r3,1
 40296ac:	81000217 	ldw	r4,8(r16)
 40296b0:	11400044 	addi	r5,r2,1
 40296b4:	81400015 	stw	r5,0(r16)
 40296b8:	213fffc4 	addi	r4,r4,-1
 40296bc:	81000215 	stw	r4,8(r16)
 40296c0:	14c00005 	stb	r19,0(r2)
 40296c4:	80800517 	ldw	r2,20(r16)
 40296c8:	10c01e26 	beq	r2,r3,4029744 <__swbuf_r+0x104>
 40296cc:	8080030b 	ldhu	r2,12(r16)
 40296d0:	1080004c 	andi	r2,r2,1
 40296d4:	10000226 	beq	r2,zero,40296e0 <__swbuf_r+0xa0>
 40296d8:	00800284 	movi	r2,10
 40296dc:	88801926 	beq	r17,r2,4029744 <__swbuf_r+0x104>
 40296e0:	8805883a 	mov	r2,r17
 40296e4:	dfc00417 	ldw	ra,16(sp)
 40296e8:	dcc00317 	ldw	r19,12(sp)
 40296ec:	dc800217 	ldw	r18,8(sp)
 40296f0:	dc400117 	ldw	r17,4(sp)
 40296f4:	dc000017 	ldw	r16,0(sp)
 40296f8:	dec00504 	addi	sp,sp,20
 40296fc:	f800283a 	ret
 4029700:	81401917 	ldw	r5,100(r16)
 4029704:	00b7ffc4 	movi	r2,-8193
 4029708:	21080014 	ori	r4,r4,8192
 402970c:	2884703a 	and	r2,r5,r2
 4029710:	80801915 	stw	r2,100(r16)
 4029714:	80800017 	ldw	r2,0(r16)
 4029718:	8100030d 	sth	r4,12(r16)
 402971c:	81000517 	ldw	r4,20(r16)
 4029720:	10c7c83a 	sub	r3,r2,r3
 4029724:	193fe016 	blt	r3,r4,40296a8 <__alt_data_end+0xfffe96a8>
 4029728:	800b883a 	mov	r5,r16
 402972c:	9009883a 	mov	r4,r18
 4029730:	40243340 	call	4024334 <_fflush_r>
 4029734:	1000071e 	bne	r2,zero,4029754 <__swbuf_r+0x114>
 4029738:	80800017 	ldw	r2,0(r16)
 402973c:	00c00044 	movi	r3,1
 4029740:	003fda06 	br	40296ac <__alt_data_end+0xfffe96ac>
 4029744:	800b883a 	mov	r5,r16
 4029748:	9009883a 	mov	r4,r18
 402974c:	40243340 	call	4024334 <_fflush_r>
 4029750:	103fe326 	beq	r2,zero,40296e0 <__alt_data_end+0xfffe96e0>
 4029754:	00bfffc4 	movi	r2,-1
 4029758:	003fe206 	br	40296e4 <__alt_data_end+0xfffe96e4>
 402975c:	800b883a 	mov	r5,r16
 4029760:	9009883a 	mov	r4,r18
 4029764:	402273c0 	call	402273c <__swsetup_r>
 4029768:	103ffa1e 	bne	r2,zero,4029754 <__alt_data_end+0xfffe9754>
 402976c:	8100030b 	ldhu	r4,12(r16)
 4029770:	80c00417 	ldw	r3,16(r16)
 4029774:	003fc506 	br	402968c <__alt_data_end+0xfffe968c>
 4029778:	40247100 	call	4024710 <__sinit>
 402977c:	003fbc06 	br	4029670 <__alt_data_end+0xfffe9670>

04029780 <__swbuf>:
 4029780:	008100f4 	movhi	r2,1027
 4029784:	10887f04 	addi	r2,r2,8700
 4029788:	280d883a 	mov	r6,r5
 402978c:	200b883a 	mov	r5,r4
 4029790:	11000017 	ldw	r4,0(r2)
 4029794:	40296401 	jmpi	4029640 <__swbuf_r>

04029798 <_wcrtomb_r>:
 4029798:	defff604 	addi	sp,sp,-40
 402979c:	008100f4 	movhi	r2,1027
 40297a0:	dc800815 	stw	r18,32(sp)
 40297a4:	dc400715 	stw	r17,28(sp)
 40297a8:	dc000615 	stw	r16,24(sp)
 40297ac:	10888304 	addi	r2,r2,8716
 40297b0:	dfc00915 	stw	ra,36(sp)
 40297b4:	2021883a 	mov	r16,r4
 40297b8:	3823883a 	mov	r17,r7
 40297bc:	14800017 	ldw	r18,0(r2)
 40297c0:	28001426 	beq	r5,zero,4029814 <_wcrtomb_r+0x7c>
 40297c4:	d9400415 	stw	r5,16(sp)
 40297c8:	d9800515 	stw	r6,20(sp)
 40297cc:	4024d980 	call	4024d98 <__locale_charset>
 40297d0:	d9800517 	ldw	r6,20(sp)
 40297d4:	d9400417 	ldw	r5,16(sp)
 40297d8:	100f883a 	mov	r7,r2
 40297dc:	dc400015 	stw	r17,0(sp)
 40297e0:	8009883a 	mov	r4,r16
 40297e4:	903ee83a 	callr	r18
 40297e8:	00ffffc4 	movi	r3,-1
 40297ec:	10c0031e 	bne	r2,r3,40297fc <_wcrtomb_r+0x64>
 40297f0:	88000015 	stw	zero,0(r17)
 40297f4:	00c02284 	movi	r3,138
 40297f8:	80c00015 	stw	r3,0(r16)
 40297fc:	dfc00917 	ldw	ra,36(sp)
 4029800:	dc800817 	ldw	r18,32(sp)
 4029804:	dc400717 	ldw	r17,28(sp)
 4029808:	dc000617 	ldw	r16,24(sp)
 402980c:	dec00a04 	addi	sp,sp,40
 4029810:	f800283a 	ret
 4029814:	4024d980 	call	4024d98 <__locale_charset>
 4029818:	100f883a 	mov	r7,r2
 402981c:	dc400015 	stw	r17,0(sp)
 4029820:	000d883a 	mov	r6,zero
 4029824:	d9400104 	addi	r5,sp,4
 4029828:	8009883a 	mov	r4,r16
 402982c:	903ee83a 	callr	r18
 4029830:	003fed06 	br	40297e8 <__alt_data_end+0xfffe97e8>

04029834 <wcrtomb>:
 4029834:	defff604 	addi	sp,sp,-40
 4029838:	008100f4 	movhi	r2,1027
 402983c:	dc800615 	stw	r18,24(sp)
 4029840:	dc400515 	stw	r17,20(sp)
 4029844:	10887f04 	addi	r2,r2,8700
 4029848:	dfc00915 	stw	ra,36(sp)
 402984c:	dd000815 	stw	r20,32(sp)
 4029850:	dcc00715 	stw	r19,28(sp)
 4029854:	dc000415 	stw	r16,16(sp)
 4029858:	3025883a 	mov	r18,r6
 402985c:	14400017 	ldw	r17,0(r2)
 4029860:	20001926 	beq	r4,zero,40298c8 <wcrtomb+0x94>
 4029864:	008100f4 	movhi	r2,1027
 4029868:	10888304 	addi	r2,r2,8716
 402986c:	15000017 	ldw	r20,0(r2)
 4029870:	2021883a 	mov	r16,r4
 4029874:	2827883a 	mov	r19,r5
 4029878:	4024d980 	call	4024d98 <__locale_charset>
 402987c:	100f883a 	mov	r7,r2
 4029880:	dc800015 	stw	r18,0(sp)
 4029884:	980d883a 	mov	r6,r19
 4029888:	800b883a 	mov	r5,r16
 402988c:	8809883a 	mov	r4,r17
 4029890:	a03ee83a 	callr	r20
 4029894:	00ffffc4 	movi	r3,-1
 4029898:	10c0031e 	bne	r2,r3,40298a8 <wcrtomb+0x74>
 402989c:	90000015 	stw	zero,0(r18)
 40298a0:	00c02284 	movi	r3,138
 40298a4:	88c00015 	stw	r3,0(r17)
 40298a8:	dfc00917 	ldw	ra,36(sp)
 40298ac:	dd000817 	ldw	r20,32(sp)
 40298b0:	dcc00717 	ldw	r19,28(sp)
 40298b4:	dc800617 	ldw	r18,24(sp)
 40298b8:	dc400517 	ldw	r17,20(sp)
 40298bc:	dc000417 	ldw	r16,16(sp)
 40298c0:	dec00a04 	addi	sp,sp,40
 40298c4:	f800283a 	ret
 40298c8:	008100f4 	movhi	r2,1027
 40298cc:	10888304 	addi	r2,r2,8716
 40298d0:	14000017 	ldw	r16,0(r2)
 40298d4:	4024d980 	call	4024d98 <__locale_charset>
 40298d8:	100f883a 	mov	r7,r2
 40298dc:	dc800015 	stw	r18,0(sp)
 40298e0:	000d883a 	mov	r6,zero
 40298e4:	d9400104 	addi	r5,sp,4
 40298e8:	8809883a 	mov	r4,r17
 40298ec:	803ee83a 	callr	r16
 40298f0:	003fe806 	br	4029894 <__alt_data_end+0xfffe9894>

040298f4 <__ascii_wctomb>:
 40298f4:	28000526 	beq	r5,zero,402990c <__ascii_wctomb+0x18>
 40298f8:	00803fc4 	movi	r2,255
 40298fc:	11800536 	bltu	r2,r6,4029914 <__ascii_wctomb+0x20>
 4029900:	29800005 	stb	r6,0(r5)
 4029904:	00800044 	movi	r2,1
 4029908:	f800283a 	ret
 402990c:	0005883a 	mov	r2,zero
 4029910:	f800283a 	ret
 4029914:	00802284 	movi	r2,138
 4029918:	20800015 	stw	r2,0(r4)
 402991c:	00bfffc4 	movi	r2,-1
 4029920:	f800283a 	ret

04029924 <_wctomb_r>:
 4029924:	008100f4 	movhi	r2,1027
 4029928:	defff904 	addi	sp,sp,-28
 402992c:	10888304 	addi	r2,r2,8716
 4029930:	dfc00615 	stw	ra,24(sp)
 4029934:	dc400515 	stw	r17,20(sp)
 4029938:	dc000415 	stw	r16,16(sp)
 402993c:	3823883a 	mov	r17,r7
 4029940:	14000017 	ldw	r16,0(r2)
 4029944:	d9000115 	stw	r4,4(sp)
 4029948:	d9400215 	stw	r5,8(sp)
 402994c:	d9800315 	stw	r6,12(sp)
 4029950:	4024d980 	call	4024d98 <__locale_charset>
 4029954:	d9800317 	ldw	r6,12(sp)
 4029958:	d9400217 	ldw	r5,8(sp)
 402995c:	d9000117 	ldw	r4,4(sp)
 4029960:	100f883a 	mov	r7,r2
 4029964:	dc400015 	stw	r17,0(sp)
 4029968:	803ee83a 	callr	r16
 402996c:	dfc00617 	ldw	ra,24(sp)
 4029970:	dc400517 	ldw	r17,20(sp)
 4029974:	dc000417 	ldw	r16,16(sp)
 4029978:	dec00704 	addi	sp,sp,28
 402997c:	f800283a 	ret

04029980 <__udivdi3>:
 4029980:	defff504 	addi	sp,sp,-44
 4029984:	dcc00415 	stw	r19,16(sp)
 4029988:	dc000115 	stw	r16,4(sp)
 402998c:	dfc00a15 	stw	ra,40(sp)
 4029990:	df000915 	stw	fp,36(sp)
 4029994:	ddc00815 	stw	r23,32(sp)
 4029998:	dd800715 	stw	r22,28(sp)
 402999c:	dd400615 	stw	r21,24(sp)
 40299a0:	dd000515 	stw	r20,20(sp)
 40299a4:	dc800315 	stw	r18,12(sp)
 40299a8:	dc400215 	stw	r17,8(sp)
 40299ac:	2027883a 	mov	r19,r4
 40299b0:	2821883a 	mov	r16,r5
 40299b4:	3800411e 	bne	r7,zero,4029abc <__udivdi3+0x13c>
 40299b8:	3023883a 	mov	r17,r6
 40299bc:	2025883a 	mov	r18,r4
 40299c0:	2980522e 	bgeu	r5,r6,4029b0c <__udivdi3+0x18c>
 40299c4:	00bfffd4 	movui	r2,65535
 40299c8:	282d883a 	mov	r22,r5
 40299cc:	1180a836 	bltu	r2,r6,4029c70 <__udivdi3+0x2f0>
 40299d0:	00803fc4 	movi	r2,255
 40299d4:	1185803a 	cmpltu	r2,r2,r6
 40299d8:	100490fa 	slli	r2,r2,3
 40299dc:	3086d83a 	srl	r3,r6,r2
 40299e0:	010100f4 	movhi	r4,1027
 40299e4:	21012d04 	addi	r4,r4,1204
 40299e8:	20c7883a 	add	r3,r4,r3
 40299ec:	18c00003 	ldbu	r3,0(r3)
 40299f0:	1885883a 	add	r2,r3,r2
 40299f4:	00c00804 	movi	r3,32
 40299f8:	1887c83a 	sub	r3,r3,r2
 40299fc:	18000526 	beq	r3,zero,4029a14 <__udivdi3+0x94>
 4029a00:	80e0983a 	sll	r16,r16,r3
 4029a04:	9884d83a 	srl	r2,r19,r2
 4029a08:	30e2983a 	sll	r17,r6,r3
 4029a0c:	98e4983a 	sll	r18,r19,r3
 4029a10:	142cb03a 	or	r22,r2,r16
 4029a14:	882ad43a 	srli	r21,r17,16
 4029a18:	b009883a 	mov	r4,r22
 4029a1c:	8d3fffcc 	andi	r20,r17,65535
 4029a20:	a80b883a 	mov	r5,r21
 4029a24:	402a58c0 	call	402a58c <__umodsi3>
 4029a28:	b009883a 	mov	r4,r22
 4029a2c:	a80b883a 	mov	r5,r21
 4029a30:	1027883a 	mov	r19,r2
 4029a34:	402a5280 	call	402a528 <__udivsi3>
 4029a38:	102d883a 	mov	r22,r2
 4029a3c:	9826943a 	slli	r19,r19,16
 4029a40:	9004d43a 	srli	r2,r18,16
 4029a44:	a5a1383a 	mul	r16,r20,r22
 4029a48:	14c4b03a 	or	r2,r2,r19
 4029a4c:	1400052e 	bgeu	r2,r16,4029a64 <__udivdi3+0xe4>
 4029a50:	1445883a 	add	r2,r2,r17
 4029a54:	b0ffffc4 	addi	r3,r22,-1
 4029a58:	14400136 	bltu	r2,r17,4029a60 <__udivdi3+0xe0>
 4029a5c:	14012336 	bltu	r2,r16,4029eec <__udivdi3+0x56c>
 4029a60:	182d883a 	mov	r22,r3
 4029a64:	1421c83a 	sub	r16,r2,r16
 4029a68:	a80b883a 	mov	r5,r21
 4029a6c:	8009883a 	mov	r4,r16
 4029a70:	402a58c0 	call	402a58c <__umodsi3>
 4029a74:	1027883a 	mov	r19,r2
 4029a78:	a80b883a 	mov	r5,r21
 4029a7c:	8009883a 	mov	r4,r16
 4029a80:	402a5280 	call	402a528 <__udivsi3>
 4029a84:	9826943a 	slli	r19,r19,16
 4029a88:	a0a9383a 	mul	r20,r20,r2
 4029a8c:	94bfffcc 	andi	r18,r18,65535
 4029a90:	94e4b03a 	or	r18,r18,r19
 4029a94:	9500052e 	bgeu	r18,r20,4029aac <__udivdi3+0x12c>
 4029a98:	8ca5883a 	add	r18,r17,r18
 4029a9c:	10ffffc4 	addi	r3,r2,-1
 4029aa0:	9440f136 	bltu	r18,r17,4029e68 <__udivdi3+0x4e8>
 4029aa4:	9500f02e 	bgeu	r18,r20,4029e68 <__udivdi3+0x4e8>
 4029aa8:	10bfff84 	addi	r2,r2,-2
 4029aac:	b00c943a 	slli	r6,r22,16
 4029ab0:	0007883a 	mov	r3,zero
 4029ab4:	3084b03a 	or	r2,r6,r2
 4029ab8:	00005906 	br	4029c20 <__udivdi3+0x2a0>
 4029abc:	29c05636 	bltu	r5,r7,4029c18 <__udivdi3+0x298>
 4029ac0:	00bfffd4 	movui	r2,65535
 4029ac4:	11c0622e 	bgeu	r2,r7,4029c50 <__udivdi3+0x2d0>
 4029ac8:	00804034 	movhi	r2,256
 4029acc:	10bfffc4 	addi	r2,r2,-1
 4029ad0:	11c0ee36 	bltu	r2,r7,4029e8c <__udivdi3+0x50c>
 4029ad4:	00800404 	movi	r2,16
 4029ad8:	3886d83a 	srl	r3,r7,r2
 4029adc:	010100f4 	movhi	r4,1027
 4029ae0:	21012d04 	addi	r4,r4,1204
 4029ae4:	20c7883a 	add	r3,r4,r3
 4029ae8:	18c00003 	ldbu	r3,0(r3)
 4029aec:	05400804 	movi	r21,32
 4029af0:	1885883a 	add	r2,r3,r2
 4029af4:	a8abc83a 	sub	r21,r21,r2
 4029af8:	a800621e 	bne	r21,zero,4029c84 <__udivdi3+0x304>
 4029afc:	3c00e936 	bltu	r7,r16,4029ea4 <__udivdi3+0x524>
 4029b00:	9985403a 	cmpgeu	r2,r19,r6
 4029b04:	0007883a 	mov	r3,zero
 4029b08:	00004506 	br	4029c20 <__udivdi3+0x2a0>
 4029b0c:	3000041e 	bne	r6,zero,4029b20 <__udivdi3+0x1a0>
 4029b10:	000b883a 	mov	r5,zero
 4029b14:	01000044 	movi	r4,1
 4029b18:	402a5280 	call	402a528 <__udivsi3>
 4029b1c:	1023883a 	mov	r17,r2
 4029b20:	00bfffd4 	movui	r2,65535
 4029b24:	14404e2e 	bgeu	r2,r17,4029c60 <__udivdi3+0x2e0>
 4029b28:	00804034 	movhi	r2,256
 4029b2c:	10bfffc4 	addi	r2,r2,-1
 4029b30:	1440d836 	bltu	r2,r17,4029e94 <__udivdi3+0x514>
 4029b34:	00800404 	movi	r2,16
 4029b38:	8886d83a 	srl	r3,r17,r2
 4029b3c:	010100f4 	movhi	r4,1027
 4029b40:	21012d04 	addi	r4,r4,1204
 4029b44:	20c7883a 	add	r3,r4,r3
 4029b48:	18c00003 	ldbu	r3,0(r3)
 4029b4c:	1885883a 	add	r2,r3,r2
 4029b50:	00c00804 	movi	r3,32
 4029b54:	1887c83a 	sub	r3,r3,r2
 4029b58:	18008f1e 	bne	r3,zero,4029d98 <__udivdi3+0x418>
 4029b5c:	882ad43a 	srli	r21,r17,16
 4029b60:	8461c83a 	sub	r16,r16,r17
 4029b64:	8d3fffcc 	andi	r20,r17,65535
 4029b68:	00c00044 	movi	r3,1
 4029b6c:	8009883a 	mov	r4,r16
 4029b70:	a80b883a 	mov	r5,r21
 4029b74:	d8c00015 	stw	r3,0(sp)
 4029b78:	402a58c0 	call	402a58c <__umodsi3>
 4029b7c:	8009883a 	mov	r4,r16
 4029b80:	a80b883a 	mov	r5,r21
 4029b84:	1027883a 	mov	r19,r2
 4029b88:	402a5280 	call	402a528 <__udivsi3>
 4029b8c:	9826943a 	slli	r19,r19,16
 4029b90:	9008d43a 	srli	r4,r18,16
 4029b94:	1521383a 	mul	r16,r2,r20
 4029b98:	102d883a 	mov	r22,r2
 4029b9c:	24c8b03a 	or	r4,r4,r19
 4029ba0:	d8c00017 	ldw	r3,0(sp)
 4029ba4:	2400052e 	bgeu	r4,r16,4029bbc <__udivdi3+0x23c>
 4029ba8:	2449883a 	add	r4,r4,r17
 4029bac:	b0bfffc4 	addi	r2,r22,-1
 4029bb0:	24400136 	bltu	r4,r17,4029bb8 <__udivdi3+0x238>
 4029bb4:	2400ca36 	bltu	r4,r16,4029ee0 <__udivdi3+0x560>
 4029bb8:	102d883a 	mov	r22,r2
 4029bbc:	2421c83a 	sub	r16,r4,r16
 4029bc0:	a80b883a 	mov	r5,r21
 4029bc4:	8009883a 	mov	r4,r16
 4029bc8:	d8c00015 	stw	r3,0(sp)
 4029bcc:	402a58c0 	call	402a58c <__umodsi3>
 4029bd0:	1027883a 	mov	r19,r2
 4029bd4:	a80b883a 	mov	r5,r21
 4029bd8:	8009883a 	mov	r4,r16
 4029bdc:	402a5280 	call	402a528 <__udivsi3>
 4029be0:	9826943a 	slli	r19,r19,16
 4029be4:	1529383a 	mul	r20,r2,r20
 4029be8:	94bfffcc 	andi	r18,r18,65535
 4029bec:	94e4b03a 	or	r18,r18,r19
 4029bf0:	d8c00017 	ldw	r3,0(sp)
 4029bf4:	9500052e 	bgeu	r18,r20,4029c0c <__udivdi3+0x28c>
 4029bf8:	8ca5883a 	add	r18,r17,r18
 4029bfc:	113fffc4 	addi	r4,r2,-1
 4029c00:	94409736 	bltu	r18,r17,4029e60 <__udivdi3+0x4e0>
 4029c04:	9500962e 	bgeu	r18,r20,4029e60 <__udivdi3+0x4e0>
 4029c08:	10bfff84 	addi	r2,r2,-2
 4029c0c:	b00c943a 	slli	r6,r22,16
 4029c10:	3084b03a 	or	r2,r6,r2
 4029c14:	00000206 	br	4029c20 <__udivdi3+0x2a0>
 4029c18:	0007883a 	mov	r3,zero
 4029c1c:	0005883a 	mov	r2,zero
 4029c20:	dfc00a17 	ldw	ra,40(sp)
 4029c24:	df000917 	ldw	fp,36(sp)
 4029c28:	ddc00817 	ldw	r23,32(sp)
 4029c2c:	dd800717 	ldw	r22,28(sp)
 4029c30:	dd400617 	ldw	r21,24(sp)
 4029c34:	dd000517 	ldw	r20,20(sp)
 4029c38:	dcc00417 	ldw	r19,16(sp)
 4029c3c:	dc800317 	ldw	r18,12(sp)
 4029c40:	dc400217 	ldw	r17,8(sp)
 4029c44:	dc000117 	ldw	r16,4(sp)
 4029c48:	dec00b04 	addi	sp,sp,44
 4029c4c:	f800283a 	ret
 4029c50:	00803fc4 	movi	r2,255
 4029c54:	11c5803a 	cmpltu	r2,r2,r7
 4029c58:	100490fa 	slli	r2,r2,3
 4029c5c:	003f9e06 	br	4029ad8 <__alt_data_end+0xfffe9ad8>
 4029c60:	00803fc4 	movi	r2,255
 4029c64:	1445803a 	cmpltu	r2,r2,r17
 4029c68:	100490fa 	slli	r2,r2,3
 4029c6c:	003fb206 	br	4029b38 <__alt_data_end+0xfffe9b38>
 4029c70:	00804034 	movhi	r2,256
 4029c74:	10bfffc4 	addi	r2,r2,-1
 4029c78:	11808836 	bltu	r2,r6,4029e9c <__udivdi3+0x51c>
 4029c7c:	00800404 	movi	r2,16
 4029c80:	003f5606 	br	40299dc <__alt_data_end+0xfffe99dc>
 4029c84:	30aed83a 	srl	r23,r6,r2
 4029c88:	3d4e983a 	sll	r7,r7,r21
 4029c8c:	80acd83a 	srl	r22,r16,r2
 4029c90:	9884d83a 	srl	r2,r19,r2
 4029c94:	3deeb03a 	or	r23,r7,r23
 4029c98:	b824d43a 	srli	r18,r23,16
 4029c9c:	8560983a 	sll	r16,r16,r21
 4029ca0:	b009883a 	mov	r4,r22
 4029ca4:	900b883a 	mov	r5,r18
 4029ca8:	3568983a 	sll	r20,r6,r21
 4029cac:	1420b03a 	or	r16,r2,r16
 4029cb0:	402a58c0 	call	402a58c <__umodsi3>
 4029cb4:	b009883a 	mov	r4,r22
 4029cb8:	900b883a 	mov	r5,r18
 4029cbc:	1023883a 	mov	r17,r2
 4029cc0:	402a5280 	call	402a528 <__udivsi3>
 4029cc4:	8808943a 	slli	r4,r17,16
 4029cc8:	bf3fffcc 	andi	fp,r23,65535
 4029ccc:	8006d43a 	srli	r3,r16,16
 4029cd0:	e0a3383a 	mul	r17,fp,r2
 4029cd4:	100d883a 	mov	r6,r2
 4029cd8:	1906b03a 	or	r3,r3,r4
 4029cdc:	1c40042e 	bgeu	r3,r17,4029cf0 <__udivdi3+0x370>
 4029ce0:	1dc7883a 	add	r3,r3,r23
 4029ce4:	10bfffc4 	addi	r2,r2,-1
 4029ce8:	1dc0752e 	bgeu	r3,r23,4029ec0 <__udivdi3+0x540>
 4029cec:	100d883a 	mov	r6,r2
 4029cf0:	1c63c83a 	sub	r17,r3,r17
 4029cf4:	900b883a 	mov	r5,r18
 4029cf8:	8809883a 	mov	r4,r17
 4029cfc:	d9800015 	stw	r6,0(sp)
 4029d00:	402a58c0 	call	402a58c <__umodsi3>
 4029d04:	102d883a 	mov	r22,r2
 4029d08:	8809883a 	mov	r4,r17
 4029d0c:	900b883a 	mov	r5,r18
 4029d10:	402a5280 	call	402a528 <__udivsi3>
 4029d14:	b02c943a 	slli	r22,r22,16
 4029d18:	e089383a 	mul	r4,fp,r2
 4029d1c:	843fffcc 	andi	r16,r16,65535
 4029d20:	85a0b03a 	or	r16,r16,r22
 4029d24:	d9800017 	ldw	r6,0(sp)
 4029d28:	8100042e 	bgeu	r16,r4,4029d3c <__udivdi3+0x3bc>
 4029d2c:	85e1883a 	add	r16,r16,r23
 4029d30:	10ffffc4 	addi	r3,r2,-1
 4029d34:	85c05e2e 	bgeu	r16,r23,4029eb0 <__udivdi3+0x530>
 4029d38:	1805883a 	mov	r2,r3
 4029d3c:	300c943a 	slli	r6,r6,16
 4029d40:	a17fffcc 	andi	r5,r20,65535
 4029d44:	a028d43a 	srli	r20,r20,16
 4029d48:	3084b03a 	or	r2,r6,r2
 4029d4c:	10ffffcc 	andi	r3,r2,65535
 4029d50:	100cd43a 	srli	r6,r2,16
 4029d54:	194f383a 	mul	r7,r3,r5
 4029d58:	1d07383a 	mul	r3,r3,r20
 4029d5c:	314b383a 	mul	r5,r6,r5
 4029d60:	3810d43a 	srli	r8,r7,16
 4029d64:	8121c83a 	sub	r16,r16,r4
 4029d68:	1947883a 	add	r3,r3,r5
 4029d6c:	40c7883a 	add	r3,r8,r3
 4029d70:	350d383a 	mul	r6,r6,r20
 4029d74:	1940022e 	bgeu	r3,r5,4029d80 <__udivdi3+0x400>
 4029d78:	01000074 	movhi	r4,1
 4029d7c:	310d883a 	add	r6,r6,r4
 4029d80:	1828d43a 	srli	r20,r3,16
 4029d84:	a18d883a 	add	r6,r20,r6
 4029d88:	81803e36 	bltu	r16,r6,4029e84 <__udivdi3+0x504>
 4029d8c:	81803826 	beq	r16,r6,4029e70 <__udivdi3+0x4f0>
 4029d90:	0007883a 	mov	r3,zero
 4029d94:	003fa206 	br	4029c20 <__alt_data_end+0xfffe9c20>
 4029d98:	88e2983a 	sll	r17,r17,r3
 4029d9c:	80a8d83a 	srl	r20,r16,r2
 4029da0:	80e0983a 	sll	r16,r16,r3
 4029da4:	882ad43a 	srli	r21,r17,16
 4029da8:	9884d83a 	srl	r2,r19,r2
 4029dac:	a009883a 	mov	r4,r20
 4029db0:	a80b883a 	mov	r5,r21
 4029db4:	142eb03a 	or	r23,r2,r16
 4029db8:	98e4983a 	sll	r18,r19,r3
 4029dbc:	402a58c0 	call	402a58c <__umodsi3>
 4029dc0:	a009883a 	mov	r4,r20
 4029dc4:	a80b883a 	mov	r5,r21
 4029dc8:	1021883a 	mov	r16,r2
 4029dcc:	402a5280 	call	402a528 <__udivsi3>
 4029dd0:	1039883a 	mov	fp,r2
 4029dd4:	8d3fffcc 	andi	r20,r17,65535
 4029dd8:	8020943a 	slli	r16,r16,16
 4029ddc:	b804d43a 	srli	r2,r23,16
 4029de0:	a72d383a 	mul	r22,r20,fp
 4029de4:	1404b03a 	or	r2,r2,r16
 4029de8:	1580062e 	bgeu	r2,r22,4029e04 <__udivdi3+0x484>
 4029dec:	1445883a 	add	r2,r2,r17
 4029df0:	e0ffffc4 	addi	r3,fp,-1
 4029df4:	14403836 	bltu	r2,r17,4029ed8 <__udivdi3+0x558>
 4029df8:	1580372e 	bgeu	r2,r22,4029ed8 <__udivdi3+0x558>
 4029dfc:	e73fff84 	addi	fp,fp,-2
 4029e00:	1445883a 	add	r2,r2,r17
 4029e04:	15adc83a 	sub	r22,r2,r22
 4029e08:	a80b883a 	mov	r5,r21
 4029e0c:	b009883a 	mov	r4,r22
 4029e10:	402a58c0 	call	402a58c <__umodsi3>
 4029e14:	1027883a 	mov	r19,r2
 4029e18:	b009883a 	mov	r4,r22
 4029e1c:	a80b883a 	mov	r5,r21
 4029e20:	402a5280 	call	402a528 <__udivsi3>
 4029e24:	9826943a 	slli	r19,r19,16
 4029e28:	a0a1383a 	mul	r16,r20,r2
 4029e2c:	b93fffcc 	andi	r4,r23,65535
 4029e30:	24c8b03a 	or	r4,r4,r19
 4029e34:	2400062e 	bgeu	r4,r16,4029e50 <__udivdi3+0x4d0>
 4029e38:	2449883a 	add	r4,r4,r17
 4029e3c:	10ffffc4 	addi	r3,r2,-1
 4029e40:	24402336 	bltu	r4,r17,4029ed0 <__udivdi3+0x550>
 4029e44:	2400222e 	bgeu	r4,r16,4029ed0 <__udivdi3+0x550>
 4029e48:	10bfff84 	addi	r2,r2,-2
 4029e4c:	2449883a 	add	r4,r4,r17
 4029e50:	e038943a 	slli	fp,fp,16
 4029e54:	2421c83a 	sub	r16,r4,r16
 4029e58:	e086b03a 	or	r3,fp,r2
 4029e5c:	003f4306 	br	4029b6c <__alt_data_end+0xfffe9b6c>
 4029e60:	2005883a 	mov	r2,r4
 4029e64:	003f6906 	br	4029c0c <__alt_data_end+0xfffe9c0c>
 4029e68:	1805883a 	mov	r2,r3
 4029e6c:	003f0f06 	br	4029aac <__alt_data_end+0xfffe9aac>
 4029e70:	1806943a 	slli	r3,r3,16
 4029e74:	9d66983a 	sll	r19,r19,r21
 4029e78:	39ffffcc 	andi	r7,r7,65535
 4029e7c:	19c7883a 	add	r3,r3,r7
 4029e80:	98ffc32e 	bgeu	r19,r3,4029d90 <__alt_data_end+0xfffe9d90>
 4029e84:	10bfffc4 	addi	r2,r2,-1
 4029e88:	003fc106 	br	4029d90 <__alt_data_end+0xfffe9d90>
 4029e8c:	00800604 	movi	r2,24
 4029e90:	003f1106 	br	4029ad8 <__alt_data_end+0xfffe9ad8>
 4029e94:	00800604 	movi	r2,24
 4029e98:	003f2706 	br	4029b38 <__alt_data_end+0xfffe9b38>
 4029e9c:	00800604 	movi	r2,24
 4029ea0:	003ece06 	br	40299dc <__alt_data_end+0xfffe99dc>
 4029ea4:	0007883a 	mov	r3,zero
 4029ea8:	00800044 	movi	r2,1
 4029eac:	003f5c06 	br	4029c20 <__alt_data_end+0xfffe9c20>
 4029eb0:	813fa12e 	bgeu	r16,r4,4029d38 <__alt_data_end+0xfffe9d38>
 4029eb4:	10bfff84 	addi	r2,r2,-2
 4029eb8:	85e1883a 	add	r16,r16,r23
 4029ebc:	003f9f06 	br	4029d3c <__alt_data_end+0xfffe9d3c>
 4029ec0:	1c7f8a2e 	bgeu	r3,r17,4029cec <__alt_data_end+0xfffe9cec>
 4029ec4:	31bfff84 	addi	r6,r6,-2
 4029ec8:	1dc7883a 	add	r3,r3,r23
 4029ecc:	003f8806 	br	4029cf0 <__alt_data_end+0xfffe9cf0>
 4029ed0:	1805883a 	mov	r2,r3
 4029ed4:	003fde06 	br	4029e50 <__alt_data_end+0xfffe9e50>
 4029ed8:	1839883a 	mov	fp,r3
 4029edc:	003fc906 	br	4029e04 <__alt_data_end+0xfffe9e04>
 4029ee0:	b5bfff84 	addi	r22,r22,-2
 4029ee4:	2449883a 	add	r4,r4,r17
 4029ee8:	003f3406 	br	4029bbc <__alt_data_end+0xfffe9bbc>
 4029eec:	b5bfff84 	addi	r22,r22,-2
 4029ef0:	1445883a 	add	r2,r2,r17
 4029ef4:	003edb06 	br	4029a64 <__alt_data_end+0xfffe9a64>

04029ef8 <__umoddi3>:
 4029ef8:	defff404 	addi	sp,sp,-48
 4029efc:	df000a15 	stw	fp,40(sp)
 4029f00:	dc400315 	stw	r17,12(sp)
 4029f04:	dc000215 	stw	r16,8(sp)
 4029f08:	dfc00b15 	stw	ra,44(sp)
 4029f0c:	ddc00915 	stw	r23,36(sp)
 4029f10:	dd800815 	stw	r22,32(sp)
 4029f14:	dd400715 	stw	r21,28(sp)
 4029f18:	dd000615 	stw	r20,24(sp)
 4029f1c:	dcc00515 	stw	r19,20(sp)
 4029f20:	dc800415 	stw	r18,16(sp)
 4029f24:	2021883a 	mov	r16,r4
 4029f28:	2823883a 	mov	r17,r5
 4029f2c:	2839883a 	mov	fp,r5
 4029f30:	38003c1e 	bne	r7,zero,402a024 <__umoddi3+0x12c>
 4029f34:	3027883a 	mov	r19,r6
 4029f38:	2029883a 	mov	r20,r4
 4029f3c:	2980512e 	bgeu	r5,r6,402a084 <__umoddi3+0x18c>
 4029f40:	00bfffd4 	movui	r2,65535
 4029f44:	11809a36 	bltu	r2,r6,402a1b0 <__umoddi3+0x2b8>
 4029f48:	01003fc4 	movi	r4,255
 4029f4c:	2189803a 	cmpltu	r4,r4,r6
 4029f50:	200890fa 	slli	r4,r4,3
 4029f54:	3104d83a 	srl	r2,r6,r4
 4029f58:	00c100f4 	movhi	r3,1027
 4029f5c:	18c12d04 	addi	r3,r3,1204
 4029f60:	1885883a 	add	r2,r3,r2
 4029f64:	10c00003 	ldbu	r3,0(r2)
 4029f68:	00800804 	movi	r2,32
 4029f6c:	1909883a 	add	r4,r3,r4
 4029f70:	1125c83a 	sub	r18,r2,r4
 4029f74:	90000526 	beq	r18,zero,4029f8c <__umoddi3+0x94>
 4029f78:	8ca2983a 	sll	r17,r17,r18
 4029f7c:	8108d83a 	srl	r4,r16,r4
 4029f80:	34a6983a 	sll	r19,r6,r18
 4029f84:	84a8983a 	sll	r20,r16,r18
 4029f88:	2478b03a 	or	fp,r4,r17
 4029f8c:	982ed43a 	srli	r23,r19,16
 4029f90:	e009883a 	mov	r4,fp
 4029f94:	9dbfffcc 	andi	r22,r19,65535
 4029f98:	b80b883a 	mov	r5,r23
 4029f9c:	402a58c0 	call	402a58c <__umodsi3>
 4029fa0:	e009883a 	mov	r4,fp
 4029fa4:	b80b883a 	mov	r5,r23
 4029fa8:	102b883a 	mov	r21,r2
 4029fac:	402a5280 	call	402a528 <__udivsi3>
 4029fb0:	a806943a 	slli	r3,r21,16
 4029fb4:	a008d43a 	srli	r4,r20,16
 4029fb8:	b085383a 	mul	r2,r22,r2
 4029fbc:	20c8b03a 	or	r4,r4,r3
 4029fc0:	2080032e 	bgeu	r4,r2,4029fd0 <__umoddi3+0xd8>
 4029fc4:	24c9883a 	add	r4,r4,r19
 4029fc8:	24c00136 	bltu	r4,r19,4029fd0 <__umoddi3+0xd8>
 4029fcc:	20811036 	bltu	r4,r2,402a410 <__umoddi3+0x518>
 4029fd0:	20abc83a 	sub	r21,r4,r2
 4029fd4:	b80b883a 	mov	r5,r23
 4029fd8:	a809883a 	mov	r4,r21
 4029fdc:	402a58c0 	call	402a58c <__umodsi3>
 4029fe0:	1023883a 	mov	r17,r2
 4029fe4:	b80b883a 	mov	r5,r23
 4029fe8:	a809883a 	mov	r4,r21
 4029fec:	402a5280 	call	402a528 <__udivsi3>
 4029ff0:	8822943a 	slli	r17,r17,16
 4029ff4:	b085383a 	mul	r2,r22,r2
 4029ff8:	a0ffffcc 	andi	r3,r20,65535
 4029ffc:	1c46b03a 	or	r3,r3,r17
 402a000:	1880042e 	bgeu	r3,r2,402a014 <__umoddi3+0x11c>
 402a004:	1cc7883a 	add	r3,r3,r19
 402a008:	1cc00236 	bltu	r3,r19,402a014 <__umoddi3+0x11c>
 402a00c:	1880012e 	bgeu	r3,r2,402a014 <__umoddi3+0x11c>
 402a010:	1cc7883a 	add	r3,r3,r19
 402a014:	1885c83a 	sub	r2,r3,r2
 402a018:	1484d83a 	srl	r2,r2,r18
 402a01c:	0007883a 	mov	r3,zero
 402a020:	00004f06 	br	402a160 <__umoddi3+0x268>
 402a024:	29c04c36 	bltu	r5,r7,402a158 <__umoddi3+0x260>
 402a028:	00bfffd4 	movui	r2,65535
 402a02c:	11c0582e 	bgeu	r2,r7,402a190 <__umoddi3+0x298>
 402a030:	00804034 	movhi	r2,256
 402a034:	10bfffc4 	addi	r2,r2,-1
 402a038:	11c0e736 	bltu	r2,r7,402a3d8 <__umoddi3+0x4e0>
 402a03c:	01000404 	movi	r4,16
 402a040:	3904d83a 	srl	r2,r7,r4
 402a044:	00c100f4 	movhi	r3,1027
 402a048:	18c12d04 	addi	r3,r3,1204
 402a04c:	1885883a 	add	r2,r3,r2
 402a050:	14c00003 	ldbu	r19,0(r2)
 402a054:	00c00804 	movi	r3,32
 402a058:	9927883a 	add	r19,r19,r4
 402a05c:	1ce9c83a 	sub	r20,r3,r19
 402a060:	a000581e 	bne	r20,zero,402a1c4 <__umoddi3+0x2cc>
 402a064:	3c400136 	bltu	r7,r17,402a06c <__umoddi3+0x174>
 402a068:	8180eb36 	bltu	r16,r6,402a418 <__umoddi3+0x520>
 402a06c:	8185c83a 	sub	r2,r16,r6
 402a070:	89e3c83a 	sub	r17,r17,r7
 402a074:	8089803a 	cmpltu	r4,r16,r2
 402a078:	8939c83a 	sub	fp,r17,r4
 402a07c:	e007883a 	mov	r3,fp
 402a080:	00003706 	br	402a160 <__umoddi3+0x268>
 402a084:	3000041e 	bne	r6,zero,402a098 <__umoddi3+0x1a0>
 402a088:	000b883a 	mov	r5,zero
 402a08c:	01000044 	movi	r4,1
 402a090:	402a5280 	call	402a528 <__udivsi3>
 402a094:	1027883a 	mov	r19,r2
 402a098:	00bfffd4 	movui	r2,65535
 402a09c:	14c0402e 	bgeu	r2,r19,402a1a0 <__umoddi3+0x2a8>
 402a0a0:	00804034 	movhi	r2,256
 402a0a4:	10bfffc4 	addi	r2,r2,-1
 402a0a8:	14c0cd36 	bltu	r2,r19,402a3e0 <__umoddi3+0x4e8>
 402a0ac:	00800404 	movi	r2,16
 402a0b0:	9886d83a 	srl	r3,r19,r2
 402a0b4:	010100f4 	movhi	r4,1027
 402a0b8:	21012d04 	addi	r4,r4,1204
 402a0bc:	20c7883a 	add	r3,r4,r3
 402a0c0:	18c00003 	ldbu	r3,0(r3)
 402a0c4:	1887883a 	add	r3,r3,r2
 402a0c8:	00800804 	movi	r2,32
 402a0cc:	10e5c83a 	sub	r18,r2,r3
 402a0d0:	9000901e 	bne	r18,zero,402a314 <__umoddi3+0x41c>
 402a0d4:	982cd43a 	srli	r22,r19,16
 402a0d8:	8ce3c83a 	sub	r17,r17,r19
 402a0dc:	9d7fffcc 	andi	r21,r19,65535
 402a0e0:	b00b883a 	mov	r5,r22
 402a0e4:	8809883a 	mov	r4,r17
 402a0e8:	402a58c0 	call	402a58c <__umodsi3>
 402a0ec:	8809883a 	mov	r4,r17
 402a0f0:	b00b883a 	mov	r5,r22
 402a0f4:	1021883a 	mov	r16,r2
 402a0f8:	402a5280 	call	402a528 <__udivsi3>
 402a0fc:	8006943a 	slli	r3,r16,16
 402a100:	a008d43a 	srli	r4,r20,16
 402a104:	1545383a 	mul	r2,r2,r21
 402a108:	20c8b03a 	or	r4,r4,r3
 402a10c:	2080042e 	bgeu	r4,r2,402a120 <__umoddi3+0x228>
 402a110:	24c9883a 	add	r4,r4,r19
 402a114:	24c00236 	bltu	r4,r19,402a120 <__umoddi3+0x228>
 402a118:	2080012e 	bgeu	r4,r2,402a120 <__umoddi3+0x228>
 402a11c:	24c9883a 	add	r4,r4,r19
 402a120:	20a1c83a 	sub	r16,r4,r2
 402a124:	b00b883a 	mov	r5,r22
 402a128:	8009883a 	mov	r4,r16
 402a12c:	402a58c0 	call	402a58c <__umodsi3>
 402a130:	1023883a 	mov	r17,r2
 402a134:	b00b883a 	mov	r5,r22
 402a138:	8009883a 	mov	r4,r16
 402a13c:	402a5280 	call	402a528 <__udivsi3>
 402a140:	8822943a 	slli	r17,r17,16
 402a144:	1545383a 	mul	r2,r2,r21
 402a148:	a53fffcc 	andi	r20,r20,65535
 402a14c:	a446b03a 	or	r3,r20,r17
 402a150:	18bfb02e 	bgeu	r3,r2,402a014 <__alt_data_end+0xfffea014>
 402a154:	003fab06 	br	402a004 <__alt_data_end+0xfffea004>
 402a158:	2005883a 	mov	r2,r4
 402a15c:	2807883a 	mov	r3,r5
 402a160:	dfc00b17 	ldw	ra,44(sp)
 402a164:	df000a17 	ldw	fp,40(sp)
 402a168:	ddc00917 	ldw	r23,36(sp)
 402a16c:	dd800817 	ldw	r22,32(sp)
 402a170:	dd400717 	ldw	r21,28(sp)
 402a174:	dd000617 	ldw	r20,24(sp)
 402a178:	dcc00517 	ldw	r19,20(sp)
 402a17c:	dc800417 	ldw	r18,16(sp)
 402a180:	dc400317 	ldw	r17,12(sp)
 402a184:	dc000217 	ldw	r16,8(sp)
 402a188:	dec00c04 	addi	sp,sp,48
 402a18c:	f800283a 	ret
 402a190:	04c03fc4 	movi	r19,255
 402a194:	99c9803a 	cmpltu	r4,r19,r7
 402a198:	200890fa 	slli	r4,r4,3
 402a19c:	003fa806 	br	402a040 <__alt_data_end+0xfffea040>
 402a1a0:	00803fc4 	movi	r2,255
 402a1a4:	14c5803a 	cmpltu	r2,r2,r19
 402a1a8:	100490fa 	slli	r2,r2,3
 402a1ac:	003fc006 	br	402a0b0 <__alt_data_end+0xfffea0b0>
 402a1b0:	00804034 	movhi	r2,256
 402a1b4:	10bfffc4 	addi	r2,r2,-1
 402a1b8:	11808b36 	bltu	r2,r6,402a3e8 <__umoddi3+0x4f0>
 402a1bc:	01000404 	movi	r4,16
 402a1c0:	003f6406 	br	4029f54 <__alt_data_end+0xfffe9f54>
 402a1c4:	34c4d83a 	srl	r2,r6,r19
 402a1c8:	3d0e983a 	sll	r7,r7,r20
 402a1cc:	8cf8d83a 	srl	fp,r17,r19
 402a1d0:	8d10983a 	sll	r8,r17,r20
 402a1d4:	38aab03a 	or	r21,r7,r2
 402a1d8:	a82cd43a 	srli	r22,r21,16
 402a1dc:	84e2d83a 	srl	r17,r16,r19
 402a1e0:	e009883a 	mov	r4,fp
 402a1e4:	b00b883a 	mov	r5,r22
 402a1e8:	8a22b03a 	or	r17,r17,r8
 402a1ec:	3524983a 	sll	r18,r6,r20
 402a1f0:	402a58c0 	call	402a58c <__umodsi3>
 402a1f4:	e009883a 	mov	r4,fp
 402a1f8:	b00b883a 	mov	r5,r22
 402a1fc:	102f883a 	mov	r23,r2
 402a200:	402a5280 	call	402a528 <__udivsi3>
 402a204:	100d883a 	mov	r6,r2
 402a208:	b808943a 	slli	r4,r23,16
 402a20c:	aa3fffcc 	andi	r8,r21,65535
 402a210:	8804d43a 	srli	r2,r17,16
 402a214:	41af383a 	mul	r23,r8,r6
 402a218:	8520983a 	sll	r16,r16,r20
 402a21c:	1104b03a 	or	r2,r2,r4
 402a220:	15c0042e 	bgeu	r2,r23,402a234 <__umoddi3+0x33c>
 402a224:	1545883a 	add	r2,r2,r21
 402a228:	30ffffc4 	addi	r3,r6,-1
 402a22c:	1540742e 	bgeu	r2,r21,402a400 <__umoddi3+0x508>
 402a230:	180d883a 	mov	r6,r3
 402a234:	15efc83a 	sub	r23,r2,r23
 402a238:	b00b883a 	mov	r5,r22
 402a23c:	b809883a 	mov	r4,r23
 402a240:	d9800115 	stw	r6,4(sp)
 402a244:	da000015 	stw	r8,0(sp)
 402a248:	402a58c0 	call	402a58c <__umodsi3>
 402a24c:	b00b883a 	mov	r5,r22
 402a250:	b809883a 	mov	r4,r23
 402a254:	1039883a 	mov	fp,r2
 402a258:	402a5280 	call	402a528 <__udivsi3>
 402a25c:	da000017 	ldw	r8,0(sp)
 402a260:	e038943a 	slli	fp,fp,16
 402a264:	100b883a 	mov	r5,r2
 402a268:	4089383a 	mul	r4,r8,r2
 402a26c:	8a3fffcc 	andi	r8,r17,65535
 402a270:	4710b03a 	or	r8,r8,fp
 402a274:	d9800117 	ldw	r6,4(sp)
 402a278:	4100042e 	bgeu	r8,r4,402a28c <__umoddi3+0x394>
 402a27c:	4551883a 	add	r8,r8,r21
 402a280:	10bfffc4 	addi	r2,r2,-1
 402a284:	45405a2e 	bgeu	r8,r21,402a3f0 <__umoddi3+0x4f8>
 402a288:	100b883a 	mov	r5,r2
 402a28c:	300c943a 	slli	r6,r6,16
 402a290:	91ffffcc 	andi	r7,r18,65535
 402a294:	9004d43a 	srli	r2,r18,16
 402a298:	314cb03a 	or	r6,r6,r5
 402a29c:	317fffcc 	andi	r5,r6,65535
 402a2a0:	300cd43a 	srli	r6,r6,16
 402a2a4:	29d3383a 	mul	r9,r5,r7
 402a2a8:	288b383a 	mul	r5,r5,r2
 402a2ac:	31cf383a 	mul	r7,r6,r7
 402a2b0:	4806d43a 	srli	r3,r9,16
 402a2b4:	4111c83a 	sub	r8,r8,r4
 402a2b8:	29cb883a 	add	r5,r5,r7
 402a2bc:	194b883a 	add	r5,r3,r5
 402a2c0:	3085383a 	mul	r2,r6,r2
 402a2c4:	29c0022e 	bgeu	r5,r7,402a2d0 <__umoddi3+0x3d8>
 402a2c8:	00c00074 	movhi	r3,1
 402a2cc:	10c5883a 	add	r2,r2,r3
 402a2d0:	2808d43a 	srli	r4,r5,16
 402a2d4:	280a943a 	slli	r5,r5,16
 402a2d8:	4a7fffcc 	andi	r9,r9,65535
 402a2dc:	2085883a 	add	r2,r4,r2
 402a2e0:	2a4b883a 	add	r5,r5,r9
 402a2e4:	40803636 	bltu	r8,r2,402a3c0 <__umoddi3+0x4c8>
 402a2e8:	40804d26 	beq	r8,r2,402a420 <__umoddi3+0x528>
 402a2ec:	4089c83a 	sub	r4,r8,r2
 402a2f0:	280f883a 	mov	r7,r5
 402a2f4:	81cfc83a 	sub	r7,r16,r7
 402a2f8:	81c7803a 	cmpltu	r3,r16,r7
 402a2fc:	20c7c83a 	sub	r3,r4,r3
 402a300:	1cc4983a 	sll	r2,r3,r19
 402a304:	3d0ed83a 	srl	r7,r7,r20
 402a308:	1d06d83a 	srl	r3,r3,r20
 402a30c:	11c4b03a 	or	r2,r2,r7
 402a310:	003f9306 	br	402a160 <__alt_data_end+0xfffea160>
 402a314:	9ca6983a 	sll	r19,r19,r18
 402a318:	88e8d83a 	srl	r20,r17,r3
 402a31c:	80c4d83a 	srl	r2,r16,r3
 402a320:	982cd43a 	srli	r22,r19,16
 402a324:	8ca2983a 	sll	r17,r17,r18
 402a328:	a009883a 	mov	r4,r20
 402a32c:	b00b883a 	mov	r5,r22
 402a330:	1478b03a 	or	fp,r2,r17
 402a334:	402a58c0 	call	402a58c <__umodsi3>
 402a338:	a009883a 	mov	r4,r20
 402a33c:	b00b883a 	mov	r5,r22
 402a340:	1023883a 	mov	r17,r2
 402a344:	402a5280 	call	402a528 <__udivsi3>
 402a348:	9d7fffcc 	andi	r21,r19,65535
 402a34c:	880a943a 	slli	r5,r17,16
 402a350:	e008d43a 	srli	r4,fp,16
 402a354:	a885383a 	mul	r2,r21,r2
 402a358:	84a8983a 	sll	r20,r16,r18
 402a35c:	2148b03a 	or	r4,r4,r5
 402a360:	2080042e 	bgeu	r4,r2,402a374 <__umoddi3+0x47c>
 402a364:	24c9883a 	add	r4,r4,r19
 402a368:	24c00236 	bltu	r4,r19,402a374 <__umoddi3+0x47c>
 402a36c:	2080012e 	bgeu	r4,r2,402a374 <__umoddi3+0x47c>
 402a370:	24c9883a 	add	r4,r4,r19
 402a374:	20a3c83a 	sub	r17,r4,r2
 402a378:	b00b883a 	mov	r5,r22
 402a37c:	8809883a 	mov	r4,r17
 402a380:	402a58c0 	call	402a58c <__umodsi3>
 402a384:	102f883a 	mov	r23,r2
 402a388:	8809883a 	mov	r4,r17
 402a38c:	b00b883a 	mov	r5,r22
 402a390:	402a5280 	call	402a528 <__udivsi3>
 402a394:	b82e943a 	slli	r23,r23,16
 402a398:	a885383a 	mul	r2,r21,r2
 402a39c:	e13fffcc 	andi	r4,fp,65535
 402a3a0:	25c8b03a 	or	r4,r4,r23
 402a3a4:	2080042e 	bgeu	r4,r2,402a3b8 <__umoddi3+0x4c0>
 402a3a8:	24c9883a 	add	r4,r4,r19
 402a3ac:	24c00236 	bltu	r4,r19,402a3b8 <__umoddi3+0x4c0>
 402a3b0:	2080012e 	bgeu	r4,r2,402a3b8 <__umoddi3+0x4c0>
 402a3b4:	24c9883a 	add	r4,r4,r19
 402a3b8:	20a3c83a 	sub	r17,r4,r2
 402a3bc:	003f4806 	br	402a0e0 <__alt_data_end+0xfffea0e0>
 402a3c0:	2c8fc83a 	sub	r7,r5,r18
 402a3c4:	1545c83a 	sub	r2,r2,r21
 402a3c8:	29cb803a 	cmpltu	r5,r5,r7
 402a3cc:	1145c83a 	sub	r2,r2,r5
 402a3d0:	4089c83a 	sub	r4,r8,r2
 402a3d4:	003fc706 	br	402a2f4 <__alt_data_end+0xfffea2f4>
 402a3d8:	01000604 	movi	r4,24
 402a3dc:	003f1806 	br	402a040 <__alt_data_end+0xfffea040>
 402a3e0:	00800604 	movi	r2,24
 402a3e4:	003f3206 	br	402a0b0 <__alt_data_end+0xfffea0b0>
 402a3e8:	01000604 	movi	r4,24
 402a3ec:	003ed906 	br	4029f54 <__alt_data_end+0xfffe9f54>
 402a3f0:	413fa52e 	bgeu	r8,r4,402a288 <__alt_data_end+0xfffea288>
 402a3f4:	297fff84 	addi	r5,r5,-2
 402a3f8:	4551883a 	add	r8,r8,r21
 402a3fc:	003fa306 	br	402a28c <__alt_data_end+0xfffea28c>
 402a400:	15ff8b2e 	bgeu	r2,r23,402a230 <__alt_data_end+0xfffea230>
 402a404:	31bfff84 	addi	r6,r6,-2
 402a408:	1545883a 	add	r2,r2,r21
 402a40c:	003f8906 	br	402a234 <__alt_data_end+0xfffea234>
 402a410:	24c9883a 	add	r4,r4,r19
 402a414:	003eee06 	br	4029fd0 <__alt_data_end+0xfffe9fd0>
 402a418:	8005883a 	mov	r2,r16
 402a41c:	003f1706 	br	402a07c <__alt_data_end+0xfffea07c>
 402a420:	817fe736 	bltu	r16,r5,402a3c0 <__alt_data_end+0xfffea3c0>
 402a424:	280f883a 	mov	r7,r5
 402a428:	0009883a 	mov	r4,zero
 402a42c:	003fb106 	br	402a2f4 <__alt_data_end+0xfffea2f4>

0402a430 <__divsi3>:
 402a430:	20001b16 	blt	r4,zero,402a4a0 <__divsi3+0x70>
 402a434:	000f883a 	mov	r7,zero
 402a438:	28001616 	blt	r5,zero,402a494 <__divsi3+0x64>
 402a43c:	200d883a 	mov	r6,r4
 402a440:	29001a2e 	bgeu	r5,r4,402a4ac <__divsi3+0x7c>
 402a444:	00800804 	movi	r2,32
 402a448:	00c00044 	movi	r3,1
 402a44c:	00000106 	br	402a454 <__divsi3+0x24>
 402a450:	10000d26 	beq	r2,zero,402a488 <__divsi3+0x58>
 402a454:	294b883a 	add	r5,r5,r5
 402a458:	10bfffc4 	addi	r2,r2,-1
 402a45c:	18c7883a 	add	r3,r3,r3
 402a460:	293ffb36 	bltu	r5,r4,402a450 <__alt_data_end+0xfffea450>
 402a464:	0005883a 	mov	r2,zero
 402a468:	18000726 	beq	r3,zero,402a488 <__divsi3+0x58>
 402a46c:	0005883a 	mov	r2,zero
 402a470:	31400236 	bltu	r6,r5,402a47c <__divsi3+0x4c>
 402a474:	314dc83a 	sub	r6,r6,r5
 402a478:	10c4b03a 	or	r2,r2,r3
 402a47c:	1806d07a 	srli	r3,r3,1
 402a480:	280ad07a 	srli	r5,r5,1
 402a484:	183ffa1e 	bne	r3,zero,402a470 <__alt_data_end+0xfffea470>
 402a488:	38000126 	beq	r7,zero,402a490 <__divsi3+0x60>
 402a48c:	0085c83a 	sub	r2,zero,r2
 402a490:	f800283a 	ret
 402a494:	014bc83a 	sub	r5,zero,r5
 402a498:	39c0005c 	xori	r7,r7,1
 402a49c:	003fe706 	br	402a43c <__alt_data_end+0xfffea43c>
 402a4a0:	0109c83a 	sub	r4,zero,r4
 402a4a4:	01c00044 	movi	r7,1
 402a4a8:	003fe306 	br	402a438 <__alt_data_end+0xfffea438>
 402a4ac:	00c00044 	movi	r3,1
 402a4b0:	003fee06 	br	402a46c <__alt_data_end+0xfffea46c>

0402a4b4 <__modsi3>:
 402a4b4:	20001716 	blt	r4,zero,402a514 <__modsi3+0x60>
 402a4b8:	000f883a 	mov	r7,zero
 402a4bc:	2005883a 	mov	r2,r4
 402a4c0:	28001216 	blt	r5,zero,402a50c <__modsi3+0x58>
 402a4c4:	2900162e 	bgeu	r5,r4,402a520 <__modsi3+0x6c>
 402a4c8:	01800804 	movi	r6,32
 402a4cc:	00c00044 	movi	r3,1
 402a4d0:	00000106 	br	402a4d8 <__modsi3+0x24>
 402a4d4:	30000a26 	beq	r6,zero,402a500 <__modsi3+0x4c>
 402a4d8:	294b883a 	add	r5,r5,r5
 402a4dc:	31bfffc4 	addi	r6,r6,-1
 402a4e0:	18c7883a 	add	r3,r3,r3
 402a4e4:	293ffb36 	bltu	r5,r4,402a4d4 <__alt_data_end+0xfffea4d4>
 402a4e8:	18000526 	beq	r3,zero,402a500 <__modsi3+0x4c>
 402a4ec:	1806d07a 	srli	r3,r3,1
 402a4f0:	11400136 	bltu	r2,r5,402a4f8 <__modsi3+0x44>
 402a4f4:	1145c83a 	sub	r2,r2,r5
 402a4f8:	280ad07a 	srli	r5,r5,1
 402a4fc:	183ffb1e 	bne	r3,zero,402a4ec <__alt_data_end+0xfffea4ec>
 402a500:	38000126 	beq	r7,zero,402a508 <__modsi3+0x54>
 402a504:	0085c83a 	sub	r2,zero,r2
 402a508:	f800283a 	ret
 402a50c:	014bc83a 	sub	r5,zero,r5
 402a510:	003fec06 	br	402a4c4 <__alt_data_end+0xfffea4c4>
 402a514:	0109c83a 	sub	r4,zero,r4
 402a518:	01c00044 	movi	r7,1
 402a51c:	003fe706 	br	402a4bc <__alt_data_end+0xfffea4bc>
 402a520:	00c00044 	movi	r3,1
 402a524:	003ff106 	br	402a4ec <__alt_data_end+0xfffea4ec>

0402a528 <__udivsi3>:
 402a528:	200d883a 	mov	r6,r4
 402a52c:	2900152e 	bgeu	r5,r4,402a584 <__udivsi3+0x5c>
 402a530:	28001416 	blt	r5,zero,402a584 <__udivsi3+0x5c>
 402a534:	00800804 	movi	r2,32
 402a538:	00c00044 	movi	r3,1
 402a53c:	00000206 	br	402a548 <__udivsi3+0x20>
 402a540:	10000e26 	beq	r2,zero,402a57c <__udivsi3+0x54>
 402a544:	28000516 	blt	r5,zero,402a55c <__udivsi3+0x34>
 402a548:	294b883a 	add	r5,r5,r5
 402a54c:	10bfffc4 	addi	r2,r2,-1
 402a550:	18c7883a 	add	r3,r3,r3
 402a554:	293ffa36 	bltu	r5,r4,402a540 <__alt_data_end+0xfffea540>
 402a558:	18000826 	beq	r3,zero,402a57c <__udivsi3+0x54>
 402a55c:	0005883a 	mov	r2,zero
 402a560:	31400236 	bltu	r6,r5,402a56c <__udivsi3+0x44>
 402a564:	314dc83a 	sub	r6,r6,r5
 402a568:	10c4b03a 	or	r2,r2,r3
 402a56c:	1806d07a 	srli	r3,r3,1
 402a570:	280ad07a 	srli	r5,r5,1
 402a574:	183ffa1e 	bne	r3,zero,402a560 <__alt_data_end+0xfffea560>
 402a578:	f800283a 	ret
 402a57c:	0005883a 	mov	r2,zero
 402a580:	f800283a 	ret
 402a584:	00c00044 	movi	r3,1
 402a588:	003ff406 	br	402a55c <__alt_data_end+0xfffea55c>

0402a58c <__umodsi3>:
 402a58c:	2005883a 	mov	r2,r4
 402a590:	2900122e 	bgeu	r5,r4,402a5dc <__umodsi3+0x50>
 402a594:	28001116 	blt	r5,zero,402a5dc <__umodsi3+0x50>
 402a598:	01800804 	movi	r6,32
 402a59c:	00c00044 	movi	r3,1
 402a5a0:	00000206 	br	402a5ac <__umodsi3+0x20>
 402a5a4:	30000c26 	beq	r6,zero,402a5d8 <__umodsi3+0x4c>
 402a5a8:	28000516 	blt	r5,zero,402a5c0 <__umodsi3+0x34>
 402a5ac:	294b883a 	add	r5,r5,r5
 402a5b0:	31bfffc4 	addi	r6,r6,-1
 402a5b4:	18c7883a 	add	r3,r3,r3
 402a5b8:	293ffa36 	bltu	r5,r4,402a5a4 <__alt_data_end+0xfffea5a4>
 402a5bc:	18000626 	beq	r3,zero,402a5d8 <__umodsi3+0x4c>
 402a5c0:	1806d07a 	srli	r3,r3,1
 402a5c4:	11400136 	bltu	r2,r5,402a5cc <__umodsi3+0x40>
 402a5c8:	1145c83a 	sub	r2,r2,r5
 402a5cc:	280ad07a 	srli	r5,r5,1
 402a5d0:	183ffb1e 	bne	r3,zero,402a5c0 <__alt_data_end+0xfffea5c0>
 402a5d4:	f800283a 	ret
 402a5d8:	f800283a 	ret
 402a5dc:	00c00044 	movi	r3,1
 402a5e0:	003ff706 	br	402a5c0 <__alt_data_end+0xfffea5c0>

0402a5e4 <__adddf3>:
 402a5e4:	02c00434 	movhi	r11,16
 402a5e8:	5affffc4 	addi	r11,r11,-1
 402a5ec:	2806d7fa 	srli	r3,r5,31
 402a5f0:	2ad4703a 	and	r10,r5,r11
 402a5f4:	3ad2703a 	and	r9,r7,r11
 402a5f8:	3804d53a 	srli	r2,r7,20
 402a5fc:	3018d77a 	srli	r12,r6,29
 402a600:	280ad53a 	srli	r5,r5,20
 402a604:	501490fa 	slli	r10,r10,3
 402a608:	2010d77a 	srli	r8,r4,29
 402a60c:	481290fa 	slli	r9,r9,3
 402a610:	380ed7fa 	srli	r7,r7,31
 402a614:	defffb04 	addi	sp,sp,-20
 402a618:	dc800215 	stw	r18,8(sp)
 402a61c:	dc400115 	stw	r17,4(sp)
 402a620:	dc000015 	stw	r16,0(sp)
 402a624:	dfc00415 	stw	ra,16(sp)
 402a628:	dcc00315 	stw	r19,12(sp)
 402a62c:	1c803fcc 	andi	r18,r3,255
 402a630:	2c01ffcc 	andi	r16,r5,2047
 402a634:	5210b03a 	or	r8,r10,r8
 402a638:	202290fa 	slli	r17,r4,3
 402a63c:	1081ffcc 	andi	r2,r2,2047
 402a640:	4b12b03a 	or	r9,r9,r12
 402a644:	300c90fa 	slli	r6,r6,3
 402a648:	91c07526 	beq	r18,r7,402a820 <__adddf3+0x23c>
 402a64c:	8087c83a 	sub	r3,r16,r2
 402a650:	00c0ab0e 	bge	zero,r3,402a900 <__adddf3+0x31c>
 402a654:	10002a1e 	bne	r2,zero,402a700 <__adddf3+0x11c>
 402a658:	4984b03a 	or	r2,r9,r6
 402a65c:	1000961e 	bne	r2,zero,402a8b8 <__adddf3+0x2d4>
 402a660:	888001cc 	andi	r2,r17,7
 402a664:	10000726 	beq	r2,zero,402a684 <__adddf3+0xa0>
 402a668:	888003cc 	andi	r2,r17,15
 402a66c:	00c00104 	movi	r3,4
 402a670:	10c00426 	beq	r2,r3,402a684 <__adddf3+0xa0>
 402a674:	88c7883a 	add	r3,r17,r3
 402a678:	1c63803a 	cmpltu	r17,r3,r17
 402a67c:	4451883a 	add	r8,r8,r17
 402a680:	1823883a 	mov	r17,r3
 402a684:	4080202c 	andhi	r2,r8,128
 402a688:	10005926 	beq	r2,zero,402a7f0 <__adddf3+0x20c>
 402a68c:	84000044 	addi	r16,r16,1
 402a690:	0081ffc4 	movi	r2,2047
 402a694:	8080ba26 	beq	r16,r2,402a980 <__adddf3+0x39c>
 402a698:	00bfe034 	movhi	r2,65408
 402a69c:	10bfffc4 	addi	r2,r2,-1
 402a6a0:	4090703a 	and	r8,r8,r2
 402a6a4:	4004977a 	slli	r2,r8,29
 402a6a8:	4010927a 	slli	r8,r8,9
 402a6ac:	8822d0fa 	srli	r17,r17,3
 402a6b0:	8401ffcc 	andi	r16,r16,2047
 402a6b4:	4010d33a 	srli	r8,r8,12
 402a6b8:	9007883a 	mov	r3,r18
 402a6bc:	1444b03a 	or	r2,r2,r17
 402a6c0:	8401ffcc 	andi	r16,r16,2047
 402a6c4:	8020953a 	slli	r16,r16,20
 402a6c8:	18c03fcc 	andi	r3,r3,255
 402a6cc:	01000434 	movhi	r4,16
 402a6d0:	213fffc4 	addi	r4,r4,-1
 402a6d4:	180697fa 	slli	r3,r3,31
 402a6d8:	4110703a 	and	r8,r8,r4
 402a6dc:	4410b03a 	or	r8,r8,r16
 402a6e0:	40c6b03a 	or	r3,r8,r3
 402a6e4:	dfc00417 	ldw	ra,16(sp)
 402a6e8:	dcc00317 	ldw	r19,12(sp)
 402a6ec:	dc800217 	ldw	r18,8(sp)
 402a6f0:	dc400117 	ldw	r17,4(sp)
 402a6f4:	dc000017 	ldw	r16,0(sp)
 402a6f8:	dec00504 	addi	sp,sp,20
 402a6fc:	f800283a 	ret
 402a700:	0081ffc4 	movi	r2,2047
 402a704:	80bfd626 	beq	r16,r2,402a660 <__alt_data_end+0xfffea660>
 402a708:	4a402034 	orhi	r9,r9,128
 402a70c:	00800e04 	movi	r2,56
 402a710:	10c09f16 	blt	r2,r3,402a990 <__adddf3+0x3ac>
 402a714:	008007c4 	movi	r2,31
 402a718:	10c0c216 	blt	r2,r3,402aa24 <__adddf3+0x440>
 402a71c:	00800804 	movi	r2,32
 402a720:	10c5c83a 	sub	r2,r2,r3
 402a724:	488a983a 	sll	r5,r9,r2
 402a728:	30c8d83a 	srl	r4,r6,r3
 402a72c:	3084983a 	sll	r2,r6,r2
 402a730:	48c6d83a 	srl	r3,r9,r3
 402a734:	290cb03a 	or	r6,r5,r4
 402a738:	1004c03a 	cmpne	r2,r2,zero
 402a73c:	308cb03a 	or	r6,r6,r2
 402a740:	898dc83a 	sub	r6,r17,r6
 402a744:	89a3803a 	cmpltu	r17,r17,r6
 402a748:	40d1c83a 	sub	r8,r8,r3
 402a74c:	4451c83a 	sub	r8,r8,r17
 402a750:	3023883a 	mov	r17,r6
 402a754:	4080202c 	andhi	r2,r8,128
 402a758:	10002326 	beq	r2,zero,402a7e8 <__adddf3+0x204>
 402a75c:	04c02034 	movhi	r19,128
 402a760:	9cffffc4 	addi	r19,r19,-1
 402a764:	44e6703a 	and	r19,r8,r19
 402a768:	98007626 	beq	r19,zero,402a944 <__adddf3+0x360>
 402a76c:	9809883a 	mov	r4,r19
 402a770:	402cbe80 	call	402cbe8 <__clzsi2>
 402a774:	10fffe04 	addi	r3,r2,-8
 402a778:	010007c4 	movi	r4,31
 402a77c:	20c07716 	blt	r4,r3,402a95c <__adddf3+0x378>
 402a780:	00800804 	movi	r2,32
 402a784:	10c5c83a 	sub	r2,r2,r3
 402a788:	8884d83a 	srl	r2,r17,r2
 402a78c:	98d0983a 	sll	r8,r19,r3
 402a790:	88e2983a 	sll	r17,r17,r3
 402a794:	1204b03a 	or	r2,r2,r8
 402a798:	1c007416 	blt	r3,r16,402a96c <__adddf3+0x388>
 402a79c:	1c21c83a 	sub	r16,r3,r16
 402a7a0:	82000044 	addi	r8,r16,1
 402a7a4:	00c007c4 	movi	r3,31
 402a7a8:	1a009116 	blt	r3,r8,402a9f0 <__adddf3+0x40c>
 402a7ac:	00c00804 	movi	r3,32
 402a7b0:	1a07c83a 	sub	r3,r3,r8
 402a7b4:	8a08d83a 	srl	r4,r17,r8
 402a7b8:	88e2983a 	sll	r17,r17,r3
 402a7bc:	10c6983a 	sll	r3,r2,r3
 402a7c0:	1210d83a 	srl	r8,r2,r8
 402a7c4:	8804c03a 	cmpne	r2,r17,zero
 402a7c8:	1906b03a 	or	r3,r3,r4
 402a7cc:	18a2b03a 	or	r17,r3,r2
 402a7d0:	0021883a 	mov	r16,zero
 402a7d4:	003fa206 	br	402a660 <__alt_data_end+0xfffea660>
 402a7d8:	1890b03a 	or	r8,r3,r2
 402a7dc:	40017d26 	beq	r8,zero,402add4 <__adddf3+0x7f0>
 402a7e0:	1011883a 	mov	r8,r2
 402a7e4:	1823883a 	mov	r17,r3
 402a7e8:	888001cc 	andi	r2,r17,7
 402a7ec:	103f9e1e 	bne	r2,zero,402a668 <__alt_data_end+0xfffea668>
 402a7f0:	4004977a 	slli	r2,r8,29
 402a7f4:	8822d0fa 	srli	r17,r17,3
 402a7f8:	4010d0fa 	srli	r8,r8,3
 402a7fc:	9007883a 	mov	r3,r18
 402a800:	1444b03a 	or	r2,r2,r17
 402a804:	0101ffc4 	movi	r4,2047
 402a808:	81002426 	beq	r16,r4,402a89c <__adddf3+0x2b8>
 402a80c:	8120703a 	and	r16,r16,r4
 402a810:	01000434 	movhi	r4,16
 402a814:	213fffc4 	addi	r4,r4,-1
 402a818:	4110703a 	and	r8,r8,r4
 402a81c:	003fa806 	br	402a6c0 <__alt_data_end+0xfffea6c0>
 402a820:	8089c83a 	sub	r4,r16,r2
 402a824:	01005e0e 	bge	zero,r4,402a9a0 <__adddf3+0x3bc>
 402a828:	10002b26 	beq	r2,zero,402a8d8 <__adddf3+0x2f4>
 402a82c:	0081ffc4 	movi	r2,2047
 402a830:	80bf8b26 	beq	r16,r2,402a660 <__alt_data_end+0xfffea660>
 402a834:	4a402034 	orhi	r9,r9,128
 402a838:	00800e04 	movi	r2,56
 402a83c:	1100a40e 	bge	r2,r4,402aad0 <__adddf3+0x4ec>
 402a840:	498cb03a 	or	r6,r9,r6
 402a844:	300ac03a 	cmpne	r5,r6,zero
 402a848:	0013883a 	mov	r9,zero
 402a84c:	2c4b883a 	add	r5,r5,r17
 402a850:	2c63803a 	cmpltu	r17,r5,r17
 402a854:	4a11883a 	add	r8,r9,r8
 402a858:	8a11883a 	add	r8,r17,r8
 402a85c:	2823883a 	mov	r17,r5
 402a860:	4080202c 	andhi	r2,r8,128
 402a864:	103fe026 	beq	r2,zero,402a7e8 <__alt_data_end+0xfffea7e8>
 402a868:	84000044 	addi	r16,r16,1
 402a86c:	0081ffc4 	movi	r2,2047
 402a870:	8080d226 	beq	r16,r2,402abbc <__adddf3+0x5d8>
 402a874:	00bfe034 	movhi	r2,65408
 402a878:	10bfffc4 	addi	r2,r2,-1
 402a87c:	4090703a 	and	r8,r8,r2
 402a880:	880ad07a 	srli	r5,r17,1
 402a884:	400897fa 	slli	r4,r8,31
 402a888:	88c0004c 	andi	r3,r17,1
 402a88c:	28e2b03a 	or	r17,r5,r3
 402a890:	4010d07a 	srli	r8,r8,1
 402a894:	2462b03a 	or	r17,r4,r17
 402a898:	003f7106 	br	402a660 <__alt_data_end+0xfffea660>
 402a89c:	4088b03a 	or	r4,r8,r2
 402a8a0:	20014526 	beq	r4,zero,402adb8 <__adddf3+0x7d4>
 402a8a4:	01000434 	movhi	r4,16
 402a8a8:	42000234 	orhi	r8,r8,8
 402a8ac:	213fffc4 	addi	r4,r4,-1
 402a8b0:	4110703a 	and	r8,r8,r4
 402a8b4:	003f8206 	br	402a6c0 <__alt_data_end+0xfffea6c0>
 402a8b8:	18ffffc4 	addi	r3,r3,-1
 402a8bc:	1800491e 	bne	r3,zero,402a9e4 <__adddf3+0x400>
 402a8c0:	898bc83a 	sub	r5,r17,r6
 402a8c4:	8963803a 	cmpltu	r17,r17,r5
 402a8c8:	4251c83a 	sub	r8,r8,r9
 402a8cc:	4451c83a 	sub	r8,r8,r17
 402a8d0:	2823883a 	mov	r17,r5
 402a8d4:	003f9f06 	br	402a754 <__alt_data_end+0xfffea754>
 402a8d8:	4984b03a 	or	r2,r9,r6
 402a8dc:	103f6026 	beq	r2,zero,402a660 <__alt_data_end+0xfffea660>
 402a8e0:	213fffc4 	addi	r4,r4,-1
 402a8e4:	2000931e 	bne	r4,zero,402ab34 <__adddf3+0x550>
 402a8e8:	898d883a 	add	r6,r17,r6
 402a8ec:	3463803a 	cmpltu	r17,r6,r17
 402a8f0:	4251883a 	add	r8,r8,r9
 402a8f4:	8a11883a 	add	r8,r17,r8
 402a8f8:	3023883a 	mov	r17,r6
 402a8fc:	003fd806 	br	402a860 <__alt_data_end+0xfffea860>
 402a900:	1800541e 	bne	r3,zero,402aa54 <__adddf3+0x470>
 402a904:	80800044 	addi	r2,r16,1
 402a908:	1081ffcc 	andi	r2,r2,2047
 402a90c:	00c00044 	movi	r3,1
 402a910:	1880a00e 	bge	r3,r2,402ab94 <__adddf3+0x5b0>
 402a914:	8989c83a 	sub	r4,r17,r6
 402a918:	8905803a 	cmpltu	r2,r17,r4
 402a91c:	4267c83a 	sub	r19,r8,r9
 402a920:	98a7c83a 	sub	r19,r19,r2
 402a924:	9880202c 	andhi	r2,r19,128
 402a928:	10006326 	beq	r2,zero,402aab8 <__adddf3+0x4d4>
 402a92c:	3463c83a 	sub	r17,r6,r17
 402a930:	4a07c83a 	sub	r3,r9,r8
 402a934:	344d803a 	cmpltu	r6,r6,r17
 402a938:	19a7c83a 	sub	r19,r3,r6
 402a93c:	3825883a 	mov	r18,r7
 402a940:	983f8a1e 	bne	r19,zero,402a76c <__alt_data_end+0xfffea76c>
 402a944:	8809883a 	mov	r4,r17
 402a948:	402cbe80 	call	402cbe8 <__clzsi2>
 402a94c:	10800804 	addi	r2,r2,32
 402a950:	10fffe04 	addi	r3,r2,-8
 402a954:	010007c4 	movi	r4,31
 402a958:	20ff890e 	bge	r4,r3,402a780 <__alt_data_end+0xfffea780>
 402a95c:	10bff604 	addi	r2,r2,-40
 402a960:	8884983a 	sll	r2,r17,r2
 402a964:	0023883a 	mov	r17,zero
 402a968:	1c3f8c0e 	bge	r3,r16,402a79c <__alt_data_end+0xfffea79c>
 402a96c:	023fe034 	movhi	r8,65408
 402a970:	423fffc4 	addi	r8,r8,-1
 402a974:	80e1c83a 	sub	r16,r16,r3
 402a978:	1210703a 	and	r8,r2,r8
 402a97c:	003f3806 	br	402a660 <__alt_data_end+0xfffea660>
 402a980:	9007883a 	mov	r3,r18
 402a984:	0011883a 	mov	r8,zero
 402a988:	0005883a 	mov	r2,zero
 402a98c:	003f4c06 	br	402a6c0 <__alt_data_end+0xfffea6c0>
 402a990:	498cb03a 	or	r6,r9,r6
 402a994:	300cc03a 	cmpne	r6,r6,zero
 402a998:	0007883a 	mov	r3,zero
 402a99c:	003f6806 	br	402a740 <__alt_data_end+0xfffea740>
 402a9a0:	20009c1e 	bne	r4,zero,402ac14 <__adddf3+0x630>
 402a9a4:	80800044 	addi	r2,r16,1
 402a9a8:	1141ffcc 	andi	r5,r2,2047
 402a9ac:	01000044 	movi	r4,1
 402a9b0:	2140670e 	bge	r4,r5,402ab50 <__adddf3+0x56c>
 402a9b4:	0101ffc4 	movi	r4,2047
 402a9b8:	11007f26 	beq	r2,r4,402abb8 <__adddf3+0x5d4>
 402a9bc:	898d883a 	add	r6,r17,r6
 402a9c0:	4247883a 	add	r3,r8,r9
 402a9c4:	3451803a 	cmpltu	r8,r6,r17
 402a9c8:	40d1883a 	add	r8,r8,r3
 402a9cc:	402297fa 	slli	r17,r8,31
 402a9d0:	300cd07a 	srli	r6,r6,1
 402a9d4:	4010d07a 	srli	r8,r8,1
 402a9d8:	1021883a 	mov	r16,r2
 402a9dc:	89a2b03a 	or	r17,r17,r6
 402a9e0:	003f1f06 	br	402a660 <__alt_data_end+0xfffea660>
 402a9e4:	0081ffc4 	movi	r2,2047
 402a9e8:	80bf481e 	bne	r16,r2,402a70c <__alt_data_end+0xfffea70c>
 402a9ec:	003f1c06 	br	402a660 <__alt_data_end+0xfffea660>
 402a9f0:	843ff844 	addi	r16,r16,-31
 402a9f4:	01000804 	movi	r4,32
 402a9f8:	1406d83a 	srl	r3,r2,r16
 402a9fc:	41005026 	beq	r8,r4,402ab40 <__adddf3+0x55c>
 402aa00:	01001004 	movi	r4,64
 402aa04:	2211c83a 	sub	r8,r4,r8
 402aa08:	1204983a 	sll	r2,r2,r8
 402aa0c:	88a2b03a 	or	r17,r17,r2
 402aa10:	8822c03a 	cmpne	r17,r17,zero
 402aa14:	1c62b03a 	or	r17,r3,r17
 402aa18:	0011883a 	mov	r8,zero
 402aa1c:	0021883a 	mov	r16,zero
 402aa20:	003f7106 	br	402a7e8 <__alt_data_end+0xfffea7e8>
 402aa24:	193ff804 	addi	r4,r3,-32
 402aa28:	00800804 	movi	r2,32
 402aa2c:	4908d83a 	srl	r4,r9,r4
 402aa30:	18804526 	beq	r3,r2,402ab48 <__adddf3+0x564>
 402aa34:	00801004 	movi	r2,64
 402aa38:	10c5c83a 	sub	r2,r2,r3
 402aa3c:	4886983a 	sll	r3,r9,r2
 402aa40:	198cb03a 	or	r6,r3,r6
 402aa44:	300cc03a 	cmpne	r6,r6,zero
 402aa48:	218cb03a 	or	r6,r4,r6
 402aa4c:	0007883a 	mov	r3,zero
 402aa50:	003f3b06 	br	402a740 <__alt_data_end+0xfffea740>
 402aa54:	80002a26 	beq	r16,zero,402ab00 <__adddf3+0x51c>
 402aa58:	0101ffc4 	movi	r4,2047
 402aa5c:	11006826 	beq	r2,r4,402ac00 <__adddf3+0x61c>
 402aa60:	00c7c83a 	sub	r3,zero,r3
 402aa64:	42002034 	orhi	r8,r8,128
 402aa68:	01000e04 	movi	r4,56
 402aa6c:	20c07c16 	blt	r4,r3,402ac60 <__adddf3+0x67c>
 402aa70:	010007c4 	movi	r4,31
 402aa74:	20c0da16 	blt	r4,r3,402ade0 <__adddf3+0x7fc>
 402aa78:	01000804 	movi	r4,32
 402aa7c:	20c9c83a 	sub	r4,r4,r3
 402aa80:	4114983a 	sll	r10,r8,r4
 402aa84:	88cad83a 	srl	r5,r17,r3
 402aa88:	8908983a 	sll	r4,r17,r4
 402aa8c:	40c6d83a 	srl	r3,r8,r3
 402aa90:	5162b03a 	or	r17,r10,r5
 402aa94:	2008c03a 	cmpne	r4,r4,zero
 402aa98:	8922b03a 	or	r17,r17,r4
 402aa9c:	3463c83a 	sub	r17,r6,r17
 402aaa0:	48c7c83a 	sub	r3,r9,r3
 402aaa4:	344d803a 	cmpltu	r6,r6,r17
 402aaa8:	1991c83a 	sub	r8,r3,r6
 402aaac:	1021883a 	mov	r16,r2
 402aab0:	3825883a 	mov	r18,r7
 402aab4:	003f2706 	br	402a754 <__alt_data_end+0xfffea754>
 402aab8:	24d0b03a 	or	r8,r4,r19
 402aabc:	40001b1e 	bne	r8,zero,402ab2c <__adddf3+0x548>
 402aac0:	0005883a 	mov	r2,zero
 402aac4:	0007883a 	mov	r3,zero
 402aac8:	0021883a 	mov	r16,zero
 402aacc:	003f4d06 	br	402a804 <__alt_data_end+0xfffea804>
 402aad0:	008007c4 	movi	r2,31
 402aad4:	11003c16 	blt	r2,r4,402abc8 <__adddf3+0x5e4>
 402aad8:	00800804 	movi	r2,32
 402aadc:	1105c83a 	sub	r2,r2,r4
 402aae0:	488e983a 	sll	r7,r9,r2
 402aae4:	310ad83a 	srl	r5,r6,r4
 402aae8:	3084983a 	sll	r2,r6,r2
 402aaec:	4912d83a 	srl	r9,r9,r4
 402aaf0:	394ab03a 	or	r5,r7,r5
 402aaf4:	1004c03a 	cmpne	r2,r2,zero
 402aaf8:	288ab03a 	or	r5,r5,r2
 402aafc:	003f5306 	br	402a84c <__alt_data_end+0xfffea84c>
 402ab00:	4448b03a 	or	r4,r8,r17
 402ab04:	20003e26 	beq	r4,zero,402ac00 <__adddf3+0x61c>
 402ab08:	00c6303a 	nor	r3,zero,r3
 402ab0c:	18003a1e 	bne	r3,zero,402abf8 <__adddf3+0x614>
 402ab10:	3463c83a 	sub	r17,r6,r17
 402ab14:	4a07c83a 	sub	r3,r9,r8
 402ab18:	344d803a 	cmpltu	r6,r6,r17
 402ab1c:	1991c83a 	sub	r8,r3,r6
 402ab20:	1021883a 	mov	r16,r2
 402ab24:	3825883a 	mov	r18,r7
 402ab28:	003f0a06 	br	402a754 <__alt_data_end+0xfffea754>
 402ab2c:	2023883a 	mov	r17,r4
 402ab30:	003f0d06 	br	402a768 <__alt_data_end+0xfffea768>
 402ab34:	0081ffc4 	movi	r2,2047
 402ab38:	80bf3f1e 	bne	r16,r2,402a838 <__alt_data_end+0xfffea838>
 402ab3c:	003ec806 	br	402a660 <__alt_data_end+0xfffea660>
 402ab40:	0005883a 	mov	r2,zero
 402ab44:	003fb106 	br	402aa0c <__alt_data_end+0xfffeaa0c>
 402ab48:	0007883a 	mov	r3,zero
 402ab4c:	003fbc06 	br	402aa40 <__alt_data_end+0xfffeaa40>
 402ab50:	4444b03a 	or	r2,r8,r17
 402ab54:	8000871e 	bne	r16,zero,402ad74 <__adddf3+0x790>
 402ab58:	1000ba26 	beq	r2,zero,402ae44 <__adddf3+0x860>
 402ab5c:	4984b03a 	or	r2,r9,r6
 402ab60:	103ebf26 	beq	r2,zero,402a660 <__alt_data_end+0xfffea660>
 402ab64:	8985883a 	add	r2,r17,r6
 402ab68:	4247883a 	add	r3,r8,r9
 402ab6c:	1451803a 	cmpltu	r8,r2,r17
 402ab70:	40d1883a 	add	r8,r8,r3
 402ab74:	40c0202c 	andhi	r3,r8,128
 402ab78:	1023883a 	mov	r17,r2
 402ab7c:	183f1a26 	beq	r3,zero,402a7e8 <__alt_data_end+0xfffea7e8>
 402ab80:	00bfe034 	movhi	r2,65408
 402ab84:	10bfffc4 	addi	r2,r2,-1
 402ab88:	2021883a 	mov	r16,r4
 402ab8c:	4090703a 	and	r8,r8,r2
 402ab90:	003eb306 	br	402a660 <__alt_data_end+0xfffea660>
 402ab94:	4444b03a 	or	r2,r8,r17
 402ab98:	8000291e 	bne	r16,zero,402ac40 <__adddf3+0x65c>
 402ab9c:	10004b1e 	bne	r2,zero,402accc <__adddf3+0x6e8>
 402aba0:	4990b03a 	or	r8,r9,r6
 402aba4:	40008b26 	beq	r8,zero,402add4 <__adddf3+0x7f0>
 402aba8:	4811883a 	mov	r8,r9
 402abac:	3023883a 	mov	r17,r6
 402abb0:	3825883a 	mov	r18,r7
 402abb4:	003eaa06 	br	402a660 <__alt_data_end+0xfffea660>
 402abb8:	1021883a 	mov	r16,r2
 402abbc:	0011883a 	mov	r8,zero
 402abc0:	0005883a 	mov	r2,zero
 402abc4:	003f0f06 	br	402a804 <__alt_data_end+0xfffea804>
 402abc8:	217ff804 	addi	r5,r4,-32
 402abcc:	00800804 	movi	r2,32
 402abd0:	494ad83a 	srl	r5,r9,r5
 402abd4:	20807d26 	beq	r4,r2,402adcc <__adddf3+0x7e8>
 402abd8:	00801004 	movi	r2,64
 402abdc:	1109c83a 	sub	r4,r2,r4
 402abe0:	4912983a 	sll	r9,r9,r4
 402abe4:	498cb03a 	or	r6,r9,r6
 402abe8:	300cc03a 	cmpne	r6,r6,zero
 402abec:	298ab03a 	or	r5,r5,r6
 402abf0:	0013883a 	mov	r9,zero
 402abf4:	003f1506 	br	402a84c <__alt_data_end+0xfffea84c>
 402abf8:	0101ffc4 	movi	r4,2047
 402abfc:	113f9a1e 	bne	r2,r4,402aa68 <__alt_data_end+0xfffeaa68>
 402ac00:	4811883a 	mov	r8,r9
 402ac04:	3023883a 	mov	r17,r6
 402ac08:	1021883a 	mov	r16,r2
 402ac0c:	3825883a 	mov	r18,r7
 402ac10:	003e9306 	br	402a660 <__alt_data_end+0xfffea660>
 402ac14:	8000161e 	bne	r16,zero,402ac70 <__adddf3+0x68c>
 402ac18:	444ab03a 	or	r5,r8,r17
 402ac1c:	28005126 	beq	r5,zero,402ad64 <__adddf3+0x780>
 402ac20:	0108303a 	nor	r4,zero,r4
 402ac24:	20004d1e 	bne	r4,zero,402ad5c <__adddf3+0x778>
 402ac28:	89a3883a 	add	r17,r17,r6
 402ac2c:	4253883a 	add	r9,r8,r9
 402ac30:	898d803a 	cmpltu	r6,r17,r6
 402ac34:	3251883a 	add	r8,r6,r9
 402ac38:	1021883a 	mov	r16,r2
 402ac3c:	003f0806 	br	402a860 <__alt_data_end+0xfffea860>
 402ac40:	1000301e 	bne	r2,zero,402ad04 <__adddf3+0x720>
 402ac44:	4984b03a 	or	r2,r9,r6
 402ac48:	10007126 	beq	r2,zero,402ae10 <__adddf3+0x82c>
 402ac4c:	4811883a 	mov	r8,r9
 402ac50:	3023883a 	mov	r17,r6
 402ac54:	3825883a 	mov	r18,r7
 402ac58:	0401ffc4 	movi	r16,2047
 402ac5c:	003e8006 	br	402a660 <__alt_data_end+0xfffea660>
 402ac60:	4462b03a 	or	r17,r8,r17
 402ac64:	8822c03a 	cmpne	r17,r17,zero
 402ac68:	0007883a 	mov	r3,zero
 402ac6c:	003f8b06 	br	402aa9c <__alt_data_end+0xfffeaa9c>
 402ac70:	0141ffc4 	movi	r5,2047
 402ac74:	11403b26 	beq	r2,r5,402ad64 <__adddf3+0x780>
 402ac78:	0109c83a 	sub	r4,zero,r4
 402ac7c:	42002034 	orhi	r8,r8,128
 402ac80:	01400e04 	movi	r5,56
 402ac84:	29006716 	blt	r5,r4,402ae24 <__adddf3+0x840>
 402ac88:	014007c4 	movi	r5,31
 402ac8c:	29007016 	blt	r5,r4,402ae50 <__adddf3+0x86c>
 402ac90:	01400804 	movi	r5,32
 402ac94:	290bc83a 	sub	r5,r5,r4
 402ac98:	4154983a 	sll	r10,r8,r5
 402ac9c:	890ed83a 	srl	r7,r17,r4
 402aca0:	894a983a 	sll	r5,r17,r5
 402aca4:	4108d83a 	srl	r4,r8,r4
 402aca8:	51e2b03a 	or	r17,r10,r7
 402acac:	280ac03a 	cmpne	r5,r5,zero
 402acb0:	8962b03a 	or	r17,r17,r5
 402acb4:	89a3883a 	add	r17,r17,r6
 402acb8:	2253883a 	add	r9,r4,r9
 402acbc:	898d803a 	cmpltu	r6,r17,r6
 402acc0:	3251883a 	add	r8,r6,r9
 402acc4:	1021883a 	mov	r16,r2
 402acc8:	003ee506 	br	402a860 <__alt_data_end+0xfffea860>
 402accc:	4984b03a 	or	r2,r9,r6
 402acd0:	103e6326 	beq	r2,zero,402a660 <__alt_data_end+0xfffea660>
 402acd4:	8987c83a 	sub	r3,r17,r6
 402acd8:	88c9803a 	cmpltu	r4,r17,r3
 402acdc:	4245c83a 	sub	r2,r8,r9
 402ace0:	1105c83a 	sub	r2,r2,r4
 402ace4:	1100202c 	andhi	r4,r2,128
 402ace8:	203ebb26 	beq	r4,zero,402a7d8 <__alt_data_end+0xfffea7d8>
 402acec:	3463c83a 	sub	r17,r6,r17
 402acf0:	4a07c83a 	sub	r3,r9,r8
 402acf4:	344d803a 	cmpltu	r6,r6,r17
 402acf8:	1991c83a 	sub	r8,r3,r6
 402acfc:	3825883a 	mov	r18,r7
 402ad00:	003e5706 	br	402a660 <__alt_data_end+0xfffea660>
 402ad04:	4984b03a 	or	r2,r9,r6
 402ad08:	10002e26 	beq	r2,zero,402adc4 <__adddf3+0x7e0>
 402ad0c:	4004d0fa 	srli	r2,r8,3
 402ad10:	8822d0fa 	srli	r17,r17,3
 402ad14:	4010977a 	slli	r8,r8,29
 402ad18:	10c0022c 	andhi	r3,r2,8
 402ad1c:	4462b03a 	or	r17,r8,r17
 402ad20:	18000826 	beq	r3,zero,402ad44 <__adddf3+0x760>
 402ad24:	4808d0fa 	srli	r4,r9,3
 402ad28:	20c0022c 	andhi	r3,r4,8
 402ad2c:	1800051e 	bne	r3,zero,402ad44 <__adddf3+0x760>
 402ad30:	300cd0fa 	srli	r6,r6,3
 402ad34:	4806977a 	slli	r3,r9,29
 402ad38:	2005883a 	mov	r2,r4
 402ad3c:	3825883a 	mov	r18,r7
 402ad40:	19a2b03a 	or	r17,r3,r6
 402ad44:	8810d77a 	srli	r8,r17,29
 402ad48:	100490fa 	slli	r2,r2,3
 402ad4c:	882290fa 	slli	r17,r17,3
 402ad50:	0401ffc4 	movi	r16,2047
 402ad54:	4090b03a 	or	r8,r8,r2
 402ad58:	003e4106 	br	402a660 <__alt_data_end+0xfffea660>
 402ad5c:	0141ffc4 	movi	r5,2047
 402ad60:	117fc71e 	bne	r2,r5,402ac80 <__alt_data_end+0xfffeac80>
 402ad64:	4811883a 	mov	r8,r9
 402ad68:	3023883a 	mov	r17,r6
 402ad6c:	1021883a 	mov	r16,r2
 402ad70:	003e3b06 	br	402a660 <__alt_data_end+0xfffea660>
 402ad74:	10002f26 	beq	r2,zero,402ae34 <__adddf3+0x850>
 402ad78:	4984b03a 	or	r2,r9,r6
 402ad7c:	10001126 	beq	r2,zero,402adc4 <__adddf3+0x7e0>
 402ad80:	4004d0fa 	srli	r2,r8,3
 402ad84:	8822d0fa 	srli	r17,r17,3
 402ad88:	4010977a 	slli	r8,r8,29
 402ad8c:	10c0022c 	andhi	r3,r2,8
 402ad90:	4462b03a 	or	r17,r8,r17
 402ad94:	183feb26 	beq	r3,zero,402ad44 <__alt_data_end+0xfffead44>
 402ad98:	4808d0fa 	srli	r4,r9,3
 402ad9c:	20c0022c 	andhi	r3,r4,8
 402ada0:	183fe81e 	bne	r3,zero,402ad44 <__alt_data_end+0xfffead44>
 402ada4:	300cd0fa 	srli	r6,r6,3
 402ada8:	4806977a 	slli	r3,r9,29
 402adac:	2005883a 	mov	r2,r4
 402adb0:	19a2b03a 	or	r17,r3,r6
 402adb4:	003fe306 	br	402ad44 <__alt_data_end+0xfffead44>
 402adb8:	0011883a 	mov	r8,zero
 402adbc:	0005883a 	mov	r2,zero
 402adc0:	003e3f06 	br	402a6c0 <__alt_data_end+0xfffea6c0>
 402adc4:	0401ffc4 	movi	r16,2047
 402adc8:	003e2506 	br	402a660 <__alt_data_end+0xfffea660>
 402adcc:	0013883a 	mov	r9,zero
 402add0:	003f8406 	br	402abe4 <__alt_data_end+0xfffeabe4>
 402add4:	0005883a 	mov	r2,zero
 402add8:	0007883a 	mov	r3,zero
 402addc:	003e8906 	br	402a804 <__alt_data_end+0xfffea804>
 402ade0:	197ff804 	addi	r5,r3,-32
 402ade4:	01000804 	movi	r4,32
 402ade8:	414ad83a 	srl	r5,r8,r5
 402adec:	19002426 	beq	r3,r4,402ae80 <__adddf3+0x89c>
 402adf0:	01001004 	movi	r4,64
 402adf4:	20c7c83a 	sub	r3,r4,r3
 402adf8:	40c6983a 	sll	r3,r8,r3
 402adfc:	1c46b03a 	or	r3,r3,r17
 402ae00:	1806c03a 	cmpne	r3,r3,zero
 402ae04:	28e2b03a 	or	r17,r5,r3
 402ae08:	0007883a 	mov	r3,zero
 402ae0c:	003f2306 	br	402aa9c <__alt_data_end+0xfffeaa9c>
 402ae10:	0007883a 	mov	r3,zero
 402ae14:	5811883a 	mov	r8,r11
 402ae18:	00bfffc4 	movi	r2,-1
 402ae1c:	0401ffc4 	movi	r16,2047
 402ae20:	003e7806 	br	402a804 <__alt_data_end+0xfffea804>
 402ae24:	4462b03a 	or	r17,r8,r17
 402ae28:	8822c03a 	cmpne	r17,r17,zero
 402ae2c:	0009883a 	mov	r4,zero
 402ae30:	003fa006 	br	402acb4 <__alt_data_end+0xfffeacb4>
 402ae34:	4811883a 	mov	r8,r9
 402ae38:	3023883a 	mov	r17,r6
 402ae3c:	0401ffc4 	movi	r16,2047
 402ae40:	003e0706 	br	402a660 <__alt_data_end+0xfffea660>
 402ae44:	4811883a 	mov	r8,r9
 402ae48:	3023883a 	mov	r17,r6
 402ae4c:	003e0406 	br	402a660 <__alt_data_end+0xfffea660>
 402ae50:	21fff804 	addi	r7,r4,-32
 402ae54:	01400804 	movi	r5,32
 402ae58:	41ced83a 	srl	r7,r8,r7
 402ae5c:	21400a26 	beq	r4,r5,402ae88 <__adddf3+0x8a4>
 402ae60:	01401004 	movi	r5,64
 402ae64:	2909c83a 	sub	r4,r5,r4
 402ae68:	4108983a 	sll	r4,r8,r4
 402ae6c:	2448b03a 	or	r4,r4,r17
 402ae70:	2008c03a 	cmpne	r4,r4,zero
 402ae74:	3922b03a 	or	r17,r7,r4
 402ae78:	0009883a 	mov	r4,zero
 402ae7c:	003f8d06 	br	402acb4 <__alt_data_end+0xfffeacb4>
 402ae80:	0007883a 	mov	r3,zero
 402ae84:	003fdd06 	br	402adfc <__alt_data_end+0xfffeadfc>
 402ae88:	0009883a 	mov	r4,zero
 402ae8c:	003ff706 	br	402ae6c <__alt_data_end+0xfffeae6c>

0402ae90 <__divdf3>:
 402ae90:	defff204 	addi	sp,sp,-56
 402ae94:	dd400915 	stw	r21,36(sp)
 402ae98:	282ad53a 	srli	r21,r5,20
 402ae9c:	dd000815 	stw	r20,32(sp)
 402aea0:	2828d7fa 	srli	r20,r5,31
 402aea4:	dc000415 	stw	r16,16(sp)
 402aea8:	04000434 	movhi	r16,16
 402aeac:	df000c15 	stw	fp,48(sp)
 402aeb0:	843fffc4 	addi	r16,r16,-1
 402aeb4:	dfc00d15 	stw	ra,52(sp)
 402aeb8:	ddc00b15 	stw	r23,44(sp)
 402aebc:	dd800a15 	stw	r22,40(sp)
 402aec0:	dcc00715 	stw	r19,28(sp)
 402aec4:	dc800615 	stw	r18,24(sp)
 402aec8:	dc400515 	stw	r17,20(sp)
 402aecc:	ad41ffcc 	andi	r21,r21,2047
 402aed0:	2c20703a 	and	r16,r5,r16
 402aed4:	a7003fcc 	andi	fp,r20,255
 402aed8:	a8006126 	beq	r21,zero,402b060 <__divdf3+0x1d0>
 402aedc:	0081ffc4 	movi	r2,2047
 402aee0:	2025883a 	mov	r18,r4
 402aee4:	a8803726 	beq	r21,r2,402afc4 <__divdf3+0x134>
 402aee8:	80800434 	orhi	r2,r16,16
 402aeec:	100490fa 	slli	r2,r2,3
 402aef0:	2020d77a 	srli	r16,r4,29
 402aef4:	202490fa 	slli	r18,r4,3
 402aef8:	ad7f0044 	addi	r21,r21,-1023
 402aefc:	80a0b03a 	or	r16,r16,r2
 402af00:	0027883a 	mov	r19,zero
 402af04:	0013883a 	mov	r9,zero
 402af08:	3804d53a 	srli	r2,r7,20
 402af0c:	382cd7fa 	srli	r22,r7,31
 402af10:	04400434 	movhi	r17,16
 402af14:	8c7fffc4 	addi	r17,r17,-1
 402af18:	1081ffcc 	andi	r2,r2,2047
 402af1c:	3011883a 	mov	r8,r6
 402af20:	3c62703a 	and	r17,r7,r17
 402af24:	b5c03fcc 	andi	r23,r22,255
 402af28:	10006c26 	beq	r2,zero,402b0dc <__divdf3+0x24c>
 402af2c:	00c1ffc4 	movi	r3,2047
 402af30:	10c06426 	beq	r2,r3,402b0c4 <__divdf3+0x234>
 402af34:	88c00434 	orhi	r3,r17,16
 402af38:	180690fa 	slli	r3,r3,3
 402af3c:	3022d77a 	srli	r17,r6,29
 402af40:	301090fa 	slli	r8,r6,3
 402af44:	10bf0044 	addi	r2,r2,-1023
 402af48:	88e2b03a 	or	r17,r17,r3
 402af4c:	000f883a 	mov	r7,zero
 402af50:	a58cf03a 	xor	r6,r20,r22
 402af54:	3cc8b03a 	or	r4,r7,r19
 402af58:	a8abc83a 	sub	r21,r21,r2
 402af5c:	008003c4 	movi	r2,15
 402af60:	3007883a 	mov	r3,r6
 402af64:	34c03fcc 	andi	r19,r6,255
 402af68:	11009036 	bltu	r2,r4,402b1ac <__divdf3+0x31c>
 402af6c:	200890ba 	slli	r4,r4,2
 402af70:	008100f4 	movhi	r2,1027
 402af74:	10abe104 	addi	r2,r2,-20604
 402af78:	2089883a 	add	r4,r4,r2
 402af7c:	20800017 	ldw	r2,0(r4)
 402af80:	1000683a 	jmp	r2
 402af84:	0402b1ac 	andhi	r16,zero,2758
 402af88:	0402affc 	xorhi	r16,zero,2751
 402af8c:	0402b19c 	xori	r16,zero,2758
 402af90:	0402aff0 	cmpltui	r16,zero,2751
 402af94:	0402b19c 	xori	r16,zero,2758
 402af98:	0402b170 	cmpltui	r16,zero,2757
 402af9c:	0402b19c 	xori	r16,zero,2758
 402afa0:	0402aff0 	cmpltui	r16,zero,2751
 402afa4:	0402affc 	xorhi	r16,zero,2751
 402afa8:	0402affc 	xorhi	r16,zero,2751
 402afac:	0402b170 	cmpltui	r16,zero,2757
 402afb0:	0402aff0 	cmpltui	r16,zero,2751
 402afb4:	0402afe0 	cmpeqi	r16,zero,2751
 402afb8:	0402afe0 	cmpeqi	r16,zero,2751
 402afbc:	0402afe0 	cmpeqi	r16,zero,2751
 402afc0:	0402b490 	cmplti	r16,zero,2770
 402afc4:	2404b03a 	or	r2,r4,r16
 402afc8:	1000661e 	bne	r2,zero,402b164 <__divdf3+0x2d4>
 402afcc:	04c00204 	movi	r19,8
 402afd0:	0021883a 	mov	r16,zero
 402afd4:	0025883a 	mov	r18,zero
 402afd8:	02400084 	movi	r9,2
 402afdc:	003fca06 	br	402af08 <__alt_data_end+0xfffeaf08>
 402afe0:	8023883a 	mov	r17,r16
 402afe4:	9011883a 	mov	r8,r18
 402afe8:	e02f883a 	mov	r23,fp
 402afec:	480f883a 	mov	r7,r9
 402aff0:	00800084 	movi	r2,2
 402aff4:	3881311e 	bne	r7,r2,402b4bc <__divdf3+0x62c>
 402aff8:	b827883a 	mov	r19,r23
 402affc:	98c0004c 	andi	r3,r19,1
 402b000:	0081ffc4 	movi	r2,2047
 402b004:	000b883a 	mov	r5,zero
 402b008:	0025883a 	mov	r18,zero
 402b00c:	1004953a 	slli	r2,r2,20
 402b010:	18c03fcc 	andi	r3,r3,255
 402b014:	04400434 	movhi	r17,16
 402b018:	8c7fffc4 	addi	r17,r17,-1
 402b01c:	180697fa 	slli	r3,r3,31
 402b020:	2c4a703a 	and	r5,r5,r17
 402b024:	288ab03a 	or	r5,r5,r2
 402b028:	28c6b03a 	or	r3,r5,r3
 402b02c:	9005883a 	mov	r2,r18
 402b030:	dfc00d17 	ldw	ra,52(sp)
 402b034:	df000c17 	ldw	fp,48(sp)
 402b038:	ddc00b17 	ldw	r23,44(sp)
 402b03c:	dd800a17 	ldw	r22,40(sp)
 402b040:	dd400917 	ldw	r21,36(sp)
 402b044:	dd000817 	ldw	r20,32(sp)
 402b048:	dcc00717 	ldw	r19,28(sp)
 402b04c:	dc800617 	ldw	r18,24(sp)
 402b050:	dc400517 	ldw	r17,20(sp)
 402b054:	dc000417 	ldw	r16,16(sp)
 402b058:	dec00e04 	addi	sp,sp,56
 402b05c:	f800283a 	ret
 402b060:	2404b03a 	or	r2,r4,r16
 402b064:	2027883a 	mov	r19,r4
 402b068:	10003926 	beq	r2,zero,402b150 <__divdf3+0x2c0>
 402b06c:	80012e26 	beq	r16,zero,402b528 <__divdf3+0x698>
 402b070:	8009883a 	mov	r4,r16
 402b074:	d9800315 	stw	r6,12(sp)
 402b078:	d9c00215 	stw	r7,8(sp)
 402b07c:	402cbe80 	call	402cbe8 <__clzsi2>
 402b080:	d9800317 	ldw	r6,12(sp)
 402b084:	d9c00217 	ldw	r7,8(sp)
 402b088:	113ffd44 	addi	r4,r2,-11
 402b08c:	00c00704 	movi	r3,28
 402b090:	19012116 	blt	r3,r4,402b518 <__divdf3+0x688>
 402b094:	00c00744 	movi	r3,29
 402b098:	147ffe04 	addi	r17,r2,-8
 402b09c:	1907c83a 	sub	r3,r3,r4
 402b0a0:	8460983a 	sll	r16,r16,r17
 402b0a4:	98c6d83a 	srl	r3,r19,r3
 402b0a8:	9c64983a 	sll	r18,r19,r17
 402b0ac:	1c20b03a 	or	r16,r3,r16
 402b0b0:	1080fcc4 	addi	r2,r2,1011
 402b0b4:	00abc83a 	sub	r21,zero,r2
 402b0b8:	0027883a 	mov	r19,zero
 402b0bc:	0013883a 	mov	r9,zero
 402b0c0:	003f9106 	br	402af08 <__alt_data_end+0xfffeaf08>
 402b0c4:	3446b03a 	or	r3,r6,r17
 402b0c8:	18001f1e 	bne	r3,zero,402b148 <__divdf3+0x2b8>
 402b0cc:	0023883a 	mov	r17,zero
 402b0d0:	0011883a 	mov	r8,zero
 402b0d4:	01c00084 	movi	r7,2
 402b0d8:	003f9d06 	br	402af50 <__alt_data_end+0xfffeaf50>
 402b0dc:	3446b03a 	or	r3,r6,r17
 402b0e0:	18001526 	beq	r3,zero,402b138 <__divdf3+0x2a8>
 402b0e4:	88011b26 	beq	r17,zero,402b554 <__divdf3+0x6c4>
 402b0e8:	8809883a 	mov	r4,r17
 402b0ec:	d9800315 	stw	r6,12(sp)
 402b0f0:	da400115 	stw	r9,4(sp)
 402b0f4:	402cbe80 	call	402cbe8 <__clzsi2>
 402b0f8:	d9800317 	ldw	r6,12(sp)
 402b0fc:	da400117 	ldw	r9,4(sp)
 402b100:	113ffd44 	addi	r4,r2,-11
 402b104:	00c00704 	movi	r3,28
 402b108:	19010e16 	blt	r3,r4,402b544 <__divdf3+0x6b4>
 402b10c:	00c00744 	movi	r3,29
 402b110:	123ffe04 	addi	r8,r2,-8
 402b114:	1907c83a 	sub	r3,r3,r4
 402b118:	8a22983a 	sll	r17,r17,r8
 402b11c:	30c6d83a 	srl	r3,r6,r3
 402b120:	3210983a 	sll	r8,r6,r8
 402b124:	1c62b03a 	or	r17,r3,r17
 402b128:	1080fcc4 	addi	r2,r2,1011
 402b12c:	0085c83a 	sub	r2,zero,r2
 402b130:	000f883a 	mov	r7,zero
 402b134:	003f8606 	br	402af50 <__alt_data_end+0xfffeaf50>
 402b138:	0023883a 	mov	r17,zero
 402b13c:	0011883a 	mov	r8,zero
 402b140:	01c00044 	movi	r7,1
 402b144:	003f8206 	br	402af50 <__alt_data_end+0xfffeaf50>
 402b148:	01c000c4 	movi	r7,3
 402b14c:	003f8006 	br	402af50 <__alt_data_end+0xfffeaf50>
 402b150:	04c00104 	movi	r19,4
 402b154:	0021883a 	mov	r16,zero
 402b158:	0025883a 	mov	r18,zero
 402b15c:	02400044 	movi	r9,1
 402b160:	003f6906 	br	402af08 <__alt_data_end+0xfffeaf08>
 402b164:	04c00304 	movi	r19,12
 402b168:	024000c4 	movi	r9,3
 402b16c:	003f6606 	br	402af08 <__alt_data_end+0xfffeaf08>
 402b170:	01400434 	movhi	r5,16
 402b174:	0007883a 	mov	r3,zero
 402b178:	297fffc4 	addi	r5,r5,-1
 402b17c:	04bfffc4 	movi	r18,-1
 402b180:	0081ffc4 	movi	r2,2047
 402b184:	003fa106 	br	402b00c <__alt_data_end+0xfffeb00c>
 402b188:	00c00044 	movi	r3,1
 402b18c:	1887c83a 	sub	r3,r3,r2
 402b190:	01000e04 	movi	r4,56
 402b194:	20c1210e 	bge	r4,r3,402b61c <__divdf3+0x78c>
 402b198:	98c0004c 	andi	r3,r19,1
 402b19c:	0005883a 	mov	r2,zero
 402b1a0:	000b883a 	mov	r5,zero
 402b1a4:	0025883a 	mov	r18,zero
 402b1a8:	003f9806 	br	402b00c <__alt_data_end+0xfffeb00c>
 402b1ac:	8c00fd36 	bltu	r17,r16,402b5a4 <__divdf3+0x714>
 402b1b0:	8440fb26 	beq	r16,r17,402b5a0 <__divdf3+0x710>
 402b1b4:	8007883a 	mov	r3,r16
 402b1b8:	ad7fffc4 	addi	r21,r21,-1
 402b1bc:	0021883a 	mov	r16,zero
 402b1c0:	4004d63a 	srli	r2,r8,24
 402b1c4:	8822923a 	slli	r17,r17,8
 402b1c8:	1809883a 	mov	r4,r3
 402b1cc:	402c923a 	slli	r22,r8,8
 402b1d0:	88b8b03a 	or	fp,r17,r2
 402b1d4:	e028d43a 	srli	r20,fp,16
 402b1d8:	d8c00015 	stw	r3,0(sp)
 402b1dc:	e5ffffcc 	andi	r23,fp,65535
 402b1e0:	a00b883a 	mov	r5,r20
 402b1e4:	402a5280 	call	402a528 <__udivsi3>
 402b1e8:	d8c00017 	ldw	r3,0(sp)
 402b1ec:	a00b883a 	mov	r5,r20
 402b1f0:	d8800315 	stw	r2,12(sp)
 402b1f4:	1809883a 	mov	r4,r3
 402b1f8:	402a58c0 	call	402a58c <__umodsi3>
 402b1fc:	d9800317 	ldw	r6,12(sp)
 402b200:	1006943a 	slli	r3,r2,16
 402b204:	9004d43a 	srli	r2,r18,16
 402b208:	b9a3383a 	mul	r17,r23,r6
 402b20c:	10c4b03a 	or	r2,r2,r3
 402b210:	1440062e 	bgeu	r2,r17,402b22c <__divdf3+0x39c>
 402b214:	1705883a 	add	r2,r2,fp
 402b218:	30ffffc4 	addi	r3,r6,-1
 402b21c:	1700ee36 	bltu	r2,fp,402b5d8 <__divdf3+0x748>
 402b220:	1440ed2e 	bgeu	r2,r17,402b5d8 <__divdf3+0x748>
 402b224:	31bfff84 	addi	r6,r6,-2
 402b228:	1705883a 	add	r2,r2,fp
 402b22c:	1463c83a 	sub	r17,r2,r17
 402b230:	a00b883a 	mov	r5,r20
 402b234:	8809883a 	mov	r4,r17
 402b238:	d9800315 	stw	r6,12(sp)
 402b23c:	402a5280 	call	402a528 <__udivsi3>
 402b240:	a00b883a 	mov	r5,r20
 402b244:	8809883a 	mov	r4,r17
 402b248:	d8800215 	stw	r2,8(sp)
 402b24c:	402a58c0 	call	402a58c <__umodsi3>
 402b250:	d9c00217 	ldw	r7,8(sp)
 402b254:	1004943a 	slli	r2,r2,16
 402b258:	94bfffcc 	andi	r18,r18,65535
 402b25c:	b9d1383a 	mul	r8,r23,r7
 402b260:	90a4b03a 	or	r18,r18,r2
 402b264:	d9800317 	ldw	r6,12(sp)
 402b268:	9200062e 	bgeu	r18,r8,402b284 <__divdf3+0x3f4>
 402b26c:	9725883a 	add	r18,r18,fp
 402b270:	38bfffc4 	addi	r2,r7,-1
 402b274:	9700d636 	bltu	r18,fp,402b5d0 <__divdf3+0x740>
 402b278:	9200d52e 	bgeu	r18,r8,402b5d0 <__divdf3+0x740>
 402b27c:	39ffff84 	addi	r7,r7,-2
 402b280:	9725883a 	add	r18,r18,fp
 402b284:	3004943a 	slli	r2,r6,16
 402b288:	b012d43a 	srli	r9,r22,16
 402b28c:	b1bfffcc 	andi	r6,r22,65535
 402b290:	11e2b03a 	or	r17,r2,r7
 402b294:	8806d43a 	srli	r3,r17,16
 402b298:	893fffcc 	andi	r4,r17,65535
 402b29c:	218b383a 	mul	r5,r4,r6
 402b2a0:	30c5383a 	mul	r2,r6,r3
 402b2a4:	2249383a 	mul	r4,r4,r9
 402b2a8:	280ed43a 	srli	r7,r5,16
 402b2ac:	9225c83a 	sub	r18,r18,r8
 402b2b0:	2089883a 	add	r4,r4,r2
 402b2b4:	3909883a 	add	r4,r7,r4
 402b2b8:	1a47383a 	mul	r3,r3,r9
 402b2bc:	2080022e 	bgeu	r4,r2,402b2c8 <__divdf3+0x438>
 402b2c0:	00800074 	movhi	r2,1
 402b2c4:	1887883a 	add	r3,r3,r2
 402b2c8:	2004d43a 	srli	r2,r4,16
 402b2cc:	2008943a 	slli	r4,r4,16
 402b2d0:	297fffcc 	andi	r5,r5,65535
 402b2d4:	10c7883a 	add	r3,r2,r3
 402b2d8:	2149883a 	add	r4,r4,r5
 402b2dc:	90c0a536 	bltu	r18,r3,402b574 <__divdf3+0x6e4>
 402b2e0:	90c0bf26 	beq	r18,r3,402b5e0 <__divdf3+0x750>
 402b2e4:	90c7c83a 	sub	r3,r18,r3
 402b2e8:	810fc83a 	sub	r7,r16,r4
 402b2ec:	81e5803a 	cmpltu	r18,r16,r7
 402b2f0:	1ca5c83a 	sub	r18,r3,r18
 402b2f4:	e480c126 	beq	fp,r18,402b5fc <__divdf3+0x76c>
 402b2f8:	a00b883a 	mov	r5,r20
 402b2fc:	9009883a 	mov	r4,r18
 402b300:	d9800315 	stw	r6,12(sp)
 402b304:	d9c00215 	stw	r7,8(sp)
 402b308:	da400115 	stw	r9,4(sp)
 402b30c:	402a5280 	call	402a528 <__udivsi3>
 402b310:	a00b883a 	mov	r5,r20
 402b314:	9009883a 	mov	r4,r18
 402b318:	d8800015 	stw	r2,0(sp)
 402b31c:	402a58c0 	call	402a58c <__umodsi3>
 402b320:	d9c00217 	ldw	r7,8(sp)
 402b324:	da000017 	ldw	r8,0(sp)
 402b328:	1006943a 	slli	r3,r2,16
 402b32c:	3804d43a 	srli	r2,r7,16
 402b330:	ba21383a 	mul	r16,r23,r8
 402b334:	d9800317 	ldw	r6,12(sp)
 402b338:	10c4b03a 	or	r2,r2,r3
 402b33c:	da400117 	ldw	r9,4(sp)
 402b340:	1400062e 	bgeu	r2,r16,402b35c <__divdf3+0x4cc>
 402b344:	1705883a 	add	r2,r2,fp
 402b348:	40ffffc4 	addi	r3,r8,-1
 402b34c:	1700ad36 	bltu	r2,fp,402b604 <__divdf3+0x774>
 402b350:	1400ac2e 	bgeu	r2,r16,402b604 <__divdf3+0x774>
 402b354:	423fff84 	addi	r8,r8,-2
 402b358:	1705883a 	add	r2,r2,fp
 402b35c:	1421c83a 	sub	r16,r2,r16
 402b360:	a00b883a 	mov	r5,r20
 402b364:	8009883a 	mov	r4,r16
 402b368:	d9800315 	stw	r6,12(sp)
 402b36c:	d9c00215 	stw	r7,8(sp)
 402b370:	da000015 	stw	r8,0(sp)
 402b374:	da400115 	stw	r9,4(sp)
 402b378:	402a5280 	call	402a528 <__udivsi3>
 402b37c:	8009883a 	mov	r4,r16
 402b380:	a00b883a 	mov	r5,r20
 402b384:	1025883a 	mov	r18,r2
 402b388:	402a58c0 	call	402a58c <__umodsi3>
 402b38c:	d9c00217 	ldw	r7,8(sp)
 402b390:	1004943a 	slli	r2,r2,16
 402b394:	bcaf383a 	mul	r23,r23,r18
 402b398:	393fffcc 	andi	r4,r7,65535
 402b39c:	2088b03a 	or	r4,r4,r2
 402b3a0:	d9800317 	ldw	r6,12(sp)
 402b3a4:	da000017 	ldw	r8,0(sp)
 402b3a8:	da400117 	ldw	r9,4(sp)
 402b3ac:	25c0062e 	bgeu	r4,r23,402b3c8 <__divdf3+0x538>
 402b3b0:	2709883a 	add	r4,r4,fp
 402b3b4:	90bfffc4 	addi	r2,r18,-1
 402b3b8:	27009436 	bltu	r4,fp,402b60c <__divdf3+0x77c>
 402b3bc:	25c0932e 	bgeu	r4,r23,402b60c <__divdf3+0x77c>
 402b3c0:	94bfff84 	addi	r18,r18,-2
 402b3c4:	2709883a 	add	r4,r4,fp
 402b3c8:	4004943a 	slli	r2,r8,16
 402b3cc:	25efc83a 	sub	r23,r4,r23
 402b3d0:	1490b03a 	or	r8,r2,r18
 402b3d4:	4008d43a 	srli	r4,r8,16
 402b3d8:	40ffffcc 	andi	r3,r8,65535
 402b3dc:	30c5383a 	mul	r2,r6,r3
 402b3e0:	1a47383a 	mul	r3,r3,r9
 402b3e4:	310d383a 	mul	r6,r6,r4
 402b3e8:	100ad43a 	srli	r5,r2,16
 402b3ec:	4913383a 	mul	r9,r9,r4
 402b3f0:	1987883a 	add	r3,r3,r6
 402b3f4:	28c7883a 	add	r3,r5,r3
 402b3f8:	1980022e 	bgeu	r3,r6,402b404 <__divdf3+0x574>
 402b3fc:	01000074 	movhi	r4,1
 402b400:	4913883a 	add	r9,r9,r4
 402b404:	1808d43a 	srli	r4,r3,16
 402b408:	1806943a 	slli	r3,r3,16
 402b40c:	10bfffcc 	andi	r2,r2,65535
 402b410:	2253883a 	add	r9,r4,r9
 402b414:	1887883a 	add	r3,r3,r2
 402b418:	ba403836 	bltu	r23,r9,402b4fc <__divdf3+0x66c>
 402b41c:	ba403626 	beq	r23,r9,402b4f8 <__divdf3+0x668>
 402b420:	42000054 	ori	r8,r8,1
 402b424:	a880ffc4 	addi	r2,r21,1023
 402b428:	00bf570e 	bge	zero,r2,402b188 <__alt_data_end+0xfffeb188>
 402b42c:	40c001cc 	andi	r3,r8,7
 402b430:	18000726 	beq	r3,zero,402b450 <__divdf3+0x5c0>
 402b434:	40c003cc 	andi	r3,r8,15
 402b438:	01000104 	movi	r4,4
 402b43c:	19000426 	beq	r3,r4,402b450 <__divdf3+0x5c0>
 402b440:	4107883a 	add	r3,r8,r4
 402b444:	1a11803a 	cmpltu	r8,r3,r8
 402b448:	8a23883a 	add	r17,r17,r8
 402b44c:	1811883a 	mov	r8,r3
 402b450:	88c0402c 	andhi	r3,r17,256
 402b454:	18000426 	beq	r3,zero,402b468 <__divdf3+0x5d8>
 402b458:	00ffc034 	movhi	r3,65280
 402b45c:	18ffffc4 	addi	r3,r3,-1
 402b460:	a8810004 	addi	r2,r21,1024
 402b464:	88e2703a 	and	r17,r17,r3
 402b468:	00c1ff84 	movi	r3,2046
 402b46c:	18bee316 	blt	r3,r2,402affc <__alt_data_end+0xfffeaffc>
 402b470:	8824977a 	slli	r18,r17,29
 402b474:	4010d0fa 	srli	r8,r8,3
 402b478:	8822927a 	slli	r17,r17,9
 402b47c:	1081ffcc 	andi	r2,r2,2047
 402b480:	9224b03a 	or	r18,r18,r8
 402b484:	880ad33a 	srli	r5,r17,12
 402b488:	98c0004c 	andi	r3,r19,1
 402b48c:	003edf06 	br	402b00c <__alt_data_end+0xfffeb00c>
 402b490:	8080022c 	andhi	r2,r16,8
 402b494:	10001226 	beq	r2,zero,402b4e0 <__divdf3+0x650>
 402b498:	8880022c 	andhi	r2,r17,8
 402b49c:	1000101e 	bne	r2,zero,402b4e0 <__divdf3+0x650>
 402b4a0:	00800434 	movhi	r2,16
 402b4a4:	89400234 	orhi	r5,r17,8
 402b4a8:	10bfffc4 	addi	r2,r2,-1
 402b4ac:	b007883a 	mov	r3,r22
 402b4b0:	288a703a 	and	r5,r5,r2
 402b4b4:	4025883a 	mov	r18,r8
 402b4b8:	003f3106 	br	402b180 <__alt_data_end+0xfffeb180>
 402b4bc:	008000c4 	movi	r2,3
 402b4c0:	3880a626 	beq	r7,r2,402b75c <__divdf3+0x8cc>
 402b4c4:	00800044 	movi	r2,1
 402b4c8:	3880521e 	bne	r7,r2,402b614 <__divdf3+0x784>
 402b4cc:	b807883a 	mov	r3,r23
 402b4d0:	0005883a 	mov	r2,zero
 402b4d4:	000b883a 	mov	r5,zero
 402b4d8:	0025883a 	mov	r18,zero
 402b4dc:	003ecb06 	br	402b00c <__alt_data_end+0xfffeb00c>
 402b4e0:	00800434 	movhi	r2,16
 402b4e4:	81400234 	orhi	r5,r16,8
 402b4e8:	10bfffc4 	addi	r2,r2,-1
 402b4ec:	a007883a 	mov	r3,r20
 402b4f0:	288a703a 	and	r5,r5,r2
 402b4f4:	003f2206 	br	402b180 <__alt_data_end+0xfffeb180>
 402b4f8:	183fca26 	beq	r3,zero,402b424 <__alt_data_end+0xfffeb424>
 402b4fc:	e5ef883a 	add	r23,fp,r23
 402b500:	40bfffc4 	addi	r2,r8,-1
 402b504:	bf00392e 	bgeu	r23,fp,402b5ec <__divdf3+0x75c>
 402b508:	1011883a 	mov	r8,r2
 402b50c:	ba7fc41e 	bne	r23,r9,402b420 <__alt_data_end+0xfffeb420>
 402b510:	b0ffc31e 	bne	r22,r3,402b420 <__alt_data_end+0xfffeb420>
 402b514:	003fc306 	br	402b424 <__alt_data_end+0xfffeb424>
 402b518:	143ff604 	addi	r16,r2,-40
 402b51c:	9c20983a 	sll	r16,r19,r16
 402b520:	0025883a 	mov	r18,zero
 402b524:	003ee206 	br	402b0b0 <__alt_data_end+0xfffeb0b0>
 402b528:	d9800315 	stw	r6,12(sp)
 402b52c:	d9c00215 	stw	r7,8(sp)
 402b530:	402cbe80 	call	402cbe8 <__clzsi2>
 402b534:	10800804 	addi	r2,r2,32
 402b538:	d9c00217 	ldw	r7,8(sp)
 402b53c:	d9800317 	ldw	r6,12(sp)
 402b540:	003ed106 	br	402b088 <__alt_data_end+0xfffeb088>
 402b544:	147ff604 	addi	r17,r2,-40
 402b548:	3462983a 	sll	r17,r6,r17
 402b54c:	0011883a 	mov	r8,zero
 402b550:	003ef506 	br	402b128 <__alt_data_end+0xfffeb128>
 402b554:	3009883a 	mov	r4,r6
 402b558:	d9800315 	stw	r6,12(sp)
 402b55c:	da400115 	stw	r9,4(sp)
 402b560:	402cbe80 	call	402cbe8 <__clzsi2>
 402b564:	10800804 	addi	r2,r2,32
 402b568:	da400117 	ldw	r9,4(sp)
 402b56c:	d9800317 	ldw	r6,12(sp)
 402b570:	003ee306 	br	402b100 <__alt_data_end+0xfffeb100>
 402b574:	85a1883a 	add	r16,r16,r22
 402b578:	8585803a 	cmpltu	r2,r16,r22
 402b57c:	1705883a 	add	r2,r2,fp
 402b580:	14a5883a 	add	r18,r2,r18
 402b584:	88bfffc4 	addi	r2,r17,-1
 402b588:	e4800c2e 	bgeu	fp,r18,402b5bc <__divdf3+0x72c>
 402b58c:	90c03e36 	bltu	r18,r3,402b688 <__divdf3+0x7f8>
 402b590:	1c806926 	beq	r3,r18,402b738 <__divdf3+0x8a8>
 402b594:	90c7c83a 	sub	r3,r18,r3
 402b598:	1023883a 	mov	r17,r2
 402b59c:	003f5206 	br	402b2e8 <__alt_data_end+0xfffeb2e8>
 402b5a0:	923f0436 	bltu	r18,r8,402b1b4 <__alt_data_end+0xfffeb1b4>
 402b5a4:	800897fa 	slli	r4,r16,31
 402b5a8:	9004d07a 	srli	r2,r18,1
 402b5ac:	8006d07a 	srli	r3,r16,1
 402b5b0:	902097fa 	slli	r16,r18,31
 402b5b4:	20a4b03a 	or	r18,r4,r2
 402b5b8:	003f0106 	br	402b1c0 <__alt_data_end+0xfffeb1c0>
 402b5bc:	e4bff51e 	bne	fp,r18,402b594 <__alt_data_end+0xfffeb594>
 402b5c0:	85bff22e 	bgeu	r16,r22,402b58c <__alt_data_end+0xfffeb58c>
 402b5c4:	e0c7c83a 	sub	r3,fp,r3
 402b5c8:	1023883a 	mov	r17,r2
 402b5cc:	003f4606 	br	402b2e8 <__alt_data_end+0xfffeb2e8>
 402b5d0:	100f883a 	mov	r7,r2
 402b5d4:	003f2b06 	br	402b284 <__alt_data_end+0xfffeb284>
 402b5d8:	180d883a 	mov	r6,r3
 402b5dc:	003f1306 	br	402b22c <__alt_data_end+0xfffeb22c>
 402b5e0:	813fe436 	bltu	r16,r4,402b574 <__alt_data_end+0xfffeb574>
 402b5e4:	0007883a 	mov	r3,zero
 402b5e8:	003f3f06 	br	402b2e8 <__alt_data_end+0xfffeb2e8>
 402b5ec:	ba402c36 	bltu	r23,r9,402b6a0 <__divdf3+0x810>
 402b5f0:	4dc05426 	beq	r9,r23,402b744 <__divdf3+0x8b4>
 402b5f4:	1011883a 	mov	r8,r2
 402b5f8:	003f8906 	br	402b420 <__alt_data_end+0xfffeb420>
 402b5fc:	023fffc4 	movi	r8,-1
 402b600:	003f8806 	br	402b424 <__alt_data_end+0xfffeb424>
 402b604:	1811883a 	mov	r8,r3
 402b608:	003f5406 	br	402b35c <__alt_data_end+0xfffeb35c>
 402b60c:	1025883a 	mov	r18,r2
 402b610:	003f6d06 	br	402b3c8 <__alt_data_end+0xfffeb3c8>
 402b614:	b827883a 	mov	r19,r23
 402b618:	003f8206 	br	402b424 <__alt_data_end+0xfffeb424>
 402b61c:	010007c4 	movi	r4,31
 402b620:	20c02616 	blt	r4,r3,402b6bc <__divdf3+0x82c>
 402b624:	00800804 	movi	r2,32
 402b628:	10c5c83a 	sub	r2,r2,r3
 402b62c:	888a983a 	sll	r5,r17,r2
 402b630:	40c8d83a 	srl	r4,r8,r3
 402b634:	4084983a 	sll	r2,r8,r2
 402b638:	88e2d83a 	srl	r17,r17,r3
 402b63c:	2906b03a 	or	r3,r5,r4
 402b640:	1004c03a 	cmpne	r2,r2,zero
 402b644:	1886b03a 	or	r3,r3,r2
 402b648:	188001cc 	andi	r2,r3,7
 402b64c:	10000726 	beq	r2,zero,402b66c <__divdf3+0x7dc>
 402b650:	188003cc 	andi	r2,r3,15
 402b654:	01000104 	movi	r4,4
 402b658:	11000426 	beq	r2,r4,402b66c <__divdf3+0x7dc>
 402b65c:	1805883a 	mov	r2,r3
 402b660:	10c00104 	addi	r3,r2,4
 402b664:	1885803a 	cmpltu	r2,r3,r2
 402b668:	88a3883a 	add	r17,r17,r2
 402b66c:	8880202c 	andhi	r2,r17,128
 402b670:	10002726 	beq	r2,zero,402b710 <__divdf3+0x880>
 402b674:	98c0004c 	andi	r3,r19,1
 402b678:	00800044 	movi	r2,1
 402b67c:	000b883a 	mov	r5,zero
 402b680:	0025883a 	mov	r18,zero
 402b684:	003e6106 	br	402b00c <__alt_data_end+0xfffeb00c>
 402b688:	85a1883a 	add	r16,r16,r22
 402b68c:	8585803a 	cmpltu	r2,r16,r22
 402b690:	1705883a 	add	r2,r2,fp
 402b694:	14a5883a 	add	r18,r2,r18
 402b698:	8c7fff84 	addi	r17,r17,-2
 402b69c:	003f1106 	br	402b2e4 <__alt_data_end+0xfffeb2e4>
 402b6a0:	b589883a 	add	r4,r22,r22
 402b6a4:	25ad803a 	cmpltu	r22,r4,r22
 402b6a8:	b739883a 	add	fp,r22,fp
 402b6ac:	40bfff84 	addi	r2,r8,-2
 402b6b0:	bf2f883a 	add	r23,r23,fp
 402b6b4:	202d883a 	mov	r22,r4
 402b6b8:	003f9306 	br	402b508 <__alt_data_end+0xfffeb508>
 402b6bc:	013ff844 	movi	r4,-31
 402b6c0:	2085c83a 	sub	r2,r4,r2
 402b6c4:	8888d83a 	srl	r4,r17,r2
 402b6c8:	00800804 	movi	r2,32
 402b6cc:	18802126 	beq	r3,r2,402b754 <__divdf3+0x8c4>
 402b6d0:	00801004 	movi	r2,64
 402b6d4:	10c5c83a 	sub	r2,r2,r3
 402b6d8:	8884983a 	sll	r2,r17,r2
 402b6dc:	1204b03a 	or	r2,r2,r8
 402b6e0:	1004c03a 	cmpne	r2,r2,zero
 402b6e4:	2084b03a 	or	r2,r4,r2
 402b6e8:	144001cc 	andi	r17,r2,7
 402b6ec:	88000d1e 	bne	r17,zero,402b724 <__divdf3+0x894>
 402b6f0:	000b883a 	mov	r5,zero
 402b6f4:	1024d0fa 	srli	r18,r2,3
 402b6f8:	98c0004c 	andi	r3,r19,1
 402b6fc:	0005883a 	mov	r2,zero
 402b700:	9464b03a 	or	r18,r18,r17
 402b704:	003e4106 	br	402b00c <__alt_data_end+0xfffeb00c>
 402b708:	1007883a 	mov	r3,r2
 402b70c:	0023883a 	mov	r17,zero
 402b710:	880a927a 	slli	r5,r17,9
 402b714:	1805883a 	mov	r2,r3
 402b718:	8822977a 	slli	r17,r17,29
 402b71c:	280ad33a 	srli	r5,r5,12
 402b720:	003ff406 	br	402b6f4 <__alt_data_end+0xfffeb6f4>
 402b724:	10c003cc 	andi	r3,r2,15
 402b728:	01000104 	movi	r4,4
 402b72c:	193ff626 	beq	r3,r4,402b708 <__alt_data_end+0xfffeb708>
 402b730:	0023883a 	mov	r17,zero
 402b734:	003fca06 	br	402b660 <__alt_data_end+0xfffeb660>
 402b738:	813fd336 	bltu	r16,r4,402b688 <__alt_data_end+0xfffeb688>
 402b73c:	1023883a 	mov	r17,r2
 402b740:	003fa806 	br	402b5e4 <__alt_data_end+0xfffeb5e4>
 402b744:	b0ffd636 	bltu	r22,r3,402b6a0 <__alt_data_end+0xfffeb6a0>
 402b748:	1011883a 	mov	r8,r2
 402b74c:	b0ff341e 	bne	r22,r3,402b420 <__alt_data_end+0xfffeb420>
 402b750:	003f3406 	br	402b424 <__alt_data_end+0xfffeb424>
 402b754:	0005883a 	mov	r2,zero
 402b758:	003fe006 	br	402b6dc <__alt_data_end+0xfffeb6dc>
 402b75c:	00800434 	movhi	r2,16
 402b760:	89400234 	orhi	r5,r17,8
 402b764:	10bfffc4 	addi	r2,r2,-1
 402b768:	b807883a 	mov	r3,r23
 402b76c:	288a703a 	and	r5,r5,r2
 402b770:	4025883a 	mov	r18,r8
 402b774:	003e8206 	br	402b180 <__alt_data_end+0xfffeb180>

0402b778 <__eqdf2>:
 402b778:	2804d53a 	srli	r2,r5,20
 402b77c:	3806d53a 	srli	r3,r7,20
 402b780:	02000434 	movhi	r8,16
 402b784:	423fffc4 	addi	r8,r8,-1
 402b788:	1081ffcc 	andi	r2,r2,2047
 402b78c:	0281ffc4 	movi	r10,2047
 402b790:	2a12703a 	and	r9,r5,r8
 402b794:	18c1ffcc 	andi	r3,r3,2047
 402b798:	3a10703a 	and	r8,r7,r8
 402b79c:	280ad7fa 	srli	r5,r5,31
 402b7a0:	380ed7fa 	srli	r7,r7,31
 402b7a4:	12801026 	beq	r2,r10,402b7e8 <__eqdf2+0x70>
 402b7a8:	0281ffc4 	movi	r10,2047
 402b7ac:	1a800a26 	beq	r3,r10,402b7d8 <__eqdf2+0x60>
 402b7b0:	10c00226 	beq	r2,r3,402b7bc <__eqdf2+0x44>
 402b7b4:	00800044 	movi	r2,1
 402b7b8:	f800283a 	ret
 402b7bc:	4a3ffd1e 	bne	r9,r8,402b7b4 <__alt_data_end+0xfffeb7b4>
 402b7c0:	21bffc1e 	bne	r4,r6,402b7b4 <__alt_data_end+0xfffeb7b4>
 402b7c4:	29c00c26 	beq	r5,r7,402b7f8 <__eqdf2+0x80>
 402b7c8:	103ffa1e 	bne	r2,zero,402b7b4 <__alt_data_end+0xfffeb7b4>
 402b7cc:	2244b03a 	or	r2,r4,r9
 402b7d0:	1004c03a 	cmpne	r2,r2,zero
 402b7d4:	f800283a 	ret
 402b7d8:	3214b03a 	or	r10,r6,r8
 402b7dc:	503ff426 	beq	r10,zero,402b7b0 <__alt_data_end+0xfffeb7b0>
 402b7e0:	00800044 	movi	r2,1
 402b7e4:	f800283a 	ret
 402b7e8:	2254b03a 	or	r10,r4,r9
 402b7ec:	503fee26 	beq	r10,zero,402b7a8 <__alt_data_end+0xfffeb7a8>
 402b7f0:	00800044 	movi	r2,1
 402b7f4:	f800283a 	ret
 402b7f8:	0005883a 	mov	r2,zero
 402b7fc:	f800283a 	ret

0402b800 <__gedf2>:
 402b800:	2804d53a 	srli	r2,r5,20
 402b804:	3806d53a 	srli	r3,r7,20
 402b808:	02000434 	movhi	r8,16
 402b80c:	423fffc4 	addi	r8,r8,-1
 402b810:	1081ffcc 	andi	r2,r2,2047
 402b814:	0241ffc4 	movi	r9,2047
 402b818:	2a14703a 	and	r10,r5,r8
 402b81c:	18c1ffcc 	andi	r3,r3,2047
 402b820:	3a10703a 	and	r8,r7,r8
 402b824:	280ad7fa 	srli	r5,r5,31
 402b828:	380ed7fa 	srli	r7,r7,31
 402b82c:	12401d26 	beq	r2,r9,402b8a4 <__gedf2+0xa4>
 402b830:	0241ffc4 	movi	r9,2047
 402b834:	1a401226 	beq	r3,r9,402b880 <__gedf2+0x80>
 402b838:	1000081e 	bne	r2,zero,402b85c <__gedf2+0x5c>
 402b83c:	2296b03a 	or	r11,r4,r10
 402b840:	5813003a 	cmpeq	r9,r11,zero
 402b844:	1800091e 	bne	r3,zero,402b86c <__gedf2+0x6c>
 402b848:	3218b03a 	or	r12,r6,r8
 402b84c:	6000071e 	bne	r12,zero,402b86c <__gedf2+0x6c>
 402b850:	0005883a 	mov	r2,zero
 402b854:	5800101e 	bne	r11,zero,402b898 <__gedf2+0x98>
 402b858:	f800283a 	ret
 402b85c:	18000c1e 	bne	r3,zero,402b890 <__gedf2+0x90>
 402b860:	3212b03a 	or	r9,r6,r8
 402b864:	48000c26 	beq	r9,zero,402b898 <__gedf2+0x98>
 402b868:	0013883a 	mov	r9,zero
 402b86c:	39c03fcc 	andi	r7,r7,255
 402b870:	48000826 	beq	r9,zero,402b894 <__gedf2+0x94>
 402b874:	38000926 	beq	r7,zero,402b89c <__gedf2+0x9c>
 402b878:	00800044 	movi	r2,1
 402b87c:	f800283a 	ret
 402b880:	3212b03a 	or	r9,r6,r8
 402b884:	483fec26 	beq	r9,zero,402b838 <__alt_data_end+0xfffeb838>
 402b888:	00bfff84 	movi	r2,-2
 402b88c:	f800283a 	ret
 402b890:	39c03fcc 	andi	r7,r7,255
 402b894:	29c00626 	beq	r5,r7,402b8b0 <__gedf2+0xb0>
 402b898:	283ff726 	beq	r5,zero,402b878 <__alt_data_end+0xfffeb878>
 402b89c:	00bfffc4 	movi	r2,-1
 402b8a0:	f800283a 	ret
 402b8a4:	2292b03a 	or	r9,r4,r10
 402b8a8:	483fe126 	beq	r9,zero,402b830 <__alt_data_end+0xfffeb830>
 402b8ac:	003ff606 	br	402b888 <__alt_data_end+0xfffeb888>
 402b8b0:	18bff916 	blt	r3,r2,402b898 <__alt_data_end+0xfffeb898>
 402b8b4:	10c00316 	blt	r2,r3,402b8c4 <__gedf2+0xc4>
 402b8b8:	42bff736 	bltu	r8,r10,402b898 <__alt_data_end+0xfffeb898>
 402b8bc:	52000326 	beq	r10,r8,402b8cc <__gedf2+0xcc>
 402b8c0:	5200042e 	bgeu	r10,r8,402b8d4 <__gedf2+0xd4>
 402b8c4:	283fec1e 	bne	r5,zero,402b878 <__alt_data_end+0xfffeb878>
 402b8c8:	003ff406 	br	402b89c <__alt_data_end+0xfffeb89c>
 402b8cc:	313ff236 	bltu	r6,r4,402b898 <__alt_data_end+0xfffeb898>
 402b8d0:	21bffc36 	bltu	r4,r6,402b8c4 <__alt_data_end+0xfffeb8c4>
 402b8d4:	0005883a 	mov	r2,zero
 402b8d8:	f800283a 	ret

0402b8dc <__ledf2>:
 402b8dc:	2804d53a 	srli	r2,r5,20
 402b8e0:	3810d53a 	srli	r8,r7,20
 402b8e4:	00c00434 	movhi	r3,16
 402b8e8:	18ffffc4 	addi	r3,r3,-1
 402b8ec:	1081ffcc 	andi	r2,r2,2047
 402b8f0:	0241ffc4 	movi	r9,2047
 402b8f4:	28d4703a 	and	r10,r5,r3
 402b8f8:	4201ffcc 	andi	r8,r8,2047
 402b8fc:	38c6703a 	and	r3,r7,r3
 402b900:	280ad7fa 	srli	r5,r5,31
 402b904:	380ed7fa 	srli	r7,r7,31
 402b908:	12401f26 	beq	r2,r9,402b988 <__ledf2+0xac>
 402b90c:	0241ffc4 	movi	r9,2047
 402b910:	42401426 	beq	r8,r9,402b964 <__ledf2+0x88>
 402b914:	1000091e 	bne	r2,zero,402b93c <__ledf2+0x60>
 402b918:	2296b03a 	or	r11,r4,r10
 402b91c:	5813003a 	cmpeq	r9,r11,zero
 402b920:	29403fcc 	andi	r5,r5,255
 402b924:	40000a1e 	bne	r8,zero,402b950 <__ledf2+0x74>
 402b928:	30d8b03a 	or	r12,r6,r3
 402b92c:	6000081e 	bne	r12,zero,402b950 <__ledf2+0x74>
 402b930:	0005883a 	mov	r2,zero
 402b934:	5800111e 	bne	r11,zero,402b97c <__ledf2+0xa0>
 402b938:	f800283a 	ret
 402b93c:	29403fcc 	andi	r5,r5,255
 402b940:	40000c1e 	bne	r8,zero,402b974 <__ledf2+0x98>
 402b944:	30d2b03a 	or	r9,r6,r3
 402b948:	48000c26 	beq	r9,zero,402b97c <__ledf2+0xa0>
 402b94c:	0013883a 	mov	r9,zero
 402b950:	39c03fcc 	andi	r7,r7,255
 402b954:	48000826 	beq	r9,zero,402b978 <__ledf2+0x9c>
 402b958:	38001126 	beq	r7,zero,402b9a0 <__ledf2+0xc4>
 402b95c:	00800044 	movi	r2,1
 402b960:	f800283a 	ret
 402b964:	30d2b03a 	or	r9,r6,r3
 402b968:	483fea26 	beq	r9,zero,402b914 <__alt_data_end+0xfffeb914>
 402b96c:	00800084 	movi	r2,2
 402b970:	f800283a 	ret
 402b974:	39c03fcc 	andi	r7,r7,255
 402b978:	39400726 	beq	r7,r5,402b998 <__ledf2+0xbc>
 402b97c:	2800081e 	bne	r5,zero,402b9a0 <__ledf2+0xc4>
 402b980:	00800044 	movi	r2,1
 402b984:	f800283a 	ret
 402b988:	2292b03a 	or	r9,r4,r10
 402b98c:	483fdf26 	beq	r9,zero,402b90c <__alt_data_end+0xfffeb90c>
 402b990:	00800084 	movi	r2,2
 402b994:	f800283a 	ret
 402b998:	4080030e 	bge	r8,r2,402b9a8 <__ledf2+0xcc>
 402b99c:	383fef26 	beq	r7,zero,402b95c <__alt_data_end+0xfffeb95c>
 402b9a0:	00bfffc4 	movi	r2,-1
 402b9a4:	f800283a 	ret
 402b9a8:	123feb16 	blt	r2,r8,402b958 <__alt_data_end+0xfffeb958>
 402b9ac:	1abff336 	bltu	r3,r10,402b97c <__alt_data_end+0xfffeb97c>
 402b9b0:	50c00326 	beq	r10,r3,402b9c0 <__ledf2+0xe4>
 402b9b4:	50c0042e 	bgeu	r10,r3,402b9c8 <__ledf2+0xec>
 402b9b8:	283fe81e 	bne	r5,zero,402b95c <__alt_data_end+0xfffeb95c>
 402b9bc:	003ff806 	br	402b9a0 <__alt_data_end+0xfffeb9a0>
 402b9c0:	313fee36 	bltu	r6,r4,402b97c <__alt_data_end+0xfffeb97c>
 402b9c4:	21bffc36 	bltu	r4,r6,402b9b8 <__alt_data_end+0xfffeb9b8>
 402b9c8:	0005883a 	mov	r2,zero
 402b9cc:	f800283a 	ret

0402b9d0 <__muldf3>:
 402b9d0:	defff304 	addi	sp,sp,-52
 402b9d4:	2804d53a 	srli	r2,r5,20
 402b9d8:	dd800915 	stw	r22,36(sp)
 402b9dc:	282cd7fa 	srli	r22,r5,31
 402b9e0:	dc000315 	stw	r16,12(sp)
 402b9e4:	04000434 	movhi	r16,16
 402b9e8:	dd400815 	stw	r21,32(sp)
 402b9ec:	dc800515 	stw	r18,20(sp)
 402b9f0:	843fffc4 	addi	r16,r16,-1
 402b9f4:	dfc00c15 	stw	ra,48(sp)
 402b9f8:	df000b15 	stw	fp,44(sp)
 402b9fc:	ddc00a15 	stw	r23,40(sp)
 402ba00:	dd000715 	stw	r20,28(sp)
 402ba04:	dcc00615 	stw	r19,24(sp)
 402ba08:	dc400415 	stw	r17,16(sp)
 402ba0c:	1481ffcc 	andi	r18,r2,2047
 402ba10:	2c20703a 	and	r16,r5,r16
 402ba14:	b02b883a 	mov	r21,r22
 402ba18:	b2403fcc 	andi	r9,r22,255
 402ba1c:	90006026 	beq	r18,zero,402bba0 <__muldf3+0x1d0>
 402ba20:	0081ffc4 	movi	r2,2047
 402ba24:	2029883a 	mov	r20,r4
 402ba28:	90803626 	beq	r18,r2,402bb04 <__muldf3+0x134>
 402ba2c:	80800434 	orhi	r2,r16,16
 402ba30:	100490fa 	slli	r2,r2,3
 402ba34:	2020d77a 	srli	r16,r4,29
 402ba38:	202890fa 	slli	r20,r4,3
 402ba3c:	94bf0044 	addi	r18,r18,-1023
 402ba40:	80a0b03a 	or	r16,r16,r2
 402ba44:	0027883a 	mov	r19,zero
 402ba48:	0039883a 	mov	fp,zero
 402ba4c:	3804d53a 	srli	r2,r7,20
 402ba50:	382ed7fa 	srli	r23,r7,31
 402ba54:	04400434 	movhi	r17,16
 402ba58:	8c7fffc4 	addi	r17,r17,-1
 402ba5c:	1081ffcc 	andi	r2,r2,2047
 402ba60:	3011883a 	mov	r8,r6
 402ba64:	3c62703a 	and	r17,r7,r17
 402ba68:	ba803fcc 	andi	r10,r23,255
 402ba6c:	10006d26 	beq	r2,zero,402bc24 <__muldf3+0x254>
 402ba70:	00c1ffc4 	movi	r3,2047
 402ba74:	10c06526 	beq	r2,r3,402bc0c <__muldf3+0x23c>
 402ba78:	88c00434 	orhi	r3,r17,16
 402ba7c:	180690fa 	slli	r3,r3,3
 402ba80:	3022d77a 	srli	r17,r6,29
 402ba84:	301090fa 	slli	r8,r6,3
 402ba88:	10bf0044 	addi	r2,r2,-1023
 402ba8c:	88e2b03a 	or	r17,r17,r3
 402ba90:	000b883a 	mov	r5,zero
 402ba94:	9085883a 	add	r2,r18,r2
 402ba98:	2cc8b03a 	or	r4,r5,r19
 402ba9c:	00c003c4 	movi	r3,15
 402baa0:	bdacf03a 	xor	r22,r23,r22
 402baa4:	12c00044 	addi	r11,r2,1
 402baa8:	19009936 	bltu	r3,r4,402bd10 <__muldf3+0x340>
 402baac:	200890ba 	slli	r4,r4,2
 402bab0:	00c100f4 	movhi	r3,1027
 402bab4:	18eeb104 	addi	r3,r3,-17724
 402bab8:	20c9883a 	add	r4,r4,r3
 402babc:	20c00017 	ldw	r3,0(r4)
 402bac0:	1800683a 	jmp	r3
 402bac4:	0402bd10 	cmplti	r16,zero,2804
 402bac8:	0402bb24 	muli	r16,zero,2796
 402bacc:	0402bb24 	muli	r16,zero,2796
 402bad0:	0402bb20 	cmpeqi	r16,zero,2796
 402bad4:	0402bcec 	andhi	r16,zero,2803
 402bad8:	0402bcec 	andhi	r16,zero,2803
 402badc:	0402bcd4 	movui	r16,2803
 402bae0:	0402bb20 	cmpeqi	r16,zero,2796
 402bae4:	0402bcec 	andhi	r16,zero,2803
 402bae8:	0402bcd4 	movui	r16,2803
 402baec:	0402bcec 	andhi	r16,zero,2803
 402baf0:	0402bb20 	cmpeqi	r16,zero,2796
 402baf4:	0402bcfc 	xorhi	r16,zero,2803
 402baf8:	0402bcfc 	xorhi	r16,zero,2803
 402bafc:	0402bcfc 	xorhi	r16,zero,2803
 402bb00:	0402bf18 	cmpnei	r16,zero,2812
 402bb04:	2404b03a 	or	r2,r4,r16
 402bb08:	10006f1e 	bne	r2,zero,402bcc8 <__muldf3+0x2f8>
 402bb0c:	04c00204 	movi	r19,8
 402bb10:	0021883a 	mov	r16,zero
 402bb14:	0029883a 	mov	r20,zero
 402bb18:	07000084 	movi	fp,2
 402bb1c:	003fcb06 	br	402ba4c <__alt_data_end+0xfffeba4c>
 402bb20:	502d883a 	mov	r22,r10
 402bb24:	00800084 	movi	r2,2
 402bb28:	28805726 	beq	r5,r2,402bc88 <__muldf3+0x2b8>
 402bb2c:	008000c4 	movi	r2,3
 402bb30:	28816626 	beq	r5,r2,402c0cc <__muldf3+0x6fc>
 402bb34:	00800044 	movi	r2,1
 402bb38:	2881411e 	bne	r5,r2,402c040 <__muldf3+0x670>
 402bb3c:	b02b883a 	mov	r21,r22
 402bb40:	0005883a 	mov	r2,zero
 402bb44:	000b883a 	mov	r5,zero
 402bb48:	0029883a 	mov	r20,zero
 402bb4c:	1004953a 	slli	r2,r2,20
 402bb50:	a8c03fcc 	andi	r3,r21,255
 402bb54:	04400434 	movhi	r17,16
 402bb58:	8c7fffc4 	addi	r17,r17,-1
 402bb5c:	180697fa 	slli	r3,r3,31
 402bb60:	2c4a703a 	and	r5,r5,r17
 402bb64:	288ab03a 	or	r5,r5,r2
 402bb68:	28c6b03a 	or	r3,r5,r3
 402bb6c:	a005883a 	mov	r2,r20
 402bb70:	dfc00c17 	ldw	ra,48(sp)
 402bb74:	df000b17 	ldw	fp,44(sp)
 402bb78:	ddc00a17 	ldw	r23,40(sp)
 402bb7c:	dd800917 	ldw	r22,36(sp)
 402bb80:	dd400817 	ldw	r21,32(sp)
 402bb84:	dd000717 	ldw	r20,28(sp)
 402bb88:	dcc00617 	ldw	r19,24(sp)
 402bb8c:	dc800517 	ldw	r18,20(sp)
 402bb90:	dc400417 	ldw	r17,16(sp)
 402bb94:	dc000317 	ldw	r16,12(sp)
 402bb98:	dec00d04 	addi	sp,sp,52
 402bb9c:	f800283a 	ret
 402bba0:	2404b03a 	or	r2,r4,r16
 402bba4:	2027883a 	mov	r19,r4
 402bba8:	10004226 	beq	r2,zero,402bcb4 <__muldf3+0x2e4>
 402bbac:	8000fc26 	beq	r16,zero,402bfa0 <__muldf3+0x5d0>
 402bbb0:	8009883a 	mov	r4,r16
 402bbb4:	d9800215 	stw	r6,8(sp)
 402bbb8:	d9c00015 	stw	r7,0(sp)
 402bbbc:	da400115 	stw	r9,4(sp)
 402bbc0:	402cbe80 	call	402cbe8 <__clzsi2>
 402bbc4:	d9800217 	ldw	r6,8(sp)
 402bbc8:	d9c00017 	ldw	r7,0(sp)
 402bbcc:	da400117 	ldw	r9,4(sp)
 402bbd0:	113ffd44 	addi	r4,r2,-11
 402bbd4:	00c00704 	movi	r3,28
 402bbd8:	1900ed16 	blt	r3,r4,402bf90 <__muldf3+0x5c0>
 402bbdc:	00c00744 	movi	r3,29
 402bbe0:	147ffe04 	addi	r17,r2,-8
 402bbe4:	1907c83a 	sub	r3,r3,r4
 402bbe8:	8460983a 	sll	r16,r16,r17
 402bbec:	98c6d83a 	srl	r3,r19,r3
 402bbf0:	9c68983a 	sll	r20,r19,r17
 402bbf4:	1c20b03a 	or	r16,r3,r16
 402bbf8:	1080fcc4 	addi	r2,r2,1011
 402bbfc:	00a5c83a 	sub	r18,zero,r2
 402bc00:	0027883a 	mov	r19,zero
 402bc04:	0039883a 	mov	fp,zero
 402bc08:	003f9006 	br	402ba4c <__alt_data_end+0xfffeba4c>
 402bc0c:	3446b03a 	or	r3,r6,r17
 402bc10:	1800261e 	bne	r3,zero,402bcac <__muldf3+0x2dc>
 402bc14:	0023883a 	mov	r17,zero
 402bc18:	0011883a 	mov	r8,zero
 402bc1c:	01400084 	movi	r5,2
 402bc20:	003f9c06 	br	402ba94 <__alt_data_end+0xfffeba94>
 402bc24:	3446b03a 	or	r3,r6,r17
 402bc28:	18001c26 	beq	r3,zero,402bc9c <__muldf3+0x2cc>
 402bc2c:	8800ce26 	beq	r17,zero,402bf68 <__muldf3+0x598>
 402bc30:	8809883a 	mov	r4,r17
 402bc34:	d9800215 	stw	r6,8(sp)
 402bc38:	da400115 	stw	r9,4(sp)
 402bc3c:	da800015 	stw	r10,0(sp)
 402bc40:	402cbe80 	call	402cbe8 <__clzsi2>
 402bc44:	d9800217 	ldw	r6,8(sp)
 402bc48:	da400117 	ldw	r9,4(sp)
 402bc4c:	da800017 	ldw	r10,0(sp)
 402bc50:	113ffd44 	addi	r4,r2,-11
 402bc54:	00c00704 	movi	r3,28
 402bc58:	1900bf16 	blt	r3,r4,402bf58 <__muldf3+0x588>
 402bc5c:	00c00744 	movi	r3,29
 402bc60:	123ffe04 	addi	r8,r2,-8
 402bc64:	1907c83a 	sub	r3,r3,r4
 402bc68:	8a22983a 	sll	r17,r17,r8
 402bc6c:	30c6d83a 	srl	r3,r6,r3
 402bc70:	3210983a 	sll	r8,r6,r8
 402bc74:	1c62b03a 	or	r17,r3,r17
 402bc78:	1080fcc4 	addi	r2,r2,1011
 402bc7c:	0085c83a 	sub	r2,zero,r2
 402bc80:	000b883a 	mov	r5,zero
 402bc84:	003f8306 	br	402ba94 <__alt_data_end+0xfffeba94>
 402bc88:	b02b883a 	mov	r21,r22
 402bc8c:	0081ffc4 	movi	r2,2047
 402bc90:	000b883a 	mov	r5,zero
 402bc94:	0029883a 	mov	r20,zero
 402bc98:	003fac06 	br	402bb4c <__alt_data_end+0xfffebb4c>
 402bc9c:	0023883a 	mov	r17,zero
 402bca0:	0011883a 	mov	r8,zero
 402bca4:	01400044 	movi	r5,1
 402bca8:	003f7a06 	br	402ba94 <__alt_data_end+0xfffeba94>
 402bcac:	014000c4 	movi	r5,3
 402bcb0:	003f7806 	br	402ba94 <__alt_data_end+0xfffeba94>
 402bcb4:	04c00104 	movi	r19,4
 402bcb8:	0021883a 	mov	r16,zero
 402bcbc:	0029883a 	mov	r20,zero
 402bcc0:	07000044 	movi	fp,1
 402bcc4:	003f6106 	br	402ba4c <__alt_data_end+0xfffeba4c>
 402bcc8:	04c00304 	movi	r19,12
 402bccc:	070000c4 	movi	fp,3
 402bcd0:	003f5e06 	br	402ba4c <__alt_data_end+0xfffeba4c>
 402bcd4:	01400434 	movhi	r5,16
 402bcd8:	002b883a 	mov	r21,zero
 402bcdc:	297fffc4 	addi	r5,r5,-1
 402bce0:	053fffc4 	movi	r20,-1
 402bce4:	0081ffc4 	movi	r2,2047
 402bce8:	003f9806 	br	402bb4c <__alt_data_end+0xfffebb4c>
 402bcec:	8023883a 	mov	r17,r16
 402bcf0:	a011883a 	mov	r8,r20
 402bcf4:	e00b883a 	mov	r5,fp
 402bcf8:	003f8a06 	br	402bb24 <__alt_data_end+0xfffebb24>
 402bcfc:	8023883a 	mov	r17,r16
 402bd00:	a011883a 	mov	r8,r20
 402bd04:	482d883a 	mov	r22,r9
 402bd08:	e00b883a 	mov	r5,fp
 402bd0c:	003f8506 	br	402bb24 <__alt_data_end+0xfffebb24>
 402bd10:	a00ad43a 	srli	r5,r20,16
 402bd14:	401ad43a 	srli	r13,r8,16
 402bd18:	a53fffcc 	andi	r20,r20,65535
 402bd1c:	423fffcc 	andi	r8,r8,65535
 402bd20:	4519383a 	mul	r12,r8,r20
 402bd24:	4147383a 	mul	r3,r8,r5
 402bd28:	6d09383a 	mul	r4,r13,r20
 402bd2c:	600cd43a 	srli	r6,r12,16
 402bd30:	2b5d383a 	mul	r14,r5,r13
 402bd34:	20c9883a 	add	r4,r4,r3
 402bd38:	310d883a 	add	r6,r6,r4
 402bd3c:	30c0022e 	bgeu	r6,r3,402bd48 <__muldf3+0x378>
 402bd40:	00c00074 	movhi	r3,1
 402bd44:	70dd883a 	add	r14,r14,r3
 402bd48:	8826d43a 	srli	r19,r17,16
 402bd4c:	8bffffcc 	andi	r15,r17,65535
 402bd50:	7d23383a 	mul	r17,r15,r20
 402bd54:	7949383a 	mul	r4,r15,r5
 402bd58:	9d29383a 	mul	r20,r19,r20
 402bd5c:	8814d43a 	srli	r10,r17,16
 402bd60:	3012943a 	slli	r9,r6,16
 402bd64:	a129883a 	add	r20,r20,r4
 402bd68:	633fffcc 	andi	r12,r12,65535
 402bd6c:	5515883a 	add	r10,r10,r20
 402bd70:	3006d43a 	srli	r3,r6,16
 402bd74:	4b13883a 	add	r9,r9,r12
 402bd78:	2ccb383a 	mul	r5,r5,r19
 402bd7c:	5100022e 	bgeu	r10,r4,402bd88 <__muldf3+0x3b8>
 402bd80:	01000074 	movhi	r4,1
 402bd84:	290b883a 	add	r5,r5,r4
 402bd88:	802ad43a 	srli	r21,r16,16
 402bd8c:	843fffcc 	andi	r16,r16,65535
 402bd90:	440d383a 	mul	r6,r8,r16
 402bd94:	4565383a 	mul	r18,r8,r21
 402bd98:	8349383a 	mul	r4,r16,r13
 402bd9c:	500e943a 	slli	r7,r10,16
 402bda0:	3010d43a 	srli	r8,r6,16
 402bda4:	5028d43a 	srli	r20,r10,16
 402bda8:	2489883a 	add	r4,r4,r18
 402bdac:	8abfffcc 	andi	r10,r17,65535
 402bdb0:	3a95883a 	add	r10,r7,r10
 402bdb4:	4119883a 	add	r12,r8,r4
 402bdb8:	a169883a 	add	r20,r20,r5
 402bdbc:	1a87883a 	add	r3,r3,r10
 402bdc0:	6d5b383a 	mul	r13,r13,r21
 402bdc4:	6480022e 	bgeu	r12,r18,402bdd0 <__muldf3+0x400>
 402bdc8:	01000074 	movhi	r4,1
 402bdcc:	691b883a 	add	r13,r13,r4
 402bdd0:	7c25383a 	mul	r18,r15,r16
 402bdd4:	7d4b383a 	mul	r5,r15,r21
 402bdd8:	84cf383a 	mul	r7,r16,r19
 402bddc:	901ed43a 	srli	r15,r18,16
 402bde0:	6008d43a 	srli	r4,r12,16
 402bde4:	6010943a 	slli	r8,r12,16
 402bde8:	394f883a 	add	r7,r7,r5
 402bdec:	333fffcc 	andi	r12,r6,65535
 402bdf0:	79df883a 	add	r15,r15,r7
 402bdf4:	235b883a 	add	r13,r4,r13
 402bdf8:	9d63383a 	mul	r17,r19,r21
 402bdfc:	4309883a 	add	r4,r8,r12
 402be00:	7940022e 	bgeu	r15,r5,402be0c <__muldf3+0x43c>
 402be04:	01400074 	movhi	r5,1
 402be08:	8963883a 	add	r17,r17,r5
 402be0c:	780a943a 	slli	r5,r15,16
 402be10:	91bfffcc 	andi	r6,r18,65535
 402be14:	70c7883a 	add	r3,r14,r3
 402be18:	298d883a 	add	r6,r5,r6
 402be1c:	1a8f803a 	cmpltu	r7,r3,r10
 402be20:	350b883a 	add	r5,r6,r20
 402be24:	20c7883a 	add	r3,r4,r3
 402be28:	3955883a 	add	r10,r7,r5
 402be2c:	1909803a 	cmpltu	r4,r3,r4
 402be30:	6a91883a 	add	r8,r13,r10
 402be34:	780cd43a 	srli	r6,r15,16
 402be38:	2219883a 	add	r12,r4,r8
 402be3c:	2d0b803a 	cmpltu	r5,r5,r20
 402be40:	51cf803a 	cmpltu	r7,r10,r7
 402be44:	29ceb03a 	or	r7,r5,r7
 402be48:	4351803a 	cmpltu	r8,r8,r13
 402be4c:	610b803a 	cmpltu	r5,r12,r4
 402be50:	4148b03a 	or	r4,r8,r5
 402be54:	398f883a 	add	r7,r7,r6
 402be58:	3909883a 	add	r4,r7,r4
 402be5c:	1810927a 	slli	r8,r3,9
 402be60:	2449883a 	add	r4,r4,r17
 402be64:	2008927a 	slli	r4,r4,9
 402be68:	6022d5fa 	srli	r17,r12,23
 402be6c:	1806d5fa 	srli	r3,r3,23
 402be70:	4252b03a 	or	r9,r8,r9
 402be74:	600a927a 	slli	r5,r12,9
 402be78:	4810c03a 	cmpne	r8,r9,zero
 402be7c:	2462b03a 	or	r17,r4,r17
 402be80:	40c6b03a 	or	r3,r8,r3
 402be84:	8900402c 	andhi	r4,r17,256
 402be88:	1950b03a 	or	r8,r3,r5
 402be8c:	20000726 	beq	r4,zero,402beac <__muldf3+0x4dc>
 402be90:	4006d07a 	srli	r3,r8,1
 402be94:	880497fa 	slli	r2,r17,31
 402be98:	4200004c 	andi	r8,r8,1
 402be9c:	8822d07a 	srli	r17,r17,1
 402bea0:	1a10b03a 	or	r8,r3,r8
 402bea4:	1210b03a 	or	r8,r2,r8
 402bea8:	5805883a 	mov	r2,r11
 402beac:	1140ffc4 	addi	r5,r2,1023
 402beb0:	0140440e 	bge	zero,r5,402bfc4 <__muldf3+0x5f4>
 402beb4:	40c001cc 	andi	r3,r8,7
 402beb8:	18000726 	beq	r3,zero,402bed8 <__muldf3+0x508>
 402bebc:	40c003cc 	andi	r3,r8,15
 402bec0:	01000104 	movi	r4,4
 402bec4:	19000426 	beq	r3,r4,402bed8 <__muldf3+0x508>
 402bec8:	4107883a 	add	r3,r8,r4
 402becc:	1a11803a 	cmpltu	r8,r3,r8
 402bed0:	8a23883a 	add	r17,r17,r8
 402bed4:	1811883a 	mov	r8,r3
 402bed8:	88c0402c 	andhi	r3,r17,256
 402bedc:	18000426 	beq	r3,zero,402bef0 <__muldf3+0x520>
 402bee0:	11410004 	addi	r5,r2,1024
 402bee4:	00bfc034 	movhi	r2,65280
 402bee8:	10bfffc4 	addi	r2,r2,-1
 402beec:	88a2703a 	and	r17,r17,r2
 402bef0:	0081ff84 	movi	r2,2046
 402bef4:	117f6416 	blt	r2,r5,402bc88 <__alt_data_end+0xfffebc88>
 402bef8:	8828977a 	slli	r20,r17,29
 402befc:	4010d0fa 	srli	r8,r8,3
 402bf00:	8822927a 	slli	r17,r17,9
 402bf04:	2881ffcc 	andi	r2,r5,2047
 402bf08:	a228b03a 	or	r20,r20,r8
 402bf0c:	880ad33a 	srli	r5,r17,12
 402bf10:	b02b883a 	mov	r21,r22
 402bf14:	003f0d06 	br	402bb4c <__alt_data_end+0xfffebb4c>
 402bf18:	8080022c 	andhi	r2,r16,8
 402bf1c:	10000926 	beq	r2,zero,402bf44 <__muldf3+0x574>
 402bf20:	8880022c 	andhi	r2,r17,8
 402bf24:	1000071e 	bne	r2,zero,402bf44 <__muldf3+0x574>
 402bf28:	00800434 	movhi	r2,16
 402bf2c:	89400234 	orhi	r5,r17,8
 402bf30:	10bfffc4 	addi	r2,r2,-1
 402bf34:	b82b883a 	mov	r21,r23
 402bf38:	288a703a 	and	r5,r5,r2
 402bf3c:	4029883a 	mov	r20,r8
 402bf40:	003f6806 	br	402bce4 <__alt_data_end+0xfffebce4>
 402bf44:	00800434 	movhi	r2,16
 402bf48:	81400234 	orhi	r5,r16,8
 402bf4c:	10bfffc4 	addi	r2,r2,-1
 402bf50:	288a703a 	and	r5,r5,r2
 402bf54:	003f6306 	br	402bce4 <__alt_data_end+0xfffebce4>
 402bf58:	147ff604 	addi	r17,r2,-40
 402bf5c:	3462983a 	sll	r17,r6,r17
 402bf60:	0011883a 	mov	r8,zero
 402bf64:	003f4406 	br	402bc78 <__alt_data_end+0xfffebc78>
 402bf68:	3009883a 	mov	r4,r6
 402bf6c:	d9800215 	stw	r6,8(sp)
 402bf70:	da400115 	stw	r9,4(sp)
 402bf74:	da800015 	stw	r10,0(sp)
 402bf78:	402cbe80 	call	402cbe8 <__clzsi2>
 402bf7c:	10800804 	addi	r2,r2,32
 402bf80:	da800017 	ldw	r10,0(sp)
 402bf84:	da400117 	ldw	r9,4(sp)
 402bf88:	d9800217 	ldw	r6,8(sp)
 402bf8c:	003f3006 	br	402bc50 <__alt_data_end+0xfffebc50>
 402bf90:	143ff604 	addi	r16,r2,-40
 402bf94:	9c20983a 	sll	r16,r19,r16
 402bf98:	0029883a 	mov	r20,zero
 402bf9c:	003f1606 	br	402bbf8 <__alt_data_end+0xfffebbf8>
 402bfa0:	d9800215 	stw	r6,8(sp)
 402bfa4:	d9c00015 	stw	r7,0(sp)
 402bfa8:	da400115 	stw	r9,4(sp)
 402bfac:	402cbe80 	call	402cbe8 <__clzsi2>
 402bfb0:	10800804 	addi	r2,r2,32
 402bfb4:	da400117 	ldw	r9,4(sp)
 402bfb8:	d9c00017 	ldw	r7,0(sp)
 402bfbc:	d9800217 	ldw	r6,8(sp)
 402bfc0:	003f0306 	br	402bbd0 <__alt_data_end+0xfffebbd0>
 402bfc4:	00c00044 	movi	r3,1
 402bfc8:	1947c83a 	sub	r3,r3,r5
 402bfcc:	00800e04 	movi	r2,56
 402bfd0:	10feda16 	blt	r2,r3,402bb3c <__alt_data_end+0xfffebb3c>
 402bfd4:	008007c4 	movi	r2,31
 402bfd8:	10c01b16 	blt	r2,r3,402c048 <__muldf3+0x678>
 402bfdc:	00800804 	movi	r2,32
 402bfe0:	10c5c83a 	sub	r2,r2,r3
 402bfe4:	888a983a 	sll	r5,r17,r2
 402bfe8:	40c8d83a 	srl	r4,r8,r3
 402bfec:	4084983a 	sll	r2,r8,r2
 402bff0:	88e2d83a 	srl	r17,r17,r3
 402bff4:	2906b03a 	or	r3,r5,r4
 402bff8:	1004c03a 	cmpne	r2,r2,zero
 402bffc:	1886b03a 	or	r3,r3,r2
 402c000:	188001cc 	andi	r2,r3,7
 402c004:	10000726 	beq	r2,zero,402c024 <__muldf3+0x654>
 402c008:	188003cc 	andi	r2,r3,15
 402c00c:	01000104 	movi	r4,4
 402c010:	11000426 	beq	r2,r4,402c024 <__muldf3+0x654>
 402c014:	1805883a 	mov	r2,r3
 402c018:	10c00104 	addi	r3,r2,4
 402c01c:	1885803a 	cmpltu	r2,r3,r2
 402c020:	88a3883a 	add	r17,r17,r2
 402c024:	8880202c 	andhi	r2,r17,128
 402c028:	10001c26 	beq	r2,zero,402c09c <__muldf3+0x6cc>
 402c02c:	b02b883a 	mov	r21,r22
 402c030:	00800044 	movi	r2,1
 402c034:	000b883a 	mov	r5,zero
 402c038:	0029883a 	mov	r20,zero
 402c03c:	003ec306 	br	402bb4c <__alt_data_end+0xfffebb4c>
 402c040:	5805883a 	mov	r2,r11
 402c044:	003f9906 	br	402beac <__alt_data_end+0xfffebeac>
 402c048:	00bff844 	movi	r2,-31
 402c04c:	1145c83a 	sub	r2,r2,r5
 402c050:	8888d83a 	srl	r4,r17,r2
 402c054:	00800804 	movi	r2,32
 402c058:	18801a26 	beq	r3,r2,402c0c4 <__muldf3+0x6f4>
 402c05c:	00801004 	movi	r2,64
 402c060:	10c5c83a 	sub	r2,r2,r3
 402c064:	8884983a 	sll	r2,r17,r2
 402c068:	1204b03a 	or	r2,r2,r8
 402c06c:	1004c03a 	cmpne	r2,r2,zero
 402c070:	2084b03a 	or	r2,r4,r2
 402c074:	144001cc 	andi	r17,r2,7
 402c078:	88000d1e 	bne	r17,zero,402c0b0 <__muldf3+0x6e0>
 402c07c:	000b883a 	mov	r5,zero
 402c080:	1028d0fa 	srli	r20,r2,3
 402c084:	b02b883a 	mov	r21,r22
 402c088:	0005883a 	mov	r2,zero
 402c08c:	a468b03a 	or	r20,r20,r17
 402c090:	003eae06 	br	402bb4c <__alt_data_end+0xfffebb4c>
 402c094:	1007883a 	mov	r3,r2
 402c098:	0023883a 	mov	r17,zero
 402c09c:	880a927a 	slli	r5,r17,9
 402c0a0:	1805883a 	mov	r2,r3
 402c0a4:	8822977a 	slli	r17,r17,29
 402c0a8:	280ad33a 	srli	r5,r5,12
 402c0ac:	003ff406 	br	402c080 <__alt_data_end+0xfffec080>
 402c0b0:	10c003cc 	andi	r3,r2,15
 402c0b4:	01000104 	movi	r4,4
 402c0b8:	193ff626 	beq	r3,r4,402c094 <__alt_data_end+0xfffec094>
 402c0bc:	0023883a 	mov	r17,zero
 402c0c0:	003fd506 	br	402c018 <__alt_data_end+0xfffec018>
 402c0c4:	0005883a 	mov	r2,zero
 402c0c8:	003fe706 	br	402c068 <__alt_data_end+0xfffec068>
 402c0cc:	00800434 	movhi	r2,16
 402c0d0:	89400234 	orhi	r5,r17,8
 402c0d4:	10bfffc4 	addi	r2,r2,-1
 402c0d8:	b02b883a 	mov	r21,r22
 402c0dc:	288a703a 	and	r5,r5,r2
 402c0e0:	4029883a 	mov	r20,r8
 402c0e4:	003eff06 	br	402bce4 <__alt_data_end+0xfffebce4>

0402c0e8 <__subdf3>:
 402c0e8:	02000434 	movhi	r8,16
 402c0ec:	423fffc4 	addi	r8,r8,-1
 402c0f0:	defffb04 	addi	sp,sp,-20
 402c0f4:	2a14703a 	and	r10,r5,r8
 402c0f8:	3812d53a 	srli	r9,r7,20
 402c0fc:	3a10703a 	and	r8,r7,r8
 402c100:	2006d77a 	srli	r3,r4,29
 402c104:	3004d77a 	srli	r2,r6,29
 402c108:	dc000015 	stw	r16,0(sp)
 402c10c:	501490fa 	slli	r10,r10,3
 402c110:	2820d53a 	srli	r16,r5,20
 402c114:	401090fa 	slli	r8,r8,3
 402c118:	dc800215 	stw	r18,8(sp)
 402c11c:	dc400115 	stw	r17,4(sp)
 402c120:	dfc00415 	stw	ra,16(sp)
 402c124:	202290fa 	slli	r17,r4,3
 402c128:	dcc00315 	stw	r19,12(sp)
 402c12c:	4a41ffcc 	andi	r9,r9,2047
 402c130:	0101ffc4 	movi	r4,2047
 402c134:	2824d7fa 	srli	r18,r5,31
 402c138:	8401ffcc 	andi	r16,r16,2047
 402c13c:	50c6b03a 	or	r3,r10,r3
 402c140:	380ed7fa 	srli	r7,r7,31
 402c144:	408ab03a 	or	r5,r8,r2
 402c148:	300c90fa 	slli	r6,r6,3
 402c14c:	49009626 	beq	r9,r4,402c3a8 <__subdf3+0x2c0>
 402c150:	39c0005c 	xori	r7,r7,1
 402c154:	8245c83a 	sub	r2,r16,r9
 402c158:	3c807426 	beq	r7,r18,402c32c <__subdf3+0x244>
 402c15c:	0080af0e 	bge	zero,r2,402c41c <__subdf3+0x334>
 402c160:	48002a1e 	bne	r9,zero,402c20c <__subdf3+0x124>
 402c164:	2988b03a 	or	r4,r5,r6
 402c168:	20009a1e 	bne	r4,zero,402c3d4 <__subdf3+0x2ec>
 402c16c:	888001cc 	andi	r2,r17,7
 402c170:	10000726 	beq	r2,zero,402c190 <__subdf3+0xa8>
 402c174:	888003cc 	andi	r2,r17,15
 402c178:	01000104 	movi	r4,4
 402c17c:	11000426 	beq	r2,r4,402c190 <__subdf3+0xa8>
 402c180:	890b883a 	add	r5,r17,r4
 402c184:	2c63803a 	cmpltu	r17,r5,r17
 402c188:	1c47883a 	add	r3,r3,r17
 402c18c:	2823883a 	mov	r17,r5
 402c190:	1880202c 	andhi	r2,r3,128
 402c194:	10005926 	beq	r2,zero,402c2fc <__subdf3+0x214>
 402c198:	84000044 	addi	r16,r16,1
 402c19c:	0081ffc4 	movi	r2,2047
 402c1a0:	8080be26 	beq	r16,r2,402c49c <__subdf3+0x3b4>
 402c1a4:	017fe034 	movhi	r5,65408
 402c1a8:	297fffc4 	addi	r5,r5,-1
 402c1ac:	1946703a 	and	r3,r3,r5
 402c1b0:	1804977a 	slli	r2,r3,29
 402c1b4:	1806927a 	slli	r3,r3,9
 402c1b8:	8822d0fa 	srli	r17,r17,3
 402c1bc:	8401ffcc 	andi	r16,r16,2047
 402c1c0:	180ad33a 	srli	r5,r3,12
 402c1c4:	9100004c 	andi	r4,r18,1
 402c1c8:	1444b03a 	or	r2,r2,r17
 402c1cc:	80c1ffcc 	andi	r3,r16,2047
 402c1d0:	1820953a 	slli	r16,r3,20
 402c1d4:	20c03fcc 	andi	r3,r4,255
 402c1d8:	180897fa 	slli	r4,r3,31
 402c1dc:	00c00434 	movhi	r3,16
 402c1e0:	18ffffc4 	addi	r3,r3,-1
 402c1e4:	28c6703a 	and	r3,r5,r3
 402c1e8:	1c06b03a 	or	r3,r3,r16
 402c1ec:	1906b03a 	or	r3,r3,r4
 402c1f0:	dfc00417 	ldw	ra,16(sp)
 402c1f4:	dcc00317 	ldw	r19,12(sp)
 402c1f8:	dc800217 	ldw	r18,8(sp)
 402c1fc:	dc400117 	ldw	r17,4(sp)
 402c200:	dc000017 	ldw	r16,0(sp)
 402c204:	dec00504 	addi	sp,sp,20
 402c208:	f800283a 	ret
 402c20c:	0101ffc4 	movi	r4,2047
 402c210:	813fd626 	beq	r16,r4,402c16c <__alt_data_end+0xfffec16c>
 402c214:	29402034 	orhi	r5,r5,128
 402c218:	01000e04 	movi	r4,56
 402c21c:	2080a316 	blt	r4,r2,402c4ac <__subdf3+0x3c4>
 402c220:	010007c4 	movi	r4,31
 402c224:	2080c616 	blt	r4,r2,402c540 <__subdf3+0x458>
 402c228:	01000804 	movi	r4,32
 402c22c:	2089c83a 	sub	r4,r4,r2
 402c230:	2910983a 	sll	r8,r5,r4
 402c234:	308ed83a 	srl	r7,r6,r2
 402c238:	3108983a 	sll	r4,r6,r4
 402c23c:	2884d83a 	srl	r2,r5,r2
 402c240:	41ccb03a 	or	r6,r8,r7
 402c244:	2008c03a 	cmpne	r4,r4,zero
 402c248:	310cb03a 	or	r6,r6,r4
 402c24c:	898dc83a 	sub	r6,r17,r6
 402c250:	89a3803a 	cmpltu	r17,r17,r6
 402c254:	1887c83a 	sub	r3,r3,r2
 402c258:	1c47c83a 	sub	r3,r3,r17
 402c25c:	3023883a 	mov	r17,r6
 402c260:	1880202c 	andhi	r2,r3,128
 402c264:	10002326 	beq	r2,zero,402c2f4 <__subdf3+0x20c>
 402c268:	04c02034 	movhi	r19,128
 402c26c:	9cffffc4 	addi	r19,r19,-1
 402c270:	1ce6703a 	and	r19,r3,r19
 402c274:	98007a26 	beq	r19,zero,402c460 <__subdf3+0x378>
 402c278:	9809883a 	mov	r4,r19
 402c27c:	402cbe80 	call	402cbe8 <__clzsi2>
 402c280:	113ffe04 	addi	r4,r2,-8
 402c284:	00c007c4 	movi	r3,31
 402c288:	19007b16 	blt	r3,r4,402c478 <__subdf3+0x390>
 402c28c:	00800804 	movi	r2,32
 402c290:	1105c83a 	sub	r2,r2,r4
 402c294:	8884d83a 	srl	r2,r17,r2
 402c298:	9906983a 	sll	r3,r19,r4
 402c29c:	8922983a 	sll	r17,r17,r4
 402c2a0:	10c4b03a 	or	r2,r2,r3
 402c2a4:	24007816 	blt	r4,r16,402c488 <__subdf3+0x3a0>
 402c2a8:	2421c83a 	sub	r16,r4,r16
 402c2ac:	80c00044 	addi	r3,r16,1
 402c2b0:	010007c4 	movi	r4,31
 402c2b4:	20c09516 	blt	r4,r3,402c50c <__subdf3+0x424>
 402c2b8:	01400804 	movi	r5,32
 402c2bc:	28cbc83a 	sub	r5,r5,r3
 402c2c0:	88c8d83a 	srl	r4,r17,r3
 402c2c4:	8962983a 	sll	r17,r17,r5
 402c2c8:	114a983a 	sll	r5,r2,r5
 402c2cc:	10c6d83a 	srl	r3,r2,r3
 402c2d0:	8804c03a 	cmpne	r2,r17,zero
 402c2d4:	290ab03a 	or	r5,r5,r4
 402c2d8:	28a2b03a 	or	r17,r5,r2
 402c2dc:	0021883a 	mov	r16,zero
 402c2e0:	003fa206 	br	402c16c <__alt_data_end+0xfffec16c>
 402c2e4:	2090b03a 	or	r8,r4,r2
 402c2e8:	40018e26 	beq	r8,zero,402c924 <__subdf3+0x83c>
 402c2ec:	1007883a 	mov	r3,r2
 402c2f0:	2023883a 	mov	r17,r4
 402c2f4:	888001cc 	andi	r2,r17,7
 402c2f8:	103f9e1e 	bne	r2,zero,402c174 <__alt_data_end+0xfffec174>
 402c2fc:	1804977a 	slli	r2,r3,29
 402c300:	8822d0fa 	srli	r17,r17,3
 402c304:	1810d0fa 	srli	r8,r3,3
 402c308:	9100004c 	andi	r4,r18,1
 402c30c:	1444b03a 	or	r2,r2,r17
 402c310:	00c1ffc4 	movi	r3,2047
 402c314:	80c02826 	beq	r16,r3,402c3b8 <__subdf3+0x2d0>
 402c318:	01400434 	movhi	r5,16
 402c31c:	297fffc4 	addi	r5,r5,-1
 402c320:	80e0703a 	and	r16,r16,r3
 402c324:	414a703a 	and	r5,r8,r5
 402c328:	003fa806 	br	402c1cc <__alt_data_end+0xfffec1cc>
 402c32c:	0080630e 	bge	zero,r2,402c4bc <__subdf3+0x3d4>
 402c330:	48003026 	beq	r9,zero,402c3f4 <__subdf3+0x30c>
 402c334:	0101ffc4 	movi	r4,2047
 402c338:	813f8c26 	beq	r16,r4,402c16c <__alt_data_end+0xfffec16c>
 402c33c:	29402034 	orhi	r5,r5,128
 402c340:	01000e04 	movi	r4,56
 402c344:	2080a90e 	bge	r4,r2,402c5ec <__subdf3+0x504>
 402c348:	298cb03a 	or	r6,r5,r6
 402c34c:	3012c03a 	cmpne	r9,r6,zero
 402c350:	0005883a 	mov	r2,zero
 402c354:	4c53883a 	add	r9,r9,r17
 402c358:	4c63803a 	cmpltu	r17,r9,r17
 402c35c:	10c7883a 	add	r3,r2,r3
 402c360:	88c7883a 	add	r3,r17,r3
 402c364:	4823883a 	mov	r17,r9
 402c368:	1880202c 	andhi	r2,r3,128
 402c36c:	1000d026 	beq	r2,zero,402c6b0 <__subdf3+0x5c8>
 402c370:	84000044 	addi	r16,r16,1
 402c374:	0081ffc4 	movi	r2,2047
 402c378:	8080fe26 	beq	r16,r2,402c774 <__subdf3+0x68c>
 402c37c:	00bfe034 	movhi	r2,65408
 402c380:	10bfffc4 	addi	r2,r2,-1
 402c384:	1886703a 	and	r3,r3,r2
 402c388:	880ad07a 	srli	r5,r17,1
 402c38c:	180497fa 	slli	r2,r3,31
 402c390:	8900004c 	andi	r4,r17,1
 402c394:	2922b03a 	or	r17,r5,r4
 402c398:	1806d07a 	srli	r3,r3,1
 402c39c:	1462b03a 	or	r17,r2,r17
 402c3a0:	3825883a 	mov	r18,r7
 402c3a4:	003f7106 	br	402c16c <__alt_data_end+0xfffec16c>
 402c3a8:	2984b03a 	or	r2,r5,r6
 402c3ac:	103f6826 	beq	r2,zero,402c150 <__alt_data_end+0xfffec150>
 402c3b0:	39c03fcc 	andi	r7,r7,255
 402c3b4:	003f6706 	br	402c154 <__alt_data_end+0xfffec154>
 402c3b8:	4086b03a 	or	r3,r8,r2
 402c3bc:	18015226 	beq	r3,zero,402c908 <__subdf3+0x820>
 402c3c0:	00c00434 	movhi	r3,16
 402c3c4:	41400234 	orhi	r5,r8,8
 402c3c8:	18ffffc4 	addi	r3,r3,-1
 402c3cc:	28ca703a 	and	r5,r5,r3
 402c3d0:	003f7e06 	br	402c1cc <__alt_data_end+0xfffec1cc>
 402c3d4:	10bfffc4 	addi	r2,r2,-1
 402c3d8:	1000491e 	bne	r2,zero,402c500 <__subdf3+0x418>
 402c3dc:	898fc83a 	sub	r7,r17,r6
 402c3e0:	89e3803a 	cmpltu	r17,r17,r7
 402c3e4:	1947c83a 	sub	r3,r3,r5
 402c3e8:	1c47c83a 	sub	r3,r3,r17
 402c3ec:	3823883a 	mov	r17,r7
 402c3f0:	003f9b06 	br	402c260 <__alt_data_end+0xfffec260>
 402c3f4:	2988b03a 	or	r4,r5,r6
 402c3f8:	203f5c26 	beq	r4,zero,402c16c <__alt_data_end+0xfffec16c>
 402c3fc:	10bfffc4 	addi	r2,r2,-1
 402c400:	1000931e 	bne	r2,zero,402c650 <__subdf3+0x568>
 402c404:	898d883a 	add	r6,r17,r6
 402c408:	3463803a 	cmpltu	r17,r6,r17
 402c40c:	1947883a 	add	r3,r3,r5
 402c410:	88c7883a 	add	r3,r17,r3
 402c414:	3023883a 	mov	r17,r6
 402c418:	003fd306 	br	402c368 <__alt_data_end+0xfffec368>
 402c41c:	1000541e 	bne	r2,zero,402c570 <__subdf3+0x488>
 402c420:	80800044 	addi	r2,r16,1
 402c424:	1081ffcc 	andi	r2,r2,2047
 402c428:	01000044 	movi	r4,1
 402c42c:	2080a20e 	bge	r4,r2,402c6b8 <__subdf3+0x5d0>
 402c430:	8989c83a 	sub	r4,r17,r6
 402c434:	8905803a 	cmpltu	r2,r17,r4
 402c438:	1967c83a 	sub	r19,r3,r5
 402c43c:	98a7c83a 	sub	r19,r19,r2
 402c440:	9880202c 	andhi	r2,r19,128
 402c444:	10006326 	beq	r2,zero,402c5d4 <__subdf3+0x4ec>
 402c448:	3463c83a 	sub	r17,r6,r17
 402c44c:	28c7c83a 	sub	r3,r5,r3
 402c450:	344d803a 	cmpltu	r6,r6,r17
 402c454:	19a7c83a 	sub	r19,r3,r6
 402c458:	3825883a 	mov	r18,r7
 402c45c:	983f861e 	bne	r19,zero,402c278 <__alt_data_end+0xfffec278>
 402c460:	8809883a 	mov	r4,r17
 402c464:	402cbe80 	call	402cbe8 <__clzsi2>
 402c468:	10800804 	addi	r2,r2,32
 402c46c:	113ffe04 	addi	r4,r2,-8
 402c470:	00c007c4 	movi	r3,31
 402c474:	193f850e 	bge	r3,r4,402c28c <__alt_data_end+0xfffec28c>
 402c478:	10bff604 	addi	r2,r2,-40
 402c47c:	8884983a 	sll	r2,r17,r2
 402c480:	0023883a 	mov	r17,zero
 402c484:	243f880e 	bge	r4,r16,402c2a8 <__alt_data_end+0xfffec2a8>
 402c488:	00ffe034 	movhi	r3,65408
 402c48c:	18ffffc4 	addi	r3,r3,-1
 402c490:	8121c83a 	sub	r16,r16,r4
 402c494:	10c6703a 	and	r3,r2,r3
 402c498:	003f3406 	br	402c16c <__alt_data_end+0xfffec16c>
 402c49c:	9100004c 	andi	r4,r18,1
 402c4a0:	000b883a 	mov	r5,zero
 402c4a4:	0005883a 	mov	r2,zero
 402c4a8:	003f4806 	br	402c1cc <__alt_data_end+0xfffec1cc>
 402c4ac:	298cb03a 	or	r6,r5,r6
 402c4b0:	300cc03a 	cmpne	r6,r6,zero
 402c4b4:	0005883a 	mov	r2,zero
 402c4b8:	003f6406 	br	402c24c <__alt_data_end+0xfffec24c>
 402c4bc:	10009a1e 	bne	r2,zero,402c728 <__subdf3+0x640>
 402c4c0:	82400044 	addi	r9,r16,1
 402c4c4:	4881ffcc 	andi	r2,r9,2047
 402c4c8:	02800044 	movi	r10,1
 402c4cc:	5080670e 	bge	r10,r2,402c66c <__subdf3+0x584>
 402c4d0:	0081ffc4 	movi	r2,2047
 402c4d4:	4880af26 	beq	r9,r2,402c794 <__subdf3+0x6ac>
 402c4d8:	898d883a 	add	r6,r17,r6
 402c4dc:	1945883a 	add	r2,r3,r5
 402c4e0:	3447803a 	cmpltu	r3,r6,r17
 402c4e4:	1887883a 	add	r3,r3,r2
 402c4e8:	182297fa 	slli	r17,r3,31
 402c4ec:	300cd07a 	srli	r6,r6,1
 402c4f0:	1806d07a 	srli	r3,r3,1
 402c4f4:	4821883a 	mov	r16,r9
 402c4f8:	89a2b03a 	or	r17,r17,r6
 402c4fc:	003f1b06 	br	402c16c <__alt_data_end+0xfffec16c>
 402c500:	0101ffc4 	movi	r4,2047
 402c504:	813f441e 	bne	r16,r4,402c218 <__alt_data_end+0xfffec218>
 402c508:	003f1806 	br	402c16c <__alt_data_end+0xfffec16c>
 402c50c:	843ff844 	addi	r16,r16,-31
 402c510:	01400804 	movi	r5,32
 402c514:	1408d83a 	srl	r4,r2,r16
 402c518:	19405026 	beq	r3,r5,402c65c <__subdf3+0x574>
 402c51c:	01401004 	movi	r5,64
 402c520:	28c7c83a 	sub	r3,r5,r3
 402c524:	10c4983a 	sll	r2,r2,r3
 402c528:	88a2b03a 	or	r17,r17,r2
 402c52c:	8822c03a 	cmpne	r17,r17,zero
 402c530:	2462b03a 	or	r17,r4,r17
 402c534:	0007883a 	mov	r3,zero
 402c538:	0021883a 	mov	r16,zero
 402c53c:	003f6d06 	br	402c2f4 <__alt_data_end+0xfffec2f4>
 402c540:	11fff804 	addi	r7,r2,-32
 402c544:	01000804 	movi	r4,32
 402c548:	29ced83a 	srl	r7,r5,r7
 402c54c:	11004526 	beq	r2,r4,402c664 <__subdf3+0x57c>
 402c550:	01001004 	movi	r4,64
 402c554:	2089c83a 	sub	r4,r4,r2
 402c558:	2904983a 	sll	r2,r5,r4
 402c55c:	118cb03a 	or	r6,r2,r6
 402c560:	300cc03a 	cmpne	r6,r6,zero
 402c564:	398cb03a 	or	r6,r7,r6
 402c568:	0005883a 	mov	r2,zero
 402c56c:	003f3706 	br	402c24c <__alt_data_end+0xfffec24c>
 402c570:	80002a26 	beq	r16,zero,402c61c <__subdf3+0x534>
 402c574:	0101ffc4 	movi	r4,2047
 402c578:	49006626 	beq	r9,r4,402c714 <__subdf3+0x62c>
 402c57c:	0085c83a 	sub	r2,zero,r2
 402c580:	18c02034 	orhi	r3,r3,128
 402c584:	01000e04 	movi	r4,56
 402c588:	20807e16 	blt	r4,r2,402c784 <__subdf3+0x69c>
 402c58c:	010007c4 	movi	r4,31
 402c590:	2080e716 	blt	r4,r2,402c930 <__subdf3+0x848>
 402c594:	01000804 	movi	r4,32
 402c598:	2089c83a 	sub	r4,r4,r2
 402c59c:	1914983a 	sll	r10,r3,r4
 402c5a0:	8890d83a 	srl	r8,r17,r2
 402c5a4:	8908983a 	sll	r4,r17,r4
 402c5a8:	1884d83a 	srl	r2,r3,r2
 402c5ac:	5222b03a 	or	r17,r10,r8
 402c5b0:	2006c03a 	cmpne	r3,r4,zero
 402c5b4:	88e2b03a 	or	r17,r17,r3
 402c5b8:	3463c83a 	sub	r17,r6,r17
 402c5bc:	2885c83a 	sub	r2,r5,r2
 402c5c0:	344d803a 	cmpltu	r6,r6,r17
 402c5c4:	1187c83a 	sub	r3,r2,r6
 402c5c8:	4821883a 	mov	r16,r9
 402c5cc:	3825883a 	mov	r18,r7
 402c5d0:	003f2306 	br	402c260 <__alt_data_end+0xfffec260>
 402c5d4:	24d0b03a 	or	r8,r4,r19
 402c5d8:	40001b1e 	bne	r8,zero,402c648 <__subdf3+0x560>
 402c5dc:	0005883a 	mov	r2,zero
 402c5e0:	0009883a 	mov	r4,zero
 402c5e4:	0021883a 	mov	r16,zero
 402c5e8:	003f4906 	br	402c310 <__alt_data_end+0xfffec310>
 402c5ec:	010007c4 	movi	r4,31
 402c5f0:	20803a16 	blt	r4,r2,402c6dc <__subdf3+0x5f4>
 402c5f4:	01000804 	movi	r4,32
 402c5f8:	2089c83a 	sub	r4,r4,r2
 402c5fc:	2912983a 	sll	r9,r5,r4
 402c600:	3090d83a 	srl	r8,r6,r2
 402c604:	3108983a 	sll	r4,r6,r4
 402c608:	2884d83a 	srl	r2,r5,r2
 402c60c:	4a12b03a 	or	r9,r9,r8
 402c610:	2008c03a 	cmpne	r4,r4,zero
 402c614:	4912b03a 	or	r9,r9,r4
 402c618:	003f4e06 	br	402c354 <__alt_data_end+0xfffec354>
 402c61c:	1c48b03a 	or	r4,r3,r17
 402c620:	20003c26 	beq	r4,zero,402c714 <__subdf3+0x62c>
 402c624:	0084303a 	nor	r2,zero,r2
 402c628:	1000381e 	bne	r2,zero,402c70c <__subdf3+0x624>
 402c62c:	3463c83a 	sub	r17,r6,r17
 402c630:	28c5c83a 	sub	r2,r5,r3
 402c634:	344d803a 	cmpltu	r6,r6,r17
 402c638:	1187c83a 	sub	r3,r2,r6
 402c63c:	4821883a 	mov	r16,r9
 402c640:	3825883a 	mov	r18,r7
 402c644:	003f0606 	br	402c260 <__alt_data_end+0xfffec260>
 402c648:	2023883a 	mov	r17,r4
 402c64c:	003f0906 	br	402c274 <__alt_data_end+0xfffec274>
 402c650:	0101ffc4 	movi	r4,2047
 402c654:	813f3a1e 	bne	r16,r4,402c340 <__alt_data_end+0xfffec340>
 402c658:	003ec406 	br	402c16c <__alt_data_end+0xfffec16c>
 402c65c:	0005883a 	mov	r2,zero
 402c660:	003fb106 	br	402c528 <__alt_data_end+0xfffec528>
 402c664:	0005883a 	mov	r2,zero
 402c668:	003fbc06 	br	402c55c <__alt_data_end+0xfffec55c>
 402c66c:	1c44b03a 	or	r2,r3,r17
 402c670:	80008e1e 	bne	r16,zero,402c8ac <__subdf3+0x7c4>
 402c674:	1000c826 	beq	r2,zero,402c998 <__subdf3+0x8b0>
 402c678:	2984b03a 	or	r2,r5,r6
 402c67c:	103ebb26 	beq	r2,zero,402c16c <__alt_data_end+0xfffec16c>
 402c680:	8989883a 	add	r4,r17,r6
 402c684:	1945883a 	add	r2,r3,r5
 402c688:	2447803a 	cmpltu	r3,r4,r17
 402c68c:	1887883a 	add	r3,r3,r2
 402c690:	1880202c 	andhi	r2,r3,128
 402c694:	2023883a 	mov	r17,r4
 402c698:	103f1626 	beq	r2,zero,402c2f4 <__alt_data_end+0xfffec2f4>
 402c69c:	00bfe034 	movhi	r2,65408
 402c6a0:	10bfffc4 	addi	r2,r2,-1
 402c6a4:	5021883a 	mov	r16,r10
 402c6a8:	1886703a 	and	r3,r3,r2
 402c6ac:	003eaf06 	br	402c16c <__alt_data_end+0xfffec16c>
 402c6b0:	3825883a 	mov	r18,r7
 402c6b4:	003f0f06 	br	402c2f4 <__alt_data_end+0xfffec2f4>
 402c6b8:	1c44b03a 	or	r2,r3,r17
 402c6bc:	8000251e 	bne	r16,zero,402c754 <__subdf3+0x66c>
 402c6c0:	1000661e 	bne	r2,zero,402c85c <__subdf3+0x774>
 402c6c4:	2990b03a 	or	r8,r5,r6
 402c6c8:	40009626 	beq	r8,zero,402c924 <__subdf3+0x83c>
 402c6cc:	2807883a 	mov	r3,r5
 402c6d0:	3023883a 	mov	r17,r6
 402c6d4:	3825883a 	mov	r18,r7
 402c6d8:	003ea406 	br	402c16c <__alt_data_end+0xfffec16c>
 402c6dc:	127ff804 	addi	r9,r2,-32
 402c6e0:	01000804 	movi	r4,32
 402c6e4:	2a52d83a 	srl	r9,r5,r9
 402c6e8:	11008c26 	beq	r2,r4,402c91c <__subdf3+0x834>
 402c6ec:	01001004 	movi	r4,64
 402c6f0:	2085c83a 	sub	r2,r4,r2
 402c6f4:	2884983a 	sll	r2,r5,r2
 402c6f8:	118cb03a 	or	r6,r2,r6
 402c6fc:	300cc03a 	cmpne	r6,r6,zero
 402c700:	4992b03a 	or	r9,r9,r6
 402c704:	0005883a 	mov	r2,zero
 402c708:	003f1206 	br	402c354 <__alt_data_end+0xfffec354>
 402c70c:	0101ffc4 	movi	r4,2047
 402c710:	493f9c1e 	bne	r9,r4,402c584 <__alt_data_end+0xfffec584>
 402c714:	2807883a 	mov	r3,r5
 402c718:	3023883a 	mov	r17,r6
 402c71c:	4821883a 	mov	r16,r9
 402c720:	3825883a 	mov	r18,r7
 402c724:	003e9106 	br	402c16c <__alt_data_end+0xfffec16c>
 402c728:	80001f1e 	bne	r16,zero,402c7a8 <__subdf3+0x6c0>
 402c72c:	1c48b03a 	or	r4,r3,r17
 402c730:	20005a26 	beq	r4,zero,402c89c <__subdf3+0x7b4>
 402c734:	0084303a 	nor	r2,zero,r2
 402c738:	1000561e 	bne	r2,zero,402c894 <__subdf3+0x7ac>
 402c73c:	89a3883a 	add	r17,r17,r6
 402c740:	1945883a 	add	r2,r3,r5
 402c744:	898d803a 	cmpltu	r6,r17,r6
 402c748:	3087883a 	add	r3,r6,r2
 402c74c:	4821883a 	mov	r16,r9
 402c750:	003f0506 	br	402c368 <__alt_data_end+0xfffec368>
 402c754:	10002b1e 	bne	r2,zero,402c804 <__subdf3+0x71c>
 402c758:	2984b03a 	or	r2,r5,r6
 402c75c:	10008026 	beq	r2,zero,402c960 <__subdf3+0x878>
 402c760:	2807883a 	mov	r3,r5
 402c764:	3023883a 	mov	r17,r6
 402c768:	3825883a 	mov	r18,r7
 402c76c:	0401ffc4 	movi	r16,2047
 402c770:	003e7e06 	br	402c16c <__alt_data_end+0xfffec16c>
 402c774:	3809883a 	mov	r4,r7
 402c778:	0011883a 	mov	r8,zero
 402c77c:	0005883a 	mov	r2,zero
 402c780:	003ee306 	br	402c310 <__alt_data_end+0xfffec310>
 402c784:	1c62b03a 	or	r17,r3,r17
 402c788:	8822c03a 	cmpne	r17,r17,zero
 402c78c:	0005883a 	mov	r2,zero
 402c790:	003f8906 	br	402c5b8 <__alt_data_end+0xfffec5b8>
 402c794:	3809883a 	mov	r4,r7
 402c798:	4821883a 	mov	r16,r9
 402c79c:	0011883a 	mov	r8,zero
 402c7a0:	0005883a 	mov	r2,zero
 402c7a4:	003eda06 	br	402c310 <__alt_data_end+0xfffec310>
 402c7a8:	0101ffc4 	movi	r4,2047
 402c7ac:	49003b26 	beq	r9,r4,402c89c <__subdf3+0x7b4>
 402c7b0:	0085c83a 	sub	r2,zero,r2
 402c7b4:	18c02034 	orhi	r3,r3,128
 402c7b8:	01000e04 	movi	r4,56
 402c7bc:	20806e16 	blt	r4,r2,402c978 <__subdf3+0x890>
 402c7c0:	010007c4 	movi	r4,31
 402c7c4:	20807716 	blt	r4,r2,402c9a4 <__subdf3+0x8bc>
 402c7c8:	01000804 	movi	r4,32
 402c7cc:	2089c83a 	sub	r4,r4,r2
 402c7d0:	1914983a 	sll	r10,r3,r4
 402c7d4:	8890d83a 	srl	r8,r17,r2
 402c7d8:	8908983a 	sll	r4,r17,r4
 402c7dc:	1884d83a 	srl	r2,r3,r2
 402c7e0:	5222b03a 	or	r17,r10,r8
 402c7e4:	2006c03a 	cmpne	r3,r4,zero
 402c7e8:	88e2b03a 	or	r17,r17,r3
 402c7ec:	89a3883a 	add	r17,r17,r6
 402c7f0:	1145883a 	add	r2,r2,r5
 402c7f4:	898d803a 	cmpltu	r6,r17,r6
 402c7f8:	3087883a 	add	r3,r6,r2
 402c7fc:	4821883a 	mov	r16,r9
 402c800:	003ed906 	br	402c368 <__alt_data_end+0xfffec368>
 402c804:	2984b03a 	or	r2,r5,r6
 402c808:	10004226 	beq	r2,zero,402c914 <__subdf3+0x82c>
 402c80c:	1808d0fa 	srli	r4,r3,3
 402c810:	8822d0fa 	srli	r17,r17,3
 402c814:	1806977a 	slli	r3,r3,29
 402c818:	2080022c 	andhi	r2,r4,8
 402c81c:	1c62b03a 	or	r17,r3,r17
 402c820:	10000826 	beq	r2,zero,402c844 <__subdf3+0x75c>
 402c824:	2812d0fa 	srli	r9,r5,3
 402c828:	4880022c 	andhi	r2,r9,8
 402c82c:	1000051e 	bne	r2,zero,402c844 <__subdf3+0x75c>
 402c830:	300cd0fa 	srli	r6,r6,3
 402c834:	2804977a 	slli	r2,r5,29
 402c838:	4809883a 	mov	r4,r9
 402c83c:	3825883a 	mov	r18,r7
 402c840:	11a2b03a 	or	r17,r2,r6
 402c844:	8806d77a 	srli	r3,r17,29
 402c848:	200890fa 	slli	r4,r4,3
 402c84c:	882290fa 	slli	r17,r17,3
 402c850:	0401ffc4 	movi	r16,2047
 402c854:	1906b03a 	or	r3,r3,r4
 402c858:	003e4406 	br	402c16c <__alt_data_end+0xfffec16c>
 402c85c:	2984b03a 	or	r2,r5,r6
 402c860:	103e4226 	beq	r2,zero,402c16c <__alt_data_end+0xfffec16c>
 402c864:	8989c83a 	sub	r4,r17,r6
 402c868:	8911803a 	cmpltu	r8,r17,r4
 402c86c:	1945c83a 	sub	r2,r3,r5
 402c870:	1205c83a 	sub	r2,r2,r8
 402c874:	1200202c 	andhi	r8,r2,128
 402c878:	403e9a26 	beq	r8,zero,402c2e4 <__alt_data_end+0xfffec2e4>
 402c87c:	3463c83a 	sub	r17,r6,r17
 402c880:	28c5c83a 	sub	r2,r5,r3
 402c884:	344d803a 	cmpltu	r6,r6,r17
 402c888:	1187c83a 	sub	r3,r2,r6
 402c88c:	3825883a 	mov	r18,r7
 402c890:	003e3606 	br	402c16c <__alt_data_end+0xfffec16c>
 402c894:	0101ffc4 	movi	r4,2047
 402c898:	493fc71e 	bne	r9,r4,402c7b8 <__alt_data_end+0xfffec7b8>
 402c89c:	2807883a 	mov	r3,r5
 402c8a0:	3023883a 	mov	r17,r6
 402c8a4:	4821883a 	mov	r16,r9
 402c8a8:	003e3006 	br	402c16c <__alt_data_end+0xfffec16c>
 402c8ac:	10003626 	beq	r2,zero,402c988 <__subdf3+0x8a0>
 402c8b0:	2984b03a 	or	r2,r5,r6
 402c8b4:	10001726 	beq	r2,zero,402c914 <__subdf3+0x82c>
 402c8b8:	1808d0fa 	srli	r4,r3,3
 402c8bc:	8822d0fa 	srli	r17,r17,3
 402c8c0:	1806977a 	slli	r3,r3,29
 402c8c4:	2080022c 	andhi	r2,r4,8
 402c8c8:	1c62b03a 	or	r17,r3,r17
 402c8cc:	10000726 	beq	r2,zero,402c8ec <__subdf3+0x804>
 402c8d0:	2812d0fa 	srli	r9,r5,3
 402c8d4:	4880022c 	andhi	r2,r9,8
 402c8d8:	1000041e 	bne	r2,zero,402c8ec <__subdf3+0x804>
 402c8dc:	300cd0fa 	srli	r6,r6,3
 402c8e0:	2804977a 	slli	r2,r5,29
 402c8e4:	4809883a 	mov	r4,r9
 402c8e8:	11a2b03a 	or	r17,r2,r6
 402c8ec:	8806d77a 	srli	r3,r17,29
 402c8f0:	200890fa 	slli	r4,r4,3
 402c8f4:	882290fa 	slli	r17,r17,3
 402c8f8:	3825883a 	mov	r18,r7
 402c8fc:	1906b03a 	or	r3,r3,r4
 402c900:	0401ffc4 	movi	r16,2047
 402c904:	003e1906 	br	402c16c <__alt_data_end+0xfffec16c>
 402c908:	000b883a 	mov	r5,zero
 402c90c:	0005883a 	mov	r2,zero
 402c910:	003e2e06 	br	402c1cc <__alt_data_end+0xfffec1cc>
 402c914:	0401ffc4 	movi	r16,2047
 402c918:	003e1406 	br	402c16c <__alt_data_end+0xfffec16c>
 402c91c:	0005883a 	mov	r2,zero
 402c920:	003f7506 	br	402c6f8 <__alt_data_end+0xfffec6f8>
 402c924:	0005883a 	mov	r2,zero
 402c928:	0009883a 	mov	r4,zero
 402c92c:	003e7806 	br	402c310 <__alt_data_end+0xfffec310>
 402c930:	123ff804 	addi	r8,r2,-32
 402c934:	01000804 	movi	r4,32
 402c938:	1a10d83a 	srl	r8,r3,r8
 402c93c:	11002526 	beq	r2,r4,402c9d4 <__subdf3+0x8ec>
 402c940:	01001004 	movi	r4,64
 402c944:	2085c83a 	sub	r2,r4,r2
 402c948:	1884983a 	sll	r2,r3,r2
 402c94c:	1444b03a 	or	r2,r2,r17
 402c950:	1004c03a 	cmpne	r2,r2,zero
 402c954:	40a2b03a 	or	r17,r8,r2
 402c958:	0005883a 	mov	r2,zero
 402c95c:	003f1606 	br	402c5b8 <__alt_data_end+0xfffec5b8>
 402c960:	02000434 	movhi	r8,16
 402c964:	0009883a 	mov	r4,zero
 402c968:	423fffc4 	addi	r8,r8,-1
 402c96c:	00bfffc4 	movi	r2,-1
 402c970:	0401ffc4 	movi	r16,2047
 402c974:	003e6606 	br	402c310 <__alt_data_end+0xfffec310>
 402c978:	1c62b03a 	or	r17,r3,r17
 402c97c:	8822c03a 	cmpne	r17,r17,zero
 402c980:	0005883a 	mov	r2,zero
 402c984:	003f9906 	br	402c7ec <__alt_data_end+0xfffec7ec>
 402c988:	2807883a 	mov	r3,r5
 402c98c:	3023883a 	mov	r17,r6
 402c990:	0401ffc4 	movi	r16,2047
 402c994:	003df506 	br	402c16c <__alt_data_end+0xfffec16c>
 402c998:	2807883a 	mov	r3,r5
 402c99c:	3023883a 	mov	r17,r6
 402c9a0:	003df206 	br	402c16c <__alt_data_end+0xfffec16c>
 402c9a4:	123ff804 	addi	r8,r2,-32
 402c9a8:	01000804 	movi	r4,32
 402c9ac:	1a10d83a 	srl	r8,r3,r8
 402c9b0:	11000a26 	beq	r2,r4,402c9dc <__subdf3+0x8f4>
 402c9b4:	01001004 	movi	r4,64
 402c9b8:	2085c83a 	sub	r2,r4,r2
 402c9bc:	1884983a 	sll	r2,r3,r2
 402c9c0:	1444b03a 	or	r2,r2,r17
 402c9c4:	1004c03a 	cmpne	r2,r2,zero
 402c9c8:	40a2b03a 	or	r17,r8,r2
 402c9cc:	0005883a 	mov	r2,zero
 402c9d0:	003f8606 	br	402c7ec <__alt_data_end+0xfffec7ec>
 402c9d4:	0005883a 	mov	r2,zero
 402c9d8:	003fdc06 	br	402c94c <__alt_data_end+0xfffec94c>
 402c9dc:	0005883a 	mov	r2,zero
 402c9e0:	003ff706 	br	402c9c0 <__alt_data_end+0xfffec9c0>

0402c9e4 <__fixdfsi>:
 402c9e4:	280cd53a 	srli	r6,r5,20
 402c9e8:	00c00434 	movhi	r3,16
 402c9ec:	18ffffc4 	addi	r3,r3,-1
 402c9f0:	3181ffcc 	andi	r6,r6,2047
 402c9f4:	01c0ff84 	movi	r7,1022
 402c9f8:	28c6703a 	and	r3,r5,r3
 402c9fc:	280ad7fa 	srli	r5,r5,31
 402ca00:	3980120e 	bge	r7,r6,402ca4c <__fixdfsi+0x68>
 402ca04:	00810744 	movi	r2,1053
 402ca08:	11800c16 	blt	r2,r6,402ca3c <__fixdfsi+0x58>
 402ca0c:	00810cc4 	movi	r2,1075
 402ca10:	1185c83a 	sub	r2,r2,r6
 402ca14:	01c007c4 	movi	r7,31
 402ca18:	18c00434 	orhi	r3,r3,16
 402ca1c:	38800d16 	blt	r7,r2,402ca54 <__fixdfsi+0x70>
 402ca20:	31befb44 	addi	r6,r6,-1043
 402ca24:	2084d83a 	srl	r2,r4,r2
 402ca28:	1986983a 	sll	r3,r3,r6
 402ca2c:	1884b03a 	or	r2,r3,r2
 402ca30:	28000726 	beq	r5,zero,402ca50 <__fixdfsi+0x6c>
 402ca34:	0085c83a 	sub	r2,zero,r2
 402ca38:	f800283a 	ret
 402ca3c:	00a00034 	movhi	r2,32768
 402ca40:	10bfffc4 	addi	r2,r2,-1
 402ca44:	2885883a 	add	r2,r5,r2
 402ca48:	f800283a 	ret
 402ca4c:	0005883a 	mov	r2,zero
 402ca50:	f800283a 	ret
 402ca54:	008104c4 	movi	r2,1043
 402ca58:	1185c83a 	sub	r2,r2,r6
 402ca5c:	1884d83a 	srl	r2,r3,r2
 402ca60:	003ff306 	br	402ca30 <__alt_data_end+0xfffeca30>

0402ca64 <__floatsidf>:
 402ca64:	defffd04 	addi	sp,sp,-12
 402ca68:	dfc00215 	stw	ra,8(sp)
 402ca6c:	dc400115 	stw	r17,4(sp)
 402ca70:	dc000015 	stw	r16,0(sp)
 402ca74:	20002b26 	beq	r4,zero,402cb24 <__floatsidf+0xc0>
 402ca78:	2023883a 	mov	r17,r4
 402ca7c:	2020d7fa 	srli	r16,r4,31
 402ca80:	20002d16 	blt	r4,zero,402cb38 <__floatsidf+0xd4>
 402ca84:	8809883a 	mov	r4,r17
 402ca88:	402cbe80 	call	402cbe8 <__clzsi2>
 402ca8c:	01410784 	movi	r5,1054
 402ca90:	288bc83a 	sub	r5,r5,r2
 402ca94:	01010cc4 	movi	r4,1075
 402ca98:	2149c83a 	sub	r4,r4,r5
 402ca9c:	00c007c4 	movi	r3,31
 402caa0:	1900160e 	bge	r3,r4,402cafc <__floatsidf+0x98>
 402caa4:	00c104c4 	movi	r3,1043
 402caa8:	1947c83a 	sub	r3,r3,r5
 402caac:	88c6983a 	sll	r3,r17,r3
 402cab0:	00800434 	movhi	r2,16
 402cab4:	10bfffc4 	addi	r2,r2,-1
 402cab8:	1886703a 	and	r3,r3,r2
 402cabc:	2941ffcc 	andi	r5,r5,2047
 402cac0:	800d883a 	mov	r6,r16
 402cac4:	0005883a 	mov	r2,zero
 402cac8:	280a953a 	slli	r5,r5,20
 402cacc:	31803fcc 	andi	r6,r6,255
 402cad0:	01000434 	movhi	r4,16
 402cad4:	300c97fa 	slli	r6,r6,31
 402cad8:	213fffc4 	addi	r4,r4,-1
 402cadc:	1906703a 	and	r3,r3,r4
 402cae0:	1946b03a 	or	r3,r3,r5
 402cae4:	1986b03a 	or	r3,r3,r6
 402cae8:	dfc00217 	ldw	ra,8(sp)
 402caec:	dc400117 	ldw	r17,4(sp)
 402caf0:	dc000017 	ldw	r16,0(sp)
 402caf4:	dec00304 	addi	sp,sp,12
 402caf8:	f800283a 	ret
 402cafc:	00c002c4 	movi	r3,11
 402cb00:	1887c83a 	sub	r3,r3,r2
 402cb04:	88c6d83a 	srl	r3,r17,r3
 402cb08:	8904983a 	sll	r2,r17,r4
 402cb0c:	01000434 	movhi	r4,16
 402cb10:	213fffc4 	addi	r4,r4,-1
 402cb14:	2941ffcc 	andi	r5,r5,2047
 402cb18:	1906703a 	and	r3,r3,r4
 402cb1c:	800d883a 	mov	r6,r16
 402cb20:	003fe906 	br	402cac8 <__alt_data_end+0xfffecac8>
 402cb24:	000d883a 	mov	r6,zero
 402cb28:	000b883a 	mov	r5,zero
 402cb2c:	0007883a 	mov	r3,zero
 402cb30:	0005883a 	mov	r2,zero
 402cb34:	003fe406 	br	402cac8 <__alt_data_end+0xfffecac8>
 402cb38:	0123c83a 	sub	r17,zero,r4
 402cb3c:	003fd106 	br	402ca84 <__alt_data_end+0xfffeca84>

0402cb40 <__floatunsidf>:
 402cb40:	defffe04 	addi	sp,sp,-8
 402cb44:	dc000015 	stw	r16,0(sp)
 402cb48:	dfc00115 	stw	ra,4(sp)
 402cb4c:	2021883a 	mov	r16,r4
 402cb50:	20002226 	beq	r4,zero,402cbdc <__floatunsidf+0x9c>
 402cb54:	402cbe80 	call	402cbe8 <__clzsi2>
 402cb58:	01010784 	movi	r4,1054
 402cb5c:	2089c83a 	sub	r4,r4,r2
 402cb60:	01810cc4 	movi	r6,1075
 402cb64:	310dc83a 	sub	r6,r6,r4
 402cb68:	00c007c4 	movi	r3,31
 402cb6c:	1980120e 	bge	r3,r6,402cbb8 <__floatunsidf+0x78>
 402cb70:	00c104c4 	movi	r3,1043
 402cb74:	1907c83a 	sub	r3,r3,r4
 402cb78:	80ca983a 	sll	r5,r16,r3
 402cb7c:	00800434 	movhi	r2,16
 402cb80:	10bfffc4 	addi	r2,r2,-1
 402cb84:	2101ffcc 	andi	r4,r4,2047
 402cb88:	0021883a 	mov	r16,zero
 402cb8c:	288a703a 	and	r5,r5,r2
 402cb90:	2008953a 	slli	r4,r4,20
 402cb94:	00c00434 	movhi	r3,16
 402cb98:	18ffffc4 	addi	r3,r3,-1
 402cb9c:	28c6703a 	and	r3,r5,r3
 402cba0:	8005883a 	mov	r2,r16
 402cba4:	1906b03a 	or	r3,r3,r4
 402cba8:	dfc00117 	ldw	ra,4(sp)
 402cbac:	dc000017 	ldw	r16,0(sp)
 402cbb0:	dec00204 	addi	sp,sp,8
 402cbb4:	f800283a 	ret
 402cbb8:	00c002c4 	movi	r3,11
 402cbbc:	188bc83a 	sub	r5,r3,r2
 402cbc0:	814ad83a 	srl	r5,r16,r5
 402cbc4:	00c00434 	movhi	r3,16
 402cbc8:	18ffffc4 	addi	r3,r3,-1
 402cbcc:	81a0983a 	sll	r16,r16,r6
 402cbd0:	2101ffcc 	andi	r4,r4,2047
 402cbd4:	28ca703a 	and	r5,r5,r3
 402cbd8:	003fed06 	br	402cb90 <__alt_data_end+0xfffecb90>
 402cbdc:	0009883a 	mov	r4,zero
 402cbe0:	000b883a 	mov	r5,zero
 402cbe4:	003fea06 	br	402cb90 <__alt_data_end+0xfffecb90>

0402cbe8 <__clzsi2>:
 402cbe8:	00bfffd4 	movui	r2,65535
 402cbec:	11000536 	bltu	r2,r4,402cc04 <__clzsi2+0x1c>
 402cbf0:	00803fc4 	movi	r2,255
 402cbf4:	11000f36 	bltu	r2,r4,402cc34 <__clzsi2+0x4c>
 402cbf8:	00800804 	movi	r2,32
 402cbfc:	0007883a 	mov	r3,zero
 402cc00:	00000506 	br	402cc18 <__clzsi2+0x30>
 402cc04:	00804034 	movhi	r2,256
 402cc08:	10bfffc4 	addi	r2,r2,-1
 402cc0c:	11000c2e 	bgeu	r2,r4,402cc40 <__clzsi2+0x58>
 402cc10:	00800204 	movi	r2,8
 402cc14:	00c00604 	movi	r3,24
 402cc18:	20c8d83a 	srl	r4,r4,r3
 402cc1c:	00c100f4 	movhi	r3,1027
 402cc20:	18c12d04 	addi	r3,r3,1204
 402cc24:	1909883a 	add	r4,r3,r4
 402cc28:	20c00003 	ldbu	r3,0(r4)
 402cc2c:	10c5c83a 	sub	r2,r2,r3
 402cc30:	f800283a 	ret
 402cc34:	00800604 	movi	r2,24
 402cc38:	00c00204 	movi	r3,8
 402cc3c:	003ff606 	br	402cc18 <__alt_data_end+0xfffecc18>
 402cc40:	00800404 	movi	r2,16
 402cc44:	1007883a 	mov	r3,r2
 402cc48:	003ff306 	br	402cc18 <__alt_data_end+0xfffecc18>

0402cc4c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 402cc4c:	defffe04 	addi	sp,sp,-8
 402cc50:	dfc00115 	stw	ra,4(sp)
 402cc54:	df000015 	stw	fp,0(sp)
 402cc58:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 402cc5c:	d0a00b17 	ldw	r2,-32724(gp)
 402cc60:	10000326 	beq	r2,zero,402cc70 <alt_get_errno+0x24>
 402cc64:	d0a00b17 	ldw	r2,-32724(gp)
 402cc68:	103ee83a 	callr	r2
 402cc6c:	00000106 	br	402cc74 <alt_get_errno+0x28>
 402cc70:	d0a71404 	addi	r2,gp,-25520
}
 402cc74:	e037883a 	mov	sp,fp
 402cc78:	dfc00117 	ldw	ra,4(sp)
 402cc7c:	df000017 	ldw	fp,0(sp)
 402cc80:	dec00204 	addi	sp,sp,8
 402cc84:	f800283a 	ret

0402cc88 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 402cc88:	defffb04 	addi	sp,sp,-20
 402cc8c:	dfc00415 	stw	ra,16(sp)
 402cc90:	df000315 	stw	fp,12(sp)
 402cc94:	df000304 	addi	fp,sp,12
 402cc98:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 402cc9c:	e0bfff17 	ldw	r2,-4(fp)
 402cca0:	10000616 	blt	r2,zero,402ccbc <close+0x34>
 402cca4:	e0bfff17 	ldw	r2,-4(fp)
 402cca8:	10c00324 	muli	r3,r2,12
 402ccac:	008100f4 	movhi	r2,1027
 402ccb0:	1083cb04 	addi	r2,r2,3884
 402ccb4:	1885883a 	add	r2,r3,r2
 402ccb8:	00000106 	br	402ccc0 <close+0x38>
 402ccbc:	0005883a 	mov	r2,zero
 402ccc0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 402ccc4:	e0bffd17 	ldw	r2,-12(fp)
 402ccc8:	10001926 	beq	r2,zero,402cd30 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 402cccc:	e0bffd17 	ldw	r2,-12(fp)
 402ccd0:	10800017 	ldw	r2,0(r2)
 402ccd4:	10800417 	ldw	r2,16(r2)
 402ccd8:	10000626 	beq	r2,zero,402ccf4 <close+0x6c>
 402ccdc:	e0bffd17 	ldw	r2,-12(fp)
 402cce0:	10800017 	ldw	r2,0(r2)
 402cce4:	10800417 	ldw	r2,16(r2)
 402cce8:	e13ffd17 	ldw	r4,-12(fp)
 402ccec:	103ee83a 	callr	r2
 402ccf0:	00000106 	br	402ccf8 <close+0x70>
 402ccf4:	0005883a 	mov	r2,zero
 402ccf8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 402ccfc:	e13fff17 	ldw	r4,-4(fp)
 402cd00:	402d3480 	call	402d348 <alt_release_fd>
    if (rval < 0)
 402cd04:	e0bffe17 	ldw	r2,-8(fp)
 402cd08:	1000070e 	bge	r2,zero,402cd28 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 402cd0c:	402cc4c0 	call	402cc4c <alt_get_errno>
 402cd10:	1007883a 	mov	r3,r2
 402cd14:	e0bffe17 	ldw	r2,-8(fp)
 402cd18:	0085c83a 	sub	r2,zero,r2
 402cd1c:	18800015 	stw	r2,0(r3)
      return -1;
 402cd20:	00bfffc4 	movi	r2,-1
 402cd24:	00000706 	br	402cd44 <close+0xbc>
    }
    return 0;
 402cd28:	0005883a 	mov	r2,zero
 402cd2c:	00000506 	br	402cd44 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 402cd30:	402cc4c0 	call	402cc4c <alt_get_errno>
 402cd34:	1007883a 	mov	r3,r2
 402cd38:	00801444 	movi	r2,81
 402cd3c:	18800015 	stw	r2,0(r3)
    return -1;
 402cd40:	00bfffc4 	movi	r2,-1
  }
}
 402cd44:	e037883a 	mov	sp,fp
 402cd48:	dfc00117 	ldw	ra,4(sp)
 402cd4c:	df000017 	ldw	fp,0(sp)
 402cd50:	dec00204 	addi	sp,sp,8
 402cd54:	f800283a 	ret

0402cd58 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 402cd58:	defffc04 	addi	sp,sp,-16
 402cd5c:	df000315 	stw	fp,12(sp)
 402cd60:	df000304 	addi	fp,sp,12
 402cd64:	e13ffd15 	stw	r4,-12(fp)
 402cd68:	e17ffe15 	stw	r5,-8(fp)
 402cd6c:	e1bfff15 	stw	r6,-4(fp)
  return len;
 402cd70:	e0bfff17 	ldw	r2,-4(fp)
}
 402cd74:	e037883a 	mov	sp,fp
 402cd78:	df000017 	ldw	fp,0(sp)
 402cd7c:	dec00104 	addi	sp,sp,4
 402cd80:	f800283a 	ret

0402cd84 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 402cd84:	defffe04 	addi	sp,sp,-8
 402cd88:	dfc00115 	stw	ra,4(sp)
 402cd8c:	df000015 	stw	fp,0(sp)
 402cd90:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 402cd94:	d0a00b17 	ldw	r2,-32724(gp)
 402cd98:	10000326 	beq	r2,zero,402cda8 <alt_get_errno+0x24>
 402cd9c:	d0a00b17 	ldw	r2,-32724(gp)
 402cda0:	103ee83a 	callr	r2
 402cda4:	00000106 	br	402cdac <alt_get_errno+0x28>
 402cda8:	d0a71404 	addi	r2,gp,-25520
}
 402cdac:	e037883a 	mov	sp,fp
 402cdb0:	dfc00117 	ldw	ra,4(sp)
 402cdb4:	df000017 	ldw	fp,0(sp)
 402cdb8:	dec00204 	addi	sp,sp,8
 402cdbc:	f800283a 	ret

0402cdc0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 402cdc0:	defffb04 	addi	sp,sp,-20
 402cdc4:	dfc00415 	stw	ra,16(sp)
 402cdc8:	df000315 	stw	fp,12(sp)
 402cdcc:	df000304 	addi	fp,sp,12
 402cdd0:	e13ffe15 	stw	r4,-8(fp)
 402cdd4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 402cdd8:	e0bffe17 	ldw	r2,-8(fp)
 402cddc:	10000616 	blt	r2,zero,402cdf8 <fstat+0x38>
 402cde0:	e0bffe17 	ldw	r2,-8(fp)
 402cde4:	10c00324 	muli	r3,r2,12
 402cde8:	008100f4 	movhi	r2,1027
 402cdec:	1083cb04 	addi	r2,r2,3884
 402cdf0:	1885883a 	add	r2,r3,r2
 402cdf4:	00000106 	br	402cdfc <fstat+0x3c>
 402cdf8:	0005883a 	mov	r2,zero
 402cdfc:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 402ce00:	e0bffd17 	ldw	r2,-12(fp)
 402ce04:	10001026 	beq	r2,zero,402ce48 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 402ce08:	e0bffd17 	ldw	r2,-12(fp)
 402ce0c:	10800017 	ldw	r2,0(r2)
 402ce10:	10800817 	ldw	r2,32(r2)
 402ce14:	10000726 	beq	r2,zero,402ce34 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 402ce18:	e0bffd17 	ldw	r2,-12(fp)
 402ce1c:	10800017 	ldw	r2,0(r2)
 402ce20:	10800817 	ldw	r2,32(r2)
 402ce24:	e17fff17 	ldw	r5,-4(fp)
 402ce28:	e13ffd17 	ldw	r4,-12(fp)
 402ce2c:	103ee83a 	callr	r2
 402ce30:	00000a06 	br	402ce5c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 402ce34:	e0bfff17 	ldw	r2,-4(fp)
 402ce38:	00c80004 	movi	r3,8192
 402ce3c:	10c00115 	stw	r3,4(r2)
      return 0;
 402ce40:	0005883a 	mov	r2,zero
 402ce44:	00000506 	br	402ce5c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 402ce48:	402cd840 	call	402cd84 <alt_get_errno>
 402ce4c:	1007883a 	mov	r3,r2
 402ce50:	00801444 	movi	r2,81
 402ce54:	18800015 	stw	r2,0(r3)
    return -1;
 402ce58:	00bfffc4 	movi	r2,-1
  }
}
 402ce5c:	e037883a 	mov	sp,fp
 402ce60:	dfc00117 	ldw	ra,4(sp)
 402ce64:	df000017 	ldw	fp,0(sp)
 402ce68:	dec00204 	addi	sp,sp,8
 402ce6c:	f800283a 	ret

0402ce70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 402ce70:	defffe04 	addi	sp,sp,-8
 402ce74:	dfc00115 	stw	ra,4(sp)
 402ce78:	df000015 	stw	fp,0(sp)
 402ce7c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 402ce80:	d0a00b17 	ldw	r2,-32724(gp)
 402ce84:	10000326 	beq	r2,zero,402ce94 <alt_get_errno+0x24>
 402ce88:	d0a00b17 	ldw	r2,-32724(gp)
 402ce8c:	103ee83a 	callr	r2
 402ce90:	00000106 	br	402ce98 <alt_get_errno+0x28>
 402ce94:	d0a71404 	addi	r2,gp,-25520
}
 402ce98:	e037883a 	mov	sp,fp
 402ce9c:	dfc00117 	ldw	ra,4(sp)
 402cea0:	df000017 	ldw	fp,0(sp)
 402cea4:	dec00204 	addi	sp,sp,8
 402cea8:	f800283a 	ret

0402ceac <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 402ceac:	deffed04 	addi	sp,sp,-76
 402ceb0:	dfc01215 	stw	ra,72(sp)
 402ceb4:	df001115 	stw	fp,68(sp)
 402ceb8:	df001104 	addi	fp,sp,68
 402cebc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 402cec0:	e0bfff17 	ldw	r2,-4(fp)
 402cec4:	10000616 	blt	r2,zero,402cee0 <isatty+0x34>
 402cec8:	e0bfff17 	ldw	r2,-4(fp)
 402cecc:	10c00324 	muli	r3,r2,12
 402ced0:	008100f4 	movhi	r2,1027
 402ced4:	1083cb04 	addi	r2,r2,3884
 402ced8:	1885883a 	add	r2,r3,r2
 402cedc:	00000106 	br	402cee4 <isatty+0x38>
 402cee0:	0005883a 	mov	r2,zero
 402cee4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 402cee8:	e0bfef17 	ldw	r2,-68(fp)
 402ceec:	10000e26 	beq	r2,zero,402cf28 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 402cef0:	e0bfef17 	ldw	r2,-68(fp)
 402cef4:	10800017 	ldw	r2,0(r2)
 402cef8:	10800817 	ldw	r2,32(r2)
 402cefc:	1000021e 	bne	r2,zero,402cf08 <isatty+0x5c>
    {
      return 1;
 402cf00:	00800044 	movi	r2,1
 402cf04:	00000d06 	br	402cf3c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 402cf08:	e0bff004 	addi	r2,fp,-64
 402cf0c:	100b883a 	mov	r5,r2
 402cf10:	e13fff17 	ldw	r4,-4(fp)
 402cf14:	402cdc00 	call	402cdc0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 402cf18:	e0bff117 	ldw	r2,-60(fp)
 402cf1c:	10880020 	cmpeqi	r2,r2,8192
 402cf20:	10803fcc 	andi	r2,r2,255
 402cf24:	00000506 	br	402cf3c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 402cf28:	402ce700 	call	402ce70 <alt_get_errno>
 402cf2c:	1007883a 	mov	r3,r2
 402cf30:	00801444 	movi	r2,81
 402cf34:	18800015 	stw	r2,0(r3)
    return 0;
 402cf38:	0005883a 	mov	r2,zero
  }
}
 402cf3c:	e037883a 	mov	sp,fp
 402cf40:	dfc00117 	ldw	ra,4(sp)
 402cf44:	df000017 	ldw	fp,0(sp)
 402cf48:	dec00204 	addi	sp,sp,8
 402cf4c:	f800283a 	ret

0402cf50 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 402cf50:	defffc04 	addi	sp,sp,-16
 402cf54:	df000315 	stw	fp,12(sp)
 402cf58:	df000304 	addi	fp,sp,12
 402cf5c:	e13ffd15 	stw	r4,-12(fp)
 402cf60:	e17ffe15 	stw	r5,-8(fp)
 402cf64:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 402cf68:	e0fffe17 	ldw	r3,-8(fp)
 402cf6c:	e0bffd17 	ldw	r2,-12(fp)
 402cf70:	18800c26 	beq	r3,r2,402cfa4 <alt_load_section+0x54>
  {
    while( to != end )
 402cf74:	00000806 	br	402cf98 <alt_load_section+0x48>
    {
      *to++ = *from++;
 402cf78:	e0bffe17 	ldw	r2,-8(fp)
 402cf7c:	10c00104 	addi	r3,r2,4
 402cf80:	e0fffe15 	stw	r3,-8(fp)
 402cf84:	e0fffd17 	ldw	r3,-12(fp)
 402cf88:	19000104 	addi	r4,r3,4
 402cf8c:	e13ffd15 	stw	r4,-12(fp)
 402cf90:	18c00017 	ldw	r3,0(r3)
 402cf94:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 402cf98:	e0fffe17 	ldw	r3,-8(fp)
 402cf9c:	e0bfff17 	ldw	r2,-4(fp)
 402cfa0:	18bff51e 	bne	r3,r2,402cf78 <__alt_data_end+0xfffecf78>
    {
      *to++ = *from++;
    }
  }
}
 402cfa4:	0001883a 	nop
 402cfa8:	e037883a 	mov	sp,fp
 402cfac:	df000017 	ldw	fp,0(sp)
 402cfb0:	dec00104 	addi	sp,sp,4
 402cfb4:	f800283a 	ret

0402cfb8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 402cfb8:	defffe04 	addi	sp,sp,-8
 402cfbc:	dfc00115 	stw	ra,4(sp)
 402cfc0:	df000015 	stw	fp,0(sp)
 402cfc4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 402cfc8:	018100f4 	movhi	r6,1027
 402cfcc:	31889204 	addi	r6,r6,8776
 402cfd0:	014100f4 	movhi	r5,1027
 402cfd4:	29419804 	addi	r5,r5,1632
 402cfd8:	010100f4 	movhi	r4,1027
 402cfdc:	21089204 	addi	r4,r4,8776
 402cfe0:	402cf500 	call	402cf50 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 402cfe4:	018100b4 	movhi	r6,1026
 402cfe8:	31809104 	addi	r6,r6,580
 402cfec:	014100b4 	movhi	r5,1026
 402cff0:	29400804 	addi	r5,r5,32
 402cff4:	010100b4 	movhi	r4,1026
 402cff8:	21000804 	addi	r4,r4,32
 402cffc:	402cf500 	call	402cf50 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 402d000:	018100f4 	movhi	r6,1027
 402d004:	31819804 	addi	r6,r6,1632
 402d008:	014100f4 	movhi	r5,1027
 402d00c:	2940ac04 	addi	r5,r5,688
 402d010:	010100f4 	movhi	r4,1027
 402d014:	2100ac04 	addi	r4,r4,688
 402d018:	402cf500 	call	402cf50 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 402d01c:	402f19c0 	call	402f19c <alt_dcache_flush_all>
  alt_icache_flush_all();
 402d020:	402f4140 	call	402f414 <alt_icache_flush_all>
}
 402d024:	0001883a 	nop
 402d028:	e037883a 	mov	sp,fp
 402d02c:	dfc00117 	ldw	ra,4(sp)
 402d030:	df000017 	ldw	fp,0(sp)
 402d034:	dec00204 	addi	sp,sp,8
 402d038:	f800283a 	ret

0402d03c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 402d03c:	defffe04 	addi	sp,sp,-8
 402d040:	dfc00115 	stw	ra,4(sp)
 402d044:	df000015 	stw	fp,0(sp)
 402d048:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 402d04c:	d0a00b17 	ldw	r2,-32724(gp)
 402d050:	10000326 	beq	r2,zero,402d060 <alt_get_errno+0x24>
 402d054:	d0a00b17 	ldw	r2,-32724(gp)
 402d058:	103ee83a 	callr	r2
 402d05c:	00000106 	br	402d064 <alt_get_errno+0x28>
 402d060:	d0a71404 	addi	r2,gp,-25520
}
 402d064:	e037883a 	mov	sp,fp
 402d068:	dfc00117 	ldw	ra,4(sp)
 402d06c:	df000017 	ldw	fp,0(sp)
 402d070:	dec00204 	addi	sp,sp,8
 402d074:	f800283a 	ret

0402d078 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 402d078:	defff904 	addi	sp,sp,-28
 402d07c:	dfc00615 	stw	ra,24(sp)
 402d080:	df000515 	stw	fp,20(sp)
 402d084:	df000504 	addi	fp,sp,20
 402d088:	e13ffd15 	stw	r4,-12(fp)
 402d08c:	e17ffe15 	stw	r5,-8(fp)
 402d090:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 402d094:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 402d098:	e0bffd17 	ldw	r2,-12(fp)
 402d09c:	10000616 	blt	r2,zero,402d0b8 <lseek+0x40>
 402d0a0:	e0bffd17 	ldw	r2,-12(fp)
 402d0a4:	10c00324 	muli	r3,r2,12
 402d0a8:	008100f4 	movhi	r2,1027
 402d0ac:	1083cb04 	addi	r2,r2,3884
 402d0b0:	1885883a 	add	r2,r3,r2
 402d0b4:	00000106 	br	402d0bc <lseek+0x44>
 402d0b8:	0005883a 	mov	r2,zero
 402d0bc:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 402d0c0:	e0bffc17 	ldw	r2,-16(fp)
 402d0c4:	10001026 	beq	r2,zero,402d108 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 402d0c8:	e0bffc17 	ldw	r2,-16(fp)
 402d0cc:	10800017 	ldw	r2,0(r2)
 402d0d0:	10800717 	ldw	r2,28(r2)
 402d0d4:	10000926 	beq	r2,zero,402d0fc <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 402d0d8:	e0bffc17 	ldw	r2,-16(fp)
 402d0dc:	10800017 	ldw	r2,0(r2)
 402d0e0:	10800717 	ldw	r2,28(r2)
 402d0e4:	e1bfff17 	ldw	r6,-4(fp)
 402d0e8:	e17ffe17 	ldw	r5,-8(fp)
 402d0ec:	e13ffc17 	ldw	r4,-16(fp)
 402d0f0:	103ee83a 	callr	r2
 402d0f4:	e0bffb15 	stw	r2,-20(fp)
 402d0f8:	00000506 	br	402d110 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 402d0fc:	00bfde84 	movi	r2,-134
 402d100:	e0bffb15 	stw	r2,-20(fp)
 402d104:	00000206 	br	402d110 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 402d108:	00bfebc4 	movi	r2,-81
 402d10c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 402d110:	e0bffb17 	ldw	r2,-20(fp)
 402d114:	1000070e 	bge	r2,zero,402d134 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 402d118:	402d03c0 	call	402d03c <alt_get_errno>
 402d11c:	1007883a 	mov	r3,r2
 402d120:	e0bffb17 	ldw	r2,-20(fp)
 402d124:	0085c83a 	sub	r2,zero,r2
 402d128:	18800015 	stw	r2,0(r3)
    rc = -1;
 402d12c:	00bfffc4 	movi	r2,-1
 402d130:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 402d134:	e0bffb17 	ldw	r2,-20(fp)
}
 402d138:	e037883a 	mov	sp,fp
 402d13c:	dfc00117 	ldw	ra,4(sp)
 402d140:	df000017 	ldw	fp,0(sp)
 402d144:	dec00204 	addi	sp,sp,8
 402d148:	f800283a 	ret

0402d14c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 402d14c:	defffd04 	addi	sp,sp,-12
 402d150:	dfc00215 	stw	ra,8(sp)
 402d154:	df000115 	stw	fp,4(sp)
 402d158:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 402d15c:	0009883a 	mov	r4,zero
 402d160:	402d6980 	call	402d698 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 402d164:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 402d168:	402d6d00 	call	402d6d0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 402d16c:	018100f4 	movhi	r6,1027
 402d170:	31817004 	addi	r6,r6,1472
 402d174:	014100f4 	movhi	r5,1027
 402d178:	29417004 	addi	r5,r5,1472
 402d17c:	010100f4 	movhi	r4,1027
 402d180:	21017004 	addi	r4,r4,1472
 402d184:	402f7ac0 	call	402f7ac <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 402d188:	402f2c40 	call	402f2c4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 402d18c:	010100f4 	movhi	r4,1027
 402d190:	213cc904 	addi	r4,r4,-3292
 402d194:	402ff1c0 	call	402ff1c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 402d198:	d0a71517 	ldw	r2,-25516(gp)
 402d19c:	d0e71617 	ldw	r3,-25512(gp)
 402d1a0:	d1271717 	ldw	r4,-25508(gp)
 402d1a4:	200d883a 	mov	r6,r4
 402d1a8:	180b883a 	mov	r5,r3
 402d1ac:	1009883a 	mov	r4,r2
 402d1b0:	40203b80 	call	40203b8 <main>
 402d1b4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 402d1b8:	01000044 	movi	r4,1
 402d1bc:	402cc880 	call	402cc88 <close>
  exit (result);
 402d1c0:	e13fff17 	ldw	r4,-4(fp)
 402d1c4:	402ff300 	call	402ff30 <exit>

0402d1c8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 402d1c8:	defffe04 	addi	sp,sp,-8
 402d1cc:	df000115 	stw	fp,4(sp)
 402d1d0:	df000104 	addi	fp,sp,4
 402d1d4:	e13fff15 	stw	r4,-4(fp)
}
 402d1d8:	0001883a 	nop
 402d1dc:	e037883a 	mov	sp,fp
 402d1e0:	df000017 	ldw	fp,0(sp)
 402d1e4:	dec00104 	addi	sp,sp,4
 402d1e8:	f800283a 	ret

0402d1ec <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 402d1ec:	defffe04 	addi	sp,sp,-8
 402d1f0:	df000115 	stw	fp,4(sp)
 402d1f4:	df000104 	addi	fp,sp,4
 402d1f8:	e13fff15 	stw	r4,-4(fp)
}
 402d1fc:	0001883a 	nop
 402d200:	e037883a 	mov	sp,fp
 402d204:	df000017 	ldw	fp,0(sp)
 402d208:	dec00104 	addi	sp,sp,4
 402d20c:	f800283a 	ret

0402d210 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 402d210:	defffe04 	addi	sp,sp,-8
 402d214:	dfc00115 	stw	ra,4(sp)
 402d218:	df000015 	stw	fp,0(sp)
 402d21c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 402d220:	d0a00b17 	ldw	r2,-32724(gp)
 402d224:	10000326 	beq	r2,zero,402d234 <alt_get_errno+0x24>
 402d228:	d0a00b17 	ldw	r2,-32724(gp)
 402d22c:	103ee83a 	callr	r2
 402d230:	00000106 	br	402d238 <alt_get_errno+0x28>
 402d234:	d0a71404 	addi	r2,gp,-25520
}
 402d238:	e037883a 	mov	sp,fp
 402d23c:	dfc00117 	ldw	ra,4(sp)
 402d240:	df000017 	ldw	fp,0(sp)
 402d244:	dec00204 	addi	sp,sp,8
 402d248:	f800283a 	ret

0402d24c <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 402d24c:	defff904 	addi	sp,sp,-28
 402d250:	dfc00615 	stw	ra,24(sp)
 402d254:	df000515 	stw	fp,20(sp)
 402d258:	df000504 	addi	fp,sp,20
 402d25c:	e13ffd15 	stw	r4,-12(fp)
 402d260:	e17ffe15 	stw	r5,-8(fp)
 402d264:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 402d268:	e0bffd17 	ldw	r2,-12(fp)
 402d26c:	10000616 	blt	r2,zero,402d288 <read+0x3c>
 402d270:	e0bffd17 	ldw	r2,-12(fp)
 402d274:	10c00324 	muli	r3,r2,12
 402d278:	008100f4 	movhi	r2,1027
 402d27c:	1083cb04 	addi	r2,r2,3884
 402d280:	1885883a 	add	r2,r3,r2
 402d284:	00000106 	br	402d28c <read+0x40>
 402d288:	0005883a 	mov	r2,zero
 402d28c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 402d290:	e0bffb17 	ldw	r2,-20(fp)
 402d294:	10002226 	beq	r2,zero,402d320 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 402d298:	e0bffb17 	ldw	r2,-20(fp)
 402d29c:	10800217 	ldw	r2,8(r2)
 402d2a0:	108000cc 	andi	r2,r2,3
 402d2a4:	10800060 	cmpeqi	r2,r2,1
 402d2a8:	1000181e 	bne	r2,zero,402d30c <read+0xc0>
        (fd->dev->read))
 402d2ac:	e0bffb17 	ldw	r2,-20(fp)
 402d2b0:	10800017 	ldw	r2,0(r2)
 402d2b4:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 402d2b8:	10001426 	beq	r2,zero,402d30c <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 402d2bc:	e0bffb17 	ldw	r2,-20(fp)
 402d2c0:	10800017 	ldw	r2,0(r2)
 402d2c4:	10800517 	ldw	r2,20(r2)
 402d2c8:	e0ffff17 	ldw	r3,-4(fp)
 402d2cc:	180d883a 	mov	r6,r3
 402d2d0:	e17ffe17 	ldw	r5,-8(fp)
 402d2d4:	e13ffb17 	ldw	r4,-20(fp)
 402d2d8:	103ee83a 	callr	r2
 402d2dc:	e0bffc15 	stw	r2,-16(fp)
 402d2e0:	e0bffc17 	ldw	r2,-16(fp)
 402d2e4:	1000070e 	bge	r2,zero,402d304 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 402d2e8:	402d2100 	call	402d210 <alt_get_errno>
 402d2ec:	1007883a 	mov	r3,r2
 402d2f0:	e0bffc17 	ldw	r2,-16(fp)
 402d2f4:	0085c83a 	sub	r2,zero,r2
 402d2f8:	18800015 	stw	r2,0(r3)
          return -1;
 402d2fc:	00bfffc4 	movi	r2,-1
 402d300:	00000c06 	br	402d334 <read+0xe8>
        }
        return rval;
 402d304:	e0bffc17 	ldw	r2,-16(fp)
 402d308:	00000a06 	br	402d334 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 402d30c:	402d2100 	call	402d210 <alt_get_errno>
 402d310:	1007883a 	mov	r3,r2
 402d314:	00800344 	movi	r2,13
 402d318:	18800015 	stw	r2,0(r3)
 402d31c:	00000406 	br	402d330 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 402d320:	402d2100 	call	402d210 <alt_get_errno>
 402d324:	1007883a 	mov	r3,r2
 402d328:	00801444 	movi	r2,81
 402d32c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 402d330:	00bfffc4 	movi	r2,-1
}
 402d334:	e037883a 	mov	sp,fp
 402d338:	dfc00117 	ldw	ra,4(sp)
 402d33c:	df000017 	ldw	fp,0(sp)
 402d340:	dec00204 	addi	sp,sp,8
 402d344:	f800283a 	ret

0402d348 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 402d348:	defffe04 	addi	sp,sp,-8
 402d34c:	df000115 	stw	fp,4(sp)
 402d350:	df000104 	addi	fp,sp,4
 402d354:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 402d358:	e0bfff17 	ldw	r2,-4(fp)
 402d35c:	108000d0 	cmplti	r2,r2,3
 402d360:	10000d1e 	bne	r2,zero,402d398 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 402d364:	008100f4 	movhi	r2,1027
 402d368:	1083cb04 	addi	r2,r2,3884
 402d36c:	e0ffff17 	ldw	r3,-4(fp)
 402d370:	18c00324 	muli	r3,r3,12
 402d374:	10c5883a 	add	r2,r2,r3
 402d378:	10800204 	addi	r2,r2,8
 402d37c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 402d380:	008100f4 	movhi	r2,1027
 402d384:	1083cb04 	addi	r2,r2,3884
 402d388:	e0ffff17 	ldw	r3,-4(fp)
 402d38c:	18c00324 	muli	r3,r3,12
 402d390:	10c5883a 	add	r2,r2,r3
 402d394:	10000015 	stw	zero,0(r2)
  }
}
 402d398:	0001883a 	nop
 402d39c:	e037883a 	mov	sp,fp
 402d3a0:	df000017 	ldw	fp,0(sp)
 402d3a4:	dec00104 	addi	sp,sp,4
 402d3a8:	f800283a 	ret

0402d3ac <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 402d3ac:	defff904 	addi	sp,sp,-28
 402d3b0:	df000615 	stw	fp,24(sp)
 402d3b4:	df000604 	addi	fp,sp,24
 402d3b8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402d3bc:	0005303a 	rdctl	r2,status
 402d3c0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402d3c4:	e0fffe17 	ldw	r3,-8(fp)
 402d3c8:	00bfff84 	movi	r2,-2
 402d3cc:	1884703a 	and	r2,r3,r2
 402d3d0:	1001703a 	wrctl	status,r2
  
  return context;
 402d3d4:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 402d3d8:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 402d3dc:	d0a00c17 	ldw	r2,-32720(gp)
 402d3e0:	10c000c4 	addi	r3,r2,3
 402d3e4:	00bfff04 	movi	r2,-4
 402d3e8:	1884703a 	and	r2,r3,r2
 402d3ec:	d0a00c15 	stw	r2,-32720(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 402d3f0:	d0e00c17 	ldw	r3,-32720(gp)
 402d3f4:	e0bfff17 	ldw	r2,-4(fp)
 402d3f8:	1887883a 	add	r3,r3,r2
 402d3fc:	00810134 	movhi	r2,1028
 402d400:	10800004 	addi	r2,r2,0
 402d404:	10c0062e 	bgeu	r2,r3,402d420 <sbrk+0x74>
 402d408:	e0bffb17 	ldw	r2,-20(fp)
 402d40c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402d410:	e0bffa17 	ldw	r2,-24(fp)
 402d414:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 402d418:	00bfffc4 	movi	r2,-1
 402d41c:	00000b06 	br	402d44c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 402d420:	d0a00c17 	ldw	r2,-32720(gp)
 402d424:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 402d428:	d0e00c17 	ldw	r3,-32720(gp)
 402d42c:	e0bfff17 	ldw	r2,-4(fp)
 402d430:	1885883a 	add	r2,r3,r2
 402d434:	d0a00c15 	stw	r2,-32720(gp)
 402d438:	e0bffb17 	ldw	r2,-20(fp)
 402d43c:	e0bffc15 	stw	r2,-16(fp)
 402d440:	e0bffc17 	ldw	r2,-16(fp)
 402d444:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 402d448:	e0bffd17 	ldw	r2,-12(fp)
} 
 402d44c:	e037883a 	mov	sp,fp
 402d450:	df000017 	ldw	fp,0(sp)
 402d454:	dec00104 	addi	sp,sp,4
 402d458:	f800283a 	ret

0402d45c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 402d45c:	defffd04 	addi	sp,sp,-12
 402d460:	dfc00215 	stw	ra,8(sp)
 402d464:	df000115 	stw	fp,4(sp)
 402d468:	df000104 	addi	fp,sp,4
 402d46c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 402d470:	e13fff17 	ldw	r4,-4(fp)
 402d474:	402f0440 	call	402f044 <alt_busy_sleep>
}
 402d478:	e037883a 	mov	sp,fp
 402d47c:	dfc00117 	ldw	ra,4(sp)
 402d480:	df000017 	ldw	fp,0(sp)
 402d484:	dec00204 	addi	sp,sp,8
 402d488:	f800283a 	ret

0402d48c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 402d48c:	defffe04 	addi	sp,sp,-8
 402d490:	dfc00115 	stw	ra,4(sp)
 402d494:	df000015 	stw	fp,0(sp)
 402d498:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 402d49c:	d0a00b17 	ldw	r2,-32724(gp)
 402d4a0:	10000326 	beq	r2,zero,402d4b0 <alt_get_errno+0x24>
 402d4a4:	d0a00b17 	ldw	r2,-32724(gp)
 402d4a8:	103ee83a 	callr	r2
 402d4ac:	00000106 	br	402d4b4 <alt_get_errno+0x28>
 402d4b0:	d0a71404 	addi	r2,gp,-25520
}
 402d4b4:	e037883a 	mov	sp,fp
 402d4b8:	dfc00117 	ldw	ra,4(sp)
 402d4bc:	df000017 	ldw	fp,0(sp)
 402d4c0:	dec00204 	addi	sp,sp,8
 402d4c4:	f800283a 	ret

0402d4c8 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 402d4c8:	defff904 	addi	sp,sp,-28
 402d4cc:	dfc00615 	stw	ra,24(sp)
 402d4d0:	df000515 	stw	fp,20(sp)
 402d4d4:	df000504 	addi	fp,sp,20
 402d4d8:	e13ffd15 	stw	r4,-12(fp)
 402d4dc:	e17ffe15 	stw	r5,-8(fp)
 402d4e0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 402d4e4:	e0bffd17 	ldw	r2,-12(fp)
 402d4e8:	10000616 	blt	r2,zero,402d504 <write+0x3c>
 402d4ec:	e0bffd17 	ldw	r2,-12(fp)
 402d4f0:	10c00324 	muli	r3,r2,12
 402d4f4:	008100f4 	movhi	r2,1027
 402d4f8:	1083cb04 	addi	r2,r2,3884
 402d4fc:	1885883a 	add	r2,r3,r2
 402d500:	00000106 	br	402d508 <write+0x40>
 402d504:	0005883a 	mov	r2,zero
 402d508:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 402d50c:	e0bffb17 	ldw	r2,-20(fp)
 402d510:	10002126 	beq	r2,zero,402d598 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 402d514:	e0bffb17 	ldw	r2,-20(fp)
 402d518:	10800217 	ldw	r2,8(r2)
 402d51c:	108000cc 	andi	r2,r2,3
 402d520:	10001826 	beq	r2,zero,402d584 <write+0xbc>
 402d524:	e0bffb17 	ldw	r2,-20(fp)
 402d528:	10800017 	ldw	r2,0(r2)
 402d52c:	10800617 	ldw	r2,24(r2)
 402d530:	10001426 	beq	r2,zero,402d584 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 402d534:	e0bffb17 	ldw	r2,-20(fp)
 402d538:	10800017 	ldw	r2,0(r2)
 402d53c:	10800617 	ldw	r2,24(r2)
 402d540:	e0ffff17 	ldw	r3,-4(fp)
 402d544:	180d883a 	mov	r6,r3
 402d548:	e17ffe17 	ldw	r5,-8(fp)
 402d54c:	e13ffb17 	ldw	r4,-20(fp)
 402d550:	103ee83a 	callr	r2
 402d554:	e0bffc15 	stw	r2,-16(fp)
 402d558:	e0bffc17 	ldw	r2,-16(fp)
 402d55c:	1000070e 	bge	r2,zero,402d57c <write+0xb4>
      {
        ALT_ERRNO = -rval;
 402d560:	402d48c0 	call	402d48c <alt_get_errno>
 402d564:	1007883a 	mov	r3,r2
 402d568:	e0bffc17 	ldw	r2,-16(fp)
 402d56c:	0085c83a 	sub	r2,zero,r2
 402d570:	18800015 	stw	r2,0(r3)
        return -1;
 402d574:	00bfffc4 	movi	r2,-1
 402d578:	00000c06 	br	402d5ac <write+0xe4>
      }
      return rval;
 402d57c:	e0bffc17 	ldw	r2,-16(fp)
 402d580:	00000a06 	br	402d5ac <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 402d584:	402d48c0 	call	402d48c <alt_get_errno>
 402d588:	1007883a 	mov	r3,r2
 402d58c:	00800344 	movi	r2,13
 402d590:	18800015 	stw	r2,0(r3)
 402d594:	00000406 	br	402d5a8 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 402d598:	402d48c0 	call	402d48c <alt_get_errno>
 402d59c:	1007883a 	mov	r3,r2
 402d5a0:	00801444 	movi	r2,81
 402d5a4:	18800015 	stw	r2,0(r3)
  }
  return -1;
 402d5a8:	00bfffc4 	movi	r2,-1
}
 402d5ac:	e037883a 	mov	sp,fp
 402d5b0:	dfc00117 	ldw	ra,4(sp)
 402d5b4:	df000017 	ldw	fp,0(sp)
 402d5b8:	dec00204 	addi	sp,sp,8
 402d5bc:	f800283a 	ret

0402d5c0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 402d5c0:	defffd04 	addi	sp,sp,-12
 402d5c4:	dfc00215 	stw	ra,8(sp)
 402d5c8:	df000115 	stw	fp,4(sp)
 402d5cc:	df000104 	addi	fp,sp,4
 402d5d0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 402d5d4:	d1600804 	addi	r5,gp,-32736
 402d5d8:	e13fff17 	ldw	r4,-4(fp)
 402d5dc:	402f2200 	call	402f220 <alt_dev_llist_insert>
}
 402d5e0:	e037883a 	mov	sp,fp
 402d5e4:	dfc00117 	ldw	ra,4(sp)
 402d5e8:	df000017 	ldw	fp,0(sp)
 402d5ec:	dec00204 	addi	sp,sp,8
 402d5f0:	f800283a 	ret

0402d5f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 402d5f4:	defffe04 	addi	sp,sp,-8
 402d5f8:	dfc00115 	stw	ra,4(sp)
 402d5fc:	df000015 	stw	fp,0(sp)
 402d600:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 402d604:	d0a00b17 	ldw	r2,-32724(gp)
 402d608:	10000326 	beq	r2,zero,402d618 <alt_get_errno+0x24>
 402d60c:	d0a00b17 	ldw	r2,-32724(gp)
 402d610:	103ee83a 	callr	r2
 402d614:	00000106 	br	402d61c <alt_get_errno+0x28>
 402d618:	d0a71404 	addi	r2,gp,-25520
}
 402d61c:	e037883a 	mov	sp,fp
 402d620:	dfc00117 	ldw	ra,4(sp)
 402d624:	df000017 	ldw	fp,0(sp)
 402d628:	dec00204 	addi	sp,sp,8
 402d62c:	f800283a 	ret

0402d630 <alt_avalon_mutex_reg>:
/*
 * Register a Mutex device
 */

static ALT_INLINE int alt_avalon_mutex_reg (alt_mutex_dev* dev)
{
 402d630:	defffc04 	addi	sp,sp,-16
 402d634:	dfc00315 	stw	ra,12(sp)
 402d638:	df000215 	stw	fp,8(sp)
 402d63c:	df000204 	addi	fp,sp,8
 402d640:	e13fff15 	stw	r4,-4(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 402d644:	0005883a 	mov	r2,zero
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
 402d648:	e0bffe15 	stw	r2,-8(fp)
  if (!ret_code)
 402d64c:	e0bffe17 	ldw	r2,-8(fp)
 402d650:	1000051e 	bne	r2,zero,402d668 <alt_avalon_mutex_reg+0x38>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
 402d654:	d1600f04 	addi	r5,gp,-32708
 402d658:	e13fff17 	ldw	r4,-4(fp)
 402d65c:	402f2200 	call	402f220 <alt_dev_llist_insert>
 402d660:	e0bffe15 	stw	r2,-8(fp)
 402d664:	00000606 	br	402d680 <alt_avalon_mutex_reg+0x50>
  }
  else
  {
    ALT_ERRNO = ENOMEM;
 402d668:	402d5f40 	call	402d5f4 <alt_get_errno>
 402d66c:	1007883a 	mov	r3,r2
 402d670:	00800304 	movi	r2,12
 402d674:	18800015 	stw	r2,0(r3)
    ret_code = -ENOMEM;
 402d678:	00bffd04 	movi	r2,-12
 402d67c:	e0bffe15 	stw	r2,-8(fp)
  }

  return ret_code;
 402d680:	e0bffe17 	ldw	r2,-8(fp)
}
 402d684:	e037883a 	mov	sp,fp
 402d688:	dfc00117 	ldw	ra,4(sp)
 402d68c:	df000017 	ldw	fp,0(sp)
 402d690:	dec00204 	addi	sp,sp,8
 402d694:	f800283a 	ret

0402d698 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 402d698:	defffd04 	addi	sp,sp,-12
 402d69c:	dfc00215 	stw	ra,8(sp)
 402d6a0:	df000115 	stw	fp,4(sp)
 402d6a4:	df000104 	addi	fp,sp,4
 402d6a8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU_0, cpu_0);
 402d6ac:	402fc200 	call	402fc20 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 402d6b0:	00800044 	movi	r2,1
 402d6b4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 402d6b8:	0001883a 	nop
 402d6bc:	e037883a 	mov	sp,fp
 402d6c0:	dfc00117 	ldw	ra,4(sp)
 402d6c4:	df000017 	ldw	fp,0(sp)
 402d6c8:	dec00204 	addi	sp,sp,8
 402d6cc:	f800283a 	ret

0402d6d0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 402d6d0:	defffe04 	addi	sp,sp,-8
 402d6d4:	dfc00115 	stw	ra,4(sp)
 402d6d8:	df000015 	stw	fp,0(sp)
 402d6dc:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 402d6e0:	01c0fa04 	movi	r7,1000
 402d6e4:	01800084 	movi	r6,2
 402d6e8:	000b883a 	mov	r5,zero
 402d6ec:	01010134 	movhi	r4,1028
 402d6f0:	21041004 	addi	r4,r4,4160
 402d6f4:	402ee9c0 	call	402ee9c <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 402d6f8:	018000c4 	movi	r6,3
 402d6fc:	000b883a 	mov	r5,zero
 402d700:	010100f4 	movhi	r4,1027
 402d704:	21043504 	addi	r4,r4,4308
 402d708:	402d8f40 	call	402d8f4 <altera_avalon_jtag_uart_init>
 402d70c:	010100f4 	movhi	r4,1027
 402d710:	21042b04 	addi	r4,r4,4268
 402d714:	402d5c00 	call	402d5c0 <alt_dev_reg>
    ALTERA_AVALON_MAILBOX_SIMPLE_INIT ( MAILBOX_SIMPLE_0, mailbox_simple_0);
 402d718:	01bfffc4 	movi	r6,-1
 402d71c:	000b883a 	mov	r5,zero
 402d720:	010100f4 	movhi	r4,1027
 402d724:	21084304 	addi	r4,r4,8460
 402d728:	402e4e00 	call	402e4e0 <altera_avalon_mailbox_simple_init>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX_0, mutex_0);
 402d72c:	010100f4 	movhi	r4,1027
 402d730:	21085504 	addi	r4,r4,8532
 402d734:	402d6300 	call	402d630 <alt_avalon_mutex_reg>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX_1, mutex_1);
 402d738:	010100f4 	movhi	r4,1027
 402d73c:	21085904 	addi	r4,r4,8548
 402d740:	402d6300 	call	402d630 <alt_avalon_mutex_reg>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER_0, performance_counter_0);
 402d744:	00c00044 	movi	r3,1
 402d748:	00810134 	movhi	r2,1028
 402d74c:	10840004 	addi	r2,r2,4096
 402d750:	10c00035 	stwio	r3,0(r2)
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( DEBUG_PP, Debug_PP);
 402d754:	010100f4 	movhi	r4,1027
 402d758:	21085d04 	addi	r4,r4,8564
 402d75c:	402d5c00 	call	402d5c0 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PARALLEL_PORT_0, parallel_port_0);
 402d760:	010100f4 	movhi	r4,1027
 402d764:	21086804 	addi	r4,r4,8608
 402d768:	402d5c00 	call	402d5c0 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PARALLEL_PORT_2, parallel_port_2);
 402d76c:	010100f4 	movhi	r4,1027
 402d770:	21087304 	addi	r4,r4,8652
 402d774:	402d5c00 	call	402d5c0 <alt_dev_reg>
}
 402d778:	0001883a 	nop
 402d77c:	e037883a 	mov	sp,fp
 402d780:	dfc00117 	ldw	ra,4(sp)
 402d784:	df000017 	ldw	fp,0(sp)
 402d788:	dec00204 	addi	sp,sp,8
 402d78c:	f800283a 	ret

0402d790 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 402d790:	defffa04 	addi	sp,sp,-24
 402d794:	dfc00515 	stw	ra,20(sp)
 402d798:	df000415 	stw	fp,16(sp)
 402d79c:	df000404 	addi	fp,sp,16
 402d7a0:	e13ffd15 	stw	r4,-12(fp)
 402d7a4:	e17ffe15 	stw	r5,-8(fp)
 402d7a8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 402d7ac:	e0bffd17 	ldw	r2,-12(fp)
 402d7b0:	10800017 	ldw	r2,0(r2)
 402d7b4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 402d7b8:	e0bffc17 	ldw	r2,-16(fp)
 402d7bc:	10c00a04 	addi	r3,r2,40
 402d7c0:	e0bffd17 	ldw	r2,-12(fp)
 402d7c4:	10800217 	ldw	r2,8(r2)
 402d7c8:	100f883a 	mov	r7,r2
 402d7cc:	e1bfff17 	ldw	r6,-4(fp)
 402d7d0:	e17ffe17 	ldw	r5,-8(fp)
 402d7d4:	1809883a 	mov	r4,r3
 402d7d8:	402ddb80 	call	402ddb8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 402d7dc:	e037883a 	mov	sp,fp
 402d7e0:	dfc00117 	ldw	ra,4(sp)
 402d7e4:	df000017 	ldw	fp,0(sp)
 402d7e8:	dec00204 	addi	sp,sp,8
 402d7ec:	f800283a 	ret

0402d7f0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 402d7f0:	defffa04 	addi	sp,sp,-24
 402d7f4:	dfc00515 	stw	ra,20(sp)
 402d7f8:	df000415 	stw	fp,16(sp)
 402d7fc:	df000404 	addi	fp,sp,16
 402d800:	e13ffd15 	stw	r4,-12(fp)
 402d804:	e17ffe15 	stw	r5,-8(fp)
 402d808:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 402d80c:	e0bffd17 	ldw	r2,-12(fp)
 402d810:	10800017 	ldw	r2,0(r2)
 402d814:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 402d818:	e0bffc17 	ldw	r2,-16(fp)
 402d81c:	10c00a04 	addi	r3,r2,40
 402d820:	e0bffd17 	ldw	r2,-12(fp)
 402d824:	10800217 	ldw	r2,8(r2)
 402d828:	100f883a 	mov	r7,r2
 402d82c:	e1bfff17 	ldw	r6,-4(fp)
 402d830:	e17ffe17 	ldw	r5,-8(fp)
 402d834:	1809883a 	mov	r4,r3
 402d838:	402dfd40 	call	402dfd4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 402d83c:	e037883a 	mov	sp,fp
 402d840:	dfc00117 	ldw	ra,4(sp)
 402d844:	df000017 	ldw	fp,0(sp)
 402d848:	dec00204 	addi	sp,sp,8
 402d84c:	f800283a 	ret

0402d850 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 402d850:	defffc04 	addi	sp,sp,-16
 402d854:	dfc00315 	stw	ra,12(sp)
 402d858:	df000215 	stw	fp,8(sp)
 402d85c:	df000204 	addi	fp,sp,8
 402d860:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 402d864:	e0bfff17 	ldw	r2,-4(fp)
 402d868:	10800017 	ldw	r2,0(r2)
 402d86c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 402d870:	e0bffe17 	ldw	r2,-8(fp)
 402d874:	10c00a04 	addi	r3,r2,40
 402d878:	e0bfff17 	ldw	r2,-4(fp)
 402d87c:	10800217 	ldw	r2,8(r2)
 402d880:	100b883a 	mov	r5,r2
 402d884:	1809883a 	mov	r4,r3
 402d888:	402dc600 	call	402dc60 <altera_avalon_jtag_uart_close>
}
 402d88c:	e037883a 	mov	sp,fp
 402d890:	dfc00117 	ldw	ra,4(sp)
 402d894:	df000017 	ldw	fp,0(sp)
 402d898:	dec00204 	addi	sp,sp,8
 402d89c:	f800283a 	ret

0402d8a0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 402d8a0:	defffa04 	addi	sp,sp,-24
 402d8a4:	dfc00515 	stw	ra,20(sp)
 402d8a8:	df000415 	stw	fp,16(sp)
 402d8ac:	df000404 	addi	fp,sp,16
 402d8b0:	e13ffd15 	stw	r4,-12(fp)
 402d8b4:	e17ffe15 	stw	r5,-8(fp)
 402d8b8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 402d8bc:	e0bffd17 	ldw	r2,-12(fp)
 402d8c0:	10800017 	ldw	r2,0(r2)
 402d8c4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 402d8c8:	e0bffc17 	ldw	r2,-16(fp)
 402d8cc:	10800a04 	addi	r2,r2,40
 402d8d0:	e1bfff17 	ldw	r6,-4(fp)
 402d8d4:	e17ffe17 	ldw	r5,-8(fp)
 402d8d8:	1009883a 	mov	r4,r2
 402d8dc:	402dcc80 	call	402dcc8 <altera_avalon_jtag_uart_ioctl>
}
 402d8e0:	e037883a 	mov	sp,fp
 402d8e4:	dfc00117 	ldw	ra,4(sp)
 402d8e8:	df000017 	ldw	fp,0(sp)
 402d8ec:	dec00204 	addi	sp,sp,8
 402d8f0:	f800283a 	ret

0402d8f4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 402d8f4:	defffa04 	addi	sp,sp,-24
 402d8f8:	dfc00515 	stw	ra,20(sp)
 402d8fc:	df000415 	stw	fp,16(sp)
 402d900:	df000404 	addi	fp,sp,16
 402d904:	e13ffd15 	stw	r4,-12(fp)
 402d908:	e17ffe15 	stw	r5,-8(fp)
 402d90c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 402d910:	e0bffd17 	ldw	r2,-12(fp)
 402d914:	00c00044 	movi	r3,1
 402d918:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 402d91c:	e0bffd17 	ldw	r2,-12(fp)
 402d920:	10800017 	ldw	r2,0(r2)
 402d924:	10800104 	addi	r2,r2,4
 402d928:	1007883a 	mov	r3,r2
 402d92c:	e0bffd17 	ldw	r2,-12(fp)
 402d930:	10800817 	ldw	r2,32(r2)
 402d934:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 402d938:	e0bffe17 	ldw	r2,-8(fp)
 402d93c:	e0ffff17 	ldw	r3,-4(fp)
 402d940:	d8000015 	stw	zero,0(sp)
 402d944:	e1fffd17 	ldw	r7,-12(fp)
 402d948:	018100f4 	movhi	r6,1027
 402d94c:	31b66d04 	addi	r6,r6,-9804
 402d950:	180b883a 	mov	r5,r3
 402d954:	1009883a 	mov	r4,r2
 402d958:	402f4480 	call	402f448 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 402d95c:	e0bffd17 	ldw	r2,-12(fp)
 402d960:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 402d964:	e0bffd17 	ldw	r2,-12(fp)
 402d968:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 402d96c:	d0e71917 	ldw	r3,-25500(gp)
 402d970:	e1fffd17 	ldw	r7,-12(fp)
 402d974:	018100f4 	movhi	r6,1027
 402d978:	31b6f004 	addi	r6,r6,-9280
 402d97c:	180b883a 	mov	r5,r3
 402d980:	1009883a 	mov	r4,r2
 402d984:	402ef180 	call	402ef18 <alt_alarm_start>
 402d988:	1000040e 	bge	r2,zero,402d99c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 402d98c:	e0fffd17 	ldw	r3,-12(fp)
 402d990:	00a00034 	movhi	r2,32768
 402d994:	10bfffc4 	addi	r2,r2,-1
 402d998:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 402d99c:	0001883a 	nop
 402d9a0:	e037883a 	mov	sp,fp
 402d9a4:	dfc00117 	ldw	ra,4(sp)
 402d9a8:	df000017 	ldw	fp,0(sp)
 402d9ac:	dec00204 	addi	sp,sp,8
 402d9b0:	f800283a 	ret

0402d9b4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 402d9b4:	defff804 	addi	sp,sp,-32
 402d9b8:	df000715 	stw	fp,28(sp)
 402d9bc:	df000704 	addi	fp,sp,28
 402d9c0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 402d9c4:	e0bfff17 	ldw	r2,-4(fp)
 402d9c8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 402d9cc:	e0bffb17 	ldw	r2,-20(fp)
 402d9d0:	10800017 	ldw	r2,0(r2)
 402d9d4:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 402d9d8:	e0bffc17 	ldw	r2,-16(fp)
 402d9dc:	10800104 	addi	r2,r2,4
 402d9e0:	10800037 	ldwio	r2,0(r2)
 402d9e4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 402d9e8:	e0bffd17 	ldw	r2,-12(fp)
 402d9ec:	1080c00c 	andi	r2,r2,768
 402d9f0:	10006d26 	beq	r2,zero,402dba8 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 402d9f4:	e0bffd17 	ldw	r2,-12(fp)
 402d9f8:	1080400c 	andi	r2,r2,256
 402d9fc:	10003526 	beq	r2,zero,402dad4 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 402da00:	00800074 	movhi	r2,1
 402da04:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 402da08:	e0bffb17 	ldw	r2,-20(fp)
 402da0c:	10800a17 	ldw	r2,40(r2)
 402da10:	10800044 	addi	r2,r2,1
 402da14:	1081ffcc 	andi	r2,r2,2047
 402da18:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 402da1c:	e0bffb17 	ldw	r2,-20(fp)
 402da20:	10c00b17 	ldw	r3,44(r2)
 402da24:	e0bffe17 	ldw	r2,-8(fp)
 402da28:	18801526 	beq	r3,r2,402da80 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 402da2c:	e0bffc17 	ldw	r2,-16(fp)
 402da30:	10800037 	ldwio	r2,0(r2)
 402da34:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 402da38:	e0bff917 	ldw	r2,-28(fp)
 402da3c:	10a0000c 	andi	r2,r2,32768
 402da40:	10001126 	beq	r2,zero,402da88 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 402da44:	e0bffb17 	ldw	r2,-20(fp)
 402da48:	10800a17 	ldw	r2,40(r2)
 402da4c:	e0fff917 	ldw	r3,-28(fp)
 402da50:	1809883a 	mov	r4,r3
 402da54:	e0fffb17 	ldw	r3,-20(fp)
 402da58:	1885883a 	add	r2,r3,r2
 402da5c:	10800e04 	addi	r2,r2,56
 402da60:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 402da64:	e0bffb17 	ldw	r2,-20(fp)
 402da68:	10800a17 	ldw	r2,40(r2)
 402da6c:	10800044 	addi	r2,r2,1
 402da70:	10c1ffcc 	andi	r3,r2,2047
 402da74:	e0bffb17 	ldw	r2,-20(fp)
 402da78:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 402da7c:	003fe206 	br	402da08 <__alt_data_end+0xfffeda08>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 402da80:	0001883a 	nop
 402da84:	00000106 	br	402da8c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 402da88:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 402da8c:	e0bff917 	ldw	r2,-28(fp)
 402da90:	10bfffec 	andhi	r2,r2,65535
 402da94:	10000f26 	beq	r2,zero,402dad4 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 402da98:	e0bffb17 	ldw	r2,-20(fp)
 402da9c:	10c00817 	ldw	r3,32(r2)
 402daa0:	00bfff84 	movi	r2,-2
 402daa4:	1886703a 	and	r3,r3,r2
 402daa8:	e0bffb17 	ldw	r2,-20(fp)
 402daac:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 402dab0:	e0bffc17 	ldw	r2,-16(fp)
 402dab4:	10800104 	addi	r2,r2,4
 402dab8:	1007883a 	mov	r3,r2
 402dabc:	e0bffb17 	ldw	r2,-20(fp)
 402dac0:	10800817 	ldw	r2,32(r2)
 402dac4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 402dac8:	e0bffc17 	ldw	r2,-16(fp)
 402dacc:	10800104 	addi	r2,r2,4
 402dad0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 402dad4:	e0bffd17 	ldw	r2,-12(fp)
 402dad8:	1080800c 	andi	r2,r2,512
 402dadc:	103fbe26 	beq	r2,zero,402d9d8 <__alt_data_end+0xfffed9d8>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 402dae0:	e0bffd17 	ldw	r2,-12(fp)
 402dae4:	1004d43a 	srli	r2,r2,16
 402dae8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 402daec:	00001406 	br	402db40 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 402daf0:	e0bffc17 	ldw	r2,-16(fp)
 402daf4:	e0fffb17 	ldw	r3,-20(fp)
 402daf8:	18c00d17 	ldw	r3,52(r3)
 402dafc:	e13ffb17 	ldw	r4,-20(fp)
 402db00:	20c7883a 	add	r3,r4,r3
 402db04:	18c20e04 	addi	r3,r3,2104
 402db08:	18c00003 	ldbu	r3,0(r3)
 402db0c:	18c03fcc 	andi	r3,r3,255
 402db10:	18c0201c 	xori	r3,r3,128
 402db14:	18ffe004 	addi	r3,r3,-128
 402db18:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 402db1c:	e0bffb17 	ldw	r2,-20(fp)
 402db20:	10800d17 	ldw	r2,52(r2)
 402db24:	10800044 	addi	r2,r2,1
 402db28:	10c1ffcc 	andi	r3,r2,2047
 402db2c:	e0bffb17 	ldw	r2,-20(fp)
 402db30:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 402db34:	e0bffa17 	ldw	r2,-24(fp)
 402db38:	10bfffc4 	addi	r2,r2,-1
 402db3c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 402db40:	e0bffa17 	ldw	r2,-24(fp)
 402db44:	10000526 	beq	r2,zero,402db5c <altera_avalon_jtag_uart_irq+0x1a8>
 402db48:	e0bffb17 	ldw	r2,-20(fp)
 402db4c:	10c00d17 	ldw	r3,52(r2)
 402db50:	e0bffb17 	ldw	r2,-20(fp)
 402db54:	10800c17 	ldw	r2,48(r2)
 402db58:	18bfe51e 	bne	r3,r2,402daf0 <__alt_data_end+0xfffedaf0>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 402db5c:	e0bffa17 	ldw	r2,-24(fp)
 402db60:	103f9d26 	beq	r2,zero,402d9d8 <__alt_data_end+0xfffed9d8>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 402db64:	e0bffb17 	ldw	r2,-20(fp)
 402db68:	10c00817 	ldw	r3,32(r2)
 402db6c:	00bfff44 	movi	r2,-3
 402db70:	1886703a 	and	r3,r3,r2
 402db74:	e0bffb17 	ldw	r2,-20(fp)
 402db78:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 402db7c:	e0bffb17 	ldw	r2,-20(fp)
 402db80:	10800017 	ldw	r2,0(r2)
 402db84:	10800104 	addi	r2,r2,4
 402db88:	1007883a 	mov	r3,r2
 402db8c:	e0bffb17 	ldw	r2,-20(fp)
 402db90:	10800817 	ldw	r2,32(r2)
 402db94:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 402db98:	e0bffc17 	ldw	r2,-16(fp)
 402db9c:	10800104 	addi	r2,r2,4
 402dba0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 402dba4:	003f8c06 	br	402d9d8 <__alt_data_end+0xfffed9d8>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 402dba8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 402dbac:	0001883a 	nop
 402dbb0:	e037883a 	mov	sp,fp
 402dbb4:	df000017 	ldw	fp,0(sp)
 402dbb8:	dec00104 	addi	sp,sp,4
 402dbbc:	f800283a 	ret

0402dbc0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 402dbc0:	defff804 	addi	sp,sp,-32
 402dbc4:	df000715 	stw	fp,28(sp)
 402dbc8:	df000704 	addi	fp,sp,28
 402dbcc:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 402dbd0:	e0bffb17 	ldw	r2,-20(fp)
 402dbd4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 402dbd8:	e0bff917 	ldw	r2,-28(fp)
 402dbdc:	10800017 	ldw	r2,0(r2)
 402dbe0:	10800104 	addi	r2,r2,4
 402dbe4:	10800037 	ldwio	r2,0(r2)
 402dbe8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 402dbec:	e0bffa17 	ldw	r2,-24(fp)
 402dbf0:	1081000c 	andi	r2,r2,1024
 402dbf4:	10000b26 	beq	r2,zero,402dc24 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 402dbf8:	e0bff917 	ldw	r2,-28(fp)
 402dbfc:	10800017 	ldw	r2,0(r2)
 402dc00:	10800104 	addi	r2,r2,4
 402dc04:	1007883a 	mov	r3,r2
 402dc08:	e0bff917 	ldw	r2,-28(fp)
 402dc0c:	10800817 	ldw	r2,32(r2)
 402dc10:	10810014 	ori	r2,r2,1024
 402dc14:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 402dc18:	e0bff917 	ldw	r2,-28(fp)
 402dc1c:	10000915 	stw	zero,36(r2)
 402dc20:	00000a06 	br	402dc4c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 402dc24:	e0bff917 	ldw	r2,-28(fp)
 402dc28:	10c00917 	ldw	r3,36(r2)
 402dc2c:	00a00034 	movhi	r2,32768
 402dc30:	10bfff04 	addi	r2,r2,-4
 402dc34:	10c00536 	bltu	r2,r3,402dc4c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 402dc38:	e0bff917 	ldw	r2,-28(fp)
 402dc3c:	10800917 	ldw	r2,36(r2)
 402dc40:	10c00044 	addi	r3,r2,1
 402dc44:	e0bff917 	ldw	r2,-28(fp)
 402dc48:	10c00915 	stw	r3,36(r2)
 402dc4c:	d0a71917 	ldw	r2,-25500(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 402dc50:	e037883a 	mov	sp,fp
 402dc54:	df000017 	ldw	fp,0(sp)
 402dc58:	dec00104 	addi	sp,sp,4
 402dc5c:	f800283a 	ret

0402dc60 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 402dc60:	defffd04 	addi	sp,sp,-12
 402dc64:	df000215 	stw	fp,8(sp)
 402dc68:	df000204 	addi	fp,sp,8
 402dc6c:	e13ffe15 	stw	r4,-8(fp)
 402dc70:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 402dc74:	00000506 	br	402dc8c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 402dc78:	e0bfff17 	ldw	r2,-4(fp)
 402dc7c:	1090000c 	andi	r2,r2,16384
 402dc80:	10000226 	beq	r2,zero,402dc8c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 402dc84:	00bffd44 	movi	r2,-11
 402dc88:	00000b06 	br	402dcb8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 402dc8c:	e0bffe17 	ldw	r2,-8(fp)
 402dc90:	10c00d17 	ldw	r3,52(r2)
 402dc94:	e0bffe17 	ldw	r2,-8(fp)
 402dc98:	10800c17 	ldw	r2,48(r2)
 402dc9c:	18800526 	beq	r3,r2,402dcb4 <altera_avalon_jtag_uart_close+0x54>
 402dca0:	e0bffe17 	ldw	r2,-8(fp)
 402dca4:	10c00917 	ldw	r3,36(r2)
 402dca8:	e0bffe17 	ldw	r2,-8(fp)
 402dcac:	10800117 	ldw	r2,4(r2)
 402dcb0:	18bff136 	bltu	r3,r2,402dc78 <__alt_data_end+0xfffedc78>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 402dcb4:	0005883a 	mov	r2,zero
}
 402dcb8:	e037883a 	mov	sp,fp
 402dcbc:	df000017 	ldw	fp,0(sp)
 402dcc0:	dec00104 	addi	sp,sp,4
 402dcc4:	f800283a 	ret

0402dcc8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 402dcc8:	defffa04 	addi	sp,sp,-24
 402dccc:	df000515 	stw	fp,20(sp)
 402dcd0:	df000504 	addi	fp,sp,20
 402dcd4:	e13ffd15 	stw	r4,-12(fp)
 402dcd8:	e17ffe15 	stw	r5,-8(fp)
 402dcdc:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 402dce0:	00bff9c4 	movi	r2,-25
 402dce4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 402dce8:	e0bffe17 	ldw	r2,-8(fp)
 402dcec:	10da8060 	cmpeqi	r3,r2,27137
 402dcf0:	1800031e 	bne	r3,zero,402dd00 <altera_avalon_jtag_uart_ioctl+0x38>
 402dcf4:	109a80a0 	cmpeqi	r2,r2,27138
 402dcf8:	1000181e 	bne	r2,zero,402dd5c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 402dcfc:	00002906 	br	402dda4 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 402dd00:	e0bffd17 	ldw	r2,-12(fp)
 402dd04:	10c00117 	ldw	r3,4(r2)
 402dd08:	00a00034 	movhi	r2,32768
 402dd0c:	10bfffc4 	addi	r2,r2,-1
 402dd10:	18802126 	beq	r3,r2,402dd98 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 402dd14:	e0bfff17 	ldw	r2,-4(fp)
 402dd18:	10800017 	ldw	r2,0(r2)
 402dd1c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 402dd20:	e0bffc17 	ldw	r2,-16(fp)
 402dd24:	10800090 	cmplti	r2,r2,2
 402dd28:	1000061e 	bne	r2,zero,402dd44 <altera_avalon_jtag_uart_ioctl+0x7c>
 402dd2c:	e0fffc17 	ldw	r3,-16(fp)
 402dd30:	00a00034 	movhi	r2,32768
 402dd34:	10bfffc4 	addi	r2,r2,-1
 402dd38:	18800226 	beq	r3,r2,402dd44 <altera_avalon_jtag_uart_ioctl+0x7c>
 402dd3c:	e0bffc17 	ldw	r2,-16(fp)
 402dd40:	00000206 	br	402dd4c <altera_avalon_jtag_uart_ioctl+0x84>
 402dd44:	00a00034 	movhi	r2,32768
 402dd48:	10bfff84 	addi	r2,r2,-2
 402dd4c:	e0fffd17 	ldw	r3,-12(fp)
 402dd50:	18800115 	stw	r2,4(r3)
      rc = 0;
 402dd54:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 402dd58:	00000f06 	br	402dd98 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 402dd5c:	e0bffd17 	ldw	r2,-12(fp)
 402dd60:	10c00117 	ldw	r3,4(r2)
 402dd64:	00a00034 	movhi	r2,32768
 402dd68:	10bfffc4 	addi	r2,r2,-1
 402dd6c:	18800c26 	beq	r3,r2,402dda0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 402dd70:	e0bffd17 	ldw	r2,-12(fp)
 402dd74:	10c00917 	ldw	r3,36(r2)
 402dd78:	e0bffd17 	ldw	r2,-12(fp)
 402dd7c:	10800117 	ldw	r2,4(r2)
 402dd80:	1885803a 	cmpltu	r2,r3,r2
 402dd84:	10c03fcc 	andi	r3,r2,255
 402dd88:	e0bfff17 	ldw	r2,-4(fp)
 402dd8c:	10c00015 	stw	r3,0(r2)
      rc = 0;
 402dd90:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 402dd94:	00000206 	br	402dda0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 402dd98:	0001883a 	nop
 402dd9c:	00000106 	br	402dda4 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 402dda0:	0001883a 	nop

  default:
    break;
  }

  return rc;
 402dda4:	e0bffb17 	ldw	r2,-20(fp)
}
 402dda8:	e037883a 	mov	sp,fp
 402ddac:	df000017 	ldw	fp,0(sp)
 402ddb0:	dec00104 	addi	sp,sp,4
 402ddb4:	f800283a 	ret

0402ddb8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 402ddb8:	defff304 	addi	sp,sp,-52
 402ddbc:	dfc00c15 	stw	ra,48(sp)
 402ddc0:	df000b15 	stw	fp,44(sp)
 402ddc4:	df000b04 	addi	fp,sp,44
 402ddc8:	e13ffc15 	stw	r4,-16(fp)
 402ddcc:	e17ffd15 	stw	r5,-12(fp)
 402ddd0:	e1bffe15 	stw	r6,-8(fp)
 402ddd4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 402ddd8:	e0bffd17 	ldw	r2,-12(fp)
 402dddc:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 402dde0:	00004706 	br	402df00 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 402dde4:	e0bffc17 	ldw	r2,-16(fp)
 402dde8:	10800a17 	ldw	r2,40(r2)
 402ddec:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 402ddf0:	e0bffc17 	ldw	r2,-16(fp)
 402ddf4:	10800b17 	ldw	r2,44(r2)
 402ddf8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 402ddfc:	e0fff717 	ldw	r3,-36(fp)
 402de00:	e0bff817 	ldw	r2,-32(fp)
 402de04:	18800536 	bltu	r3,r2,402de1c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 402de08:	e0fff717 	ldw	r3,-36(fp)
 402de0c:	e0bff817 	ldw	r2,-32(fp)
 402de10:	1885c83a 	sub	r2,r3,r2
 402de14:	e0bff615 	stw	r2,-40(fp)
 402de18:	00000406 	br	402de2c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 402de1c:	00c20004 	movi	r3,2048
 402de20:	e0bff817 	ldw	r2,-32(fp)
 402de24:	1885c83a 	sub	r2,r3,r2
 402de28:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 402de2c:	e0bff617 	ldw	r2,-40(fp)
 402de30:	10001e26 	beq	r2,zero,402deac <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 402de34:	e0fffe17 	ldw	r3,-8(fp)
 402de38:	e0bff617 	ldw	r2,-40(fp)
 402de3c:	1880022e 	bgeu	r3,r2,402de48 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 402de40:	e0bffe17 	ldw	r2,-8(fp)
 402de44:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 402de48:	e0bffc17 	ldw	r2,-16(fp)
 402de4c:	10c00e04 	addi	r3,r2,56
 402de50:	e0bff817 	ldw	r2,-32(fp)
 402de54:	1885883a 	add	r2,r3,r2
 402de58:	e1bff617 	ldw	r6,-40(fp)
 402de5c:	100b883a 	mov	r5,r2
 402de60:	e13ff517 	ldw	r4,-44(fp)
 402de64:	40258a40 	call	40258a4 <memcpy>
      ptr   += n;
 402de68:	e0fff517 	ldw	r3,-44(fp)
 402de6c:	e0bff617 	ldw	r2,-40(fp)
 402de70:	1885883a 	add	r2,r3,r2
 402de74:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 402de78:	e0fffe17 	ldw	r3,-8(fp)
 402de7c:	e0bff617 	ldw	r2,-40(fp)
 402de80:	1885c83a 	sub	r2,r3,r2
 402de84:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 402de88:	e0fff817 	ldw	r3,-32(fp)
 402de8c:	e0bff617 	ldw	r2,-40(fp)
 402de90:	1885883a 	add	r2,r3,r2
 402de94:	10c1ffcc 	andi	r3,r2,2047
 402de98:	e0bffc17 	ldw	r2,-16(fp)
 402de9c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 402dea0:	e0bffe17 	ldw	r2,-8(fp)
 402dea4:	00bfcf16 	blt	zero,r2,402dde4 <__alt_data_end+0xfffedde4>
 402dea8:	00000106 	br	402deb0 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 402deac:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 402deb0:	e0fff517 	ldw	r3,-44(fp)
 402deb4:	e0bffd17 	ldw	r2,-12(fp)
 402deb8:	1880141e 	bne	r3,r2,402df0c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 402debc:	e0bfff17 	ldw	r2,-4(fp)
 402dec0:	1090000c 	andi	r2,r2,16384
 402dec4:	1000131e 	bne	r2,zero,402df14 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 402dec8:	0001883a 	nop
 402decc:	e0bffc17 	ldw	r2,-16(fp)
 402ded0:	10c00a17 	ldw	r3,40(r2)
 402ded4:	e0bff717 	ldw	r2,-36(fp)
 402ded8:	1880051e 	bne	r3,r2,402def0 <altera_avalon_jtag_uart_read+0x138>
 402dedc:	e0bffc17 	ldw	r2,-16(fp)
 402dee0:	10c00917 	ldw	r3,36(r2)
 402dee4:	e0bffc17 	ldw	r2,-16(fp)
 402dee8:	10800117 	ldw	r2,4(r2)
 402deec:	18bff736 	bltu	r3,r2,402decc <__alt_data_end+0xfffedecc>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 402def0:	e0bffc17 	ldw	r2,-16(fp)
 402def4:	10c00a17 	ldw	r3,40(r2)
 402def8:	e0bff717 	ldw	r2,-36(fp)
 402defc:	18800726 	beq	r3,r2,402df1c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 402df00:	e0bffe17 	ldw	r2,-8(fp)
 402df04:	00bfb716 	blt	zero,r2,402dde4 <__alt_data_end+0xfffedde4>
 402df08:	00000506 	br	402df20 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 402df0c:	0001883a 	nop
 402df10:	00000306 	br	402df20 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 402df14:	0001883a 	nop
 402df18:	00000106 	br	402df20 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 402df1c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 402df20:	e0fff517 	ldw	r3,-44(fp)
 402df24:	e0bffd17 	ldw	r2,-12(fp)
 402df28:	18801826 	beq	r3,r2,402df8c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402df2c:	0005303a 	rdctl	r2,status
 402df30:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402df34:	e0fffb17 	ldw	r3,-20(fp)
 402df38:	00bfff84 	movi	r2,-2
 402df3c:	1884703a 	and	r2,r3,r2
 402df40:	1001703a 	wrctl	status,r2
  
  return context;
 402df44:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 402df48:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 402df4c:	e0bffc17 	ldw	r2,-16(fp)
 402df50:	10800817 	ldw	r2,32(r2)
 402df54:	10c00054 	ori	r3,r2,1
 402df58:	e0bffc17 	ldw	r2,-16(fp)
 402df5c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 402df60:	e0bffc17 	ldw	r2,-16(fp)
 402df64:	10800017 	ldw	r2,0(r2)
 402df68:	10800104 	addi	r2,r2,4
 402df6c:	1007883a 	mov	r3,r2
 402df70:	e0bffc17 	ldw	r2,-16(fp)
 402df74:	10800817 	ldw	r2,32(r2)
 402df78:	18800035 	stwio	r2,0(r3)
 402df7c:	e0bffa17 	ldw	r2,-24(fp)
 402df80:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402df84:	e0bff917 	ldw	r2,-28(fp)
 402df88:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 402df8c:	e0fff517 	ldw	r3,-44(fp)
 402df90:	e0bffd17 	ldw	r2,-12(fp)
 402df94:	18800426 	beq	r3,r2,402dfa8 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 402df98:	e0fff517 	ldw	r3,-44(fp)
 402df9c:	e0bffd17 	ldw	r2,-12(fp)
 402dfa0:	1885c83a 	sub	r2,r3,r2
 402dfa4:	00000606 	br	402dfc0 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 402dfa8:	e0bfff17 	ldw	r2,-4(fp)
 402dfac:	1090000c 	andi	r2,r2,16384
 402dfb0:	10000226 	beq	r2,zero,402dfbc <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 402dfb4:	00bffd44 	movi	r2,-11
 402dfb8:	00000106 	br	402dfc0 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 402dfbc:	00bffec4 	movi	r2,-5
}
 402dfc0:	e037883a 	mov	sp,fp
 402dfc4:	dfc00117 	ldw	ra,4(sp)
 402dfc8:	df000017 	ldw	fp,0(sp)
 402dfcc:	dec00204 	addi	sp,sp,8
 402dfd0:	f800283a 	ret

0402dfd4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 402dfd4:	defff304 	addi	sp,sp,-52
 402dfd8:	dfc00c15 	stw	ra,48(sp)
 402dfdc:	df000b15 	stw	fp,44(sp)
 402dfe0:	df000b04 	addi	fp,sp,44
 402dfe4:	e13ffc15 	stw	r4,-16(fp)
 402dfe8:	e17ffd15 	stw	r5,-12(fp)
 402dfec:	e1bffe15 	stw	r6,-8(fp)
 402dff0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 402dff4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 402dff8:	e0bffd17 	ldw	r2,-12(fp)
 402dffc:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 402e000:	00003706 	br	402e0e0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 402e004:	e0bffc17 	ldw	r2,-16(fp)
 402e008:	10800c17 	ldw	r2,48(r2)
 402e00c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 402e010:	e0bffc17 	ldw	r2,-16(fp)
 402e014:	10800d17 	ldw	r2,52(r2)
 402e018:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 402e01c:	e0fff917 	ldw	r3,-28(fp)
 402e020:	e0bff517 	ldw	r2,-44(fp)
 402e024:	1880062e 	bgeu	r3,r2,402e040 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 402e028:	e0fff517 	ldw	r3,-44(fp)
 402e02c:	e0bff917 	ldw	r2,-28(fp)
 402e030:	1885c83a 	sub	r2,r3,r2
 402e034:	10bfffc4 	addi	r2,r2,-1
 402e038:	e0bff615 	stw	r2,-40(fp)
 402e03c:	00000b06 	br	402e06c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 402e040:	e0bff517 	ldw	r2,-44(fp)
 402e044:	10000526 	beq	r2,zero,402e05c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 402e048:	00c20004 	movi	r3,2048
 402e04c:	e0bff917 	ldw	r2,-28(fp)
 402e050:	1885c83a 	sub	r2,r3,r2
 402e054:	e0bff615 	stw	r2,-40(fp)
 402e058:	00000406 	br	402e06c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 402e05c:	00c1ffc4 	movi	r3,2047
 402e060:	e0bff917 	ldw	r2,-28(fp)
 402e064:	1885c83a 	sub	r2,r3,r2
 402e068:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 402e06c:	e0bff617 	ldw	r2,-40(fp)
 402e070:	10001e26 	beq	r2,zero,402e0ec <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 402e074:	e0fffe17 	ldw	r3,-8(fp)
 402e078:	e0bff617 	ldw	r2,-40(fp)
 402e07c:	1880022e 	bgeu	r3,r2,402e088 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 402e080:	e0bffe17 	ldw	r2,-8(fp)
 402e084:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 402e088:	e0bffc17 	ldw	r2,-16(fp)
 402e08c:	10c20e04 	addi	r3,r2,2104
 402e090:	e0bff917 	ldw	r2,-28(fp)
 402e094:	1885883a 	add	r2,r3,r2
 402e098:	e1bff617 	ldw	r6,-40(fp)
 402e09c:	e17ffd17 	ldw	r5,-12(fp)
 402e0a0:	1009883a 	mov	r4,r2
 402e0a4:	40258a40 	call	40258a4 <memcpy>
      ptr   += n;
 402e0a8:	e0fffd17 	ldw	r3,-12(fp)
 402e0ac:	e0bff617 	ldw	r2,-40(fp)
 402e0b0:	1885883a 	add	r2,r3,r2
 402e0b4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 402e0b8:	e0fffe17 	ldw	r3,-8(fp)
 402e0bc:	e0bff617 	ldw	r2,-40(fp)
 402e0c0:	1885c83a 	sub	r2,r3,r2
 402e0c4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 402e0c8:	e0fff917 	ldw	r3,-28(fp)
 402e0cc:	e0bff617 	ldw	r2,-40(fp)
 402e0d0:	1885883a 	add	r2,r3,r2
 402e0d4:	10c1ffcc 	andi	r3,r2,2047
 402e0d8:	e0bffc17 	ldw	r2,-16(fp)
 402e0dc:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 402e0e0:	e0bffe17 	ldw	r2,-8(fp)
 402e0e4:	00bfc716 	blt	zero,r2,402e004 <__alt_data_end+0xfffee004>
 402e0e8:	00000106 	br	402e0f0 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 402e0ec:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402e0f0:	0005303a 	rdctl	r2,status
 402e0f4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402e0f8:	e0fffb17 	ldw	r3,-20(fp)
 402e0fc:	00bfff84 	movi	r2,-2
 402e100:	1884703a 	and	r2,r3,r2
 402e104:	1001703a 	wrctl	status,r2
  
  return context;
 402e108:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 402e10c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 402e110:	e0bffc17 	ldw	r2,-16(fp)
 402e114:	10800817 	ldw	r2,32(r2)
 402e118:	10c00094 	ori	r3,r2,2
 402e11c:	e0bffc17 	ldw	r2,-16(fp)
 402e120:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 402e124:	e0bffc17 	ldw	r2,-16(fp)
 402e128:	10800017 	ldw	r2,0(r2)
 402e12c:	10800104 	addi	r2,r2,4
 402e130:	1007883a 	mov	r3,r2
 402e134:	e0bffc17 	ldw	r2,-16(fp)
 402e138:	10800817 	ldw	r2,32(r2)
 402e13c:	18800035 	stwio	r2,0(r3)
 402e140:	e0bffa17 	ldw	r2,-24(fp)
 402e144:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402e148:	e0bff817 	ldw	r2,-32(fp)
 402e14c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 402e150:	e0bffe17 	ldw	r2,-8(fp)
 402e154:	0080100e 	bge	zero,r2,402e198 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 402e158:	e0bfff17 	ldw	r2,-4(fp)
 402e15c:	1090000c 	andi	r2,r2,16384
 402e160:	1000101e 	bne	r2,zero,402e1a4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 402e164:	0001883a 	nop
 402e168:	e0bffc17 	ldw	r2,-16(fp)
 402e16c:	10c00d17 	ldw	r3,52(r2)
 402e170:	e0bff517 	ldw	r2,-44(fp)
 402e174:	1880051e 	bne	r3,r2,402e18c <altera_avalon_jtag_uart_write+0x1b8>
 402e178:	e0bffc17 	ldw	r2,-16(fp)
 402e17c:	10c00917 	ldw	r3,36(r2)
 402e180:	e0bffc17 	ldw	r2,-16(fp)
 402e184:	10800117 	ldw	r2,4(r2)
 402e188:	18bff736 	bltu	r3,r2,402e168 <__alt_data_end+0xfffee168>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 402e18c:	e0bffc17 	ldw	r2,-16(fp)
 402e190:	10800917 	ldw	r2,36(r2)
 402e194:	1000051e 	bne	r2,zero,402e1ac <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 402e198:	e0bffe17 	ldw	r2,-8(fp)
 402e19c:	00bfd016 	blt	zero,r2,402e0e0 <__alt_data_end+0xfffee0e0>
 402e1a0:	00000306 	br	402e1b0 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 402e1a4:	0001883a 	nop
 402e1a8:	00000106 	br	402e1b0 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 402e1ac:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 402e1b0:	e0fffd17 	ldw	r3,-12(fp)
 402e1b4:	e0bff717 	ldw	r2,-36(fp)
 402e1b8:	18800426 	beq	r3,r2,402e1cc <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 402e1bc:	e0fffd17 	ldw	r3,-12(fp)
 402e1c0:	e0bff717 	ldw	r2,-36(fp)
 402e1c4:	1885c83a 	sub	r2,r3,r2
 402e1c8:	00000606 	br	402e1e4 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 402e1cc:	e0bfff17 	ldw	r2,-4(fp)
 402e1d0:	1090000c 	andi	r2,r2,16384
 402e1d4:	10000226 	beq	r2,zero,402e1e0 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 402e1d8:	00bffd44 	movi	r2,-11
 402e1dc:	00000106 	br	402e1e4 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 402e1e0:	00bffec4 	movi	r2,-5
}
 402e1e4:	e037883a 	mov	sp,fp
 402e1e8:	dfc00117 	ldw	ra,4(sp)
 402e1ec:	df000017 	ldw	fp,0(sp)
 402e1f0:	dec00204 	addi	sp,sp,8
 402e1f4:	f800283a 	ret

0402e1f8 <altera_avalon_mailbox_identify>:
 * Check an instance open match
 * with the callback register
 */

static void altera_avalon_mailbox_identify (altera_avalon_mailbox_dev *dev)
{
 402e1f8:	defffd04 	addi	sp,sp,-12
 402e1fc:	df000215 	stw	fp,8(sp)
 402e200:	df000204 	addi	fp,sp,8
 402e204:	e13fff15 	stw	r4,-4(fp)
    /* Random signature to test mailbox ownership */
    alt_u32 magic_num = 0x3A11B045;
 402e208:	008e84b4 	movhi	r2,14866
 402e20c:	10ac1144 	addi	r2,r2,-20411
 402e210:	e0bffe15 	stw	r2,-8(fp)

    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, magic_num);
 402e214:	e0bfff17 	ldw	r2,-4(fp)
 402e218:	10800a17 	ldw	r2,40(r2)
 402e21c:	10800104 	addi	r2,r2,4
 402e220:	1007883a 	mov	r3,r2
 402e224:	e0bffe17 	ldw	r2,-8(fp)
 402e228:	18800035 	stwio	r2,0(r3)
    if((IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST)) == magic_num)
 402e22c:	e0bfff17 	ldw	r2,-4(fp)
 402e230:	10800a17 	ldw	r2,40(r2)
 402e234:	10800104 	addi	r2,r2,4
 402e238:	10800037 	ldwio	r2,0(r2)
 402e23c:	1007883a 	mov	r3,r2
 402e240:	e0bffe17 	ldw	r2,-8(fp)
 402e244:	1880081e 	bne	r3,r2,402e268 <altera_avalon_mailbox_identify+0x70>
    {
        dev-> mbox_type = MBOX_TX;
 402e248:	e0bfff17 	ldw	r2,-4(fp)
 402e24c:	10000f15 	stw	zero,60(r2)
        /* Clear message_ptr to default */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, 0x0);
 402e250:	e0bfff17 	ldw	r2,-4(fp)
 402e254:	10800a17 	ldw	r2,40(r2)
 402e258:	10800104 	addi	r2,r2,4
 402e25c:	0007883a 	mov	r3,zero
 402e260:	10c00035 	stwio	r3,0(r2)
    } else
    {
	    dev->mbox_type = MBOX_RX;
    }
}
 402e264:	00000306 	br	402e274 <altera_avalon_mailbox_identify+0x7c>
        dev-> mbox_type = MBOX_TX;
        /* Clear message_ptr to default */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, 0x0);
    } else
    {
	    dev->mbox_type = MBOX_RX;
 402e268:	e0bfff17 	ldw	r2,-4(fp)
 402e26c:	00c00044 	movi	r3,1
 402e270:	10c00f15 	stw	r3,60(r2)
    }
}
 402e274:	0001883a 	nop
 402e278:	e037883a 	mov	sp,fp
 402e27c:	df000017 	ldw	fp,0(sp)
 402e280:	dec00104 	addi	sp,sp,4
 402e284:	f800283a 	ret

0402e288 <altera_avalon_mailbox_post>:
/*
 *   altera_avalon_mailbox_post
 *   This function post message out through sender mailbox
 */
static alt_32 altera_avalon_mailbox_post (altera_avalon_mailbox_dev *dev,  void *message)
{
 402e288:	defffc04 	addi	sp,sp,-16
 402e28c:	df000315 	stw	fp,12(sp)
 402e290:	df000304 	addi	fp,sp,12
 402e294:	e13ffe15 	stw	r4,-8(fp)
 402e298:	e17fff15 	stw	r5,-4(fp)
    alt_u32 *mbox_msg = (alt_u32*) message ;
 402e29c:	e0bfff17 	ldw	r2,-4(fp)
 402e2a0:	e0bffd15 	stw	r2,-12(fp)

    if (mbox_msg != NULL) {
 402e2a4:	e0bffd17 	ldw	r2,-12(fp)
 402e2a8:	10001026 	beq	r2,zero,402e2ec <altera_avalon_mailbox_post+0x64>
        /* When message space available, post the message out */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, mbox_msg[1]);
 402e2ac:	e0bffe17 	ldw	r2,-8(fp)
 402e2b0:	10800a17 	ldw	r2,40(r2)
 402e2b4:	10800104 	addi	r2,r2,4
 402e2b8:	1007883a 	mov	r3,r2
 402e2bc:	e0bffd17 	ldw	r2,-12(fp)
 402e2c0:	10800104 	addi	r2,r2,4
 402e2c4:	10800017 	ldw	r2,0(r2)
 402e2c8:	18800035 	stwio	r2,0(r3)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, mbox_msg[0]);
 402e2cc:	e0bffe17 	ldw	r2,-8(fp)
 402e2d0:	10800a17 	ldw	r2,40(r2)
 402e2d4:	1007883a 	mov	r3,r2
 402e2d8:	e0bffd17 	ldw	r2,-12(fp)
 402e2dc:	10800017 	ldw	r2,0(r2)
 402e2e0:	18800035 	stwio	r2,0(r3)
        return 0;
 402e2e4:	0005883a 	mov	r2,zero
 402e2e8:	00000106 	br	402e2f0 <altera_avalon_mailbox_post+0x68>
    }
    /* Invalid NULL message received */
    return -EINVAL;
 402e2ec:	00bffa84 	movi	r2,-22
}
 402e2f0:	e037883a 	mov	sp,fp
 402e2f4:	df000017 	ldw	fp,0(sp)
 402e2f8:	dec00104 	addi	sp,sp,4
 402e2fc:	f800283a 	ret

0402e300 <altera_avalon_mailbox_simple_tx_isr>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_tx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_tx_isr(void *context, alt_u32 id)
#endif
{
 402e300:	defff604 	addi	sp,sp,-40
 402e304:	dfc00915 	stw	ra,36(sp)
 402e308:	df000815 	stw	fp,32(sp)
 402e30c:	df000804 	addi	fp,sp,32
 402e310:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
 402e314:	e0bfff17 	ldw	r2,-4(fp)
 402e318:	e0bff815 	stw	r2,-32(fp)
    int status = 0;
 402e31c:	e03ff915 	stw	zero,-28(fp)
    alt_u32 data;
    alt_irq_context cpu_sr;
    alt_u32 *message = dev->mbox_msg;
 402e320:	e0bff817 	ldw	r2,-32(fp)
 402e324:	10801017 	ldw	r2,64(r2)
 402e328:	e0bffa15 	stw	r2,-24(fp)

    /* Mask mailbox interrupt */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 402e32c:	e0bff817 	ldw	r2,-32(fp)
 402e330:	10800a17 	ldw	r2,40(r2)
 402e334:	10800304 	addi	r2,r2,12
 402e338:	10800037 	ldwio	r2,0(r2)
 402e33c:	1007883a 	mov	r3,r2
 402e340:	00bfff44 	movi	r2,-3
 402e344:	1884703a 	and	r2,r3,r2
 402e348:	e0bffb15 	stw	r2,-20(fp)
               (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 402e34c:	e0bff817 	ldw	r2,-32(fp)
 402e350:	10800a17 	ldw	r2,40(r2)
 402e354:	10800304 	addi	r2,r2,12
 402e358:	1007883a 	mov	r3,r2
 402e35c:	e0bffb17 	ldw	r2,-20(fp)
 402e360:	18800035 	stwio	r2,0(r3)

    if (message != NULL)
 402e364:	e0bffa17 	ldw	r2,-24(fp)
 402e368:	10002d26 	beq	r2,zero,402e420 <altera_avalon_mailbox_simple_tx_isr+0x120>
    {
        /* Post out message requested */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, message[1]);
 402e36c:	e0bff817 	ldw	r2,-32(fp)
 402e370:	10800a17 	ldw	r2,40(r2)
 402e374:	10800104 	addi	r2,r2,4
 402e378:	1007883a 	mov	r3,r2
 402e37c:	e0bffa17 	ldw	r2,-24(fp)
 402e380:	10800104 	addi	r2,r2,4
 402e384:	10800017 	ldw	r2,0(r2)
 402e388:	18800035 	stwio	r2,0(r3)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, message[0]);
 402e38c:	e0bff817 	ldw	r2,-32(fp)
 402e390:	10800a17 	ldw	r2,40(r2)
 402e394:	1007883a 	mov	r3,r2
 402e398:	e0bffa17 	ldw	r2,-24(fp)
 402e39c:	10800017 	ldw	r2,0(r2)
 402e3a0:	18800035 	stwio	r2,0(r3)
    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 402e3a4:	e0bff817 	ldw	r2,-32(fp)
 402e3a8:	10800a17 	ldw	r2,40(r2)
 402e3ac:	10800204 	addi	r2,r2,8
 402e3b0:	10800037 	ldwio	r2,0(r2)
        		  & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
 402e3b4:	1080008c 	andi	r2,r2,2
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, message[0]);
    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 402e3b8:	1005d07a 	srai	r2,r2,1
 402e3bc:	e0bff915 	stw	r2,-28(fp)
        		  & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
        if (dev->tx_cb)
 402e3c0:	e0bff817 	ldw	r2,-32(fp)
 402e3c4:	10800d17 	ldw	r2,52(r2)
 402e3c8:	10001126 	beq	r2,zero,402e410 <altera_avalon_mailbox_simple_tx_isr+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402e3cc:	0005303a 	rdctl	r2,status
 402e3d0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402e3d4:	e0fffd17 	ldw	r3,-12(fp)
 402e3d8:	00bfff84 	movi	r2,-2
 402e3dc:	1884703a 	and	r2,r3,r2
 402e3e0:	1001703a 	wrctl	status,r2
  
  return context;
 402e3e4:	e0bffd17 	ldw	r2,-12(fp)
        {
            cpu_sr = alt_irq_disable_all();
 402e3e8:	e0bffc15 	stw	r2,-16(fp)
  	        (dev->tx_cb)(message, status);
 402e3ec:	e0bff817 	ldw	r2,-32(fp)
 402e3f0:	10800d17 	ldw	r2,52(r2)
 402e3f4:	e17ff917 	ldw	r5,-28(fp)
 402e3f8:	e13ffa17 	ldw	r4,-24(fp)
 402e3fc:	103ee83a 	callr	r2
 402e400:	e0bffc17 	ldw	r2,-16(fp)
 402e404:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402e408:	e0bffe17 	ldw	r2,-8(fp)
 402e40c:	1001703a 	wrctl	status,r2
            alt_irq_enable_all(cpu_sr);
        }
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
 402e410:	e0bff817 	ldw	r2,-32(fp)
 402e414:	10001015 	stw	zero,64(r2)
        dev->lock = 0;
 402e418:	e0bff817 	ldw	r2,-32(fp)
 402e41c:	10001105 	stb	zero,68(r2)
    }
}
 402e420:	0001883a 	nop
 402e424:	e037883a 	mov	sp,fp
 402e428:	dfc00117 	ldw	ra,4(sp)
 402e42c:	df000017 	ldw	fp,0(sp)
 402e430:	dec00204 	addi	sp,sp,8
 402e434:	f800283a 	ret

0402e438 <altera_avalon_mailbox_simple_rx_isr>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_rx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_rx_isr(void *context, alt_u32 id)
#endif
{
 402e438:	defff704 	addi	sp,sp,-36
 402e43c:	dfc00815 	stw	ra,32(sp)
 402e440:	df000715 	stw	fp,28(sp)
 402e444:	df000704 	addi	fp,sp,28
 402e448:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
 402e44c:	e0bfff17 	ldw	r2,-4(fp)
 402e450:	e0bff915 	stw	r2,-28(fp)
    alt_irq_context cpu_sr;
    alt_u32 inbox[2];

    inbox[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
 402e454:	e0bff917 	ldw	r2,-28(fp)
 402e458:	10800a17 	ldw	r2,40(r2)
 402e45c:	10800104 	addi	r2,r2,4
 402e460:	10800037 	ldwio	r2,0(r2)
 402e464:	e0bffe15 	stw	r2,-8(fp)
    inbox[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
 402e468:	e0bff917 	ldw	r2,-28(fp)
 402e46c:	10800a17 	ldw	r2,40(r2)
 402e470:	10800037 	ldwio	r2,0(r2)
 402e474:	e0bffd15 	stw	r2,-12(fp)

    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
    if (dev->rx_cb)
 402e478:	e0bff917 	ldw	r2,-28(fp)
 402e47c:	10800e17 	ldw	r2,56(r2)
 402e480:	10001126 	beq	r2,zero,402e4c8 <altera_avalon_mailbox_simple_rx_isr+0x90>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402e484:	0005303a 	rdctl	r2,status
 402e488:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402e48c:	e0fffb17 	ldw	r3,-20(fp)
 402e490:	00bfff84 	movi	r2,-2
 402e494:	1884703a 	and	r2,r3,r2
 402e498:	1001703a 	wrctl	status,r2
  
  return context;
 402e49c:	e0bffb17 	ldw	r2,-20(fp)
    {
        cpu_sr = alt_irq_disable_all();
 402e4a0:	e0bffa15 	stw	r2,-24(fp)
        (dev->rx_cb)(inbox);
 402e4a4:	e0bff917 	ldw	r2,-28(fp)
 402e4a8:	10800e17 	ldw	r2,56(r2)
 402e4ac:	e0fffd04 	addi	r3,fp,-12
 402e4b0:	1809883a 	mov	r4,r3
 402e4b4:	103ee83a 	callr	r2
 402e4b8:	e0bffa17 	ldw	r2,-24(fp)
 402e4bc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402e4c0:	e0bffc17 	ldw	r2,-16(fp)
 402e4c4:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }
}
 402e4c8:	0001883a 	nop
 402e4cc:	e037883a 	mov	sp,fp
 402e4d0:	dfc00117 	ldw	ra,4(sp)
 402e4d4:	df000017 	ldw	fp,0(sp)
 402e4d8:	dec00204 	addi	sp,sp,8
 402e4dc:	f800283a 	ret

0402e4e0 <altera_avalon_mailbox_simple_init>:
 * Altera avalon mailbox init
 * Initialize mailbox device and identify sender/receiver mailbox
 */
void altera_avalon_mailbox_simple_init (altera_avalon_mailbox_dev *dev,
		                               int intr_id, int irq)
{
 402e4e0:	defffb04 	addi	sp,sp,-20
 402e4e4:	dfc00415 	stw	ra,16(sp)
 402e4e8:	df000315 	stw	fp,12(sp)
 402e4ec:	df000304 	addi	fp,sp,12
 402e4f0:	e13ffd15 	stw	r4,-12(fp)
 402e4f4:	e17ffe15 	stw	r5,-8(fp)
 402e4f8:	e1bfff15 	stw	r6,-4(fp)
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mailbox_simple_list);
 402e4fc:	d1600d04 	addi	r5,gp,-32716
 402e500:	e13ffd17 	ldw	r4,-12(fp)
 402e504:	402f2200 	call	402f220 <alt_dev_llist_insert>
    
    dev->mailbox_irq    = irq;
 402e508:	e0ffff17 	ldw	r3,-4(fp)
 402e50c:	e0bffd17 	ldw	r2,-12(fp)
 402e510:	10c00b15 	stw	r3,44(r2)
    dev->mailbox_intr_ctrl_id = intr_id;
 402e514:	e0fffe17 	ldw	r3,-8(fp)
 402e518:	e0bffd17 	ldw	r2,-12(fp)
 402e51c:	10c00c15 	stw	r3,48(r2)
    dev->rx_cb = NULL;
 402e520:	e0bffd17 	ldw	r2,-12(fp)
 402e524:	10000e15 	stw	zero,56(r2)
    dev->tx_cb = NULL;
 402e528:	e0bffd17 	ldw	r2,-12(fp)
 402e52c:	10000d15 	stw	zero,52(r2)
    dev->mbox_msg = NULL;
 402e530:	e0bffd17 	ldw	r2,-12(fp)
 402e534:	10001015 	stw	zero,64(r2)
    
    ALT_SEM_CREATE (&dev->write_lock, 1);

    altera_avalon_mailbox_identify(dev);
 402e538:	e13ffd17 	ldw	r4,-12(fp)
 402e53c:	402e1f80 	call	402e1f8 <altera_avalon_mailbox_identify>
}
 402e540:	0001883a 	nop
 402e544:	e037883a 	mov	sp,fp
 402e548:	dfc00117 	ldw	ra,4(sp)
 402e54c:	df000017 	ldw	fp,0(sp)
 402e550:	dec00204 	addi	sp,sp,8
 402e554:	f800283a 	ret

0402e558 <altera_avalon_mailbox_open>:
 * Search the list of registered mailboxes for one with the supplied name.
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
altera_avalon_mailbox_dev* altera_avalon_mailbox_open (const char *name,
		altera_mailbox_tx_cb tx_callback, altera_mailbox_rx_cb rx_callback)
{
 402e558:	defff804 	addi	sp,sp,-32
 402e55c:	dfc00715 	stw	ra,28(sp)
 402e560:	df000615 	stw	fp,24(sp)
 402e564:	df000604 	addi	fp,sp,24
 402e568:	e13ffd15 	stw	r4,-12(fp)
 402e56c:	e17ffe15 	stw	r5,-8(fp)
 402e570:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_mailbox_dev *dev;
    alt_u32 data;

    /* Find requested device */
    dev = (altera_avalon_mailbox_dev*) alt_find_dev (name, &alt_mailbox_simple_list);
 402e574:	d1600d04 	addi	r5,gp,-32716
 402e578:	e13ffd17 	ldw	r4,-12(fp)
 402e57c:	402f3840 	call	402f384 <alt_find_dev>
 402e580:	e0bffb15 	stw	r2,-20(fp)
    if (dev == NULL)
 402e584:	e0bffb17 	ldw	r2,-20(fp)
 402e588:	1000021e 	bne	r2,zero,402e594 <altera_avalon_mailbox_open+0x3c>
    {
        return NULL;
 402e58c:	0005883a 	mov	r2,zero
 402e590:	00006506 	br	402e728 <altera_avalon_mailbox_open+0x1d0>
    }

    /* Mask mailbox interrupt before ISR is being registered. */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
 402e594:	e0bffb17 	ldw	r2,-20(fp)
 402e598:	10800a17 	ldw	r2,40(r2)
 402e59c:	10800304 	addi	r2,r2,12
 402e5a0:	10800037 	ldwio	r2,0(r2)
 402e5a4:	e0bffc15 	stw	r2,-16(fp)
    if (dev->mbox_type == MBOX_TX) {
 402e5a8:	e0bffb17 	ldw	r2,-20(fp)
 402e5ac:	10800f17 	ldw	r2,60(r2)
 402e5b0:	1000081e 	bne	r2,zero,402e5d4 <altera_avalon_mailbox_open+0x7c>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
 402e5b4:	e0bffb17 	ldw	r2,-20(fp)
 402e5b8:	10800a17 	ldw	r2,40(r2)
 402e5bc:	10800304 	addi	r2,r2,12
 402e5c0:	1009883a 	mov	r4,r2
 402e5c4:	e0fffc17 	ldw	r3,-16(fp)
 402e5c8:	00bfff44 	movi	r2,-3
 402e5cc:	1884703a 	and	r2,r3,r2
 402e5d0:	20800035 	stwio	r2,0(r4)
            (data & ~(ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK)));
    }
    if (dev->mbox_type == MBOX_RX) {
 402e5d4:	e0bffb17 	ldw	r2,-20(fp)
 402e5d8:	10800f17 	ldw	r2,60(r2)
 402e5dc:	10800058 	cmpnei	r2,r2,1
 402e5e0:	1000081e 	bne	r2,zero,402e604 <altera_avalon_mailbox_open+0xac>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
 402e5e4:	e0bffb17 	ldw	r2,-20(fp)
 402e5e8:	10800a17 	ldw	r2,40(r2)
 402e5ec:	10800304 	addi	r2,r2,12
 402e5f0:	1009883a 	mov	r4,r2
 402e5f4:	e0fffc17 	ldw	r3,-16(fp)
 402e5f8:	00bfff84 	movi	r2,-2
 402e5fc:	1884703a 	and	r2,r3,r2
 402e600:	20800035 	stwio	r2,0(r4)
    }

    /* If IRQ not connected, return device pointer without ISR register,
     * in polling mode.
     */
    if (dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED)
 402e604:	e0bffb17 	ldw	r2,-20(fp)
 402e608:	10800b17 	ldw	r2,44(r2)
 402e60c:	10bfffd8 	cmpnei	r2,r2,-1
 402e610:	1000021e 	bne	r2,zero,402e61c <altera_avalon_mailbox_open+0xc4>
        return dev;
 402e614:	e0bffb17 	ldw	r2,-20(fp)
 402e618:	00004306 	br	402e728 <altera_avalon_mailbox_open+0x1d0>

    /* For IRQ connected case */

    if ((tx_callback == NULL) && (rx_callback == NULL))
 402e61c:	e0bffe17 	ldw	r2,-8(fp)
 402e620:	1000041e 	bne	r2,zero,402e634 <altera_avalon_mailbox_open+0xdc>
 402e624:	e0bfff17 	ldw	r2,-4(fp)
 402e628:	1000021e 	bne	r2,zero,402e634 <altera_avalon_mailbox_open+0xdc>
    {
    /* No callback, polling mode */
        return dev;
 402e62c:	e0bffb17 	ldw	r2,-20(fp)
 402e630:	00003d06 	br	402e728 <altera_avalon_mailbox_open+0x1d0>
    }

    /* Ensure user correctly use the mailbox
     * Return - Null if wrong direction set
     */
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
 402e634:	e0bffb17 	ldw	r2,-20(fp)
 402e638:	10800f17 	ldw	r2,60(r2)
 402e63c:	1000021e 	bne	r2,zero,402e648 <altera_avalon_mailbox_open+0xf0>
 402e640:	e0bfff17 	ldw	r2,-4(fp)
 402e644:	1000061e 	bne	r2,zero,402e660 <altera_avalon_mailbox_open+0x108>
	    ((dev->mbox_type == MBOX_RX) && (tx_callback != NULL)))
 402e648:	e0bffb17 	ldw	r2,-20(fp)
 402e64c:	10800f17 	ldw	r2,60(r2)
    }

    /* Ensure user correctly use the mailbox
     * Return - Null if wrong direction set
     */
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
 402e650:	10800058 	cmpnei	r2,r2,1
 402e654:	1000041e 	bne	r2,zero,402e668 <altera_avalon_mailbox_open+0x110>
	    ((dev->mbox_type == MBOX_RX) && (tx_callback != NULL)))
 402e658:	e0bffe17 	ldw	r2,-8(fp)
 402e65c:	10000226 	beq	r2,zero,402e668 <altera_avalon_mailbox_open+0x110>
  	  /* Invalid callback  */
        return NULL;
 402e660:	0005883a 	mov	r2,zero
 402e664:	00003006 	br	402e728 <altera_avalon_mailbox_open+0x1d0>

    /* IRQ is valid register callback
     * to current mailbox device
     */
    dev->tx_cb  = tx_callback;
 402e668:	e0bffb17 	ldw	r2,-20(fp)
 402e66c:	e0fffe17 	ldw	r3,-8(fp)
 402e670:	10c00d15 	stw	r3,52(r2)
    dev->rx_cb  = rx_callback;
 402e674:	e0bffb17 	ldw	r2,-20(fp)
 402e678:	e0ffff17 	ldw	r3,-4(fp)
 402e67c:	10c00e15 	stw	r3,56(r2)

    /* Register Mailbox's ISR */
    if (dev->mbox_type == MBOX_TX)
 402e680:	e0bffb17 	ldw	r2,-20(fp)
 402e684:	10800f17 	ldw	r2,60(r2)
 402e688:	10000b1e 	bne	r2,zero,402e6b8 <altera_avalon_mailbox_open+0x160>
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_tx_isr,
 402e68c:	e0bffb17 	ldw	r2,-20(fp)
 402e690:	10c00c17 	ldw	r3,48(r2)
 402e694:	e0bffb17 	ldw	r2,-20(fp)
 402e698:	10800b17 	ldw	r2,44(r2)
 402e69c:	d8000015 	stw	zero,0(sp)
 402e6a0:	e1fffb17 	ldw	r7,-20(fp)
 402e6a4:	018100f4 	movhi	r6,1027
 402e6a8:	31b8c004 	addi	r6,r6,-7424
 402e6ac:	100b883a 	mov	r5,r2
 402e6b0:	1809883a 	mov	r4,r3
 402e6b4:	402f4480 	call	402f448 <alt_ic_isr_register>
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_tx_isr);
    #endif
    }
  
    if (dev->mbox_type == MBOX_RX)
 402e6b8:	e0bffb17 	ldw	r2,-20(fp)
 402e6bc:	10800f17 	ldw	r2,60(r2)
 402e6c0:	10800058 	cmpnei	r2,r2,1
 402e6c4:	1000171e 	bne	r2,zero,402e724 <altera_avalon_mailbox_open+0x1cc>
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_rx_isr,
 402e6c8:	e0bffb17 	ldw	r2,-20(fp)
 402e6cc:	10c00c17 	ldw	r3,48(r2)
 402e6d0:	e0bffb17 	ldw	r2,-20(fp)
 402e6d4:	10800b17 	ldw	r2,44(r2)
 402e6d8:	d8000015 	stw	zero,0(sp)
 402e6dc:	e1fffb17 	ldw	r7,-20(fp)
 402e6e0:	018100f4 	movhi	r6,1027
 402e6e4:	31b90e04 	addi	r6,r6,-7112
 402e6e8:	100b883a 	mov	r5,r2
 402e6ec:	1809883a 	mov	r4,r3
 402e6f0:	402f4480 	call	402f448 <alt_ic_isr_register>
                            dev, NULL);
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_rx_isr);
    #endif
        /* Enable Receiver interrupt to listen mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
 402e6f4:	e0bffb17 	ldw	r2,-20(fp)
 402e6f8:	10800a17 	ldw	r2,40(r2)
 402e6fc:	10800304 	addi	r2,r2,12
 402e700:	10800037 	ldwio	r2,0(r2)
 402e704:	10800054 	ori	r2,r2,1
 402e708:	e0bffc15 	stw	r2,-16(fp)
  	             (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 402e70c:	e0bffb17 	ldw	r2,-20(fp)
 402e710:	10800a17 	ldw	r2,40(r2)
 402e714:	10800304 	addi	r2,r2,12
 402e718:	1007883a 	mov	r3,r2
 402e71c:	e0bffc17 	ldw	r2,-16(fp)
 402e720:	18800035 	stwio	r2,0(r3)
    }
    return dev;
 402e724:	e0bffb17 	ldw	r2,-20(fp)
}
 402e728:	e037883a 	mov	sp,fp
 402e72c:	dfc00117 	ldw	ra,4(sp)
 402e730:	df000017 	ldw	fp,0(sp)
 402e734:	dec00204 	addi	sp,sp,8
 402e738:	f800283a 	ret

0402e73c <altera_avalon_mailbox_close>:
/*
 * altera_avalon_mailbox_close
 * Disable mailbox interrupt and irq
 */
void altera_avalon_mailbox_close (altera_avalon_mailbox_dev *dev)
{
 402e73c:	defffb04 	addi	sp,sp,-20
 402e740:	dfc00415 	stw	ra,16(sp)
 402e744:	df000315 	stw	fp,12(sp)
 402e748:	df000304 	addi	fp,sp,12
 402e74c:	e13fff15 	stw	r4,-4(fp)
    alt_u32 data;
    if ((dev != NULL) && (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED))
 402e750:	e0bfff17 	ldw	r2,-4(fp)
 402e754:	10003926 	beq	r2,zero,402e83c <altera_avalon_mailbox_close+0x100>
 402e758:	e0bfff17 	ldw	r2,-4(fp)
 402e75c:	10800b17 	ldw	r2,44(r2)
 402e760:	10bfffe0 	cmpeqi	r2,r2,-1
 402e764:	1000351e 	bne	r2,zero,402e83c <altera_avalon_mailbox_close+0x100>
    {
        /* Mask interrupt */
        if (dev->mbox_type == MBOX_TX)
 402e768:	e0bfff17 	ldw	r2,-4(fp)
 402e76c:	10800f17 	ldw	r2,60(r2)
 402e770:	10000e1e 	bne	r2,zero,402e7ac <altera_avalon_mailbox_close+0x70>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 402e774:	e0bfff17 	ldw	r2,-4(fp)
 402e778:	10800a17 	ldw	r2,40(r2)
 402e77c:	10800304 	addi	r2,r2,12
 402e780:	10800037 	ldwio	r2,0(r2)
 402e784:	1007883a 	mov	r3,r2
 402e788:	00bfff44 	movi	r2,-3
 402e78c:	1884703a 	and	r2,r3,r2
 402e790:	e0bffe15 	stw	r2,-8(fp)
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 402e794:	e0bfff17 	ldw	r2,-4(fp)
 402e798:	10800a17 	ldw	r2,40(r2)
 402e79c:	10800304 	addi	r2,r2,12
 402e7a0:	1007883a 	mov	r3,r2
 402e7a4:	e0bffe17 	ldw	r2,-8(fp)
 402e7a8:	18800035 	stwio	r2,0(r3)
        }
        if (dev->mbox_type == MBOX_RX)
 402e7ac:	e0bfff17 	ldw	r2,-4(fp)
 402e7b0:	10800f17 	ldw	r2,60(r2)
 402e7b4:	10800058 	cmpnei	r2,r2,1
 402e7b8:	10000e1e 	bne	r2,zero,402e7f4 <altera_avalon_mailbox_close+0xb8>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 402e7bc:	e0bfff17 	ldw	r2,-4(fp)
 402e7c0:	10800a17 	ldw	r2,40(r2)
 402e7c4:	10800304 	addi	r2,r2,12
 402e7c8:	10800037 	ldwio	r2,0(r2)
 402e7cc:	1007883a 	mov	r3,r2
 402e7d0:	00bfff84 	movi	r2,-2
 402e7d4:	1884703a 	and	r2,r3,r2
 402e7d8:	e0bffe15 	stw	r2,-8(fp)
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 402e7dc:	e0bfff17 	ldw	r2,-4(fp)
 402e7e0:	10800a17 	ldw	r2,40(r2)
 402e7e4:	10800304 	addi	r2,r2,12
 402e7e8:	1007883a 	mov	r3,r2
 402e7ec:	e0bffe17 	ldw	r2,-8(fp)
 402e7f0:	18800035 	stwio	r2,0(r3)
        }
  
        /* De-register mailbox irq) */
        if (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED)
 402e7f4:	e0bfff17 	ldw	r2,-4(fp)
 402e7f8:	10800b17 	ldw	r2,44(r2)
 402e7fc:	10bfffe0 	cmpeqi	r2,r2,-1
 402e800:	10000a1e 	bne	r2,zero,402e82c <altera_avalon_mailbox_close+0xf0>
        {
        #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
            alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, NULL,
 402e804:	e0bfff17 	ldw	r2,-4(fp)
 402e808:	10c00c17 	ldw	r3,48(r2)
 402e80c:	e0bfff17 	ldw	r2,-4(fp)
 402e810:	10800b17 	ldw	r2,44(r2)
 402e814:	d8000015 	stw	zero,0(sp)
 402e818:	e1ffff17 	ldw	r7,-4(fp)
 402e81c:	000d883a 	mov	r6,zero
 402e820:	100b883a 	mov	r5,r2
 402e824:	1809883a 	mov	r4,r3
 402e828:	402f4480 	call	402f448 <alt_ic_isr_register>
        #else
            alt_irq_register(dev->mailbox_irq, dev, NULL);
        #endif
        }
        /* De-registering callback to mailbox */
        dev->tx_cb  = NULL;
 402e82c:	e0bfff17 	ldw	r2,-4(fp)
 402e830:	10000d15 	stw	zero,52(r2)
        dev->rx_cb  = NULL;
 402e834:	e0bfff17 	ldw	r2,-4(fp)
 402e838:	10000e15 	stw	zero,56(r2)
    }
}
 402e83c:	0001883a 	nop
 402e840:	e037883a 	mov	sp,fp
 402e844:	dfc00117 	ldw	ra,4(sp)
 402e848:	df000017 	ldw	fp,0(sp)
 402e84c:	dec00204 	addi	sp,sp,8
 402e850:	f800283a 	ret

0402e854 <altera_avalon_mailbox_status>:
 *   Return 0 when mailbox is empty or no pending message
 *   Return 1 when mailbox space is full or there is a message pending
 */

alt_u32 altera_avalon_mailbox_status (altera_avalon_mailbox_dev *dev)
{
 402e854:	defffd04 	addi	sp,sp,-12
 402e858:	df000215 	stw	fp,8(sp)
 402e85c:	df000204 	addi	fp,sp,8
 402e860:	e13fff15 	stw	r4,-4(fp)
    alt_u32 mailbox_sts = 0;
 402e864:	e03ffe15 	stw	zero,-8(fp)

    mailbox_sts = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_STS_OFST) & ALTERA_AVALON_MAILBOX_SIMPLE_STS_MSK);
 402e868:	e0bfff17 	ldw	r2,-4(fp)
 402e86c:	10800a17 	ldw	r2,40(r2)
 402e870:	10800204 	addi	r2,r2,8
 402e874:	10800037 	ldwio	r2,0(r2)
 402e878:	108000cc 	andi	r2,r2,3
 402e87c:	e0bffe15 	stw	r2,-8(fp)

    if (dev->mbox_type == MBOX_TX)
 402e880:	e0bfff17 	ldw	r2,-4(fp)
 402e884:	10800f17 	ldw	r2,60(r2)
 402e888:	1000041e 	bne	r2,zero,402e89c <altera_avalon_mailbox_status+0x48>
        mailbox_sts = (mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
 402e88c:	e0bffe17 	ldw	r2,-8(fp)
 402e890:	1080008c 	andi	r2,r2,2
 402e894:	1004d07a 	srli	r2,r2,1
 402e898:	e0bffe15 	stw	r2,-8(fp)

    if (dev->mbox_type == MBOX_RX)
 402e89c:	e0bfff17 	ldw	r2,-4(fp)
 402e8a0:	10800f17 	ldw	r2,60(r2)
 402e8a4:	10800058 	cmpnei	r2,r2,1
 402e8a8:	1000031e 	bne	r2,zero,402e8b8 <altera_avalon_mailbox_status+0x64>
        mailbox_sts = mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_PENDING_MSK;
 402e8ac:	e0bffe17 	ldw	r2,-8(fp)
 402e8b0:	1080004c 	andi	r2,r2,1
 402e8b4:	e0bffe15 	stw	r2,-8(fp)

    return mailbox_sts;
 402e8b8:	e0bffe17 	ldw	r2,-8(fp)
}
 402e8bc:	e037883a 	mov	sp,fp
 402e8c0:	df000017 	ldw	fp,0(sp)
 402e8c4:	dec00104 	addi	sp,sp,4
 402e8c8:	f800283a 	ret

0402e8cc <altera_avalon_mailbox_send>:
 * For polling mode, '0' timeout value for infinite polling
 * otherwise timeout when expired
 */
int altera_avalon_mailbox_send
(altera_avalon_mailbox_dev *dev, void *message, int timeout, EventType event)
{
 402e8cc:	defff704 	addi	sp,sp,-36
 402e8d0:	dfc00815 	stw	ra,32(sp)
 402e8d4:	df000715 	stw	fp,28(sp)
 402e8d8:	df000704 	addi	fp,sp,28
 402e8dc:	e13ffc15 	stw	r4,-16(fp)
 402e8e0:	e17ffd15 	stw	r5,-12(fp)
 402e8e4:	e1bffe15 	stw	r6,-8(fp)
 402e8e8:	e1ffff15 	stw	r7,-4(fp)
    int status = 0;
 402e8ec:	e03ff915 	stw	zero,-28(fp)
     * Obtain the "write_lock"semaphore to ensures 
     * that writing to the device is thread-safe in multi-thread enviroment
     */
    ALT_SEM_PEND (dev->write_lock, 0);

    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 402e8f0:	e0bffc17 	ldw	r2,-16(fp)
 402e8f4:	10801103 	ldbu	r2,68(r2)
 402e8f8:	10803fcc 	andi	r2,r2,255
 402e8fc:	1000061e 	bne	r2,zero,402e918 <altera_avalon_mailbox_send+0x4c>
 402e900:	e0bffc17 	ldw	r2,-16(fp)
 402e904:	10800a17 	ldw	r2,40(r2)
 402e908:	10800204 	addi	r2,r2,8
 402e90c:	10800037 	ldwio	r2,0(r2)
    		          & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK))
 402e910:	1080008c 	andi	r2,r2,2
     * Obtain the "write_lock"semaphore to ensures 
     * that writing to the device is thread-safe in multi-thread enviroment
     */
    ALT_SEM_PEND (dev->write_lock, 0);

    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 402e914:	10000226 	beq	r2,zero,402e920 <altera_avalon_mailbox_send+0x54>
    		          & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK))
    {
    	/* dev is lock or no free space to send */
    	return -1;
 402e918:	00bfffc4 	movi	r2,-1
 402e91c:	00003a06 	br	402ea08 <altera_avalon_mailbox_send+0x13c>
    }
    else
    {
        dev->mbox_msg = message;
 402e920:	e0bffc17 	ldw	r2,-16(fp)
 402e924:	e0fffd17 	ldw	r3,-12(fp)
 402e928:	10c01015 	stw	r3,64(r2)
        dev->lock = 1;
 402e92c:	e0bffc17 	ldw	r2,-16(fp)
 402e930:	00c00044 	movi	r3,1
 402e934:	10c01105 	stb	r3,68(r2)
     */
    ALT_SEM_POST (dev->write_lock);



    if ((dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED) || (event==POLL))
 402e938:	e0bffc17 	ldw	r2,-16(fp)
 402e93c:	10800b17 	ldw	r2,44(r2)
 402e940:	10bfffe0 	cmpeqi	r2,r2,-1
 402e944:	1000031e 	bne	r2,zero,402e954 <altera_avalon_mailbox_send+0x88>
 402e948:	e0bfff17 	ldw	r2,-4(fp)
 402e94c:	10800058 	cmpnei	r2,r2,1
 402e950:	1000201e 	bne	r2,zero,402e9d4 <altera_avalon_mailbox_send+0x108>
    {
        /* Polling mode */
        if (timeout ==0)
 402e954:	e0bffe17 	ldw	r2,-8(fp)
 402e958:	1000061e 	bne	r2,zero,402e974 <altera_avalon_mailbox_send+0xa8>
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
 402e95c:	e13ffc17 	ldw	r4,-16(fp)
 402e960:	402e8540 	call	402e854 <altera_avalon_mailbox_status>
 402e964:	e0bffb15 	stw	r2,-20(fp)
            } while (mbox_status);
 402e968:	e0bffb17 	ldw	r2,-20(fp)
 402e96c:	103ffb1e 	bne	r2,zero,402e95c <__alt_data_end+0xfffee95c>
 402e970:	00000e06 	br	402e9ac <altera_avalon_mailbox_send+0xe0>
        } else
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
 402e974:	e13ffc17 	ldw	r4,-16(fp)
 402e978:	402e8540 	call	402e854 <altera_avalon_mailbox_status>
 402e97c:	e0bffb15 	stw	r2,-20(fp)
                timeout--;
 402e980:	e0bffe17 	ldw	r2,-8(fp)
 402e984:	10bfffc4 	addi	r2,r2,-1
 402e988:	e0bffe15 	stw	r2,-8(fp)
            } while (mbox_status && (timeout != 0));
 402e98c:	e0bffb17 	ldw	r2,-20(fp)
 402e990:	10000226 	beq	r2,zero,402e99c <altera_avalon_mailbox_send+0xd0>
 402e994:	e0bffe17 	ldw	r2,-8(fp)
 402e998:	103ff61e 	bne	r2,zero,402e974 <__alt_data_end+0xfffee974>
            if (timeout == 0)
 402e99c:	e0bffe17 	ldw	r2,-8(fp)
 402e9a0:	1000021e 	bne	r2,zero,402e9ac <altera_avalon_mailbox_send+0xe0>
            {    /* Timeout occur or fail sending */
                return -ETIME;
 402e9a4:	00bff084 	movi	r2,-62
 402e9a8:	00001706 	br	402ea08 <altera_avalon_mailbox_send+0x13c>
            }
        }
        status = altera_avalon_mailbox_post (dev, message);
 402e9ac:	e17ffd17 	ldw	r5,-12(fp)
 402e9b0:	e13ffc17 	ldw	r4,-16(fp)
 402e9b4:	402e2880 	call	402e288 <altera_avalon_mailbox_post>
 402e9b8:	e0bff915 	stw	r2,-28(fp)
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
 402e9bc:	e0bffc17 	ldw	r2,-16(fp)
 402e9c0:	10001015 	stw	zero,64(r2)
        /* Release lock when message posted */
        dev->lock =0;
 402e9c4:	e0bffc17 	ldw	r2,-16(fp)
 402e9c8:	10001105 	stb	zero,68(r2)
        return status;
 402e9cc:	e0bff917 	ldw	r2,-28(fp)
 402e9d0:	00000d06 	br	402ea08 <altera_avalon_mailbox_send+0x13c>
    } else
    {
        /* Enable Sender interrupt */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
 402e9d4:	e0bffc17 	ldw	r2,-16(fp)
 402e9d8:	10800a17 	ldw	r2,40(r2)
 402e9dc:	10800304 	addi	r2,r2,12
 402e9e0:	10800037 	ldwio	r2,0(r2)
 402e9e4:	10800094 	ori	r2,r2,2
 402e9e8:	e0bffa15 	stw	r2,-24(fp)
                   (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 402e9ec:	e0bffc17 	ldw	r2,-16(fp)
 402e9f0:	10800a17 	ldw	r2,40(r2)
 402e9f4:	10800304 	addi	r2,r2,12
 402e9f8:	1007883a 	mov	r3,r2
 402e9fc:	e0bffa17 	ldw	r2,-24(fp)
 402ea00:	18800035 	stwio	r2,0(r3)
    }
  return 0;
 402ea04:	0005883a 	mov	r2,zero
}
 402ea08:	e037883a 	mov	sp,fp
 402ea0c:	dfc00117 	ldw	ra,4(sp)
 402ea10:	df000017 	ldw	fp,0(sp)
 402ea14:	dec00204 	addi	sp,sp,8
 402ea18:	f800283a 	ret

0402ea1c <altera_avalon_mailbox_retrieve_poll>:
 * If a message is available in the mailbox return it otherwise return NULL
 * This function is blocking
 *
 */
int altera_avalon_mailbox_retrieve_poll (altera_avalon_mailbox_dev *dev, alt_u32 *message, alt_u32 timeout)
{
 402ea1c:	defff904 	addi	sp,sp,-28
 402ea20:	dfc00615 	stw	ra,24(sp)
 402ea24:	df000515 	stw	fp,20(sp)
 402ea28:	df000504 	addi	fp,sp,20
 402ea2c:	e13ffd15 	stw	r4,-12(fp)
 402ea30:	e17ffe15 	stw	r5,-8(fp)
 402ea34:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 status = 0;
 402ea38:	e03ffb15 	stw	zero,-20(fp)
    alt_u32 data;

    if (dev != NULL && message != NULL)
 402ea3c:	e0bffd17 	ldw	r2,-12(fp)
 402ea40:	10003a26 	beq	r2,zero,402eb2c <altera_avalon_mailbox_retrieve_poll+0x110>
 402ea44:	e0bffe17 	ldw	r2,-8(fp)
 402ea48:	10003826 	beq	r2,zero,402eb2c <altera_avalon_mailbox_retrieve_poll+0x110>
    {
        /* Mask receiver mailbox interrupt when in polling mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
 402ea4c:	e0bffd17 	ldw	r2,-12(fp)
 402ea50:	10800a17 	ldw	r2,40(r2)
 402ea54:	10800304 	addi	r2,r2,12
 402ea58:	10800037 	ldwio	r2,0(r2)
 402ea5c:	e0bffc15 	stw	r2,-16(fp)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST,
 402ea60:	e0bffd17 	ldw	r2,-12(fp)
 402ea64:	10800a17 	ldw	r2,40(r2)
 402ea68:	10800304 	addi	r2,r2,12
 402ea6c:	1009883a 	mov	r4,r2
 402ea70:	e0fffc17 	ldw	r3,-16(fp)
 402ea74:	00bfff84 	movi	r2,-2
 402ea78:	1884703a 	and	r2,r3,r2
 402ea7c:	20800035 	stwio	r2,0(r4)
            (data & (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK)));


        /* If timeout is '0', poll till message availabe in mailbox */
        if (timeout == 0)
 402ea80:	e0bfff17 	ldw	r2,-4(fp)
 402ea84:	1000061e 	bne	r2,zero,402eaa0 <altera_avalon_mailbox_retrieve_poll+0x84>
        {
            do
            {
                status = altera_avalon_mailbox_status (dev);
 402ea88:	e13ffd17 	ldw	r4,-12(fp)
 402ea8c:	402e8540 	call	402e854 <altera_avalon_mailbox_status>
 402ea90:	e0bffb15 	stw	r2,-20(fp)
            } while (status == 0);
 402ea94:	e0bffb17 	ldw	r2,-20(fp)
 402ea98:	103ffb26 	beq	r2,zero,402ea88 <__alt_data_end+0xfffeea88>
 402ea9c:	00000a06 	br	402eac8 <altera_avalon_mailbox_retrieve_poll+0xac>
        } else
        {
            do
            {
                 status = altera_avalon_mailbox_status (dev);
 402eaa0:	e13ffd17 	ldw	r4,-12(fp)
 402eaa4:	402e8540 	call	402e854 <altera_avalon_mailbox_status>
 402eaa8:	e0bffb15 	stw	r2,-20(fp)
                 timeout-- ;
 402eaac:	e0bfff17 	ldw	r2,-4(fp)
 402eab0:	10bfffc4 	addi	r2,r2,-1
 402eab4:	e0bfff15 	stw	r2,-4(fp)
            } while ((status == 0) && timeout);
 402eab8:	e0bffb17 	ldw	r2,-20(fp)
 402eabc:	1000021e 	bne	r2,zero,402eac8 <altera_avalon_mailbox_retrieve_poll+0xac>
 402eac0:	e0bfff17 	ldw	r2,-4(fp)
 402eac4:	103ff61e 	bne	r2,zero,402eaa0 <__alt_data_end+0xfffeeaa0>
        }

        /* if timeout, status remain 0 */
        if (status)
 402eac8:	e0bffb17 	ldw	r2,-20(fp)
 402eacc:	10000d26 	beq	r2,zero,402eb04 <altera_avalon_mailbox_retrieve_poll+0xe8>
        {
            message[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
 402ead0:	e0bffe17 	ldw	r2,-8(fp)
 402ead4:	10800104 	addi	r2,r2,4
 402ead8:	e0fffd17 	ldw	r3,-12(fp)
 402eadc:	18c00a17 	ldw	r3,40(r3)
 402eae0:	18c00104 	addi	r3,r3,4
 402eae4:	18c00037 	ldwio	r3,0(r3)
 402eae8:	10c00015 	stw	r3,0(r2)
            message[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
 402eaec:	e0bffd17 	ldw	r2,-12(fp)
 402eaf0:	10800a17 	ldw	r2,40(r2)
 402eaf4:	10800037 	ldwio	r2,0(r2)
 402eaf8:	1007883a 	mov	r3,r2
 402eafc:	e0bffe17 	ldw	r2,-8(fp)
 402eb00:	10c00015 	stw	r3,0(r2)
        }
        /* Restore original state of interrupt mask */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 402eb04:	e0bffd17 	ldw	r2,-12(fp)
 402eb08:	10800a17 	ldw	r2,40(r2)
 402eb0c:	10800304 	addi	r2,r2,12
 402eb10:	1007883a 	mov	r3,r2
 402eb14:	e0bffc17 	ldw	r2,-16(fp)
 402eb18:	18800035 	stwio	r2,0(r3)

        /* Return success on complete retrieve message
         * otherwise timeout and exit with error
         */
        if (status)
 402eb1c:	e0bffb17 	ldw	r2,-20(fp)
 402eb20:	10000226 	beq	r2,zero,402eb2c <altera_avalon_mailbox_retrieve_poll+0x110>
          return 0;
 402eb24:	0005883a 	mov	r2,zero
 402eb28:	00000606 	br	402eb44 <altera_avalon_mailbox_retrieve_poll+0x128>
      }
      /* Invalid Null dev and message */
      message[1] = 0;
 402eb2c:	e0bffe17 	ldw	r2,-8(fp)
 402eb30:	10800104 	addi	r2,r2,4
 402eb34:	10000015 	stw	zero,0(r2)
      message[0] = 0;
 402eb38:	e0bffe17 	ldw	r2,-8(fp)
 402eb3c:	10000015 	stw	zero,0(r2)
      return -EINVAL;
 402eb40:	00bffa84 	movi	r2,-22
}
 402eb44:	e037883a 	mov	sp,fp
 402eb48:	dfc00117 	ldw	ra,4(sp)
 402eb4c:	df000017 	ldw	fp,0(sp)
 402eb50:	dec00204 	addi	sp,sp,8
 402eb54:	f800283a 	ret

0402eb58 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 402eb58:	defffe04 	addi	sp,sp,-8
 402eb5c:	dfc00115 	stw	ra,4(sp)
 402eb60:	df000015 	stw	fp,0(sp)
 402eb64:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 402eb68:	d0a00b17 	ldw	r2,-32724(gp)
 402eb6c:	10000326 	beq	r2,zero,402eb7c <alt_get_errno+0x24>
 402eb70:	d0a00b17 	ldw	r2,-32724(gp)
 402eb74:	103ee83a 	callr	r2
 402eb78:	00000106 	br	402eb80 <alt_get_errno+0x28>
 402eb7c:	d0a71404 	addi	r2,gp,-25520
}
 402eb80:	e037883a 	mov	sp,fp
 402eb84:	dfc00117 	ldw	ra,4(sp)
 402eb88:	df000017 	ldw	fp,0(sp)
 402eb8c:	dec00204 	addi	sp,sp,8
 402eb90:	f800283a 	ret

0402eb94 <alt_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 402eb94:	defff904 	addi	sp,sp,-28
 402eb98:	df000615 	stw	fp,24(sp)
 402eb9c:	df000604 	addi	fp,sp,24
 402eba0:	e13ffe15 	stw	r4,-8(fp)
 402eba4:	e17fff15 	stw	r5,-4(fp)
  alt_u32 id, data, check;
  int ret_code = -1;
 402eba8:	00bfffc4 	movi	r2,-1
 402ebac:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_READ_CPUID(id);
 402ebb0:	0005317a 	rdctl	r2,cpuid
 402ebb4:	e0bffb15 	stw	r2,-20(fp)

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
 402ebb8:	e0bffb17 	ldw	r2,-20(fp)
 402ebbc:	1006943a 	slli	r3,r2,16
 402ebc0:	e0bfff17 	ldw	r2,-4(fp)
 402ebc4:	1884b03a 	or	r2,r3,r2
 402ebc8:	e0bffc15 	stw	r2,-16(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
 402ebcc:	e0bffe17 	ldw	r2,-8(fp)
 402ebd0:	10800317 	ldw	r2,12(r2)
 402ebd4:	e0fffc17 	ldw	r3,-16(fp)
 402ebd8:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 402ebdc:	e0bffe17 	ldw	r2,-8(fp)
 402ebe0:	10800317 	ldw	r2,12(r2)
 402ebe4:	10800037 	ldwio	r2,0(r2)
 402ebe8:	e0bffd15 	stw	r2,-12(fp)

  if ( check == data)
 402ebec:	e0fffd17 	ldw	r3,-12(fp)
 402ebf0:	e0bffc17 	ldw	r2,-16(fp)
 402ebf4:	1880011e 	bne	r3,r2,402ebfc <alt_mutex_trylock+0x68>
  {
    ret_code = 0;
 402ebf8:	e03ffa15 	stw	zero,-24(fp)
  }

  return ret_code;
 402ebfc:	e0bffa17 	ldw	r2,-24(fp)
}
 402ec00:	e037883a 	mov	sp,fp
 402ec04:	df000017 	ldw	fp,0(sp)
 402ec08:	dec00104 	addi	sp,sp,4
 402ec0c:	f800283a 	ret

0402ec10 <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
 402ec10:	defffc04 	addi	sp,sp,-16
 402ec14:	dfc00315 	stw	ra,12(sp)
 402ec18:	df000215 	stw	fp,8(sp)
 402ec1c:	df000204 	addi	fp,sp,8
 402ec20:	e13fff15 	stw	r4,-4(fp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
 402ec24:	d1600f04 	addi	r5,gp,-32708
 402ec28:	e13fff17 	ldw	r4,-4(fp)
 402ec2c:	402f3840 	call	402f384 <alt_find_dev>
 402ec30:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
 402ec34:	e0bffe17 	ldw	r2,-8(fp)
 402ec38:	1000041e 	bne	r2,zero,402ec4c <altera_avalon_mutex_open+0x3c>
  {
    ALT_ERRNO = ENODEV;
 402ec3c:	402eb580 	call	402eb58 <alt_get_errno>
 402ec40:	1007883a 	mov	r3,r2
 402ec44:	008004c4 	movi	r2,19
 402ec48:	18800015 	stw	r2,0(r3)
  }

  return dev;
 402ec4c:	e0bffe17 	ldw	r2,-8(fp)
}
 402ec50:	e037883a 	mov	sp,fp
 402ec54:	dfc00117 	ldw	ra,4(sp)
 402ec58:	df000017 	ldw	fp,0(sp)
 402ec5c:	dec00204 	addi	sp,sp,8
 402ec60:	f800283a 	ret

0402ec64 <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
 402ec64:	defffe04 	addi	sp,sp,-8
 402ec68:	df000115 	stw	fp,4(sp)
 402ec6c:	df000104 	addi	fp,sp,4
 402ec70:	e13fff15 	stw	r4,-4(fp)
  return;
 402ec74:	0001883a 	nop
}
 402ec78:	e037883a 	mov	sp,fp
 402ec7c:	df000017 	ldw	fp,0(sp)
 402ec80:	dec00104 	addi	sp,sp,4
 402ec84:	f800283a 	ret

0402ec88 <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
 402ec88:	defffc04 	addi	sp,sp,-16
 402ec8c:	dfc00315 	stw	ra,12(sp)
 402ec90:	df000215 	stw	fp,8(sp)
 402ec94:	df000204 	addi	fp,sp,8
 402ec98:	e13ffe15 	stw	r4,-8(fp)
 402ec9c:	e17fff15 	stw	r5,-4(fp)
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);

  while ( alt_mutex_trylock( dev, value ) != 0);
 402eca0:	0001883a 	nop
 402eca4:	e17fff17 	ldw	r5,-4(fp)
 402eca8:	e13ffe17 	ldw	r4,-8(fp)
 402ecac:	402eb940 	call	402eb94 <alt_mutex_trylock>
 402ecb0:	103ffc1e 	bne	r2,zero,402eca4 <__alt_data_end+0xfffeeca4>
}
 402ecb4:	0001883a 	nop
 402ecb8:	e037883a 	mov	sp,fp
 402ecbc:	dfc00117 	ldw	ra,4(sp)
 402ecc0:	df000017 	ldw	fp,0(sp)
 402ecc4:	dec00204 	addi	sp,sp,8
 402ecc8:	f800283a 	ret

0402eccc <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 402eccc:	defffa04 	addi	sp,sp,-24
 402ecd0:	dfc00515 	stw	ra,20(sp)
 402ecd4:	df000415 	stw	fp,16(sp)
 402ecd8:	df000404 	addi	fp,sp,16
 402ecdc:	e13ffd15 	stw	r4,-12(fp)
 402ece0:	e17ffe15 	stw	r5,-8(fp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);

  ret_code = alt_mutex_trylock( dev, value);
 402ece4:	e17ffe17 	ldw	r5,-8(fp)
 402ece8:	e13ffd17 	ldw	r4,-12(fp)
 402ecec:	402eb940 	call	402eb94 <alt_mutex_trylock>
 402ecf0:	e0bffc15 	stw	r2,-16(fp)
  if (ret_code)
  {
    ALT_SEM_POST (dev->lock);
  }

  return ret_code;
 402ecf4:	e0bffc17 	ldw	r2,-16(fp)
}
 402ecf8:	e037883a 	mov	sp,fp
 402ecfc:	dfc00117 	ldw	ra,4(sp)
 402ed00:	df000017 	ldw	fp,0(sp)
 402ed04:	dec00204 	addi	sp,sp,8
 402ed08:	f800283a 	ret

0402ed0c <altera_avalon_mutex_unlock>:
 * This function does not check that you own the Mutex if you try to release
 * a Mutex you do not own the behaviour is undefined
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
 402ed0c:	defffd04 	addi	sp,sp,-12
 402ed10:	df000215 	stw	fp,8(sp)
 402ed14:	df000204 	addi	fp,sp,8
 402ed18:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id;
  NIOS2_READ_CPUID(id);
 402ed1c:	0005317a 	rdctl	r2,cpuid
 402ed20:	e0bffe15 	stw	r2,-8(fp)

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
 402ed24:	e0bfff17 	ldw	r2,-4(fp)
 402ed28:	10800317 	ldw	r2,12(r2)
 402ed2c:	10800104 	addi	r2,r2,4
 402ed30:	00c00044 	movi	r3,1
 402ed34:	10c00035 	stwio	r3,0(r2)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
 402ed38:	e0bfff17 	ldw	r2,-4(fp)
 402ed3c:	10800317 	ldw	r2,12(r2)
 402ed40:	e0fffe17 	ldw	r3,-8(fp)
 402ed44:	1806943a 	slli	r3,r3,16
 402ed48:	10c00035 	stwio	r3,0(r2)

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
}
 402ed4c:	0001883a 	nop
 402ed50:	e037883a 	mov	sp,fp
 402ed54:	df000017 	ldw	fp,0(sp)
 402ed58:	dec00104 	addi	sp,sp,4
 402ed5c:	f800283a 	ret

0402ed60 <altera_avalon_mutex_is_mine>:
 * altera_avalon_mutex_is_mine - Do I own the Mutex?
 *
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
 402ed60:	defff904 	addi	sp,sp,-28
 402ed64:	df000615 	stw	fp,24(sp)
 402ed68:	df000604 	addi	fp,sp,24
 402ed6c:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id, data, owner, value;
  int ret_code = 0;
 402ed70:	e03ffa15 	stw	zero,-24(fp)

  NIOS2_READ_CPUID(id);
 402ed74:	0005317a 	rdctl	r2,cpuid
 402ed78:	e0bffb15 	stw	r2,-20(fp)

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 402ed7c:	e0bfff17 	ldw	r2,-4(fp)
 402ed80:	10800317 	ldw	r2,12(r2)
 402ed84:	10800037 	ldwio	r2,0(r2)
 402ed88:	e0bffc15 	stw	r2,-16(fp)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
 402ed8c:	e0bffc17 	ldw	r2,-16(fp)
 402ed90:	1004d43a 	srli	r2,r2,16
 402ed94:	e0bffd15 	stw	r2,-12(fp)
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
 402ed98:	e0fffd17 	ldw	r3,-12(fp)
 402ed9c:	e0bffb17 	ldw	r2,-20(fp)
 402eda0:	1880071e 	bne	r3,r2,402edc0 <altera_avalon_mutex_is_mine+0x60>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
 402eda4:	e0bffc17 	ldw	r2,-16(fp)
 402eda8:	10bfffcc 	andi	r2,r2,65535
 402edac:	e0bffe15 	stw	r2,-8(fp)
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
 402edb0:	e0bffe17 	ldw	r2,-8(fp)
 402edb4:	10000226 	beq	r2,zero,402edc0 <altera_avalon_mutex_is_mine+0x60>
    {
      ret_code = 1;
 402edb8:	00800044 	movi	r2,1
 402edbc:	e0bffa15 	stw	r2,-24(fp)
    }
  }

  return ret_code;
 402edc0:	e0bffa17 	ldw	r2,-24(fp)
}
 402edc4:	e037883a 	mov	sp,fp
 402edc8:	df000017 	ldw	fp,0(sp)
 402edcc:	dec00104 	addi	sp,sp,4
 402edd0:	f800283a 	ret

0402edd4 <altera_avalon_mutex_first_lock>:
 *
 * Has this Mutex been released since reset if not return 1
 * otherwise return 0
 */
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
 402edd4:	defffc04 	addi	sp,sp,-16
 402edd8:	df000315 	stw	fp,12(sp)
 402eddc:	df000304 	addi	fp,sp,12
 402ede0:	e13fff15 	stw	r4,-4(fp)
  alt_u32 data;
  int ret_code = 0;
 402ede4:	e03ffd15 	stw	zero,-12(fp)

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
 402ede8:	e0bfff17 	ldw	r2,-4(fp)
 402edec:	10800317 	ldw	r2,12(r2)
 402edf0:	10800104 	addi	r2,r2,4
 402edf4:	10800037 	ldwio	r2,0(r2)
 402edf8:	e0bffe15 	stw	r2,-8(fp)

  if (data & ALTERA_AVALON_MUTEX_RESET_RESET_MSK) 
 402edfc:	e0bffe17 	ldw	r2,-8(fp)
 402ee00:	1080004c 	andi	r2,r2,1
 402ee04:	10000226 	beq	r2,zero,402ee10 <altera_avalon_mutex_first_lock+0x3c>
  {
    ret_code = 1;
 402ee08:	00800044 	movi	r2,1
 402ee0c:	e0bffd15 	stw	r2,-12(fp)
  }

  return ret_code;
 402ee10:	e0bffd17 	ldw	r2,-12(fp)
}
 402ee14:	e037883a 	mov	sp,fp
 402ee18:	df000017 	ldw	fp,0(sp)
 402ee1c:	dec00104 	addi	sp,sp,4
 402ee20:	f800283a 	ret

0402ee24 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 402ee24:	defffa04 	addi	sp,sp,-24
 402ee28:	dfc00515 	stw	ra,20(sp)
 402ee2c:	df000415 	stw	fp,16(sp)
 402ee30:	df000404 	addi	fp,sp,16
 402ee34:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 402ee38:	0007883a 	mov	r3,zero
 402ee3c:	e0bfff17 	ldw	r2,-4(fp)
 402ee40:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 402ee44:	e0bfff17 	ldw	r2,-4(fp)
 402ee48:	10800104 	addi	r2,r2,4
 402ee4c:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402ee50:	0005303a 	rdctl	r2,status
 402ee54:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402ee58:	e0fffd17 	ldw	r3,-12(fp)
 402ee5c:	00bfff84 	movi	r2,-2
 402ee60:	1884703a 	and	r2,r3,r2
 402ee64:	1001703a 	wrctl	status,r2
  
  return context;
 402ee68:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 402ee6c:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 402ee70:	402fb180 	call	402fb18 <alt_tick>
 402ee74:	e0bffc17 	ldw	r2,-16(fp)
 402ee78:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402ee7c:	e0bffe17 	ldw	r2,-8(fp)
 402ee80:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 402ee84:	0001883a 	nop
 402ee88:	e037883a 	mov	sp,fp
 402ee8c:	dfc00117 	ldw	ra,4(sp)
 402ee90:	df000017 	ldw	fp,0(sp)
 402ee94:	dec00204 	addi	sp,sp,8
 402ee98:	f800283a 	ret

0402ee9c <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 402ee9c:	defff804 	addi	sp,sp,-32
 402eea0:	dfc00715 	stw	ra,28(sp)
 402eea4:	df000615 	stw	fp,24(sp)
 402eea8:	df000604 	addi	fp,sp,24
 402eeac:	e13ffc15 	stw	r4,-16(fp)
 402eeb0:	e17ffd15 	stw	r5,-12(fp)
 402eeb4:	e1bffe15 	stw	r6,-8(fp)
 402eeb8:	e1ffff15 	stw	r7,-4(fp)
 402eebc:	e0bfff17 	ldw	r2,-4(fp)
 402eec0:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 402eec4:	d0a71917 	ldw	r2,-25500(gp)
 402eec8:	1000021e 	bne	r2,zero,402eed4 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 402eecc:	e0bffb17 	ldw	r2,-20(fp)
 402eed0:	d0a71915 	stw	r2,-25500(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 402eed4:	e0bffc17 	ldw	r2,-16(fp)
 402eed8:	10800104 	addi	r2,r2,4
 402eedc:	00c001c4 	movi	r3,7
 402eee0:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 402eee4:	d8000015 	stw	zero,0(sp)
 402eee8:	e1fffc17 	ldw	r7,-16(fp)
 402eeec:	018100f4 	movhi	r6,1027
 402eef0:	31bb8904 	addi	r6,r6,-4572
 402eef4:	e17ffe17 	ldw	r5,-8(fp)
 402eef8:	e13ffd17 	ldw	r4,-12(fp)
 402eefc:	402f4480 	call	402f448 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 402ef00:	0001883a 	nop
 402ef04:	e037883a 	mov	sp,fp
 402ef08:	dfc00117 	ldw	ra,4(sp)
 402ef0c:	df000017 	ldw	fp,0(sp)
 402ef10:	dec00204 	addi	sp,sp,8
 402ef14:	f800283a 	ret

0402ef18 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 402ef18:	defff504 	addi	sp,sp,-44
 402ef1c:	df000a15 	stw	fp,40(sp)
 402ef20:	df000a04 	addi	fp,sp,40
 402ef24:	e13ffc15 	stw	r4,-16(fp)
 402ef28:	e17ffd15 	stw	r5,-12(fp)
 402ef2c:	e1bffe15 	stw	r6,-8(fp)
 402ef30:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 402ef34:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 402ef38:	d0a71917 	ldw	r2,-25500(gp)
  
  if (alt_ticks_per_second ())
 402ef3c:	10003c26 	beq	r2,zero,402f030 <alt_alarm_start+0x118>
  {
    if (alarm)
 402ef40:	e0bffc17 	ldw	r2,-16(fp)
 402ef44:	10003826 	beq	r2,zero,402f028 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 402ef48:	e0bffc17 	ldw	r2,-16(fp)
 402ef4c:	e0fffe17 	ldw	r3,-8(fp)
 402ef50:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 402ef54:	e0bffc17 	ldw	r2,-16(fp)
 402ef58:	e0ffff17 	ldw	r3,-4(fp)
 402ef5c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402ef60:	0005303a 	rdctl	r2,status
 402ef64:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402ef68:	e0fff917 	ldw	r3,-28(fp)
 402ef6c:	00bfff84 	movi	r2,-2
 402ef70:	1884703a 	and	r2,r3,r2
 402ef74:	1001703a 	wrctl	status,r2
  
  return context;
 402ef78:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 402ef7c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 402ef80:	d0a71a17 	ldw	r2,-25496(gp)
      
      current_nticks = alt_nticks();
 402ef84:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 402ef88:	e0fffd17 	ldw	r3,-12(fp)
 402ef8c:	e0bff617 	ldw	r2,-40(fp)
 402ef90:	1885883a 	add	r2,r3,r2
 402ef94:	10c00044 	addi	r3,r2,1
 402ef98:	e0bffc17 	ldw	r2,-16(fp)
 402ef9c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 402efa0:	e0bffc17 	ldw	r2,-16(fp)
 402efa4:	10c00217 	ldw	r3,8(r2)
 402efa8:	e0bff617 	ldw	r2,-40(fp)
 402efac:	1880042e 	bgeu	r3,r2,402efc0 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 402efb0:	e0bffc17 	ldw	r2,-16(fp)
 402efb4:	00c00044 	movi	r3,1
 402efb8:	10c00405 	stb	r3,16(r2)
 402efbc:	00000206 	br	402efc8 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 402efc0:	e0bffc17 	ldw	r2,-16(fp)
 402efc4:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 402efc8:	e0bffc17 	ldw	r2,-16(fp)
 402efcc:	d0e01204 	addi	r3,gp,-32696
 402efd0:	e0fffa15 	stw	r3,-24(fp)
 402efd4:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 402efd8:	e0bffb17 	ldw	r2,-20(fp)
 402efdc:	e0fffa17 	ldw	r3,-24(fp)
 402efe0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 402efe4:	e0bffa17 	ldw	r2,-24(fp)
 402efe8:	10c00017 	ldw	r3,0(r2)
 402efec:	e0bffb17 	ldw	r2,-20(fp)
 402eff0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 402eff4:	e0bffa17 	ldw	r2,-24(fp)
 402eff8:	10800017 	ldw	r2,0(r2)
 402effc:	e0fffb17 	ldw	r3,-20(fp)
 402f000:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 402f004:	e0bffa17 	ldw	r2,-24(fp)
 402f008:	e0fffb17 	ldw	r3,-20(fp)
 402f00c:	10c00015 	stw	r3,0(r2)
 402f010:	e0bff817 	ldw	r2,-32(fp)
 402f014:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402f018:	e0bff717 	ldw	r2,-36(fp)
 402f01c:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 402f020:	0005883a 	mov	r2,zero
 402f024:	00000306 	br	402f034 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 402f028:	00bffa84 	movi	r2,-22
 402f02c:	00000106 	br	402f034 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 402f030:	00bfde84 	movi	r2,-134
  }
}
 402f034:	e037883a 	mov	sp,fp
 402f038:	df000017 	ldw	fp,0(sp)
 402f03c:	dec00104 	addi	sp,sp,4
 402f040:	f800283a 	ret

0402f044 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 402f044:	defffa04 	addi	sp,sp,-24
 402f048:	dfc00515 	stw	ra,20(sp)
 402f04c:	df000415 	stw	fp,16(sp)
 402f050:	df000404 	addi	fp,sp,16
 402f054:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 402f058:	008000c4 	movi	r2,3
 402f05c:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 402f060:	e0fffd17 	ldw	r3,-12(fp)
 402f064:	008003f4 	movhi	r2,15
 402f068:	10909004 	addi	r2,r2,16960
 402f06c:	1885383a 	mul	r2,r3,r2
 402f070:	100b883a 	mov	r5,r2
 402f074:	0100bef4 	movhi	r4,763
 402f078:	213c2004 	addi	r4,r4,-3968
 402f07c:	402a5280 	call	402a528 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 402f080:	100b883a 	mov	r5,r2
 402f084:	01200034 	movhi	r4,32768
 402f088:	213fffc4 	addi	r4,r4,-1
 402f08c:	402a5280 	call	402a528 <__udivsi3>
 402f090:	100b883a 	mov	r5,r2
 402f094:	e13fff17 	ldw	r4,-4(fp)
 402f098:	402a5280 	call	402a528 <__udivsi3>
 402f09c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 402f0a0:	e0bffe17 	ldw	r2,-8(fp)
 402f0a4:	10002a26 	beq	r2,zero,402f150 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 402f0a8:	e03ffc15 	stw	zero,-16(fp)
 402f0ac:	00001706 	br	402f10c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 402f0b0:	00a00034 	movhi	r2,32768
 402f0b4:	10bfffc4 	addi	r2,r2,-1
 402f0b8:	10bfffc4 	addi	r2,r2,-1
 402f0bc:	103ffe1e 	bne	r2,zero,402f0b8 <__alt_data_end+0xfffef0b8>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 402f0c0:	e0fffd17 	ldw	r3,-12(fp)
 402f0c4:	008003f4 	movhi	r2,15
 402f0c8:	10909004 	addi	r2,r2,16960
 402f0cc:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 402f0d0:	100b883a 	mov	r5,r2
 402f0d4:	0100bef4 	movhi	r4,763
 402f0d8:	213c2004 	addi	r4,r4,-3968
 402f0dc:	402a5280 	call	402a528 <__udivsi3>
 402f0e0:	100b883a 	mov	r5,r2
 402f0e4:	01200034 	movhi	r4,32768
 402f0e8:	213fffc4 	addi	r4,r4,-1
 402f0ec:	402a5280 	call	402a528 <__udivsi3>
 402f0f0:	1007883a 	mov	r3,r2
 402f0f4:	e0bfff17 	ldw	r2,-4(fp)
 402f0f8:	10c5c83a 	sub	r2,r2,r3
 402f0fc:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 402f100:	e0bffc17 	ldw	r2,-16(fp)
 402f104:	10800044 	addi	r2,r2,1
 402f108:	e0bffc15 	stw	r2,-16(fp)
 402f10c:	e0fffc17 	ldw	r3,-16(fp)
 402f110:	e0bffe17 	ldw	r2,-8(fp)
 402f114:	18bfe616 	blt	r3,r2,402f0b0 <__alt_data_end+0xfffef0b0>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 402f118:	e0fffd17 	ldw	r3,-12(fp)
 402f11c:	008003f4 	movhi	r2,15
 402f120:	10909004 	addi	r2,r2,16960
 402f124:	1885383a 	mul	r2,r3,r2
 402f128:	100b883a 	mov	r5,r2
 402f12c:	0100bef4 	movhi	r4,763
 402f130:	213c2004 	addi	r4,r4,-3968
 402f134:	402a5280 	call	402a528 <__udivsi3>
 402f138:	1007883a 	mov	r3,r2
 402f13c:	e0bfff17 	ldw	r2,-4(fp)
 402f140:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 402f144:	10bfffc4 	addi	r2,r2,-1
 402f148:	103ffe1e 	bne	r2,zero,402f144 <__alt_data_end+0xfffef144>
 402f14c:	00000d06 	br	402f184 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 402f150:	e0fffd17 	ldw	r3,-12(fp)
 402f154:	008003f4 	movhi	r2,15
 402f158:	10909004 	addi	r2,r2,16960
 402f15c:	1885383a 	mul	r2,r3,r2
 402f160:	100b883a 	mov	r5,r2
 402f164:	0100bef4 	movhi	r4,763
 402f168:	213c2004 	addi	r4,r4,-3968
 402f16c:	402a5280 	call	402a528 <__udivsi3>
 402f170:	1007883a 	mov	r3,r2
 402f174:	e0bfff17 	ldw	r2,-4(fp)
 402f178:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 402f17c:	10bfffc4 	addi	r2,r2,-1
 402f180:	00bffe16 	blt	zero,r2,402f17c <__alt_data_end+0xfffef17c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 402f184:	0005883a 	mov	r2,zero
}
 402f188:	e037883a 	mov	sp,fp
 402f18c:	dfc00117 	ldw	ra,4(sp)
 402f190:	df000017 	ldw	fp,0(sp)
 402f194:	dec00204 	addi	sp,sp,8
 402f198:	f800283a 	ret

0402f19c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 402f19c:	defffe04 	addi	sp,sp,-8
 402f1a0:	df000115 	stw	fp,4(sp)
 402f1a4:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 402f1a8:	e03fff15 	stw	zero,-4(fp)
 402f1ac:	00000506 	br	402f1c4 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 402f1b0:	e0bfff17 	ldw	r2,-4(fp)
 402f1b4:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 402f1b8:	e0bfff17 	ldw	r2,-4(fp)
 402f1bc:	10800804 	addi	r2,r2,32
 402f1c0:	e0bfff15 	stw	r2,-4(fp)
 402f1c4:	e0bfff17 	ldw	r2,-4(fp)
 402f1c8:	10820030 	cmpltui	r2,r2,2048
 402f1cc:	103ff81e 	bne	r2,zero,402f1b0 <__alt_data_end+0xfffef1b0>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 402f1d0:	0001883a 	nop
 402f1d4:	e037883a 	mov	sp,fp
 402f1d8:	df000017 	ldw	fp,0(sp)
 402f1dc:	dec00104 	addi	sp,sp,4
 402f1e0:	f800283a 	ret

0402f1e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 402f1e4:	defffe04 	addi	sp,sp,-8
 402f1e8:	dfc00115 	stw	ra,4(sp)
 402f1ec:	df000015 	stw	fp,0(sp)
 402f1f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 402f1f4:	d0a00b17 	ldw	r2,-32724(gp)
 402f1f8:	10000326 	beq	r2,zero,402f208 <alt_get_errno+0x24>
 402f1fc:	d0a00b17 	ldw	r2,-32724(gp)
 402f200:	103ee83a 	callr	r2
 402f204:	00000106 	br	402f20c <alt_get_errno+0x28>
 402f208:	d0a71404 	addi	r2,gp,-25520
}
 402f20c:	e037883a 	mov	sp,fp
 402f210:	dfc00117 	ldw	ra,4(sp)
 402f214:	df000017 	ldw	fp,0(sp)
 402f218:	dec00204 	addi	sp,sp,8
 402f21c:	f800283a 	ret

0402f220 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 402f220:	defffa04 	addi	sp,sp,-24
 402f224:	dfc00515 	stw	ra,20(sp)
 402f228:	df000415 	stw	fp,16(sp)
 402f22c:	df000404 	addi	fp,sp,16
 402f230:	e13ffe15 	stw	r4,-8(fp)
 402f234:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 402f238:	e0bffe17 	ldw	r2,-8(fp)
 402f23c:	10000326 	beq	r2,zero,402f24c <alt_dev_llist_insert+0x2c>
 402f240:	e0bffe17 	ldw	r2,-8(fp)
 402f244:	10800217 	ldw	r2,8(r2)
 402f248:	1000061e 	bne	r2,zero,402f264 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 402f24c:	402f1e40 	call	402f1e4 <alt_get_errno>
 402f250:	1007883a 	mov	r3,r2
 402f254:	00800584 	movi	r2,22
 402f258:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 402f25c:	00bffa84 	movi	r2,-22
 402f260:	00001306 	br	402f2b0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 402f264:	e0bffe17 	ldw	r2,-8(fp)
 402f268:	e0ffff17 	ldw	r3,-4(fp)
 402f26c:	e0fffc15 	stw	r3,-16(fp)
 402f270:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 402f274:	e0bffd17 	ldw	r2,-12(fp)
 402f278:	e0fffc17 	ldw	r3,-16(fp)
 402f27c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 402f280:	e0bffc17 	ldw	r2,-16(fp)
 402f284:	10c00017 	ldw	r3,0(r2)
 402f288:	e0bffd17 	ldw	r2,-12(fp)
 402f28c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 402f290:	e0bffc17 	ldw	r2,-16(fp)
 402f294:	10800017 	ldw	r2,0(r2)
 402f298:	e0fffd17 	ldw	r3,-12(fp)
 402f29c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 402f2a0:	e0bffc17 	ldw	r2,-16(fp)
 402f2a4:	e0fffd17 	ldw	r3,-12(fp)
 402f2a8:	10c00015 	stw	r3,0(r2)

  return 0;  
 402f2ac:	0005883a 	mov	r2,zero
}
 402f2b0:	e037883a 	mov	sp,fp
 402f2b4:	dfc00117 	ldw	ra,4(sp)
 402f2b8:	df000017 	ldw	fp,0(sp)
 402f2bc:	dec00204 	addi	sp,sp,8
 402f2c0:	f800283a 	ret

0402f2c4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 402f2c4:	defffd04 	addi	sp,sp,-12
 402f2c8:	dfc00215 	stw	ra,8(sp)
 402f2cc:	df000115 	stw	fp,4(sp)
 402f2d0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 402f2d4:	008100f4 	movhi	r2,1027
 402f2d8:	1080ab04 	addi	r2,r2,684
 402f2dc:	e0bfff15 	stw	r2,-4(fp)
 402f2e0:	00000606 	br	402f2fc <_do_ctors+0x38>
        (*ctor) (); 
 402f2e4:	e0bfff17 	ldw	r2,-4(fp)
 402f2e8:	10800017 	ldw	r2,0(r2)
 402f2ec:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 402f2f0:	e0bfff17 	ldw	r2,-4(fp)
 402f2f4:	10bfff04 	addi	r2,r2,-4
 402f2f8:	e0bfff15 	stw	r2,-4(fp)
 402f2fc:	e0ffff17 	ldw	r3,-4(fp)
 402f300:	008100f4 	movhi	r2,1027
 402f304:	1080ac04 	addi	r2,r2,688
 402f308:	18bff62e 	bgeu	r3,r2,402f2e4 <__alt_data_end+0xfffef2e4>
        (*ctor) (); 
}
 402f30c:	0001883a 	nop
 402f310:	e037883a 	mov	sp,fp
 402f314:	dfc00117 	ldw	ra,4(sp)
 402f318:	df000017 	ldw	fp,0(sp)
 402f31c:	dec00204 	addi	sp,sp,8
 402f320:	f800283a 	ret

0402f324 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 402f324:	defffd04 	addi	sp,sp,-12
 402f328:	dfc00215 	stw	ra,8(sp)
 402f32c:	df000115 	stw	fp,4(sp)
 402f330:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 402f334:	008100f4 	movhi	r2,1027
 402f338:	1080ab04 	addi	r2,r2,684
 402f33c:	e0bfff15 	stw	r2,-4(fp)
 402f340:	00000606 	br	402f35c <_do_dtors+0x38>
        (*dtor) (); 
 402f344:	e0bfff17 	ldw	r2,-4(fp)
 402f348:	10800017 	ldw	r2,0(r2)
 402f34c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 402f350:	e0bfff17 	ldw	r2,-4(fp)
 402f354:	10bfff04 	addi	r2,r2,-4
 402f358:	e0bfff15 	stw	r2,-4(fp)
 402f35c:	e0ffff17 	ldw	r3,-4(fp)
 402f360:	008100f4 	movhi	r2,1027
 402f364:	1080ac04 	addi	r2,r2,688
 402f368:	18bff62e 	bgeu	r3,r2,402f344 <__alt_data_end+0xfffef344>
        (*dtor) (); 
}
 402f36c:	0001883a 	nop
 402f370:	e037883a 	mov	sp,fp
 402f374:	dfc00117 	ldw	ra,4(sp)
 402f378:	df000017 	ldw	fp,0(sp)
 402f37c:	dec00204 	addi	sp,sp,8
 402f380:	f800283a 	ret

0402f384 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 402f384:	defffa04 	addi	sp,sp,-24
 402f388:	dfc00515 	stw	ra,20(sp)
 402f38c:	df000415 	stw	fp,16(sp)
 402f390:	df000404 	addi	fp,sp,16
 402f394:	e13ffe15 	stw	r4,-8(fp)
 402f398:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 402f39c:	e0bfff17 	ldw	r2,-4(fp)
 402f3a0:	10800017 	ldw	r2,0(r2)
 402f3a4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 402f3a8:	e13ffe17 	ldw	r4,-8(fp)
 402f3ac:	4026df00 	call	4026df0 <strlen>
 402f3b0:	10800044 	addi	r2,r2,1
 402f3b4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 402f3b8:	00000d06 	br	402f3f0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 402f3bc:	e0bffc17 	ldw	r2,-16(fp)
 402f3c0:	10800217 	ldw	r2,8(r2)
 402f3c4:	e0fffd17 	ldw	r3,-12(fp)
 402f3c8:	180d883a 	mov	r6,r3
 402f3cc:	e17ffe17 	ldw	r5,-8(fp)
 402f3d0:	1009883a 	mov	r4,r2
 402f3d4:	402ff680 	call	402ff68 <memcmp>
 402f3d8:	1000021e 	bne	r2,zero,402f3e4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 402f3dc:	e0bffc17 	ldw	r2,-16(fp)
 402f3e0:	00000706 	br	402f400 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 402f3e4:	e0bffc17 	ldw	r2,-16(fp)
 402f3e8:	10800017 	ldw	r2,0(r2)
 402f3ec:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 402f3f0:	e0fffc17 	ldw	r3,-16(fp)
 402f3f4:	e0bfff17 	ldw	r2,-4(fp)
 402f3f8:	18bff01e 	bne	r3,r2,402f3bc <__alt_data_end+0xfffef3bc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 402f3fc:	0005883a 	mov	r2,zero
}
 402f400:	e037883a 	mov	sp,fp
 402f404:	dfc00117 	ldw	ra,4(sp)
 402f408:	df000017 	ldw	fp,0(sp)
 402f40c:	dec00204 	addi	sp,sp,8
 402f410:	f800283a 	ret

0402f414 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 402f414:	defffe04 	addi	sp,sp,-8
 402f418:	dfc00115 	stw	ra,4(sp)
 402f41c:	df000015 	stw	fp,0(sp)
 402f420:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 402f424:	01440004 	movi	r5,4096
 402f428:	0009883a 	mov	r4,zero
 402f42c:	402fdf00 	call	402fdf0 <alt_icache_flush>
#endif
}
 402f430:	0001883a 	nop
 402f434:	e037883a 	mov	sp,fp
 402f438:	dfc00117 	ldw	ra,4(sp)
 402f43c:	df000017 	ldw	fp,0(sp)
 402f440:	dec00204 	addi	sp,sp,8
 402f444:	f800283a 	ret

0402f448 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 402f448:	defff904 	addi	sp,sp,-28
 402f44c:	dfc00615 	stw	ra,24(sp)
 402f450:	df000515 	stw	fp,20(sp)
 402f454:	df000504 	addi	fp,sp,20
 402f458:	e13ffc15 	stw	r4,-16(fp)
 402f45c:	e17ffd15 	stw	r5,-12(fp)
 402f460:	e1bffe15 	stw	r6,-8(fp)
 402f464:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 402f468:	e0800217 	ldw	r2,8(fp)
 402f46c:	d8800015 	stw	r2,0(sp)
 402f470:	e1ffff17 	ldw	r7,-4(fp)
 402f474:	e1bffe17 	ldw	r6,-8(fp)
 402f478:	e17ffd17 	ldw	r5,-12(fp)
 402f47c:	e13ffc17 	ldw	r4,-16(fp)
 402f480:	402f5f80 	call	402f5f8 <alt_iic_isr_register>
}  
 402f484:	e037883a 	mov	sp,fp
 402f488:	dfc00117 	ldw	ra,4(sp)
 402f48c:	df000017 	ldw	fp,0(sp)
 402f490:	dec00204 	addi	sp,sp,8
 402f494:	f800283a 	ret

0402f498 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 402f498:	defff904 	addi	sp,sp,-28
 402f49c:	df000615 	stw	fp,24(sp)
 402f4a0:	df000604 	addi	fp,sp,24
 402f4a4:	e13ffe15 	stw	r4,-8(fp)
 402f4a8:	e17fff15 	stw	r5,-4(fp)
 402f4ac:	e0bfff17 	ldw	r2,-4(fp)
 402f4b0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402f4b4:	0005303a 	rdctl	r2,status
 402f4b8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402f4bc:	e0fffb17 	ldw	r3,-20(fp)
 402f4c0:	00bfff84 	movi	r2,-2
 402f4c4:	1884703a 	and	r2,r3,r2
 402f4c8:	1001703a 	wrctl	status,r2
  
  return context;
 402f4cc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 402f4d0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 402f4d4:	00c00044 	movi	r3,1
 402f4d8:	e0bffa17 	ldw	r2,-24(fp)
 402f4dc:	1884983a 	sll	r2,r3,r2
 402f4e0:	1007883a 	mov	r3,r2
 402f4e4:	d0a71817 	ldw	r2,-25504(gp)
 402f4e8:	1884b03a 	or	r2,r3,r2
 402f4ec:	d0a71815 	stw	r2,-25504(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 402f4f0:	d0a71817 	ldw	r2,-25504(gp)
 402f4f4:	100170fa 	wrctl	ienable,r2
 402f4f8:	e0bffc17 	ldw	r2,-16(fp)
 402f4fc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402f500:	e0bffd17 	ldw	r2,-12(fp)
 402f504:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 402f508:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 402f50c:	0001883a 	nop
}
 402f510:	e037883a 	mov	sp,fp
 402f514:	df000017 	ldw	fp,0(sp)
 402f518:	dec00104 	addi	sp,sp,4
 402f51c:	f800283a 	ret

0402f520 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 402f520:	defff904 	addi	sp,sp,-28
 402f524:	df000615 	stw	fp,24(sp)
 402f528:	df000604 	addi	fp,sp,24
 402f52c:	e13ffe15 	stw	r4,-8(fp)
 402f530:	e17fff15 	stw	r5,-4(fp)
 402f534:	e0bfff17 	ldw	r2,-4(fp)
 402f538:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402f53c:	0005303a 	rdctl	r2,status
 402f540:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402f544:	e0fffb17 	ldw	r3,-20(fp)
 402f548:	00bfff84 	movi	r2,-2
 402f54c:	1884703a 	and	r2,r3,r2
 402f550:	1001703a 	wrctl	status,r2
  
  return context;
 402f554:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 402f558:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 402f55c:	00c00044 	movi	r3,1
 402f560:	e0bffa17 	ldw	r2,-24(fp)
 402f564:	1884983a 	sll	r2,r3,r2
 402f568:	0084303a 	nor	r2,zero,r2
 402f56c:	1007883a 	mov	r3,r2
 402f570:	d0a71817 	ldw	r2,-25504(gp)
 402f574:	1884703a 	and	r2,r3,r2
 402f578:	d0a71815 	stw	r2,-25504(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 402f57c:	d0a71817 	ldw	r2,-25504(gp)
 402f580:	100170fa 	wrctl	ienable,r2
 402f584:	e0bffc17 	ldw	r2,-16(fp)
 402f588:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402f58c:	e0bffd17 	ldw	r2,-12(fp)
 402f590:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 402f594:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 402f598:	0001883a 	nop
}
 402f59c:	e037883a 	mov	sp,fp
 402f5a0:	df000017 	ldw	fp,0(sp)
 402f5a4:	dec00104 	addi	sp,sp,4
 402f5a8:	f800283a 	ret

0402f5ac <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 402f5ac:	defffc04 	addi	sp,sp,-16
 402f5b0:	df000315 	stw	fp,12(sp)
 402f5b4:	df000304 	addi	fp,sp,12
 402f5b8:	e13ffe15 	stw	r4,-8(fp)
 402f5bc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 402f5c0:	000530fa 	rdctl	r2,ienable
 402f5c4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 402f5c8:	00c00044 	movi	r3,1
 402f5cc:	e0bfff17 	ldw	r2,-4(fp)
 402f5d0:	1884983a 	sll	r2,r3,r2
 402f5d4:	1007883a 	mov	r3,r2
 402f5d8:	e0bffd17 	ldw	r2,-12(fp)
 402f5dc:	1884703a 	and	r2,r3,r2
 402f5e0:	1004c03a 	cmpne	r2,r2,zero
 402f5e4:	10803fcc 	andi	r2,r2,255
}
 402f5e8:	e037883a 	mov	sp,fp
 402f5ec:	df000017 	ldw	fp,0(sp)
 402f5f0:	dec00104 	addi	sp,sp,4
 402f5f4:	f800283a 	ret

0402f5f8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 402f5f8:	defff504 	addi	sp,sp,-44
 402f5fc:	dfc00a15 	stw	ra,40(sp)
 402f600:	df000915 	stw	fp,36(sp)
 402f604:	df000904 	addi	fp,sp,36
 402f608:	e13ffc15 	stw	r4,-16(fp)
 402f60c:	e17ffd15 	stw	r5,-12(fp)
 402f610:	e1bffe15 	stw	r6,-8(fp)
 402f614:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 402f618:	00bffa84 	movi	r2,-22
 402f61c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 402f620:	e0bffd17 	ldw	r2,-12(fp)
 402f624:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 402f628:	e0bff817 	ldw	r2,-32(fp)
 402f62c:	10800808 	cmpgei	r2,r2,32
 402f630:	1000271e 	bne	r2,zero,402f6d0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402f634:	0005303a 	rdctl	r2,status
 402f638:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402f63c:	e0fffb17 	ldw	r3,-20(fp)
 402f640:	00bfff84 	movi	r2,-2
 402f644:	1884703a 	and	r2,r3,r2
 402f648:	1001703a 	wrctl	status,r2
  
  return context;
 402f64c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 402f650:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 402f654:	008100f4 	movhi	r2,1027
 402f658:	108fa404 	addi	r2,r2,16016
 402f65c:	e0fff817 	ldw	r3,-32(fp)
 402f660:	180690fa 	slli	r3,r3,3
 402f664:	10c5883a 	add	r2,r2,r3
 402f668:	e0fffe17 	ldw	r3,-8(fp)
 402f66c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 402f670:	008100f4 	movhi	r2,1027
 402f674:	108fa404 	addi	r2,r2,16016
 402f678:	e0fff817 	ldw	r3,-32(fp)
 402f67c:	180690fa 	slli	r3,r3,3
 402f680:	10c5883a 	add	r2,r2,r3
 402f684:	10800104 	addi	r2,r2,4
 402f688:	e0ffff17 	ldw	r3,-4(fp)
 402f68c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 402f690:	e0bffe17 	ldw	r2,-8(fp)
 402f694:	10000526 	beq	r2,zero,402f6ac <alt_iic_isr_register+0xb4>
 402f698:	e0bff817 	ldw	r2,-32(fp)
 402f69c:	100b883a 	mov	r5,r2
 402f6a0:	e13ffc17 	ldw	r4,-16(fp)
 402f6a4:	402f4980 	call	402f498 <alt_ic_irq_enable>
 402f6a8:	00000406 	br	402f6bc <alt_iic_isr_register+0xc4>
 402f6ac:	e0bff817 	ldw	r2,-32(fp)
 402f6b0:	100b883a 	mov	r5,r2
 402f6b4:	e13ffc17 	ldw	r4,-16(fp)
 402f6b8:	402f5200 	call	402f520 <alt_ic_irq_disable>
 402f6bc:	e0bff715 	stw	r2,-36(fp)
 402f6c0:	e0bffa17 	ldw	r2,-24(fp)
 402f6c4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402f6c8:	e0bff917 	ldw	r2,-28(fp)
 402f6cc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 402f6d0:	e0bff717 	ldw	r2,-36(fp)
}
 402f6d4:	e037883a 	mov	sp,fp
 402f6d8:	dfc00117 	ldw	ra,4(sp)
 402f6dc:	df000017 	ldw	fp,0(sp)
 402f6e0:	dec00204 	addi	sp,sp,8
 402f6e4:	f800283a 	ret

0402f6e8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 402f6e8:	defff904 	addi	sp,sp,-28
 402f6ec:	dfc00615 	stw	ra,24(sp)
 402f6f0:	df000515 	stw	fp,20(sp)
 402f6f4:	df000504 	addi	fp,sp,20
 402f6f8:	e13ffc15 	stw	r4,-16(fp)
 402f6fc:	e17ffd15 	stw	r5,-12(fp)
 402f700:	e1bffe15 	stw	r6,-8(fp)
 402f704:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 402f708:	e1bfff17 	ldw	r6,-4(fp)
 402f70c:	e17ffe17 	ldw	r5,-8(fp)
 402f710:	e13ffd17 	ldw	r4,-12(fp)
 402f714:	402f9280 	call	402f928 <open>
 402f718:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 402f71c:	e0bffb17 	ldw	r2,-20(fp)
 402f720:	10001c16 	blt	r2,zero,402f794 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 402f724:	008100f4 	movhi	r2,1027
 402f728:	1083cb04 	addi	r2,r2,3884
 402f72c:	e0fffb17 	ldw	r3,-20(fp)
 402f730:	18c00324 	muli	r3,r3,12
 402f734:	10c5883a 	add	r2,r2,r3
 402f738:	10c00017 	ldw	r3,0(r2)
 402f73c:	e0bffc17 	ldw	r2,-16(fp)
 402f740:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 402f744:	008100f4 	movhi	r2,1027
 402f748:	1083cb04 	addi	r2,r2,3884
 402f74c:	e0fffb17 	ldw	r3,-20(fp)
 402f750:	18c00324 	muli	r3,r3,12
 402f754:	10c5883a 	add	r2,r2,r3
 402f758:	10800104 	addi	r2,r2,4
 402f75c:	10c00017 	ldw	r3,0(r2)
 402f760:	e0bffc17 	ldw	r2,-16(fp)
 402f764:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 402f768:	008100f4 	movhi	r2,1027
 402f76c:	1083cb04 	addi	r2,r2,3884
 402f770:	e0fffb17 	ldw	r3,-20(fp)
 402f774:	18c00324 	muli	r3,r3,12
 402f778:	10c5883a 	add	r2,r2,r3
 402f77c:	10800204 	addi	r2,r2,8
 402f780:	10c00017 	ldw	r3,0(r2)
 402f784:	e0bffc17 	ldw	r2,-16(fp)
 402f788:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 402f78c:	e13ffb17 	ldw	r4,-20(fp)
 402f790:	402d3480 	call	402d348 <alt_release_fd>
  }
} 
 402f794:	0001883a 	nop
 402f798:	e037883a 	mov	sp,fp
 402f79c:	dfc00117 	ldw	ra,4(sp)
 402f7a0:	df000017 	ldw	fp,0(sp)
 402f7a4:	dec00204 	addi	sp,sp,8
 402f7a8:	f800283a 	ret

0402f7ac <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 402f7ac:	defffb04 	addi	sp,sp,-20
 402f7b0:	dfc00415 	stw	ra,16(sp)
 402f7b4:	df000315 	stw	fp,12(sp)
 402f7b8:	df000304 	addi	fp,sp,12
 402f7bc:	e13ffd15 	stw	r4,-12(fp)
 402f7c0:	e17ffe15 	stw	r5,-8(fp)
 402f7c4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 402f7c8:	01c07fc4 	movi	r7,511
 402f7cc:	01800044 	movi	r6,1
 402f7d0:	e17ffd17 	ldw	r5,-12(fp)
 402f7d4:	010100f4 	movhi	r4,1027
 402f7d8:	2103ce04 	addi	r4,r4,3896
 402f7dc:	402f6e80 	call	402f6e8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 402f7e0:	01c07fc4 	movi	r7,511
 402f7e4:	000d883a 	mov	r6,zero
 402f7e8:	e17ffe17 	ldw	r5,-8(fp)
 402f7ec:	010100f4 	movhi	r4,1027
 402f7f0:	2103cb04 	addi	r4,r4,3884
 402f7f4:	402f6e80 	call	402f6e8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 402f7f8:	01c07fc4 	movi	r7,511
 402f7fc:	01800044 	movi	r6,1
 402f800:	e17fff17 	ldw	r5,-4(fp)
 402f804:	010100f4 	movhi	r4,1027
 402f808:	2103d104 	addi	r4,r4,3908
 402f80c:	402f6e80 	call	402f6e8 <alt_open_fd>
}  
 402f810:	0001883a 	nop
 402f814:	e037883a 	mov	sp,fp
 402f818:	dfc00117 	ldw	ra,4(sp)
 402f81c:	df000017 	ldw	fp,0(sp)
 402f820:	dec00204 	addi	sp,sp,8
 402f824:	f800283a 	ret

0402f828 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 402f828:	defffe04 	addi	sp,sp,-8
 402f82c:	dfc00115 	stw	ra,4(sp)
 402f830:	df000015 	stw	fp,0(sp)
 402f834:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 402f838:	d0a00b17 	ldw	r2,-32724(gp)
 402f83c:	10000326 	beq	r2,zero,402f84c <alt_get_errno+0x24>
 402f840:	d0a00b17 	ldw	r2,-32724(gp)
 402f844:	103ee83a 	callr	r2
 402f848:	00000106 	br	402f850 <alt_get_errno+0x28>
 402f84c:	d0a71404 	addi	r2,gp,-25520
}
 402f850:	e037883a 	mov	sp,fp
 402f854:	dfc00117 	ldw	ra,4(sp)
 402f858:	df000017 	ldw	fp,0(sp)
 402f85c:	dec00204 	addi	sp,sp,8
 402f860:	f800283a 	ret

0402f864 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 402f864:	defffd04 	addi	sp,sp,-12
 402f868:	df000215 	stw	fp,8(sp)
 402f86c:	df000204 	addi	fp,sp,8
 402f870:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 402f874:	e0bfff17 	ldw	r2,-4(fp)
 402f878:	10800217 	ldw	r2,8(r2)
 402f87c:	10d00034 	orhi	r3,r2,16384
 402f880:	e0bfff17 	ldw	r2,-4(fp)
 402f884:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 402f888:	e03ffe15 	stw	zero,-8(fp)
 402f88c:	00001d06 	br	402f904 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 402f890:	008100f4 	movhi	r2,1027
 402f894:	1083cb04 	addi	r2,r2,3884
 402f898:	e0fffe17 	ldw	r3,-8(fp)
 402f89c:	18c00324 	muli	r3,r3,12
 402f8a0:	10c5883a 	add	r2,r2,r3
 402f8a4:	10c00017 	ldw	r3,0(r2)
 402f8a8:	e0bfff17 	ldw	r2,-4(fp)
 402f8ac:	10800017 	ldw	r2,0(r2)
 402f8b0:	1880111e 	bne	r3,r2,402f8f8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 402f8b4:	008100f4 	movhi	r2,1027
 402f8b8:	1083cb04 	addi	r2,r2,3884
 402f8bc:	e0fffe17 	ldw	r3,-8(fp)
 402f8c0:	18c00324 	muli	r3,r3,12
 402f8c4:	10c5883a 	add	r2,r2,r3
 402f8c8:	10800204 	addi	r2,r2,8
 402f8cc:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 402f8d0:	1000090e 	bge	r2,zero,402f8f8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 402f8d4:	e0bffe17 	ldw	r2,-8(fp)
 402f8d8:	10c00324 	muli	r3,r2,12
 402f8dc:	008100f4 	movhi	r2,1027
 402f8e0:	1083cb04 	addi	r2,r2,3884
 402f8e4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 402f8e8:	e0bfff17 	ldw	r2,-4(fp)
 402f8ec:	18800226 	beq	r3,r2,402f8f8 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 402f8f0:	00bffcc4 	movi	r2,-13
 402f8f4:	00000806 	br	402f918 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 402f8f8:	e0bffe17 	ldw	r2,-8(fp)
 402f8fc:	10800044 	addi	r2,r2,1
 402f900:	e0bffe15 	stw	r2,-8(fp)
 402f904:	d0a00a17 	ldw	r2,-32728(gp)
 402f908:	1007883a 	mov	r3,r2
 402f90c:	e0bffe17 	ldw	r2,-8(fp)
 402f910:	18bfdf2e 	bgeu	r3,r2,402f890 <__alt_data_end+0xfffef890>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 402f914:	0005883a 	mov	r2,zero
}
 402f918:	e037883a 	mov	sp,fp
 402f91c:	df000017 	ldw	fp,0(sp)
 402f920:	dec00104 	addi	sp,sp,4
 402f924:	f800283a 	ret

0402f928 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 402f928:	defff604 	addi	sp,sp,-40
 402f92c:	dfc00915 	stw	ra,36(sp)
 402f930:	df000815 	stw	fp,32(sp)
 402f934:	df000804 	addi	fp,sp,32
 402f938:	e13ffd15 	stw	r4,-12(fp)
 402f93c:	e17ffe15 	stw	r5,-8(fp)
 402f940:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 402f944:	00bfffc4 	movi	r2,-1
 402f948:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 402f94c:	00bffb44 	movi	r2,-19
 402f950:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 402f954:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 402f958:	d1600804 	addi	r5,gp,-32736
 402f95c:	e13ffd17 	ldw	r4,-12(fp)
 402f960:	402f3840 	call	402f384 <alt_find_dev>
 402f964:	e0bff815 	stw	r2,-32(fp)
 402f968:	e0bff817 	ldw	r2,-32(fp)
 402f96c:	1000051e 	bne	r2,zero,402f984 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 402f970:	e13ffd17 	ldw	r4,-12(fp)
 402f974:	402fc440 	call	402fc44 <alt_find_file>
 402f978:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 402f97c:	00800044 	movi	r2,1
 402f980:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 402f984:	e0bff817 	ldw	r2,-32(fp)
 402f988:	10002926 	beq	r2,zero,402fa30 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 402f98c:	e13ff817 	ldw	r4,-32(fp)
 402f990:	402fd4c0 	call	402fd4c <alt_get_fd>
 402f994:	e0bff915 	stw	r2,-28(fp)
 402f998:	e0bff917 	ldw	r2,-28(fp)
 402f99c:	1000030e 	bge	r2,zero,402f9ac <open+0x84>
    {
      status = index;
 402f9a0:	e0bff917 	ldw	r2,-28(fp)
 402f9a4:	e0bffa15 	stw	r2,-24(fp)
 402f9a8:	00002306 	br	402fa38 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 402f9ac:	e0bff917 	ldw	r2,-28(fp)
 402f9b0:	10c00324 	muli	r3,r2,12
 402f9b4:	008100f4 	movhi	r2,1027
 402f9b8:	1083cb04 	addi	r2,r2,3884
 402f9bc:	1885883a 	add	r2,r3,r2
 402f9c0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 402f9c4:	e0fffe17 	ldw	r3,-8(fp)
 402f9c8:	00900034 	movhi	r2,16384
 402f9cc:	10bfffc4 	addi	r2,r2,-1
 402f9d0:	1886703a 	and	r3,r3,r2
 402f9d4:	e0bffc17 	ldw	r2,-16(fp)
 402f9d8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 402f9dc:	e0bffb17 	ldw	r2,-20(fp)
 402f9e0:	1000051e 	bne	r2,zero,402f9f8 <open+0xd0>
 402f9e4:	e13ffc17 	ldw	r4,-16(fp)
 402f9e8:	402f8640 	call	402f864 <alt_file_locked>
 402f9ec:	e0bffa15 	stw	r2,-24(fp)
 402f9f0:	e0bffa17 	ldw	r2,-24(fp)
 402f9f4:	10001016 	blt	r2,zero,402fa38 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 402f9f8:	e0bff817 	ldw	r2,-32(fp)
 402f9fc:	10800317 	ldw	r2,12(r2)
 402fa00:	10000826 	beq	r2,zero,402fa24 <open+0xfc>
 402fa04:	e0bff817 	ldw	r2,-32(fp)
 402fa08:	10800317 	ldw	r2,12(r2)
 402fa0c:	e1ffff17 	ldw	r7,-4(fp)
 402fa10:	e1bffe17 	ldw	r6,-8(fp)
 402fa14:	e17ffd17 	ldw	r5,-12(fp)
 402fa18:	e13ffc17 	ldw	r4,-16(fp)
 402fa1c:	103ee83a 	callr	r2
 402fa20:	00000106 	br	402fa28 <open+0x100>
 402fa24:	0005883a 	mov	r2,zero
 402fa28:	e0bffa15 	stw	r2,-24(fp)
 402fa2c:	00000206 	br	402fa38 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 402fa30:	00bffb44 	movi	r2,-19
 402fa34:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 402fa38:	e0bffa17 	ldw	r2,-24(fp)
 402fa3c:	1000090e 	bge	r2,zero,402fa64 <open+0x13c>
  {
    alt_release_fd (index);  
 402fa40:	e13ff917 	ldw	r4,-28(fp)
 402fa44:	402d3480 	call	402d348 <alt_release_fd>
    ALT_ERRNO = -status;
 402fa48:	402f8280 	call	402f828 <alt_get_errno>
 402fa4c:	1007883a 	mov	r3,r2
 402fa50:	e0bffa17 	ldw	r2,-24(fp)
 402fa54:	0085c83a 	sub	r2,zero,r2
 402fa58:	18800015 	stw	r2,0(r3)
    return -1;
 402fa5c:	00bfffc4 	movi	r2,-1
 402fa60:	00000106 	br	402fa68 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 402fa64:	e0bff917 	ldw	r2,-28(fp)
}
 402fa68:	e037883a 	mov	sp,fp
 402fa6c:	dfc00117 	ldw	ra,4(sp)
 402fa70:	df000017 	ldw	fp,0(sp)
 402fa74:	dec00204 	addi	sp,sp,8
 402fa78:	f800283a 	ret

0402fa7c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 402fa7c:	defffa04 	addi	sp,sp,-24
 402fa80:	df000515 	stw	fp,20(sp)
 402fa84:	df000504 	addi	fp,sp,20
 402fa88:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402fa8c:	0005303a 	rdctl	r2,status
 402fa90:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402fa94:	e0fffc17 	ldw	r3,-16(fp)
 402fa98:	00bfff84 	movi	r2,-2
 402fa9c:	1884703a 	and	r2,r3,r2
 402faa0:	1001703a 	wrctl	status,r2
  
  return context;
 402faa4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 402faa8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 402faac:	e0bfff17 	ldw	r2,-4(fp)
 402fab0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 402fab4:	e0bffd17 	ldw	r2,-12(fp)
 402fab8:	10800017 	ldw	r2,0(r2)
 402fabc:	e0fffd17 	ldw	r3,-12(fp)
 402fac0:	18c00117 	ldw	r3,4(r3)
 402fac4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 402fac8:	e0bffd17 	ldw	r2,-12(fp)
 402facc:	10800117 	ldw	r2,4(r2)
 402fad0:	e0fffd17 	ldw	r3,-12(fp)
 402fad4:	18c00017 	ldw	r3,0(r3)
 402fad8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 402fadc:	e0bffd17 	ldw	r2,-12(fp)
 402fae0:	e0fffd17 	ldw	r3,-12(fp)
 402fae4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 402fae8:	e0bffd17 	ldw	r2,-12(fp)
 402faec:	e0fffd17 	ldw	r3,-12(fp)
 402faf0:	10c00015 	stw	r3,0(r2)
 402faf4:	e0bffb17 	ldw	r2,-20(fp)
 402faf8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402fafc:	e0bffe17 	ldw	r2,-8(fp)
 402fb00:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 402fb04:	0001883a 	nop
 402fb08:	e037883a 	mov	sp,fp
 402fb0c:	df000017 	ldw	fp,0(sp)
 402fb10:	dec00104 	addi	sp,sp,4
 402fb14:	f800283a 	ret

0402fb18 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 402fb18:	defffb04 	addi	sp,sp,-20
 402fb1c:	dfc00415 	stw	ra,16(sp)
 402fb20:	df000315 	stw	fp,12(sp)
 402fb24:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 402fb28:	d0a01217 	ldw	r2,-32696(gp)
 402fb2c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 402fb30:	d0a71a17 	ldw	r2,-25496(gp)
 402fb34:	10800044 	addi	r2,r2,1
 402fb38:	d0a71a15 	stw	r2,-25496(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 402fb3c:	00002e06 	br	402fbf8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 402fb40:	e0bffd17 	ldw	r2,-12(fp)
 402fb44:	10800017 	ldw	r2,0(r2)
 402fb48:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 402fb4c:	e0bffd17 	ldw	r2,-12(fp)
 402fb50:	10800403 	ldbu	r2,16(r2)
 402fb54:	10803fcc 	andi	r2,r2,255
 402fb58:	10000426 	beq	r2,zero,402fb6c <alt_tick+0x54>
 402fb5c:	d0a71a17 	ldw	r2,-25496(gp)
 402fb60:	1000021e 	bne	r2,zero,402fb6c <alt_tick+0x54>
    {
      alarm->rollover = 0;
 402fb64:	e0bffd17 	ldw	r2,-12(fp)
 402fb68:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 402fb6c:	e0bffd17 	ldw	r2,-12(fp)
 402fb70:	10800217 	ldw	r2,8(r2)
 402fb74:	d0e71a17 	ldw	r3,-25496(gp)
 402fb78:	18801d36 	bltu	r3,r2,402fbf0 <alt_tick+0xd8>
 402fb7c:	e0bffd17 	ldw	r2,-12(fp)
 402fb80:	10800403 	ldbu	r2,16(r2)
 402fb84:	10803fcc 	andi	r2,r2,255
 402fb88:	1000191e 	bne	r2,zero,402fbf0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 402fb8c:	e0bffd17 	ldw	r2,-12(fp)
 402fb90:	10800317 	ldw	r2,12(r2)
 402fb94:	e0fffd17 	ldw	r3,-12(fp)
 402fb98:	18c00517 	ldw	r3,20(r3)
 402fb9c:	1809883a 	mov	r4,r3
 402fba0:	103ee83a 	callr	r2
 402fba4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 402fba8:	e0bfff17 	ldw	r2,-4(fp)
 402fbac:	1000031e 	bne	r2,zero,402fbbc <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 402fbb0:	e13ffd17 	ldw	r4,-12(fp)
 402fbb4:	402fa7c0 	call	402fa7c <alt_alarm_stop>
 402fbb8:	00000d06 	br	402fbf0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 402fbbc:	e0bffd17 	ldw	r2,-12(fp)
 402fbc0:	10c00217 	ldw	r3,8(r2)
 402fbc4:	e0bfff17 	ldw	r2,-4(fp)
 402fbc8:	1887883a 	add	r3,r3,r2
 402fbcc:	e0bffd17 	ldw	r2,-12(fp)
 402fbd0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 402fbd4:	e0bffd17 	ldw	r2,-12(fp)
 402fbd8:	10c00217 	ldw	r3,8(r2)
 402fbdc:	d0a71a17 	ldw	r2,-25496(gp)
 402fbe0:	1880032e 	bgeu	r3,r2,402fbf0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 402fbe4:	e0bffd17 	ldw	r2,-12(fp)
 402fbe8:	00c00044 	movi	r3,1
 402fbec:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 402fbf0:	e0bffe17 	ldw	r2,-8(fp)
 402fbf4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 402fbf8:	e0fffd17 	ldw	r3,-12(fp)
 402fbfc:	d0a01204 	addi	r2,gp,-32696
 402fc00:	18bfcf1e 	bne	r3,r2,402fb40 <__alt_data_end+0xfffefb40>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 402fc04:	0001883a 	nop
}
 402fc08:	0001883a 	nop
 402fc0c:	e037883a 	mov	sp,fp
 402fc10:	dfc00117 	ldw	ra,4(sp)
 402fc14:	df000017 	ldw	fp,0(sp)
 402fc18:	dec00204 	addi	sp,sp,8
 402fc1c:	f800283a 	ret

0402fc20 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 402fc20:	deffff04 	addi	sp,sp,-4
 402fc24:	df000015 	stw	fp,0(sp)
 402fc28:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 402fc2c:	000170fa 	wrctl	ienable,zero
}
 402fc30:	0001883a 	nop
 402fc34:	e037883a 	mov	sp,fp
 402fc38:	df000017 	ldw	fp,0(sp)
 402fc3c:	dec00104 	addi	sp,sp,4
 402fc40:	f800283a 	ret

0402fc44 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 402fc44:	defffb04 	addi	sp,sp,-20
 402fc48:	dfc00415 	stw	ra,16(sp)
 402fc4c:	df000315 	stw	fp,12(sp)
 402fc50:	df000304 	addi	fp,sp,12
 402fc54:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 402fc58:	d0a00617 	ldw	r2,-32744(gp)
 402fc5c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 402fc60:	00003106 	br	402fd28 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 402fc64:	e0bffd17 	ldw	r2,-12(fp)
 402fc68:	10800217 	ldw	r2,8(r2)
 402fc6c:	1009883a 	mov	r4,r2
 402fc70:	4026df00 	call	4026df0 <strlen>
 402fc74:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 402fc78:	e0bffd17 	ldw	r2,-12(fp)
 402fc7c:	10c00217 	ldw	r3,8(r2)
 402fc80:	e0bffe17 	ldw	r2,-8(fp)
 402fc84:	10bfffc4 	addi	r2,r2,-1
 402fc88:	1885883a 	add	r2,r3,r2
 402fc8c:	10800003 	ldbu	r2,0(r2)
 402fc90:	10803fcc 	andi	r2,r2,255
 402fc94:	1080201c 	xori	r2,r2,128
 402fc98:	10bfe004 	addi	r2,r2,-128
 402fc9c:	10800bd8 	cmpnei	r2,r2,47
 402fca0:	1000031e 	bne	r2,zero,402fcb0 <alt_find_file+0x6c>
    {
      len -= 1;
 402fca4:	e0bffe17 	ldw	r2,-8(fp)
 402fca8:	10bfffc4 	addi	r2,r2,-1
 402fcac:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 402fcb0:	e0bffe17 	ldw	r2,-8(fp)
 402fcb4:	e0ffff17 	ldw	r3,-4(fp)
 402fcb8:	1885883a 	add	r2,r3,r2
 402fcbc:	10800003 	ldbu	r2,0(r2)
 402fcc0:	10803fcc 	andi	r2,r2,255
 402fcc4:	1080201c 	xori	r2,r2,128
 402fcc8:	10bfe004 	addi	r2,r2,-128
 402fccc:	10800be0 	cmpeqi	r2,r2,47
 402fcd0:	1000081e 	bne	r2,zero,402fcf4 <alt_find_file+0xb0>
 402fcd4:	e0bffe17 	ldw	r2,-8(fp)
 402fcd8:	e0ffff17 	ldw	r3,-4(fp)
 402fcdc:	1885883a 	add	r2,r3,r2
 402fce0:	10800003 	ldbu	r2,0(r2)
 402fce4:	10803fcc 	andi	r2,r2,255
 402fce8:	1080201c 	xori	r2,r2,128
 402fcec:	10bfe004 	addi	r2,r2,-128
 402fcf0:	10000a1e 	bne	r2,zero,402fd1c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 402fcf4:	e0bffd17 	ldw	r2,-12(fp)
 402fcf8:	10800217 	ldw	r2,8(r2)
 402fcfc:	e0fffe17 	ldw	r3,-8(fp)
 402fd00:	180d883a 	mov	r6,r3
 402fd04:	e17fff17 	ldw	r5,-4(fp)
 402fd08:	1009883a 	mov	r4,r2
 402fd0c:	402ff680 	call	402ff68 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 402fd10:	1000021e 	bne	r2,zero,402fd1c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 402fd14:	e0bffd17 	ldw	r2,-12(fp)
 402fd18:	00000706 	br	402fd38 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 402fd1c:	e0bffd17 	ldw	r2,-12(fp)
 402fd20:	10800017 	ldw	r2,0(r2)
 402fd24:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 402fd28:	e0fffd17 	ldw	r3,-12(fp)
 402fd2c:	d0a00604 	addi	r2,gp,-32744
 402fd30:	18bfcc1e 	bne	r3,r2,402fc64 <__alt_data_end+0xfffefc64>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 402fd34:	0005883a 	mov	r2,zero
}
 402fd38:	e037883a 	mov	sp,fp
 402fd3c:	dfc00117 	ldw	ra,4(sp)
 402fd40:	df000017 	ldw	fp,0(sp)
 402fd44:	dec00204 	addi	sp,sp,8
 402fd48:	f800283a 	ret

0402fd4c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 402fd4c:	defffc04 	addi	sp,sp,-16
 402fd50:	df000315 	stw	fp,12(sp)
 402fd54:	df000304 	addi	fp,sp,12
 402fd58:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 402fd5c:	00bffa04 	movi	r2,-24
 402fd60:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 402fd64:	e03ffd15 	stw	zero,-12(fp)
 402fd68:	00001906 	br	402fdd0 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 402fd6c:	008100f4 	movhi	r2,1027
 402fd70:	1083cb04 	addi	r2,r2,3884
 402fd74:	e0fffd17 	ldw	r3,-12(fp)
 402fd78:	18c00324 	muli	r3,r3,12
 402fd7c:	10c5883a 	add	r2,r2,r3
 402fd80:	10800017 	ldw	r2,0(r2)
 402fd84:	10000f1e 	bne	r2,zero,402fdc4 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 402fd88:	008100f4 	movhi	r2,1027
 402fd8c:	1083cb04 	addi	r2,r2,3884
 402fd90:	e0fffd17 	ldw	r3,-12(fp)
 402fd94:	18c00324 	muli	r3,r3,12
 402fd98:	10c5883a 	add	r2,r2,r3
 402fd9c:	e0ffff17 	ldw	r3,-4(fp)
 402fda0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 402fda4:	d0e00a17 	ldw	r3,-32728(gp)
 402fda8:	e0bffd17 	ldw	r2,-12(fp)
 402fdac:	1880020e 	bge	r3,r2,402fdb8 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 402fdb0:	e0bffd17 	ldw	r2,-12(fp)
 402fdb4:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
 402fdb8:	e0bffd17 	ldw	r2,-12(fp)
 402fdbc:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 402fdc0:	00000606 	br	402fddc <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 402fdc4:	e0bffd17 	ldw	r2,-12(fp)
 402fdc8:	10800044 	addi	r2,r2,1
 402fdcc:	e0bffd15 	stw	r2,-12(fp)
 402fdd0:	e0bffd17 	ldw	r2,-12(fp)
 402fdd4:	10800810 	cmplti	r2,r2,32
 402fdd8:	103fe41e 	bne	r2,zero,402fd6c <__alt_data_end+0xfffefd6c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 402fddc:	e0bffe17 	ldw	r2,-8(fp)
}
 402fde0:	e037883a 	mov	sp,fp
 402fde4:	df000017 	ldw	fp,0(sp)
 402fde8:	dec00104 	addi	sp,sp,4
 402fdec:	f800283a 	ret

0402fdf0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 402fdf0:	defffb04 	addi	sp,sp,-20
 402fdf4:	df000415 	stw	fp,16(sp)
 402fdf8:	df000404 	addi	fp,sp,16
 402fdfc:	e13ffe15 	stw	r4,-8(fp)
 402fe00:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 402fe04:	e0bfff17 	ldw	r2,-4(fp)
 402fe08:	10840070 	cmpltui	r2,r2,4097
 402fe0c:	1000021e 	bne	r2,zero,402fe18 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 402fe10:	00840004 	movi	r2,4096
 402fe14:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 402fe18:	e0fffe17 	ldw	r3,-8(fp)
 402fe1c:	e0bfff17 	ldw	r2,-4(fp)
 402fe20:	1885883a 	add	r2,r3,r2
 402fe24:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 402fe28:	e0bffe17 	ldw	r2,-8(fp)
 402fe2c:	e0bffc15 	stw	r2,-16(fp)
 402fe30:	00000506 	br	402fe48 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 402fe34:	e0bffc17 	ldw	r2,-16(fp)
 402fe38:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 402fe3c:	e0bffc17 	ldw	r2,-16(fp)
 402fe40:	10800804 	addi	r2,r2,32
 402fe44:	e0bffc15 	stw	r2,-16(fp)
 402fe48:	e0fffc17 	ldw	r3,-16(fp)
 402fe4c:	e0bffd17 	ldw	r2,-12(fp)
 402fe50:	18bff836 	bltu	r3,r2,402fe34 <__alt_data_end+0xfffefe34>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 402fe54:	e0bffe17 	ldw	r2,-8(fp)
 402fe58:	108007cc 	andi	r2,r2,31
 402fe5c:	10000226 	beq	r2,zero,402fe68 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 402fe60:	e0bffc17 	ldw	r2,-16(fp)
 402fe64:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 402fe68:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 402fe6c:	0001883a 	nop
 402fe70:	e037883a 	mov	sp,fp
 402fe74:	df000017 	ldw	fp,0(sp)
 402fe78:	dec00104 	addi	sp,sp,4
 402fe7c:	f800283a 	ret

0402fe80 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 402fe80:	defffe04 	addi	sp,sp,-8
 402fe84:	df000115 	stw	fp,4(sp)
 402fe88:	df000104 	addi	fp,sp,4
 402fe8c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 402fe90:	e0bfff17 	ldw	r2,-4(fp)
 402fe94:	10bffe84 	addi	r2,r2,-6
 402fe98:	10c00428 	cmpgeui	r3,r2,16
 402fe9c:	18001a1e 	bne	r3,zero,402ff08 <alt_exception_cause_generated_bad_addr+0x88>
 402fea0:	100690ba 	slli	r3,r2,2
 402fea4:	008100f4 	movhi	r2,1027
 402fea8:	10bfae04 	addi	r2,r2,-328
 402feac:	1885883a 	add	r2,r3,r2
 402feb0:	10800017 	ldw	r2,0(r2)
 402feb4:	1000683a 	jmp	r2
 402feb8:	0402fef8 	rdprs	r16,zero,3067
 402febc:	0402fef8 	rdprs	r16,zero,3067
 402fec0:	0402ff08 	cmpgei	r16,zero,3068
 402fec4:	0402ff08 	cmpgei	r16,zero,3068
 402fec8:	0402ff08 	cmpgei	r16,zero,3068
 402fecc:	0402fef8 	rdprs	r16,zero,3067
 402fed0:	0402ff00 	call	402ff0 <__alt_mem_sdram_controller_2+0x402ff0>
 402fed4:	0402ff08 	cmpgei	r16,zero,3068
 402fed8:	0402fef8 	rdprs	r16,zero,3067
 402fedc:	0402fef8 	rdprs	r16,zero,3067
 402fee0:	0402ff08 	cmpgei	r16,zero,3068
 402fee4:	0402fef8 	rdprs	r16,zero,3067
 402fee8:	0402ff00 	call	402ff0 <__alt_mem_sdram_controller_2+0x402ff0>
 402feec:	0402ff08 	cmpgei	r16,zero,3068
 402fef0:	0402ff08 	cmpgei	r16,zero,3068
 402fef4:	0402fef8 	rdprs	r16,zero,3067
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 402fef8:	00800044 	movi	r2,1
 402fefc:	00000306 	br	402ff0c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 402ff00:	0005883a 	mov	r2,zero
 402ff04:	00000106 	br	402ff0c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 402ff08:	0005883a 	mov	r2,zero
  }
}
 402ff0c:	e037883a 	mov	sp,fp
 402ff10:	df000017 	ldw	fp,0(sp)
 402ff14:	dec00104 	addi	sp,sp,4
 402ff18:	f800283a 	ret

0402ff1c <atexit>:
 402ff1c:	200b883a 	mov	r5,r4
 402ff20:	000f883a 	mov	r7,zero
 402ff24:	000d883a 	mov	r6,zero
 402ff28:	0009883a 	mov	r4,zero
 402ff2c:	402ffe41 	jmpi	402ffe4 <__register_exitproc>

0402ff30 <exit>:
 402ff30:	defffe04 	addi	sp,sp,-8
 402ff34:	000b883a 	mov	r5,zero
 402ff38:	dc000015 	stw	r16,0(sp)
 402ff3c:	dfc00115 	stw	ra,4(sp)
 402ff40:	2021883a 	mov	r16,r4
 402ff44:	40300fc0 	call	40300fc <__call_exitprocs>
 402ff48:	008100f4 	movhi	r2,1027
 402ff4c:	10887e04 	addi	r2,r2,8696
 402ff50:	11000017 	ldw	r4,0(r2)
 402ff54:	20800f17 	ldw	r2,60(r4)
 402ff58:	10000126 	beq	r2,zero,402ff60 <exit+0x30>
 402ff5c:	103ee83a 	callr	r2
 402ff60:	8009883a 	mov	r4,r16
 402ff64:	403027c0 	call	403027c <_exit>

0402ff68 <memcmp>:
 402ff68:	01c000c4 	movi	r7,3
 402ff6c:	3980192e 	bgeu	r7,r6,402ffd4 <memcmp+0x6c>
 402ff70:	2144b03a 	or	r2,r4,r5
 402ff74:	11c4703a 	and	r2,r2,r7
 402ff78:	10000f26 	beq	r2,zero,402ffb8 <memcmp+0x50>
 402ff7c:	20800003 	ldbu	r2,0(r4)
 402ff80:	28c00003 	ldbu	r3,0(r5)
 402ff84:	10c0151e 	bne	r2,r3,402ffdc <memcmp+0x74>
 402ff88:	31bfff84 	addi	r6,r6,-2
 402ff8c:	01ffffc4 	movi	r7,-1
 402ff90:	00000406 	br	402ffa4 <memcmp+0x3c>
 402ff94:	20800003 	ldbu	r2,0(r4)
 402ff98:	28c00003 	ldbu	r3,0(r5)
 402ff9c:	31bfffc4 	addi	r6,r6,-1
 402ffa0:	10c00e1e 	bne	r2,r3,402ffdc <memcmp+0x74>
 402ffa4:	21000044 	addi	r4,r4,1
 402ffa8:	29400044 	addi	r5,r5,1
 402ffac:	31fff91e 	bne	r6,r7,402ff94 <__alt_data_end+0xfffeff94>
 402ffb0:	0005883a 	mov	r2,zero
 402ffb4:	f800283a 	ret
 402ffb8:	20c00017 	ldw	r3,0(r4)
 402ffbc:	28800017 	ldw	r2,0(r5)
 402ffc0:	18bfee1e 	bne	r3,r2,402ff7c <__alt_data_end+0xfffeff7c>
 402ffc4:	31bfff04 	addi	r6,r6,-4
 402ffc8:	21000104 	addi	r4,r4,4
 402ffcc:	29400104 	addi	r5,r5,4
 402ffd0:	39bff936 	bltu	r7,r6,402ffb8 <__alt_data_end+0xfffeffb8>
 402ffd4:	303fe91e 	bne	r6,zero,402ff7c <__alt_data_end+0xfffeff7c>
 402ffd8:	003ff506 	br	402ffb0 <__alt_data_end+0xfffeffb0>
 402ffdc:	10c5c83a 	sub	r2,r2,r3
 402ffe0:	f800283a 	ret

0402ffe4 <__register_exitproc>:
 402ffe4:	defffa04 	addi	sp,sp,-24
 402ffe8:	dc000315 	stw	r16,12(sp)
 402ffec:	040100f4 	movhi	r16,1027
 402fff0:	84087e04 	addi	r16,r16,8696
 402fff4:	80c00017 	ldw	r3,0(r16)
 402fff8:	dc400415 	stw	r17,16(sp)
 402fffc:	dfc00515 	stw	ra,20(sp)
 4030000:	18805217 	ldw	r2,328(r3)
 4030004:	2023883a 	mov	r17,r4
 4030008:	10003726 	beq	r2,zero,40300e8 <__register_exitproc+0x104>
 403000c:	10c00117 	ldw	r3,4(r2)
 4030010:	010007c4 	movi	r4,31
 4030014:	20c00e16 	blt	r4,r3,4030050 <__register_exitproc+0x6c>
 4030018:	1a000044 	addi	r8,r3,1
 403001c:	8800221e 	bne	r17,zero,40300a8 <__register_exitproc+0xc4>
 4030020:	18c00084 	addi	r3,r3,2
 4030024:	18c7883a 	add	r3,r3,r3
 4030028:	18c7883a 	add	r3,r3,r3
 403002c:	12000115 	stw	r8,4(r2)
 4030030:	10c7883a 	add	r3,r2,r3
 4030034:	19400015 	stw	r5,0(r3)
 4030038:	0005883a 	mov	r2,zero
 403003c:	dfc00517 	ldw	ra,20(sp)
 4030040:	dc400417 	ldw	r17,16(sp)
 4030044:	dc000317 	ldw	r16,12(sp)
 4030048:	dec00604 	addi	sp,sp,24
 403004c:	f800283a 	ret
 4030050:	00800034 	movhi	r2,0
 4030054:	10800004 	addi	r2,r2,0
 4030058:	10002626 	beq	r2,zero,40300f4 <__register_exitproc+0x110>
 403005c:	01006404 	movi	r4,400
 4030060:	d9400015 	stw	r5,0(sp)
 4030064:	d9800115 	stw	r6,4(sp)
 4030068:	d9c00215 	stw	r7,8(sp)
 403006c:	00000000 	call	0 <__alt_mem_sdram_controller_2>
 4030070:	d9400017 	ldw	r5,0(sp)
 4030074:	d9800117 	ldw	r6,4(sp)
 4030078:	d9c00217 	ldw	r7,8(sp)
 403007c:	10001d26 	beq	r2,zero,40300f4 <__register_exitproc+0x110>
 4030080:	81000017 	ldw	r4,0(r16)
 4030084:	10000115 	stw	zero,4(r2)
 4030088:	02000044 	movi	r8,1
 403008c:	22405217 	ldw	r9,328(r4)
 4030090:	0007883a 	mov	r3,zero
 4030094:	12400015 	stw	r9,0(r2)
 4030098:	20805215 	stw	r2,328(r4)
 403009c:	10006215 	stw	zero,392(r2)
 40300a0:	10006315 	stw	zero,396(r2)
 40300a4:	883fde26 	beq	r17,zero,4030020 <__alt_data_end+0xffff0020>
 40300a8:	18c9883a 	add	r4,r3,r3
 40300ac:	2109883a 	add	r4,r4,r4
 40300b0:	1109883a 	add	r4,r2,r4
 40300b4:	21802215 	stw	r6,136(r4)
 40300b8:	01800044 	movi	r6,1
 40300bc:	12406217 	ldw	r9,392(r2)
 40300c0:	30cc983a 	sll	r6,r6,r3
 40300c4:	4992b03a 	or	r9,r9,r6
 40300c8:	12406215 	stw	r9,392(r2)
 40300cc:	21c04215 	stw	r7,264(r4)
 40300d0:	01000084 	movi	r4,2
 40300d4:	893fd21e 	bne	r17,r4,4030020 <__alt_data_end+0xffff0020>
 40300d8:	11006317 	ldw	r4,396(r2)
 40300dc:	218cb03a 	or	r6,r4,r6
 40300e0:	11806315 	stw	r6,396(r2)
 40300e4:	003fce06 	br	4030020 <__alt_data_end+0xffff0020>
 40300e8:	18805304 	addi	r2,r3,332
 40300ec:	18805215 	stw	r2,328(r3)
 40300f0:	003fc606 	br	403000c <__alt_data_end+0xffff000c>
 40300f4:	00bfffc4 	movi	r2,-1
 40300f8:	003fd006 	br	403003c <__alt_data_end+0xffff003c>

040300fc <__call_exitprocs>:
 40300fc:	defff504 	addi	sp,sp,-44
 4030100:	df000915 	stw	fp,36(sp)
 4030104:	dd400615 	stw	r21,24(sp)
 4030108:	dc800315 	stw	r18,12(sp)
 403010c:	dfc00a15 	stw	ra,40(sp)
 4030110:	ddc00815 	stw	r23,32(sp)
 4030114:	dd800715 	stw	r22,28(sp)
 4030118:	dd000515 	stw	r20,20(sp)
 403011c:	dcc00415 	stw	r19,16(sp)
 4030120:	dc400215 	stw	r17,8(sp)
 4030124:	dc000115 	stw	r16,4(sp)
 4030128:	d9000015 	stw	r4,0(sp)
 403012c:	2839883a 	mov	fp,r5
 4030130:	04800044 	movi	r18,1
 4030134:	057fffc4 	movi	r21,-1
 4030138:	008100f4 	movhi	r2,1027
 403013c:	10887e04 	addi	r2,r2,8696
 4030140:	12000017 	ldw	r8,0(r2)
 4030144:	45005217 	ldw	r20,328(r8)
 4030148:	44c05204 	addi	r19,r8,328
 403014c:	a0001c26 	beq	r20,zero,40301c0 <__call_exitprocs+0xc4>
 4030150:	a0800117 	ldw	r2,4(r20)
 4030154:	15ffffc4 	addi	r23,r2,-1
 4030158:	b8000d16 	blt	r23,zero,4030190 <__call_exitprocs+0x94>
 403015c:	14000044 	addi	r16,r2,1
 4030160:	8421883a 	add	r16,r16,r16
 4030164:	8421883a 	add	r16,r16,r16
 4030168:	84402004 	addi	r17,r16,128
 403016c:	a463883a 	add	r17,r20,r17
 4030170:	a421883a 	add	r16,r20,r16
 4030174:	e0001e26 	beq	fp,zero,40301f0 <__call_exitprocs+0xf4>
 4030178:	80804017 	ldw	r2,256(r16)
 403017c:	e0801c26 	beq	fp,r2,40301f0 <__call_exitprocs+0xf4>
 4030180:	bdffffc4 	addi	r23,r23,-1
 4030184:	843fff04 	addi	r16,r16,-4
 4030188:	8c7fff04 	addi	r17,r17,-4
 403018c:	bd7ff91e 	bne	r23,r21,4030174 <__alt_data_end+0xffff0174>
 4030190:	00800034 	movhi	r2,0
 4030194:	10800004 	addi	r2,r2,0
 4030198:	10000926 	beq	r2,zero,40301c0 <__call_exitprocs+0xc4>
 403019c:	a0800117 	ldw	r2,4(r20)
 40301a0:	1000301e 	bne	r2,zero,4030264 <__call_exitprocs+0x168>
 40301a4:	a0800017 	ldw	r2,0(r20)
 40301a8:	10003226 	beq	r2,zero,4030274 <__call_exitprocs+0x178>
 40301ac:	a009883a 	mov	r4,r20
 40301b0:	98800015 	stw	r2,0(r19)
 40301b4:	00000000 	call	0 <__alt_mem_sdram_controller_2>
 40301b8:	9d000017 	ldw	r20,0(r19)
 40301bc:	a03fe41e 	bne	r20,zero,4030150 <__alt_data_end+0xffff0150>
 40301c0:	dfc00a17 	ldw	ra,40(sp)
 40301c4:	df000917 	ldw	fp,36(sp)
 40301c8:	ddc00817 	ldw	r23,32(sp)
 40301cc:	dd800717 	ldw	r22,28(sp)
 40301d0:	dd400617 	ldw	r21,24(sp)
 40301d4:	dd000517 	ldw	r20,20(sp)
 40301d8:	dcc00417 	ldw	r19,16(sp)
 40301dc:	dc800317 	ldw	r18,12(sp)
 40301e0:	dc400217 	ldw	r17,8(sp)
 40301e4:	dc000117 	ldw	r16,4(sp)
 40301e8:	dec00b04 	addi	sp,sp,44
 40301ec:	f800283a 	ret
 40301f0:	a0800117 	ldw	r2,4(r20)
 40301f4:	80c00017 	ldw	r3,0(r16)
 40301f8:	10bfffc4 	addi	r2,r2,-1
 40301fc:	15c01426 	beq	r2,r23,4030250 <__call_exitprocs+0x154>
 4030200:	80000015 	stw	zero,0(r16)
 4030204:	183fde26 	beq	r3,zero,4030180 <__alt_data_end+0xffff0180>
 4030208:	95c8983a 	sll	r4,r18,r23
 403020c:	a0806217 	ldw	r2,392(r20)
 4030210:	a5800117 	ldw	r22,4(r20)
 4030214:	2084703a 	and	r2,r4,r2
 4030218:	10000b26 	beq	r2,zero,4030248 <__call_exitprocs+0x14c>
 403021c:	a0806317 	ldw	r2,396(r20)
 4030220:	2088703a 	and	r4,r4,r2
 4030224:	20000c1e 	bne	r4,zero,4030258 <__call_exitprocs+0x15c>
 4030228:	89400017 	ldw	r5,0(r17)
 403022c:	d9000017 	ldw	r4,0(sp)
 4030230:	183ee83a 	callr	r3
 4030234:	a0800117 	ldw	r2,4(r20)
 4030238:	15bfbf1e 	bne	r2,r22,4030138 <__alt_data_end+0xffff0138>
 403023c:	98800017 	ldw	r2,0(r19)
 4030240:	153fcf26 	beq	r2,r20,4030180 <__alt_data_end+0xffff0180>
 4030244:	003fbc06 	br	4030138 <__alt_data_end+0xffff0138>
 4030248:	183ee83a 	callr	r3
 403024c:	003ff906 	br	4030234 <__alt_data_end+0xffff0234>
 4030250:	a5c00115 	stw	r23,4(r20)
 4030254:	003feb06 	br	4030204 <__alt_data_end+0xffff0204>
 4030258:	89000017 	ldw	r4,0(r17)
 403025c:	183ee83a 	callr	r3
 4030260:	003ff406 	br	4030234 <__alt_data_end+0xffff0234>
 4030264:	a0800017 	ldw	r2,0(r20)
 4030268:	a027883a 	mov	r19,r20
 403026c:	1029883a 	mov	r20,r2
 4030270:	003fb606 	br	403014c <__alt_data_end+0xffff014c>
 4030274:	0005883a 	mov	r2,zero
 4030278:	003ffb06 	br	4030268 <__alt_data_end+0xffff0268>

0403027c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 403027c:	defffd04 	addi	sp,sp,-12
 4030280:	df000215 	stw	fp,8(sp)
 4030284:	df000204 	addi	fp,sp,8
 4030288:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 403028c:	0001883a 	nop
 4030290:	e0bfff17 	ldw	r2,-4(fp)
 4030294:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 4030298:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 403029c:	10000226 	beq	r2,zero,40302a8 <_exit+0x2c>
    ALT_SIM_FAIL();
 40302a0:	002af070 	cmpltui	zero,zero,43969
 40302a4:	00000106 	br	40302ac <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 40302a8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 40302ac:	003fff06 	br	40302ac <__alt_data_end+0xffff02ac>

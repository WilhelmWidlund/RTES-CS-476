
cpu_0_proj.elf:     file format elf32-littlenios2
cpu_0_proj.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08004244

Program Header:
    LOAD off    0x00001000 vaddr 0x08004000 paddr 0x08004000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08004020 paddr 0x08004020 align 2**12
         filesz 0x00003bcc memsz 0x00003bcc flags r-x
    LOAD off    0x00005000 vaddr 0x00000000 paddr 0x08007bec align 2**12
         filesz 0x000014f8 memsz 0x00001618 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08004000  08004000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  08004020  08004020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000039a8  08004244  08004244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000e8  00000000  08007bec  00005000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001410  000000e8  08007cd4  000050e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  000014f8  080090e4  000064f8  2**2
                  ALLOC, SMALL_DATA
  6 .sdram_controller_2 00000000  00001618  00001618  000064f8  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  080090e4  080090e4  000064f8  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  000064f8  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 000006f0  00000000  00000000  00006520  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00009a24  00000000  00000000  00006c10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00003797  00000000  00000000  00010634  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00003ac8  00000000  00000000  00013dcb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001088  00000000  00000000  00017894  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000022f4  00000000  00000000  0001891c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00001592  00000000  00000000  0001ac10  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  0001c1a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000002e8  00000000  00000000  0001c1d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0001e68a  2**0
                  CONTENTS, READONLY
 19 .cpu          00000005  00000000  00000000  0001e68d  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0001e692  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0001e693  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  0001e694  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  0001e69f  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  0001e6aa  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000a  00000000  00000000  0001e6b5  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000017  00000000  00000000  0001e6bf  2**0
                  CONTENTS, READONLY
 27 .jdi          00009dc0  00000000  00000000  0001e6d6  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     000c61ea  00000000  00000000  00028496  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08004000 l    d  .entry	00000000 .entry
08004020 l    d  .exceptions	00000000 .exceptions
08004244 l    d  .text	00000000 .text
00000000 l    d  .rodata	00000000 .rodata
000000e8 l    d  .rwdata	00000000 .rwdata
000014f8 l    d  .bss	00000000 .bss
00001618 l    d  .sdram_controller_2	00000000 .sdram_controller_2
080090e4 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/RTES/lab3/sw/nios/cpu_0_proj_bsp//obj/HAL/src/crt0.o
0800428c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
0800437c l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
000000e8 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_load.c
08004c08 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
08004d70 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
08004ea4 l     F .text	00000034 alt_dev_reg
08004ed8 l     F .text	0000003c alt_get_errno
08004f14 l     F .text	00000068 alt_avalon_mutex_reg
000001c8 l     O .rwdata	00001060 jtag_uart_0
00001228 l     O .rwdata	00000048 mailbox_simple_0
00001270 l     O .rwdata	00000010 mutex_0
00001280 l     O .rwdata	00000010 mutex_1
00001290 l     O .rwdata	0000002c Debug_PP
000012bc l     O .rwdata	0000002c parallel_port_0
000012e8 l     O .rwdata	0000002c parallel_port_2
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
08005298 l     F .text	0000020c altera_avalon_jtag_uart_irq
080054a4 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mailbox_simple.c
08005adc l     F .text	00000090 altera_avalon_mailbox_identify
08005b6c l     F .text	00000078 altera_avalon_mailbox_post
08005be4 l     F .text	00000138 altera_avalon_mailbox_simple_tx_isr
08005d1c l     F .text	000000a8 altera_avalon_mailbox_simple_rx_isr
00000000 l    df *ABS*	00000000 altera_avalon_mutex.c
0800643c l     F .text	0000003c alt_get_errno
08006478 l     F .text	0000007c alt_mutex_trylock
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
08006708 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
08006928 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
08006a7c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
08006aa8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
08006fac l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
080070ec l     F .text	0000003c alt_get_errno
08007128 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00001514 g     O .bss	00000004 alt_instruction_exception_handler
080061b0 g     F .text	00000150 altera_avalon_mailbox_send
08004cf4 g     F .text	0000007c alt_main
00001518 g     O .bss	00000100 alt_irq
08007cd4 g       *ABS*	00000000 __flash_rwdata_start
08004330 g     F .text	0000004c printf
08004290 g     F .text	00000038 part1
080065b0 g     F .text	00000040 altera_avalon_mutex_trylock
08007548 g     F .text	00000024 altera_nios2_gen2_irq_init
08004000 g     F .entry	0000001c __reset
08006644 g     F .text	00000074 altera_avalon_mutex_is_mine
08004020 g       *ABS*	00000000 __flash_exceptions_start
000014f8 g     O .bss	00000004 errno
00001500 g     O .bss	00000004 alt_argv
000094bc g       *ABS*	00000000 _gp
08006300 g     F .text	0000013c altera_avalon_mailbox_retrieve_poll
0000133c g     O .rwdata	00000180 alt_fd_list
08006c48 g     F .text	00000090 alt_find_dev
080078a8 g     F .text	00000028 memcpy
08007070 g     F .text	0000007c alt_io_redirect
08007bec g       *ABS*	00000000 __DTOR_END__
080077a8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
08005dc4 g     F .text	00000078 altera_avalon_mailbox_simple_init
0800569c g     F .text	0000021c altera_avalon_jtag_uart_read
080042f4 g     F .text	0000003c _printf_r
08004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
08004b4c g     F .text	00000064 .hidden __udivsi3
08006138 g     F .text	00000078 altera_avalon_mailbox_status
08006020 g     F .text	00000118 altera_avalon_mailbox_close
08007718 g     F .text	00000090 alt_icache_flush
000014e4 g     O .rwdata	00000004 alt_max_fd
080066b8 g     F .text	00000050 altera_avalon_mutex_first_lock
000014bc g     O .rwdata	00000004 _global_impure_ptr
00001618 g       *ABS*	00000000 __bss_end
08006ebc g     F .text	000000f0 alt_iic_isr_register
08007440 g     F .text	00000108 alt_tick
08006e70 g     F .text	0000004c alt_ic_irq_enabled
080073a4 g     F .text	0000009c alt_alarm_stop
00001508 g     O .bss	00000004 alt_irq_active
080040fc g     F .exceptions	000000d4 alt_irq_handler
00001314 g     O .rwdata	00000028 alt_dev_null
080064f4 g     F .text	00000054 altera_avalon_mutex_open
08006a34 g     F .text	00000048 alt_dcache_flush_all
000014f8 g       *ABS*	00000000 __ram_rwdata_end
000014dc g     O .rwdata	00000008 alt_dev_list
08004dac g     F .text	000000f8 write
000014cc g     O .rwdata	00000008 alt_mutex_list
000000e8 g       *ABS*	00000000 __ram_rodata_end
08004bb0 g     F .text	00000058 .hidden __umodsi3
00001618 g       *ABS*	00000000 end
080051d8 g     F .text	000000c0 altera_avalon_jtag_uart_init
080041d0 g     F .exceptions	00000074 alt_instruction_exception_entry
08007bec g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
08006780 g     F .text	0000007c alt_avalon_timer_sc_init
080058b8 g     F .text	00000224 altera_avalon_jtag_uart_write
080043e8 g     F .text	00000524 ___vfprintf_internal_r
08007a28 g     F .text	00000190 __call_exitprocs
08004244 g     F .text	0000004c _start
0000150c g     O .bss	00000004 _alt_tick_rate
00001510 g     O .bss	00000004 _alt_nticks
08004fb4 g     F .text	000000c0 alt_sys_init
080078d0 g     F .text	00000158 __register_exitproc
080065f0 g     F .text	00000054 altera_avalon_mutex_unlock
08005544 g     F .text	00000068 altera_avalon_jtag_uart_close
000000e8 g       *ABS*	00000000 __ram_rwdata_start
00000000 g       *ABS*	00000000 __ram_rodata_start
08005074 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
08007674 g     F .text	000000a4 alt_get_fd
08007878 g     F .text	00000030 memcmp
08005134 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00001618 g       *ABS*	00000000 __alt_stack_base
08005184 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0800756c g     F .text	00000108 alt_find_file
08006ae4 g     F .text	000000a4 alt_dev_llist_insert
08004928 g     F .text	000000b8 __sfvwrite_small_dev
000014f8 g       *ABS*	00000000 __bss_start
080042c8 g     F .text	0000002c main
00001504 g     O .bss	00000004 alt_envp
080050d4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0800656c g     F .text	00000044 altera_avalon_mutex_lock
000014e8 g     O .rwdata	00000004 alt_errno
08004a54 g     F .text	00000084 .hidden __divsi3
08007bec g       *ABS*	00000000 __CTOR_END__
08007bec g       *ABS*	00000000 __flash_rodata_start
08007bec g       *ABS*	00000000 __DTOR_LIST__
08004f7c g     F .text	00000038 alt_irq_init
08007340 g     F .text	00000064 alt_release_fd
08007844 g     F .text	00000014 atexit
080049fc g     F .text	00000058 _write_r
000014c0 g     O .rwdata	00000004 _impure_ptr
000014fc g     O .bss	00000004 alt_argc
08006be8 g     F .text	00000060 _do_dtors
00000000 g       *ABS*	00000000 __alt_mem_sdram_controller_2
08004020 g       .exceptions	00000000 alt_irq_entry
000014d4 g     O .rwdata	00000008 alt_fs_list
08004020 g       *ABS*	00000000 __ram_exceptions_start
08006d0c g     F .text	00000050 alt_ic_isr_register
000014f8 g       *ABS*	00000000 _edata
00001618 g       *ABS*	00000000 _end
08004244 g       *ABS*	00000000 __ram_exceptions_end
080055ac g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
08006de4 g     F .text	0000008c alt_ic_irq_disable
000014c4 g     O .rwdata	00000008 alt_mailbox_simple_list
08007858 g     F .text	00000020 exit
08004ad8 g     F .text	00000074 .hidden __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
08004020 g     F .exceptions	00000000 alt_exception
08005e3c g     F .text	000001e4 altera_avalon_mailbox_open
08007bb8 g     F .text	00000034 _exit
080067fc g     F .text	0000012c alt_alarm_start
080049e0 g     F .text	0000001c strlen
080071ec g     F .text	00000154 open
08006cd8 g     F .text	00000034 alt_icache_flush_all
000014ec g     O .rwdata	00000004 alt_priority_mask
08006d5c g     F .text	00000088 alt_ic_irq_enable
0800490c g     F .text	0000001c __vfprintf_internal
08006548 g     F .text	00000024 altera_avalon_mutex_close
000014f0 g     O .rwdata	00000008 alt_alarm_list
08006b88 g     F .text	00000060 _do_ctors
08006964 g     F .text	000000d0 close
08004c70 g     F .text	00000084 alt_load



Disassembly of section .entry:

08004000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 8004000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 8004004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 8004008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 800400c:	00bffd16 	blt	zero,r2,8004004 <__flash_rwdata_start+0xffffc330>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8004010:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8004014:	08509114 	ori	at,at,16964
    jmp r1
 8004018:	0800683a 	jmp	at
 800401c:	00000000 	call	0 <__alt_mem_sdram_controller_2>

Disassembly of section .exceptions:

08004020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8004020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8004024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8004028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800402c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8004030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8004034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8004038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800403c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8004040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8004044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8004048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800404c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8004050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8004054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8004058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800405c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8004060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8004064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8004068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800406c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8004070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8004074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8004078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800407c:	10000326 	beq	r2,zero,800408c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8004080:	20000226 	beq	r4,zero,800408c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8004084:	80040fc0 	call	80040fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8004088:	00000706 	br	80040a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 800408c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 8004090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8004094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8004098:	80041d00 	call	80041d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 800409c:	1000021e 	bne	r2,zero,80040a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80040a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80040a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80040a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80040ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80040b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80040b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80040b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80040bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80040c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80040c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80040c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80040cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80040d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80040d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80040d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80040dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80040e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80040e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80040e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80040ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80040f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80040f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80040f8:	ef80083a 	eret

080040fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80040fc:	defff904 	addi	sp,sp,-28
 8004100:	dfc00615 	stw	ra,24(sp)
 8004104:	df000515 	stw	fp,20(sp)
 8004108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 800410c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8004110:	0005313a 	rdctl	r2,ipending
 8004114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8004118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800411c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8004120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8004124:	00800044 	movi	r2,1
 8004128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800412c:	e0fffb17 	ldw	r3,-20(fp)
 8004130:	e0bffc17 	ldw	r2,-16(fp)
 8004134:	1884703a 	and	r2,r3,r2
 8004138:	10001426 	beq	r2,zero,800418c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800413c:	00800034 	movhi	r2,0
 8004140:	10854604 	addi	r2,r2,5400
 8004144:	e0fffd17 	ldw	r3,-12(fp)
 8004148:	180690fa 	slli	r3,r3,3
 800414c:	10c5883a 	add	r2,r2,r3
 8004150:	10c00017 	ldw	r3,0(r2)
 8004154:	00800034 	movhi	r2,0
 8004158:	10854604 	addi	r2,r2,5400
 800415c:	e13ffd17 	ldw	r4,-12(fp)
 8004160:	200890fa 	slli	r4,r4,3
 8004164:	1105883a 	add	r2,r2,r4
 8004168:	10800104 	addi	r2,r2,4
 800416c:	10800017 	ldw	r2,0(r2)
 8004170:	1009883a 	mov	r4,r2
 8004174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8004178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800417c:	0005313a 	rdctl	r2,ipending
 8004180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8004184:	e0bfff17 	ldw	r2,-4(fp)
 8004188:	00000706 	br	80041a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800418c:	e0bffc17 	ldw	r2,-16(fp)
 8004190:	1085883a 	add	r2,r2,r2
 8004194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8004198:	e0bffd17 	ldw	r2,-12(fp)
 800419c:	10800044 	addi	r2,r2,1
 80041a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 80041a4:	003fe106 	br	800412c <__flash_rwdata_start+0xffffc458>

    active = alt_irq_pending ();
 80041a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 80041ac:	e0bffb17 	ldw	r2,-20(fp)
 80041b0:	103fdb1e 	bne	r2,zero,8004120 <__flash_rwdata_start+0xffffc44c>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80041b4:	0001883a 	nop
}
 80041b8:	0001883a 	nop
 80041bc:	e037883a 	mov	sp,fp
 80041c0:	dfc00117 	ldw	ra,4(sp)
 80041c4:	df000017 	ldw	fp,0(sp)
 80041c8:	dec00204 	addi	sp,sp,8
 80041cc:	f800283a 	ret

080041d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80041d0:	defffb04 	addi	sp,sp,-20
 80041d4:	dfc00415 	stw	ra,16(sp)
 80041d8:	df000315 	stw	fp,12(sp)
 80041dc:	df000304 	addi	fp,sp,12
 80041e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 80041e4:	000531fa 	rdctl	r2,exception
 80041e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 80041ec:	e0bffd17 	ldw	r2,-12(fp)
 80041f0:	10801f0c 	andi	r2,r2,124
 80041f4:	1004d0ba 	srli	r2,r2,2
 80041f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 80041fc:	0005333a 	rdctl	r2,badaddr
 8004200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 8004204:	d0a01617 	ldw	r2,-32680(gp)
 8004208:	10000726 	beq	r2,zero,8004228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 800420c:	d0a01617 	ldw	r2,-32680(gp)
 8004210:	e0fffd17 	ldw	r3,-12(fp)
 8004214:	e1bffe17 	ldw	r6,-8(fp)
 8004218:	e17fff17 	ldw	r5,-4(fp)
 800421c:	1809883a 	mov	r4,r3
 8004220:	103ee83a 	callr	r2
 8004224:	00000206 	br	8004230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 8004228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 800422c:	0005883a 	mov	r2,zero
}
 8004230:	e037883a 	mov	sp,fp
 8004234:	dfc00117 	ldw	ra,4(sp)
 8004238:	df000017 	ldw	fp,0(sp)
 800423c:	dec00204 	addi	sp,sp,8
 8004240:	f800283a 	ret

Disassembly of section .text:

08004244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 8004244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 8004248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 800424c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 8004250:	00bffd16 	blt	zero,r2,8004248 <__flash_rwdata_start+0xffffc574>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8004254:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
 8004258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 800425c:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
 8004260:	d6a52f14 	ori	gp,gp,38076
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8004264:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
 8004268:	10853e14 	ori	r2,r2,5368

    movhi r3, %hi(__bss_end)
 800426c:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
 8004270:	18c58614 	ori	r3,r3,5656

    beq r2, r3, 1f
 8004274:	10c00326 	beq	r2,r3,8004284 <_start+0x40>

0:
    stw zero, (r2)
 8004278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 800427c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 8004280:	10fffd36 	bltu	r2,r3,8004278 <__flash_rwdata_start+0xffffc5a4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8004284:	8004c700 	call	8004c70 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8004288:	8004cf40 	call	8004cf4 <alt_main>

0800428c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 800428c:	003fff06 	br	800428c <__flash_rwdata_start+0xffffc5b8>

08004290 <part1>:
/*
 *--------------------------------- THIS IS CPU 0 ---------------------------------------------
 */

void part1()
{
 8004290:	defffe04 	addi	sp,sp,-8
 8004294:	dfc00115 	stw	ra,4(sp)
 8004298:	df000015 	stw	fp,0(sp)
 800429c:	d839883a 	mov	fp,sp
	printf("Hello from the multicore system, this is CPU %d talking! \n", ALT_CPU_CPU_ID_VALUE);
 80042a0:	000b883a 	mov	r5,zero
 80042a4:	01000034 	movhi	r4,0
 80042a8:	21000004 	addi	r4,r4,0
 80042ac:	80043300 	call	8004330 <printf>
}
 80042b0:	0001883a 	nop
 80042b4:	e037883a 	mov	sp,fp
 80042b8:	dfc00117 	ldw	ra,4(sp)
 80042bc:	df000017 	ldw	fp,0(sp)
 80042c0:	dec00204 	addi	sp,sp,8
 80042c4:	f800283a 	ret

080042c8 <main>:
/*
 *--------------------------------- THIS IS CPU 0 ---------------------------------------------
 */

int main()
{
 80042c8:	defffe04 	addi	sp,sp,-8
 80042cc:	dfc00115 	stw	ra,4(sp)
 80042d0:	df000015 	stw	fp,0(sp)
 80042d4:	d839883a 	mov	fp,sp
  part1();
 80042d8:	80042900 	call	8004290 <part1>

  return 0;
 80042dc:	0005883a 	mov	r2,zero
}
 80042e0:	e037883a 	mov	sp,fp
 80042e4:	dfc00117 	ldw	ra,4(sp)
 80042e8:	df000017 	ldw	fp,0(sp)
 80042ec:	dec00204 	addi	sp,sp,8
 80042f0:	f800283a 	ret

080042f4 <_printf_r>:
 80042f4:	defffd04 	addi	sp,sp,-12
 80042f8:	dfc00015 	stw	ra,0(sp)
 80042fc:	d9800115 	stw	r6,4(sp)
 8004300:	d9c00215 	stw	r7,8(sp)
 8004304:	20c00217 	ldw	r3,8(r4)
 8004308:	01820034 	movhi	r6,2048
 800430c:	31924a04 	addi	r6,r6,18728
 8004310:	19800115 	stw	r6,4(r3)
 8004314:	280d883a 	mov	r6,r5
 8004318:	21400217 	ldw	r5,8(r4)
 800431c:	d9c00104 	addi	r7,sp,4
 8004320:	80043e80 	call	80043e8 <___vfprintf_internal_r>
 8004324:	dfc00017 	ldw	ra,0(sp)
 8004328:	dec00304 	addi	sp,sp,12
 800432c:	f800283a 	ret

08004330 <printf>:
 8004330:	defffc04 	addi	sp,sp,-16
 8004334:	dfc00015 	stw	ra,0(sp)
 8004338:	d9400115 	stw	r5,4(sp)
 800433c:	d9800215 	stw	r6,8(sp)
 8004340:	d9c00315 	stw	r7,12(sp)
 8004344:	00800034 	movhi	r2,0
 8004348:	10853004 	addi	r2,r2,5312
 800434c:	10800017 	ldw	r2,0(r2)
 8004350:	01420034 	movhi	r5,2048
 8004354:	29524a04 	addi	r5,r5,18728
 8004358:	10c00217 	ldw	r3,8(r2)
 800435c:	d9800104 	addi	r6,sp,4
 8004360:	19400115 	stw	r5,4(r3)
 8004364:	200b883a 	mov	r5,r4
 8004368:	11000217 	ldw	r4,8(r2)
 800436c:	800490c0 	call	800490c <__vfprintf_internal>
 8004370:	dfc00017 	ldw	ra,0(sp)
 8004374:	dec00404 	addi	sp,sp,16
 8004378:	f800283a 	ret

0800437c <print_repeat>:
 800437c:	defffb04 	addi	sp,sp,-20
 8004380:	dc800315 	stw	r18,12(sp)
 8004384:	dc400215 	stw	r17,8(sp)
 8004388:	dc000115 	stw	r16,4(sp)
 800438c:	dfc00415 	stw	ra,16(sp)
 8004390:	2025883a 	mov	r18,r4
 8004394:	2823883a 	mov	r17,r5
 8004398:	d9800005 	stb	r6,0(sp)
 800439c:	3821883a 	mov	r16,r7
 80043a0:	04000a0e 	bge	zero,r16,80043cc <print_repeat+0x50>
 80043a4:	88800117 	ldw	r2,4(r17)
 80043a8:	01c00044 	movi	r7,1
 80043ac:	d80d883a 	mov	r6,sp
 80043b0:	880b883a 	mov	r5,r17
 80043b4:	9009883a 	mov	r4,r18
 80043b8:	103ee83a 	callr	r2
 80043bc:	843fffc4 	addi	r16,r16,-1
 80043c0:	103ff726 	beq	r2,zero,80043a0 <__flash_rwdata_start+0xffffc6cc>
 80043c4:	00bfffc4 	movi	r2,-1
 80043c8:	00000106 	br	80043d0 <print_repeat+0x54>
 80043cc:	0005883a 	mov	r2,zero
 80043d0:	dfc00417 	ldw	ra,16(sp)
 80043d4:	dc800317 	ldw	r18,12(sp)
 80043d8:	dc400217 	ldw	r17,8(sp)
 80043dc:	dc000117 	ldw	r16,4(sp)
 80043e0:	dec00504 	addi	sp,sp,20
 80043e4:	f800283a 	ret

080043e8 <___vfprintf_internal_r>:
 80043e8:	deffe504 	addi	sp,sp,-108
 80043ec:	d8c00804 	addi	r3,sp,32
 80043f0:	df001915 	stw	fp,100(sp)
 80043f4:	ddc01815 	stw	r23,96(sp)
 80043f8:	dd801715 	stw	r22,92(sp)
 80043fc:	dd401615 	stw	r21,88(sp)
 8004400:	dd001515 	stw	r20,84(sp)
 8004404:	dcc01415 	stw	r19,80(sp)
 8004408:	dc801315 	stw	r18,76(sp)
 800440c:	dc401215 	stw	r17,72(sp)
 8004410:	dc001115 	stw	r16,68(sp)
 8004414:	dfc01a15 	stw	ra,104(sp)
 8004418:	2027883a 	mov	r19,r4
 800441c:	2839883a 	mov	fp,r5
 8004420:	382d883a 	mov	r22,r7
 8004424:	d9800f15 	stw	r6,60(sp)
 8004428:	0021883a 	mov	r16,zero
 800442c:	d8000e15 	stw	zero,56(sp)
 8004430:	002f883a 	mov	r23,zero
 8004434:	002b883a 	mov	r21,zero
 8004438:	0025883a 	mov	r18,zero
 800443c:	0023883a 	mov	r17,zero
 8004440:	d8000c15 	stw	zero,48(sp)
 8004444:	d8000b15 	stw	zero,44(sp)
 8004448:	0029883a 	mov	r20,zero
 800444c:	d8c00915 	stw	r3,36(sp)
 8004450:	d8c00f17 	ldw	r3,60(sp)
 8004454:	19000003 	ldbu	r4,0(r3)
 8004458:	20803fcc 	andi	r2,r4,255
 800445c:	1080201c 	xori	r2,r2,128
 8004460:	10bfe004 	addi	r2,r2,-128
 8004464:	10011c26 	beq	r2,zero,80048d8 <___vfprintf_internal_r+0x4f0>
 8004468:	00c00044 	movi	r3,1
 800446c:	a0c01426 	beq	r20,r3,80044c0 <___vfprintf_internal_r+0xd8>
 8004470:	1d000216 	blt	r3,r20,800447c <___vfprintf_internal_r+0x94>
 8004474:	a0000626 	beq	r20,zero,8004490 <___vfprintf_internal_r+0xa8>
 8004478:	00011306 	br	80048c8 <___vfprintf_internal_r+0x4e0>
 800447c:	01400084 	movi	r5,2
 8004480:	a1401d26 	beq	r20,r5,80044f8 <___vfprintf_internal_r+0x110>
 8004484:	014000c4 	movi	r5,3
 8004488:	a1402926 	beq	r20,r5,8004530 <___vfprintf_internal_r+0x148>
 800448c:	00010e06 	br	80048c8 <___vfprintf_internal_r+0x4e0>
 8004490:	01400944 	movi	r5,37
 8004494:	1140fb26 	beq	r2,r5,8004884 <___vfprintf_internal_r+0x49c>
 8004498:	e0800117 	ldw	r2,4(fp)
 800449c:	d9000005 	stb	r4,0(sp)
 80044a0:	01c00044 	movi	r7,1
 80044a4:	d80d883a 	mov	r6,sp
 80044a8:	e00b883a 	mov	r5,fp
 80044ac:	9809883a 	mov	r4,r19
 80044b0:	103ee83a 	callr	r2
 80044b4:	1000d61e 	bne	r2,zero,8004810 <___vfprintf_internal_r+0x428>
 80044b8:	84000044 	addi	r16,r16,1
 80044bc:	00010206 	br	80048c8 <___vfprintf_internal_r+0x4e0>
 80044c0:	01400c04 	movi	r5,48
 80044c4:	1140f826 	beq	r2,r5,80048a8 <___vfprintf_internal_r+0x4c0>
 80044c8:	01400944 	movi	r5,37
 80044cc:	11400a1e 	bne	r2,r5,80044f8 <___vfprintf_internal_r+0x110>
 80044d0:	d8800005 	stb	r2,0(sp)
 80044d4:	e0800117 	ldw	r2,4(fp)
 80044d8:	a00f883a 	mov	r7,r20
 80044dc:	d80d883a 	mov	r6,sp
 80044e0:	e00b883a 	mov	r5,fp
 80044e4:	9809883a 	mov	r4,r19
 80044e8:	103ee83a 	callr	r2
 80044ec:	1000c81e 	bne	r2,zero,8004810 <___vfprintf_internal_r+0x428>
 80044f0:	84000044 	addi	r16,r16,1
 80044f4:	0000f306 	br	80048c4 <___vfprintf_internal_r+0x4dc>
 80044f8:	217ff404 	addi	r5,r4,-48
 80044fc:	29403fcc 	andi	r5,r5,255
 8004500:	00c00244 	movi	r3,9
 8004504:	19400736 	bltu	r3,r5,8004524 <___vfprintf_internal_r+0x13c>
 8004508:	00bfffc4 	movi	r2,-1
 800450c:	88800226 	beq	r17,r2,8004518 <___vfprintf_internal_r+0x130>
 8004510:	8c4002a4 	muli	r17,r17,10
 8004514:	00000106 	br	800451c <___vfprintf_internal_r+0x134>
 8004518:	0023883a 	mov	r17,zero
 800451c:	2c63883a 	add	r17,r5,r17
 8004520:	0000e206 	br	80048ac <___vfprintf_internal_r+0x4c4>
 8004524:	01400b84 	movi	r5,46
 8004528:	1140e426 	beq	r2,r5,80048bc <___vfprintf_internal_r+0x4d4>
 800452c:	05000084 	movi	r20,2
 8004530:	213ff404 	addi	r4,r4,-48
 8004534:	21003fcc 	andi	r4,r4,255
 8004538:	00c00244 	movi	r3,9
 800453c:	19000736 	bltu	r3,r4,800455c <___vfprintf_internal_r+0x174>
 8004540:	00bfffc4 	movi	r2,-1
 8004544:	90800226 	beq	r18,r2,8004550 <___vfprintf_internal_r+0x168>
 8004548:	948002a4 	muli	r18,r18,10
 800454c:	00000106 	br	8004554 <___vfprintf_internal_r+0x16c>
 8004550:	0025883a 	mov	r18,zero
 8004554:	24a5883a 	add	r18,r4,r18
 8004558:	0000db06 	br	80048c8 <___vfprintf_internal_r+0x4e0>
 800455c:	00c01b04 	movi	r3,108
 8004560:	10c0d426 	beq	r2,r3,80048b4 <___vfprintf_internal_r+0x4cc>
 8004564:	013fffc4 	movi	r4,-1
 8004568:	91000226 	beq	r18,r4,8004574 <___vfprintf_internal_r+0x18c>
 800456c:	d8000b15 	stw	zero,44(sp)
 8004570:	00000106 	br	8004578 <___vfprintf_internal_r+0x190>
 8004574:	04800044 	movi	r18,1
 8004578:	01001a44 	movi	r4,105
 800457c:	11001626 	beq	r2,r4,80045d8 <___vfprintf_internal_r+0x1f0>
 8004580:	20800916 	blt	r4,r2,80045a8 <___vfprintf_internal_r+0x1c0>
 8004584:	010018c4 	movi	r4,99
 8004588:	11008a26 	beq	r2,r4,80047b4 <___vfprintf_internal_r+0x3cc>
 800458c:	01001904 	movi	r4,100
 8004590:	11001126 	beq	r2,r4,80045d8 <___vfprintf_internal_r+0x1f0>
 8004594:	01001604 	movi	r4,88
 8004598:	1100ca1e 	bne	r2,r4,80048c4 <___vfprintf_internal_r+0x4dc>
 800459c:	00c00044 	movi	r3,1
 80045a0:	d8c00e15 	stw	r3,56(sp)
 80045a4:	00001406 	br	80045f8 <___vfprintf_internal_r+0x210>
 80045a8:	01001cc4 	movi	r4,115
 80045ac:	11009a26 	beq	r2,r4,8004818 <___vfprintf_internal_r+0x430>
 80045b0:	20800416 	blt	r4,r2,80045c4 <___vfprintf_internal_r+0x1dc>
 80045b4:	01001bc4 	movi	r4,111
 80045b8:	1100c21e 	bne	r2,r4,80048c4 <___vfprintf_internal_r+0x4dc>
 80045bc:	05400204 	movi	r21,8
 80045c0:	00000e06 	br	80045fc <___vfprintf_internal_r+0x214>
 80045c4:	01001d44 	movi	r4,117
 80045c8:	11000c26 	beq	r2,r4,80045fc <___vfprintf_internal_r+0x214>
 80045cc:	01001e04 	movi	r4,120
 80045d0:	11000926 	beq	r2,r4,80045f8 <___vfprintf_internal_r+0x210>
 80045d4:	0000bb06 	br	80048c4 <___vfprintf_internal_r+0x4dc>
 80045d8:	b5000104 	addi	r20,r22,4
 80045dc:	b8000726 	beq	r23,zero,80045fc <___vfprintf_internal_r+0x214>
 80045e0:	dd000d15 	stw	r20,52(sp)
 80045e4:	b5800017 	ldw	r22,0(r22)
 80045e8:	b000080e 	bge	r22,zero,800460c <___vfprintf_internal_r+0x224>
 80045ec:	05adc83a 	sub	r22,zero,r22
 80045f0:	02800044 	movi	r10,1
 80045f4:	00000606 	br	8004610 <___vfprintf_internal_r+0x228>
 80045f8:	05400404 	movi	r21,16
 80045fc:	b0c00104 	addi	r3,r22,4
 8004600:	d8c00d15 	stw	r3,52(sp)
 8004604:	b5800017 	ldw	r22,0(r22)
 8004608:	002f883a 	mov	r23,zero
 800460c:	0015883a 	mov	r10,zero
 8004610:	d829883a 	mov	r20,sp
 8004614:	b0001426 	beq	r22,zero,8004668 <___vfprintf_internal_r+0x280>
 8004618:	b009883a 	mov	r4,r22
 800461c:	a80b883a 	mov	r5,r21
 8004620:	da801015 	stw	r10,64(sp)
 8004624:	8004b4c0 	call	8004b4c <__udivsi3>
 8004628:	1549383a 	mul	r4,r2,r21
 800462c:	00c00244 	movi	r3,9
 8004630:	da801017 	ldw	r10,64(sp)
 8004634:	b12dc83a 	sub	r22,r22,r4
 8004638:	1d800216 	blt	r3,r22,8004644 <___vfprintf_internal_r+0x25c>
 800463c:	b5800c04 	addi	r22,r22,48
 8004640:	00000506 	br	8004658 <___vfprintf_internal_r+0x270>
 8004644:	d8c00e17 	ldw	r3,56(sp)
 8004648:	18000226 	beq	r3,zero,8004654 <___vfprintf_internal_r+0x26c>
 800464c:	b5800dc4 	addi	r22,r22,55
 8004650:	00000106 	br	8004658 <___vfprintf_internal_r+0x270>
 8004654:	b58015c4 	addi	r22,r22,87
 8004658:	a5800005 	stb	r22,0(r20)
 800465c:	a5000044 	addi	r20,r20,1
 8004660:	102d883a 	mov	r22,r2
 8004664:	003feb06 	br	8004614 <__flash_rwdata_start+0xffffc940>
 8004668:	a6c7c83a 	sub	r3,r20,sp
 800466c:	d8c00a15 	stw	r3,40(sp)
 8004670:	90c5c83a 	sub	r2,r18,r3
 8004674:	00800a0e 	bge	zero,r2,80046a0 <___vfprintf_internal_r+0x2b8>
 8004678:	a085883a 	add	r2,r20,r2
 800467c:	01400c04 	movi	r5,48
 8004680:	d8c00917 	ldw	r3,36(sp)
 8004684:	a009883a 	mov	r4,r20
 8004688:	a0c0032e 	bgeu	r20,r3,8004698 <___vfprintf_internal_r+0x2b0>
 800468c:	a5000044 	addi	r20,r20,1
 8004690:	21400005 	stb	r5,0(r4)
 8004694:	a0bffa1e 	bne	r20,r2,8004680 <__flash_rwdata_start+0xffffc9ac>
 8004698:	a6c7c83a 	sub	r3,r20,sp
 800469c:	d8c00a15 	stw	r3,40(sp)
 80046a0:	d8c00a17 	ldw	r3,40(sp)
 80046a4:	50d3883a 	add	r9,r10,r3
 80046a8:	d8c00b17 	ldw	r3,44(sp)
 80046ac:	8a6dc83a 	sub	r22,r17,r9
 80046b0:	18001726 	beq	r3,zero,8004710 <___vfprintf_internal_r+0x328>
 80046b4:	50000a26 	beq	r10,zero,80046e0 <___vfprintf_internal_r+0x2f8>
 80046b8:	00800b44 	movi	r2,45
 80046bc:	d8800805 	stb	r2,32(sp)
 80046c0:	e0800117 	ldw	r2,4(fp)
 80046c4:	01c00044 	movi	r7,1
 80046c8:	d9800804 	addi	r6,sp,32
 80046cc:	e00b883a 	mov	r5,fp
 80046d0:	9809883a 	mov	r4,r19
 80046d4:	103ee83a 	callr	r2
 80046d8:	10004d1e 	bne	r2,zero,8004810 <___vfprintf_internal_r+0x428>
 80046dc:	84000044 	addi	r16,r16,1
 80046e0:	0580070e 	bge	zero,r22,8004700 <___vfprintf_internal_r+0x318>
 80046e4:	b00f883a 	mov	r7,r22
 80046e8:	01800c04 	movi	r6,48
 80046ec:	e00b883a 	mov	r5,fp
 80046f0:	9809883a 	mov	r4,r19
 80046f4:	800437c0 	call	800437c <print_repeat>
 80046f8:	1000451e 	bne	r2,zero,8004810 <___vfprintf_internal_r+0x428>
 80046fc:	85a1883a 	add	r16,r16,r22
 8004700:	d8c00a17 	ldw	r3,40(sp)
 8004704:	a013883a 	mov	r9,r20
 8004708:	1d2dc83a 	sub	r22,r3,r20
 800470c:	00002206 	br	8004798 <___vfprintf_internal_r+0x3b0>
 8004710:	0580090e 	bge	zero,r22,8004738 <___vfprintf_internal_r+0x350>
 8004714:	b00f883a 	mov	r7,r22
 8004718:	01800804 	movi	r6,32
 800471c:	e00b883a 	mov	r5,fp
 8004720:	9809883a 	mov	r4,r19
 8004724:	da801015 	stw	r10,64(sp)
 8004728:	800437c0 	call	800437c <print_repeat>
 800472c:	da801017 	ldw	r10,64(sp)
 8004730:	1000371e 	bne	r2,zero,8004810 <___vfprintf_internal_r+0x428>
 8004734:	85a1883a 	add	r16,r16,r22
 8004738:	503ff126 	beq	r10,zero,8004700 <__flash_rwdata_start+0xffffca2c>
 800473c:	00800b44 	movi	r2,45
 8004740:	d8800805 	stb	r2,32(sp)
 8004744:	e0800117 	ldw	r2,4(fp)
 8004748:	01c00044 	movi	r7,1
 800474c:	d9800804 	addi	r6,sp,32
 8004750:	e00b883a 	mov	r5,fp
 8004754:	9809883a 	mov	r4,r19
 8004758:	103ee83a 	callr	r2
 800475c:	10002c1e 	bne	r2,zero,8004810 <___vfprintf_internal_r+0x428>
 8004760:	84000044 	addi	r16,r16,1
 8004764:	003fe606 	br	8004700 <__flash_rwdata_start+0xffffca2c>
 8004768:	4a7fffc4 	addi	r9,r9,-1
 800476c:	48800003 	ldbu	r2,0(r9)
 8004770:	01c00044 	movi	r7,1
 8004774:	d9800804 	addi	r6,sp,32
 8004778:	d8800805 	stb	r2,32(sp)
 800477c:	e0800117 	ldw	r2,4(fp)
 8004780:	e00b883a 	mov	r5,fp
 8004784:	da401015 	stw	r9,64(sp)
 8004788:	9809883a 	mov	r4,r19
 800478c:	103ee83a 	callr	r2
 8004790:	da401017 	ldw	r9,64(sp)
 8004794:	10001e1e 	bne	r2,zero,8004810 <___vfprintf_internal_r+0x428>
 8004798:	8245c83a 	sub	r2,r16,r9
 800479c:	4d89883a 	add	r4,r9,r22
 80047a0:	a085883a 	add	r2,r20,r2
 80047a4:	013ff016 	blt	zero,r4,8004768 <__flash_rwdata_start+0xffffca94>
 80047a8:	1021883a 	mov	r16,r2
 80047ac:	dd800d17 	ldw	r22,52(sp)
 80047b0:	00004406 	br	80048c4 <___vfprintf_internal_r+0x4dc>
 80047b4:	00800044 	movi	r2,1
 80047b8:	1440080e 	bge	r2,r17,80047dc <___vfprintf_internal_r+0x3f4>
 80047bc:	8d3fffc4 	addi	r20,r17,-1
 80047c0:	a00f883a 	mov	r7,r20
 80047c4:	01800804 	movi	r6,32
 80047c8:	e00b883a 	mov	r5,fp
 80047cc:	9809883a 	mov	r4,r19
 80047d0:	800437c0 	call	800437c <print_repeat>
 80047d4:	10000e1e 	bne	r2,zero,8004810 <___vfprintf_internal_r+0x428>
 80047d8:	8521883a 	add	r16,r16,r20
 80047dc:	b0800017 	ldw	r2,0(r22)
 80047e0:	01c00044 	movi	r7,1
 80047e4:	d80d883a 	mov	r6,sp
 80047e8:	d8800005 	stb	r2,0(sp)
 80047ec:	e0800117 	ldw	r2,4(fp)
 80047f0:	e00b883a 	mov	r5,fp
 80047f4:	9809883a 	mov	r4,r19
 80047f8:	b5000104 	addi	r20,r22,4
 80047fc:	103ee83a 	callr	r2
 8004800:	1000031e 	bne	r2,zero,8004810 <___vfprintf_internal_r+0x428>
 8004804:	84000044 	addi	r16,r16,1
 8004808:	a02d883a 	mov	r22,r20
 800480c:	00002d06 	br	80048c4 <___vfprintf_internal_r+0x4dc>
 8004810:	00bfffc4 	movi	r2,-1
 8004814:	00003106 	br	80048dc <___vfprintf_internal_r+0x4f4>
 8004818:	b5000017 	ldw	r20,0(r22)
 800481c:	b0c00104 	addi	r3,r22,4
 8004820:	d8c00a15 	stw	r3,40(sp)
 8004824:	a009883a 	mov	r4,r20
 8004828:	80049e00 	call	80049e0 <strlen>
 800482c:	8893c83a 	sub	r9,r17,r2
 8004830:	102d883a 	mov	r22,r2
 8004834:	0240090e 	bge	zero,r9,800485c <___vfprintf_internal_r+0x474>
 8004838:	480f883a 	mov	r7,r9
 800483c:	01800804 	movi	r6,32
 8004840:	e00b883a 	mov	r5,fp
 8004844:	9809883a 	mov	r4,r19
 8004848:	da401015 	stw	r9,64(sp)
 800484c:	800437c0 	call	800437c <print_repeat>
 8004850:	da401017 	ldw	r9,64(sp)
 8004854:	103fee1e 	bne	r2,zero,8004810 <__flash_rwdata_start+0xffffcb3c>
 8004858:	8261883a 	add	r16,r16,r9
 800485c:	e0800117 	ldw	r2,4(fp)
 8004860:	b00f883a 	mov	r7,r22
 8004864:	a00d883a 	mov	r6,r20
 8004868:	e00b883a 	mov	r5,fp
 800486c:	9809883a 	mov	r4,r19
 8004870:	103ee83a 	callr	r2
 8004874:	103fe61e 	bne	r2,zero,8004810 <__flash_rwdata_start+0xffffcb3c>
 8004878:	85a1883a 	add	r16,r16,r22
 800487c:	dd800a17 	ldw	r22,40(sp)
 8004880:	00001006 	br	80048c4 <___vfprintf_internal_r+0x4dc>
 8004884:	05c00044 	movi	r23,1
 8004888:	04bfffc4 	movi	r18,-1
 800488c:	d8000e15 	stw	zero,56(sp)
 8004890:	05400284 	movi	r21,10
 8004894:	9023883a 	mov	r17,r18
 8004898:	d8000c15 	stw	zero,48(sp)
 800489c:	d8000b15 	stw	zero,44(sp)
 80048a0:	b829883a 	mov	r20,r23
 80048a4:	00000806 	br	80048c8 <___vfprintf_internal_r+0x4e0>
 80048a8:	dd000b15 	stw	r20,44(sp)
 80048ac:	05000084 	movi	r20,2
 80048b0:	00000506 	br	80048c8 <___vfprintf_internal_r+0x4e0>
 80048b4:	00c00044 	movi	r3,1
 80048b8:	d8c00c15 	stw	r3,48(sp)
 80048bc:	050000c4 	movi	r20,3
 80048c0:	00000106 	br	80048c8 <___vfprintf_internal_r+0x4e0>
 80048c4:	0029883a 	mov	r20,zero
 80048c8:	d8c00f17 	ldw	r3,60(sp)
 80048cc:	18c00044 	addi	r3,r3,1
 80048d0:	d8c00f15 	stw	r3,60(sp)
 80048d4:	003ede06 	br	8004450 <__flash_rwdata_start+0xffffc77c>
 80048d8:	8005883a 	mov	r2,r16
 80048dc:	dfc01a17 	ldw	ra,104(sp)
 80048e0:	df001917 	ldw	fp,100(sp)
 80048e4:	ddc01817 	ldw	r23,96(sp)
 80048e8:	dd801717 	ldw	r22,92(sp)
 80048ec:	dd401617 	ldw	r21,88(sp)
 80048f0:	dd001517 	ldw	r20,84(sp)
 80048f4:	dcc01417 	ldw	r19,80(sp)
 80048f8:	dc801317 	ldw	r18,76(sp)
 80048fc:	dc401217 	ldw	r17,72(sp)
 8004900:	dc001117 	ldw	r16,68(sp)
 8004904:	dec01b04 	addi	sp,sp,108
 8004908:	f800283a 	ret

0800490c <__vfprintf_internal>:
 800490c:	00800034 	movhi	r2,0
 8004910:	10853004 	addi	r2,r2,5312
 8004914:	300f883a 	mov	r7,r6
 8004918:	280d883a 	mov	r6,r5
 800491c:	200b883a 	mov	r5,r4
 8004920:	11000017 	ldw	r4,0(r2)
 8004924:	80043e81 	jmpi	80043e8 <___vfprintf_internal_r>

08004928 <__sfvwrite_small_dev>:
 8004928:	2880000b 	ldhu	r2,0(r5)
 800492c:	1080020c 	andi	r2,r2,8
 8004930:	10002126 	beq	r2,zero,80049b8 <__sfvwrite_small_dev+0x90>
 8004934:	2880008f 	ldh	r2,2(r5)
 8004938:	defffa04 	addi	sp,sp,-24
 800493c:	dc000015 	stw	r16,0(sp)
 8004940:	dfc00515 	stw	ra,20(sp)
 8004944:	dd000415 	stw	r20,16(sp)
 8004948:	dcc00315 	stw	r19,12(sp)
 800494c:	dc800215 	stw	r18,8(sp)
 8004950:	dc400115 	stw	r17,4(sp)
 8004954:	2821883a 	mov	r16,r5
 8004958:	10001216 	blt	r2,zero,80049a4 <__sfvwrite_small_dev+0x7c>
 800495c:	2027883a 	mov	r19,r4
 8004960:	3025883a 	mov	r18,r6
 8004964:	3823883a 	mov	r17,r7
 8004968:	05010004 	movi	r20,1024
 800496c:	04400b0e 	bge	zero,r17,800499c <__sfvwrite_small_dev+0x74>
 8004970:	880f883a 	mov	r7,r17
 8004974:	a440010e 	bge	r20,r17,800497c <__sfvwrite_small_dev+0x54>
 8004978:	01c10004 	movi	r7,1024
 800497c:	8140008f 	ldh	r5,2(r16)
 8004980:	900d883a 	mov	r6,r18
 8004984:	9809883a 	mov	r4,r19
 8004988:	80049fc0 	call	80049fc <_write_r>
 800498c:	0080050e 	bge	zero,r2,80049a4 <__sfvwrite_small_dev+0x7c>
 8004990:	88a3c83a 	sub	r17,r17,r2
 8004994:	90a5883a 	add	r18,r18,r2
 8004998:	003ff406 	br	800496c <__flash_rwdata_start+0xffffcc98>
 800499c:	0005883a 	mov	r2,zero
 80049a0:	00000706 	br	80049c0 <__sfvwrite_small_dev+0x98>
 80049a4:	8080000b 	ldhu	r2,0(r16)
 80049a8:	10801014 	ori	r2,r2,64
 80049ac:	8080000d 	sth	r2,0(r16)
 80049b0:	00bfffc4 	movi	r2,-1
 80049b4:	00000206 	br	80049c0 <__sfvwrite_small_dev+0x98>
 80049b8:	00bfffc4 	movi	r2,-1
 80049bc:	f800283a 	ret
 80049c0:	dfc00517 	ldw	ra,20(sp)
 80049c4:	dd000417 	ldw	r20,16(sp)
 80049c8:	dcc00317 	ldw	r19,12(sp)
 80049cc:	dc800217 	ldw	r18,8(sp)
 80049d0:	dc400117 	ldw	r17,4(sp)
 80049d4:	dc000017 	ldw	r16,0(sp)
 80049d8:	dec00604 	addi	sp,sp,24
 80049dc:	f800283a 	ret

080049e0 <strlen>:
 80049e0:	2005883a 	mov	r2,r4
 80049e4:	10c00007 	ldb	r3,0(r2)
 80049e8:	18000226 	beq	r3,zero,80049f4 <strlen+0x14>
 80049ec:	10800044 	addi	r2,r2,1
 80049f0:	003ffc06 	br	80049e4 <__flash_rwdata_start+0xffffcd10>
 80049f4:	1105c83a 	sub	r2,r2,r4
 80049f8:	f800283a 	ret

080049fc <_write_r>:
 80049fc:	defffd04 	addi	sp,sp,-12
 8004a00:	dc000015 	stw	r16,0(sp)
 8004a04:	04000034 	movhi	r16,0
 8004a08:	dc400115 	stw	r17,4(sp)
 8004a0c:	84053e04 	addi	r16,r16,5368
 8004a10:	2023883a 	mov	r17,r4
 8004a14:	2809883a 	mov	r4,r5
 8004a18:	300b883a 	mov	r5,r6
 8004a1c:	380d883a 	mov	r6,r7
 8004a20:	dfc00215 	stw	ra,8(sp)
 8004a24:	80000015 	stw	zero,0(r16)
 8004a28:	8004dac0 	call	8004dac <write>
 8004a2c:	00ffffc4 	movi	r3,-1
 8004a30:	10c0031e 	bne	r2,r3,8004a40 <_write_r+0x44>
 8004a34:	80c00017 	ldw	r3,0(r16)
 8004a38:	18000126 	beq	r3,zero,8004a40 <_write_r+0x44>
 8004a3c:	88c00015 	stw	r3,0(r17)
 8004a40:	dfc00217 	ldw	ra,8(sp)
 8004a44:	dc400117 	ldw	r17,4(sp)
 8004a48:	dc000017 	ldw	r16,0(sp)
 8004a4c:	dec00304 	addi	sp,sp,12
 8004a50:	f800283a 	ret

08004a54 <__divsi3>:
 8004a54:	20001b16 	blt	r4,zero,8004ac4 <__divsi3+0x70>
 8004a58:	000f883a 	mov	r7,zero
 8004a5c:	28001616 	blt	r5,zero,8004ab8 <__divsi3+0x64>
 8004a60:	200d883a 	mov	r6,r4
 8004a64:	29001a2e 	bgeu	r5,r4,8004ad0 <__divsi3+0x7c>
 8004a68:	00800804 	movi	r2,32
 8004a6c:	00c00044 	movi	r3,1
 8004a70:	00000106 	br	8004a78 <__divsi3+0x24>
 8004a74:	10000d26 	beq	r2,zero,8004aac <__divsi3+0x58>
 8004a78:	294b883a 	add	r5,r5,r5
 8004a7c:	10bfffc4 	addi	r2,r2,-1
 8004a80:	18c7883a 	add	r3,r3,r3
 8004a84:	293ffb36 	bltu	r5,r4,8004a74 <__flash_rwdata_start+0xffffcda0>
 8004a88:	0005883a 	mov	r2,zero
 8004a8c:	18000726 	beq	r3,zero,8004aac <__divsi3+0x58>
 8004a90:	0005883a 	mov	r2,zero
 8004a94:	31400236 	bltu	r6,r5,8004aa0 <__divsi3+0x4c>
 8004a98:	314dc83a 	sub	r6,r6,r5
 8004a9c:	10c4b03a 	or	r2,r2,r3
 8004aa0:	1806d07a 	srli	r3,r3,1
 8004aa4:	280ad07a 	srli	r5,r5,1
 8004aa8:	183ffa1e 	bne	r3,zero,8004a94 <__flash_rwdata_start+0xffffcdc0>
 8004aac:	38000126 	beq	r7,zero,8004ab4 <__divsi3+0x60>
 8004ab0:	0085c83a 	sub	r2,zero,r2
 8004ab4:	f800283a 	ret
 8004ab8:	014bc83a 	sub	r5,zero,r5
 8004abc:	39c0005c 	xori	r7,r7,1
 8004ac0:	003fe706 	br	8004a60 <__flash_rwdata_start+0xffffcd8c>
 8004ac4:	0109c83a 	sub	r4,zero,r4
 8004ac8:	01c00044 	movi	r7,1
 8004acc:	003fe306 	br	8004a5c <__flash_rwdata_start+0xffffcd88>
 8004ad0:	00c00044 	movi	r3,1
 8004ad4:	003fee06 	br	8004a90 <__flash_rwdata_start+0xffffcdbc>

08004ad8 <__modsi3>:
 8004ad8:	20001716 	blt	r4,zero,8004b38 <__modsi3+0x60>
 8004adc:	000f883a 	mov	r7,zero
 8004ae0:	2005883a 	mov	r2,r4
 8004ae4:	28001216 	blt	r5,zero,8004b30 <__modsi3+0x58>
 8004ae8:	2900162e 	bgeu	r5,r4,8004b44 <__modsi3+0x6c>
 8004aec:	01800804 	movi	r6,32
 8004af0:	00c00044 	movi	r3,1
 8004af4:	00000106 	br	8004afc <__modsi3+0x24>
 8004af8:	30000a26 	beq	r6,zero,8004b24 <__modsi3+0x4c>
 8004afc:	294b883a 	add	r5,r5,r5
 8004b00:	31bfffc4 	addi	r6,r6,-1
 8004b04:	18c7883a 	add	r3,r3,r3
 8004b08:	293ffb36 	bltu	r5,r4,8004af8 <__flash_rwdata_start+0xffffce24>
 8004b0c:	18000526 	beq	r3,zero,8004b24 <__modsi3+0x4c>
 8004b10:	1806d07a 	srli	r3,r3,1
 8004b14:	11400136 	bltu	r2,r5,8004b1c <__modsi3+0x44>
 8004b18:	1145c83a 	sub	r2,r2,r5
 8004b1c:	280ad07a 	srli	r5,r5,1
 8004b20:	183ffb1e 	bne	r3,zero,8004b10 <__flash_rwdata_start+0xffffce3c>
 8004b24:	38000126 	beq	r7,zero,8004b2c <__modsi3+0x54>
 8004b28:	0085c83a 	sub	r2,zero,r2
 8004b2c:	f800283a 	ret
 8004b30:	014bc83a 	sub	r5,zero,r5
 8004b34:	003fec06 	br	8004ae8 <__flash_rwdata_start+0xffffce14>
 8004b38:	0109c83a 	sub	r4,zero,r4
 8004b3c:	01c00044 	movi	r7,1
 8004b40:	003fe706 	br	8004ae0 <__flash_rwdata_start+0xffffce0c>
 8004b44:	00c00044 	movi	r3,1
 8004b48:	003ff106 	br	8004b10 <__flash_rwdata_start+0xffffce3c>

08004b4c <__udivsi3>:
 8004b4c:	200d883a 	mov	r6,r4
 8004b50:	2900152e 	bgeu	r5,r4,8004ba8 <__udivsi3+0x5c>
 8004b54:	28001416 	blt	r5,zero,8004ba8 <__udivsi3+0x5c>
 8004b58:	00800804 	movi	r2,32
 8004b5c:	00c00044 	movi	r3,1
 8004b60:	00000206 	br	8004b6c <__udivsi3+0x20>
 8004b64:	10000e26 	beq	r2,zero,8004ba0 <__udivsi3+0x54>
 8004b68:	28000516 	blt	r5,zero,8004b80 <__udivsi3+0x34>
 8004b6c:	294b883a 	add	r5,r5,r5
 8004b70:	10bfffc4 	addi	r2,r2,-1
 8004b74:	18c7883a 	add	r3,r3,r3
 8004b78:	293ffa36 	bltu	r5,r4,8004b64 <__flash_rwdata_start+0xffffce90>
 8004b7c:	18000826 	beq	r3,zero,8004ba0 <__udivsi3+0x54>
 8004b80:	0005883a 	mov	r2,zero
 8004b84:	31400236 	bltu	r6,r5,8004b90 <__udivsi3+0x44>
 8004b88:	314dc83a 	sub	r6,r6,r5
 8004b8c:	10c4b03a 	or	r2,r2,r3
 8004b90:	1806d07a 	srli	r3,r3,1
 8004b94:	280ad07a 	srli	r5,r5,1
 8004b98:	183ffa1e 	bne	r3,zero,8004b84 <__flash_rwdata_start+0xffffceb0>
 8004b9c:	f800283a 	ret
 8004ba0:	0005883a 	mov	r2,zero
 8004ba4:	f800283a 	ret
 8004ba8:	00c00044 	movi	r3,1
 8004bac:	003ff406 	br	8004b80 <__flash_rwdata_start+0xffffceac>

08004bb0 <__umodsi3>:
 8004bb0:	2005883a 	mov	r2,r4
 8004bb4:	2900122e 	bgeu	r5,r4,8004c00 <__umodsi3+0x50>
 8004bb8:	28001116 	blt	r5,zero,8004c00 <__umodsi3+0x50>
 8004bbc:	01800804 	movi	r6,32
 8004bc0:	00c00044 	movi	r3,1
 8004bc4:	00000206 	br	8004bd0 <__umodsi3+0x20>
 8004bc8:	30000c26 	beq	r6,zero,8004bfc <__umodsi3+0x4c>
 8004bcc:	28000516 	blt	r5,zero,8004be4 <__umodsi3+0x34>
 8004bd0:	294b883a 	add	r5,r5,r5
 8004bd4:	31bfffc4 	addi	r6,r6,-1
 8004bd8:	18c7883a 	add	r3,r3,r3
 8004bdc:	293ffa36 	bltu	r5,r4,8004bc8 <__flash_rwdata_start+0xffffcef4>
 8004be0:	18000626 	beq	r3,zero,8004bfc <__umodsi3+0x4c>
 8004be4:	1806d07a 	srli	r3,r3,1
 8004be8:	11400136 	bltu	r2,r5,8004bf0 <__umodsi3+0x40>
 8004bec:	1145c83a 	sub	r2,r2,r5
 8004bf0:	280ad07a 	srli	r5,r5,1
 8004bf4:	183ffb1e 	bne	r3,zero,8004be4 <__flash_rwdata_start+0xffffcf10>
 8004bf8:	f800283a 	ret
 8004bfc:	f800283a 	ret
 8004c00:	00c00044 	movi	r3,1
 8004c04:	003ff706 	br	8004be4 <__flash_rwdata_start+0xffffcf10>

08004c08 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 8004c08:	defffc04 	addi	sp,sp,-16
 8004c0c:	df000315 	stw	fp,12(sp)
 8004c10:	df000304 	addi	fp,sp,12
 8004c14:	e13ffd15 	stw	r4,-12(fp)
 8004c18:	e17ffe15 	stw	r5,-8(fp)
 8004c1c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 8004c20:	e0fffe17 	ldw	r3,-8(fp)
 8004c24:	e0bffd17 	ldw	r2,-12(fp)
 8004c28:	18800c26 	beq	r3,r2,8004c5c <alt_load_section+0x54>
  {
    while( to != end )
 8004c2c:	00000806 	br	8004c50 <alt_load_section+0x48>
    {
      *to++ = *from++;
 8004c30:	e0bffe17 	ldw	r2,-8(fp)
 8004c34:	10c00104 	addi	r3,r2,4
 8004c38:	e0fffe15 	stw	r3,-8(fp)
 8004c3c:	e0fffd17 	ldw	r3,-12(fp)
 8004c40:	19000104 	addi	r4,r3,4
 8004c44:	e13ffd15 	stw	r4,-12(fp)
 8004c48:	18c00017 	ldw	r3,0(r3)
 8004c4c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 8004c50:	e0fffe17 	ldw	r3,-8(fp)
 8004c54:	e0bfff17 	ldw	r2,-4(fp)
 8004c58:	18bff51e 	bne	r3,r2,8004c30 <__flash_rwdata_start+0xffffcf5c>
    {
      *to++ = *from++;
    }
  }
}
 8004c5c:	0001883a 	nop
 8004c60:	e037883a 	mov	sp,fp
 8004c64:	df000017 	ldw	fp,0(sp)
 8004c68:	dec00104 	addi	sp,sp,4
 8004c6c:	f800283a 	ret

08004c70 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 8004c70:	defffe04 	addi	sp,sp,-8
 8004c74:	dfc00115 	stw	ra,4(sp)
 8004c78:	df000015 	stw	fp,0(sp)
 8004c7c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 8004c80:	01800034 	movhi	r6,0
 8004c84:	31853e04 	addi	r6,r6,5368
 8004c88:	01400034 	movhi	r5,0
 8004c8c:	29403a04 	addi	r5,r5,232
 8004c90:	01020034 	movhi	r4,2048
 8004c94:	211f3504 	addi	r4,r4,31956
 8004c98:	8004c080 	call	8004c08 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 8004c9c:	01820034 	movhi	r6,2048
 8004ca0:	31909104 	addi	r6,r6,16964
 8004ca4:	01420034 	movhi	r5,2048
 8004ca8:	29500804 	addi	r5,r5,16416
 8004cac:	01020034 	movhi	r4,2048
 8004cb0:	21100804 	addi	r4,r4,16416
 8004cb4:	8004c080 	call	8004c08 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 8004cb8:	01800034 	movhi	r6,0
 8004cbc:	31803a04 	addi	r6,r6,232
 8004cc0:	01400034 	movhi	r5,0
 8004cc4:	29400004 	addi	r5,r5,0
 8004cc8:	01020034 	movhi	r4,2048
 8004ccc:	211efb04 	addi	r4,r4,31724
 8004cd0:	8004c080 	call	8004c08 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 8004cd4:	8006a340 	call	8006a34 <alt_dcache_flush_all>
  alt_icache_flush_all();
 8004cd8:	8006cd80 	call	8006cd8 <alt_icache_flush_all>
}
 8004cdc:	0001883a 	nop
 8004ce0:	e037883a 	mov	sp,fp
 8004ce4:	dfc00117 	ldw	ra,4(sp)
 8004ce8:	df000017 	ldw	fp,0(sp)
 8004cec:	dec00204 	addi	sp,sp,8
 8004cf0:	f800283a 	ret

08004cf4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 8004cf4:	defffd04 	addi	sp,sp,-12
 8004cf8:	dfc00215 	stw	ra,8(sp)
 8004cfc:	df000115 	stw	fp,4(sp)
 8004d00:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 8004d04:	0009883a 	mov	r4,zero
 8004d08:	8004f7c0 	call	8004f7c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 8004d0c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 8004d10:	8004fb40 	call	8004fb4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 8004d14:	01800034 	movhi	r6,0
 8004d18:	31800f04 	addi	r6,r6,60
 8004d1c:	01400034 	movhi	r5,0
 8004d20:	29400f04 	addi	r5,r5,60
 8004d24:	01000034 	movhi	r4,0
 8004d28:	21000f04 	addi	r4,r4,60
 8004d2c:	80070700 	call	8007070 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 8004d30:	8006b880 	call	8006b88 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 8004d34:	01020034 	movhi	r4,2048
 8004d38:	211afa04 	addi	r4,r4,27624
 8004d3c:	80078440 	call	8007844 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 8004d40:	d0a01017 	ldw	r2,-32704(gp)
 8004d44:	d0e01117 	ldw	r3,-32700(gp)
 8004d48:	d1201217 	ldw	r4,-32696(gp)
 8004d4c:	200d883a 	mov	r6,r4
 8004d50:	180b883a 	mov	r5,r3
 8004d54:	1009883a 	mov	r4,r2
 8004d58:	80042c80 	call	80042c8 <main>
 8004d5c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 8004d60:	01000044 	movi	r4,1
 8004d64:	80069640 	call	8006964 <close>
  exit (result);
 8004d68:	e13fff17 	ldw	r4,-4(fp)
 8004d6c:	80078580 	call	8007858 <exit>

08004d70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8004d70:	defffe04 	addi	sp,sp,-8
 8004d74:	dfc00115 	stw	ra,4(sp)
 8004d78:	df000015 	stw	fp,0(sp)
 8004d7c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8004d80:	d0a00b17 	ldw	r2,-32724(gp)
 8004d84:	10000326 	beq	r2,zero,8004d94 <alt_get_errno+0x24>
 8004d88:	d0a00b17 	ldw	r2,-32724(gp)
 8004d8c:	103ee83a 	callr	r2
 8004d90:	00000106 	br	8004d98 <alt_get_errno+0x28>
 8004d94:	d0a00f04 	addi	r2,gp,-32708
}
 8004d98:	e037883a 	mov	sp,fp
 8004d9c:	dfc00117 	ldw	ra,4(sp)
 8004da0:	df000017 	ldw	fp,0(sp)
 8004da4:	dec00204 	addi	sp,sp,8
 8004da8:	f800283a 	ret

08004dac <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 8004dac:	defff904 	addi	sp,sp,-28
 8004db0:	dfc00615 	stw	ra,24(sp)
 8004db4:	df000515 	stw	fp,20(sp)
 8004db8:	df000504 	addi	fp,sp,20
 8004dbc:	e13ffd15 	stw	r4,-12(fp)
 8004dc0:	e17ffe15 	stw	r5,-8(fp)
 8004dc4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8004dc8:	e0bffd17 	ldw	r2,-12(fp)
 8004dcc:	10000616 	blt	r2,zero,8004de8 <write+0x3c>
 8004dd0:	e0bffd17 	ldw	r2,-12(fp)
 8004dd4:	10c00324 	muli	r3,r2,12
 8004dd8:	00800034 	movhi	r2,0
 8004ddc:	1084cf04 	addi	r2,r2,4924
 8004de0:	1885883a 	add	r2,r3,r2
 8004de4:	00000106 	br	8004dec <write+0x40>
 8004de8:	0005883a 	mov	r2,zero
 8004dec:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 8004df0:	e0bffb17 	ldw	r2,-20(fp)
 8004df4:	10002126 	beq	r2,zero,8004e7c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 8004df8:	e0bffb17 	ldw	r2,-20(fp)
 8004dfc:	10800217 	ldw	r2,8(r2)
 8004e00:	108000cc 	andi	r2,r2,3
 8004e04:	10001826 	beq	r2,zero,8004e68 <write+0xbc>
 8004e08:	e0bffb17 	ldw	r2,-20(fp)
 8004e0c:	10800017 	ldw	r2,0(r2)
 8004e10:	10800617 	ldw	r2,24(r2)
 8004e14:	10001426 	beq	r2,zero,8004e68 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 8004e18:	e0bffb17 	ldw	r2,-20(fp)
 8004e1c:	10800017 	ldw	r2,0(r2)
 8004e20:	10800617 	ldw	r2,24(r2)
 8004e24:	e0ffff17 	ldw	r3,-4(fp)
 8004e28:	180d883a 	mov	r6,r3
 8004e2c:	e17ffe17 	ldw	r5,-8(fp)
 8004e30:	e13ffb17 	ldw	r4,-20(fp)
 8004e34:	103ee83a 	callr	r2
 8004e38:	e0bffc15 	stw	r2,-16(fp)
 8004e3c:	e0bffc17 	ldw	r2,-16(fp)
 8004e40:	1000070e 	bge	r2,zero,8004e60 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 8004e44:	8004d700 	call	8004d70 <alt_get_errno>
 8004e48:	1007883a 	mov	r3,r2
 8004e4c:	e0bffc17 	ldw	r2,-16(fp)
 8004e50:	0085c83a 	sub	r2,zero,r2
 8004e54:	18800015 	stw	r2,0(r3)
        return -1;
 8004e58:	00bfffc4 	movi	r2,-1
 8004e5c:	00000c06 	br	8004e90 <write+0xe4>
      }
      return rval;
 8004e60:	e0bffc17 	ldw	r2,-16(fp)
 8004e64:	00000a06 	br	8004e90 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 8004e68:	8004d700 	call	8004d70 <alt_get_errno>
 8004e6c:	1007883a 	mov	r3,r2
 8004e70:	00800344 	movi	r2,13
 8004e74:	18800015 	stw	r2,0(r3)
 8004e78:	00000406 	br	8004e8c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 8004e7c:	8004d700 	call	8004d70 <alt_get_errno>
 8004e80:	1007883a 	mov	r3,r2
 8004e84:	00801444 	movi	r2,81
 8004e88:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8004e8c:	00bfffc4 	movi	r2,-1
}
 8004e90:	e037883a 	mov	sp,fp
 8004e94:	dfc00117 	ldw	ra,4(sp)
 8004e98:	df000017 	ldw	fp,0(sp)
 8004e9c:	dec00204 	addi	sp,sp,8
 8004ea0:	f800283a 	ret

08004ea4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 8004ea4:	defffd04 	addi	sp,sp,-12
 8004ea8:	dfc00215 	stw	ra,8(sp)
 8004eac:	df000115 	stw	fp,4(sp)
 8004eb0:	df000104 	addi	fp,sp,4
 8004eb4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 8004eb8:	d1600804 	addi	r5,gp,-32736
 8004ebc:	e13fff17 	ldw	r4,-4(fp)
 8004ec0:	8006ae40 	call	8006ae4 <alt_dev_llist_insert>
}
 8004ec4:	e037883a 	mov	sp,fp
 8004ec8:	dfc00117 	ldw	ra,4(sp)
 8004ecc:	df000017 	ldw	fp,0(sp)
 8004ed0:	dec00204 	addi	sp,sp,8
 8004ed4:	f800283a 	ret

08004ed8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8004ed8:	defffe04 	addi	sp,sp,-8
 8004edc:	dfc00115 	stw	ra,4(sp)
 8004ee0:	df000015 	stw	fp,0(sp)
 8004ee4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8004ee8:	d0a00b17 	ldw	r2,-32724(gp)
 8004eec:	10000326 	beq	r2,zero,8004efc <alt_get_errno+0x24>
 8004ef0:	d0a00b17 	ldw	r2,-32724(gp)
 8004ef4:	103ee83a 	callr	r2
 8004ef8:	00000106 	br	8004f00 <alt_get_errno+0x28>
 8004efc:	d0a00f04 	addi	r2,gp,-32708
}
 8004f00:	e037883a 	mov	sp,fp
 8004f04:	dfc00117 	ldw	ra,4(sp)
 8004f08:	df000017 	ldw	fp,0(sp)
 8004f0c:	dec00204 	addi	sp,sp,8
 8004f10:	f800283a 	ret

08004f14 <alt_avalon_mutex_reg>:
/*
 * Register a Mutex device
 */

static ALT_INLINE int alt_avalon_mutex_reg (alt_mutex_dev* dev)
{
 8004f14:	defffc04 	addi	sp,sp,-16
 8004f18:	dfc00315 	stw	ra,12(sp)
 8004f1c:	df000215 	stw	fp,8(sp)
 8004f20:	df000204 	addi	fp,sp,8
 8004f24:	e13fff15 	stw	r4,-4(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 8004f28:	0005883a 	mov	r2,zero
  int ret_code;
  extern alt_llist alt_mutex_list;
  ret_code = ALT_SEM_CREATE (&dev->lock, 1);
 8004f2c:	e0bffe15 	stw	r2,-8(fp)
  if (!ret_code)
 8004f30:	e0bffe17 	ldw	r2,-8(fp)
 8004f34:	1000051e 	bne	r2,zero,8004f4c <alt_avalon_mutex_reg+0x38>
  {
    ret_code = alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mutex_list);
 8004f38:	d1600404 	addi	r5,gp,-32752
 8004f3c:	e13fff17 	ldw	r4,-4(fp)
 8004f40:	8006ae40 	call	8006ae4 <alt_dev_llist_insert>
 8004f44:	e0bffe15 	stw	r2,-8(fp)
 8004f48:	00000606 	br	8004f64 <alt_avalon_mutex_reg+0x50>
  }
  else
  {
    ALT_ERRNO = ENOMEM;
 8004f4c:	8004ed80 	call	8004ed8 <alt_get_errno>
 8004f50:	1007883a 	mov	r3,r2
 8004f54:	00800304 	movi	r2,12
 8004f58:	18800015 	stw	r2,0(r3)
    ret_code = -ENOMEM;
 8004f5c:	00bffd04 	movi	r2,-12
 8004f60:	e0bffe15 	stw	r2,-8(fp)
  }

  return ret_code;
 8004f64:	e0bffe17 	ldw	r2,-8(fp)
}
 8004f68:	e037883a 	mov	sp,fp
 8004f6c:	dfc00117 	ldw	ra,4(sp)
 8004f70:	df000017 	ldw	fp,0(sp)
 8004f74:	dec00204 	addi	sp,sp,8
 8004f78:	f800283a 	ret

08004f7c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 8004f7c:	defffd04 	addi	sp,sp,-12
 8004f80:	dfc00215 	stw	ra,8(sp)
 8004f84:	df000115 	stw	fp,4(sp)
 8004f88:	df000104 	addi	fp,sp,4
 8004f8c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU_0, cpu_0);
 8004f90:	80075480 	call	8007548 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 8004f94:	00800044 	movi	r2,1
 8004f98:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 8004f9c:	0001883a 	nop
 8004fa0:	e037883a 	mov	sp,fp
 8004fa4:	dfc00117 	ldw	ra,4(sp)
 8004fa8:	df000017 	ldw	fp,0(sp)
 8004fac:	dec00204 	addi	sp,sp,8
 8004fb0:	f800283a 	ret

08004fb4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 8004fb4:	defffe04 	addi	sp,sp,-8
 8004fb8:	dfc00115 	stw	ra,4(sp)
 8004fbc:	df000015 	stw	fp,0(sp)
 8004fc0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 8004fc4:	01c0fa04 	movi	r7,1000
 8004fc8:	01800084 	movi	r6,2
 8004fcc:	000b883a 	mov	r5,zero
 8004fd0:	01020074 	movhi	r4,2049
 8004fd4:	21221004 	addi	r4,r4,-30656
 8004fd8:	80067800 	call	8006780 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 8004fdc:	018000c4 	movi	r6,3
 8004fe0:	000b883a 	mov	r5,zero
 8004fe4:	01000034 	movhi	r4,0
 8004fe8:	21007c04 	addi	r4,r4,496
 8004fec:	80051d80 	call	80051d8 <altera_avalon_jtag_uart_init>
 8004ff0:	01000034 	movhi	r4,0
 8004ff4:	21007204 	addi	r4,r4,456
 8004ff8:	8004ea40 	call	8004ea4 <alt_dev_reg>
    ALTERA_AVALON_MAILBOX_SIMPLE_INIT ( MAILBOX_SIMPLE_0, mailbox_simple_0);
 8004ffc:	01bfffc4 	movi	r6,-1
 8005000:	000b883a 	mov	r5,zero
 8005004:	01000034 	movhi	r4,0
 8005008:	21048a04 	addi	r4,r4,4648
 800500c:	8005dc40 	call	8005dc4 <altera_avalon_mailbox_simple_init>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX_0, mutex_0);
 8005010:	01000034 	movhi	r4,0
 8005014:	21049c04 	addi	r4,r4,4720
 8005018:	8004f140 	call	8004f14 <alt_avalon_mutex_reg>
    ALTERA_AVALON_MUTEX_INIT ( MUTEX_1, mutex_1);
 800501c:	01000034 	movhi	r4,0
 8005020:	2104a004 	addi	r4,r4,4736
 8005024:	8004f140 	call	8004f14 <alt_avalon_mutex_reg>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( PERFORMANCE_COUNTER_0, performance_counter_0);
 8005028:	00c00044 	movi	r3,1
 800502c:	00820074 	movhi	r2,2049
 8005030:	10a20004 	addi	r2,r2,-30720
 8005034:	10c00035 	stwio	r3,0(r2)
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( DEBUG_PP, Debug_PP);
 8005038:	01000034 	movhi	r4,0
 800503c:	2104a404 	addi	r4,r4,4752
 8005040:	8004ea40 	call	8004ea4 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PARALLEL_PORT_0, parallel_port_0);
 8005044:	01000034 	movhi	r4,0
 8005048:	2104af04 	addi	r4,r4,4796
 800504c:	8004ea40 	call	8004ea4 <alt_dev_reg>
    ALTERA_UP_AVALON_PARALLEL_PORT_INIT ( PARALLEL_PORT_2, parallel_port_2);
 8005050:	01000034 	movhi	r4,0
 8005054:	2104ba04 	addi	r4,r4,4840
 8005058:	8004ea40 	call	8004ea4 <alt_dev_reg>
}
 800505c:	0001883a 	nop
 8005060:	e037883a 	mov	sp,fp
 8005064:	dfc00117 	ldw	ra,4(sp)
 8005068:	df000017 	ldw	fp,0(sp)
 800506c:	dec00204 	addi	sp,sp,8
 8005070:	f800283a 	ret

08005074 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 8005074:	defffa04 	addi	sp,sp,-24
 8005078:	dfc00515 	stw	ra,20(sp)
 800507c:	df000415 	stw	fp,16(sp)
 8005080:	df000404 	addi	fp,sp,16
 8005084:	e13ffd15 	stw	r4,-12(fp)
 8005088:	e17ffe15 	stw	r5,-8(fp)
 800508c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8005090:	e0bffd17 	ldw	r2,-12(fp)
 8005094:	10800017 	ldw	r2,0(r2)
 8005098:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 800509c:	e0bffc17 	ldw	r2,-16(fp)
 80050a0:	10c00a04 	addi	r3,r2,40
 80050a4:	e0bffd17 	ldw	r2,-12(fp)
 80050a8:	10800217 	ldw	r2,8(r2)
 80050ac:	100f883a 	mov	r7,r2
 80050b0:	e1bfff17 	ldw	r6,-4(fp)
 80050b4:	e17ffe17 	ldw	r5,-8(fp)
 80050b8:	1809883a 	mov	r4,r3
 80050bc:	800569c0 	call	800569c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 80050c0:	e037883a 	mov	sp,fp
 80050c4:	dfc00117 	ldw	ra,4(sp)
 80050c8:	df000017 	ldw	fp,0(sp)
 80050cc:	dec00204 	addi	sp,sp,8
 80050d0:	f800283a 	ret

080050d4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 80050d4:	defffa04 	addi	sp,sp,-24
 80050d8:	dfc00515 	stw	ra,20(sp)
 80050dc:	df000415 	stw	fp,16(sp)
 80050e0:	df000404 	addi	fp,sp,16
 80050e4:	e13ffd15 	stw	r4,-12(fp)
 80050e8:	e17ffe15 	stw	r5,-8(fp)
 80050ec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 80050f0:	e0bffd17 	ldw	r2,-12(fp)
 80050f4:	10800017 	ldw	r2,0(r2)
 80050f8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 80050fc:	e0bffc17 	ldw	r2,-16(fp)
 8005100:	10c00a04 	addi	r3,r2,40
 8005104:	e0bffd17 	ldw	r2,-12(fp)
 8005108:	10800217 	ldw	r2,8(r2)
 800510c:	100f883a 	mov	r7,r2
 8005110:	e1bfff17 	ldw	r6,-4(fp)
 8005114:	e17ffe17 	ldw	r5,-8(fp)
 8005118:	1809883a 	mov	r4,r3
 800511c:	80058b80 	call	80058b8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 8005120:	e037883a 	mov	sp,fp
 8005124:	dfc00117 	ldw	ra,4(sp)
 8005128:	df000017 	ldw	fp,0(sp)
 800512c:	dec00204 	addi	sp,sp,8
 8005130:	f800283a 	ret

08005134 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 8005134:	defffc04 	addi	sp,sp,-16
 8005138:	dfc00315 	stw	ra,12(sp)
 800513c:	df000215 	stw	fp,8(sp)
 8005140:	df000204 	addi	fp,sp,8
 8005144:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8005148:	e0bfff17 	ldw	r2,-4(fp)
 800514c:	10800017 	ldw	r2,0(r2)
 8005150:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 8005154:	e0bffe17 	ldw	r2,-8(fp)
 8005158:	10c00a04 	addi	r3,r2,40
 800515c:	e0bfff17 	ldw	r2,-4(fp)
 8005160:	10800217 	ldw	r2,8(r2)
 8005164:	100b883a 	mov	r5,r2
 8005168:	1809883a 	mov	r4,r3
 800516c:	80055440 	call	8005544 <altera_avalon_jtag_uart_close>
}
 8005170:	e037883a 	mov	sp,fp
 8005174:	dfc00117 	ldw	ra,4(sp)
 8005178:	df000017 	ldw	fp,0(sp)
 800517c:	dec00204 	addi	sp,sp,8
 8005180:	f800283a 	ret

08005184 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 8005184:	defffa04 	addi	sp,sp,-24
 8005188:	dfc00515 	stw	ra,20(sp)
 800518c:	df000415 	stw	fp,16(sp)
 8005190:	df000404 	addi	fp,sp,16
 8005194:	e13ffd15 	stw	r4,-12(fp)
 8005198:	e17ffe15 	stw	r5,-8(fp)
 800519c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 80051a0:	e0bffd17 	ldw	r2,-12(fp)
 80051a4:	10800017 	ldw	r2,0(r2)
 80051a8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 80051ac:	e0bffc17 	ldw	r2,-16(fp)
 80051b0:	10800a04 	addi	r2,r2,40
 80051b4:	e1bfff17 	ldw	r6,-4(fp)
 80051b8:	e17ffe17 	ldw	r5,-8(fp)
 80051bc:	1009883a 	mov	r4,r2
 80051c0:	80055ac0 	call	80055ac <altera_avalon_jtag_uart_ioctl>
}
 80051c4:	e037883a 	mov	sp,fp
 80051c8:	dfc00117 	ldw	ra,4(sp)
 80051cc:	df000017 	ldw	fp,0(sp)
 80051d0:	dec00204 	addi	sp,sp,8
 80051d4:	f800283a 	ret

080051d8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 80051d8:	defffa04 	addi	sp,sp,-24
 80051dc:	dfc00515 	stw	ra,20(sp)
 80051e0:	df000415 	stw	fp,16(sp)
 80051e4:	df000404 	addi	fp,sp,16
 80051e8:	e13ffd15 	stw	r4,-12(fp)
 80051ec:	e17ffe15 	stw	r5,-8(fp)
 80051f0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 80051f4:	e0bffd17 	ldw	r2,-12(fp)
 80051f8:	00c00044 	movi	r3,1
 80051fc:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 8005200:	e0bffd17 	ldw	r2,-12(fp)
 8005204:	10800017 	ldw	r2,0(r2)
 8005208:	10800104 	addi	r2,r2,4
 800520c:	1007883a 	mov	r3,r2
 8005210:	e0bffd17 	ldw	r2,-12(fp)
 8005214:	10800817 	ldw	r2,32(r2)
 8005218:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 800521c:	e0bffe17 	ldw	r2,-8(fp)
 8005220:	e0ffff17 	ldw	r3,-4(fp)
 8005224:	d8000015 	stw	zero,0(sp)
 8005228:	e1fffd17 	ldw	r7,-12(fp)
 800522c:	01820034 	movhi	r6,2048
 8005230:	3194a604 	addi	r6,r6,21144
 8005234:	180b883a 	mov	r5,r3
 8005238:	1009883a 	mov	r4,r2
 800523c:	8006d0c0 	call	8006d0c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 8005240:	e0bffd17 	ldw	r2,-12(fp)
 8005244:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 8005248:	e0bffd17 	ldw	r2,-12(fp)
 800524c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8005250:	d0e01417 	ldw	r3,-32688(gp)
 8005254:	e1fffd17 	ldw	r7,-12(fp)
 8005258:	01820034 	movhi	r6,2048
 800525c:	31952904 	addi	r6,r6,21668
 8005260:	180b883a 	mov	r5,r3
 8005264:	1009883a 	mov	r4,r2
 8005268:	80067fc0 	call	80067fc <alt_alarm_start>
 800526c:	1000040e 	bge	r2,zero,8005280 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 8005270:	e0fffd17 	ldw	r3,-12(fp)
 8005274:	00a00034 	movhi	r2,32768
 8005278:	10bfffc4 	addi	r2,r2,-1
 800527c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 8005280:	0001883a 	nop
 8005284:	e037883a 	mov	sp,fp
 8005288:	dfc00117 	ldw	ra,4(sp)
 800528c:	df000017 	ldw	fp,0(sp)
 8005290:	dec00204 	addi	sp,sp,8
 8005294:	f800283a 	ret

08005298 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 8005298:	defff804 	addi	sp,sp,-32
 800529c:	df000715 	stw	fp,28(sp)
 80052a0:	df000704 	addi	fp,sp,28
 80052a4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 80052a8:	e0bfff17 	ldw	r2,-4(fp)
 80052ac:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 80052b0:	e0bffb17 	ldw	r2,-20(fp)
 80052b4:	10800017 	ldw	r2,0(r2)
 80052b8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 80052bc:	e0bffc17 	ldw	r2,-16(fp)
 80052c0:	10800104 	addi	r2,r2,4
 80052c4:	10800037 	ldwio	r2,0(r2)
 80052c8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 80052cc:	e0bffd17 	ldw	r2,-12(fp)
 80052d0:	1080c00c 	andi	r2,r2,768
 80052d4:	10006d26 	beq	r2,zero,800548c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 80052d8:	e0bffd17 	ldw	r2,-12(fp)
 80052dc:	1080400c 	andi	r2,r2,256
 80052e0:	10003526 	beq	r2,zero,80053b8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 80052e4:	00800074 	movhi	r2,1
 80052e8:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80052ec:	e0bffb17 	ldw	r2,-20(fp)
 80052f0:	10800a17 	ldw	r2,40(r2)
 80052f4:	10800044 	addi	r2,r2,1
 80052f8:	1081ffcc 	andi	r2,r2,2047
 80052fc:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 8005300:	e0bffb17 	ldw	r2,-20(fp)
 8005304:	10c00b17 	ldw	r3,44(r2)
 8005308:	e0bffe17 	ldw	r2,-8(fp)
 800530c:	18801526 	beq	r3,r2,8005364 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 8005310:	e0bffc17 	ldw	r2,-16(fp)
 8005314:	10800037 	ldwio	r2,0(r2)
 8005318:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 800531c:	e0bff917 	ldw	r2,-28(fp)
 8005320:	10a0000c 	andi	r2,r2,32768
 8005324:	10001126 	beq	r2,zero,800536c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 8005328:	e0bffb17 	ldw	r2,-20(fp)
 800532c:	10800a17 	ldw	r2,40(r2)
 8005330:	e0fff917 	ldw	r3,-28(fp)
 8005334:	1809883a 	mov	r4,r3
 8005338:	e0fffb17 	ldw	r3,-20(fp)
 800533c:	1885883a 	add	r2,r3,r2
 8005340:	10800e04 	addi	r2,r2,56
 8005344:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8005348:	e0bffb17 	ldw	r2,-20(fp)
 800534c:	10800a17 	ldw	r2,40(r2)
 8005350:	10800044 	addi	r2,r2,1
 8005354:	10c1ffcc 	andi	r3,r2,2047
 8005358:	e0bffb17 	ldw	r2,-20(fp)
 800535c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 8005360:	003fe206 	br	80052ec <__flash_rwdata_start+0xffffd618>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 8005364:	0001883a 	nop
 8005368:	00000106 	br	8005370 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 800536c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 8005370:	e0bff917 	ldw	r2,-28(fp)
 8005374:	10bfffec 	andhi	r2,r2,65535
 8005378:	10000f26 	beq	r2,zero,80053b8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800537c:	e0bffb17 	ldw	r2,-20(fp)
 8005380:	10c00817 	ldw	r3,32(r2)
 8005384:	00bfff84 	movi	r2,-2
 8005388:	1886703a 	and	r3,r3,r2
 800538c:	e0bffb17 	ldw	r2,-20(fp)
 8005390:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 8005394:	e0bffc17 	ldw	r2,-16(fp)
 8005398:	10800104 	addi	r2,r2,4
 800539c:	1007883a 	mov	r3,r2
 80053a0:	e0bffb17 	ldw	r2,-20(fp)
 80053a4:	10800817 	ldw	r2,32(r2)
 80053a8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 80053ac:	e0bffc17 	ldw	r2,-16(fp)
 80053b0:	10800104 	addi	r2,r2,4
 80053b4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 80053b8:	e0bffd17 	ldw	r2,-12(fp)
 80053bc:	1080800c 	andi	r2,r2,512
 80053c0:	103fbe26 	beq	r2,zero,80052bc <__flash_rwdata_start+0xffffd5e8>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 80053c4:	e0bffd17 	ldw	r2,-12(fp)
 80053c8:	1004d43a 	srli	r2,r2,16
 80053cc:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 80053d0:	00001406 	br	8005424 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 80053d4:	e0bffc17 	ldw	r2,-16(fp)
 80053d8:	e0fffb17 	ldw	r3,-20(fp)
 80053dc:	18c00d17 	ldw	r3,52(r3)
 80053e0:	e13ffb17 	ldw	r4,-20(fp)
 80053e4:	20c7883a 	add	r3,r4,r3
 80053e8:	18c20e04 	addi	r3,r3,2104
 80053ec:	18c00003 	ldbu	r3,0(r3)
 80053f0:	18c03fcc 	andi	r3,r3,255
 80053f4:	18c0201c 	xori	r3,r3,128
 80053f8:	18ffe004 	addi	r3,r3,-128
 80053fc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8005400:	e0bffb17 	ldw	r2,-20(fp)
 8005404:	10800d17 	ldw	r2,52(r2)
 8005408:	10800044 	addi	r2,r2,1
 800540c:	10c1ffcc 	andi	r3,r2,2047
 8005410:	e0bffb17 	ldw	r2,-20(fp)
 8005414:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 8005418:	e0bffa17 	ldw	r2,-24(fp)
 800541c:	10bfffc4 	addi	r2,r2,-1
 8005420:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 8005424:	e0bffa17 	ldw	r2,-24(fp)
 8005428:	10000526 	beq	r2,zero,8005440 <altera_avalon_jtag_uart_irq+0x1a8>
 800542c:	e0bffb17 	ldw	r2,-20(fp)
 8005430:	10c00d17 	ldw	r3,52(r2)
 8005434:	e0bffb17 	ldw	r2,-20(fp)
 8005438:	10800c17 	ldw	r2,48(r2)
 800543c:	18bfe51e 	bne	r3,r2,80053d4 <__flash_rwdata_start+0xffffd700>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 8005440:	e0bffa17 	ldw	r2,-24(fp)
 8005444:	103f9d26 	beq	r2,zero,80052bc <__flash_rwdata_start+0xffffd5e8>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8005448:	e0bffb17 	ldw	r2,-20(fp)
 800544c:	10c00817 	ldw	r3,32(r2)
 8005450:	00bfff44 	movi	r2,-3
 8005454:	1886703a 	and	r3,r3,r2
 8005458:	e0bffb17 	ldw	r2,-20(fp)
 800545c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8005460:	e0bffb17 	ldw	r2,-20(fp)
 8005464:	10800017 	ldw	r2,0(r2)
 8005468:	10800104 	addi	r2,r2,4
 800546c:	1007883a 	mov	r3,r2
 8005470:	e0bffb17 	ldw	r2,-20(fp)
 8005474:	10800817 	ldw	r2,32(r2)
 8005478:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800547c:	e0bffc17 	ldw	r2,-16(fp)
 8005480:	10800104 	addi	r2,r2,4
 8005484:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 8005488:	003f8c06 	br	80052bc <__flash_rwdata_start+0xffffd5e8>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 800548c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 8005490:	0001883a 	nop
 8005494:	e037883a 	mov	sp,fp
 8005498:	df000017 	ldw	fp,0(sp)
 800549c:	dec00104 	addi	sp,sp,4
 80054a0:	f800283a 	ret

080054a4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 80054a4:	defff804 	addi	sp,sp,-32
 80054a8:	df000715 	stw	fp,28(sp)
 80054ac:	df000704 	addi	fp,sp,28
 80054b0:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 80054b4:	e0bffb17 	ldw	r2,-20(fp)
 80054b8:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 80054bc:	e0bff917 	ldw	r2,-28(fp)
 80054c0:	10800017 	ldw	r2,0(r2)
 80054c4:	10800104 	addi	r2,r2,4
 80054c8:	10800037 	ldwio	r2,0(r2)
 80054cc:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 80054d0:	e0bffa17 	ldw	r2,-24(fp)
 80054d4:	1081000c 	andi	r2,r2,1024
 80054d8:	10000b26 	beq	r2,zero,8005508 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 80054dc:	e0bff917 	ldw	r2,-28(fp)
 80054e0:	10800017 	ldw	r2,0(r2)
 80054e4:	10800104 	addi	r2,r2,4
 80054e8:	1007883a 	mov	r3,r2
 80054ec:	e0bff917 	ldw	r2,-28(fp)
 80054f0:	10800817 	ldw	r2,32(r2)
 80054f4:	10810014 	ori	r2,r2,1024
 80054f8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 80054fc:	e0bff917 	ldw	r2,-28(fp)
 8005500:	10000915 	stw	zero,36(r2)
 8005504:	00000a06 	br	8005530 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 8005508:	e0bff917 	ldw	r2,-28(fp)
 800550c:	10c00917 	ldw	r3,36(r2)
 8005510:	00a00034 	movhi	r2,32768
 8005514:	10bfff04 	addi	r2,r2,-4
 8005518:	10c00536 	bltu	r2,r3,8005530 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 800551c:	e0bff917 	ldw	r2,-28(fp)
 8005520:	10800917 	ldw	r2,36(r2)
 8005524:	10c00044 	addi	r3,r2,1
 8005528:	e0bff917 	ldw	r2,-28(fp)
 800552c:	10c00915 	stw	r3,36(r2)
 8005530:	d0a01417 	ldw	r2,-32688(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 8005534:	e037883a 	mov	sp,fp
 8005538:	df000017 	ldw	fp,0(sp)
 800553c:	dec00104 	addi	sp,sp,4
 8005540:	f800283a 	ret

08005544 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 8005544:	defffd04 	addi	sp,sp,-12
 8005548:	df000215 	stw	fp,8(sp)
 800554c:	df000204 	addi	fp,sp,8
 8005550:	e13ffe15 	stw	r4,-8(fp)
 8005554:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8005558:	00000506 	br	8005570 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 800555c:	e0bfff17 	ldw	r2,-4(fp)
 8005560:	1090000c 	andi	r2,r2,16384
 8005564:	10000226 	beq	r2,zero,8005570 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 8005568:	00bffd44 	movi	r2,-11
 800556c:	00000b06 	br	800559c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8005570:	e0bffe17 	ldw	r2,-8(fp)
 8005574:	10c00d17 	ldw	r3,52(r2)
 8005578:	e0bffe17 	ldw	r2,-8(fp)
 800557c:	10800c17 	ldw	r2,48(r2)
 8005580:	18800526 	beq	r3,r2,8005598 <altera_avalon_jtag_uart_close+0x54>
 8005584:	e0bffe17 	ldw	r2,-8(fp)
 8005588:	10c00917 	ldw	r3,36(r2)
 800558c:	e0bffe17 	ldw	r2,-8(fp)
 8005590:	10800117 	ldw	r2,4(r2)
 8005594:	18bff136 	bltu	r3,r2,800555c <__flash_rwdata_start+0xffffd888>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 8005598:	0005883a 	mov	r2,zero
}
 800559c:	e037883a 	mov	sp,fp
 80055a0:	df000017 	ldw	fp,0(sp)
 80055a4:	dec00104 	addi	sp,sp,4
 80055a8:	f800283a 	ret

080055ac <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 80055ac:	defffa04 	addi	sp,sp,-24
 80055b0:	df000515 	stw	fp,20(sp)
 80055b4:	df000504 	addi	fp,sp,20
 80055b8:	e13ffd15 	stw	r4,-12(fp)
 80055bc:	e17ffe15 	stw	r5,-8(fp)
 80055c0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 80055c4:	00bff9c4 	movi	r2,-25
 80055c8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 80055cc:	e0bffe17 	ldw	r2,-8(fp)
 80055d0:	10da8060 	cmpeqi	r3,r2,27137
 80055d4:	1800031e 	bne	r3,zero,80055e4 <altera_avalon_jtag_uart_ioctl+0x38>
 80055d8:	109a80a0 	cmpeqi	r2,r2,27138
 80055dc:	1000181e 	bne	r2,zero,8005640 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 80055e0:	00002906 	br	8005688 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 80055e4:	e0bffd17 	ldw	r2,-12(fp)
 80055e8:	10c00117 	ldw	r3,4(r2)
 80055ec:	00a00034 	movhi	r2,32768
 80055f0:	10bfffc4 	addi	r2,r2,-1
 80055f4:	18802126 	beq	r3,r2,800567c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 80055f8:	e0bfff17 	ldw	r2,-4(fp)
 80055fc:	10800017 	ldw	r2,0(r2)
 8005600:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 8005604:	e0bffc17 	ldw	r2,-16(fp)
 8005608:	10800090 	cmplti	r2,r2,2
 800560c:	1000061e 	bne	r2,zero,8005628 <altera_avalon_jtag_uart_ioctl+0x7c>
 8005610:	e0fffc17 	ldw	r3,-16(fp)
 8005614:	00a00034 	movhi	r2,32768
 8005618:	10bfffc4 	addi	r2,r2,-1
 800561c:	18800226 	beq	r3,r2,8005628 <altera_avalon_jtag_uart_ioctl+0x7c>
 8005620:	e0bffc17 	ldw	r2,-16(fp)
 8005624:	00000206 	br	8005630 <altera_avalon_jtag_uart_ioctl+0x84>
 8005628:	00a00034 	movhi	r2,32768
 800562c:	10bfff84 	addi	r2,r2,-2
 8005630:	e0fffd17 	ldw	r3,-12(fp)
 8005634:	18800115 	stw	r2,4(r3)
      rc = 0;
 8005638:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 800563c:	00000f06 	br	800567c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 8005640:	e0bffd17 	ldw	r2,-12(fp)
 8005644:	10c00117 	ldw	r3,4(r2)
 8005648:	00a00034 	movhi	r2,32768
 800564c:	10bfffc4 	addi	r2,r2,-1
 8005650:	18800c26 	beq	r3,r2,8005684 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 8005654:	e0bffd17 	ldw	r2,-12(fp)
 8005658:	10c00917 	ldw	r3,36(r2)
 800565c:	e0bffd17 	ldw	r2,-12(fp)
 8005660:	10800117 	ldw	r2,4(r2)
 8005664:	1885803a 	cmpltu	r2,r3,r2
 8005668:	10c03fcc 	andi	r3,r2,255
 800566c:	e0bfff17 	ldw	r2,-4(fp)
 8005670:	10c00015 	stw	r3,0(r2)
      rc = 0;
 8005674:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 8005678:	00000206 	br	8005684 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 800567c:	0001883a 	nop
 8005680:	00000106 	br	8005688 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 8005684:	0001883a 	nop

  default:
    break;
  }

  return rc;
 8005688:	e0bffb17 	ldw	r2,-20(fp)
}
 800568c:	e037883a 	mov	sp,fp
 8005690:	df000017 	ldw	fp,0(sp)
 8005694:	dec00104 	addi	sp,sp,4
 8005698:	f800283a 	ret

0800569c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 800569c:	defff304 	addi	sp,sp,-52
 80056a0:	dfc00c15 	stw	ra,48(sp)
 80056a4:	df000b15 	stw	fp,44(sp)
 80056a8:	df000b04 	addi	fp,sp,44
 80056ac:	e13ffc15 	stw	r4,-16(fp)
 80056b0:	e17ffd15 	stw	r5,-12(fp)
 80056b4:	e1bffe15 	stw	r6,-8(fp)
 80056b8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 80056bc:	e0bffd17 	ldw	r2,-12(fp)
 80056c0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 80056c4:	00004706 	br	80057e4 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 80056c8:	e0bffc17 	ldw	r2,-16(fp)
 80056cc:	10800a17 	ldw	r2,40(r2)
 80056d0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 80056d4:	e0bffc17 	ldw	r2,-16(fp)
 80056d8:	10800b17 	ldw	r2,44(r2)
 80056dc:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 80056e0:	e0fff717 	ldw	r3,-36(fp)
 80056e4:	e0bff817 	ldw	r2,-32(fp)
 80056e8:	18800536 	bltu	r3,r2,8005700 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 80056ec:	e0fff717 	ldw	r3,-36(fp)
 80056f0:	e0bff817 	ldw	r2,-32(fp)
 80056f4:	1885c83a 	sub	r2,r3,r2
 80056f8:	e0bff615 	stw	r2,-40(fp)
 80056fc:	00000406 	br	8005710 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 8005700:	00c20004 	movi	r3,2048
 8005704:	e0bff817 	ldw	r2,-32(fp)
 8005708:	1885c83a 	sub	r2,r3,r2
 800570c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8005710:	e0bff617 	ldw	r2,-40(fp)
 8005714:	10001e26 	beq	r2,zero,8005790 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 8005718:	e0fffe17 	ldw	r3,-8(fp)
 800571c:	e0bff617 	ldw	r2,-40(fp)
 8005720:	1880022e 	bgeu	r3,r2,800572c <altera_avalon_jtag_uart_read+0x90>
        n = space;
 8005724:	e0bffe17 	ldw	r2,-8(fp)
 8005728:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 800572c:	e0bffc17 	ldw	r2,-16(fp)
 8005730:	10c00e04 	addi	r3,r2,56
 8005734:	e0bff817 	ldw	r2,-32(fp)
 8005738:	1885883a 	add	r2,r3,r2
 800573c:	e1bff617 	ldw	r6,-40(fp)
 8005740:	100b883a 	mov	r5,r2
 8005744:	e13ff517 	ldw	r4,-44(fp)
 8005748:	80078a80 	call	80078a8 <memcpy>
      ptr   += n;
 800574c:	e0fff517 	ldw	r3,-44(fp)
 8005750:	e0bff617 	ldw	r2,-40(fp)
 8005754:	1885883a 	add	r2,r3,r2
 8005758:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 800575c:	e0fffe17 	ldw	r3,-8(fp)
 8005760:	e0bff617 	ldw	r2,-40(fp)
 8005764:	1885c83a 	sub	r2,r3,r2
 8005768:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800576c:	e0fff817 	ldw	r3,-32(fp)
 8005770:	e0bff617 	ldw	r2,-40(fp)
 8005774:	1885883a 	add	r2,r3,r2
 8005778:	10c1ffcc 	andi	r3,r2,2047
 800577c:	e0bffc17 	ldw	r2,-16(fp)
 8005780:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 8005784:	e0bffe17 	ldw	r2,-8(fp)
 8005788:	00bfcf16 	blt	zero,r2,80056c8 <__flash_rwdata_start+0xffffd9f4>
 800578c:	00000106 	br	8005794 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 8005790:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 8005794:	e0fff517 	ldw	r3,-44(fp)
 8005798:	e0bffd17 	ldw	r2,-12(fp)
 800579c:	1880141e 	bne	r3,r2,80057f0 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 80057a0:	e0bfff17 	ldw	r2,-4(fp)
 80057a4:	1090000c 	andi	r2,r2,16384
 80057a8:	1000131e 	bne	r2,zero,80057f8 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 80057ac:	0001883a 	nop
 80057b0:	e0bffc17 	ldw	r2,-16(fp)
 80057b4:	10c00a17 	ldw	r3,40(r2)
 80057b8:	e0bff717 	ldw	r2,-36(fp)
 80057bc:	1880051e 	bne	r3,r2,80057d4 <altera_avalon_jtag_uart_read+0x138>
 80057c0:	e0bffc17 	ldw	r2,-16(fp)
 80057c4:	10c00917 	ldw	r3,36(r2)
 80057c8:	e0bffc17 	ldw	r2,-16(fp)
 80057cc:	10800117 	ldw	r2,4(r2)
 80057d0:	18bff736 	bltu	r3,r2,80057b0 <__flash_rwdata_start+0xffffdadc>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 80057d4:	e0bffc17 	ldw	r2,-16(fp)
 80057d8:	10c00a17 	ldw	r3,40(r2)
 80057dc:	e0bff717 	ldw	r2,-36(fp)
 80057e0:	18800726 	beq	r3,r2,8005800 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 80057e4:	e0bffe17 	ldw	r2,-8(fp)
 80057e8:	00bfb716 	blt	zero,r2,80056c8 <__flash_rwdata_start+0xffffd9f4>
 80057ec:	00000506 	br	8005804 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 80057f0:	0001883a 	nop
 80057f4:	00000306 	br	8005804 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 80057f8:	0001883a 	nop
 80057fc:	00000106 	br	8005804 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 8005800:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 8005804:	e0fff517 	ldw	r3,-44(fp)
 8005808:	e0bffd17 	ldw	r2,-12(fp)
 800580c:	18801826 	beq	r3,r2,8005870 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8005810:	0005303a 	rdctl	r2,status
 8005814:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8005818:	e0fffb17 	ldw	r3,-20(fp)
 800581c:	00bfff84 	movi	r2,-2
 8005820:	1884703a 	and	r2,r3,r2
 8005824:	1001703a 	wrctl	status,r2
  
  return context;
 8005828:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 800582c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8005830:	e0bffc17 	ldw	r2,-16(fp)
 8005834:	10800817 	ldw	r2,32(r2)
 8005838:	10c00054 	ori	r3,r2,1
 800583c:	e0bffc17 	ldw	r2,-16(fp)
 8005840:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8005844:	e0bffc17 	ldw	r2,-16(fp)
 8005848:	10800017 	ldw	r2,0(r2)
 800584c:	10800104 	addi	r2,r2,4
 8005850:	1007883a 	mov	r3,r2
 8005854:	e0bffc17 	ldw	r2,-16(fp)
 8005858:	10800817 	ldw	r2,32(r2)
 800585c:	18800035 	stwio	r2,0(r3)
 8005860:	e0bffa17 	ldw	r2,-24(fp)
 8005864:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8005868:	e0bff917 	ldw	r2,-28(fp)
 800586c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 8005870:	e0fff517 	ldw	r3,-44(fp)
 8005874:	e0bffd17 	ldw	r2,-12(fp)
 8005878:	18800426 	beq	r3,r2,800588c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 800587c:	e0fff517 	ldw	r3,-44(fp)
 8005880:	e0bffd17 	ldw	r2,-12(fp)
 8005884:	1885c83a 	sub	r2,r3,r2
 8005888:	00000606 	br	80058a4 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 800588c:	e0bfff17 	ldw	r2,-4(fp)
 8005890:	1090000c 	andi	r2,r2,16384
 8005894:	10000226 	beq	r2,zero,80058a0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 8005898:	00bffd44 	movi	r2,-11
 800589c:	00000106 	br	80058a4 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 80058a0:	00bffec4 	movi	r2,-5
}
 80058a4:	e037883a 	mov	sp,fp
 80058a8:	dfc00117 	ldw	ra,4(sp)
 80058ac:	df000017 	ldw	fp,0(sp)
 80058b0:	dec00204 	addi	sp,sp,8
 80058b4:	f800283a 	ret

080058b8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 80058b8:	defff304 	addi	sp,sp,-52
 80058bc:	dfc00c15 	stw	ra,48(sp)
 80058c0:	df000b15 	stw	fp,44(sp)
 80058c4:	df000b04 	addi	fp,sp,44
 80058c8:	e13ffc15 	stw	r4,-16(fp)
 80058cc:	e17ffd15 	stw	r5,-12(fp)
 80058d0:	e1bffe15 	stw	r6,-8(fp)
 80058d4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 80058d8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 80058dc:	e0bffd17 	ldw	r2,-12(fp)
 80058e0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 80058e4:	00003706 	br	80059c4 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 80058e8:	e0bffc17 	ldw	r2,-16(fp)
 80058ec:	10800c17 	ldw	r2,48(r2)
 80058f0:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 80058f4:	e0bffc17 	ldw	r2,-16(fp)
 80058f8:	10800d17 	ldw	r2,52(r2)
 80058fc:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 8005900:	e0fff917 	ldw	r3,-28(fp)
 8005904:	e0bff517 	ldw	r2,-44(fp)
 8005908:	1880062e 	bgeu	r3,r2,8005924 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 800590c:	e0fff517 	ldw	r3,-44(fp)
 8005910:	e0bff917 	ldw	r2,-28(fp)
 8005914:	1885c83a 	sub	r2,r3,r2
 8005918:	10bfffc4 	addi	r2,r2,-1
 800591c:	e0bff615 	stw	r2,-40(fp)
 8005920:	00000b06 	br	8005950 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 8005924:	e0bff517 	ldw	r2,-44(fp)
 8005928:	10000526 	beq	r2,zero,8005940 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 800592c:	00c20004 	movi	r3,2048
 8005930:	e0bff917 	ldw	r2,-28(fp)
 8005934:	1885c83a 	sub	r2,r3,r2
 8005938:	e0bff615 	stw	r2,-40(fp)
 800593c:	00000406 	br	8005950 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 8005940:	00c1ffc4 	movi	r3,2047
 8005944:	e0bff917 	ldw	r2,-28(fp)
 8005948:	1885c83a 	sub	r2,r3,r2
 800594c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 8005950:	e0bff617 	ldw	r2,-40(fp)
 8005954:	10001e26 	beq	r2,zero,80059d0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 8005958:	e0fffe17 	ldw	r3,-8(fp)
 800595c:	e0bff617 	ldw	r2,-40(fp)
 8005960:	1880022e 	bgeu	r3,r2,800596c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 8005964:	e0bffe17 	ldw	r2,-8(fp)
 8005968:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 800596c:	e0bffc17 	ldw	r2,-16(fp)
 8005970:	10c20e04 	addi	r3,r2,2104
 8005974:	e0bff917 	ldw	r2,-28(fp)
 8005978:	1885883a 	add	r2,r3,r2
 800597c:	e1bff617 	ldw	r6,-40(fp)
 8005980:	e17ffd17 	ldw	r5,-12(fp)
 8005984:	1009883a 	mov	r4,r2
 8005988:	80078a80 	call	80078a8 <memcpy>
      ptr   += n;
 800598c:	e0fffd17 	ldw	r3,-12(fp)
 8005990:	e0bff617 	ldw	r2,-40(fp)
 8005994:	1885883a 	add	r2,r3,r2
 8005998:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 800599c:	e0fffe17 	ldw	r3,-8(fp)
 80059a0:	e0bff617 	ldw	r2,-40(fp)
 80059a4:	1885c83a 	sub	r2,r3,r2
 80059a8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80059ac:	e0fff917 	ldw	r3,-28(fp)
 80059b0:	e0bff617 	ldw	r2,-40(fp)
 80059b4:	1885883a 	add	r2,r3,r2
 80059b8:	10c1ffcc 	andi	r3,r2,2047
 80059bc:	e0bffc17 	ldw	r2,-16(fp)
 80059c0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 80059c4:	e0bffe17 	ldw	r2,-8(fp)
 80059c8:	00bfc716 	blt	zero,r2,80058e8 <__flash_rwdata_start+0xffffdc14>
 80059cc:	00000106 	br	80059d4 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 80059d0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80059d4:	0005303a 	rdctl	r2,status
 80059d8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80059dc:	e0fffb17 	ldw	r3,-20(fp)
 80059e0:	00bfff84 	movi	r2,-2
 80059e4:	1884703a 	and	r2,r3,r2
 80059e8:	1001703a 	wrctl	status,r2
  
  return context;
 80059ec:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 80059f0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 80059f4:	e0bffc17 	ldw	r2,-16(fp)
 80059f8:	10800817 	ldw	r2,32(r2)
 80059fc:	10c00094 	ori	r3,r2,2
 8005a00:	e0bffc17 	ldw	r2,-16(fp)
 8005a04:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8005a08:	e0bffc17 	ldw	r2,-16(fp)
 8005a0c:	10800017 	ldw	r2,0(r2)
 8005a10:	10800104 	addi	r2,r2,4
 8005a14:	1007883a 	mov	r3,r2
 8005a18:	e0bffc17 	ldw	r2,-16(fp)
 8005a1c:	10800817 	ldw	r2,32(r2)
 8005a20:	18800035 	stwio	r2,0(r3)
 8005a24:	e0bffa17 	ldw	r2,-24(fp)
 8005a28:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8005a2c:	e0bff817 	ldw	r2,-32(fp)
 8005a30:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 8005a34:	e0bffe17 	ldw	r2,-8(fp)
 8005a38:	0080100e 	bge	zero,r2,8005a7c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 8005a3c:	e0bfff17 	ldw	r2,-4(fp)
 8005a40:	1090000c 	andi	r2,r2,16384
 8005a44:	1000101e 	bne	r2,zero,8005a88 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 8005a48:	0001883a 	nop
 8005a4c:	e0bffc17 	ldw	r2,-16(fp)
 8005a50:	10c00d17 	ldw	r3,52(r2)
 8005a54:	e0bff517 	ldw	r2,-44(fp)
 8005a58:	1880051e 	bne	r3,r2,8005a70 <altera_avalon_jtag_uart_write+0x1b8>
 8005a5c:	e0bffc17 	ldw	r2,-16(fp)
 8005a60:	10c00917 	ldw	r3,36(r2)
 8005a64:	e0bffc17 	ldw	r2,-16(fp)
 8005a68:	10800117 	ldw	r2,4(r2)
 8005a6c:	18bff736 	bltu	r3,r2,8005a4c <__flash_rwdata_start+0xffffdd78>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 8005a70:	e0bffc17 	ldw	r2,-16(fp)
 8005a74:	10800917 	ldw	r2,36(r2)
 8005a78:	1000051e 	bne	r2,zero,8005a90 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 8005a7c:	e0bffe17 	ldw	r2,-8(fp)
 8005a80:	00bfd016 	blt	zero,r2,80059c4 <__flash_rwdata_start+0xffffdcf0>
 8005a84:	00000306 	br	8005a94 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 8005a88:	0001883a 	nop
 8005a8c:	00000106 	br	8005a94 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 8005a90:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 8005a94:	e0fffd17 	ldw	r3,-12(fp)
 8005a98:	e0bff717 	ldw	r2,-36(fp)
 8005a9c:	18800426 	beq	r3,r2,8005ab0 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 8005aa0:	e0fffd17 	ldw	r3,-12(fp)
 8005aa4:	e0bff717 	ldw	r2,-36(fp)
 8005aa8:	1885c83a 	sub	r2,r3,r2
 8005aac:	00000606 	br	8005ac8 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 8005ab0:	e0bfff17 	ldw	r2,-4(fp)
 8005ab4:	1090000c 	andi	r2,r2,16384
 8005ab8:	10000226 	beq	r2,zero,8005ac4 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 8005abc:	00bffd44 	movi	r2,-11
 8005ac0:	00000106 	br	8005ac8 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 8005ac4:	00bffec4 	movi	r2,-5
}
 8005ac8:	e037883a 	mov	sp,fp
 8005acc:	dfc00117 	ldw	ra,4(sp)
 8005ad0:	df000017 	ldw	fp,0(sp)
 8005ad4:	dec00204 	addi	sp,sp,8
 8005ad8:	f800283a 	ret

08005adc <altera_avalon_mailbox_identify>:
 * Check an instance open match
 * with the callback register
 */

static void altera_avalon_mailbox_identify (altera_avalon_mailbox_dev *dev)
{
 8005adc:	defffd04 	addi	sp,sp,-12
 8005ae0:	df000215 	stw	fp,8(sp)
 8005ae4:	df000204 	addi	fp,sp,8
 8005ae8:	e13fff15 	stw	r4,-4(fp)
    /* Random signature to test mailbox ownership */
    alt_u32 magic_num = 0x3A11B045;
 8005aec:	008e84b4 	movhi	r2,14866
 8005af0:	10ac1144 	addi	r2,r2,-20411
 8005af4:	e0bffe15 	stw	r2,-8(fp)

    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, magic_num);
 8005af8:	e0bfff17 	ldw	r2,-4(fp)
 8005afc:	10800a17 	ldw	r2,40(r2)
 8005b00:	10800104 	addi	r2,r2,4
 8005b04:	1007883a 	mov	r3,r2
 8005b08:	e0bffe17 	ldw	r2,-8(fp)
 8005b0c:	18800035 	stwio	r2,0(r3)
    if((IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST)) == magic_num)
 8005b10:	e0bfff17 	ldw	r2,-4(fp)
 8005b14:	10800a17 	ldw	r2,40(r2)
 8005b18:	10800104 	addi	r2,r2,4
 8005b1c:	10800037 	ldwio	r2,0(r2)
 8005b20:	1007883a 	mov	r3,r2
 8005b24:	e0bffe17 	ldw	r2,-8(fp)
 8005b28:	1880081e 	bne	r3,r2,8005b4c <altera_avalon_mailbox_identify+0x70>
    {
        dev-> mbox_type = MBOX_TX;
 8005b2c:	e0bfff17 	ldw	r2,-4(fp)
 8005b30:	10000f15 	stw	zero,60(r2)
        /* Clear message_ptr to default */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, 0x0);
 8005b34:	e0bfff17 	ldw	r2,-4(fp)
 8005b38:	10800a17 	ldw	r2,40(r2)
 8005b3c:	10800104 	addi	r2,r2,4
 8005b40:	0007883a 	mov	r3,zero
 8005b44:	10c00035 	stwio	r3,0(r2)
    } else
    {
	    dev->mbox_type = MBOX_RX;
    }
}
 8005b48:	00000306 	br	8005b58 <altera_avalon_mailbox_identify+0x7c>
        dev-> mbox_type = MBOX_TX;
        /* Clear message_ptr to default */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, 0x0);
    } else
    {
	    dev->mbox_type = MBOX_RX;
 8005b4c:	e0bfff17 	ldw	r2,-4(fp)
 8005b50:	00c00044 	movi	r3,1
 8005b54:	10c00f15 	stw	r3,60(r2)
    }
}
 8005b58:	0001883a 	nop
 8005b5c:	e037883a 	mov	sp,fp
 8005b60:	df000017 	ldw	fp,0(sp)
 8005b64:	dec00104 	addi	sp,sp,4
 8005b68:	f800283a 	ret

08005b6c <altera_avalon_mailbox_post>:
/*
 *   altera_avalon_mailbox_post
 *   This function post message out through sender mailbox
 */
static alt_32 altera_avalon_mailbox_post (altera_avalon_mailbox_dev *dev,  void *message)
{
 8005b6c:	defffc04 	addi	sp,sp,-16
 8005b70:	df000315 	stw	fp,12(sp)
 8005b74:	df000304 	addi	fp,sp,12
 8005b78:	e13ffe15 	stw	r4,-8(fp)
 8005b7c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 *mbox_msg = (alt_u32*) message ;
 8005b80:	e0bfff17 	ldw	r2,-4(fp)
 8005b84:	e0bffd15 	stw	r2,-12(fp)

    if (mbox_msg != NULL) {
 8005b88:	e0bffd17 	ldw	r2,-12(fp)
 8005b8c:	10001026 	beq	r2,zero,8005bd0 <altera_avalon_mailbox_post+0x64>
        /* When message space available, post the message out */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, mbox_msg[1]);
 8005b90:	e0bffe17 	ldw	r2,-8(fp)
 8005b94:	10800a17 	ldw	r2,40(r2)
 8005b98:	10800104 	addi	r2,r2,4
 8005b9c:	1007883a 	mov	r3,r2
 8005ba0:	e0bffd17 	ldw	r2,-12(fp)
 8005ba4:	10800104 	addi	r2,r2,4
 8005ba8:	10800017 	ldw	r2,0(r2)
 8005bac:	18800035 	stwio	r2,0(r3)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, mbox_msg[0]);
 8005bb0:	e0bffe17 	ldw	r2,-8(fp)
 8005bb4:	10800a17 	ldw	r2,40(r2)
 8005bb8:	1007883a 	mov	r3,r2
 8005bbc:	e0bffd17 	ldw	r2,-12(fp)
 8005bc0:	10800017 	ldw	r2,0(r2)
 8005bc4:	18800035 	stwio	r2,0(r3)
        return 0;
 8005bc8:	0005883a 	mov	r2,zero
 8005bcc:	00000106 	br	8005bd4 <altera_avalon_mailbox_post+0x68>
    }
    /* Invalid NULL message received */
    return -EINVAL;
 8005bd0:	00bffa84 	movi	r2,-22
}
 8005bd4:	e037883a 	mov	sp,fp
 8005bd8:	df000017 	ldw	fp,0(sp)
 8005bdc:	dec00104 	addi	sp,sp,4
 8005be0:	f800283a 	ret

08005be4 <altera_avalon_mailbox_simple_tx_isr>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_tx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_tx_isr(void *context, alt_u32 id)
#endif
{
 8005be4:	defff604 	addi	sp,sp,-40
 8005be8:	dfc00915 	stw	ra,36(sp)
 8005bec:	df000815 	stw	fp,32(sp)
 8005bf0:	df000804 	addi	fp,sp,32
 8005bf4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
 8005bf8:	e0bfff17 	ldw	r2,-4(fp)
 8005bfc:	e0bff815 	stw	r2,-32(fp)
    int status = 0;
 8005c00:	e03ff915 	stw	zero,-28(fp)
    alt_u32 data;
    alt_irq_context cpu_sr;
    alt_u32 *message = dev->mbox_msg;
 8005c04:	e0bff817 	ldw	r2,-32(fp)
 8005c08:	10801017 	ldw	r2,64(r2)
 8005c0c:	e0bffa15 	stw	r2,-24(fp)

    /* Mask mailbox interrupt */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 8005c10:	e0bff817 	ldw	r2,-32(fp)
 8005c14:	10800a17 	ldw	r2,40(r2)
 8005c18:	10800304 	addi	r2,r2,12
 8005c1c:	10800037 	ldwio	r2,0(r2)
 8005c20:	1007883a 	mov	r3,r2
 8005c24:	00bfff44 	movi	r2,-3
 8005c28:	1884703a 	and	r2,r3,r2
 8005c2c:	e0bffb15 	stw	r2,-20(fp)
               (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 8005c30:	e0bff817 	ldw	r2,-32(fp)
 8005c34:	10800a17 	ldw	r2,40(r2)
 8005c38:	10800304 	addi	r2,r2,12
 8005c3c:	1007883a 	mov	r3,r2
 8005c40:	e0bffb17 	ldw	r2,-20(fp)
 8005c44:	18800035 	stwio	r2,0(r3)

    if (message != NULL)
 8005c48:	e0bffa17 	ldw	r2,-24(fp)
 8005c4c:	10002d26 	beq	r2,zero,8005d04 <altera_avalon_mailbox_simple_tx_isr+0x120>
    {
        /* Post out message requested */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, message[1]);
 8005c50:	e0bff817 	ldw	r2,-32(fp)
 8005c54:	10800a17 	ldw	r2,40(r2)
 8005c58:	10800104 	addi	r2,r2,4
 8005c5c:	1007883a 	mov	r3,r2
 8005c60:	e0bffa17 	ldw	r2,-24(fp)
 8005c64:	10800104 	addi	r2,r2,4
 8005c68:	10800017 	ldw	r2,0(r2)
 8005c6c:	18800035 	stwio	r2,0(r3)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, message[0]);
 8005c70:	e0bff817 	ldw	r2,-32(fp)
 8005c74:	10800a17 	ldw	r2,40(r2)
 8005c78:	1007883a 	mov	r3,r2
 8005c7c:	e0bffa17 	ldw	r2,-24(fp)
 8005c80:	10800017 	ldw	r2,0(r2)
 8005c84:	18800035 	stwio	r2,0(r3)
    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 8005c88:	e0bff817 	ldw	r2,-32(fp)
 8005c8c:	10800a17 	ldw	r2,40(r2)
 8005c90:	10800204 	addi	r2,r2,8
 8005c94:	10800037 	ldwio	r2,0(r2)
        		  & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
 8005c98:	1080008c 	andi	r2,r2,2
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, message[0]);
    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 8005c9c:	1005d07a 	srai	r2,r2,1
 8005ca0:	e0bff915 	stw	r2,-28(fp)
        		  & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
        if (dev->tx_cb)
 8005ca4:	e0bff817 	ldw	r2,-32(fp)
 8005ca8:	10800d17 	ldw	r2,52(r2)
 8005cac:	10001126 	beq	r2,zero,8005cf4 <altera_avalon_mailbox_simple_tx_isr+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8005cb0:	0005303a 	rdctl	r2,status
 8005cb4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8005cb8:	e0fffd17 	ldw	r3,-12(fp)
 8005cbc:	00bfff84 	movi	r2,-2
 8005cc0:	1884703a 	and	r2,r3,r2
 8005cc4:	1001703a 	wrctl	status,r2
  
  return context;
 8005cc8:	e0bffd17 	ldw	r2,-12(fp)
        {
            cpu_sr = alt_irq_disable_all();
 8005ccc:	e0bffc15 	stw	r2,-16(fp)
  	        (dev->tx_cb)(message, status);
 8005cd0:	e0bff817 	ldw	r2,-32(fp)
 8005cd4:	10800d17 	ldw	r2,52(r2)
 8005cd8:	e17ff917 	ldw	r5,-28(fp)
 8005cdc:	e13ffa17 	ldw	r4,-24(fp)
 8005ce0:	103ee83a 	callr	r2
 8005ce4:	e0bffc17 	ldw	r2,-16(fp)
 8005ce8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8005cec:	e0bffe17 	ldw	r2,-8(fp)
 8005cf0:	1001703a 	wrctl	status,r2
            alt_irq_enable_all(cpu_sr);
        }
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
 8005cf4:	e0bff817 	ldw	r2,-32(fp)
 8005cf8:	10001015 	stw	zero,64(r2)
        dev->lock = 0;
 8005cfc:	e0bff817 	ldw	r2,-32(fp)
 8005d00:	10001105 	stb	zero,68(r2)
    }
}
 8005d04:	0001883a 	nop
 8005d08:	e037883a 	mov	sp,fp
 8005d0c:	dfc00117 	ldw	ra,4(sp)
 8005d10:	df000017 	ldw	fp,0(sp)
 8005d14:	dec00204 	addi	sp,sp,8
 8005d18:	f800283a 	ret

08005d1c <altera_avalon_mailbox_simple_rx_isr>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_rx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_rx_isr(void *context, alt_u32 id)
#endif
{
 8005d1c:	defff704 	addi	sp,sp,-36
 8005d20:	dfc00815 	stw	ra,32(sp)
 8005d24:	df000715 	stw	fp,28(sp)
 8005d28:	df000704 	addi	fp,sp,28
 8005d2c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
 8005d30:	e0bfff17 	ldw	r2,-4(fp)
 8005d34:	e0bff915 	stw	r2,-28(fp)
    alt_irq_context cpu_sr;
    alt_u32 inbox[2];

    inbox[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
 8005d38:	e0bff917 	ldw	r2,-28(fp)
 8005d3c:	10800a17 	ldw	r2,40(r2)
 8005d40:	10800104 	addi	r2,r2,4
 8005d44:	10800037 	ldwio	r2,0(r2)
 8005d48:	e0bffe15 	stw	r2,-8(fp)
    inbox[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
 8005d4c:	e0bff917 	ldw	r2,-28(fp)
 8005d50:	10800a17 	ldw	r2,40(r2)
 8005d54:	10800037 	ldwio	r2,0(r2)
 8005d58:	e0bffd15 	stw	r2,-12(fp)

    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
    if (dev->rx_cb)
 8005d5c:	e0bff917 	ldw	r2,-28(fp)
 8005d60:	10800e17 	ldw	r2,56(r2)
 8005d64:	10001126 	beq	r2,zero,8005dac <altera_avalon_mailbox_simple_rx_isr+0x90>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8005d68:	0005303a 	rdctl	r2,status
 8005d6c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8005d70:	e0fffb17 	ldw	r3,-20(fp)
 8005d74:	00bfff84 	movi	r2,-2
 8005d78:	1884703a 	and	r2,r3,r2
 8005d7c:	1001703a 	wrctl	status,r2
  
  return context;
 8005d80:	e0bffb17 	ldw	r2,-20(fp)
    {
        cpu_sr = alt_irq_disable_all();
 8005d84:	e0bffa15 	stw	r2,-24(fp)
        (dev->rx_cb)(inbox);
 8005d88:	e0bff917 	ldw	r2,-28(fp)
 8005d8c:	10800e17 	ldw	r2,56(r2)
 8005d90:	e0fffd04 	addi	r3,fp,-12
 8005d94:	1809883a 	mov	r4,r3
 8005d98:	103ee83a 	callr	r2
 8005d9c:	e0bffa17 	ldw	r2,-24(fp)
 8005da0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8005da4:	e0bffc17 	ldw	r2,-16(fp)
 8005da8:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }
}
 8005dac:	0001883a 	nop
 8005db0:	e037883a 	mov	sp,fp
 8005db4:	dfc00117 	ldw	ra,4(sp)
 8005db8:	df000017 	ldw	fp,0(sp)
 8005dbc:	dec00204 	addi	sp,sp,8
 8005dc0:	f800283a 	ret

08005dc4 <altera_avalon_mailbox_simple_init>:
 * Altera avalon mailbox init
 * Initialize mailbox device and identify sender/receiver mailbox
 */
void altera_avalon_mailbox_simple_init (altera_avalon_mailbox_dev *dev,
		                               int intr_id, int irq)
{
 8005dc4:	defffb04 	addi	sp,sp,-20
 8005dc8:	dfc00415 	stw	ra,16(sp)
 8005dcc:	df000315 	stw	fp,12(sp)
 8005dd0:	df000304 	addi	fp,sp,12
 8005dd4:	e13ffd15 	stw	r4,-12(fp)
 8005dd8:	e17ffe15 	stw	r5,-8(fp)
 8005ddc:	e1bfff15 	stw	r6,-4(fp)
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mailbox_simple_list);
 8005de0:	d1600204 	addi	r5,gp,-32760
 8005de4:	e13ffd17 	ldw	r4,-12(fp)
 8005de8:	8006ae40 	call	8006ae4 <alt_dev_llist_insert>
    
    dev->mailbox_irq    = irq;
 8005dec:	e0ffff17 	ldw	r3,-4(fp)
 8005df0:	e0bffd17 	ldw	r2,-12(fp)
 8005df4:	10c00b15 	stw	r3,44(r2)
    dev->mailbox_intr_ctrl_id = intr_id;
 8005df8:	e0fffe17 	ldw	r3,-8(fp)
 8005dfc:	e0bffd17 	ldw	r2,-12(fp)
 8005e00:	10c00c15 	stw	r3,48(r2)
    dev->rx_cb = NULL;
 8005e04:	e0bffd17 	ldw	r2,-12(fp)
 8005e08:	10000e15 	stw	zero,56(r2)
    dev->tx_cb = NULL;
 8005e0c:	e0bffd17 	ldw	r2,-12(fp)
 8005e10:	10000d15 	stw	zero,52(r2)
    dev->mbox_msg = NULL;
 8005e14:	e0bffd17 	ldw	r2,-12(fp)
 8005e18:	10001015 	stw	zero,64(r2)
    
    ALT_SEM_CREATE (&dev->write_lock, 1);

    altera_avalon_mailbox_identify(dev);
 8005e1c:	e13ffd17 	ldw	r4,-12(fp)
 8005e20:	8005adc0 	call	8005adc <altera_avalon_mailbox_identify>
}
 8005e24:	0001883a 	nop
 8005e28:	e037883a 	mov	sp,fp
 8005e2c:	dfc00117 	ldw	ra,4(sp)
 8005e30:	df000017 	ldw	fp,0(sp)
 8005e34:	dec00204 	addi	sp,sp,8
 8005e38:	f800283a 	ret

08005e3c <altera_avalon_mailbox_open>:
 * Search the list of registered mailboxes for one with the supplied name.
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
altera_avalon_mailbox_dev* altera_avalon_mailbox_open (const char *name,
		altera_mailbox_tx_cb tx_callback, altera_mailbox_rx_cb rx_callback)
{
 8005e3c:	defff804 	addi	sp,sp,-32
 8005e40:	dfc00715 	stw	ra,28(sp)
 8005e44:	df000615 	stw	fp,24(sp)
 8005e48:	df000604 	addi	fp,sp,24
 8005e4c:	e13ffd15 	stw	r4,-12(fp)
 8005e50:	e17ffe15 	stw	r5,-8(fp)
 8005e54:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_mailbox_dev *dev;
    alt_u32 data;

    /* Find requested device */
    dev = (altera_avalon_mailbox_dev*) alt_find_dev (name, &alt_mailbox_simple_list);
 8005e58:	d1600204 	addi	r5,gp,-32760
 8005e5c:	e13ffd17 	ldw	r4,-12(fp)
 8005e60:	8006c480 	call	8006c48 <alt_find_dev>
 8005e64:	e0bffb15 	stw	r2,-20(fp)
    if (dev == NULL)
 8005e68:	e0bffb17 	ldw	r2,-20(fp)
 8005e6c:	1000021e 	bne	r2,zero,8005e78 <altera_avalon_mailbox_open+0x3c>
    {
        return NULL;
 8005e70:	0005883a 	mov	r2,zero
 8005e74:	00006506 	br	800600c <altera_avalon_mailbox_open+0x1d0>
    }

    /* Mask mailbox interrupt before ISR is being registered. */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
 8005e78:	e0bffb17 	ldw	r2,-20(fp)
 8005e7c:	10800a17 	ldw	r2,40(r2)
 8005e80:	10800304 	addi	r2,r2,12
 8005e84:	10800037 	ldwio	r2,0(r2)
 8005e88:	e0bffc15 	stw	r2,-16(fp)
    if (dev->mbox_type == MBOX_TX) {
 8005e8c:	e0bffb17 	ldw	r2,-20(fp)
 8005e90:	10800f17 	ldw	r2,60(r2)
 8005e94:	1000081e 	bne	r2,zero,8005eb8 <altera_avalon_mailbox_open+0x7c>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
 8005e98:	e0bffb17 	ldw	r2,-20(fp)
 8005e9c:	10800a17 	ldw	r2,40(r2)
 8005ea0:	10800304 	addi	r2,r2,12
 8005ea4:	1009883a 	mov	r4,r2
 8005ea8:	e0fffc17 	ldw	r3,-16(fp)
 8005eac:	00bfff44 	movi	r2,-3
 8005eb0:	1884703a 	and	r2,r3,r2
 8005eb4:	20800035 	stwio	r2,0(r4)
            (data & ~(ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK)));
    }
    if (dev->mbox_type == MBOX_RX) {
 8005eb8:	e0bffb17 	ldw	r2,-20(fp)
 8005ebc:	10800f17 	ldw	r2,60(r2)
 8005ec0:	10800058 	cmpnei	r2,r2,1
 8005ec4:	1000081e 	bne	r2,zero,8005ee8 <altera_avalon_mailbox_open+0xac>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
 8005ec8:	e0bffb17 	ldw	r2,-20(fp)
 8005ecc:	10800a17 	ldw	r2,40(r2)
 8005ed0:	10800304 	addi	r2,r2,12
 8005ed4:	1009883a 	mov	r4,r2
 8005ed8:	e0fffc17 	ldw	r3,-16(fp)
 8005edc:	00bfff84 	movi	r2,-2
 8005ee0:	1884703a 	and	r2,r3,r2
 8005ee4:	20800035 	stwio	r2,0(r4)
    }

    /* If IRQ not connected, return device pointer without ISR register,
     * in polling mode.
     */
    if (dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED)
 8005ee8:	e0bffb17 	ldw	r2,-20(fp)
 8005eec:	10800b17 	ldw	r2,44(r2)
 8005ef0:	10bfffd8 	cmpnei	r2,r2,-1
 8005ef4:	1000021e 	bne	r2,zero,8005f00 <altera_avalon_mailbox_open+0xc4>
        return dev;
 8005ef8:	e0bffb17 	ldw	r2,-20(fp)
 8005efc:	00004306 	br	800600c <altera_avalon_mailbox_open+0x1d0>

    /* For IRQ connected case */

    if ((tx_callback == NULL) && (rx_callback == NULL))
 8005f00:	e0bffe17 	ldw	r2,-8(fp)
 8005f04:	1000041e 	bne	r2,zero,8005f18 <altera_avalon_mailbox_open+0xdc>
 8005f08:	e0bfff17 	ldw	r2,-4(fp)
 8005f0c:	1000021e 	bne	r2,zero,8005f18 <altera_avalon_mailbox_open+0xdc>
    {
    /* No callback, polling mode */
        return dev;
 8005f10:	e0bffb17 	ldw	r2,-20(fp)
 8005f14:	00003d06 	br	800600c <altera_avalon_mailbox_open+0x1d0>
    }

    /* Ensure user correctly use the mailbox
     * Return - Null if wrong direction set
     */
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
 8005f18:	e0bffb17 	ldw	r2,-20(fp)
 8005f1c:	10800f17 	ldw	r2,60(r2)
 8005f20:	1000021e 	bne	r2,zero,8005f2c <altera_avalon_mailbox_open+0xf0>
 8005f24:	e0bfff17 	ldw	r2,-4(fp)
 8005f28:	1000061e 	bne	r2,zero,8005f44 <altera_avalon_mailbox_open+0x108>
	    ((dev->mbox_type == MBOX_RX) && (tx_callback != NULL)))
 8005f2c:	e0bffb17 	ldw	r2,-20(fp)
 8005f30:	10800f17 	ldw	r2,60(r2)
    }

    /* Ensure user correctly use the mailbox
     * Return - Null if wrong direction set
     */
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
 8005f34:	10800058 	cmpnei	r2,r2,1
 8005f38:	1000041e 	bne	r2,zero,8005f4c <altera_avalon_mailbox_open+0x110>
	    ((dev->mbox_type == MBOX_RX) && (tx_callback != NULL)))
 8005f3c:	e0bffe17 	ldw	r2,-8(fp)
 8005f40:	10000226 	beq	r2,zero,8005f4c <altera_avalon_mailbox_open+0x110>
  	  /* Invalid callback  */
        return NULL;
 8005f44:	0005883a 	mov	r2,zero
 8005f48:	00003006 	br	800600c <altera_avalon_mailbox_open+0x1d0>

    /* IRQ is valid register callback
     * to current mailbox device
     */
    dev->tx_cb  = tx_callback;
 8005f4c:	e0bffb17 	ldw	r2,-20(fp)
 8005f50:	e0fffe17 	ldw	r3,-8(fp)
 8005f54:	10c00d15 	stw	r3,52(r2)
    dev->rx_cb  = rx_callback;
 8005f58:	e0bffb17 	ldw	r2,-20(fp)
 8005f5c:	e0ffff17 	ldw	r3,-4(fp)
 8005f60:	10c00e15 	stw	r3,56(r2)

    /* Register Mailbox's ISR */
    if (dev->mbox_type == MBOX_TX)
 8005f64:	e0bffb17 	ldw	r2,-20(fp)
 8005f68:	10800f17 	ldw	r2,60(r2)
 8005f6c:	10000b1e 	bne	r2,zero,8005f9c <altera_avalon_mailbox_open+0x160>
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_tx_isr,
 8005f70:	e0bffb17 	ldw	r2,-20(fp)
 8005f74:	10c00c17 	ldw	r3,48(r2)
 8005f78:	e0bffb17 	ldw	r2,-20(fp)
 8005f7c:	10800b17 	ldw	r2,44(r2)
 8005f80:	d8000015 	stw	zero,0(sp)
 8005f84:	e1fffb17 	ldw	r7,-20(fp)
 8005f88:	01820034 	movhi	r6,2048
 8005f8c:	3196f904 	addi	r6,r6,23524
 8005f90:	100b883a 	mov	r5,r2
 8005f94:	1809883a 	mov	r4,r3
 8005f98:	8006d0c0 	call	8006d0c <alt_ic_isr_register>
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_tx_isr);
    #endif
    }
  
    if (dev->mbox_type == MBOX_RX)
 8005f9c:	e0bffb17 	ldw	r2,-20(fp)
 8005fa0:	10800f17 	ldw	r2,60(r2)
 8005fa4:	10800058 	cmpnei	r2,r2,1
 8005fa8:	1000171e 	bne	r2,zero,8006008 <altera_avalon_mailbox_open+0x1cc>
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_rx_isr,
 8005fac:	e0bffb17 	ldw	r2,-20(fp)
 8005fb0:	10c00c17 	ldw	r3,48(r2)
 8005fb4:	e0bffb17 	ldw	r2,-20(fp)
 8005fb8:	10800b17 	ldw	r2,44(r2)
 8005fbc:	d8000015 	stw	zero,0(sp)
 8005fc0:	e1fffb17 	ldw	r7,-20(fp)
 8005fc4:	01820034 	movhi	r6,2048
 8005fc8:	31974704 	addi	r6,r6,23836
 8005fcc:	100b883a 	mov	r5,r2
 8005fd0:	1809883a 	mov	r4,r3
 8005fd4:	8006d0c0 	call	8006d0c <alt_ic_isr_register>
                            dev, NULL);
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_rx_isr);
    #endif
        /* Enable Receiver interrupt to listen mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
 8005fd8:	e0bffb17 	ldw	r2,-20(fp)
 8005fdc:	10800a17 	ldw	r2,40(r2)
 8005fe0:	10800304 	addi	r2,r2,12
 8005fe4:	10800037 	ldwio	r2,0(r2)
 8005fe8:	10800054 	ori	r2,r2,1
 8005fec:	e0bffc15 	stw	r2,-16(fp)
  	             (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 8005ff0:	e0bffb17 	ldw	r2,-20(fp)
 8005ff4:	10800a17 	ldw	r2,40(r2)
 8005ff8:	10800304 	addi	r2,r2,12
 8005ffc:	1007883a 	mov	r3,r2
 8006000:	e0bffc17 	ldw	r2,-16(fp)
 8006004:	18800035 	stwio	r2,0(r3)
    }
    return dev;
 8006008:	e0bffb17 	ldw	r2,-20(fp)
}
 800600c:	e037883a 	mov	sp,fp
 8006010:	dfc00117 	ldw	ra,4(sp)
 8006014:	df000017 	ldw	fp,0(sp)
 8006018:	dec00204 	addi	sp,sp,8
 800601c:	f800283a 	ret

08006020 <altera_avalon_mailbox_close>:
/*
 * altera_avalon_mailbox_close
 * Disable mailbox interrupt and irq
 */
void altera_avalon_mailbox_close (altera_avalon_mailbox_dev *dev)
{
 8006020:	defffb04 	addi	sp,sp,-20
 8006024:	dfc00415 	stw	ra,16(sp)
 8006028:	df000315 	stw	fp,12(sp)
 800602c:	df000304 	addi	fp,sp,12
 8006030:	e13fff15 	stw	r4,-4(fp)
    alt_u32 data;
    if ((dev != NULL) && (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED))
 8006034:	e0bfff17 	ldw	r2,-4(fp)
 8006038:	10003926 	beq	r2,zero,8006120 <altera_avalon_mailbox_close+0x100>
 800603c:	e0bfff17 	ldw	r2,-4(fp)
 8006040:	10800b17 	ldw	r2,44(r2)
 8006044:	10bfffe0 	cmpeqi	r2,r2,-1
 8006048:	1000351e 	bne	r2,zero,8006120 <altera_avalon_mailbox_close+0x100>
    {
        /* Mask interrupt */
        if (dev->mbox_type == MBOX_TX)
 800604c:	e0bfff17 	ldw	r2,-4(fp)
 8006050:	10800f17 	ldw	r2,60(r2)
 8006054:	10000e1e 	bne	r2,zero,8006090 <altera_avalon_mailbox_close+0x70>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 8006058:	e0bfff17 	ldw	r2,-4(fp)
 800605c:	10800a17 	ldw	r2,40(r2)
 8006060:	10800304 	addi	r2,r2,12
 8006064:	10800037 	ldwio	r2,0(r2)
 8006068:	1007883a 	mov	r3,r2
 800606c:	00bfff44 	movi	r2,-3
 8006070:	1884703a 	and	r2,r3,r2
 8006074:	e0bffe15 	stw	r2,-8(fp)
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 8006078:	e0bfff17 	ldw	r2,-4(fp)
 800607c:	10800a17 	ldw	r2,40(r2)
 8006080:	10800304 	addi	r2,r2,12
 8006084:	1007883a 	mov	r3,r2
 8006088:	e0bffe17 	ldw	r2,-8(fp)
 800608c:	18800035 	stwio	r2,0(r3)
        }
        if (dev->mbox_type == MBOX_RX)
 8006090:	e0bfff17 	ldw	r2,-4(fp)
 8006094:	10800f17 	ldw	r2,60(r2)
 8006098:	10800058 	cmpnei	r2,r2,1
 800609c:	10000e1e 	bne	r2,zero,80060d8 <altera_avalon_mailbox_close+0xb8>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 80060a0:	e0bfff17 	ldw	r2,-4(fp)
 80060a4:	10800a17 	ldw	r2,40(r2)
 80060a8:	10800304 	addi	r2,r2,12
 80060ac:	10800037 	ldwio	r2,0(r2)
 80060b0:	1007883a 	mov	r3,r2
 80060b4:	00bfff84 	movi	r2,-2
 80060b8:	1884703a 	and	r2,r3,r2
 80060bc:	e0bffe15 	stw	r2,-8(fp)
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 80060c0:	e0bfff17 	ldw	r2,-4(fp)
 80060c4:	10800a17 	ldw	r2,40(r2)
 80060c8:	10800304 	addi	r2,r2,12
 80060cc:	1007883a 	mov	r3,r2
 80060d0:	e0bffe17 	ldw	r2,-8(fp)
 80060d4:	18800035 	stwio	r2,0(r3)
        }
  
        /* De-register mailbox irq) */
        if (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED)
 80060d8:	e0bfff17 	ldw	r2,-4(fp)
 80060dc:	10800b17 	ldw	r2,44(r2)
 80060e0:	10bfffe0 	cmpeqi	r2,r2,-1
 80060e4:	10000a1e 	bne	r2,zero,8006110 <altera_avalon_mailbox_close+0xf0>
        {
        #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
            alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, NULL,
 80060e8:	e0bfff17 	ldw	r2,-4(fp)
 80060ec:	10c00c17 	ldw	r3,48(r2)
 80060f0:	e0bfff17 	ldw	r2,-4(fp)
 80060f4:	10800b17 	ldw	r2,44(r2)
 80060f8:	d8000015 	stw	zero,0(sp)
 80060fc:	e1ffff17 	ldw	r7,-4(fp)
 8006100:	000d883a 	mov	r6,zero
 8006104:	100b883a 	mov	r5,r2
 8006108:	1809883a 	mov	r4,r3
 800610c:	8006d0c0 	call	8006d0c <alt_ic_isr_register>
        #else
            alt_irq_register(dev->mailbox_irq, dev, NULL);
        #endif
        }
        /* De-registering callback to mailbox */
        dev->tx_cb  = NULL;
 8006110:	e0bfff17 	ldw	r2,-4(fp)
 8006114:	10000d15 	stw	zero,52(r2)
        dev->rx_cb  = NULL;
 8006118:	e0bfff17 	ldw	r2,-4(fp)
 800611c:	10000e15 	stw	zero,56(r2)
    }
}
 8006120:	0001883a 	nop
 8006124:	e037883a 	mov	sp,fp
 8006128:	dfc00117 	ldw	ra,4(sp)
 800612c:	df000017 	ldw	fp,0(sp)
 8006130:	dec00204 	addi	sp,sp,8
 8006134:	f800283a 	ret

08006138 <altera_avalon_mailbox_status>:
 *   Return 0 when mailbox is empty or no pending message
 *   Return 1 when mailbox space is full or there is a message pending
 */

alt_u32 altera_avalon_mailbox_status (altera_avalon_mailbox_dev *dev)
{
 8006138:	defffd04 	addi	sp,sp,-12
 800613c:	df000215 	stw	fp,8(sp)
 8006140:	df000204 	addi	fp,sp,8
 8006144:	e13fff15 	stw	r4,-4(fp)
    alt_u32 mailbox_sts = 0;
 8006148:	e03ffe15 	stw	zero,-8(fp)

    mailbox_sts = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_STS_OFST) & ALTERA_AVALON_MAILBOX_SIMPLE_STS_MSK);
 800614c:	e0bfff17 	ldw	r2,-4(fp)
 8006150:	10800a17 	ldw	r2,40(r2)
 8006154:	10800204 	addi	r2,r2,8
 8006158:	10800037 	ldwio	r2,0(r2)
 800615c:	108000cc 	andi	r2,r2,3
 8006160:	e0bffe15 	stw	r2,-8(fp)

    if (dev->mbox_type == MBOX_TX)
 8006164:	e0bfff17 	ldw	r2,-4(fp)
 8006168:	10800f17 	ldw	r2,60(r2)
 800616c:	1000041e 	bne	r2,zero,8006180 <altera_avalon_mailbox_status+0x48>
        mailbox_sts = (mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
 8006170:	e0bffe17 	ldw	r2,-8(fp)
 8006174:	1080008c 	andi	r2,r2,2
 8006178:	1004d07a 	srli	r2,r2,1
 800617c:	e0bffe15 	stw	r2,-8(fp)

    if (dev->mbox_type == MBOX_RX)
 8006180:	e0bfff17 	ldw	r2,-4(fp)
 8006184:	10800f17 	ldw	r2,60(r2)
 8006188:	10800058 	cmpnei	r2,r2,1
 800618c:	1000031e 	bne	r2,zero,800619c <altera_avalon_mailbox_status+0x64>
        mailbox_sts = mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_PENDING_MSK;
 8006190:	e0bffe17 	ldw	r2,-8(fp)
 8006194:	1080004c 	andi	r2,r2,1
 8006198:	e0bffe15 	stw	r2,-8(fp)

    return mailbox_sts;
 800619c:	e0bffe17 	ldw	r2,-8(fp)
}
 80061a0:	e037883a 	mov	sp,fp
 80061a4:	df000017 	ldw	fp,0(sp)
 80061a8:	dec00104 	addi	sp,sp,4
 80061ac:	f800283a 	ret

080061b0 <altera_avalon_mailbox_send>:
 * For polling mode, '0' timeout value for infinite polling
 * otherwise timeout when expired
 */
int altera_avalon_mailbox_send
(altera_avalon_mailbox_dev *dev, void *message, int timeout, EventType event)
{
 80061b0:	defff704 	addi	sp,sp,-36
 80061b4:	dfc00815 	stw	ra,32(sp)
 80061b8:	df000715 	stw	fp,28(sp)
 80061bc:	df000704 	addi	fp,sp,28
 80061c0:	e13ffc15 	stw	r4,-16(fp)
 80061c4:	e17ffd15 	stw	r5,-12(fp)
 80061c8:	e1bffe15 	stw	r6,-8(fp)
 80061cc:	e1ffff15 	stw	r7,-4(fp)
    int status = 0;
 80061d0:	e03ff915 	stw	zero,-28(fp)
     * Obtain the "write_lock"semaphore to ensures 
     * that writing to the device is thread-safe in multi-thread enviroment
     */
    ALT_SEM_PEND (dev->write_lock, 0);

    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 80061d4:	e0bffc17 	ldw	r2,-16(fp)
 80061d8:	10801103 	ldbu	r2,68(r2)
 80061dc:	10803fcc 	andi	r2,r2,255
 80061e0:	1000061e 	bne	r2,zero,80061fc <altera_avalon_mailbox_send+0x4c>
 80061e4:	e0bffc17 	ldw	r2,-16(fp)
 80061e8:	10800a17 	ldw	r2,40(r2)
 80061ec:	10800204 	addi	r2,r2,8
 80061f0:	10800037 	ldwio	r2,0(r2)
    		          & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK))
 80061f4:	1080008c 	andi	r2,r2,2
     * Obtain the "write_lock"semaphore to ensures 
     * that writing to the device is thread-safe in multi-thread enviroment
     */
    ALT_SEM_PEND (dev->write_lock, 0);

    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 80061f8:	10000226 	beq	r2,zero,8006204 <altera_avalon_mailbox_send+0x54>
    		          & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK))
    {
    	/* dev is lock or no free space to send */
    	return -1;
 80061fc:	00bfffc4 	movi	r2,-1
 8006200:	00003a06 	br	80062ec <altera_avalon_mailbox_send+0x13c>
    }
    else
    {
        dev->mbox_msg = message;
 8006204:	e0bffc17 	ldw	r2,-16(fp)
 8006208:	e0fffd17 	ldw	r3,-12(fp)
 800620c:	10c01015 	stw	r3,64(r2)
        dev->lock = 1;
 8006210:	e0bffc17 	ldw	r2,-16(fp)
 8006214:	00c00044 	movi	r3,1
 8006218:	10c01105 	stb	r3,68(r2)
     */
    ALT_SEM_POST (dev->write_lock);



    if ((dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED) || (event==POLL))
 800621c:	e0bffc17 	ldw	r2,-16(fp)
 8006220:	10800b17 	ldw	r2,44(r2)
 8006224:	10bfffe0 	cmpeqi	r2,r2,-1
 8006228:	1000031e 	bne	r2,zero,8006238 <altera_avalon_mailbox_send+0x88>
 800622c:	e0bfff17 	ldw	r2,-4(fp)
 8006230:	10800058 	cmpnei	r2,r2,1
 8006234:	1000201e 	bne	r2,zero,80062b8 <altera_avalon_mailbox_send+0x108>
    {
        /* Polling mode */
        if (timeout ==0)
 8006238:	e0bffe17 	ldw	r2,-8(fp)
 800623c:	1000061e 	bne	r2,zero,8006258 <altera_avalon_mailbox_send+0xa8>
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
 8006240:	e13ffc17 	ldw	r4,-16(fp)
 8006244:	80061380 	call	8006138 <altera_avalon_mailbox_status>
 8006248:	e0bffb15 	stw	r2,-20(fp)
            } while (mbox_status);
 800624c:	e0bffb17 	ldw	r2,-20(fp)
 8006250:	103ffb1e 	bne	r2,zero,8006240 <__flash_rwdata_start+0xffffe56c>
 8006254:	00000e06 	br	8006290 <altera_avalon_mailbox_send+0xe0>
        } else
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
 8006258:	e13ffc17 	ldw	r4,-16(fp)
 800625c:	80061380 	call	8006138 <altera_avalon_mailbox_status>
 8006260:	e0bffb15 	stw	r2,-20(fp)
                timeout--;
 8006264:	e0bffe17 	ldw	r2,-8(fp)
 8006268:	10bfffc4 	addi	r2,r2,-1
 800626c:	e0bffe15 	stw	r2,-8(fp)
            } while (mbox_status && (timeout != 0));
 8006270:	e0bffb17 	ldw	r2,-20(fp)
 8006274:	10000226 	beq	r2,zero,8006280 <altera_avalon_mailbox_send+0xd0>
 8006278:	e0bffe17 	ldw	r2,-8(fp)
 800627c:	103ff61e 	bne	r2,zero,8006258 <__flash_rwdata_start+0xffffe584>
            if (timeout == 0)
 8006280:	e0bffe17 	ldw	r2,-8(fp)
 8006284:	1000021e 	bne	r2,zero,8006290 <altera_avalon_mailbox_send+0xe0>
            {    /* Timeout occur or fail sending */
                return -ETIME;
 8006288:	00bff084 	movi	r2,-62
 800628c:	00001706 	br	80062ec <altera_avalon_mailbox_send+0x13c>
            }
        }
        status = altera_avalon_mailbox_post (dev, message);
 8006290:	e17ffd17 	ldw	r5,-12(fp)
 8006294:	e13ffc17 	ldw	r4,-16(fp)
 8006298:	8005b6c0 	call	8005b6c <altera_avalon_mailbox_post>
 800629c:	e0bff915 	stw	r2,-28(fp)
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
 80062a0:	e0bffc17 	ldw	r2,-16(fp)
 80062a4:	10001015 	stw	zero,64(r2)
        /* Release lock when message posted */
        dev->lock =0;
 80062a8:	e0bffc17 	ldw	r2,-16(fp)
 80062ac:	10001105 	stb	zero,68(r2)
        return status;
 80062b0:	e0bff917 	ldw	r2,-28(fp)
 80062b4:	00000d06 	br	80062ec <altera_avalon_mailbox_send+0x13c>
    } else
    {
        /* Enable Sender interrupt */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
 80062b8:	e0bffc17 	ldw	r2,-16(fp)
 80062bc:	10800a17 	ldw	r2,40(r2)
 80062c0:	10800304 	addi	r2,r2,12
 80062c4:	10800037 	ldwio	r2,0(r2)
 80062c8:	10800094 	ori	r2,r2,2
 80062cc:	e0bffa15 	stw	r2,-24(fp)
                   (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 80062d0:	e0bffc17 	ldw	r2,-16(fp)
 80062d4:	10800a17 	ldw	r2,40(r2)
 80062d8:	10800304 	addi	r2,r2,12
 80062dc:	1007883a 	mov	r3,r2
 80062e0:	e0bffa17 	ldw	r2,-24(fp)
 80062e4:	18800035 	stwio	r2,0(r3)
    }
  return 0;
 80062e8:	0005883a 	mov	r2,zero
}
 80062ec:	e037883a 	mov	sp,fp
 80062f0:	dfc00117 	ldw	ra,4(sp)
 80062f4:	df000017 	ldw	fp,0(sp)
 80062f8:	dec00204 	addi	sp,sp,8
 80062fc:	f800283a 	ret

08006300 <altera_avalon_mailbox_retrieve_poll>:
 * If a message is available in the mailbox return it otherwise return NULL
 * This function is blocking
 *
 */
int altera_avalon_mailbox_retrieve_poll (altera_avalon_mailbox_dev *dev, alt_u32 *message, alt_u32 timeout)
{
 8006300:	defff904 	addi	sp,sp,-28
 8006304:	dfc00615 	stw	ra,24(sp)
 8006308:	df000515 	stw	fp,20(sp)
 800630c:	df000504 	addi	fp,sp,20
 8006310:	e13ffd15 	stw	r4,-12(fp)
 8006314:	e17ffe15 	stw	r5,-8(fp)
 8006318:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 status = 0;
 800631c:	e03ffb15 	stw	zero,-20(fp)
    alt_u32 data;

    if (dev != NULL && message != NULL)
 8006320:	e0bffd17 	ldw	r2,-12(fp)
 8006324:	10003a26 	beq	r2,zero,8006410 <altera_avalon_mailbox_retrieve_poll+0x110>
 8006328:	e0bffe17 	ldw	r2,-8(fp)
 800632c:	10003826 	beq	r2,zero,8006410 <altera_avalon_mailbox_retrieve_poll+0x110>
    {
        /* Mask receiver mailbox interrupt when in polling mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
 8006330:	e0bffd17 	ldw	r2,-12(fp)
 8006334:	10800a17 	ldw	r2,40(r2)
 8006338:	10800304 	addi	r2,r2,12
 800633c:	10800037 	ldwio	r2,0(r2)
 8006340:	e0bffc15 	stw	r2,-16(fp)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST,
 8006344:	e0bffd17 	ldw	r2,-12(fp)
 8006348:	10800a17 	ldw	r2,40(r2)
 800634c:	10800304 	addi	r2,r2,12
 8006350:	1009883a 	mov	r4,r2
 8006354:	e0fffc17 	ldw	r3,-16(fp)
 8006358:	00bfff84 	movi	r2,-2
 800635c:	1884703a 	and	r2,r3,r2
 8006360:	20800035 	stwio	r2,0(r4)
            (data & (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK)));


        /* If timeout is '0', poll till message availabe in mailbox */
        if (timeout == 0)
 8006364:	e0bfff17 	ldw	r2,-4(fp)
 8006368:	1000061e 	bne	r2,zero,8006384 <altera_avalon_mailbox_retrieve_poll+0x84>
        {
            do
            {
                status = altera_avalon_mailbox_status (dev);
 800636c:	e13ffd17 	ldw	r4,-12(fp)
 8006370:	80061380 	call	8006138 <altera_avalon_mailbox_status>
 8006374:	e0bffb15 	stw	r2,-20(fp)
            } while (status == 0);
 8006378:	e0bffb17 	ldw	r2,-20(fp)
 800637c:	103ffb26 	beq	r2,zero,800636c <__flash_rwdata_start+0xffffe698>
 8006380:	00000a06 	br	80063ac <altera_avalon_mailbox_retrieve_poll+0xac>
        } else
        {
            do
            {
                 status = altera_avalon_mailbox_status (dev);
 8006384:	e13ffd17 	ldw	r4,-12(fp)
 8006388:	80061380 	call	8006138 <altera_avalon_mailbox_status>
 800638c:	e0bffb15 	stw	r2,-20(fp)
                 timeout-- ;
 8006390:	e0bfff17 	ldw	r2,-4(fp)
 8006394:	10bfffc4 	addi	r2,r2,-1
 8006398:	e0bfff15 	stw	r2,-4(fp)
            } while ((status == 0) && timeout);
 800639c:	e0bffb17 	ldw	r2,-20(fp)
 80063a0:	1000021e 	bne	r2,zero,80063ac <altera_avalon_mailbox_retrieve_poll+0xac>
 80063a4:	e0bfff17 	ldw	r2,-4(fp)
 80063a8:	103ff61e 	bne	r2,zero,8006384 <__flash_rwdata_start+0xffffe6b0>
        }

        /* if timeout, status remain 0 */
        if (status)
 80063ac:	e0bffb17 	ldw	r2,-20(fp)
 80063b0:	10000d26 	beq	r2,zero,80063e8 <altera_avalon_mailbox_retrieve_poll+0xe8>
        {
            message[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
 80063b4:	e0bffe17 	ldw	r2,-8(fp)
 80063b8:	10800104 	addi	r2,r2,4
 80063bc:	e0fffd17 	ldw	r3,-12(fp)
 80063c0:	18c00a17 	ldw	r3,40(r3)
 80063c4:	18c00104 	addi	r3,r3,4
 80063c8:	18c00037 	ldwio	r3,0(r3)
 80063cc:	10c00015 	stw	r3,0(r2)
            message[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
 80063d0:	e0bffd17 	ldw	r2,-12(fp)
 80063d4:	10800a17 	ldw	r2,40(r2)
 80063d8:	10800037 	ldwio	r2,0(r2)
 80063dc:	1007883a 	mov	r3,r2
 80063e0:	e0bffe17 	ldw	r2,-8(fp)
 80063e4:	10c00015 	stw	r3,0(r2)
        }
        /* Restore original state of interrupt mask */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 80063e8:	e0bffd17 	ldw	r2,-12(fp)
 80063ec:	10800a17 	ldw	r2,40(r2)
 80063f0:	10800304 	addi	r2,r2,12
 80063f4:	1007883a 	mov	r3,r2
 80063f8:	e0bffc17 	ldw	r2,-16(fp)
 80063fc:	18800035 	stwio	r2,0(r3)

        /* Return success on complete retrieve message
         * otherwise timeout and exit with error
         */
        if (status)
 8006400:	e0bffb17 	ldw	r2,-20(fp)
 8006404:	10000226 	beq	r2,zero,8006410 <altera_avalon_mailbox_retrieve_poll+0x110>
          return 0;
 8006408:	0005883a 	mov	r2,zero
 800640c:	00000606 	br	8006428 <altera_avalon_mailbox_retrieve_poll+0x128>
      }
      /* Invalid Null dev and message */
      message[1] = 0;
 8006410:	e0bffe17 	ldw	r2,-8(fp)
 8006414:	10800104 	addi	r2,r2,4
 8006418:	10000015 	stw	zero,0(r2)
      message[0] = 0;
 800641c:	e0bffe17 	ldw	r2,-8(fp)
 8006420:	10000015 	stw	zero,0(r2)
      return -EINVAL;
 8006424:	00bffa84 	movi	r2,-22
}
 8006428:	e037883a 	mov	sp,fp
 800642c:	dfc00117 	ldw	ra,4(sp)
 8006430:	df000017 	ldw	fp,0(sp)
 8006434:	dec00204 	addi	sp,sp,8
 8006438:	f800283a 	ret

0800643c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800643c:	defffe04 	addi	sp,sp,-8
 8006440:	dfc00115 	stw	ra,4(sp)
 8006444:	df000015 	stw	fp,0(sp)
 8006448:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800644c:	d0a00b17 	ldw	r2,-32724(gp)
 8006450:	10000326 	beq	r2,zero,8006460 <alt_get_errno+0x24>
 8006454:	d0a00b17 	ldw	r2,-32724(gp)
 8006458:	103ee83a 	callr	r2
 800645c:	00000106 	br	8006464 <alt_get_errno+0x28>
 8006460:	d0a00f04 	addi	r2,gp,-32708
}
 8006464:	e037883a 	mov	sp,fp
 8006468:	dfc00117 	ldw	ra,4(sp)
 800646c:	df000017 	ldw	fp,0(sp)
 8006470:	dec00204 	addi	sp,sp,8
 8006474:	f800283a 	ret

08006478 <alt_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
static int alt_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 8006478:	defff904 	addi	sp,sp,-28
 800647c:	df000615 	stw	fp,24(sp)
 8006480:	df000604 	addi	fp,sp,24
 8006484:	e13ffe15 	stw	r4,-8(fp)
 8006488:	e17fff15 	stw	r5,-4(fp)
  alt_u32 id, data, check;
  int ret_code = -1;
 800648c:	00bfffc4 	movi	r2,-1
 8006490:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_READ_CPUID(id);
 8006494:	0005317a 	rdctl	r2,cpuid
 8006498:	e0bffb15 	stw	r2,-20(fp)

  /* the data we want the mutex to hold */
  data = (id << ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST) | value;
 800649c:	e0bffb17 	ldw	r2,-20(fp)
 80064a0:	1006943a 	slli	r3,r2,16
 80064a4:	e0bfff17 	ldw	r2,-4(fp)
 80064a8:	1884b03a 	or	r2,r3,r2
 80064ac:	e0bffc15 	stw	r2,-16(fp)

  /* attempt to write to the mutex */
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, data);
 80064b0:	e0bffe17 	ldw	r2,-8(fp)
 80064b4:	10800317 	ldw	r2,12(r2)
 80064b8:	e0fffc17 	ldw	r3,-16(fp)
 80064bc:	10c00035 	stwio	r3,0(r2)
  
  check = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 80064c0:	e0bffe17 	ldw	r2,-8(fp)
 80064c4:	10800317 	ldw	r2,12(r2)
 80064c8:	10800037 	ldwio	r2,0(r2)
 80064cc:	e0bffd15 	stw	r2,-12(fp)

  if ( check == data)
 80064d0:	e0fffd17 	ldw	r3,-12(fp)
 80064d4:	e0bffc17 	ldw	r2,-16(fp)
 80064d8:	1880011e 	bne	r3,r2,80064e0 <alt_mutex_trylock+0x68>
  {
    ret_code = 0;
 80064dc:	e03ffa15 	stw	zero,-24(fp)
  }

  return ret_code;
 80064e0:	e0bffa17 	ldw	r2,-24(fp)
}
 80064e4:	e037883a 	mov	sp,fp
 80064e8:	df000017 	ldw	fp,0(sp)
 80064ec:	dec00104 	addi	sp,sp,4
 80064f0:	f800283a 	ret

080064f4 <altera_avalon_mutex_open>:
 * Search the list of registered mutexes for one with the supplied name.
 *
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
alt_mutex_dev* altera_avalon_mutex_open (const char* name)
{
 80064f4:	defffc04 	addi	sp,sp,-16
 80064f8:	dfc00315 	stw	ra,12(sp)
 80064fc:	df000215 	stw	fp,8(sp)
 8006500:	df000204 	addi	fp,sp,8
 8006504:	e13fff15 	stw	r4,-4(fp)
  alt_mutex_dev* dev;

  dev = (alt_mutex_dev*) alt_find_dev (name, &alt_mutex_list);
 8006508:	d1600404 	addi	r5,gp,-32752
 800650c:	e13fff17 	ldw	r4,-4(fp)
 8006510:	8006c480 	call	8006c48 <alt_find_dev>
 8006514:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev)
 8006518:	e0bffe17 	ldw	r2,-8(fp)
 800651c:	1000041e 	bne	r2,zero,8006530 <altera_avalon_mutex_open+0x3c>
  {
    ALT_ERRNO = ENODEV;
 8006520:	800643c0 	call	800643c <alt_get_errno>
 8006524:	1007883a 	mov	r3,r2
 8006528:	008004c4 	movi	r2,19
 800652c:	18800015 	stw	r2,0(r3)
  }

  return dev;
 8006530:	e0bffe17 	ldw	r2,-8(fp)
}
 8006534:	e037883a 	mov	sp,fp
 8006538:	dfc00117 	ldw	ra,4(sp)
 800653c:	df000017 	ldw	fp,0(sp)
 8006540:	dec00204 	addi	sp,sp,8
 8006544:	f800283a 	ret

08006548 <altera_avalon_mutex_close>:
 * altera_avalon_mutex_close - Does nothing at the moment, but included for 
 * completeness
 *
 */
void altera_avalon_mutex_close (alt_mutex_dev* dev)
{
 8006548:	defffe04 	addi	sp,sp,-8
 800654c:	df000115 	stw	fp,4(sp)
 8006550:	df000104 	addi	fp,sp,4
 8006554:	e13fff15 	stw	r4,-4(fp)
  return;
 8006558:	0001883a 	nop
}
 800655c:	e037883a 	mov	sp,fp
 8006560:	df000017 	ldw	fp,0(sp)
 8006564:	dec00104 	addi	sp,sp,4
 8006568:	f800283a 	ret

0800656c <altera_avalon_mutex_lock>:
/*
 * altera_avalon_mutex_lock - Lock the hardware mutex
 *
 */
void altera_avalon_mutex_lock( alt_mutex_dev* dev, alt_u32 value )
{
 800656c:	defffc04 	addi	sp,sp,-16
 8006570:	dfc00315 	stw	ra,12(sp)
 8006574:	df000215 	stw	fp,8(sp)
 8006578:	df000204 	addi	fp,sp,8
 800657c:	e13ffe15 	stw	r4,-8(fp)
 8006580:	e17fff15 	stw	r5,-4(fp)
   * semaphore. This ensures that reading from the device is thread-safe.
   */

  ALT_SEM_PEND (dev->lock, 0);

  while ( alt_mutex_trylock( dev, value ) != 0);
 8006584:	0001883a 	nop
 8006588:	e17fff17 	ldw	r5,-4(fp)
 800658c:	e13ffe17 	ldw	r4,-8(fp)
 8006590:	80064780 	call	8006478 <alt_mutex_trylock>
 8006594:	103ffc1e 	bne	r2,zero,8006588 <__flash_rwdata_start+0xffffe8b4>
}
 8006598:	0001883a 	nop
 800659c:	e037883a 	mov	sp,fp
 80065a0:	dfc00117 	ldw	ra,4(sp)
 80065a4:	df000017 	ldw	fp,0(sp)
 80065a8:	dec00204 	addi	sp,sp,8
 80065ac:	f800283a 	ret

080065b0 <altera_avalon_mutex_trylock>:
 *
 * returns 0 on success -1 otherwise
 *
 */
int altera_avalon_mutex_trylock( alt_mutex_dev* dev, alt_u32 value )
{
 80065b0:	defffa04 	addi	sp,sp,-24
 80065b4:	dfc00515 	stw	ra,20(sp)
 80065b8:	df000415 	stw	fp,16(sp)
 80065bc:	df000404 	addi	fp,sp,16
 80065c0:	e13ffd15 	stw	r4,-12(fp)
 80065c4:	e17ffe15 	stw	r5,-8(fp)
  int ret_code;

  ALT_SEM_PEND (dev->lock, 0);

  ret_code = alt_mutex_trylock( dev, value);
 80065c8:	e17ffe17 	ldw	r5,-8(fp)
 80065cc:	e13ffd17 	ldw	r4,-12(fp)
 80065d0:	80064780 	call	8006478 <alt_mutex_trylock>
 80065d4:	e0bffc15 	stw	r2,-16(fp)
  if (ret_code)
  {
    ALT_SEM_POST (dev->lock);
  }

  return ret_code;
 80065d8:	e0bffc17 	ldw	r2,-16(fp)
}
 80065dc:	e037883a 	mov	sp,fp
 80065e0:	dfc00117 	ldw	ra,4(sp)
 80065e4:	df000017 	ldw	fp,0(sp)
 80065e8:	dec00204 	addi	sp,sp,8
 80065ec:	f800283a 	ret

080065f0 <altera_avalon_mutex_unlock>:
 * This function does not check that you own the Mutex if you try to release
 * a Mutex you do not own the behaviour is undefined
 *
 */
void altera_avalon_mutex_unlock( alt_mutex_dev* dev )
{
 80065f0:	defffd04 	addi	sp,sp,-12
 80065f4:	df000215 	stw	fp,8(sp)
 80065f8:	df000204 	addi	fp,sp,8
 80065fc:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id;
  NIOS2_READ_CPUID(id);
 8006600:	0005317a 	rdctl	r2,cpuid
 8006604:	e0bffe15 	stw	r2,-8(fp)

  /*
  * This Mutex has been claimed and released since Reset so clear the Reset bit
  * This MUST happen before we release the MUTEX
  */
  IOWR_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base, 
 8006608:	e0bfff17 	ldw	r2,-4(fp)
 800660c:	10800317 	ldw	r2,12(r2)
 8006610:	10800104 	addi	r2,r2,4
 8006614:	00c00044 	movi	r3,1
 8006618:	10c00035 	stwio	r3,0(r2)
                                  ALTERA_AVALON_MUTEX_RESET_RESET_MSK);
  IOWR_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base, 
 800661c:	e0bfff17 	ldw	r2,-4(fp)
 8006620:	10800317 	ldw	r2,12(r2)
 8006624:	e0fffe17 	ldw	r3,-8(fp)
 8006628:	1806943a 	slli	r3,r3,16
 800662c:	10c00035 	stwio	r3,0(r2)

  /*
  * Now that access to the hardware Mutex is complete, release the thread lock
  */
  ALT_SEM_POST (dev->lock);
}
 8006630:	0001883a 	nop
 8006634:	e037883a 	mov	sp,fp
 8006638:	df000017 	ldw	fp,0(sp)
 800663c:	dec00104 	addi	sp,sp,4
 8006640:	f800283a 	ret

08006644 <altera_avalon_mutex_is_mine>:
 * altera_avalon_mutex_is_mine - Do I own the Mutex?
 *
 *  returns non zero if the mutex is owned by this CPU
 */
int altera_avalon_mutex_is_mine( alt_mutex_dev* dev )
{
 8006644:	defff904 	addi	sp,sp,-28
 8006648:	df000615 	stw	fp,24(sp)
 800664c:	df000604 	addi	fp,sp,24
 8006650:	e13fff15 	stw	r4,-4(fp)
  alt_u32 id, data, owner, value;
  int ret_code = 0;
 8006654:	e03ffa15 	stw	zero,-24(fp)

  NIOS2_READ_CPUID(id);
 8006658:	0005317a 	rdctl	r2,cpuid
 800665c:	e0bffb15 	stw	r2,-20(fp)

  /* retrieve the contents of the mutex */
  data = IORD_ALTERA_AVALON_MUTEX_MUTEX(dev->mutex_base);
 8006660:	e0bfff17 	ldw	r2,-4(fp)
 8006664:	10800317 	ldw	r2,12(r2)
 8006668:	10800037 	ldwio	r2,0(r2)
 800666c:	e0bffc15 	stw	r2,-16(fp)
  owner = (data & ALTERA_AVALON_MUTEX_MUTEX_OWNER_MSK) >> 
 8006670:	e0bffc17 	ldw	r2,-16(fp)
 8006674:	1004d43a 	srli	r2,r2,16
 8006678:	e0bffd15 	stw	r2,-12(fp)
              ALTERA_AVALON_MUTEX_MUTEX_OWNER_OFST;

  if (owner == id) 
 800667c:	e0fffd17 	ldw	r3,-12(fp)
 8006680:	e0bffb17 	ldw	r2,-20(fp)
 8006684:	1880071e 	bne	r3,r2,80066a4 <altera_avalon_mutex_is_mine+0x60>
  {
    value = (data & ALTERA_AVALON_MUTEX_MUTEX_VALUE_MSK) >> 
 8006688:	e0bffc17 	ldw	r2,-16(fp)
 800668c:	10bfffcc 	andi	r2,r2,65535
 8006690:	e0bffe15 	stw	r2,-8(fp)
                  ALTERA_AVALON_MUTEX_MUTEX_VALUE_OFST;
    if (value != 0)
 8006694:	e0bffe17 	ldw	r2,-8(fp)
 8006698:	10000226 	beq	r2,zero,80066a4 <altera_avalon_mutex_is_mine+0x60>
    {
      ret_code = 1;
 800669c:	00800044 	movi	r2,1
 80066a0:	e0bffa15 	stw	r2,-24(fp)
    }
  }

  return ret_code;
 80066a4:	e0bffa17 	ldw	r2,-24(fp)
}
 80066a8:	e037883a 	mov	sp,fp
 80066ac:	df000017 	ldw	fp,0(sp)
 80066b0:	dec00104 	addi	sp,sp,4
 80066b4:	f800283a 	ret

080066b8 <altera_avalon_mutex_first_lock>:
 *
 * Has this Mutex been released since reset if not return 1
 * otherwise return 0
 */
int altera_avalon_mutex_first_lock( alt_mutex_dev* dev )
{
 80066b8:	defffc04 	addi	sp,sp,-16
 80066bc:	df000315 	stw	fp,12(sp)
 80066c0:	df000304 	addi	fp,sp,12
 80066c4:	e13fff15 	stw	r4,-4(fp)
  alt_u32 data;
  int ret_code = 0;
 80066c8:	e03ffd15 	stw	zero,-12(fp)

  data = IORD_ALTERA_AVALON_MUTEX_RESET(dev->mutex_base);
 80066cc:	e0bfff17 	ldw	r2,-4(fp)
 80066d0:	10800317 	ldw	r2,12(r2)
 80066d4:	10800104 	addi	r2,r2,4
 80066d8:	10800037 	ldwio	r2,0(r2)
 80066dc:	e0bffe15 	stw	r2,-8(fp)

  if (data & ALTERA_AVALON_MUTEX_RESET_RESET_MSK) 
 80066e0:	e0bffe17 	ldw	r2,-8(fp)
 80066e4:	1080004c 	andi	r2,r2,1
 80066e8:	10000226 	beq	r2,zero,80066f4 <altera_avalon_mutex_first_lock+0x3c>
  {
    ret_code = 1;
 80066ec:	00800044 	movi	r2,1
 80066f0:	e0bffd15 	stw	r2,-12(fp)
  }

  return ret_code;
 80066f4:	e0bffd17 	ldw	r2,-12(fp)
}
 80066f8:	e037883a 	mov	sp,fp
 80066fc:	df000017 	ldw	fp,0(sp)
 8006700:	dec00104 	addi	sp,sp,4
 8006704:	f800283a 	ret

08006708 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 8006708:	defffa04 	addi	sp,sp,-24
 800670c:	dfc00515 	stw	ra,20(sp)
 8006710:	df000415 	stw	fp,16(sp)
 8006714:	df000404 	addi	fp,sp,16
 8006718:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 800671c:	0007883a 	mov	r3,zero
 8006720:	e0bfff17 	ldw	r2,-4(fp)
 8006724:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 8006728:	e0bfff17 	ldw	r2,-4(fp)
 800672c:	10800104 	addi	r2,r2,4
 8006730:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8006734:	0005303a 	rdctl	r2,status
 8006738:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800673c:	e0fffd17 	ldw	r3,-12(fp)
 8006740:	00bfff84 	movi	r2,-2
 8006744:	1884703a 	and	r2,r3,r2
 8006748:	1001703a 	wrctl	status,r2
  
  return context;
 800674c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 8006750:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 8006754:	80074400 	call	8007440 <alt_tick>
 8006758:	e0bffc17 	ldw	r2,-16(fp)
 800675c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8006760:	e0bffe17 	ldw	r2,-8(fp)
 8006764:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 8006768:	0001883a 	nop
 800676c:	e037883a 	mov	sp,fp
 8006770:	dfc00117 	ldw	ra,4(sp)
 8006774:	df000017 	ldw	fp,0(sp)
 8006778:	dec00204 	addi	sp,sp,8
 800677c:	f800283a 	ret

08006780 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 8006780:	defff804 	addi	sp,sp,-32
 8006784:	dfc00715 	stw	ra,28(sp)
 8006788:	df000615 	stw	fp,24(sp)
 800678c:	df000604 	addi	fp,sp,24
 8006790:	e13ffc15 	stw	r4,-16(fp)
 8006794:	e17ffd15 	stw	r5,-12(fp)
 8006798:	e1bffe15 	stw	r6,-8(fp)
 800679c:	e1ffff15 	stw	r7,-4(fp)
 80067a0:	e0bfff17 	ldw	r2,-4(fp)
 80067a4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 80067a8:	d0a01417 	ldw	r2,-32688(gp)
 80067ac:	1000021e 	bne	r2,zero,80067b8 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 80067b0:	e0bffb17 	ldw	r2,-20(fp)
 80067b4:	d0a01415 	stw	r2,-32688(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 80067b8:	e0bffc17 	ldw	r2,-16(fp)
 80067bc:	10800104 	addi	r2,r2,4
 80067c0:	00c001c4 	movi	r3,7
 80067c4:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 80067c8:	d8000015 	stw	zero,0(sp)
 80067cc:	e1fffc17 	ldw	r7,-16(fp)
 80067d0:	01820034 	movhi	r6,2048
 80067d4:	3199c204 	addi	r6,r6,26376
 80067d8:	e17ffe17 	ldw	r5,-8(fp)
 80067dc:	e13ffd17 	ldw	r4,-12(fp)
 80067e0:	8006d0c0 	call	8006d0c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 80067e4:	0001883a 	nop
 80067e8:	e037883a 	mov	sp,fp
 80067ec:	dfc00117 	ldw	ra,4(sp)
 80067f0:	df000017 	ldw	fp,0(sp)
 80067f4:	dec00204 	addi	sp,sp,8
 80067f8:	f800283a 	ret

080067fc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 80067fc:	defff504 	addi	sp,sp,-44
 8006800:	df000a15 	stw	fp,40(sp)
 8006804:	df000a04 	addi	fp,sp,40
 8006808:	e13ffc15 	stw	r4,-16(fp)
 800680c:	e17ffd15 	stw	r5,-12(fp)
 8006810:	e1bffe15 	stw	r6,-8(fp)
 8006814:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 8006818:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 800681c:	d0a01417 	ldw	r2,-32688(gp)
  
  if (alt_ticks_per_second ())
 8006820:	10003c26 	beq	r2,zero,8006914 <alt_alarm_start+0x118>
  {
    if (alarm)
 8006824:	e0bffc17 	ldw	r2,-16(fp)
 8006828:	10003826 	beq	r2,zero,800690c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 800682c:	e0bffc17 	ldw	r2,-16(fp)
 8006830:	e0fffe17 	ldw	r3,-8(fp)
 8006834:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 8006838:	e0bffc17 	ldw	r2,-16(fp)
 800683c:	e0ffff17 	ldw	r3,-4(fp)
 8006840:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8006844:	0005303a 	rdctl	r2,status
 8006848:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800684c:	e0fff917 	ldw	r3,-28(fp)
 8006850:	00bfff84 	movi	r2,-2
 8006854:	1884703a 	and	r2,r3,r2
 8006858:	1001703a 	wrctl	status,r2
  
  return context;
 800685c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 8006860:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8006864:	d0a01517 	ldw	r2,-32684(gp)
      
      current_nticks = alt_nticks();
 8006868:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 800686c:	e0fffd17 	ldw	r3,-12(fp)
 8006870:	e0bff617 	ldw	r2,-40(fp)
 8006874:	1885883a 	add	r2,r3,r2
 8006878:	10c00044 	addi	r3,r2,1
 800687c:	e0bffc17 	ldw	r2,-16(fp)
 8006880:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 8006884:	e0bffc17 	ldw	r2,-16(fp)
 8006888:	10c00217 	ldw	r3,8(r2)
 800688c:	e0bff617 	ldw	r2,-40(fp)
 8006890:	1880042e 	bgeu	r3,r2,80068a4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 8006894:	e0bffc17 	ldw	r2,-16(fp)
 8006898:	00c00044 	movi	r3,1
 800689c:	10c00405 	stb	r3,16(r2)
 80068a0:	00000206 	br	80068ac <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 80068a4:	e0bffc17 	ldw	r2,-16(fp)
 80068a8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 80068ac:	e0bffc17 	ldw	r2,-16(fp)
 80068b0:	d0e00d04 	addi	r3,gp,-32716
 80068b4:	e0fffa15 	stw	r3,-24(fp)
 80068b8:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 80068bc:	e0bffb17 	ldw	r2,-20(fp)
 80068c0:	e0fffa17 	ldw	r3,-24(fp)
 80068c4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 80068c8:	e0bffa17 	ldw	r2,-24(fp)
 80068cc:	10c00017 	ldw	r3,0(r2)
 80068d0:	e0bffb17 	ldw	r2,-20(fp)
 80068d4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 80068d8:	e0bffa17 	ldw	r2,-24(fp)
 80068dc:	10800017 	ldw	r2,0(r2)
 80068e0:	e0fffb17 	ldw	r3,-20(fp)
 80068e4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 80068e8:	e0bffa17 	ldw	r2,-24(fp)
 80068ec:	e0fffb17 	ldw	r3,-20(fp)
 80068f0:	10c00015 	stw	r3,0(r2)
 80068f4:	e0bff817 	ldw	r2,-32(fp)
 80068f8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80068fc:	e0bff717 	ldw	r2,-36(fp)
 8006900:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 8006904:	0005883a 	mov	r2,zero
 8006908:	00000306 	br	8006918 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 800690c:	00bffa84 	movi	r2,-22
 8006910:	00000106 	br	8006918 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 8006914:	00bfde84 	movi	r2,-134
  }
}
 8006918:	e037883a 	mov	sp,fp
 800691c:	df000017 	ldw	fp,0(sp)
 8006920:	dec00104 	addi	sp,sp,4
 8006924:	f800283a 	ret

08006928 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8006928:	defffe04 	addi	sp,sp,-8
 800692c:	dfc00115 	stw	ra,4(sp)
 8006930:	df000015 	stw	fp,0(sp)
 8006934:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8006938:	d0a00b17 	ldw	r2,-32724(gp)
 800693c:	10000326 	beq	r2,zero,800694c <alt_get_errno+0x24>
 8006940:	d0a00b17 	ldw	r2,-32724(gp)
 8006944:	103ee83a 	callr	r2
 8006948:	00000106 	br	8006950 <alt_get_errno+0x28>
 800694c:	d0a00f04 	addi	r2,gp,-32708
}
 8006950:	e037883a 	mov	sp,fp
 8006954:	dfc00117 	ldw	ra,4(sp)
 8006958:	df000017 	ldw	fp,0(sp)
 800695c:	dec00204 	addi	sp,sp,8
 8006960:	f800283a 	ret

08006964 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 8006964:	defffb04 	addi	sp,sp,-20
 8006968:	dfc00415 	stw	ra,16(sp)
 800696c:	df000315 	stw	fp,12(sp)
 8006970:	df000304 	addi	fp,sp,12
 8006974:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 8006978:	e0bfff17 	ldw	r2,-4(fp)
 800697c:	10000616 	blt	r2,zero,8006998 <close+0x34>
 8006980:	e0bfff17 	ldw	r2,-4(fp)
 8006984:	10c00324 	muli	r3,r2,12
 8006988:	00800034 	movhi	r2,0
 800698c:	1084cf04 	addi	r2,r2,4924
 8006990:	1885883a 	add	r2,r3,r2
 8006994:	00000106 	br	800699c <close+0x38>
 8006998:	0005883a 	mov	r2,zero
 800699c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 80069a0:	e0bffd17 	ldw	r2,-12(fp)
 80069a4:	10001926 	beq	r2,zero,8006a0c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 80069a8:	e0bffd17 	ldw	r2,-12(fp)
 80069ac:	10800017 	ldw	r2,0(r2)
 80069b0:	10800417 	ldw	r2,16(r2)
 80069b4:	10000626 	beq	r2,zero,80069d0 <close+0x6c>
 80069b8:	e0bffd17 	ldw	r2,-12(fp)
 80069bc:	10800017 	ldw	r2,0(r2)
 80069c0:	10800417 	ldw	r2,16(r2)
 80069c4:	e13ffd17 	ldw	r4,-12(fp)
 80069c8:	103ee83a 	callr	r2
 80069cc:	00000106 	br	80069d4 <close+0x70>
 80069d0:	0005883a 	mov	r2,zero
 80069d4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 80069d8:	e13fff17 	ldw	r4,-4(fp)
 80069dc:	80073400 	call	8007340 <alt_release_fd>
    if (rval < 0)
 80069e0:	e0bffe17 	ldw	r2,-8(fp)
 80069e4:	1000070e 	bge	r2,zero,8006a04 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 80069e8:	80069280 	call	8006928 <alt_get_errno>
 80069ec:	1007883a 	mov	r3,r2
 80069f0:	e0bffe17 	ldw	r2,-8(fp)
 80069f4:	0085c83a 	sub	r2,zero,r2
 80069f8:	18800015 	stw	r2,0(r3)
      return -1;
 80069fc:	00bfffc4 	movi	r2,-1
 8006a00:	00000706 	br	8006a20 <close+0xbc>
    }
    return 0;
 8006a04:	0005883a 	mov	r2,zero
 8006a08:	00000506 	br	8006a20 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8006a0c:	80069280 	call	8006928 <alt_get_errno>
 8006a10:	1007883a 	mov	r3,r2
 8006a14:	00801444 	movi	r2,81
 8006a18:	18800015 	stw	r2,0(r3)
    return -1;
 8006a1c:	00bfffc4 	movi	r2,-1
  }
}
 8006a20:	e037883a 	mov	sp,fp
 8006a24:	dfc00117 	ldw	ra,4(sp)
 8006a28:	df000017 	ldw	fp,0(sp)
 8006a2c:	dec00204 	addi	sp,sp,8
 8006a30:	f800283a 	ret

08006a34 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 8006a34:	defffe04 	addi	sp,sp,-8
 8006a38:	df000115 	stw	fp,4(sp)
 8006a3c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 8006a40:	e03fff15 	stw	zero,-4(fp)
 8006a44:	00000506 	br	8006a5c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 8006a48:	e0bfff17 	ldw	r2,-4(fp)
 8006a4c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 8006a50:	e0bfff17 	ldw	r2,-4(fp)
 8006a54:	10800804 	addi	r2,r2,32
 8006a58:	e0bfff15 	stw	r2,-4(fp)
 8006a5c:	e0bfff17 	ldw	r2,-4(fp)
 8006a60:	10820030 	cmpltui	r2,r2,2048
 8006a64:	103ff81e 	bne	r2,zero,8006a48 <__flash_rwdata_start+0xffffed74>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8006a68:	0001883a 	nop
 8006a6c:	e037883a 	mov	sp,fp
 8006a70:	df000017 	ldw	fp,0(sp)
 8006a74:	dec00104 	addi	sp,sp,4
 8006a78:	f800283a 	ret

08006a7c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 8006a7c:	defffc04 	addi	sp,sp,-16
 8006a80:	df000315 	stw	fp,12(sp)
 8006a84:	df000304 	addi	fp,sp,12
 8006a88:	e13ffd15 	stw	r4,-12(fp)
 8006a8c:	e17ffe15 	stw	r5,-8(fp)
 8006a90:	e1bfff15 	stw	r6,-4(fp)
  return len;
 8006a94:	e0bfff17 	ldw	r2,-4(fp)
}
 8006a98:	e037883a 	mov	sp,fp
 8006a9c:	df000017 	ldw	fp,0(sp)
 8006aa0:	dec00104 	addi	sp,sp,4
 8006aa4:	f800283a 	ret

08006aa8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8006aa8:	defffe04 	addi	sp,sp,-8
 8006aac:	dfc00115 	stw	ra,4(sp)
 8006ab0:	df000015 	stw	fp,0(sp)
 8006ab4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8006ab8:	d0a00b17 	ldw	r2,-32724(gp)
 8006abc:	10000326 	beq	r2,zero,8006acc <alt_get_errno+0x24>
 8006ac0:	d0a00b17 	ldw	r2,-32724(gp)
 8006ac4:	103ee83a 	callr	r2
 8006ac8:	00000106 	br	8006ad0 <alt_get_errno+0x28>
 8006acc:	d0a00f04 	addi	r2,gp,-32708
}
 8006ad0:	e037883a 	mov	sp,fp
 8006ad4:	dfc00117 	ldw	ra,4(sp)
 8006ad8:	df000017 	ldw	fp,0(sp)
 8006adc:	dec00204 	addi	sp,sp,8
 8006ae0:	f800283a 	ret

08006ae4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 8006ae4:	defffa04 	addi	sp,sp,-24
 8006ae8:	dfc00515 	stw	ra,20(sp)
 8006aec:	df000415 	stw	fp,16(sp)
 8006af0:	df000404 	addi	fp,sp,16
 8006af4:	e13ffe15 	stw	r4,-8(fp)
 8006af8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 8006afc:	e0bffe17 	ldw	r2,-8(fp)
 8006b00:	10000326 	beq	r2,zero,8006b10 <alt_dev_llist_insert+0x2c>
 8006b04:	e0bffe17 	ldw	r2,-8(fp)
 8006b08:	10800217 	ldw	r2,8(r2)
 8006b0c:	1000061e 	bne	r2,zero,8006b28 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 8006b10:	8006aa80 	call	8006aa8 <alt_get_errno>
 8006b14:	1007883a 	mov	r3,r2
 8006b18:	00800584 	movi	r2,22
 8006b1c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 8006b20:	00bffa84 	movi	r2,-22
 8006b24:	00001306 	br	8006b74 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 8006b28:	e0bffe17 	ldw	r2,-8(fp)
 8006b2c:	e0ffff17 	ldw	r3,-4(fp)
 8006b30:	e0fffc15 	stw	r3,-16(fp)
 8006b34:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8006b38:	e0bffd17 	ldw	r2,-12(fp)
 8006b3c:	e0fffc17 	ldw	r3,-16(fp)
 8006b40:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8006b44:	e0bffc17 	ldw	r2,-16(fp)
 8006b48:	10c00017 	ldw	r3,0(r2)
 8006b4c:	e0bffd17 	ldw	r2,-12(fp)
 8006b50:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8006b54:	e0bffc17 	ldw	r2,-16(fp)
 8006b58:	10800017 	ldw	r2,0(r2)
 8006b5c:	e0fffd17 	ldw	r3,-12(fp)
 8006b60:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8006b64:	e0bffc17 	ldw	r2,-16(fp)
 8006b68:	e0fffd17 	ldw	r3,-12(fp)
 8006b6c:	10c00015 	stw	r3,0(r2)

  return 0;  
 8006b70:	0005883a 	mov	r2,zero
}
 8006b74:	e037883a 	mov	sp,fp
 8006b78:	dfc00117 	ldw	ra,4(sp)
 8006b7c:	df000017 	ldw	fp,0(sp)
 8006b80:	dec00204 	addi	sp,sp,8
 8006b84:	f800283a 	ret

08006b88 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 8006b88:	defffd04 	addi	sp,sp,-12
 8006b8c:	dfc00215 	stw	ra,8(sp)
 8006b90:	df000115 	stw	fp,4(sp)
 8006b94:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8006b98:	00820034 	movhi	r2,2048
 8006b9c:	109efa04 	addi	r2,r2,31720
 8006ba0:	e0bfff15 	stw	r2,-4(fp)
 8006ba4:	00000606 	br	8006bc0 <_do_ctors+0x38>
        (*ctor) (); 
 8006ba8:	e0bfff17 	ldw	r2,-4(fp)
 8006bac:	10800017 	ldw	r2,0(r2)
 8006bb0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8006bb4:	e0bfff17 	ldw	r2,-4(fp)
 8006bb8:	10bfff04 	addi	r2,r2,-4
 8006bbc:	e0bfff15 	stw	r2,-4(fp)
 8006bc0:	e0ffff17 	ldw	r3,-4(fp)
 8006bc4:	00820034 	movhi	r2,2048
 8006bc8:	109efb04 	addi	r2,r2,31724
 8006bcc:	18bff62e 	bgeu	r3,r2,8006ba8 <__flash_rwdata_start+0xffffeed4>
        (*ctor) (); 
}
 8006bd0:	0001883a 	nop
 8006bd4:	e037883a 	mov	sp,fp
 8006bd8:	dfc00117 	ldw	ra,4(sp)
 8006bdc:	df000017 	ldw	fp,0(sp)
 8006be0:	dec00204 	addi	sp,sp,8
 8006be4:	f800283a 	ret

08006be8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 8006be8:	defffd04 	addi	sp,sp,-12
 8006bec:	dfc00215 	stw	ra,8(sp)
 8006bf0:	df000115 	stw	fp,4(sp)
 8006bf4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8006bf8:	00820034 	movhi	r2,2048
 8006bfc:	109efa04 	addi	r2,r2,31720
 8006c00:	e0bfff15 	stw	r2,-4(fp)
 8006c04:	00000606 	br	8006c20 <_do_dtors+0x38>
        (*dtor) (); 
 8006c08:	e0bfff17 	ldw	r2,-4(fp)
 8006c0c:	10800017 	ldw	r2,0(r2)
 8006c10:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8006c14:	e0bfff17 	ldw	r2,-4(fp)
 8006c18:	10bfff04 	addi	r2,r2,-4
 8006c1c:	e0bfff15 	stw	r2,-4(fp)
 8006c20:	e0ffff17 	ldw	r3,-4(fp)
 8006c24:	00820034 	movhi	r2,2048
 8006c28:	109efb04 	addi	r2,r2,31724
 8006c2c:	18bff62e 	bgeu	r3,r2,8006c08 <__flash_rwdata_start+0xffffef34>
        (*dtor) (); 
}
 8006c30:	0001883a 	nop
 8006c34:	e037883a 	mov	sp,fp
 8006c38:	dfc00117 	ldw	ra,4(sp)
 8006c3c:	df000017 	ldw	fp,0(sp)
 8006c40:	dec00204 	addi	sp,sp,8
 8006c44:	f800283a 	ret

08006c48 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 8006c48:	defffa04 	addi	sp,sp,-24
 8006c4c:	dfc00515 	stw	ra,20(sp)
 8006c50:	df000415 	stw	fp,16(sp)
 8006c54:	df000404 	addi	fp,sp,16
 8006c58:	e13ffe15 	stw	r4,-8(fp)
 8006c5c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8006c60:	e0bfff17 	ldw	r2,-4(fp)
 8006c64:	10800017 	ldw	r2,0(r2)
 8006c68:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8006c6c:	e13ffe17 	ldw	r4,-8(fp)
 8006c70:	80049e00 	call	80049e0 <strlen>
 8006c74:	10800044 	addi	r2,r2,1
 8006c78:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8006c7c:	00000d06 	br	8006cb4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8006c80:	e0bffc17 	ldw	r2,-16(fp)
 8006c84:	10800217 	ldw	r2,8(r2)
 8006c88:	e0fffd17 	ldw	r3,-12(fp)
 8006c8c:	180d883a 	mov	r6,r3
 8006c90:	e17ffe17 	ldw	r5,-8(fp)
 8006c94:	1009883a 	mov	r4,r2
 8006c98:	80078780 	call	8007878 <memcmp>
 8006c9c:	1000021e 	bne	r2,zero,8006ca8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 8006ca0:	e0bffc17 	ldw	r2,-16(fp)
 8006ca4:	00000706 	br	8006cc4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8006ca8:	e0bffc17 	ldw	r2,-16(fp)
 8006cac:	10800017 	ldw	r2,0(r2)
 8006cb0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8006cb4:	e0fffc17 	ldw	r3,-16(fp)
 8006cb8:	e0bfff17 	ldw	r2,-4(fp)
 8006cbc:	18bff01e 	bne	r3,r2,8006c80 <__flash_rwdata_start+0xffffefac>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 8006cc0:	0005883a 	mov	r2,zero
}
 8006cc4:	e037883a 	mov	sp,fp
 8006cc8:	dfc00117 	ldw	ra,4(sp)
 8006ccc:	df000017 	ldw	fp,0(sp)
 8006cd0:	dec00204 	addi	sp,sp,8
 8006cd4:	f800283a 	ret

08006cd8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 8006cd8:	defffe04 	addi	sp,sp,-8
 8006cdc:	dfc00115 	stw	ra,4(sp)
 8006ce0:	df000015 	stw	fp,0(sp)
 8006ce4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 8006ce8:	01440004 	movi	r5,4096
 8006cec:	0009883a 	mov	r4,zero
 8006cf0:	80077180 	call	8007718 <alt_icache_flush>
#endif
}
 8006cf4:	0001883a 	nop
 8006cf8:	e037883a 	mov	sp,fp
 8006cfc:	dfc00117 	ldw	ra,4(sp)
 8006d00:	df000017 	ldw	fp,0(sp)
 8006d04:	dec00204 	addi	sp,sp,8
 8006d08:	f800283a 	ret

08006d0c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8006d0c:	defff904 	addi	sp,sp,-28
 8006d10:	dfc00615 	stw	ra,24(sp)
 8006d14:	df000515 	stw	fp,20(sp)
 8006d18:	df000504 	addi	fp,sp,20
 8006d1c:	e13ffc15 	stw	r4,-16(fp)
 8006d20:	e17ffd15 	stw	r5,-12(fp)
 8006d24:	e1bffe15 	stw	r6,-8(fp)
 8006d28:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 8006d2c:	e0800217 	ldw	r2,8(fp)
 8006d30:	d8800015 	stw	r2,0(sp)
 8006d34:	e1ffff17 	ldw	r7,-4(fp)
 8006d38:	e1bffe17 	ldw	r6,-8(fp)
 8006d3c:	e17ffd17 	ldw	r5,-12(fp)
 8006d40:	e13ffc17 	ldw	r4,-16(fp)
 8006d44:	8006ebc0 	call	8006ebc <alt_iic_isr_register>
}  
 8006d48:	e037883a 	mov	sp,fp
 8006d4c:	dfc00117 	ldw	ra,4(sp)
 8006d50:	df000017 	ldw	fp,0(sp)
 8006d54:	dec00204 	addi	sp,sp,8
 8006d58:	f800283a 	ret

08006d5c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 8006d5c:	defff904 	addi	sp,sp,-28
 8006d60:	df000615 	stw	fp,24(sp)
 8006d64:	df000604 	addi	fp,sp,24
 8006d68:	e13ffe15 	stw	r4,-8(fp)
 8006d6c:	e17fff15 	stw	r5,-4(fp)
 8006d70:	e0bfff17 	ldw	r2,-4(fp)
 8006d74:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8006d78:	0005303a 	rdctl	r2,status
 8006d7c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8006d80:	e0fffb17 	ldw	r3,-20(fp)
 8006d84:	00bfff84 	movi	r2,-2
 8006d88:	1884703a 	and	r2,r3,r2
 8006d8c:	1001703a 	wrctl	status,r2
  
  return context;
 8006d90:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8006d94:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 8006d98:	00c00044 	movi	r3,1
 8006d9c:	e0bffa17 	ldw	r2,-24(fp)
 8006da0:	1884983a 	sll	r2,r3,r2
 8006da4:	1007883a 	mov	r3,r2
 8006da8:	d0a01317 	ldw	r2,-32692(gp)
 8006dac:	1884b03a 	or	r2,r3,r2
 8006db0:	d0a01315 	stw	r2,-32692(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8006db4:	d0a01317 	ldw	r2,-32692(gp)
 8006db8:	100170fa 	wrctl	ienable,r2
 8006dbc:	e0bffc17 	ldw	r2,-16(fp)
 8006dc0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8006dc4:	e0bffd17 	ldw	r2,-12(fp)
 8006dc8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8006dcc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 8006dd0:	0001883a 	nop
}
 8006dd4:	e037883a 	mov	sp,fp
 8006dd8:	df000017 	ldw	fp,0(sp)
 8006ddc:	dec00104 	addi	sp,sp,4
 8006de0:	f800283a 	ret

08006de4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 8006de4:	defff904 	addi	sp,sp,-28
 8006de8:	df000615 	stw	fp,24(sp)
 8006dec:	df000604 	addi	fp,sp,24
 8006df0:	e13ffe15 	stw	r4,-8(fp)
 8006df4:	e17fff15 	stw	r5,-4(fp)
 8006df8:	e0bfff17 	ldw	r2,-4(fp)
 8006dfc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8006e00:	0005303a 	rdctl	r2,status
 8006e04:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8006e08:	e0fffb17 	ldw	r3,-20(fp)
 8006e0c:	00bfff84 	movi	r2,-2
 8006e10:	1884703a 	and	r2,r3,r2
 8006e14:	1001703a 	wrctl	status,r2
  
  return context;
 8006e18:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8006e1c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 8006e20:	00c00044 	movi	r3,1
 8006e24:	e0bffa17 	ldw	r2,-24(fp)
 8006e28:	1884983a 	sll	r2,r3,r2
 8006e2c:	0084303a 	nor	r2,zero,r2
 8006e30:	1007883a 	mov	r3,r2
 8006e34:	d0a01317 	ldw	r2,-32692(gp)
 8006e38:	1884703a 	and	r2,r3,r2
 8006e3c:	d0a01315 	stw	r2,-32692(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8006e40:	d0a01317 	ldw	r2,-32692(gp)
 8006e44:	100170fa 	wrctl	ienable,r2
 8006e48:	e0bffc17 	ldw	r2,-16(fp)
 8006e4c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8006e50:	e0bffd17 	ldw	r2,-12(fp)
 8006e54:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8006e58:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 8006e5c:	0001883a 	nop
}
 8006e60:	e037883a 	mov	sp,fp
 8006e64:	df000017 	ldw	fp,0(sp)
 8006e68:	dec00104 	addi	sp,sp,4
 8006e6c:	f800283a 	ret

08006e70 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 8006e70:	defffc04 	addi	sp,sp,-16
 8006e74:	df000315 	stw	fp,12(sp)
 8006e78:	df000304 	addi	fp,sp,12
 8006e7c:	e13ffe15 	stw	r4,-8(fp)
 8006e80:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 8006e84:	000530fa 	rdctl	r2,ienable
 8006e88:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 8006e8c:	00c00044 	movi	r3,1
 8006e90:	e0bfff17 	ldw	r2,-4(fp)
 8006e94:	1884983a 	sll	r2,r3,r2
 8006e98:	1007883a 	mov	r3,r2
 8006e9c:	e0bffd17 	ldw	r2,-12(fp)
 8006ea0:	1884703a 	and	r2,r3,r2
 8006ea4:	1004c03a 	cmpne	r2,r2,zero
 8006ea8:	10803fcc 	andi	r2,r2,255
}
 8006eac:	e037883a 	mov	sp,fp
 8006eb0:	df000017 	ldw	fp,0(sp)
 8006eb4:	dec00104 	addi	sp,sp,4
 8006eb8:	f800283a 	ret

08006ebc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8006ebc:	defff504 	addi	sp,sp,-44
 8006ec0:	dfc00a15 	stw	ra,40(sp)
 8006ec4:	df000915 	stw	fp,36(sp)
 8006ec8:	df000904 	addi	fp,sp,36
 8006ecc:	e13ffc15 	stw	r4,-16(fp)
 8006ed0:	e17ffd15 	stw	r5,-12(fp)
 8006ed4:	e1bffe15 	stw	r6,-8(fp)
 8006ed8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 8006edc:	00bffa84 	movi	r2,-22
 8006ee0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 8006ee4:	e0bffd17 	ldw	r2,-12(fp)
 8006ee8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 8006eec:	e0bff817 	ldw	r2,-32(fp)
 8006ef0:	10800808 	cmpgei	r2,r2,32
 8006ef4:	1000271e 	bne	r2,zero,8006f94 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8006ef8:	0005303a 	rdctl	r2,status
 8006efc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8006f00:	e0fffb17 	ldw	r3,-20(fp)
 8006f04:	00bfff84 	movi	r2,-2
 8006f08:	1884703a 	and	r2,r3,r2
 8006f0c:	1001703a 	wrctl	status,r2
  
  return context;
 8006f10:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 8006f14:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 8006f18:	00800034 	movhi	r2,0
 8006f1c:	10854604 	addi	r2,r2,5400
 8006f20:	e0fff817 	ldw	r3,-32(fp)
 8006f24:	180690fa 	slli	r3,r3,3
 8006f28:	10c5883a 	add	r2,r2,r3
 8006f2c:	e0fffe17 	ldw	r3,-8(fp)
 8006f30:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 8006f34:	00800034 	movhi	r2,0
 8006f38:	10854604 	addi	r2,r2,5400
 8006f3c:	e0fff817 	ldw	r3,-32(fp)
 8006f40:	180690fa 	slli	r3,r3,3
 8006f44:	10c5883a 	add	r2,r2,r3
 8006f48:	10800104 	addi	r2,r2,4
 8006f4c:	e0ffff17 	ldw	r3,-4(fp)
 8006f50:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 8006f54:	e0bffe17 	ldw	r2,-8(fp)
 8006f58:	10000526 	beq	r2,zero,8006f70 <alt_iic_isr_register+0xb4>
 8006f5c:	e0bff817 	ldw	r2,-32(fp)
 8006f60:	100b883a 	mov	r5,r2
 8006f64:	e13ffc17 	ldw	r4,-16(fp)
 8006f68:	8006d5c0 	call	8006d5c <alt_ic_irq_enable>
 8006f6c:	00000406 	br	8006f80 <alt_iic_isr_register+0xc4>
 8006f70:	e0bff817 	ldw	r2,-32(fp)
 8006f74:	100b883a 	mov	r5,r2
 8006f78:	e13ffc17 	ldw	r4,-16(fp)
 8006f7c:	8006de40 	call	8006de4 <alt_ic_irq_disable>
 8006f80:	e0bff715 	stw	r2,-36(fp)
 8006f84:	e0bffa17 	ldw	r2,-24(fp)
 8006f88:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8006f8c:	e0bff917 	ldw	r2,-28(fp)
 8006f90:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 8006f94:	e0bff717 	ldw	r2,-36(fp)
}
 8006f98:	e037883a 	mov	sp,fp
 8006f9c:	dfc00117 	ldw	ra,4(sp)
 8006fa0:	df000017 	ldw	fp,0(sp)
 8006fa4:	dec00204 	addi	sp,sp,8
 8006fa8:	f800283a 	ret

08006fac <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 8006fac:	defff904 	addi	sp,sp,-28
 8006fb0:	dfc00615 	stw	ra,24(sp)
 8006fb4:	df000515 	stw	fp,20(sp)
 8006fb8:	df000504 	addi	fp,sp,20
 8006fbc:	e13ffc15 	stw	r4,-16(fp)
 8006fc0:	e17ffd15 	stw	r5,-12(fp)
 8006fc4:	e1bffe15 	stw	r6,-8(fp)
 8006fc8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 8006fcc:	e1bfff17 	ldw	r6,-4(fp)
 8006fd0:	e17ffe17 	ldw	r5,-8(fp)
 8006fd4:	e13ffd17 	ldw	r4,-12(fp)
 8006fd8:	80071ec0 	call	80071ec <open>
 8006fdc:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 8006fe0:	e0bffb17 	ldw	r2,-20(fp)
 8006fe4:	10001c16 	blt	r2,zero,8007058 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 8006fe8:	00800034 	movhi	r2,0
 8006fec:	1084cf04 	addi	r2,r2,4924
 8006ff0:	e0fffb17 	ldw	r3,-20(fp)
 8006ff4:	18c00324 	muli	r3,r3,12
 8006ff8:	10c5883a 	add	r2,r2,r3
 8006ffc:	10c00017 	ldw	r3,0(r2)
 8007000:	e0bffc17 	ldw	r2,-16(fp)
 8007004:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 8007008:	00800034 	movhi	r2,0
 800700c:	1084cf04 	addi	r2,r2,4924
 8007010:	e0fffb17 	ldw	r3,-20(fp)
 8007014:	18c00324 	muli	r3,r3,12
 8007018:	10c5883a 	add	r2,r2,r3
 800701c:	10800104 	addi	r2,r2,4
 8007020:	10c00017 	ldw	r3,0(r2)
 8007024:	e0bffc17 	ldw	r2,-16(fp)
 8007028:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 800702c:	00800034 	movhi	r2,0
 8007030:	1084cf04 	addi	r2,r2,4924
 8007034:	e0fffb17 	ldw	r3,-20(fp)
 8007038:	18c00324 	muli	r3,r3,12
 800703c:	10c5883a 	add	r2,r2,r3
 8007040:	10800204 	addi	r2,r2,8
 8007044:	10c00017 	ldw	r3,0(r2)
 8007048:	e0bffc17 	ldw	r2,-16(fp)
 800704c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 8007050:	e13ffb17 	ldw	r4,-20(fp)
 8007054:	80073400 	call	8007340 <alt_release_fd>
  }
} 
 8007058:	0001883a 	nop
 800705c:	e037883a 	mov	sp,fp
 8007060:	dfc00117 	ldw	ra,4(sp)
 8007064:	df000017 	ldw	fp,0(sp)
 8007068:	dec00204 	addi	sp,sp,8
 800706c:	f800283a 	ret

08007070 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 8007070:	defffb04 	addi	sp,sp,-20
 8007074:	dfc00415 	stw	ra,16(sp)
 8007078:	df000315 	stw	fp,12(sp)
 800707c:	df000304 	addi	fp,sp,12
 8007080:	e13ffd15 	stw	r4,-12(fp)
 8007084:	e17ffe15 	stw	r5,-8(fp)
 8007088:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 800708c:	01c07fc4 	movi	r7,511
 8007090:	01800044 	movi	r6,1
 8007094:	e17ffd17 	ldw	r5,-12(fp)
 8007098:	01000034 	movhi	r4,0
 800709c:	2104d204 	addi	r4,r4,4936
 80070a0:	8006fac0 	call	8006fac <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 80070a4:	01c07fc4 	movi	r7,511
 80070a8:	000d883a 	mov	r6,zero
 80070ac:	e17ffe17 	ldw	r5,-8(fp)
 80070b0:	01000034 	movhi	r4,0
 80070b4:	2104cf04 	addi	r4,r4,4924
 80070b8:	8006fac0 	call	8006fac <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 80070bc:	01c07fc4 	movi	r7,511
 80070c0:	01800044 	movi	r6,1
 80070c4:	e17fff17 	ldw	r5,-4(fp)
 80070c8:	01000034 	movhi	r4,0
 80070cc:	2104d504 	addi	r4,r4,4948
 80070d0:	8006fac0 	call	8006fac <alt_open_fd>
}  
 80070d4:	0001883a 	nop
 80070d8:	e037883a 	mov	sp,fp
 80070dc:	dfc00117 	ldw	ra,4(sp)
 80070e0:	df000017 	ldw	fp,0(sp)
 80070e4:	dec00204 	addi	sp,sp,8
 80070e8:	f800283a 	ret

080070ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80070ec:	defffe04 	addi	sp,sp,-8
 80070f0:	dfc00115 	stw	ra,4(sp)
 80070f4:	df000015 	stw	fp,0(sp)
 80070f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80070fc:	d0a00b17 	ldw	r2,-32724(gp)
 8007100:	10000326 	beq	r2,zero,8007110 <alt_get_errno+0x24>
 8007104:	d0a00b17 	ldw	r2,-32724(gp)
 8007108:	103ee83a 	callr	r2
 800710c:	00000106 	br	8007114 <alt_get_errno+0x28>
 8007110:	d0a00f04 	addi	r2,gp,-32708
}
 8007114:	e037883a 	mov	sp,fp
 8007118:	dfc00117 	ldw	ra,4(sp)
 800711c:	df000017 	ldw	fp,0(sp)
 8007120:	dec00204 	addi	sp,sp,8
 8007124:	f800283a 	ret

08007128 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 8007128:	defffd04 	addi	sp,sp,-12
 800712c:	df000215 	stw	fp,8(sp)
 8007130:	df000204 	addi	fp,sp,8
 8007134:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 8007138:	e0bfff17 	ldw	r2,-4(fp)
 800713c:	10800217 	ldw	r2,8(r2)
 8007140:	10d00034 	orhi	r3,r2,16384
 8007144:	e0bfff17 	ldw	r2,-4(fp)
 8007148:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 800714c:	e03ffe15 	stw	zero,-8(fp)
 8007150:	00001d06 	br	80071c8 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8007154:	00800034 	movhi	r2,0
 8007158:	1084cf04 	addi	r2,r2,4924
 800715c:	e0fffe17 	ldw	r3,-8(fp)
 8007160:	18c00324 	muli	r3,r3,12
 8007164:	10c5883a 	add	r2,r2,r3
 8007168:	10c00017 	ldw	r3,0(r2)
 800716c:	e0bfff17 	ldw	r2,-4(fp)
 8007170:	10800017 	ldw	r2,0(r2)
 8007174:	1880111e 	bne	r3,r2,80071bc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8007178:	00800034 	movhi	r2,0
 800717c:	1084cf04 	addi	r2,r2,4924
 8007180:	e0fffe17 	ldw	r3,-8(fp)
 8007184:	18c00324 	muli	r3,r3,12
 8007188:	10c5883a 	add	r2,r2,r3
 800718c:	10800204 	addi	r2,r2,8
 8007190:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8007194:	1000090e 	bge	r2,zero,80071bc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 8007198:	e0bffe17 	ldw	r2,-8(fp)
 800719c:	10c00324 	muli	r3,r2,12
 80071a0:	00800034 	movhi	r2,0
 80071a4:	1084cf04 	addi	r2,r2,4924
 80071a8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 80071ac:	e0bfff17 	ldw	r2,-4(fp)
 80071b0:	18800226 	beq	r3,r2,80071bc <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 80071b4:	00bffcc4 	movi	r2,-13
 80071b8:	00000806 	br	80071dc <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 80071bc:	e0bffe17 	ldw	r2,-8(fp)
 80071c0:	10800044 	addi	r2,r2,1
 80071c4:	e0bffe15 	stw	r2,-8(fp)
 80071c8:	d0a00a17 	ldw	r2,-32728(gp)
 80071cc:	1007883a 	mov	r3,r2
 80071d0:	e0bffe17 	ldw	r2,-8(fp)
 80071d4:	18bfdf2e 	bgeu	r3,r2,8007154 <__flash_rwdata_start+0xfffff480>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 80071d8:	0005883a 	mov	r2,zero
}
 80071dc:	e037883a 	mov	sp,fp
 80071e0:	df000017 	ldw	fp,0(sp)
 80071e4:	dec00104 	addi	sp,sp,4
 80071e8:	f800283a 	ret

080071ec <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 80071ec:	defff604 	addi	sp,sp,-40
 80071f0:	dfc00915 	stw	ra,36(sp)
 80071f4:	df000815 	stw	fp,32(sp)
 80071f8:	df000804 	addi	fp,sp,32
 80071fc:	e13ffd15 	stw	r4,-12(fp)
 8007200:	e17ffe15 	stw	r5,-8(fp)
 8007204:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 8007208:	00bfffc4 	movi	r2,-1
 800720c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 8007210:	00bffb44 	movi	r2,-19
 8007214:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 8007218:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 800721c:	d1600804 	addi	r5,gp,-32736
 8007220:	e13ffd17 	ldw	r4,-12(fp)
 8007224:	8006c480 	call	8006c48 <alt_find_dev>
 8007228:	e0bff815 	stw	r2,-32(fp)
 800722c:	e0bff817 	ldw	r2,-32(fp)
 8007230:	1000051e 	bne	r2,zero,8007248 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 8007234:	e13ffd17 	ldw	r4,-12(fp)
 8007238:	800756c0 	call	800756c <alt_find_file>
 800723c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 8007240:	00800044 	movi	r2,1
 8007244:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 8007248:	e0bff817 	ldw	r2,-32(fp)
 800724c:	10002926 	beq	r2,zero,80072f4 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 8007250:	e13ff817 	ldw	r4,-32(fp)
 8007254:	80076740 	call	8007674 <alt_get_fd>
 8007258:	e0bff915 	stw	r2,-28(fp)
 800725c:	e0bff917 	ldw	r2,-28(fp)
 8007260:	1000030e 	bge	r2,zero,8007270 <open+0x84>
    {
      status = index;
 8007264:	e0bff917 	ldw	r2,-28(fp)
 8007268:	e0bffa15 	stw	r2,-24(fp)
 800726c:	00002306 	br	80072fc <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 8007270:	e0bff917 	ldw	r2,-28(fp)
 8007274:	10c00324 	muli	r3,r2,12
 8007278:	00800034 	movhi	r2,0
 800727c:	1084cf04 	addi	r2,r2,4924
 8007280:	1885883a 	add	r2,r3,r2
 8007284:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 8007288:	e0fffe17 	ldw	r3,-8(fp)
 800728c:	00900034 	movhi	r2,16384
 8007290:	10bfffc4 	addi	r2,r2,-1
 8007294:	1886703a 	and	r3,r3,r2
 8007298:	e0bffc17 	ldw	r2,-16(fp)
 800729c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 80072a0:	e0bffb17 	ldw	r2,-20(fp)
 80072a4:	1000051e 	bne	r2,zero,80072bc <open+0xd0>
 80072a8:	e13ffc17 	ldw	r4,-16(fp)
 80072ac:	80071280 	call	8007128 <alt_file_locked>
 80072b0:	e0bffa15 	stw	r2,-24(fp)
 80072b4:	e0bffa17 	ldw	r2,-24(fp)
 80072b8:	10001016 	blt	r2,zero,80072fc <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 80072bc:	e0bff817 	ldw	r2,-32(fp)
 80072c0:	10800317 	ldw	r2,12(r2)
 80072c4:	10000826 	beq	r2,zero,80072e8 <open+0xfc>
 80072c8:	e0bff817 	ldw	r2,-32(fp)
 80072cc:	10800317 	ldw	r2,12(r2)
 80072d0:	e1ffff17 	ldw	r7,-4(fp)
 80072d4:	e1bffe17 	ldw	r6,-8(fp)
 80072d8:	e17ffd17 	ldw	r5,-12(fp)
 80072dc:	e13ffc17 	ldw	r4,-16(fp)
 80072e0:	103ee83a 	callr	r2
 80072e4:	00000106 	br	80072ec <open+0x100>
 80072e8:	0005883a 	mov	r2,zero
 80072ec:	e0bffa15 	stw	r2,-24(fp)
 80072f0:	00000206 	br	80072fc <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 80072f4:	00bffb44 	movi	r2,-19
 80072f8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 80072fc:	e0bffa17 	ldw	r2,-24(fp)
 8007300:	1000090e 	bge	r2,zero,8007328 <open+0x13c>
  {
    alt_release_fd (index);  
 8007304:	e13ff917 	ldw	r4,-28(fp)
 8007308:	80073400 	call	8007340 <alt_release_fd>
    ALT_ERRNO = -status;
 800730c:	80070ec0 	call	80070ec <alt_get_errno>
 8007310:	1007883a 	mov	r3,r2
 8007314:	e0bffa17 	ldw	r2,-24(fp)
 8007318:	0085c83a 	sub	r2,zero,r2
 800731c:	18800015 	stw	r2,0(r3)
    return -1;
 8007320:	00bfffc4 	movi	r2,-1
 8007324:	00000106 	br	800732c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 8007328:	e0bff917 	ldw	r2,-28(fp)
}
 800732c:	e037883a 	mov	sp,fp
 8007330:	dfc00117 	ldw	ra,4(sp)
 8007334:	df000017 	ldw	fp,0(sp)
 8007338:	dec00204 	addi	sp,sp,8
 800733c:	f800283a 	ret

08007340 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 8007340:	defffe04 	addi	sp,sp,-8
 8007344:	df000115 	stw	fp,4(sp)
 8007348:	df000104 	addi	fp,sp,4
 800734c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 8007350:	e0bfff17 	ldw	r2,-4(fp)
 8007354:	108000d0 	cmplti	r2,r2,3
 8007358:	10000d1e 	bne	r2,zero,8007390 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 800735c:	00800034 	movhi	r2,0
 8007360:	1084cf04 	addi	r2,r2,4924
 8007364:	e0ffff17 	ldw	r3,-4(fp)
 8007368:	18c00324 	muli	r3,r3,12
 800736c:	10c5883a 	add	r2,r2,r3
 8007370:	10800204 	addi	r2,r2,8
 8007374:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 8007378:	00800034 	movhi	r2,0
 800737c:	1084cf04 	addi	r2,r2,4924
 8007380:	e0ffff17 	ldw	r3,-4(fp)
 8007384:	18c00324 	muli	r3,r3,12
 8007388:	10c5883a 	add	r2,r2,r3
 800738c:	10000015 	stw	zero,0(r2)
  }
}
 8007390:	0001883a 	nop
 8007394:	e037883a 	mov	sp,fp
 8007398:	df000017 	ldw	fp,0(sp)
 800739c:	dec00104 	addi	sp,sp,4
 80073a0:	f800283a 	ret

080073a4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 80073a4:	defffa04 	addi	sp,sp,-24
 80073a8:	df000515 	stw	fp,20(sp)
 80073ac:	df000504 	addi	fp,sp,20
 80073b0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 80073b4:	0005303a 	rdctl	r2,status
 80073b8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80073bc:	e0fffc17 	ldw	r3,-16(fp)
 80073c0:	00bfff84 	movi	r2,-2
 80073c4:	1884703a 	and	r2,r3,r2
 80073c8:	1001703a 	wrctl	status,r2
  
  return context;
 80073cc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 80073d0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 80073d4:	e0bfff17 	ldw	r2,-4(fp)
 80073d8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 80073dc:	e0bffd17 	ldw	r2,-12(fp)
 80073e0:	10800017 	ldw	r2,0(r2)
 80073e4:	e0fffd17 	ldw	r3,-12(fp)
 80073e8:	18c00117 	ldw	r3,4(r3)
 80073ec:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 80073f0:	e0bffd17 	ldw	r2,-12(fp)
 80073f4:	10800117 	ldw	r2,4(r2)
 80073f8:	e0fffd17 	ldw	r3,-12(fp)
 80073fc:	18c00017 	ldw	r3,0(r3)
 8007400:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 8007404:	e0bffd17 	ldw	r2,-12(fp)
 8007408:	e0fffd17 	ldw	r3,-12(fp)
 800740c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 8007410:	e0bffd17 	ldw	r2,-12(fp)
 8007414:	e0fffd17 	ldw	r3,-12(fp)
 8007418:	10c00015 	stw	r3,0(r2)
 800741c:	e0bffb17 	ldw	r2,-20(fp)
 8007420:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8007424:	e0bffe17 	ldw	r2,-8(fp)
 8007428:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 800742c:	0001883a 	nop
 8007430:	e037883a 	mov	sp,fp
 8007434:	df000017 	ldw	fp,0(sp)
 8007438:	dec00104 	addi	sp,sp,4
 800743c:	f800283a 	ret

08007440 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 8007440:	defffb04 	addi	sp,sp,-20
 8007444:	dfc00415 	stw	ra,16(sp)
 8007448:	df000315 	stw	fp,12(sp)
 800744c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 8007450:	d0a00d17 	ldw	r2,-32716(gp)
 8007454:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 8007458:	d0a01517 	ldw	r2,-32684(gp)
 800745c:	10800044 	addi	r2,r2,1
 8007460:	d0a01515 	stw	r2,-32684(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8007464:	00002e06 	br	8007520 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 8007468:	e0bffd17 	ldw	r2,-12(fp)
 800746c:	10800017 	ldw	r2,0(r2)
 8007470:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 8007474:	e0bffd17 	ldw	r2,-12(fp)
 8007478:	10800403 	ldbu	r2,16(r2)
 800747c:	10803fcc 	andi	r2,r2,255
 8007480:	10000426 	beq	r2,zero,8007494 <alt_tick+0x54>
 8007484:	d0a01517 	ldw	r2,-32684(gp)
 8007488:	1000021e 	bne	r2,zero,8007494 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 800748c:	e0bffd17 	ldw	r2,-12(fp)
 8007490:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 8007494:	e0bffd17 	ldw	r2,-12(fp)
 8007498:	10800217 	ldw	r2,8(r2)
 800749c:	d0e01517 	ldw	r3,-32684(gp)
 80074a0:	18801d36 	bltu	r3,r2,8007518 <alt_tick+0xd8>
 80074a4:	e0bffd17 	ldw	r2,-12(fp)
 80074a8:	10800403 	ldbu	r2,16(r2)
 80074ac:	10803fcc 	andi	r2,r2,255
 80074b0:	1000191e 	bne	r2,zero,8007518 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 80074b4:	e0bffd17 	ldw	r2,-12(fp)
 80074b8:	10800317 	ldw	r2,12(r2)
 80074bc:	e0fffd17 	ldw	r3,-12(fp)
 80074c0:	18c00517 	ldw	r3,20(r3)
 80074c4:	1809883a 	mov	r4,r3
 80074c8:	103ee83a 	callr	r2
 80074cc:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 80074d0:	e0bfff17 	ldw	r2,-4(fp)
 80074d4:	1000031e 	bne	r2,zero,80074e4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 80074d8:	e13ffd17 	ldw	r4,-12(fp)
 80074dc:	80073a40 	call	80073a4 <alt_alarm_stop>
 80074e0:	00000d06 	br	8007518 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 80074e4:	e0bffd17 	ldw	r2,-12(fp)
 80074e8:	10c00217 	ldw	r3,8(r2)
 80074ec:	e0bfff17 	ldw	r2,-4(fp)
 80074f0:	1887883a 	add	r3,r3,r2
 80074f4:	e0bffd17 	ldw	r2,-12(fp)
 80074f8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 80074fc:	e0bffd17 	ldw	r2,-12(fp)
 8007500:	10c00217 	ldw	r3,8(r2)
 8007504:	d0a01517 	ldw	r2,-32684(gp)
 8007508:	1880032e 	bgeu	r3,r2,8007518 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 800750c:	e0bffd17 	ldw	r2,-12(fp)
 8007510:	00c00044 	movi	r3,1
 8007514:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 8007518:	e0bffe17 	ldw	r2,-8(fp)
 800751c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 8007520:	e0fffd17 	ldw	r3,-12(fp)
 8007524:	d0a00d04 	addi	r2,gp,-32716
 8007528:	18bfcf1e 	bne	r3,r2,8007468 <__flash_rwdata_start+0xfffff794>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 800752c:	0001883a 	nop
}
 8007530:	0001883a 	nop
 8007534:	e037883a 	mov	sp,fp
 8007538:	dfc00117 	ldw	ra,4(sp)
 800753c:	df000017 	ldw	fp,0(sp)
 8007540:	dec00204 	addi	sp,sp,8
 8007544:	f800283a 	ret

08007548 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 8007548:	deffff04 	addi	sp,sp,-4
 800754c:	df000015 	stw	fp,0(sp)
 8007550:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 8007554:	000170fa 	wrctl	ienable,zero
}
 8007558:	0001883a 	nop
 800755c:	e037883a 	mov	sp,fp
 8007560:	df000017 	ldw	fp,0(sp)
 8007564:	dec00104 	addi	sp,sp,4
 8007568:	f800283a 	ret

0800756c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 800756c:	defffb04 	addi	sp,sp,-20
 8007570:	dfc00415 	stw	ra,16(sp)
 8007574:	df000315 	stw	fp,12(sp)
 8007578:	df000304 	addi	fp,sp,12
 800757c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 8007580:	d0a00617 	ldw	r2,-32744(gp)
 8007584:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8007588:	00003106 	br	8007650 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 800758c:	e0bffd17 	ldw	r2,-12(fp)
 8007590:	10800217 	ldw	r2,8(r2)
 8007594:	1009883a 	mov	r4,r2
 8007598:	80049e00 	call	80049e0 <strlen>
 800759c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 80075a0:	e0bffd17 	ldw	r2,-12(fp)
 80075a4:	10c00217 	ldw	r3,8(r2)
 80075a8:	e0bffe17 	ldw	r2,-8(fp)
 80075ac:	10bfffc4 	addi	r2,r2,-1
 80075b0:	1885883a 	add	r2,r3,r2
 80075b4:	10800003 	ldbu	r2,0(r2)
 80075b8:	10803fcc 	andi	r2,r2,255
 80075bc:	1080201c 	xori	r2,r2,128
 80075c0:	10bfe004 	addi	r2,r2,-128
 80075c4:	10800bd8 	cmpnei	r2,r2,47
 80075c8:	1000031e 	bne	r2,zero,80075d8 <alt_find_file+0x6c>
    {
      len -= 1;
 80075cc:	e0bffe17 	ldw	r2,-8(fp)
 80075d0:	10bfffc4 	addi	r2,r2,-1
 80075d4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 80075d8:	e0bffe17 	ldw	r2,-8(fp)
 80075dc:	e0ffff17 	ldw	r3,-4(fp)
 80075e0:	1885883a 	add	r2,r3,r2
 80075e4:	10800003 	ldbu	r2,0(r2)
 80075e8:	10803fcc 	andi	r2,r2,255
 80075ec:	1080201c 	xori	r2,r2,128
 80075f0:	10bfe004 	addi	r2,r2,-128
 80075f4:	10800be0 	cmpeqi	r2,r2,47
 80075f8:	1000081e 	bne	r2,zero,800761c <alt_find_file+0xb0>
 80075fc:	e0bffe17 	ldw	r2,-8(fp)
 8007600:	e0ffff17 	ldw	r3,-4(fp)
 8007604:	1885883a 	add	r2,r3,r2
 8007608:	10800003 	ldbu	r2,0(r2)
 800760c:	10803fcc 	andi	r2,r2,255
 8007610:	1080201c 	xori	r2,r2,128
 8007614:	10bfe004 	addi	r2,r2,-128
 8007618:	10000a1e 	bne	r2,zero,8007644 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 800761c:	e0bffd17 	ldw	r2,-12(fp)
 8007620:	10800217 	ldw	r2,8(r2)
 8007624:	e0fffe17 	ldw	r3,-8(fp)
 8007628:	180d883a 	mov	r6,r3
 800762c:	e17fff17 	ldw	r5,-4(fp)
 8007630:	1009883a 	mov	r4,r2
 8007634:	80078780 	call	8007878 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8007638:	1000021e 	bne	r2,zero,8007644 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 800763c:	e0bffd17 	ldw	r2,-12(fp)
 8007640:	00000706 	br	8007660 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 8007644:	e0bffd17 	ldw	r2,-12(fp)
 8007648:	10800017 	ldw	r2,0(r2)
 800764c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8007650:	e0fffd17 	ldw	r3,-12(fp)
 8007654:	d0a00604 	addi	r2,gp,-32744
 8007658:	18bfcc1e 	bne	r3,r2,800758c <__flash_rwdata_start+0xfffff8b8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 800765c:	0005883a 	mov	r2,zero
}
 8007660:	e037883a 	mov	sp,fp
 8007664:	dfc00117 	ldw	ra,4(sp)
 8007668:	df000017 	ldw	fp,0(sp)
 800766c:	dec00204 	addi	sp,sp,8
 8007670:	f800283a 	ret

08007674 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 8007674:	defffc04 	addi	sp,sp,-16
 8007678:	df000315 	stw	fp,12(sp)
 800767c:	df000304 	addi	fp,sp,12
 8007680:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 8007684:	00bffa04 	movi	r2,-24
 8007688:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 800768c:	e03ffd15 	stw	zero,-12(fp)
 8007690:	00001906 	br	80076f8 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 8007694:	00800034 	movhi	r2,0
 8007698:	1084cf04 	addi	r2,r2,4924
 800769c:	e0fffd17 	ldw	r3,-12(fp)
 80076a0:	18c00324 	muli	r3,r3,12
 80076a4:	10c5883a 	add	r2,r2,r3
 80076a8:	10800017 	ldw	r2,0(r2)
 80076ac:	10000f1e 	bne	r2,zero,80076ec <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 80076b0:	00800034 	movhi	r2,0
 80076b4:	1084cf04 	addi	r2,r2,4924
 80076b8:	e0fffd17 	ldw	r3,-12(fp)
 80076bc:	18c00324 	muli	r3,r3,12
 80076c0:	10c5883a 	add	r2,r2,r3
 80076c4:	e0ffff17 	ldw	r3,-4(fp)
 80076c8:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 80076cc:	d0e00a17 	ldw	r3,-32728(gp)
 80076d0:	e0bffd17 	ldw	r2,-12(fp)
 80076d4:	1880020e 	bge	r3,r2,80076e0 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 80076d8:	e0bffd17 	ldw	r2,-12(fp)
 80076dc:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
 80076e0:	e0bffd17 	ldw	r2,-12(fp)
 80076e4:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 80076e8:	00000606 	br	8007704 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 80076ec:	e0bffd17 	ldw	r2,-12(fp)
 80076f0:	10800044 	addi	r2,r2,1
 80076f4:	e0bffd15 	stw	r2,-12(fp)
 80076f8:	e0bffd17 	ldw	r2,-12(fp)
 80076fc:	10800810 	cmplti	r2,r2,32
 8007700:	103fe41e 	bne	r2,zero,8007694 <__flash_rwdata_start+0xfffff9c0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 8007704:	e0bffe17 	ldw	r2,-8(fp)
}
 8007708:	e037883a 	mov	sp,fp
 800770c:	df000017 	ldw	fp,0(sp)
 8007710:	dec00104 	addi	sp,sp,4
 8007714:	f800283a 	ret

08007718 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 8007718:	defffb04 	addi	sp,sp,-20
 800771c:	df000415 	stw	fp,16(sp)
 8007720:	df000404 	addi	fp,sp,16
 8007724:	e13ffe15 	stw	r4,-8(fp)
 8007728:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 800772c:	e0bfff17 	ldw	r2,-4(fp)
 8007730:	10840070 	cmpltui	r2,r2,4097
 8007734:	1000021e 	bne	r2,zero,8007740 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 8007738:	00840004 	movi	r2,4096
 800773c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 8007740:	e0fffe17 	ldw	r3,-8(fp)
 8007744:	e0bfff17 	ldw	r2,-4(fp)
 8007748:	1885883a 	add	r2,r3,r2
 800774c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8007750:	e0bffe17 	ldw	r2,-8(fp)
 8007754:	e0bffc15 	stw	r2,-16(fp)
 8007758:	00000506 	br	8007770 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 800775c:	e0bffc17 	ldw	r2,-16(fp)
 8007760:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8007764:	e0bffc17 	ldw	r2,-16(fp)
 8007768:	10800804 	addi	r2,r2,32
 800776c:	e0bffc15 	stw	r2,-16(fp)
 8007770:	e0fffc17 	ldw	r3,-16(fp)
 8007774:	e0bffd17 	ldw	r2,-12(fp)
 8007778:	18bff836 	bltu	r3,r2,800775c <__flash_rwdata_start+0xfffffa88>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 800777c:	e0bffe17 	ldw	r2,-8(fp)
 8007780:	108007cc 	andi	r2,r2,31
 8007784:	10000226 	beq	r2,zero,8007790 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 8007788:	e0bffc17 	ldw	r2,-16(fp)
 800778c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 8007790:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 8007794:	0001883a 	nop
 8007798:	e037883a 	mov	sp,fp
 800779c:	df000017 	ldw	fp,0(sp)
 80077a0:	dec00104 	addi	sp,sp,4
 80077a4:	f800283a 	ret

080077a8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 80077a8:	defffe04 	addi	sp,sp,-8
 80077ac:	df000115 	stw	fp,4(sp)
 80077b0:	df000104 	addi	fp,sp,4
 80077b4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 80077b8:	e0bfff17 	ldw	r2,-4(fp)
 80077bc:	10bffe84 	addi	r2,r2,-6
 80077c0:	10c00428 	cmpgeui	r3,r2,16
 80077c4:	18001a1e 	bne	r3,zero,8007830 <alt_exception_cause_generated_bad_addr+0x88>
 80077c8:	100690ba 	slli	r3,r2,2
 80077cc:	00820034 	movhi	r2,2048
 80077d0:	109df804 	addi	r2,r2,30688
 80077d4:	1885883a 	add	r2,r3,r2
 80077d8:	10800017 	ldw	r2,0(r2)
 80077dc:	1000683a 	jmp	r2
 80077e0:	08007820 	cmpeqi	zero,at,480
 80077e4:	08007820 	cmpeqi	zero,at,480
 80077e8:	08007830 	cmpltui	zero,at,480
 80077ec:	08007830 	cmpltui	zero,at,480
 80077f0:	08007830 	cmpltui	zero,at,480
 80077f4:	08007820 	cmpeqi	zero,at,480
 80077f8:	08007828 	cmpgeui	zero,at,480
 80077fc:	08007830 	cmpltui	zero,at,480
 8007800:	08007820 	cmpeqi	zero,at,480
 8007804:	08007820 	cmpeqi	zero,at,480
 8007808:	08007830 	cmpltui	zero,at,480
 800780c:	08007820 	cmpeqi	zero,at,480
 8007810:	08007828 	cmpgeui	zero,at,480
 8007814:	08007830 	cmpltui	zero,at,480
 8007818:	08007830 	cmpltui	zero,at,480
 800781c:	08007820 	cmpeqi	zero,at,480
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 8007820:	00800044 	movi	r2,1
 8007824:	00000306 	br	8007834 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 8007828:	0005883a 	mov	r2,zero
 800782c:	00000106 	br	8007834 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 8007830:	0005883a 	mov	r2,zero
  }
}
 8007834:	e037883a 	mov	sp,fp
 8007838:	df000017 	ldw	fp,0(sp)
 800783c:	dec00104 	addi	sp,sp,4
 8007840:	f800283a 	ret

08007844 <atexit>:
 8007844:	200b883a 	mov	r5,r4
 8007848:	000f883a 	mov	r7,zero
 800784c:	000d883a 	mov	r6,zero
 8007850:	0009883a 	mov	r4,zero
 8007854:	80078d01 	jmpi	80078d0 <__register_exitproc>

08007858 <exit>:
 8007858:	defffe04 	addi	sp,sp,-8
 800785c:	000b883a 	mov	r5,zero
 8007860:	dc000015 	stw	r16,0(sp)
 8007864:	dfc00115 	stw	ra,4(sp)
 8007868:	2021883a 	mov	r16,r4
 800786c:	8007a280 	call	8007a28 <__call_exitprocs>
 8007870:	8009883a 	mov	r4,r16
 8007874:	8007bb80 	call	8007bb8 <_exit>

08007878 <memcmp>:
 8007878:	218d883a 	add	r6,r4,r6
 800787c:	21800826 	beq	r4,r6,80078a0 <memcmp+0x28>
 8007880:	20800003 	ldbu	r2,0(r4)
 8007884:	28c00003 	ldbu	r3,0(r5)
 8007888:	10c00226 	beq	r2,r3,8007894 <memcmp+0x1c>
 800788c:	10c5c83a 	sub	r2,r2,r3
 8007890:	f800283a 	ret
 8007894:	21000044 	addi	r4,r4,1
 8007898:	29400044 	addi	r5,r5,1
 800789c:	003ff706 	br	800787c <__flash_rwdata_start+0xfffffba8>
 80078a0:	0005883a 	mov	r2,zero
 80078a4:	f800283a 	ret

080078a8 <memcpy>:
 80078a8:	2005883a 	mov	r2,r4
 80078ac:	2007883a 	mov	r3,r4
 80078b0:	218d883a 	add	r6,r4,r6
 80078b4:	19800526 	beq	r3,r6,80078cc <memcpy+0x24>
 80078b8:	29000003 	ldbu	r4,0(r5)
 80078bc:	18c00044 	addi	r3,r3,1
 80078c0:	29400044 	addi	r5,r5,1
 80078c4:	193fffc5 	stb	r4,-1(r3)
 80078c8:	003ffa06 	br	80078b4 <__flash_rwdata_start+0xfffffbe0>
 80078cc:	f800283a 	ret

080078d0 <__register_exitproc>:
 80078d0:	00800034 	movhi	r2,0
 80078d4:	10852f04 	addi	r2,r2,5308
 80078d8:	10c00017 	ldw	r3,0(r2)
 80078dc:	defff904 	addi	sp,sp,-28
 80078e0:	dc000015 	stw	r16,0(sp)
 80078e4:	1c000c17 	ldw	r16,48(r3)
 80078e8:	dd400515 	stw	r21,20(sp)
 80078ec:	dd000415 	stw	r20,16(sp)
 80078f0:	dcc00315 	stw	r19,12(sp)
 80078f4:	dc800215 	stw	r18,8(sp)
 80078f8:	dc400115 	stw	r17,4(sp)
 80078fc:	dfc00615 	stw	ra,24(sp)
 8007900:	202b883a 	mov	r21,r4
 8007904:	2823883a 	mov	r17,r5
 8007908:	3027883a 	mov	r19,r6
 800790c:	3825883a 	mov	r18,r7
 8007910:	1029883a 	mov	r20,r2
 8007914:	8000021e 	bne	r16,zero,8007920 <__register_exitproc+0x50>
 8007918:	1c000d04 	addi	r16,r3,52
 800791c:	1c000c15 	stw	r16,48(r3)
 8007920:	80800117 	ldw	r2,4(r16)
 8007924:	00c007c4 	movi	r3,31
 8007928:	1880110e 	bge	r3,r2,8007970 <__register_exitproc+0xa0>
 800792c:	00800034 	movhi	r2,0
 8007930:	10800004 	addi	r2,r2,0
 8007934:	1000021e 	bne	r2,zero,8007940 <__register_exitproc+0x70>
 8007938:	00bfffc4 	movi	r2,-1
 800793c:	00003106 	br	8007a04 <__register_exitproc+0x134>
 8007940:	01002304 	movi	r4,140
 8007944:	00000000 	call	0 <__alt_mem_sdram_controller_2>
 8007948:	1021883a 	mov	r16,r2
 800794c:	103ffa26 	beq	r2,zero,8007938 <__flash_rwdata_start+0xfffffc64>
 8007950:	10000115 	stw	zero,4(r2)
 8007954:	a0800017 	ldw	r2,0(r20)
 8007958:	10c00c17 	ldw	r3,48(r2)
 800795c:	80c00015 	stw	r3,0(r16)
 8007960:	14000c15 	stw	r16,48(r2)
 8007964:	80002215 	stw	zero,136(r16)
 8007968:	a8001d26 	beq	r21,zero,80079e0 <__register_exitproc+0x110>
 800796c:	00000606 	br	8007988 <__register_exitproc+0xb8>
 8007970:	a8001b26 	beq	r21,zero,80079e0 <__register_exitproc+0x110>
 8007974:	80802217 	ldw	r2,136(r16)
 8007978:	1000091e 	bne	r2,zero,80079a0 <__register_exitproc+0xd0>
 800797c:	00800034 	movhi	r2,0
 8007980:	10800004 	addi	r2,r2,0
 8007984:	103fec26 	beq	r2,zero,8007938 <__flash_rwdata_start+0xfffffc64>
 8007988:	01004204 	movi	r4,264
 800798c:	00000000 	call	0 <__alt_mem_sdram_controller_2>
 8007990:	103fe926 	beq	r2,zero,8007938 <__flash_rwdata_start+0xfffffc64>
 8007994:	10004015 	stw	zero,256(r2)
 8007998:	10004115 	stw	zero,260(r2)
 800799c:	80802215 	stw	r2,136(r16)
 80079a0:	81400117 	ldw	r5,4(r16)
 80079a4:	01000044 	movi	r4,1
 80079a8:	2947883a 	add	r3,r5,r5
 80079ac:	18c7883a 	add	r3,r3,r3
 80079b0:	10c7883a 	add	r3,r2,r3
 80079b4:	1cc00015 	stw	r19,0(r3)
 80079b8:	2148983a 	sll	r4,r4,r5
 80079bc:	11404017 	ldw	r5,256(r2)
 80079c0:	290ab03a 	or	r5,r5,r4
 80079c4:	11404015 	stw	r5,256(r2)
 80079c8:	1c802015 	stw	r18,128(r3)
 80079cc:	00c00084 	movi	r3,2
 80079d0:	a8c0031e 	bne	r21,r3,80079e0 <__register_exitproc+0x110>
 80079d4:	10c04117 	ldw	r3,260(r2)
 80079d8:	1908b03a 	or	r4,r3,r4
 80079dc:	11004115 	stw	r4,260(r2)
 80079e0:	80800117 	ldw	r2,4(r16)
 80079e4:	10c00044 	addi	r3,r2,1
 80079e8:	10800084 	addi	r2,r2,2
 80079ec:	1085883a 	add	r2,r2,r2
 80079f0:	1085883a 	add	r2,r2,r2
 80079f4:	80c00115 	stw	r3,4(r16)
 80079f8:	80a1883a 	add	r16,r16,r2
 80079fc:	84400015 	stw	r17,0(r16)
 8007a00:	0005883a 	mov	r2,zero
 8007a04:	dfc00617 	ldw	ra,24(sp)
 8007a08:	dd400517 	ldw	r21,20(sp)
 8007a0c:	dd000417 	ldw	r20,16(sp)
 8007a10:	dcc00317 	ldw	r19,12(sp)
 8007a14:	dc800217 	ldw	r18,8(sp)
 8007a18:	dc400117 	ldw	r17,4(sp)
 8007a1c:	dc000017 	ldw	r16,0(sp)
 8007a20:	dec00704 	addi	sp,sp,28
 8007a24:	f800283a 	ret

08007a28 <__call_exitprocs>:
 8007a28:	defff504 	addi	sp,sp,-44
 8007a2c:	dd000515 	stw	r20,20(sp)
 8007a30:	05000034 	movhi	r20,0
 8007a34:	dc800315 	stw	r18,12(sp)
 8007a38:	dfc00a15 	stw	ra,40(sp)
 8007a3c:	df000915 	stw	fp,36(sp)
 8007a40:	ddc00815 	stw	r23,32(sp)
 8007a44:	dd800715 	stw	r22,28(sp)
 8007a48:	dd400615 	stw	r21,24(sp)
 8007a4c:	dcc00415 	stw	r19,16(sp)
 8007a50:	dc400215 	stw	r17,8(sp)
 8007a54:	dc000115 	stw	r16,4(sp)
 8007a58:	d9000015 	stw	r4,0(sp)
 8007a5c:	2825883a 	mov	r18,r5
 8007a60:	a5052f04 	addi	r20,r20,5308
 8007a64:	a4400017 	ldw	r17,0(r20)
 8007a68:	8cc00c17 	ldw	r19,48(r17)
 8007a6c:	8c400c04 	addi	r17,r17,48
 8007a70:	98004526 	beq	r19,zero,8007b88 <__call_exitprocs+0x160>
 8007a74:	9c000117 	ldw	r16,4(r19)
 8007a78:	00900034 	movhi	r2,16384
 8007a7c:	10bfffc4 	addi	r2,r2,-1
 8007a80:	9d402217 	ldw	r21,136(r19)
 8007a84:	85bfffc4 	addi	r22,r16,-1
 8007a88:	80a1883a 	add	r16,r16,r2
 8007a8c:	8421883a 	add	r16,r16,r16
 8007a90:	8421883a 	add	r16,r16,r16
 8007a94:	ac2f883a 	add	r23,r21,r16
 8007a98:	84000204 	addi	r16,r16,8
 8007a9c:	9c21883a 	add	r16,r19,r16
 8007aa0:	b0002716 	blt	r22,zero,8007b40 <__call_exitprocs+0x118>
 8007aa4:	90000726 	beq	r18,zero,8007ac4 <__call_exitprocs+0x9c>
 8007aa8:	a800041e 	bne	r21,zero,8007abc <__call_exitprocs+0x94>
 8007aac:	b5bfffc4 	addi	r22,r22,-1
 8007ab0:	bdffff04 	addi	r23,r23,-4
 8007ab4:	843fff04 	addi	r16,r16,-4
 8007ab8:	003ff906 	br	8007aa0 <__flash_rwdata_start+0xfffffdcc>
 8007abc:	b9002017 	ldw	r4,128(r23)
 8007ac0:	913ffa1e 	bne	r18,r4,8007aac <__flash_rwdata_start+0xfffffdd8>
 8007ac4:	99000117 	ldw	r4,4(r19)
 8007ac8:	82000017 	ldw	r8,0(r16)
 8007acc:	213fffc4 	addi	r4,r4,-1
 8007ad0:	b100021e 	bne	r22,r4,8007adc <__call_exitprocs+0xb4>
 8007ad4:	9d800115 	stw	r22,4(r19)
 8007ad8:	00000106 	br	8007ae0 <__call_exitprocs+0xb8>
 8007adc:	80000015 	stw	zero,0(r16)
 8007ae0:	403ff226 	beq	r8,zero,8007aac <__flash_rwdata_start+0xfffffdd8>
 8007ae4:	9f000117 	ldw	fp,4(r19)
 8007ae8:	a8000526 	beq	r21,zero,8007b00 <__call_exitprocs+0xd8>
 8007aec:	00800044 	movi	r2,1
 8007af0:	1592983a 	sll	r9,r2,r22
 8007af4:	a9404017 	ldw	r5,256(r21)
 8007af8:	494a703a 	and	r5,r9,r5
 8007afc:	2800021e 	bne	r5,zero,8007b08 <__call_exitprocs+0xe0>
 8007b00:	403ee83a 	callr	r8
 8007b04:	00000906 	br	8007b2c <__call_exitprocs+0x104>
 8007b08:	a9004117 	ldw	r4,260(r21)
 8007b0c:	4908703a 	and	r4,r9,r4
 8007b10:	2000041e 	bne	r4,zero,8007b24 <__call_exitprocs+0xfc>
 8007b14:	b9400017 	ldw	r5,0(r23)
 8007b18:	d9000017 	ldw	r4,0(sp)
 8007b1c:	403ee83a 	callr	r8
 8007b20:	00000206 	br	8007b2c <__call_exitprocs+0x104>
 8007b24:	b9000017 	ldw	r4,0(r23)
 8007b28:	403ee83a 	callr	r8
 8007b2c:	99000117 	ldw	r4,4(r19)
 8007b30:	e13fcc1e 	bne	fp,r4,8007a64 <__flash_rwdata_start+0xfffffd90>
 8007b34:	89000017 	ldw	r4,0(r17)
 8007b38:	993fdc26 	beq	r19,r4,8007aac <__flash_rwdata_start+0xfffffdd8>
 8007b3c:	003fc906 	br	8007a64 <__flash_rwdata_start+0xfffffd90>
 8007b40:	00800034 	movhi	r2,0
 8007b44:	10800004 	addi	r2,r2,0
 8007b48:	10000f26 	beq	r2,zero,8007b88 <__call_exitprocs+0x160>
 8007b4c:	99400117 	ldw	r5,4(r19)
 8007b50:	99000017 	ldw	r4,0(r19)
 8007b54:	2800091e 	bne	r5,zero,8007b7c <__call_exitprocs+0x154>
 8007b58:	20000826 	beq	r4,zero,8007b7c <__call_exitprocs+0x154>
 8007b5c:	89000015 	stw	r4,0(r17)
 8007b60:	a8000226 	beq	r21,zero,8007b6c <__call_exitprocs+0x144>
 8007b64:	a809883a 	mov	r4,r21
 8007b68:	00000000 	call	0 <__alt_mem_sdram_controller_2>
 8007b6c:	9809883a 	mov	r4,r19
 8007b70:	00000000 	call	0 <__alt_mem_sdram_controller_2>
 8007b74:	8cc00017 	ldw	r19,0(r17)
 8007b78:	003fbd06 	br	8007a70 <__flash_rwdata_start+0xfffffd9c>
 8007b7c:	9823883a 	mov	r17,r19
 8007b80:	2027883a 	mov	r19,r4
 8007b84:	003fba06 	br	8007a70 <__flash_rwdata_start+0xfffffd9c>
 8007b88:	dfc00a17 	ldw	ra,40(sp)
 8007b8c:	df000917 	ldw	fp,36(sp)
 8007b90:	ddc00817 	ldw	r23,32(sp)
 8007b94:	dd800717 	ldw	r22,28(sp)
 8007b98:	dd400617 	ldw	r21,24(sp)
 8007b9c:	dd000517 	ldw	r20,20(sp)
 8007ba0:	dcc00417 	ldw	r19,16(sp)
 8007ba4:	dc800317 	ldw	r18,12(sp)
 8007ba8:	dc400217 	ldw	r17,8(sp)
 8007bac:	dc000117 	ldw	r16,4(sp)
 8007bb0:	dec00b04 	addi	sp,sp,44
 8007bb4:	f800283a 	ret

08007bb8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 8007bb8:	defffd04 	addi	sp,sp,-12
 8007bbc:	df000215 	stw	fp,8(sp)
 8007bc0:	df000204 	addi	fp,sp,8
 8007bc4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 8007bc8:	0001883a 	nop
 8007bcc:	e0bfff17 	ldw	r2,-4(fp)
 8007bd0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 8007bd4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8007bd8:	10000226 	beq	r2,zero,8007be4 <_exit+0x2c>
    ALT_SIM_FAIL();
 8007bdc:	002af070 	cmpltui	zero,zero,43969
 8007be0:	00000106 	br	8007be8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 8007be4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 8007be8:	003fff06 	br	8007be8 <__flash_rwdata_start+0xffffff14>

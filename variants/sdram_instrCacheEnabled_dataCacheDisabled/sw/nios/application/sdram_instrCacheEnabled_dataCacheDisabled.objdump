
sdram_instrCacheEnabled_dataCacheDisabled.elf:     file format elf32-littlenios2
sdram_instrCacheEnabled_dataCacheDisabled.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000234

Program Header:
    LOAD off    0x00001020 vaddr 0x04020020 paddr 0x00000000 align 2**12
         filesz 0x00000234 memsz 0x00000234 flags r-x
    LOAD off    0x00002234 vaddr 0x00000234 paddr 0x00000234 align 2**12
         filesz 0x000101c8 memsz 0x000101c8 flags r-x
    LOAD off    0x000123fc vaddr 0x000103fc paddr 0x00011ee8 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x000149d4 vaddr 0x000139d4 paddr 0x000139d4 align 2**12
         filesz 0x00000000 memsz 0x0000016c flags rw-
    LOAD off    0x00014000 vaddr 0x04020000 paddr 0x04020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04020000  04020000  00014000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000234  04020020  00000000  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000fc78  00000234  00000234  00002234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000550  0000feac  0000feac  00011eac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  000103fc  00011ee8  000123fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000016c  000139d4  000139d4  000149d4  2**2
                  ALLOC, SMALL_DATA
  6 .new_sdram_controller_0 00000000  00013b40  00013b40  00014020  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  04020254  04020254  00014020  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00014020  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000ef8  00000000  00000000  00014048  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000240f1  00000000  00000000  00014f40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00009282  00000000  00000000  00039031  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b6cf  00000000  00000000  000422b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000022d8  00000000  00000000  0004d984  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003951  00000000  00000000  0004fc5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00017975  00000000  00000000  000535ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000020  00000000  00000000  0006af24  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000018d8  00000000  00000000  0006af48  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0006fb9a  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0006fb9d  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0006fba9  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0006fbaa  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  0006fbab  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  0006fbb6  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  0006fbc1  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000a  00000000  00000000  0006fbcc  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000045  00000000  00000000  0006fbd6  2**0
                  CONTENTS, READONLY
 27 .jdi          0000597d  00000000  00000000  0006fc1b  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00066a16  00000000  00000000  00075598  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04020000 l    d  .entry	00000000 .entry
04020020 l    d  .exceptions	00000000 .exceptions
00000234 l    d  .text	00000000 .text
0000feac l    d  .rodata	00000000 .rodata
000103fc l    d  .rwdata	00000000 .rwdata
000139d4 l    d  .bss	00000000 .bss
00013b40 l    d  .new_sdram_controller_0	00000000 .new_sdram_controller_0
04020254 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/RTES/variants/sdram_instrCacheEnabled_dataCacheDisabled/sw/nios/sdram_instrCacheEnabled_dataCacheDisabled_bsp//obj/HAL/src/crt0.o
0000026c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
00010142 l     O .rodata	00000010 zeroes.4404
00002f40 l     F .text	000000bc __sbprintf
00010152 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00003150 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00004c80 l     F .text	00000008 __fp_unlock
00004c94 l     F .text	0000019c __sinit.part.1
00004e30 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
000103fc l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
00010840 l     O .rwdata	00000020 lc_ctype_charset
00010820 l     O .rwdata	00000020 lc_message_charset
00010860 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00010184 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00007748 l     F .text	000000fc __sprint_r.part.0
000102b8 l     O .rodata	00000010 blanks.4348
000102a8 l     O .rodata	00000010 zeroes.4349
00008cd4 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000d358 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000d464 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000d490 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0000d81c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000d8fc l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000d9e8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
0000de24 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00011edc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000e070 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000e1a4 l     F .text	00000034 alt_dev_reg
00010e48 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000e494 l     F .text	0000020c altera_avalon_jtag_uart_irq
0000e6a0 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000ecd8 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000ef18 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000f188 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0000f2c8 l     F .text	0000003c alt_get_errno
0000f304 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00013a0c g     O .bss	00000004 alt_instruction_exception_handler
00000a10 g     F .text	00000034 latency_isr_parport
00007258 g     F .text	00000074 _mprec_log10
00007344 g     F .text	0000008c __any_on
0000972c g     F .text	00000054 _isatty_r
00010190 g     O .rodata	00000028 __mprec_tinytens
0000daf8 g     F .text	0000007c alt_main
00013a40 g     O .bss	00000100 alt_irq
00009780 g     F .text	00000060 _lseek_r
00011ee8 g       *ABS*	00000000 __flash_rwdata_start
0000be84 g     F .text	00000088 .hidden __eqdf2
00013b40 g       *ABS*	00000000 __alt_heap_start
00000cf0 g     F .text	0000003c printf
0000a058 g     F .text	0000009c _wcrtomb_r
00007570 g     F .text	0000005c __sseek
00004fd0 g     F .text	00000010 __sinit
00009f00 g     F .text	00000140 __swbuf_r
000055dc g     F .text	0000007c _setlocale_r
00004e38 g     F .text	00000068 __sfmoreglue
0000db98 g     F .text	00000024 __malloc_unlock
000097e0 g     F .text	0000015c memmove
00000270 g     F .text	00000058 test_parallel_port
00004fb8 g     F .text	00000018 _cleanup
000063d4 g     F .text	000000a8 _Balloc
000139d4 g     O .bss	00000004 snaph
0000bf0c g     F .text	000000dc .hidden __gtdf2
0000f6c0 g     F .text	00000024 altera_nios2_gen2_irq_init
04020000 g     F .entry	0000001c __reset
00000000 g       *ABS*	00000000 __flash_exceptions_start
00009214 g     F .text	0000005c _fstat_r
000139f8 g     O .bss	00000004 errno
000074ec g     F .text	00000008 __seofread
00013a04 g     O .bss	00000004 alt_argv
00019ea8 g       *ABS*	00000000 _gp
00010cc8 g     O .rwdata	00000180 alt_fd_list
0000f6e4 g     F .text	00000090 alt_find_dev
00006164 g     F .text	00000148 memcpy
00004c88 g     F .text	0000000c _cleanup_r
0000d170 g     F .text	000000dc .hidden __floatsidf
0000f24c g     F .text	0000007c alt_io_redirect
0000bfe8 g     F .text	000000f4 .hidden __ltdf2
0000feac g       *ABS*	00000000 __DTOR_END__
0000f0ec g     F .text	0000009c alt_exception_cause_generated_bad_addr
000073d0 g     F .text	00000074 __fpclassifyd
000071b4 g     F .text	000000a4 __ratio
00008cb8 g     F .text	0000001c __vfiprintf_internal
0000e898 g     F .text	0000021c altera_avalon_jtag_uart_read
00000cc0 g     F .text	00000030 _printf_r
04020000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00000c04 g     F .text	00000064 .hidden __udivsi3
0000d858 g     F .text	000000a4 isatty
000101e0 g     O .rodata	000000c8 __mprec_tens
00005658 g     F .text	0000000c __locale_charset
0000f920 g     F .text	00000090 alt_icache_flush
000139f4 g     O .bss	00000004 __malloc_top_pad
000139d8 g     O .bss	00000004 flag
00011eb0 g     O .rwdata	00000004 __mb_cur_max
00005688 g     F .text	0000000c _localeconv_r
00009270 g     F .text	000004bc __sfvwrite_r
000067e0 g     F .text	0000003c __i2b
00007444 g     F .text	00000054 _sbrk_r
0000993c g     F .text	00000060 _read_r
00011ed0 g     O .rwdata	00000004 alt_max_fd
00008f08 g     F .text	000000f0 _fclose_r
00004c50 g     F .text	00000030 fflush
000139f0 g     O .bss	00000004 __malloc_max_sbrked_mem
0000acf0 g     F .text	000008ac .hidden __adddf3
00006f5c g     F .text	0000010c __b2d
0000a7b8 g     F .text	00000538 .hidden __umoddi3
0000da24 g     F .text	000000d4 lseek
00011ea8 g     O .rwdata	00000004 _global_impure_ptr
0000999c g     F .text	00000564 _realloc_r
00013b40 g       *ABS*	00000000 __bss_end
0000d72c g     F .text	000000f0 alt_iic_isr_register
0000f5b8 g     F .text	00000108 alt_tick
0000a240 g     F .text	00000578 .hidden __udivdi3
00009170 g     F .text	00000024 _fputwc_r
000101b8 g     O .rodata	00000028 __mprec_bigtens
000065c4 g     F .text	00000104 __s2b
0000d24c g     F .text	000000a8 .hidden __floatunsidf
00006c9c g     F .text	00000060 __mcmp
00004ff0 g     F .text	00000018 __fp_lock_all
0000d6e0 g     F .text	0000004c alt_ic_irq_enabled
0000f51c g     F .text	0000009c alt_alarm_stop
00000964 g     F .text	000000ac test_recovtime_parport
000139fc g     O .bss	00000004 alt_irq_active
040200fc g     F .exceptions	000000e4 alt_irq_handler
00010ca0 g     O .rwdata	00000028 alt_dev_null
0000eef8 g     F .text	00000020 alt_dcache_flush_all
000066c8 g     F .text	00000068 __hi0bits
0000d0f0 g     F .text	00000080 .hidden __fixdfsi
00011ee8 g       *ABS*	00000000 __ram_rwdata_end
00011ec8 g     O .rwdata	00000008 alt_dev_list
0000e0ac g     F .text	000000f8 write
0000fa78 g     F .text	000000a0 _putc_r
000103fc g       *ABS*	00000000 __ram_rodata_end
0000d4cc g     F .text	000000b0 fstat
0000bfe8 g     F .text	000000f4 .hidden __ledf2
00006a14 g     F .text	00000140 __pow5mult
0000785c g     F .text	0000145c ___vfiprintf_internal_r
000139e8 g     O .bss	00000004 __nlocale_changed
00000c68 g     F .text	00000058 .hidden __umodsi3
00013b40 g       *ABS*	00000000 end
0000e3d4 g     F .text	000000c0 altera_avalon_jtag_uart_init
040201e0 g     F .exceptions	00000074 alt_instruction_exception_entry
0000feac g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
0000ed50 g     F .text	0000007c alt_avalon_timer_sc_init
0000d2f4 g     F .text	00000064 .hidden __clzsi2
0000eab4 g     F .text	00000224 altera_avalon_jtag_uart_write
000007d8 g     F .text	0000018c test_recovtime_print
00004fe0 g     F .text	00000004 __sfp_lock_acquire
00006080 g     F .text	000000e4 memchr
00000d2c g     F .text	000021f8 ___vfprintf_internal_r
00005144 g     F .text	00000310 _free_r
0000dbbc g     F .text	0000022c alt_printf
00005664 g     F .text	00000010 __locale_mb_cur_max
0000fcf8 g     F .text	00000180 __call_exitprocs
000139e4 g     O .bss	00000004 __mlocale_changed
00011eb4 g     O .rwdata	00000004 __malloc_sbrk_base
00000234 g     F .text	0000003c _start
00013a10 g     O .bss	00000004 _alt_tick_rate
000004f8 g     F .text	00000044 resp_isr_parport
00006b54 g     F .text	00000148 __lshift
00013a14 g     O .bss	00000004 _alt_nticks
0000de60 g     F .text	000000fc read
0000e210 g     F .text	00000060 alt_sys_init
0000fbe0 g     F .text	00000118 __register_exitproc
00000a44 g     F .text	0000009c test_latency_parport
0000681c g     F .text	000001f8 __multiply
0000e740 g     F .text	00000068 altera_avalon_jtag_uart_close
000103fc g       *ABS*	00000000 __ram_rwdata_start
0000feac g       *ABS*	00000000 __ram_rodata_start
00013a18 g     O .bss	00000028 __malloc_current_mallinfo
00007068 g     F .text	0000014c __d2b
0000e270 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000f87c g     F .text	000000a4 alt_get_fd
00008df0 g     F .text	00000054 _close_r
0000f9fc g     F .text	0000007c memcmp
0000e330 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00013b40 g       *ABS*	00000000 __alt_stack_base
0000e380 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00002ffc g     F .text	00000154 __swsetup_r
0000b59c g     F .text	000008e8 .hidden __divdf3
00004ea0 g     F .text	00000118 __sfp
000072cc g     F .text	00000078 __copybits
00010898 g     O .rwdata	00000408 __malloc_av_
00004fec g     F .text	00000004 __sinit_lock_release
0000c0dc g     F .text	00000718 .hidden __muldf3
00007498 g     F .text	00000054 __sread
0000f774 g     F .text	00000108 alt_find_file
0000ef54 g     F .text	000000a4 alt_dev_llist_insert
0000db74 g     F .text	00000024 __malloc_lock
0000dfc0 g     F .text	000000b0 sbrk
00004bf4 g     F .text	0000005c _fflush_r
00008e44 g     F .text	000000c4 _calloc_r
000139d4 g       *ABS*	00000000 __bss_start
000062ac g     F .text	00000128 memset
00000ae0 g     F .text	0000002c main
00013a08 g     O .bss	00000004 alt_envp
000002c8 g     F .text	000001a4 test_counter
000139ec g     O .bss	00000004 __malloc_max_total_mem
0000e2d0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000a040 g     F .text	00000018 __swbuf
000139dc g     O .bss	00000004 snapl
000075cc g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
00008ff8 g     F .text	00000014 fclose
00003350 g     F .text	00001688 _dtoa_r
00005874 g     F .text	0000080c _malloc_r
0000a1b4 g     F .text	00000030 __ascii_wctomb
00011ed4 g     O .rwdata	00000004 alt_errno
00005454 g     F .text	000000c4 _fwalk
0000fb18 g     F .text	000000c8 putc
00000b0c g     F .text	00000084 .hidden __divsi3
00005020 g     F .text	00000124 _malloc_trim_r
0000feac g       *ABS*	00000000 __CTOR_END__
000075d4 g     F .text	000000dc strcmp
0000feac g       *ABS*	00000000 __flash_rodata_start
0000feac g       *ABS*	00000000 __DTOR_LIST__
0000be84 g     F .text	00000088 .hidden __nedf2
0000e1d8 g     F .text	00000038 alt_irq_init
0000df5c g     F .text	00000064 alt_release_fd
000102c8 g     O .rodata	00000100 .hidden __clz_tab
000139e0 g     O .bss	00000004 _PathLocale
0000f9b0 g     F .text	00000014 atexit
00008d90 g     F .text	00000060 _write_r
00005694 g     F .text	00000018 setlocale
00011eac g     O .rwdata	00000004 _impure_ptr
00013a00 g     O .bss	00000004 alt_argc
000049d8 g     F .text	0000021c __sflush_r
0000f058 g     F .text	00000060 _do_dtors
00005680 g     F .text	00000008 __locale_cjk_lang
0000053c g     F .text	00000158 test_resptime_print
04020020 g       .exceptions	00000000 alt_irq_entry
00006ef8 g     F .text	00000064 __ulp
00005008 g     F .text	00000018 __fp_unlock_all
00000694 g     F .text	0000009c test_resptime_parport
00011ec0 g     O .rwdata	00000008 alt_fs_list
04020020 g       *ABS*	00000000 __ram_exceptions_start
000056ac g     F .text	0000000c localeconv
00000000 g       *ABS*	00000000 __alt_mem_new_sdram_controller_0
0000d57c g     F .text	00000050 alt_ic_isr_register
00011ee8 g       *ABS*	00000000 _edata
00013b40 g       *ABS*	00000000 _end
0000900c g     F .text	00000164 __fputwc
04020254 g       *ABS*	00000000 __ram_exceptions_end
0000e7a8 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0000d654 g     F .text	0000008c alt_ic_irq_disable
000074f4 g     F .text	0000007c __swrite
00011eb8 g     O .rwdata	00000004 __malloc_trim_threshold
00005674 g     F .text	0000000c __locale_msgcharset
00000784 g     F .text	00000054 recov_isr_parport
0000f9c4 g     F .text	00000038 exit
00005518 g     F .text	000000c4 _fwalk_reent
00006cfc g     F .text	000001fc __mdiff
00000b90 g     F .text	00000074 .hidden __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
04020020 g     F .exceptions	00000000 alt_exception
00004fe4 g     F .text	00000004 __sfp_lock_release
0000fe78 g     F .text	00000034 _exit
0000edcc g     F .text	0000012c alt_alarm_start
000056b8 g     F .text	000001bc __smakebuf_r
000076b0 g     F .text	00000098 strlen
0000046c g     F .text	0000008c resp_isr_print
0000f3c8 g     F .text	00000154 open
00000730 g     F .text	00000054 recov_isr_print
0000bf0c g     F .text	000000dc .hidden __gedf2
0000dde8 g     F .text	0000003c alt_putchar
00011ebc g     O .rwdata	00000004 __wctomb
00007844 g     F .text	00000018 __sprint_r
0000f0b8 g     F .text	00000034 alt_icache_flush_all
00011ed8 g     O .rwdata	00000004 alt_priority_mask
0000d5cc g     F .text	00000088 alt_ic_irq_enable
00002f24 g     F .text	0000001c __vfprintf_internal
0000a1e4 g     F .text	0000005c _wctomb_r
0000c7f4 g     F .text	000008fc .hidden __subdf3
00006730 g     F .text	000000b0 __lo0bits
00011ee0 g     O .rwdata	00000008 alt_alarm_list
0000eff8 g     F .text	00000060 _do_ctors
0000a0f4 g     F .text	000000c0 wcrtomb
0000d394 g     F .text	000000d0 close
0000d964 g     F .text	00000084 alt_load
00009194 g     F .text	00000080 fputwc
00004fe8 g     F .text	00000004 __sinit_lock_acquire
000064a4 g     F .text	00000120 __multadd
0000647c g     F .text	00000028 _Bfree



Disassembly of section .entry:

04020000 <__reset>:
 */

#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
 4020000:	00800074 	movhi	r2,1
#else
    movui r2, NIOS2_ICACHE_SIZE
#endif

0:
    initi r2
 4020004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 4020008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 402000c:	00bffd16 	blt	zero,r2,4020004 <__ram_exceptions_end+0xfffffdb0>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4020010:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
 4020014:	08408d14 	ori	at,at,564
    jmp r1
 4020018:	0800683a 	jmp	at
 402001c:	00000000 	call	0 <__alt_mem_new_sdram_controller_0>

Disassembly of section .exceptions:

04020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4020020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4020024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4020028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 402002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4020030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4020034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4020038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 402003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4020040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4020044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4020048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 402004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4020050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4020054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4020058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 402005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4020060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4020064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4020068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 402006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4020070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4020074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4020078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 402007c:	10000326 	beq	r2,zero,402008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4020080:	20000226 	beq	r4,zero,402008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4020084:	40200fc0 	call	40200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4020088:	00000706 	br	40200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 402008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4020090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4020094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4020098:	40201e00 	call	40201e0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 402009c:	1000021e 	bne	r2,zero,40200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40200f8:	ef80083a 	eret

040200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40200fc:	defff904 	addi	sp,sp,-28
 4020100:	dfc00615 	stw	ra,24(sp)
 4020104:	df000515 	stw	fp,20(sp)
 4020108:	df000504 	addi	fp,sp,20
IOWR_32DIRECT(PARALLELPORT_0_BASE, 0, 0x0);
 402010c:	0007883a 	mov	r3,zero
 4020110:	00810134 	movhi	r2,1028
 4020114:	10841004 	addi	r2,r2,4160
 4020118:	10c00035 	stwio	r3,0(r2)
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 402011c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4020120:	0005313a 	rdctl	r2,ipending
 4020124:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4020128:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 402012c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4020130:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4020134:	00800044 	movi	r2,1
 4020138:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 402013c:	e0fffb17 	ldw	r3,-20(fp)
 4020140:	e0bffc17 	ldw	r2,-16(fp)
 4020144:	1884703a 	and	r2,r3,r2
 4020148:	10001426 	beq	r2,zero,402019c <alt_irq_handler+0xa0>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 402014c:	00800074 	movhi	r2,1
 4020150:	108e9004 	addi	r2,r2,14912
 4020154:	e0fffd17 	ldw	r3,-12(fp)
 4020158:	180690fa 	slli	r3,r3,3
 402015c:	10c5883a 	add	r2,r2,r3
 4020160:	10c00017 	ldw	r3,0(r2)
 4020164:	00800074 	movhi	r2,1
 4020168:	108e9004 	addi	r2,r2,14912
 402016c:	e13ffd17 	ldw	r4,-12(fp)
 4020170:	200890fa 	slli	r4,r4,3
 4020174:	1105883a 	add	r2,r2,r4
 4020178:	10800104 	addi	r2,r2,4
 402017c:	10800017 	ldw	r2,0(r2)
 4020180:	1009883a 	mov	r4,r2
 4020184:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4020188:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 402018c:	0005313a 	rdctl	r2,ipending
 4020190:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4020194:	e0bfff17 	ldw	r2,-4(fp)
 4020198:	00000706 	br	40201b8 <alt_irq_handler+0xbc>
      }
      mask <<= 1;
 402019c:	e0bffc17 	ldw	r2,-16(fp)
 40201a0:	1085883a 	add	r2,r2,r2
 40201a4:	e0bffc15 	stw	r2,-16(fp)
      i++;
 40201a8:	e0bffd17 	ldw	r2,-12(fp)
 40201ac:	10800044 	addi	r2,r2,1
 40201b0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40201b4:	003fe106 	br	402013c <__ram_exceptions_end+0xfffffee8>

    active = alt_irq_pending ();
 40201b8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 40201bc:	e0bffb17 	ldw	r2,-20(fp)
 40201c0:	103fdb1e 	bne	r2,zero,4020130 <__ram_exceptions_end+0xfffffedc>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40201c4:	0001883a 	nop
}
 40201c8:	0001883a 	nop
 40201cc:	e037883a 	mov	sp,fp
 40201d0:	dfc00117 	ldw	ra,4(sp)
 40201d4:	df000017 	ldw	fp,0(sp)
 40201d8:	dec00204 	addi	sp,sp,8
 40201dc:	f800283a 	ret

040201e0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 40201e0:	defffb04 	addi	sp,sp,-20
 40201e4:	dfc00415 	stw	ra,16(sp)
 40201e8:	df000315 	stw	fp,12(sp)
 40201ec:	df000304 	addi	fp,sp,12
 40201f0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 40201f4:	000531fa 	rdctl	r2,exception
 40201f8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 40201fc:	e0bffd17 	ldw	r2,-12(fp)
 4020200:	10801f0c 	andi	r2,r2,124
 4020204:	1004d0ba 	srli	r2,r2,2
 4020208:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 402020c:	0005333a 	rdctl	r2,badaddr
 4020210:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 4020214:	d0a6d917 	ldw	r2,-25756(gp)
 4020218:	10000726 	beq	r2,zero,4020238 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 402021c:	d0a6d917 	ldw	r2,-25756(gp)
 4020220:	e0fffd17 	ldw	r3,-12(fp)
 4020224:	e1bffe17 	ldw	r6,-8(fp)
 4020228:	e17fff17 	ldw	r5,-4(fp)
 402022c:	1809883a 	mov	r4,r3
 4020230:	103ee83a 	callr	r2
 4020234:	00000206 	br	4020240 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4020238:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 402023c:	0005883a 	mov	r2,zero
}
 4020240:	e037883a 	mov	sp,fp
 4020244:	dfc00117 	ldw	ra,4(sp)
 4020248:	df000017 	ldw	fp,0(sp)
 402024c:	dec00204 	addi	sp,sp,8
 4020250:	f800283a 	ret

Disassembly of section .text:

00000234 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     234:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     238:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     23c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     240:	d6a7aa14 	ori	gp,gp,40616
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     244:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     248:	108e7514 	ori	r2,r2,14804

    movhi r3, %hi(__bss_end)
     24c:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     250:	18ced014 	ori	r3,r3,15168

    beq r2, r3, 1f
     254:	10c00326 	beq	r2,r3,264 <_start+0x30>

0:
    stw zero, (r2)
     258:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     25c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     260:	10fffd36 	bltu	r2,r3,258 <__ram_exceptions_end+0xfbfe0004>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     264:	000d9640 	call	d964 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     268:	000daf80 	call	daf8 <alt_main>

0000026c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     26c:	003fff06 	br	26c <__ram_exceptions_end+0xfbfe0018>

00000270 <test_parallel_port>:
int snapl;
int snaph;
int flag;

void test_parallel_port()
{
     270:	defffe04 	addi	sp,sp,-8
     274:	dfc00115 	stw	ra,4(sp)
     278:	df000015 	stw	fp,0(sp)
     27c:	d839883a 	mov	fp,sp
	IOWR_32DIRECT(PARALLELPORT_0_BASE, 0, 0x1234abcd);
     280:	00c48d74 	movhi	r3,4661
     284:	18eaf344 	addi	r3,r3,-21555
     288:	00810134 	movhi	r2,1028
     28c:	10841004 	addi	r2,r2,4160
     290:	10c00035 	stwio	r3,0(r2)
	alt_printf("ParallelPort0=%x\n", IORD_32DIRECT(PARALLELPORT_0_BASE, 0));
     294:	00810134 	movhi	r2,1028
     298:	10841004 	addi	r2,r2,4160
     29c:	10800037 	ldwio	r2,0(r2)
     2a0:	100b883a 	mov	r5,r2
     2a4:	01000074 	movhi	r4,1
     2a8:	213fab04 	addi	r4,r4,-340
     2ac:	000dbbc0 	call	dbbc <alt_printf>
}
     2b0:	0001883a 	nop
     2b4:	e037883a 	mov	sp,fp
     2b8:	dfc00117 	ldw	ra,4(sp)
     2bc:	df000017 	ldw	fp,0(sp)
     2c0:	dec00204 	addi	sp,sp,8
     2c4:	f800283a 	ret

000002c8 <test_counter>:

void test_counter()
{
     2c8:	defffe04 	addi	sp,sp,-8
     2cc:	dfc00115 	stw	ra,4(sp)
     2d0:	df000015 	stw	fp,0(sp)
     2d4:	d839883a 	mov	fp,sp
	IOWR_32DIRECT(COUNTER_0_BASE, COUNT_Target, Count_1sec);
     2d8:	00c0bef4 	movhi	r3,763
     2dc:	18fc2004 	addi	r3,r3,-3968
     2e0:	00810134 	movhi	r2,1028
     2e4:	10840e04 	addi	r2,r2,4152
     2e8:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(COUNTER_0_BASE, COUNT_RZ, arbval);
     2ec:	00ffffd4 	movui	r3,65535
     2f0:	00810134 	movhi	r2,1028
     2f4:	10840904 	addi	r2,r2,4132
     2f8:	10c00035 	stwio	r3,0(r2)
	alt_printf("iCounter after reset=%x\n", IORD_32DIRECT(COUNTER_0_BASE,0));
     2fc:	00810134 	movhi	r2,1028
     300:	10840804 	addi	r2,r2,4128
     304:	10800037 	ldwio	r2,0(r2)
     308:	100b883a 	mov	r5,r2
     30c:	01000074 	movhi	r4,1
     310:	213fb004 	addi	r4,r4,-320
     314:	000dbbc0 	call	dbbc <alt_printf>
	alt_printf("iEn and iEOT=%x\n", IORD_32DIRECT(COUNTER_0_BASE, 20));
     318:	00810134 	movhi	r2,1028
     31c:	10840d04 	addi	r2,r2,4148
     320:	10800037 	ldwio	r2,0(r2)
     324:	100b883a 	mov	r5,r2
     328:	01000074 	movhi	r4,1
     32c:	213fb704 	addi	r4,r4,-292
     330:	000dbbc0 	call	dbbc <alt_printf>
	IOWR_32DIRECT(COUNTER_0_BASE, COUNT_Start, arbval);
     334:	00ffffd4 	movui	r3,65535
     338:	00810134 	movhi	r2,1028
     33c:	10840a04 	addi	r2,r2,4136
     340:	10c00035 	stwio	r3,0(r2)
	alt_printf("iCounter while running=%x\n", IORD_32DIRECT(COUNTER_0_BASE,0));
     344:	00810134 	movhi	r2,1028
     348:	10840804 	addi	r2,r2,4128
     34c:	10800037 	ldwio	r2,0(r2)
     350:	100b883a 	mov	r5,r2
     354:	01000074 	movhi	r4,1
     358:	213fbc04 	addi	r4,r4,-272
     35c:	000dbbc0 	call	dbbc <alt_printf>
	alt_printf("iEn and iEOT=%x\n", IORD_32DIRECT(COUNTER_0_BASE, 20));
     360:	00810134 	movhi	r2,1028
     364:	10840d04 	addi	r2,r2,4148
     368:	10800037 	ldwio	r2,0(r2)
     36c:	100b883a 	mov	r5,r2
     370:	01000074 	movhi	r4,1
     374:	213fb704 	addi	r4,r4,-292
     378:	000dbbc0 	call	dbbc <alt_printf>
	IOWR_32DIRECT(COUNTER_0_BASE, COUNT_Stop, arbval);
     37c:	00ffffd4 	movui	r3,65535
     380:	00810134 	movhi	r2,1028
     384:	10840b04 	addi	r2,r2,4140
     388:	10c00035 	stwio	r3,0(r2)
	alt_printf("iCounter, first read after stop=%x\n", IORD_32DIRECT(COUNTER_0_BASE,0));
     38c:	00810134 	movhi	r2,1028
     390:	10840804 	addi	r2,r2,4128
     394:	10800037 	ldwio	r2,0(r2)
     398:	100b883a 	mov	r5,r2
     39c:	01000074 	movhi	r4,1
     3a0:	213fc304 	addi	r4,r4,-244
     3a4:	000dbbc0 	call	dbbc <alt_printf>
	alt_printf("iCounter, second read after stop=%x\n", IORD_32DIRECT(COUNTER_0_BASE,0));
     3a8:	00810134 	movhi	r2,1028
     3ac:	10840804 	addi	r2,r2,4128
     3b0:	10800037 	ldwio	r2,0(r2)
     3b4:	100b883a 	mov	r5,r2
     3b8:	01000074 	movhi	r4,1
     3bc:	213fcc04 	addi	r4,r4,-208
     3c0:	000dbbc0 	call	dbbc <alt_printf>
	alt_printf("iEn and iEOT=%x\n", IORD_32DIRECT(COUNTER_0_BASE, 20));
     3c4:	00810134 	movhi	r2,1028
     3c8:	10840d04 	addi	r2,r2,4148
     3cc:	10800037 	ldwio	r2,0(r2)
     3d0:	100b883a 	mov	r5,r2
     3d4:	01000074 	movhi	r4,1
     3d8:	213fb704 	addi	r4,r4,-292
     3dc:	000dbbc0 	call	dbbc <alt_printf>
	IOWR_32DIRECT(COUNTER_0_BASE, COUNT_Start, arbval);
     3e0:	00ffffd4 	movui	r3,65535
     3e4:	00810134 	movhi	r2,1028
     3e8:	10840a04 	addi	r2,r2,4136
     3ec:	10c00035 	stwio	r3,0(r2)
	alt_printf("iCounter, first read after restarting=%x\n", IORD_32DIRECT(COUNTER_0_BASE,0));
     3f0:	00810134 	movhi	r2,1028
     3f4:	10840804 	addi	r2,r2,4128
     3f8:	10800037 	ldwio	r2,0(r2)
     3fc:	100b883a 	mov	r5,r2
     400:	01000074 	movhi	r4,1
     404:	213fd604 	addi	r4,r4,-168
     408:	000dbbc0 	call	dbbc <alt_printf>
	alt_printf("iCounter, second read after restarting=%x\n", IORD_32DIRECT(COUNTER_0_BASE,0));
     40c:	00810134 	movhi	r2,1028
     410:	10840804 	addi	r2,r2,4128
     414:	10800037 	ldwio	r2,0(r2)
     418:	100b883a 	mov	r5,r2
     41c:	01000074 	movhi	r4,1
     420:	213fe104 	addi	r4,r4,-124
     424:	000dbbc0 	call	dbbc <alt_printf>
	alt_printf("iEn and iEOT=%x\n", IORD_32DIRECT(COUNTER_0_BASE, 20));
     428:	00810134 	movhi	r2,1028
     42c:	10840d04 	addi	r2,r2,4148
     430:	10800037 	ldwio	r2,0(r2)
     434:	100b883a 	mov	r5,r2
     438:	01000074 	movhi	r4,1
     43c:	213fb704 	addi	r4,r4,-292
     440:	000dbbc0 	call	dbbc <alt_printf>
	IOWR_32DIRECT(COUNTER_0_BASE, COUNT_Stop, arbval);
     444:	00ffffd4 	movui	r3,65535
     448:	00810134 	movhi	r2,1028
     44c:	10840b04 	addi	r2,r2,4140
     450:	10c00035 	stwio	r3,0(r2)
}
     454:	0001883a 	nop
     458:	e037883a 	mov	sp,fp
     45c:	dfc00117 	ldw	ra,4(sp)
     460:	df000017 	ldw	fp,0(sp)
     464:	dec00204 	addi	sp,sp,8
     468:	f800283a 	ret

0000046c <resp_isr_print>:

void resp_isr_print(void* context)
{
     46c:	defffe04 	addi	sp,sp,-8
     470:	df000115 	stw	fp,4(sp)
     474:	df000104 	addi	fp,sp,4
     478:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_TIMER_SNAPL(TIMER_0_BASE, arbval);
     47c:	00ffffd4 	movui	r3,65535
     480:	00810134 	movhi	r2,1028
     484:	10840404 	addi	r2,r2,4112
     488:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_SNAPH(TIMER_0_BASE, arbval);
     48c:	00ffffd4 	movui	r3,65535
     490:	00810134 	movhi	r2,1028
     494:	10840504 	addi	r2,r2,4116
     498:	10c00035 	stwio	r3,0(r2)
	snapl = IORD_ALTERA_AVALON_TIMER_SNAPL(TIMER_0_BASE);
     49c:	00810134 	movhi	r2,1028
     4a0:	10840404 	addi	r2,r2,4112
     4a4:	10800037 	ldwio	r2,0(r2)
     4a8:	d0a6cd15 	stw	r2,-25804(gp)
	snaph = IORD_ALTERA_AVALON_TIMER_SNAPH(TIMER_0_BASE);
     4ac:	00810134 	movhi	r2,1028
     4b0:	10840504 	addi	r2,r2,4116
     4b4:	10800037 	ldwio	r2,0(r2)
     4b8:	d0a6cb15 	stw	r2,-25812(gp)
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, 0);
     4bc:	0007883a 	mov	r3,zero
     4c0:	00810134 	movhi	r2,1028
     4c4:	10840104 	addi	r2,r2,4100
     4c8:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, 0);
     4cc:	0007883a 	mov	r3,zero
     4d0:	00810134 	movhi	r2,1028
     4d4:	10840004 	addi	r2,r2,4096
     4d8:	10c00035 	stwio	r3,0(r2)
	flag = 1;
     4dc:	00800044 	movi	r2,1
     4e0:	d0a6cc15 	stw	r2,-25808(gp)
}
     4e4:	0001883a 	nop
     4e8:	e037883a 	mov	sp,fp
     4ec:	df000017 	ldw	fp,0(sp)
     4f0:	dec00104 	addi	sp,sp,4
     4f4:	f800283a 	ret

000004f8 <resp_isr_parport>:

void resp_isr_parport(void* context)
{
     4f8:	defffe04 	addi	sp,sp,-8
     4fc:	df000115 	stw	fp,4(sp)
     500:	df000104 	addi	fp,sp,4
     504:	e13fff15 	stw	r4,-4(fp)
	// Record end of response time by setting channel 1 low
	IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x0);
     508:	0007883a 	mov	r3,zero
     50c:	00810134 	movhi	r2,1028
     510:	10841004 	addi	r2,r2,4160
     514:	10c00035 	stwio	r3,0(r2)
	// Clear IRQ
	IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_IRQCLR, arbval);
     518:	00ffffd4 	movui	r3,65535
     51c:	00810134 	movhi	r2,1028
     520:	10841404 	addi	r2,r2,4176
     524:	10c00035 	stwio	r3,0(r2)
}
     528:	0001883a 	nop
     52c:	e037883a 	mov	sp,fp
     530:	df000017 	ldw	fp,0(sp)
     534:	dec00104 	addi	sp,sp,4
     538:	f800283a 	ret

0000053c <test_resptime_print>:

void test_resptime_print()
{
     53c:	defff804 	addi	sp,sp,-32
     540:	dfc00715 	stw	ra,28(sp)
     544:	df000615 	stw	fp,24(sp)
     548:	df000604 	addi	fp,sp,24
	// Register isr
	alt_ic_isr_register(TIMER_0_IRQ_INTERRUPT_CONTROLLER_ID, TIMER_0_IRQ, resp_isr_print, 0, 0);
     54c:	d8000015 	stw	zero,0(sp)
     550:	000f883a 	mov	r7,zero
     554:	01800034 	movhi	r6,0
     558:	31811b04 	addi	r6,r6,1132
     55c:	014000c4 	movi	r5,3
     560:	0009883a 	mov	r4,zero
     564:	000d57c0 	call	d57c <alt_ic_isr_register>
	// Initialize flag value
	flag = 0;
     568:	d026cc15 	stw	zero,-25808(gp)
	// Initialize timer
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, 0);
     56c:	0007883a 	mov	r3,zero
     570:	00810134 	movhi	r2,1028
     574:	10840104 	addi	r2,r2,4100
     578:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_0_BASE, 0xF080);
     57c:	00fc2014 	movui	r3,61568
     580:	00810134 	movhi	r2,1028
     584:	10840204 	addi	r2,r2,4104
     588:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_0_BASE, 0x02FA);
     58c:	00c0be84 	movi	r3,762
     590:	00810134 	movhi	r2,1028
     594:	10840304 	addi	r2,r2,4108
     598:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, TIMER_settings_start);
     59c:	00c001c4 	movi	r3,7
     5a0:	00810134 	movhi	r2,1028
     5a4:	10840104 	addi	r2,r2,4100
     5a8:	10c00035 	stwio	r3,0(r2)
	// Setup loop structure
	int counter = 0;
     5ac:	e03ffb15 	stw	zero,-20(fp)
	int max_iter = 10;
     5b0:	00800284 	movi	r2,10
     5b4:	e0bffd15 	stw	r2,-12(fp)
	int accum_val = 0;
     5b8:	e03ffc15 	stw	zero,-16(fp)
	int avg_val = 0;
     5bc:	e03ffe15 	stw	zero,-8(fp)
	int snapval = 0;
     5c0:	e03fff15 	stw	zero,-4(fp)
	printf("Testing response time using stock timer and\n"
     5c4:	e17ffd17 	ldw	r5,-12(fp)
     5c8:	01000074 	movhi	r4,1
     5cc:	213fec04 	addi	r4,r4,-80
     5d0:	0000cf00 	call	cf0 <printf>
			" counting the average over %d iterations...\n", max_iter);
	while(counter < max_iter)
     5d4:	00001e06 	br	650 <test_resptime_print+0x114>
	{
		if(flag)
     5d8:	d0a6cc17 	ldw	r2,-25808(gp)
     5dc:	10001c26 	beq	r2,zero,650 <test_resptime_print+0x114>
		{
			snapval = Count_1secH-snaph<<16|Count_1secL-snapl;
     5e0:	d0a6cb17 	ldw	r2,-25812(gp)
     5e4:	00c0be84 	movi	r3,762
     5e8:	1885c83a 	sub	r2,r3,r2
     5ec:	1006943a 	slli	r3,r2,16
     5f0:	d0a6cd17 	ldw	r2,-25804(gp)
     5f4:	013c2014 	movui	r4,61568
     5f8:	2085c83a 	sub	r2,r4,r2
     5fc:	1884b03a 	or	r2,r3,r2
     600:	e0bfff15 	stw	r2,-4(fp)
			alt_printf("Value at iteration %x is 0x%x clock cycles\n", counter+1, snapval);
     604:	e0bffb17 	ldw	r2,-20(fp)
     608:	10800044 	addi	r2,r2,1
     60c:	e1bfff17 	ldw	r6,-4(fp)
     610:	100b883a 	mov	r5,r2
     614:	01000074 	movhi	r4,1
     618:	21000304 	addi	r4,r4,12
     61c:	000dbbc0 	call	dbbc <alt_printf>
			flag = 0;
     620:	d026cc15 	stw	zero,-25808(gp)
			IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, TIMER_settings_start);
     624:	00c001c4 	movi	r3,7
     628:	00810134 	movhi	r2,1028
     62c:	10840104 	addi	r2,r2,4100
     630:	10c00035 	stwio	r3,0(r2)
			accum_val += snapval;
     634:	e0fffc17 	ldw	r3,-16(fp)
     638:	e0bfff17 	ldw	r2,-4(fp)
     63c:	1885883a 	add	r2,r3,r2
     640:	e0bffc15 	stw	r2,-16(fp)
			counter += 1;
     644:	e0bffb17 	ldw	r2,-20(fp)
     648:	10800044 	addi	r2,r2,1
     64c:	e0bffb15 	stw	r2,-20(fp)
	int accum_val = 0;
	int avg_val = 0;
	int snapval = 0;
	printf("Testing response time using stock timer and\n"
			" counting the average over %d iterations...\n", max_iter);
	while(counter < max_iter)
     650:	e0fffb17 	ldw	r3,-20(fp)
     654:	e0bffd17 	ldw	r2,-12(fp)
     658:	18bfdf16 	blt	r3,r2,5d8 <__ram_exceptions_end+0xfbfe0384>
			IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, TIMER_settings_start);
			accum_val += snapval;
			counter += 1;
		}
	}
	avg_val = accum_val/max_iter;
     65c:	e17ffd17 	ldw	r5,-12(fp)
     660:	e13ffc17 	ldw	r4,-16(fp)
     664:	0000b0c0 	call	b0c <__divsi3>
     668:	e0bffe15 	stw	r2,-8(fp)
	printf("Average value for response time is %d clock cycles", avg_val);
     66c:	e17ffe17 	ldw	r5,-8(fp)
     670:	01000074 	movhi	r4,1
     674:	21000e04 	addi	r4,r4,56
     678:	0000cf00 	call	cf0 <printf>
}
     67c:	0001883a 	nop
     680:	e037883a 	mov	sp,fp
     684:	dfc00117 	ldw	ra,4(sp)
     688:	df000017 	ldw	fp,0(sp)
     68c:	dec00204 	addi	sp,sp,8
     690:	f800283a 	ret

00000694 <test_resptime_parport>:
void test_resptime_parport()
{
     694:	defffb04 	addi	sp,sp,-20
     698:	dfc00415 	stw	ra,16(sp)
     69c:	df000315 	stw	fp,12(sp)
     6a0:	df000304 	addi	fp,sp,12
	// Register isr
	alt_ic_isr_register(PARALLELPORT_0_IRQ_INTERRUPT_CONTROLLER_ID, PARALLELPORT_0_IRQ, resp_isr_parport, 0, 0);
     6a4:	d8000015 	stw	zero,0(sp)
     6a8:	000f883a 	mov	r7,zero
     6ac:	01800034 	movhi	r6,0
     6b0:	31813e04 	addi	r6,r6,1272
     6b4:	01400044 	movi	r5,1
     6b8:	0009883a 	mov	r4,zero
     6bc:	000d57c0 	call	d57c <alt_ic_isr_register>
	IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x0);
     6c0:	0007883a 	mov	r3,zero
     6c4:	00810134 	movhi	r2,1028
     6c8:	10841004 	addi	r2,r2,4160
     6cc:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_IRQEN, 0x2);
     6d0:	00c00084 	movi	r3,2
     6d4:	00810134 	movhi	r2,1028
     6d8:	10841304 	addi	r2,r2,4172
     6dc:	10c00035 	stwio	r3,0(r2)
	int iterations = 10;
     6e0:	00800284 	movi	r2,10
     6e4:	e0bfff15 	stw	r2,-4(fp)
	int counter = 0;
     6e8:	e03ffe15 	stw	zero,-8(fp)
	while(counter < iterations)
     6ec:	00000706 	br	70c <test_resptime_parport+0x78>
	{
		// Trigger interrupt by setting channel 1 high
		IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x2);
     6f0:	00c00084 	movi	r3,2
     6f4:	00810134 	movhi	r2,1028
     6f8:	10841004 	addi	r2,r2,4160
     6fc:	10c00035 	stwio	r3,0(r2)
		counter += 1;
     700:	e0bffe17 	ldw	r2,-8(fp)
     704:	10800044 	addi	r2,r2,1
     708:	e0bffe15 	stw	r2,-8(fp)
	alt_ic_isr_register(PARALLELPORT_0_IRQ_INTERRUPT_CONTROLLER_ID, PARALLELPORT_0_IRQ, resp_isr_parport, 0, 0);
	IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x0);
	IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_IRQEN, 0x2);
	int iterations = 10;
	int counter = 0;
	while(counter < iterations)
     70c:	e0fffe17 	ldw	r3,-8(fp)
     710:	e0bfff17 	ldw	r2,-4(fp)
     714:	18bff616 	blt	r3,r2,6f0 <__ram_exceptions_end+0xfbfe049c>
	{
		// Trigger interrupt by setting channel 1 high
		IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x2);
		counter += 1;
	}
}
     718:	0001883a 	nop
     71c:	e037883a 	mov	sp,fp
     720:	dfc00117 	ldw	ra,4(sp)
     724:	df000017 	ldw	fp,0(sp)
     728:	dec00204 	addi	sp,sp,8
     72c:	f800283a 	ret

00000730 <recov_isr_print>:

void recov_isr_print(void* context)
{
     730:	defffe04 	addi	sp,sp,-8
     734:	df000115 	stw	fp,4(sp)
     738:	df000104 	addi	fp,sp,4
     73c:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, 0);
     740:	0007883a 	mov	r3,zero
     744:	00810134 	movhi	r2,1028
     748:	10840104 	addi	r2,r2,4100
     74c:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, 0);
     750:	0007883a 	mov	r3,zero
     754:	00810134 	movhi	r2,1028
     758:	10840004 	addi	r2,r2,4096
     75c:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(COUNTER_0_BASE, COUNT_Start, arbval);
     760:	00ffffd4 	movui	r3,65535
     764:	00810134 	movhi	r2,1028
     768:	10840a04 	addi	r2,r2,4136
     76c:	10c00035 	stwio	r3,0(r2)
}
     770:	0001883a 	nop
     774:	e037883a 	mov	sp,fp
     778:	df000017 	ldw	fp,0(sp)
     77c:	dec00104 	addi	sp,sp,4
     780:	f800283a 	ret

00000784 <recov_isr_parport>:

void recov_isr_parport(void* context)
{
     784:	defffe04 	addi	sp,sp,-8
     788:	df000115 	stw	fp,4(sp)
     78c:	df000104 	addi	fp,sp,4
     790:	e13fff15 	stw	r4,-4(fp)
	// Clear all parport channels
	IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x0);
     794:	0007883a 	mov	r3,zero
     798:	00810134 	movhi	r2,1028
     79c:	10841004 	addi	r2,r2,4160
     7a0:	10c00035 	stwio	r3,0(r2)
	// Clear IRQ
	IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_IRQCLR, arbval);
     7a4:	00ffffd4 	movui	r3,65535
     7a8:	00810134 	movhi	r2,1028
     7ac:	10841404 	addi	r2,r2,4176
     7b0:	10c00035 	stwio	r3,0(r2)
	// Set channel 0 high to record start of recovery time
	IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x1);
     7b4:	00c00044 	movi	r3,1
     7b8:	00810134 	movhi	r2,1028
     7bc:	10841004 	addi	r2,r2,4160
     7c0:	10c00035 	stwio	r3,0(r2)
}
     7c4:	0001883a 	nop
     7c8:	e037883a 	mov	sp,fp
     7cc:	df000017 	ldw	fp,0(sp)
     7d0:	dec00104 	addi	sp,sp,4
     7d4:	f800283a 	ret

000007d8 <test_recovtime_print>:

void test_recovtime_print()
{
     7d8:	defff804 	addi	sp,sp,-32
     7dc:	dfc00715 	stw	ra,28(sp)
     7e0:	df000615 	stw	fp,24(sp)
     7e4:	df000604 	addi	fp,sp,24
	// Register interrupt function
	alt_ic_isr_register(TIMER_0_IRQ_INTERRUPT_CONTROLLER_ID, TIMER_0_IRQ, recov_isr_print, 0, 0);
     7e8:	d8000015 	stw	zero,0(sp)
     7ec:	000f883a 	mov	r7,zero
     7f0:	01800034 	movhi	r6,0
     7f4:	3181cc04 	addi	r6,r6,1840
     7f8:	014000c4 	movi	r5,3
     7fc:	0009883a 	mov	r4,zero
     800:	000d57c0 	call	d57c <alt_ic_isr_register>
	// Initialize counter, with maximum target value
	IOWR_32DIRECT(COUNTER_0_BASE, COUNT_Target, 0xFFFFFFFF);
     804:	00ffffc4 	movi	r3,-1
     808:	00810134 	movhi	r2,1028
     80c:	10840e04 	addi	r2,r2,4152
     810:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(COUNTER_0_BASE, COUNT_RZ, arbval);
     814:	00ffffd4 	movui	r3,65535
     818:	00810134 	movhi	r2,1028
     81c:	10840904 	addi	r2,r2,4132
     820:	10c00035 	stwio	r3,0(r2)
	// Initialize timer
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, 0);
     824:	0007883a 	mov	r3,zero
     828:	00810134 	movhi	r2,1028
     82c:	10840104 	addi	r2,r2,4100
     830:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_0_BASE, 0xF080);
     834:	00fc2014 	movui	r3,61568
     838:	00810134 	movhi	r2,1028
     83c:	10840204 	addi	r2,r2,4104
     840:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_0_BASE, 0x02FA);
     844:	00c0be84 	movi	r3,762
     848:	00810134 	movhi	r2,1028
     84c:	10840304 	addi	r2,r2,4108
     850:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, TIMER_settings_start);
     854:	00c001c4 	movi	r3,7
     858:	00810134 	movhi	r2,1028
     85c:	10840104 	addi	r2,r2,4100
     860:	10c00035 	stwio	r3,0(r2)
	// Setup loop structure
	int counter = 0;
     864:	e03ffb15 	stw	zero,-20(fp)
	int max_iter = 10;
     868:	00800284 	movi	r2,10
     86c:	e0bffe15 	stw	r2,-8(fp)
	int accum_val = 0;
     870:	e03ffc15 	stw	zero,-16(fp)
	int avg_val = 0;
     874:	e03fff15 	stw	zero,-4(fp)
	int read_val;
	printf("\n\nTesting recovery time using custom counter and\n"
     878:	e17ffe17 	ldw	r5,-8(fp)
     87c:	01000074 	movhi	r4,1
     880:	21001b04 	addi	r4,r4,108
     884:	0000cf00 	call	cf0 <printf>
			" counting the average over %d iterations...\n", max_iter);
	while(counter < max_iter)
     888:	00002506 	br	920 <test_recovtime_print+0x148>
	{
		read_val = IORD_32DIRECT(COUNTER_0_BASE,0);
     88c:	00810134 	movhi	r2,1028
     890:	10840804 	addi	r2,r2,4128
     894:	10800037 	ldwio	r2,0(r2)
     898:	e0bffd15 	stw	r2,-12(fp)
		while(read_val == 0)
     89c:	00000406 	br	8b0 <test_recovtime_print+0xd8>
		{
			read_val = IORD_32DIRECT(COUNTER_0_BASE,0);
     8a0:	00810134 	movhi	r2,1028
     8a4:	10840804 	addi	r2,r2,4128
     8a8:	10800037 	ldwio	r2,0(r2)
     8ac:	e0bffd15 	stw	r2,-12(fp)
	printf("\n\nTesting recovery time using custom counter and\n"
			" counting the average over %d iterations...\n", max_iter);
	while(counter < max_iter)
	{
		read_val = IORD_32DIRECT(COUNTER_0_BASE,0);
		while(read_val == 0)
     8b0:	e0bffd17 	ldw	r2,-12(fp)
     8b4:	103ffa26 	beq	r2,zero,8a0 <__ram_exceptions_end+0xfbfe064c>
		{
			read_val = IORD_32DIRECT(COUNTER_0_BASE,0);
		}
		alt_printf("Value at iteration %x is 0x%x clock cycles\n", counter+1, read_val);
     8b8:	e0bffb17 	ldw	r2,-20(fp)
     8bc:	10800044 	addi	r2,r2,1
     8c0:	e1bffd17 	ldw	r6,-12(fp)
     8c4:	100b883a 	mov	r5,r2
     8c8:	01000074 	movhi	r4,1
     8cc:	21000304 	addi	r4,r4,12
     8d0:	000dbbc0 	call	dbbc <alt_printf>
		accum_val += read_val;
     8d4:	e0fffc17 	ldw	r3,-16(fp)
     8d8:	e0bffd17 	ldw	r2,-12(fp)
     8dc:	1885883a 	add	r2,r3,r2
     8e0:	e0bffc15 	stw	r2,-16(fp)
		counter += 1;
     8e4:	e0bffb17 	ldw	r2,-20(fp)
     8e8:	10800044 	addi	r2,r2,1
     8ec:	e0bffb15 	stw	r2,-20(fp)
		IOWR_32DIRECT(COUNTER_0_BASE, COUNT_Stop, arbval);
     8f0:	00ffffd4 	movui	r3,65535
     8f4:	00810134 	movhi	r2,1028
     8f8:	10840b04 	addi	r2,r2,4140
     8fc:	10c00035 	stwio	r3,0(r2)
		IOWR_32DIRECT(COUNTER_0_BASE, COUNT_RZ, arbval);
     900:	00ffffd4 	movui	r3,65535
     904:	00810134 	movhi	r2,1028
     908:	10840904 	addi	r2,r2,4132
     90c:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, TIMER_settings_start);
     910:	00c001c4 	movi	r3,7
     914:	00810134 	movhi	r2,1028
     918:	10840104 	addi	r2,r2,4100
     91c:	10c00035 	stwio	r3,0(r2)
	int accum_val = 0;
	int avg_val = 0;
	int read_val;
	printf("\n\nTesting recovery time using custom counter and\n"
			" counting the average over %d iterations...\n", max_iter);
	while(counter < max_iter)
     920:	e0fffb17 	ldw	r3,-20(fp)
     924:	e0bffe17 	ldw	r2,-8(fp)
     928:	18bfd816 	blt	r3,r2,88c <__ram_exceptions_end+0xfbfe0638>
		counter += 1;
		IOWR_32DIRECT(COUNTER_0_BASE, COUNT_Stop, arbval);
		IOWR_32DIRECT(COUNTER_0_BASE, COUNT_RZ, arbval);
		IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, TIMER_settings_start);
	}
	avg_val = accum_val/max_iter;
     92c:	e17ffe17 	ldw	r5,-8(fp)
     930:	e13ffc17 	ldw	r4,-16(fp)
     934:	0000b0c0 	call	b0c <__divsi3>
     938:	e0bfff15 	stw	r2,-4(fp)
	printf("Average value for recovery time is %d clock cycles", avg_val);
     93c:	e17fff17 	ldw	r5,-4(fp)
     940:	01000074 	movhi	r4,1
     944:	21003304 	addi	r4,r4,204
     948:	0000cf00 	call	cf0 <printf>
}
     94c:	0001883a 	nop
     950:	e037883a 	mov	sp,fp
     954:	dfc00117 	ldw	ra,4(sp)
     958:	df000017 	ldw	fp,0(sp)
     95c:	dec00204 	addi	sp,sp,8
     960:	f800283a 	ret

00000964 <test_recovtime_parport>:

void test_recovtime_parport()
{
     964:	defffb04 	addi	sp,sp,-20
     968:	dfc00415 	stw	ra,16(sp)
     96c:	df000315 	stw	fp,12(sp)
     970:	df000304 	addi	fp,sp,12
	// Register isr
		alt_ic_isr_register(PARALLELPORT_0_IRQ_INTERRUPT_CONTROLLER_ID, PARALLELPORT_0_IRQ, recov_isr_parport, 0, 0);
     974:	d8000015 	stw	zero,0(sp)
     978:	000f883a 	mov	r7,zero
     97c:	01800034 	movhi	r6,0
     980:	3181e104 	addi	r6,r6,1924
     984:	01400044 	movi	r5,1
     988:	0009883a 	mov	r4,zero
     98c:	000d57c0 	call	d57c <alt_ic_isr_register>
		IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x0);
     990:	0007883a 	mov	r3,zero
     994:	00810134 	movhi	r2,1028
     998:	10841004 	addi	r2,r2,4160
     99c:	10c00035 	stwio	r3,0(r2)
		IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_IRQEN, 0x2);
     9a0:	00c00084 	movi	r3,2
     9a4:	00810134 	movhi	r2,1028
     9a8:	10841304 	addi	r2,r2,4172
     9ac:	10c00035 	stwio	r3,0(r2)
		int iterations = 10;
     9b0:	00800284 	movi	r2,10
     9b4:	e0bfff15 	stw	r2,-4(fp)
		int counter = 0;
     9b8:	e03ffe15 	stw	zero,-8(fp)
		while(counter < iterations)
     9bc:	00000b06 	br	9ec <test_recovtime_parport+0x88>
		{
			// Trigger the interrupt by setting channel 1 high
			IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x2);
     9c0:	00c00084 	movi	r3,2
     9c4:	00810134 	movhi	r2,1028
     9c8:	10841004 	addi	r2,r2,4160
     9cc:	10c00035 	stwio	r3,0(r2)
			// Record end of recovery time by setting channel 0 low
			IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x0);
     9d0:	0007883a 	mov	r3,zero
     9d4:	00810134 	movhi	r2,1028
     9d8:	10841004 	addi	r2,r2,4160
     9dc:	10c00035 	stwio	r3,0(r2)
			counter += 1;
     9e0:	e0bffe17 	ldw	r2,-8(fp)
     9e4:	10800044 	addi	r2,r2,1
     9e8:	e0bffe15 	stw	r2,-8(fp)
		alt_ic_isr_register(PARALLELPORT_0_IRQ_INTERRUPT_CONTROLLER_ID, PARALLELPORT_0_IRQ, recov_isr_parport, 0, 0);
		IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x0);
		IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_IRQEN, 0x2);
		int iterations = 10;
		int counter = 0;
		while(counter < iterations)
     9ec:	e0fffe17 	ldw	r3,-8(fp)
     9f0:	e0bfff17 	ldw	r2,-4(fp)
     9f4:	18bff216 	blt	r3,r2,9c0 <__ram_exceptions_end+0xfbfe076c>
			IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x2);
			// Record end of recovery time by setting channel 0 low
			IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x0);
			counter += 1;
		}
}
     9f8:	0001883a 	nop
     9fc:	e037883a 	mov	sp,fp
     a00:	dfc00117 	ldw	ra,4(sp)
     a04:	df000017 	ldw	fp,0(sp)
     a08:	dec00204 	addi	sp,sp,8
     a0c:	f800283a 	ret

00000a10 <latency_isr_parport>:

void latency_isr_parport(void* context)
{
     a10:	defffe04 	addi	sp,sp,-8
     a14:	df000115 	stw	fp,4(sp)
     a18:	df000104 	addi	fp,sp,4
     a1c:	e13fff15 	stw	r4,-4(fp)
	IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_IRQCLR, arbval);
     a20:	00ffffd4 	movui	r3,65535
     a24:	00810134 	movhi	r2,1028
     a28:	10841404 	addi	r2,r2,4176
     a2c:	10c00035 	stwio	r3,0(r2)
}
     a30:	0001883a 	nop
     a34:	e037883a 	mov	sp,fp
     a38:	df000017 	ldw	fp,0(sp)
     a3c:	dec00104 	addi	sp,sp,4
     a40:	f800283a 	ret

00000a44 <test_latency_parport>:

void test_latency_parport()
{
     a44:	defffb04 	addi	sp,sp,-20
     a48:	dfc00415 	stw	ra,16(sp)
     a4c:	df000315 	stw	fp,12(sp)
     a50:	df000304 	addi	fp,sp,12
	alt_ic_isr_register(PARALLELPORT_0_IRQ_INTERRUPT_CONTROLLER_ID, PARALLELPORT_0_IRQ, latency_isr_parport, 0, 0);
     a54:	d8000015 	stw	zero,0(sp)
     a58:	000f883a 	mov	r7,zero
     a5c:	01800034 	movhi	r6,0
     a60:	31828404 	addi	r6,r6,2576
     a64:	01400044 	movi	r5,1
     a68:	0009883a 	mov	r4,zero
     a6c:	000d57c0 	call	d57c <alt_ic_isr_register>
	IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x0);
     a70:	0007883a 	mov	r3,zero
     a74:	00810134 	movhi	r2,1028
     a78:	10841004 	addi	r2,r2,4160
     a7c:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_IRQEN, 0x1);
     a80:	00c00044 	movi	r3,1
     a84:	00810134 	movhi	r2,1028
     a88:	10841304 	addi	r2,r2,4172
     a8c:	10c00035 	stwio	r3,0(r2)
	int iterations = 1e2;
     a90:	00801904 	movi	r2,100
     a94:	e0bfff15 	stw	r2,-4(fp)
	int counter = 0;
     a98:	e03ffe15 	stw	zero,-8(fp)
	while(counter < iterations)
     a9c:	00000706 	br	abc <test_latency_parport+0x78>
	{
		// Trigger the interrupt by setting channel 0 high
		IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x1);
     aa0:	00c00044 	movi	r3,1
     aa4:	00810134 	movhi	r2,1028
     aa8:	10841004 	addi	r2,r2,4160
     aac:	10c00035 	stwio	r3,0(r2)

		counter += 1;
     ab0:	e0bffe17 	ldw	r2,-8(fp)
     ab4:	10800044 	addi	r2,r2,1
     ab8:	e0bffe15 	stw	r2,-8(fp)
	alt_ic_isr_register(PARALLELPORT_0_IRQ_INTERRUPT_CONTROLLER_ID, PARALLELPORT_0_IRQ, latency_isr_parport, 0, 0);
	IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x0);
	IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_IRQEN, 0x1);
	int iterations = 1e2;
	int counter = 0;
	while(counter < iterations)
     abc:	e0fffe17 	ldw	r3,-8(fp)
     ac0:	e0bfff17 	ldw	r2,-4(fp)
     ac4:	18bff616 	blt	r3,r2,aa0 <__ram_exceptions_end+0xfbfe084c>
		// Trigger the interrupt by setting channel 0 high
		IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x1);

		counter += 1;
	}
}
     ac8:	0001883a 	nop
     acc:	e037883a 	mov	sp,fp
     ad0:	dfc00117 	ldw	ra,4(sp)
     ad4:	df000017 	ldw	fp,0(sp)
     ad8:	dec00204 	addi	sp,sp,8
     adc:	f800283a 	ret

00000ae0 <main>:

int main()
{
     ae0:	defffe04 	addi	sp,sp,-8
     ae4:	dfc00115 	stw	ra,4(sp)
     ae8:	df000015 	stw	fp,0(sp)
     aec:	d839883a 	mov	fp,sp
	//test_parallel_port();
	//test_counter();

	// Latency tests
	// De-comment line 90 in alt_irq_handler.c to run this test
	test_latency_parport();
     af0:	0000a440 	call	a44 <test_latency_parport>
	//test_resptime_parport();

	// Recovery time tests
	//test_recovtime_print();
	//test_recovtime_parport();
	return 0;
     af4:	0005883a 	mov	r2,zero
}
     af8:	e037883a 	mov	sp,fp
     afc:	dfc00117 	ldw	ra,4(sp)
     b00:	df000017 	ldw	fp,0(sp)
     b04:	dec00204 	addi	sp,sp,8
     b08:	f800283a 	ret

00000b0c <__divsi3>:
     b0c:	20001b16 	blt	r4,zero,b7c <__divsi3+0x70>
     b10:	000f883a 	mov	r7,zero
     b14:	28001616 	blt	r5,zero,b70 <__divsi3+0x64>
     b18:	200d883a 	mov	r6,r4
     b1c:	29001a2e 	bgeu	r5,r4,b88 <__divsi3+0x7c>
     b20:	00800804 	movi	r2,32
     b24:	00c00044 	movi	r3,1
     b28:	00000106 	br	b30 <__divsi3+0x24>
     b2c:	10000d26 	beq	r2,zero,b64 <__divsi3+0x58>
     b30:	294b883a 	add	r5,r5,r5
     b34:	10bfffc4 	addi	r2,r2,-1
     b38:	18c7883a 	add	r3,r3,r3
     b3c:	293ffb36 	bltu	r5,r4,b2c <__ram_exceptions_end+0xfbfe08d8>
     b40:	0005883a 	mov	r2,zero
     b44:	18000726 	beq	r3,zero,b64 <__divsi3+0x58>
     b48:	0005883a 	mov	r2,zero
     b4c:	31400236 	bltu	r6,r5,b58 <__divsi3+0x4c>
     b50:	314dc83a 	sub	r6,r6,r5
     b54:	10c4b03a 	or	r2,r2,r3
     b58:	1806d07a 	srli	r3,r3,1
     b5c:	280ad07a 	srli	r5,r5,1
     b60:	183ffa1e 	bne	r3,zero,b4c <__ram_exceptions_end+0xfbfe08f8>
     b64:	38000126 	beq	r7,zero,b6c <__divsi3+0x60>
     b68:	0085c83a 	sub	r2,zero,r2
     b6c:	f800283a 	ret
     b70:	014bc83a 	sub	r5,zero,r5
     b74:	39c0005c 	xori	r7,r7,1
     b78:	003fe706 	br	b18 <__ram_exceptions_end+0xfbfe08c4>
     b7c:	0109c83a 	sub	r4,zero,r4
     b80:	01c00044 	movi	r7,1
     b84:	003fe306 	br	b14 <__ram_exceptions_end+0xfbfe08c0>
     b88:	00c00044 	movi	r3,1
     b8c:	003fee06 	br	b48 <__ram_exceptions_end+0xfbfe08f4>

00000b90 <__modsi3>:
     b90:	20001716 	blt	r4,zero,bf0 <__modsi3+0x60>
     b94:	000f883a 	mov	r7,zero
     b98:	2005883a 	mov	r2,r4
     b9c:	28001216 	blt	r5,zero,be8 <__modsi3+0x58>
     ba0:	2900162e 	bgeu	r5,r4,bfc <__modsi3+0x6c>
     ba4:	01800804 	movi	r6,32
     ba8:	00c00044 	movi	r3,1
     bac:	00000106 	br	bb4 <__modsi3+0x24>
     bb0:	30000a26 	beq	r6,zero,bdc <__modsi3+0x4c>
     bb4:	294b883a 	add	r5,r5,r5
     bb8:	31bfffc4 	addi	r6,r6,-1
     bbc:	18c7883a 	add	r3,r3,r3
     bc0:	293ffb36 	bltu	r5,r4,bb0 <__ram_exceptions_end+0xfbfe095c>
     bc4:	18000526 	beq	r3,zero,bdc <__modsi3+0x4c>
     bc8:	1806d07a 	srli	r3,r3,1
     bcc:	11400136 	bltu	r2,r5,bd4 <__modsi3+0x44>
     bd0:	1145c83a 	sub	r2,r2,r5
     bd4:	280ad07a 	srli	r5,r5,1
     bd8:	183ffb1e 	bne	r3,zero,bc8 <__ram_exceptions_end+0xfbfe0974>
     bdc:	38000126 	beq	r7,zero,be4 <__modsi3+0x54>
     be0:	0085c83a 	sub	r2,zero,r2
     be4:	f800283a 	ret
     be8:	014bc83a 	sub	r5,zero,r5
     bec:	003fec06 	br	ba0 <__ram_exceptions_end+0xfbfe094c>
     bf0:	0109c83a 	sub	r4,zero,r4
     bf4:	01c00044 	movi	r7,1
     bf8:	003fe706 	br	b98 <__ram_exceptions_end+0xfbfe0944>
     bfc:	00c00044 	movi	r3,1
     c00:	003ff106 	br	bc8 <__ram_exceptions_end+0xfbfe0974>

00000c04 <__udivsi3>:
     c04:	200d883a 	mov	r6,r4
     c08:	2900152e 	bgeu	r5,r4,c60 <__udivsi3+0x5c>
     c0c:	28001416 	blt	r5,zero,c60 <__udivsi3+0x5c>
     c10:	00800804 	movi	r2,32
     c14:	00c00044 	movi	r3,1
     c18:	00000206 	br	c24 <__udivsi3+0x20>
     c1c:	10000e26 	beq	r2,zero,c58 <__udivsi3+0x54>
     c20:	28000516 	blt	r5,zero,c38 <__udivsi3+0x34>
     c24:	294b883a 	add	r5,r5,r5
     c28:	10bfffc4 	addi	r2,r2,-1
     c2c:	18c7883a 	add	r3,r3,r3
     c30:	293ffa36 	bltu	r5,r4,c1c <__ram_exceptions_end+0xfbfe09c8>
     c34:	18000826 	beq	r3,zero,c58 <__udivsi3+0x54>
     c38:	0005883a 	mov	r2,zero
     c3c:	31400236 	bltu	r6,r5,c48 <__udivsi3+0x44>
     c40:	314dc83a 	sub	r6,r6,r5
     c44:	10c4b03a 	or	r2,r2,r3
     c48:	1806d07a 	srli	r3,r3,1
     c4c:	280ad07a 	srli	r5,r5,1
     c50:	183ffa1e 	bne	r3,zero,c3c <__ram_exceptions_end+0xfbfe09e8>
     c54:	f800283a 	ret
     c58:	0005883a 	mov	r2,zero
     c5c:	f800283a 	ret
     c60:	00c00044 	movi	r3,1
     c64:	003ff406 	br	c38 <__ram_exceptions_end+0xfbfe09e4>

00000c68 <__umodsi3>:
     c68:	2005883a 	mov	r2,r4
     c6c:	2900122e 	bgeu	r5,r4,cb8 <__umodsi3+0x50>
     c70:	28001116 	blt	r5,zero,cb8 <__umodsi3+0x50>
     c74:	01800804 	movi	r6,32
     c78:	00c00044 	movi	r3,1
     c7c:	00000206 	br	c88 <__umodsi3+0x20>
     c80:	30000c26 	beq	r6,zero,cb4 <__umodsi3+0x4c>
     c84:	28000516 	blt	r5,zero,c9c <__umodsi3+0x34>
     c88:	294b883a 	add	r5,r5,r5
     c8c:	31bfffc4 	addi	r6,r6,-1
     c90:	18c7883a 	add	r3,r3,r3
     c94:	293ffa36 	bltu	r5,r4,c80 <__ram_exceptions_end+0xfbfe0a2c>
     c98:	18000626 	beq	r3,zero,cb4 <__umodsi3+0x4c>
     c9c:	1806d07a 	srli	r3,r3,1
     ca0:	11400136 	bltu	r2,r5,ca8 <__umodsi3+0x40>
     ca4:	1145c83a 	sub	r2,r2,r5
     ca8:	280ad07a 	srli	r5,r5,1
     cac:	183ffb1e 	bne	r3,zero,c9c <__ram_exceptions_end+0xfbfe0a48>
     cb0:	f800283a 	ret
     cb4:	f800283a 	ret
     cb8:	00c00044 	movi	r3,1
     cbc:	003ff706 	br	c9c <__ram_exceptions_end+0xfbfe0a48>

00000cc0 <_printf_r>:
     cc0:	defffd04 	addi	sp,sp,-12
     cc4:	2805883a 	mov	r2,r5
     cc8:	dfc00015 	stw	ra,0(sp)
     ccc:	d9800115 	stw	r6,4(sp)
     cd0:	d9c00215 	stw	r7,8(sp)
     cd4:	21400217 	ldw	r5,8(r4)
     cd8:	d9c00104 	addi	r7,sp,4
     cdc:	100d883a 	mov	r6,r2
     ce0:	0000d2c0 	call	d2c <___vfprintf_internal_r>
     ce4:	dfc00017 	ldw	ra,0(sp)
     ce8:	dec00304 	addi	sp,sp,12
     cec:	f800283a 	ret

00000cf0 <printf>:
     cf0:	defffc04 	addi	sp,sp,-16
     cf4:	dfc00015 	stw	ra,0(sp)
     cf8:	d9400115 	stw	r5,4(sp)
     cfc:	d9800215 	stw	r6,8(sp)
     d00:	d9c00315 	stw	r7,12(sp)
     d04:	00800074 	movhi	r2,1
     d08:	1087ab04 	addi	r2,r2,7852
     d0c:	10800017 	ldw	r2,0(r2)
     d10:	200b883a 	mov	r5,r4
     d14:	d9800104 	addi	r6,sp,4
     d18:	11000217 	ldw	r4,8(r2)
     d1c:	0002f240 	call	2f24 <__vfprintf_internal>
     d20:	dfc00017 	ldw	ra,0(sp)
     d24:	dec00404 	addi	sp,sp,16
     d28:	f800283a 	ret

00000d2c <___vfprintf_internal_r>:
     d2c:	deffb804 	addi	sp,sp,-288
     d30:	dfc04715 	stw	ra,284(sp)
     d34:	ddc04515 	stw	r23,276(sp)
     d38:	dd404315 	stw	r21,268(sp)
     d3c:	d9002c15 	stw	r4,176(sp)
     d40:	282f883a 	mov	r23,r5
     d44:	302b883a 	mov	r21,r6
     d48:	d9c02d15 	stw	r7,180(sp)
     d4c:	df004615 	stw	fp,280(sp)
     d50:	dd804415 	stw	r22,272(sp)
     d54:	dd004215 	stw	r20,264(sp)
     d58:	dcc04115 	stw	r19,260(sp)
     d5c:	dc804015 	stw	r18,256(sp)
     d60:	dc403f15 	stw	r17,252(sp)
     d64:	dc003e15 	stw	r16,248(sp)
     d68:	00056880 	call	5688 <_localeconv_r>
     d6c:	10800017 	ldw	r2,0(r2)
     d70:	1009883a 	mov	r4,r2
     d74:	d8803415 	stw	r2,208(sp)
     d78:	00076b00 	call	76b0 <strlen>
     d7c:	d8803715 	stw	r2,220(sp)
     d80:	d8802c17 	ldw	r2,176(sp)
     d84:	10000226 	beq	r2,zero,d90 <___vfprintf_internal_r+0x64>
     d88:	10800e17 	ldw	r2,56(r2)
     d8c:	1000f926 	beq	r2,zero,1174 <___vfprintf_internal_r+0x448>
     d90:	b880030b 	ldhu	r2,12(r23)
     d94:	10c8000c 	andi	r3,r2,8192
     d98:	1800061e 	bne	r3,zero,db4 <___vfprintf_internal_r+0x88>
     d9c:	b9001917 	ldw	r4,100(r23)
     da0:	00f7ffc4 	movi	r3,-8193
     da4:	10880014 	ori	r2,r2,8192
     da8:	20c6703a 	and	r3,r4,r3
     dac:	b880030d 	sth	r2,12(r23)
     db0:	b8c01915 	stw	r3,100(r23)
     db4:	10c0020c 	andi	r3,r2,8
     db8:	1800c126 	beq	r3,zero,10c0 <___vfprintf_internal_r+0x394>
     dbc:	b8c00417 	ldw	r3,16(r23)
     dc0:	1800bf26 	beq	r3,zero,10c0 <___vfprintf_internal_r+0x394>
     dc4:	1080068c 	andi	r2,r2,26
     dc8:	00c00284 	movi	r3,10
     dcc:	10c0c426 	beq	r2,r3,10e0 <___vfprintf_internal_r+0x3b4>
     dd0:	d8c00404 	addi	r3,sp,16
     dd4:	05000074 	movhi	r20,1
     dd8:	d9001e04 	addi	r4,sp,120
     ddc:	a5005084 	addi	r20,r20,322
     de0:	d8c01e15 	stw	r3,120(sp)
     de4:	d8002015 	stw	zero,128(sp)
     de8:	d8001f15 	stw	zero,124(sp)
     dec:	d8003315 	stw	zero,204(sp)
     df0:	d8003615 	stw	zero,216(sp)
     df4:	d8003815 	stw	zero,224(sp)
     df8:	1811883a 	mov	r8,r3
     dfc:	d8003915 	stw	zero,228(sp)
     e00:	d8003a15 	stw	zero,232(sp)
     e04:	d8002f15 	stw	zero,188(sp)
     e08:	d9002815 	stw	r4,160(sp)
     e0c:	a8800007 	ldb	r2,0(r21)
     e10:	10027b26 	beq	r2,zero,1800 <___vfprintf_internal_r+0xad4>
     e14:	00c00944 	movi	r3,37
     e18:	a821883a 	mov	r16,r21
     e1c:	10c0021e 	bne	r2,r3,e28 <___vfprintf_internal_r+0xfc>
     e20:	00001406 	br	e74 <___vfprintf_internal_r+0x148>
     e24:	10c00326 	beq	r2,r3,e34 <___vfprintf_internal_r+0x108>
     e28:	84000044 	addi	r16,r16,1
     e2c:	80800007 	ldb	r2,0(r16)
     e30:	103ffc1e 	bne	r2,zero,e24 <__ram_exceptions_end+0xfbfe0bd0>
     e34:	8563c83a 	sub	r17,r16,r21
     e38:	88000e26 	beq	r17,zero,e74 <___vfprintf_internal_r+0x148>
     e3c:	d8c02017 	ldw	r3,128(sp)
     e40:	d8801f17 	ldw	r2,124(sp)
     e44:	45400015 	stw	r21,0(r8)
     e48:	1c47883a 	add	r3,r3,r17
     e4c:	10800044 	addi	r2,r2,1
     e50:	d8c02015 	stw	r3,128(sp)
     e54:	44400115 	stw	r17,4(r8)
     e58:	d8801f15 	stw	r2,124(sp)
     e5c:	00c001c4 	movi	r3,7
     e60:	1880a716 	blt	r3,r2,1100 <___vfprintf_internal_r+0x3d4>
     e64:	42000204 	addi	r8,r8,8
     e68:	d9402f17 	ldw	r5,188(sp)
     e6c:	2c4b883a 	add	r5,r5,r17
     e70:	d9402f15 	stw	r5,188(sp)
     e74:	80800007 	ldb	r2,0(r16)
     e78:	1000a826 	beq	r2,zero,111c <___vfprintf_internal_r+0x3f0>
     e7c:	84400047 	ldb	r17,1(r16)
     e80:	00bfffc4 	movi	r2,-1
     e84:	85400044 	addi	r21,r16,1
     e88:	d8002785 	stb	zero,158(sp)
     e8c:	0007883a 	mov	r3,zero
     e90:	000f883a 	mov	r7,zero
     e94:	d8802915 	stw	r2,164(sp)
     e98:	d8003115 	stw	zero,196(sp)
     e9c:	0025883a 	mov	r18,zero
     ea0:	01401604 	movi	r5,88
     ea4:	01800244 	movi	r6,9
     ea8:	02800a84 	movi	r10,42
     eac:	02401b04 	movi	r9,108
     eb0:	ad400044 	addi	r21,r21,1
     eb4:	88bff804 	addi	r2,r17,-32
     eb8:	28830436 	bltu	r5,r2,1acc <___vfprintf_internal_r+0xda0>
     ebc:	100490ba 	slli	r2,r2,2
     ec0:	01000034 	movhi	r4,0
     ec4:	2103b504 	addi	r4,r4,3796
     ec8:	1105883a 	add	r2,r2,r4
     ecc:	10800017 	ldw	r2,0(r2)
     ed0:	1000683a 	jmp	r2
     ed4:	000019ec 	andhi	zero,zero,103
     ed8:	00001acc 	andi	zero,zero,107
     edc:	00001acc 	andi	zero,zero,107
     ee0:	00001a0c 	andi	zero,zero,104
     ee4:	00001acc 	andi	zero,zero,107
     ee8:	00001acc 	andi	zero,zero,107
     eec:	00001acc 	andi	zero,zero,107
     ef0:	00001acc 	andi	zero,zero,107
     ef4:	00001acc 	andi	zero,zero,107
     ef8:	00001acc 	andi	zero,zero,107
     efc:	00001180 	call	118 <__alt_mem_new_sdram_controller_0+0x118>
     f00:	00001928 	cmpgeui	zero,zero,100
     f04:	00001acc 	andi	zero,zero,107
     f08:	00001048 	cmpgei	zero,zero,65
     f0c:	000011a8 	cmpgeui	zero,zero,70
     f10:	00001acc 	andi	zero,zero,107
     f14:	000011e8 	cmpgeui	zero,zero,71
     f18:	000011f4 	movhi	zero,71
     f1c:	000011f4 	movhi	zero,71
     f20:	000011f4 	movhi	zero,71
     f24:	000011f4 	movhi	zero,71
     f28:	000011f4 	movhi	zero,71
     f2c:	000011f4 	movhi	zero,71
     f30:	000011f4 	movhi	zero,71
     f34:	000011f4 	movhi	zero,71
     f38:	000011f4 	movhi	zero,71
     f3c:	00001acc 	andi	zero,zero,107
     f40:	00001acc 	andi	zero,zero,107
     f44:	00001acc 	andi	zero,zero,107
     f48:	00001acc 	andi	zero,zero,107
     f4c:	00001acc 	andi	zero,zero,107
     f50:	00001acc 	andi	zero,zero,107
     f54:	00001acc 	andi	zero,zero,107
     f58:	00001acc 	andi	zero,zero,107
     f5c:	00001acc 	andi	zero,zero,107
     f60:	00001acc 	andi	zero,zero,107
     f64:	00001228 	cmpgeui	zero,zero,72
     f68:	000012e4 	muli	zero,zero,75
     f6c:	00001acc 	andi	zero,zero,107
     f70:	000012e4 	muli	zero,zero,75
     f74:	00001acc 	andi	zero,zero,107
     f78:	00001acc 	andi	zero,zero,107
     f7c:	00001acc 	andi	zero,zero,107
     f80:	00001acc 	andi	zero,zero,107
     f84:	00001384 	movi	zero,78
     f88:	00001acc 	andi	zero,zero,107
     f8c:	00001acc 	andi	zero,zero,107
     f90:	00001390 	cmplti	zero,zero,78
     f94:	00001acc 	andi	zero,zero,107
     f98:	00001acc 	andi	zero,zero,107
     f9c:	00001acc 	andi	zero,zero,107
     fa0:	00001acc 	andi	zero,zero,107
     fa4:	00001acc 	andi	zero,zero,107
     fa8:	00001808 	cmpgei	zero,zero,96
     fac:	00001acc 	andi	zero,zero,107
     fb0:	00001acc 	andi	zero,zero,107
     fb4:	00001868 	cmpgeui	zero,zero,97
     fb8:	00001acc 	andi	zero,zero,107
     fbc:	00001acc 	andi	zero,zero,107
     fc0:	00001acc 	andi	zero,zero,107
     fc4:	00001acc 	andi	zero,zero,107
     fc8:	00001acc 	andi	zero,zero,107
     fcc:	00001acc 	andi	zero,zero,107
     fd0:	00001acc 	andi	zero,zero,107
     fd4:	00001acc 	andi	zero,zero,107
     fd8:	00001acc 	andi	zero,zero,107
     fdc:	00001acc 	andi	zero,zero,107
     fe0:	00001a78 	rdprs	zero,zero,105
     fe4:	00001a18 	cmpnei	zero,zero,104
     fe8:	000012e4 	muli	zero,zero,75
     fec:	000012e4 	muli	zero,zero,75
     ff0:	000012e4 	muli	zero,zero,75
     ff4:	00001a28 	cmpgeui	zero,zero,104
     ff8:	00001a18 	cmpnei	zero,zero,104
     ffc:	00001acc 	andi	zero,zero,107
    1000:	00001acc 	andi	zero,zero,107
    1004:	00001a34 	movhi	zero,104
    1008:	00001acc 	andi	zero,zero,107
    100c:	00001a44 	movi	zero,105
    1010:	00001918 	cmpnei	zero,zero,100
    1014:	00001054 	movui	zero,65
    1018:	00001938 	rdprs	zero,zero,100
    101c:	00001acc 	andi	zero,zero,107
    1020:	00001944 	movi	zero,101
    1024:	00001acc 	andi	zero,zero,107
    1028:	000019a0 	cmpeqi	zero,zero,102
    102c:	00001acc 	andi	zero,zero,107
    1030:	00001acc 	andi	zero,zero,107
    1034:	000019b0 	cmpltui	zero,zero,102
    1038:	d9003117 	ldw	r4,196(sp)
    103c:	d8802d15 	stw	r2,180(sp)
    1040:	0109c83a 	sub	r4,zero,r4
    1044:	d9003115 	stw	r4,196(sp)
    1048:	94800114 	ori	r18,r18,4
    104c:	ac400007 	ldb	r17,0(r21)
    1050:	003f9706 	br	eb0 <__ram_exceptions_end+0xfbfe0c5c>
    1054:	00800c04 	movi	r2,48
    1058:	d9002d17 	ldw	r4,180(sp)
    105c:	d9402917 	ldw	r5,164(sp)
    1060:	d8802705 	stb	r2,156(sp)
    1064:	00801e04 	movi	r2,120
    1068:	d8802745 	stb	r2,157(sp)
    106c:	d8002785 	stb	zero,158(sp)
    1070:	20c00104 	addi	r3,r4,4
    1074:	24c00017 	ldw	r19,0(r4)
    1078:	002d883a 	mov	r22,zero
    107c:	90800094 	ori	r2,r18,2
    1080:	28029a16 	blt	r5,zero,1aec <___vfprintf_internal_r+0xdc0>
    1084:	00bfdfc4 	movi	r2,-129
    1088:	90a4703a 	and	r18,r18,r2
    108c:	d8c02d15 	stw	r3,180(sp)
    1090:	94800094 	ori	r18,r18,2
    1094:	9802871e 	bne	r19,zero,1ab4 <___vfprintf_internal_r+0xd88>
    1098:	00800074 	movhi	r2,1
    109c:	10804904 	addi	r2,r2,292
    10a0:	d8803915 	stw	r2,228(sp)
    10a4:	04401e04 	movi	r17,120
    10a8:	d8802917 	ldw	r2,164(sp)
    10ac:	0039883a 	mov	fp,zero
    10b0:	1001e926 	beq	r2,zero,1858 <___vfprintf_internal_r+0xb2c>
    10b4:	0027883a 	mov	r19,zero
    10b8:	002d883a 	mov	r22,zero
    10bc:	00020506 	br	18d4 <___vfprintf_internal_r+0xba8>
    10c0:	d9002c17 	ldw	r4,176(sp)
    10c4:	b80b883a 	mov	r5,r23
    10c8:	0002ffc0 	call	2ffc <__swsetup_r>
    10cc:	1005ac1e 	bne	r2,zero,2780 <___vfprintf_internal_r+0x1a54>
    10d0:	b880030b 	ldhu	r2,12(r23)
    10d4:	00c00284 	movi	r3,10
    10d8:	1080068c 	andi	r2,r2,26
    10dc:	10ff3c1e 	bne	r2,r3,dd0 <__ram_exceptions_end+0xfbfe0b7c>
    10e0:	b880038f 	ldh	r2,14(r23)
    10e4:	103f3a16 	blt	r2,zero,dd0 <__ram_exceptions_end+0xfbfe0b7c>
    10e8:	d9c02d17 	ldw	r7,180(sp)
    10ec:	d9002c17 	ldw	r4,176(sp)
    10f0:	a80d883a 	mov	r6,r21
    10f4:	b80b883a 	mov	r5,r23
    10f8:	0002f400 	call	2f40 <__sbprintf>
    10fc:	00001106 	br	1144 <___vfprintf_internal_r+0x418>
    1100:	d9002c17 	ldw	r4,176(sp)
    1104:	d9801e04 	addi	r6,sp,120
    1108:	b80b883a 	mov	r5,r23
    110c:	00078440 	call	7844 <__sprint_r>
    1110:	1000081e 	bne	r2,zero,1134 <___vfprintf_internal_r+0x408>
    1114:	da000404 	addi	r8,sp,16
    1118:	003f5306 	br	e68 <__ram_exceptions_end+0xfbfe0c14>
    111c:	d8802017 	ldw	r2,128(sp)
    1120:	10000426 	beq	r2,zero,1134 <___vfprintf_internal_r+0x408>
    1124:	d9002c17 	ldw	r4,176(sp)
    1128:	d9801e04 	addi	r6,sp,120
    112c:	b80b883a 	mov	r5,r23
    1130:	00078440 	call	7844 <__sprint_r>
    1134:	b880030b 	ldhu	r2,12(r23)
    1138:	1080100c 	andi	r2,r2,64
    113c:	1005901e 	bne	r2,zero,2780 <___vfprintf_internal_r+0x1a54>
    1140:	d8802f17 	ldw	r2,188(sp)
    1144:	dfc04717 	ldw	ra,284(sp)
    1148:	df004617 	ldw	fp,280(sp)
    114c:	ddc04517 	ldw	r23,276(sp)
    1150:	dd804417 	ldw	r22,272(sp)
    1154:	dd404317 	ldw	r21,268(sp)
    1158:	dd004217 	ldw	r20,264(sp)
    115c:	dcc04117 	ldw	r19,260(sp)
    1160:	dc804017 	ldw	r18,256(sp)
    1164:	dc403f17 	ldw	r17,252(sp)
    1168:	dc003e17 	ldw	r16,248(sp)
    116c:	dec04804 	addi	sp,sp,288
    1170:	f800283a 	ret
    1174:	d9002c17 	ldw	r4,176(sp)
    1178:	0004fd00 	call	4fd0 <__sinit>
    117c:	003f0406 	br	d90 <__ram_exceptions_end+0xfbfe0b3c>
    1180:	d8802d17 	ldw	r2,180(sp)
    1184:	d9002d17 	ldw	r4,180(sp)
    1188:	10800017 	ldw	r2,0(r2)
    118c:	d8803115 	stw	r2,196(sp)
    1190:	20800104 	addi	r2,r4,4
    1194:	d9003117 	ldw	r4,196(sp)
    1198:	203fa716 	blt	r4,zero,1038 <__ram_exceptions_end+0xfbfe0de4>
    119c:	d8802d15 	stw	r2,180(sp)
    11a0:	ac400007 	ldb	r17,0(r21)
    11a4:	003f4206 	br	eb0 <__ram_exceptions_end+0xfbfe0c5c>
    11a8:	ac400007 	ldb	r17,0(r21)
    11ac:	aac00044 	addi	r11,r21,1
    11b0:	8a872826 	beq	r17,r10,2e54 <___vfprintf_internal_r+0x2128>
    11b4:	88bff404 	addi	r2,r17,-48
    11b8:	0009883a 	mov	r4,zero
    11bc:	30867d36 	bltu	r6,r2,2bb4 <___vfprintf_internal_r+0x1e88>
    11c0:	5c400007 	ldb	r17,0(r11)
    11c4:	210002a4 	muli	r4,r4,10
    11c8:	5d400044 	addi	r21,r11,1
    11cc:	a817883a 	mov	r11,r21
    11d0:	2089883a 	add	r4,r4,r2
    11d4:	88bff404 	addi	r2,r17,-48
    11d8:	30bff92e 	bgeu	r6,r2,11c0 <__ram_exceptions_end+0xfbfe0f6c>
    11dc:	2005c916 	blt	r4,zero,2904 <___vfprintf_internal_r+0x1bd8>
    11e0:	d9002915 	stw	r4,164(sp)
    11e4:	003f3306 	br	eb4 <__ram_exceptions_end+0xfbfe0c60>
    11e8:	94802014 	ori	r18,r18,128
    11ec:	ac400007 	ldb	r17,0(r21)
    11f0:	003f2f06 	br	eb0 <__ram_exceptions_end+0xfbfe0c5c>
    11f4:	a809883a 	mov	r4,r21
    11f8:	d8003115 	stw	zero,196(sp)
    11fc:	88bff404 	addi	r2,r17,-48
    1200:	0017883a 	mov	r11,zero
    1204:	24400007 	ldb	r17,0(r4)
    1208:	5ac002a4 	muli	r11,r11,10
    120c:	ad400044 	addi	r21,r21,1
    1210:	a809883a 	mov	r4,r21
    1214:	12d7883a 	add	r11,r2,r11
    1218:	88bff404 	addi	r2,r17,-48
    121c:	30bff92e 	bgeu	r6,r2,1204 <__ram_exceptions_end+0xfbfe0fb0>
    1220:	dac03115 	stw	r11,196(sp)
    1224:	003f2306 	br	eb4 <__ram_exceptions_end+0xfbfe0c60>
    1228:	18c03fcc 	andi	r3,r3,255
    122c:	18072b1e 	bne	r3,zero,2edc <___vfprintf_internal_r+0x21b0>
    1230:	94800414 	ori	r18,r18,16
    1234:	9080080c 	andi	r2,r18,32
    1238:	10037b26 	beq	r2,zero,2028 <___vfprintf_internal_r+0x12fc>
    123c:	d9402d17 	ldw	r5,180(sp)
    1240:	28800117 	ldw	r2,4(r5)
    1244:	2cc00017 	ldw	r19,0(r5)
    1248:	29400204 	addi	r5,r5,8
    124c:	d9402d15 	stw	r5,180(sp)
    1250:	102d883a 	mov	r22,r2
    1254:	10044b16 	blt	r2,zero,2384 <___vfprintf_internal_r+0x1658>
    1258:	d9402917 	ldw	r5,164(sp)
    125c:	df002783 	ldbu	fp,158(sp)
    1260:	2803bc16 	blt	r5,zero,2154 <___vfprintf_internal_r+0x1428>
    1264:	00ffdfc4 	movi	r3,-129
    1268:	9d84b03a 	or	r2,r19,r22
    126c:	90e4703a 	and	r18,r18,r3
    1270:	10017726 	beq	r2,zero,1850 <___vfprintf_internal_r+0xb24>
    1274:	b0038326 	beq	r22,zero,2084 <___vfprintf_internal_r+0x1358>
    1278:	dc402a15 	stw	r17,168(sp)
    127c:	dc001e04 	addi	r16,sp,120
    1280:	b023883a 	mov	r17,r22
    1284:	402d883a 	mov	r22,r8
    1288:	9809883a 	mov	r4,r19
    128c:	880b883a 	mov	r5,r17
    1290:	01800284 	movi	r6,10
    1294:	000f883a 	mov	r7,zero
    1298:	000a7b80 	call	a7b8 <__umoddi3>
    129c:	10800c04 	addi	r2,r2,48
    12a0:	843fffc4 	addi	r16,r16,-1
    12a4:	9809883a 	mov	r4,r19
    12a8:	880b883a 	mov	r5,r17
    12ac:	80800005 	stb	r2,0(r16)
    12b0:	01800284 	movi	r6,10
    12b4:	000f883a 	mov	r7,zero
    12b8:	000a2400 	call	a240 <__udivdi3>
    12bc:	1027883a 	mov	r19,r2
    12c0:	10c4b03a 	or	r2,r2,r3
    12c4:	1823883a 	mov	r17,r3
    12c8:	103fef1e 	bne	r2,zero,1288 <__ram_exceptions_end+0xfbfe1034>
    12cc:	d8c02817 	ldw	r3,160(sp)
    12d0:	dc402a17 	ldw	r17,168(sp)
    12d4:	b011883a 	mov	r8,r22
    12d8:	1c07c83a 	sub	r3,r3,r16
    12dc:	d8c02e15 	stw	r3,184(sp)
    12e0:	00005906 	br	1448 <___vfprintf_internal_r+0x71c>
    12e4:	18c03fcc 	andi	r3,r3,255
    12e8:	1806fa1e 	bne	r3,zero,2ed4 <___vfprintf_internal_r+0x21a8>
    12ec:	9080020c 	andi	r2,r18,8
    12f0:	10048a26 	beq	r2,zero,251c <___vfprintf_internal_r+0x17f0>
    12f4:	d8c02d17 	ldw	r3,180(sp)
    12f8:	d9002d17 	ldw	r4,180(sp)
    12fc:	d9402d17 	ldw	r5,180(sp)
    1300:	18c00017 	ldw	r3,0(r3)
    1304:	21000117 	ldw	r4,4(r4)
    1308:	29400204 	addi	r5,r5,8
    130c:	d8c03615 	stw	r3,216(sp)
    1310:	d9003815 	stw	r4,224(sp)
    1314:	d9402d15 	stw	r5,180(sp)
    1318:	d9003617 	ldw	r4,216(sp)
    131c:	d9403817 	ldw	r5,224(sp)
    1320:	da003d15 	stw	r8,244(sp)
    1324:	04000044 	movi	r16,1
    1328:	00073d00 	call	73d0 <__fpclassifyd>
    132c:	da003d17 	ldw	r8,244(sp)
    1330:	14041f1e 	bne	r2,r16,23b0 <___vfprintf_internal_r+0x1684>
    1334:	d9003617 	ldw	r4,216(sp)
    1338:	d9403817 	ldw	r5,224(sp)
    133c:	000d883a 	mov	r6,zero
    1340:	000f883a 	mov	r7,zero
    1344:	000bfe80 	call	bfe8 <__ledf2>
    1348:	da003d17 	ldw	r8,244(sp)
    134c:	1005be16 	blt	r2,zero,2a48 <___vfprintf_internal_r+0x1d1c>
    1350:	df002783 	ldbu	fp,158(sp)
    1354:	008011c4 	movi	r2,71
    1358:	1445330e 	bge	r2,r17,2828 <___vfprintf_internal_r+0x1afc>
    135c:	04000074 	movhi	r16,1
    1360:	84004104 	addi	r16,r16,260
    1364:	00c000c4 	movi	r3,3
    1368:	00bfdfc4 	movi	r2,-129
    136c:	d8c02a15 	stw	r3,168(sp)
    1370:	90a4703a 	and	r18,r18,r2
    1374:	d8c02e15 	stw	r3,184(sp)
    1378:	d8002915 	stw	zero,164(sp)
    137c:	d8003215 	stw	zero,200(sp)
    1380:	00003706 	br	1460 <___vfprintf_internal_r+0x734>
    1384:	94800214 	ori	r18,r18,8
    1388:	ac400007 	ldb	r17,0(r21)
    138c:	003ec806 	br	eb0 <__ram_exceptions_end+0xfbfe0c5c>
    1390:	18c03fcc 	andi	r3,r3,255
    1394:	1806db1e 	bne	r3,zero,2f04 <___vfprintf_internal_r+0x21d8>
    1398:	94800414 	ori	r18,r18,16
    139c:	9080080c 	andi	r2,r18,32
    13a0:	1002d826 	beq	r2,zero,1f04 <___vfprintf_internal_r+0x11d8>
    13a4:	d9402d17 	ldw	r5,180(sp)
    13a8:	d8c02917 	ldw	r3,164(sp)
    13ac:	d8002785 	stb	zero,158(sp)
    13b0:	28800204 	addi	r2,r5,8
    13b4:	2cc00017 	ldw	r19,0(r5)
    13b8:	2d800117 	ldw	r22,4(r5)
    13bc:	18048f16 	blt	r3,zero,25fc <___vfprintf_internal_r+0x18d0>
    13c0:	013fdfc4 	movi	r4,-129
    13c4:	9d86b03a 	or	r3,r19,r22
    13c8:	d8802d15 	stw	r2,180(sp)
    13cc:	9124703a 	and	r18,r18,r4
    13d0:	1802d91e 	bne	r3,zero,1f38 <___vfprintf_internal_r+0x120c>
    13d4:	d8c02917 	ldw	r3,164(sp)
    13d8:	0039883a 	mov	fp,zero
    13dc:	1805c326 	beq	r3,zero,2aec <___vfprintf_internal_r+0x1dc0>
    13e0:	0027883a 	mov	r19,zero
    13e4:	002d883a 	mov	r22,zero
    13e8:	dc001e04 	addi	r16,sp,120
    13ec:	9806d0fa 	srli	r3,r19,3
    13f0:	b008977a 	slli	r4,r22,29
    13f4:	b02cd0fa 	srli	r22,r22,3
    13f8:	9cc001cc 	andi	r19,r19,7
    13fc:	98800c04 	addi	r2,r19,48
    1400:	843fffc4 	addi	r16,r16,-1
    1404:	20e6b03a 	or	r19,r4,r3
    1408:	80800005 	stb	r2,0(r16)
    140c:	9d86b03a 	or	r3,r19,r22
    1410:	183ff61e 	bne	r3,zero,13ec <__ram_exceptions_end+0xfbfe1198>
    1414:	90c0004c 	andi	r3,r18,1
    1418:	18013b26 	beq	r3,zero,1908 <___vfprintf_internal_r+0xbdc>
    141c:	10803fcc 	andi	r2,r2,255
    1420:	1080201c 	xori	r2,r2,128
    1424:	10bfe004 	addi	r2,r2,-128
    1428:	00c00c04 	movi	r3,48
    142c:	10c13626 	beq	r2,r3,1908 <___vfprintf_internal_r+0xbdc>
    1430:	80ffffc5 	stb	r3,-1(r16)
    1434:	d8c02817 	ldw	r3,160(sp)
    1438:	80bfffc4 	addi	r2,r16,-1
    143c:	1021883a 	mov	r16,r2
    1440:	1887c83a 	sub	r3,r3,r2
    1444:	d8c02e15 	stw	r3,184(sp)
    1448:	d8802e17 	ldw	r2,184(sp)
    144c:	d9002917 	ldw	r4,164(sp)
    1450:	1100010e 	bge	r2,r4,1458 <___vfprintf_internal_r+0x72c>
    1454:	2005883a 	mov	r2,r4
    1458:	d8802a15 	stw	r2,168(sp)
    145c:	d8003215 	stw	zero,200(sp)
    1460:	e7003fcc 	andi	fp,fp,255
    1464:	e700201c 	xori	fp,fp,128
    1468:	e73fe004 	addi	fp,fp,-128
    146c:	e0000326 	beq	fp,zero,147c <___vfprintf_internal_r+0x750>
    1470:	d8c02a17 	ldw	r3,168(sp)
    1474:	18c00044 	addi	r3,r3,1
    1478:	d8c02a15 	stw	r3,168(sp)
    147c:	90c0008c 	andi	r3,r18,2
    1480:	d8c02b15 	stw	r3,172(sp)
    1484:	18000326 	beq	r3,zero,1494 <___vfprintf_internal_r+0x768>
    1488:	d8c02a17 	ldw	r3,168(sp)
    148c:	18c00084 	addi	r3,r3,2
    1490:	d8c02a15 	stw	r3,168(sp)
    1494:	90c0210c 	andi	r3,r18,132
    1498:	d8c03015 	stw	r3,192(sp)
    149c:	1801a31e 	bne	r3,zero,1b2c <___vfprintf_internal_r+0xe00>
    14a0:	d9003117 	ldw	r4,196(sp)
    14a4:	d8c02a17 	ldw	r3,168(sp)
    14a8:	20e7c83a 	sub	r19,r4,r3
    14ac:	04c19f0e 	bge	zero,r19,1b2c <___vfprintf_internal_r+0xe00>
    14b0:	02400404 	movi	r9,16
    14b4:	d8c02017 	ldw	r3,128(sp)
    14b8:	d8801f17 	ldw	r2,124(sp)
    14bc:	4cc50d0e 	bge	r9,r19,28f4 <___vfprintf_internal_r+0x1bc8>
    14c0:	01400074 	movhi	r5,1
    14c4:	29405484 	addi	r5,r5,338
    14c8:	dc403b15 	stw	r17,236(sp)
    14cc:	d9403515 	stw	r5,212(sp)
    14d0:	9823883a 	mov	r17,r19
    14d4:	482d883a 	mov	r22,r9
    14d8:	9027883a 	mov	r19,r18
    14dc:	070001c4 	movi	fp,7
    14e0:	8025883a 	mov	r18,r16
    14e4:	dc002c17 	ldw	r16,176(sp)
    14e8:	00000306 	br	14f8 <___vfprintf_internal_r+0x7cc>
    14ec:	8c7ffc04 	addi	r17,r17,-16
    14f0:	42000204 	addi	r8,r8,8
    14f4:	b440130e 	bge	r22,r17,1544 <___vfprintf_internal_r+0x818>
    14f8:	01000074 	movhi	r4,1
    14fc:	18c00404 	addi	r3,r3,16
    1500:	10800044 	addi	r2,r2,1
    1504:	21005484 	addi	r4,r4,338
    1508:	41000015 	stw	r4,0(r8)
    150c:	45800115 	stw	r22,4(r8)
    1510:	d8c02015 	stw	r3,128(sp)
    1514:	d8801f15 	stw	r2,124(sp)
    1518:	e0bff40e 	bge	fp,r2,14ec <__ram_exceptions_end+0xfbfe1298>
    151c:	d9801e04 	addi	r6,sp,120
    1520:	b80b883a 	mov	r5,r23
    1524:	8009883a 	mov	r4,r16
    1528:	00078440 	call	7844 <__sprint_r>
    152c:	103f011e 	bne	r2,zero,1134 <__ram_exceptions_end+0xfbfe0ee0>
    1530:	8c7ffc04 	addi	r17,r17,-16
    1534:	d8c02017 	ldw	r3,128(sp)
    1538:	d8801f17 	ldw	r2,124(sp)
    153c:	da000404 	addi	r8,sp,16
    1540:	b47fed16 	blt	r22,r17,14f8 <__ram_exceptions_end+0xfbfe12a4>
    1544:	9021883a 	mov	r16,r18
    1548:	9825883a 	mov	r18,r19
    154c:	8827883a 	mov	r19,r17
    1550:	dc403b17 	ldw	r17,236(sp)
    1554:	d9403517 	ldw	r5,212(sp)
    1558:	98c7883a 	add	r3,r19,r3
    155c:	10800044 	addi	r2,r2,1
    1560:	41400015 	stw	r5,0(r8)
    1564:	44c00115 	stw	r19,4(r8)
    1568:	d8c02015 	stw	r3,128(sp)
    156c:	d8801f15 	stw	r2,124(sp)
    1570:	010001c4 	movi	r4,7
    1574:	2082a316 	blt	r4,r2,2004 <___vfprintf_internal_r+0x12d8>
    1578:	df002787 	ldb	fp,158(sp)
    157c:	42000204 	addi	r8,r8,8
    1580:	e0000c26 	beq	fp,zero,15b4 <___vfprintf_internal_r+0x888>
    1584:	d8801f17 	ldw	r2,124(sp)
    1588:	d9002784 	addi	r4,sp,158
    158c:	18c00044 	addi	r3,r3,1
    1590:	10800044 	addi	r2,r2,1
    1594:	41000015 	stw	r4,0(r8)
    1598:	01000044 	movi	r4,1
    159c:	41000115 	stw	r4,4(r8)
    15a0:	d8c02015 	stw	r3,128(sp)
    15a4:	d8801f15 	stw	r2,124(sp)
    15a8:	010001c4 	movi	r4,7
    15ac:	20823c16 	blt	r4,r2,1ea0 <___vfprintf_internal_r+0x1174>
    15b0:	42000204 	addi	r8,r8,8
    15b4:	d8802b17 	ldw	r2,172(sp)
    15b8:	10000c26 	beq	r2,zero,15ec <___vfprintf_internal_r+0x8c0>
    15bc:	d8801f17 	ldw	r2,124(sp)
    15c0:	d9002704 	addi	r4,sp,156
    15c4:	18c00084 	addi	r3,r3,2
    15c8:	10800044 	addi	r2,r2,1
    15cc:	41000015 	stw	r4,0(r8)
    15d0:	01000084 	movi	r4,2
    15d4:	41000115 	stw	r4,4(r8)
    15d8:	d8c02015 	stw	r3,128(sp)
    15dc:	d8801f15 	stw	r2,124(sp)
    15e0:	010001c4 	movi	r4,7
    15e4:	20823616 	blt	r4,r2,1ec0 <___vfprintf_internal_r+0x1194>
    15e8:	42000204 	addi	r8,r8,8
    15ec:	d9003017 	ldw	r4,192(sp)
    15f0:	00802004 	movi	r2,128
    15f4:	20819926 	beq	r4,r2,1c5c <___vfprintf_internal_r+0xf30>
    15f8:	d9402917 	ldw	r5,164(sp)
    15fc:	d8802e17 	ldw	r2,184(sp)
    1600:	28adc83a 	sub	r22,r5,r2
    1604:	0580310e 	bge	zero,r22,16cc <___vfprintf_internal_r+0x9a0>
    1608:	07000404 	movi	fp,16
    160c:	d8801f17 	ldw	r2,124(sp)
    1610:	e584140e 	bge	fp,r22,2664 <___vfprintf_internal_r+0x1938>
    1614:	01400074 	movhi	r5,1
    1618:	29405084 	addi	r5,r5,322
    161c:	dc402915 	stw	r17,164(sp)
    1620:	d9402b15 	stw	r5,172(sp)
    1624:	b023883a 	mov	r17,r22
    1628:	04c001c4 	movi	r19,7
    162c:	a82d883a 	mov	r22,r21
    1630:	902b883a 	mov	r21,r18
    1634:	8025883a 	mov	r18,r16
    1638:	dc002c17 	ldw	r16,176(sp)
    163c:	00000306 	br	164c <___vfprintf_internal_r+0x920>
    1640:	8c7ffc04 	addi	r17,r17,-16
    1644:	42000204 	addi	r8,r8,8
    1648:	e440110e 	bge	fp,r17,1690 <___vfprintf_internal_r+0x964>
    164c:	18c00404 	addi	r3,r3,16
    1650:	10800044 	addi	r2,r2,1
    1654:	45000015 	stw	r20,0(r8)
    1658:	47000115 	stw	fp,4(r8)
    165c:	d8c02015 	stw	r3,128(sp)
    1660:	d8801f15 	stw	r2,124(sp)
    1664:	98bff60e 	bge	r19,r2,1640 <__ram_exceptions_end+0xfbfe13ec>
    1668:	d9801e04 	addi	r6,sp,120
    166c:	b80b883a 	mov	r5,r23
    1670:	8009883a 	mov	r4,r16
    1674:	00078440 	call	7844 <__sprint_r>
    1678:	103eae1e 	bne	r2,zero,1134 <__ram_exceptions_end+0xfbfe0ee0>
    167c:	8c7ffc04 	addi	r17,r17,-16
    1680:	d8c02017 	ldw	r3,128(sp)
    1684:	d8801f17 	ldw	r2,124(sp)
    1688:	da000404 	addi	r8,sp,16
    168c:	e47fef16 	blt	fp,r17,164c <__ram_exceptions_end+0xfbfe13f8>
    1690:	9021883a 	mov	r16,r18
    1694:	a825883a 	mov	r18,r21
    1698:	b02b883a 	mov	r21,r22
    169c:	882d883a 	mov	r22,r17
    16a0:	dc402917 	ldw	r17,164(sp)
    16a4:	d9002b17 	ldw	r4,172(sp)
    16a8:	1d87883a 	add	r3,r3,r22
    16ac:	10800044 	addi	r2,r2,1
    16b0:	41000015 	stw	r4,0(r8)
    16b4:	45800115 	stw	r22,4(r8)
    16b8:	d8c02015 	stw	r3,128(sp)
    16bc:	d8801f15 	stw	r2,124(sp)
    16c0:	010001c4 	movi	r4,7
    16c4:	2081ee16 	blt	r4,r2,1e80 <___vfprintf_internal_r+0x1154>
    16c8:	42000204 	addi	r8,r8,8
    16cc:	9080400c 	andi	r2,r18,256
    16d0:	1001181e 	bne	r2,zero,1b34 <___vfprintf_internal_r+0xe08>
    16d4:	d9402e17 	ldw	r5,184(sp)
    16d8:	d8801f17 	ldw	r2,124(sp)
    16dc:	44000015 	stw	r16,0(r8)
    16e0:	1947883a 	add	r3,r3,r5
    16e4:	10800044 	addi	r2,r2,1
    16e8:	41400115 	stw	r5,4(r8)
    16ec:	d8c02015 	stw	r3,128(sp)
    16f0:	d8801f15 	stw	r2,124(sp)
    16f4:	010001c4 	movi	r4,7
    16f8:	2081d316 	blt	r4,r2,1e48 <___vfprintf_internal_r+0x111c>
    16fc:	42000204 	addi	r8,r8,8
    1700:	9480010c 	andi	r18,r18,4
    1704:	90003226 	beq	r18,zero,17d0 <___vfprintf_internal_r+0xaa4>
    1708:	d9403117 	ldw	r5,196(sp)
    170c:	d8802a17 	ldw	r2,168(sp)
    1710:	28a1c83a 	sub	r16,r5,r2
    1714:	04002e0e 	bge	zero,r16,17d0 <___vfprintf_internal_r+0xaa4>
    1718:	04400404 	movi	r17,16
    171c:	d8801f17 	ldw	r2,124(sp)
    1720:	8c04a20e 	bge	r17,r16,29ac <___vfprintf_internal_r+0x1c80>
    1724:	01400074 	movhi	r5,1
    1728:	29405484 	addi	r5,r5,338
    172c:	d9403515 	stw	r5,212(sp)
    1730:	048001c4 	movi	r18,7
    1734:	dcc02c17 	ldw	r19,176(sp)
    1738:	00000306 	br	1748 <___vfprintf_internal_r+0xa1c>
    173c:	843ffc04 	addi	r16,r16,-16
    1740:	42000204 	addi	r8,r8,8
    1744:	8c00130e 	bge	r17,r16,1794 <___vfprintf_internal_r+0xa68>
    1748:	01000074 	movhi	r4,1
    174c:	18c00404 	addi	r3,r3,16
    1750:	10800044 	addi	r2,r2,1
    1754:	21005484 	addi	r4,r4,338
    1758:	41000015 	stw	r4,0(r8)
    175c:	44400115 	stw	r17,4(r8)
    1760:	d8c02015 	stw	r3,128(sp)
    1764:	d8801f15 	stw	r2,124(sp)
    1768:	90bff40e 	bge	r18,r2,173c <__ram_exceptions_end+0xfbfe14e8>
    176c:	d9801e04 	addi	r6,sp,120
    1770:	b80b883a 	mov	r5,r23
    1774:	9809883a 	mov	r4,r19
    1778:	00078440 	call	7844 <__sprint_r>
    177c:	103e6d1e 	bne	r2,zero,1134 <__ram_exceptions_end+0xfbfe0ee0>
    1780:	843ffc04 	addi	r16,r16,-16
    1784:	d8c02017 	ldw	r3,128(sp)
    1788:	d8801f17 	ldw	r2,124(sp)
    178c:	da000404 	addi	r8,sp,16
    1790:	8c3fed16 	blt	r17,r16,1748 <__ram_exceptions_end+0xfbfe14f4>
    1794:	d9403517 	ldw	r5,212(sp)
    1798:	1c07883a 	add	r3,r3,r16
    179c:	10800044 	addi	r2,r2,1
    17a0:	41400015 	stw	r5,0(r8)
    17a4:	44000115 	stw	r16,4(r8)
    17a8:	d8c02015 	stw	r3,128(sp)
    17ac:	d8801f15 	stw	r2,124(sp)
    17b0:	010001c4 	movi	r4,7
    17b4:	2080060e 	bge	r4,r2,17d0 <___vfprintf_internal_r+0xaa4>
    17b8:	d9002c17 	ldw	r4,176(sp)
    17bc:	d9801e04 	addi	r6,sp,120
    17c0:	b80b883a 	mov	r5,r23
    17c4:	00078440 	call	7844 <__sprint_r>
    17c8:	103e5a1e 	bne	r2,zero,1134 <__ram_exceptions_end+0xfbfe0ee0>
    17cc:	d8c02017 	ldw	r3,128(sp)
    17d0:	d8803117 	ldw	r2,196(sp)
    17d4:	d9002a17 	ldw	r4,168(sp)
    17d8:	1100010e 	bge	r2,r4,17e0 <___vfprintf_internal_r+0xab4>
    17dc:	2005883a 	mov	r2,r4
    17e0:	d9402f17 	ldw	r5,188(sp)
    17e4:	288b883a 	add	r5,r5,r2
    17e8:	d9402f15 	stw	r5,188(sp)
    17ec:	18019e1e 	bne	r3,zero,1e68 <___vfprintf_internal_r+0x113c>
    17f0:	a8800007 	ldb	r2,0(r21)
    17f4:	d8001f15 	stw	zero,124(sp)
    17f8:	da000404 	addi	r8,sp,16
    17fc:	103d851e 	bne	r2,zero,e14 <__ram_exceptions_end+0xfbfe0bc0>
    1800:	a821883a 	mov	r16,r21
    1804:	003d9b06 	br	e74 <__ram_exceptions_end+0xfbfe0c20>
    1808:	18c03fcc 	andi	r3,r3,255
    180c:	1805c11e 	bne	r3,zero,2f14 <___vfprintf_internal_r+0x21e8>
    1810:	94800414 	ori	r18,r18,16
    1814:	9080080c 	andi	r2,r18,32
    1818:	10020c26 	beq	r2,zero,204c <___vfprintf_internal_r+0x1320>
    181c:	d8802d17 	ldw	r2,180(sp)
    1820:	d9002917 	ldw	r4,164(sp)
    1824:	d8002785 	stb	zero,158(sp)
    1828:	10c00204 	addi	r3,r2,8
    182c:	14c00017 	ldw	r19,0(r2)
    1830:	15800117 	ldw	r22,4(r2)
    1834:	20040f16 	blt	r4,zero,2874 <___vfprintf_internal_r+0x1b48>
    1838:	013fdfc4 	movi	r4,-129
    183c:	9d84b03a 	or	r2,r19,r22
    1840:	d8c02d15 	stw	r3,180(sp)
    1844:	9124703a 	and	r18,r18,r4
    1848:	0039883a 	mov	fp,zero
    184c:	103e891e 	bne	r2,zero,1274 <__ram_exceptions_end+0xfbfe1020>
    1850:	d9002917 	ldw	r4,164(sp)
    1854:	2002c11e 	bne	r4,zero,235c <___vfprintf_internal_r+0x1630>
    1858:	d8002915 	stw	zero,164(sp)
    185c:	d8002e15 	stw	zero,184(sp)
    1860:	dc001e04 	addi	r16,sp,120
    1864:	003ef806 	br	1448 <__ram_exceptions_end+0xfbfe11f4>
    1868:	18c03fcc 	andi	r3,r3,255
    186c:	18059d1e 	bne	r3,zero,2ee4 <___vfprintf_internal_r+0x21b8>
    1870:	01400074 	movhi	r5,1
    1874:	29404404 	addi	r5,r5,272
    1878:	d9403915 	stw	r5,228(sp)
    187c:	9080080c 	andi	r2,r18,32
    1880:	10005226 	beq	r2,zero,19cc <___vfprintf_internal_r+0xca0>
    1884:	d8802d17 	ldw	r2,180(sp)
    1888:	14c00017 	ldw	r19,0(r2)
    188c:	15800117 	ldw	r22,4(r2)
    1890:	10800204 	addi	r2,r2,8
    1894:	d8802d15 	stw	r2,180(sp)
    1898:	9080004c 	andi	r2,r18,1
    189c:	10019026 	beq	r2,zero,1ee0 <___vfprintf_internal_r+0x11b4>
    18a0:	9d84b03a 	or	r2,r19,r22
    18a4:	10036926 	beq	r2,zero,264c <___vfprintf_internal_r+0x1920>
    18a8:	d8c02917 	ldw	r3,164(sp)
    18ac:	00800c04 	movi	r2,48
    18b0:	d8802705 	stb	r2,156(sp)
    18b4:	dc402745 	stb	r17,157(sp)
    18b8:	d8002785 	stb	zero,158(sp)
    18bc:	90800094 	ori	r2,r18,2
    18c0:	18045d16 	blt	r3,zero,2a38 <___vfprintf_internal_r+0x1d0c>
    18c4:	00bfdfc4 	movi	r2,-129
    18c8:	90a4703a 	and	r18,r18,r2
    18cc:	94800094 	ori	r18,r18,2
    18d0:	0039883a 	mov	fp,zero
    18d4:	d9003917 	ldw	r4,228(sp)
    18d8:	dc001e04 	addi	r16,sp,120
    18dc:	988003cc 	andi	r2,r19,15
    18e0:	b006973a 	slli	r3,r22,28
    18e4:	2085883a 	add	r2,r4,r2
    18e8:	9826d13a 	srli	r19,r19,4
    18ec:	10800003 	ldbu	r2,0(r2)
    18f0:	b02cd13a 	srli	r22,r22,4
    18f4:	843fffc4 	addi	r16,r16,-1
    18f8:	1ce6b03a 	or	r19,r3,r19
    18fc:	80800005 	stb	r2,0(r16)
    1900:	9d84b03a 	or	r2,r19,r22
    1904:	103ff51e 	bne	r2,zero,18dc <__ram_exceptions_end+0xfbfe1688>
    1908:	d8c02817 	ldw	r3,160(sp)
    190c:	1c07c83a 	sub	r3,r3,r16
    1910:	d8c02e15 	stw	r3,184(sp)
    1914:	003ecc06 	br	1448 <__ram_exceptions_end+0xfbfe11f4>
    1918:	18c03fcc 	andi	r3,r3,255
    191c:	183e9f26 	beq	r3,zero,139c <__ram_exceptions_end+0xfbfe1148>
    1920:	d9c02785 	stb	r7,158(sp)
    1924:	003e9d06 	br	139c <__ram_exceptions_end+0xfbfe1148>
    1928:	00c00044 	movi	r3,1
    192c:	01c00ac4 	movi	r7,43
    1930:	ac400007 	ldb	r17,0(r21)
    1934:	003d5e06 	br	eb0 <__ram_exceptions_end+0xfbfe0c5c>
    1938:	94800814 	ori	r18,r18,32
    193c:	ac400007 	ldb	r17,0(r21)
    1940:	003d5b06 	br	eb0 <__ram_exceptions_end+0xfbfe0c5c>
    1944:	d8c02d17 	ldw	r3,180(sp)
    1948:	d8002785 	stb	zero,158(sp)
    194c:	1c000017 	ldw	r16,0(r3)
    1950:	1cc00104 	addi	r19,r3,4
    1954:	80041926 	beq	r16,zero,29bc <___vfprintf_internal_r+0x1c90>
    1958:	d9002917 	ldw	r4,164(sp)
    195c:	2003d016 	blt	r4,zero,28a0 <___vfprintf_internal_r+0x1b74>
    1960:	200d883a 	mov	r6,r4
    1964:	000b883a 	mov	r5,zero
    1968:	8009883a 	mov	r4,r16
    196c:	da003d15 	stw	r8,244(sp)
    1970:	00060800 	call	6080 <memchr>
    1974:	da003d17 	ldw	r8,244(sp)
    1978:	10045426 	beq	r2,zero,2acc <___vfprintf_internal_r+0x1da0>
    197c:	1405c83a 	sub	r2,r2,r16
    1980:	d8802e15 	stw	r2,184(sp)
    1984:	1003cc16 	blt	r2,zero,28b8 <___vfprintf_internal_r+0x1b8c>
    1988:	df002783 	ldbu	fp,158(sp)
    198c:	d8802a15 	stw	r2,168(sp)
    1990:	dcc02d15 	stw	r19,180(sp)
    1994:	d8002915 	stw	zero,164(sp)
    1998:	d8003215 	stw	zero,200(sp)
    199c:	003eb006 	br	1460 <__ram_exceptions_end+0xfbfe120c>
    19a0:	18c03fcc 	andi	r3,r3,255
    19a4:	183f9b26 	beq	r3,zero,1814 <__ram_exceptions_end+0xfbfe15c0>
    19a8:	d9c02785 	stb	r7,158(sp)
    19ac:	003f9906 	br	1814 <__ram_exceptions_end+0xfbfe15c0>
    19b0:	18c03fcc 	andi	r3,r3,255
    19b4:	1805551e 	bne	r3,zero,2f0c <___vfprintf_internal_r+0x21e0>
    19b8:	01400074 	movhi	r5,1
    19bc:	29404904 	addi	r5,r5,292
    19c0:	d9403915 	stw	r5,228(sp)
    19c4:	9080080c 	andi	r2,r18,32
    19c8:	103fae1e 	bne	r2,zero,1884 <__ram_exceptions_end+0xfbfe1630>
    19cc:	9080040c 	andi	r2,r18,16
    19d0:	1002de26 	beq	r2,zero,254c <___vfprintf_internal_r+0x1820>
    19d4:	d8c02d17 	ldw	r3,180(sp)
    19d8:	002d883a 	mov	r22,zero
    19dc:	1cc00017 	ldw	r19,0(r3)
    19e0:	18c00104 	addi	r3,r3,4
    19e4:	d8c02d15 	stw	r3,180(sp)
    19e8:	003fab06 	br	1898 <__ram_exceptions_end+0xfbfe1644>
    19ec:	38803fcc 	andi	r2,r7,255
    19f0:	1080201c 	xori	r2,r2,128
    19f4:	10bfe004 	addi	r2,r2,-128
    19f8:	1002d21e 	bne	r2,zero,2544 <___vfprintf_internal_r+0x1818>
    19fc:	00c00044 	movi	r3,1
    1a00:	01c00804 	movi	r7,32
    1a04:	ac400007 	ldb	r17,0(r21)
    1a08:	003d2906 	br	eb0 <__ram_exceptions_end+0xfbfe0c5c>
    1a0c:	94800054 	ori	r18,r18,1
    1a10:	ac400007 	ldb	r17,0(r21)
    1a14:	003d2606 	br	eb0 <__ram_exceptions_end+0xfbfe0c5c>
    1a18:	18c03fcc 	andi	r3,r3,255
    1a1c:	183e0526 	beq	r3,zero,1234 <__ram_exceptions_end+0xfbfe0fe0>
    1a20:	d9c02785 	stb	r7,158(sp)
    1a24:	003e0306 	br	1234 <__ram_exceptions_end+0xfbfe0fe0>
    1a28:	94801014 	ori	r18,r18,64
    1a2c:	ac400007 	ldb	r17,0(r21)
    1a30:	003d1f06 	br	eb0 <__ram_exceptions_end+0xfbfe0c5c>
    1a34:	ac400007 	ldb	r17,0(r21)
    1a38:	8a438726 	beq	r17,r9,2858 <___vfprintf_internal_r+0x1b2c>
    1a3c:	94800414 	ori	r18,r18,16
    1a40:	003d1b06 	br	eb0 <__ram_exceptions_end+0xfbfe0c5c>
    1a44:	18c03fcc 	andi	r3,r3,255
    1a48:	1805341e 	bne	r3,zero,2f1c <___vfprintf_internal_r+0x21f0>
    1a4c:	9080080c 	andi	r2,r18,32
    1a50:	1002cd26 	beq	r2,zero,2588 <___vfprintf_internal_r+0x185c>
    1a54:	d9402d17 	ldw	r5,180(sp)
    1a58:	d9002f17 	ldw	r4,188(sp)
    1a5c:	28800017 	ldw	r2,0(r5)
    1a60:	2007d7fa 	srai	r3,r4,31
    1a64:	29400104 	addi	r5,r5,4
    1a68:	d9402d15 	stw	r5,180(sp)
    1a6c:	11000015 	stw	r4,0(r2)
    1a70:	10c00115 	stw	r3,4(r2)
    1a74:	003ce506 	br	e0c <__ram_exceptions_end+0xfbfe0bb8>
    1a78:	d8c02d17 	ldw	r3,180(sp)
    1a7c:	d9002d17 	ldw	r4,180(sp)
    1a80:	d8002785 	stb	zero,158(sp)
    1a84:	18800017 	ldw	r2,0(r3)
    1a88:	21000104 	addi	r4,r4,4
    1a8c:	00c00044 	movi	r3,1
    1a90:	d8c02a15 	stw	r3,168(sp)
    1a94:	d8801405 	stb	r2,80(sp)
    1a98:	d9002d15 	stw	r4,180(sp)
    1a9c:	d8c02e15 	stw	r3,184(sp)
    1aa0:	d8002915 	stw	zero,164(sp)
    1aa4:	d8003215 	stw	zero,200(sp)
    1aa8:	dc001404 	addi	r16,sp,80
    1aac:	0039883a 	mov	fp,zero
    1ab0:	003e7206 	br	147c <__ram_exceptions_end+0xfbfe1228>
    1ab4:	01000074 	movhi	r4,1
    1ab8:	21004904 	addi	r4,r4,292
    1abc:	0039883a 	mov	fp,zero
    1ac0:	d9003915 	stw	r4,228(sp)
    1ac4:	04401e04 	movi	r17,120
    1ac8:	003f8206 	br	18d4 <__ram_exceptions_end+0xfbfe1680>
    1acc:	18c03fcc 	andi	r3,r3,255
    1ad0:	1805061e 	bne	r3,zero,2eec <___vfprintf_internal_r+0x21c0>
    1ad4:	883d9126 	beq	r17,zero,111c <__ram_exceptions_end+0xfbfe0ec8>
    1ad8:	00c00044 	movi	r3,1
    1adc:	d8c02a15 	stw	r3,168(sp)
    1ae0:	dc401405 	stb	r17,80(sp)
    1ae4:	d8002785 	stb	zero,158(sp)
    1ae8:	003fec06 	br	1a9c <__ram_exceptions_end+0xfbfe1848>
    1aec:	01400074 	movhi	r5,1
    1af0:	29404904 	addi	r5,r5,292
    1af4:	d9403915 	stw	r5,228(sp)
    1af8:	d8c02d15 	stw	r3,180(sp)
    1afc:	1025883a 	mov	r18,r2
    1b00:	04401e04 	movi	r17,120
    1b04:	9d84b03a 	or	r2,r19,r22
    1b08:	1000fc1e 	bne	r2,zero,1efc <___vfprintf_internal_r+0x11d0>
    1b0c:	0039883a 	mov	fp,zero
    1b10:	00800084 	movi	r2,2
    1b14:	10803fcc 	andi	r2,r2,255
    1b18:	00c00044 	movi	r3,1
    1b1c:	10c20f26 	beq	r2,r3,235c <___vfprintf_internal_r+0x1630>
    1b20:	00c00084 	movi	r3,2
    1b24:	10fd6326 	beq	r2,r3,10b4 <__ram_exceptions_end+0xfbfe0e60>
    1b28:	003e2d06 	br	13e0 <__ram_exceptions_end+0xfbfe118c>
    1b2c:	d8c02017 	ldw	r3,128(sp)
    1b30:	003e9306 	br	1580 <__ram_exceptions_end+0xfbfe132c>
    1b34:	00801944 	movi	r2,101
    1b38:	14407e0e 	bge	r2,r17,1d34 <___vfprintf_internal_r+0x1008>
    1b3c:	d9003617 	ldw	r4,216(sp)
    1b40:	d9403817 	ldw	r5,224(sp)
    1b44:	000d883a 	mov	r6,zero
    1b48:	000f883a 	mov	r7,zero
    1b4c:	d8c03c15 	stw	r3,240(sp)
    1b50:	da003d15 	stw	r8,244(sp)
    1b54:	000be840 	call	be84 <__eqdf2>
    1b58:	d8c03c17 	ldw	r3,240(sp)
    1b5c:	da003d17 	ldw	r8,244(sp)
    1b60:	1000f71e 	bne	r2,zero,1f40 <___vfprintf_internal_r+0x1214>
    1b64:	d8801f17 	ldw	r2,124(sp)
    1b68:	01000074 	movhi	r4,1
    1b6c:	21005004 	addi	r4,r4,320
    1b70:	18c00044 	addi	r3,r3,1
    1b74:	10800044 	addi	r2,r2,1
    1b78:	41000015 	stw	r4,0(r8)
    1b7c:	01000044 	movi	r4,1
    1b80:	41000115 	stw	r4,4(r8)
    1b84:	d8c02015 	stw	r3,128(sp)
    1b88:	d8801f15 	stw	r2,124(sp)
    1b8c:	010001c4 	movi	r4,7
    1b90:	2082b816 	blt	r4,r2,2674 <___vfprintf_internal_r+0x1948>
    1b94:	42000204 	addi	r8,r8,8
    1b98:	d8802617 	ldw	r2,152(sp)
    1b9c:	d9403317 	ldw	r5,204(sp)
    1ba0:	11400216 	blt	r2,r5,1bac <___vfprintf_internal_r+0xe80>
    1ba4:	9080004c 	andi	r2,r18,1
    1ba8:	103ed526 	beq	r2,zero,1700 <__ram_exceptions_end+0xfbfe14ac>
    1bac:	d8803717 	ldw	r2,220(sp)
    1bb0:	d9003417 	ldw	r4,208(sp)
    1bb4:	d9403717 	ldw	r5,220(sp)
    1bb8:	1887883a 	add	r3,r3,r2
    1bbc:	d8801f17 	ldw	r2,124(sp)
    1bc0:	41000015 	stw	r4,0(r8)
    1bc4:	41400115 	stw	r5,4(r8)
    1bc8:	10800044 	addi	r2,r2,1
    1bcc:	d8c02015 	stw	r3,128(sp)
    1bd0:	d8801f15 	stw	r2,124(sp)
    1bd4:	010001c4 	movi	r4,7
    1bd8:	20832916 	blt	r4,r2,2880 <___vfprintf_internal_r+0x1b54>
    1bdc:	42000204 	addi	r8,r8,8
    1be0:	d8803317 	ldw	r2,204(sp)
    1be4:	143fffc4 	addi	r16,r2,-1
    1be8:	043ec50e 	bge	zero,r16,1700 <__ram_exceptions_end+0xfbfe14ac>
    1bec:	04400404 	movi	r17,16
    1bf0:	d8801f17 	ldw	r2,124(sp)
    1bf4:	8c00880e 	bge	r17,r16,1e18 <___vfprintf_internal_r+0x10ec>
    1bf8:	01400074 	movhi	r5,1
    1bfc:	29405084 	addi	r5,r5,322
    1c00:	d9402b15 	stw	r5,172(sp)
    1c04:	058001c4 	movi	r22,7
    1c08:	dcc02c17 	ldw	r19,176(sp)
    1c0c:	00000306 	br	1c1c <___vfprintf_internal_r+0xef0>
    1c10:	42000204 	addi	r8,r8,8
    1c14:	843ffc04 	addi	r16,r16,-16
    1c18:	8c00820e 	bge	r17,r16,1e24 <___vfprintf_internal_r+0x10f8>
    1c1c:	18c00404 	addi	r3,r3,16
    1c20:	10800044 	addi	r2,r2,1
    1c24:	45000015 	stw	r20,0(r8)
    1c28:	44400115 	stw	r17,4(r8)
    1c2c:	d8c02015 	stw	r3,128(sp)
    1c30:	d8801f15 	stw	r2,124(sp)
    1c34:	b0bff60e 	bge	r22,r2,1c10 <__ram_exceptions_end+0xfbfe19bc>
    1c38:	d9801e04 	addi	r6,sp,120
    1c3c:	b80b883a 	mov	r5,r23
    1c40:	9809883a 	mov	r4,r19
    1c44:	00078440 	call	7844 <__sprint_r>
    1c48:	103d3a1e 	bne	r2,zero,1134 <__ram_exceptions_end+0xfbfe0ee0>
    1c4c:	d8c02017 	ldw	r3,128(sp)
    1c50:	d8801f17 	ldw	r2,124(sp)
    1c54:	da000404 	addi	r8,sp,16
    1c58:	003fee06 	br	1c14 <__ram_exceptions_end+0xfbfe19c0>
    1c5c:	d9403117 	ldw	r5,196(sp)
    1c60:	d8802a17 	ldw	r2,168(sp)
    1c64:	28adc83a 	sub	r22,r5,r2
    1c68:	05be630e 	bge	zero,r22,15f8 <__ram_exceptions_end+0xfbfe13a4>
    1c6c:	07000404 	movi	fp,16
    1c70:	d8801f17 	ldw	r2,124(sp)
    1c74:	e5838f0e 	bge	fp,r22,2ab4 <___vfprintf_internal_r+0x1d88>
    1c78:	01400074 	movhi	r5,1
    1c7c:	29405084 	addi	r5,r5,322
    1c80:	dc403015 	stw	r17,192(sp)
    1c84:	d9402b15 	stw	r5,172(sp)
    1c88:	b023883a 	mov	r17,r22
    1c8c:	04c001c4 	movi	r19,7
    1c90:	a82d883a 	mov	r22,r21
    1c94:	902b883a 	mov	r21,r18
    1c98:	8025883a 	mov	r18,r16
    1c9c:	dc002c17 	ldw	r16,176(sp)
    1ca0:	00000306 	br	1cb0 <___vfprintf_internal_r+0xf84>
    1ca4:	8c7ffc04 	addi	r17,r17,-16
    1ca8:	42000204 	addi	r8,r8,8
    1cac:	e440110e 	bge	fp,r17,1cf4 <___vfprintf_internal_r+0xfc8>
    1cb0:	18c00404 	addi	r3,r3,16
    1cb4:	10800044 	addi	r2,r2,1
    1cb8:	45000015 	stw	r20,0(r8)
    1cbc:	47000115 	stw	fp,4(r8)
    1cc0:	d8c02015 	stw	r3,128(sp)
    1cc4:	d8801f15 	stw	r2,124(sp)
    1cc8:	98bff60e 	bge	r19,r2,1ca4 <__ram_exceptions_end+0xfbfe1a50>
    1ccc:	d9801e04 	addi	r6,sp,120
    1cd0:	b80b883a 	mov	r5,r23
    1cd4:	8009883a 	mov	r4,r16
    1cd8:	00078440 	call	7844 <__sprint_r>
    1cdc:	103d151e 	bne	r2,zero,1134 <__ram_exceptions_end+0xfbfe0ee0>
    1ce0:	8c7ffc04 	addi	r17,r17,-16
    1ce4:	d8c02017 	ldw	r3,128(sp)
    1ce8:	d8801f17 	ldw	r2,124(sp)
    1cec:	da000404 	addi	r8,sp,16
    1cf0:	e47fef16 	blt	fp,r17,1cb0 <__ram_exceptions_end+0xfbfe1a5c>
    1cf4:	9021883a 	mov	r16,r18
    1cf8:	a825883a 	mov	r18,r21
    1cfc:	b02b883a 	mov	r21,r22
    1d00:	882d883a 	mov	r22,r17
    1d04:	dc403017 	ldw	r17,192(sp)
    1d08:	d9002b17 	ldw	r4,172(sp)
    1d0c:	1d87883a 	add	r3,r3,r22
    1d10:	10800044 	addi	r2,r2,1
    1d14:	41000015 	stw	r4,0(r8)
    1d18:	45800115 	stw	r22,4(r8)
    1d1c:	d8c02015 	stw	r3,128(sp)
    1d20:	d8801f15 	stw	r2,124(sp)
    1d24:	010001c4 	movi	r4,7
    1d28:	20818e16 	blt	r4,r2,2364 <___vfprintf_internal_r+0x1638>
    1d2c:	42000204 	addi	r8,r8,8
    1d30:	003e3106 	br	15f8 <__ram_exceptions_end+0xfbfe13a4>
    1d34:	d9403317 	ldw	r5,204(sp)
    1d38:	00800044 	movi	r2,1
    1d3c:	18c00044 	addi	r3,r3,1
    1d40:	1141530e 	bge	r2,r5,2290 <___vfprintf_internal_r+0x1564>
    1d44:	dc401f17 	ldw	r17,124(sp)
    1d48:	00800044 	movi	r2,1
    1d4c:	40800115 	stw	r2,4(r8)
    1d50:	8c400044 	addi	r17,r17,1
    1d54:	44000015 	stw	r16,0(r8)
    1d58:	d8c02015 	stw	r3,128(sp)
    1d5c:	dc401f15 	stw	r17,124(sp)
    1d60:	008001c4 	movi	r2,7
    1d64:	14416b16 	blt	r2,r17,2314 <___vfprintf_internal_r+0x15e8>
    1d68:	42000204 	addi	r8,r8,8
    1d6c:	d8803717 	ldw	r2,220(sp)
    1d70:	d9003417 	ldw	r4,208(sp)
    1d74:	8c400044 	addi	r17,r17,1
    1d78:	10c7883a 	add	r3,r2,r3
    1d7c:	40800115 	stw	r2,4(r8)
    1d80:	41000015 	stw	r4,0(r8)
    1d84:	d8c02015 	stw	r3,128(sp)
    1d88:	dc401f15 	stw	r17,124(sp)
    1d8c:	008001c4 	movi	r2,7
    1d90:	14416916 	blt	r2,r17,2338 <___vfprintf_internal_r+0x160c>
    1d94:	45800204 	addi	r22,r8,8
    1d98:	d9003617 	ldw	r4,216(sp)
    1d9c:	d9403817 	ldw	r5,224(sp)
    1da0:	000d883a 	mov	r6,zero
    1da4:	000f883a 	mov	r7,zero
    1da8:	d8c03c15 	stw	r3,240(sp)
    1dac:	000be840 	call	be84 <__eqdf2>
    1db0:	d8c03c17 	ldw	r3,240(sp)
    1db4:	1000bc26 	beq	r2,zero,20a8 <___vfprintf_internal_r+0x137c>
    1db8:	d9403317 	ldw	r5,204(sp)
    1dbc:	84000044 	addi	r16,r16,1
    1dc0:	8c400044 	addi	r17,r17,1
    1dc4:	28bfffc4 	addi	r2,r5,-1
    1dc8:	1887883a 	add	r3,r3,r2
    1dcc:	b0800115 	stw	r2,4(r22)
    1dd0:	b4000015 	stw	r16,0(r22)
    1dd4:	d8c02015 	stw	r3,128(sp)
    1dd8:	dc401f15 	stw	r17,124(sp)
    1ddc:	008001c4 	movi	r2,7
    1de0:	14414316 	blt	r2,r17,22f0 <___vfprintf_internal_r+0x15c4>
    1de4:	b5800204 	addi	r22,r22,8
    1de8:	d9003a17 	ldw	r4,232(sp)
    1dec:	df0022c4 	addi	fp,sp,139
    1df0:	8c400044 	addi	r17,r17,1
    1df4:	20c7883a 	add	r3,r4,r3
    1df8:	b7000015 	stw	fp,0(r22)
    1dfc:	b1000115 	stw	r4,4(r22)
    1e00:	d8c02015 	stw	r3,128(sp)
    1e04:	dc401f15 	stw	r17,124(sp)
    1e08:	008001c4 	movi	r2,7
    1e0c:	14400e16 	blt	r2,r17,1e48 <___vfprintf_internal_r+0x111c>
    1e10:	b2000204 	addi	r8,r22,8
    1e14:	003e3a06 	br	1700 <__ram_exceptions_end+0xfbfe14ac>
    1e18:	01000074 	movhi	r4,1
    1e1c:	21005084 	addi	r4,r4,322
    1e20:	d9002b15 	stw	r4,172(sp)
    1e24:	d9002b17 	ldw	r4,172(sp)
    1e28:	1c07883a 	add	r3,r3,r16
    1e2c:	44000115 	stw	r16,4(r8)
    1e30:	41000015 	stw	r4,0(r8)
    1e34:	10800044 	addi	r2,r2,1
    1e38:	d8c02015 	stw	r3,128(sp)
    1e3c:	d8801f15 	stw	r2,124(sp)
    1e40:	010001c4 	movi	r4,7
    1e44:	20be2d0e 	bge	r4,r2,16fc <__ram_exceptions_end+0xfbfe14a8>
    1e48:	d9002c17 	ldw	r4,176(sp)
    1e4c:	d9801e04 	addi	r6,sp,120
    1e50:	b80b883a 	mov	r5,r23
    1e54:	00078440 	call	7844 <__sprint_r>
    1e58:	103cb61e 	bne	r2,zero,1134 <__ram_exceptions_end+0xfbfe0ee0>
    1e5c:	d8c02017 	ldw	r3,128(sp)
    1e60:	da000404 	addi	r8,sp,16
    1e64:	003e2606 	br	1700 <__ram_exceptions_end+0xfbfe14ac>
    1e68:	d9002c17 	ldw	r4,176(sp)
    1e6c:	d9801e04 	addi	r6,sp,120
    1e70:	b80b883a 	mov	r5,r23
    1e74:	00078440 	call	7844 <__sprint_r>
    1e78:	103e5d26 	beq	r2,zero,17f0 <__ram_exceptions_end+0xfbfe159c>
    1e7c:	003cad06 	br	1134 <__ram_exceptions_end+0xfbfe0ee0>
    1e80:	d9002c17 	ldw	r4,176(sp)
    1e84:	d9801e04 	addi	r6,sp,120
    1e88:	b80b883a 	mov	r5,r23
    1e8c:	00078440 	call	7844 <__sprint_r>
    1e90:	103ca81e 	bne	r2,zero,1134 <__ram_exceptions_end+0xfbfe0ee0>
    1e94:	d8c02017 	ldw	r3,128(sp)
    1e98:	da000404 	addi	r8,sp,16
    1e9c:	003e0b06 	br	16cc <__ram_exceptions_end+0xfbfe1478>
    1ea0:	d9002c17 	ldw	r4,176(sp)
    1ea4:	d9801e04 	addi	r6,sp,120
    1ea8:	b80b883a 	mov	r5,r23
    1eac:	00078440 	call	7844 <__sprint_r>
    1eb0:	103ca01e 	bne	r2,zero,1134 <__ram_exceptions_end+0xfbfe0ee0>
    1eb4:	d8c02017 	ldw	r3,128(sp)
    1eb8:	da000404 	addi	r8,sp,16
    1ebc:	003dbd06 	br	15b4 <__ram_exceptions_end+0xfbfe1360>
    1ec0:	d9002c17 	ldw	r4,176(sp)
    1ec4:	d9801e04 	addi	r6,sp,120
    1ec8:	b80b883a 	mov	r5,r23
    1ecc:	00078440 	call	7844 <__sprint_r>
    1ed0:	103c981e 	bne	r2,zero,1134 <__ram_exceptions_end+0xfbfe0ee0>
    1ed4:	d8c02017 	ldw	r3,128(sp)
    1ed8:	da000404 	addi	r8,sp,16
    1edc:	003dc306 	br	15ec <__ram_exceptions_end+0xfbfe1398>
    1ee0:	d8802917 	ldw	r2,164(sp)
    1ee4:	d8002785 	stb	zero,158(sp)
    1ee8:	103f0616 	blt	r2,zero,1b04 <__ram_exceptions_end+0xfbfe18b0>
    1eec:	00ffdfc4 	movi	r3,-129
    1ef0:	9d84b03a 	or	r2,r19,r22
    1ef4:	90e4703a 	and	r18,r18,r3
    1ef8:	103c6b26 	beq	r2,zero,10a8 <__ram_exceptions_end+0xfbfe0e54>
    1efc:	0039883a 	mov	fp,zero
    1f00:	003e7406 	br	18d4 <__ram_exceptions_end+0xfbfe1680>
    1f04:	9080040c 	andi	r2,r18,16
    1f08:	1001b326 	beq	r2,zero,25d8 <___vfprintf_internal_r+0x18ac>
    1f0c:	d9002d17 	ldw	r4,180(sp)
    1f10:	d9402917 	ldw	r5,164(sp)
    1f14:	d8002785 	stb	zero,158(sp)
    1f18:	20800104 	addi	r2,r4,4
    1f1c:	24c00017 	ldw	r19,0(r4)
    1f20:	002d883a 	mov	r22,zero
    1f24:	2801b516 	blt	r5,zero,25fc <___vfprintf_internal_r+0x18d0>
    1f28:	00ffdfc4 	movi	r3,-129
    1f2c:	d8802d15 	stw	r2,180(sp)
    1f30:	90e4703a 	and	r18,r18,r3
    1f34:	983d2726 	beq	r19,zero,13d4 <__ram_exceptions_end+0xfbfe1180>
    1f38:	0039883a 	mov	fp,zero
    1f3c:	003d2a06 	br	13e8 <__ram_exceptions_end+0xfbfe1194>
    1f40:	dc402617 	ldw	r17,152(sp)
    1f44:	0441d30e 	bge	zero,r17,2694 <___vfprintf_internal_r+0x1968>
    1f48:	dc403217 	ldw	r17,200(sp)
    1f4c:	d8803317 	ldw	r2,204(sp)
    1f50:	1440010e 	bge	r2,r17,1f58 <___vfprintf_internal_r+0x122c>
    1f54:	1023883a 	mov	r17,r2
    1f58:	04400a0e 	bge	zero,r17,1f84 <___vfprintf_internal_r+0x1258>
    1f5c:	d8801f17 	ldw	r2,124(sp)
    1f60:	1c47883a 	add	r3,r3,r17
    1f64:	44000015 	stw	r16,0(r8)
    1f68:	10800044 	addi	r2,r2,1
    1f6c:	44400115 	stw	r17,4(r8)
    1f70:	d8c02015 	stw	r3,128(sp)
    1f74:	d8801f15 	stw	r2,124(sp)
    1f78:	010001c4 	movi	r4,7
    1f7c:	20826516 	blt	r4,r2,2914 <___vfprintf_internal_r+0x1be8>
    1f80:	42000204 	addi	r8,r8,8
    1f84:	88026116 	blt	r17,zero,290c <___vfprintf_internal_r+0x1be0>
    1f88:	d9003217 	ldw	r4,200(sp)
    1f8c:	2463c83a 	sub	r17,r4,r17
    1f90:	04407b0e 	bge	zero,r17,2180 <___vfprintf_internal_r+0x1454>
    1f94:	05800404 	movi	r22,16
    1f98:	d8801f17 	ldw	r2,124(sp)
    1f9c:	b4419d0e 	bge	r22,r17,2614 <___vfprintf_internal_r+0x18e8>
    1fa0:	01000074 	movhi	r4,1
    1fa4:	21005084 	addi	r4,r4,322
    1fa8:	d9002b15 	stw	r4,172(sp)
    1fac:	070001c4 	movi	fp,7
    1fb0:	dcc02c17 	ldw	r19,176(sp)
    1fb4:	00000306 	br	1fc4 <___vfprintf_internal_r+0x1298>
    1fb8:	42000204 	addi	r8,r8,8
    1fbc:	8c7ffc04 	addi	r17,r17,-16
    1fc0:	b441970e 	bge	r22,r17,2620 <___vfprintf_internal_r+0x18f4>
    1fc4:	18c00404 	addi	r3,r3,16
    1fc8:	10800044 	addi	r2,r2,1
    1fcc:	45000015 	stw	r20,0(r8)
    1fd0:	45800115 	stw	r22,4(r8)
    1fd4:	d8c02015 	stw	r3,128(sp)
    1fd8:	d8801f15 	stw	r2,124(sp)
    1fdc:	e0bff60e 	bge	fp,r2,1fb8 <__ram_exceptions_end+0xfbfe1d64>
    1fe0:	d9801e04 	addi	r6,sp,120
    1fe4:	b80b883a 	mov	r5,r23
    1fe8:	9809883a 	mov	r4,r19
    1fec:	00078440 	call	7844 <__sprint_r>
    1ff0:	103c501e 	bne	r2,zero,1134 <__ram_exceptions_end+0xfbfe0ee0>
    1ff4:	d8c02017 	ldw	r3,128(sp)
    1ff8:	d8801f17 	ldw	r2,124(sp)
    1ffc:	da000404 	addi	r8,sp,16
    2000:	003fee06 	br	1fbc <__ram_exceptions_end+0xfbfe1d68>
    2004:	d9002c17 	ldw	r4,176(sp)
    2008:	d9801e04 	addi	r6,sp,120
    200c:	b80b883a 	mov	r5,r23
    2010:	00078440 	call	7844 <__sprint_r>
    2014:	103c471e 	bne	r2,zero,1134 <__ram_exceptions_end+0xfbfe0ee0>
    2018:	d8c02017 	ldw	r3,128(sp)
    201c:	df002787 	ldb	fp,158(sp)
    2020:	da000404 	addi	r8,sp,16
    2024:	003d5606 	br	1580 <__ram_exceptions_end+0xfbfe132c>
    2028:	9080040c 	andi	r2,r18,16
    202c:	10016126 	beq	r2,zero,25b4 <___vfprintf_internal_r+0x1888>
    2030:	d8802d17 	ldw	r2,180(sp)
    2034:	14c00017 	ldw	r19,0(r2)
    2038:	10800104 	addi	r2,r2,4
    203c:	d8802d15 	stw	r2,180(sp)
    2040:	982dd7fa 	srai	r22,r19,31
    2044:	b005883a 	mov	r2,r22
    2048:	003c8206 	br	1254 <__ram_exceptions_end+0xfbfe1000>
    204c:	9080040c 	andi	r2,r18,16
    2050:	10003526 	beq	r2,zero,2128 <___vfprintf_internal_r+0x13fc>
    2054:	d9402d17 	ldw	r5,180(sp)
    2058:	d8c02917 	ldw	r3,164(sp)
    205c:	d8002785 	stb	zero,158(sp)
    2060:	28800104 	addi	r2,r5,4
    2064:	2cc00017 	ldw	r19,0(r5)
    2068:	002d883a 	mov	r22,zero
    206c:	18003716 	blt	r3,zero,214c <___vfprintf_internal_r+0x1420>
    2070:	00ffdfc4 	movi	r3,-129
    2074:	d8802d15 	stw	r2,180(sp)
    2078:	90e4703a 	and	r18,r18,r3
    207c:	0039883a 	mov	fp,zero
    2080:	983df326 	beq	r19,zero,1850 <__ram_exceptions_end+0xfbfe15fc>
    2084:	00800244 	movi	r2,9
    2088:	14fc7b36 	bltu	r2,r19,1278 <__ram_exceptions_end+0xfbfe1024>
    208c:	d8c02817 	ldw	r3,160(sp)
    2090:	dc001dc4 	addi	r16,sp,119
    2094:	9cc00c04 	addi	r19,r19,48
    2098:	1c07c83a 	sub	r3,r3,r16
    209c:	dcc01dc5 	stb	r19,119(sp)
    20a0:	d8c02e15 	stw	r3,184(sp)
    20a4:	003ce806 	br	1448 <__ram_exceptions_end+0xfbfe11f4>
    20a8:	d8803317 	ldw	r2,204(sp)
    20ac:	143fffc4 	addi	r16,r2,-1
    20b0:	043f4d0e 	bge	zero,r16,1de8 <__ram_exceptions_end+0xfbfe1b94>
    20b4:	07000404 	movi	fp,16
    20b8:	e400810e 	bge	fp,r16,22c0 <___vfprintf_internal_r+0x1594>
    20bc:	01400074 	movhi	r5,1
    20c0:	29405084 	addi	r5,r5,322
    20c4:	d9402b15 	stw	r5,172(sp)
    20c8:	01c001c4 	movi	r7,7
    20cc:	dcc02c17 	ldw	r19,176(sp)
    20d0:	00000306 	br	20e0 <___vfprintf_internal_r+0x13b4>
    20d4:	b5800204 	addi	r22,r22,8
    20d8:	843ffc04 	addi	r16,r16,-16
    20dc:	e4007b0e 	bge	fp,r16,22cc <___vfprintf_internal_r+0x15a0>
    20e0:	18c00404 	addi	r3,r3,16
    20e4:	8c400044 	addi	r17,r17,1
    20e8:	b5000015 	stw	r20,0(r22)
    20ec:	b7000115 	stw	fp,4(r22)
    20f0:	d8c02015 	stw	r3,128(sp)
    20f4:	dc401f15 	stw	r17,124(sp)
    20f8:	3c7ff60e 	bge	r7,r17,20d4 <__ram_exceptions_end+0xfbfe1e80>
    20fc:	d9801e04 	addi	r6,sp,120
    2100:	b80b883a 	mov	r5,r23
    2104:	9809883a 	mov	r4,r19
    2108:	d9c03c15 	stw	r7,240(sp)
    210c:	00078440 	call	7844 <__sprint_r>
    2110:	d9c03c17 	ldw	r7,240(sp)
    2114:	103c071e 	bne	r2,zero,1134 <__ram_exceptions_end+0xfbfe0ee0>
    2118:	d8c02017 	ldw	r3,128(sp)
    211c:	dc401f17 	ldw	r17,124(sp)
    2120:	dd800404 	addi	r22,sp,16
    2124:	003fec06 	br	20d8 <__ram_exceptions_end+0xfbfe1e84>
    2128:	9080100c 	andi	r2,r18,64
    212c:	d8002785 	stb	zero,158(sp)
    2130:	10010e26 	beq	r2,zero,256c <___vfprintf_internal_r+0x1840>
    2134:	d9002d17 	ldw	r4,180(sp)
    2138:	d9402917 	ldw	r5,164(sp)
    213c:	002d883a 	mov	r22,zero
    2140:	20800104 	addi	r2,r4,4
    2144:	24c0000b 	ldhu	r19,0(r4)
    2148:	283fc90e 	bge	r5,zero,2070 <__ram_exceptions_end+0xfbfe1e1c>
    214c:	d8802d15 	stw	r2,180(sp)
    2150:	0039883a 	mov	fp,zero
    2154:	9d84b03a 	or	r2,r19,r22
    2158:	103c461e 	bne	r2,zero,1274 <__ram_exceptions_end+0xfbfe1020>
    215c:	00800044 	movi	r2,1
    2160:	003e6c06 	br	1b14 <__ram_exceptions_end+0xfbfe18c0>
    2164:	d9002c17 	ldw	r4,176(sp)
    2168:	d9801e04 	addi	r6,sp,120
    216c:	b80b883a 	mov	r5,r23
    2170:	00078440 	call	7844 <__sprint_r>
    2174:	103bef1e 	bne	r2,zero,1134 <__ram_exceptions_end+0xfbfe0ee0>
    2178:	d8c02017 	ldw	r3,128(sp)
    217c:	da000404 	addi	r8,sp,16
    2180:	d9003217 	ldw	r4,200(sp)
    2184:	d8802617 	ldw	r2,152(sp)
    2188:	d9403317 	ldw	r5,204(sp)
    218c:	8123883a 	add	r17,r16,r4
    2190:	11400216 	blt	r2,r5,219c <___vfprintf_internal_r+0x1470>
    2194:	9100004c 	andi	r4,r18,1
    2198:	20000d26 	beq	r4,zero,21d0 <___vfprintf_internal_r+0x14a4>
    219c:	d9003717 	ldw	r4,220(sp)
    21a0:	d9403417 	ldw	r5,208(sp)
    21a4:	1907883a 	add	r3,r3,r4
    21a8:	d9001f17 	ldw	r4,124(sp)
    21ac:	41400015 	stw	r5,0(r8)
    21b0:	d9403717 	ldw	r5,220(sp)
    21b4:	21000044 	addi	r4,r4,1
    21b8:	d8c02015 	stw	r3,128(sp)
    21bc:	41400115 	stw	r5,4(r8)
    21c0:	d9001f15 	stw	r4,124(sp)
    21c4:	014001c4 	movi	r5,7
    21c8:	2901e816 	blt	r5,r4,296c <___vfprintf_internal_r+0x1c40>
    21cc:	42000204 	addi	r8,r8,8
    21d0:	d9003317 	ldw	r4,204(sp)
    21d4:	8121883a 	add	r16,r16,r4
    21d8:	2085c83a 	sub	r2,r4,r2
    21dc:	8461c83a 	sub	r16,r16,r17
    21e0:	1400010e 	bge	r2,r16,21e8 <___vfprintf_internal_r+0x14bc>
    21e4:	1021883a 	mov	r16,r2
    21e8:	04000a0e 	bge	zero,r16,2214 <___vfprintf_internal_r+0x14e8>
    21ec:	d9001f17 	ldw	r4,124(sp)
    21f0:	1c07883a 	add	r3,r3,r16
    21f4:	44400015 	stw	r17,0(r8)
    21f8:	21000044 	addi	r4,r4,1
    21fc:	44000115 	stw	r16,4(r8)
    2200:	d8c02015 	stw	r3,128(sp)
    2204:	d9001f15 	stw	r4,124(sp)
    2208:	014001c4 	movi	r5,7
    220c:	2901fb16 	blt	r5,r4,29fc <___vfprintf_internal_r+0x1cd0>
    2210:	42000204 	addi	r8,r8,8
    2214:	8001f716 	blt	r16,zero,29f4 <___vfprintf_internal_r+0x1cc8>
    2218:	1421c83a 	sub	r16,r2,r16
    221c:	043d380e 	bge	zero,r16,1700 <__ram_exceptions_end+0xfbfe14ac>
    2220:	04400404 	movi	r17,16
    2224:	d8801f17 	ldw	r2,124(sp)
    2228:	8c3efb0e 	bge	r17,r16,1e18 <__ram_exceptions_end+0xfbfe1bc4>
    222c:	01400074 	movhi	r5,1
    2230:	29405084 	addi	r5,r5,322
    2234:	d9402b15 	stw	r5,172(sp)
    2238:	058001c4 	movi	r22,7
    223c:	dcc02c17 	ldw	r19,176(sp)
    2240:	00000306 	br	2250 <___vfprintf_internal_r+0x1524>
    2244:	42000204 	addi	r8,r8,8
    2248:	843ffc04 	addi	r16,r16,-16
    224c:	8c3ef50e 	bge	r17,r16,1e24 <__ram_exceptions_end+0xfbfe1bd0>
    2250:	18c00404 	addi	r3,r3,16
    2254:	10800044 	addi	r2,r2,1
    2258:	45000015 	stw	r20,0(r8)
    225c:	44400115 	stw	r17,4(r8)
    2260:	d8c02015 	stw	r3,128(sp)
    2264:	d8801f15 	stw	r2,124(sp)
    2268:	b0bff60e 	bge	r22,r2,2244 <__ram_exceptions_end+0xfbfe1ff0>
    226c:	d9801e04 	addi	r6,sp,120
    2270:	b80b883a 	mov	r5,r23
    2274:	9809883a 	mov	r4,r19
    2278:	00078440 	call	7844 <__sprint_r>
    227c:	103bad1e 	bne	r2,zero,1134 <__ram_exceptions_end+0xfbfe0ee0>
    2280:	d8c02017 	ldw	r3,128(sp)
    2284:	d8801f17 	ldw	r2,124(sp)
    2288:	da000404 	addi	r8,sp,16
    228c:	003fee06 	br	2248 <__ram_exceptions_end+0xfbfe1ff4>
    2290:	9088703a 	and	r4,r18,r2
    2294:	203eab1e 	bne	r4,zero,1d44 <__ram_exceptions_end+0xfbfe1af0>
    2298:	dc401f17 	ldw	r17,124(sp)
    229c:	40800115 	stw	r2,4(r8)
    22a0:	44000015 	stw	r16,0(r8)
    22a4:	8c400044 	addi	r17,r17,1
    22a8:	d8c02015 	stw	r3,128(sp)
    22ac:	dc401f15 	stw	r17,124(sp)
    22b0:	008001c4 	movi	r2,7
    22b4:	14400e16 	blt	r2,r17,22f0 <___vfprintf_internal_r+0x15c4>
    22b8:	45800204 	addi	r22,r8,8
    22bc:	003eca06 	br	1de8 <__ram_exceptions_end+0xfbfe1b94>
    22c0:	01000074 	movhi	r4,1
    22c4:	21005084 	addi	r4,r4,322
    22c8:	d9002b15 	stw	r4,172(sp)
    22cc:	d8802b17 	ldw	r2,172(sp)
    22d0:	1c07883a 	add	r3,r3,r16
    22d4:	8c400044 	addi	r17,r17,1
    22d8:	b0800015 	stw	r2,0(r22)
    22dc:	b4000115 	stw	r16,4(r22)
    22e0:	d8c02015 	stw	r3,128(sp)
    22e4:	dc401f15 	stw	r17,124(sp)
    22e8:	008001c4 	movi	r2,7
    22ec:	147ebd0e 	bge	r2,r17,1de4 <__ram_exceptions_end+0xfbfe1b90>
    22f0:	d9002c17 	ldw	r4,176(sp)
    22f4:	d9801e04 	addi	r6,sp,120
    22f8:	b80b883a 	mov	r5,r23
    22fc:	00078440 	call	7844 <__sprint_r>
    2300:	103b8c1e 	bne	r2,zero,1134 <__ram_exceptions_end+0xfbfe0ee0>
    2304:	d8c02017 	ldw	r3,128(sp)
    2308:	dc401f17 	ldw	r17,124(sp)
    230c:	dd800404 	addi	r22,sp,16
    2310:	003eb506 	br	1de8 <__ram_exceptions_end+0xfbfe1b94>
    2314:	d9002c17 	ldw	r4,176(sp)
    2318:	d9801e04 	addi	r6,sp,120
    231c:	b80b883a 	mov	r5,r23
    2320:	00078440 	call	7844 <__sprint_r>
    2324:	103b831e 	bne	r2,zero,1134 <__ram_exceptions_end+0xfbfe0ee0>
    2328:	d8c02017 	ldw	r3,128(sp)
    232c:	dc401f17 	ldw	r17,124(sp)
    2330:	da000404 	addi	r8,sp,16
    2334:	003e8d06 	br	1d6c <__ram_exceptions_end+0xfbfe1b18>
    2338:	d9002c17 	ldw	r4,176(sp)
    233c:	d9801e04 	addi	r6,sp,120
    2340:	b80b883a 	mov	r5,r23
    2344:	00078440 	call	7844 <__sprint_r>
    2348:	103b7a1e 	bne	r2,zero,1134 <__ram_exceptions_end+0xfbfe0ee0>
    234c:	d8c02017 	ldw	r3,128(sp)
    2350:	dc401f17 	ldw	r17,124(sp)
    2354:	dd800404 	addi	r22,sp,16
    2358:	003e8f06 	br	1d98 <__ram_exceptions_end+0xfbfe1b44>
    235c:	0027883a 	mov	r19,zero
    2360:	003f4a06 	br	208c <__ram_exceptions_end+0xfbfe1e38>
    2364:	d9002c17 	ldw	r4,176(sp)
    2368:	d9801e04 	addi	r6,sp,120
    236c:	b80b883a 	mov	r5,r23
    2370:	00078440 	call	7844 <__sprint_r>
    2374:	103b6f1e 	bne	r2,zero,1134 <__ram_exceptions_end+0xfbfe0ee0>
    2378:	d8c02017 	ldw	r3,128(sp)
    237c:	da000404 	addi	r8,sp,16
    2380:	003c9d06 	br	15f8 <__ram_exceptions_end+0xfbfe13a4>
    2384:	04e7c83a 	sub	r19,zero,r19
    2388:	9804c03a 	cmpne	r2,r19,zero
    238c:	05adc83a 	sub	r22,zero,r22
    2390:	b0adc83a 	sub	r22,r22,r2
    2394:	d8802917 	ldw	r2,164(sp)
    2398:	07000b44 	movi	fp,45
    239c:	df002785 	stb	fp,158(sp)
    23a0:	10017b16 	blt	r2,zero,2990 <___vfprintf_internal_r+0x1c64>
    23a4:	00bfdfc4 	movi	r2,-129
    23a8:	90a4703a 	and	r18,r18,r2
    23ac:	003bb106 	br	1274 <__ram_exceptions_end+0xfbfe1020>
    23b0:	d9003617 	ldw	r4,216(sp)
    23b4:	d9403817 	ldw	r5,224(sp)
    23b8:	da003d15 	stw	r8,244(sp)
    23bc:	00073d00 	call	73d0 <__fpclassifyd>
    23c0:	da003d17 	ldw	r8,244(sp)
    23c4:	1000f026 	beq	r2,zero,2788 <___vfprintf_internal_r+0x1a5c>
    23c8:	d9002917 	ldw	r4,164(sp)
    23cc:	05bff7c4 	movi	r22,-33
    23d0:	00bfffc4 	movi	r2,-1
    23d4:	8dac703a 	and	r22,r17,r22
    23d8:	20820026 	beq	r4,r2,2bdc <___vfprintf_internal_r+0x1eb0>
    23dc:	008011c4 	movi	r2,71
    23e0:	b081f726 	beq	r22,r2,2bc0 <___vfprintf_internal_r+0x1e94>
    23e4:	d9003817 	ldw	r4,224(sp)
    23e8:	90c04014 	ori	r3,r18,256
    23ec:	d8c02b15 	stw	r3,172(sp)
    23f0:	20021516 	blt	r4,zero,2c48 <___vfprintf_internal_r+0x1f1c>
    23f4:	dcc03817 	ldw	r19,224(sp)
    23f8:	d8002a05 	stb	zero,168(sp)
    23fc:	00801984 	movi	r2,102
    2400:	8881f926 	beq	r17,r2,2be8 <___vfprintf_internal_r+0x1ebc>
    2404:	00801184 	movi	r2,70
    2408:	88821c26 	beq	r17,r2,2c7c <___vfprintf_internal_r+0x1f50>
    240c:	00801144 	movi	r2,69
    2410:	b081ef26 	beq	r22,r2,2bd0 <___vfprintf_internal_r+0x1ea4>
    2414:	d8c02917 	ldw	r3,164(sp)
    2418:	d8802104 	addi	r2,sp,132
    241c:	d8800315 	stw	r2,12(sp)
    2420:	d9403617 	ldw	r5,216(sp)
    2424:	d8802504 	addi	r2,sp,148
    2428:	d9002c17 	ldw	r4,176(sp)
    242c:	d8800215 	stw	r2,8(sp)
    2430:	d8802604 	addi	r2,sp,152
    2434:	d8c00015 	stw	r3,0(sp)
    2438:	d8800115 	stw	r2,4(sp)
    243c:	01c00084 	movi	r7,2
    2440:	980d883a 	mov	r6,r19
    2444:	d8c03c15 	stw	r3,240(sp)
    2448:	da003d15 	stw	r8,244(sp)
    244c:	00033500 	call	3350 <_dtoa_r>
    2450:	1021883a 	mov	r16,r2
    2454:	008019c4 	movi	r2,103
    2458:	d8c03c17 	ldw	r3,240(sp)
    245c:	da003d17 	ldw	r8,244(sp)
    2460:	88817126 	beq	r17,r2,2a28 <___vfprintf_internal_r+0x1cfc>
    2464:	008011c4 	movi	r2,71
    2468:	88829226 	beq	r17,r2,2eb4 <___vfprintf_internal_r+0x2188>
    246c:	80f9883a 	add	fp,r16,r3
    2470:	d9003617 	ldw	r4,216(sp)
    2474:	000d883a 	mov	r6,zero
    2478:	000f883a 	mov	r7,zero
    247c:	980b883a 	mov	r5,r19
    2480:	da003d15 	stw	r8,244(sp)
    2484:	000be840 	call	be84 <__eqdf2>
    2488:	da003d17 	ldw	r8,244(sp)
    248c:	10018d26 	beq	r2,zero,2ac4 <___vfprintf_internal_r+0x1d98>
    2490:	d8802117 	ldw	r2,132(sp)
    2494:	1700062e 	bgeu	r2,fp,24b0 <___vfprintf_internal_r+0x1784>
    2498:	01000c04 	movi	r4,48
    249c:	10c00044 	addi	r3,r2,1
    24a0:	d8c02115 	stw	r3,132(sp)
    24a4:	11000005 	stb	r4,0(r2)
    24a8:	d8802117 	ldw	r2,132(sp)
    24ac:	173ffb36 	bltu	r2,fp,249c <__ram_exceptions_end+0xfbfe2248>
    24b0:	1405c83a 	sub	r2,r2,r16
    24b4:	d8803315 	stw	r2,204(sp)
    24b8:	008011c4 	movi	r2,71
    24bc:	b0817626 	beq	r22,r2,2a98 <___vfprintf_internal_r+0x1d6c>
    24c0:	00801944 	movi	r2,101
    24c4:	1442810e 	bge	r2,r17,2ecc <___vfprintf_internal_r+0x21a0>
    24c8:	d8c02617 	ldw	r3,152(sp)
    24cc:	00801984 	movi	r2,102
    24d0:	d8c03215 	stw	r3,200(sp)
    24d4:	8881fe26 	beq	r17,r2,2cd0 <___vfprintf_internal_r+0x1fa4>
    24d8:	d8c03217 	ldw	r3,200(sp)
    24dc:	d9003317 	ldw	r4,204(sp)
    24e0:	1901dd16 	blt	r3,r4,2c58 <___vfprintf_internal_r+0x1f2c>
    24e4:	9480004c 	andi	r18,r18,1
    24e8:	90022b1e 	bne	r18,zero,2d98 <___vfprintf_internal_r+0x206c>
    24ec:	1805883a 	mov	r2,r3
    24f0:	18028016 	blt	r3,zero,2ef4 <___vfprintf_internal_r+0x21c8>
    24f4:	d8c03217 	ldw	r3,200(sp)
    24f8:	044019c4 	movi	r17,103
    24fc:	d8c02e15 	stw	r3,184(sp)
    2500:	df002a07 	ldb	fp,168(sp)
    2504:	e001531e 	bne	fp,zero,2a54 <___vfprintf_internal_r+0x1d28>
    2508:	df002783 	ldbu	fp,158(sp)
    250c:	d8802a15 	stw	r2,168(sp)
    2510:	dc802b17 	ldw	r18,172(sp)
    2514:	d8002915 	stw	zero,164(sp)
    2518:	003bd106 	br	1460 <__ram_exceptions_end+0xfbfe120c>
    251c:	d8802d17 	ldw	r2,180(sp)
    2520:	d8c02d17 	ldw	r3,180(sp)
    2524:	d9002d17 	ldw	r4,180(sp)
    2528:	10800017 	ldw	r2,0(r2)
    252c:	18c00117 	ldw	r3,4(r3)
    2530:	21000204 	addi	r4,r4,8
    2534:	d8803615 	stw	r2,216(sp)
    2538:	d8c03815 	stw	r3,224(sp)
    253c:	d9002d15 	stw	r4,180(sp)
    2540:	003b7506 	br	1318 <__ram_exceptions_end+0xfbfe10c4>
    2544:	ac400007 	ldb	r17,0(r21)
    2548:	003a5906 	br	eb0 <__ram_exceptions_end+0xfbfe0c5c>
    254c:	9080100c 	andi	r2,r18,64
    2550:	1000a826 	beq	r2,zero,27f4 <___vfprintf_internal_r+0x1ac8>
    2554:	d9002d17 	ldw	r4,180(sp)
    2558:	002d883a 	mov	r22,zero
    255c:	24c0000b 	ldhu	r19,0(r4)
    2560:	21000104 	addi	r4,r4,4
    2564:	d9002d15 	stw	r4,180(sp)
    2568:	003ccb06 	br	1898 <__ram_exceptions_end+0xfbfe1644>
    256c:	d8c02d17 	ldw	r3,180(sp)
    2570:	d9002917 	ldw	r4,164(sp)
    2574:	002d883a 	mov	r22,zero
    2578:	18800104 	addi	r2,r3,4
    257c:	1cc00017 	ldw	r19,0(r3)
    2580:	203ebb0e 	bge	r4,zero,2070 <__ram_exceptions_end+0xfbfe1e1c>
    2584:	003ef106 	br	214c <__ram_exceptions_end+0xfbfe1ef8>
    2588:	9080040c 	andi	r2,r18,16
    258c:	1000921e 	bne	r2,zero,27d8 <___vfprintf_internal_r+0x1aac>
    2590:	9480100c 	andi	r18,r18,64
    2594:	90013926 	beq	r18,zero,2a7c <___vfprintf_internal_r+0x1d50>
    2598:	d9002d17 	ldw	r4,180(sp)
    259c:	d9402f17 	ldw	r5,188(sp)
    25a0:	20800017 	ldw	r2,0(r4)
    25a4:	21000104 	addi	r4,r4,4
    25a8:	d9002d15 	stw	r4,180(sp)
    25ac:	1140000d 	sth	r5,0(r2)
    25b0:	003a1606 	br	e0c <__ram_exceptions_end+0xfbfe0bb8>
    25b4:	9080100c 	andi	r2,r18,64
    25b8:	10008026 	beq	r2,zero,27bc <___vfprintf_internal_r+0x1a90>
    25bc:	d8c02d17 	ldw	r3,180(sp)
    25c0:	1cc0000f 	ldh	r19,0(r3)
    25c4:	18c00104 	addi	r3,r3,4
    25c8:	d8c02d15 	stw	r3,180(sp)
    25cc:	982dd7fa 	srai	r22,r19,31
    25d0:	b005883a 	mov	r2,r22
    25d4:	003b1f06 	br	1254 <__ram_exceptions_end+0xfbfe1000>
    25d8:	9080100c 	andi	r2,r18,64
    25dc:	d8002785 	stb	zero,158(sp)
    25e0:	10008a1e 	bne	r2,zero,280c <___vfprintf_internal_r+0x1ae0>
    25e4:	d9402d17 	ldw	r5,180(sp)
    25e8:	d8c02917 	ldw	r3,164(sp)
    25ec:	002d883a 	mov	r22,zero
    25f0:	28800104 	addi	r2,r5,4
    25f4:	2cc00017 	ldw	r19,0(r5)
    25f8:	183e4b0e 	bge	r3,zero,1f28 <__ram_exceptions_end+0xfbfe1cd4>
    25fc:	9d86b03a 	or	r3,r19,r22
    2600:	d8802d15 	stw	r2,180(sp)
    2604:	183e4c1e 	bne	r3,zero,1f38 <__ram_exceptions_end+0xfbfe1ce4>
    2608:	0039883a 	mov	fp,zero
    260c:	0005883a 	mov	r2,zero
    2610:	003d4006 	br	1b14 <__ram_exceptions_end+0xfbfe18c0>
    2614:	01400074 	movhi	r5,1
    2618:	29405084 	addi	r5,r5,322
    261c:	d9402b15 	stw	r5,172(sp)
    2620:	d9402b17 	ldw	r5,172(sp)
    2624:	1c47883a 	add	r3,r3,r17
    2628:	10800044 	addi	r2,r2,1
    262c:	41400015 	stw	r5,0(r8)
    2630:	44400115 	stw	r17,4(r8)
    2634:	d8c02015 	stw	r3,128(sp)
    2638:	d8801f15 	stw	r2,124(sp)
    263c:	010001c4 	movi	r4,7
    2640:	20bec816 	blt	r4,r2,2164 <__ram_exceptions_end+0xfbfe1f10>
    2644:	42000204 	addi	r8,r8,8
    2648:	003ecd06 	br	2180 <__ram_exceptions_end+0xfbfe1f2c>
    264c:	d9002917 	ldw	r4,164(sp)
    2650:	d8002785 	stb	zero,158(sp)
    2654:	203d2d16 	blt	r4,zero,1b0c <__ram_exceptions_end+0xfbfe18b8>
    2658:	00bfdfc4 	movi	r2,-129
    265c:	90a4703a 	and	r18,r18,r2
    2660:	003a9106 	br	10a8 <__ram_exceptions_end+0xfbfe0e54>
    2664:	01000074 	movhi	r4,1
    2668:	21005084 	addi	r4,r4,322
    266c:	d9002b15 	stw	r4,172(sp)
    2670:	003c0c06 	br	16a4 <__ram_exceptions_end+0xfbfe1450>
    2674:	d9002c17 	ldw	r4,176(sp)
    2678:	d9801e04 	addi	r6,sp,120
    267c:	b80b883a 	mov	r5,r23
    2680:	00078440 	call	7844 <__sprint_r>
    2684:	103aab1e 	bne	r2,zero,1134 <__ram_exceptions_end+0xfbfe0ee0>
    2688:	d8c02017 	ldw	r3,128(sp)
    268c:	da000404 	addi	r8,sp,16
    2690:	003d4106 	br	1b98 <__ram_exceptions_end+0xfbfe1944>
    2694:	d8801f17 	ldw	r2,124(sp)
    2698:	01400074 	movhi	r5,1
    269c:	01000044 	movi	r4,1
    26a0:	18c00044 	addi	r3,r3,1
    26a4:	10800044 	addi	r2,r2,1
    26a8:	29405004 	addi	r5,r5,320
    26ac:	41000115 	stw	r4,4(r8)
    26b0:	41400015 	stw	r5,0(r8)
    26b4:	d8c02015 	stw	r3,128(sp)
    26b8:	d8801f15 	stw	r2,124(sp)
    26bc:	010001c4 	movi	r4,7
    26c0:	20805c16 	blt	r4,r2,2834 <___vfprintf_internal_r+0x1b08>
    26c4:	42000204 	addi	r8,r8,8
    26c8:	8800041e 	bne	r17,zero,26dc <___vfprintf_internal_r+0x19b0>
    26cc:	d8803317 	ldw	r2,204(sp)
    26d0:	1000021e 	bne	r2,zero,26dc <___vfprintf_internal_r+0x19b0>
    26d4:	9080004c 	andi	r2,r18,1
    26d8:	103c0926 	beq	r2,zero,1700 <__ram_exceptions_end+0xfbfe14ac>
    26dc:	d9003717 	ldw	r4,220(sp)
    26e0:	d8801f17 	ldw	r2,124(sp)
    26e4:	d9403417 	ldw	r5,208(sp)
    26e8:	20c7883a 	add	r3,r4,r3
    26ec:	10800044 	addi	r2,r2,1
    26f0:	41000115 	stw	r4,4(r8)
    26f4:	41400015 	stw	r5,0(r8)
    26f8:	d8c02015 	stw	r3,128(sp)
    26fc:	d8801f15 	stw	r2,124(sp)
    2700:	010001c4 	movi	r4,7
    2704:	20812116 	blt	r4,r2,2b8c <___vfprintf_internal_r+0x1e60>
    2708:	42000204 	addi	r8,r8,8
    270c:	0463c83a 	sub	r17,zero,r17
    2710:	0440730e 	bge	zero,r17,28e0 <___vfprintf_internal_r+0x1bb4>
    2714:	05800404 	movi	r22,16
    2718:	b440860e 	bge	r22,r17,2934 <___vfprintf_internal_r+0x1c08>
    271c:	01400074 	movhi	r5,1
    2720:	29405084 	addi	r5,r5,322
    2724:	d9402b15 	stw	r5,172(sp)
    2728:	070001c4 	movi	fp,7
    272c:	dcc02c17 	ldw	r19,176(sp)
    2730:	00000306 	br	2740 <___vfprintf_internal_r+0x1a14>
    2734:	42000204 	addi	r8,r8,8
    2738:	8c7ffc04 	addi	r17,r17,-16
    273c:	b440800e 	bge	r22,r17,2940 <___vfprintf_internal_r+0x1c14>
    2740:	18c00404 	addi	r3,r3,16
    2744:	10800044 	addi	r2,r2,1
    2748:	45000015 	stw	r20,0(r8)
    274c:	45800115 	stw	r22,4(r8)
    2750:	d8c02015 	stw	r3,128(sp)
    2754:	d8801f15 	stw	r2,124(sp)
    2758:	e0bff60e 	bge	fp,r2,2734 <__ram_exceptions_end+0xfbfe24e0>
    275c:	d9801e04 	addi	r6,sp,120
    2760:	b80b883a 	mov	r5,r23
    2764:	9809883a 	mov	r4,r19
    2768:	00078440 	call	7844 <__sprint_r>
    276c:	103a711e 	bne	r2,zero,1134 <__ram_exceptions_end+0xfbfe0ee0>
    2770:	d8c02017 	ldw	r3,128(sp)
    2774:	d8801f17 	ldw	r2,124(sp)
    2778:	da000404 	addi	r8,sp,16
    277c:	003fee06 	br	2738 <__ram_exceptions_end+0xfbfe24e4>
    2780:	00bfffc4 	movi	r2,-1
    2784:	003a6f06 	br	1144 <__ram_exceptions_end+0xfbfe0ef0>
    2788:	008011c4 	movi	r2,71
    278c:	1440b816 	blt	r2,r17,2a70 <___vfprintf_internal_r+0x1d44>
    2790:	04000074 	movhi	r16,1
    2794:	84004204 	addi	r16,r16,264
    2798:	00c000c4 	movi	r3,3
    279c:	00bfdfc4 	movi	r2,-129
    27a0:	d8c02a15 	stw	r3,168(sp)
    27a4:	90a4703a 	and	r18,r18,r2
    27a8:	df002783 	ldbu	fp,158(sp)
    27ac:	d8c02e15 	stw	r3,184(sp)
    27b0:	d8002915 	stw	zero,164(sp)
    27b4:	d8003215 	stw	zero,200(sp)
    27b8:	003b2906 	br	1460 <__ram_exceptions_end+0xfbfe120c>
    27bc:	d9002d17 	ldw	r4,180(sp)
    27c0:	24c00017 	ldw	r19,0(r4)
    27c4:	21000104 	addi	r4,r4,4
    27c8:	d9002d15 	stw	r4,180(sp)
    27cc:	982dd7fa 	srai	r22,r19,31
    27d0:	b005883a 	mov	r2,r22
    27d4:	003a9f06 	br	1254 <__ram_exceptions_end+0xfbfe1000>
    27d8:	d9402d17 	ldw	r5,180(sp)
    27dc:	d8c02f17 	ldw	r3,188(sp)
    27e0:	28800017 	ldw	r2,0(r5)
    27e4:	29400104 	addi	r5,r5,4
    27e8:	d9402d15 	stw	r5,180(sp)
    27ec:	10c00015 	stw	r3,0(r2)
    27f0:	00398606 	br	e0c <__ram_exceptions_end+0xfbfe0bb8>
    27f4:	d9402d17 	ldw	r5,180(sp)
    27f8:	002d883a 	mov	r22,zero
    27fc:	2cc00017 	ldw	r19,0(r5)
    2800:	29400104 	addi	r5,r5,4
    2804:	d9402d15 	stw	r5,180(sp)
    2808:	003c2306 	br	1898 <__ram_exceptions_end+0xfbfe1644>
    280c:	d8c02d17 	ldw	r3,180(sp)
    2810:	d9002917 	ldw	r4,164(sp)
    2814:	002d883a 	mov	r22,zero
    2818:	18800104 	addi	r2,r3,4
    281c:	1cc0000b 	ldhu	r19,0(r3)
    2820:	203dc10e 	bge	r4,zero,1f28 <__ram_exceptions_end+0xfbfe1cd4>
    2824:	003f7506 	br	25fc <__ram_exceptions_end+0xfbfe23a8>
    2828:	04000074 	movhi	r16,1
    282c:	84004004 	addi	r16,r16,256
    2830:	003acc06 	br	1364 <__ram_exceptions_end+0xfbfe1110>
    2834:	d9002c17 	ldw	r4,176(sp)
    2838:	d9801e04 	addi	r6,sp,120
    283c:	b80b883a 	mov	r5,r23
    2840:	00078440 	call	7844 <__sprint_r>
    2844:	103a3b1e 	bne	r2,zero,1134 <__ram_exceptions_end+0xfbfe0ee0>
    2848:	dc402617 	ldw	r17,152(sp)
    284c:	d8c02017 	ldw	r3,128(sp)
    2850:	da000404 	addi	r8,sp,16
    2854:	003f9c06 	br	26c8 <__ram_exceptions_end+0xfbfe2474>
    2858:	ac400043 	ldbu	r17,1(r21)
    285c:	94800814 	ori	r18,r18,32
    2860:	ad400044 	addi	r21,r21,1
    2864:	8c403fcc 	andi	r17,r17,255
    2868:	8c40201c 	xori	r17,r17,128
    286c:	8c7fe004 	addi	r17,r17,-128
    2870:	00398f06 	br	eb0 <__ram_exceptions_end+0xfbfe0c5c>
    2874:	d8c02d15 	stw	r3,180(sp)
    2878:	0039883a 	mov	fp,zero
    287c:	003e3506 	br	2154 <__ram_exceptions_end+0xfbfe1f00>
    2880:	d9002c17 	ldw	r4,176(sp)
    2884:	d9801e04 	addi	r6,sp,120
    2888:	b80b883a 	mov	r5,r23
    288c:	00078440 	call	7844 <__sprint_r>
    2890:	103a281e 	bne	r2,zero,1134 <__ram_exceptions_end+0xfbfe0ee0>
    2894:	d8c02017 	ldw	r3,128(sp)
    2898:	da000404 	addi	r8,sp,16
    289c:	003cd006 	br	1be0 <__ram_exceptions_end+0xfbfe198c>
    28a0:	8009883a 	mov	r4,r16
    28a4:	da003d15 	stw	r8,244(sp)
    28a8:	00076b00 	call	76b0 <strlen>
    28ac:	d8802e15 	stw	r2,184(sp)
    28b0:	da003d17 	ldw	r8,244(sp)
    28b4:	103c340e 	bge	r2,zero,1988 <__ram_exceptions_end+0xfbfe1734>
    28b8:	0005883a 	mov	r2,zero
    28bc:	003c3206 	br	1988 <__ram_exceptions_end+0xfbfe1734>
    28c0:	d9002c17 	ldw	r4,176(sp)
    28c4:	d9801e04 	addi	r6,sp,120
    28c8:	b80b883a 	mov	r5,r23
    28cc:	00078440 	call	7844 <__sprint_r>
    28d0:	103a181e 	bne	r2,zero,1134 <__ram_exceptions_end+0xfbfe0ee0>
    28d4:	d8c02017 	ldw	r3,128(sp)
    28d8:	d8801f17 	ldw	r2,124(sp)
    28dc:	da000404 	addi	r8,sp,16
    28e0:	d9403317 	ldw	r5,204(sp)
    28e4:	10800044 	addi	r2,r2,1
    28e8:	44000015 	stw	r16,0(r8)
    28ec:	28c7883a 	add	r3,r5,r3
    28f0:	003b7d06 	br	16e8 <__ram_exceptions_end+0xfbfe1494>
    28f4:	01000074 	movhi	r4,1
    28f8:	21005484 	addi	r4,r4,338
    28fc:	d9003515 	stw	r4,212(sp)
    2900:	003b1406 	br	1554 <__ram_exceptions_end+0xfbfe1300>
    2904:	013fffc4 	movi	r4,-1
    2908:	003a3506 	br	11e0 <__ram_exceptions_end+0xfbfe0f8c>
    290c:	0023883a 	mov	r17,zero
    2910:	003d9d06 	br	1f88 <__ram_exceptions_end+0xfbfe1d34>
    2914:	d9002c17 	ldw	r4,176(sp)
    2918:	d9801e04 	addi	r6,sp,120
    291c:	b80b883a 	mov	r5,r23
    2920:	00078440 	call	7844 <__sprint_r>
    2924:	103a031e 	bne	r2,zero,1134 <__ram_exceptions_end+0xfbfe0ee0>
    2928:	d8c02017 	ldw	r3,128(sp)
    292c:	da000404 	addi	r8,sp,16
    2930:	003d9406 	br	1f84 <__ram_exceptions_end+0xfbfe1d30>
    2934:	01000074 	movhi	r4,1
    2938:	21005084 	addi	r4,r4,322
    293c:	d9002b15 	stw	r4,172(sp)
    2940:	d9002b17 	ldw	r4,172(sp)
    2944:	1c47883a 	add	r3,r3,r17
    2948:	10800044 	addi	r2,r2,1
    294c:	41000015 	stw	r4,0(r8)
    2950:	44400115 	stw	r17,4(r8)
    2954:	d8c02015 	stw	r3,128(sp)
    2958:	d8801f15 	stw	r2,124(sp)
    295c:	010001c4 	movi	r4,7
    2960:	20bfd716 	blt	r4,r2,28c0 <__ram_exceptions_end+0xfbfe266c>
    2964:	42000204 	addi	r8,r8,8
    2968:	003fdd06 	br	28e0 <__ram_exceptions_end+0xfbfe268c>
    296c:	d9002c17 	ldw	r4,176(sp)
    2970:	d9801e04 	addi	r6,sp,120
    2974:	b80b883a 	mov	r5,r23
    2978:	00078440 	call	7844 <__sprint_r>
    297c:	1039ed1e 	bne	r2,zero,1134 <__ram_exceptions_end+0xfbfe0ee0>
    2980:	d8802617 	ldw	r2,152(sp)
    2984:	d8c02017 	ldw	r3,128(sp)
    2988:	da000404 	addi	r8,sp,16
    298c:	003e1006 	br	21d0 <__ram_exceptions_end+0xfbfe1f7c>
    2990:	00800044 	movi	r2,1
    2994:	10803fcc 	andi	r2,r2,255
    2998:	00c00044 	movi	r3,1
    299c:	10fa3526 	beq	r2,r3,1274 <__ram_exceptions_end+0xfbfe1020>
    29a0:	00c00084 	movi	r3,2
    29a4:	10fbcb26 	beq	r2,r3,18d4 <__ram_exceptions_end+0xfbfe1680>
    29a8:	003a8f06 	br	13e8 <__ram_exceptions_end+0xfbfe1194>
    29ac:	01000074 	movhi	r4,1
    29b0:	21005484 	addi	r4,r4,338
    29b4:	d9003515 	stw	r4,212(sp)
    29b8:	003b7606 	br	1794 <__ram_exceptions_end+0xfbfe1540>
    29bc:	d8802917 	ldw	r2,164(sp)
    29c0:	00c00184 	movi	r3,6
    29c4:	1880012e 	bgeu	r3,r2,29cc <___vfprintf_internal_r+0x1ca0>
    29c8:	1805883a 	mov	r2,r3
    29cc:	d8802e15 	stw	r2,184(sp)
    29d0:	1000ef16 	blt	r2,zero,2d90 <___vfprintf_internal_r+0x2064>
    29d4:	04000074 	movhi	r16,1
    29d8:	d8802a15 	stw	r2,168(sp)
    29dc:	dcc02d15 	stw	r19,180(sp)
    29e0:	d8002915 	stw	zero,164(sp)
    29e4:	d8003215 	stw	zero,200(sp)
    29e8:	84004e04 	addi	r16,r16,312
    29ec:	0039883a 	mov	fp,zero
    29f0:	003aa206 	br	147c <__ram_exceptions_end+0xfbfe1228>
    29f4:	0021883a 	mov	r16,zero
    29f8:	003e0706 	br	2218 <__ram_exceptions_end+0xfbfe1fc4>
    29fc:	d9002c17 	ldw	r4,176(sp)
    2a00:	d9801e04 	addi	r6,sp,120
    2a04:	b80b883a 	mov	r5,r23
    2a08:	00078440 	call	7844 <__sprint_r>
    2a0c:	1039c91e 	bne	r2,zero,1134 <__ram_exceptions_end+0xfbfe0ee0>
    2a10:	d8802617 	ldw	r2,152(sp)
    2a14:	d9403317 	ldw	r5,204(sp)
    2a18:	d8c02017 	ldw	r3,128(sp)
    2a1c:	da000404 	addi	r8,sp,16
    2a20:	2885c83a 	sub	r2,r5,r2
    2a24:	003dfb06 	br	2214 <__ram_exceptions_end+0xfbfe1fc0>
    2a28:	9080004c 	andi	r2,r18,1
    2a2c:	103e8f1e 	bne	r2,zero,246c <__ram_exceptions_end+0xfbfe2218>
    2a30:	d8802117 	ldw	r2,132(sp)
    2a34:	003e9e06 	br	24b0 <__ram_exceptions_end+0xfbfe225c>
    2a38:	1025883a 	mov	r18,r2
    2a3c:	0039883a 	mov	fp,zero
    2a40:	00800084 	movi	r2,2
    2a44:	003fd306 	br	2994 <__ram_exceptions_end+0xfbfe2740>
    2a48:	07000b44 	movi	fp,45
    2a4c:	df002785 	stb	fp,158(sp)
    2a50:	003a4006 	br	1354 <__ram_exceptions_end+0xfbfe1100>
    2a54:	00c00b44 	movi	r3,45
    2a58:	d8c02785 	stb	r3,158(sp)
    2a5c:	d8802a15 	stw	r2,168(sp)
    2a60:	dc802b17 	ldw	r18,172(sp)
    2a64:	d8002915 	stw	zero,164(sp)
    2a68:	07000b44 	movi	fp,45
    2a6c:	003a8006 	br	1470 <__ram_exceptions_end+0xfbfe121c>
    2a70:	04000074 	movhi	r16,1
    2a74:	84004304 	addi	r16,r16,268
    2a78:	003f4706 	br	2798 <__ram_exceptions_end+0xfbfe2544>
    2a7c:	d8c02d17 	ldw	r3,180(sp)
    2a80:	d9002f17 	ldw	r4,188(sp)
    2a84:	18800017 	ldw	r2,0(r3)
    2a88:	18c00104 	addi	r3,r3,4
    2a8c:	d8c02d15 	stw	r3,180(sp)
    2a90:	11000015 	stw	r4,0(r2)
    2a94:	0038dd06 	br	e0c <__ram_exceptions_end+0xfbfe0bb8>
    2a98:	dd802617 	ldw	r22,152(sp)
    2a9c:	00bfff44 	movi	r2,-3
    2aa0:	b0801c16 	blt	r22,r2,2b14 <___vfprintf_internal_r+0x1de8>
    2aa4:	d9402917 	ldw	r5,164(sp)
    2aa8:	2d801a16 	blt	r5,r22,2b14 <___vfprintf_internal_r+0x1de8>
    2aac:	dd803215 	stw	r22,200(sp)
    2ab0:	003e8906 	br	24d8 <__ram_exceptions_end+0xfbfe2284>
    2ab4:	01000074 	movhi	r4,1
    2ab8:	21005084 	addi	r4,r4,322
    2abc:	d9002b15 	stw	r4,172(sp)
    2ac0:	003c9106 	br	1d08 <__ram_exceptions_end+0xfbfe1ab4>
    2ac4:	e005883a 	mov	r2,fp
    2ac8:	003e7906 	br	24b0 <__ram_exceptions_end+0xfbfe225c>
    2acc:	d9402917 	ldw	r5,164(sp)
    2ad0:	df002783 	ldbu	fp,158(sp)
    2ad4:	dcc02d15 	stw	r19,180(sp)
    2ad8:	d9402a15 	stw	r5,168(sp)
    2adc:	d9402e15 	stw	r5,184(sp)
    2ae0:	d8002915 	stw	zero,164(sp)
    2ae4:	d8003215 	stw	zero,200(sp)
    2ae8:	003a5d06 	br	1460 <__ram_exceptions_end+0xfbfe120c>
    2aec:	9080004c 	andi	r2,r18,1
    2af0:	0039883a 	mov	fp,zero
    2af4:	10000426 	beq	r2,zero,2b08 <___vfprintf_internal_r+0x1ddc>
    2af8:	00800c04 	movi	r2,48
    2afc:	dc001dc4 	addi	r16,sp,119
    2b00:	d8801dc5 	stb	r2,119(sp)
    2b04:	003b8006 	br	1908 <__ram_exceptions_end+0xfbfe16b4>
    2b08:	d8002e15 	stw	zero,184(sp)
    2b0c:	dc001e04 	addi	r16,sp,120
    2b10:	003a4d06 	br	1448 <__ram_exceptions_end+0xfbfe11f4>
    2b14:	8c7fff84 	addi	r17,r17,-2
    2b18:	b5bfffc4 	addi	r22,r22,-1
    2b1c:	dd802615 	stw	r22,152(sp)
    2b20:	dc4022c5 	stb	r17,139(sp)
    2b24:	b000bf16 	blt	r22,zero,2e24 <___vfprintf_internal_r+0x20f8>
    2b28:	00800ac4 	movi	r2,43
    2b2c:	d8802305 	stb	r2,140(sp)
    2b30:	00800244 	movi	r2,9
    2b34:	15807016 	blt	r2,r22,2cf8 <___vfprintf_internal_r+0x1fcc>
    2b38:	00800c04 	movi	r2,48
    2b3c:	b5800c04 	addi	r22,r22,48
    2b40:	d8802345 	stb	r2,141(sp)
    2b44:	dd802385 	stb	r22,142(sp)
    2b48:	d88023c4 	addi	r2,sp,143
    2b4c:	df0022c4 	addi	fp,sp,139
    2b50:	d8c03317 	ldw	r3,204(sp)
    2b54:	1739c83a 	sub	fp,r2,fp
    2b58:	d9003317 	ldw	r4,204(sp)
    2b5c:	e0c7883a 	add	r3,fp,r3
    2b60:	df003a15 	stw	fp,232(sp)
    2b64:	d8c02e15 	stw	r3,184(sp)
    2b68:	00800044 	movi	r2,1
    2b6c:	1100b30e 	bge	r2,r4,2e3c <___vfprintf_internal_r+0x2110>
    2b70:	d8c02e17 	ldw	r3,184(sp)
    2b74:	18c00044 	addi	r3,r3,1
    2b78:	d8c02e15 	stw	r3,184(sp)
    2b7c:	1805883a 	mov	r2,r3
    2b80:	1800ac16 	blt	r3,zero,2e34 <___vfprintf_internal_r+0x2108>
    2b84:	d8003215 	stw	zero,200(sp)
    2b88:	003e5d06 	br	2500 <__ram_exceptions_end+0xfbfe22ac>
    2b8c:	d9002c17 	ldw	r4,176(sp)
    2b90:	d9801e04 	addi	r6,sp,120
    2b94:	b80b883a 	mov	r5,r23
    2b98:	00078440 	call	7844 <__sprint_r>
    2b9c:	1039651e 	bne	r2,zero,1134 <__ram_exceptions_end+0xfbfe0ee0>
    2ba0:	dc402617 	ldw	r17,152(sp)
    2ba4:	d8c02017 	ldw	r3,128(sp)
    2ba8:	d8801f17 	ldw	r2,124(sp)
    2bac:	da000404 	addi	r8,sp,16
    2bb0:	003ed606 	br	270c <__ram_exceptions_end+0xfbfe24b8>
    2bb4:	582b883a 	mov	r21,r11
    2bb8:	d8002915 	stw	zero,164(sp)
    2bbc:	0038bd06 	br	eb4 <__ram_exceptions_end+0xfbfe0c60>
    2bc0:	d8802917 	ldw	r2,164(sp)
    2bc4:	103e071e 	bne	r2,zero,23e4 <__ram_exceptions_end+0xfbfe2190>
    2bc8:	dc002915 	stw	r16,164(sp)
    2bcc:	003e0506 	br	23e4 <__ram_exceptions_end+0xfbfe2190>
    2bd0:	d9002917 	ldw	r4,164(sp)
    2bd4:	20c00044 	addi	r3,r4,1
    2bd8:	003e0f06 	br	2418 <__ram_exceptions_end+0xfbfe21c4>
    2bdc:	01400184 	movi	r5,6
    2be0:	d9402915 	stw	r5,164(sp)
    2be4:	003dff06 	br	23e4 <__ram_exceptions_end+0xfbfe2190>
    2be8:	d8802104 	addi	r2,sp,132
    2bec:	d8800315 	stw	r2,12(sp)
    2bf0:	d8802504 	addi	r2,sp,148
    2bf4:	d8800215 	stw	r2,8(sp)
    2bf8:	d8802604 	addi	r2,sp,152
    2bfc:	d8800115 	stw	r2,4(sp)
    2c00:	d8802917 	ldw	r2,164(sp)
    2c04:	d9403617 	ldw	r5,216(sp)
    2c08:	d9002c17 	ldw	r4,176(sp)
    2c0c:	d8800015 	stw	r2,0(sp)
    2c10:	01c000c4 	movi	r7,3
    2c14:	980d883a 	mov	r6,r19
    2c18:	da003d15 	stw	r8,244(sp)
    2c1c:	00033500 	call	3350 <_dtoa_r>
    2c20:	d8c02917 	ldw	r3,164(sp)
    2c24:	da003d17 	ldw	r8,244(sp)
    2c28:	1021883a 	mov	r16,r2
    2c2c:	10f9883a 	add	fp,r2,r3
    2c30:	81000007 	ldb	r4,0(r16)
    2c34:	00800c04 	movi	r2,48
    2c38:	20805e26 	beq	r4,r2,2db4 <___vfprintf_internal_r+0x2088>
    2c3c:	d8c02617 	ldw	r3,152(sp)
    2c40:	e0f9883a 	add	fp,fp,r3
    2c44:	003e0a06 	br	2470 <__ram_exceptions_end+0xfbfe221c>
    2c48:	00c00b44 	movi	r3,45
    2c4c:	24e0003c 	xorhi	r19,r4,32768
    2c50:	d8c02a05 	stb	r3,168(sp)
    2c54:	003de906 	br	23fc <__ram_exceptions_end+0xfbfe21a8>
    2c58:	d8c03217 	ldw	r3,200(sp)
    2c5c:	00c07a0e 	bge	zero,r3,2e48 <___vfprintf_internal_r+0x211c>
    2c60:	00800044 	movi	r2,1
    2c64:	d9003317 	ldw	r4,204(sp)
    2c68:	1105883a 	add	r2,r2,r4
    2c6c:	d8802e15 	stw	r2,184(sp)
    2c70:	10004e16 	blt	r2,zero,2dac <___vfprintf_internal_r+0x2080>
    2c74:	044019c4 	movi	r17,103
    2c78:	003e2106 	br	2500 <__ram_exceptions_end+0xfbfe22ac>
    2c7c:	d9002917 	ldw	r4,164(sp)
    2c80:	d8802104 	addi	r2,sp,132
    2c84:	d8800315 	stw	r2,12(sp)
    2c88:	d9000015 	stw	r4,0(sp)
    2c8c:	d8802504 	addi	r2,sp,148
    2c90:	d9403617 	ldw	r5,216(sp)
    2c94:	d9002c17 	ldw	r4,176(sp)
    2c98:	d8800215 	stw	r2,8(sp)
    2c9c:	d8802604 	addi	r2,sp,152
    2ca0:	d8800115 	stw	r2,4(sp)
    2ca4:	01c000c4 	movi	r7,3
    2ca8:	980d883a 	mov	r6,r19
    2cac:	da003d15 	stw	r8,244(sp)
    2cb0:	00033500 	call	3350 <_dtoa_r>
    2cb4:	d8c02917 	ldw	r3,164(sp)
    2cb8:	da003d17 	ldw	r8,244(sp)
    2cbc:	1021883a 	mov	r16,r2
    2cc0:	00801184 	movi	r2,70
    2cc4:	80f9883a 	add	fp,r16,r3
    2cc8:	88bfd926 	beq	r17,r2,2c30 <__ram_exceptions_end+0xfbfe29dc>
    2ccc:	003de806 	br	2470 <__ram_exceptions_end+0xfbfe221c>
    2cd0:	d9002917 	ldw	r4,164(sp)
    2cd4:	00c04d0e 	bge	zero,r3,2e0c <___vfprintf_internal_r+0x20e0>
    2cd8:	2000441e 	bne	r4,zero,2dec <___vfprintf_internal_r+0x20c0>
    2cdc:	9480004c 	andi	r18,r18,1
    2ce0:	9000421e 	bne	r18,zero,2dec <___vfprintf_internal_r+0x20c0>
    2ce4:	1805883a 	mov	r2,r3
    2ce8:	18007016 	blt	r3,zero,2eac <___vfprintf_internal_r+0x2180>
    2cec:	d8c03217 	ldw	r3,200(sp)
    2cf0:	d8c02e15 	stw	r3,184(sp)
    2cf4:	003e0206 	br	2500 <__ram_exceptions_end+0xfbfe22ac>
    2cf8:	df0022c4 	addi	fp,sp,139
    2cfc:	dc002915 	stw	r16,164(sp)
    2d00:	4027883a 	mov	r19,r8
    2d04:	e021883a 	mov	r16,fp
    2d08:	b009883a 	mov	r4,r22
    2d0c:	01400284 	movi	r5,10
    2d10:	0000b900 	call	b90 <__modsi3>
    2d14:	10800c04 	addi	r2,r2,48
    2d18:	843fffc4 	addi	r16,r16,-1
    2d1c:	b009883a 	mov	r4,r22
    2d20:	01400284 	movi	r5,10
    2d24:	80800005 	stb	r2,0(r16)
    2d28:	0000b0c0 	call	b0c <__divsi3>
    2d2c:	102d883a 	mov	r22,r2
    2d30:	00800244 	movi	r2,9
    2d34:	15bff416 	blt	r2,r22,2d08 <__ram_exceptions_end+0xfbfe2ab4>
    2d38:	9811883a 	mov	r8,r19
    2d3c:	b0800c04 	addi	r2,r22,48
    2d40:	8027883a 	mov	r19,r16
    2d44:	997fffc4 	addi	r5,r19,-1
    2d48:	98bfffc5 	stb	r2,-1(r19)
    2d4c:	dc002917 	ldw	r16,164(sp)
    2d50:	2f006a2e 	bgeu	r5,fp,2efc <___vfprintf_internal_r+0x21d0>
    2d54:	d9c02384 	addi	r7,sp,142
    2d58:	3ccfc83a 	sub	r7,r7,r19
    2d5c:	d9002344 	addi	r4,sp,141
    2d60:	e1cf883a 	add	r7,fp,r7
    2d64:	00000106 	br	2d6c <___vfprintf_internal_r+0x2040>
    2d68:	28800003 	ldbu	r2,0(r5)
    2d6c:	20800005 	stb	r2,0(r4)
    2d70:	21000044 	addi	r4,r4,1
    2d74:	29400044 	addi	r5,r5,1
    2d78:	393ffb1e 	bne	r7,r4,2d68 <__ram_exceptions_end+0xfbfe2b14>
    2d7c:	d8802304 	addi	r2,sp,140
    2d80:	14c5c83a 	sub	r2,r2,r19
    2d84:	d8c02344 	addi	r3,sp,141
    2d88:	1885883a 	add	r2,r3,r2
    2d8c:	003f7006 	br	2b50 <__ram_exceptions_end+0xfbfe28fc>
    2d90:	0005883a 	mov	r2,zero
    2d94:	003f0f06 	br	29d4 <__ram_exceptions_end+0xfbfe2780>
    2d98:	d8c03217 	ldw	r3,200(sp)
    2d9c:	18c00044 	addi	r3,r3,1
    2da0:	d8c02e15 	stw	r3,184(sp)
    2da4:	1805883a 	mov	r2,r3
    2da8:	183fb20e 	bge	r3,zero,2c74 <__ram_exceptions_end+0xfbfe2a20>
    2dac:	0005883a 	mov	r2,zero
    2db0:	003fb006 	br	2c74 <__ram_exceptions_end+0xfbfe2a20>
    2db4:	d9003617 	ldw	r4,216(sp)
    2db8:	000d883a 	mov	r6,zero
    2dbc:	000f883a 	mov	r7,zero
    2dc0:	980b883a 	mov	r5,r19
    2dc4:	d8c03c15 	stw	r3,240(sp)
    2dc8:	da003d15 	stw	r8,244(sp)
    2dcc:	000be840 	call	be84 <__eqdf2>
    2dd0:	d8c03c17 	ldw	r3,240(sp)
    2dd4:	da003d17 	ldw	r8,244(sp)
    2dd8:	103f9826 	beq	r2,zero,2c3c <__ram_exceptions_end+0xfbfe29e8>
    2ddc:	00800044 	movi	r2,1
    2de0:	10c7c83a 	sub	r3,r2,r3
    2de4:	d8c02615 	stw	r3,152(sp)
    2de8:	003f9506 	br	2c40 <__ram_exceptions_end+0xfbfe29ec>
    2dec:	d9002917 	ldw	r4,164(sp)
    2df0:	d8c03217 	ldw	r3,200(sp)
    2df4:	20800044 	addi	r2,r4,1
    2df8:	1885883a 	add	r2,r3,r2
    2dfc:	d8802e15 	stw	r2,184(sp)
    2e00:	103dbf0e 	bge	r2,zero,2500 <__ram_exceptions_end+0xfbfe22ac>
    2e04:	0005883a 	mov	r2,zero
    2e08:	003dbd06 	br	2500 <__ram_exceptions_end+0xfbfe22ac>
    2e0c:	2000211e 	bne	r4,zero,2e94 <___vfprintf_internal_r+0x2168>
    2e10:	9480004c 	andi	r18,r18,1
    2e14:	90001f1e 	bne	r18,zero,2e94 <___vfprintf_internal_r+0x2168>
    2e18:	00800044 	movi	r2,1
    2e1c:	d8802e15 	stw	r2,184(sp)
    2e20:	003db706 	br	2500 <__ram_exceptions_end+0xfbfe22ac>
    2e24:	00800b44 	movi	r2,45
    2e28:	05adc83a 	sub	r22,zero,r22
    2e2c:	d8802305 	stb	r2,140(sp)
    2e30:	003f3f06 	br	2b30 <__ram_exceptions_end+0xfbfe28dc>
    2e34:	0005883a 	mov	r2,zero
    2e38:	003f5206 	br	2b84 <__ram_exceptions_end+0xfbfe2930>
    2e3c:	90a4703a 	and	r18,r18,r2
    2e40:	903f4e26 	beq	r18,zero,2b7c <__ram_exceptions_end+0xfbfe2928>
    2e44:	003f4a06 	br	2b70 <__ram_exceptions_end+0xfbfe291c>
    2e48:	00800084 	movi	r2,2
    2e4c:	10c5c83a 	sub	r2,r2,r3
    2e50:	003f8406 	br	2c64 <__ram_exceptions_end+0xfbfe2a10>
    2e54:	d8802d17 	ldw	r2,180(sp)
    2e58:	d9002d17 	ldw	r4,180(sp)
    2e5c:	ac400043 	ldbu	r17,1(r21)
    2e60:	10800017 	ldw	r2,0(r2)
    2e64:	582b883a 	mov	r21,r11
    2e68:	d8802915 	stw	r2,164(sp)
    2e6c:	20800104 	addi	r2,r4,4
    2e70:	d9002917 	ldw	r4,164(sp)
    2e74:	d8802d15 	stw	r2,180(sp)
    2e78:	203e7a0e 	bge	r4,zero,2864 <__ram_exceptions_end+0xfbfe2610>
    2e7c:	8c403fcc 	andi	r17,r17,255
    2e80:	00bfffc4 	movi	r2,-1
    2e84:	8c40201c 	xori	r17,r17,128
    2e88:	d8802915 	stw	r2,164(sp)
    2e8c:	8c7fe004 	addi	r17,r17,-128
    2e90:	00380706 	br	eb0 <__ram_exceptions_end+0xfbfe0c5c>
    2e94:	d8c02917 	ldw	r3,164(sp)
    2e98:	18c00084 	addi	r3,r3,2
    2e9c:	d8c02e15 	stw	r3,184(sp)
    2ea0:	1805883a 	mov	r2,r3
    2ea4:	183d960e 	bge	r3,zero,2500 <__ram_exceptions_end+0xfbfe22ac>
    2ea8:	003fd606 	br	2e04 <__ram_exceptions_end+0xfbfe2bb0>
    2eac:	0005883a 	mov	r2,zero
    2eb0:	003f8e06 	br	2cec <__ram_exceptions_end+0xfbfe2a98>
    2eb4:	9080004c 	andi	r2,r18,1
    2eb8:	103f811e 	bne	r2,zero,2cc0 <__ram_exceptions_end+0xfbfe2a6c>
    2ebc:	d8802117 	ldw	r2,132(sp)
    2ec0:	1405c83a 	sub	r2,r2,r16
    2ec4:	d8803315 	stw	r2,204(sp)
    2ec8:	b47ef326 	beq	r22,r17,2a98 <__ram_exceptions_end+0xfbfe2844>
    2ecc:	dd802617 	ldw	r22,152(sp)
    2ed0:	003f1106 	br	2b18 <__ram_exceptions_end+0xfbfe28c4>
    2ed4:	d9c02785 	stb	r7,158(sp)
    2ed8:	00390406 	br	12ec <__ram_exceptions_end+0xfbfe1098>
    2edc:	d9c02785 	stb	r7,158(sp)
    2ee0:	0038d306 	br	1230 <__ram_exceptions_end+0xfbfe0fdc>
    2ee4:	d9c02785 	stb	r7,158(sp)
    2ee8:	003a6106 	br	1870 <__ram_exceptions_end+0xfbfe161c>
    2eec:	d9c02785 	stb	r7,158(sp)
    2ef0:	003af806 	br	1ad4 <__ram_exceptions_end+0xfbfe1880>
    2ef4:	0005883a 	mov	r2,zero
    2ef8:	003d7e06 	br	24f4 <__ram_exceptions_end+0xfbfe22a0>
    2efc:	d8802344 	addi	r2,sp,141
    2f00:	003f1306 	br	2b50 <__ram_exceptions_end+0xfbfe28fc>
    2f04:	d9c02785 	stb	r7,158(sp)
    2f08:	00392306 	br	1398 <__ram_exceptions_end+0xfbfe1144>
    2f0c:	d9c02785 	stb	r7,158(sp)
    2f10:	003aa906 	br	19b8 <__ram_exceptions_end+0xfbfe1764>
    2f14:	d9c02785 	stb	r7,158(sp)
    2f18:	003a3d06 	br	1810 <__ram_exceptions_end+0xfbfe15bc>
    2f1c:	d9c02785 	stb	r7,158(sp)
    2f20:	003aca06 	br	1a4c <__ram_exceptions_end+0xfbfe17f8>

00002f24 <__vfprintf_internal>:
    2f24:	00800074 	movhi	r2,1
    2f28:	1087ab04 	addi	r2,r2,7852
    2f2c:	300f883a 	mov	r7,r6
    2f30:	280d883a 	mov	r6,r5
    2f34:	200b883a 	mov	r5,r4
    2f38:	11000017 	ldw	r4,0(r2)
    2f3c:	0000d2c1 	jmpi	d2c <___vfprintf_internal_r>

00002f40 <__sbprintf>:
    2f40:	2880030b 	ldhu	r2,12(r5)
    2f44:	2ac01917 	ldw	r11,100(r5)
    2f48:	2a80038b 	ldhu	r10,14(r5)
    2f4c:	2a400717 	ldw	r9,28(r5)
    2f50:	2a000917 	ldw	r8,36(r5)
    2f54:	defee204 	addi	sp,sp,-1144
    2f58:	00c10004 	movi	r3,1024
    2f5c:	dc011a15 	stw	r16,1128(sp)
    2f60:	10bfff4c 	andi	r2,r2,65533
    2f64:	2821883a 	mov	r16,r5
    2f68:	d8cb883a 	add	r5,sp,r3
    2f6c:	dc811c15 	stw	r18,1136(sp)
    2f70:	dc411b15 	stw	r17,1132(sp)
    2f74:	dfc11d15 	stw	ra,1140(sp)
    2f78:	2025883a 	mov	r18,r4
    2f7c:	d881030d 	sth	r2,1036(sp)
    2f80:	dac11915 	stw	r11,1124(sp)
    2f84:	da81038d 	sth	r10,1038(sp)
    2f88:	da410715 	stw	r9,1052(sp)
    2f8c:	da010915 	stw	r8,1060(sp)
    2f90:	dec10015 	stw	sp,1024(sp)
    2f94:	dec10415 	stw	sp,1040(sp)
    2f98:	d8c10215 	stw	r3,1032(sp)
    2f9c:	d8c10515 	stw	r3,1044(sp)
    2fa0:	d8010615 	stw	zero,1048(sp)
    2fa4:	0000d2c0 	call	d2c <___vfprintf_internal_r>
    2fa8:	1023883a 	mov	r17,r2
    2fac:	10000416 	blt	r2,zero,2fc0 <__sbprintf+0x80>
    2fb0:	d9410004 	addi	r5,sp,1024
    2fb4:	9009883a 	mov	r4,r18
    2fb8:	0004bf40 	call	4bf4 <_fflush_r>
    2fbc:	10000d1e 	bne	r2,zero,2ff4 <__sbprintf+0xb4>
    2fc0:	d881030b 	ldhu	r2,1036(sp)
    2fc4:	1080100c 	andi	r2,r2,64
    2fc8:	10000326 	beq	r2,zero,2fd8 <__sbprintf+0x98>
    2fcc:	8080030b 	ldhu	r2,12(r16)
    2fd0:	10801014 	ori	r2,r2,64
    2fd4:	8080030d 	sth	r2,12(r16)
    2fd8:	8805883a 	mov	r2,r17
    2fdc:	dfc11d17 	ldw	ra,1140(sp)
    2fe0:	dc811c17 	ldw	r18,1136(sp)
    2fe4:	dc411b17 	ldw	r17,1132(sp)
    2fe8:	dc011a17 	ldw	r16,1128(sp)
    2fec:	dec11e04 	addi	sp,sp,1144
    2ff0:	f800283a 	ret
    2ff4:	047fffc4 	movi	r17,-1
    2ff8:	003ff106 	br	2fc0 <__ram_exceptions_end+0xfbfe2d6c>

00002ffc <__swsetup_r>:
    2ffc:	00800074 	movhi	r2,1
    3000:	defffd04 	addi	sp,sp,-12
    3004:	1087ab04 	addi	r2,r2,7852
    3008:	dc400115 	stw	r17,4(sp)
    300c:	2023883a 	mov	r17,r4
    3010:	11000017 	ldw	r4,0(r2)
    3014:	dc000015 	stw	r16,0(sp)
    3018:	dfc00215 	stw	ra,8(sp)
    301c:	2821883a 	mov	r16,r5
    3020:	20000226 	beq	r4,zero,302c <__swsetup_r+0x30>
    3024:	20800e17 	ldw	r2,56(r4)
    3028:	10003126 	beq	r2,zero,30f0 <__swsetup_r+0xf4>
    302c:	8080030b 	ldhu	r2,12(r16)
    3030:	10c0020c 	andi	r3,r2,8
    3034:	1009883a 	mov	r4,r2
    3038:	18000f26 	beq	r3,zero,3078 <__swsetup_r+0x7c>
    303c:	80c00417 	ldw	r3,16(r16)
    3040:	18001526 	beq	r3,zero,3098 <__swsetup_r+0x9c>
    3044:	1100004c 	andi	r4,r2,1
    3048:	20001c1e 	bne	r4,zero,30bc <__swsetup_r+0xc0>
    304c:	1080008c 	andi	r2,r2,2
    3050:	1000291e 	bne	r2,zero,30f8 <__swsetup_r+0xfc>
    3054:	80800517 	ldw	r2,20(r16)
    3058:	80800215 	stw	r2,8(r16)
    305c:	18001c26 	beq	r3,zero,30d0 <__swsetup_r+0xd4>
    3060:	0005883a 	mov	r2,zero
    3064:	dfc00217 	ldw	ra,8(sp)
    3068:	dc400117 	ldw	r17,4(sp)
    306c:	dc000017 	ldw	r16,0(sp)
    3070:	dec00304 	addi	sp,sp,12
    3074:	f800283a 	ret
    3078:	2080040c 	andi	r2,r4,16
    307c:	10002e26 	beq	r2,zero,3138 <__swsetup_r+0x13c>
    3080:	2080010c 	andi	r2,r4,4
    3084:	10001e1e 	bne	r2,zero,3100 <__swsetup_r+0x104>
    3088:	80c00417 	ldw	r3,16(r16)
    308c:	20800214 	ori	r2,r4,8
    3090:	8080030d 	sth	r2,12(r16)
    3094:	183feb1e 	bne	r3,zero,3044 <__ram_exceptions_end+0xfbfe2df0>
    3098:	1100a00c 	andi	r4,r2,640
    309c:	01408004 	movi	r5,512
    30a0:	217fe826 	beq	r4,r5,3044 <__ram_exceptions_end+0xfbfe2df0>
    30a4:	800b883a 	mov	r5,r16
    30a8:	8809883a 	mov	r4,r17
    30ac:	00056b80 	call	56b8 <__smakebuf_r>
    30b0:	8080030b 	ldhu	r2,12(r16)
    30b4:	80c00417 	ldw	r3,16(r16)
    30b8:	003fe206 	br	3044 <__ram_exceptions_end+0xfbfe2df0>
    30bc:	80800517 	ldw	r2,20(r16)
    30c0:	80000215 	stw	zero,8(r16)
    30c4:	0085c83a 	sub	r2,zero,r2
    30c8:	80800615 	stw	r2,24(r16)
    30cc:	183fe41e 	bne	r3,zero,3060 <__ram_exceptions_end+0xfbfe2e0c>
    30d0:	80c0030b 	ldhu	r3,12(r16)
    30d4:	0005883a 	mov	r2,zero
    30d8:	1900200c 	andi	r4,r3,128
    30dc:	203fe126 	beq	r4,zero,3064 <__ram_exceptions_end+0xfbfe2e10>
    30e0:	18c01014 	ori	r3,r3,64
    30e4:	80c0030d 	sth	r3,12(r16)
    30e8:	00bfffc4 	movi	r2,-1
    30ec:	003fdd06 	br	3064 <__ram_exceptions_end+0xfbfe2e10>
    30f0:	0004fd00 	call	4fd0 <__sinit>
    30f4:	003fcd06 	br	302c <__ram_exceptions_end+0xfbfe2dd8>
    30f8:	0005883a 	mov	r2,zero
    30fc:	003fd606 	br	3058 <__ram_exceptions_end+0xfbfe2e04>
    3100:	81400c17 	ldw	r5,48(r16)
    3104:	28000626 	beq	r5,zero,3120 <__swsetup_r+0x124>
    3108:	80801004 	addi	r2,r16,64
    310c:	28800326 	beq	r5,r2,311c <__swsetup_r+0x120>
    3110:	8809883a 	mov	r4,r17
    3114:	00051440 	call	5144 <_free_r>
    3118:	8100030b 	ldhu	r4,12(r16)
    311c:	80000c15 	stw	zero,48(r16)
    3120:	80c00417 	ldw	r3,16(r16)
    3124:	00bff6c4 	movi	r2,-37
    3128:	1108703a 	and	r4,r2,r4
    312c:	80000115 	stw	zero,4(r16)
    3130:	80c00015 	stw	r3,0(r16)
    3134:	003fd506 	br	308c <__ram_exceptions_end+0xfbfe2e38>
    3138:	00800244 	movi	r2,9
    313c:	88800015 	stw	r2,0(r17)
    3140:	20801014 	ori	r2,r4,64
    3144:	8080030d 	sth	r2,12(r16)
    3148:	00bfffc4 	movi	r2,-1
    314c:	003fc506 	br	3064 <__ram_exceptions_end+0xfbfe2e10>

00003150 <quorem>:
    3150:	defff704 	addi	sp,sp,-36
    3154:	dc800215 	stw	r18,8(sp)
    3158:	20800417 	ldw	r2,16(r4)
    315c:	2c800417 	ldw	r18,16(r5)
    3160:	dfc00815 	stw	ra,32(sp)
    3164:	ddc00715 	stw	r23,28(sp)
    3168:	dd800615 	stw	r22,24(sp)
    316c:	dd400515 	stw	r21,20(sp)
    3170:	dd000415 	stw	r20,16(sp)
    3174:	dcc00315 	stw	r19,12(sp)
    3178:	dc400115 	stw	r17,4(sp)
    317c:	dc000015 	stw	r16,0(sp)
    3180:	14807116 	blt	r2,r18,3348 <quorem+0x1f8>
    3184:	94bfffc4 	addi	r18,r18,-1
    3188:	94ad883a 	add	r22,r18,r18
    318c:	b5ad883a 	add	r22,r22,r22
    3190:	2c400504 	addi	r17,r5,20
    3194:	8da9883a 	add	r20,r17,r22
    3198:	25400504 	addi	r21,r4,20
    319c:	282f883a 	mov	r23,r5
    31a0:	adad883a 	add	r22,r21,r22
    31a4:	a1400017 	ldw	r5,0(r20)
    31a8:	2021883a 	mov	r16,r4
    31ac:	b1000017 	ldw	r4,0(r22)
    31b0:	29400044 	addi	r5,r5,1
    31b4:	0000c040 	call	c04 <__udivsi3>
    31b8:	1027883a 	mov	r19,r2
    31bc:	10002c26 	beq	r2,zero,3270 <quorem+0x120>
    31c0:	a813883a 	mov	r9,r21
    31c4:	880b883a 	mov	r5,r17
    31c8:	0009883a 	mov	r4,zero
    31cc:	000d883a 	mov	r6,zero
    31d0:	2a000017 	ldw	r8,0(r5)
    31d4:	49c00017 	ldw	r7,0(r9)
    31d8:	29400104 	addi	r5,r5,4
    31dc:	40bfffcc 	andi	r2,r8,65535
    31e0:	14c5383a 	mul	r2,r2,r19
    31e4:	4010d43a 	srli	r8,r8,16
    31e8:	38ffffcc 	andi	r3,r7,65535
    31ec:	1105883a 	add	r2,r2,r4
    31f0:	1008d43a 	srli	r4,r2,16
    31f4:	44d1383a 	mul	r8,r8,r19
    31f8:	198d883a 	add	r6,r3,r6
    31fc:	10ffffcc 	andi	r3,r2,65535
    3200:	30c7c83a 	sub	r3,r6,r3
    3204:	380ed43a 	srli	r7,r7,16
    3208:	4105883a 	add	r2,r8,r4
    320c:	180dd43a 	srai	r6,r3,16
    3210:	113fffcc 	andi	r4,r2,65535
    3214:	390fc83a 	sub	r7,r7,r4
    3218:	398d883a 	add	r6,r7,r6
    321c:	300e943a 	slli	r7,r6,16
    3220:	18ffffcc 	andi	r3,r3,65535
    3224:	1008d43a 	srli	r4,r2,16
    3228:	38ceb03a 	or	r7,r7,r3
    322c:	49c00015 	stw	r7,0(r9)
    3230:	300dd43a 	srai	r6,r6,16
    3234:	4a400104 	addi	r9,r9,4
    3238:	a17fe52e 	bgeu	r20,r5,31d0 <__ram_exceptions_end+0xfbfe2f7c>
    323c:	b0800017 	ldw	r2,0(r22)
    3240:	10000b1e 	bne	r2,zero,3270 <quorem+0x120>
    3244:	b0bfff04 	addi	r2,r22,-4
    3248:	a880082e 	bgeu	r21,r2,326c <quorem+0x11c>
    324c:	b0ffff17 	ldw	r3,-4(r22)
    3250:	18000326 	beq	r3,zero,3260 <quorem+0x110>
    3254:	00000506 	br	326c <quorem+0x11c>
    3258:	10c00017 	ldw	r3,0(r2)
    325c:	1800031e 	bne	r3,zero,326c <quorem+0x11c>
    3260:	10bfff04 	addi	r2,r2,-4
    3264:	94bfffc4 	addi	r18,r18,-1
    3268:	a8bffb36 	bltu	r21,r2,3258 <__ram_exceptions_end+0xfbfe3004>
    326c:	84800415 	stw	r18,16(r16)
    3270:	b80b883a 	mov	r5,r23
    3274:	8009883a 	mov	r4,r16
    3278:	0006c9c0 	call	6c9c <__mcmp>
    327c:	10002616 	blt	r2,zero,3318 <quorem+0x1c8>
    3280:	9cc00044 	addi	r19,r19,1
    3284:	a805883a 	mov	r2,r21
    3288:	000b883a 	mov	r5,zero
    328c:	11000017 	ldw	r4,0(r2)
    3290:	89800017 	ldw	r6,0(r17)
    3294:	10800104 	addi	r2,r2,4
    3298:	20ffffcc 	andi	r3,r4,65535
    329c:	194b883a 	add	r5,r3,r5
    32a0:	30ffffcc 	andi	r3,r6,65535
    32a4:	28c7c83a 	sub	r3,r5,r3
    32a8:	300cd43a 	srli	r6,r6,16
    32ac:	2008d43a 	srli	r4,r4,16
    32b0:	180bd43a 	srai	r5,r3,16
    32b4:	18ffffcc 	andi	r3,r3,65535
    32b8:	2189c83a 	sub	r4,r4,r6
    32bc:	2149883a 	add	r4,r4,r5
    32c0:	200c943a 	slli	r6,r4,16
    32c4:	8c400104 	addi	r17,r17,4
    32c8:	200bd43a 	srai	r5,r4,16
    32cc:	30c6b03a 	or	r3,r6,r3
    32d0:	10ffff15 	stw	r3,-4(r2)
    32d4:	a47fed2e 	bgeu	r20,r17,328c <__ram_exceptions_end+0xfbfe3038>
    32d8:	9485883a 	add	r2,r18,r18
    32dc:	1085883a 	add	r2,r2,r2
    32e0:	a887883a 	add	r3,r21,r2
    32e4:	18800017 	ldw	r2,0(r3)
    32e8:	10000b1e 	bne	r2,zero,3318 <quorem+0x1c8>
    32ec:	18bfff04 	addi	r2,r3,-4
    32f0:	a880082e 	bgeu	r21,r2,3314 <quorem+0x1c4>
    32f4:	18ffff17 	ldw	r3,-4(r3)
    32f8:	18000326 	beq	r3,zero,3308 <quorem+0x1b8>
    32fc:	00000506 	br	3314 <quorem+0x1c4>
    3300:	10c00017 	ldw	r3,0(r2)
    3304:	1800031e 	bne	r3,zero,3314 <quorem+0x1c4>
    3308:	10bfff04 	addi	r2,r2,-4
    330c:	94bfffc4 	addi	r18,r18,-1
    3310:	a8bffb36 	bltu	r21,r2,3300 <__ram_exceptions_end+0xfbfe30ac>
    3314:	84800415 	stw	r18,16(r16)
    3318:	9805883a 	mov	r2,r19
    331c:	dfc00817 	ldw	ra,32(sp)
    3320:	ddc00717 	ldw	r23,28(sp)
    3324:	dd800617 	ldw	r22,24(sp)
    3328:	dd400517 	ldw	r21,20(sp)
    332c:	dd000417 	ldw	r20,16(sp)
    3330:	dcc00317 	ldw	r19,12(sp)
    3334:	dc800217 	ldw	r18,8(sp)
    3338:	dc400117 	ldw	r17,4(sp)
    333c:	dc000017 	ldw	r16,0(sp)
    3340:	dec00904 	addi	sp,sp,36
    3344:	f800283a 	ret
    3348:	0005883a 	mov	r2,zero
    334c:	003ff306 	br	331c <__ram_exceptions_end+0xfbfe30c8>

00003350 <_dtoa_r>:
    3350:	20801017 	ldw	r2,64(r4)
    3354:	deffde04 	addi	sp,sp,-136
    3358:	df002015 	stw	fp,128(sp)
    335c:	dcc01b15 	stw	r19,108(sp)
    3360:	dc801a15 	stw	r18,104(sp)
    3364:	dc401915 	stw	r17,100(sp)
    3368:	dc001815 	stw	r16,96(sp)
    336c:	dfc02115 	stw	ra,132(sp)
    3370:	ddc01f15 	stw	r23,124(sp)
    3374:	dd801e15 	stw	r22,120(sp)
    3378:	dd401d15 	stw	r21,116(sp)
    337c:	dd001c15 	stw	r20,112(sp)
    3380:	d9c00315 	stw	r7,12(sp)
    3384:	2039883a 	mov	fp,r4
    3388:	3023883a 	mov	r17,r6
    338c:	2825883a 	mov	r18,r5
    3390:	dc002417 	ldw	r16,144(sp)
    3394:	3027883a 	mov	r19,r6
    3398:	10000826 	beq	r2,zero,33bc <_dtoa_r+0x6c>
    339c:	21801117 	ldw	r6,68(r4)
    33a0:	00c00044 	movi	r3,1
    33a4:	100b883a 	mov	r5,r2
    33a8:	1986983a 	sll	r3,r3,r6
    33ac:	11800115 	stw	r6,4(r2)
    33b0:	10c00215 	stw	r3,8(r2)
    33b4:	000647c0 	call	647c <_Bfree>
    33b8:	e0001015 	stw	zero,64(fp)
    33bc:	88002e16 	blt	r17,zero,3478 <_dtoa_r+0x128>
    33c0:	80000015 	stw	zero,0(r16)
    33c4:	889ffc2c 	andhi	r2,r17,32752
    33c8:	00dffc34 	movhi	r3,32752
    33cc:	10c01c26 	beq	r2,r3,3440 <_dtoa_r+0xf0>
    33d0:	000d883a 	mov	r6,zero
    33d4:	000f883a 	mov	r7,zero
    33d8:	9009883a 	mov	r4,r18
    33dc:	980b883a 	mov	r5,r19
    33e0:	000be840 	call	be84 <__eqdf2>
    33e4:	10002b1e 	bne	r2,zero,3494 <_dtoa_r+0x144>
    33e8:	d9c02317 	ldw	r7,140(sp)
    33ec:	00800044 	movi	r2,1
    33f0:	38800015 	stw	r2,0(r7)
    33f4:	d8802517 	ldw	r2,148(sp)
    33f8:	10019e26 	beq	r2,zero,3a74 <_dtoa_r+0x724>
    33fc:	d8c02517 	ldw	r3,148(sp)
    3400:	00800074 	movhi	r2,1
    3404:	10805044 	addi	r2,r2,321
    3408:	18800015 	stw	r2,0(r3)
    340c:	10bfffc4 	addi	r2,r2,-1
    3410:	dfc02117 	ldw	ra,132(sp)
    3414:	df002017 	ldw	fp,128(sp)
    3418:	ddc01f17 	ldw	r23,124(sp)
    341c:	dd801e17 	ldw	r22,120(sp)
    3420:	dd401d17 	ldw	r21,116(sp)
    3424:	dd001c17 	ldw	r20,112(sp)
    3428:	dcc01b17 	ldw	r19,108(sp)
    342c:	dc801a17 	ldw	r18,104(sp)
    3430:	dc401917 	ldw	r17,100(sp)
    3434:	dc001817 	ldw	r16,96(sp)
    3438:	dec02204 	addi	sp,sp,136
    343c:	f800283a 	ret
    3440:	d8c02317 	ldw	r3,140(sp)
    3444:	0089c3c4 	movi	r2,9999
    3448:	18800015 	stw	r2,0(r3)
    344c:	90017726 	beq	r18,zero,3a2c <_dtoa_r+0x6dc>
    3450:	00800074 	movhi	r2,1
    3454:	10805c04 	addi	r2,r2,368
    3458:	d9002517 	ldw	r4,148(sp)
    345c:	203fec26 	beq	r4,zero,3410 <__ram_exceptions_end+0xfbfe31bc>
    3460:	10c000c7 	ldb	r3,3(r2)
    3464:	1801781e 	bne	r3,zero,3a48 <_dtoa_r+0x6f8>
    3468:	10c000c4 	addi	r3,r2,3
    346c:	d9802517 	ldw	r6,148(sp)
    3470:	30c00015 	stw	r3,0(r6)
    3474:	003fe606 	br	3410 <__ram_exceptions_end+0xfbfe31bc>
    3478:	04e00034 	movhi	r19,32768
    347c:	9cffffc4 	addi	r19,r19,-1
    3480:	00800044 	movi	r2,1
    3484:	8ce6703a 	and	r19,r17,r19
    3488:	80800015 	stw	r2,0(r16)
    348c:	9823883a 	mov	r17,r19
    3490:	003fcc06 	br	33c4 <__ram_exceptions_end+0xfbfe3170>
    3494:	d8800204 	addi	r2,sp,8
    3498:	d8800015 	stw	r2,0(sp)
    349c:	d9c00104 	addi	r7,sp,4
    34a0:	900b883a 	mov	r5,r18
    34a4:	980d883a 	mov	r6,r19
    34a8:	e009883a 	mov	r4,fp
    34ac:	8820d53a 	srli	r16,r17,20
    34b0:	00070680 	call	7068 <__d2b>
    34b4:	d8800915 	stw	r2,36(sp)
    34b8:	8001651e 	bne	r16,zero,3a50 <_dtoa_r+0x700>
    34bc:	dd800217 	ldw	r22,8(sp)
    34c0:	dc000117 	ldw	r16,4(sp)
    34c4:	00800804 	movi	r2,32
    34c8:	b421883a 	add	r16,r22,r16
    34cc:	80c10c84 	addi	r3,r16,1074
    34d0:	10c2d10e 	bge	r2,r3,4018 <_dtoa_r+0xcc8>
    34d4:	00801004 	movi	r2,64
    34d8:	81010484 	addi	r4,r16,1042
    34dc:	10c7c83a 	sub	r3,r2,r3
    34e0:	9108d83a 	srl	r4,r18,r4
    34e4:	88e2983a 	sll	r17,r17,r3
    34e8:	2448b03a 	or	r4,r4,r17
    34ec:	000d24c0 	call	d24c <__floatunsidf>
    34f0:	017f8434 	movhi	r5,65040
    34f4:	01800044 	movi	r6,1
    34f8:	1009883a 	mov	r4,r2
    34fc:	194b883a 	add	r5,r3,r5
    3500:	843fffc4 	addi	r16,r16,-1
    3504:	d9801115 	stw	r6,68(sp)
    3508:	000d883a 	mov	r6,zero
    350c:	01cffe34 	movhi	r7,16376
    3510:	000c7f40 	call	c7f4 <__subdf3>
    3514:	0198dbf4 	movhi	r6,25455
    3518:	01cff4f4 	movhi	r7,16339
    351c:	3190d844 	addi	r6,r6,17249
    3520:	39e1e9c4 	addi	r7,r7,-30809
    3524:	1009883a 	mov	r4,r2
    3528:	180b883a 	mov	r5,r3
    352c:	000c0dc0 	call	c0dc <__muldf3>
    3530:	01a2d874 	movhi	r6,35681
    3534:	01cff1f4 	movhi	r7,16327
    3538:	31b22cc4 	addi	r6,r6,-14157
    353c:	39e28a04 	addi	r7,r7,-30168
    3540:	180b883a 	mov	r5,r3
    3544:	1009883a 	mov	r4,r2
    3548:	000acf00 	call	acf0 <__adddf3>
    354c:	8009883a 	mov	r4,r16
    3550:	1029883a 	mov	r20,r2
    3554:	1823883a 	mov	r17,r3
    3558:	000d1700 	call	d170 <__floatsidf>
    355c:	019427f4 	movhi	r6,20639
    3560:	01cff4f4 	movhi	r7,16339
    3564:	319e7ec4 	addi	r6,r6,31227
    3568:	39d104c4 	addi	r7,r7,17427
    356c:	1009883a 	mov	r4,r2
    3570:	180b883a 	mov	r5,r3
    3574:	000c0dc0 	call	c0dc <__muldf3>
    3578:	100d883a 	mov	r6,r2
    357c:	180f883a 	mov	r7,r3
    3580:	a009883a 	mov	r4,r20
    3584:	880b883a 	mov	r5,r17
    3588:	000acf00 	call	acf0 <__adddf3>
    358c:	1009883a 	mov	r4,r2
    3590:	180b883a 	mov	r5,r3
    3594:	1029883a 	mov	r20,r2
    3598:	1823883a 	mov	r17,r3
    359c:	000d0f00 	call	d0f0 <__fixdfsi>
    35a0:	000d883a 	mov	r6,zero
    35a4:	000f883a 	mov	r7,zero
    35a8:	a009883a 	mov	r4,r20
    35ac:	880b883a 	mov	r5,r17
    35b0:	d8800515 	stw	r2,20(sp)
    35b4:	000bfe80 	call	bfe8 <__ledf2>
    35b8:	10028716 	blt	r2,zero,3fd8 <_dtoa_r+0xc88>
    35bc:	d8c00517 	ldw	r3,20(sp)
    35c0:	00800584 	movi	r2,22
    35c4:	10c27536 	bltu	r2,r3,3f9c <_dtoa_r+0xc4c>
    35c8:	180490fa 	slli	r2,r3,3
    35cc:	00c00074 	movhi	r3,1
    35d0:	18c07804 	addi	r3,r3,480
    35d4:	1885883a 	add	r2,r3,r2
    35d8:	11000017 	ldw	r4,0(r2)
    35dc:	11400117 	ldw	r5,4(r2)
    35e0:	900d883a 	mov	r6,r18
    35e4:	980f883a 	mov	r7,r19
    35e8:	000bf0c0 	call	bf0c <__gedf2>
    35ec:	00828d0e 	bge	zero,r2,4024 <_dtoa_r+0xcd4>
    35f0:	d9000517 	ldw	r4,20(sp)
    35f4:	d8000e15 	stw	zero,56(sp)
    35f8:	213fffc4 	addi	r4,r4,-1
    35fc:	d9000515 	stw	r4,20(sp)
    3600:	b42dc83a 	sub	r22,r22,r16
    3604:	b5bfffc4 	addi	r22,r22,-1
    3608:	b0026f16 	blt	r22,zero,3fc8 <_dtoa_r+0xc78>
    360c:	d8000815 	stw	zero,32(sp)
    3610:	d9c00517 	ldw	r7,20(sp)
    3614:	38026416 	blt	r7,zero,3fa8 <_dtoa_r+0xc58>
    3618:	b1ed883a 	add	r22,r22,r7
    361c:	d9c00d15 	stw	r7,52(sp)
    3620:	d8000a15 	stw	zero,40(sp)
    3624:	d9800317 	ldw	r6,12(sp)
    3628:	00800244 	movi	r2,9
    362c:	11811436 	bltu	r2,r6,3a80 <_dtoa_r+0x730>
    3630:	00800144 	movi	r2,5
    3634:	1184e10e 	bge	r2,r6,49bc <_dtoa_r+0x166c>
    3638:	31bfff04 	addi	r6,r6,-4
    363c:	d9800315 	stw	r6,12(sp)
    3640:	0023883a 	mov	r17,zero
    3644:	d9800317 	ldw	r6,12(sp)
    3648:	008000c4 	movi	r2,3
    364c:	30836726 	beq	r6,r2,43ec <_dtoa_r+0x109c>
    3650:	1183410e 	bge	r2,r6,4358 <_dtoa_r+0x1008>
    3654:	d9c00317 	ldw	r7,12(sp)
    3658:	00800104 	movi	r2,4
    365c:	38827c26 	beq	r7,r2,4050 <_dtoa_r+0xd00>
    3660:	00800144 	movi	r2,5
    3664:	3884c41e 	bne	r7,r2,4978 <_dtoa_r+0x1628>
    3668:	00800044 	movi	r2,1
    366c:	d8800b15 	stw	r2,44(sp)
    3670:	d8c00517 	ldw	r3,20(sp)
    3674:	d9002217 	ldw	r4,136(sp)
    3678:	1907883a 	add	r3,r3,r4
    367c:	19800044 	addi	r6,r3,1
    3680:	d8c00c15 	stw	r3,48(sp)
    3684:	d9800615 	stw	r6,24(sp)
    3688:	0183a40e 	bge	zero,r6,451c <_dtoa_r+0x11cc>
    368c:	d9800617 	ldw	r6,24(sp)
    3690:	3021883a 	mov	r16,r6
    3694:	e0001115 	stw	zero,68(fp)
    3698:	008005c4 	movi	r2,23
    369c:	1184c92e 	bgeu	r2,r6,49c4 <_dtoa_r+0x1674>
    36a0:	00c00044 	movi	r3,1
    36a4:	00800104 	movi	r2,4
    36a8:	1085883a 	add	r2,r2,r2
    36ac:	11000504 	addi	r4,r2,20
    36b0:	180b883a 	mov	r5,r3
    36b4:	18c00044 	addi	r3,r3,1
    36b8:	313ffb2e 	bgeu	r6,r4,36a8 <__ram_exceptions_end+0xfbfe3454>
    36bc:	e1401115 	stw	r5,68(fp)
    36c0:	e009883a 	mov	r4,fp
    36c4:	00063d40 	call	63d4 <_Balloc>
    36c8:	d8800715 	stw	r2,28(sp)
    36cc:	e0801015 	stw	r2,64(fp)
    36d0:	00800384 	movi	r2,14
    36d4:	1400f736 	bltu	r2,r16,3ab4 <_dtoa_r+0x764>
    36d8:	8800f626 	beq	r17,zero,3ab4 <_dtoa_r+0x764>
    36dc:	d9c00517 	ldw	r7,20(sp)
    36e0:	01c39a0e 	bge	zero,r7,454c <_dtoa_r+0x11fc>
    36e4:	388003cc 	andi	r2,r7,15
    36e8:	100490fa 	slli	r2,r2,3
    36ec:	382bd13a 	srai	r21,r7,4
    36f0:	00c00074 	movhi	r3,1
    36f4:	18c07804 	addi	r3,r3,480
    36f8:	1885883a 	add	r2,r3,r2
    36fc:	a8c0040c 	andi	r3,r21,16
    3700:	12400017 	ldw	r9,0(r2)
    3704:	12000117 	ldw	r8,4(r2)
    3708:	18037926 	beq	r3,zero,44f0 <_dtoa_r+0x11a0>
    370c:	00800074 	movhi	r2,1
    3710:	10806e04 	addi	r2,r2,440
    3714:	11800817 	ldw	r6,32(r2)
    3718:	11c00917 	ldw	r7,36(r2)
    371c:	9009883a 	mov	r4,r18
    3720:	980b883a 	mov	r5,r19
    3724:	da001715 	stw	r8,92(sp)
    3728:	da401615 	stw	r9,88(sp)
    372c:	000b59c0 	call	b59c <__divdf3>
    3730:	da001717 	ldw	r8,92(sp)
    3734:	da401617 	ldw	r9,88(sp)
    3738:	ad4003cc 	andi	r21,r21,15
    373c:	040000c4 	movi	r16,3
    3740:	1023883a 	mov	r17,r2
    3744:	1829883a 	mov	r20,r3
    3748:	a8001126 	beq	r21,zero,3790 <_dtoa_r+0x440>
    374c:	05c00074 	movhi	r23,1
    3750:	bdc06e04 	addi	r23,r23,440
    3754:	4805883a 	mov	r2,r9
    3758:	4007883a 	mov	r3,r8
    375c:	a980004c 	andi	r6,r21,1
    3760:	1009883a 	mov	r4,r2
    3764:	a82bd07a 	srai	r21,r21,1
    3768:	180b883a 	mov	r5,r3
    376c:	30000426 	beq	r6,zero,3780 <_dtoa_r+0x430>
    3770:	b9800017 	ldw	r6,0(r23)
    3774:	b9c00117 	ldw	r7,4(r23)
    3778:	84000044 	addi	r16,r16,1
    377c:	000c0dc0 	call	c0dc <__muldf3>
    3780:	bdc00204 	addi	r23,r23,8
    3784:	a83ff51e 	bne	r21,zero,375c <__ram_exceptions_end+0xfbfe3508>
    3788:	1013883a 	mov	r9,r2
    378c:	1811883a 	mov	r8,r3
    3790:	480d883a 	mov	r6,r9
    3794:	400f883a 	mov	r7,r8
    3798:	8809883a 	mov	r4,r17
    379c:	a00b883a 	mov	r5,r20
    37a0:	000b59c0 	call	b59c <__divdf3>
    37a4:	d8800f15 	stw	r2,60(sp)
    37a8:	d8c01015 	stw	r3,64(sp)
    37ac:	d8c00e17 	ldw	r3,56(sp)
    37b0:	18000626 	beq	r3,zero,37cc <_dtoa_r+0x47c>
    37b4:	d9000f17 	ldw	r4,60(sp)
    37b8:	d9401017 	ldw	r5,64(sp)
    37bc:	000d883a 	mov	r6,zero
    37c0:	01cffc34 	movhi	r7,16368
    37c4:	000bfe80 	call	bfe8 <__ledf2>
    37c8:	10040b16 	blt	r2,zero,47f8 <_dtoa_r+0x14a8>
    37cc:	8009883a 	mov	r4,r16
    37d0:	000d1700 	call	d170 <__floatsidf>
    37d4:	d9800f17 	ldw	r6,60(sp)
    37d8:	d9c01017 	ldw	r7,64(sp)
    37dc:	1009883a 	mov	r4,r2
    37e0:	180b883a 	mov	r5,r3
    37e4:	000c0dc0 	call	c0dc <__muldf3>
    37e8:	000d883a 	mov	r6,zero
    37ec:	01d00734 	movhi	r7,16412
    37f0:	1009883a 	mov	r4,r2
    37f4:	180b883a 	mov	r5,r3
    37f8:	000acf00 	call	acf0 <__adddf3>
    37fc:	1021883a 	mov	r16,r2
    3800:	d8800617 	ldw	r2,24(sp)
    3804:	047f3034 	movhi	r17,64704
    3808:	1c63883a 	add	r17,r3,r17
    380c:	10031826 	beq	r2,zero,4470 <_dtoa_r+0x1120>
    3810:	d8c00517 	ldw	r3,20(sp)
    3814:	db000617 	ldw	r12,24(sp)
    3818:	d8c01315 	stw	r3,76(sp)
    381c:	d9000b17 	ldw	r4,44(sp)
    3820:	20038f26 	beq	r4,zero,4660 <_dtoa_r+0x1310>
    3824:	60bfffc4 	addi	r2,r12,-1
    3828:	100490fa 	slli	r2,r2,3
    382c:	00c00074 	movhi	r3,1
    3830:	18c07804 	addi	r3,r3,480
    3834:	1885883a 	add	r2,r3,r2
    3838:	11800017 	ldw	r6,0(r2)
    383c:	11c00117 	ldw	r7,4(r2)
    3840:	d8800717 	ldw	r2,28(sp)
    3844:	0009883a 	mov	r4,zero
    3848:	014ff834 	movhi	r5,16352
    384c:	db001615 	stw	r12,88(sp)
    3850:	15c00044 	addi	r23,r2,1
    3854:	000b59c0 	call	b59c <__divdf3>
    3858:	800d883a 	mov	r6,r16
    385c:	880f883a 	mov	r7,r17
    3860:	1009883a 	mov	r4,r2
    3864:	180b883a 	mov	r5,r3
    3868:	000c7f40 	call	c7f4 <__subdf3>
    386c:	d9401017 	ldw	r5,64(sp)
    3870:	d9000f17 	ldw	r4,60(sp)
    3874:	102b883a 	mov	r21,r2
    3878:	d8c01215 	stw	r3,72(sp)
    387c:	000d0f00 	call	d0f0 <__fixdfsi>
    3880:	1009883a 	mov	r4,r2
    3884:	1029883a 	mov	r20,r2
    3888:	000d1700 	call	d170 <__floatsidf>
    388c:	d9000f17 	ldw	r4,60(sp)
    3890:	d9401017 	ldw	r5,64(sp)
    3894:	100d883a 	mov	r6,r2
    3898:	180f883a 	mov	r7,r3
    389c:	000c7f40 	call	c7f4 <__subdf3>
    38a0:	1823883a 	mov	r17,r3
    38a4:	d8c00717 	ldw	r3,28(sp)
    38a8:	d9401217 	ldw	r5,72(sp)
    38ac:	a2000c04 	addi	r8,r20,48
    38b0:	1021883a 	mov	r16,r2
    38b4:	1a000005 	stb	r8,0(r3)
    38b8:	800d883a 	mov	r6,r16
    38bc:	880f883a 	mov	r7,r17
    38c0:	a809883a 	mov	r4,r21
    38c4:	4029883a 	mov	r20,r8
    38c8:	000bf0c0 	call	bf0c <__gedf2>
    38cc:	00841d16 	blt	zero,r2,4944 <_dtoa_r+0x15f4>
    38d0:	800d883a 	mov	r6,r16
    38d4:	880f883a 	mov	r7,r17
    38d8:	0009883a 	mov	r4,zero
    38dc:	014ffc34 	movhi	r5,16368
    38e0:	000c7f40 	call	c7f4 <__subdf3>
    38e4:	d9401217 	ldw	r5,72(sp)
    38e8:	100d883a 	mov	r6,r2
    38ec:	180f883a 	mov	r7,r3
    38f0:	a809883a 	mov	r4,r21
    38f4:	000bf0c0 	call	bf0c <__gedf2>
    38f8:	db001617 	ldw	r12,88(sp)
    38fc:	00840e16 	blt	zero,r2,4938 <_dtoa_r+0x15e8>
    3900:	00800044 	movi	r2,1
    3904:	13006b0e 	bge	r2,r12,3ab4 <_dtoa_r+0x764>
    3908:	d9000717 	ldw	r4,28(sp)
    390c:	dd800f15 	stw	r22,60(sp)
    3910:	dcc01015 	stw	r19,64(sp)
    3914:	2319883a 	add	r12,r4,r12
    3918:	dcc01217 	ldw	r19,72(sp)
    391c:	602d883a 	mov	r22,r12
    3920:	dc801215 	stw	r18,72(sp)
    3924:	b825883a 	mov	r18,r23
    3928:	00000906 	br	3950 <_dtoa_r+0x600>
    392c:	000c7f40 	call	c7f4 <__subdf3>
    3930:	a80d883a 	mov	r6,r21
    3934:	980f883a 	mov	r7,r19
    3938:	1009883a 	mov	r4,r2
    393c:	180b883a 	mov	r5,r3
    3940:	000bfe80 	call	bfe8 <__ledf2>
    3944:	1003e816 	blt	r2,zero,48e8 <_dtoa_r+0x1598>
    3948:	b825883a 	mov	r18,r23
    394c:	bd83e926 	beq	r23,r22,48f4 <_dtoa_r+0x15a4>
    3950:	a809883a 	mov	r4,r21
    3954:	980b883a 	mov	r5,r19
    3958:	000d883a 	mov	r6,zero
    395c:	01d00934 	movhi	r7,16420
    3960:	000c0dc0 	call	c0dc <__muldf3>
    3964:	000d883a 	mov	r6,zero
    3968:	01d00934 	movhi	r7,16420
    396c:	8009883a 	mov	r4,r16
    3970:	880b883a 	mov	r5,r17
    3974:	102b883a 	mov	r21,r2
    3978:	1827883a 	mov	r19,r3
    397c:	000c0dc0 	call	c0dc <__muldf3>
    3980:	180b883a 	mov	r5,r3
    3984:	1009883a 	mov	r4,r2
    3988:	1821883a 	mov	r16,r3
    398c:	1023883a 	mov	r17,r2
    3990:	000d0f00 	call	d0f0 <__fixdfsi>
    3994:	1009883a 	mov	r4,r2
    3998:	1029883a 	mov	r20,r2
    399c:	000d1700 	call	d170 <__floatsidf>
    39a0:	8809883a 	mov	r4,r17
    39a4:	800b883a 	mov	r5,r16
    39a8:	100d883a 	mov	r6,r2
    39ac:	180f883a 	mov	r7,r3
    39b0:	000c7f40 	call	c7f4 <__subdf3>
    39b4:	a5000c04 	addi	r20,r20,48
    39b8:	a80d883a 	mov	r6,r21
    39bc:	980f883a 	mov	r7,r19
    39c0:	1009883a 	mov	r4,r2
    39c4:	180b883a 	mov	r5,r3
    39c8:	95000005 	stb	r20,0(r18)
    39cc:	1021883a 	mov	r16,r2
    39d0:	1823883a 	mov	r17,r3
    39d4:	000bfe80 	call	bfe8 <__ledf2>
    39d8:	bdc00044 	addi	r23,r23,1
    39dc:	800d883a 	mov	r6,r16
    39e0:	880f883a 	mov	r7,r17
    39e4:	0009883a 	mov	r4,zero
    39e8:	014ffc34 	movhi	r5,16368
    39ec:	103fcf0e 	bge	r2,zero,392c <__ram_exceptions_end+0xfbfe36d8>
    39f0:	d8c01317 	ldw	r3,76(sp)
    39f4:	d8c00515 	stw	r3,20(sp)
    39f8:	d9400917 	ldw	r5,36(sp)
    39fc:	e009883a 	mov	r4,fp
    3a00:	000647c0 	call	647c <_Bfree>
    3a04:	d9000517 	ldw	r4,20(sp)
    3a08:	d9802317 	ldw	r6,140(sp)
    3a0c:	d9c02517 	ldw	r7,148(sp)
    3a10:	b8000005 	stb	zero,0(r23)
    3a14:	20800044 	addi	r2,r4,1
    3a18:	30800015 	stw	r2,0(r6)
    3a1c:	3802aa26 	beq	r7,zero,44c8 <_dtoa_r+0x1178>
    3a20:	3dc00015 	stw	r23,0(r7)
    3a24:	d8800717 	ldw	r2,28(sp)
    3a28:	003e7906 	br	3410 <__ram_exceptions_end+0xfbfe31bc>
    3a2c:	00800434 	movhi	r2,16
    3a30:	10bfffc4 	addi	r2,r2,-1
    3a34:	88a2703a 	and	r17,r17,r2
    3a38:	883e851e 	bne	r17,zero,3450 <__ram_exceptions_end+0xfbfe31fc>
    3a3c:	00800074 	movhi	r2,1
    3a40:	10805904 	addi	r2,r2,356
    3a44:	003e8406 	br	3458 <__ram_exceptions_end+0xfbfe3204>
    3a48:	10c00204 	addi	r3,r2,8
    3a4c:	003e8706 	br	346c <__ram_exceptions_end+0xfbfe3218>
    3a50:	01400434 	movhi	r5,16
    3a54:	297fffc4 	addi	r5,r5,-1
    3a58:	994a703a 	and	r5,r19,r5
    3a5c:	9009883a 	mov	r4,r18
    3a60:	843f0044 	addi	r16,r16,-1023
    3a64:	294ffc34 	orhi	r5,r5,16368
    3a68:	dd800217 	ldw	r22,8(sp)
    3a6c:	d8001115 	stw	zero,68(sp)
    3a70:	003ea506 	br	3508 <__ram_exceptions_end+0xfbfe32b4>
    3a74:	00800074 	movhi	r2,1
    3a78:	10805004 	addi	r2,r2,320
    3a7c:	003e6406 	br	3410 <__ram_exceptions_end+0xfbfe31bc>
    3a80:	e0001115 	stw	zero,68(fp)
    3a84:	000b883a 	mov	r5,zero
    3a88:	e009883a 	mov	r4,fp
    3a8c:	00063d40 	call	63d4 <_Balloc>
    3a90:	01bfffc4 	movi	r6,-1
    3a94:	01c00044 	movi	r7,1
    3a98:	d8800715 	stw	r2,28(sp)
    3a9c:	d9800c15 	stw	r6,48(sp)
    3aa0:	e0801015 	stw	r2,64(fp)
    3aa4:	d8000315 	stw	zero,12(sp)
    3aa8:	d9c00b15 	stw	r7,44(sp)
    3aac:	d9800615 	stw	r6,24(sp)
    3ab0:	d8002215 	stw	zero,136(sp)
    3ab4:	d8800117 	ldw	r2,4(sp)
    3ab8:	10008916 	blt	r2,zero,3ce0 <_dtoa_r+0x990>
    3abc:	d9000517 	ldw	r4,20(sp)
    3ac0:	00c00384 	movi	r3,14
    3ac4:	19008616 	blt	r3,r4,3ce0 <_dtoa_r+0x990>
    3ac8:	200490fa 	slli	r2,r4,3
    3acc:	00c00074 	movhi	r3,1
    3ad0:	d9802217 	ldw	r6,136(sp)
    3ad4:	18c07804 	addi	r3,r3,480
    3ad8:	1885883a 	add	r2,r3,r2
    3adc:	14000017 	ldw	r16,0(r2)
    3ae0:	14400117 	ldw	r17,4(r2)
    3ae4:	30016316 	blt	r6,zero,4074 <_dtoa_r+0xd24>
    3ae8:	800d883a 	mov	r6,r16
    3aec:	880f883a 	mov	r7,r17
    3af0:	9009883a 	mov	r4,r18
    3af4:	980b883a 	mov	r5,r19
    3af8:	000b59c0 	call	b59c <__divdf3>
    3afc:	180b883a 	mov	r5,r3
    3b00:	1009883a 	mov	r4,r2
    3b04:	000d0f00 	call	d0f0 <__fixdfsi>
    3b08:	1009883a 	mov	r4,r2
    3b0c:	102b883a 	mov	r21,r2
    3b10:	000d1700 	call	d170 <__floatsidf>
    3b14:	800d883a 	mov	r6,r16
    3b18:	880f883a 	mov	r7,r17
    3b1c:	1009883a 	mov	r4,r2
    3b20:	180b883a 	mov	r5,r3
    3b24:	000c0dc0 	call	c0dc <__muldf3>
    3b28:	100d883a 	mov	r6,r2
    3b2c:	180f883a 	mov	r7,r3
    3b30:	9009883a 	mov	r4,r18
    3b34:	980b883a 	mov	r5,r19
    3b38:	000c7f40 	call	c7f4 <__subdf3>
    3b3c:	d9c00717 	ldw	r7,28(sp)
    3b40:	1009883a 	mov	r4,r2
    3b44:	a8800c04 	addi	r2,r21,48
    3b48:	38800005 	stb	r2,0(r7)
    3b4c:	3dc00044 	addi	r23,r7,1
    3b50:	d9c00617 	ldw	r7,24(sp)
    3b54:	01800044 	movi	r6,1
    3b58:	180b883a 	mov	r5,r3
    3b5c:	2005883a 	mov	r2,r4
    3b60:	39803826 	beq	r7,r6,3c44 <_dtoa_r+0x8f4>
    3b64:	000d883a 	mov	r6,zero
    3b68:	01d00934 	movhi	r7,16420
    3b6c:	000c0dc0 	call	c0dc <__muldf3>
    3b70:	000d883a 	mov	r6,zero
    3b74:	000f883a 	mov	r7,zero
    3b78:	1009883a 	mov	r4,r2
    3b7c:	180b883a 	mov	r5,r3
    3b80:	1025883a 	mov	r18,r2
    3b84:	1827883a 	mov	r19,r3
    3b88:	000be840 	call	be84 <__eqdf2>
    3b8c:	103f9a26 	beq	r2,zero,39f8 <__ram_exceptions_end+0xfbfe37a4>
    3b90:	d9c00617 	ldw	r7,24(sp)
    3b94:	d8c00717 	ldw	r3,28(sp)
    3b98:	b829883a 	mov	r20,r23
    3b9c:	38bfffc4 	addi	r2,r7,-1
    3ba0:	18ad883a 	add	r22,r3,r2
    3ba4:	00000a06 	br	3bd0 <_dtoa_r+0x880>
    3ba8:	000c0dc0 	call	c0dc <__muldf3>
    3bac:	000d883a 	mov	r6,zero
    3bb0:	000f883a 	mov	r7,zero
    3bb4:	1009883a 	mov	r4,r2
    3bb8:	180b883a 	mov	r5,r3
    3bbc:	1025883a 	mov	r18,r2
    3bc0:	1827883a 	mov	r19,r3
    3bc4:	b829883a 	mov	r20,r23
    3bc8:	000be840 	call	be84 <__eqdf2>
    3bcc:	103f8a26 	beq	r2,zero,39f8 <__ram_exceptions_end+0xfbfe37a4>
    3bd0:	800d883a 	mov	r6,r16
    3bd4:	880f883a 	mov	r7,r17
    3bd8:	9009883a 	mov	r4,r18
    3bdc:	980b883a 	mov	r5,r19
    3be0:	000b59c0 	call	b59c <__divdf3>
    3be4:	180b883a 	mov	r5,r3
    3be8:	1009883a 	mov	r4,r2
    3bec:	000d0f00 	call	d0f0 <__fixdfsi>
    3bf0:	1009883a 	mov	r4,r2
    3bf4:	102b883a 	mov	r21,r2
    3bf8:	000d1700 	call	d170 <__floatsidf>
    3bfc:	800d883a 	mov	r6,r16
    3c00:	880f883a 	mov	r7,r17
    3c04:	1009883a 	mov	r4,r2
    3c08:	180b883a 	mov	r5,r3
    3c0c:	000c0dc0 	call	c0dc <__muldf3>
    3c10:	100d883a 	mov	r6,r2
    3c14:	180f883a 	mov	r7,r3
    3c18:	9009883a 	mov	r4,r18
    3c1c:	980b883a 	mov	r5,r19
    3c20:	000c7f40 	call	c7f4 <__subdf3>
    3c24:	aa000c04 	addi	r8,r21,48
    3c28:	a2000005 	stb	r8,0(r20)
    3c2c:	000d883a 	mov	r6,zero
    3c30:	01d00934 	movhi	r7,16420
    3c34:	1009883a 	mov	r4,r2
    3c38:	180b883a 	mov	r5,r3
    3c3c:	a5c00044 	addi	r23,r20,1
    3c40:	b53fd91e 	bne	r22,r20,3ba8 <__ram_exceptions_end+0xfbfe3954>
    3c44:	100d883a 	mov	r6,r2
    3c48:	180f883a 	mov	r7,r3
    3c4c:	1009883a 	mov	r4,r2
    3c50:	180b883a 	mov	r5,r3
    3c54:	000acf00 	call	acf0 <__adddf3>
    3c58:	100d883a 	mov	r6,r2
    3c5c:	180f883a 	mov	r7,r3
    3c60:	8009883a 	mov	r4,r16
    3c64:	880b883a 	mov	r5,r17
    3c68:	1027883a 	mov	r19,r2
    3c6c:	1825883a 	mov	r18,r3
    3c70:	000bfe80 	call	bfe8 <__ledf2>
    3c74:	10000816 	blt	r2,zero,3c98 <_dtoa_r+0x948>
    3c78:	980d883a 	mov	r6,r19
    3c7c:	900f883a 	mov	r7,r18
    3c80:	8009883a 	mov	r4,r16
    3c84:	880b883a 	mov	r5,r17
    3c88:	000be840 	call	be84 <__eqdf2>
    3c8c:	103f5a1e 	bne	r2,zero,39f8 <__ram_exceptions_end+0xfbfe37a4>
    3c90:	ad40004c 	andi	r21,r21,1
    3c94:	a83f5826 	beq	r21,zero,39f8 <__ram_exceptions_end+0xfbfe37a4>
    3c98:	bd3fffc3 	ldbu	r20,-1(r23)
    3c9c:	b8bfffc4 	addi	r2,r23,-1
    3ca0:	1007883a 	mov	r3,r2
    3ca4:	01400e44 	movi	r5,57
    3ca8:	d9800717 	ldw	r6,28(sp)
    3cac:	00000506 	br	3cc4 <_dtoa_r+0x974>
    3cb0:	18ffffc4 	addi	r3,r3,-1
    3cb4:	11824726 	beq	r2,r6,45d4 <_dtoa_r+0x1284>
    3cb8:	1d000003 	ldbu	r20,0(r3)
    3cbc:	102f883a 	mov	r23,r2
    3cc0:	10bfffc4 	addi	r2,r2,-1
    3cc4:	a1003fcc 	andi	r4,r20,255
    3cc8:	2100201c 	xori	r4,r4,128
    3ccc:	213fe004 	addi	r4,r4,-128
    3cd0:	217ff726 	beq	r4,r5,3cb0 <__ram_exceptions_end+0xfbfe3a5c>
    3cd4:	a2000044 	addi	r8,r20,1
    3cd8:	12000005 	stb	r8,0(r2)
    3cdc:	003f4606 	br	39f8 <__ram_exceptions_end+0xfbfe37a4>
    3ce0:	d9000b17 	ldw	r4,44(sp)
    3ce4:	2000c826 	beq	r4,zero,4008 <_dtoa_r+0xcb8>
    3ce8:	d9800317 	ldw	r6,12(sp)
    3cec:	00c00044 	movi	r3,1
    3cf0:	1980f90e 	bge	r3,r6,40d8 <_dtoa_r+0xd88>
    3cf4:	d8800617 	ldw	r2,24(sp)
    3cf8:	d8c00a17 	ldw	r3,40(sp)
    3cfc:	157fffc4 	addi	r21,r2,-1
    3d00:	1d41f316 	blt	r3,r21,44d0 <_dtoa_r+0x1180>
    3d04:	1d6bc83a 	sub	r21,r3,r21
    3d08:	d9c00617 	ldw	r7,24(sp)
    3d0c:	3802aa16 	blt	r7,zero,47b8 <_dtoa_r+0x1468>
    3d10:	dd000817 	ldw	r20,32(sp)
    3d14:	d8800617 	ldw	r2,24(sp)
    3d18:	d8c00817 	ldw	r3,32(sp)
    3d1c:	01400044 	movi	r5,1
    3d20:	e009883a 	mov	r4,fp
    3d24:	1887883a 	add	r3,r3,r2
    3d28:	d8c00815 	stw	r3,32(sp)
    3d2c:	b0ad883a 	add	r22,r22,r2
    3d30:	00067e00 	call	67e0 <__i2b>
    3d34:	1023883a 	mov	r17,r2
    3d38:	a0000826 	beq	r20,zero,3d5c <_dtoa_r+0xa0c>
    3d3c:	0580070e 	bge	zero,r22,3d5c <_dtoa_r+0xa0c>
    3d40:	a005883a 	mov	r2,r20
    3d44:	b500b916 	blt	r22,r20,402c <_dtoa_r+0xcdc>
    3d48:	d9000817 	ldw	r4,32(sp)
    3d4c:	a0a9c83a 	sub	r20,r20,r2
    3d50:	b0adc83a 	sub	r22,r22,r2
    3d54:	2089c83a 	sub	r4,r4,r2
    3d58:	d9000815 	stw	r4,32(sp)
    3d5c:	d9800a17 	ldw	r6,40(sp)
    3d60:	0181810e 	bge	zero,r6,4368 <_dtoa_r+0x1018>
    3d64:	d9c00b17 	ldw	r7,44(sp)
    3d68:	3800b326 	beq	r7,zero,4038 <_dtoa_r+0xce8>
    3d6c:	a800b226 	beq	r21,zero,4038 <_dtoa_r+0xce8>
    3d70:	880b883a 	mov	r5,r17
    3d74:	a80d883a 	mov	r6,r21
    3d78:	e009883a 	mov	r4,fp
    3d7c:	0006a140 	call	6a14 <__pow5mult>
    3d80:	d9800917 	ldw	r6,36(sp)
    3d84:	100b883a 	mov	r5,r2
    3d88:	e009883a 	mov	r4,fp
    3d8c:	1023883a 	mov	r17,r2
    3d90:	000681c0 	call	681c <__multiply>
    3d94:	1021883a 	mov	r16,r2
    3d98:	d8800a17 	ldw	r2,40(sp)
    3d9c:	d9400917 	ldw	r5,36(sp)
    3da0:	e009883a 	mov	r4,fp
    3da4:	1545c83a 	sub	r2,r2,r21
    3da8:	d8800a15 	stw	r2,40(sp)
    3dac:	000647c0 	call	647c <_Bfree>
    3db0:	d8c00a17 	ldw	r3,40(sp)
    3db4:	18009f1e 	bne	r3,zero,4034 <_dtoa_r+0xce4>
    3db8:	05c00044 	movi	r23,1
    3dbc:	e009883a 	mov	r4,fp
    3dc0:	b80b883a 	mov	r5,r23
    3dc4:	00067e00 	call	67e0 <__i2b>
    3dc8:	d9000d17 	ldw	r4,52(sp)
    3dcc:	102b883a 	mov	r21,r2
    3dd0:	2000ce26 	beq	r4,zero,410c <_dtoa_r+0xdbc>
    3dd4:	200d883a 	mov	r6,r4
    3dd8:	100b883a 	mov	r5,r2
    3ddc:	e009883a 	mov	r4,fp
    3de0:	0006a140 	call	6a14 <__pow5mult>
    3de4:	d9800317 	ldw	r6,12(sp)
    3de8:	102b883a 	mov	r21,r2
    3dec:	b981810e 	bge	r23,r6,43f4 <_dtoa_r+0x10a4>
    3df0:	0027883a 	mov	r19,zero
    3df4:	a8800417 	ldw	r2,16(r21)
    3df8:	05c00804 	movi	r23,32
    3dfc:	10800104 	addi	r2,r2,4
    3e00:	1085883a 	add	r2,r2,r2
    3e04:	1085883a 	add	r2,r2,r2
    3e08:	a885883a 	add	r2,r21,r2
    3e0c:	11000017 	ldw	r4,0(r2)
    3e10:	00066c80 	call	66c8 <__hi0bits>
    3e14:	b885c83a 	sub	r2,r23,r2
    3e18:	1585883a 	add	r2,r2,r22
    3e1c:	108007cc 	andi	r2,r2,31
    3e20:	1000b326 	beq	r2,zero,40f0 <_dtoa_r+0xda0>
    3e24:	00c00804 	movi	r3,32
    3e28:	1887c83a 	sub	r3,r3,r2
    3e2c:	01000104 	movi	r4,4
    3e30:	20c2cd0e 	bge	r4,r3,4968 <_dtoa_r+0x1618>
    3e34:	00c00704 	movi	r3,28
    3e38:	1885c83a 	sub	r2,r3,r2
    3e3c:	d8c00817 	ldw	r3,32(sp)
    3e40:	a0a9883a 	add	r20,r20,r2
    3e44:	b0ad883a 	add	r22,r22,r2
    3e48:	1887883a 	add	r3,r3,r2
    3e4c:	d8c00815 	stw	r3,32(sp)
    3e50:	d9800817 	ldw	r6,32(sp)
    3e54:	0180040e 	bge	zero,r6,3e68 <_dtoa_r+0xb18>
    3e58:	800b883a 	mov	r5,r16
    3e5c:	e009883a 	mov	r4,fp
    3e60:	0006b540 	call	6b54 <__lshift>
    3e64:	1021883a 	mov	r16,r2
    3e68:	0580050e 	bge	zero,r22,3e80 <_dtoa_r+0xb30>
    3e6c:	a80b883a 	mov	r5,r21
    3e70:	b00d883a 	mov	r6,r22
    3e74:	e009883a 	mov	r4,fp
    3e78:	0006b540 	call	6b54 <__lshift>
    3e7c:	102b883a 	mov	r21,r2
    3e80:	d9c00e17 	ldw	r7,56(sp)
    3e84:	3801211e 	bne	r7,zero,430c <_dtoa_r+0xfbc>
    3e88:	d9800617 	ldw	r6,24(sp)
    3e8c:	0181380e 	bge	zero,r6,4370 <_dtoa_r+0x1020>
    3e90:	d8c00b17 	ldw	r3,44(sp)
    3e94:	1800ab1e 	bne	r3,zero,4144 <_dtoa_r+0xdf4>
    3e98:	dc800717 	ldw	r18,28(sp)
    3e9c:	dcc00617 	ldw	r19,24(sp)
    3ea0:	9029883a 	mov	r20,r18
    3ea4:	00000206 	br	3eb0 <_dtoa_r+0xb60>
    3ea8:	00064a40 	call	64a4 <__multadd>
    3eac:	1021883a 	mov	r16,r2
    3eb0:	a80b883a 	mov	r5,r21
    3eb4:	8009883a 	mov	r4,r16
    3eb8:	00031500 	call	3150 <quorem>
    3ebc:	10800c04 	addi	r2,r2,48
    3ec0:	90800005 	stb	r2,0(r18)
    3ec4:	94800044 	addi	r18,r18,1
    3ec8:	9507c83a 	sub	r3,r18,r20
    3ecc:	000f883a 	mov	r7,zero
    3ed0:	01800284 	movi	r6,10
    3ed4:	800b883a 	mov	r5,r16
    3ed8:	e009883a 	mov	r4,fp
    3edc:	1cfff216 	blt	r3,r19,3ea8 <__ram_exceptions_end+0xfbfe3c54>
    3ee0:	1011883a 	mov	r8,r2
    3ee4:	d8800617 	ldw	r2,24(sp)
    3ee8:	0082370e 	bge	zero,r2,47c8 <_dtoa_r+0x1478>
    3eec:	d9000717 	ldw	r4,28(sp)
    3ef0:	0025883a 	mov	r18,zero
    3ef4:	20af883a 	add	r23,r4,r2
    3ef8:	01800044 	movi	r6,1
    3efc:	800b883a 	mov	r5,r16
    3f00:	e009883a 	mov	r4,fp
    3f04:	da001715 	stw	r8,92(sp)
    3f08:	0006b540 	call	6b54 <__lshift>
    3f0c:	a80b883a 	mov	r5,r21
    3f10:	1009883a 	mov	r4,r2
    3f14:	d8800915 	stw	r2,36(sp)
    3f18:	0006c9c0 	call	6c9c <__mcmp>
    3f1c:	da001717 	ldw	r8,92(sp)
    3f20:	0081800e 	bge	zero,r2,4524 <_dtoa_r+0x11d4>
    3f24:	b93fffc3 	ldbu	r4,-1(r23)
    3f28:	b8bfffc4 	addi	r2,r23,-1
    3f2c:	1007883a 	mov	r3,r2
    3f30:	01800e44 	movi	r6,57
    3f34:	d9c00717 	ldw	r7,28(sp)
    3f38:	00000506 	br	3f50 <_dtoa_r+0xc00>
    3f3c:	18ffffc4 	addi	r3,r3,-1
    3f40:	11c12326 	beq	r2,r7,43d0 <_dtoa_r+0x1080>
    3f44:	19000003 	ldbu	r4,0(r3)
    3f48:	102f883a 	mov	r23,r2
    3f4c:	10bfffc4 	addi	r2,r2,-1
    3f50:	21403fcc 	andi	r5,r4,255
    3f54:	2940201c 	xori	r5,r5,128
    3f58:	297fe004 	addi	r5,r5,-128
    3f5c:	29bff726 	beq	r5,r6,3f3c <__ram_exceptions_end+0xfbfe3ce8>
    3f60:	21000044 	addi	r4,r4,1
    3f64:	11000005 	stb	r4,0(r2)
    3f68:	a80b883a 	mov	r5,r21
    3f6c:	e009883a 	mov	r4,fp
    3f70:	000647c0 	call	647c <_Bfree>
    3f74:	883ea026 	beq	r17,zero,39f8 <__ram_exceptions_end+0xfbfe37a4>
    3f78:	90000426 	beq	r18,zero,3f8c <_dtoa_r+0xc3c>
    3f7c:	94400326 	beq	r18,r17,3f8c <_dtoa_r+0xc3c>
    3f80:	900b883a 	mov	r5,r18
    3f84:	e009883a 	mov	r4,fp
    3f88:	000647c0 	call	647c <_Bfree>
    3f8c:	880b883a 	mov	r5,r17
    3f90:	e009883a 	mov	r4,fp
    3f94:	000647c0 	call	647c <_Bfree>
    3f98:	003e9706 	br	39f8 <__ram_exceptions_end+0xfbfe37a4>
    3f9c:	01800044 	movi	r6,1
    3fa0:	d9800e15 	stw	r6,56(sp)
    3fa4:	003d9606 	br	3600 <__ram_exceptions_end+0xfbfe33ac>
    3fa8:	d8800817 	ldw	r2,32(sp)
    3fac:	d8c00517 	ldw	r3,20(sp)
    3fb0:	d8000d15 	stw	zero,52(sp)
    3fb4:	10c5c83a 	sub	r2,r2,r3
    3fb8:	00c9c83a 	sub	r4,zero,r3
    3fbc:	d8800815 	stw	r2,32(sp)
    3fc0:	d9000a15 	stw	r4,40(sp)
    3fc4:	003d9706 	br	3624 <__ram_exceptions_end+0xfbfe33d0>
    3fc8:	05adc83a 	sub	r22,zero,r22
    3fcc:	dd800815 	stw	r22,32(sp)
    3fd0:	002d883a 	mov	r22,zero
    3fd4:	003d8e06 	br	3610 <__ram_exceptions_end+0xfbfe33bc>
    3fd8:	d9000517 	ldw	r4,20(sp)
    3fdc:	000d1700 	call	d170 <__floatsidf>
    3fe0:	100d883a 	mov	r6,r2
    3fe4:	180f883a 	mov	r7,r3
    3fe8:	a009883a 	mov	r4,r20
    3fec:	880b883a 	mov	r5,r17
    3ff0:	000be840 	call	be84 <__eqdf2>
    3ff4:	103d7126 	beq	r2,zero,35bc <__ram_exceptions_end+0xfbfe3368>
    3ff8:	d9c00517 	ldw	r7,20(sp)
    3ffc:	39ffffc4 	addi	r7,r7,-1
    4000:	d9c00515 	stw	r7,20(sp)
    4004:	003d6d06 	br	35bc <__ram_exceptions_end+0xfbfe3368>
    4008:	dd400a17 	ldw	r21,40(sp)
    400c:	dd000817 	ldw	r20,32(sp)
    4010:	0023883a 	mov	r17,zero
    4014:	003f4806 	br	3d38 <__ram_exceptions_end+0xfbfe3ae4>
    4018:	10e3c83a 	sub	r17,r2,r3
    401c:	9448983a 	sll	r4,r18,r17
    4020:	003d3206 	br	34ec <__ram_exceptions_end+0xfbfe3298>
    4024:	d8000e15 	stw	zero,56(sp)
    4028:	003d7506 	br	3600 <__ram_exceptions_end+0xfbfe33ac>
    402c:	b005883a 	mov	r2,r22
    4030:	003f4506 	br	3d48 <__ram_exceptions_end+0xfbfe3af4>
    4034:	dc000915 	stw	r16,36(sp)
    4038:	d9800a17 	ldw	r6,40(sp)
    403c:	d9400917 	ldw	r5,36(sp)
    4040:	e009883a 	mov	r4,fp
    4044:	0006a140 	call	6a14 <__pow5mult>
    4048:	1021883a 	mov	r16,r2
    404c:	003f5a06 	br	3db8 <__ram_exceptions_end+0xfbfe3b64>
    4050:	01c00044 	movi	r7,1
    4054:	d9c00b15 	stw	r7,44(sp)
    4058:	d8802217 	ldw	r2,136(sp)
    405c:	0081280e 	bge	zero,r2,4500 <_dtoa_r+0x11b0>
    4060:	100d883a 	mov	r6,r2
    4064:	1021883a 	mov	r16,r2
    4068:	d8800c15 	stw	r2,48(sp)
    406c:	d8800615 	stw	r2,24(sp)
    4070:	003d8806 	br	3694 <__ram_exceptions_end+0xfbfe3440>
    4074:	d8800617 	ldw	r2,24(sp)
    4078:	00be9b16 	blt	zero,r2,3ae8 <__ram_exceptions_end+0xfbfe3894>
    407c:	10010f1e 	bne	r2,zero,44bc <_dtoa_r+0x116c>
    4080:	880b883a 	mov	r5,r17
    4084:	000d883a 	mov	r6,zero
    4088:	01d00534 	movhi	r7,16404
    408c:	8009883a 	mov	r4,r16
    4090:	000c0dc0 	call	c0dc <__muldf3>
    4094:	900d883a 	mov	r6,r18
    4098:	980f883a 	mov	r7,r19
    409c:	1009883a 	mov	r4,r2
    40a0:	180b883a 	mov	r5,r3
    40a4:	000bf0c0 	call	bf0c <__gedf2>
    40a8:	002b883a 	mov	r21,zero
    40ac:	0023883a 	mov	r17,zero
    40b0:	1000bf16 	blt	r2,zero,43b0 <_dtoa_r+0x1060>
    40b4:	d9802217 	ldw	r6,136(sp)
    40b8:	ddc00717 	ldw	r23,28(sp)
    40bc:	018c303a 	nor	r6,zero,r6
    40c0:	d9800515 	stw	r6,20(sp)
    40c4:	a80b883a 	mov	r5,r21
    40c8:	e009883a 	mov	r4,fp
    40cc:	000647c0 	call	647c <_Bfree>
    40d0:	883e4926 	beq	r17,zero,39f8 <__ram_exceptions_end+0xfbfe37a4>
    40d4:	003fad06 	br	3f8c <__ram_exceptions_end+0xfbfe3d38>
    40d8:	d9c01117 	ldw	r7,68(sp)
    40dc:	3801bc26 	beq	r7,zero,47d0 <_dtoa_r+0x1480>
    40e0:	10810cc4 	addi	r2,r2,1075
    40e4:	dd400a17 	ldw	r21,40(sp)
    40e8:	dd000817 	ldw	r20,32(sp)
    40ec:	003f0a06 	br	3d18 <__ram_exceptions_end+0xfbfe3ac4>
    40f0:	00800704 	movi	r2,28
    40f4:	d9000817 	ldw	r4,32(sp)
    40f8:	a0a9883a 	add	r20,r20,r2
    40fc:	b0ad883a 	add	r22,r22,r2
    4100:	2089883a 	add	r4,r4,r2
    4104:	d9000815 	stw	r4,32(sp)
    4108:	003f5106 	br	3e50 <__ram_exceptions_end+0xfbfe3bfc>
    410c:	d8c00317 	ldw	r3,12(sp)
    4110:	b8c1fc0e 	bge	r23,r3,4904 <_dtoa_r+0x15b4>
    4114:	0027883a 	mov	r19,zero
    4118:	b805883a 	mov	r2,r23
    411c:	003f3e06 	br	3e18 <__ram_exceptions_end+0xfbfe3bc4>
    4120:	880b883a 	mov	r5,r17
    4124:	e009883a 	mov	r4,fp
    4128:	000f883a 	mov	r7,zero
    412c:	01800284 	movi	r6,10
    4130:	00064a40 	call	64a4 <__multadd>
    4134:	d9000c17 	ldw	r4,48(sp)
    4138:	1023883a 	mov	r17,r2
    413c:	0102040e 	bge	zero,r4,4950 <_dtoa_r+0x1600>
    4140:	d9000615 	stw	r4,24(sp)
    4144:	0500050e 	bge	zero,r20,415c <_dtoa_r+0xe0c>
    4148:	880b883a 	mov	r5,r17
    414c:	a00d883a 	mov	r6,r20
    4150:	e009883a 	mov	r4,fp
    4154:	0006b540 	call	6b54 <__lshift>
    4158:	1023883a 	mov	r17,r2
    415c:	9801241e 	bne	r19,zero,45f0 <_dtoa_r+0x12a0>
    4160:	8829883a 	mov	r20,r17
    4164:	d9000617 	ldw	r4,24(sp)
    4168:	dcc00717 	ldw	r19,28(sp)
    416c:	9480004c 	andi	r18,r18,1
    4170:	20bfffc4 	addi	r2,r4,-1
    4174:	9885883a 	add	r2,r19,r2
    4178:	d8800415 	stw	r2,16(sp)
    417c:	dc800615 	stw	r18,24(sp)
    4180:	a80b883a 	mov	r5,r21
    4184:	8009883a 	mov	r4,r16
    4188:	00031500 	call	3150 <quorem>
    418c:	880b883a 	mov	r5,r17
    4190:	8009883a 	mov	r4,r16
    4194:	102f883a 	mov	r23,r2
    4198:	0006c9c0 	call	6c9c <__mcmp>
    419c:	a80b883a 	mov	r5,r21
    41a0:	a00d883a 	mov	r6,r20
    41a4:	e009883a 	mov	r4,fp
    41a8:	102d883a 	mov	r22,r2
    41ac:	0006cfc0 	call	6cfc <__mdiff>
    41b0:	1007883a 	mov	r3,r2
    41b4:	10800317 	ldw	r2,12(r2)
    41b8:	bc800c04 	addi	r18,r23,48
    41bc:	180b883a 	mov	r5,r3
    41c0:	10004e1e 	bne	r2,zero,42fc <_dtoa_r+0xfac>
    41c4:	8009883a 	mov	r4,r16
    41c8:	d8c01615 	stw	r3,88(sp)
    41cc:	0006c9c0 	call	6c9c <__mcmp>
    41d0:	d8c01617 	ldw	r3,88(sp)
    41d4:	e009883a 	mov	r4,fp
    41d8:	d8801615 	stw	r2,88(sp)
    41dc:	180b883a 	mov	r5,r3
    41e0:	000647c0 	call	647c <_Bfree>
    41e4:	d8801617 	ldw	r2,88(sp)
    41e8:	1000041e 	bne	r2,zero,41fc <_dtoa_r+0xeac>
    41ec:	d9800317 	ldw	r6,12(sp)
    41f0:	3000021e 	bne	r6,zero,41fc <_dtoa_r+0xeac>
    41f4:	d8c00617 	ldw	r3,24(sp)
    41f8:	18003726 	beq	r3,zero,42d8 <_dtoa_r+0xf88>
    41fc:	b0002016 	blt	r22,zero,4280 <_dtoa_r+0xf30>
    4200:	b000041e 	bne	r22,zero,4214 <_dtoa_r+0xec4>
    4204:	d9000317 	ldw	r4,12(sp)
    4208:	2000021e 	bne	r4,zero,4214 <_dtoa_r+0xec4>
    420c:	d8c00617 	ldw	r3,24(sp)
    4210:	18001b26 	beq	r3,zero,4280 <_dtoa_r+0xf30>
    4214:	00810716 	blt	zero,r2,4634 <_dtoa_r+0x12e4>
    4218:	d8c00417 	ldw	r3,16(sp)
    421c:	9d800044 	addi	r22,r19,1
    4220:	9c800005 	stb	r18,0(r19)
    4224:	b02f883a 	mov	r23,r22
    4228:	98c10626 	beq	r19,r3,4644 <_dtoa_r+0x12f4>
    422c:	800b883a 	mov	r5,r16
    4230:	000f883a 	mov	r7,zero
    4234:	01800284 	movi	r6,10
    4238:	e009883a 	mov	r4,fp
    423c:	00064a40 	call	64a4 <__multadd>
    4240:	1021883a 	mov	r16,r2
    4244:	000f883a 	mov	r7,zero
    4248:	01800284 	movi	r6,10
    424c:	880b883a 	mov	r5,r17
    4250:	e009883a 	mov	r4,fp
    4254:	8d002526 	beq	r17,r20,42ec <_dtoa_r+0xf9c>
    4258:	00064a40 	call	64a4 <__multadd>
    425c:	a00b883a 	mov	r5,r20
    4260:	000f883a 	mov	r7,zero
    4264:	01800284 	movi	r6,10
    4268:	e009883a 	mov	r4,fp
    426c:	1023883a 	mov	r17,r2
    4270:	00064a40 	call	64a4 <__multadd>
    4274:	1029883a 	mov	r20,r2
    4278:	b027883a 	mov	r19,r22
    427c:	003fc006 	br	4180 <__ram_exceptions_end+0xfbfe3f2c>
    4280:	9011883a 	mov	r8,r18
    4284:	00800e0e 	bge	zero,r2,42c0 <_dtoa_r+0xf70>
    4288:	800b883a 	mov	r5,r16
    428c:	01800044 	movi	r6,1
    4290:	e009883a 	mov	r4,fp
    4294:	da001715 	stw	r8,92(sp)
    4298:	0006b540 	call	6b54 <__lshift>
    429c:	a80b883a 	mov	r5,r21
    42a0:	1009883a 	mov	r4,r2
    42a4:	1021883a 	mov	r16,r2
    42a8:	0006c9c0 	call	6c9c <__mcmp>
    42ac:	da001717 	ldw	r8,92(sp)
    42b0:	0081960e 	bge	zero,r2,490c <_dtoa_r+0x15bc>
    42b4:	00800e44 	movi	r2,57
    42b8:	40817026 	beq	r8,r2,487c <_dtoa_r+0x152c>
    42bc:	ba000c44 	addi	r8,r23,49
    42c0:	8825883a 	mov	r18,r17
    42c4:	9dc00044 	addi	r23,r19,1
    42c8:	9a000005 	stb	r8,0(r19)
    42cc:	a023883a 	mov	r17,r20
    42d0:	dc000915 	stw	r16,36(sp)
    42d4:	003f2406 	br	3f68 <__ram_exceptions_end+0xfbfe3d14>
    42d8:	00800e44 	movi	r2,57
    42dc:	9011883a 	mov	r8,r18
    42e0:	90816626 	beq	r18,r2,487c <_dtoa_r+0x152c>
    42e4:	05bff516 	blt	zero,r22,42bc <__ram_exceptions_end+0xfbfe4068>
    42e8:	003ff506 	br	42c0 <__ram_exceptions_end+0xfbfe406c>
    42ec:	00064a40 	call	64a4 <__multadd>
    42f0:	1023883a 	mov	r17,r2
    42f4:	1029883a 	mov	r20,r2
    42f8:	003fdf06 	br	4278 <__ram_exceptions_end+0xfbfe4024>
    42fc:	e009883a 	mov	r4,fp
    4300:	000647c0 	call	647c <_Bfree>
    4304:	00800044 	movi	r2,1
    4308:	003fbc06 	br	41fc <__ram_exceptions_end+0xfbfe3fa8>
    430c:	a80b883a 	mov	r5,r21
    4310:	8009883a 	mov	r4,r16
    4314:	0006c9c0 	call	6c9c <__mcmp>
    4318:	103edb0e 	bge	r2,zero,3e88 <__ram_exceptions_end+0xfbfe3c34>
    431c:	800b883a 	mov	r5,r16
    4320:	000f883a 	mov	r7,zero
    4324:	01800284 	movi	r6,10
    4328:	e009883a 	mov	r4,fp
    432c:	00064a40 	call	64a4 <__multadd>
    4330:	1021883a 	mov	r16,r2
    4334:	d8800517 	ldw	r2,20(sp)
    4338:	d8c00b17 	ldw	r3,44(sp)
    433c:	10bfffc4 	addi	r2,r2,-1
    4340:	d8800515 	stw	r2,20(sp)
    4344:	183f761e 	bne	r3,zero,4120 <__ram_exceptions_end+0xfbfe3ecc>
    4348:	d9000c17 	ldw	r4,48(sp)
    434c:	0101730e 	bge	zero,r4,491c <_dtoa_r+0x15cc>
    4350:	d9000615 	stw	r4,24(sp)
    4354:	003ed006 	br	3e98 <__ram_exceptions_end+0xfbfe3c44>
    4358:	00800084 	movi	r2,2
    435c:	3081861e 	bne	r6,r2,4978 <_dtoa_r+0x1628>
    4360:	d8000b15 	stw	zero,44(sp)
    4364:	003f3c06 	br	4058 <__ram_exceptions_end+0xfbfe3e04>
    4368:	dc000917 	ldw	r16,36(sp)
    436c:	003e9206 	br	3db8 <__ram_exceptions_end+0xfbfe3b64>
    4370:	d9c00317 	ldw	r7,12(sp)
    4374:	00800084 	movi	r2,2
    4378:	11fec50e 	bge	r2,r7,3e90 <__ram_exceptions_end+0xfbfe3c3c>
    437c:	d9000617 	ldw	r4,24(sp)
    4380:	20013c1e 	bne	r4,zero,4874 <_dtoa_r+0x1524>
    4384:	a80b883a 	mov	r5,r21
    4388:	000f883a 	mov	r7,zero
    438c:	01800144 	movi	r6,5
    4390:	e009883a 	mov	r4,fp
    4394:	00064a40 	call	64a4 <__multadd>
    4398:	100b883a 	mov	r5,r2
    439c:	8009883a 	mov	r4,r16
    43a0:	102b883a 	mov	r21,r2
    43a4:	0006c9c0 	call	6c9c <__mcmp>
    43a8:	dc000915 	stw	r16,36(sp)
    43ac:	00bf410e 	bge	zero,r2,40b4 <__ram_exceptions_end+0xfbfe3e60>
    43b0:	d9c00717 	ldw	r7,28(sp)
    43b4:	00800c44 	movi	r2,49
    43b8:	38800005 	stb	r2,0(r7)
    43bc:	d8800517 	ldw	r2,20(sp)
    43c0:	3dc00044 	addi	r23,r7,1
    43c4:	10800044 	addi	r2,r2,1
    43c8:	d8800515 	stw	r2,20(sp)
    43cc:	003f3d06 	br	40c4 <__ram_exceptions_end+0xfbfe3e70>
    43d0:	d9800517 	ldw	r6,20(sp)
    43d4:	d9c00717 	ldw	r7,28(sp)
    43d8:	00800c44 	movi	r2,49
    43dc:	31800044 	addi	r6,r6,1
    43e0:	d9800515 	stw	r6,20(sp)
    43e4:	38800005 	stb	r2,0(r7)
    43e8:	003edf06 	br	3f68 <__ram_exceptions_end+0xfbfe3d14>
    43ec:	d8000b15 	stw	zero,44(sp)
    43f0:	003c9f06 	br	3670 <__ram_exceptions_end+0xfbfe341c>
    43f4:	903e7e1e 	bne	r18,zero,3df0 <__ram_exceptions_end+0xfbfe3b9c>
    43f8:	00800434 	movhi	r2,16
    43fc:	10bfffc4 	addi	r2,r2,-1
    4400:	9884703a 	and	r2,r19,r2
    4404:	1000ea1e 	bne	r2,zero,47b0 <_dtoa_r+0x1460>
    4408:	9cdffc2c 	andhi	r19,r19,32752
    440c:	9800e826 	beq	r19,zero,47b0 <_dtoa_r+0x1460>
    4410:	d9c00817 	ldw	r7,32(sp)
    4414:	b5800044 	addi	r22,r22,1
    4418:	04c00044 	movi	r19,1
    441c:	39c00044 	addi	r7,r7,1
    4420:	d9c00815 	stw	r7,32(sp)
    4424:	d8800d17 	ldw	r2,52(sp)
    4428:	103e721e 	bne	r2,zero,3df4 <__ram_exceptions_end+0xfbfe3ba0>
    442c:	00800044 	movi	r2,1
    4430:	003e7906 	br	3e18 <__ram_exceptions_end+0xfbfe3bc4>
    4434:	8009883a 	mov	r4,r16
    4438:	000d1700 	call	d170 <__floatsidf>
    443c:	d9800f17 	ldw	r6,60(sp)
    4440:	d9c01017 	ldw	r7,64(sp)
    4444:	1009883a 	mov	r4,r2
    4448:	180b883a 	mov	r5,r3
    444c:	000c0dc0 	call	c0dc <__muldf3>
    4450:	000d883a 	mov	r6,zero
    4454:	01d00734 	movhi	r7,16412
    4458:	1009883a 	mov	r4,r2
    445c:	180b883a 	mov	r5,r3
    4460:	000acf00 	call	acf0 <__adddf3>
    4464:	047f3034 	movhi	r17,64704
    4468:	1021883a 	mov	r16,r2
    446c:	1c63883a 	add	r17,r3,r17
    4470:	d9000f17 	ldw	r4,60(sp)
    4474:	d9401017 	ldw	r5,64(sp)
    4478:	000d883a 	mov	r6,zero
    447c:	01d00534 	movhi	r7,16404
    4480:	000c7f40 	call	c7f4 <__subdf3>
    4484:	800d883a 	mov	r6,r16
    4488:	880f883a 	mov	r7,r17
    448c:	1009883a 	mov	r4,r2
    4490:	180b883a 	mov	r5,r3
    4494:	102b883a 	mov	r21,r2
    4498:	1829883a 	mov	r20,r3
    449c:	000bf0c0 	call	bf0c <__gedf2>
    44a0:	00806c16 	blt	zero,r2,4654 <_dtoa_r+0x1304>
    44a4:	89e0003c 	xorhi	r7,r17,32768
    44a8:	800d883a 	mov	r6,r16
    44ac:	a809883a 	mov	r4,r21
    44b0:	a00b883a 	mov	r5,r20
    44b4:	000bfe80 	call	bfe8 <__ledf2>
    44b8:	103d7e0e 	bge	r2,zero,3ab4 <__ram_exceptions_end+0xfbfe3860>
    44bc:	002b883a 	mov	r21,zero
    44c0:	0023883a 	mov	r17,zero
    44c4:	003efb06 	br	40b4 <__ram_exceptions_end+0xfbfe3e60>
    44c8:	d8800717 	ldw	r2,28(sp)
    44cc:	003bd006 	br	3410 <__ram_exceptions_end+0xfbfe31bc>
    44d0:	d9000a17 	ldw	r4,40(sp)
    44d4:	d9800d17 	ldw	r6,52(sp)
    44d8:	dd400a15 	stw	r21,40(sp)
    44dc:	a905c83a 	sub	r2,r21,r4
    44e0:	308d883a 	add	r6,r6,r2
    44e4:	d9800d15 	stw	r6,52(sp)
    44e8:	002b883a 	mov	r21,zero
    44ec:	003e0606 	br	3d08 <__ram_exceptions_end+0xfbfe3ab4>
    44f0:	9023883a 	mov	r17,r18
    44f4:	9829883a 	mov	r20,r19
    44f8:	04000084 	movi	r16,2
    44fc:	003c9206 	br	3748 <__ram_exceptions_end+0xfbfe34f4>
    4500:	04000044 	movi	r16,1
    4504:	dc000c15 	stw	r16,48(sp)
    4508:	dc000615 	stw	r16,24(sp)
    450c:	dc002215 	stw	r16,136(sp)
    4510:	e0001115 	stw	zero,68(fp)
    4514:	000b883a 	mov	r5,zero
    4518:	003c6906 	br	36c0 <__ram_exceptions_end+0xfbfe346c>
    451c:	3021883a 	mov	r16,r6
    4520:	003ffb06 	br	4510 <__ram_exceptions_end+0xfbfe42bc>
    4524:	1000021e 	bne	r2,zero,4530 <_dtoa_r+0x11e0>
    4528:	4200004c 	andi	r8,r8,1
    452c:	403e7d1e 	bne	r8,zero,3f24 <__ram_exceptions_end+0xfbfe3cd0>
    4530:	01000c04 	movi	r4,48
    4534:	00000106 	br	453c <_dtoa_r+0x11ec>
    4538:	102f883a 	mov	r23,r2
    453c:	b8bfffc4 	addi	r2,r23,-1
    4540:	10c00007 	ldb	r3,0(r2)
    4544:	193ffc26 	beq	r3,r4,4538 <__ram_exceptions_end+0xfbfe42e4>
    4548:	003e8706 	br	3f68 <__ram_exceptions_end+0xfbfe3d14>
    454c:	d8800517 	ldw	r2,20(sp)
    4550:	00a3c83a 	sub	r17,zero,r2
    4554:	8800a426 	beq	r17,zero,47e8 <_dtoa_r+0x1498>
    4558:	888003cc 	andi	r2,r17,15
    455c:	100490fa 	slli	r2,r2,3
    4560:	00c00074 	movhi	r3,1
    4564:	18c07804 	addi	r3,r3,480
    4568:	1885883a 	add	r2,r3,r2
    456c:	11800017 	ldw	r6,0(r2)
    4570:	11c00117 	ldw	r7,4(r2)
    4574:	9009883a 	mov	r4,r18
    4578:	980b883a 	mov	r5,r19
    457c:	8823d13a 	srai	r17,r17,4
    4580:	000c0dc0 	call	c0dc <__muldf3>
    4584:	d8800f15 	stw	r2,60(sp)
    4588:	d8c01015 	stw	r3,64(sp)
    458c:	8800e826 	beq	r17,zero,4930 <_dtoa_r+0x15e0>
    4590:	05000074 	movhi	r20,1
    4594:	a5006e04 	addi	r20,r20,440
    4598:	04000084 	movi	r16,2
    459c:	8980004c 	andi	r6,r17,1
    45a0:	1009883a 	mov	r4,r2
    45a4:	8823d07a 	srai	r17,r17,1
    45a8:	180b883a 	mov	r5,r3
    45ac:	30000426 	beq	r6,zero,45c0 <_dtoa_r+0x1270>
    45b0:	a1800017 	ldw	r6,0(r20)
    45b4:	a1c00117 	ldw	r7,4(r20)
    45b8:	84000044 	addi	r16,r16,1
    45bc:	000c0dc0 	call	c0dc <__muldf3>
    45c0:	a5000204 	addi	r20,r20,8
    45c4:	883ff51e 	bne	r17,zero,459c <__ram_exceptions_end+0xfbfe4348>
    45c8:	d8800f15 	stw	r2,60(sp)
    45cc:	d8c01015 	stw	r3,64(sp)
    45d0:	003c7606 	br	37ac <__ram_exceptions_end+0xfbfe3558>
    45d4:	00c00c04 	movi	r3,48
    45d8:	10c00005 	stb	r3,0(r2)
    45dc:	d8c00517 	ldw	r3,20(sp)
    45e0:	bd3fffc3 	ldbu	r20,-1(r23)
    45e4:	18c00044 	addi	r3,r3,1
    45e8:	d8c00515 	stw	r3,20(sp)
    45ec:	003db906 	br	3cd4 <__ram_exceptions_end+0xfbfe3a80>
    45f0:	89400117 	ldw	r5,4(r17)
    45f4:	e009883a 	mov	r4,fp
    45f8:	00063d40 	call	63d4 <_Balloc>
    45fc:	89800417 	ldw	r6,16(r17)
    4600:	89400304 	addi	r5,r17,12
    4604:	11000304 	addi	r4,r2,12
    4608:	31800084 	addi	r6,r6,2
    460c:	318d883a 	add	r6,r6,r6
    4610:	318d883a 	add	r6,r6,r6
    4614:	1027883a 	mov	r19,r2
    4618:	00061640 	call	6164 <memcpy>
    461c:	01800044 	movi	r6,1
    4620:	980b883a 	mov	r5,r19
    4624:	e009883a 	mov	r4,fp
    4628:	0006b540 	call	6b54 <__lshift>
    462c:	1029883a 	mov	r20,r2
    4630:	003ecc06 	br	4164 <__ram_exceptions_end+0xfbfe3f10>
    4634:	00800e44 	movi	r2,57
    4638:	90809026 	beq	r18,r2,487c <_dtoa_r+0x152c>
    463c:	92000044 	addi	r8,r18,1
    4640:	003f1f06 	br	42c0 <__ram_exceptions_end+0xfbfe406c>
    4644:	9011883a 	mov	r8,r18
    4648:	8825883a 	mov	r18,r17
    464c:	a023883a 	mov	r17,r20
    4650:	003e2906 	br	3ef8 <__ram_exceptions_end+0xfbfe3ca4>
    4654:	002b883a 	mov	r21,zero
    4658:	0023883a 	mov	r17,zero
    465c:	003f5406 	br	43b0 <__ram_exceptions_end+0xfbfe415c>
    4660:	61bfffc4 	addi	r6,r12,-1
    4664:	300490fa 	slli	r2,r6,3
    4668:	00c00074 	movhi	r3,1
    466c:	18c07804 	addi	r3,r3,480
    4670:	1885883a 	add	r2,r3,r2
    4674:	11000017 	ldw	r4,0(r2)
    4678:	11400117 	ldw	r5,4(r2)
    467c:	d8800717 	ldw	r2,28(sp)
    4680:	880f883a 	mov	r7,r17
    4684:	d9801215 	stw	r6,72(sp)
    4688:	800d883a 	mov	r6,r16
    468c:	db001615 	stw	r12,88(sp)
    4690:	15c00044 	addi	r23,r2,1
    4694:	000c0dc0 	call	c0dc <__muldf3>
    4698:	d9401017 	ldw	r5,64(sp)
    469c:	d9000f17 	ldw	r4,60(sp)
    46a0:	d8c01515 	stw	r3,84(sp)
    46a4:	d8801415 	stw	r2,80(sp)
    46a8:	000d0f00 	call	d0f0 <__fixdfsi>
    46ac:	1009883a 	mov	r4,r2
    46b0:	1021883a 	mov	r16,r2
    46b4:	000d1700 	call	d170 <__floatsidf>
    46b8:	d9000f17 	ldw	r4,60(sp)
    46bc:	d9401017 	ldw	r5,64(sp)
    46c0:	100d883a 	mov	r6,r2
    46c4:	180f883a 	mov	r7,r3
    46c8:	000c7f40 	call	c7f4 <__subdf3>
    46cc:	1829883a 	mov	r20,r3
    46d0:	d8c00717 	ldw	r3,28(sp)
    46d4:	84000c04 	addi	r16,r16,48
    46d8:	1023883a 	mov	r17,r2
    46dc:	1c000005 	stb	r16,0(r3)
    46e0:	db001617 	ldw	r12,88(sp)
    46e4:	00800044 	movi	r2,1
    46e8:	60802226 	beq	r12,r2,4774 <_dtoa_r+0x1424>
    46ec:	d9c00717 	ldw	r7,28(sp)
    46f0:	8805883a 	mov	r2,r17
    46f4:	b82b883a 	mov	r21,r23
    46f8:	3b19883a 	add	r12,r7,r12
    46fc:	6023883a 	mov	r17,r12
    4700:	a007883a 	mov	r3,r20
    4704:	dc800f15 	stw	r18,60(sp)
    4708:	000d883a 	mov	r6,zero
    470c:	01d00934 	movhi	r7,16420
    4710:	1009883a 	mov	r4,r2
    4714:	180b883a 	mov	r5,r3
    4718:	000c0dc0 	call	c0dc <__muldf3>
    471c:	180b883a 	mov	r5,r3
    4720:	1009883a 	mov	r4,r2
    4724:	1829883a 	mov	r20,r3
    4728:	1025883a 	mov	r18,r2
    472c:	000d0f00 	call	d0f0 <__fixdfsi>
    4730:	1009883a 	mov	r4,r2
    4734:	1021883a 	mov	r16,r2
    4738:	000d1700 	call	d170 <__floatsidf>
    473c:	100d883a 	mov	r6,r2
    4740:	180f883a 	mov	r7,r3
    4744:	9009883a 	mov	r4,r18
    4748:	a00b883a 	mov	r5,r20
    474c:	84000c04 	addi	r16,r16,48
    4750:	000c7f40 	call	c7f4 <__subdf3>
    4754:	ad400044 	addi	r21,r21,1
    4758:	ac3fffc5 	stb	r16,-1(r21)
    475c:	ac7fea1e 	bne	r21,r17,4708 <__ram_exceptions_end+0xfbfe44b4>
    4760:	1023883a 	mov	r17,r2
    4764:	d8801217 	ldw	r2,72(sp)
    4768:	dc800f17 	ldw	r18,60(sp)
    476c:	1829883a 	mov	r20,r3
    4770:	b8af883a 	add	r23,r23,r2
    4774:	d9001417 	ldw	r4,80(sp)
    4778:	d9401517 	ldw	r5,84(sp)
    477c:	000d883a 	mov	r6,zero
    4780:	01cff834 	movhi	r7,16352
    4784:	000acf00 	call	acf0 <__adddf3>
    4788:	880d883a 	mov	r6,r17
    478c:	a00f883a 	mov	r7,r20
    4790:	1009883a 	mov	r4,r2
    4794:	180b883a 	mov	r5,r3
    4798:	000bfe80 	call	bfe8 <__ledf2>
    479c:	10003e0e 	bge	r2,zero,4898 <_dtoa_r+0x1548>
    47a0:	d9001317 	ldw	r4,76(sp)
    47a4:	bd3fffc3 	ldbu	r20,-1(r23)
    47a8:	d9000515 	stw	r4,20(sp)
    47ac:	003d3b06 	br	3c9c <__ram_exceptions_end+0xfbfe3a48>
    47b0:	0027883a 	mov	r19,zero
    47b4:	003f1b06 	br	4424 <__ram_exceptions_end+0xfbfe41d0>
    47b8:	d8800817 	ldw	r2,32(sp)
    47bc:	11e9c83a 	sub	r20,r2,r7
    47c0:	0005883a 	mov	r2,zero
    47c4:	003d5406 	br	3d18 <__ram_exceptions_end+0xfbfe3ac4>
    47c8:	00800044 	movi	r2,1
    47cc:	003dc706 	br	3eec <__ram_exceptions_end+0xfbfe3c98>
    47d0:	d8c00217 	ldw	r3,8(sp)
    47d4:	00800d84 	movi	r2,54
    47d8:	dd400a17 	ldw	r21,40(sp)
    47dc:	10c5c83a 	sub	r2,r2,r3
    47e0:	dd000817 	ldw	r20,32(sp)
    47e4:	003d4c06 	br	3d18 <__ram_exceptions_end+0xfbfe3ac4>
    47e8:	dc800f15 	stw	r18,60(sp)
    47ec:	dcc01015 	stw	r19,64(sp)
    47f0:	04000084 	movi	r16,2
    47f4:	003bed06 	br	37ac <__ram_exceptions_end+0xfbfe3558>
    47f8:	d9000617 	ldw	r4,24(sp)
    47fc:	203f0d26 	beq	r4,zero,4434 <__ram_exceptions_end+0xfbfe41e0>
    4800:	d9800c17 	ldw	r6,48(sp)
    4804:	01bcab0e 	bge	zero,r6,3ab4 <__ram_exceptions_end+0xfbfe3860>
    4808:	d9401017 	ldw	r5,64(sp)
    480c:	d9000f17 	ldw	r4,60(sp)
    4810:	000d883a 	mov	r6,zero
    4814:	01d00934 	movhi	r7,16420
    4818:	000c0dc0 	call	c0dc <__muldf3>
    481c:	81000044 	addi	r4,r16,1
    4820:	d8800f15 	stw	r2,60(sp)
    4824:	d8c01015 	stw	r3,64(sp)
    4828:	000d1700 	call	d170 <__floatsidf>
    482c:	d9800f17 	ldw	r6,60(sp)
    4830:	d9c01017 	ldw	r7,64(sp)
    4834:	1009883a 	mov	r4,r2
    4838:	180b883a 	mov	r5,r3
    483c:	000c0dc0 	call	c0dc <__muldf3>
    4840:	01d00734 	movhi	r7,16412
    4844:	000d883a 	mov	r6,zero
    4848:	1009883a 	mov	r4,r2
    484c:	180b883a 	mov	r5,r3
    4850:	000acf00 	call	acf0 <__adddf3>
    4854:	d9c00517 	ldw	r7,20(sp)
    4858:	047f3034 	movhi	r17,64704
    485c:	1021883a 	mov	r16,r2
    4860:	39ffffc4 	addi	r7,r7,-1
    4864:	d9c01315 	stw	r7,76(sp)
    4868:	1c63883a 	add	r17,r3,r17
    486c:	db000c17 	ldw	r12,48(sp)
    4870:	003bea06 	br	381c <__ram_exceptions_end+0xfbfe35c8>
    4874:	dc000915 	stw	r16,36(sp)
    4878:	003e0e06 	br	40b4 <__ram_exceptions_end+0xfbfe3e60>
    487c:	01000e44 	movi	r4,57
    4880:	8825883a 	mov	r18,r17
    4884:	9dc00044 	addi	r23,r19,1
    4888:	99000005 	stb	r4,0(r19)
    488c:	a023883a 	mov	r17,r20
    4890:	dc000915 	stw	r16,36(sp)
    4894:	003da406 	br	3f28 <__ram_exceptions_end+0xfbfe3cd4>
    4898:	d9801417 	ldw	r6,80(sp)
    489c:	d9c01517 	ldw	r7,84(sp)
    48a0:	0009883a 	mov	r4,zero
    48a4:	014ff834 	movhi	r5,16352
    48a8:	000c7f40 	call	c7f4 <__subdf3>
    48ac:	880d883a 	mov	r6,r17
    48b0:	a00f883a 	mov	r7,r20
    48b4:	1009883a 	mov	r4,r2
    48b8:	180b883a 	mov	r5,r3
    48bc:	000bf0c0 	call	bf0c <__gedf2>
    48c0:	00bc7c0e 	bge	zero,r2,3ab4 <__ram_exceptions_end+0xfbfe3860>
    48c4:	01000c04 	movi	r4,48
    48c8:	00000106 	br	48d0 <_dtoa_r+0x1580>
    48cc:	102f883a 	mov	r23,r2
    48d0:	b8bfffc4 	addi	r2,r23,-1
    48d4:	10c00007 	ldb	r3,0(r2)
    48d8:	193ffc26 	beq	r3,r4,48cc <__ram_exceptions_end+0xfbfe4678>
    48dc:	d9801317 	ldw	r6,76(sp)
    48e0:	d9800515 	stw	r6,20(sp)
    48e4:	003c4406 	br	39f8 <__ram_exceptions_end+0xfbfe37a4>
    48e8:	d9801317 	ldw	r6,76(sp)
    48ec:	d9800515 	stw	r6,20(sp)
    48f0:	003cea06 	br	3c9c <__ram_exceptions_end+0xfbfe3a48>
    48f4:	dd800f17 	ldw	r22,60(sp)
    48f8:	dcc01017 	ldw	r19,64(sp)
    48fc:	dc801217 	ldw	r18,72(sp)
    4900:	003c6c06 	br	3ab4 <__ram_exceptions_end+0xfbfe3860>
    4904:	903e031e 	bne	r18,zero,4114 <__ram_exceptions_end+0xfbfe3ec0>
    4908:	003ebb06 	br	43f8 <__ram_exceptions_end+0xfbfe41a4>
    490c:	103e6c1e 	bne	r2,zero,42c0 <__ram_exceptions_end+0xfbfe406c>
    4910:	4080004c 	andi	r2,r8,1
    4914:	103e6a26 	beq	r2,zero,42c0 <__ram_exceptions_end+0xfbfe406c>
    4918:	003e6606 	br	42b4 <__ram_exceptions_end+0xfbfe4060>
    491c:	d8c00317 	ldw	r3,12(sp)
    4920:	00800084 	movi	r2,2
    4924:	10c02916 	blt	r2,r3,49cc <_dtoa_r+0x167c>
    4928:	d9000c17 	ldw	r4,48(sp)
    492c:	003e8806 	br	4350 <__ram_exceptions_end+0xfbfe40fc>
    4930:	04000084 	movi	r16,2
    4934:	003b9d06 	br	37ac <__ram_exceptions_end+0xfbfe3558>
    4938:	d9001317 	ldw	r4,76(sp)
    493c:	d9000515 	stw	r4,20(sp)
    4940:	003cd606 	br	3c9c <__ram_exceptions_end+0xfbfe3a48>
    4944:	d8801317 	ldw	r2,76(sp)
    4948:	d8800515 	stw	r2,20(sp)
    494c:	003c2a06 	br	39f8 <__ram_exceptions_end+0xfbfe37a4>
    4950:	d9800317 	ldw	r6,12(sp)
    4954:	00800084 	movi	r2,2
    4958:	11801516 	blt	r2,r6,49b0 <_dtoa_r+0x1660>
    495c:	d9c00c17 	ldw	r7,48(sp)
    4960:	d9c00615 	stw	r7,24(sp)
    4964:	003df706 	br	4144 <__ram_exceptions_end+0xfbfe3ef0>
    4968:	193d3926 	beq	r3,r4,3e50 <__ram_exceptions_end+0xfbfe3bfc>
    496c:	00c00f04 	movi	r3,60
    4970:	1885c83a 	sub	r2,r3,r2
    4974:	003ddf06 	br	40f4 <__ram_exceptions_end+0xfbfe3ea0>
    4978:	e009883a 	mov	r4,fp
    497c:	e0001115 	stw	zero,68(fp)
    4980:	000b883a 	mov	r5,zero
    4984:	00063d40 	call	63d4 <_Balloc>
    4988:	d8800715 	stw	r2,28(sp)
    498c:	d8c00717 	ldw	r3,28(sp)
    4990:	00bfffc4 	movi	r2,-1
    4994:	01000044 	movi	r4,1
    4998:	d8800c15 	stw	r2,48(sp)
    499c:	e0c01015 	stw	r3,64(fp)
    49a0:	d9000b15 	stw	r4,44(sp)
    49a4:	d8800615 	stw	r2,24(sp)
    49a8:	d8002215 	stw	zero,136(sp)
    49ac:	003c4106 	br	3ab4 <__ram_exceptions_end+0xfbfe3860>
    49b0:	d8c00c17 	ldw	r3,48(sp)
    49b4:	d8c00615 	stw	r3,24(sp)
    49b8:	003e7006 	br	437c <__ram_exceptions_end+0xfbfe4128>
    49bc:	04400044 	movi	r17,1
    49c0:	003b2006 	br	3644 <__ram_exceptions_end+0xfbfe33f0>
    49c4:	000b883a 	mov	r5,zero
    49c8:	003b3d06 	br	36c0 <__ram_exceptions_end+0xfbfe346c>
    49cc:	d8800c17 	ldw	r2,48(sp)
    49d0:	d8800615 	stw	r2,24(sp)
    49d4:	003e6906 	br	437c <__ram_exceptions_end+0xfbfe4128>

000049d8 <__sflush_r>:
    49d8:	2880030b 	ldhu	r2,12(r5)
    49dc:	defffb04 	addi	sp,sp,-20
    49e0:	dcc00315 	stw	r19,12(sp)
    49e4:	dc400115 	stw	r17,4(sp)
    49e8:	dfc00415 	stw	ra,16(sp)
    49ec:	dc800215 	stw	r18,8(sp)
    49f0:	dc000015 	stw	r16,0(sp)
    49f4:	10c0020c 	andi	r3,r2,8
    49f8:	2823883a 	mov	r17,r5
    49fc:	2027883a 	mov	r19,r4
    4a00:	1800311e 	bne	r3,zero,4ac8 <__sflush_r+0xf0>
    4a04:	28c00117 	ldw	r3,4(r5)
    4a08:	10820014 	ori	r2,r2,2048
    4a0c:	2880030d 	sth	r2,12(r5)
    4a10:	00c04b0e 	bge	zero,r3,4b40 <__sflush_r+0x168>
    4a14:	8a000a17 	ldw	r8,40(r17)
    4a18:	40002326 	beq	r8,zero,4aa8 <__sflush_r+0xd0>
    4a1c:	9c000017 	ldw	r16,0(r19)
    4a20:	10c4000c 	andi	r3,r2,4096
    4a24:	98000015 	stw	zero,0(r19)
    4a28:	18004826 	beq	r3,zero,4b4c <__sflush_r+0x174>
    4a2c:	89801417 	ldw	r6,80(r17)
    4a30:	10c0010c 	andi	r3,r2,4
    4a34:	18000626 	beq	r3,zero,4a50 <__sflush_r+0x78>
    4a38:	88c00117 	ldw	r3,4(r17)
    4a3c:	88800c17 	ldw	r2,48(r17)
    4a40:	30cdc83a 	sub	r6,r6,r3
    4a44:	10000226 	beq	r2,zero,4a50 <__sflush_r+0x78>
    4a48:	88800f17 	ldw	r2,60(r17)
    4a4c:	308dc83a 	sub	r6,r6,r2
    4a50:	89400717 	ldw	r5,28(r17)
    4a54:	000f883a 	mov	r7,zero
    4a58:	9809883a 	mov	r4,r19
    4a5c:	403ee83a 	callr	r8
    4a60:	00ffffc4 	movi	r3,-1
    4a64:	10c04426 	beq	r2,r3,4b78 <__sflush_r+0x1a0>
    4a68:	88c0030b 	ldhu	r3,12(r17)
    4a6c:	89000417 	ldw	r4,16(r17)
    4a70:	88000115 	stw	zero,4(r17)
    4a74:	197dffcc 	andi	r5,r3,63487
    4a78:	8940030d 	sth	r5,12(r17)
    4a7c:	89000015 	stw	r4,0(r17)
    4a80:	18c4000c 	andi	r3,r3,4096
    4a84:	18002c1e 	bne	r3,zero,4b38 <__sflush_r+0x160>
    4a88:	89400c17 	ldw	r5,48(r17)
    4a8c:	9c000015 	stw	r16,0(r19)
    4a90:	28000526 	beq	r5,zero,4aa8 <__sflush_r+0xd0>
    4a94:	88801004 	addi	r2,r17,64
    4a98:	28800226 	beq	r5,r2,4aa4 <__sflush_r+0xcc>
    4a9c:	9809883a 	mov	r4,r19
    4aa0:	00051440 	call	5144 <_free_r>
    4aa4:	88000c15 	stw	zero,48(r17)
    4aa8:	0005883a 	mov	r2,zero
    4aac:	dfc00417 	ldw	ra,16(sp)
    4ab0:	dcc00317 	ldw	r19,12(sp)
    4ab4:	dc800217 	ldw	r18,8(sp)
    4ab8:	dc400117 	ldw	r17,4(sp)
    4abc:	dc000017 	ldw	r16,0(sp)
    4ac0:	dec00504 	addi	sp,sp,20
    4ac4:	f800283a 	ret
    4ac8:	2c800417 	ldw	r18,16(r5)
    4acc:	903ff626 	beq	r18,zero,4aa8 <__ram_exceptions_end+0xfbfe4854>
    4ad0:	2c000017 	ldw	r16,0(r5)
    4ad4:	108000cc 	andi	r2,r2,3
    4ad8:	2c800015 	stw	r18,0(r5)
    4adc:	84a1c83a 	sub	r16,r16,r18
    4ae0:	1000131e 	bne	r2,zero,4b30 <__sflush_r+0x158>
    4ae4:	28800517 	ldw	r2,20(r5)
    4ae8:	88800215 	stw	r2,8(r17)
    4aec:	04000316 	blt	zero,r16,4afc <__sflush_r+0x124>
    4af0:	003fed06 	br	4aa8 <__ram_exceptions_end+0xfbfe4854>
    4af4:	90a5883a 	add	r18,r18,r2
    4af8:	043feb0e 	bge	zero,r16,4aa8 <__ram_exceptions_end+0xfbfe4854>
    4afc:	88800917 	ldw	r2,36(r17)
    4b00:	89400717 	ldw	r5,28(r17)
    4b04:	800f883a 	mov	r7,r16
    4b08:	900d883a 	mov	r6,r18
    4b0c:	9809883a 	mov	r4,r19
    4b10:	103ee83a 	callr	r2
    4b14:	80a1c83a 	sub	r16,r16,r2
    4b18:	00bff616 	blt	zero,r2,4af4 <__ram_exceptions_end+0xfbfe48a0>
    4b1c:	88c0030b 	ldhu	r3,12(r17)
    4b20:	00bfffc4 	movi	r2,-1
    4b24:	18c01014 	ori	r3,r3,64
    4b28:	88c0030d 	sth	r3,12(r17)
    4b2c:	003fdf06 	br	4aac <__ram_exceptions_end+0xfbfe4858>
    4b30:	0005883a 	mov	r2,zero
    4b34:	003fec06 	br	4ae8 <__ram_exceptions_end+0xfbfe4894>
    4b38:	88801415 	stw	r2,80(r17)
    4b3c:	003fd206 	br	4a88 <__ram_exceptions_end+0xfbfe4834>
    4b40:	28c00f17 	ldw	r3,60(r5)
    4b44:	00ffb316 	blt	zero,r3,4a14 <__ram_exceptions_end+0xfbfe47c0>
    4b48:	003fd706 	br	4aa8 <__ram_exceptions_end+0xfbfe4854>
    4b4c:	89400717 	ldw	r5,28(r17)
    4b50:	000d883a 	mov	r6,zero
    4b54:	01c00044 	movi	r7,1
    4b58:	9809883a 	mov	r4,r19
    4b5c:	403ee83a 	callr	r8
    4b60:	100d883a 	mov	r6,r2
    4b64:	00bfffc4 	movi	r2,-1
    4b68:	30801426 	beq	r6,r2,4bbc <__sflush_r+0x1e4>
    4b6c:	8880030b 	ldhu	r2,12(r17)
    4b70:	8a000a17 	ldw	r8,40(r17)
    4b74:	003fae06 	br	4a30 <__ram_exceptions_end+0xfbfe47dc>
    4b78:	98c00017 	ldw	r3,0(r19)
    4b7c:	183fba26 	beq	r3,zero,4a68 <__ram_exceptions_end+0xfbfe4814>
    4b80:	01000744 	movi	r4,29
    4b84:	19000626 	beq	r3,r4,4ba0 <__sflush_r+0x1c8>
    4b88:	01000584 	movi	r4,22
    4b8c:	19000426 	beq	r3,r4,4ba0 <__sflush_r+0x1c8>
    4b90:	88c0030b 	ldhu	r3,12(r17)
    4b94:	18c01014 	ori	r3,r3,64
    4b98:	88c0030d 	sth	r3,12(r17)
    4b9c:	003fc306 	br	4aac <__ram_exceptions_end+0xfbfe4858>
    4ba0:	8880030b 	ldhu	r2,12(r17)
    4ba4:	88c00417 	ldw	r3,16(r17)
    4ba8:	88000115 	stw	zero,4(r17)
    4bac:	10bdffcc 	andi	r2,r2,63487
    4bb0:	8880030d 	sth	r2,12(r17)
    4bb4:	88c00015 	stw	r3,0(r17)
    4bb8:	003fb306 	br	4a88 <__ram_exceptions_end+0xfbfe4834>
    4bbc:	98800017 	ldw	r2,0(r19)
    4bc0:	103fea26 	beq	r2,zero,4b6c <__ram_exceptions_end+0xfbfe4918>
    4bc4:	00c00744 	movi	r3,29
    4bc8:	10c00226 	beq	r2,r3,4bd4 <__sflush_r+0x1fc>
    4bcc:	00c00584 	movi	r3,22
    4bd0:	10c0031e 	bne	r2,r3,4be0 <__sflush_r+0x208>
    4bd4:	9c000015 	stw	r16,0(r19)
    4bd8:	0005883a 	mov	r2,zero
    4bdc:	003fb306 	br	4aac <__ram_exceptions_end+0xfbfe4858>
    4be0:	88c0030b 	ldhu	r3,12(r17)
    4be4:	3005883a 	mov	r2,r6
    4be8:	18c01014 	ori	r3,r3,64
    4bec:	88c0030d 	sth	r3,12(r17)
    4bf0:	003fae06 	br	4aac <__ram_exceptions_end+0xfbfe4858>

00004bf4 <_fflush_r>:
    4bf4:	defffd04 	addi	sp,sp,-12
    4bf8:	dc000115 	stw	r16,4(sp)
    4bfc:	dfc00215 	stw	ra,8(sp)
    4c00:	2021883a 	mov	r16,r4
    4c04:	20000226 	beq	r4,zero,4c10 <_fflush_r+0x1c>
    4c08:	20800e17 	ldw	r2,56(r4)
    4c0c:	10000c26 	beq	r2,zero,4c40 <_fflush_r+0x4c>
    4c10:	2880030f 	ldh	r2,12(r5)
    4c14:	1000051e 	bne	r2,zero,4c2c <_fflush_r+0x38>
    4c18:	0005883a 	mov	r2,zero
    4c1c:	dfc00217 	ldw	ra,8(sp)
    4c20:	dc000117 	ldw	r16,4(sp)
    4c24:	dec00304 	addi	sp,sp,12
    4c28:	f800283a 	ret
    4c2c:	8009883a 	mov	r4,r16
    4c30:	dfc00217 	ldw	ra,8(sp)
    4c34:	dc000117 	ldw	r16,4(sp)
    4c38:	dec00304 	addi	sp,sp,12
    4c3c:	00049d81 	jmpi	49d8 <__sflush_r>
    4c40:	d9400015 	stw	r5,0(sp)
    4c44:	0004fd00 	call	4fd0 <__sinit>
    4c48:	d9400017 	ldw	r5,0(sp)
    4c4c:	003ff006 	br	4c10 <__ram_exceptions_end+0xfbfe49bc>

00004c50 <fflush>:
    4c50:	20000526 	beq	r4,zero,4c68 <fflush+0x18>
    4c54:	00800074 	movhi	r2,1
    4c58:	1087ab04 	addi	r2,r2,7852
    4c5c:	200b883a 	mov	r5,r4
    4c60:	11000017 	ldw	r4,0(r2)
    4c64:	0004bf41 	jmpi	4bf4 <_fflush_r>
    4c68:	00800074 	movhi	r2,1
    4c6c:	1087aa04 	addi	r2,r2,7848
    4c70:	11000017 	ldw	r4,0(r2)
    4c74:	01400034 	movhi	r5,0
    4c78:	2952fd04 	addi	r5,r5,19444
    4c7c:	00055181 	jmpi	5518 <_fwalk_reent>

00004c80 <__fp_unlock>:
    4c80:	0005883a 	mov	r2,zero
    4c84:	f800283a 	ret

00004c88 <_cleanup_r>:
    4c88:	01400074 	movhi	r5,1
    4c8c:	2963c204 	addi	r5,r5,-28920
    4c90:	00055181 	jmpi	5518 <_fwalk_reent>

00004c94 <__sinit.part.1>:
    4c94:	defff704 	addi	sp,sp,-36
    4c98:	00c00034 	movhi	r3,0
    4c9c:	dfc00815 	stw	ra,32(sp)
    4ca0:	ddc00715 	stw	r23,28(sp)
    4ca4:	dd800615 	stw	r22,24(sp)
    4ca8:	dd400515 	stw	r21,20(sp)
    4cac:	dd000415 	stw	r20,16(sp)
    4cb0:	dcc00315 	stw	r19,12(sp)
    4cb4:	dc800215 	stw	r18,8(sp)
    4cb8:	dc400115 	stw	r17,4(sp)
    4cbc:	dc000015 	stw	r16,0(sp)
    4cc0:	18d32204 	addi	r3,r3,19592
    4cc4:	24000117 	ldw	r16,4(r4)
    4cc8:	20c00f15 	stw	r3,60(r4)
    4ccc:	2080bb04 	addi	r2,r4,748
    4cd0:	00c000c4 	movi	r3,3
    4cd4:	20c0b915 	stw	r3,740(r4)
    4cd8:	2080ba15 	stw	r2,744(r4)
    4cdc:	2000b815 	stw	zero,736(r4)
    4ce0:	05c00204 	movi	r23,8
    4ce4:	00800104 	movi	r2,4
    4ce8:	2025883a 	mov	r18,r4
    4cec:	b80d883a 	mov	r6,r23
    4cf0:	81001704 	addi	r4,r16,92
    4cf4:	000b883a 	mov	r5,zero
    4cf8:	80000015 	stw	zero,0(r16)
    4cfc:	80000115 	stw	zero,4(r16)
    4d00:	80000215 	stw	zero,8(r16)
    4d04:	8080030d 	sth	r2,12(r16)
    4d08:	80001915 	stw	zero,100(r16)
    4d0c:	8000038d 	sth	zero,14(r16)
    4d10:	80000415 	stw	zero,16(r16)
    4d14:	80000515 	stw	zero,20(r16)
    4d18:	80000615 	stw	zero,24(r16)
    4d1c:	00062ac0 	call	62ac <memset>
    4d20:	05800034 	movhi	r22,0
    4d24:	94400217 	ldw	r17,8(r18)
    4d28:	05400034 	movhi	r21,0
    4d2c:	05000034 	movhi	r20,0
    4d30:	04c00034 	movhi	r19,0
    4d34:	b59d2604 	addi	r22,r22,29848
    4d38:	ad5d3d04 	addi	r21,r21,29940
    4d3c:	a51d5c04 	addi	r20,r20,30064
    4d40:	9cdd7304 	addi	r19,r19,30156
    4d44:	85800815 	stw	r22,32(r16)
    4d48:	85400915 	stw	r21,36(r16)
    4d4c:	85000a15 	stw	r20,40(r16)
    4d50:	84c00b15 	stw	r19,44(r16)
    4d54:	84000715 	stw	r16,28(r16)
    4d58:	00800284 	movi	r2,10
    4d5c:	8880030d 	sth	r2,12(r17)
    4d60:	00800044 	movi	r2,1
    4d64:	b80d883a 	mov	r6,r23
    4d68:	89001704 	addi	r4,r17,92
    4d6c:	000b883a 	mov	r5,zero
    4d70:	88000015 	stw	zero,0(r17)
    4d74:	88000115 	stw	zero,4(r17)
    4d78:	88000215 	stw	zero,8(r17)
    4d7c:	88001915 	stw	zero,100(r17)
    4d80:	8880038d 	sth	r2,14(r17)
    4d84:	88000415 	stw	zero,16(r17)
    4d88:	88000515 	stw	zero,20(r17)
    4d8c:	88000615 	stw	zero,24(r17)
    4d90:	00062ac0 	call	62ac <memset>
    4d94:	94000317 	ldw	r16,12(r18)
    4d98:	00800484 	movi	r2,18
    4d9c:	8c400715 	stw	r17,28(r17)
    4da0:	8d800815 	stw	r22,32(r17)
    4da4:	8d400915 	stw	r21,36(r17)
    4da8:	8d000a15 	stw	r20,40(r17)
    4dac:	8cc00b15 	stw	r19,44(r17)
    4db0:	8080030d 	sth	r2,12(r16)
    4db4:	00800084 	movi	r2,2
    4db8:	80000015 	stw	zero,0(r16)
    4dbc:	80000115 	stw	zero,4(r16)
    4dc0:	80000215 	stw	zero,8(r16)
    4dc4:	80001915 	stw	zero,100(r16)
    4dc8:	8080038d 	sth	r2,14(r16)
    4dcc:	80000415 	stw	zero,16(r16)
    4dd0:	80000515 	stw	zero,20(r16)
    4dd4:	80000615 	stw	zero,24(r16)
    4dd8:	b80d883a 	mov	r6,r23
    4ddc:	000b883a 	mov	r5,zero
    4de0:	81001704 	addi	r4,r16,92
    4de4:	00062ac0 	call	62ac <memset>
    4de8:	00800044 	movi	r2,1
    4dec:	84000715 	stw	r16,28(r16)
    4df0:	85800815 	stw	r22,32(r16)
    4df4:	85400915 	stw	r21,36(r16)
    4df8:	85000a15 	stw	r20,40(r16)
    4dfc:	84c00b15 	stw	r19,44(r16)
    4e00:	90800e15 	stw	r2,56(r18)
    4e04:	dfc00817 	ldw	ra,32(sp)
    4e08:	ddc00717 	ldw	r23,28(sp)
    4e0c:	dd800617 	ldw	r22,24(sp)
    4e10:	dd400517 	ldw	r21,20(sp)
    4e14:	dd000417 	ldw	r20,16(sp)
    4e18:	dcc00317 	ldw	r19,12(sp)
    4e1c:	dc800217 	ldw	r18,8(sp)
    4e20:	dc400117 	ldw	r17,4(sp)
    4e24:	dc000017 	ldw	r16,0(sp)
    4e28:	dec00904 	addi	sp,sp,36
    4e2c:	f800283a 	ret

00004e30 <__fp_lock>:
    4e30:	0005883a 	mov	r2,zero
    4e34:	f800283a 	ret

00004e38 <__sfmoreglue>:
    4e38:	defffc04 	addi	sp,sp,-16
    4e3c:	dc400115 	stw	r17,4(sp)
    4e40:	2c7fffc4 	addi	r17,r5,-1
    4e44:	8c401a24 	muli	r17,r17,104
    4e48:	dc800215 	stw	r18,8(sp)
    4e4c:	2825883a 	mov	r18,r5
    4e50:	89401d04 	addi	r5,r17,116
    4e54:	dc000015 	stw	r16,0(sp)
    4e58:	dfc00315 	stw	ra,12(sp)
    4e5c:	00058740 	call	5874 <_malloc_r>
    4e60:	1021883a 	mov	r16,r2
    4e64:	10000726 	beq	r2,zero,4e84 <__sfmoreglue+0x4c>
    4e68:	11000304 	addi	r4,r2,12
    4e6c:	10000015 	stw	zero,0(r2)
    4e70:	14800115 	stw	r18,4(r2)
    4e74:	11000215 	stw	r4,8(r2)
    4e78:	89801a04 	addi	r6,r17,104
    4e7c:	000b883a 	mov	r5,zero
    4e80:	00062ac0 	call	62ac <memset>
    4e84:	8005883a 	mov	r2,r16
    4e88:	dfc00317 	ldw	ra,12(sp)
    4e8c:	dc800217 	ldw	r18,8(sp)
    4e90:	dc400117 	ldw	r17,4(sp)
    4e94:	dc000017 	ldw	r16,0(sp)
    4e98:	dec00404 	addi	sp,sp,16
    4e9c:	f800283a 	ret

00004ea0 <__sfp>:
    4ea0:	defffb04 	addi	sp,sp,-20
    4ea4:	dc000015 	stw	r16,0(sp)
    4ea8:	04000074 	movhi	r16,1
    4eac:	8407aa04 	addi	r16,r16,7848
    4eb0:	dcc00315 	stw	r19,12(sp)
    4eb4:	2027883a 	mov	r19,r4
    4eb8:	81000017 	ldw	r4,0(r16)
    4ebc:	dfc00415 	stw	ra,16(sp)
    4ec0:	dc800215 	stw	r18,8(sp)
    4ec4:	20800e17 	ldw	r2,56(r4)
    4ec8:	dc400115 	stw	r17,4(sp)
    4ecc:	1000021e 	bne	r2,zero,4ed8 <__sfp+0x38>
    4ed0:	0004c940 	call	4c94 <__sinit.part.1>
    4ed4:	81000017 	ldw	r4,0(r16)
    4ed8:	2480b804 	addi	r18,r4,736
    4edc:	047fffc4 	movi	r17,-1
    4ee0:	91000117 	ldw	r4,4(r18)
    4ee4:	94000217 	ldw	r16,8(r18)
    4ee8:	213fffc4 	addi	r4,r4,-1
    4eec:	20000a16 	blt	r4,zero,4f18 <__sfp+0x78>
    4ef0:	8080030f 	ldh	r2,12(r16)
    4ef4:	10000c26 	beq	r2,zero,4f28 <__sfp+0x88>
    4ef8:	80c01d04 	addi	r3,r16,116
    4efc:	00000206 	br	4f08 <__sfp+0x68>
    4f00:	18bfe60f 	ldh	r2,-104(r3)
    4f04:	10000826 	beq	r2,zero,4f28 <__sfp+0x88>
    4f08:	213fffc4 	addi	r4,r4,-1
    4f0c:	1c3ffd04 	addi	r16,r3,-12
    4f10:	18c01a04 	addi	r3,r3,104
    4f14:	247ffa1e 	bne	r4,r17,4f00 <__ram_exceptions_end+0xfbfe4cac>
    4f18:	90800017 	ldw	r2,0(r18)
    4f1c:	10001d26 	beq	r2,zero,4f94 <__sfp+0xf4>
    4f20:	1025883a 	mov	r18,r2
    4f24:	003fee06 	br	4ee0 <__ram_exceptions_end+0xfbfe4c8c>
    4f28:	00bfffc4 	movi	r2,-1
    4f2c:	8080038d 	sth	r2,14(r16)
    4f30:	00800044 	movi	r2,1
    4f34:	8080030d 	sth	r2,12(r16)
    4f38:	80001915 	stw	zero,100(r16)
    4f3c:	80000015 	stw	zero,0(r16)
    4f40:	80000215 	stw	zero,8(r16)
    4f44:	80000115 	stw	zero,4(r16)
    4f48:	80000415 	stw	zero,16(r16)
    4f4c:	80000515 	stw	zero,20(r16)
    4f50:	80000615 	stw	zero,24(r16)
    4f54:	01800204 	movi	r6,8
    4f58:	000b883a 	mov	r5,zero
    4f5c:	81001704 	addi	r4,r16,92
    4f60:	00062ac0 	call	62ac <memset>
    4f64:	8005883a 	mov	r2,r16
    4f68:	80000c15 	stw	zero,48(r16)
    4f6c:	80000d15 	stw	zero,52(r16)
    4f70:	80001115 	stw	zero,68(r16)
    4f74:	80001215 	stw	zero,72(r16)
    4f78:	dfc00417 	ldw	ra,16(sp)
    4f7c:	dcc00317 	ldw	r19,12(sp)
    4f80:	dc800217 	ldw	r18,8(sp)
    4f84:	dc400117 	ldw	r17,4(sp)
    4f88:	dc000017 	ldw	r16,0(sp)
    4f8c:	dec00504 	addi	sp,sp,20
    4f90:	f800283a 	ret
    4f94:	01400104 	movi	r5,4
    4f98:	9809883a 	mov	r4,r19
    4f9c:	0004e380 	call	4e38 <__sfmoreglue>
    4fa0:	90800015 	stw	r2,0(r18)
    4fa4:	103fde1e 	bne	r2,zero,4f20 <__ram_exceptions_end+0xfbfe4ccc>
    4fa8:	00800304 	movi	r2,12
    4fac:	98800015 	stw	r2,0(r19)
    4fb0:	0005883a 	mov	r2,zero
    4fb4:	003ff006 	br	4f78 <__ram_exceptions_end+0xfbfe4d24>

00004fb8 <_cleanup>:
    4fb8:	00800074 	movhi	r2,1
    4fbc:	1087aa04 	addi	r2,r2,7848
    4fc0:	11000017 	ldw	r4,0(r2)
    4fc4:	01400074 	movhi	r5,1
    4fc8:	2963c204 	addi	r5,r5,-28920
    4fcc:	00055181 	jmpi	5518 <_fwalk_reent>

00004fd0 <__sinit>:
    4fd0:	20800e17 	ldw	r2,56(r4)
    4fd4:	10000126 	beq	r2,zero,4fdc <__sinit+0xc>
    4fd8:	f800283a 	ret
    4fdc:	0004c941 	jmpi	4c94 <__sinit.part.1>

00004fe0 <__sfp_lock_acquire>:
    4fe0:	f800283a 	ret

00004fe4 <__sfp_lock_release>:
    4fe4:	f800283a 	ret

00004fe8 <__sinit_lock_acquire>:
    4fe8:	f800283a 	ret

00004fec <__sinit_lock_release>:
    4fec:	f800283a 	ret

00004ff0 <__fp_lock_all>:
    4ff0:	00800074 	movhi	r2,1
    4ff4:	1087ab04 	addi	r2,r2,7852
    4ff8:	11000017 	ldw	r4,0(r2)
    4ffc:	01400034 	movhi	r5,0
    5000:	29538c04 	addi	r5,r5,20016
    5004:	00054541 	jmpi	5454 <_fwalk>

00005008 <__fp_unlock_all>:
    5008:	00800074 	movhi	r2,1
    500c:	1087ab04 	addi	r2,r2,7852
    5010:	11000017 	ldw	r4,0(r2)
    5014:	01400034 	movhi	r5,0
    5018:	29532004 	addi	r5,r5,19584
    501c:	00054541 	jmpi	5454 <_fwalk>

00005020 <_malloc_trim_r>:
    5020:	defffb04 	addi	sp,sp,-20
    5024:	dcc00315 	stw	r19,12(sp)
    5028:	04c00074 	movhi	r19,1
    502c:	dc800215 	stw	r18,8(sp)
    5030:	dc400115 	stw	r17,4(sp)
    5034:	dc000015 	stw	r16,0(sp)
    5038:	dfc00415 	stw	ra,16(sp)
    503c:	2821883a 	mov	r16,r5
    5040:	9cc22604 	addi	r19,r19,2200
    5044:	2025883a 	mov	r18,r4
    5048:	000db740 	call	db74 <__malloc_lock>
    504c:	98800217 	ldw	r2,8(r19)
    5050:	14400117 	ldw	r17,4(r2)
    5054:	00bfff04 	movi	r2,-4
    5058:	88a2703a 	and	r17,r17,r2
    505c:	8c21c83a 	sub	r16,r17,r16
    5060:	8403fbc4 	addi	r16,r16,4079
    5064:	8020d33a 	srli	r16,r16,12
    5068:	0083ffc4 	movi	r2,4095
    506c:	843fffc4 	addi	r16,r16,-1
    5070:	8020933a 	slli	r16,r16,12
    5074:	1400060e 	bge	r2,r16,5090 <_malloc_trim_r+0x70>
    5078:	000b883a 	mov	r5,zero
    507c:	9009883a 	mov	r4,r18
    5080:	00074440 	call	7444 <_sbrk_r>
    5084:	98c00217 	ldw	r3,8(r19)
    5088:	1c47883a 	add	r3,r3,r17
    508c:	10c00a26 	beq	r2,r3,50b8 <_malloc_trim_r+0x98>
    5090:	9009883a 	mov	r4,r18
    5094:	000db980 	call	db98 <__malloc_unlock>
    5098:	0005883a 	mov	r2,zero
    509c:	dfc00417 	ldw	ra,16(sp)
    50a0:	dcc00317 	ldw	r19,12(sp)
    50a4:	dc800217 	ldw	r18,8(sp)
    50a8:	dc400117 	ldw	r17,4(sp)
    50ac:	dc000017 	ldw	r16,0(sp)
    50b0:	dec00504 	addi	sp,sp,20
    50b4:	f800283a 	ret
    50b8:	040bc83a 	sub	r5,zero,r16
    50bc:	9009883a 	mov	r4,r18
    50c0:	00074440 	call	7444 <_sbrk_r>
    50c4:	00ffffc4 	movi	r3,-1
    50c8:	10c00d26 	beq	r2,r3,5100 <_malloc_trim_r+0xe0>
    50cc:	00c00074 	movhi	r3,1
    50d0:	18ce8604 	addi	r3,r3,14872
    50d4:	18800017 	ldw	r2,0(r3)
    50d8:	99000217 	ldw	r4,8(r19)
    50dc:	8c23c83a 	sub	r17,r17,r16
    50e0:	8c400054 	ori	r17,r17,1
    50e4:	1421c83a 	sub	r16,r2,r16
    50e8:	24400115 	stw	r17,4(r4)
    50ec:	9009883a 	mov	r4,r18
    50f0:	1c000015 	stw	r16,0(r3)
    50f4:	000db980 	call	db98 <__malloc_unlock>
    50f8:	00800044 	movi	r2,1
    50fc:	003fe706 	br	509c <__ram_exceptions_end+0xfbfe4e48>
    5100:	000b883a 	mov	r5,zero
    5104:	9009883a 	mov	r4,r18
    5108:	00074440 	call	7444 <_sbrk_r>
    510c:	99000217 	ldw	r4,8(r19)
    5110:	014003c4 	movi	r5,15
    5114:	1107c83a 	sub	r3,r2,r4
    5118:	28ffdd0e 	bge	r5,r3,5090 <__ram_exceptions_end+0xfbfe4e3c>
    511c:	01400074 	movhi	r5,1
    5120:	2947ad04 	addi	r5,r5,7860
    5124:	29400017 	ldw	r5,0(r5)
    5128:	18c00054 	ori	r3,r3,1
    512c:	20c00115 	stw	r3,4(r4)
    5130:	00c00074 	movhi	r3,1
    5134:	1145c83a 	sub	r2,r2,r5
    5138:	18ce8604 	addi	r3,r3,14872
    513c:	18800015 	stw	r2,0(r3)
    5140:	003fd306 	br	5090 <__ram_exceptions_end+0xfbfe4e3c>

00005144 <_free_r>:
    5144:	28004126 	beq	r5,zero,524c <_free_r+0x108>
    5148:	defffd04 	addi	sp,sp,-12
    514c:	dc400115 	stw	r17,4(sp)
    5150:	dc000015 	stw	r16,0(sp)
    5154:	2023883a 	mov	r17,r4
    5158:	2821883a 	mov	r16,r5
    515c:	dfc00215 	stw	ra,8(sp)
    5160:	000db740 	call	db74 <__malloc_lock>
    5164:	81ffff17 	ldw	r7,-4(r16)
    5168:	00bfff84 	movi	r2,-2
    516c:	01000074 	movhi	r4,1
    5170:	81bffe04 	addi	r6,r16,-8
    5174:	3884703a 	and	r2,r7,r2
    5178:	21022604 	addi	r4,r4,2200
    517c:	308b883a 	add	r5,r6,r2
    5180:	2a400117 	ldw	r9,4(r5)
    5184:	22000217 	ldw	r8,8(r4)
    5188:	00ffff04 	movi	r3,-4
    518c:	48c6703a 	and	r3,r9,r3
    5190:	2a005726 	beq	r5,r8,52f0 <_free_r+0x1ac>
    5194:	28c00115 	stw	r3,4(r5)
    5198:	39c0004c 	andi	r7,r7,1
    519c:	3800091e 	bne	r7,zero,51c4 <_free_r+0x80>
    51a0:	823ffe17 	ldw	r8,-8(r16)
    51a4:	22400204 	addi	r9,r4,8
    51a8:	320dc83a 	sub	r6,r6,r8
    51ac:	31c00217 	ldw	r7,8(r6)
    51b0:	1205883a 	add	r2,r2,r8
    51b4:	3a406526 	beq	r7,r9,534c <_free_r+0x208>
    51b8:	32000317 	ldw	r8,12(r6)
    51bc:	3a000315 	stw	r8,12(r7)
    51c0:	41c00215 	stw	r7,8(r8)
    51c4:	28cf883a 	add	r7,r5,r3
    51c8:	39c00117 	ldw	r7,4(r7)
    51cc:	39c0004c 	andi	r7,r7,1
    51d0:	38003a26 	beq	r7,zero,52bc <_free_r+0x178>
    51d4:	10c00054 	ori	r3,r2,1
    51d8:	30c00115 	stw	r3,4(r6)
    51dc:	3087883a 	add	r3,r6,r2
    51e0:	18800015 	stw	r2,0(r3)
    51e4:	00c07fc4 	movi	r3,511
    51e8:	18801936 	bltu	r3,r2,5250 <_free_r+0x10c>
    51ec:	1004d0fa 	srli	r2,r2,3
    51f0:	01c00044 	movi	r7,1
    51f4:	21400117 	ldw	r5,4(r4)
    51f8:	10c00044 	addi	r3,r2,1
    51fc:	18c7883a 	add	r3,r3,r3
    5200:	1005d0ba 	srai	r2,r2,2
    5204:	18c7883a 	add	r3,r3,r3
    5208:	18c7883a 	add	r3,r3,r3
    520c:	1907883a 	add	r3,r3,r4
    5210:	3884983a 	sll	r2,r7,r2
    5214:	19c00017 	ldw	r7,0(r3)
    5218:	1a3ffe04 	addi	r8,r3,-8
    521c:	1144b03a 	or	r2,r2,r5
    5220:	32000315 	stw	r8,12(r6)
    5224:	31c00215 	stw	r7,8(r6)
    5228:	20800115 	stw	r2,4(r4)
    522c:	19800015 	stw	r6,0(r3)
    5230:	39800315 	stw	r6,12(r7)
    5234:	8809883a 	mov	r4,r17
    5238:	dfc00217 	ldw	ra,8(sp)
    523c:	dc400117 	ldw	r17,4(sp)
    5240:	dc000017 	ldw	r16,0(sp)
    5244:	dec00304 	addi	sp,sp,12
    5248:	000db981 	jmpi	db98 <__malloc_unlock>
    524c:	f800283a 	ret
    5250:	100ad27a 	srli	r5,r2,9
    5254:	00c00104 	movi	r3,4
    5258:	19404a36 	bltu	r3,r5,5384 <_free_r+0x240>
    525c:	100ad1ba 	srli	r5,r2,6
    5260:	28c00e44 	addi	r3,r5,57
    5264:	18c7883a 	add	r3,r3,r3
    5268:	29400e04 	addi	r5,r5,56
    526c:	18c7883a 	add	r3,r3,r3
    5270:	18c7883a 	add	r3,r3,r3
    5274:	1909883a 	add	r4,r3,r4
    5278:	20c00017 	ldw	r3,0(r4)
    527c:	01c00074 	movhi	r7,1
    5280:	213ffe04 	addi	r4,r4,-8
    5284:	39c22604 	addi	r7,r7,2200
    5288:	20c04426 	beq	r4,r3,539c <_free_r+0x258>
    528c:	01ffff04 	movi	r7,-4
    5290:	19400117 	ldw	r5,4(r3)
    5294:	29ca703a 	and	r5,r5,r7
    5298:	1140022e 	bgeu	r2,r5,52a4 <_free_r+0x160>
    529c:	18c00217 	ldw	r3,8(r3)
    52a0:	20fffb1e 	bne	r4,r3,5290 <__ram_exceptions_end+0xfbfe503c>
    52a4:	19000317 	ldw	r4,12(r3)
    52a8:	31000315 	stw	r4,12(r6)
    52ac:	30c00215 	stw	r3,8(r6)
    52b0:	21800215 	stw	r6,8(r4)
    52b4:	19800315 	stw	r6,12(r3)
    52b8:	003fde06 	br	5234 <__ram_exceptions_end+0xfbfe4fe0>
    52bc:	29c00217 	ldw	r7,8(r5)
    52c0:	10c5883a 	add	r2,r2,r3
    52c4:	00c00074 	movhi	r3,1
    52c8:	18c22804 	addi	r3,r3,2208
    52cc:	38c03b26 	beq	r7,r3,53bc <_free_r+0x278>
    52d0:	2a000317 	ldw	r8,12(r5)
    52d4:	11400054 	ori	r5,r2,1
    52d8:	3087883a 	add	r3,r6,r2
    52dc:	3a000315 	stw	r8,12(r7)
    52e0:	41c00215 	stw	r7,8(r8)
    52e4:	31400115 	stw	r5,4(r6)
    52e8:	18800015 	stw	r2,0(r3)
    52ec:	003fbd06 	br	51e4 <__ram_exceptions_end+0xfbfe4f90>
    52f0:	39c0004c 	andi	r7,r7,1
    52f4:	10c5883a 	add	r2,r2,r3
    52f8:	3800071e 	bne	r7,zero,5318 <_free_r+0x1d4>
    52fc:	81fffe17 	ldw	r7,-8(r16)
    5300:	31cdc83a 	sub	r6,r6,r7
    5304:	30c00317 	ldw	r3,12(r6)
    5308:	31400217 	ldw	r5,8(r6)
    530c:	11c5883a 	add	r2,r2,r7
    5310:	28c00315 	stw	r3,12(r5)
    5314:	19400215 	stw	r5,8(r3)
    5318:	10c00054 	ori	r3,r2,1
    531c:	30c00115 	stw	r3,4(r6)
    5320:	00c00074 	movhi	r3,1
    5324:	18c7ae04 	addi	r3,r3,7864
    5328:	18c00017 	ldw	r3,0(r3)
    532c:	21800215 	stw	r6,8(r4)
    5330:	10ffc036 	bltu	r2,r3,5234 <__ram_exceptions_end+0xfbfe4fe0>
    5334:	00800074 	movhi	r2,1
    5338:	108e7d04 	addi	r2,r2,14836
    533c:	11400017 	ldw	r5,0(r2)
    5340:	8809883a 	mov	r4,r17
    5344:	00050200 	call	5020 <_malloc_trim_r>
    5348:	003fba06 	br	5234 <__ram_exceptions_end+0xfbfe4fe0>
    534c:	28c9883a 	add	r4,r5,r3
    5350:	21000117 	ldw	r4,4(r4)
    5354:	2100004c 	andi	r4,r4,1
    5358:	2000391e 	bne	r4,zero,5440 <_free_r+0x2fc>
    535c:	29c00217 	ldw	r7,8(r5)
    5360:	29000317 	ldw	r4,12(r5)
    5364:	1885883a 	add	r2,r3,r2
    5368:	10c00054 	ori	r3,r2,1
    536c:	39000315 	stw	r4,12(r7)
    5370:	21c00215 	stw	r7,8(r4)
    5374:	30c00115 	stw	r3,4(r6)
    5378:	308d883a 	add	r6,r6,r2
    537c:	30800015 	stw	r2,0(r6)
    5380:	003fac06 	br	5234 <__ram_exceptions_end+0xfbfe4fe0>
    5384:	00c00504 	movi	r3,20
    5388:	19401536 	bltu	r3,r5,53e0 <_free_r+0x29c>
    538c:	28c01704 	addi	r3,r5,92
    5390:	18c7883a 	add	r3,r3,r3
    5394:	294016c4 	addi	r5,r5,91
    5398:	003fb406 	br	526c <__ram_exceptions_end+0xfbfe5018>
    539c:	280bd0ba 	srai	r5,r5,2
    53a0:	00c00044 	movi	r3,1
    53a4:	38800117 	ldw	r2,4(r7)
    53a8:	194a983a 	sll	r5,r3,r5
    53ac:	2007883a 	mov	r3,r4
    53b0:	2884b03a 	or	r2,r5,r2
    53b4:	38800115 	stw	r2,4(r7)
    53b8:	003fbb06 	br	52a8 <__ram_exceptions_end+0xfbfe5054>
    53bc:	21800515 	stw	r6,20(r4)
    53c0:	21800415 	stw	r6,16(r4)
    53c4:	10c00054 	ori	r3,r2,1
    53c8:	31c00315 	stw	r7,12(r6)
    53cc:	31c00215 	stw	r7,8(r6)
    53d0:	30c00115 	stw	r3,4(r6)
    53d4:	308d883a 	add	r6,r6,r2
    53d8:	30800015 	stw	r2,0(r6)
    53dc:	003f9506 	br	5234 <__ram_exceptions_end+0xfbfe4fe0>
    53e0:	00c01504 	movi	r3,84
    53e4:	19400536 	bltu	r3,r5,53fc <_free_r+0x2b8>
    53e8:	100ad33a 	srli	r5,r2,12
    53ec:	28c01bc4 	addi	r3,r5,111
    53f0:	18c7883a 	add	r3,r3,r3
    53f4:	29401b84 	addi	r5,r5,110
    53f8:	003f9c06 	br	526c <__ram_exceptions_end+0xfbfe5018>
    53fc:	00c05504 	movi	r3,340
    5400:	19400536 	bltu	r3,r5,5418 <_free_r+0x2d4>
    5404:	100ad3fa 	srli	r5,r2,15
    5408:	28c01e04 	addi	r3,r5,120
    540c:	18c7883a 	add	r3,r3,r3
    5410:	29401dc4 	addi	r5,r5,119
    5414:	003f9506 	br	526c <__ram_exceptions_end+0xfbfe5018>
    5418:	00c15504 	movi	r3,1364
    541c:	19400536 	bltu	r3,r5,5434 <_free_r+0x2f0>
    5420:	100ad4ba 	srli	r5,r2,18
    5424:	28c01f44 	addi	r3,r5,125
    5428:	18c7883a 	add	r3,r3,r3
    542c:	29401f04 	addi	r5,r5,124
    5430:	003f8e06 	br	526c <__ram_exceptions_end+0xfbfe5018>
    5434:	00c03f84 	movi	r3,254
    5438:	01401f84 	movi	r5,126
    543c:	003f8b06 	br	526c <__ram_exceptions_end+0xfbfe5018>
    5440:	10c00054 	ori	r3,r2,1
    5444:	30c00115 	stw	r3,4(r6)
    5448:	308d883a 	add	r6,r6,r2
    544c:	30800015 	stw	r2,0(r6)
    5450:	003f7806 	br	5234 <__ram_exceptions_end+0xfbfe4fe0>

00005454 <_fwalk>:
    5454:	defff704 	addi	sp,sp,-36
    5458:	dd000415 	stw	r20,16(sp)
    545c:	dfc00815 	stw	ra,32(sp)
    5460:	ddc00715 	stw	r23,28(sp)
    5464:	dd800615 	stw	r22,24(sp)
    5468:	dd400515 	stw	r21,20(sp)
    546c:	dcc00315 	stw	r19,12(sp)
    5470:	dc800215 	stw	r18,8(sp)
    5474:	dc400115 	stw	r17,4(sp)
    5478:	dc000015 	stw	r16,0(sp)
    547c:	2500b804 	addi	r20,r4,736
    5480:	a0002326 	beq	r20,zero,5510 <_fwalk+0xbc>
    5484:	282b883a 	mov	r21,r5
    5488:	002f883a 	mov	r23,zero
    548c:	05800044 	movi	r22,1
    5490:	04ffffc4 	movi	r19,-1
    5494:	a4400117 	ldw	r17,4(r20)
    5498:	a4800217 	ldw	r18,8(r20)
    549c:	8c7fffc4 	addi	r17,r17,-1
    54a0:	88000d16 	blt	r17,zero,54d8 <_fwalk+0x84>
    54a4:	94000304 	addi	r16,r18,12
    54a8:	94800384 	addi	r18,r18,14
    54ac:	8080000b 	ldhu	r2,0(r16)
    54b0:	8c7fffc4 	addi	r17,r17,-1
    54b4:	813ffd04 	addi	r4,r16,-12
    54b8:	b080042e 	bgeu	r22,r2,54cc <_fwalk+0x78>
    54bc:	9080000f 	ldh	r2,0(r18)
    54c0:	14c00226 	beq	r2,r19,54cc <_fwalk+0x78>
    54c4:	a83ee83a 	callr	r21
    54c8:	b8aeb03a 	or	r23,r23,r2
    54cc:	84001a04 	addi	r16,r16,104
    54d0:	94801a04 	addi	r18,r18,104
    54d4:	8cfff51e 	bne	r17,r19,54ac <__ram_exceptions_end+0xfbfe5258>
    54d8:	a5000017 	ldw	r20,0(r20)
    54dc:	a03fed1e 	bne	r20,zero,5494 <__ram_exceptions_end+0xfbfe5240>
    54e0:	b805883a 	mov	r2,r23
    54e4:	dfc00817 	ldw	ra,32(sp)
    54e8:	ddc00717 	ldw	r23,28(sp)
    54ec:	dd800617 	ldw	r22,24(sp)
    54f0:	dd400517 	ldw	r21,20(sp)
    54f4:	dd000417 	ldw	r20,16(sp)
    54f8:	dcc00317 	ldw	r19,12(sp)
    54fc:	dc800217 	ldw	r18,8(sp)
    5500:	dc400117 	ldw	r17,4(sp)
    5504:	dc000017 	ldw	r16,0(sp)
    5508:	dec00904 	addi	sp,sp,36
    550c:	f800283a 	ret
    5510:	002f883a 	mov	r23,zero
    5514:	003ff206 	br	54e0 <__ram_exceptions_end+0xfbfe528c>

00005518 <_fwalk_reent>:
    5518:	defff704 	addi	sp,sp,-36
    551c:	dd000415 	stw	r20,16(sp)
    5520:	dfc00815 	stw	ra,32(sp)
    5524:	ddc00715 	stw	r23,28(sp)
    5528:	dd800615 	stw	r22,24(sp)
    552c:	dd400515 	stw	r21,20(sp)
    5530:	dcc00315 	stw	r19,12(sp)
    5534:	dc800215 	stw	r18,8(sp)
    5538:	dc400115 	stw	r17,4(sp)
    553c:	dc000015 	stw	r16,0(sp)
    5540:	2500b804 	addi	r20,r4,736
    5544:	a0002326 	beq	r20,zero,55d4 <_fwalk_reent+0xbc>
    5548:	282b883a 	mov	r21,r5
    554c:	2027883a 	mov	r19,r4
    5550:	002f883a 	mov	r23,zero
    5554:	05800044 	movi	r22,1
    5558:	04bfffc4 	movi	r18,-1
    555c:	a4400117 	ldw	r17,4(r20)
    5560:	a4000217 	ldw	r16,8(r20)
    5564:	8c7fffc4 	addi	r17,r17,-1
    5568:	88000c16 	blt	r17,zero,559c <_fwalk_reent+0x84>
    556c:	84000304 	addi	r16,r16,12
    5570:	8080000b 	ldhu	r2,0(r16)
    5574:	8c7fffc4 	addi	r17,r17,-1
    5578:	817ffd04 	addi	r5,r16,-12
    557c:	b080052e 	bgeu	r22,r2,5594 <_fwalk_reent+0x7c>
    5580:	8080008f 	ldh	r2,2(r16)
    5584:	9809883a 	mov	r4,r19
    5588:	14800226 	beq	r2,r18,5594 <_fwalk_reent+0x7c>
    558c:	a83ee83a 	callr	r21
    5590:	b8aeb03a 	or	r23,r23,r2
    5594:	84001a04 	addi	r16,r16,104
    5598:	8cbff51e 	bne	r17,r18,5570 <__ram_exceptions_end+0xfbfe531c>
    559c:	a5000017 	ldw	r20,0(r20)
    55a0:	a03fee1e 	bne	r20,zero,555c <__ram_exceptions_end+0xfbfe5308>
    55a4:	b805883a 	mov	r2,r23
    55a8:	dfc00817 	ldw	ra,32(sp)
    55ac:	ddc00717 	ldw	r23,28(sp)
    55b0:	dd800617 	ldw	r22,24(sp)
    55b4:	dd400517 	ldw	r21,20(sp)
    55b8:	dd000417 	ldw	r20,16(sp)
    55bc:	dcc00317 	ldw	r19,12(sp)
    55c0:	dc800217 	ldw	r18,8(sp)
    55c4:	dc400117 	ldw	r17,4(sp)
    55c8:	dc000017 	ldw	r16,0(sp)
    55cc:	dec00904 	addi	sp,sp,36
    55d0:	f800283a 	ret
    55d4:	002f883a 	mov	r23,zero
    55d8:	003ff206 	br	55a4 <__ram_exceptions_end+0xfbfe5350>

000055dc <_setlocale_r>:
    55dc:	30001b26 	beq	r6,zero,564c <_setlocale_r+0x70>
    55e0:	01400074 	movhi	r5,1
    55e4:	defffe04 	addi	sp,sp,-8
    55e8:	29405e04 	addi	r5,r5,376
    55ec:	3009883a 	mov	r4,r6
    55f0:	dc000015 	stw	r16,0(sp)
    55f4:	dfc00115 	stw	ra,4(sp)
    55f8:	3021883a 	mov	r16,r6
    55fc:	00075d40 	call	75d4 <strcmp>
    5600:	1000061e 	bne	r2,zero,561c <_setlocale_r+0x40>
    5604:	00800074 	movhi	r2,1
    5608:	10805d04 	addi	r2,r2,372
    560c:	dfc00117 	ldw	ra,4(sp)
    5610:	dc000017 	ldw	r16,0(sp)
    5614:	dec00204 	addi	sp,sp,8
    5618:	f800283a 	ret
    561c:	01400074 	movhi	r5,1
    5620:	29405d04 	addi	r5,r5,372
    5624:	8009883a 	mov	r4,r16
    5628:	00075d40 	call	75d4 <strcmp>
    562c:	103ff526 	beq	r2,zero,5604 <__ram_exceptions_end+0xfbfe53b0>
    5630:	01400074 	movhi	r5,1
    5634:	29404804 	addi	r5,r5,288
    5638:	8009883a 	mov	r4,r16
    563c:	00075d40 	call	75d4 <strcmp>
    5640:	103ff026 	beq	r2,zero,5604 <__ram_exceptions_end+0xfbfe53b0>
    5644:	0005883a 	mov	r2,zero
    5648:	003ff006 	br	560c <__ram_exceptions_end+0xfbfe53b8>
    564c:	00800074 	movhi	r2,1
    5650:	10805d04 	addi	r2,r2,372
    5654:	f800283a 	ret

00005658 <__locale_charset>:
    5658:	00800074 	movhi	r2,1
    565c:	10821004 	addi	r2,r2,2112
    5660:	f800283a 	ret

00005664 <__locale_mb_cur_max>:
    5664:	00800074 	movhi	r2,1
    5668:	1087ac04 	addi	r2,r2,7856
    566c:	10800017 	ldw	r2,0(r2)
    5670:	f800283a 	ret

00005674 <__locale_msgcharset>:
    5674:	00800074 	movhi	r2,1
    5678:	10820804 	addi	r2,r2,2080
    567c:	f800283a 	ret

00005680 <__locale_cjk_lang>:
    5680:	0005883a 	mov	r2,zero
    5684:	f800283a 	ret

00005688 <_localeconv_r>:
    5688:	00800074 	movhi	r2,1
    568c:	10821804 	addi	r2,r2,2144
    5690:	f800283a 	ret

00005694 <setlocale>:
    5694:	00800074 	movhi	r2,1
    5698:	1087ab04 	addi	r2,r2,7852
    569c:	280d883a 	mov	r6,r5
    56a0:	200b883a 	mov	r5,r4
    56a4:	11000017 	ldw	r4,0(r2)
    56a8:	00055dc1 	jmpi	55dc <_setlocale_r>

000056ac <localeconv>:
    56ac:	00800074 	movhi	r2,1
    56b0:	10821804 	addi	r2,r2,2144
    56b4:	f800283a 	ret

000056b8 <__smakebuf_r>:
    56b8:	2880030b 	ldhu	r2,12(r5)
    56bc:	10c0008c 	andi	r3,r2,2
    56c0:	1800411e 	bne	r3,zero,57c8 <__smakebuf_r+0x110>
    56c4:	deffec04 	addi	sp,sp,-80
    56c8:	dc000f15 	stw	r16,60(sp)
    56cc:	2821883a 	mov	r16,r5
    56d0:	2940038f 	ldh	r5,14(r5)
    56d4:	dc401015 	stw	r17,64(sp)
    56d8:	dfc01315 	stw	ra,76(sp)
    56dc:	dcc01215 	stw	r19,72(sp)
    56e0:	dc801115 	stw	r18,68(sp)
    56e4:	2023883a 	mov	r17,r4
    56e8:	28001c16 	blt	r5,zero,575c <__smakebuf_r+0xa4>
    56ec:	d80d883a 	mov	r6,sp
    56f0:	00092140 	call	9214 <_fstat_r>
    56f4:	10001816 	blt	r2,zero,5758 <__smakebuf_r+0xa0>
    56f8:	d8800117 	ldw	r2,4(sp)
    56fc:	00e00014 	movui	r3,32768
    5700:	10bc000c 	andi	r2,r2,61440
    5704:	14c80020 	cmpeqi	r19,r2,8192
    5708:	10c03726 	beq	r2,r3,57e8 <__smakebuf_r+0x130>
    570c:	80c0030b 	ldhu	r3,12(r16)
    5710:	18c20014 	ori	r3,r3,2048
    5714:	80c0030d 	sth	r3,12(r16)
    5718:	00c80004 	movi	r3,8192
    571c:	10c0521e 	bne	r2,r3,5868 <__smakebuf_r+0x1b0>
    5720:	8140038f 	ldh	r5,14(r16)
    5724:	8809883a 	mov	r4,r17
    5728:	000972c0 	call	972c <_isatty_r>
    572c:	10004c26 	beq	r2,zero,5860 <__smakebuf_r+0x1a8>
    5730:	8080030b 	ldhu	r2,12(r16)
    5734:	80c010c4 	addi	r3,r16,67
    5738:	80c00015 	stw	r3,0(r16)
    573c:	10800054 	ori	r2,r2,1
    5740:	8080030d 	sth	r2,12(r16)
    5744:	00800044 	movi	r2,1
    5748:	80c00415 	stw	r3,16(r16)
    574c:	80800515 	stw	r2,20(r16)
    5750:	04810004 	movi	r18,1024
    5754:	00000706 	br	5774 <__smakebuf_r+0xbc>
    5758:	8080030b 	ldhu	r2,12(r16)
    575c:	10c0200c 	andi	r3,r2,128
    5760:	18001f1e 	bne	r3,zero,57e0 <__smakebuf_r+0x128>
    5764:	04810004 	movi	r18,1024
    5768:	10820014 	ori	r2,r2,2048
    576c:	8080030d 	sth	r2,12(r16)
    5770:	0027883a 	mov	r19,zero
    5774:	900b883a 	mov	r5,r18
    5778:	8809883a 	mov	r4,r17
    577c:	00058740 	call	5874 <_malloc_r>
    5780:	10002c26 	beq	r2,zero,5834 <__smakebuf_r+0x17c>
    5784:	80c0030b 	ldhu	r3,12(r16)
    5788:	01000034 	movhi	r4,0
    578c:	21132204 	addi	r4,r4,19592
    5790:	89000f15 	stw	r4,60(r17)
    5794:	18c02014 	ori	r3,r3,128
    5798:	80c0030d 	sth	r3,12(r16)
    579c:	80800015 	stw	r2,0(r16)
    57a0:	80800415 	stw	r2,16(r16)
    57a4:	84800515 	stw	r18,20(r16)
    57a8:	98001a1e 	bne	r19,zero,5814 <__smakebuf_r+0x15c>
    57ac:	dfc01317 	ldw	ra,76(sp)
    57b0:	dcc01217 	ldw	r19,72(sp)
    57b4:	dc801117 	ldw	r18,68(sp)
    57b8:	dc401017 	ldw	r17,64(sp)
    57bc:	dc000f17 	ldw	r16,60(sp)
    57c0:	dec01404 	addi	sp,sp,80
    57c4:	f800283a 	ret
    57c8:	288010c4 	addi	r2,r5,67
    57cc:	28800015 	stw	r2,0(r5)
    57d0:	28800415 	stw	r2,16(r5)
    57d4:	00800044 	movi	r2,1
    57d8:	28800515 	stw	r2,20(r5)
    57dc:	f800283a 	ret
    57e0:	04801004 	movi	r18,64
    57e4:	003fe006 	br	5768 <__ram_exceptions_end+0xfbfe5514>
    57e8:	81000a17 	ldw	r4,40(r16)
    57ec:	00c00034 	movhi	r3,0
    57f0:	18dd5c04 	addi	r3,r3,30064
    57f4:	20ffc51e 	bne	r4,r3,570c <__ram_exceptions_end+0xfbfe54b8>
    57f8:	8080030b 	ldhu	r2,12(r16)
    57fc:	04810004 	movi	r18,1024
    5800:	84801315 	stw	r18,76(r16)
    5804:	1484b03a 	or	r2,r2,r18
    5808:	8080030d 	sth	r2,12(r16)
    580c:	0027883a 	mov	r19,zero
    5810:	003fd806 	br	5774 <__ram_exceptions_end+0xfbfe5520>
    5814:	8140038f 	ldh	r5,14(r16)
    5818:	8809883a 	mov	r4,r17
    581c:	000972c0 	call	972c <_isatty_r>
    5820:	103fe226 	beq	r2,zero,57ac <__ram_exceptions_end+0xfbfe5558>
    5824:	8080030b 	ldhu	r2,12(r16)
    5828:	10800054 	ori	r2,r2,1
    582c:	8080030d 	sth	r2,12(r16)
    5830:	003fde06 	br	57ac <__ram_exceptions_end+0xfbfe5558>
    5834:	8080030b 	ldhu	r2,12(r16)
    5838:	10c0800c 	andi	r3,r2,512
    583c:	183fdb1e 	bne	r3,zero,57ac <__ram_exceptions_end+0xfbfe5558>
    5840:	10800094 	ori	r2,r2,2
    5844:	80c010c4 	addi	r3,r16,67
    5848:	8080030d 	sth	r2,12(r16)
    584c:	00800044 	movi	r2,1
    5850:	80c00015 	stw	r3,0(r16)
    5854:	80c00415 	stw	r3,16(r16)
    5858:	80800515 	stw	r2,20(r16)
    585c:	003fd306 	br	57ac <__ram_exceptions_end+0xfbfe5558>
    5860:	04810004 	movi	r18,1024
    5864:	003fc306 	br	5774 <__ram_exceptions_end+0xfbfe5520>
    5868:	0027883a 	mov	r19,zero
    586c:	04810004 	movi	r18,1024
    5870:	003fc006 	br	5774 <__ram_exceptions_end+0xfbfe5520>

00005874 <_malloc_r>:
    5874:	defff504 	addi	sp,sp,-44
    5878:	dc800315 	stw	r18,12(sp)
    587c:	dfc00a15 	stw	ra,40(sp)
    5880:	df000915 	stw	fp,36(sp)
    5884:	ddc00815 	stw	r23,32(sp)
    5888:	dd800715 	stw	r22,28(sp)
    588c:	dd400615 	stw	r21,24(sp)
    5890:	dd000515 	stw	r20,20(sp)
    5894:	dcc00415 	stw	r19,16(sp)
    5898:	dc400215 	stw	r17,8(sp)
    589c:	dc000115 	stw	r16,4(sp)
    58a0:	288002c4 	addi	r2,r5,11
    58a4:	00c00584 	movi	r3,22
    58a8:	2025883a 	mov	r18,r4
    58ac:	18807f2e 	bgeu	r3,r2,5aac <_malloc_r+0x238>
    58b0:	047ffe04 	movi	r17,-8
    58b4:	1462703a 	and	r17,r2,r17
    58b8:	8800a316 	blt	r17,zero,5b48 <_malloc_r+0x2d4>
    58bc:	8940a236 	bltu	r17,r5,5b48 <_malloc_r+0x2d4>
    58c0:	000db740 	call	db74 <__malloc_lock>
    58c4:	00807dc4 	movi	r2,503
    58c8:	1441e92e 	bgeu	r2,r17,6070 <_malloc_r+0x7fc>
    58cc:	8804d27a 	srli	r2,r17,9
    58d0:	1000a126 	beq	r2,zero,5b58 <_malloc_r+0x2e4>
    58d4:	00c00104 	movi	r3,4
    58d8:	18811e36 	bltu	r3,r2,5d54 <_malloc_r+0x4e0>
    58dc:	8804d1ba 	srli	r2,r17,6
    58e0:	12000e44 	addi	r8,r2,57
    58e4:	11c00e04 	addi	r7,r2,56
    58e8:	4209883a 	add	r4,r8,r8
    58ec:	04c00074 	movhi	r19,1
    58f0:	2109883a 	add	r4,r4,r4
    58f4:	9cc22604 	addi	r19,r19,2200
    58f8:	2109883a 	add	r4,r4,r4
    58fc:	9909883a 	add	r4,r19,r4
    5900:	24000117 	ldw	r16,4(r4)
    5904:	213ffe04 	addi	r4,r4,-8
    5908:	24009726 	beq	r4,r16,5b68 <_malloc_r+0x2f4>
    590c:	80800117 	ldw	r2,4(r16)
    5910:	01bfff04 	movi	r6,-4
    5914:	014003c4 	movi	r5,15
    5918:	1184703a 	and	r2,r2,r6
    591c:	1447c83a 	sub	r3,r2,r17
    5920:	28c00716 	blt	r5,r3,5940 <_malloc_r+0xcc>
    5924:	1800920e 	bge	r3,zero,5b70 <_malloc_r+0x2fc>
    5928:	84000317 	ldw	r16,12(r16)
    592c:	24008e26 	beq	r4,r16,5b68 <_malloc_r+0x2f4>
    5930:	80800117 	ldw	r2,4(r16)
    5934:	1184703a 	and	r2,r2,r6
    5938:	1447c83a 	sub	r3,r2,r17
    593c:	28fff90e 	bge	r5,r3,5924 <__ram_exceptions_end+0xfbfe56d0>
    5940:	3809883a 	mov	r4,r7
    5944:	01800074 	movhi	r6,1
    5948:	9c000417 	ldw	r16,16(r19)
    594c:	31822604 	addi	r6,r6,2200
    5950:	32000204 	addi	r8,r6,8
    5954:	82013426 	beq	r16,r8,5e28 <_malloc_r+0x5b4>
    5958:	80c00117 	ldw	r3,4(r16)
    595c:	00bfff04 	movi	r2,-4
    5960:	188e703a 	and	r7,r3,r2
    5964:	3c45c83a 	sub	r2,r7,r17
    5968:	00c003c4 	movi	r3,15
    596c:	18811f16 	blt	r3,r2,5dec <_malloc_r+0x578>
    5970:	32000515 	stw	r8,20(r6)
    5974:	32000415 	stw	r8,16(r6)
    5978:	10007f0e 	bge	r2,zero,5b78 <_malloc_r+0x304>
    597c:	00807fc4 	movi	r2,511
    5980:	11c0fd36 	bltu	r2,r7,5d78 <_malloc_r+0x504>
    5984:	3806d0fa 	srli	r3,r7,3
    5988:	01c00044 	movi	r7,1
    598c:	30800117 	ldw	r2,4(r6)
    5990:	19400044 	addi	r5,r3,1
    5994:	294b883a 	add	r5,r5,r5
    5998:	1807d0ba 	srai	r3,r3,2
    599c:	294b883a 	add	r5,r5,r5
    59a0:	294b883a 	add	r5,r5,r5
    59a4:	298b883a 	add	r5,r5,r6
    59a8:	38c6983a 	sll	r3,r7,r3
    59ac:	29c00017 	ldw	r7,0(r5)
    59b0:	2a7ffe04 	addi	r9,r5,-8
    59b4:	1886b03a 	or	r3,r3,r2
    59b8:	82400315 	stw	r9,12(r16)
    59bc:	81c00215 	stw	r7,8(r16)
    59c0:	30c00115 	stw	r3,4(r6)
    59c4:	2c000015 	stw	r16,0(r5)
    59c8:	3c000315 	stw	r16,12(r7)
    59cc:	2005d0ba 	srai	r2,r4,2
    59d0:	01400044 	movi	r5,1
    59d4:	288a983a 	sll	r5,r5,r2
    59d8:	19406f36 	bltu	r3,r5,5b98 <_malloc_r+0x324>
    59dc:	28c4703a 	and	r2,r5,r3
    59e0:	10000a1e 	bne	r2,zero,5a0c <_malloc_r+0x198>
    59e4:	00bfff04 	movi	r2,-4
    59e8:	294b883a 	add	r5,r5,r5
    59ec:	2088703a 	and	r4,r4,r2
    59f0:	28c4703a 	and	r2,r5,r3
    59f4:	21000104 	addi	r4,r4,4
    59f8:	1000041e 	bne	r2,zero,5a0c <_malloc_r+0x198>
    59fc:	294b883a 	add	r5,r5,r5
    5a00:	28c4703a 	and	r2,r5,r3
    5a04:	21000104 	addi	r4,r4,4
    5a08:	103ffc26 	beq	r2,zero,59fc <__ram_exceptions_end+0xfbfe57a8>
    5a0c:	02bfff04 	movi	r10,-4
    5a10:	024003c4 	movi	r9,15
    5a14:	21800044 	addi	r6,r4,1
    5a18:	318d883a 	add	r6,r6,r6
    5a1c:	318d883a 	add	r6,r6,r6
    5a20:	318d883a 	add	r6,r6,r6
    5a24:	998d883a 	add	r6,r19,r6
    5a28:	333ffe04 	addi	r12,r6,-8
    5a2c:	2017883a 	mov	r11,r4
    5a30:	31800104 	addi	r6,r6,4
    5a34:	34000017 	ldw	r16,0(r6)
    5a38:	31fffd04 	addi	r7,r6,-12
    5a3c:	81c0041e 	bne	r16,r7,5a50 <_malloc_r+0x1dc>
    5a40:	0000fb06 	br	5e30 <_malloc_r+0x5bc>
    5a44:	1801030e 	bge	r3,zero,5e54 <_malloc_r+0x5e0>
    5a48:	84000317 	ldw	r16,12(r16)
    5a4c:	81c0f826 	beq	r16,r7,5e30 <_malloc_r+0x5bc>
    5a50:	80800117 	ldw	r2,4(r16)
    5a54:	1284703a 	and	r2,r2,r10
    5a58:	1447c83a 	sub	r3,r2,r17
    5a5c:	48fff90e 	bge	r9,r3,5a44 <__ram_exceptions_end+0xfbfe57f0>
    5a60:	80800317 	ldw	r2,12(r16)
    5a64:	81000217 	ldw	r4,8(r16)
    5a68:	89400054 	ori	r5,r17,1
    5a6c:	81400115 	stw	r5,4(r16)
    5a70:	20800315 	stw	r2,12(r4)
    5a74:	11000215 	stw	r4,8(r2)
    5a78:	8463883a 	add	r17,r16,r17
    5a7c:	9c400515 	stw	r17,20(r19)
    5a80:	9c400415 	stw	r17,16(r19)
    5a84:	18800054 	ori	r2,r3,1
    5a88:	88800115 	stw	r2,4(r17)
    5a8c:	8a000315 	stw	r8,12(r17)
    5a90:	8a000215 	stw	r8,8(r17)
    5a94:	88e3883a 	add	r17,r17,r3
    5a98:	88c00015 	stw	r3,0(r17)
    5a9c:	9009883a 	mov	r4,r18
    5aa0:	000db980 	call	db98 <__malloc_unlock>
    5aa4:	80800204 	addi	r2,r16,8
    5aa8:	00001b06 	br	5b18 <_malloc_r+0x2a4>
    5aac:	04400404 	movi	r17,16
    5ab0:	89402536 	bltu	r17,r5,5b48 <_malloc_r+0x2d4>
    5ab4:	000db740 	call	db74 <__malloc_lock>
    5ab8:	00800184 	movi	r2,6
    5abc:	01000084 	movi	r4,2
    5ac0:	04c00074 	movhi	r19,1
    5ac4:	1085883a 	add	r2,r2,r2
    5ac8:	9cc22604 	addi	r19,r19,2200
    5acc:	1085883a 	add	r2,r2,r2
    5ad0:	9885883a 	add	r2,r19,r2
    5ad4:	14000117 	ldw	r16,4(r2)
    5ad8:	10fffe04 	addi	r3,r2,-8
    5adc:	80c0d926 	beq	r16,r3,5e44 <_malloc_r+0x5d0>
    5ae0:	80c00117 	ldw	r3,4(r16)
    5ae4:	81000317 	ldw	r4,12(r16)
    5ae8:	00bfff04 	movi	r2,-4
    5aec:	1884703a 	and	r2,r3,r2
    5af0:	81400217 	ldw	r5,8(r16)
    5af4:	8085883a 	add	r2,r16,r2
    5af8:	10c00117 	ldw	r3,4(r2)
    5afc:	29000315 	stw	r4,12(r5)
    5b00:	21400215 	stw	r5,8(r4)
    5b04:	18c00054 	ori	r3,r3,1
    5b08:	10c00115 	stw	r3,4(r2)
    5b0c:	9009883a 	mov	r4,r18
    5b10:	000db980 	call	db98 <__malloc_unlock>
    5b14:	80800204 	addi	r2,r16,8
    5b18:	dfc00a17 	ldw	ra,40(sp)
    5b1c:	df000917 	ldw	fp,36(sp)
    5b20:	ddc00817 	ldw	r23,32(sp)
    5b24:	dd800717 	ldw	r22,28(sp)
    5b28:	dd400617 	ldw	r21,24(sp)
    5b2c:	dd000517 	ldw	r20,20(sp)
    5b30:	dcc00417 	ldw	r19,16(sp)
    5b34:	dc800317 	ldw	r18,12(sp)
    5b38:	dc400217 	ldw	r17,8(sp)
    5b3c:	dc000117 	ldw	r16,4(sp)
    5b40:	dec00b04 	addi	sp,sp,44
    5b44:	f800283a 	ret
    5b48:	00800304 	movi	r2,12
    5b4c:	90800015 	stw	r2,0(r18)
    5b50:	0005883a 	mov	r2,zero
    5b54:	003ff006 	br	5b18 <__ram_exceptions_end+0xfbfe58c4>
    5b58:	01002004 	movi	r4,128
    5b5c:	02001004 	movi	r8,64
    5b60:	01c00fc4 	movi	r7,63
    5b64:	003f6106 	br	58ec <__ram_exceptions_end+0xfbfe5698>
    5b68:	4009883a 	mov	r4,r8
    5b6c:	003f7506 	br	5944 <__ram_exceptions_end+0xfbfe56f0>
    5b70:	81000317 	ldw	r4,12(r16)
    5b74:	003fde06 	br	5af0 <__ram_exceptions_end+0xfbfe589c>
    5b78:	81c5883a 	add	r2,r16,r7
    5b7c:	11400117 	ldw	r5,4(r2)
    5b80:	9009883a 	mov	r4,r18
    5b84:	29400054 	ori	r5,r5,1
    5b88:	11400115 	stw	r5,4(r2)
    5b8c:	000db980 	call	db98 <__malloc_unlock>
    5b90:	80800204 	addi	r2,r16,8
    5b94:	003fe006 	br	5b18 <__ram_exceptions_end+0xfbfe58c4>
    5b98:	9c000217 	ldw	r16,8(r19)
    5b9c:	00bfff04 	movi	r2,-4
    5ba0:	85800117 	ldw	r22,4(r16)
    5ba4:	b0ac703a 	and	r22,r22,r2
    5ba8:	b4400336 	bltu	r22,r17,5bb8 <_malloc_r+0x344>
    5bac:	b445c83a 	sub	r2,r22,r17
    5bb0:	00c003c4 	movi	r3,15
    5bb4:	18805d16 	blt	r3,r2,5d2c <_malloc_r+0x4b8>
    5bb8:	05c00074 	movhi	r23,1
    5bbc:	00800074 	movhi	r2,1
    5bc0:	108e7d04 	addi	r2,r2,14836
    5bc4:	bdc7ad04 	addi	r23,r23,7860
    5bc8:	15400017 	ldw	r21,0(r2)
    5bcc:	b8c00017 	ldw	r3,0(r23)
    5bd0:	00bfffc4 	movi	r2,-1
    5bd4:	858d883a 	add	r6,r16,r22
    5bd8:	8d6b883a 	add	r21,r17,r21
    5bdc:	1880ea26 	beq	r3,r2,5f88 <_malloc_r+0x714>
    5be0:	ad4403c4 	addi	r21,r21,4111
    5be4:	00bc0004 	movi	r2,-4096
    5be8:	a8aa703a 	and	r21,r21,r2
    5bec:	a80b883a 	mov	r5,r21
    5bf0:	9009883a 	mov	r4,r18
    5bf4:	d9800015 	stw	r6,0(sp)
    5bf8:	00074440 	call	7444 <_sbrk_r>
    5bfc:	1029883a 	mov	r20,r2
    5c00:	00bfffc4 	movi	r2,-1
    5c04:	d9800017 	ldw	r6,0(sp)
    5c08:	a080e826 	beq	r20,r2,5fac <_malloc_r+0x738>
    5c0c:	a180a636 	bltu	r20,r6,5ea8 <_malloc_r+0x634>
    5c10:	07000074 	movhi	fp,1
    5c14:	e70e8604 	addi	fp,fp,14872
    5c18:	e0800017 	ldw	r2,0(fp)
    5c1c:	a887883a 	add	r3,r21,r2
    5c20:	e0c00015 	stw	r3,0(fp)
    5c24:	3500e626 	beq	r6,r20,5fc0 <_malloc_r+0x74c>
    5c28:	b9000017 	ldw	r4,0(r23)
    5c2c:	00bfffc4 	movi	r2,-1
    5c30:	2080ee26 	beq	r4,r2,5fec <_malloc_r+0x778>
    5c34:	a185c83a 	sub	r2,r20,r6
    5c38:	10c5883a 	add	r2,r2,r3
    5c3c:	e0800015 	stw	r2,0(fp)
    5c40:	a0c001cc 	andi	r3,r20,7
    5c44:	1800bc26 	beq	r3,zero,5f38 <_malloc_r+0x6c4>
    5c48:	a0e9c83a 	sub	r20,r20,r3
    5c4c:	00840204 	movi	r2,4104
    5c50:	a5000204 	addi	r20,r20,8
    5c54:	10c7c83a 	sub	r3,r2,r3
    5c58:	a545883a 	add	r2,r20,r21
    5c5c:	1083ffcc 	andi	r2,r2,4095
    5c60:	18abc83a 	sub	r21,r3,r2
    5c64:	a80b883a 	mov	r5,r21
    5c68:	9009883a 	mov	r4,r18
    5c6c:	00074440 	call	7444 <_sbrk_r>
    5c70:	00ffffc4 	movi	r3,-1
    5c74:	10c0e126 	beq	r2,r3,5ffc <_malloc_r+0x788>
    5c78:	1505c83a 	sub	r2,r2,r20
    5c7c:	1545883a 	add	r2,r2,r21
    5c80:	10800054 	ori	r2,r2,1
    5c84:	e0c00017 	ldw	r3,0(fp)
    5c88:	9d000215 	stw	r20,8(r19)
    5c8c:	a0800115 	stw	r2,4(r20)
    5c90:	a8c7883a 	add	r3,r21,r3
    5c94:	e0c00015 	stw	r3,0(fp)
    5c98:	84c00e26 	beq	r16,r19,5cd4 <_malloc_r+0x460>
    5c9c:	018003c4 	movi	r6,15
    5ca0:	3580a72e 	bgeu	r6,r22,5f40 <_malloc_r+0x6cc>
    5ca4:	81400117 	ldw	r5,4(r16)
    5ca8:	013ffe04 	movi	r4,-8
    5cac:	b0bffd04 	addi	r2,r22,-12
    5cb0:	1104703a 	and	r2,r2,r4
    5cb4:	2900004c 	andi	r4,r5,1
    5cb8:	2088b03a 	or	r4,r4,r2
    5cbc:	81000115 	stw	r4,4(r16)
    5cc0:	01400144 	movi	r5,5
    5cc4:	8089883a 	add	r4,r16,r2
    5cc8:	21400115 	stw	r5,4(r4)
    5ccc:	21400215 	stw	r5,8(r4)
    5cd0:	3080cd36 	bltu	r6,r2,6008 <_malloc_r+0x794>
    5cd4:	00800074 	movhi	r2,1
    5cd8:	108e7c04 	addi	r2,r2,14832
    5cdc:	11000017 	ldw	r4,0(r2)
    5ce0:	20c0012e 	bgeu	r4,r3,5ce8 <_malloc_r+0x474>
    5ce4:	10c00015 	stw	r3,0(r2)
    5ce8:	00800074 	movhi	r2,1
    5cec:	108e7b04 	addi	r2,r2,14828
    5cf0:	11000017 	ldw	r4,0(r2)
    5cf4:	9c000217 	ldw	r16,8(r19)
    5cf8:	20c0012e 	bgeu	r4,r3,5d00 <_malloc_r+0x48c>
    5cfc:	10c00015 	stw	r3,0(r2)
    5d00:	80c00117 	ldw	r3,4(r16)
    5d04:	00bfff04 	movi	r2,-4
    5d08:	1886703a 	and	r3,r3,r2
    5d0c:	1c45c83a 	sub	r2,r3,r17
    5d10:	1c400236 	bltu	r3,r17,5d1c <_malloc_r+0x4a8>
    5d14:	00c003c4 	movi	r3,15
    5d18:	18800416 	blt	r3,r2,5d2c <_malloc_r+0x4b8>
    5d1c:	9009883a 	mov	r4,r18
    5d20:	000db980 	call	db98 <__malloc_unlock>
    5d24:	0005883a 	mov	r2,zero
    5d28:	003f7b06 	br	5b18 <__ram_exceptions_end+0xfbfe58c4>
    5d2c:	88c00054 	ori	r3,r17,1
    5d30:	80c00115 	stw	r3,4(r16)
    5d34:	8463883a 	add	r17,r16,r17
    5d38:	10800054 	ori	r2,r2,1
    5d3c:	9c400215 	stw	r17,8(r19)
    5d40:	88800115 	stw	r2,4(r17)
    5d44:	9009883a 	mov	r4,r18
    5d48:	000db980 	call	db98 <__malloc_unlock>
    5d4c:	80800204 	addi	r2,r16,8
    5d50:	003f7106 	br	5b18 <__ram_exceptions_end+0xfbfe58c4>
    5d54:	00c00504 	movi	r3,20
    5d58:	18804a2e 	bgeu	r3,r2,5e84 <_malloc_r+0x610>
    5d5c:	00c01504 	movi	r3,84
    5d60:	18806e36 	bltu	r3,r2,5f1c <_malloc_r+0x6a8>
    5d64:	8804d33a 	srli	r2,r17,12
    5d68:	12001bc4 	addi	r8,r2,111
    5d6c:	11c01b84 	addi	r7,r2,110
    5d70:	4209883a 	add	r4,r8,r8
    5d74:	003edd06 	br	58ec <__ram_exceptions_end+0xfbfe5698>
    5d78:	3804d27a 	srli	r2,r7,9
    5d7c:	00c00104 	movi	r3,4
    5d80:	1880442e 	bgeu	r3,r2,5e94 <_malloc_r+0x620>
    5d84:	00c00504 	movi	r3,20
    5d88:	18808136 	bltu	r3,r2,5f90 <_malloc_r+0x71c>
    5d8c:	11401704 	addi	r5,r2,92
    5d90:	10c016c4 	addi	r3,r2,91
    5d94:	294b883a 	add	r5,r5,r5
    5d98:	294b883a 	add	r5,r5,r5
    5d9c:	294b883a 	add	r5,r5,r5
    5da0:	994b883a 	add	r5,r19,r5
    5da4:	28800017 	ldw	r2,0(r5)
    5da8:	01800074 	movhi	r6,1
    5dac:	297ffe04 	addi	r5,r5,-8
    5db0:	31822604 	addi	r6,r6,2200
    5db4:	28806526 	beq	r5,r2,5f4c <_malloc_r+0x6d8>
    5db8:	01bfff04 	movi	r6,-4
    5dbc:	10c00117 	ldw	r3,4(r2)
    5dc0:	1986703a 	and	r3,r3,r6
    5dc4:	38c0022e 	bgeu	r7,r3,5dd0 <_malloc_r+0x55c>
    5dc8:	10800217 	ldw	r2,8(r2)
    5dcc:	28bffb1e 	bne	r5,r2,5dbc <__ram_exceptions_end+0xfbfe5b68>
    5dd0:	11400317 	ldw	r5,12(r2)
    5dd4:	98c00117 	ldw	r3,4(r19)
    5dd8:	81400315 	stw	r5,12(r16)
    5ddc:	80800215 	stw	r2,8(r16)
    5de0:	2c000215 	stw	r16,8(r5)
    5de4:	14000315 	stw	r16,12(r2)
    5de8:	003ef806 	br	59cc <__ram_exceptions_end+0xfbfe5778>
    5dec:	88c00054 	ori	r3,r17,1
    5df0:	80c00115 	stw	r3,4(r16)
    5df4:	8463883a 	add	r17,r16,r17
    5df8:	34400515 	stw	r17,20(r6)
    5dfc:	34400415 	stw	r17,16(r6)
    5e00:	10c00054 	ori	r3,r2,1
    5e04:	8a000315 	stw	r8,12(r17)
    5e08:	8a000215 	stw	r8,8(r17)
    5e0c:	88c00115 	stw	r3,4(r17)
    5e10:	88a3883a 	add	r17,r17,r2
    5e14:	88800015 	stw	r2,0(r17)
    5e18:	9009883a 	mov	r4,r18
    5e1c:	000db980 	call	db98 <__malloc_unlock>
    5e20:	80800204 	addi	r2,r16,8
    5e24:	003f3c06 	br	5b18 <__ram_exceptions_end+0xfbfe58c4>
    5e28:	30c00117 	ldw	r3,4(r6)
    5e2c:	003ee706 	br	59cc <__ram_exceptions_end+0xfbfe5778>
    5e30:	5ac00044 	addi	r11,r11,1
    5e34:	588000cc 	andi	r2,r11,3
    5e38:	31800204 	addi	r6,r6,8
    5e3c:	103efd1e 	bne	r2,zero,5a34 <__ram_exceptions_end+0xfbfe57e0>
    5e40:	00002406 	br	5ed4 <_malloc_r+0x660>
    5e44:	14000317 	ldw	r16,12(r2)
    5e48:	143f251e 	bne	r2,r16,5ae0 <__ram_exceptions_end+0xfbfe588c>
    5e4c:	21000084 	addi	r4,r4,2
    5e50:	003ebc06 	br	5944 <__ram_exceptions_end+0xfbfe56f0>
    5e54:	8085883a 	add	r2,r16,r2
    5e58:	10c00117 	ldw	r3,4(r2)
    5e5c:	81000317 	ldw	r4,12(r16)
    5e60:	81400217 	ldw	r5,8(r16)
    5e64:	18c00054 	ori	r3,r3,1
    5e68:	10c00115 	stw	r3,4(r2)
    5e6c:	29000315 	stw	r4,12(r5)
    5e70:	21400215 	stw	r5,8(r4)
    5e74:	9009883a 	mov	r4,r18
    5e78:	000db980 	call	db98 <__malloc_unlock>
    5e7c:	80800204 	addi	r2,r16,8
    5e80:	003f2506 	br	5b18 <__ram_exceptions_end+0xfbfe58c4>
    5e84:	12001704 	addi	r8,r2,92
    5e88:	11c016c4 	addi	r7,r2,91
    5e8c:	4209883a 	add	r4,r8,r8
    5e90:	003e9606 	br	58ec <__ram_exceptions_end+0xfbfe5698>
    5e94:	3804d1ba 	srli	r2,r7,6
    5e98:	11400e44 	addi	r5,r2,57
    5e9c:	10c00e04 	addi	r3,r2,56
    5ea0:	294b883a 	add	r5,r5,r5
    5ea4:	003fbc06 	br	5d98 <__ram_exceptions_end+0xfbfe5b44>
    5ea8:	84ff5926 	beq	r16,r19,5c10 <__ram_exceptions_end+0xfbfe59bc>
    5eac:	00800074 	movhi	r2,1
    5eb0:	10822604 	addi	r2,r2,2200
    5eb4:	14000217 	ldw	r16,8(r2)
    5eb8:	00bfff04 	movi	r2,-4
    5ebc:	80c00117 	ldw	r3,4(r16)
    5ec0:	1886703a 	and	r3,r3,r2
    5ec4:	003f9106 	br	5d0c <__ram_exceptions_end+0xfbfe5ab8>
    5ec8:	60800217 	ldw	r2,8(r12)
    5ecc:	213fffc4 	addi	r4,r4,-1
    5ed0:	1300651e 	bne	r2,r12,6068 <_malloc_r+0x7f4>
    5ed4:	208000cc 	andi	r2,r4,3
    5ed8:	633ffe04 	addi	r12,r12,-8
    5edc:	103ffa1e 	bne	r2,zero,5ec8 <__ram_exceptions_end+0xfbfe5c74>
    5ee0:	98800117 	ldw	r2,4(r19)
    5ee4:	0146303a 	nor	r3,zero,r5
    5ee8:	1884703a 	and	r2,r3,r2
    5eec:	98800115 	stw	r2,4(r19)
    5ef0:	294b883a 	add	r5,r5,r5
    5ef4:	117f2836 	bltu	r2,r5,5b98 <__ram_exceptions_end+0xfbfe5944>
    5ef8:	283f2726 	beq	r5,zero,5b98 <__ram_exceptions_end+0xfbfe5944>
    5efc:	2886703a 	and	r3,r5,r2
    5f00:	5809883a 	mov	r4,r11
    5f04:	183ec31e 	bne	r3,zero,5a14 <__ram_exceptions_end+0xfbfe57c0>
    5f08:	294b883a 	add	r5,r5,r5
    5f0c:	2886703a 	and	r3,r5,r2
    5f10:	21000104 	addi	r4,r4,4
    5f14:	183ffc26 	beq	r3,zero,5f08 <__ram_exceptions_end+0xfbfe5cb4>
    5f18:	003ebe06 	br	5a14 <__ram_exceptions_end+0xfbfe57c0>
    5f1c:	00c05504 	movi	r3,340
    5f20:	18801236 	bltu	r3,r2,5f6c <_malloc_r+0x6f8>
    5f24:	8804d3fa 	srli	r2,r17,15
    5f28:	12001e04 	addi	r8,r2,120
    5f2c:	11c01dc4 	addi	r7,r2,119
    5f30:	4209883a 	add	r4,r8,r8
    5f34:	003e6d06 	br	58ec <__ram_exceptions_end+0xfbfe5698>
    5f38:	00c40004 	movi	r3,4096
    5f3c:	003f4606 	br	5c58 <__ram_exceptions_end+0xfbfe5a04>
    5f40:	00800044 	movi	r2,1
    5f44:	a0800115 	stw	r2,4(r20)
    5f48:	003f7406 	br	5d1c <__ram_exceptions_end+0xfbfe5ac8>
    5f4c:	1805d0ba 	srai	r2,r3,2
    5f50:	01c00044 	movi	r7,1
    5f54:	30c00117 	ldw	r3,4(r6)
    5f58:	388e983a 	sll	r7,r7,r2
    5f5c:	2805883a 	mov	r2,r5
    5f60:	38c6b03a 	or	r3,r7,r3
    5f64:	30c00115 	stw	r3,4(r6)
    5f68:	003f9b06 	br	5dd8 <__ram_exceptions_end+0xfbfe5b84>
    5f6c:	00c15504 	movi	r3,1364
    5f70:	18801a36 	bltu	r3,r2,5fdc <_malloc_r+0x768>
    5f74:	8804d4ba 	srli	r2,r17,18
    5f78:	12001f44 	addi	r8,r2,125
    5f7c:	11c01f04 	addi	r7,r2,124
    5f80:	4209883a 	add	r4,r8,r8
    5f84:	003e5906 	br	58ec <__ram_exceptions_end+0xfbfe5698>
    5f88:	ad400404 	addi	r21,r21,16
    5f8c:	003f1706 	br	5bec <__ram_exceptions_end+0xfbfe5998>
    5f90:	00c01504 	movi	r3,84
    5f94:	18802336 	bltu	r3,r2,6024 <_malloc_r+0x7b0>
    5f98:	3804d33a 	srli	r2,r7,12
    5f9c:	11401bc4 	addi	r5,r2,111
    5fa0:	10c01b84 	addi	r3,r2,110
    5fa4:	294b883a 	add	r5,r5,r5
    5fa8:	003f7b06 	br	5d98 <__ram_exceptions_end+0xfbfe5b44>
    5fac:	9c000217 	ldw	r16,8(r19)
    5fb0:	00bfff04 	movi	r2,-4
    5fb4:	80c00117 	ldw	r3,4(r16)
    5fb8:	1886703a 	and	r3,r3,r2
    5fbc:	003f5306 	br	5d0c <__ram_exceptions_end+0xfbfe5ab8>
    5fc0:	3083ffcc 	andi	r2,r6,4095
    5fc4:	103f181e 	bne	r2,zero,5c28 <__ram_exceptions_end+0xfbfe59d4>
    5fc8:	99000217 	ldw	r4,8(r19)
    5fcc:	b545883a 	add	r2,r22,r21
    5fd0:	10800054 	ori	r2,r2,1
    5fd4:	20800115 	stw	r2,4(r4)
    5fd8:	003f3e06 	br	5cd4 <__ram_exceptions_end+0xfbfe5a80>
    5fdc:	01003f84 	movi	r4,254
    5fe0:	02001fc4 	movi	r8,127
    5fe4:	01c01f84 	movi	r7,126
    5fe8:	003e4006 	br	58ec <__ram_exceptions_end+0xfbfe5698>
    5fec:	00800074 	movhi	r2,1
    5ff0:	1087ad04 	addi	r2,r2,7860
    5ff4:	15000015 	stw	r20,0(r2)
    5ff8:	003f1106 	br	5c40 <__ram_exceptions_end+0xfbfe59ec>
    5ffc:	00800044 	movi	r2,1
    6000:	002b883a 	mov	r21,zero
    6004:	003f1f06 	br	5c84 <__ram_exceptions_end+0xfbfe5a30>
    6008:	81400204 	addi	r5,r16,8
    600c:	9009883a 	mov	r4,r18
    6010:	00051440 	call	5144 <_free_r>
    6014:	00800074 	movhi	r2,1
    6018:	108e8604 	addi	r2,r2,14872
    601c:	10c00017 	ldw	r3,0(r2)
    6020:	003f2c06 	br	5cd4 <__ram_exceptions_end+0xfbfe5a80>
    6024:	00c05504 	movi	r3,340
    6028:	18800536 	bltu	r3,r2,6040 <_malloc_r+0x7cc>
    602c:	3804d3fa 	srli	r2,r7,15
    6030:	11401e04 	addi	r5,r2,120
    6034:	10c01dc4 	addi	r3,r2,119
    6038:	294b883a 	add	r5,r5,r5
    603c:	003f5606 	br	5d98 <__ram_exceptions_end+0xfbfe5b44>
    6040:	00c15504 	movi	r3,1364
    6044:	18800536 	bltu	r3,r2,605c <_malloc_r+0x7e8>
    6048:	3804d4ba 	srli	r2,r7,18
    604c:	11401f44 	addi	r5,r2,125
    6050:	10c01f04 	addi	r3,r2,124
    6054:	294b883a 	add	r5,r5,r5
    6058:	003f4f06 	br	5d98 <__ram_exceptions_end+0xfbfe5b44>
    605c:	01403f84 	movi	r5,254
    6060:	00c01f84 	movi	r3,126
    6064:	003f4c06 	br	5d98 <__ram_exceptions_end+0xfbfe5b44>
    6068:	98800117 	ldw	r2,4(r19)
    606c:	003fa006 	br	5ef0 <__ram_exceptions_end+0xfbfe5c9c>
    6070:	8808d0fa 	srli	r4,r17,3
    6074:	20800044 	addi	r2,r4,1
    6078:	1085883a 	add	r2,r2,r2
    607c:	003e9006 	br	5ac0 <__ram_exceptions_end+0xfbfe586c>

00006080 <memchr>:
    6080:	208000cc 	andi	r2,r4,3
    6084:	280f883a 	mov	r7,r5
    6088:	10003426 	beq	r2,zero,615c <memchr+0xdc>
    608c:	30bfffc4 	addi	r2,r6,-1
    6090:	30001a26 	beq	r6,zero,60fc <memchr+0x7c>
    6094:	20c00003 	ldbu	r3,0(r4)
    6098:	29803fcc 	andi	r6,r5,255
    609c:	30c0051e 	bne	r6,r3,60b4 <memchr+0x34>
    60a0:	00001806 	br	6104 <memchr+0x84>
    60a4:	10001526 	beq	r2,zero,60fc <memchr+0x7c>
    60a8:	20c00003 	ldbu	r3,0(r4)
    60ac:	10bfffc4 	addi	r2,r2,-1
    60b0:	30c01426 	beq	r6,r3,6104 <memchr+0x84>
    60b4:	21000044 	addi	r4,r4,1
    60b8:	20c000cc 	andi	r3,r4,3
    60bc:	183ff91e 	bne	r3,zero,60a4 <__ram_exceptions_end+0xfbfe5e50>
    60c0:	020000c4 	movi	r8,3
    60c4:	40801136 	bltu	r8,r2,610c <memchr+0x8c>
    60c8:	10000c26 	beq	r2,zero,60fc <memchr+0x7c>
    60cc:	20c00003 	ldbu	r3,0(r4)
    60d0:	29403fcc 	andi	r5,r5,255
    60d4:	28c00b26 	beq	r5,r3,6104 <memchr+0x84>
    60d8:	20c00044 	addi	r3,r4,1
    60dc:	39803fcc 	andi	r6,r7,255
    60e0:	2089883a 	add	r4,r4,r2
    60e4:	00000306 	br	60f4 <memchr+0x74>
    60e8:	18c00044 	addi	r3,r3,1
    60ec:	197fffc3 	ldbu	r5,-1(r3)
    60f0:	31400526 	beq	r6,r5,6108 <memchr+0x88>
    60f4:	1805883a 	mov	r2,r3
    60f8:	20fffb1e 	bne	r4,r3,60e8 <__ram_exceptions_end+0xfbfe5e94>
    60fc:	0005883a 	mov	r2,zero
    6100:	f800283a 	ret
    6104:	2005883a 	mov	r2,r4
    6108:	f800283a 	ret
    610c:	28c03fcc 	andi	r3,r5,255
    6110:	1812923a 	slli	r9,r3,8
    6114:	02ffbff4 	movhi	r11,65279
    6118:	02a02074 	movhi	r10,32897
    611c:	48d2b03a 	or	r9,r9,r3
    6120:	4806943a 	slli	r3,r9,16
    6124:	5affbfc4 	addi	r11,r11,-257
    6128:	52a02004 	addi	r10,r10,-32640
    612c:	48d2b03a 	or	r9,r9,r3
    6130:	20c00017 	ldw	r3,0(r4)
    6134:	48c6f03a 	xor	r3,r9,r3
    6138:	1acd883a 	add	r6,r3,r11
    613c:	00c6303a 	nor	r3,zero,r3
    6140:	30c6703a 	and	r3,r6,r3
    6144:	1a86703a 	and	r3,r3,r10
    6148:	183fe01e 	bne	r3,zero,60cc <__ram_exceptions_end+0xfbfe5e78>
    614c:	10bfff04 	addi	r2,r2,-4
    6150:	21000104 	addi	r4,r4,4
    6154:	40bff636 	bltu	r8,r2,6130 <__ram_exceptions_end+0xfbfe5edc>
    6158:	003fdb06 	br	60c8 <__ram_exceptions_end+0xfbfe5e74>
    615c:	3005883a 	mov	r2,r6
    6160:	003fd706 	br	60c0 <__ram_exceptions_end+0xfbfe5e6c>

00006164 <memcpy>:
    6164:	defffd04 	addi	sp,sp,-12
    6168:	dfc00215 	stw	ra,8(sp)
    616c:	dc400115 	stw	r17,4(sp)
    6170:	dc000015 	stw	r16,0(sp)
    6174:	00c003c4 	movi	r3,15
    6178:	2005883a 	mov	r2,r4
    617c:	1980452e 	bgeu	r3,r6,6294 <memcpy+0x130>
    6180:	2906b03a 	or	r3,r5,r4
    6184:	18c000cc 	andi	r3,r3,3
    6188:	1800441e 	bne	r3,zero,629c <memcpy+0x138>
    618c:	347ffc04 	addi	r17,r6,-16
    6190:	8822d13a 	srli	r17,r17,4
    6194:	28c00104 	addi	r3,r5,4
    6198:	23400104 	addi	r13,r4,4
    619c:	8820913a 	slli	r16,r17,4
    61a0:	2b000204 	addi	r12,r5,8
    61a4:	22c00204 	addi	r11,r4,8
    61a8:	84000504 	addi	r16,r16,20
    61ac:	2a800304 	addi	r10,r5,12
    61b0:	22400304 	addi	r9,r4,12
    61b4:	2c21883a 	add	r16,r5,r16
    61b8:	2811883a 	mov	r8,r5
    61bc:	200f883a 	mov	r7,r4
    61c0:	41000017 	ldw	r4,0(r8)
    61c4:	1fc00017 	ldw	ra,0(r3)
    61c8:	63c00017 	ldw	r15,0(r12)
    61cc:	39000015 	stw	r4,0(r7)
    61d0:	53800017 	ldw	r14,0(r10)
    61d4:	6fc00015 	stw	ra,0(r13)
    61d8:	5bc00015 	stw	r15,0(r11)
    61dc:	4b800015 	stw	r14,0(r9)
    61e0:	18c00404 	addi	r3,r3,16
    61e4:	39c00404 	addi	r7,r7,16
    61e8:	42000404 	addi	r8,r8,16
    61ec:	6b400404 	addi	r13,r13,16
    61f0:	63000404 	addi	r12,r12,16
    61f4:	5ac00404 	addi	r11,r11,16
    61f8:	52800404 	addi	r10,r10,16
    61fc:	4a400404 	addi	r9,r9,16
    6200:	1c3fef1e 	bne	r3,r16,61c0 <__ram_exceptions_end+0xfbfe5f6c>
    6204:	89c00044 	addi	r7,r17,1
    6208:	380e913a 	slli	r7,r7,4
    620c:	310003cc 	andi	r4,r6,15
    6210:	02c000c4 	movi	r11,3
    6214:	11c7883a 	add	r3,r2,r7
    6218:	29cb883a 	add	r5,r5,r7
    621c:	5900212e 	bgeu	r11,r4,62a4 <memcpy+0x140>
    6220:	1813883a 	mov	r9,r3
    6224:	2811883a 	mov	r8,r5
    6228:	200f883a 	mov	r7,r4
    622c:	42800017 	ldw	r10,0(r8)
    6230:	4a400104 	addi	r9,r9,4
    6234:	39ffff04 	addi	r7,r7,-4
    6238:	4abfff15 	stw	r10,-4(r9)
    623c:	42000104 	addi	r8,r8,4
    6240:	59fffa36 	bltu	r11,r7,622c <__ram_exceptions_end+0xfbfe5fd8>
    6244:	213fff04 	addi	r4,r4,-4
    6248:	2008d0ba 	srli	r4,r4,2
    624c:	318000cc 	andi	r6,r6,3
    6250:	21000044 	addi	r4,r4,1
    6254:	2109883a 	add	r4,r4,r4
    6258:	2109883a 	add	r4,r4,r4
    625c:	1907883a 	add	r3,r3,r4
    6260:	290b883a 	add	r5,r5,r4
    6264:	30000626 	beq	r6,zero,6280 <memcpy+0x11c>
    6268:	198d883a 	add	r6,r3,r6
    626c:	29c00003 	ldbu	r7,0(r5)
    6270:	18c00044 	addi	r3,r3,1
    6274:	29400044 	addi	r5,r5,1
    6278:	19ffffc5 	stb	r7,-1(r3)
    627c:	19bffb1e 	bne	r3,r6,626c <__ram_exceptions_end+0xfbfe6018>
    6280:	dfc00217 	ldw	ra,8(sp)
    6284:	dc400117 	ldw	r17,4(sp)
    6288:	dc000017 	ldw	r16,0(sp)
    628c:	dec00304 	addi	sp,sp,12
    6290:	f800283a 	ret
    6294:	2007883a 	mov	r3,r4
    6298:	003ff206 	br	6264 <__ram_exceptions_end+0xfbfe6010>
    629c:	2007883a 	mov	r3,r4
    62a0:	003ff106 	br	6268 <__ram_exceptions_end+0xfbfe6014>
    62a4:	200d883a 	mov	r6,r4
    62a8:	003fee06 	br	6264 <__ram_exceptions_end+0xfbfe6010>

000062ac <memset>:
    62ac:	20c000cc 	andi	r3,r4,3
    62b0:	2005883a 	mov	r2,r4
    62b4:	18004426 	beq	r3,zero,63c8 <memset+0x11c>
    62b8:	31ffffc4 	addi	r7,r6,-1
    62bc:	30004026 	beq	r6,zero,63c0 <memset+0x114>
    62c0:	2813883a 	mov	r9,r5
    62c4:	200d883a 	mov	r6,r4
    62c8:	2007883a 	mov	r3,r4
    62cc:	00000406 	br	62e0 <memset+0x34>
    62d0:	3a3fffc4 	addi	r8,r7,-1
    62d4:	31800044 	addi	r6,r6,1
    62d8:	38003926 	beq	r7,zero,63c0 <memset+0x114>
    62dc:	400f883a 	mov	r7,r8
    62e0:	18c00044 	addi	r3,r3,1
    62e4:	32400005 	stb	r9,0(r6)
    62e8:	1a0000cc 	andi	r8,r3,3
    62ec:	403ff81e 	bne	r8,zero,62d0 <__ram_exceptions_end+0xfbfe607c>
    62f0:	010000c4 	movi	r4,3
    62f4:	21c02d2e 	bgeu	r4,r7,63ac <memset+0x100>
    62f8:	29003fcc 	andi	r4,r5,255
    62fc:	200c923a 	slli	r6,r4,8
    6300:	3108b03a 	or	r4,r6,r4
    6304:	200c943a 	slli	r6,r4,16
    6308:	218cb03a 	or	r6,r4,r6
    630c:	010003c4 	movi	r4,15
    6310:	21c0182e 	bgeu	r4,r7,6374 <memset+0xc8>
    6314:	3b3ffc04 	addi	r12,r7,-16
    6318:	6018d13a 	srli	r12,r12,4
    631c:	1a000104 	addi	r8,r3,4
    6320:	1ac00204 	addi	r11,r3,8
    6324:	6008913a 	slli	r4,r12,4
    6328:	1a800304 	addi	r10,r3,12
    632c:	1813883a 	mov	r9,r3
    6330:	21000504 	addi	r4,r4,20
    6334:	1909883a 	add	r4,r3,r4
    6338:	49800015 	stw	r6,0(r9)
    633c:	41800015 	stw	r6,0(r8)
    6340:	59800015 	stw	r6,0(r11)
    6344:	51800015 	stw	r6,0(r10)
    6348:	42000404 	addi	r8,r8,16
    634c:	4a400404 	addi	r9,r9,16
    6350:	5ac00404 	addi	r11,r11,16
    6354:	52800404 	addi	r10,r10,16
    6358:	413ff71e 	bne	r8,r4,6338 <__ram_exceptions_end+0xfbfe60e4>
    635c:	63000044 	addi	r12,r12,1
    6360:	6018913a 	slli	r12,r12,4
    6364:	39c003cc 	andi	r7,r7,15
    6368:	010000c4 	movi	r4,3
    636c:	1b07883a 	add	r3,r3,r12
    6370:	21c00e2e 	bgeu	r4,r7,63ac <memset+0x100>
    6374:	1813883a 	mov	r9,r3
    6378:	3811883a 	mov	r8,r7
    637c:	010000c4 	movi	r4,3
    6380:	49800015 	stw	r6,0(r9)
    6384:	423fff04 	addi	r8,r8,-4
    6388:	4a400104 	addi	r9,r9,4
    638c:	223ffc36 	bltu	r4,r8,6380 <__ram_exceptions_end+0xfbfe612c>
    6390:	393fff04 	addi	r4,r7,-4
    6394:	2008d0ba 	srli	r4,r4,2
    6398:	39c000cc 	andi	r7,r7,3
    639c:	21000044 	addi	r4,r4,1
    63a0:	2109883a 	add	r4,r4,r4
    63a4:	2109883a 	add	r4,r4,r4
    63a8:	1907883a 	add	r3,r3,r4
    63ac:	38000526 	beq	r7,zero,63c4 <memset+0x118>
    63b0:	19cf883a 	add	r7,r3,r7
    63b4:	19400005 	stb	r5,0(r3)
    63b8:	18c00044 	addi	r3,r3,1
    63bc:	38fffd1e 	bne	r7,r3,63b4 <__ram_exceptions_end+0xfbfe6160>
    63c0:	f800283a 	ret
    63c4:	f800283a 	ret
    63c8:	2007883a 	mov	r3,r4
    63cc:	300f883a 	mov	r7,r6
    63d0:	003fc706 	br	62f0 <__ram_exceptions_end+0xfbfe609c>

000063d4 <_Balloc>:
    63d4:	20801317 	ldw	r2,76(r4)
    63d8:	defffc04 	addi	sp,sp,-16
    63dc:	dc400115 	stw	r17,4(sp)
    63e0:	dc000015 	stw	r16,0(sp)
    63e4:	dfc00315 	stw	ra,12(sp)
    63e8:	dc800215 	stw	r18,8(sp)
    63ec:	2023883a 	mov	r17,r4
    63f0:	2821883a 	mov	r16,r5
    63f4:	10000f26 	beq	r2,zero,6434 <_Balloc+0x60>
    63f8:	8407883a 	add	r3,r16,r16
    63fc:	18c7883a 	add	r3,r3,r3
    6400:	10c7883a 	add	r3,r2,r3
    6404:	18800017 	ldw	r2,0(r3)
    6408:	10001126 	beq	r2,zero,6450 <_Balloc+0x7c>
    640c:	11000017 	ldw	r4,0(r2)
    6410:	19000015 	stw	r4,0(r3)
    6414:	10000415 	stw	zero,16(r2)
    6418:	10000315 	stw	zero,12(r2)
    641c:	dfc00317 	ldw	ra,12(sp)
    6420:	dc800217 	ldw	r18,8(sp)
    6424:	dc400117 	ldw	r17,4(sp)
    6428:	dc000017 	ldw	r16,0(sp)
    642c:	dec00404 	addi	sp,sp,16
    6430:	f800283a 	ret
    6434:	01800844 	movi	r6,33
    6438:	01400104 	movi	r5,4
    643c:	0008e440 	call	8e44 <_calloc_r>
    6440:	88801315 	stw	r2,76(r17)
    6444:	103fec1e 	bne	r2,zero,63f8 <__ram_exceptions_end+0xfbfe61a4>
    6448:	0005883a 	mov	r2,zero
    644c:	003ff306 	br	641c <__ram_exceptions_end+0xfbfe61c8>
    6450:	01400044 	movi	r5,1
    6454:	2c24983a 	sll	r18,r5,r16
    6458:	8809883a 	mov	r4,r17
    645c:	91800144 	addi	r6,r18,5
    6460:	318d883a 	add	r6,r6,r6
    6464:	318d883a 	add	r6,r6,r6
    6468:	0008e440 	call	8e44 <_calloc_r>
    646c:	103ff626 	beq	r2,zero,6448 <__ram_exceptions_end+0xfbfe61f4>
    6470:	14000115 	stw	r16,4(r2)
    6474:	14800215 	stw	r18,8(r2)
    6478:	003fe606 	br	6414 <__ram_exceptions_end+0xfbfe61c0>

0000647c <_Bfree>:
    647c:	28000826 	beq	r5,zero,64a0 <_Bfree+0x24>
    6480:	28c00117 	ldw	r3,4(r5)
    6484:	20801317 	ldw	r2,76(r4)
    6488:	18c7883a 	add	r3,r3,r3
    648c:	18c7883a 	add	r3,r3,r3
    6490:	10c5883a 	add	r2,r2,r3
    6494:	10c00017 	ldw	r3,0(r2)
    6498:	28c00015 	stw	r3,0(r5)
    649c:	11400015 	stw	r5,0(r2)
    64a0:	f800283a 	ret

000064a4 <__multadd>:
    64a4:	defffa04 	addi	sp,sp,-24
    64a8:	dc800315 	stw	r18,12(sp)
    64ac:	dc400215 	stw	r17,8(sp)
    64b0:	dc000115 	stw	r16,4(sp)
    64b4:	2823883a 	mov	r17,r5
    64b8:	2c000417 	ldw	r16,16(r5)
    64bc:	dfc00515 	stw	ra,20(sp)
    64c0:	dcc00415 	stw	r19,16(sp)
    64c4:	2025883a 	mov	r18,r4
    64c8:	29400504 	addi	r5,r5,20
    64cc:	0011883a 	mov	r8,zero
    64d0:	28c00017 	ldw	r3,0(r5)
    64d4:	29400104 	addi	r5,r5,4
    64d8:	42000044 	addi	r8,r8,1
    64dc:	18bfffcc 	andi	r2,r3,65535
    64e0:	1185383a 	mul	r2,r2,r6
    64e4:	1806d43a 	srli	r3,r3,16
    64e8:	11cf883a 	add	r7,r2,r7
    64ec:	3808d43a 	srli	r4,r7,16
    64f0:	1987383a 	mul	r3,r3,r6
    64f4:	38bfffcc 	andi	r2,r7,65535
    64f8:	1907883a 	add	r3,r3,r4
    64fc:	1808943a 	slli	r4,r3,16
    6500:	180ed43a 	srli	r7,r3,16
    6504:	2085883a 	add	r2,r4,r2
    6508:	28bfff15 	stw	r2,-4(r5)
    650c:	443ff016 	blt	r8,r16,64d0 <__ram_exceptions_end+0xfbfe627c>
    6510:	38000926 	beq	r7,zero,6538 <__multadd+0x94>
    6514:	88800217 	ldw	r2,8(r17)
    6518:	80800f0e 	bge	r16,r2,6558 <__multadd+0xb4>
    651c:	80800144 	addi	r2,r16,5
    6520:	1085883a 	add	r2,r2,r2
    6524:	1085883a 	add	r2,r2,r2
    6528:	8885883a 	add	r2,r17,r2
    652c:	11c00015 	stw	r7,0(r2)
    6530:	84000044 	addi	r16,r16,1
    6534:	8c000415 	stw	r16,16(r17)
    6538:	8805883a 	mov	r2,r17
    653c:	dfc00517 	ldw	ra,20(sp)
    6540:	dcc00417 	ldw	r19,16(sp)
    6544:	dc800317 	ldw	r18,12(sp)
    6548:	dc400217 	ldw	r17,8(sp)
    654c:	dc000117 	ldw	r16,4(sp)
    6550:	dec00604 	addi	sp,sp,24
    6554:	f800283a 	ret
    6558:	89400117 	ldw	r5,4(r17)
    655c:	9009883a 	mov	r4,r18
    6560:	d9c00015 	stw	r7,0(sp)
    6564:	29400044 	addi	r5,r5,1
    6568:	00063d40 	call	63d4 <_Balloc>
    656c:	89800417 	ldw	r6,16(r17)
    6570:	89400304 	addi	r5,r17,12
    6574:	11000304 	addi	r4,r2,12
    6578:	31800084 	addi	r6,r6,2
    657c:	318d883a 	add	r6,r6,r6
    6580:	318d883a 	add	r6,r6,r6
    6584:	1027883a 	mov	r19,r2
    6588:	00061640 	call	6164 <memcpy>
    658c:	d9c00017 	ldw	r7,0(sp)
    6590:	88000a26 	beq	r17,zero,65bc <__multadd+0x118>
    6594:	88c00117 	ldw	r3,4(r17)
    6598:	90801317 	ldw	r2,76(r18)
    659c:	18c7883a 	add	r3,r3,r3
    65a0:	18c7883a 	add	r3,r3,r3
    65a4:	10c5883a 	add	r2,r2,r3
    65a8:	10c00017 	ldw	r3,0(r2)
    65ac:	88c00015 	stw	r3,0(r17)
    65b0:	14400015 	stw	r17,0(r2)
    65b4:	9823883a 	mov	r17,r19
    65b8:	003fd806 	br	651c <__ram_exceptions_end+0xfbfe62c8>
    65bc:	9823883a 	mov	r17,r19
    65c0:	003fd606 	br	651c <__ram_exceptions_end+0xfbfe62c8>

000065c4 <__s2b>:
    65c4:	defff904 	addi	sp,sp,-28
    65c8:	dc400115 	stw	r17,4(sp)
    65cc:	dc000015 	stw	r16,0(sp)
    65d0:	2023883a 	mov	r17,r4
    65d4:	2821883a 	mov	r16,r5
    65d8:	39000204 	addi	r4,r7,8
    65dc:	01400244 	movi	r5,9
    65e0:	dcc00315 	stw	r19,12(sp)
    65e4:	dc800215 	stw	r18,8(sp)
    65e8:	dfc00615 	stw	ra,24(sp)
    65ec:	dd400515 	stw	r21,20(sp)
    65f0:	dd000415 	stw	r20,16(sp)
    65f4:	3825883a 	mov	r18,r7
    65f8:	3027883a 	mov	r19,r6
    65fc:	0000b0c0 	call	b0c <__divsi3>
    6600:	00c00044 	movi	r3,1
    6604:	000b883a 	mov	r5,zero
    6608:	1880030e 	bge	r3,r2,6618 <__s2b+0x54>
    660c:	18c7883a 	add	r3,r3,r3
    6610:	29400044 	addi	r5,r5,1
    6614:	18bffd16 	blt	r3,r2,660c <__ram_exceptions_end+0xfbfe63b8>
    6618:	8809883a 	mov	r4,r17
    661c:	00063d40 	call	63d4 <_Balloc>
    6620:	d8c00717 	ldw	r3,28(sp)
    6624:	10c00515 	stw	r3,20(r2)
    6628:	00c00044 	movi	r3,1
    662c:	10c00415 	stw	r3,16(r2)
    6630:	00c00244 	movi	r3,9
    6634:	1cc0210e 	bge	r3,r19,66bc <__s2b+0xf8>
    6638:	80eb883a 	add	r21,r16,r3
    663c:	a829883a 	mov	r20,r21
    6640:	84e1883a 	add	r16,r16,r19
    6644:	a1c00007 	ldb	r7,0(r20)
    6648:	01800284 	movi	r6,10
    664c:	a5000044 	addi	r20,r20,1
    6650:	100b883a 	mov	r5,r2
    6654:	39fff404 	addi	r7,r7,-48
    6658:	8809883a 	mov	r4,r17
    665c:	00064a40 	call	64a4 <__multadd>
    6660:	a43ff81e 	bne	r20,r16,6644 <__ram_exceptions_end+0xfbfe63f0>
    6664:	ace1883a 	add	r16,r21,r19
    6668:	843ffe04 	addi	r16,r16,-8
    666c:	9c800a0e 	bge	r19,r18,6698 <__s2b+0xd4>
    6670:	94e5c83a 	sub	r18,r18,r19
    6674:	84a5883a 	add	r18,r16,r18
    6678:	81c00007 	ldb	r7,0(r16)
    667c:	01800284 	movi	r6,10
    6680:	84000044 	addi	r16,r16,1
    6684:	100b883a 	mov	r5,r2
    6688:	39fff404 	addi	r7,r7,-48
    668c:	8809883a 	mov	r4,r17
    6690:	00064a40 	call	64a4 <__multadd>
    6694:	84bff81e 	bne	r16,r18,6678 <__ram_exceptions_end+0xfbfe6424>
    6698:	dfc00617 	ldw	ra,24(sp)
    669c:	dd400517 	ldw	r21,20(sp)
    66a0:	dd000417 	ldw	r20,16(sp)
    66a4:	dcc00317 	ldw	r19,12(sp)
    66a8:	dc800217 	ldw	r18,8(sp)
    66ac:	dc400117 	ldw	r17,4(sp)
    66b0:	dc000017 	ldw	r16,0(sp)
    66b4:	dec00704 	addi	sp,sp,28
    66b8:	f800283a 	ret
    66bc:	84000284 	addi	r16,r16,10
    66c0:	1827883a 	mov	r19,r3
    66c4:	003fe906 	br	666c <__ram_exceptions_end+0xfbfe6418>

000066c8 <__hi0bits>:
    66c8:	20bfffec 	andhi	r2,r4,65535
    66cc:	1000141e 	bne	r2,zero,6720 <__hi0bits+0x58>
    66d0:	2008943a 	slli	r4,r4,16
    66d4:	00800404 	movi	r2,16
    66d8:	20ffc02c 	andhi	r3,r4,65280
    66dc:	1800021e 	bne	r3,zero,66e8 <__hi0bits+0x20>
    66e0:	2008923a 	slli	r4,r4,8
    66e4:	10800204 	addi	r2,r2,8
    66e8:	20fc002c 	andhi	r3,r4,61440
    66ec:	1800021e 	bne	r3,zero,66f8 <__hi0bits+0x30>
    66f0:	2008913a 	slli	r4,r4,4
    66f4:	10800104 	addi	r2,r2,4
    66f8:	20f0002c 	andhi	r3,r4,49152
    66fc:	1800031e 	bne	r3,zero,670c <__hi0bits+0x44>
    6700:	2109883a 	add	r4,r4,r4
    6704:	10800084 	addi	r2,r2,2
    6708:	2109883a 	add	r4,r4,r4
    670c:	20000316 	blt	r4,zero,671c <__hi0bits+0x54>
    6710:	2110002c 	andhi	r4,r4,16384
    6714:	2000041e 	bne	r4,zero,6728 <__hi0bits+0x60>
    6718:	00800804 	movi	r2,32
    671c:	f800283a 	ret
    6720:	0005883a 	mov	r2,zero
    6724:	003fec06 	br	66d8 <__ram_exceptions_end+0xfbfe6484>
    6728:	10800044 	addi	r2,r2,1
    672c:	f800283a 	ret

00006730 <__lo0bits>:
    6730:	20c00017 	ldw	r3,0(r4)
    6734:	188001cc 	andi	r2,r3,7
    6738:	10000826 	beq	r2,zero,675c <__lo0bits+0x2c>
    673c:	1880004c 	andi	r2,r3,1
    6740:	1000211e 	bne	r2,zero,67c8 <__lo0bits+0x98>
    6744:	1880008c 	andi	r2,r3,2
    6748:	1000211e 	bne	r2,zero,67d0 <__lo0bits+0xa0>
    674c:	1806d0ba 	srli	r3,r3,2
    6750:	00800084 	movi	r2,2
    6754:	20c00015 	stw	r3,0(r4)
    6758:	f800283a 	ret
    675c:	18bfffcc 	andi	r2,r3,65535
    6760:	10001326 	beq	r2,zero,67b0 <__lo0bits+0x80>
    6764:	0005883a 	mov	r2,zero
    6768:	19403fcc 	andi	r5,r3,255
    676c:	2800021e 	bne	r5,zero,6778 <__lo0bits+0x48>
    6770:	1806d23a 	srli	r3,r3,8
    6774:	10800204 	addi	r2,r2,8
    6778:	194003cc 	andi	r5,r3,15
    677c:	2800021e 	bne	r5,zero,6788 <__lo0bits+0x58>
    6780:	1806d13a 	srli	r3,r3,4
    6784:	10800104 	addi	r2,r2,4
    6788:	194000cc 	andi	r5,r3,3
    678c:	2800021e 	bne	r5,zero,6798 <__lo0bits+0x68>
    6790:	1806d0ba 	srli	r3,r3,2
    6794:	10800084 	addi	r2,r2,2
    6798:	1940004c 	andi	r5,r3,1
    679c:	2800081e 	bne	r5,zero,67c0 <__lo0bits+0x90>
    67a0:	1806d07a 	srli	r3,r3,1
    67a4:	1800051e 	bne	r3,zero,67bc <__lo0bits+0x8c>
    67a8:	00800804 	movi	r2,32
    67ac:	f800283a 	ret
    67b0:	1806d43a 	srli	r3,r3,16
    67b4:	00800404 	movi	r2,16
    67b8:	003feb06 	br	6768 <__ram_exceptions_end+0xfbfe6514>
    67bc:	10800044 	addi	r2,r2,1
    67c0:	20c00015 	stw	r3,0(r4)
    67c4:	f800283a 	ret
    67c8:	0005883a 	mov	r2,zero
    67cc:	f800283a 	ret
    67d0:	1806d07a 	srli	r3,r3,1
    67d4:	00800044 	movi	r2,1
    67d8:	20c00015 	stw	r3,0(r4)
    67dc:	f800283a 	ret

000067e0 <__i2b>:
    67e0:	defffd04 	addi	sp,sp,-12
    67e4:	dc000015 	stw	r16,0(sp)
    67e8:	04000044 	movi	r16,1
    67ec:	dc400115 	stw	r17,4(sp)
    67f0:	2823883a 	mov	r17,r5
    67f4:	800b883a 	mov	r5,r16
    67f8:	dfc00215 	stw	ra,8(sp)
    67fc:	00063d40 	call	63d4 <_Balloc>
    6800:	14400515 	stw	r17,20(r2)
    6804:	14000415 	stw	r16,16(r2)
    6808:	dfc00217 	ldw	ra,8(sp)
    680c:	dc400117 	ldw	r17,4(sp)
    6810:	dc000017 	ldw	r16,0(sp)
    6814:	dec00304 	addi	sp,sp,12
    6818:	f800283a 	ret

0000681c <__multiply>:
    681c:	defffa04 	addi	sp,sp,-24
    6820:	dcc00315 	stw	r19,12(sp)
    6824:	dc800215 	stw	r18,8(sp)
    6828:	34c00417 	ldw	r19,16(r6)
    682c:	2c800417 	ldw	r18,16(r5)
    6830:	dd000415 	stw	r20,16(sp)
    6834:	dc400115 	stw	r17,4(sp)
    6838:	dfc00515 	stw	ra,20(sp)
    683c:	dc000015 	stw	r16,0(sp)
    6840:	2829883a 	mov	r20,r5
    6844:	3023883a 	mov	r17,r6
    6848:	94c0050e 	bge	r18,r19,6860 <__multiply+0x44>
    684c:	9007883a 	mov	r3,r18
    6850:	3029883a 	mov	r20,r6
    6854:	9825883a 	mov	r18,r19
    6858:	2823883a 	mov	r17,r5
    685c:	1827883a 	mov	r19,r3
    6860:	a0800217 	ldw	r2,8(r20)
    6864:	94e1883a 	add	r16,r18,r19
    6868:	a1400117 	ldw	r5,4(r20)
    686c:	1400010e 	bge	r2,r16,6874 <__multiply+0x58>
    6870:	29400044 	addi	r5,r5,1
    6874:	00063d40 	call	63d4 <_Balloc>
    6878:	8415883a 	add	r10,r16,r16
    687c:	12c00504 	addi	r11,r2,20
    6880:	5295883a 	add	r10,r10,r10
    6884:	5a95883a 	add	r10,r11,r10
    6888:	5807883a 	mov	r3,r11
    688c:	5a80032e 	bgeu	r11,r10,689c <__multiply+0x80>
    6890:	18000015 	stw	zero,0(r3)
    6894:	18c00104 	addi	r3,r3,4
    6898:	1abffd36 	bltu	r3,r10,6890 <__ram_exceptions_end+0xfbfe663c>
    689c:	9ce7883a 	add	r19,r19,r19
    68a0:	94a5883a 	add	r18,r18,r18
    68a4:	89800504 	addi	r6,r17,20
    68a8:	9ce7883a 	add	r19,r19,r19
    68ac:	a3400504 	addi	r13,r20,20
    68b0:	94a5883a 	add	r18,r18,r18
    68b4:	34d9883a 	add	r12,r6,r19
    68b8:	6c93883a 	add	r9,r13,r18
    68bc:	3300422e 	bgeu	r6,r12,69c8 <__multiply+0x1ac>
    68c0:	37c00017 	ldw	ra,0(r6)
    68c4:	fbffffcc 	andi	r15,ra,65535
    68c8:	78001b26 	beq	r15,zero,6938 <__multiply+0x11c>
    68cc:	5811883a 	mov	r8,r11
    68d0:	681d883a 	mov	r14,r13
    68d4:	000f883a 	mov	r7,zero
    68d8:	71000017 	ldw	r4,0(r14)
    68dc:	40c00017 	ldw	r3,0(r8)
    68e0:	73800104 	addi	r14,r14,4
    68e4:	217fffcc 	andi	r5,r4,65535
    68e8:	2bcb383a 	mul	r5,r5,r15
    68ec:	2008d43a 	srli	r4,r4,16
    68f0:	1c7fffcc 	andi	r17,r3,65535
    68f4:	2c4b883a 	add	r5,r5,r17
    68f8:	29cb883a 	add	r5,r5,r7
    68fc:	23c9383a 	mul	r4,r4,r15
    6900:	1806d43a 	srli	r3,r3,16
    6904:	280ed43a 	srli	r7,r5,16
    6908:	297fffcc 	andi	r5,r5,65535
    690c:	20c7883a 	add	r3,r4,r3
    6910:	19c7883a 	add	r3,r3,r7
    6914:	1808943a 	slli	r4,r3,16
    6918:	4023883a 	mov	r17,r8
    691c:	180ed43a 	srli	r7,r3,16
    6920:	214ab03a 	or	r5,r4,r5
    6924:	41400015 	stw	r5,0(r8)
    6928:	42000104 	addi	r8,r8,4
    692c:	727fea36 	bltu	r14,r9,68d8 <__ram_exceptions_end+0xfbfe6684>
    6930:	89c00115 	stw	r7,4(r17)
    6934:	37c00017 	ldw	ra,0(r6)
    6938:	f83ed43a 	srli	ra,ra,16
    693c:	f8001f26 	beq	ra,zero,69bc <__multiply+0x1a0>
    6940:	58c00017 	ldw	r3,0(r11)
    6944:	681d883a 	mov	r14,r13
    6948:	581f883a 	mov	r15,r11
    694c:	1811883a 	mov	r8,r3
    6950:	5825883a 	mov	r18,r11
    6954:	000f883a 	mov	r7,zero
    6958:	00000106 	br	6960 <__multiply+0x144>
    695c:	8825883a 	mov	r18,r17
    6960:	7140000b 	ldhu	r5,0(r14)
    6964:	4010d43a 	srli	r8,r8,16
    6968:	193fffcc 	andi	r4,r3,65535
    696c:	2fcb383a 	mul	r5,r5,ra
    6970:	7bc00104 	addi	r15,r15,4
    6974:	73800104 	addi	r14,r14,4
    6978:	2a0b883a 	add	r5,r5,r8
    697c:	29cb883a 	add	r5,r5,r7
    6980:	2806943a 	slli	r3,r5,16
    6984:	94400104 	addi	r17,r18,4
    6988:	280ad43a 	srli	r5,r5,16
    698c:	1908b03a 	or	r4,r3,r4
    6990:	793fff15 	stw	r4,-4(r15)
    6994:	70ffff17 	ldw	r3,-4(r14)
    6998:	8a000017 	ldw	r8,0(r17)
    699c:	1806d43a 	srli	r3,r3,16
    69a0:	413fffcc 	andi	r4,r8,65535
    69a4:	1fc7383a 	mul	r3,r3,ra
    69a8:	1907883a 	add	r3,r3,r4
    69ac:	1947883a 	add	r3,r3,r5
    69b0:	180ed43a 	srli	r7,r3,16
    69b4:	727fe936 	bltu	r14,r9,695c <__ram_exceptions_end+0xfbfe6708>
    69b8:	90c00115 	stw	r3,4(r18)
    69bc:	31800104 	addi	r6,r6,4
    69c0:	5ac00104 	addi	r11,r11,4
    69c4:	333fbe36 	bltu	r6,r12,68c0 <__ram_exceptions_end+0xfbfe666c>
    69c8:	0400090e 	bge	zero,r16,69f0 <__multiply+0x1d4>
    69cc:	50ffff17 	ldw	r3,-4(r10)
    69d0:	52bfff04 	addi	r10,r10,-4
    69d4:	18000326 	beq	r3,zero,69e4 <__multiply+0x1c8>
    69d8:	00000506 	br	69f0 <__multiply+0x1d4>
    69dc:	50c00017 	ldw	r3,0(r10)
    69e0:	1800031e 	bne	r3,zero,69f0 <__multiply+0x1d4>
    69e4:	843fffc4 	addi	r16,r16,-1
    69e8:	52bfff04 	addi	r10,r10,-4
    69ec:	803ffb1e 	bne	r16,zero,69dc <__ram_exceptions_end+0xfbfe6788>
    69f0:	14000415 	stw	r16,16(r2)
    69f4:	dfc00517 	ldw	ra,20(sp)
    69f8:	dd000417 	ldw	r20,16(sp)
    69fc:	dcc00317 	ldw	r19,12(sp)
    6a00:	dc800217 	ldw	r18,8(sp)
    6a04:	dc400117 	ldw	r17,4(sp)
    6a08:	dc000017 	ldw	r16,0(sp)
    6a0c:	dec00604 	addi	sp,sp,24
    6a10:	f800283a 	ret

00006a14 <__pow5mult>:
    6a14:	defffa04 	addi	sp,sp,-24
    6a18:	dcc00315 	stw	r19,12(sp)
    6a1c:	dc000015 	stw	r16,0(sp)
    6a20:	dfc00515 	stw	ra,20(sp)
    6a24:	dd000415 	stw	r20,16(sp)
    6a28:	dc800215 	stw	r18,8(sp)
    6a2c:	dc400115 	stw	r17,4(sp)
    6a30:	308000cc 	andi	r2,r6,3
    6a34:	3021883a 	mov	r16,r6
    6a38:	2027883a 	mov	r19,r4
    6a3c:	10002f1e 	bne	r2,zero,6afc <__pow5mult+0xe8>
    6a40:	2825883a 	mov	r18,r5
    6a44:	8021d0ba 	srai	r16,r16,2
    6a48:	80001a26 	beq	r16,zero,6ab4 <__pow5mult+0xa0>
    6a4c:	9c401217 	ldw	r17,72(r19)
    6a50:	8800061e 	bne	r17,zero,6a6c <__pow5mult+0x58>
    6a54:	00003406 	br	6b28 <__pow5mult+0x114>
    6a58:	8021d07a 	srai	r16,r16,1
    6a5c:	80001526 	beq	r16,zero,6ab4 <__pow5mult+0xa0>
    6a60:	88800017 	ldw	r2,0(r17)
    6a64:	10001c26 	beq	r2,zero,6ad8 <__pow5mult+0xc4>
    6a68:	1023883a 	mov	r17,r2
    6a6c:	8080004c 	andi	r2,r16,1
    6a70:	103ff926 	beq	r2,zero,6a58 <__ram_exceptions_end+0xfbfe6804>
    6a74:	880d883a 	mov	r6,r17
    6a78:	900b883a 	mov	r5,r18
    6a7c:	9809883a 	mov	r4,r19
    6a80:	000681c0 	call	681c <__multiply>
    6a84:	90001b26 	beq	r18,zero,6af4 <__pow5mult+0xe0>
    6a88:	91000117 	ldw	r4,4(r18)
    6a8c:	98c01317 	ldw	r3,76(r19)
    6a90:	8021d07a 	srai	r16,r16,1
    6a94:	2109883a 	add	r4,r4,r4
    6a98:	2109883a 	add	r4,r4,r4
    6a9c:	1907883a 	add	r3,r3,r4
    6aa0:	19000017 	ldw	r4,0(r3)
    6aa4:	91000015 	stw	r4,0(r18)
    6aa8:	1c800015 	stw	r18,0(r3)
    6aac:	1025883a 	mov	r18,r2
    6ab0:	803feb1e 	bne	r16,zero,6a60 <__ram_exceptions_end+0xfbfe680c>
    6ab4:	9005883a 	mov	r2,r18
    6ab8:	dfc00517 	ldw	ra,20(sp)
    6abc:	dd000417 	ldw	r20,16(sp)
    6ac0:	dcc00317 	ldw	r19,12(sp)
    6ac4:	dc800217 	ldw	r18,8(sp)
    6ac8:	dc400117 	ldw	r17,4(sp)
    6acc:	dc000017 	ldw	r16,0(sp)
    6ad0:	dec00604 	addi	sp,sp,24
    6ad4:	f800283a 	ret
    6ad8:	880d883a 	mov	r6,r17
    6adc:	880b883a 	mov	r5,r17
    6ae0:	9809883a 	mov	r4,r19
    6ae4:	000681c0 	call	681c <__multiply>
    6ae8:	88800015 	stw	r2,0(r17)
    6aec:	10000015 	stw	zero,0(r2)
    6af0:	003fdd06 	br	6a68 <__ram_exceptions_end+0xfbfe6814>
    6af4:	1025883a 	mov	r18,r2
    6af8:	003fd706 	br	6a58 <__ram_exceptions_end+0xfbfe6804>
    6afc:	10bfffc4 	addi	r2,r2,-1
    6b00:	1085883a 	add	r2,r2,r2
    6b04:	00c00074 	movhi	r3,1
    6b08:	18c06104 	addi	r3,r3,388
    6b0c:	1085883a 	add	r2,r2,r2
    6b10:	1885883a 	add	r2,r3,r2
    6b14:	11800017 	ldw	r6,0(r2)
    6b18:	000f883a 	mov	r7,zero
    6b1c:	00064a40 	call	64a4 <__multadd>
    6b20:	1025883a 	mov	r18,r2
    6b24:	003fc706 	br	6a44 <__ram_exceptions_end+0xfbfe67f0>
    6b28:	05000044 	movi	r20,1
    6b2c:	a00b883a 	mov	r5,r20
    6b30:	9809883a 	mov	r4,r19
    6b34:	00063d40 	call	63d4 <_Balloc>
    6b38:	1023883a 	mov	r17,r2
    6b3c:	00809c44 	movi	r2,625
    6b40:	88800515 	stw	r2,20(r17)
    6b44:	8d000415 	stw	r20,16(r17)
    6b48:	9c401215 	stw	r17,72(r19)
    6b4c:	88000015 	stw	zero,0(r17)
    6b50:	003fc606 	br	6a6c <__ram_exceptions_end+0xfbfe6818>

00006b54 <__lshift>:
    6b54:	defff904 	addi	sp,sp,-28
    6b58:	dd400515 	stw	r21,20(sp)
    6b5c:	dcc00315 	stw	r19,12(sp)
    6b60:	302bd17a 	srai	r21,r6,5
    6b64:	2cc00417 	ldw	r19,16(r5)
    6b68:	28800217 	ldw	r2,8(r5)
    6b6c:	dd000415 	stw	r20,16(sp)
    6b70:	ace7883a 	add	r19,r21,r19
    6b74:	dc800215 	stw	r18,8(sp)
    6b78:	dc400115 	stw	r17,4(sp)
    6b7c:	dc000015 	stw	r16,0(sp)
    6b80:	dfc00615 	stw	ra,24(sp)
    6b84:	9c000044 	addi	r16,r19,1
    6b88:	2823883a 	mov	r17,r5
    6b8c:	3029883a 	mov	r20,r6
    6b90:	2025883a 	mov	r18,r4
    6b94:	29400117 	ldw	r5,4(r5)
    6b98:	1400030e 	bge	r2,r16,6ba8 <__lshift+0x54>
    6b9c:	1085883a 	add	r2,r2,r2
    6ba0:	29400044 	addi	r5,r5,1
    6ba4:	143ffd16 	blt	r2,r16,6b9c <__ram_exceptions_end+0xfbfe6948>
    6ba8:	9009883a 	mov	r4,r18
    6bac:	00063d40 	call	63d4 <_Balloc>
    6bb0:	10c00504 	addi	r3,r2,20
    6bb4:	0540070e 	bge	zero,r21,6bd4 <__lshift+0x80>
    6bb8:	ad6b883a 	add	r21,r21,r21
    6bbc:	ad6b883a 	add	r21,r21,r21
    6bc0:	1809883a 	mov	r4,r3
    6bc4:	1d47883a 	add	r3,r3,r21
    6bc8:	20000015 	stw	zero,0(r4)
    6bcc:	21000104 	addi	r4,r4,4
    6bd0:	193ffd1e 	bne	r3,r4,6bc8 <__ram_exceptions_end+0xfbfe6974>
    6bd4:	8a000417 	ldw	r8,16(r17)
    6bd8:	89000504 	addi	r4,r17,20
    6bdc:	a18007cc 	andi	r6,r20,31
    6be0:	4211883a 	add	r8,r8,r8
    6be4:	4211883a 	add	r8,r8,r8
    6be8:	2211883a 	add	r8,r4,r8
    6bec:	30002326 	beq	r6,zero,6c7c <__lshift+0x128>
    6bf0:	02400804 	movi	r9,32
    6bf4:	4993c83a 	sub	r9,r9,r6
    6bf8:	000b883a 	mov	r5,zero
    6bfc:	21c00017 	ldw	r7,0(r4)
    6c00:	1815883a 	mov	r10,r3
    6c04:	18c00104 	addi	r3,r3,4
    6c08:	398e983a 	sll	r7,r7,r6
    6c0c:	21000104 	addi	r4,r4,4
    6c10:	394ab03a 	or	r5,r7,r5
    6c14:	197fff15 	stw	r5,-4(r3)
    6c18:	217fff17 	ldw	r5,-4(r4)
    6c1c:	2a4ad83a 	srl	r5,r5,r9
    6c20:	223ff636 	bltu	r4,r8,6bfc <__ram_exceptions_end+0xfbfe69a8>
    6c24:	51400115 	stw	r5,4(r10)
    6c28:	28001a1e 	bne	r5,zero,6c94 <__lshift+0x140>
    6c2c:	843fffc4 	addi	r16,r16,-1
    6c30:	14000415 	stw	r16,16(r2)
    6c34:	88000826 	beq	r17,zero,6c58 <__lshift+0x104>
    6c38:	89000117 	ldw	r4,4(r17)
    6c3c:	90c01317 	ldw	r3,76(r18)
    6c40:	2109883a 	add	r4,r4,r4
    6c44:	2109883a 	add	r4,r4,r4
    6c48:	1907883a 	add	r3,r3,r4
    6c4c:	19000017 	ldw	r4,0(r3)
    6c50:	89000015 	stw	r4,0(r17)
    6c54:	1c400015 	stw	r17,0(r3)
    6c58:	dfc00617 	ldw	ra,24(sp)
    6c5c:	dd400517 	ldw	r21,20(sp)
    6c60:	dd000417 	ldw	r20,16(sp)
    6c64:	dcc00317 	ldw	r19,12(sp)
    6c68:	dc800217 	ldw	r18,8(sp)
    6c6c:	dc400117 	ldw	r17,4(sp)
    6c70:	dc000017 	ldw	r16,0(sp)
    6c74:	dec00704 	addi	sp,sp,28
    6c78:	f800283a 	ret
    6c7c:	21400017 	ldw	r5,0(r4)
    6c80:	18c00104 	addi	r3,r3,4
    6c84:	21000104 	addi	r4,r4,4
    6c88:	197fff15 	stw	r5,-4(r3)
    6c8c:	223ffb36 	bltu	r4,r8,6c7c <__ram_exceptions_end+0xfbfe6a28>
    6c90:	003fe606 	br	6c2c <__ram_exceptions_end+0xfbfe69d8>
    6c94:	9c000084 	addi	r16,r19,2
    6c98:	003fe406 	br	6c2c <__ram_exceptions_end+0xfbfe69d8>

00006c9c <__mcmp>:
    6c9c:	20800417 	ldw	r2,16(r4)
    6ca0:	28c00417 	ldw	r3,16(r5)
    6ca4:	10c5c83a 	sub	r2,r2,r3
    6ca8:	1000111e 	bne	r2,zero,6cf0 <__mcmp+0x54>
    6cac:	18c7883a 	add	r3,r3,r3
    6cb0:	18c7883a 	add	r3,r3,r3
    6cb4:	21000504 	addi	r4,r4,20
    6cb8:	29400504 	addi	r5,r5,20
    6cbc:	20c5883a 	add	r2,r4,r3
    6cc0:	28cb883a 	add	r5,r5,r3
    6cc4:	00000106 	br	6ccc <__mcmp+0x30>
    6cc8:	20800a2e 	bgeu	r4,r2,6cf4 <__mcmp+0x58>
    6ccc:	10bfff04 	addi	r2,r2,-4
    6cd0:	297fff04 	addi	r5,r5,-4
    6cd4:	11800017 	ldw	r6,0(r2)
    6cd8:	28c00017 	ldw	r3,0(r5)
    6cdc:	30fffa26 	beq	r6,r3,6cc8 <__ram_exceptions_end+0xfbfe6a74>
    6ce0:	30c00236 	bltu	r6,r3,6cec <__mcmp+0x50>
    6ce4:	00800044 	movi	r2,1
    6ce8:	f800283a 	ret
    6cec:	00bfffc4 	movi	r2,-1
    6cf0:	f800283a 	ret
    6cf4:	0005883a 	mov	r2,zero
    6cf8:	f800283a 	ret

00006cfc <__mdiff>:
    6cfc:	28c00417 	ldw	r3,16(r5)
    6d00:	30800417 	ldw	r2,16(r6)
    6d04:	defffa04 	addi	sp,sp,-24
    6d08:	dcc00315 	stw	r19,12(sp)
    6d0c:	dc800215 	stw	r18,8(sp)
    6d10:	dfc00515 	stw	ra,20(sp)
    6d14:	dd000415 	stw	r20,16(sp)
    6d18:	dc400115 	stw	r17,4(sp)
    6d1c:	dc000015 	stw	r16,0(sp)
    6d20:	1887c83a 	sub	r3,r3,r2
    6d24:	2825883a 	mov	r18,r5
    6d28:	3027883a 	mov	r19,r6
    6d2c:	1800141e 	bne	r3,zero,6d80 <__mdiff+0x84>
    6d30:	1085883a 	add	r2,r2,r2
    6d34:	1085883a 	add	r2,r2,r2
    6d38:	2a000504 	addi	r8,r5,20
    6d3c:	34000504 	addi	r16,r6,20
    6d40:	4087883a 	add	r3,r8,r2
    6d44:	8085883a 	add	r2,r16,r2
    6d48:	00000106 	br	6d50 <__mdiff+0x54>
    6d4c:	40c0592e 	bgeu	r8,r3,6eb4 <__mdiff+0x1b8>
    6d50:	18ffff04 	addi	r3,r3,-4
    6d54:	10bfff04 	addi	r2,r2,-4
    6d58:	19c00017 	ldw	r7,0(r3)
    6d5c:	11400017 	ldw	r5,0(r2)
    6d60:	397ffa26 	beq	r7,r5,6d4c <__ram_exceptions_end+0xfbfe6af8>
    6d64:	3940592e 	bgeu	r7,r5,6ecc <__mdiff+0x1d0>
    6d68:	9005883a 	mov	r2,r18
    6d6c:	4023883a 	mov	r17,r8
    6d70:	9825883a 	mov	r18,r19
    6d74:	05000044 	movi	r20,1
    6d78:	1027883a 	mov	r19,r2
    6d7c:	00000406 	br	6d90 <__mdiff+0x94>
    6d80:	18005616 	blt	r3,zero,6edc <__mdiff+0x1e0>
    6d84:	34400504 	addi	r17,r6,20
    6d88:	2c000504 	addi	r16,r5,20
    6d8c:	0029883a 	mov	r20,zero
    6d90:	91400117 	ldw	r5,4(r18)
    6d94:	00063d40 	call	63d4 <_Balloc>
    6d98:	92400417 	ldw	r9,16(r18)
    6d9c:	9b000417 	ldw	r12,16(r19)
    6da0:	12c00504 	addi	r11,r2,20
    6da4:	4a51883a 	add	r8,r9,r9
    6da8:	6319883a 	add	r12,r12,r12
    6dac:	4211883a 	add	r8,r8,r8
    6db0:	6319883a 	add	r12,r12,r12
    6db4:	15000315 	stw	r20,12(r2)
    6db8:	8211883a 	add	r8,r16,r8
    6dbc:	8b19883a 	add	r12,r17,r12
    6dc0:	0007883a 	mov	r3,zero
    6dc4:	81400017 	ldw	r5,0(r16)
    6dc8:	89c00017 	ldw	r7,0(r17)
    6dcc:	59800104 	addi	r6,r11,4
    6dd0:	293fffcc 	andi	r4,r5,65535
    6dd4:	20c7883a 	add	r3,r4,r3
    6dd8:	393fffcc 	andi	r4,r7,65535
    6ddc:	1909c83a 	sub	r4,r3,r4
    6de0:	280ad43a 	srli	r5,r5,16
    6de4:	380ed43a 	srli	r7,r7,16
    6de8:	2007d43a 	srai	r3,r4,16
    6dec:	213fffcc 	andi	r4,r4,65535
    6df0:	29cbc83a 	sub	r5,r5,r7
    6df4:	28c7883a 	add	r3,r5,r3
    6df8:	180a943a 	slli	r5,r3,16
    6dfc:	8c400104 	addi	r17,r17,4
    6e00:	84000104 	addi	r16,r16,4
    6e04:	2908b03a 	or	r4,r5,r4
    6e08:	59000015 	stw	r4,0(r11)
    6e0c:	1807d43a 	srai	r3,r3,16
    6e10:	3015883a 	mov	r10,r6
    6e14:	3017883a 	mov	r11,r6
    6e18:	8b3fea36 	bltu	r17,r12,6dc4 <__ram_exceptions_end+0xfbfe6b70>
    6e1c:	8200162e 	bgeu	r16,r8,6e78 <__mdiff+0x17c>
    6e20:	8017883a 	mov	r11,r16
    6e24:	59400017 	ldw	r5,0(r11)
    6e28:	31800104 	addi	r6,r6,4
    6e2c:	5ac00104 	addi	r11,r11,4
    6e30:	293fffcc 	andi	r4,r5,65535
    6e34:	20c7883a 	add	r3,r4,r3
    6e38:	280ed43a 	srli	r7,r5,16
    6e3c:	180bd43a 	srai	r5,r3,16
    6e40:	193fffcc 	andi	r4,r3,65535
    6e44:	3947883a 	add	r3,r7,r5
    6e48:	180a943a 	slli	r5,r3,16
    6e4c:	1807d43a 	srai	r3,r3,16
    6e50:	2908b03a 	or	r4,r5,r4
    6e54:	313fff15 	stw	r4,-4(r6)
    6e58:	5a3ff236 	bltu	r11,r8,6e24 <__ram_exceptions_end+0xfbfe6bd0>
    6e5c:	0406303a 	nor	r3,zero,r16
    6e60:	1a07883a 	add	r3,r3,r8
    6e64:	1806d0ba 	srli	r3,r3,2
    6e68:	18c00044 	addi	r3,r3,1
    6e6c:	18c7883a 	add	r3,r3,r3
    6e70:	18c7883a 	add	r3,r3,r3
    6e74:	50d5883a 	add	r10,r10,r3
    6e78:	50ffff04 	addi	r3,r10,-4
    6e7c:	2000041e 	bne	r4,zero,6e90 <__mdiff+0x194>
    6e80:	18ffff04 	addi	r3,r3,-4
    6e84:	19000017 	ldw	r4,0(r3)
    6e88:	4a7fffc4 	addi	r9,r9,-1
    6e8c:	203ffc26 	beq	r4,zero,6e80 <__ram_exceptions_end+0xfbfe6c2c>
    6e90:	12400415 	stw	r9,16(r2)
    6e94:	dfc00517 	ldw	ra,20(sp)
    6e98:	dd000417 	ldw	r20,16(sp)
    6e9c:	dcc00317 	ldw	r19,12(sp)
    6ea0:	dc800217 	ldw	r18,8(sp)
    6ea4:	dc400117 	ldw	r17,4(sp)
    6ea8:	dc000017 	ldw	r16,0(sp)
    6eac:	dec00604 	addi	sp,sp,24
    6eb0:	f800283a 	ret
    6eb4:	000b883a 	mov	r5,zero
    6eb8:	00063d40 	call	63d4 <_Balloc>
    6ebc:	00c00044 	movi	r3,1
    6ec0:	10c00415 	stw	r3,16(r2)
    6ec4:	10000515 	stw	zero,20(r2)
    6ec8:	003ff206 	br	6e94 <__ram_exceptions_end+0xfbfe6c40>
    6ecc:	8023883a 	mov	r17,r16
    6ed0:	0029883a 	mov	r20,zero
    6ed4:	4021883a 	mov	r16,r8
    6ed8:	003fad06 	br	6d90 <__ram_exceptions_end+0xfbfe6b3c>
    6edc:	9005883a 	mov	r2,r18
    6ee0:	94400504 	addi	r17,r18,20
    6ee4:	9c000504 	addi	r16,r19,20
    6ee8:	9825883a 	mov	r18,r19
    6eec:	05000044 	movi	r20,1
    6ef0:	1027883a 	mov	r19,r2
    6ef4:	003fa606 	br	6d90 <__ram_exceptions_end+0xfbfe6b3c>

00006ef8 <__ulp>:
    6ef8:	295ffc2c 	andhi	r5,r5,32752
    6efc:	00bf3034 	movhi	r2,64704
    6f00:	2887883a 	add	r3,r5,r2
    6f04:	00c0020e 	bge	zero,r3,6f10 <__ulp+0x18>
    6f08:	0005883a 	mov	r2,zero
    6f0c:	f800283a 	ret
    6f10:	00c7c83a 	sub	r3,zero,r3
    6f14:	1807d53a 	srai	r3,r3,20
    6f18:	008004c4 	movi	r2,19
    6f1c:	10c00b0e 	bge	r2,r3,6f4c <__ulp+0x54>
    6f20:	18bffb04 	addi	r2,r3,-20
    6f24:	01000784 	movi	r4,30
    6f28:	0007883a 	mov	r3,zero
    6f2c:	20800516 	blt	r4,r2,6f44 <__ulp+0x4c>
    6f30:	010007c4 	movi	r4,31
    6f34:	2089c83a 	sub	r4,r4,r2
    6f38:	00800044 	movi	r2,1
    6f3c:	1104983a 	sll	r2,r2,r4
    6f40:	f800283a 	ret
    6f44:	00800044 	movi	r2,1
    6f48:	f800283a 	ret
    6f4c:	01400234 	movhi	r5,8
    6f50:	28c7d83a 	sra	r3,r5,r3
    6f54:	0005883a 	mov	r2,zero
    6f58:	f800283a 	ret

00006f5c <__b2d>:
    6f5c:	defffa04 	addi	sp,sp,-24
    6f60:	dc000015 	stw	r16,0(sp)
    6f64:	24000417 	ldw	r16,16(r4)
    6f68:	dc400115 	stw	r17,4(sp)
    6f6c:	24400504 	addi	r17,r4,20
    6f70:	8421883a 	add	r16,r16,r16
    6f74:	8421883a 	add	r16,r16,r16
    6f78:	8c21883a 	add	r16,r17,r16
    6f7c:	dc800215 	stw	r18,8(sp)
    6f80:	84bfff17 	ldw	r18,-4(r16)
    6f84:	dd000415 	stw	r20,16(sp)
    6f88:	dcc00315 	stw	r19,12(sp)
    6f8c:	9009883a 	mov	r4,r18
    6f90:	2829883a 	mov	r20,r5
    6f94:	dfc00515 	stw	ra,20(sp)
    6f98:	00066c80 	call	66c8 <__hi0bits>
    6f9c:	00c00804 	movi	r3,32
    6fa0:	1889c83a 	sub	r4,r3,r2
    6fa4:	a1000015 	stw	r4,0(r20)
    6fa8:	01000284 	movi	r4,10
    6fac:	84ffff04 	addi	r19,r16,-4
    6fb0:	20801216 	blt	r4,r2,6ffc <__b2d+0xa0>
    6fb4:	018002c4 	movi	r6,11
    6fb8:	308dc83a 	sub	r6,r6,r2
    6fbc:	9186d83a 	srl	r3,r18,r6
    6fc0:	18cffc34 	orhi	r3,r3,16368
    6fc4:	8cc0212e 	bgeu	r17,r19,704c <__b2d+0xf0>
    6fc8:	813ffe17 	ldw	r4,-8(r16)
    6fcc:	218cd83a 	srl	r6,r4,r6
    6fd0:	10800544 	addi	r2,r2,21
    6fd4:	9084983a 	sll	r2,r18,r2
    6fd8:	1184b03a 	or	r2,r2,r6
    6fdc:	dfc00517 	ldw	ra,20(sp)
    6fe0:	dd000417 	ldw	r20,16(sp)
    6fe4:	dcc00317 	ldw	r19,12(sp)
    6fe8:	dc800217 	ldw	r18,8(sp)
    6fec:	dc400117 	ldw	r17,4(sp)
    6ff0:	dc000017 	ldw	r16,0(sp)
    6ff4:	dec00604 	addi	sp,sp,24
    6ff8:	f800283a 	ret
    6ffc:	8cc00f2e 	bgeu	r17,r19,703c <__b2d+0xe0>
    7000:	117ffd44 	addi	r5,r2,-11
    7004:	80bffe17 	ldw	r2,-8(r16)
    7008:	28000e26 	beq	r5,zero,7044 <__b2d+0xe8>
    700c:	1949c83a 	sub	r4,r3,r5
    7010:	9164983a 	sll	r18,r18,r5
    7014:	1106d83a 	srl	r3,r2,r4
    7018:	81bffe04 	addi	r6,r16,-8
    701c:	948ffc34 	orhi	r18,r18,16368
    7020:	90c6b03a 	or	r3,r18,r3
    7024:	89800e2e 	bgeu	r17,r6,7060 <__b2d+0x104>
    7028:	81bffd17 	ldw	r6,-12(r16)
    702c:	1144983a 	sll	r2,r2,r5
    7030:	310ad83a 	srl	r5,r6,r4
    7034:	2884b03a 	or	r2,r5,r2
    7038:	003fe806 	br	6fdc <__ram_exceptions_end+0xfbfe6d88>
    703c:	10bffd44 	addi	r2,r2,-11
    7040:	1000041e 	bne	r2,zero,7054 <__b2d+0xf8>
    7044:	90cffc34 	orhi	r3,r18,16368
    7048:	003fe406 	br	6fdc <__ram_exceptions_end+0xfbfe6d88>
    704c:	000d883a 	mov	r6,zero
    7050:	003fdf06 	br	6fd0 <__ram_exceptions_end+0xfbfe6d7c>
    7054:	90a4983a 	sll	r18,r18,r2
    7058:	0005883a 	mov	r2,zero
    705c:	003ff906 	br	7044 <__ram_exceptions_end+0xfbfe6df0>
    7060:	1144983a 	sll	r2,r2,r5
    7064:	003fdd06 	br	6fdc <__ram_exceptions_end+0xfbfe6d88>

00007068 <__d2b>:
    7068:	defff804 	addi	sp,sp,-32
    706c:	dc000215 	stw	r16,8(sp)
    7070:	3021883a 	mov	r16,r6
    7074:	dc400315 	stw	r17,12(sp)
    7078:	8022907a 	slli	r17,r16,1
    707c:	dd000615 	stw	r20,24(sp)
    7080:	2829883a 	mov	r20,r5
    7084:	01400044 	movi	r5,1
    7088:	dcc00515 	stw	r19,20(sp)
    708c:	dc800415 	stw	r18,16(sp)
    7090:	dfc00715 	stw	ra,28(sp)
    7094:	3825883a 	mov	r18,r7
    7098:	8822d57a 	srli	r17,r17,21
    709c:	00063d40 	call	63d4 <_Balloc>
    70a0:	1027883a 	mov	r19,r2
    70a4:	00800434 	movhi	r2,16
    70a8:	10bfffc4 	addi	r2,r2,-1
    70ac:	808c703a 	and	r6,r16,r2
    70b0:	88000126 	beq	r17,zero,70b8 <__d2b+0x50>
    70b4:	31800434 	orhi	r6,r6,16
    70b8:	d9800015 	stw	r6,0(sp)
    70bc:	a0002426 	beq	r20,zero,7150 <__d2b+0xe8>
    70c0:	d9000104 	addi	r4,sp,4
    70c4:	dd000115 	stw	r20,4(sp)
    70c8:	00067300 	call	6730 <__lo0bits>
    70cc:	d8c00017 	ldw	r3,0(sp)
    70d0:	10002f1e 	bne	r2,zero,7190 <__d2b+0x128>
    70d4:	d9000117 	ldw	r4,4(sp)
    70d8:	99000515 	stw	r4,20(r19)
    70dc:	1821003a 	cmpeq	r16,r3,zero
    70e0:	01000084 	movi	r4,2
    70e4:	2421c83a 	sub	r16,r4,r16
    70e8:	98c00615 	stw	r3,24(r19)
    70ec:	9c000415 	stw	r16,16(r19)
    70f0:	88001f1e 	bne	r17,zero,7170 <__d2b+0x108>
    70f4:	10bef384 	addi	r2,r2,-1074
    70f8:	90800015 	stw	r2,0(r18)
    70fc:	00900034 	movhi	r2,16384
    7100:	10bfffc4 	addi	r2,r2,-1
    7104:	8085883a 	add	r2,r16,r2
    7108:	1085883a 	add	r2,r2,r2
    710c:	1085883a 	add	r2,r2,r2
    7110:	9885883a 	add	r2,r19,r2
    7114:	11000517 	ldw	r4,20(r2)
    7118:	8020917a 	slli	r16,r16,5
    711c:	00066c80 	call	66c8 <__hi0bits>
    7120:	d8c00817 	ldw	r3,32(sp)
    7124:	8085c83a 	sub	r2,r16,r2
    7128:	18800015 	stw	r2,0(r3)
    712c:	9805883a 	mov	r2,r19
    7130:	dfc00717 	ldw	ra,28(sp)
    7134:	dd000617 	ldw	r20,24(sp)
    7138:	dcc00517 	ldw	r19,20(sp)
    713c:	dc800417 	ldw	r18,16(sp)
    7140:	dc400317 	ldw	r17,12(sp)
    7144:	dc000217 	ldw	r16,8(sp)
    7148:	dec00804 	addi	sp,sp,32
    714c:	f800283a 	ret
    7150:	d809883a 	mov	r4,sp
    7154:	00067300 	call	6730 <__lo0bits>
    7158:	d8c00017 	ldw	r3,0(sp)
    715c:	04000044 	movi	r16,1
    7160:	9c000415 	stw	r16,16(r19)
    7164:	98c00515 	stw	r3,20(r19)
    7168:	10800804 	addi	r2,r2,32
    716c:	883fe126 	beq	r17,zero,70f4 <__ram_exceptions_end+0xfbfe6ea0>
    7170:	00c00d44 	movi	r3,53
    7174:	8c7ef344 	addi	r17,r17,-1075
    7178:	88a3883a 	add	r17,r17,r2
    717c:	1885c83a 	sub	r2,r3,r2
    7180:	d8c00817 	ldw	r3,32(sp)
    7184:	94400015 	stw	r17,0(r18)
    7188:	18800015 	stw	r2,0(r3)
    718c:	003fe706 	br	712c <__ram_exceptions_end+0xfbfe6ed8>
    7190:	01000804 	movi	r4,32
    7194:	2089c83a 	sub	r4,r4,r2
    7198:	1908983a 	sll	r4,r3,r4
    719c:	d9400117 	ldw	r5,4(sp)
    71a0:	1886d83a 	srl	r3,r3,r2
    71a4:	2148b03a 	or	r4,r4,r5
    71a8:	99000515 	stw	r4,20(r19)
    71ac:	d8c00015 	stw	r3,0(sp)
    71b0:	003fca06 	br	70dc <__ram_exceptions_end+0xfbfe6e88>

000071b4 <__ratio>:
    71b4:	defff904 	addi	sp,sp,-28
    71b8:	dc400315 	stw	r17,12(sp)
    71bc:	2823883a 	mov	r17,r5
    71c0:	d9400104 	addi	r5,sp,4
    71c4:	dfc00615 	stw	ra,24(sp)
    71c8:	dcc00515 	stw	r19,20(sp)
    71cc:	dc800415 	stw	r18,16(sp)
    71d0:	2027883a 	mov	r19,r4
    71d4:	dc000215 	stw	r16,8(sp)
    71d8:	0006f5c0 	call	6f5c <__b2d>
    71dc:	d80b883a 	mov	r5,sp
    71e0:	8809883a 	mov	r4,r17
    71e4:	1025883a 	mov	r18,r2
    71e8:	1821883a 	mov	r16,r3
    71ec:	0006f5c0 	call	6f5c <__b2d>
    71f0:	8a000417 	ldw	r8,16(r17)
    71f4:	99000417 	ldw	r4,16(r19)
    71f8:	d9400117 	ldw	r5,4(sp)
    71fc:	2209c83a 	sub	r4,r4,r8
    7200:	2010917a 	slli	r8,r4,5
    7204:	d9000017 	ldw	r4,0(sp)
    7208:	2909c83a 	sub	r4,r5,r4
    720c:	4109883a 	add	r4,r8,r4
    7210:	01000e0e 	bge	zero,r4,724c <__ratio+0x98>
    7214:	2008953a 	slli	r4,r4,20
    7218:	2421883a 	add	r16,r4,r16
    721c:	100d883a 	mov	r6,r2
    7220:	180f883a 	mov	r7,r3
    7224:	9009883a 	mov	r4,r18
    7228:	800b883a 	mov	r5,r16
    722c:	000b59c0 	call	b59c <__divdf3>
    7230:	dfc00617 	ldw	ra,24(sp)
    7234:	dcc00517 	ldw	r19,20(sp)
    7238:	dc800417 	ldw	r18,16(sp)
    723c:	dc400317 	ldw	r17,12(sp)
    7240:	dc000217 	ldw	r16,8(sp)
    7244:	dec00704 	addi	sp,sp,28
    7248:	f800283a 	ret
    724c:	2008953a 	slli	r4,r4,20
    7250:	1907c83a 	sub	r3,r3,r4
    7254:	003ff106 	br	721c <__ram_exceptions_end+0xfbfe6fc8>

00007258 <_mprec_log10>:
    7258:	defffe04 	addi	sp,sp,-8
    725c:	dc000015 	stw	r16,0(sp)
    7260:	dfc00115 	stw	ra,4(sp)
    7264:	008005c4 	movi	r2,23
    7268:	2021883a 	mov	r16,r4
    726c:	11000d0e 	bge	r2,r4,72a4 <_mprec_log10+0x4c>
    7270:	0005883a 	mov	r2,zero
    7274:	00cffc34 	movhi	r3,16368
    7278:	843fffc4 	addi	r16,r16,-1
    727c:	000d883a 	mov	r6,zero
    7280:	01d00934 	movhi	r7,16420
    7284:	1009883a 	mov	r4,r2
    7288:	180b883a 	mov	r5,r3
    728c:	000c0dc0 	call	c0dc <__muldf3>
    7290:	803ff91e 	bne	r16,zero,7278 <__ram_exceptions_end+0xfbfe7024>
    7294:	dfc00117 	ldw	ra,4(sp)
    7298:	dc000017 	ldw	r16,0(sp)
    729c:	dec00204 	addi	sp,sp,8
    72a0:	f800283a 	ret
    72a4:	202090fa 	slli	r16,r4,3
    72a8:	00800074 	movhi	r2,1
    72ac:	10807804 	addi	r2,r2,480
    72b0:	1421883a 	add	r16,r2,r16
    72b4:	80800017 	ldw	r2,0(r16)
    72b8:	80c00117 	ldw	r3,4(r16)
    72bc:	dfc00117 	ldw	ra,4(sp)
    72c0:	dc000017 	ldw	r16,0(sp)
    72c4:	dec00204 	addi	sp,sp,8
    72c8:	f800283a 	ret

000072cc <__copybits>:
    72cc:	297fffc4 	addi	r5,r5,-1
    72d0:	280fd17a 	srai	r7,r5,5
    72d4:	30c00417 	ldw	r3,16(r6)
    72d8:	30800504 	addi	r2,r6,20
    72dc:	39c00044 	addi	r7,r7,1
    72e0:	18c7883a 	add	r3,r3,r3
    72e4:	39cf883a 	add	r7,r7,r7
    72e8:	18c7883a 	add	r3,r3,r3
    72ec:	39cf883a 	add	r7,r7,r7
    72f0:	10c7883a 	add	r3,r2,r3
    72f4:	21cf883a 	add	r7,r4,r7
    72f8:	10c00d2e 	bgeu	r2,r3,7330 <__copybits+0x64>
    72fc:	200b883a 	mov	r5,r4
    7300:	12000017 	ldw	r8,0(r2)
    7304:	29400104 	addi	r5,r5,4
    7308:	10800104 	addi	r2,r2,4
    730c:	2a3fff15 	stw	r8,-4(r5)
    7310:	10fffb36 	bltu	r2,r3,7300 <__ram_exceptions_end+0xfbfe70ac>
    7314:	1985c83a 	sub	r2,r3,r6
    7318:	10bffac4 	addi	r2,r2,-21
    731c:	1004d0ba 	srli	r2,r2,2
    7320:	10800044 	addi	r2,r2,1
    7324:	1085883a 	add	r2,r2,r2
    7328:	1085883a 	add	r2,r2,r2
    732c:	2089883a 	add	r4,r4,r2
    7330:	21c0032e 	bgeu	r4,r7,7340 <__copybits+0x74>
    7334:	20000015 	stw	zero,0(r4)
    7338:	21000104 	addi	r4,r4,4
    733c:	21fffd36 	bltu	r4,r7,7334 <__ram_exceptions_end+0xfbfe70e0>
    7340:	f800283a 	ret

00007344 <__any_on>:
    7344:	20c00417 	ldw	r3,16(r4)
    7348:	2805d17a 	srai	r2,r5,5
    734c:	21000504 	addi	r4,r4,20
    7350:	18800d0e 	bge	r3,r2,7388 <__any_on+0x44>
    7354:	18c7883a 	add	r3,r3,r3
    7358:	18c7883a 	add	r3,r3,r3
    735c:	20c7883a 	add	r3,r4,r3
    7360:	20c0192e 	bgeu	r4,r3,73c8 <__any_on+0x84>
    7364:	18bfff17 	ldw	r2,-4(r3)
    7368:	18ffff04 	addi	r3,r3,-4
    736c:	1000041e 	bne	r2,zero,7380 <__any_on+0x3c>
    7370:	20c0142e 	bgeu	r4,r3,73c4 <__any_on+0x80>
    7374:	18ffff04 	addi	r3,r3,-4
    7378:	19400017 	ldw	r5,0(r3)
    737c:	283ffc26 	beq	r5,zero,7370 <__ram_exceptions_end+0xfbfe711c>
    7380:	00800044 	movi	r2,1
    7384:	f800283a 	ret
    7388:	10c00a0e 	bge	r2,r3,73b4 <__any_on+0x70>
    738c:	1085883a 	add	r2,r2,r2
    7390:	1085883a 	add	r2,r2,r2
    7394:	294007cc 	andi	r5,r5,31
    7398:	2087883a 	add	r3,r4,r2
    739c:	283ff026 	beq	r5,zero,7360 <__ram_exceptions_end+0xfbfe710c>
    73a0:	19800017 	ldw	r6,0(r3)
    73a4:	3144d83a 	srl	r2,r6,r5
    73a8:	114a983a 	sll	r5,r2,r5
    73ac:	317ff41e 	bne	r6,r5,7380 <__ram_exceptions_end+0xfbfe712c>
    73b0:	003feb06 	br	7360 <__ram_exceptions_end+0xfbfe710c>
    73b4:	1085883a 	add	r2,r2,r2
    73b8:	1085883a 	add	r2,r2,r2
    73bc:	2087883a 	add	r3,r4,r2
    73c0:	003fe706 	br	7360 <__ram_exceptions_end+0xfbfe710c>
    73c4:	f800283a 	ret
    73c8:	0005883a 	mov	r2,zero
    73cc:	f800283a 	ret

000073d0 <__fpclassifyd>:
    73d0:	00a00034 	movhi	r2,32768
    73d4:	10bfffc4 	addi	r2,r2,-1
    73d8:	2884703a 	and	r2,r5,r2
    73dc:	10000726 	beq	r2,zero,73fc <__fpclassifyd+0x2c>
    73e0:	00fffc34 	movhi	r3,65520
    73e4:	019ff834 	movhi	r6,32736
    73e8:	28c7883a 	add	r3,r5,r3
    73ec:	31bfffc4 	addi	r6,r6,-1
    73f0:	30c00536 	bltu	r6,r3,7408 <__fpclassifyd+0x38>
    73f4:	00800104 	movi	r2,4
    73f8:	f800283a 	ret
    73fc:	2000021e 	bne	r4,zero,7408 <__fpclassifyd+0x38>
    7400:	00800084 	movi	r2,2
    7404:	f800283a 	ret
    7408:	00dffc34 	movhi	r3,32752
    740c:	019ff834 	movhi	r6,32736
    7410:	28cb883a 	add	r5,r5,r3
    7414:	31bfffc4 	addi	r6,r6,-1
    7418:	317ff62e 	bgeu	r6,r5,73f4 <__ram_exceptions_end+0xfbfe71a0>
    741c:	01400434 	movhi	r5,16
    7420:	297fffc4 	addi	r5,r5,-1
    7424:	28800236 	bltu	r5,r2,7430 <__fpclassifyd+0x60>
    7428:	008000c4 	movi	r2,3
    742c:	f800283a 	ret
    7430:	10c00226 	beq	r2,r3,743c <__fpclassifyd+0x6c>
    7434:	0005883a 	mov	r2,zero
    7438:	f800283a 	ret
    743c:	2005003a 	cmpeq	r2,r4,zero
    7440:	f800283a 	ret

00007444 <_sbrk_r>:
    7444:	defffd04 	addi	sp,sp,-12
    7448:	dc000015 	stw	r16,0(sp)
    744c:	04000074 	movhi	r16,1
    7450:	dc400115 	stw	r17,4(sp)
    7454:	840e7e04 	addi	r16,r16,14840
    7458:	2023883a 	mov	r17,r4
    745c:	2809883a 	mov	r4,r5
    7460:	dfc00215 	stw	ra,8(sp)
    7464:	80000015 	stw	zero,0(r16)
    7468:	000dfc00 	call	dfc0 <sbrk>
    746c:	00ffffc4 	movi	r3,-1
    7470:	10c00526 	beq	r2,r3,7488 <_sbrk_r+0x44>
    7474:	dfc00217 	ldw	ra,8(sp)
    7478:	dc400117 	ldw	r17,4(sp)
    747c:	dc000017 	ldw	r16,0(sp)
    7480:	dec00304 	addi	sp,sp,12
    7484:	f800283a 	ret
    7488:	80c00017 	ldw	r3,0(r16)
    748c:	183ff926 	beq	r3,zero,7474 <__ram_exceptions_end+0xfbfe7220>
    7490:	88c00015 	stw	r3,0(r17)
    7494:	003ff706 	br	7474 <__ram_exceptions_end+0xfbfe7220>

00007498 <__sread>:
    7498:	defffe04 	addi	sp,sp,-8
    749c:	dc000015 	stw	r16,0(sp)
    74a0:	2821883a 	mov	r16,r5
    74a4:	2940038f 	ldh	r5,14(r5)
    74a8:	dfc00115 	stw	ra,4(sp)
    74ac:	000993c0 	call	993c <_read_r>
    74b0:	10000716 	blt	r2,zero,74d0 <__sread+0x38>
    74b4:	80c01417 	ldw	r3,80(r16)
    74b8:	1887883a 	add	r3,r3,r2
    74bc:	80c01415 	stw	r3,80(r16)
    74c0:	dfc00117 	ldw	ra,4(sp)
    74c4:	dc000017 	ldw	r16,0(sp)
    74c8:	dec00204 	addi	sp,sp,8
    74cc:	f800283a 	ret
    74d0:	80c0030b 	ldhu	r3,12(r16)
    74d4:	18fbffcc 	andi	r3,r3,61439
    74d8:	80c0030d 	sth	r3,12(r16)
    74dc:	dfc00117 	ldw	ra,4(sp)
    74e0:	dc000017 	ldw	r16,0(sp)
    74e4:	dec00204 	addi	sp,sp,8
    74e8:	f800283a 	ret

000074ec <__seofread>:
    74ec:	0005883a 	mov	r2,zero
    74f0:	f800283a 	ret

000074f4 <__swrite>:
    74f4:	2880030b 	ldhu	r2,12(r5)
    74f8:	defffb04 	addi	sp,sp,-20
    74fc:	dcc00315 	stw	r19,12(sp)
    7500:	dc800215 	stw	r18,8(sp)
    7504:	dc400115 	stw	r17,4(sp)
    7508:	dc000015 	stw	r16,0(sp)
    750c:	dfc00415 	stw	ra,16(sp)
    7510:	10c0400c 	andi	r3,r2,256
    7514:	2821883a 	mov	r16,r5
    7518:	2023883a 	mov	r17,r4
    751c:	3025883a 	mov	r18,r6
    7520:	3827883a 	mov	r19,r7
    7524:	18000526 	beq	r3,zero,753c <__swrite+0x48>
    7528:	2940038f 	ldh	r5,14(r5)
    752c:	01c00084 	movi	r7,2
    7530:	000d883a 	mov	r6,zero
    7534:	00097800 	call	9780 <_lseek_r>
    7538:	8080030b 	ldhu	r2,12(r16)
    753c:	8140038f 	ldh	r5,14(r16)
    7540:	10bbffcc 	andi	r2,r2,61439
    7544:	980f883a 	mov	r7,r19
    7548:	900d883a 	mov	r6,r18
    754c:	8809883a 	mov	r4,r17
    7550:	8080030d 	sth	r2,12(r16)
    7554:	dfc00417 	ldw	ra,16(sp)
    7558:	dcc00317 	ldw	r19,12(sp)
    755c:	dc800217 	ldw	r18,8(sp)
    7560:	dc400117 	ldw	r17,4(sp)
    7564:	dc000017 	ldw	r16,0(sp)
    7568:	dec00504 	addi	sp,sp,20
    756c:	0008d901 	jmpi	8d90 <_write_r>

00007570 <__sseek>:
    7570:	defffe04 	addi	sp,sp,-8
    7574:	dc000015 	stw	r16,0(sp)
    7578:	2821883a 	mov	r16,r5
    757c:	2940038f 	ldh	r5,14(r5)
    7580:	dfc00115 	stw	ra,4(sp)
    7584:	00097800 	call	9780 <_lseek_r>
    7588:	00ffffc4 	movi	r3,-1
    758c:	10c00826 	beq	r2,r3,75b0 <__sseek+0x40>
    7590:	80c0030b 	ldhu	r3,12(r16)
    7594:	80801415 	stw	r2,80(r16)
    7598:	18c40014 	ori	r3,r3,4096
    759c:	80c0030d 	sth	r3,12(r16)
    75a0:	dfc00117 	ldw	ra,4(sp)
    75a4:	dc000017 	ldw	r16,0(sp)
    75a8:	dec00204 	addi	sp,sp,8
    75ac:	f800283a 	ret
    75b0:	80c0030b 	ldhu	r3,12(r16)
    75b4:	18fbffcc 	andi	r3,r3,61439
    75b8:	80c0030d 	sth	r3,12(r16)
    75bc:	dfc00117 	ldw	ra,4(sp)
    75c0:	dc000017 	ldw	r16,0(sp)
    75c4:	dec00204 	addi	sp,sp,8
    75c8:	f800283a 	ret

000075cc <__sclose>:
    75cc:	2940038f 	ldh	r5,14(r5)
    75d0:	0008df01 	jmpi	8df0 <_close_r>

000075d4 <strcmp>:
    75d4:	2144b03a 	or	r2,r4,r5
    75d8:	108000cc 	andi	r2,r2,3
    75dc:	1000171e 	bne	r2,zero,763c <strcmp+0x68>
    75e0:	20800017 	ldw	r2,0(r4)
    75e4:	28c00017 	ldw	r3,0(r5)
    75e8:	10c0141e 	bne	r2,r3,763c <strcmp+0x68>
    75ec:	027fbff4 	movhi	r9,65279
    75f0:	4a7fbfc4 	addi	r9,r9,-257
    75f4:	0086303a 	nor	r3,zero,r2
    75f8:	02202074 	movhi	r8,32897
    75fc:	1245883a 	add	r2,r2,r9
    7600:	42202004 	addi	r8,r8,-32640
    7604:	10c4703a 	and	r2,r2,r3
    7608:	1204703a 	and	r2,r2,r8
    760c:	10000226 	beq	r2,zero,7618 <strcmp+0x44>
    7610:	00002306 	br	76a0 <strcmp+0xcc>
    7614:	1000221e 	bne	r2,zero,76a0 <strcmp+0xcc>
    7618:	21000104 	addi	r4,r4,4
    761c:	20c00017 	ldw	r3,0(r4)
    7620:	29400104 	addi	r5,r5,4
    7624:	29800017 	ldw	r6,0(r5)
    7628:	1a4f883a 	add	r7,r3,r9
    762c:	00c4303a 	nor	r2,zero,r3
    7630:	3884703a 	and	r2,r7,r2
    7634:	1204703a 	and	r2,r2,r8
    7638:	19bff626 	beq	r3,r6,7614 <__ram_exceptions_end+0xfbfe73c0>
    763c:	20800003 	ldbu	r2,0(r4)
    7640:	10c03fcc 	andi	r3,r2,255
    7644:	18c0201c 	xori	r3,r3,128
    7648:	18ffe004 	addi	r3,r3,-128
    764c:	18000c26 	beq	r3,zero,7680 <strcmp+0xac>
    7650:	29800007 	ldb	r6,0(r5)
    7654:	19800326 	beq	r3,r6,7664 <strcmp+0x90>
    7658:	00001306 	br	76a8 <strcmp+0xd4>
    765c:	29800007 	ldb	r6,0(r5)
    7660:	11800b1e 	bne	r2,r6,7690 <strcmp+0xbc>
    7664:	21000044 	addi	r4,r4,1
    7668:	20c00003 	ldbu	r3,0(r4)
    766c:	29400044 	addi	r5,r5,1
    7670:	18803fcc 	andi	r2,r3,255
    7674:	1080201c 	xori	r2,r2,128
    7678:	10bfe004 	addi	r2,r2,-128
    767c:	103ff71e 	bne	r2,zero,765c <__ram_exceptions_end+0xfbfe7408>
    7680:	0007883a 	mov	r3,zero
    7684:	28800003 	ldbu	r2,0(r5)
    7688:	1885c83a 	sub	r2,r3,r2
    768c:	f800283a 	ret
    7690:	28800003 	ldbu	r2,0(r5)
    7694:	18c03fcc 	andi	r3,r3,255
    7698:	1885c83a 	sub	r2,r3,r2
    769c:	f800283a 	ret
    76a0:	0005883a 	mov	r2,zero
    76a4:	f800283a 	ret
    76a8:	10c03fcc 	andi	r3,r2,255
    76ac:	003ff506 	br	7684 <__ram_exceptions_end+0xfbfe7430>

000076b0 <strlen>:
    76b0:	208000cc 	andi	r2,r4,3
    76b4:	10002026 	beq	r2,zero,7738 <strlen+0x88>
    76b8:	20800007 	ldb	r2,0(r4)
    76bc:	10002026 	beq	r2,zero,7740 <strlen+0x90>
    76c0:	2005883a 	mov	r2,r4
    76c4:	00000206 	br	76d0 <strlen+0x20>
    76c8:	10c00007 	ldb	r3,0(r2)
    76cc:	18001826 	beq	r3,zero,7730 <strlen+0x80>
    76d0:	10800044 	addi	r2,r2,1
    76d4:	10c000cc 	andi	r3,r2,3
    76d8:	183ffb1e 	bne	r3,zero,76c8 <__ram_exceptions_end+0xfbfe7474>
    76dc:	10c00017 	ldw	r3,0(r2)
    76e0:	01ffbff4 	movhi	r7,65279
    76e4:	39ffbfc4 	addi	r7,r7,-257
    76e8:	00ca303a 	nor	r5,zero,r3
    76ec:	01a02074 	movhi	r6,32897
    76f0:	19c7883a 	add	r3,r3,r7
    76f4:	31a02004 	addi	r6,r6,-32640
    76f8:	1946703a 	and	r3,r3,r5
    76fc:	1986703a 	and	r3,r3,r6
    7700:	1800091e 	bne	r3,zero,7728 <strlen+0x78>
    7704:	10800104 	addi	r2,r2,4
    7708:	10c00017 	ldw	r3,0(r2)
    770c:	19cb883a 	add	r5,r3,r7
    7710:	00c6303a 	nor	r3,zero,r3
    7714:	28c6703a 	and	r3,r5,r3
    7718:	1986703a 	and	r3,r3,r6
    771c:	183ff926 	beq	r3,zero,7704 <__ram_exceptions_end+0xfbfe74b0>
    7720:	00000106 	br	7728 <strlen+0x78>
    7724:	10800044 	addi	r2,r2,1
    7728:	10c00007 	ldb	r3,0(r2)
    772c:	183ffd1e 	bne	r3,zero,7724 <__ram_exceptions_end+0xfbfe74d0>
    7730:	1105c83a 	sub	r2,r2,r4
    7734:	f800283a 	ret
    7738:	2005883a 	mov	r2,r4
    773c:	003fe706 	br	76dc <__ram_exceptions_end+0xfbfe7488>
    7740:	0005883a 	mov	r2,zero
    7744:	f800283a 	ret

00007748 <__sprint_r.part.0>:
    7748:	28801917 	ldw	r2,100(r5)
    774c:	defff604 	addi	sp,sp,-40
    7750:	dd400515 	stw	r21,20(sp)
    7754:	dfc00915 	stw	ra,36(sp)
    7758:	df000815 	stw	fp,32(sp)
    775c:	ddc00715 	stw	r23,28(sp)
    7760:	dd800615 	stw	r22,24(sp)
    7764:	dd000415 	stw	r20,16(sp)
    7768:	dcc00315 	stw	r19,12(sp)
    776c:	dc800215 	stw	r18,8(sp)
    7770:	dc400115 	stw	r17,4(sp)
    7774:	dc000015 	stw	r16,0(sp)
    7778:	1088000c 	andi	r2,r2,8192
    777c:	302b883a 	mov	r21,r6
    7780:	10002e26 	beq	r2,zero,783c <__sprint_r.part.0+0xf4>
    7784:	30800217 	ldw	r2,8(r6)
    7788:	35800017 	ldw	r22,0(r6)
    778c:	10002926 	beq	r2,zero,7834 <__sprint_r.part.0+0xec>
    7790:	2827883a 	mov	r19,r5
    7794:	2029883a 	mov	r20,r4
    7798:	b5c00104 	addi	r23,r22,4
    779c:	04bfffc4 	movi	r18,-1
    77a0:	bc400017 	ldw	r17,0(r23)
    77a4:	b4000017 	ldw	r16,0(r22)
    77a8:	0039883a 	mov	fp,zero
    77ac:	8822d0ba 	srli	r17,r17,2
    77b0:	8800031e 	bne	r17,zero,77c0 <__sprint_r.part.0+0x78>
    77b4:	00001806 	br	7818 <__sprint_r.part.0+0xd0>
    77b8:	84000104 	addi	r16,r16,4
    77bc:	8f001526 	beq	r17,fp,7814 <__sprint_r.part.0+0xcc>
    77c0:	81400017 	ldw	r5,0(r16)
    77c4:	980d883a 	mov	r6,r19
    77c8:	a009883a 	mov	r4,r20
    77cc:	00091700 	call	9170 <_fputwc_r>
    77d0:	e7000044 	addi	fp,fp,1
    77d4:	14bff81e 	bne	r2,r18,77b8 <__ram_exceptions_end+0xfbfe7564>
    77d8:	9005883a 	mov	r2,r18
    77dc:	a8000215 	stw	zero,8(r21)
    77e0:	a8000115 	stw	zero,4(r21)
    77e4:	dfc00917 	ldw	ra,36(sp)
    77e8:	df000817 	ldw	fp,32(sp)
    77ec:	ddc00717 	ldw	r23,28(sp)
    77f0:	dd800617 	ldw	r22,24(sp)
    77f4:	dd400517 	ldw	r21,20(sp)
    77f8:	dd000417 	ldw	r20,16(sp)
    77fc:	dcc00317 	ldw	r19,12(sp)
    7800:	dc800217 	ldw	r18,8(sp)
    7804:	dc400117 	ldw	r17,4(sp)
    7808:	dc000017 	ldw	r16,0(sp)
    780c:	dec00a04 	addi	sp,sp,40
    7810:	f800283a 	ret
    7814:	a8800217 	ldw	r2,8(r21)
    7818:	8c63883a 	add	r17,r17,r17
    781c:	8c63883a 	add	r17,r17,r17
    7820:	1445c83a 	sub	r2,r2,r17
    7824:	a8800215 	stw	r2,8(r21)
    7828:	b5800204 	addi	r22,r22,8
    782c:	bdc00204 	addi	r23,r23,8
    7830:	103fdb1e 	bne	r2,zero,77a0 <__ram_exceptions_end+0xfbfe754c>
    7834:	0005883a 	mov	r2,zero
    7838:	003fe806 	br	77dc <__ram_exceptions_end+0xfbfe7588>
    783c:	00092700 	call	9270 <__sfvwrite_r>
    7840:	003fe606 	br	77dc <__ram_exceptions_end+0xfbfe7588>

00007844 <__sprint_r>:
    7844:	30c00217 	ldw	r3,8(r6)
    7848:	18000126 	beq	r3,zero,7850 <__sprint_r+0xc>
    784c:	00077481 	jmpi	7748 <__sprint_r.part.0>
    7850:	30000115 	stw	zero,4(r6)
    7854:	0005883a 	mov	r2,zero
    7858:	f800283a 	ret

0000785c <___vfiprintf_internal_r>:
    785c:	deffc904 	addi	sp,sp,-220
    7860:	df003515 	stw	fp,212(sp)
    7864:	dd003115 	stw	r20,196(sp)
    7868:	dfc03615 	stw	ra,216(sp)
    786c:	ddc03415 	stw	r23,208(sp)
    7870:	dd803315 	stw	r22,204(sp)
    7874:	dd403215 	stw	r21,200(sp)
    7878:	dcc03015 	stw	r19,192(sp)
    787c:	dc802f15 	stw	r18,188(sp)
    7880:	dc402e15 	stw	r17,184(sp)
    7884:	dc002d15 	stw	r16,180(sp)
    7888:	d9002015 	stw	r4,128(sp)
    788c:	d9c02215 	stw	r7,136(sp)
    7890:	2829883a 	mov	r20,r5
    7894:	3039883a 	mov	fp,r6
    7898:	20000226 	beq	r4,zero,78a4 <___vfiprintf_internal_r+0x48>
    789c:	20800e17 	ldw	r2,56(r4)
    78a0:	1000cf26 	beq	r2,zero,7be0 <___vfiprintf_internal_r+0x384>
    78a4:	a080030b 	ldhu	r2,12(r20)
    78a8:	10c8000c 	andi	r3,r2,8192
    78ac:	1800061e 	bne	r3,zero,78c8 <___vfiprintf_internal_r+0x6c>
    78b0:	a1001917 	ldw	r4,100(r20)
    78b4:	00f7ffc4 	movi	r3,-8193
    78b8:	10880014 	ori	r2,r2,8192
    78bc:	20c6703a 	and	r3,r4,r3
    78c0:	a080030d 	sth	r2,12(r20)
    78c4:	a0c01915 	stw	r3,100(r20)
    78c8:	10c0020c 	andi	r3,r2,8
    78cc:	1800a926 	beq	r3,zero,7b74 <___vfiprintf_internal_r+0x318>
    78d0:	a0c00417 	ldw	r3,16(r20)
    78d4:	1800a726 	beq	r3,zero,7b74 <___vfiprintf_internal_r+0x318>
    78d8:	1080068c 	andi	r2,r2,26
    78dc:	00c00284 	movi	r3,10
    78e0:	10c0ac26 	beq	r2,r3,7b94 <___vfiprintf_internal_r+0x338>
    78e4:	da801a04 	addi	r10,sp,104
    78e8:	da801e15 	stw	r10,120(sp)
    78ec:	d8801e17 	ldw	r2,120(sp)
    78f0:	da8019c4 	addi	r10,sp,103
    78f4:	05800074 	movhi	r22,1
    78f8:	05c00074 	movhi	r23,1
    78fc:	da801f15 	stw	r10,124(sp)
    7900:	1295c83a 	sub	r10,r2,r10
    7904:	b580ae04 	addi	r22,r22,696
    7908:	bdc0aa04 	addi	r23,r23,680
    790c:	dec01a15 	stw	sp,104(sp)
    7910:	d8001c15 	stw	zero,112(sp)
    7914:	d8001b15 	stw	zero,108(sp)
    7918:	d8002615 	stw	zero,152(sp)
    791c:	d8002315 	stw	zero,140(sp)
    7920:	da802715 	stw	r10,156(sp)
    7924:	d811883a 	mov	r8,sp
    7928:	dd002115 	stw	r20,132(sp)
    792c:	e021883a 	mov	r16,fp
    7930:	80800007 	ldb	r2,0(r16)
    7934:	1003ea26 	beq	r2,zero,88e0 <___vfiprintf_internal_r+0x1084>
    7938:	00c00944 	movi	r3,37
    793c:	8025883a 	mov	r18,r16
    7940:	10c0021e 	bne	r2,r3,794c <___vfiprintf_internal_r+0xf0>
    7944:	00001606 	br	79a0 <___vfiprintf_internal_r+0x144>
    7948:	10c00326 	beq	r2,r3,7958 <___vfiprintf_internal_r+0xfc>
    794c:	94800044 	addi	r18,r18,1
    7950:	90800007 	ldb	r2,0(r18)
    7954:	103ffc1e 	bne	r2,zero,7948 <__ram_exceptions_end+0xfbfe76f4>
    7958:	9423c83a 	sub	r17,r18,r16
    795c:	88001026 	beq	r17,zero,79a0 <___vfiprintf_internal_r+0x144>
    7960:	d8c01c17 	ldw	r3,112(sp)
    7964:	d8801b17 	ldw	r2,108(sp)
    7968:	44000015 	stw	r16,0(r8)
    796c:	88c7883a 	add	r3,r17,r3
    7970:	10800044 	addi	r2,r2,1
    7974:	44400115 	stw	r17,4(r8)
    7978:	d8c01c15 	stw	r3,112(sp)
    797c:	d8801b15 	stw	r2,108(sp)
    7980:	010001c4 	movi	r4,7
    7984:	2080760e 	bge	r4,r2,7b60 <___vfiprintf_internal_r+0x304>
    7988:	1803821e 	bne	r3,zero,8794 <___vfiprintf_internal_r+0xf38>
    798c:	da802317 	ldw	r10,140(sp)
    7990:	d8001b15 	stw	zero,108(sp)
    7994:	d811883a 	mov	r8,sp
    7998:	5455883a 	add	r10,r10,r17
    799c:	da802315 	stw	r10,140(sp)
    79a0:	90800007 	ldb	r2,0(r18)
    79a4:	10044626 	beq	r2,zero,8ac0 <___vfiprintf_internal_r+0x1264>
    79a8:	90c00047 	ldb	r3,1(r18)
    79ac:	94000044 	addi	r16,r18,1
    79b0:	d8001d85 	stb	zero,118(sp)
    79b4:	0009883a 	mov	r4,zero
    79b8:	000f883a 	mov	r7,zero
    79bc:	027fffc4 	movi	r9,-1
    79c0:	0023883a 	mov	r17,zero
    79c4:	0029883a 	mov	r20,zero
    79c8:	01401604 	movi	r5,88
    79cc:	01800244 	movi	r6,9
    79d0:	03400a84 	movi	r13,42
    79d4:	03001b04 	movi	r12,108
    79d8:	84000044 	addi	r16,r16,1
    79dc:	18bff804 	addi	r2,r3,-32
    79e0:	28827336 	bltu	r5,r2,83b0 <___vfiprintf_internal_r+0xb54>
    79e4:	100490ba 	slli	r2,r2,2
    79e8:	02800034 	movhi	r10,0
    79ec:	529e7f04 	addi	r10,r10,31228
    79f0:	1285883a 	add	r2,r2,r10
    79f4:	10800017 	ldw	r2,0(r2)
    79f8:	1000683a 	jmp	r2
    79fc:	000080e4 	muli	zero,zero,515
    7a00:	000083b0 	cmpltui	zero,zero,526
    7a04:	000083b0 	cmpltui	zero,zero,526
    7a08:	00008104 	movi	zero,516
    7a0c:	000083b0 	cmpltui	zero,zero,526
    7a10:	000083b0 	cmpltui	zero,zero,526
    7a14:	000083b0 	cmpltui	zero,zero,526
    7a18:	000083b0 	cmpltui	zero,zero,526
    7a1c:	000083b0 	cmpltui	zero,zero,526
    7a20:	000083b0 	cmpltui	zero,zero,526
    7a24:	000082ec 	andhi	zero,zero,523
    7a28:	00008308 	cmpgei	zero,zero,524
    7a2c:	000083b0 	cmpltui	zero,zero,526
    7a30:	00007bf0 	cmpltui	zero,zero,495
    7a34:	00008318 	cmpnei	zero,zero,524
    7a38:	000083b0 	cmpltui	zero,zero,526
    7a3c:	00008110 	cmplti	zero,zero,516
    7a40:	0000811c 	xori	zero,zero,516
    7a44:	0000811c 	xori	zero,zero,516
    7a48:	0000811c 	xori	zero,zero,516
    7a4c:	0000811c 	xori	zero,zero,516
    7a50:	0000811c 	xori	zero,zero,516
    7a54:	0000811c 	xori	zero,zero,516
    7a58:	0000811c 	xori	zero,zero,516
    7a5c:	0000811c 	xori	zero,zero,516
    7a60:	0000811c 	xori	zero,zero,516
    7a64:	000083b0 	cmpltui	zero,zero,526
    7a68:	000083b0 	cmpltui	zero,zero,526
    7a6c:	000083b0 	cmpltui	zero,zero,526
    7a70:	000083b0 	cmpltui	zero,zero,526
    7a74:	000083b0 	cmpltui	zero,zero,526
    7a78:	000083b0 	cmpltui	zero,zero,526
    7a7c:	000083b0 	cmpltui	zero,zero,526
    7a80:	000083b0 	cmpltui	zero,zero,526
    7a84:	000083b0 	cmpltui	zero,zero,526
    7a88:	000083b0 	cmpltui	zero,zero,526
    7a8c:	00008148 	cmpgei	zero,zero,517
    7a90:	000083b0 	cmpltui	zero,zero,526
    7a94:	000083b0 	cmpltui	zero,zero,526
    7a98:	000083b0 	cmpltui	zero,zero,526
    7a9c:	000083b0 	cmpltui	zero,zero,526
    7aa0:	000083b0 	cmpltui	zero,zero,526
    7aa4:	000083b0 	cmpltui	zero,zero,526
    7aa8:	000083b0 	cmpltui	zero,zero,526
    7aac:	000083b0 	cmpltui	zero,zero,526
    7ab0:	000083b0 	cmpltui	zero,zero,526
    7ab4:	000083b0 	cmpltui	zero,zero,526
    7ab8:	00008180 	call	818 <test_recovtime_print+0x40>
    7abc:	000083b0 	cmpltui	zero,zero,526
    7ac0:	000083b0 	cmpltui	zero,zero,526
    7ac4:	000083b0 	cmpltui	zero,zero,526
    7ac8:	000083b0 	cmpltui	zero,zero,526
    7acc:	000083b0 	cmpltui	zero,zero,526
    7ad0:	000081d8 	cmpnei	zero,zero,519
    7ad4:	000083b0 	cmpltui	zero,zero,526
    7ad8:	000083b0 	cmpltui	zero,zero,526
    7adc:	00008248 	cmpgei	zero,zero,521
    7ae0:	000083b0 	cmpltui	zero,zero,526
    7ae4:	000083b0 	cmpltui	zero,zero,526
    7ae8:	000083b0 	cmpltui	zero,zero,526
    7aec:	000083b0 	cmpltui	zero,zero,526
    7af0:	000083b0 	cmpltui	zero,zero,526
    7af4:	000083b0 	cmpltui	zero,zero,526
    7af8:	000083b0 	cmpltui	zero,zero,526
    7afc:	000083b0 	cmpltui	zero,zero,526
    7b00:	000083b0 	cmpltui	zero,zero,526
    7b04:	000083b0 	cmpltui	zero,zero,526
    7b08:	00007ff4 	movhi	zero,511
    7b0c:	00008020 	cmpeqi	zero,zero,512
    7b10:	000083b0 	cmpltui	zero,zero,526
    7b14:	000083b0 	cmpltui	zero,zero,526
    7b18:	000083b0 	cmpltui	zero,zero,526
    7b1c:	00008358 	cmpnei	zero,zero,525
    7b20:	00008020 	cmpeqi	zero,zero,512
    7b24:	000083b0 	cmpltui	zero,zero,526
    7b28:	000083b0 	cmpltui	zero,zero,526
    7b2c:	00007eb4 	movhi	zero,506
    7b30:	000083b0 	cmpltui	zero,zero,526
    7b34:	00007ec4 	movi	zero,507
    7b38:	00007f00 	call	7f0 <test_recovtime_print+0x18>
    7b3c:	00007bfc 	xorhi	zero,zero,495
    7b40:	00007ea8 	cmpgeui	zero,zero,506
    7b44:	000083b0 	cmpltui	zero,zero,526
    7b48:	00008284 	movi	zero,522
    7b4c:	000083b0 	cmpltui	zero,zero,526
    7b50:	000082dc 	xori	zero,zero,523
    7b54:	000083b0 	cmpltui	zero,zero,526
    7b58:	000083b0 	cmpltui	zero,zero,526
    7b5c:	00007fa0 	cmpeqi	zero,zero,510
    7b60:	42000204 	addi	r8,r8,8
    7b64:	da802317 	ldw	r10,140(sp)
    7b68:	5455883a 	add	r10,r10,r17
    7b6c:	da802315 	stw	r10,140(sp)
    7b70:	003f8b06 	br	79a0 <__ram_exceptions_end+0xfbfe774c>
    7b74:	d9002017 	ldw	r4,128(sp)
    7b78:	a00b883a 	mov	r5,r20
    7b7c:	0002ffc0 	call	2ffc <__swsetup_r>
    7b80:	1003b11e 	bne	r2,zero,8a48 <___vfiprintf_internal_r+0x11ec>
    7b84:	a080030b 	ldhu	r2,12(r20)
    7b88:	00c00284 	movi	r3,10
    7b8c:	1080068c 	andi	r2,r2,26
    7b90:	10ff541e 	bne	r2,r3,78e4 <__ram_exceptions_end+0xfbfe7690>
    7b94:	a080038f 	ldh	r2,14(r20)
    7b98:	103f5216 	blt	r2,zero,78e4 <__ram_exceptions_end+0xfbfe7690>
    7b9c:	d9c02217 	ldw	r7,136(sp)
    7ba0:	d9002017 	ldw	r4,128(sp)
    7ba4:	e00d883a 	mov	r6,fp
    7ba8:	a00b883a 	mov	r5,r20
    7bac:	0008cd40 	call	8cd4 <__sbprintf>
    7bb0:	dfc03617 	ldw	ra,216(sp)
    7bb4:	df003517 	ldw	fp,212(sp)
    7bb8:	ddc03417 	ldw	r23,208(sp)
    7bbc:	dd803317 	ldw	r22,204(sp)
    7bc0:	dd403217 	ldw	r21,200(sp)
    7bc4:	dd003117 	ldw	r20,196(sp)
    7bc8:	dcc03017 	ldw	r19,192(sp)
    7bcc:	dc802f17 	ldw	r18,188(sp)
    7bd0:	dc402e17 	ldw	r17,184(sp)
    7bd4:	dc002d17 	ldw	r16,180(sp)
    7bd8:	dec03704 	addi	sp,sp,220
    7bdc:	f800283a 	ret
    7be0:	0004fd00 	call	4fd0 <__sinit>
    7be4:	003f2f06 	br	78a4 <__ram_exceptions_end+0xfbfe7650>
    7be8:	0463c83a 	sub	r17,zero,r17
    7bec:	d8802215 	stw	r2,136(sp)
    7bf0:	a5000114 	ori	r20,r20,4
    7bf4:	80c00007 	ldb	r3,0(r16)
    7bf8:	003f7706 	br	79d8 <__ram_exceptions_end+0xfbfe7784>
    7bfc:	00800c04 	movi	r2,48
    7c00:	da802217 	ldw	r10,136(sp)
    7c04:	d8801d05 	stb	r2,116(sp)
    7c08:	00801e04 	movi	r2,120
    7c0c:	d8801d45 	stb	r2,117(sp)
    7c10:	d8001d85 	stb	zero,118(sp)
    7c14:	50c00104 	addi	r3,r10,4
    7c18:	54800017 	ldw	r18,0(r10)
    7c1c:	0027883a 	mov	r19,zero
    7c20:	a0800094 	ori	r2,r20,2
    7c24:	48030b16 	blt	r9,zero,8854 <___vfiprintf_internal_r+0xff8>
    7c28:	00bfdfc4 	movi	r2,-129
    7c2c:	a096703a 	and	r11,r20,r2
    7c30:	d8c02215 	stw	r3,136(sp)
    7c34:	5d000094 	ori	r20,r11,2
    7c38:	90032b1e 	bne	r18,zero,88e8 <___vfiprintf_internal_r+0x108c>
    7c3c:	00800074 	movhi	r2,1
    7c40:	10804904 	addi	r2,r2,292
    7c44:	d8802615 	stw	r2,152(sp)
    7c48:	0039883a 	mov	fp,zero
    7c4c:	48017b1e 	bne	r9,zero,823c <___vfiprintf_internal_r+0x9e0>
    7c50:	0013883a 	mov	r9,zero
    7c54:	0027883a 	mov	r19,zero
    7c58:	dd401a04 	addi	r21,sp,104
    7c5c:	4825883a 	mov	r18,r9
    7c60:	4cc0010e 	bge	r9,r19,7c68 <___vfiprintf_internal_r+0x40c>
    7c64:	9825883a 	mov	r18,r19
    7c68:	e7003fcc 	andi	fp,fp,255
    7c6c:	e700201c 	xori	fp,fp,128
    7c70:	e73fe004 	addi	fp,fp,-128
    7c74:	e0000126 	beq	fp,zero,7c7c <___vfiprintf_internal_r+0x420>
    7c78:	94800044 	addi	r18,r18,1
    7c7c:	a380008c 	andi	r14,r20,2
    7c80:	70000126 	beq	r14,zero,7c88 <___vfiprintf_internal_r+0x42c>
    7c84:	94800084 	addi	r18,r18,2
    7c88:	a700210c 	andi	fp,r20,132
    7c8c:	e001df1e 	bne	fp,zero,840c <___vfiprintf_internal_r+0xbb0>
    7c90:	8c87c83a 	sub	r3,r17,r18
    7c94:	00c1dd0e 	bge	zero,r3,840c <___vfiprintf_internal_r+0xbb0>
    7c98:	01c00404 	movi	r7,16
    7c9c:	d8801c17 	ldw	r2,112(sp)
    7ca0:	38c3ad0e 	bge	r7,r3,8b58 <___vfiprintf_internal_r+0x12fc>
    7ca4:	02800074 	movhi	r10,1
    7ca8:	5280ae04 	addi	r10,r10,696
    7cac:	dc002915 	stw	r16,164(sp)
    7cb0:	d9801b17 	ldw	r6,108(sp)
    7cb4:	da802415 	stw	r10,144(sp)
    7cb8:	03c001c4 	movi	r15,7
    7cbc:	da402515 	stw	r9,148(sp)
    7cc0:	db802815 	stw	r14,160(sp)
    7cc4:	1821883a 	mov	r16,r3
    7cc8:	00000506 	br	7ce0 <___vfiprintf_internal_r+0x484>
    7ccc:	31400084 	addi	r5,r6,2
    7cd0:	42000204 	addi	r8,r8,8
    7cd4:	200d883a 	mov	r6,r4
    7cd8:	843ffc04 	addi	r16,r16,-16
    7cdc:	3c000d0e 	bge	r7,r16,7d14 <___vfiprintf_internal_r+0x4b8>
    7ce0:	10800404 	addi	r2,r2,16
    7ce4:	31000044 	addi	r4,r6,1
    7ce8:	45800015 	stw	r22,0(r8)
    7cec:	41c00115 	stw	r7,4(r8)
    7cf0:	d8801c15 	stw	r2,112(sp)
    7cf4:	d9001b15 	stw	r4,108(sp)
    7cf8:	793ff40e 	bge	r15,r4,7ccc <__ram_exceptions_end+0xfbfe7a78>
    7cfc:	1001b51e 	bne	r2,zero,83d4 <___vfiprintf_internal_r+0xb78>
    7d00:	843ffc04 	addi	r16,r16,-16
    7d04:	000d883a 	mov	r6,zero
    7d08:	01400044 	movi	r5,1
    7d0c:	d811883a 	mov	r8,sp
    7d10:	3c3ff316 	blt	r7,r16,7ce0 <__ram_exceptions_end+0xfbfe7a8c>
    7d14:	8007883a 	mov	r3,r16
    7d18:	da402517 	ldw	r9,148(sp)
    7d1c:	db802817 	ldw	r14,160(sp)
    7d20:	dc002917 	ldw	r16,164(sp)
    7d24:	da802417 	ldw	r10,144(sp)
    7d28:	1885883a 	add	r2,r3,r2
    7d2c:	40c00115 	stw	r3,4(r8)
    7d30:	42800015 	stw	r10,0(r8)
    7d34:	d8801c15 	stw	r2,112(sp)
    7d38:	d9401b15 	stw	r5,108(sp)
    7d3c:	00c001c4 	movi	r3,7
    7d40:	19426016 	blt	r3,r5,86c4 <___vfiprintf_internal_r+0xe68>
    7d44:	d8c01d87 	ldb	r3,118(sp)
    7d48:	42000204 	addi	r8,r8,8
    7d4c:	29000044 	addi	r4,r5,1
    7d50:	1801b31e 	bne	r3,zero,8420 <___vfiprintf_internal_r+0xbc4>
    7d54:	7001c026 	beq	r14,zero,8458 <___vfiprintf_internal_r+0xbfc>
    7d58:	d8c01d04 	addi	r3,sp,116
    7d5c:	10800084 	addi	r2,r2,2
    7d60:	40c00015 	stw	r3,0(r8)
    7d64:	00c00084 	movi	r3,2
    7d68:	40c00115 	stw	r3,4(r8)
    7d6c:	d8801c15 	stw	r2,112(sp)
    7d70:	d9001b15 	stw	r4,108(sp)
    7d74:	00c001c4 	movi	r3,7
    7d78:	1902650e 	bge	r3,r4,8710 <___vfiprintf_internal_r+0xeb4>
    7d7c:	10029a1e 	bne	r2,zero,87e8 <___vfiprintf_internal_r+0xf8c>
    7d80:	00c02004 	movi	r3,128
    7d84:	01000044 	movi	r4,1
    7d88:	000b883a 	mov	r5,zero
    7d8c:	d811883a 	mov	r8,sp
    7d90:	e0c1b31e 	bne	fp,r3,8460 <___vfiprintf_internal_r+0xc04>
    7d94:	8cb9c83a 	sub	fp,r17,r18
    7d98:	0701b10e 	bge	zero,fp,8460 <___vfiprintf_internal_r+0xc04>
    7d9c:	01c00404 	movi	r7,16
    7da0:	3f03890e 	bge	r7,fp,8bc8 <___vfiprintf_internal_r+0x136c>
    7da4:	00c00074 	movhi	r3,1
    7da8:	18c0aa04 	addi	r3,r3,680
    7dac:	d8c02415 	stw	r3,144(sp)
    7db0:	8007883a 	mov	r3,r16
    7db4:	034001c4 	movi	r13,7
    7db8:	e021883a 	mov	r16,fp
    7dbc:	da402515 	stw	r9,148(sp)
    7dc0:	1839883a 	mov	fp,r3
    7dc4:	00000506 	br	7ddc <___vfiprintf_internal_r+0x580>
    7dc8:	29800084 	addi	r6,r5,2
    7dcc:	42000204 	addi	r8,r8,8
    7dd0:	180b883a 	mov	r5,r3
    7dd4:	843ffc04 	addi	r16,r16,-16
    7dd8:	3c000d0e 	bge	r7,r16,7e10 <___vfiprintf_internal_r+0x5b4>
    7ddc:	10800404 	addi	r2,r2,16
    7de0:	28c00044 	addi	r3,r5,1
    7de4:	45c00015 	stw	r23,0(r8)
    7de8:	41c00115 	stw	r7,4(r8)
    7dec:	d8801c15 	stw	r2,112(sp)
    7df0:	d8c01b15 	stw	r3,108(sp)
    7df4:	68fff40e 	bge	r13,r3,7dc8 <__ram_exceptions_end+0xfbfe7b74>
    7df8:	1002241e 	bne	r2,zero,868c <___vfiprintf_internal_r+0xe30>
    7dfc:	843ffc04 	addi	r16,r16,-16
    7e00:	01800044 	movi	r6,1
    7e04:	000b883a 	mov	r5,zero
    7e08:	d811883a 	mov	r8,sp
    7e0c:	3c3ff316 	blt	r7,r16,7ddc <__ram_exceptions_end+0xfbfe7b88>
    7e10:	da402517 	ldw	r9,148(sp)
    7e14:	e007883a 	mov	r3,fp
    7e18:	8039883a 	mov	fp,r16
    7e1c:	1821883a 	mov	r16,r3
    7e20:	d8c02417 	ldw	r3,144(sp)
    7e24:	1705883a 	add	r2,r2,fp
    7e28:	47000115 	stw	fp,4(r8)
    7e2c:	40c00015 	stw	r3,0(r8)
    7e30:	d8801c15 	stw	r2,112(sp)
    7e34:	d9801b15 	stw	r6,108(sp)
    7e38:	00c001c4 	movi	r3,7
    7e3c:	19827616 	blt	r3,r6,8818 <___vfiprintf_internal_r+0xfbc>
    7e40:	4cf9c83a 	sub	fp,r9,r19
    7e44:	42000204 	addi	r8,r8,8
    7e48:	31000044 	addi	r4,r6,1
    7e4c:	300b883a 	mov	r5,r6
    7e50:	07018516 	blt	zero,fp,8468 <___vfiprintf_internal_r+0xc0c>
    7e54:	9885883a 	add	r2,r19,r2
    7e58:	45400015 	stw	r21,0(r8)
    7e5c:	44c00115 	stw	r19,4(r8)
    7e60:	d8801c15 	stw	r2,112(sp)
    7e64:	d9001b15 	stw	r4,108(sp)
    7e68:	00c001c4 	movi	r3,7
    7e6c:	1901dd0e 	bge	r3,r4,85e4 <___vfiprintf_internal_r+0xd88>
    7e70:	1002401e 	bne	r2,zero,8774 <___vfiprintf_internal_r+0xf18>
    7e74:	d8001b15 	stw	zero,108(sp)
    7e78:	a2c0010c 	andi	r11,r20,4
    7e7c:	58000226 	beq	r11,zero,7e88 <___vfiprintf_internal_r+0x62c>
    7e80:	8ca7c83a 	sub	r19,r17,r18
    7e84:	04c2f216 	blt	zero,r19,8a50 <___vfiprintf_internal_r+0x11f4>
    7e88:	8c80010e 	bge	r17,r18,7e90 <___vfiprintf_internal_r+0x634>
    7e8c:	9023883a 	mov	r17,r18
    7e90:	da802317 	ldw	r10,140(sp)
    7e94:	5455883a 	add	r10,r10,r17
    7e98:	da802315 	stw	r10,140(sp)
    7e9c:	d8001b15 	stw	zero,108(sp)
    7ea0:	d811883a 	mov	r8,sp
    7ea4:	003ea206 	br	7930 <__ram_exceptions_end+0xfbfe76dc>
    7ea8:	a5000814 	ori	r20,r20,32
    7eac:	80c00007 	ldb	r3,0(r16)
    7eb0:	003ec906 	br	79d8 <__ram_exceptions_end+0xfbfe7784>
    7eb4:	80c00007 	ldb	r3,0(r16)
    7eb8:	1b030926 	beq	r3,r12,8ae0 <___vfiprintf_internal_r+0x1284>
    7ebc:	a5000414 	ori	r20,r20,16
    7ec0:	003ec506 	br	79d8 <__ram_exceptions_end+0xfbfe7784>
    7ec4:	21003fcc 	andi	r4,r4,255
    7ec8:	20035e1e 	bne	r4,zero,8c44 <___vfiprintf_internal_r+0x13e8>
    7ecc:	a080080c 	andi	r2,r20,32
    7ed0:	1002a526 	beq	r2,zero,8968 <___vfiprintf_internal_r+0x110c>
    7ed4:	da802217 	ldw	r10,136(sp)
    7ed8:	50800017 	ldw	r2,0(r10)
    7edc:	da802317 	ldw	r10,140(sp)
    7ee0:	5007d7fa 	srai	r3,r10,31
    7ee4:	da802217 	ldw	r10,136(sp)
    7ee8:	10c00115 	stw	r3,4(r2)
    7eec:	52800104 	addi	r10,r10,4
    7ef0:	da802215 	stw	r10,136(sp)
    7ef4:	da802317 	ldw	r10,140(sp)
    7ef8:	12800015 	stw	r10,0(r2)
    7efc:	003e8c06 	br	7930 <__ram_exceptions_end+0xfbfe76dc>
    7f00:	21003fcc 	andi	r4,r4,255
    7f04:	2003511e 	bne	r4,zero,8c4c <___vfiprintf_internal_r+0x13f0>
    7f08:	a080080c 	andi	r2,r20,32
    7f0c:	1000a126 	beq	r2,zero,8194 <___vfiprintf_internal_r+0x938>
    7f10:	da802217 	ldw	r10,136(sp)
    7f14:	d8001d85 	stb	zero,118(sp)
    7f18:	50800204 	addi	r2,r10,8
    7f1c:	54800017 	ldw	r18,0(r10)
    7f20:	54c00117 	ldw	r19,4(r10)
    7f24:	4802b416 	blt	r9,zero,89f8 <___vfiprintf_internal_r+0x119c>
    7f28:	013fdfc4 	movi	r4,-129
    7f2c:	94c6b03a 	or	r3,r18,r19
    7f30:	d8802215 	stw	r2,136(sp)
    7f34:	a128703a 	and	r20,r20,r4
    7f38:	1800a226 	beq	r3,zero,81c4 <___vfiprintf_internal_r+0x968>
    7f3c:	0039883a 	mov	fp,zero
    7f40:	dd401a04 	addi	r21,sp,104
    7f44:	9006d0fa 	srli	r3,r18,3
    7f48:	9808977a 	slli	r4,r19,29
    7f4c:	9826d0fa 	srli	r19,r19,3
    7f50:	948001cc 	andi	r18,r18,7
    7f54:	90800c04 	addi	r2,r18,48
    7f58:	ad7fffc4 	addi	r21,r21,-1
    7f5c:	20e4b03a 	or	r18,r4,r3
    7f60:	a8800005 	stb	r2,0(r21)
    7f64:	94c6b03a 	or	r3,r18,r19
    7f68:	183ff61e 	bne	r3,zero,7f44 <__ram_exceptions_end+0xfbfe7cf0>
    7f6c:	a0c0004c 	andi	r3,r20,1
    7f70:	18005926 	beq	r3,zero,80d8 <___vfiprintf_internal_r+0x87c>
    7f74:	10803fcc 	andi	r2,r2,255
    7f78:	1080201c 	xori	r2,r2,128
    7f7c:	10bfe004 	addi	r2,r2,-128
    7f80:	00c00c04 	movi	r3,48
    7f84:	10c05426 	beq	r2,r3,80d8 <___vfiprintf_internal_r+0x87c>
    7f88:	da801e17 	ldw	r10,120(sp)
    7f8c:	a8bfffc4 	addi	r2,r21,-1
    7f90:	a8ffffc5 	stb	r3,-1(r21)
    7f94:	50a7c83a 	sub	r19,r10,r2
    7f98:	102b883a 	mov	r21,r2
    7f9c:	003f2f06 	br	7c5c <__ram_exceptions_end+0xfbfe7a08>
    7fa0:	21003fcc 	andi	r4,r4,255
    7fa4:	2003421e 	bne	r4,zero,8cb0 <___vfiprintf_internal_r+0x1454>
    7fa8:	00800074 	movhi	r2,1
    7fac:	10804904 	addi	r2,r2,292
    7fb0:	d8802615 	stw	r2,152(sp)
    7fb4:	a080080c 	andi	r2,r20,32
    7fb8:	1000aa26 	beq	r2,zero,8264 <___vfiprintf_internal_r+0xa08>
    7fbc:	da802217 	ldw	r10,136(sp)
    7fc0:	54800017 	ldw	r18,0(r10)
    7fc4:	54c00117 	ldw	r19,4(r10)
    7fc8:	52800204 	addi	r10,r10,8
    7fcc:	da802215 	stw	r10,136(sp)
    7fd0:	a080004c 	andi	r2,r20,1
    7fd4:	1001d226 	beq	r2,zero,8720 <___vfiprintf_internal_r+0xec4>
    7fd8:	94c4b03a 	or	r2,r18,r19
    7fdc:	1002351e 	bne	r2,zero,88b4 <___vfiprintf_internal_r+0x1058>
    7fe0:	d8001d85 	stb	zero,118(sp)
    7fe4:	48022216 	blt	r9,zero,8870 <___vfiprintf_internal_r+0x1014>
    7fe8:	00bfdfc4 	movi	r2,-129
    7fec:	a0a8703a 	and	r20,r20,r2
    7ff0:	003f1506 	br	7c48 <__ram_exceptions_end+0xfbfe79f4>
    7ff4:	da802217 	ldw	r10,136(sp)
    7ff8:	04800044 	movi	r18,1
    7ffc:	d8001d85 	stb	zero,118(sp)
    8000:	50800017 	ldw	r2,0(r10)
    8004:	52800104 	addi	r10,r10,4
    8008:	da802215 	stw	r10,136(sp)
    800c:	d8801005 	stb	r2,64(sp)
    8010:	9027883a 	mov	r19,r18
    8014:	dd401004 	addi	r21,sp,64
    8018:	0013883a 	mov	r9,zero
    801c:	003f1706 	br	7c7c <__ram_exceptions_end+0xfbfe7a28>
    8020:	21003fcc 	andi	r4,r4,255
    8024:	2003201e 	bne	r4,zero,8ca8 <___vfiprintf_internal_r+0x144c>
    8028:	a080080c 	andi	r2,r20,32
    802c:	10004b26 	beq	r2,zero,815c <___vfiprintf_internal_r+0x900>
    8030:	da802217 	ldw	r10,136(sp)
    8034:	50800117 	ldw	r2,4(r10)
    8038:	54800017 	ldw	r18,0(r10)
    803c:	52800204 	addi	r10,r10,8
    8040:	da802215 	stw	r10,136(sp)
    8044:	1027883a 	mov	r19,r2
    8048:	10022c16 	blt	r2,zero,88fc <___vfiprintf_internal_r+0x10a0>
    804c:	df001d83 	ldbu	fp,118(sp)
    8050:	48007216 	blt	r9,zero,821c <___vfiprintf_internal_r+0x9c0>
    8054:	00ffdfc4 	movi	r3,-129
    8058:	94c4b03a 	or	r2,r18,r19
    805c:	a0e8703a 	and	r20,r20,r3
    8060:	1000cc26 	beq	r2,zero,8394 <___vfiprintf_internal_r+0xb38>
    8064:	98021026 	beq	r19,zero,88a8 <___vfiprintf_internal_r+0x104c>
    8068:	dc402415 	stw	r17,144(sp)
    806c:	dc002515 	stw	r16,148(sp)
    8070:	9823883a 	mov	r17,r19
    8074:	9021883a 	mov	r16,r18
    8078:	dd401a04 	addi	r21,sp,104
    807c:	4825883a 	mov	r18,r9
    8080:	4027883a 	mov	r19,r8
    8084:	8009883a 	mov	r4,r16
    8088:	880b883a 	mov	r5,r17
    808c:	01800284 	movi	r6,10
    8090:	000f883a 	mov	r7,zero
    8094:	000a7b80 	call	a7b8 <__umoddi3>
    8098:	10800c04 	addi	r2,r2,48
    809c:	ad7fffc4 	addi	r21,r21,-1
    80a0:	8009883a 	mov	r4,r16
    80a4:	880b883a 	mov	r5,r17
    80a8:	a8800005 	stb	r2,0(r21)
    80ac:	01800284 	movi	r6,10
    80b0:	000f883a 	mov	r7,zero
    80b4:	000a2400 	call	a240 <__udivdi3>
    80b8:	1021883a 	mov	r16,r2
    80bc:	10c4b03a 	or	r2,r2,r3
    80c0:	1823883a 	mov	r17,r3
    80c4:	103fef1e 	bne	r2,zero,8084 <__ram_exceptions_end+0xfbfe7e30>
    80c8:	dc402417 	ldw	r17,144(sp)
    80cc:	dc002517 	ldw	r16,148(sp)
    80d0:	9013883a 	mov	r9,r18
    80d4:	9811883a 	mov	r8,r19
    80d8:	da801e17 	ldw	r10,120(sp)
    80dc:	5567c83a 	sub	r19,r10,r21
    80e0:	003ede06 	br	7c5c <__ram_exceptions_end+0xfbfe7a08>
    80e4:	38803fcc 	andi	r2,r7,255
    80e8:	1080201c 	xori	r2,r2,128
    80ec:	10bfe004 	addi	r2,r2,-128
    80f0:	1002371e 	bne	r2,zero,89d0 <___vfiprintf_internal_r+0x1174>
    80f4:	01000044 	movi	r4,1
    80f8:	01c00804 	movi	r7,32
    80fc:	80c00007 	ldb	r3,0(r16)
    8100:	003e3506 	br	79d8 <__ram_exceptions_end+0xfbfe7784>
    8104:	a5000054 	ori	r20,r20,1
    8108:	80c00007 	ldb	r3,0(r16)
    810c:	003e3206 	br	79d8 <__ram_exceptions_end+0xfbfe7784>
    8110:	a5002014 	ori	r20,r20,128
    8114:	80c00007 	ldb	r3,0(r16)
    8118:	003e2f06 	br	79d8 <__ram_exceptions_end+0xfbfe7784>
    811c:	8015883a 	mov	r10,r16
    8120:	0023883a 	mov	r17,zero
    8124:	18bff404 	addi	r2,r3,-48
    8128:	50c00007 	ldb	r3,0(r10)
    812c:	8c4002a4 	muli	r17,r17,10
    8130:	84000044 	addi	r16,r16,1
    8134:	8015883a 	mov	r10,r16
    8138:	1463883a 	add	r17,r2,r17
    813c:	18bff404 	addi	r2,r3,-48
    8140:	30bff92e 	bgeu	r6,r2,8128 <__ram_exceptions_end+0xfbfe7ed4>
    8144:	003e2506 	br	79dc <__ram_exceptions_end+0xfbfe7788>
    8148:	21003fcc 	andi	r4,r4,255
    814c:	2002d41e 	bne	r4,zero,8ca0 <___vfiprintf_internal_r+0x1444>
    8150:	a5000414 	ori	r20,r20,16
    8154:	a080080c 	andi	r2,r20,32
    8158:	103fb51e 	bne	r2,zero,8030 <__ram_exceptions_end+0xfbfe7ddc>
    815c:	a080040c 	andi	r2,r20,16
    8160:	1001f826 	beq	r2,zero,8944 <___vfiprintf_internal_r+0x10e8>
    8164:	da802217 	ldw	r10,136(sp)
    8168:	54800017 	ldw	r18,0(r10)
    816c:	52800104 	addi	r10,r10,4
    8170:	da802215 	stw	r10,136(sp)
    8174:	9027d7fa 	srai	r19,r18,31
    8178:	9805883a 	mov	r2,r19
    817c:	003fb206 	br	8048 <__ram_exceptions_end+0xfbfe7df4>
    8180:	21003fcc 	andi	r4,r4,255
    8184:	2002c41e 	bne	r4,zero,8c98 <___vfiprintf_internal_r+0x143c>
    8188:	a5000414 	ori	r20,r20,16
    818c:	a080080c 	andi	r2,r20,32
    8190:	103f5f1e 	bne	r2,zero,7f10 <__ram_exceptions_end+0xfbfe7cbc>
    8194:	a080040c 	andi	r2,r20,16
    8198:	10020f26 	beq	r2,zero,89d8 <___vfiprintf_internal_r+0x117c>
    819c:	da802217 	ldw	r10,136(sp)
    81a0:	d8001d85 	stb	zero,118(sp)
    81a4:	0027883a 	mov	r19,zero
    81a8:	50800104 	addi	r2,r10,4
    81ac:	54800017 	ldw	r18,0(r10)
    81b0:	48021116 	blt	r9,zero,89f8 <___vfiprintf_internal_r+0x119c>
    81b4:	00ffdfc4 	movi	r3,-129
    81b8:	d8802215 	stw	r2,136(sp)
    81bc:	a0e8703a 	and	r20,r20,r3
    81c0:	903f5e1e 	bne	r18,zero,7f3c <__ram_exceptions_end+0xfbfe7ce8>
    81c4:	0039883a 	mov	fp,zero
    81c8:	4802a626 	beq	r9,zero,8c64 <___vfiprintf_internal_r+0x1408>
    81cc:	0025883a 	mov	r18,zero
    81d0:	0027883a 	mov	r19,zero
    81d4:	003f5a06 	br	7f40 <__ram_exceptions_end+0xfbfe7cec>
    81d8:	21003fcc 	andi	r4,r4,255
    81dc:	20029f1e 	bne	r4,zero,8c5c <___vfiprintf_internal_r+0x1400>
    81e0:	a5000414 	ori	r20,r20,16
    81e4:	a080080c 	andi	r2,r20,32
    81e8:	10005e1e 	bne	r2,zero,8364 <___vfiprintf_internal_r+0xb08>
    81ec:	a080040c 	andi	r2,r20,16
    81f0:	1001a21e 	bne	r2,zero,887c <___vfiprintf_internal_r+0x1020>
    81f4:	a080100c 	andi	r2,r20,64
    81f8:	d8001d85 	stb	zero,118(sp)
    81fc:	da802217 	ldw	r10,136(sp)
    8200:	1002231e 	bne	r2,zero,8a90 <___vfiprintf_internal_r+0x1234>
    8204:	50800104 	addi	r2,r10,4
    8208:	54800017 	ldw	r18,0(r10)
    820c:	0027883a 	mov	r19,zero
    8210:	4801a00e 	bge	r9,zero,8894 <___vfiprintf_internal_r+0x1038>
    8214:	d8802215 	stw	r2,136(sp)
    8218:	0039883a 	mov	fp,zero
    821c:	94c4b03a 	or	r2,r18,r19
    8220:	103f901e 	bne	r2,zero,8064 <__ram_exceptions_end+0xfbfe7e10>
    8224:	00800044 	movi	r2,1
    8228:	10803fcc 	andi	r2,r2,255
    822c:	00c00044 	movi	r3,1
    8230:	10c05926 	beq	r2,r3,8398 <___vfiprintf_internal_r+0xb3c>
    8234:	00c00084 	movi	r3,2
    8238:	10ffe41e 	bne	r2,r3,81cc <__ram_exceptions_end+0xfbfe7f78>
    823c:	0025883a 	mov	r18,zero
    8240:	0027883a 	mov	r19,zero
    8244:	00013d06 	br	873c <___vfiprintf_internal_r+0xee0>
    8248:	21003fcc 	andi	r4,r4,255
    824c:	2002811e 	bne	r4,zero,8c54 <___vfiprintf_internal_r+0x13f8>
    8250:	00800074 	movhi	r2,1
    8254:	10804404 	addi	r2,r2,272
    8258:	d8802615 	stw	r2,152(sp)
    825c:	a080080c 	andi	r2,r20,32
    8260:	103f561e 	bne	r2,zero,7fbc <__ram_exceptions_end+0xfbfe7d68>
    8264:	a080040c 	andi	r2,r20,16
    8268:	1001d126 	beq	r2,zero,89b0 <___vfiprintf_internal_r+0x1154>
    826c:	da802217 	ldw	r10,136(sp)
    8270:	0027883a 	mov	r19,zero
    8274:	54800017 	ldw	r18,0(r10)
    8278:	52800104 	addi	r10,r10,4
    827c:	da802215 	stw	r10,136(sp)
    8280:	003f5306 	br	7fd0 <__ram_exceptions_end+0xfbfe7d7c>
    8284:	da802217 	ldw	r10,136(sp)
    8288:	d8001d85 	stb	zero,118(sp)
    828c:	55400017 	ldw	r21,0(r10)
    8290:	50c00104 	addi	r3,r10,4
    8294:	a8024226 	beq	r21,zero,8ba0 <___vfiprintf_internal_r+0x1344>
    8298:	48021816 	blt	r9,zero,8afc <___vfiprintf_internal_r+0x12a0>
    829c:	480d883a 	mov	r6,r9
    82a0:	000b883a 	mov	r5,zero
    82a4:	a809883a 	mov	r4,r21
    82a8:	d8c02a15 	stw	r3,168(sp)
    82ac:	da002b15 	stw	r8,172(sp)
    82b0:	da402c15 	stw	r9,176(sp)
    82b4:	00060800 	call	6080 <memchr>
    82b8:	d8c02a17 	ldw	r3,168(sp)
    82bc:	da002b17 	ldw	r8,172(sp)
    82c0:	da402c17 	ldw	r9,176(sp)
    82c4:	10024826 	beq	r2,zero,8be8 <___vfiprintf_internal_r+0x138c>
    82c8:	1567c83a 	sub	r19,r2,r21
    82cc:	df001d83 	ldbu	fp,118(sp)
    82d0:	d8c02215 	stw	r3,136(sp)
    82d4:	0013883a 	mov	r9,zero
    82d8:	003e6006 	br	7c5c <__ram_exceptions_end+0xfbfe7a08>
    82dc:	21003fcc 	andi	r4,r4,255
    82e0:	203fc026 	beq	r4,zero,81e4 <__ram_exceptions_end+0xfbfe7f90>
    82e4:	d9c01d85 	stb	r7,118(sp)
    82e8:	003fbe06 	br	81e4 <__ram_exceptions_end+0xfbfe7f90>
    82ec:	da802217 	ldw	r10,136(sp)
    82f0:	54400017 	ldw	r17,0(r10)
    82f4:	50800104 	addi	r2,r10,4
    82f8:	883e3b16 	blt	r17,zero,7be8 <__ram_exceptions_end+0xfbfe7994>
    82fc:	d8802215 	stw	r2,136(sp)
    8300:	80c00007 	ldb	r3,0(r16)
    8304:	003db406 	br	79d8 <__ram_exceptions_end+0xfbfe7784>
    8308:	01000044 	movi	r4,1
    830c:	01c00ac4 	movi	r7,43
    8310:	80c00007 	ldb	r3,0(r16)
    8314:	003db006 	br	79d8 <__ram_exceptions_end+0xfbfe7784>
    8318:	80c00007 	ldb	r3,0(r16)
    831c:	82800044 	addi	r10,r16,1
    8320:	1b423c26 	beq	r3,r13,8c14 <___vfiprintf_internal_r+0x13b8>
    8324:	18bff404 	addi	r2,r3,-48
    8328:	0013883a 	mov	r9,zero
    832c:	30822b36 	bltu	r6,r2,8bdc <___vfiprintf_internal_r+0x1380>
    8330:	50c00007 	ldb	r3,0(r10)
    8334:	4a4002a4 	muli	r9,r9,10
    8338:	54000044 	addi	r16,r10,1
    833c:	8015883a 	mov	r10,r16
    8340:	4893883a 	add	r9,r9,r2
    8344:	18bff404 	addi	r2,r3,-48
    8348:	30bff92e 	bgeu	r6,r2,8330 <__ram_exceptions_end+0xfbfe80dc>
    834c:	483da30e 	bge	r9,zero,79dc <__ram_exceptions_end+0xfbfe7788>
    8350:	027fffc4 	movi	r9,-1
    8354:	003da106 	br	79dc <__ram_exceptions_end+0xfbfe7788>
    8358:	a5001014 	ori	r20,r20,64
    835c:	80c00007 	ldb	r3,0(r16)
    8360:	003d9d06 	br	79d8 <__ram_exceptions_end+0xfbfe7784>
    8364:	da802217 	ldw	r10,136(sp)
    8368:	d8001d85 	stb	zero,118(sp)
    836c:	50c00204 	addi	r3,r10,8
    8370:	54800017 	ldw	r18,0(r10)
    8374:	54c00117 	ldw	r19,4(r10)
    8378:	4801ca16 	blt	r9,zero,8aa4 <___vfiprintf_internal_r+0x1248>
    837c:	013fdfc4 	movi	r4,-129
    8380:	94c4b03a 	or	r2,r18,r19
    8384:	d8c02215 	stw	r3,136(sp)
    8388:	a128703a 	and	r20,r20,r4
    838c:	0039883a 	mov	fp,zero
    8390:	103f341e 	bne	r2,zero,8064 <__ram_exceptions_end+0xfbfe7e10>
    8394:	483e2e26 	beq	r9,zero,7c50 <__ram_exceptions_end+0xfbfe79fc>
    8398:	0025883a 	mov	r18,zero
    839c:	94800c04 	addi	r18,r18,48
    83a0:	dc8019c5 	stb	r18,103(sp)
    83a4:	dcc02717 	ldw	r19,156(sp)
    83a8:	dd4019c4 	addi	r21,sp,103
    83ac:	003e2b06 	br	7c5c <__ram_exceptions_end+0xfbfe7a08>
    83b0:	21003fcc 	andi	r4,r4,255
    83b4:	2002361e 	bne	r4,zero,8c90 <___vfiprintf_internal_r+0x1434>
    83b8:	1801c126 	beq	r3,zero,8ac0 <___vfiprintf_internal_r+0x1264>
    83bc:	04800044 	movi	r18,1
    83c0:	d8c01005 	stb	r3,64(sp)
    83c4:	d8001d85 	stb	zero,118(sp)
    83c8:	9027883a 	mov	r19,r18
    83cc:	dd401004 	addi	r21,sp,64
    83d0:	003f1106 	br	8018 <__ram_exceptions_end+0xfbfe7dc4>
    83d4:	d9402117 	ldw	r5,132(sp)
    83d8:	d9002017 	ldw	r4,128(sp)
    83dc:	d9801a04 	addi	r6,sp,104
    83e0:	d9c02b15 	stw	r7,172(sp)
    83e4:	dbc02a15 	stw	r15,168(sp)
    83e8:	00077480 	call	7748 <__sprint_r.part.0>
    83ec:	d9c02b17 	ldw	r7,172(sp)
    83f0:	dbc02a17 	ldw	r15,168(sp)
    83f4:	10006d1e 	bne	r2,zero,85ac <___vfiprintf_internal_r+0xd50>
    83f8:	d9801b17 	ldw	r6,108(sp)
    83fc:	d8801c17 	ldw	r2,112(sp)
    8400:	d811883a 	mov	r8,sp
    8404:	31400044 	addi	r5,r6,1
    8408:	003e3306 	br	7cd8 <__ram_exceptions_end+0xfbfe7a84>
    840c:	d9401b17 	ldw	r5,108(sp)
    8410:	d8801c17 	ldw	r2,112(sp)
    8414:	29000044 	addi	r4,r5,1
    8418:	d8c01d87 	ldb	r3,118(sp)
    841c:	183e4d26 	beq	r3,zero,7d54 <__ram_exceptions_end+0xfbfe7b00>
    8420:	00c00044 	movi	r3,1
    8424:	d9401d84 	addi	r5,sp,118
    8428:	10c5883a 	add	r2,r2,r3
    842c:	41400015 	stw	r5,0(r8)
    8430:	40c00115 	stw	r3,4(r8)
    8434:	d8801c15 	stw	r2,112(sp)
    8438:	d9001b15 	stw	r4,108(sp)
    843c:	014001c4 	movi	r5,7
    8440:	2900a90e 	bge	r5,r4,86e8 <___vfiprintf_internal_r+0xe8c>
    8444:	1000da1e 	bne	r2,zero,87b0 <___vfiprintf_internal_r+0xf54>
    8448:	7000ab1e 	bne	r14,zero,86f8 <___vfiprintf_internal_r+0xe9c>
    844c:	000b883a 	mov	r5,zero
    8450:	1809883a 	mov	r4,r3
    8454:	d811883a 	mov	r8,sp
    8458:	00c02004 	movi	r3,128
    845c:	e0fe4d26 	beq	fp,r3,7d94 <__ram_exceptions_end+0xfbfe7b40>
    8460:	4cf9c83a 	sub	fp,r9,r19
    8464:	073e7b0e 	bge	zero,fp,7e54 <__ram_exceptions_end+0xfbfe7c00>
    8468:	01c00404 	movi	r7,16
    846c:	3f01900e 	bge	r7,fp,8ab0 <___vfiprintf_internal_r+0x1254>
    8470:	00c00074 	movhi	r3,1
    8474:	18c0aa04 	addi	r3,r3,680
    8478:	d8c02415 	stw	r3,144(sp)
    847c:	034001c4 	movi	r13,7
    8480:	00000506 	br	8498 <___vfiprintf_internal_r+0xc3c>
    8484:	29000084 	addi	r4,r5,2
    8488:	42000204 	addi	r8,r8,8
    848c:	180b883a 	mov	r5,r3
    8490:	e73ffc04 	addi	fp,fp,-16
    8494:	3f000d0e 	bge	r7,fp,84cc <___vfiprintf_internal_r+0xc70>
    8498:	10800404 	addi	r2,r2,16
    849c:	28c00044 	addi	r3,r5,1
    84a0:	45c00015 	stw	r23,0(r8)
    84a4:	41c00115 	stw	r7,4(r8)
    84a8:	d8801c15 	stw	r2,112(sp)
    84ac:	d8c01b15 	stw	r3,108(sp)
    84b0:	68fff40e 	bge	r13,r3,8484 <__ram_exceptions_end+0xfbfe8230>
    84b4:	1000101e 	bne	r2,zero,84f8 <___vfiprintf_internal_r+0xc9c>
    84b8:	e73ffc04 	addi	fp,fp,-16
    84bc:	01000044 	movi	r4,1
    84c0:	000b883a 	mov	r5,zero
    84c4:	d811883a 	mov	r8,sp
    84c8:	3f3ff316 	blt	r7,fp,8498 <__ram_exceptions_end+0xfbfe8244>
    84cc:	da802417 	ldw	r10,144(sp)
    84d0:	1705883a 	add	r2,r2,fp
    84d4:	47000115 	stw	fp,4(r8)
    84d8:	42800015 	stw	r10,0(r8)
    84dc:	d8801c15 	stw	r2,112(sp)
    84e0:	d9001b15 	stw	r4,108(sp)
    84e4:	00c001c4 	movi	r3,7
    84e8:	19003616 	blt	r3,r4,85c4 <___vfiprintf_internal_r+0xd68>
    84ec:	42000204 	addi	r8,r8,8
    84f0:	21000044 	addi	r4,r4,1
    84f4:	003e5706 	br	7e54 <__ram_exceptions_end+0xfbfe7c00>
    84f8:	d9402117 	ldw	r5,132(sp)
    84fc:	d9002017 	ldw	r4,128(sp)
    8500:	d9801a04 	addi	r6,sp,104
    8504:	d9c02b15 	stw	r7,172(sp)
    8508:	db402a15 	stw	r13,168(sp)
    850c:	00077480 	call	7748 <__sprint_r.part.0>
    8510:	d9c02b17 	ldw	r7,172(sp)
    8514:	db402a17 	ldw	r13,168(sp)
    8518:	1000241e 	bne	r2,zero,85ac <___vfiprintf_internal_r+0xd50>
    851c:	d9401b17 	ldw	r5,108(sp)
    8520:	d8801c17 	ldw	r2,112(sp)
    8524:	d811883a 	mov	r8,sp
    8528:	29000044 	addi	r4,r5,1
    852c:	003fd806 	br	8490 <__ram_exceptions_end+0xfbfe823c>
    8530:	d9401b17 	ldw	r5,108(sp)
    8534:	00c00074 	movhi	r3,1
    8538:	18c0ae04 	addi	r3,r3,696
    853c:	d8c02415 	stw	r3,144(sp)
    8540:	29400044 	addi	r5,r5,1
    8544:	d8c02417 	ldw	r3,144(sp)
    8548:	14c5883a 	add	r2,r2,r19
    854c:	44c00115 	stw	r19,4(r8)
    8550:	40c00015 	stw	r3,0(r8)
    8554:	d8801c15 	stw	r2,112(sp)
    8558:	d9401b15 	stw	r5,108(sp)
    855c:	00c001c4 	movi	r3,7
    8560:	1940070e 	bge	r3,r5,8580 <___vfiprintf_internal_r+0xd24>
    8564:	103e4826 	beq	r2,zero,7e88 <__ram_exceptions_end+0xfbfe7c34>
    8568:	d9402117 	ldw	r5,132(sp)
    856c:	d9002017 	ldw	r4,128(sp)
    8570:	d9801a04 	addi	r6,sp,104
    8574:	00077480 	call	7748 <__sprint_r.part.0>
    8578:	10000c1e 	bne	r2,zero,85ac <___vfiprintf_internal_r+0xd50>
    857c:	d8801c17 	ldw	r2,112(sp)
    8580:	8c80010e 	bge	r17,r18,8588 <___vfiprintf_internal_r+0xd2c>
    8584:	9023883a 	mov	r17,r18
    8588:	da802317 	ldw	r10,140(sp)
    858c:	5455883a 	add	r10,r10,r17
    8590:	da802315 	stw	r10,140(sp)
    8594:	103e4126 	beq	r2,zero,7e9c <__ram_exceptions_end+0xfbfe7c48>
    8598:	d9402117 	ldw	r5,132(sp)
    859c:	d9002017 	ldw	r4,128(sp)
    85a0:	d9801a04 	addi	r6,sp,104
    85a4:	00077480 	call	7748 <__sprint_r.part.0>
    85a8:	103e3c26 	beq	r2,zero,7e9c <__ram_exceptions_end+0xfbfe7c48>
    85ac:	dd002117 	ldw	r20,132(sp)
    85b0:	a080030b 	ldhu	r2,12(r20)
    85b4:	1080100c 	andi	r2,r2,64
    85b8:	1001231e 	bne	r2,zero,8a48 <___vfiprintf_internal_r+0x11ec>
    85bc:	d8802317 	ldw	r2,140(sp)
    85c0:	003d7b06 	br	7bb0 <__ram_exceptions_end+0xfbfe795c>
    85c4:	1000991e 	bne	r2,zero,882c <___vfiprintf_internal_r+0xfd0>
    85c8:	00c00044 	movi	r3,1
    85cc:	9805883a 	mov	r2,r19
    85d0:	dd400015 	stw	r21,0(sp)
    85d4:	dcc00115 	stw	r19,4(sp)
    85d8:	dcc01c15 	stw	r19,112(sp)
    85dc:	d8c01b15 	stw	r3,108(sp)
    85e0:	d811883a 	mov	r8,sp
    85e4:	42000204 	addi	r8,r8,8
    85e8:	a2c0010c 	andi	r11,r20,4
    85ec:	583fe426 	beq	r11,zero,8580 <__ram_exceptions_end+0xfbfe832c>
    85f0:	8ca7c83a 	sub	r19,r17,r18
    85f4:	04ffe20e 	bge	zero,r19,8580 <__ram_exceptions_end+0xfbfe832c>
    85f8:	01c00404 	movi	r7,16
    85fc:	3cffcc0e 	bge	r7,r19,8530 <__ram_exceptions_end+0xfbfe82dc>
    8600:	02800074 	movhi	r10,1
    8604:	5280ae04 	addi	r10,r10,696
    8608:	d9001b17 	ldw	r4,108(sp)
    860c:	da802415 	stw	r10,144(sp)
    8610:	382b883a 	mov	r21,r7
    8614:	050001c4 	movi	r20,7
    8618:	df002017 	ldw	fp,128(sp)
    861c:	00000506 	br	8634 <___vfiprintf_internal_r+0xdd8>
    8620:	21400084 	addi	r5,r4,2
    8624:	42000204 	addi	r8,r8,8
    8628:	1809883a 	mov	r4,r3
    862c:	9cfffc04 	addi	r19,r19,-16
    8630:	acffc40e 	bge	r21,r19,8544 <__ram_exceptions_end+0xfbfe82f0>
    8634:	10800404 	addi	r2,r2,16
    8638:	20c00044 	addi	r3,r4,1
    863c:	45800015 	stw	r22,0(r8)
    8640:	45400115 	stw	r21,4(r8)
    8644:	d8801c15 	stw	r2,112(sp)
    8648:	d8c01b15 	stw	r3,108(sp)
    864c:	a0fff40e 	bge	r20,r3,8620 <__ram_exceptions_end+0xfbfe83cc>
    8650:	1000041e 	bne	r2,zero,8664 <___vfiprintf_internal_r+0xe08>
    8654:	01400044 	movi	r5,1
    8658:	0009883a 	mov	r4,zero
    865c:	d811883a 	mov	r8,sp
    8660:	003ff206 	br	862c <__ram_exceptions_end+0xfbfe83d8>
    8664:	d9402117 	ldw	r5,132(sp)
    8668:	d9801a04 	addi	r6,sp,104
    866c:	e009883a 	mov	r4,fp
    8670:	00077480 	call	7748 <__sprint_r.part.0>
    8674:	103fcd1e 	bne	r2,zero,85ac <__ram_exceptions_end+0xfbfe8358>
    8678:	d9001b17 	ldw	r4,108(sp)
    867c:	d8801c17 	ldw	r2,112(sp)
    8680:	d811883a 	mov	r8,sp
    8684:	21400044 	addi	r5,r4,1
    8688:	003fe806 	br	862c <__ram_exceptions_end+0xfbfe83d8>
    868c:	d9402117 	ldw	r5,132(sp)
    8690:	d9002017 	ldw	r4,128(sp)
    8694:	d9801a04 	addi	r6,sp,104
    8698:	d9c02b15 	stw	r7,172(sp)
    869c:	db402a15 	stw	r13,168(sp)
    86a0:	00077480 	call	7748 <__sprint_r.part.0>
    86a4:	d9c02b17 	ldw	r7,172(sp)
    86a8:	db402a17 	ldw	r13,168(sp)
    86ac:	103fbf1e 	bne	r2,zero,85ac <__ram_exceptions_end+0xfbfe8358>
    86b0:	d9401b17 	ldw	r5,108(sp)
    86b4:	d8801c17 	ldw	r2,112(sp)
    86b8:	d811883a 	mov	r8,sp
    86bc:	29800044 	addi	r6,r5,1
    86c0:	003dc406 	br	7dd4 <__ram_exceptions_end+0xfbfe7b80>
    86c4:	1000d21e 	bne	r2,zero,8a10 <___vfiprintf_internal_r+0x11b4>
    86c8:	d8c01d87 	ldb	r3,118(sp)
    86cc:	18009526 	beq	r3,zero,8924 <___vfiprintf_internal_r+0x10c8>
    86d0:	00800044 	movi	r2,1
    86d4:	d8c01d84 	addi	r3,sp,118
    86d8:	1009883a 	mov	r4,r2
    86dc:	d8c00015 	stw	r3,0(sp)
    86e0:	d8800115 	stw	r2,4(sp)
    86e4:	d811883a 	mov	r8,sp
    86e8:	200b883a 	mov	r5,r4
    86ec:	42000204 	addi	r8,r8,8
    86f0:	21000044 	addi	r4,r4,1
    86f4:	003d9706 	br	7d54 <__ram_exceptions_end+0xfbfe7b00>
    86f8:	d9001d04 	addi	r4,sp,116
    86fc:	00800084 	movi	r2,2
    8700:	d9000015 	stw	r4,0(sp)
    8704:	d8800115 	stw	r2,4(sp)
    8708:	1809883a 	mov	r4,r3
    870c:	d811883a 	mov	r8,sp
    8710:	200b883a 	mov	r5,r4
    8714:	42000204 	addi	r8,r8,8
    8718:	21000044 	addi	r4,r4,1
    871c:	003f4e06 	br	8458 <__ram_exceptions_end+0xfbfe8204>
    8720:	d8001d85 	stb	zero,118(sp)
    8724:	48005016 	blt	r9,zero,8868 <___vfiprintf_internal_r+0x100c>
    8728:	00ffdfc4 	movi	r3,-129
    872c:	94c4b03a 	or	r2,r18,r19
    8730:	a0e8703a 	and	r20,r20,r3
    8734:	103d4426 	beq	r2,zero,7c48 <__ram_exceptions_end+0xfbfe79f4>
    8738:	0039883a 	mov	fp,zero
    873c:	d9002617 	ldw	r4,152(sp)
    8740:	dd401a04 	addi	r21,sp,104
    8744:	908003cc 	andi	r2,r18,15
    8748:	9806973a 	slli	r3,r19,28
    874c:	2085883a 	add	r2,r4,r2
    8750:	9024d13a 	srli	r18,r18,4
    8754:	10800003 	ldbu	r2,0(r2)
    8758:	9826d13a 	srli	r19,r19,4
    875c:	ad7fffc4 	addi	r21,r21,-1
    8760:	1ca4b03a 	or	r18,r3,r18
    8764:	a8800005 	stb	r2,0(r21)
    8768:	94c4b03a 	or	r2,r18,r19
    876c:	103ff51e 	bne	r2,zero,8744 <__ram_exceptions_end+0xfbfe84f0>
    8770:	003e5906 	br	80d8 <__ram_exceptions_end+0xfbfe7e84>
    8774:	d9402117 	ldw	r5,132(sp)
    8778:	d9002017 	ldw	r4,128(sp)
    877c:	d9801a04 	addi	r6,sp,104
    8780:	00077480 	call	7748 <__sprint_r.part.0>
    8784:	103f891e 	bne	r2,zero,85ac <__ram_exceptions_end+0xfbfe8358>
    8788:	d8801c17 	ldw	r2,112(sp)
    878c:	d811883a 	mov	r8,sp
    8790:	003f9506 	br	85e8 <__ram_exceptions_end+0xfbfe8394>
    8794:	d9402117 	ldw	r5,132(sp)
    8798:	d9002017 	ldw	r4,128(sp)
    879c:	d9801a04 	addi	r6,sp,104
    87a0:	00077480 	call	7748 <__sprint_r.part.0>
    87a4:	103f811e 	bne	r2,zero,85ac <__ram_exceptions_end+0xfbfe8358>
    87a8:	d811883a 	mov	r8,sp
    87ac:	003ced06 	br	7b64 <__ram_exceptions_end+0xfbfe7910>
    87b0:	d9402117 	ldw	r5,132(sp)
    87b4:	d9002017 	ldw	r4,128(sp)
    87b8:	d9801a04 	addi	r6,sp,104
    87bc:	da402c15 	stw	r9,176(sp)
    87c0:	db802a15 	stw	r14,168(sp)
    87c4:	00077480 	call	7748 <__sprint_r.part.0>
    87c8:	da402c17 	ldw	r9,176(sp)
    87cc:	db802a17 	ldw	r14,168(sp)
    87d0:	103f761e 	bne	r2,zero,85ac <__ram_exceptions_end+0xfbfe8358>
    87d4:	d9401b17 	ldw	r5,108(sp)
    87d8:	d8801c17 	ldw	r2,112(sp)
    87dc:	d811883a 	mov	r8,sp
    87e0:	29000044 	addi	r4,r5,1
    87e4:	003d5b06 	br	7d54 <__ram_exceptions_end+0xfbfe7b00>
    87e8:	d9402117 	ldw	r5,132(sp)
    87ec:	d9002017 	ldw	r4,128(sp)
    87f0:	d9801a04 	addi	r6,sp,104
    87f4:	da402c15 	stw	r9,176(sp)
    87f8:	00077480 	call	7748 <__sprint_r.part.0>
    87fc:	da402c17 	ldw	r9,176(sp)
    8800:	103f6a1e 	bne	r2,zero,85ac <__ram_exceptions_end+0xfbfe8358>
    8804:	d9401b17 	ldw	r5,108(sp)
    8808:	d8801c17 	ldw	r2,112(sp)
    880c:	d811883a 	mov	r8,sp
    8810:	29000044 	addi	r4,r5,1
    8814:	003f1006 	br	8458 <__ram_exceptions_end+0xfbfe8204>
    8818:	1000c31e 	bne	r2,zero,8b28 <___vfiprintf_internal_r+0x12cc>
    881c:	01000044 	movi	r4,1
    8820:	000b883a 	mov	r5,zero
    8824:	d811883a 	mov	r8,sp
    8828:	003f0d06 	br	8460 <__ram_exceptions_end+0xfbfe820c>
    882c:	d9402117 	ldw	r5,132(sp)
    8830:	d9002017 	ldw	r4,128(sp)
    8834:	d9801a04 	addi	r6,sp,104
    8838:	00077480 	call	7748 <__sprint_r.part.0>
    883c:	103f5b1e 	bne	r2,zero,85ac <__ram_exceptions_end+0xfbfe8358>
    8840:	d9001b17 	ldw	r4,108(sp)
    8844:	d8801c17 	ldw	r2,112(sp)
    8848:	d811883a 	mov	r8,sp
    884c:	21000044 	addi	r4,r4,1
    8850:	003d8006 	br	7e54 <__ram_exceptions_end+0xfbfe7c00>
    8854:	01000074 	movhi	r4,1
    8858:	21004904 	addi	r4,r4,292
    885c:	d9002615 	stw	r4,152(sp)
    8860:	d8c02215 	stw	r3,136(sp)
    8864:	1029883a 	mov	r20,r2
    8868:	94c4b03a 	or	r2,r18,r19
    886c:	103fb21e 	bne	r2,zero,8738 <__ram_exceptions_end+0xfbfe84e4>
    8870:	0039883a 	mov	fp,zero
    8874:	00800084 	movi	r2,2
    8878:	003e6b06 	br	8228 <__ram_exceptions_end+0xfbfe7fd4>
    887c:	da802217 	ldw	r10,136(sp)
    8880:	d8001d85 	stb	zero,118(sp)
    8884:	0027883a 	mov	r19,zero
    8888:	50800104 	addi	r2,r10,4
    888c:	54800017 	ldw	r18,0(r10)
    8890:	483e6016 	blt	r9,zero,8214 <__ram_exceptions_end+0xfbfe7fc0>
    8894:	00ffdfc4 	movi	r3,-129
    8898:	d8802215 	stw	r2,136(sp)
    889c:	a0e8703a 	and	r20,r20,r3
    88a0:	0039883a 	mov	fp,zero
    88a4:	903ebb26 	beq	r18,zero,8394 <__ram_exceptions_end+0xfbfe8140>
    88a8:	00800244 	movi	r2,9
    88ac:	14bdee36 	bltu	r2,r18,8068 <__ram_exceptions_end+0xfbfe7e14>
    88b0:	003eba06 	br	839c <__ram_exceptions_end+0xfbfe8148>
    88b4:	00800c04 	movi	r2,48
    88b8:	d8c01d45 	stb	r3,117(sp)
    88bc:	d8801d05 	stb	r2,116(sp)
    88c0:	d8001d85 	stb	zero,118(sp)
    88c4:	a0c00094 	ori	r3,r20,2
    88c8:	4800a916 	blt	r9,zero,8b70 <___vfiprintf_internal_r+0x1314>
    88cc:	00bfdfc4 	movi	r2,-129
    88d0:	a096703a 	and	r11,r20,r2
    88d4:	5d000094 	ori	r20,r11,2
    88d8:	0039883a 	mov	fp,zero
    88dc:	003f9706 	br	873c <__ram_exceptions_end+0xfbfe84e8>
    88e0:	8025883a 	mov	r18,r16
    88e4:	003c2e06 	br	79a0 <__ram_exceptions_end+0xfbfe774c>
    88e8:	00800074 	movhi	r2,1
    88ec:	10804904 	addi	r2,r2,292
    88f0:	0039883a 	mov	fp,zero
    88f4:	d8802615 	stw	r2,152(sp)
    88f8:	003f9006 	br	873c <__ram_exceptions_end+0xfbfe84e8>
    88fc:	04a5c83a 	sub	r18,zero,r18
    8900:	07000b44 	movi	fp,45
    8904:	9004c03a 	cmpne	r2,r18,zero
    8908:	04e7c83a 	sub	r19,zero,r19
    890c:	df001d85 	stb	fp,118(sp)
    8910:	98a7c83a 	sub	r19,r19,r2
    8914:	48009f16 	blt	r9,zero,8b94 <___vfiprintf_internal_r+0x1338>
    8918:	00bfdfc4 	movi	r2,-129
    891c:	a0a8703a 	and	r20,r20,r2
    8920:	003dd006 	br	8064 <__ram_exceptions_end+0xfbfe7e10>
    8924:	70004c26 	beq	r14,zero,8a58 <___vfiprintf_internal_r+0x11fc>
    8928:	00800084 	movi	r2,2
    892c:	d8c01d04 	addi	r3,sp,116
    8930:	d8c00015 	stw	r3,0(sp)
    8934:	d8800115 	stw	r2,4(sp)
    8938:	01000044 	movi	r4,1
    893c:	d811883a 	mov	r8,sp
    8940:	003f7306 	br	8710 <__ram_exceptions_end+0xfbfe84bc>
    8944:	a080100c 	andi	r2,r20,64
    8948:	da802217 	ldw	r10,136(sp)
    894c:	103e0626 	beq	r2,zero,8168 <__ram_exceptions_end+0xfbfe7f14>
    8950:	5480000f 	ldh	r18,0(r10)
    8954:	52800104 	addi	r10,r10,4
    8958:	da802215 	stw	r10,136(sp)
    895c:	9027d7fa 	srai	r19,r18,31
    8960:	9805883a 	mov	r2,r19
    8964:	003db806 	br	8048 <__ram_exceptions_end+0xfbfe7df4>
    8968:	a080040c 	andi	r2,r20,16
    896c:	1000091e 	bne	r2,zero,8994 <___vfiprintf_internal_r+0x1138>
    8970:	a2c0100c 	andi	r11,r20,64
    8974:	58000726 	beq	r11,zero,8994 <___vfiprintf_internal_r+0x1138>
    8978:	da802217 	ldw	r10,136(sp)
    897c:	50800017 	ldw	r2,0(r10)
    8980:	52800104 	addi	r10,r10,4
    8984:	da802215 	stw	r10,136(sp)
    8988:	da802317 	ldw	r10,140(sp)
    898c:	1280000d 	sth	r10,0(r2)
    8990:	003be706 	br	7930 <__ram_exceptions_end+0xfbfe76dc>
    8994:	da802217 	ldw	r10,136(sp)
    8998:	50800017 	ldw	r2,0(r10)
    899c:	52800104 	addi	r10,r10,4
    89a0:	da802215 	stw	r10,136(sp)
    89a4:	da802317 	ldw	r10,140(sp)
    89a8:	12800015 	stw	r10,0(r2)
    89ac:	003be006 	br	7930 <__ram_exceptions_end+0xfbfe76dc>
    89b0:	a080100c 	andi	r2,r20,64
    89b4:	da802217 	ldw	r10,136(sp)
    89b8:	10003026 	beq	r2,zero,8a7c <___vfiprintf_internal_r+0x1220>
    89bc:	5480000b 	ldhu	r18,0(r10)
    89c0:	52800104 	addi	r10,r10,4
    89c4:	0027883a 	mov	r19,zero
    89c8:	da802215 	stw	r10,136(sp)
    89cc:	003d8006 	br	7fd0 <__ram_exceptions_end+0xfbfe7d7c>
    89d0:	80c00007 	ldb	r3,0(r16)
    89d4:	003c0006 	br	79d8 <__ram_exceptions_end+0xfbfe7784>
    89d8:	a080100c 	andi	r2,r20,64
    89dc:	d8001d85 	stb	zero,118(sp)
    89e0:	da802217 	ldw	r10,136(sp)
    89e4:	1000201e 	bne	r2,zero,8a68 <___vfiprintf_internal_r+0x120c>
    89e8:	50800104 	addi	r2,r10,4
    89ec:	54800017 	ldw	r18,0(r10)
    89f0:	0027883a 	mov	r19,zero
    89f4:	483def0e 	bge	r9,zero,81b4 <__ram_exceptions_end+0xfbfe7f60>
    89f8:	94c6b03a 	or	r3,r18,r19
    89fc:	d8802215 	stw	r2,136(sp)
    8a00:	183d4e1e 	bne	r3,zero,7f3c <__ram_exceptions_end+0xfbfe7ce8>
    8a04:	0039883a 	mov	fp,zero
    8a08:	0005883a 	mov	r2,zero
    8a0c:	003e0606 	br	8228 <__ram_exceptions_end+0xfbfe7fd4>
    8a10:	d9402117 	ldw	r5,132(sp)
    8a14:	d9002017 	ldw	r4,128(sp)
    8a18:	d9801a04 	addi	r6,sp,104
    8a1c:	da402c15 	stw	r9,176(sp)
    8a20:	db802a15 	stw	r14,168(sp)
    8a24:	00077480 	call	7748 <__sprint_r.part.0>
    8a28:	da402c17 	ldw	r9,176(sp)
    8a2c:	db802a17 	ldw	r14,168(sp)
    8a30:	103ede1e 	bne	r2,zero,85ac <__ram_exceptions_end+0xfbfe8358>
    8a34:	d9401b17 	ldw	r5,108(sp)
    8a38:	d8801c17 	ldw	r2,112(sp)
    8a3c:	d811883a 	mov	r8,sp
    8a40:	29000044 	addi	r4,r5,1
    8a44:	003e7406 	br	8418 <__ram_exceptions_end+0xfbfe81c4>
    8a48:	00bfffc4 	movi	r2,-1
    8a4c:	003c5806 	br	7bb0 <__ram_exceptions_end+0xfbfe795c>
    8a50:	d811883a 	mov	r8,sp
    8a54:	003ee806 	br	85f8 <__ram_exceptions_end+0xfbfe83a4>
    8a58:	000b883a 	mov	r5,zero
    8a5c:	01000044 	movi	r4,1
    8a60:	d811883a 	mov	r8,sp
    8a64:	003e7c06 	br	8458 <__ram_exceptions_end+0xfbfe8204>
    8a68:	50800104 	addi	r2,r10,4
    8a6c:	5480000b 	ldhu	r18,0(r10)
    8a70:	0027883a 	mov	r19,zero
    8a74:	483dcf0e 	bge	r9,zero,81b4 <__ram_exceptions_end+0xfbfe7f60>
    8a78:	003fdf06 	br	89f8 <__ram_exceptions_end+0xfbfe87a4>
    8a7c:	54800017 	ldw	r18,0(r10)
    8a80:	52800104 	addi	r10,r10,4
    8a84:	0027883a 	mov	r19,zero
    8a88:	da802215 	stw	r10,136(sp)
    8a8c:	003d5006 	br	7fd0 <__ram_exceptions_end+0xfbfe7d7c>
    8a90:	50800104 	addi	r2,r10,4
    8a94:	5480000b 	ldhu	r18,0(r10)
    8a98:	0027883a 	mov	r19,zero
    8a9c:	483f7d0e 	bge	r9,zero,8894 <__ram_exceptions_end+0xfbfe8640>
    8aa0:	003ddc06 	br	8214 <__ram_exceptions_end+0xfbfe7fc0>
    8aa4:	d8c02215 	stw	r3,136(sp)
    8aa8:	0039883a 	mov	fp,zero
    8aac:	003ddb06 	br	821c <__ram_exceptions_end+0xfbfe7fc8>
    8ab0:	02800074 	movhi	r10,1
    8ab4:	5280aa04 	addi	r10,r10,680
    8ab8:	da802415 	stw	r10,144(sp)
    8abc:	003e8306 	br	84cc <__ram_exceptions_end+0xfbfe8278>
    8ac0:	d8801c17 	ldw	r2,112(sp)
    8ac4:	dd002117 	ldw	r20,132(sp)
    8ac8:	103eb926 	beq	r2,zero,85b0 <__ram_exceptions_end+0xfbfe835c>
    8acc:	d9002017 	ldw	r4,128(sp)
    8ad0:	d9801a04 	addi	r6,sp,104
    8ad4:	a00b883a 	mov	r5,r20
    8ad8:	00077480 	call	7748 <__sprint_r.part.0>
    8adc:	003eb406 	br	85b0 <__ram_exceptions_end+0xfbfe835c>
    8ae0:	80c00043 	ldbu	r3,1(r16)
    8ae4:	a5000814 	ori	r20,r20,32
    8ae8:	84000044 	addi	r16,r16,1
    8aec:	18c03fcc 	andi	r3,r3,255
    8af0:	18c0201c 	xori	r3,r3,128
    8af4:	18ffe004 	addi	r3,r3,-128
    8af8:	003bb706 	br	79d8 <__ram_exceptions_end+0xfbfe7784>
    8afc:	a809883a 	mov	r4,r21
    8b00:	d8c02a15 	stw	r3,168(sp)
    8b04:	da002b15 	stw	r8,172(sp)
    8b08:	00076b00 	call	76b0 <strlen>
    8b0c:	d8c02a17 	ldw	r3,168(sp)
    8b10:	1027883a 	mov	r19,r2
    8b14:	df001d83 	ldbu	fp,118(sp)
    8b18:	d8c02215 	stw	r3,136(sp)
    8b1c:	0013883a 	mov	r9,zero
    8b20:	da002b17 	ldw	r8,172(sp)
    8b24:	003c4d06 	br	7c5c <__ram_exceptions_end+0xfbfe7a08>
    8b28:	d9402117 	ldw	r5,132(sp)
    8b2c:	d9002017 	ldw	r4,128(sp)
    8b30:	d9801a04 	addi	r6,sp,104
    8b34:	da402c15 	stw	r9,176(sp)
    8b38:	00077480 	call	7748 <__sprint_r.part.0>
    8b3c:	da402c17 	ldw	r9,176(sp)
    8b40:	103e9a1e 	bne	r2,zero,85ac <__ram_exceptions_end+0xfbfe8358>
    8b44:	d9401b17 	ldw	r5,108(sp)
    8b48:	d8801c17 	ldw	r2,112(sp)
    8b4c:	d811883a 	mov	r8,sp
    8b50:	29000044 	addi	r4,r5,1
    8b54:	003e4206 	br	8460 <__ram_exceptions_end+0xfbfe820c>
    8b58:	d9401b17 	ldw	r5,108(sp)
    8b5c:	01000074 	movhi	r4,1
    8b60:	2100ae04 	addi	r4,r4,696
    8b64:	d9002415 	stw	r4,144(sp)
    8b68:	29400044 	addi	r5,r5,1
    8b6c:	003c6d06 	br	7d24 <__ram_exceptions_end+0xfbfe7ad0>
    8b70:	0039883a 	mov	fp,zero
    8b74:	00800084 	movi	r2,2
    8b78:	10803fcc 	andi	r2,r2,255
    8b7c:	01000044 	movi	r4,1
    8b80:	11001e26 	beq	r2,r4,8bfc <___vfiprintf_internal_r+0x13a0>
    8b84:	01000084 	movi	r4,2
    8b88:	11001e1e 	bne	r2,r4,8c04 <___vfiprintf_internal_r+0x13a8>
    8b8c:	1829883a 	mov	r20,r3
    8b90:	003eea06 	br	873c <__ram_exceptions_end+0xfbfe84e8>
    8b94:	a007883a 	mov	r3,r20
    8b98:	00800044 	movi	r2,1
    8b9c:	003ff606 	br	8b78 <__ram_exceptions_end+0xfbfe8924>
    8ba0:	00800184 	movi	r2,6
    8ba4:	1240012e 	bgeu	r2,r9,8bac <___vfiprintf_internal_r+0x1350>
    8ba8:	1013883a 	mov	r9,r2
    8bac:	4827883a 	mov	r19,r9
    8bb0:	4825883a 	mov	r18,r9
    8bb4:	48001516 	blt	r9,zero,8c0c <___vfiprintf_internal_r+0x13b0>
    8bb8:	05400074 	movhi	r21,1
    8bbc:	d8c02215 	stw	r3,136(sp)
    8bc0:	ad404e04 	addi	r21,r21,312
    8bc4:	003d1406 	br	8018 <__ram_exceptions_end+0xfbfe7dc4>
    8bc8:	02800074 	movhi	r10,1
    8bcc:	5280aa04 	addi	r10,r10,680
    8bd0:	da802415 	stw	r10,144(sp)
    8bd4:	200d883a 	mov	r6,r4
    8bd8:	003c9106 	br	7e20 <__ram_exceptions_end+0xfbfe7bcc>
    8bdc:	5021883a 	mov	r16,r10
    8be0:	0013883a 	mov	r9,zero
    8be4:	003b7d06 	br	79dc <__ram_exceptions_end+0xfbfe7788>
    8be8:	4827883a 	mov	r19,r9
    8bec:	df001d83 	ldbu	fp,118(sp)
    8bf0:	d8c02215 	stw	r3,136(sp)
    8bf4:	0013883a 	mov	r9,zero
    8bf8:	003c1806 	br	7c5c <__ram_exceptions_end+0xfbfe7a08>
    8bfc:	1829883a 	mov	r20,r3
    8c00:	003d1806 	br	8064 <__ram_exceptions_end+0xfbfe7e10>
    8c04:	1829883a 	mov	r20,r3
    8c08:	003ccd06 	br	7f40 <__ram_exceptions_end+0xfbfe7cec>
    8c0c:	0025883a 	mov	r18,zero
    8c10:	003fe906 	br	8bb8 <__ram_exceptions_end+0xfbfe8964>
    8c14:	d8802217 	ldw	r2,136(sp)
    8c18:	80c00043 	ldbu	r3,1(r16)
    8c1c:	5021883a 	mov	r16,r10
    8c20:	12400017 	ldw	r9,0(r2)
    8c24:	10800104 	addi	r2,r2,4
    8c28:	d8802215 	stw	r2,136(sp)
    8c2c:	483faf0e 	bge	r9,zero,8aec <__ram_exceptions_end+0xfbfe8898>
    8c30:	18c03fcc 	andi	r3,r3,255
    8c34:	18c0201c 	xori	r3,r3,128
    8c38:	027fffc4 	movi	r9,-1
    8c3c:	18ffe004 	addi	r3,r3,-128
    8c40:	003b6506 	br	79d8 <__ram_exceptions_end+0xfbfe7784>
    8c44:	d9c01d85 	stb	r7,118(sp)
    8c48:	003ca006 	br	7ecc <__ram_exceptions_end+0xfbfe7c78>
    8c4c:	d9c01d85 	stb	r7,118(sp)
    8c50:	003cad06 	br	7f08 <__ram_exceptions_end+0xfbfe7cb4>
    8c54:	d9c01d85 	stb	r7,118(sp)
    8c58:	003d7d06 	br	8250 <__ram_exceptions_end+0xfbfe7ffc>
    8c5c:	d9c01d85 	stb	r7,118(sp)
    8c60:	003d5f06 	br	81e0 <__ram_exceptions_end+0xfbfe7f8c>
    8c64:	a080004c 	andi	r2,r20,1
    8c68:	0039883a 	mov	fp,zero
    8c6c:	10000526 	beq	r2,zero,8c84 <___vfiprintf_internal_r+0x1428>
    8c70:	00800c04 	movi	r2,48
    8c74:	d88019c5 	stb	r2,103(sp)
    8c78:	dcc02717 	ldw	r19,156(sp)
    8c7c:	dd4019c4 	addi	r21,sp,103
    8c80:	003bf606 	br	7c5c <__ram_exceptions_end+0xfbfe7a08>
    8c84:	0027883a 	mov	r19,zero
    8c88:	dd401a04 	addi	r21,sp,104
    8c8c:	003bf306 	br	7c5c <__ram_exceptions_end+0xfbfe7a08>
    8c90:	d9c01d85 	stb	r7,118(sp)
    8c94:	003dc806 	br	83b8 <__ram_exceptions_end+0xfbfe8164>
    8c98:	d9c01d85 	stb	r7,118(sp)
    8c9c:	003d3a06 	br	8188 <__ram_exceptions_end+0xfbfe7f34>
    8ca0:	d9c01d85 	stb	r7,118(sp)
    8ca4:	003d2a06 	br	8150 <__ram_exceptions_end+0xfbfe7efc>
    8ca8:	d9c01d85 	stb	r7,118(sp)
    8cac:	003cde06 	br	8028 <__ram_exceptions_end+0xfbfe7dd4>
    8cb0:	d9c01d85 	stb	r7,118(sp)
    8cb4:	003cbc06 	br	7fa8 <__ram_exceptions_end+0xfbfe7d54>

00008cb8 <__vfiprintf_internal>:
    8cb8:	00800074 	movhi	r2,1
    8cbc:	1087ab04 	addi	r2,r2,7852
    8cc0:	300f883a 	mov	r7,r6
    8cc4:	280d883a 	mov	r6,r5
    8cc8:	200b883a 	mov	r5,r4
    8ccc:	11000017 	ldw	r4,0(r2)
    8cd0:	000785c1 	jmpi	785c <___vfiprintf_internal_r>

00008cd4 <__sbprintf>:
    8cd4:	2880030b 	ldhu	r2,12(r5)
    8cd8:	2ac01917 	ldw	r11,100(r5)
    8cdc:	2a80038b 	ldhu	r10,14(r5)
    8ce0:	2a400717 	ldw	r9,28(r5)
    8ce4:	2a000917 	ldw	r8,36(r5)
    8ce8:	defee204 	addi	sp,sp,-1144
    8cec:	00c10004 	movi	r3,1024
    8cf0:	dc011a15 	stw	r16,1128(sp)
    8cf4:	10bfff4c 	andi	r2,r2,65533
    8cf8:	2821883a 	mov	r16,r5
    8cfc:	d8cb883a 	add	r5,sp,r3
    8d00:	dc811c15 	stw	r18,1136(sp)
    8d04:	dc411b15 	stw	r17,1132(sp)
    8d08:	dfc11d15 	stw	ra,1140(sp)
    8d0c:	2025883a 	mov	r18,r4
    8d10:	d881030d 	sth	r2,1036(sp)
    8d14:	dac11915 	stw	r11,1124(sp)
    8d18:	da81038d 	sth	r10,1038(sp)
    8d1c:	da410715 	stw	r9,1052(sp)
    8d20:	da010915 	stw	r8,1060(sp)
    8d24:	dec10015 	stw	sp,1024(sp)
    8d28:	dec10415 	stw	sp,1040(sp)
    8d2c:	d8c10215 	stw	r3,1032(sp)
    8d30:	d8c10515 	stw	r3,1044(sp)
    8d34:	d8010615 	stw	zero,1048(sp)
    8d38:	000785c0 	call	785c <___vfiprintf_internal_r>
    8d3c:	1023883a 	mov	r17,r2
    8d40:	10000416 	blt	r2,zero,8d54 <__sbprintf+0x80>
    8d44:	d9410004 	addi	r5,sp,1024
    8d48:	9009883a 	mov	r4,r18
    8d4c:	0004bf40 	call	4bf4 <_fflush_r>
    8d50:	10000d1e 	bne	r2,zero,8d88 <__sbprintf+0xb4>
    8d54:	d881030b 	ldhu	r2,1036(sp)
    8d58:	1080100c 	andi	r2,r2,64
    8d5c:	10000326 	beq	r2,zero,8d6c <__sbprintf+0x98>
    8d60:	8080030b 	ldhu	r2,12(r16)
    8d64:	10801014 	ori	r2,r2,64
    8d68:	8080030d 	sth	r2,12(r16)
    8d6c:	8805883a 	mov	r2,r17
    8d70:	dfc11d17 	ldw	ra,1140(sp)
    8d74:	dc811c17 	ldw	r18,1136(sp)
    8d78:	dc411b17 	ldw	r17,1132(sp)
    8d7c:	dc011a17 	ldw	r16,1128(sp)
    8d80:	dec11e04 	addi	sp,sp,1144
    8d84:	f800283a 	ret
    8d88:	047fffc4 	movi	r17,-1
    8d8c:	003ff106 	br	8d54 <__ram_exceptions_end+0xfbfe8b00>

00008d90 <_write_r>:
    8d90:	defffd04 	addi	sp,sp,-12
    8d94:	2805883a 	mov	r2,r5
    8d98:	dc000015 	stw	r16,0(sp)
    8d9c:	04000074 	movhi	r16,1
    8da0:	dc400115 	stw	r17,4(sp)
    8da4:	300b883a 	mov	r5,r6
    8da8:	840e7e04 	addi	r16,r16,14840
    8dac:	2023883a 	mov	r17,r4
    8db0:	380d883a 	mov	r6,r7
    8db4:	1009883a 	mov	r4,r2
    8db8:	dfc00215 	stw	ra,8(sp)
    8dbc:	80000015 	stw	zero,0(r16)
    8dc0:	000e0ac0 	call	e0ac <write>
    8dc4:	00ffffc4 	movi	r3,-1
    8dc8:	10c00526 	beq	r2,r3,8de0 <_write_r+0x50>
    8dcc:	dfc00217 	ldw	ra,8(sp)
    8dd0:	dc400117 	ldw	r17,4(sp)
    8dd4:	dc000017 	ldw	r16,0(sp)
    8dd8:	dec00304 	addi	sp,sp,12
    8ddc:	f800283a 	ret
    8de0:	80c00017 	ldw	r3,0(r16)
    8de4:	183ff926 	beq	r3,zero,8dcc <__ram_exceptions_end+0xfbfe8b78>
    8de8:	88c00015 	stw	r3,0(r17)
    8dec:	003ff706 	br	8dcc <__ram_exceptions_end+0xfbfe8b78>

00008df0 <_close_r>:
    8df0:	defffd04 	addi	sp,sp,-12
    8df4:	dc000015 	stw	r16,0(sp)
    8df8:	04000074 	movhi	r16,1
    8dfc:	dc400115 	stw	r17,4(sp)
    8e00:	840e7e04 	addi	r16,r16,14840
    8e04:	2023883a 	mov	r17,r4
    8e08:	2809883a 	mov	r4,r5
    8e0c:	dfc00215 	stw	ra,8(sp)
    8e10:	80000015 	stw	zero,0(r16)
    8e14:	000d3940 	call	d394 <close>
    8e18:	00ffffc4 	movi	r3,-1
    8e1c:	10c00526 	beq	r2,r3,8e34 <_close_r+0x44>
    8e20:	dfc00217 	ldw	ra,8(sp)
    8e24:	dc400117 	ldw	r17,4(sp)
    8e28:	dc000017 	ldw	r16,0(sp)
    8e2c:	dec00304 	addi	sp,sp,12
    8e30:	f800283a 	ret
    8e34:	80c00017 	ldw	r3,0(r16)
    8e38:	183ff926 	beq	r3,zero,8e20 <__ram_exceptions_end+0xfbfe8bcc>
    8e3c:	88c00015 	stw	r3,0(r17)
    8e40:	003ff706 	br	8e20 <__ram_exceptions_end+0xfbfe8bcc>

00008e44 <_calloc_r>:
    8e44:	298b383a 	mul	r5,r5,r6
    8e48:	defffe04 	addi	sp,sp,-8
    8e4c:	dfc00115 	stw	ra,4(sp)
    8e50:	dc000015 	stw	r16,0(sp)
    8e54:	00058740 	call	5874 <_malloc_r>
    8e58:	10002926 	beq	r2,zero,8f00 <_calloc_r+0xbc>
    8e5c:	11bfff17 	ldw	r6,-4(r2)
    8e60:	1021883a 	mov	r16,r2
    8e64:	00bfff04 	movi	r2,-4
    8e68:	308c703a 	and	r6,r6,r2
    8e6c:	00c00904 	movi	r3,36
    8e70:	308d883a 	add	r6,r6,r2
    8e74:	19801636 	bltu	r3,r6,8ed0 <_calloc_r+0x8c>
    8e78:	008004c4 	movi	r2,19
    8e7c:	11800b2e 	bgeu	r2,r6,8eac <_calloc_r+0x68>
    8e80:	80000015 	stw	zero,0(r16)
    8e84:	80000115 	stw	zero,4(r16)
    8e88:	008006c4 	movi	r2,27
    8e8c:	11801a2e 	bgeu	r2,r6,8ef8 <_calloc_r+0xb4>
    8e90:	80000215 	stw	zero,8(r16)
    8e94:	80000315 	stw	zero,12(r16)
    8e98:	30c0151e 	bne	r6,r3,8ef0 <_calloc_r+0xac>
    8e9c:	80000415 	stw	zero,16(r16)
    8ea0:	80800604 	addi	r2,r16,24
    8ea4:	80000515 	stw	zero,20(r16)
    8ea8:	00000106 	br	8eb0 <_calloc_r+0x6c>
    8eac:	8005883a 	mov	r2,r16
    8eb0:	10000015 	stw	zero,0(r2)
    8eb4:	10000115 	stw	zero,4(r2)
    8eb8:	10000215 	stw	zero,8(r2)
    8ebc:	8005883a 	mov	r2,r16
    8ec0:	dfc00117 	ldw	ra,4(sp)
    8ec4:	dc000017 	ldw	r16,0(sp)
    8ec8:	dec00204 	addi	sp,sp,8
    8ecc:	f800283a 	ret
    8ed0:	000b883a 	mov	r5,zero
    8ed4:	8009883a 	mov	r4,r16
    8ed8:	00062ac0 	call	62ac <memset>
    8edc:	8005883a 	mov	r2,r16
    8ee0:	dfc00117 	ldw	ra,4(sp)
    8ee4:	dc000017 	ldw	r16,0(sp)
    8ee8:	dec00204 	addi	sp,sp,8
    8eec:	f800283a 	ret
    8ef0:	80800404 	addi	r2,r16,16
    8ef4:	003fee06 	br	8eb0 <__ram_exceptions_end+0xfbfe8c5c>
    8ef8:	80800204 	addi	r2,r16,8
    8efc:	003fec06 	br	8eb0 <__ram_exceptions_end+0xfbfe8c5c>
    8f00:	0005883a 	mov	r2,zero
    8f04:	003fee06 	br	8ec0 <__ram_exceptions_end+0xfbfe8c6c>

00008f08 <_fclose_r>:
    8f08:	28003926 	beq	r5,zero,8ff0 <_fclose_r+0xe8>
    8f0c:	defffc04 	addi	sp,sp,-16
    8f10:	dc400115 	stw	r17,4(sp)
    8f14:	dc000015 	stw	r16,0(sp)
    8f18:	dfc00315 	stw	ra,12(sp)
    8f1c:	dc800215 	stw	r18,8(sp)
    8f20:	2023883a 	mov	r17,r4
    8f24:	2821883a 	mov	r16,r5
    8f28:	20000226 	beq	r4,zero,8f34 <_fclose_r+0x2c>
    8f2c:	20800e17 	ldw	r2,56(r4)
    8f30:	10002726 	beq	r2,zero,8fd0 <_fclose_r+0xc8>
    8f34:	8080030f 	ldh	r2,12(r16)
    8f38:	1000071e 	bne	r2,zero,8f58 <_fclose_r+0x50>
    8f3c:	0005883a 	mov	r2,zero
    8f40:	dfc00317 	ldw	ra,12(sp)
    8f44:	dc800217 	ldw	r18,8(sp)
    8f48:	dc400117 	ldw	r17,4(sp)
    8f4c:	dc000017 	ldw	r16,0(sp)
    8f50:	dec00404 	addi	sp,sp,16
    8f54:	f800283a 	ret
    8f58:	800b883a 	mov	r5,r16
    8f5c:	8809883a 	mov	r4,r17
    8f60:	00049d80 	call	49d8 <__sflush_r>
    8f64:	1025883a 	mov	r18,r2
    8f68:	80800b17 	ldw	r2,44(r16)
    8f6c:	10000426 	beq	r2,zero,8f80 <_fclose_r+0x78>
    8f70:	81400717 	ldw	r5,28(r16)
    8f74:	8809883a 	mov	r4,r17
    8f78:	103ee83a 	callr	r2
    8f7c:	10001616 	blt	r2,zero,8fd8 <_fclose_r+0xd0>
    8f80:	8080030b 	ldhu	r2,12(r16)
    8f84:	1080200c 	andi	r2,r2,128
    8f88:	1000151e 	bne	r2,zero,8fe0 <_fclose_r+0xd8>
    8f8c:	81400c17 	ldw	r5,48(r16)
    8f90:	28000526 	beq	r5,zero,8fa8 <_fclose_r+0xa0>
    8f94:	80801004 	addi	r2,r16,64
    8f98:	28800226 	beq	r5,r2,8fa4 <_fclose_r+0x9c>
    8f9c:	8809883a 	mov	r4,r17
    8fa0:	00051440 	call	5144 <_free_r>
    8fa4:	80000c15 	stw	zero,48(r16)
    8fa8:	81401117 	ldw	r5,68(r16)
    8fac:	28000326 	beq	r5,zero,8fbc <_fclose_r+0xb4>
    8fb0:	8809883a 	mov	r4,r17
    8fb4:	00051440 	call	5144 <_free_r>
    8fb8:	80001115 	stw	zero,68(r16)
    8fbc:	0004fe00 	call	4fe0 <__sfp_lock_acquire>
    8fc0:	8000030d 	sth	zero,12(r16)
    8fc4:	0004fe40 	call	4fe4 <__sfp_lock_release>
    8fc8:	9005883a 	mov	r2,r18
    8fcc:	003fdc06 	br	8f40 <__ram_exceptions_end+0xfbfe8cec>
    8fd0:	0004fd00 	call	4fd0 <__sinit>
    8fd4:	003fd706 	br	8f34 <__ram_exceptions_end+0xfbfe8ce0>
    8fd8:	04bfffc4 	movi	r18,-1
    8fdc:	003fe806 	br	8f80 <__ram_exceptions_end+0xfbfe8d2c>
    8fe0:	81400417 	ldw	r5,16(r16)
    8fe4:	8809883a 	mov	r4,r17
    8fe8:	00051440 	call	5144 <_free_r>
    8fec:	003fe706 	br	8f8c <__ram_exceptions_end+0xfbfe8d38>
    8ff0:	0005883a 	mov	r2,zero
    8ff4:	f800283a 	ret

00008ff8 <fclose>:
    8ff8:	00800074 	movhi	r2,1
    8ffc:	1087ab04 	addi	r2,r2,7852
    9000:	200b883a 	mov	r5,r4
    9004:	11000017 	ldw	r4,0(r2)
    9008:	0008f081 	jmpi	8f08 <_fclose_r>

0000900c <__fputwc>:
    900c:	defff804 	addi	sp,sp,-32
    9010:	dcc00415 	stw	r19,16(sp)
    9014:	dc800315 	stw	r18,12(sp)
    9018:	dc000115 	stw	r16,4(sp)
    901c:	dfc00715 	stw	ra,28(sp)
    9020:	dd400615 	stw	r21,24(sp)
    9024:	dd000515 	stw	r20,20(sp)
    9028:	dc400215 	stw	r17,8(sp)
    902c:	2027883a 	mov	r19,r4
    9030:	2825883a 	mov	r18,r5
    9034:	3021883a 	mov	r16,r6
    9038:	00056640 	call	5664 <__locale_mb_cur_max>
    903c:	00c00044 	movi	r3,1
    9040:	10c03e26 	beq	r2,r3,913c <__fputwc+0x130>
    9044:	81c01704 	addi	r7,r16,92
    9048:	900d883a 	mov	r6,r18
    904c:	d80b883a 	mov	r5,sp
    9050:	9809883a 	mov	r4,r19
    9054:	000a0580 	call	a058 <_wcrtomb_r>
    9058:	1029883a 	mov	r20,r2
    905c:	00bfffc4 	movi	r2,-1
    9060:	a0802026 	beq	r20,r2,90e4 <__fputwc+0xd8>
    9064:	d9400003 	ldbu	r5,0(sp)
    9068:	a0001c26 	beq	r20,zero,90dc <__fputwc+0xd0>
    906c:	0023883a 	mov	r17,zero
    9070:	05400284 	movi	r21,10
    9074:	00000906 	br	909c <__fputwc+0x90>
    9078:	80800017 	ldw	r2,0(r16)
    907c:	11400005 	stb	r5,0(r2)
    9080:	80c00017 	ldw	r3,0(r16)
    9084:	18c00044 	addi	r3,r3,1
    9088:	80c00015 	stw	r3,0(r16)
    908c:	8c400044 	addi	r17,r17,1
    9090:	dc45883a 	add	r2,sp,r17
    9094:	8d00112e 	bgeu	r17,r20,90dc <__fputwc+0xd0>
    9098:	11400003 	ldbu	r5,0(r2)
    909c:	80c00217 	ldw	r3,8(r16)
    90a0:	18ffffc4 	addi	r3,r3,-1
    90a4:	80c00215 	stw	r3,8(r16)
    90a8:	183ff30e 	bge	r3,zero,9078 <__ram_exceptions_end+0xfbfe8e24>
    90ac:	80800617 	ldw	r2,24(r16)
    90b0:	18801916 	blt	r3,r2,9118 <__fputwc+0x10c>
    90b4:	80800017 	ldw	r2,0(r16)
    90b8:	11400005 	stb	r5,0(r2)
    90bc:	80800017 	ldw	r2,0(r16)
    90c0:	10c00003 	ldbu	r3,0(r2)
    90c4:	10800044 	addi	r2,r2,1
    90c8:	1d402326 	beq	r3,r21,9158 <__fputwc+0x14c>
    90cc:	80800015 	stw	r2,0(r16)
    90d0:	8c400044 	addi	r17,r17,1
    90d4:	dc45883a 	add	r2,sp,r17
    90d8:	8d3fef36 	bltu	r17,r20,9098 <__ram_exceptions_end+0xfbfe8e44>
    90dc:	9005883a 	mov	r2,r18
    90e0:	00000406 	br	90f4 <__fputwc+0xe8>
    90e4:	80c0030b 	ldhu	r3,12(r16)
    90e8:	a005883a 	mov	r2,r20
    90ec:	18c01014 	ori	r3,r3,64
    90f0:	80c0030d 	sth	r3,12(r16)
    90f4:	dfc00717 	ldw	ra,28(sp)
    90f8:	dd400617 	ldw	r21,24(sp)
    90fc:	dd000517 	ldw	r20,20(sp)
    9100:	dcc00417 	ldw	r19,16(sp)
    9104:	dc800317 	ldw	r18,12(sp)
    9108:	dc400217 	ldw	r17,8(sp)
    910c:	dc000117 	ldw	r16,4(sp)
    9110:	dec00804 	addi	sp,sp,32
    9114:	f800283a 	ret
    9118:	800d883a 	mov	r6,r16
    911c:	29403fcc 	andi	r5,r5,255
    9120:	9809883a 	mov	r4,r19
    9124:	0009f000 	call	9f00 <__swbuf_r>
    9128:	10bfffe0 	cmpeqi	r2,r2,-1
    912c:	10803fcc 	andi	r2,r2,255
    9130:	103fd626 	beq	r2,zero,908c <__ram_exceptions_end+0xfbfe8e38>
    9134:	00bfffc4 	movi	r2,-1
    9138:	003fee06 	br	90f4 <__ram_exceptions_end+0xfbfe8ea0>
    913c:	90ffffc4 	addi	r3,r18,-1
    9140:	01003f84 	movi	r4,254
    9144:	20ffbf36 	bltu	r4,r3,9044 <__ram_exceptions_end+0xfbfe8df0>
    9148:	900b883a 	mov	r5,r18
    914c:	dc800005 	stb	r18,0(sp)
    9150:	1029883a 	mov	r20,r2
    9154:	003fc506 	br	906c <__ram_exceptions_end+0xfbfe8e18>
    9158:	800d883a 	mov	r6,r16
    915c:	a80b883a 	mov	r5,r21
    9160:	9809883a 	mov	r4,r19
    9164:	0009f000 	call	9f00 <__swbuf_r>
    9168:	10bfffe0 	cmpeqi	r2,r2,-1
    916c:	003fef06 	br	912c <__ram_exceptions_end+0xfbfe8ed8>

00009170 <_fputwc_r>:
    9170:	3080030b 	ldhu	r2,12(r6)
    9174:	10c8000c 	andi	r3,r2,8192
    9178:	1800051e 	bne	r3,zero,9190 <_fputwc_r+0x20>
    917c:	30c01917 	ldw	r3,100(r6)
    9180:	10880014 	ori	r2,r2,8192
    9184:	3080030d 	sth	r2,12(r6)
    9188:	18880014 	ori	r2,r3,8192
    918c:	30801915 	stw	r2,100(r6)
    9190:	000900c1 	jmpi	900c <__fputwc>

00009194 <fputwc>:
    9194:	00800074 	movhi	r2,1
    9198:	defffc04 	addi	sp,sp,-16
    919c:	1087ab04 	addi	r2,r2,7852
    91a0:	dc000115 	stw	r16,4(sp)
    91a4:	14000017 	ldw	r16,0(r2)
    91a8:	dc400215 	stw	r17,8(sp)
    91ac:	dfc00315 	stw	ra,12(sp)
    91b0:	2023883a 	mov	r17,r4
    91b4:	80000226 	beq	r16,zero,91c0 <fputwc+0x2c>
    91b8:	80800e17 	ldw	r2,56(r16)
    91bc:	10001026 	beq	r2,zero,9200 <fputwc+0x6c>
    91c0:	2880030b 	ldhu	r2,12(r5)
    91c4:	10c8000c 	andi	r3,r2,8192
    91c8:	1800051e 	bne	r3,zero,91e0 <fputwc+0x4c>
    91cc:	28c01917 	ldw	r3,100(r5)
    91d0:	10880014 	ori	r2,r2,8192
    91d4:	2880030d 	sth	r2,12(r5)
    91d8:	18880014 	ori	r2,r3,8192
    91dc:	28801915 	stw	r2,100(r5)
    91e0:	280d883a 	mov	r6,r5
    91e4:	8009883a 	mov	r4,r16
    91e8:	880b883a 	mov	r5,r17
    91ec:	dfc00317 	ldw	ra,12(sp)
    91f0:	dc400217 	ldw	r17,8(sp)
    91f4:	dc000117 	ldw	r16,4(sp)
    91f8:	dec00404 	addi	sp,sp,16
    91fc:	000900c1 	jmpi	900c <__fputwc>
    9200:	8009883a 	mov	r4,r16
    9204:	d9400015 	stw	r5,0(sp)
    9208:	0004fd00 	call	4fd0 <__sinit>
    920c:	d9400017 	ldw	r5,0(sp)
    9210:	003feb06 	br	91c0 <__ram_exceptions_end+0xfbfe8f6c>

00009214 <_fstat_r>:
    9214:	defffd04 	addi	sp,sp,-12
    9218:	2805883a 	mov	r2,r5
    921c:	dc000015 	stw	r16,0(sp)
    9220:	04000074 	movhi	r16,1
    9224:	dc400115 	stw	r17,4(sp)
    9228:	840e7e04 	addi	r16,r16,14840
    922c:	2023883a 	mov	r17,r4
    9230:	300b883a 	mov	r5,r6
    9234:	1009883a 	mov	r4,r2
    9238:	dfc00215 	stw	ra,8(sp)
    923c:	80000015 	stw	zero,0(r16)
    9240:	000d4cc0 	call	d4cc <fstat>
    9244:	00ffffc4 	movi	r3,-1
    9248:	10c00526 	beq	r2,r3,9260 <_fstat_r+0x4c>
    924c:	dfc00217 	ldw	ra,8(sp)
    9250:	dc400117 	ldw	r17,4(sp)
    9254:	dc000017 	ldw	r16,0(sp)
    9258:	dec00304 	addi	sp,sp,12
    925c:	f800283a 	ret
    9260:	80c00017 	ldw	r3,0(r16)
    9264:	183ff926 	beq	r3,zero,924c <__ram_exceptions_end+0xfbfe8ff8>
    9268:	88c00015 	stw	r3,0(r17)
    926c:	003ff706 	br	924c <__ram_exceptions_end+0xfbfe8ff8>

00009270 <__sfvwrite_r>:
    9270:	30800217 	ldw	r2,8(r6)
    9274:	10006726 	beq	r2,zero,9414 <__sfvwrite_r+0x1a4>
    9278:	28c0030b 	ldhu	r3,12(r5)
    927c:	defff404 	addi	sp,sp,-48
    9280:	dd400715 	stw	r21,28(sp)
    9284:	dd000615 	stw	r20,24(sp)
    9288:	dc000215 	stw	r16,8(sp)
    928c:	dfc00b15 	stw	ra,44(sp)
    9290:	df000a15 	stw	fp,40(sp)
    9294:	ddc00915 	stw	r23,36(sp)
    9298:	dd800815 	stw	r22,32(sp)
    929c:	dcc00515 	stw	r19,20(sp)
    92a0:	dc800415 	stw	r18,16(sp)
    92a4:	dc400315 	stw	r17,12(sp)
    92a8:	1880020c 	andi	r2,r3,8
    92ac:	2821883a 	mov	r16,r5
    92b0:	202b883a 	mov	r21,r4
    92b4:	3029883a 	mov	r20,r6
    92b8:	10002726 	beq	r2,zero,9358 <__sfvwrite_r+0xe8>
    92bc:	28800417 	ldw	r2,16(r5)
    92c0:	10002526 	beq	r2,zero,9358 <__sfvwrite_r+0xe8>
    92c4:	1880008c 	andi	r2,r3,2
    92c8:	a4400017 	ldw	r17,0(r20)
    92cc:	10002a26 	beq	r2,zero,9378 <__sfvwrite_r+0x108>
    92d0:	05a00034 	movhi	r22,32768
    92d4:	0027883a 	mov	r19,zero
    92d8:	0025883a 	mov	r18,zero
    92dc:	b5bf0004 	addi	r22,r22,-1024
    92e0:	980d883a 	mov	r6,r19
    92e4:	a809883a 	mov	r4,r21
    92e8:	90004626 	beq	r18,zero,9404 <__sfvwrite_r+0x194>
    92ec:	900f883a 	mov	r7,r18
    92f0:	b480022e 	bgeu	r22,r18,92fc <__sfvwrite_r+0x8c>
    92f4:	01e00034 	movhi	r7,32768
    92f8:	39ff0004 	addi	r7,r7,-1024
    92fc:	80800917 	ldw	r2,36(r16)
    9300:	81400717 	ldw	r5,28(r16)
    9304:	103ee83a 	callr	r2
    9308:	0080570e 	bge	zero,r2,9468 <__sfvwrite_r+0x1f8>
    930c:	a0c00217 	ldw	r3,8(r20)
    9310:	98a7883a 	add	r19,r19,r2
    9314:	90a5c83a 	sub	r18,r18,r2
    9318:	1885c83a 	sub	r2,r3,r2
    931c:	a0800215 	stw	r2,8(r20)
    9320:	103fef1e 	bne	r2,zero,92e0 <__ram_exceptions_end+0xfbfe908c>
    9324:	0005883a 	mov	r2,zero
    9328:	dfc00b17 	ldw	ra,44(sp)
    932c:	df000a17 	ldw	fp,40(sp)
    9330:	ddc00917 	ldw	r23,36(sp)
    9334:	dd800817 	ldw	r22,32(sp)
    9338:	dd400717 	ldw	r21,28(sp)
    933c:	dd000617 	ldw	r20,24(sp)
    9340:	dcc00517 	ldw	r19,20(sp)
    9344:	dc800417 	ldw	r18,16(sp)
    9348:	dc400317 	ldw	r17,12(sp)
    934c:	dc000217 	ldw	r16,8(sp)
    9350:	dec00c04 	addi	sp,sp,48
    9354:	f800283a 	ret
    9358:	800b883a 	mov	r5,r16
    935c:	a809883a 	mov	r4,r21
    9360:	0002ffc0 	call	2ffc <__swsetup_r>
    9364:	1000eb1e 	bne	r2,zero,9714 <__sfvwrite_r+0x4a4>
    9368:	80c0030b 	ldhu	r3,12(r16)
    936c:	a4400017 	ldw	r17,0(r20)
    9370:	1880008c 	andi	r2,r3,2
    9374:	103fd61e 	bne	r2,zero,92d0 <__ram_exceptions_end+0xfbfe907c>
    9378:	1880004c 	andi	r2,r3,1
    937c:	10003f1e 	bne	r2,zero,947c <__sfvwrite_r+0x20c>
    9380:	0039883a 	mov	fp,zero
    9384:	0025883a 	mov	r18,zero
    9388:	90001a26 	beq	r18,zero,93f4 <__sfvwrite_r+0x184>
    938c:	1880800c 	andi	r2,r3,512
    9390:	84c00217 	ldw	r19,8(r16)
    9394:	10002126 	beq	r2,zero,941c <__sfvwrite_r+0x1ac>
    9398:	982f883a 	mov	r23,r19
    939c:	94c09336 	bltu	r18,r19,95ec <__sfvwrite_r+0x37c>
    93a0:	1881200c 	andi	r2,r3,1152
    93a4:	10009e1e 	bne	r2,zero,9620 <__sfvwrite_r+0x3b0>
    93a8:	81000017 	ldw	r4,0(r16)
    93ac:	b80d883a 	mov	r6,r23
    93b0:	e00b883a 	mov	r5,fp
    93b4:	00097e00 	call	97e0 <memmove>
    93b8:	80c00217 	ldw	r3,8(r16)
    93bc:	81000017 	ldw	r4,0(r16)
    93c0:	9005883a 	mov	r2,r18
    93c4:	1ce7c83a 	sub	r19,r3,r19
    93c8:	25cf883a 	add	r7,r4,r23
    93cc:	84c00215 	stw	r19,8(r16)
    93d0:	81c00015 	stw	r7,0(r16)
    93d4:	a0c00217 	ldw	r3,8(r20)
    93d8:	e0b9883a 	add	fp,fp,r2
    93dc:	90a5c83a 	sub	r18,r18,r2
    93e0:	18a7c83a 	sub	r19,r3,r2
    93e4:	a4c00215 	stw	r19,8(r20)
    93e8:	983fce26 	beq	r19,zero,9324 <__ram_exceptions_end+0xfbfe90d0>
    93ec:	80c0030b 	ldhu	r3,12(r16)
    93f0:	903fe61e 	bne	r18,zero,938c <__ram_exceptions_end+0xfbfe9138>
    93f4:	8f000017 	ldw	fp,0(r17)
    93f8:	8c800117 	ldw	r18,4(r17)
    93fc:	8c400204 	addi	r17,r17,8
    9400:	003fe106 	br	9388 <__ram_exceptions_end+0xfbfe9134>
    9404:	8cc00017 	ldw	r19,0(r17)
    9408:	8c800117 	ldw	r18,4(r17)
    940c:	8c400204 	addi	r17,r17,8
    9410:	003fb306 	br	92e0 <__ram_exceptions_end+0xfbfe908c>
    9414:	0005883a 	mov	r2,zero
    9418:	f800283a 	ret
    941c:	81000017 	ldw	r4,0(r16)
    9420:	80800417 	ldw	r2,16(r16)
    9424:	11005736 	bltu	r2,r4,9584 <__sfvwrite_r+0x314>
    9428:	85c00517 	ldw	r23,20(r16)
    942c:	95c05536 	bltu	r18,r23,9584 <__sfvwrite_r+0x314>
    9430:	00a00034 	movhi	r2,32768
    9434:	10bfffc4 	addi	r2,r2,-1
    9438:	9009883a 	mov	r4,r18
    943c:	1480012e 	bgeu	r2,r18,9444 <__sfvwrite_r+0x1d4>
    9440:	1009883a 	mov	r4,r2
    9444:	b80b883a 	mov	r5,r23
    9448:	0000b0c0 	call	b0c <__divsi3>
    944c:	15cf383a 	mul	r7,r2,r23
    9450:	81400717 	ldw	r5,28(r16)
    9454:	80800917 	ldw	r2,36(r16)
    9458:	e00d883a 	mov	r6,fp
    945c:	a809883a 	mov	r4,r21
    9460:	103ee83a 	callr	r2
    9464:	00bfdb16 	blt	zero,r2,93d4 <__ram_exceptions_end+0xfbfe9180>
    9468:	8080030b 	ldhu	r2,12(r16)
    946c:	10801014 	ori	r2,r2,64
    9470:	8080030d 	sth	r2,12(r16)
    9474:	00bfffc4 	movi	r2,-1
    9478:	003fab06 	br	9328 <__ram_exceptions_end+0xfbfe90d4>
    947c:	0027883a 	mov	r19,zero
    9480:	0011883a 	mov	r8,zero
    9484:	0039883a 	mov	fp,zero
    9488:	0025883a 	mov	r18,zero
    948c:	90001f26 	beq	r18,zero,950c <__sfvwrite_r+0x29c>
    9490:	40005a26 	beq	r8,zero,95fc <__sfvwrite_r+0x38c>
    9494:	982d883a 	mov	r22,r19
    9498:	94c0012e 	bgeu	r18,r19,94a0 <__sfvwrite_r+0x230>
    949c:	902d883a 	mov	r22,r18
    94a0:	81000017 	ldw	r4,0(r16)
    94a4:	80800417 	ldw	r2,16(r16)
    94a8:	b02f883a 	mov	r23,r22
    94ac:	81c00517 	ldw	r7,20(r16)
    94b0:	1100032e 	bgeu	r2,r4,94c0 <__sfvwrite_r+0x250>
    94b4:	80c00217 	ldw	r3,8(r16)
    94b8:	38c7883a 	add	r3,r7,r3
    94bc:	1d801816 	blt	r3,r22,9520 <__sfvwrite_r+0x2b0>
    94c0:	b1c03e16 	blt	r22,r7,95bc <__sfvwrite_r+0x34c>
    94c4:	80800917 	ldw	r2,36(r16)
    94c8:	81400717 	ldw	r5,28(r16)
    94cc:	e00d883a 	mov	r6,fp
    94d0:	da000115 	stw	r8,4(sp)
    94d4:	a809883a 	mov	r4,r21
    94d8:	103ee83a 	callr	r2
    94dc:	102f883a 	mov	r23,r2
    94e0:	da000117 	ldw	r8,4(sp)
    94e4:	00bfe00e 	bge	zero,r2,9468 <__ram_exceptions_end+0xfbfe9214>
    94e8:	9de7c83a 	sub	r19,r19,r23
    94ec:	98001f26 	beq	r19,zero,956c <__sfvwrite_r+0x2fc>
    94f0:	a0800217 	ldw	r2,8(r20)
    94f4:	e5f9883a 	add	fp,fp,r23
    94f8:	95e5c83a 	sub	r18,r18,r23
    94fc:	15efc83a 	sub	r23,r2,r23
    9500:	a5c00215 	stw	r23,8(r20)
    9504:	b83f8726 	beq	r23,zero,9324 <__ram_exceptions_end+0xfbfe90d0>
    9508:	903fe11e 	bne	r18,zero,9490 <__ram_exceptions_end+0xfbfe923c>
    950c:	8f000017 	ldw	fp,0(r17)
    9510:	8c800117 	ldw	r18,4(r17)
    9514:	0011883a 	mov	r8,zero
    9518:	8c400204 	addi	r17,r17,8
    951c:	003fdb06 	br	948c <__ram_exceptions_end+0xfbfe9238>
    9520:	180d883a 	mov	r6,r3
    9524:	e00b883a 	mov	r5,fp
    9528:	da000115 	stw	r8,4(sp)
    952c:	d8c00015 	stw	r3,0(sp)
    9530:	00097e00 	call	97e0 <memmove>
    9534:	d8c00017 	ldw	r3,0(sp)
    9538:	80800017 	ldw	r2,0(r16)
    953c:	800b883a 	mov	r5,r16
    9540:	a809883a 	mov	r4,r21
    9544:	10c5883a 	add	r2,r2,r3
    9548:	80800015 	stw	r2,0(r16)
    954c:	d8c00015 	stw	r3,0(sp)
    9550:	0004bf40 	call	4bf4 <_fflush_r>
    9554:	d8c00017 	ldw	r3,0(sp)
    9558:	da000117 	ldw	r8,4(sp)
    955c:	103fc21e 	bne	r2,zero,9468 <__ram_exceptions_end+0xfbfe9214>
    9560:	182f883a 	mov	r23,r3
    9564:	9de7c83a 	sub	r19,r19,r23
    9568:	983fe11e 	bne	r19,zero,94f0 <__ram_exceptions_end+0xfbfe929c>
    956c:	800b883a 	mov	r5,r16
    9570:	a809883a 	mov	r4,r21
    9574:	0004bf40 	call	4bf4 <_fflush_r>
    9578:	103fbb1e 	bne	r2,zero,9468 <__ram_exceptions_end+0xfbfe9214>
    957c:	0011883a 	mov	r8,zero
    9580:	003fdb06 	br	94f0 <__ram_exceptions_end+0xfbfe929c>
    9584:	94c0012e 	bgeu	r18,r19,958c <__sfvwrite_r+0x31c>
    9588:	9027883a 	mov	r19,r18
    958c:	980d883a 	mov	r6,r19
    9590:	e00b883a 	mov	r5,fp
    9594:	00097e00 	call	97e0 <memmove>
    9598:	80800217 	ldw	r2,8(r16)
    959c:	80c00017 	ldw	r3,0(r16)
    95a0:	14c5c83a 	sub	r2,r2,r19
    95a4:	1cc7883a 	add	r3,r3,r19
    95a8:	80800215 	stw	r2,8(r16)
    95ac:	80c00015 	stw	r3,0(r16)
    95b0:	10004326 	beq	r2,zero,96c0 <__sfvwrite_r+0x450>
    95b4:	9805883a 	mov	r2,r19
    95b8:	003f8606 	br	93d4 <__ram_exceptions_end+0xfbfe9180>
    95bc:	b00d883a 	mov	r6,r22
    95c0:	e00b883a 	mov	r5,fp
    95c4:	da000115 	stw	r8,4(sp)
    95c8:	00097e00 	call	97e0 <memmove>
    95cc:	80800217 	ldw	r2,8(r16)
    95d0:	80c00017 	ldw	r3,0(r16)
    95d4:	da000117 	ldw	r8,4(sp)
    95d8:	1585c83a 	sub	r2,r2,r22
    95dc:	1dad883a 	add	r22,r3,r22
    95e0:	80800215 	stw	r2,8(r16)
    95e4:	85800015 	stw	r22,0(r16)
    95e8:	003fbf06 	br	94e8 <__ram_exceptions_end+0xfbfe9294>
    95ec:	81000017 	ldw	r4,0(r16)
    95f0:	9027883a 	mov	r19,r18
    95f4:	902f883a 	mov	r23,r18
    95f8:	003f6c06 	br	93ac <__ram_exceptions_end+0xfbfe9158>
    95fc:	900d883a 	mov	r6,r18
    9600:	01400284 	movi	r5,10
    9604:	e009883a 	mov	r4,fp
    9608:	00060800 	call	6080 <memchr>
    960c:	10003e26 	beq	r2,zero,9708 <__sfvwrite_r+0x498>
    9610:	10800044 	addi	r2,r2,1
    9614:	1727c83a 	sub	r19,r2,fp
    9618:	02000044 	movi	r8,1
    961c:	003f9d06 	br	9494 <__ram_exceptions_end+0xfbfe9240>
    9620:	80800517 	ldw	r2,20(r16)
    9624:	81400417 	ldw	r5,16(r16)
    9628:	81c00017 	ldw	r7,0(r16)
    962c:	10a7883a 	add	r19,r2,r2
    9630:	9885883a 	add	r2,r19,r2
    9634:	1026d7fa 	srli	r19,r2,31
    9638:	396dc83a 	sub	r22,r7,r5
    963c:	b1000044 	addi	r4,r22,1
    9640:	9885883a 	add	r2,r19,r2
    9644:	1027d07a 	srai	r19,r2,1
    9648:	2485883a 	add	r2,r4,r18
    964c:	980d883a 	mov	r6,r19
    9650:	9880022e 	bgeu	r19,r2,965c <__sfvwrite_r+0x3ec>
    9654:	1027883a 	mov	r19,r2
    9658:	100d883a 	mov	r6,r2
    965c:	18c1000c 	andi	r3,r3,1024
    9660:	18001c26 	beq	r3,zero,96d4 <__sfvwrite_r+0x464>
    9664:	300b883a 	mov	r5,r6
    9668:	a809883a 	mov	r4,r21
    966c:	00058740 	call	5874 <_malloc_r>
    9670:	102f883a 	mov	r23,r2
    9674:	10002926 	beq	r2,zero,971c <__sfvwrite_r+0x4ac>
    9678:	81400417 	ldw	r5,16(r16)
    967c:	b00d883a 	mov	r6,r22
    9680:	1009883a 	mov	r4,r2
    9684:	00061640 	call	6164 <memcpy>
    9688:	8080030b 	ldhu	r2,12(r16)
    968c:	00fedfc4 	movi	r3,-1153
    9690:	10c4703a 	and	r2,r2,r3
    9694:	10802014 	ori	r2,r2,128
    9698:	8080030d 	sth	r2,12(r16)
    969c:	bd89883a 	add	r4,r23,r22
    96a0:	9d8fc83a 	sub	r7,r19,r22
    96a4:	85c00415 	stw	r23,16(r16)
    96a8:	84c00515 	stw	r19,20(r16)
    96ac:	81000015 	stw	r4,0(r16)
    96b0:	9027883a 	mov	r19,r18
    96b4:	81c00215 	stw	r7,8(r16)
    96b8:	902f883a 	mov	r23,r18
    96bc:	003f3b06 	br	93ac <__ram_exceptions_end+0xfbfe9158>
    96c0:	800b883a 	mov	r5,r16
    96c4:	a809883a 	mov	r4,r21
    96c8:	0004bf40 	call	4bf4 <_fflush_r>
    96cc:	103fb926 	beq	r2,zero,95b4 <__ram_exceptions_end+0xfbfe9360>
    96d0:	003f6506 	br	9468 <__ram_exceptions_end+0xfbfe9214>
    96d4:	a809883a 	mov	r4,r21
    96d8:	000999c0 	call	999c <_realloc_r>
    96dc:	102f883a 	mov	r23,r2
    96e0:	103fee1e 	bne	r2,zero,969c <__ram_exceptions_end+0xfbfe9448>
    96e4:	81400417 	ldw	r5,16(r16)
    96e8:	a809883a 	mov	r4,r21
    96ec:	00051440 	call	5144 <_free_r>
    96f0:	8080030b 	ldhu	r2,12(r16)
    96f4:	00ffdfc4 	movi	r3,-129
    96f8:	1884703a 	and	r2,r3,r2
    96fc:	00c00304 	movi	r3,12
    9700:	a8c00015 	stw	r3,0(r21)
    9704:	003f5906 	br	946c <__ram_exceptions_end+0xfbfe9218>
    9708:	94c00044 	addi	r19,r18,1
    970c:	02000044 	movi	r8,1
    9710:	003f6006 	br	9494 <__ram_exceptions_end+0xfbfe9240>
    9714:	00bfffc4 	movi	r2,-1
    9718:	003f0306 	br	9328 <__ram_exceptions_end+0xfbfe90d4>
    971c:	00800304 	movi	r2,12
    9720:	a8800015 	stw	r2,0(r21)
    9724:	8080030b 	ldhu	r2,12(r16)
    9728:	003f5006 	br	946c <__ram_exceptions_end+0xfbfe9218>

0000972c <_isatty_r>:
    972c:	defffd04 	addi	sp,sp,-12
    9730:	dc000015 	stw	r16,0(sp)
    9734:	04000074 	movhi	r16,1
    9738:	dc400115 	stw	r17,4(sp)
    973c:	840e7e04 	addi	r16,r16,14840
    9740:	2023883a 	mov	r17,r4
    9744:	2809883a 	mov	r4,r5
    9748:	dfc00215 	stw	ra,8(sp)
    974c:	80000015 	stw	zero,0(r16)
    9750:	000d8580 	call	d858 <isatty>
    9754:	00ffffc4 	movi	r3,-1
    9758:	10c00526 	beq	r2,r3,9770 <_isatty_r+0x44>
    975c:	dfc00217 	ldw	ra,8(sp)
    9760:	dc400117 	ldw	r17,4(sp)
    9764:	dc000017 	ldw	r16,0(sp)
    9768:	dec00304 	addi	sp,sp,12
    976c:	f800283a 	ret
    9770:	80c00017 	ldw	r3,0(r16)
    9774:	183ff926 	beq	r3,zero,975c <__ram_exceptions_end+0xfbfe9508>
    9778:	88c00015 	stw	r3,0(r17)
    977c:	003ff706 	br	975c <__ram_exceptions_end+0xfbfe9508>

00009780 <_lseek_r>:
    9780:	defffd04 	addi	sp,sp,-12
    9784:	2805883a 	mov	r2,r5
    9788:	dc000015 	stw	r16,0(sp)
    978c:	04000074 	movhi	r16,1
    9790:	dc400115 	stw	r17,4(sp)
    9794:	300b883a 	mov	r5,r6
    9798:	840e7e04 	addi	r16,r16,14840
    979c:	2023883a 	mov	r17,r4
    97a0:	380d883a 	mov	r6,r7
    97a4:	1009883a 	mov	r4,r2
    97a8:	dfc00215 	stw	ra,8(sp)
    97ac:	80000015 	stw	zero,0(r16)
    97b0:	000da240 	call	da24 <lseek>
    97b4:	00ffffc4 	movi	r3,-1
    97b8:	10c00526 	beq	r2,r3,97d0 <_lseek_r+0x50>
    97bc:	dfc00217 	ldw	ra,8(sp)
    97c0:	dc400117 	ldw	r17,4(sp)
    97c4:	dc000017 	ldw	r16,0(sp)
    97c8:	dec00304 	addi	sp,sp,12
    97cc:	f800283a 	ret
    97d0:	80c00017 	ldw	r3,0(r16)
    97d4:	183ff926 	beq	r3,zero,97bc <__ram_exceptions_end+0xfbfe9568>
    97d8:	88c00015 	stw	r3,0(r17)
    97dc:	003ff706 	br	97bc <__ram_exceptions_end+0xfbfe9568>

000097e0 <memmove>:
    97e0:	2005883a 	mov	r2,r4
    97e4:	29000b2e 	bgeu	r5,r4,9814 <memmove+0x34>
    97e8:	298f883a 	add	r7,r5,r6
    97ec:	21c0092e 	bgeu	r4,r7,9814 <memmove+0x34>
    97f0:	2187883a 	add	r3,r4,r6
    97f4:	198bc83a 	sub	r5,r3,r6
    97f8:	30004826 	beq	r6,zero,991c <memmove+0x13c>
    97fc:	39ffffc4 	addi	r7,r7,-1
    9800:	39000003 	ldbu	r4,0(r7)
    9804:	18ffffc4 	addi	r3,r3,-1
    9808:	19000005 	stb	r4,0(r3)
    980c:	28fffb1e 	bne	r5,r3,97fc <__ram_exceptions_end+0xfbfe95a8>
    9810:	f800283a 	ret
    9814:	00c003c4 	movi	r3,15
    9818:	1980412e 	bgeu	r3,r6,9920 <memmove+0x140>
    981c:	2886b03a 	or	r3,r5,r2
    9820:	18c000cc 	andi	r3,r3,3
    9824:	1800401e 	bne	r3,zero,9928 <memmove+0x148>
    9828:	33fffc04 	addi	r15,r6,-16
    982c:	781ed13a 	srli	r15,r15,4
    9830:	28c00104 	addi	r3,r5,4
    9834:	13400104 	addi	r13,r2,4
    9838:	781c913a 	slli	r14,r15,4
    983c:	2b000204 	addi	r12,r5,8
    9840:	12c00204 	addi	r11,r2,8
    9844:	73800504 	addi	r14,r14,20
    9848:	2a800304 	addi	r10,r5,12
    984c:	12400304 	addi	r9,r2,12
    9850:	2b9d883a 	add	r14,r5,r14
    9854:	2811883a 	mov	r8,r5
    9858:	100f883a 	mov	r7,r2
    985c:	41000017 	ldw	r4,0(r8)
    9860:	39c00404 	addi	r7,r7,16
    9864:	18c00404 	addi	r3,r3,16
    9868:	393ffc15 	stw	r4,-16(r7)
    986c:	193ffc17 	ldw	r4,-16(r3)
    9870:	6b400404 	addi	r13,r13,16
    9874:	5ac00404 	addi	r11,r11,16
    9878:	693ffc15 	stw	r4,-16(r13)
    987c:	61000017 	ldw	r4,0(r12)
    9880:	4a400404 	addi	r9,r9,16
    9884:	42000404 	addi	r8,r8,16
    9888:	593ffc15 	stw	r4,-16(r11)
    988c:	51000017 	ldw	r4,0(r10)
    9890:	63000404 	addi	r12,r12,16
    9894:	52800404 	addi	r10,r10,16
    9898:	493ffc15 	stw	r4,-16(r9)
    989c:	1bbfef1e 	bne	r3,r14,985c <__ram_exceptions_end+0xfbfe9608>
    98a0:	79000044 	addi	r4,r15,1
    98a4:	2008913a 	slli	r4,r4,4
    98a8:	328003cc 	andi	r10,r6,15
    98ac:	02c000c4 	movi	r11,3
    98b0:	1107883a 	add	r3,r2,r4
    98b4:	290b883a 	add	r5,r5,r4
    98b8:	5a801e2e 	bgeu	r11,r10,9934 <memmove+0x154>
    98bc:	1813883a 	mov	r9,r3
    98c0:	2811883a 	mov	r8,r5
    98c4:	500f883a 	mov	r7,r10
    98c8:	41000017 	ldw	r4,0(r8)
    98cc:	4a400104 	addi	r9,r9,4
    98d0:	39ffff04 	addi	r7,r7,-4
    98d4:	493fff15 	stw	r4,-4(r9)
    98d8:	42000104 	addi	r8,r8,4
    98dc:	59fffa36 	bltu	r11,r7,98c8 <__ram_exceptions_end+0xfbfe9674>
    98e0:	513fff04 	addi	r4,r10,-4
    98e4:	2008d0ba 	srli	r4,r4,2
    98e8:	318000cc 	andi	r6,r6,3
    98ec:	21000044 	addi	r4,r4,1
    98f0:	2109883a 	add	r4,r4,r4
    98f4:	2109883a 	add	r4,r4,r4
    98f8:	1907883a 	add	r3,r3,r4
    98fc:	290b883a 	add	r5,r5,r4
    9900:	30000b26 	beq	r6,zero,9930 <memmove+0x150>
    9904:	198d883a 	add	r6,r3,r6
    9908:	29c00003 	ldbu	r7,0(r5)
    990c:	18c00044 	addi	r3,r3,1
    9910:	29400044 	addi	r5,r5,1
    9914:	19ffffc5 	stb	r7,-1(r3)
    9918:	19bffb1e 	bne	r3,r6,9908 <__ram_exceptions_end+0xfbfe96b4>
    991c:	f800283a 	ret
    9920:	1007883a 	mov	r3,r2
    9924:	003ff606 	br	9900 <__ram_exceptions_end+0xfbfe96ac>
    9928:	1007883a 	mov	r3,r2
    992c:	003ff506 	br	9904 <__ram_exceptions_end+0xfbfe96b0>
    9930:	f800283a 	ret
    9934:	500d883a 	mov	r6,r10
    9938:	003ff106 	br	9900 <__ram_exceptions_end+0xfbfe96ac>

0000993c <_read_r>:
    993c:	defffd04 	addi	sp,sp,-12
    9940:	2805883a 	mov	r2,r5
    9944:	dc000015 	stw	r16,0(sp)
    9948:	04000074 	movhi	r16,1
    994c:	dc400115 	stw	r17,4(sp)
    9950:	300b883a 	mov	r5,r6
    9954:	840e7e04 	addi	r16,r16,14840
    9958:	2023883a 	mov	r17,r4
    995c:	380d883a 	mov	r6,r7
    9960:	1009883a 	mov	r4,r2
    9964:	dfc00215 	stw	ra,8(sp)
    9968:	80000015 	stw	zero,0(r16)
    996c:	000de600 	call	de60 <read>
    9970:	00ffffc4 	movi	r3,-1
    9974:	10c00526 	beq	r2,r3,998c <_read_r+0x50>
    9978:	dfc00217 	ldw	ra,8(sp)
    997c:	dc400117 	ldw	r17,4(sp)
    9980:	dc000017 	ldw	r16,0(sp)
    9984:	dec00304 	addi	sp,sp,12
    9988:	f800283a 	ret
    998c:	80c00017 	ldw	r3,0(r16)
    9990:	183ff926 	beq	r3,zero,9978 <__ram_exceptions_end+0xfbfe9724>
    9994:	88c00015 	stw	r3,0(r17)
    9998:	003ff706 	br	9978 <__ram_exceptions_end+0xfbfe9724>

0000999c <_realloc_r>:
    999c:	defff604 	addi	sp,sp,-40
    99a0:	dc800215 	stw	r18,8(sp)
    99a4:	dfc00915 	stw	ra,36(sp)
    99a8:	df000815 	stw	fp,32(sp)
    99ac:	ddc00715 	stw	r23,28(sp)
    99b0:	dd800615 	stw	r22,24(sp)
    99b4:	dd400515 	stw	r21,20(sp)
    99b8:	dd000415 	stw	r20,16(sp)
    99bc:	dcc00315 	stw	r19,12(sp)
    99c0:	dc400115 	stw	r17,4(sp)
    99c4:	dc000015 	stw	r16,0(sp)
    99c8:	3025883a 	mov	r18,r6
    99cc:	2800b726 	beq	r5,zero,9cac <_realloc_r+0x310>
    99d0:	282b883a 	mov	r21,r5
    99d4:	2029883a 	mov	r20,r4
    99d8:	000db740 	call	db74 <__malloc_lock>
    99dc:	a8bfff17 	ldw	r2,-4(r21)
    99e0:	043fff04 	movi	r16,-4
    99e4:	90c002c4 	addi	r3,r18,11
    99e8:	01000584 	movi	r4,22
    99ec:	acfffe04 	addi	r19,r21,-8
    99f0:	1420703a 	and	r16,r2,r16
    99f4:	20c0332e 	bgeu	r4,r3,9ac4 <_realloc_r+0x128>
    99f8:	047ffe04 	movi	r17,-8
    99fc:	1c62703a 	and	r17,r3,r17
    9a00:	8807883a 	mov	r3,r17
    9a04:	88005816 	blt	r17,zero,9b68 <_realloc_r+0x1cc>
    9a08:	8c805736 	bltu	r17,r18,9b68 <_realloc_r+0x1cc>
    9a0c:	80c0300e 	bge	r16,r3,9ad0 <_realloc_r+0x134>
    9a10:	07000074 	movhi	fp,1
    9a14:	e7022604 	addi	fp,fp,2200
    9a18:	e1c00217 	ldw	r7,8(fp)
    9a1c:	9c09883a 	add	r4,r19,r16
    9a20:	22000117 	ldw	r8,4(r4)
    9a24:	21c06326 	beq	r4,r7,9bb4 <_realloc_r+0x218>
    9a28:	017fff84 	movi	r5,-2
    9a2c:	414a703a 	and	r5,r8,r5
    9a30:	214b883a 	add	r5,r4,r5
    9a34:	29800117 	ldw	r6,4(r5)
    9a38:	3180004c 	andi	r6,r6,1
    9a3c:	30003f26 	beq	r6,zero,9b3c <_realloc_r+0x1a0>
    9a40:	1080004c 	andi	r2,r2,1
    9a44:	10008326 	beq	r2,zero,9c54 <_realloc_r+0x2b8>
    9a48:	900b883a 	mov	r5,r18
    9a4c:	a009883a 	mov	r4,r20
    9a50:	00058740 	call	5874 <_malloc_r>
    9a54:	1025883a 	mov	r18,r2
    9a58:	10011e26 	beq	r2,zero,9ed4 <_realloc_r+0x538>
    9a5c:	a93fff17 	ldw	r4,-4(r21)
    9a60:	10fffe04 	addi	r3,r2,-8
    9a64:	00bfff84 	movi	r2,-2
    9a68:	2084703a 	and	r2,r4,r2
    9a6c:	9885883a 	add	r2,r19,r2
    9a70:	1880ee26 	beq	r3,r2,9e2c <_realloc_r+0x490>
    9a74:	81bfff04 	addi	r6,r16,-4
    9a78:	00800904 	movi	r2,36
    9a7c:	1180b836 	bltu	r2,r6,9d60 <_realloc_r+0x3c4>
    9a80:	00c004c4 	movi	r3,19
    9a84:	19809636 	bltu	r3,r6,9ce0 <_realloc_r+0x344>
    9a88:	9005883a 	mov	r2,r18
    9a8c:	a807883a 	mov	r3,r21
    9a90:	19000017 	ldw	r4,0(r3)
    9a94:	11000015 	stw	r4,0(r2)
    9a98:	19000117 	ldw	r4,4(r3)
    9a9c:	11000115 	stw	r4,4(r2)
    9aa0:	18c00217 	ldw	r3,8(r3)
    9aa4:	10c00215 	stw	r3,8(r2)
    9aa8:	a80b883a 	mov	r5,r21
    9aac:	a009883a 	mov	r4,r20
    9ab0:	00051440 	call	5144 <_free_r>
    9ab4:	a009883a 	mov	r4,r20
    9ab8:	000db980 	call	db98 <__malloc_unlock>
    9abc:	9005883a 	mov	r2,r18
    9ac0:	00001206 	br	9b0c <_realloc_r+0x170>
    9ac4:	00c00404 	movi	r3,16
    9ac8:	1823883a 	mov	r17,r3
    9acc:	003fce06 	br	9a08 <__ram_exceptions_end+0xfbfe97b4>
    9ad0:	a825883a 	mov	r18,r21
    9ad4:	8445c83a 	sub	r2,r16,r17
    9ad8:	00c003c4 	movi	r3,15
    9adc:	18802636 	bltu	r3,r2,9b78 <_realloc_r+0x1dc>
    9ae0:	99800117 	ldw	r6,4(r19)
    9ae4:	9c07883a 	add	r3,r19,r16
    9ae8:	3180004c 	andi	r6,r6,1
    9aec:	3420b03a 	or	r16,r6,r16
    9af0:	9c000115 	stw	r16,4(r19)
    9af4:	18800117 	ldw	r2,4(r3)
    9af8:	10800054 	ori	r2,r2,1
    9afc:	18800115 	stw	r2,4(r3)
    9b00:	a009883a 	mov	r4,r20
    9b04:	000db980 	call	db98 <__malloc_unlock>
    9b08:	9005883a 	mov	r2,r18
    9b0c:	dfc00917 	ldw	ra,36(sp)
    9b10:	df000817 	ldw	fp,32(sp)
    9b14:	ddc00717 	ldw	r23,28(sp)
    9b18:	dd800617 	ldw	r22,24(sp)
    9b1c:	dd400517 	ldw	r21,20(sp)
    9b20:	dd000417 	ldw	r20,16(sp)
    9b24:	dcc00317 	ldw	r19,12(sp)
    9b28:	dc800217 	ldw	r18,8(sp)
    9b2c:	dc400117 	ldw	r17,4(sp)
    9b30:	dc000017 	ldw	r16,0(sp)
    9b34:	dec00a04 	addi	sp,sp,40
    9b38:	f800283a 	ret
    9b3c:	017fff04 	movi	r5,-4
    9b40:	414a703a 	and	r5,r8,r5
    9b44:	814d883a 	add	r6,r16,r5
    9b48:	30c01f16 	blt	r6,r3,9bc8 <_realloc_r+0x22c>
    9b4c:	20800317 	ldw	r2,12(r4)
    9b50:	20c00217 	ldw	r3,8(r4)
    9b54:	a825883a 	mov	r18,r21
    9b58:	3021883a 	mov	r16,r6
    9b5c:	18800315 	stw	r2,12(r3)
    9b60:	10c00215 	stw	r3,8(r2)
    9b64:	003fdb06 	br	9ad4 <__ram_exceptions_end+0xfbfe9880>
    9b68:	00800304 	movi	r2,12
    9b6c:	a0800015 	stw	r2,0(r20)
    9b70:	0005883a 	mov	r2,zero
    9b74:	003fe506 	br	9b0c <__ram_exceptions_end+0xfbfe98b8>
    9b78:	98c00117 	ldw	r3,4(r19)
    9b7c:	9c4b883a 	add	r5,r19,r17
    9b80:	11000054 	ori	r4,r2,1
    9b84:	18c0004c 	andi	r3,r3,1
    9b88:	1c62b03a 	or	r17,r3,r17
    9b8c:	9c400115 	stw	r17,4(r19)
    9b90:	29000115 	stw	r4,4(r5)
    9b94:	2885883a 	add	r2,r5,r2
    9b98:	10c00117 	ldw	r3,4(r2)
    9b9c:	29400204 	addi	r5,r5,8
    9ba0:	a009883a 	mov	r4,r20
    9ba4:	18c00054 	ori	r3,r3,1
    9ba8:	10c00115 	stw	r3,4(r2)
    9bac:	00051440 	call	5144 <_free_r>
    9bb0:	003fd306 	br	9b00 <__ram_exceptions_end+0xfbfe98ac>
    9bb4:	017fff04 	movi	r5,-4
    9bb8:	414a703a 	and	r5,r8,r5
    9bbc:	89800404 	addi	r6,r17,16
    9bc0:	8151883a 	add	r8,r16,r5
    9bc4:	4180590e 	bge	r8,r6,9d2c <_realloc_r+0x390>
    9bc8:	1080004c 	andi	r2,r2,1
    9bcc:	103f9e1e 	bne	r2,zero,9a48 <__ram_exceptions_end+0xfbfe97f4>
    9bd0:	adbffe17 	ldw	r22,-8(r21)
    9bd4:	00bfff04 	movi	r2,-4
    9bd8:	9dadc83a 	sub	r22,r19,r22
    9bdc:	b1800117 	ldw	r6,4(r22)
    9be0:	3084703a 	and	r2,r6,r2
    9be4:	20002026 	beq	r4,zero,9c68 <_realloc_r+0x2cc>
    9be8:	80af883a 	add	r23,r16,r2
    9bec:	b96f883a 	add	r23,r23,r5
    9bf0:	21c05f26 	beq	r4,r7,9d70 <_realloc_r+0x3d4>
    9bf4:	b8c01c16 	blt	r23,r3,9c68 <_realloc_r+0x2cc>
    9bf8:	20800317 	ldw	r2,12(r4)
    9bfc:	20c00217 	ldw	r3,8(r4)
    9c00:	81bfff04 	addi	r6,r16,-4
    9c04:	01000904 	movi	r4,36
    9c08:	18800315 	stw	r2,12(r3)
    9c0c:	10c00215 	stw	r3,8(r2)
    9c10:	b0c00217 	ldw	r3,8(r22)
    9c14:	b0800317 	ldw	r2,12(r22)
    9c18:	b4800204 	addi	r18,r22,8
    9c1c:	18800315 	stw	r2,12(r3)
    9c20:	10c00215 	stw	r3,8(r2)
    9c24:	21801b36 	bltu	r4,r6,9c94 <_realloc_r+0x2f8>
    9c28:	008004c4 	movi	r2,19
    9c2c:	1180352e 	bgeu	r2,r6,9d04 <_realloc_r+0x368>
    9c30:	a8800017 	ldw	r2,0(r21)
    9c34:	b0800215 	stw	r2,8(r22)
    9c38:	a8800117 	ldw	r2,4(r21)
    9c3c:	b0800315 	stw	r2,12(r22)
    9c40:	008006c4 	movi	r2,27
    9c44:	11807f36 	bltu	r2,r6,9e44 <_realloc_r+0x4a8>
    9c48:	b0800404 	addi	r2,r22,16
    9c4c:	ad400204 	addi	r21,r21,8
    9c50:	00002d06 	br	9d08 <_realloc_r+0x36c>
    9c54:	adbffe17 	ldw	r22,-8(r21)
    9c58:	00bfff04 	movi	r2,-4
    9c5c:	9dadc83a 	sub	r22,r19,r22
    9c60:	b1000117 	ldw	r4,4(r22)
    9c64:	2084703a 	and	r2,r4,r2
    9c68:	b03f7726 	beq	r22,zero,9a48 <__ram_exceptions_end+0xfbfe97f4>
    9c6c:	80af883a 	add	r23,r16,r2
    9c70:	b8ff7516 	blt	r23,r3,9a48 <__ram_exceptions_end+0xfbfe97f4>
    9c74:	b0800317 	ldw	r2,12(r22)
    9c78:	b0c00217 	ldw	r3,8(r22)
    9c7c:	81bfff04 	addi	r6,r16,-4
    9c80:	01000904 	movi	r4,36
    9c84:	18800315 	stw	r2,12(r3)
    9c88:	10c00215 	stw	r3,8(r2)
    9c8c:	b4800204 	addi	r18,r22,8
    9c90:	21bfe52e 	bgeu	r4,r6,9c28 <__ram_exceptions_end+0xfbfe99d4>
    9c94:	a80b883a 	mov	r5,r21
    9c98:	9009883a 	mov	r4,r18
    9c9c:	00097e00 	call	97e0 <memmove>
    9ca0:	b821883a 	mov	r16,r23
    9ca4:	b027883a 	mov	r19,r22
    9ca8:	003f8a06 	br	9ad4 <__ram_exceptions_end+0xfbfe9880>
    9cac:	300b883a 	mov	r5,r6
    9cb0:	dfc00917 	ldw	ra,36(sp)
    9cb4:	df000817 	ldw	fp,32(sp)
    9cb8:	ddc00717 	ldw	r23,28(sp)
    9cbc:	dd800617 	ldw	r22,24(sp)
    9cc0:	dd400517 	ldw	r21,20(sp)
    9cc4:	dd000417 	ldw	r20,16(sp)
    9cc8:	dcc00317 	ldw	r19,12(sp)
    9ccc:	dc800217 	ldw	r18,8(sp)
    9cd0:	dc400117 	ldw	r17,4(sp)
    9cd4:	dc000017 	ldw	r16,0(sp)
    9cd8:	dec00a04 	addi	sp,sp,40
    9cdc:	00058741 	jmpi	5874 <_malloc_r>
    9ce0:	a8c00017 	ldw	r3,0(r21)
    9ce4:	90c00015 	stw	r3,0(r18)
    9ce8:	a8c00117 	ldw	r3,4(r21)
    9cec:	90c00115 	stw	r3,4(r18)
    9cf0:	00c006c4 	movi	r3,27
    9cf4:	19804536 	bltu	r3,r6,9e0c <_realloc_r+0x470>
    9cf8:	90800204 	addi	r2,r18,8
    9cfc:	a8c00204 	addi	r3,r21,8
    9d00:	003f6306 	br	9a90 <__ram_exceptions_end+0xfbfe983c>
    9d04:	9005883a 	mov	r2,r18
    9d08:	a8c00017 	ldw	r3,0(r21)
    9d0c:	b821883a 	mov	r16,r23
    9d10:	b027883a 	mov	r19,r22
    9d14:	10c00015 	stw	r3,0(r2)
    9d18:	a8c00117 	ldw	r3,4(r21)
    9d1c:	10c00115 	stw	r3,4(r2)
    9d20:	a8c00217 	ldw	r3,8(r21)
    9d24:	10c00215 	stw	r3,8(r2)
    9d28:	003f6a06 	br	9ad4 <__ram_exceptions_end+0xfbfe9880>
    9d2c:	9c67883a 	add	r19,r19,r17
    9d30:	4445c83a 	sub	r2,r8,r17
    9d34:	e4c00215 	stw	r19,8(fp)
    9d38:	10800054 	ori	r2,r2,1
    9d3c:	98800115 	stw	r2,4(r19)
    9d40:	a8bfff17 	ldw	r2,-4(r21)
    9d44:	a009883a 	mov	r4,r20
    9d48:	1080004c 	andi	r2,r2,1
    9d4c:	1462b03a 	or	r17,r2,r17
    9d50:	ac7fff15 	stw	r17,-4(r21)
    9d54:	000db980 	call	db98 <__malloc_unlock>
    9d58:	a805883a 	mov	r2,r21
    9d5c:	003f6b06 	br	9b0c <__ram_exceptions_end+0xfbfe98b8>
    9d60:	a80b883a 	mov	r5,r21
    9d64:	9009883a 	mov	r4,r18
    9d68:	00097e00 	call	97e0 <memmove>
    9d6c:	003f4e06 	br	9aa8 <__ram_exceptions_end+0xfbfe9854>
    9d70:	89000404 	addi	r4,r17,16
    9d74:	b93fbc16 	blt	r23,r4,9c68 <__ram_exceptions_end+0xfbfe9a14>
    9d78:	b0800317 	ldw	r2,12(r22)
    9d7c:	b0c00217 	ldw	r3,8(r22)
    9d80:	81bfff04 	addi	r6,r16,-4
    9d84:	01000904 	movi	r4,36
    9d88:	18800315 	stw	r2,12(r3)
    9d8c:	10c00215 	stw	r3,8(r2)
    9d90:	b4800204 	addi	r18,r22,8
    9d94:	21804336 	bltu	r4,r6,9ea4 <_realloc_r+0x508>
    9d98:	008004c4 	movi	r2,19
    9d9c:	11803f2e 	bgeu	r2,r6,9e9c <_realloc_r+0x500>
    9da0:	a8800017 	ldw	r2,0(r21)
    9da4:	b0800215 	stw	r2,8(r22)
    9da8:	a8800117 	ldw	r2,4(r21)
    9dac:	b0800315 	stw	r2,12(r22)
    9db0:	008006c4 	movi	r2,27
    9db4:	11803f36 	bltu	r2,r6,9eb4 <_realloc_r+0x518>
    9db8:	b0800404 	addi	r2,r22,16
    9dbc:	ad400204 	addi	r21,r21,8
    9dc0:	a8c00017 	ldw	r3,0(r21)
    9dc4:	10c00015 	stw	r3,0(r2)
    9dc8:	a8c00117 	ldw	r3,4(r21)
    9dcc:	10c00115 	stw	r3,4(r2)
    9dd0:	a8c00217 	ldw	r3,8(r21)
    9dd4:	10c00215 	stw	r3,8(r2)
    9dd8:	b447883a 	add	r3,r22,r17
    9ddc:	bc45c83a 	sub	r2,r23,r17
    9de0:	e0c00215 	stw	r3,8(fp)
    9de4:	10800054 	ori	r2,r2,1
    9de8:	18800115 	stw	r2,4(r3)
    9dec:	b0800117 	ldw	r2,4(r22)
    9df0:	a009883a 	mov	r4,r20
    9df4:	1080004c 	andi	r2,r2,1
    9df8:	1462b03a 	or	r17,r2,r17
    9dfc:	b4400115 	stw	r17,4(r22)
    9e00:	000db980 	call	db98 <__malloc_unlock>
    9e04:	9005883a 	mov	r2,r18
    9e08:	003f4006 	br	9b0c <__ram_exceptions_end+0xfbfe98b8>
    9e0c:	a8c00217 	ldw	r3,8(r21)
    9e10:	90c00215 	stw	r3,8(r18)
    9e14:	a8c00317 	ldw	r3,12(r21)
    9e18:	90c00315 	stw	r3,12(r18)
    9e1c:	30801126 	beq	r6,r2,9e64 <_realloc_r+0x4c8>
    9e20:	90800404 	addi	r2,r18,16
    9e24:	a8c00404 	addi	r3,r21,16
    9e28:	003f1906 	br	9a90 <__ram_exceptions_end+0xfbfe983c>
    9e2c:	90ffff17 	ldw	r3,-4(r18)
    9e30:	00bfff04 	movi	r2,-4
    9e34:	a825883a 	mov	r18,r21
    9e38:	1884703a 	and	r2,r3,r2
    9e3c:	80a1883a 	add	r16,r16,r2
    9e40:	003f2406 	br	9ad4 <__ram_exceptions_end+0xfbfe9880>
    9e44:	a8800217 	ldw	r2,8(r21)
    9e48:	b0800415 	stw	r2,16(r22)
    9e4c:	a8800317 	ldw	r2,12(r21)
    9e50:	b0800515 	stw	r2,20(r22)
    9e54:	31000a26 	beq	r6,r4,9e80 <_realloc_r+0x4e4>
    9e58:	b0800604 	addi	r2,r22,24
    9e5c:	ad400404 	addi	r21,r21,16
    9e60:	003fa906 	br	9d08 <__ram_exceptions_end+0xfbfe9ab4>
    9e64:	a9000417 	ldw	r4,16(r21)
    9e68:	90800604 	addi	r2,r18,24
    9e6c:	a8c00604 	addi	r3,r21,24
    9e70:	91000415 	stw	r4,16(r18)
    9e74:	a9000517 	ldw	r4,20(r21)
    9e78:	91000515 	stw	r4,20(r18)
    9e7c:	003f0406 	br	9a90 <__ram_exceptions_end+0xfbfe983c>
    9e80:	a8c00417 	ldw	r3,16(r21)
    9e84:	ad400604 	addi	r21,r21,24
    9e88:	b0800804 	addi	r2,r22,32
    9e8c:	b0c00615 	stw	r3,24(r22)
    9e90:	a8ffff17 	ldw	r3,-4(r21)
    9e94:	b0c00715 	stw	r3,28(r22)
    9e98:	003f9b06 	br	9d08 <__ram_exceptions_end+0xfbfe9ab4>
    9e9c:	9005883a 	mov	r2,r18
    9ea0:	003fc706 	br	9dc0 <__ram_exceptions_end+0xfbfe9b6c>
    9ea4:	a80b883a 	mov	r5,r21
    9ea8:	9009883a 	mov	r4,r18
    9eac:	00097e00 	call	97e0 <memmove>
    9eb0:	003fc906 	br	9dd8 <__ram_exceptions_end+0xfbfe9b84>
    9eb4:	a8800217 	ldw	r2,8(r21)
    9eb8:	b0800415 	stw	r2,16(r22)
    9ebc:	a8800317 	ldw	r2,12(r21)
    9ec0:	b0800515 	stw	r2,20(r22)
    9ec4:	31000726 	beq	r6,r4,9ee4 <_realloc_r+0x548>
    9ec8:	b0800604 	addi	r2,r22,24
    9ecc:	ad400404 	addi	r21,r21,16
    9ed0:	003fbb06 	br	9dc0 <__ram_exceptions_end+0xfbfe9b6c>
    9ed4:	a009883a 	mov	r4,r20
    9ed8:	000db980 	call	db98 <__malloc_unlock>
    9edc:	0005883a 	mov	r2,zero
    9ee0:	003f0a06 	br	9b0c <__ram_exceptions_end+0xfbfe98b8>
    9ee4:	a8c00417 	ldw	r3,16(r21)
    9ee8:	ad400604 	addi	r21,r21,24
    9eec:	b0800804 	addi	r2,r22,32
    9ef0:	b0c00615 	stw	r3,24(r22)
    9ef4:	a8ffff17 	ldw	r3,-4(r21)
    9ef8:	b0c00715 	stw	r3,28(r22)
    9efc:	003fb006 	br	9dc0 <__ram_exceptions_end+0xfbfe9b6c>

00009f00 <__swbuf_r>:
    9f00:	defffb04 	addi	sp,sp,-20
    9f04:	dcc00315 	stw	r19,12(sp)
    9f08:	dc800215 	stw	r18,8(sp)
    9f0c:	dc000015 	stw	r16,0(sp)
    9f10:	dfc00415 	stw	ra,16(sp)
    9f14:	dc400115 	stw	r17,4(sp)
    9f18:	2025883a 	mov	r18,r4
    9f1c:	2827883a 	mov	r19,r5
    9f20:	3021883a 	mov	r16,r6
    9f24:	20000226 	beq	r4,zero,9f30 <__swbuf_r+0x30>
    9f28:	20800e17 	ldw	r2,56(r4)
    9f2c:	10004226 	beq	r2,zero,a038 <__swbuf_r+0x138>
    9f30:	80800617 	ldw	r2,24(r16)
    9f34:	8100030b 	ldhu	r4,12(r16)
    9f38:	80800215 	stw	r2,8(r16)
    9f3c:	2080020c 	andi	r2,r4,8
    9f40:	10003626 	beq	r2,zero,a01c <__swbuf_r+0x11c>
    9f44:	80c00417 	ldw	r3,16(r16)
    9f48:	18003426 	beq	r3,zero,a01c <__swbuf_r+0x11c>
    9f4c:	2088000c 	andi	r2,r4,8192
    9f50:	9c403fcc 	andi	r17,r19,255
    9f54:	10001a26 	beq	r2,zero,9fc0 <__swbuf_r+0xc0>
    9f58:	80800017 	ldw	r2,0(r16)
    9f5c:	81000517 	ldw	r4,20(r16)
    9f60:	10c7c83a 	sub	r3,r2,r3
    9f64:	1900200e 	bge	r3,r4,9fe8 <__swbuf_r+0xe8>
    9f68:	18c00044 	addi	r3,r3,1
    9f6c:	81000217 	ldw	r4,8(r16)
    9f70:	11400044 	addi	r5,r2,1
    9f74:	81400015 	stw	r5,0(r16)
    9f78:	213fffc4 	addi	r4,r4,-1
    9f7c:	81000215 	stw	r4,8(r16)
    9f80:	14c00005 	stb	r19,0(r2)
    9f84:	80800517 	ldw	r2,20(r16)
    9f88:	10c01e26 	beq	r2,r3,a004 <__swbuf_r+0x104>
    9f8c:	8080030b 	ldhu	r2,12(r16)
    9f90:	1080004c 	andi	r2,r2,1
    9f94:	10000226 	beq	r2,zero,9fa0 <__swbuf_r+0xa0>
    9f98:	00800284 	movi	r2,10
    9f9c:	88801926 	beq	r17,r2,a004 <__swbuf_r+0x104>
    9fa0:	8805883a 	mov	r2,r17
    9fa4:	dfc00417 	ldw	ra,16(sp)
    9fa8:	dcc00317 	ldw	r19,12(sp)
    9fac:	dc800217 	ldw	r18,8(sp)
    9fb0:	dc400117 	ldw	r17,4(sp)
    9fb4:	dc000017 	ldw	r16,0(sp)
    9fb8:	dec00504 	addi	sp,sp,20
    9fbc:	f800283a 	ret
    9fc0:	81401917 	ldw	r5,100(r16)
    9fc4:	00b7ffc4 	movi	r2,-8193
    9fc8:	21080014 	ori	r4,r4,8192
    9fcc:	2884703a 	and	r2,r5,r2
    9fd0:	80801915 	stw	r2,100(r16)
    9fd4:	80800017 	ldw	r2,0(r16)
    9fd8:	8100030d 	sth	r4,12(r16)
    9fdc:	81000517 	ldw	r4,20(r16)
    9fe0:	10c7c83a 	sub	r3,r2,r3
    9fe4:	193fe016 	blt	r3,r4,9f68 <__ram_exceptions_end+0xfbfe9d14>
    9fe8:	800b883a 	mov	r5,r16
    9fec:	9009883a 	mov	r4,r18
    9ff0:	0004bf40 	call	4bf4 <_fflush_r>
    9ff4:	1000071e 	bne	r2,zero,a014 <__swbuf_r+0x114>
    9ff8:	80800017 	ldw	r2,0(r16)
    9ffc:	00c00044 	movi	r3,1
    a000:	003fda06 	br	9f6c <__ram_exceptions_end+0xfbfe9d18>
    a004:	800b883a 	mov	r5,r16
    a008:	9009883a 	mov	r4,r18
    a00c:	0004bf40 	call	4bf4 <_fflush_r>
    a010:	103fe326 	beq	r2,zero,9fa0 <__ram_exceptions_end+0xfbfe9d4c>
    a014:	00bfffc4 	movi	r2,-1
    a018:	003fe206 	br	9fa4 <__ram_exceptions_end+0xfbfe9d50>
    a01c:	800b883a 	mov	r5,r16
    a020:	9009883a 	mov	r4,r18
    a024:	0002ffc0 	call	2ffc <__swsetup_r>
    a028:	103ffa1e 	bne	r2,zero,a014 <__ram_exceptions_end+0xfbfe9dc0>
    a02c:	8100030b 	ldhu	r4,12(r16)
    a030:	80c00417 	ldw	r3,16(r16)
    a034:	003fc506 	br	9f4c <__ram_exceptions_end+0xfbfe9cf8>
    a038:	0004fd00 	call	4fd0 <__sinit>
    a03c:	003fbc06 	br	9f30 <__ram_exceptions_end+0xfbfe9cdc>

0000a040 <__swbuf>:
    a040:	00800074 	movhi	r2,1
    a044:	1087ab04 	addi	r2,r2,7852
    a048:	280d883a 	mov	r6,r5
    a04c:	200b883a 	mov	r5,r4
    a050:	11000017 	ldw	r4,0(r2)
    a054:	0009f001 	jmpi	9f00 <__swbuf_r>

0000a058 <_wcrtomb_r>:
    a058:	defff604 	addi	sp,sp,-40
    a05c:	00800074 	movhi	r2,1
    a060:	dc800815 	stw	r18,32(sp)
    a064:	dc400715 	stw	r17,28(sp)
    a068:	dc000615 	stw	r16,24(sp)
    a06c:	1087af04 	addi	r2,r2,7868
    a070:	dfc00915 	stw	ra,36(sp)
    a074:	2021883a 	mov	r16,r4
    a078:	3823883a 	mov	r17,r7
    a07c:	14800017 	ldw	r18,0(r2)
    a080:	28001426 	beq	r5,zero,a0d4 <_wcrtomb_r+0x7c>
    a084:	d9400415 	stw	r5,16(sp)
    a088:	d9800515 	stw	r6,20(sp)
    a08c:	00056580 	call	5658 <__locale_charset>
    a090:	d9800517 	ldw	r6,20(sp)
    a094:	d9400417 	ldw	r5,16(sp)
    a098:	100f883a 	mov	r7,r2
    a09c:	dc400015 	stw	r17,0(sp)
    a0a0:	8009883a 	mov	r4,r16
    a0a4:	903ee83a 	callr	r18
    a0a8:	00ffffc4 	movi	r3,-1
    a0ac:	10c0031e 	bne	r2,r3,a0bc <_wcrtomb_r+0x64>
    a0b0:	88000015 	stw	zero,0(r17)
    a0b4:	00c02284 	movi	r3,138
    a0b8:	80c00015 	stw	r3,0(r16)
    a0bc:	dfc00917 	ldw	ra,36(sp)
    a0c0:	dc800817 	ldw	r18,32(sp)
    a0c4:	dc400717 	ldw	r17,28(sp)
    a0c8:	dc000617 	ldw	r16,24(sp)
    a0cc:	dec00a04 	addi	sp,sp,40
    a0d0:	f800283a 	ret
    a0d4:	00056580 	call	5658 <__locale_charset>
    a0d8:	100f883a 	mov	r7,r2
    a0dc:	dc400015 	stw	r17,0(sp)
    a0e0:	000d883a 	mov	r6,zero
    a0e4:	d9400104 	addi	r5,sp,4
    a0e8:	8009883a 	mov	r4,r16
    a0ec:	903ee83a 	callr	r18
    a0f0:	003fed06 	br	a0a8 <__ram_exceptions_end+0xfbfe9e54>

0000a0f4 <wcrtomb>:
    a0f4:	defff604 	addi	sp,sp,-40
    a0f8:	00800074 	movhi	r2,1
    a0fc:	dc800615 	stw	r18,24(sp)
    a100:	dc400515 	stw	r17,20(sp)
    a104:	1087ab04 	addi	r2,r2,7852
    a108:	dfc00915 	stw	ra,36(sp)
    a10c:	dd000815 	stw	r20,32(sp)
    a110:	dcc00715 	stw	r19,28(sp)
    a114:	dc000415 	stw	r16,16(sp)
    a118:	3025883a 	mov	r18,r6
    a11c:	14400017 	ldw	r17,0(r2)
    a120:	20001926 	beq	r4,zero,a188 <wcrtomb+0x94>
    a124:	00800074 	movhi	r2,1
    a128:	1087af04 	addi	r2,r2,7868
    a12c:	15000017 	ldw	r20,0(r2)
    a130:	2021883a 	mov	r16,r4
    a134:	2827883a 	mov	r19,r5
    a138:	00056580 	call	5658 <__locale_charset>
    a13c:	100f883a 	mov	r7,r2
    a140:	dc800015 	stw	r18,0(sp)
    a144:	980d883a 	mov	r6,r19
    a148:	800b883a 	mov	r5,r16
    a14c:	8809883a 	mov	r4,r17
    a150:	a03ee83a 	callr	r20
    a154:	00ffffc4 	movi	r3,-1
    a158:	10c0031e 	bne	r2,r3,a168 <wcrtomb+0x74>
    a15c:	90000015 	stw	zero,0(r18)
    a160:	00c02284 	movi	r3,138
    a164:	88c00015 	stw	r3,0(r17)
    a168:	dfc00917 	ldw	ra,36(sp)
    a16c:	dd000817 	ldw	r20,32(sp)
    a170:	dcc00717 	ldw	r19,28(sp)
    a174:	dc800617 	ldw	r18,24(sp)
    a178:	dc400517 	ldw	r17,20(sp)
    a17c:	dc000417 	ldw	r16,16(sp)
    a180:	dec00a04 	addi	sp,sp,40
    a184:	f800283a 	ret
    a188:	00800074 	movhi	r2,1
    a18c:	1087af04 	addi	r2,r2,7868
    a190:	14000017 	ldw	r16,0(r2)
    a194:	00056580 	call	5658 <__locale_charset>
    a198:	100f883a 	mov	r7,r2
    a19c:	dc800015 	stw	r18,0(sp)
    a1a0:	000d883a 	mov	r6,zero
    a1a4:	d9400104 	addi	r5,sp,4
    a1a8:	8809883a 	mov	r4,r17
    a1ac:	803ee83a 	callr	r16
    a1b0:	003fe806 	br	a154 <__ram_exceptions_end+0xfbfe9f00>

0000a1b4 <__ascii_wctomb>:
    a1b4:	28000526 	beq	r5,zero,a1cc <__ascii_wctomb+0x18>
    a1b8:	00803fc4 	movi	r2,255
    a1bc:	11800536 	bltu	r2,r6,a1d4 <__ascii_wctomb+0x20>
    a1c0:	29800005 	stb	r6,0(r5)
    a1c4:	00800044 	movi	r2,1
    a1c8:	f800283a 	ret
    a1cc:	0005883a 	mov	r2,zero
    a1d0:	f800283a 	ret
    a1d4:	00802284 	movi	r2,138
    a1d8:	20800015 	stw	r2,0(r4)
    a1dc:	00bfffc4 	movi	r2,-1
    a1e0:	f800283a 	ret

0000a1e4 <_wctomb_r>:
    a1e4:	00800074 	movhi	r2,1
    a1e8:	defff904 	addi	sp,sp,-28
    a1ec:	1087af04 	addi	r2,r2,7868
    a1f0:	dfc00615 	stw	ra,24(sp)
    a1f4:	dc400515 	stw	r17,20(sp)
    a1f8:	dc000415 	stw	r16,16(sp)
    a1fc:	3823883a 	mov	r17,r7
    a200:	14000017 	ldw	r16,0(r2)
    a204:	d9000115 	stw	r4,4(sp)
    a208:	d9400215 	stw	r5,8(sp)
    a20c:	d9800315 	stw	r6,12(sp)
    a210:	00056580 	call	5658 <__locale_charset>
    a214:	d9800317 	ldw	r6,12(sp)
    a218:	d9400217 	ldw	r5,8(sp)
    a21c:	d9000117 	ldw	r4,4(sp)
    a220:	100f883a 	mov	r7,r2
    a224:	dc400015 	stw	r17,0(sp)
    a228:	803ee83a 	callr	r16
    a22c:	dfc00617 	ldw	ra,24(sp)
    a230:	dc400517 	ldw	r17,20(sp)
    a234:	dc000417 	ldw	r16,16(sp)
    a238:	dec00704 	addi	sp,sp,28
    a23c:	f800283a 	ret

0000a240 <__udivdi3>:
    a240:	defff504 	addi	sp,sp,-44
    a244:	dcc00415 	stw	r19,16(sp)
    a248:	dc000115 	stw	r16,4(sp)
    a24c:	dfc00a15 	stw	ra,40(sp)
    a250:	df000915 	stw	fp,36(sp)
    a254:	ddc00815 	stw	r23,32(sp)
    a258:	dd800715 	stw	r22,28(sp)
    a25c:	dd400615 	stw	r21,24(sp)
    a260:	dd000515 	stw	r20,20(sp)
    a264:	dc800315 	stw	r18,12(sp)
    a268:	dc400215 	stw	r17,8(sp)
    a26c:	2027883a 	mov	r19,r4
    a270:	2821883a 	mov	r16,r5
    a274:	3800411e 	bne	r7,zero,a37c <__udivdi3+0x13c>
    a278:	3023883a 	mov	r17,r6
    a27c:	2025883a 	mov	r18,r4
    a280:	2980522e 	bgeu	r5,r6,a3cc <__udivdi3+0x18c>
    a284:	00bfffd4 	movui	r2,65535
    a288:	282d883a 	mov	r22,r5
    a28c:	1180a836 	bltu	r2,r6,a530 <__udivdi3+0x2f0>
    a290:	00803fc4 	movi	r2,255
    a294:	1185803a 	cmpltu	r2,r2,r6
    a298:	100490fa 	slli	r2,r2,3
    a29c:	3086d83a 	srl	r3,r6,r2
    a2a0:	01000074 	movhi	r4,1
    a2a4:	2100b204 	addi	r4,r4,712
    a2a8:	20c7883a 	add	r3,r4,r3
    a2ac:	18c00003 	ldbu	r3,0(r3)
    a2b0:	1885883a 	add	r2,r3,r2
    a2b4:	00c00804 	movi	r3,32
    a2b8:	1887c83a 	sub	r3,r3,r2
    a2bc:	18000526 	beq	r3,zero,a2d4 <__udivdi3+0x94>
    a2c0:	80e0983a 	sll	r16,r16,r3
    a2c4:	9884d83a 	srl	r2,r19,r2
    a2c8:	30e2983a 	sll	r17,r6,r3
    a2cc:	98e4983a 	sll	r18,r19,r3
    a2d0:	142cb03a 	or	r22,r2,r16
    a2d4:	882ad43a 	srli	r21,r17,16
    a2d8:	b009883a 	mov	r4,r22
    a2dc:	8d3fffcc 	andi	r20,r17,65535
    a2e0:	a80b883a 	mov	r5,r21
    a2e4:	0000c680 	call	c68 <__umodsi3>
    a2e8:	b009883a 	mov	r4,r22
    a2ec:	a80b883a 	mov	r5,r21
    a2f0:	1027883a 	mov	r19,r2
    a2f4:	0000c040 	call	c04 <__udivsi3>
    a2f8:	102d883a 	mov	r22,r2
    a2fc:	9826943a 	slli	r19,r19,16
    a300:	9004d43a 	srli	r2,r18,16
    a304:	a5a1383a 	mul	r16,r20,r22
    a308:	14c4b03a 	or	r2,r2,r19
    a30c:	1400052e 	bgeu	r2,r16,a324 <__udivdi3+0xe4>
    a310:	1445883a 	add	r2,r2,r17
    a314:	b0ffffc4 	addi	r3,r22,-1
    a318:	14400136 	bltu	r2,r17,a320 <__udivdi3+0xe0>
    a31c:	14012336 	bltu	r2,r16,a7ac <__udivdi3+0x56c>
    a320:	182d883a 	mov	r22,r3
    a324:	1421c83a 	sub	r16,r2,r16
    a328:	a80b883a 	mov	r5,r21
    a32c:	8009883a 	mov	r4,r16
    a330:	0000c680 	call	c68 <__umodsi3>
    a334:	1027883a 	mov	r19,r2
    a338:	a80b883a 	mov	r5,r21
    a33c:	8009883a 	mov	r4,r16
    a340:	0000c040 	call	c04 <__udivsi3>
    a344:	9826943a 	slli	r19,r19,16
    a348:	a0a9383a 	mul	r20,r20,r2
    a34c:	94bfffcc 	andi	r18,r18,65535
    a350:	94e4b03a 	or	r18,r18,r19
    a354:	9500052e 	bgeu	r18,r20,a36c <__udivdi3+0x12c>
    a358:	8ca5883a 	add	r18,r17,r18
    a35c:	10ffffc4 	addi	r3,r2,-1
    a360:	9440f136 	bltu	r18,r17,a728 <__udivdi3+0x4e8>
    a364:	9500f02e 	bgeu	r18,r20,a728 <__udivdi3+0x4e8>
    a368:	10bfff84 	addi	r2,r2,-2
    a36c:	b00c943a 	slli	r6,r22,16
    a370:	0007883a 	mov	r3,zero
    a374:	3084b03a 	or	r2,r6,r2
    a378:	00005906 	br	a4e0 <__udivdi3+0x2a0>
    a37c:	29c05636 	bltu	r5,r7,a4d8 <__udivdi3+0x298>
    a380:	00bfffd4 	movui	r2,65535
    a384:	11c0622e 	bgeu	r2,r7,a510 <__udivdi3+0x2d0>
    a388:	00804034 	movhi	r2,256
    a38c:	10bfffc4 	addi	r2,r2,-1
    a390:	11c0ee36 	bltu	r2,r7,a74c <__udivdi3+0x50c>
    a394:	00800404 	movi	r2,16
    a398:	3886d83a 	srl	r3,r7,r2
    a39c:	01000074 	movhi	r4,1
    a3a0:	2100b204 	addi	r4,r4,712
    a3a4:	20c7883a 	add	r3,r4,r3
    a3a8:	18c00003 	ldbu	r3,0(r3)
    a3ac:	05400804 	movi	r21,32
    a3b0:	1885883a 	add	r2,r3,r2
    a3b4:	a8abc83a 	sub	r21,r21,r2
    a3b8:	a800621e 	bne	r21,zero,a544 <__udivdi3+0x304>
    a3bc:	3c00e936 	bltu	r7,r16,a764 <__udivdi3+0x524>
    a3c0:	9985403a 	cmpgeu	r2,r19,r6
    a3c4:	0007883a 	mov	r3,zero
    a3c8:	00004506 	br	a4e0 <__udivdi3+0x2a0>
    a3cc:	3000041e 	bne	r6,zero,a3e0 <__udivdi3+0x1a0>
    a3d0:	000b883a 	mov	r5,zero
    a3d4:	01000044 	movi	r4,1
    a3d8:	0000c040 	call	c04 <__udivsi3>
    a3dc:	1023883a 	mov	r17,r2
    a3e0:	00bfffd4 	movui	r2,65535
    a3e4:	14404e2e 	bgeu	r2,r17,a520 <__udivdi3+0x2e0>
    a3e8:	00804034 	movhi	r2,256
    a3ec:	10bfffc4 	addi	r2,r2,-1
    a3f0:	1440d836 	bltu	r2,r17,a754 <__udivdi3+0x514>
    a3f4:	00800404 	movi	r2,16
    a3f8:	8886d83a 	srl	r3,r17,r2
    a3fc:	01000074 	movhi	r4,1
    a400:	2100b204 	addi	r4,r4,712
    a404:	20c7883a 	add	r3,r4,r3
    a408:	18c00003 	ldbu	r3,0(r3)
    a40c:	1885883a 	add	r2,r3,r2
    a410:	00c00804 	movi	r3,32
    a414:	1887c83a 	sub	r3,r3,r2
    a418:	18008f1e 	bne	r3,zero,a658 <__udivdi3+0x418>
    a41c:	882ad43a 	srli	r21,r17,16
    a420:	8461c83a 	sub	r16,r16,r17
    a424:	8d3fffcc 	andi	r20,r17,65535
    a428:	00c00044 	movi	r3,1
    a42c:	8009883a 	mov	r4,r16
    a430:	a80b883a 	mov	r5,r21
    a434:	d8c00015 	stw	r3,0(sp)
    a438:	0000c680 	call	c68 <__umodsi3>
    a43c:	8009883a 	mov	r4,r16
    a440:	a80b883a 	mov	r5,r21
    a444:	1027883a 	mov	r19,r2
    a448:	0000c040 	call	c04 <__udivsi3>
    a44c:	9826943a 	slli	r19,r19,16
    a450:	9008d43a 	srli	r4,r18,16
    a454:	1521383a 	mul	r16,r2,r20
    a458:	102d883a 	mov	r22,r2
    a45c:	24c8b03a 	or	r4,r4,r19
    a460:	d8c00017 	ldw	r3,0(sp)
    a464:	2400052e 	bgeu	r4,r16,a47c <__udivdi3+0x23c>
    a468:	2449883a 	add	r4,r4,r17
    a46c:	b0bfffc4 	addi	r2,r22,-1
    a470:	24400136 	bltu	r4,r17,a478 <__udivdi3+0x238>
    a474:	2400ca36 	bltu	r4,r16,a7a0 <__udivdi3+0x560>
    a478:	102d883a 	mov	r22,r2
    a47c:	2421c83a 	sub	r16,r4,r16
    a480:	a80b883a 	mov	r5,r21
    a484:	8009883a 	mov	r4,r16
    a488:	d8c00015 	stw	r3,0(sp)
    a48c:	0000c680 	call	c68 <__umodsi3>
    a490:	1027883a 	mov	r19,r2
    a494:	a80b883a 	mov	r5,r21
    a498:	8009883a 	mov	r4,r16
    a49c:	0000c040 	call	c04 <__udivsi3>
    a4a0:	9826943a 	slli	r19,r19,16
    a4a4:	1529383a 	mul	r20,r2,r20
    a4a8:	94bfffcc 	andi	r18,r18,65535
    a4ac:	94e4b03a 	or	r18,r18,r19
    a4b0:	d8c00017 	ldw	r3,0(sp)
    a4b4:	9500052e 	bgeu	r18,r20,a4cc <__udivdi3+0x28c>
    a4b8:	8ca5883a 	add	r18,r17,r18
    a4bc:	113fffc4 	addi	r4,r2,-1
    a4c0:	94409736 	bltu	r18,r17,a720 <__udivdi3+0x4e0>
    a4c4:	9500962e 	bgeu	r18,r20,a720 <__udivdi3+0x4e0>
    a4c8:	10bfff84 	addi	r2,r2,-2
    a4cc:	b00c943a 	slli	r6,r22,16
    a4d0:	3084b03a 	or	r2,r6,r2
    a4d4:	00000206 	br	a4e0 <__udivdi3+0x2a0>
    a4d8:	0007883a 	mov	r3,zero
    a4dc:	0005883a 	mov	r2,zero
    a4e0:	dfc00a17 	ldw	ra,40(sp)
    a4e4:	df000917 	ldw	fp,36(sp)
    a4e8:	ddc00817 	ldw	r23,32(sp)
    a4ec:	dd800717 	ldw	r22,28(sp)
    a4f0:	dd400617 	ldw	r21,24(sp)
    a4f4:	dd000517 	ldw	r20,20(sp)
    a4f8:	dcc00417 	ldw	r19,16(sp)
    a4fc:	dc800317 	ldw	r18,12(sp)
    a500:	dc400217 	ldw	r17,8(sp)
    a504:	dc000117 	ldw	r16,4(sp)
    a508:	dec00b04 	addi	sp,sp,44
    a50c:	f800283a 	ret
    a510:	00803fc4 	movi	r2,255
    a514:	11c5803a 	cmpltu	r2,r2,r7
    a518:	100490fa 	slli	r2,r2,3
    a51c:	003f9e06 	br	a398 <__ram_exceptions_end+0xfbfea144>
    a520:	00803fc4 	movi	r2,255
    a524:	1445803a 	cmpltu	r2,r2,r17
    a528:	100490fa 	slli	r2,r2,3
    a52c:	003fb206 	br	a3f8 <__ram_exceptions_end+0xfbfea1a4>
    a530:	00804034 	movhi	r2,256
    a534:	10bfffc4 	addi	r2,r2,-1
    a538:	11808836 	bltu	r2,r6,a75c <__udivdi3+0x51c>
    a53c:	00800404 	movi	r2,16
    a540:	003f5606 	br	a29c <__ram_exceptions_end+0xfbfea048>
    a544:	30aed83a 	srl	r23,r6,r2
    a548:	3d4e983a 	sll	r7,r7,r21
    a54c:	80acd83a 	srl	r22,r16,r2
    a550:	9884d83a 	srl	r2,r19,r2
    a554:	3deeb03a 	or	r23,r7,r23
    a558:	b824d43a 	srli	r18,r23,16
    a55c:	8560983a 	sll	r16,r16,r21
    a560:	b009883a 	mov	r4,r22
    a564:	900b883a 	mov	r5,r18
    a568:	3568983a 	sll	r20,r6,r21
    a56c:	1420b03a 	or	r16,r2,r16
    a570:	0000c680 	call	c68 <__umodsi3>
    a574:	b009883a 	mov	r4,r22
    a578:	900b883a 	mov	r5,r18
    a57c:	1023883a 	mov	r17,r2
    a580:	0000c040 	call	c04 <__udivsi3>
    a584:	8808943a 	slli	r4,r17,16
    a588:	bf3fffcc 	andi	fp,r23,65535
    a58c:	8006d43a 	srli	r3,r16,16
    a590:	e0a3383a 	mul	r17,fp,r2
    a594:	100d883a 	mov	r6,r2
    a598:	1906b03a 	or	r3,r3,r4
    a59c:	1c40042e 	bgeu	r3,r17,a5b0 <__udivdi3+0x370>
    a5a0:	1dc7883a 	add	r3,r3,r23
    a5a4:	10bfffc4 	addi	r2,r2,-1
    a5a8:	1dc0752e 	bgeu	r3,r23,a780 <__udivdi3+0x540>
    a5ac:	100d883a 	mov	r6,r2
    a5b0:	1c63c83a 	sub	r17,r3,r17
    a5b4:	900b883a 	mov	r5,r18
    a5b8:	8809883a 	mov	r4,r17
    a5bc:	d9800015 	stw	r6,0(sp)
    a5c0:	0000c680 	call	c68 <__umodsi3>
    a5c4:	102d883a 	mov	r22,r2
    a5c8:	8809883a 	mov	r4,r17
    a5cc:	900b883a 	mov	r5,r18
    a5d0:	0000c040 	call	c04 <__udivsi3>
    a5d4:	b02c943a 	slli	r22,r22,16
    a5d8:	e089383a 	mul	r4,fp,r2
    a5dc:	843fffcc 	andi	r16,r16,65535
    a5e0:	85a0b03a 	or	r16,r16,r22
    a5e4:	d9800017 	ldw	r6,0(sp)
    a5e8:	8100042e 	bgeu	r16,r4,a5fc <__udivdi3+0x3bc>
    a5ec:	85e1883a 	add	r16,r16,r23
    a5f0:	10ffffc4 	addi	r3,r2,-1
    a5f4:	85c05e2e 	bgeu	r16,r23,a770 <__udivdi3+0x530>
    a5f8:	1805883a 	mov	r2,r3
    a5fc:	300c943a 	slli	r6,r6,16
    a600:	a17fffcc 	andi	r5,r20,65535
    a604:	a028d43a 	srli	r20,r20,16
    a608:	3084b03a 	or	r2,r6,r2
    a60c:	10ffffcc 	andi	r3,r2,65535
    a610:	100cd43a 	srli	r6,r2,16
    a614:	194f383a 	mul	r7,r3,r5
    a618:	1d07383a 	mul	r3,r3,r20
    a61c:	314b383a 	mul	r5,r6,r5
    a620:	3810d43a 	srli	r8,r7,16
    a624:	8121c83a 	sub	r16,r16,r4
    a628:	1947883a 	add	r3,r3,r5
    a62c:	40c7883a 	add	r3,r8,r3
    a630:	350d383a 	mul	r6,r6,r20
    a634:	1940022e 	bgeu	r3,r5,a640 <__udivdi3+0x400>
    a638:	01000074 	movhi	r4,1
    a63c:	310d883a 	add	r6,r6,r4
    a640:	1828d43a 	srli	r20,r3,16
    a644:	a18d883a 	add	r6,r20,r6
    a648:	81803e36 	bltu	r16,r6,a744 <__udivdi3+0x504>
    a64c:	81803826 	beq	r16,r6,a730 <__udivdi3+0x4f0>
    a650:	0007883a 	mov	r3,zero
    a654:	003fa206 	br	a4e0 <__ram_exceptions_end+0xfbfea28c>
    a658:	88e2983a 	sll	r17,r17,r3
    a65c:	80a8d83a 	srl	r20,r16,r2
    a660:	80e0983a 	sll	r16,r16,r3
    a664:	882ad43a 	srli	r21,r17,16
    a668:	9884d83a 	srl	r2,r19,r2
    a66c:	a009883a 	mov	r4,r20
    a670:	a80b883a 	mov	r5,r21
    a674:	142eb03a 	or	r23,r2,r16
    a678:	98e4983a 	sll	r18,r19,r3
    a67c:	0000c680 	call	c68 <__umodsi3>
    a680:	a009883a 	mov	r4,r20
    a684:	a80b883a 	mov	r5,r21
    a688:	1021883a 	mov	r16,r2
    a68c:	0000c040 	call	c04 <__udivsi3>
    a690:	1039883a 	mov	fp,r2
    a694:	8d3fffcc 	andi	r20,r17,65535
    a698:	8020943a 	slli	r16,r16,16
    a69c:	b804d43a 	srli	r2,r23,16
    a6a0:	a72d383a 	mul	r22,r20,fp
    a6a4:	1404b03a 	or	r2,r2,r16
    a6a8:	1580062e 	bgeu	r2,r22,a6c4 <__udivdi3+0x484>
    a6ac:	1445883a 	add	r2,r2,r17
    a6b0:	e0ffffc4 	addi	r3,fp,-1
    a6b4:	14403836 	bltu	r2,r17,a798 <__udivdi3+0x558>
    a6b8:	1580372e 	bgeu	r2,r22,a798 <__udivdi3+0x558>
    a6bc:	e73fff84 	addi	fp,fp,-2
    a6c0:	1445883a 	add	r2,r2,r17
    a6c4:	15adc83a 	sub	r22,r2,r22
    a6c8:	a80b883a 	mov	r5,r21
    a6cc:	b009883a 	mov	r4,r22
    a6d0:	0000c680 	call	c68 <__umodsi3>
    a6d4:	1027883a 	mov	r19,r2
    a6d8:	b009883a 	mov	r4,r22
    a6dc:	a80b883a 	mov	r5,r21
    a6e0:	0000c040 	call	c04 <__udivsi3>
    a6e4:	9826943a 	slli	r19,r19,16
    a6e8:	a0a1383a 	mul	r16,r20,r2
    a6ec:	b93fffcc 	andi	r4,r23,65535
    a6f0:	24c8b03a 	or	r4,r4,r19
    a6f4:	2400062e 	bgeu	r4,r16,a710 <__udivdi3+0x4d0>
    a6f8:	2449883a 	add	r4,r4,r17
    a6fc:	10ffffc4 	addi	r3,r2,-1
    a700:	24402336 	bltu	r4,r17,a790 <__udivdi3+0x550>
    a704:	2400222e 	bgeu	r4,r16,a790 <__udivdi3+0x550>
    a708:	10bfff84 	addi	r2,r2,-2
    a70c:	2449883a 	add	r4,r4,r17
    a710:	e038943a 	slli	fp,fp,16
    a714:	2421c83a 	sub	r16,r4,r16
    a718:	e086b03a 	or	r3,fp,r2
    a71c:	003f4306 	br	a42c <__ram_exceptions_end+0xfbfea1d8>
    a720:	2005883a 	mov	r2,r4
    a724:	003f6906 	br	a4cc <__ram_exceptions_end+0xfbfea278>
    a728:	1805883a 	mov	r2,r3
    a72c:	003f0f06 	br	a36c <__ram_exceptions_end+0xfbfea118>
    a730:	1806943a 	slli	r3,r3,16
    a734:	9d66983a 	sll	r19,r19,r21
    a738:	39ffffcc 	andi	r7,r7,65535
    a73c:	19c7883a 	add	r3,r3,r7
    a740:	98ffc32e 	bgeu	r19,r3,a650 <__ram_exceptions_end+0xfbfea3fc>
    a744:	10bfffc4 	addi	r2,r2,-1
    a748:	003fc106 	br	a650 <__ram_exceptions_end+0xfbfea3fc>
    a74c:	00800604 	movi	r2,24
    a750:	003f1106 	br	a398 <__ram_exceptions_end+0xfbfea144>
    a754:	00800604 	movi	r2,24
    a758:	003f2706 	br	a3f8 <__ram_exceptions_end+0xfbfea1a4>
    a75c:	00800604 	movi	r2,24
    a760:	003ece06 	br	a29c <__ram_exceptions_end+0xfbfea048>
    a764:	0007883a 	mov	r3,zero
    a768:	00800044 	movi	r2,1
    a76c:	003f5c06 	br	a4e0 <__ram_exceptions_end+0xfbfea28c>
    a770:	813fa12e 	bgeu	r16,r4,a5f8 <__ram_exceptions_end+0xfbfea3a4>
    a774:	10bfff84 	addi	r2,r2,-2
    a778:	85e1883a 	add	r16,r16,r23
    a77c:	003f9f06 	br	a5fc <__ram_exceptions_end+0xfbfea3a8>
    a780:	1c7f8a2e 	bgeu	r3,r17,a5ac <__ram_exceptions_end+0xfbfea358>
    a784:	31bfff84 	addi	r6,r6,-2
    a788:	1dc7883a 	add	r3,r3,r23
    a78c:	003f8806 	br	a5b0 <__ram_exceptions_end+0xfbfea35c>
    a790:	1805883a 	mov	r2,r3
    a794:	003fde06 	br	a710 <__ram_exceptions_end+0xfbfea4bc>
    a798:	1839883a 	mov	fp,r3
    a79c:	003fc906 	br	a6c4 <__ram_exceptions_end+0xfbfea470>
    a7a0:	b5bfff84 	addi	r22,r22,-2
    a7a4:	2449883a 	add	r4,r4,r17
    a7a8:	003f3406 	br	a47c <__ram_exceptions_end+0xfbfea228>
    a7ac:	b5bfff84 	addi	r22,r22,-2
    a7b0:	1445883a 	add	r2,r2,r17
    a7b4:	003edb06 	br	a324 <__ram_exceptions_end+0xfbfea0d0>

0000a7b8 <__umoddi3>:
    a7b8:	defff404 	addi	sp,sp,-48
    a7bc:	df000a15 	stw	fp,40(sp)
    a7c0:	dc400315 	stw	r17,12(sp)
    a7c4:	dc000215 	stw	r16,8(sp)
    a7c8:	dfc00b15 	stw	ra,44(sp)
    a7cc:	ddc00915 	stw	r23,36(sp)
    a7d0:	dd800815 	stw	r22,32(sp)
    a7d4:	dd400715 	stw	r21,28(sp)
    a7d8:	dd000615 	stw	r20,24(sp)
    a7dc:	dcc00515 	stw	r19,20(sp)
    a7e0:	dc800415 	stw	r18,16(sp)
    a7e4:	2021883a 	mov	r16,r4
    a7e8:	2823883a 	mov	r17,r5
    a7ec:	2839883a 	mov	fp,r5
    a7f0:	38003c1e 	bne	r7,zero,a8e4 <__umoddi3+0x12c>
    a7f4:	3027883a 	mov	r19,r6
    a7f8:	2029883a 	mov	r20,r4
    a7fc:	2980512e 	bgeu	r5,r6,a944 <__umoddi3+0x18c>
    a800:	00bfffd4 	movui	r2,65535
    a804:	11809a36 	bltu	r2,r6,aa70 <__umoddi3+0x2b8>
    a808:	01003fc4 	movi	r4,255
    a80c:	2189803a 	cmpltu	r4,r4,r6
    a810:	200890fa 	slli	r4,r4,3
    a814:	3104d83a 	srl	r2,r6,r4
    a818:	00c00074 	movhi	r3,1
    a81c:	18c0b204 	addi	r3,r3,712
    a820:	1885883a 	add	r2,r3,r2
    a824:	10c00003 	ldbu	r3,0(r2)
    a828:	00800804 	movi	r2,32
    a82c:	1909883a 	add	r4,r3,r4
    a830:	1125c83a 	sub	r18,r2,r4
    a834:	90000526 	beq	r18,zero,a84c <__umoddi3+0x94>
    a838:	8ca2983a 	sll	r17,r17,r18
    a83c:	8108d83a 	srl	r4,r16,r4
    a840:	34a6983a 	sll	r19,r6,r18
    a844:	84a8983a 	sll	r20,r16,r18
    a848:	2478b03a 	or	fp,r4,r17
    a84c:	982ed43a 	srli	r23,r19,16
    a850:	e009883a 	mov	r4,fp
    a854:	9dbfffcc 	andi	r22,r19,65535
    a858:	b80b883a 	mov	r5,r23
    a85c:	0000c680 	call	c68 <__umodsi3>
    a860:	e009883a 	mov	r4,fp
    a864:	b80b883a 	mov	r5,r23
    a868:	102b883a 	mov	r21,r2
    a86c:	0000c040 	call	c04 <__udivsi3>
    a870:	a806943a 	slli	r3,r21,16
    a874:	a008d43a 	srli	r4,r20,16
    a878:	b085383a 	mul	r2,r22,r2
    a87c:	20c8b03a 	or	r4,r4,r3
    a880:	2080032e 	bgeu	r4,r2,a890 <__umoddi3+0xd8>
    a884:	24c9883a 	add	r4,r4,r19
    a888:	24c00136 	bltu	r4,r19,a890 <__umoddi3+0xd8>
    a88c:	20811036 	bltu	r4,r2,acd0 <__umoddi3+0x518>
    a890:	20abc83a 	sub	r21,r4,r2
    a894:	b80b883a 	mov	r5,r23
    a898:	a809883a 	mov	r4,r21
    a89c:	0000c680 	call	c68 <__umodsi3>
    a8a0:	1023883a 	mov	r17,r2
    a8a4:	b80b883a 	mov	r5,r23
    a8a8:	a809883a 	mov	r4,r21
    a8ac:	0000c040 	call	c04 <__udivsi3>
    a8b0:	8822943a 	slli	r17,r17,16
    a8b4:	b085383a 	mul	r2,r22,r2
    a8b8:	a0ffffcc 	andi	r3,r20,65535
    a8bc:	1c46b03a 	or	r3,r3,r17
    a8c0:	1880042e 	bgeu	r3,r2,a8d4 <__umoddi3+0x11c>
    a8c4:	1cc7883a 	add	r3,r3,r19
    a8c8:	1cc00236 	bltu	r3,r19,a8d4 <__umoddi3+0x11c>
    a8cc:	1880012e 	bgeu	r3,r2,a8d4 <__umoddi3+0x11c>
    a8d0:	1cc7883a 	add	r3,r3,r19
    a8d4:	1885c83a 	sub	r2,r3,r2
    a8d8:	1484d83a 	srl	r2,r2,r18
    a8dc:	0007883a 	mov	r3,zero
    a8e0:	00004f06 	br	aa20 <__umoddi3+0x268>
    a8e4:	29c04c36 	bltu	r5,r7,aa18 <__umoddi3+0x260>
    a8e8:	00bfffd4 	movui	r2,65535
    a8ec:	11c0582e 	bgeu	r2,r7,aa50 <__umoddi3+0x298>
    a8f0:	00804034 	movhi	r2,256
    a8f4:	10bfffc4 	addi	r2,r2,-1
    a8f8:	11c0e736 	bltu	r2,r7,ac98 <__umoddi3+0x4e0>
    a8fc:	01000404 	movi	r4,16
    a900:	3904d83a 	srl	r2,r7,r4
    a904:	00c00074 	movhi	r3,1
    a908:	18c0b204 	addi	r3,r3,712
    a90c:	1885883a 	add	r2,r3,r2
    a910:	14c00003 	ldbu	r19,0(r2)
    a914:	00c00804 	movi	r3,32
    a918:	9927883a 	add	r19,r19,r4
    a91c:	1ce9c83a 	sub	r20,r3,r19
    a920:	a000581e 	bne	r20,zero,aa84 <__umoddi3+0x2cc>
    a924:	3c400136 	bltu	r7,r17,a92c <__umoddi3+0x174>
    a928:	8180eb36 	bltu	r16,r6,acd8 <__umoddi3+0x520>
    a92c:	8185c83a 	sub	r2,r16,r6
    a930:	89e3c83a 	sub	r17,r17,r7
    a934:	8089803a 	cmpltu	r4,r16,r2
    a938:	8939c83a 	sub	fp,r17,r4
    a93c:	e007883a 	mov	r3,fp
    a940:	00003706 	br	aa20 <__umoddi3+0x268>
    a944:	3000041e 	bne	r6,zero,a958 <__umoddi3+0x1a0>
    a948:	000b883a 	mov	r5,zero
    a94c:	01000044 	movi	r4,1
    a950:	0000c040 	call	c04 <__udivsi3>
    a954:	1027883a 	mov	r19,r2
    a958:	00bfffd4 	movui	r2,65535
    a95c:	14c0402e 	bgeu	r2,r19,aa60 <__umoddi3+0x2a8>
    a960:	00804034 	movhi	r2,256
    a964:	10bfffc4 	addi	r2,r2,-1
    a968:	14c0cd36 	bltu	r2,r19,aca0 <__umoddi3+0x4e8>
    a96c:	00800404 	movi	r2,16
    a970:	9886d83a 	srl	r3,r19,r2
    a974:	01000074 	movhi	r4,1
    a978:	2100b204 	addi	r4,r4,712
    a97c:	20c7883a 	add	r3,r4,r3
    a980:	18c00003 	ldbu	r3,0(r3)
    a984:	1887883a 	add	r3,r3,r2
    a988:	00800804 	movi	r2,32
    a98c:	10e5c83a 	sub	r18,r2,r3
    a990:	9000901e 	bne	r18,zero,abd4 <__umoddi3+0x41c>
    a994:	982cd43a 	srli	r22,r19,16
    a998:	8ce3c83a 	sub	r17,r17,r19
    a99c:	9d7fffcc 	andi	r21,r19,65535
    a9a0:	b00b883a 	mov	r5,r22
    a9a4:	8809883a 	mov	r4,r17
    a9a8:	0000c680 	call	c68 <__umodsi3>
    a9ac:	8809883a 	mov	r4,r17
    a9b0:	b00b883a 	mov	r5,r22
    a9b4:	1021883a 	mov	r16,r2
    a9b8:	0000c040 	call	c04 <__udivsi3>
    a9bc:	8006943a 	slli	r3,r16,16
    a9c0:	a008d43a 	srli	r4,r20,16
    a9c4:	1545383a 	mul	r2,r2,r21
    a9c8:	20c8b03a 	or	r4,r4,r3
    a9cc:	2080042e 	bgeu	r4,r2,a9e0 <__umoddi3+0x228>
    a9d0:	24c9883a 	add	r4,r4,r19
    a9d4:	24c00236 	bltu	r4,r19,a9e0 <__umoddi3+0x228>
    a9d8:	2080012e 	bgeu	r4,r2,a9e0 <__umoddi3+0x228>
    a9dc:	24c9883a 	add	r4,r4,r19
    a9e0:	20a1c83a 	sub	r16,r4,r2
    a9e4:	b00b883a 	mov	r5,r22
    a9e8:	8009883a 	mov	r4,r16
    a9ec:	0000c680 	call	c68 <__umodsi3>
    a9f0:	1023883a 	mov	r17,r2
    a9f4:	b00b883a 	mov	r5,r22
    a9f8:	8009883a 	mov	r4,r16
    a9fc:	0000c040 	call	c04 <__udivsi3>
    aa00:	8822943a 	slli	r17,r17,16
    aa04:	1545383a 	mul	r2,r2,r21
    aa08:	a53fffcc 	andi	r20,r20,65535
    aa0c:	a446b03a 	or	r3,r20,r17
    aa10:	18bfb02e 	bgeu	r3,r2,a8d4 <__ram_exceptions_end+0xfbfea680>
    aa14:	003fab06 	br	a8c4 <__ram_exceptions_end+0xfbfea670>
    aa18:	2005883a 	mov	r2,r4
    aa1c:	2807883a 	mov	r3,r5
    aa20:	dfc00b17 	ldw	ra,44(sp)
    aa24:	df000a17 	ldw	fp,40(sp)
    aa28:	ddc00917 	ldw	r23,36(sp)
    aa2c:	dd800817 	ldw	r22,32(sp)
    aa30:	dd400717 	ldw	r21,28(sp)
    aa34:	dd000617 	ldw	r20,24(sp)
    aa38:	dcc00517 	ldw	r19,20(sp)
    aa3c:	dc800417 	ldw	r18,16(sp)
    aa40:	dc400317 	ldw	r17,12(sp)
    aa44:	dc000217 	ldw	r16,8(sp)
    aa48:	dec00c04 	addi	sp,sp,48
    aa4c:	f800283a 	ret
    aa50:	04c03fc4 	movi	r19,255
    aa54:	99c9803a 	cmpltu	r4,r19,r7
    aa58:	200890fa 	slli	r4,r4,3
    aa5c:	003fa806 	br	a900 <__ram_exceptions_end+0xfbfea6ac>
    aa60:	00803fc4 	movi	r2,255
    aa64:	14c5803a 	cmpltu	r2,r2,r19
    aa68:	100490fa 	slli	r2,r2,3
    aa6c:	003fc006 	br	a970 <__ram_exceptions_end+0xfbfea71c>
    aa70:	00804034 	movhi	r2,256
    aa74:	10bfffc4 	addi	r2,r2,-1
    aa78:	11808b36 	bltu	r2,r6,aca8 <__umoddi3+0x4f0>
    aa7c:	01000404 	movi	r4,16
    aa80:	003f6406 	br	a814 <__ram_exceptions_end+0xfbfea5c0>
    aa84:	34c4d83a 	srl	r2,r6,r19
    aa88:	3d0e983a 	sll	r7,r7,r20
    aa8c:	8cf8d83a 	srl	fp,r17,r19
    aa90:	8d10983a 	sll	r8,r17,r20
    aa94:	38aab03a 	or	r21,r7,r2
    aa98:	a82cd43a 	srli	r22,r21,16
    aa9c:	84e2d83a 	srl	r17,r16,r19
    aaa0:	e009883a 	mov	r4,fp
    aaa4:	b00b883a 	mov	r5,r22
    aaa8:	8a22b03a 	or	r17,r17,r8
    aaac:	3524983a 	sll	r18,r6,r20
    aab0:	0000c680 	call	c68 <__umodsi3>
    aab4:	e009883a 	mov	r4,fp
    aab8:	b00b883a 	mov	r5,r22
    aabc:	102f883a 	mov	r23,r2
    aac0:	0000c040 	call	c04 <__udivsi3>
    aac4:	100d883a 	mov	r6,r2
    aac8:	b808943a 	slli	r4,r23,16
    aacc:	aa3fffcc 	andi	r8,r21,65535
    aad0:	8804d43a 	srli	r2,r17,16
    aad4:	41af383a 	mul	r23,r8,r6
    aad8:	8520983a 	sll	r16,r16,r20
    aadc:	1104b03a 	or	r2,r2,r4
    aae0:	15c0042e 	bgeu	r2,r23,aaf4 <__umoddi3+0x33c>
    aae4:	1545883a 	add	r2,r2,r21
    aae8:	30ffffc4 	addi	r3,r6,-1
    aaec:	1540742e 	bgeu	r2,r21,acc0 <__umoddi3+0x508>
    aaf0:	180d883a 	mov	r6,r3
    aaf4:	15efc83a 	sub	r23,r2,r23
    aaf8:	b00b883a 	mov	r5,r22
    aafc:	b809883a 	mov	r4,r23
    ab00:	d9800115 	stw	r6,4(sp)
    ab04:	da000015 	stw	r8,0(sp)
    ab08:	0000c680 	call	c68 <__umodsi3>
    ab0c:	b00b883a 	mov	r5,r22
    ab10:	b809883a 	mov	r4,r23
    ab14:	1039883a 	mov	fp,r2
    ab18:	0000c040 	call	c04 <__udivsi3>
    ab1c:	da000017 	ldw	r8,0(sp)
    ab20:	e038943a 	slli	fp,fp,16
    ab24:	100b883a 	mov	r5,r2
    ab28:	4089383a 	mul	r4,r8,r2
    ab2c:	8a3fffcc 	andi	r8,r17,65535
    ab30:	4710b03a 	or	r8,r8,fp
    ab34:	d9800117 	ldw	r6,4(sp)
    ab38:	4100042e 	bgeu	r8,r4,ab4c <__umoddi3+0x394>
    ab3c:	4551883a 	add	r8,r8,r21
    ab40:	10bfffc4 	addi	r2,r2,-1
    ab44:	45405a2e 	bgeu	r8,r21,acb0 <__umoddi3+0x4f8>
    ab48:	100b883a 	mov	r5,r2
    ab4c:	300c943a 	slli	r6,r6,16
    ab50:	91ffffcc 	andi	r7,r18,65535
    ab54:	9004d43a 	srli	r2,r18,16
    ab58:	314cb03a 	or	r6,r6,r5
    ab5c:	317fffcc 	andi	r5,r6,65535
    ab60:	300cd43a 	srli	r6,r6,16
    ab64:	29d3383a 	mul	r9,r5,r7
    ab68:	288b383a 	mul	r5,r5,r2
    ab6c:	31cf383a 	mul	r7,r6,r7
    ab70:	4806d43a 	srli	r3,r9,16
    ab74:	4111c83a 	sub	r8,r8,r4
    ab78:	29cb883a 	add	r5,r5,r7
    ab7c:	194b883a 	add	r5,r3,r5
    ab80:	3085383a 	mul	r2,r6,r2
    ab84:	29c0022e 	bgeu	r5,r7,ab90 <__umoddi3+0x3d8>
    ab88:	00c00074 	movhi	r3,1
    ab8c:	10c5883a 	add	r2,r2,r3
    ab90:	2808d43a 	srli	r4,r5,16
    ab94:	280a943a 	slli	r5,r5,16
    ab98:	4a7fffcc 	andi	r9,r9,65535
    ab9c:	2085883a 	add	r2,r4,r2
    aba0:	2a4b883a 	add	r5,r5,r9
    aba4:	40803636 	bltu	r8,r2,ac80 <__umoddi3+0x4c8>
    aba8:	40804d26 	beq	r8,r2,ace0 <__umoddi3+0x528>
    abac:	4089c83a 	sub	r4,r8,r2
    abb0:	280f883a 	mov	r7,r5
    abb4:	81cfc83a 	sub	r7,r16,r7
    abb8:	81c7803a 	cmpltu	r3,r16,r7
    abbc:	20c7c83a 	sub	r3,r4,r3
    abc0:	1cc4983a 	sll	r2,r3,r19
    abc4:	3d0ed83a 	srl	r7,r7,r20
    abc8:	1d06d83a 	srl	r3,r3,r20
    abcc:	11c4b03a 	or	r2,r2,r7
    abd0:	003f9306 	br	aa20 <__ram_exceptions_end+0xfbfea7cc>
    abd4:	9ca6983a 	sll	r19,r19,r18
    abd8:	88e8d83a 	srl	r20,r17,r3
    abdc:	80c4d83a 	srl	r2,r16,r3
    abe0:	982cd43a 	srli	r22,r19,16
    abe4:	8ca2983a 	sll	r17,r17,r18
    abe8:	a009883a 	mov	r4,r20
    abec:	b00b883a 	mov	r5,r22
    abf0:	1478b03a 	or	fp,r2,r17
    abf4:	0000c680 	call	c68 <__umodsi3>
    abf8:	a009883a 	mov	r4,r20
    abfc:	b00b883a 	mov	r5,r22
    ac00:	1023883a 	mov	r17,r2
    ac04:	0000c040 	call	c04 <__udivsi3>
    ac08:	9d7fffcc 	andi	r21,r19,65535
    ac0c:	880a943a 	slli	r5,r17,16
    ac10:	e008d43a 	srli	r4,fp,16
    ac14:	a885383a 	mul	r2,r21,r2
    ac18:	84a8983a 	sll	r20,r16,r18
    ac1c:	2148b03a 	or	r4,r4,r5
    ac20:	2080042e 	bgeu	r4,r2,ac34 <__umoddi3+0x47c>
    ac24:	24c9883a 	add	r4,r4,r19
    ac28:	24c00236 	bltu	r4,r19,ac34 <__umoddi3+0x47c>
    ac2c:	2080012e 	bgeu	r4,r2,ac34 <__umoddi3+0x47c>
    ac30:	24c9883a 	add	r4,r4,r19
    ac34:	20a3c83a 	sub	r17,r4,r2
    ac38:	b00b883a 	mov	r5,r22
    ac3c:	8809883a 	mov	r4,r17
    ac40:	0000c680 	call	c68 <__umodsi3>
    ac44:	102f883a 	mov	r23,r2
    ac48:	8809883a 	mov	r4,r17
    ac4c:	b00b883a 	mov	r5,r22
    ac50:	0000c040 	call	c04 <__udivsi3>
    ac54:	b82e943a 	slli	r23,r23,16
    ac58:	a885383a 	mul	r2,r21,r2
    ac5c:	e13fffcc 	andi	r4,fp,65535
    ac60:	25c8b03a 	or	r4,r4,r23
    ac64:	2080042e 	bgeu	r4,r2,ac78 <__umoddi3+0x4c0>
    ac68:	24c9883a 	add	r4,r4,r19
    ac6c:	24c00236 	bltu	r4,r19,ac78 <__umoddi3+0x4c0>
    ac70:	2080012e 	bgeu	r4,r2,ac78 <__umoddi3+0x4c0>
    ac74:	24c9883a 	add	r4,r4,r19
    ac78:	20a3c83a 	sub	r17,r4,r2
    ac7c:	003f4806 	br	a9a0 <__ram_exceptions_end+0xfbfea74c>
    ac80:	2c8fc83a 	sub	r7,r5,r18
    ac84:	1545c83a 	sub	r2,r2,r21
    ac88:	29cb803a 	cmpltu	r5,r5,r7
    ac8c:	1145c83a 	sub	r2,r2,r5
    ac90:	4089c83a 	sub	r4,r8,r2
    ac94:	003fc706 	br	abb4 <__ram_exceptions_end+0xfbfea960>
    ac98:	01000604 	movi	r4,24
    ac9c:	003f1806 	br	a900 <__ram_exceptions_end+0xfbfea6ac>
    aca0:	00800604 	movi	r2,24
    aca4:	003f3206 	br	a970 <__ram_exceptions_end+0xfbfea71c>
    aca8:	01000604 	movi	r4,24
    acac:	003ed906 	br	a814 <__ram_exceptions_end+0xfbfea5c0>
    acb0:	413fa52e 	bgeu	r8,r4,ab48 <__ram_exceptions_end+0xfbfea8f4>
    acb4:	297fff84 	addi	r5,r5,-2
    acb8:	4551883a 	add	r8,r8,r21
    acbc:	003fa306 	br	ab4c <__ram_exceptions_end+0xfbfea8f8>
    acc0:	15ff8b2e 	bgeu	r2,r23,aaf0 <__ram_exceptions_end+0xfbfea89c>
    acc4:	31bfff84 	addi	r6,r6,-2
    acc8:	1545883a 	add	r2,r2,r21
    accc:	003f8906 	br	aaf4 <__ram_exceptions_end+0xfbfea8a0>
    acd0:	24c9883a 	add	r4,r4,r19
    acd4:	003eee06 	br	a890 <__ram_exceptions_end+0xfbfea63c>
    acd8:	8005883a 	mov	r2,r16
    acdc:	003f1706 	br	a93c <__ram_exceptions_end+0xfbfea6e8>
    ace0:	817fe736 	bltu	r16,r5,ac80 <__ram_exceptions_end+0xfbfeaa2c>
    ace4:	280f883a 	mov	r7,r5
    ace8:	0009883a 	mov	r4,zero
    acec:	003fb106 	br	abb4 <__ram_exceptions_end+0xfbfea960>

0000acf0 <__adddf3>:
    acf0:	02c00434 	movhi	r11,16
    acf4:	5affffc4 	addi	r11,r11,-1
    acf8:	2806d7fa 	srli	r3,r5,31
    acfc:	2ad4703a 	and	r10,r5,r11
    ad00:	3ad2703a 	and	r9,r7,r11
    ad04:	3804d53a 	srli	r2,r7,20
    ad08:	3018d77a 	srli	r12,r6,29
    ad0c:	280ad53a 	srli	r5,r5,20
    ad10:	501490fa 	slli	r10,r10,3
    ad14:	2010d77a 	srli	r8,r4,29
    ad18:	481290fa 	slli	r9,r9,3
    ad1c:	380ed7fa 	srli	r7,r7,31
    ad20:	defffb04 	addi	sp,sp,-20
    ad24:	dc800215 	stw	r18,8(sp)
    ad28:	dc400115 	stw	r17,4(sp)
    ad2c:	dc000015 	stw	r16,0(sp)
    ad30:	dfc00415 	stw	ra,16(sp)
    ad34:	dcc00315 	stw	r19,12(sp)
    ad38:	1c803fcc 	andi	r18,r3,255
    ad3c:	2c01ffcc 	andi	r16,r5,2047
    ad40:	5210b03a 	or	r8,r10,r8
    ad44:	202290fa 	slli	r17,r4,3
    ad48:	1081ffcc 	andi	r2,r2,2047
    ad4c:	4b12b03a 	or	r9,r9,r12
    ad50:	300c90fa 	slli	r6,r6,3
    ad54:	91c07526 	beq	r18,r7,af2c <__adddf3+0x23c>
    ad58:	8087c83a 	sub	r3,r16,r2
    ad5c:	00c0ab0e 	bge	zero,r3,b00c <__adddf3+0x31c>
    ad60:	10002a1e 	bne	r2,zero,ae0c <__adddf3+0x11c>
    ad64:	4984b03a 	or	r2,r9,r6
    ad68:	1000961e 	bne	r2,zero,afc4 <__adddf3+0x2d4>
    ad6c:	888001cc 	andi	r2,r17,7
    ad70:	10000726 	beq	r2,zero,ad90 <__adddf3+0xa0>
    ad74:	888003cc 	andi	r2,r17,15
    ad78:	00c00104 	movi	r3,4
    ad7c:	10c00426 	beq	r2,r3,ad90 <__adddf3+0xa0>
    ad80:	88c7883a 	add	r3,r17,r3
    ad84:	1c63803a 	cmpltu	r17,r3,r17
    ad88:	4451883a 	add	r8,r8,r17
    ad8c:	1823883a 	mov	r17,r3
    ad90:	4080202c 	andhi	r2,r8,128
    ad94:	10005926 	beq	r2,zero,aefc <__adddf3+0x20c>
    ad98:	84000044 	addi	r16,r16,1
    ad9c:	0081ffc4 	movi	r2,2047
    ada0:	8080ba26 	beq	r16,r2,b08c <__adddf3+0x39c>
    ada4:	00bfe034 	movhi	r2,65408
    ada8:	10bfffc4 	addi	r2,r2,-1
    adac:	4090703a 	and	r8,r8,r2
    adb0:	4004977a 	slli	r2,r8,29
    adb4:	4010927a 	slli	r8,r8,9
    adb8:	8822d0fa 	srli	r17,r17,3
    adbc:	8401ffcc 	andi	r16,r16,2047
    adc0:	4010d33a 	srli	r8,r8,12
    adc4:	9007883a 	mov	r3,r18
    adc8:	1444b03a 	or	r2,r2,r17
    adcc:	8401ffcc 	andi	r16,r16,2047
    add0:	8020953a 	slli	r16,r16,20
    add4:	18c03fcc 	andi	r3,r3,255
    add8:	01000434 	movhi	r4,16
    addc:	213fffc4 	addi	r4,r4,-1
    ade0:	180697fa 	slli	r3,r3,31
    ade4:	4110703a 	and	r8,r8,r4
    ade8:	4410b03a 	or	r8,r8,r16
    adec:	40c6b03a 	or	r3,r8,r3
    adf0:	dfc00417 	ldw	ra,16(sp)
    adf4:	dcc00317 	ldw	r19,12(sp)
    adf8:	dc800217 	ldw	r18,8(sp)
    adfc:	dc400117 	ldw	r17,4(sp)
    ae00:	dc000017 	ldw	r16,0(sp)
    ae04:	dec00504 	addi	sp,sp,20
    ae08:	f800283a 	ret
    ae0c:	0081ffc4 	movi	r2,2047
    ae10:	80bfd626 	beq	r16,r2,ad6c <__ram_exceptions_end+0xfbfeab18>
    ae14:	4a402034 	orhi	r9,r9,128
    ae18:	00800e04 	movi	r2,56
    ae1c:	10c09f16 	blt	r2,r3,b09c <__adddf3+0x3ac>
    ae20:	008007c4 	movi	r2,31
    ae24:	10c0c216 	blt	r2,r3,b130 <__adddf3+0x440>
    ae28:	00800804 	movi	r2,32
    ae2c:	10c5c83a 	sub	r2,r2,r3
    ae30:	488a983a 	sll	r5,r9,r2
    ae34:	30c8d83a 	srl	r4,r6,r3
    ae38:	3084983a 	sll	r2,r6,r2
    ae3c:	48c6d83a 	srl	r3,r9,r3
    ae40:	290cb03a 	or	r6,r5,r4
    ae44:	1004c03a 	cmpne	r2,r2,zero
    ae48:	308cb03a 	or	r6,r6,r2
    ae4c:	898dc83a 	sub	r6,r17,r6
    ae50:	89a3803a 	cmpltu	r17,r17,r6
    ae54:	40d1c83a 	sub	r8,r8,r3
    ae58:	4451c83a 	sub	r8,r8,r17
    ae5c:	3023883a 	mov	r17,r6
    ae60:	4080202c 	andhi	r2,r8,128
    ae64:	10002326 	beq	r2,zero,aef4 <__adddf3+0x204>
    ae68:	04c02034 	movhi	r19,128
    ae6c:	9cffffc4 	addi	r19,r19,-1
    ae70:	44e6703a 	and	r19,r8,r19
    ae74:	98007626 	beq	r19,zero,b050 <__adddf3+0x360>
    ae78:	9809883a 	mov	r4,r19
    ae7c:	000d2f40 	call	d2f4 <__clzsi2>
    ae80:	10fffe04 	addi	r3,r2,-8
    ae84:	010007c4 	movi	r4,31
    ae88:	20c07716 	blt	r4,r3,b068 <__adddf3+0x378>
    ae8c:	00800804 	movi	r2,32
    ae90:	10c5c83a 	sub	r2,r2,r3
    ae94:	8884d83a 	srl	r2,r17,r2
    ae98:	98d0983a 	sll	r8,r19,r3
    ae9c:	88e2983a 	sll	r17,r17,r3
    aea0:	1204b03a 	or	r2,r2,r8
    aea4:	1c007416 	blt	r3,r16,b078 <__adddf3+0x388>
    aea8:	1c21c83a 	sub	r16,r3,r16
    aeac:	82000044 	addi	r8,r16,1
    aeb0:	00c007c4 	movi	r3,31
    aeb4:	1a009116 	blt	r3,r8,b0fc <__adddf3+0x40c>
    aeb8:	00c00804 	movi	r3,32
    aebc:	1a07c83a 	sub	r3,r3,r8
    aec0:	8a08d83a 	srl	r4,r17,r8
    aec4:	88e2983a 	sll	r17,r17,r3
    aec8:	10c6983a 	sll	r3,r2,r3
    aecc:	1210d83a 	srl	r8,r2,r8
    aed0:	8804c03a 	cmpne	r2,r17,zero
    aed4:	1906b03a 	or	r3,r3,r4
    aed8:	18a2b03a 	or	r17,r3,r2
    aedc:	0021883a 	mov	r16,zero
    aee0:	003fa206 	br	ad6c <__ram_exceptions_end+0xfbfeab18>
    aee4:	1890b03a 	or	r8,r3,r2
    aee8:	40017d26 	beq	r8,zero,b4e0 <__adddf3+0x7f0>
    aeec:	1011883a 	mov	r8,r2
    aef0:	1823883a 	mov	r17,r3
    aef4:	888001cc 	andi	r2,r17,7
    aef8:	103f9e1e 	bne	r2,zero,ad74 <__ram_exceptions_end+0xfbfeab20>
    aefc:	4004977a 	slli	r2,r8,29
    af00:	8822d0fa 	srli	r17,r17,3
    af04:	4010d0fa 	srli	r8,r8,3
    af08:	9007883a 	mov	r3,r18
    af0c:	1444b03a 	or	r2,r2,r17
    af10:	0101ffc4 	movi	r4,2047
    af14:	81002426 	beq	r16,r4,afa8 <__adddf3+0x2b8>
    af18:	8120703a 	and	r16,r16,r4
    af1c:	01000434 	movhi	r4,16
    af20:	213fffc4 	addi	r4,r4,-1
    af24:	4110703a 	and	r8,r8,r4
    af28:	003fa806 	br	adcc <__ram_exceptions_end+0xfbfeab78>
    af2c:	8089c83a 	sub	r4,r16,r2
    af30:	01005e0e 	bge	zero,r4,b0ac <__adddf3+0x3bc>
    af34:	10002b26 	beq	r2,zero,afe4 <__adddf3+0x2f4>
    af38:	0081ffc4 	movi	r2,2047
    af3c:	80bf8b26 	beq	r16,r2,ad6c <__ram_exceptions_end+0xfbfeab18>
    af40:	4a402034 	orhi	r9,r9,128
    af44:	00800e04 	movi	r2,56
    af48:	1100a40e 	bge	r2,r4,b1dc <__adddf3+0x4ec>
    af4c:	498cb03a 	or	r6,r9,r6
    af50:	300ac03a 	cmpne	r5,r6,zero
    af54:	0013883a 	mov	r9,zero
    af58:	2c4b883a 	add	r5,r5,r17
    af5c:	2c63803a 	cmpltu	r17,r5,r17
    af60:	4a11883a 	add	r8,r9,r8
    af64:	8a11883a 	add	r8,r17,r8
    af68:	2823883a 	mov	r17,r5
    af6c:	4080202c 	andhi	r2,r8,128
    af70:	103fe026 	beq	r2,zero,aef4 <__ram_exceptions_end+0xfbfeaca0>
    af74:	84000044 	addi	r16,r16,1
    af78:	0081ffc4 	movi	r2,2047
    af7c:	8080d226 	beq	r16,r2,b2c8 <__adddf3+0x5d8>
    af80:	00bfe034 	movhi	r2,65408
    af84:	10bfffc4 	addi	r2,r2,-1
    af88:	4090703a 	and	r8,r8,r2
    af8c:	880ad07a 	srli	r5,r17,1
    af90:	400897fa 	slli	r4,r8,31
    af94:	88c0004c 	andi	r3,r17,1
    af98:	28e2b03a 	or	r17,r5,r3
    af9c:	4010d07a 	srli	r8,r8,1
    afa0:	2462b03a 	or	r17,r4,r17
    afa4:	003f7106 	br	ad6c <__ram_exceptions_end+0xfbfeab18>
    afa8:	4088b03a 	or	r4,r8,r2
    afac:	20014526 	beq	r4,zero,b4c4 <__adddf3+0x7d4>
    afb0:	01000434 	movhi	r4,16
    afb4:	42000234 	orhi	r8,r8,8
    afb8:	213fffc4 	addi	r4,r4,-1
    afbc:	4110703a 	and	r8,r8,r4
    afc0:	003f8206 	br	adcc <__ram_exceptions_end+0xfbfeab78>
    afc4:	18ffffc4 	addi	r3,r3,-1
    afc8:	1800491e 	bne	r3,zero,b0f0 <__adddf3+0x400>
    afcc:	898bc83a 	sub	r5,r17,r6
    afd0:	8963803a 	cmpltu	r17,r17,r5
    afd4:	4251c83a 	sub	r8,r8,r9
    afd8:	4451c83a 	sub	r8,r8,r17
    afdc:	2823883a 	mov	r17,r5
    afe0:	003f9f06 	br	ae60 <__ram_exceptions_end+0xfbfeac0c>
    afe4:	4984b03a 	or	r2,r9,r6
    afe8:	103f6026 	beq	r2,zero,ad6c <__ram_exceptions_end+0xfbfeab18>
    afec:	213fffc4 	addi	r4,r4,-1
    aff0:	2000931e 	bne	r4,zero,b240 <__adddf3+0x550>
    aff4:	898d883a 	add	r6,r17,r6
    aff8:	3463803a 	cmpltu	r17,r6,r17
    affc:	4251883a 	add	r8,r8,r9
    b000:	8a11883a 	add	r8,r17,r8
    b004:	3023883a 	mov	r17,r6
    b008:	003fd806 	br	af6c <__ram_exceptions_end+0xfbfead18>
    b00c:	1800541e 	bne	r3,zero,b160 <__adddf3+0x470>
    b010:	80800044 	addi	r2,r16,1
    b014:	1081ffcc 	andi	r2,r2,2047
    b018:	00c00044 	movi	r3,1
    b01c:	1880a00e 	bge	r3,r2,b2a0 <__adddf3+0x5b0>
    b020:	8989c83a 	sub	r4,r17,r6
    b024:	8905803a 	cmpltu	r2,r17,r4
    b028:	4267c83a 	sub	r19,r8,r9
    b02c:	98a7c83a 	sub	r19,r19,r2
    b030:	9880202c 	andhi	r2,r19,128
    b034:	10006326 	beq	r2,zero,b1c4 <__adddf3+0x4d4>
    b038:	3463c83a 	sub	r17,r6,r17
    b03c:	4a07c83a 	sub	r3,r9,r8
    b040:	344d803a 	cmpltu	r6,r6,r17
    b044:	19a7c83a 	sub	r19,r3,r6
    b048:	3825883a 	mov	r18,r7
    b04c:	983f8a1e 	bne	r19,zero,ae78 <__ram_exceptions_end+0xfbfeac24>
    b050:	8809883a 	mov	r4,r17
    b054:	000d2f40 	call	d2f4 <__clzsi2>
    b058:	10800804 	addi	r2,r2,32
    b05c:	10fffe04 	addi	r3,r2,-8
    b060:	010007c4 	movi	r4,31
    b064:	20ff890e 	bge	r4,r3,ae8c <__ram_exceptions_end+0xfbfeac38>
    b068:	10bff604 	addi	r2,r2,-40
    b06c:	8884983a 	sll	r2,r17,r2
    b070:	0023883a 	mov	r17,zero
    b074:	1c3f8c0e 	bge	r3,r16,aea8 <__ram_exceptions_end+0xfbfeac54>
    b078:	023fe034 	movhi	r8,65408
    b07c:	423fffc4 	addi	r8,r8,-1
    b080:	80e1c83a 	sub	r16,r16,r3
    b084:	1210703a 	and	r8,r2,r8
    b088:	003f3806 	br	ad6c <__ram_exceptions_end+0xfbfeab18>
    b08c:	9007883a 	mov	r3,r18
    b090:	0011883a 	mov	r8,zero
    b094:	0005883a 	mov	r2,zero
    b098:	003f4c06 	br	adcc <__ram_exceptions_end+0xfbfeab78>
    b09c:	498cb03a 	or	r6,r9,r6
    b0a0:	300cc03a 	cmpne	r6,r6,zero
    b0a4:	0007883a 	mov	r3,zero
    b0a8:	003f6806 	br	ae4c <__ram_exceptions_end+0xfbfeabf8>
    b0ac:	20009c1e 	bne	r4,zero,b320 <__adddf3+0x630>
    b0b0:	80800044 	addi	r2,r16,1
    b0b4:	1141ffcc 	andi	r5,r2,2047
    b0b8:	01000044 	movi	r4,1
    b0bc:	2140670e 	bge	r4,r5,b25c <__adddf3+0x56c>
    b0c0:	0101ffc4 	movi	r4,2047
    b0c4:	11007f26 	beq	r2,r4,b2c4 <__adddf3+0x5d4>
    b0c8:	898d883a 	add	r6,r17,r6
    b0cc:	4247883a 	add	r3,r8,r9
    b0d0:	3451803a 	cmpltu	r8,r6,r17
    b0d4:	40d1883a 	add	r8,r8,r3
    b0d8:	402297fa 	slli	r17,r8,31
    b0dc:	300cd07a 	srli	r6,r6,1
    b0e0:	4010d07a 	srli	r8,r8,1
    b0e4:	1021883a 	mov	r16,r2
    b0e8:	89a2b03a 	or	r17,r17,r6
    b0ec:	003f1f06 	br	ad6c <__ram_exceptions_end+0xfbfeab18>
    b0f0:	0081ffc4 	movi	r2,2047
    b0f4:	80bf481e 	bne	r16,r2,ae18 <__ram_exceptions_end+0xfbfeabc4>
    b0f8:	003f1c06 	br	ad6c <__ram_exceptions_end+0xfbfeab18>
    b0fc:	843ff844 	addi	r16,r16,-31
    b100:	01000804 	movi	r4,32
    b104:	1406d83a 	srl	r3,r2,r16
    b108:	41005026 	beq	r8,r4,b24c <__adddf3+0x55c>
    b10c:	01001004 	movi	r4,64
    b110:	2211c83a 	sub	r8,r4,r8
    b114:	1204983a 	sll	r2,r2,r8
    b118:	88a2b03a 	or	r17,r17,r2
    b11c:	8822c03a 	cmpne	r17,r17,zero
    b120:	1c62b03a 	or	r17,r3,r17
    b124:	0011883a 	mov	r8,zero
    b128:	0021883a 	mov	r16,zero
    b12c:	003f7106 	br	aef4 <__ram_exceptions_end+0xfbfeaca0>
    b130:	193ff804 	addi	r4,r3,-32
    b134:	00800804 	movi	r2,32
    b138:	4908d83a 	srl	r4,r9,r4
    b13c:	18804526 	beq	r3,r2,b254 <__adddf3+0x564>
    b140:	00801004 	movi	r2,64
    b144:	10c5c83a 	sub	r2,r2,r3
    b148:	4886983a 	sll	r3,r9,r2
    b14c:	198cb03a 	or	r6,r3,r6
    b150:	300cc03a 	cmpne	r6,r6,zero
    b154:	218cb03a 	or	r6,r4,r6
    b158:	0007883a 	mov	r3,zero
    b15c:	003f3b06 	br	ae4c <__ram_exceptions_end+0xfbfeabf8>
    b160:	80002a26 	beq	r16,zero,b20c <__adddf3+0x51c>
    b164:	0101ffc4 	movi	r4,2047
    b168:	11006826 	beq	r2,r4,b30c <__adddf3+0x61c>
    b16c:	00c7c83a 	sub	r3,zero,r3
    b170:	42002034 	orhi	r8,r8,128
    b174:	01000e04 	movi	r4,56
    b178:	20c07c16 	blt	r4,r3,b36c <__adddf3+0x67c>
    b17c:	010007c4 	movi	r4,31
    b180:	20c0da16 	blt	r4,r3,b4ec <__adddf3+0x7fc>
    b184:	01000804 	movi	r4,32
    b188:	20c9c83a 	sub	r4,r4,r3
    b18c:	4114983a 	sll	r10,r8,r4
    b190:	88cad83a 	srl	r5,r17,r3
    b194:	8908983a 	sll	r4,r17,r4
    b198:	40c6d83a 	srl	r3,r8,r3
    b19c:	5162b03a 	or	r17,r10,r5
    b1a0:	2008c03a 	cmpne	r4,r4,zero
    b1a4:	8922b03a 	or	r17,r17,r4
    b1a8:	3463c83a 	sub	r17,r6,r17
    b1ac:	48c7c83a 	sub	r3,r9,r3
    b1b0:	344d803a 	cmpltu	r6,r6,r17
    b1b4:	1991c83a 	sub	r8,r3,r6
    b1b8:	1021883a 	mov	r16,r2
    b1bc:	3825883a 	mov	r18,r7
    b1c0:	003f2706 	br	ae60 <__ram_exceptions_end+0xfbfeac0c>
    b1c4:	24d0b03a 	or	r8,r4,r19
    b1c8:	40001b1e 	bne	r8,zero,b238 <__adddf3+0x548>
    b1cc:	0005883a 	mov	r2,zero
    b1d0:	0007883a 	mov	r3,zero
    b1d4:	0021883a 	mov	r16,zero
    b1d8:	003f4d06 	br	af10 <__ram_exceptions_end+0xfbfeacbc>
    b1dc:	008007c4 	movi	r2,31
    b1e0:	11003c16 	blt	r2,r4,b2d4 <__adddf3+0x5e4>
    b1e4:	00800804 	movi	r2,32
    b1e8:	1105c83a 	sub	r2,r2,r4
    b1ec:	488e983a 	sll	r7,r9,r2
    b1f0:	310ad83a 	srl	r5,r6,r4
    b1f4:	3084983a 	sll	r2,r6,r2
    b1f8:	4912d83a 	srl	r9,r9,r4
    b1fc:	394ab03a 	or	r5,r7,r5
    b200:	1004c03a 	cmpne	r2,r2,zero
    b204:	288ab03a 	or	r5,r5,r2
    b208:	003f5306 	br	af58 <__ram_exceptions_end+0xfbfead04>
    b20c:	4448b03a 	or	r4,r8,r17
    b210:	20003e26 	beq	r4,zero,b30c <__adddf3+0x61c>
    b214:	00c6303a 	nor	r3,zero,r3
    b218:	18003a1e 	bne	r3,zero,b304 <__adddf3+0x614>
    b21c:	3463c83a 	sub	r17,r6,r17
    b220:	4a07c83a 	sub	r3,r9,r8
    b224:	344d803a 	cmpltu	r6,r6,r17
    b228:	1991c83a 	sub	r8,r3,r6
    b22c:	1021883a 	mov	r16,r2
    b230:	3825883a 	mov	r18,r7
    b234:	003f0a06 	br	ae60 <__ram_exceptions_end+0xfbfeac0c>
    b238:	2023883a 	mov	r17,r4
    b23c:	003f0d06 	br	ae74 <__ram_exceptions_end+0xfbfeac20>
    b240:	0081ffc4 	movi	r2,2047
    b244:	80bf3f1e 	bne	r16,r2,af44 <__ram_exceptions_end+0xfbfeacf0>
    b248:	003ec806 	br	ad6c <__ram_exceptions_end+0xfbfeab18>
    b24c:	0005883a 	mov	r2,zero
    b250:	003fb106 	br	b118 <__ram_exceptions_end+0xfbfeaec4>
    b254:	0007883a 	mov	r3,zero
    b258:	003fbc06 	br	b14c <__ram_exceptions_end+0xfbfeaef8>
    b25c:	4444b03a 	or	r2,r8,r17
    b260:	8000871e 	bne	r16,zero,b480 <__adddf3+0x790>
    b264:	1000ba26 	beq	r2,zero,b550 <__adddf3+0x860>
    b268:	4984b03a 	or	r2,r9,r6
    b26c:	103ebf26 	beq	r2,zero,ad6c <__ram_exceptions_end+0xfbfeab18>
    b270:	8985883a 	add	r2,r17,r6
    b274:	4247883a 	add	r3,r8,r9
    b278:	1451803a 	cmpltu	r8,r2,r17
    b27c:	40d1883a 	add	r8,r8,r3
    b280:	40c0202c 	andhi	r3,r8,128
    b284:	1023883a 	mov	r17,r2
    b288:	183f1a26 	beq	r3,zero,aef4 <__ram_exceptions_end+0xfbfeaca0>
    b28c:	00bfe034 	movhi	r2,65408
    b290:	10bfffc4 	addi	r2,r2,-1
    b294:	2021883a 	mov	r16,r4
    b298:	4090703a 	and	r8,r8,r2
    b29c:	003eb306 	br	ad6c <__ram_exceptions_end+0xfbfeab18>
    b2a0:	4444b03a 	or	r2,r8,r17
    b2a4:	8000291e 	bne	r16,zero,b34c <__adddf3+0x65c>
    b2a8:	10004b1e 	bne	r2,zero,b3d8 <__adddf3+0x6e8>
    b2ac:	4990b03a 	or	r8,r9,r6
    b2b0:	40008b26 	beq	r8,zero,b4e0 <__adddf3+0x7f0>
    b2b4:	4811883a 	mov	r8,r9
    b2b8:	3023883a 	mov	r17,r6
    b2bc:	3825883a 	mov	r18,r7
    b2c0:	003eaa06 	br	ad6c <__ram_exceptions_end+0xfbfeab18>
    b2c4:	1021883a 	mov	r16,r2
    b2c8:	0011883a 	mov	r8,zero
    b2cc:	0005883a 	mov	r2,zero
    b2d0:	003f0f06 	br	af10 <__ram_exceptions_end+0xfbfeacbc>
    b2d4:	217ff804 	addi	r5,r4,-32
    b2d8:	00800804 	movi	r2,32
    b2dc:	494ad83a 	srl	r5,r9,r5
    b2e0:	20807d26 	beq	r4,r2,b4d8 <__adddf3+0x7e8>
    b2e4:	00801004 	movi	r2,64
    b2e8:	1109c83a 	sub	r4,r2,r4
    b2ec:	4912983a 	sll	r9,r9,r4
    b2f0:	498cb03a 	or	r6,r9,r6
    b2f4:	300cc03a 	cmpne	r6,r6,zero
    b2f8:	298ab03a 	or	r5,r5,r6
    b2fc:	0013883a 	mov	r9,zero
    b300:	003f1506 	br	af58 <__ram_exceptions_end+0xfbfead04>
    b304:	0101ffc4 	movi	r4,2047
    b308:	113f9a1e 	bne	r2,r4,b174 <__ram_exceptions_end+0xfbfeaf20>
    b30c:	4811883a 	mov	r8,r9
    b310:	3023883a 	mov	r17,r6
    b314:	1021883a 	mov	r16,r2
    b318:	3825883a 	mov	r18,r7
    b31c:	003e9306 	br	ad6c <__ram_exceptions_end+0xfbfeab18>
    b320:	8000161e 	bne	r16,zero,b37c <__adddf3+0x68c>
    b324:	444ab03a 	or	r5,r8,r17
    b328:	28005126 	beq	r5,zero,b470 <__adddf3+0x780>
    b32c:	0108303a 	nor	r4,zero,r4
    b330:	20004d1e 	bne	r4,zero,b468 <__adddf3+0x778>
    b334:	89a3883a 	add	r17,r17,r6
    b338:	4253883a 	add	r9,r8,r9
    b33c:	898d803a 	cmpltu	r6,r17,r6
    b340:	3251883a 	add	r8,r6,r9
    b344:	1021883a 	mov	r16,r2
    b348:	003f0806 	br	af6c <__ram_exceptions_end+0xfbfead18>
    b34c:	1000301e 	bne	r2,zero,b410 <__adddf3+0x720>
    b350:	4984b03a 	or	r2,r9,r6
    b354:	10007126 	beq	r2,zero,b51c <__adddf3+0x82c>
    b358:	4811883a 	mov	r8,r9
    b35c:	3023883a 	mov	r17,r6
    b360:	3825883a 	mov	r18,r7
    b364:	0401ffc4 	movi	r16,2047
    b368:	003e8006 	br	ad6c <__ram_exceptions_end+0xfbfeab18>
    b36c:	4462b03a 	or	r17,r8,r17
    b370:	8822c03a 	cmpne	r17,r17,zero
    b374:	0007883a 	mov	r3,zero
    b378:	003f8b06 	br	b1a8 <__ram_exceptions_end+0xfbfeaf54>
    b37c:	0141ffc4 	movi	r5,2047
    b380:	11403b26 	beq	r2,r5,b470 <__adddf3+0x780>
    b384:	0109c83a 	sub	r4,zero,r4
    b388:	42002034 	orhi	r8,r8,128
    b38c:	01400e04 	movi	r5,56
    b390:	29006716 	blt	r5,r4,b530 <__adddf3+0x840>
    b394:	014007c4 	movi	r5,31
    b398:	29007016 	blt	r5,r4,b55c <__adddf3+0x86c>
    b39c:	01400804 	movi	r5,32
    b3a0:	290bc83a 	sub	r5,r5,r4
    b3a4:	4154983a 	sll	r10,r8,r5
    b3a8:	890ed83a 	srl	r7,r17,r4
    b3ac:	894a983a 	sll	r5,r17,r5
    b3b0:	4108d83a 	srl	r4,r8,r4
    b3b4:	51e2b03a 	or	r17,r10,r7
    b3b8:	280ac03a 	cmpne	r5,r5,zero
    b3bc:	8962b03a 	or	r17,r17,r5
    b3c0:	89a3883a 	add	r17,r17,r6
    b3c4:	2253883a 	add	r9,r4,r9
    b3c8:	898d803a 	cmpltu	r6,r17,r6
    b3cc:	3251883a 	add	r8,r6,r9
    b3d0:	1021883a 	mov	r16,r2
    b3d4:	003ee506 	br	af6c <__ram_exceptions_end+0xfbfead18>
    b3d8:	4984b03a 	or	r2,r9,r6
    b3dc:	103e6326 	beq	r2,zero,ad6c <__ram_exceptions_end+0xfbfeab18>
    b3e0:	8987c83a 	sub	r3,r17,r6
    b3e4:	88c9803a 	cmpltu	r4,r17,r3
    b3e8:	4245c83a 	sub	r2,r8,r9
    b3ec:	1105c83a 	sub	r2,r2,r4
    b3f0:	1100202c 	andhi	r4,r2,128
    b3f4:	203ebb26 	beq	r4,zero,aee4 <__ram_exceptions_end+0xfbfeac90>
    b3f8:	3463c83a 	sub	r17,r6,r17
    b3fc:	4a07c83a 	sub	r3,r9,r8
    b400:	344d803a 	cmpltu	r6,r6,r17
    b404:	1991c83a 	sub	r8,r3,r6
    b408:	3825883a 	mov	r18,r7
    b40c:	003e5706 	br	ad6c <__ram_exceptions_end+0xfbfeab18>
    b410:	4984b03a 	or	r2,r9,r6
    b414:	10002e26 	beq	r2,zero,b4d0 <__adddf3+0x7e0>
    b418:	4004d0fa 	srli	r2,r8,3
    b41c:	8822d0fa 	srli	r17,r17,3
    b420:	4010977a 	slli	r8,r8,29
    b424:	10c0022c 	andhi	r3,r2,8
    b428:	4462b03a 	or	r17,r8,r17
    b42c:	18000826 	beq	r3,zero,b450 <__adddf3+0x760>
    b430:	4808d0fa 	srli	r4,r9,3
    b434:	20c0022c 	andhi	r3,r4,8
    b438:	1800051e 	bne	r3,zero,b450 <__adddf3+0x760>
    b43c:	300cd0fa 	srli	r6,r6,3
    b440:	4806977a 	slli	r3,r9,29
    b444:	2005883a 	mov	r2,r4
    b448:	3825883a 	mov	r18,r7
    b44c:	19a2b03a 	or	r17,r3,r6
    b450:	8810d77a 	srli	r8,r17,29
    b454:	100490fa 	slli	r2,r2,3
    b458:	882290fa 	slli	r17,r17,3
    b45c:	0401ffc4 	movi	r16,2047
    b460:	4090b03a 	or	r8,r8,r2
    b464:	003e4106 	br	ad6c <__ram_exceptions_end+0xfbfeab18>
    b468:	0141ffc4 	movi	r5,2047
    b46c:	117fc71e 	bne	r2,r5,b38c <__ram_exceptions_end+0xfbfeb138>
    b470:	4811883a 	mov	r8,r9
    b474:	3023883a 	mov	r17,r6
    b478:	1021883a 	mov	r16,r2
    b47c:	003e3b06 	br	ad6c <__ram_exceptions_end+0xfbfeab18>
    b480:	10002f26 	beq	r2,zero,b540 <__adddf3+0x850>
    b484:	4984b03a 	or	r2,r9,r6
    b488:	10001126 	beq	r2,zero,b4d0 <__adddf3+0x7e0>
    b48c:	4004d0fa 	srli	r2,r8,3
    b490:	8822d0fa 	srli	r17,r17,3
    b494:	4010977a 	slli	r8,r8,29
    b498:	10c0022c 	andhi	r3,r2,8
    b49c:	4462b03a 	or	r17,r8,r17
    b4a0:	183feb26 	beq	r3,zero,b450 <__ram_exceptions_end+0xfbfeb1fc>
    b4a4:	4808d0fa 	srli	r4,r9,3
    b4a8:	20c0022c 	andhi	r3,r4,8
    b4ac:	183fe81e 	bne	r3,zero,b450 <__ram_exceptions_end+0xfbfeb1fc>
    b4b0:	300cd0fa 	srli	r6,r6,3
    b4b4:	4806977a 	slli	r3,r9,29
    b4b8:	2005883a 	mov	r2,r4
    b4bc:	19a2b03a 	or	r17,r3,r6
    b4c0:	003fe306 	br	b450 <__ram_exceptions_end+0xfbfeb1fc>
    b4c4:	0011883a 	mov	r8,zero
    b4c8:	0005883a 	mov	r2,zero
    b4cc:	003e3f06 	br	adcc <__ram_exceptions_end+0xfbfeab78>
    b4d0:	0401ffc4 	movi	r16,2047
    b4d4:	003e2506 	br	ad6c <__ram_exceptions_end+0xfbfeab18>
    b4d8:	0013883a 	mov	r9,zero
    b4dc:	003f8406 	br	b2f0 <__ram_exceptions_end+0xfbfeb09c>
    b4e0:	0005883a 	mov	r2,zero
    b4e4:	0007883a 	mov	r3,zero
    b4e8:	003e8906 	br	af10 <__ram_exceptions_end+0xfbfeacbc>
    b4ec:	197ff804 	addi	r5,r3,-32
    b4f0:	01000804 	movi	r4,32
    b4f4:	414ad83a 	srl	r5,r8,r5
    b4f8:	19002426 	beq	r3,r4,b58c <__adddf3+0x89c>
    b4fc:	01001004 	movi	r4,64
    b500:	20c7c83a 	sub	r3,r4,r3
    b504:	40c6983a 	sll	r3,r8,r3
    b508:	1c46b03a 	or	r3,r3,r17
    b50c:	1806c03a 	cmpne	r3,r3,zero
    b510:	28e2b03a 	or	r17,r5,r3
    b514:	0007883a 	mov	r3,zero
    b518:	003f2306 	br	b1a8 <__ram_exceptions_end+0xfbfeaf54>
    b51c:	0007883a 	mov	r3,zero
    b520:	5811883a 	mov	r8,r11
    b524:	00bfffc4 	movi	r2,-1
    b528:	0401ffc4 	movi	r16,2047
    b52c:	003e7806 	br	af10 <__ram_exceptions_end+0xfbfeacbc>
    b530:	4462b03a 	or	r17,r8,r17
    b534:	8822c03a 	cmpne	r17,r17,zero
    b538:	0009883a 	mov	r4,zero
    b53c:	003fa006 	br	b3c0 <__ram_exceptions_end+0xfbfeb16c>
    b540:	4811883a 	mov	r8,r9
    b544:	3023883a 	mov	r17,r6
    b548:	0401ffc4 	movi	r16,2047
    b54c:	003e0706 	br	ad6c <__ram_exceptions_end+0xfbfeab18>
    b550:	4811883a 	mov	r8,r9
    b554:	3023883a 	mov	r17,r6
    b558:	003e0406 	br	ad6c <__ram_exceptions_end+0xfbfeab18>
    b55c:	21fff804 	addi	r7,r4,-32
    b560:	01400804 	movi	r5,32
    b564:	41ced83a 	srl	r7,r8,r7
    b568:	21400a26 	beq	r4,r5,b594 <__adddf3+0x8a4>
    b56c:	01401004 	movi	r5,64
    b570:	2909c83a 	sub	r4,r5,r4
    b574:	4108983a 	sll	r4,r8,r4
    b578:	2448b03a 	or	r4,r4,r17
    b57c:	2008c03a 	cmpne	r4,r4,zero
    b580:	3922b03a 	or	r17,r7,r4
    b584:	0009883a 	mov	r4,zero
    b588:	003f8d06 	br	b3c0 <__ram_exceptions_end+0xfbfeb16c>
    b58c:	0007883a 	mov	r3,zero
    b590:	003fdd06 	br	b508 <__ram_exceptions_end+0xfbfeb2b4>
    b594:	0009883a 	mov	r4,zero
    b598:	003ff706 	br	b578 <__ram_exceptions_end+0xfbfeb324>

0000b59c <__divdf3>:
    b59c:	defff204 	addi	sp,sp,-56
    b5a0:	dd400915 	stw	r21,36(sp)
    b5a4:	282ad53a 	srli	r21,r5,20
    b5a8:	dd000815 	stw	r20,32(sp)
    b5ac:	2828d7fa 	srli	r20,r5,31
    b5b0:	dc000415 	stw	r16,16(sp)
    b5b4:	04000434 	movhi	r16,16
    b5b8:	df000c15 	stw	fp,48(sp)
    b5bc:	843fffc4 	addi	r16,r16,-1
    b5c0:	dfc00d15 	stw	ra,52(sp)
    b5c4:	ddc00b15 	stw	r23,44(sp)
    b5c8:	dd800a15 	stw	r22,40(sp)
    b5cc:	dcc00715 	stw	r19,28(sp)
    b5d0:	dc800615 	stw	r18,24(sp)
    b5d4:	dc400515 	stw	r17,20(sp)
    b5d8:	ad41ffcc 	andi	r21,r21,2047
    b5dc:	2c20703a 	and	r16,r5,r16
    b5e0:	a7003fcc 	andi	fp,r20,255
    b5e4:	a8006126 	beq	r21,zero,b76c <__divdf3+0x1d0>
    b5e8:	0081ffc4 	movi	r2,2047
    b5ec:	2025883a 	mov	r18,r4
    b5f0:	a8803726 	beq	r21,r2,b6d0 <__divdf3+0x134>
    b5f4:	80800434 	orhi	r2,r16,16
    b5f8:	100490fa 	slli	r2,r2,3
    b5fc:	2020d77a 	srli	r16,r4,29
    b600:	202490fa 	slli	r18,r4,3
    b604:	ad7f0044 	addi	r21,r21,-1023
    b608:	80a0b03a 	or	r16,r16,r2
    b60c:	0027883a 	mov	r19,zero
    b610:	0013883a 	mov	r9,zero
    b614:	3804d53a 	srli	r2,r7,20
    b618:	382cd7fa 	srli	r22,r7,31
    b61c:	04400434 	movhi	r17,16
    b620:	8c7fffc4 	addi	r17,r17,-1
    b624:	1081ffcc 	andi	r2,r2,2047
    b628:	3011883a 	mov	r8,r6
    b62c:	3c62703a 	and	r17,r7,r17
    b630:	b5c03fcc 	andi	r23,r22,255
    b634:	10006c26 	beq	r2,zero,b7e8 <__divdf3+0x24c>
    b638:	00c1ffc4 	movi	r3,2047
    b63c:	10c06426 	beq	r2,r3,b7d0 <__divdf3+0x234>
    b640:	88c00434 	orhi	r3,r17,16
    b644:	180690fa 	slli	r3,r3,3
    b648:	3022d77a 	srli	r17,r6,29
    b64c:	301090fa 	slli	r8,r6,3
    b650:	10bf0044 	addi	r2,r2,-1023
    b654:	88e2b03a 	or	r17,r17,r3
    b658:	000f883a 	mov	r7,zero
    b65c:	a58cf03a 	xor	r6,r20,r22
    b660:	3cc8b03a 	or	r4,r7,r19
    b664:	a8abc83a 	sub	r21,r21,r2
    b668:	008003c4 	movi	r2,15
    b66c:	3007883a 	mov	r3,r6
    b670:	34c03fcc 	andi	r19,r6,255
    b674:	11009036 	bltu	r2,r4,b8b8 <__divdf3+0x31c>
    b678:	200890ba 	slli	r4,r4,2
    b67c:	00800074 	movhi	r2,1
    b680:	10ada404 	addi	r2,r2,-18800
    b684:	2089883a 	add	r4,r4,r2
    b688:	20800017 	ldw	r2,0(r4)
    b68c:	1000683a 	jmp	r2
    b690:	0000b8b8 	rdprs	zero,zero,738
    b694:	0000b708 	cmpgei	zero,zero,732
    b698:	0000b8a8 	cmpgeui	zero,zero,738
    b69c:	0000b6fc 	xorhi	zero,zero,731
    b6a0:	0000b8a8 	cmpgeui	zero,zero,738
    b6a4:	0000b87c 	xorhi	zero,zero,737
    b6a8:	0000b8a8 	cmpgeui	zero,zero,738
    b6ac:	0000b6fc 	xorhi	zero,zero,731
    b6b0:	0000b708 	cmpgei	zero,zero,732
    b6b4:	0000b708 	cmpgei	zero,zero,732
    b6b8:	0000b87c 	xorhi	zero,zero,737
    b6bc:	0000b6fc 	xorhi	zero,zero,731
    b6c0:	0000b6ec 	andhi	zero,zero,731
    b6c4:	0000b6ec 	andhi	zero,zero,731
    b6c8:	0000b6ec 	andhi	zero,zero,731
    b6cc:	0000bb9c 	xori	zero,zero,750
    b6d0:	2404b03a 	or	r2,r4,r16
    b6d4:	1000661e 	bne	r2,zero,b870 <__divdf3+0x2d4>
    b6d8:	04c00204 	movi	r19,8
    b6dc:	0021883a 	mov	r16,zero
    b6e0:	0025883a 	mov	r18,zero
    b6e4:	02400084 	movi	r9,2
    b6e8:	003fca06 	br	b614 <__ram_exceptions_end+0xfbfeb3c0>
    b6ec:	8023883a 	mov	r17,r16
    b6f0:	9011883a 	mov	r8,r18
    b6f4:	e02f883a 	mov	r23,fp
    b6f8:	480f883a 	mov	r7,r9
    b6fc:	00800084 	movi	r2,2
    b700:	3881311e 	bne	r7,r2,bbc8 <__divdf3+0x62c>
    b704:	b827883a 	mov	r19,r23
    b708:	98c0004c 	andi	r3,r19,1
    b70c:	0081ffc4 	movi	r2,2047
    b710:	000b883a 	mov	r5,zero
    b714:	0025883a 	mov	r18,zero
    b718:	1004953a 	slli	r2,r2,20
    b71c:	18c03fcc 	andi	r3,r3,255
    b720:	04400434 	movhi	r17,16
    b724:	8c7fffc4 	addi	r17,r17,-1
    b728:	180697fa 	slli	r3,r3,31
    b72c:	2c4a703a 	and	r5,r5,r17
    b730:	288ab03a 	or	r5,r5,r2
    b734:	28c6b03a 	or	r3,r5,r3
    b738:	9005883a 	mov	r2,r18
    b73c:	dfc00d17 	ldw	ra,52(sp)
    b740:	df000c17 	ldw	fp,48(sp)
    b744:	ddc00b17 	ldw	r23,44(sp)
    b748:	dd800a17 	ldw	r22,40(sp)
    b74c:	dd400917 	ldw	r21,36(sp)
    b750:	dd000817 	ldw	r20,32(sp)
    b754:	dcc00717 	ldw	r19,28(sp)
    b758:	dc800617 	ldw	r18,24(sp)
    b75c:	dc400517 	ldw	r17,20(sp)
    b760:	dc000417 	ldw	r16,16(sp)
    b764:	dec00e04 	addi	sp,sp,56
    b768:	f800283a 	ret
    b76c:	2404b03a 	or	r2,r4,r16
    b770:	2027883a 	mov	r19,r4
    b774:	10003926 	beq	r2,zero,b85c <__divdf3+0x2c0>
    b778:	80012e26 	beq	r16,zero,bc34 <__divdf3+0x698>
    b77c:	8009883a 	mov	r4,r16
    b780:	d9800315 	stw	r6,12(sp)
    b784:	d9c00215 	stw	r7,8(sp)
    b788:	000d2f40 	call	d2f4 <__clzsi2>
    b78c:	d9800317 	ldw	r6,12(sp)
    b790:	d9c00217 	ldw	r7,8(sp)
    b794:	113ffd44 	addi	r4,r2,-11
    b798:	00c00704 	movi	r3,28
    b79c:	19012116 	blt	r3,r4,bc24 <__divdf3+0x688>
    b7a0:	00c00744 	movi	r3,29
    b7a4:	147ffe04 	addi	r17,r2,-8
    b7a8:	1907c83a 	sub	r3,r3,r4
    b7ac:	8460983a 	sll	r16,r16,r17
    b7b0:	98c6d83a 	srl	r3,r19,r3
    b7b4:	9c64983a 	sll	r18,r19,r17
    b7b8:	1c20b03a 	or	r16,r3,r16
    b7bc:	1080fcc4 	addi	r2,r2,1011
    b7c0:	00abc83a 	sub	r21,zero,r2
    b7c4:	0027883a 	mov	r19,zero
    b7c8:	0013883a 	mov	r9,zero
    b7cc:	003f9106 	br	b614 <__ram_exceptions_end+0xfbfeb3c0>
    b7d0:	3446b03a 	or	r3,r6,r17
    b7d4:	18001f1e 	bne	r3,zero,b854 <__divdf3+0x2b8>
    b7d8:	0023883a 	mov	r17,zero
    b7dc:	0011883a 	mov	r8,zero
    b7e0:	01c00084 	movi	r7,2
    b7e4:	003f9d06 	br	b65c <__ram_exceptions_end+0xfbfeb408>
    b7e8:	3446b03a 	or	r3,r6,r17
    b7ec:	18001526 	beq	r3,zero,b844 <__divdf3+0x2a8>
    b7f0:	88011b26 	beq	r17,zero,bc60 <__divdf3+0x6c4>
    b7f4:	8809883a 	mov	r4,r17
    b7f8:	d9800315 	stw	r6,12(sp)
    b7fc:	da400115 	stw	r9,4(sp)
    b800:	000d2f40 	call	d2f4 <__clzsi2>
    b804:	d9800317 	ldw	r6,12(sp)
    b808:	da400117 	ldw	r9,4(sp)
    b80c:	113ffd44 	addi	r4,r2,-11
    b810:	00c00704 	movi	r3,28
    b814:	19010e16 	blt	r3,r4,bc50 <__divdf3+0x6b4>
    b818:	00c00744 	movi	r3,29
    b81c:	123ffe04 	addi	r8,r2,-8
    b820:	1907c83a 	sub	r3,r3,r4
    b824:	8a22983a 	sll	r17,r17,r8
    b828:	30c6d83a 	srl	r3,r6,r3
    b82c:	3210983a 	sll	r8,r6,r8
    b830:	1c62b03a 	or	r17,r3,r17
    b834:	1080fcc4 	addi	r2,r2,1011
    b838:	0085c83a 	sub	r2,zero,r2
    b83c:	000f883a 	mov	r7,zero
    b840:	003f8606 	br	b65c <__ram_exceptions_end+0xfbfeb408>
    b844:	0023883a 	mov	r17,zero
    b848:	0011883a 	mov	r8,zero
    b84c:	01c00044 	movi	r7,1
    b850:	003f8206 	br	b65c <__ram_exceptions_end+0xfbfeb408>
    b854:	01c000c4 	movi	r7,3
    b858:	003f8006 	br	b65c <__ram_exceptions_end+0xfbfeb408>
    b85c:	04c00104 	movi	r19,4
    b860:	0021883a 	mov	r16,zero
    b864:	0025883a 	mov	r18,zero
    b868:	02400044 	movi	r9,1
    b86c:	003f6906 	br	b614 <__ram_exceptions_end+0xfbfeb3c0>
    b870:	04c00304 	movi	r19,12
    b874:	024000c4 	movi	r9,3
    b878:	003f6606 	br	b614 <__ram_exceptions_end+0xfbfeb3c0>
    b87c:	01400434 	movhi	r5,16
    b880:	0007883a 	mov	r3,zero
    b884:	297fffc4 	addi	r5,r5,-1
    b888:	04bfffc4 	movi	r18,-1
    b88c:	0081ffc4 	movi	r2,2047
    b890:	003fa106 	br	b718 <__ram_exceptions_end+0xfbfeb4c4>
    b894:	00c00044 	movi	r3,1
    b898:	1887c83a 	sub	r3,r3,r2
    b89c:	01000e04 	movi	r4,56
    b8a0:	20c1210e 	bge	r4,r3,bd28 <__divdf3+0x78c>
    b8a4:	98c0004c 	andi	r3,r19,1
    b8a8:	0005883a 	mov	r2,zero
    b8ac:	000b883a 	mov	r5,zero
    b8b0:	0025883a 	mov	r18,zero
    b8b4:	003f9806 	br	b718 <__ram_exceptions_end+0xfbfeb4c4>
    b8b8:	8c00fd36 	bltu	r17,r16,bcb0 <__divdf3+0x714>
    b8bc:	8440fb26 	beq	r16,r17,bcac <__divdf3+0x710>
    b8c0:	8007883a 	mov	r3,r16
    b8c4:	ad7fffc4 	addi	r21,r21,-1
    b8c8:	0021883a 	mov	r16,zero
    b8cc:	4004d63a 	srli	r2,r8,24
    b8d0:	8822923a 	slli	r17,r17,8
    b8d4:	1809883a 	mov	r4,r3
    b8d8:	402c923a 	slli	r22,r8,8
    b8dc:	88b8b03a 	or	fp,r17,r2
    b8e0:	e028d43a 	srli	r20,fp,16
    b8e4:	d8c00015 	stw	r3,0(sp)
    b8e8:	e5ffffcc 	andi	r23,fp,65535
    b8ec:	a00b883a 	mov	r5,r20
    b8f0:	0000c040 	call	c04 <__udivsi3>
    b8f4:	d8c00017 	ldw	r3,0(sp)
    b8f8:	a00b883a 	mov	r5,r20
    b8fc:	d8800315 	stw	r2,12(sp)
    b900:	1809883a 	mov	r4,r3
    b904:	0000c680 	call	c68 <__umodsi3>
    b908:	d9800317 	ldw	r6,12(sp)
    b90c:	1006943a 	slli	r3,r2,16
    b910:	9004d43a 	srli	r2,r18,16
    b914:	b9a3383a 	mul	r17,r23,r6
    b918:	10c4b03a 	or	r2,r2,r3
    b91c:	1440062e 	bgeu	r2,r17,b938 <__divdf3+0x39c>
    b920:	1705883a 	add	r2,r2,fp
    b924:	30ffffc4 	addi	r3,r6,-1
    b928:	1700ee36 	bltu	r2,fp,bce4 <__divdf3+0x748>
    b92c:	1440ed2e 	bgeu	r2,r17,bce4 <__divdf3+0x748>
    b930:	31bfff84 	addi	r6,r6,-2
    b934:	1705883a 	add	r2,r2,fp
    b938:	1463c83a 	sub	r17,r2,r17
    b93c:	a00b883a 	mov	r5,r20
    b940:	8809883a 	mov	r4,r17
    b944:	d9800315 	stw	r6,12(sp)
    b948:	0000c040 	call	c04 <__udivsi3>
    b94c:	a00b883a 	mov	r5,r20
    b950:	8809883a 	mov	r4,r17
    b954:	d8800215 	stw	r2,8(sp)
    b958:	0000c680 	call	c68 <__umodsi3>
    b95c:	d9c00217 	ldw	r7,8(sp)
    b960:	1004943a 	slli	r2,r2,16
    b964:	94bfffcc 	andi	r18,r18,65535
    b968:	b9d1383a 	mul	r8,r23,r7
    b96c:	90a4b03a 	or	r18,r18,r2
    b970:	d9800317 	ldw	r6,12(sp)
    b974:	9200062e 	bgeu	r18,r8,b990 <__divdf3+0x3f4>
    b978:	9725883a 	add	r18,r18,fp
    b97c:	38bfffc4 	addi	r2,r7,-1
    b980:	9700d636 	bltu	r18,fp,bcdc <__divdf3+0x740>
    b984:	9200d52e 	bgeu	r18,r8,bcdc <__divdf3+0x740>
    b988:	39ffff84 	addi	r7,r7,-2
    b98c:	9725883a 	add	r18,r18,fp
    b990:	3004943a 	slli	r2,r6,16
    b994:	b012d43a 	srli	r9,r22,16
    b998:	b1bfffcc 	andi	r6,r22,65535
    b99c:	11e2b03a 	or	r17,r2,r7
    b9a0:	8806d43a 	srli	r3,r17,16
    b9a4:	893fffcc 	andi	r4,r17,65535
    b9a8:	218b383a 	mul	r5,r4,r6
    b9ac:	30c5383a 	mul	r2,r6,r3
    b9b0:	2249383a 	mul	r4,r4,r9
    b9b4:	280ed43a 	srli	r7,r5,16
    b9b8:	9225c83a 	sub	r18,r18,r8
    b9bc:	2089883a 	add	r4,r4,r2
    b9c0:	3909883a 	add	r4,r7,r4
    b9c4:	1a47383a 	mul	r3,r3,r9
    b9c8:	2080022e 	bgeu	r4,r2,b9d4 <__divdf3+0x438>
    b9cc:	00800074 	movhi	r2,1
    b9d0:	1887883a 	add	r3,r3,r2
    b9d4:	2004d43a 	srli	r2,r4,16
    b9d8:	2008943a 	slli	r4,r4,16
    b9dc:	297fffcc 	andi	r5,r5,65535
    b9e0:	10c7883a 	add	r3,r2,r3
    b9e4:	2149883a 	add	r4,r4,r5
    b9e8:	90c0a536 	bltu	r18,r3,bc80 <__divdf3+0x6e4>
    b9ec:	90c0bf26 	beq	r18,r3,bcec <__divdf3+0x750>
    b9f0:	90c7c83a 	sub	r3,r18,r3
    b9f4:	810fc83a 	sub	r7,r16,r4
    b9f8:	81e5803a 	cmpltu	r18,r16,r7
    b9fc:	1ca5c83a 	sub	r18,r3,r18
    ba00:	e480c126 	beq	fp,r18,bd08 <__divdf3+0x76c>
    ba04:	a00b883a 	mov	r5,r20
    ba08:	9009883a 	mov	r4,r18
    ba0c:	d9800315 	stw	r6,12(sp)
    ba10:	d9c00215 	stw	r7,8(sp)
    ba14:	da400115 	stw	r9,4(sp)
    ba18:	0000c040 	call	c04 <__udivsi3>
    ba1c:	a00b883a 	mov	r5,r20
    ba20:	9009883a 	mov	r4,r18
    ba24:	d8800015 	stw	r2,0(sp)
    ba28:	0000c680 	call	c68 <__umodsi3>
    ba2c:	d9c00217 	ldw	r7,8(sp)
    ba30:	da000017 	ldw	r8,0(sp)
    ba34:	1006943a 	slli	r3,r2,16
    ba38:	3804d43a 	srli	r2,r7,16
    ba3c:	ba21383a 	mul	r16,r23,r8
    ba40:	d9800317 	ldw	r6,12(sp)
    ba44:	10c4b03a 	or	r2,r2,r3
    ba48:	da400117 	ldw	r9,4(sp)
    ba4c:	1400062e 	bgeu	r2,r16,ba68 <__divdf3+0x4cc>
    ba50:	1705883a 	add	r2,r2,fp
    ba54:	40ffffc4 	addi	r3,r8,-1
    ba58:	1700ad36 	bltu	r2,fp,bd10 <__divdf3+0x774>
    ba5c:	1400ac2e 	bgeu	r2,r16,bd10 <__divdf3+0x774>
    ba60:	423fff84 	addi	r8,r8,-2
    ba64:	1705883a 	add	r2,r2,fp
    ba68:	1421c83a 	sub	r16,r2,r16
    ba6c:	a00b883a 	mov	r5,r20
    ba70:	8009883a 	mov	r4,r16
    ba74:	d9800315 	stw	r6,12(sp)
    ba78:	d9c00215 	stw	r7,8(sp)
    ba7c:	da000015 	stw	r8,0(sp)
    ba80:	da400115 	stw	r9,4(sp)
    ba84:	0000c040 	call	c04 <__udivsi3>
    ba88:	8009883a 	mov	r4,r16
    ba8c:	a00b883a 	mov	r5,r20
    ba90:	1025883a 	mov	r18,r2
    ba94:	0000c680 	call	c68 <__umodsi3>
    ba98:	d9c00217 	ldw	r7,8(sp)
    ba9c:	1004943a 	slli	r2,r2,16
    baa0:	bcaf383a 	mul	r23,r23,r18
    baa4:	393fffcc 	andi	r4,r7,65535
    baa8:	2088b03a 	or	r4,r4,r2
    baac:	d9800317 	ldw	r6,12(sp)
    bab0:	da000017 	ldw	r8,0(sp)
    bab4:	da400117 	ldw	r9,4(sp)
    bab8:	25c0062e 	bgeu	r4,r23,bad4 <__divdf3+0x538>
    babc:	2709883a 	add	r4,r4,fp
    bac0:	90bfffc4 	addi	r2,r18,-1
    bac4:	27009436 	bltu	r4,fp,bd18 <__divdf3+0x77c>
    bac8:	25c0932e 	bgeu	r4,r23,bd18 <__divdf3+0x77c>
    bacc:	94bfff84 	addi	r18,r18,-2
    bad0:	2709883a 	add	r4,r4,fp
    bad4:	4004943a 	slli	r2,r8,16
    bad8:	25efc83a 	sub	r23,r4,r23
    badc:	1490b03a 	or	r8,r2,r18
    bae0:	4008d43a 	srli	r4,r8,16
    bae4:	40ffffcc 	andi	r3,r8,65535
    bae8:	30c5383a 	mul	r2,r6,r3
    baec:	1a47383a 	mul	r3,r3,r9
    baf0:	310d383a 	mul	r6,r6,r4
    baf4:	100ad43a 	srli	r5,r2,16
    baf8:	4913383a 	mul	r9,r9,r4
    bafc:	1987883a 	add	r3,r3,r6
    bb00:	28c7883a 	add	r3,r5,r3
    bb04:	1980022e 	bgeu	r3,r6,bb10 <__divdf3+0x574>
    bb08:	01000074 	movhi	r4,1
    bb0c:	4913883a 	add	r9,r9,r4
    bb10:	1808d43a 	srli	r4,r3,16
    bb14:	1806943a 	slli	r3,r3,16
    bb18:	10bfffcc 	andi	r2,r2,65535
    bb1c:	2253883a 	add	r9,r4,r9
    bb20:	1887883a 	add	r3,r3,r2
    bb24:	ba403836 	bltu	r23,r9,bc08 <__divdf3+0x66c>
    bb28:	ba403626 	beq	r23,r9,bc04 <__divdf3+0x668>
    bb2c:	42000054 	ori	r8,r8,1
    bb30:	a880ffc4 	addi	r2,r21,1023
    bb34:	00bf570e 	bge	zero,r2,b894 <__ram_exceptions_end+0xfbfeb640>
    bb38:	40c001cc 	andi	r3,r8,7
    bb3c:	18000726 	beq	r3,zero,bb5c <__divdf3+0x5c0>
    bb40:	40c003cc 	andi	r3,r8,15
    bb44:	01000104 	movi	r4,4
    bb48:	19000426 	beq	r3,r4,bb5c <__divdf3+0x5c0>
    bb4c:	4107883a 	add	r3,r8,r4
    bb50:	1a11803a 	cmpltu	r8,r3,r8
    bb54:	8a23883a 	add	r17,r17,r8
    bb58:	1811883a 	mov	r8,r3
    bb5c:	88c0402c 	andhi	r3,r17,256
    bb60:	18000426 	beq	r3,zero,bb74 <__divdf3+0x5d8>
    bb64:	00ffc034 	movhi	r3,65280
    bb68:	18ffffc4 	addi	r3,r3,-1
    bb6c:	a8810004 	addi	r2,r21,1024
    bb70:	88e2703a 	and	r17,r17,r3
    bb74:	00c1ff84 	movi	r3,2046
    bb78:	18bee316 	blt	r3,r2,b708 <__ram_exceptions_end+0xfbfeb4b4>
    bb7c:	8824977a 	slli	r18,r17,29
    bb80:	4010d0fa 	srli	r8,r8,3
    bb84:	8822927a 	slli	r17,r17,9
    bb88:	1081ffcc 	andi	r2,r2,2047
    bb8c:	9224b03a 	or	r18,r18,r8
    bb90:	880ad33a 	srli	r5,r17,12
    bb94:	98c0004c 	andi	r3,r19,1
    bb98:	003edf06 	br	b718 <__ram_exceptions_end+0xfbfeb4c4>
    bb9c:	8080022c 	andhi	r2,r16,8
    bba0:	10001226 	beq	r2,zero,bbec <__divdf3+0x650>
    bba4:	8880022c 	andhi	r2,r17,8
    bba8:	1000101e 	bne	r2,zero,bbec <__divdf3+0x650>
    bbac:	00800434 	movhi	r2,16
    bbb0:	89400234 	orhi	r5,r17,8
    bbb4:	10bfffc4 	addi	r2,r2,-1
    bbb8:	b007883a 	mov	r3,r22
    bbbc:	288a703a 	and	r5,r5,r2
    bbc0:	4025883a 	mov	r18,r8
    bbc4:	003f3106 	br	b88c <__ram_exceptions_end+0xfbfeb638>
    bbc8:	008000c4 	movi	r2,3
    bbcc:	3880a626 	beq	r7,r2,be68 <__divdf3+0x8cc>
    bbd0:	00800044 	movi	r2,1
    bbd4:	3880521e 	bne	r7,r2,bd20 <__divdf3+0x784>
    bbd8:	b807883a 	mov	r3,r23
    bbdc:	0005883a 	mov	r2,zero
    bbe0:	000b883a 	mov	r5,zero
    bbe4:	0025883a 	mov	r18,zero
    bbe8:	003ecb06 	br	b718 <__ram_exceptions_end+0xfbfeb4c4>
    bbec:	00800434 	movhi	r2,16
    bbf0:	81400234 	orhi	r5,r16,8
    bbf4:	10bfffc4 	addi	r2,r2,-1
    bbf8:	a007883a 	mov	r3,r20
    bbfc:	288a703a 	and	r5,r5,r2
    bc00:	003f2206 	br	b88c <__ram_exceptions_end+0xfbfeb638>
    bc04:	183fca26 	beq	r3,zero,bb30 <__ram_exceptions_end+0xfbfeb8dc>
    bc08:	e5ef883a 	add	r23,fp,r23
    bc0c:	40bfffc4 	addi	r2,r8,-1
    bc10:	bf00392e 	bgeu	r23,fp,bcf8 <__divdf3+0x75c>
    bc14:	1011883a 	mov	r8,r2
    bc18:	ba7fc41e 	bne	r23,r9,bb2c <__ram_exceptions_end+0xfbfeb8d8>
    bc1c:	b0ffc31e 	bne	r22,r3,bb2c <__ram_exceptions_end+0xfbfeb8d8>
    bc20:	003fc306 	br	bb30 <__ram_exceptions_end+0xfbfeb8dc>
    bc24:	143ff604 	addi	r16,r2,-40
    bc28:	9c20983a 	sll	r16,r19,r16
    bc2c:	0025883a 	mov	r18,zero
    bc30:	003ee206 	br	b7bc <__ram_exceptions_end+0xfbfeb568>
    bc34:	d9800315 	stw	r6,12(sp)
    bc38:	d9c00215 	stw	r7,8(sp)
    bc3c:	000d2f40 	call	d2f4 <__clzsi2>
    bc40:	10800804 	addi	r2,r2,32
    bc44:	d9c00217 	ldw	r7,8(sp)
    bc48:	d9800317 	ldw	r6,12(sp)
    bc4c:	003ed106 	br	b794 <__ram_exceptions_end+0xfbfeb540>
    bc50:	147ff604 	addi	r17,r2,-40
    bc54:	3462983a 	sll	r17,r6,r17
    bc58:	0011883a 	mov	r8,zero
    bc5c:	003ef506 	br	b834 <__ram_exceptions_end+0xfbfeb5e0>
    bc60:	3009883a 	mov	r4,r6
    bc64:	d9800315 	stw	r6,12(sp)
    bc68:	da400115 	stw	r9,4(sp)
    bc6c:	000d2f40 	call	d2f4 <__clzsi2>
    bc70:	10800804 	addi	r2,r2,32
    bc74:	da400117 	ldw	r9,4(sp)
    bc78:	d9800317 	ldw	r6,12(sp)
    bc7c:	003ee306 	br	b80c <__ram_exceptions_end+0xfbfeb5b8>
    bc80:	85a1883a 	add	r16,r16,r22
    bc84:	8585803a 	cmpltu	r2,r16,r22
    bc88:	1705883a 	add	r2,r2,fp
    bc8c:	14a5883a 	add	r18,r2,r18
    bc90:	88bfffc4 	addi	r2,r17,-1
    bc94:	e4800c2e 	bgeu	fp,r18,bcc8 <__divdf3+0x72c>
    bc98:	90c03e36 	bltu	r18,r3,bd94 <__divdf3+0x7f8>
    bc9c:	1c806926 	beq	r3,r18,be44 <__divdf3+0x8a8>
    bca0:	90c7c83a 	sub	r3,r18,r3
    bca4:	1023883a 	mov	r17,r2
    bca8:	003f5206 	br	b9f4 <__ram_exceptions_end+0xfbfeb7a0>
    bcac:	923f0436 	bltu	r18,r8,b8c0 <__ram_exceptions_end+0xfbfeb66c>
    bcb0:	800897fa 	slli	r4,r16,31
    bcb4:	9004d07a 	srli	r2,r18,1
    bcb8:	8006d07a 	srli	r3,r16,1
    bcbc:	902097fa 	slli	r16,r18,31
    bcc0:	20a4b03a 	or	r18,r4,r2
    bcc4:	003f0106 	br	b8cc <__ram_exceptions_end+0xfbfeb678>
    bcc8:	e4bff51e 	bne	fp,r18,bca0 <__ram_exceptions_end+0xfbfeba4c>
    bccc:	85bff22e 	bgeu	r16,r22,bc98 <__ram_exceptions_end+0xfbfeba44>
    bcd0:	e0c7c83a 	sub	r3,fp,r3
    bcd4:	1023883a 	mov	r17,r2
    bcd8:	003f4606 	br	b9f4 <__ram_exceptions_end+0xfbfeb7a0>
    bcdc:	100f883a 	mov	r7,r2
    bce0:	003f2b06 	br	b990 <__ram_exceptions_end+0xfbfeb73c>
    bce4:	180d883a 	mov	r6,r3
    bce8:	003f1306 	br	b938 <__ram_exceptions_end+0xfbfeb6e4>
    bcec:	813fe436 	bltu	r16,r4,bc80 <__ram_exceptions_end+0xfbfeba2c>
    bcf0:	0007883a 	mov	r3,zero
    bcf4:	003f3f06 	br	b9f4 <__ram_exceptions_end+0xfbfeb7a0>
    bcf8:	ba402c36 	bltu	r23,r9,bdac <__divdf3+0x810>
    bcfc:	4dc05426 	beq	r9,r23,be50 <__divdf3+0x8b4>
    bd00:	1011883a 	mov	r8,r2
    bd04:	003f8906 	br	bb2c <__ram_exceptions_end+0xfbfeb8d8>
    bd08:	023fffc4 	movi	r8,-1
    bd0c:	003f8806 	br	bb30 <__ram_exceptions_end+0xfbfeb8dc>
    bd10:	1811883a 	mov	r8,r3
    bd14:	003f5406 	br	ba68 <__ram_exceptions_end+0xfbfeb814>
    bd18:	1025883a 	mov	r18,r2
    bd1c:	003f6d06 	br	bad4 <__ram_exceptions_end+0xfbfeb880>
    bd20:	b827883a 	mov	r19,r23
    bd24:	003f8206 	br	bb30 <__ram_exceptions_end+0xfbfeb8dc>
    bd28:	010007c4 	movi	r4,31
    bd2c:	20c02616 	blt	r4,r3,bdc8 <__divdf3+0x82c>
    bd30:	00800804 	movi	r2,32
    bd34:	10c5c83a 	sub	r2,r2,r3
    bd38:	888a983a 	sll	r5,r17,r2
    bd3c:	40c8d83a 	srl	r4,r8,r3
    bd40:	4084983a 	sll	r2,r8,r2
    bd44:	88e2d83a 	srl	r17,r17,r3
    bd48:	2906b03a 	or	r3,r5,r4
    bd4c:	1004c03a 	cmpne	r2,r2,zero
    bd50:	1886b03a 	or	r3,r3,r2
    bd54:	188001cc 	andi	r2,r3,7
    bd58:	10000726 	beq	r2,zero,bd78 <__divdf3+0x7dc>
    bd5c:	188003cc 	andi	r2,r3,15
    bd60:	01000104 	movi	r4,4
    bd64:	11000426 	beq	r2,r4,bd78 <__divdf3+0x7dc>
    bd68:	1805883a 	mov	r2,r3
    bd6c:	10c00104 	addi	r3,r2,4
    bd70:	1885803a 	cmpltu	r2,r3,r2
    bd74:	88a3883a 	add	r17,r17,r2
    bd78:	8880202c 	andhi	r2,r17,128
    bd7c:	10002726 	beq	r2,zero,be1c <__divdf3+0x880>
    bd80:	98c0004c 	andi	r3,r19,1
    bd84:	00800044 	movi	r2,1
    bd88:	000b883a 	mov	r5,zero
    bd8c:	0025883a 	mov	r18,zero
    bd90:	003e6106 	br	b718 <__ram_exceptions_end+0xfbfeb4c4>
    bd94:	85a1883a 	add	r16,r16,r22
    bd98:	8585803a 	cmpltu	r2,r16,r22
    bd9c:	1705883a 	add	r2,r2,fp
    bda0:	14a5883a 	add	r18,r2,r18
    bda4:	8c7fff84 	addi	r17,r17,-2
    bda8:	003f1106 	br	b9f0 <__ram_exceptions_end+0xfbfeb79c>
    bdac:	b589883a 	add	r4,r22,r22
    bdb0:	25ad803a 	cmpltu	r22,r4,r22
    bdb4:	b739883a 	add	fp,r22,fp
    bdb8:	40bfff84 	addi	r2,r8,-2
    bdbc:	bf2f883a 	add	r23,r23,fp
    bdc0:	202d883a 	mov	r22,r4
    bdc4:	003f9306 	br	bc14 <__ram_exceptions_end+0xfbfeb9c0>
    bdc8:	013ff844 	movi	r4,-31
    bdcc:	2085c83a 	sub	r2,r4,r2
    bdd0:	8888d83a 	srl	r4,r17,r2
    bdd4:	00800804 	movi	r2,32
    bdd8:	18802126 	beq	r3,r2,be60 <__divdf3+0x8c4>
    bddc:	00801004 	movi	r2,64
    bde0:	10c5c83a 	sub	r2,r2,r3
    bde4:	8884983a 	sll	r2,r17,r2
    bde8:	1204b03a 	or	r2,r2,r8
    bdec:	1004c03a 	cmpne	r2,r2,zero
    bdf0:	2084b03a 	or	r2,r4,r2
    bdf4:	144001cc 	andi	r17,r2,7
    bdf8:	88000d1e 	bne	r17,zero,be30 <__divdf3+0x894>
    bdfc:	000b883a 	mov	r5,zero
    be00:	1024d0fa 	srli	r18,r2,3
    be04:	98c0004c 	andi	r3,r19,1
    be08:	0005883a 	mov	r2,zero
    be0c:	9464b03a 	or	r18,r18,r17
    be10:	003e4106 	br	b718 <__ram_exceptions_end+0xfbfeb4c4>
    be14:	1007883a 	mov	r3,r2
    be18:	0023883a 	mov	r17,zero
    be1c:	880a927a 	slli	r5,r17,9
    be20:	1805883a 	mov	r2,r3
    be24:	8822977a 	slli	r17,r17,29
    be28:	280ad33a 	srli	r5,r5,12
    be2c:	003ff406 	br	be00 <__ram_exceptions_end+0xfbfebbac>
    be30:	10c003cc 	andi	r3,r2,15
    be34:	01000104 	movi	r4,4
    be38:	193ff626 	beq	r3,r4,be14 <__ram_exceptions_end+0xfbfebbc0>
    be3c:	0023883a 	mov	r17,zero
    be40:	003fca06 	br	bd6c <__ram_exceptions_end+0xfbfebb18>
    be44:	813fd336 	bltu	r16,r4,bd94 <__ram_exceptions_end+0xfbfebb40>
    be48:	1023883a 	mov	r17,r2
    be4c:	003fa806 	br	bcf0 <__ram_exceptions_end+0xfbfeba9c>
    be50:	b0ffd636 	bltu	r22,r3,bdac <__ram_exceptions_end+0xfbfebb58>
    be54:	1011883a 	mov	r8,r2
    be58:	b0ff341e 	bne	r22,r3,bb2c <__ram_exceptions_end+0xfbfeb8d8>
    be5c:	003f3406 	br	bb30 <__ram_exceptions_end+0xfbfeb8dc>
    be60:	0005883a 	mov	r2,zero
    be64:	003fe006 	br	bde8 <__ram_exceptions_end+0xfbfebb94>
    be68:	00800434 	movhi	r2,16
    be6c:	89400234 	orhi	r5,r17,8
    be70:	10bfffc4 	addi	r2,r2,-1
    be74:	b807883a 	mov	r3,r23
    be78:	288a703a 	and	r5,r5,r2
    be7c:	4025883a 	mov	r18,r8
    be80:	003e8206 	br	b88c <__ram_exceptions_end+0xfbfeb638>

0000be84 <__eqdf2>:
    be84:	2804d53a 	srli	r2,r5,20
    be88:	3806d53a 	srli	r3,r7,20
    be8c:	02000434 	movhi	r8,16
    be90:	423fffc4 	addi	r8,r8,-1
    be94:	1081ffcc 	andi	r2,r2,2047
    be98:	0281ffc4 	movi	r10,2047
    be9c:	2a12703a 	and	r9,r5,r8
    bea0:	18c1ffcc 	andi	r3,r3,2047
    bea4:	3a10703a 	and	r8,r7,r8
    bea8:	280ad7fa 	srli	r5,r5,31
    beac:	380ed7fa 	srli	r7,r7,31
    beb0:	12801026 	beq	r2,r10,bef4 <__eqdf2+0x70>
    beb4:	0281ffc4 	movi	r10,2047
    beb8:	1a800a26 	beq	r3,r10,bee4 <__eqdf2+0x60>
    bebc:	10c00226 	beq	r2,r3,bec8 <__eqdf2+0x44>
    bec0:	00800044 	movi	r2,1
    bec4:	f800283a 	ret
    bec8:	4a3ffd1e 	bne	r9,r8,bec0 <__ram_exceptions_end+0xfbfebc6c>
    becc:	21bffc1e 	bne	r4,r6,bec0 <__ram_exceptions_end+0xfbfebc6c>
    bed0:	29c00c26 	beq	r5,r7,bf04 <__eqdf2+0x80>
    bed4:	103ffa1e 	bne	r2,zero,bec0 <__ram_exceptions_end+0xfbfebc6c>
    bed8:	2244b03a 	or	r2,r4,r9
    bedc:	1004c03a 	cmpne	r2,r2,zero
    bee0:	f800283a 	ret
    bee4:	3214b03a 	or	r10,r6,r8
    bee8:	503ff426 	beq	r10,zero,bebc <__ram_exceptions_end+0xfbfebc68>
    beec:	00800044 	movi	r2,1
    bef0:	f800283a 	ret
    bef4:	2254b03a 	or	r10,r4,r9
    bef8:	503fee26 	beq	r10,zero,beb4 <__ram_exceptions_end+0xfbfebc60>
    befc:	00800044 	movi	r2,1
    bf00:	f800283a 	ret
    bf04:	0005883a 	mov	r2,zero
    bf08:	f800283a 	ret

0000bf0c <__gedf2>:
    bf0c:	2804d53a 	srli	r2,r5,20
    bf10:	3806d53a 	srli	r3,r7,20
    bf14:	02000434 	movhi	r8,16
    bf18:	423fffc4 	addi	r8,r8,-1
    bf1c:	1081ffcc 	andi	r2,r2,2047
    bf20:	0241ffc4 	movi	r9,2047
    bf24:	2a14703a 	and	r10,r5,r8
    bf28:	18c1ffcc 	andi	r3,r3,2047
    bf2c:	3a10703a 	and	r8,r7,r8
    bf30:	280ad7fa 	srli	r5,r5,31
    bf34:	380ed7fa 	srli	r7,r7,31
    bf38:	12401d26 	beq	r2,r9,bfb0 <__gedf2+0xa4>
    bf3c:	0241ffc4 	movi	r9,2047
    bf40:	1a401226 	beq	r3,r9,bf8c <__gedf2+0x80>
    bf44:	1000081e 	bne	r2,zero,bf68 <__gedf2+0x5c>
    bf48:	2296b03a 	or	r11,r4,r10
    bf4c:	5813003a 	cmpeq	r9,r11,zero
    bf50:	1800091e 	bne	r3,zero,bf78 <__gedf2+0x6c>
    bf54:	3218b03a 	or	r12,r6,r8
    bf58:	6000071e 	bne	r12,zero,bf78 <__gedf2+0x6c>
    bf5c:	0005883a 	mov	r2,zero
    bf60:	5800101e 	bne	r11,zero,bfa4 <__gedf2+0x98>
    bf64:	f800283a 	ret
    bf68:	18000c1e 	bne	r3,zero,bf9c <__gedf2+0x90>
    bf6c:	3212b03a 	or	r9,r6,r8
    bf70:	48000c26 	beq	r9,zero,bfa4 <__gedf2+0x98>
    bf74:	0013883a 	mov	r9,zero
    bf78:	39c03fcc 	andi	r7,r7,255
    bf7c:	48000826 	beq	r9,zero,bfa0 <__gedf2+0x94>
    bf80:	38000926 	beq	r7,zero,bfa8 <__gedf2+0x9c>
    bf84:	00800044 	movi	r2,1
    bf88:	f800283a 	ret
    bf8c:	3212b03a 	or	r9,r6,r8
    bf90:	483fec26 	beq	r9,zero,bf44 <__ram_exceptions_end+0xfbfebcf0>
    bf94:	00bfff84 	movi	r2,-2
    bf98:	f800283a 	ret
    bf9c:	39c03fcc 	andi	r7,r7,255
    bfa0:	29c00626 	beq	r5,r7,bfbc <__gedf2+0xb0>
    bfa4:	283ff726 	beq	r5,zero,bf84 <__ram_exceptions_end+0xfbfebd30>
    bfa8:	00bfffc4 	movi	r2,-1
    bfac:	f800283a 	ret
    bfb0:	2292b03a 	or	r9,r4,r10
    bfb4:	483fe126 	beq	r9,zero,bf3c <__ram_exceptions_end+0xfbfebce8>
    bfb8:	003ff606 	br	bf94 <__ram_exceptions_end+0xfbfebd40>
    bfbc:	18bff916 	blt	r3,r2,bfa4 <__ram_exceptions_end+0xfbfebd50>
    bfc0:	10c00316 	blt	r2,r3,bfd0 <__gedf2+0xc4>
    bfc4:	42bff736 	bltu	r8,r10,bfa4 <__ram_exceptions_end+0xfbfebd50>
    bfc8:	52000326 	beq	r10,r8,bfd8 <__gedf2+0xcc>
    bfcc:	5200042e 	bgeu	r10,r8,bfe0 <__gedf2+0xd4>
    bfd0:	283fec1e 	bne	r5,zero,bf84 <__ram_exceptions_end+0xfbfebd30>
    bfd4:	003ff406 	br	bfa8 <__ram_exceptions_end+0xfbfebd54>
    bfd8:	313ff236 	bltu	r6,r4,bfa4 <__ram_exceptions_end+0xfbfebd50>
    bfdc:	21bffc36 	bltu	r4,r6,bfd0 <__ram_exceptions_end+0xfbfebd7c>
    bfe0:	0005883a 	mov	r2,zero
    bfe4:	f800283a 	ret

0000bfe8 <__ledf2>:
    bfe8:	2804d53a 	srli	r2,r5,20
    bfec:	3810d53a 	srli	r8,r7,20
    bff0:	00c00434 	movhi	r3,16
    bff4:	18ffffc4 	addi	r3,r3,-1
    bff8:	1081ffcc 	andi	r2,r2,2047
    bffc:	0241ffc4 	movi	r9,2047
    c000:	28d4703a 	and	r10,r5,r3
    c004:	4201ffcc 	andi	r8,r8,2047
    c008:	38c6703a 	and	r3,r7,r3
    c00c:	280ad7fa 	srli	r5,r5,31
    c010:	380ed7fa 	srli	r7,r7,31
    c014:	12401f26 	beq	r2,r9,c094 <__ledf2+0xac>
    c018:	0241ffc4 	movi	r9,2047
    c01c:	42401426 	beq	r8,r9,c070 <__ledf2+0x88>
    c020:	1000091e 	bne	r2,zero,c048 <__ledf2+0x60>
    c024:	2296b03a 	or	r11,r4,r10
    c028:	5813003a 	cmpeq	r9,r11,zero
    c02c:	29403fcc 	andi	r5,r5,255
    c030:	40000a1e 	bne	r8,zero,c05c <__ledf2+0x74>
    c034:	30d8b03a 	or	r12,r6,r3
    c038:	6000081e 	bne	r12,zero,c05c <__ledf2+0x74>
    c03c:	0005883a 	mov	r2,zero
    c040:	5800111e 	bne	r11,zero,c088 <__ledf2+0xa0>
    c044:	f800283a 	ret
    c048:	29403fcc 	andi	r5,r5,255
    c04c:	40000c1e 	bne	r8,zero,c080 <__ledf2+0x98>
    c050:	30d2b03a 	or	r9,r6,r3
    c054:	48000c26 	beq	r9,zero,c088 <__ledf2+0xa0>
    c058:	0013883a 	mov	r9,zero
    c05c:	39c03fcc 	andi	r7,r7,255
    c060:	48000826 	beq	r9,zero,c084 <__ledf2+0x9c>
    c064:	38001126 	beq	r7,zero,c0ac <__ledf2+0xc4>
    c068:	00800044 	movi	r2,1
    c06c:	f800283a 	ret
    c070:	30d2b03a 	or	r9,r6,r3
    c074:	483fea26 	beq	r9,zero,c020 <__ram_exceptions_end+0xfbfebdcc>
    c078:	00800084 	movi	r2,2
    c07c:	f800283a 	ret
    c080:	39c03fcc 	andi	r7,r7,255
    c084:	39400726 	beq	r7,r5,c0a4 <__ledf2+0xbc>
    c088:	2800081e 	bne	r5,zero,c0ac <__ledf2+0xc4>
    c08c:	00800044 	movi	r2,1
    c090:	f800283a 	ret
    c094:	2292b03a 	or	r9,r4,r10
    c098:	483fdf26 	beq	r9,zero,c018 <__ram_exceptions_end+0xfbfebdc4>
    c09c:	00800084 	movi	r2,2
    c0a0:	f800283a 	ret
    c0a4:	4080030e 	bge	r8,r2,c0b4 <__ledf2+0xcc>
    c0a8:	383fef26 	beq	r7,zero,c068 <__ram_exceptions_end+0xfbfebe14>
    c0ac:	00bfffc4 	movi	r2,-1
    c0b0:	f800283a 	ret
    c0b4:	123feb16 	blt	r2,r8,c064 <__ram_exceptions_end+0xfbfebe10>
    c0b8:	1abff336 	bltu	r3,r10,c088 <__ram_exceptions_end+0xfbfebe34>
    c0bc:	50c00326 	beq	r10,r3,c0cc <__ledf2+0xe4>
    c0c0:	50c0042e 	bgeu	r10,r3,c0d4 <__ledf2+0xec>
    c0c4:	283fe81e 	bne	r5,zero,c068 <__ram_exceptions_end+0xfbfebe14>
    c0c8:	003ff806 	br	c0ac <__ram_exceptions_end+0xfbfebe58>
    c0cc:	313fee36 	bltu	r6,r4,c088 <__ram_exceptions_end+0xfbfebe34>
    c0d0:	21bffc36 	bltu	r4,r6,c0c4 <__ram_exceptions_end+0xfbfebe70>
    c0d4:	0005883a 	mov	r2,zero
    c0d8:	f800283a 	ret

0000c0dc <__muldf3>:
    c0dc:	defff304 	addi	sp,sp,-52
    c0e0:	2804d53a 	srli	r2,r5,20
    c0e4:	dd800915 	stw	r22,36(sp)
    c0e8:	282cd7fa 	srli	r22,r5,31
    c0ec:	dc000315 	stw	r16,12(sp)
    c0f0:	04000434 	movhi	r16,16
    c0f4:	dd400815 	stw	r21,32(sp)
    c0f8:	dc800515 	stw	r18,20(sp)
    c0fc:	843fffc4 	addi	r16,r16,-1
    c100:	dfc00c15 	stw	ra,48(sp)
    c104:	df000b15 	stw	fp,44(sp)
    c108:	ddc00a15 	stw	r23,40(sp)
    c10c:	dd000715 	stw	r20,28(sp)
    c110:	dcc00615 	stw	r19,24(sp)
    c114:	dc400415 	stw	r17,16(sp)
    c118:	1481ffcc 	andi	r18,r2,2047
    c11c:	2c20703a 	and	r16,r5,r16
    c120:	b02b883a 	mov	r21,r22
    c124:	b2403fcc 	andi	r9,r22,255
    c128:	90006026 	beq	r18,zero,c2ac <__muldf3+0x1d0>
    c12c:	0081ffc4 	movi	r2,2047
    c130:	2029883a 	mov	r20,r4
    c134:	90803626 	beq	r18,r2,c210 <__muldf3+0x134>
    c138:	80800434 	orhi	r2,r16,16
    c13c:	100490fa 	slli	r2,r2,3
    c140:	2020d77a 	srli	r16,r4,29
    c144:	202890fa 	slli	r20,r4,3
    c148:	94bf0044 	addi	r18,r18,-1023
    c14c:	80a0b03a 	or	r16,r16,r2
    c150:	0027883a 	mov	r19,zero
    c154:	0039883a 	mov	fp,zero
    c158:	3804d53a 	srli	r2,r7,20
    c15c:	382ed7fa 	srli	r23,r7,31
    c160:	04400434 	movhi	r17,16
    c164:	8c7fffc4 	addi	r17,r17,-1
    c168:	1081ffcc 	andi	r2,r2,2047
    c16c:	3011883a 	mov	r8,r6
    c170:	3c62703a 	and	r17,r7,r17
    c174:	ba803fcc 	andi	r10,r23,255
    c178:	10006d26 	beq	r2,zero,c330 <__muldf3+0x254>
    c17c:	00c1ffc4 	movi	r3,2047
    c180:	10c06526 	beq	r2,r3,c318 <__muldf3+0x23c>
    c184:	88c00434 	orhi	r3,r17,16
    c188:	180690fa 	slli	r3,r3,3
    c18c:	3022d77a 	srli	r17,r6,29
    c190:	301090fa 	slli	r8,r6,3
    c194:	10bf0044 	addi	r2,r2,-1023
    c198:	88e2b03a 	or	r17,r17,r3
    c19c:	000b883a 	mov	r5,zero
    c1a0:	9085883a 	add	r2,r18,r2
    c1a4:	2cc8b03a 	or	r4,r5,r19
    c1a8:	00c003c4 	movi	r3,15
    c1ac:	bdacf03a 	xor	r22,r23,r22
    c1b0:	12c00044 	addi	r11,r2,1
    c1b4:	19009936 	bltu	r3,r4,c41c <__muldf3+0x340>
    c1b8:	200890ba 	slli	r4,r4,2
    c1bc:	00c00074 	movhi	r3,1
    c1c0:	18f07404 	addi	r3,r3,-15920
    c1c4:	20c9883a 	add	r4,r4,r3
    c1c8:	20c00017 	ldw	r3,0(r4)
    c1cc:	1800683a 	jmp	r3
    c1d0:	0000c41c 	xori	zero,zero,784
    c1d4:	0000c230 	cmpltui	zero,zero,776
    c1d8:	0000c230 	cmpltui	zero,zero,776
    c1dc:	0000c22c 	andhi	zero,zero,776
    c1e0:	0000c3f8 	rdprs	zero,zero,783
    c1e4:	0000c3f8 	rdprs	zero,zero,783
    c1e8:	0000c3e0 	cmpeqi	zero,zero,783
    c1ec:	0000c22c 	andhi	zero,zero,776
    c1f0:	0000c3f8 	rdprs	zero,zero,783
    c1f4:	0000c3e0 	cmpeqi	zero,zero,783
    c1f8:	0000c3f8 	rdprs	zero,zero,783
    c1fc:	0000c22c 	andhi	zero,zero,776
    c200:	0000c408 	cmpgei	zero,zero,784
    c204:	0000c408 	cmpgei	zero,zero,784
    c208:	0000c408 	cmpgei	zero,zero,784
    c20c:	0000c624 	muli	zero,zero,792
    c210:	2404b03a 	or	r2,r4,r16
    c214:	10006f1e 	bne	r2,zero,c3d4 <__muldf3+0x2f8>
    c218:	04c00204 	movi	r19,8
    c21c:	0021883a 	mov	r16,zero
    c220:	0029883a 	mov	r20,zero
    c224:	07000084 	movi	fp,2
    c228:	003fcb06 	br	c158 <__ram_exceptions_end+0xfbfebf04>
    c22c:	502d883a 	mov	r22,r10
    c230:	00800084 	movi	r2,2
    c234:	28805726 	beq	r5,r2,c394 <__muldf3+0x2b8>
    c238:	008000c4 	movi	r2,3
    c23c:	28816626 	beq	r5,r2,c7d8 <__muldf3+0x6fc>
    c240:	00800044 	movi	r2,1
    c244:	2881411e 	bne	r5,r2,c74c <__muldf3+0x670>
    c248:	b02b883a 	mov	r21,r22
    c24c:	0005883a 	mov	r2,zero
    c250:	000b883a 	mov	r5,zero
    c254:	0029883a 	mov	r20,zero
    c258:	1004953a 	slli	r2,r2,20
    c25c:	a8c03fcc 	andi	r3,r21,255
    c260:	04400434 	movhi	r17,16
    c264:	8c7fffc4 	addi	r17,r17,-1
    c268:	180697fa 	slli	r3,r3,31
    c26c:	2c4a703a 	and	r5,r5,r17
    c270:	288ab03a 	or	r5,r5,r2
    c274:	28c6b03a 	or	r3,r5,r3
    c278:	a005883a 	mov	r2,r20
    c27c:	dfc00c17 	ldw	ra,48(sp)
    c280:	df000b17 	ldw	fp,44(sp)
    c284:	ddc00a17 	ldw	r23,40(sp)
    c288:	dd800917 	ldw	r22,36(sp)
    c28c:	dd400817 	ldw	r21,32(sp)
    c290:	dd000717 	ldw	r20,28(sp)
    c294:	dcc00617 	ldw	r19,24(sp)
    c298:	dc800517 	ldw	r18,20(sp)
    c29c:	dc400417 	ldw	r17,16(sp)
    c2a0:	dc000317 	ldw	r16,12(sp)
    c2a4:	dec00d04 	addi	sp,sp,52
    c2a8:	f800283a 	ret
    c2ac:	2404b03a 	or	r2,r4,r16
    c2b0:	2027883a 	mov	r19,r4
    c2b4:	10004226 	beq	r2,zero,c3c0 <__muldf3+0x2e4>
    c2b8:	8000fc26 	beq	r16,zero,c6ac <__muldf3+0x5d0>
    c2bc:	8009883a 	mov	r4,r16
    c2c0:	d9800215 	stw	r6,8(sp)
    c2c4:	d9c00015 	stw	r7,0(sp)
    c2c8:	da400115 	stw	r9,4(sp)
    c2cc:	000d2f40 	call	d2f4 <__clzsi2>
    c2d0:	d9800217 	ldw	r6,8(sp)
    c2d4:	d9c00017 	ldw	r7,0(sp)
    c2d8:	da400117 	ldw	r9,4(sp)
    c2dc:	113ffd44 	addi	r4,r2,-11
    c2e0:	00c00704 	movi	r3,28
    c2e4:	1900ed16 	blt	r3,r4,c69c <__muldf3+0x5c0>
    c2e8:	00c00744 	movi	r3,29
    c2ec:	147ffe04 	addi	r17,r2,-8
    c2f0:	1907c83a 	sub	r3,r3,r4
    c2f4:	8460983a 	sll	r16,r16,r17
    c2f8:	98c6d83a 	srl	r3,r19,r3
    c2fc:	9c68983a 	sll	r20,r19,r17
    c300:	1c20b03a 	or	r16,r3,r16
    c304:	1080fcc4 	addi	r2,r2,1011
    c308:	00a5c83a 	sub	r18,zero,r2
    c30c:	0027883a 	mov	r19,zero
    c310:	0039883a 	mov	fp,zero
    c314:	003f9006 	br	c158 <__ram_exceptions_end+0xfbfebf04>
    c318:	3446b03a 	or	r3,r6,r17
    c31c:	1800261e 	bne	r3,zero,c3b8 <__muldf3+0x2dc>
    c320:	0023883a 	mov	r17,zero
    c324:	0011883a 	mov	r8,zero
    c328:	01400084 	movi	r5,2
    c32c:	003f9c06 	br	c1a0 <__ram_exceptions_end+0xfbfebf4c>
    c330:	3446b03a 	or	r3,r6,r17
    c334:	18001c26 	beq	r3,zero,c3a8 <__muldf3+0x2cc>
    c338:	8800ce26 	beq	r17,zero,c674 <__muldf3+0x598>
    c33c:	8809883a 	mov	r4,r17
    c340:	d9800215 	stw	r6,8(sp)
    c344:	da400115 	stw	r9,4(sp)
    c348:	da800015 	stw	r10,0(sp)
    c34c:	000d2f40 	call	d2f4 <__clzsi2>
    c350:	d9800217 	ldw	r6,8(sp)
    c354:	da400117 	ldw	r9,4(sp)
    c358:	da800017 	ldw	r10,0(sp)
    c35c:	113ffd44 	addi	r4,r2,-11
    c360:	00c00704 	movi	r3,28
    c364:	1900bf16 	blt	r3,r4,c664 <__muldf3+0x588>
    c368:	00c00744 	movi	r3,29
    c36c:	123ffe04 	addi	r8,r2,-8
    c370:	1907c83a 	sub	r3,r3,r4
    c374:	8a22983a 	sll	r17,r17,r8
    c378:	30c6d83a 	srl	r3,r6,r3
    c37c:	3210983a 	sll	r8,r6,r8
    c380:	1c62b03a 	or	r17,r3,r17
    c384:	1080fcc4 	addi	r2,r2,1011
    c388:	0085c83a 	sub	r2,zero,r2
    c38c:	000b883a 	mov	r5,zero
    c390:	003f8306 	br	c1a0 <__ram_exceptions_end+0xfbfebf4c>
    c394:	b02b883a 	mov	r21,r22
    c398:	0081ffc4 	movi	r2,2047
    c39c:	000b883a 	mov	r5,zero
    c3a0:	0029883a 	mov	r20,zero
    c3a4:	003fac06 	br	c258 <__ram_exceptions_end+0xfbfec004>
    c3a8:	0023883a 	mov	r17,zero
    c3ac:	0011883a 	mov	r8,zero
    c3b0:	01400044 	movi	r5,1
    c3b4:	003f7a06 	br	c1a0 <__ram_exceptions_end+0xfbfebf4c>
    c3b8:	014000c4 	movi	r5,3
    c3bc:	003f7806 	br	c1a0 <__ram_exceptions_end+0xfbfebf4c>
    c3c0:	04c00104 	movi	r19,4
    c3c4:	0021883a 	mov	r16,zero
    c3c8:	0029883a 	mov	r20,zero
    c3cc:	07000044 	movi	fp,1
    c3d0:	003f6106 	br	c158 <__ram_exceptions_end+0xfbfebf04>
    c3d4:	04c00304 	movi	r19,12
    c3d8:	070000c4 	movi	fp,3
    c3dc:	003f5e06 	br	c158 <__ram_exceptions_end+0xfbfebf04>
    c3e0:	01400434 	movhi	r5,16
    c3e4:	002b883a 	mov	r21,zero
    c3e8:	297fffc4 	addi	r5,r5,-1
    c3ec:	053fffc4 	movi	r20,-1
    c3f0:	0081ffc4 	movi	r2,2047
    c3f4:	003f9806 	br	c258 <__ram_exceptions_end+0xfbfec004>
    c3f8:	8023883a 	mov	r17,r16
    c3fc:	a011883a 	mov	r8,r20
    c400:	e00b883a 	mov	r5,fp
    c404:	003f8a06 	br	c230 <__ram_exceptions_end+0xfbfebfdc>
    c408:	8023883a 	mov	r17,r16
    c40c:	a011883a 	mov	r8,r20
    c410:	482d883a 	mov	r22,r9
    c414:	e00b883a 	mov	r5,fp
    c418:	003f8506 	br	c230 <__ram_exceptions_end+0xfbfebfdc>
    c41c:	a00ad43a 	srli	r5,r20,16
    c420:	401ad43a 	srli	r13,r8,16
    c424:	a53fffcc 	andi	r20,r20,65535
    c428:	423fffcc 	andi	r8,r8,65535
    c42c:	4519383a 	mul	r12,r8,r20
    c430:	4147383a 	mul	r3,r8,r5
    c434:	6d09383a 	mul	r4,r13,r20
    c438:	600cd43a 	srli	r6,r12,16
    c43c:	2b5d383a 	mul	r14,r5,r13
    c440:	20c9883a 	add	r4,r4,r3
    c444:	310d883a 	add	r6,r6,r4
    c448:	30c0022e 	bgeu	r6,r3,c454 <__muldf3+0x378>
    c44c:	00c00074 	movhi	r3,1
    c450:	70dd883a 	add	r14,r14,r3
    c454:	8826d43a 	srli	r19,r17,16
    c458:	8bffffcc 	andi	r15,r17,65535
    c45c:	7d23383a 	mul	r17,r15,r20
    c460:	7949383a 	mul	r4,r15,r5
    c464:	9d29383a 	mul	r20,r19,r20
    c468:	8814d43a 	srli	r10,r17,16
    c46c:	3012943a 	slli	r9,r6,16
    c470:	a129883a 	add	r20,r20,r4
    c474:	633fffcc 	andi	r12,r12,65535
    c478:	5515883a 	add	r10,r10,r20
    c47c:	3006d43a 	srli	r3,r6,16
    c480:	4b13883a 	add	r9,r9,r12
    c484:	2ccb383a 	mul	r5,r5,r19
    c488:	5100022e 	bgeu	r10,r4,c494 <__muldf3+0x3b8>
    c48c:	01000074 	movhi	r4,1
    c490:	290b883a 	add	r5,r5,r4
    c494:	802ad43a 	srli	r21,r16,16
    c498:	843fffcc 	andi	r16,r16,65535
    c49c:	440d383a 	mul	r6,r8,r16
    c4a0:	4565383a 	mul	r18,r8,r21
    c4a4:	8349383a 	mul	r4,r16,r13
    c4a8:	500e943a 	slli	r7,r10,16
    c4ac:	3010d43a 	srli	r8,r6,16
    c4b0:	5028d43a 	srli	r20,r10,16
    c4b4:	2489883a 	add	r4,r4,r18
    c4b8:	8abfffcc 	andi	r10,r17,65535
    c4bc:	3a95883a 	add	r10,r7,r10
    c4c0:	4119883a 	add	r12,r8,r4
    c4c4:	a169883a 	add	r20,r20,r5
    c4c8:	1a87883a 	add	r3,r3,r10
    c4cc:	6d5b383a 	mul	r13,r13,r21
    c4d0:	6480022e 	bgeu	r12,r18,c4dc <__muldf3+0x400>
    c4d4:	01000074 	movhi	r4,1
    c4d8:	691b883a 	add	r13,r13,r4
    c4dc:	7c25383a 	mul	r18,r15,r16
    c4e0:	7d4b383a 	mul	r5,r15,r21
    c4e4:	84cf383a 	mul	r7,r16,r19
    c4e8:	901ed43a 	srli	r15,r18,16
    c4ec:	6008d43a 	srli	r4,r12,16
    c4f0:	6010943a 	slli	r8,r12,16
    c4f4:	394f883a 	add	r7,r7,r5
    c4f8:	333fffcc 	andi	r12,r6,65535
    c4fc:	79df883a 	add	r15,r15,r7
    c500:	235b883a 	add	r13,r4,r13
    c504:	9d63383a 	mul	r17,r19,r21
    c508:	4309883a 	add	r4,r8,r12
    c50c:	7940022e 	bgeu	r15,r5,c518 <__muldf3+0x43c>
    c510:	01400074 	movhi	r5,1
    c514:	8963883a 	add	r17,r17,r5
    c518:	780a943a 	slli	r5,r15,16
    c51c:	91bfffcc 	andi	r6,r18,65535
    c520:	70c7883a 	add	r3,r14,r3
    c524:	298d883a 	add	r6,r5,r6
    c528:	1a8f803a 	cmpltu	r7,r3,r10
    c52c:	350b883a 	add	r5,r6,r20
    c530:	20c7883a 	add	r3,r4,r3
    c534:	3955883a 	add	r10,r7,r5
    c538:	1909803a 	cmpltu	r4,r3,r4
    c53c:	6a91883a 	add	r8,r13,r10
    c540:	780cd43a 	srli	r6,r15,16
    c544:	2219883a 	add	r12,r4,r8
    c548:	2d0b803a 	cmpltu	r5,r5,r20
    c54c:	51cf803a 	cmpltu	r7,r10,r7
    c550:	29ceb03a 	or	r7,r5,r7
    c554:	4351803a 	cmpltu	r8,r8,r13
    c558:	610b803a 	cmpltu	r5,r12,r4
    c55c:	4148b03a 	or	r4,r8,r5
    c560:	398f883a 	add	r7,r7,r6
    c564:	3909883a 	add	r4,r7,r4
    c568:	1810927a 	slli	r8,r3,9
    c56c:	2449883a 	add	r4,r4,r17
    c570:	2008927a 	slli	r4,r4,9
    c574:	6022d5fa 	srli	r17,r12,23
    c578:	1806d5fa 	srli	r3,r3,23
    c57c:	4252b03a 	or	r9,r8,r9
    c580:	600a927a 	slli	r5,r12,9
    c584:	4810c03a 	cmpne	r8,r9,zero
    c588:	2462b03a 	or	r17,r4,r17
    c58c:	40c6b03a 	or	r3,r8,r3
    c590:	8900402c 	andhi	r4,r17,256
    c594:	1950b03a 	or	r8,r3,r5
    c598:	20000726 	beq	r4,zero,c5b8 <__muldf3+0x4dc>
    c59c:	4006d07a 	srli	r3,r8,1
    c5a0:	880497fa 	slli	r2,r17,31
    c5a4:	4200004c 	andi	r8,r8,1
    c5a8:	8822d07a 	srli	r17,r17,1
    c5ac:	1a10b03a 	or	r8,r3,r8
    c5b0:	1210b03a 	or	r8,r2,r8
    c5b4:	5805883a 	mov	r2,r11
    c5b8:	1140ffc4 	addi	r5,r2,1023
    c5bc:	0140440e 	bge	zero,r5,c6d0 <__muldf3+0x5f4>
    c5c0:	40c001cc 	andi	r3,r8,7
    c5c4:	18000726 	beq	r3,zero,c5e4 <__muldf3+0x508>
    c5c8:	40c003cc 	andi	r3,r8,15
    c5cc:	01000104 	movi	r4,4
    c5d0:	19000426 	beq	r3,r4,c5e4 <__muldf3+0x508>
    c5d4:	4107883a 	add	r3,r8,r4
    c5d8:	1a11803a 	cmpltu	r8,r3,r8
    c5dc:	8a23883a 	add	r17,r17,r8
    c5e0:	1811883a 	mov	r8,r3
    c5e4:	88c0402c 	andhi	r3,r17,256
    c5e8:	18000426 	beq	r3,zero,c5fc <__muldf3+0x520>
    c5ec:	11410004 	addi	r5,r2,1024
    c5f0:	00bfc034 	movhi	r2,65280
    c5f4:	10bfffc4 	addi	r2,r2,-1
    c5f8:	88a2703a 	and	r17,r17,r2
    c5fc:	0081ff84 	movi	r2,2046
    c600:	117f6416 	blt	r2,r5,c394 <__ram_exceptions_end+0xfbfec140>
    c604:	8828977a 	slli	r20,r17,29
    c608:	4010d0fa 	srli	r8,r8,3
    c60c:	8822927a 	slli	r17,r17,9
    c610:	2881ffcc 	andi	r2,r5,2047
    c614:	a228b03a 	or	r20,r20,r8
    c618:	880ad33a 	srli	r5,r17,12
    c61c:	b02b883a 	mov	r21,r22
    c620:	003f0d06 	br	c258 <__ram_exceptions_end+0xfbfec004>
    c624:	8080022c 	andhi	r2,r16,8
    c628:	10000926 	beq	r2,zero,c650 <__muldf3+0x574>
    c62c:	8880022c 	andhi	r2,r17,8
    c630:	1000071e 	bne	r2,zero,c650 <__muldf3+0x574>
    c634:	00800434 	movhi	r2,16
    c638:	89400234 	orhi	r5,r17,8
    c63c:	10bfffc4 	addi	r2,r2,-1
    c640:	b82b883a 	mov	r21,r23
    c644:	288a703a 	and	r5,r5,r2
    c648:	4029883a 	mov	r20,r8
    c64c:	003f6806 	br	c3f0 <__ram_exceptions_end+0xfbfec19c>
    c650:	00800434 	movhi	r2,16
    c654:	81400234 	orhi	r5,r16,8
    c658:	10bfffc4 	addi	r2,r2,-1
    c65c:	288a703a 	and	r5,r5,r2
    c660:	003f6306 	br	c3f0 <__ram_exceptions_end+0xfbfec19c>
    c664:	147ff604 	addi	r17,r2,-40
    c668:	3462983a 	sll	r17,r6,r17
    c66c:	0011883a 	mov	r8,zero
    c670:	003f4406 	br	c384 <__ram_exceptions_end+0xfbfec130>
    c674:	3009883a 	mov	r4,r6
    c678:	d9800215 	stw	r6,8(sp)
    c67c:	da400115 	stw	r9,4(sp)
    c680:	da800015 	stw	r10,0(sp)
    c684:	000d2f40 	call	d2f4 <__clzsi2>
    c688:	10800804 	addi	r2,r2,32
    c68c:	da800017 	ldw	r10,0(sp)
    c690:	da400117 	ldw	r9,4(sp)
    c694:	d9800217 	ldw	r6,8(sp)
    c698:	003f3006 	br	c35c <__ram_exceptions_end+0xfbfec108>
    c69c:	143ff604 	addi	r16,r2,-40
    c6a0:	9c20983a 	sll	r16,r19,r16
    c6a4:	0029883a 	mov	r20,zero
    c6a8:	003f1606 	br	c304 <__ram_exceptions_end+0xfbfec0b0>
    c6ac:	d9800215 	stw	r6,8(sp)
    c6b0:	d9c00015 	stw	r7,0(sp)
    c6b4:	da400115 	stw	r9,4(sp)
    c6b8:	000d2f40 	call	d2f4 <__clzsi2>
    c6bc:	10800804 	addi	r2,r2,32
    c6c0:	da400117 	ldw	r9,4(sp)
    c6c4:	d9c00017 	ldw	r7,0(sp)
    c6c8:	d9800217 	ldw	r6,8(sp)
    c6cc:	003f0306 	br	c2dc <__ram_exceptions_end+0xfbfec088>
    c6d0:	00c00044 	movi	r3,1
    c6d4:	1947c83a 	sub	r3,r3,r5
    c6d8:	00800e04 	movi	r2,56
    c6dc:	10feda16 	blt	r2,r3,c248 <__ram_exceptions_end+0xfbfebff4>
    c6e0:	008007c4 	movi	r2,31
    c6e4:	10c01b16 	blt	r2,r3,c754 <__muldf3+0x678>
    c6e8:	00800804 	movi	r2,32
    c6ec:	10c5c83a 	sub	r2,r2,r3
    c6f0:	888a983a 	sll	r5,r17,r2
    c6f4:	40c8d83a 	srl	r4,r8,r3
    c6f8:	4084983a 	sll	r2,r8,r2
    c6fc:	88e2d83a 	srl	r17,r17,r3
    c700:	2906b03a 	or	r3,r5,r4
    c704:	1004c03a 	cmpne	r2,r2,zero
    c708:	1886b03a 	or	r3,r3,r2
    c70c:	188001cc 	andi	r2,r3,7
    c710:	10000726 	beq	r2,zero,c730 <__muldf3+0x654>
    c714:	188003cc 	andi	r2,r3,15
    c718:	01000104 	movi	r4,4
    c71c:	11000426 	beq	r2,r4,c730 <__muldf3+0x654>
    c720:	1805883a 	mov	r2,r3
    c724:	10c00104 	addi	r3,r2,4
    c728:	1885803a 	cmpltu	r2,r3,r2
    c72c:	88a3883a 	add	r17,r17,r2
    c730:	8880202c 	andhi	r2,r17,128
    c734:	10001c26 	beq	r2,zero,c7a8 <__muldf3+0x6cc>
    c738:	b02b883a 	mov	r21,r22
    c73c:	00800044 	movi	r2,1
    c740:	000b883a 	mov	r5,zero
    c744:	0029883a 	mov	r20,zero
    c748:	003ec306 	br	c258 <__ram_exceptions_end+0xfbfec004>
    c74c:	5805883a 	mov	r2,r11
    c750:	003f9906 	br	c5b8 <__ram_exceptions_end+0xfbfec364>
    c754:	00bff844 	movi	r2,-31
    c758:	1145c83a 	sub	r2,r2,r5
    c75c:	8888d83a 	srl	r4,r17,r2
    c760:	00800804 	movi	r2,32
    c764:	18801a26 	beq	r3,r2,c7d0 <__muldf3+0x6f4>
    c768:	00801004 	movi	r2,64
    c76c:	10c5c83a 	sub	r2,r2,r3
    c770:	8884983a 	sll	r2,r17,r2
    c774:	1204b03a 	or	r2,r2,r8
    c778:	1004c03a 	cmpne	r2,r2,zero
    c77c:	2084b03a 	or	r2,r4,r2
    c780:	144001cc 	andi	r17,r2,7
    c784:	88000d1e 	bne	r17,zero,c7bc <__muldf3+0x6e0>
    c788:	000b883a 	mov	r5,zero
    c78c:	1028d0fa 	srli	r20,r2,3
    c790:	b02b883a 	mov	r21,r22
    c794:	0005883a 	mov	r2,zero
    c798:	a468b03a 	or	r20,r20,r17
    c79c:	003eae06 	br	c258 <__ram_exceptions_end+0xfbfec004>
    c7a0:	1007883a 	mov	r3,r2
    c7a4:	0023883a 	mov	r17,zero
    c7a8:	880a927a 	slli	r5,r17,9
    c7ac:	1805883a 	mov	r2,r3
    c7b0:	8822977a 	slli	r17,r17,29
    c7b4:	280ad33a 	srli	r5,r5,12
    c7b8:	003ff406 	br	c78c <__ram_exceptions_end+0xfbfec538>
    c7bc:	10c003cc 	andi	r3,r2,15
    c7c0:	01000104 	movi	r4,4
    c7c4:	193ff626 	beq	r3,r4,c7a0 <__ram_exceptions_end+0xfbfec54c>
    c7c8:	0023883a 	mov	r17,zero
    c7cc:	003fd506 	br	c724 <__ram_exceptions_end+0xfbfec4d0>
    c7d0:	0005883a 	mov	r2,zero
    c7d4:	003fe706 	br	c774 <__ram_exceptions_end+0xfbfec520>
    c7d8:	00800434 	movhi	r2,16
    c7dc:	89400234 	orhi	r5,r17,8
    c7e0:	10bfffc4 	addi	r2,r2,-1
    c7e4:	b02b883a 	mov	r21,r22
    c7e8:	288a703a 	and	r5,r5,r2
    c7ec:	4029883a 	mov	r20,r8
    c7f0:	003eff06 	br	c3f0 <__ram_exceptions_end+0xfbfec19c>

0000c7f4 <__subdf3>:
    c7f4:	02000434 	movhi	r8,16
    c7f8:	423fffc4 	addi	r8,r8,-1
    c7fc:	defffb04 	addi	sp,sp,-20
    c800:	2a14703a 	and	r10,r5,r8
    c804:	3812d53a 	srli	r9,r7,20
    c808:	3a10703a 	and	r8,r7,r8
    c80c:	2006d77a 	srli	r3,r4,29
    c810:	3004d77a 	srli	r2,r6,29
    c814:	dc000015 	stw	r16,0(sp)
    c818:	501490fa 	slli	r10,r10,3
    c81c:	2820d53a 	srli	r16,r5,20
    c820:	401090fa 	slli	r8,r8,3
    c824:	dc800215 	stw	r18,8(sp)
    c828:	dc400115 	stw	r17,4(sp)
    c82c:	dfc00415 	stw	ra,16(sp)
    c830:	202290fa 	slli	r17,r4,3
    c834:	dcc00315 	stw	r19,12(sp)
    c838:	4a41ffcc 	andi	r9,r9,2047
    c83c:	0101ffc4 	movi	r4,2047
    c840:	2824d7fa 	srli	r18,r5,31
    c844:	8401ffcc 	andi	r16,r16,2047
    c848:	50c6b03a 	or	r3,r10,r3
    c84c:	380ed7fa 	srli	r7,r7,31
    c850:	408ab03a 	or	r5,r8,r2
    c854:	300c90fa 	slli	r6,r6,3
    c858:	49009626 	beq	r9,r4,cab4 <__subdf3+0x2c0>
    c85c:	39c0005c 	xori	r7,r7,1
    c860:	8245c83a 	sub	r2,r16,r9
    c864:	3c807426 	beq	r7,r18,ca38 <__subdf3+0x244>
    c868:	0080af0e 	bge	zero,r2,cb28 <__subdf3+0x334>
    c86c:	48002a1e 	bne	r9,zero,c918 <__subdf3+0x124>
    c870:	2988b03a 	or	r4,r5,r6
    c874:	20009a1e 	bne	r4,zero,cae0 <__subdf3+0x2ec>
    c878:	888001cc 	andi	r2,r17,7
    c87c:	10000726 	beq	r2,zero,c89c <__subdf3+0xa8>
    c880:	888003cc 	andi	r2,r17,15
    c884:	01000104 	movi	r4,4
    c888:	11000426 	beq	r2,r4,c89c <__subdf3+0xa8>
    c88c:	890b883a 	add	r5,r17,r4
    c890:	2c63803a 	cmpltu	r17,r5,r17
    c894:	1c47883a 	add	r3,r3,r17
    c898:	2823883a 	mov	r17,r5
    c89c:	1880202c 	andhi	r2,r3,128
    c8a0:	10005926 	beq	r2,zero,ca08 <__subdf3+0x214>
    c8a4:	84000044 	addi	r16,r16,1
    c8a8:	0081ffc4 	movi	r2,2047
    c8ac:	8080be26 	beq	r16,r2,cba8 <__subdf3+0x3b4>
    c8b0:	017fe034 	movhi	r5,65408
    c8b4:	297fffc4 	addi	r5,r5,-1
    c8b8:	1946703a 	and	r3,r3,r5
    c8bc:	1804977a 	slli	r2,r3,29
    c8c0:	1806927a 	slli	r3,r3,9
    c8c4:	8822d0fa 	srli	r17,r17,3
    c8c8:	8401ffcc 	andi	r16,r16,2047
    c8cc:	180ad33a 	srli	r5,r3,12
    c8d0:	9100004c 	andi	r4,r18,1
    c8d4:	1444b03a 	or	r2,r2,r17
    c8d8:	80c1ffcc 	andi	r3,r16,2047
    c8dc:	1820953a 	slli	r16,r3,20
    c8e0:	20c03fcc 	andi	r3,r4,255
    c8e4:	180897fa 	slli	r4,r3,31
    c8e8:	00c00434 	movhi	r3,16
    c8ec:	18ffffc4 	addi	r3,r3,-1
    c8f0:	28c6703a 	and	r3,r5,r3
    c8f4:	1c06b03a 	or	r3,r3,r16
    c8f8:	1906b03a 	or	r3,r3,r4
    c8fc:	dfc00417 	ldw	ra,16(sp)
    c900:	dcc00317 	ldw	r19,12(sp)
    c904:	dc800217 	ldw	r18,8(sp)
    c908:	dc400117 	ldw	r17,4(sp)
    c90c:	dc000017 	ldw	r16,0(sp)
    c910:	dec00504 	addi	sp,sp,20
    c914:	f800283a 	ret
    c918:	0101ffc4 	movi	r4,2047
    c91c:	813fd626 	beq	r16,r4,c878 <__ram_exceptions_end+0xfbfec624>
    c920:	29402034 	orhi	r5,r5,128
    c924:	01000e04 	movi	r4,56
    c928:	2080a316 	blt	r4,r2,cbb8 <__subdf3+0x3c4>
    c92c:	010007c4 	movi	r4,31
    c930:	2080c616 	blt	r4,r2,cc4c <__subdf3+0x458>
    c934:	01000804 	movi	r4,32
    c938:	2089c83a 	sub	r4,r4,r2
    c93c:	2910983a 	sll	r8,r5,r4
    c940:	308ed83a 	srl	r7,r6,r2
    c944:	3108983a 	sll	r4,r6,r4
    c948:	2884d83a 	srl	r2,r5,r2
    c94c:	41ccb03a 	or	r6,r8,r7
    c950:	2008c03a 	cmpne	r4,r4,zero
    c954:	310cb03a 	or	r6,r6,r4
    c958:	898dc83a 	sub	r6,r17,r6
    c95c:	89a3803a 	cmpltu	r17,r17,r6
    c960:	1887c83a 	sub	r3,r3,r2
    c964:	1c47c83a 	sub	r3,r3,r17
    c968:	3023883a 	mov	r17,r6
    c96c:	1880202c 	andhi	r2,r3,128
    c970:	10002326 	beq	r2,zero,ca00 <__subdf3+0x20c>
    c974:	04c02034 	movhi	r19,128
    c978:	9cffffc4 	addi	r19,r19,-1
    c97c:	1ce6703a 	and	r19,r3,r19
    c980:	98007a26 	beq	r19,zero,cb6c <__subdf3+0x378>
    c984:	9809883a 	mov	r4,r19
    c988:	000d2f40 	call	d2f4 <__clzsi2>
    c98c:	113ffe04 	addi	r4,r2,-8
    c990:	00c007c4 	movi	r3,31
    c994:	19007b16 	blt	r3,r4,cb84 <__subdf3+0x390>
    c998:	00800804 	movi	r2,32
    c99c:	1105c83a 	sub	r2,r2,r4
    c9a0:	8884d83a 	srl	r2,r17,r2
    c9a4:	9906983a 	sll	r3,r19,r4
    c9a8:	8922983a 	sll	r17,r17,r4
    c9ac:	10c4b03a 	or	r2,r2,r3
    c9b0:	24007816 	blt	r4,r16,cb94 <__subdf3+0x3a0>
    c9b4:	2421c83a 	sub	r16,r4,r16
    c9b8:	80c00044 	addi	r3,r16,1
    c9bc:	010007c4 	movi	r4,31
    c9c0:	20c09516 	blt	r4,r3,cc18 <__subdf3+0x424>
    c9c4:	01400804 	movi	r5,32
    c9c8:	28cbc83a 	sub	r5,r5,r3
    c9cc:	88c8d83a 	srl	r4,r17,r3
    c9d0:	8962983a 	sll	r17,r17,r5
    c9d4:	114a983a 	sll	r5,r2,r5
    c9d8:	10c6d83a 	srl	r3,r2,r3
    c9dc:	8804c03a 	cmpne	r2,r17,zero
    c9e0:	290ab03a 	or	r5,r5,r4
    c9e4:	28a2b03a 	or	r17,r5,r2
    c9e8:	0021883a 	mov	r16,zero
    c9ec:	003fa206 	br	c878 <__ram_exceptions_end+0xfbfec624>
    c9f0:	2090b03a 	or	r8,r4,r2
    c9f4:	40018e26 	beq	r8,zero,d030 <__subdf3+0x83c>
    c9f8:	1007883a 	mov	r3,r2
    c9fc:	2023883a 	mov	r17,r4
    ca00:	888001cc 	andi	r2,r17,7
    ca04:	103f9e1e 	bne	r2,zero,c880 <__ram_exceptions_end+0xfbfec62c>
    ca08:	1804977a 	slli	r2,r3,29
    ca0c:	8822d0fa 	srli	r17,r17,3
    ca10:	1810d0fa 	srli	r8,r3,3
    ca14:	9100004c 	andi	r4,r18,1
    ca18:	1444b03a 	or	r2,r2,r17
    ca1c:	00c1ffc4 	movi	r3,2047
    ca20:	80c02826 	beq	r16,r3,cac4 <__subdf3+0x2d0>
    ca24:	01400434 	movhi	r5,16
    ca28:	297fffc4 	addi	r5,r5,-1
    ca2c:	80e0703a 	and	r16,r16,r3
    ca30:	414a703a 	and	r5,r8,r5
    ca34:	003fa806 	br	c8d8 <__ram_exceptions_end+0xfbfec684>
    ca38:	0080630e 	bge	zero,r2,cbc8 <__subdf3+0x3d4>
    ca3c:	48003026 	beq	r9,zero,cb00 <__subdf3+0x30c>
    ca40:	0101ffc4 	movi	r4,2047
    ca44:	813f8c26 	beq	r16,r4,c878 <__ram_exceptions_end+0xfbfec624>
    ca48:	29402034 	orhi	r5,r5,128
    ca4c:	01000e04 	movi	r4,56
    ca50:	2080a90e 	bge	r4,r2,ccf8 <__subdf3+0x504>
    ca54:	298cb03a 	or	r6,r5,r6
    ca58:	3012c03a 	cmpne	r9,r6,zero
    ca5c:	0005883a 	mov	r2,zero
    ca60:	4c53883a 	add	r9,r9,r17
    ca64:	4c63803a 	cmpltu	r17,r9,r17
    ca68:	10c7883a 	add	r3,r2,r3
    ca6c:	88c7883a 	add	r3,r17,r3
    ca70:	4823883a 	mov	r17,r9
    ca74:	1880202c 	andhi	r2,r3,128
    ca78:	1000d026 	beq	r2,zero,cdbc <__subdf3+0x5c8>
    ca7c:	84000044 	addi	r16,r16,1
    ca80:	0081ffc4 	movi	r2,2047
    ca84:	8080fe26 	beq	r16,r2,ce80 <__subdf3+0x68c>
    ca88:	00bfe034 	movhi	r2,65408
    ca8c:	10bfffc4 	addi	r2,r2,-1
    ca90:	1886703a 	and	r3,r3,r2
    ca94:	880ad07a 	srli	r5,r17,1
    ca98:	180497fa 	slli	r2,r3,31
    ca9c:	8900004c 	andi	r4,r17,1
    caa0:	2922b03a 	or	r17,r5,r4
    caa4:	1806d07a 	srli	r3,r3,1
    caa8:	1462b03a 	or	r17,r2,r17
    caac:	3825883a 	mov	r18,r7
    cab0:	003f7106 	br	c878 <__ram_exceptions_end+0xfbfec624>
    cab4:	2984b03a 	or	r2,r5,r6
    cab8:	103f6826 	beq	r2,zero,c85c <__ram_exceptions_end+0xfbfec608>
    cabc:	39c03fcc 	andi	r7,r7,255
    cac0:	003f6706 	br	c860 <__ram_exceptions_end+0xfbfec60c>
    cac4:	4086b03a 	or	r3,r8,r2
    cac8:	18015226 	beq	r3,zero,d014 <__subdf3+0x820>
    cacc:	00c00434 	movhi	r3,16
    cad0:	41400234 	orhi	r5,r8,8
    cad4:	18ffffc4 	addi	r3,r3,-1
    cad8:	28ca703a 	and	r5,r5,r3
    cadc:	003f7e06 	br	c8d8 <__ram_exceptions_end+0xfbfec684>
    cae0:	10bfffc4 	addi	r2,r2,-1
    cae4:	1000491e 	bne	r2,zero,cc0c <__subdf3+0x418>
    cae8:	898fc83a 	sub	r7,r17,r6
    caec:	89e3803a 	cmpltu	r17,r17,r7
    caf0:	1947c83a 	sub	r3,r3,r5
    caf4:	1c47c83a 	sub	r3,r3,r17
    caf8:	3823883a 	mov	r17,r7
    cafc:	003f9b06 	br	c96c <__ram_exceptions_end+0xfbfec718>
    cb00:	2988b03a 	or	r4,r5,r6
    cb04:	203f5c26 	beq	r4,zero,c878 <__ram_exceptions_end+0xfbfec624>
    cb08:	10bfffc4 	addi	r2,r2,-1
    cb0c:	1000931e 	bne	r2,zero,cd5c <__subdf3+0x568>
    cb10:	898d883a 	add	r6,r17,r6
    cb14:	3463803a 	cmpltu	r17,r6,r17
    cb18:	1947883a 	add	r3,r3,r5
    cb1c:	88c7883a 	add	r3,r17,r3
    cb20:	3023883a 	mov	r17,r6
    cb24:	003fd306 	br	ca74 <__ram_exceptions_end+0xfbfec820>
    cb28:	1000541e 	bne	r2,zero,cc7c <__subdf3+0x488>
    cb2c:	80800044 	addi	r2,r16,1
    cb30:	1081ffcc 	andi	r2,r2,2047
    cb34:	01000044 	movi	r4,1
    cb38:	2080a20e 	bge	r4,r2,cdc4 <__subdf3+0x5d0>
    cb3c:	8989c83a 	sub	r4,r17,r6
    cb40:	8905803a 	cmpltu	r2,r17,r4
    cb44:	1967c83a 	sub	r19,r3,r5
    cb48:	98a7c83a 	sub	r19,r19,r2
    cb4c:	9880202c 	andhi	r2,r19,128
    cb50:	10006326 	beq	r2,zero,cce0 <__subdf3+0x4ec>
    cb54:	3463c83a 	sub	r17,r6,r17
    cb58:	28c7c83a 	sub	r3,r5,r3
    cb5c:	344d803a 	cmpltu	r6,r6,r17
    cb60:	19a7c83a 	sub	r19,r3,r6
    cb64:	3825883a 	mov	r18,r7
    cb68:	983f861e 	bne	r19,zero,c984 <__ram_exceptions_end+0xfbfec730>
    cb6c:	8809883a 	mov	r4,r17
    cb70:	000d2f40 	call	d2f4 <__clzsi2>
    cb74:	10800804 	addi	r2,r2,32
    cb78:	113ffe04 	addi	r4,r2,-8
    cb7c:	00c007c4 	movi	r3,31
    cb80:	193f850e 	bge	r3,r4,c998 <__ram_exceptions_end+0xfbfec744>
    cb84:	10bff604 	addi	r2,r2,-40
    cb88:	8884983a 	sll	r2,r17,r2
    cb8c:	0023883a 	mov	r17,zero
    cb90:	243f880e 	bge	r4,r16,c9b4 <__ram_exceptions_end+0xfbfec760>
    cb94:	00ffe034 	movhi	r3,65408
    cb98:	18ffffc4 	addi	r3,r3,-1
    cb9c:	8121c83a 	sub	r16,r16,r4
    cba0:	10c6703a 	and	r3,r2,r3
    cba4:	003f3406 	br	c878 <__ram_exceptions_end+0xfbfec624>
    cba8:	9100004c 	andi	r4,r18,1
    cbac:	000b883a 	mov	r5,zero
    cbb0:	0005883a 	mov	r2,zero
    cbb4:	003f4806 	br	c8d8 <__ram_exceptions_end+0xfbfec684>
    cbb8:	298cb03a 	or	r6,r5,r6
    cbbc:	300cc03a 	cmpne	r6,r6,zero
    cbc0:	0005883a 	mov	r2,zero
    cbc4:	003f6406 	br	c958 <__ram_exceptions_end+0xfbfec704>
    cbc8:	10009a1e 	bne	r2,zero,ce34 <__subdf3+0x640>
    cbcc:	82400044 	addi	r9,r16,1
    cbd0:	4881ffcc 	andi	r2,r9,2047
    cbd4:	02800044 	movi	r10,1
    cbd8:	5080670e 	bge	r10,r2,cd78 <__subdf3+0x584>
    cbdc:	0081ffc4 	movi	r2,2047
    cbe0:	4880af26 	beq	r9,r2,cea0 <__subdf3+0x6ac>
    cbe4:	898d883a 	add	r6,r17,r6
    cbe8:	1945883a 	add	r2,r3,r5
    cbec:	3447803a 	cmpltu	r3,r6,r17
    cbf0:	1887883a 	add	r3,r3,r2
    cbf4:	182297fa 	slli	r17,r3,31
    cbf8:	300cd07a 	srli	r6,r6,1
    cbfc:	1806d07a 	srli	r3,r3,1
    cc00:	4821883a 	mov	r16,r9
    cc04:	89a2b03a 	or	r17,r17,r6
    cc08:	003f1b06 	br	c878 <__ram_exceptions_end+0xfbfec624>
    cc0c:	0101ffc4 	movi	r4,2047
    cc10:	813f441e 	bne	r16,r4,c924 <__ram_exceptions_end+0xfbfec6d0>
    cc14:	003f1806 	br	c878 <__ram_exceptions_end+0xfbfec624>
    cc18:	843ff844 	addi	r16,r16,-31
    cc1c:	01400804 	movi	r5,32
    cc20:	1408d83a 	srl	r4,r2,r16
    cc24:	19405026 	beq	r3,r5,cd68 <__subdf3+0x574>
    cc28:	01401004 	movi	r5,64
    cc2c:	28c7c83a 	sub	r3,r5,r3
    cc30:	10c4983a 	sll	r2,r2,r3
    cc34:	88a2b03a 	or	r17,r17,r2
    cc38:	8822c03a 	cmpne	r17,r17,zero
    cc3c:	2462b03a 	or	r17,r4,r17
    cc40:	0007883a 	mov	r3,zero
    cc44:	0021883a 	mov	r16,zero
    cc48:	003f6d06 	br	ca00 <__ram_exceptions_end+0xfbfec7ac>
    cc4c:	11fff804 	addi	r7,r2,-32
    cc50:	01000804 	movi	r4,32
    cc54:	29ced83a 	srl	r7,r5,r7
    cc58:	11004526 	beq	r2,r4,cd70 <__subdf3+0x57c>
    cc5c:	01001004 	movi	r4,64
    cc60:	2089c83a 	sub	r4,r4,r2
    cc64:	2904983a 	sll	r2,r5,r4
    cc68:	118cb03a 	or	r6,r2,r6
    cc6c:	300cc03a 	cmpne	r6,r6,zero
    cc70:	398cb03a 	or	r6,r7,r6
    cc74:	0005883a 	mov	r2,zero
    cc78:	003f3706 	br	c958 <__ram_exceptions_end+0xfbfec704>
    cc7c:	80002a26 	beq	r16,zero,cd28 <__subdf3+0x534>
    cc80:	0101ffc4 	movi	r4,2047
    cc84:	49006626 	beq	r9,r4,ce20 <__subdf3+0x62c>
    cc88:	0085c83a 	sub	r2,zero,r2
    cc8c:	18c02034 	orhi	r3,r3,128
    cc90:	01000e04 	movi	r4,56
    cc94:	20807e16 	blt	r4,r2,ce90 <__subdf3+0x69c>
    cc98:	010007c4 	movi	r4,31
    cc9c:	2080e716 	blt	r4,r2,d03c <__subdf3+0x848>
    cca0:	01000804 	movi	r4,32
    cca4:	2089c83a 	sub	r4,r4,r2
    cca8:	1914983a 	sll	r10,r3,r4
    ccac:	8890d83a 	srl	r8,r17,r2
    ccb0:	8908983a 	sll	r4,r17,r4
    ccb4:	1884d83a 	srl	r2,r3,r2
    ccb8:	5222b03a 	or	r17,r10,r8
    ccbc:	2006c03a 	cmpne	r3,r4,zero
    ccc0:	88e2b03a 	or	r17,r17,r3
    ccc4:	3463c83a 	sub	r17,r6,r17
    ccc8:	2885c83a 	sub	r2,r5,r2
    cccc:	344d803a 	cmpltu	r6,r6,r17
    ccd0:	1187c83a 	sub	r3,r2,r6
    ccd4:	4821883a 	mov	r16,r9
    ccd8:	3825883a 	mov	r18,r7
    ccdc:	003f2306 	br	c96c <__ram_exceptions_end+0xfbfec718>
    cce0:	24d0b03a 	or	r8,r4,r19
    cce4:	40001b1e 	bne	r8,zero,cd54 <__subdf3+0x560>
    cce8:	0005883a 	mov	r2,zero
    ccec:	0009883a 	mov	r4,zero
    ccf0:	0021883a 	mov	r16,zero
    ccf4:	003f4906 	br	ca1c <__ram_exceptions_end+0xfbfec7c8>
    ccf8:	010007c4 	movi	r4,31
    ccfc:	20803a16 	blt	r4,r2,cde8 <__subdf3+0x5f4>
    cd00:	01000804 	movi	r4,32
    cd04:	2089c83a 	sub	r4,r4,r2
    cd08:	2912983a 	sll	r9,r5,r4
    cd0c:	3090d83a 	srl	r8,r6,r2
    cd10:	3108983a 	sll	r4,r6,r4
    cd14:	2884d83a 	srl	r2,r5,r2
    cd18:	4a12b03a 	or	r9,r9,r8
    cd1c:	2008c03a 	cmpne	r4,r4,zero
    cd20:	4912b03a 	or	r9,r9,r4
    cd24:	003f4e06 	br	ca60 <__ram_exceptions_end+0xfbfec80c>
    cd28:	1c48b03a 	or	r4,r3,r17
    cd2c:	20003c26 	beq	r4,zero,ce20 <__subdf3+0x62c>
    cd30:	0084303a 	nor	r2,zero,r2
    cd34:	1000381e 	bne	r2,zero,ce18 <__subdf3+0x624>
    cd38:	3463c83a 	sub	r17,r6,r17
    cd3c:	28c5c83a 	sub	r2,r5,r3
    cd40:	344d803a 	cmpltu	r6,r6,r17
    cd44:	1187c83a 	sub	r3,r2,r6
    cd48:	4821883a 	mov	r16,r9
    cd4c:	3825883a 	mov	r18,r7
    cd50:	003f0606 	br	c96c <__ram_exceptions_end+0xfbfec718>
    cd54:	2023883a 	mov	r17,r4
    cd58:	003f0906 	br	c980 <__ram_exceptions_end+0xfbfec72c>
    cd5c:	0101ffc4 	movi	r4,2047
    cd60:	813f3a1e 	bne	r16,r4,ca4c <__ram_exceptions_end+0xfbfec7f8>
    cd64:	003ec406 	br	c878 <__ram_exceptions_end+0xfbfec624>
    cd68:	0005883a 	mov	r2,zero
    cd6c:	003fb106 	br	cc34 <__ram_exceptions_end+0xfbfec9e0>
    cd70:	0005883a 	mov	r2,zero
    cd74:	003fbc06 	br	cc68 <__ram_exceptions_end+0xfbfeca14>
    cd78:	1c44b03a 	or	r2,r3,r17
    cd7c:	80008e1e 	bne	r16,zero,cfb8 <__subdf3+0x7c4>
    cd80:	1000c826 	beq	r2,zero,d0a4 <__subdf3+0x8b0>
    cd84:	2984b03a 	or	r2,r5,r6
    cd88:	103ebb26 	beq	r2,zero,c878 <__ram_exceptions_end+0xfbfec624>
    cd8c:	8989883a 	add	r4,r17,r6
    cd90:	1945883a 	add	r2,r3,r5
    cd94:	2447803a 	cmpltu	r3,r4,r17
    cd98:	1887883a 	add	r3,r3,r2
    cd9c:	1880202c 	andhi	r2,r3,128
    cda0:	2023883a 	mov	r17,r4
    cda4:	103f1626 	beq	r2,zero,ca00 <__ram_exceptions_end+0xfbfec7ac>
    cda8:	00bfe034 	movhi	r2,65408
    cdac:	10bfffc4 	addi	r2,r2,-1
    cdb0:	5021883a 	mov	r16,r10
    cdb4:	1886703a 	and	r3,r3,r2
    cdb8:	003eaf06 	br	c878 <__ram_exceptions_end+0xfbfec624>
    cdbc:	3825883a 	mov	r18,r7
    cdc0:	003f0f06 	br	ca00 <__ram_exceptions_end+0xfbfec7ac>
    cdc4:	1c44b03a 	or	r2,r3,r17
    cdc8:	8000251e 	bne	r16,zero,ce60 <__subdf3+0x66c>
    cdcc:	1000661e 	bne	r2,zero,cf68 <__subdf3+0x774>
    cdd0:	2990b03a 	or	r8,r5,r6
    cdd4:	40009626 	beq	r8,zero,d030 <__subdf3+0x83c>
    cdd8:	2807883a 	mov	r3,r5
    cddc:	3023883a 	mov	r17,r6
    cde0:	3825883a 	mov	r18,r7
    cde4:	003ea406 	br	c878 <__ram_exceptions_end+0xfbfec624>
    cde8:	127ff804 	addi	r9,r2,-32
    cdec:	01000804 	movi	r4,32
    cdf0:	2a52d83a 	srl	r9,r5,r9
    cdf4:	11008c26 	beq	r2,r4,d028 <__subdf3+0x834>
    cdf8:	01001004 	movi	r4,64
    cdfc:	2085c83a 	sub	r2,r4,r2
    ce00:	2884983a 	sll	r2,r5,r2
    ce04:	118cb03a 	or	r6,r2,r6
    ce08:	300cc03a 	cmpne	r6,r6,zero
    ce0c:	4992b03a 	or	r9,r9,r6
    ce10:	0005883a 	mov	r2,zero
    ce14:	003f1206 	br	ca60 <__ram_exceptions_end+0xfbfec80c>
    ce18:	0101ffc4 	movi	r4,2047
    ce1c:	493f9c1e 	bne	r9,r4,cc90 <__ram_exceptions_end+0xfbfeca3c>
    ce20:	2807883a 	mov	r3,r5
    ce24:	3023883a 	mov	r17,r6
    ce28:	4821883a 	mov	r16,r9
    ce2c:	3825883a 	mov	r18,r7
    ce30:	003e9106 	br	c878 <__ram_exceptions_end+0xfbfec624>
    ce34:	80001f1e 	bne	r16,zero,ceb4 <__subdf3+0x6c0>
    ce38:	1c48b03a 	or	r4,r3,r17
    ce3c:	20005a26 	beq	r4,zero,cfa8 <__subdf3+0x7b4>
    ce40:	0084303a 	nor	r2,zero,r2
    ce44:	1000561e 	bne	r2,zero,cfa0 <__subdf3+0x7ac>
    ce48:	89a3883a 	add	r17,r17,r6
    ce4c:	1945883a 	add	r2,r3,r5
    ce50:	898d803a 	cmpltu	r6,r17,r6
    ce54:	3087883a 	add	r3,r6,r2
    ce58:	4821883a 	mov	r16,r9
    ce5c:	003f0506 	br	ca74 <__ram_exceptions_end+0xfbfec820>
    ce60:	10002b1e 	bne	r2,zero,cf10 <__subdf3+0x71c>
    ce64:	2984b03a 	or	r2,r5,r6
    ce68:	10008026 	beq	r2,zero,d06c <__subdf3+0x878>
    ce6c:	2807883a 	mov	r3,r5
    ce70:	3023883a 	mov	r17,r6
    ce74:	3825883a 	mov	r18,r7
    ce78:	0401ffc4 	movi	r16,2047
    ce7c:	003e7e06 	br	c878 <__ram_exceptions_end+0xfbfec624>
    ce80:	3809883a 	mov	r4,r7
    ce84:	0011883a 	mov	r8,zero
    ce88:	0005883a 	mov	r2,zero
    ce8c:	003ee306 	br	ca1c <__ram_exceptions_end+0xfbfec7c8>
    ce90:	1c62b03a 	or	r17,r3,r17
    ce94:	8822c03a 	cmpne	r17,r17,zero
    ce98:	0005883a 	mov	r2,zero
    ce9c:	003f8906 	br	ccc4 <__ram_exceptions_end+0xfbfeca70>
    cea0:	3809883a 	mov	r4,r7
    cea4:	4821883a 	mov	r16,r9
    cea8:	0011883a 	mov	r8,zero
    ceac:	0005883a 	mov	r2,zero
    ceb0:	003eda06 	br	ca1c <__ram_exceptions_end+0xfbfec7c8>
    ceb4:	0101ffc4 	movi	r4,2047
    ceb8:	49003b26 	beq	r9,r4,cfa8 <__subdf3+0x7b4>
    cebc:	0085c83a 	sub	r2,zero,r2
    cec0:	18c02034 	orhi	r3,r3,128
    cec4:	01000e04 	movi	r4,56
    cec8:	20806e16 	blt	r4,r2,d084 <__subdf3+0x890>
    cecc:	010007c4 	movi	r4,31
    ced0:	20807716 	blt	r4,r2,d0b0 <__subdf3+0x8bc>
    ced4:	01000804 	movi	r4,32
    ced8:	2089c83a 	sub	r4,r4,r2
    cedc:	1914983a 	sll	r10,r3,r4
    cee0:	8890d83a 	srl	r8,r17,r2
    cee4:	8908983a 	sll	r4,r17,r4
    cee8:	1884d83a 	srl	r2,r3,r2
    ceec:	5222b03a 	or	r17,r10,r8
    cef0:	2006c03a 	cmpne	r3,r4,zero
    cef4:	88e2b03a 	or	r17,r17,r3
    cef8:	89a3883a 	add	r17,r17,r6
    cefc:	1145883a 	add	r2,r2,r5
    cf00:	898d803a 	cmpltu	r6,r17,r6
    cf04:	3087883a 	add	r3,r6,r2
    cf08:	4821883a 	mov	r16,r9
    cf0c:	003ed906 	br	ca74 <__ram_exceptions_end+0xfbfec820>
    cf10:	2984b03a 	or	r2,r5,r6
    cf14:	10004226 	beq	r2,zero,d020 <__subdf3+0x82c>
    cf18:	1808d0fa 	srli	r4,r3,3
    cf1c:	8822d0fa 	srli	r17,r17,3
    cf20:	1806977a 	slli	r3,r3,29
    cf24:	2080022c 	andhi	r2,r4,8
    cf28:	1c62b03a 	or	r17,r3,r17
    cf2c:	10000826 	beq	r2,zero,cf50 <__subdf3+0x75c>
    cf30:	2812d0fa 	srli	r9,r5,3
    cf34:	4880022c 	andhi	r2,r9,8
    cf38:	1000051e 	bne	r2,zero,cf50 <__subdf3+0x75c>
    cf3c:	300cd0fa 	srli	r6,r6,3
    cf40:	2804977a 	slli	r2,r5,29
    cf44:	4809883a 	mov	r4,r9
    cf48:	3825883a 	mov	r18,r7
    cf4c:	11a2b03a 	or	r17,r2,r6
    cf50:	8806d77a 	srli	r3,r17,29
    cf54:	200890fa 	slli	r4,r4,3
    cf58:	882290fa 	slli	r17,r17,3
    cf5c:	0401ffc4 	movi	r16,2047
    cf60:	1906b03a 	or	r3,r3,r4
    cf64:	003e4406 	br	c878 <__ram_exceptions_end+0xfbfec624>
    cf68:	2984b03a 	or	r2,r5,r6
    cf6c:	103e4226 	beq	r2,zero,c878 <__ram_exceptions_end+0xfbfec624>
    cf70:	8989c83a 	sub	r4,r17,r6
    cf74:	8911803a 	cmpltu	r8,r17,r4
    cf78:	1945c83a 	sub	r2,r3,r5
    cf7c:	1205c83a 	sub	r2,r2,r8
    cf80:	1200202c 	andhi	r8,r2,128
    cf84:	403e9a26 	beq	r8,zero,c9f0 <__ram_exceptions_end+0xfbfec79c>
    cf88:	3463c83a 	sub	r17,r6,r17
    cf8c:	28c5c83a 	sub	r2,r5,r3
    cf90:	344d803a 	cmpltu	r6,r6,r17
    cf94:	1187c83a 	sub	r3,r2,r6
    cf98:	3825883a 	mov	r18,r7
    cf9c:	003e3606 	br	c878 <__ram_exceptions_end+0xfbfec624>
    cfa0:	0101ffc4 	movi	r4,2047
    cfa4:	493fc71e 	bne	r9,r4,cec4 <__ram_exceptions_end+0xfbfecc70>
    cfa8:	2807883a 	mov	r3,r5
    cfac:	3023883a 	mov	r17,r6
    cfb0:	4821883a 	mov	r16,r9
    cfb4:	003e3006 	br	c878 <__ram_exceptions_end+0xfbfec624>
    cfb8:	10003626 	beq	r2,zero,d094 <__subdf3+0x8a0>
    cfbc:	2984b03a 	or	r2,r5,r6
    cfc0:	10001726 	beq	r2,zero,d020 <__subdf3+0x82c>
    cfc4:	1808d0fa 	srli	r4,r3,3
    cfc8:	8822d0fa 	srli	r17,r17,3
    cfcc:	1806977a 	slli	r3,r3,29
    cfd0:	2080022c 	andhi	r2,r4,8
    cfd4:	1c62b03a 	or	r17,r3,r17
    cfd8:	10000726 	beq	r2,zero,cff8 <__subdf3+0x804>
    cfdc:	2812d0fa 	srli	r9,r5,3
    cfe0:	4880022c 	andhi	r2,r9,8
    cfe4:	1000041e 	bne	r2,zero,cff8 <__subdf3+0x804>
    cfe8:	300cd0fa 	srli	r6,r6,3
    cfec:	2804977a 	slli	r2,r5,29
    cff0:	4809883a 	mov	r4,r9
    cff4:	11a2b03a 	or	r17,r2,r6
    cff8:	8806d77a 	srli	r3,r17,29
    cffc:	200890fa 	slli	r4,r4,3
    d000:	882290fa 	slli	r17,r17,3
    d004:	3825883a 	mov	r18,r7
    d008:	1906b03a 	or	r3,r3,r4
    d00c:	0401ffc4 	movi	r16,2047
    d010:	003e1906 	br	c878 <__ram_exceptions_end+0xfbfec624>
    d014:	000b883a 	mov	r5,zero
    d018:	0005883a 	mov	r2,zero
    d01c:	003e2e06 	br	c8d8 <__ram_exceptions_end+0xfbfec684>
    d020:	0401ffc4 	movi	r16,2047
    d024:	003e1406 	br	c878 <__ram_exceptions_end+0xfbfec624>
    d028:	0005883a 	mov	r2,zero
    d02c:	003f7506 	br	ce04 <__ram_exceptions_end+0xfbfecbb0>
    d030:	0005883a 	mov	r2,zero
    d034:	0009883a 	mov	r4,zero
    d038:	003e7806 	br	ca1c <__ram_exceptions_end+0xfbfec7c8>
    d03c:	123ff804 	addi	r8,r2,-32
    d040:	01000804 	movi	r4,32
    d044:	1a10d83a 	srl	r8,r3,r8
    d048:	11002526 	beq	r2,r4,d0e0 <__subdf3+0x8ec>
    d04c:	01001004 	movi	r4,64
    d050:	2085c83a 	sub	r2,r4,r2
    d054:	1884983a 	sll	r2,r3,r2
    d058:	1444b03a 	or	r2,r2,r17
    d05c:	1004c03a 	cmpne	r2,r2,zero
    d060:	40a2b03a 	or	r17,r8,r2
    d064:	0005883a 	mov	r2,zero
    d068:	003f1606 	br	ccc4 <__ram_exceptions_end+0xfbfeca70>
    d06c:	02000434 	movhi	r8,16
    d070:	0009883a 	mov	r4,zero
    d074:	423fffc4 	addi	r8,r8,-1
    d078:	00bfffc4 	movi	r2,-1
    d07c:	0401ffc4 	movi	r16,2047
    d080:	003e6606 	br	ca1c <__ram_exceptions_end+0xfbfec7c8>
    d084:	1c62b03a 	or	r17,r3,r17
    d088:	8822c03a 	cmpne	r17,r17,zero
    d08c:	0005883a 	mov	r2,zero
    d090:	003f9906 	br	cef8 <__ram_exceptions_end+0xfbfecca4>
    d094:	2807883a 	mov	r3,r5
    d098:	3023883a 	mov	r17,r6
    d09c:	0401ffc4 	movi	r16,2047
    d0a0:	003df506 	br	c878 <__ram_exceptions_end+0xfbfec624>
    d0a4:	2807883a 	mov	r3,r5
    d0a8:	3023883a 	mov	r17,r6
    d0ac:	003df206 	br	c878 <__ram_exceptions_end+0xfbfec624>
    d0b0:	123ff804 	addi	r8,r2,-32
    d0b4:	01000804 	movi	r4,32
    d0b8:	1a10d83a 	srl	r8,r3,r8
    d0bc:	11000a26 	beq	r2,r4,d0e8 <__subdf3+0x8f4>
    d0c0:	01001004 	movi	r4,64
    d0c4:	2085c83a 	sub	r2,r4,r2
    d0c8:	1884983a 	sll	r2,r3,r2
    d0cc:	1444b03a 	or	r2,r2,r17
    d0d0:	1004c03a 	cmpne	r2,r2,zero
    d0d4:	40a2b03a 	or	r17,r8,r2
    d0d8:	0005883a 	mov	r2,zero
    d0dc:	003f8606 	br	cef8 <__ram_exceptions_end+0xfbfecca4>
    d0e0:	0005883a 	mov	r2,zero
    d0e4:	003fdc06 	br	d058 <__ram_exceptions_end+0xfbfece04>
    d0e8:	0005883a 	mov	r2,zero
    d0ec:	003ff706 	br	d0cc <__ram_exceptions_end+0xfbfece78>

0000d0f0 <__fixdfsi>:
    d0f0:	280cd53a 	srli	r6,r5,20
    d0f4:	00c00434 	movhi	r3,16
    d0f8:	18ffffc4 	addi	r3,r3,-1
    d0fc:	3181ffcc 	andi	r6,r6,2047
    d100:	01c0ff84 	movi	r7,1022
    d104:	28c6703a 	and	r3,r5,r3
    d108:	280ad7fa 	srli	r5,r5,31
    d10c:	3980120e 	bge	r7,r6,d158 <__fixdfsi+0x68>
    d110:	00810744 	movi	r2,1053
    d114:	11800c16 	blt	r2,r6,d148 <__fixdfsi+0x58>
    d118:	00810cc4 	movi	r2,1075
    d11c:	1185c83a 	sub	r2,r2,r6
    d120:	01c007c4 	movi	r7,31
    d124:	18c00434 	orhi	r3,r3,16
    d128:	38800d16 	blt	r7,r2,d160 <__fixdfsi+0x70>
    d12c:	31befb44 	addi	r6,r6,-1043
    d130:	2084d83a 	srl	r2,r4,r2
    d134:	1986983a 	sll	r3,r3,r6
    d138:	1884b03a 	or	r2,r3,r2
    d13c:	28000726 	beq	r5,zero,d15c <__fixdfsi+0x6c>
    d140:	0085c83a 	sub	r2,zero,r2
    d144:	f800283a 	ret
    d148:	00a00034 	movhi	r2,32768
    d14c:	10bfffc4 	addi	r2,r2,-1
    d150:	2885883a 	add	r2,r5,r2
    d154:	f800283a 	ret
    d158:	0005883a 	mov	r2,zero
    d15c:	f800283a 	ret
    d160:	008104c4 	movi	r2,1043
    d164:	1185c83a 	sub	r2,r2,r6
    d168:	1884d83a 	srl	r2,r3,r2
    d16c:	003ff306 	br	d13c <__ram_exceptions_end+0xfbfecee8>

0000d170 <__floatsidf>:
    d170:	defffd04 	addi	sp,sp,-12
    d174:	dfc00215 	stw	ra,8(sp)
    d178:	dc400115 	stw	r17,4(sp)
    d17c:	dc000015 	stw	r16,0(sp)
    d180:	20002b26 	beq	r4,zero,d230 <__floatsidf+0xc0>
    d184:	2023883a 	mov	r17,r4
    d188:	2020d7fa 	srli	r16,r4,31
    d18c:	20002d16 	blt	r4,zero,d244 <__floatsidf+0xd4>
    d190:	8809883a 	mov	r4,r17
    d194:	000d2f40 	call	d2f4 <__clzsi2>
    d198:	01410784 	movi	r5,1054
    d19c:	288bc83a 	sub	r5,r5,r2
    d1a0:	01010cc4 	movi	r4,1075
    d1a4:	2149c83a 	sub	r4,r4,r5
    d1a8:	00c007c4 	movi	r3,31
    d1ac:	1900160e 	bge	r3,r4,d208 <__floatsidf+0x98>
    d1b0:	00c104c4 	movi	r3,1043
    d1b4:	1947c83a 	sub	r3,r3,r5
    d1b8:	88c6983a 	sll	r3,r17,r3
    d1bc:	00800434 	movhi	r2,16
    d1c0:	10bfffc4 	addi	r2,r2,-1
    d1c4:	1886703a 	and	r3,r3,r2
    d1c8:	2941ffcc 	andi	r5,r5,2047
    d1cc:	800d883a 	mov	r6,r16
    d1d0:	0005883a 	mov	r2,zero
    d1d4:	280a953a 	slli	r5,r5,20
    d1d8:	31803fcc 	andi	r6,r6,255
    d1dc:	01000434 	movhi	r4,16
    d1e0:	300c97fa 	slli	r6,r6,31
    d1e4:	213fffc4 	addi	r4,r4,-1
    d1e8:	1906703a 	and	r3,r3,r4
    d1ec:	1946b03a 	or	r3,r3,r5
    d1f0:	1986b03a 	or	r3,r3,r6
    d1f4:	dfc00217 	ldw	ra,8(sp)
    d1f8:	dc400117 	ldw	r17,4(sp)
    d1fc:	dc000017 	ldw	r16,0(sp)
    d200:	dec00304 	addi	sp,sp,12
    d204:	f800283a 	ret
    d208:	00c002c4 	movi	r3,11
    d20c:	1887c83a 	sub	r3,r3,r2
    d210:	88c6d83a 	srl	r3,r17,r3
    d214:	8904983a 	sll	r2,r17,r4
    d218:	01000434 	movhi	r4,16
    d21c:	213fffc4 	addi	r4,r4,-1
    d220:	2941ffcc 	andi	r5,r5,2047
    d224:	1906703a 	and	r3,r3,r4
    d228:	800d883a 	mov	r6,r16
    d22c:	003fe906 	br	d1d4 <__ram_exceptions_end+0xfbfecf80>
    d230:	000d883a 	mov	r6,zero
    d234:	000b883a 	mov	r5,zero
    d238:	0007883a 	mov	r3,zero
    d23c:	0005883a 	mov	r2,zero
    d240:	003fe406 	br	d1d4 <__ram_exceptions_end+0xfbfecf80>
    d244:	0123c83a 	sub	r17,zero,r4
    d248:	003fd106 	br	d190 <__ram_exceptions_end+0xfbfecf3c>

0000d24c <__floatunsidf>:
    d24c:	defffe04 	addi	sp,sp,-8
    d250:	dc000015 	stw	r16,0(sp)
    d254:	dfc00115 	stw	ra,4(sp)
    d258:	2021883a 	mov	r16,r4
    d25c:	20002226 	beq	r4,zero,d2e8 <__floatunsidf+0x9c>
    d260:	000d2f40 	call	d2f4 <__clzsi2>
    d264:	01010784 	movi	r4,1054
    d268:	2089c83a 	sub	r4,r4,r2
    d26c:	01810cc4 	movi	r6,1075
    d270:	310dc83a 	sub	r6,r6,r4
    d274:	00c007c4 	movi	r3,31
    d278:	1980120e 	bge	r3,r6,d2c4 <__floatunsidf+0x78>
    d27c:	00c104c4 	movi	r3,1043
    d280:	1907c83a 	sub	r3,r3,r4
    d284:	80ca983a 	sll	r5,r16,r3
    d288:	00800434 	movhi	r2,16
    d28c:	10bfffc4 	addi	r2,r2,-1
    d290:	2101ffcc 	andi	r4,r4,2047
    d294:	0021883a 	mov	r16,zero
    d298:	288a703a 	and	r5,r5,r2
    d29c:	2008953a 	slli	r4,r4,20
    d2a0:	00c00434 	movhi	r3,16
    d2a4:	18ffffc4 	addi	r3,r3,-1
    d2a8:	28c6703a 	and	r3,r5,r3
    d2ac:	8005883a 	mov	r2,r16
    d2b0:	1906b03a 	or	r3,r3,r4
    d2b4:	dfc00117 	ldw	ra,4(sp)
    d2b8:	dc000017 	ldw	r16,0(sp)
    d2bc:	dec00204 	addi	sp,sp,8
    d2c0:	f800283a 	ret
    d2c4:	00c002c4 	movi	r3,11
    d2c8:	188bc83a 	sub	r5,r3,r2
    d2cc:	814ad83a 	srl	r5,r16,r5
    d2d0:	00c00434 	movhi	r3,16
    d2d4:	18ffffc4 	addi	r3,r3,-1
    d2d8:	81a0983a 	sll	r16,r16,r6
    d2dc:	2101ffcc 	andi	r4,r4,2047
    d2e0:	28ca703a 	and	r5,r5,r3
    d2e4:	003fed06 	br	d29c <__ram_exceptions_end+0xfbfed048>
    d2e8:	0009883a 	mov	r4,zero
    d2ec:	000b883a 	mov	r5,zero
    d2f0:	003fea06 	br	d29c <__ram_exceptions_end+0xfbfed048>

0000d2f4 <__clzsi2>:
    d2f4:	00bfffd4 	movui	r2,65535
    d2f8:	11000536 	bltu	r2,r4,d310 <__clzsi2+0x1c>
    d2fc:	00803fc4 	movi	r2,255
    d300:	11000f36 	bltu	r2,r4,d340 <__clzsi2+0x4c>
    d304:	00800804 	movi	r2,32
    d308:	0007883a 	mov	r3,zero
    d30c:	00000506 	br	d324 <__clzsi2+0x30>
    d310:	00804034 	movhi	r2,256
    d314:	10bfffc4 	addi	r2,r2,-1
    d318:	11000c2e 	bgeu	r2,r4,d34c <__clzsi2+0x58>
    d31c:	00800204 	movi	r2,8
    d320:	00c00604 	movi	r3,24
    d324:	20c8d83a 	srl	r4,r4,r3
    d328:	00c00074 	movhi	r3,1
    d32c:	18c0b204 	addi	r3,r3,712
    d330:	1909883a 	add	r4,r3,r4
    d334:	20c00003 	ldbu	r3,0(r4)
    d338:	10c5c83a 	sub	r2,r2,r3
    d33c:	f800283a 	ret
    d340:	00800604 	movi	r2,24
    d344:	00c00204 	movi	r3,8
    d348:	003ff606 	br	d324 <__ram_exceptions_end+0xfbfed0d0>
    d34c:	00800404 	movi	r2,16
    d350:	1007883a 	mov	r3,r2
    d354:	003ff306 	br	d324 <__ram_exceptions_end+0xfbfed0d0>

0000d358 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d358:	defffe04 	addi	sp,sp,-8
    d35c:	dfc00115 	stw	ra,4(sp)
    d360:	df000015 	stw	fp,0(sp)
    d364:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d368:	d0a00b17 	ldw	r2,-32724(gp)
    d36c:	10000326 	beq	r2,zero,d37c <alt_get_errno+0x24>
    d370:	d0a00b17 	ldw	r2,-32724(gp)
    d374:	103ee83a 	callr	r2
    d378:	00000106 	br	d380 <alt_get_errno+0x28>
    d37c:	d0a6d404 	addi	r2,gp,-25776
}
    d380:	e037883a 	mov	sp,fp
    d384:	dfc00117 	ldw	ra,4(sp)
    d388:	df000017 	ldw	fp,0(sp)
    d38c:	dec00204 	addi	sp,sp,8
    d390:	f800283a 	ret

0000d394 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    d394:	defffb04 	addi	sp,sp,-20
    d398:	dfc00415 	stw	ra,16(sp)
    d39c:	df000315 	stw	fp,12(sp)
    d3a0:	df000304 	addi	fp,sp,12
    d3a4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    d3a8:	e0bfff17 	ldw	r2,-4(fp)
    d3ac:	10000616 	blt	r2,zero,d3c8 <close+0x34>
    d3b0:	e0bfff17 	ldw	r2,-4(fp)
    d3b4:	10c00324 	muli	r3,r2,12
    d3b8:	00800074 	movhi	r2,1
    d3bc:	10833204 	addi	r2,r2,3272
    d3c0:	1885883a 	add	r2,r3,r2
    d3c4:	00000106 	br	d3cc <close+0x38>
    d3c8:	0005883a 	mov	r2,zero
    d3cc:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    d3d0:	e0bffd17 	ldw	r2,-12(fp)
    d3d4:	10001926 	beq	r2,zero,d43c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    d3d8:	e0bffd17 	ldw	r2,-12(fp)
    d3dc:	10800017 	ldw	r2,0(r2)
    d3e0:	10800417 	ldw	r2,16(r2)
    d3e4:	10000626 	beq	r2,zero,d400 <close+0x6c>
    d3e8:	e0bffd17 	ldw	r2,-12(fp)
    d3ec:	10800017 	ldw	r2,0(r2)
    d3f0:	10800417 	ldw	r2,16(r2)
    d3f4:	e13ffd17 	ldw	r4,-12(fp)
    d3f8:	103ee83a 	callr	r2
    d3fc:	00000106 	br	d404 <close+0x70>
    d400:	0005883a 	mov	r2,zero
    d404:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    d408:	e13fff17 	ldw	r4,-4(fp)
    d40c:	000df5c0 	call	df5c <alt_release_fd>
    if (rval < 0)
    d410:	e0bffe17 	ldw	r2,-8(fp)
    d414:	1000070e 	bge	r2,zero,d434 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    d418:	000d3580 	call	d358 <alt_get_errno>
    d41c:	1007883a 	mov	r3,r2
    d420:	e0bffe17 	ldw	r2,-8(fp)
    d424:	0085c83a 	sub	r2,zero,r2
    d428:	18800015 	stw	r2,0(r3)
      return -1;
    d42c:	00bfffc4 	movi	r2,-1
    d430:	00000706 	br	d450 <close+0xbc>
    }
    return 0;
    d434:	0005883a 	mov	r2,zero
    d438:	00000506 	br	d450 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d43c:	000d3580 	call	d358 <alt_get_errno>
    d440:	1007883a 	mov	r3,r2
    d444:	00801444 	movi	r2,81
    d448:	18800015 	stw	r2,0(r3)
    return -1;
    d44c:	00bfffc4 	movi	r2,-1
  }
}
    d450:	e037883a 	mov	sp,fp
    d454:	dfc00117 	ldw	ra,4(sp)
    d458:	df000017 	ldw	fp,0(sp)
    d45c:	dec00204 	addi	sp,sp,8
    d460:	f800283a 	ret

0000d464 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    d464:	defffc04 	addi	sp,sp,-16
    d468:	df000315 	stw	fp,12(sp)
    d46c:	df000304 	addi	fp,sp,12
    d470:	e13ffd15 	stw	r4,-12(fp)
    d474:	e17ffe15 	stw	r5,-8(fp)
    d478:	e1bfff15 	stw	r6,-4(fp)
  return len;
    d47c:	e0bfff17 	ldw	r2,-4(fp)
}
    d480:	e037883a 	mov	sp,fp
    d484:	df000017 	ldw	fp,0(sp)
    d488:	dec00104 	addi	sp,sp,4
    d48c:	f800283a 	ret

0000d490 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d490:	defffe04 	addi	sp,sp,-8
    d494:	dfc00115 	stw	ra,4(sp)
    d498:	df000015 	stw	fp,0(sp)
    d49c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d4a0:	d0a00b17 	ldw	r2,-32724(gp)
    d4a4:	10000326 	beq	r2,zero,d4b4 <alt_get_errno+0x24>
    d4a8:	d0a00b17 	ldw	r2,-32724(gp)
    d4ac:	103ee83a 	callr	r2
    d4b0:	00000106 	br	d4b8 <alt_get_errno+0x28>
    d4b4:	d0a6d404 	addi	r2,gp,-25776
}
    d4b8:	e037883a 	mov	sp,fp
    d4bc:	dfc00117 	ldw	ra,4(sp)
    d4c0:	df000017 	ldw	fp,0(sp)
    d4c4:	dec00204 	addi	sp,sp,8
    d4c8:	f800283a 	ret

0000d4cc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    d4cc:	defffb04 	addi	sp,sp,-20
    d4d0:	dfc00415 	stw	ra,16(sp)
    d4d4:	df000315 	stw	fp,12(sp)
    d4d8:	df000304 	addi	fp,sp,12
    d4dc:	e13ffe15 	stw	r4,-8(fp)
    d4e0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d4e4:	e0bffe17 	ldw	r2,-8(fp)
    d4e8:	10000616 	blt	r2,zero,d504 <fstat+0x38>
    d4ec:	e0bffe17 	ldw	r2,-8(fp)
    d4f0:	10c00324 	muli	r3,r2,12
    d4f4:	00800074 	movhi	r2,1
    d4f8:	10833204 	addi	r2,r2,3272
    d4fc:	1885883a 	add	r2,r3,r2
    d500:	00000106 	br	d508 <fstat+0x3c>
    d504:	0005883a 	mov	r2,zero
    d508:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    d50c:	e0bffd17 	ldw	r2,-12(fp)
    d510:	10001026 	beq	r2,zero,d554 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    d514:	e0bffd17 	ldw	r2,-12(fp)
    d518:	10800017 	ldw	r2,0(r2)
    d51c:	10800817 	ldw	r2,32(r2)
    d520:	10000726 	beq	r2,zero,d540 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    d524:	e0bffd17 	ldw	r2,-12(fp)
    d528:	10800017 	ldw	r2,0(r2)
    d52c:	10800817 	ldw	r2,32(r2)
    d530:	e17fff17 	ldw	r5,-4(fp)
    d534:	e13ffd17 	ldw	r4,-12(fp)
    d538:	103ee83a 	callr	r2
    d53c:	00000a06 	br	d568 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    d540:	e0bfff17 	ldw	r2,-4(fp)
    d544:	00c80004 	movi	r3,8192
    d548:	10c00115 	stw	r3,4(r2)
      return 0;
    d54c:	0005883a 	mov	r2,zero
    d550:	00000506 	br	d568 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d554:	000d4900 	call	d490 <alt_get_errno>
    d558:	1007883a 	mov	r3,r2
    d55c:	00801444 	movi	r2,81
    d560:	18800015 	stw	r2,0(r3)
    return -1;
    d564:	00bfffc4 	movi	r2,-1
  }
}
    d568:	e037883a 	mov	sp,fp
    d56c:	dfc00117 	ldw	ra,4(sp)
    d570:	df000017 	ldw	fp,0(sp)
    d574:	dec00204 	addi	sp,sp,8
    d578:	f800283a 	ret

0000d57c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    d57c:	defff904 	addi	sp,sp,-28
    d580:	dfc00615 	stw	ra,24(sp)
    d584:	df000515 	stw	fp,20(sp)
    d588:	df000504 	addi	fp,sp,20
    d58c:	e13ffc15 	stw	r4,-16(fp)
    d590:	e17ffd15 	stw	r5,-12(fp)
    d594:	e1bffe15 	stw	r6,-8(fp)
    d598:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    d59c:	e0800217 	ldw	r2,8(fp)
    d5a0:	d8800015 	stw	r2,0(sp)
    d5a4:	e1ffff17 	ldw	r7,-4(fp)
    d5a8:	e1bffe17 	ldw	r6,-8(fp)
    d5ac:	e17ffd17 	ldw	r5,-12(fp)
    d5b0:	e13ffc17 	ldw	r4,-16(fp)
    d5b4:	000d72c0 	call	d72c <alt_iic_isr_register>
}  
    d5b8:	e037883a 	mov	sp,fp
    d5bc:	dfc00117 	ldw	ra,4(sp)
    d5c0:	df000017 	ldw	fp,0(sp)
    d5c4:	dec00204 	addi	sp,sp,8
    d5c8:	f800283a 	ret

0000d5cc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    d5cc:	defff904 	addi	sp,sp,-28
    d5d0:	df000615 	stw	fp,24(sp)
    d5d4:	df000604 	addi	fp,sp,24
    d5d8:	e13ffe15 	stw	r4,-8(fp)
    d5dc:	e17fff15 	stw	r5,-4(fp)
    d5e0:	e0bfff17 	ldw	r2,-4(fp)
    d5e4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d5e8:	0005303a 	rdctl	r2,status
    d5ec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d5f0:	e0fffb17 	ldw	r3,-20(fp)
    d5f4:	00bfff84 	movi	r2,-2
    d5f8:	1884703a 	and	r2,r3,r2
    d5fc:	1001703a 	wrctl	status,r2
  
  return context;
    d600:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    d604:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    d608:	00c00044 	movi	r3,1
    d60c:	e0bffa17 	ldw	r2,-24(fp)
    d610:	1884983a 	sll	r2,r3,r2
    d614:	1007883a 	mov	r3,r2
    d618:	d0a6d517 	ldw	r2,-25772(gp)
    d61c:	1884b03a 	or	r2,r3,r2
    d620:	d0a6d515 	stw	r2,-25772(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    d624:	d0a6d517 	ldw	r2,-25772(gp)
    d628:	100170fa 	wrctl	ienable,r2
    d62c:	e0bffc17 	ldw	r2,-16(fp)
    d630:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d634:	e0bffd17 	ldw	r2,-12(fp)
    d638:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    d63c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    d640:	0001883a 	nop
}
    d644:	e037883a 	mov	sp,fp
    d648:	df000017 	ldw	fp,0(sp)
    d64c:	dec00104 	addi	sp,sp,4
    d650:	f800283a 	ret

0000d654 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    d654:	defff904 	addi	sp,sp,-28
    d658:	df000615 	stw	fp,24(sp)
    d65c:	df000604 	addi	fp,sp,24
    d660:	e13ffe15 	stw	r4,-8(fp)
    d664:	e17fff15 	stw	r5,-4(fp)
    d668:	e0bfff17 	ldw	r2,-4(fp)
    d66c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d670:	0005303a 	rdctl	r2,status
    d674:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d678:	e0fffb17 	ldw	r3,-20(fp)
    d67c:	00bfff84 	movi	r2,-2
    d680:	1884703a 	and	r2,r3,r2
    d684:	1001703a 	wrctl	status,r2
  
  return context;
    d688:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    d68c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    d690:	00c00044 	movi	r3,1
    d694:	e0bffa17 	ldw	r2,-24(fp)
    d698:	1884983a 	sll	r2,r3,r2
    d69c:	0084303a 	nor	r2,zero,r2
    d6a0:	1007883a 	mov	r3,r2
    d6a4:	d0a6d517 	ldw	r2,-25772(gp)
    d6a8:	1884703a 	and	r2,r3,r2
    d6ac:	d0a6d515 	stw	r2,-25772(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    d6b0:	d0a6d517 	ldw	r2,-25772(gp)
    d6b4:	100170fa 	wrctl	ienable,r2
    d6b8:	e0bffc17 	ldw	r2,-16(fp)
    d6bc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d6c0:	e0bffd17 	ldw	r2,-12(fp)
    d6c4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    d6c8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    d6cc:	0001883a 	nop
}
    d6d0:	e037883a 	mov	sp,fp
    d6d4:	df000017 	ldw	fp,0(sp)
    d6d8:	dec00104 	addi	sp,sp,4
    d6dc:	f800283a 	ret

0000d6e0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    d6e0:	defffc04 	addi	sp,sp,-16
    d6e4:	df000315 	stw	fp,12(sp)
    d6e8:	df000304 	addi	fp,sp,12
    d6ec:	e13ffe15 	stw	r4,-8(fp)
    d6f0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    d6f4:	000530fa 	rdctl	r2,ienable
    d6f8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    d6fc:	00c00044 	movi	r3,1
    d700:	e0bfff17 	ldw	r2,-4(fp)
    d704:	1884983a 	sll	r2,r3,r2
    d708:	1007883a 	mov	r3,r2
    d70c:	e0bffd17 	ldw	r2,-12(fp)
    d710:	1884703a 	and	r2,r3,r2
    d714:	1004c03a 	cmpne	r2,r2,zero
    d718:	10803fcc 	andi	r2,r2,255
}
    d71c:	e037883a 	mov	sp,fp
    d720:	df000017 	ldw	fp,0(sp)
    d724:	dec00104 	addi	sp,sp,4
    d728:	f800283a 	ret

0000d72c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    d72c:	defff504 	addi	sp,sp,-44
    d730:	dfc00a15 	stw	ra,40(sp)
    d734:	df000915 	stw	fp,36(sp)
    d738:	df000904 	addi	fp,sp,36
    d73c:	e13ffc15 	stw	r4,-16(fp)
    d740:	e17ffd15 	stw	r5,-12(fp)
    d744:	e1bffe15 	stw	r6,-8(fp)
    d748:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    d74c:	00bffa84 	movi	r2,-22
    d750:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    d754:	e0bffd17 	ldw	r2,-12(fp)
    d758:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    d75c:	e0bff817 	ldw	r2,-32(fp)
    d760:	10800808 	cmpgei	r2,r2,32
    d764:	1000271e 	bne	r2,zero,d804 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d768:	0005303a 	rdctl	r2,status
    d76c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d770:	e0fffb17 	ldw	r3,-20(fp)
    d774:	00bfff84 	movi	r2,-2
    d778:	1884703a 	and	r2,r3,r2
    d77c:	1001703a 	wrctl	status,r2
  
  return context;
    d780:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    d784:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    d788:	00800074 	movhi	r2,1
    d78c:	108e9004 	addi	r2,r2,14912
    d790:	e0fff817 	ldw	r3,-32(fp)
    d794:	180690fa 	slli	r3,r3,3
    d798:	10c5883a 	add	r2,r2,r3
    d79c:	e0fffe17 	ldw	r3,-8(fp)
    d7a0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    d7a4:	00800074 	movhi	r2,1
    d7a8:	108e9004 	addi	r2,r2,14912
    d7ac:	e0fff817 	ldw	r3,-32(fp)
    d7b0:	180690fa 	slli	r3,r3,3
    d7b4:	10c5883a 	add	r2,r2,r3
    d7b8:	10800104 	addi	r2,r2,4
    d7bc:	e0ffff17 	ldw	r3,-4(fp)
    d7c0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    d7c4:	e0bffe17 	ldw	r2,-8(fp)
    d7c8:	10000526 	beq	r2,zero,d7e0 <alt_iic_isr_register+0xb4>
    d7cc:	e0bff817 	ldw	r2,-32(fp)
    d7d0:	100b883a 	mov	r5,r2
    d7d4:	e13ffc17 	ldw	r4,-16(fp)
    d7d8:	000d5cc0 	call	d5cc <alt_ic_irq_enable>
    d7dc:	00000406 	br	d7f0 <alt_iic_isr_register+0xc4>
    d7e0:	e0bff817 	ldw	r2,-32(fp)
    d7e4:	100b883a 	mov	r5,r2
    d7e8:	e13ffc17 	ldw	r4,-16(fp)
    d7ec:	000d6540 	call	d654 <alt_ic_irq_disable>
    d7f0:	e0bff715 	stw	r2,-36(fp)
    d7f4:	e0bffa17 	ldw	r2,-24(fp)
    d7f8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d7fc:	e0bff917 	ldw	r2,-28(fp)
    d800:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    d804:	e0bff717 	ldw	r2,-36(fp)
}
    d808:	e037883a 	mov	sp,fp
    d80c:	dfc00117 	ldw	ra,4(sp)
    d810:	df000017 	ldw	fp,0(sp)
    d814:	dec00204 	addi	sp,sp,8
    d818:	f800283a 	ret

0000d81c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d81c:	defffe04 	addi	sp,sp,-8
    d820:	dfc00115 	stw	ra,4(sp)
    d824:	df000015 	stw	fp,0(sp)
    d828:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d82c:	d0a00b17 	ldw	r2,-32724(gp)
    d830:	10000326 	beq	r2,zero,d840 <alt_get_errno+0x24>
    d834:	d0a00b17 	ldw	r2,-32724(gp)
    d838:	103ee83a 	callr	r2
    d83c:	00000106 	br	d844 <alt_get_errno+0x28>
    d840:	d0a6d404 	addi	r2,gp,-25776
}
    d844:	e037883a 	mov	sp,fp
    d848:	dfc00117 	ldw	ra,4(sp)
    d84c:	df000017 	ldw	fp,0(sp)
    d850:	dec00204 	addi	sp,sp,8
    d854:	f800283a 	ret

0000d858 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    d858:	deffed04 	addi	sp,sp,-76
    d85c:	dfc01215 	stw	ra,72(sp)
    d860:	df001115 	stw	fp,68(sp)
    d864:	df001104 	addi	fp,sp,68
    d868:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d86c:	e0bfff17 	ldw	r2,-4(fp)
    d870:	10000616 	blt	r2,zero,d88c <isatty+0x34>
    d874:	e0bfff17 	ldw	r2,-4(fp)
    d878:	10c00324 	muli	r3,r2,12
    d87c:	00800074 	movhi	r2,1
    d880:	10833204 	addi	r2,r2,3272
    d884:	1885883a 	add	r2,r3,r2
    d888:	00000106 	br	d890 <isatty+0x38>
    d88c:	0005883a 	mov	r2,zero
    d890:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    d894:	e0bfef17 	ldw	r2,-68(fp)
    d898:	10000e26 	beq	r2,zero,d8d4 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    d89c:	e0bfef17 	ldw	r2,-68(fp)
    d8a0:	10800017 	ldw	r2,0(r2)
    d8a4:	10800817 	ldw	r2,32(r2)
    d8a8:	1000021e 	bne	r2,zero,d8b4 <isatty+0x5c>
    {
      return 1;
    d8ac:	00800044 	movi	r2,1
    d8b0:	00000d06 	br	d8e8 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    d8b4:	e0bff004 	addi	r2,fp,-64
    d8b8:	100b883a 	mov	r5,r2
    d8bc:	e13fff17 	ldw	r4,-4(fp)
    d8c0:	000d4cc0 	call	d4cc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    d8c4:	e0bff117 	ldw	r2,-60(fp)
    d8c8:	10880020 	cmpeqi	r2,r2,8192
    d8cc:	10803fcc 	andi	r2,r2,255
    d8d0:	00000506 	br	d8e8 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d8d4:	000d81c0 	call	d81c <alt_get_errno>
    d8d8:	1007883a 	mov	r3,r2
    d8dc:	00801444 	movi	r2,81
    d8e0:	18800015 	stw	r2,0(r3)
    return 0;
    d8e4:	0005883a 	mov	r2,zero
  }
}
    d8e8:	e037883a 	mov	sp,fp
    d8ec:	dfc00117 	ldw	ra,4(sp)
    d8f0:	df000017 	ldw	fp,0(sp)
    d8f4:	dec00204 	addi	sp,sp,8
    d8f8:	f800283a 	ret

0000d8fc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    d8fc:	defffc04 	addi	sp,sp,-16
    d900:	df000315 	stw	fp,12(sp)
    d904:	df000304 	addi	fp,sp,12
    d908:	e13ffd15 	stw	r4,-12(fp)
    d90c:	e17ffe15 	stw	r5,-8(fp)
    d910:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    d914:	e0fffe17 	ldw	r3,-8(fp)
    d918:	e0bffd17 	ldw	r2,-12(fp)
    d91c:	18800c26 	beq	r3,r2,d950 <alt_load_section+0x54>
  {
    while( to != end )
    d920:	00000806 	br	d944 <alt_load_section+0x48>
    {
      *to++ = *from++;
    d924:	e0bffe17 	ldw	r2,-8(fp)
    d928:	10c00104 	addi	r3,r2,4
    d92c:	e0fffe15 	stw	r3,-8(fp)
    d930:	e0fffd17 	ldw	r3,-12(fp)
    d934:	19000104 	addi	r4,r3,4
    d938:	e13ffd15 	stw	r4,-12(fp)
    d93c:	18c00017 	ldw	r3,0(r3)
    d940:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    d944:	e0fffe17 	ldw	r3,-8(fp)
    d948:	e0bfff17 	ldw	r2,-4(fp)
    d94c:	18bff51e 	bne	r3,r2,d924 <__ram_exceptions_end+0xfbfed6d0>
    {
      *to++ = *from++;
    }
  }
}
    d950:	0001883a 	nop
    d954:	e037883a 	mov	sp,fp
    d958:	df000017 	ldw	fp,0(sp)
    d95c:	dec00104 	addi	sp,sp,4
    d960:	f800283a 	ret

0000d964 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    d964:	defffe04 	addi	sp,sp,-8
    d968:	dfc00115 	stw	ra,4(sp)
    d96c:	df000015 	stw	fp,0(sp)
    d970:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    d974:	01800074 	movhi	r6,1
    d978:	3187ba04 	addi	r6,r6,7912
    d97c:	01400074 	movhi	r5,1
    d980:	2940ff04 	addi	r5,r5,1020
    d984:	01000074 	movhi	r4,1
    d988:	2107ba04 	addi	r4,r4,7912
    d98c:	000d8fc0 	call	d8fc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    d990:	018100b4 	movhi	r6,1026
    d994:	31809504 	addi	r6,r6,596
    d998:	014100b4 	movhi	r5,1026
    d99c:	29400804 	addi	r5,r5,32
    d9a0:	01000034 	movhi	r4,0
    d9a4:	21000004 	addi	r4,r4,0
    d9a8:	000d8fc0 	call	d8fc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    d9ac:	01800074 	movhi	r6,1
    d9b0:	3180ff04 	addi	r6,r6,1020
    d9b4:	01400074 	movhi	r5,1
    d9b8:	297fab04 	addi	r5,r5,-340
    d9bc:	01000074 	movhi	r4,1
    d9c0:	213fab04 	addi	r4,r4,-340
    d9c4:	000d8fc0 	call	d8fc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    d9c8:	000eef80 	call	eef8 <alt_dcache_flush_all>
  alt_icache_flush_all();
    d9cc:	000f0b80 	call	f0b8 <alt_icache_flush_all>
}
    d9d0:	0001883a 	nop
    d9d4:	e037883a 	mov	sp,fp
    d9d8:	dfc00117 	ldw	ra,4(sp)
    d9dc:	df000017 	ldw	fp,0(sp)
    d9e0:	dec00204 	addi	sp,sp,8
    d9e4:	f800283a 	ret

0000d9e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d9e8:	defffe04 	addi	sp,sp,-8
    d9ec:	dfc00115 	stw	ra,4(sp)
    d9f0:	df000015 	stw	fp,0(sp)
    d9f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d9f8:	d0a00b17 	ldw	r2,-32724(gp)
    d9fc:	10000326 	beq	r2,zero,da0c <alt_get_errno+0x24>
    da00:	d0a00b17 	ldw	r2,-32724(gp)
    da04:	103ee83a 	callr	r2
    da08:	00000106 	br	da10 <alt_get_errno+0x28>
    da0c:	d0a6d404 	addi	r2,gp,-25776
}
    da10:	e037883a 	mov	sp,fp
    da14:	dfc00117 	ldw	ra,4(sp)
    da18:	df000017 	ldw	fp,0(sp)
    da1c:	dec00204 	addi	sp,sp,8
    da20:	f800283a 	ret

0000da24 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    da24:	defff904 	addi	sp,sp,-28
    da28:	dfc00615 	stw	ra,24(sp)
    da2c:	df000515 	stw	fp,20(sp)
    da30:	df000504 	addi	fp,sp,20
    da34:	e13ffd15 	stw	r4,-12(fp)
    da38:	e17ffe15 	stw	r5,-8(fp)
    da3c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    da40:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    da44:	e0bffd17 	ldw	r2,-12(fp)
    da48:	10000616 	blt	r2,zero,da64 <lseek+0x40>
    da4c:	e0bffd17 	ldw	r2,-12(fp)
    da50:	10c00324 	muli	r3,r2,12
    da54:	00800074 	movhi	r2,1
    da58:	10833204 	addi	r2,r2,3272
    da5c:	1885883a 	add	r2,r3,r2
    da60:	00000106 	br	da68 <lseek+0x44>
    da64:	0005883a 	mov	r2,zero
    da68:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    da6c:	e0bffc17 	ldw	r2,-16(fp)
    da70:	10001026 	beq	r2,zero,dab4 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    da74:	e0bffc17 	ldw	r2,-16(fp)
    da78:	10800017 	ldw	r2,0(r2)
    da7c:	10800717 	ldw	r2,28(r2)
    da80:	10000926 	beq	r2,zero,daa8 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    da84:	e0bffc17 	ldw	r2,-16(fp)
    da88:	10800017 	ldw	r2,0(r2)
    da8c:	10800717 	ldw	r2,28(r2)
    da90:	e1bfff17 	ldw	r6,-4(fp)
    da94:	e17ffe17 	ldw	r5,-8(fp)
    da98:	e13ffc17 	ldw	r4,-16(fp)
    da9c:	103ee83a 	callr	r2
    daa0:	e0bffb15 	stw	r2,-20(fp)
    daa4:	00000506 	br	dabc <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    daa8:	00bfde84 	movi	r2,-134
    daac:	e0bffb15 	stw	r2,-20(fp)
    dab0:	00000206 	br	dabc <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    dab4:	00bfebc4 	movi	r2,-81
    dab8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    dabc:	e0bffb17 	ldw	r2,-20(fp)
    dac0:	1000070e 	bge	r2,zero,dae0 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    dac4:	000d9e80 	call	d9e8 <alt_get_errno>
    dac8:	1007883a 	mov	r3,r2
    dacc:	e0bffb17 	ldw	r2,-20(fp)
    dad0:	0085c83a 	sub	r2,zero,r2
    dad4:	18800015 	stw	r2,0(r3)
    rc = -1;
    dad8:	00bfffc4 	movi	r2,-1
    dadc:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    dae0:	e0bffb17 	ldw	r2,-20(fp)
}
    dae4:	e037883a 	mov	sp,fp
    dae8:	dfc00117 	ldw	ra,4(sp)
    daec:	df000017 	ldw	fp,0(sp)
    daf0:	dec00204 	addi	sp,sp,8
    daf4:	f800283a 	ret

0000daf8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    daf8:	defffd04 	addi	sp,sp,-12
    dafc:	dfc00215 	stw	ra,8(sp)
    db00:	df000115 	stw	fp,4(sp)
    db04:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    db08:	0009883a 	mov	r4,zero
    db0c:	000e1d80 	call	e1d8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    db10:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    db14:	000e2100 	call	e210 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    db18:	01800074 	movhi	r6,1
    db1c:	3180f504 	addi	r6,r6,980
    db20:	01400074 	movhi	r5,1
    db24:	2940f504 	addi	r5,r5,980
    db28:	01000074 	movhi	r4,1
    db2c:	2100f504 	addi	r4,r4,980
    db30:	000f24c0 	call	f24c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    db34:	000eff80 	call	eff8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    db38:	01000074 	movhi	r4,1
    db3c:	213c1604 	addi	r4,r4,-4008
    db40:	000f9b00 	call	f9b0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    db44:	d0a6d617 	ldw	r2,-25768(gp)
    db48:	d0e6d717 	ldw	r3,-25764(gp)
    db4c:	d126d817 	ldw	r4,-25760(gp)
    db50:	200d883a 	mov	r6,r4
    db54:	180b883a 	mov	r5,r3
    db58:	1009883a 	mov	r4,r2
    db5c:	0000ae00 	call	ae0 <main>
    db60:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    db64:	01000044 	movi	r4,1
    db68:	000d3940 	call	d394 <close>
  exit (result);
    db6c:	e13fff17 	ldw	r4,-4(fp)
    db70:	000f9c40 	call	f9c4 <exit>

0000db74 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    db74:	defffe04 	addi	sp,sp,-8
    db78:	df000115 	stw	fp,4(sp)
    db7c:	df000104 	addi	fp,sp,4
    db80:	e13fff15 	stw	r4,-4(fp)
}
    db84:	0001883a 	nop
    db88:	e037883a 	mov	sp,fp
    db8c:	df000017 	ldw	fp,0(sp)
    db90:	dec00104 	addi	sp,sp,4
    db94:	f800283a 	ret

0000db98 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    db98:	defffe04 	addi	sp,sp,-8
    db9c:	df000115 	stw	fp,4(sp)
    dba0:	df000104 	addi	fp,sp,4
    dba4:	e13fff15 	stw	r4,-4(fp)
}
    dba8:	0001883a 	nop
    dbac:	e037883a 	mov	sp,fp
    dbb0:	df000017 	ldw	fp,0(sp)
    dbb4:	dec00104 	addi	sp,sp,4
    dbb8:	f800283a 	ret

0000dbbc <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    dbbc:	defff204 	addi	sp,sp,-56
    dbc0:	dfc00a15 	stw	ra,40(sp)
    dbc4:	df000915 	stw	fp,36(sp)
    dbc8:	df000904 	addi	fp,sp,36
    dbcc:	e13fff15 	stw	r4,-4(fp)
    dbd0:	e1400215 	stw	r5,8(fp)
    dbd4:	e1800315 	stw	r6,12(fp)
    dbd8:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
    dbdc:	e0800204 	addi	r2,fp,8
    dbe0:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    dbe4:	e0bfff17 	ldw	r2,-4(fp)
    dbe8:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
    dbec:	00006f06 	br	ddac <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    dbf0:	e0bff807 	ldb	r2,-32(fp)
    dbf4:	10800960 	cmpeqi	r2,r2,37
    dbf8:	1000041e 	bne	r2,zero,dc0c <alt_printf+0x50>
        {
            alt_putchar(c);
    dbfc:	e0bff807 	ldb	r2,-32(fp)
    dc00:	1009883a 	mov	r4,r2
    dc04:	000dde80 	call	dde8 <alt_putchar>
    dc08:	00006806 	br	ddac <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
    dc0c:	e0bff717 	ldw	r2,-36(fp)
    dc10:	10c00044 	addi	r3,r2,1
    dc14:	e0fff715 	stw	r3,-36(fp)
    dc18:	10800003 	ldbu	r2,0(r2)
    dc1c:	e0bff805 	stb	r2,-32(fp)
    dc20:	e0bff807 	ldb	r2,-32(fp)
    dc24:	10006926 	beq	r2,zero,ddcc <alt_printf+0x210>
            {
                if (c == '%')
    dc28:	e0bff807 	ldb	r2,-32(fp)
    dc2c:	10800958 	cmpnei	r2,r2,37
    dc30:	1000041e 	bne	r2,zero,dc44 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
    dc34:	e0bff807 	ldb	r2,-32(fp)
    dc38:	1009883a 	mov	r4,r2
    dc3c:	000dde80 	call	dde8 <alt_putchar>
    dc40:	00005a06 	br	ddac <alt_printf+0x1f0>
                } 
                else if (c == 'c')
    dc44:	e0bff807 	ldb	r2,-32(fp)
    dc48:	108018d8 	cmpnei	r2,r2,99
    dc4c:	1000081e 	bne	r2,zero,dc70 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
    dc50:	e0bffe17 	ldw	r2,-8(fp)
    dc54:	10c00104 	addi	r3,r2,4
    dc58:	e0fffe15 	stw	r3,-8(fp)
    dc5c:	10800017 	ldw	r2,0(r2)
    dc60:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
    dc64:	e13ffd17 	ldw	r4,-12(fp)
    dc68:	000dde80 	call	dde8 <alt_putchar>
    dc6c:	00004f06 	br	ddac <alt_printf+0x1f0>
                }
                else if (c == 'x')
    dc70:	e0bff807 	ldb	r2,-32(fp)
    dc74:	10801e18 	cmpnei	r2,r2,120
    dc78:	1000341e 	bne	r2,zero,dd4c <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
    dc7c:	e0bffe17 	ldw	r2,-8(fp)
    dc80:	10c00104 	addi	r3,r2,4
    dc84:	e0fffe15 	stw	r3,-8(fp)
    dc88:	10800017 	ldw	r2,0(r2)
    dc8c:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
    dc90:	e0bffb17 	ldw	r2,-20(fp)
    dc94:	1000031e 	bne	r2,zero,dca4 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
    dc98:	01000c04 	movi	r4,48
    dc9c:	000dde80 	call	dde8 <alt_putchar>
                        continue;
    dca0:	00004206 	br	ddac <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
    dca4:	00800704 	movi	r2,28
    dca8:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
    dcac:	00000306 	br	dcbc <alt_printf+0x100>
                        digit_shift -= 4;
    dcb0:	e0bff917 	ldw	r2,-28(fp)
    dcb4:	10bfff04 	addi	r2,r2,-4
    dcb8:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    dcbc:	00c003c4 	movi	r3,15
    dcc0:	e0bff917 	ldw	r2,-28(fp)
    dcc4:	1884983a 	sll	r2,r3,r2
    dcc8:	1007883a 	mov	r3,r2
    dccc:	e0bffb17 	ldw	r2,-20(fp)
    dcd0:	1884703a 	and	r2,r3,r2
    dcd4:	103ff626 	beq	r2,zero,dcb0 <__ram_exceptions_end+0xfbfeda5c>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    dcd8:	00001906 	br	dd40 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    dcdc:	00c003c4 	movi	r3,15
    dce0:	e0bff917 	ldw	r2,-28(fp)
    dce4:	1884983a 	sll	r2,r3,r2
    dce8:	1007883a 	mov	r3,r2
    dcec:	e0bffb17 	ldw	r2,-20(fp)
    dcf0:	1886703a 	and	r3,r3,r2
    dcf4:	e0bff917 	ldw	r2,-28(fp)
    dcf8:	1884d83a 	srl	r2,r3,r2
    dcfc:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
    dd00:	e0bffc17 	ldw	r2,-16(fp)
    dd04:	108002a8 	cmpgeui	r2,r2,10
    dd08:	1000041e 	bne	r2,zero,dd1c <alt_printf+0x160>
                            c = '0' + digit;
    dd0c:	e0bffc17 	ldw	r2,-16(fp)
    dd10:	10800c04 	addi	r2,r2,48
    dd14:	e0bff805 	stb	r2,-32(fp)
    dd18:	00000306 	br	dd28 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
    dd1c:	e0bffc17 	ldw	r2,-16(fp)
    dd20:	108015c4 	addi	r2,r2,87
    dd24:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
    dd28:	e0bff807 	ldb	r2,-32(fp)
    dd2c:	1009883a 	mov	r4,r2
    dd30:	000dde80 	call	dde8 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    dd34:	e0bff917 	ldw	r2,-28(fp)
    dd38:	10bfff04 	addi	r2,r2,-4
    dd3c:	e0bff915 	stw	r2,-28(fp)
    dd40:	e0bff917 	ldw	r2,-28(fp)
    dd44:	103fe50e 	bge	r2,zero,dcdc <__ram_exceptions_end+0xfbfeda88>
    dd48:	00001806 	br	ddac <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    dd4c:	e0bff807 	ldb	r2,-32(fp)
    dd50:	10801cd8 	cmpnei	r2,r2,115
    dd54:	1000151e 	bne	r2,zero,ddac <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
    dd58:	e0bffe17 	ldw	r2,-8(fp)
    dd5c:	10c00104 	addi	r3,r2,4
    dd60:	e0fffe15 	stw	r3,-8(fp)
    dd64:	10800017 	ldw	r2,0(r2)
    dd68:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
    dd6c:	00000906 	br	dd94 <alt_printf+0x1d8>
                      alt_putchar(*s++);
    dd70:	e0bffa17 	ldw	r2,-24(fp)
    dd74:	10c00044 	addi	r3,r2,1
    dd78:	e0fffa15 	stw	r3,-24(fp)
    dd7c:	10800003 	ldbu	r2,0(r2)
    dd80:	10803fcc 	andi	r2,r2,255
    dd84:	1080201c 	xori	r2,r2,128
    dd88:	10bfe004 	addi	r2,r2,-128
    dd8c:	1009883a 	mov	r4,r2
    dd90:	000dde80 	call	dde8 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
    dd94:	e0bffa17 	ldw	r2,-24(fp)
    dd98:	10800003 	ldbu	r2,0(r2)
    dd9c:	10803fcc 	andi	r2,r2,255
    dda0:	1080201c 	xori	r2,r2,128
    dda4:	10bfe004 	addi	r2,r2,-128
    dda8:	103ff11e 	bne	r2,zero,dd70 <__ram_exceptions_end+0xfbfedb1c>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    ddac:	e0bff717 	ldw	r2,-36(fp)
    ddb0:	10c00044 	addi	r3,r2,1
    ddb4:	e0fff715 	stw	r3,-36(fp)
    ddb8:	10800003 	ldbu	r2,0(r2)
    ddbc:	e0bff805 	stb	r2,-32(fp)
    ddc0:	e0bff807 	ldb	r2,-32(fp)
    ddc4:	103f8a1e 	bne	r2,zero,dbf0 <__ram_exceptions_end+0xfbfed99c>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
    ddc8:	00000106 	br	ddd0 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
    ddcc:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
    ddd0:	0001883a 	nop
    ddd4:	e037883a 	mov	sp,fp
    ddd8:	dfc00117 	ldw	ra,4(sp)
    dddc:	df000017 	ldw	fp,0(sp)
    dde0:	dec00504 	addi	sp,sp,20
    dde4:	f800283a 	ret

0000dde8 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    dde8:	defffd04 	addi	sp,sp,-12
    ddec:	dfc00215 	stw	ra,8(sp)
    ddf0:	df000115 	stw	fp,4(sp)
    ddf4:	df000104 	addi	fp,sp,4
    ddf8:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
    ddfc:	d0a00117 	ldw	r2,-32764(gp)
    de00:	10800217 	ldw	r2,8(r2)
    de04:	100b883a 	mov	r5,r2
    de08:	e13fff17 	ldw	r4,-4(fp)
    de0c:	000fb180 	call	fb18 <putc>
#endif
#endif
}
    de10:	e037883a 	mov	sp,fp
    de14:	dfc00117 	ldw	ra,4(sp)
    de18:	df000017 	ldw	fp,0(sp)
    de1c:	dec00204 	addi	sp,sp,8
    de20:	f800283a 	ret

0000de24 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    de24:	defffe04 	addi	sp,sp,-8
    de28:	dfc00115 	stw	ra,4(sp)
    de2c:	df000015 	stw	fp,0(sp)
    de30:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    de34:	d0a00b17 	ldw	r2,-32724(gp)
    de38:	10000326 	beq	r2,zero,de48 <alt_get_errno+0x24>
    de3c:	d0a00b17 	ldw	r2,-32724(gp)
    de40:	103ee83a 	callr	r2
    de44:	00000106 	br	de4c <alt_get_errno+0x28>
    de48:	d0a6d404 	addi	r2,gp,-25776
}
    de4c:	e037883a 	mov	sp,fp
    de50:	dfc00117 	ldw	ra,4(sp)
    de54:	df000017 	ldw	fp,0(sp)
    de58:	dec00204 	addi	sp,sp,8
    de5c:	f800283a 	ret

0000de60 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    de60:	defff904 	addi	sp,sp,-28
    de64:	dfc00615 	stw	ra,24(sp)
    de68:	df000515 	stw	fp,20(sp)
    de6c:	df000504 	addi	fp,sp,20
    de70:	e13ffd15 	stw	r4,-12(fp)
    de74:	e17ffe15 	stw	r5,-8(fp)
    de78:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    de7c:	e0bffd17 	ldw	r2,-12(fp)
    de80:	10000616 	blt	r2,zero,de9c <read+0x3c>
    de84:	e0bffd17 	ldw	r2,-12(fp)
    de88:	10c00324 	muli	r3,r2,12
    de8c:	00800074 	movhi	r2,1
    de90:	10833204 	addi	r2,r2,3272
    de94:	1885883a 	add	r2,r3,r2
    de98:	00000106 	br	dea0 <read+0x40>
    de9c:	0005883a 	mov	r2,zero
    dea0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    dea4:	e0bffb17 	ldw	r2,-20(fp)
    dea8:	10002226 	beq	r2,zero,df34 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    deac:	e0bffb17 	ldw	r2,-20(fp)
    deb0:	10800217 	ldw	r2,8(r2)
    deb4:	108000cc 	andi	r2,r2,3
    deb8:	10800060 	cmpeqi	r2,r2,1
    debc:	1000181e 	bne	r2,zero,df20 <read+0xc0>
        (fd->dev->read))
    dec0:	e0bffb17 	ldw	r2,-20(fp)
    dec4:	10800017 	ldw	r2,0(r2)
    dec8:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    decc:	10001426 	beq	r2,zero,df20 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    ded0:	e0bffb17 	ldw	r2,-20(fp)
    ded4:	10800017 	ldw	r2,0(r2)
    ded8:	10800517 	ldw	r2,20(r2)
    dedc:	e0ffff17 	ldw	r3,-4(fp)
    dee0:	180d883a 	mov	r6,r3
    dee4:	e17ffe17 	ldw	r5,-8(fp)
    dee8:	e13ffb17 	ldw	r4,-20(fp)
    deec:	103ee83a 	callr	r2
    def0:	e0bffc15 	stw	r2,-16(fp)
    def4:	e0bffc17 	ldw	r2,-16(fp)
    def8:	1000070e 	bge	r2,zero,df18 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    defc:	000de240 	call	de24 <alt_get_errno>
    df00:	1007883a 	mov	r3,r2
    df04:	e0bffc17 	ldw	r2,-16(fp)
    df08:	0085c83a 	sub	r2,zero,r2
    df0c:	18800015 	stw	r2,0(r3)
          return -1;
    df10:	00bfffc4 	movi	r2,-1
    df14:	00000c06 	br	df48 <read+0xe8>
        }
        return rval;
    df18:	e0bffc17 	ldw	r2,-16(fp)
    df1c:	00000a06 	br	df48 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    df20:	000de240 	call	de24 <alt_get_errno>
    df24:	1007883a 	mov	r3,r2
    df28:	00800344 	movi	r2,13
    df2c:	18800015 	stw	r2,0(r3)
    df30:	00000406 	br	df44 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    df34:	000de240 	call	de24 <alt_get_errno>
    df38:	1007883a 	mov	r3,r2
    df3c:	00801444 	movi	r2,81
    df40:	18800015 	stw	r2,0(r3)
  }
  return -1;
    df44:	00bfffc4 	movi	r2,-1
}
    df48:	e037883a 	mov	sp,fp
    df4c:	dfc00117 	ldw	ra,4(sp)
    df50:	df000017 	ldw	fp,0(sp)
    df54:	dec00204 	addi	sp,sp,8
    df58:	f800283a 	ret

0000df5c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    df5c:	defffe04 	addi	sp,sp,-8
    df60:	df000115 	stw	fp,4(sp)
    df64:	df000104 	addi	fp,sp,4
    df68:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    df6c:	e0bfff17 	ldw	r2,-4(fp)
    df70:	108000d0 	cmplti	r2,r2,3
    df74:	10000d1e 	bne	r2,zero,dfac <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    df78:	00800074 	movhi	r2,1
    df7c:	10833204 	addi	r2,r2,3272
    df80:	e0ffff17 	ldw	r3,-4(fp)
    df84:	18c00324 	muli	r3,r3,12
    df88:	10c5883a 	add	r2,r2,r3
    df8c:	10800204 	addi	r2,r2,8
    df90:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    df94:	00800074 	movhi	r2,1
    df98:	10833204 	addi	r2,r2,3272
    df9c:	e0ffff17 	ldw	r3,-4(fp)
    dfa0:	18c00324 	muli	r3,r3,12
    dfa4:	10c5883a 	add	r2,r2,r3
    dfa8:	10000015 	stw	zero,0(r2)
  }
}
    dfac:	0001883a 	nop
    dfb0:	e037883a 	mov	sp,fp
    dfb4:	df000017 	ldw	fp,0(sp)
    dfb8:	dec00104 	addi	sp,sp,4
    dfbc:	f800283a 	ret

0000dfc0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    dfc0:	defff904 	addi	sp,sp,-28
    dfc4:	df000615 	stw	fp,24(sp)
    dfc8:	df000604 	addi	fp,sp,24
    dfcc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    dfd0:	0005303a 	rdctl	r2,status
    dfd4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    dfd8:	e0fffe17 	ldw	r3,-8(fp)
    dfdc:	00bfff84 	movi	r2,-2
    dfe0:	1884703a 	and	r2,r3,r2
    dfe4:	1001703a 	wrctl	status,r2
  
  return context;
    dfe8:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    dfec:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    dff0:	d0a00d17 	ldw	r2,-32716(gp)
    dff4:	10c000c4 	addi	r3,r2,3
    dff8:	00bfff04 	movi	r2,-4
    dffc:	1884703a 	and	r2,r3,r2
    e000:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    e004:	d0e00d17 	ldw	r3,-32716(gp)
    e008:	e0bfff17 	ldw	r2,-4(fp)
    e00c:	1887883a 	add	r3,r3,r2
    e010:	00810034 	movhi	r2,1024
    e014:	10800004 	addi	r2,r2,0
    e018:	10c0062e 	bgeu	r2,r3,e034 <sbrk+0x74>
    e01c:	e0bffb17 	ldw	r2,-20(fp)
    e020:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e024:	e0bffa17 	ldw	r2,-24(fp)
    e028:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    e02c:	00bfffc4 	movi	r2,-1
    e030:	00000b06 	br	e060 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    e034:	d0a00d17 	ldw	r2,-32716(gp)
    e038:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    e03c:	d0e00d17 	ldw	r3,-32716(gp)
    e040:	e0bfff17 	ldw	r2,-4(fp)
    e044:	1885883a 	add	r2,r3,r2
    e048:	d0a00d15 	stw	r2,-32716(gp)
    e04c:	e0bffb17 	ldw	r2,-20(fp)
    e050:	e0bffc15 	stw	r2,-16(fp)
    e054:	e0bffc17 	ldw	r2,-16(fp)
    e058:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    e05c:	e0bffd17 	ldw	r2,-12(fp)
} 
    e060:	e037883a 	mov	sp,fp
    e064:	df000017 	ldw	fp,0(sp)
    e068:	dec00104 	addi	sp,sp,4
    e06c:	f800283a 	ret

0000e070 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e070:	defffe04 	addi	sp,sp,-8
    e074:	dfc00115 	stw	ra,4(sp)
    e078:	df000015 	stw	fp,0(sp)
    e07c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e080:	d0a00b17 	ldw	r2,-32724(gp)
    e084:	10000326 	beq	r2,zero,e094 <alt_get_errno+0x24>
    e088:	d0a00b17 	ldw	r2,-32724(gp)
    e08c:	103ee83a 	callr	r2
    e090:	00000106 	br	e098 <alt_get_errno+0x28>
    e094:	d0a6d404 	addi	r2,gp,-25776
}
    e098:	e037883a 	mov	sp,fp
    e09c:	dfc00117 	ldw	ra,4(sp)
    e0a0:	df000017 	ldw	fp,0(sp)
    e0a4:	dec00204 	addi	sp,sp,8
    e0a8:	f800283a 	ret

0000e0ac <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    e0ac:	defff904 	addi	sp,sp,-28
    e0b0:	dfc00615 	stw	ra,24(sp)
    e0b4:	df000515 	stw	fp,20(sp)
    e0b8:	df000504 	addi	fp,sp,20
    e0bc:	e13ffd15 	stw	r4,-12(fp)
    e0c0:	e17ffe15 	stw	r5,-8(fp)
    e0c4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e0c8:	e0bffd17 	ldw	r2,-12(fp)
    e0cc:	10000616 	blt	r2,zero,e0e8 <write+0x3c>
    e0d0:	e0bffd17 	ldw	r2,-12(fp)
    e0d4:	10c00324 	muli	r3,r2,12
    e0d8:	00800074 	movhi	r2,1
    e0dc:	10833204 	addi	r2,r2,3272
    e0e0:	1885883a 	add	r2,r3,r2
    e0e4:	00000106 	br	e0ec <write+0x40>
    e0e8:	0005883a 	mov	r2,zero
    e0ec:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    e0f0:	e0bffb17 	ldw	r2,-20(fp)
    e0f4:	10002126 	beq	r2,zero,e17c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    e0f8:	e0bffb17 	ldw	r2,-20(fp)
    e0fc:	10800217 	ldw	r2,8(r2)
    e100:	108000cc 	andi	r2,r2,3
    e104:	10001826 	beq	r2,zero,e168 <write+0xbc>
    e108:	e0bffb17 	ldw	r2,-20(fp)
    e10c:	10800017 	ldw	r2,0(r2)
    e110:	10800617 	ldw	r2,24(r2)
    e114:	10001426 	beq	r2,zero,e168 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    e118:	e0bffb17 	ldw	r2,-20(fp)
    e11c:	10800017 	ldw	r2,0(r2)
    e120:	10800617 	ldw	r2,24(r2)
    e124:	e0ffff17 	ldw	r3,-4(fp)
    e128:	180d883a 	mov	r6,r3
    e12c:	e17ffe17 	ldw	r5,-8(fp)
    e130:	e13ffb17 	ldw	r4,-20(fp)
    e134:	103ee83a 	callr	r2
    e138:	e0bffc15 	stw	r2,-16(fp)
    e13c:	e0bffc17 	ldw	r2,-16(fp)
    e140:	1000070e 	bge	r2,zero,e160 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    e144:	000e0700 	call	e070 <alt_get_errno>
    e148:	1007883a 	mov	r3,r2
    e14c:	e0bffc17 	ldw	r2,-16(fp)
    e150:	0085c83a 	sub	r2,zero,r2
    e154:	18800015 	stw	r2,0(r3)
        return -1;
    e158:	00bfffc4 	movi	r2,-1
    e15c:	00000c06 	br	e190 <write+0xe4>
      }
      return rval;
    e160:	e0bffc17 	ldw	r2,-16(fp)
    e164:	00000a06 	br	e190 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    e168:	000e0700 	call	e070 <alt_get_errno>
    e16c:	1007883a 	mov	r3,r2
    e170:	00800344 	movi	r2,13
    e174:	18800015 	stw	r2,0(r3)
    e178:	00000406 	br	e18c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    e17c:	000e0700 	call	e070 <alt_get_errno>
    e180:	1007883a 	mov	r3,r2
    e184:	00801444 	movi	r2,81
    e188:	18800015 	stw	r2,0(r3)
  }
  return -1;
    e18c:	00bfffc4 	movi	r2,-1
}
    e190:	e037883a 	mov	sp,fp
    e194:	dfc00117 	ldw	ra,4(sp)
    e198:	df000017 	ldw	fp,0(sp)
    e19c:	dec00204 	addi	sp,sp,8
    e1a0:	f800283a 	ret

0000e1a4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    e1a4:	defffd04 	addi	sp,sp,-12
    e1a8:	dfc00215 	stw	ra,8(sp)
    e1ac:	df000115 	stw	fp,4(sp)
    e1b0:	df000104 	addi	fp,sp,4
    e1b4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    e1b8:	d1600804 	addi	r5,gp,-32736
    e1bc:	e13fff17 	ldw	r4,-4(fp)
    e1c0:	000ef540 	call	ef54 <alt_dev_llist_insert>
}
    e1c4:	e037883a 	mov	sp,fp
    e1c8:	dfc00117 	ldw	ra,4(sp)
    e1cc:	df000017 	ldw	fp,0(sp)
    e1d0:	dec00204 	addi	sp,sp,8
    e1d4:	f800283a 	ret

0000e1d8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    e1d8:	defffd04 	addi	sp,sp,-12
    e1dc:	dfc00215 	stw	ra,8(sp)
    e1e0:	df000115 	stw	fp,4(sp)
    e1e4:	df000104 	addi	fp,sp,4
    e1e8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    e1ec:	000f6c00 	call	f6c0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    e1f0:	00800044 	movi	r2,1
    e1f4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    e1f8:	0001883a 	nop
    e1fc:	e037883a 	mov	sp,fp
    e200:	dfc00117 	ldw	ra,4(sp)
    e204:	df000017 	ldw	fp,0(sp)
    e208:	dec00204 	addi	sp,sp,8
    e20c:	f800283a 	ret

0000e210 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    e210:	defffe04 	addi	sp,sp,-8
    e214:	dfc00115 	stw	ra,4(sp)
    e218:	df000015 	stw	fp,0(sp)
    e21c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    e220:	01c0fa04 	movi	r7,1000
    e224:	018000c4 	movi	r6,3
    e228:	000b883a 	mov	r5,zero
    e22c:	01010134 	movhi	r4,1028
    e230:	21040004 	addi	r4,r4,4096
    e234:	000ed500 	call	ed50 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    e238:	01800084 	movi	r6,2
    e23c:	000b883a 	mov	r5,zero
    e240:	01000074 	movhi	r4,1
    e244:	21039c04 	addi	r4,r4,3696
    e248:	000e3d40 	call	e3d4 <altera_avalon_jtag_uart_init>
    e24c:	01000074 	movhi	r4,1
    e250:	21039204 	addi	r4,r4,3656
    e254:	000e1a40 	call	e1a4 <alt_dev_reg>
}
    e258:	0001883a 	nop
    e25c:	e037883a 	mov	sp,fp
    e260:	dfc00117 	ldw	ra,4(sp)
    e264:	df000017 	ldw	fp,0(sp)
    e268:	dec00204 	addi	sp,sp,8
    e26c:	f800283a 	ret

0000e270 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    e270:	defffa04 	addi	sp,sp,-24
    e274:	dfc00515 	stw	ra,20(sp)
    e278:	df000415 	stw	fp,16(sp)
    e27c:	df000404 	addi	fp,sp,16
    e280:	e13ffd15 	stw	r4,-12(fp)
    e284:	e17ffe15 	stw	r5,-8(fp)
    e288:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    e28c:	e0bffd17 	ldw	r2,-12(fp)
    e290:	10800017 	ldw	r2,0(r2)
    e294:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    e298:	e0bffc17 	ldw	r2,-16(fp)
    e29c:	10c00a04 	addi	r3,r2,40
    e2a0:	e0bffd17 	ldw	r2,-12(fp)
    e2a4:	10800217 	ldw	r2,8(r2)
    e2a8:	100f883a 	mov	r7,r2
    e2ac:	e1bfff17 	ldw	r6,-4(fp)
    e2b0:	e17ffe17 	ldw	r5,-8(fp)
    e2b4:	1809883a 	mov	r4,r3
    e2b8:	000e8980 	call	e898 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    e2bc:	e037883a 	mov	sp,fp
    e2c0:	dfc00117 	ldw	ra,4(sp)
    e2c4:	df000017 	ldw	fp,0(sp)
    e2c8:	dec00204 	addi	sp,sp,8
    e2cc:	f800283a 	ret

0000e2d0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    e2d0:	defffa04 	addi	sp,sp,-24
    e2d4:	dfc00515 	stw	ra,20(sp)
    e2d8:	df000415 	stw	fp,16(sp)
    e2dc:	df000404 	addi	fp,sp,16
    e2e0:	e13ffd15 	stw	r4,-12(fp)
    e2e4:	e17ffe15 	stw	r5,-8(fp)
    e2e8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    e2ec:	e0bffd17 	ldw	r2,-12(fp)
    e2f0:	10800017 	ldw	r2,0(r2)
    e2f4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    e2f8:	e0bffc17 	ldw	r2,-16(fp)
    e2fc:	10c00a04 	addi	r3,r2,40
    e300:	e0bffd17 	ldw	r2,-12(fp)
    e304:	10800217 	ldw	r2,8(r2)
    e308:	100f883a 	mov	r7,r2
    e30c:	e1bfff17 	ldw	r6,-4(fp)
    e310:	e17ffe17 	ldw	r5,-8(fp)
    e314:	1809883a 	mov	r4,r3
    e318:	000eab40 	call	eab4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    e31c:	e037883a 	mov	sp,fp
    e320:	dfc00117 	ldw	ra,4(sp)
    e324:	df000017 	ldw	fp,0(sp)
    e328:	dec00204 	addi	sp,sp,8
    e32c:	f800283a 	ret

0000e330 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    e330:	defffc04 	addi	sp,sp,-16
    e334:	dfc00315 	stw	ra,12(sp)
    e338:	df000215 	stw	fp,8(sp)
    e33c:	df000204 	addi	fp,sp,8
    e340:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    e344:	e0bfff17 	ldw	r2,-4(fp)
    e348:	10800017 	ldw	r2,0(r2)
    e34c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    e350:	e0bffe17 	ldw	r2,-8(fp)
    e354:	10c00a04 	addi	r3,r2,40
    e358:	e0bfff17 	ldw	r2,-4(fp)
    e35c:	10800217 	ldw	r2,8(r2)
    e360:	100b883a 	mov	r5,r2
    e364:	1809883a 	mov	r4,r3
    e368:	000e7400 	call	e740 <altera_avalon_jtag_uart_close>
}
    e36c:	e037883a 	mov	sp,fp
    e370:	dfc00117 	ldw	ra,4(sp)
    e374:	df000017 	ldw	fp,0(sp)
    e378:	dec00204 	addi	sp,sp,8
    e37c:	f800283a 	ret

0000e380 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    e380:	defffa04 	addi	sp,sp,-24
    e384:	dfc00515 	stw	ra,20(sp)
    e388:	df000415 	stw	fp,16(sp)
    e38c:	df000404 	addi	fp,sp,16
    e390:	e13ffd15 	stw	r4,-12(fp)
    e394:	e17ffe15 	stw	r5,-8(fp)
    e398:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    e39c:	e0bffd17 	ldw	r2,-12(fp)
    e3a0:	10800017 	ldw	r2,0(r2)
    e3a4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    e3a8:	e0bffc17 	ldw	r2,-16(fp)
    e3ac:	10800a04 	addi	r2,r2,40
    e3b0:	e1bfff17 	ldw	r6,-4(fp)
    e3b4:	e17ffe17 	ldw	r5,-8(fp)
    e3b8:	1009883a 	mov	r4,r2
    e3bc:	000e7a80 	call	e7a8 <altera_avalon_jtag_uart_ioctl>
}
    e3c0:	e037883a 	mov	sp,fp
    e3c4:	dfc00117 	ldw	ra,4(sp)
    e3c8:	df000017 	ldw	fp,0(sp)
    e3cc:	dec00204 	addi	sp,sp,8
    e3d0:	f800283a 	ret

0000e3d4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    e3d4:	defffa04 	addi	sp,sp,-24
    e3d8:	dfc00515 	stw	ra,20(sp)
    e3dc:	df000415 	stw	fp,16(sp)
    e3e0:	df000404 	addi	fp,sp,16
    e3e4:	e13ffd15 	stw	r4,-12(fp)
    e3e8:	e17ffe15 	stw	r5,-8(fp)
    e3ec:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    e3f0:	e0bffd17 	ldw	r2,-12(fp)
    e3f4:	00c00044 	movi	r3,1
    e3f8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    e3fc:	e0bffd17 	ldw	r2,-12(fp)
    e400:	10800017 	ldw	r2,0(r2)
    e404:	10800104 	addi	r2,r2,4
    e408:	1007883a 	mov	r3,r2
    e40c:	e0bffd17 	ldw	r2,-12(fp)
    e410:	10800817 	ldw	r2,32(r2)
    e414:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    e418:	e0bffe17 	ldw	r2,-8(fp)
    e41c:	e0ffff17 	ldw	r3,-4(fp)
    e420:	d8000015 	stw	zero,0(sp)
    e424:	e1fffd17 	ldw	r7,-12(fp)
    e428:	01800074 	movhi	r6,1
    e42c:	31b92504 	addi	r6,r6,-7020
    e430:	180b883a 	mov	r5,r3
    e434:	1009883a 	mov	r4,r2
    e438:	000d57c0 	call	d57c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    e43c:	e0bffd17 	ldw	r2,-12(fp)
    e440:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    e444:	e0bffd17 	ldw	r2,-12(fp)
    e448:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    e44c:	d0e6da17 	ldw	r3,-25752(gp)
    e450:	e1fffd17 	ldw	r7,-12(fp)
    e454:	01800074 	movhi	r6,1
    e458:	31b9a804 	addi	r6,r6,-6496
    e45c:	180b883a 	mov	r5,r3
    e460:	1009883a 	mov	r4,r2
    e464:	000edcc0 	call	edcc <alt_alarm_start>
    e468:	1000040e 	bge	r2,zero,e47c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    e46c:	e0fffd17 	ldw	r3,-12(fp)
    e470:	00a00034 	movhi	r2,32768
    e474:	10bfffc4 	addi	r2,r2,-1
    e478:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    e47c:	0001883a 	nop
    e480:	e037883a 	mov	sp,fp
    e484:	dfc00117 	ldw	ra,4(sp)
    e488:	df000017 	ldw	fp,0(sp)
    e48c:	dec00204 	addi	sp,sp,8
    e490:	f800283a 	ret

0000e494 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    e494:	defff804 	addi	sp,sp,-32
    e498:	df000715 	stw	fp,28(sp)
    e49c:	df000704 	addi	fp,sp,28
    e4a0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    e4a4:	e0bfff17 	ldw	r2,-4(fp)
    e4a8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    e4ac:	e0bffb17 	ldw	r2,-20(fp)
    e4b0:	10800017 	ldw	r2,0(r2)
    e4b4:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    e4b8:	e0bffc17 	ldw	r2,-16(fp)
    e4bc:	10800104 	addi	r2,r2,4
    e4c0:	10800037 	ldwio	r2,0(r2)
    e4c4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    e4c8:	e0bffd17 	ldw	r2,-12(fp)
    e4cc:	1080c00c 	andi	r2,r2,768
    e4d0:	10006d26 	beq	r2,zero,e688 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    e4d4:	e0bffd17 	ldw	r2,-12(fp)
    e4d8:	1080400c 	andi	r2,r2,256
    e4dc:	10003526 	beq	r2,zero,e5b4 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    e4e0:	00800074 	movhi	r2,1
    e4e4:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e4e8:	e0bffb17 	ldw	r2,-20(fp)
    e4ec:	10800a17 	ldw	r2,40(r2)
    e4f0:	10800044 	addi	r2,r2,1
    e4f4:	1081ffcc 	andi	r2,r2,2047
    e4f8:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    e4fc:	e0bffb17 	ldw	r2,-20(fp)
    e500:	10c00b17 	ldw	r3,44(r2)
    e504:	e0bffe17 	ldw	r2,-8(fp)
    e508:	18801526 	beq	r3,r2,e560 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    e50c:	e0bffc17 	ldw	r2,-16(fp)
    e510:	10800037 	ldwio	r2,0(r2)
    e514:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    e518:	e0bff917 	ldw	r2,-28(fp)
    e51c:	10a0000c 	andi	r2,r2,32768
    e520:	10001126 	beq	r2,zero,e568 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    e524:	e0bffb17 	ldw	r2,-20(fp)
    e528:	10800a17 	ldw	r2,40(r2)
    e52c:	e0fff917 	ldw	r3,-28(fp)
    e530:	1809883a 	mov	r4,r3
    e534:	e0fffb17 	ldw	r3,-20(fp)
    e538:	1885883a 	add	r2,r3,r2
    e53c:	10800e04 	addi	r2,r2,56
    e540:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e544:	e0bffb17 	ldw	r2,-20(fp)
    e548:	10800a17 	ldw	r2,40(r2)
    e54c:	10800044 	addi	r2,r2,1
    e550:	10c1ffcc 	andi	r3,r2,2047
    e554:	e0bffb17 	ldw	r2,-20(fp)
    e558:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    e55c:	003fe206 	br	e4e8 <__ram_exceptions_end+0xfbfee294>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    e560:	0001883a 	nop
    e564:	00000106 	br	e56c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    e568:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    e56c:	e0bff917 	ldw	r2,-28(fp)
    e570:	10bfffec 	andhi	r2,r2,65535
    e574:	10000f26 	beq	r2,zero,e5b4 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    e578:	e0bffb17 	ldw	r2,-20(fp)
    e57c:	10c00817 	ldw	r3,32(r2)
    e580:	00bfff84 	movi	r2,-2
    e584:	1886703a 	and	r3,r3,r2
    e588:	e0bffb17 	ldw	r2,-20(fp)
    e58c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    e590:	e0bffc17 	ldw	r2,-16(fp)
    e594:	10800104 	addi	r2,r2,4
    e598:	1007883a 	mov	r3,r2
    e59c:	e0bffb17 	ldw	r2,-20(fp)
    e5a0:	10800817 	ldw	r2,32(r2)
    e5a4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    e5a8:	e0bffc17 	ldw	r2,-16(fp)
    e5ac:	10800104 	addi	r2,r2,4
    e5b0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    e5b4:	e0bffd17 	ldw	r2,-12(fp)
    e5b8:	1080800c 	andi	r2,r2,512
    e5bc:	103fbe26 	beq	r2,zero,e4b8 <__ram_exceptions_end+0xfbfee264>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    e5c0:	e0bffd17 	ldw	r2,-12(fp)
    e5c4:	1004d43a 	srli	r2,r2,16
    e5c8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    e5cc:	00001406 	br	e620 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    e5d0:	e0bffc17 	ldw	r2,-16(fp)
    e5d4:	e0fffb17 	ldw	r3,-20(fp)
    e5d8:	18c00d17 	ldw	r3,52(r3)
    e5dc:	e13ffb17 	ldw	r4,-20(fp)
    e5e0:	20c7883a 	add	r3,r4,r3
    e5e4:	18c20e04 	addi	r3,r3,2104
    e5e8:	18c00003 	ldbu	r3,0(r3)
    e5ec:	18c03fcc 	andi	r3,r3,255
    e5f0:	18c0201c 	xori	r3,r3,128
    e5f4:	18ffe004 	addi	r3,r3,-128
    e5f8:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e5fc:	e0bffb17 	ldw	r2,-20(fp)
    e600:	10800d17 	ldw	r2,52(r2)
    e604:	10800044 	addi	r2,r2,1
    e608:	10c1ffcc 	andi	r3,r2,2047
    e60c:	e0bffb17 	ldw	r2,-20(fp)
    e610:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    e614:	e0bffa17 	ldw	r2,-24(fp)
    e618:	10bfffc4 	addi	r2,r2,-1
    e61c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    e620:	e0bffa17 	ldw	r2,-24(fp)
    e624:	10000526 	beq	r2,zero,e63c <altera_avalon_jtag_uart_irq+0x1a8>
    e628:	e0bffb17 	ldw	r2,-20(fp)
    e62c:	10c00d17 	ldw	r3,52(r2)
    e630:	e0bffb17 	ldw	r2,-20(fp)
    e634:	10800c17 	ldw	r2,48(r2)
    e638:	18bfe51e 	bne	r3,r2,e5d0 <__ram_exceptions_end+0xfbfee37c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    e63c:	e0bffa17 	ldw	r2,-24(fp)
    e640:	103f9d26 	beq	r2,zero,e4b8 <__ram_exceptions_end+0xfbfee264>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    e644:	e0bffb17 	ldw	r2,-20(fp)
    e648:	10c00817 	ldw	r3,32(r2)
    e64c:	00bfff44 	movi	r2,-3
    e650:	1886703a 	and	r3,r3,r2
    e654:	e0bffb17 	ldw	r2,-20(fp)
    e658:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    e65c:	e0bffb17 	ldw	r2,-20(fp)
    e660:	10800017 	ldw	r2,0(r2)
    e664:	10800104 	addi	r2,r2,4
    e668:	1007883a 	mov	r3,r2
    e66c:	e0bffb17 	ldw	r2,-20(fp)
    e670:	10800817 	ldw	r2,32(r2)
    e674:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    e678:	e0bffc17 	ldw	r2,-16(fp)
    e67c:	10800104 	addi	r2,r2,4
    e680:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    e684:	003f8c06 	br	e4b8 <__ram_exceptions_end+0xfbfee264>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    e688:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    e68c:	0001883a 	nop
    e690:	e037883a 	mov	sp,fp
    e694:	df000017 	ldw	fp,0(sp)
    e698:	dec00104 	addi	sp,sp,4
    e69c:	f800283a 	ret

0000e6a0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    e6a0:	defff804 	addi	sp,sp,-32
    e6a4:	df000715 	stw	fp,28(sp)
    e6a8:	df000704 	addi	fp,sp,28
    e6ac:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    e6b0:	e0bffb17 	ldw	r2,-20(fp)
    e6b4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    e6b8:	e0bff917 	ldw	r2,-28(fp)
    e6bc:	10800017 	ldw	r2,0(r2)
    e6c0:	10800104 	addi	r2,r2,4
    e6c4:	10800037 	ldwio	r2,0(r2)
    e6c8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    e6cc:	e0bffa17 	ldw	r2,-24(fp)
    e6d0:	1081000c 	andi	r2,r2,1024
    e6d4:	10000b26 	beq	r2,zero,e704 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    e6d8:	e0bff917 	ldw	r2,-28(fp)
    e6dc:	10800017 	ldw	r2,0(r2)
    e6e0:	10800104 	addi	r2,r2,4
    e6e4:	1007883a 	mov	r3,r2
    e6e8:	e0bff917 	ldw	r2,-28(fp)
    e6ec:	10800817 	ldw	r2,32(r2)
    e6f0:	10810014 	ori	r2,r2,1024
    e6f4:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    e6f8:	e0bff917 	ldw	r2,-28(fp)
    e6fc:	10000915 	stw	zero,36(r2)
    e700:	00000a06 	br	e72c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    e704:	e0bff917 	ldw	r2,-28(fp)
    e708:	10c00917 	ldw	r3,36(r2)
    e70c:	00a00034 	movhi	r2,32768
    e710:	10bfff04 	addi	r2,r2,-4
    e714:	10c00536 	bltu	r2,r3,e72c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    e718:	e0bff917 	ldw	r2,-28(fp)
    e71c:	10800917 	ldw	r2,36(r2)
    e720:	10c00044 	addi	r3,r2,1
    e724:	e0bff917 	ldw	r2,-28(fp)
    e728:	10c00915 	stw	r3,36(r2)
    e72c:	d0a6da17 	ldw	r2,-25752(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    e730:	e037883a 	mov	sp,fp
    e734:	df000017 	ldw	fp,0(sp)
    e738:	dec00104 	addi	sp,sp,4
    e73c:	f800283a 	ret

0000e740 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    e740:	defffd04 	addi	sp,sp,-12
    e744:	df000215 	stw	fp,8(sp)
    e748:	df000204 	addi	fp,sp,8
    e74c:	e13ffe15 	stw	r4,-8(fp)
    e750:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    e754:	00000506 	br	e76c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    e758:	e0bfff17 	ldw	r2,-4(fp)
    e75c:	1090000c 	andi	r2,r2,16384
    e760:	10000226 	beq	r2,zero,e76c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    e764:	00bffd44 	movi	r2,-11
    e768:	00000b06 	br	e798 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    e76c:	e0bffe17 	ldw	r2,-8(fp)
    e770:	10c00d17 	ldw	r3,52(r2)
    e774:	e0bffe17 	ldw	r2,-8(fp)
    e778:	10800c17 	ldw	r2,48(r2)
    e77c:	18800526 	beq	r3,r2,e794 <altera_avalon_jtag_uart_close+0x54>
    e780:	e0bffe17 	ldw	r2,-8(fp)
    e784:	10c00917 	ldw	r3,36(r2)
    e788:	e0bffe17 	ldw	r2,-8(fp)
    e78c:	10800117 	ldw	r2,4(r2)
    e790:	18bff136 	bltu	r3,r2,e758 <__ram_exceptions_end+0xfbfee504>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    e794:	0005883a 	mov	r2,zero
}
    e798:	e037883a 	mov	sp,fp
    e79c:	df000017 	ldw	fp,0(sp)
    e7a0:	dec00104 	addi	sp,sp,4
    e7a4:	f800283a 	ret

0000e7a8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    e7a8:	defffa04 	addi	sp,sp,-24
    e7ac:	df000515 	stw	fp,20(sp)
    e7b0:	df000504 	addi	fp,sp,20
    e7b4:	e13ffd15 	stw	r4,-12(fp)
    e7b8:	e17ffe15 	stw	r5,-8(fp)
    e7bc:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    e7c0:	00bff9c4 	movi	r2,-25
    e7c4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    e7c8:	e0bffe17 	ldw	r2,-8(fp)
    e7cc:	10da8060 	cmpeqi	r3,r2,27137
    e7d0:	1800031e 	bne	r3,zero,e7e0 <altera_avalon_jtag_uart_ioctl+0x38>
    e7d4:	109a80a0 	cmpeqi	r2,r2,27138
    e7d8:	1000181e 	bne	r2,zero,e83c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    e7dc:	00002906 	br	e884 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    e7e0:	e0bffd17 	ldw	r2,-12(fp)
    e7e4:	10c00117 	ldw	r3,4(r2)
    e7e8:	00a00034 	movhi	r2,32768
    e7ec:	10bfffc4 	addi	r2,r2,-1
    e7f0:	18802126 	beq	r3,r2,e878 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    e7f4:	e0bfff17 	ldw	r2,-4(fp)
    e7f8:	10800017 	ldw	r2,0(r2)
    e7fc:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    e800:	e0bffc17 	ldw	r2,-16(fp)
    e804:	10800090 	cmplti	r2,r2,2
    e808:	1000061e 	bne	r2,zero,e824 <altera_avalon_jtag_uart_ioctl+0x7c>
    e80c:	e0fffc17 	ldw	r3,-16(fp)
    e810:	00a00034 	movhi	r2,32768
    e814:	10bfffc4 	addi	r2,r2,-1
    e818:	18800226 	beq	r3,r2,e824 <altera_avalon_jtag_uart_ioctl+0x7c>
    e81c:	e0bffc17 	ldw	r2,-16(fp)
    e820:	00000206 	br	e82c <altera_avalon_jtag_uart_ioctl+0x84>
    e824:	00a00034 	movhi	r2,32768
    e828:	10bfff84 	addi	r2,r2,-2
    e82c:	e0fffd17 	ldw	r3,-12(fp)
    e830:	18800115 	stw	r2,4(r3)
      rc = 0;
    e834:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    e838:	00000f06 	br	e878 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    e83c:	e0bffd17 	ldw	r2,-12(fp)
    e840:	10c00117 	ldw	r3,4(r2)
    e844:	00a00034 	movhi	r2,32768
    e848:	10bfffc4 	addi	r2,r2,-1
    e84c:	18800c26 	beq	r3,r2,e880 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    e850:	e0bffd17 	ldw	r2,-12(fp)
    e854:	10c00917 	ldw	r3,36(r2)
    e858:	e0bffd17 	ldw	r2,-12(fp)
    e85c:	10800117 	ldw	r2,4(r2)
    e860:	1885803a 	cmpltu	r2,r3,r2
    e864:	10c03fcc 	andi	r3,r2,255
    e868:	e0bfff17 	ldw	r2,-4(fp)
    e86c:	10c00015 	stw	r3,0(r2)
      rc = 0;
    e870:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    e874:	00000206 	br	e880 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    e878:	0001883a 	nop
    e87c:	00000106 	br	e884 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    e880:	0001883a 	nop

  default:
    break;
  }

  return rc;
    e884:	e0bffb17 	ldw	r2,-20(fp)
}
    e888:	e037883a 	mov	sp,fp
    e88c:	df000017 	ldw	fp,0(sp)
    e890:	dec00104 	addi	sp,sp,4
    e894:	f800283a 	ret

0000e898 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    e898:	defff304 	addi	sp,sp,-52
    e89c:	dfc00c15 	stw	ra,48(sp)
    e8a0:	df000b15 	stw	fp,44(sp)
    e8a4:	df000b04 	addi	fp,sp,44
    e8a8:	e13ffc15 	stw	r4,-16(fp)
    e8ac:	e17ffd15 	stw	r5,-12(fp)
    e8b0:	e1bffe15 	stw	r6,-8(fp)
    e8b4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    e8b8:	e0bffd17 	ldw	r2,-12(fp)
    e8bc:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    e8c0:	00004706 	br	e9e0 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    e8c4:	e0bffc17 	ldw	r2,-16(fp)
    e8c8:	10800a17 	ldw	r2,40(r2)
    e8cc:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    e8d0:	e0bffc17 	ldw	r2,-16(fp)
    e8d4:	10800b17 	ldw	r2,44(r2)
    e8d8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    e8dc:	e0fff717 	ldw	r3,-36(fp)
    e8e0:	e0bff817 	ldw	r2,-32(fp)
    e8e4:	18800536 	bltu	r3,r2,e8fc <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    e8e8:	e0fff717 	ldw	r3,-36(fp)
    e8ec:	e0bff817 	ldw	r2,-32(fp)
    e8f0:	1885c83a 	sub	r2,r3,r2
    e8f4:	e0bff615 	stw	r2,-40(fp)
    e8f8:	00000406 	br	e90c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    e8fc:	00c20004 	movi	r3,2048
    e900:	e0bff817 	ldw	r2,-32(fp)
    e904:	1885c83a 	sub	r2,r3,r2
    e908:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    e90c:	e0bff617 	ldw	r2,-40(fp)
    e910:	10001e26 	beq	r2,zero,e98c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    e914:	e0fffe17 	ldw	r3,-8(fp)
    e918:	e0bff617 	ldw	r2,-40(fp)
    e91c:	1880022e 	bgeu	r3,r2,e928 <altera_avalon_jtag_uart_read+0x90>
        n = space;
    e920:	e0bffe17 	ldw	r2,-8(fp)
    e924:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    e928:	e0bffc17 	ldw	r2,-16(fp)
    e92c:	10c00e04 	addi	r3,r2,56
    e930:	e0bff817 	ldw	r2,-32(fp)
    e934:	1885883a 	add	r2,r3,r2
    e938:	e1bff617 	ldw	r6,-40(fp)
    e93c:	100b883a 	mov	r5,r2
    e940:	e13ff517 	ldw	r4,-44(fp)
    e944:	00061640 	call	6164 <memcpy>
      ptr   += n;
    e948:	e0fff517 	ldw	r3,-44(fp)
    e94c:	e0bff617 	ldw	r2,-40(fp)
    e950:	1885883a 	add	r2,r3,r2
    e954:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    e958:	e0fffe17 	ldw	r3,-8(fp)
    e95c:	e0bff617 	ldw	r2,-40(fp)
    e960:	1885c83a 	sub	r2,r3,r2
    e964:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e968:	e0fff817 	ldw	r3,-32(fp)
    e96c:	e0bff617 	ldw	r2,-40(fp)
    e970:	1885883a 	add	r2,r3,r2
    e974:	10c1ffcc 	andi	r3,r2,2047
    e978:	e0bffc17 	ldw	r2,-16(fp)
    e97c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    e980:	e0bffe17 	ldw	r2,-8(fp)
    e984:	00bfcf16 	blt	zero,r2,e8c4 <__ram_exceptions_end+0xfbfee670>
    e988:	00000106 	br	e990 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    e98c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    e990:	e0fff517 	ldw	r3,-44(fp)
    e994:	e0bffd17 	ldw	r2,-12(fp)
    e998:	1880141e 	bne	r3,r2,e9ec <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    e99c:	e0bfff17 	ldw	r2,-4(fp)
    e9a0:	1090000c 	andi	r2,r2,16384
    e9a4:	1000131e 	bne	r2,zero,e9f4 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    e9a8:	0001883a 	nop
    e9ac:	e0bffc17 	ldw	r2,-16(fp)
    e9b0:	10c00a17 	ldw	r3,40(r2)
    e9b4:	e0bff717 	ldw	r2,-36(fp)
    e9b8:	1880051e 	bne	r3,r2,e9d0 <altera_avalon_jtag_uart_read+0x138>
    e9bc:	e0bffc17 	ldw	r2,-16(fp)
    e9c0:	10c00917 	ldw	r3,36(r2)
    e9c4:	e0bffc17 	ldw	r2,-16(fp)
    e9c8:	10800117 	ldw	r2,4(r2)
    e9cc:	18bff736 	bltu	r3,r2,e9ac <__ram_exceptions_end+0xfbfee758>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    e9d0:	e0bffc17 	ldw	r2,-16(fp)
    e9d4:	10c00a17 	ldw	r3,40(r2)
    e9d8:	e0bff717 	ldw	r2,-36(fp)
    e9dc:	18800726 	beq	r3,r2,e9fc <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    e9e0:	e0bffe17 	ldw	r2,-8(fp)
    e9e4:	00bfb716 	blt	zero,r2,e8c4 <__ram_exceptions_end+0xfbfee670>
    e9e8:	00000506 	br	ea00 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    e9ec:	0001883a 	nop
    e9f0:	00000306 	br	ea00 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    e9f4:	0001883a 	nop
    e9f8:	00000106 	br	ea00 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    e9fc:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    ea00:	e0fff517 	ldw	r3,-44(fp)
    ea04:	e0bffd17 	ldw	r2,-12(fp)
    ea08:	18801826 	beq	r3,r2,ea6c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ea0c:	0005303a 	rdctl	r2,status
    ea10:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ea14:	e0fffb17 	ldw	r3,-20(fp)
    ea18:	00bfff84 	movi	r2,-2
    ea1c:	1884703a 	and	r2,r3,r2
    ea20:	1001703a 	wrctl	status,r2
  
  return context;
    ea24:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    ea28:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ea2c:	e0bffc17 	ldw	r2,-16(fp)
    ea30:	10800817 	ldw	r2,32(r2)
    ea34:	10c00054 	ori	r3,r2,1
    ea38:	e0bffc17 	ldw	r2,-16(fp)
    ea3c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    ea40:	e0bffc17 	ldw	r2,-16(fp)
    ea44:	10800017 	ldw	r2,0(r2)
    ea48:	10800104 	addi	r2,r2,4
    ea4c:	1007883a 	mov	r3,r2
    ea50:	e0bffc17 	ldw	r2,-16(fp)
    ea54:	10800817 	ldw	r2,32(r2)
    ea58:	18800035 	stwio	r2,0(r3)
    ea5c:	e0bffa17 	ldw	r2,-24(fp)
    ea60:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ea64:	e0bff917 	ldw	r2,-28(fp)
    ea68:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    ea6c:	e0fff517 	ldw	r3,-44(fp)
    ea70:	e0bffd17 	ldw	r2,-12(fp)
    ea74:	18800426 	beq	r3,r2,ea88 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    ea78:	e0fff517 	ldw	r3,-44(fp)
    ea7c:	e0bffd17 	ldw	r2,-12(fp)
    ea80:	1885c83a 	sub	r2,r3,r2
    ea84:	00000606 	br	eaa0 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    ea88:	e0bfff17 	ldw	r2,-4(fp)
    ea8c:	1090000c 	andi	r2,r2,16384
    ea90:	10000226 	beq	r2,zero,ea9c <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    ea94:	00bffd44 	movi	r2,-11
    ea98:	00000106 	br	eaa0 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    ea9c:	00bffec4 	movi	r2,-5
}
    eaa0:	e037883a 	mov	sp,fp
    eaa4:	dfc00117 	ldw	ra,4(sp)
    eaa8:	df000017 	ldw	fp,0(sp)
    eaac:	dec00204 	addi	sp,sp,8
    eab0:	f800283a 	ret

0000eab4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    eab4:	defff304 	addi	sp,sp,-52
    eab8:	dfc00c15 	stw	ra,48(sp)
    eabc:	df000b15 	stw	fp,44(sp)
    eac0:	df000b04 	addi	fp,sp,44
    eac4:	e13ffc15 	stw	r4,-16(fp)
    eac8:	e17ffd15 	stw	r5,-12(fp)
    eacc:	e1bffe15 	stw	r6,-8(fp)
    ead0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    ead4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    ead8:	e0bffd17 	ldw	r2,-12(fp)
    eadc:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    eae0:	00003706 	br	ebc0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    eae4:	e0bffc17 	ldw	r2,-16(fp)
    eae8:	10800c17 	ldw	r2,48(r2)
    eaec:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    eaf0:	e0bffc17 	ldw	r2,-16(fp)
    eaf4:	10800d17 	ldw	r2,52(r2)
    eaf8:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    eafc:	e0fff917 	ldw	r3,-28(fp)
    eb00:	e0bff517 	ldw	r2,-44(fp)
    eb04:	1880062e 	bgeu	r3,r2,eb20 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    eb08:	e0fff517 	ldw	r3,-44(fp)
    eb0c:	e0bff917 	ldw	r2,-28(fp)
    eb10:	1885c83a 	sub	r2,r3,r2
    eb14:	10bfffc4 	addi	r2,r2,-1
    eb18:	e0bff615 	stw	r2,-40(fp)
    eb1c:	00000b06 	br	eb4c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    eb20:	e0bff517 	ldw	r2,-44(fp)
    eb24:	10000526 	beq	r2,zero,eb3c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    eb28:	00c20004 	movi	r3,2048
    eb2c:	e0bff917 	ldw	r2,-28(fp)
    eb30:	1885c83a 	sub	r2,r3,r2
    eb34:	e0bff615 	stw	r2,-40(fp)
    eb38:	00000406 	br	eb4c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    eb3c:	00c1ffc4 	movi	r3,2047
    eb40:	e0bff917 	ldw	r2,-28(fp)
    eb44:	1885c83a 	sub	r2,r3,r2
    eb48:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    eb4c:	e0bff617 	ldw	r2,-40(fp)
    eb50:	10001e26 	beq	r2,zero,ebcc <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    eb54:	e0fffe17 	ldw	r3,-8(fp)
    eb58:	e0bff617 	ldw	r2,-40(fp)
    eb5c:	1880022e 	bgeu	r3,r2,eb68 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    eb60:	e0bffe17 	ldw	r2,-8(fp)
    eb64:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    eb68:	e0bffc17 	ldw	r2,-16(fp)
    eb6c:	10c20e04 	addi	r3,r2,2104
    eb70:	e0bff917 	ldw	r2,-28(fp)
    eb74:	1885883a 	add	r2,r3,r2
    eb78:	e1bff617 	ldw	r6,-40(fp)
    eb7c:	e17ffd17 	ldw	r5,-12(fp)
    eb80:	1009883a 	mov	r4,r2
    eb84:	00061640 	call	6164 <memcpy>
      ptr   += n;
    eb88:	e0fffd17 	ldw	r3,-12(fp)
    eb8c:	e0bff617 	ldw	r2,-40(fp)
    eb90:	1885883a 	add	r2,r3,r2
    eb94:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    eb98:	e0fffe17 	ldw	r3,-8(fp)
    eb9c:	e0bff617 	ldw	r2,-40(fp)
    eba0:	1885c83a 	sub	r2,r3,r2
    eba4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    eba8:	e0fff917 	ldw	r3,-28(fp)
    ebac:	e0bff617 	ldw	r2,-40(fp)
    ebb0:	1885883a 	add	r2,r3,r2
    ebb4:	10c1ffcc 	andi	r3,r2,2047
    ebb8:	e0bffc17 	ldw	r2,-16(fp)
    ebbc:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    ebc0:	e0bffe17 	ldw	r2,-8(fp)
    ebc4:	00bfc716 	blt	zero,r2,eae4 <__ram_exceptions_end+0xfbfee890>
    ebc8:	00000106 	br	ebd0 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    ebcc:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ebd0:	0005303a 	rdctl	r2,status
    ebd4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ebd8:	e0fffb17 	ldw	r3,-20(fp)
    ebdc:	00bfff84 	movi	r2,-2
    ebe0:	1884703a 	and	r2,r3,r2
    ebe4:	1001703a 	wrctl	status,r2
  
  return context;
    ebe8:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    ebec:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    ebf0:	e0bffc17 	ldw	r2,-16(fp)
    ebf4:	10800817 	ldw	r2,32(r2)
    ebf8:	10c00094 	ori	r3,r2,2
    ebfc:	e0bffc17 	ldw	r2,-16(fp)
    ec00:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    ec04:	e0bffc17 	ldw	r2,-16(fp)
    ec08:	10800017 	ldw	r2,0(r2)
    ec0c:	10800104 	addi	r2,r2,4
    ec10:	1007883a 	mov	r3,r2
    ec14:	e0bffc17 	ldw	r2,-16(fp)
    ec18:	10800817 	ldw	r2,32(r2)
    ec1c:	18800035 	stwio	r2,0(r3)
    ec20:	e0bffa17 	ldw	r2,-24(fp)
    ec24:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ec28:	e0bff817 	ldw	r2,-32(fp)
    ec2c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    ec30:	e0bffe17 	ldw	r2,-8(fp)
    ec34:	0080100e 	bge	zero,r2,ec78 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    ec38:	e0bfff17 	ldw	r2,-4(fp)
    ec3c:	1090000c 	andi	r2,r2,16384
    ec40:	1000101e 	bne	r2,zero,ec84 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    ec44:	0001883a 	nop
    ec48:	e0bffc17 	ldw	r2,-16(fp)
    ec4c:	10c00d17 	ldw	r3,52(r2)
    ec50:	e0bff517 	ldw	r2,-44(fp)
    ec54:	1880051e 	bne	r3,r2,ec6c <altera_avalon_jtag_uart_write+0x1b8>
    ec58:	e0bffc17 	ldw	r2,-16(fp)
    ec5c:	10c00917 	ldw	r3,36(r2)
    ec60:	e0bffc17 	ldw	r2,-16(fp)
    ec64:	10800117 	ldw	r2,4(r2)
    ec68:	18bff736 	bltu	r3,r2,ec48 <__ram_exceptions_end+0xfbfee9f4>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    ec6c:	e0bffc17 	ldw	r2,-16(fp)
    ec70:	10800917 	ldw	r2,36(r2)
    ec74:	1000051e 	bne	r2,zero,ec8c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    ec78:	e0bffe17 	ldw	r2,-8(fp)
    ec7c:	00bfd016 	blt	zero,r2,ebc0 <__ram_exceptions_end+0xfbfee96c>
    ec80:	00000306 	br	ec90 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    ec84:	0001883a 	nop
    ec88:	00000106 	br	ec90 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    ec8c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    ec90:	e0fffd17 	ldw	r3,-12(fp)
    ec94:	e0bff717 	ldw	r2,-36(fp)
    ec98:	18800426 	beq	r3,r2,ecac <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    ec9c:	e0fffd17 	ldw	r3,-12(fp)
    eca0:	e0bff717 	ldw	r2,-36(fp)
    eca4:	1885c83a 	sub	r2,r3,r2
    eca8:	00000606 	br	ecc4 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    ecac:	e0bfff17 	ldw	r2,-4(fp)
    ecb0:	1090000c 	andi	r2,r2,16384
    ecb4:	10000226 	beq	r2,zero,ecc0 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    ecb8:	00bffd44 	movi	r2,-11
    ecbc:	00000106 	br	ecc4 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    ecc0:	00bffec4 	movi	r2,-5
}
    ecc4:	e037883a 	mov	sp,fp
    ecc8:	dfc00117 	ldw	ra,4(sp)
    eccc:	df000017 	ldw	fp,0(sp)
    ecd0:	dec00204 	addi	sp,sp,8
    ecd4:	f800283a 	ret

0000ecd8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    ecd8:	defffa04 	addi	sp,sp,-24
    ecdc:	dfc00515 	stw	ra,20(sp)
    ece0:	df000415 	stw	fp,16(sp)
    ece4:	df000404 	addi	fp,sp,16
    ece8:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    ecec:	0007883a 	mov	r3,zero
    ecf0:	e0bfff17 	ldw	r2,-4(fp)
    ecf4:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    ecf8:	e0bfff17 	ldw	r2,-4(fp)
    ecfc:	10800104 	addi	r2,r2,4
    ed00:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ed04:	0005303a 	rdctl	r2,status
    ed08:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ed0c:	e0fffd17 	ldw	r3,-12(fp)
    ed10:	00bfff84 	movi	r2,-2
    ed14:	1884703a 	and	r2,r3,r2
    ed18:	1001703a 	wrctl	status,r2
  
  return context;
    ed1c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    ed20:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    ed24:	000f5b80 	call	f5b8 <alt_tick>
    ed28:	e0bffc17 	ldw	r2,-16(fp)
    ed2c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ed30:	e0bffe17 	ldw	r2,-8(fp)
    ed34:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    ed38:	0001883a 	nop
    ed3c:	e037883a 	mov	sp,fp
    ed40:	dfc00117 	ldw	ra,4(sp)
    ed44:	df000017 	ldw	fp,0(sp)
    ed48:	dec00204 	addi	sp,sp,8
    ed4c:	f800283a 	ret

0000ed50 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    ed50:	defff804 	addi	sp,sp,-32
    ed54:	dfc00715 	stw	ra,28(sp)
    ed58:	df000615 	stw	fp,24(sp)
    ed5c:	df000604 	addi	fp,sp,24
    ed60:	e13ffc15 	stw	r4,-16(fp)
    ed64:	e17ffd15 	stw	r5,-12(fp)
    ed68:	e1bffe15 	stw	r6,-8(fp)
    ed6c:	e1ffff15 	stw	r7,-4(fp)
    ed70:	e0bfff17 	ldw	r2,-4(fp)
    ed74:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    ed78:	d0a6da17 	ldw	r2,-25752(gp)
    ed7c:	1000021e 	bne	r2,zero,ed88 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
    ed80:	e0bffb17 	ldw	r2,-20(fp)
    ed84:	d0a6da15 	stw	r2,-25752(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    ed88:	e0bffc17 	ldw	r2,-16(fp)
    ed8c:	10800104 	addi	r2,r2,4
    ed90:	00c001c4 	movi	r3,7
    ed94:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    ed98:	d8000015 	stw	zero,0(sp)
    ed9c:	e1fffc17 	ldw	r7,-16(fp)
    eda0:	01800074 	movhi	r6,1
    eda4:	31bb3604 	addi	r6,r6,-4904
    eda8:	e17ffe17 	ldw	r5,-8(fp)
    edac:	e13ffd17 	ldw	r4,-12(fp)
    edb0:	000d57c0 	call	d57c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    edb4:	0001883a 	nop
    edb8:	e037883a 	mov	sp,fp
    edbc:	dfc00117 	ldw	ra,4(sp)
    edc0:	df000017 	ldw	fp,0(sp)
    edc4:	dec00204 	addi	sp,sp,8
    edc8:	f800283a 	ret

0000edcc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    edcc:	defff504 	addi	sp,sp,-44
    edd0:	df000a15 	stw	fp,40(sp)
    edd4:	df000a04 	addi	fp,sp,40
    edd8:	e13ffc15 	stw	r4,-16(fp)
    eddc:	e17ffd15 	stw	r5,-12(fp)
    ede0:	e1bffe15 	stw	r6,-8(fp)
    ede4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    ede8:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    edec:	d0a6da17 	ldw	r2,-25752(gp)
  
  if (alt_ticks_per_second ())
    edf0:	10003c26 	beq	r2,zero,eee4 <alt_alarm_start+0x118>
  {
    if (alarm)
    edf4:	e0bffc17 	ldw	r2,-16(fp)
    edf8:	10003826 	beq	r2,zero,eedc <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
    edfc:	e0bffc17 	ldw	r2,-16(fp)
    ee00:	e0fffe17 	ldw	r3,-8(fp)
    ee04:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    ee08:	e0bffc17 	ldw	r2,-16(fp)
    ee0c:	e0ffff17 	ldw	r3,-4(fp)
    ee10:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ee14:	0005303a 	rdctl	r2,status
    ee18:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ee1c:	e0fff917 	ldw	r3,-28(fp)
    ee20:	00bfff84 	movi	r2,-2
    ee24:	1884703a 	and	r2,r3,r2
    ee28:	1001703a 	wrctl	status,r2
  
  return context;
    ee2c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    ee30:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    ee34:	d0a6db17 	ldw	r2,-25748(gp)
      
      current_nticks = alt_nticks();
    ee38:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    ee3c:	e0fffd17 	ldw	r3,-12(fp)
    ee40:	e0bff617 	ldw	r2,-40(fp)
    ee44:	1885883a 	add	r2,r3,r2
    ee48:	10c00044 	addi	r3,r2,1
    ee4c:	e0bffc17 	ldw	r2,-16(fp)
    ee50:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    ee54:	e0bffc17 	ldw	r2,-16(fp)
    ee58:	10c00217 	ldw	r3,8(r2)
    ee5c:	e0bff617 	ldw	r2,-40(fp)
    ee60:	1880042e 	bgeu	r3,r2,ee74 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
    ee64:	e0bffc17 	ldw	r2,-16(fp)
    ee68:	00c00044 	movi	r3,1
    ee6c:	10c00405 	stb	r3,16(r2)
    ee70:	00000206 	br	ee7c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
    ee74:	e0bffc17 	ldw	r2,-16(fp)
    ee78:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    ee7c:	e0bffc17 	ldw	r2,-16(fp)
    ee80:	d0e00e04 	addi	r3,gp,-32712
    ee84:	e0fffa15 	stw	r3,-24(fp)
    ee88:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    ee8c:	e0bffb17 	ldw	r2,-20(fp)
    ee90:	e0fffa17 	ldw	r3,-24(fp)
    ee94:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    ee98:	e0bffa17 	ldw	r2,-24(fp)
    ee9c:	10c00017 	ldw	r3,0(r2)
    eea0:	e0bffb17 	ldw	r2,-20(fp)
    eea4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    eea8:	e0bffa17 	ldw	r2,-24(fp)
    eeac:	10800017 	ldw	r2,0(r2)
    eeb0:	e0fffb17 	ldw	r3,-20(fp)
    eeb4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    eeb8:	e0bffa17 	ldw	r2,-24(fp)
    eebc:	e0fffb17 	ldw	r3,-20(fp)
    eec0:	10c00015 	stw	r3,0(r2)
    eec4:	e0bff817 	ldw	r2,-32(fp)
    eec8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    eecc:	e0bff717 	ldw	r2,-36(fp)
    eed0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    eed4:	0005883a 	mov	r2,zero
    eed8:	00000306 	br	eee8 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
    eedc:	00bffa84 	movi	r2,-22
    eee0:	00000106 	br	eee8 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
    eee4:	00bfde84 	movi	r2,-134
  }
}
    eee8:	e037883a 	mov	sp,fp
    eeec:	df000017 	ldw	fp,0(sp)
    eef0:	dec00104 	addi	sp,sp,4
    eef4:	f800283a 	ret

0000eef8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    eef8:	deffff04 	addi	sp,sp,-4
    eefc:	df000015 	stw	fp,0(sp)
    ef00:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    ef04:	0001883a 	nop
    ef08:	e037883a 	mov	sp,fp
    ef0c:	df000017 	ldw	fp,0(sp)
    ef10:	dec00104 	addi	sp,sp,4
    ef14:	f800283a 	ret

0000ef18 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ef18:	defffe04 	addi	sp,sp,-8
    ef1c:	dfc00115 	stw	ra,4(sp)
    ef20:	df000015 	stw	fp,0(sp)
    ef24:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ef28:	d0a00b17 	ldw	r2,-32724(gp)
    ef2c:	10000326 	beq	r2,zero,ef3c <alt_get_errno+0x24>
    ef30:	d0a00b17 	ldw	r2,-32724(gp)
    ef34:	103ee83a 	callr	r2
    ef38:	00000106 	br	ef40 <alt_get_errno+0x28>
    ef3c:	d0a6d404 	addi	r2,gp,-25776
}
    ef40:	e037883a 	mov	sp,fp
    ef44:	dfc00117 	ldw	ra,4(sp)
    ef48:	df000017 	ldw	fp,0(sp)
    ef4c:	dec00204 	addi	sp,sp,8
    ef50:	f800283a 	ret

0000ef54 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    ef54:	defffa04 	addi	sp,sp,-24
    ef58:	dfc00515 	stw	ra,20(sp)
    ef5c:	df000415 	stw	fp,16(sp)
    ef60:	df000404 	addi	fp,sp,16
    ef64:	e13ffe15 	stw	r4,-8(fp)
    ef68:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    ef6c:	e0bffe17 	ldw	r2,-8(fp)
    ef70:	10000326 	beq	r2,zero,ef80 <alt_dev_llist_insert+0x2c>
    ef74:	e0bffe17 	ldw	r2,-8(fp)
    ef78:	10800217 	ldw	r2,8(r2)
    ef7c:	1000061e 	bne	r2,zero,ef98 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    ef80:	000ef180 	call	ef18 <alt_get_errno>
    ef84:	1007883a 	mov	r3,r2
    ef88:	00800584 	movi	r2,22
    ef8c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    ef90:	00bffa84 	movi	r2,-22
    ef94:	00001306 	br	efe4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    ef98:	e0bffe17 	ldw	r2,-8(fp)
    ef9c:	e0ffff17 	ldw	r3,-4(fp)
    efa0:	e0fffc15 	stw	r3,-16(fp)
    efa4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    efa8:	e0bffd17 	ldw	r2,-12(fp)
    efac:	e0fffc17 	ldw	r3,-16(fp)
    efb0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    efb4:	e0bffc17 	ldw	r2,-16(fp)
    efb8:	10c00017 	ldw	r3,0(r2)
    efbc:	e0bffd17 	ldw	r2,-12(fp)
    efc0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    efc4:	e0bffc17 	ldw	r2,-16(fp)
    efc8:	10800017 	ldw	r2,0(r2)
    efcc:	e0fffd17 	ldw	r3,-12(fp)
    efd0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    efd4:	e0bffc17 	ldw	r2,-16(fp)
    efd8:	e0fffd17 	ldw	r3,-12(fp)
    efdc:	10c00015 	stw	r3,0(r2)

  return 0;  
    efe0:	0005883a 	mov	r2,zero
}
    efe4:	e037883a 	mov	sp,fp
    efe8:	dfc00117 	ldw	ra,4(sp)
    efec:	df000017 	ldw	fp,0(sp)
    eff0:	dec00204 	addi	sp,sp,8
    eff4:	f800283a 	ret

0000eff8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    eff8:	defffd04 	addi	sp,sp,-12
    effc:	dfc00215 	stw	ra,8(sp)
    f000:	df000115 	stw	fp,4(sp)
    f004:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    f008:	00800074 	movhi	r2,1
    f00c:	10bfaa04 	addi	r2,r2,-344
    f010:	e0bfff15 	stw	r2,-4(fp)
    f014:	00000606 	br	f030 <_do_ctors+0x38>
        (*ctor) (); 
    f018:	e0bfff17 	ldw	r2,-4(fp)
    f01c:	10800017 	ldw	r2,0(r2)
    f020:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    f024:	e0bfff17 	ldw	r2,-4(fp)
    f028:	10bfff04 	addi	r2,r2,-4
    f02c:	e0bfff15 	stw	r2,-4(fp)
    f030:	e0ffff17 	ldw	r3,-4(fp)
    f034:	00800074 	movhi	r2,1
    f038:	10bfab04 	addi	r2,r2,-340
    f03c:	18bff62e 	bgeu	r3,r2,f018 <__ram_exceptions_end+0xfbfeedc4>
        (*ctor) (); 
}
    f040:	0001883a 	nop
    f044:	e037883a 	mov	sp,fp
    f048:	dfc00117 	ldw	ra,4(sp)
    f04c:	df000017 	ldw	fp,0(sp)
    f050:	dec00204 	addi	sp,sp,8
    f054:	f800283a 	ret

0000f058 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    f058:	defffd04 	addi	sp,sp,-12
    f05c:	dfc00215 	stw	ra,8(sp)
    f060:	df000115 	stw	fp,4(sp)
    f064:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    f068:	00800074 	movhi	r2,1
    f06c:	10bfaa04 	addi	r2,r2,-344
    f070:	e0bfff15 	stw	r2,-4(fp)
    f074:	00000606 	br	f090 <_do_dtors+0x38>
        (*dtor) (); 
    f078:	e0bfff17 	ldw	r2,-4(fp)
    f07c:	10800017 	ldw	r2,0(r2)
    f080:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    f084:	e0bfff17 	ldw	r2,-4(fp)
    f088:	10bfff04 	addi	r2,r2,-4
    f08c:	e0bfff15 	stw	r2,-4(fp)
    f090:	e0ffff17 	ldw	r3,-4(fp)
    f094:	00800074 	movhi	r2,1
    f098:	10bfab04 	addi	r2,r2,-340
    f09c:	18bff62e 	bgeu	r3,r2,f078 <__ram_exceptions_end+0xfbfeee24>
        (*dtor) (); 
}
    f0a0:	0001883a 	nop
    f0a4:	e037883a 	mov	sp,fp
    f0a8:	dfc00117 	ldw	ra,4(sp)
    f0ac:	df000017 	ldw	fp,0(sp)
    f0b0:	dec00204 	addi	sp,sp,8
    f0b4:	f800283a 	ret

0000f0b8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    f0b8:	defffe04 	addi	sp,sp,-8
    f0bc:	dfc00115 	stw	ra,4(sp)
    f0c0:	df000015 	stw	fp,0(sp)
    f0c4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    f0c8:	01400074 	movhi	r5,1
    f0cc:	0009883a 	mov	r4,zero
    f0d0:	000f9200 	call	f920 <alt_icache_flush>
#endif
}
    f0d4:	0001883a 	nop
    f0d8:	e037883a 	mov	sp,fp
    f0dc:	dfc00117 	ldw	ra,4(sp)
    f0e0:	df000017 	ldw	fp,0(sp)
    f0e4:	dec00204 	addi	sp,sp,8
    f0e8:	f800283a 	ret

0000f0ec <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    f0ec:	defffe04 	addi	sp,sp,-8
    f0f0:	df000115 	stw	fp,4(sp)
    f0f4:	df000104 	addi	fp,sp,4
    f0f8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    f0fc:	e0bfff17 	ldw	r2,-4(fp)
    f100:	10bffe84 	addi	r2,r2,-6
    f104:	10c00428 	cmpgeui	r3,r2,16
    f108:	18001a1e 	bne	r3,zero,f174 <alt_exception_cause_generated_bad_addr+0x88>
    f10c:	100690ba 	slli	r3,r2,2
    f110:	00800074 	movhi	r2,1
    f114:	10bc4904 	addi	r2,r2,-3804
    f118:	1885883a 	add	r2,r3,r2
    f11c:	10800017 	ldw	r2,0(r2)
    f120:	1000683a 	jmp	r2
    f124:	0000f164 	muli	zero,zero,965
    f128:	0000f164 	muli	zero,zero,965
    f12c:	0000f174 	movhi	zero,965
    f130:	0000f174 	movhi	zero,965
    f134:	0000f174 	movhi	zero,965
    f138:	0000f164 	muli	zero,zero,965
    f13c:	0000f16c 	andhi	zero,zero,965
    f140:	0000f174 	movhi	zero,965
    f144:	0000f164 	muli	zero,zero,965
    f148:	0000f164 	muli	zero,zero,965
    f14c:	0000f174 	movhi	zero,965
    f150:	0000f164 	muli	zero,zero,965
    f154:	0000f16c 	andhi	zero,zero,965
    f158:	0000f174 	movhi	zero,965
    f15c:	0000f174 	movhi	zero,965
    f160:	0000f164 	muli	zero,zero,965
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    f164:	00800044 	movi	r2,1
    f168:	00000306 	br	f178 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    f16c:	0005883a 	mov	r2,zero
    f170:	00000106 	br	f178 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    f174:	0005883a 	mov	r2,zero
  }
}
    f178:	e037883a 	mov	sp,fp
    f17c:	df000017 	ldw	fp,0(sp)
    f180:	dec00104 	addi	sp,sp,4
    f184:	f800283a 	ret

0000f188 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    f188:	defff904 	addi	sp,sp,-28
    f18c:	dfc00615 	stw	ra,24(sp)
    f190:	df000515 	stw	fp,20(sp)
    f194:	df000504 	addi	fp,sp,20
    f198:	e13ffc15 	stw	r4,-16(fp)
    f19c:	e17ffd15 	stw	r5,-12(fp)
    f1a0:	e1bffe15 	stw	r6,-8(fp)
    f1a4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    f1a8:	e1bfff17 	ldw	r6,-4(fp)
    f1ac:	e17ffe17 	ldw	r5,-8(fp)
    f1b0:	e13ffd17 	ldw	r4,-12(fp)
    f1b4:	000f3c80 	call	f3c8 <open>
    f1b8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    f1bc:	e0bffb17 	ldw	r2,-20(fp)
    f1c0:	10001c16 	blt	r2,zero,f234 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
    f1c4:	00800074 	movhi	r2,1
    f1c8:	10833204 	addi	r2,r2,3272
    f1cc:	e0fffb17 	ldw	r3,-20(fp)
    f1d0:	18c00324 	muli	r3,r3,12
    f1d4:	10c5883a 	add	r2,r2,r3
    f1d8:	10c00017 	ldw	r3,0(r2)
    f1dc:	e0bffc17 	ldw	r2,-16(fp)
    f1e0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    f1e4:	00800074 	movhi	r2,1
    f1e8:	10833204 	addi	r2,r2,3272
    f1ec:	e0fffb17 	ldw	r3,-20(fp)
    f1f0:	18c00324 	muli	r3,r3,12
    f1f4:	10c5883a 	add	r2,r2,r3
    f1f8:	10800104 	addi	r2,r2,4
    f1fc:	10c00017 	ldw	r3,0(r2)
    f200:	e0bffc17 	ldw	r2,-16(fp)
    f204:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    f208:	00800074 	movhi	r2,1
    f20c:	10833204 	addi	r2,r2,3272
    f210:	e0fffb17 	ldw	r3,-20(fp)
    f214:	18c00324 	muli	r3,r3,12
    f218:	10c5883a 	add	r2,r2,r3
    f21c:	10800204 	addi	r2,r2,8
    f220:	10c00017 	ldw	r3,0(r2)
    f224:	e0bffc17 	ldw	r2,-16(fp)
    f228:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    f22c:	e13ffb17 	ldw	r4,-20(fp)
    f230:	000df5c0 	call	df5c <alt_release_fd>
  }
} 
    f234:	0001883a 	nop
    f238:	e037883a 	mov	sp,fp
    f23c:	dfc00117 	ldw	ra,4(sp)
    f240:	df000017 	ldw	fp,0(sp)
    f244:	dec00204 	addi	sp,sp,8
    f248:	f800283a 	ret

0000f24c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    f24c:	defffb04 	addi	sp,sp,-20
    f250:	dfc00415 	stw	ra,16(sp)
    f254:	df000315 	stw	fp,12(sp)
    f258:	df000304 	addi	fp,sp,12
    f25c:	e13ffd15 	stw	r4,-12(fp)
    f260:	e17ffe15 	stw	r5,-8(fp)
    f264:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    f268:	01c07fc4 	movi	r7,511
    f26c:	01800044 	movi	r6,1
    f270:	e17ffd17 	ldw	r5,-12(fp)
    f274:	01000074 	movhi	r4,1
    f278:	21033504 	addi	r4,r4,3284
    f27c:	000f1880 	call	f188 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    f280:	01c07fc4 	movi	r7,511
    f284:	000d883a 	mov	r6,zero
    f288:	e17ffe17 	ldw	r5,-8(fp)
    f28c:	01000074 	movhi	r4,1
    f290:	21033204 	addi	r4,r4,3272
    f294:	000f1880 	call	f188 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    f298:	01c07fc4 	movi	r7,511
    f29c:	01800044 	movi	r6,1
    f2a0:	e17fff17 	ldw	r5,-4(fp)
    f2a4:	01000074 	movhi	r4,1
    f2a8:	21033804 	addi	r4,r4,3296
    f2ac:	000f1880 	call	f188 <alt_open_fd>
}  
    f2b0:	0001883a 	nop
    f2b4:	e037883a 	mov	sp,fp
    f2b8:	dfc00117 	ldw	ra,4(sp)
    f2bc:	df000017 	ldw	fp,0(sp)
    f2c0:	dec00204 	addi	sp,sp,8
    f2c4:	f800283a 	ret

0000f2c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f2c8:	defffe04 	addi	sp,sp,-8
    f2cc:	dfc00115 	stw	ra,4(sp)
    f2d0:	df000015 	stw	fp,0(sp)
    f2d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f2d8:	d0a00b17 	ldw	r2,-32724(gp)
    f2dc:	10000326 	beq	r2,zero,f2ec <alt_get_errno+0x24>
    f2e0:	d0a00b17 	ldw	r2,-32724(gp)
    f2e4:	103ee83a 	callr	r2
    f2e8:	00000106 	br	f2f0 <alt_get_errno+0x28>
    f2ec:	d0a6d404 	addi	r2,gp,-25776
}
    f2f0:	e037883a 	mov	sp,fp
    f2f4:	dfc00117 	ldw	ra,4(sp)
    f2f8:	df000017 	ldw	fp,0(sp)
    f2fc:	dec00204 	addi	sp,sp,8
    f300:	f800283a 	ret

0000f304 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    f304:	defffd04 	addi	sp,sp,-12
    f308:	df000215 	stw	fp,8(sp)
    f30c:	df000204 	addi	fp,sp,8
    f310:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    f314:	e0bfff17 	ldw	r2,-4(fp)
    f318:	10800217 	ldw	r2,8(r2)
    f31c:	10d00034 	orhi	r3,r2,16384
    f320:	e0bfff17 	ldw	r2,-4(fp)
    f324:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    f328:	e03ffe15 	stw	zero,-8(fp)
    f32c:	00001d06 	br	f3a4 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    f330:	00800074 	movhi	r2,1
    f334:	10833204 	addi	r2,r2,3272
    f338:	e0fffe17 	ldw	r3,-8(fp)
    f33c:	18c00324 	muli	r3,r3,12
    f340:	10c5883a 	add	r2,r2,r3
    f344:	10c00017 	ldw	r3,0(r2)
    f348:	e0bfff17 	ldw	r2,-4(fp)
    f34c:	10800017 	ldw	r2,0(r2)
    f350:	1880111e 	bne	r3,r2,f398 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    f354:	00800074 	movhi	r2,1
    f358:	10833204 	addi	r2,r2,3272
    f35c:	e0fffe17 	ldw	r3,-8(fp)
    f360:	18c00324 	muli	r3,r3,12
    f364:	10c5883a 	add	r2,r2,r3
    f368:	10800204 	addi	r2,r2,8
    f36c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    f370:	1000090e 	bge	r2,zero,f398 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    f374:	e0bffe17 	ldw	r2,-8(fp)
    f378:	10c00324 	muli	r3,r2,12
    f37c:	00800074 	movhi	r2,1
    f380:	10833204 	addi	r2,r2,3272
    f384:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    f388:	e0bfff17 	ldw	r2,-4(fp)
    f38c:	18800226 	beq	r3,r2,f398 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    f390:	00bffcc4 	movi	r2,-13
    f394:	00000806 	br	f3b8 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    f398:	e0bffe17 	ldw	r2,-8(fp)
    f39c:	10800044 	addi	r2,r2,1
    f3a0:	e0bffe15 	stw	r2,-8(fp)
    f3a4:	d0a00a17 	ldw	r2,-32728(gp)
    f3a8:	1007883a 	mov	r3,r2
    f3ac:	e0bffe17 	ldw	r2,-8(fp)
    f3b0:	18bfdf2e 	bgeu	r3,r2,f330 <__ram_exceptions_end+0xfbfef0dc>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    f3b4:	0005883a 	mov	r2,zero
}
    f3b8:	e037883a 	mov	sp,fp
    f3bc:	df000017 	ldw	fp,0(sp)
    f3c0:	dec00104 	addi	sp,sp,4
    f3c4:	f800283a 	ret

0000f3c8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    f3c8:	defff604 	addi	sp,sp,-40
    f3cc:	dfc00915 	stw	ra,36(sp)
    f3d0:	df000815 	stw	fp,32(sp)
    f3d4:	df000804 	addi	fp,sp,32
    f3d8:	e13ffd15 	stw	r4,-12(fp)
    f3dc:	e17ffe15 	stw	r5,-8(fp)
    f3e0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    f3e4:	00bfffc4 	movi	r2,-1
    f3e8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    f3ec:	00bffb44 	movi	r2,-19
    f3f0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    f3f4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    f3f8:	d1600804 	addi	r5,gp,-32736
    f3fc:	e13ffd17 	ldw	r4,-12(fp)
    f400:	000f6e40 	call	f6e4 <alt_find_dev>
    f404:	e0bff815 	stw	r2,-32(fp)
    f408:	e0bff817 	ldw	r2,-32(fp)
    f40c:	1000051e 	bne	r2,zero,f424 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    f410:	e13ffd17 	ldw	r4,-12(fp)
    f414:	000f7740 	call	f774 <alt_find_file>
    f418:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    f41c:	00800044 	movi	r2,1
    f420:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    f424:	e0bff817 	ldw	r2,-32(fp)
    f428:	10002926 	beq	r2,zero,f4d0 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
    f42c:	e13ff817 	ldw	r4,-32(fp)
    f430:	000f87c0 	call	f87c <alt_get_fd>
    f434:	e0bff915 	stw	r2,-28(fp)
    f438:	e0bff917 	ldw	r2,-28(fp)
    f43c:	1000030e 	bge	r2,zero,f44c <open+0x84>
    {
      status = index;
    f440:	e0bff917 	ldw	r2,-28(fp)
    f444:	e0bffa15 	stw	r2,-24(fp)
    f448:	00002306 	br	f4d8 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
    f44c:	e0bff917 	ldw	r2,-28(fp)
    f450:	10c00324 	muli	r3,r2,12
    f454:	00800074 	movhi	r2,1
    f458:	10833204 	addi	r2,r2,3272
    f45c:	1885883a 	add	r2,r3,r2
    f460:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    f464:	e0fffe17 	ldw	r3,-8(fp)
    f468:	00900034 	movhi	r2,16384
    f46c:	10bfffc4 	addi	r2,r2,-1
    f470:	1886703a 	and	r3,r3,r2
    f474:	e0bffc17 	ldw	r2,-16(fp)
    f478:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    f47c:	e0bffb17 	ldw	r2,-20(fp)
    f480:	1000051e 	bne	r2,zero,f498 <open+0xd0>
    f484:	e13ffc17 	ldw	r4,-16(fp)
    f488:	000f3040 	call	f304 <alt_file_locked>
    f48c:	e0bffa15 	stw	r2,-24(fp)
    f490:	e0bffa17 	ldw	r2,-24(fp)
    f494:	10001016 	blt	r2,zero,f4d8 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    f498:	e0bff817 	ldw	r2,-32(fp)
    f49c:	10800317 	ldw	r2,12(r2)
    f4a0:	10000826 	beq	r2,zero,f4c4 <open+0xfc>
    f4a4:	e0bff817 	ldw	r2,-32(fp)
    f4a8:	10800317 	ldw	r2,12(r2)
    f4ac:	e1ffff17 	ldw	r7,-4(fp)
    f4b0:	e1bffe17 	ldw	r6,-8(fp)
    f4b4:	e17ffd17 	ldw	r5,-12(fp)
    f4b8:	e13ffc17 	ldw	r4,-16(fp)
    f4bc:	103ee83a 	callr	r2
    f4c0:	00000106 	br	f4c8 <open+0x100>
    f4c4:	0005883a 	mov	r2,zero
    f4c8:	e0bffa15 	stw	r2,-24(fp)
    f4cc:	00000206 	br	f4d8 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
    f4d0:	00bffb44 	movi	r2,-19
    f4d4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    f4d8:	e0bffa17 	ldw	r2,-24(fp)
    f4dc:	1000090e 	bge	r2,zero,f504 <open+0x13c>
  {
    alt_release_fd (index);  
    f4e0:	e13ff917 	ldw	r4,-28(fp)
    f4e4:	000df5c0 	call	df5c <alt_release_fd>
    ALT_ERRNO = -status;
    f4e8:	000f2c80 	call	f2c8 <alt_get_errno>
    f4ec:	1007883a 	mov	r3,r2
    f4f0:	e0bffa17 	ldw	r2,-24(fp)
    f4f4:	0085c83a 	sub	r2,zero,r2
    f4f8:	18800015 	stw	r2,0(r3)
    return -1;
    f4fc:	00bfffc4 	movi	r2,-1
    f500:	00000106 	br	f508 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
    f504:	e0bff917 	ldw	r2,-28(fp)
}
    f508:	e037883a 	mov	sp,fp
    f50c:	dfc00117 	ldw	ra,4(sp)
    f510:	df000017 	ldw	fp,0(sp)
    f514:	dec00204 	addi	sp,sp,8
    f518:	f800283a 	ret

0000f51c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    f51c:	defffa04 	addi	sp,sp,-24
    f520:	df000515 	stw	fp,20(sp)
    f524:	df000504 	addi	fp,sp,20
    f528:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f52c:	0005303a 	rdctl	r2,status
    f530:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f534:	e0fffc17 	ldw	r3,-16(fp)
    f538:	00bfff84 	movi	r2,-2
    f53c:	1884703a 	and	r2,r3,r2
    f540:	1001703a 	wrctl	status,r2
  
  return context;
    f544:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    f548:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    f54c:	e0bfff17 	ldw	r2,-4(fp)
    f550:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    f554:	e0bffd17 	ldw	r2,-12(fp)
    f558:	10800017 	ldw	r2,0(r2)
    f55c:	e0fffd17 	ldw	r3,-12(fp)
    f560:	18c00117 	ldw	r3,4(r3)
    f564:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    f568:	e0bffd17 	ldw	r2,-12(fp)
    f56c:	10800117 	ldw	r2,4(r2)
    f570:	e0fffd17 	ldw	r3,-12(fp)
    f574:	18c00017 	ldw	r3,0(r3)
    f578:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    f57c:	e0bffd17 	ldw	r2,-12(fp)
    f580:	e0fffd17 	ldw	r3,-12(fp)
    f584:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    f588:	e0bffd17 	ldw	r2,-12(fp)
    f58c:	e0fffd17 	ldw	r3,-12(fp)
    f590:	10c00015 	stw	r3,0(r2)
    f594:	e0bffb17 	ldw	r2,-20(fp)
    f598:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f59c:	e0bffe17 	ldw	r2,-8(fp)
    f5a0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    f5a4:	0001883a 	nop
    f5a8:	e037883a 	mov	sp,fp
    f5ac:	df000017 	ldw	fp,0(sp)
    f5b0:	dec00104 	addi	sp,sp,4
    f5b4:	f800283a 	ret

0000f5b8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    f5b8:	defffb04 	addi	sp,sp,-20
    f5bc:	dfc00415 	stw	ra,16(sp)
    f5c0:	df000315 	stw	fp,12(sp)
    f5c4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    f5c8:	d0a00e17 	ldw	r2,-32712(gp)
    f5cc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    f5d0:	d0a6db17 	ldw	r2,-25748(gp)
    f5d4:	10800044 	addi	r2,r2,1
    f5d8:	d0a6db15 	stw	r2,-25748(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    f5dc:	00002e06 	br	f698 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    f5e0:	e0bffd17 	ldw	r2,-12(fp)
    f5e4:	10800017 	ldw	r2,0(r2)
    f5e8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    f5ec:	e0bffd17 	ldw	r2,-12(fp)
    f5f0:	10800403 	ldbu	r2,16(r2)
    f5f4:	10803fcc 	andi	r2,r2,255
    f5f8:	10000426 	beq	r2,zero,f60c <alt_tick+0x54>
    f5fc:	d0a6db17 	ldw	r2,-25748(gp)
    f600:	1000021e 	bne	r2,zero,f60c <alt_tick+0x54>
    {
      alarm->rollover = 0;
    f604:	e0bffd17 	ldw	r2,-12(fp)
    f608:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    f60c:	e0bffd17 	ldw	r2,-12(fp)
    f610:	10800217 	ldw	r2,8(r2)
    f614:	d0e6db17 	ldw	r3,-25748(gp)
    f618:	18801d36 	bltu	r3,r2,f690 <alt_tick+0xd8>
    f61c:	e0bffd17 	ldw	r2,-12(fp)
    f620:	10800403 	ldbu	r2,16(r2)
    f624:	10803fcc 	andi	r2,r2,255
    f628:	1000191e 	bne	r2,zero,f690 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    f62c:	e0bffd17 	ldw	r2,-12(fp)
    f630:	10800317 	ldw	r2,12(r2)
    f634:	e0fffd17 	ldw	r3,-12(fp)
    f638:	18c00517 	ldw	r3,20(r3)
    f63c:	1809883a 	mov	r4,r3
    f640:	103ee83a 	callr	r2
    f644:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    f648:	e0bfff17 	ldw	r2,-4(fp)
    f64c:	1000031e 	bne	r2,zero,f65c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    f650:	e13ffd17 	ldw	r4,-12(fp)
    f654:	000f51c0 	call	f51c <alt_alarm_stop>
    f658:	00000d06 	br	f690 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    f65c:	e0bffd17 	ldw	r2,-12(fp)
    f660:	10c00217 	ldw	r3,8(r2)
    f664:	e0bfff17 	ldw	r2,-4(fp)
    f668:	1887883a 	add	r3,r3,r2
    f66c:	e0bffd17 	ldw	r2,-12(fp)
    f670:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    f674:	e0bffd17 	ldw	r2,-12(fp)
    f678:	10c00217 	ldw	r3,8(r2)
    f67c:	d0a6db17 	ldw	r2,-25748(gp)
    f680:	1880032e 	bgeu	r3,r2,f690 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    f684:	e0bffd17 	ldw	r2,-12(fp)
    f688:	00c00044 	movi	r3,1
    f68c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    f690:	e0bffe17 	ldw	r2,-8(fp)
    f694:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    f698:	e0fffd17 	ldw	r3,-12(fp)
    f69c:	d0a00e04 	addi	r2,gp,-32712
    f6a0:	18bfcf1e 	bne	r3,r2,f5e0 <__ram_exceptions_end+0xfbfef38c>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    f6a4:	0001883a 	nop
}
    f6a8:	0001883a 	nop
    f6ac:	e037883a 	mov	sp,fp
    f6b0:	dfc00117 	ldw	ra,4(sp)
    f6b4:	df000017 	ldw	fp,0(sp)
    f6b8:	dec00204 	addi	sp,sp,8
    f6bc:	f800283a 	ret

0000f6c0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    f6c0:	deffff04 	addi	sp,sp,-4
    f6c4:	df000015 	stw	fp,0(sp)
    f6c8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    f6cc:	000170fa 	wrctl	ienable,zero
}
    f6d0:	0001883a 	nop
    f6d4:	e037883a 	mov	sp,fp
    f6d8:	df000017 	ldw	fp,0(sp)
    f6dc:	dec00104 	addi	sp,sp,4
    f6e0:	f800283a 	ret

0000f6e4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    f6e4:	defffa04 	addi	sp,sp,-24
    f6e8:	dfc00515 	stw	ra,20(sp)
    f6ec:	df000415 	stw	fp,16(sp)
    f6f0:	df000404 	addi	fp,sp,16
    f6f4:	e13ffe15 	stw	r4,-8(fp)
    f6f8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    f6fc:	e0bfff17 	ldw	r2,-4(fp)
    f700:	10800017 	ldw	r2,0(r2)
    f704:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    f708:	e13ffe17 	ldw	r4,-8(fp)
    f70c:	00076b00 	call	76b0 <strlen>
    f710:	10800044 	addi	r2,r2,1
    f714:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    f718:	00000d06 	br	f750 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    f71c:	e0bffc17 	ldw	r2,-16(fp)
    f720:	10800217 	ldw	r2,8(r2)
    f724:	e0fffd17 	ldw	r3,-12(fp)
    f728:	180d883a 	mov	r6,r3
    f72c:	e17ffe17 	ldw	r5,-8(fp)
    f730:	1009883a 	mov	r4,r2
    f734:	000f9fc0 	call	f9fc <memcmp>
    f738:	1000021e 	bne	r2,zero,f744 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    f73c:	e0bffc17 	ldw	r2,-16(fp)
    f740:	00000706 	br	f760 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    f744:	e0bffc17 	ldw	r2,-16(fp)
    f748:	10800017 	ldw	r2,0(r2)
    f74c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    f750:	e0fffc17 	ldw	r3,-16(fp)
    f754:	e0bfff17 	ldw	r2,-4(fp)
    f758:	18bff01e 	bne	r3,r2,f71c <__ram_exceptions_end+0xfbfef4c8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    f75c:	0005883a 	mov	r2,zero
}
    f760:	e037883a 	mov	sp,fp
    f764:	dfc00117 	ldw	ra,4(sp)
    f768:	df000017 	ldw	fp,0(sp)
    f76c:	dec00204 	addi	sp,sp,8
    f770:	f800283a 	ret

0000f774 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    f774:	defffb04 	addi	sp,sp,-20
    f778:	dfc00415 	stw	ra,16(sp)
    f77c:	df000315 	stw	fp,12(sp)
    f780:	df000304 	addi	fp,sp,12
    f784:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    f788:	d0a00617 	ldw	r2,-32744(gp)
    f78c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    f790:	00003106 	br	f858 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    f794:	e0bffd17 	ldw	r2,-12(fp)
    f798:	10800217 	ldw	r2,8(r2)
    f79c:	1009883a 	mov	r4,r2
    f7a0:	00076b00 	call	76b0 <strlen>
    f7a4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    f7a8:	e0bffd17 	ldw	r2,-12(fp)
    f7ac:	10c00217 	ldw	r3,8(r2)
    f7b0:	e0bffe17 	ldw	r2,-8(fp)
    f7b4:	10bfffc4 	addi	r2,r2,-1
    f7b8:	1885883a 	add	r2,r3,r2
    f7bc:	10800003 	ldbu	r2,0(r2)
    f7c0:	10803fcc 	andi	r2,r2,255
    f7c4:	1080201c 	xori	r2,r2,128
    f7c8:	10bfe004 	addi	r2,r2,-128
    f7cc:	10800bd8 	cmpnei	r2,r2,47
    f7d0:	1000031e 	bne	r2,zero,f7e0 <alt_find_file+0x6c>
    {
      len -= 1;
    f7d4:	e0bffe17 	ldw	r2,-8(fp)
    f7d8:	10bfffc4 	addi	r2,r2,-1
    f7dc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    f7e0:	e0bffe17 	ldw	r2,-8(fp)
    f7e4:	e0ffff17 	ldw	r3,-4(fp)
    f7e8:	1885883a 	add	r2,r3,r2
    f7ec:	10800003 	ldbu	r2,0(r2)
    f7f0:	10803fcc 	andi	r2,r2,255
    f7f4:	1080201c 	xori	r2,r2,128
    f7f8:	10bfe004 	addi	r2,r2,-128
    f7fc:	10800be0 	cmpeqi	r2,r2,47
    f800:	1000081e 	bne	r2,zero,f824 <alt_find_file+0xb0>
    f804:	e0bffe17 	ldw	r2,-8(fp)
    f808:	e0ffff17 	ldw	r3,-4(fp)
    f80c:	1885883a 	add	r2,r3,r2
    f810:	10800003 	ldbu	r2,0(r2)
    f814:	10803fcc 	andi	r2,r2,255
    f818:	1080201c 	xori	r2,r2,128
    f81c:	10bfe004 	addi	r2,r2,-128
    f820:	10000a1e 	bne	r2,zero,f84c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    f824:	e0bffd17 	ldw	r2,-12(fp)
    f828:	10800217 	ldw	r2,8(r2)
    f82c:	e0fffe17 	ldw	r3,-8(fp)
    f830:	180d883a 	mov	r6,r3
    f834:	e17fff17 	ldw	r5,-4(fp)
    f838:	1009883a 	mov	r4,r2
    f83c:	000f9fc0 	call	f9fc <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    f840:	1000021e 	bne	r2,zero,f84c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    f844:	e0bffd17 	ldw	r2,-12(fp)
    f848:	00000706 	br	f868 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    f84c:	e0bffd17 	ldw	r2,-12(fp)
    f850:	10800017 	ldw	r2,0(r2)
    f854:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    f858:	e0fffd17 	ldw	r3,-12(fp)
    f85c:	d0a00604 	addi	r2,gp,-32744
    f860:	18bfcc1e 	bne	r3,r2,f794 <__ram_exceptions_end+0xfbfef540>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    f864:	0005883a 	mov	r2,zero
}
    f868:	e037883a 	mov	sp,fp
    f86c:	dfc00117 	ldw	ra,4(sp)
    f870:	df000017 	ldw	fp,0(sp)
    f874:	dec00204 	addi	sp,sp,8
    f878:	f800283a 	ret

0000f87c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    f87c:	defffc04 	addi	sp,sp,-16
    f880:	df000315 	stw	fp,12(sp)
    f884:	df000304 	addi	fp,sp,12
    f888:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    f88c:	00bffa04 	movi	r2,-24
    f890:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    f894:	e03ffd15 	stw	zero,-12(fp)
    f898:	00001906 	br	f900 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
    f89c:	00800074 	movhi	r2,1
    f8a0:	10833204 	addi	r2,r2,3272
    f8a4:	e0fffd17 	ldw	r3,-12(fp)
    f8a8:	18c00324 	muli	r3,r3,12
    f8ac:	10c5883a 	add	r2,r2,r3
    f8b0:	10800017 	ldw	r2,0(r2)
    f8b4:	10000f1e 	bne	r2,zero,f8f4 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
    f8b8:	00800074 	movhi	r2,1
    f8bc:	10833204 	addi	r2,r2,3272
    f8c0:	e0fffd17 	ldw	r3,-12(fp)
    f8c4:	18c00324 	muli	r3,r3,12
    f8c8:	10c5883a 	add	r2,r2,r3
    f8cc:	e0ffff17 	ldw	r3,-4(fp)
    f8d0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    f8d4:	d0e00a17 	ldw	r3,-32728(gp)
    f8d8:	e0bffd17 	ldw	r2,-12(fp)
    f8dc:	1880020e 	bge	r3,r2,f8e8 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
    f8e0:	e0bffd17 	ldw	r2,-12(fp)
    f8e4:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
    f8e8:	e0bffd17 	ldw	r2,-12(fp)
    f8ec:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    f8f0:	00000606 	br	f90c <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    f8f4:	e0bffd17 	ldw	r2,-12(fp)
    f8f8:	10800044 	addi	r2,r2,1
    f8fc:	e0bffd15 	stw	r2,-12(fp)
    f900:	e0bffd17 	ldw	r2,-12(fp)
    f904:	10800810 	cmplti	r2,r2,32
    f908:	103fe41e 	bne	r2,zero,f89c <__ram_exceptions_end+0xfbfef648>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    f90c:	e0bffe17 	ldw	r2,-8(fp)
}
    f910:	e037883a 	mov	sp,fp
    f914:	df000017 	ldw	fp,0(sp)
    f918:	dec00104 	addi	sp,sp,4
    f91c:	f800283a 	ret

0000f920 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    f920:	defffb04 	addi	sp,sp,-20
    f924:	df000415 	stw	fp,16(sp)
    f928:	df000404 	addi	fp,sp,16
    f92c:	e13ffe15 	stw	r4,-8(fp)
    f930:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    f934:	e0bfff17 	ldw	r2,-4(fp)
    f938:	00c00074 	movhi	r3,1
    f93c:	1880022e 	bgeu	r3,r2,f948 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    f940:	00800074 	movhi	r2,1
    f944:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    f948:	e0fffe17 	ldw	r3,-8(fp)
    f94c:	e0bfff17 	ldw	r2,-4(fp)
    f950:	1885883a 	add	r2,r3,r2
    f954:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    f958:	e0bffe17 	ldw	r2,-8(fp)
    f95c:	e0bffc15 	stw	r2,-16(fp)
    f960:	00000506 	br	f978 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    f964:	e0bffc17 	ldw	r2,-16(fp)
    f968:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    f96c:	e0bffc17 	ldw	r2,-16(fp)
    f970:	10800804 	addi	r2,r2,32
    f974:	e0bffc15 	stw	r2,-16(fp)
    f978:	e0fffc17 	ldw	r3,-16(fp)
    f97c:	e0bffd17 	ldw	r2,-12(fp)
    f980:	18bff836 	bltu	r3,r2,f964 <__ram_exceptions_end+0xfbfef710>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    f984:	e0bffe17 	ldw	r2,-8(fp)
    f988:	108007cc 	andi	r2,r2,31
    f98c:	10000226 	beq	r2,zero,f998 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    f990:	e0bffc17 	ldw	r2,-16(fp)
    f994:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    f998:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    f99c:	0001883a 	nop
    f9a0:	e037883a 	mov	sp,fp
    f9a4:	df000017 	ldw	fp,0(sp)
    f9a8:	dec00104 	addi	sp,sp,4
    f9ac:	f800283a 	ret

0000f9b0 <atexit>:
    f9b0:	200b883a 	mov	r5,r4
    f9b4:	000f883a 	mov	r7,zero
    f9b8:	000d883a 	mov	r6,zero
    f9bc:	0009883a 	mov	r4,zero
    f9c0:	000fbe01 	jmpi	fbe0 <__register_exitproc>

0000f9c4 <exit>:
    f9c4:	defffe04 	addi	sp,sp,-8
    f9c8:	000b883a 	mov	r5,zero
    f9cc:	dc000015 	stw	r16,0(sp)
    f9d0:	dfc00115 	stw	ra,4(sp)
    f9d4:	2021883a 	mov	r16,r4
    f9d8:	000fcf80 	call	fcf8 <__call_exitprocs>
    f9dc:	00800074 	movhi	r2,1
    f9e0:	1087aa04 	addi	r2,r2,7848
    f9e4:	11000017 	ldw	r4,0(r2)
    f9e8:	20800f17 	ldw	r2,60(r4)
    f9ec:	10000126 	beq	r2,zero,f9f4 <exit+0x30>
    f9f0:	103ee83a 	callr	r2
    f9f4:	8009883a 	mov	r4,r16
    f9f8:	000fe780 	call	fe78 <_exit>

0000f9fc <memcmp>:
    f9fc:	01c000c4 	movi	r7,3
    fa00:	3980192e 	bgeu	r7,r6,fa68 <memcmp+0x6c>
    fa04:	2144b03a 	or	r2,r4,r5
    fa08:	11c4703a 	and	r2,r2,r7
    fa0c:	10000f26 	beq	r2,zero,fa4c <memcmp+0x50>
    fa10:	20800003 	ldbu	r2,0(r4)
    fa14:	28c00003 	ldbu	r3,0(r5)
    fa18:	10c0151e 	bne	r2,r3,fa70 <memcmp+0x74>
    fa1c:	31bfff84 	addi	r6,r6,-2
    fa20:	01ffffc4 	movi	r7,-1
    fa24:	00000406 	br	fa38 <memcmp+0x3c>
    fa28:	20800003 	ldbu	r2,0(r4)
    fa2c:	28c00003 	ldbu	r3,0(r5)
    fa30:	31bfffc4 	addi	r6,r6,-1
    fa34:	10c00e1e 	bne	r2,r3,fa70 <memcmp+0x74>
    fa38:	21000044 	addi	r4,r4,1
    fa3c:	29400044 	addi	r5,r5,1
    fa40:	31fff91e 	bne	r6,r7,fa28 <__ram_exceptions_end+0xfbfef7d4>
    fa44:	0005883a 	mov	r2,zero
    fa48:	f800283a 	ret
    fa4c:	20c00017 	ldw	r3,0(r4)
    fa50:	28800017 	ldw	r2,0(r5)
    fa54:	18bfee1e 	bne	r3,r2,fa10 <__ram_exceptions_end+0xfbfef7bc>
    fa58:	31bfff04 	addi	r6,r6,-4
    fa5c:	21000104 	addi	r4,r4,4
    fa60:	29400104 	addi	r5,r5,4
    fa64:	39bff936 	bltu	r7,r6,fa4c <__ram_exceptions_end+0xfbfef7f8>
    fa68:	303fe91e 	bne	r6,zero,fa10 <__ram_exceptions_end+0xfbfef7bc>
    fa6c:	003ff506 	br	fa44 <__ram_exceptions_end+0xfbfef7f0>
    fa70:	10c5c83a 	sub	r2,r2,r3
    fa74:	f800283a 	ret

0000fa78 <_putc_r>:
    fa78:	defffc04 	addi	sp,sp,-16
    fa7c:	dc000215 	stw	r16,8(sp)
    fa80:	dfc00315 	stw	ra,12(sp)
    fa84:	2021883a 	mov	r16,r4
    fa88:	20000226 	beq	r4,zero,fa94 <_putc_r+0x1c>
    fa8c:	20800e17 	ldw	r2,56(r4)
    fa90:	10001b26 	beq	r2,zero,fb00 <_putc_r+0x88>
    fa94:	30800217 	ldw	r2,8(r6)
    fa98:	10bfffc4 	addi	r2,r2,-1
    fa9c:	30800215 	stw	r2,8(r6)
    faa0:	10000a16 	blt	r2,zero,facc <_putc_r+0x54>
    faa4:	30800017 	ldw	r2,0(r6)
    faa8:	11400005 	stb	r5,0(r2)
    faac:	30800017 	ldw	r2,0(r6)
    fab0:	10c00044 	addi	r3,r2,1
    fab4:	30c00015 	stw	r3,0(r6)
    fab8:	10800003 	ldbu	r2,0(r2)
    fabc:	dfc00317 	ldw	ra,12(sp)
    fac0:	dc000217 	ldw	r16,8(sp)
    fac4:	dec00404 	addi	sp,sp,16
    fac8:	f800283a 	ret
    facc:	30c00617 	ldw	r3,24(r6)
    fad0:	10c00616 	blt	r2,r3,faec <_putc_r+0x74>
    fad4:	30800017 	ldw	r2,0(r6)
    fad8:	00c00284 	movi	r3,10
    fadc:	11400005 	stb	r5,0(r2)
    fae0:	30800017 	ldw	r2,0(r6)
    fae4:	11400003 	ldbu	r5,0(r2)
    fae8:	28fff11e 	bne	r5,r3,fab0 <__ram_exceptions_end+0xfbfef85c>
    faec:	8009883a 	mov	r4,r16
    faf0:	dfc00317 	ldw	ra,12(sp)
    faf4:	dc000217 	ldw	r16,8(sp)
    faf8:	dec00404 	addi	sp,sp,16
    fafc:	0009f001 	jmpi	9f00 <__swbuf_r>
    fb00:	d9400015 	stw	r5,0(sp)
    fb04:	d9800115 	stw	r6,4(sp)
    fb08:	0004fd00 	call	4fd0 <__sinit>
    fb0c:	d9800117 	ldw	r6,4(sp)
    fb10:	d9400017 	ldw	r5,0(sp)
    fb14:	003fdf06 	br	fa94 <__ram_exceptions_end+0xfbfef840>

0000fb18 <putc>:
    fb18:	00800074 	movhi	r2,1
    fb1c:	defffc04 	addi	sp,sp,-16
    fb20:	1087ab04 	addi	r2,r2,7852
    fb24:	dc000115 	stw	r16,4(sp)
    fb28:	14000017 	ldw	r16,0(r2)
    fb2c:	dc400215 	stw	r17,8(sp)
    fb30:	dfc00315 	stw	ra,12(sp)
    fb34:	2023883a 	mov	r17,r4
    fb38:	80000226 	beq	r16,zero,fb44 <putc+0x2c>
    fb3c:	80800e17 	ldw	r2,56(r16)
    fb40:	10001a26 	beq	r2,zero,fbac <putc+0x94>
    fb44:	28800217 	ldw	r2,8(r5)
    fb48:	10bfffc4 	addi	r2,r2,-1
    fb4c:	28800215 	stw	r2,8(r5)
    fb50:	10000b16 	blt	r2,zero,fb80 <putc+0x68>
    fb54:	28800017 	ldw	r2,0(r5)
    fb58:	14400005 	stb	r17,0(r2)
    fb5c:	28800017 	ldw	r2,0(r5)
    fb60:	10c00044 	addi	r3,r2,1
    fb64:	28c00015 	stw	r3,0(r5)
    fb68:	10800003 	ldbu	r2,0(r2)
    fb6c:	dfc00317 	ldw	ra,12(sp)
    fb70:	dc400217 	ldw	r17,8(sp)
    fb74:	dc000117 	ldw	r16,4(sp)
    fb78:	dec00404 	addi	sp,sp,16
    fb7c:	f800283a 	ret
    fb80:	28c00617 	ldw	r3,24(r5)
    fb84:	10c00e16 	blt	r2,r3,fbc0 <putc+0xa8>
    fb88:	28800017 	ldw	r2,0(r5)
    fb8c:	01000284 	movi	r4,10
    fb90:	14400005 	stb	r17,0(r2)
    fb94:	28800017 	ldw	r2,0(r5)
    fb98:	10c00003 	ldbu	r3,0(r2)
    fb9c:	193ff01e 	bne	r3,r4,fb60 <__ram_exceptions_end+0xfbfef90c>
    fba0:	280d883a 	mov	r6,r5
    fba4:	180b883a 	mov	r5,r3
    fba8:	00000706 	br	fbc8 <putc+0xb0>
    fbac:	8009883a 	mov	r4,r16
    fbb0:	d9400015 	stw	r5,0(sp)
    fbb4:	0004fd00 	call	4fd0 <__sinit>
    fbb8:	d9400017 	ldw	r5,0(sp)
    fbbc:	003fe106 	br	fb44 <__ram_exceptions_end+0xfbfef8f0>
    fbc0:	280d883a 	mov	r6,r5
    fbc4:	880b883a 	mov	r5,r17
    fbc8:	8009883a 	mov	r4,r16
    fbcc:	dfc00317 	ldw	ra,12(sp)
    fbd0:	dc400217 	ldw	r17,8(sp)
    fbd4:	dc000117 	ldw	r16,4(sp)
    fbd8:	dec00404 	addi	sp,sp,16
    fbdc:	0009f001 	jmpi	9f00 <__swbuf_r>

0000fbe0 <__register_exitproc>:
    fbe0:	defffa04 	addi	sp,sp,-24
    fbe4:	dc000315 	stw	r16,12(sp)
    fbe8:	04000074 	movhi	r16,1
    fbec:	8407aa04 	addi	r16,r16,7848
    fbf0:	80c00017 	ldw	r3,0(r16)
    fbf4:	dc400415 	stw	r17,16(sp)
    fbf8:	dfc00515 	stw	ra,20(sp)
    fbfc:	18805217 	ldw	r2,328(r3)
    fc00:	2023883a 	mov	r17,r4
    fc04:	10003726 	beq	r2,zero,fce4 <__register_exitproc+0x104>
    fc08:	10c00117 	ldw	r3,4(r2)
    fc0c:	010007c4 	movi	r4,31
    fc10:	20c00e16 	blt	r4,r3,fc4c <__register_exitproc+0x6c>
    fc14:	1a000044 	addi	r8,r3,1
    fc18:	8800221e 	bne	r17,zero,fca4 <__register_exitproc+0xc4>
    fc1c:	18c00084 	addi	r3,r3,2
    fc20:	18c7883a 	add	r3,r3,r3
    fc24:	18c7883a 	add	r3,r3,r3
    fc28:	12000115 	stw	r8,4(r2)
    fc2c:	10c7883a 	add	r3,r2,r3
    fc30:	19400015 	stw	r5,0(r3)
    fc34:	0005883a 	mov	r2,zero
    fc38:	dfc00517 	ldw	ra,20(sp)
    fc3c:	dc400417 	ldw	r17,16(sp)
    fc40:	dc000317 	ldw	r16,12(sp)
    fc44:	dec00604 	addi	sp,sp,24
    fc48:	f800283a 	ret
    fc4c:	00800034 	movhi	r2,0
    fc50:	10800004 	addi	r2,r2,0
    fc54:	10002626 	beq	r2,zero,fcf0 <__register_exitproc+0x110>
    fc58:	01006404 	movi	r4,400
    fc5c:	d9400015 	stw	r5,0(sp)
    fc60:	d9800115 	stw	r6,4(sp)
    fc64:	d9c00215 	stw	r7,8(sp)
    fc68:	00000000 	call	0 <__alt_mem_new_sdram_controller_0>
    fc6c:	d9400017 	ldw	r5,0(sp)
    fc70:	d9800117 	ldw	r6,4(sp)
    fc74:	d9c00217 	ldw	r7,8(sp)
    fc78:	10001d26 	beq	r2,zero,fcf0 <__register_exitproc+0x110>
    fc7c:	81000017 	ldw	r4,0(r16)
    fc80:	10000115 	stw	zero,4(r2)
    fc84:	02000044 	movi	r8,1
    fc88:	22405217 	ldw	r9,328(r4)
    fc8c:	0007883a 	mov	r3,zero
    fc90:	12400015 	stw	r9,0(r2)
    fc94:	20805215 	stw	r2,328(r4)
    fc98:	10006215 	stw	zero,392(r2)
    fc9c:	10006315 	stw	zero,396(r2)
    fca0:	883fde26 	beq	r17,zero,fc1c <__ram_exceptions_end+0xfbfef9c8>
    fca4:	18c9883a 	add	r4,r3,r3
    fca8:	2109883a 	add	r4,r4,r4
    fcac:	1109883a 	add	r4,r2,r4
    fcb0:	21802215 	stw	r6,136(r4)
    fcb4:	01800044 	movi	r6,1
    fcb8:	12406217 	ldw	r9,392(r2)
    fcbc:	30cc983a 	sll	r6,r6,r3
    fcc0:	4992b03a 	or	r9,r9,r6
    fcc4:	12406215 	stw	r9,392(r2)
    fcc8:	21c04215 	stw	r7,264(r4)
    fccc:	01000084 	movi	r4,2
    fcd0:	893fd21e 	bne	r17,r4,fc1c <__ram_exceptions_end+0xfbfef9c8>
    fcd4:	11006317 	ldw	r4,396(r2)
    fcd8:	218cb03a 	or	r6,r4,r6
    fcdc:	11806315 	stw	r6,396(r2)
    fce0:	003fce06 	br	fc1c <__ram_exceptions_end+0xfbfef9c8>
    fce4:	18805304 	addi	r2,r3,332
    fce8:	18805215 	stw	r2,328(r3)
    fcec:	003fc606 	br	fc08 <__ram_exceptions_end+0xfbfef9b4>
    fcf0:	00bfffc4 	movi	r2,-1
    fcf4:	003fd006 	br	fc38 <__ram_exceptions_end+0xfbfef9e4>

0000fcf8 <__call_exitprocs>:
    fcf8:	defff504 	addi	sp,sp,-44
    fcfc:	df000915 	stw	fp,36(sp)
    fd00:	dd400615 	stw	r21,24(sp)
    fd04:	dc800315 	stw	r18,12(sp)
    fd08:	dfc00a15 	stw	ra,40(sp)
    fd0c:	ddc00815 	stw	r23,32(sp)
    fd10:	dd800715 	stw	r22,28(sp)
    fd14:	dd000515 	stw	r20,20(sp)
    fd18:	dcc00415 	stw	r19,16(sp)
    fd1c:	dc400215 	stw	r17,8(sp)
    fd20:	dc000115 	stw	r16,4(sp)
    fd24:	d9000015 	stw	r4,0(sp)
    fd28:	2839883a 	mov	fp,r5
    fd2c:	04800044 	movi	r18,1
    fd30:	057fffc4 	movi	r21,-1
    fd34:	00800074 	movhi	r2,1
    fd38:	1087aa04 	addi	r2,r2,7848
    fd3c:	12000017 	ldw	r8,0(r2)
    fd40:	45005217 	ldw	r20,328(r8)
    fd44:	44c05204 	addi	r19,r8,328
    fd48:	a0001c26 	beq	r20,zero,fdbc <__call_exitprocs+0xc4>
    fd4c:	a0800117 	ldw	r2,4(r20)
    fd50:	15ffffc4 	addi	r23,r2,-1
    fd54:	b8000d16 	blt	r23,zero,fd8c <__call_exitprocs+0x94>
    fd58:	14000044 	addi	r16,r2,1
    fd5c:	8421883a 	add	r16,r16,r16
    fd60:	8421883a 	add	r16,r16,r16
    fd64:	84402004 	addi	r17,r16,128
    fd68:	a463883a 	add	r17,r20,r17
    fd6c:	a421883a 	add	r16,r20,r16
    fd70:	e0001e26 	beq	fp,zero,fdec <__call_exitprocs+0xf4>
    fd74:	80804017 	ldw	r2,256(r16)
    fd78:	e0801c26 	beq	fp,r2,fdec <__call_exitprocs+0xf4>
    fd7c:	bdffffc4 	addi	r23,r23,-1
    fd80:	843fff04 	addi	r16,r16,-4
    fd84:	8c7fff04 	addi	r17,r17,-4
    fd88:	bd7ff91e 	bne	r23,r21,fd70 <__ram_exceptions_end+0xfbfefb1c>
    fd8c:	00800034 	movhi	r2,0
    fd90:	10800004 	addi	r2,r2,0
    fd94:	10000926 	beq	r2,zero,fdbc <__call_exitprocs+0xc4>
    fd98:	a0800117 	ldw	r2,4(r20)
    fd9c:	1000301e 	bne	r2,zero,fe60 <__call_exitprocs+0x168>
    fda0:	a0800017 	ldw	r2,0(r20)
    fda4:	10003226 	beq	r2,zero,fe70 <__call_exitprocs+0x178>
    fda8:	a009883a 	mov	r4,r20
    fdac:	98800015 	stw	r2,0(r19)
    fdb0:	00000000 	call	0 <__alt_mem_new_sdram_controller_0>
    fdb4:	9d000017 	ldw	r20,0(r19)
    fdb8:	a03fe41e 	bne	r20,zero,fd4c <__ram_exceptions_end+0xfbfefaf8>
    fdbc:	dfc00a17 	ldw	ra,40(sp)
    fdc0:	df000917 	ldw	fp,36(sp)
    fdc4:	ddc00817 	ldw	r23,32(sp)
    fdc8:	dd800717 	ldw	r22,28(sp)
    fdcc:	dd400617 	ldw	r21,24(sp)
    fdd0:	dd000517 	ldw	r20,20(sp)
    fdd4:	dcc00417 	ldw	r19,16(sp)
    fdd8:	dc800317 	ldw	r18,12(sp)
    fddc:	dc400217 	ldw	r17,8(sp)
    fde0:	dc000117 	ldw	r16,4(sp)
    fde4:	dec00b04 	addi	sp,sp,44
    fde8:	f800283a 	ret
    fdec:	a0800117 	ldw	r2,4(r20)
    fdf0:	80c00017 	ldw	r3,0(r16)
    fdf4:	10bfffc4 	addi	r2,r2,-1
    fdf8:	15c01426 	beq	r2,r23,fe4c <__call_exitprocs+0x154>
    fdfc:	80000015 	stw	zero,0(r16)
    fe00:	183fde26 	beq	r3,zero,fd7c <__ram_exceptions_end+0xfbfefb28>
    fe04:	95c8983a 	sll	r4,r18,r23
    fe08:	a0806217 	ldw	r2,392(r20)
    fe0c:	a5800117 	ldw	r22,4(r20)
    fe10:	2084703a 	and	r2,r4,r2
    fe14:	10000b26 	beq	r2,zero,fe44 <__call_exitprocs+0x14c>
    fe18:	a0806317 	ldw	r2,396(r20)
    fe1c:	2088703a 	and	r4,r4,r2
    fe20:	20000c1e 	bne	r4,zero,fe54 <__call_exitprocs+0x15c>
    fe24:	89400017 	ldw	r5,0(r17)
    fe28:	d9000017 	ldw	r4,0(sp)
    fe2c:	183ee83a 	callr	r3
    fe30:	a0800117 	ldw	r2,4(r20)
    fe34:	15bfbf1e 	bne	r2,r22,fd34 <__ram_exceptions_end+0xfbfefae0>
    fe38:	98800017 	ldw	r2,0(r19)
    fe3c:	153fcf26 	beq	r2,r20,fd7c <__ram_exceptions_end+0xfbfefb28>
    fe40:	003fbc06 	br	fd34 <__ram_exceptions_end+0xfbfefae0>
    fe44:	183ee83a 	callr	r3
    fe48:	003ff906 	br	fe30 <__ram_exceptions_end+0xfbfefbdc>
    fe4c:	a5c00115 	stw	r23,4(r20)
    fe50:	003feb06 	br	fe00 <__ram_exceptions_end+0xfbfefbac>
    fe54:	89000017 	ldw	r4,0(r17)
    fe58:	183ee83a 	callr	r3
    fe5c:	003ff406 	br	fe30 <__ram_exceptions_end+0xfbfefbdc>
    fe60:	a0800017 	ldw	r2,0(r20)
    fe64:	a027883a 	mov	r19,r20
    fe68:	1029883a 	mov	r20,r2
    fe6c:	003fb606 	br	fd48 <__ram_exceptions_end+0xfbfefaf4>
    fe70:	0005883a 	mov	r2,zero
    fe74:	003ffb06 	br	fe64 <__ram_exceptions_end+0xfbfefc10>

0000fe78 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    fe78:	defffd04 	addi	sp,sp,-12
    fe7c:	df000215 	stw	fp,8(sp)
    fe80:	df000204 	addi	fp,sp,8
    fe84:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    fe88:	0001883a 	nop
    fe8c:	e0bfff17 	ldw	r2,-4(fp)
    fe90:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    fe94:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    fe98:	10000226 	beq	r2,zero,fea4 <_exit+0x2c>
    ALT_SIM_FAIL();
    fe9c:	002af070 	cmpltui	zero,zero,43969
    fea0:	00000106 	br	fea8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    fea4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    fea8:	003fff06 	br	fea8 <__ram_exceptions_end+0xfbfefc54>

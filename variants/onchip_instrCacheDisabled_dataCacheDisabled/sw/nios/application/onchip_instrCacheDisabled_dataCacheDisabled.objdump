
onchip_instrCacheDisabled_dataCacheDisabled.elf:     file format elf32-littlenios2
onchip_instrCacheDisabled_dataCacheDisabled.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020244

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00005108 memsz 0x00005108 flags r-x
    LOAD off    0x00006128 vaddr 0x00025128 paddr 0x00026b94 align 2**12
         filesz 0x00001a6c memsz 0x00001a6c flags rw-
    LOAD off    0x00008600 vaddr 0x00028600 paddr 0x00028600 align 2**12
         filesz 0x00000000 memsz 0x00000154 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00004dbc  00020244  00020244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000128  00025000  00025000  00006000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001a6c  00025128  00026b94  00006128  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000154  00028600  00028600  00008600  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00028754  00028754  00007b94  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00007b94  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000009f8  00000000  00000000  00007bb8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00015b6e  00000000  00000000  000085b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00005e76  00000000  00000000  0001e11e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00006405  00000000  00000000  00023f94  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000155c  00000000  00000000  0002a39c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002529  00000000  00000000  0002b8f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00002fd9  00000000  00000000  0002de21  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00030dfc  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000004d0  00000000  00000000  00030e30  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00033806  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00033809  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00033815  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00033816  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  00033817  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00033822  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0003382d  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000a  00000000  00000000  00033838  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000047  00000000  00000000  00033842  2**0
                  CONTENTS, READONLY
 26 .jdi          0000597d  00000000  00000000  00033889  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00043039  00000000  00000000  00039206  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020244 l    d  .text	00000000 .text
00025000 l    d  .rodata	00000000 .rodata
00025128 l    d  .rwdata	00000000 .rwdata
00028600 l    d  .bss	00000000 .bss
00028754 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/RTES/variants/onchip_instrCacheDisabled_dataCacheDisabled/sw/nios/onchip_instrCacheDisabled_dataCacheDisabled_bsp//obj/HAL/src/crt0.o
0002028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 alt_load.c
0002044c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0002081c l     F .text	00000034 alt_dev_reg
00025128 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
00020b0c l     F .text	0000020c altera_avalon_jtag_uart_irq
00020d18 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00021350 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_close.c
00021570 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000216c4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000216f0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00021b64 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00021ca4 l     F .text	0000003c alt_get_errno
00021ce0 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
00026330 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00023088 l     F .text	00000008 __fp_unlock
0002309c l     F .text	0000019c __sinit.part.1
00023238 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
000249c0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
00024aac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
00024b8c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
00024ce4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sbrk.c
00026b90 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
00024ecc l     F .text	0000003c alt_get_errno
00028618 g     O .bss	00000004 alt_instruction_exception_handler
00024878 g     F .text	00000054 _isatty_r
00020538 g     F .text	0000007c alt_main
00028654 g     O .bss	00000100 alt_irq
000248cc g     F .text	00000060 _lseek_r
00026b94 g       *ABS*	00000000 __flash_rwdata_start
00028754 g       *ABS*	00000000 __alt_heap_start
00024600 g     F .text	0000005c __sseek
000233d8 g     F .text	00000010 __sinit
0002289c g     F .text	00000140 __swbuf_r
00023240 g     F .text	00000068 __sfmoreglue
00024cc0 g     F .text	00000024 __malloc_unlock
00020290 g     F .text	00000058 test_parallel_port
000233c0 g     F .text	00000018 _cleanup
00022100 g     F .text	00000024 altera_nios2_gen2_irq_init
00020000 g     F .entry	0000001c __reset
00020020 g       *ABS*	00000000 __flash_exceptions_start
0002481c g     F .text	0000005c _fstat_r
0002861c g     O .bss	00000004 errno
0002457c g     F .text	00000008 __seofread
00028604 g     O .bss	00000004 alt_argv
0002eb5c g       *ABS*	00000000 _gp
000261b0 g     O .rwdata	00000180 alt_fd_list
00022124 g     F .text	00000090 alt_find_dev
00022554 g     F .text	00000148 memcpy
00023090 g     F .text	0000000c _cleanup_r
00021c28 g     F .text	0000007c alt_io_redirect
00025000 g       *ABS*	00000000 __DTOR_END__
000223f0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00020f10 g     F .text	0000021c altera_avalon_jtag_uart_read
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00024ae8 g     F .text	000000a4 isatty
00022360 g     F .text	00000090 alt_icache_flush
00028628 g     O .bss	00000004 __malloc_top_pad
000244d4 g     F .text	00000054 _sbrk_r
0002492c g     F .text	00000060 _read_r
00026b6c g     O .rwdata	00000004 alt_max_fd
00024718 g     F .text	000000f0 _fclose_r
00023058 g     F .text	00000030 fflush
00028624 g     O .bss	00000004 __malloc_max_sbrked_mem
00024bc8 g     F .text	000000d4 lseek
00026b80 g     O .rwdata	00000004 _global_impure_ptr
00028754 g       *ABS*	00000000 __bss_end
00021a74 g     F .text	000000f0 alt_iic_isr_register
00021ff8 g     F .text	00000108 alt_tick
000233f8 g     F .text	00000018 __fp_lock_all
00021a28 g     F .text	0000004c alt_ic_irq_enabled
00021f5c g     F .text	0000009c alt_alarm_stop
0002860c g     O .bss	00000004 alt_irq_active
000200fc g     F .exceptions	000000d4 alt_irq_handler
00026188 g     O .rwdata	00000028 alt_dev_null
0002167c g     F .text	00000048 alt_dcache_flush_all
00026b94 g       *ABS*	00000000 __ram_rwdata_end
00026b64 g     O .rwdata	00000008 alt_dev_list
00024f08 g     F .text	000000f8 write
0002269c g     F .text	000000a0 _putc_r
00025128 g       *ABS*	00000000 __ram_rodata_end
000249fc g     F .text	000000b0 fstat
00028754 g       *ABS*	00000000 end
00020a4c g     F .text	000000c0 altera_avalon_jtag_uart_init
000201d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00025000 g       *ABS*	00000000 __CTOR_LIST__
00040000 g       *ABS*	00000000 __alt_stack_pointer
000213c8 g     F .text	0000007c alt_avalon_timer_sc_init
0002112c g     F .text	00000224 altera_avalon_jtag_uart_write
000233e8 g     F .text	00000004 __sfp_lock_acquire
0002354c g     F .text	00000310 _free_r
000205b4 g     F .text	0000022c alt_printf
00022c60 g     F .text	00000180 __call_exitprocs
00026b88 g     O .rwdata	00000004 __malloc_sbrk_base
00020244 g     F .text	0000004c _start
00028610 g     O .bss	00000004 _alt_tick_rate
00028614 g     O .bss	00000004 _alt_nticks
00024d20 g     F .text	000000fc read
00020888 g     F .text	00000060 alt_sys_init
00022b48 g     F .text	00000118 __register_exitproc
00020db8 g     F .text	00000068 altera_avalon_jtag_uart_close
00025128 g       *ABS*	00000000 __ram_rwdata_start
00025000 g       *ABS*	00000000 __ram_rodata_start
0002862c g     O .bss	00000028 __malloc_current_mallinfo
000208e8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
000222bc g     F .text	000000a4 alt_get_fd
000246c4 g     F .text	00000054 _close_r
000224d8 g     F .text	0000007c memcmp
000209a8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00028754 g       *ABS*	00000000 __alt_stack_base
000209f8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
000229f4 g     F .text	00000154 __swsetup_r
000232a8 g     F .text	00000118 __sfp
00026754 g     O .rwdata	00000408 __malloc_av_
000233f4 g     F .text	00000004 __sinit_lock_release
00024528 g     F .text	00000054 __sread
000221b4 g     F .text	00000108 alt_find_file
0002172c g     F .text	000000a4 alt_dev_llist_insert
00024c9c g     F .text	00000024 __malloc_lock
00024e1c g     F .text	000000b0 sbrk
00022ffc g     F .text	0000005c _fflush_r
00028600 g       *ABS*	00000000 __bss_start
000243ac g     F .text	00000128 memset
0002041c g     F .text	00000030 main
00028608 g     O .bss	00000004 alt_envp
000202e8 g     F .text	00000134 test_counter
00028620 g     O .bss	00000004 __malloc_max_total_mem
00020948 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
000229dc g     F .text	00000018 __swbuf
0002465c g     F .text	00000008 __sclose
00040000 g       *ABS*	00000000 __alt_heap_limit
00024808 g     F .text	00000014 fclose
00023ba0 g     F .text	0000080c _malloc_r
00026b70 g     O .rwdata	00000004 alt_errno
0002385c g     F .text	000000c4 _fwalk
0002273c g     F .text	000000c8 putc
00023428 g     F .text	00000124 _malloc_trim_r
00025000 g       *ABS*	00000000 __CTOR_END__
00025000 g       *ABS*	00000000 __flash_rodata_start
00025000 g       *ABS*	00000000 __DTOR_LIST__
00020850 g     F .text	00000038 alt_irq_init
00021ef8 g     F .text	00000064 alt_release_fd
0002248c g     F .text	00000014 atexit
00024664 g     F .text	00000060 _write_r
00026b84 g     O .rwdata	00000004 _impure_ptr
00028600 g     O .bss	00000004 alt_argc
00022de0 g     F .text	0000021c __sflush_r
00021830 g     F .text	00000060 _do_dtors
00020020 g       .exceptions	00000000 alt_irq_entry
00023410 g     F .text	00000018 __fp_unlock_all
00026b5c g     O .rwdata	00000008 alt_fs_list
00020020 g       *ABS*	00000000 __ram_exceptions_start
000218c4 g     F .text	00000050 alt_ic_isr_register
00026b94 g       *ABS*	00000000 _edata
00028754 g       *ABS*	00000000 _end
00020244 g       *ABS*	00000000 __ram_exceptions_end
00020e20 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0002199c g     F .text	0000008c alt_ic_irq_disable
00024584 g     F .text	0000007c __swrite
00026b8c g     O .rwdata	00000004 __malloc_trim_threshold
000224a0 g     F .text	00000038 exit
00023920 g     F .text	000000c4 _fwalk_reent
00040000 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
000233ec g     F .text	00000004 __sfp_lock_release
0002498c g     F .text	00000034 _exit
00021444 g     F .text	0000012c alt_alarm_start
000239e4 g     F .text	000001bc __smakebuf_r
00022804 g     F .text	00000098 strlen
00021da4 g     F .text	00000154 open
000207e0 g     F .text	0000003c alt_putchar
00021890 g     F .text	00000034 alt_icache_flush_all
00026b74 g     O .rwdata	00000004 alt_priority_mask
00021914 g     F .text	00000088 alt_ic_irq_enable
00026b78 g     O .rwdata	00000008 alt_alarm_list
000217d0 g     F .text	00000060 _do_ctors
000215ac g     F .text	000000d0 close
000204b4 g     F .text	00000084 alt_load
000233f0 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

00020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   20000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   20004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   20008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   2000c:	00bffd16 	blt	zero,r2,20004 <__alt_data_end+0xfffe0004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20010:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20014:	08409114 	ori	at,at,580
    jmp r1
   20018:	0800683a 	jmp	at
   2001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201d00 	call	201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0fffb17 	ldw	r3,-20(fp)
   20130:	e0bffc17 	ldw	r2,-16(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001426 	beq	r2,zero,2018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2013c:	008000f4 	movhi	r2,3
   20140:	10a19504 	addi	r2,r2,-31148
   20144:	e0fffd17 	ldw	r3,-12(fp)
   20148:	180690fa 	slli	r3,r3,3
   2014c:	10c5883a 	add	r2,r2,r3
   20150:	10c00017 	ldw	r3,0(r2)
   20154:	008000f4 	movhi	r2,3
   20158:	10a19504 	addi	r2,r2,-31148
   2015c:	e13ffd17 	ldw	r4,-12(fp)
   20160:	200890fa 	slli	r4,r4,3
   20164:	1105883a 	add	r2,r2,r4
   20168:	10800104 	addi	r2,r2,4
   2016c:	10800017 	ldw	r2,0(r2)
   20170:	1009883a 	mov	r4,r2
   20174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   20178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   2017c:	0005313a 	rdctl	r2,ipending
   20180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20184:	e0bfff17 	ldw	r2,-4(fp)
   20188:	00000706 	br	201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   2018c:	e0bffc17 	ldw	r2,-16(fp)
   20190:	1085883a 	add	r2,r2,r2
   20194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   20198:	e0bffd17 	ldw	r2,-12(fp)
   2019c:	10800044 	addi	r2,r2,1
   201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a4:	003fe106 	br	2012c <__alt_data_end+0xfffe012c>

    active = alt_irq_pending ();
   201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   201ac:	e0bffb17 	ldw	r2,-20(fp)
   201b0:	103fdb1e 	bne	r2,zero,20120 <__alt_data_end+0xfffe0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201b4:	0001883a 	nop
}
   201b8:	0001883a 	nop
   201bc:	e037883a 	mov	sp,fp
   201c0:	dfc00117 	ldw	ra,4(sp)
   201c4:	df000017 	ldw	fp,0(sp)
   201c8:	dec00204 	addi	sp,sp,8
   201cc:	f800283a 	ret

000201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201d0:	defffb04 	addi	sp,sp,-20
   201d4:	dfc00415 	stw	ra,16(sp)
   201d8:	df000315 	stw	fp,12(sp)
   201dc:	df000304 	addi	fp,sp,12
   201e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   201e4:	000531fa 	rdctl	r2,exception
   201e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   201ec:	e0bffd17 	ldw	r2,-12(fp)
   201f0:	10801f0c 	andi	r2,r2,124
   201f4:	1004d0ba 	srli	r2,r2,2
   201f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   201fc:	0005333a 	rdctl	r2,badaddr
   20200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   20204:	d0a6af17 	ldw	r2,-25924(gp)
   20208:	10000726 	beq	r2,zero,20228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   2020c:	d0a6af17 	ldw	r2,-25924(gp)
   20210:	e0fffd17 	ldw	r3,-12(fp)
   20214:	e1bffe17 	ldw	r6,-8(fp)
   20218:	e17fff17 	ldw	r5,-4(fp)
   2021c:	1809883a 	mov	r4,r3
   20220:	103ee83a 	callr	r2
   20224:	00000206 	br	20230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   2022c:	0005883a 	mov	r2,zero
}
   20230:	e037883a 	mov	sp,fp
   20234:	dfc00117 	ldw	ra,4(sp)
   20238:	df000017 	ldw	fp,0(sp)
   2023c:	dec00204 	addi	sp,sp,8
   20240:	f800283a 	ret

Disassembly of section .text:

00020244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   20244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   20248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   2024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   20250:	00bffd16 	blt	zero,r2,20248 <__alt_data_end+0xfffe0248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20254:	06c00134 	movhi	sp,4
    ori sp, sp, %lo(__alt_stack_pointer)
   20258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   2025c:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   20260:	d6bad714 	ori	gp,gp,60252
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20264:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   20268:	10a18014 	ori	r2,r2,34304

    movhi r3, %hi(__bss_end)
   2026c:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   20270:	18e1d514 	ori	r3,r3,34644

    beq r2, r3, 1f
   20274:	10c00326 	beq	r2,r3,20284 <_start+0x40>

0:
    stw zero, (r2)
   20278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   2027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   20280:	10fffd36 	bltu	r2,r3,20278 <__alt_data_end+0xfffe0278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20284:	00204b40 	call	204b4 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20288:	00205380 	call	20538 <alt_main>

0002028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   2028c:	003fff06 	br	2028c <__alt_data_end+0xfffe028c>

00020290 <test_parallel_port>:
#define arbval			0x0000ffff



void test_parallel_port()
{
   20290:	defffe04 	addi	sp,sp,-8
   20294:	dfc00115 	stw	ra,4(sp)
   20298:	df000015 	stw	fp,0(sp)
   2029c:	d839883a 	mov	fp,sp
	IOWR_32DIRECT(PARALLELPORT_0_BASE, 0, 0x1234abcd);
   202a0:	00c48d74 	movhi	r3,4661
   202a4:	18eaf344 	addi	r3,r3,-21555
   202a8:	00800134 	movhi	r2,4
   202ac:	10842404 	addi	r2,r2,4240
   202b0:	10c00035 	stwio	r3,0(r2)
	alt_printf("ParallelPort0=%x\n", IORD_32DIRECT(PARALLELPORT_0_BASE, 0));
   202b4:	00800134 	movhi	r2,4
   202b8:	10842404 	addi	r2,r2,4240
   202bc:	10800037 	ldwio	r2,0(r2)
   202c0:	100b883a 	mov	r5,r2
   202c4:	010000b4 	movhi	r4,2
   202c8:	21140004 	addi	r4,r4,20480
   202cc:	00205b40 	call	205b4 <alt_printf>
}
   202d0:	0001883a 	nop
   202d4:	e037883a 	mov	sp,fp
   202d8:	dfc00117 	ldw	ra,4(sp)
   202dc:	df000017 	ldw	fp,0(sp)
   202e0:	dec00204 	addi	sp,sp,8
   202e4:	f800283a 	ret

000202e8 <test_counter>:

void test_counter()
{
   202e8:	defffe04 	addi	sp,sp,-8
   202ec:	dfc00115 	stw	ra,4(sp)
   202f0:	df000015 	stw	fp,0(sp)
   202f4:	d839883a 	mov	fp,sp
	IOWR_32DIRECT(COUNTER_0_BASE, COUNT_Target, Count_1sec);
   202f8:	00c0bef4 	movhi	r3,763
   202fc:	18fc2004 	addi	r3,r3,-3968
   20300:	00800134 	movhi	r2,4
   20304:	10841984 	addi	r2,r2,4198
   20308:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(COUNTER_0_BASE, COUNT_RZ, arbval);
   2030c:	00ffffd4 	movui	r3,65535
   20310:	00800134 	movhi	r2,4
   20314:	10841844 	addi	r2,r2,4193
   20318:	10c00035 	stwio	r3,0(r2)
	alt_printf("iCounter after reset=%x\n", IORD_32DIRECT(COUNTER_0_BASE,0));
   2031c:	00800134 	movhi	r2,4
   20320:	10841804 	addi	r2,r2,4192
   20324:	10800037 	ldwio	r2,0(r2)
   20328:	100b883a 	mov	r5,r2
   2032c:	010000b4 	movhi	r4,2
   20330:	21140504 	addi	r4,r4,20500
   20334:	00205b40 	call	205b4 <alt_printf>
	IOWR_32DIRECT(COUNTER_0_BASE, COUNT_Start, arbval);
   20338:	00ffffd4 	movui	r3,65535
   2033c:	00800134 	movhi	r2,4
   20340:	10841884 	addi	r2,r2,4194
   20344:	10c00035 	stwio	r3,0(r2)
	alt_printf("iCounter while running=%x\n", IORD_32DIRECT(COUNTER_0_BASE,0));
   20348:	00800134 	movhi	r2,4
   2034c:	10841804 	addi	r2,r2,4192
   20350:	10800037 	ldwio	r2,0(r2)
   20354:	100b883a 	mov	r5,r2
   20358:	010000b4 	movhi	r4,2
   2035c:	21140c04 	addi	r4,r4,20528
   20360:	00205b40 	call	205b4 <alt_printf>
	IOWR_32DIRECT(COUNTER_0_BASE, COUNT_Stop, arbval);
   20364:	00ffffd4 	movui	r3,65535
   20368:	00800134 	movhi	r2,4
   2036c:	108418c4 	addi	r2,r2,4195
   20370:	10c00035 	stwio	r3,0(r2)
	alt_printf("iCounter, first read after stop=%x\n", IORD_32DIRECT(COUNTER_0_BASE,0));
   20374:	00800134 	movhi	r2,4
   20378:	10841804 	addi	r2,r2,4192
   2037c:	10800037 	ldwio	r2,0(r2)
   20380:	100b883a 	mov	r5,r2
   20384:	010000b4 	movhi	r4,2
   20388:	21141304 	addi	r4,r4,20556
   2038c:	00205b40 	call	205b4 <alt_printf>
	alt_printf("iCounter, second read after stop=%x\n", IORD_32DIRECT(COUNTER_0_BASE,0));
   20390:	00800134 	movhi	r2,4
   20394:	10841804 	addi	r2,r2,4192
   20398:	10800037 	ldwio	r2,0(r2)
   2039c:	100b883a 	mov	r5,r2
   203a0:	010000b4 	movhi	r4,2
   203a4:	21141c04 	addi	r4,r4,20592
   203a8:	00205b40 	call	205b4 <alt_printf>
	IOWR_32DIRECT(COUNTER_0_BASE, COUNT_Start, arbval);
   203ac:	00ffffd4 	movui	r3,65535
   203b0:	00800134 	movhi	r2,4
   203b4:	10841884 	addi	r2,r2,4194
   203b8:	10c00035 	stwio	r3,0(r2)
	alt_printf("iCounter, first read after restarting=%x\n", IORD_32DIRECT(COUNTER_0_BASE,0));
   203bc:	00800134 	movhi	r2,4
   203c0:	10841804 	addi	r2,r2,4192
   203c4:	10800037 	ldwio	r2,0(r2)
   203c8:	100b883a 	mov	r5,r2
   203cc:	010000b4 	movhi	r4,2
   203d0:	21142604 	addi	r4,r4,20632
   203d4:	00205b40 	call	205b4 <alt_printf>
	alt_printf("iCounter, second read after restarting=%x\n", IORD_32DIRECT(COUNTER_0_BASE,0));
   203d8:	00800134 	movhi	r2,4
   203dc:	10841804 	addi	r2,r2,4192
   203e0:	10800037 	ldwio	r2,0(r2)
   203e4:	100b883a 	mov	r5,r2
   203e8:	010000b4 	movhi	r4,2
   203ec:	21143104 	addi	r4,r4,20676
   203f0:	00205b40 	call	205b4 <alt_printf>
	IOWR_32DIRECT(COUNTER_0_BASE, COUNT_Stop, arbval);
   203f4:	00ffffd4 	movui	r3,65535
   203f8:	00800134 	movhi	r2,4
   203fc:	108418c4 	addi	r2,r2,4195
   20400:	10c00035 	stwio	r3,0(r2)
}
   20404:	0001883a 	nop
   20408:	e037883a 	mov	sp,fp
   2040c:	dfc00117 	ldw	ra,4(sp)
   20410:	df000017 	ldw	fp,0(sp)
   20414:	dec00204 	addi	sp,sp,8
   20418:	f800283a 	ret

0002041c <main>:

int main()
{
   2041c:	defffe04 	addi	sp,sp,-8
   20420:	dfc00115 	stw	ra,4(sp)
   20424:	df000015 	stw	fp,0(sp)
   20428:	d839883a 	mov	fp,sp
	test_parallel_port();
   2042c:	00202900 	call	20290 <test_parallel_port>
	test_counter();
   20430:	00202e80 	call	202e8 <test_counter>
	return 0;
   20434:	0005883a 	mov	r2,zero
}
   20438:	e037883a 	mov	sp,fp
   2043c:	dfc00117 	ldw	ra,4(sp)
   20440:	df000017 	ldw	fp,0(sp)
   20444:	dec00204 	addi	sp,sp,8
   20448:	f800283a 	ret

0002044c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   2044c:	defffc04 	addi	sp,sp,-16
   20450:	df000315 	stw	fp,12(sp)
   20454:	df000304 	addi	fp,sp,12
   20458:	e13ffd15 	stw	r4,-12(fp)
   2045c:	e17ffe15 	stw	r5,-8(fp)
   20460:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   20464:	e0fffe17 	ldw	r3,-8(fp)
   20468:	e0bffd17 	ldw	r2,-12(fp)
   2046c:	18800c26 	beq	r3,r2,204a0 <alt_load_section+0x54>
  {
    while( to != end )
   20470:	00000806 	br	20494 <alt_load_section+0x48>
    {
      *to++ = *from++;
   20474:	e0bffe17 	ldw	r2,-8(fp)
   20478:	10c00104 	addi	r3,r2,4
   2047c:	e0fffe15 	stw	r3,-8(fp)
   20480:	e0fffd17 	ldw	r3,-12(fp)
   20484:	19000104 	addi	r4,r3,4
   20488:	e13ffd15 	stw	r4,-12(fp)
   2048c:	18c00017 	ldw	r3,0(r3)
   20490:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   20494:	e0fffe17 	ldw	r3,-8(fp)
   20498:	e0bfff17 	ldw	r2,-4(fp)
   2049c:	18bff51e 	bne	r3,r2,20474 <__alt_data_end+0xfffe0474>
    {
      *to++ = *from++;
    }
  }
}
   204a0:	0001883a 	nop
   204a4:	e037883a 	mov	sp,fp
   204a8:	df000017 	ldw	fp,0(sp)
   204ac:	dec00104 	addi	sp,sp,4
   204b0:	f800283a 	ret

000204b4 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   204b4:	defffe04 	addi	sp,sp,-8
   204b8:	dfc00115 	stw	ra,4(sp)
   204bc:	df000015 	stw	fp,0(sp)
   204c0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   204c4:	018000b4 	movhi	r6,2
   204c8:	319ae504 	addi	r6,r6,27540
   204cc:	014000b4 	movhi	r5,2
   204d0:	29544a04 	addi	r5,r5,20776
   204d4:	010000b4 	movhi	r4,2
   204d8:	211ae504 	addi	r4,r4,27540
   204dc:	002044c0 	call	2044c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   204e0:	018000b4 	movhi	r6,2
   204e4:	31809104 	addi	r6,r6,580
   204e8:	014000b4 	movhi	r5,2
   204ec:	29400804 	addi	r5,r5,32
   204f0:	010000b4 	movhi	r4,2
   204f4:	21000804 	addi	r4,r4,32
   204f8:	002044c0 	call	2044c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   204fc:	018000b4 	movhi	r6,2
   20500:	31944a04 	addi	r6,r6,20776
   20504:	014000b4 	movhi	r5,2
   20508:	29540004 	addi	r5,r5,20480
   2050c:	010000b4 	movhi	r4,2
   20510:	21140004 	addi	r4,r4,20480
   20514:	002044c0 	call	2044c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   20518:	002167c0 	call	2167c <alt_dcache_flush_all>
  alt_icache_flush_all();
   2051c:	00218900 	call	21890 <alt_icache_flush_all>
}
   20520:	0001883a 	nop
   20524:	e037883a 	mov	sp,fp
   20528:	dfc00117 	ldw	ra,4(sp)
   2052c:	df000017 	ldw	fp,0(sp)
   20530:	dec00204 	addi	sp,sp,8
   20534:	f800283a 	ret

00020538 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   20538:	defffd04 	addi	sp,sp,-12
   2053c:	dfc00215 	stw	ra,8(sp)
   20540:	df000115 	stw	fp,4(sp)
   20544:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   20548:	0009883a 	mov	r4,zero
   2054c:	00208500 	call	20850 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   20550:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   20554:	00208880 	call	20888 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   20558:	018000b4 	movhi	r6,2
   2055c:	31943c04 	addi	r6,r6,20720
   20560:	014000b4 	movhi	r5,2
   20564:	29543c04 	addi	r5,r5,20720
   20568:	010000b4 	movhi	r4,2
   2056c:	21143c04 	addi	r4,r4,20720
   20570:	0021c280 	call	21c28 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   20574:	00217d00 	call	217d0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   20578:	010000b4 	movhi	r4,2
   2057c:	21060c04 	addi	r4,r4,6192
   20580:	002248c0 	call	2248c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   20584:	d0a6a917 	ldw	r2,-25948(gp)
   20588:	d0e6aa17 	ldw	r3,-25944(gp)
   2058c:	d126ab17 	ldw	r4,-25940(gp)
   20590:	200d883a 	mov	r6,r4
   20594:	180b883a 	mov	r5,r3
   20598:	1009883a 	mov	r4,r2
   2059c:	002041c0 	call	2041c <main>
   205a0:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   205a4:	01000044 	movi	r4,1
   205a8:	00215ac0 	call	215ac <close>
  exit (result);
   205ac:	e13fff17 	ldw	r4,-4(fp)
   205b0:	00224a00 	call	224a0 <exit>

000205b4 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   205b4:	defff204 	addi	sp,sp,-56
   205b8:	dfc00a15 	stw	ra,40(sp)
   205bc:	df000915 	stw	fp,36(sp)
   205c0:	df000904 	addi	fp,sp,36
   205c4:	e13fff15 	stw	r4,-4(fp)
   205c8:	e1400215 	stw	r5,8(fp)
   205cc:	e1800315 	stw	r6,12(fp)
   205d0:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
   205d4:	e0800204 	addi	r2,fp,8
   205d8:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   205dc:	e0bfff17 	ldw	r2,-4(fp)
   205e0:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
   205e4:	00006f06 	br	207a4 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   205e8:	e0bff807 	ldb	r2,-32(fp)
   205ec:	10800960 	cmpeqi	r2,r2,37
   205f0:	1000041e 	bne	r2,zero,20604 <alt_printf+0x50>
        {
            alt_putchar(c);
   205f4:	e0bff807 	ldb	r2,-32(fp)
   205f8:	1009883a 	mov	r4,r2
   205fc:	00207e00 	call	207e0 <alt_putchar>
   20600:	00006806 	br	207a4 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   20604:	e0bff717 	ldw	r2,-36(fp)
   20608:	10c00044 	addi	r3,r2,1
   2060c:	e0fff715 	stw	r3,-36(fp)
   20610:	10800003 	ldbu	r2,0(r2)
   20614:	e0bff805 	stb	r2,-32(fp)
   20618:	e0bff807 	ldb	r2,-32(fp)
   2061c:	10006926 	beq	r2,zero,207c4 <alt_printf+0x210>
            {
                if (c == '%')
   20620:	e0bff807 	ldb	r2,-32(fp)
   20624:	10800958 	cmpnei	r2,r2,37
   20628:	1000041e 	bne	r2,zero,2063c <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   2062c:	e0bff807 	ldb	r2,-32(fp)
   20630:	1009883a 	mov	r4,r2
   20634:	00207e00 	call	207e0 <alt_putchar>
   20638:	00005a06 	br	207a4 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
   2063c:	e0bff807 	ldb	r2,-32(fp)
   20640:	108018d8 	cmpnei	r2,r2,99
   20644:	1000081e 	bne	r2,zero,20668 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
   20648:	e0bffe17 	ldw	r2,-8(fp)
   2064c:	10c00104 	addi	r3,r2,4
   20650:	e0fffe15 	stw	r3,-8(fp)
   20654:	10800017 	ldw	r2,0(r2)
   20658:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
   2065c:	e13ffd17 	ldw	r4,-12(fp)
   20660:	00207e00 	call	207e0 <alt_putchar>
   20664:	00004f06 	br	207a4 <alt_printf+0x1f0>
                }
                else if (c == 'x')
   20668:	e0bff807 	ldb	r2,-32(fp)
   2066c:	10801e18 	cmpnei	r2,r2,120
   20670:	1000341e 	bne	r2,zero,20744 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   20674:	e0bffe17 	ldw	r2,-8(fp)
   20678:	10c00104 	addi	r3,r2,4
   2067c:	e0fffe15 	stw	r3,-8(fp)
   20680:	10800017 	ldw	r2,0(r2)
   20684:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   20688:	e0bffb17 	ldw	r2,-20(fp)
   2068c:	1000031e 	bne	r2,zero,2069c <alt_printf+0xe8>
                    {
                        alt_putchar('0');
   20690:	01000c04 	movi	r4,48
   20694:	00207e00 	call	207e0 <alt_putchar>
                        continue;
   20698:	00004206 	br	207a4 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   2069c:	00800704 	movi	r2,28
   206a0:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
   206a4:	00000306 	br	206b4 <alt_printf+0x100>
                        digit_shift -= 4;
   206a8:	e0bff917 	ldw	r2,-28(fp)
   206ac:	10bfff04 	addi	r2,r2,-4
   206b0:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   206b4:	00c003c4 	movi	r3,15
   206b8:	e0bff917 	ldw	r2,-28(fp)
   206bc:	1884983a 	sll	r2,r3,r2
   206c0:	1007883a 	mov	r3,r2
   206c4:	e0bffb17 	ldw	r2,-20(fp)
   206c8:	1884703a 	and	r2,r3,r2
   206cc:	103ff626 	beq	r2,zero,206a8 <__alt_data_end+0xfffe06a8>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   206d0:	00001906 	br	20738 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   206d4:	00c003c4 	movi	r3,15
   206d8:	e0bff917 	ldw	r2,-28(fp)
   206dc:	1884983a 	sll	r2,r3,r2
   206e0:	1007883a 	mov	r3,r2
   206e4:	e0bffb17 	ldw	r2,-20(fp)
   206e8:	1886703a 	and	r3,r3,r2
   206ec:	e0bff917 	ldw	r2,-28(fp)
   206f0:	1884d83a 	srl	r2,r3,r2
   206f4:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
   206f8:	e0bffc17 	ldw	r2,-16(fp)
   206fc:	108002a8 	cmpgeui	r2,r2,10
   20700:	1000041e 	bne	r2,zero,20714 <alt_printf+0x160>
                            c = '0' + digit;
   20704:	e0bffc17 	ldw	r2,-16(fp)
   20708:	10800c04 	addi	r2,r2,48
   2070c:	e0bff805 	stb	r2,-32(fp)
   20710:	00000306 	br	20720 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
   20714:	e0bffc17 	ldw	r2,-16(fp)
   20718:	108015c4 	addi	r2,r2,87
   2071c:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
   20720:	e0bff807 	ldb	r2,-32(fp)
   20724:	1009883a 	mov	r4,r2
   20728:	00207e00 	call	207e0 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   2072c:	e0bff917 	ldw	r2,-28(fp)
   20730:	10bfff04 	addi	r2,r2,-4
   20734:	e0bff915 	stw	r2,-28(fp)
   20738:	e0bff917 	ldw	r2,-28(fp)
   2073c:	103fe50e 	bge	r2,zero,206d4 <__alt_data_end+0xfffe06d4>
   20740:	00001806 	br	207a4 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   20744:	e0bff807 	ldb	r2,-32(fp)
   20748:	10801cd8 	cmpnei	r2,r2,115
   2074c:	1000151e 	bne	r2,zero,207a4 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   20750:	e0bffe17 	ldw	r2,-8(fp)
   20754:	10c00104 	addi	r3,r2,4
   20758:	e0fffe15 	stw	r3,-8(fp)
   2075c:	10800017 	ldw	r2,0(r2)
   20760:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
   20764:	00000906 	br	2078c <alt_printf+0x1d8>
                      alt_putchar(*s++);
   20768:	e0bffa17 	ldw	r2,-24(fp)
   2076c:	10c00044 	addi	r3,r2,1
   20770:	e0fffa15 	stw	r3,-24(fp)
   20774:	10800003 	ldbu	r2,0(r2)
   20778:	10803fcc 	andi	r2,r2,255
   2077c:	1080201c 	xori	r2,r2,128
   20780:	10bfe004 	addi	r2,r2,-128
   20784:	1009883a 	mov	r4,r2
   20788:	00207e00 	call	207e0 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   2078c:	e0bffa17 	ldw	r2,-24(fp)
   20790:	10800003 	ldbu	r2,0(r2)
   20794:	10803fcc 	andi	r2,r2,255
   20798:	1080201c 	xori	r2,r2,128
   2079c:	10bfe004 	addi	r2,r2,-128
   207a0:	103ff11e 	bne	r2,zero,20768 <__alt_data_end+0xfffe0768>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   207a4:	e0bff717 	ldw	r2,-36(fp)
   207a8:	10c00044 	addi	r3,r2,1
   207ac:	e0fff715 	stw	r3,-36(fp)
   207b0:	10800003 	ldbu	r2,0(r2)
   207b4:	e0bff805 	stb	r2,-32(fp)
   207b8:	e0bff807 	ldb	r2,-32(fp)
   207bc:	103f8a1e 	bne	r2,zero,205e8 <__alt_data_end+0xfffe05e8>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   207c0:	00000106 	br	207c8 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
   207c4:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   207c8:	0001883a 	nop
   207cc:	e037883a 	mov	sp,fp
   207d0:	dfc00117 	ldw	ra,4(sp)
   207d4:	df000017 	ldw	fp,0(sp)
   207d8:	dec00504 	addi	sp,sp,20
   207dc:	f800283a 	ret

000207e0 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   207e0:	defffd04 	addi	sp,sp,-12
   207e4:	dfc00215 	stw	ra,8(sp)
   207e8:	df000115 	stw	fp,4(sp)
   207ec:	df000104 	addi	fp,sp,4
   207f0:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   207f4:	d0a00a17 	ldw	r2,-32728(gp)
   207f8:	10800217 	ldw	r2,8(r2)
   207fc:	100b883a 	mov	r5,r2
   20800:	e13fff17 	ldw	r4,-4(fp)
   20804:	002273c0 	call	2273c <putc>
#endif
#endif
}
   20808:	e037883a 	mov	sp,fp
   2080c:	dfc00117 	ldw	ra,4(sp)
   20810:	df000017 	ldw	fp,0(sp)
   20814:	dec00204 	addi	sp,sp,8
   20818:	f800283a 	ret

0002081c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   2081c:	defffd04 	addi	sp,sp,-12
   20820:	dfc00215 	stw	ra,8(sp)
   20824:	df000115 	stw	fp,4(sp)
   20828:	df000104 	addi	fp,sp,4
   2082c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   20830:	d1600204 	addi	r5,gp,-32760
   20834:	e13fff17 	ldw	r4,-4(fp)
   20838:	002172c0 	call	2172c <alt_dev_llist_insert>
}
   2083c:	e037883a 	mov	sp,fp
   20840:	dfc00117 	ldw	ra,4(sp)
   20844:	df000017 	ldw	fp,0(sp)
   20848:	dec00204 	addi	sp,sp,8
   2084c:	f800283a 	ret

00020850 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   20850:	defffd04 	addi	sp,sp,-12
   20854:	dfc00215 	stw	ra,8(sp)
   20858:	df000115 	stw	fp,4(sp)
   2085c:	df000104 	addi	fp,sp,4
   20860:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   20864:	00221000 	call	22100 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   20868:	00800044 	movi	r2,1
   2086c:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   20870:	0001883a 	nop
   20874:	e037883a 	mov	sp,fp
   20878:	dfc00117 	ldw	ra,4(sp)
   2087c:	df000017 	ldw	fp,0(sp)
   20880:	dec00204 	addi	sp,sp,8
   20884:	f800283a 	ret

00020888 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   20888:	defffe04 	addi	sp,sp,-8
   2088c:	dfc00115 	stw	ra,4(sp)
   20890:	df000015 	stw	fp,0(sp)
   20894:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   20898:	01c0fa04 	movi	r7,1000
   2089c:	01800084 	movi	r6,2
   208a0:	000b883a 	mov	r5,zero
   208a4:	01000134 	movhi	r4,4
   208a8:	21041004 	addi	r4,r4,4160
   208ac:	00213c80 	call	213c8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   208b0:	01800044 	movi	r6,1
   208b4:	000b883a 	mov	r5,zero
   208b8:	010000b4 	movhi	r4,2
   208bc:	21145404 	addi	r4,r4,20816
   208c0:	0020a4c0 	call	20a4c <altera_avalon_jtag_uart_init>
   208c4:	010000b4 	movhi	r4,2
   208c8:	21144a04 	addi	r4,r4,20776
   208cc:	002081c0 	call	2081c <alt_dev_reg>
}
   208d0:	0001883a 	nop
   208d4:	e037883a 	mov	sp,fp
   208d8:	dfc00117 	ldw	ra,4(sp)
   208dc:	df000017 	ldw	fp,0(sp)
   208e0:	dec00204 	addi	sp,sp,8
   208e4:	f800283a 	ret

000208e8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   208e8:	defffa04 	addi	sp,sp,-24
   208ec:	dfc00515 	stw	ra,20(sp)
   208f0:	df000415 	stw	fp,16(sp)
   208f4:	df000404 	addi	fp,sp,16
   208f8:	e13ffd15 	stw	r4,-12(fp)
   208fc:	e17ffe15 	stw	r5,-8(fp)
   20900:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   20904:	e0bffd17 	ldw	r2,-12(fp)
   20908:	10800017 	ldw	r2,0(r2)
   2090c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   20910:	e0bffc17 	ldw	r2,-16(fp)
   20914:	10c00a04 	addi	r3,r2,40
   20918:	e0bffd17 	ldw	r2,-12(fp)
   2091c:	10800217 	ldw	r2,8(r2)
   20920:	100f883a 	mov	r7,r2
   20924:	e1bfff17 	ldw	r6,-4(fp)
   20928:	e17ffe17 	ldw	r5,-8(fp)
   2092c:	1809883a 	mov	r4,r3
   20930:	0020f100 	call	20f10 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   20934:	e037883a 	mov	sp,fp
   20938:	dfc00117 	ldw	ra,4(sp)
   2093c:	df000017 	ldw	fp,0(sp)
   20940:	dec00204 	addi	sp,sp,8
   20944:	f800283a 	ret

00020948 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   20948:	defffa04 	addi	sp,sp,-24
   2094c:	dfc00515 	stw	ra,20(sp)
   20950:	df000415 	stw	fp,16(sp)
   20954:	df000404 	addi	fp,sp,16
   20958:	e13ffd15 	stw	r4,-12(fp)
   2095c:	e17ffe15 	stw	r5,-8(fp)
   20960:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   20964:	e0bffd17 	ldw	r2,-12(fp)
   20968:	10800017 	ldw	r2,0(r2)
   2096c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   20970:	e0bffc17 	ldw	r2,-16(fp)
   20974:	10c00a04 	addi	r3,r2,40
   20978:	e0bffd17 	ldw	r2,-12(fp)
   2097c:	10800217 	ldw	r2,8(r2)
   20980:	100f883a 	mov	r7,r2
   20984:	e1bfff17 	ldw	r6,-4(fp)
   20988:	e17ffe17 	ldw	r5,-8(fp)
   2098c:	1809883a 	mov	r4,r3
   20990:	002112c0 	call	2112c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   20994:	e037883a 	mov	sp,fp
   20998:	dfc00117 	ldw	ra,4(sp)
   2099c:	df000017 	ldw	fp,0(sp)
   209a0:	dec00204 	addi	sp,sp,8
   209a4:	f800283a 	ret

000209a8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   209a8:	defffc04 	addi	sp,sp,-16
   209ac:	dfc00315 	stw	ra,12(sp)
   209b0:	df000215 	stw	fp,8(sp)
   209b4:	df000204 	addi	fp,sp,8
   209b8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   209bc:	e0bfff17 	ldw	r2,-4(fp)
   209c0:	10800017 	ldw	r2,0(r2)
   209c4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   209c8:	e0bffe17 	ldw	r2,-8(fp)
   209cc:	10c00a04 	addi	r3,r2,40
   209d0:	e0bfff17 	ldw	r2,-4(fp)
   209d4:	10800217 	ldw	r2,8(r2)
   209d8:	100b883a 	mov	r5,r2
   209dc:	1809883a 	mov	r4,r3
   209e0:	0020db80 	call	20db8 <altera_avalon_jtag_uart_close>
}
   209e4:	e037883a 	mov	sp,fp
   209e8:	dfc00117 	ldw	ra,4(sp)
   209ec:	df000017 	ldw	fp,0(sp)
   209f0:	dec00204 	addi	sp,sp,8
   209f4:	f800283a 	ret

000209f8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   209f8:	defffa04 	addi	sp,sp,-24
   209fc:	dfc00515 	stw	ra,20(sp)
   20a00:	df000415 	stw	fp,16(sp)
   20a04:	df000404 	addi	fp,sp,16
   20a08:	e13ffd15 	stw	r4,-12(fp)
   20a0c:	e17ffe15 	stw	r5,-8(fp)
   20a10:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   20a14:	e0bffd17 	ldw	r2,-12(fp)
   20a18:	10800017 	ldw	r2,0(r2)
   20a1c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   20a20:	e0bffc17 	ldw	r2,-16(fp)
   20a24:	10800a04 	addi	r2,r2,40
   20a28:	e1bfff17 	ldw	r6,-4(fp)
   20a2c:	e17ffe17 	ldw	r5,-8(fp)
   20a30:	1009883a 	mov	r4,r2
   20a34:	0020e200 	call	20e20 <altera_avalon_jtag_uart_ioctl>
}
   20a38:	e037883a 	mov	sp,fp
   20a3c:	dfc00117 	ldw	ra,4(sp)
   20a40:	df000017 	ldw	fp,0(sp)
   20a44:	dec00204 	addi	sp,sp,8
   20a48:	f800283a 	ret

00020a4c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   20a4c:	defffa04 	addi	sp,sp,-24
   20a50:	dfc00515 	stw	ra,20(sp)
   20a54:	df000415 	stw	fp,16(sp)
   20a58:	df000404 	addi	fp,sp,16
   20a5c:	e13ffd15 	stw	r4,-12(fp)
   20a60:	e17ffe15 	stw	r5,-8(fp)
   20a64:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   20a68:	e0bffd17 	ldw	r2,-12(fp)
   20a6c:	00c00044 	movi	r3,1
   20a70:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   20a74:	e0bffd17 	ldw	r2,-12(fp)
   20a78:	10800017 	ldw	r2,0(r2)
   20a7c:	10800104 	addi	r2,r2,4
   20a80:	1007883a 	mov	r3,r2
   20a84:	e0bffd17 	ldw	r2,-12(fp)
   20a88:	10800817 	ldw	r2,32(r2)
   20a8c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   20a90:	e0bffe17 	ldw	r2,-8(fp)
   20a94:	e0ffff17 	ldw	r3,-4(fp)
   20a98:	d8000015 	stw	zero,0(sp)
   20a9c:	e1fffd17 	ldw	r7,-12(fp)
   20aa0:	018000b4 	movhi	r6,2
   20aa4:	3182c304 	addi	r6,r6,2828
   20aa8:	180b883a 	mov	r5,r3
   20aac:	1009883a 	mov	r4,r2
   20ab0:	00218c40 	call	218c4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   20ab4:	e0bffd17 	ldw	r2,-12(fp)
   20ab8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   20abc:	e0bffd17 	ldw	r2,-12(fp)
   20ac0:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   20ac4:	d0e6ad17 	ldw	r3,-25932(gp)
   20ac8:	e1fffd17 	ldw	r7,-12(fp)
   20acc:	018000b4 	movhi	r6,2
   20ad0:	31834604 	addi	r6,r6,3352
   20ad4:	180b883a 	mov	r5,r3
   20ad8:	1009883a 	mov	r4,r2
   20adc:	00214440 	call	21444 <alt_alarm_start>
   20ae0:	1000040e 	bge	r2,zero,20af4 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   20ae4:	e0fffd17 	ldw	r3,-12(fp)
   20ae8:	00a00034 	movhi	r2,32768
   20aec:	10bfffc4 	addi	r2,r2,-1
   20af0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   20af4:	0001883a 	nop
   20af8:	e037883a 	mov	sp,fp
   20afc:	dfc00117 	ldw	ra,4(sp)
   20b00:	df000017 	ldw	fp,0(sp)
   20b04:	dec00204 	addi	sp,sp,8
   20b08:	f800283a 	ret

00020b0c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   20b0c:	defff804 	addi	sp,sp,-32
   20b10:	df000715 	stw	fp,28(sp)
   20b14:	df000704 	addi	fp,sp,28
   20b18:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   20b1c:	e0bfff17 	ldw	r2,-4(fp)
   20b20:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   20b24:	e0bffb17 	ldw	r2,-20(fp)
   20b28:	10800017 	ldw	r2,0(r2)
   20b2c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   20b30:	e0bffc17 	ldw	r2,-16(fp)
   20b34:	10800104 	addi	r2,r2,4
   20b38:	10800037 	ldwio	r2,0(r2)
   20b3c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   20b40:	e0bffd17 	ldw	r2,-12(fp)
   20b44:	1080c00c 	andi	r2,r2,768
   20b48:	10006d26 	beq	r2,zero,20d00 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   20b4c:	e0bffd17 	ldw	r2,-12(fp)
   20b50:	1080400c 	andi	r2,r2,256
   20b54:	10003526 	beq	r2,zero,20c2c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   20b58:	00800074 	movhi	r2,1
   20b5c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   20b60:	e0bffb17 	ldw	r2,-20(fp)
   20b64:	10800a17 	ldw	r2,40(r2)
   20b68:	10800044 	addi	r2,r2,1
   20b6c:	1081ffcc 	andi	r2,r2,2047
   20b70:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   20b74:	e0bffb17 	ldw	r2,-20(fp)
   20b78:	10c00b17 	ldw	r3,44(r2)
   20b7c:	e0bffe17 	ldw	r2,-8(fp)
   20b80:	18801526 	beq	r3,r2,20bd8 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   20b84:	e0bffc17 	ldw	r2,-16(fp)
   20b88:	10800037 	ldwio	r2,0(r2)
   20b8c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   20b90:	e0bff917 	ldw	r2,-28(fp)
   20b94:	10a0000c 	andi	r2,r2,32768
   20b98:	10001126 	beq	r2,zero,20be0 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   20b9c:	e0bffb17 	ldw	r2,-20(fp)
   20ba0:	10800a17 	ldw	r2,40(r2)
   20ba4:	e0fff917 	ldw	r3,-28(fp)
   20ba8:	1809883a 	mov	r4,r3
   20bac:	e0fffb17 	ldw	r3,-20(fp)
   20bb0:	1885883a 	add	r2,r3,r2
   20bb4:	10800e04 	addi	r2,r2,56
   20bb8:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   20bbc:	e0bffb17 	ldw	r2,-20(fp)
   20bc0:	10800a17 	ldw	r2,40(r2)
   20bc4:	10800044 	addi	r2,r2,1
   20bc8:	10c1ffcc 	andi	r3,r2,2047
   20bcc:	e0bffb17 	ldw	r2,-20(fp)
   20bd0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   20bd4:	003fe206 	br	20b60 <__alt_data_end+0xfffe0b60>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   20bd8:	0001883a 	nop
   20bdc:	00000106 	br	20be4 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   20be0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   20be4:	e0bff917 	ldw	r2,-28(fp)
   20be8:	10bfffec 	andhi	r2,r2,65535
   20bec:	10000f26 	beq	r2,zero,20c2c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   20bf0:	e0bffb17 	ldw	r2,-20(fp)
   20bf4:	10c00817 	ldw	r3,32(r2)
   20bf8:	00bfff84 	movi	r2,-2
   20bfc:	1886703a 	and	r3,r3,r2
   20c00:	e0bffb17 	ldw	r2,-20(fp)
   20c04:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   20c08:	e0bffc17 	ldw	r2,-16(fp)
   20c0c:	10800104 	addi	r2,r2,4
   20c10:	1007883a 	mov	r3,r2
   20c14:	e0bffb17 	ldw	r2,-20(fp)
   20c18:	10800817 	ldw	r2,32(r2)
   20c1c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   20c20:	e0bffc17 	ldw	r2,-16(fp)
   20c24:	10800104 	addi	r2,r2,4
   20c28:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   20c2c:	e0bffd17 	ldw	r2,-12(fp)
   20c30:	1080800c 	andi	r2,r2,512
   20c34:	103fbe26 	beq	r2,zero,20b30 <__alt_data_end+0xfffe0b30>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   20c38:	e0bffd17 	ldw	r2,-12(fp)
   20c3c:	1004d43a 	srli	r2,r2,16
   20c40:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   20c44:	00001406 	br	20c98 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   20c48:	e0bffc17 	ldw	r2,-16(fp)
   20c4c:	e0fffb17 	ldw	r3,-20(fp)
   20c50:	18c00d17 	ldw	r3,52(r3)
   20c54:	e13ffb17 	ldw	r4,-20(fp)
   20c58:	20c7883a 	add	r3,r4,r3
   20c5c:	18c20e04 	addi	r3,r3,2104
   20c60:	18c00003 	ldbu	r3,0(r3)
   20c64:	18c03fcc 	andi	r3,r3,255
   20c68:	18c0201c 	xori	r3,r3,128
   20c6c:	18ffe004 	addi	r3,r3,-128
   20c70:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   20c74:	e0bffb17 	ldw	r2,-20(fp)
   20c78:	10800d17 	ldw	r2,52(r2)
   20c7c:	10800044 	addi	r2,r2,1
   20c80:	10c1ffcc 	andi	r3,r2,2047
   20c84:	e0bffb17 	ldw	r2,-20(fp)
   20c88:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   20c8c:	e0bffa17 	ldw	r2,-24(fp)
   20c90:	10bfffc4 	addi	r2,r2,-1
   20c94:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   20c98:	e0bffa17 	ldw	r2,-24(fp)
   20c9c:	10000526 	beq	r2,zero,20cb4 <altera_avalon_jtag_uart_irq+0x1a8>
   20ca0:	e0bffb17 	ldw	r2,-20(fp)
   20ca4:	10c00d17 	ldw	r3,52(r2)
   20ca8:	e0bffb17 	ldw	r2,-20(fp)
   20cac:	10800c17 	ldw	r2,48(r2)
   20cb0:	18bfe51e 	bne	r3,r2,20c48 <__alt_data_end+0xfffe0c48>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   20cb4:	e0bffa17 	ldw	r2,-24(fp)
   20cb8:	103f9d26 	beq	r2,zero,20b30 <__alt_data_end+0xfffe0b30>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   20cbc:	e0bffb17 	ldw	r2,-20(fp)
   20cc0:	10c00817 	ldw	r3,32(r2)
   20cc4:	00bfff44 	movi	r2,-3
   20cc8:	1886703a 	and	r3,r3,r2
   20ccc:	e0bffb17 	ldw	r2,-20(fp)
   20cd0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   20cd4:	e0bffb17 	ldw	r2,-20(fp)
   20cd8:	10800017 	ldw	r2,0(r2)
   20cdc:	10800104 	addi	r2,r2,4
   20ce0:	1007883a 	mov	r3,r2
   20ce4:	e0bffb17 	ldw	r2,-20(fp)
   20ce8:	10800817 	ldw	r2,32(r2)
   20cec:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   20cf0:	e0bffc17 	ldw	r2,-16(fp)
   20cf4:	10800104 	addi	r2,r2,4
   20cf8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   20cfc:	003f8c06 	br	20b30 <__alt_data_end+0xfffe0b30>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   20d00:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   20d04:	0001883a 	nop
   20d08:	e037883a 	mov	sp,fp
   20d0c:	df000017 	ldw	fp,0(sp)
   20d10:	dec00104 	addi	sp,sp,4
   20d14:	f800283a 	ret

00020d18 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   20d18:	defff804 	addi	sp,sp,-32
   20d1c:	df000715 	stw	fp,28(sp)
   20d20:	df000704 	addi	fp,sp,28
   20d24:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   20d28:	e0bffb17 	ldw	r2,-20(fp)
   20d2c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   20d30:	e0bff917 	ldw	r2,-28(fp)
   20d34:	10800017 	ldw	r2,0(r2)
   20d38:	10800104 	addi	r2,r2,4
   20d3c:	10800037 	ldwio	r2,0(r2)
   20d40:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   20d44:	e0bffa17 	ldw	r2,-24(fp)
   20d48:	1081000c 	andi	r2,r2,1024
   20d4c:	10000b26 	beq	r2,zero,20d7c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   20d50:	e0bff917 	ldw	r2,-28(fp)
   20d54:	10800017 	ldw	r2,0(r2)
   20d58:	10800104 	addi	r2,r2,4
   20d5c:	1007883a 	mov	r3,r2
   20d60:	e0bff917 	ldw	r2,-28(fp)
   20d64:	10800817 	ldw	r2,32(r2)
   20d68:	10810014 	ori	r2,r2,1024
   20d6c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   20d70:	e0bff917 	ldw	r2,-28(fp)
   20d74:	10000915 	stw	zero,36(r2)
   20d78:	00000a06 	br	20da4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   20d7c:	e0bff917 	ldw	r2,-28(fp)
   20d80:	10c00917 	ldw	r3,36(r2)
   20d84:	00a00034 	movhi	r2,32768
   20d88:	10bfff04 	addi	r2,r2,-4
   20d8c:	10c00536 	bltu	r2,r3,20da4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   20d90:	e0bff917 	ldw	r2,-28(fp)
   20d94:	10800917 	ldw	r2,36(r2)
   20d98:	10c00044 	addi	r3,r2,1
   20d9c:	e0bff917 	ldw	r2,-28(fp)
   20da0:	10c00915 	stw	r3,36(r2)
   20da4:	d0a6ad17 	ldw	r2,-25932(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   20da8:	e037883a 	mov	sp,fp
   20dac:	df000017 	ldw	fp,0(sp)
   20db0:	dec00104 	addi	sp,sp,4
   20db4:	f800283a 	ret

00020db8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   20db8:	defffd04 	addi	sp,sp,-12
   20dbc:	df000215 	stw	fp,8(sp)
   20dc0:	df000204 	addi	fp,sp,8
   20dc4:	e13ffe15 	stw	r4,-8(fp)
   20dc8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   20dcc:	00000506 	br	20de4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   20dd0:	e0bfff17 	ldw	r2,-4(fp)
   20dd4:	1090000c 	andi	r2,r2,16384
   20dd8:	10000226 	beq	r2,zero,20de4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   20ddc:	00bffd44 	movi	r2,-11
   20de0:	00000b06 	br	20e10 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   20de4:	e0bffe17 	ldw	r2,-8(fp)
   20de8:	10c00d17 	ldw	r3,52(r2)
   20dec:	e0bffe17 	ldw	r2,-8(fp)
   20df0:	10800c17 	ldw	r2,48(r2)
   20df4:	18800526 	beq	r3,r2,20e0c <altera_avalon_jtag_uart_close+0x54>
   20df8:	e0bffe17 	ldw	r2,-8(fp)
   20dfc:	10c00917 	ldw	r3,36(r2)
   20e00:	e0bffe17 	ldw	r2,-8(fp)
   20e04:	10800117 	ldw	r2,4(r2)
   20e08:	18bff136 	bltu	r3,r2,20dd0 <__alt_data_end+0xfffe0dd0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   20e0c:	0005883a 	mov	r2,zero
}
   20e10:	e037883a 	mov	sp,fp
   20e14:	df000017 	ldw	fp,0(sp)
   20e18:	dec00104 	addi	sp,sp,4
   20e1c:	f800283a 	ret

00020e20 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   20e20:	defffa04 	addi	sp,sp,-24
   20e24:	df000515 	stw	fp,20(sp)
   20e28:	df000504 	addi	fp,sp,20
   20e2c:	e13ffd15 	stw	r4,-12(fp)
   20e30:	e17ffe15 	stw	r5,-8(fp)
   20e34:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   20e38:	00bff9c4 	movi	r2,-25
   20e3c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   20e40:	e0bffe17 	ldw	r2,-8(fp)
   20e44:	10da8060 	cmpeqi	r3,r2,27137
   20e48:	1800031e 	bne	r3,zero,20e58 <altera_avalon_jtag_uart_ioctl+0x38>
   20e4c:	109a80a0 	cmpeqi	r2,r2,27138
   20e50:	1000181e 	bne	r2,zero,20eb4 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   20e54:	00002906 	br	20efc <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   20e58:	e0bffd17 	ldw	r2,-12(fp)
   20e5c:	10c00117 	ldw	r3,4(r2)
   20e60:	00a00034 	movhi	r2,32768
   20e64:	10bfffc4 	addi	r2,r2,-1
   20e68:	18802126 	beq	r3,r2,20ef0 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   20e6c:	e0bfff17 	ldw	r2,-4(fp)
   20e70:	10800017 	ldw	r2,0(r2)
   20e74:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   20e78:	e0bffc17 	ldw	r2,-16(fp)
   20e7c:	10800090 	cmplti	r2,r2,2
   20e80:	1000061e 	bne	r2,zero,20e9c <altera_avalon_jtag_uart_ioctl+0x7c>
   20e84:	e0fffc17 	ldw	r3,-16(fp)
   20e88:	00a00034 	movhi	r2,32768
   20e8c:	10bfffc4 	addi	r2,r2,-1
   20e90:	18800226 	beq	r3,r2,20e9c <altera_avalon_jtag_uart_ioctl+0x7c>
   20e94:	e0bffc17 	ldw	r2,-16(fp)
   20e98:	00000206 	br	20ea4 <altera_avalon_jtag_uart_ioctl+0x84>
   20e9c:	00a00034 	movhi	r2,32768
   20ea0:	10bfff84 	addi	r2,r2,-2
   20ea4:	e0fffd17 	ldw	r3,-12(fp)
   20ea8:	18800115 	stw	r2,4(r3)
      rc = 0;
   20eac:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   20eb0:	00000f06 	br	20ef0 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   20eb4:	e0bffd17 	ldw	r2,-12(fp)
   20eb8:	10c00117 	ldw	r3,4(r2)
   20ebc:	00a00034 	movhi	r2,32768
   20ec0:	10bfffc4 	addi	r2,r2,-1
   20ec4:	18800c26 	beq	r3,r2,20ef8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   20ec8:	e0bffd17 	ldw	r2,-12(fp)
   20ecc:	10c00917 	ldw	r3,36(r2)
   20ed0:	e0bffd17 	ldw	r2,-12(fp)
   20ed4:	10800117 	ldw	r2,4(r2)
   20ed8:	1885803a 	cmpltu	r2,r3,r2
   20edc:	10c03fcc 	andi	r3,r2,255
   20ee0:	e0bfff17 	ldw	r2,-4(fp)
   20ee4:	10c00015 	stw	r3,0(r2)
      rc = 0;
   20ee8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   20eec:	00000206 	br	20ef8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   20ef0:	0001883a 	nop
   20ef4:	00000106 	br	20efc <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   20ef8:	0001883a 	nop

  default:
    break;
  }

  return rc;
   20efc:	e0bffb17 	ldw	r2,-20(fp)
}
   20f00:	e037883a 	mov	sp,fp
   20f04:	df000017 	ldw	fp,0(sp)
   20f08:	dec00104 	addi	sp,sp,4
   20f0c:	f800283a 	ret

00020f10 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   20f10:	defff304 	addi	sp,sp,-52
   20f14:	dfc00c15 	stw	ra,48(sp)
   20f18:	df000b15 	stw	fp,44(sp)
   20f1c:	df000b04 	addi	fp,sp,44
   20f20:	e13ffc15 	stw	r4,-16(fp)
   20f24:	e17ffd15 	stw	r5,-12(fp)
   20f28:	e1bffe15 	stw	r6,-8(fp)
   20f2c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   20f30:	e0bffd17 	ldw	r2,-12(fp)
   20f34:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   20f38:	00004706 	br	21058 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   20f3c:	e0bffc17 	ldw	r2,-16(fp)
   20f40:	10800a17 	ldw	r2,40(r2)
   20f44:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   20f48:	e0bffc17 	ldw	r2,-16(fp)
   20f4c:	10800b17 	ldw	r2,44(r2)
   20f50:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   20f54:	e0fff717 	ldw	r3,-36(fp)
   20f58:	e0bff817 	ldw	r2,-32(fp)
   20f5c:	18800536 	bltu	r3,r2,20f74 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   20f60:	e0fff717 	ldw	r3,-36(fp)
   20f64:	e0bff817 	ldw	r2,-32(fp)
   20f68:	1885c83a 	sub	r2,r3,r2
   20f6c:	e0bff615 	stw	r2,-40(fp)
   20f70:	00000406 	br	20f84 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   20f74:	00c20004 	movi	r3,2048
   20f78:	e0bff817 	ldw	r2,-32(fp)
   20f7c:	1885c83a 	sub	r2,r3,r2
   20f80:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   20f84:	e0bff617 	ldw	r2,-40(fp)
   20f88:	10001e26 	beq	r2,zero,21004 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   20f8c:	e0fffe17 	ldw	r3,-8(fp)
   20f90:	e0bff617 	ldw	r2,-40(fp)
   20f94:	1880022e 	bgeu	r3,r2,20fa0 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   20f98:	e0bffe17 	ldw	r2,-8(fp)
   20f9c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   20fa0:	e0bffc17 	ldw	r2,-16(fp)
   20fa4:	10c00e04 	addi	r3,r2,56
   20fa8:	e0bff817 	ldw	r2,-32(fp)
   20fac:	1885883a 	add	r2,r3,r2
   20fb0:	e1bff617 	ldw	r6,-40(fp)
   20fb4:	100b883a 	mov	r5,r2
   20fb8:	e13ff517 	ldw	r4,-44(fp)
   20fbc:	00225540 	call	22554 <memcpy>
      ptr   += n;
   20fc0:	e0fff517 	ldw	r3,-44(fp)
   20fc4:	e0bff617 	ldw	r2,-40(fp)
   20fc8:	1885883a 	add	r2,r3,r2
   20fcc:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   20fd0:	e0fffe17 	ldw	r3,-8(fp)
   20fd4:	e0bff617 	ldw	r2,-40(fp)
   20fd8:	1885c83a 	sub	r2,r3,r2
   20fdc:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   20fe0:	e0fff817 	ldw	r3,-32(fp)
   20fe4:	e0bff617 	ldw	r2,-40(fp)
   20fe8:	1885883a 	add	r2,r3,r2
   20fec:	10c1ffcc 	andi	r3,r2,2047
   20ff0:	e0bffc17 	ldw	r2,-16(fp)
   20ff4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   20ff8:	e0bffe17 	ldw	r2,-8(fp)
   20ffc:	00bfcf16 	blt	zero,r2,20f3c <__alt_data_end+0xfffe0f3c>
   21000:	00000106 	br	21008 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   21004:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   21008:	e0fff517 	ldw	r3,-44(fp)
   2100c:	e0bffd17 	ldw	r2,-12(fp)
   21010:	1880141e 	bne	r3,r2,21064 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   21014:	e0bfff17 	ldw	r2,-4(fp)
   21018:	1090000c 	andi	r2,r2,16384
   2101c:	1000131e 	bne	r2,zero,2106c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   21020:	0001883a 	nop
   21024:	e0bffc17 	ldw	r2,-16(fp)
   21028:	10c00a17 	ldw	r3,40(r2)
   2102c:	e0bff717 	ldw	r2,-36(fp)
   21030:	1880051e 	bne	r3,r2,21048 <altera_avalon_jtag_uart_read+0x138>
   21034:	e0bffc17 	ldw	r2,-16(fp)
   21038:	10c00917 	ldw	r3,36(r2)
   2103c:	e0bffc17 	ldw	r2,-16(fp)
   21040:	10800117 	ldw	r2,4(r2)
   21044:	18bff736 	bltu	r3,r2,21024 <__alt_data_end+0xfffe1024>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   21048:	e0bffc17 	ldw	r2,-16(fp)
   2104c:	10c00a17 	ldw	r3,40(r2)
   21050:	e0bff717 	ldw	r2,-36(fp)
   21054:	18800726 	beq	r3,r2,21074 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   21058:	e0bffe17 	ldw	r2,-8(fp)
   2105c:	00bfb716 	blt	zero,r2,20f3c <__alt_data_end+0xfffe0f3c>
   21060:	00000506 	br	21078 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   21064:	0001883a 	nop
   21068:	00000306 	br	21078 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   2106c:	0001883a 	nop
   21070:	00000106 	br	21078 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   21074:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   21078:	e0fff517 	ldw	r3,-44(fp)
   2107c:	e0bffd17 	ldw	r2,-12(fp)
   21080:	18801826 	beq	r3,r2,210e4 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21084:	0005303a 	rdctl	r2,status
   21088:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2108c:	e0fffb17 	ldw	r3,-20(fp)
   21090:	00bfff84 	movi	r2,-2
   21094:	1884703a 	and	r2,r3,r2
   21098:	1001703a 	wrctl	status,r2
  
  return context;
   2109c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   210a0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   210a4:	e0bffc17 	ldw	r2,-16(fp)
   210a8:	10800817 	ldw	r2,32(r2)
   210ac:	10c00054 	ori	r3,r2,1
   210b0:	e0bffc17 	ldw	r2,-16(fp)
   210b4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   210b8:	e0bffc17 	ldw	r2,-16(fp)
   210bc:	10800017 	ldw	r2,0(r2)
   210c0:	10800104 	addi	r2,r2,4
   210c4:	1007883a 	mov	r3,r2
   210c8:	e0bffc17 	ldw	r2,-16(fp)
   210cc:	10800817 	ldw	r2,32(r2)
   210d0:	18800035 	stwio	r2,0(r3)
   210d4:	e0bffa17 	ldw	r2,-24(fp)
   210d8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   210dc:	e0bff917 	ldw	r2,-28(fp)
   210e0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   210e4:	e0fff517 	ldw	r3,-44(fp)
   210e8:	e0bffd17 	ldw	r2,-12(fp)
   210ec:	18800426 	beq	r3,r2,21100 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   210f0:	e0fff517 	ldw	r3,-44(fp)
   210f4:	e0bffd17 	ldw	r2,-12(fp)
   210f8:	1885c83a 	sub	r2,r3,r2
   210fc:	00000606 	br	21118 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   21100:	e0bfff17 	ldw	r2,-4(fp)
   21104:	1090000c 	andi	r2,r2,16384
   21108:	10000226 	beq	r2,zero,21114 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   2110c:	00bffd44 	movi	r2,-11
   21110:	00000106 	br	21118 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   21114:	00bffec4 	movi	r2,-5
}
   21118:	e037883a 	mov	sp,fp
   2111c:	dfc00117 	ldw	ra,4(sp)
   21120:	df000017 	ldw	fp,0(sp)
   21124:	dec00204 	addi	sp,sp,8
   21128:	f800283a 	ret

0002112c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   2112c:	defff304 	addi	sp,sp,-52
   21130:	dfc00c15 	stw	ra,48(sp)
   21134:	df000b15 	stw	fp,44(sp)
   21138:	df000b04 	addi	fp,sp,44
   2113c:	e13ffc15 	stw	r4,-16(fp)
   21140:	e17ffd15 	stw	r5,-12(fp)
   21144:	e1bffe15 	stw	r6,-8(fp)
   21148:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   2114c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   21150:	e0bffd17 	ldw	r2,-12(fp)
   21154:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   21158:	00003706 	br	21238 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   2115c:	e0bffc17 	ldw	r2,-16(fp)
   21160:	10800c17 	ldw	r2,48(r2)
   21164:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   21168:	e0bffc17 	ldw	r2,-16(fp)
   2116c:	10800d17 	ldw	r2,52(r2)
   21170:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   21174:	e0fff917 	ldw	r3,-28(fp)
   21178:	e0bff517 	ldw	r2,-44(fp)
   2117c:	1880062e 	bgeu	r3,r2,21198 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   21180:	e0fff517 	ldw	r3,-44(fp)
   21184:	e0bff917 	ldw	r2,-28(fp)
   21188:	1885c83a 	sub	r2,r3,r2
   2118c:	10bfffc4 	addi	r2,r2,-1
   21190:	e0bff615 	stw	r2,-40(fp)
   21194:	00000b06 	br	211c4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   21198:	e0bff517 	ldw	r2,-44(fp)
   2119c:	10000526 	beq	r2,zero,211b4 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   211a0:	00c20004 	movi	r3,2048
   211a4:	e0bff917 	ldw	r2,-28(fp)
   211a8:	1885c83a 	sub	r2,r3,r2
   211ac:	e0bff615 	stw	r2,-40(fp)
   211b0:	00000406 	br	211c4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   211b4:	00c1ffc4 	movi	r3,2047
   211b8:	e0bff917 	ldw	r2,-28(fp)
   211bc:	1885c83a 	sub	r2,r3,r2
   211c0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   211c4:	e0bff617 	ldw	r2,-40(fp)
   211c8:	10001e26 	beq	r2,zero,21244 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   211cc:	e0fffe17 	ldw	r3,-8(fp)
   211d0:	e0bff617 	ldw	r2,-40(fp)
   211d4:	1880022e 	bgeu	r3,r2,211e0 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   211d8:	e0bffe17 	ldw	r2,-8(fp)
   211dc:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   211e0:	e0bffc17 	ldw	r2,-16(fp)
   211e4:	10c20e04 	addi	r3,r2,2104
   211e8:	e0bff917 	ldw	r2,-28(fp)
   211ec:	1885883a 	add	r2,r3,r2
   211f0:	e1bff617 	ldw	r6,-40(fp)
   211f4:	e17ffd17 	ldw	r5,-12(fp)
   211f8:	1009883a 	mov	r4,r2
   211fc:	00225540 	call	22554 <memcpy>
      ptr   += n;
   21200:	e0fffd17 	ldw	r3,-12(fp)
   21204:	e0bff617 	ldw	r2,-40(fp)
   21208:	1885883a 	add	r2,r3,r2
   2120c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   21210:	e0fffe17 	ldw	r3,-8(fp)
   21214:	e0bff617 	ldw	r2,-40(fp)
   21218:	1885c83a 	sub	r2,r3,r2
   2121c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   21220:	e0fff917 	ldw	r3,-28(fp)
   21224:	e0bff617 	ldw	r2,-40(fp)
   21228:	1885883a 	add	r2,r3,r2
   2122c:	10c1ffcc 	andi	r3,r2,2047
   21230:	e0bffc17 	ldw	r2,-16(fp)
   21234:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   21238:	e0bffe17 	ldw	r2,-8(fp)
   2123c:	00bfc716 	blt	zero,r2,2115c <__alt_data_end+0xfffe115c>
   21240:	00000106 	br	21248 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   21244:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21248:	0005303a 	rdctl	r2,status
   2124c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21250:	e0fffb17 	ldw	r3,-20(fp)
   21254:	00bfff84 	movi	r2,-2
   21258:	1884703a 	and	r2,r3,r2
   2125c:	1001703a 	wrctl	status,r2
  
  return context;
   21260:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   21264:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   21268:	e0bffc17 	ldw	r2,-16(fp)
   2126c:	10800817 	ldw	r2,32(r2)
   21270:	10c00094 	ori	r3,r2,2
   21274:	e0bffc17 	ldw	r2,-16(fp)
   21278:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2127c:	e0bffc17 	ldw	r2,-16(fp)
   21280:	10800017 	ldw	r2,0(r2)
   21284:	10800104 	addi	r2,r2,4
   21288:	1007883a 	mov	r3,r2
   2128c:	e0bffc17 	ldw	r2,-16(fp)
   21290:	10800817 	ldw	r2,32(r2)
   21294:	18800035 	stwio	r2,0(r3)
   21298:	e0bffa17 	ldw	r2,-24(fp)
   2129c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   212a0:	e0bff817 	ldw	r2,-32(fp)
   212a4:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   212a8:	e0bffe17 	ldw	r2,-8(fp)
   212ac:	0080100e 	bge	zero,r2,212f0 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   212b0:	e0bfff17 	ldw	r2,-4(fp)
   212b4:	1090000c 	andi	r2,r2,16384
   212b8:	1000101e 	bne	r2,zero,212fc <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   212bc:	0001883a 	nop
   212c0:	e0bffc17 	ldw	r2,-16(fp)
   212c4:	10c00d17 	ldw	r3,52(r2)
   212c8:	e0bff517 	ldw	r2,-44(fp)
   212cc:	1880051e 	bne	r3,r2,212e4 <altera_avalon_jtag_uart_write+0x1b8>
   212d0:	e0bffc17 	ldw	r2,-16(fp)
   212d4:	10c00917 	ldw	r3,36(r2)
   212d8:	e0bffc17 	ldw	r2,-16(fp)
   212dc:	10800117 	ldw	r2,4(r2)
   212e0:	18bff736 	bltu	r3,r2,212c0 <__alt_data_end+0xfffe12c0>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   212e4:	e0bffc17 	ldw	r2,-16(fp)
   212e8:	10800917 	ldw	r2,36(r2)
   212ec:	1000051e 	bne	r2,zero,21304 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   212f0:	e0bffe17 	ldw	r2,-8(fp)
   212f4:	00bfd016 	blt	zero,r2,21238 <__alt_data_end+0xfffe1238>
   212f8:	00000306 	br	21308 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   212fc:	0001883a 	nop
   21300:	00000106 	br	21308 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   21304:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   21308:	e0fffd17 	ldw	r3,-12(fp)
   2130c:	e0bff717 	ldw	r2,-36(fp)
   21310:	18800426 	beq	r3,r2,21324 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   21314:	e0fffd17 	ldw	r3,-12(fp)
   21318:	e0bff717 	ldw	r2,-36(fp)
   2131c:	1885c83a 	sub	r2,r3,r2
   21320:	00000606 	br	2133c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   21324:	e0bfff17 	ldw	r2,-4(fp)
   21328:	1090000c 	andi	r2,r2,16384
   2132c:	10000226 	beq	r2,zero,21338 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   21330:	00bffd44 	movi	r2,-11
   21334:	00000106 	br	2133c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   21338:	00bffec4 	movi	r2,-5
}
   2133c:	e037883a 	mov	sp,fp
   21340:	dfc00117 	ldw	ra,4(sp)
   21344:	df000017 	ldw	fp,0(sp)
   21348:	dec00204 	addi	sp,sp,8
   2134c:	f800283a 	ret

00021350 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   21350:	defffa04 	addi	sp,sp,-24
   21354:	dfc00515 	stw	ra,20(sp)
   21358:	df000415 	stw	fp,16(sp)
   2135c:	df000404 	addi	fp,sp,16
   21360:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   21364:	0007883a 	mov	r3,zero
   21368:	e0bfff17 	ldw	r2,-4(fp)
   2136c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   21370:	e0bfff17 	ldw	r2,-4(fp)
   21374:	10800104 	addi	r2,r2,4
   21378:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2137c:	0005303a 	rdctl	r2,status
   21380:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21384:	e0fffd17 	ldw	r3,-12(fp)
   21388:	00bfff84 	movi	r2,-2
   2138c:	1884703a 	and	r2,r3,r2
   21390:	1001703a 	wrctl	status,r2
  
  return context;
   21394:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   21398:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   2139c:	0021ff80 	call	21ff8 <alt_tick>
   213a0:	e0bffc17 	ldw	r2,-16(fp)
   213a4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   213a8:	e0bffe17 	ldw	r2,-8(fp)
   213ac:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   213b0:	0001883a 	nop
   213b4:	e037883a 	mov	sp,fp
   213b8:	dfc00117 	ldw	ra,4(sp)
   213bc:	df000017 	ldw	fp,0(sp)
   213c0:	dec00204 	addi	sp,sp,8
   213c4:	f800283a 	ret

000213c8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   213c8:	defff804 	addi	sp,sp,-32
   213cc:	dfc00715 	stw	ra,28(sp)
   213d0:	df000615 	stw	fp,24(sp)
   213d4:	df000604 	addi	fp,sp,24
   213d8:	e13ffc15 	stw	r4,-16(fp)
   213dc:	e17ffd15 	stw	r5,-12(fp)
   213e0:	e1bffe15 	stw	r6,-8(fp)
   213e4:	e1ffff15 	stw	r7,-4(fp)
   213e8:	e0bfff17 	ldw	r2,-4(fp)
   213ec:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   213f0:	d0a6ad17 	ldw	r2,-25932(gp)
   213f4:	1000021e 	bne	r2,zero,21400 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   213f8:	e0bffb17 	ldw	r2,-20(fp)
   213fc:	d0a6ad15 	stw	r2,-25932(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   21400:	e0bffc17 	ldw	r2,-16(fp)
   21404:	10800104 	addi	r2,r2,4
   21408:	00c001c4 	movi	r3,7
   2140c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   21410:	d8000015 	stw	zero,0(sp)
   21414:	e1fffc17 	ldw	r7,-16(fp)
   21418:	018000b4 	movhi	r6,2
   2141c:	3184d404 	addi	r6,r6,4944
   21420:	e17ffe17 	ldw	r5,-8(fp)
   21424:	e13ffd17 	ldw	r4,-12(fp)
   21428:	00218c40 	call	218c4 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   2142c:	0001883a 	nop
   21430:	e037883a 	mov	sp,fp
   21434:	dfc00117 	ldw	ra,4(sp)
   21438:	df000017 	ldw	fp,0(sp)
   2143c:	dec00204 	addi	sp,sp,8
   21440:	f800283a 	ret

00021444 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   21444:	defff504 	addi	sp,sp,-44
   21448:	df000a15 	stw	fp,40(sp)
   2144c:	df000a04 	addi	fp,sp,40
   21450:	e13ffc15 	stw	r4,-16(fp)
   21454:	e17ffd15 	stw	r5,-12(fp)
   21458:	e1bffe15 	stw	r6,-8(fp)
   2145c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   21460:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   21464:	d0a6ad17 	ldw	r2,-25932(gp)
  
  if (alt_ticks_per_second ())
   21468:	10003c26 	beq	r2,zero,2155c <alt_alarm_start+0x118>
  {
    if (alarm)
   2146c:	e0bffc17 	ldw	r2,-16(fp)
   21470:	10003826 	beq	r2,zero,21554 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   21474:	e0bffc17 	ldw	r2,-16(fp)
   21478:	e0fffe17 	ldw	r3,-8(fp)
   2147c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   21480:	e0bffc17 	ldw	r2,-16(fp)
   21484:	e0ffff17 	ldw	r3,-4(fp)
   21488:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2148c:	0005303a 	rdctl	r2,status
   21490:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21494:	e0fff917 	ldw	r3,-28(fp)
   21498:	00bfff84 	movi	r2,-2
   2149c:	1884703a 	and	r2,r3,r2
   214a0:	1001703a 	wrctl	status,r2
  
  return context;
   214a4:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   214a8:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   214ac:	d0a6ae17 	ldw	r2,-25928(gp)
      
      current_nticks = alt_nticks();
   214b0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   214b4:	e0fffd17 	ldw	r3,-12(fp)
   214b8:	e0bff617 	ldw	r2,-40(fp)
   214bc:	1885883a 	add	r2,r3,r2
   214c0:	10c00044 	addi	r3,r2,1
   214c4:	e0bffc17 	ldw	r2,-16(fp)
   214c8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   214cc:	e0bffc17 	ldw	r2,-16(fp)
   214d0:	10c00217 	ldw	r3,8(r2)
   214d4:	e0bff617 	ldw	r2,-40(fp)
   214d8:	1880042e 	bgeu	r3,r2,214ec <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   214dc:	e0bffc17 	ldw	r2,-16(fp)
   214e0:	00c00044 	movi	r3,1
   214e4:	10c00405 	stb	r3,16(r2)
   214e8:	00000206 	br	214f4 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   214ec:	e0bffc17 	ldw	r2,-16(fp)
   214f0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   214f4:	e0bffc17 	ldw	r2,-16(fp)
   214f8:	d0e00704 	addi	r3,gp,-32740
   214fc:	e0fffa15 	stw	r3,-24(fp)
   21500:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   21504:	e0bffb17 	ldw	r2,-20(fp)
   21508:	e0fffa17 	ldw	r3,-24(fp)
   2150c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   21510:	e0bffa17 	ldw	r2,-24(fp)
   21514:	10c00017 	ldw	r3,0(r2)
   21518:	e0bffb17 	ldw	r2,-20(fp)
   2151c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   21520:	e0bffa17 	ldw	r2,-24(fp)
   21524:	10800017 	ldw	r2,0(r2)
   21528:	e0fffb17 	ldw	r3,-20(fp)
   2152c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   21530:	e0bffa17 	ldw	r2,-24(fp)
   21534:	e0fffb17 	ldw	r3,-20(fp)
   21538:	10c00015 	stw	r3,0(r2)
   2153c:	e0bff817 	ldw	r2,-32(fp)
   21540:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21544:	e0bff717 	ldw	r2,-36(fp)
   21548:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   2154c:	0005883a 	mov	r2,zero
   21550:	00000306 	br	21560 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   21554:	00bffa84 	movi	r2,-22
   21558:	00000106 	br	21560 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   2155c:	00bfde84 	movi	r2,-134
  }
}
   21560:	e037883a 	mov	sp,fp
   21564:	df000017 	ldw	fp,0(sp)
   21568:	dec00104 	addi	sp,sp,4
   2156c:	f800283a 	ret

00021570 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   21570:	defffe04 	addi	sp,sp,-8
   21574:	dfc00115 	stw	ra,4(sp)
   21578:	df000015 	stw	fp,0(sp)
   2157c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   21580:	d0a00517 	ldw	r2,-32748(gp)
   21584:	10000326 	beq	r2,zero,21594 <alt_get_errno+0x24>
   21588:	d0a00517 	ldw	r2,-32748(gp)
   2158c:	103ee83a 	callr	r2
   21590:	00000106 	br	21598 <alt_get_errno+0x28>
   21594:	d0a6b004 	addi	r2,gp,-25920
}
   21598:	e037883a 	mov	sp,fp
   2159c:	dfc00117 	ldw	ra,4(sp)
   215a0:	df000017 	ldw	fp,0(sp)
   215a4:	dec00204 	addi	sp,sp,8
   215a8:	f800283a 	ret

000215ac <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   215ac:	defffb04 	addi	sp,sp,-20
   215b0:	dfc00415 	stw	ra,16(sp)
   215b4:	df000315 	stw	fp,12(sp)
   215b8:	df000304 	addi	fp,sp,12
   215bc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   215c0:	e0bfff17 	ldw	r2,-4(fp)
   215c4:	10000616 	blt	r2,zero,215e0 <close+0x34>
   215c8:	e0bfff17 	ldw	r2,-4(fp)
   215cc:	10c00324 	muli	r3,r2,12
   215d0:	008000b4 	movhi	r2,2
   215d4:	10986c04 	addi	r2,r2,25008
   215d8:	1885883a 	add	r2,r3,r2
   215dc:	00000106 	br	215e4 <close+0x38>
   215e0:	0005883a 	mov	r2,zero
   215e4:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   215e8:	e0bffd17 	ldw	r2,-12(fp)
   215ec:	10001926 	beq	r2,zero,21654 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   215f0:	e0bffd17 	ldw	r2,-12(fp)
   215f4:	10800017 	ldw	r2,0(r2)
   215f8:	10800417 	ldw	r2,16(r2)
   215fc:	10000626 	beq	r2,zero,21618 <close+0x6c>
   21600:	e0bffd17 	ldw	r2,-12(fp)
   21604:	10800017 	ldw	r2,0(r2)
   21608:	10800417 	ldw	r2,16(r2)
   2160c:	e13ffd17 	ldw	r4,-12(fp)
   21610:	103ee83a 	callr	r2
   21614:	00000106 	br	2161c <close+0x70>
   21618:	0005883a 	mov	r2,zero
   2161c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   21620:	e13fff17 	ldw	r4,-4(fp)
   21624:	0021ef80 	call	21ef8 <alt_release_fd>
    if (rval < 0)
   21628:	e0bffe17 	ldw	r2,-8(fp)
   2162c:	1000070e 	bge	r2,zero,2164c <close+0xa0>
    {
      ALT_ERRNO = -rval;
   21630:	00215700 	call	21570 <alt_get_errno>
   21634:	1007883a 	mov	r3,r2
   21638:	e0bffe17 	ldw	r2,-8(fp)
   2163c:	0085c83a 	sub	r2,zero,r2
   21640:	18800015 	stw	r2,0(r3)
      return -1;
   21644:	00bfffc4 	movi	r2,-1
   21648:	00000706 	br	21668 <close+0xbc>
    }
    return 0;
   2164c:	0005883a 	mov	r2,zero
   21650:	00000506 	br	21668 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   21654:	00215700 	call	21570 <alt_get_errno>
   21658:	1007883a 	mov	r3,r2
   2165c:	00801444 	movi	r2,81
   21660:	18800015 	stw	r2,0(r3)
    return -1;
   21664:	00bfffc4 	movi	r2,-1
  }
}
   21668:	e037883a 	mov	sp,fp
   2166c:	dfc00117 	ldw	ra,4(sp)
   21670:	df000017 	ldw	fp,0(sp)
   21674:	dec00204 	addi	sp,sp,8
   21678:	f800283a 	ret

0002167c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   2167c:	defffe04 	addi	sp,sp,-8
   21680:	df000115 	stw	fp,4(sp)
   21684:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   21688:	e03fff15 	stw	zero,-4(fp)
   2168c:	00000506 	br	216a4 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   21690:	e0bfff17 	ldw	r2,-4(fp)
   21694:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   21698:	e0bfff17 	ldw	r2,-4(fp)
   2169c:	10800804 	addi	r2,r2,32
   216a0:	e0bfff15 	stw	r2,-4(fp)
   216a4:	e0bfff17 	ldw	r2,-4(fp)
   216a8:	10820030 	cmpltui	r2,r2,2048
   216ac:	103ff81e 	bne	r2,zero,21690 <__alt_data_end+0xfffe1690>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   216b0:	0001883a 	nop
   216b4:	e037883a 	mov	sp,fp
   216b8:	df000017 	ldw	fp,0(sp)
   216bc:	dec00104 	addi	sp,sp,4
   216c0:	f800283a 	ret

000216c4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   216c4:	defffc04 	addi	sp,sp,-16
   216c8:	df000315 	stw	fp,12(sp)
   216cc:	df000304 	addi	fp,sp,12
   216d0:	e13ffd15 	stw	r4,-12(fp)
   216d4:	e17ffe15 	stw	r5,-8(fp)
   216d8:	e1bfff15 	stw	r6,-4(fp)
  return len;
   216dc:	e0bfff17 	ldw	r2,-4(fp)
}
   216e0:	e037883a 	mov	sp,fp
   216e4:	df000017 	ldw	fp,0(sp)
   216e8:	dec00104 	addi	sp,sp,4
   216ec:	f800283a 	ret

000216f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   216f0:	defffe04 	addi	sp,sp,-8
   216f4:	dfc00115 	stw	ra,4(sp)
   216f8:	df000015 	stw	fp,0(sp)
   216fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   21700:	d0a00517 	ldw	r2,-32748(gp)
   21704:	10000326 	beq	r2,zero,21714 <alt_get_errno+0x24>
   21708:	d0a00517 	ldw	r2,-32748(gp)
   2170c:	103ee83a 	callr	r2
   21710:	00000106 	br	21718 <alt_get_errno+0x28>
   21714:	d0a6b004 	addi	r2,gp,-25920
}
   21718:	e037883a 	mov	sp,fp
   2171c:	dfc00117 	ldw	ra,4(sp)
   21720:	df000017 	ldw	fp,0(sp)
   21724:	dec00204 	addi	sp,sp,8
   21728:	f800283a 	ret

0002172c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   2172c:	defffa04 	addi	sp,sp,-24
   21730:	dfc00515 	stw	ra,20(sp)
   21734:	df000415 	stw	fp,16(sp)
   21738:	df000404 	addi	fp,sp,16
   2173c:	e13ffe15 	stw	r4,-8(fp)
   21740:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   21744:	e0bffe17 	ldw	r2,-8(fp)
   21748:	10000326 	beq	r2,zero,21758 <alt_dev_llist_insert+0x2c>
   2174c:	e0bffe17 	ldw	r2,-8(fp)
   21750:	10800217 	ldw	r2,8(r2)
   21754:	1000061e 	bne	r2,zero,21770 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   21758:	00216f00 	call	216f0 <alt_get_errno>
   2175c:	1007883a 	mov	r3,r2
   21760:	00800584 	movi	r2,22
   21764:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   21768:	00bffa84 	movi	r2,-22
   2176c:	00001306 	br	217bc <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   21770:	e0bffe17 	ldw	r2,-8(fp)
   21774:	e0ffff17 	ldw	r3,-4(fp)
   21778:	e0fffc15 	stw	r3,-16(fp)
   2177c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   21780:	e0bffd17 	ldw	r2,-12(fp)
   21784:	e0fffc17 	ldw	r3,-16(fp)
   21788:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   2178c:	e0bffc17 	ldw	r2,-16(fp)
   21790:	10c00017 	ldw	r3,0(r2)
   21794:	e0bffd17 	ldw	r2,-12(fp)
   21798:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   2179c:	e0bffc17 	ldw	r2,-16(fp)
   217a0:	10800017 	ldw	r2,0(r2)
   217a4:	e0fffd17 	ldw	r3,-12(fp)
   217a8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   217ac:	e0bffc17 	ldw	r2,-16(fp)
   217b0:	e0fffd17 	ldw	r3,-12(fp)
   217b4:	10c00015 	stw	r3,0(r2)

  return 0;  
   217b8:	0005883a 	mov	r2,zero
}
   217bc:	e037883a 	mov	sp,fp
   217c0:	dfc00117 	ldw	ra,4(sp)
   217c4:	df000017 	ldw	fp,0(sp)
   217c8:	dec00204 	addi	sp,sp,8
   217cc:	f800283a 	ret

000217d0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   217d0:	defffd04 	addi	sp,sp,-12
   217d4:	dfc00215 	stw	ra,8(sp)
   217d8:	df000115 	stw	fp,4(sp)
   217dc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   217e0:	008000b4 	movhi	r2,2
   217e4:	1093ff04 	addi	r2,r2,20476
   217e8:	e0bfff15 	stw	r2,-4(fp)
   217ec:	00000606 	br	21808 <_do_ctors+0x38>
        (*ctor) (); 
   217f0:	e0bfff17 	ldw	r2,-4(fp)
   217f4:	10800017 	ldw	r2,0(r2)
   217f8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   217fc:	e0bfff17 	ldw	r2,-4(fp)
   21800:	10bfff04 	addi	r2,r2,-4
   21804:	e0bfff15 	stw	r2,-4(fp)
   21808:	e0ffff17 	ldw	r3,-4(fp)
   2180c:	008000b4 	movhi	r2,2
   21810:	10940004 	addi	r2,r2,20480
   21814:	18bff62e 	bgeu	r3,r2,217f0 <__alt_data_end+0xfffe17f0>
        (*ctor) (); 
}
   21818:	0001883a 	nop
   2181c:	e037883a 	mov	sp,fp
   21820:	dfc00117 	ldw	ra,4(sp)
   21824:	df000017 	ldw	fp,0(sp)
   21828:	dec00204 	addi	sp,sp,8
   2182c:	f800283a 	ret

00021830 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   21830:	defffd04 	addi	sp,sp,-12
   21834:	dfc00215 	stw	ra,8(sp)
   21838:	df000115 	stw	fp,4(sp)
   2183c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   21840:	008000b4 	movhi	r2,2
   21844:	1093ff04 	addi	r2,r2,20476
   21848:	e0bfff15 	stw	r2,-4(fp)
   2184c:	00000606 	br	21868 <_do_dtors+0x38>
        (*dtor) (); 
   21850:	e0bfff17 	ldw	r2,-4(fp)
   21854:	10800017 	ldw	r2,0(r2)
   21858:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   2185c:	e0bfff17 	ldw	r2,-4(fp)
   21860:	10bfff04 	addi	r2,r2,-4
   21864:	e0bfff15 	stw	r2,-4(fp)
   21868:	e0ffff17 	ldw	r3,-4(fp)
   2186c:	008000b4 	movhi	r2,2
   21870:	10940004 	addi	r2,r2,20480
   21874:	18bff62e 	bgeu	r3,r2,21850 <__alt_data_end+0xfffe1850>
        (*dtor) (); 
}
   21878:	0001883a 	nop
   2187c:	e037883a 	mov	sp,fp
   21880:	dfc00117 	ldw	ra,4(sp)
   21884:	df000017 	ldw	fp,0(sp)
   21888:	dec00204 	addi	sp,sp,8
   2188c:	f800283a 	ret

00021890 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   21890:	defffe04 	addi	sp,sp,-8
   21894:	dfc00115 	stw	ra,4(sp)
   21898:	df000015 	stw	fp,0(sp)
   2189c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   218a0:	01440004 	movi	r5,4096
   218a4:	0009883a 	mov	r4,zero
   218a8:	00223600 	call	22360 <alt_icache_flush>
#endif
}
   218ac:	0001883a 	nop
   218b0:	e037883a 	mov	sp,fp
   218b4:	dfc00117 	ldw	ra,4(sp)
   218b8:	df000017 	ldw	fp,0(sp)
   218bc:	dec00204 	addi	sp,sp,8
   218c0:	f800283a 	ret

000218c4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   218c4:	defff904 	addi	sp,sp,-28
   218c8:	dfc00615 	stw	ra,24(sp)
   218cc:	df000515 	stw	fp,20(sp)
   218d0:	df000504 	addi	fp,sp,20
   218d4:	e13ffc15 	stw	r4,-16(fp)
   218d8:	e17ffd15 	stw	r5,-12(fp)
   218dc:	e1bffe15 	stw	r6,-8(fp)
   218e0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   218e4:	e0800217 	ldw	r2,8(fp)
   218e8:	d8800015 	stw	r2,0(sp)
   218ec:	e1ffff17 	ldw	r7,-4(fp)
   218f0:	e1bffe17 	ldw	r6,-8(fp)
   218f4:	e17ffd17 	ldw	r5,-12(fp)
   218f8:	e13ffc17 	ldw	r4,-16(fp)
   218fc:	0021a740 	call	21a74 <alt_iic_isr_register>
}  
   21900:	e037883a 	mov	sp,fp
   21904:	dfc00117 	ldw	ra,4(sp)
   21908:	df000017 	ldw	fp,0(sp)
   2190c:	dec00204 	addi	sp,sp,8
   21910:	f800283a 	ret

00021914 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   21914:	defff904 	addi	sp,sp,-28
   21918:	df000615 	stw	fp,24(sp)
   2191c:	df000604 	addi	fp,sp,24
   21920:	e13ffe15 	stw	r4,-8(fp)
   21924:	e17fff15 	stw	r5,-4(fp)
   21928:	e0bfff17 	ldw	r2,-4(fp)
   2192c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21930:	0005303a 	rdctl	r2,status
   21934:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21938:	e0fffb17 	ldw	r3,-20(fp)
   2193c:	00bfff84 	movi	r2,-2
   21940:	1884703a 	and	r2,r3,r2
   21944:	1001703a 	wrctl	status,r2
  
  return context;
   21948:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   2194c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   21950:	00c00044 	movi	r3,1
   21954:	e0bffa17 	ldw	r2,-24(fp)
   21958:	1884983a 	sll	r2,r3,r2
   2195c:	1007883a 	mov	r3,r2
   21960:	d0a6ac17 	ldw	r2,-25936(gp)
   21964:	1884b03a 	or	r2,r3,r2
   21968:	d0a6ac15 	stw	r2,-25936(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   2196c:	d0a6ac17 	ldw	r2,-25936(gp)
   21970:	100170fa 	wrctl	ienable,r2
   21974:	e0bffc17 	ldw	r2,-16(fp)
   21978:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2197c:	e0bffd17 	ldw	r2,-12(fp)
   21980:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   21984:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   21988:	0001883a 	nop
}
   2198c:	e037883a 	mov	sp,fp
   21990:	df000017 	ldw	fp,0(sp)
   21994:	dec00104 	addi	sp,sp,4
   21998:	f800283a 	ret

0002199c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   2199c:	defff904 	addi	sp,sp,-28
   219a0:	df000615 	stw	fp,24(sp)
   219a4:	df000604 	addi	fp,sp,24
   219a8:	e13ffe15 	stw	r4,-8(fp)
   219ac:	e17fff15 	stw	r5,-4(fp)
   219b0:	e0bfff17 	ldw	r2,-4(fp)
   219b4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   219b8:	0005303a 	rdctl	r2,status
   219bc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   219c0:	e0fffb17 	ldw	r3,-20(fp)
   219c4:	00bfff84 	movi	r2,-2
   219c8:	1884703a 	and	r2,r3,r2
   219cc:	1001703a 	wrctl	status,r2
  
  return context;
   219d0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   219d4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   219d8:	00c00044 	movi	r3,1
   219dc:	e0bffa17 	ldw	r2,-24(fp)
   219e0:	1884983a 	sll	r2,r3,r2
   219e4:	0084303a 	nor	r2,zero,r2
   219e8:	1007883a 	mov	r3,r2
   219ec:	d0a6ac17 	ldw	r2,-25936(gp)
   219f0:	1884703a 	and	r2,r3,r2
   219f4:	d0a6ac15 	stw	r2,-25936(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   219f8:	d0a6ac17 	ldw	r2,-25936(gp)
   219fc:	100170fa 	wrctl	ienable,r2
   21a00:	e0bffc17 	ldw	r2,-16(fp)
   21a04:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21a08:	e0bffd17 	ldw	r2,-12(fp)
   21a0c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   21a10:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   21a14:	0001883a 	nop
}
   21a18:	e037883a 	mov	sp,fp
   21a1c:	df000017 	ldw	fp,0(sp)
   21a20:	dec00104 	addi	sp,sp,4
   21a24:	f800283a 	ret

00021a28 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   21a28:	defffc04 	addi	sp,sp,-16
   21a2c:	df000315 	stw	fp,12(sp)
   21a30:	df000304 	addi	fp,sp,12
   21a34:	e13ffe15 	stw	r4,-8(fp)
   21a38:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   21a3c:	000530fa 	rdctl	r2,ienable
   21a40:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   21a44:	00c00044 	movi	r3,1
   21a48:	e0bfff17 	ldw	r2,-4(fp)
   21a4c:	1884983a 	sll	r2,r3,r2
   21a50:	1007883a 	mov	r3,r2
   21a54:	e0bffd17 	ldw	r2,-12(fp)
   21a58:	1884703a 	and	r2,r3,r2
   21a5c:	1004c03a 	cmpne	r2,r2,zero
   21a60:	10803fcc 	andi	r2,r2,255
}
   21a64:	e037883a 	mov	sp,fp
   21a68:	df000017 	ldw	fp,0(sp)
   21a6c:	dec00104 	addi	sp,sp,4
   21a70:	f800283a 	ret

00021a74 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   21a74:	defff504 	addi	sp,sp,-44
   21a78:	dfc00a15 	stw	ra,40(sp)
   21a7c:	df000915 	stw	fp,36(sp)
   21a80:	df000904 	addi	fp,sp,36
   21a84:	e13ffc15 	stw	r4,-16(fp)
   21a88:	e17ffd15 	stw	r5,-12(fp)
   21a8c:	e1bffe15 	stw	r6,-8(fp)
   21a90:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   21a94:	00bffa84 	movi	r2,-22
   21a98:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   21a9c:	e0bffd17 	ldw	r2,-12(fp)
   21aa0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   21aa4:	e0bff817 	ldw	r2,-32(fp)
   21aa8:	10800808 	cmpgei	r2,r2,32
   21aac:	1000271e 	bne	r2,zero,21b4c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21ab0:	0005303a 	rdctl	r2,status
   21ab4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21ab8:	e0fffb17 	ldw	r3,-20(fp)
   21abc:	00bfff84 	movi	r2,-2
   21ac0:	1884703a 	and	r2,r3,r2
   21ac4:	1001703a 	wrctl	status,r2
  
  return context;
   21ac8:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   21acc:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   21ad0:	008000f4 	movhi	r2,3
   21ad4:	10a19504 	addi	r2,r2,-31148
   21ad8:	e0fff817 	ldw	r3,-32(fp)
   21adc:	180690fa 	slli	r3,r3,3
   21ae0:	10c5883a 	add	r2,r2,r3
   21ae4:	e0fffe17 	ldw	r3,-8(fp)
   21ae8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   21aec:	008000f4 	movhi	r2,3
   21af0:	10a19504 	addi	r2,r2,-31148
   21af4:	e0fff817 	ldw	r3,-32(fp)
   21af8:	180690fa 	slli	r3,r3,3
   21afc:	10c5883a 	add	r2,r2,r3
   21b00:	10800104 	addi	r2,r2,4
   21b04:	e0ffff17 	ldw	r3,-4(fp)
   21b08:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   21b0c:	e0bffe17 	ldw	r2,-8(fp)
   21b10:	10000526 	beq	r2,zero,21b28 <alt_iic_isr_register+0xb4>
   21b14:	e0bff817 	ldw	r2,-32(fp)
   21b18:	100b883a 	mov	r5,r2
   21b1c:	e13ffc17 	ldw	r4,-16(fp)
   21b20:	00219140 	call	21914 <alt_ic_irq_enable>
   21b24:	00000406 	br	21b38 <alt_iic_isr_register+0xc4>
   21b28:	e0bff817 	ldw	r2,-32(fp)
   21b2c:	100b883a 	mov	r5,r2
   21b30:	e13ffc17 	ldw	r4,-16(fp)
   21b34:	002199c0 	call	2199c <alt_ic_irq_disable>
   21b38:	e0bff715 	stw	r2,-36(fp)
   21b3c:	e0bffa17 	ldw	r2,-24(fp)
   21b40:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21b44:	e0bff917 	ldw	r2,-28(fp)
   21b48:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   21b4c:	e0bff717 	ldw	r2,-36(fp)
}
   21b50:	e037883a 	mov	sp,fp
   21b54:	dfc00117 	ldw	ra,4(sp)
   21b58:	df000017 	ldw	fp,0(sp)
   21b5c:	dec00204 	addi	sp,sp,8
   21b60:	f800283a 	ret

00021b64 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   21b64:	defff904 	addi	sp,sp,-28
   21b68:	dfc00615 	stw	ra,24(sp)
   21b6c:	df000515 	stw	fp,20(sp)
   21b70:	df000504 	addi	fp,sp,20
   21b74:	e13ffc15 	stw	r4,-16(fp)
   21b78:	e17ffd15 	stw	r5,-12(fp)
   21b7c:	e1bffe15 	stw	r6,-8(fp)
   21b80:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   21b84:	e1bfff17 	ldw	r6,-4(fp)
   21b88:	e17ffe17 	ldw	r5,-8(fp)
   21b8c:	e13ffd17 	ldw	r4,-12(fp)
   21b90:	0021da40 	call	21da4 <open>
   21b94:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   21b98:	e0bffb17 	ldw	r2,-20(fp)
   21b9c:	10001c16 	blt	r2,zero,21c10 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   21ba0:	008000b4 	movhi	r2,2
   21ba4:	10986c04 	addi	r2,r2,25008
   21ba8:	e0fffb17 	ldw	r3,-20(fp)
   21bac:	18c00324 	muli	r3,r3,12
   21bb0:	10c5883a 	add	r2,r2,r3
   21bb4:	10c00017 	ldw	r3,0(r2)
   21bb8:	e0bffc17 	ldw	r2,-16(fp)
   21bbc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   21bc0:	008000b4 	movhi	r2,2
   21bc4:	10986c04 	addi	r2,r2,25008
   21bc8:	e0fffb17 	ldw	r3,-20(fp)
   21bcc:	18c00324 	muli	r3,r3,12
   21bd0:	10c5883a 	add	r2,r2,r3
   21bd4:	10800104 	addi	r2,r2,4
   21bd8:	10c00017 	ldw	r3,0(r2)
   21bdc:	e0bffc17 	ldw	r2,-16(fp)
   21be0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   21be4:	008000b4 	movhi	r2,2
   21be8:	10986c04 	addi	r2,r2,25008
   21bec:	e0fffb17 	ldw	r3,-20(fp)
   21bf0:	18c00324 	muli	r3,r3,12
   21bf4:	10c5883a 	add	r2,r2,r3
   21bf8:	10800204 	addi	r2,r2,8
   21bfc:	10c00017 	ldw	r3,0(r2)
   21c00:	e0bffc17 	ldw	r2,-16(fp)
   21c04:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   21c08:	e13ffb17 	ldw	r4,-20(fp)
   21c0c:	0021ef80 	call	21ef8 <alt_release_fd>
  }
} 
   21c10:	0001883a 	nop
   21c14:	e037883a 	mov	sp,fp
   21c18:	dfc00117 	ldw	ra,4(sp)
   21c1c:	df000017 	ldw	fp,0(sp)
   21c20:	dec00204 	addi	sp,sp,8
   21c24:	f800283a 	ret

00021c28 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   21c28:	defffb04 	addi	sp,sp,-20
   21c2c:	dfc00415 	stw	ra,16(sp)
   21c30:	df000315 	stw	fp,12(sp)
   21c34:	df000304 	addi	fp,sp,12
   21c38:	e13ffd15 	stw	r4,-12(fp)
   21c3c:	e17ffe15 	stw	r5,-8(fp)
   21c40:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   21c44:	01c07fc4 	movi	r7,511
   21c48:	01800044 	movi	r6,1
   21c4c:	e17ffd17 	ldw	r5,-12(fp)
   21c50:	010000b4 	movhi	r4,2
   21c54:	21186f04 	addi	r4,r4,25020
   21c58:	0021b640 	call	21b64 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   21c5c:	01c07fc4 	movi	r7,511
   21c60:	000d883a 	mov	r6,zero
   21c64:	e17ffe17 	ldw	r5,-8(fp)
   21c68:	010000b4 	movhi	r4,2
   21c6c:	21186c04 	addi	r4,r4,25008
   21c70:	0021b640 	call	21b64 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   21c74:	01c07fc4 	movi	r7,511
   21c78:	01800044 	movi	r6,1
   21c7c:	e17fff17 	ldw	r5,-4(fp)
   21c80:	010000b4 	movhi	r4,2
   21c84:	21187204 	addi	r4,r4,25032
   21c88:	0021b640 	call	21b64 <alt_open_fd>
}  
   21c8c:	0001883a 	nop
   21c90:	e037883a 	mov	sp,fp
   21c94:	dfc00117 	ldw	ra,4(sp)
   21c98:	df000017 	ldw	fp,0(sp)
   21c9c:	dec00204 	addi	sp,sp,8
   21ca0:	f800283a 	ret

00021ca4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   21ca4:	defffe04 	addi	sp,sp,-8
   21ca8:	dfc00115 	stw	ra,4(sp)
   21cac:	df000015 	stw	fp,0(sp)
   21cb0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   21cb4:	d0a00517 	ldw	r2,-32748(gp)
   21cb8:	10000326 	beq	r2,zero,21cc8 <alt_get_errno+0x24>
   21cbc:	d0a00517 	ldw	r2,-32748(gp)
   21cc0:	103ee83a 	callr	r2
   21cc4:	00000106 	br	21ccc <alt_get_errno+0x28>
   21cc8:	d0a6b004 	addi	r2,gp,-25920
}
   21ccc:	e037883a 	mov	sp,fp
   21cd0:	dfc00117 	ldw	ra,4(sp)
   21cd4:	df000017 	ldw	fp,0(sp)
   21cd8:	dec00204 	addi	sp,sp,8
   21cdc:	f800283a 	ret

00021ce0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   21ce0:	defffd04 	addi	sp,sp,-12
   21ce4:	df000215 	stw	fp,8(sp)
   21ce8:	df000204 	addi	fp,sp,8
   21cec:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   21cf0:	e0bfff17 	ldw	r2,-4(fp)
   21cf4:	10800217 	ldw	r2,8(r2)
   21cf8:	10d00034 	orhi	r3,r2,16384
   21cfc:	e0bfff17 	ldw	r2,-4(fp)
   21d00:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   21d04:	e03ffe15 	stw	zero,-8(fp)
   21d08:	00001d06 	br	21d80 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   21d0c:	008000b4 	movhi	r2,2
   21d10:	10986c04 	addi	r2,r2,25008
   21d14:	e0fffe17 	ldw	r3,-8(fp)
   21d18:	18c00324 	muli	r3,r3,12
   21d1c:	10c5883a 	add	r2,r2,r3
   21d20:	10c00017 	ldw	r3,0(r2)
   21d24:	e0bfff17 	ldw	r2,-4(fp)
   21d28:	10800017 	ldw	r2,0(r2)
   21d2c:	1880111e 	bne	r3,r2,21d74 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   21d30:	008000b4 	movhi	r2,2
   21d34:	10986c04 	addi	r2,r2,25008
   21d38:	e0fffe17 	ldw	r3,-8(fp)
   21d3c:	18c00324 	muli	r3,r3,12
   21d40:	10c5883a 	add	r2,r2,r3
   21d44:	10800204 	addi	r2,r2,8
   21d48:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   21d4c:	1000090e 	bge	r2,zero,21d74 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   21d50:	e0bffe17 	ldw	r2,-8(fp)
   21d54:	10c00324 	muli	r3,r2,12
   21d58:	008000b4 	movhi	r2,2
   21d5c:	10986c04 	addi	r2,r2,25008
   21d60:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   21d64:	e0bfff17 	ldw	r2,-4(fp)
   21d68:	18800226 	beq	r3,r2,21d74 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   21d6c:	00bffcc4 	movi	r2,-13
   21d70:	00000806 	br	21d94 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   21d74:	e0bffe17 	ldw	r2,-8(fp)
   21d78:	10800044 	addi	r2,r2,1
   21d7c:	e0bffe15 	stw	r2,-8(fp)
   21d80:	d0a00417 	ldw	r2,-32752(gp)
   21d84:	1007883a 	mov	r3,r2
   21d88:	e0bffe17 	ldw	r2,-8(fp)
   21d8c:	18bfdf2e 	bgeu	r3,r2,21d0c <__alt_data_end+0xfffe1d0c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   21d90:	0005883a 	mov	r2,zero
}
   21d94:	e037883a 	mov	sp,fp
   21d98:	df000017 	ldw	fp,0(sp)
   21d9c:	dec00104 	addi	sp,sp,4
   21da0:	f800283a 	ret

00021da4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   21da4:	defff604 	addi	sp,sp,-40
   21da8:	dfc00915 	stw	ra,36(sp)
   21dac:	df000815 	stw	fp,32(sp)
   21db0:	df000804 	addi	fp,sp,32
   21db4:	e13ffd15 	stw	r4,-12(fp)
   21db8:	e17ffe15 	stw	r5,-8(fp)
   21dbc:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   21dc0:	00bfffc4 	movi	r2,-1
   21dc4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   21dc8:	00bffb44 	movi	r2,-19
   21dcc:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   21dd0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   21dd4:	d1600204 	addi	r5,gp,-32760
   21dd8:	e13ffd17 	ldw	r4,-12(fp)
   21ddc:	00221240 	call	22124 <alt_find_dev>
   21de0:	e0bff815 	stw	r2,-32(fp)
   21de4:	e0bff817 	ldw	r2,-32(fp)
   21de8:	1000051e 	bne	r2,zero,21e00 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   21dec:	e13ffd17 	ldw	r4,-12(fp)
   21df0:	00221b40 	call	221b4 <alt_find_file>
   21df4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   21df8:	00800044 	movi	r2,1
   21dfc:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   21e00:	e0bff817 	ldw	r2,-32(fp)
   21e04:	10002926 	beq	r2,zero,21eac <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   21e08:	e13ff817 	ldw	r4,-32(fp)
   21e0c:	00222bc0 	call	222bc <alt_get_fd>
   21e10:	e0bff915 	stw	r2,-28(fp)
   21e14:	e0bff917 	ldw	r2,-28(fp)
   21e18:	1000030e 	bge	r2,zero,21e28 <open+0x84>
    {
      status = index;
   21e1c:	e0bff917 	ldw	r2,-28(fp)
   21e20:	e0bffa15 	stw	r2,-24(fp)
   21e24:	00002306 	br	21eb4 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   21e28:	e0bff917 	ldw	r2,-28(fp)
   21e2c:	10c00324 	muli	r3,r2,12
   21e30:	008000b4 	movhi	r2,2
   21e34:	10986c04 	addi	r2,r2,25008
   21e38:	1885883a 	add	r2,r3,r2
   21e3c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   21e40:	e0fffe17 	ldw	r3,-8(fp)
   21e44:	00900034 	movhi	r2,16384
   21e48:	10bfffc4 	addi	r2,r2,-1
   21e4c:	1886703a 	and	r3,r3,r2
   21e50:	e0bffc17 	ldw	r2,-16(fp)
   21e54:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   21e58:	e0bffb17 	ldw	r2,-20(fp)
   21e5c:	1000051e 	bne	r2,zero,21e74 <open+0xd0>
   21e60:	e13ffc17 	ldw	r4,-16(fp)
   21e64:	0021ce00 	call	21ce0 <alt_file_locked>
   21e68:	e0bffa15 	stw	r2,-24(fp)
   21e6c:	e0bffa17 	ldw	r2,-24(fp)
   21e70:	10001016 	blt	r2,zero,21eb4 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   21e74:	e0bff817 	ldw	r2,-32(fp)
   21e78:	10800317 	ldw	r2,12(r2)
   21e7c:	10000826 	beq	r2,zero,21ea0 <open+0xfc>
   21e80:	e0bff817 	ldw	r2,-32(fp)
   21e84:	10800317 	ldw	r2,12(r2)
   21e88:	e1ffff17 	ldw	r7,-4(fp)
   21e8c:	e1bffe17 	ldw	r6,-8(fp)
   21e90:	e17ffd17 	ldw	r5,-12(fp)
   21e94:	e13ffc17 	ldw	r4,-16(fp)
   21e98:	103ee83a 	callr	r2
   21e9c:	00000106 	br	21ea4 <open+0x100>
   21ea0:	0005883a 	mov	r2,zero
   21ea4:	e0bffa15 	stw	r2,-24(fp)
   21ea8:	00000206 	br	21eb4 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   21eac:	00bffb44 	movi	r2,-19
   21eb0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   21eb4:	e0bffa17 	ldw	r2,-24(fp)
   21eb8:	1000090e 	bge	r2,zero,21ee0 <open+0x13c>
  {
    alt_release_fd (index);  
   21ebc:	e13ff917 	ldw	r4,-28(fp)
   21ec0:	0021ef80 	call	21ef8 <alt_release_fd>
    ALT_ERRNO = -status;
   21ec4:	0021ca40 	call	21ca4 <alt_get_errno>
   21ec8:	1007883a 	mov	r3,r2
   21ecc:	e0bffa17 	ldw	r2,-24(fp)
   21ed0:	0085c83a 	sub	r2,zero,r2
   21ed4:	18800015 	stw	r2,0(r3)
    return -1;
   21ed8:	00bfffc4 	movi	r2,-1
   21edc:	00000106 	br	21ee4 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   21ee0:	e0bff917 	ldw	r2,-28(fp)
}
   21ee4:	e037883a 	mov	sp,fp
   21ee8:	dfc00117 	ldw	ra,4(sp)
   21eec:	df000017 	ldw	fp,0(sp)
   21ef0:	dec00204 	addi	sp,sp,8
   21ef4:	f800283a 	ret

00021ef8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   21ef8:	defffe04 	addi	sp,sp,-8
   21efc:	df000115 	stw	fp,4(sp)
   21f00:	df000104 	addi	fp,sp,4
   21f04:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   21f08:	e0bfff17 	ldw	r2,-4(fp)
   21f0c:	108000d0 	cmplti	r2,r2,3
   21f10:	10000d1e 	bne	r2,zero,21f48 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   21f14:	008000b4 	movhi	r2,2
   21f18:	10986c04 	addi	r2,r2,25008
   21f1c:	e0ffff17 	ldw	r3,-4(fp)
   21f20:	18c00324 	muli	r3,r3,12
   21f24:	10c5883a 	add	r2,r2,r3
   21f28:	10800204 	addi	r2,r2,8
   21f2c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   21f30:	008000b4 	movhi	r2,2
   21f34:	10986c04 	addi	r2,r2,25008
   21f38:	e0ffff17 	ldw	r3,-4(fp)
   21f3c:	18c00324 	muli	r3,r3,12
   21f40:	10c5883a 	add	r2,r2,r3
   21f44:	10000015 	stw	zero,0(r2)
  }
}
   21f48:	0001883a 	nop
   21f4c:	e037883a 	mov	sp,fp
   21f50:	df000017 	ldw	fp,0(sp)
   21f54:	dec00104 	addi	sp,sp,4
   21f58:	f800283a 	ret

00021f5c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   21f5c:	defffa04 	addi	sp,sp,-24
   21f60:	df000515 	stw	fp,20(sp)
   21f64:	df000504 	addi	fp,sp,20
   21f68:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21f6c:	0005303a 	rdctl	r2,status
   21f70:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21f74:	e0fffc17 	ldw	r3,-16(fp)
   21f78:	00bfff84 	movi	r2,-2
   21f7c:	1884703a 	and	r2,r3,r2
   21f80:	1001703a 	wrctl	status,r2
  
  return context;
   21f84:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   21f88:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   21f8c:	e0bfff17 	ldw	r2,-4(fp)
   21f90:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   21f94:	e0bffd17 	ldw	r2,-12(fp)
   21f98:	10800017 	ldw	r2,0(r2)
   21f9c:	e0fffd17 	ldw	r3,-12(fp)
   21fa0:	18c00117 	ldw	r3,4(r3)
   21fa4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   21fa8:	e0bffd17 	ldw	r2,-12(fp)
   21fac:	10800117 	ldw	r2,4(r2)
   21fb0:	e0fffd17 	ldw	r3,-12(fp)
   21fb4:	18c00017 	ldw	r3,0(r3)
   21fb8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   21fbc:	e0bffd17 	ldw	r2,-12(fp)
   21fc0:	e0fffd17 	ldw	r3,-12(fp)
   21fc4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   21fc8:	e0bffd17 	ldw	r2,-12(fp)
   21fcc:	e0fffd17 	ldw	r3,-12(fp)
   21fd0:	10c00015 	stw	r3,0(r2)
   21fd4:	e0bffb17 	ldw	r2,-20(fp)
   21fd8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21fdc:	e0bffe17 	ldw	r2,-8(fp)
   21fe0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   21fe4:	0001883a 	nop
   21fe8:	e037883a 	mov	sp,fp
   21fec:	df000017 	ldw	fp,0(sp)
   21ff0:	dec00104 	addi	sp,sp,4
   21ff4:	f800283a 	ret

00021ff8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   21ff8:	defffb04 	addi	sp,sp,-20
   21ffc:	dfc00415 	stw	ra,16(sp)
   22000:	df000315 	stw	fp,12(sp)
   22004:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   22008:	d0a00717 	ldw	r2,-32740(gp)
   2200c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   22010:	d0a6ae17 	ldw	r2,-25928(gp)
   22014:	10800044 	addi	r2,r2,1
   22018:	d0a6ae15 	stw	r2,-25928(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   2201c:	00002e06 	br	220d8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   22020:	e0bffd17 	ldw	r2,-12(fp)
   22024:	10800017 	ldw	r2,0(r2)
   22028:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   2202c:	e0bffd17 	ldw	r2,-12(fp)
   22030:	10800403 	ldbu	r2,16(r2)
   22034:	10803fcc 	andi	r2,r2,255
   22038:	10000426 	beq	r2,zero,2204c <alt_tick+0x54>
   2203c:	d0a6ae17 	ldw	r2,-25928(gp)
   22040:	1000021e 	bne	r2,zero,2204c <alt_tick+0x54>
    {
      alarm->rollover = 0;
   22044:	e0bffd17 	ldw	r2,-12(fp)
   22048:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   2204c:	e0bffd17 	ldw	r2,-12(fp)
   22050:	10800217 	ldw	r2,8(r2)
   22054:	d0e6ae17 	ldw	r3,-25928(gp)
   22058:	18801d36 	bltu	r3,r2,220d0 <alt_tick+0xd8>
   2205c:	e0bffd17 	ldw	r2,-12(fp)
   22060:	10800403 	ldbu	r2,16(r2)
   22064:	10803fcc 	andi	r2,r2,255
   22068:	1000191e 	bne	r2,zero,220d0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   2206c:	e0bffd17 	ldw	r2,-12(fp)
   22070:	10800317 	ldw	r2,12(r2)
   22074:	e0fffd17 	ldw	r3,-12(fp)
   22078:	18c00517 	ldw	r3,20(r3)
   2207c:	1809883a 	mov	r4,r3
   22080:	103ee83a 	callr	r2
   22084:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   22088:	e0bfff17 	ldw	r2,-4(fp)
   2208c:	1000031e 	bne	r2,zero,2209c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   22090:	e13ffd17 	ldw	r4,-12(fp)
   22094:	0021f5c0 	call	21f5c <alt_alarm_stop>
   22098:	00000d06 	br	220d0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   2209c:	e0bffd17 	ldw	r2,-12(fp)
   220a0:	10c00217 	ldw	r3,8(r2)
   220a4:	e0bfff17 	ldw	r2,-4(fp)
   220a8:	1887883a 	add	r3,r3,r2
   220ac:	e0bffd17 	ldw	r2,-12(fp)
   220b0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   220b4:	e0bffd17 	ldw	r2,-12(fp)
   220b8:	10c00217 	ldw	r3,8(r2)
   220bc:	d0a6ae17 	ldw	r2,-25928(gp)
   220c0:	1880032e 	bgeu	r3,r2,220d0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   220c4:	e0bffd17 	ldw	r2,-12(fp)
   220c8:	00c00044 	movi	r3,1
   220cc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   220d0:	e0bffe17 	ldw	r2,-8(fp)
   220d4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   220d8:	e0fffd17 	ldw	r3,-12(fp)
   220dc:	d0a00704 	addi	r2,gp,-32740
   220e0:	18bfcf1e 	bne	r3,r2,22020 <__alt_data_end+0xfffe2020>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   220e4:	0001883a 	nop
}
   220e8:	0001883a 	nop
   220ec:	e037883a 	mov	sp,fp
   220f0:	dfc00117 	ldw	ra,4(sp)
   220f4:	df000017 	ldw	fp,0(sp)
   220f8:	dec00204 	addi	sp,sp,8
   220fc:	f800283a 	ret

00022100 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   22100:	deffff04 	addi	sp,sp,-4
   22104:	df000015 	stw	fp,0(sp)
   22108:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   2210c:	000170fa 	wrctl	ienable,zero
}
   22110:	0001883a 	nop
   22114:	e037883a 	mov	sp,fp
   22118:	df000017 	ldw	fp,0(sp)
   2211c:	dec00104 	addi	sp,sp,4
   22120:	f800283a 	ret

00022124 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   22124:	defffa04 	addi	sp,sp,-24
   22128:	dfc00515 	stw	ra,20(sp)
   2212c:	df000415 	stw	fp,16(sp)
   22130:	df000404 	addi	fp,sp,16
   22134:	e13ffe15 	stw	r4,-8(fp)
   22138:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   2213c:	e0bfff17 	ldw	r2,-4(fp)
   22140:	10800017 	ldw	r2,0(r2)
   22144:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   22148:	e13ffe17 	ldw	r4,-8(fp)
   2214c:	00228040 	call	22804 <strlen>
   22150:	10800044 	addi	r2,r2,1
   22154:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   22158:	00000d06 	br	22190 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   2215c:	e0bffc17 	ldw	r2,-16(fp)
   22160:	10800217 	ldw	r2,8(r2)
   22164:	e0fffd17 	ldw	r3,-12(fp)
   22168:	180d883a 	mov	r6,r3
   2216c:	e17ffe17 	ldw	r5,-8(fp)
   22170:	1009883a 	mov	r4,r2
   22174:	00224d80 	call	224d8 <memcmp>
   22178:	1000021e 	bne	r2,zero,22184 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   2217c:	e0bffc17 	ldw	r2,-16(fp)
   22180:	00000706 	br	221a0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   22184:	e0bffc17 	ldw	r2,-16(fp)
   22188:	10800017 	ldw	r2,0(r2)
   2218c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   22190:	e0fffc17 	ldw	r3,-16(fp)
   22194:	e0bfff17 	ldw	r2,-4(fp)
   22198:	18bff01e 	bne	r3,r2,2215c <__alt_data_end+0xfffe215c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   2219c:	0005883a 	mov	r2,zero
}
   221a0:	e037883a 	mov	sp,fp
   221a4:	dfc00117 	ldw	ra,4(sp)
   221a8:	df000017 	ldw	fp,0(sp)
   221ac:	dec00204 	addi	sp,sp,8
   221b0:	f800283a 	ret

000221b4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   221b4:	defffb04 	addi	sp,sp,-20
   221b8:	dfc00415 	stw	ra,16(sp)
   221bc:	df000315 	stw	fp,12(sp)
   221c0:	df000304 	addi	fp,sp,12
   221c4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   221c8:	d0a00017 	ldw	r2,-32768(gp)
   221cc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   221d0:	00003106 	br	22298 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   221d4:	e0bffd17 	ldw	r2,-12(fp)
   221d8:	10800217 	ldw	r2,8(r2)
   221dc:	1009883a 	mov	r4,r2
   221e0:	00228040 	call	22804 <strlen>
   221e4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   221e8:	e0bffd17 	ldw	r2,-12(fp)
   221ec:	10c00217 	ldw	r3,8(r2)
   221f0:	e0bffe17 	ldw	r2,-8(fp)
   221f4:	10bfffc4 	addi	r2,r2,-1
   221f8:	1885883a 	add	r2,r3,r2
   221fc:	10800003 	ldbu	r2,0(r2)
   22200:	10803fcc 	andi	r2,r2,255
   22204:	1080201c 	xori	r2,r2,128
   22208:	10bfe004 	addi	r2,r2,-128
   2220c:	10800bd8 	cmpnei	r2,r2,47
   22210:	1000031e 	bne	r2,zero,22220 <alt_find_file+0x6c>
    {
      len -= 1;
   22214:	e0bffe17 	ldw	r2,-8(fp)
   22218:	10bfffc4 	addi	r2,r2,-1
   2221c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   22220:	e0bffe17 	ldw	r2,-8(fp)
   22224:	e0ffff17 	ldw	r3,-4(fp)
   22228:	1885883a 	add	r2,r3,r2
   2222c:	10800003 	ldbu	r2,0(r2)
   22230:	10803fcc 	andi	r2,r2,255
   22234:	1080201c 	xori	r2,r2,128
   22238:	10bfe004 	addi	r2,r2,-128
   2223c:	10800be0 	cmpeqi	r2,r2,47
   22240:	1000081e 	bne	r2,zero,22264 <alt_find_file+0xb0>
   22244:	e0bffe17 	ldw	r2,-8(fp)
   22248:	e0ffff17 	ldw	r3,-4(fp)
   2224c:	1885883a 	add	r2,r3,r2
   22250:	10800003 	ldbu	r2,0(r2)
   22254:	10803fcc 	andi	r2,r2,255
   22258:	1080201c 	xori	r2,r2,128
   2225c:	10bfe004 	addi	r2,r2,-128
   22260:	10000a1e 	bne	r2,zero,2228c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   22264:	e0bffd17 	ldw	r2,-12(fp)
   22268:	10800217 	ldw	r2,8(r2)
   2226c:	e0fffe17 	ldw	r3,-8(fp)
   22270:	180d883a 	mov	r6,r3
   22274:	e17fff17 	ldw	r5,-4(fp)
   22278:	1009883a 	mov	r4,r2
   2227c:	00224d80 	call	224d8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   22280:	1000021e 	bne	r2,zero,2228c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   22284:	e0bffd17 	ldw	r2,-12(fp)
   22288:	00000706 	br	222a8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   2228c:	e0bffd17 	ldw	r2,-12(fp)
   22290:	10800017 	ldw	r2,0(r2)
   22294:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   22298:	e0fffd17 	ldw	r3,-12(fp)
   2229c:	d0a00004 	addi	r2,gp,-32768
   222a0:	18bfcc1e 	bne	r3,r2,221d4 <__alt_data_end+0xfffe21d4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   222a4:	0005883a 	mov	r2,zero
}
   222a8:	e037883a 	mov	sp,fp
   222ac:	dfc00117 	ldw	ra,4(sp)
   222b0:	df000017 	ldw	fp,0(sp)
   222b4:	dec00204 	addi	sp,sp,8
   222b8:	f800283a 	ret

000222bc <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   222bc:	defffc04 	addi	sp,sp,-16
   222c0:	df000315 	stw	fp,12(sp)
   222c4:	df000304 	addi	fp,sp,12
   222c8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   222cc:	00bffa04 	movi	r2,-24
   222d0:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   222d4:	e03ffd15 	stw	zero,-12(fp)
   222d8:	00001906 	br	22340 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   222dc:	008000b4 	movhi	r2,2
   222e0:	10986c04 	addi	r2,r2,25008
   222e4:	e0fffd17 	ldw	r3,-12(fp)
   222e8:	18c00324 	muli	r3,r3,12
   222ec:	10c5883a 	add	r2,r2,r3
   222f0:	10800017 	ldw	r2,0(r2)
   222f4:	10000f1e 	bne	r2,zero,22334 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   222f8:	008000b4 	movhi	r2,2
   222fc:	10986c04 	addi	r2,r2,25008
   22300:	e0fffd17 	ldw	r3,-12(fp)
   22304:	18c00324 	muli	r3,r3,12
   22308:	10c5883a 	add	r2,r2,r3
   2230c:	e0ffff17 	ldw	r3,-4(fp)
   22310:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   22314:	d0e00417 	ldw	r3,-32752(gp)
   22318:	e0bffd17 	ldw	r2,-12(fp)
   2231c:	1880020e 	bge	r3,r2,22328 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   22320:	e0bffd17 	ldw	r2,-12(fp)
   22324:	d0a00415 	stw	r2,-32752(gp)
      }
      rc = i;
   22328:	e0bffd17 	ldw	r2,-12(fp)
   2232c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   22330:	00000606 	br	2234c <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   22334:	e0bffd17 	ldw	r2,-12(fp)
   22338:	10800044 	addi	r2,r2,1
   2233c:	e0bffd15 	stw	r2,-12(fp)
   22340:	e0bffd17 	ldw	r2,-12(fp)
   22344:	10800810 	cmplti	r2,r2,32
   22348:	103fe41e 	bne	r2,zero,222dc <__alt_data_end+0xfffe22dc>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   2234c:	e0bffe17 	ldw	r2,-8(fp)
}
   22350:	e037883a 	mov	sp,fp
   22354:	df000017 	ldw	fp,0(sp)
   22358:	dec00104 	addi	sp,sp,4
   2235c:	f800283a 	ret

00022360 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   22360:	defffb04 	addi	sp,sp,-20
   22364:	df000415 	stw	fp,16(sp)
   22368:	df000404 	addi	fp,sp,16
   2236c:	e13ffe15 	stw	r4,-8(fp)
   22370:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   22374:	e0bfff17 	ldw	r2,-4(fp)
   22378:	10840070 	cmpltui	r2,r2,4097
   2237c:	1000021e 	bne	r2,zero,22388 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   22380:	00840004 	movi	r2,4096
   22384:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   22388:	e0fffe17 	ldw	r3,-8(fp)
   2238c:	e0bfff17 	ldw	r2,-4(fp)
   22390:	1885883a 	add	r2,r3,r2
   22394:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   22398:	e0bffe17 	ldw	r2,-8(fp)
   2239c:	e0bffc15 	stw	r2,-16(fp)
   223a0:	00000506 	br	223b8 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   223a4:	e0bffc17 	ldw	r2,-16(fp)
   223a8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   223ac:	e0bffc17 	ldw	r2,-16(fp)
   223b0:	10800804 	addi	r2,r2,32
   223b4:	e0bffc15 	stw	r2,-16(fp)
   223b8:	e0fffc17 	ldw	r3,-16(fp)
   223bc:	e0bffd17 	ldw	r2,-12(fp)
   223c0:	18bff836 	bltu	r3,r2,223a4 <__alt_data_end+0xfffe23a4>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   223c4:	e0bffe17 	ldw	r2,-8(fp)
   223c8:	108007cc 	andi	r2,r2,31
   223cc:	10000226 	beq	r2,zero,223d8 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   223d0:	e0bffc17 	ldw	r2,-16(fp)
   223d4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   223d8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   223dc:	0001883a 	nop
   223e0:	e037883a 	mov	sp,fp
   223e4:	df000017 	ldw	fp,0(sp)
   223e8:	dec00104 	addi	sp,sp,4
   223ec:	f800283a 	ret

000223f0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   223f0:	defffe04 	addi	sp,sp,-8
   223f4:	df000115 	stw	fp,4(sp)
   223f8:	df000104 	addi	fp,sp,4
   223fc:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   22400:	e0bfff17 	ldw	r2,-4(fp)
   22404:	10bffe84 	addi	r2,r2,-6
   22408:	10c00428 	cmpgeui	r3,r2,16
   2240c:	18001a1e 	bne	r3,zero,22478 <alt_exception_cause_generated_bad_addr+0x88>
   22410:	100690ba 	slli	r3,r2,2
   22414:	008000b4 	movhi	r2,2
   22418:	10890a04 	addi	r2,r2,9256
   2241c:	1885883a 	add	r2,r3,r2
   22420:	10800017 	ldw	r2,0(r2)
   22424:	1000683a 	jmp	r2
   22428:	00022468 	cmpgeui	zero,zero,2193
   2242c:	00022468 	cmpgeui	zero,zero,2193
   22430:	00022478 	rdprs	zero,zero,2193
   22434:	00022478 	rdprs	zero,zero,2193
   22438:	00022478 	rdprs	zero,zero,2193
   2243c:	00022468 	cmpgeui	zero,zero,2193
   22440:	00022470 	cmpltui	zero,zero,2193
   22444:	00022478 	rdprs	zero,zero,2193
   22448:	00022468 	cmpgeui	zero,zero,2193
   2244c:	00022468 	cmpgeui	zero,zero,2193
   22450:	00022478 	rdprs	zero,zero,2193
   22454:	00022468 	cmpgeui	zero,zero,2193
   22458:	00022470 	cmpltui	zero,zero,2193
   2245c:	00022478 	rdprs	zero,zero,2193
   22460:	00022478 	rdprs	zero,zero,2193
   22464:	00022468 	cmpgeui	zero,zero,2193
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   22468:	00800044 	movi	r2,1
   2246c:	00000306 	br	2247c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   22470:	0005883a 	mov	r2,zero
   22474:	00000106 	br	2247c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   22478:	0005883a 	mov	r2,zero
  }
}
   2247c:	e037883a 	mov	sp,fp
   22480:	df000017 	ldw	fp,0(sp)
   22484:	dec00104 	addi	sp,sp,4
   22488:	f800283a 	ret

0002248c <atexit>:
   2248c:	200b883a 	mov	r5,r4
   22490:	000f883a 	mov	r7,zero
   22494:	000d883a 	mov	r6,zero
   22498:	0009883a 	mov	r4,zero
   2249c:	0022b481 	jmpi	22b48 <__register_exitproc>

000224a0 <exit>:
   224a0:	defffe04 	addi	sp,sp,-8
   224a4:	000b883a 	mov	r5,zero
   224a8:	dc000015 	stw	r16,0(sp)
   224ac:	dfc00115 	stw	ra,4(sp)
   224b0:	2021883a 	mov	r16,r4
   224b4:	0022c600 	call	22c60 <__call_exitprocs>
   224b8:	008000b4 	movhi	r2,2
   224bc:	109ae004 	addi	r2,r2,27520
   224c0:	11000017 	ldw	r4,0(r2)
   224c4:	20800f17 	ldw	r2,60(r4)
   224c8:	10000126 	beq	r2,zero,224d0 <exit+0x30>
   224cc:	103ee83a 	callr	r2
   224d0:	8009883a 	mov	r4,r16
   224d4:	002498c0 	call	2498c <_exit>

000224d8 <memcmp>:
   224d8:	01c000c4 	movi	r7,3
   224dc:	3980192e 	bgeu	r7,r6,22544 <memcmp+0x6c>
   224e0:	2144b03a 	or	r2,r4,r5
   224e4:	11c4703a 	and	r2,r2,r7
   224e8:	10000f26 	beq	r2,zero,22528 <memcmp+0x50>
   224ec:	20800003 	ldbu	r2,0(r4)
   224f0:	28c00003 	ldbu	r3,0(r5)
   224f4:	10c0151e 	bne	r2,r3,2254c <memcmp+0x74>
   224f8:	31bfff84 	addi	r6,r6,-2
   224fc:	01ffffc4 	movi	r7,-1
   22500:	00000406 	br	22514 <memcmp+0x3c>
   22504:	20800003 	ldbu	r2,0(r4)
   22508:	28c00003 	ldbu	r3,0(r5)
   2250c:	31bfffc4 	addi	r6,r6,-1
   22510:	10c00e1e 	bne	r2,r3,2254c <memcmp+0x74>
   22514:	21000044 	addi	r4,r4,1
   22518:	29400044 	addi	r5,r5,1
   2251c:	31fff91e 	bne	r6,r7,22504 <__alt_data_end+0xfffe2504>
   22520:	0005883a 	mov	r2,zero
   22524:	f800283a 	ret
   22528:	20c00017 	ldw	r3,0(r4)
   2252c:	28800017 	ldw	r2,0(r5)
   22530:	18bfee1e 	bne	r3,r2,224ec <__alt_data_end+0xfffe24ec>
   22534:	31bfff04 	addi	r6,r6,-4
   22538:	21000104 	addi	r4,r4,4
   2253c:	29400104 	addi	r5,r5,4
   22540:	39bff936 	bltu	r7,r6,22528 <__alt_data_end+0xfffe2528>
   22544:	303fe91e 	bne	r6,zero,224ec <__alt_data_end+0xfffe24ec>
   22548:	003ff506 	br	22520 <__alt_data_end+0xfffe2520>
   2254c:	10c5c83a 	sub	r2,r2,r3
   22550:	f800283a 	ret

00022554 <memcpy>:
   22554:	defffd04 	addi	sp,sp,-12
   22558:	dfc00215 	stw	ra,8(sp)
   2255c:	dc400115 	stw	r17,4(sp)
   22560:	dc000015 	stw	r16,0(sp)
   22564:	00c003c4 	movi	r3,15
   22568:	2005883a 	mov	r2,r4
   2256c:	1980452e 	bgeu	r3,r6,22684 <memcpy+0x130>
   22570:	2906b03a 	or	r3,r5,r4
   22574:	18c000cc 	andi	r3,r3,3
   22578:	1800441e 	bne	r3,zero,2268c <memcpy+0x138>
   2257c:	347ffc04 	addi	r17,r6,-16
   22580:	8822d13a 	srli	r17,r17,4
   22584:	28c00104 	addi	r3,r5,4
   22588:	23400104 	addi	r13,r4,4
   2258c:	8820913a 	slli	r16,r17,4
   22590:	2b000204 	addi	r12,r5,8
   22594:	22c00204 	addi	r11,r4,8
   22598:	84000504 	addi	r16,r16,20
   2259c:	2a800304 	addi	r10,r5,12
   225a0:	22400304 	addi	r9,r4,12
   225a4:	2c21883a 	add	r16,r5,r16
   225a8:	2811883a 	mov	r8,r5
   225ac:	200f883a 	mov	r7,r4
   225b0:	41000017 	ldw	r4,0(r8)
   225b4:	1fc00017 	ldw	ra,0(r3)
   225b8:	63c00017 	ldw	r15,0(r12)
   225bc:	39000015 	stw	r4,0(r7)
   225c0:	53800017 	ldw	r14,0(r10)
   225c4:	6fc00015 	stw	ra,0(r13)
   225c8:	5bc00015 	stw	r15,0(r11)
   225cc:	4b800015 	stw	r14,0(r9)
   225d0:	18c00404 	addi	r3,r3,16
   225d4:	39c00404 	addi	r7,r7,16
   225d8:	42000404 	addi	r8,r8,16
   225dc:	6b400404 	addi	r13,r13,16
   225e0:	63000404 	addi	r12,r12,16
   225e4:	5ac00404 	addi	r11,r11,16
   225e8:	52800404 	addi	r10,r10,16
   225ec:	4a400404 	addi	r9,r9,16
   225f0:	1c3fef1e 	bne	r3,r16,225b0 <__alt_data_end+0xfffe25b0>
   225f4:	89c00044 	addi	r7,r17,1
   225f8:	380e913a 	slli	r7,r7,4
   225fc:	310003cc 	andi	r4,r6,15
   22600:	02c000c4 	movi	r11,3
   22604:	11c7883a 	add	r3,r2,r7
   22608:	29cb883a 	add	r5,r5,r7
   2260c:	5900212e 	bgeu	r11,r4,22694 <memcpy+0x140>
   22610:	1813883a 	mov	r9,r3
   22614:	2811883a 	mov	r8,r5
   22618:	200f883a 	mov	r7,r4
   2261c:	42800017 	ldw	r10,0(r8)
   22620:	4a400104 	addi	r9,r9,4
   22624:	39ffff04 	addi	r7,r7,-4
   22628:	4abfff15 	stw	r10,-4(r9)
   2262c:	42000104 	addi	r8,r8,4
   22630:	59fffa36 	bltu	r11,r7,2261c <__alt_data_end+0xfffe261c>
   22634:	213fff04 	addi	r4,r4,-4
   22638:	2008d0ba 	srli	r4,r4,2
   2263c:	318000cc 	andi	r6,r6,3
   22640:	21000044 	addi	r4,r4,1
   22644:	2109883a 	add	r4,r4,r4
   22648:	2109883a 	add	r4,r4,r4
   2264c:	1907883a 	add	r3,r3,r4
   22650:	290b883a 	add	r5,r5,r4
   22654:	30000626 	beq	r6,zero,22670 <memcpy+0x11c>
   22658:	198d883a 	add	r6,r3,r6
   2265c:	29c00003 	ldbu	r7,0(r5)
   22660:	18c00044 	addi	r3,r3,1
   22664:	29400044 	addi	r5,r5,1
   22668:	19ffffc5 	stb	r7,-1(r3)
   2266c:	19bffb1e 	bne	r3,r6,2265c <__alt_data_end+0xfffe265c>
   22670:	dfc00217 	ldw	ra,8(sp)
   22674:	dc400117 	ldw	r17,4(sp)
   22678:	dc000017 	ldw	r16,0(sp)
   2267c:	dec00304 	addi	sp,sp,12
   22680:	f800283a 	ret
   22684:	2007883a 	mov	r3,r4
   22688:	003ff206 	br	22654 <__alt_data_end+0xfffe2654>
   2268c:	2007883a 	mov	r3,r4
   22690:	003ff106 	br	22658 <__alt_data_end+0xfffe2658>
   22694:	200d883a 	mov	r6,r4
   22698:	003fee06 	br	22654 <__alt_data_end+0xfffe2654>

0002269c <_putc_r>:
   2269c:	defffc04 	addi	sp,sp,-16
   226a0:	dc000215 	stw	r16,8(sp)
   226a4:	dfc00315 	stw	ra,12(sp)
   226a8:	2021883a 	mov	r16,r4
   226ac:	20000226 	beq	r4,zero,226b8 <_putc_r+0x1c>
   226b0:	20800e17 	ldw	r2,56(r4)
   226b4:	10001b26 	beq	r2,zero,22724 <_putc_r+0x88>
   226b8:	30800217 	ldw	r2,8(r6)
   226bc:	10bfffc4 	addi	r2,r2,-1
   226c0:	30800215 	stw	r2,8(r6)
   226c4:	10000a16 	blt	r2,zero,226f0 <_putc_r+0x54>
   226c8:	30800017 	ldw	r2,0(r6)
   226cc:	11400005 	stb	r5,0(r2)
   226d0:	30800017 	ldw	r2,0(r6)
   226d4:	10c00044 	addi	r3,r2,1
   226d8:	30c00015 	stw	r3,0(r6)
   226dc:	10800003 	ldbu	r2,0(r2)
   226e0:	dfc00317 	ldw	ra,12(sp)
   226e4:	dc000217 	ldw	r16,8(sp)
   226e8:	dec00404 	addi	sp,sp,16
   226ec:	f800283a 	ret
   226f0:	30c00617 	ldw	r3,24(r6)
   226f4:	10c00616 	blt	r2,r3,22710 <_putc_r+0x74>
   226f8:	30800017 	ldw	r2,0(r6)
   226fc:	00c00284 	movi	r3,10
   22700:	11400005 	stb	r5,0(r2)
   22704:	30800017 	ldw	r2,0(r6)
   22708:	11400003 	ldbu	r5,0(r2)
   2270c:	28fff11e 	bne	r5,r3,226d4 <__alt_data_end+0xfffe26d4>
   22710:	8009883a 	mov	r4,r16
   22714:	dfc00317 	ldw	ra,12(sp)
   22718:	dc000217 	ldw	r16,8(sp)
   2271c:	dec00404 	addi	sp,sp,16
   22720:	002289c1 	jmpi	2289c <__swbuf_r>
   22724:	d9400015 	stw	r5,0(sp)
   22728:	d9800115 	stw	r6,4(sp)
   2272c:	00233d80 	call	233d8 <__sinit>
   22730:	d9800117 	ldw	r6,4(sp)
   22734:	d9400017 	ldw	r5,0(sp)
   22738:	003fdf06 	br	226b8 <__alt_data_end+0xfffe26b8>

0002273c <putc>:
   2273c:	008000b4 	movhi	r2,2
   22740:	defffc04 	addi	sp,sp,-16
   22744:	109ae104 	addi	r2,r2,27524
   22748:	dc000115 	stw	r16,4(sp)
   2274c:	14000017 	ldw	r16,0(r2)
   22750:	dc400215 	stw	r17,8(sp)
   22754:	dfc00315 	stw	ra,12(sp)
   22758:	2023883a 	mov	r17,r4
   2275c:	80000226 	beq	r16,zero,22768 <putc+0x2c>
   22760:	80800e17 	ldw	r2,56(r16)
   22764:	10001a26 	beq	r2,zero,227d0 <putc+0x94>
   22768:	28800217 	ldw	r2,8(r5)
   2276c:	10bfffc4 	addi	r2,r2,-1
   22770:	28800215 	stw	r2,8(r5)
   22774:	10000b16 	blt	r2,zero,227a4 <putc+0x68>
   22778:	28800017 	ldw	r2,0(r5)
   2277c:	14400005 	stb	r17,0(r2)
   22780:	28800017 	ldw	r2,0(r5)
   22784:	10c00044 	addi	r3,r2,1
   22788:	28c00015 	stw	r3,0(r5)
   2278c:	10800003 	ldbu	r2,0(r2)
   22790:	dfc00317 	ldw	ra,12(sp)
   22794:	dc400217 	ldw	r17,8(sp)
   22798:	dc000117 	ldw	r16,4(sp)
   2279c:	dec00404 	addi	sp,sp,16
   227a0:	f800283a 	ret
   227a4:	28c00617 	ldw	r3,24(r5)
   227a8:	10c00e16 	blt	r2,r3,227e4 <putc+0xa8>
   227ac:	28800017 	ldw	r2,0(r5)
   227b0:	01000284 	movi	r4,10
   227b4:	14400005 	stb	r17,0(r2)
   227b8:	28800017 	ldw	r2,0(r5)
   227bc:	10c00003 	ldbu	r3,0(r2)
   227c0:	193ff01e 	bne	r3,r4,22784 <__alt_data_end+0xfffe2784>
   227c4:	280d883a 	mov	r6,r5
   227c8:	180b883a 	mov	r5,r3
   227cc:	00000706 	br	227ec <putc+0xb0>
   227d0:	8009883a 	mov	r4,r16
   227d4:	d9400015 	stw	r5,0(sp)
   227d8:	00233d80 	call	233d8 <__sinit>
   227dc:	d9400017 	ldw	r5,0(sp)
   227e0:	003fe106 	br	22768 <__alt_data_end+0xfffe2768>
   227e4:	280d883a 	mov	r6,r5
   227e8:	880b883a 	mov	r5,r17
   227ec:	8009883a 	mov	r4,r16
   227f0:	dfc00317 	ldw	ra,12(sp)
   227f4:	dc400217 	ldw	r17,8(sp)
   227f8:	dc000117 	ldw	r16,4(sp)
   227fc:	dec00404 	addi	sp,sp,16
   22800:	002289c1 	jmpi	2289c <__swbuf_r>

00022804 <strlen>:
   22804:	208000cc 	andi	r2,r4,3
   22808:	10002026 	beq	r2,zero,2288c <strlen+0x88>
   2280c:	20800007 	ldb	r2,0(r4)
   22810:	10002026 	beq	r2,zero,22894 <strlen+0x90>
   22814:	2005883a 	mov	r2,r4
   22818:	00000206 	br	22824 <strlen+0x20>
   2281c:	10c00007 	ldb	r3,0(r2)
   22820:	18001826 	beq	r3,zero,22884 <strlen+0x80>
   22824:	10800044 	addi	r2,r2,1
   22828:	10c000cc 	andi	r3,r2,3
   2282c:	183ffb1e 	bne	r3,zero,2281c <__alt_data_end+0xfffe281c>
   22830:	10c00017 	ldw	r3,0(r2)
   22834:	01ffbff4 	movhi	r7,65279
   22838:	39ffbfc4 	addi	r7,r7,-257
   2283c:	00ca303a 	nor	r5,zero,r3
   22840:	01a02074 	movhi	r6,32897
   22844:	19c7883a 	add	r3,r3,r7
   22848:	31a02004 	addi	r6,r6,-32640
   2284c:	1946703a 	and	r3,r3,r5
   22850:	1986703a 	and	r3,r3,r6
   22854:	1800091e 	bne	r3,zero,2287c <strlen+0x78>
   22858:	10800104 	addi	r2,r2,4
   2285c:	10c00017 	ldw	r3,0(r2)
   22860:	19cb883a 	add	r5,r3,r7
   22864:	00c6303a 	nor	r3,zero,r3
   22868:	28c6703a 	and	r3,r5,r3
   2286c:	1986703a 	and	r3,r3,r6
   22870:	183ff926 	beq	r3,zero,22858 <__alt_data_end+0xfffe2858>
   22874:	00000106 	br	2287c <strlen+0x78>
   22878:	10800044 	addi	r2,r2,1
   2287c:	10c00007 	ldb	r3,0(r2)
   22880:	183ffd1e 	bne	r3,zero,22878 <__alt_data_end+0xfffe2878>
   22884:	1105c83a 	sub	r2,r2,r4
   22888:	f800283a 	ret
   2288c:	2005883a 	mov	r2,r4
   22890:	003fe706 	br	22830 <__alt_data_end+0xfffe2830>
   22894:	0005883a 	mov	r2,zero
   22898:	f800283a 	ret

0002289c <__swbuf_r>:
   2289c:	defffb04 	addi	sp,sp,-20
   228a0:	dcc00315 	stw	r19,12(sp)
   228a4:	dc800215 	stw	r18,8(sp)
   228a8:	dc000015 	stw	r16,0(sp)
   228ac:	dfc00415 	stw	ra,16(sp)
   228b0:	dc400115 	stw	r17,4(sp)
   228b4:	2025883a 	mov	r18,r4
   228b8:	2827883a 	mov	r19,r5
   228bc:	3021883a 	mov	r16,r6
   228c0:	20000226 	beq	r4,zero,228cc <__swbuf_r+0x30>
   228c4:	20800e17 	ldw	r2,56(r4)
   228c8:	10004226 	beq	r2,zero,229d4 <__swbuf_r+0x138>
   228cc:	80800617 	ldw	r2,24(r16)
   228d0:	8100030b 	ldhu	r4,12(r16)
   228d4:	80800215 	stw	r2,8(r16)
   228d8:	2080020c 	andi	r2,r4,8
   228dc:	10003626 	beq	r2,zero,229b8 <__swbuf_r+0x11c>
   228e0:	80c00417 	ldw	r3,16(r16)
   228e4:	18003426 	beq	r3,zero,229b8 <__swbuf_r+0x11c>
   228e8:	2088000c 	andi	r2,r4,8192
   228ec:	9c403fcc 	andi	r17,r19,255
   228f0:	10001a26 	beq	r2,zero,2295c <__swbuf_r+0xc0>
   228f4:	80800017 	ldw	r2,0(r16)
   228f8:	81000517 	ldw	r4,20(r16)
   228fc:	10c7c83a 	sub	r3,r2,r3
   22900:	1900200e 	bge	r3,r4,22984 <__swbuf_r+0xe8>
   22904:	18c00044 	addi	r3,r3,1
   22908:	81000217 	ldw	r4,8(r16)
   2290c:	11400044 	addi	r5,r2,1
   22910:	81400015 	stw	r5,0(r16)
   22914:	213fffc4 	addi	r4,r4,-1
   22918:	81000215 	stw	r4,8(r16)
   2291c:	14c00005 	stb	r19,0(r2)
   22920:	80800517 	ldw	r2,20(r16)
   22924:	10c01e26 	beq	r2,r3,229a0 <__swbuf_r+0x104>
   22928:	8080030b 	ldhu	r2,12(r16)
   2292c:	1080004c 	andi	r2,r2,1
   22930:	10000226 	beq	r2,zero,2293c <__swbuf_r+0xa0>
   22934:	00800284 	movi	r2,10
   22938:	88801926 	beq	r17,r2,229a0 <__swbuf_r+0x104>
   2293c:	8805883a 	mov	r2,r17
   22940:	dfc00417 	ldw	ra,16(sp)
   22944:	dcc00317 	ldw	r19,12(sp)
   22948:	dc800217 	ldw	r18,8(sp)
   2294c:	dc400117 	ldw	r17,4(sp)
   22950:	dc000017 	ldw	r16,0(sp)
   22954:	dec00504 	addi	sp,sp,20
   22958:	f800283a 	ret
   2295c:	81401917 	ldw	r5,100(r16)
   22960:	00b7ffc4 	movi	r2,-8193
   22964:	21080014 	ori	r4,r4,8192
   22968:	2884703a 	and	r2,r5,r2
   2296c:	80801915 	stw	r2,100(r16)
   22970:	80800017 	ldw	r2,0(r16)
   22974:	8100030d 	sth	r4,12(r16)
   22978:	81000517 	ldw	r4,20(r16)
   2297c:	10c7c83a 	sub	r3,r2,r3
   22980:	193fe016 	blt	r3,r4,22904 <__alt_data_end+0xfffe2904>
   22984:	800b883a 	mov	r5,r16
   22988:	9009883a 	mov	r4,r18
   2298c:	0022ffc0 	call	22ffc <_fflush_r>
   22990:	1000071e 	bne	r2,zero,229b0 <__swbuf_r+0x114>
   22994:	80800017 	ldw	r2,0(r16)
   22998:	00c00044 	movi	r3,1
   2299c:	003fda06 	br	22908 <__alt_data_end+0xfffe2908>
   229a0:	800b883a 	mov	r5,r16
   229a4:	9009883a 	mov	r4,r18
   229a8:	0022ffc0 	call	22ffc <_fflush_r>
   229ac:	103fe326 	beq	r2,zero,2293c <__alt_data_end+0xfffe293c>
   229b0:	00bfffc4 	movi	r2,-1
   229b4:	003fe206 	br	22940 <__alt_data_end+0xfffe2940>
   229b8:	800b883a 	mov	r5,r16
   229bc:	9009883a 	mov	r4,r18
   229c0:	00229f40 	call	229f4 <__swsetup_r>
   229c4:	103ffa1e 	bne	r2,zero,229b0 <__alt_data_end+0xfffe29b0>
   229c8:	8100030b 	ldhu	r4,12(r16)
   229cc:	80c00417 	ldw	r3,16(r16)
   229d0:	003fc506 	br	228e8 <__alt_data_end+0xfffe28e8>
   229d4:	00233d80 	call	233d8 <__sinit>
   229d8:	003fbc06 	br	228cc <__alt_data_end+0xfffe28cc>

000229dc <__swbuf>:
   229dc:	008000b4 	movhi	r2,2
   229e0:	109ae104 	addi	r2,r2,27524
   229e4:	280d883a 	mov	r6,r5
   229e8:	200b883a 	mov	r5,r4
   229ec:	11000017 	ldw	r4,0(r2)
   229f0:	002289c1 	jmpi	2289c <__swbuf_r>

000229f4 <__swsetup_r>:
   229f4:	008000b4 	movhi	r2,2
   229f8:	defffd04 	addi	sp,sp,-12
   229fc:	109ae104 	addi	r2,r2,27524
   22a00:	dc400115 	stw	r17,4(sp)
   22a04:	2023883a 	mov	r17,r4
   22a08:	11000017 	ldw	r4,0(r2)
   22a0c:	dc000015 	stw	r16,0(sp)
   22a10:	dfc00215 	stw	ra,8(sp)
   22a14:	2821883a 	mov	r16,r5
   22a18:	20000226 	beq	r4,zero,22a24 <__swsetup_r+0x30>
   22a1c:	20800e17 	ldw	r2,56(r4)
   22a20:	10003126 	beq	r2,zero,22ae8 <__swsetup_r+0xf4>
   22a24:	8080030b 	ldhu	r2,12(r16)
   22a28:	10c0020c 	andi	r3,r2,8
   22a2c:	1009883a 	mov	r4,r2
   22a30:	18000f26 	beq	r3,zero,22a70 <__swsetup_r+0x7c>
   22a34:	80c00417 	ldw	r3,16(r16)
   22a38:	18001526 	beq	r3,zero,22a90 <__swsetup_r+0x9c>
   22a3c:	1100004c 	andi	r4,r2,1
   22a40:	20001c1e 	bne	r4,zero,22ab4 <__swsetup_r+0xc0>
   22a44:	1080008c 	andi	r2,r2,2
   22a48:	1000291e 	bne	r2,zero,22af0 <__swsetup_r+0xfc>
   22a4c:	80800517 	ldw	r2,20(r16)
   22a50:	80800215 	stw	r2,8(r16)
   22a54:	18001c26 	beq	r3,zero,22ac8 <__swsetup_r+0xd4>
   22a58:	0005883a 	mov	r2,zero
   22a5c:	dfc00217 	ldw	ra,8(sp)
   22a60:	dc400117 	ldw	r17,4(sp)
   22a64:	dc000017 	ldw	r16,0(sp)
   22a68:	dec00304 	addi	sp,sp,12
   22a6c:	f800283a 	ret
   22a70:	2080040c 	andi	r2,r4,16
   22a74:	10002e26 	beq	r2,zero,22b30 <__swsetup_r+0x13c>
   22a78:	2080010c 	andi	r2,r4,4
   22a7c:	10001e1e 	bne	r2,zero,22af8 <__swsetup_r+0x104>
   22a80:	80c00417 	ldw	r3,16(r16)
   22a84:	20800214 	ori	r2,r4,8
   22a88:	8080030d 	sth	r2,12(r16)
   22a8c:	183feb1e 	bne	r3,zero,22a3c <__alt_data_end+0xfffe2a3c>
   22a90:	1100a00c 	andi	r4,r2,640
   22a94:	01408004 	movi	r5,512
   22a98:	217fe826 	beq	r4,r5,22a3c <__alt_data_end+0xfffe2a3c>
   22a9c:	800b883a 	mov	r5,r16
   22aa0:	8809883a 	mov	r4,r17
   22aa4:	00239e40 	call	239e4 <__smakebuf_r>
   22aa8:	8080030b 	ldhu	r2,12(r16)
   22aac:	80c00417 	ldw	r3,16(r16)
   22ab0:	003fe206 	br	22a3c <__alt_data_end+0xfffe2a3c>
   22ab4:	80800517 	ldw	r2,20(r16)
   22ab8:	80000215 	stw	zero,8(r16)
   22abc:	0085c83a 	sub	r2,zero,r2
   22ac0:	80800615 	stw	r2,24(r16)
   22ac4:	183fe41e 	bne	r3,zero,22a58 <__alt_data_end+0xfffe2a58>
   22ac8:	80c0030b 	ldhu	r3,12(r16)
   22acc:	0005883a 	mov	r2,zero
   22ad0:	1900200c 	andi	r4,r3,128
   22ad4:	203fe126 	beq	r4,zero,22a5c <__alt_data_end+0xfffe2a5c>
   22ad8:	18c01014 	ori	r3,r3,64
   22adc:	80c0030d 	sth	r3,12(r16)
   22ae0:	00bfffc4 	movi	r2,-1
   22ae4:	003fdd06 	br	22a5c <__alt_data_end+0xfffe2a5c>
   22ae8:	00233d80 	call	233d8 <__sinit>
   22aec:	003fcd06 	br	22a24 <__alt_data_end+0xfffe2a24>
   22af0:	0005883a 	mov	r2,zero
   22af4:	003fd606 	br	22a50 <__alt_data_end+0xfffe2a50>
   22af8:	81400c17 	ldw	r5,48(r16)
   22afc:	28000626 	beq	r5,zero,22b18 <__swsetup_r+0x124>
   22b00:	80801004 	addi	r2,r16,64
   22b04:	28800326 	beq	r5,r2,22b14 <__swsetup_r+0x120>
   22b08:	8809883a 	mov	r4,r17
   22b0c:	002354c0 	call	2354c <_free_r>
   22b10:	8100030b 	ldhu	r4,12(r16)
   22b14:	80000c15 	stw	zero,48(r16)
   22b18:	80c00417 	ldw	r3,16(r16)
   22b1c:	00bff6c4 	movi	r2,-37
   22b20:	1108703a 	and	r4,r2,r4
   22b24:	80000115 	stw	zero,4(r16)
   22b28:	80c00015 	stw	r3,0(r16)
   22b2c:	003fd506 	br	22a84 <__alt_data_end+0xfffe2a84>
   22b30:	00800244 	movi	r2,9
   22b34:	88800015 	stw	r2,0(r17)
   22b38:	20801014 	ori	r2,r4,64
   22b3c:	8080030d 	sth	r2,12(r16)
   22b40:	00bfffc4 	movi	r2,-1
   22b44:	003fc506 	br	22a5c <__alt_data_end+0xfffe2a5c>

00022b48 <__register_exitproc>:
   22b48:	defffa04 	addi	sp,sp,-24
   22b4c:	dc000315 	stw	r16,12(sp)
   22b50:	040000b4 	movhi	r16,2
   22b54:	841ae004 	addi	r16,r16,27520
   22b58:	80c00017 	ldw	r3,0(r16)
   22b5c:	dc400415 	stw	r17,16(sp)
   22b60:	dfc00515 	stw	ra,20(sp)
   22b64:	18805217 	ldw	r2,328(r3)
   22b68:	2023883a 	mov	r17,r4
   22b6c:	10003726 	beq	r2,zero,22c4c <__register_exitproc+0x104>
   22b70:	10c00117 	ldw	r3,4(r2)
   22b74:	010007c4 	movi	r4,31
   22b78:	20c00e16 	blt	r4,r3,22bb4 <__register_exitproc+0x6c>
   22b7c:	1a000044 	addi	r8,r3,1
   22b80:	8800221e 	bne	r17,zero,22c0c <__register_exitproc+0xc4>
   22b84:	18c00084 	addi	r3,r3,2
   22b88:	18c7883a 	add	r3,r3,r3
   22b8c:	18c7883a 	add	r3,r3,r3
   22b90:	12000115 	stw	r8,4(r2)
   22b94:	10c7883a 	add	r3,r2,r3
   22b98:	19400015 	stw	r5,0(r3)
   22b9c:	0005883a 	mov	r2,zero
   22ba0:	dfc00517 	ldw	ra,20(sp)
   22ba4:	dc400417 	ldw	r17,16(sp)
   22ba8:	dc000317 	ldw	r16,12(sp)
   22bac:	dec00604 	addi	sp,sp,24
   22bb0:	f800283a 	ret
   22bb4:	00800034 	movhi	r2,0
   22bb8:	10800004 	addi	r2,r2,0
   22bbc:	10002626 	beq	r2,zero,22c58 <__register_exitproc+0x110>
   22bc0:	01006404 	movi	r4,400
   22bc4:	d9400015 	stw	r5,0(sp)
   22bc8:	d9800115 	stw	r6,4(sp)
   22bcc:	d9c00215 	stw	r7,8(sp)
   22bd0:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>
   22bd4:	d9400017 	ldw	r5,0(sp)
   22bd8:	d9800117 	ldw	r6,4(sp)
   22bdc:	d9c00217 	ldw	r7,8(sp)
   22be0:	10001d26 	beq	r2,zero,22c58 <__register_exitproc+0x110>
   22be4:	81000017 	ldw	r4,0(r16)
   22be8:	10000115 	stw	zero,4(r2)
   22bec:	02000044 	movi	r8,1
   22bf0:	22405217 	ldw	r9,328(r4)
   22bf4:	0007883a 	mov	r3,zero
   22bf8:	12400015 	stw	r9,0(r2)
   22bfc:	20805215 	stw	r2,328(r4)
   22c00:	10006215 	stw	zero,392(r2)
   22c04:	10006315 	stw	zero,396(r2)
   22c08:	883fde26 	beq	r17,zero,22b84 <__alt_data_end+0xfffe2b84>
   22c0c:	18c9883a 	add	r4,r3,r3
   22c10:	2109883a 	add	r4,r4,r4
   22c14:	1109883a 	add	r4,r2,r4
   22c18:	21802215 	stw	r6,136(r4)
   22c1c:	01800044 	movi	r6,1
   22c20:	12406217 	ldw	r9,392(r2)
   22c24:	30cc983a 	sll	r6,r6,r3
   22c28:	4992b03a 	or	r9,r9,r6
   22c2c:	12406215 	stw	r9,392(r2)
   22c30:	21c04215 	stw	r7,264(r4)
   22c34:	01000084 	movi	r4,2
   22c38:	893fd21e 	bne	r17,r4,22b84 <__alt_data_end+0xfffe2b84>
   22c3c:	11006317 	ldw	r4,396(r2)
   22c40:	218cb03a 	or	r6,r4,r6
   22c44:	11806315 	stw	r6,396(r2)
   22c48:	003fce06 	br	22b84 <__alt_data_end+0xfffe2b84>
   22c4c:	18805304 	addi	r2,r3,332
   22c50:	18805215 	stw	r2,328(r3)
   22c54:	003fc606 	br	22b70 <__alt_data_end+0xfffe2b70>
   22c58:	00bfffc4 	movi	r2,-1
   22c5c:	003fd006 	br	22ba0 <__alt_data_end+0xfffe2ba0>

00022c60 <__call_exitprocs>:
   22c60:	defff504 	addi	sp,sp,-44
   22c64:	df000915 	stw	fp,36(sp)
   22c68:	dd400615 	stw	r21,24(sp)
   22c6c:	dc800315 	stw	r18,12(sp)
   22c70:	dfc00a15 	stw	ra,40(sp)
   22c74:	ddc00815 	stw	r23,32(sp)
   22c78:	dd800715 	stw	r22,28(sp)
   22c7c:	dd000515 	stw	r20,20(sp)
   22c80:	dcc00415 	stw	r19,16(sp)
   22c84:	dc400215 	stw	r17,8(sp)
   22c88:	dc000115 	stw	r16,4(sp)
   22c8c:	d9000015 	stw	r4,0(sp)
   22c90:	2839883a 	mov	fp,r5
   22c94:	04800044 	movi	r18,1
   22c98:	057fffc4 	movi	r21,-1
   22c9c:	008000b4 	movhi	r2,2
   22ca0:	109ae004 	addi	r2,r2,27520
   22ca4:	12000017 	ldw	r8,0(r2)
   22ca8:	45005217 	ldw	r20,328(r8)
   22cac:	44c05204 	addi	r19,r8,328
   22cb0:	a0001c26 	beq	r20,zero,22d24 <__call_exitprocs+0xc4>
   22cb4:	a0800117 	ldw	r2,4(r20)
   22cb8:	15ffffc4 	addi	r23,r2,-1
   22cbc:	b8000d16 	blt	r23,zero,22cf4 <__call_exitprocs+0x94>
   22cc0:	14000044 	addi	r16,r2,1
   22cc4:	8421883a 	add	r16,r16,r16
   22cc8:	8421883a 	add	r16,r16,r16
   22ccc:	84402004 	addi	r17,r16,128
   22cd0:	a463883a 	add	r17,r20,r17
   22cd4:	a421883a 	add	r16,r20,r16
   22cd8:	e0001e26 	beq	fp,zero,22d54 <__call_exitprocs+0xf4>
   22cdc:	80804017 	ldw	r2,256(r16)
   22ce0:	e0801c26 	beq	fp,r2,22d54 <__call_exitprocs+0xf4>
   22ce4:	bdffffc4 	addi	r23,r23,-1
   22ce8:	843fff04 	addi	r16,r16,-4
   22cec:	8c7fff04 	addi	r17,r17,-4
   22cf0:	bd7ff91e 	bne	r23,r21,22cd8 <__alt_data_end+0xfffe2cd8>
   22cf4:	00800034 	movhi	r2,0
   22cf8:	10800004 	addi	r2,r2,0
   22cfc:	10000926 	beq	r2,zero,22d24 <__call_exitprocs+0xc4>
   22d00:	a0800117 	ldw	r2,4(r20)
   22d04:	1000301e 	bne	r2,zero,22dc8 <__call_exitprocs+0x168>
   22d08:	a0800017 	ldw	r2,0(r20)
   22d0c:	10003226 	beq	r2,zero,22dd8 <__call_exitprocs+0x178>
   22d10:	a009883a 	mov	r4,r20
   22d14:	98800015 	stw	r2,0(r19)
   22d18:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>
   22d1c:	9d000017 	ldw	r20,0(r19)
   22d20:	a03fe41e 	bne	r20,zero,22cb4 <__alt_data_end+0xfffe2cb4>
   22d24:	dfc00a17 	ldw	ra,40(sp)
   22d28:	df000917 	ldw	fp,36(sp)
   22d2c:	ddc00817 	ldw	r23,32(sp)
   22d30:	dd800717 	ldw	r22,28(sp)
   22d34:	dd400617 	ldw	r21,24(sp)
   22d38:	dd000517 	ldw	r20,20(sp)
   22d3c:	dcc00417 	ldw	r19,16(sp)
   22d40:	dc800317 	ldw	r18,12(sp)
   22d44:	dc400217 	ldw	r17,8(sp)
   22d48:	dc000117 	ldw	r16,4(sp)
   22d4c:	dec00b04 	addi	sp,sp,44
   22d50:	f800283a 	ret
   22d54:	a0800117 	ldw	r2,4(r20)
   22d58:	80c00017 	ldw	r3,0(r16)
   22d5c:	10bfffc4 	addi	r2,r2,-1
   22d60:	15c01426 	beq	r2,r23,22db4 <__call_exitprocs+0x154>
   22d64:	80000015 	stw	zero,0(r16)
   22d68:	183fde26 	beq	r3,zero,22ce4 <__alt_data_end+0xfffe2ce4>
   22d6c:	95c8983a 	sll	r4,r18,r23
   22d70:	a0806217 	ldw	r2,392(r20)
   22d74:	a5800117 	ldw	r22,4(r20)
   22d78:	2084703a 	and	r2,r4,r2
   22d7c:	10000b26 	beq	r2,zero,22dac <__call_exitprocs+0x14c>
   22d80:	a0806317 	ldw	r2,396(r20)
   22d84:	2088703a 	and	r4,r4,r2
   22d88:	20000c1e 	bne	r4,zero,22dbc <__call_exitprocs+0x15c>
   22d8c:	89400017 	ldw	r5,0(r17)
   22d90:	d9000017 	ldw	r4,0(sp)
   22d94:	183ee83a 	callr	r3
   22d98:	a0800117 	ldw	r2,4(r20)
   22d9c:	15bfbf1e 	bne	r2,r22,22c9c <__alt_data_end+0xfffe2c9c>
   22da0:	98800017 	ldw	r2,0(r19)
   22da4:	153fcf26 	beq	r2,r20,22ce4 <__alt_data_end+0xfffe2ce4>
   22da8:	003fbc06 	br	22c9c <__alt_data_end+0xfffe2c9c>
   22dac:	183ee83a 	callr	r3
   22db0:	003ff906 	br	22d98 <__alt_data_end+0xfffe2d98>
   22db4:	a5c00115 	stw	r23,4(r20)
   22db8:	003feb06 	br	22d68 <__alt_data_end+0xfffe2d68>
   22dbc:	89000017 	ldw	r4,0(r17)
   22dc0:	183ee83a 	callr	r3
   22dc4:	003ff406 	br	22d98 <__alt_data_end+0xfffe2d98>
   22dc8:	a0800017 	ldw	r2,0(r20)
   22dcc:	a027883a 	mov	r19,r20
   22dd0:	1029883a 	mov	r20,r2
   22dd4:	003fb606 	br	22cb0 <__alt_data_end+0xfffe2cb0>
   22dd8:	0005883a 	mov	r2,zero
   22ddc:	003ffb06 	br	22dcc <__alt_data_end+0xfffe2dcc>

00022de0 <__sflush_r>:
   22de0:	2880030b 	ldhu	r2,12(r5)
   22de4:	defffb04 	addi	sp,sp,-20
   22de8:	dcc00315 	stw	r19,12(sp)
   22dec:	dc400115 	stw	r17,4(sp)
   22df0:	dfc00415 	stw	ra,16(sp)
   22df4:	dc800215 	stw	r18,8(sp)
   22df8:	dc000015 	stw	r16,0(sp)
   22dfc:	10c0020c 	andi	r3,r2,8
   22e00:	2823883a 	mov	r17,r5
   22e04:	2027883a 	mov	r19,r4
   22e08:	1800311e 	bne	r3,zero,22ed0 <__sflush_r+0xf0>
   22e0c:	28c00117 	ldw	r3,4(r5)
   22e10:	10820014 	ori	r2,r2,2048
   22e14:	2880030d 	sth	r2,12(r5)
   22e18:	00c04b0e 	bge	zero,r3,22f48 <__sflush_r+0x168>
   22e1c:	8a000a17 	ldw	r8,40(r17)
   22e20:	40002326 	beq	r8,zero,22eb0 <__sflush_r+0xd0>
   22e24:	9c000017 	ldw	r16,0(r19)
   22e28:	10c4000c 	andi	r3,r2,4096
   22e2c:	98000015 	stw	zero,0(r19)
   22e30:	18004826 	beq	r3,zero,22f54 <__sflush_r+0x174>
   22e34:	89801417 	ldw	r6,80(r17)
   22e38:	10c0010c 	andi	r3,r2,4
   22e3c:	18000626 	beq	r3,zero,22e58 <__sflush_r+0x78>
   22e40:	88c00117 	ldw	r3,4(r17)
   22e44:	88800c17 	ldw	r2,48(r17)
   22e48:	30cdc83a 	sub	r6,r6,r3
   22e4c:	10000226 	beq	r2,zero,22e58 <__sflush_r+0x78>
   22e50:	88800f17 	ldw	r2,60(r17)
   22e54:	308dc83a 	sub	r6,r6,r2
   22e58:	89400717 	ldw	r5,28(r17)
   22e5c:	000f883a 	mov	r7,zero
   22e60:	9809883a 	mov	r4,r19
   22e64:	403ee83a 	callr	r8
   22e68:	00ffffc4 	movi	r3,-1
   22e6c:	10c04426 	beq	r2,r3,22f80 <__sflush_r+0x1a0>
   22e70:	88c0030b 	ldhu	r3,12(r17)
   22e74:	89000417 	ldw	r4,16(r17)
   22e78:	88000115 	stw	zero,4(r17)
   22e7c:	197dffcc 	andi	r5,r3,63487
   22e80:	8940030d 	sth	r5,12(r17)
   22e84:	89000015 	stw	r4,0(r17)
   22e88:	18c4000c 	andi	r3,r3,4096
   22e8c:	18002c1e 	bne	r3,zero,22f40 <__sflush_r+0x160>
   22e90:	89400c17 	ldw	r5,48(r17)
   22e94:	9c000015 	stw	r16,0(r19)
   22e98:	28000526 	beq	r5,zero,22eb0 <__sflush_r+0xd0>
   22e9c:	88801004 	addi	r2,r17,64
   22ea0:	28800226 	beq	r5,r2,22eac <__sflush_r+0xcc>
   22ea4:	9809883a 	mov	r4,r19
   22ea8:	002354c0 	call	2354c <_free_r>
   22eac:	88000c15 	stw	zero,48(r17)
   22eb0:	0005883a 	mov	r2,zero
   22eb4:	dfc00417 	ldw	ra,16(sp)
   22eb8:	dcc00317 	ldw	r19,12(sp)
   22ebc:	dc800217 	ldw	r18,8(sp)
   22ec0:	dc400117 	ldw	r17,4(sp)
   22ec4:	dc000017 	ldw	r16,0(sp)
   22ec8:	dec00504 	addi	sp,sp,20
   22ecc:	f800283a 	ret
   22ed0:	2c800417 	ldw	r18,16(r5)
   22ed4:	903ff626 	beq	r18,zero,22eb0 <__alt_data_end+0xfffe2eb0>
   22ed8:	2c000017 	ldw	r16,0(r5)
   22edc:	108000cc 	andi	r2,r2,3
   22ee0:	2c800015 	stw	r18,0(r5)
   22ee4:	84a1c83a 	sub	r16,r16,r18
   22ee8:	1000131e 	bne	r2,zero,22f38 <__sflush_r+0x158>
   22eec:	28800517 	ldw	r2,20(r5)
   22ef0:	88800215 	stw	r2,8(r17)
   22ef4:	04000316 	blt	zero,r16,22f04 <__sflush_r+0x124>
   22ef8:	003fed06 	br	22eb0 <__alt_data_end+0xfffe2eb0>
   22efc:	90a5883a 	add	r18,r18,r2
   22f00:	043feb0e 	bge	zero,r16,22eb0 <__alt_data_end+0xfffe2eb0>
   22f04:	88800917 	ldw	r2,36(r17)
   22f08:	89400717 	ldw	r5,28(r17)
   22f0c:	800f883a 	mov	r7,r16
   22f10:	900d883a 	mov	r6,r18
   22f14:	9809883a 	mov	r4,r19
   22f18:	103ee83a 	callr	r2
   22f1c:	80a1c83a 	sub	r16,r16,r2
   22f20:	00bff616 	blt	zero,r2,22efc <__alt_data_end+0xfffe2efc>
   22f24:	88c0030b 	ldhu	r3,12(r17)
   22f28:	00bfffc4 	movi	r2,-1
   22f2c:	18c01014 	ori	r3,r3,64
   22f30:	88c0030d 	sth	r3,12(r17)
   22f34:	003fdf06 	br	22eb4 <__alt_data_end+0xfffe2eb4>
   22f38:	0005883a 	mov	r2,zero
   22f3c:	003fec06 	br	22ef0 <__alt_data_end+0xfffe2ef0>
   22f40:	88801415 	stw	r2,80(r17)
   22f44:	003fd206 	br	22e90 <__alt_data_end+0xfffe2e90>
   22f48:	28c00f17 	ldw	r3,60(r5)
   22f4c:	00ffb316 	blt	zero,r3,22e1c <__alt_data_end+0xfffe2e1c>
   22f50:	003fd706 	br	22eb0 <__alt_data_end+0xfffe2eb0>
   22f54:	89400717 	ldw	r5,28(r17)
   22f58:	000d883a 	mov	r6,zero
   22f5c:	01c00044 	movi	r7,1
   22f60:	9809883a 	mov	r4,r19
   22f64:	403ee83a 	callr	r8
   22f68:	100d883a 	mov	r6,r2
   22f6c:	00bfffc4 	movi	r2,-1
   22f70:	30801426 	beq	r6,r2,22fc4 <__sflush_r+0x1e4>
   22f74:	8880030b 	ldhu	r2,12(r17)
   22f78:	8a000a17 	ldw	r8,40(r17)
   22f7c:	003fae06 	br	22e38 <__alt_data_end+0xfffe2e38>
   22f80:	98c00017 	ldw	r3,0(r19)
   22f84:	183fba26 	beq	r3,zero,22e70 <__alt_data_end+0xfffe2e70>
   22f88:	01000744 	movi	r4,29
   22f8c:	19000626 	beq	r3,r4,22fa8 <__sflush_r+0x1c8>
   22f90:	01000584 	movi	r4,22
   22f94:	19000426 	beq	r3,r4,22fa8 <__sflush_r+0x1c8>
   22f98:	88c0030b 	ldhu	r3,12(r17)
   22f9c:	18c01014 	ori	r3,r3,64
   22fa0:	88c0030d 	sth	r3,12(r17)
   22fa4:	003fc306 	br	22eb4 <__alt_data_end+0xfffe2eb4>
   22fa8:	8880030b 	ldhu	r2,12(r17)
   22fac:	88c00417 	ldw	r3,16(r17)
   22fb0:	88000115 	stw	zero,4(r17)
   22fb4:	10bdffcc 	andi	r2,r2,63487
   22fb8:	8880030d 	sth	r2,12(r17)
   22fbc:	88c00015 	stw	r3,0(r17)
   22fc0:	003fb306 	br	22e90 <__alt_data_end+0xfffe2e90>
   22fc4:	98800017 	ldw	r2,0(r19)
   22fc8:	103fea26 	beq	r2,zero,22f74 <__alt_data_end+0xfffe2f74>
   22fcc:	00c00744 	movi	r3,29
   22fd0:	10c00226 	beq	r2,r3,22fdc <__sflush_r+0x1fc>
   22fd4:	00c00584 	movi	r3,22
   22fd8:	10c0031e 	bne	r2,r3,22fe8 <__sflush_r+0x208>
   22fdc:	9c000015 	stw	r16,0(r19)
   22fe0:	0005883a 	mov	r2,zero
   22fe4:	003fb306 	br	22eb4 <__alt_data_end+0xfffe2eb4>
   22fe8:	88c0030b 	ldhu	r3,12(r17)
   22fec:	3005883a 	mov	r2,r6
   22ff0:	18c01014 	ori	r3,r3,64
   22ff4:	88c0030d 	sth	r3,12(r17)
   22ff8:	003fae06 	br	22eb4 <__alt_data_end+0xfffe2eb4>

00022ffc <_fflush_r>:
   22ffc:	defffd04 	addi	sp,sp,-12
   23000:	dc000115 	stw	r16,4(sp)
   23004:	dfc00215 	stw	ra,8(sp)
   23008:	2021883a 	mov	r16,r4
   2300c:	20000226 	beq	r4,zero,23018 <_fflush_r+0x1c>
   23010:	20800e17 	ldw	r2,56(r4)
   23014:	10000c26 	beq	r2,zero,23048 <_fflush_r+0x4c>
   23018:	2880030f 	ldh	r2,12(r5)
   2301c:	1000051e 	bne	r2,zero,23034 <_fflush_r+0x38>
   23020:	0005883a 	mov	r2,zero
   23024:	dfc00217 	ldw	ra,8(sp)
   23028:	dc000117 	ldw	r16,4(sp)
   2302c:	dec00304 	addi	sp,sp,12
   23030:	f800283a 	ret
   23034:	8009883a 	mov	r4,r16
   23038:	dfc00217 	ldw	ra,8(sp)
   2303c:	dc000117 	ldw	r16,4(sp)
   23040:	dec00304 	addi	sp,sp,12
   23044:	0022de01 	jmpi	22de0 <__sflush_r>
   23048:	d9400015 	stw	r5,0(sp)
   2304c:	00233d80 	call	233d8 <__sinit>
   23050:	d9400017 	ldw	r5,0(sp)
   23054:	003ff006 	br	23018 <__alt_data_end+0xfffe3018>

00023058 <fflush>:
   23058:	20000526 	beq	r4,zero,23070 <fflush+0x18>
   2305c:	008000b4 	movhi	r2,2
   23060:	109ae104 	addi	r2,r2,27524
   23064:	200b883a 	mov	r5,r4
   23068:	11000017 	ldw	r4,0(r2)
   2306c:	0022ffc1 	jmpi	22ffc <_fflush_r>
   23070:	008000b4 	movhi	r2,2
   23074:	109ae004 	addi	r2,r2,27520
   23078:	11000017 	ldw	r4,0(r2)
   2307c:	014000b4 	movhi	r5,2
   23080:	294bff04 	addi	r5,r5,12284
   23084:	00239201 	jmpi	23920 <_fwalk_reent>

00023088 <__fp_unlock>:
   23088:	0005883a 	mov	r2,zero
   2308c:	f800283a 	ret

00023090 <_cleanup_r>:
   23090:	014000b4 	movhi	r5,2
   23094:	2951c604 	addi	r5,r5,18200
   23098:	00239201 	jmpi	23920 <_fwalk_reent>

0002309c <__sinit.part.1>:
   2309c:	defff704 	addi	sp,sp,-36
   230a0:	00c000b4 	movhi	r3,2
   230a4:	dfc00815 	stw	ra,32(sp)
   230a8:	ddc00715 	stw	r23,28(sp)
   230ac:	dd800615 	stw	r22,24(sp)
   230b0:	dd400515 	stw	r21,20(sp)
   230b4:	dd000415 	stw	r20,16(sp)
   230b8:	dcc00315 	stw	r19,12(sp)
   230bc:	dc800215 	stw	r18,8(sp)
   230c0:	dc400115 	stw	r17,4(sp)
   230c4:	dc000015 	stw	r16,0(sp)
   230c8:	18cc2404 	addi	r3,r3,12432
   230cc:	24000117 	ldw	r16,4(r4)
   230d0:	20c00f15 	stw	r3,60(r4)
   230d4:	2080bb04 	addi	r2,r4,748
   230d8:	00c000c4 	movi	r3,3
   230dc:	20c0b915 	stw	r3,740(r4)
   230e0:	2080ba15 	stw	r2,744(r4)
   230e4:	2000b815 	stw	zero,736(r4)
   230e8:	05c00204 	movi	r23,8
   230ec:	00800104 	movi	r2,4
   230f0:	2025883a 	mov	r18,r4
   230f4:	b80d883a 	mov	r6,r23
   230f8:	81001704 	addi	r4,r16,92
   230fc:	000b883a 	mov	r5,zero
   23100:	80000015 	stw	zero,0(r16)
   23104:	80000115 	stw	zero,4(r16)
   23108:	80000215 	stw	zero,8(r16)
   2310c:	8080030d 	sth	r2,12(r16)
   23110:	80001915 	stw	zero,100(r16)
   23114:	8000038d 	sth	zero,14(r16)
   23118:	80000415 	stw	zero,16(r16)
   2311c:	80000515 	stw	zero,20(r16)
   23120:	80000615 	stw	zero,24(r16)
   23124:	00243ac0 	call	243ac <memset>
   23128:	058000b4 	movhi	r22,2
   2312c:	94400217 	ldw	r17,8(r18)
   23130:	054000b4 	movhi	r21,2
   23134:	050000b4 	movhi	r20,2
   23138:	04c000b4 	movhi	r19,2
   2313c:	b5914a04 	addi	r22,r22,17704
   23140:	ad516104 	addi	r21,r21,17796
   23144:	a5118004 	addi	r20,r20,17920
   23148:	9cd19704 	addi	r19,r19,18012
   2314c:	85800815 	stw	r22,32(r16)
   23150:	85400915 	stw	r21,36(r16)
   23154:	85000a15 	stw	r20,40(r16)
   23158:	84c00b15 	stw	r19,44(r16)
   2315c:	84000715 	stw	r16,28(r16)
   23160:	00800284 	movi	r2,10
   23164:	8880030d 	sth	r2,12(r17)
   23168:	00800044 	movi	r2,1
   2316c:	b80d883a 	mov	r6,r23
   23170:	89001704 	addi	r4,r17,92
   23174:	000b883a 	mov	r5,zero
   23178:	88000015 	stw	zero,0(r17)
   2317c:	88000115 	stw	zero,4(r17)
   23180:	88000215 	stw	zero,8(r17)
   23184:	88001915 	stw	zero,100(r17)
   23188:	8880038d 	sth	r2,14(r17)
   2318c:	88000415 	stw	zero,16(r17)
   23190:	88000515 	stw	zero,20(r17)
   23194:	88000615 	stw	zero,24(r17)
   23198:	00243ac0 	call	243ac <memset>
   2319c:	94000317 	ldw	r16,12(r18)
   231a0:	00800484 	movi	r2,18
   231a4:	8c400715 	stw	r17,28(r17)
   231a8:	8d800815 	stw	r22,32(r17)
   231ac:	8d400915 	stw	r21,36(r17)
   231b0:	8d000a15 	stw	r20,40(r17)
   231b4:	8cc00b15 	stw	r19,44(r17)
   231b8:	8080030d 	sth	r2,12(r16)
   231bc:	00800084 	movi	r2,2
   231c0:	80000015 	stw	zero,0(r16)
   231c4:	80000115 	stw	zero,4(r16)
   231c8:	80000215 	stw	zero,8(r16)
   231cc:	80001915 	stw	zero,100(r16)
   231d0:	8080038d 	sth	r2,14(r16)
   231d4:	80000415 	stw	zero,16(r16)
   231d8:	80000515 	stw	zero,20(r16)
   231dc:	80000615 	stw	zero,24(r16)
   231e0:	b80d883a 	mov	r6,r23
   231e4:	000b883a 	mov	r5,zero
   231e8:	81001704 	addi	r4,r16,92
   231ec:	00243ac0 	call	243ac <memset>
   231f0:	00800044 	movi	r2,1
   231f4:	84000715 	stw	r16,28(r16)
   231f8:	85800815 	stw	r22,32(r16)
   231fc:	85400915 	stw	r21,36(r16)
   23200:	85000a15 	stw	r20,40(r16)
   23204:	84c00b15 	stw	r19,44(r16)
   23208:	90800e15 	stw	r2,56(r18)
   2320c:	dfc00817 	ldw	ra,32(sp)
   23210:	ddc00717 	ldw	r23,28(sp)
   23214:	dd800617 	ldw	r22,24(sp)
   23218:	dd400517 	ldw	r21,20(sp)
   2321c:	dd000417 	ldw	r20,16(sp)
   23220:	dcc00317 	ldw	r19,12(sp)
   23224:	dc800217 	ldw	r18,8(sp)
   23228:	dc400117 	ldw	r17,4(sp)
   2322c:	dc000017 	ldw	r16,0(sp)
   23230:	dec00904 	addi	sp,sp,36
   23234:	f800283a 	ret

00023238 <__fp_lock>:
   23238:	0005883a 	mov	r2,zero
   2323c:	f800283a 	ret

00023240 <__sfmoreglue>:
   23240:	defffc04 	addi	sp,sp,-16
   23244:	dc400115 	stw	r17,4(sp)
   23248:	2c7fffc4 	addi	r17,r5,-1
   2324c:	8c401a24 	muli	r17,r17,104
   23250:	dc800215 	stw	r18,8(sp)
   23254:	2825883a 	mov	r18,r5
   23258:	89401d04 	addi	r5,r17,116
   2325c:	dc000015 	stw	r16,0(sp)
   23260:	dfc00315 	stw	ra,12(sp)
   23264:	0023ba00 	call	23ba0 <_malloc_r>
   23268:	1021883a 	mov	r16,r2
   2326c:	10000726 	beq	r2,zero,2328c <__sfmoreglue+0x4c>
   23270:	11000304 	addi	r4,r2,12
   23274:	10000015 	stw	zero,0(r2)
   23278:	14800115 	stw	r18,4(r2)
   2327c:	11000215 	stw	r4,8(r2)
   23280:	89801a04 	addi	r6,r17,104
   23284:	000b883a 	mov	r5,zero
   23288:	00243ac0 	call	243ac <memset>
   2328c:	8005883a 	mov	r2,r16
   23290:	dfc00317 	ldw	ra,12(sp)
   23294:	dc800217 	ldw	r18,8(sp)
   23298:	dc400117 	ldw	r17,4(sp)
   2329c:	dc000017 	ldw	r16,0(sp)
   232a0:	dec00404 	addi	sp,sp,16
   232a4:	f800283a 	ret

000232a8 <__sfp>:
   232a8:	defffb04 	addi	sp,sp,-20
   232ac:	dc000015 	stw	r16,0(sp)
   232b0:	040000b4 	movhi	r16,2
   232b4:	841ae004 	addi	r16,r16,27520
   232b8:	dcc00315 	stw	r19,12(sp)
   232bc:	2027883a 	mov	r19,r4
   232c0:	81000017 	ldw	r4,0(r16)
   232c4:	dfc00415 	stw	ra,16(sp)
   232c8:	dc800215 	stw	r18,8(sp)
   232cc:	20800e17 	ldw	r2,56(r4)
   232d0:	dc400115 	stw	r17,4(sp)
   232d4:	1000021e 	bne	r2,zero,232e0 <__sfp+0x38>
   232d8:	002309c0 	call	2309c <__sinit.part.1>
   232dc:	81000017 	ldw	r4,0(r16)
   232e0:	2480b804 	addi	r18,r4,736
   232e4:	047fffc4 	movi	r17,-1
   232e8:	91000117 	ldw	r4,4(r18)
   232ec:	94000217 	ldw	r16,8(r18)
   232f0:	213fffc4 	addi	r4,r4,-1
   232f4:	20000a16 	blt	r4,zero,23320 <__sfp+0x78>
   232f8:	8080030f 	ldh	r2,12(r16)
   232fc:	10000c26 	beq	r2,zero,23330 <__sfp+0x88>
   23300:	80c01d04 	addi	r3,r16,116
   23304:	00000206 	br	23310 <__sfp+0x68>
   23308:	18bfe60f 	ldh	r2,-104(r3)
   2330c:	10000826 	beq	r2,zero,23330 <__sfp+0x88>
   23310:	213fffc4 	addi	r4,r4,-1
   23314:	1c3ffd04 	addi	r16,r3,-12
   23318:	18c01a04 	addi	r3,r3,104
   2331c:	247ffa1e 	bne	r4,r17,23308 <__alt_data_end+0xfffe3308>
   23320:	90800017 	ldw	r2,0(r18)
   23324:	10001d26 	beq	r2,zero,2339c <__sfp+0xf4>
   23328:	1025883a 	mov	r18,r2
   2332c:	003fee06 	br	232e8 <__alt_data_end+0xfffe32e8>
   23330:	00bfffc4 	movi	r2,-1
   23334:	8080038d 	sth	r2,14(r16)
   23338:	00800044 	movi	r2,1
   2333c:	8080030d 	sth	r2,12(r16)
   23340:	80001915 	stw	zero,100(r16)
   23344:	80000015 	stw	zero,0(r16)
   23348:	80000215 	stw	zero,8(r16)
   2334c:	80000115 	stw	zero,4(r16)
   23350:	80000415 	stw	zero,16(r16)
   23354:	80000515 	stw	zero,20(r16)
   23358:	80000615 	stw	zero,24(r16)
   2335c:	01800204 	movi	r6,8
   23360:	000b883a 	mov	r5,zero
   23364:	81001704 	addi	r4,r16,92
   23368:	00243ac0 	call	243ac <memset>
   2336c:	8005883a 	mov	r2,r16
   23370:	80000c15 	stw	zero,48(r16)
   23374:	80000d15 	stw	zero,52(r16)
   23378:	80001115 	stw	zero,68(r16)
   2337c:	80001215 	stw	zero,72(r16)
   23380:	dfc00417 	ldw	ra,16(sp)
   23384:	dcc00317 	ldw	r19,12(sp)
   23388:	dc800217 	ldw	r18,8(sp)
   2338c:	dc400117 	ldw	r17,4(sp)
   23390:	dc000017 	ldw	r16,0(sp)
   23394:	dec00504 	addi	sp,sp,20
   23398:	f800283a 	ret
   2339c:	01400104 	movi	r5,4
   233a0:	9809883a 	mov	r4,r19
   233a4:	00232400 	call	23240 <__sfmoreglue>
   233a8:	90800015 	stw	r2,0(r18)
   233ac:	103fde1e 	bne	r2,zero,23328 <__alt_data_end+0xfffe3328>
   233b0:	00800304 	movi	r2,12
   233b4:	98800015 	stw	r2,0(r19)
   233b8:	0005883a 	mov	r2,zero
   233bc:	003ff006 	br	23380 <__alt_data_end+0xfffe3380>

000233c0 <_cleanup>:
   233c0:	008000b4 	movhi	r2,2
   233c4:	109ae004 	addi	r2,r2,27520
   233c8:	11000017 	ldw	r4,0(r2)
   233cc:	014000b4 	movhi	r5,2
   233d0:	2951c604 	addi	r5,r5,18200
   233d4:	00239201 	jmpi	23920 <_fwalk_reent>

000233d8 <__sinit>:
   233d8:	20800e17 	ldw	r2,56(r4)
   233dc:	10000126 	beq	r2,zero,233e4 <__sinit+0xc>
   233e0:	f800283a 	ret
   233e4:	002309c1 	jmpi	2309c <__sinit.part.1>

000233e8 <__sfp_lock_acquire>:
   233e8:	f800283a 	ret

000233ec <__sfp_lock_release>:
   233ec:	f800283a 	ret

000233f0 <__sinit_lock_acquire>:
   233f0:	f800283a 	ret

000233f4 <__sinit_lock_release>:
   233f4:	f800283a 	ret

000233f8 <__fp_lock_all>:
   233f8:	008000b4 	movhi	r2,2
   233fc:	109ae104 	addi	r2,r2,27524
   23400:	11000017 	ldw	r4,0(r2)
   23404:	014000b4 	movhi	r5,2
   23408:	294c8e04 	addi	r5,r5,12856
   2340c:	002385c1 	jmpi	2385c <_fwalk>

00023410 <__fp_unlock_all>:
   23410:	008000b4 	movhi	r2,2
   23414:	109ae104 	addi	r2,r2,27524
   23418:	11000017 	ldw	r4,0(r2)
   2341c:	014000b4 	movhi	r5,2
   23420:	294c2204 	addi	r5,r5,12424
   23424:	002385c1 	jmpi	2385c <_fwalk>

00023428 <_malloc_trim_r>:
   23428:	defffb04 	addi	sp,sp,-20
   2342c:	dcc00315 	stw	r19,12(sp)
   23430:	04c000b4 	movhi	r19,2
   23434:	dc800215 	stw	r18,8(sp)
   23438:	dc400115 	stw	r17,4(sp)
   2343c:	dc000015 	stw	r16,0(sp)
   23440:	dfc00415 	stw	ra,16(sp)
   23444:	2821883a 	mov	r16,r5
   23448:	9cd9d504 	addi	r19,r19,26452
   2344c:	2025883a 	mov	r18,r4
   23450:	0024c9c0 	call	24c9c <__malloc_lock>
   23454:	98800217 	ldw	r2,8(r19)
   23458:	14400117 	ldw	r17,4(r2)
   2345c:	00bfff04 	movi	r2,-4
   23460:	88a2703a 	and	r17,r17,r2
   23464:	8c21c83a 	sub	r16,r17,r16
   23468:	8403fbc4 	addi	r16,r16,4079
   2346c:	8020d33a 	srli	r16,r16,12
   23470:	0083ffc4 	movi	r2,4095
   23474:	843fffc4 	addi	r16,r16,-1
   23478:	8020933a 	slli	r16,r16,12
   2347c:	1400060e 	bge	r2,r16,23498 <_malloc_trim_r+0x70>
   23480:	000b883a 	mov	r5,zero
   23484:	9009883a 	mov	r4,r18
   23488:	00244d40 	call	244d4 <_sbrk_r>
   2348c:	98c00217 	ldw	r3,8(r19)
   23490:	1c47883a 	add	r3,r3,r17
   23494:	10c00a26 	beq	r2,r3,234c0 <_malloc_trim_r+0x98>
   23498:	9009883a 	mov	r4,r18
   2349c:	0024cc00 	call	24cc0 <__malloc_unlock>
   234a0:	0005883a 	mov	r2,zero
   234a4:	dfc00417 	ldw	ra,16(sp)
   234a8:	dcc00317 	ldw	r19,12(sp)
   234ac:	dc800217 	ldw	r18,8(sp)
   234b0:	dc400117 	ldw	r17,4(sp)
   234b4:	dc000017 	ldw	r16,0(sp)
   234b8:	dec00504 	addi	sp,sp,20
   234bc:	f800283a 	ret
   234c0:	040bc83a 	sub	r5,zero,r16
   234c4:	9009883a 	mov	r4,r18
   234c8:	00244d40 	call	244d4 <_sbrk_r>
   234cc:	00ffffc4 	movi	r3,-1
   234d0:	10c00d26 	beq	r2,r3,23508 <_malloc_trim_r+0xe0>
   234d4:	00c000f4 	movhi	r3,3
   234d8:	18e18b04 	addi	r3,r3,-31188
   234dc:	18800017 	ldw	r2,0(r3)
   234e0:	99000217 	ldw	r4,8(r19)
   234e4:	8c23c83a 	sub	r17,r17,r16
   234e8:	8c400054 	ori	r17,r17,1
   234ec:	1421c83a 	sub	r16,r2,r16
   234f0:	24400115 	stw	r17,4(r4)
   234f4:	9009883a 	mov	r4,r18
   234f8:	1c000015 	stw	r16,0(r3)
   234fc:	0024cc00 	call	24cc0 <__malloc_unlock>
   23500:	00800044 	movi	r2,1
   23504:	003fe706 	br	234a4 <__alt_data_end+0xfffe34a4>
   23508:	000b883a 	mov	r5,zero
   2350c:	9009883a 	mov	r4,r18
   23510:	00244d40 	call	244d4 <_sbrk_r>
   23514:	99000217 	ldw	r4,8(r19)
   23518:	014003c4 	movi	r5,15
   2351c:	1107c83a 	sub	r3,r2,r4
   23520:	28ffdd0e 	bge	r5,r3,23498 <__alt_data_end+0xfffe3498>
   23524:	014000b4 	movhi	r5,2
   23528:	295ae204 	addi	r5,r5,27528
   2352c:	29400017 	ldw	r5,0(r5)
   23530:	18c00054 	ori	r3,r3,1
   23534:	20c00115 	stw	r3,4(r4)
   23538:	00c000f4 	movhi	r3,3
   2353c:	1145c83a 	sub	r2,r2,r5
   23540:	18e18b04 	addi	r3,r3,-31188
   23544:	18800015 	stw	r2,0(r3)
   23548:	003fd306 	br	23498 <__alt_data_end+0xfffe3498>

0002354c <_free_r>:
   2354c:	28004126 	beq	r5,zero,23654 <_free_r+0x108>
   23550:	defffd04 	addi	sp,sp,-12
   23554:	dc400115 	stw	r17,4(sp)
   23558:	dc000015 	stw	r16,0(sp)
   2355c:	2023883a 	mov	r17,r4
   23560:	2821883a 	mov	r16,r5
   23564:	dfc00215 	stw	ra,8(sp)
   23568:	0024c9c0 	call	24c9c <__malloc_lock>
   2356c:	81ffff17 	ldw	r7,-4(r16)
   23570:	00bfff84 	movi	r2,-2
   23574:	010000b4 	movhi	r4,2
   23578:	81bffe04 	addi	r6,r16,-8
   2357c:	3884703a 	and	r2,r7,r2
   23580:	2119d504 	addi	r4,r4,26452
   23584:	308b883a 	add	r5,r6,r2
   23588:	2a400117 	ldw	r9,4(r5)
   2358c:	22000217 	ldw	r8,8(r4)
   23590:	00ffff04 	movi	r3,-4
   23594:	48c6703a 	and	r3,r9,r3
   23598:	2a005726 	beq	r5,r8,236f8 <_free_r+0x1ac>
   2359c:	28c00115 	stw	r3,4(r5)
   235a0:	39c0004c 	andi	r7,r7,1
   235a4:	3800091e 	bne	r7,zero,235cc <_free_r+0x80>
   235a8:	823ffe17 	ldw	r8,-8(r16)
   235ac:	22400204 	addi	r9,r4,8
   235b0:	320dc83a 	sub	r6,r6,r8
   235b4:	31c00217 	ldw	r7,8(r6)
   235b8:	1205883a 	add	r2,r2,r8
   235bc:	3a406526 	beq	r7,r9,23754 <_free_r+0x208>
   235c0:	32000317 	ldw	r8,12(r6)
   235c4:	3a000315 	stw	r8,12(r7)
   235c8:	41c00215 	stw	r7,8(r8)
   235cc:	28cf883a 	add	r7,r5,r3
   235d0:	39c00117 	ldw	r7,4(r7)
   235d4:	39c0004c 	andi	r7,r7,1
   235d8:	38003a26 	beq	r7,zero,236c4 <_free_r+0x178>
   235dc:	10c00054 	ori	r3,r2,1
   235e0:	30c00115 	stw	r3,4(r6)
   235e4:	3087883a 	add	r3,r6,r2
   235e8:	18800015 	stw	r2,0(r3)
   235ec:	00c07fc4 	movi	r3,511
   235f0:	18801936 	bltu	r3,r2,23658 <_free_r+0x10c>
   235f4:	1004d0fa 	srli	r2,r2,3
   235f8:	01c00044 	movi	r7,1
   235fc:	21400117 	ldw	r5,4(r4)
   23600:	10c00044 	addi	r3,r2,1
   23604:	18c7883a 	add	r3,r3,r3
   23608:	1005d0ba 	srai	r2,r2,2
   2360c:	18c7883a 	add	r3,r3,r3
   23610:	18c7883a 	add	r3,r3,r3
   23614:	1907883a 	add	r3,r3,r4
   23618:	3884983a 	sll	r2,r7,r2
   2361c:	19c00017 	ldw	r7,0(r3)
   23620:	1a3ffe04 	addi	r8,r3,-8
   23624:	1144b03a 	or	r2,r2,r5
   23628:	32000315 	stw	r8,12(r6)
   2362c:	31c00215 	stw	r7,8(r6)
   23630:	20800115 	stw	r2,4(r4)
   23634:	19800015 	stw	r6,0(r3)
   23638:	39800315 	stw	r6,12(r7)
   2363c:	8809883a 	mov	r4,r17
   23640:	dfc00217 	ldw	ra,8(sp)
   23644:	dc400117 	ldw	r17,4(sp)
   23648:	dc000017 	ldw	r16,0(sp)
   2364c:	dec00304 	addi	sp,sp,12
   23650:	0024cc01 	jmpi	24cc0 <__malloc_unlock>
   23654:	f800283a 	ret
   23658:	100ad27a 	srli	r5,r2,9
   2365c:	00c00104 	movi	r3,4
   23660:	19404a36 	bltu	r3,r5,2378c <_free_r+0x240>
   23664:	100ad1ba 	srli	r5,r2,6
   23668:	28c00e44 	addi	r3,r5,57
   2366c:	18c7883a 	add	r3,r3,r3
   23670:	29400e04 	addi	r5,r5,56
   23674:	18c7883a 	add	r3,r3,r3
   23678:	18c7883a 	add	r3,r3,r3
   2367c:	1909883a 	add	r4,r3,r4
   23680:	20c00017 	ldw	r3,0(r4)
   23684:	01c000b4 	movhi	r7,2
   23688:	213ffe04 	addi	r4,r4,-8
   2368c:	39d9d504 	addi	r7,r7,26452
   23690:	20c04426 	beq	r4,r3,237a4 <_free_r+0x258>
   23694:	01ffff04 	movi	r7,-4
   23698:	19400117 	ldw	r5,4(r3)
   2369c:	29ca703a 	and	r5,r5,r7
   236a0:	1140022e 	bgeu	r2,r5,236ac <_free_r+0x160>
   236a4:	18c00217 	ldw	r3,8(r3)
   236a8:	20fffb1e 	bne	r4,r3,23698 <__alt_data_end+0xfffe3698>
   236ac:	19000317 	ldw	r4,12(r3)
   236b0:	31000315 	stw	r4,12(r6)
   236b4:	30c00215 	stw	r3,8(r6)
   236b8:	21800215 	stw	r6,8(r4)
   236bc:	19800315 	stw	r6,12(r3)
   236c0:	003fde06 	br	2363c <__alt_data_end+0xfffe363c>
   236c4:	29c00217 	ldw	r7,8(r5)
   236c8:	10c5883a 	add	r2,r2,r3
   236cc:	00c000b4 	movhi	r3,2
   236d0:	18d9d704 	addi	r3,r3,26460
   236d4:	38c03b26 	beq	r7,r3,237c4 <_free_r+0x278>
   236d8:	2a000317 	ldw	r8,12(r5)
   236dc:	11400054 	ori	r5,r2,1
   236e0:	3087883a 	add	r3,r6,r2
   236e4:	3a000315 	stw	r8,12(r7)
   236e8:	41c00215 	stw	r7,8(r8)
   236ec:	31400115 	stw	r5,4(r6)
   236f0:	18800015 	stw	r2,0(r3)
   236f4:	003fbd06 	br	235ec <__alt_data_end+0xfffe35ec>
   236f8:	39c0004c 	andi	r7,r7,1
   236fc:	10c5883a 	add	r2,r2,r3
   23700:	3800071e 	bne	r7,zero,23720 <_free_r+0x1d4>
   23704:	81fffe17 	ldw	r7,-8(r16)
   23708:	31cdc83a 	sub	r6,r6,r7
   2370c:	30c00317 	ldw	r3,12(r6)
   23710:	31400217 	ldw	r5,8(r6)
   23714:	11c5883a 	add	r2,r2,r7
   23718:	28c00315 	stw	r3,12(r5)
   2371c:	19400215 	stw	r5,8(r3)
   23720:	10c00054 	ori	r3,r2,1
   23724:	30c00115 	stw	r3,4(r6)
   23728:	00c000b4 	movhi	r3,2
   2372c:	18dae304 	addi	r3,r3,27532
   23730:	18c00017 	ldw	r3,0(r3)
   23734:	21800215 	stw	r6,8(r4)
   23738:	10ffc036 	bltu	r2,r3,2363c <__alt_data_end+0xfffe363c>
   2373c:	008000f4 	movhi	r2,3
   23740:	10a18a04 	addi	r2,r2,-31192
   23744:	11400017 	ldw	r5,0(r2)
   23748:	8809883a 	mov	r4,r17
   2374c:	00234280 	call	23428 <_malloc_trim_r>
   23750:	003fba06 	br	2363c <__alt_data_end+0xfffe363c>
   23754:	28c9883a 	add	r4,r5,r3
   23758:	21000117 	ldw	r4,4(r4)
   2375c:	2100004c 	andi	r4,r4,1
   23760:	2000391e 	bne	r4,zero,23848 <_free_r+0x2fc>
   23764:	29c00217 	ldw	r7,8(r5)
   23768:	29000317 	ldw	r4,12(r5)
   2376c:	1885883a 	add	r2,r3,r2
   23770:	10c00054 	ori	r3,r2,1
   23774:	39000315 	stw	r4,12(r7)
   23778:	21c00215 	stw	r7,8(r4)
   2377c:	30c00115 	stw	r3,4(r6)
   23780:	308d883a 	add	r6,r6,r2
   23784:	30800015 	stw	r2,0(r6)
   23788:	003fac06 	br	2363c <__alt_data_end+0xfffe363c>
   2378c:	00c00504 	movi	r3,20
   23790:	19401536 	bltu	r3,r5,237e8 <_free_r+0x29c>
   23794:	28c01704 	addi	r3,r5,92
   23798:	18c7883a 	add	r3,r3,r3
   2379c:	294016c4 	addi	r5,r5,91
   237a0:	003fb406 	br	23674 <__alt_data_end+0xfffe3674>
   237a4:	280bd0ba 	srai	r5,r5,2
   237a8:	00c00044 	movi	r3,1
   237ac:	38800117 	ldw	r2,4(r7)
   237b0:	194a983a 	sll	r5,r3,r5
   237b4:	2007883a 	mov	r3,r4
   237b8:	2884b03a 	or	r2,r5,r2
   237bc:	38800115 	stw	r2,4(r7)
   237c0:	003fbb06 	br	236b0 <__alt_data_end+0xfffe36b0>
   237c4:	21800515 	stw	r6,20(r4)
   237c8:	21800415 	stw	r6,16(r4)
   237cc:	10c00054 	ori	r3,r2,1
   237d0:	31c00315 	stw	r7,12(r6)
   237d4:	31c00215 	stw	r7,8(r6)
   237d8:	30c00115 	stw	r3,4(r6)
   237dc:	308d883a 	add	r6,r6,r2
   237e0:	30800015 	stw	r2,0(r6)
   237e4:	003f9506 	br	2363c <__alt_data_end+0xfffe363c>
   237e8:	00c01504 	movi	r3,84
   237ec:	19400536 	bltu	r3,r5,23804 <_free_r+0x2b8>
   237f0:	100ad33a 	srli	r5,r2,12
   237f4:	28c01bc4 	addi	r3,r5,111
   237f8:	18c7883a 	add	r3,r3,r3
   237fc:	29401b84 	addi	r5,r5,110
   23800:	003f9c06 	br	23674 <__alt_data_end+0xfffe3674>
   23804:	00c05504 	movi	r3,340
   23808:	19400536 	bltu	r3,r5,23820 <_free_r+0x2d4>
   2380c:	100ad3fa 	srli	r5,r2,15
   23810:	28c01e04 	addi	r3,r5,120
   23814:	18c7883a 	add	r3,r3,r3
   23818:	29401dc4 	addi	r5,r5,119
   2381c:	003f9506 	br	23674 <__alt_data_end+0xfffe3674>
   23820:	00c15504 	movi	r3,1364
   23824:	19400536 	bltu	r3,r5,2383c <_free_r+0x2f0>
   23828:	100ad4ba 	srli	r5,r2,18
   2382c:	28c01f44 	addi	r3,r5,125
   23830:	18c7883a 	add	r3,r3,r3
   23834:	29401f04 	addi	r5,r5,124
   23838:	003f8e06 	br	23674 <__alt_data_end+0xfffe3674>
   2383c:	00c03f84 	movi	r3,254
   23840:	01401f84 	movi	r5,126
   23844:	003f8b06 	br	23674 <__alt_data_end+0xfffe3674>
   23848:	10c00054 	ori	r3,r2,1
   2384c:	30c00115 	stw	r3,4(r6)
   23850:	308d883a 	add	r6,r6,r2
   23854:	30800015 	stw	r2,0(r6)
   23858:	003f7806 	br	2363c <__alt_data_end+0xfffe363c>

0002385c <_fwalk>:
   2385c:	defff704 	addi	sp,sp,-36
   23860:	dd000415 	stw	r20,16(sp)
   23864:	dfc00815 	stw	ra,32(sp)
   23868:	ddc00715 	stw	r23,28(sp)
   2386c:	dd800615 	stw	r22,24(sp)
   23870:	dd400515 	stw	r21,20(sp)
   23874:	dcc00315 	stw	r19,12(sp)
   23878:	dc800215 	stw	r18,8(sp)
   2387c:	dc400115 	stw	r17,4(sp)
   23880:	dc000015 	stw	r16,0(sp)
   23884:	2500b804 	addi	r20,r4,736
   23888:	a0002326 	beq	r20,zero,23918 <_fwalk+0xbc>
   2388c:	282b883a 	mov	r21,r5
   23890:	002f883a 	mov	r23,zero
   23894:	05800044 	movi	r22,1
   23898:	04ffffc4 	movi	r19,-1
   2389c:	a4400117 	ldw	r17,4(r20)
   238a0:	a4800217 	ldw	r18,8(r20)
   238a4:	8c7fffc4 	addi	r17,r17,-1
   238a8:	88000d16 	blt	r17,zero,238e0 <_fwalk+0x84>
   238ac:	94000304 	addi	r16,r18,12
   238b0:	94800384 	addi	r18,r18,14
   238b4:	8080000b 	ldhu	r2,0(r16)
   238b8:	8c7fffc4 	addi	r17,r17,-1
   238bc:	813ffd04 	addi	r4,r16,-12
   238c0:	b080042e 	bgeu	r22,r2,238d4 <_fwalk+0x78>
   238c4:	9080000f 	ldh	r2,0(r18)
   238c8:	14c00226 	beq	r2,r19,238d4 <_fwalk+0x78>
   238cc:	a83ee83a 	callr	r21
   238d0:	b8aeb03a 	or	r23,r23,r2
   238d4:	84001a04 	addi	r16,r16,104
   238d8:	94801a04 	addi	r18,r18,104
   238dc:	8cfff51e 	bne	r17,r19,238b4 <__alt_data_end+0xfffe38b4>
   238e0:	a5000017 	ldw	r20,0(r20)
   238e4:	a03fed1e 	bne	r20,zero,2389c <__alt_data_end+0xfffe389c>
   238e8:	b805883a 	mov	r2,r23
   238ec:	dfc00817 	ldw	ra,32(sp)
   238f0:	ddc00717 	ldw	r23,28(sp)
   238f4:	dd800617 	ldw	r22,24(sp)
   238f8:	dd400517 	ldw	r21,20(sp)
   238fc:	dd000417 	ldw	r20,16(sp)
   23900:	dcc00317 	ldw	r19,12(sp)
   23904:	dc800217 	ldw	r18,8(sp)
   23908:	dc400117 	ldw	r17,4(sp)
   2390c:	dc000017 	ldw	r16,0(sp)
   23910:	dec00904 	addi	sp,sp,36
   23914:	f800283a 	ret
   23918:	002f883a 	mov	r23,zero
   2391c:	003ff206 	br	238e8 <__alt_data_end+0xfffe38e8>

00023920 <_fwalk_reent>:
   23920:	defff704 	addi	sp,sp,-36
   23924:	dd000415 	stw	r20,16(sp)
   23928:	dfc00815 	stw	ra,32(sp)
   2392c:	ddc00715 	stw	r23,28(sp)
   23930:	dd800615 	stw	r22,24(sp)
   23934:	dd400515 	stw	r21,20(sp)
   23938:	dcc00315 	stw	r19,12(sp)
   2393c:	dc800215 	stw	r18,8(sp)
   23940:	dc400115 	stw	r17,4(sp)
   23944:	dc000015 	stw	r16,0(sp)
   23948:	2500b804 	addi	r20,r4,736
   2394c:	a0002326 	beq	r20,zero,239dc <_fwalk_reent+0xbc>
   23950:	282b883a 	mov	r21,r5
   23954:	2027883a 	mov	r19,r4
   23958:	002f883a 	mov	r23,zero
   2395c:	05800044 	movi	r22,1
   23960:	04bfffc4 	movi	r18,-1
   23964:	a4400117 	ldw	r17,4(r20)
   23968:	a4000217 	ldw	r16,8(r20)
   2396c:	8c7fffc4 	addi	r17,r17,-1
   23970:	88000c16 	blt	r17,zero,239a4 <_fwalk_reent+0x84>
   23974:	84000304 	addi	r16,r16,12
   23978:	8080000b 	ldhu	r2,0(r16)
   2397c:	8c7fffc4 	addi	r17,r17,-1
   23980:	817ffd04 	addi	r5,r16,-12
   23984:	b080052e 	bgeu	r22,r2,2399c <_fwalk_reent+0x7c>
   23988:	8080008f 	ldh	r2,2(r16)
   2398c:	9809883a 	mov	r4,r19
   23990:	14800226 	beq	r2,r18,2399c <_fwalk_reent+0x7c>
   23994:	a83ee83a 	callr	r21
   23998:	b8aeb03a 	or	r23,r23,r2
   2399c:	84001a04 	addi	r16,r16,104
   239a0:	8cbff51e 	bne	r17,r18,23978 <__alt_data_end+0xfffe3978>
   239a4:	a5000017 	ldw	r20,0(r20)
   239a8:	a03fee1e 	bne	r20,zero,23964 <__alt_data_end+0xfffe3964>
   239ac:	b805883a 	mov	r2,r23
   239b0:	dfc00817 	ldw	ra,32(sp)
   239b4:	ddc00717 	ldw	r23,28(sp)
   239b8:	dd800617 	ldw	r22,24(sp)
   239bc:	dd400517 	ldw	r21,20(sp)
   239c0:	dd000417 	ldw	r20,16(sp)
   239c4:	dcc00317 	ldw	r19,12(sp)
   239c8:	dc800217 	ldw	r18,8(sp)
   239cc:	dc400117 	ldw	r17,4(sp)
   239d0:	dc000017 	ldw	r16,0(sp)
   239d4:	dec00904 	addi	sp,sp,36
   239d8:	f800283a 	ret
   239dc:	002f883a 	mov	r23,zero
   239e0:	003ff206 	br	239ac <__alt_data_end+0xfffe39ac>

000239e4 <__smakebuf_r>:
   239e4:	2880030b 	ldhu	r2,12(r5)
   239e8:	10c0008c 	andi	r3,r2,2
   239ec:	1800411e 	bne	r3,zero,23af4 <__smakebuf_r+0x110>
   239f0:	deffec04 	addi	sp,sp,-80
   239f4:	dc000f15 	stw	r16,60(sp)
   239f8:	2821883a 	mov	r16,r5
   239fc:	2940038f 	ldh	r5,14(r5)
   23a00:	dc401015 	stw	r17,64(sp)
   23a04:	dfc01315 	stw	ra,76(sp)
   23a08:	dcc01215 	stw	r19,72(sp)
   23a0c:	dc801115 	stw	r18,68(sp)
   23a10:	2023883a 	mov	r17,r4
   23a14:	28001c16 	blt	r5,zero,23a88 <__smakebuf_r+0xa4>
   23a18:	d80d883a 	mov	r6,sp
   23a1c:	002481c0 	call	2481c <_fstat_r>
   23a20:	10001816 	blt	r2,zero,23a84 <__smakebuf_r+0xa0>
   23a24:	d8800117 	ldw	r2,4(sp)
   23a28:	00e00014 	movui	r3,32768
   23a2c:	10bc000c 	andi	r2,r2,61440
   23a30:	14c80020 	cmpeqi	r19,r2,8192
   23a34:	10c03726 	beq	r2,r3,23b14 <__smakebuf_r+0x130>
   23a38:	80c0030b 	ldhu	r3,12(r16)
   23a3c:	18c20014 	ori	r3,r3,2048
   23a40:	80c0030d 	sth	r3,12(r16)
   23a44:	00c80004 	movi	r3,8192
   23a48:	10c0521e 	bne	r2,r3,23b94 <__smakebuf_r+0x1b0>
   23a4c:	8140038f 	ldh	r5,14(r16)
   23a50:	8809883a 	mov	r4,r17
   23a54:	00248780 	call	24878 <_isatty_r>
   23a58:	10004c26 	beq	r2,zero,23b8c <__smakebuf_r+0x1a8>
   23a5c:	8080030b 	ldhu	r2,12(r16)
   23a60:	80c010c4 	addi	r3,r16,67
   23a64:	80c00015 	stw	r3,0(r16)
   23a68:	10800054 	ori	r2,r2,1
   23a6c:	8080030d 	sth	r2,12(r16)
   23a70:	00800044 	movi	r2,1
   23a74:	80c00415 	stw	r3,16(r16)
   23a78:	80800515 	stw	r2,20(r16)
   23a7c:	04810004 	movi	r18,1024
   23a80:	00000706 	br	23aa0 <__smakebuf_r+0xbc>
   23a84:	8080030b 	ldhu	r2,12(r16)
   23a88:	10c0200c 	andi	r3,r2,128
   23a8c:	18001f1e 	bne	r3,zero,23b0c <__smakebuf_r+0x128>
   23a90:	04810004 	movi	r18,1024
   23a94:	10820014 	ori	r2,r2,2048
   23a98:	8080030d 	sth	r2,12(r16)
   23a9c:	0027883a 	mov	r19,zero
   23aa0:	900b883a 	mov	r5,r18
   23aa4:	8809883a 	mov	r4,r17
   23aa8:	0023ba00 	call	23ba0 <_malloc_r>
   23aac:	10002c26 	beq	r2,zero,23b60 <__smakebuf_r+0x17c>
   23ab0:	80c0030b 	ldhu	r3,12(r16)
   23ab4:	010000b4 	movhi	r4,2
   23ab8:	210c2404 	addi	r4,r4,12432
   23abc:	89000f15 	stw	r4,60(r17)
   23ac0:	18c02014 	ori	r3,r3,128
   23ac4:	80c0030d 	sth	r3,12(r16)
   23ac8:	80800015 	stw	r2,0(r16)
   23acc:	80800415 	stw	r2,16(r16)
   23ad0:	84800515 	stw	r18,20(r16)
   23ad4:	98001a1e 	bne	r19,zero,23b40 <__smakebuf_r+0x15c>
   23ad8:	dfc01317 	ldw	ra,76(sp)
   23adc:	dcc01217 	ldw	r19,72(sp)
   23ae0:	dc801117 	ldw	r18,68(sp)
   23ae4:	dc401017 	ldw	r17,64(sp)
   23ae8:	dc000f17 	ldw	r16,60(sp)
   23aec:	dec01404 	addi	sp,sp,80
   23af0:	f800283a 	ret
   23af4:	288010c4 	addi	r2,r5,67
   23af8:	28800015 	stw	r2,0(r5)
   23afc:	28800415 	stw	r2,16(r5)
   23b00:	00800044 	movi	r2,1
   23b04:	28800515 	stw	r2,20(r5)
   23b08:	f800283a 	ret
   23b0c:	04801004 	movi	r18,64
   23b10:	003fe006 	br	23a94 <__alt_data_end+0xfffe3a94>
   23b14:	81000a17 	ldw	r4,40(r16)
   23b18:	00c000b4 	movhi	r3,2
   23b1c:	18d18004 	addi	r3,r3,17920
   23b20:	20ffc51e 	bne	r4,r3,23a38 <__alt_data_end+0xfffe3a38>
   23b24:	8080030b 	ldhu	r2,12(r16)
   23b28:	04810004 	movi	r18,1024
   23b2c:	84801315 	stw	r18,76(r16)
   23b30:	1484b03a 	or	r2,r2,r18
   23b34:	8080030d 	sth	r2,12(r16)
   23b38:	0027883a 	mov	r19,zero
   23b3c:	003fd806 	br	23aa0 <__alt_data_end+0xfffe3aa0>
   23b40:	8140038f 	ldh	r5,14(r16)
   23b44:	8809883a 	mov	r4,r17
   23b48:	00248780 	call	24878 <_isatty_r>
   23b4c:	103fe226 	beq	r2,zero,23ad8 <__alt_data_end+0xfffe3ad8>
   23b50:	8080030b 	ldhu	r2,12(r16)
   23b54:	10800054 	ori	r2,r2,1
   23b58:	8080030d 	sth	r2,12(r16)
   23b5c:	003fde06 	br	23ad8 <__alt_data_end+0xfffe3ad8>
   23b60:	8080030b 	ldhu	r2,12(r16)
   23b64:	10c0800c 	andi	r3,r2,512
   23b68:	183fdb1e 	bne	r3,zero,23ad8 <__alt_data_end+0xfffe3ad8>
   23b6c:	10800094 	ori	r2,r2,2
   23b70:	80c010c4 	addi	r3,r16,67
   23b74:	8080030d 	sth	r2,12(r16)
   23b78:	00800044 	movi	r2,1
   23b7c:	80c00015 	stw	r3,0(r16)
   23b80:	80c00415 	stw	r3,16(r16)
   23b84:	80800515 	stw	r2,20(r16)
   23b88:	003fd306 	br	23ad8 <__alt_data_end+0xfffe3ad8>
   23b8c:	04810004 	movi	r18,1024
   23b90:	003fc306 	br	23aa0 <__alt_data_end+0xfffe3aa0>
   23b94:	0027883a 	mov	r19,zero
   23b98:	04810004 	movi	r18,1024
   23b9c:	003fc006 	br	23aa0 <__alt_data_end+0xfffe3aa0>

00023ba0 <_malloc_r>:
   23ba0:	defff504 	addi	sp,sp,-44
   23ba4:	dc800315 	stw	r18,12(sp)
   23ba8:	dfc00a15 	stw	ra,40(sp)
   23bac:	df000915 	stw	fp,36(sp)
   23bb0:	ddc00815 	stw	r23,32(sp)
   23bb4:	dd800715 	stw	r22,28(sp)
   23bb8:	dd400615 	stw	r21,24(sp)
   23bbc:	dd000515 	stw	r20,20(sp)
   23bc0:	dcc00415 	stw	r19,16(sp)
   23bc4:	dc400215 	stw	r17,8(sp)
   23bc8:	dc000115 	stw	r16,4(sp)
   23bcc:	288002c4 	addi	r2,r5,11
   23bd0:	00c00584 	movi	r3,22
   23bd4:	2025883a 	mov	r18,r4
   23bd8:	18807f2e 	bgeu	r3,r2,23dd8 <_malloc_r+0x238>
   23bdc:	047ffe04 	movi	r17,-8
   23be0:	1462703a 	and	r17,r2,r17
   23be4:	8800a316 	blt	r17,zero,23e74 <_malloc_r+0x2d4>
   23be8:	8940a236 	bltu	r17,r5,23e74 <_malloc_r+0x2d4>
   23bec:	0024c9c0 	call	24c9c <__malloc_lock>
   23bf0:	00807dc4 	movi	r2,503
   23bf4:	1441e92e 	bgeu	r2,r17,2439c <_malloc_r+0x7fc>
   23bf8:	8804d27a 	srli	r2,r17,9
   23bfc:	1000a126 	beq	r2,zero,23e84 <_malloc_r+0x2e4>
   23c00:	00c00104 	movi	r3,4
   23c04:	18811e36 	bltu	r3,r2,24080 <_malloc_r+0x4e0>
   23c08:	8804d1ba 	srli	r2,r17,6
   23c0c:	12000e44 	addi	r8,r2,57
   23c10:	11c00e04 	addi	r7,r2,56
   23c14:	4209883a 	add	r4,r8,r8
   23c18:	04c000b4 	movhi	r19,2
   23c1c:	2109883a 	add	r4,r4,r4
   23c20:	9cd9d504 	addi	r19,r19,26452
   23c24:	2109883a 	add	r4,r4,r4
   23c28:	9909883a 	add	r4,r19,r4
   23c2c:	24000117 	ldw	r16,4(r4)
   23c30:	213ffe04 	addi	r4,r4,-8
   23c34:	24009726 	beq	r4,r16,23e94 <_malloc_r+0x2f4>
   23c38:	80800117 	ldw	r2,4(r16)
   23c3c:	01bfff04 	movi	r6,-4
   23c40:	014003c4 	movi	r5,15
   23c44:	1184703a 	and	r2,r2,r6
   23c48:	1447c83a 	sub	r3,r2,r17
   23c4c:	28c00716 	blt	r5,r3,23c6c <_malloc_r+0xcc>
   23c50:	1800920e 	bge	r3,zero,23e9c <_malloc_r+0x2fc>
   23c54:	84000317 	ldw	r16,12(r16)
   23c58:	24008e26 	beq	r4,r16,23e94 <_malloc_r+0x2f4>
   23c5c:	80800117 	ldw	r2,4(r16)
   23c60:	1184703a 	and	r2,r2,r6
   23c64:	1447c83a 	sub	r3,r2,r17
   23c68:	28fff90e 	bge	r5,r3,23c50 <__alt_data_end+0xfffe3c50>
   23c6c:	3809883a 	mov	r4,r7
   23c70:	018000b4 	movhi	r6,2
   23c74:	9c000417 	ldw	r16,16(r19)
   23c78:	3199d504 	addi	r6,r6,26452
   23c7c:	32000204 	addi	r8,r6,8
   23c80:	82013426 	beq	r16,r8,24154 <_malloc_r+0x5b4>
   23c84:	80c00117 	ldw	r3,4(r16)
   23c88:	00bfff04 	movi	r2,-4
   23c8c:	188e703a 	and	r7,r3,r2
   23c90:	3c45c83a 	sub	r2,r7,r17
   23c94:	00c003c4 	movi	r3,15
   23c98:	18811f16 	blt	r3,r2,24118 <_malloc_r+0x578>
   23c9c:	32000515 	stw	r8,20(r6)
   23ca0:	32000415 	stw	r8,16(r6)
   23ca4:	10007f0e 	bge	r2,zero,23ea4 <_malloc_r+0x304>
   23ca8:	00807fc4 	movi	r2,511
   23cac:	11c0fd36 	bltu	r2,r7,240a4 <_malloc_r+0x504>
   23cb0:	3806d0fa 	srli	r3,r7,3
   23cb4:	01c00044 	movi	r7,1
   23cb8:	30800117 	ldw	r2,4(r6)
   23cbc:	19400044 	addi	r5,r3,1
   23cc0:	294b883a 	add	r5,r5,r5
   23cc4:	1807d0ba 	srai	r3,r3,2
   23cc8:	294b883a 	add	r5,r5,r5
   23ccc:	294b883a 	add	r5,r5,r5
   23cd0:	298b883a 	add	r5,r5,r6
   23cd4:	38c6983a 	sll	r3,r7,r3
   23cd8:	29c00017 	ldw	r7,0(r5)
   23cdc:	2a7ffe04 	addi	r9,r5,-8
   23ce0:	1886b03a 	or	r3,r3,r2
   23ce4:	82400315 	stw	r9,12(r16)
   23ce8:	81c00215 	stw	r7,8(r16)
   23cec:	30c00115 	stw	r3,4(r6)
   23cf0:	2c000015 	stw	r16,0(r5)
   23cf4:	3c000315 	stw	r16,12(r7)
   23cf8:	2005d0ba 	srai	r2,r4,2
   23cfc:	01400044 	movi	r5,1
   23d00:	288a983a 	sll	r5,r5,r2
   23d04:	19406f36 	bltu	r3,r5,23ec4 <_malloc_r+0x324>
   23d08:	28c4703a 	and	r2,r5,r3
   23d0c:	10000a1e 	bne	r2,zero,23d38 <_malloc_r+0x198>
   23d10:	00bfff04 	movi	r2,-4
   23d14:	294b883a 	add	r5,r5,r5
   23d18:	2088703a 	and	r4,r4,r2
   23d1c:	28c4703a 	and	r2,r5,r3
   23d20:	21000104 	addi	r4,r4,4
   23d24:	1000041e 	bne	r2,zero,23d38 <_malloc_r+0x198>
   23d28:	294b883a 	add	r5,r5,r5
   23d2c:	28c4703a 	and	r2,r5,r3
   23d30:	21000104 	addi	r4,r4,4
   23d34:	103ffc26 	beq	r2,zero,23d28 <__alt_data_end+0xfffe3d28>
   23d38:	02bfff04 	movi	r10,-4
   23d3c:	024003c4 	movi	r9,15
   23d40:	21800044 	addi	r6,r4,1
   23d44:	318d883a 	add	r6,r6,r6
   23d48:	318d883a 	add	r6,r6,r6
   23d4c:	318d883a 	add	r6,r6,r6
   23d50:	998d883a 	add	r6,r19,r6
   23d54:	333ffe04 	addi	r12,r6,-8
   23d58:	2017883a 	mov	r11,r4
   23d5c:	31800104 	addi	r6,r6,4
   23d60:	34000017 	ldw	r16,0(r6)
   23d64:	31fffd04 	addi	r7,r6,-12
   23d68:	81c0041e 	bne	r16,r7,23d7c <_malloc_r+0x1dc>
   23d6c:	0000fb06 	br	2415c <_malloc_r+0x5bc>
   23d70:	1801030e 	bge	r3,zero,24180 <_malloc_r+0x5e0>
   23d74:	84000317 	ldw	r16,12(r16)
   23d78:	81c0f826 	beq	r16,r7,2415c <_malloc_r+0x5bc>
   23d7c:	80800117 	ldw	r2,4(r16)
   23d80:	1284703a 	and	r2,r2,r10
   23d84:	1447c83a 	sub	r3,r2,r17
   23d88:	48fff90e 	bge	r9,r3,23d70 <__alt_data_end+0xfffe3d70>
   23d8c:	80800317 	ldw	r2,12(r16)
   23d90:	81000217 	ldw	r4,8(r16)
   23d94:	89400054 	ori	r5,r17,1
   23d98:	81400115 	stw	r5,4(r16)
   23d9c:	20800315 	stw	r2,12(r4)
   23da0:	11000215 	stw	r4,8(r2)
   23da4:	8463883a 	add	r17,r16,r17
   23da8:	9c400515 	stw	r17,20(r19)
   23dac:	9c400415 	stw	r17,16(r19)
   23db0:	18800054 	ori	r2,r3,1
   23db4:	88800115 	stw	r2,4(r17)
   23db8:	8a000315 	stw	r8,12(r17)
   23dbc:	8a000215 	stw	r8,8(r17)
   23dc0:	88e3883a 	add	r17,r17,r3
   23dc4:	88c00015 	stw	r3,0(r17)
   23dc8:	9009883a 	mov	r4,r18
   23dcc:	0024cc00 	call	24cc0 <__malloc_unlock>
   23dd0:	80800204 	addi	r2,r16,8
   23dd4:	00001b06 	br	23e44 <_malloc_r+0x2a4>
   23dd8:	04400404 	movi	r17,16
   23ddc:	89402536 	bltu	r17,r5,23e74 <_malloc_r+0x2d4>
   23de0:	0024c9c0 	call	24c9c <__malloc_lock>
   23de4:	00800184 	movi	r2,6
   23de8:	01000084 	movi	r4,2
   23dec:	04c000b4 	movhi	r19,2
   23df0:	1085883a 	add	r2,r2,r2
   23df4:	9cd9d504 	addi	r19,r19,26452
   23df8:	1085883a 	add	r2,r2,r2
   23dfc:	9885883a 	add	r2,r19,r2
   23e00:	14000117 	ldw	r16,4(r2)
   23e04:	10fffe04 	addi	r3,r2,-8
   23e08:	80c0d926 	beq	r16,r3,24170 <_malloc_r+0x5d0>
   23e0c:	80c00117 	ldw	r3,4(r16)
   23e10:	81000317 	ldw	r4,12(r16)
   23e14:	00bfff04 	movi	r2,-4
   23e18:	1884703a 	and	r2,r3,r2
   23e1c:	81400217 	ldw	r5,8(r16)
   23e20:	8085883a 	add	r2,r16,r2
   23e24:	10c00117 	ldw	r3,4(r2)
   23e28:	29000315 	stw	r4,12(r5)
   23e2c:	21400215 	stw	r5,8(r4)
   23e30:	18c00054 	ori	r3,r3,1
   23e34:	10c00115 	stw	r3,4(r2)
   23e38:	9009883a 	mov	r4,r18
   23e3c:	0024cc00 	call	24cc0 <__malloc_unlock>
   23e40:	80800204 	addi	r2,r16,8
   23e44:	dfc00a17 	ldw	ra,40(sp)
   23e48:	df000917 	ldw	fp,36(sp)
   23e4c:	ddc00817 	ldw	r23,32(sp)
   23e50:	dd800717 	ldw	r22,28(sp)
   23e54:	dd400617 	ldw	r21,24(sp)
   23e58:	dd000517 	ldw	r20,20(sp)
   23e5c:	dcc00417 	ldw	r19,16(sp)
   23e60:	dc800317 	ldw	r18,12(sp)
   23e64:	dc400217 	ldw	r17,8(sp)
   23e68:	dc000117 	ldw	r16,4(sp)
   23e6c:	dec00b04 	addi	sp,sp,44
   23e70:	f800283a 	ret
   23e74:	00800304 	movi	r2,12
   23e78:	90800015 	stw	r2,0(r18)
   23e7c:	0005883a 	mov	r2,zero
   23e80:	003ff006 	br	23e44 <__alt_data_end+0xfffe3e44>
   23e84:	01002004 	movi	r4,128
   23e88:	02001004 	movi	r8,64
   23e8c:	01c00fc4 	movi	r7,63
   23e90:	003f6106 	br	23c18 <__alt_data_end+0xfffe3c18>
   23e94:	4009883a 	mov	r4,r8
   23e98:	003f7506 	br	23c70 <__alt_data_end+0xfffe3c70>
   23e9c:	81000317 	ldw	r4,12(r16)
   23ea0:	003fde06 	br	23e1c <__alt_data_end+0xfffe3e1c>
   23ea4:	81c5883a 	add	r2,r16,r7
   23ea8:	11400117 	ldw	r5,4(r2)
   23eac:	9009883a 	mov	r4,r18
   23eb0:	29400054 	ori	r5,r5,1
   23eb4:	11400115 	stw	r5,4(r2)
   23eb8:	0024cc00 	call	24cc0 <__malloc_unlock>
   23ebc:	80800204 	addi	r2,r16,8
   23ec0:	003fe006 	br	23e44 <__alt_data_end+0xfffe3e44>
   23ec4:	9c000217 	ldw	r16,8(r19)
   23ec8:	00bfff04 	movi	r2,-4
   23ecc:	85800117 	ldw	r22,4(r16)
   23ed0:	b0ac703a 	and	r22,r22,r2
   23ed4:	b4400336 	bltu	r22,r17,23ee4 <_malloc_r+0x344>
   23ed8:	b445c83a 	sub	r2,r22,r17
   23edc:	00c003c4 	movi	r3,15
   23ee0:	18805d16 	blt	r3,r2,24058 <_malloc_r+0x4b8>
   23ee4:	05c000b4 	movhi	r23,2
   23ee8:	008000f4 	movhi	r2,3
   23eec:	10a18a04 	addi	r2,r2,-31192
   23ef0:	bddae204 	addi	r23,r23,27528
   23ef4:	15400017 	ldw	r21,0(r2)
   23ef8:	b8c00017 	ldw	r3,0(r23)
   23efc:	00bfffc4 	movi	r2,-1
   23f00:	858d883a 	add	r6,r16,r22
   23f04:	8d6b883a 	add	r21,r17,r21
   23f08:	1880ea26 	beq	r3,r2,242b4 <_malloc_r+0x714>
   23f0c:	ad4403c4 	addi	r21,r21,4111
   23f10:	00bc0004 	movi	r2,-4096
   23f14:	a8aa703a 	and	r21,r21,r2
   23f18:	a80b883a 	mov	r5,r21
   23f1c:	9009883a 	mov	r4,r18
   23f20:	d9800015 	stw	r6,0(sp)
   23f24:	00244d40 	call	244d4 <_sbrk_r>
   23f28:	1029883a 	mov	r20,r2
   23f2c:	00bfffc4 	movi	r2,-1
   23f30:	d9800017 	ldw	r6,0(sp)
   23f34:	a080e826 	beq	r20,r2,242d8 <_malloc_r+0x738>
   23f38:	a180a636 	bltu	r20,r6,241d4 <_malloc_r+0x634>
   23f3c:	070000f4 	movhi	fp,3
   23f40:	e7218b04 	addi	fp,fp,-31188
   23f44:	e0800017 	ldw	r2,0(fp)
   23f48:	a887883a 	add	r3,r21,r2
   23f4c:	e0c00015 	stw	r3,0(fp)
   23f50:	3500e626 	beq	r6,r20,242ec <_malloc_r+0x74c>
   23f54:	b9000017 	ldw	r4,0(r23)
   23f58:	00bfffc4 	movi	r2,-1
   23f5c:	2080ee26 	beq	r4,r2,24318 <_malloc_r+0x778>
   23f60:	a185c83a 	sub	r2,r20,r6
   23f64:	10c5883a 	add	r2,r2,r3
   23f68:	e0800015 	stw	r2,0(fp)
   23f6c:	a0c001cc 	andi	r3,r20,7
   23f70:	1800bc26 	beq	r3,zero,24264 <_malloc_r+0x6c4>
   23f74:	a0e9c83a 	sub	r20,r20,r3
   23f78:	00840204 	movi	r2,4104
   23f7c:	a5000204 	addi	r20,r20,8
   23f80:	10c7c83a 	sub	r3,r2,r3
   23f84:	a545883a 	add	r2,r20,r21
   23f88:	1083ffcc 	andi	r2,r2,4095
   23f8c:	18abc83a 	sub	r21,r3,r2
   23f90:	a80b883a 	mov	r5,r21
   23f94:	9009883a 	mov	r4,r18
   23f98:	00244d40 	call	244d4 <_sbrk_r>
   23f9c:	00ffffc4 	movi	r3,-1
   23fa0:	10c0e126 	beq	r2,r3,24328 <_malloc_r+0x788>
   23fa4:	1505c83a 	sub	r2,r2,r20
   23fa8:	1545883a 	add	r2,r2,r21
   23fac:	10800054 	ori	r2,r2,1
   23fb0:	e0c00017 	ldw	r3,0(fp)
   23fb4:	9d000215 	stw	r20,8(r19)
   23fb8:	a0800115 	stw	r2,4(r20)
   23fbc:	a8c7883a 	add	r3,r21,r3
   23fc0:	e0c00015 	stw	r3,0(fp)
   23fc4:	84c00e26 	beq	r16,r19,24000 <_malloc_r+0x460>
   23fc8:	018003c4 	movi	r6,15
   23fcc:	3580a72e 	bgeu	r6,r22,2426c <_malloc_r+0x6cc>
   23fd0:	81400117 	ldw	r5,4(r16)
   23fd4:	013ffe04 	movi	r4,-8
   23fd8:	b0bffd04 	addi	r2,r22,-12
   23fdc:	1104703a 	and	r2,r2,r4
   23fe0:	2900004c 	andi	r4,r5,1
   23fe4:	2088b03a 	or	r4,r4,r2
   23fe8:	81000115 	stw	r4,4(r16)
   23fec:	01400144 	movi	r5,5
   23ff0:	8089883a 	add	r4,r16,r2
   23ff4:	21400115 	stw	r5,4(r4)
   23ff8:	21400215 	stw	r5,8(r4)
   23ffc:	3080cd36 	bltu	r6,r2,24334 <_malloc_r+0x794>
   24000:	008000f4 	movhi	r2,3
   24004:	10a18904 	addi	r2,r2,-31196
   24008:	11000017 	ldw	r4,0(r2)
   2400c:	20c0012e 	bgeu	r4,r3,24014 <_malloc_r+0x474>
   24010:	10c00015 	stw	r3,0(r2)
   24014:	008000f4 	movhi	r2,3
   24018:	10a18804 	addi	r2,r2,-31200
   2401c:	11000017 	ldw	r4,0(r2)
   24020:	9c000217 	ldw	r16,8(r19)
   24024:	20c0012e 	bgeu	r4,r3,2402c <_malloc_r+0x48c>
   24028:	10c00015 	stw	r3,0(r2)
   2402c:	80c00117 	ldw	r3,4(r16)
   24030:	00bfff04 	movi	r2,-4
   24034:	1886703a 	and	r3,r3,r2
   24038:	1c45c83a 	sub	r2,r3,r17
   2403c:	1c400236 	bltu	r3,r17,24048 <_malloc_r+0x4a8>
   24040:	00c003c4 	movi	r3,15
   24044:	18800416 	blt	r3,r2,24058 <_malloc_r+0x4b8>
   24048:	9009883a 	mov	r4,r18
   2404c:	0024cc00 	call	24cc0 <__malloc_unlock>
   24050:	0005883a 	mov	r2,zero
   24054:	003f7b06 	br	23e44 <__alt_data_end+0xfffe3e44>
   24058:	88c00054 	ori	r3,r17,1
   2405c:	80c00115 	stw	r3,4(r16)
   24060:	8463883a 	add	r17,r16,r17
   24064:	10800054 	ori	r2,r2,1
   24068:	9c400215 	stw	r17,8(r19)
   2406c:	88800115 	stw	r2,4(r17)
   24070:	9009883a 	mov	r4,r18
   24074:	0024cc00 	call	24cc0 <__malloc_unlock>
   24078:	80800204 	addi	r2,r16,8
   2407c:	003f7106 	br	23e44 <__alt_data_end+0xfffe3e44>
   24080:	00c00504 	movi	r3,20
   24084:	18804a2e 	bgeu	r3,r2,241b0 <_malloc_r+0x610>
   24088:	00c01504 	movi	r3,84
   2408c:	18806e36 	bltu	r3,r2,24248 <_malloc_r+0x6a8>
   24090:	8804d33a 	srli	r2,r17,12
   24094:	12001bc4 	addi	r8,r2,111
   24098:	11c01b84 	addi	r7,r2,110
   2409c:	4209883a 	add	r4,r8,r8
   240a0:	003edd06 	br	23c18 <__alt_data_end+0xfffe3c18>
   240a4:	3804d27a 	srli	r2,r7,9
   240a8:	00c00104 	movi	r3,4
   240ac:	1880442e 	bgeu	r3,r2,241c0 <_malloc_r+0x620>
   240b0:	00c00504 	movi	r3,20
   240b4:	18808136 	bltu	r3,r2,242bc <_malloc_r+0x71c>
   240b8:	11401704 	addi	r5,r2,92
   240bc:	10c016c4 	addi	r3,r2,91
   240c0:	294b883a 	add	r5,r5,r5
   240c4:	294b883a 	add	r5,r5,r5
   240c8:	294b883a 	add	r5,r5,r5
   240cc:	994b883a 	add	r5,r19,r5
   240d0:	28800017 	ldw	r2,0(r5)
   240d4:	018000b4 	movhi	r6,2
   240d8:	297ffe04 	addi	r5,r5,-8
   240dc:	3199d504 	addi	r6,r6,26452
   240e0:	28806526 	beq	r5,r2,24278 <_malloc_r+0x6d8>
   240e4:	01bfff04 	movi	r6,-4
   240e8:	10c00117 	ldw	r3,4(r2)
   240ec:	1986703a 	and	r3,r3,r6
   240f0:	38c0022e 	bgeu	r7,r3,240fc <_malloc_r+0x55c>
   240f4:	10800217 	ldw	r2,8(r2)
   240f8:	28bffb1e 	bne	r5,r2,240e8 <__alt_data_end+0xfffe40e8>
   240fc:	11400317 	ldw	r5,12(r2)
   24100:	98c00117 	ldw	r3,4(r19)
   24104:	81400315 	stw	r5,12(r16)
   24108:	80800215 	stw	r2,8(r16)
   2410c:	2c000215 	stw	r16,8(r5)
   24110:	14000315 	stw	r16,12(r2)
   24114:	003ef806 	br	23cf8 <__alt_data_end+0xfffe3cf8>
   24118:	88c00054 	ori	r3,r17,1
   2411c:	80c00115 	stw	r3,4(r16)
   24120:	8463883a 	add	r17,r16,r17
   24124:	34400515 	stw	r17,20(r6)
   24128:	34400415 	stw	r17,16(r6)
   2412c:	10c00054 	ori	r3,r2,1
   24130:	8a000315 	stw	r8,12(r17)
   24134:	8a000215 	stw	r8,8(r17)
   24138:	88c00115 	stw	r3,4(r17)
   2413c:	88a3883a 	add	r17,r17,r2
   24140:	88800015 	stw	r2,0(r17)
   24144:	9009883a 	mov	r4,r18
   24148:	0024cc00 	call	24cc0 <__malloc_unlock>
   2414c:	80800204 	addi	r2,r16,8
   24150:	003f3c06 	br	23e44 <__alt_data_end+0xfffe3e44>
   24154:	30c00117 	ldw	r3,4(r6)
   24158:	003ee706 	br	23cf8 <__alt_data_end+0xfffe3cf8>
   2415c:	5ac00044 	addi	r11,r11,1
   24160:	588000cc 	andi	r2,r11,3
   24164:	31800204 	addi	r6,r6,8
   24168:	103efd1e 	bne	r2,zero,23d60 <__alt_data_end+0xfffe3d60>
   2416c:	00002406 	br	24200 <_malloc_r+0x660>
   24170:	14000317 	ldw	r16,12(r2)
   24174:	143f251e 	bne	r2,r16,23e0c <__alt_data_end+0xfffe3e0c>
   24178:	21000084 	addi	r4,r4,2
   2417c:	003ebc06 	br	23c70 <__alt_data_end+0xfffe3c70>
   24180:	8085883a 	add	r2,r16,r2
   24184:	10c00117 	ldw	r3,4(r2)
   24188:	81000317 	ldw	r4,12(r16)
   2418c:	81400217 	ldw	r5,8(r16)
   24190:	18c00054 	ori	r3,r3,1
   24194:	10c00115 	stw	r3,4(r2)
   24198:	29000315 	stw	r4,12(r5)
   2419c:	21400215 	stw	r5,8(r4)
   241a0:	9009883a 	mov	r4,r18
   241a4:	0024cc00 	call	24cc0 <__malloc_unlock>
   241a8:	80800204 	addi	r2,r16,8
   241ac:	003f2506 	br	23e44 <__alt_data_end+0xfffe3e44>
   241b0:	12001704 	addi	r8,r2,92
   241b4:	11c016c4 	addi	r7,r2,91
   241b8:	4209883a 	add	r4,r8,r8
   241bc:	003e9606 	br	23c18 <__alt_data_end+0xfffe3c18>
   241c0:	3804d1ba 	srli	r2,r7,6
   241c4:	11400e44 	addi	r5,r2,57
   241c8:	10c00e04 	addi	r3,r2,56
   241cc:	294b883a 	add	r5,r5,r5
   241d0:	003fbc06 	br	240c4 <__alt_data_end+0xfffe40c4>
   241d4:	84ff5926 	beq	r16,r19,23f3c <__alt_data_end+0xfffe3f3c>
   241d8:	008000b4 	movhi	r2,2
   241dc:	1099d504 	addi	r2,r2,26452
   241e0:	14000217 	ldw	r16,8(r2)
   241e4:	00bfff04 	movi	r2,-4
   241e8:	80c00117 	ldw	r3,4(r16)
   241ec:	1886703a 	and	r3,r3,r2
   241f0:	003f9106 	br	24038 <__alt_data_end+0xfffe4038>
   241f4:	60800217 	ldw	r2,8(r12)
   241f8:	213fffc4 	addi	r4,r4,-1
   241fc:	1300651e 	bne	r2,r12,24394 <_malloc_r+0x7f4>
   24200:	208000cc 	andi	r2,r4,3
   24204:	633ffe04 	addi	r12,r12,-8
   24208:	103ffa1e 	bne	r2,zero,241f4 <__alt_data_end+0xfffe41f4>
   2420c:	98800117 	ldw	r2,4(r19)
   24210:	0146303a 	nor	r3,zero,r5
   24214:	1884703a 	and	r2,r3,r2
   24218:	98800115 	stw	r2,4(r19)
   2421c:	294b883a 	add	r5,r5,r5
   24220:	117f2836 	bltu	r2,r5,23ec4 <__alt_data_end+0xfffe3ec4>
   24224:	283f2726 	beq	r5,zero,23ec4 <__alt_data_end+0xfffe3ec4>
   24228:	2886703a 	and	r3,r5,r2
   2422c:	5809883a 	mov	r4,r11
   24230:	183ec31e 	bne	r3,zero,23d40 <__alt_data_end+0xfffe3d40>
   24234:	294b883a 	add	r5,r5,r5
   24238:	2886703a 	and	r3,r5,r2
   2423c:	21000104 	addi	r4,r4,4
   24240:	183ffc26 	beq	r3,zero,24234 <__alt_data_end+0xfffe4234>
   24244:	003ebe06 	br	23d40 <__alt_data_end+0xfffe3d40>
   24248:	00c05504 	movi	r3,340
   2424c:	18801236 	bltu	r3,r2,24298 <_malloc_r+0x6f8>
   24250:	8804d3fa 	srli	r2,r17,15
   24254:	12001e04 	addi	r8,r2,120
   24258:	11c01dc4 	addi	r7,r2,119
   2425c:	4209883a 	add	r4,r8,r8
   24260:	003e6d06 	br	23c18 <__alt_data_end+0xfffe3c18>
   24264:	00c40004 	movi	r3,4096
   24268:	003f4606 	br	23f84 <__alt_data_end+0xfffe3f84>
   2426c:	00800044 	movi	r2,1
   24270:	a0800115 	stw	r2,4(r20)
   24274:	003f7406 	br	24048 <__alt_data_end+0xfffe4048>
   24278:	1805d0ba 	srai	r2,r3,2
   2427c:	01c00044 	movi	r7,1
   24280:	30c00117 	ldw	r3,4(r6)
   24284:	388e983a 	sll	r7,r7,r2
   24288:	2805883a 	mov	r2,r5
   2428c:	38c6b03a 	or	r3,r7,r3
   24290:	30c00115 	stw	r3,4(r6)
   24294:	003f9b06 	br	24104 <__alt_data_end+0xfffe4104>
   24298:	00c15504 	movi	r3,1364
   2429c:	18801a36 	bltu	r3,r2,24308 <_malloc_r+0x768>
   242a0:	8804d4ba 	srli	r2,r17,18
   242a4:	12001f44 	addi	r8,r2,125
   242a8:	11c01f04 	addi	r7,r2,124
   242ac:	4209883a 	add	r4,r8,r8
   242b0:	003e5906 	br	23c18 <__alt_data_end+0xfffe3c18>
   242b4:	ad400404 	addi	r21,r21,16
   242b8:	003f1706 	br	23f18 <__alt_data_end+0xfffe3f18>
   242bc:	00c01504 	movi	r3,84
   242c0:	18802336 	bltu	r3,r2,24350 <_malloc_r+0x7b0>
   242c4:	3804d33a 	srli	r2,r7,12
   242c8:	11401bc4 	addi	r5,r2,111
   242cc:	10c01b84 	addi	r3,r2,110
   242d0:	294b883a 	add	r5,r5,r5
   242d4:	003f7b06 	br	240c4 <__alt_data_end+0xfffe40c4>
   242d8:	9c000217 	ldw	r16,8(r19)
   242dc:	00bfff04 	movi	r2,-4
   242e0:	80c00117 	ldw	r3,4(r16)
   242e4:	1886703a 	and	r3,r3,r2
   242e8:	003f5306 	br	24038 <__alt_data_end+0xfffe4038>
   242ec:	3083ffcc 	andi	r2,r6,4095
   242f0:	103f181e 	bne	r2,zero,23f54 <__alt_data_end+0xfffe3f54>
   242f4:	99000217 	ldw	r4,8(r19)
   242f8:	b545883a 	add	r2,r22,r21
   242fc:	10800054 	ori	r2,r2,1
   24300:	20800115 	stw	r2,4(r4)
   24304:	003f3e06 	br	24000 <__alt_data_end+0xfffe4000>
   24308:	01003f84 	movi	r4,254
   2430c:	02001fc4 	movi	r8,127
   24310:	01c01f84 	movi	r7,126
   24314:	003e4006 	br	23c18 <__alt_data_end+0xfffe3c18>
   24318:	008000b4 	movhi	r2,2
   2431c:	109ae204 	addi	r2,r2,27528
   24320:	15000015 	stw	r20,0(r2)
   24324:	003f1106 	br	23f6c <__alt_data_end+0xfffe3f6c>
   24328:	00800044 	movi	r2,1
   2432c:	002b883a 	mov	r21,zero
   24330:	003f1f06 	br	23fb0 <__alt_data_end+0xfffe3fb0>
   24334:	81400204 	addi	r5,r16,8
   24338:	9009883a 	mov	r4,r18
   2433c:	002354c0 	call	2354c <_free_r>
   24340:	008000f4 	movhi	r2,3
   24344:	10a18b04 	addi	r2,r2,-31188
   24348:	10c00017 	ldw	r3,0(r2)
   2434c:	003f2c06 	br	24000 <__alt_data_end+0xfffe4000>
   24350:	00c05504 	movi	r3,340
   24354:	18800536 	bltu	r3,r2,2436c <_malloc_r+0x7cc>
   24358:	3804d3fa 	srli	r2,r7,15
   2435c:	11401e04 	addi	r5,r2,120
   24360:	10c01dc4 	addi	r3,r2,119
   24364:	294b883a 	add	r5,r5,r5
   24368:	003f5606 	br	240c4 <__alt_data_end+0xfffe40c4>
   2436c:	00c15504 	movi	r3,1364
   24370:	18800536 	bltu	r3,r2,24388 <_malloc_r+0x7e8>
   24374:	3804d4ba 	srli	r2,r7,18
   24378:	11401f44 	addi	r5,r2,125
   2437c:	10c01f04 	addi	r3,r2,124
   24380:	294b883a 	add	r5,r5,r5
   24384:	003f4f06 	br	240c4 <__alt_data_end+0xfffe40c4>
   24388:	01403f84 	movi	r5,254
   2438c:	00c01f84 	movi	r3,126
   24390:	003f4c06 	br	240c4 <__alt_data_end+0xfffe40c4>
   24394:	98800117 	ldw	r2,4(r19)
   24398:	003fa006 	br	2421c <__alt_data_end+0xfffe421c>
   2439c:	8808d0fa 	srli	r4,r17,3
   243a0:	20800044 	addi	r2,r4,1
   243a4:	1085883a 	add	r2,r2,r2
   243a8:	003e9006 	br	23dec <__alt_data_end+0xfffe3dec>

000243ac <memset>:
   243ac:	20c000cc 	andi	r3,r4,3
   243b0:	2005883a 	mov	r2,r4
   243b4:	18004426 	beq	r3,zero,244c8 <memset+0x11c>
   243b8:	31ffffc4 	addi	r7,r6,-1
   243bc:	30004026 	beq	r6,zero,244c0 <memset+0x114>
   243c0:	2813883a 	mov	r9,r5
   243c4:	200d883a 	mov	r6,r4
   243c8:	2007883a 	mov	r3,r4
   243cc:	00000406 	br	243e0 <memset+0x34>
   243d0:	3a3fffc4 	addi	r8,r7,-1
   243d4:	31800044 	addi	r6,r6,1
   243d8:	38003926 	beq	r7,zero,244c0 <memset+0x114>
   243dc:	400f883a 	mov	r7,r8
   243e0:	18c00044 	addi	r3,r3,1
   243e4:	32400005 	stb	r9,0(r6)
   243e8:	1a0000cc 	andi	r8,r3,3
   243ec:	403ff81e 	bne	r8,zero,243d0 <__alt_data_end+0xfffe43d0>
   243f0:	010000c4 	movi	r4,3
   243f4:	21c02d2e 	bgeu	r4,r7,244ac <memset+0x100>
   243f8:	29003fcc 	andi	r4,r5,255
   243fc:	200c923a 	slli	r6,r4,8
   24400:	3108b03a 	or	r4,r6,r4
   24404:	200c943a 	slli	r6,r4,16
   24408:	218cb03a 	or	r6,r4,r6
   2440c:	010003c4 	movi	r4,15
   24410:	21c0182e 	bgeu	r4,r7,24474 <memset+0xc8>
   24414:	3b3ffc04 	addi	r12,r7,-16
   24418:	6018d13a 	srli	r12,r12,4
   2441c:	1a000104 	addi	r8,r3,4
   24420:	1ac00204 	addi	r11,r3,8
   24424:	6008913a 	slli	r4,r12,4
   24428:	1a800304 	addi	r10,r3,12
   2442c:	1813883a 	mov	r9,r3
   24430:	21000504 	addi	r4,r4,20
   24434:	1909883a 	add	r4,r3,r4
   24438:	49800015 	stw	r6,0(r9)
   2443c:	41800015 	stw	r6,0(r8)
   24440:	59800015 	stw	r6,0(r11)
   24444:	51800015 	stw	r6,0(r10)
   24448:	42000404 	addi	r8,r8,16
   2444c:	4a400404 	addi	r9,r9,16
   24450:	5ac00404 	addi	r11,r11,16
   24454:	52800404 	addi	r10,r10,16
   24458:	413ff71e 	bne	r8,r4,24438 <__alt_data_end+0xfffe4438>
   2445c:	63000044 	addi	r12,r12,1
   24460:	6018913a 	slli	r12,r12,4
   24464:	39c003cc 	andi	r7,r7,15
   24468:	010000c4 	movi	r4,3
   2446c:	1b07883a 	add	r3,r3,r12
   24470:	21c00e2e 	bgeu	r4,r7,244ac <memset+0x100>
   24474:	1813883a 	mov	r9,r3
   24478:	3811883a 	mov	r8,r7
   2447c:	010000c4 	movi	r4,3
   24480:	49800015 	stw	r6,0(r9)
   24484:	423fff04 	addi	r8,r8,-4
   24488:	4a400104 	addi	r9,r9,4
   2448c:	223ffc36 	bltu	r4,r8,24480 <__alt_data_end+0xfffe4480>
   24490:	393fff04 	addi	r4,r7,-4
   24494:	2008d0ba 	srli	r4,r4,2
   24498:	39c000cc 	andi	r7,r7,3
   2449c:	21000044 	addi	r4,r4,1
   244a0:	2109883a 	add	r4,r4,r4
   244a4:	2109883a 	add	r4,r4,r4
   244a8:	1907883a 	add	r3,r3,r4
   244ac:	38000526 	beq	r7,zero,244c4 <memset+0x118>
   244b0:	19cf883a 	add	r7,r3,r7
   244b4:	19400005 	stb	r5,0(r3)
   244b8:	18c00044 	addi	r3,r3,1
   244bc:	38fffd1e 	bne	r7,r3,244b4 <__alt_data_end+0xfffe44b4>
   244c0:	f800283a 	ret
   244c4:	f800283a 	ret
   244c8:	2007883a 	mov	r3,r4
   244cc:	300f883a 	mov	r7,r6
   244d0:	003fc706 	br	243f0 <__alt_data_end+0xfffe43f0>

000244d4 <_sbrk_r>:
   244d4:	defffd04 	addi	sp,sp,-12
   244d8:	dc000015 	stw	r16,0(sp)
   244dc:	040000f4 	movhi	r16,3
   244e0:	dc400115 	stw	r17,4(sp)
   244e4:	84218704 	addi	r16,r16,-31204
   244e8:	2023883a 	mov	r17,r4
   244ec:	2809883a 	mov	r4,r5
   244f0:	dfc00215 	stw	ra,8(sp)
   244f4:	80000015 	stw	zero,0(r16)
   244f8:	0024e1c0 	call	24e1c <sbrk>
   244fc:	00ffffc4 	movi	r3,-1
   24500:	10c00526 	beq	r2,r3,24518 <_sbrk_r+0x44>
   24504:	dfc00217 	ldw	ra,8(sp)
   24508:	dc400117 	ldw	r17,4(sp)
   2450c:	dc000017 	ldw	r16,0(sp)
   24510:	dec00304 	addi	sp,sp,12
   24514:	f800283a 	ret
   24518:	80c00017 	ldw	r3,0(r16)
   2451c:	183ff926 	beq	r3,zero,24504 <__alt_data_end+0xfffe4504>
   24520:	88c00015 	stw	r3,0(r17)
   24524:	003ff706 	br	24504 <__alt_data_end+0xfffe4504>

00024528 <__sread>:
   24528:	defffe04 	addi	sp,sp,-8
   2452c:	dc000015 	stw	r16,0(sp)
   24530:	2821883a 	mov	r16,r5
   24534:	2940038f 	ldh	r5,14(r5)
   24538:	dfc00115 	stw	ra,4(sp)
   2453c:	002492c0 	call	2492c <_read_r>
   24540:	10000716 	blt	r2,zero,24560 <__sread+0x38>
   24544:	80c01417 	ldw	r3,80(r16)
   24548:	1887883a 	add	r3,r3,r2
   2454c:	80c01415 	stw	r3,80(r16)
   24550:	dfc00117 	ldw	ra,4(sp)
   24554:	dc000017 	ldw	r16,0(sp)
   24558:	dec00204 	addi	sp,sp,8
   2455c:	f800283a 	ret
   24560:	80c0030b 	ldhu	r3,12(r16)
   24564:	18fbffcc 	andi	r3,r3,61439
   24568:	80c0030d 	sth	r3,12(r16)
   2456c:	dfc00117 	ldw	ra,4(sp)
   24570:	dc000017 	ldw	r16,0(sp)
   24574:	dec00204 	addi	sp,sp,8
   24578:	f800283a 	ret

0002457c <__seofread>:
   2457c:	0005883a 	mov	r2,zero
   24580:	f800283a 	ret

00024584 <__swrite>:
   24584:	2880030b 	ldhu	r2,12(r5)
   24588:	defffb04 	addi	sp,sp,-20
   2458c:	dcc00315 	stw	r19,12(sp)
   24590:	dc800215 	stw	r18,8(sp)
   24594:	dc400115 	stw	r17,4(sp)
   24598:	dc000015 	stw	r16,0(sp)
   2459c:	dfc00415 	stw	ra,16(sp)
   245a0:	10c0400c 	andi	r3,r2,256
   245a4:	2821883a 	mov	r16,r5
   245a8:	2023883a 	mov	r17,r4
   245ac:	3025883a 	mov	r18,r6
   245b0:	3827883a 	mov	r19,r7
   245b4:	18000526 	beq	r3,zero,245cc <__swrite+0x48>
   245b8:	2940038f 	ldh	r5,14(r5)
   245bc:	01c00084 	movi	r7,2
   245c0:	000d883a 	mov	r6,zero
   245c4:	00248cc0 	call	248cc <_lseek_r>
   245c8:	8080030b 	ldhu	r2,12(r16)
   245cc:	8140038f 	ldh	r5,14(r16)
   245d0:	10bbffcc 	andi	r2,r2,61439
   245d4:	980f883a 	mov	r7,r19
   245d8:	900d883a 	mov	r6,r18
   245dc:	8809883a 	mov	r4,r17
   245e0:	8080030d 	sth	r2,12(r16)
   245e4:	dfc00417 	ldw	ra,16(sp)
   245e8:	dcc00317 	ldw	r19,12(sp)
   245ec:	dc800217 	ldw	r18,8(sp)
   245f0:	dc400117 	ldw	r17,4(sp)
   245f4:	dc000017 	ldw	r16,0(sp)
   245f8:	dec00504 	addi	sp,sp,20
   245fc:	00246641 	jmpi	24664 <_write_r>

00024600 <__sseek>:
   24600:	defffe04 	addi	sp,sp,-8
   24604:	dc000015 	stw	r16,0(sp)
   24608:	2821883a 	mov	r16,r5
   2460c:	2940038f 	ldh	r5,14(r5)
   24610:	dfc00115 	stw	ra,4(sp)
   24614:	00248cc0 	call	248cc <_lseek_r>
   24618:	00ffffc4 	movi	r3,-1
   2461c:	10c00826 	beq	r2,r3,24640 <__sseek+0x40>
   24620:	80c0030b 	ldhu	r3,12(r16)
   24624:	80801415 	stw	r2,80(r16)
   24628:	18c40014 	ori	r3,r3,4096
   2462c:	80c0030d 	sth	r3,12(r16)
   24630:	dfc00117 	ldw	ra,4(sp)
   24634:	dc000017 	ldw	r16,0(sp)
   24638:	dec00204 	addi	sp,sp,8
   2463c:	f800283a 	ret
   24640:	80c0030b 	ldhu	r3,12(r16)
   24644:	18fbffcc 	andi	r3,r3,61439
   24648:	80c0030d 	sth	r3,12(r16)
   2464c:	dfc00117 	ldw	ra,4(sp)
   24650:	dc000017 	ldw	r16,0(sp)
   24654:	dec00204 	addi	sp,sp,8
   24658:	f800283a 	ret

0002465c <__sclose>:
   2465c:	2940038f 	ldh	r5,14(r5)
   24660:	00246c41 	jmpi	246c4 <_close_r>

00024664 <_write_r>:
   24664:	defffd04 	addi	sp,sp,-12
   24668:	2805883a 	mov	r2,r5
   2466c:	dc000015 	stw	r16,0(sp)
   24670:	040000f4 	movhi	r16,3
   24674:	dc400115 	stw	r17,4(sp)
   24678:	300b883a 	mov	r5,r6
   2467c:	84218704 	addi	r16,r16,-31204
   24680:	2023883a 	mov	r17,r4
   24684:	380d883a 	mov	r6,r7
   24688:	1009883a 	mov	r4,r2
   2468c:	dfc00215 	stw	ra,8(sp)
   24690:	80000015 	stw	zero,0(r16)
   24694:	0024f080 	call	24f08 <write>
   24698:	00ffffc4 	movi	r3,-1
   2469c:	10c00526 	beq	r2,r3,246b4 <_write_r+0x50>
   246a0:	dfc00217 	ldw	ra,8(sp)
   246a4:	dc400117 	ldw	r17,4(sp)
   246a8:	dc000017 	ldw	r16,0(sp)
   246ac:	dec00304 	addi	sp,sp,12
   246b0:	f800283a 	ret
   246b4:	80c00017 	ldw	r3,0(r16)
   246b8:	183ff926 	beq	r3,zero,246a0 <__alt_data_end+0xfffe46a0>
   246bc:	88c00015 	stw	r3,0(r17)
   246c0:	003ff706 	br	246a0 <__alt_data_end+0xfffe46a0>

000246c4 <_close_r>:
   246c4:	defffd04 	addi	sp,sp,-12
   246c8:	dc000015 	stw	r16,0(sp)
   246cc:	040000f4 	movhi	r16,3
   246d0:	dc400115 	stw	r17,4(sp)
   246d4:	84218704 	addi	r16,r16,-31204
   246d8:	2023883a 	mov	r17,r4
   246dc:	2809883a 	mov	r4,r5
   246e0:	dfc00215 	stw	ra,8(sp)
   246e4:	80000015 	stw	zero,0(r16)
   246e8:	00215ac0 	call	215ac <close>
   246ec:	00ffffc4 	movi	r3,-1
   246f0:	10c00526 	beq	r2,r3,24708 <_close_r+0x44>
   246f4:	dfc00217 	ldw	ra,8(sp)
   246f8:	dc400117 	ldw	r17,4(sp)
   246fc:	dc000017 	ldw	r16,0(sp)
   24700:	dec00304 	addi	sp,sp,12
   24704:	f800283a 	ret
   24708:	80c00017 	ldw	r3,0(r16)
   2470c:	183ff926 	beq	r3,zero,246f4 <__alt_data_end+0xfffe46f4>
   24710:	88c00015 	stw	r3,0(r17)
   24714:	003ff706 	br	246f4 <__alt_data_end+0xfffe46f4>

00024718 <_fclose_r>:
   24718:	28003926 	beq	r5,zero,24800 <_fclose_r+0xe8>
   2471c:	defffc04 	addi	sp,sp,-16
   24720:	dc400115 	stw	r17,4(sp)
   24724:	dc000015 	stw	r16,0(sp)
   24728:	dfc00315 	stw	ra,12(sp)
   2472c:	dc800215 	stw	r18,8(sp)
   24730:	2023883a 	mov	r17,r4
   24734:	2821883a 	mov	r16,r5
   24738:	20000226 	beq	r4,zero,24744 <_fclose_r+0x2c>
   2473c:	20800e17 	ldw	r2,56(r4)
   24740:	10002726 	beq	r2,zero,247e0 <_fclose_r+0xc8>
   24744:	8080030f 	ldh	r2,12(r16)
   24748:	1000071e 	bne	r2,zero,24768 <_fclose_r+0x50>
   2474c:	0005883a 	mov	r2,zero
   24750:	dfc00317 	ldw	ra,12(sp)
   24754:	dc800217 	ldw	r18,8(sp)
   24758:	dc400117 	ldw	r17,4(sp)
   2475c:	dc000017 	ldw	r16,0(sp)
   24760:	dec00404 	addi	sp,sp,16
   24764:	f800283a 	ret
   24768:	800b883a 	mov	r5,r16
   2476c:	8809883a 	mov	r4,r17
   24770:	0022de00 	call	22de0 <__sflush_r>
   24774:	1025883a 	mov	r18,r2
   24778:	80800b17 	ldw	r2,44(r16)
   2477c:	10000426 	beq	r2,zero,24790 <_fclose_r+0x78>
   24780:	81400717 	ldw	r5,28(r16)
   24784:	8809883a 	mov	r4,r17
   24788:	103ee83a 	callr	r2
   2478c:	10001616 	blt	r2,zero,247e8 <_fclose_r+0xd0>
   24790:	8080030b 	ldhu	r2,12(r16)
   24794:	1080200c 	andi	r2,r2,128
   24798:	1000151e 	bne	r2,zero,247f0 <_fclose_r+0xd8>
   2479c:	81400c17 	ldw	r5,48(r16)
   247a0:	28000526 	beq	r5,zero,247b8 <_fclose_r+0xa0>
   247a4:	80801004 	addi	r2,r16,64
   247a8:	28800226 	beq	r5,r2,247b4 <_fclose_r+0x9c>
   247ac:	8809883a 	mov	r4,r17
   247b0:	002354c0 	call	2354c <_free_r>
   247b4:	80000c15 	stw	zero,48(r16)
   247b8:	81401117 	ldw	r5,68(r16)
   247bc:	28000326 	beq	r5,zero,247cc <_fclose_r+0xb4>
   247c0:	8809883a 	mov	r4,r17
   247c4:	002354c0 	call	2354c <_free_r>
   247c8:	80001115 	stw	zero,68(r16)
   247cc:	00233e80 	call	233e8 <__sfp_lock_acquire>
   247d0:	8000030d 	sth	zero,12(r16)
   247d4:	00233ec0 	call	233ec <__sfp_lock_release>
   247d8:	9005883a 	mov	r2,r18
   247dc:	003fdc06 	br	24750 <__alt_data_end+0xfffe4750>
   247e0:	00233d80 	call	233d8 <__sinit>
   247e4:	003fd706 	br	24744 <__alt_data_end+0xfffe4744>
   247e8:	04bfffc4 	movi	r18,-1
   247ec:	003fe806 	br	24790 <__alt_data_end+0xfffe4790>
   247f0:	81400417 	ldw	r5,16(r16)
   247f4:	8809883a 	mov	r4,r17
   247f8:	002354c0 	call	2354c <_free_r>
   247fc:	003fe706 	br	2479c <__alt_data_end+0xfffe479c>
   24800:	0005883a 	mov	r2,zero
   24804:	f800283a 	ret

00024808 <fclose>:
   24808:	008000b4 	movhi	r2,2
   2480c:	109ae104 	addi	r2,r2,27524
   24810:	200b883a 	mov	r5,r4
   24814:	11000017 	ldw	r4,0(r2)
   24818:	00247181 	jmpi	24718 <_fclose_r>

0002481c <_fstat_r>:
   2481c:	defffd04 	addi	sp,sp,-12
   24820:	2805883a 	mov	r2,r5
   24824:	dc000015 	stw	r16,0(sp)
   24828:	040000f4 	movhi	r16,3
   2482c:	dc400115 	stw	r17,4(sp)
   24830:	84218704 	addi	r16,r16,-31204
   24834:	2023883a 	mov	r17,r4
   24838:	300b883a 	mov	r5,r6
   2483c:	1009883a 	mov	r4,r2
   24840:	dfc00215 	stw	ra,8(sp)
   24844:	80000015 	stw	zero,0(r16)
   24848:	00249fc0 	call	249fc <fstat>
   2484c:	00ffffc4 	movi	r3,-1
   24850:	10c00526 	beq	r2,r3,24868 <_fstat_r+0x4c>
   24854:	dfc00217 	ldw	ra,8(sp)
   24858:	dc400117 	ldw	r17,4(sp)
   2485c:	dc000017 	ldw	r16,0(sp)
   24860:	dec00304 	addi	sp,sp,12
   24864:	f800283a 	ret
   24868:	80c00017 	ldw	r3,0(r16)
   2486c:	183ff926 	beq	r3,zero,24854 <__alt_data_end+0xfffe4854>
   24870:	88c00015 	stw	r3,0(r17)
   24874:	003ff706 	br	24854 <__alt_data_end+0xfffe4854>

00024878 <_isatty_r>:
   24878:	defffd04 	addi	sp,sp,-12
   2487c:	dc000015 	stw	r16,0(sp)
   24880:	040000f4 	movhi	r16,3
   24884:	dc400115 	stw	r17,4(sp)
   24888:	84218704 	addi	r16,r16,-31204
   2488c:	2023883a 	mov	r17,r4
   24890:	2809883a 	mov	r4,r5
   24894:	dfc00215 	stw	ra,8(sp)
   24898:	80000015 	stw	zero,0(r16)
   2489c:	0024ae80 	call	24ae8 <isatty>
   248a0:	00ffffc4 	movi	r3,-1
   248a4:	10c00526 	beq	r2,r3,248bc <_isatty_r+0x44>
   248a8:	dfc00217 	ldw	ra,8(sp)
   248ac:	dc400117 	ldw	r17,4(sp)
   248b0:	dc000017 	ldw	r16,0(sp)
   248b4:	dec00304 	addi	sp,sp,12
   248b8:	f800283a 	ret
   248bc:	80c00017 	ldw	r3,0(r16)
   248c0:	183ff926 	beq	r3,zero,248a8 <__alt_data_end+0xfffe48a8>
   248c4:	88c00015 	stw	r3,0(r17)
   248c8:	003ff706 	br	248a8 <__alt_data_end+0xfffe48a8>

000248cc <_lseek_r>:
   248cc:	defffd04 	addi	sp,sp,-12
   248d0:	2805883a 	mov	r2,r5
   248d4:	dc000015 	stw	r16,0(sp)
   248d8:	040000f4 	movhi	r16,3
   248dc:	dc400115 	stw	r17,4(sp)
   248e0:	300b883a 	mov	r5,r6
   248e4:	84218704 	addi	r16,r16,-31204
   248e8:	2023883a 	mov	r17,r4
   248ec:	380d883a 	mov	r6,r7
   248f0:	1009883a 	mov	r4,r2
   248f4:	dfc00215 	stw	ra,8(sp)
   248f8:	80000015 	stw	zero,0(r16)
   248fc:	0024bc80 	call	24bc8 <lseek>
   24900:	00ffffc4 	movi	r3,-1
   24904:	10c00526 	beq	r2,r3,2491c <_lseek_r+0x50>
   24908:	dfc00217 	ldw	ra,8(sp)
   2490c:	dc400117 	ldw	r17,4(sp)
   24910:	dc000017 	ldw	r16,0(sp)
   24914:	dec00304 	addi	sp,sp,12
   24918:	f800283a 	ret
   2491c:	80c00017 	ldw	r3,0(r16)
   24920:	183ff926 	beq	r3,zero,24908 <__alt_data_end+0xfffe4908>
   24924:	88c00015 	stw	r3,0(r17)
   24928:	003ff706 	br	24908 <__alt_data_end+0xfffe4908>

0002492c <_read_r>:
   2492c:	defffd04 	addi	sp,sp,-12
   24930:	2805883a 	mov	r2,r5
   24934:	dc000015 	stw	r16,0(sp)
   24938:	040000f4 	movhi	r16,3
   2493c:	dc400115 	stw	r17,4(sp)
   24940:	300b883a 	mov	r5,r6
   24944:	84218704 	addi	r16,r16,-31204
   24948:	2023883a 	mov	r17,r4
   2494c:	380d883a 	mov	r6,r7
   24950:	1009883a 	mov	r4,r2
   24954:	dfc00215 	stw	ra,8(sp)
   24958:	80000015 	stw	zero,0(r16)
   2495c:	0024d200 	call	24d20 <read>
   24960:	00ffffc4 	movi	r3,-1
   24964:	10c00526 	beq	r2,r3,2497c <_read_r+0x50>
   24968:	dfc00217 	ldw	ra,8(sp)
   2496c:	dc400117 	ldw	r17,4(sp)
   24970:	dc000017 	ldw	r16,0(sp)
   24974:	dec00304 	addi	sp,sp,12
   24978:	f800283a 	ret
   2497c:	80c00017 	ldw	r3,0(r16)
   24980:	183ff926 	beq	r3,zero,24968 <__alt_data_end+0xfffe4968>
   24984:	88c00015 	stw	r3,0(r17)
   24988:	003ff706 	br	24968 <__alt_data_end+0xfffe4968>

0002498c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   2498c:	defffd04 	addi	sp,sp,-12
   24990:	df000215 	stw	fp,8(sp)
   24994:	df000204 	addi	fp,sp,8
   24998:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   2499c:	0001883a 	nop
   249a0:	e0bfff17 	ldw	r2,-4(fp)
   249a4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   249a8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   249ac:	10000226 	beq	r2,zero,249b8 <_exit+0x2c>
    ALT_SIM_FAIL();
   249b0:	002af070 	cmpltui	zero,zero,43969
   249b4:	00000106 	br	249bc <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   249b8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   249bc:	003fff06 	br	249bc <__alt_data_end+0xfffe49bc>

000249c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   249c0:	defffe04 	addi	sp,sp,-8
   249c4:	dfc00115 	stw	ra,4(sp)
   249c8:	df000015 	stw	fp,0(sp)
   249cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   249d0:	d0a00517 	ldw	r2,-32748(gp)
   249d4:	10000326 	beq	r2,zero,249e4 <alt_get_errno+0x24>
   249d8:	d0a00517 	ldw	r2,-32748(gp)
   249dc:	103ee83a 	callr	r2
   249e0:	00000106 	br	249e8 <alt_get_errno+0x28>
   249e4:	d0a6b004 	addi	r2,gp,-25920
}
   249e8:	e037883a 	mov	sp,fp
   249ec:	dfc00117 	ldw	ra,4(sp)
   249f0:	df000017 	ldw	fp,0(sp)
   249f4:	dec00204 	addi	sp,sp,8
   249f8:	f800283a 	ret

000249fc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   249fc:	defffb04 	addi	sp,sp,-20
   24a00:	dfc00415 	stw	ra,16(sp)
   24a04:	df000315 	stw	fp,12(sp)
   24a08:	df000304 	addi	fp,sp,12
   24a0c:	e13ffe15 	stw	r4,-8(fp)
   24a10:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   24a14:	e0bffe17 	ldw	r2,-8(fp)
   24a18:	10000616 	blt	r2,zero,24a34 <fstat+0x38>
   24a1c:	e0bffe17 	ldw	r2,-8(fp)
   24a20:	10c00324 	muli	r3,r2,12
   24a24:	008000b4 	movhi	r2,2
   24a28:	10986c04 	addi	r2,r2,25008
   24a2c:	1885883a 	add	r2,r3,r2
   24a30:	00000106 	br	24a38 <fstat+0x3c>
   24a34:	0005883a 	mov	r2,zero
   24a38:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   24a3c:	e0bffd17 	ldw	r2,-12(fp)
   24a40:	10001026 	beq	r2,zero,24a84 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   24a44:	e0bffd17 	ldw	r2,-12(fp)
   24a48:	10800017 	ldw	r2,0(r2)
   24a4c:	10800817 	ldw	r2,32(r2)
   24a50:	10000726 	beq	r2,zero,24a70 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   24a54:	e0bffd17 	ldw	r2,-12(fp)
   24a58:	10800017 	ldw	r2,0(r2)
   24a5c:	10800817 	ldw	r2,32(r2)
   24a60:	e17fff17 	ldw	r5,-4(fp)
   24a64:	e13ffd17 	ldw	r4,-12(fp)
   24a68:	103ee83a 	callr	r2
   24a6c:	00000a06 	br	24a98 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   24a70:	e0bfff17 	ldw	r2,-4(fp)
   24a74:	00c80004 	movi	r3,8192
   24a78:	10c00115 	stw	r3,4(r2)
      return 0;
   24a7c:	0005883a 	mov	r2,zero
   24a80:	00000506 	br	24a98 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   24a84:	00249c00 	call	249c0 <alt_get_errno>
   24a88:	1007883a 	mov	r3,r2
   24a8c:	00801444 	movi	r2,81
   24a90:	18800015 	stw	r2,0(r3)
    return -1;
   24a94:	00bfffc4 	movi	r2,-1
  }
}
   24a98:	e037883a 	mov	sp,fp
   24a9c:	dfc00117 	ldw	ra,4(sp)
   24aa0:	df000017 	ldw	fp,0(sp)
   24aa4:	dec00204 	addi	sp,sp,8
   24aa8:	f800283a 	ret

00024aac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   24aac:	defffe04 	addi	sp,sp,-8
   24ab0:	dfc00115 	stw	ra,4(sp)
   24ab4:	df000015 	stw	fp,0(sp)
   24ab8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   24abc:	d0a00517 	ldw	r2,-32748(gp)
   24ac0:	10000326 	beq	r2,zero,24ad0 <alt_get_errno+0x24>
   24ac4:	d0a00517 	ldw	r2,-32748(gp)
   24ac8:	103ee83a 	callr	r2
   24acc:	00000106 	br	24ad4 <alt_get_errno+0x28>
   24ad0:	d0a6b004 	addi	r2,gp,-25920
}
   24ad4:	e037883a 	mov	sp,fp
   24ad8:	dfc00117 	ldw	ra,4(sp)
   24adc:	df000017 	ldw	fp,0(sp)
   24ae0:	dec00204 	addi	sp,sp,8
   24ae4:	f800283a 	ret

00024ae8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   24ae8:	deffed04 	addi	sp,sp,-76
   24aec:	dfc01215 	stw	ra,72(sp)
   24af0:	df001115 	stw	fp,68(sp)
   24af4:	df001104 	addi	fp,sp,68
   24af8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   24afc:	e0bfff17 	ldw	r2,-4(fp)
   24b00:	10000616 	blt	r2,zero,24b1c <isatty+0x34>
   24b04:	e0bfff17 	ldw	r2,-4(fp)
   24b08:	10c00324 	muli	r3,r2,12
   24b0c:	008000b4 	movhi	r2,2
   24b10:	10986c04 	addi	r2,r2,25008
   24b14:	1885883a 	add	r2,r3,r2
   24b18:	00000106 	br	24b20 <isatty+0x38>
   24b1c:	0005883a 	mov	r2,zero
   24b20:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   24b24:	e0bfef17 	ldw	r2,-68(fp)
   24b28:	10000e26 	beq	r2,zero,24b64 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   24b2c:	e0bfef17 	ldw	r2,-68(fp)
   24b30:	10800017 	ldw	r2,0(r2)
   24b34:	10800817 	ldw	r2,32(r2)
   24b38:	1000021e 	bne	r2,zero,24b44 <isatty+0x5c>
    {
      return 1;
   24b3c:	00800044 	movi	r2,1
   24b40:	00000d06 	br	24b78 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   24b44:	e0bff004 	addi	r2,fp,-64
   24b48:	100b883a 	mov	r5,r2
   24b4c:	e13fff17 	ldw	r4,-4(fp)
   24b50:	00249fc0 	call	249fc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   24b54:	e0bff117 	ldw	r2,-60(fp)
   24b58:	10880020 	cmpeqi	r2,r2,8192
   24b5c:	10803fcc 	andi	r2,r2,255
   24b60:	00000506 	br	24b78 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   24b64:	0024aac0 	call	24aac <alt_get_errno>
   24b68:	1007883a 	mov	r3,r2
   24b6c:	00801444 	movi	r2,81
   24b70:	18800015 	stw	r2,0(r3)
    return 0;
   24b74:	0005883a 	mov	r2,zero
  }
}
   24b78:	e037883a 	mov	sp,fp
   24b7c:	dfc00117 	ldw	ra,4(sp)
   24b80:	df000017 	ldw	fp,0(sp)
   24b84:	dec00204 	addi	sp,sp,8
   24b88:	f800283a 	ret

00024b8c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   24b8c:	defffe04 	addi	sp,sp,-8
   24b90:	dfc00115 	stw	ra,4(sp)
   24b94:	df000015 	stw	fp,0(sp)
   24b98:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   24b9c:	d0a00517 	ldw	r2,-32748(gp)
   24ba0:	10000326 	beq	r2,zero,24bb0 <alt_get_errno+0x24>
   24ba4:	d0a00517 	ldw	r2,-32748(gp)
   24ba8:	103ee83a 	callr	r2
   24bac:	00000106 	br	24bb4 <alt_get_errno+0x28>
   24bb0:	d0a6b004 	addi	r2,gp,-25920
}
   24bb4:	e037883a 	mov	sp,fp
   24bb8:	dfc00117 	ldw	ra,4(sp)
   24bbc:	df000017 	ldw	fp,0(sp)
   24bc0:	dec00204 	addi	sp,sp,8
   24bc4:	f800283a 	ret

00024bc8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   24bc8:	defff904 	addi	sp,sp,-28
   24bcc:	dfc00615 	stw	ra,24(sp)
   24bd0:	df000515 	stw	fp,20(sp)
   24bd4:	df000504 	addi	fp,sp,20
   24bd8:	e13ffd15 	stw	r4,-12(fp)
   24bdc:	e17ffe15 	stw	r5,-8(fp)
   24be0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   24be4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   24be8:	e0bffd17 	ldw	r2,-12(fp)
   24bec:	10000616 	blt	r2,zero,24c08 <lseek+0x40>
   24bf0:	e0bffd17 	ldw	r2,-12(fp)
   24bf4:	10c00324 	muli	r3,r2,12
   24bf8:	008000b4 	movhi	r2,2
   24bfc:	10986c04 	addi	r2,r2,25008
   24c00:	1885883a 	add	r2,r3,r2
   24c04:	00000106 	br	24c0c <lseek+0x44>
   24c08:	0005883a 	mov	r2,zero
   24c0c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   24c10:	e0bffc17 	ldw	r2,-16(fp)
   24c14:	10001026 	beq	r2,zero,24c58 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   24c18:	e0bffc17 	ldw	r2,-16(fp)
   24c1c:	10800017 	ldw	r2,0(r2)
   24c20:	10800717 	ldw	r2,28(r2)
   24c24:	10000926 	beq	r2,zero,24c4c <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   24c28:	e0bffc17 	ldw	r2,-16(fp)
   24c2c:	10800017 	ldw	r2,0(r2)
   24c30:	10800717 	ldw	r2,28(r2)
   24c34:	e1bfff17 	ldw	r6,-4(fp)
   24c38:	e17ffe17 	ldw	r5,-8(fp)
   24c3c:	e13ffc17 	ldw	r4,-16(fp)
   24c40:	103ee83a 	callr	r2
   24c44:	e0bffb15 	stw	r2,-20(fp)
   24c48:	00000506 	br	24c60 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   24c4c:	00bfde84 	movi	r2,-134
   24c50:	e0bffb15 	stw	r2,-20(fp)
   24c54:	00000206 	br	24c60 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   24c58:	00bfebc4 	movi	r2,-81
   24c5c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   24c60:	e0bffb17 	ldw	r2,-20(fp)
   24c64:	1000070e 	bge	r2,zero,24c84 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   24c68:	0024b8c0 	call	24b8c <alt_get_errno>
   24c6c:	1007883a 	mov	r3,r2
   24c70:	e0bffb17 	ldw	r2,-20(fp)
   24c74:	0085c83a 	sub	r2,zero,r2
   24c78:	18800015 	stw	r2,0(r3)
    rc = -1;
   24c7c:	00bfffc4 	movi	r2,-1
   24c80:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   24c84:	e0bffb17 	ldw	r2,-20(fp)
}
   24c88:	e037883a 	mov	sp,fp
   24c8c:	dfc00117 	ldw	ra,4(sp)
   24c90:	df000017 	ldw	fp,0(sp)
   24c94:	dec00204 	addi	sp,sp,8
   24c98:	f800283a 	ret

00024c9c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   24c9c:	defffe04 	addi	sp,sp,-8
   24ca0:	df000115 	stw	fp,4(sp)
   24ca4:	df000104 	addi	fp,sp,4
   24ca8:	e13fff15 	stw	r4,-4(fp)
}
   24cac:	0001883a 	nop
   24cb0:	e037883a 	mov	sp,fp
   24cb4:	df000017 	ldw	fp,0(sp)
   24cb8:	dec00104 	addi	sp,sp,4
   24cbc:	f800283a 	ret

00024cc0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   24cc0:	defffe04 	addi	sp,sp,-8
   24cc4:	df000115 	stw	fp,4(sp)
   24cc8:	df000104 	addi	fp,sp,4
   24ccc:	e13fff15 	stw	r4,-4(fp)
}
   24cd0:	0001883a 	nop
   24cd4:	e037883a 	mov	sp,fp
   24cd8:	df000017 	ldw	fp,0(sp)
   24cdc:	dec00104 	addi	sp,sp,4
   24ce0:	f800283a 	ret

00024ce4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   24ce4:	defffe04 	addi	sp,sp,-8
   24ce8:	dfc00115 	stw	ra,4(sp)
   24cec:	df000015 	stw	fp,0(sp)
   24cf0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   24cf4:	d0a00517 	ldw	r2,-32748(gp)
   24cf8:	10000326 	beq	r2,zero,24d08 <alt_get_errno+0x24>
   24cfc:	d0a00517 	ldw	r2,-32748(gp)
   24d00:	103ee83a 	callr	r2
   24d04:	00000106 	br	24d0c <alt_get_errno+0x28>
   24d08:	d0a6b004 	addi	r2,gp,-25920
}
   24d0c:	e037883a 	mov	sp,fp
   24d10:	dfc00117 	ldw	ra,4(sp)
   24d14:	df000017 	ldw	fp,0(sp)
   24d18:	dec00204 	addi	sp,sp,8
   24d1c:	f800283a 	ret

00024d20 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   24d20:	defff904 	addi	sp,sp,-28
   24d24:	dfc00615 	stw	ra,24(sp)
   24d28:	df000515 	stw	fp,20(sp)
   24d2c:	df000504 	addi	fp,sp,20
   24d30:	e13ffd15 	stw	r4,-12(fp)
   24d34:	e17ffe15 	stw	r5,-8(fp)
   24d38:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   24d3c:	e0bffd17 	ldw	r2,-12(fp)
   24d40:	10000616 	blt	r2,zero,24d5c <read+0x3c>
   24d44:	e0bffd17 	ldw	r2,-12(fp)
   24d48:	10c00324 	muli	r3,r2,12
   24d4c:	008000b4 	movhi	r2,2
   24d50:	10986c04 	addi	r2,r2,25008
   24d54:	1885883a 	add	r2,r3,r2
   24d58:	00000106 	br	24d60 <read+0x40>
   24d5c:	0005883a 	mov	r2,zero
   24d60:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   24d64:	e0bffb17 	ldw	r2,-20(fp)
   24d68:	10002226 	beq	r2,zero,24df4 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   24d6c:	e0bffb17 	ldw	r2,-20(fp)
   24d70:	10800217 	ldw	r2,8(r2)
   24d74:	108000cc 	andi	r2,r2,3
   24d78:	10800060 	cmpeqi	r2,r2,1
   24d7c:	1000181e 	bne	r2,zero,24de0 <read+0xc0>
        (fd->dev->read))
   24d80:	e0bffb17 	ldw	r2,-20(fp)
   24d84:	10800017 	ldw	r2,0(r2)
   24d88:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   24d8c:	10001426 	beq	r2,zero,24de0 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   24d90:	e0bffb17 	ldw	r2,-20(fp)
   24d94:	10800017 	ldw	r2,0(r2)
   24d98:	10800517 	ldw	r2,20(r2)
   24d9c:	e0ffff17 	ldw	r3,-4(fp)
   24da0:	180d883a 	mov	r6,r3
   24da4:	e17ffe17 	ldw	r5,-8(fp)
   24da8:	e13ffb17 	ldw	r4,-20(fp)
   24dac:	103ee83a 	callr	r2
   24db0:	e0bffc15 	stw	r2,-16(fp)
   24db4:	e0bffc17 	ldw	r2,-16(fp)
   24db8:	1000070e 	bge	r2,zero,24dd8 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   24dbc:	0024ce40 	call	24ce4 <alt_get_errno>
   24dc0:	1007883a 	mov	r3,r2
   24dc4:	e0bffc17 	ldw	r2,-16(fp)
   24dc8:	0085c83a 	sub	r2,zero,r2
   24dcc:	18800015 	stw	r2,0(r3)
          return -1;
   24dd0:	00bfffc4 	movi	r2,-1
   24dd4:	00000c06 	br	24e08 <read+0xe8>
        }
        return rval;
   24dd8:	e0bffc17 	ldw	r2,-16(fp)
   24ddc:	00000a06 	br	24e08 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   24de0:	0024ce40 	call	24ce4 <alt_get_errno>
   24de4:	1007883a 	mov	r3,r2
   24de8:	00800344 	movi	r2,13
   24dec:	18800015 	stw	r2,0(r3)
   24df0:	00000406 	br	24e04 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   24df4:	0024ce40 	call	24ce4 <alt_get_errno>
   24df8:	1007883a 	mov	r3,r2
   24dfc:	00801444 	movi	r2,81
   24e00:	18800015 	stw	r2,0(r3)
  }
  return -1;
   24e04:	00bfffc4 	movi	r2,-1
}
   24e08:	e037883a 	mov	sp,fp
   24e0c:	dfc00117 	ldw	ra,4(sp)
   24e10:	df000017 	ldw	fp,0(sp)
   24e14:	dec00204 	addi	sp,sp,8
   24e18:	f800283a 	ret

00024e1c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   24e1c:	defff904 	addi	sp,sp,-28
   24e20:	df000615 	stw	fp,24(sp)
   24e24:	df000604 	addi	fp,sp,24
   24e28:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   24e2c:	0005303a 	rdctl	r2,status
   24e30:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   24e34:	e0fffe17 	ldw	r3,-8(fp)
   24e38:	00bfff84 	movi	r2,-2
   24e3c:	1884703a 	and	r2,r3,r2
   24e40:	1001703a 	wrctl	status,r2
  
  return context;
   24e44:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   24e48:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   24e4c:	d0a00d17 	ldw	r2,-32716(gp)
   24e50:	10c000c4 	addi	r3,r2,3
   24e54:	00bfff04 	movi	r2,-4
   24e58:	1884703a 	and	r2,r3,r2
   24e5c:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   24e60:	d0e00d17 	ldw	r3,-32716(gp)
   24e64:	e0bfff17 	ldw	r2,-4(fp)
   24e68:	1887883a 	add	r3,r3,r2
   24e6c:	00800134 	movhi	r2,4
   24e70:	10800004 	addi	r2,r2,0
   24e74:	10c0062e 	bgeu	r2,r3,24e90 <sbrk+0x74>
   24e78:	e0bffb17 	ldw	r2,-20(fp)
   24e7c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   24e80:	e0bffa17 	ldw	r2,-24(fp)
   24e84:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   24e88:	00bfffc4 	movi	r2,-1
   24e8c:	00000b06 	br	24ebc <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   24e90:	d0a00d17 	ldw	r2,-32716(gp)
   24e94:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   24e98:	d0e00d17 	ldw	r3,-32716(gp)
   24e9c:	e0bfff17 	ldw	r2,-4(fp)
   24ea0:	1885883a 	add	r2,r3,r2
   24ea4:	d0a00d15 	stw	r2,-32716(gp)
   24ea8:	e0bffb17 	ldw	r2,-20(fp)
   24eac:	e0bffc15 	stw	r2,-16(fp)
   24eb0:	e0bffc17 	ldw	r2,-16(fp)
   24eb4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   24eb8:	e0bffd17 	ldw	r2,-12(fp)
} 
   24ebc:	e037883a 	mov	sp,fp
   24ec0:	df000017 	ldw	fp,0(sp)
   24ec4:	dec00104 	addi	sp,sp,4
   24ec8:	f800283a 	ret

00024ecc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   24ecc:	defffe04 	addi	sp,sp,-8
   24ed0:	dfc00115 	stw	ra,4(sp)
   24ed4:	df000015 	stw	fp,0(sp)
   24ed8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   24edc:	d0a00517 	ldw	r2,-32748(gp)
   24ee0:	10000326 	beq	r2,zero,24ef0 <alt_get_errno+0x24>
   24ee4:	d0a00517 	ldw	r2,-32748(gp)
   24ee8:	103ee83a 	callr	r2
   24eec:	00000106 	br	24ef4 <alt_get_errno+0x28>
   24ef0:	d0a6b004 	addi	r2,gp,-25920
}
   24ef4:	e037883a 	mov	sp,fp
   24ef8:	dfc00117 	ldw	ra,4(sp)
   24efc:	df000017 	ldw	fp,0(sp)
   24f00:	dec00204 	addi	sp,sp,8
   24f04:	f800283a 	ret

00024f08 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   24f08:	defff904 	addi	sp,sp,-28
   24f0c:	dfc00615 	stw	ra,24(sp)
   24f10:	df000515 	stw	fp,20(sp)
   24f14:	df000504 	addi	fp,sp,20
   24f18:	e13ffd15 	stw	r4,-12(fp)
   24f1c:	e17ffe15 	stw	r5,-8(fp)
   24f20:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   24f24:	e0bffd17 	ldw	r2,-12(fp)
   24f28:	10000616 	blt	r2,zero,24f44 <write+0x3c>
   24f2c:	e0bffd17 	ldw	r2,-12(fp)
   24f30:	10c00324 	muli	r3,r2,12
   24f34:	008000b4 	movhi	r2,2
   24f38:	10986c04 	addi	r2,r2,25008
   24f3c:	1885883a 	add	r2,r3,r2
   24f40:	00000106 	br	24f48 <write+0x40>
   24f44:	0005883a 	mov	r2,zero
   24f48:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   24f4c:	e0bffb17 	ldw	r2,-20(fp)
   24f50:	10002126 	beq	r2,zero,24fd8 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   24f54:	e0bffb17 	ldw	r2,-20(fp)
   24f58:	10800217 	ldw	r2,8(r2)
   24f5c:	108000cc 	andi	r2,r2,3
   24f60:	10001826 	beq	r2,zero,24fc4 <write+0xbc>
   24f64:	e0bffb17 	ldw	r2,-20(fp)
   24f68:	10800017 	ldw	r2,0(r2)
   24f6c:	10800617 	ldw	r2,24(r2)
   24f70:	10001426 	beq	r2,zero,24fc4 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   24f74:	e0bffb17 	ldw	r2,-20(fp)
   24f78:	10800017 	ldw	r2,0(r2)
   24f7c:	10800617 	ldw	r2,24(r2)
   24f80:	e0ffff17 	ldw	r3,-4(fp)
   24f84:	180d883a 	mov	r6,r3
   24f88:	e17ffe17 	ldw	r5,-8(fp)
   24f8c:	e13ffb17 	ldw	r4,-20(fp)
   24f90:	103ee83a 	callr	r2
   24f94:	e0bffc15 	stw	r2,-16(fp)
   24f98:	e0bffc17 	ldw	r2,-16(fp)
   24f9c:	1000070e 	bge	r2,zero,24fbc <write+0xb4>
      {
        ALT_ERRNO = -rval;
   24fa0:	0024ecc0 	call	24ecc <alt_get_errno>
   24fa4:	1007883a 	mov	r3,r2
   24fa8:	e0bffc17 	ldw	r2,-16(fp)
   24fac:	0085c83a 	sub	r2,zero,r2
   24fb0:	18800015 	stw	r2,0(r3)
        return -1;
   24fb4:	00bfffc4 	movi	r2,-1
   24fb8:	00000c06 	br	24fec <write+0xe4>
      }
      return rval;
   24fbc:	e0bffc17 	ldw	r2,-16(fp)
   24fc0:	00000a06 	br	24fec <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   24fc4:	0024ecc0 	call	24ecc <alt_get_errno>
   24fc8:	1007883a 	mov	r3,r2
   24fcc:	00800344 	movi	r2,13
   24fd0:	18800015 	stw	r2,0(r3)
   24fd4:	00000406 	br	24fe8 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   24fd8:	0024ecc0 	call	24ecc <alt_get_errno>
   24fdc:	1007883a 	mov	r3,r2
   24fe0:	00801444 	movi	r2,81
   24fe4:	18800015 	stw	r2,0(r3)
  }
  return -1;
   24fe8:	00bfffc4 	movi	r2,-1
}
   24fec:	e037883a 	mov	sp,fp
   24ff0:	dfc00117 	ldw	ra,4(sp)
   24ff4:	df000017 	ldw	fp,0(sp)
   24ff8:	dec00204 	addi	sp,sp,8
   24ffc:	f800283a 	ret

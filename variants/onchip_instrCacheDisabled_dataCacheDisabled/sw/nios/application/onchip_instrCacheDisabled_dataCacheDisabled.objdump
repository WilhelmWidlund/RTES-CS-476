
onchip_instrCacheDisabled_dataCacheDisabled.elf:     file format elf32-littlenios2
onchip_instrCacheDisabled_dataCacheDisabled.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020244

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00010198 memsz 0x00010198 flags r-x
    LOAD off    0x000111b8 vaddr 0x000301b8 paddr 0x00031ca4 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x00013790 vaddr 0x00033790 paddr 0x00033790 align 2**12
         filesz 0x00000000 memsz 0x0000016c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000fa48  00020244  00020244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000052c  0002fc8c  0002fc8c  00010c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  000301b8  00031ca4  000111b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000016c  00033790  00033790  00013790  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  000338fc  000338fc  00012ca4  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00012ca4  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000ed8  00000000  00000000  00012cc8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00023f7d  00000000  00000000  00013ba0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000920c  00000000  00000000  00037b1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000b627  00000000  00000000  00040d29  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002250  00000000  00000000  0004c350  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003902  00000000  00000000  0004e5a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00017975  00000000  00000000  00051ea2  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00069818  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000018d8  00000000  00000000  00069828  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006e372  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0006e375  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0006e381  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006e382  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0006e383  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0006e38e  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0006e399  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000a  00000000  00000000  0006e3a4  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000047  00000000  00000000  0006e3ae  2**0
                  CONTENTS, READONLY
 26 .jdi          0000597d  00000000  00000000  0006e3f5  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00043bd4  00000000  00000000  00073d72  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020244 l    d  .text	00000000 .text
0002fc8c l    d  .rodata	00000000 .rodata
000301b8 l    d  .rwdata	00000000 .rwdata
00033790 l    d  .bss	00000000 .bss
000338fc l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/RTES/variants/onchip_instrCacheDisabled_dataCacheDisabled/sw/nios/onchip_instrCacheDisabled_dataCacheDisabled_bsp//obj/HAL/src/crt0.o
0002027c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
0002fefe l     O .rodata	00000010 zeroes.4404
00022dc4 l     F .text	000000bc __sbprintf
0002ff0e l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00022fd4 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00024b04 l     F .text	00000008 __fp_unlock
00024b18 l     F .text	0000019c __sinit.part.1
00024cb4 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
000301b8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
000305fc l     O .rwdata	00000020 lc_ctype_charset
000305dc l     O .rwdata	00000020 lc_message_charset
0003061c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0002ff40 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000275cc l     F .text	000000fc __sprint_r.part.0
00030074 l     O .rodata	00000010 blanks.4348
00030064 l     O .rodata	00000010 zeroes.4349
00028b58 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0002d1dc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0002d2e8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0002d314 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0002d6a0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0002d780 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0002d86c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
0002dca8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00031c98 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0002def4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0002e028 l     F .text	00000034 alt_dev_reg
00030c04 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0002e318 l     F .text	0000020c altera_avalon_jtag_uart_irq
0002e524 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0002eb5c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0002ed9c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0002eff8 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0002f138 l     F .text	0000003c alt_get_errno
0002f174 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
000337c8 g     O .bss	00000004 alt_instruction_exception_handler
000270dc g     F .text	00000074 _mprec_log10
000271c8 g     F .text	0000008c __any_on
000295b0 g     F .text	00000054 _isatty_r
0002ff4c g     O .rodata	00000028 __mprec_tinytens
0002d97c g     F .text	0000007c alt_main
000337fc g     O .bss	00000100 alt_irq
00029604 g     F .text	00000060 _lseek_r
00031ca4 g       *ABS*	00000000 __flash_rwdata_start
0002bd08 g     F .text	00000088 .hidden __eqdf2
000338fc g       *ABS*	00000000 __alt_heap_start
00020b74 g     F .text	0000003c printf
00029edc g     F .text	0000009c _wcrtomb_r
000273f4 g     F .text	0000005c __sseek
00024e54 g     F .text	00000010 __sinit
00029d84 g     F .text	00000140 __swbuf_r
00025460 g     F .text	0000007c _setlocale_r
00024cbc g     F .text	00000068 __sfmoreglue
0002da1c g     F .text	00000024 __malloc_unlock
00029664 g     F .text	0000015c memmove
00020280 g     F .text	00000058 test_parallel_port
00024e3c g     F .text	00000018 _cleanup
00026258 g     F .text	000000a8 _Balloc
00033790 g     O .bss	00000004 snaph
0002bd90 g     F .text	000000dc .hidden __gtdf2
0002f530 g     F .text	00000024 altera_nios2_gen2_irq_init
00020000 g     F .entry	0000000c __reset
00020020 g       *ABS*	00000000 __flash_exceptions_start
00029098 g     F .text	0000005c _fstat_r
000337b4 g     O .bss	00000004 errno
00027370 g     F .text	00000008 __seofread
000337c0 g     O .bss	00000004 alt_argv
00039c64 g       *ABS*	00000000 _gp
00030a84 g     O .rwdata	00000180 alt_fd_list
0002f554 g     F .text	00000090 alt_find_dev
00025fe8 g     F .text	00000148 memcpy
00024b0c g     F .text	0000000c _cleanup_r
0002cff4 g     F .text	000000dc .hidden __floatsidf
0002f0bc g     F .text	0000007c alt_io_redirect
0002be6c g     F .text	000000f4 .hidden __ltdf2
0002fc8c g       *ABS*	00000000 __DTOR_END__
0002ef5c g     F .text	0000009c alt_exception_cause_generated_bad_addr
00027254 g     F .text	00000074 __fpclassifyd
00027038 g     F .text	000000a4 __ratio
00028b3c g     F .text	0000001c __vfiprintf_internal
0002e71c g     F .text	0000021c altera_avalon_jtag_uart_read
00020b44 g     F .text	00000030 _printf_r
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00020a88 g     F .text	00000064 .hidden __udivsi3
0002d6dc g     F .text	000000a4 isatty
0002ff9c g     O .rodata	000000c8 __mprec_tens
000254dc g     F .text	0000000c __locale_charset
000337b0 g     O .bss	00000004 __malloc_top_pad
00033794 g     O .bss	00000004 flag
00031c6c g     O .rwdata	00000004 __mb_cur_max
0002550c g     F .text	0000000c _localeconv_r
000290f4 g     F .text	000004bc __sfvwrite_r
00026664 g     F .text	0000003c __i2b
000272c8 g     F .text	00000054 _sbrk_r
000297c0 g     F .text	00000060 _read_r
00031c8c g     O .rwdata	00000004 alt_max_fd
00028d8c g     F .text	000000f0 _fclose_r
00024ad4 g     F .text	00000030 fflush
000337ac g     O .bss	00000004 __malloc_max_sbrked_mem
0002ab74 g     F .text	000008ac .hidden __adddf3
00026de0 g     F .text	0000010c __b2d
0002a63c g     F .text	00000538 .hidden __umoddi3
0002d8a8 g     F .text	000000d4 lseek
00031c64 g     O .rwdata	00000004 _global_impure_ptr
00029820 g     F .text	00000564 _realloc_r
000338fc g       *ABS*	00000000 __bss_end
0002d5b0 g     F .text	000000f0 alt_iic_isr_register
0002f428 g     F .text	00000108 alt_tick
0002a0c4 g     F .text	00000578 .hidden __udivdi3
00028ff4 g     F .text	00000024 _fputwc_r
0002ff74 g     O .rodata	00000028 __mprec_bigtens
00026448 g     F .text	00000104 __s2b
0002d0d0 g     F .text	000000a8 .hidden __floatunsidf
00026b20 g     F .text	00000060 __mcmp
00024e74 g     F .text	00000018 __fp_lock_all
0002d564 g     F .text	0000004c alt_ic_irq_enabled
0002f38c g     F .text	0000009c alt_alarm_stop
00020944 g     F .text	00000020 test_recovtime_parport
000337b8 g     O .bss	00000004 alt_irq_active
000200fc g     F .exceptions	000000d4 alt_irq_handler
00030a5c g     O .rwdata	00000028 alt_dev_null
0002ed7c g     F .text	00000020 alt_dcache_flush_all
0002654c g     F .text	00000068 __hi0bits
0002cf74 g     F .text	00000080 .hidden __fixdfsi
00031ca4 g       *ABS*	00000000 __ram_rwdata_end
00031c84 g     O .rwdata	00000008 alt_dev_list
0002df30 g     F .text	000000f8 write
0002f858 g     F .text	000000a0 _putc_r
000301b8 g       *ABS*	00000000 __ram_rodata_end
0002d350 g     F .text	000000b0 fstat
0002be6c g     F .text	000000f4 .hidden __ledf2
00026898 g     F .text	00000140 __pow5mult
000276e0 g     F .text	0000145c ___vfiprintf_internal_r
000337a4 g     O .bss	00000004 __nlocale_changed
00020aec g     F .text	00000058 .hidden __umodsi3
000338fc g       *ABS*	00000000 end
0002e258 g     F .text	000000c0 altera_avalon_jtag_uart_init
000201d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0002fc8c g       *ABS*	00000000 __CTOR_LIST__
00040000 g       *ABS*	00000000 __alt_stack_pointer
0002ebd4 g     F .text	0000007c alt_avalon_timer_sc_init
0002d178 g     F .text	00000064 .hidden __clzsi2
0002e938 g     F .text	00000224 altera_avalon_jtag_uart_write
000207b8 g     F .text	0000018c test_recovtime_print
00024e64 g     F .text	00000004 __sfp_lock_acquire
00025f04 g     F .text	000000e4 memchr
00020bb0 g     F .text	000021f8 ___vfprintf_internal_r
00024fc8 g     F .text	00000310 _free_r
0002da40 g     F .text	0000022c alt_printf
000254e8 g     F .text	00000010 __locale_mb_cur_max
0002fad8 g     F .text	00000180 __call_exitprocs
000337a0 g     O .bss	00000004 __mlocale_changed
00031c70 g     O .rwdata	00000004 __malloc_sbrk_base
00020244 g     F .text	0000003c _start
000337cc g     O .bss	00000004 _alt_tick_rate
00020508 g     F .text	00000044 resp_isr_parport
000269d8 g     F .text	00000148 __lshift
000337d0 g     O .bss	00000004 _alt_nticks
0002dce4 g     F .text	000000fc read
0002e094 g     F .text	00000060 alt_sys_init
0002f9c0 g     F .text	00000118 __register_exitproc
000266a0 g     F .text	000001f8 __multiply
0002e5c4 g     F .text	00000068 altera_avalon_jtag_uart_close
000301b8 g       *ABS*	00000000 __ram_rwdata_start
0002fc8c g       *ABS*	00000000 __ram_rodata_start
000337d4 g     O .bss	00000028 __malloc_current_mallinfo
00026eec g     F .text	0000014c __d2b
0002e0f4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0002f6ec g     F .text	000000a4 alt_get_fd
00028c74 g     F .text	00000054 _close_r
0002f7dc g     F .text	0000007c memcmp
0002e1b4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000338fc g       *ABS*	00000000 __alt_stack_base
0002e204 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00022e80 g     F .text	00000154 __swsetup_r
0002b420 g     F .text	000008e8 .hidden __divdf3
00024d24 g     F .text	00000118 __sfp
00027150 g     F .text	00000078 __copybits
00030654 g     O .rwdata	00000408 __malloc_av_
00024e70 g     F .text	00000004 __sinit_lock_release
0002bf60 g     F .text	00000718 .hidden __muldf3
0002731c g     F .text	00000054 __sread
0002f5e4 g     F .text	00000108 alt_find_file
0002edd8 g     F .text	000000a4 alt_dev_llist_insert
0002d9f8 g     F .text	00000024 __malloc_lock
0002de44 g     F .text	000000b0 sbrk
00024a78 g     F .text	0000005c _fflush_r
00028cc8 g     F .text	000000c4 _calloc_r
00033790 g       *ABS*	00000000 __bss_start
00026130 g     F .text	00000128 memset
00020964 g     F .text	0000002c main
000337c4 g     O .bss	00000004 alt_envp
000202d8 g     F .text	000001a4 test_counter
000337a8 g     O .bss	00000004 __malloc_max_total_mem
0002e154 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00029ec4 g     F .text	00000018 __swbuf
00033798 g     O .bss	00000004 snapl
00027450 g     F .text	00000008 __sclose
00040000 g       *ABS*	00000000 __alt_heap_limit
00028e7c g     F .text	00000014 fclose
000231d4 g     F .text	00001688 _dtoa_r
000256f8 g     F .text	0000080c _malloc_r
0002a038 g     F .text	00000030 __ascii_wctomb
00031c90 g     O .rwdata	00000004 alt_errno
000252d8 g     F .text	000000c4 _fwalk
0002f8f8 g     F .text	000000c8 putc
00020990 g     F .text	00000084 .hidden __divsi3
00024ea4 g     F .text	00000124 _malloc_trim_r
0002fc8c g       *ABS*	00000000 __CTOR_END__
00027458 g     F .text	000000dc strcmp
0002fc8c g       *ABS*	00000000 __flash_rodata_start
0002fc8c g       *ABS*	00000000 __DTOR_LIST__
0002bd08 g     F .text	00000088 .hidden __nedf2
0002e05c g     F .text	00000038 alt_irq_init
0002dde0 g     F .text	00000064 alt_release_fd
00030084 g     O .rodata	00000100 .hidden __clz_tab
0003379c g     O .bss	00000004 _PathLocale
0002f790 g     F .text	00000014 atexit
00028c14 g     F .text	00000060 _write_r
00025518 g     F .text	00000018 setlocale
00031c68 g     O .rwdata	00000004 _impure_ptr
000337bc g     O .bss	00000004 alt_argc
0002485c g     F .text	0000021c __sflush_r
0002eedc g     F .text	00000060 _do_dtors
00025504 g     F .text	00000008 __locale_cjk_lang
0002054c g     F .text	00000158 test_resptime_print
00020020 g       .exceptions	00000000 alt_irq_entry
00026d7c g     F .text	00000064 __ulp
00024e8c g     F .text	00000018 __fp_unlock_all
000206a4 g     F .text	0000009c test_resptime_parport
00031c7c g     O .rwdata	00000008 alt_fs_list
00020020 g       *ABS*	00000000 __ram_exceptions_start
00025530 g     F .text	0000000c localeconv
0002d400 g     F .text	00000050 alt_ic_isr_register
00031ca4 g       *ABS*	00000000 _edata
000338fc g       *ABS*	00000000 _end
00028e90 g     F .text	00000164 __fputwc
00020244 g       *ABS*	00000000 __ram_exceptions_end
0002e62c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0002d4d8 g     F .text	0000008c alt_ic_irq_disable
00027378 g     F .text	0000007c __swrite
00031c74 g     O .rwdata	00000004 __malloc_trim_threshold
000254f8 g     F .text	0000000c __locale_msgcharset
00020794 g     F .text	00000024 recov_isr_parport
0002f7a4 g     F .text	00000038 exit
0002539c g     F .text	000000c4 _fwalk_reent
00026b80 g     F .text	000001fc __mdiff
00020a14 g     F .text	00000074 .hidden __modsi3
00040000 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
00024e68 g     F .text	00000004 __sfp_lock_release
0002fc58 g     F .text	00000034 _exit
0002ec50 g     F .text	0000012c alt_alarm_start
0002553c g     F .text	000001bc __smakebuf_r
00027534 g     F .text	00000098 strlen
0002047c g     F .text	0000008c resp_isr_print
0002f238 g     F .text	00000154 open
00020740 g     F .text	00000054 recov_isr_print
0002bd90 g     F .text	000000dc .hidden __gedf2
0002dc6c g     F .text	0000003c alt_putchar
00031c78 g     O .rwdata	00000004 __wctomb
000276c8 g     F .text	00000018 __sprint_r
0002ef3c g     F .text	00000020 alt_icache_flush_all
00031c94 g     O .rwdata	00000004 alt_priority_mask
0002d450 g     F .text	00000088 alt_ic_irq_enable
00022da8 g     F .text	0000001c __vfprintf_internal
0002a068 g     F .text	0000005c _wctomb_r
0002c678 g     F .text	000008fc .hidden __subdf3
000265b4 g     F .text	000000b0 __lo0bits
00031c9c g     O .rwdata	00000008 alt_alarm_list
0002ee7c g     F .text	00000060 _do_ctors
00029f78 g     F .text	000000c0 wcrtomb
0002d218 g     F .text	000000d0 close
0002d7e8 g     F .text	00000084 alt_load
00029018 g     F .text	00000080 fputwc
00024e6c g     F .text	00000004 __sinit_lock_acquire
00026328 g     F .text	00000120 __multadd
00026300 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08409114 	ori	at,at,580
    jmp r1
   20008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201d00 	call	201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0fffb17 	ldw	r3,-20(fp)
   20130:	e0bffc17 	ldw	r2,-16(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001426 	beq	r2,zero,2018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2013c:	008000f4 	movhi	r2,3
   20140:	108dff04 	addi	r2,r2,14332
   20144:	e0fffd17 	ldw	r3,-12(fp)
   20148:	180690fa 	slli	r3,r3,3
   2014c:	10c5883a 	add	r2,r2,r3
   20150:	10c00017 	ldw	r3,0(r2)
   20154:	008000f4 	movhi	r2,3
   20158:	108dff04 	addi	r2,r2,14332
   2015c:	e13ffd17 	ldw	r4,-12(fp)
   20160:	200890fa 	slli	r4,r4,3
   20164:	1105883a 	add	r2,r2,r4
   20168:	10800104 	addi	r2,r2,4
   2016c:	10800017 	ldw	r2,0(r2)
   20170:	1009883a 	mov	r4,r2
   20174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   20178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   2017c:	0005313a 	rdctl	r2,ipending
   20180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20184:	e0bfff17 	ldw	r2,-4(fp)
   20188:	00000706 	br	201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   2018c:	e0bffc17 	ldw	r2,-16(fp)
   20190:	1085883a 	add	r2,r2,r2
   20194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   20198:	e0bffd17 	ldw	r2,-12(fp)
   2019c:	10800044 	addi	r2,r2,1
   201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a4:	003fe106 	br	2012c <__alt_data_end+0xfffe012c>

    active = alt_irq_pending ();
   201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   201ac:	e0bffb17 	ldw	r2,-20(fp)
   201b0:	103fdb1e 	bne	r2,zero,20120 <__alt_data_end+0xfffe0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201b4:	0001883a 	nop
}
   201b8:	0001883a 	nop
   201bc:	e037883a 	mov	sp,fp
   201c0:	dfc00117 	ldw	ra,4(sp)
   201c4:	df000017 	ldw	fp,0(sp)
   201c8:	dec00204 	addi	sp,sp,8
   201cc:	f800283a 	ret

000201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201d0:	defffb04 	addi	sp,sp,-20
   201d4:	dfc00415 	stw	ra,16(sp)
   201d8:	df000315 	stw	fp,12(sp)
   201dc:	df000304 	addi	fp,sp,12
   201e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   201e4:	000531fa 	rdctl	r2,exception
   201e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   201ec:	e0bffd17 	ldw	r2,-12(fp)
   201f0:	10801f0c 	andi	r2,r2,124
   201f4:	1004d0ba 	srli	r2,r2,2
   201f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   201fc:	0005333a 	rdctl	r2,badaddr
   20200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   20204:	d0a6d917 	ldw	r2,-25756(gp)
   20208:	10000726 	beq	r2,zero,20228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   2020c:	d0a6d917 	ldw	r2,-25756(gp)
   20210:	e0fffd17 	ldw	r3,-12(fp)
   20214:	e1bffe17 	ldw	r6,-8(fp)
   20218:	e17fff17 	ldw	r5,-4(fp)
   2021c:	1809883a 	mov	r4,r3
   20220:	103ee83a 	callr	r2
   20224:	00000206 	br	20230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   2022c:	0005883a 	mov	r2,zero
}
   20230:	e037883a 	mov	sp,fp
   20234:	dfc00117 	ldw	ra,4(sp)
   20238:	df000017 	ldw	fp,0(sp)
   2023c:	dec00204 	addi	sp,sp,8
   20240:	f800283a 	ret

Disassembly of section .text:

00020244 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20244:	06c00134 	movhi	sp,4
    ori sp, sp, %lo(__alt_stack_pointer)
   20248:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   2024c:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
   20250:	d6a71914 	ori	gp,gp,40036
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20254:	008000f4 	movhi	r2,3
    ori r2, r2, %lo(__bss_start)
   20258:	108de414 	ori	r2,r2,14224

    movhi r3, %hi(__bss_end)
   2025c:	00c000f4 	movhi	r3,3
    ori r3, r3, %lo(__bss_end)
   20260:	18ce3f14 	ori	r3,r3,14588

    beq r2, r3, 1f
   20264:	10c00326 	beq	r2,r3,20274 <_start+0x30>

0:
    stw zero, (r2)
   20268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   2026c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   20270:	10fffd36 	bltu	r2,r3,20268 <__alt_data_end+0xfffe0268>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20274:	002d7e80 	call	2d7e8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20278:	002d97c0 	call	2d97c <alt_main>

0002027c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   2027c:	003fff06 	br	2027c <__alt_data_end+0xfffe027c>

00020280 <test_parallel_port>:




void test_parallel_port()
{
   20280:	defffe04 	addi	sp,sp,-8
   20284:	dfc00115 	stw	ra,4(sp)
   20288:	df000015 	stw	fp,0(sp)
   2028c:	d839883a 	mov	fp,sp
	IOWR_32DIRECT(PARALLELPORT_0_BASE, 0, 0x1234abcd);
   20290:	00c48d74 	movhi	r3,4661
   20294:	18eaf344 	addi	r3,r3,-21555
   20298:	00800134 	movhi	r2,4
   2029c:	10841004 	addi	r2,r2,4160
   202a0:	10c00035 	stwio	r3,0(r2)
	alt_printf("ParallelPort0=%x\n", IORD_32DIRECT(PARALLELPORT_0_BASE, 0));
   202a4:	00800134 	movhi	r2,4
   202a8:	10841004 	addi	r2,r2,4160
   202ac:	10800037 	ldwio	r2,0(r2)
   202b0:	100b883a 	mov	r5,r2
   202b4:	010000f4 	movhi	r4,3
   202b8:	213f2304 	addi	r4,r4,-884
   202bc:	002da400 	call	2da40 <alt_printf>
}
   202c0:	0001883a 	nop
   202c4:	e037883a 	mov	sp,fp
   202c8:	dfc00117 	ldw	ra,4(sp)
   202cc:	df000017 	ldw	fp,0(sp)
   202d0:	dec00204 	addi	sp,sp,8
   202d4:	f800283a 	ret

000202d8 <test_counter>:

void test_counter()
{
   202d8:	defffe04 	addi	sp,sp,-8
   202dc:	dfc00115 	stw	ra,4(sp)
   202e0:	df000015 	stw	fp,0(sp)
   202e4:	d839883a 	mov	fp,sp
	IOWR_32DIRECT(COUNTER_0_BASE, COUNT_Target, Count_1sec);
   202e8:	00c0bef4 	movhi	r3,763
   202ec:	18fc2004 	addi	r3,r3,-3968
   202f0:	00800134 	movhi	r2,4
   202f4:	10840e04 	addi	r2,r2,4152
   202f8:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(COUNTER_0_BASE, COUNT_RZ, arbval);
   202fc:	00ffffd4 	movui	r3,65535
   20300:	00800134 	movhi	r2,4
   20304:	10840904 	addi	r2,r2,4132
   20308:	10c00035 	stwio	r3,0(r2)
	alt_printf("iCounter after reset=%x\n", IORD_32DIRECT(COUNTER_0_BASE,0));
   2030c:	00800134 	movhi	r2,4
   20310:	10840804 	addi	r2,r2,4128
   20314:	10800037 	ldwio	r2,0(r2)
   20318:	100b883a 	mov	r5,r2
   2031c:	010000f4 	movhi	r4,3
   20320:	213f2804 	addi	r4,r4,-864
   20324:	002da400 	call	2da40 <alt_printf>
	alt_printf("iEn and iEOT=%x\n", IORD_32DIRECT(COUNTER_0_BASE, 20));
   20328:	00800134 	movhi	r2,4
   2032c:	10840d04 	addi	r2,r2,4148
   20330:	10800037 	ldwio	r2,0(r2)
   20334:	100b883a 	mov	r5,r2
   20338:	010000f4 	movhi	r4,3
   2033c:	213f2f04 	addi	r4,r4,-836
   20340:	002da400 	call	2da40 <alt_printf>
	IOWR_32DIRECT(COUNTER_0_BASE, COUNT_Start, arbval);
   20344:	00ffffd4 	movui	r3,65535
   20348:	00800134 	movhi	r2,4
   2034c:	10840a04 	addi	r2,r2,4136
   20350:	10c00035 	stwio	r3,0(r2)
	alt_printf("iCounter while running=%x\n", IORD_32DIRECT(COUNTER_0_BASE,0));
   20354:	00800134 	movhi	r2,4
   20358:	10840804 	addi	r2,r2,4128
   2035c:	10800037 	ldwio	r2,0(r2)
   20360:	100b883a 	mov	r5,r2
   20364:	010000f4 	movhi	r4,3
   20368:	213f3404 	addi	r4,r4,-816
   2036c:	002da400 	call	2da40 <alt_printf>
	alt_printf("iEn and iEOT=%x\n", IORD_32DIRECT(COUNTER_0_BASE, 20));
   20370:	00800134 	movhi	r2,4
   20374:	10840d04 	addi	r2,r2,4148
   20378:	10800037 	ldwio	r2,0(r2)
   2037c:	100b883a 	mov	r5,r2
   20380:	010000f4 	movhi	r4,3
   20384:	213f2f04 	addi	r4,r4,-836
   20388:	002da400 	call	2da40 <alt_printf>
	IOWR_32DIRECT(COUNTER_0_BASE, COUNT_Stop, arbval);
   2038c:	00ffffd4 	movui	r3,65535
   20390:	00800134 	movhi	r2,4
   20394:	10840b04 	addi	r2,r2,4140
   20398:	10c00035 	stwio	r3,0(r2)
	alt_printf("iCounter, first read after stop=%x\n", IORD_32DIRECT(COUNTER_0_BASE,0));
   2039c:	00800134 	movhi	r2,4
   203a0:	10840804 	addi	r2,r2,4128
   203a4:	10800037 	ldwio	r2,0(r2)
   203a8:	100b883a 	mov	r5,r2
   203ac:	010000f4 	movhi	r4,3
   203b0:	213f3b04 	addi	r4,r4,-788
   203b4:	002da400 	call	2da40 <alt_printf>
	alt_printf("iCounter, second read after stop=%x\n", IORD_32DIRECT(COUNTER_0_BASE,0));
   203b8:	00800134 	movhi	r2,4
   203bc:	10840804 	addi	r2,r2,4128
   203c0:	10800037 	ldwio	r2,0(r2)
   203c4:	100b883a 	mov	r5,r2
   203c8:	010000f4 	movhi	r4,3
   203cc:	213f4404 	addi	r4,r4,-752
   203d0:	002da400 	call	2da40 <alt_printf>
	alt_printf("iEn and iEOT=%x\n", IORD_32DIRECT(COUNTER_0_BASE, 20));
   203d4:	00800134 	movhi	r2,4
   203d8:	10840d04 	addi	r2,r2,4148
   203dc:	10800037 	ldwio	r2,0(r2)
   203e0:	100b883a 	mov	r5,r2
   203e4:	010000f4 	movhi	r4,3
   203e8:	213f2f04 	addi	r4,r4,-836
   203ec:	002da400 	call	2da40 <alt_printf>
	IOWR_32DIRECT(COUNTER_0_BASE, COUNT_Start, arbval);
   203f0:	00ffffd4 	movui	r3,65535
   203f4:	00800134 	movhi	r2,4
   203f8:	10840a04 	addi	r2,r2,4136
   203fc:	10c00035 	stwio	r3,0(r2)
	alt_printf("iCounter, first read after restarting=%x\n", IORD_32DIRECT(COUNTER_0_BASE,0));
   20400:	00800134 	movhi	r2,4
   20404:	10840804 	addi	r2,r2,4128
   20408:	10800037 	ldwio	r2,0(r2)
   2040c:	100b883a 	mov	r5,r2
   20410:	010000f4 	movhi	r4,3
   20414:	213f4e04 	addi	r4,r4,-712
   20418:	002da400 	call	2da40 <alt_printf>
	alt_printf("iCounter, second read after restarting=%x\n", IORD_32DIRECT(COUNTER_0_BASE,0));
   2041c:	00800134 	movhi	r2,4
   20420:	10840804 	addi	r2,r2,4128
   20424:	10800037 	ldwio	r2,0(r2)
   20428:	100b883a 	mov	r5,r2
   2042c:	010000f4 	movhi	r4,3
   20430:	213f5904 	addi	r4,r4,-668
   20434:	002da400 	call	2da40 <alt_printf>
	alt_printf("iEn and iEOT=%x\n", IORD_32DIRECT(COUNTER_0_BASE, 20));
   20438:	00800134 	movhi	r2,4
   2043c:	10840d04 	addi	r2,r2,4148
   20440:	10800037 	ldwio	r2,0(r2)
   20444:	100b883a 	mov	r5,r2
   20448:	010000f4 	movhi	r4,3
   2044c:	213f2f04 	addi	r4,r4,-836
   20450:	002da400 	call	2da40 <alt_printf>
	IOWR_32DIRECT(COUNTER_0_BASE, COUNT_Stop, arbval);
   20454:	00ffffd4 	movui	r3,65535
   20458:	00800134 	movhi	r2,4
   2045c:	10840b04 	addi	r2,r2,4140
   20460:	10c00035 	stwio	r3,0(r2)
}
   20464:	0001883a 	nop
   20468:	e037883a 	mov	sp,fp
   2046c:	dfc00117 	ldw	ra,4(sp)
   20470:	df000017 	ldw	fp,0(sp)
   20474:	dec00204 	addi	sp,sp,8
   20478:	f800283a 	ret

0002047c <resp_isr_print>:

void resp_isr_print(void* context)
{
   2047c:	defffe04 	addi	sp,sp,-8
   20480:	df000115 	stw	fp,4(sp)
   20484:	df000104 	addi	fp,sp,4
   20488:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_TIMER_SNAPL(TIMER_0_BASE, arbval);
   2048c:	00ffffd4 	movui	r3,65535
   20490:	00800134 	movhi	r2,4
   20494:	10840404 	addi	r2,r2,4112
   20498:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_SNAPH(TIMER_0_BASE, arbval);
   2049c:	00ffffd4 	movui	r3,65535
   204a0:	00800134 	movhi	r2,4
   204a4:	10840504 	addi	r2,r2,4116
   204a8:	10c00035 	stwio	r3,0(r2)
	snapl = IORD_ALTERA_AVALON_TIMER_SNAPL(TIMER_0_BASE);
   204ac:	00800134 	movhi	r2,4
   204b0:	10840404 	addi	r2,r2,4112
   204b4:	10800037 	ldwio	r2,0(r2)
   204b8:	d0a6cd15 	stw	r2,-25804(gp)
	snaph = IORD_ALTERA_AVALON_TIMER_SNAPH(TIMER_0_BASE);
   204bc:	00800134 	movhi	r2,4
   204c0:	10840504 	addi	r2,r2,4116
   204c4:	10800037 	ldwio	r2,0(r2)
   204c8:	d0a6cb15 	stw	r2,-25812(gp)
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, 0);
   204cc:	0007883a 	mov	r3,zero
   204d0:	00800134 	movhi	r2,4
   204d4:	10840104 	addi	r2,r2,4100
   204d8:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, 0);
   204dc:	0007883a 	mov	r3,zero
   204e0:	00800134 	movhi	r2,4
   204e4:	10840004 	addi	r2,r2,4096
   204e8:	10c00035 	stwio	r3,0(r2)
	flag = 1;
   204ec:	00800044 	movi	r2,1
   204f0:	d0a6cc15 	stw	r2,-25808(gp)
}
   204f4:	0001883a 	nop
   204f8:	e037883a 	mov	sp,fp
   204fc:	df000017 	ldw	fp,0(sp)
   20500:	dec00104 	addi	sp,sp,4
   20504:	f800283a 	ret

00020508 <resp_isr_parport>:

void resp_isr_parport(void* context)
{
   20508:	defffe04 	addi	sp,sp,-8
   2050c:	df000115 	stw	fp,4(sp)
   20510:	df000104 	addi	fp,sp,4
   20514:	e13fff15 	stw	r4,-4(fp)
	IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x0);
   20518:	0007883a 	mov	r3,zero
   2051c:	00800134 	movhi	r2,4
   20520:	10841004 	addi	r2,r2,4160
   20524:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_IRQCLR, arbval);
   20528:	00ffffd4 	movui	r3,65535
   2052c:	00800134 	movhi	r2,4
   20530:	10841404 	addi	r2,r2,4176
   20534:	10c00035 	stwio	r3,0(r2)
}
   20538:	0001883a 	nop
   2053c:	e037883a 	mov	sp,fp
   20540:	df000017 	ldw	fp,0(sp)
   20544:	dec00104 	addi	sp,sp,4
   20548:	f800283a 	ret

0002054c <test_resptime_print>:

void test_resptime_print()
{
   2054c:	defff804 	addi	sp,sp,-32
   20550:	dfc00715 	stw	ra,28(sp)
   20554:	df000615 	stw	fp,24(sp)
   20558:	df000604 	addi	fp,sp,24
	// Register isr
	alt_ic_isr_register(TIMER_0_IRQ_INTERRUPT_CONTROLLER_ID, TIMER_0_IRQ, resp_isr_print, 0, 0);
   2055c:	d8000015 	stw	zero,0(sp)
   20560:	000f883a 	mov	r7,zero
   20564:	018000b4 	movhi	r6,2
   20568:	31811f04 	addi	r6,r6,1148
   2056c:	014000c4 	movi	r5,3
   20570:	0009883a 	mov	r4,zero
   20574:	002d4000 	call	2d400 <alt_ic_isr_register>
	// Initialize flag value
	flag = 0;
   20578:	d026cc15 	stw	zero,-25808(gp)
	// Initialize timer
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, 0);
   2057c:	0007883a 	mov	r3,zero
   20580:	00800134 	movhi	r2,4
   20584:	10840104 	addi	r2,r2,4100
   20588:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_0_BASE, 0xF080);
   2058c:	00fc2014 	movui	r3,61568
   20590:	00800134 	movhi	r2,4
   20594:	10840204 	addi	r2,r2,4104
   20598:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_0_BASE, 0x02FA);
   2059c:	00c0be84 	movi	r3,762
   205a0:	00800134 	movhi	r2,4
   205a4:	10840304 	addi	r2,r2,4108
   205a8:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, TIMER_settings_start);
   205ac:	00c001c4 	movi	r3,7
   205b0:	00800134 	movhi	r2,4
   205b4:	10840104 	addi	r2,r2,4100
   205b8:	10c00035 	stwio	r3,0(r2)
	// Setup loop structure
	int counter = 0;
   205bc:	e03ffb15 	stw	zero,-20(fp)
	int max_iter = 10;
   205c0:	00800284 	movi	r2,10
   205c4:	e0bffd15 	stw	r2,-12(fp)
	int accum_val = 0;
   205c8:	e03ffc15 	stw	zero,-16(fp)
	int avg_val = 0;
   205cc:	e03ffe15 	stw	zero,-8(fp)
	int snapval = 0;
   205d0:	e03fff15 	stw	zero,-4(fp)
	printf("Testing response time using stock timer and\n"
   205d4:	e17ffd17 	ldw	r5,-12(fp)
   205d8:	010000f4 	movhi	r4,3
   205dc:	213f6404 	addi	r4,r4,-624
   205e0:	0020b740 	call	20b74 <printf>
			" counting the average over %d iterations...\n", max_iter);
	while(counter < max_iter)
   205e4:	00001e06 	br	20660 <test_resptime_print+0x114>
	{
		if(flag)
   205e8:	d0a6cc17 	ldw	r2,-25808(gp)
   205ec:	10001c26 	beq	r2,zero,20660 <test_resptime_print+0x114>
		{
			snapval = Count_1secH-snaph<<16|Count_1secL-snapl;
   205f0:	d0a6cb17 	ldw	r2,-25812(gp)
   205f4:	00c0be84 	movi	r3,762
   205f8:	1885c83a 	sub	r2,r3,r2
   205fc:	1006943a 	slli	r3,r2,16
   20600:	d0a6cd17 	ldw	r2,-25804(gp)
   20604:	013c2014 	movui	r4,61568
   20608:	2085c83a 	sub	r2,r4,r2
   2060c:	1884b03a 	or	r2,r3,r2
   20610:	e0bfff15 	stw	r2,-4(fp)
			alt_printf("Value at iteration %x is 0x%x\n", counter+1, snapval);
   20614:	e0bffb17 	ldw	r2,-20(fp)
   20618:	10800044 	addi	r2,r2,1
   2061c:	e1bfff17 	ldw	r6,-4(fp)
   20620:	100b883a 	mov	r5,r2
   20624:	010000f4 	movhi	r4,3
   20628:	213f7b04 	addi	r4,r4,-532
   2062c:	002da400 	call	2da40 <alt_printf>
			flag = 0;
   20630:	d026cc15 	stw	zero,-25808(gp)
			IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, TIMER_settings_start);
   20634:	00c001c4 	movi	r3,7
   20638:	00800134 	movhi	r2,4
   2063c:	10840104 	addi	r2,r2,4100
   20640:	10c00035 	stwio	r3,0(r2)
			accum_val += snapval;
   20644:	e0fffc17 	ldw	r3,-16(fp)
   20648:	e0bfff17 	ldw	r2,-4(fp)
   2064c:	1885883a 	add	r2,r3,r2
   20650:	e0bffc15 	stw	r2,-16(fp)
			counter += 1;
   20654:	e0bffb17 	ldw	r2,-20(fp)
   20658:	10800044 	addi	r2,r2,1
   2065c:	e0bffb15 	stw	r2,-20(fp)
	int accum_val = 0;
	int avg_val = 0;
	int snapval = 0;
	printf("Testing response time using stock timer and\n"
			" counting the average over %d iterations...\n", max_iter);
	while(counter < max_iter)
   20660:	e0fffb17 	ldw	r3,-20(fp)
   20664:	e0bffd17 	ldw	r2,-12(fp)
   20668:	18bfdf16 	blt	r3,r2,205e8 <__alt_data_end+0xfffe05e8>
			IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, TIMER_settings_start);
			accum_val += snapval;
			counter += 1;
		}
	}
	avg_val = accum_val/max_iter;
   2066c:	e17ffd17 	ldw	r5,-12(fp)
   20670:	e13ffc17 	ldw	r4,-16(fp)
   20674:	00209900 	call	20990 <__divsi3>
   20678:	e0bffe15 	stw	r2,-8(fp)
	printf("Average value for response time is %d", avg_val);
   2067c:	e17ffe17 	ldw	r5,-8(fp)
   20680:	010000f4 	movhi	r4,3
   20684:	213f8304 	addi	r4,r4,-500
   20688:	0020b740 	call	20b74 <printf>
}
   2068c:	0001883a 	nop
   20690:	e037883a 	mov	sp,fp
   20694:	dfc00117 	ldw	ra,4(sp)
   20698:	df000017 	ldw	fp,0(sp)
   2069c:	dec00204 	addi	sp,sp,8
   206a0:	f800283a 	ret

000206a4 <test_resptime_parport>:
void test_resptime_parport()
{
   206a4:	defffb04 	addi	sp,sp,-20
   206a8:	dfc00415 	stw	ra,16(sp)
   206ac:	df000315 	stw	fp,12(sp)
   206b0:	df000304 	addi	fp,sp,12
	// Register isr
	alt_ic_isr_register(TIMER_0_IRQ_INTERRUPT_CONTROLLER_ID, TIMER_0_IRQ, resp_isr_parport, 0, 0);
   206b4:	d8000015 	stw	zero,0(sp)
   206b8:	000f883a 	mov	r7,zero
   206bc:	018000b4 	movhi	r6,2
   206c0:	31814204 	addi	r6,r6,1288
   206c4:	014000c4 	movi	r5,3
   206c8:	0009883a 	mov	r4,zero
   206cc:	002d4000 	call	2d400 <alt_ic_isr_register>
	IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x0);
   206d0:	0007883a 	mov	r3,zero
   206d4:	00800134 	movhi	r2,4
   206d8:	10841004 	addi	r2,r2,4160
   206dc:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_IRQEN, 0x2);
   206e0:	00c00084 	movi	r3,2
   206e4:	00800134 	movhi	r2,4
   206e8:	10841304 	addi	r2,r2,4172
   206ec:	10c00035 	stwio	r3,0(r2)
	int iterations = 1e2;
   206f0:	00801904 	movi	r2,100
   206f4:	e0bfff15 	stw	r2,-4(fp)
	int counter = 0;
   206f8:	e03ffe15 	stw	zero,-8(fp)
	while(counter < iterations)
   206fc:	00000706 	br	2071c <test_resptime_parport+0x78>
	{
		IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x2);
   20700:	00c00084 	movi	r3,2
   20704:	00800134 	movhi	r2,4
   20708:	10841004 	addi	r2,r2,4160
   2070c:	10c00035 	stwio	r3,0(r2)
		counter += 1;
   20710:	e0bffe17 	ldw	r2,-8(fp)
   20714:	10800044 	addi	r2,r2,1
   20718:	e0bffe15 	stw	r2,-8(fp)
	alt_ic_isr_register(TIMER_0_IRQ_INTERRUPT_CONTROLLER_ID, TIMER_0_IRQ, resp_isr_parport, 0, 0);
	IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x0);
	IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_IRQEN, 0x2);
	int iterations = 1e2;
	int counter = 0;
	while(counter < iterations)
   2071c:	e0fffe17 	ldw	r3,-8(fp)
   20720:	e0bfff17 	ldw	r2,-4(fp)
   20724:	18bff616 	blt	r3,r2,20700 <__alt_data_end+0xfffe0700>
	{
		IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x2);
		counter += 1;
	}
}
   20728:	0001883a 	nop
   2072c:	e037883a 	mov	sp,fp
   20730:	dfc00117 	ldw	ra,4(sp)
   20734:	df000017 	ldw	fp,0(sp)
   20738:	dec00204 	addi	sp,sp,8
   2073c:	f800283a 	ret

00020740 <recov_isr_print>:

void recov_isr_print(void* context)
{
   20740:	defffe04 	addi	sp,sp,-8
   20744:	df000115 	stw	fp,4(sp)
   20748:	df000104 	addi	fp,sp,4
   2074c:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, 0);
   20750:	0007883a 	mov	r3,zero
   20754:	00800134 	movhi	r2,4
   20758:	10840104 	addi	r2,r2,4100
   2075c:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, 0);
   20760:	0007883a 	mov	r3,zero
   20764:	00800134 	movhi	r2,4
   20768:	10840004 	addi	r2,r2,4096
   2076c:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(COUNTER_0_BASE, COUNT_Start, arbval);
   20770:	00ffffd4 	movui	r3,65535
   20774:	00800134 	movhi	r2,4
   20778:	10840a04 	addi	r2,r2,4136
   2077c:	10c00035 	stwio	r3,0(r2)
}
   20780:	0001883a 	nop
   20784:	e037883a 	mov	sp,fp
   20788:	df000017 	ldw	fp,0(sp)
   2078c:	dec00104 	addi	sp,sp,4
   20790:	f800283a 	ret

00020794 <recov_isr_parport>:

void recov_isr_parport(void* context)
{
   20794:	defffe04 	addi	sp,sp,-8
   20798:	df000115 	stw	fp,4(sp)
   2079c:	df000104 	addi	fp,sp,4
   207a0:	e13fff15 	stw	r4,-4(fp)

}
   207a4:	0001883a 	nop
   207a8:	e037883a 	mov	sp,fp
   207ac:	df000017 	ldw	fp,0(sp)
   207b0:	dec00104 	addi	sp,sp,4
   207b4:	f800283a 	ret

000207b8 <test_recovtime_print>:

void test_recovtime_print()
{
   207b8:	defff804 	addi	sp,sp,-32
   207bc:	dfc00715 	stw	ra,28(sp)
   207c0:	df000615 	stw	fp,24(sp)
   207c4:	df000604 	addi	fp,sp,24
	// Register interrupt function
	alt_ic_isr_register(TIMER_0_IRQ_INTERRUPT_CONTROLLER_ID, TIMER_0_IRQ, recov_isr_print, 0, 0);
   207c8:	d8000015 	stw	zero,0(sp)
   207cc:	000f883a 	mov	r7,zero
   207d0:	018000b4 	movhi	r6,2
   207d4:	3181d004 	addi	r6,r6,1856
   207d8:	014000c4 	movi	r5,3
   207dc:	0009883a 	mov	r4,zero
   207e0:	002d4000 	call	2d400 <alt_ic_isr_register>
	// Initialize counter, with maximum target value
	IOWR_32DIRECT(COUNTER_0_BASE, COUNT_Target, 0xFFFFFFFF);
   207e4:	00ffffc4 	movi	r3,-1
   207e8:	00800134 	movhi	r2,4
   207ec:	10840e04 	addi	r2,r2,4152
   207f0:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(COUNTER_0_BASE, COUNT_RZ, arbval);
   207f4:	00ffffd4 	movui	r3,65535
   207f8:	00800134 	movhi	r2,4
   207fc:	10840904 	addi	r2,r2,4132
   20800:	10c00035 	stwio	r3,0(r2)
	// Initialize timer
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, 0);
   20804:	0007883a 	mov	r3,zero
   20808:	00800134 	movhi	r2,4
   2080c:	10840104 	addi	r2,r2,4100
   20810:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_0_BASE, 0xF080);
   20814:	00fc2014 	movui	r3,61568
   20818:	00800134 	movhi	r2,4
   2081c:	10840204 	addi	r2,r2,4104
   20820:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_0_BASE, 0x02FA);
   20824:	00c0be84 	movi	r3,762
   20828:	00800134 	movhi	r2,4
   2082c:	10840304 	addi	r2,r2,4108
   20830:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, TIMER_settings_start);
   20834:	00c001c4 	movi	r3,7
   20838:	00800134 	movhi	r2,4
   2083c:	10840104 	addi	r2,r2,4100
   20840:	10c00035 	stwio	r3,0(r2)
	// Setup loop structure
	int counter = 0;
   20844:	e03ffb15 	stw	zero,-20(fp)
	int max_iter = 10;
   20848:	00800284 	movi	r2,10
   2084c:	e0bffe15 	stw	r2,-8(fp)
	int accum_val = 0;
   20850:	e03ffc15 	stw	zero,-16(fp)
	int avg_val = 0;
   20854:	e03fff15 	stw	zero,-4(fp)
	int read_val;
	printf("\n\nTesting recovery time using custom counter and\n"
   20858:	e17ffe17 	ldw	r5,-8(fp)
   2085c:	010000f4 	movhi	r4,3
   20860:	213f8d04 	addi	r4,r4,-460
   20864:	0020b740 	call	20b74 <printf>
			" counting the average over %d iterations...\n", max_iter);
	while(counter < max_iter)
   20868:	00002506 	br	20900 <test_recovtime_print+0x148>
	{
		read_val = IORD_32DIRECT(COUNTER_0_BASE,0);
   2086c:	00800134 	movhi	r2,4
   20870:	10840804 	addi	r2,r2,4128
   20874:	10800037 	ldwio	r2,0(r2)
   20878:	e0bffd15 	stw	r2,-12(fp)
		while(read_val == 0)
   2087c:	00000406 	br	20890 <test_recovtime_print+0xd8>
		{
			read_val = IORD_32DIRECT(COUNTER_0_BASE,0);
   20880:	00800134 	movhi	r2,4
   20884:	10840804 	addi	r2,r2,4128
   20888:	10800037 	ldwio	r2,0(r2)
   2088c:	e0bffd15 	stw	r2,-12(fp)
	printf("\n\nTesting recovery time using custom counter and\n"
			" counting the average over %d iterations...\n", max_iter);
	while(counter < max_iter)
	{
		read_val = IORD_32DIRECT(COUNTER_0_BASE,0);
		while(read_val == 0)
   20890:	e0bffd17 	ldw	r2,-12(fp)
   20894:	103ffa26 	beq	r2,zero,20880 <__alt_data_end+0xfffe0880>
		{
			read_val = IORD_32DIRECT(COUNTER_0_BASE,0);
		}
		alt_printf("Value at iteration %x is 0x%x\n", counter+1, read_val);
   20898:	e0bffb17 	ldw	r2,-20(fp)
   2089c:	10800044 	addi	r2,r2,1
   208a0:	e1bffd17 	ldw	r6,-12(fp)
   208a4:	100b883a 	mov	r5,r2
   208a8:	010000f4 	movhi	r4,3
   208ac:	213f7b04 	addi	r4,r4,-532
   208b0:	002da400 	call	2da40 <alt_printf>
		accum_val += read_val;
   208b4:	e0fffc17 	ldw	r3,-16(fp)
   208b8:	e0bffd17 	ldw	r2,-12(fp)
   208bc:	1885883a 	add	r2,r3,r2
   208c0:	e0bffc15 	stw	r2,-16(fp)
		counter += 1;
   208c4:	e0bffb17 	ldw	r2,-20(fp)
   208c8:	10800044 	addi	r2,r2,1
   208cc:	e0bffb15 	stw	r2,-20(fp)
		IOWR_32DIRECT(COUNTER_0_BASE, COUNT_Stop, arbval);
   208d0:	00ffffd4 	movui	r3,65535
   208d4:	00800134 	movhi	r2,4
   208d8:	10840b04 	addi	r2,r2,4140
   208dc:	10c00035 	stwio	r3,0(r2)
		IOWR_32DIRECT(COUNTER_0_BASE, COUNT_RZ, arbval);
   208e0:	00ffffd4 	movui	r3,65535
   208e4:	00800134 	movhi	r2,4
   208e8:	10840904 	addi	r2,r2,4132
   208ec:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, TIMER_settings_start);
   208f0:	00c001c4 	movi	r3,7
   208f4:	00800134 	movhi	r2,4
   208f8:	10840104 	addi	r2,r2,4100
   208fc:	10c00035 	stwio	r3,0(r2)
	int accum_val = 0;
	int avg_val = 0;
	int read_val;
	printf("\n\nTesting recovery time using custom counter and\n"
			" counting the average over %d iterations...\n", max_iter);
	while(counter < max_iter)
   20900:	e0fffb17 	ldw	r3,-20(fp)
   20904:	e0bffe17 	ldw	r2,-8(fp)
   20908:	18bfd816 	blt	r3,r2,2086c <__alt_data_end+0xfffe086c>
		counter += 1;
		IOWR_32DIRECT(COUNTER_0_BASE, COUNT_Stop, arbval);
		IOWR_32DIRECT(COUNTER_0_BASE, COUNT_RZ, arbval);
		IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, TIMER_settings_start);
	}
	avg_val = accum_val/max_iter;
   2090c:	e17ffe17 	ldw	r5,-8(fp)
   20910:	e13ffc17 	ldw	r4,-16(fp)
   20914:	00209900 	call	20990 <__divsi3>
   20918:	e0bfff15 	stw	r2,-4(fp)
	printf("Average value for recovery time is %d", avg_val);
   2091c:	e17fff17 	ldw	r5,-4(fp)
   20920:	010000f4 	movhi	r4,3
   20924:	213fa504 	addi	r4,r4,-364
   20928:	0020b740 	call	20b74 <printf>
}
   2092c:	0001883a 	nop
   20930:	e037883a 	mov	sp,fp
   20934:	dfc00117 	ldw	ra,4(sp)
   20938:	df000017 	ldw	fp,0(sp)
   2093c:	dec00204 	addi	sp,sp,8
   20940:	f800283a 	ret

00020944 <test_recovtime_parport>:

void test_recovtime_parport()
{
   20944:	deffff04 	addi	sp,sp,-4
   20948:	df000015 	stw	fp,0(sp)
   2094c:	d839883a 	mov	fp,sp

}
   20950:	0001883a 	nop
   20954:	e037883a 	mov	sp,fp
   20958:	df000017 	ldw	fp,0(sp)
   2095c:	dec00104 	addi	sp,sp,4
   20960:	f800283a 	ret

00020964 <main>:

int main()
{
   20964:	defffe04 	addi	sp,sp,-8
   20968:	dfc00115 	stw	ra,4(sp)
   2096c:	df000015 	stw	fp,0(sp)
   20970:	d839883a 	mov	fp,sp
	//test_parallel_port();
	//test_counter();
	//test_resptime_print();
	//test_recovtime_print();
	test_resptime_parport();
   20974:	00206a40 	call	206a4 <test_resptime_parport>
	return 0;
   20978:	0005883a 	mov	r2,zero
}
   2097c:	e037883a 	mov	sp,fp
   20980:	dfc00117 	ldw	ra,4(sp)
   20984:	df000017 	ldw	fp,0(sp)
   20988:	dec00204 	addi	sp,sp,8
   2098c:	f800283a 	ret

00020990 <__divsi3>:
   20990:	20001b16 	blt	r4,zero,20a00 <__divsi3+0x70>
   20994:	000f883a 	mov	r7,zero
   20998:	28001616 	blt	r5,zero,209f4 <__divsi3+0x64>
   2099c:	200d883a 	mov	r6,r4
   209a0:	29001a2e 	bgeu	r5,r4,20a0c <__divsi3+0x7c>
   209a4:	00800804 	movi	r2,32
   209a8:	00c00044 	movi	r3,1
   209ac:	00000106 	br	209b4 <__divsi3+0x24>
   209b0:	10000d26 	beq	r2,zero,209e8 <__divsi3+0x58>
   209b4:	294b883a 	add	r5,r5,r5
   209b8:	10bfffc4 	addi	r2,r2,-1
   209bc:	18c7883a 	add	r3,r3,r3
   209c0:	293ffb36 	bltu	r5,r4,209b0 <__alt_data_end+0xfffe09b0>
   209c4:	0005883a 	mov	r2,zero
   209c8:	18000726 	beq	r3,zero,209e8 <__divsi3+0x58>
   209cc:	0005883a 	mov	r2,zero
   209d0:	31400236 	bltu	r6,r5,209dc <__divsi3+0x4c>
   209d4:	314dc83a 	sub	r6,r6,r5
   209d8:	10c4b03a 	or	r2,r2,r3
   209dc:	1806d07a 	srli	r3,r3,1
   209e0:	280ad07a 	srli	r5,r5,1
   209e4:	183ffa1e 	bne	r3,zero,209d0 <__alt_data_end+0xfffe09d0>
   209e8:	38000126 	beq	r7,zero,209f0 <__divsi3+0x60>
   209ec:	0085c83a 	sub	r2,zero,r2
   209f0:	f800283a 	ret
   209f4:	014bc83a 	sub	r5,zero,r5
   209f8:	39c0005c 	xori	r7,r7,1
   209fc:	003fe706 	br	2099c <__alt_data_end+0xfffe099c>
   20a00:	0109c83a 	sub	r4,zero,r4
   20a04:	01c00044 	movi	r7,1
   20a08:	003fe306 	br	20998 <__alt_data_end+0xfffe0998>
   20a0c:	00c00044 	movi	r3,1
   20a10:	003fee06 	br	209cc <__alt_data_end+0xfffe09cc>

00020a14 <__modsi3>:
   20a14:	20001716 	blt	r4,zero,20a74 <__modsi3+0x60>
   20a18:	000f883a 	mov	r7,zero
   20a1c:	2005883a 	mov	r2,r4
   20a20:	28001216 	blt	r5,zero,20a6c <__modsi3+0x58>
   20a24:	2900162e 	bgeu	r5,r4,20a80 <__modsi3+0x6c>
   20a28:	01800804 	movi	r6,32
   20a2c:	00c00044 	movi	r3,1
   20a30:	00000106 	br	20a38 <__modsi3+0x24>
   20a34:	30000a26 	beq	r6,zero,20a60 <__modsi3+0x4c>
   20a38:	294b883a 	add	r5,r5,r5
   20a3c:	31bfffc4 	addi	r6,r6,-1
   20a40:	18c7883a 	add	r3,r3,r3
   20a44:	293ffb36 	bltu	r5,r4,20a34 <__alt_data_end+0xfffe0a34>
   20a48:	18000526 	beq	r3,zero,20a60 <__modsi3+0x4c>
   20a4c:	1806d07a 	srli	r3,r3,1
   20a50:	11400136 	bltu	r2,r5,20a58 <__modsi3+0x44>
   20a54:	1145c83a 	sub	r2,r2,r5
   20a58:	280ad07a 	srli	r5,r5,1
   20a5c:	183ffb1e 	bne	r3,zero,20a4c <__alt_data_end+0xfffe0a4c>
   20a60:	38000126 	beq	r7,zero,20a68 <__modsi3+0x54>
   20a64:	0085c83a 	sub	r2,zero,r2
   20a68:	f800283a 	ret
   20a6c:	014bc83a 	sub	r5,zero,r5
   20a70:	003fec06 	br	20a24 <__alt_data_end+0xfffe0a24>
   20a74:	0109c83a 	sub	r4,zero,r4
   20a78:	01c00044 	movi	r7,1
   20a7c:	003fe706 	br	20a1c <__alt_data_end+0xfffe0a1c>
   20a80:	00c00044 	movi	r3,1
   20a84:	003ff106 	br	20a4c <__alt_data_end+0xfffe0a4c>

00020a88 <__udivsi3>:
   20a88:	200d883a 	mov	r6,r4
   20a8c:	2900152e 	bgeu	r5,r4,20ae4 <__udivsi3+0x5c>
   20a90:	28001416 	blt	r5,zero,20ae4 <__udivsi3+0x5c>
   20a94:	00800804 	movi	r2,32
   20a98:	00c00044 	movi	r3,1
   20a9c:	00000206 	br	20aa8 <__udivsi3+0x20>
   20aa0:	10000e26 	beq	r2,zero,20adc <__udivsi3+0x54>
   20aa4:	28000516 	blt	r5,zero,20abc <__udivsi3+0x34>
   20aa8:	294b883a 	add	r5,r5,r5
   20aac:	10bfffc4 	addi	r2,r2,-1
   20ab0:	18c7883a 	add	r3,r3,r3
   20ab4:	293ffa36 	bltu	r5,r4,20aa0 <__alt_data_end+0xfffe0aa0>
   20ab8:	18000826 	beq	r3,zero,20adc <__udivsi3+0x54>
   20abc:	0005883a 	mov	r2,zero
   20ac0:	31400236 	bltu	r6,r5,20acc <__udivsi3+0x44>
   20ac4:	314dc83a 	sub	r6,r6,r5
   20ac8:	10c4b03a 	or	r2,r2,r3
   20acc:	1806d07a 	srli	r3,r3,1
   20ad0:	280ad07a 	srli	r5,r5,1
   20ad4:	183ffa1e 	bne	r3,zero,20ac0 <__alt_data_end+0xfffe0ac0>
   20ad8:	f800283a 	ret
   20adc:	0005883a 	mov	r2,zero
   20ae0:	f800283a 	ret
   20ae4:	00c00044 	movi	r3,1
   20ae8:	003ff406 	br	20abc <__alt_data_end+0xfffe0abc>

00020aec <__umodsi3>:
   20aec:	2005883a 	mov	r2,r4
   20af0:	2900122e 	bgeu	r5,r4,20b3c <__umodsi3+0x50>
   20af4:	28001116 	blt	r5,zero,20b3c <__umodsi3+0x50>
   20af8:	01800804 	movi	r6,32
   20afc:	00c00044 	movi	r3,1
   20b00:	00000206 	br	20b0c <__umodsi3+0x20>
   20b04:	30000c26 	beq	r6,zero,20b38 <__umodsi3+0x4c>
   20b08:	28000516 	blt	r5,zero,20b20 <__umodsi3+0x34>
   20b0c:	294b883a 	add	r5,r5,r5
   20b10:	31bfffc4 	addi	r6,r6,-1
   20b14:	18c7883a 	add	r3,r3,r3
   20b18:	293ffa36 	bltu	r5,r4,20b04 <__alt_data_end+0xfffe0b04>
   20b1c:	18000626 	beq	r3,zero,20b38 <__umodsi3+0x4c>
   20b20:	1806d07a 	srli	r3,r3,1
   20b24:	11400136 	bltu	r2,r5,20b2c <__umodsi3+0x40>
   20b28:	1145c83a 	sub	r2,r2,r5
   20b2c:	280ad07a 	srli	r5,r5,1
   20b30:	183ffb1e 	bne	r3,zero,20b20 <__alt_data_end+0xfffe0b20>
   20b34:	f800283a 	ret
   20b38:	f800283a 	ret
   20b3c:	00c00044 	movi	r3,1
   20b40:	003ff706 	br	20b20 <__alt_data_end+0xfffe0b20>

00020b44 <_printf_r>:
   20b44:	defffd04 	addi	sp,sp,-12
   20b48:	2805883a 	mov	r2,r5
   20b4c:	dfc00015 	stw	ra,0(sp)
   20b50:	d9800115 	stw	r6,4(sp)
   20b54:	d9c00215 	stw	r7,8(sp)
   20b58:	21400217 	ldw	r5,8(r4)
   20b5c:	d9c00104 	addi	r7,sp,4
   20b60:	100d883a 	mov	r6,r2
   20b64:	0020bb00 	call	20bb0 <___vfprintf_internal_r>
   20b68:	dfc00017 	ldw	ra,0(sp)
   20b6c:	dec00304 	addi	sp,sp,12
   20b70:	f800283a 	ret

00020b74 <printf>:
   20b74:	defffc04 	addi	sp,sp,-16
   20b78:	dfc00015 	stw	ra,0(sp)
   20b7c:	d9400115 	stw	r5,4(sp)
   20b80:	d9800215 	stw	r6,8(sp)
   20b84:	d9c00315 	stw	r7,12(sp)
   20b88:	008000f4 	movhi	r2,3
   20b8c:	10871a04 	addi	r2,r2,7272
   20b90:	10800017 	ldw	r2,0(r2)
   20b94:	200b883a 	mov	r5,r4
   20b98:	d9800104 	addi	r6,sp,4
   20b9c:	11000217 	ldw	r4,8(r2)
   20ba0:	0022da80 	call	22da8 <__vfprintf_internal>
   20ba4:	dfc00017 	ldw	ra,0(sp)
   20ba8:	dec00404 	addi	sp,sp,16
   20bac:	f800283a 	ret

00020bb0 <___vfprintf_internal_r>:
   20bb0:	deffb804 	addi	sp,sp,-288
   20bb4:	dfc04715 	stw	ra,284(sp)
   20bb8:	ddc04515 	stw	r23,276(sp)
   20bbc:	dd404315 	stw	r21,268(sp)
   20bc0:	d9002c15 	stw	r4,176(sp)
   20bc4:	282f883a 	mov	r23,r5
   20bc8:	302b883a 	mov	r21,r6
   20bcc:	d9c02d15 	stw	r7,180(sp)
   20bd0:	df004615 	stw	fp,280(sp)
   20bd4:	dd804415 	stw	r22,272(sp)
   20bd8:	dd004215 	stw	r20,264(sp)
   20bdc:	dcc04115 	stw	r19,260(sp)
   20be0:	dc804015 	stw	r18,256(sp)
   20be4:	dc403f15 	stw	r17,252(sp)
   20be8:	dc003e15 	stw	r16,248(sp)
   20bec:	002550c0 	call	2550c <_localeconv_r>
   20bf0:	10800017 	ldw	r2,0(r2)
   20bf4:	1009883a 	mov	r4,r2
   20bf8:	d8803415 	stw	r2,208(sp)
   20bfc:	00275340 	call	27534 <strlen>
   20c00:	d8803715 	stw	r2,220(sp)
   20c04:	d8802c17 	ldw	r2,176(sp)
   20c08:	10000226 	beq	r2,zero,20c14 <___vfprintf_internal_r+0x64>
   20c0c:	10800e17 	ldw	r2,56(r2)
   20c10:	1000f926 	beq	r2,zero,20ff8 <___vfprintf_internal_r+0x448>
   20c14:	b880030b 	ldhu	r2,12(r23)
   20c18:	10c8000c 	andi	r3,r2,8192
   20c1c:	1800061e 	bne	r3,zero,20c38 <___vfprintf_internal_r+0x88>
   20c20:	b9001917 	ldw	r4,100(r23)
   20c24:	00f7ffc4 	movi	r3,-8193
   20c28:	10880014 	ori	r2,r2,8192
   20c2c:	20c6703a 	and	r3,r4,r3
   20c30:	b880030d 	sth	r2,12(r23)
   20c34:	b8c01915 	stw	r3,100(r23)
   20c38:	10c0020c 	andi	r3,r2,8
   20c3c:	1800c126 	beq	r3,zero,20f44 <___vfprintf_internal_r+0x394>
   20c40:	b8c00417 	ldw	r3,16(r23)
   20c44:	1800bf26 	beq	r3,zero,20f44 <___vfprintf_internal_r+0x394>
   20c48:	1080068c 	andi	r2,r2,26
   20c4c:	00c00284 	movi	r3,10
   20c50:	10c0c426 	beq	r2,r3,20f64 <___vfprintf_internal_r+0x3b4>
   20c54:	d8c00404 	addi	r3,sp,16
   20c58:	050000f4 	movhi	r20,3
   20c5c:	d9001e04 	addi	r4,sp,120
   20c60:	a53fbf84 	addi	r20,r20,-258
   20c64:	d8c01e15 	stw	r3,120(sp)
   20c68:	d8002015 	stw	zero,128(sp)
   20c6c:	d8001f15 	stw	zero,124(sp)
   20c70:	d8003315 	stw	zero,204(sp)
   20c74:	d8003615 	stw	zero,216(sp)
   20c78:	d8003815 	stw	zero,224(sp)
   20c7c:	1811883a 	mov	r8,r3
   20c80:	d8003915 	stw	zero,228(sp)
   20c84:	d8003a15 	stw	zero,232(sp)
   20c88:	d8002f15 	stw	zero,188(sp)
   20c8c:	d9002815 	stw	r4,160(sp)
   20c90:	a8800007 	ldb	r2,0(r21)
   20c94:	10027b26 	beq	r2,zero,21684 <___vfprintf_internal_r+0xad4>
   20c98:	00c00944 	movi	r3,37
   20c9c:	a821883a 	mov	r16,r21
   20ca0:	10c0021e 	bne	r2,r3,20cac <___vfprintf_internal_r+0xfc>
   20ca4:	00001406 	br	20cf8 <___vfprintf_internal_r+0x148>
   20ca8:	10c00326 	beq	r2,r3,20cb8 <___vfprintf_internal_r+0x108>
   20cac:	84000044 	addi	r16,r16,1
   20cb0:	80800007 	ldb	r2,0(r16)
   20cb4:	103ffc1e 	bne	r2,zero,20ca8 <__alt_data_end+0xfffe0ca8>
   20cb8:	8563c83a 	sub	r17,r16,r21
   20cbc:	88000e26 	beq	r17,zero,20cf8 <___vfprintf_internal_r+0x148>
   20cc0:	d8c02017 	ldw	r3,128(sp)
   20cc4:	d8801f17 	ldw	r2,124(sp)
   20cc8:	45400015 	stw	r21,0(r8)
   20ccc:	1c47883a 	add	r3,r3,r17
   20cd0:	10800044 	addi	r2,r2,1
   20cd4:	d8c02015 	stw	r3,128(sp)
   20cd8:	44400115 	stw	r17,4(r8)
   20cdc:	d8801f15 	stw	r2,124(sp)
   20ce0:	00c001c4 	movi	r3,7
   20ce4:	1880a716 	blt	r3,r2,20f84 <___vfprintf_internal_r+0x3d4>
   20ce8:	42000204 	addi	r8,r8,8
   20cec:	d9402f17 	ldw	r5,188(sp)
   20cf0:	2c4b883a 	add	r5,r5,r17
   20cf4:	d9402f15 	stw	r5,188(sp)
   20cf8:	80800007 	ldb	r2,0(r16)
   20cfc:	1000a826 	beq	r2,zero,20fa0 <___vfprintf_internal_r+0x3f0>
   20d00:	84400047 	ldb	r17,1(r16)
   20d04:	00bfffc4 	movi	r2,-1
   20d08:	85400044 	addi	r21,r16,1
   20d0c:	d8002785 	stb	zero,158(sp)
   20d10:	0007883a 	mov	r3,zero
   20d14:	000f883a 	mov	r7,zero
   20d18:	d8802915 	stw	r2,164(sp)
   20d1c:	d8003115 	stw	zero,196(sp)
   20d20:	0025883a 	mov	r18,zero
   20d24:	01401604 	movi	r5,88
   20d28:	01800244 	movi	r6,9
   20d2c:	02800a84 	movi	r10,42
   20d30:	02401b04 	movi	r9,108
   20d34:	ad400044 	addi	r21,r21,1
   20d38:	88bff804 	addi	r2,r17,-32
   20d3c:	28830436 	bltu	r5,r2,21950 <___vfprintf_internal_r+0xda0>
   20d40:	100490ba 	slli	r2,r2,2
   20d44:	010000b4 	movhi	r4,2
   20d48:	21035604 	addi	r4,r4,3416
   20d4c:	1105883a 	add	r2,r2,r4
   20d50:	10800017 	ldw	r2,0(r2)
   20d54:	1000683a 	jmp	r2
   20d58:	00021870 	cmpltui	zero,zero,2145
   20d5c:	00021950 	cmplti	zero,zero,2149
   20d60:	00021950 	cmplti	zero,zero,2149
   20d64:	00021890 	cmplti	zero,zero,2146
   20d68:	00021950 	cmplti	zero,zero,2149
   20d6c:	00021950 	cmplti	zero,zero,2149
   20d70:	00021950 	cmplti	zero,zero,2149
   20d74:	00021950 	cmplti	zero,zero,2149
   20d78:	00021950 	cmplti	zero,zero,2149
   20d7c:	00021950 	cmplti	zero,zero,2149
   20d80:	00021004 	movi	zero,2112
   20d84:	000217ac 	andhi	zero,zero,2142
   20d88:	00021950 	cmplti	zero,zero,2149
   20d8c:	00020ecc 	andi	zero,zero,2107
   20d90:	0002102c 	andhi	zero,zero,2112
   20d94:	00021950 	cmplti	zero,zero,2149
   20d98:	0002106c 	andhi	zero,zero,2113
   20d9c:	00021078 	rdprs	zero,zero,2113
   20da0:	00021078 	rdprs	zero,zero,2113
   20da4:	00021078 	rdprs	zero,zero,2113
   20da8:	00021078 	rdprs	zero,zero,2113
   20dac:	00021078 	rdprs	zero,zero,2113
   20db0:	00021078 	rdprs	zero,zero,2113
   20db4:	00021078 	rdprs	zero,zero,2113
   20db8:	00021078 	rdprs	zero,zero,2113
   20dbc:	00021078 	rdprs	zero,zero,2113
   20dc0:	00021950 	cmplti	zero,zero,2149
   20dc4:	00021950 	cmplti	zero,zero,2149
   20dc8:	00021950 	cmplti	zero,zero,2149
   20dcc:	00021950 	cmplti	zero,zero,2149
   20dd0:	00021950 	cmplti	zero,zero,2149
   20dd4:	00021950 	cmplti	zero,zero,2149
   20dd8:	00021950 	cmplti	zero,zero,2149
   20ddc:	00021950 	cmplti	zero,zero,2149
   20de0:	00021950 	cmplti	zero,zero,2149
   20de4:	00021950 	cmplti	zero,zero,2149
   20de8:	000210ac 	andhi	zero,zero,2114
   20dec:	00021168 	cmpgeui	zero,zero,2117
   20df0:	00021950 	cmplti	zero,zero,2149
   20df4:	00021168 	cmpgeui	zero,zero,2117
   20df8:	00021950 	cmplti	zero,zero,2149
   20dfc:	00021950 	cmplti	zero,zero,2149
   20e00:	00021950 	cmplti	zero,zero,2149
   20e04:	00021950 	cmplti	zero,zero,2149
   20e08:	00021208 	cmpgei	zero,zero,2120
   20e0c:	00021950 	cmplti	zero,zero,2149
   20e10:	00021950 	cmplti	zero,zero,2149
   20e14:	00021214 	movui	zero,2120
   20e18:	00021950 	cmplti	zero,zero,2149
   20e1c:	00021950 	cmplti	zero,zero,2149
   20e20:	00021950 	cmplti	zero,zero,2149
   20e24:	00021950 	cmplti	zero,zero,2149
   20e28:	00021950 	cmplti	zero,zero,2149
   20e2c:	0002168c 	andi	zero,zero,2138
   20e30:	00021950 	cmplti	zero,zero,2149
   20e34:	00021950 	cmplti	zero,zero,2149
   20e38:	000216ec 	andhi	zero,zero,2139
   20e3c:	00021950 	cmplti	zero,zero,2149
   20e40:	00021950 	cmplti	zero,zero,2149
   20e44:	00021950 	cmplti	zero,zero,2149
   20e48:	00021950 	cmplti	zero,zero,2149
   20e4c:	00021950 	cmplti	zero,zero,2149
   20e50:	00021950 	cmplti	zero,zero,2149
   20e54:	00021950 	cmplti	zero,zero,2149
   20e58:	00021950 	cmplti	zero,zero,2149
   20e5c:	00021950 	cmplti	zero,zero,2149
   20e60:	00021950 	cmplti	zero,zero,2149
   20e64:	000218fc 	xorhi	zero,zero,2147
   20e68:	0002189c 	xori	zero,zero,2146
   20e6c:	00021168 	cmpgeui	zero,zero,2117
   20e70:	00021168 	cmpgeui	zero,zero,2117
   20e74:	00021168 	cmpgeui	zero,zero,2117
   20e78:	000218ac 	andhi	zero,zero,2146
   20e7c:	0002189c 	xori	zero,zero,2146
   20e80:	00021950 	cmplti	zero,zero,2149
   20e84:	00021950 	cmplti	zero,zero,2149
   20e88:	000218b8 	rdprs	zero,zero,2146
   20e8c:	00021950 	cmplti	zero,zero,2149
   20e90:	000218c8 	cmpgei	zero,zero,2147
   20e94:	0002179c 	xori	zero,zero,2142
   20e98:	00020ed8 	cmpnei	zero,zero,2107
   20e9c:	000217bc 	xorhi	zero,zero,2142
   20ea0:	00021950 	cmplti	zero,zero,2149
   20ea4:	000217c8 	cmpgei	zero,zero,2143
   20ea8:	00021950 	cmplti	zero,zero,2149
   20eac:	00021824 	muli	zero,zero,2144
   20eb0:	00021950 	cmplti	zero,zero,2149
   20eb4:	00021950 	cmplti	zero,zero,2149
   20eb8:	00021834 	movhi	zero,2144
   20ebc:	d9003117 	ldw	r4,196(sp)
   20ec0:	d8802d15 	stw	r2,180(sp)
   20ec4:	0109c83a 	sub	r4,zero,r4
   20ec8:	d9003115 	stw	r4,196(sp)
   20ecc:	94800114 	ori	r18,r18,4
   20ed0:	ac400007 	ldb	r17,0(r21)
   20ed4:	003f9706 	br	20d34 <__alt_data_end+0xfffe0d34>
   20ed8:	00800c04 	movi	r2,48
   20edc:	d9002d17 	ldw	r4,180(sp)
   20ee0:	d9402917 	ldw	r5,164(sp)
   20ee4:	d8802705 	stb	r2,156(sp)
   20ee8:	00801e04 	movi	r2,120
   20eec:	d8802745 	stb	r2,157(sp)
   20ef0:	d8002785 	stb	zero,158(sp)
   20ef4:	20c00104 	addi	r3,r4,4
   20ef8:	24c00017 	ldw	r19,0(r4)
   20efc:	002d883a 	mov	r22,zero
   20f00:	90800094 	ori	r2,r18,2
   20f04:	28029a16 	blt	r5,zero,21970 <___vfprintf_internal_r+0xdc0>
   20f08:	00bfdfc4 	movi	r2,-129
   20f0c:	90a4703a 	and	r18,r18,r2
   20f10:	d8c02d15 	stw	r3,180(sp)
   20f14:	94800094 	ori	r18,r18,2
   20f18:	9802871e 	bne	r19,zero,21938 <___vfprintf_internal_r+0xd88>
   20f1c:	008000f4 	movhi	r2,3
   20f20:	10bfb804 	addi	r2,r2,-288
   20f24:	d8803915 	stw	r2,228(sp)
   20f28:	04401e04 	movi	r17,120
   20f2c:	d8802917 	ldw	r2,164(sp)
   20f30:	0039883a 	mov	fp,zero
   20f34:	1001e926 	beq	r2,zero,216dc <___vfprintf_internal_r+0xb2c>
   20f38:	0027883a 	mov	r19,zero
   20f3c:	002d883a 	mov	r22,zero
   20f40:	00020506 	br	21758 <___vfprintf_internal_r+0xba8>
   20f44:	d9002c17 	ldw	r4,176(sp)
   20f48:	b80b883a 	mov	r5,r23
   20f4c:	0022e800 	call	22e80 <__swsetup_r>
   20f50:	1005ac1e 	bne	r2,zero,22604 <___vfprintf_internal_r+0x1a54>
   20f54:	b880030b 	ldhu	r2,12(r23)
   20f58:	00c00284 	movi	r3,10
   20f5c:	1080068c 	andi	r2,r2,26
   20f60:	10ff3c1e 	bne	r2,r3,20c54 <__alt_data_end+0xfffe0c54>
   20f64:	b880038f 	ldh	r2,14(r23)
   20f68:	103f3a16 	blt	r2,zero,20c54 <__alt_data_end+0xfffe0c54>
   20f6c:	d9c02d17 	ldw	r7,180(sp)
   20f70:	d9002c17 	ldw	r4,176(sp)
   20f74:	a80d883a 	mov	r6,r21
   20f78:	b80b883a 	mov	r5,r23
   20f7c:	0022dc40 	call	22dc4 <__sbprintf>
   20f80:	00001106 	br	20fc8 <___vfprintf_internal_r+0x418>
   20f84:	d9002c17 	ldw	r4,176(sp)
   20f88:	d9801e04 	addi	r6,sp,120
   20f8c:	b80b883a 	mov	r5,r23
   20f90:	00276c80 	call	276c8 <__sprint_r>
   20f94:	1000081e 	bne	r2,zero,20fb8 <___vfprintf_internal_r+0x408>
   20f98:	da000404 	addi	r8,sp,16
   20f9c:	003f5306 	br	20cec <__alt_data_end+0xfffe0cec>
   20fa0:	d8802017 	ldw	r2,128(sp)
   20fa4:	10000426 	beq	r2,zero,20fb8 <___vfprintf_internal_r+0x408>
   20fa8:	d9002c17 	ldw	r4,176(sp)
   20fac:	d9801e04 	addi	r6,sp,120
   20fb0:	b80b883a 	mov	r5,r23
   20fb4:	00276c80 	call	276c8 <__sprint_r>
   20fb8:	b880030b 	ldhu	r2,12(r23)
   20fbc:	1080100c 	andi	r2,r2,64
   20fc0:	1005901e 	bne	r2,zero,22604 <___vfprintf_internal_r+0x1a54>
   20fc4:	d8802f17 	ldw	r2,188(sp)
   20fc8:	dfc04717 	ldw	ra,284(sp)
   20fcc:	df004617 	ldw	fp,280(sp)
   20fd0:	ddc04517 	ldw	r23,276(sp)
   20fd4:	dd804417 	ldw	r22,272(sp)
   20fd8:	dd404317 	ldw	r21,268(sp)
   20fdc:	dd004217 	ldw	r20,264(sp)
   20fe0:	dcc04117 	ldw	r19,260(sp)
   20fe4:	dc804017 	ldw	r18,256(sp)
   20fe8:	dc403f17 	ldw	r17,252(sp)
   20fec:	dc003e17 	ldw	r16,248(sp)
   20ff0:	dec04804 	addi	sp,sp,288
   20ff4:	f800283a 	ret
   20ff8:	d9002c17 	ldw	r4,176(sp)
   20ffc:	0024e540 	call	24e54 <__sinit>
   21000:	003f0406 	br	20c14 <__alt_data_end+0xfffe0c14>
   21004:	d8802d17 	ldw	r2,180(sp)
   21008:	d9002d17 	ldw	r4,180(sp)
   2100c:	10800017 	ldw	r2,0(r2)
   21010:	d8803115 	stw	r2,196(sp)
   21014:	20800104 	addi	r2,r4,4
   21018:	d9003117 	ldw	r4,196(sp)
   2101c:	203fa716 	blt	r4,zero,20ebc <__alt_data_end+0xfffe0ebc>
   21020:	d8802d15 	stw	r2,180(sp)
   21024:	ac400007 	ldb	r17,0(r21)
   21028:	003f4206 	br	20d34 <__alt_data_end+0xfffe0d34>
   2102c:	ac400007 	ldb	r17,0(r21)
   21030:	aac00044 	addi	r11,r21,1
   21034:	8a872826 	beq	r17,r10,22cd8 <___vfprintf_internal_r+0x2128>
   21038:	88bff404 	addi	r2,r17,-48
   2103c:	0009883a 	mov	r4,zero
   21040:	30867d36 	bltu	r6,r2,22a38 <___vfprintf_internal_r+0x1e88>
   21044:	5c400007 	ldb	r17,0(r11)
   21048:	210002a4 	muli	r4,r4,10
   2104c:	5d400044 	addi	r21,r11,1
   21050:	a817883a 	mov	r11,r21
   21054:	2089883a 	add	r4,r4,r2
   21058:	88bff404 	addi	r2,r17,-48
   2105c:	30bff92e 	bgeu	r6,r2,21044 <__alt_data_end+0xfffe1044>
   21060:	2005c916 	blt	r4,zero,22788 <___vfprintf_internal_r+0x1bd8>
   21064:	d9002915 	stw	r4,164(sp)
   21068:	003f3306 	br	20d38 <__alt_data_end+0xfffe0d38>
   2106c:	94802014 	ori	r18,r18,128
   21070:	ac400007 	ldb	r17,0(r21)
   21074:	003f2f06 	br	20d34 <__alt_data_end+0xfffe0d34>
   21078:	a809883a 	mov	r4,r21
   2107c:	d8003115 	stw	zero,196(sp)
   21080:	88bff404 	addi	r2,r17,-48
   21084:	0017883a 	mov	r11,zero
   21088:	24400007 	ldb	r17,0(r4)
   2108c:	5ac002a4 	muli	r11,r11,10
   21090:	ad400044 	addi	r21,r21,1
   21094:	a809883a 	mov	r4,r21
   21098:	12d7883a 	add	r11,r2,r11
   2109c:	88bff404 	addi	r2,r17,-48
   210a0:	30bff92e 	bgeu	r6,r2,21088 <__alt_data_end+0xfffe1088>
   210a4:	dac03115 	stw	r11,196(sp)
   210a8:	003f2306 	br	20d38 <__alt_data_end+0xfffe0d38>
   210ac:	18c03fcc 	andi	r3,r3,255
   210b0:	18072b1e 	bne	r3,zero,22d60 <___vfprintf_internal_r+0x21b0>
   210b4:	94800414 	ori	r18,r18,16
   210b8:	9080080c 	andi	r2,r18,32
   210bc:	10037b26 	beq	r2,zero,21eac <___vfprintf_internal_r+0x12fc>
   210c0:	d9402d17 	ldw	r5,180(sp)
   210c4:	28800117 	ldw	r2,4(r5)
   210c8:	2cc00017 	ldw	r19,0(r5)
   210cc:	29400204 	addi	r5,r5,8
   210d0:	d9402d15 	stw	r5,180(sp)
   210d4:	102d883a 	mov	r22,r2
   210d8:	10044b16 	blt	r2,zero,22208 <___vfprintf_internal_r+0x1658>
   210dc:	d9402917 	ldw	r5,164(sp)
   210e0:	df002783 	ldbu	fp,158(sp)
   210e4:	2803bc16 	blt	r5,zero,21fd8 <___vfprintf_internal_r+0x1428>
   210e8:	00ffdfc4 	movi	r3,-129
   210ec:	9d84b03a 	or	r2,r19,r22
   210f0:	90e4703a 	and	r18,r18,r3
   210f4:	10017726 	beq	r2,zero,216d4 <___vfprintf_internal_r+0xb24>
   210f8:	b0038326 	beq	r22,zero,21f08 <___vfprintf_internal_r+0x1358>
   210fc:	dc402a15 	stw	r17,168(sp)
   21100:	dc001e04 	addi	r16,sp,120
   21104:	b023883a 	mov	r17,r22
   21108:	402d883a 	mov	r22,r8
   2110c:	9809883a 	mov	r4,r19
   21110:	880b883a 	mov	r5,r17
   21114:	01800284 	movi	r6,10
   21118:	000f883a 	mov	r7,zero
   2111c:	002a63c0 	call	2a63c <__umoddi3>
   21120:	10800c04 	addi	r2,r2,48
   21124:	843fffc4 	addi	r16,r16,-1
   21128:	9809883a 	mov	r4,r19
   2112c:	880b883a 	mov	r5,r17
   21130:	80800005 	stb	r2,0(r16)
   21134:	01800284 	movi	r6,10
   21138:	000f883a 	mov	r7,zero
   2113c:	002a0c40 	call	2a0c4 <__udivdi3>
   21140:	1027883a 	mov	r19,r2
   21144:	10c4b03a 	or	r2,r2,r3
   21148:	1823883a 	mov	r17,r3
   2114c:	103fef1e 	bne	r2,zero,2110c <__alt_data_end+0xfffe110c>
   21150:	d8c02817 	ldw	r3,160(sp)
   21154:	dc402a17 	ldw	r17,168(sp)
   21158:	b011883a 	mov	r8,r22
   2115c:	1c07c83a 	sub	r3,r3,r16
   21160:	d8c02e15 	stw	r3,184(sp)
   21164:	00005906 	br	212cc <___vfprintf_internal_r+0x71c>
   21168:	18c03fcc 	andi	r3,r3,255
   2116c:	1806fa1e 	bne	r3,zero,22d58 <___vfprintf_internal_r+0x21a8>
   21170:	9080020c 	andi	r2,r18,8
   21174:	10048a26 	beq	r2,zero,223a0 <___vfprintf_internal_r+0x17f0>
   21178:	d8c02d17 	ldw	r3,180(sp)
   2117c:	d9002d17 	ldw	r4,180(sp)
   21180:	d9402d17 	ldw	r5,180(sp)
   21184:	18c00017 	ldw	r3,0(r3)
   21188:	21000117 	ldw	r4,4(r4)
   2118c:	29400204 	addi	r5,r5,8
   21190:	d8c03615 	stw	r3,216(sp)
   21194:	d9003815 	stw	r4,224(sp)
   21198:	d9402d15 	stw	r5,180(sp)
   2119c:	d9003617 	ldw	r4,216(sp)
   211a0:	d9403817 	ldw	r5,224(sp)
   211a4:	da003d15 	stw	r8,244(sp)
   211a8:	04000044 	movi	r16,1
   211ac:	00272540 	call	27254 <__fpclassifyd>
   211b0:	da003d17 	ldw	r8,244(sp)
   211b4:	14041f1e 	bne	r2,r16,22234 <___vfprintf_internal_r+0x1684>
   211b8:	d9003617 	ldw	r4,216(sp)
   211bc:	d9403817 	ldw	r5,224(sp)
   211c0:	000d883a 	mov	r6,zero
   211c4:	000f883a 	mov	r7,zero
   211c8:	002be6c0 	call	2be6c <__ledf2>
   211cc:	da003d17 	ldw	r8,244(sp)
   211d0:	1005be16 	blt	r2,zero,228cc <___vfprintf_internal_r+0x1d1c>
   211d4:	df002783 	ldbu	fp,158(sp)
   211d8:	008011c4 	movi	r2,71
   211dc:	1445330e 	bge	r2,r17,226ac <___vfprintf_internal_r+0x1afc>
   211e0:	040000f4 	movhi	r16,3
   211e4:	843fb004 	addi	r16,r16,-320
   211e8:	00c000c4 	movi	r3,3
   211ec:	00bfdfc4 	movi	r2,-129
   211f0:	d8c02a15 	stw	r3,168(sp)
   211f4:	90a4703a 	and	r18,r18,r2
   211f8:	d8c02e15 	stw	r3,184(sp)
   211fc:	d8002915 	stw	zero,164(sp)
   21200:	d8003215 	stw	zero,200(sp)
   21204:	00003706 	br	212e4 <___vfprintf_internal_r+0x734>
   21208:	94800214 	ori	r18,r18,8
   2120c:	ac400007 	ldb	r17,0(r21)
   21210:	003ec806 	br	20d34 <__alt_data_end+0xfffe0d34>
   21214:	18c03fcc 	andi	r3,r3,255
   21218:	1806db1e 	bne	r3,zero,22d88 <___vfprintf_internal_r+0x21d8>
   2121c:	94800414 	ori	r18,r18,16
   21220:	9080080c 	andi	r2,r18,32
   21224:	1002d826 	beq	r2,zero,21d88 <___vfprintf_internal_r+0x11d8>
   21228:	d9402d17 	ldw	r5,180(sp)
   2122c:	d8c02917 	ldw	r3,164(sp)
   21230:	d8002785 	stb	zero,158(sp)
   21234:	28800204 	addi	r2,r5,8
   21238:	2cc00017 	ldw	r19,0(r5)
   2123c:	2d800117 	ldw	r22,4(r5)
   21240:	18048f16 	blt	r3,zero,22480 <___vfprintf_internal_r+0x18d0>
   21244:	013fdfc4 	movi	r4,-129
   21248:	9d86b03a 	or	r3,r19,r22
   2124c:	d8802d15 	stw	r2,180(sp)
   21250:	9124703a 	and	r18,r18,r4
   21254:	1802d91e 	bne	r3,zero,21dbc <___vfprintf_internal_r+0x120c>
   21258:	d8c02917 	ldw	r3,164(sp)
   2125c:	0039883a 	mov	fp,zero
   21260:	1805c326 	beq	r3,zero,22970 <___vfprintf_internal_r+0x1dc0>
   21264:	0027883a 	mov	r19,zero
   21268:	002d883a 	mov	r22,zero
   2126c:	dc001e04 	addi	r16,sp,120
   21270:	9806d0fa 	srli	r3,r19,3
   21274:	b008977a 	slli	r4,r22,29
   21278:	b02cd0fa 	srli	r22,r22,3
   2127c:	9cc001cc 	andi	r19,r19,7
   21280:	98800c04 	addi	r2,r19,48
   21284:	843fffc4 	addi	r16,r16,-1
   21288:	20e6b03a 	or	r19,r4,r3
   2128c:	80800005 	stb	r2,0(r16)
   21290:	9d86b03a 	or	r3,r19,r22
   21294:	183ff61e 	bne	r3,zero,21270 <__alt_data_end+0xfffe1270>
   21298:	90c0004c 	andi	r3,r18,1
   2129c:	18013b26 	beq	r3,zero,2178c <___vfprintf_internal_r+0xbdc>
   212a0:	10803fcc 	andi	r2,r2,255
   212a4:	1080201c 	xori	r2,r2,128
   212a8:	10bfe004 	addi	r2,r2,-128
   212ac:	00c00c04 	movi	r3,48
   212b0:	10c13626 	beq	r2,r3,2178c <___vfprintf_internal_r+0xbdc>
   212b4:	80ffffc5 	stb	r3,-1(r16)
   212b8:	d8c02817 	ldw	r3,160(sp)
   212bc:	80bfffc4 	addi	r2,r16,-1
   212c0:	1021883a 	mov	r16,r2
   212c4:	1887c83a 	sub	r3,r3,r2
   212c8:	d8c02e15 	stw	r3,184(sp)
   212cc:	d8802e17 	ldw	r2,184(sp)
   212d0:	d9002917 	ldw	r4,164(sp)
   212d4:	1100010e 	bge	r2,r4,212dc <___vfprintf_internal_r+0x72c>
   212d8:	2005883a 	mov	r2,r4
   212dc:	d8802a15 	stw	r2,168(sp)
   212e0:	d8003215 	stw	zero,200(sp)
   212e4:	e7003fcc 	andi	fp,fp,255
   212e8:	e700201c 	xori	fp,fp,128
   212ec:	e73fe004 	addi	fp,fp,-128
   212f0:	e0000326 	beq	fp,zero,21300 <___vfprintf_internal_r+0x750>
   212f4:	d8c02a17 	ldw	r3,168(sp)
   212f8:	18c00044 	addi	r3,r3,1
   212fc:	d8c02a15 	stw	r3,168(sp)
   21300:	90c0008c 	andi	r3,r18,2
   21304:	d8c02b15 	stw	r3,172(sp)
   21308:	18000326 	beq	r3,zero,21318 <___vfprintf_internal_r+0x768>
   2130c:	d8c02a17 	ldw	r3,168(sp)
   21310:	18c00084 	addi	r3,r3,2
   21314:	d8c02a15 	stw	r3,168(sp)
   21318:	90c0210c 	andi	r3,r18,132
   2131c:	d8c03015 	stw	r3,192(sp)
   21320:	1801a31e 	bne	r3,zero,219b0 <___vfprintf_internal_r+0xe00>
   21324:	d9003117 	ldw	r4,196(sp)
   21328:	d8c02a17 	ldw	r3,168(sp)
   2132c:	20e7c83a 	sub	r19,r4,r3
   21330:	04c19f0e 	bge	zero,r19,219b0 <___vfprintf_internal_r+0xe00>
   21334:	02400404 	movi	r9,16
   21338:	d8c02017 	ldw	r3,128(sp)
   2133c:	d8801f17 	ldw	r2,124(sp)
   21340:	4cc50d0e 	bge	r9,r19,22778 <___vfprintf_internal_r+0x1bc8>
   21344:	014000f4 	movhi	r5,3
   21348:	297fc384 	addi	r5,r5,-242
   2134c:	dc403b15 	stw	r17,236(sp)
   21350:	d9403515 	stw	r5,212(sp)
   21354:	9823883a 	mov	r17,r19
   21358:	482d883a 	mov	r22,r9
   2135c:	9027883a 	mov	r19,r18
   21360:	070001c4 	movi	fp,7
   21364:	8025883a 	mov	r18,r16
   21368:	dc002c17 	ldw	r16,176(sp)
   2136c:	00000306 	br	2137c <___vfprintf_internal_r+0x7cc>
   21370:	8c7ffc04 	addi	r17,r17,-16
   21374:	42000204 	addi	r8,r8,8
   21378:	b440130e 	bge	r22,r17,213c8 <___vfprintf_internal_r+0x818>
   2137c:	010000f4 	movhi	r4,3
   21380:	18c00404 	addi	r3,r3,16
   21384:	10800044 	addi	r2,r2,1
   21388:	213fc384 	addi	r4,r4,-242
   2138c:	41000015 	stw	r4,0(r8)
   21390:	45800115 	stw	r22,4(r8)
   21394:	d8c02015 	stw	r3,128(sp)
   21398:	d8801f15 	stw	r2,124(sp)
   2139c:	e0bff40e 	bge	fp,r2,21370 <__alt_data_end+0xfffe1370>
   213a0:	d9801e04 	addi	r6,sp,120
   213a4:	b80b883a 	mov	r5,r23
   213a8:	8009883a 	mov	r4,r16
   213ac:	00276c80 	call	276c8 <__sprint_r>
   213b0:	103f011e 	bne	r2,zero,20fb8 <__alt_data_end+0xfffe0fb8>
   213b4:	8c7ffc04 	addi	r17,r17,-16
   213b8:	d8c02017 	ldw	r3,128(sp)
   213bc:	d8801f17 	ldw	r2,124(sp)
   213c0:	da000404 	addi	r8,sp,16
   213c4:	b47fed16 	blt	r22,r17,2137c <__alt_data_end+0xfffe137c>
   213c8:	9021883a 	mov	r16,r18
   213cc:	9825883a 	mov	r18,r19
   213d0:	8827883a 	mov	r19,r17
   213d4:	dc403b17 	ldw	r17,236(sp)
   213d8:	d9403517 	ldw	r5,212(sp)
   213dc:	98c7883a 	add	r3,r19,r3
   213e0:	10800044 	addi	r2,r2,1
   213e4:	41400015 	stw	r5,0(r8)
   213e8:	44c00115 	stw	r19,4(r8)
   213ec:	d8c02015 	stw	r3,128(sp)
   213f0:	d8801f15 	stw	r2,124(sp)
   213f4:	010001c4 	movi	r4,7
   213f8:	2082a316 	blt	r4,r2,21e88 <___vfprintf_internal_r+0x12d8>
   213fc:	df002787 	ldb	fp,158(sp)
   21400:	42000204 	addi	r8,r8,8
   21404:	e0000c26 	beq	fp,zero,21438 <___vfprintf_internal_r+0x888>
   21408:	d8801f17 	ldw	r2,124(sp)
   2140c:	d9002784 	addi	r4,sp,158
   21410:	18c00044 	addi	r3,r3,1
   21414:	10800044 	addi	r2,r2,1
   21418:	41000015 	stw	r4,0(r8)
   2141c:	01000044 	movi	r4,1
   21420:	41000115 	stw	r4,4(r8)
   21424:	d8c02015 	stw	r3,128(sp)
   21428:	d8801f15 	stw	r2,124(sp)
   2142c:	010001c4 	movi	r4,7
   21430:	20823c16 	blt	r4,r2,21d24 <___vfprintf_internal_r+0x1174>
   21434:	42000204 	addi	r8,r8,8
   21438:	d8802b17 	ldw	r2,172(sp)
   2143c:	10000c26 	beq	r2,zero,21470 <___vfprintf_internal_r+0x8c0>
   21440:	d8801f17 	ldw	r2,124(sp)
   21444:	d9002704 	addi	r4,sp,156
   21448:	18c00084 	addi	r3,r3,2
   2144c:	10800044 	addi	r2,r2,1
   21450:	41000015 	stw	r4,0(r8)
   21454:	01000084 	movi	r4,2
   21458:	41000115 	stw	r4,4(r8)
   2145c:	d8c02015 	stw	r3,128(sp)
   21460:	d8801f15 	stw	r2,124(sp)
   21464:	010001c4 	movi	r4,7
   21468:	20823616 	blt	r4,r2,21d44 <___vfprintf_internal_r+0x1194>
   2146c:	42000204 	addi	r8,r8,8
   21470:	d9003017 	ldw	r4,192(sp)
   21474:	00802004 	movi	r2,128
   21478:	20819926 	beq	r4,r2,21ae0 <___vfprintf_internal_r+0xf30>
   2147c:	d9402917 	ldw	r5,164(sp)
   21480:	d8802e17 	ldw	r2,184(sp)
   21484:	28adc83a 	sub	r22,r5,r2
   21488:	0580310e 	bge	zero,r22,21550 <___vfprintf_internal_r+0x9a0>
   2148c:	07000404 	movi	fp,16
   21490:	d8801f17 	ldw	r2,124(sp)
   21494:	e584140e 	bge	fp,r22,224e8 <___vfprintf_internal_r+0x1938>
   21498:	014000f4 	movhi	r5,3
   2149c:	297fbf84 	addi	r5,r5,-258
   214a0:	dc402915 	stw	r17,164(sp)
   214a4:	d9402b15 	stw	r5,172(sp)
   214a8:	b023883a 	mov	r17,r22
   214ac:	04c001c4 	movi	r19,7
   214b0:	a82d883a 	mov	r22,r21
   214b4:	902b883a 	mov	r21,r18
   214b8:	8025883a 	mov	r18,r16
   214bc:	dc002c17 	ldw	r16,176(sp)
   214c0:	00000306 	br	214d0 <___vfprintf_internal_r+0x920>
   214c4:	8c7ffc04 	addi	r17,r17,-16
   214c8:	42000204 	addi	r8,r8,8
   214cc:	e440110e 	bge	fp,r17,21514 <___vfprintf_internal_r+0x964>
   214d0:	18c00404 	addi	r3,r3,16
   214d4:	10800044 	addi	r2,r2,1
   214d8:	45000015 	stw	r20,0(r8)
   214dc:	47000115 	stw	fp,4(r8)
   214e0:	d8c02015 	stw	r3,128(sp)
   214e4:	d8801f15 	stw	r2,124(sp)
   214e8:	98bff60e 	bge	r19,r2,214c4 <__alt_data_end+0xfffe14c4>
   214ec:	d9801e04 	addi	r6,sp,120
   214f0:	b80b883a 	mov	r5,r23
   214f4:	8009883a 	mov	r4,r16
   214f8:	00276c80 	call	276c8 <__sprint_r>
   214fc:	103eae1e 	bne	r2,zero,20fb8 <__alt_data_end+0xfffe0fb8>
   21500:	8c7ffc04 	addi	r17,r17,-16
   21504:	d8c02017 	ldw	r3,128(sp)
   21508:	d8801f17 	ldw	r2,124(sp)
   2150c:	da000404 	addi	r8,sp,16
   21510:	e47fef16 	blt	fp,r17,214d0 <__alt_data_end+0xfffe14d0>
   21514:	9021883a 	mov	r16,r18
   21518:	a825883a 	mov	r18,r21
   2151c:	b02b883a 	mov	r21,r22
   21520:	882d883a 	mov	r22,r17
   21524:	dc402917 	ldw	r17,164(sp)
   21528:	d9002b17 	ldw	r4,172(sp)
   2152c:	1d87883a 	add	r3,r3,r22
   21530:	10800044 	addi	r2,r2,1
   21534:	41000015 	stw	r4,0(r8)
   21538:	45800115 	stw	r22,4(r8)
   2153c:	d8c02015 	stw	r3,128(sp)
   21540:	d8801f15 	stw	r2,124(sp)
   21544:	010001c4 	movi	r4,7
   21548:	2081ee16 	blt	r4,r2,21d04 <___vfprintf_internal_r+0x1154>
   2154c:	42000204 	addi	r8,r8,8
   21550:	9080400c 	andi	r2,r18,256
   21554:	1001181e 	bne	r2,zero,219b8 <___vfprintf_internal_r+0xe08>
   21558:	d9402e17 	ldw	r5,184(sp)
   2155c:	d8801f17 	ldw	r2,124(sp)
   21560:	44000015 	stw	r16,0(r8)
   21564:	1947883a 	add	r3,r3,r5
   21568:	10800044 	addi	r2,r2,1
   2156c:	41400115 	stw	r5,4(r8)
   21570:	d8c02015 	stw	r3,128(sp)
   21574:	d8801f15 	stw	r2,124(sp)
   21578:	010001c4 	movi	r4,7
   2157c:	2081d316 	blt	r4,r2,21ccc <___vfprintf_internal_r+0x111c>
   21580:	42000204 	addi	r8,r8,8
   21584:	9480010c 	andi	r18,r18,4
   21588:	90003226 	beq	r18,zero,21654 <___vfprintf_internal_r+0xaa4>
   2158c:	d9403117 	ldw	r5,196(sp)
   21590:	d8802a17 	ldw	r2,168(sp)
   21594:	28a1c83a 	sub	r16,r5,r2
   21598:	04002e0e 	bge	zero,r16,21654 <___vfprintf_internal_r+0xaa4>
   2159c:	04400404 	movi	r17,16
   215a0:	d8801f17 	ldw	r2,124(sp)
   215a4:	8c04a20e 	bge	r17,r16,22830 <___vfprintf_internal_r+0x1c80>
   215a8:	014000f4 	movhi	r5,3
   215ac:	297fc384 	addi	r5,r5,-242
   215b0:	d9403515 	stw	r5,212(sp)
   215b4:	048001c4 	movi	r18,7
   215b8:	dcc02c17 	ldw	r19,176(sp)
   215bc:	00000306 	br	215cc <___vfprintf_internal_r+0xa1c>
   215c0:	843ffc04 	addi	r16,r16,-16
   215c4:	42000204 	addi	r8,r8,8
   215c8:	8c00130e 	bge	r17,r16,21618 <___vfprintf_internal_r+0xa68>
   215cc:	010000f4 	movhi	r4,3
   215d0:	18c00404 	addi	r3,r3,16
   215d4:	10800044 	addi	r2,r2,1
   215d8:	213fc384 	addi	r4,r4,-242
   215dc:	41000015 	stw	r4,0(r8)
   215e0:	44400115 	stw	r17,4(r8)
   215e4:	d8c02015 	stw	r3,128(sp)
   215e8:	d8801f15 	stw	r2,124(sp)
   215ec:	90bff40e 	bge	r18,r2,215c0 <__alt_data_end+0xfffe15c0>
   215f0:	d9801e04 	addi	r6,sp,120
   215f4:	b80b883a 	mov	r5,r23
   215f8:	9809883a 	mov	r4,r19
   215fc:	00276c80 	call	276c8 <__sprint_r>
   21600:	103e6d1e 	bne	r2,zero,20fb8 <__alt_data_end+0xfffe0fb8>
   21604:	843ffc04 	addi	r16,r16,-16
   21608:	d8c02017 	ldw	r3,128(sp)
   2160c:	d8801f17 	ldw	r2,124(sp)
   21610:	da000404 	addi	r8,sp,16
   21614:	8c3fed16 	blt	r17,r16,215cc <__alt_data_end+0xfffe15cc>
   21618:	d9403517 	ldw	r5,212(sp)
   2161c:	1c07883a 	add	r3,r3,r16
   21620:	10800044 	addi	r2,r2,1
   21624:	41400015 	stw	r5,0(r8)
   21628:	44000115 	stw	r16,4(r8)
   2162c:	d8c02015 	stw	r3,128(sp)
   21630:	d8801f15 	stw	r2,124(sp)
   21634:	010001c4 	movi	r4,7
   21638:	2080060e 	bge	r4,r2,21654 <___vfprintf_internal_r+0xaa4>
   2163c:	d9002c17 	ldw	r4,176(sp)
   21640:	d9801e04 	addi	r6,sp,120
   21644:	b80b883a 	mov	r5,r23
   21648:	00276c80 	call	276c8 <__sprint_r>
   2164c:	103e5a1e 	bne	r2,zero,20fb8 <__alt_data_end+0xfffe0fb8>
   21650:	d8c02017 	ldw	r3,128(sp)
   21654:	d8803117 	ldw	r2,196(sp)
   21658:	d9002a17 	ldw	r4,168(sp)
   2165c:	1100010e 	bge	r2,r4,21664 <___vfprintf_internal_r+0xab4>
   21660:	2005883a 	mov	r2,r4
   21664:	d9402f17 	ldw	r5,188(sp)
   21668:	288b883a 	add	r5,r5,r2
   2166c:	d9402f15 	stw	r5,188(sp)
   21670:	18019e1e 	bne	r3,zero,21cec <___vfprintf_internal_r+0x113c>
   21674:	a8800007 	ldb	r2,0(r21)
   21678:	d8001f15 	stw	zero,124(sp)
   2167c:	da000404 	addi	r8,sp,16
   21680:	103d851e 	bne	r2,zero,20c98 <__alt_data_end+0xfffe0c98>
   21684:	a821883a 	mov	r16,r21
   21688:	003d9b06 	br	20cf8 <__alt_data_end+0xfffe0cf8>
   2168c:	18c03fcc 	andi	r3,r3,255
   21690:	1805c11e 	bne	r3,zero,22d98 <___vfprintf_internal_r+0x21e8>
   21694:	94800414 	ori	r18,r18,16
   21698:	9080080c 	andi	r2,r18,32
   2169c:	10020c26 	beq	r2,zero,21ed0 <___vfprintf_internal_r+0x1320>
   216a0:	d8802d17 	ldw	r2,180(sp)
   216a4:	d9002917 	ldw	r4,164(sp)
   216a8:	d8002785 	stb	zero,158(sp)
   216ac:	10c00204 	addi	r3,r2,8
   216b0:	14c00017 	ldw	r19,0(r2)
   216b4:	15800117 	ldw	r22,4(r2)
   216b8:	20040f16 	blt	r4,zero,226f8 <___vfprintf_internal_r+0x1b48>
   216bc:	013fdfc4 	movi	r4,-129
   216c0:	9d84b03a 	or	r2,r19,r22
   216c4:	d8c02d15 	stw	r3,180(sp)
   216c8:	9124703a 	and	r18,r18,r4
   216cc:	0039883a 	mov	fp,zero
   216d0:	103e891e 	bne	r2,zero,210f8 <__alt_data_end+0xfffe10f8>
   216d4:	d9002917 	ldw	r4,164(sp)
   216d8:	2002c11e 	bne	r4,zero,221e0 <___vfprintf_internal_r+0x1630>
   216dc:	d8002915 	stw	zero,164(sp)
   216e0:	d8002e15 	stw	zero,184(sp)
   216e4:	dc001e04 	addi	r16,sp,120
   216e8:	003ef806 	br	212cc <__alt_data_end+0xfffe12cc>
   216ec:	18c03fcc 	andi	r3,r3,255
   216f0:	18059d1e 	bne	r3,zero,22d68 <___vfprintf_internal_r+0x21b8>
   216f4:	014000f4 	movhi	r5,3
   216f8:	297fb304 	addi	r5,r5,-308
   216fc:	d9403915 	stw	r5,228(sp)
   21700:	9080080c 	andi	r2,r18,32
   21704:	10005226 	beq	r2,zero,21850 <___vfprintf_internal_r+0xca0>
   21708:	d8802d17 	ldw	r2,180(sp)
   2170c:	14c00017 	ldw	r19,0(r2)
   21710:	15800117 	ldw	r22,4(r2)
   21714:	10800204 	addi	r2,r2,8
   21718:	d8802d15 	stw	r2,180(sp)
   2171c:	9080004c 	andi	r2,r18,1
   21720:	10019026 	beq	r2,zero,21d64 <___vfprintf_internal_r+0x11b4>
   21724:	9d84b03a 	or	r2,r19,r22
   21728:	10036926 	beq	r2,zero,224d0 <___vfprintf_internal_r+0x1920>
   2172c:	d8c02917 	ldw	r3,164(sp)
   21730:	00800c04 	movi	r2,48
   21734:	d8802705 	stb	r2,156(sp)
   21738:	dc402745 	stb	r17,157(sp)
   2173c:	d8002785 	stb	zero,158(sp)
   21740:	90800094 	ori	r2,r18,2
   21744:	18045d16 	blt	r3,zero,228bc <___vfprintf_internal_r+0x1d0c>
   21748:	00bfdfc4 	movi	r2,-129
   2174c:	90a4703a 	and	r18,r18,r2
   21750:	94800094 	ori	r18,r18,2
   21754:	0039883a 	mov	fp,zero
   21758:	d9003917 	ldw	r4,228(sp)
   2175c:	dc001e04 	addi	r16,sp,120
   21760:	988003cc 	andi	r2,r19,15
   21764:	b006973a 	slli	r3,r22,28
   21768:	2085883a 	add	r2,r4,r2
   2176c:	9826d13a 	srli	r19,r19,4
   21770:	10800003 	ldbu	r2,0(r2)
   21774:	b02cd13a 	srli	r22,r22,4
   21778:	843fffc4 	addi	r16,r16,-1
   2177c:	1ce6b03a 	or	r19,r3,r19
   21780:	80800005 	stb	r2,0(r16)
   21784:	9d84b03a 	or	r2,r19,r22
   21788:	103ff51e 	bne	r2,zero,21760 <__alt_data_end+0xfffe1760>
   2178c:	d8c02817 	ldw	r3,160(sp)
   21790:	1c07c83a 	sub	r3,r3,r16
   21794:	d8c02e15 	stw	r3,184(sp)
   21798:	003ecc06 	br	212cc <__alt_data_end+0xfffe12cc>
   2179c:	18c03fcc 	andi	r3,r3,255
   217a0:	183e9f26 	beq	r3,zero,21220 <__alt_data_end+0xfffe1220>
   217a4:	d9c02785 	stb	r7,158(sp)
   217a8:	003e9d06 	br	21220 <__alt_data_end+0xfffe1220>
   217ac:	00c00044 	movi	r3,1
   217b0:	01c00ac4 	movi	r7,43
   217b4:	ac400007 	ldb	r17,0(r21)
   217b8:	003d5e06 	br	20d34 <__alt_data_end+0xfffe0d34>
   217bc:	94800814 	ori	r18,r18,32
   217c0:	ac400007 	ldb	r17,0(r21)
   217c4:	003d5b06 	br	20d34 <__alt_data_end+0xfffe0d34>
   217c8:	d8c02d17 	ldw	r3,180(sp)
   217cc:	d8002785 	stb	zero,158(sp)
   217d0:	1c000017 	ldw	r16,0(r3)
   217d4:	1cc00104 	addi	r19,r3,4
   217d8:	80041926 	beq	r16,zero,22840 <___vfprintf_internal_r+0x1c90>
   217dc:	d9002917 	ldw	r4,164(sp)
   217e0:	2003d016 	blt	r4,zero,22724 <___vfprintf_internal_r+0x1b74>
   217e4:	200d883a 	mov	r6,r4
   217e8:	000b883a 	mov	r5,zero
   217ec:	8009883a 	mov	r4,r16
   217f0:	da003d15 	stw	r8,244(sp)
   217f4:	0025f040 	call	25f04 <memchr>
   217f8:	da003d17 	ldw	r8,244(sp)
   217fc:	10045426 	beq	r2,zero,22950 <___vfprintf_internal_r+0x1da0>
   21800:	1405c83a 	sub	r2,r2,r16
   21804:	d8802e15 	stw	r2,184(sp)
   21808:	1003cc16 	blt	r2,zero,2273c <___vfprintf_internal_r+0x1b8c>
   2180c:	df002783 	ldbu	fp,158(sp)
   21810:	d8802a15 	stw	r2,168(sp)
   21814:	dcc02d15 	stw	r19,180(sp)
   21818:	d8002915 	stw	zero,164(sp)
   2181c:	d8003215 	stw	zero,200(sp)
   21820:	003eb006 	br	212e4 <__alt_data_end+0xfffe12e4>
   21824:	18c03fcc 	andi	r3,r3,255
   21828:	183f9b26 	beq	r3,zero,21698 <__alt_data_end+0xfffe1698>
   2182c:	d9c02785 	stb	r7,158(sp)
   21830:	003f9906 	br	21698 <__alt_data_end+0xfffe1698>
   21834:	18c03fcc 	andi	r3,r3,255
   21838:	1805551e 	bne	r3,zero,22d90 <___vfprintf_internal_r+0x21e0>
   2183c:	014000f4 	movhi	r5,3
   21840:	297fb804 	addi	r5,r5,-288
   21844:	d9403915 	stw	r5,228(sp)
   21848:	9080080c 	andi	r2,r18,32
   2184c:	103fae1e 	bne	r2,zero,21708 <__alt_data_end+0xfffe1708>
   21850:	9080040c 	andi	r2,r18,16
   21854:	1002de26 	beq	r2,zero,223d0 <___vfprintf_internal_r+0x1820>
   21858:	d8c02d17 	ldw	r3,180(sp)
   2185c:	002d883a 	mov	r22,zero
   21860:	1cc00017 	ldw	r19,0(r3)
   21864:	18c00104 	addi	r3,r3,4
   21868:	d8c02d15 	stw	r3,180(sp)
   2186c:	003fab06 	br	2171c <__alt_data_end+0xfffe171c>
   21870:	38803fcc 	andi	r2,r7,255
   21874:	1080201c 	xori	r2,r2,128
   21878:	10bfe004 	addi	r2,r2,-128
   2187c:	1002d21e 	bne	r2,zero,223c8 <___vfprintf_internal_r+0x1818>
   21880:	00c00044 	movi	r3,1
   21884:	01c00804 	movi	r7,32
   21888:	ac400007 	ldb	r17,0(r21)
   2188c:	003d2906 	br	20d34 <__alt_data_end+0xfffe0d34>
   21890:	94800054 	ori	r18,r18,1
   21894:	ac400007 	ldb	r17,0(r21)
   21898:	003d2606 	br	20d34 <__alt_data_end+0xfffe0d34>
   2189c:	18c03fcc 	andi	r3,r3,255
   218a0:	183e0526 	beq	r3,zero,210b8 <__alt_data_end+0xfffe10b8>
   218a4:	d9c02785 	stb	r7,158(sp)
   218a8:	003e0306 	br	210b8 <__alt_data_end+0xfffe10b8>
   218ac:	94801014 	ori	r18,r18,64
   218b0:	ac400007 	ldb	r17,0(r21)
   218b4:	003d1f06 	br	20d34 <__alt_data_end+0xfffe0d34>
   218b8:	ac400007 	ldb	r17,0(r21)
   218bc:	8a438726 	beq	r17,r9,226dc <___vfprintf_internal_r+0x1b2c>
   218c0:	94800414 	ori	r18,r18,16
   218c4:	003d1b06 	br	20d34 <__alt_data_end+0xfffe0d34>
   218c8:	18c03fcc 	andi	r3,r3,255
   218cc:	1805341e 	bne	r3,zero,22da0 <___vfprintf_internal_r+0x21f0>
   218d0:	9080080c 	andi	r2,r18,32
   218d4:	1002cd26 	beq	r2,zero,2240c <___vfprintf_internal_r+0x185c>
   218d8:	d9402d17 	ldw	r5,180(sp)
   218dc:	d9002f17 	ldw	r4,188(sp)
   218e0:	28800017 	ldw	r2,0(r5)
   218e4:	2007d7fa 	srai	r3,r4,31
   218e8:	29400104 	addi	r5,r5,4
   218ec:	d9402d15 	stw	r5,180(sp)
   218f0:	11000015 	stw	r4,0(r2)
   218f4:	10c00115 	stw	r3,4(r2)
   218f8:	003ce506 	br	20c90 <__alt_data_end+0xfffe0c90>
   218fc:	d8c02d17 	ldw	r3,180(sp)
   21900:	d9002d17 	ldw	r4,180(sp)
   21904:	d8002785 	stb	zero,158(sp)
   21908:	18800017 	ldw	r2,0(r3)
   2190c:	21000104 	addi	r4,r4,4
   21910:	00c00044 	movi	r3,1
   21914:	d8c02a15 	stw	r3,168(sp)
   21918:	d8801405 	stb	r2,80(sp)
   2191c:	d9002d15 	stw	r4,180(sp)
   21920:	d8c02e15 	stw	r3,184(sp)
   21924:	d8002915 	stw	zero,164(sp)
   21928:	d8003215 	stw	zero,200(sp)
   2192c:	dc001404 	addi	r16,sp,80
   21930:	0039883a 	mov	fp,zero
   21934:	003e7206 	br	21300 <__alt_data_end+0xfffe1300>
   21938:	010000f4 	movhi	r4,3
   2193c:	213fb804 	addi	r4,r4,-288
   21940:	0039883a 	mov	fp,zero
   21944:	d9003915 	stw	r4,228(sp)
   21948:	04401e04 	movi	r17,120
   2194c:	003f8206 	br	21758 <__alt_data_end+0xfffe1758>
   21950:	18c03fcc 	andi	r3,r3,255
   21954:	1805061e 	bne	r3,zero,22d70 <___vfprintf_internal_r+0x21c0>
   21958:	883d9126 	beq	r17,zero,20fa0 <__alt_data_end+0xfffe0fa0>
   2195c:	00c00044 	movi	r3,1
   21960:	d8c02a15 	stw	r3,168(sp)
   21964:	dc401405 	stb	r17,80(sp)
   21968:	d8002785 	stb	zero,158(sp)
   2196c:	003fec06 	br	21920 <__alt_data_end+0xfffe1920>
   21970:	014000f4 	movhi	r5,3
   21974:	297fb804 	addi	r5,r5,-288
   21978:	d9403915 	stw	r5,228(sp)
   2197c:	d8c02d15 	stw	r3,180(sp)
   21980:	1025883a 	mov	r18,r2
   21984:	04401e04 	movi	r17,120
   21988:	9d84b03a 	or	r2,r19,r22
   2198c:	1000fc1e 	bne	r2,zero,21d80 <___vfprintf_internal_r+0x11d0>
   21990:	0039883a 	mov	fp,zero
   21994:	00800084 	movi	r2,2
   21998:	10803fcc 	andi	r2,r2,255
   2199c:	00c00044 	movi	r3,1
   219a0:	10c20f26 	beq	r2,r3,221e0 <___vfprintf_internal_r+0x1630>
   219a4:	00c00084 	movi	r3,2
   219a8:	10fd6326 	beq	r2,r3,20f38 <__alt_data_end+0xfffe0f38>
   219ac:	003e2d06 	br	21264 <__alt_data_end+0xfffe1264>
   219b0:	d8c02017 	ldw	r3,128(sp)
   219b4:	003e9306 	br	21404 <__alt_data_end+0xfffe1404>
   219b8:	00801944 	movi	r2,101
   219bc:	14407e0e 	bge	r2,r17,21bb8 <___vfprintf_internal_r+0x1008>
   219c0:	d9003617 	ldw	r4,216(sp)
   219c4:	d9403817 	ldw	r5,224(sp)
   219c8:	000d883a 	mov	r6,zero
   219cc:	000f883a 	mov	r7,zero
   219d0:	d8c03c15 	stw	r3,240(sp)
   219d4:	da003d15 	stw	r8,244(sp)
   219d8:	002bd080 	call	2bd08 <__eqdf2>
   219dc:	d8c03c17 	ldw	r3,240(sp)
   219e0:	da003d17 	ldw	r8,244(sp)
   219e4:	1000f71e 	bne	r2,zero,21dc4 <___vfprintf_internal_r+0x1214>
   219e8:	d8801f17 	ldw	r2,124(sp)
   219ec:	010000f4 	movhi	r4,3
   219f0:	213fbf04 	addi	r4,r4,-260
   219f4:	18c00044 	addi	r3,r3,1
   219f8:	10800044 	addi	r2,r2,1
   219fc:	41000015 	stw	r4,0(r8)
   21a00:	01000044 	movi	r4,1
   21a04:	41000115 	stw	r4,4(r8)
   21a08:	d8c02015 	stw	r3,128(sp)
   21a0c:	d8801f15 	stw	r2,124(sp)
   21a10:	010001c4 	movi	r4,7
   21a14:	2082b816 	blt	r4,r2,224f8 <___vfprintf_internal_r+0x1948>
   21a18:	42000204 	addi	r8,r8,8
   21a1c:	d8802617 	ldw	r2,152(sp)
   21a20:	d9403317 	ldw	r5,204(sp)
   21a24:	11400216 	blt	r2,r5,21a30 <___vfprintf_internal_r+0xe80>
   21a28:	9080004c 	andi	r2,r18,1
   21a2c:	103ed526 	beq	r2,zero,21584 <__alt_data_end+0xfffe1584>
   21a30:	d8803717 	ldw	r2,220(sp)
   21a34:	d9003417 	ldw	r4,208(sp)
   21a38:	d9403717 	ldw	r5,220(sp)
   21a3c:	1887883a 	add	r3,r3,r2
   21a40:	d8801f17 	ldw	r2,124(sp)
   21a44:	41000015 	stw	r4,0(r8)
   21a48:	41400115 	stw	r5,4(r8)
   21a4c:	10800044 	addi	r2,r2,1
   21a50:	d8c02015 	stw	r3,128(sp)
   21a54:	d8801f15 	stw	r2,124(sp)
   21a58:	010001c4 	movi	r4,7
   21a5c:	20832916 	blt	r4,r2,22704 <___vfprintf_internal_r+0x1b54>
   21a60:	42000204 	addi	r8,r8,8
   21a64:	d8803317 	ldw	r2,204(sp)
   21a68:	143fffc4 	addi	r16,r2,-1
   21a6c:	043ec50e 	bge	zero,r16,21584 <__alt_data_end+0xfffe1584>
   21a70:	04400404 	movi	r17,16
   21a74:	d8801f17 	ldw	r2,124(sp)
   21a78:	8c00880e 	bge	r17,r16,21c9c <___vfprintf_internal_r+0x10ec>
   21a7c:	014000f4 	movhi	r5,3
   21a80:	297fbf84 	addi	r5,r5,-258
   21a84:	d9402b15 	stw	r5,172(sp)
   21a88:	058001c4 	movi	r22,7
   21a8c:	dcc02c17 	ldw	r19,176(sp)
   21a90:	00000306 	br	21aa0 <___vfprintf_internal_r+0xef0>
   21a94:	42000204 	addi	r8,r8,8
   21a98:	843ffc04 	addi	r16,r16,-16
   21a9c:	8c00820e 	bge	r17,r16,21ca8 <___vfprintf_internal_r+0x10f8>
   21aa0:	18c00404 	addi	r3,r3,16
   21aa4:	10800044 	addi	r2,r2,1
   21aa8:	45000015 	stw	r20,0(r8)
   21aac:	44400115 	stw	r17,4(r8)
   21ab0:	d8c02015 	stw	r3,128(sp)
   21ab4:	d8801f15 	stw	r2,124(sp)
   21ab8:	b0bff60e 	bge	r22,r2,21a94 <__alt_data_end+0xfffe1a94>
   21abc:	d9801e04 	addi	r6,sp,120
   21ac0:	b80b883a 	mov	r5,r23
   21ac4:	9809883a 	mov	r4,r19
   21ac8:	00276c80 	call	276c8 <__sprint_r>
   21acc:	103d3a1e 	bne	r2,zero,20fb8 <__alt_data_end+0xfffe0fb8>
   21ad0:	d8c02017 	ldw	r3,128(sp)
   21ad4:	d8801f17 	ldw	r2,124(sp)
   21ad8:	da000404 	addi	r8,sp,16
   21adc:	003fee06 	br	21a98 <__alt_data_end+0xfffe1a98>
   21ae0:	d9403117 	ldw	r5,196(sp)
   21ae4:	d8802a17 	ldw	r2,168(sp)
   21ae8:	28adc83a 	sub	r22,r5,r2
   21aec:	05be630e 	bge	zero,r22,2147c <__alt_data_end+0xfffe147c>
   21af0:	07000404 	movi	fp,16
   21af4:	d8801f17 	ldw	r2,124(sp)
   21af8:	e5838f0e 	bge	fp,r22,22938 <___vfprintf_internal_r+0x1d88>
   21afc:	014000f4 	movhi	r5,3
   21b00:	297fbf84 	addi	r5,r5,-258
   21b04:	dc403015 	stw	r17,192(sp)
   21b08:	d9402b15 	stw	r5,172(sp)
   21b0c:	b023883a 	mov	r17,r22
   21b10:	04c001c4 	movi	r19,7
   21b14:	a82d883a 	mov	r22,r21
   21b18:	902b883a 	mov	r21,r18
   21b1c:	8025883a 	mov	r18,r16
   21b20:	dc002c17 	ldw	r16,176(sp)
   21b24:	00000306 	br	21b34 <___vfprintf_internal_r+0xf84>
   21b28:	8c7ffc04 	addi	r17,r17,-16
   21b2c:	42000204 	addi	r8,r8,8
   21b30:	e440110e 	bge	fp,r17,21b78 <___vfprintf_internal_r+0xfc8>
   21b34:	18c00404 	addi	r3,r3,16
   21b38:	10800044 	addi	r2,r2,1
   21b3c:	45000015 	stw	r20,0(r8)
   21b40:	47000115 	stw	fp,4(r8)
   21b44:	d8c02015 	stw	r3,128(sp)
   21b48:	d8801f15 	stw	r2,124(sp)
   21b4c:	98bff60e 	bge	r19,r2,21b28 <__alt_data_end+0xfffe1b28>
   21b50:	d9801e04 	addi	r6,sp,120
   21b54:	b80b883a 	mov	r5,r23
   21b58:	8009883a 	mov	r4,r16
   21b5c:	00276c80 	call	276c8 <__sprint_r>
   21b60:	103d151e 	bne	r2,zero,20fb8 <__alt_data_end+0xfffe0fb8>
   21b64:	8c7ffc04 	addi	r17,r17,-16
   21b68:	d8c02017 	ldw	r3,128(sp)
   21b6c:	d8801f17 	ldw	r2,124(sp)
   21b70:	da000404 	addi	r8,sp,16
   21b74:	e47fef16 	blt	fp,r17,21b34 <__alt_data_end+0xfffe1b34>
   21b78:	9021883a 	mov	r16,r18
   21b7c:	a825883a 	mov	r18,r21
   21b80:	b02b883a 	mov	r21,r22
   21b84:	882d883a 	mov	r22,r17
   21b88:	dc403017 	ldw	r17,192(sp)
   21b8c:	d9002b17 	ldw	r4,172(sp)
   21b90:	1d87883a 	add	r3,r3,r22
   21b94:	10800044 	addi	r2,r2,1
   21b98:	41000015 	stw	r4,0(r8)
   21b9c:	45800115 	stw	r22,4(r8)
   21ba0:	d8c02015 	stw	r3,128(sp)
   21ba4:	d8801f15 	stw	r2,124(sp)
   21ba8:	010001c4 	movi	r4,7
   21bac:	20818e16 	blt	r4,r2,221e8 <___vfprintf_internal_r+0x1638>
   21bb0:	42000204 	addi	r8,r8,8
   21bb4:	003e3106 	br	2147c <__alt_data_end+0xfffe147c>
   21bb8:	d9403317 	ldw	r5,204(sp)
   21bbc:	00800044 	movi	r2,1
   21bc0:	18c00044 	addi	r3,r3,1
   21bc4:	1141530e 	bge	r2,r5,22114 <___vfprintf_internal_r+0x1564>
   21bc8:	dc401f17 	ldw	r17,124(sp)
   21bcc:	00800044 	movi	r2,1
   21bd0:	40800115 	stw	r2,4(r8)
   21bd4:	8c400044 	addi	r17,r17,1
   21bd8:	44000015 	stw	r16,0(r8)
   21bdc:	d8c02015 	stw	r3,128(sp)
   21be0:	dc401f15 	stw	r17,124(sp)
   21be4:	008001c4 	movi	r2,7
   21be8:	14416b16 	blt	r2,r17,22198 <___vfprintf_internal_r+0x15e8>
   21bec:	42000204 	addi	r8,r8,8
   21bf0:	d8803717 	ldw	r2,220(sp)
   21bf4:	d9003417 	ldw	r4,208(sp)
   21bf8:	8c400044 	addi	r17,r17,1
   21bfc:	10c7883a 	add	r3,r2,r3
   21c00:	40800115 	stw	r2,4(r8)
   21c04:	41000015 	stw	r4,0(r8)
   21c08:	d8c02015 	stw	r3,128(sp)
   21c0c:	dc401f15 	stw	r17,124(sp)
   21c10:	008001c4 	movi	r2,7
   21c14:	14416916 	blt	r2,r17,221bc <___vfprintf_internal_r+0x160c>
   21c18:	45800204 	addi	r22,r8,8
   21c1c:	d9003617 	ldw	r4,216(sp)
   21c20:	d9403817 	ldw	r5,224(sp)
   21c24:	000d883a 	mov	r6,zero
   21c28:	000f883a 	mov	r7,zero
   21c2c:	d8c03c15 	stw	r3,240(sp)
   21c30:	002bd080 	call	2bd08 <__eqdf2>
   21c34:	d8c03c17 	ldw	r3,240(sp)
   21c38:	1000bc26 	beq	r2,zero,21f2c <___vfprintf_internal_r+0x137c>
   21c3c:	d9403317 	ldw	r5,204(sp)
   21c40:	84000044 	addi	r16,r16,1
   21c44:	8c400044 	addi	r17,r17,1
   21c48:	28bfffc4 	addi	r2,r5,-1
   21c4c:	1887883a 	add	r3,r3,r2
   21c50:	b0800115 	stw	r2,4(r22)
   21c54:	b4000015 	stw	r16,0(r22)
   21c58:	d8c02015 	stw	r3,128(sp)
   21c5c:	dc401f15 	stw	r17,124(sp)
   21c60:	008001c4 	movi	r2,7
   21c64:	14414316 	blt	r2,r17,22174 <___vfprintf_internal_r+0x15c4>
   21c68:	b5800204 	addi	r22,r22,8
   21c6c:	d9003a17 	ldw	r4,232(sp)
   21c70:	df0022c4 	addi	fp,sp,139
   21c74:	8c400044 	addi	r17,r17,1
   21c78:	20c7883a 	add	r3,r4,r3
   21c7c:	b7000015 	stw	fp,0(r22)
   21c80:	b1000115 	stw	r4,4(r22)
   21c84:	d8c02015 	stw	r3,128(sp)
   21c88:	dc401f15 	stw	r17,124(sp)
   21c8c:	008001c4 	movi	r2,7
   21c90:	14400e16 	blt	r2,r17,21ccc <___vfprintf_internal_r+0x111c>
   21c94:	b2000204 	addi	r8,r22,8
   21c98:	003e3a06 	br	21584 <__alt_data_end+0xfffe1584>
   21c9c:	010000f4 	movhi	r4,3
   21ca0:	213fbf84 	addi	r4,r4,-258
   21ca4:	d9002b15 	stw	r4,172(sp)
   21ca8:	d9002b17 	ldw	r4,172(sp)
   21cac:	1c07883a 	add	r3,r3,r16
   21cb0:	44000115 	stw	r16,4(r8)
   21cb4:	41000015 	stw	r4,0(r8)
   21cb8:	10800044 	addi	r2,r2,1
   21cbc:	d8c02015 	stw	r3,128(sp)
   21cc0:	d8801f15 	stw	r2,124(sp)
   21cc4:	010001c4 	movi	r4,7
   21cc8:	20be2d0e 	bge	r4,r2,21580 <__alt_data_end+0xfffe1580>
   21ccc:	d9002c17 	ldw	r4,176(sp)
   21cd0:	d9801e04 	addi	r6,sp,120
   21cd4:	b80b883a 	mov	r5,r23
   21cd8:	00276c80 	call	276c8 <__sprint_r>
   21cdc:	103cb61e 	bne	r2,zero,20fb8 <__alt_data_end+0xfffe0fb8>
   21ce0:	d8c02017 	ldw	r3,128(sp)
   21ce4:	da000404 	addi	r8,sp,16
   21ce8:	003e2606 	br	21584 <__alt_data_end+0xfffe1584>
   21cec:	d9002c17 	ldw	r4,176(sp)
   21cf0:	d9801e04 	addi	r6,sp,120
   21cf4:	b80b883a 	mov	r5,r23
   21cf8:	00276c80 	call	276c8 <__sprint_r>
   21cfc:	103e5d26 	beq	r2,zero,21674 <__alt_data_end+0xfffe1674>
   21d00:	003cad06 	br	20fb8 <__alt_data_end+0xfffe0fb8>
   21d04:	d9002c17 	ldw	r4,176(sp)
   21d08:	d9801e04 	addi	r6,sp,120
   21d0c:	b80b883a 	mov	r5,r23
   21d10:	00276c80 	call	276c8 <__sprint_r>
   21d14:	103ca81e 	bne	r2,zero,20fb8 <__alt_data_end+0xfffe0fb8>
   21d18:	d8c02017 	ldw	r3,128(sp)
   21d1c:	da000404 	addi	r8,sp,16
   21d20:	003e0b06 	br	21550 <__alt_data_end+0xfffe1550>
   21d24:	d9002c17 	ldw	r4,176(sp)
   21d28:	d9801e04 	addi	r6,sp,120
   21d2c:	b80b883a 	mov	r5,r23
   21d30:	00276c80 	call	276c8 <__sprint_r>
   21d34:	103ca01e 	bne	r2,zero,20fb8 <__alt_data_end+0xfffe0fb8>
   21d38:	d8c02017 	ldw	r3,128(sp)
   21d3c:	da000404 	addi	r8,sp,16
   21d40:	003dbd06 	br	21438 <__alt_data_end+0xfffe1438>
   21d44:	d9002c17 	ldw	r4,176(sp)
   21d48:	d9801e04 	addi	r6,sp,120
   21d4c:	b80b883a 	mov	r5,r23
   21d50:	00276c80 	call	276c8 <__sprint_r>
   21d54:	103c981e 	bne	r2,zero,20fb8 <__alt_data_end+0xfffe0fb8>
   21d58:	d8c02017 	ldw	r3,128(sp)
   21d5c:	da000404 	addi	r8,sp,16
   21d60:	003dc306 	br	21470 <__alt_data_end+0xfffe1470>
   21d64:	d8802917 	ldw	r2,164(sp)
   21d68:	d8002785 	stb	zero,158(sp)
   21d6c:	103f0616 	blt	r2,zero,21988 <__alt_data_end+0xfffe1988>
   21d70:	00ffdfc4 	movi	r3,-129
   21d74:	9d84b03a 	or	r2,r19,r22
   21d78:	90e4703a 	and	r18,r18,r3
   21d7c:	103c6b26 	beq	r2,zero,20f2c <__alt_data_end+0xfffe0f2c>
   21d80:	0039883a 	mov	fp,zero
   21d84:	003e7406 	br	21758 <__alt_data_end+0xfffe1758>
   21d88:	9080040c 	andi	r2,r18,16
   21d8c:	1001b326 	beq	r2,zero,2245c <___vfprintf_internal_r+0x18ac>
   21d90:	d9002d17 	ldw	r4,180(sp)
   21d94:	d9402917 	ldw	r5,164(sp)
   21d98:	d8002785 	stb	zero,158(sp)
   21d9c:	20800104 	addi	r2,r4,4
   21da0:	24c00017 	ldw	r19,0(r4)
   21da4:	002d883a 	mov	r22,zero
   21da8:	2801b516 	blt	r5,zero,22480 <___vfprintf_internal_r+0x18d0>
   21dac:	00ffdfc4 	movi	r3,-129
   21db0:	d8802d15 	stw	r2,180(sp)
   21db4:	90e4703a 	and	r18,r18,r3
   21db8:	983d2726 	beq	r19,zero,21258 <__alt_data_end+0xfffe1258>
   21dbc:	0039883a 	mov	fp,zero
   21dc0:	003d2a06 	br	2126c <__alt_data_end+0xfffe126c>
   21dc4:	dc402617 	ldw	r17,152(sp)
   21dc8:	0441d30e 	bge	zero,r17,22518 <___vfprintf_internal_r+0x1968>
   21dcc:	dc403217 	ldw	r17,200(sp)
   21dd0:	d8803317 	ldw	r2,204(sp)
   21dd4:	1440010e 	bge	r2,r17,21ddc <___vfprintf_internal_r+0x122c>
   21dd8:	1023883a 	mov	r17,r2
   21ddc:	04400a0e 	bge	zero,r17,21e08 <___vfprintf_internal_r+0x1258>
   21de0:	d8801f17 	ldw	r2,124(sp)
   21de4:	1c47883a 	add	r3,r3,r17
   21de8:	44000015 	stw	r16,0(r8)
   21dec:	10800044 	addi	r2,r2,1
   21df0:	44400115 	stw	r17,4(r8)
   21df4:	d8c02015 	stw	r3,128(sp)
   21df8:	d8801f15 	stw	r2,124(sp)
   21dfc:	010001c4 	movi	r4,7
   21e00:	20826516 	blt	r4,r2,22798 <___vfprintf_internal_r+0x1be8>
   21e04:	42000204 	addi	r8,r8,8
   21e08:	88026116 	blt	r17,zero,22790 <___vfprintf_internal_r+0x1be0>
   21e0c:	d9003217 	ldw	r4,200(sp)
   21e10:	2463c83a 	sub	r17,r4,r17
   21e14:	04407b0e 	bge	zero,r17,22004 <___vfprintf_internal_r+0x1454>
   21e18:	05800404 	movi	r22,16
   21e1c:	d8801f17 	ldw	r2,124(sp)
   21e20:	b4419d0e 	bge	r22,r17,22498 <___vfprintf_internal_r+0x18e8>
   21e24:	010000f4 	movhi	r4,3
   21e28:	213fbf84 	addi	r4,r4,-258
   21e2c:	d9002b15 	stw	r4,172(sp)
   21e30:	070001c4 	movi	fp,7
   21e34:	dcc02c17 	ldw	r19,176(sp)
   21e38:	00000306 	br	21e48 <___vfprintf_internal_r+0x1298>
   21e3c:	42000204 	addi	r8,r8,8
   21e40:	8c7ffc04 	addi	r17,r17,-16
   21e44:	b441970e 	bge	r22,r17,224a4 <___vfprintf_internal_r+0x18f4>
   21e48:	18c00404 	addi	r3,r3,16
   21e4c:	10800044 	addi	r2,r2,1
   21e50:	45000015 	stw	r20,0(r8)
   21e54:	45800115 	stw	r22,4(r8)
   21e58:	d8c02015 	stw	r3,128(sp)
   21e5c:	d8801f15 	stw	r2,124(sp)
   21e60:	e0bff60e 	bge	fp,r2,21e3c <__alt_data_end+0xfffe1e3c>
   21e64:	d9801e04 	addi	r6,sp,120
   21e68:	b80b883a 	mov	r5,r23
   21e6c:	9809883a 	mov	r4,r19
   21e70:	00276c80 	call	276c8 <__sprint_r>
   21e74:	103c501e 	bne	r2,zero,20fb8 <__alt_data_end+0xfffe0fb8>
   21e78:	d8c02017 	ldw	r3,128(sp)
   21e7c:	d8801f17 	ldw	r2,124(sp)
   21e80:	da000404 	addi	r8,sp,16
   21e84:	003fee06 	br	21e40 <__alt_data_end+0xfffe1e40>
   21e88:	d9002c17 	ldw	r4,176(sp)
   21e8c:	d9801e04 	addi	r6,sp,120
   21e90:	b80b883a 	mov	r5,r23
   21e94:	00276c80 	call	276c8 <__sprint_r>
   21e98:	103c471e 	bne	r2,zero,20fb8 <__alt_data_end+0xfffe0fb8>
   21e9c:	d8c02017 	ldw	r3,128(sp)
   21ea0:	df002787 	ldb	fp,158(sp)
   21ea4:	da000404 	addi	r8,sp,16
   21ea8:	003d5606 	br	21404 <__alt_data_end+0xfffe1404>
   21eac:	9080040c 	andi	r2,r18,16
   21eb0:	10016126 	beq	r2,zero,22438 <___vfprintf_internal_r+0x1888>
   21eb4:	d8802d17 	ldw	r2,180(sp)
   21eb8:	14c00017 	ldw	r19,0(r2)
   21ebc:	10800104 	addi	r2,r2,4
   21ec0:	d8802d15 	stw	r2,180(sp)
   21ec4:	982dd7fa 	srai	r22,r19,31
   21ec8:	b005883a 	mov	r2,r22
   21ecc:	003c8206 	br	210d8 <__alt_data_end+0xfffe10d8>
   21ed0:	9080040c 	andi	r2,r18,16
   21ed4:	10003526 	beq	r2,zero,21fac <___vfprintf_internal_r+0x13fc>
   21ed8:	d9402d17 	ldw	r5,180(sp)
   21edc:	d8c02917 	ldw	r3,164(sp)
   21ee0:	d8002785 	stb	zero,158(sp)
   21ee4:	28800104 	addi	r2,r5,4
   21ee8:	2cc00017 	ldw	r19,0(r5)
   21eec:	002d883a 	mov	r22,zero
   21ef0:	18003716 	blt	r3,zero,21fd0 <___vfprintf_internal_r+0x1420>
   21ef4:	00ffdfc4 	movi	r3,-129
   21ef8:	d8802d15 	stw	r2,180(sp)
   21efc:	90e4703a 	and	r18,r18,r3
   21f00:	0039883a 	mov	fp,zero
   21f04:	983df326 	beq	r19,zero,216d4 <__alt_data_end+0xfffe16d4>
   21f08:	00800244 	movi	r2,9
   21f0c:	14fc7b36 	bltu	r2,r19,210fc <__alt_data_end+0xfffe10fc>
   21f10:	d8c02817 	ldw	r3,160(sp)
   21f14:	dc001dc4 	addi	r16,sp,119
   21f18:	9cc00c04 	addi	r19,r19,48
   21f1c:	1c07c83a 	sub	r3,r3,r16
   21f20:	dcc01dc5 	stb	r19,119(sp)
   21f24:	d8c02e15 	stw	r3,184(sp)
   21f28:	003ce806 	br	212cc <__alt_data_end+0xfffe12cc>
   21f2c:	d8803317 	ldw	r2,204(sp)
   21f30:	143fffc4 	addi	r16,r2,-1
   21f34:	043f4d0e 	bge	zero,r16,21c6c <__alt_data_end+0xfffe1c6c>
   21f38:	07000404 	movi	fp,16
   21f3c:	e400810e 	bge	fp,r16,22144 <___vfprintf_internal_r+0x1594>
   21f40:	014000f4 	movhi	r5,3
   21f44:	297fbf84 	addi	r5,r5,-258
   21f48:	d9402b15 	stw	r5,172(sp)
   21f4c:	01c001c4 	movi	r7,7
   21f50:	dcc02c17 	ldw	r19,176(sp)
   21f54:	00000306 	br	21f64 <___vfprintf_internal_r+0x13b4>
   21f58:	b5800204 	addi	r22,r22,8
   21f5c:	843ffc04 	addi	r16,r16,-16
   21f60:	e4007b0e 	bge	fp,r16,22150 <___vfprintf_internal_r+0x15a0>
   21f64:	18c00404 	addi	r3,r3,16
   21f68:	8c400044 	addi	r17,r17,1
   21f6c:	b5000015 	stw	r20,0(r22)
   21f70:	b7000115 	stw	fp,4(r22)
   21f74:	d8c02015 	stw	r3,128(sp)
   21f78:	dc401f15 	stw	r17,124(sp)
   21f7c:	3c7ff60e 	bge	r7,r17,21f58 <__alt_data_end+0xfffe1f58>
   21f80:	d9801e04 	addi	r6,sp,120
   21f84:	b80b883a 	mov	r5,r23
   21f88:	9809883a 	mov	r4,r19
   21f8c:	d9c03c15 	stw	r7,240(sp)
   21f90:	00276c80 	call	276c8 <__sprint_r>
   21f94:	d9c03c17 	ldw	r7,240(sp)
   21f98:	103c071e 	bne	r2,zero,20fb8 <__alt_data_end+0xfffe0fb8>
   21f9c:	d8c02017 	ldw	r3,128(sp)
   21fa0:	dc401f17 	ldw	r17,124(sp)
   21fa4:	dd800404 	addi	r22,sp,16
   21fa8:	003fec06 	br	21f5c <__alt_data_end+0xfffe1f5c>
   21fac:	9080100c 	andi	r2,r18,64
   21fb0:	d8002785 	stb	zero,158(sp)
   21fb4:	10010e26 	beq	r2,zero,223f0 <___vfprintf_internal_r+0x1840>
   21fb8:	d9002d17 	ldw	r4,180(sp)
   21fbc:	d9402917 	ldw	r5,164(sp)
   21fc0:	002d883a 	mov	r22,zero
   21fc4:	20800104 	addi	r2,r4,4
   21fc8:	24c0000b 	ldhu	r19,0(r4)
   21fcc:	283fc90e 	bge	r5,zero,21ef4 <__alt_data_end+0xfffe1ef4>
   21fd0:	d8802d15 	stw	r2,180(sp)
   21fd4:	0039883a 	mov	fp,zero
   21fd8:	9d84b03a 	or	r2,r19,r22
   21fdc:	103c461e 	bne	r2,zero,210f8 <__alt_data_end+0xfffe10f8>
   21fe0:	00800044 	movi	r2,1
   21fe4:	003e6c06 	br	21998 <__alt_data_end+0xfffe1998>
   21fe8:	d9002c17 	ldw	r4,176(sp)
   21fec:	d9801e04 	addi	r6,sp,120
   21ff0:	b80b883a 	mov	r5,r23
   21ff4:	00276c80 	call	276c8 <__sprint_r>
   21ff8:	103bef1e 	bne	r2,zero,20fb8 <__alt_data_end+0xfffe0fb8>
   21ffc:	d8c02017 	ldw	r3,128(sp)
   22000:	da000404 	addi	r8,sp,16
   22004:	d9003217 	ldw	r4,200(sp)
   22008:	d8802617 	ldw	r2,152(sp)
   2200c:	d9403317 	ldw	r5,204(sp)
   22010:	8123883a 	add	r17,r16,r4
   22014:	11400216 	blt	r2,r5,22020 <___vfprintf_internal_r+0x1470>
   22018:	9100004c 	andi	r4,r18,1
   2201c:	20000d26 	beq	r4,zero,22054 <___vfprintf_internal_r+0x14a4>
   22020:	d9003717 	ldw	r4,220(sp)
   22024:	d9403417 	ldw	r5,208(sp)
   22028:	1907883a 	add	r3,r3,r4
   2202c:	d9001f17 	ldw	r4,124(sp)
   22030:	41400015 	stw	r5,0(r8)
   22034:	d9403717 	ldw	r5,220(sp)
   22038:	21000044 	addi	r4,r4,1
   2203c:	d8c02015 	stw	r3,128(sp)
   22040:	41400115 	stw	r5,4(r8)
   22044:	d9001f15 	stw	r4,124(sp)
   22048:	014001c4 	movi	r5,7
   2204c:	2901e816 	blt	r5,r4,227f0 <___vfprintf_internal_r+0x1c40>
   22050:	42000204 	addi	r8,r8,8
   22054:	d9003317 	ldw	r4,204(sp)
   22058:	8121883a 	add	r16,r16,r4
   2205c:	2085c83a 	sub	r2,r4,r2
   22060:	8461c83a 	sub	r16,r16,r17
   22064:	1400010e 	bge	r2,r16,2206c <___vfprintf_internal_r+0x14bc>
   22068:	1021883a 	mov	r16,r2
   2206c:	04000a0e 	bge	zero,r16,22098 <___vfprintf_internal_r+0x14e8>
   22070:	d9001f17 	ldw	r4,124(sp)
   22074:	1c07883a 	add	r3,r3,r16
   22078:	44400015 	stw	r17,0(r8)
   2207c:	21000044 	addi	r4,r4,1
   22080:	44000115 	stw	r16,4(r8)
   22084:	d8c02015 	stw	r3,128(sp)
   22088:	d9001f15 	stw	r4,124(sp)
   2208c:	014001c4 	movi	r5,7
   22090:	2901fb16 	blt	r5,r4,22880 <___vfprintf_internal_r+0x1cd0>
   22094:	42000204 	addi	r8,r8,8
   22098:	8001f716 	blt	r16,zero,22878 <___vfprintf_internal_r+0x1cc8>
   2209c:	1421c83a 	sub	r16,r2,r16
   220a0:	043d380e 	bge	zero,r16,21584 <__alt_data_end+0xfffe1584>
   220a4:	04400404 	movi	r17,16
   220a8:	d8801f17 	ldw	r2,124(sp)
   220ac:	8c3efb0e 	bge	r17,r16,21c9c <__alt_data_end+0xfffe1c9c>
   220b0:	014000f4 	movhi	r5,3
   220b4:	297fbf84 	addi	r5,r5,-258
   220b8:	d9402b15 	stw	r5,172(sp)
   220bc:	058001c4 	movi	r22,7
   220c0:	dcc02c17 	ldw	r19,176(sp)
   220c4:	00000306 	br	220d4 <___vfprintf_internal_r+0x1524>
   220c8:	42000204 	addi	r8,r8,8
   220cc:	843ffc04 	addi	r16,r16,-16
   220d0:	8c3ef50e 	bge	r17,r16,21ca8 <__alt_data_end+0xfffe1ca8>
   220d4:	18c00404 	addi	r3,r3,16
   220d8:	10800044 	addi	r2,r2,1
   220dc:	45000015 	stw	r20,0(r8)
   220e0:	44400115 	stw	r17,4(r8)
   220e4:	d8c02015 	stw	r3,128(sp)
   220e8:	d8801f15 	stw	r2,124(sp)
   220ec:	b0bff60e 	bge	r22,r2,220c8 <__alt_data_end+0xfffe20c8>
   220f0:	d9801e04 	addi	r6,sp,120
   220f4:	b80b883a 	mov	r5,r23
   220f8:	9809883a 	mov	r4,r19
   220fc:	00276c80 	call	276c8 <__sprint_r>
   22100:	103bad1e 	bne	r2,zero,20fb8 <__alt_data_end+0xfffe0fb8>
   22104:	d8c02017 	ldw	r3,128(sp)
   22108:	d8801f17 	ldw	r2,124(sp)
   2210c:	da000404 	addi	r8,sp,16
   22110:	003fee06 	br	220cc <__alt_data_end+0xfffe20cc>
   22114:	9088703a 	and	r4,r18,r2
   22118:	203eab1e 	bne	r4,zero,21bc8 <__alt_data_end+0xfffe1bc8>
   2211c:	dc401f17 	ldw	r17,124(sp)
   22120:	40800115 	stw	r2,4(r8)
   22124:	44000015 	stw	r16,0(r8)
   22128:	8c400044 	addi	r17,r17,1
   2212c:	d8c02015 	stw	r3,128(sp)
   22130:	dc401f15 	stw	r17,124(sp)
   22134:	008001c4 	movi	r2,7
   22138:	14400e16 	blt	r2,r17,22174 <___vfprintf_internal_r+0x15c4>
   2213c:	45800204 	addi	r22,r8,8
   22140:	003eca06 	br	21c6c <__alt_data_end+0xfffe1c6c>
   22144:	010000f4 	movhi	r4,3
   22148:	213fbf84 	addi	r4,r4,-258
   2214c:	d9002b15 	stw	r4,172(sp)
   22150:	d8802b17 	ldw	r2,172(sp)
   22154:	1c07883a 	add	r3,r3,r16
   22158:	8c400044 	addi	r17,r17,1
   2215c:	b0800015 	stw	r2,0(r22)
   22160:	b4000115 	stw	r16,4(r22)
   22164:	d8c02015 	stw	r3,128(sp)
   22168:	dc401f15 	stw	r17,124(sp)
   2216c:	008001c4 	movi	r2,7
   22170:	147ebd0e 	bge	r2,r17,21c68 <__alt_data_end+0xfffe1c68>
   22174:	d9002c17 	ldw	r4,176(sp)
   22178:	d9801e04 	addi	r6,sp,120
   2217c:	b80b883a 	mov	r5,r23
   22180:	00276c80 	call	276c8 <__sprint_r>
   22184:	103b8c1e 	bne	r2,zero,20fb8 <__alt_data_end+0xfffe0fb8>
   22188:	d8c02017 	ldw	r3,128(sp)
   2218c:	dc401f17 	ldw	r17,124(sp)
   22190:	dd800404 	addi	r22,sp,16
   22194:	003eb506 	br	21c6c <__alt_data_end+0xfffe1c6c>
   22198:	d9002c17 	ldw	r4,176(sp)
   2219c:	d9801e04 	addi	r6,sp,120
   221a0:	b80b883a 	mov	r5,r23
   221a4:	00276c80 	call	276c8 <__sprint_r>
   221a8:	103b831e 	bne	r2,zero,20fb8 <__alt_data_end+0xfffe0fb8>
   221ac:	d8c02017 	ldw	r3,128(sp)
   221b0:	dc401f17 	ldw	r17,124(sp)
   221b4:	da000404 	addi	r8,sp,16
   221b8:	003e8d06 	br	21bf0 <__alt_data_end+0xfffe1bf0>
   221bc:	d9002c17 	ldw	r4,176(sp)
   221c0:	d9801e04 	addi	r6,sp,120
   221c4:	b80b883a 	mov	r5,r23
   221c8:	00276c80 	call	276c8 <__sprint_r>
   221cc:	103b7a1e 	bne	r2,zero,20fb8 <__alt_data_end+0xfffe0fb8>
   221d0:	d8c02017 	ldw	r3,128(sp)
   221d4:	dc401f17 	ldw	r17,124(sp)
   221d8:	dd800404 	addi	r22,sp,16
   221dc:	003e8f06 	br	21c1c <__alt_data_end+0xfffe1c1c>
   221e0:	0027883a 	mov	r19,zero
   221e4:	003f4a06 	br	21f10 <__alt_data_end+0xfffe1f10>
   221e8:	d9002c17 	ldw	r4,176(sp)
   221ec:	d9801e04 	addi	r6,sp,120
   221f0:	b80b883a 	mov	r5,r23
   221f4:	00276c80 	call	276c8 <__sprint_r>
   221f8:	103b6f1e 	bne	r2,zero,20fb8 <__alt_data_end+0xfffe0fb8>
   221fc:	d8c02017 	ldw	r3,128(sp)
   22200:	da000404 	addi	r8,sp,16
   22204:	003c9d06 	br	2147c <__alt_data_end+0xfffe147c>
   22208:	04e7c83a 	sub	r19,zero,r19
   2220c:	9804c03a 	cmpne	r2,r19,zero
   22210:	05adc83a 	sub	r22,zero,r22
   22214:	b0adc83a 	sub	r22,r22,r2
   22218:	d8802917 	ldw	r2,164(sp)
   2221c:	07000b44 	movi	fp,45
   22220:	df002785 	stb	fp,158(sp)
   22224:	10017b16 	blt	r2,zero,22814 <___vfprintf_internal_r+0x1c64>
   22228:	00bfdfc4 	movi	r2,-129
   2222c:	90a4703a 	and	r18,r18,r2
   22230:	003bb106 	br	210f8 <__alt_data_end+0xfffe10f8>
   22234:	d9003617 	ldw	r4,216(sp)
   22238:	d9403817 	ldw	r5,224(sp)
   2223c:	da003d15 	stw	r8,244(sp)
   22240:	00272540 	call	27254 <__fpclassifyd>
   22244:	da003d17 	ldw	r8,244(sp)
   22248:	1000f026 	beq	r2,zero,2260c <___vfprintf_internal_r+0x1a5c>
   2224c:	d9002917 	ldw	r4,164(sp)
   22250:	05bff7c4 	movi	r22,-33
   22254:	00bfffc4 	movi	r2,-1
   22258:	8dac703a 	and	r22,r17,r22
   2225c:	20820026 	beq	r4,r2,22a60 <___vfprintf_internal_r+0x1eb0>
   22260:	008011c4 	movi	r2,71
   22264:	b081f726 	beq	r22,r2,22a44 <___vfprintf_internal_r+0x1e94>
   22268:	d9003817 	ldw	r4,224(sp)
   2226c:	90c04014 	ori	r3,r18,256
   22270:	d8c02b15 	stw	r3,172(sp)
   22274:	20021516 	blt	r4,zero,22acc <___vfprintf_internal_r+0x1f1c>
   22278:	dcc03817 	ldw	r19,224(sp)
   2227c:	d8002a05 	stb	zero,168(sp)
   22280:	00801984 	movi	r2,102
   22284:	8881f926 	beq	r17,r2,22a6c <___vfprintf_internal_r+0x1ebc>
   22288:	00801184 	movi	r2,70
   2228c:	88821c26 	beq	r17,r2,22b00 <___vfprintf_internal_r+0x1f50>
   22290:	00801144 	movi	r2,69
   22294:	b081ef26 	beq	r22,r2,22a54 <___vfprintf_internal_r+0x1ea4>
   22298:	d8c02917 	ldw	r3,164(sp)
   2229c:	d8802104 	addi	r2,sp,132
   222a0:	d8800315 	stw	r2,12(sp)
   222a4:	d9403617 	ldw	r5,216(sp)
   222a8:	d8802504 	addi	r2,sp,148
   222ac:	d9002c17 	ldw	r4,176(sp)
   222b0:	d8800215 	stw	r2,8(sp)
   222b4:	d8802604 	addi	r2,sp,152
   222b8:	d8c00015 	stw	r3,0(sp)
   222bc:	d8800115 	stw	r2,4(sp)
   222c0:	01c00084 	movi	r7,2
   222c4:	980d883a 	mov	r6,r19
   222c8:	d8c03c15 	stw	r3,240(sp)
   222cc:	da003d15 	stw	r8,244(sp)
   222d0:	00231d40 	call	231d4 <_dtoa_r>
   222d4:	1021883a 	mov	r16,r2
   222d8:	008019c4 	movi	r2,103
   222dc:	d8c03c17 	ldw	r3,240(sp)
   222e0:	da003d17 	ldw	r8,244(sp)
   222e4:	88817126 	beq	r17,r2,228ac <___vfprintf_internal_r+0x1cfc>
   222e8:	008011c4 	movi	r2,71
   222ec:	88829226 	beq	r17,r2,22d38 <___vfprintf_internal_r+0x2188>
   222f0:	80f9883a 	add	fp,r16,r3
   222f4:	d9003617 	ldw	r4,216(sp)
   222f8:	000d883a 	mov	r6,zero
   222fc:	000f883a 	mov	r7,zero
   22300:	980b883a 	mov	r5,r19
   22304:	da003d15 	stw	r8,244(sp)
   22308:	002bd080 	call	2bd08 <__eqdf2>
   2230c:	da003d17 	ldw	r8,244(sp)
   22310:	10018d26 	beq	r2,zero,22948 <___vfprintf_internal_r+0x1d98>
   22314:	d8802117 	ldw	r2,132(sp)
   22318:	1700062e 	bgeu	r2,fp,22334 <___vfprintf_internal_r+0x1784>
   2231c:	01000c04 	movi	r4,48
   22320:	10c00044 	addi	r3,r2,1
   22324:	d8c02115 	stw	r3,132(sp)
   22328:	11000005 	stb	r4,0(r2)
   2232c:	d8802117 	ldw	r2,132(sp)
   22330:	173ffb36 	bltu	r2,fp,22320 <__alt_data_end+0xfffe2320>
   22334:	1405c83a 	sub	r2,r2,r16
   22338:	d8803315 	stw	r2,204(sp)
   2233c:	008011c4 	movi	r2,71
   22340:	b0817626 	beq	r22,r2,2291c <___vfprintf_internal_r+0x1d6c>
   22344:	00801944 	movi	r2,101
   22348:	1442810e 	bge	r2,r17,22d50 <___vfprintf_internal_r+0x21a0>
   2234c:	d8c02617 	ldw	r3,152(sp)
   22350:	00801984 	movi	r2,102
   22354:	d8c03215 	stw	r3,200(sp)
   22358:	8881fe26 	beq	r17,r2,22b54 <___vfprintf_internal_r+0x1fa4>
   2235c:	d8c03217 	ldw	r3,200(sp)
   22360:	d9003317 	ldw	r4,204(sp)
   22364:	1901dd16 	blt	r3,r4,22adc <___vfprintf_internal_r+0x1f2c>
   22368:	9480004c 	andi	r18,r18,1
   2236c:	90022b1e 	bne	r18,zero,22c1c <___vfprintf_internal_r+0x206c>
   22370:	1805883a 	mov	r2,r3
   22374:	18028016 	blt	r3,zero,22d78 <___vfprintf_internal_r+0x21c8>
   22378:	d8c03217 	ldw	r3,200(sp)
   2237c:	044019c4 	movi	r17,103
   22380:	d8c02e15 	stw	r3,184(sp)
   22384:	df002a07 	ldb	fp,168(sp)
   22388:	e001531e 	bne	fp,zero,228d8 <___vfprintf_internal_r+0x1d28>
   2238c:	df002783 	ldbu	fp,158(sp)
   22390:	d8802a15 	stw	r2,168(sp)
   22394:	dc802b17 	ldw	r18,172(sp)
   22398:	d8002915 	stw	zero,164(sp)
   2239c:	003bd106 	br	212e4 <__alt_data_end+0xfffe12e4>
   223a0:	d8802d17 	ldw	r2,180(sp)
   223a4:	d8c02d17 	ldw	r3,180(sp)
   223a8:	d9002d17 	ldw	r4,180(sp)
   223ac:	10800017 	ldw	r2,0(r2)
   223b0:	18c00117 	ldw	r3,4(r3)
   223b4:	21000204 	addi	r4,r4,8
   223b8:	d8803615 	stw	r2,216(sp)
   223bc:	d8c03815 	stw	r3,224(sp)
   223c0:	d9002d15 	stw	r4,180(sp)
   223c4:	003b7506 	br	2119c <__alt_data_end+0xfffe119c>
   223c8:	ac400007 	ldb	r17,0(r21)
   223cc:	003a5906 	br	20d34 <__alt_data_end+0xfffe0d34>
   223d0:	9080100c 	andi	r2,r18,64
   223d4:	1000a826 	beq	r2,zero,22678 <___vfprintf_internal_r+0x1ac8>
   223d8:	d9002d17 	ldw	r4,180(sp)
   223dc:	002d883a 	mov	r22,zero
   223e0:	24c0000b 	ldhu	r19,0(r4)
   223e4:	21000104 	addi	r4,r4,4
   223e8:	d9002d15 	stw	r4,180(sp)
   223ec:	003ccb06 	br	2171c <__alt_data_end+0xfffe171c>
   223f0:	d8c02d17 	ldw	r3,180(sp)
   223f4:	d9002917 	ldw	r4,164(sp)
   223f8:	002d883a 	mov	r22,zero
   223fc:	18800104 	addi	r2,r3,4
   22400:	1cc00017 	ldw	r19,0(r3)
   22404:	203ebb0e 	bge	r4,zero,21ef4 <__alt_data_end+0xfffe1ef4>
   22408:	003ef106 	br	21fd0 <__alt_data_end+0xfffe1fd0>
   2240c:	9080040c 	andi	r2,r18,16
   22410:	1000921e 	bne	r2,zero,2265c <___vfprintf_internal_r+0x1aac>
   22414:	9480100c 	andi	r18,r18,64
   22418:	90013926 	beq	r18,zero,22900 <___vfprintf_internal_r+0x1d50>
   2241c:	d9002d17 	ldw	r4,180(sp)
   22420:	d9402f17 	ldw	r5,188(sp)
   22424:	20800017 	ldw	r2,0(r4)
   22428:	21000104 	addi	r4,r4,4
   2242c:	d9002d15 	stw	r4,180(sp)
   22430:	1140000d 	sth	r5,0(r2)
   22434:	003a1606 	br	20c90 <__alt_data_end+0xfffe0c90>
   22438:	9080100c 	andi	r2,r18,64
   2243c:	10008026 	beq	r2,zero,22640 <___vfprintf_internal_r+0x1a90>
   22440:	d8c02d17 	ldw	r3,180(sp)
   22444:	1cc0000f 	ldh	r19,0(r3)
   22448:	18c00104 	addi	r3,r3,4
   2244c:	d8c02d15 	stw	r3,180(sp)
   22450:	982dd7fa 	srai	r22,r19,31
   22454:	b005883a 	mov	r2,r22
   22458:	003b1f06 	br	210d8 <__alt_data_end+0xfffe10d8>
   2245c:	9080100c 	andi	r2,r18,64
   22460:	d8002785 	stb	zero,158(sp)
   22464:	10008a1e 	bne	r2,zero,22690 <___vfprintf_internal_r+0x1ae0>
   22468:	d9402d17 	ldw	r5,180(sp)
   2246c:	d8c02917 	ldw	r3,164(sp)
   22470:	002d883a 	mov	r22,zero
   22474:	28800104 	addi	r2,r5,4
   22478:	2cc00017 	ldw	r19,0(r5)
   2247c:	183e4b0e 	bge	r3,zero,21dac <__alt_data_end+0xfffe1dac>
   22480:	9d86b03a 	or	r3,r19,r22
   22484:	d8802d15 	stw	r2,180(sp)
   22488:	183e4c1e 	bne	r3,zero,21dbc <__alt_data_end+0xfffe1dbc>
   2248c:	0039883a 	mov	fp,zero
   22490:	0005883a 	mov	r2,zero
   22494:	003d4006 	br	21998 <__alt_data_end+0xfffe1998>
   22498:	014000f4 	movhi	r5,3
   2249c:	297fbf84 	addi	r5,r5,-258
   224a0:	d9402b15 	stw	r5,172(sp)
   224a4:	d9402b17 	ldw	r5,172(sp)
   224a8:	1c47883a 	add	r3,r3,r17
   224ac:	10800044 	addi	r2,r2,1
   224b0:	41400015 	stw	r5,0(r8)
   224b4:	44400115 	stw	r17,4(r8)
   224b8:	d8c02015 	stw	r3,128(sp)
   224bc:	d8801f15 	stw	r2,124(sp)
   224c0:	010001c4 	movi	r4,7
   224c4:	20bec816 	blt	r4,r2,21fe8 <__alt_data_end+0xfffe1fe8>
   224c8:	42000204 	addi	r8,r8,8
   224cc:	003ecd06 	br	22004 <__alt_data_end+0xfffe2004>
   224d0:	d9002917 	ldw	r4,164(sp)
   224d4:	d8002785 	stb	zero,158(sp)
   224d8:	203d2d16 	blt	r4,zero,21990 <__alt_data_end+0xfffe1990>
   224dc:	00bfdfc4 	movi	r2,-129
   224e0:	90a4703a 	and	r18,r18,r2
   224e4:	003a9106 	br	20f2c <__alt_data_end+0xfffe0f2c>
   224e8:	010000f4 	movhi	r4,3
   224ec:	213fbf84 	addi	r4,r4,-258
   224f0:	d9002b15 	stw	r4,172(sp)
   224f4:	003c0c06 	br	21528 <__alt_data_end+0xfffe1528>
   224f8:	d9002c17 	ldw	r4,176(sp)
   224fc:	d9801e04 	addi	r6,sp,120
   22500:	b80b883a 	mov	r5,r23
   22504:	00276c80 	call	276c8 <__sprint_r>
   22508:	103aab1e 	bne	r2,zero,20fb8 <__alt_data_end+0xfffe0fb8>
   2250c:	d8c02017 	ldw	r3,128(sp)
   22510:	da000404 	addi	r8,sp,16
   22514:	003d4106 	br	21a1c <__alt_data_end+0xfffe1a1c>
   22518:	d8801f17 	ldw	r2,124(sp)
   2251c:	014000f4 	movhi	r5,3
   22520:	01000044 	movi	r4,1
   22524:	18c00044 	addi	r3,r3,1
   22528:	10800044 	addi	r2,r2,1
   2252c:	297fbf04 	addi	r5,r5,-260
   22530:	41000115 	stw	r4,4(r8)
   22534:	41400015 	stw	r5,0(r8)
   22538:	d8c02015 	stw	r3,128(sp)
   2253c:	d8801f15 	stw	r2,124(sp)
   22540:	010001c4 	movi	r4,7
   22544:	20805c16 	blt	r4,r2,226b8 <___vfprintf_internal_r+0x1b08>
   22548:	42000204 	addi	r8,r8,8
   2254c:	8800041e 	bne	r17,zero,22560 <___vfprintf_internal_r+0x19b0>
   22550:	d8803317 	ldw	r2,204(sp)
   22554:	1000021e 	bne	r2,zero,22560 <___vfprintf_internal_r+0x19b0>
   22558:	9080004c 	andi	r2,r18,1
   2255c:	103c0926 	beq	r2,zero,21584 <__alt_data_end+0xfffe1584>
   22560:	d9003717 	ldw	r4,220(sp)
   22564:	d8801f17 	ldw	r2,124(sp)
   22568:	d9403417 	ldw	r5,208(sp)
   2256c:	20c7883a 	add	r3,r4,r3
   22570:	10800044 	addi	r2,r2,1
   22574:	41000115 	stw	r4,4(r8)
   22578:	41400015 	stw	r5,0(r8)
   2257c:	d8c02015 	stw	r3,128(sp)
   22580:	d8801f15 	stw	r2,124(sp)
   22584:	010001c4 	movi	r4,7
   22588:	20812116 	blt	r4,r2,22a10 <___vfprintf_internal_r+0x1e60>
   2258c:	42000204 	addi	r8,r8,8
   22590:	0463c83a 	sub	r17,zero,r17
   22594:	0440730e 	bge	zero,r17,22764 <___vfprintf_internal_r+0x1bb4>
   22598:	05800404 	movi	r22,16
   2259c:	b440860e 	bge	r22,r17,227b8 <___vfprintf_internal_r+0x1c08>
   225a0:	014000f4 	movhi	r5,3
   225a4:	297fbf84 	addi	r5,r5,-258
   225a8:	d9402b15 	stw	r5,172(sp)
   225ac:	070001c4 	movi	fp,7
   225b0:	dcc02c17 	ldw	r19,176(sp)
   225b4:	00000306 	br	225c4 <___vfprintf_internal_r+0x1a14>
   225b8:	42000204 	addi	r8,r8,8
   225bc:	8c7ffc04 	addi	r17,r17,-16
   225c0:	b440800e 	bge	r22,r17,227c4 <___vfprintf_internal_r+0x1c14>
   225c4:	18c00404 	addi	r3,r3,16
   225c8:	10800044 	addi	r2,r2,1
   225cc:	45000015 	stw	r20,0(r8)
   225d0:	45800115 	stw	r22,4(r8)
   225d4:	d8c02015 	stw	r3,128(sp)
   225d8:	d8801f15 	stw	r2,124(sp)
   225dc:	e0bff60e 	bge	fp,r2,225b8 <__alt_data_end+0xfffe25b8>
   225e0:	d9801e04 	addi	r6,sp,120
   225e4:	b80b883a 	mov	r5,r23
   225e8:	9809883a 	mov	r4,r19
   225ec:	00276c80 	call	276c8 <__sprint_r>
   225f0:	103a711e 	bne	r2,zero,20fb8 <__alt_data_end+0xfffe0fb8>
   225f4:	d8c02017 	ldw	r3,128(sp)
   225f8:	d8801f17 	ldw	r2,124(sp)
   225fc:	da000404 	addi	r8,sp,16
   22600:	003fee06 	br	225bc <__alt_data_end+0xfffe25bc>
   22604:	00bfffc4 	movi	r2,-1
   22608:	003a6f06 	br	20fc8 <__alt_data_end+0xfffe0fc8>
   2260c:	008011c4 	movi	r2,71
   22610:	1440b816 	blt	r2,r17,228f4 <___vfprintf_internal_r+0x1d44>
   22614:	040000f4 	movhi	r16,3
   22618:	843fb104 	addi	r16,r16,-316
   2261c:	00c000c4 	movi	r3,3
   22620:	00bfdfc4 	movi	r2,-129
   22624:	d8c02a15 	stw	r3,168(sp)
   22628:	90a4703a 	and	r18,r18,r2
   2262c:	df002783 	ldbu	fp,158(sp)
   22630:	d8c02e15 	stw	r3,184(sp)
   22634:	d8002915 	stw	zero,164(sp)
   22638:	d8003215 	stw	zero,200(sp)
   2263c:	003b2906 	br	212e4 <__alt_data_end+0xfffe12e4>
   22640:	d9002d17 	ldw	r4,180(sp)
   22644:	24c00017 	ldw	r19,0(r4)
   22648:	21000104 	addi	r4,r4,4
   2264c:	d9002d15 	stw	r4,180(sp)
   22650:	982dd7fa 	srai	r22,r19,31
   22654:	b005883a 	mov	r2,r22
   22658:	003a9f06 	br	210d8 <__alt_data_end+0xfffe10d8>
   2265c:	d9402d17 	ldw	r5,180(sp)
   22660:	d8c02f17 	ldw	r3,188(sp)
   22664:	28800017 	ldw	r2,0(r5)
   22668:	29400104 	addi	r5,r5,4
   2266c:	d9402d15 	stw	r5,180(sp)
   22670:	10c00015 	stw	r3,0(r2)
   22674:	00398606 	br	20c90 <__alt_data_end+0xfffe0c90>
   22678:	d9402d17 	ldw	r5,180(sp)
   2267c:	002d883a 	mov	r22,zero
   22680:	2cc00017 	ldw	r19,0(r5)
   22684:	29400104 	addi	r5,r5,4
   22688:	d9402d15 	stw	r5,180(sp)
   2268c:	003c2306 	br	2171c <__alt_data_end+0xfffe171c>
   22690:	d8c02d17 	ldw	r3,180(sp)
   22694:	d9002917 	ldw	r4,164(sp)
   22698:	002d883a 	mov	r22,zero
   2269c:	18800104 	addi	r2,r3,4
   226a0:	1cc0000b 	ldhu	r19,0(r3)
   226a4:	203dc10e 	bge	r4,zero,21dac <__alt_data_end+0xfffe1dac>
   226a8:	003f7506 	br	22480 <__alt_data_end+0xfffe2480>
   226ac:	040000f4 	movhi	r16,3
   226b0:	843faf04 	addi	r16,r16,-324
   226b4:	003acc06 	br	211e8 <__alt_data_end+0xfffe11e8>
   226b8:	d9002c17 	ldw	r4,176(sp)
   226bc:	d9801e04 	addi	r6,sp,120
   226c0:	b80b883a 	mov	r5,r23
   226c4:	00276c80 	call	276c8 <__sprint_r>
   226c8:	103a3b1e 	bne	r2,zero,20fb8 <__alt_data_end+0xfffe0fb8>
   226cc:	dc402617 	ldw	r17,152(sp)
   226d0:	d8c02017 	ldw	r3,128(sp)
   226d4:	da000404 	addi	r8,sp,16
   226d8:	003f9c06 	br	2254c <__alt_data_end+0xfffe254c>
   226dc:	ac400043 	ldbu	r17,1(r21)
   226e0:	94800814 	ori	r18,r18,32
   226e4:	ad400044 	addi	r21,r21,1
   226e8:	8c403fcc 	andi	r17,r17,255
   226ec:	8c40201c 	xori	r17,r17,128
   226f0:	8c7fe004 	addi	r17,r17,-128
   226f4:	00398f06 	br	20d34 <__alt_data_end+0xfffe0d34>
   226f8:	d8c02d15 	stw	r3,180(sp)
   226fc:	0039883a 	mov	fp,zero
   22700:	003e3506 	br	21fd8 <__alt_data_end+0xfffe1fd8>
   22704:	d9002c17 	ldw	r4,176(sp)
   22708:	d9801e04 	addi	r6,sp,120
   2270c:	b80b883a 	mov	r5,r23
   22710:	00276c80 	call	276c8 <__sprint_r>
   22714:	103a281e 	bne	r2,zero,20fb8 <__alt_data_end+0xfffe0fb8>
   22718:	d8c02017 	ldw	r3,128(sp)
   2271c:	da000404 	addi	r8,sp,16
   22720:	003cd006 	br	21a64 <__alt_data_end+0xfffe1a64>
   22724:	8009883a 	mov	r4,r16
   22728:	da003d15 	stw	r8,244(sp)
   2272c:	00275340 	call	27534 <strlen>
   22730:	d8802e15 	stw	r2,184(sp)
   22734:	da003d17 	ldw	r8,244(sp)
   22738:	103c340e 	bge	r2,zero,2180c <__alt_data_end+0xfffe180c>
   2273c:	0005883a 	mov	r2,zero
   22740:	003c3206 	br	2180c <__alt_data_end+0xfffe180c>
   22744:	d9002c17 	ldw	r4,176(sp)
   22748:	d9801e04 	addi	r6,sp,120
   2274c:	b80b883a 	mov	r5,r23
   22750:	00276c80 	call	276c8 <__sprint_r>
   22754:	103a181e 	bne	r2,zero,20fb8 <__alt_data_end+0xfffe0fb8>
   22758:	d8c02017 	ldw	r3,128(sp)
   2275c:	d8801f17 	ldw	r2,124(sp)
   22760:	da000404 	addi	r8,sp,16
   22764:	d9403317 	ldw	r5,204(sp)
   22768:	10800044 	addi	r2,r2,1
   2276c:	44000015 	stw	r16,0(r8)
   22770:	28c7883a 	add	r3,r5,r3
   22774:	003b7d06 	br	2156c <__alt_data_end+0xfffe156c>
   22778:	010000f4 	movhi	r4,3
   2277c:	213fc384 	addi	r4,r4,-242
   22780:	d9003515 	stw	r4,212(sp)
   22784:	003b1406 	br	213d8 <__alt_data_end+0xfffe13d8>
   22788:	013fffc4 	movi	r4,-1
   2278c:	003a3506 	br	21064 <__alt_data_end+0xfffe1064>
   22790:	0023883a 	mov	r17,zero
   22794:	003d9d06 	br	21e0c <__alt_data_end+0xfffe1e0c>
   22798:	d9002c17 	ldw	r4,176(sp)
   2279c:	d9801e04 	addi	r6,sp,120
   227a0:	b80b883a 	mov	r5,r23
   227a4:	00276c80 	call	276c8 <__sprint_r>
   227a8:	103a031e 	bne	r2,zero,20fb8 <__alt_data_end+0xfffe0fb8>
   227ac:	d8c02017 	ldw	r3,128(sp)
   227b0:	da000404 	addi	r8,sp,16
   227b4:	003d9406 	br	21e08 <__alt_data_end+0xfffe1e08>
   227b8:	010000f4 	movhi	r4,3
   227bc:	213fbf84 	addi	r4,r4,-258
   227c0:	d9002b15 	stw	r4,172(sp)
   227c4:	d9002b17 	ldw	r4,172(sp)
   227c8:	1c47883a 	add	r3,r3,r17
   227cc:	10800044 	addi	r2,r2,1
   227d0:	41000015 	stw	r4,0(r8)
   227d4:	44400115 	stw	r17,4(r8)
   227d8:	d8c02015 	stw	r3,128(sp)
   227dc:	d8801f15 	stw	r2,124(sp)
   227e0:	010001c4 	movi	r4,7
   227e4:	20bfd716 	blt	r4,r2,22744 <__alt_data_end+0xfffe2744>
   227e8:	42000204 	addi	r8,r8,8
   227ec:	003fdd06 	br	22764 <__alt_data_end+0xfffe2764>
   227f0:	d9002c17 	ldw	r4,176(sp)
   227f4:	d9801e04 	addi	r6,sp,120
   227f8:	b80b883a 	mov	r5,r23
   227fc:	00276c80 	call	276c8 <__sprint_r>
   22800:	1039ed1e 	bne	r2,zero,20fb8 <__alt_data_end+0xfffe0fb8>
   22804:	d8802617 	ldw	r2,152(sp)
   22808:	d8c02017 	ldw	r3,128(sp)
   2280c:	da000404 	addi	r8,sp,16
   22810:	003e1006 	br	22054 <__alt_data_end+0xfffe2054>
   22814:	00800044 	movi	r2,1
   22818:	10803fcc 	andi	r2,r2,255
   2281c:	00c00044 	movi	r3,1
   22820:	10fa3526 	beq	r2,r3,210f8 <__alt_data_end+0xfffe10f8>
   22824:	00c00084 	movi	r3,2
   22828:	10fbcb26 	beq	r2,r3,21758 <__alt_data_end+0xfffe1758>
   2282c:	003a8f06 	br	2126c <__alt_data_end+0xfffe126c>
   22830:	010000f4 	movhi	r4,3
   22834:	213fc384 	addi	r4,r4,-242
   22838:	d9003515 	stw	r4,212(sp)
   2283c:	003b7606 	br	21618 <__alt_data_end+0xfffe1618>
   22840:	d8802917 	ldw	r2,164(sp)
   22844:	00c00184 	movi	r3,6
   22848:	1880012e 	bgeu	r3,r2,22850 <___vfprintf_internal_r+0x1ca0>
   2284c:	1805883a 	mov	r2,r3
   22850:	d8802e15 	stw	r2,184(sp)
   22854:	1000ef16 	blt	r2,zero,22c14 <___vfprintf_internal_r+0x2064>
   22858:	040000f4 	movhi	r16,3
   2285c:	d8802a15 	stw	r2,168(sp)
   22860:	dcc02d15 	stw	r19,180(sp)
   22864:	d8002915 	stw	zero,164(sp)
   22868:	d8003215 	stw	zero,200(sp)
   2286c:	843fbd04 	addi	r16,r16,-268
   22870:	0039883a 	mov	fp,zero
   22874:	003aa206 	br	21300 <__alt_data_end+0xfffe1300>
   22878:	0021883a 	mov	r16,zero
   2287c:	003e0706 	br	2209c <__alt_data_end+0xfffe209c>
   22880:	d9002c17 	ldw	r4,176(sp)
   22884:	d9801e04 	addi	r6,sp,120
   22888:	b80b883a 	mov	r5,r23
   2288c:	00276c80 	call	276c8 <__sprint_r>
   22890:	1039c91e 	bne	r2,zero,20fb8 <__alt_data_end+0xfffe0fb8>
   22894:	d8802617 	ldw	r2,152(sp)
   22898:	d9403317 	ldw	r5,204(sp)
   2289c:	d8c02017 	ldw	r3,128(sp)
   228a0:	da000404 	addi	r8,sp,16
   228a4:	2885c83a 	sub	r2,r5,r2
   228a8:	003dfb06 	br	22098 <__alt_data_end+0xfffe2098>
   228ac:	9080004c 	andi	r2,r18,1
   228b0:	103e8f1e 	bne	r2,zero,222f0 <__alt_data_end+0xfffe22f0>
   228b4:	d8802117 	ldw	r2,132(sp)
   228b8:	003e9e06 	br	22334 <__alt_data_end+0xfffe2334>
   228bc:	1025883a 	mov	r18,r2
   228c0:	0039883a 	mov	fp,zero
   228c4:	00800084 	movi	r2,2
   228c8:	003fd306 	br	22818 <__alt_data_end+0xfffe2818>
   228cc:	07000b44 	movi	fp,45
   228d0:	df002785 	stb	fp,158(sp)
   228d4:	003a4006 	br	211d8 <__alt_data_end+0xfffe11d8>
   228d8:	00c00b44 	movi	r3,45
   228dc:	d8c02785 	stb	r3,158(sp)
   228e0:	d8802a15 	stw	r2,168(sp)
   228e4:	dc802b17 	ldw	r18,172(sp)
   228e8:	d8002915 	stw	zero,164(sp)
   228ec:	07000b44 	movi	fp,45
   228f0:	003a8006 	br	212f4 <__alt_data_end+0xfffe12f4>
   228f4:	040000f4 	movhi	r16,3
   228f8:	843fb204 	addi	r16,r16,-312
   228fc:	003f4706 	br	2261c <__alt_data_end+0xfffe261c>
   22900:	d8c02d17 	ldw	r3,180(sp)
   22904:	d9002f17 	ldw	r4,188(sp)
   22908:	18800017 	ldw	r2,0(r3)
   2290c:	18c00104 	addi	r3,r3,4
   22910:	d8c02d15 	stw	r3,180(sp)
   22914:	11000015 	stw	r4,0(r2)
   22918:	0038dd06 	br	20c90 <__alt_data_end+0xfffe0c90>
   2291c:	dd802617 	ldw	r22,152(sp)
   22920:	00bfff44 	movi	r2,-3
   22924:	b0801c16 	blt	r22,r2,22998 <___vfprintf_internal_r+0x1de8>
   22928:	d9402917 	ldw	r5,164(sp)
   2292c:	2d801a16 	blt	r5,r22,22998 <___vfprintf_internal_r+0x1de8>
   22930:	dd803215 	stw	r22,200(sp)
   22934:	003e8906 	br	2235c <__alt_data_end+0xfffe235c>
   22938:	010000f4 	movhi	r4,3
   2293c:	213fbf84 	addi	r4,r4,-258
   22940:	d9002b15 	stw	r4,172(sp)
   22944:	003c9106 	br	21b8c <__alt_data_end+0xfffe1b8c>
   22948:	e005883a 	mov	r2,fp
   2294c:	003e7906 	br	22334 <__alt_data_end+0xfffe2334>
   22950:	d9402917 	ldw	r5,164(sp)
   22954:	df002783 	ldbu	fp,158(sp)
   22958:	dcc02d15 	stw	r19,180(sp)
   2295c:	d9402a15 	stw	r5,168(sp)
   22960:	d9402e15 	stw	r5,184(sp)
   22964:	d8002915 	stw	zero,164(sp)
   22968:	d8003215 	stw	zero,200(sp)
   2296c:	003a5d06 	br	212e4 <__alt_data_end+0xfffe12e4>
   22970:	9080004c 	andi	r2,r18,1
   22974:	0039883a 	mov	fp,zero
   22978:	10000426 	beq	r2,zero,2298c <___vfprintf_internal_r+0x1ddc>
   2297c:	00800c04 	movi	r2,48
   22980:	dc001dc4 	addi	r16,sp,119
   22984:	d8801dc5 	stb	r2,119(sp)
   22988:	003b8006 	br	2178c <__alt_data_end+0xfffe178c>
   2298c:	d8002e15 	stw	zero,184(sp)
   22990:	dc001e04 	addi	r16,sp,120
   22994:	003a4d06 	br	212cc <__alt_data_end+0xfffe12cc>
   22998:	8c7fff84 	addi	r17,r17,-2
   2299c:	b5bfffc4 	addi	r22,r22,-1
   229a0:	dd802615 	stw	r22,152(sp)
   229a4:	dc4022c5 	stb	r17,139(sp)
   229a8:	b000bf16 	blt	r22,zero,22ca8 <___vfprintf_internal_r+0x20f8>
   229ac:	00800ac4 	movi	r2,43
   229b0:	d8802305 	stb	r2,140(sp)
   229b4:	00800244 	movi	r2,9
   229b8:	15807016 	blt	r2,r22,22b7c <___vfprintf_internal_r+0x1fcc>
   229bc:	00800c04 	movi	r2,48
   229c0:	b5800c04 	addi	r22,r22,48
   229c4:	d8802345 	stb	r2,141(sp)
   229c8:	dd802385 	stb	r22,142(sp)
   229cc:	d88023c4 	addi	r2,sp,143
   229d0:	df0022c4 	addi	fp,sp,139
   229d4:	d8c03317 	ldw	r3,204(sp)
   229d8:	1739c83a 	sub	fp,r2,fp
   229dc:	d9003317 	ldw	r4,204(sp)
   229e0:	e0c7883a 	add	r3,fp,r3
   229e4:	df003a15 	stw	fp,232(sp)
   229e8:	d8c02e15 	stw	r3,184(sp)
   229ec:	00800044 	movi	r2,1
   229f0:	1100b30e 	bge	r2,r4,22cc0 <___vfprintf_internal_r+0x2110>
   229f4:	d8c02e17 	ldw	r3,184(sp)
   229f8:	18c00044 	addi	r3,r3,1
   229fc:	d8c02e15 	stw	r3,184(sp)
   22a00:	1805883a 	mov	r2,r3
   22a04:	1800ac16 	blt	r3,zero,22cb8 <___vfprintf_internal_r+0x2108>
   22a08:	d8003215 	stw	zero,200(sp)
   22a0c:	003e5d06 	br	22384 <__alt_data_end+0xfffe2384>
   22a10:	d9002c17 	ldw	r4,176(sp)
   22a14:	d9801e04 	addi	r6,sp,120
   22a18:	b80b883a 	mov	r5,r23
   22a1c:	00276c80 	call	276c8 <__sprint_r>
   22a20:	1039651e 	bne	r2,zero,20fb8 <__alt_data_end+0xfffe0fb8>
   22a24:	dc402617 	ldw	r17,152(sp)
   22a28:	d8c02017 	ldw	r3,128(sp)
   22a2c:	d8801f17 	ldw	r2,124(sp)
   22a30:	da000404 	addi	r8,sp,16
   22a34:	003ed606 	br	22590 <__alt_data_end+0xfffe2590>
   22a38:	582b883a 	mov	r21,r11
   22a3c:	d8002915 	stw	zero,164(sp)
   22a40:	0038bd06 	br	20d38 <__alt_data_end+0xfffe0d38>
   22a44:	d8802917 	ldw	r2,164(sp)
   22a48:	103e071e 	bne	r2,zero,22268 <__alt_data_end+0xfffe2268>
   22a4c:	dc002915 	stw	r16,164(sp)
   22a50:	003e0506 	br	22268 <__alt_data_end+0xfffe2268>
   22a54:	d9002917 	ldw	r4,164(sp)
   22a58:	20c00044 	addi	r3,r4,1
   22a5c:	003e0f06 	br	2229c <__alt_data_end+0xfffe229c>
   22a60:	01400184 	movi	r5,6
   22a64:	d9402915 	stw	r5,164(sp)
   22a68:	003dff06 	br	22268 <__alt_data_end+0xfffe2268>
   22a6c:	d8802104 	addi	r2,sp,132
   22a70:	d8800315 	stw	r2,12(sp)
   22a74:	d8802504 	addi	r2,sp,148
   22a78:	d8800215 	stw	r2,8(sp)
   22a7c:	d8802604 	addi	r2,sp,152
   22a80:	d8800115 	stw	r2,4(sp)
   22a84:	d8802917 	ldw	r2,164(sp)
   22a88:	d9403617 	ldw	r5,216(sp)
   22a8c:	d9002c17 	ldw	r4,176(sp)
   22a90:	d8800015 	stw	r2,0(sp)
   22a94:	01c000c4 	movi	r7,3
   22a98:	980d883a 	mov	r6,r19
   22a9c:	da003d15 	stw	r8,244(sp)
   22aa0:	00231d40 	call	231d4 <_dtoa_r>
   22aa4:	d8c02917 	ldw	r3,164(sp)
   22aa8:	da003d17 	ldw	r8,244(sp)
   22aac:	1021883a 	mov	r16,r2
   22ab0:	10f9883a 	add	fp,r2,r3
   22ab4:	81000007 	ldb	r4,0(r16)
   22ab8:	00800c04 	movi	r2,48
   22abc:	20805e26 	beq	r4,r2,22c38 <___vfprintf_internal_r+0x2088>
   22ac0:	d8c02617 	ldw	r3,152(sp)
   22ac4:	e0f9883a 	add	fp,fp,r3
   22ac8:	003e0a06 	br	222f4 <__alt_data_end+0xfffe22f4>
   22acc:	00c00b44 	movi	r3,45
   22ad0:	24e0003c 	xorhi	r19,r4,32768
   22ad4:	d8c02a05 	stb	r3,168(sp)
   22ad8:	003de906 	br	22280 <__alt_data_end+0xfffe2280>
   22adc:	d8c03217 	ldw	r3,200(sp)
   22ae0:	00c07a0e 	bge	zero,r3,22ccc <___vfprintf_internal_r+0x211c>
   22ae4:	00800044 	movi	r2,1
   22ae8:	d9003317 	ldw	r4,204(sp)
   22aec:	1105883a 	add	r2,r2,r4
   22af0:	d8802e15 	stw	r2,184(sp)
   22af4:	10004e16 	blt	r2,zero,22c30 <___vfprintf_internal_r+0x2080>
   22af8:	044019c4 	movi	r17,103
   22afc:	003e2106 	br	22384 <__alt_data_end+0xfffe2384>
   22b00:	d9002917 	ldw	r4,164(sp)
   22b04:	d8802104 	addi	r2,sp,132
   22b08:	d8800315 	stw	r2,12(sp)
   22b0c:	d9000015 	stw	r4,0(sp)
   22b10:	d8802504 	addi	r2,sp,148
   22b14:	d9403617 	ldw	r5,216(sp)
   22b18:	d9002c17 	ldw	r4,176(sp)
   22b1c:	d8800215 	stw	r2,8(sp)
   22b20:	d8802604 	addi	r2,sp,152
   22b24:	d8800115 	stw	r2,4(sp)
   22b28:	01c000c4 	movi	r7,3
   22b2c:	980d883a 	mov	r6,r19
   22b30:	da003d15 	stw	r8,244(sp)
   22b34:	00231d40 	call	231d4 <_dtoa_r>
   22b38:	d8c02917 	ldw	r3,164(sp)
   22b3c:	da003d17 	ldw	r8,244(sp)
   22b40:	1021883a 	mov	r16,r2
   22b44:	00801184 	movi	r2,70
   22b48:	80f9883a 	add	fp,r16,r3
   22b4c:	88bfd926 	beq	r17,r2,22ab4 <__alt_data_end+0xfffe2ab4>
   22b50:	003de806 	br	222f4 <__alt_data_end+0xfffe22f4>
   22b54:	d9002917 	ldw	r4,164(sp)
   22b58:	00c04d0e 	bge	zero,r3,22c90 <___vfprintf_internal_r+0x20e0>
   22b5c:	2000441e 	bne	r4,zero,22c70 <___vfprintf_internal_r+0x20c0>
   22b60:	9480004c 	andi	r18,r18,1
   22b64:	9000421e 	bne	r18,zero,22c70 <___vfprintf_internal_r+0x20c0>
   22b68:	1805883a 	mov	r2,r3
   22b6c:	18007016 	blt	r3,zero,22d30 <___vfprintf_internal_r+0x2180>
   22b70:	d8c03217 	ldw	r3,200(sp)
   22b74:	d8c02e15 	stw	r3,184(sp)
   22b78:	003e0206 	br	22384 <__alt_data_end+0xfffe2384>
   22b7c:	df0022c4 	addi	fp,sp,139
   22b80:	dc002915 	stw	r16,164(sp)
   22b84:	4027883a 	mov	r19,r8
   22b88:	e021883a 	mov	r16,fp
   22b8c:	b009883a 	mov	r4,r22
   22b90:	01400284 	movi	r5,10
   22b94:	0020a140 	call	20a14 <__modsi3>
   22b98:	10800c04 	addi	r2,r2,48
   22b9c:	843fffc4 	addi	r16,r16,-1
   22ba0:	b009883a 	mov	r4,r22
   22ba4:	01400284 	movi	r5,10
   22ba8:	80800005 	stb	r2,0(r16)
   22bac:	00209900 	call	20990 <__divsi3>
   22bb0:	102d883a 	mov	r22,r2
   22bb4:	00800244 	movi	r2,9
   22bb8:	15bff416 	blt	r2,r22,22b8c <__alt_data_end+0xfffe2b8c>
   22bbc:	9811883a 	mov	r8,r19
   22bc0:	b0800c04 	addi	r2,r22,48
   22bc4:	8027883a 	mov	r19,r16
   22bc8:	997fffc4 	addi	r5,r19,-1
   22bcc:	98bfffc5 	stb	r2,-1(r19)
   22bd0:	dc002917 	ldw	r16,164(sp)
   22bd4:	2f006a2e 	bgeu	r5,fp,22d80 <___vfprintf_internal_r+0x21d0>
   22bd8:	d9c02384 	addi	r7,sp,142
   22bdc:	3ccfc83a 	sub	r7,r7,r19
   22be0:	d9002344 	addi	r4,sp,141
   22be4:	e1cf883a 	add	r7,fp,r7
   22be8:	00000106 	br	22bf0 <___vfprintf_internal_r+0x2040>
   22bec:	28800003 	ldbu	r2,0(r5)
   22bf0:	20800005 	stb	r2,0(r4)
   22bf4:	21000044 	addi	r4,r4,1
   22bf8:	29400044 	addi	r5,r5,1
   22bfc:	393ffb1e 	bne	r7,r4,22bec <__alt_data_end+0xfffe2bec>
   22c00:	d8802304 	addi	r2,sp,140
   22c04:	14c5c83a 	sub	r2,r2,r19
   22c08:	d8c02344 	addi	r3,sp,141
   22c0c:	1885883a 	add	r2,r3,r2
   22c10:	003f7006 	br	229d4 <__alt_data_end+0xfffe29d4>
   22c14:	0005883a 	mov	r2,zero
   22c18:	003f0f06 	br	22858 <__alt_data_end+0xfffe2858>
   22c1c:	d8c03217 	ldw	r3,200(sp)
   22c20:	18c00044 	addi	r3,r3,1
   22c24:	d8c02e15 	stw	r3,184(sp)
   22c28:	1805883a 	mov	r2,r3
   22c2c:	183fb20e 	bge	r3,zero,22af8 <__alt_data_end+0xfffe2af8>
   22c30:	0005883a 	mov	r2,zero
   22c34:	003fb006 	br	22af8 <__alt_data_end+0xfffe2af8>
   22c38:	d9003617 	ldw	r4,216(sp)
   22c3c:	000d883a 	mov	r6,zero
   22c40:	000f883a 	mov	r7,zero
   22c44:	980b883a 	mov	r5,r19
   22c48:	d8c03c15 	stw	r3,240(sp)
   22c4c:	da003d15 	stw	r8,244(sp)
   22c50:	002bd080 	call	2bd08 <__eqdf2>
   22c54:	d8c03c17 	ldw	r3,240(sp)
   22c58:	da003d17 	ldw	r8,244(sp)
   22c5c:	103f9826 	beq	r2,zero,22ac0 <__alt_data_end+0xfffe2ac0>
   22c60:	00800044 	movi	r2,1
   22c64:	10c7c83a 	sub	r3,r2,r3
   22c68:	d8c02615 	stw	r3,152(sp)
   22c6c:	003f9506 	br	22ac4 <__alt_data_end+0xfffe2ac4>
   22c70:	d9002917 	ldw	r4,164(sp)
   22c74:	d8c03217 	ldw	r3,200(sp)
   22c78:	20800044 	addi	r2,r4,1
   22c7c:	1885883a 	add	r2,r3,r2
   22c80:	d8802e15 	stw	r2,184(sp)
   22c84:	103dbf0e 	bge	r2,zero,22384 <__alt_data_end+0xfffe2384>
   22c88:	0005883a 	mov	r2,zero
   22c8c:	003dbd06 	br	22384 <__alt_data_end+0xfffe2384>
   22c90:	2000211e 	bne	r4,zero,22d18 <___vfprintf_internal_r+0x2168>
   22c94:	9480004c 	andi	r18,r18,1
   22c98:	90001f1e 	bne	r18,zero,22d18 <___vfprintf_internal_r+0x2168>
   22c9c:	00800044 	movi	r2,1
   22ca0:	d8802e15 	stw	r2,184(sp)
   22ca4:	003db706 	br	22384 <__alt_data_end+0xfffe2384>
   22ca8:	00800b44 	movi	r2,45
   22cac:	05adc83a 	sub	r22,zero,r22
   22cb0:	d8802305 	stb	r2,140(sp)
   22cb4:	003f3f06 	br	229b4 <__alt_data_end+0xfffe29b4>
   22cb8:	0005883a 	mov	r2,zero
   22cbc:	003f5206 	br	22a08 <__alt_data_end+0xfffe2a08>
   22cc0:	90a4703a 	and	r18,r18,r2
   22cc4:	903f4e26 	beq	r18,zero,22a00 <__alt_data_end+0xfffe2a00>
   22cc8:	003f4a06 	br	229f4 <__alt_data_end+0xfffe29f4>
   22ccc:	00800084 	movi	r2,2
   22cd0:	10c5c83a 	sub	r2,r2,r3
   22cd4:	003f8406 	br	22ae8 <__alt_data_end+0xfffe2ae8>
   22cd8:	d8802d17 	ldw	r2,180(sp)
   22cdc:	d9002d17 	ldw	r4,180(sp)
   22ce0:	ac400043 	ldbu	r17,1(r21)
   22ce4:	10800017 	ldw	r2,0(r2)
   22ce8:	582b883a 	mov	r21,r11
   22cec:	d8802915 	stw	r2,164(sp)
   22cf0:	20800104 	addi	r2,r4,4
   22cf4:	d9002917 	ldw	r4,164(sp)
   22cf8:	d8802d15 	stw	r2,180(sp)
   22cfc:	203e7a0e 	bge	r4,zero,226e8 <__alt_data_end+0xfffe26e8>
   22d00:	8c403fcc 	andi	r17,r17,255
   22d04:	00bfffc4 	movi	r2,-1
   22d08:	8c40201c 	xori	r17,r17,128
   22d0c:	d8802915 	stw	r2,164(sp)
   22d10:	8c7fe004 	addi	r17,r17,-128
   22d14:	00380706 	br	20d34 <__alt_data_end+0xfffe0d34>
   22d18:	d8c02917 	ldw	r3,164(sp)
   22d1c:	18c00084 	addi	r3,r3,2
   22d20:	d8c02e15 	stw	r3,184(sp)
   22d24:	1805883a 	mov	r2,r3
   22d28:	183d960e 	bge	r3,zero,22384 <__alt_data_end+0xfffe2384>
   22d2c:	003fd606 	br	22c88 <__alt_data_end+0xfffe2c88>
   22d30:	0005883a 	mov	r2,zero
   22d34:	003f8e06 	br	22b70 <__alt_data_end+0xfffe2b70>
   22d38:	9080004c 	andi	r2,r18,1
   22d3c:	103f811e 	bne	r2,zero,22b44 <__alt_data_end+0xfffe2b44>
   22d40:	d8802117 	ldw	r2,132(sp)
   22d44:	1405c83a 	sub	r2,r2,r16
   22d48:	d8803315 	stw	r2,204(sp)
   22d4c:	b47ef326 	beq	r22,r17,2291c <__alt_data_end+0xfffe291c>
   22d50:	dd802617 	ldw	r22,152(sp)
   22d54:	003f1106 	br	2299c <__alt_data_end+0xfffe299c>
   22d58:	d9c02785 	stb	r7,158(sp)
   22d5c:	00390406 	br	21170 <__alt_data_end+0xfffe1170>
   22d60:	d9c02785 	stb	r7,158(sp)
   22d64:	0038d306 	br	210b4 <__alt_data_end+0xfffe10b4>
   22d68:	d9c02785 	stb	r7,158(sp)
   22d6c:	003a6106 	br	216f4 <__alt_data_end+0xfffe16f4>
   22d70:	d9c02785 	stb	r7,158(sp)
   22d74:	003af806 	br	21958 <__alt_data_end+0xfffe1958>
   22d78:	0005883a 	mov	r2,zero
   22d7c:	003d7e06 	br	22378 <__alt_data_end+0xfffe2378>
   22d80:	d8802344 	addi	r2,sp,141
   22d84:	003f1306 	br	229d4 <__alt_data_end+0xfffe29d4>
   22d88:	d9c02785 	stb	r7,158(sp)
   22d8c:	00392306 	br	2121c <__alt_data_end+0xfffe121c>
   22d90:	d9c02785 	stb	r7,158(sp)
   22d94:	003aa906 	br	2183c <__alt_data_end+0xfffe183c>
   22d98:	d9c02785 	stb	r7,158(sp)
   22d9c:	003a3d06 	br	21694 <__alt_data_end+0xfffe1694>
   22da0:	d9c02785 	stb	r7,158(sp)
   22da4:	003aca06 	br	218d0 <__alt_data_end+0xfffe18d0>

00022da8 <__vfprintf_internal>:
   22da8:	008000f4 	movhi	r2,3
   22dac:	10871a04 	addi	r2,r2,7272
   22db0:	300f883a 	mov	r7,r6
   22db4:	280d883a 	mov	r6,r5
   22db8:	200b883a 	mov	r5,r4
   22dbc:	11000017 	ldw	r4,0(r2)
   22dc0:	0020bb01 	jmpi	20bb0 <___vfprintf_internal_r>

00022dc4 <__sbprintf>:
   22dc4:	2880030b 	ldhu	r2,12(r5)
   22dc8:	2ac01917 	ldw	r11,100(r5)
   22dcc:	2a80038b 	ldhu	r10,14(r5)
   22dd0:	2a400717 	ldw	r9,28(r5)
   22dd4:	2a000917 	ldw	r8,36(r5)
   22dd8:	defee204 	addi	sp,sp,-1144
   22ddc:	00c10004 	movi	r3,1024
   22de0:	dc011a15 	stw	r16,1128(sp)
   22de4:	10bfff4c 	andi	r2,r2,65533
   22de8:	2821883a 	mov	r16,r5
   22dec:	d8cb883a 	add	r5,sp,r3
   22df0:	dc811c15 	stw	r18,1136(sp)
   22df4:	dc411b15 	stw	r17,1132(sp)
   22df8:	dfc11d15 	stw	ra,1140(sp)
   22dfc:	2025883a 	mov	r18,r4
   22e00:	d881030d 	sth	r2,1036(sp)
   22e04:	dac11915 	stw	r11,1124(sp)
   22e08:	da81038d 	sth	r10,1038(sp)
   22e0c:	da410715 	stw	r9,1052(sp)
   22e10:	da010915 	stw	r8,1060(sp)
   22e14:	dec10015 	stw	sp,1024(sp)
   22e18:	dec10415 	stw	sp,1040(sp)
   22e1c:	d8c10215 	stw	r3,1032(sp)
   22e20:	d8c10515 	stw	r3,1044(sp)
   22e24:	d8010615 	stw	zero,1048(sp)
   22e28:	0020bb00 	call	20bb0 <___vfprintf_internal_r>
   22e2c:	1023883a 	mov	r17,r2
   22e30:	10000416 	blt	r2,zero,22e44 <__sbprintf+0x80>
   22e34:	d9410004 	addi	r5,sp,1024
   22e38:	9009883a 	mov	r4,r18
   22e3c:	0024a780 	call	24a78 <_fflush_r>
   22e40:	10000d1e 	bne	r2,zero,22e78 <__sbprintf+0xb4>
   22e44:	d881030b 	ldhu	r2,1036(sp)
   22e48:	1080100c 	andi	r2,r2,64
   22e4c:	10000326 	beq	r2,zero,22e5c <__sbprintf+0x98>
   22e50:	8080030b 	ldhu	r2,12(r16)
   22e54:	10801014 	ori	r2,r2,64
   22e58:	8080030d 	sth	r2,12(r16)
   22e5c:	8805883a 	mov	r2,r17
   22e60:	dfc11d17 	ldw	ra,1140(sp)
   22e64:	dc811c17 	ldw	r18,1136(sp)
   22e68:	dc411b17 	ldw	r17,1132(sp)
   22e6c:	dc011a17 	ldw	r16,1128(sp)
   22e70:	dec11e04 	addi	sp,sp,1144
   22e74:	f800283a 	ret
   22e78:	047fffc4 	movi	r17,-1
   22e7c:	003ff106 	br	22e44 <__alt_data_end+0xfffe2e44>

00022e80 <__swsetup_r>:
   22e80:	008000f4 	movhi	r2,3
   22e84:	defffd04 	addi	sp,sp,-12
   22e88:	10871a04 	addi	r2,r2,7272
   22e8c:	dc400115 	stw	r17,4(sp)
   22e90:	2023883a 	mov	r17,r4
   22e94:	11000017 	ldw	r4,0(r2)
   22e98:	dc000015 	stw	r16,0(sp)
   22e9c:	dfc00215 	stw	ra,8(sp)
   22ea0:	2821883a 	mov	r16,r5
   22ea4:	20000226 	beq	r4,zero,22eb0 <__swsetup_r+0x30>
   22ea8:	20800e17 	ldw	r2,56(r4)
   22eac:	10003126 	beq	r2,zero,22f74 <__swsetup_r+0xf4>
   22eb0:	8080030b 	ldhu	r2,12(r16)
   22eb4:	10c0020c 	andi	r3,r2,8
   22eb8:	1009883a 	mov	r4,r2
   22ebc:	18000f26 	beq	r3,zero,22efc <__swsetup_r+0x7c>
   22ec0:	80c00417 	ldw	r3,16(r16)
   22ec4:	18001526 	beq	r3,zero,22f1c <__swsetup_r+0x9c>
   22ec8:	1100004c 	andi	r4,r2,1
   22ecc:	20001c1e 	bne	r4,zero,22f40 <__swsetup_r+0xc0>
   22ed0:	1080008c 	andi	r2,r2,2
   22ed4:	1000291e 	bne	r2,zero,22f7c <__swsetup_r+0xfc>
   22ed8:	80800517 	ldw	r2,20(r16)
   22edc:	80800215 	stw	r2,8(r16)
   22ee0:	18001c26 	beq	r3,zero,22f54 <__swsetup_r+0xd4>
   22ee4:	0005883a 	mov	r2,zero
   22ee8:	dfc00217 	ldw	ra,8(sp)
   22eec:	dc400117 	ldw	r17,4(sp)
   22ef0:	dc000017 	ldw	r16,0(sp)
   22ef4:	dec00304 	addi	sp,sp,12
   22ef8:	f800283a 	ret
   22efc:	2080040c 	andi	r2,r4,16
   22f00:	10002e26 	beq	r2,zero,22fbc <__swsetup_r+0x13c>
   22f04:	2080010c 	andi	r2,r4,4
   22f08:	10001e1e 	bne	r2,zero,22f84 <__swsetup_r+0x104>
   22f0c:	80c00417 	ldw	r3,16(r16)
   22f10:	20800214 	ori	r2,r4,8
   22f14:	8080030d 	sth	r2,12(r16)
   22f18:	183feb1e 	bne	r3,zero,22ec8 <__alt_data_end+0xfffe2ec8>
   22f1c:	1100a00c 	andi	r4,r2,640
   22f20:	01408004 	movi	r5,512
   22f24:	217fe826 	beq	r4,r5,22ec8 <__alt_data_end+0xfffe2ec8>
   22f28:	800b883a 	mov	r5,r16
   22f2c:	8809883a 	mov	r4,r17
   22f30:	002553c0 	call	2553c <__smakebuf_r>
   22f34:	8080030b 	ldhu	r2,12(r16)
   22f38:	80c00417 	ldw	r3,16(r16)
   22f3c:	003fe206 	br	22ec8 <__alt_data_end+0xfffe2ec8>
   22f40:	80800517 	ldw	r2,20(r16)
   22f44:	80000215 	stw	zero,8(r16)
   22f48:	0085c83a 	sub	r2,zero,r2
   22f4c:	80800615 	stw	r2,24(r16)
   22f50:	183fe41e 	bne	r3,zero,22ee4 <__alt_data_end+0xfffe2ee4>
   22f54:	80c0030b 	ldhu	r3,12(r16)
   22f58:	0005883a 	mov	r2,zero
   22f5c:	1900200c 	andi	r4,r3,128
   22f60:	203fe126 	beq	r4,zero,22ee8 <__alt_data_end+0xfffe2ee8>
   22f64:	18c01014 	ori	r3,r3,64
   22f68:	80c0030d 	sth	r3,12(r16)
   22f6c:	00bfffc4 	movi	r2,-1
   22f70:	003fdd06 	br	22ee8 <__alt_data_end+0xfffe2ee8>
   22f74:	0024e540 	call	24e54 <__sinit>
   22f78:	003fcd06 	br	22eb0 <__alt_data_end+0xfffe2eb0>
   22f7c:	0005883a 	mov	r2,zero
   22f80:	003fd606 	br	22edc <__alt_data_end+0xfffe2edc>
   22f84:	81400c17 	ldw	r5,48(r16)
   22f88:	28000626 	beq	r5,zero,22fa4 <__swsetup_r+0x124>
   22f8c:	80801004 	addi	r2,r16,64
   22f90:	28800326 	beq	r5,r2,22fa0 <__swsetup_r+0x120>
   22f94:	8809883a 	mov	r4,r17
   22f98:	0024fc80 	call	24fc8 <_free_r>
   22f9c:	8100030b 	ldhu	r4,12(r16)
   22fa0:	80000c15 	stw	zero,48(r16)
   22fa4:	80c00417 	ldw	r3,16(r16)
   22fa8:	00bff6c4 	movi	r2,-37
   22fac:	1108703a 	and	r4,r2,r4
   22fb0:	80000115 	stw	zero,4(r16)
   22fb4:	80c00015 	stw	r3,0(r16)
   22fb8:	003fd506 	br	22f10 <__alt_data_end+0xfffe2f10>
   22fbc:	00800244 	movi	r2,9
   22fc0:	88800015 	stw	r2,0(r17)
   22fc4:	20801014 	ori	r2,r4,64
   22fc8:	8080030d 	sth	r2,12(r16)
   22fcc:	00bfffc4 	movi	r2,-1
   22fd0:	003fc506 	br	22ee8 <__alt_data_end+0xfffe2ee8>

00022fd4 <quorem>:
   22fd4:	defff704 	addi	sp,sp,-36
   22fd8:	dc800215 	stw	r18,8(sp)
   22fdc:	20800417 	ldw	r2,16(r4)
   22fe0:	2c800417 	ldw	r18,16(r5)
   22fe4:	dfc00815 	stw	ra,32(sp)
   22fe8:	ddc00715 	stw	r23,28(sp)
   22fec:	dd800615 	stw	r22,24(sp)
   22ff0:	dd400515 	stw	r21,20(sp)
   22ff4:	dd000415 	stw	r20,16(sp)
   22ff8:	dcc00315 	stw	r19,12(sp)
   22ffc:	dc400115 	stw	r17,4(sp)
   23000:	dc000015 	stw	r16,0(sp)
   23004:	14807116 	blt	r2,r18,231cc <quorem+0x1f8>
   23008:	94bfffc4 	addi	r18,r18,-1
   2300c:	94ad883a 	add	r22,r18,r18
   23010:	b5ad883a 	add	r22,r22,r22
   23014:	2c400504 	addi	r17,r5,20
   23018:	8da9883a 	add	r20,r17,r22
   2301c:	25400504 	addi	r21,r4,20
   23020:	282f883a 	mov	r23,r5
   23024:	adad883a 	add	r22,r21,r22
   23028:	a1400017 	ldw	r5,0(r20)
   2302c:	2021883a 	mov	r16,r4
   23030:	b1000017 	ldw	r4,0(r22)
   23034:	29400044 	addi	r5,r5,1
   23038:	0020a880 	call	20a88 <__udivsi3>
   2303c:	1027883a 	mov	r19,r2
   23040:	10002c26 	beq	r2,zero,230f4 <quorem+0x120>
   23044:	a813883a 	mov	r9,r21
   23048:	880b883a 	mov	r5,r17
   2304c:	0009883a 	mov	r4,zero
   23050:	000d883a 	mov	r6,zero
   23054:	2a000017 	ldw	r8,0(r5)
   23058:	49c00017 	ldw	r7,0(r9)
   2305c:	29400104 	addi	r5,r5,4
   23060:	40bfffcc 	andi	r2,r8,65535
   23064:	14c5383a 	mul	r2,r2,r19
   23068:	4010d43a 	srli	r8,r8,16
   2306c:	38ffffcc 	andi	r3,r7,65535
   23070:	1105883a 	add	r2,r2,r4
   23074:	1008d43a 	srli	r4,r2,16
   23078:	44d1383a 	mul	r8,r8,r19
   2307c:	198d883a 	add	r6,r3,r6
   23080:	10ffffcc 	andi	r3,r2,65535
   23084:	30c7c83a 	sub	r3,r6,r3
   23088:	380ed43a 	srli	r7,r7,16
   2308c:	4105883a 	add	r2,r8,r4
   23090:	180dd43a 	srai	r6,r3,16
   23094:	113fffcc 	andi	r4,r2,65535
   23098:	390fc83a 	sub	r7,r7,r4
   2309c:	398d883a 	add	r6,r7,r6
   230a0:	300e943a 	slli	r7,r6,16
   230a4:	18ffffcc 	andi	r3,r3,65535
   230a8:	1008d43a 	srli	r4,r2,16
   230ac:	38ceb03a 	or	r7,r7,r3
   230b0:	49c00015 	stw	r7,0(r9)
   230b4:	300dd43a 	srai	r6,r6,16
   230b8:	4a400104 	addi	r9,r9,4
   230bc:	a17fe52e 	bgeu	r20,r5,23054 <__alt_data_end+0xfffe3054>
   230c0:	b0800017 	ldw	r2,0(r22)
   230c4:	10000b1e 	bne	r2,zero,230f4 <quorem+0x120>
   230c8:	b0bfff04 	addi	r2,r22,-4
   230cc:	a880082e 	bgeu	r21,r2,230f0 <quorem+0x11c>
   230d0:	b0ffff17 	ldw	r3,-4(r22)
   230d4:	18000326 	beq	r3,zero,230e4 <quorem+0x110>
   230d8:	00000506 	br	230f0 <quorem+0x11c>
   230dc:	10c00017 	ldw	r3,0(r2)
   230e0:	1800031e 	bne	r3,zero,230f0 <quorem+0x11c>
   230e4:	10bfff04 	addi	r2,r2,-4
   230e8:	94bfffc4 	addi	r18,r18,-1
   230ec:	a8bffb36 	bltu	r21,r2,230dc <__alt_data_end+0xfffe30dc>
   230f0:	84800415 	stw	r18,16(r16)
   230f4:	b80b883a 	mov	r5,r23
   230f8:	8009883a 	mov	r4,r16
   230fc:	0026b200 	call	26b20 <__mcmp>
   23100:	10002616 	blt	r2,zero,2319c <quorem+0x1c8>
   23104:	9cc00044 	addi	r19,r19,1
   23108:	a805883a 	mov	r2,r21
   2310c:	000b883a 	mov	r5,zero
   23110:	11000017 	ldw	r4,0(r2)
   23114:	89800017 	ldw	r6,0(r17)
   23118:	10800104 	addi	r2,r2,4
   2311c:	20ffffcc 	andi	r3,r4,65535
   23120:	194b883a 	add	r5,r3,r5
   23124:	30ffffcc 	andi	r3,r6,65535
   23128:	28c7c83a 	sub	r3,r5,r3
   2312c:	300cd43a 	srli	r6,r6,16
   23130:	2008d43a 	srli	r4,r4,16
   23134:	180bd43a 	srai	r5,r3,16
   23138:	18ffffcc 	andi	r3,r3,65535
   2313c:	2189c83a 	sub	r4,r4,r6
   23140:	2149883a 	add	r4,r4,r5
   23144:	200c943a 	slli	r6,r4,16
   23148:	8c400104 	addi	r17,r17,4
   2314c:	200bd43a 	srai	r5,r4,16
   23150:	30c6b03a 	or	r3,r6,r3
   23154:	10ffff15 	stw	r3,-4(r2)
   23158:	a47fed2e 	bgeu	r20,r17,23110 <__alt_data_end+0xfffe3110>
   2315c:	9485883a 	add	r2,r18,r18
   23160:	1085883a 	add	r2,r2,r2
   23164:	a887883a 	add	r3,r21,r2
   23168:	18800017 	ldw	r2,0(r3)
   2316c:	10000b1e 	bne	r2,zero,2319c <quorem+0x1c8>
   23170:	18bfff04 	addi	r2,r3,-4
   23174:	a880082e 	bgeu	r21,r2,23198 <quorem+0x1c4>
   23178:	18ffff17 	ldw	r3,-4(r3)
   2317c:	18000326 	beq	r3,zero,2318c <quorem+0x1b8>
   23180:	00000506 	br	23198 <quorem+0x1c4>
   23184:	10c00017 	ldw	r3,0(r2)
   23188:	1800031e 	bne	r3,zero,23198 <quorem+0x1c4>
   2318c:	10bfff04 	addi	r2,r2,-4
   23190:	94bfffc4 	addi	r18,r18,-1
   23194:	a8bffb36 	bltu	r21,r2,23184 <__alt_data_end+0xfffe3184>
   23198:	84800415 	stw	r18,16(r16)
   2319c:	9805883a 	mov	r2,r19
   231a0:	dfc00817 	ldw	ra,32(sp)
   231a4:	ddc00717 	ldw	r23,28(sp)
   231a8:	dd800617 	ldw	r22,24(sp)
   231ac:	dd400517 	ldw	r21,20(sp)
   231b0:	dd000417 	ldw	r20,16(sp)
   231b4:	dcc00317 	ldw	r19,12(sp)
   231b8:	dc800217 	ldw	r18,8(sp)
   231bc:	dc400117 	ldw	r17,4(sp)
   231c0:	dc000017 	ldw	r16,0(sp)
   231c4:	dec00904 	addi	sp,sp,36
   231c8:	f800283a 	ret
   231cc:	0005883a 	mov	r2,zero
   231d0:	003ff306 	br	231a0 <__alt_data_end+0xfffe31a0>

000231d4 <_dtoa_r>:
   231d4:	20801017 	ldw	r2,64(r4)
   231d8:	deffde04 	addi	sp,sp,-136
   231dc:	df002015 	stw	fp,128(sp)
   231e0:	dcc01b15 	stw	r19,108(sp)
   231e4:	dc801a15 	stw	r18,104(sp)
   231e8:	dc401915 	stw	r17,100(sp)
   231ec:	dc001815 	stw	r16,96(sp)
   231f0:	dfc02115 	stw	ra,132(sp)
   231f4:	ddc01f15 	stw	r23,124(sp)
   231f8:	dd801e15 	stw	r22,120(sp)
   231fc:	dd401d15 	stw	r21,116(sp)
   23200:	dd001c15 	stw	r20,112(sp)
   23204:	d9c00315 	stw	r7,12(sp)
   23208:	2039883a 	mov	fp,r4
   2320c:	3023883a 	mov	r17,r6
   23210:	2825883a 	mov	r18,r5
   23214:	dc002417 	ldw	r16,144(sp)
   23218:	3027883a 	mov	r19,r6
   2321c:	10000826 	beq	r2,zero,23240 <_dtoa_r+0x6c>
   23220:	21801117 	ldw	r6,68(r4)
   23224:	00c00044 	movi	r3,1
   23228:	100b883a 	mov	r5,r2
   2322c:	1986983a 	sll	r3,r3,r6
   23230:	11800115 	stw	r6,4(r2)
   23234:	10c00215 	stw	r3,8(r2)
   23238:	00263000 	call	26300 <_Bfree>
   2323c:	e0001015 	stw	zero,64(fp)
   23240:	88002e16 	blt	r17,zero,232fc <_dtoa_r+0x128>
   23244:	80000015 	stw	zero,0(r16)
   23248:	889ffc2c 	andhi	r2,r17,32752
   2324c:	00dffc34 	movhi	r3,32752
   23250:	10c01c26 	beq	r2,r3,232c4 <_dtoa_r+0xf0>
   23254:	000d883a 	mov	r6,zero
   23258:	000f883a 	mov	r7,zero
   2325c:	9009883a 	mov	r4,r18
   23260:	980b883a 	mov	r5,r19
   23264:	002bd080 	call	2bd08 <__eqdf2>
   23268:	10002b1e 	bne	r2,zero,23318 <_dtoa_r+0x144>
   2326c:	d9c02317 	ldw	r7,140(sp)
   23270:	00800044 	movi	r2,1
   23274:	38800015 	stw	r2,0(r7)
   23278:	d8802517 	ldw	r2,148(sp)
   2327c:	10019e26 	beq	r2,zero,238f8 <_dtoa_r+0x724>
   23280:	d8c02517 	ldw	r3,148(sp)
   23284:	008000f4 	movhi	r2,3
   23288:	10bfbf44 	addi	r2,r2,-259
   2328c:	18800015 	stw	r2,0(r3)
   23290:	10bfffc4 	addi	r2,r2,-1
   23294:	dfc02117 	ldw	ra,132(sp)
   23298:	df002017 	ldw	fp,128(sp)
   2329c:	ddc01f17 	ldw	r23,124(sp)
   232a0:	dd801e17 	ldw	r22,120(sp)
   232a4:	dd401d17 	ldw	r21,116(sp)
   232a8:	dd001c17 	ldw	r20,112(sp)
   232ac:	dcc01b17 	ldw	r19,108(sp)
   232b0:	dc801a17 	ldw	r18,104(sp)
   232b4:	dc401917 	ldw	r17,100(sp)
   232b8:	dc001817 	ldw	r16,96(sp)
   232bc:	dec02204 	addi	sp,sp,136
   232c0:	f800283a 	ret
   232c4:	d8c02317 	ldw	r3,140(sp)
   232c8:	0089c3c4 	movi	r2,9999
   232cc:	18800015 	stw	r2,0(r3)
   232d0:	90017726 	beq	r18,zero,238b0 <_dtoa_r+0x6dc>
   232d4:	008000f4 	movhi	r2,3
   232d8:	10bfcb04 	addi	r2,r2,-212
   232dc:	d9002517 	ldw	r4,148(sp)
   232e0:	203fec26 	beq	r4,zero,23294 <__alt_data_end+0xfffe3294>
   232e4:	10c000c7 	ldb	r3,3(r2)
   232e8:	1801781e 	bne	r3,zero,238cc <_dtoa_r+0x6f8>
   232ec:	10c000c4 	addi	r3,r2,3
   232f0:	d9802517 	ldw	r6,148(sp)
   232f4:	30c00015 	stw	r3,0(r6)
   232f8:	003fe606 	br	23294 <__alt_data_end+0xfffe3294>
   232fc:	04e00034 	movhi	r19,32768
   23300:	9cffffc4 	addi	r19,r19,-1
   23304:	00800044 	movi	r2,1
   23308:	8ce6703a 	and	r19,r17,r19
   2330c:	80800015 	stw	r2,0(r16)
   23310:	9823883a 	mov	r17,r19
   23314:	003fcc06 	br	23248 <__alt_data_end+0xfffe3248>
   23318:	d8800204 	addi	r2,sp,8
   2331c:	d8800015 	stw	r2,0(sp)
   23320:	d9c00104 	addi	r7,sp,4
   23324:	900b883a 	mov	r5,r18
   23328:	980d883a 	mov	r6,r19
   2332c:	e009883a 	mov	r4,fp
   23330:	8820d53a 	srli	r16,r17,20
   23334:	0026eec0 	call	26eec <__d2b>
   23338:	d8800915 	stw	r2,36(sp)
   2333c:	8001651e 	bne	r16,zero,238d4 <_dtoa_r+0x700>
   23340:	dd800217 	ldw	r22,8(sp)
   23344:	dc000117 	ldw	r16,4(sp)
   23348:	00800804 	movi	r2,32
   2334c:	b421883a 	add	r16,r22,r16
   23350:	80c10c84 	addi	r3,r16,1074
   23354:	10c2d10e 	bge	r2,r3,23e9c <_dtoa_r+0xcc8>
   23358:	00801004 	movi	r2,64
   2335c:	81010484 	addi	r4,r16,1042
   23360:	10c7c83a 	sub	r3,r2,r3
   23364:	9108d83a 	srl	r4,r18,r4
   23368:	88e2983a 	sll	r17,r17,r3
   2336c:	2448b03a 	or	r4,r4,r17
   23370:	002d0d00 	call	2d0d0 <__floatunsidf>
   23374:	017f8434 	movhi	r5,65040
   23378:	01800044 	movi	r6,1
   2337c:	1009883a 	mov	r4,r2
   23380:	194b883a 	add	r5,r3,r5
   23384:	843fffc4 	addi	r16,r16,-1
   23388:	d9801115 	stw	r6,68(sp)
   2338c:	000d883a 	mov	r6,zero
   23390:	01cffe34 	movhi	r7,16376
   23394:	002c6780 	call	2c678 <__subdf3>
   23398:	0198dbf4 	movhi	r6,25455
   2339c:	01cff4f4 	movhi	r7,16339
   233a0:	3190d844 	addi	r6,r6,17249
   233a4:	39e1e9c4 	addi	r7,r7,-30809
   233a8:	1009883a 	mov	r4,r2
   233ac:	180b883a 	mov	r5,r3
   233b0:	002bf600 	call	2bf60 <__muldf3>
   233b4:	01a2d874 	movhi	r6,35681
   233b8:	01cff1f4 	movhi	r7,16327
   233bc:	31b22cc4 	addi	r6,r6,-14157
   233c0:	39e28a04 	addi	r7,r7,-30168
   233c4:	180b883a 	mov	r5,r3
   233c8:	1009883a 	mov	r4,r2
   233cc:	002ab740 	call	2ab74 <__adddf3>
   233d0:	8009883a 	mov	r4,r16
   233d4:	1029883a 	mov	r20,r2
   233d8:	1823883a 	mov	r17,r3
   233dc:	002cff40 	call	2cff4 <__floatsidf>
   233e0:	019427f4 	movhi	r6,20639
   233e4:	01cff4f4 	movhi	r7,16339
   233e8:	319e7ec4 	addi	r6,r6,31227
   233ec:	39d104c4 	addi	r7,r7,17427
   233f0:	1009883a 	mov	r4,r2
   233f4:	180b883a 	mov	r5,r3
   233f8:	002bf600 	call	2bf60 <__muldf3>
   233fc:	100d883a 	mov	r6,r2
   23400:	180f883a 	mov	r7,r3
   23404:	a009883a 	mov	r4,r20
   23408:	880b883a 	mov	r5,r17
   2340c:	002ab740 	call	2ab74 <__adddf3>
   23410:	1009883a 	mov	r4,r2
   23414:	180b883a 	mov	r5,r3
   23418:	1029883a 	mov	r20,r2
   2341c:	1823883a 	mov	r17,r3
   23420:	002cf740 	call	2cf74 <__fixdfsi>
   23424:	000d883a 	mov	r6,zero
   23428:	000f883a 	mov	r7,zero
   2342c:	a009883a 	mov	r4,r20
   23430:	880b883a 	mov	r5,r17
   23434:	d8800515 	stw	r2,20(sp)
   23438:	002be6c0 	call	2be6c <__ledf2>
   2343c:	10028716 	blt	r2,zero,23e5c <_dtoa_r+0xc88>
   23440:	d8c00517 	ldw	r3,20(sp)
   23444:	00800584 	movi	r2,22
   23448:	10c27536 	bltu	r2,r3,23e20 <_dtoa_r+0xc4c>
   2344c:	180490fa 	slli	r2,r3,3
   23450:	00c000f4 	movhi	r3,3
   23454:	18ffe704 	addi	r3,r3,-100
   23458:	1885883a 	add	r2,r3,r2
   2345c:	11000017 	ldw	r4,0(r2)
   23460:	11400117 	ldw	r5,4(r2)
   23464:	900d883a 	mov	r6,r18
   23468:	980f883a 	mov	r7,r19
   2346c:	002bd900 	call	2bd90 <__gedf2>
   23470:	00828d0e 	bge	zero,r2,23ea8 <_dtoa_r+0xcd4>
   23474:	d9000517 	ldw	r4,20(sp)
   23478:	d8000e15 	stw	zero,56(sp)
   2347c:	213fffc4 	addi	r4,r4,-1
   23480:	d9000515 	stw	r4,20(sp)
   23484:	b42dc83a 	sub	r22,r22,r16
   23488:	b5bfffc4 	addi	r22,r22,-1
   2348c:	b0026f16 	blt	r22,zero,23e4c <_dtoa_r+0xc78>
   23490:	d8000815 	stw	zero,32(sp)
   23494:	d9c00517 	ldw	r7,20(sp)
   23498:	38026416 	blt	r7,zero,23e2c <_dtoa_r+0xc58>
   2349c:	b1ed883a 	add	r22,r22,r7
   234a0:	d9c00d15 	stw	r7,52(sp)
   234a4:	d8000a15 	stw	zero,40(sp)
   234a8:	d9800317 	ldw	r6,12(sp)
   234ac:	00800244 	movi	r2,9
   234b0:	11811436 	bltu	r2,r6,23904 <_dtoa_r+0x730>
   234b4:	00800144 	movi	r2,5
   234b8:	1184e10e 	bge	r2,r6,24840 <_dtoa_r+0x166c>
   234bc:	31bfff04 	addi	r6,r6,-4
   234c0:	d9800315 	stw	r6,12(sp)
   234c4:	0023883a 	mov	r17,zero
   234c8:	d9800317 	ldw	r6,12(sp)
   234cc:	008000c4 	movi	r2,3
   234d0:	30836726 	beq	r6,r2,24270 <_dtoa_r+0x109c>
   234d4:	1183410e 	bge	r2,r6,241dc <_dtoa_r+0x1008>
   234d8:	d9c00317 	ldw	r7,12(sp)
   234dc:	00800104 	movi	r2,4
   234e0:	38827c26 	beq	r7,r2,23ed4 <_dtoa_r+0xd00>
   234e4:	00800144 	movi	r2,5
   234e8:	3884c41e 	bne	r7,r2,247fc <_dtoa_r+0x1628>
   234ec:	00800044 	movi	r2,1
   234f0:	d8800b15 	stw	r2,44(sp)
   234f4:	d8c00517 	ldw	r3,20(sp)
   234f8:	d9002217 	ldw	r4,136(sp)
   234fc:	1907883a 	add	r3,r3,r4
   23500:	19800044 	addi	r6,r3,1
   23504:	d8c00c15 	stw	r3,48(sp)
   23508:	d9800615 	stw	r6,24(sp)
   2350c:	0183a40e 	bge	zero,r6,243a0 <_dtoa_r+0x11cc>
   23510:	d9800617 	ldw	r6,24(sp)
   23514:	3021883a 	mov	r16,r6
   23518:	e0001115 	stw	zero,68(fp)
   2351c:	008005c4 	movi	r2,23
   23520:	1184c92e 	bgeu	r2,r6,24848 <_dtoa_r+0x1674>
   23524:	00c00044 	movi	r3,1
   23528:	00800104 	movi	r2,4
   2352c:	1085883a 	add	r2,r2,r2
   23530:	11000504 	addi	r4,r2,20
   23534:	180b883a 	mov	r5,r3
   23538:	18c00044 	addi	r3,r3,1
   2353c:	313ffb2e 	bgeu	r6,r4,2352c <__alt_data_end+0xfffe352c>
   23540:	e1401115 	stw	r5,68(fp)
   23544:	e009883a 	mov	r4,fp
   23548:	00262580 	call	26258 <_Balloc>
   2354c:	d8800715 	stw	r2,28(sp)
   23550:	e0801015 	stw	r2,64(fp)
   23554:	00800384 	movi	r2,14
   23558:	1400f736 	bltu	r2,r16,23938 <_dtoa_r+0x764>
   2355c:	8800f626 	beq	r17,zero,23938 <_dtoa_r+0x764>
   23560:	d9c00517 	ldw	r7,20(sp)
   23564:	01c39a0e 	bge	zero,r7,243d0 <_dtoa_r+0x11fc>
   23568:	388003cc 	andi	r2,r7,15
   2356c:	100490fa 	slli	r2,r2,3
   23570:	382bd13a 	srai	r21,r7,4
   23574:	00c000f4 	movhi	r3,3
   23578:	18ffe704 	addi	r3,r3,-100
   2357c:	1885883a 	add	r2,r3,r2
   23580:	a8c0040c 	andi	r3,r21,16
   23584:	12400017 	ldw	r9,0(r2)
   23588:	12000117 	ldw	r8,4(r2)
   2358c:	18037926 	beq	r3,zero,24374 <_dtoa_r+0x11a0>
   23590:	008000f4 	movhi	r2,3
   23594:	10bfdd04 	addi	r2,r2,-140
   23598:	11800817 	ldw	r6,32(r2)
   2359c:	11c00917 	ldw	r7,36(r2)
   235a0:	9009883a 	mov	r4,r18
   235a4:	980b883a 	mov	r5,r19
   235a8:	da001715 	stw	r8,92(sp)
   235ac:	da401615 	stw	r9,88(sp)
   235b0:	002b4200 	call	2b420 <__divdf3>
   235b4:	da001717 	ldw	r8,92(sp)
   235b8:	da401617 	ldw	r9,88(sp)
   235bc:	ad4003cc 	andi	r21,r21,15
   235c0:	040000c4 	movi	r16,3
   235c4:	1023883a 	mov	r17,r2
   235c8:	1829883a 	mov	r20,r3
   235cc:	a8001126 	beq	r21,zero,23614 <_dtoa_r+0x440>
   235d0:	05c000f4 	movhi	r23,3
   235d4:	bdffdd04 	addi	r23,r23,-140
   235d8:	4805883a 	mov	r2,r9
   235dc:	4007883a 	mov	r3,r8
   235e0:	a980004c 	andi	r6,r21,1
   235e4:	1009883a 	mov	r4,r2
   235e8:	a82bd07a 	srai	r21,r21,1
   235ec:	180b883a 	mov	r5,r3
   235f0:	30000426 	beq	r6,zero,23604 <_dtoa_r+0x430>
   235f4:	b9800017 	ldw	r6,0(r23)
   235f8:	b9c00117 	ldw	r7,4(r23)
   235fc:	84000044 	addi	r16,r16,1
   23600:	002bf600 	call	2bf60 <__muldf3>
   23604:	bdc00204 	addi	r23,r23,8
   23608:	a83ff51e 	bne	r21,zero,235e0 <__alt_data_end+0xfffe35e0>
   2360c:	1013883a 	mov	r9,r2
   23610:	1811883a 	mov	r8,r3
   23614:	480d883a 	mov	r6,r9
   23618:	400f883a 	mov	r7,r8
   2361c:	8809883a 	mov	r4,r17
   23620:	a00b883a 	mov	r5,r20
   23624:	002b4200 	call	2b420 <__divdf3>
   23628:	d8800f15 	stw	r2,60(sp)
   2362c:	d8c01015 	stw	r3,64(sp)
   23630:	d8c00e17 	ldw	r3,56(sp)
   23634:	18000626 	beq	r3,zero,23650 <_dtoa_r+0x47c>
   23638:	d9000f17 	ldw	r4,60(sp)
   2363c:	d9401017 	ldw	r5,64(sp)
   23640:	000d883a 	mov	r6,zero
   23644:	01cffc34 	movhi	r7,16368
   23648:	002be6c0 	call	2be6c <__ledf2>
   2364c:	10040b16 	blt	r2,zero,2467c <_dtoa_r+0x14a8>
   23650:	8009883a 	mov	r4,r16
   23654:	002cff40 	call	2cff4 <__floatsidf>
   23658:	d9800f17 	ldw	r6,60(sp)
   2365c:	d9c01017 	ldw	r7,64(sp)
   23660:	1009883a 	mov	r4,r2
   23664:	180b883a 	mov	r5,r3
   23668:	002bf600 	call	2bf60 <__muldf3>
   2366c:	000d883a 	mov	r6,zero
   23670:	01d00734 	movhi	r7,16412
   23674:	1009883a 	mov	r4,r2
   23678:	180b883a 	mov	r5,r3
   2367c:	002ab740 	call	2ab74 <__adddf3>
   23680:	1021883a 	mov	r16,r2
   23684:	d8800617 	ldw	r2,24(sp)
   23688:	047f3034 	movhi	r17,64704
   2368c:	1c63883a 	add	r17,r3,r17
   23690:	10031826 	beq	r2,zero,242f4 <_dtoa_r+0x1120>
   23694:	d8c00517 	ldw	r3,20(sp)
   23698:	db000617 	ldw	r12,24(sp)
   2369c:	d8c01315 	stw	r3,76(sp)
   236a0:	d9000b17 	ldw	r4,44(sp)
   236a4:	20038f26 	beq	r4,zero,244e4 <_dtoa_r+0x1310>
   236a8:	60bfffc4 	addi	r2,r12,-1
   236ac:	100490fa 	slli	r2,r2,3
   236b0:	00c000f4 	movhi	r3,3
   236b4:	18ffe704 	addi	r3,r3,-100
   236b8:	1885883a 	add	r2,r3,r2
   236bc:	11800017 	ldw	r6,0(r2)
   236c0:	11c00117 	ldw	r7,4(r2)
   236c4:	d8800717 	ldw	r2,28(sp)
   236c8:	0009883a 	mov	r4,zero
   236cc:	014ff834 	movhi	r5,16352
   236d0:	db001615 	stw	r12,88(sp)
   236d4:	15c00044 	addi	r23,r2,1
   236d8:	002b4200 	call	2b420 <__divdf3>
   236dc:	800d883a 	mov	r6,r16
   236e0:	880f883a 	mov	r7,r17
   236e4:	1009883a 	mov	r4,r2
   236e8:	180b883a 	mov	r5,r3
   236ec:	002c6780 	call	2c678 <__subdf3>
   236f0:	d9401017 	ldw	r5,64(sp)
   236f4:	d9000f17 	ldw	r4,60(sp)
   236f8:	102b883a 	mov	r21,r2
   236fc:	d8c01215 	stw	r3,72(sp)
   23700:	002cf740 	call	2cf74 <__fixdfsi>
   23704:	1009883a 	mov	r4,r2
   23708:	1029883a 	mov	r20,r2
   2370c:	002cff40 	call	2cff4 <__floatsidf>
   23710:	d9000f17 	ldw	r4,60(sp)
   23714:	d9401017 	ldw	r5,64(sp)
   23718:	100d883a 	mov	r6,r2
   2371c:	180f883a 	mov	r7,r3
   23720:	002c6780 	call	2c678 <__subdf3>
   23724:	1823883a 	mov	r17,r3
   23728:	d8c00717 	ldw	r3,28(sp)
   2372c:	d9401217 	ldw	r5,72(sp)
   23730:	a2000c04 	addi	r8,r20,48
   23734:	1021883a 	mov	r16,r2
   23738:	1a000005 	stb	r8,0(r3)
   2373c:	800d883a 	mov	r6,r16
   23740:	880f883a 	mov	r7,r17
   23744:	a809883a 	mov	r4,r21
   23748:	4029883a 	mov	r20,r8
   2374c:	002bd900 	call	2bd90 <__gedf2>
   23750:	00841d16 	blt	zero,r2,247c8 <_dtoa_r+0x15f4>
   23754:	800d883a 	mov	r6,r16
   23758:	880f883a 	mov	r7,r17
   2375c:	0009883a 	mov	r4,zero
   23760:	014ffc34 	movhi	r5,16368
   23764:	002c6780 	call	2c678 <__subdf3>
   23768:	d9401217 	ldw	r5,72(sp)
   2376c:	100d883a 	mov	r6,r2
   23770:	180f883a 	mov	r7,r3
   23774:	a809883a 	mov	r4,r21
   23778:	002bd900 	call	2bd90 <__gedf2>
   2377c:	db001617 	ldw	r12,88(sp)
   23780:	00840e16 	blt	zero,r2,247bc <_dtoa_r+0x15e8>
   23784:	00800044 	movi	r2,1
   23788:	13006b0e 	bge	r2,r12,23938 <_dtoa_r+0x764>
   2378c:	d9000717 	ldw	r4,28(sp)
   23790:	dd800f15 	stw	r22,60(sp)
   23794:	dcc01015 	stw	r19,64(sp)
   23798:	2319883a 	add	r12,r4,r12
   2379c:	dcc01217 	ldw	r19,72(sp)
   237a0:	602d883a 	mov	r22,r12
   237a4:	dc801215 	stw	r18,72(sp)
   237a8:	b825883a 	mov	r18,r23
   237ac:	00000906 	br	237d4 <_dtoa_r+0x600>
   237b0:	002c6780 	call	2c678 <__subdf3>
   237b4:	a80d883a 	mov	r6,r21
   237b8:	980f883a 	mov	r7,r19
   237bc:	1009883a 	mov	r4,r2
   237c0:	180b883a 	mov	r5,r3
   237c4:	002be6c0 	call	2be6c <__ledf2>
   237c8:	1003e816 	blt	r2,zero,2476c <_dtoa_r+0x1598>
   237cc:	b825883a 	mov	r18,r23
   237d0:	bd83e926 	beq	r23,r22,24778 <_dtoa_r+0x15a4>
   237d4:	a809883a 	mov	r4,r21
   237d8:	980b883a 	mov	r5,r19
   237dc:	000d883a 	mov	r6,zero
   237e0:	01d00934 	movhi	r7,16420
   237e4:	002bf600 	call	2bf60 <__muldf3>
   237e8:	000d883a 	mov	r6,zero
   237ec:	01d00934 	movhi	r7,16420
   237f0:	8009883a 	mov	r4,r16
   237f4:	880b883a 	mov	r5,r17
   237f8:	102b883a 	mov	r21,r2
   237fc:	1827883a 	mov	r19,r3
   23800:	002bf600 	call	2bf60 <__muldf3>
   23804:	180b883a 	mov	r5,r3
   23808:	1009883a 	mov	r4,r2
   2380c:	1821883a 	mov	r16,r3
   23810:	1023883a 	mov	r17,r2
   23814:	002cf740 	call	2cf74 <__fixdfsi>
   23818:	1009883a 	mov	r4,r2
   2381c:	1029883a 	mov	r20,r2
   23820:	002cff40 	call	2cff4 <__floatsidf>
   23824:	8809883a 	mov	r4,r17
   23828:	800b883a 	mov	r5,r16
   2382c:	100d883a 	mov	r6,r2
   23830:	180f883a 	mov	r7,r3
   23834:	002c6780 	call	2c678 <__subdf3>
   23838:	a5000c04 	addi	r20,r20,48
   2383c:	a80d883a 	mov	r6,r21
   23840:	980f883a 	mov	r7,r19
   23844:	1009883a 	mov	r4,r2
   23848:	180b883a 	mov	r5,r3
   2384c:	95000005 	stb	r20,0(r18)
   23850:	1021883a 	mov	r16,r2
   23854:	1823883a 	mov	r17,r3
   23858:	002be6c0 	call	2be6c <__ledf2>
   2385c:	bdc00044 	addi	r23,r23,1
   23860:	800d883a 	mov	r6,r16
   23864:	880f883a 	mov	r7,r17
   23868:	0009883a 	mov	r4,zero
   2386c:	014ffc34 	movhi	r5,16368
   23870:	103fcf0e 	bge	r2,zero,237b0 <__alt_data_end+0xfffe37b0>
   23874:	d8c01317 	ldw	r3,76(sp)
   23878:	d8c00515 	stw	r3,20(sp)
   2387c:	d9400917 	ldw	r5,36(sp)
   23880:	e009883a 	mov	r4,fp
   23884:	00263000 	call	26300 <_Bfree>
   23888:	d9000517 	ldw	r4,20(sp)
   2388c:	d9802317 	ldw	r6,140(sp)
   23890:	d9c02517 	ldw	r7,148(sp)
   23894:	b8000005 	stb	zero,0(r23)
   23898:	20800044 	addi	r2,r4,1
   2389c:	30800015 	stw	r2,0(r6)
   238a0:	3802aa26 	beq	r7,zero,2434c <_dtoa_r+0x1178>
   238a4:	3dc00015 	stw	r23,0(r7)
   238a8:	d8800717 	ldw	r2,28(sp)
   238ac:	003e7906 	br	23294 <__alt_data_end+0xfffe3294>
   238b0:	00800434 	movhi	r2,16
   238b4:	10bfffc4 	addi	r2,r2,-1
   238b8:	88a2703a 	and	r17,r17,r2
   238bc:	883e851e 	bne	r17,zero,232d4 <__alt_data_end+0xfffe32d4>
   238c0:	008000f4 	movhi	r2,3
   238c4:	10bfc804 	addi	r2,r2,-224
   238c8:	003e8406 	br	232dc <__alt_data_end+0xfffe32dc>
   238cc:	10c00204 	addi	r3,r2,8
   238d0:	003e8706 	br	232f0 <__alt_data_end+0xfffe32f0>
   238d4:	01400434 	movhi	r5,16
   238d8:	297fffc4 	addi	r5,r5,-1
   238dc:	994a703a 	and	r5,r19,r5
   238e0:	9009883a 	mov	r4,r18
   238e4:	843f0044 	addi	r16,r16,-1023
   238e8:	294ffc34 	orhi	r5,r5,16368
   238ec:	dd800217 	ldw	r22,8(sp)
   238f0:	d8001115 	stw	zero,68(sp)
   238f4:	003ea506 	br	2338c <__alt_data_end+0xfffe338c>
   238f8:	008000f4 	movhi	r2,3
   238fc:	10bfbf04 	addi	r2,r2,-260
   23900:	003e6406 	br	23294 <__alt_data_end+0xfffe3294>
   23904:	e0001115 	stw	zero,68(fp)
   23908:	000b883a 	mov	r5,zero
   2390c:	e009883a 	mov	r4,fp
   23910:	00262580 	call	26258 <_Balloc>
   23914:	01bfffc4 	movi	r6,-1
   23918:	01c00044 	movi	r7,1
   2391c:	d8800715 	stw	r2,28(sp)
   23920:	d9800c15 	stw	r6,48(sp)
   23924:	e0801015 	stw	r2,64(fp)
   23928:	d8000315 	stw	zero,12(sp)
   2392c:	d9c00b15 	stw	r7,44(sp)
   23930:	d9800615 	stw	r6,24(sp)
   23934:	d8002215 	stw	zero,136(sp)
   23938:	d8800117 	ldw	r2,4(sp)
   2393c:	10008916 	blt	r2,zero,23b64 <_dtoa_r+0x990>
   23940:	d9000517 	ldw	r4,20(sp)
   23944:	00c00384 	movi	r3,14
   23948:	19008616 	blt	r3,r4,23b64 <_dtoa_r+0x990>
   2394c:	200490fa 	slli	r2,r4,3
   23950:	00c000f4 	movhi	r3,3
   23954:	d9802217 	ldw	r6,136(sp)
   23958:	18ffe704 	addi	r3,r3,-100
   2395c:	1885883a 	add	r2,r3,r2
   23960:	14000017 	ldw	r16,0(r2)
   23964:	14400117 	ldw	r17,4(r2)
   23968:	30016316 	blt	r6,zero,23ef8 <_dtoa_r+0xd24>
   2396c:	800d883a 	mov	r6,r16
   23970:	880f883a 	mov	r7,r17
   23974:	9009883a 	mov	r4,r18
   23978:	980b883a 	mov	r5,r19
   2397c:	002b4200 	call	2b420 <__divdf3>
   23980:	180b883a 	mov	r5,r3
   23984:	1009883a 	mov	r4,r2
   23988:	002cf740 	call	2cf74 <__fixdfsi>
   2398c:	1009883a 	mov	r4,r2
   23990:	102b883a 	mov	r21,r2
   23994:	002cff40 	call	2cff4 <__floatsidf>
   23998:	800d883a 	mov	r6,r16
   2399c:	880f883a 	mov	r7,r17
   239a0:	1009883a 	mov	r4,r2
   239a4:	180b883a 	mov	r5,r3
   239a8:	002bf600 	call	2bf60 <__muldf3>
   239ac:	100d883a 	mov	r6,r2
   239b0:	180f883a 	mov	r7,r3
   239b4:	9009883a 	mov	r4,r18
   239b8:	980b883a 	mov	r5,r19
   239bc:	002c6780 	call	2c678 <__subdf3>
   239c0:	d9c00717 	ldw	r7,28(sp)
   239c4:	1009883a 	mov	r4,r2
   239c8:	a8800c04 	addi	r2,r21,48
   239cc:	38800005 	stb	r2,0(r7)
   239d0:	3dc00044 	addi	r23,r7,1
   239d4:	d9c00617 	ldw	r7,24(sp)
   239d8:	01800044 	movi	r6,1
   239dc:	180b883a 	mov	r5,r3
   239e0:	2005883a 	mov	r2,r4
   239e4:	39803826 	beq	r7,r6,23ac8 <_dtoa_r+0x8f4>
   239e8:	000d883a 	mov	r6,zero
   239ec:	01d00934 	movhi	r7,16420
   239f0:	002bf600 	call	2bf60 <__muldf3>
   239f4:	000d883a 	mov	r6,zero
   239f8:	000f883a 	mov	r7,zero
   239fc:	1009883a 	mov	r4,r2
   23a00:	180b883a 	mov	r5,r3
   23a04:	1025883a 	mov	r18,r2
   23a08:	1827883a 	mov	r19,r3
   23a0c:	002bd080 	call	2bd08 <__eqdf2>
   23a10:	103f9a26 	beq	r2,zero,2387c <__alt_data_end+0xfffe387c>
   23a14:	d9c00617 	ldw	r7,24(sp)
   23a18:	d8c00717 	ldw	r3,28(sp)
   23a1c:	b829883a 	mov	r20,r23
   23a20:	38bfffc4 	addi	r2,r7,-1
   23a24:	18ad883a 	add	r22,r3,r2
   23a28:	00000a06 	br	23a54 <_dtoa_r+0x880>
   23a2c:	002bf600 	call	2bf60 <__muldf3>
   23a30:	000d883a 	mov	r6,zero
   23a34:	000f883a 	mov	r7,zero
   23a38:	1009883a 	mov	r4,r2
   23a3c:	180b883a 	mov	r5,r3
   23a40:	1025883a 	mov	r18,r2
   23a44:	1827883a 	mov	r19,r3
   23a48:	b829883a 	mov	r20,r23
   23a4c:	002bd080 	call	2bd08 <__eqdf2>
   23a50:	103f8a26 	beq	r2,zero,2387c <__alt_data_end+0xfffe387c>
   23a54:	800d883a 	mov	r6,r16
   23a58:	880f883a 	mov	r7,r17
   23a5c:	9009883a 	mov	r4,r18
   23a60:	980b883a 	mov	r5,r19
   23a64:	002b4200 	call	2b420 <__divdf3>
   23a68:	180b883a 	mov	r5,r3
   23a6c:	1009883a 	mov	r4,r2
   23a70:	002cf740 	call	2cf74 <__fixdfsi>
   23a74:	1009883a 	mov	r4,r2
   23a78:	102b883a 	mov	r21,r2
   23a7c:	002cff40 	call	2cff4 <__floatsidf>
   23a80:	800d883a 	mov	r6,r16
   23a84:	880f883a 	mov	r7,r17
   23a88:	1009883a 	mov	r4,r2
   23a8c:	180b883a 	mov	r5,r3
   23a90:	002bf600 	call	2bf60 <__muldf3>
   23a94:	100d883a 	mov	r6,r2
   23a98:	180f883a 	mov	r7,r3
   23a9c:	9009883a 	mov	r4,r18
   23aa0:	980b883a 	mov	r5,r19
   23aa4:	002c6780 	call	2c678 <__subdf3>
   23aa8:	aa000c04 	addi	r8,r21,48
   23aac:	a2000005 	stb	r8,0(r20)
   23ab0:	000d883a 	mov	r6,zero
   23ab4:	01d00934 	movhi	r7,16420
   23ab8:	1009883a 	mov	r4,r2
   23abc:	180b883a 	mov	r5,r3
   23ac0:	a5c00044 	addi	r23,r20,1
   23ac4:	b53fd91e 	bne	r22,r20,23a2c <__alt_data_end+0xfffe3a2c>
   23ac8:	100d883a 	mov	r6,r2
   23acc:	180f883a 	mov	r7,r3
   23ad0:	1009883a 	mov	r4,r2
   23ad4:	180b883a 	mov	r5,r3
   23ad8:	002ab740 	call	2ab74 <__adddf3>
   23adc:	100d883a 	mov	r6,r2
   23ae0:	180f883a 	mov	r7,r3
   23ae4:	8009883a 	mov	r4,r16
   23ae8:	880b883a 	mov	r5,r17
   23aec:	1027883a 	mov	r19,r2
   23af0:	1825883a 	mov	r18,r3
   23af4:	002be6c0 	call	2be6c <__ledf2>
   23af8:	10000816 	blt	r2,zero,23b1c <_dtoa_r+0x948>
   23afc:	980d883a 	mov	r6,r19
   23b00:	900f883a 	mov	r7,r18
   23b04:	8009883a 	mov	r4,r16
   23b08:	880b883a 	mov	r5,r17
   23b0c:	002bd080 	call	2bd08 <__eqdf2>
   23b10:	103f5a1e 	bne	r2,zero,2387c <__alt_data_end+0xfffe387c>
   23b14:	ad40004c 	andi	r21,r21,1
   23b18:	a83f5826 	beq	r21,zero,2387c <__alt_data_end+0xfffe387c>
   23b1c:	bd3fffc3 	ldbu	r20,-1(r23)
   23b20:	b8bfffc4 	addi	r2,r23,-1
   23b24:	1007883a 	mov	r3,r2
   23b28:	01400e44 	movi	r5,57
   23b2c:	d9800717 	ldw	r6,28(sp)
   23b30:	00000506 	br	23b48 <_dtoa_r+0x974>
   23b34:	18ffffc4 	addi	r3,r3,-1
   23b38:	11824726 	beq	r2,r6,24458 <_dtoa_r+0x1284>
   23b3c:	1d000003 	ldbu	r20,0(r3)
   23b40:	102f883a 	mov	r23,r2
   23b44:	10bfffc4 	addi	r2,r2,-1
   23b48:	a1003fcc 	andi	r4,r20,255
   23b4c:	2100201c 	xori	r4,r4,128
   23b50:	213fe004 	addi	r4,r4,-128
   23b54:	217ff726 	beq	r4,r5,23b34 <__alt_data_end+0xfffe3b34>
   23b58:	a2000044 	addi	r8,r20,1
   23b5c:	12000005 	stb	r8,0(r2)
   23b60:	003f4606 	br	2387c <__alt_data_end+0xfffe387c>
   23b64:	d9000b17 	ldw	r4,44(sp)
   23b68:	2000c826 	beq	r4,zero,23e8c <_dtoa_r+0xcb8>
   23b6c:	d9800317 	ldw	r6,12(sp)
   23b70:	00c00044 	movi	r3,1
   23b74:	1980f90e 	bge	r3,r6,23f5c <_dtoa_r+0xd88>
   23b78:	d8800617 	ldw	r2,24(sp)
   23b7c:	d8c00a17 	ldw	r3,40(sp)
   23b80:	157fffc4 	addi	r21,r2,-1
   23b84:	1d41f316 	blt	r3,r21,24354 <_dtoa_r+0x1180>
   23b88:	1d6bc83a 	sub	r21,r3,r21
   23b8c:	d9c00617 	ldw	r7,24(sp)
   23b90:	3802aa16 	blt	r7,zero,2463c <_dtoa_r+0x1468>
   23b94:	dd000817 	ldw	r20,32(sp)
   23b98:	d8800617 	ldw	r2,24(sp)
   23b9c:	d8c00817 	ldw	r3,32(sp)
   23ba0:	01400044 	movi	r5,1
   23ba4:	e009883a 	mov	r4,fp
   23ba8:	1887883a 	add	r3,r3,r2
   23bac:	d8c00815 	stw	r3,32(sp)
   23bb0:	b0ad883a 	add	r22,r22,r2
   23bb4:	00266640 	call	26664 <__i2b>
   23bb8:	1023883a 	mov	r17,r2
   23bbc:	a0000826 	beq	r20,zero,23be0 <_dtoa_r+0xa0c>
   23bc0:	0580070e 	bge	zero,r22,23be0 <_dtoa_r+0xa0c>
   23bc4:	a005883a 	mov	r2,r20
   23bc8:	b500b916 	blt	r22,r20,23eb0 <_dtoa_r+0xcdc>
   23bcc:	d9000817 	ldw	r4,32(sp)
   23bd0:	a0a9c83a 	sub	r20,r20,r2
   23bd4:	b0adc83a 	sub	r22,r22,r2
   23bd8:	2089c83a 	sub	r4,r4,r2
   23bdc:	d9000815 	stw	r4,32(sp)
   23be0:	d9800a17 	ldw	r6,40(sp)
   23be4:	0181810e 	bge	zero,r6,241ec <_dtoa_r+0x1018>
   23be8:	d9c00b17 	ldw	r7,44(sp)
   23bec:	3800b326 	beq	r7,zero,23ebc <_dtoa_r+0xce8>
   23bf0:	a800b226 	beq	r21,zero,23ebc <_dtoa_r+0xce8>
   23bf4:	880b883a 	mov	r5,r17
   23bf8:	a80d883a 	mov	r6,r21
   23bfc:	e009883a 	mov	r4,fp
   23c00:	00268980 	call	26898 <__pow5mult>
   23c04:	d9800917 	ldw	r6,36(sp)
   23c08:	100b883a 	mov	r5,r2
   23c0c:	e009883a 	mov	r4,fp
   23c10:	1023883a 	mov	r17,r2
   23c14:	00266a00 	call	266a0 <__multiply>
   23c18:	1021883a 	mov	r16,r2
   23c1c:	d8800a17 	ldw	r2,40(sp)
   23c20:	d9400917 	ldw	r5,36(sp)
   23c24:	e009883a 	mov	r4,fp
   23c28:	1545c83a 	sub	r2,r2,r21
   23c2c:	d8800a15 	stw	r2,40(sp)
   23c30:	00263000 	call	26300 <_Bfree>
   23c34:	d8c00a17 	ldw	r3,40(sp)
   23c38:	18009f1e 	bne	r3,zero,23eb8 <_dtoa_r+0xce4>
   23c3c:	05c00044 	movi	r23,1
   23c40:	e009883a 	mov	r4,fp
   23c44:	b80b883a 	mov	r5,r23
   23c48:	00266640 	call	26664 <__i2b>
   23c4c:	d9000d17 	ldw	r4,52(sp)
   23c50:	102b883a 	mov	r21,r2
   23c54:	2000ce26 	beq	r4,zero,23f90 <_dtoa_r+0xdbc>
   23c58:	200d883a 	mov	r6,r4
   23c5c:	100b883a 	mov	r5,r2
   23c60:	e009883a 	mov	r4,fp
   23c64:	00268980 	call	26898 <__pow5mult>
   23c68:	d9800317 	ldw	r6,12(sp)
   23c6c:	102b883a 	mov	r21,r2
   23c70:	b981810e 	bge	r23,r6,24278 <_dtoa_r+0x10a4>
   23c74:	0027883a 	mov	r19,zero
   23c78:	a8800417 	ldw	r2,16(r21)
   23c7c:	05c00804 	movi	r23,32
   23c80:	10800104 	addi	r2,r2,4
   23c84:	1085883a 	add	r2,r2,r2
   23c88:	1085883a 	add	r2,r2,r2
   23c8c:	a885883a 	add	r2,r21,r2
   23c90:	11000017 	ldw	r4,0(r2)
   23c94:	002654c0 	call	2654c <__hi0bits>
   23c98:	b885c83a 	sub	r2,r23,r2
   23c9c:	1585883a 	add	r2,r2,r22
   23ca0:	108007cc 	andi	r2,r2,31
   23ca4:	1000b326 	beq	r2,zero,23f74 <_dtoa_r+0xda0>
   23ca8:	00c00804 	movi	r3,32
   23cac:	1887c83a 	sub	r3,r3,r2
   23cb0:	01000104 	movi	r4,4
   23cb4:	20c2cd0e 	bge	r4,r3,247ec <_dtoa_r+0x1618>
   23cb8:	00c00704 	movi	r3,28
   23cbc:	1885c83a 	sub	r2,r3,r2
   23cc0:	d8c00817 	ldw	r3,32(sp)
   23cc4:	a0a9883a 	add	r20,r20,r2
   23cc8:	b0ad883a 	add	r22,r22,r2
   23ccc:	1887883a 	add	r3,r3,r2
   23cd0:	d8c00815 	stw	r3,32(sp)
   23cd4:	d9800817 	ldw	r6,32(sp)
   23cd8:	0180040e 	bge	zero,r6,23cec <_dtoa_r+0xb18>
   23cdc:	800b883a 	mov	r5,r16
   23ce0:	e009883a 	mov	r4,fp
   23ce4:	00269d80 	call	269d8 <__lshift>
   23ce8:	1021883a 	mov	r16,r2
   23cec:	0580050e 	bge	zero,r22,23d04 <_dtoa_r+0xb30>
   23cf0:	a80b883a 	mov	r5,r21
   23cf4:	b00d883a 	mov	r6,r22
   23cf8:	e009883a 	mov	r4,fp
   23cfc:	00269d80 	call	269d8 <__lshift>
   23d00:	102b883a 	mov	r21,r2
   23d04:	d9c00e17 	ldw	r7,56(sp)
   23d08:	3801211e 	bne	r7,zero,24190 <_dtoa_r+0xfbc>
   23d0c:	d9800617 	ldw	r6,24(sp)
   23d10:	0181380e 	bge	zero,r6,241f4 <_dtoa_r+0x1020>
   23d14:	d8c00b17 	ldw	r3,44(sp)
   23d18:	1800ab1e 	bne	r3,zero,23fc8 <_dtoa_r+0xdf4>
   23d1c:	dc800717 	ldw	r18,28(sp)
   23d20:	dcc00617 	ldw	r19,24(sp)
   23d24:	9029883a 	mov	r20,r18
   23d28:	00000206 	br	23d34 <_dtoa_r+0xb60>
   23d2c:	00263280 	call	26328 <__multadd>
   23d30:	1021883a 	mov	r16,r2
   23d34:	a80b883a 	mov	r5,r21
   23d38:	8009883a 	mov	r4,r16
   23d3c:	0022fd40 	call	22fd4 <quorem>
   23d40:	10800c04 	addi	r2,r2,48
   23d44:	90800005 	stb	r2,0(r18)
   23d48:	94800044 	addi	r18,r18,1
   23d4c:	9507c83a 	sub	r3,r18,r20
   23d50:	000f883a 	mov	r7,zero
   23d54:	01800284 	movi	r6,10
   23d58:	800b883a 	mov	r5,r16
   23d5c:	e009883a 	mov	r4,fp
   23d60:	1cfff216 	blt	r3,r19,23d2c <__alt_data_end+0xfffe3d2c>
   23d64:	1011883a 	mov	r8,r2
   23d68:	d8800617 	ldw	r2,24(sp)
   23d6c:	0082370e 	bge	zero,r2,2464c <_dtoa_r+0x1478>
   23d70:	d9000717 	ldw	r4,28(sp)
   23d74:	0025883a 	mov	r18,zero
   23d78:	20af883a 	add	r23,r4,r2
   23d7c:	01800044 	movi	r6,1
   23d80:	800b883a 	mov	r5,r16
   23d84:	e009883a 	mov	r4,fp
   23d88:	da001715 	stw	r8,92(sp)
   23d8c:	00269d80 	call	269d8 <__lshift>
   23d90:	a80b883a 	mov	r5,r21
   23d94:	1009883a 	mov	r4,r2
   23d98:	d8800915 	stw	r2,36(sp)
   23d9c:	0026b200 	call	26b20 <__mcmp>
   23da0:	da001717 	ldw	r8,92(sp)
   23da4:	0081800e 	bge	zero,r2,243a8 <_dtoa_r+0x11d4>
   23da8:	b93fffc3 	ldbu	r4,-1(r23)
   23dac:	b8bfffc4 	addi	r2,r23,-1
   23db0:	1007883a 	mov	r3,r2
   23db4:	01800e44 	movi	r6,57
   23db8:	d9c00717 	ldw	r7,28(sp)
   23dbc:	00000506 	br	23dd4 <_dtoa_r+0xc00>
   23dc0:	18ffffc4 	addi	r3,r3,-1
   23dc4:	11c12326 	beq	r2,r7,24254 <_dtoa_r+0x1080>
   23dc8:	19000003 	ldbu	r4,0(r3)
   23dcc:	102f883a 	mov	r23,r2
   23dd0:	10bfffc4 	addi	r2,r2,-1
   23dd4:	21403fcc 	andi	r5,r4,255
   23dd8:	2940201c 	xori	r5,r5,128
   23ddc:	297fe004 	addi	r5,r5,-128
   23de0:	29bff726 	beq	r5,r6,23dc0 <__alt_data_end+0xfffe3dc0>
   23de4:	21000044 	addi	r4,r4,1
   23de8:	11000005 	stb	r4,0(r2)
   23dec:	a80b883a 	mov	r5,r21
   23df0:	e009883a 	mov	r4,fp
   23df4:	00263000 	call	26300 <_Bfree>
   23df8:	883ea026 	beq	r17,zero,2387c <__alt_data_end+0xfffe387c>
   23dfc:	90000426 	beq	r18,zero,23e10 <_dtoa_r+0xc3c>
   23e00:	94400326 	beq	r18,r17,23e10 <_dtoa_r+0xc3c>
   23e04:	900b883a 	mov	r5,r18
   23e08:	e009883a 	mov	r4,fp
   23e0c:	00263000 	call	26300 <_Bfree>
   23e10:	880b883a 	mov	r5,r17
   23e14:	e009883a 	mov	r4,fp
   23e18:	00263000 	call	26300 <_Bfree>
   23e1c:	003e9706 	br	2387c <__alt_data_end+0xfffe387c>
   23e20:	01800044 	movi	r6,1
   23e24:	d9800e15 	stw	r6,56(sp)
   23e28:	003d9606 	br	23484 <__alt_data_end+0xfffe3484>
   23e2c:	d8800817 	ldw	r2,32(sp)
   23e30:	d8c00517 	ldw	r3,20(sp)
   23e34:	d8000d15 	stw	zero,52(sp)
   23e38:	10c5c83a 	sub	r2,r2,r3
   23e3c:	00c9c83a 	sub	r4,zero,r3
   23e40:	d8800815 	stw	r2,32(sp)
   23e44:	d9000a15 	stw	r4,40(sp)
   23e48:	003d9706 	br	234a8 <__alt_data_end+0xfffe34a8>
   23e4c:	05adc83a 	sub	r22,zero,r22
   23e50:	dd800815 	stw	r22,32(sp)
   23e54:	002d883a 	mov	r22,zero
   23e58:	003d8e06 	br	23494 <__alt_data_end+0xfffe3494>
   23e5c:	d9000517 	ldw	r4,20(sp)
   23e60:	002cff40 	call	2cff4 <__floatsidf>
   23e64:	100d883a 	mov	r6,r2
   23e68:	180f883a 	mov	r7,r3
   23e6c:	a009883a 	mov	r4,r20
   23e70:	880b883a 	mov	r5,r17
   23e74:	002bd080 	call	2bd08 <__eqdf2>
   23e78:	103d7126 	beq	r2,zero,23440 <__alt_data_end+0xfffe3440>
   23e7c:	d9c00517 	ldw	r7,20(sp)
   23e80:	39ffffc4 	addi	r7,r7,-1
   23e84:	d9c00515 	stw	r7,20(sp)
   23e88:	003d6d06 	br	23440 <__alt_data_end+0xfffe3440>
   23e8c:	dd400a17 	ldw	r21,40(sp)
   23e90:	dd000817 	ldw	r20,32(sp)
   23e94:	0023883a 	mov	r17,zero
   23e98:	003f4806 	br	23bbc <__alt_data_end+0xfffe3bbc>
   23e9c:	10e3c83a 	sub	r17,r2,r3
   23ea0:	9448983a 	sll	r4,r18,r17
   23ea4:	003d3206 	br	23370 <__alt_data_end+0xfffe3370>
   23ea8:	d8000e15 	stw	zero,56(sp)
   23eac:	003d7506 	br	23484 <__alt_data_end+0xfffe3484>
   23eb0:	b005883a 	mov	r2,r22
   23eb4:	003f4506 	br	23bcc <__alt_data_end+0xfffe3bcc>
   23eb8:	dc000915 	stw	r16,36(sp)
   23ebc:	d9800a17 	ldw	r6,40(sp)
   23ec0:	d9400917 	ldw	r5,36(sp)
   23ec4:	e009883a 	mov	r4,fp
   23ec8:	00268980 	call	26898 <__pow5mult>
   23ecc:	1021883a 	mov	r16,r2
   23ed0:	003f5a06 	br	23c3c <__alt_data_end+0xfffe3c3c>
   23ed4:	01c00044 	movi	r7,1
   23ed8:	d9c00b15 	stw	r7,44(sp)
   23edc:	d8802217 	ldw	r2,136(sp)
   23ee0:	0081280e 	bge	zero,r2,24384 <_dtoa_r+0x11b0>
   23ee4:	100d883a 	mov	r6,r2
   23ee8:	1021883a 	mov	r16,r2
   23eec:	d8800c15 	stw	r2,48(sp)
   23ef0:	d8800615 	stw	r2,24(sp)
   23ef4:	003d8806 	br	23518 <__alt_data_end+0xfffe3518>
   23ef8:	d8800617 	ldw	r2,24(sp)
   23efc:	00be9b16 	blt	zero,r2,2396c <__alt_data_end+0xfffe396c>
   23f00:	10010f1e 	bne	r2,zero,24340 <_dtoa_r+0x116c>
   23f04:	880b883a 	mov	r5,r17
   23f08:	000d883a 	mov	r6,zero
   23f0c:	01d00534 	movhi	r7,16404
   23f10:	8009883a 	mov	r4,r16
   23f14:	002bf600 	call	2bf60 <__muldf3>
   23f18:	900d883a 	mov	r6,r18
   23f1c:	980f883a 	mov	r7,r19
   23f20:	1009883a 	mov	r4,r2
   23f24:	180b883a 	mov	r5,r3
   23f28:	002bd900 	call	2bd90 <__gedf2>
   23f2c:	002b883a 	mov	r21,zero
   23f30:	0023883a 	mov	r17,zero
   23f34:	1000bf16 	blt	r2,zero,24234 <_dtoa_r+0x1060>
   23f38:	d9802217 	ldw	r6,136(sp)
   23f3c:	ddc00717 	ldw	r23,28(sp)
   23f40:	018c303a 	nor	r6,zero,r6
   23f44:	d9800515 	stw	r6,20(sp)
   23f48:	a80b883a 	mov	r5,r21
   23f4c:	e009883a 	mov	r4,fp
   23f50:	00263000 	call	26300 <_Bfree>
   23f54:	883e4926 	beq	r17,zero,2387c <__alt_data_end+0xfffe387c>
   23f58:	003fad06 	br	23e10 <__alt_data_end+0xfffe3e10>
   23f5c:	d9c01117 	ldw	r7,68(sp)
   23f60:	3801bc26 	beq	r7,zero,24654 <_dtoa_r+0x1480>
   23f64:	10810cc4 	addi	r2,r2,1075
   23f68:	dd400a17 	ldw	r21,40(sp)
   23f6c:	dd000817 	ldw	r20,32(sp)
   23f70:	003f0a06 	br	23b9c <__alt_data_end+0xfffe3b9c>
   23f74:	00800704 	movi	r2,28
   23f78:	d9000817 	ldw	r4,32(sp)
   23f7c:	a0a9883a 	add	r20,r20,r2
   23f80:	b0ad883a 	add	r22,r22,r2
   23f84:	2089883a 	add	r4,r4,r2
   23f88:	d9000815 	stw	r4,32(sp)
   23f8c:	003f5106 	br	23cd4 <__alt_data_end+0xfffe3cd4>
   23f90:	d8c00317 	ldw	r3,12(sp)
   23f94:	b8c1fc0e 	bge	r23,r3,24788 <_dtoa_r+0x15b4>
   23f98:	0027883a 	mov	r19,zero
   23f9c:	b805883a 	mov	r2,r23
   23fa0:	003f3e06 	br	23c9c <__alt_data_end+0xfffe3c9c>
   23fa4:	880b883a 	mov	r5,r17
   23fa8:	e009883a 	mov	r4,fp
   23fac:	000f883a 	mov	r7,zero
   23fb0:	01800284 	movi	r6,10
   23fb4:	00263280 	call	26328 <__multadd>
   23fb8:	d9000c17 	ldw	r4,48(sp)
   23fbc:	1023883a 	mov	r17,r2
   23fc0:	0102040e 	bge	zero,r4,247d4 <_dtoa_r+0x1600>
   23fc4:	d9000615 	stw	r4,24(sp)
   23fc8:	0500050e 	bge	zero,r20,23fe0 <_dtoa_r+0xe0c>
   23fcc:	880b883a 	mov	r5,r17
   23fd0:	a00d883a 	mov	r6,r20
   23fd4:	e009883a 	mov	r4,fp
   23fd8:	00269d80 	call	269d8 <__lshift>
   23fdc:	1023883a 	mov	r17,r2
   23fe0:	9801241e 	bne	r19,zero,24474 <_dtoa_r+0x12a0>
   23fe4:	8829883a 	mov	r20,r17
   23fe8:	d9000617 	ldw	r4,24(sp)
   23fec:	dcc00717 	ldw	r19,28(sp)
   23ff0:	9480004c 	andi	r18,r18,1
   23ff4:	20bfffc4 	addi	r2,r4,-1
   23ff8:	9885883a 	add	r2,r19,r2
   23ffc:	d8800415 	stw	r2,16(sp)
   24000:	dc800615 	stw	r18,24(sp)
   24004:	a80b883a 	mov	r5,r21
   24008:	8009883a 	mov	r4,r16
   2400c:	0022fd40 	call	22fd4 <quorem>
   24010:	880b883a 	mov	r5,r17
   24014:	8009883a 	mov	r4,r16
   24018:	102f883a 	mov	r23,r2
   2401c:	0026b200 	call	26b20 <__mcmp>
   24020:	a80b883a 	mov	r5,r21
   24024:	a00d883a 	mov	r6,r20
   24028:	e009883a 	mov	r4,fp
   2402c:	102d883a 	mov	r22,r2
   24030:	0026b800 	call	26b80 <__mdiff>
   24034:	1007883a 	mov	r3,r2
   24038:	10800317 	ldw	r2,12(r2)
   2403c:	bc800c04 	addi	r18,r23,48
   24040:	180b883a 	mov	r5,r3
   24044:	10004e1e 	bne	r2,zero,24180 <_dtoa_r+0xfac>
   24048:	8009883a 	mov	r4,r16
   2404c:	d8c01615 	stw	r3,88(sp)
   24050:	0026b200 	call	26b20 <__mcmp>
   24054:	d8c01617 	ldw	r3,88(sp)
   24058:	e009883a 	mov	r4,fp
   2405c:	d8801615 	stw	r2,88(sp)
   24060:	180b883a 	mov	r5,r3
   24064:	00263000 	call	26300 <_Bfree>
   24068:	d8801617 	ldw	r2,88(sp)
   2406c:	1000041e 	bne	r2,zero,24080 <_dtoa_r+0xeac>
   24070:	d9800317 	ldw	r6,12(sp)
   24074:	3000021e 	bne	r6,zero,24080 <_dtoa_r+0xeac>
   24078:	d8c00617 	ldw	r3,24(sp)
   2407c:	18003726 	beq	r3,zero,2415c <_dtoa_r+0xf88>
   24080:	b0002016 	blt	r22,zero,24104 <_dtoa_r+0xf30>
   24084:	b000041e 	bne	r22,zero,24098 <_dtoa_r+0xec4>
   24088:	d9000317 	ldw	r4,12(sp)
   2408c:	2000021e 	bne	r4,zero,24098 <_dtoa_r+0xec4>
   24090:	d8c00617 	ldw	r3,24(sp)
   24094:	18001b26 	beq	r3,zero,24104 <_dtoa_r+0xf30>
   24098:	00810716 	blt	zero,r2,244b8 <_dtoa_r+0x12e4>
   2409c:	d8c00417 	ldw	r3,16(sp)
   240a0:	9d800044 	addi	r22,r19,1
   240a4:	9c800005 	stb	r18,0(r19)
   240a8:	b02f883a 	mov	r23,r22
   240ac:	98c10626 	beq	r19,r3,244c8 <_dtoa_r+0x12f4>
   240b0:	800b883a 	mov	r5,r16
   240b4:	000f883a 	mov	r7,zero
   240b8:	01800284 	movi	r6,10
   240bc:	e009883a 	mov	r4,fp
   240c0:	00263280 	call	26328 <__multadd>
   240c4:	1021883a 	mov	r16,r2
   240c8:	000f883a 	mov	r7,zero
   240cc:	01800284 	movi	r6,10
   240d0:	880b883a 	mov	r5,r17
   240d4:	e009883a 	mov	r4,fp
   240d8:	8d002526 	beq	r17,r20,24170 <_dtoa_r+0xf9c>
   240dc:	00263280 	call	26328 <__multadd>
   240e0:	a00b883a 	mov	r5,r20
   240e4:	000f883a 	mov	r7,zero
   240e8:	01800284 	movi	r6,10
   240ec:	e009883a 	mov	r4,fp
   240f0:	1023883a 	mov	r17,r2
   240f4:	00263280 	call	26328 <__multadd>
   240f8:	1029883a 	mov	r20,r2
   240fc:	b027883a 	mov	r19,r22
   24100:	003fc006 	br	24004 <__alt_data_end+0xfffe4004>
   24104:	9011883a 	mov	r8,r18
   24108:	00800e0e 	bge	zero,r2,24144 <_dtoa_r+0xf70>
   2410c:	800b883a 	mov	r5,r16
   24110:	01800044 	movi	r6,1
   24114:	e009883a 	mov	r4,fp
   24118:	da001715 	stw	r8,92(sp)
   2411c:	00269d80 	call	269d8 <__lshift>
   24120:	a80b883a 	mov	r5,r21
   24124:	1009883a 	mov	r4,r2
   24128:	1021883a 	mov	r16,r2
   2412c:	0026b200 	call	26b20 <__mcmp>
   24130:	da001717 	ldw	r8,92(sp)
   24134:	0081960e 	bge	zero,r2,24790 <_dtoa_r+0x15bc>
   24138:	00800e44 	movi	r2,57
   2413c:	40817026 	beq	r8,r2,24700 <_dtoa_r+0x152c>
   24140:	ba000c44 	addi	r8,r23,49
   24144:	8825883a 	mov	r18,r17
   24148:	9dc00044 	addi	r23,r19,1
   2414c:	9a000005 	stb	r8,0(r19)
   24150:	a023883a 	mov	r17,r20
   24154:	dc000915 	stw	r16,36(sp)
   24158:	003f2406 	br	23dec <__alt_data_end+0xfffe3dec>
   2415c:	00800e44 	movi	r2,57
   24160:	9011883a 	mov	r8,r18
   24164:	90816626 	beq	r18,r2,24700 <_dtoa_r+0x152c>
   24168:	05bff516 	blt	zero,r22,24140 <__alt_data_end+0xfffe4140>
   2416c:	003ff506 	br	24144 <__alt_data_end+0xfffe4144>
   24170:	00263280 	call	26328 <__multadd>
   24174:	1023883a 	mov	r17,r2
   24178:	1029883a 	mov	r20,r2
   2417c:	003fdf06 	br	240fc <__alt_data_end+0xfffe40fc>
   24180:	e009883a 	mov	r4,fp
   24184:	00263000 	call	26300 <_Bfree>
   24188:	00800044 	movi	r2,1
   2418c:	003fbc06 	br	24080 <__alt_data_end+0xfffe4080>
   24190:	a80b883a 	mov	r5,r21
   24194:	8009883a 	mov	r4,r16
   24198:	0026b200 	call	26b20 <__mcmp>
   2419c:	103edb0e 	bge	r2,zero,23d0c <__alt_data_end+0xfffe3d0c>
   241a0:	800b883a 	mov	r5,r16
   241a4:	000f883a 	mov	r7,zero
   241a8:	01800284 	movi	r6,10
   241ac:	e009883a 	mov	r4,fp
   241b0:	00263280 	call	26328 <__multadd>
   241b4:	1021883a 	mov	r16,r2
   241b8:	d8800517 	ldw	r2,20(sp)
   241bc:	d8c00b17 	ldw	r3,44(sp)
   241c0:	10bfffc4 	addi	r2,r2,-1
   241c4:	d8800515 	stw	r2,20(sp)
   241c8:	183f761e 	bne	r3,zero,23fa4 <__alt_data_end+0xfffe3fa4>
   241cc:	d9000c17 	ldw	r4,48(sp)
   241d0:	0101730e 	bge	zero,r4,247a0 <_dtoa_r+0x15cc>
   241d4:	d9000615 	stw	r4,24(sp)
   241d8:	003ed006 	br	23d1c <__alt_data_end+0xfffe3d1c>
   241dc:	00800084 	movi	r2,2
   241e0:	3081861e 	bne	r6,r2,247fc <_dtoa_r+0x1628>
   241e4:	d8000b15 	stw	zero,44(sp)
   241e8:	003f3c06 	br	23edc <__alt_data_end+0xfffe3edc>
   241ec:	dc000917 	ldw	r16,36(sp)
   241f0:	003e9206 	br	23c3c <__alt_data_end+0xfffe3c3c>
   241f4:	d9c00317 	ldw	r7,12(sp)
   241f8:	00800084 	movi	r2,2
   241fc:	11fec50e 	bge	r2,r7,23d14 <__alt_data_end+0xfffe3d14>
   24200:	d9000617 	ldw	r4,24(sp)
   24204:	20013c1e 	bne	r4,zero,246f8 <_dtoa_r+0x1524>
   24208:	a80b883a 	mov	r5,r21
   2420c:	000f883a 	mov	r7,zero
   24210:	01800144 	movi	r6,5
   24214:	e009883a 	mov	r4,fp
   24218:	00263280 	call	26328 <__multadd>
   2421c:	100b883a 	mov	r5,r2
   24220:	8009883a 	mov	r4,r16
   24224:	102b883a 	mov	r21,r2
   24228:	0026b200 	call	26b20 <__mcmp>
   2422c:	dc000915 	stw	r16,36(sp)
   24230:	00bf410e 	bge	zero,r2,23f38 <__alt_data_end+0xfffe3f38>
   24234:	d9c00717 	ldw	r7,28(sp)
   24238:	00800c44 	movi	r2,49
   2423c:	38800005 	stb	r2,0(r7)
   24240:	d8800517 	ldw	r2,20(sp)
   24244:	3dc00044 	addi	r23,r7,1
   24248:	10800044 	addi	r2,r2,1
   2424c:	d8800515 	stw	r2,20(sp)
   24250:	003f3d06 	br	23f48 <__alt_data_end+0xfffe3f48>
   24254:	d9800517 	ldw	r6,20(sp)
   24258:	d9c00717 	ldw	r7,28(sp)
   2425c:	00800c44 	movi	r2,49
   24260:	31800044 	addi	r6,r6,1
   24264:	d9800515 	stw	r6,20(sp)
   24268:	38800005 	stb	r2,0(r7)
   2426c:	003edf06 	br	23dec <__alt_data_end+0xfffe3dec>
   24270:	d8000b15 	stw	zero,44(sp)
   24274:	003c9f06 	br	234f4 <__alt_data_end+0xfffe34f4>
   24278:	903e7e1e 	bne	r18,zero,23c74 <__alt_data_end+0xfffe3c74>
   2427c:	00800434 	movhi	r2,16
   24280:	10bfffc4 	addi	r2,r2,-1
   24284:	9884703a 	and	r2,r19,r2
   24288:	1000ea1e 	bne	r2,zero,24634 <_dtoa_r+0x1460>
   2428c:	9cdffc2c 	andhi	r19,r19,32752
   24290:	9800e826 	beq	r19,zero,24634 <_dtoa_r+0x1460>
   24294:	d9c00817 	ldw	r7,32(sp)
   24298:	b5800044 	addi	r22,r22,1
   2429c:	04c00044 	movi	r19,1
   242a0:	39c00044 	addi	r7,r7,1
   242a4:	d9c00815 	stw	r7,32(sp)
   242a8:	d8800d17 	ldw	r2,52(sp)
   242ac:	103e721e 	bne	r2,zero,23c78 <__alt_data_end+0xfffe3c78>
   242b0:	00800044 	movi	r2,1
   242b4:	003e7906 	br	23c9c <__alt_data_end+0xfffe3c9c>
   242b8:	8009883a 	mov	r4,r16
   242bc:	002cff40 	call	2cff4 <__floatsidf>
   242c0:	d9800f17 	ldw	r6,60(sp)
   242c4:	d9c01017 	ldw	r7,64(sp)
   242c8:	1009883a 	mov	r4,r2
   242cc:	180b883a 	mov	r5,r3
   242d0:	002bf600 	call	2bf60 <__muldf3>
   242d4:	000d883a 	mov	r6,zero
   242d8:	01d00734 	movhi	r7,16412
   242dc:	1009883a 	mov	r4,r2
   242e0:	180b883a 	mov	r5,r3
   242e4:	002ab740 	call	2ab74 <__adddf3>
   242e8:	047f3034 	movhi	r17,64704
   242ec:	1021883a 	mov	r16,r2
   242f0:	1c63883a 	add	r17,r3,r17
   242f4:	d9000f17 	ldw	r4,60(sp)
   242f8:	d9401017 	ldw	r5,64(sp)
   242fc:	000d883a 	mov	r6,zero
   24300:	01d00534 	movhi	r7,16404
   24304:	002c6780 	call	2c678 <__subdf3>
   24308:	800d883a 	mov	r6,r16
   2430c:	880f883a 	mov	r7,r17
   24310:	1009883a 	mov	r4,r2
   24314:	180b883a 	mov	r5,r3
   24318:	102b883a 	mov	r21,r2
   2431c:	1829883a 	mov	r20,r3
   24320:	002bd900 	call	2bd90 <__gedf2>
   24324:	00806c16 	blt	zero,r2,244d8 <_dtoa_r+0x1304>
   24328:	89e0003c 	xorhi	r7,r17,32768
   2432c:	800d883a 	mov	r6,r16
   24330:	a809883a 	mov	r4,r21
   24334:	a00b883a 	mov	r5,r20
   24338:	002be6c0 	call	2be6c <__ledf2>
   2433c:	103d7e0e 	bge	r2,zero,23938 <__alt_data_end+0xfffe3938>
   24340:	002b883a 	mov	r21,zero
   24344:	0023883a 	mov	r17,zero
   24348:	003efb06 	br	23f38 <__alt_data_end+0xfffe3f38>
   2434c:	d8800717 	ldw	r2,28(sp)
   24350:	003bd006 	br	23294 <__alt_data_end+0xfffe3294>
   24354:	d9000a17 	ldw	r4,40(sp)
   24358:	d9800d17 	ldw	r6,52(sp)
   2435c:	dd400a15 	stw	r21,40(sp)
   24360:	a905c83a 	sub	r2,r21,r4
   24364:	308d883a 	add	r6,r6,r2
   24368:	d9800d15 	stw	r6,52(sp)
   2436c:	002b883a 	mov	r21,zero
   24370:	003e0606 	br	23b8c <__alt_data_end+0xfffe3b8c>
   24374:	9023883a 	mov	r17,r18
   24378:	9829883a 	mov	r20,r19
   2437c:	04000084 	movi	r16,2
   24380:	003c9206 	br	235cc <__alt_data_end+0xfffe35cc>
   24384:	04000044 	movi	r16,1
   24388:	dc000c15 	stw	r16,48(sp)
   2438c:	dc000615 	stw	r16,24(sp)
   24390:	dc002215 	stw	r16,136(sp)
   24394:	e0001115 	stw	zero,68(fp)
   24398:	000b883a 	mov	r5,zero
   2439c:	003c6906 	br	23544 <__alt_data_end+0xfffe3544>
   243a0:	3021883a 	mov	r16,r6
   243a4:	003ffb06 	br	24394 <__alt_data_end+0xfffe4394>
   243a8:	1000021e 	bne	r2,zero,243b4 <_dtoa_r+0x11e0>
   243ac:	4200004c 	andi	r8,r8,1
   243b0:	403e7d1e 	bne	r8,zero,23da8 <__alt_data_end+0xfffe3da8>
   243b4:	01000c04 	movi	r4,48
   243b8:	00000106 	br	243c0 <_dtoa_r+0x11ec>
   243bc:	102f883a 	mov	r23,r2
   243c0:	b8bfffc4 	addi	r2,r23,-1
   243c4:	10c00007 	ldb	r3,0(r2)
   243c8:	193ffc26 	beq	r3,r4,243bc <__alt_data_end+0xfffe43bc>
   243cc:	003e8706 	br	23dec <__alt_data_end+0xfffe3dec>
   243d0:	d8800517 	ldw	r2,20(sp)
   243d4:	00a3c83a 	sub	r17,zero,r2
   243d8:	8800a426 	beq	r17,zero,2466c <_dtoa_r+0x1498>
   243dc:	888003cc 	andi	r2,r17,15
   243e0:	100490fa 	slli	r2,r2,3
   243e4:	00c000f4 	movhi	r3,3
   243e8:	18ffe704 	addi	r3,r3,-100
   243ec:	1885883a 	add	r2,r3,r2
   243f0:	11800017 	ldw	r6,0(r2)
   243f4:	11c00117 	ldw	r7,4(r2)
   243f8:	9009883a 	mov	r4,r18
   243fc:	980b883a 	mov	r5,r19
   24400:	8823d13a 	srai	r17,r17,4
   24404:	002bf600 	call	2bf60 <__muldf3>
   24408:	d8800f15 	stw	r2,60(sp)
   2440c:	d8c01015 	stw	r3,64(sp)
   24410:	8800e826 	beq	r17,zero,247b4 <_dtoa_r+0x15e0>
   24414:	050000f4 	movhi	r20,3
   24418:	a53fdd04 	addi	r20,r20,-140
   2441c:	04000084 	movi	r16,2
   24420:	8980004c 	andi	r6,r17,1
   24424:	1009883a 	mov	r4,r2
   24428:	8823d07a 	srai	r17,r17,1
   2442c:	180b883a 	mov	r5,r3
   24430:	30000426 	beq	r6,zero,24444 <_dtoa_r+0x1270>
   24434:	a1800017 	ldw	r6,0(r20)
   24438:	a1c00117 	ldw	r7,4(r20)
   2443c:	84000044 	addi	r16,r16,1
   24440:	002bf600 	call	2bf60 <__muldf3>
   24444:	a5000204 	addi	r20,r20,8
   24448:	883ff51e 	bne	r17,zero,24420 <__alt_data_end+0xfffe4420>
   2444c:	d8800f15 	stw	r2,60(sp)
   24450:	d8c01015 	stw	r3,64(sp)
   24454:	003c7606 	br	23630 <__alt_data_end+0xfffe3630>
   24458:	00c00c04 	movi	r3,48
   2445c:	10c00005 	stb	r3,0(r2)
   24460:	d8c00517 	ldw	r3,20(sp)
   24464:	bd3fffc3 	ldbu	r20,-1(r23)
   24468:	18c00044 	addi	r3,r3,1
   2446c:	d8c00515 	stw	r3,20(sp)
   24470:	003db906 	br	23b58 <__alt_data_end+0xfffe3b58>
   24474:	89400117 	ldw	r5,4(r17)
   24478:	e009883a 	mov	r4,fp
   2447c:	00262580 	call	26258 <_Balloc>
   24480:	89800417 	ldw	r6,16(r17)
   24484:	89400304 	addi	r5,r17,12
   24488:	11000304 	addi	r4,r2,12
   2448c:	31800084 	addi	r6,r6,2
   24490:	318d883a 	add	r6,r6,r6
   24494:	318d883a 	add	r6,r6,r6
   24498:	1027883a 	mov	r19,r2
   2449c:	0025fe80 	call	25fe8 <memcpy>
   244a0:	01800044 	movi	r6,1
   244a4:	980b883a 	mov	r5,r19
   244a8:	e009883a 	mov	r4,fp
   244ac:	00269d80 	call	269d8 <__lshift>
   244b0:	1029883a 	mov	r20,r2
   244b4:	003ecc06 	br	23fe8 <__alt_data_end+0xfffe3fe8>
   244b8:	00800e44 	movi	r2,57
   244bc:	90809026 	beq	r18,r2,24700 <_dtoa_r+0x152c>
   244c0:	92000044 	addi	r8,r18,1
   244c4:	003f1f06 	br	24144 <__alt_data_end+0xfffe4144>
   244c8:	9011883a 	mov	r8,r18
   244cc:	8825883a 	mov	r18,r17
   244d0:	a023883a 	mov	r17,r20
   244d4:	003e2906 	br	23d7c <__alt_data_end+0xfffe3d7c>
   244d8:	002b883a 	mov	r21,zero
   244dc:	0023883a 	mov	r17,zero
   244e0:	003f5406 	br	24234 <__alt_data_end+0xfffe4234>
   244e4:	61bfffc4 	addi	r6,r12,-1
   244e8:	300490fa 	slli	r2,r6,3
   244ec:	00c000f4 	movhi	r3,3
   244f0:	18ffe704 	addi	r3,r3,-100
   244f4:	1885883a 	add	r2,r3,r2
   244f8:	11000017 	ldw	r4,0(r2)
   244fc:	11400117 	ldw	r5,4(r2)
   24500:	d8800717 	ldw	r2,28(sp)
   24504:	880f883a 	mov	r7,r17
   24508:	d9801215 	stw	r6,72(sp)
   2450c:	800d883a 	mov	r6,r16
   24510:	db001615 	stw	r12,88(sp)
   24514:	15c00044 	addi	r23,r2,1
   24518:	002bf600 	call	2bf60 <__muldf3>
   2451c:	d9401017 	ldw	r5,64(sp)
   24520:	d9000f17 	ldw	r4,60(sp)
   24524:	d8c01515 	stw	r3,84(sp)
   24528:	d8801415 	stw	r2,80(sp)
   2452c:	002cf740 	call	2cf74 <__fixdfsi>
   24530:	1009883a 	mov	r4,r2
   24534:	1021883a 	mov	r16,r2
   24538:	002cff40 	call	2cff4 <__floatsidf>
   2453c:	d9000f17 	ldw	r4,60(sp)
   24540:	d9401017 	ldw	r5,64(sp)
   24544:	100d883a 	mov	r6,r2
   24548:	180f883a 	mov	r7,r3
   2454c:	002c6780 	call	2c678 <__subdf3>
   24550:	1829883a 	mov	r20,r3
   24554:	d8c00717 	ldw	r3,28(sp)
   24558:	84000c04 	addi	r16,r16,48
   2455c:	1023883a 	mov	r17,r2
   24560:	1c000005 	stb	r16,0(r3)
   24564:	db001617 	ldw	r12,88(sp)
   24568:	00800044 	movi	r2,1
   2456c:	60802226 	beq	r12,r2,245f8 <_dtoa_r+0x1424>
   24570:	d9c00717 	ldw	r7,28(sp)
   24574:	8805883a 	mov	r2,r17
   24578:	b82b883a 	mov	r21,r23
   2457c:	3b19883a 	add	r12,r7,r12
   24580:	6023883a 	mov	r17,r12
   24584:	a007883a 	mov	r3,r20
   24588:	dc800f15 	stw	r18,60(sp)
   2458c:	000d883a 	mov	r6,zero
   24590:	01d00934 	movhi	r7,16420
   24594:	1009883a 	mov	r4,r2
   24598:	180b883a 	mov	r5,r3
   2459c:	002bf600 	call	2bf60 <__muldf3>
   245a0:	180b883a 	mov	r5,r3
   245a4:	1009883a 	mov	r4,r2
   245a8:	1829883a 	mov	r20,r3
   245ac:	1025883a 	mov	r18,r2
   245b0:	002cf740 	call	2cf74 <__fixdfsi>
   245b4:	1009883a 	mov	r4,r2
   245b8:	1021883a 	mov	r16,r2
   245bc:	002cff40 	call	2cff4 <__floatsidf>
   245c0:	100d883a 	mov	r6,r2
   245c4:	180f883a 	mov	r7,r3
   245c8:	9009883a 	mov	r4,r18
   245cc:	a00b883a 	mov	r5,r20
   245d0:	84000c04 	addi	r16,r16,48
   245d4:	002c6780 	call	2c678 <__subdf3>
   245d8:	ad400044 	addi	r21,r21,1
   245dc:	ac3fffc5 	stb	r16,-1(r21)
   245e0:	ac7fea1e 	bne	r21,r17,2458c <__alt_data_end+0xfffe458c>
   245e4:	1023883a 	mov	r17,r2
   245e8:	d8801217 	ldw	r2,72(sp)
   245ec:	dc800f17 	ldw	r18,60(sp)
   245f0:	1829883a 	mov	r20,r3
   245f4:	b8af883a 	add	r23,r23,r2
   245f8:	d9001417 	ldw	r4,80(sp)
   245fc:	d9401517 	ldw	r5,84(sp)
   24600:	000d883a 	mov	r6,zero
   24604:	01cff834 	movhi	r7,16352
   24608:	002ab740 	call	2ab74 <__adddf3>
   2460c:	880d883a 	mov	r6,r17
   24610:	a00f883a 	mov	r7,r20
   24614:	1009883a 	mov	r4,r2
   24618:	180b883a 	mov	r5,r3
   2461c:	002be6c0 	call	2be6c <__ledf2>
   24620:	10003e0e 	bge	r2,zero,2471c <_dtoa_r+0x1548>
   24624:	d9001317 	ldw	r4,76(sp)
   24628:	bd3fffc3 	ldbu	r20,-1(r23)
   2462c:	d9000515 	stw	r4,20(sp)
   24630:	003d3b06 	br	23b20 <__alt_data_end+0xfffe3b20>
   24634:	0027883a 	mov	r19,zero
   24638:	003f1b06 	br	242a8 <__alt_data_end+0xfffe42a8>
   2463c:	d8800817 	ldw	r2,32(sp)
   24640:	11e9c83a 	sub	r20,r2,r7
   24644:	0005883a 	mov	r2,zero
   24648:	003d5406 	br	23b9c <__alt_data_end+0xfffe3b9c>
   2464c:	00800044 	movi	r2,1
   24650:	003dc706 	br	23d70 <__alt_data_end+0xfffe3d70>
   24654:	d8c00217 	ldw	r3,8(sp)
   24658:	00800d84 	movi	r2,54
   2465c:	dd400a17 	ldw	r21,40(sp)
   24660:	10c5c83a 	sub	r2,r2,r3
   24664:	dd000817 	ldw	r20,32(sp)
   24668:	003d4c06 	br	23b9c <__alt_data_end+0xfffe3b9c>
   2466c:	dc800f15 	stw	r18,60(sp)
   24670:	dcc01015 	stw	r19,64(sp)
   24674:	04000084 	movi	r16,2
   24678:	003bed06 	br	23630 <__alt_data_end+0xfffe3630>
   2467c:	d9000617 	ldw	r4,24(sp)
   24680:	203f0d26 	beq	r4,zero,242b8 <__alt_data_end+0xfffe42b8>
   24684:	d9800c17 	ldw	r6,48(sp)
   24688:	01bcab0e 	bge	zero,r6,23938 <__alt_data_end+0xfffe3938>
   2468c:	d9401017 	ldw	r5,64(sp)
   24690:	d9000f17 	ldw	r4,60(sp)
   24694:	000d883a 	mov	r6,zero
   24698:	01d00934 	movhi	r7,16420
   2469c:	002bf600 	call	2bf60 <__muldf3>
   246a0:	81000044 	addi	r4,r16,1
   246a4:	d8800f15 	stw	r2,60(sp)
   246a8:	d8c01015 	stw	r3,64(sp)
   246ac:	002cff40 	call	2cff4 <__floatsidf>
   246b0:	d9800f17 	ldw	r6,60(sp)
   246b4:	d9c01017 	ldw	r7,64(sp)
   246b8:	1009883a 	mov	r4,r2
   246bc:	180b883a 	mov	r5,r3
   246c0:	002bf600 	call	2bf60 <__muldf3>
   246c4:	01d00734 	movhi	r7,16412
   246c8:	000d883a 	mov	r6,zero
   246cc:	1009883a 	mov	r4,r2
   246d0:	180b883a 	mov	r5,r3
   246d4:	002ab740 	call	2ab74 <__adddf3>
   246d8:	d9c00517 	ldw	r7,20(sp)
   246dc:	047f3034 	movhi	r17,64704
   246e0:	1021883a 	mov	r16,r2
   246e4:	39ffffc4 	addi	r7,r7,-1
   246e8:	d9c01315 	stw	r7,76(sp)
   246ec:	1c63883a 	add	r17,r3,r17
   246f0:	db000c17 	ldw	r12,48(sp)
   246f4:	003bea06 	br	236a0 <__alt_data_end+0xfffe36a0>
   246f8:	dc000915 	stw	r16,36(sp)
   246fc:	003e0e06 	br	23f38 <__alt_data_end+0xfffe3f38>
   24700:	01000e44 	movi	r4,57
   24704:	8825883a 	mov	r18,r17
   24708:	9dc00044 	addi	r23,r19,1
   2470c:	99000005 	stb	r4,0(r19)
   24710:	a023883a 	mov	r17,r20
   24714:	dc000915 	stw	r16,36(sp)
   24718:	003da406 	br	23dac <__alt_data_end+0xfffe3dac>
   2471c:	d9801417 	ldw	r6,80(sp)
   24720:	d9c01517 	ldw	r7,84(sp)
   24724:	0009883a 	mov	r4,zero
   24728:	014ff834 	movhi	r5,16352
   2472c:	002c6780 	call	2c678 <__subdf3>
   24730:	880d883a 	mov	r6,r17
   24734:	a00f883a 	mov	r7,r20
   24738:	1009883a 	mov	r4,r2
   2473c:	180b883a 	mov	r5,r3
   24740:	002bd900 	call	2bd90 <__gedf2>
   24744:	00bc7c0e 	bge	zero,r2,23938 <__alt_data_end+0xfffe3938>
   24748:	01000c04 	movi	r4,48
   2474c:	00000106 	br	24754 <_dtoa_r+0x1580>
   24750:	102f883a 	mov	r23,r2
   24754:	b8bfffc4 	addi	r2,r23,-1
   24758:	10c00007 	ldb	r3,0(r2)
   2475c:	193ffc26 	beq	r3,r4,24750 <__alt_data_end+0xfffe4750>
   24760:	d9801317 	ldw	r6,76(sp)
   24764:	d9800515 	stw	r6,20(sp)
   24768:	003c4406 	br	2387c <__alt_data_end+0xfffe387c>
   2476c:	d9801317 	ldw	r6,76(sp)
   24770:	d9800515 	stw	r6,20(sp)
   24774:	003cea06 	br	23b20 <__alt_data_end+0xfffe3b20>
   24778:	dd800f17 	ldw	r22,60(sp)
   2477c:	dcc01017 	ldw	r19,64(sp)
   24780:	dc801217 	ldw	r18,72(sp)
   24784:	003c6c06 	br	23938 <__alt_data_end+0xfffe3938>
   24788:	903e031e 	bne	r18,zero,23f98 <__alt_data_end+0xfffe3f98>
   2478c:	003ebb06 	br	2427c <__alt_data_end+0xfffe427c>
   24790:	103e6c1e 	bne	r2,zero,24144 <__alt_data_end+0xfffe4144>
   24794:	4080004c 	andi	r2,r8,1
   24798:	103e6a26 	beq	r2,zero,24144 <__alt_data_end+0xfffe4144>
   2479c:	003e6606 	br	24138 <__alt_data_end+0xfffe4138>
   247a0:	d8c00317 	ldw	r3,12(sp)
   247a4:	00800084 	movi	r2,2
   247a8:	10c02916 	blt	r2,r3,24850 <_dtoa_r+0x167c>
   247ac:	d9000c17 	ldw	r4,48(sp)
   247b0:	003e8806 	br	241d4 <__alt_data_end+0xfffe41d4>
   247b4:	04000084 	movi	r16,2
   247b8:	003b9d06 	br	23630 <__alt_data_end+0xfffe3630>
   247bc:	d9001317 	ldw	r4,76(sp)
   247c0:	d9000515 	stw	r4,20(sp)
   247c4:	003cd606 	br	23b20 <__alt_data_end+0xfffe3b20>
   247c8:	d8801317 	ldw	r2,76(sp)
   247cc:	d8800515 	stw	r2,20(sp)
   247d0:	003c2a06 	br	2387c <__alt_data_end+0xfffe387c>
   247d4:	d9800317 	ldw	r6,12(sp)
   247d8:	00800084 	movi	r2,2
   247dc:	11801516 	blt	r2,r6,24834 <_dtoa_r+0x1660>
   247e0:	d9c00c17 	ldw	r7,48(sp)
   247e4:	d9c00615 	stw	r7,24(sp)
   247e8:	003df706 	br	23fc8 <__alt_data_end+0xfffe3fc8>
   247ec:	193d3926 	beq	r3,r4,23cd4 <__alt_data_end+0xfffe3cd4>
   247f0:	00c00f04 	movi	r3,60
   247f4:	1885c83a 	sub	r2,r3,r2
   247f8:	003ddf06 	br	23f78 <__alt_data_end+0xfffe3f78>
   247fc:	e009883a 	mov	r4,fp
   24800:	e0001115 	stw	zero,68(fp)
   24804:	000b883a 	mov	r5,zero
   24808:	00262580 	call	26258 <_Balloc>
   2480c:	d8800715 	stw	r2,28(sp)
   24810:	d8c00717 	ldw	r3,28(sp)
   24814:	00bfffc4 	movi	r2,-1
   24818:	01000044 	movi	r4,1
   2481c:	d8800c15 	stw	r2,48(sp)
   24820:	e0c01015 	stw	r3,64(fp)
   24824:	d9000b15 	stw	r4,44(sp)
   24828:	d8800615 	stw	r2,24(sp)
   2482c:	d8002215 	stw	zero,136(sp)
   24830:	003c4106 	br	23938 <__alt_data_end+0xfffe3938>
   24834:	d8c00c17 	ldw	r3,48(sp)
   24838:	d8c00615 	stw	r3,24(sp)
   2483c:	003e7006 	br	24200 <__alt_data_end+0xfffe4200>
   24840:	04400044 	movi	r17,1
   24844:	003b2006 	br	234c8 <__alt_data_end+0xfffe34c8>
   24848:	000b883a 	mov	r5,zero
   2484c:	003b3d06 	br	23544 <__alt_data_end+0xfffe3544>
   24850:	d8800c17 	ldw	r2,48(sp)
   24854:	d8800615 	stw	r2,24(sp)
   24858:	003e6906 	br	24200 <__alt_data_end+0xfffe4200>

0002485c <__sflush_r>:
   2485c:	2880030b 	ldhu	r2,12(r5)
   24860:	defffb04 	addi	sp,sp,-20
   24864:	dcc00315 	stw	r19,12(sp)
   24868:	dc400115 	stw	r17,4(sp)
   2486c:	dfc00415 	stw	ra,16(sp)
   24870:	dc800215 	stw	r18,8(sp)
   24874:	dc000015 	stw	r16,0(sp)
   24878:	10c0020c 	andi	r3,r2,8
   2487c:	2823883a 	mov	r17,r5
   24880:	2027883a 	mov	r19,r4
   24884:	1800311e 	bne	r3,zero,2494c <__sflush_r+0xf0>
   24888:	28c00117 	ldw	r3,4(r5)
   2488c:	10820014 	ori	r2,r2,2048
   24890:	2880030d 	sth	r2,12(r5)
   24894:	00c04b0e 	bge	zero,r3,249c4 <__sflush_r+0x168>
   24898:	8a000a17 	ldw	r8,40(r17)
   2489c:	40002326 	beq	r8,zero,2492c <__sflush_r+0xd0>
   248a0:	9c000017 	ldw	r16,0(r19)
   248a4:	10c4000c 	andi	r3,r2,4096
   248a8:	98000015 	stw	zero,0(r19)
   248ac:	18004826 	beq	r3,zero,249d0 <__sflush_r+0x174>
   248b0:	89801417 	ldw	r6,80(r17)
   248b4:	10c0010c 	andi	r3,r2,4
   248b8:	18000626 	beq	r3,zero,248d4 <__sflush_r+0x78>
   248bc:	88c00117 	ldw	r3,4(r17)
   248c0:	88800c17 	ldw	r2,48(r17)
   248c4:	30cdc83a 	sub	r6,r6,r3
   248c8:	10000226 	beq	r2,zero,248d4 <__sflush_r+0x78>
   248cc:	88800f17 	ldw	r2,60(r17)
   248d0:	308dc83a 	sub	r6,r6,r2
   248d4:	89400717 	ldw	r5,28(r17)
   248d8:	000f883a 	mov	r7,zero
   248dc:	9809883a 	mov	r4,r19
   248e0:	403ee83a 	callr	r8
   248e4:	00ffffc4 	movi	r3,-1
   248e8:	10c04426 	beq	r2,r3,249fc <__sflush_r+0x1a0>
   248ec:	88c0030b 	ldhu	r3,12(r17)
   248f0:	89000417 	ldw	r4,16(r17)
   248f4:	88000115 	stw	zero,4(r17)
   248f8:	197dffcc 	andi	r5,r3,63487
   248fc:	8940030d 	sth	r5,12(r17)
   24900:	89000015 	stw	r4,0(r17)
   24904:	18c4000c 	andi	r3,r3,4096
   24908:	18002c1e 	bne	r3,zero,249bc <__sflush_r+0x160>
   2490c:	89400c17 	ldw	r5,48(r17)
   24910:	9c000015 	stw	r16,0(r19)
   24914:	28000526 	beq	r5,zero,2492c <__sflush_r+0xd0>
   24918:	88801004 	addi	r2,r17,64
   2491c:	28800226 	beq	r5,r2,24928 <__sflush_r+0xcc>
   24920:	9809883a 	mov	r4,r19
   24924:	0024fc80 	call	24fc8 <_free_r>
   24928:	88000c15 	stw	zero,48(r17)
   2492c:	0005883a 	mov	r2,zero
   24930:	dfc00417 	ldw	ra,16(sp)
   24934:	dcc00317 	ldw	r19,12(sp)
   24938:	dc800217 	ldw	r18,8(sp)
   2493c:	dc400117 	ldw	r17,4(sp)
   24940:	dc000017 	ldw	r16,0(sp)
   24944:	dec00504 	addi	sp,sp,20
   24948:	f800283a 	ret
   2494c:	2c800417 	ldw	r18,16(r5)
   24950:	903ff626 	beq	r18,zero,2492c <__alt_data_end+0xfffe492c>
   24954:	2c000017 	ldw	r16,0(r5)
   24958:	108000cc 	andi	r2,r2,3
   2495c:	2c800015 	stw	r18,0(r5)
   24960:	84a1c83a 	sub	r16,r16,r18
   24964:	1000131e 	bne	r2,zero,249b4 <__sflush_r+0x158>
   24968:	28800517 	ldw	r2,20(r5)
   2496c:	88800215 	stw	r2,8(r17)
   24970:	04000316 	blt	zero,r16,24980 <__sflush_r+0x124>
   24974:	003fed06 	br	2492c <__alt_data_end+0xfffe492c>
   24978:	90a5883a 	add	r18,r18,r2
   2497c:	043feb0e 	bge	zero,r16,2492c <__alt_data_end+0xfffe492c>
   24980:	88800917 	ldw	r2,36(r17)
   24984:	89400717 	ldw	r5,28(r17)
   24988:	800f883a 	mov	r7,r16
   2498c:	900d883a 	mov	r6,r18
   24990:	9809883a 	mov	r4,r19
   24994:	103ee83a 	callr	r2
   24998:	80a1c83a 	sub	r16,r16,r2
   2499c:	00bff616 	blt	zero,r2,24978 <__alt_data_end+0xfffe4978>
   249a0:	88c0030b 	ldhu	r3,12(r17)
   249a4:	00bfffc4 	movi	r2,-1
   249a8:	18c01014 	ori	r3,r3,64
   249ac:	88c0030d 	sth	r3,12(r17)
   249b0:	003fdf06 	br	24930 <__alt_data_end+0xfffe4930>
   249b4:	0005883a 	mov	r2,zero
   249b8:	003fec06 	br	2496c <__alt_data_end+0xfffe496c>
   249bc:	88801415 	stw	r2,80(r17)
   249c0:	003fd206 	br	2490c <__alt_data_end+0xfffe490c>
   249c4:	28c00f17 	ldw	r3,60(r5)
   249c8:	00ffb316 	blt	zero,r3,24898 <__alt_data_end+0xfffe4898>
   249cc:	003fd706 	br	2492c <__alt_data_end+0xfffe492c>
   249d0:	89400717 	ldw	r5,28(r17)
   249d4:	000d883a 	mov	r6,zero
   249d8:	01c00044 	movi	r7,1
   249dc:	9809883a 	mov	r4,r19
   249e0:	403ee83a 	callr	r8
   249e4:	100d883a 	mov	r6,r2
   249e8:	00bfffc4 	movi	r2,-1
   249ec:	30801426 	beq	r6,r2,24a40 <__sflush_r+0x1e4>
   249f0:	8880030b 	ldhu	r2,12(r17)
   249f4:	8a000a17 	ldw	r8,40(r17)
   249f8:	003fae06 	br	248b4 <__alt_data_end+0xfffe48b4>
   249fc:	98c00017 	ldw	r3,0(r19)
   24a00:	183fba26 	beq	r3,zero,248ec <__alt_data_end+0xfffe48ec>
   24a04:	01000744 	movi	r4,29
   24a08:	19000626 	beq	r3,r4,24a24 <__sflush_r+0x1c8>
   24a0c:	01000584 	movi	r4,22
   24a10:	19000426 	beq	r3,r4,24a24 <__sflush_r+0x1c8>
   24a14:	88c0030b 	ldhu	r3,12(r17)
   24a18:	18c01014 	ori	r3,r3,64
   24a1c:	88c0030d 	sth	r3,12(r17)
   24a20:	003fc306 	br	24930 <__alt_data_end+0xfffe4930>
   24a24:	8880030b 	ldhu	r2,12(r17)
   24a28:	88c00417 	ldw	r3,16(r17)
   24a2c:	88000115 	stw	zero,4(r17)
   24a30:	10bdffcc 	andi	r2,r2,63487
   24a34:	8880030d 	sth	r2,12(r17)
   24a38:	88c00015 	stw	r3,0(r17)
   24a3c:	003fb306 	br	2490c <__alt_data_end+0xfffe490c>
   24a40:	98800017 	ldw	r2,0(r19)
   24a44:	103fea26 	beq	r2,zero,249f0 <__alt_data_end+0xfffe49f0>
   24a48:	00c00744 	movi	r3,29
   24a4c:	10c00226 	beq	r2,r3,24a58 <__sflush_r+0x1fc>
   24a50:	00c00584 	movi	r3,22
   24a54:	10c0031e 	bne	r2,r3,24a64 <__sflush_r+0x208>
   24a58:	9c000015 	stw	r16,0(r19)
   24a5c:	0005883a 	mov	r2,zero
   24a60:	003fb306 	br	24930 <__alt_data_end+0xfffe4930>
   24a64:	88c0030b 	ldhu	r3,12(r17)
   24a68:	3005883a 	mov	r2,r6
   24a6c:	18c01014 	ori	r3,r3,64
   24a70:	88c0030d 	sth	r3,12(r17)
   24a74:	003fae06 	br	24930 <__alt_data_end+0xfffe4930>

00024a78 <_fflush_r>:
   24a78:	defffd04 	addi	sp,sp,-12
   24a7c:	dc000115 	stw	r16,4(sp)
   24a80:	dfc00215 	stw	ra,8(sp)
   24a84:	2021883a 	mov	r16,r4
   24a88:	20000226 	beq	r4,zero,24a94 <_fflush_r+0x1c>
   24a8c:	20800e17 	ldw	r2,56(r4)
   24a90:	10000c26 	beq	r2,zero,24ac4 <_fflush_r+0x4c>
   24a94:	2880030f 	ldh	r2,12(r5)
   24a98:	1000051e 	bne	r2,zero,24ab0 <_fflush_r+0x38>
   24a9c:	0005883a 	mov	r2,zero
   24aa0:	dfc00217 	ldw	ra,8(sp)
   24aa4:	dc000117 	ldw	r16,4(sp)
   24aa8:	dec00304 	addi	sp,sp,12
   24aac:	f800283a 	ret
   24ab0:	8009883a 	mov	r4,r16
   24ab4:	dfc00217 	ldw	ra,8(sp)
   24ab8:	dc000117 	ldw	r16,4(sp)
   24abc:	dec00304 	addi	sp,sp,12
   24ac0:	002485c1 	jmpi	2485c <__sflush_r>
   24ac4:	d9400015 	stw	r5,0(sp)
   24ac8:	0024e540 	call	24e54 <__sinit>
   24acc:	d9400017 	ldw	r5,0(sp)
   24ad0:	003ff006 	br	24a94 <__alt_data_end+0xfffe4a94>

00024ad4 <fflush>:
   24ad4:	20000526 	beq	r4,zero,24aec <fflush+0x18>
   24ad8:	008000f4 	movhi	r2,3
   24adc:	10871a04 	addi	r2,r2,7272
   24ae0:	200b883a 	mov	r5,r4
   24ae4:	11000017 	ldw	r4,0(r2)
   24ae8:	0024a781 	jmpi	24a78 <_fflush_r>
   24aec:	008000f4 	movhi	r2,3
   24af0:	10871904 	addi	r2,r2,7268
   24af4:	11000017 	ldw	r4,0(r2)
   24af8:	014000b4 	movhi	r5,2
   24afc:	29529e04 	addi	r5,r5,19064
   24b00:	002539c1 	jmpi	2539c <_fwalk_reent>

00024b04 <__fp_unlock>:
   24b04:	0005883a 	mov	r2,zero
   24b08:	f800283a 	ret

00024b0c <_cleanup_r>:
   24b0c:	014000f4 	movhi	r5,3
   24b10:	29636304 	addi	r5,r5,-29300
   24b14:	002539c1 	jmpi	2539c <_fwalk_reent>

00024b18 <__sinit.part.1>:
   24b18:	defff704 	addi	sp,sp,-36
   24b1c:	00c000b4 	movhi	r3,2
   24b20:	dfc00815 	stw	ra,32(sp)
   24b24:	ddc00715 	stw	r23,28(sp)
   24b28:	dd800615 	stw	r22,24(sp)
   24b2c:	dd400515 	stw	r21,20(sp)
   24b30:	dd000415 	stw	r20,16(sp)
   24b34:	dcc00315 	stw	r19,12(sp)
   24b38:	dc800215 	stw	r18,8(sp)
   24b3c:	dc400115 	stw	r17,4(sp)
   24b40:	dc000015 	stw	r16,0(sp)
   24b44:	18d2c304 	addi	r3,r3,19212
   24b48:	24000117 	ldw	r16,4(r4)
   24b4c:	20c00f15 	stw	r3,60(r4)
   24b50:	2080bb04 	addi	r2,r4,748
   24b54:	00c000c4 	movi	r3,3
   24b58:	20c0b915 	stw	r3,740(r4)
   24b5c:	2080ba15 	stw	r2,744(r4)
   24b60:	2000b815 	stw	zero,736(r4)
   24b64:	05c00204 	movi	r23,8
   24b68:	00800104 	movi	r2,4
   24b6c:	2025883a 	mov	r18,r4
   24b70:	b80d883a 	mov	r6,r23
   24b74:	81001704 	addi	r4,r16,92
   24b78:	000b883a 	mov	r5,zero
   24b7c:	80000015 	stw	zero,0(r16)
   24b80:	80000115 	stw	zero,4(r16)
   24b84:	80000215 	stw	zero,8(r16)
   24b88:	8080030d 	sth	r2,12(r16)
   24b8c:	80001915 	stw	zero,100(r16)
   24b90:	8000038d 	sth	zero,14(r16)
   24b94:	80000415 	stw	zero,16(r16)
   24b98:	80000515 	stw	zero,20(r16)
   24b9c:	80000615 	stw	zero,24(r16)
   24ba0:	00261300 	call	26130 <memset>
   24ba4:	058000b4 	movhi	r22,2
   24ba8:	94400217 	ldw	r17,8(r18)
   24bac:	054000b4 	movhi	r21,2
   24bb0:	050000b4 	movhi	r20,2
   24bb4:	04c000b4 	movhi	r19,2
   24bb8:	b59cc704 	addi	r22,r22,29468
   24bbc:	ad5cde04 	addi	r21,r21,29560
   24bc0:	a51cfd04 	addi	r20,r20,29684
   24bc4:	9cdd1404 	addi	r19,r19,29776
   24bc8:	85800815 	stw	r22,32(r16)
   24bcc:	85400915 	stw	r21,36(r16)
   24bd0:	85000a15 	stw	r20,40(r16)
   24bd4:	84c00b15 	stw	r19,44(r16)
   24bd8:	84000715 	stw	r16,28(r16)
   24bdc:	00800284 	movi	r2,10
   24be0:	8880030d 	sth	r2,12(r17)
   24be4:	00800044 	movi	r2,1
   24be8:	b80d883a 	mov	r6,r23
   24bec:	89001704 	addi	r4,r17,92
   24bf0:	000b883a 	mov	r5,zero
   24bf4:	88000015 	stw	zero,0(r17)
   24bf8:	88000115 	stw	zero,4(r17)
   24bfc:	88000215 	stw	zero,8(r17)
   24c00:	88001915 	stw	zero,100(r17)
   24c04:	8880038d 	sth	r2,14(r17)
   24c08:	88000415 	stw	zero,16(r17)
   24c0c:	88000515 	stw	zero,20(r17)
   24c10:	88000615 	stw	zero,24(r17)
   24c14:	00261300 	call	26130 <memset>
   24c18:	94000317 	ldw	r16,12(r18)
   24c1c:	00800484 	movi	r2,18
   24c20:	8c400715 	stw	r17,28(r17)
   24c24:	8d800815 	stw	r22,32(r17)
   24c28:	8d400915 	stw	r21,36(r17)
   24c2c:	8d000a15 	stw	r20,40(r17)
   24c30:	8cc00b15 	stw	r19,44(r17)
   24c34:	8080030d 	sth	r2,12(r16)
   24c38:	00800084 	movi	r2,2
   24c3c:	80000015 	stw	zero,0(r16)
   24c40:	80000115 	stw	zero,4(r16)
   24c44:	80000215 	stw	zero,8(r16)
   24c48:	80001915 	stw	zero,100(r16)
   24c4c:	8080038d 	sth	r2,14(r16)
   24c50:	80000415 	stw	zero,16(r16)
   24c54:	80000515 	stw	zero,20(r16)
   24c58:	80000615 	stw	zero,24(r16)
   24c5c:	b80d883a 	mov	r6,r23
   24c60:	000b883a 	mov	r5,zero
   24c64:	81001704 	addi	r4,r16,92
   24c68:	00261300 	call	26130 <memset>
   24c6c:	00800044 	movi	r2,1
   24c70:	84000715 	stw	r16,28(r16)
   24c74:	85800815 	stw	r22,32(r16)
   24c78:	85400915 	stw	r21,36(r16)
   24c7c:	85000a15 	stw	r20,40(r16)
   24c80:	84c00b15 	stw	r19,44(r16)
   24c84:	90800e15 	stw	r2,56(r18)
   24c88:	dfc00817 	ldw	ra,32(sp)
   24c8c:	ddc00717 	ldw	r23,28(sp)
   24c90:	dd800617 	ldw	r22,24(sp)
   24c94:	dd400517 	ldw	r21,20(sp)
   24c98:	dd000417 	ldw	r20,16(sp)
   24c9c:	dcc00317 	ldw	r19,12(sp)
   24ca0:	dc800217 	ldw	r18,8(sp)
   24ca4:	dc400117 	ldw	r17,4(sp)
   24ca8:	dc000017 	ldw	r16,0(sp)
   24cac:	dec00904 	addi	sp,sp,36
   24cb0:	f800283a 	ret

00024cb4 <__fp_lock>:
   24cb4:	0005883a 	mov	r2,zero
   24cb8:	f800283a 	ret

00024cbc <__sfmoreglue>:
   24cbc:	defffc04 	addi	sp,sp,-16
   24cc0:	dc400115 	stw	r17,4(sp)
   24cc4:	2c7fffc4 	addi	r17,r5,-1
   24cc8:	8c401a24 	muli	r17,r17,104
   24ccc:	dc800215 	stw	r18,8(sp)
   24cd0:	2825883a 	mov	r18,r5
   24cd4:	89401d04 	addi	r5,r17,116
   24cd8:	dc000015 	stw	r16,0(sp)
   24cdc:	dfc00315 	stw	ra,12(sp)
   24ce0:	00256f80 	call	256f8 <_malloc_r>
   24ce4:	1021883a 	mov	r16,r2
   24ce8:	10000726 	beq	r2,zero,24d08 <__sfmoreglue+0x4c>
   24cec:	11000304 	addi	r4,r2,12
   24cf0:	10000015 	stw	zero,0(r2)
   24cf4:	14800115 	stw	r18,4(r2)
   24cf8:	11000215 	stw	r4,8(r2)
   24cfc:	89801a04 	addi	r6,r17,104
   24d00:	000b883a 	mov	r5,zero
   24d04:	00261300 	call	26130 <memset>
   24d08:	8005883a 	mov	r2,r16
   24d0c:	dfc00317 	ldw	ra,12(sp)
   24d10:	dc800217 	ldw	r18,8(sp)
   24d14:	dc400117 	ldw	r17,4(sp)
   24d18:	dc000017 	ldw	r16,0(sp)
   24d1c:	dec00404 	addi	sp,sp,16
   24d20:	f800283a 	ret

00024d24 <__sfp>:
   24d24:	defffb04 	addi	sp,sp,-20
   24d28:	dc000015 	stw	r16,0(sp)
   24d2c:	040000f4 	movhi	r16,3
   24d30:	84071904 	addi	r16,r16,7268
   24d34:	dcc00315 	stw	r19,12(sp)
   24d38:	2027883a 	mov	r19,r4
   24d3c:	81000017 	ldw	r4,0(r16)
   24d40:	dfc00415 	stw	ra,16(sp)
   24d44:	dc800215 	stw	r18,8(sp)
   24d48:	20800e17 	ldw	r2,56(r4)
   24d4c:	dc400115 	stw	r17,4(sp)
   24d50:	1000021e 	bne	r2,zero,24d5c <__sfp+0x38>
   24d54:	0024b180 	call	24b18 <__sinit.part.1>
   24d58:	81000017 	ldw	r4,0(r16)
   24d5c:	2480b804 	addi	r18,r4,736
   24d60:	047fffc4 	movi	r17,-1
   24d64:	91000117 	ldw	r4,4(r18)
   24d68:	94000217 	ldw	r16,8(r18)
   24d6c:	213fffc4 	addi	r4,r4,-1
   24d70:	20000a16 	blt	r4,zero,24d9c <__sfp+0x78>
   24d74:	8080030f 	ldh	r2,12(r16)
   24d78:	10000c26 	beq	r2,zero,24dac <__sfp+0x88>
   24d7c:	80c01d04 	addi	r3,r16,116
   24d80:	00000206 	br	24d8c <__sfp+0x68>
   24d84:	18bfe60f 	ldh	r2,-104(r3)
   24d88:	10000826 	beq	r2,zero,24dac <__sfp+0x88>
   24d8c:	213fffc4 	addi	r4,r4,-1
   24d90:	1c3ffd04 	addi	r16,r3,-12
   24d94:	18c01a04 	addi	r3,r3,104
   24d98:	247ffa1e 	bne	r4,r17,24d84 <__alt_data_end+0xfffe4d84>
   24d9c:	90800017 	ldw	r2,0(r18)
   24da0:	10001d26 	beq	r2,zero,24e18 <__sfp+0xf4>
   24da4:	1025883a 	mov	r18,r2
   24da8:	003fee06 	br	24d64 <__alt_data_end+0xfffe4d64>
   24dac:	00bfffc4 	movi	r2,-1
   24db0:	8080038d 	sth	r2,14(r16)
   24db4:	00800044 	movi	r2,1
   24db8:	8080030d 	sth	r2,12(r16)
   24dbc:	80001915 	stw	zero,100(r16)
   24dc0:	80000015 	stw	zero,0(r16)
   24dc4:	80000215 	stw	zero,8(r16)
   24dc8:	80000115 	stw	zero,4(r16)
   24dcc:	80000415 	stw	zero,16(r16)
   24dd0:	80000515 	stw	zero,20(r16)
   24dd4:	80000615 	stw	zero,24(r16)
   24dd8:	01800204 	movi	r6,8
   24ddc:	000b883a 	mov	r5,zero
   24de0:	81001704 	addi	r4,r16,92
   24de4:	00261300 	call	26130 <memset>
   24de8:	8005883a 	mov	r2,r16
   24dec:	80000c15 	stw	zero,48(r16)
   24df0:	80000d15 	stw	zero,52(r16)
   24df4:	80001115 	stw	zero,68(r16)
   24df8:	80001215 	stw	zero,72(r16)
   24dfc:	dfc00417 	ldw	ra,16(sp)
   24e00:	dcc00317 	ldw	r19,12(sp)
   24e04:	dc800217 	ldw	r18,8(sp)
   24e08:	dc400117 	ldw	r17,4(sp)
   24e0c:	dc000017 	ldw	r16,0(sp)
   24e10:	dec00504 	addi	sp,sp,20
   24e14:	f800283a 	ret
   24e18:	01400104 	movi	r5,4
   24e1c:	9809883a 	mov	r4,r19
   24e20:	0024cbc0 	call	24cbc <__sfmoreglue>
   24e24:	90800015 	stw	r2,0(r18)
   24e28:	103fde1e 	bne	r2,zero,24da4 <__alt_data_end+0xfffe4da4>
   24e2c:	00800304 	movi	r2,12
   24e30:	98800015 	stw	r2,0(r19)
   24e34:	0005883a 	mov	r2,zero
   24e38:	003ff006 	br	24dfc <__alt_data_end+0xfffe4dfc>

00024e3c <_cleanup>:
   24e3c:	008000f4 	movhi	r2,3
   24e40:	10871904 	addi	r2,r2,7268
   24e44:	11000017 	ldw	r4,0(r2)
   24e48:	014000f4 	movhi	r5,3
   24e4c:	29636304 	addi	r5,r5,-29300
   24e50:	002539c1 	jmpi	2539c <_fwalk_reent>

00024e54 <__sinit>:
   24e54:	20800e17 	ldw	r2,56(r4)
   24e58:	10000126 	beq	r2,zero,24e60 <__sinit+0xc>
   24e5c:	f800283a 	ret
   24e60:	0024b181 	jmpi	24b18 <__sinit.part.1>

00024e64 <__sfp_lock_acquire>:
   24e64:	f800283a 	ret

00024e68 <__sfp_lock_release>:
   24e68:	f800283a 	ret

00024e6c <__sinit_lock_acquire>:
   24e6c:	f800283a 	ret

00024e70 <__sinit_lock_release>:
   24e70:	f800283a 	ret

00024e74 <__fp_lock_all>:
   24e74:	008000f4 	movhi	r2,3
   24e78:	10871a04 	addi	r2,r2,7272
   24e7c:	11000017 	ldw	r4,0(r2)
   24e80:	014000b4 	movhi	r5,2
   24e84:	29532d04 	addi	r5,r5,19636
   24e88:	00252d81 	jmpi	252d8 <_fwalk>

00024e8c <__fp_unlock_all>:
   24e8c:	008000f4 	movhi	r2,3
   24e90:	10871a04 	addi	r2,r2,7272
   24e94:	11000017 	ldw	r4,0(r2)
   24e98:	014000b4 	movhi	r5,2
   24e9c:	2952c104 	addi	r5,r5,19204
   24ea0:	00252d81 	jmpi	252d8 <_fwalk>

00024ea4 <_malloc_trim_r>:
   24ea4:	defffb04 	addi	sp,sp,-20
   24ea8:	dcc00315 	stw	r19,12(sp)
   24eac:	04c000f4 	movhi	r19,3
   24eb0:	dc800215 	stw	r18,8(sp)
   24eb4:	dc400115 	stw	r17,4(sp)
   24eb8:	dc000015 	stw	r16,0(sp)
   24ebc:	dfc00415 	stw	ra,16(sp)
   24ec0:	2821883a 	mov	r16,r5
   24ec4:	9cc19504 	addi	r19,r19,1620
   24ec8:	2025883a 	mov	r18,r4
   24ecc:	002d9f80 	call	2d9f8 <__malloc_lock>
   24ed0:	98800217 	ldw	r2,8(r19)
   24ed4:	14400117 	ldw	r17,4(r2)
   24ed8:	00bfff04 	movi	r2,-4
   24edc:	88a2703a 	and	r17,r17,r2
   24ee0:	8c21c83a 	sub	r16,r17,r16
   24ee4:	8403fbc4 	addi	r16,r16,4079
   24ee8:	8020d33a 	srli	r16,r16,12
   24eec:	0083ffc4 	movi	r2,4095
   24ef0:	843fffc4 	addi	r16,r16,-1
   24ef4:	8020933a 	slli	r16,r16,12
   24ef8:	1400060e 	bge	r2,r16,24f14 <_malloc_trim_r+0x70>
   24efc:	000b883a 	mov	r5,zero
   24f00:	9009883a 	mov	r4,r18
   24f04:	00272c80 	call	272c8 <_sbrk_r>
   24f08:	98c00217 	ldw	r3,8(r19)
   24f0c:	1c47883a 	add	r3,r3,r17
   24f10:	10c00a26 	beq	r2,r3,24f3c <_malloc_trim_r+0x98>
   24f14:	9009883a 	mov	r4,r18
   24f18:	002da1c0 	call	2da1c <__malloc_unlock>
   24f1c:	0005883a 	mov	r2,zero
   24f20:	dfc00417 	ldw	ra,16(sp)
   24f24:	dcc00317 	ldw	r19,12(sp)
   24f28:	dc800217 	ldw	r18,8(sp)
   24f2c:	dc400117 	ldw	r17,4(sp)
   24f30:	dc000017 	ldw	r16,0(sp)
   24f34:	dec00504 	addi	sp,sp,20
   24f38:	f800283a 	ret
   24f3c:	040bc83a 	sub	r5,zero,r16
   24f40:	9009883a 	mov	r4,r18
   24f44:	00272c80 	call	272c8 <_sbrk_r>
   24f48:	00ffffc4 	movi	r3,-1
   24f4c:	10c00d26 	beq	r2,r3,24f84 <_malloc_trim_r+0xe0>
   24f50:	00c000f4 	movhi	r3,3
   24f54:	18cdf504 	addi	r3,r3,14292
   24f58:	18800017 	ldw	r2,0(r3)
   24f5c:	99000217 	ldw	r4,8(r19)
   24f60:	8c23c83a 	sub	r17,r17,r16
   24f64:	8c400054 	ori	r17,r17,1
   24f68:	1421c83a 	sub	r16,r2,r16
   24f6c:	24400115 	stw	r17,4(r4)
   24f70:	9009883a 	mov	r4,r18
   24f74:	1c000015 	stw	r16,0(r3)
   24f78:	002da1c0 	call	2da1c <__malloc_unlock>
   24f7c:	00800044 	movi	r2,1
   24f80:	003fe706 	br	24f20 <__alt_data_end+0xfffe4f20>
   24f84:	000b883a 	mov	r5,zero
   24f88:	9009883a 	mov	r4,r18
   24f8c:	00272c80 	call	272c8 <_sbrk_r>
   24f90:	99000217 	ldw	r4,8(r19)
   24f94:	014003c4 	movi	r5,15
   24f98:	1107c83a 	sub	r3,r2,r4
   24f9c:	28ffdd0e 	bge	r5,r3,24f14 <__alt_data_end+0xfffe4f14>
   24fa0:	014000f4 	movhi	r5,3
   24fa4:	29471c04 	addi	r5,r5,7280
   24fa8:	29400017 	ldw	r5,0(r5)
   24fac:	18c00054 	ori	r3,r3,1
   24fb0:	20c00115 	stw	r3,4(r4)
   24fb4:	00c000f4 	movhi	r3,3
   24fb8:	1145c83a 	sub	r2,r2,r5
   24fbc:	18cdf504 	addi	r3,r3,14292
   24fc0:	18800015 	stw	r2,0(r3)
   24fc4:	003fd306 	br	24f14 <__alt_data_end+0xfffe4f14>

00024fc8 <_free_r>:
   24fc8:	28004126 	beq	r5,zero,250d0 <_free_r+0x108>
   24fcc:	defffd04 	addi	sp,sp,-12
   24fd0:	dc400115 	stw	r17,4(sp)
   24fd4:	dc000015 	stw	r16,0(sp)
   24fd8:	2023883a 	mov	r17,r4
   24fdc:	2821883a 	mov	r16,r5
   24fe0:	dfc00215 	stw	ra,8(sp)
   24fe4:	002d9f80 	call	2d9f8 <__malloc_lock>
   24fe8:	81ffff17 	ldw	r7,-4(r16)
   24fec:	00bfff84 	movi	r2,-2
   24ff0:	010000f4 	movhi	r4,3
   24ff4:	81bffe04 	addi	r6,r16,-8
   24ff8:	3884703a 	and	r2,r7,r2
   24ffc:	21019504 	addi	r4,r4,1620
   25000:	308b883a 	add	r5,r6,r2
   25004:	2a400117 	ldw	r9,4(r5)
   25008:	22000217 	ldw	r8,8(r4)
   2500c:	00ffff04 	movi	r3,-4
   25010:	48c6703a 	and	r3,r9,r3
   25014:	2a005726 	beq	r5,r8,25174 <_free_r+0x1ac>
   25018:	28c00115 	stw	r3,4(r5)
   2501c:	39c0004c 	andi	r7,r7,1
   25020:	3800091e 	bne	r7,zero,25048 <_free_r+0x80>
   25024:	823ffe17 	ldw	r8,-8(r16)
   25028:	22400204 	addi	r9,r4,8
   2502c:	320dc83a 	sub	r6,r6,r8
   25030:	31c00217 	ldw	r7,8(r6)
   25034:	1205883a 	add	r2,r2,r8
   25038:	3a406526 	beq	r7,r9,251d0 <_free_r+0x208>
   2503c:	32000317 	ldw	r8,12(r6)
   25040:	3a000315 	stw	r8,12(r7)
   25044:	41c00215 	stw	r7,8(r8)
   25048:	28cf883a 	add	r7,r5,r3
   2504c:	39c00117 	ldw	r7,4(r7)
   25050:	39c0004c 	andi	r7,r7,1
   25054:	38003a26 	beq	r7,zero,25140 <_free_r+0x178>
   25058:	10c00054 	ori	r3,r2,1
   2505c:	30c00115 	stw	r3,4(r6)
   25060:	3087883a 	add	r3,r6,r2
   25064:	18800015 	stw	r2,0(r3)
   25068:	00c07fc4 	movi	r3,511
   2506c:	18801936 	bltu	r3,r2,250d4 <_free_r+0x10c>
   25070:	1004d0fa 	srli	r2,r2,3
   25074:	01c00044 	movi	r7,1
   25078:	21400117 	ldw	r5,4(r4)
   2507c:	10c00044 	addi	r3,r2,1
   25080:	18c7883a 	add	r3,r3,r3
   25084:	1005d0ba 	srai	r2,r2,2
   25088:	18c7883a 	add	r3,r3,r3
   2508c:	18c7883a 	add	r3,r3,r3
   25090:	1907883a 	add	r3,r3,r4
   25094:	3884983a 	sll	r2,r7,r2
   25098:	19c00017 	ldw	r7,0(r3)
   2509c:	1a3ffe04 	addi	r8,r3,-8
   250a0:	1144b03a 	or	r2,r2,r5
   250a4:	32000315 	stw	r8,12(r6)
   250a8:	31c00215 	stw	r7,8(r6)
   250ac:	20800115 	stw	r2,4(r4)
   250b0:	19800015 	stw	r6,0(r3)
   250b4:	39800315 	stw	r6,12(r7)
   250b8:	8809883a 	mov	r4,r17
   250bc:	dfc00217 	ldw	ra,8(sp)
   250c0:	dc400117 	ldw	r17,4(sp)
   250c4:	dc000017 	ldw	r16,0(sp)
   250c8:	dec00304 	addi	sp,sp,12
   250cc:	002da1c1 	jmpi	2da1c <__malloc_unlock>
   250d0:	f800283a 	ret
   250d4:	100ad27a 	srli	r5,r2,9
   250d8:	00c00104 	movi	r3,4
   250dc:	19404a36 	bltu	r3,r5,25208 <_free_r+0x240>
   250e0:	100ad1ba 	srli	r5,r2,6
   250e4:	28c00e44 	addi	r3,r5,57
   250e8:	18c7883a 	add	r3,r3,r3
   250ec:	29400e04 	addi	r5,r5,56
   250f0:	18c7883a 	add	r3,r3,r3
   250f4:	18c7883a 	add	r3,r3,r3
   250f8:	1909883a 	add	r4,r3,r4
   250fc:	20c00017 	ldw	r3,0(r4)
   25100:	01c000f4 	movhi	r7,3
   25104:	213ffe04 	addi	r4,r4,-8
   25108:	39c19504 	addi	r7,r7,1620
   2510c:	20c04426 	beq	r4,r3,25220 <_free_r+0x258>
   25110:	01ffff04 	movi	r7,-4
   25114:	19400117 	ldw	r5,4(r3)
   25118:	29ca703a 	and	r5,r5,r7
   2511c:	1140022e 	bgeu	r2,r5,25128 <_free_r+0x160>
   25120:	18c00217 	ldw	r3,8(r3)
   25124:	20fffb1e 	bne	r4,r3,25114 <__alt_data_end+0xfffe5114>
   25128:	19000317 	ldw	r4,12(r3)
   2512c:	31000315 	stw	r4,12(r6)
   25130:	30c00215 	stw	r3,8(r6)
   25134:	21800215 	stw	r6,8(r4)
   25138:	19800315 	stw	r6,12(r3)
   2513c:	003fde06 	br	250b8 <__alt_data_end+0xfffe50b8>
   25140:	29c00217 	ldw	r7,8(r5)
   25144:	10c5883a 	add	r2,r2,r3
   25148:	00c000f4 	movhi	r3,3
   2514c:	18c19704 	addi	r3,r3,1628
   25150:	38c03b26 	beq	r7,r3,25240 <_free_r+0x278>
   25154:	2a000317 	ldw	r8,12(r5)
   25158:	11400054 	ori	r5,r2,1
   2515c:	3087883a 	add	r3,r6,r2
   25160:	3a000315 	stw	r8,12(r7)
   25164:	41c00215 	stw	r7,8(r8)
   25168:	31400115 	stw	r5,4(r6)
   2516c:	18800015 	stw	r2,0(r3)
   25170:	003fbd06 	br	25068 <__alt_data_end+0xfffe5068>
   25174:	39c0004c 	andi	r7,r7,1
   25178:	10c5883a 	add	r2,r2,r3
   2517c:	3800071e 	bne	r7,zero,2519c <_free_r+0x1d4>
   25180:	81fffe17 	ldw	r7,-8(r16)
   25184:	31cdc83a 	sub	r6,r6,r7
   25188:	30c00317 	ldw	r3,12(r6)
   2518c:	31400217 	ldw	r5,8(r6)
   25190:	11c5883a 	add	r2,r2,r7
   25194:	28c00315 	stw	r3,12(r5)
   25198:	19400215 	stw	r5,8(r3)
   2519c:	10c00054 	ori	r3,r2,1
   251a0:	30c00115 	stw	r3,4(r6)
   251a4:	00c000f4 	movhi	r3,3
   251a8:	18c71d04 	addi	r3,r3,7284
   251ac:	18c00017 	ldw	r3,0(r3)
   251b0:	21800215 	stw	r6,8(r4)
   251b4:	10ffc036 	bltu	r2,r3,250b8 <__alt_data_end+0xfffe50b8>
   251b8:	008000f4 	movhi	r2,3
   251bc:	108dec04 	addi	r2,r2,14256
   251c0:	11400017 	ldw	r5,0(r2)
   251c4:	8809883a 	mov	r4,r17
   251c8:	0024ea40 	call	24ea4 <_malloc_trim_r>
   251cc:	003fba06 	br	250b8 <__alt_data_end+0xfffe50b8>
   251d0:	28c9883a 	add	r4,r5,r3
   251d4:	21000117 	ldw	r4,4(r4)
   251d8:	2100004c 	andi	r4,r4,1
   251dc:	2000391e 	bne	r4,zero,252c4 <_free_r+0x2fc>
   251e0:	29c00217 	ldw	r7,8(r5)
   251e4:	29000317 	ldw	r4,12(r5)
   251e8:	1885883a 	add	r2,r3,r2
   251ec:	10c00054 	ori	r3,r2,1
   251f0:	39000315 	stw	r4,12(r7)
   251f4:	21c00215 	stw	r7,8(r4)
   251f8:	30c00115 	stw	r3,4(r6)
   251fc:	308d883a 	add	r6,r6,r2
   25200:	30800015 	stw	r2,0(r6)
   25204:	003fac06 	br	250b8 <__alt_data_end+0xfffe50b8>
   25208:	00c00504 	movi	r3,20
   2520c:	19401536 	bltu	r3,r5,25264 <_free_r+0x29c>
   25210:	28c01704 	addi	r3,r5,92
   25214:	18c7883a 	add	r3,r3,r3
   25218:	294016c4 	addi	r5,r5,91
   2521c:	003fb406 	br	250f0 <__alt_data_end+0xfffe50f0>
   25220:	280bd0ba 	srai	r5,r5,2
   25224:	00c00044 	movi	r3,1
   25228:	38800117 	ldw	r2,4(r7)
   2522c:	194a983a 	sll	r5,r3,r5
   25230:	2007883a 	mov	r3,r4
   25234:	2884b03a 	or	r2,r5,r2
   25238:	38800115 	stw	r2,4(r7)
   2523c:	003fbb06 	br	2512c <__alt_data_end+0xfffe512c>
   25240:	21800515 	stw	r6,20(r4)
   25244:	21800415 	stw	r6,16(r4)
   25248:	10c00054 	ori	r3,r2,1
   2524c:	31c00315 	stw	r7,12(r6)
   25250:	31c00215 	stw	r7,8(r6)
   25254:	30c00115 	stw	r3,4(r6)
   25258:	308d883a 	add	r6,r6,r2
   2525c:	30800015 	stw	r2,0(r6)
   25260:	003f9506 	br	250b8 <__alt_data_end+0xfffe50b8>
   25264:	00c01504 	movi	r3,84
   25268:	19400536 	bltu	r3,r5,25280 <_free_r+0x2b8>
   2526c:	100ad33a 	srli	r5,r2,12
   25270:	28c01bc4 	addi	r3,r5,111
   25274:	18c7883a 	add	r3,r3,r3
   25278:	29401b84 	addi	r5,r5,110
   2527c:	003f9c06 	br	250f0 <__alt_data_end+0xfffe50f0>
   25280:	00c05504 	movi	r3,340
   25284:	19400536 	bltu	r3,r5,2529c <_free_r+0x2d4>
   25288:	100ad3fa 	srli	r5,r2,15
   2528c:	28c01e04 	addi	r3,r5,120
   25290:	18c7883a 	add	r3,r3,r3
   25294:	29401dc4 	addi	r5,r5,119
   25298:	003f9506 	br	250f0 <__alt_data_end+0xfffe50f0>
   2529c:	00c15504 	movi	r3,1364
   252a0:	19400536 	bltu	r3,r5,252b8 <_free_r+0x2f0>
   252a4:	100ad4ba 	srli	r5,r2,18
   252a8:	28c01f44 	addi	r3,r5,125
   252ac:	18c7883a 	add	r3,r3,r3
   252b0:	29401f04 	addi	r5,r5,124
   252b4:	003f8e06 	br	250f0 <__alt_data_end+0xfffe50f0>
   252b8:	00c03f84 	movi	r3,254
   252bc:	01401f84 	movi	r5,126
   252c0:	003f8b06 	br	250f0 <__alt_data_end+0xfffe50f0>
   252c4:	10c00054 	ori	r3,r2,1
   252c8:	30c00115 	stw	r3,4(r6)
   252cc:	308d883a 	add	r6,r6,r2
   252d0:	30800015 	stw	r2,0(r6)
   252d4:	003f7806 	br	250b8 <__alt_data_end+0xfffe50b8>

000252d8 <_fwalk>:
   252d8:	defff704 	addi	sp,sp,-36
   252dc:	dd000415 	stw	r20,16(sp)
   252e0:	dfc00815 	stw	ra,32(sp)
   252e4:	ddc00715 	stw	r23,28(sp)
   252e8:	dd800615 	stw	r22,24(sp)
   252ec:	dd400515 	stw	r21,20(sp)
   252f0:	dcc00315 	stw	r19,12(sp)
   252f4:	dc800215 	stw	r18,8(sp)
   252f8:	dc400115 	stw	r17,4(sp)
   252fc:	dc000015 	stw	r16,0(sp)
   25300:	2500b804 	addi	r20,r4,736
   25304:	a0002326 	beq	r20,zero,25394 <_fwalk+0xbc>
   25308:	282b883a 	mov	r21,r5
   2530c:	002f883a 	mov	r23,zero
   25310:	05800044 	movi	r22,1
   25314:	04ffffc4 	movi	r19,-1
   25318:	a4400117 	ldw	r17,4(r20)
   2531c:	a4800217 	ldw	r18,8(r20)
   25320:	8c7fffc4 	addi	r17,r17,-1
   25324:	88000d16 	blt	r17,zero,2535c <_fwalk+0x84>
   25328:	94000304 	addi	r16,r18,12
   2532c:	94800384 	addi	r18,r18,14
   25330:	8080000b 	ldhu	r2,0(r16)
   25334:	8c7fffc4 	addi	r17,r17,-1
   25338:	813ffd04 	addi	r4,r16,-12
   2533c:	b080042e 	bgeu	r22,r2,25350 <_fwalk+0x78>
   25340:	9080000f 	ldh	r2,0(r18)
   25344:	14c00226 	beq	r2,r19,25350 <_fwalk+0x78>
   25348:	a83ee83a 	callr	r21
   2534c:	b8aeb03a 	or	r23,r23,r2
   25350:	84001a04 	addi	r16,r16,104
   25354:	94801a04 	addi	r18,r18,104
   25358:	8cfff51e 	bne	r17,r19,25330 <__alt_data_end+0xfffe5330>
   2535c:	a5000017 	ldw	r20,0(r20)
   25360:	a03fed1e 	bne	r20,zero,25318 <__alt_data_end+0xfffe5318>
   25364:	b805883a 	mov	r2,r23
   25368:	dfc00817 	ldw	ra,32(sp)
   2536c:	ddc00717 	ldw	r23,28(sp)
   25370:	dd800617 	ldw	r22,24(sp)
   25374:	dd400517 	ldw	r21,20(sp)
   25378:	dd000417 	ldw	r20,16(sp)
   2537c:	dcc00317 	ldw	r19,12(sp)
   25380:	dc800217 	ldw	r18,8(sp)
   25384:	dc400117 	ldw	r17,4(sp)
   25388:	dc000017 	ldw	r16,0(sp)
   2538c:	dec00904 	addi	sp,sp,36
   25390:	f800283a 	ret
   25394:	002f883a 	mov	r23,zero
   25398:	003ff206 	br	25364 <__alt_data_end+0xfffe5364>

0002539c <_fwalk_reent>:
   2539c:	defff704 	addi	sp,sp,-36
   253a0:	dd000415 	stw	r20,16(sp)
   253a4:	dfc00815 	stw	ra,32(sp)
   253a8:	ddc00715 	stw	r23,28(sp)
   253ac:	dd800615 	stw	r22,24(sp)
   253b0:	dd400515 	stw	r21,20(sp)
   253b4:	dcc00315 	stw	r19,12(sp)
   253b8:	dc800215 	stw	r18,8(sp)
   253bc:	dc400115 	stw	r17,4(sp)
   253c0:	dc000015 	stw	r16,0(sp)
   253c4:	2500b804 	addi	r20,r4,736
   253c8:	a0002326 	beq	r20,zero,25458 <_fwalk_reent+0xbc>
   253cc:	282b883a 	mov	r21,r5
   253d0:	2027883a 	mov	r19,r4
   253d4:	002f883a 	mov	r23,zero
   253d8:	05800044 	movi	r22,1
   253dc:	04bfffc4 	movi	r18,-1
   253e0:	a4400117 	ldw	r17,4(r20)
   253e4:	a4000217 	ldw	r16,8(r20)
   253e8:	8c7fffc4 	addi	r17,r17,-1
   253ec:	88000c16 	blt	r17,zero,25420 <_fwalk_reent+0x84>
   253f0:	84000304 	addi	r16,r16,12
   253f4:	8080000b 	ldhu	r2,0(r16)
   253f8:	8c7fffc4 	addi	r17,r17,-1
   253fc:	817ffd04 	addi	r5,r16,-12
   25400:	b080052e 	bgeu	r22,r2,25418 <_fwalk_reent+0x7c>
   25404:	8080008f 	ldh	r2,2(r16)
   25408:	9809883a 	mov	r4,r19
   2540c:	14800226 	beq	r2,r18,25418 <_fwalk_reent+0x7c>
   25410:	a83ee83a 	callr	r21
   25414:	b8aeb03a 	or	r23,r23,r2
   25418:	84001a04 	addi	r16,r16,104
   2541c:	8cbff51e 	bne	r17,r18,253f4 <__alt_data_end+0xfffe53f4>
   25420:	a5000017 	ldw	r20,0(r20)
   25424:	a03fee1e 	bne	r20,zero,253e0 <__alt_data_end+0xfffe53e0>
   25428:	b805883a 	mov	r2,r23
   2542c:	dfc00817 	ldw	ra,32(sp)
   25430:	ddc00717 	ldw	r23,28(sp)
   25434:	dd800617 	ldw	r22,24(sp)
   25438:	dd400517 	ldw	r21,20(sp)
   2543c:	dd000417 	ldw	r20,16(sp)
   25440:	dcc00317 	ldw	r19,12(sp)
   25444:	dc800217 	ldw	r18,8(sp)
   25448:	dc400117 	ldw	r17,4(sp)
   2544c:	dc000017 	ldw	r16,0(sp)
   25450:	dec00904 	addi	sp,sp,36
   25454:	f800283a 	ret
   25458:	002f883a 	mov	r23,zero
   2545c:	003ff206 	br	25428 <__alt_data_end+0xfffe5428>

00025460 <_setlocale_r>:
   25460:	30001b26 	beq	r6,zero,254d0 <_setlocale_r+0x70>
   25464:	014000f4 	movhi	r5,3
   25468:	defffe04 	addi	sp,sp,-8
   2546c:	297fcd04 	addi	r5,r5,-204
   25470:	3009883a 	mov	r4,r6
   25474:	dc000015 	stw	r16,0(sp)
   25478:	dfc00115 	stw	ra,4(sp)
   2547c:	3021883a 	mov	r16,r6
   25480:	00274580 	call	27458 <strcmp>
   25484:	1000061e 	bne	r2,zero,254a0 <_setlocale_r+0x40>
   25488:	008000f4 	movhi	r2,3
   2548c:	10bfcc04 	addi	r2,r2,-208
   25490:	dfc00117 	ldw	ra,4(sp)
   25494:	dc000017 	ldw	r16,0(sp)
   25498:	dec00204 	addi	sp,sp,8
   2549c:	f800283a 	ret
   254a0:	014000f4 	movhi	r5,3
   254a4:	297fcc04 	addi	r5,r5,-208
   254a8:	8009883a 	mov	r4,r16
   254ac:	00274580 	call	27458 <strcmp>
   254b0:	103ff526 	beq	r2,zero,25488 <__alt_data_end+0xfffe5488>
   254b4:	014000f4 	movhi	r5,3
   254b8:	297fb704 	addi	r5,r5,-292
   254bc:	8009883a 	mov	r4,r16
   254c0:	00274580 	call	27458 <strcmp>
   254c4:	103ff026 	beq	r2,zero,25488 <__alt_data_end+0xfffe5488>
   254c8:	0005883a 	mov	r2,zero
   254cc:	003ff006 	br	25490 <__alt_data_end+0xfffe5490>
   254d0:	008000f4 	movhi	r2,3
   254d4:	10bfcc04 	addi	r2,r2,-208
   254d8:	f800283a 	ret

000254dc <__locale_charset>:
   254dc:	008000f4 	movhi	r2,3
   254e0:	10817f04 	addi	r2,r2,1532
   254e4:	f800283a 	ret

000254e8 <__locale_mb_cur_max>:
   254e8:	008000f4 	movhi	r2,3
   254ec:	10871b04 	addi	r2,r2,7276
   254f0:	10800017 	ldw	r2,0(r2)
   254f4:	f800283a 	ret

000254f8 <__locale_msgcharset>:
   254f8:	008000f4 	movhi	r2,3
   254fc:	10817704 	addi	r2,r2,1500
   25500:	f800283a 	ret

00025504 <__locale_cjk_lang>:
   25504:	0005883a 	mov	r2,zero
   25508:	f800283a 	ret

0002550c <_localeconv_r>:
   2550c:	008000f4 	movhi	r2,3
   25510:	10818704 	addi	r2,r2,1564
   25514:	f800283a 	ret

00025518 <setlocale>:
   25518:	008000f4 	movhi	r2,3
   2551c:	10871a04 	addi	r2,r2,7272
   25520:	280d883a 	mov	r6,r5
   25524:	200b883a 	mov	r5,r4
   25528:	11000017 	ldw	r4,0(r2)
   2552c:	00254601 	jmpi	25460 <_setlocale_r>

00025530 <localeconv>:
   25530:	008000f4 	movhi	r2,3
   25534:	10818704 	addi	r2,r2,1564
   25538:	f800283a 	ret

0002553c <__smakebuf_r>:
   2553c:	2880030b 	ldhu	r2,12(r5)
   25540:	10c0008c 	andi	r3,r2,2
   25544:	1800411e 	bne	r3,zero,2564c <__smakebuf_r+0x110>
   25548:	deffec04 	addi	sp,sp,-80
   2554c:	dc000f15 	stw	r16,60(sp)
   25550:	2821883a 	mov	r16,r5
   25554:	2940038f 	ldh	r5,14(r5)
   25558:	dc401015 	stw	r17,64(sp)
   2555c:	dfc01315 	stw	ra,76(sp)
   25560:	dcc01215 	stw	r19,72(sp)
   25564:	dc801115 	stw	r18,68(sp)
   25568:	2023883a 	mov	r17,r4
   2556c:	28001c16 	blt	r5,zero,255e0 <__smakebuf_r+0xa4>
   25570:	d80d883a 	mov	r6,sp
   25574:	00290980 	call	29098 <_fstat_r>
   25578:	10001816 	blt	r2,zero,255dc <__smakebuf_r+0xa0>
   2557c:	d8800117 	ldw	r2,4(sp)
   25580:	00e00014 	movui	r3,32768
   25584:	10bc000c 	andi	r2,r2,61440
   25588:	14c80020 	cmpeqi	r19,r2,8192
   2558c:	10c03726 	beq	r2,r3,2566c <__smakebuf_r+0x130>
   25590:	80c0030b 	ldhu	r3,12(r16)
   25594:	18c20014 	ori	r3,r3,2048
   25598:	80c0030d 	sth	r3,12(r16)
   2559c:	00c80004 	movi	r3,8192
   255a0:	10c0521e 	bne	r2,r3,256ec <__smakebuf_r+0x1b0>
   255a4:	8140038f 	ldh	r5,14(r16)
   255a8:	8809883a 	mov	r4,r17
   255ac:	00295b00 	call	295b0 <_isatty_r>
   255b0:	10004c26 	beq	r2,zero,256e4 <__smakebuf_r+0x1a8>
   255b4:	8080030b 	ldhu	r2,12(r16)
   255b8:	80c010c4 	addi	r3,r16,67
   255bc:	80c00015 	stw	r3,0(r16)
   255c0:	10800054 	ori	r2,r2,1
   255c4:	8080030d 	sth	r2,12(r16)
   255c8:	00800044 	movi	r2,1
   255cc:	80c00415 	stw	r3,16(r16)
   255d0:	80800515 	stw	r2,20(r16)
   255d4:	04810004 	movi	r18,1024
   255d8:	00000706 	br	255f8 <__smakebuf_r+0xbc>
   255dc:	8080030b 	ldhu	r2,12(r16)
   255e0:	10c0200c 	andi	r3,r2,128
   255e4:	18001f1e 	bne	r3,zero,25664 <__smakebuf_r+0x128>
   255e8:	04810004 	movi	r18,1024
   255ec:	10820014 	ori	r2,r2,2048
   255f0:	8080030d 	sth	r2,12(r16)
   255f4:	0027883a 	mov	r19,zero
   255f8:	900b883a 	mov	r5,r18
   255fc:	8809883a 	mov	r4,r17
   25600:	00256f80 	call	256f8 <_malloc_r>
   25604:	10002c26 	beq	r2,zero,256b8 <__smakebuf_r+0x17c>
   25608:	80c0030b 	ldhu	r3,12(r16)
   2560c:	010000b4 	movhi	r4,2
   25610:	2112c304 	addi	r4,r4,19212
   25614:	89000f15 	stw	r4,60(r17)
   25618:	18c02014 	ori	r3,r3,128
   2561c:	80c0030d 	sth	r3,12(r16)
   25620:	80800015 	stw	r2,0(r16)
   25624:	80800415 	stw	r2,16(r16)
   25628:	84800515 	stw	r18,20(r16)
   2562c:	98001a1e 	bne	r19,zero,25698 <__smakebuf_r+0x15c>
   25630:	dfc01317 	ldw	ra,76(sp)
   25634:	dcc01217 	ldw	r19,72(sp)
   25638:	dc801117 	ldw	r18,68(sp)
   2563c:	dc401017 	ldw	r17,64(sp)
   25640:	dc000f17 	ldw	r16,60(sp)
   25644:	dec01404 	addi	sp,sp,80
   25648:	f800283a 	ret
   2564c:	288010c4 	addi	r2,r5,67
   25650:	28800015 	stw	r2,0(r5)
   25654:	28800415 	stw	r2,16(r5)
   25658:	00800044 	movi	r2,1
   2565c:	28800515 	stw	r2,20(r5)
   25660:	f800283a 	ret
   25664:	04801004 	movi	r18,64
   25668:	003fe006 	br	255ec <__alt_data_end+0xfffe55ec>
   2566c:	81000a17 	ldw	r4,40(r16)
   25670:	00c000b4 	movhi	r3,2
   25674:	18dcfd04 	addi	r3,r3,29684
   25678:	20ffc51e 	bne	r4,r3,25590 <__alt_data_end+0xfffe5590>
   2567c:	8080030b 	ldhu	r2,12(r16)
   25680:	04810004 	movi	r18,1024
   25684:	84801315 	stw	r18,76(r16)
   25688:	1484b03a 	or	r2,r2,r18
   2568c:	8080030d 	sth	r2,12(r16)
   25690:	0027883a 	mov	r19,zero
   25694:	003fd806 	br	255f8 <__alt_data_end+0xfffe55f8>
   25698:	8140038f 	ldh	r5,14(r16)
   2569c:	8809883a 	mov	r4,r17
   256a0:	00295b00 	call	295b0 <_isatty_r>
   256a4:	103fe226 	beq	r2,zero,25630 <__alt_data_end+0xfffe5630>
   256a8:	8080030b 	ldhu	r2,12(r16)
   256ac:	10800054 	ori	r2,r2,1
   256b0:	8080030d 	sth	r2,12(r16)
   256b4:	003fde06 	br	25630 <__alt_data_end+0xfffe5630>
   256b8:	8080030b 	ldhu	r2,12(r16)
   256bc:	10c0800c 	andi	r3,r2,512
   256c0:	183fdb1e 	bne	r3,zero,25630 <__alt_data_end+0xfffe5630>
   256c4:	10800094 	ori	r2,r2,2
   256c8:	80c010c4 	addi	r3,r16,67
   256cc:	8080030d 	sth	r2,12(r16)
   256d0:	00800044 	movi	r2,1
   256d4:	80c00015 	stw	r3,0(r16)
   256d8:	80c00415 	stw	r3,16(r16)
   256dc:	80800515 	stw	r2,20(r16)
   256e0:	003fd306 	br	25630 <__alt_data_end+0xfffe5630>
   256e4:	04810004 	movi	r18,1024
   256e8:	003fc306 	br	255f8 <__alt_data_end+0xfffe55f8>
   256ec:	0027883a 	mov	r19,zero
   256f0:	04810004 	movi	r18,1024
   256f4:	003fc006 	br	255f8 <__alt_data_end+0xfffe55f8>

000256f8 <_malloc_r>:
   256f8:	defff504 	addi	sp,sp,-44
   256fc:	dc800315 	stw	r18,12(sp)
   25700:	dfc00a15 	stw	ra,40(sp)
   25704:	df000915 	stw	fp,36(sp)
   25708:	ddc00815 	stw	r23,32(sp)
   2570c:	dd800715 	stw	r22,28(sp)
   25710:	dd400615 	stw	r21,24(sp)
   25714:	dd000515 	stw	r20,20(sp)
   25718:	dcc00415 	stw	r19,16(sp)
   2571c:	dc400215 	stw	r17,8(sp)
   25720:	dc000115 	stw	r16,4(sp)
   25724:	288002c4 	addi	r2,r5,11
   25728:	00c00584 	movi	r3,22
   2572c:	2025883a 	mov	r18,r4
   25730:	18807f2e 	bgeu	r3,r2,25930 <_malloc_r+0x238>
   25734:	047ffe04 	movi	r17,-8
   25738:	1462703a 	and	r17,r2,r17
   2573c:	8800a316 	blt	r17,zero,259cc <_malloc_r+0x2d4>
   25740:	8940a236 	bltu	r17,r5,259cc <_malloc_r+0x2d4>
   25744:	002d9f80 	call	2d9f8 <__malloc_lock>
   25748:	00807dc4 	movi	r2,503
   2574c:	1441e92e 	bgeu	r2,r17,25ef4 <_malloc_r+0x7fc>
   25750:	8804d27a 	srli	r2,r17,9
   25754:	1000a126 	beq	r2,zero,259dc <_malloc_r+0x2e4>
   25758:	00c00104 	movi	r3,4
   2575c:	18811e36 	bltu	r3,r2,25bd8 <_malloc_r+0x4e0>
   25760:	8804d1ba 	srli	r2,r17,6
   25764:	12000e44 	addi	r8,r2,57
   25768:	11c00e04 	addi	r7,r2,56
   2576c:	4209883a 	add	r4,r8,r8
   25770:	04c000f4 	movhi	r19,3
   25774:	2109883a 	add	r4,r4,r4
   25778:	9cc19504 	addi	r19,r19,1620
   2577c:	2109883a 	add	r4,r4,r4
   25780:	9909883a 	add	r4,r19,r4
   25784:	24000117 	ldw	r16,4(r4)
   25788:	213ffe04 	addi	r4,r4,-8
   2578c:	24009726 	beq	r4,r16,259ec <_malloc_r+0x2f4>
   25790:	80800117 	ldw	r2,4(r16)
   25794:	01bfff04 	movi	r6,-4
   25798:	014003c4 	movi	r5,15
   2579c:	1184703a 	and	r2,r2,r6
   257a0:	1447c83a 	sub	r3,r2,r17
   257a4:	28c00716 	blt	r5,r3,257c4 <_malloc_r+0xcc>
   257a8:	1800920e 	bge	r3,zero,259f4 <_malloc_r+0x2fc>
   257ac:	84000317 	ldw	r16,12(r16)
   257b0:	24008e26 	beq	r4,r16,259ec <_malloc_r+0x2f4>
   257b4:	80800117 	ldw	r2,4(r16)
   257b8:	1184703a 	and	r2,r2,r6
   257bc:	1447c83a 	sub	r3,r2,r17
   257c0:	28fff90e 	bge	r5,r3,257a8 <__alt_data_end+0xfffe57a8>
   257c4:	3809883a 	mov	r4,r7
   257c8:	018000f4 	movhi	r6,3
   257cc:	9c000417 	ldw	r16,16(r19)
   257d0:	31819504 	addi	r6,r6,1620
   257d4:	32000204 	addi	r8,r6,8
   257d8:	82013426 	beq	r16,r8,25cac <_malloc_r+0x5b4>
   257dc:	80c00117 	ldw	r3,4(r16)
   257e0:	00bfff04 	movi	r2,-4
   257e4:	188e703a 	and	r7,r3,r2
   257e8:	3c45c83a 	sub	r2,r7,r17
   257ec:	00c003c4 	movi	r3,15
   257f0:	18811f16 	blt	r3,r2,25c70 <_malloc_r+0x578>
   257f4:	32000515 	stw	r8,20(r6)
   257f8:	32000415 	stw	r8,16(r6)
   257fc:	10007f0e 	bge	r2,zero,259fc <_malloc_r+0x304>
   25800:	00807fc4 	movi	r2,511
   25804:	11c0fd36 	bltu	r2,r7,25bfc <_malloc_r+0x504>
   25808:	3806d0fa 	srli	r3,r7,3
   2580c:	01c00044 	movi	r7,1
   25810:	30800117 	ldw	r2,4(r6)
   25814:	19400044 	addi	r5,r3,1
   25818:	294b883a 	add	r5,r5,r5
   2581c:	1807d0ba 	srai	r3,r3,2
   25820:	294b883a 	add	r5,r5,r5
   25824:	294b883a 	add	r5,r5,r5
   25828:	298b883a 	add	r5,r5,r6
   2582c:	38c6983a 	sll	r3,r7,r3
   25830:	29c00017 	ldw	r7,0(r5)
   25834:	2a7ffe04 	addi	r9,r5,-8
   25838:	1886b03a 	or	r3,r3,r2
   2583c:	82400315 	stw	r9,12(r16)
   25840:	81c00215 	stw	r7,8(r16)
   25844:	30c00115 	stw	r3,4(r6)
   25848:	2c000015 	stw	r16,0(r5)
   2584c:	3c000315 	stw	r16,12(r7)
   25850:	2005d0ba 	srai	r2,r4,2
   25854:	01400044 	movi	r5,1
   25858:	288a983a 	sll	r5,r5,r2
   2585c:	19406f36 	bltu	r3,r5,25a1c <_malloc_r+0x324>
   25860:	28c4703a 	and	r2,r5,r3
   25864:	10000a1e 	bne	r2,zero,25890 <_malloc_r+0x198>
   25868:	00bfff04 	movi	r2,-4
   2586c:	294b883a 	add	r5,r5,r5
   25870:	2088703a 	and	r4,r4,r2
   25874:	28c4703a 	and	r2,r5,r3
   25878:	21000104 	addi	r4,r4,4
   2587c:	1000041e 	bne	r2,zero,25890 <_malloc_r+0x198>
   25880:	294b883a 	add	r5,r5,r5
   25884:	28c4703a 	and	r2,r5,r3
   25888:	21000104 	addi	r4,r4,4
   2588c:	103ffc26 	beq	r2,zero,25880 <__alt_data_end+0xfffe5880>
   25890:	02bfff04 	movi	r10,-4
   25894:	024003c4 	movi	r9,15
   25898:	21800044 	addi	r6,r4,1
   2589c:	318d883a 	add	r6,r6,r6
   258a0:	318d883a 	add	r6,r6,r6
   258a4:	318d883a 	add	r6,r6,r6
   258a8:	998d883a 	add	r6,r19,r6
   258ac:	333ffe04 	addi	r12,r6,-8
   258b0:	2017883a 	mov	r11,r4
   258b4:	31800104 	addi	r6,r6,4
   258b8:	34000017 	ldw	r16,0(r6)
   258bc:	31fffd04 	addi	r7,r6,-12
   258c0:	81c0041e 	bne	r16,r7,258d4 <_malloc_r+0x1dc>
   258c4:	0000fb06 	br	25cb4 <_malloc_r+0x5bc>
   258c8:	1801030e 	bge	r3,zero,25cd8 <_malloc_r+0x5e0>
   258cc:	84000317 	ldw	r16,12(r16)
   258d0:	81c0f826 	beq	r16,r7,25cb4 <_malloc_r+0x5bc>
   258d4:	80800117 	ldw	r2,4(r16)
   258d8:	1284703a 	and	r2,r2,r10
   258dc:	1447c83a 	sub	r3,r2,r17
   258e0:	48fff90e 	bge	r9,r3,258c8 <__alt_data_end+0xfffe58c8>
   258e4:	80800317 	ldw	r2,12(r16)
   258e8:	81000217 	ldw	r4,8(r16)
   258ec:	89400054 	ori	r5,r17,1
   258f0:	81400115 	stw	r5,4(r16)
   258f4:	20800315 	stw	r2,12(r4)
   258f8:	11000215 	stw	r4,8(r2)
   258fc:	8463883a 	add	r17,r16,r17
   25900:	9c400515 	stw	r17,20(r19)
   25904:	9c400415 	stw	r17,16(r19)
   25908:	18800054 	ori	r2,r3,1
   2590c:	88800115 	stw	r2,4(r17)
   25910:	8a000315 	stw	r8,12(r17)
   25914:	8a000215 	stw	r8,8(r17)
   25918:	88e3883a 	add	r17,r17,r3
   2591c:	88c00015 	stw	r3,0(r17)
   25920:	9009883a 	mov	r4,r18
   25924:	002da1c0 	call	2da1c <__malloc_unlock>
   25928:	80800204 	addi	r2,r16,8
   2592c:	00001b06 	br	2599c <_malloc_r+0x2a4>
   25930:	04400404 	movi	r17,16
   25934:	89402536 	bltu	r17,r5,259cc <_malloc_r+0x2d4>
   25938:	002d9f80 	call	2d9f8 <__malloc_lock>
   2593c:	00800184 	movi	r2,6
   25940:	01000084 	movi	r4,2
   25944:	04c000f4 	movhi	r19,3
   25948:	1085883a 	add	r2,r2,r2
   2594c:	9cc19504 	addi	r19,r19,1620
   25950:	1085883a 	add	r2,r2,r2
   25954:	9885883a 	add	r2,r19,r2
   25958:	14000117 	ldw	r16,4(r2)
   2595c:	10fffe04 	addi	r3,r2,-8
   25960:	80c0d926 	beq	r16,r3,25cc8 <_malloc_r+0x5d0>
   25964:	80c00117 	ldw	r3,4(r16)
   25968:	81000317 	ldw	r4,12(r16)
   2596c:	00bfff04 	movi	r2,-4
   25970:	1884703a 	and	r2,r3,r2
   25974:	81400217 	ldw	r5,8(r16)
   25978:	8085883a 	add	r2,r16,r2
   2597c:	10c00117 	ldw	r3,4(r2)
   25980:	29000315 	stw	r4,12(r5)
   25984:	21400215 	stw	r5,8(r4)
   25988:	18c00054 	ori	r3,r3,1
   2598c:	10c00115 	stw	r3,4(r2)
   25990:	9009883a 	mov	r4,r18
   25994:	002da1c0 	call	2da1c <__malloc_unlock>
   25998:	80800204 	addi	r2,r16,8
   2599c:	dfc00a17 	ldw	ra,40(sp)
   259a0:	df000917 	ldw	fp,36(sp)
   259a4:	ddc00817 	ldw	r23,32(sp)
   259a8:	dd800717 	ldw	r22,28(sp)
   259ac:	dd400617 	ldw	r21,24(sp)
   259b0:	dd000517 	ldw	r20,20(sp)
   259b4:	dcc00417 	ldw	r19,16(sp)
   259b8:	dc800317 	ldw	r18,12(sp)
   259bc:	dc400217 	ldw	r17,8(sp)
   259c0:	dc000117 	ldw	r16,4(sp)
   259c4:	dec00b04 	addi	sp,sp,44
   259c8:	f800283a 	ret
   259cc:	00800304 	movi	r2,12
   259d0:	90800015 	stw	r2,0(r18)
   259d4:	0005883a 	mov	r2,zero
   259d8:	003ff006 	br	2599c <__alt_data_end+0xfffe599c>
   259dc:	01002004 	movi	r4,128
   259e0:	02001004 	movi	r8,64
   259e4:	01c00fc4 	movi	r7,63
   259e8:	003f6106 	br	25770 <__alt_data_end+0xfffe5770>
   259ec:	4009883a 	mov	r4,r8
   259f0:	003f7506 	br	257c8 <__alt_data_end+0xfffe57c8>
   259f4:	81000317 	ldw	r4,12(r16)
   259f8:	003fde06 	br	25974 <__alt_data_end+0xfffe5974>
   259fc:	81c5883a 	add	r2,r16,r7
   25a00:	11400117 	ldw	r5,4(r2)
   25a04:	9009883a 	mov	r4,r18
   25a08:	29400054 	ori	r5,r5,1
   25a0c:	11400115 	stw	r5,4(r2)
   25a10:	002da1c0 	call	2da1c <__malloc_unlock>
   25a14:	80800204 	addi	r2,r16,8
   25a18:	003fe006 	br	2599c <__alt_data_end+0xfffe599c>
   25a1c:	9c000217 	ldw	r16,8(r19)
   25a20:	00bfff04 	movi	r2,-4
   25a24:	85800117 	ldw	r22,4(r16)
   25a28:	b0ac703a 	and	r22,r22,r2
   25a2c:	b4400336 	bltu	r22,r17,25a3c <_malloc_r+0x344>
   25a30:	b445c83a 	sub	r2,r22,r17
   25a34:	00c003c4 	movi	r3,15
   25a38:	18805d16 	blt	r3,r2,25bb0 <_malloc_r+0x4b8>
   25a3c:	05c000f4 	movhi	r23,3
   25a40:	008000f4 	movhi	r2,3
   25a44:	108dec04 	addi	r2,r2,14256
   25a48:	bdc71c04 	addi	r23,r23,7280
   25a4c:	15400017 	ldw	r21,0(r2)
   25a50:	b8c00017 	ldw	r3,0(r23)
   25a54:	00bfffc4 	movi	r2,-1
   25a58:	858d883a 	add	r6,r16,r22
   25a5c:	8d6b883a 	add	r21,r17,r21
   25a60:	1880ea26 	beq	r3,r2,25e0c <_malloc_r+0x714>
   25a64:	ad4403c4 	addi	r21,r21,4111
   25a68:	00bc0004 	movi	r2,-4096
   25a6c:	a8aa703a 	and	r21,r21,r2
   25a70:	a80b883a 	mov	r5,r21
   25a74:	9009883a 	mov	r4,r18
   25a78:	d9800015 	stw	r6,0(sp)
   25a7c:	00272c80 	call	272c8 <_sbrk_r>
   25a80:	1029883a 	mov	r20,r2
   25a84:	00bfffc4 	movi	r2,-1
   25a88:	d9800017 	ldw	r6,0(sp)
   25a8c:	a080e826 	beq	r20,r2,25e30 <_malloc_r+0x738>
   25a90:	a180a636 	bltu	r20,r6,25d2c <_malloc_r+0x634>
   25a94:	070000f4 	movhi	fp,3
   25a98:	e70df504 	addi	fp,fp,14292
   25a9c:	e0800017 	ldw	r2,0(fp)
   25aa0:	a887883a 	add	r3,r21,r2
   25aa4:	e0c00015 	stw	r3,0(fp)
   25aa8:	3500e626 	beq	r6,r20,25e44 <_malloc_r+0x74c>
   25aac:	b9000017 	ldw	r4,0(r23)
   25ab0:	00bfffc4 	movi	r2,-1
   25ab4:	2080ee26 	beq	r4,r2,25e70 <_malloc_r+0x778>
   25ab8:	a185c83a 	sub	r2,r20,r6
   25abc:	10c5883a 	add	r2,r2,r3
   25ac0:	e0800015 	stw	r2,0(fp)
   25ac4:	a0c001cc 	andi	r3,r20,7
   25ac8:	1800bc26 	beq	r3,zero,25dbc <_malloc_r+0x6c4>
   25acc:	a0e9c83a 	sub	r20,r20,r3
   25ad0:	00840204 	movi	r2,4104
   25ad4:	a5000204 	addi	r20,r20,8
   25ad8:	10c7c83a 	sub	r3,r2,r3
   25adc:	a545883a 	add	r2,r20,r21
   25ae0:	1083ffcc 	andi	r2,r2,4095
   25ae4:	18abc83a 	sub	r21,r3,r2
   25ae8:	a80b883a 	mov	r5,r21
   25aec:	9009883a 	mov	r4,r18
   25af0:	00272c80 	call	272c8 <_sbrk_r>
   25af4:	00ffffc4 	movi	r3,-1
   25af8:	10c0e126 	beq	r2,r3,25e80 <_malloc_r+0x788>
   25afc:	1505c83a 	sub	r2,r2,r20
   25b00:	1545883a 	add	r2,r2,r21
   25b04:	10800054 	ori	r2,r2,1
   25b08:	e0c00017 	ldw	r3,0(fp)
   25b0c:	9d000215 	stw	r20,8(r19)
   25b10:	a0800115 	stw	r2,4(r20)
   25b14:	a8c7883a 	add	r3,r21,r3
   25b18:	e0c00015 	stw	r3,0(fp)
   25b1c:	84c00e26 	beq	r16,r19,25b58 <_malloc_r+0x460>
   25b20:	018003c4 	movi	r6,15
   25b24:	3580a72e 	bgeu	r6,r22,25dc4 <_malloc_r+0x6cc>
   25b28:	81400117 	ldw	r5,4(r16)
   25b2c:	013ffe04 	movi	r4,-8
   25b30:	b0bffd04 	addi	r2,r22,-12
   25b34:	1104703a 	and	r2,r2,r4
   25b38:	2900004c 	andi	r4,r5,1
   25b3c:	2088b03a 	or	r4,r4,r2
   25b40:	81000115 	stw	r4,4(r16)
   25b44:	01400144 	movi	r5,5
   25b48:	8089883a 	add	r4,r16,r2
   25b4c:	21400115 	stw	r5,4(r4)
   25b50:	21400215 	stw	r5,8(r4)
   25b54:	3080cd36 	bltu	r6,r2,25e8c <_malloc_r+0x794>
   25b58:	008000f4 	movhi	r2,3
   25b5c:	108deb04 	addi	r2,r2,14252
   25b60:	11000017 	ldw	r4,0(r2)
   25b64:	20c0012e 	bgeu	r4,r3,25b6c <_malloc_r+0x474>
   25b68:	10c00015 	stw	r3,0(r2)
   25b6c:	008000f4 	movhi	r2,3
   25b70:	108dea04 	addi	r2,r2,14248
   25b74:	11000017 	ldw	r4,0(r2)
   25b78:	9c000217 	ldw	r16,8(r19)
   25b7c:	20c0012e 	bgeu	r4,r3,25b84 <_malloc_r+0x48c>
   25b80:	10c00015 	stw	r3,0(r2)
   25b84:	80c00117 	ldw	r3,4(r16)
   25b88:	00bfff04 	movi	r2,-4
   25b8c:	1886703a 	and	r3,r3,r2
   25b90:	1c45c83a 	sub	r2,r3,r17
   25b94:	1c400236 	bltu	r3,r17,25ba0 <_malloc_r+0x4a8>
   25b98:	00c003c4 	movi	r3,15
   25b9c:	18800416 	blt	r3,r2,25bb0 <_malloc_r+0x4b8>
   25ba0:	9009883a 	mov	r4,r18
   25ba4:	002da1c0 	call	2da1c <__malloc_unlock>
   25ba8:	0005883a 	mov	r2,zero
   25bac:	003f7b06 	br	2599c <__alt_data_end+0xfffe599c>
   25bb0:	88c00054 	ori	r3,r17,1
   25bb4:	80c00115 	stw	r3,4(r16)
   25bb8:	8463883a 	add	r17,r16,r17
   25bbc:	10800054 	ori	r2,r2,1
   25bc0:	9c400215 	stw	r17,8(r19)
   25bc4:	88800115 	stw	r2,4(r17)
   25bc8:	9009883a 	mov	r4,r18
   25bcc:	002da1c0 	call	2da1c <__malloc_unlock>
   25bd0:	80800204 	addi	r2,r16,8
   25bd4:	003f7106 	br	2599c <__alt_data_end+0xfffe599c>
   25bd8:	00c00504 	movi	r3,20
   25bdc:	18804a2e 	bgeu	r3,r2,25d08 <_malloc_r+0x610>
   25be0:	00c01504 	movi	r3,84
   25be4:	18806e36 	bltu	r3,r2,25da0 <_malloc_r+0x6a8>
   25be8:	8804d33a 	srli	r2,r17,12
   25bec:	12001bc4 	addi	r8,r2,111
   25bf0:	11c01b84 	addi	r7,r2,110
   25bf4:	4209883a 	add	r4,r8,r8
   25bf8:	003edd06 	br	25770 <__alt_data_end+0xfffe5770>
   25bfc:	3804d27a 	srli	r2,r7,9
   25c00:	00c00104 	movi	r3,4
   25c04:	1880442e 	bgeu	r3,r2,25d18 <_malloc_r+0x620>
   25c08:	00c00504 	movi	r3,20
   25c0c:	18808136 	bltu	r3,r2,25e14 <_malloc_r+0x71c>
   25c10:	11401704 	addi	r5,r2,92
   25c14:	10c016c4 	addi	r3,r2,91
   25c18:	294b883a 	add	r5,r5,r5
   25c1c:	294b883a 	add	r5,r5,r5
   25c20:	294b883a 	add	r5,r5,r5
   25c24:	994b883a 	add	r5,r19,r5
   25c28:	28800017 	ldw	r2,0(r5)
   25c2c:	018000f4 	movhi	r6,3
   25c30:	297ffe04 	addi	r5,r5,-8
   25c34:	31819504 	addi	r6,r6,1620
   25c38:	28806526 	beq	r5,r2,25dd0 <_malloc_r+0x6d8>
   25c3c:	01bfff04 	movi	r6,-4
   25c40:	10c00117 	ldw	r3,4(r2)
   25c44:	1986703a 	and	r3,r3,r6
   25c48:	38c0022e 	bgeu	r7,r3,25c54 <_malloc_r+0x55c>
   25c4c:	10800217 	ldw	r2,8(r2)
   25c50:	28bffb1e 	bne	r5,r2,25c40 <__alt_data_end+0xfffe5c40>
   25c54:	11400317 	ldw	r5,12(r2)
   25c58:	98c00117 	ldw	r3,4(r19)
   25c5c:	81400315 	stw	r5,12(r16)
   25c60:	80800215 	stw	r2,8(r16)
   25c64:	2c000215 	stw	r16,8(r5)
   25c68:	14000315 	stw	r16,12(r2)
   25c6c:	003ef806 	br	25850 <__alt_data_end+0xfffe5850>
   25c70:	88c00054 	ori	r3,r17,1
   25c74:	80c00115 	stw	r3,4(r16)
   25c78:	8463883a 	add	r17,r16,r17
   25c7c:	34400515 	stw	r17,20(r6)
   25c80:	34400415 	stw	r17,16(r6)
   25c84:	10c00054 	ori	r3,r2,1
   25c88:	8a000315 	stw	r8,12(r17)
   25c8c:	8a000215 	stw	r8,8(r17)
   25c90:	88c00115 	stw	r3,4(r17)
   25c94:	88a3883a 	add	r17,r17,r2
   25c98:	88800015 	stw	r2,0(r17)
   25c9c:	9009883a 	mov	r4,r18
   25ca0:	002da1c0 	call	2da1c <__malloc_unlock>
   25ca4:	80800204 	addi	r2,r16,8
   25ca8:	003f3c06 	br	2599c <__alt_data_end+0xfffe599c>
   25cac:	30c00117 	ldw	r3,4(r6)
   25cb0:	003ee706 	br	25850 <__alt_data_end+0xfffe5850>
   25cb4:	5ac00044 	addi	r11,r11,1
   25cb8:	588000cc 	andi	r2,r11,3
   25cbc:	31800204 	addi	r6,r6,8
   25cc0:	103efd1e 	bne	r2,zero,258b8 <__alt_data_end+0xfffe58b8>
   25cc4:	00002406 	br	25d58 <_malloc_r+0x660>
   25cc8:	14000317 	ldw	r16,12(r2)
   25ccc:	143f251e 	bne	r2,r16,25964 <__alt_data_end+0xfffe5964>
   25cd0:	21000084 	addi	r4,r4,2
   25cd4:	003ebc06 	br	257c8 <__alt_data_end+0xfffe57c8>
   25cd8:	8085883a 	add	r2,r16,r2
   25cdc:	10c00117 	ldw	r3,4(r2)
   25ce0:	81000317 	ldw	r4,12(r16)
   25ce4:	81400217 	ldw	r5,8(r16)
   25ce8:	18c00054 	ori	r3,r3,1
   25cec:	10c00115 	stw	r3,4(r2)
   25cf0:	29000315 	stw	r4,12(r5)
   25cf4:	21400215 	stw	r5,8(r4)
   25cf8:	9009883a 	mov	r4,r18
   25cfc:	002da1c0 	call	2da1c <__malloc_unlock>
   25d00:	80800204 	addi	r2,r16,8
   25d04:	003f2506 	br	2599c <__alt_data_end+0xfffe599c>
   25d08:	12001704 	addi	r8,r2,92
   25d0c:	11c016c4 	addi	r7,r2,91
   25d10:	4209883a 	add	r4,r8,r8
   25d14:	003e9606 	br	25770 <__alt_data_end+0xfffe5770>
   25d18:	3804d1ba 	srli	r2,r7,6
   25d1c:	11400e44 	addi	r5,r2,57
   25d20:	10c00e04 	addi	r3,r2,56
   25d24:	294b883a 	add	r5,r5,r5
   25d28:	003fbc06 	br	25c1c <__alt_data_end+0xfffe5c1c>
   25d2c:	84ff5926 	beq	r16,r19,25a94 <__alt_data_end+0xfffe5a94>
   25d30:	008000f4 	movhi	r2,3
   25d34:	10819504 	addi	r2,r2,1620
   25d38:	14000217 	ldw	r16,8(r2)
   25d3c:	00bfff04 	movi	r2,-4
   25d40:	80c00117 	ldw	r3,4(r16)
   25d44:	1886703a 	and	r3,r3,r2
   25d48:	003f9106 	br	25b90 <__alt_data_end+0xfffe5b90>
   25d4c:	60800217 	ldw	r2,8(r12)
   25d50:	213fffc4 	addi	r4,r4,-1
   25d54:	1300651e 	bne	r2,r12,25eec <_malloc_r+0x7f4>
   25d58:	208000cc 	andi	r2,r4,3
   25d5c:	633ffe04 	addi	r12,r12,-8
   25d60:	103ffa1e 	bne	r2,zero,25d4c <__alt_data_end+0xfffe5d4c>
   25d64:	98800117 	ldw	r2,4(r19)
   25d68:	0146303a 	nor	r3,zero,r5
   25d6c:	1884703a 	and	r2,r3,r2
   25d70:	98800115 	stw	r2,4(r19)
   25d74:	294b883a 	add	r5,r5,r5
   25d78:	117f2836 	bltu	r2,r5,25a1c <__alt_data_end+0xfffe5a1c>
   25d7c:	283f2726 	beq	r5,zero,25a1c <__alt_data_end+0xfffe5a1c>
   25d80:	2886703a 	and	r3,r5,r2
   25d84:	5809883a 	mov	r4,r11
   25d88:	183ec31e 	bne	r3,zero,25898 <__alt_data_end+0xfffe5898>
   25d8c:	294b883a 	add	r5,r5,r5
   25d90:	2886703a 	and	r3,r5,r2
   25d94:	21000104 	addi	r4,r4,4
   25d98:	183ffc26 	beq	r3,zero,25d8c <__alt_data_end+0xfffe5d8c>
   25d9c:	003ebe06 	br	25898 <__alt_data_end+0xfffe5898>
   25da0:	00c05504 	movi	r3,340
   25da4:	18801236 	bltu	r3,r2,25df0 <_malloc_r+0x6f8>
   25da8:	8804d3fa 	srli	r2,r17,15
   25dac:	12001e04 	addi	r8,r2,120
   25db0:	11c01dc4 	addi	r7,r2,119
   25db4:	4209883a 	add	r4,r8,r8
   25db8:	003e6d06 	br	25770 <__alt_data_end+0xfffe5770>
   25dbc:	00c40004 	movi	r3,4096
   25dc0:	003f4606 	br	25adc <__alt_data_end+0xfffe5adc>
   25dc4:	00800044 	movi	r2,1
   25dc8:	a0800115 	stw	r2,4(r20)
   25dcc:	003f7406 	br	25ba0 <__alt_data_end+0xfffe5ba0>
   25dd0:	1805d0ba 	srai	r2,r3,2
   25dd4:	01c00044 	movi	r7,1
   25dd8:	30c00117 	ldw	r3,4(r6)
   25ddc:	388e983a 	sll	r7,r7,r2
   25de0:	2805883a 	mov	r2,r5
   25de4:	38c6b03a 	or	r3,r7,r3
   25de8:	30c00115 	stw	r3,4(r6)
   25dec:	003f9b06 	br	25c5c <__alt_data_end+0xfffe5c5c>
   25df0:	00c15504 	movi	r3,1364
   25df4:	18801a36 	bltu	r3,r2,25e60 <_malloc_r+0x768>
   25df8:	8804d4ba 	srli	r2,r17,18
   25dfc:	12001f44 	addi	r8,r2,125
   25e00:	11c01f04 	addi	r7,r2,124
   25e04:	4209883a 	add	r4,r8,r8
   25e08:	003e5906 	br	25770 <__alt_data_end+0xfffe5770>
   25e0c:	ad400404 	addi	r21,r21,16
   25e10:	003f1706 	br	25a70 <__alt_data_end+0xfffe5a70>
   25e14:	00c01504 	movi	r3,84
   25e18:	18802336 	bltu	r3,r2,25ea8 <_malloc_r+0x7b0>
   25e1c:	3804d33a 	srli	r2,r7,12
   25e20:	11401bc4 	addi	r5,r2,111
   25e24:	10c01b84 	addi	r3,r2,110
   25e28:	294b883a 	add	r5,r5,r5
   25e2c:	003f7b06 	br	25c1c <__alt_data_end+0xfffe5c1c>
   25e30:	9c000217 	ldw	r16,8(r19)
   25e34:	00bfff04 	movi	r2,-4
   25e38:	80c00117 	ldw	r3,4(r16)
   25e3c:	1886703a 	and	r3,r3,r2
   25e40:	003f5306 	br	25b90 <__alt_data_end+0xfffe5b90>
   25e44:	3083ffcc 	andi	r2,r6,4095
   25e48:	103f181e 	bne	r2,zero,25aac <__alt_data_end+0xfffe5aac>
   25e4c:	99000217 	ldw	r4,8(r19)
   25e50:	b545883a 	add	r2,r22,r21
   25e54:	10800054 	ori	r2,r2,1
   25e58:	20800115 	stw	r2,4(r4)
   25e5c:	003f3e06 	br	25b58 <__alt_data_end+0xfffe5b58>
   25e60:	01003f84 	movi	r4,254
   25e64:	02001fc4 	movi	r8,127
   25e68:	01c01f84 	movi	r7,126
   25e6c:	003e4006 	br	25770 <__alt_data_end+0xfffe5770>
   25e70:	008000f4 	movhi	r2,3
   25e74:	10871c04 	addi	r2,r2,7280
   25e78:	15000015 	stw	r20,0(r2)
   25e7c:	003f1106 	br	25ac4 <__alt_data_end+0xfffe5ac4>
   25e80:	00800044 	movi	r2,1
   25e84:	002b883a 	mov	r21,zero
   25e88:	003f1f06 	br	25b08 <__alt_data_end+0xfffe5b08>
   25e8c:	81400204 	addi	r5,r16,8
   25e90:	9009883a 	mov	r4,r18
   25e94:	0024fc80 	call	24fc8 <_free_r>
   25e98:	008000f4 	movhi	r2,3
   25e9c:	108df504 	addi	r2,r2,14292
   25ea0:	10c00017 	ldw	r3,0(r2)
   25ea4:	003f2c06 	br	25b58 <__alt_data_end+0xfffe5b58>
   25ea8:	00c05504 	movi	r3,340
   25eac:	18800536 	bltu	r3,r2,25ec4 <_malloc_r+0x7cc>
   25eb0:	3804d3fa 	srli	r2,r7,15
   25eb4:	11401e04 	addi	r5,r2,120
   25eb8:	10c01dc4 	addi	r3,r2,119
   25ebc:	294b883a 	add	r5,r5,r5
   25ec0:	003f5606 	br	25c1c <__alt_data_end+0xfffe5c1c>
   25ec4:	00c15504 	movi	r3,1364
   25ec8:	18800536 	bltu	r3,r2,25ee0 <_malloc_r+0x7e8>
   25ecc:	3804d4ba 	srli	r2,r7,18
   25ed0:	11401f44 	addi	r5,r2,125
   25ed4:	10c01f04 	addi	r3,r2,124
   25ed8:	294b883a 	add	r5,r5,r5
   25edc:	003f4f06 	br	25c1c <__alt_data_end+0xfffe5c1c>
   25ee0:	01403f84 	movi	r5,254
   25ee4:	00c01f84 	movi	r3,126
   25ee8:	003f4c06 	br	25c1c <__alt_data_end+0xfffe5c1c>
   25eec:	98800117 	ldw	r2,4(r19)
   25ef0:	003fa006 	br	25d74 <__alt_data_end+0xfffe5d74>
   25ef4:	8808d0fa 	srli	r4,r17,3
   25ef8:	20800044 	addi	r2,r4,1
   25efc:	1085883a 	add	r2,r2,r2
   25f00:	003e9006 	br	25944 <__alt_data_end+0xfffe5944>

00025f04 <memchr>:
   25f04:	208000cc 	andi	r2,r4,3
   25f08:	280f883a 	mov	r7,r5
   25f0c:	10003426 	beq	r2,zero,25fe0 <memchr+0xdc>
   25f10:	30bfffc4 	addi	r2,r6,-1
   25f14:	30001a26 	beq	r6,zero,25f80 <memchr+0x7c>
   25f18:	20c00003 	ldbu	r3,0(r4)
   25f1c:	29803fcc 	andi	r6,r5,255
   25f20:	30c0051e 	bne	r6,r3,25f38 <memchr+0x34>
   25f24:	00001806 	br	25f88 <memchr+0x84>
   25f28:	10001526 	beq	r2,zero,25f80 <memchr+0x7c>
   25f2c:	20c00003 	ldbu	r3,0(r4)
   25f30:	10bfffc4 	addi	r2,r2,-1
   25f34:	30c01426 	beq	r6,r3,25f88 <memchr+0x84>
   25f38:	21000044 	addi	r4,r4,1
   25f3c:	20c000cc 	andi	r3,r4,3
   25f40:	183ff91e 	bne	r3,zero,25f28 <__alt_data_end+0xfffe5f28>
   25f44:	020000c4 	movi	r8,3
   25f48:	40801136 	bltu	r8,r2,25f90 <memchr+0x8c>
   25f4c:	10000c26 	beq	r2,zero,25f80 <memchr+0x7c>
   25f50:	20c00003 	ldbu	r3,0(r4)
   25f54:	29403fcc 	andi	r5,r5,255
   25f58:	28c00b26 	beq	r5,r3,25f88 <memchr+0x84>
   25f5c:	20c00044 	addi	r3,r4,1
   25f60:	39803fcc 	andi	r6,r7,255
   25f64:	2089883a 	add	r4,r4,r2
   25f68:	00000306 	br	25f78 <memchr+0x74>
   25f6c:	18c00044 	addi	r3,r3,1
   25f70:	197fffc3 	ldbu	r5,-1(r3)
   25f74:	31400526 	beq	r6,r5,25f8c <memchr+0x88>
   25f78:	1805883a 	mov	r2,r3
   25f7c:	20fffb1e 	bne	r4,r3,25f6c <__alt_data_end+0xfffe5f6c>
   25f80:	0005883a 	mov	r2,zero
   25f84:	f800283a 	ret
   25f88:	2005883a 	mov	r2,r4
   25f8c:	f800283a 	ret
   25f90:	28c03fcc 	andi	r3,r5,255
   25f94:	1812923a 	slli	r9,r3,8
   25f98:	02ffbff4 	movhi	r11,65279
   25f9c:	02a02074 	movhi	r10,32897
   25fa0:	48d2b03a 	or	r9,r9,r3
   25fa4:	4806943a 	slli	r3,r9,16
   25fa8:	5affbfc4 	addi	r11,r11,-257
   25fac:	52a02004 	addi	r10,r10,-32640
   25fb0:	48d2b03a 	or	r9,r9,r3
   25fb4:	20c00017 	ldw	r3,0(r4)
   25fb8:	48c6f03a 	xor	r3,r9,r3
   25fbc:	1acd883a 	add	r6,r3,r11
   25fc0:	00c6303a 	nor	r3,zero,r3
   25fc4:	30c6703a 	and	r3,r6,r3
   25fc8:	1a86703a 	and	r3,r3,r10
   25fcc:	183fe01e 	bne	r3,zero,25f50 <__alt_data_end+0xfffe5f50>
   25fd0:	10bfff04 	addi	r2,r2,-4
   25fd4:	21000104 	addi	r4,r4,4
   25fd8:	40bff636 	bltu	r8,r2,25fb4 <__alt_data_end+0xfffe5fb4>
   25fdc:	003fdb06 	br	25f4c <__alt_data_end+0xfffe5f4c>
   25fe0:	3005883a 	mov	r2,r6
   25fe4:	003fd706 	br	25f44 <__alt_data_end+0xfffe5f44>

00025fe8 <memcpy>:
   25fe8:	defffd04 	addi	sp,sp,-12
   25fec:	dfc00215 	stw	ra,8(sp)
   25ff0:	dc400115 	stw	r17,4(sp)
   25ff4:	dc000015 	stw	r16,0(sp)
   25ff8:	00c003c4 	movi	r3,15
   25ffc:	2005883a 	mov	r2,r4
   26000:	1980452e 	bgeu	r3,r6,26118 <memcpy+0x130>
   26004:	2906b03a 	or	r3,r5,r4
   26008:	18c000cc 	andi	r3,r3,3
   2600c:	1800441e 	bne	r3,zero,26120 <memcpy+0x138>
   26010:	347ffc04 	addi	r17,r6,-16
   26014:	8822d13a 	srli	r17,r17,4
   26018:	28c00104 	addi	r3,r5,4
   2601c:	23400104 	addi	r13,r4,4
   26020:	8820913a 	slli	r16,r17,4
   26024:	2b000204 	addi	r12,r5,8
   26028:	22c00204 	addi	r11,r4,8
   2602c:	84000504 	addi	r16,r16,20
   26030:	2a800304 	addi	r10,r5,12
   26034:	22400304 	addi	r9,r4,12
   26038:	2c21883a 	add	r16,r5,r16
   2603c:	2811883a 	mov	r8,r5
   26040:	200f883a 	mov	r7,r4
   26044:	41000017 	ldw	r4,0(r8)
   26048:	1fc00017 	ldw	ra,0(r3)
   2604c:	63c00017 	ldw	r15,0(r12)
   26050:	39000015 	stw	r4,0(r7)
   26054:	53800017 	ldw	r14,0(r10)
   26058:	6fc00015 	stw	ra,0(r13)
   2605c:	5bc00015 	stw	r15,0(r11)
   26060:	4b800015 	stw	r14,0(r9)
   26064:	18c00404 	addi	r3,r3,16
   26068:	39c00404 	addi	r7,r7,16
   2606c:	42000404 	addi	r8,r8,16
   26070:	6b400404 	addi	r13,r13,16
   26074:	63000404 	addi	r12,r12,16
   26078:	5ac00404 	addi	r11,r11,16
   2607c:	52800404 	addi	r10,r10,16
   26080:	4a400404 	addi	r9,r9,16
   26084:	1c3fef1e 	bne	r3,r16,26044 <__alt_data_end+0xfffe6044>
   26088:	89c00044 	addi	r7,r17,1
   2608c:	380e913a 	slli	r7,r7,4
   26090:	310003cc 	andi	r4,r6,15
   26094:	02c000c4 	movi	r11,3
   26098:	11c7883a 	add	r3,r2,r7
   2609c:	29cb883a 	add	r5,r5,r7
   260a0:	5900212e 	bgeu	r11,r4,26128 <memcpy+0x140>
   260a4:	1813883a 	mov	r9,r3
   260a8:	2811883a 	mov	r8,r5
   260ac:	200f883a 	mov	r7,r4
   260b0:	42800017 	ldw	r10,0(r8)
   260b4:	4a400104 	addi	r9,r9,4
   260b8:	39ffff04 	addi	r7,r7,-4
   260bc:	4abfff15 	stw	r10,-4(r9)
   260c0:	42000104 	addi	r8,r8,4
   260c4:	59fffa36 	bltu	r11,r7,260b0 <__alt_data_end+0xfffe60b0>
   260c8:	213fff04 	addi	r4,r4,-4
   260cc:	2008d0ba 	srli	r4,r4,2
   260d0:	318000cc 	andi	r6,r6,3
   260d4:	21000044 	addi	r4,r4,1
   260d8:	2109883a 	add	r4,r4,r4
   260dc:	2109883a 	add	r4,r4,r4
   260e0:	1907883a 	add	r3,r3,r4
   260e4:	290b883a 	add	r5,r5,r4
   260e8:	30000626 	beq	r6,zero,26104 <memcpy+0x11c>
   260ec:	198d883a 	add	r6,r3,r6
   260f0:	29c00003 	ldbu	r7,0(r5)
   260f4:	18c00044 	addi	r3,r3,1
   260f8:	29400044 	addi	r5,r5,1
   260fc:	19ffffc5 	stb	r7,-1(r3)
   26100:	19bffb1e 	bne	r3,r6,260f0 <__alt_data_end+0xfffe60f0>
   26104:	dfc00217 	ldw	ra,8(sp)
   26108:	dc400117 	ldw	r17,4(sp)
   2610c:	dc000017 	ldw	r16,0(sp)
   26110:	dec00304 	addi	sp,sp,12
   26114:	f800283a 	ret
   26118:	2007883a 	mov	r3,r4
   2611c:	003ff206 	br	260e8 <__alt_data_end+0xfffe60e8>
   26120:	2007883a 	mov	r3,r4
   26124:	003ff106 	br	260ec <__alt_data_end+0xfffe60ec>
   26128:	200d883a 	mov	r6,r4
   2612c:	003fee06 	br	260e8 <__alt_data_end+0xfffe60e8>

00026130 <memset>:
   26130:	20c000cc 	andi	r3,r4,3
   26134:	2005883a 	mov	r2,r4
   26138:	18004426 	beq	r3,zero,2624c <memset+0x11c>
   2613c:	31ffffc4 	addi	r7,r6,-1
   26140:	30004026 	beq	r6,zero,26244 <memset+0x114>
   26144:	2813883a 	mov	r9,r5
   26148:	200d883a 	mov	r6,r4
   2614c:	2007883a 	mov	r3,r4
   26150:	00000406 	br	26164 <memset+0x34>
   26154:	3a3fffc4 	addi	r8,r7,-1
   26158:	31800044 	addi	r6,r6,1
   2615c:	38003926 	beq	r7,zero,26244 <memset+0x114>
   26160:	400f883a 	mov	r7,r8
   26164:	18c00044 	addi	r3,r3,1
   26168:	32400005 	stb	r9,0(r6)
   2616c:	1a0000cc 	andi	r8,r3,3
   26170:	403ff81e 	bne	r8,zero,26154 <__alt_data_end+0xfffe6154>
   26174:	010000c4 	movi	r4,3
   26178:	21c02d2e 	bgeu	r4,r7,26230 <memset+0x100>
   2617c:	29003fcc 	andi	r4,r5,255
   26180:	200c923a 	slli	r6,r4,8
   26184:	3108b03a 	or	r4,r6,r4
   26188:	200c943a 	slli	r6,r4,16
   2618c:	218cb03a 	or	r6,r4,r6
   26190:	010003c4 	movi	r4,15
   26194:	21c0182e 	bgeu	r4,r7,261f8 <memset+0xc8>
   26198:	3b3ffc04 	addi	r12,r7,-16
   2619c:	6018d13a 	srli	r12,r12,4
   261a0:	1a000104 	addi	r8,r3,4
   261a4:	1ac00204 	addi	r11,r3,8
   261a8:	6008913a 	slli	r4,r12,4
   261ac:	1a800304 	addi	r10,r3,12
   261b0:	1813883a 	mov	r9,r3
   261b4:	21000504 	addi	r4,r4,20
   261b8:	1909883a 	add	r4,r3,r4
   261bc:	49800015 	stw	r6,0(r9)
   261c0:	41800015 	stw	r6,0(r8)
   261c4:	59800015 	stw	r6,0(r11)
   261c8:	51800015 	stw	r6,0(r10)
   261cc:	42000404 	addi	r8,r8,16
   261d0:	4a400404 	addi	r9,r9,16
   261d4:	5ac00404 	addi	r11,r11,16
   261d8:	52800404 	addi	r10,r10,16
   261dc:	413ff71e 	bne	r8,r4,261bc <__alt_data_end+0xfffe61bc>
   261e0:	63000044 	addi	r12,r12,1
   261e4:	6018913a 	slli	r12,r12,4
   261e8:	39c003cc 	andi	r7,r7,15
   261ec:	010000c4 	movi	r4,3
   261f0:	1b07883a 	add	r3,r3,r12
   261f4:	21c00e2e 	bgeu	r4,r7,26230 <memset+0x100>
   261f8:	1813883a 	mov	r9,r3
   261fc:	3811883a 	mov	r8,r7
   26200:	010000c4 	movi	r4,3
   26204:	49800015 	stw	r6,0(r9)
   26208:	423fff04 	addi	r8,r8,-4
   2620c:	4a400104 	addi	r9,r9,4
   26210:	223ffc36 	bltu	r4,r8,26204 <__alt_data_end+0xfffe6204>
   26214:	393fff04 	addi	r4,r7,-4
   26218:	2008d0ba 	srli	r4,r4,2
   2621c:	39c000cc 	andi	r7,r7,3
   26220:	21000044 	addi	r4,r4,1
   26224:	2109883a 	add	r4,r4,r4
   26228:	2109883a 	add	r4,r4,r4
   2622c:	1907883a 	add	r3,r3,r4
   26230:	38000526 	beq	r7,zero,26248 <memset+0x118>
   26234:	19cf883a 	add	r7,r3,r7
   26238:	19400005 	stb	r5,0(r3)
   2623c:	18c00044 	addi	r3,r3,1
   26240:	38fffd1e 	bne	r7,r3,26238 <__alt_data_end+0xfffe6238>
   26244:	f800283a 	ret
   26248:	f800283a 	ret
   2624c:	2007883a 	mov	r3,r4
   26250:	300f883a 	mov	r7,r6
   26254:	003fc706 	br	26174 <__alt_data_end+0xfffe6174>

00026258 <_Balloc>:
   26258:	20801317 	ldw	r2,76(r4)
   2625c:	defffc04 	addi	sp,sp,-16
   26260:	dc400115 	stw	r17,4(sp)
   26264:	dc000015 	stw	r16,0(sp)
   26268:	dfc00315 	stw	ra,12(sp)
   2626c:	dc800215 	stw	r18,8(sp)
   26270:	2023883a 	mov	r17,r4
   26274:	2821883a 	mov	r16,r5
   26278:	10000f26 	beq	r2,zero,262b8 <_Balloc+0x60>
   2627c:	8407883a 	add	r3,r16,r16
   26280:	18c7883a 	add	r3,r3,r3
   26284:	10c7883a 	add	r3,r2,r3
   26288:	18800017 	ldw	r2,0(r3)
   2628c:	10001126 	beq	r2,zero,262d4 <_Balloc+0x7c>
   26290:	11000017 	ldw	r4,0(r2)
   26294:	19000015 	stw	r4,0(r3)
   26298:	10000415 	stw	zero,16(r2)
   2629c:	10000315 	stw	zero,12(r2)
   262a0:	dfc00317 	ldw	ra,12(sp)
   262a4:	dc800217 	ldw	r18,8(sp)
   262a8:	dc400117 	ldw	r17,4(sp)
   262ac:	dc000017 	ldw	r16,0(sp)
   262b0:	dec00404 	addi	sp,sp,16
   262b4:	f800283a 	ret
   262b8:	01800844 	movi	r6,33
   262bc:	01400104 	movi	r5,4
   262c0:	0028cc80 	call	28cc8 <_calloc_r>
   262c4:	88801315 	stw	r2,76(r17)
   262c8:	103fec1e 	bne	r2,zero,2627c <__alt_data_end+0xfffe627c>
   262cc:	0005883a 	mov	r2,zero
   262d0:	003ff306 	br	262a0 <__alt_data_end+0xfffe62a0>
   262d4:	01400044 	movi	r5,1
   262d8:	2c24983a 	sll	r18,r5,r16
   262dc:	8809883a 	mov	r4,r17
   262e0:	91800144 	addi	r6,r18,5
   262e4:	318d883a 	add	r6,r6,r6
   262e8:	318d883a 	add	r6,r6,r6
   262ec:	0028cc80 	call	28cc8 <_calloc_r>
   262f0:	103ff626 	beq	r2,zero,262cc <__alt_data_end+0xfffe62cc>
   262f4:	14000115 	stw	r16,4(r2)
   262f8:	14800215 	stw	r18,8(r2)
   262fc:	003fe606 	br	26298 <__alt_data_end+0xfffe6298>

00026300 <_Bfree>:
   26300:	28000826 	beq	r5,zero,26324 <_Bfree+0x24>
   26304:	28c00117 	ldw	r3,4(r5)
   26308:	20801317 	ldw	r2,76(r4)
   2630c:	18c7883a 	add	r3,r3,r3
   26310:	18c7883a 	add	r3,r3,r3
   26314:	10c5883a 	add	r2,r2,r3
   26318:	10c00017 	ldw	r3,0(r2)
   2631c:	28c00015 	stw	r3,0(r5)
   26320:	11400015 	stw	r5,0(r2)
   26324:	f800283a 	ret

00026328 <__multadd>:
   26328:	defffa04 	addi	sp,sp,-24
   2632c:	dc800315 	stw	r18,12(sp)
   26330:	dc400215 	stw	r17,8(sp)
   26334:	dc000115 	stw	r16,4(sp)
   26338:	2823883a 	mov	r17,r5
   2633c:	2c000417 	ldw	r16,16(r5)
   26340:	dfc00515 	stw	ra,20(sp)
   26344:	dcc00415 	stw	r19,16(sp)
   26348:	2025883a 	mov	r18,r4
   2634c:	29400504 	addi	r5,r5,20
   26350:	0011883a 	mov	r8,zero
   26354:	28c00017 	ldw	r3,0(r5)
   26358:	29400104 	addi	r5,r5,4
   2635c:	42000044 	addi	r8,r8,1
   26360:	18bfffcc 	andi	r2,r3,65535
   26364:	1185383a 	mul	r2,r2,r6
   26368:	1806d43a 	srli	r3,r3,16
   2636c:	11cf883a 	add	r7,r2,r7
   26370:	3808d43a 	srli	r4,r7,16
   26374:	1987383a 	mul	r3,r3,r6
   26378:	38bfffcc 	andi	r2,r7,65535
   2637c:	1907883a 	add	r3,r3,r4
   26380:	1808943a 	slli	r4,r3,16
   26384:	180ed43a 	srli	r7,r3,16
   26388:	2085883a 	add	r2,r4,r2
   2638c:	28bfff15 	stw	r2,-4(r5)
   26390:	443ff016 	blt	r8,r16,26354 <__alt_data_end+0xfffe6354>
   26394:	38000926 	beq	r7,zero,263bc <__multadd+0x94>
   26398:	88800217 	ldw	r2,8(r17)
   2639c:	80800f0e 	bge	r16,r2,263dc <__multadd+0xb4>
   263a0:	80800144 	addi	r2,r16,5
   263a4:	1085883a 	add	r2,r2,r2
   263a8:	1085883a 	add	r2,r2,r2
   263ac:	8885883a 	add	r2,r17,r2
   263b0:	11c00015 	stw	r7,0(r2)
   263b4:	84000044 	addi	r16,r16,1
   263b8:	8c000415 	stw	r16,16(r17)
   263bc:	8805883a 	mov	r2,r17
   263c0:	dfc00517 	ldw	ra,20(sp)
   263c4:	dcc00417 	ldw	r19,16(sp)
   263c8:	dc800317 	ldw	r18,12(sp)
   263cc:	dc400217 	ldw	r17,8(sp)
   263d0:	dc000117 	ldw	r16,4(sp)
   263d4:	dec00604 	addi	sp,sp,24
   263d8:	f800283a 	ret
   263dc:	89400117 	ldw	r5,4(r17)
   263e0:	9009883a 	mov	r4,r18
   263e4:	d9c00015 	stw	r7,0(sp)
   263e8:	29400044 	addi	r5,r5,1
   263ec:	00262580 	call	26258 <_Balloc>
   263f0:	89800417 	ldw	r6,16(r17)
   263f4:	89400304 	addi	r5,r17,12
   263f8:	11000304 	addi	r4,r2,12
   263fc:	31800084 	addi	r6,r6,2
   26400:	318d883a 	add	r6,r6,r6
   26404:	318d883a 	add	r6,r6,r6
   26408:	1027883a 	mov	r19,r2
   2640c:	0025fe80 	call	25fe8 <memcpy>
   26410:	d9c00017 	ldw	r7,0(sp)
   26414:	88000a26 	beq	r17,zero,26440 <__multadd+0x118>
   26418:	88c00117 	ldw	r3,4(r17)
   2641c:	90801317 	ldw	r2,76(r18)
   26420:	18c7883a 	add	r3,r3,r3
   26424:	18c7883a 	add	r3,r3,r3
   26428:	10c5883a 	add	r2,r2,r3
   2642c:	10c00017 	ldw	r3,0(r2)
   26430:	88c00015 	stw	r3,0(r17)
   26434:	14400015 	stw	r17,0(r2)
   26438:	9823883a 	mov	r17,r19
   2643c:	003fd806 	br	263a0 <__alt_data_end+0xfffe63a0>
   26440:	9823883a 	mov	r17,r19
   26444:	003fd606 	br	263a0 <__alt_data_end+0xfffe63a0>

00026448 <__s2b>:
   26448:	defff904 	addi	sp,sp,-28
   2644c:	dc400115 	stw	r17,4(sp)
   26450:	dc000015 	stw	r16,0(sp)
   26454:	2023883a 	mov	r17,r4
   26458:	2821883a 	mov	r16,r5
   2645c:	39000204 	addi	r4,r7,8
   26460:	01400244 	movi	r5,9
   26464:	dcc00315 	stw	r19,12(sp)
   26468:	dc800215 	stw	r18,8(sp)
   2646c:	dfc00615 	stw	ra,24(sp)
   26470:	dd400515 	stw	r21,20(sp)
   26474:	dd000415 	stw	r20,16(sp)
   26478:	3825883a 	mov	r18,r7
   2647c:	3027883a 	mov	r19,r6
   26480:	00209900 	call	20990 <__divsi3>
   26484:	00c00044 	movi	r3,1
   26488:	000b883a 	mov	r5,zero
   2648c:	1880030e 	bge	r3,r2,2649c <__s2b+0x54>
   26490:	18c7883a 	add	r3,r3,r3
   26494:	29400044 	addi	r5,r5,1
   26498:	18bffd16 	blt	r3,r2,26490 <__alt_data_end+0xfffe6490>
   2649c:	8809883a 	mov	r4,r17
   264a0:	00262580 	call	26258 <_Balloc>
   264a4:	d8c00717 	ldw	r3,28(sp)
   264a8:	10c00515 	stw	r3,20(r2)
   264ac:	00c00044 	movi	r3,1
   264b0:	10c00415 	stw	r3,16(r2)
   264b4:	00c00244 	movi	r3,9
   264b8:	1cc0210e 	bge	r3,r19,26540 <__s2b+0xf8>
   264bc:	80eb883a 	add	r21,r16,r3
   264c0:	a829883a 	mov	r20,r21
   264c4:	84e1883a 	add	r16,r16,r19
   264c8:	a1c00007 	ldb	r7,0(r20)
   264cc:	01800284 	movi	r6,10
   264d0:	a5000044 	addi	r20,r20,1
   264d4:	100b883a 	mov	r5,r2
   264d8:	39fff404 	addi	r7,r7,-48
   264dc:	8809883a 	mov	r4,r17
   264e0:	00263280 	call	26328 <__multadd>
   264e4:	a43ff81e 	bne	r20,r16,264c8 <__alt_data_end+0xfffe64c8>
   264e8:	ace1883a 	add	r16,r21,r19
   264ec:	843ffe04 	addi	r16,r16,-8
   264f0:	9c800a0e 	bge	r19,r18,2651c <__s2b+0xd4>
   264f4:	94e5c83a 	sub	r18,r18,r19
   264f8:	84a5883a 	add	r18,r16,r18
   264fc:	81c00007 	ldb	r7,0(r16)
   26500:	01800284 	movi	r6,10
   26504:	84000044 	addi	r16,r16,1
   26508:	100b883a 	mov	r5,r2
   2650c:	39fff404 	addi	r7,r7,-48
   26510:	8809883a 	mov	r4,r17
   26514:	00263280 	call	26328 <__multadd>
   26518:	84bff81e 	bne	r16,r18,264fc <__alt_data_end+0xfffe64fc>
   2651c:	dfc00617 	ldw	ra,24(sp)
   26520:	dd400517 	ldw	r21,20(sp)
   26524:	dd000417 	ldw	r20,16(sp)
   26528:	dcc00317 	ldw	r19,12(sp)
   2652c:	dc800217 	ldw	r18,8(sp)
   26530:	dc400117 	ldw	r17,4(sp)
   26534:	dc000017 	ldw	r16,0(sp)
   26538:	dec00704 	addi	sp,sp,28
   2653c:	f800283a 	ret
   26540:	84000284 	addi	r16,r16,10
   26544:	1827883a 	mov	r19,r3
   26548:	003fe906 	br	264f0 <__alt_data_end+0xfffe64f0>

0002654c <__hi0bits>:
   2654c:	20bfffec 	andhi	r2,r4,65535
   26550:	1000141e 	bne	r2,zero,265a4 <__hi0bits+0x58>
   26554:	2008943a 	slli	r4,r4,16
   26558:	00800404 	movi	r2,16
   2655c:	20ffc02c 	andhi	r3,r4,65280
   26560:	1800021e 	bne	r3,zero,2656c <__hi0bits+0x20>
   26564:	2008923a 	slli	r4,r4,8
   26568:	10800204 	addi	r2,r2,8
   2656c:	20fc002c 	andhi	r3,r4,61440
   26570:	1800021e 	bne	r3,zero,2657c <__hi0bits+0x30>
   26574:	2008913a 	slli	r4,r4,4
   26578:	10800104 	addi	r2,r2,4
   2657c:	20f0002c 	andhi	r3,r4,49152
   26580:	1800031e 	bne	r3,zero,26590 <__hi0bits+0x44>
   26584:	2109883a 	add	r4,r4,r4
   26588:	10800084 	addi	r2,r2,2
   2658c:	2109883a 	add	r4,r4,r4
   26590:	20000316 	blt	r4,zero,265a0 <__hi0bits+0x54>
   26594:	2110002c 	andhi	r4,r4,16384
   26598:	2000041e 	bne	r4,zero,265ac <__hi0bits+0x60>
   2659c:	00800804 	movi	r2,32
   265a0:	f800283a 	ret
   265a4:	0005883a 	mov	r2,zero
   265a8:	003fec06 	br	2655c <__alt_data_end+0xfffe655c>
   265ac:	10800044 	addi	r2,r2,1
   265b0:	f800283a 	ret

000265b4 <__lo0bits>:
   265b4:	20c00017 	ldw	r3,0(r4)
   265b8:	188001cc 	andi	r2,r3,7
   265bc:	10000826 	beq	r2,zero,265e0 <__lo0bits+0x2c>
   265c0:	1880004c 	andi	r2,r3,1
   265c4:	1000211e 	bne	r2,zero,2664c <__lo0bits+0x98>
   265c8:	1880008c 	andi	r2,r3,2
   265cc:	1000211e 	bne	r2,zero,26654 <__lo0bits+0xa0>
   265d0:	1806d0ba 	srli	r3,r3,2
   265d4:	00800084 	movi	r2,2
   265d8:	20c00015 	stw	r3,0(r4)
   265dc:	f800283a 	ret
   265e0:	18bfffcc 	andi	r2,r3,65535
   265e4:	10001326 	beq	r2,zero,26634 <__lo0bits+0x80>
   265e8:	0005883a 	mov	r2,zero
   265ec:	19403fcc 	andi	r5,r3,255
   265f0:	2800021e 	bne	r5,zero,265fc <__lo0bits+0x48>
   265f4:	1806d23a 	srli	r3,r3,8
   265f8:	10800204 	addi	r2,r2,8
   265fc:	194003cc 	andi	r5,r3,15
   26600:	2800021e 	bne	r5,zero,2660c <__lo0bits+0x58>
   26604:	1806d13a 	srli	r3,r3,4
   26608:	10800104 	addi	r2,r2,4
   2660c:	194000cc 	andi	r5,r3,3
   26610:	2800021e 	bne	r5,zero,2661c <__lo0bits+0x68>
   26614:	1806d0ba 	srli	r3,r3,2
   26618:	10800084 	addi	r2,r2,2
   2661c:	1940004c 	andi	r5,r3,1
   26620:	2800081e 	bne	r5,zero,26644 <__lo0bits+0x90>
   26624:	1806d07a 	srli	r3,r3,1
   26628:	1800051e 	bne	r3,zero,26640 <__lo0bits+0x8c>
   2662c:	00800804 	movi	r2,32
   26630:	f800283a 	ret
   26634:	1806d43a 	srli	r3,r3,16
   26638:	00800404 	movi	r2,16
   2663c:	003feb06 	br	265ec <__alt_data_end+0xfffe65ec>
   26640:	10800044 	addi	r2,r2,1
   26644:	20c00015 	stw	r3,0(r4)
   26648:	f800283a 	ret
   2664c:	0005883a 	mov	r2,zero
   26650:	f800283a 	ret
   26654:	1806d07a 	srli	r3,r3,1
   26658:	00800044 	movi	r2,1
   2665c:	20c00015 	stw	r3,0(r4)
   26660:	f800283a 	ret

00026664 <__i2b>:
   26664:	defffd04 	addi	sp,sp,-12
   26668:	dc000015 	stw	r16,0(sp)
   2666c:	04000044 	movi	r16,1
   26670:	dc400115 	stw	r17,4(sp)
   26674:	2823883a 	mov	r17,r5
   26678:	800b883a 	mov	r5,r16
   2667c:	dfc00215 	stw	ra,8(sp)
   26680:	00262580 	call	26258 <_Balloc>
   26684:	14400515 	stw	r17,20(r2)
   26688:	14000415 	stw	r16,16(r2)
   2668c:	dfc00217 	ldw	ra,8(sp)
   26690:	dc400117 	ldw	r17,4(sp)
   26694:	dc000017 	ldw	r16,0(sp)
   26698:	dec00304 	addi	sp,sp,12
   2669c:	f800283a 	ret

000266a0 <__multiply>:
   266a0:	defffa04 	addi	sp,sp,-24
   266a4:	dcc00315 	stw	r19,12(sp)
   266a8:	dc800215 	stw	r18,8(sp)
   266ac:	34c00417 	ldw	r19,16(r6)
   266b0:	2c800417 	ldw	r18,16(r5)
   266b4:	dd000415 	stw	r20,16(sp)
   266b8:	dc400115 	stw	r17,4(sp)
   266bc:	dfc00515 	stw	ra,20(sp)
   266c0:	dc000015 	stw	r16,0(sp)
   266c4:	2829883a 	mov	r20,r5
   266c8:	3023883a 	mov	r17,r6
   266cc:	94c0050e 	bge	r18,r19,266e4 <__multiply+0x44>
   266d0:	9007883a 	mov	r3,r18
   266d4:	3029883a 	mov	r20,r6
   266d8:	9825883a 	mov	r18,r19
   266dc:	2823883a 	mov	r17,r5
   266e0:	1827883a 	mov	r19,r3
   266e4:	a0800217 	ldw	r2,8(r20)
   266e8:	94e1883a 	add	r16,r18,r19
   266ec:	a1400117 	ldw	r5,4(r20)
   266f0:	1400010e 	bge	r2,r16,266f8 <__multiply+0x58>
   266f4:	29400044 	addi	r5,r5,1
   266f8:	00262580 	call	26258 <_Balloc>
   266fc:	8415883a 	add	r10,r16,r16
   26700:	12c00504 	addi	r11,r2,20
   26704:	5295883a 	add	r10,r10,r10
   26708:	5a95883a 	add	r10,r11,r10
   2670c:	5807883a 	mov	r3,r11
   26710:	5a80032e 	bgeu	r11,r10,26720 <__multiply+0x80>
   26714:	18000015 	stw	zero,0(r3)
   26718:	18c00104 	addi	r3,r3,4
   2671c:	1abffd36 	bltu	r3,r10,26714 <__alt_data_end+0xfffe6714>
   26720:	9ce7883a 	add	r19,r19,r19
   26724:	94a5883a 	add	r18,r18,r18
   26728:	89800504 	addi	r6,r17,20
   2672c:	9ce7883a 	add	r19,r19,r19
   26730:	a3400504 	addi	r13,r20,20
   26734:	94a5883a 	add	r18,r18,r18
   26738:	34d9883a 	add	r12,r6,r19
   2673c:	6c93883a 	add	r9,r13,r18
   26740:	3300422e 	bgeu	r6,r12,2684c <__multiply+0x1ac>
   26744:	37c00017 	ldw	ra,0(r6)
   26748:	fbffffcc 	andi	r15,ra,65535
   2674c:	78001b26 	beq	r15,zero,267bc <__multiply+0x11c>
   26750:	5811883a 	mov	r8,r11
   26754:	681d883a 	mov	r14,r13
   26758:	000f883a 	mov	r7,zero
   2675c:	71000017 	ldw	r4,0(r14)
   26760:	40c00017 	ldw	r3,0(r8)
   26764:	73800104 	addi	r14,r14,4
   26768:	217fffcc 	andi	r5,r4,65535
   2676c:	2bcb383a 	mul	r5,r5,r15
   26770:	2008d43a 	srli	r4,r4,16
   26774:	1c7fffcc 	andi	r17,r3,65535
   26778:	2c4b883a 	add	r5,r5,r17
   2677c:	29cb883a 	add	r5,r5,r7
   26780:	23c9383a 	mul	r4,r4,r15
   26784:	1806d43a 	srli	r3,r3,16
   26788:	280ed43a 	srli	r7,r5,16
   2678c:	297fffcc 	andi	r5,r5,65535
   26790:	20c7883a 	add	r3,r4,r3
   26794:	19c7883a 	add	r3,r3,r7
   26798:	1808943a 	slli	r4,r3,16
   2679c:	4023883a 	mov	r17,r8
   267a0:	180ed43a 	srli	r7,r3,16
   267a4:	214ab03a 	or	r5,r4,r5
   267a8:	41400015 	stw	r5,0(r8)
   267ac:	42000104 	addi	r8,r8,4
   267b0:	727fea36 	bltu	r14,r9,2675c <__alt_data_end+0xfffe675c>
   267b4:	89c00115 	stw	r7,4(r17)
   267b8:	37c00017 	ldw	ra,0(r6)
   267bc:	f83ed43a 	srli	ra,ra,16
   267c0:	f8001f26 	beq	ra,zero,26840 <__multiply+0x1a0>
   267c4:	58c00017 	ldw	r3,0(r11)
   267c8:	681d883a 	mov	r14,r13
   267cc:	581f883a 	mov	r15,r11
   267d0:	1811883a 	mov	r8,r3
   267d4:	5825883a 	mov	r18,r11
   267d8:	000f883a 	mov	r7,zero
   267dc:	00000106 	br	267e4 <__multiply+0x144>
   267e0:	8825883a 	mov	r18,r17
   267e4:	7140000b 	ldhu	r5,0(r14)
   267e8:	4010d43a 	srli	r8,r8,16
   267ec:	193fffcc 	andi	r4,r3,65535
   267f0:	2fcb383a 	mul	r5,r5,ra
   267f4:	7bc00104 	addi	r15,r15,4
   267f8:	73800104 	addi	r14,r14,4
   267fc:	2a0b883a 	add	r5,r5,r8
   26800:	29cb883a 	add	r5,r5,r7
   26804:	2806943a 	slli	r3,r5,16
   26808:	94400104 	addi	r17,r18,4
   2680c:	280ad43a 	srli	r5,r5,16
   26810:	1908b03a 	or	r4,r3,r4
   26814:	793fff15 	stw	r4,-4(r15)
   26818:	70ffff17 	ldw	r3,-4(r14)
   2681c:	8a000017 	ldw	r8,0(r17)
   26820:	1806d43a 	srli	r3,r3,16
   26824:	413fffcc 	andi	r4,r8,65535
   26828:	1fc7383a 	mul	r3,r3,ra
   2682c:	1907883a 	add	r3,r3,r4
   26830:	1947883a 	add	r3,r3,r5
   26834:	180ed43a 	srli	r7,r3,16
   26838:	727fe936 	bltu	r14,r9,267e0 <__alt_data_end+0xfffe67e0>
   2683c:	90c00115 	stw	r3,4(r18)
   26840:	31800104 	addi	r6,r6,4
   26844:	5ac00104 	addi	r11,r11,4
   26848:	333fbe36 	bltu	r6,r12,26744 <__alt_data_end+0xfffe6744>
   2684c:	0400090e 	bge	zero,r16,26874 <__multiply+0x1d4>
   26850:	50ffff17 	ldw	r3,-4(r10)
   26854:	52bfff04 	addi	r10,r10,-4
   26858:	18000326 	beq	r3,zero,26868 <__multiply+0x1c8>
   2685c:	00000506 	br	26874 <__multiply+0x1d4>
   26860:	50c00017 	ldw	r3,0(r10)
   26864:	1800031e 	bne	r3,zero,26874 <__multiply+0x1d4>
   26868:	843fffc4 	addi	r16,r16,-1
   2686c:	52bfff04 	addi	r10,r10,-4
   26870:	803ffb1e 	bne	r16,zero,26860 <__alt_data_end+0xfffe6860>
   26874:	14000415 	stw	r16,16(r2)
   26878:	dfc00517 	ldw	ra,20(sp)
   2687c:	dd000417 	ldw	r20,16(sp)
   26880:	dcc00317 	ldw	r19,12(sp)
   26884:	dc800217 	ldw	r18,8(sp)
   26888:	dc400117 	ldw	r17,4(sp)
   2688c:	dc000017 	ldw	r16,0(sp)
   26890:	dec00604 	addi	sp,sp,24
   26894:	f800283a 	ret

00026898 <__pow5mult>:
   26898:	defffa04 	addi	sp,sp,-24
   2689c:	dcc00315 	stw	r19,12(sp)
   268a0:	dc000015 	stw	r16,0(sp)
   268a4:	dfc00515 	stw	ra,20(sp)
   268a8:	dd000415 	stw	r20,16(sp)
   268ac:	dc800215 	stw	r18,8(sp)
   268b0:	dc400115 	stw	r17,4(sp)
   268b4:	308000cc 	andi	r2,r6,3
   268b8:	3021883a 	mov	r16,r6
   268bc:	2027883a 	mov	r19,r4
   268c0:	10002f1e 	bne	r2,zero,26980 <__pow5mult+0xe8>
   268c4:	2825883a 	mov	r18,r5
   268c8:	8021d0ba 	srai	r16,r16,2
   268cc:	80001a26 	beq	r16,zero,26938 <__pow5mult+0xa0>
   268d0:	9c401217 	ldw	r17,72(r19)
   268d4:	8800061e 	bne	r17,zero,268f0 <__pow5mult+0x58>
   268d8:	00003406 	br	269ac <__pow5mult+0x114>
   268dc:	8021d07a 	srai	r16,r16,1
   268e0:	80001526 	beq	r16,zero,26938 <__pow5mult+0xa0>
   268e4:	88800017 	ldw	r2,0(r17)
   268e8:	10001c26 	beq	r2,zero,2695c <__pow5mult+0xc4>
   268ec:	1023883a 	mov	r17,r2
   268f0:	8080004c 	andi	r2,r16,1
   268f4:	103ff926 	beq	r2,zero,268dc <__alt_data_end+0xfffe68dc>
   268f8:	880d883a 	mov	r6,r17
   268fc:	900b883a 	mov	r5,r18
   26900:	9809883a 	mov	r4,r19
   26904:	00266a00 	call	266a0 <__multiply>
   26908:	90001b26 	beq	r18,zero,26978 <__pow5mult+0xe0>
   2690c:	91000117 	ldw	r4,4(r18)
   26910:	98c01317 	ldw	r3,76(r19)
   26914:	8021d07a 	srai	r16,r16,1
   26918:	2109883a 	add	r4,r4,r4
   2691c:	2109883a 	add	r4,r4,r4
   26920:	1907883a 	add	r3,r3,r4
   26924:	19000017 	ldw	r4,0(r3)
   26928:	91000015 	stw	r4,0(r18)
   2692c:	1c800015 	stw	r18,0(r3)
   26930:	1025883a 	mov	r18,r2
   26934:	803feb1e 	bne	r16,zero,268e4 <__alt_data_end+0xfffe68e4>
   26938:	9005883a 	mov	r2,r18
   2693c:	dfc00517 	ldw	ra,20(sp)
   26940:	dd000417 	ldw	r20,16(sp)
   26944:	dcc00317 	ldw	r19,12(sp)
   26948:	dc800217 	ldw	r18,8(sp)
   2694c:	dc400117 	ldw	r17,4(sp)
   26950:	dc000017 	ldw	r16,0(sp)
   26954:	dec00604 	addi	sp,sp,24
   26958:	f800283a 	ret
   2695c:	880d883a 	mov	r6,r17
   26960:	880b883a 	mov	r5,r17
   26964:	9809883a 	mov	r4,r19
   26968:	00266a00 	call	266a0 <__multiply>
   2696c:	88800015 	stw	r2,0(r17)
   26970:	10000015 	stw	zero,0(r2)
   26974:	003fdd06 	br	268ec <__alt_data_end+0xfffe68ec>
   26978:	1025883a 	mov	r18,r2
   2697c:	003fd706 	br	268dc <__alt_data_end+0xfffe68dc>
   26980:	10bfffc4 	addi	r2,r2,-1
   26984:	1085883a 	add	r2,r2,r2
   26988:	00c000f4 	movhi	r3,3
   2698c:	18ffd004 	addi	r3,r3,-192
   26990:	1085883a 	add	r2,r2,r2
   26994:	1885883a 	add	r2,r3,r2
   26998:	11800017 	ldw	r6,0(r2)
   2699c:	000f883a 	mov	r7,zero
   269a0:	00263280 	call	26328 <__multadd>
   269a4:	1025883a 	mov	r18,r2
   269a8:	003fc706 	br	268c8 <__alt_data_end+0xfffe68c8>
   269ac:	05000044 	movi	r20,1
   269b0:	a00b883a 	mov	r5,r20
   269b4:	9809883a 	mov	r4,r19
   269b8:	00262580 	call	26258 <_Balloc>
   269bc:	1023883a 	mov	r17,r2
   269c0:	00809c44 	movi	r2,625
   269c4:	88800515 	stw	r2,20(r17)
   269c8:	8d000415 	stw	r20,16(r17)
   269cc:	9c401215 	stw	r17,72(r19)
   269d0:	88000015 	stw	zero,0(r17)
   269d4:	003fc606 	br	268f0 <__alt_data_end+0xfffe68f0>

000269d8 <__lshift>:
   269d8:	defff904 	addi	sp,sp,-28
   269dc:	dd400515 	stw	r21,20(sp)
   269e0:	dcc00315 	stw	r19,12(sp)
   269e4:	302bd17a 	srai	r21,r6,5
   269e8:	2cc00417 	ldw	r19,16(r5)
   269ec:	28800217 	ldw	r2,8(r5)
   269f0:	dd000415 	stw	r20,16(sp)
   269f4:	ace7883a 	add	r19,r21,r19
   269f8:	dc800215 	stw	r18,8(sp)
   269fc:	dc400115 	stw	r17,4(sp)
   26a00:	dc000015 	stw	r16,0(sp)
   26a04:	dfc00615 	stw	ra,24(sp)
   26a08:	9c000044 	addi	r16,r19,1
   26a0c:	2823883a 	mov	r17,r5
   26a10:	3029883a 	mov	r20,r6
   26a14:	2025883a 	mov	r18,r4
   26a18:	29400117 	ldw	r5,4(r5)
   26a1c:	1400030e 	bge	r2,r16,26a2c <__lshift+0x54>
   26a20:	1085883a 	add	r2,r2,r2
   26a24:	29400044 	addi	r5,r5,1
   26a28:	143ffd16 	blt	r2,r16,26a20 <__alt_data_end+0xfffe6a20>
   26a2c:	9009883a 	mov	r4,r18
   26a30:	00262580 	call	26258 <_Balloc>
   26a34:	10c00504 	addi	r3,r2,20
   26a38:	0540070e 	bge	zero,r21,26a58 <__lshift+0x80>
   26a3c:	ad6b883a 	add	r21,r21,r21
   26a40:	ad6b883a 	add	r21,r21,r21
   26a44:	1809883a 	mov	r4,r3
   26a48:	1d47883a 	add	r3,r3,r21
   26a4c:	20000015 	stw	zero,0(r4)
   26a50:	21000104 	addi	r4,r4,4
   26a54:	193ffd1e 	bne	r3,r4,26a4c <__alt_data_end+0xfffe6a4c>
   26a58:	8a000417 	ldw	r8,16(r17)
   26a5c:	89000504 	addi	r4,r17,20
   26a60:	a18007cc 	andi	r6,r20,31
   26a64:	4211883a 	add	r8,r8,r8
   26a68:	4211883a 	add	r8,r8,r8
   26a6c:	2211883a 	add	r8,r4,r8
   26a70:	30002326 	beq	r6,zero,26b00 <__lshift+0x128>
   26a74:	02400804 	movi	r9,32
   26a78:	4993c83a 	sub	r9,r9,r6
   26a7c:	000b883a 	mov	r5,zero
   26a80:	21c00017 	ldw	r7,0(r4)
   26a84:	1815883a 	mov	r10,r3
   26a88:	18c00104 	addi	r3,r3,4
   26a8c:	398e983a 	sll	r7,r7,r6
   26a90:	21000104 	addi	r4,r4,4
   26a94:	394ab03a 	or	r5,r7,r5
   26a98:	197fff15 	stw	r5,-4(r3)
   26a9c:	217fff17 	ldw	r5,-4(r4)
   26aa0:	2a4ad83a 	srl	r5,r5,r9
   26aa4:	223ff636 	bltu	r4,r8,26a80 <__alt_data_end+0xfffe6a80>
   26aa8:	51400115 	stw	r5,4(r10)
   26aac:	28001a1e 	bne	r5,zero,26b18 <__lshift+0x140>
   26ab0:	843fffc4 	addi	r16,r16,-1
   26ab4:	14000415 	stw	r16,16(r2)
   26ab8:	88000826 	beq	r17,zero,26adc <__lshift+0x104>
   26abc:	89000117 	ldw	r4,4(r17)
   26ac0:	90c01317 	ldw	r3,76(r18)
   26ac4:	2109883a 	add	r4,r4,r4
   26ac8:	2109883a 	add	r4,r4,r4
   26acc:	1907883a 	add	r3,r3,r4
   26ad0:	19000017 	ldw	r4,0(r3)
   26ad4:	89000015 	stw	r4,0(r17)
   26ad8:	1c400015 	stw	r17,0(r3)
   26adc:	dfc00617 	ldw	ra,24(sp)
   26ae0:	dd400517 	ldw	r21,20(sp)
   26ae4:	dd000417 	ldw	r20,16(sp)
   26ae8:	dcc00317 	ldw	r19,12(sp)
   26aec:	dc800217 	ldw	r18,8(sp)
   26af0:	dc400117 	ldw	r17,4(sp)
   26af4:	dc000017 	ldw	r16,0(sp)
   26af8:	dec00704 	addi	sp,sp,28
   26afc:	f800283a 	ret
   26b00:	21400017 	ldw	r5,0(r4)
   26b04:	18c00104 	addi	r3,r3,4
   26b08:	21000104 	addi	r4,r4,4
   26b0c:	197fff15 	stw	r5,-4(r3)
   26b10:	223ffb36 	bltu	r4,r8,26b00 <__alt_data_end+0xfffe6b00>
   26b14:	003fe606 	br	26ab0 <__alt_data_end+0xfffe6ab0>
   26b18:	9c000084 	addi	r16,r19,2
   26b1c:	003fe406 	br	26ab0 <__alt_data_end+0xfffe6ab0>

00026b20 <__mcmp>:
   26b20:	20800417 	ldw	r2,16(r4)
   26b24:	28c00417 	ldw	r3,16(r5)
   26b28:	10c5c83a 	sub	r2,r2,r3
   26b2c:	1000111e 	bne	r2,zero,26b74 <__mcmp+0x54>
   26b30:	18c7883a 	add	r3,r3,r3
   26b34:	18c7883a 	add	r3,r3,r3
   26b38:	21000504 	addi	r4,r4,20
   26b3c:	29400504 	addi	r5,r5,20
   26b40:	20c5883a 	add	r2,r4,r3
   26b44:	28cb883a 	add	r5,r5,r3
   26b48:	00000106 	br	26b50 <__mcmp+0x30>
   26b4c:	20800a2e 	bgeu	r4,r2,26b78 <__mcmp+0x58>
   26b50:	10bfff04 	addi	r2,r2,-4
   26b54:	297fff04 	addi	r5,r5,-4
   26b58:	11800017 	ldw	r6,0(r2)
   26b5c:	28c00017 	ldw	r3,0(r5)
   26b60:	30fffa26 	beq	r6,r3,26b4c <__alt_data_end+0xfffe6b4c>
   26b64:	30c00236 	bltu	r6,r3,26b70 <__mcmp+0x50>
   26b68:	00800044 	movi	r2,1
   26b6c:	f800283a 	ret
   26b70:	00bfffc4 	movi	r2,-1
   26b74:	f800283a 	ret
   26b78:	0005883a 	mov	r2,zero
   26b7c:	f800283a 	ret

00026b80 <__mdiff>:
   26b80:	28c00417 	ldw	r3,16(r5)
   26b84:	30800417 	ldw	r2,16(r6)
   26b88:	defffa04 	addi	sp,sp,-24
   26b8c:	dcc00315 	stw	r19,12(sp)
   26b90:	dc800215 	stw	r18,8(sp)
   26b94:	dfc00515 	stw	ra,20(sp)
   26b98:	dd000415 	stw	r20,16(sp)
   26b9c:	dc400115 	stw	r17,4(sp)
   26ba0:	dc000015 	stw	r16,0(sp)
   26ba4:	1887c83a 	sub	r3,r3,r2
   26ba8:	2825883a 	mov	r18,r5
   26bac:	3027883a 	mov	r19,r6
   26bb0:	1800141e 	bne	r3,zero,26c04 <__mdiff+0x84>
   26bb4:	1085883a 	add	r2,r2,r2
   26bb8:	1085883a 	add	r2,r2,r2
   26bbc:	2a000504 	addi	r8,r5,20
   26bc0:	34000504 	addi	r16,r6,20
   26bc4:	4087883a 	add	r3,r8,r2
   26bc8:	8085883a 	add	r2,r16,r2
   26bcc:	00000106 	br	26bd4 <__mdiff+0x54>
   26bd0:	40c0592e 	bgeu	r8,r3,26d38 <__mdiff+0x1b8>
   26bd4:	18ffff04 	addi	r3,r3,-4
   26bd8:	10bfff04 	addi	r2,r2,-4
   26bdc:	19c00017 	ldw	r7,0(r3)
   26be0:	11400017 	ldw	r5,0(r2)
   26be4:	397ffa26 	beq	r7,r5,26bd0 <__alt_data_end+0xfffe6bd0>
   26be8:	3940592e 	bgeu	r7,r5,26d50 <__mdiff+0x1d0>
   26bec:	9005883a 	mov	r2,r18
   26bf0:	4023883a 	mov	r17,r8
   26bf4:	9825883a 	mov	r18,r19
   26bf8:	05000044 	movi	r20,1
   26bfc:	1027883a 	mov	r19,r2
   26c00:	00000406 	br	26c14 <__mdiff+0x94>
   26c04:	18005616 	blt	r3,zero,26d60 <__mdiff+0x1e0>
   26c08:	34400504 	addi	r17,r6,20
   26c0c:	2c000504 	addi	r16,r5,20
   26c10:	0029883a 	mov	r20,zero
   26c14:	91400117 	ldw	r5,4(r18)
   26c18:	00262580 	call	26258 <_Balloc>
   26c1c:	92400417 	ldw	r9,16(r18)
   26c20:	9b000417 	ldw	r12,16(r19)
   26c24:	12c00504 	addi	r11,r2,20
   26c28:	4a51883a 	add	r8,r9,r9
   26c2c:	6319883a 	add	r12,r12,r12
   26c30:	4211883a 	add	r8,r8,r8
   26c34:	6319883a 	add	r12,r12,r12
   26c38:	15000315 	stw	r20,12(r2)
   26c3c:	8211883a 	add	r8,r16,r8
   26c40:	8b19883a 	add	r12,r17,r12
   26c44:	0007883a 	mov	r3,zero
   26c48:	81400017 	ldw	r5,0(r16)
   26c4c:	89c00017 	ldw	r7,0(r17)
   26c50:	59800104 	addi	r6,r11,4
   26c54:	293fffcc 	andi	r4,r5,65535
   26c58:	20c7883a 	add	r3,r4,r3
   26c5c:	393fffcc 	andi	r4,r7,65535
   26c60:	1909c83a 	sub	r4,r3,r4
   26c64:	280ad43a 	srli	r5,r5,16
   26c68:	380ed43a 	srli	r7,r7,16
   26c6c:	2007d43a 	srai	r3,r4,16
   26c70:	213fffcc 	andi	r4,r4,65535
   26c74:	29cbc83a 	sub	r5,r5,r7
   26c78:	28c7883a 	add	r3,r5,r3
   26c7c:	180a943a 	slli	r5,r3,16
   26c80:	8c400104 	addi	r17,r17,4
   26c84:	84000104 	addi	r16,r16,4
   26c88:	2908b03a 	or	r4,r5,r4
   26c8c:	59000015 	stw	r4,0(r11)
   26c90:	1807d43a 	srai	r3,r3,16
   26c94:	3015883a 	mov	r10,r6
   26c98:	3017883a 	mov	r11,r6
   26c9c:	8b3fea36 	bltu	r17,r12,26c48 <__alt_data_end+0xfffe6c48>
   26ca0:	8200162e 	bgeu	r16,r8,26cfc <__mdiff+0x17c>
   26ca4:	8017883a 	mov	r11,r16
   26ca8:	59400017 	ldw	r5,0(r11)
   26cac:	31800104 	addi	r6,r6,4
   26cb0:	5ac00104 	addi	r11,r11,4
   26cb4:	293fffcc 	andi	r4,r5,65535
   26cb8:	20c7883a 	add	r3,r4,r3
   26cbc:	280ed43a 	srli	r7,r5,16
   26cc0:	180bd43a 	srai	r5,r3,16
   26cc4:	193fffcc 	andi	r4,r3,65535
   26cc8:	3947883a 	add	r3,r7,r5
   26ccc:	180a943a 	slli	r5,r3,16
   26cd0:	1807d43a 	srai	r3,r3,16
   26cd4:	2908b03a 	or	r4,r5,r4
   26cd8:	313fff15 	stw	r4,-4(r6)
   26cdc:	5a3ff236 	bltu	r11,r8,26ca8 <__alt_data_end+0xfffe6ca8>
   26ce0:	0406303a 	nor	r3,zero,r16
   26ce4:	1a07883a 	add	r3,r3,r8
   26ce8:	1806d0ba 	srli	r3,r3,2
   26cec:	18c00044 	addi	r3,r3,1
   26cf0:	18c7883a 	add	r3,r3,r3
   26cf4:	18c7883a 	add	r3,r3,r3
   26cf8:	50d5883a 	add	r10,r10,r3
   26cfc:	50ffff04 	addi	r3,r10,-4
   26d00:	2000041e 	bne	r4,zero,26d14 <__mdiff+0x194>
   26d04:	18ffff04 	addi	r3,r3,-4
   26d08:	19000017 	ldw	r4,0(r3)
   26d0c:	4a7fffc4 	addi	r9,r9,-1
   26d10:	203ffc26 	beq	r4,zero,26d04 <__alt_data_end+0xfffe6d04>
   26d14:	12400415 	stw	r9,16(r2)
   26d18:	dfc00517 	ldw	ra,20(sp)
   26d1c:	dd000417 	ldw	r20,16(sp)
   26d20:	dcc00317 	ldw	r19,12(sp)
   26d24:	dc800217 	ldw	r18,8(sp)
   26d28:	dc400117 	ldw	r17,4(sp)
   26d2c:	dc000017 	ldw	r16,0(sp)
   26d30:	dec00604 	addi	sp,sp,24
   26d34:	f800283a 	ret
   26d38:	000b883a 	mov	r5,zero
   26d3c:	00262580 	call	26258 <_Balloc>
   26d40:	00c00044 	movi	r3,1
   26d44:	10c00415 	stw	r3,16(r2)
   26d48:	10000515 	stw	zero,20(r2)
   26d4c:	003ff206 	br	26d18 <__alt_data_end+0xfffe6d18>
   26d50:	8023883a 	mov	r17,r16
   26d54:	0029883a 	mov	r20,zero
   26d58:	4021883a 	mov	r16,r8
   26d5c:	003fad06 	br	26c14 <__alt_data_end+0xfffe6c14>
   26d60:	9005883a 	mov	r2,r18
   26d64:	94400504 	addi	r17,r18,20
   26d68:	9c000504 	addi	r16,r19,20
   26d6c:	9825883a 	mov	r18,r19
   26d70:	05000044 	movi	r20,1
   26d74:	1027883a 	mov	r19,r2
   26d78:	003fa606 	br	26c14 <__alt_data_end+0xfffe6c14>

00026d7c <__ulp>:
   26d7c:	295ffc2c 	andhi	r5,r5,32752
   26d80:	00bf3034 	movhi	r2,64704
   26d84:	2887883a 	add	r3,r5,r2
   26d88:	00c0020e 	bge	zero,r3,26d94 <__ulp+0x18>
   26d8c:	0005883a 	mov	r2,zero
   26d90:	f800283a 	ret
   26d94:	00c7c83a 	sub	r3,zero,r3
   26d98:	1807d53a 	srai	r3,r3,20
   26d9c:	008004c4 	movi	r2,19
   26da0:	10c00b0e 	bge	r2,r3,26dd0 <__ulp+0x54>
   26da4:	18bffb04 	addi	r2,r3,-20
   26da8:	01000784 	movi	r4,30
   26dac:	0007883a 	mov	r3,zero
   26db0:	20800516 	blt	r4,r2,26dc8 <__ulp+0x4c>
   26db4:	010007c4 	movi	r4,31
   26db8:	2089c83a 	sub	r4,r4,r2
   26dbc:	00800044 	movi	r2,1
   26dc0:	1104983a 	sll	r2,r2,r4
   26dc4:	f800283a 	ret
   26dc8:	00800044 	movi	r2,1
   26dcc:	f800283a 	ret
   26dd0:	01400234 	movhi	r5,8
   26dd4:	28c7d83a 	sra	r3,r5,r3
   26dd8:	0005883a 	mov	r2,zero
   26ddc:	f800283a 	ret

00026de0 <__b2d>:
   26de0:	defffa04 	addi	sp,sp,-24
   26de4:	dc000015 	stw	r16,0(sp)
   26de8:	24000417 	ldw	r16,16(r4)
   26dec:	dc400115 	stw	r17,4(sp)
   26df0:	24400504 	addi	r17,r4,20
   26df4:	8421883a 	add	r16,r16,r16
   26df8:	8421883a 	add	r16,r16,r16
   26dfc:	8c21883a 	add	r16,r17,r16
   26e00:	dc800215 	stw	r18,8(sp)
   26e04:	84bfff17 	ldw	r18,-4(r16)
   26e08:	dd000415 	stw	r20,16(sp)
   26e0c:	dcc00315 	stw	r19,12(sp)
   26e10:	9009883a 	mov	r4,r18
   26e14:	2829883a 	mov	r20,r5
   26e18:	dfc00515 	stw	ra,20(sp)
   26e1c:	002654c0 	call	2654c <__hi0bits>
   26e20:	00c00804 	movi	r3,32
   26e24:	1889c83a 	sub	r4,r3,r2
   26e28:	a1000015 	stw	r4,0(r20)
   26e2c:	01000284 	movi	r4,10
   26e30:	84ffff04 	addi	r19,r16,-4
   26e34:	20801216 	blt	r4,r2,26e80 <__b2d+0xa0>
   26e38:	018002c4 	movi	r6,11
   26e3c:	308dc83a 	sub	r6,r6,r2
   26e40:	9186d83a 	srl	r3,r18,r6
   26e44:	18cffc34 	orhi	r3,r3,16368
   26e48:	8cc0212e 	bgeu	r17,r19,26ed0 <__b2d+0xf0>
   26e4c:	813ffe17 	ldw	r4,-8(r16)
   26e50:	218cd83a 	srl	r6,r4,r6
   26e54:	10800544 	addi	r2,r2,21
   26e58:	9084983a 	sll	r2,r18,r2
   26e5c:	1184b03a 	or	r2,r2,r6
   26e60:	dfc00517 	ldw	ra,20(sp)
   26e64:	dd000417 	ldw	r20,16(sp)
   26e68:	dcc00317 	ldw	r19,12(sp)
   26e6c:	dc800217 	ldw	r18,8(sp)
   26e70:	dc400117 	ldw	r17,4(sp)
   26e74:	dc000017 	ldw	r16,0(sp)
   26e78:	dec00604 	addi	sp,sp,24
   26e7c:	f800283a 	ret
   26e80:	8cc00f2e 	bgeu	r17,r19,26ec0 <__b2d+0xe0>
   26e84:	117ffd44 	addi	r5,r2,-11
   26e88:	80bffe17 	ldw	r2,-8(r16)
   26e8c:	28000e26 	beq	r5,zero,26ec8 <__b2d+0xe8>
   26e90:	1949c83a 	sub	r4,r3,r5
   26e94:	9164983a 	sll	r18,r18,r5
   26e98:	1106d83a 	srl	r3,r2,r4
   26e9c:	81bffe04 	addi	r6,r16,-8
   26ea0:	948ffc34 	orhi	r18,r18,16368
   26ea4:	90c6b03a 	or	r3,r18,r3
   26ea8:	89800e2e 	bgeu	r17,r6,26ee4 <__b2d+0x104>
   26eac:	81bffd17 	ldw	r6,-12(r16)
   26eb0:	1144983a 	sll	r2,r2,r5
   26eb4:	310ad83a 	srl	r5,r6,r4
   26eb8:	2884b03a 	or	r2,r5,r2
   26ebc:	003fe806 	br	26e60 <__alt_data_end+0xfffe6e60>
   26ec0:	10bffd44 	addi	r2,r2,-11
   26ec4:	1000041e 	bne	r2,zero,26ed8 <__b2d+0xf8>
   26ec8:	90cffc34 	orhi	r3,r18,16368
   26ecc:	003fe406 	br	26e60 <__alt_data_end+0xfffe6e60>
   26ed0:	000d883a 	mov	r6,zero
   26ed4:	003fdf06 	br	26e54 <__alt_data_end+0xfffe6e54>
   26ed8:	90a4983a 	sll	r18,r18,r2
   26edc:	0005883a 	mov	r2,zero
   26ee0:	003ff906 	br	26ec8 <__alt_data_end+0xfffe6ec8>
   26ee4:	1144983a 	sll	r2,r2,r5
   26ee8:	003fdd06 	br	26e60 <__alt_data_end+0xfffe6e60>

00026eec <__d2b>:
   26eec:	defff804 	addi	sp,sp,-32
   26ef0:	dc000215 	stw	r16,8(sp)
   26ef4:	3021883a 	mov	r16,r6
   26ef8:	dc400315 	stw	r17,12(sp)
   26efc:	8022907a 	slli	r17,r16,1
   26f00:	dd000615 	stw	r20,24(sp)
   26f04:	2829883a 	mov	r20,r5
   26f08:	01400044 	movi	r5,1
   26f0c:	dcc00515 	stw	r19,20(sp)
   26f10:	dc800415 	stw	r18,16(sp)
   26f14:	dfc00715 	stw	ra,28(sp)
   26f18:	3825883a 	mov	r18,r7
   26f1c:	8822d57a 	srli	r17,r17,21
   26f20:	00262580 	call	26258 <_Balloc>
   26f24:	1027883a 	mov	r19,r2
   26f28:	00800434 	movhi	r2,16
   26f2c:	10bfffc4 	addi	r2,r2,-1
   26f30:	808c703a 	and	r6,r16,r2
   26f34:	88000126 	beq	r17,zero,26f3c <__d2b+0x50>
   26f38:	31800434 	orhi	r6,r6,16
   26f3c:	d9800015 	stw	r6,0(sp)
   26f40:	a0002426 	beq	r20,zero,26fd4 <__d2b+0xe8>
   26f44:	d9000104 	addi	r4,sp,4
   26f48:	dd000115 	stw	r20,4(sp)
   26f4c:	00265b40 	call	265b4 <__lo0bits>
   26f50:	d8c00017 	ldw	r3,0(sp)
   26f54:	10002f1e 	bne	r2,zero,27014 <__d2b+0x128>
   26f58:	d9000117 	ldw	r4,4(sp)
   26f5c:	99000515 	stw	r4,20(r19)
   26f60:	1821003a 	cmpeq	r16,r3,zero
   26f64:	01000084 	movi	r4,2
   26f68:	2421c83a 	sub	r16,r4,r16
   26f6c:	98c00615 	stw	r3,24(r19)
   26f70:	9c000415 	stw	r16,16(r19)
   26f74:	88001f1e 	bne	r17,zero,26ff4 <__d2b+0x108>
   26f78:	10bef384 	addi	r2,r2,-1074
   26f7c:	90800015 	stw	r2,0(r18)
   26f80:	00900034 	movhi	r2,16384
   26f84:	10bfffc4 	addi	r2,r2,-1
   26f88:	8085883a 	add	r2,r16,r2
   26f8c:	1085883a 	add	r2,r2,r2
   26f90:	1085883a 	add	r2,r2,r2
   26f94:	9885883a 	add	r2,r19,r2
   26f98:	11000517 	ldw	r4,20(r2)
   26f9c:	8020917a 	slli	r16,r16,5
   26fa0:	002654c0 	call	2654c <__hi0bits>
   26fa4:	d8c00817 	ldw	r3,32(sp)
   26fa8:	8085c83a 	sub	r2,r16,r2
   26fac:	18800015 	stw	r2,0(r3)
   26fb0:	9805883a 	mov	r2,r19
   26fb4:	dfc00717 	ldw	ra,28(sp)
   26fb8:	dd000617 	ldw	r20,24(sp)
   26fbc:	dcc00517 	ldw	r19,20(sp)
   26fc0:	dc800417 	ldw	r18,16(sp)
   26fc4:	dc400317 	ldw	r17,12(sp)
   26fc8:	dc000217 	ldw	r16,8(sp)
   26fcc:	dec00804 	addi	sp,sp,32
   26fd0:	f800283a 	ret
   26fd4:	d809883a 	mov	r4,sp
   26fd8:	00265b40 	call	265b4 <__lo0bits>
   26fdc:	d8c00017 	ldw	r3,0(sp)
   26fe0:	04000044 	movi	r16,1
   26fe4:	9c000415 	stw	r16,16(r19)
   26fe8:	98c00515 	stw	r3,20(r19)
   26fec:	10800804 	addi	r2,r2,32
   26ff0:	883fe126 	beq	r17,zero,26f78 <__alt_data_end+0xfffe6f78>
   26ff4:	00c00d44 	movi	r3,53
   26ff8:	8c7ef344 	addi	r17,r17,-1075
   26ffc:	88a3883a 	add	r17,r17,r2
   27000:	1885c83a 	sub	r2,r3,r2
   27004:	d8c00817 	ldw	r3,32(sp)
   27008:	94400015 	stw	r17,0(r18)
   2700c:	18800015 	stw	r2,0(r3)
   27010:	003fe706 	br	26fb0 <__alt_data_end+0xfffe6fb0>
   27014:	01000804 	movi	r4,32
   27018:	2089c83a 	sub	r4,r4,r2
   2701c:	1908983a 	sll	r4,r3,r4
   27020:	d9400117 	ldw	r5,4(sp)
   27024:	1886d83a 	srl	r3,r3,r2
   27028:	2148b03a 	or	r4,r4,r5
   2702c:	99000515 	stw	r4,20(r19)
   27030:	d8c00015 	stw	r3,0(sp)
   27034:	003fca06 	br	26f60 <__alt_data_end+0xfffe6f60>

00027038 <__ratio>:
   27038:	defff904 	addi	sp,sp,-28
   2703c:	dc400315 	stw	r17,12(sp)
   27040:	2823883a 	mov	r17,r5
   27044:	d9400104 	addi	r5,sp,4
   27048:	dfc00615 	stw	ra,24(sp)
   2704c:	dcc00515 	stw	r19,20(sp)
   27050:	dc800415 	stw	r18,16(sp)
   27054:	2027883a 	mov	r19,r4
   27058:	dc000215 	stw	r16,8(sp)
   2705c:	0026de00 	call	26de0 <__b2d>
   27060:	d80b883a 	mov	r5,sp
   27064:	8809883a 	mov	r4,r17
   27068:	1025883a 	mov	r18,r2
   2706c:	1821883a 	mov	r16,r3
   27070:	0026de00 	call	26de0 <__b2d>
   27074:	8a000417 	ldw	r8,16(r17)
   27078:	99000417 	ldw	r4,16(r19)
   2707c:	d9400117 	ldw	r5,4(sp)
   27080:	2209c83a 	sub	r4,r4,r8
   27084:	2010917a 	slli	r8,r4,5
   27088:	d9000017 	ldw	r4,0(sp)
   2708c:	2909c83a 	sub	r4,r5,r4
   27090:	4109883a 	add	r4,r8,r4
   27094:	01000e0e 	bge	zero,r4,270d0 <__ratio+0x98>
   27098:	2008953a 	slli	r4,r4,20
   2709c:	2421883a 	add	r16,r4,r16
   270a0:	100d883a 	mov	r6,r2
   270a4:	180f883a 	mov	r7,r3
   270a8:	9009883a 	mov	r4,r18
   270ac:	800b883a 	mov	r5,r16
   270b0:	002b4200 	call	2b420 <__divdf3>
   270b4:	dfc00617 	ldw	ra,24(sp)
   270b8:	dcc00517 	ldw	r19,20(sp)
   270bc:	dc800417 	ldw	r18,16(sp)
   270c0:	dc400317 	ldw	r17,12(sp)
   270c4:	dc000217 	ldw	r16,8(sp)
   270c8:	dec00704 	addi	sp,sp,28
   270cc:	f800283a 	ret
   270d0:	2008953a 	slli	r4,r4,20
   270d4:	1907c83a 	sub	r3,r3,r4
   270d8:	003ff106 	br	270a0 <__alt_data_end+0xfffe70a0>

000270dc <_mprec_log10>:
   270dc:	defffe04 	addi	sp,sp,-8
   270e0:	dc000015 	stw	r16,0(sp)
   270e4:	dfc00115 	stw	ra,4(sp)
   270e8:	008005c4 	movi	r2,23
   270ec:	2021883a 	mov	r16,r4
   270f0:	11000d0e 	bge	r2,r4,27128 <_mprec_log10+0x4c>
   270f4:	0005883a 	mov	r2,zero
   270f8:	00cffc34 	movhi	r3,16368
   270fc:	843fffc4 	addi	r16,r16,-1
   27100:	000d883a 	mov	r6,zero
   27104:	01d00934 	movhi	r7,16420
   27108:	1009883a 	mov	r4,r2
   2710c:	180b883a 	mov	r5,r3
   27110:	002bf600 	call	2bf60 <__muldf3>
   27114:	803ff91e 	bne	r16,zero,270fc <__alt_data_end+0xfffe70fc>
   27118:	dfc00117 	ldw	ra,4(sp)
   2711c:	dc000017 	ldw	r16,0(sp)
   27120:	dec00204 	addi	sp,sp,8
   27124:	f800283a 	ret
   27128:	202090fa 	slli	r16,r4,3
   2712c:	008000f4 	movhi	r2,3
   27130:	10bfe704 	addi	r2,r2,-100
   27134:	1421883a 	add	r16,r2,r16
   27138:	80800017 	ldw	r2,0(r16)
   2713c:	80c00117 	ldw	r3,4(r16)
   27140:	dfc00117 	ldw	ra,4(sp)
   27144:	dc000017 	ldw	r16,0(sp)
   27148:	dec00204 	addi	sp,sp,8
   2714c:	f800283a 	ret

00027150 <__copybits>:
   27150:	297fffc4 	addi	r5,r5,-1
   27154:	280fd17a 	srai	r7,r5,5
   27158:	30c00417 	ldw	r3,16(r6)
   2715c:	30800504 	addi	r2,r6,20
   27160:	39c00044 	addi	r7,r7,1
   27164:	18c7883a 	add	r3,r3,r3
   27168:	39cf883a 	add	r7,r7,r7
   2716c:	18c7883a 	add	r3,r3,r3
   27170:	39cf883a 	add	r7,r7,r7
   27174:	10c7883a 	add	r3,r2,r3
   27178:	21cf883a 	add	r7,r4,r7
   2717c:	10c00d2e 	bgeu	r2,r3,271b4 <__copybits+0x64>
   27180:	200b883a 	mov	r5,r4
   27184:	12000017 	ldw	r8,0(r2)
   27188:	29400104 	addi	r5,r5,4
   2718c:	10800104 	addi	r2,r2,4
   27190:	2a3fff15 	stw	r8,-4(r5)
   27194:	10fffb36 	bltu	r2,r3,27184 <__alt_data_end+0xfffe7184>
   27198:	1985c83a 	sub	r2,r3,r6
   2719c:	10bffac4 	addi	r2,r2,-21
   271a0:	1004d0ba 	srli	r2,r2,2
   271a4:	10800044 	addi	r2,r2,1
   271a8:	1085883a 	add	r2,r2,r2
   271ac:	1085883a 	add	r2,r2,r2
   271b0:	2089883a 	add	r4,r4,r2
   271b4:	21c0032e 	bgeu	r4,r7,271c4 <__copybits+0x74>
   271b8:	20000015 	stw	zero,0(r4)
   271bc:	21000104 	addi	r4,r4,4
   271c0:	21fffd36 	bltu	r4,r7,271b8 <__alt_data_end+0xfffe71b8>
   271c4:	f800283a 	ret

000271c8 <__any_on>:
   271c8:	20c00417 	ldw	r3,16(r4)
   271cc:	2805d17a 	srai	r2,r5,5
   271d0:	21000504 	addi	r4,r4,20
   271d4:	18800d0e 	bge	r3,r2,2720c <__any_on+0x44>
   271d8:	18c7883a 	add	r3,r3,r3
   271dc:	18c7883a 	add	r3,r3,r3
   271e0:	20c7883a 	add	r3,r4,r3
   271e4:	20c0192e 	bgeu	r4,r3,2724c <__any_on+0x84>
   271e8:	18bfff17 	ldw	r2,-4(r3)
   271ec:	18ffff04 	addi	r3,r3,-4
   271f0:	1000041e 	bne	r2,zero,27204 <__any_on+0x3c>
   271f4:	20c0142e 	bgeu	r4,r3,27248 <__any_on+0x80>
   271f8:	18ffff04 	addi	r3,r3,-4
   271fc:	19400017 	ldw	r5,0(r3)
   27200:	283ffc26 	beq	r5,zero,271f4 <__alt_data_end+0xfffe71f4>
   27204:	00800044 	movi	r2,1
   27208:	f800283a 	ret
   2720c:	10c00a0e 	bge	r2,r3,27238 <__any_on+0x70>
   27210:	1085883a 	add	r2,r2,r2
   27214:	1085883a 	add	r2,r2,r2
   27218:	294007cc 	andi	r5,r5,31
   2721c:	2087883a 	add	r3,r4,r2
   27220:	283ff026 	beq	r5,zero,271e4 <__alt_data_end+0xfffe71e4>
   27224:	19800017 	ldw	r6,0(r3)
   27228:	3144d83a 	srl	r2,r6,r5
   2722c:	114a983a 	sll	r5,r2,r5
   27230:	317ff41e 	bne	r6,r5,27204 <__alt_data_end+0xfffe7204>
   27234:	003feb06 	br	271e4 <__alt_data_end+0xfffe71e4>
   27238:	1085883a 	add	r2,r2,r2
   2723c:	1085883a 	add	r2,r2,r2
   27240:	2087883a 	add	r3,r4,r2
   27244:	003fe706 	br	271e4 <__alt_data_end+0xfffe71e4>
   27248:	f800283a 	ret
   2724c:	0005883a 	mov	r2,zero
   27250:	f800283a 	ret

00027254 <__fpclassifyd>:
   27254:	00a00034 	movhi	r2,32768
   27258:	10bfffc4 	addi	r2,r2,-1
   2725c:	2884703a 	and	r2,r5,r2
   27260:	10000726 	beq	r2,zero,27280 <__fpclassifyd+0x2c>
   27264:	00fffc34 	movhi	r3,65520
   27268:	019ff834 	movhi	r6,32736
   2726c:	28c7883a 	add	r3,r5,r3
   27270:	31bfffc4 	addi	r6,r6,-1
   27274:	30c00536 	bltu	r6,r3,2728c <__fpclassifyd+0x38>
   27278:	00800104 	movi	r2,4
   2727c:	f800283a 	ret
   27280:	2000021e 	bne	r4,zero,2728c <__fpclassifyd+0x38>
   27284:	00800084 	movi	r2,2
   27288:	f800283a 	ret
   2728c:	00dffc34 	movhi	r3,32752
   27290:	019ff834 	movhi	r6,32736
   27294:	28cb883a 	add	r5,r5,r3
   27298:	31bfffc4 	addi	r6,r6,-1
   2729c:	317ff62e 	bgeu	r6,r5,27278 <__alt_data_end+0xfffe7278>
   272a0:	01400434 	movhi	r5,16
   272a4:	297fffc4 	addi	r5,r5,-1
   272a8:	28800236 	bltu	r5,r2,272b4 <__fpclassifyd+0x60>
   272ac:	008000c4 	movi	r2,3
   272b0:	f800283a 	ret
   272b4:	10c00226 	beq	r2,r3,272c0 <__fpclassifyd+0x6c>
   272b8:	0005883a 	mov	r2,zero
   272bc:	f800283a 	ret
   272c0:	2005003a 	cmpeq	r2,r4,zero
   272c4:	f800283a 	ret

000272c8 <_sbrk_r>:
   272c8:	defffd04 	addi	sp,sp,-12
   272cc:	dc000015 	stw	r16,0(sp)
   272d0:	040000f4 	movhi	r16,3
   272d4:	dc400115 	stw	r17,4(sp)
   272d8:	840ded04 	addi	r16,r16,14260
   272dc:	2023883a 	mov	r17,r4
   272e0:	2809883a 	mov	r4,r5
   272e4:	dfc00215 	stw	ra,8(sp)
   272e8:	80000015 	stw	zero,0(r16)
   272ec:	002de440 	call	2de44 <sbrk>
   272f0:	00ffffc4 	movi	r3,-1
   272f4:	10c00526 	beq	r2,r3,2730c <_sbrk_r+0x44>
   272f8:	dfc00217 	ldw	ra,8(sp)
   272fc:	dc400117 	ldw	r17,4(sp)
   27300:	dc000017 	ldw	r16,0(sp)
   27304:	dec00304 	addi	sp,sp,12
   27308:	f800283a 	ret
   2730c:	80c00017 	ldw	r3,0(r16)
   27310:	183ff926 	beq	r3,zero,272f8 <__alt_data_end+0xfffe72f8>
   27314:	88c00015 	stw	r3,0(r17)
   27318:	003ff706 	br	272f8 <__alt_data_end+0xfffe72f8>

0002731c <__sread>:
   2731c:	defffe04 	addi	sp,sp,-8
   27320:	dc000015 	stw	r16,0(sp)
   27324:	2821883a 	mov	r16,r5
   27328:	2940038f 	ldh	r5,14(r5)
   2732c:	dfc00115 	stw	ra,4(sp)
   27330:	00297c00 	call	297c0 <_read_r>
   27334:	10000716 	blt	r2,zero,27354 <__sread+0x38>
   27338:	80c01417 	ldw	r3,80(r16)
   2733c:	1887883a 	add	r3,r3,r2
   27340:	80c01415 	stw	r3,80(r16)
   27344:	dfc00117 	ldw	ra,4(sp)
   27348:	dc000017 	ldw	r16,0(sp)
   2734c:	dec00204 	addi	sp,sp,8
   27350:	f800283a 	ret
   27354:	80c0030b 	ldhu	r3,12(r16)
   27358:	18fbffcc 	andi	r3,r3,61439
   2735c:	80c0030d 	sth	r3,12(r16)
   27360:	dfc00117 	ldw	ra,4(sp)
   27364:	dc000017 	ldw	r16,0(sp)
   27368:	dec00204 	addi	sp,sp,8
   2736c:	f800283a 	ret

00027370 <__seofread>:
   27370:	0005883a 	mov	r2,zero
   27374:	f800283a 	ret

00027378 <__swrite>:
   27378:	2880030b 	ldhu	r2,12(r5)
   2737c:	defffb04 	addi	sp,sp,-20
   27380:	dcc00315 	stw	r19,12(sp)
   27384:	dc800215 	stw	r18,8(sp)
   27388:	dc400115 	stw	r17,4(sp)
   2738c:	dc000015 	stw	r16,0(sp)
   27390:	dfc00415 	stw	ra,16(sp)
   27394:	10c0400c 	andi	r3,r2,256
   27398:	2821883a 	mov	r16,r5
   2739c:	2023883a 	mov	r17,r4
   273a0:	3025883a 	mov	r18,r6
   273a4:	3827883a 	mov	r19,r7
   273a8:	18000526 	beq	r3,zero,273c0 <__swrite+0x48>
   273ac:	2940038f 	ldh	r5,14(r5)
   273b0:	01c00084 	movi	r7,2
   273b4:	000d883a 	mov	r6,zero
   273b8:	00296040 	call	29604 <_lseek_r>
   273bc:	8080030b 	ldhu	r2,12(r16)
   273c0:	8140038f 	ldh	r5,14(r16)
   273c4:	10bbffcc 	andi	r2,r2,61439
   273c8:	980f883a 	mov	r7,r19
   273cc:	900d883a 	mov	r6,r18
   273d0:	8809883a 	mov	r4,r17
   273d4:	8080030d 	sth	r2,12(r16)
   273d8:	dfc00417 	ldw	ra,16(sp)
   273dc:	dcc00317 	ldw	r19,12(sp)
   273e0:	dc800217 	ldw	r18,8(sp)
   273e4:	dc400117 	ldw	r17,4(sp)
   273e8:	dc000017 	ldw	r16,0(sp)
   273ec:	dec00504 	addi	sp,sp,20
   273f0:	0028c141 	jmpi	28c14 <_write_r>

000273f4 <__sseek>:
   273f4:	defffe04 	addi	sp,sp,-8
   273f8:	dc000015 	stw	r16,0(sp)
   273fc:	2821883a 	mov	r16,r5
   27400:	2940038f 	ldh	r5,14(r5)
   27404:	dfc00115 	stw	ra,4(sp)
   27408:	00296040 	call	29604 <_lseek_r>
   2740c:	00ffffc4 	movi	r3,-1
   27410:	10c00826 	beq	r2,r3,27434 <__sseek+0x40>
   27414:	80c0030b 	ldhu	r3,12(r16)
   27418:	80801415 	stw	r2,80(r16)
   2741c:	18c40014 	ori	r3,r3,4096
   27420:	80c0030d 	sth	r3,12(r16)
   27424:	dfc00117 	ldw	ra,4(sp)
   27428:	dc000017 	ldw	r16,0(sp)
   2742c:	dec00204 	addi	sp,sp,8
   27430:	f800283a 	ret
   27434:	80c0030b 	ldhu	r3,12(r16)
   27438:	18fbffcc 	andi	r3,r3,61439
   2743c:	80c0030d 	sth	r3,12(r16)
   27440:	dfc00117 	ldw	ra,4(sp)
   27444:	dc000017 	ldw	r16,0(sp)
   27448:	dec00204 	addi	sp,sp,8
   2744c:	f800283a 	ret

00027450 <__sclose>:
   27450:	2940038f 	ldh	r5,14(r5)
   27454:	0028c741 	jmpi	28c74 <_close_r>

00027458 <strcmp>:
   27458:	2144b03a 	or	r2,r4,r5
   2745c:	108000cc 	andi	r2,r2,3
   27460:	1000171e 	bne	r2,zero,274c0 <strcmp+0x68>
   27464:	20800017 	ldw	r2,0(r4)
   27468:	28c00017 	ldw	r3,0(r5)
   2746c:	10c0141e 	bne	r2,r3,274c0 <strcmp+0x68>
   27470:	027fbff4 	movhi	r9,65279
   27474:	4a7fbfc4 	addi	r9,r9,-257
   27478:	0086303a 	nor	r3,zero,r2
   2747c:	02202074 	movhi	r8,32897
   27480:	1245883a 	add	r2,r2,r9
   27484:	42202004 	addi	r8,r8,-32640
   27488:	10c4703a 	and	r2,r2,r3
   2748c:	1204703a 	and	r2,r2,r8
   27490:	10000226 	beq	r2,zero,2749c <strcmp+0x44>
   27494:	00002306 	br	27524 <strcmp+0xcc>
   27498:	1000221e 	bne	r2,zero,27524 <strcmp+0xcc>
   2749c:	21000104 	addi	r4,r4,4
   274a0:	20c00017 	ldw	r3,0(r4)
   274a4:	29400104 	addi	r5,r5,4
   274a8:	29800017 	ldw	r6,0(r5)
   274ac:	1a4f883a 	add	r7,r3,r9
   274b0:	00c4303a 	nor	r2,zero,r3
   274b4:	3884703a 	and	r2,r7,r2
   274b8:	1204703a 	and	r2,r2,r8
   274bc:	19bff626 	beq	r3,r6,27498 <__alt_data_end+0xfffe7498>
   274c0:	20800003 	ldbu	r2,0(r4)
   274c4:	10c03fcc 	andi	r3,r2,255
   274c8:	18c0201c 	xori	r3,r3,128
   274cc:	18ffe004 	addi	r3,r3,-128
   274d0:	18000c26 	beq	r3,zero,27504 <strcmp+0xac>
   274d4:	29800007 	ldb	r6,0(r5)
   274d8:	19800326 	beq	r3,r6,274e8 <strcmp+0x90>
   274dc:	00001306 	br	2752c <strcmp+0xd4>
   274e0:	29800007 	ldb	r6,0(r5)
   274e4:	11800b1e 	bne	r2,r6,27514 <strcmp+0xbc>
   274e8:	21000044 	addi	r4,r4,1
   274ec:	20c00003 	ldbu	r3,0(r4)
   274f0:	29400044 	addi	r5,r5,1
   274f4:	18803fcc 	andi	r2,r3,255
   274f8:	1080201c 	xori	r2,r2,128
   274fc:	10bfe004 	addi	r2,r2,-128
   27500:	103ff71e 	bne	r2,zero,274e0 <__alt_data_end+0xfffe74e0>
   27504:	0007883a 	mov	r3,zero
   27508:	28800003 	ldbu	r2,0(r5)
   2750c:	1885c83a 	sub	r2,r3,r2
   27510:	f800283a 	ret
   27514:	28800003 	ldbu	r2,0(r5)
   27518:	18c03fcc 	andi	r3,r3,255
   2751c:	1885c83a 	sub	r2,r3,r2
   27520:	f800283a 	ret
   27524:	0005883a 	mov	r2,zero
   27528:	f800283a 	ret
   2752c:	10c03fcc 	andi	r3,r2,255
   27530:	003ff506 	br	27508 <__alt_data_end+0xfffe7508>

00027534 <strlen>:
   27534:	208000cc 	andi	r2,r4,3
   27538:	10002026 	beq	r2,zero,275bc <strlen+0x88>
   2753c:	20800007 	ldb	r2,0(r4)
   27540:	10002026 	beq	r2,zero,275c4 <strlen+0x90>
   27544:	2005883a 	mov	r2,r4
   27548:	00000206 	br	27554 <strlen+0x20>
   2754c:	10c00007 	ldb	r3,0(r2)
   27550:	18001826 	beq	r3,zero,275b4 <strlen+0x80>
   27554:	10800044 	addi	r2,r2,1
   27558:	10c000cc 	andi	r3,r2,3
   2755c:	183ffb1e 	bne	r3,zero,2754c <__alt_data_end+0xfffe754c>
   27560:	10c00017 	ldw	r3,0(r2)
   27564:	01ffbff4 	movhi	r7,65279
   27568:	39ffbfc4 	addi	r7,r7,-257
   2756c:	00ca303a 	nor	r5,zero,r3
   27570:	01a02074 	movhi	r6,32897
   27574:	19c7883a 	add	r3,r3,r7
   27578:	31a02004 	addi	r6,r6,-32640
   2757c:	1946703a 	and	r3,r3,r5
   27580:	1986703a 	and	r3,r3,r6
   27584:	1800091e 	bne	r3,zero,275ac <strlen+0x78>
   27588:	10800104 	addi	r2,r2,4
   2758c:	10c00017 	ldw	r3,0(r2)
   27590:	19cb883a 	add	r5,r3,r7
   27594:	00c6303a 	nor	r3,zero,r3
   27598:	28c6703a 	and	r3,r5,r3
   2759c:	1986703a 	and	r3,r3,r6
   275a0:	183ff926 	beq	r3,zero,27588 <__alt_data_end+0xfffe7588>
   275a4:	00000106 	br	275ac <strlen+0x78>
   275a8:	10800044 	addi	r2,r2,1
   275ac:	10c00007 	ldb	r3,0(r2)
   275b0:	183ffd1e 	bne	r3,zero,275a8 <__alt_data_end+0xfffe75a8>
   275b4:	1105c83a 	sub	r2,r2,r4
   275b8:	f800283a 	ret
   275bc:	2005883a 	mov	r2,r4
   275c0:	003fe706 	br	27560 <__alt_data_end+0xfffe7560>
   275c4:	0005883a 	mov	r2,zero
   275c8:	f800283a 	ret

000275cc <__sprint_r.part.0>:
   275cc:	28801917 	ldw	r2,100(r5)
   275d0:	defff604 	addi	sp,sp,-40
   275d4:	dd400515 	stw	r21,20(sp)
   275d8:	dfc00915 	stw	ra,36(sp)
   275dc:	df000815 	stw	fp,32(sp)
   275e0:	ddc00715 	stw	r23,28(sp)
   275e4:	dd800615 	stw	r22,24(sp)
   275e8:	dd000415 	stw	r20,16(sp)
   275ec:	dcc00315 	stw	r19,12(sp)
   275f0:	dc800215 	stw	r18,8(sp)
   275f4:	dc400115 	stw	r17,4(sp)
   275f8:	dc000015 	stw	r16,0(sp)
   275fc:	1088000c 	andi	r2,r2,8192
   27600:	302b883a 	mov	r21,r6
   27604:	10002e26 	beq	r2,zero,276c0 <__sprint_r.part.0+0xf4>
   27608:	30800217 	ldw	r2,8(r6)
   2760c:	35800017 	ldw	r22,0(r6)
   27610:	10002926 	beq	r2,zero,276b8 <__sprint_r.part.0+0xec>
   27614:	2827883a 	mov	r19,r5
   27618:	2029883a 	mov	r20,r4
   2761c:	b5c00104 	addi	r23,r22,4
   27620:	04bfffc4 	movi	r18,-1
   27624:	bc400017 	ldw	r17,0(r23)
   27628:	b4000017 	ldw	r16,0(r22)
   2762c:	0039883a 	mov	fp,zero
   27630:	8822d0ba 	srli	r17,r17,2
   27634:	8800031e 	bne	r17,zero,27644 <__sprint_r.part.0+0x78>
   27638:	00001806 	br	2769c <__sprint_r.part.0+0xd0>
   2763c:	84000104 	addi	r16,r16,4
   27640:	8f001526 	beq	r17,fp,27698 <__sprint_r.part.0+0xcc>
   27644:	81400017 	ldw	r5,0(r16)
   27648:	980d883a 	mov	r6,r19
   2764c:	a009883a 	mov	r4,r20
   27650:	0028ff40 	call	28ff4 <_fputwc_r>
   27654:	e7000044 	addi	fp,fp,1
   27658:	14bff81e 	bne	r2,r18,2763c <__alt_data_end+0xfffe763c>
   2765c:	9005883a 	mov	r2,r18
   27660:	a8000215 	stw	zero,8(r21)
   27664:	a8000115 	stw	zero,4(r21)
   27668:	dfc00917 	ldw	ra,36(sp)
   2766c:	df000817 	ldw	fp,32(sp)
   27670:	ddc00717 	ldw	r23,28(sp)
   27674:	dd800617 	ldw	r22,24(sp)
   27678:	dd400517 	ldw	r21,20(sp)
   2767c:	dd000417 	ldw	r20,16(sp)
   27680:	dcc00317 	ldw	r19,12(sp)
   27684:	dc800217 	ldw	r18,8(sp)
   27688:	dc400117 	ldw	r17,4(sp)
   2768c:	dc000017 	ldw	r16,0(sp)
   27690:	dec00a04 	addi	sp,sp,40
   27694:	f800283a 	ret
   27698:	a8800217 	ldw	r2,8(r21)
   2769c:	8c63883a 	add	r17,r17,r17
   276a0:	8c63883a 	add	r17,r17,r17
   276a4:	1445c83a 	sub	r2,r2,r17
   276a8:	a8800215 	stw	r2,8(r21)
   276ac:	b5800204 	addi	r22,r22,8
   276b0:	bdc00204 	addi	r23,r23,8
   276b4:	103fdb1e 	bne	r2,zero,27624 <__alt_data_end+0xfffe7624>
   276b8:	0005883a 	mov	r2,zero
   276bc:	003fe806 	br	27660 <__alt_data_end+0xfffe7660>
   276c0:	00290f40 	call	290f4 <__sfvwrite_r>
   276c4:	003fe606 	br	27660 <__alt_data_end+0xfffe7660>

000276c8 <__sprint_r>:
   276c8:	30c00217 	ldw	r3,8(r6)
   276cc:	18000126 	beq	r3,zero,276d4 <__sprint_r+0xc>
   276d0:	00275cc1 	jmpi	275cc <__sprint_r.part.0>
   276d4:	30000115 	stw	zero,4(r6)
   276d8:	0005883a 	mov	r2,zero
   276dc:	f800283a 	ret

000276e0 <___vfiprintf_internal_r>:
   276e0:	deffc904 	addi	sp,sp,-220
   276e4:	df003515 	stw	fp,212(sp)
   276e8:	dd003115 	stw	r20,196(sp)
   276ec:	dfc03615 	stw	ra,216(sp)
   276f0:	ddc03415 	stw	r23,208(sp)
   276f4:	dd803315 	stw	r22,204(sp)
   276f8:	dd403215 	stw	r21,200(sp)
   276fc:	dcc03015 	stw	r19,192(sp)
   27700:	dc802f15 	stw	r18,188(sp)
   27704:	dc402e15 	stw	r17,184(sp)
   27708:	dc002d15 	stw	r16,180(sp)
   2770c:	d9002015 	stw	r4,128(sp)
   27710:	d9c02215 	stw	r7,136(sp)
   27714:	2829883a 	mov	r20,r5
   27718:	3039883a 	mov	fp,r6
   2771c:	20000226 	beq	r4,zero,27728 <___vfiprintf_internal_r+0x48>
   27720:	20800e17 	ldw	r2,56(r4)
   27724:	1000cf26 	beq	r2,zero,27a64 <___vfiprintf_internal_r+0x384>
   27728:	a080030b 	ldhu	r2,12(r20)
   2772c:	10c8000c 	andi	r3,r2,8192
   27730:	1800061e 	bne	r3,zero,2774c <___vfiprintf_internal_r+0x6c>
   27734:	a1001917 	ldw	r4,100(r20)
   27738:	00f7ffc4 	movi	r3,-8193
   2773c:	10880014 	ori	r2,r2,8192
   27740:	20c6703a 	and	r3,r4,r3
   27744:	a080030d 	sth	r2,12(r20)
   27748:	a0c01915 	stw	r3,100(r20)
   2774c:	10c0020c 	andi	r3,r2,8
   27750:	1800a926 	beq	r3,zero,279f8 <___vfiprintf_internal_r+0x318>
   27754:	a0c00417 	ldw	r3,16(r20)
   27758:	1800a726 	beq	r3,zero,279f8 <___vfiprintf_internal_r+0x318>
   2775c:	1080068c 	andi	r2,r2,26
   27760:	00c00284 	movi	r3,10
   27764:	10c0ac26 	beq	r2,r3,27a18 <___vfiprintf_internal_r+0x338>
   27768:	da801a04 	addi	r10,sp,104
   2776c:	da801e15 	stw	r10,120(sp)
   27770:	d8801e17 	ldw	r2,120(sp)
   27774:	da8019c4 	addi	r10,sp,103
   27778:	058000f4 	movhi	r22,3
   2777c:	05c000f4 	movhi	r23,3
   27780:	da801f15 	stw	r10,124(sp)
   27784:	1295c83a 	sub	r10,r2,r10
   27788:	b5801d04 	addi	r22,r22,116
   2778c:	bdc01904 	addi	r23,r23,100
   27790:	dec01a15 	stw	sp,104(sp)
   27794:	d8001c15 	stw	zero,112(sp)
   27798:	d8001b15 	stw	zero,108(sp)
   2779c:	d8002615 	stw	zero,152(sp)
   277a0:	d8002315 	stw	zero,140(sp)
   277a4:	da802715 	stw	r10,156(sp)
   277a8:	d811883a 	mov	r8,sp
   277ac:	dd002115 	stw	r20,132(sp)
   277b0:	e021883a 	mov	r16,fp
   277b4:	80800007 	ldb	r2,0(r16)
   277b8:	1003ea26 	beq	r2,zero,28764 <___vfiprintf_internal_r+0x1084>
   277bc:	00c00944 	movi	r3,37
   277c0:	8025883a 	mov	r18,r16
   277c4:	10c0021e 	bne	r2,r3,277d0 <___vfiprintf_internal_r+0xf0>
   277c8:	00001606 	br	27824 <___vfiprintf_internal_r+0x144>
   277cc:	10c00326 	beq	r2,r3,277dc <___vfiprintf_internal_r+0xfc>
   277d0:	94800044 	addi	r18,r18,1
   277d4:	90800007 	ldb	r2,0(r18)
   277d8:	103ffc1e 	bne	r2,zero,277cc <__alt_data_end+0xfffe77cc>
   277dc:	9423c83a 	sub	r17,r18,r16
   277e0:	88001026 	beq	r17,zero,27824 <___vfiprintf_internal_r+0x144>
   277e4:	d8c01c17 	ldw	r3,112(sp)
   277e8:	d8801b17 	ldw	r2,108(sp)
   277ec:	44000015 	stw	r16,0(r8)
   277f0:	88c7883a 	add	r3,r17,r3
   277f4:	10800044 	addi	r2,r2,1
   277f8:	44400115 	stw	r17,4(r8)
   277fc:	d8c01c15 	stw	r3,112(sp)
   27800:	d8801b15 	stw	r2,108(sp)
   27804:	010001c4 	movi	r4,7
   27808:	2080760e 	bge	r4,r2,279e4 <___vfiprintf_internal_r+0x304>
   2780c:	1803821e 	bne	r3,zero,28618 <___vfiprintf_internal_r+0xf38>
   27810:	da802317 	ldw	r10,140(sp)
   27814:	d8001b15 	stw	zero,108(sp)
   27818:	d811883a 	mov	r8,sp
   2781c:	5455883a 	add	r10,r10,r17
   27820:	da802315 	stw	r10,140(sp)
   27824:	90800007 	ldb	r2,0(r18)
   27828:	10044626 	beq	r2,zero,28944 <___vfiprintf_internal_r+0x1264>
   2782c:	90c00047 	ldb	r3,1(r18)
   27830:	94000044 	addi	r16,r18,1
   27834:	d8001d85 	stb	zero,118(sp)
   27838:	0009883a 	mov	r4,zero
   2783c:	000f883a 	mov	r7,zero
   27840:	027fffc4 	movi	r9,-1
   27844:	0023883a 	mov	r17,zero
   27848:	0029883a 	mov	r20,zero
   2784c:	01401604 	movi	r5,88
   27850:	01800244 	movi	r6,9
   27854:	03400a84 	movi	r13,42
   27858:	03001b04 	movi	r12,108
   2785c:	84000044 	addi	r16,r16,1
   27860:	18bff804 	addi	r2,r3,-32
   27864:	28827336 	bltu	r5,r2,28234 <___vfiprintf_internal_r+0xb54>
   27868:	100490ba 	slli	r2,r2,2
   2786c:	028000b4 	movhi	r10,2
   27870:	529e2004 	addi	r10,r10,30848
   27874:	1285883a 	add	r2,r2,r10
   27878:	10800017 	ldw	r2,0(r2)
   2787c:	1000683a 	jmp	r2
   27880:	00027f68 	cmpgeui	zero,zero,2557
   27884:	00028234 	movhi	zero,2568
   27888:	00028234 	movhi	zero,2568
   2788c:	00027f88 	cmpgei	zero,zero,2558
   27890:	00028234 	movhi	zero,2568
   27894:	00028234 	movhi	zero,2568
   27898:	00028234 	movhi	zero,2568
   2789c:	00028234 	movhi	zero,2568
   278a0:	00028234 	movhi	zero,2568
   278a4:	00028234 	movhi	zero,2568
   278a8:	00028170 	cmpltui	zero,zero,2565
   278ac:	0002818c 	andi	zero,zero,2566
   278b0:	00028234 	movhi	zero,2568
   278b4:	00027a74 	movhi	zero,2537
   278b8:	0002819c 	xori	zero,zero,2566
   278bc:	00028234 	movhi	zero,2568
   278c0:	00027f94 	movui	zero,2558
   278c4:	00027fa0 	cmpeqi	zero,zero,2558
   278c8:	00027fa0 	cmpeqi	zero,zero,2558
   278cc:	00027fa0 	cmpeqi	zero,zero,2558
   278d0:	00027fa0 	cmpeqi	zero,zero,2558
   278d4:	00027fa0 	cmpeqi	zero,zero,2558
   278d8:	00027fa0 	cmpeqi	zero,zero,2558
   278dc:	00027fa0 	cmpeqi	zero,zero,2558
   278e0:	00027fa0 	cmpeqi	zero,zero,2558
   278e4:	00027fa0 	cmpeqi	zero,zero,2558
   278e8:	00028234 	movhi	zero,2568
   278ec:	00028234 	movhi	zero,2568
   278f0:	00028234 	movhi	zero,2568
   278f4:	00028234 	movhi	zero,2568
   278f8:	00028234 	movhi	zero,2568
   278fc:	00028234 	movhi	zero,2568
   27900:	00028234 	movhi	zero,2568
   27904:	00028234 	movhi	zero,2568
   27908:	00028234 	movhi	zero,2568
   2790c:	00028234 	movhi	zero,2568
   27910:	00027fcc 	andi	zero,zero,2559
   27914:	00028234 	movhi	zero,2568
   27918:	00028234 	movhi	zero,2568
   2791c:	00028234 	movhi	zero,2568
   27920:	00028234 	movhi	zero,2568
   27924:	00028234 	movhi	zero,2568
   27928:	00028234 	movhi	zero,2568
   2792c:	00028234 	movhi	zero,2568
   27930:	00028234 	movhi	zero,2568
   27934:	00028234 	movhi	zero,2568
   27938:	00028234 	movhi	zero,2568
   2793c:	00028004 	movi	zero,2560
   27940:	00028234 	movhi	zero,2568
   27944:	00028234 	movhi	zero,2568
   27948:	00028234 	movhi	zero,2568
   2794c:	00028234 	movhi	zero,2568
   27950:	00028234 	movhi	zero,2568
   27954:	0002805c 	xori	zero,zero,2561
   27958:	00028234 	movhi	zero,2568
   2795c:	00028234 	movhi	zero,2568
   27960:	000280cc 	andi	zero,zero,2563
   27964:	00028234 	movhi	zero,2568
   27968:	00028234 	movhi	zero,2568
   2796c:	00028234 	movhi	zero,2568
   27970:	00028234 	movhi	zero,2568
   27974:	00028234 	movhi	zero,2568
   27978:	00028234 	movhi	zero,2568
   2797c:	00028234 	movhi	zero,2568
   27980:	00028234 	movhi	zero,2568
   27984:	00028234 	movhi	zero,2568
   27988:	00028234 	movhi	zero,2568
   2798c:	00027e78 	rdprs	zero,zero,2553
   27990:	00027ea4 	muli	zero,zero,2554
   27994:	00028234 	movhi	zero,2568
   27998:	00028234 	movhi	zero,2568
   2799c:	00028234 	movhi	zero,2568
   279a0:	000281dc 	xori	zero,zero,2567
   279a4:	00027ea4 	muli	zero,zero,2554
   279a8:	00028234 	movhi	zero,2568
   279ac:	00028234 	movhi	zero,2568
   279b0:	00027d38 	rdprs	zero,zero,2548
   279b4:	00028234 	movhi	zero,2568
   279b8:	00027d48 	cmpgei	zero,zero,2549
   279bc:	00027d84 	movi	zero,2550
   279c0:	00027a80 	call	27a8 <__alt_mem_onchip_memory2_0-0x1d858>
   279c4:	00027d2c 	andhi	zero,zero,2548
   279c8:	00028234 	movhi	zero,2568
   279cc:	00028108 	cmpgei	zero,zero,2564
   279d0:	00028234 	movhi	zero,2568
   279d4:	00028160 	cmpeqi	zero,zero,2565
   279d8:	00028234 	movhi	zero,2568
   279dc:	00028234 	movhi	zero,2568
   279e0:	00027e24 	muli	zero,zero,2552
   279e4:	42000204 	addi	r8,r8,8
   279e8:	da802317 	ldw	r10,140(sp)
   279ec:	5455883a 	add	r10,r10,r17
   279f0:	da802315 	stw	r10,140(sp)
   279f4:	003f8b06 	br	27824 <__alt_data_end+0xfffe7824>
   279f8:	d9002017 	ldw	r4,128(sp)
   279fc:	a00b883a 	mov	r5,r20
   27a00:	0022e800 	call	22e80 <__swsetup_r>
   27a04:	1003b11e 	bne	r2,zero,288cc <___vfiprintf_internal_r+0x11ec>
   27a08:	a080030b 	ldhu	r2,12(r20)
   27a0c:	00c00284 	movi	r3,10
   27a10:	1080068c 	andi	r2,r2,26
   27a14:	10ff541e 	bne	r2,r3,27768 <__alt_data_end+0xfffe7768>
   27a18:	a080038f 	ldh	r2,14(r20)
   27a1c:	103f5216 	blt	r2,zero,27768 <__alt_data_end+0xfffe7768>
   27a20:	d9c02217 	ldw	r7,136(sp)
   27a24:	d9002017 	ldw	r4,128(sp)
   27a28:	e00d883a 	mov	r6,fp
   27a2c:	a00b883a 	mov	r5,r20
   27a30:	0028b580 	call	28b58 <__sbprintf>
   27a34:	dfc03617 	ldw	ra,216(sp)
   27a38:	df003517 	ldw	fp,212(sp)
   27a3c:	ddc03417 	ldw	r23,208(sp)
   27a40:	dd803317 	ldw	r22,204(sp)
   27a44:	dd403217 	ldw	r21,200(sp)
   27a48:	dd003117 	ldw	r20,196(sp)
   27a4c:	dcc03017 	ldw	r19,192(sp)
   27a50:	dc802f17 	ldw	r18,188(sp)
   27a54:	dc402e17 	ldw	r17,184(sp)
   27a58:	dc002d17 	ldw	r16,180(sp)
   27a5c:	dec03704 	addi	sp,sp,220
   27a60:	f800283a 	ret
   27a64:	0024e540 	call	24e54 <__sinit>
   27a68:	003f2f06 	br	27728 <__alt_data_end+0xfffe7728>
   27a6c:	0463c83a 	sub	r17,zero,r17
   27a70:	d8802215 	stw	r2,136(sp)
   27a74:	a5000114 	ori	r20,r20,4
   27a78:	80c00007 	ldb	r3,0(r16)
   27a7c:	003f7706 	br	2785c <__alt_data_end+0xfffe785c>
   27a80:	00800c04 	movi	r2,48
   27a84:	da802217 	ldw	r10,136(sp)
   27a88:	d8801d05 	stb	r2,116(sp)
   27a8c:	00801e04 	movi	r2,120
   27a90:	d8801d45 	stb	r2,117(sp)
   27a94:	d8001d85 	stb	zero,118(sp)
   27a98:	50c00104 	addi	r3,r10,4
   27a9c:	54800017 	ldw	r18,0(r10)
   27aa0:	0027883a 	mov	r19,zero
   27aa4:	a0800094 	ori	r2,r20,2
   27aa8:	48030b16 	blt	r9,zero,286d8 <___vfiprintf_internal_r+0xff8>
   27aac:	00bfdfc4 	movi	r2,-129
   27ab0:	a096703a 	and	r11,r20,r2
   27ab4:	d8c02215 	stw	r3,136(sp)
   27ab8:	5d000094 	ori	r20,r11,2
   27abc:	90032b1e 	bne	r18,zero,2876c <___vfiprintf_internal_r+0x108c>
   27ac0:	008000f4 	movhi	r2,3
   27ac4:	10bfb804 	addi	r2,r2,-288
   27ac8:	d8802615 	stw	r2,152(sp)
   27acc:	0039883a 	mov	fp,zero
   27ad0:	48017b1e 	bne	r9,zero,280c0 <___vfiprintf_internal_r+0x9e0>
   27ad4:	0013883a 	mov	r9,zero
   27ad8:	0027883a 	mov	r19,zero
   27adc:	dd401a04 	addi	r21,sp,104
   27ae0:	4825883a 	mov	r18,r9
   27ae4:	4cc0010e 	bge	r9,r19,27aec <___vfiprintf_internal_r+0x40c>
   27ae8:	9825883a 	mov	r18,r19
   27aec:	e7003fcc 	andi	fp,fp,255
   27af0:	e700201c 	xori	fp,fp,128
   27af4:	e73fe004 	addi	fp,fp,-128
   27af8:	e0000126 	beq	fp,zero,27b00 <___vfiprintf_internal_r+0x420>
   27afc:	94800044 	addi	r18,r18,1
   27b00:	a380008c 	andi	r14,r20,2
   27b04:	70000126 	beq	r14,zero,27b0c <___vfiprintf_internal_r+0x42c>
   27b08:	94800084 	addi	r18,r18,2
   27b0c:	a700210c 	andi	fp,r20,132
   27b10:	e001df1e 	bne	fp,zero,28290 <___vfiprintf_internal_r+0xbb0>
   27b14:	8c87c83a 	sub	r3,r17,r18
   27b18:	00c1dd0e 	bge	zero,r3,28290 <___vfiprintf_internal_r+0xbb0>
   27b1c:	01c00404 	movi	r7,16
   27b20:	d8801c17 	ldw	r2,112(sp)
   27b24:	38c3ad0e 	bge	r7,r3,289dc <___vfiprintf_internal_r+0x12fc>
   27b28:	028000f4 	movhi	r10,3
   27b2c:	52801d04 	addi	r10,r10,116
   27b30:	dc002915 	stw	r16,164(sp)
   27b34:	d9801b17 	ldw	r6,108(sp)
   27b38:	da802415 	stw	r10,144(sp)
   27b3c:	03c001c4 	movi	r15,7
   27b40:	da402515 	stw	r9,148(sp)
   27b44:	db802815 	stw	r14,160(sp)
   27b48:	1821883a 	mov	r16,r3
   27b4c:	00000506 	br	27b64 <___vfiprintf_internal_r+0x484>
   27b50:	31400084 	addi	r5,r6,2
   27b54:	42000204 	addi	r8,r8,8
   27b58:	200d883a 	mov	r6,r4
   27b5c:	843ffc04 	addi	r16,r16,-16
   27b60:	3c000d0e 	bge	r7,r16,27b98 <___vfiprintf_internal_r+0x4b8>
   27b64:	10800404 	addi	r2,r2,16
   27b68:	31000044 	addi	r4,r6,1
   27b6c:	45800015 	stw	r22,0(r8)
   27b70:	41c00115 	stw	r7,4(r8)
   27b74:	d8801c15 	stw	r2,112(sp)
   27b78:	d9001b15 	stw	r4,108(sp)
   27b7c:	793ff40e 	bge	r15,r4,27b50 <__alt_data_end+0xfffe7b50>
   27b80:	1001b51e 	bne	r2,zero,28258 <___vfiprintf_internal_r+0xb78>
   27b84:	843ffc04 	addi	r16,r16,-16
   27b88:	000d883a 	mov	r6,zero
   27b8c:	01400044 	movi	r5,1
   27b90:	d811883a 	mov	r8,sp
   27b94:	3c3ff316 	blt	r7,r16,27b64 <__alt_data_end+0xfffe7b64>
   27b98:	8007883a 	mov	r3,r16
   27b9c:	da402517 	ldw	r9,148(sp)
   27ba0:	db802817 	ldw	r14,160(sp)
   27ba4:	dc002917 	ldw	r16,164(sp)
   27ba8:	da802417 	ldw	r10,144(sp)
   27bac:	1885883a 	add	r2,r3,r2
   27bb0:	40c00115 	stw	r3,4(r8)
   27bb4:	42800015 	stw	r10,0(r8)
   27bb8:	d8801c15 	stw	r2,112(sp)
   27bbc:	d9401b15 	stw	r5,108(sp)
   27bc0:	00c001c4 	movi	r3,7
   27bc4:	19426016 	blt	r3,r5,28548 <___vfiprintf_internal_r+0xe68>
   27bc8:	d8c01d87 	ldb	r3,118(sp)
   27bcc:	42000204 	addi	r8,r8,8
   27bd0:	29000044 	addi	r4,r5,1
   27bd4:	1801b31e 	bne	r3,zero,282a4 <___vfiprintf_internal_r+0xbc4>
   27bd8:	7001c026 	beq	r14,zero,282dc <___vfiprintf_internal_r+0xbfc>
   27bdc:	d8c01d04 	addi	r3,sp,116
   27be0:	10800084 	addi	r2,r2,2
   27be4:	40c00015 	stw	r3,0(r8)
   27be8:	00c00084 	movi	r3,2
   27bec:	40c00115 	stw	r3,4(r8)
   27bf0:	d8801c15 	stw	r2,112(sp)
   27bf4:	d9001b15 	stw	r4,108(sp)
   27bf8:	00c001c4 	movi	r3,7
   27bfc:	1902650e 	bge	r3,r4,28594 <___vfiprintf_internal_r+0xeb4>
   27c00:	10029a1e 	bne	r2,zero,2866c <___vfiprintf_internal_r+0xf8c>
   27c04:	00c02004 	movi	r3,128
   27c08:	01000044 	movi	r4,1
   27c0c:	000b883a 	mov	r5,zero
   27c10:	d811883a 	mov	r8,sp
   27c14:	e0c1b31e 	bne	fp,r3,282e4 <___vfiprintf_internal_r+0xc04>
   27c18:	8cb9c83a 	sub	fp,r17,r18
   27c1c:	0701b10e 	bge	zero,fp,282e4 <___vfiprintf_internal_r+0xc04>
   27c20:	01c00404 	movi	r7,16
   27c24:	3f03890e 	bge	r7,fp,28a4c <___vfiprintf_internal_r+0x136c>
   27c28:	00c000f4 	movhi	r3,3
   27c2c:	18c01904 	addi	r3,r3,100
   27c30:	d8c02415 	stw	r3,144(sp)
   27c34:	8007883a 	mov	r3,r16
   27c38:	034001c4 	movi	r13,7
   27c3c:	e021883a 	mov	r16,fp
   27c40:	da402515 	stw	r9,148(sp)
   27c44:	1839883a 	mov	fp,r3
   27c48:	00000506 	br	27c60 <___vfiprintf_internal_r+0x580>
   27c4c:	29800084 	addi	r6,r5,2
   27c50:	42000204 	addi	r8,r8,8
   27c54:	180b883a 	mov	r5,r3
   27c58:	843ffc04 	addi	r16,r16,-16
   27c5c:	3c000d0e 	bge	r7,r16,27c94 <___vfiprintf_internal_r+0x5b4>
   27c60:	10800404 	addi	r2,r2,16
   27c64:	28c00044 	addi	r3,r5,1
   27c68:	45c00015 	stw	r23,0(r8)
   27c6c:	41c00115 	stw	r7,4(r8)
   27c70:	d8801c15 	stw	r2,112(sp)
   27c74:	d8c01b15 	stw	r3,108(sp)
   27c78:	68fff40e 	bge	r13,r3,27c4c <__alt_data_end+0xfffe7c4c>
   27c7c:	1002241e 	bne	r2,zero,28510 <___vfiprintf_internal_r+0xe30>
   27c80:	843ffc04 	addi	r16,r16,-16
   27c84:	01800044 	movi	r6,1
   27c88:	000b883a 	mov	r5,zero
   27c8c:	d811883a 	mov	r8,sp
   27c90:	3c3ff316 	blt	r7,r16,27c60 <__alt_data_end+0xfffe7c60>
   27c94:	da402517 	ldw	r9,148(sp)
   27c98:	e007883a 	mov	r3,fp
   27c9c:	8039883a 	mov	fp,r16
   27ca0:	1821883a 	mov	r16,r3
   27ca4:	d8c02417 	ldw	r3,144(sp)
   27ca8:	1705883a 	add	r2,r2,fp
   27cac:	47000115 	stw	fp,4(r8)
   27cb0:	40c00015 	stw	r3,0(r8)
   27cb4:	d8801c15 	stw	r2,112(sp)
   27cb8:	d9801b15 	stw	r6,108(sp)
   27cbc:	00c001c4 	movi	r3,7
   27cc0:	19827616 	blt	r3,r6,2869c <___vfiprintf_internal_r+0xfbc>
   27cc4:	4cf9c83a 	sub	fp,r9,r19
   27cc8:	42000204 	addi	r8,r8,8
   27ccc:	31000044 	addi	r4,r6,1
   27cd0:	300b883a 	mov	r5,r6
   27cd4:	07018516 	blt	zero,fp,282ec <___vfiprintf_internal_r+0xc0c>
   27cd8:	9885883a 	add	r2,r19,r2
   27cdc:	45400015 	stw	r21,0(r8)
   27ce0:	44c00115 	stw	r19,4(r8)
   27ce4:	d8801c15 	stw	r2,112(sp)
   27ce8:	d9001b15 	stw	r4,108(sp)
   27cec:	00c001c4 	movi	r3,7
   27cf0:	1901dd0e 	bge	r3,r4,28468 <___vfiprintf_internal_r+0xd88>
   27cf4:	1002401e 	bne	r2,zero,285f8 <___vfiprintf_internal_r+0xf18>
   27cf8:	d8001b15 	stw	zero,108(sp)
   27cfc:	a2c0010c 	andi	r11,r20,4
   27d00:	58000226 	beq	r11,zero,27d0c <___vfiprintf_internal_r+0x62c>
   27d04:	8ca7c83a 	sub	r19,r17,r18
   27d08:	04c2f216 	blt	zero,r19,288d4 <___vfiprintf_internal_r+0x11f4>
   27d0c:	8c80010e 	bge	r17,r18,27d14 <___vfiprintf_internal_r+0x634>
   27d10:	9023883a 	mov	r17,r18
   27d14:	da802317 	ldw	r10,140(sp)
   27d18:	5455883a 	add	r10,r10,r17
   27d1c:	da802315 	stw	r10,140(sp)
   27d20:	d8001b15 	stw	zero,108(sp)
   27d24:	d811883a 	mov	r8,sp
   27d28:	003ea206 	br	277b4 <__alt_data_end+0xfffe77b4>
   27d2c:	a5000814 	ori	r20,r20,32
   27d30:	80c00007 	ldb	r3,0(r16)
   27d34:	003ec906 	br	2785c <__alt_data_end+0xfffe785c>
   27d38:	80c00007 	ldb	r3,0(r16)
   27d3c:	1b030926 	beq	r3,r12,28964 <___vfiprintf_internal_r+0x1284>
   27d40:	a5000414 	ori	r20,r20,16
   27d44:	003ec506 	br	2785c <__alt_data_end+0xfffe785c>
   27d48:	21003fcc 	andi	r4,r4,255
   27d4c:	20035e1e 	bne	r4,zero,28ac8 <___vfiprintf_internal_r+0x13e8>
   27d50:	a080080c 	andi	r2,r20,32
   27d54:	1002a526 	beq	r2,zero,287ec <___vfiprintf_internal_r+0x110c>
   27d58:	da802217 	ldw	r10,136(sp)
   27d5c:	50800017 	ldw	r2,0(r10)
   27d60:	da802317 	ldw	r10,140(sp)
   27d64:	5007d7fa 	srai	r3,r10,31
   27d68:	da802217 	ldw	r10,136(sp)
   27d6c:	10c00115 	stw	r3,4(r2)
   27d70:	52800104 	addi	r10,r10,4
   27d74:	da802215 	stw	r10,136(sp)
   27d78:	da802317 	ldw	r10,140(sp)
   27d7c:	12800015 	stw	r10,0(r2)
   27d80:	003e8c06 	br	277b4 <__alt_data_end+0xfffe77b4>
   27d84:	21003fcc 	andi	r4,r4,255
   27d88:	2003511e 	bne	r4,zero,28ad0 <___vfiprintf_internal_r+0x13f0>
   27d8c:	a080080c 	andi	r2,r20,32
   27d90:	1000a126 	beq	r2,zero,28018 <___vfiprintf_internal_r+0x938>
   27d94:	da802217 	ldw	r10,136(sp)
   27d98:	d8001d85 	stb	zero,118(sp)
   27d9c:	50800204 	addi	r2,r10,8
   27da0:	54800017 	ldw	r18,0(r10)
   27da4:	54c00117 	ldw	r19,4(r10)
   27da8:	4802b416 	blt	r9,zero,2887c <___vfiprintf_internal_r+0x119c>
   27dac:	013fdfc4 	movi	r4,-129
   27db0:	94c6b03a 	or	r3,r18,r19
   27db4:	d8802215 	stw	r2,136(sp)
   27db8:	a128703a 	and	r20,r20,r4
   27dbc:	1800a226 	beq	r3,zero,28048 <___vfiprintf_internal_r+0x968>
   27dc0:	0039883a 	mov	fp,zero
   27dc4:	dd401a04 	addi	r21,sp,104
   27dc8:	9006d0fa 	srli	r3,r18,3
   27dcc:	9808977a 	slli	r4,r19,29
   27dd0:	9826d0fa 	srli	r19,r19,3
   27dd4:	948001cc 	andi	r18,r18,7
   27dd8:	90800c04 	addi	r2,r18,48
   27ddc:	ad7fffc4 	addi	r21,r21,-1
   27de0:	20e4b03a 	or	r18,r4,r3
   27de4:	a8800005 	stb	r2,0(r21)
   27de8:	94c6b03a 	or	r3,r18,r19
   27dec:	183ff61e 	bne	r3,zero,27dc8 <__alt_data_end+0xfffe7dc8>
   27df0:	a0c0004c 	andi	r3,r20,1
   27df4:	18005926 	beq	r3,zero,27f5c <___vfiprintf_internal_r+0x87c>
   27df8:	10803fcc 	andi	r2,r2,255
   27dfc:	1080201c 	xori	r2,r2,128
   27e00:	10bfe004 	addi	r2,r2,-128
   27e04:	00c00c04 	movi	r3,48
   27e08:	10c05426 	beq	r2,r3,27f5c <___vfiprintf_internal_r+0x87c>
   27e0c:	da801e17 	ldw	r10,120(sp)
   27e10:	a8bfffc4 	addi	r2,r21,-1
   27e14:	a8ffffc5 	stb	r3,-1(r21)
   27e18:	50a7c83a 	sub	r19,r10,r2
   27e1c:	102b883a 	mov	r21,r2
   27e20:	003f2f06 	br	27ae0 <__alt_data_end+0xfffe7ae0>
   27e24:	21003fcc 	andi	r4,r4,255
   27e28:	2003421e 	bne	r4,zero,28b34 <___vfiprintf_internal_r+0x1454>
   27e2c:	008000f4 	movhi	r2,3
   27e30:	10bfb804 	addi	r2,r2,-288
   27e34:	d8802615 	stw	r2,152(sp)
   27e38:	a080080c 	andi	r2,r20,32
   27e3c:	1000aa26 	beq	r2,zero,280e8 <___vfiprintf_internal_r+0xa08>
   27e40:	da802217 	ldw	r10,136(sp)
   27e44:	54800017 	ldw	r18,0(r10)
   27e48:	54c00117 	ldw	r19,4(r10)
   27e4c:	52800204 	addi	r10,r10,8
   27e50:	da802215 	stw	r10,136(sp)
   27e54:	a080004c 	andi	r2,r20,1
   27e58:	1001d226 	beq	r2,zero,285a4 <___vfiprintf_internal_r+0xec4>
   27e5c:	94c4b03a 	or	r2,r18,r19
   27e60:	1002351e 	bne	r2,zero,28738 <___vfiprintf_internal_r+0x1058>
   27e64:	d8001d85 	stb	zero,118(sp)
   27e68:	48022216 	blt	r9,zero,286f4 <___vfiprintf_internal_r+0x1014>
   27e6c:	00bfdfc4 	movi	r2,-129
   27e70:	a0a8703a 	and	r20,r20,r2
   27e74:	003f1506 	br	27acc <__alt_data_end+0xfffe7acc>
   27e78:	da802217 	ldw	r10,136(sp)
   27e7c:	04800044 	movi	r18,1
   27e80:	d8001d85 	stb	zero,118(sp)
   27e84:	50800017 	ldw	r2,0(r10)
   27e88:	52800104 	addi	r10,r10,4
   27e8c:	da802215 	stw	r10,136(sp)
   27e90:	d8801005 	stb	r2,64(sp)
   27e94:	9027883a 	mov	r19,r18
   27e98:	dd401004 	addi	r21,sp,64
   27e9c:	0013883a 	mov	r9,zero
   27ea0:	003f1706 	br	27b00 <__alt_data_end+0xfffe7b00>
   27ea4:	21003fcc 	andi	r4,r4,255
   27ea8:	2003201e 	bne	r4,zero,28b2c <___vfiprintf_internal_r+0x144c>
   27eac:	a080080c 	andi	r2,r20,32
   27eb0:	10004b26 	beq	r2,zero,27fe0 <___vfiprintf_internal_r+0x900>
   27eb4:	da802217 	ldw	r10,136(sp)
   27eb8:	50800117 	ldw	r2,4(r10)
   27ebc:	54800017 	ldw	r18,0(r10)
   27ec0:	52800204 	addi	r10,r10,8
   27ec4:	da802215 	stw	r10,136(sp)
   27ec8:	1027883a 	mov	r19,r2
   27ecc:	10022c16 	blt	r2,zero,28780 <___vfiprintf_internal_r+0x10a0>
   27ed0:	df001d83 	ldbu	fp,118(sp)
   27ed4:	48007216 	blt	r9,zero,280a0 <___vfiprintf_internal_r+0x9c0>
   27ed8:	00ffdfc4 	movi	r3,-129
   27edc:	94c4b03a 	or	r2,r18,r19
   27ee0:	a0e8703a 	and	r20,r20,r3
   27ee4:	1000cc26 	beq	r2,zero,28218 <___vfiprintf_internal_r+0xb38>
   27ee8:	98021026 	beq	r19,zero,2872c <___vfiprintf_internal_r+0x104c>
   27eec:	dc402415 	stw	r17,144(sp)
   27ef0:	dc002515 	stw	r16,148(sp)
   27ef4:	9823883a 	mov	r17,r19
   27ef8:	9021883a 	mov	r16,r18
   27efc:	dd401a04 	addi	r21,sp,104
   27f00:	4825883a 	mov	r18,r9
   27f04:	4027883a 	mov	r19,r8
   27f08:	8009883a 	mov	r4,r16
   27f0c:	880b883a 	mov	r5,r17
   27f10:	01800284 	movi	r6,10
   27f14:	000f883a 	mov	r7,zero
   27f18:	002a63c0 	call	2a63c <__umoddi3>
   27f1c:	10800c04 	addi	r2,r2,48
   27f20:	ad7fffc4 	addi	r21,r21,-1
   27f24:	8009883a 	mov	r4,r16
   27f28:	880b883a 	mov	r5,r17
   27f2c:	a8800005 	stb	r2,0(r21)
   27f30:	01800284 	movi	r6,10
   27f34:	000f883a 	mov	r7,zero
   27f38:	002a0c40 	call	2a0c4 <__udivdi3>
   27f3c:	1021883a 	mov	r16,r2
   27f40:	10c4b03a 	or	r2,r2,r3
   27f44:	1823883a 	mov	r17,r3
   27f48:	103fef1e 	bne	r2,zero,27f08 <__alt_data_end+0xfffe7f08>
   27f4c:	dc402417 	ldw	r17,144(sp)
   27f50:	dc002517 	ldw	r16,148(sp)
   27f54:	9013883a 	mov	r9,r18
   27f58:	9811883a 	mov	r8,r19
   27f5c:	da801e17 	ldw	r10,120(sp)
   27f60:	5567c83a 	sub	r19,r10,r21
   27f64:	003ede06 	br	27ae0 <__alt_data_end+0xfffe7ae0>
   27f68:	38803fcc 	andi	r2,r7,255
   27f6c:	1080201c 	xori	r2,r2,128
   27f70:	10bfe004 	addi	r2,r2,-128
   27f74:	1002371e 	bne	r2,zero,28854 <___vfiprintf_internal_r+0x1174>
   27f78:	01000044 	movi	r4,1
   27f7c:	01c00804 	movi	r7,32
   27f80:	80c00007 	ldb	r3,0(r16)
   27f84:	003e3506 	br	2785c <__alt_data_end+0xfffe785c>
   27f88:	a5000054 	ori	r20,r20,1
   27f8c:	80c00007 	ldb	r3,0(r16)
   27f90:	003e3206 	br	2785c <__alt_data_end+0xfffe785c>
   27f94:	a5002014 	ori	r20,r20,128
   27f98:	80c00007 	ldb	r3,0(r16)
   27f9c:	003e2f06 	br	2785c <__alt_data_end+0xfffe785c>
   27fa0:	8015883a 	mov	r10,r16
   27fa4:	0023883a 	mov	r17,zero
   27fa8:	18bff404 	addi	r2,r3,-48
   27fac:	50c00007 	ldb	r3,0(r10)
   27fb0:	8c4002a4 	muli	r17,r17,10
   27fb4:	84000044 	addi	r16,r16,1
   27fb8:	8015883a 	mov	r10,r16
   27fbc:	1463883a 	add	r17,r2,r17
   27fc0:	18bff404 	addi	r2,r3,-48
   27fc4:	30bff92e 	bgeu	r6,r2,27fac <__alt_data_end+0xfffe7fac>
   27fc8:	003e2506 	br	27860 <__alt_data_end+0xfffe7860>
   27fcc:	21003fcc 	andi	r4,r4,255
   27fd0:	2002d41e 	bne	r4,zero,28b24 <___vfiprintf_internal_r+0x1444>
   27fd4:	a5000414 	ori	r20,r20,16
   27fd8:	a080080c 	andi	r2,r20,32
   27fdc:	103fb51e 	bne	r2,zero,27eb4 <__alt_data_end+0xfffe7eb4>
   27fe0:	a080040c 	andi	r2,r20,16
   27fe4:	1001f826 	beq	r2,zero,287c8 <___vfiprintf_internal_r+0x10e8>
   27fe8:	da802217 	ldw	r10,136(sp)
   27fec:	54800017 	ldw	r18,0(r10)
   27ff0:	52800104 	addi	r10,r10,4
   27ff4:	da802215 	stw	r10,136(sp)
   27ff8:	9027d7fa 	srai	r19,r18,31
   27ffc:	9805883a 	mov	r2,r19
   28000:	003fb206 	br	27ecc <__alt_data_end+0xfffe7ecc>
   28004:	21003fcc 	andi	r4,r4,255
   28008:	2002c41e 	bne	r4,zero,28b1c <___vfiprintf_internal_r+0x143c>
   2800c:	a5000414 	ori	r20,r20,16
   28010:	a080080c 	andi	r2,r20,32
   28014:	103f5f1e 	bne	r2,zero,27d94 <__alt_data_end+0xfffe7d94>
   28018:	a080040c 	andi	r2,r20,16
   2801c:	10020f26 	beq	r2,zero,2885c <___vfiprintf_internal_r+0x117c>
   28020:	da802217 	ldw	r10,136(sp)
   28024:	d8001d85 	stb	zero,118(sp)
   28028:	0027883a 	mov	r19,zero
   2802c:	50800104 	addi	r2,r10,4
   28030:	54800017 	ldw	r18,0(r10)
   28034:	48021116 	blt	r9,zero,2887c <___vfiprintf_internal_r+0x119c>
   28038:	00ffdfc4 	movi	r3,-129
   2803c:	d8802215 	stw	r2,136(sp)
   28040:	a0e8703a 	and	r20,r20,r3
   28044:	903f5e1e 	bne	r18,zero,27dc0 <__alt_data_end+0xfffe7dc0>
   28048:	0039883a 	mov	fp,zero
   2804c:	4802a626 	beq	r9,zero,28ae8 <___vfiprintf_internal_r+0x1408>
   28050:	0025883a 	mov	r18,zero
   28054:	0027883a 	mov	r19,zero
   28058:	003f5a06 	br	27dc4 <__alt_data_end+0xfffe7dc4>
   2805c:	21003fcc 	andi	r4,r4,255
   28060:	20029f1e 	bne	r4,zero,28ae0 <___vfiprintf_internal_r+0x1400>
   28064:	a5000414 	ori	r20,r20,16
   28068:	a080080c 	andi	r2,r20,32
   2806c:	10005e1e 	bne	r2,zero,281e8 <___vfiprintf_internal_r+0xb08>
   28070:	a080040c 	andi	r2,r20,16
   28074:	1001a21e 	bne	r2,zero,28700 <___vfiprintf_internal_r+0x1020>
   28078:	a080100c 	andi	r2,r20,64
   2807c:	d8001d85 	stb	zero,118(sp)
   28080:	da802217 	ldw	r10,136(sp)
   28084:	1002231e 	bne	r2,zero,28914 <___vfiprintf_internal_r+0x1234>
   28088:	50800104 	addi	r2,r10,4
   2808c:	54800017 	ldw	r18,0(r10)
   28090:	0027883a 	mov	r19,zero
   28094:	4801a00e 	bge	r9,zero,28718 <___vfiprintf_internal_r+0x1038>
   28098:	d8802215 	stw	r2,136(sp)
   2809c:	0039883a 	mov	fp,zero
   280a0:	94c4b03a 	or	r2,r18,r19
   280a4:	103f901e 	bne	r2,zero,27ee8 <__alt_data_end+0xfffe7ee8>
   280a8:	00800044 	movi	r2,1
   280ac:	10803fcc 	andi	r2,r2,255
   280b0:	00c00044 	movi	r3,1
   280b4:	10c05926 	beq	r2,r3,2821c <___vfiprintf_internal_r+0xb3c>
   280b8:	00c00084 	movi	r3,2
   280bc:	10ffe41e 	bne	r2,r3,28050 <__alt_data_end+0xfffe8050>
   280c0:	0025883a 	mov	r18,zero
   280c4:	0027883a 	mov	r19,zero
   280c8:	00013d06 	br	285c0 <___vfiprintf_internal_r+0xee0>
   280cc:	21003fcc 	andi	r4,r4,255
   280d0:	2002811e 	bne	r4,zero,28ad8 <___vfiprintf_internal_r+0x13f8>
   280d4:	008000f4 	movhi	r2,3
   280d8:	10bfb304 	addi	r2,r2,-308
   280dc:	d8802615 	stw	r2,152(sp)
   280e0:	a080080c 	andi	r2,r20,32
   280e4:	103f561e 	bne	r2,zero,27e40 <__alt_data_end+0xfffe7e40>
   280e8:	a080040c 	andi	r2,r20,16
   280ec:	1001d126 	beq	r2,zero,28834 <___vfiprintf_internal_r+0x1154>
   280f0:	da802217 	ldw	r10,136(sp)
   280f4:	0027883a 	mov	r19,zero
   280f8:	54800017 	ldw	r18,0(r10)
   280fc:	52800104 	addi	r10,r10,4
   28100:	da802215 	stw	r10,136(sp)
   28104:	003f5306 	br	27e54 <__alt_data_end+0xfffe7e54>
   28108:	da802217 	ldw	r10,136(sp)
   2810c:	d8001d85 	stb	zero,118(sp)
   28110:	55400017 	ldw	r21,0(r10)
   28114:	50c00104 	addi	r3,r10,4
   28118:	a8024226 	beq	r21,zero,28a24 <___vfiprintf_internal_r+0x1344>
   2811c:	48021816 	blt	r9,zero,28980 <___vfiprintf_internal_r+0x12a0>
   28120:	480d883a 	mov	r6,r9
   28124:	000b883a 	mov	r5,zero
   28128:	a809883a 	mov	r4,r21
   2812c:	d8c02a15 	stw	r3,168(sp)
   28130:	da002b15 	stw	r8,172(sp)
   28134:	da402c15 	stw	r9,176(sp)
   28138:	0025f040 	call	25f04 <memchr>
   2813c:	d8c02a17 	ldw	r3,168(sp)
   28140:	da002b17 	ldw	r8,172(sp)
   28144:	da402c17 	ldw	r9,176(sp)
   28148:	10024826 	beq	r2,zero,28a6c <___vfiprintf_internal_r+0x138c>
   2814c:	1567c83a 	sub	r19,r2,r21
   28150:	df001d83 	ldbu	fp,118(sp)
   28154:	d8c02215 	stw	r3,136(sp)
   28158:	0013883a 	mov	r9,zero
   2815c:	003e6006 	br	27ae0 <__alt_data_end+0xfffe7ae0>
   28160:	21003fcc 	andi	r4,r4,255
   28164:	203fc026 	beq	r4,zero,28068 <__alt_data_end+0xfffe8068>
   28168:	d9c01d85 	stb	r7,118(sp)
   2816c:	003fbe06 	br	28068 <__alt_data_end+0xfffe8068>
   28170:	da802217 	ldw	r10,136(sp)
   28174:	54400017 	ldw	r17,0(r10)
   28178:	50800104 	addi	r2,r10,4
   2817c:	883e3b16 	blt	r17,zero,27a6c <__alt_data_end+0xfffe7a6c>
   28180:	d8802215 	stw	r2,136(sp)
   28184:	80c00007 	ldb	r3,0(r16)
   28188:	003db406 	br	2785c <__alt_data_end+0xfffe785c>
   2818c:	01000044 	movi	r4,1
   28190:	01c00ac4 	movi	r7,43
   28194:	80c00007 	ldb	r3,0(r16)
   28198:	003db006 	br	2785c <__alt_data_end+0xfffe785c>
   2819c:	80c00007 	ldb	r3,0(r16)
   281a0:	82800044 	addi	r10,r16,1
   281a4:	1b423c26 	beq	r3,r13,28a98 <___vfiprintf_internal_r+0x13b8>
   281a8:	18bff404 	addi	r2,r3,-48
   281ac:	0013883a 	mov	r9,zero
   281b0:	30822b36 	bltu	r6,r2,28a60 <___vfiprintf_internal_r+0x1380>
   281b4:	50c00007 	ldb	r3,0(r10)
   281b8:	4a4002a4 	muli	r9,r9,10
   281bc:	54000044 	addi	r16,r10,1
   281c0:	8015883a 	mov	r10,r16
   281c4:	4893883a 	add	r9,r9,r2
   281c8:	18bff404 	addi	r2,r3,-48
   281cc:	30bff92e 	bgeu	r6,r2,281b4 <__alt_data_end+0xfffe81b4>
   281d0:	483da30e 	bge	r9,zero,27860 <__alt_data_end+0xfffe7860>
   281d4:	027fffc4 	movi	r9,-1
   281d8:	003da106 	br	27860 <__alt_data_end+0xfffe7860>
   281dc:	a5001014 	ori	r20,r20,64
   281e0:	80c00007 	ldb	r3,0(r16)
   281e4:	003d9d06 	br	2785c <__alt_data_end+0xfffe785c>
   281e8:	da802217 	ldw	r10,136(sp)
   281ec:	d8001d85 	stb	zero,118(sp)
   281f0:	50c00204 	addi	r3,r10,8
   281f4:	54800017 	ldw	r18,0(r10)
   281f8:	54c00117 	ldw	r19,4(r10)
   281fc:	4801ca16 	blt	r9,zero,28928 <___vfiprintf_internal_r+0x1248>
   28200:	013fdfc4 	movi	r4,-129
   28204:	94c4b03a 	or	r2,r18,r19
   28208:	d8c02215 	stw	r3,136(sp)
   2820c:	a128703a 	and	r20,r20,r4
   28210:	0039883a 	mov	fp,zero
   28214:	103f341e 	bne	r2,zero,27ee8 <__alt_data_end+0xfffe7ee8>
   28218:	483e2e26 	beq	r9,zero,27ad4 <__alt_data_end+0xfffe7ad4>
   2821c:	0025883a 	mov	r18,zero
   28220:	94800c04 	addi	r18,r18,48
   28224:	dc8019c5 	stb	r18,103(sp)
   28228:	dcc02717 	ldw	r19,156(sp)
   2822c:	dd4019c4 	addi	r21,sp,103
   28230:	003e2b06 	br	27ae0 <__alt_data_end+0xfffe7ae0>
   28234:	21003fcc 	andi	r4,r4,255
   28238:	2002361e 	bne	r4,zero,28b14 <___vfiprintf_internal_r+0x1434>
   2823c:	1801c126 	beq	r3,zero,28944 <___vfiprintf_internal_r+0x1264>
   28240:	04800044 	movi	r18,1
   28244:	d8c01005 	stb	r3,64(sp)
   28248:	d8001d85 	stb	zero,118(sp)
   2824c:	9027883a 	mov	r19,r18
   28250:	dd401004 	addi	r21,sp,64
   28254:	003f1106 	br	27e9c <__alt_data_end+0xfffe7e9c>
   28258:	d9402117 	ldw	r5,132(sp)
   2825c:	d9002017 	ldw	r4,128(sp)
   28260:	d9801a04 	addi	r6,sp,104
   28264:	d9c02b15 	stw	r7,172(sp)
   28268:	dbc02a15 	stw	r15,168(sp)
   2826c:	00275cc0 	call	275cc <__sprint_r.part.0>
   28270:	d9c02b17 	ldw	r7,172(sp)
   28274:	dbc02a17 	ldw	r15,168(sp)
   28278:	10006d1e 	bne	r2,zero,28430 <___vfiprintf_internal_r+0xd50>
   2827c:	d9801b17 	ldw	r6,108(sp)
   28280:	d8801c17 	ldw	r2,112(sp)
   28284:	d811883a 	mov	r8,sp
   28288:	31400044 	addi	r5,r6,1
   2828c:	003e3306 	br	27b5c <__alt_data_end+0xfffe7b5c>
   28290:	d9401b17 	ldw	r5,108(sp)
   28294:	d8801c17 	ldw	r2,112(sp)
   28298:	29000044 	addi	r4,r5,1
   2829c:	d8c01d87 	ldb	r3,118(sp)
   282a0:	183e4d26 	beq	r3,zero,27bd8 <__alt_data_end+0xfffe7bd8>
   282a4:	00c00044 	movi	r3,1
   282a8:	d9401d84 	addi	r5,sp,118
   282ac:	10c5883a 	add	r2,r2,r3
   282b0:	41400015 	stw	r5,0(r8)
   282b4:	40c00115 	stw	r3,4(r8)
   282b8:	d8801c15 	stw	r2,112(sp)
   282bc:	d9001b15 	stw	r4,108(sp)
   282c0:	014001c4 	movi	r5,7
   282c4:	2900a90e 	bge	r5,r4,2856c <___vfiprintf_internal_r+0xe8c>
   282c8:	1000da1e 	bne	r2,zero,28634 <___vfiprintf_internal_r+0xf54>
   282cc:	7000ab1e 	bne	r14,zero,2857c <___vfiprintf_internal_r+0xe9c>
   282d0:	000b883a 	mov	r5,zero
   282d4:	1809883a 	mov	r4,r3
   282d8:	d811883a 	mov	r8,sp
   282dc:	00c02004 	movi	r3,128
   282e0:	e0fe4d26 	beq	fp,r3,27c18 <__alt_data_end+0xfffe7c18>
   282e4:	4cf9c83a 	sub	fp,r9,r19
   282e8:	073e7b0e 	bge	zero,fp,27cd8 <__alt_data_end+0xfffe7cd8>
   282ec:	01c00404 	movi	r7,16
   282f0:	3f01900e 	bge	r7,fp,28934 <___vfiprintf_internal_r+0x1254>
   282f4:	00c000f4 	movhi	r3,3
   282f8:	18c01904 	addi	r3,r3,100
   282fc:	d8c02415 	stw	r3,144(sp)
   28300:	034001c4 	movi	r13,7
   28304:	00000506 	br	2831c <___vfiprintf_internal_r+0xc3c>
   28308:	29000084 	addi	r4,r5,2
   2830c:	42000204 	addi	r8,r8,8
   28310:	180b883a 	mov	r5,r3
   28314:	e73ffc04 	addi	fp,fp,-16
   28318:	3f000d0e 	bge	r7,fp,28350 <___vfiprintf_internal_r+0xc70>
   2831c:	10800404 	addi	r2,r2,16
   28320:	28c00044 	addi	r3,r5,1
   28324:	45c00015 	stw	r23,0(r8)
   28328:	41c00115 	stw	r7,4(r8)
   2832c:	d8801c15 	stw	r2,112(sp)
   28330:	d8c01b15 	stw	r3,108(sp)
   28334:	68fff40e 	bge	r13,r3,28308 <__alt_data_end+0xfffe8308>
   28338:	1000101e 	bne	r2,zero,2837c <___vfiprintf_internal_r+0xc9c>
   2833c:	e73ffc04 	addi	fp,fp,-16
   28340:	01000044 	movi	r4,1
   28344:	000b883a 	mov	r5,zero
   28348:	d811883a 	mov	r8,sp
   2834c:	3f3ff316 	blt	r7,fp,2831c <__alt_data_end+0xfffe831c>
   28350:	da802417 	ldw	r10,144(sp)
   28354:	1705883a 	add	r2,r2,fp
   28358:	47000115 	stw	fp,4(r8)
   2835c:	42800015 	stw	r10,0(r8)
   28360:	d8801c15 	stw	r2,112(sp)
   28364:	d9001b15 	stw	r4,108(sp)
   28368:	00c001c4 	movi	r3,7
   2836c:	19003616 	blt	r3,r4,28448 <___vfiprintf_internal_r+0xd68>
   28370:	42000204 	addi	r8,r8,8
   28374:	21000044 	addi	r4,r4,1
   28378:	003e5706 	br	27cd8 <__alt_data_end+0xfffe7cd8>
   2837c:	d9402117 	ldw	r5,132(sp)
   28380:	d9002017 	ldw	r4,128(sp)
   28384:	d9801a04 	addi	r6,sp,104
   28388:	d9c02b15 	stw	r7,172(sp)
   2838c:	db402a15 	stw	r13,168(sp)
   28390:	00275cc0 	call	275cc <__sprint_r.part.0>
   28394:	d9c02b17 	ldw	r7,172(sp)
   28398:	db402a17 	ldw	r13,168(sp)
   2839c:	1000241e 	bne	r2,zero,28430 <___vfiprintf_internal_r+0xd50>
   283a0:	d9401b17 	ldw	r5,108(sp)
   283a4:	d8801c17 	ldw	r2,112(sp)
   283a8:	d811883a 	mov	r8,sp
   283ac:	29000044 	addi	r4,r5,1
   283b0:	003fd806 	br	28314 <__alt_data_end+0xfffe8314>
   283b4:	d9401b17 	ldw	r5,108(sp)
   283b8:	00c000f4 	movhi	r3,3
   283bc:	18c01d04 	addi	r3,r3,116
   283c0:	d8c02415 	stw	r3,144(sp)
   283c4:	29400044 	addi	r5,r5,1
   283c8:	d8c02417 	ldw	r3,144(sp)
   283cc:	14c5883a 	add	r2,r2,r19
   283d0:	44c00115 	stw	r19,4(r8)
   283d4:	40c00015 	stw	r3,0(r8)
   283d8:	d8801c15 	stw	r2,112(sp)
   283dc:	d9401b15 	stw	r5,108(sp)
   283e0:	00c001c4 	movi	r3,7
   283e4:	1940070e 	bge	r3,r5,28404 <___vfiprintf_internal_r+0xd24>
   283e8:	103e4826 	beq	r2,zero,27d0c <__alt_data_end+0xfffe7d0c>
   283ec:	d9402117 	ldw	r5,132(sp)
   283f0:	d9002017 	ldw	r4,128(sp)
   283f4:	d9801a04 	addi	r6,sp,104
   283f8:	00275cc0 	call	275cc <__sprint_r.part.0>
   283fc:	10000c1e 	bne	r2,zero,28430 <___vfiprintf_internal_r+0xd50>
   28400:	d8801c17 	ldw	r2,112(sp)
   28404:	8c80010e 	bge	r17,r18,2840c <___vfiprintf_internal_r+0xd2c>
   28408:	9023883a 	mov	r17,r18
   2840c:	da802317 	ldw	r10,140(sp)
   28410:	5455883a 	add	r10,r10,r17
   28414:	da802315 	stw	r10,140(sp)
   28418:	103e4126 	beq	r2,zero,27d20 <__alt_data_end+0xfffe7d20>
   2841c:	d9402117 	ldw	r5,132(sp)
   28420:	d9002017 	ldw	r4,128(sp)
   28424:	d9801a04 	addi	r6,sp,104
   28428:	00275cc0 	call	275cc <__sprint_r.part.0>
   2842c:	103e3c26 	beq	r2,zero,27d20 <__alt_data_end+0xfffe7d20>
   28430:	dd002117 	ldw	r20,132(sp)
   28434:	a080030b 	ldhu	r2,12(r20)
   28438:	1080100c 	andi	r2,r2,64
   2843c:	1001231e 	bne	r2,zero,288cc <___vfiprintf_internal_r+0x11ec>
   28440:	d8802317 	ldw	r2,140(sp)
   28444:	003d7b06 	br	27a34 <__alt_data_end+0xfffe7a34>
   28448:	1000991e 	bne	r2,zero,286b0 <___vfiprintf_internal_r+0xfd0>
   2844c:	00c00044 	movi	r3,1
   28450:	9805883a 	mov	r2,r19
   28454:	dd400015 	stw	r21,0(sp)
   28458:	dcc00115 	stw	r19,4(sp)
   2845c:	dcc01c15 	stw	r19,112(sp)
   28460:	d8c01b15 	stw	r3,108(sp)
   28464:	d811883a 	mov	r8,sp
   28468:	42000204 	addi	r8,r8,8
   2846c:	a2c0010c 	andi	r11,r20,4
   28470:	583fe426 	beq	r11,zero,28404 <__alt_data_end+0xfffe8404>
   28474:	8ca7c83a 	sub	r19,r17,r18
   28478:	04ffe20e 	bge	zero,r19,28404 <__alt_data_end+0xfffe8404>
   2847c:	01c00404 	movi	r7,16
   28480:	3cffcc0e 	bge	r7,r19,283b4 <__alt_data_end+0xfffe83b4>
   28484:	028000f4 	movhi	r10,3
   28488:	52801d04 	addi	r10,r10,116
   2848c:	d9001b17 	ldw	r4,108(sp)
   28490:	da802415 	stw	r10,144(sp)
   28494:	382b883a 	mov	r21,r7
   28498:	050001c4 	movi	r20,7
   2849c:	df002017 	ldw	fp,128(sp)
   284a0:	00000506 	br	284b8 <___vfiprintf_internal_r+0xdd8>
   284a4:	21400084 	addi	r5,r4,2
   284a8:	42000204 	addi	r8,r8,8
   284ac:	1809883a 	mov	r4,r3
   284b0:	9cfffc04 	addi	r19,r19,-16
   284b4:	acffc40e 	bge	r21,r19,283c8 <__alt_data_end+0xfffe83c8>
   284b8:	10800404 	addi	r2,r2,16
   284bc:	20c00044 	addi	r3,r4,1
   284c0:	45800015 	stw	r22,0(r8)
   284c4:	45400115 	stw	r21,4(r8)
   284c8:	d8801c15 	stw	r2,112(sp)
   284cc:	d8c01b15 	stw	r3,108(sp)
   284d0:	a0fff40e 	bge	r20,r3,284a4 <__alt_data_end+0xfffe84a4>
   284d4:	1000041e 	bne	r2,zero,284e8 <___vfiprintf_internal_r+0xe08>
   284d8:	01400044 	movi	r5,1
   284dc:	0009883a 	mov	r4,zero
   284e0:	d811883a 	mov	r8,sp
   284e4:	003ff206 	br	284b0 <__alt_data_end+0xfffe84b0>
   284e8:	d9402117 	ldw	r5,132(sp)
   284ec:	d9801a04 	addi	r6,sp,104
   284f0:	e009883a 	mov	r4,fp
   284f4:	00275cc0 	call	275cc <__sprint_r.part.0>
   284f8:	103fcd1e 	bne	r2,zero,28430 <__alt_data_end+0xfffe8430>
   284fc:	d9001b17 	ldw	r4,108(sp)
   28500:	d8801c17 	ldw	r2,112(sp)
   28504:	d811883a 	mov	r8,sp
   28508:	21400044 	addi	r5,r4,1
   2850c:	003fe806 	br	284b0 <__alt_data_end+0xfffe84b0>
   28510:	d9402117 	ldw	r5,132(sp)
   28514:	d9002017 	ldw	r4,128(sp)
   28518:	d9801a04 	addi	r6,sp,104
   2851c:	d9c02b15 	stw	r7,172(sp)
   28520:	db402a15 	stw	r13,168(sp)
   28524:	00275cc0 	call	275cc <__sprint_r.part.0>
   28528:	d9c02b17 	ldw	r7,172(sp)
   2852c:	db402a17 	ldw	r13,168(sp)
   28530:	103fbf1e 	bne	r2,zero,28430 <__alt_data_end+0xfffe8430>
   28534:	d9401b17 	ldw	r5,108(sp)
   28538:	d8801c17 	ldw	r2,112(sp)
   2853c:	d811883a 	mov	r8,sp
   28540:	29800044 	addi	r6,r5,1
   28544:	003dc406 	br	27c58 <__alt_data_end+0xfffe7c58>
   28548:	1000d21e 	bne	r2,zero,28894 <___vfiprintf_internal_r+0x11b4>
   2854c:	d8c01d87 	ldb	r3,118(sp)
   28550:	18009526 	beq	r3,zero,287a8 <___vfiprintf_internal_r+0x10c8>
   28554:	00800044 	movi	r2,1
   28558:	d8c01d84 	addi	r3,sp,118
   2855c:	1009883a 	mov	r4,r2
   28560:	d8c00015 	stw	r3,0(sp)
   28564:	d8800115 	stw	r2,4(sp)
   28568:	d811883a 	mov	r8,sp
   2856c:	200b883a 	mov	r5,r4
   28570:	42000204 	addi	r8,r8,8
   28574:	21000044 	addi	r4,r4,1
   28578:	003d9706 	br	27bd8 <__alt_data_end+0xfffe7bd8>
   2857c:	d9001d04 	addi	r4,sp,116
   28580:	00800084 	movi	r2,2
   28584:	d9000015 	stw	r4,0(sp)
   28588:	d8800115 	stw	r2,4(sp)
   2858c:	1809883a 	mov	r4,r3
   28590:	d811883a 	mov	r8,sp
   28594:	200b883a 	mov	r5,r4
   28598:	42000204 	addi	r8,r8,8
   2859c:	21000044 	addi	r4,r4,1
   285a0:	003f4e06 	br	282dc <__alt_data_end+0xfffe82dc>
   285a4:	d8001d85 	stb	zero,118(sp)
   285a8:	48005016 	blt	r9,zero,286ec <___vfiprintf_internal_r+0x100c>
   285ac:	00ffdfc4 	movi	r3,-129
   285b0:	94c4b03a 	or	r2,r18,r19
   285b4:	a0e8703a 	and	r20,r20,r3
   285b8:	103d4426 	beq	r2,zero,27acc <__alt_data_end+0xfffe7acc>
   285bc:	0039883a 	mov	fp,zero
   285c0:	d9002617 	ldw	r4,152(sp)
   285c4:	dd401a04 	addi	r21,sp,104
   285c8:	908003cc 	andi	r2,r18,15
   285cc:	9806973a 	slli	r3,r19,28
   285d0:	2085883a 	add	r2,r4,r2
   285d4:	9024d13a 	srli	r18,r18,4
   285d8:	10800003 	ldbu	r2,0(r2)
   285dc:	9826d13a 	srli	r19,r19,4
   285e0:	ad7fffc4 	addi	r21,r21,-1
   285e4:	1ca4b03a 	or	r18,r3,r18
   285e8:	a8800005 	stb	r2,0(r21)
   285ec:	94c4b03a 	or	r2,r18,r19
   285f0:	103ff51e 	bne	r2,zero,285c8 <__alt_data_end+0xfffe85c8>
   285f4:	003e5906 	br	27f5c <__alt_data_end+0xfffe7f5c>
   285f8:	d9402117 	ldw	r5,132(sp)
   285fc:	d9002017 	ldw	r4,128(sp)
   28600:	d9801a04 	addi	r6,sp,104
   28604:	00275cc0 	call	275cc <__sprint_r.part.0>
   28608:	103f891e 	bne	r2,zero,28430 <__alt_data_end+0xfffe8430>
   2860c:	d8801c17 	ldw	r2,112(sp)
   28610:	d811883a 	mov	r8,sp
   28614:	003f9506 	br	2846c <__alt_data_end+0xfffe846c>
   28618:	d9402117 	ldw	r5,132(sp)
   2861c:	d9002017 	ldw	r4,128(sp)
   28620:	d9801a04 	addi	r6,sp,104
   28624:	00275cc0 	call	275cc <__sprint_r.part.0>
   28628:	103f811e 	bne	r2,zero,28430 <__alt_data_end+0xfffe8430>
   2862c:	d811883a 	mov	r8,sp
   28630:	003ced06 	br	279e8 <__alt_data_end+0xfffe79e8>
   28634:	d9402117 	ldw	r5,132(sp)
   28638:	d9002017 	ldw	r4,128(sp)
   2863c:	d9801a04 	addi	r6,sp,104
   28640:	da402c15 	stw	r9,176(sp)
   28644:	db802a15 	stw	r14,168(sp)
   28648:	00275cc0 	call	275cc <__sprint_r.part.0>
   2864c:	da402c17 	ldw	r9,176(sp)
   28650:	db802a17 	ldw	r14,168(sp)
   28654:	103f761e 	bne	r2,zero,28430 <__alt_data_end+0xfffe8430>
   28658:	d9401b17 	ldw	r5,108(sp)
   2865c:	d8801c17 	ldw	r2,112(sp)
   28660:	d811883a 	mov	r8,sp
   28664:	29000044 	addi	r4,r5,1
   28668:	003d5b06 	br	27bd8 <__alt_data_end+0xfffe7bd8>
   2866c:	d9402117 	ldw	r5,132(sp)
   28670:	d9002017 	ldw	r4,128(sp)
   28674:	d9801a04 	addi	r6,sp,104
   28678:	da402c15 	stw	r9,176(sp)
   2867c:	00275cc0 	call	275cc <__sprint_r.part.0>
   28680:	da402c17 	ldw	r9,176(sp)
   28684:	103f6a1e 	bne	r2,zero,28430 <__alt_data_end+0xfffe8430>
   28688:	d9401b17 	ldw	r5,108(sp)
   2868c:	d8801c17 	ldw	r2,112(sp)
   28690:	d811883a 	mov	r8,sp
   28694:	29000044 	addi	r4,r5,1
   28698:	003f1006 	br	282dc <__alt_data_end+0xfffe82dc>
   2869c:	1000c31e 	bne	r2,zero,289ac <___vfiprintf_internal_r+0x12cc>
   286a0:	01000044 	movi	r4,1
   286a4:	000b883a 	mov	r5,zero
   286a8:	d811883a 	mov	r8,sp
   286ac:	003f0d06 	br	282e4 <__alt_data_end+0xfffe82e4>
   286b0:	d9402117 	ldw	r5,132(sp)
   286b4:	d9002017 	ldw	r4,128(sp)
   286b8:	d9801a04 	addi	r6,sp,104
   286bc:	00275cc0 	call	275cc <__sprint_r.part.0>
   286c0:	103f5b1e 	bne	r2,zero,28430 <__alt_data_end+0xfffe8430>
   286c4:	d9001b17 	ldw	r4,108(sp)
   286c8:	d8801c17 	ldw	r2,112(sp)
   286cc:	d811883a 	mov	r8,sp
   286d0:	21000044 	addi	r4,r4,1
   286d4:	003d8006 	br	27cd8 <__alt_data_end+0xfffe7cd8>
   286d8:	010000f4 	movhi	r4,3
   286dc:	213fb804 	addi	r4,r4,-288
   286e0:	d9002615 	stw	r4,152(sp)
   286e4:	d8c02215 	stw	r3,136(sp)
   286e8:	1029883a 	mov	r20,r2
   286ec:	94c4b03a 	or	r2,r18,r19
   286f0:	103fb21e 	bne	r2,zero,285bc <__alt_data_end+0xfffe85bc>
   286f4:	0039883a 	mov	fp,zero
   286f8:	00800084 	movi	r2,2
   286fc:	003e6b06 	br	280ac <__alt_data_end+0xfffe80ac>
   28700:	da802217 	ldw	r10,136(sp)
   28704:	d8001d85 	stb	zero,118(sp)
   28708:	0027883a 	mov	r19,zero
   2870c:	50800104 	addi	r2,r10,4
   28710:	54800017 	ldw	r18,0(r10)
   28714:	483e6016 	blt	r9,zero,28098 <__alt_data_end+0xfffe8098>
   28718:	00ffdfc4 	movi	r3,-129
   2871c:	d8802215 	stw	r2,136(sp)
   28720:	a0e8703a 	and	r20,r20,r3
   28724:	0039883a 	mov	fp,zero
   28728:	903ebb26 	beq	r18,zero,28218 <__alt_data_end+0xfffe8218>
   2872c:	00800244 	movi	r2,9
   28730:	14bdee36 	bltu	r2,r18,27eec <__alt_data_end+0xfffe7eec>
   28734:	003eba06 	br	28220 <__alt_data_end+0xfffe8220>
   28738:	00800c04 	movi	r2,48
   2873c:	d8c01d45 	stb	r3,117(sp)
   28740:	d8801d05 	stb	r2,116(sp)
   28744:	d8001d85 	stb	zero,118(sp)
   28748:	a0c00094 	ori	r3,r20,2
   2874c:	4800a916 	blt	r9,zero,289f4 <___vfiprintf_internal_r+0x1314>
   28750:	00bfdfc4 	movi	r2,-129
   28754:	a096703a 	and	r11,r20,r2
   28758:	5d000094 	ori	r20,r11,2
   2875c:	0039883a 	mov	fp,zero
   28760:	003f9706 	br	285c0 <__alt_data_end+0xfffe85c0>
   28764:	8025883a 	mov	r18,r16
   28768:	003c2e06 	br	27824 <__alt_data_end+0xfffe7824>
   2876c:	008000f4 	movhi	r2,3
   28770:	10bfb804 	addi	r2,r2,-288
   28774:	0039883a 	mov	fp,zero
   28778:	d8802615 	stw	r2,152(sp)
   2877c:	003f9006 	br	285c0 <__alt_data_end+0xfffe85c0>
   28780:	04a5c83a 	sub	r18,zero,r18
   28784:	07000b44 	movi	fp,45
   28788:	9004c03a 	cmpne	r2,r18,zero
   2878c:	04e7c83a 	sub	r19,zero,r19
   28790:	df001d85 	stb	fp,118(sp)
   28794:	98a7c83a 	sub	r19,r19,r2
   28798:	48009f16 	blt	r9,zero,28a18 <___vfiprintf_internal_r+0x1338>
   2879c:	00bfdfc4 	movi	r2,-129
   287a0:	a0a8703a 	and	r20,r20,r2
   287a4:	003dd006 	br	27ee8 <__alt_data_end+0xfffe7ee8>
   287a8:	70004c26 	beq	r14,zero,288dc <___vfiprintf_internal_r+0x11fc>
   287ac:	00800084 	movi	r2,2
   287b0:	d8c01d04 	addi	r3,sp,116
   287b4:	d8c00015 	stw	r3,0(sp)
   287b8:	d8800115 	stw	r2,4(sp)
   287bc:	01000044 	movi	r4,1
   287c0:	d811883a 	mov	r8,sp
   287c4:	003f7306 	br	28594 <__alt_data_end+0xfffe8594>
   287c8:	a080100c 	andi	r2,r20,64
   287cc:	da802217 	ldw	r10,136(sp)
   287d0:	103e0626 	beq	r2,zero,27fec <__alt_data_end+0xfffe7fec>
   287d4:	5480000f 	ldh	r18,0(r10)
   287d8:	52800104 	addi	r10,r10,4
   287dc:	da802215 	stw	r10,136(sp)
   287e0:	9027d7fa 	srai	r19,r18,31
   287e4:	9805883a 	mov	r2,r19
   287e8:	003db806 	br	27ecc <__alt_data_end+0xfffe7ecc>
   287ec:	a080040c 	andi	r2,r20,16
   287f0:	1000091e 	bne	r2,zero,28818 <___vfiprintf_internal_r+0x1138>
   287f4:	a2c0100c 	andi	r11,r20,64
   287f8:	58000726 	beq	r11,zero,28818 <___vfiprintf_internal_r+0x1138>
   287fc:	da802217 	ldw	r10,136(sp)
   28800:	50800017 	ldw	r2,0(r10)
   28804:	52800104 	addi	r10,r10,4
   28808:	da802215 	stw	r10,136(sp)
   2880c:	da802317 	ldw	r10,140(sp)
   28810:	1280000d 	sth	r10,0(r2)
   28814:	003be706 	br	277b4 <__alt_data_end+0xfffe77b4>
   28818:	da802217 	ldw	r10,136(sp)
   2881c:	50800017 	ldw	r2,0(r10)
   28820:	52800104 	addi	r10,r10,4
   28824:	da802215 	stw	r10,136(sp)
   28828:	da802317 	ldw	r10,140(sp)
   2882c:	12800015 	stw	r10,0(r2)
   28830:	003be006 	br	277b4 <__alt_data_end+0xfffe77b4>
   28834:	a080100c 	andi	r2,r20,64
   28838:	da802217 	ldw	r10,136(sp)
   2883c:	10003026 	beq	r2,zero,28900 <___vfiprintf_internal_r+0x1220>
   28840:	5480000b 	ldhu	r18,0(r10)
   28844:	52800104 	addi	r10,r10,4
   28848:	0027883a 	mov	r19,zero
   2884c:	da802215 	stw	r10,136(sp)
   28850:	003d8006 	br	27e54 <__alt_data_end+0xfffe7e54>
   28854:	80c00007 	ldb	r3,0(r16)
   28858:	003c0006 	br	2785c <__alt_data_end+0xfffe785c>
   2885c:	a080100c 	andi	r2,r20,64
   28860:	d8001d85 	stb	zero,118(sp)
   28864:	da802217 	ldw	r10,136(sp)
   28868:	1000201e 	bne	r2,zero,288ec <___vfiprintf_internal_r+0x120c>
   2886c:	50800104 	addi	r2,r10,4
   28870:	54800017 	ldw	r18,0(r10)
   28874:	0027883a 	mov	r19,zero
   28878:	483def0e 	bge	r9,zero,28038 <__alt_data_end+0xfffe8038>
   2887c:	94c6b03a 	or	r3,r18,r19
   28880:	d8802215 	stw	r2,136(sp)
   28884:	183d4e1e 	bne	r3,zero,27dc0 <__alt_data_end+0xfffe7dc0>
   28888:	0039883a 	mov	fp,zero
   2888c:	0005883a 	mov	r2,zero
   28890:	003e0606 	br	280ac <__alt_data_end+0xfffe80ac>
   28894:	d9402117 	ldw	r5,132(sp)
   28898:	d9002017 	ldw	r4,128(sp)
   2889c:	d9801a04 	addi	r6,sp,104
   288a0:	da402c15 	stw	r9,176(sp)
   288a4:	db802a15 	stw	r14,168(sp)
   288a8:	00275cc0 	call	275cc <__sprint_r.part.0>
   288ac:	da402c17 	ldw	r9,176(sp)
   288b0:	db802a17 	ldw	r14,168(sp)
   288b4:	103ede1e 	bne	r2,zero,28430 <__alt_data_end+0xfffe8430>
   288b8:	d9401b17 	ldw	r5,108(sp)
   288bc:	d8801c17 	ldw	r2,112(sp)
   288c0:	d811883a 	mov	r8,sp
   288c4:	29000044 	addi	r4,r5,1
   288c8:	003e7406 	br	2829c <__alt_data_end+0xfffe829c>
   288cc:	00bfffc4 	movi	r2,-1
   288d0:	003c5806 	br	27a34 <__alt_data_end+0xfffe7a34>
   288d4:	d811883a 	mov	r8,sp
   288d8:	003ee806 	br	2847c <__alt_data_end+0xfffe847c>
   288dc:	000b883a 	mov	r5,zero
   288e0:	01000044 	movi	r4,1
   288e4:	d811883a 	mov	r8,sp
   288e8:	003e7c06 	br	282dc <__alt_data_end+0xfffe82dc>
   288ec:	50800104 	addi	r2,r10,4
   288f0:	5480000b 	ldhu	r18,0(r10)
   288f4:	0027883a 	mov	r19,zero
   288f8:	483dcf0e 	bge	r9,zero,28038 <__alt_data_end+0xfffe8038>
   288fc:	003fdf06 	br	2887c <__alt_data_end+0xfffe887c>
   28900:	54800017 	ldw	r18,0(r10)
   28904:	52800104 	addi	r10,r10,4
   28908:	0027883a 	mov	r19,zero
   2890c:	da802215 	stw	r10,136(sp)
   28910:	003d5006 	br	27e54 <__alt_data_end+0xfffe7e54>
   28914:	50800104 	addi	r2,r10,4
   28918:	5480000b 	ldhu	r18,0(r10)
   2891c:	0027883a 	mov	r19,zero
   28920:	483f7d0e 	bge	r9,zero,28718 <__alt_data_end+0xfffe8718>
   28924:	003ddc06 	br	28098 <__alt_data_end+0xfffe8098>
   28928:	d8c02215 	stw	r3,136(sp)
   2892c:	0039883a 	mov	fp,zero
   28930:	003ddb06 	br	280a0 <__alt_data_end+0xfffe80a0>
   28934:	028000f4 	movhi	r10,3
   28938:	52801904 	addi	r10,r10,100
   2893c:	da802415 	stw	r10,144(sp)
   28940:	003e8306 	br	28350 <__alt_data_end+0xfffe8350>
   28944:	d8801c17 	ldw	r2,112(sp)
   28948:	dd002117 	ldw	r20,132(sp)
   2894c:	103eb926 	beq	r2,zero,28434 <__alt_data_end+0xfffe8434>
   28950:	d9002017 	ldw	r4,128(sp)
   28954:	d9801a04 	addi	r6,sp,104
   28958:	a00b883a 	mov	r5,r20
   2895c:	00275cc0 	call	275cc <__sprint_r.part.0>
   28960:	003eb406 	br	28434 <__alt_data_end+0xfffe8434>
   28964:	80c00043 	ldbu	r3,1(r16)
   28968:	a5000814 	ori	r20,r20,32
   2896c:	84000044 	addi	r16,r16,1
   28970:	18c03fcc 	andi	r3,r3,255
   28974:	18c0201c 	xori	r3,r3,128
   28978:	18ffe004 	addi	r3,r3,-128
   2897c:	003bb706 	br	2785c <__alt_data_end+0xfffe785c>
   28980:	a809883a 	mov	r4,r21
   28984:	d8c02a15 	stw	r3,168(sp)
   28988:	da002b15 	stw	r8,172(sp)
   2898c:	00275340 	call	27534 <strlen>
   28990:	d8c02a17 	ldw	r3,168(sp)
   28994:	1027883a 	mov	r19,r2
   28998:	df001d83 	ldbu	fp,118(sp)
   2899c:	d8c02215 	stw	r3,136(sp)
   289a0:	0013883a 	mov	r9,zero
   289a4:	da002b17 	ldw	r8,172(sp)
   289a8:	003c4d06 	br	27ae0 <__alt_data_end+0xfffe7ae0>
   289ac:	d9402117 	ldw	r5,132(sp)
   289b0:	d9002017 	ldw	r4,128(sp)
   289b4:	d9801a04 	addi	r6,sp,104
   289b8:	da402c15 	stw	r9,176(sp)
   289bc:	00275cc0 	call	275cc <__sprint_r.part.0>
   289c0:	da402c17 	ldw	r9,176(sp)
   289c4:	103e9a1e 	bne	r2,zero,28430 <__alt_data_end+0xfffe8430>
   289c8:	d9401b17 	ldw	r5,108(sp)
   289cc:	d8801c17 	ldw	r2,112(sp)
   289d0:	d811883a 	mov	r8,sp
   289d4:	29000044 	addi	r4,r5,1
   289d8:	003e4206 	br	282e4 <__alt_data_end+0xfffe82e4>
   289dc:	d9401b17 	ldw	r5,108(sp)
   289e0:	010000f4 	movhi	r4,3
   289e4:	21001d04 	addi	r4,r4,116
   289e8:	d9002415 	stw	r4,144(sp)
   289ec:	29400044 	addi	r5,r5,1
   289f0:	003c6d06 	br	27ba8 <__alt_data_end+0xfffe7ba8>
   289f4:	0039883a 	mov	fp,zero
   289f8:	00800084 	movi	r2,2
   289fc:	10803fcc 	andi	r2,r2,255
   28a00:	01000044 	movi	r4,1
   28a04:	11001e26 	beq	r2,r4,28a80 <___vfiprintf_internal_r+0x13a0>
   28a08:	01000084 	movi	r4,2
   28a0c:	11001e1e 	bne	r2,r4,28a88 <___vfiprintf_internal_r+0x13a8>
   28a10:	1829883a 	mov	r20,r3
   28a14:	003eea06 	br	285c0 <__alt_data_end+0xfffe85c0>
   28a18:	a007883a 	mov	r3,r20
   28a1c:	00800044 	movi	r2,1
   28a20:	003ff606 	br	289fc <__alt_data_end+0xfffe89fc>
   28a24:	00800184 	movi	r2,6
   28a28:	1240012e 	bgeu	r2,r9,28a30 <___vfiprintf_internal_r+0x1350>
   28a2c:	1013883a 	mov	r9,r2
   28a30:	4827883a 	mov	r19,r9
   28a34:	4825883a 	mov	r18,r9
   28a38:	48001516 	blt	r9,zero,28a90 <___vfiprintf_internal_r+0x13b0>
   28a3c:	054000f4 	movhi	r21,3
   28a40:	d8c02215 	stw	r3,136(sp)
   28a44:	ad7fbd04 	addi	r21,r21,-268
   28a48:	003d1406 	br	27e9c <__alt_data_end+0xfffe7e9c>
   28a4c:	028000f4 	movhi	r10,3
   28a50:	52801904 	addi	r10,r10,100
   28a54:	da802415 	stw	r10,144(sp)
   28a58:	200d883a 	mov	r6,r4
   28a5c:	003c9106 	br	27ca4 <__alt_data_end+0xfffe7ca4>
   28a60:	5021883a 	mov	r16,r10
   28a64:	0013883a 	mov	r9,zero
   28a68:	003b7d06 	br	27860 <__alt_data_end+0xfffe7860>
   28a6c:	4827883a 	mov	r19,r9
   28a70:	df001d83 	ldbu	fp,118(sp)
   28a74:	d8c02215 	stw	r3,136(sp)
   28a78:	0013883a 	mov	r9,zero
   28a7c:	003c1806 	br	27ae0 <__alt_data_end+0xfffe7ae0>
   28a80:	1829883a 	mov	r20,r3
   28a84:	003d1806 	br	27ee8 <__alt_data_end+0xfffe7ee8>
   28a88:	1829883a 	mov	r20,r3
   28a8c:	003ccd06 	br	27dc4 <__alt_data_end+0xfffe7dc4>
   28a90:	0025883a 	mov	r18,zero
   28a94:	003fe906 	br	28a3c <__alt_data_end+0xfffe8a3c>
   28a98:	d8802217 	ldw	r2,136(sp)
   28a9c:	80c00043 	ldbu	r3,1(r16)
   28aa0:	5021883a 	mov	r16,r10
   28aa4:	12400017 	ldw	r9,0(r2)
   28aa8:	10800104 	addi	r2,r2,4
   28aac:	d8802215 	stw	r2,136(sp)
   28ab0:	483faf0e 	bge	r9,zero,28970 <__alt_data_end+0xfffe8970>
   28ab4:	18c03fcc 	andi	r3,r3,255
   28ab8:	18c0201c 	xori	r3,r3,128
   28abc:	027fffc4 	movi	r9,-1
   28ac0:	18ffe004 	addi	r3,r3,-128
   28ac4:	003b6506 	br	2785c <__alt_data_end+0xfffe785c>
   28ac8:	d9c01d85 	stb	r7,118(sp)
   28acc:	003ca006 	br	27d50 <__alt_data_end+0xfffe7d50>
   28ad0:	d9c01d85 	stb	r7,118(sp)
   28ad4:	003cad06 	br	27d8c <__alt_data_end+0xfffe7d8c>
   28ad8:	d9c01d85 	stb	r7,118(sp)
   28adc:	003d7d06 	br	280d4 <__alt_data_end+0xfffe80d4>
   28ae0:	d9c01d85 	stb	r7,118(sp)
   28ae4:	003d5f06 	br	28064 <__alt_data_end+0xfffe8064>
   28ae8:	a080004c 	andi	r2,r20,1
   28aec:	0039883a 	mov	fp,zero
   28af0:	10000526 	beq	r2,zero,28b08 <___vfiprintf_internal_r+0x1428>
   28af4:	00800c04 	movi	r2,48
   28af8:	d88019c5 	stb	r2,103(sp)
   28afc:	dcc02717 	ldw	r19,156(sp)
   28b00:	dd4019c4 	addi	r21,sp,103
   28b04:	003bf606 	br	27ae0 <__alt_data_end+0xfffe7ae0>
   28b08:	0027883a 	mov	r19,zero
   28b0c:	dd401a04 	addi	r21,sp,104
   28b10:	003bf306 	br	27ae0 <__alt_data_end+0xfffe7ae0>
   28b14:	d9c01d85 	stb	r7,118(sp)
   28b18:	003dc806 	br	2823c <__alt_data_end+0xfffe823c>
   28b1c:	d9c01d85 	stb	r7,118(sp)
   28b20:	003d3a06 	br	2800c <__alt_data_end+0xfffe800c>
   28b24:	d9c01d85 	stb	r7,118(sp)
   28b28:	003d2a06 	br	27fd4 <__alt_data_end+0xfffe7fd4>
   28b2c:	d9c01d85 	stb	r7,118(sp)
   28b30:	003cde06 	br	27eac <__alt_data_end+0xfffe7eac>
   28b34:	d9c01d85 	stb	r7,118(sp)
   28b38:	003cbc06 	br	27e2c <__alt_data_end+0xfffe7e2c>

00028b3c <__vfiprintf_internal>:
   28b3c:	008000f4 	movhi	r2,3
   28b40:	10871a04 	addi	r2,r2,7272
   28b44:	300f883a 	mov	r7,r6
   28b48:	280d883a 	mov	r6,r5
   28b4c:	200b883a 	mov	r5,r4
   28b50:	11000017 	ldw	r4,0(r2)
   28b54:	00276e01 	jmpi	276e0 <___vfiprintf_internal_r>

00028b58 <__sbprintf>:
   28b58:	2880030b 	ldhu	r2,12(r5)
   28b5c:	2ac01917 	ldw	r11,100(r5)
   28b60:	2a80038b 	ldhu	r10,14(r5)
   28b64:	2a400717 	ldw	r9,28(r5)
   28b68:	2a000917 	ldw	r8,36(r5)
   28b6c:	defee204 	addi	sp,sp,-1144
   28b70:	00c10004 	movi	r3,1024
   28b74:	dc011a15 	stw	r16,1128(sp)
   28b78:	10bfff4c 	andi	r2,r2,65533
   28b7c:	2821883a 	mov	r16,r5
   28b80:	d8cb883a 	add	r5,sp,r3
   28b84:	dc811c15 	stw	r18,1136(sp)
   28b88:	dc411b15 	stw	r17,1132(sp)
   28b8c:	dfc11d15 	stw	ra,1140(sp)
   28b90:	2025883a 	mov	r18,r4
   28b94:	d881030d 	sth	r2,1036(sp)
   28b98:	dac11915 	stw	r11,1124(sp)
   28b9c:	da81038d 	sth	r10,1038(sp)
   28ba0:	da410715 	stw	r9,1052(sp)
   28ba4:	da010915 	stw	r8,1060(sp)
   28ba8:	dec10015 	stw	sp,1024(sp)
   28bac:	dec10415 	stw	sp,1040(sp)
   28bb0:	d8c10215 	stw	r3,1032(sp)
   28bb4:	d8c10515 	stw	r3,1044(sp)
   28bb8:	d8010615 	stw	zero,1048(sp)
   28bbc:	00276e00 	call	276e0 <___vfiprintf_internal_r>
   28bc0:	1023883a 	mov	r17,r2
   28bc4:	10000416 	blt	r2,zero,28bd8 <__sbprintf+0x80>
   28bc8:	d9410004 	addi	r5,sp,1024
   28bcc:	9009883a 	mov	r4,r18
   28bd0:	0024a780 	call	24a78 <_fflush_r>
   28bd4:	10000d1e 	bne	r2,zero,28c0c <__sbprintf+0xb4>
   28bd8:	d881030b 	ldhu	r2,1036(sp)
   28bdc:	1080100c 	andi	r2,r2,64
   28be0:	10000326 	beq	r2,zero,28bf0 <__sbprintf+0x98>
   28be4:	8080030b 	ldhu	r2,12(r16)
   28be8:	10801014 	ori	r2,r2,64
   28bec:	8080030d 	sth	r2,12(r16)
   28bf0:	8805883a 	mov	r2,r17
   28bf4:	dfc11d17 	ldw	ra,1140(sp)
   28bf8:	dc811c17 	ldw	r18,1136(sp)
   28bfc:	dc411b17 	ldw	r17,1132(sp)
   28c00:	dc011a17 	ldw	r16,1128(sp)
   28c04:	dec11e04 	addi	sp,sp,1144
   28c08:	f800283a 	ret
   28c0c:	047fffc4 	movi	r17,-1
   28c10:	003ff106 	br	28bd8 <__alt_data_end+0xfffe8bd8>

00028c14 <_write_r>:
   28c14:	defffd04 	addi	sp,sp,-12
   28c18:	2805883a 	mov	r2,r5
   28c1c:	dc000015 	stw	r16,0(sp)
   28c20:	040000f4 	movhi	r16,3
   28c24:	dc400115 	stw	r17,4(sp)
   28c28:	300b883a 	mov	r5,r6
   28c2c:	840ded04 	addi	r16,r16,14260
   28c30:	2023883a 	mov	r17,r4
   28c34:	380d883a 	mov	r6,r7
   28c38:	1009883a 	mov	r4,r2
   28c3c:	dfc00215 	stw	ra,8(sp)
   28c40:	80000015 	stw	zero,0(r16)
   28c44:	002df300 	call	2df30 <write>
   28c48:	00ffffc4 	movi	r3,-1
   28c4c:	10c00526 	beq	r2,r3,28c64 <_write_r+0x50>
   28c50:	dfc00217 	ldw	ra,8(sp)
   28c54:	dc400117 	ldw	r17,4(sp)
   28c58:	dc000017 	ldw	r16,0(sp)
   28c5c:	dec00304 	addi	sp,sp,12
   28c60:	f800283a 	ret
   28c64:	80c00017 	ldw	r3,0(r16)
   28c68:	183ff926 	beq	r3,zero,28c50 <__alt_data_end+0xfffe8c50>
   28c6c:	88c00015 	stw	r3,0(r17)
   28c70:	003ff706 	br	28c50 <__alt_data_end+0xfffe8c50>

00028c74 <_close_r>:
   28c74:	defffd04 	addi	sp,sp,-12
   28c78:	dc000015 	stw	r16,0(sp)
   28c7c:	040000f4 	movhi	r16,3
   28c80:	dc400115 	stw	r17,4(sp)
   28c84:	840ded04 	addi	r16,r16,14260
   28c88:	2023883a 	mov	r17,r4
   28c8c:	2809883a 	mov	r4,r5
   28c90:	dfc00215 	stw	ra,8(sp)
   28c94:	80000015 	stw	zero,0(r16)
   28c98:	002d2180 	call	2d218 <close>
   28c9c:	00ffffc4 	movi	r3,-1
   28ca0:	10c00526 	beq	r2,r3,28cb8 <_close_r+0x44>
   28ca4:	dfc00217 	ldw	ra,8(sp)
   28ca8:	dc400117 	ldw	r17,4(sp)
   28cac:	dc000017 	ldw	r16,0(sp)
   28cb0:	dec00304 	addi	sp,sp,12
   28cb4:	f800283a 	ret
   28cb8:	80c00017 	ldw	r3,0(r16)
   28cbc:	183ff926 	beq	r3,zero,28ca4 <__alt_data_end+0xfffe8ca4>
   28cc0:	88c00015 	stw	r3,0(r17)
   28cc4:	003ff706 	br	28ca4 <__alt_data_end+0xfffe8ca4>

00028cc8 <_calloc_r>:
   28cc8:	298b383a 	mul	r5,r5,r6
   28ccc:	defffe04 	addi	sp,sp,-8
   28cd0:	dfc00115 	stw	ra,4(sp)
   28cd4:	dc000015 	stw	r16,0(sp)
   28cd8:	00256f80 	call	256f8 <_malloc_r>
   28cdc:	10002926 	beq	r2,zero,28d84 <_calloc_r+0xbc>
   28ce0:	11bfff17 	ldw	r6,-4(r2)
   28ce4:	1021883a 	mov	r16,r2
   28ce8:	00bfff04 	movi	r2,-4
   28cec:	308c703a 	and	r6,r6,r2
   28cf0:	00c00904 	movi	r3,36
   28cf4:	308d883a 	add	r6,r6,r2
   28cf8:	19801636 	bltu	r3,r6,28d54 <_calloc_r+0x8c>
   28cfc:	008004c4 	movi	r2,19
   28d00:	11800b2e 	bgeu	r2,r6,28d30 <_calloc_r+0x68>
   28d04:	80000015 	stw	zero,0(r16)
   28d08:	80000115 	stw	zero,4(r16)
   28d0c:	008006c4 	movi	r2,27
   28d10:	11801a2e 	bgeu	r2,r6,28d7c <_calloc_r+0xb4>
   28d14:	80000215 	stw	zero,8(r16)
   28d18:	80000315 	stw	zero,12(r16)
   28d1c:	30c0151e 	bne	r6,r3,28d74 <_calloc_r+0xac>
   28d20:	80000415 	stw	zero,16(r16)
   28d24:	80800604 	addi	r2,r16,24
   28d28:	80000515 	stw	zero,20(r16)
   28d2c:	00000106 	br	28d34 <_calloc_r+0x6c>
   28d30:	8005883a 	mov	r2,r16
   28d34:	10000015 	stw	zero,0(r2)
   28d38:	10000115 	stw	zero,4(r2)
   28d3c:	10000215 	stw	zero,8(r2)
   28d40:	8005883a 	mov	r2,r16
   28d44:	dfc00117 	ldw	ra,4(sp)
   28d48:	dc000017 	ldw	r16,0(sp)
   28d4c:	dec00204 	addi	sp,sp,8
   28d50:	f800283a 	ret
   28d54:	000b883a 	mov	r5,zero
   28d58:	8009883a 	mov	r4,r16
   28d5c:	00261300 	call	26130 <memset>
   28d60:	8005883a 	mov	r2,r16
   28d64:	dfc00117 	ldw	ra,4(sp)
   28d68:	dc000017 	ldw	r16,0(sp)
   28d6c:	dec00204 	addi	sp,sp,8
   28d70:	f800283a 	ret
   28d74:	80800404 	addi	r2,r16,16
   28d78:	003fee06 	br	28d34 <__alt_data_end+0xfffe8d34>
   28d7c:	80800204 	addi	r2,r16,8
   28d80:	003fec06 	br	28d34 <__alt_data_end+0xfffe8d34>
   28d84:	0005883a 	mov	r2,zero
   28d88:	003fee06 	br	28d44 <__alt_data_end+0xfffe8d44>

00028d8c <_fclose_r>:
   28d8c:	28003926 	beq	r5,zero,28e74 <_fclose_r+0xe8>
   28d90:	defffc04 	addi	sp,sp,-16
   28d94:	dc400115 	stw	r17,4(sp)
   28d98:	dc000015 	stw	r16,0(sp)
   28d9c:	dfc00315 	stw	ra,12(sp)
   28da0:	dc800215 	stw	r18,8(sp)
   28da4:	2023883a 	mov	r17,r4
   28da8:	2821883a 	mov	r16,r5
   28dac:	20000226 	beq	r4,zero,28db8 <_fclose_r+0x2c>
   28db0:	20800e17 	ldw	r2,56(r4)
   28db4:	10002726 	beq	r2,zero,28e54 <_fclose_r+0xc8>
   28db8:	8080030f 	ldh	r2,12(r16)
   28dbc:	1000071e 	bne	r2,zero,28ddc <_fclose_r+0x50>
   28dc0:	0005883a 	mov	r2,zero
   28dc4:	dfc00317 	ldw	ra,12(sp)
   28dc8:	dc800217 	ldw	r18,8(sp)
   28dcc:	dc400117 	ldw	r17,4(sp)
   28dd0:	dc000017 	ldw	r16,0(sp)
   28dd4:	dec00404 	addi	sp,sp,16
   28dd8:	f800283a 	ret
   28ddc:	800b883a 	mov	r5,r16
   28de0:	8809883a 	mov	r4,r17
   28de4:	002485c0 	call	2485c <__sflush_r>
   28de8:	1025883a 	mov	r18,r2
   28dec:	80800b17 	ldw	r2,44(r16)
   28df0:	10000426 	beq	r2,zero,28e04 <_fclose_r+0x78>
   28df4:	81400717 	ldw	r5,28(r16)
   28df8:	8809883a 	mov	r4,r17
   28dfc:	103ee83a 	callr	r2
   28e00:	10001616 	blt	r2,zero,28e5c <_fclose_r+0xd0>
   28e04:	8080030b 	ldhu	r2,12(r16)
   28e08:	1080200c 	andi	r2,r2,128
   28e0c:	1000151e 	bne	r2,zero,28e64 <_fclose_r+0xd8>
   28e10:	81400c17 	ldw	r5,48(r16)
   28e14:	28000526 	beq	r5,zero,28e2c <_fclose_r+0xa0>
   28e18:	80801004 	addi	r2,r16,64
   28e1c:	28800226 	beq	r5,r2,28e28 <_fclose_r+0x9c>
   28e20:	8809883a 	mov	r4,r17
   28e24:	0024fc80 	call	24fc8 <_free_r>
   28e28:	80000c15 	stw	zero,48(r16)
   28e2c:	81401117 	ldw	r5,68(r16)
   28e30:	28000326 	beq	r5,zero,28e40 <_fclose_r+0xb4>
   28e34:	8809883a 	mov	r4,r17
   28e38:	0024fc80 	call	24fc8 <_free_r>
   28e3c:	80001115 	stw	zero,68(r16)
   28e40:	0024e640 	call	24e64 <__sfp_lock_acquire>
   28e44:	8000030d 	sth	zero,12(r16)
   28e48:	0024e680 	call	24e68 <__sfp_lock_release>
   28e4c:	9005883a 	mov	r2,r18
   28e50:	003fdc06 	br	28dc4 <__alt_data_end+0xfffe8dc4>
   28e54:	0024e540 	call	24e54 <__sinit>
   28e58:	003fd706 	br	28db8 <__alt_data_end+0xfffe8db8>
   28e5c:	04bfffc4 	movi	r18,-1
   28e60:	003fe806 	br	28e04 <__alt_data_end+0xfffe8e04>
   28e64:	81400417 	ldw	r5,16(r16)
   28e68:	8809883a 	mov	r4,r17
   28e6c:	0024fc80 	call	24fc8 <_free_r>
   28e70:	003fe706 	br	28e10 <__alt_data_end+0xfffe8e10>
   28e74:	0005883a 	mov	r2,zero
   28e78:	f800283a 	ret

00028e7c <fclose>:
   28e7c:	008000f4 	movhi	r2,3
   28e80:	10871a04 	addi	r2,r2,7272
   28e84:	200b883a 	mov	r5,r4
   28e88:	11000017 	ldw	r4,0(r2)
   28e8c:	0028d8c1 	jmpi	28d8c <_fclose_r>

00028e90 <__fputwc>:
   28e90:	defff804 	addi	sp,sp,-32
   28e94:	dcc00415 	stw	r19,16(sp)
   28e98:	dc800315 	stw	r18,12(sp)
   28e9c:	dc000115 	stw	r16,4(sp)
   28ea0:	dfc00715 	stw	ra,28(sp)
   28ea4:	dd400615 	stw	r21,24(sp)
   28ea8:	dd000515 	stw	r20,20(sp)
   28eac:	dc400215 	stw	r17,8(sp)
   28eb0:	2027883a 	mov	r19,r4
   28eb4:	2825883a 	mov	r18,r5
   28eb8:	3021883a 	mov	r16,r6
   28ebc:	00254e80 	call	254e8 <__locale_mb_cur_max>
   28ec0:	00c00044 	movi	r3,1
   28ec4:	10c03e26 	beq	r2,r3,28fc0 <__fputwc+0x130>
   28ec8:	81c01704 	addi	r7,r16,92
   28ecc:	900d883a 	mov	r6,r18
   28ed0:	d80b883a 	mov	r5,sp
   28ed4:	9809883a 	mov	r4,r19
   28ed8:	0029edc0 	call	29edc <_wcrtomb_r>
   28edc:	1029883a 	mov	r20,r2
   28ee0:	00bfffc4 	movi	r2,-1
   28ee4:	a0802026 	beq	r20,r2,28f68 <__fputwc+0xd8>
   28ee8:	d9400003 	ldbu	r5,0(sp)
   28eec:	a0001c26 	beq	r20,zero,28f60 <__fputwc+0xd0>
   28ef0:	0023883a 	mov	r17,zero
   28ef4:	05400284 	movi	r21,10
   28ef8:	00000906 	br	28f20 <__fputwc+0x90>
   28efc:	80800017 	ldw	r2,0(r16)
   28f00:	11400005 	stb	r5,0(r2)
   28f04:	80c00017 	ldw	r3,0(r16)
   28f08:	18c00044 	addi	r3,r3,1
   28f0c:	80c00015 	stw	r3,0(r16)
   28f10:	8c400044 	addi	r17,r17,1
   28f14:	dc45883a 	add	r2,sp,r17
   28f18:	8d00112e 	bgeu	r17,r20,28f60 <__fputwc+0xd0>
   28f1c:	11400003 	ldbu	r5,0(r2)
   28f20:	80c00217 	ldw	r3,8(r16)
   28f24:	18ffffc4 	addi	r3,r3,-1
   28f28:	80c00215 	stw	r3,8(r16)
   28f2c:	183ff30e 	bge	r3,zero,28efc <__alt_data_end+0xfffe8efc>
   28f30:	80800617 	ldw	r2,24(r16)
   28f34:	18801916 	blt	r3,r2,28f9c <__fputwc+0x10c>
   28f38:	80800017 	ldw	r2,0(r16)
   28f3c:	11400005 	stb	r5,0(r2)
   28f40:	80800017 	ldw	r2,0(r16)
   28f44:	10c00003 	ldbu	r3,0(r2)
   28f48:	10800044 	addi	r2,r2,1
   28f4c:	1d402326 	beq	r3,r21,28fdc <__fputwc+0x14c>
   28f50:	80800015 	stw	r2,0(r16)
   28f54:	8c400044 	addi	r17,r17,1
   28f58:	dc45883a 	add	r2,sp,r17
   28f5c:	8d3fef36 	bltu	r17,r20,28f1c <__alt_data_end+0xfffe8f1c>
   28f60:	9005883a 	mov	r2,r18
   28f64:	00000406 	br	28f78 <__fputwc+0xe8>
   28f68:	80c0030b 	ldhu	r3,12(r16)
   28f6c:	a005883a 	mov	r2,r20
   28f70:	18c01014 	ori	r3,r3,64
   28f74:	80c0030d 	sth	r3,12(r16)
   28f78:	dfc00717 	ldw	ra,28(sp)
   28f7c:	dd400617 	ldw	r21,24(sp)
   28f80:	dd000517 	ldw	r20,20(sp)
   28f84:	dcc00417 	ldw	r19,16(sp)
   28f88:	dc800317 	ldw	r18,12(sp)
   28f8c:	dc400217 	ldw	r17,8(sp)
   28f90:	dc000117 	ldw	r16,4(sp)
   28f94:	dec00804 	addi	sp,sp,32
   28f98:	f800283a 	ret
   28f9c:	800d883a 	mov	r6,r16
   28fa0:	29403fcc 	andi	r5,r5,255
   28fa4:	9809883a 	mov	r4,r19
   28fa8:	0029d840 	call	29d84 <__swbuf_r>
   28fac:	10bfffe0 	cmpeqi	r2,r2,-1
   28fb0:	10803fcc 	andi	r2,r2,255
   28fb4:	103fd626 	beq	r2,zero,28f10 <__alt_data_end+0xfffe8f10>
   28fb8:	00bfffc4 	movi	r2,-1
   28fbc:	003fee06 	br	28f78 <__alt_data_end+0xfffe8f78>
   28fc0:	90ffffc4 	addi	r3,r18,-1
   28fc4:	01003f84 	movi	r4,254
   28fc8:	20ffbf36 	bltu	r4,r3,28ec8 <__alt_data_end+0xfffe8ec8>
   28fcc:	900b883a 	mov	r5,r18
   28fd0:	dc800005 	stb	r18,0(sp)
   28fd4:	1029883a 	mov	r20,r2
   28fd8:	003fc506 	br	28ef0 <__alt_data_end+0xfffe8ef0>
   28fdc:	800d883a 	mov	r6,r16
   28fe0:	a80b883a 	mov	r5,r21
   28fe4:	9809883a 	mov	r4,r19
   28fe8:	0029d840 	call	29d84 <__swbuf_r>
   28fec:	10bfffe0 	cmpeqi	r2,r2,-1
   28ff0:	003fef06 	br	28fb0 <__alt_data_end+0xfffe8fb0>

00028ff4 <_fputwc_r>:
   28ff4:	3080030b 	ldhu	r2,12(r6)
   28ff8:	10c8000c 	andi	r3,r2,8192
   28ffc:	1800051e 	bne	r3,zero,29014 <_fputwc_r+0x20>
   29000:	30c01917 	ldw	r3,100(r6)
   29004:	10880014 	ori	r2,r2,8192
   29008:	3080030d 	sth	r2,12(r6)
   2900c:	18880014 	ori	r2,r3,8192
   29010:	30801915 	stw	r2,100(r6)
   29014:	0028e901 	jmpi	28e90 <__fputwc>

00029018 <fputwc>:
   29018:	008000f4 	movhi	r2,3
   2901c:	defffc04 	addi	sp,sp,-16
   29020:	10871a04 	addi	r2,r2,7272
   29024:	dc000115 	stw	r16,4(sp)
   29028:	14000017 	ldw	r16,0(r2)
   2902c:	dc400215 	stw	r17,8(sp)
   29030:	dfc00315 	stw	ra,12(sp)
   29034:	2023883a 	mov	r17,r4
   29038:	80000226 	beq	r16,zero,29044 <fputwc+0x2c>
   2903c:	80800e17 	ldw	r2,56(r16)
   29040:	10001026 	beq	r2,zero,29084 <fputwc+0x6c>
   29044:	2880030b 	ldhu	r2,12(r5)
   29048:	10c8000c 	andi	r3,r2,8192
   2904c:	1800051e 	bne	r3,zero,29064 <fputwc+0x4c>
   29050:	28c01917 	ldw	r3,100(r5)
   29054:	10880014 	ori	r2,r2,8192
   29058:	2880030d 	sth	r2,12(r5)
   2905c:	18880014 	ori	r2,r3,8192
   29060:	28801915 	stw	r2,100(r5)
   29064:	280d883a 	mov	r6,r5
   29068:	8009883a 	mov	r4,r16
   2906c:	880b883a 	mov	r5,r17
   29070:	dfc00317 	ldw	ra,12(sp)
   29074:	dc400217 	ldw	r17,8(sp)
   29078:	dc000117 	ldw	r16,4(sp)
   2907c:	dec00404 	addi	sp,sp,16
   29080:	0028e901 	jmpi	28e90 <__fputwc>
   29084:	8009883a 	mov	r4,r16
   29088:	d9400015 	stw	r5,0(sp)
   2908c:	0024e540 	call	24e54 <__sinit>
   29090:	d9400017 	ldw	r5,0(sp)
   29094:	003feb06 	br	29044 <__alt_data_end+0xfffe9044>

00029098 <_fstat_r>:
   29098:	defffd04 	addi	sp,sp,-12
   2909c:	2805883a 	mov	r2,r5
   290a0:	dc000015 	stw	r16,0(sp)
   290a4:	040000f4 	movhi	r16,3
   290a8:	dc400115 	stw	r17,4(sp)
   290ac:	840ded04 	addi	r16,r16,14260
   290b0:	2023883a 	mov	r17,r4
   290b4:	300b883a 	mov	r5,r6
   290b8:	1009883a 	mov	r4,r2
   290bc:	dfc00215 	stw	ra,8(sp)
   290c0:	80000015 	stw	zero,0(r16)
   290c4:	002d3500 	call	2d350 <fstat>
   290c8:	00ffffc4 	movi	r3,-1
   290cc:	10c00526 	beq	r2,r3,290e4 <_fstat_r+0x4c>
   290d0:	dfc00217 	ldw	ra,8(sp)
   290d4:	dc400117 	ldw	r17,4(sp)
   290d8:	dc000017 	ldw	r16,0(sp)
   290dc:	dec00304 	addi	sp,sp,12
   290e0:	f800283a 	ret
   290e4:	80c00017 	ldw	r3,0(r16)
   290e8:	183ff926 	beq	r3,zero,290d0 <__alt_data_end+0xfffe90d0>
   290ec:	88c00015 	stw	r3,0(r17)
   290f0:	003ff706 	br	290d0 <__alt_data_end+0xfffe90d0>

000290f4 <__sfvwrite_r>:
   290f4:	30800217 	ldw	r2,8(r6)
   290f8:	10006726 	beq	r2,zero,29298 <__sfvwrite_r+0x1a4>
   290fc:	28c0030b 	ldhu	r3,12(r5)
   29100:	defff404 	addi	sp,sp,-48
   29104:	dd400715 	stw	r21,28(sp)
   29108:	dd000615 	stw	r20,24(sp)
   2910c:	dc000215 	stw	r16,8(sp)
   29110:	dfc00b15 	stw	ra,44(sp)
   29114:	df000a15 	stw	fp,40(sp)
   29118:	ddc00915 	stw	r23,36(sp)
   2911c:	dd800815 	stw	r22,32(sp)
   29120:	dcc00515 	stw	r19,20(sp)
   29124:	dc800415 	stw	r18,16(sp)
   29128:	dc400315 	stw	r17,12(sp)
   2912c:	1880020c 	andi	r2,r3,8
   29130:	2821883a 	mov	r16,r5
   29134:	202b883a 	mov	r21,r4
   29138:	3029883a 	mov	r20,r6
   2913c:	10002726 	beq	r2,zero,291dc <__sfvwrite_r+0xe8>
   29140:	28800417 	ldw	r2,16(r5)
   29144:	10002526 	beq	r2,zero,291dc <__sfvwrite_r+0xe8>
   29148:	1880008c 	andi	r2,r3,2
   2914c:	a4400017 	ldw	r17,0(r20)
   29150:	10002a26 	beq	r2,zero,291fc <__sfvwrite_r+0x108>
   29154:	05a00034 	movhi	r22,32768
   29158:	0027883a 	mov	r19,zero
   2915c:	0025883a 	mov	r18,zero
   29160:	b5bf0004 	addi	r22,r22,-1024
   29164:	980d883a 	mov	r6,r19
   29168:	a809883a 	mov	r4,r21
   2916c:	90004626 	beq	r18,zero,29288 <__sfvwrite_r+0x194>
   29170:	900f883a 	mov	r7,r18
   29174:	b480022e 	bgeu	r22,r18,29180 <__sfvwrite_r+0x8c>
   29178:	01e00034 	movhi	r7,32768
   2917c:	39ff0004 	addi	r7,r7,-1024
   29180:	80800917 	ldw	r2,36(r16)
   29184:	81400717 	ldw	r5,28(r16)
   29188:	103ee83a 	callr	r2
   2918c:	0080570e 	bge	zero,r2,292ec <__sfvwrite_r+0x1f8>
   29190:	a0c00217 	ldw	r3,8(r20)
   29194:	98a7883a 	add	r19,r19,r2
   29198:	90a5c83a 	sub	r18,r18,r2
   2919c:	1885c83a 	sub	r2,r3,r2
   291a0:	a0800215 	stw	r2,8(r20)
   291a4:	103fef1e 	bne	r2,zero,29164 <__alt_data_end+0xfffe9164>
   291a8:	0005883a 	mov	r2,zero
   291ac:	dfc00b17 	ldw	ra,44(sp)
   291b0:	df000a17 	ldw	fp,40(sp)
   291b4:	ddc00917 	ldw	r23,36(sp)
   291b8:	dd800817 	ldw	r22,32(sp)
   291bc:	dd400717 	ldw	r21,28(sp)
   291c0:	dd000617 	ldw	r20,24(sp)
   291c4:	dcc00517 	ldw	r19,20(sp)
   291c8:	dc800417 	ldw	r18,16(sp)
   291cc:	dc400317 	ldw	r17,12(sp)
   291d0:	dc000217 	ldw	r16,8(sp)
   291d4:	dec00c04 	addi	sp,sp,48
   291d8:	f800283a 	ret
   291dc:	800b883a 	mov	r5,r16
   291e0:	a809883a 	mov	r4,r21
   291e4:	0022e800 	call	22e80 <__swsetup_r>
   291e8:	1000eb1e 	bne	r2,zero,29598 <__sfvwrite_r+0x4a4>
   291ec:	80c0030b 	ldhu	r3,12(r16)
   291f0:	a4400017 	ldw	r17,0(r20)
   291f4:	1880008c 	andi	r2,r3,2
   291f8:	103fd61e 	bne	r2,zero,29154 <__alt_data_end+0xfffe9154>
   291fc:	1880004c 	andi	r2,r3,1
   29200:	10003f1e 	bne	r2,zero,29300 <__sfvwrite_r+0x20c>
   29204:	0039883a 	mov	fp,zero
   29208:	0025883a 	mov	r18,zero
   2920c:	90001a26 	beq	r18,zero,29278 <__sfvwrite_r+0x184>
   29210:	1880800c 	andi	r2,r3,512
   29214:	84c00217 	ldw	r19,8(r16)
   29218:	10002126 	beq	r2,zero,292a0 <__sfvwrite_r+0x1ac>
   2921c:	982f883a 	mov	r23,r19
   29220:	94c09336 	bltu	r18,r19,29470 <__sfvwrite_r+0x37c>
   29224:	1881200c 	andi	r2,r3,1152
   29228:	10009e1e 	bne	r2,zero,294a4 <__sfvwrite_r+0x3b0>
   2922c:	81000017 	ldw	r4,0(r16)
   29230:	b80d883a 	mov	r6,r23
   29234:	e00b883a 	mov	r5,fp
   29238:	00296640 	call	29664 <memmove>
   2923c:	80c00217 	ldw	r3,8(r16)
   29240:	81000017 	ldw	r4,0(r16)
   29244:	9005883a 	mov	r2,r18
   29248:	1ce7c83a 	sub	r19,r3,r19
   2924c:	25cf883a 	add	r7,r4,r23
   29250:	84c00215 	stw	r19,8(r16)
   29254:	81c00015 	stw	r7,0(r16)
   29258:	a0c00217 	ldw	r3,8(r20)
   2925c:	e0b9883a 	add	fp,fp,r2
   29260:	90a5c83a 	sub	r18,r18,r2
   29264:	18a7c83a 	sub	r19,r3,r2
   29268:	a4c00215 	stw	r19,8(r20)
   2926c:	983fce26 	beq	r19,zero,291a8 <__alt_data_end+0xfffe91a8>
   29270:	80c0030b 	ldhu	r3,12(r16)
   29274:	903fe61e 	bne	r18,zero,29210 <__alt_data_end+0xfffe9210>
   29278:	8f000017 	ldw	fp,0(r17)
   2927c:	8c800117 	ldw	r18,4(r17)
   29280:	8c400204 	addi	r17,r17,8
   29284:	003fe106 	br	2920c <__alt_data_end+0xfffe920c>
   29288:	8cc00017 	ldw	r19,0(r17)
   2928c:	8c800117 	ldw	r18,4(r17)
   29290:	8c400204 	addi	r17,r17,8
   29294:	003fb306 	br	29164 <__alt_data_end+0xfffe9164>
   29298:	0005883a 	mov	r2,zero
   2929c:	f800283a 	ret
   292a0:	81000017 	ldw	r4,0(r16)
   292a4:	80800417 	ldw	r2,16(r16)
   292a8:	11005736 	bltu	r2,r4,29408 <__sfvwrite_r+0x314>
   292ac:	85c00517 	ldw	r23,20(r16)
   292b0:	95c05536 	bltu	r18,r23,29408 <__sfvwrite_r+0x314>
   292b4:	00a00034 	movhi	r2,32768
   292b8:	10bfffc4 	addi	r2,r2,-1
   292bc:	9009883a 	mov	r4,r18
   292c0:	1480012e 	bgeu	r2,r18,292c8 <__sfvwrite_r+0x1d4>
   292c4:	1009883a 	mov	r4,r2
   292c8:	b80b883a 	mov	r5,r23
   292cc:	00209900 	call	20990 <__divsi3>
   292d0:	15cf383a 	mul	r7,r2,r23
   292d4:	81400717 	ldw	r5,28(r16)
   292d8:	80800917 	ldw	r2,36(r16)
   292dc:	e00d883a 	mov	r6,fp
   292e0:	a809883a 	mov	r4,r21
   292e4:	103ee83a 	callr	r2
   292e8:	00bfdb16 	blt	zero,r2,29258 <__alt_data_end+0xfffe9258>
   292ec:	8080030b 	ldhu	r2,12(r16)
   292f0:	10801014 	ori	r2,r2,64
   292f4:	8080030d 	sth	r2,12(r16)
   292f8:	00bfffc4 	movi	r2,-1
   292fc:	003fab06 	br	291ac <__alt_data_end+0xfffe91ac>
   29300:	0027883a 	mov	r19,zero
   29304:	0011883a 	mov	r8,zero
   29308:	0039883a 	mov	fp,zero
   2930c:	0025883a 	mov	r18,zero
   29310:	90001f26 	beq	r18,zero,29390 <__sfvwrite_r+0x29c>
   29314:	40005a26 	beq	r8,zero,29480 <__sfvwrite_r+0x38c>
   29318:	982d883a 	mov	r22,r19
   2931c:	94c0012e 	bgeu	r18,r19,29324 <__sfvwrite_r+0x230>
   29320:	902d883a 	mov	r22,r18
   29324:	81000017 	ldw	r4,0(r16)
   29328:	80800417 	ldw	r2,16(r16)
   2932c:	b02f883a 	mov	r23,r22
   29330:	81c00517 	ldw	r7,20(r16)
   29334:	1100032e 	bgeu	r2,r4,29344 <__sfvwrite_r+0x250>
   29338:	80c00217 	ldw	r3,8(r16)
   2933c:	38c7883a 	add	r3,r7,r3
   29340:	1d801816 	blt	r3,r22,293a4 <__sfvwrite_r+0x2b0>
   29344:	b1c03e16 	blt	r22,r7,29440 <__sfvwrite_r+0x34c>
   29348:	80800917 	ldw	r2,36(r16)
   2934c:	81400717 	ldw	r5,28(r16)
   29350:	e00d883a 	mov	r6,fp
   29354:	da000115 	stw	r8,4(sp)
   29358:	a809883a 	mov	r4,r21
   2935c:	103ee83a 	callr	r2
   29360:	102f883a 	mov	r23,r2
   29364:	da000117 	ldw	r8,4(sp)
   29368:	00bfe00e 	bge	zero,r2,292ec <__alt_data_end+0xfffe92ec>
   2936c:	9de7c83a 	sub	r19,r19,r23
   29370:	98001f26 	beq	r19,zero,293f0 <__sfvwrite_r+0x2fc>
   29374:	a0800217 	ldw	r2,8(r20)
   29378:	e5f9883a 	add	fp,fp,r23
   2937c:	95e5c83a 	sub	r18,r18,r23
   29380:	15efc83a 	sub	r23,r2,r23
   29384:	a5c00215 	stw	r23,8(r20)
   29388:	b83f8726 	beq	r23,zero,291a8 <__alt_data_end+0xfffe91a8>
   2938c:	903fe11e 	bne	r18,zero,29314 <__alt_data_end+0xfffe9314>
   29390:	8f000017 	ldw	fp,0(r17)
   29394:	8c800117 	ldw	r18,4(r17)
   29398:	0011883a 	mov	r8,zero
   2939c:	8c400204 	addi	r17,r17,8
   293a0:	003fdb06 	br	29310 <__alt_data_end+0xfffe9310>
   293a4:	180d883a 	mov	r6,r3
   293a8:	e00b883a 	mov	r5,fp
   293ac:	da000115 	stw	r8,4(sp)
   293b0:	d8c00015 	stw	r3,0(sp)
   293b4:	00296640 	call	29664 <memmove>
   293b8:	d8c00017 	ldw	r3,0(sp)
   293bc:	80800017 	ldw	r2,0(r16)
   293c0:	800b883a 	mov	r5,r16
   293c4:	a809883a 	mov	r4,r21
   293c8:	10c5883a 	add	r2,r2,r3
   293cc:	80800015 	stw	r2,0(r16)
   293d0:	d8c00015 	stw	r3,0(sp)
   293d4:	0024a780 	call	24a78 <_fflush_r>
   293d8:	d8c00017 	ldw	r3,0(sp)
   293dc:	da000117 	ldw	r8,4(sp)
   293e0:	103fc21e 	bne	r2,zero,292ec <__alt_data_end+0xfffe92ec>
   293e4:	182f883a 	mov	r23,r3
   293e8:	9de7c83a 	sub	r19,r19,r23
   293ec:	983fe11e 	bne	r19,zero,29374 <__alt_data_end+0xfffe9374>
   293f0:	800b883a 	mov	r5,r16
   293f4:	a809883a 	mov	r4,r21
   293f8:	0024a780 	call	24a78 <_fflush_r>
   293fc:	103fbb1e 	bne	r2,zero,292ec <__alt_data_end+0xfffe92ec>
   29400:	0011883a 	mov	r8,zero
   29404:	003fdb06 	br	29374 <__alt_data_end+0xfffe9374>
   29408:	94c0012e 	bgeu	r18,r19,29410 <__sfvwrite_r+0x31c>
   2940c:	9027883a 	mov	r19,r18
   29410:	980d883a 	mov	r6,r19
   29414:	e00b883a 	mov	r5,fp
   29418:	00296640 	call	29664 <memmove>
   2941c:	80800217 	ldw	r2,8(r16)
   29420:	80c00017 	ldw	r3,0(r16)
   29424:	14c5c83a 	sub	r2,r2,r19
   29428:	1cc7883a 	add	r3,r3,r19
   2942c:	80800215 	stw	r2,8(r16)
   29430:	80c00015 	stw	r3,0(r16)
   29434:	10004326 	beq	r2,zero,29544 <__sfvwrite_r+0x450>
   29438:	9805883a 	mov	r2,r19
   2943c:	003f8606 	br	29258 <__alt_data_end+0xfffe9258>
   29440:	b00d883a 	mov	r6,r22
   29444:	e00b883a 	mov	r5,fp
   29448:	da000115 	stw	r8,4(sp)
   2944c:	00296640 	call	29664 <memmove>
   29450:	80800217 	ldw	r2,8(r16)
   29454:	80c00017 	ldw	r3,0(r16)
   29458:	da000117 	ldw	r8,4(sp)
   2945c:	1585c83a 	sub	r2,r2,r22
   29460:	1dad883a 	add	r22,r3,r22
   29464:	80800215 	stw	r2,8(r16)
   29468:	85800015 	stw	r22,0(r16)
   2946c:	003fbf06 	br	2936c <__alt_data_end+0xfffe936c>
   29470:	81000017 	ldw	r4,0(r16)
   29474:	9027883a 	mov	r19,r18
   29478:	902f883a 	mov	r23,r18
   2947c:	003f6c06 	br	29230 <__alt_data_end+0xfffe9230>
   29480:	900d883a 	mov	r6,r18
   29484:	01400284 	movi	r5,10
   29488:	e009883a 	mov	r4,fp
   2948c:	0025f040 	call	25f04 <memchr>
   29490:	10003e26 	beq	r2,zero,2958c <__sfvwrite_r+0x498>
   29494:	10800044 	addi	r2,r2,1
   29498:	1727c83a 	sub	r19,r2,fp
   2949c:	02000044 	movi	r8,1
   294a0:	003f9d06 	br	29318 <__alt_data_end+0xfffe9318>
   294a4:	80800517 	ldw	r2,20(r16)
   294a8:	81400417 	ldw	r5,16(r16)
   294ac:	81c00017 	ldw	r7,0(r16)
   294b0:	10a7883a 	add	r19,r2,r2
   294b4:	9885883a 	add	r2,r19,r2
   294b8:	1026d7fa 	srli	r19,r2,31
   294bc:	396dc83a 	sub	r22,r7,r5
   294c0:	b1000044 	addi	r4,r22,1
   294c4:	9885883a 	add	r2,r19,r2
   294c8:	1027d07a 	srai	r19,r2,1
   294cc:	2485883a 	add	r2,r4,r18
   294d0:	980d883a 	mov	r6,r19
   294d4:	9880022e 	bgeu	r19,r2,294e0 <__sfvwrite_r+0x3ec>
   294d8:	1027883a 	mov	r19,r2
   294dc:	100d883a 	mov	r6,r2
   294e0:	18c1000c 	andi	r3,r3,1024
   294e4:	18001c26 	beq	r3,zero,29558 <__sfvwrite_r+0x464>
   294e8:	300b883a 	mov	r5,r6
   294ec:	a809883a 	mov	r4,r21
   294f0:	00256f80 	call	256f8 <_malloc_r>
   294f4:	102f883a 	mov	r23,r2
   294f8:	10002926 	beq	r2,zero,295a0 <__sfvwrite_r+0x4ac>
   294fc:	81400417 	ldw	r5,16(r16)
   29500:	b00d883a 	mov	r6,r22
   29504:	1009883a 	mov	r4,r2
   29508:	0025fe80 	call	25fe8 <memcpy>
   2950c:	8080030b 	ldhu	r2,12(r16)
   29510:	00fedfc4 	movi	r3,-1153
   29514:	10c4703a 	and	r2,r2,r3
   29518:	10802014 	ori	r2,r2,128
   2951c:	8080030d 	sth	r2,12(r16)
   29520:	bd89883a 	add	r4,r23,r22
   29524:	9d8fc83a 	sub	r7,r19,r22
   29528:	85c00415 	stw	r23,16(r16)
   2952c:	84c00515 	stw	r19,20(r16)
   29530:	81000015 	stw	r4,0(r16)
   29534:	9027883a 	mov	r19,r18
   29538:	81c00215 	stw	r7,8(r16)
   2953c:	902f883a 	mov	r23,r18
   29540:	003f3b06 	br	29230 <__alt_data_end+0xfffe9230>
   29544:	800b883a 	mov	r5,r16
   29548:	a809883a 	mov	r4,r21
   2954c:	0024a780 	call	24a78 <_fflush_r>
   29550:	103fb926 	beq	r2,zero,29438 <__alt_data_end+0xfffe9438>
   29554:	003f6506 	br	292ec <__alt_data_end+0xfffe92ec>
   29558:	a809883a 	mov	r4,r21
   2955c:	00298200 	call	29820 <_realloc_r>
   29560:	102f883a 	mov	r23,r2
   29564:	103fee1e 	bne	r2,zero,29520 <__alt_data_end+0xfffe9520>
   29568:	81400417 	ldw	r5,16(r16)
   2956c:	a809883a 	mov	r4,r21
   29570:	0024fc80 	call	24fc8 <_free_r>
   29574:	8080030b 	ldhu	r2,12(r16)
   29578:	00ffdfc4 	movi	r3,-129
   2957c:	1884703a 	and	r2,r3,r2
   29580:	00c00304 	movi	r3,12
   29584:	a8c00015 	stw	r3,0(r21)
   29588:	003f5906 	br	292f0 <__alt_data_end+0xfffe92f0>
   2958c:	94c00044 	addi	r19,r18,1
   29590:	02000044 	movi	r8,1
   29594:	003f6006 	br	29318 <__alt_data_end+0xfffe9318>
   29598:	00bfffc4 	movi	r2,-1
   2959c:	003f0306 	br	291ac <__alt_data_end+0xfffe91ac>
   295a0:	00800304 	movi	r2,12
   295a4:	a8800015 	stw	r2,0(r21)
   295a8:	8080030b 	ldhu	r2,12(r16)
   295ac:	003f5006 	br	292f0 <__alt_data_end+0xfffe92f0>

000295b0 <_isatty_r>:
   295b0:	defffd04 	addi	sp,sp,-12
   295b4:	dc000015 	stw	r16,0(sp)
   295b8:	040000f4 	movhi	r16,3
   295bc:	dc400115 	stw	r17,4(sp)
   295c0:	840ded04 	addi	r16,r16,14260
   295c4:	2023883a 	mov	r17,r4
   295c8:	2809883a 	mov	r4,r5
   295cc:	dfc00215 	stw	ra,8(sp)
   295d0:	80000015 	stw	zero,0(r16)
   295d4:	002d6dc0 	call	2d6dc <isatty>
   295d8:	00ffffc4 	movi	r3,-1
   295dc:	10c00526 	beq	r2,r3,295f4 <_isatty_r+0x44>
   295e0:	dfc00217 	ldw	ra,8(sp)
   295e4:	dc400117 	ldw	r17,4(sp)
   295e8:	dc000017 	ldw	r16,0(sp)
   295ec:	dec00304 	addi	sp,sp,12
   295f0:	f800283a 	ret
   295f4:	80c00017 	ldw	r3,0(r16)
   295f8:	183ff926 	beq	r3,zero,295e0 <__alt_data_end+0xfffe95e0>
   295fc:	88c00015 	stw	r3,0(r17)
   29600:	003ff706 	br	295e0 <__alt_data_end+0xfffe95e0>

00029604 <_lseek_r>:
   29604:	defffd04 	addi	sp,sp,-12
   29608:	2805883a 	mov	r2,r5
   2960c:	dc000015 	stw	r16,0(sp)
   29610:	040000f4 	movhi	r16,3
   29614:	dc400115 	stw	r17,4(sp)
   29618:	300b883a 	mov	r5,r6
   2961c:	840ded04 	addi	r16,r16,14260
   29620:	2023883a 	mov	r17,r4
   29624:	380d883a 	mov	r6,r7
   29628:	1009883a 	mov	r4,r2
   2962c:	dfc00215 	stw	ra,8(sp)
   29630:	80000015 	stw	zero,0(r16)
   29634:	002d8a80 	call	2d8a8 <lseek>
   29638:	00ffffc4 	movi	r3,-1
   2963c:	10c00526 	beq	r2,r3,29654 <_lseek_r+0x50>
   29640:	dfc00217 	ldw	ra,8(sp)
   29644:	dc400117 	ldw	r17,4(sp)
   29648:	dc000017 	ldw	r16,0(sp)
   2964c:	dec00304 	addi	sp,sp,12
   29650:	f800283a 	ret
   29654:	80c00017 	ldw	r3,0(r16)
   29658:	183ff926 	beq	r3,zero,29640 <__alt_data_end+0xfffe9640>
   2965c:	88c00015 	stw	r3,0(r17)
   29660:	003ff706 	br	29640 <__alt_data_end+0xfffe9640>

00029664 <memmove>:
   29664:	2005883a 	mov	r2,r4
   29668:	29000b2e 	bgeu	r5,r4,29698 <memmove+0x34>
   2966c:	298f883a 	add	r7,r5,r6
   29670:	21c0092e 	bgeu	r4,r7,29698 <memmove+0x34>
   29674:	2187883a 	add	r3,r4,r6
   29678:	198bc83a 	sub	r5,r3,r6
   2967c:	30004826 	beq	r6,zero,297a0 <memmove+0x13c>
   29680:	39ffffc4 	addi	r7,r7,-1
   29684:	39000003 	ldbu	r4,0(r7)
   29688:	18ffffc4 	addi	r3,r3,-1
   2968c:	19000005 	stb	r4,0(r3)
   29690:	28fffb1e 	bne	r5,r3,29680 <__alt_data_end+0xfffe9680>
   29694:	f800283a 	ret
   29698:	00c003c4 	movi	r3,15
   2969c:	1980412e 	bgeu	r3,r6,297a4 <memmove+0x140>
   296a0:	2886b03a 	or	r3,r5,r2
   296a4:	18c000cc 	andi	r3,r3,3
   296a8:	1800401e 	bne	r3,zero,297ac <memmove+0x148>
   296ac:	33fffc04 	addi	r15,r6,-16
   296b0:	781ed13a 	srli	r15,r15,4
   296b4:	28c00104 	addi	r3,r5,4
   296b8:	13400104 	addi	r13,r2,4
   296bc:	781c913a 	slli	r14,r15,4
   296c0:	2b000204 	addi	r12,r5,8
   296c4:	12c00204 	addi	r11,r2,8
   296c8:	73800504 	addi	r14,r14,20
   296cc:	2a800304 	addi	r10,r5,12
   296d0:	12400304 	addi	r9,r2,12
   296d4:	2b9d883a 	add	r14,r5,r14
   296d8:	2811883a 	mov	r8,r5
   296dc:	100f883a 	mov	r7,r2
   296e0:	41000017 	ldw	r4,0(r8)
   296e4:	39c00404 	addi	r7,r7,16
   296e8:	18c00404 	addi	r3,r3,16
   296ec:	393ffc15 	stw	r4,-16(r7)
   296f0:	193ffc17 	ldw	r4,-16(r3)
   296f4:	6b400404 	addi	r13,r13,16
   296f8:	5ac00404 	addi	r11,r11,16
   296fc:	693ffc15 	stw	r4,-16(r13)
   29700:	61000017 	ldw	r4,0(r12)
   29704:	4a400404 	addi	r9,r9,16
   29708:	42000404 	addi	r8,r8,16
   2970c:	593ffc15 	stw	r4,-16(r11)
   29710:	51000017 	ldw	r4,0(r10)
   29714:	63000404 	addi	r12,r12,16
   29718:	52800404 	addi	r10,r10,16
   2971c:	493ffc15 	stw	r4,-16(r9)
   29720:	1bbfef1e 	bne	r3,r14,296e0 <__alt_data_end+0xfffe96e0>
   29724:	79000044 	addi	r4,r15,1
   29728:	2008913a 	slli	r4,r4,4
   2972c:	328003cc 	andi	r10,r6,15
   29730:	02c000c4 	movi	r11,3
   29734:	1107883a 	add	r3,r2,r4
   29738:	290b883a 	add	r5,r5,r4
   2973c:	5a801e2e 	bgeu	r11,r10,297b8 <memmove+0x154>
   29740:	1813883a 	mov	r9,r3
   29744:	2811883a 	mov	r8,r5
   29748:	500f883a 	mov	r7,r10
   2974c:	41000017 	ldw	r4,0(r8)
   29750:	4a400104 	addi	r9,r9,4
   29754:	39ffff04 	addi	r7,r7,-4
   29758:	493fff15 	stw	r4,-4(r9)
   2975c:	42000104 	addi	r8,r8,4
   29760:	59fffa36 	bltu	r11,r7,2974c <__alt_data_end+0xfffe974c>
   29764:	513fff04 	addi	r4,r10,-4
   29768:	2008d0ba 	srli	r4,r4,2
   2976c:	318000cc 	andi	r6,r6,3
   29770:	21000044 	addi	r4,r4,1
   29774:	2109883a 	add	r4,r4,r4
   29778:	2109883a 	add	r4,r4,r4
   2977c:	1907883a 	add	r3,r3,r4
   29780:	290b883a 	add	r5,r5,r4
   29784:	30000b26 	beq	r6,zero,297b4 <memmove+0x150>
   29788:	198d883a 	add	r6,r3,r6
   2978c:	29c00003 	ldbu	r7,0(r5)
   29790:	18c00044 	addi	r3,r3,1
   29794:	29400044 	addi	r5,r5,1
   29798:	19ffffc5 	stb	r7,-1(r3)
   2979c:	19bffb1e 	bne	r3,r6,2978c <__alt_data_end+0xfffe978c>
   297a0:	f800283a 	ret
   297a4:	1007883a 	mov	r3,r2
   297a8:	003ff606 	br	29784 <__alt_data_end+0xfffe9784>
   297ac:	1007883a 	mov	r3,r2
   297b0:	003ff506 	br	29788 <__alt_data_end+0xfffe9788>
   297b4:	f800283a 	ret
   297b8:	500d883a 	mov	r6,r10
   297bc:	003ff106 	br	29784 <__alt_data_end+0xfffe9784>

000297c0 <_read_r>:
   297c0:	defffd04 	addi	sp,sp,-12
   297c4:	2805883a 	mov	r2,r5
   297c8:	dc000015 	stw	r16,0(sp)
   297cc:	040000f4 	movhi	r16,3
   297d0:	dc400115 	stw	r17,4(sp)
   297d4:	300b883a 	mov	r5,r6
   297d8:	840ded04 	addi	r16,r16,14260
   297dc:	2023883a 	mov	r17,r4
   297e0:	380d883a 	mov	r6,r7
   297e4:	1009883a 	mov	r4,r2
   297e8:	dfc00215 	stw	ra,8(sp)
   297ec:	80000015 	stw	zero,0(r16)
   297f0:	002dce40 	call	2dce4 <read>
   297f4:	00ffffc4 	movi	r3,-1
   297f8:	10c00526 	beq	r2,r3,29810 <_read_r+0x50>
   297fc:	dfc00217 	ldw	ra,8(sp)
   29800:	dc400117 	ldw	r17,4(sp)
   29804:	dc000017 	ldw	r16,0(sp)
   29808:	dec00304 	addi	sp,sp,12
   2980c:	f800283a 	ret
   29810:	80c00017 	ldw	r3,0(r16)
   29814:	183ff926 	beq	r3,zero,297fc <__alt_data_end+0xfffe97fc>
   29818:	88c00015 	stw	r3,0(r17)
   2981c:	003ff706 	br	297fc <__alt_data_end+0xfffe97fc>

00029820 <_realloc_r>:
   29820:	defff604 	addi	sp,sp,-40
   29824:	dc800215 	stw	r18,8(sp)
   29828:	dfc00915 	stw	ra,36(sp)
   2982c:	df000815 	stw	fp,32(sp)
   29830:	ddc00715 	stw	r23,28(sp)
   29834:	dd800615 	stw	r22,24(sp)
   29838:	dd400515 	stw	r21,20(sp)
   2983c:	dd000415 	stw	r20,16(sp)
   29840:	dcc00315 	stw	r19,12(sp)
   29844:	dc400115 	stw	r17,4(sp)
   29848:	dc000015 	stw	r16,0(sp)
   2984c:	3025883a 	mov	r18,r6
   29850:	2800b726 	beq	r5,zero,29b30 <_realloc_r+0x310>
   29854:	282b883a 	mov	r21,r5
   29858:	2029883a 	mov	r20,r4
   2985c:	002d9f80 	call	2d9f8 <__malloc_lock>
   29860:	a8bfff17 	ldw	r2,-4(r21)
   29864:	043fff04 	movi	r16,-4
   29868:	90c002c4 	addi	r3,r18,11
   2986c:	01000584 	movi	r4,22
   29870:	acfffe04 	addi	r19,r21,-8
   29874:	1420703a 	and	r16,r2,r16
   29878:	20c0332e 	bgeu	r4,r3,29948 <_realloc_r+0x128>
   2987c:	047ffe04 	movi	r17,-8
   29880:	1c62703a 	and	r17,r3,r17
   29884:	8807883a 	mov	r3,r17
   29888:	88005816 	blt	r17,zero,299ec <_realloc_r+0x1cc>
   2988c:	8c805736 	bltu	r17,r18,299ec <_realloc_r+0x1cc>
   29890:	80c0300e 	bge	r16,r3,29954 <_realloc_r+0x134>
   29894:	070000f4 	movhi	fp,3
   29898:	e7019504 	addi	fp,fp,1620
   2989c:	e1c00217 	ldw	r7,8(fp)
   298a0:	9c09883a 	add	r4,r19,r16
   298a4:	22000117 	ldw	r8,4(r4)
   298a8:	21c06326 	beq	r4,r7,29a38 <_realloc_r+0x218>
   298ac:	017fff84 	movi	r5,-2
   298b0:	414a703a 	and	r5,r8,r5
   298b4:	214b883a 	add	r5,r4,r5
   298b8:	29800117 	ldw	r6,4(r5)
   298bc:	3180004c 	andi	r6,r6,1
   298c0:	30003f26 	beq	r6,zero,299c0 <_realloc_r+0x1a0>
   298c4:	1080004c 	andi	r2,r2,1
   298c8:	10008326 	beq	r2,zero,29ad8 <_realloc_r+0x2b8>
   298cc:	900b883a 	mov	r5,r18
   298d0:	a009883a 	mov	r4,r20
   298d4:	00256f80 	call	256f8 <_malloc_r>
   298d8:	1025883a 	mov	r18,r2
   298dc:	10011e26 	beq	r2,zero,29d58 <_realloc_r+0x538>
   298e0:	a93fff17 	ldw	r4,-4(r21)
   298e4:	10fffe04 	addi	r3,r2,-8
   298e8:	00bfff84 	movi	r2,-2
   298ec:	2084703a 	and	r2,r4,r2
   298f0:	9885883a 	add	r2,r19,r2
   298f4:	1880ee26 	beq	r3,r2,29cb0 <_realloc_r+0x490>
   298f8:	81bfff04 	addi	r6,r16,-4
   298fc:	00800904 	movi	r2,36
   29900:	1180b836 	bltu	r2,r6,29be4 <_realloc_r+0x3c4>
   29904:	00c004c4 	movi	r3,19
   29908:	19809636 	bltu	r3,r6,29b64 <_realloc_r+0x344>
   2990c:	9005883a 	mov	r2,r18
   29910:	a807883a 	mov	r3,r21
   29914:	19000017 	ldw	r4,0(r3)
   29918:	11000015 	stw	r4,0(r2)
   2991c:	19000117 	ldw	r4,4(r3)
   29920:	11000115 	stw	r4,4(r2)
   29924:	18c00217 	ldw	r3,8(r3)
   29928:	10c00215 	stw	r3,8(r2)
   2992c:	a80b883a 	mov	r5,r21
   29930:	a009883a 	mov	r4,r20
   29934:	0024fc80 	call	24fc8 <_free_r>
   29938:	a009883a 	mov	r4,r20
   2993c:	002da1c0 	call	2da1c <__malloc_unlock>
   29940:	9005883a 	mov	r2,r18
   29944:	00001206 	br	29990 <_realloc_r+0x170>
   29948:	00c00404 	movi	r3,16
   2994c:	1823883a 	mov	r17,r3
   29950:	003fce06 	br	2988c <__alt_data_end+0xfffe988c>
   29954:	a825883a 	mov	r18,r21
   29958:	8445c83a 	sub	r2,r16,r17
   2995c:	00c003c4 	movi	r3,15
   29960:	18802636 	bltu	r3,r2,299fc <_realloc_r+0x1dc>
   29964:	99800117 	ldw	r6,4(r19)
   29968:	9c07883a 	add	r3,r19,r16
   2996c:	3180004c 	andi	r6,r6,1
   29970:	3420b03a 	or	r16,r6,r16
   29974:	9c000115 	stw	r16,4(r19)
   29978:	18800117 	ldw	r2,4(r3)
   2997c:	10800054 	ori	r2,r2,1
   29980:	18800115 	stw	r2,4(r3)
   29984:	a009883a 	mov	r4,r20
   29988:	002da1c0 	call	2da1c <__malloc_unlock>
   2998c:	9005883a 	mov	r2,r18
   29990:	dfc00917 	ldw	ra,36(sp)
   29994:	df000817 	ldw	fp,32(sp)
   29998:	ddc00717 	ldw	r23,28(sp)
   2999c:	dd800617 	ldw	r22,24(sp)
   299a0:	dd400517 	ldw	r21,20(sp)
   299a4:	dd000417 	ldw	r20,16(sp)
   299a8:	dcc00317 	ldw	r19,12(sp)
   299ac:	dc800217 	ldw	r18,8(sp)
   299b0:	dc400117 	ldw	r17,4(sp)
   299b4:	dc000017 	ldw	r16,0(sp)
   299b8:	dec00a04 	addi	sp,sp,40
   299bc:	f800283a 	ret
   299c0:	017fff04 	movi	r5,-4
   299c4:	414a703a 	and	r5,r8,r5
   299c8:	814d883a 	add	r6,r16,r5
   299cc:	30c01f16 	blt	r6,r3,29a4c <_realloc_r+0x22c>
   299d0:	20800317 	ldw	r2,12(r4)
   299d4:	20c00217 	ldw	r3,8(r4)
   299d8:	a825883a 	mov	r18,r21
   299dc:	3021883a 	mov	r16,r6
   299e0:	18800315 	stw	r2,12(r3)
   299e4:	10c00215 	stw	r3,8(r2)
   299e8:	003fdb06 	br	29958 <__alt_data_end+0xfffe9958>
   299ec:	00800304 	movi	r2,12
   299f0:	a0800015 	stw	r2,0(r20)
   299f4:	0005883a 	mov	r2,zero
   299f8:	003fe506 	br	29990 <__alt_data_end+0xfffe9990>
   299fc:	98c00117 	ldw	r3,4(r19)
   29a00:	9c4b883a 	add	r5,r19,r17
   29a04:	11000054 	ori	r4,r2,1
   29a08:	18c0004c 	andi	r3,r3,1
   29a0c:	1c62b03a 	or	r17,r3,r17
   29a10:	9c400115 	stw	r17,4(r19)
   29a14:	29000115 	stw	r4,4(r5)
   29a18:	2885883a 	add	r2,r5,r2
   29a1c:	10c00117 	ldw	r3,4(r2)
   29a20:	29400204 	addi	r5,r5,8
   29a24:	a009883a 	mov	r4,r20
   29a28:	18c00054 	ori	r3,r3,1
   29a2c:	10c00115 	stw	r3,4(r2)
   29a30:	0024fc80 	call	24fc8 <_free_r>
   29a34:	003fd306 	br	29984 <__alt_data_end+0xfffe9984>
   29a38:	017fff04 	movi	r5,-4
   29a3c:	414a703a 	and	r5,r8,r5
   29a40:	89800404 	addi	r6,r17,16
   29a44:	8151883a 	add	r8,r16,r5
   29a48:	4180590e 	bge	r8,r6,29bb0 <_realloc_r+0x390>
   29a4c:	1080004c 	andi	r2,r2,1
   29a50:	103f9e1e 	bne	r2,zero,298cc <__alt_data_end+0xfffe98cc>
   29a54:	adbffe17 	ldw	r22,-8(r21)
   29a58:	00bfff04 	movi	r2,-4
   29a5c:	9dadc83a 	sub	r22,r19,r22
   29a60:	b1800117 	ldw	r6,4(r22)
   29a64:	3084703a 	and	r2,r6,r2
   29a68:	20002026 	beq	r4,zero,29aec <_realloc_r+0x2cc>
   29a6c:	80af883a 	add	r23,r16,r2
   29a70:	b96f883a 	add	r23,r23,r5
   29a74:	21c05f26 	beq	r4,r7,29bf4 <_realloc_r+0x3d4>
   29a78:	b8c01c16 	blt	r23,r3,29aec <_realloc_r+0x2cc>
   29a7c:	20800317 	ldw	r2,12(r4)
   29a80:	20c00217 	ldw	r3,8(r4)
   29a84:	81bfff04 	addi	r6,r16,-4
   29a88:	01000904 	movi	r4,36
   29a8c:	18800315 	stw	r2,12(r3)
   29a90:	10c00215 	stw	r3,8(r2)
   29a94:	b0c00217 	ldw	r3,8(r22)
   29a98:	b0800317 	ldw	r2,12(r22)
   29a9c:	b4800204 	addi	r18,r22,8
   29aa0:	18800315 	stw	r2,12(r3)
   29aa4:	10c00215 	stw	r3,8(r2)
   29aa8:	21801b36 	bltu	r4,r6,29b18 <_realloc_r+0x2f8>
   29aac:	008004c4 	movi	r2,19
   29ab0:	1180352e 	bgeu	r2,r6,29b88 <_realloc_r+0x368>
   29ab4:	a8800017 	ldw	r2,0(r21)
   29ab8:	b0800215 	stw	r2,8(r22)
   29abc:	a8800117 	ldw	r2,4(r21)
   29ac0:	b0800315 	stw	r2,12(r22)
   29ac4:	008006c4 	movi	r2,27
   29ac8:	11807f36 	bltu	r2,r6,29cc8 <_realloc_r+0x4a8>
   29acc:	b0800404 	addi	r2,r22,16
   29ad0:	ad400204 	addi	r21,r21,8
   29ad4:	00002d06 	br	29b8c <_realloc_r+0x36c>
   29ad8:	adbffe17 	ldw	r22,-8(r21)
   29adc:	00bfff04 	movi	r2,-4
   29ae0:	9dadc83a 	sub	r22,r19,r22
   29ae4:	b1000117 	ldw	r4,4(r22)
   29ae8:	2084703a 	and	r2,r4,r2
   29aec:	b03f7726 	beq	r22,zero,298cc <__alt_data_end+0xfffe98cc>
   29af0:	80af883a 	add	r23,r16,r2
   29af4:	b8ff7516 	blt	r23,r3,298cc <__alt_data_end+0xfffe98cc>
   29af8:	b0800317 	ldw	r2,12(r22)
   29afc:	b0c00217 	ldw	r3,8(r22)
   29b00:	81bfff04 	addi	r6,r16,-4
   29b04:	01000904 	movi	r4,36
   29b08:	18800315 	stw	r2,12(r3)
   29b0c:	10c00215 	stw	r3,8(r2)
   29b10:	b4800204 	addi	r18,r22,8
   29b14:	21bfe52e 	bgeu	r4,r6,29aac <__alt_data_end+0xfffe9aac>
   29b18:	a80b883a 	mov	r5,r21
   29b1c:	9009883a 	mov	r4,r18
   29b20:	00296640 	call	29664 <memmove>
   29b24:	b821883a 	mov	r16,r23
   29b28:	b027883a 	mov	r19,r22
   29b2c:	003f8a06 	br	29958 <__alt_data_end+0xfffe9958>
   29b30:	300b883a 	mov	r5,r6
   29b34:	dfc00917 	ldw	ra,36(sp)
   29b38:	df000817 	ldw	fp,32(sp)
   29b3c:	ddc00717 	ldw	r23,28(sp)
   29b40:	dd800617 	ldw	r22,24(sp)
   29b44:	dd400517 	ldw	r21,20(sp)
   29b48:	dd000417 	ldw	r20,16(sp)
   29b4c:	dcc00317 	ldw	r19,12(sp)
   29b50:	dc800217 	ldw	r18,8(sp)
   29b54:	dc400117 	ldw	r17,4(sp)
   29b58:	dc000017 	ldw	r16,0(sp)
   29b5c:	dec00a04 	addi	sp,sp,40
   29b60:	00256f81 	jmpi	256f8 <_malloc_r>
   29b64:	a8c00017 	ldw	r3,0(r21)
   29b68:	90c00015 	stw	r3,0(r18)
   29b6c:	a8c00117 	ldw	r3,4(r21)
   29b70:	90c00115 	stw	r3,4(r18)
   29b74:	00c006c4 	movi	r3,27
   29b78:	19804536 	bltu	r3,r6,29c90 <_realloc_r+0x470>
   29b7c:	90800204 	addi	r2,r18,8
   29b80:	a8c00204 	addi	r3,r21,8
   29b84:	003f6306 	br	29914 <__alt_data_end+0xfffe9914>
   29b88:	9005883a 	mov	r2,r18
   29b8c:	a8c00017 	ldw	r3,0(r21)
   29b90:	b821883a 	mov	r16,r23
   29b94:	b027883a 	mov	r19,r22
   29b98:	10c00015 	stw	r3,0(r2)
   29b9c:	a8c00117 	ldw	r3,4(r21)
   29ba0:	10c00115 	stw	r3,4(r2)
   29ba4:	a8c00217 	ldw	r3,8(r21)
   29ba8:	10c00215 	stw	r3,8(r2)
   29bac:	003f6a06 	br	29958 <__alt_data_end+0xfffe9958>
   29bb0:	9c67883a 	add	r19,r19,r17
   29bb4:	4445c83a 	sub	r2,r8,r17
   29bb8:	e4c00215 	stw	r19,8(fp)
   29bbc:	10800054 	ori	r2,r2,1
   29bc0:	98800115 	stw	r2,4(r19)
   29bc4:	a8bfff17 	ldw	r2,-4(r21)
   29bc8:	a009883a 	mov	r4,r20
   29bcc:	1080004c 	andi	r2,r2,1
   29bd0:	1462b03a 	or	r17,r2,r17
   29bd4:	ac7fff15 	stw	r17,-4(r21)
   29bd8:	002da1c0 	call	2da1c <__malloc_unlock>
   29bdc:	a805883a 	mov	r2,r21
   29be0:	003f6b06 	br	29990 <__alt_data_end+0xfffe9990>
   29be4:	a80b883a 	mov	r5,r21
   29be8:	9009883a 	mov	r4,r18
   29bec:	00296640 	call	29664 <memmove>
   29bf0:	003f4e06 	br	2992c <__alt_data_end+0xfffe992c>
   29bf4:	89000404 	addi	r4,r17,16
   29bf8:	b93fbc16 	blt	r23,r4,29aec <__alt_data_end+0xfffe9aec>
   29bfc:	b0800317 	ldw	r2,12(r22)
   29c00:	b0c00217 	ldw	r3,8(r22)
   29c04:	81bfff04 	addi	r6,r16,-4
   29c08:	01000904 	movi	r4,36
   29c0c:	18800315 	stw	r2,12(r3)
   29c10:	10c00215 	stw	r3,8(r2)
   29c14:	b4800204 	addi	r18,r22,8
   29c18:	21804336 	bltu	r4,r6,29d28 <_realloc_r+0x508>
   29c1c:	008004c4 	movi	r2,19
   29c20:	11803f2e 	bgeu	r2,r6,29d20 <_realloc_r+0x500>
   29c24:	a8800017 	ldw	r2,0(r21)
   29c28:	b0800215 	stw	r2,8(r22)
   29c2c:	a8800117 	ldw	r2,4(r21)
   29c30:	b0800315 	stw	r2,12(r22)
   29c34:	008006c4 	movi	r2,27
   29c38:	11803f36 	bltu	r2,r6,29d38 <_realloc_r+0x518>
   29c3c:	b0800404 	addi	r2,r22,16
   29c40:	ad400204 	addi	r21,r21,8
   29c44:	a8c00017 	ldw	r3,0(r21)
   29c48:	10c00015 	stw	r3,0(r2)
   29c4c:	a8c00117 	ldw	r3,4(r21)
   29c50:	10c00115 	stw	r3,4(r2)
   29c54:	a8c00217 	ldw	r3,8(r21)
   29c58:	10c00215 	stw	r3,8(r2)
   29c5c:	b447883a 	add	r3,r22,r17
   29c60:	bc45c83a 	sub	r2,r23,r17
   29c64:	e0c00215 	stw	r3,8(fp)
   29c68:	10800054 	ori	r2,r2,1
   29c6c:	18800115 	stw	r2,4(r3)
   29c70:	b0800117 	ldw	r2,4(r22)
   29c74:	a009883a 	mov	r4,r20
   29c78:	1080004c 	andi	r2,r2,1
   29c7c:	1462b03a 	or	r17,r2,r17
   29c80:	b4400115 	stw	r17,4(r22)
   29c84:	002da1c0 	call	2da1c <__malloc_unlock>
   29c88:	9005883a 	mov	r2,r18
   29c8c:	003f4006 	br	29990 <__alt_data_end+0xfffe9990>
   29c90:	a8c00217 	ldw	r3,8(r21)
   29c94:	90c00215 	stw	r3,8(r18)
   29c98:	a8c00317 	ldw	r3,12(r21)
   29c9c:	90c00315 	stw	r3,12(r18)
   29ca0:	30801126 	beq	r6,r2,29ce8 <_realloc_r+0x4c8>
   29ca4:	90800404 	addi	r2,r18,16
   29ca8:	a8c00404 	addi	r3,r21,16
   29cac:	003f1906 	br	29914 <__alt_data_end+0xfffe9914>
   29cb0:	90ffff17 	ldw	r3,-4(r18)
   29cb4:	00bfff04 	movi	r2,-4
   29cb8:	a825883a 	mov	r18,r21
   29cbc:	1884703a 	and	r2,r3,r2
   29cc0:	80a1883a 	add	r16,r16,r2
   29cc4:	003f2406 	br	29958 <__alt_data_end+0xfffe9958>
   29cc8:	a8800217 	ldw	r2,8(r21)
   29ccc:	b0800415 	stw	r2,16(r22)
   29cd0:	a8800317 	ldw	r2,12(r21)
   29cd4:	b0800515 	stw	r2,20(r22)
   29cd8:	31000a26 	beq	r6,r4,29d04 <_realloc_r+0x4e4>
   29cdc:	b0800604 	addi	r2,r22,24
   29ce0:	ad400404 	addi	r21,r21,16
   29ce4:	003fa906 	br	29b8c <__alt_data_end+0xfffe9b8c>
   29ce8:	a9000417 	ldw	r4,16(r21)
   29cec:	90800604 	addi	r2,r18,24
   29cf0:	a8c00604 	addi	r3,r21,24
   29cf4:	91000415 	stw	r4,16(r18)
   29cf8:	a9000517 	ldw	r4,20(r21)
   29cfc:	91000515 	stw	r4,20(r18)
   29d00:	003f0406 	br	29914 <__alt_data_end+0xfffe9914>
   29d04:	a8c00417 	ldw	r3,16(r21)
   29d08:	ad400604 	addi	r21,r21,24
   29d0c:	b0800804 	addi	r2,r22,32
   29d10:	b0c00615 	stw	r3,24(r22)
   29d14:	a8ffff17 	ldw	r3,-4(r21)
   29d18:	b0c00715 	stw	r3,28(r22)
   29d1c:	003f9b06 	br	29b8c <__alt_data_end+0xfffe9b8c>
   29d20:	9005883a 	mov	r2,r18
   29d24:	003fc706 	br	29c44 <__alt_data_end+0xfffe9c44>
   29d28:	a80b883a 	mov	r5,r21
   29d2c:	9009883a 	mov	r4,r18
   29d30:	00296640 	call	29664 <memmove>
   29d34:	003fc906 	br	29c5c <__alt_data_end+0xfffe9c5c>
   29d38:	a8800217 	ldw	r2,8(r21)
   29d3c:	b0800415 	stw	r2,16(r22)
   29d40:	a8800317 	ldw	r2,12(r21)
   29d44:	b0800515 	stw	r2,20(r22)
   29d48:	31000726 	beq	r6,r4,29d68 <_realloc_r+0x548>
   29d4c:	b0800604 	addi	r2,r22,24
   29d50:	ad400404 	addi	r21,r21,16
   29d54:	003fbb06 	br	29c44 <__alt_data_end+0xfffe9c44>
   29d58:	a009883a 	mov	r4,r20
   29d5c:	002da1c0 	call	2da1c <__malloc_unlock>
   29d60:	0005883a 	mov	r2,zero
   29d64:	003f0a06 	br	29990 <__alt_data_end+0xfffe9990>
   29d68:	a8c00417 	ldw	r3,16(r21)
   29d6c:	ad400604 	addi	r21,r21,24
   29d70:	b0800804 	addi	r2,r22,32
   29d74:	b0c00615 	stw	r3,24(r22)
   29d78:	a8ffff17 	ldw	r3,-4(r21)
   29d7c:	b0c00715 	stw	r3,28(r22)
   29d80:	003fb006 	br	29c44 <__alt_data_end+0xfffe9c44>

00029d84 <__swbuf_r>:
   29d84:	defffb04 	addi	sp,sp,-20
   29d88:	dcc00315 	stw	r19,12(sp)
   29d8c:	dc800215 	stw	r18,8(sp)
   29d90:	dc000015 	stw	r16,0(sp)
   29d94:	dfc00415 	stw	ra,16(sp)
   29d98:	dc400115 	stw	r17,4(sp)
   29d9c:	2025883a 	mov	r18,r4
   29da0:	2827883a 	mov	r19,r5
   29da4:	3021883a 	mov	r16,r6
   29da8:	20000226 	beq	r4,zero,29db4 <__swbuf_r+0x30>
   29dac:	20800e17 	ldw	r2,56(r4)
   29db0:	10004226 	beq	r2,zero,29ebc <__swbuf_r+0x138>
   29db4:	80800617 	ldw	r2,24(r16)
   29db8:	8100030b 	ldhu	r4,12(r16)
   29dbc:	80800215 	stw	r2,8(r16)
   29dc0:	2080020c 	andi	r2,r4,8
   29dc4:	10003626 	beq	r2,zero,29ea0 <__swbuf_r+0x11c>
   29dc8:	80c00417 	ldw	r3,16(r16)
   29dcc:	18003426 	beq	r3,zero,29ea0 <__swbuf_r+0x11c>
   29dd0:	2088000c 	andi	r2,r4,8192
   29dd4:	9c403fcc 	andi	r17,r19,255
   29dd8:	10001a26 	beq	r2,zero,29e44 <__swbuf_r+0xc0>
   29ddc:	80800017 	ldw	r2,0(r16)
   29de0:	81000517 	ldw	r4,20(r16)
   29de4:	10c7c83a 	sub	r3,r2,r3
   29de8:	1900200e 	bge	r3,r4,29e6c <__swbuf_r+0xe8>
   29dec:	18c00044 	addi	r3,r3,1
   29df0:	81000217 	ldw	r4,8(r16)
   29df4:	11400044 	addi	r5,r2,1
   29df8:	81400015 	stw	r5,0(r16)
   29dfc:	213fffc4 	addi	r4,r4,-1
   29e00:	81000215 	stw	r4,8(r16)
   29e04:	14c00005 	stb	r19,0(r2)
   29e08:	80800517 	ldw	r2,20(r16)
   29e0c:	10c01e26 	beq	r2,r3,29e88 <__swbuf_r+0x104>
   29e10:	8080030b 	ldhu	r2,12(r16)
   29e14:	1080004c 	andi	r2,r2,1
   29e18:	10000226 	beq	r2,zero,29e24 <__swbuf_r+0xa0>
   29e1c:	00800284 	movi	r2,10
   29e20:	88801926 	beq	r17,r2,29e88 <__swbuf_r+0x104>
   29e24:	8805883a 	mov	r2,r17
   29e28:	dfc00417 	ldw	ra,16(sp)
   29e2c:	dcc00317 	ldw	r19,12(sp)
   29e30:	dc800217 	ldw	r18,8(sp)
   29e34:	dc400117 	ldw	r17,4(sp)
   29e38:	dc000017 	ldw	r16,0(sp)
   29e3c:	dec00504 	addi	sp,sp,20
   29e40:	f800283a 	ret
   29e44:	81401917 	ldw	r5,100(r16)
   29e48:	00b7ffc4 	movi	r2,-8193
   29e4c:	21080014 	ori	r4,r4,8192
   29e50:	2884703a 	and	r2,r5,r2
   29e54:	80801915 	stw	r2,100(r16)
   29e58:	80800017 	ldw	r2,0(r16)
   29e5c:	8100030d 	sth	r4,12(r16)
   29e60:	81000517 	ldw	r4,20(r16)
   29e64:	10c7c83a 	sub	r3,r2,r3
   29e68:	193fe016 	blt	r3,r4,29dec <__alt_data_end+0xfffe9dec>
   29e6c:	800b883a 	mov	r5,r16
   29e70:	9009883a 	mov	r4,r18
   29e74:	0024a780 	call	24a78 <_fflush_r>
   29e78:	1000071e 	bne	r2,zero,29e98 <__swbuf_r+0x114>
   29e7c:	80800017 	ldw	r2,0(r16)
   29e80:	00c00044 	movi	r3,1
   29e84:	003fda06 	br	29df0 <__alt_data_end+0xfffe9df0>
   29e88:	800b883a 	mov	r5,r16
   29e8c:	9009883a 	mov	r4,r18
   29e90:	0024a780 	call	24a78 <_fflush_r>
   29e94:	103fe326 	beq	r2,zero,29e24 <__alt_data_end+0xfffe9e24>
   29e98:	00bfffc4 	movi	r2,-1
   29e9c:	003fe206 	br	29e28 <__alt_data_end+0xfffe9e28>
   29ea0:	800b883a 	mov	r5,r16
   29ea4:	9009883a 	mov	r4,r18
   29ea8:	0022e800 	call	22e80 <__swsetup_r>
   29eac:	103ffa1e 	bne	r2,zero,29e98 <__alt_data_end+0xfffe9e98>
   29eb0:	8100030b 	ldhu	r4,12(r16)
   29eb4:	80c00417 	ldw	r3,16(r16)
   29eb8:	003fc506 	br	29dd0 <__alt_data_end+0xfffe9dd0>
   29ebc:	0024e540 	call	24e54 <__sinit>
   29ec0:	003fbc06 	br	29db4 <__alt_data_end+0xfffe9db4>

00029ec4 <__swbuf>:
   29ec4:	008000f4 	movhi	r2,3
   29ec8:	10871a04 	addi	r2,r2,7272
   29ecc:	280d883a 	mov	r6,r5
   29ed0:	200b883a 	mov	r5,r4
   29ed4:	11000017 	ldw	r4,0(r2)
   29ed8:	0029d841 	jmpi	29d84 <__swbuf_r>

00029edc <_wcrtomb_r>:
   29edc:	defff604 	addi	sp,sp,-40
   29ee0:	008000f4 	movhi	r2,3
   29ee4:	dc800815 	stw	r18,32(sp)
   29ee8:	dc400715 	stw	r17,28(sp)
   29eec:	dc000615 	stw	r16,24(sp)
   29ef0:	10871e04 	addi	r2,r2,7288
   29ef4:	dfc00915 	stw	ra,36(sp)
   29ef8:	2021883a 	mov	r16,r4
   29efc:	3823883a 	mov	r17,r7
   29f00:	14800017 	ldw	r18,0(r2)
   29f04:	28001426 	beq	r5,zero,29f58 <_wcrtomb_r+0x7c>
   29f08:	d9400415 	stw	r5,16(sp)
   29f0c:	d9800515 	stw	r6,20(sp)
   29f10:	00254dc0 	call	254dc <__locale_charset>
   29f14:	d9800517 	ldw	r6,20(sp)
   29f18:	d9400417 	ldw	r5,16(sp)
   29f1c:	100f883a 	mov	r7,r2
   29f20:	dc400015 	stw	r17,0(sp)
   29f24:	8009883a 	mov	r4,r16
   29f28:	903ee83a 	callr	r18
   29f2c:	00ffffc4 	movi	r3,-1
   29f30:	10c0031e 	bne	r2,r3,29f40 <_wcrtomb_r+0x64>
   29f34:	88000015 	stw	zero,0(r17)
   29f38:	00c02284 	movi	r3,138
   29f3c:	80c00015 	stw	r3,0(r16)
   29f40:	dfc00917 	ldw	ra,36(sp)
   29f44:	dc800817 	ldw	r18,32(sp)
   29f48:	dc400717 	ldw	r17,28(sp)
   29f4c:	dc000617 	ldw	r16,24(sp)
   29f50:	dec00a04 	addi	sp,sp,40
   29f54:	f800283a 	ret
   29f58:	00254dc0 	call	254dc <__locale_charset>
   29f5c:	100f883a 	mov	r7,r2
   29f60:	dc400015 	stw	r17,0(sp)
   29f64:	000d883a 	mov	r6,zero
   29f68:	d9400104 	addi	r5,sp,4
   29f6c:	8009883a 	mov	r4,r16
   29f70:	903ee83a 	callr	r18
   29f74:	003fed06 	br	29f2c <__alt_data_end+0xfffe9f2c>

00029f78 <wcrtomb>:
   29f78:	defff604 	addi	sp,sp,-40
   29f7c:	008000f4 	movhi	r2,3
   29f80:	dc800615 	stw	r18,24(sp)
   29f84:	dc400515 	stw	r17,20(sp)
   29f88:	10871a04 	addi	r2,r2,7272
   29f8c:	dfc00915 	stw	ra,36(sp)
   29f90:	dd000815 	stw	r20,32(sp)
   29f94:	dcc00715 	stw	r19,28(sp)
   29f98:	dc000415 	stw	r16,16(sp)
   29f9c:	3025883a 	mov	r18,r6
   29fa0:	14400017 	ldw	r17,0(r2)
   29fa4:	20001926 	beq	r4,zero,2a00c <wcrtomb+0x94>
   29fa8:	008000f4 	movhi	r2,3
   29fac:	10871e04 	addi	r2,r2,7288
   29fb0:	15000017 	ldw	r20,0(r2)
   29fb4:	2021883a 	mov	r16,r4
   29fb8:	2827883a 	mov	r19,r5
   29fbc:	00254dc0 	call	254dc <__locale_charset>
   29fc0:	100f883a 	mov	r7,r2
   29fc4:	dc800015 	stw	r18,0(sp)
   29fc8:	980d883a 	mov	r6,r19
   29fcc:	800b883a 	mov	r5,r16
   29fd0:	8809883a 	mov	r4,r17
   29fd4:	a03ee83a 	callr	r20
   29fd8:	00ffffc4 	movi	r3,-1
   29fdc:	10c0031e 	bne	r2,r3,29fec <wcrtomb+0x74>
   29fe0:	90000015 	stw	zero,0(r18)
   29fe4:	00c02284 	movi	r3,138
   29fe8:	88c00015 	stw	r3,0(r17)
   29fec:	dfc00917 	ldw	ra,36(sp)
   29ff0:	dd000817 	ldw	r20,32(sp)
   29ff4:	dcc00717 	ldw	r19,28(sp)
   29ff8:	dc800617 	ldw	r18,24(sp)
   29ffc:	dc400517 	ldw	r17,20(sp)
   2a000:	dc000417 	ldw	r16,16(sp)
   2a004:	dec00a04 	addi	sp,sp,40
   2a008:	f800283a 	ret
   2a00c:	008000f4 	movhi	r2,3
   2a010:	10871e04 	addi	r2,r2,7288
   2a014:	14000017 	ldw	r16,0(r2)
   2a018:	00254dc0 	call	254dc <__locale_charset>
   2a01c:	100f883a 	mov	r7,r2
   2a020:	dc800015 	stw	r18,0(sp)
   2a024:	000d883a 	mov	r6,zero
   2a028:	d9400104 	addi	r5,sp,4
   2a02c:	8809883a 	mov	r4,r17
   2a030:	803ee83a 	callr	r16
   2a034:	003fe806 	br	29fd8 <__alt_data_end+0xfffe9fd8>

0002a038 <__ascii_wctomb>:
   2a038:	28000526 	beq	r5,zero,2a050 <__ascii_wctomb+0x18>
   2a03c:	00803fc4 	movi	r2,255
   2a040:	11800536 	bltu	r2,r6,2a058 <__ascii_wctomb+0x20>
   2a044:	29800005 	stb	r6,0(r5)
   2a048:	00800044 	movi	r2,1
   2a04c:	f800283a 	ret
   2a050:	0005883a 	mov	r2,zero
   2a054:	f800283a 	ret
   2a058:	00802284 	movi	r2,138
   2a05c:	20800015 	stw	r2,0(r4)
   2a060:	00bfffc4 	movi	r2,-1
   2a064:	f800283a 	ret

0002a068 <_wctomb_r>:
   2a068:	008000f4 	movhi	r2,3
   2a06c:	defff904 	addi	sp,sp,-28
   2a070:	10871e04 	addi	r2,r2,7288
   2a074:	dfc00615 	stw	ra,24(sp)
   2a078:	dc400515 	stw	r17,20(sp)
   2a07c:	dc000415 	stw	r16,16(sp)
   2a080:	3823883a 	mov	r17,r7
   2a084:	14000017 	ldw	r16,0(r2)
   2a088:	d9000115 	stw	r4,4(sp)
   2a08c:	d9400215 	stw	r5,8(sp)
   2a090:	d9800315 	stw	r6,12(sp)
   2a094:	00254dc0 	call	254dc <__locale_charset>
   2a098:	d9800317 	ldw	r6,12(sp)
   2a09c:	d9400217 	ldw	r5,8(sp)
   2a0a0:	d9000117 	ldw	r4,4(sp)
   2a0a4:	100f883a 	mov	r7,r2
   2a0a8:	dc400015 	stw	r17,0(sp)
   2a0ac:	803ee83a 	callr	r16
   2a0b0:	dfc00617 	ldw	ra,24(sp)
   2a0b4:	dc400517 	ldw	r17,20(sp)
   2a0b8:	dc000417 	ldw	r16,16(sp)
   2a0bc:	dec00704 	addi	sp,sp,28
   2a0c0:	f800283a 	ret

0002a0c4 <__udivdi3>:
   2a0c4:	defff504 	addi	sp,sp,-44
   2a0c8:	dcc00415 	stw	r19,16(sp)
   2a0cc:	dc000115 	stw	r16,4(sp)
   2a0d0:	dfc00a15 	stw	ra,40(sp)
   2a0d4:	df000915 	stw	fp,36(sp)
   2a0d8:	ddc00815 	stw	r23,32(sp)
   2a0dc:	dd800715 	stw	r22,28(sp)
   2a0e0:	dd400615 	stw	r21,24(sp)
   2a0e4:	dd000515 	stw	r20,20(sp)
   2a0e8:	dc800315 	stw	r18,12(sp)
   2a0ec:	dc400215 	stw	r17,8(sp)
   2a0f0:	2027883a 	mov	r19,r4
   2a0f4:	2821883a 	mov	r16,r5
   2a0f8:	3800411e 	bne	r7,zero,2a200 <__udivdi3+0x13c>
   2a0fc:	3023883a 	mov	r17,r6
   2a100:	2025883a 	mov	r18,r4
   2a104:	2980522e 	bgeu	r5,r6,2a250 <__udivdi3+0x18c>
   2a108:	00bfffd4 	movui	r2,65535
   2a10c:	282d883a 	mov	r22,r5
   2a110:	1180a836 	bltu	r2,r6,2a3b4 <__udivdi3+0x2f0>
   2a114:	00803fc4 	movi	r2,255
   2a118:	1185803a 	cmpltu	r2,r2,r6
   2a11c:	100490fa 	slli	r2,r2,3
   2a120:	3086d83a 	srl	r3,r6,r2
   2a124:	010000f4 	movhi	r4,3
   2a128:	21002104 	addi	r4,r4,132
   2a12c:	20c7883a 	add	r3,r4,r3
   2a130:	18c00003 	ldbu	r3,0(r3)
   2a134:	1885883a 	add	r2,r3,r2
   2a138:	00c00804 	movi	r3,32
   2a13c:	1887c83a 	sub	r3,r3,r2
   2a140:	18000526 	beq	r3,zero,2a158 <__udivdi3+0x94>
   2a144:	80e0983a 	sll	r16,r16,r3
   2a148:	9884d83a 	srl	r2,r19,r2
   2a14c:	30e2983a 	sll	r17,r6,r3
   2a150:	98e4983a 	sll	r18,r19,r3
   2a154:	142cb03a 	or	r22,r2,r16
   2a158:	882ad43a 	srli	r21,r17,16
   2a15c:	b009883a 	mov	r4,r22
   2a160:	8d3fffcc 	andi	r20,r17,65535
   2a164:	a80b883a 	mov	r5,r21
   2a168:	0020aec0 	call	20aec <__umodsi3>
   2a16c:	b009883a 	mov	r4,r22
   2a170:	a80b883a 	mov	r5,r21
   2a174:	1027883a 	mov	r19,r2
   2a178:	0020a880 	call	20a88 <__udivsi3>
   2a17c:	102d883a 	mov	r22,r2
   2a180:	9826943a 	slli	r19,r19,16
   2a184:	9004d43a 	srli	r2,r18,16
   2a188:	a5a1383a 	mul	r16,r20,r22
   2a18c:	14c4b03a 	or	r2,r2,r19
   2a190:	1400052e 	bgeu	r2,r16,2a1a8 <__udivdi3+0xe4>
   2a194:	1445883a 	add	r2,r2,r17
   2a198:	b0ffffc4 	addi	r3,r22,-1
   2a19c:	14400136 	bltu	r2,r17,2a1a4 <__udivdi3+0xe0>
   2a1a0:	14012336 	bltu	r2,r16,2a630 <__udivdi3+0x56c>
   2a1a4:	182d883a 	mov	r22,r3
   2a1a8:	1421c83a 	sub	r16,r2,r16
   2a1ac:	a80b883a 	mov	r5,r21
   2a1b0:	8009883a 	mov	r4,r16
   2a1b4:	0020aec0 	call	20aec <__umodsi3>
   2a1b8:	1027883a 	mov	r19,r2
   2a1bc:	a80b883a 	mov	r5,r21
   2a1c0:	8009883a 	mov	r4,r16
   2a1c4:	0020a880 	call	20a88 <__udivsi3>
   2a1c8:	9826943a 	slli	r19,r19,16
   2a1cc:	a0a9383a 	mul	r20,r20,r2
   2a1d0:	94bfffcc 	andi	r18,r18,65535
   2a1d4:	94e4b03a 	or	r18,r18,r19
   2a1d8:	9500052e 	bgeu	r18,r20,2a1f0 <__udivdi3+0x12c>
   2a1dc:	8ca5883a 	add	r18,r17,r18
   2a1e0:	10ffffc4 	addi	r3,r2,-1
   2a1e4:	9440f136 	bltu	r18,r17,2a5ac <__udivdi3+0x4e8>
   2a1e8:	9500f02e 	bgeu	r18,r20,2a5ac <__udivdi3+0x4e8>
   2a1ec:	10bfff84 	addi	r2,r2,-2
   2a1f0:	b00c943a 	slli	r6,r22,16
   2a1f4:	0007883a 	mov	r3,zero
   2a1f8:	3084b03a 	or	r2,r6,r2
   2a1fc:	00005906 	br	2a364 <__udivdi3+0x2a0>
   2a200:	29c05636 	bltu	r5,r7,2a35c <__udivdi3+0x298>
   2a204:	00bfffd4 	movui	r2,65535
   2a208:	11c0622e 	bgeu	r2,r7,2a394 <__udivdi3+0x2d0>
   2a20c:	00804034 	movhi	r2,256
   2a210:	10bfffc4 	addi	r2,r2,-1
   2a214:	11c0ee36 	bltu	r2,r7,2a5d0 <__udivdi3+0x50c>
   2a218:	00800404 	movi	r2,16
   2a21c:	3886d83a 	srl	r3,r7,r2
   2a220:	010000f4 	movhi	r4,3
   2a224:	21002104 	addi	r4,r4,132
   2a228:	20c7883a 	add	r3,r4,r3
   2a22c:	18c00003 	ldbu	r3,0(r3)
   2a230:	05400804 	movi	r21,32
   2a234:	1885883a 	add	r2,r3,r2
   2a238:	a8abc83a 	sub	r21,r21,r2
   2a23c:	a800621e 	bne	r21,zero,2a3c8 <__udivdi3+0x304>
   2a240:	3c00e936 	bltu	r7,r16,2a5e8 <__udivdi3+0x524>
   2a244:	9985403a 	cmpgeu	r2,r19,r6
   2a248:	0007883a 	mov	r3,zero
   2a24c:	00004506 	br	2a364 <__udivdi3+0x2a0>
   2a250:	3000041e 	bne	r6,zero,2a264 <__udivdi3+0x1a0>
   2a254:	000b883a 	mov	r5,zero
   2a258:	01000044 	movi	r4,1
   2a25c:	0020a880 	call	20a88 <__udivsi3>
   2a260:	1023883a 	mov	r17,r2
   2a264:	00bfffd4 	movui	r2,65535
   2a268:	14404e2e 	bgeu	r2,r17,2a3a4 <__udivdi3+0x2e0>
   2a26c:	00804034 	movhi	r2,256
   2a270:	10bfffc4 	addi	r2,r2,-1
   2a274:	1440d836 	bltu	r2,r17,2a5d8 <__udivdi3+0x514>
   2a278:	00800404 	movi	r2,16
   2a27c:	8886d83a 	srl	r3,r17,r2
   2a280:	010000f4 	movhi	r4,3
   2a284:	21002104 	addi	r4,r4,132
   2a288:	20c7883a 	add	r3,r4,r3
   2a28c:	18c00003 	ldbu	r3,0(r3)
   2a290:	1885883a 	add	r2,r3,r2
   2a294:	00c00804 	movi	r3,32
   2a298:	1887c83a 	sub	r3,r3,r2
   2a29c:	18008f1e 	bne	r3,zero,2a4dc <__udivdi3+0x418>
   2a2a0:	882ad43a 	srli	r21,r17,16
   2a2a4:	8461c83a 	sub	r16,r16,r17
   2a2a8:	8d3fffcc 	andi	r20,r17,65535
   2a2ac:	00c00044 	movi	r3,1
   2a2b0:	8009883a 	mov	r4,r16
   2a2b4:	a80b883a 	mov	r5,r21
   2a2b8:	d8c00015 	stw	r3,0(sp)
   2a2bc:	0020aec0 	call	20aec <__umodsi3>
   2a2c0:	8009883a 	mov	r4,r16
   2a2c4:	a80b883a 	mov	r5,r21
   2a2c8:	1027883a 	mov	r19,r2
   2a2cc:	0020a880 	call	20a88 <__udivsi3>
   2a2d0:	9826943a 	slli	r19,r19,16
   2a2d4:	9008d43a 	srli	r4,r18,16
   2a2d8:	1521383a 	mul	r16,r2,r20
   2a2dc:	102d883a 	mov	r22,r2
   2a2e0:	24c8b03a 	or	r4,r4,r19
   2a2e4:	d8c00017 	ldw	r3,0(sp)
   2a2e8:	2400052e 	bgeu	r4,r16,2a300 <__udivdi3+0x23c>
   2a2ec:	2449883a 	add	r4,r4,r17
   2a2f0:	b0bfffc4 	addi	r2,r22,-1
   2a2f4:	24400136 	bltu	r4,r17,2a2fc <__udivdi3+0x238>
   2a2f8:	2400ca36 	bltu	r4,r16,2a624 <__udivdi3+0x560>
   2a2fc:	102d883a 	mov	r22,r2
   2a300:	2421c83a 	sub	r16,r4,r16
   2a304:	a80b883a 	mov	r5,r21
   2a308:	8009883a 	mov	r4,r16
   2a30c:	d8c00015 	stw	r3,0(sp)
   2a310:	0020aec0 	call	20aec <__umodsi3>
   2a314:	1027883a 	mov	r19,r2
   2a318:	a80b883a 	mov	r5,r21
   2a31c:	8009883a 	mov	r4,r16
   2a320:	0020a880 	call	20a88 <__udivsi3>
   2a324:	9826943a 	slli	r19,r19,16
   2a328:	1529383a 	mul	r20,r2,r20
   2a32c:	94bfffcc 	andi	r18,r18,65535
   2a330:	94e4b03a 	or	r18,r18,r19
   2a334:	d8c00017 	ldw	r3,0(sp)
   2a338:	9500052e 	bgeu	r18,r20,2a350 <__udivdi3+0x28c>
   2a33c:	8ca5883a 	add	r18,r17,r18
   2a340:	113fffc4 	addi	r4,r2,-1
   2a344:	94409736 	bltu	r18,r17,2a5a4 <__udivdi3+0x4e0>
   2a348:	9500962e 	bgeu	r18,r20,2a5a4 <__udivdi3+0x4e0>
   2a34c:	10bfff84 	addi	r2,r2,-2
   2a350:	b00c943a 	slli	r6,r22,16
   2a354:	3084b03a 	or	r2,r6,r2
   2a358:	00000206 	br	2a364 <__udivdi3+0x2a0>
   2a35c:	0007883a 	mov	r3,zero
   2a360:	0005883a 	mov	r2,zero
   2a364:	dfc00a17 	ldw	ra,40(sp)
   2a368:	df000917 	ldw	fp,36(sp)
   2a36c:	ddc00817 	ldw	r23,32(sp)
   2a370:	dd800717 	ldw	r22,28(sp)
   2a374:	dd400617 	ldw	r21,24(sp)
   2a378:	dd000517 	ldw	r20,20(sp)
   2a37c:	dcc00417 	ldw	r19,16(sp)
   2a380:	dc800317 	ldw	r18,12(sp)
   2a384:	dc400217 	ldw	r17,8(sp)
   2a388:	dc000117 	ldw	r16,4(sp)
   2a38c:	dec00b04 	addi	sp,sp,44
   2a390:	f800283a 	ret
   2a394:	00803fc4 	movi	r2,255
   2a398:	11c5803a 	cmpltu	r2,r2,r7
   2a39c:	100490fa 	slli	r2,r2,3
   2a3a0:	003f9e06 	br	2a21c <__alt_data_end+0xfffea21c>
   2a3a4:	00803fc4 	movi	r2,255
   2a3a8:	1445803a 	cmpltu	r2,r2,r17
   2a3ac:	100490fa 	slli	r2,r2,3
   2a3b0:	003fb206 	br	2a27c <__alt_data_end+0xfffea27c>
   2a3b4:	00804034 	movhi	r2,256
   2a3b8:	10bfffc4 	addi	r2,r2,-1
   2a3bc:	11808836 	bltu	r2,r6,2a5e0 <__udivdi3+0x51c>
   2a3c0:	00800404 	movi	r2,16
   2a3c4:	003f5606 	br	2a120 <__alt_data_end+0xfffea120>
   2a3c8:	30aed83a 	srl	r23,r6,r2
   2a3cc:	3d4e983a 	sll	r7,r7,r21
   2a3d0:	80acd83a 	srl	r22,r16,r2
   2a3d4:	9884d83a 	srl	r2,r19,r2
   2a3d8:	3deeb03a 	or	r23,r7,r23
   2a3dc:	b824d43a 	srli	r18,r23,16
   2a3e0:	8560983a 	sll	r16,r16,r21
   2a3e4:	b009883a 	mov	r4,r22
   2a3e8:	900b883a 	mov	r5,r18
   2a3ec:	3568983a 	sll	r20,r6,r21
   2a3f0:	1420b03a 	or	r16,r2,r16
   2a3f4:	0020aec0 	call	20aec <__umodsi3>
   2a3f8:	b009883a 	mov	r4,r22
   2a3fc:	900b883a 	mov	r5,r18
   2a400:	1023883a 	mov	r17,r2
   2a404:	0020a880 	call	20a88 <__udivsi3>
   2a408:	8808943a 	slli	r4,r17,16
   2a40c:	bf3fffcc 	andi	fp,r23,65535
   2a410:	8006d43a 	srli	r3,r16,16
   2a414:	e0a3383a 	mul	r17,fp,r2
   2a418:	100d883a 	mov	r6,r2
   2a41c:	1906b03a 	or	r3,r3,r4
   2a420:	1c40042e 	bgeu	r3,r17,2a434 <__udivdi3+0x370>
   2a424:	1dc7883a 	add	r3,r3,r23
   2a428:	10bfffc4 	addi	r2,r2,-1
   2a42c:	1dc0752e 	bgeu	r3,r23,2a604 <__udivdi3+0x540>
   2a430:	100d883a 	mov	r6,r2
   2a434:	1c63c83a 	sub	r17,r3,r17
   2a438:	900b883a 	mov	r5,r18
   2a43c:	8809883a 	mov	r4,r17
   2a440:	d9800015 	stw	r6,0(sp)
   2a444:	0020aec0 	call	20aec <__umodsi3>
   2a448:	102d883a 	mov	r22,r2
   2a44c:	8809883a 	mov	r4,r17
   2a450:	900b883a 	mov	r5,r18
   2a454:	0020a880 	call	20a88 <__udivsi3>
   2a458:	b02c943a 	slli	r22,r22,16
   2a45c:	e089383a 	mul	r4,fp,r2
   2a460:	843fffcc 	andi	r16,r16,65535
   2a464:	85a0b03a 	or	r16,r16,r22
   2a468:	d9800017 	ldw	r6,0(sp)
   2a46c:	8100042e 	bgeu	r16,r4,2a480 <__udivdi3+0x3bc>
   2a470:	85e1883a 	add	r16,r16,r23
   2a474:	10ffffc4 	addi	r3,r2,-1
   2a478:	85c05e2e 	bgeu	r16,r23,2a5f4 <__udivdi3+0x530>
   2a47c:	1805883a 	mov	r2,r3
   2a480:	300c943a 	slli	r6,r6,16
   2a484:	a17fffcc 	andi	r5,r20,65535
   2a488:	a028d43a 	srli	r20,r20,16
   2a48c:	3084b03a 	or	r2,r6,r2
   2a490:	10ffffcc 	andi	r3,r2,65535
   2a494:	100cd43a 	srli	r6,r2,16
   2a498:	194f383a 	mul	r7,r3,r5
   2a49c:	1d07383a 	mul	r3,r3,r20
   2a4a0:	314b383a 	mul	r5,r6,r5
   2a4a4:	3810d43a 	srli	r8,r7,16
   2a4a8:	8121c83a 	sub	r16,r16,r4
   2a4ac:	1947883a 	add	r3,r3,r5
   2a4b0:	40c7883a 	add	r3,r8,r3
   2a4b4:	350d383a 	mul	r6,r6,r20
   2a4b8:	1940022e 	bgeu	r3,r5,2a4c4 <__udivdi3+0x400>
   2a4bc:	01000074 	movhi	r4,1
   2a4c0:	310d883a 	add	r6,r6,r4
   2a4c4:	1828d43a 	srli	r20,r3,16
   2a4c8:	a18d883a 	add	r6,r20,r6
   2a4cc:	81803e36 	bltu	r16,r6,2a5c8 <__udivdi3+0x504>
   2a4d0:	81803826 	beq	r16,r6,2a5b4 <__udivdi3+0x4f0>
   2a4d4:	0007883a 	mov	r3,zero
   2a4d8:	003fa206 	br	2a364 <__alt_data_end+0xfffea364>
   2a4dc:	88e2983a 	sll	r17,r17,r3
   2a4e0:	80a8d83a 	srl	r20,r16,r2
   2a4e4:	80e0983a 	sll	r16,r16,r3
   2a4e8:	882ad43a 	srli	r21,r17,16
   2a4ec:	9884d83a 	srl	r2,r19,r2
   2a4f0:	a009883a 	mov	r4,r20
   2a4f4:	a80b883a 	mov	r5,r21
   2a4f8:	142eb03a 	or	r23,r2,r16
   2a4fc:	98e4983a 	sll	r18,r19,r3
   2a500:	0020aec0 	call	20aec <__umodsi3>
   2a504:	a009883a 	mov	r4,r20
   2a508:	a80b883a 	mov	r5,r21
   2a50c:	1021883a 	mov	r16,r2
   2a510:	0020a880 	call	20a88 <__udivsi3>
   2a514:	1039883a 	mov	fp,r2
   2a518:	8d3fffcc 	andi	r20,r17,65535
   2a51c:	8020943a 	slli	r16,r16,16
   2a520:	b804d43a 	srli	r2,r23,16
   2a524:	a72d383a 	mul	r22,r20,fp
   2a528:	1404b03a 	or	r2,r2,r16
   2a52c:	1580062e 	bgeu	r2,r22,2a548 <__udivdi3+0x484>
   2a530:	1445883a 	add	r2,r2,r17
   2a534:	e0ffffc4 	addi	r3,fp,-1
   2a538:	14403836 	bltu	r2,r17,2a61c <__udivdi3+0x558>
   2a53c:	1580372e 	bgeu	r2,r22,2a61c <__udivdi3+0x558>
   2a540:	e73fff84 	addi	fp,fp,-2
   2a544:	1445883a 	add	r2,r2,r17
   2a548:	15adc83a 	sub	r22,r2,r22
   2a54c:	a80b883a 	mov	r5,r21
   2a550:	b009883a 	mov	r4,r22
   2a554:	0020aec0 	call	20aec <__umodsi3>
   2a558:	1027883a 	mov	r19,r2
   2a55c:	b009883a 	mov	r4,r22
   2a560:	a80b883a 	mov	r5,r21
   2a564:	0020a880 	call	20a88 <__udivsi3>
   2a568:	9826943a 	slli	r19,r19,16
   2a56c:	a0a1383a 	mul	r16,r20,r2
   2a570:	b93fffcc 	andi	r4,r23,65535
   2a574:	24c8b03a 	or	r4,r4,r19
   2a578:	2400062e 	bgeu	r4,r16,2a594 <__udivdi3+0x4d0>
   2a57c:	2449883a 	add	r4,r4,r17
   2a580:	10ffffc4 	addi	r3,r2,-1
   2a584:	24402336 	bltu	r4,r17,2a614 <__udivdi3+0x550>
   2a588:	2400222e 	bgeu	r4,r16,2a614 <__udivdi3+0x550>
   2a58c:	10bfff84 	addi	r2,r2,-2
   2a590:	2449883a 	add	r4,r4,r17
   2a594:	e038943a 	slli	fp,fp,16
   2a598:	2421c83a 	sub	r16,r4,r16
   2a59c:	e086b03a 	or	r3,fp,r2
   2a5a0:	003f4306 	br	2a2b0 <__alt_data_end+0xfffea2b0>
   2a5a4:	2005883a 	mov	r2,r4
   2a5a8:	003f6906 	br	2a350 <__alt_data_end+0xfffea350>
   2a5ac:	1805883a 	mov	r2,r3
   2a5b0:	003f0f06 	br	2a1f0 <__alt_data_end+0xfffea1f0>
   2a5b4:	1806943a 	slli	r3,r3,16
   2a5b8:	9d66983a 	sll	r19,r19,r21
   2a5bc:	39ffffcc 	andi	r7,r7,65535
   2a5c0:	19c7883a 	add	r3,r3,r7
   2a5c4:	98ffc32e 	bgeu	r19,r3,2a4d4 <__alt_data_end+0xfffea4d4>
   2a5c8:	10bfffc4 	addi	r2,r2,-1
   2a5cc:	003fc106 	br	2a4d4 <__alt_data_end+0xfffea4d4>
   2a5d0:	00800604 	movi	r2,24
   2a5d4:	003f1106 	br	2a21c <__alt_data_end+0xfffea21c>
   2a5d8:	00800604 	movi	r2,24
   2a5dc:	003f2706 	br	2a27c <__alt_data_end+0xfffea27c>
   2a5e0:	00800604 	movi	r2,24
   2a5e4:	003ece06 	br	2a120 <__alt_data_end+0xfffea120>
   2a5e8:	0007883a 	mov	r3,zero
   2a5ec:	00800044 	movi	r2,1
   2a5f0:	003f5c06 	br	2a364 <__alt_data_end+0xfffea364>
   2a5f4:	813fa12e 	bgeu	r16,r4,2a47c <__alt_data_end+0xfffea47c>
   2a5f8:	10bfff84 	addi	r2,r2,-2
   2a5fc:	85e1883a 	add	r16,r16,r23
   2a600:	003f9f06 	br	2a480 <__alt_data_end+0xfffea480>
   2a604:	1c7f8a2e 	bgeu	r3,r17,2a430 <__alt_data_end+0xfffea430>
   2a608:	31bfff84 	addi	r6,r6,-2
   2a60c:	1dc7883a 	add	r3,r3,r23
   2a610:	003f8806 	br	2a434 <__alt_data_end+0xfffea434>
   2a614:	1805883a 	mov	r2,r3
   2a618:	003fde06 	br	2a594 <__alt_data_end+0xfffea594>
   2a61c:	1839883a 	mov	fp,r3
   2a620:	003fc906 	br	2a548 <__alt_data_end+0xfffea548>
   2a624:	b5bfff84 	addi	r22,r22,-2
   2a628:	2449883a 	add	r4,r4,r17
   2a62c:	003f3406 	br	2a300 <__alt_data_end+0xfffea300>
   2a630:	b5bfff84 	addi	r22,r22,-2
   2a634:	1445883a 	add	r2,r2,r17
   2a638:	003edb06 	br	2a1a8 <__alt_data_end+0xfffea1a8>

0002a63c <__umoddi3>:
   2a63c:	defff404 	addi	sp,sp,-48
   2a640:	df000a15 	stw	fp,40(sp)
   2a644:	dc400315 	stw	r17,12(sp)
   2a648:	dc000215 	stw	r16,8(sp)
   2a64c:	dfc00b15 	stw	ra,44(sp)
   2a650:	ddc00915 	stw	r23,36(sp)
   2a654:	dd800815 	stw	r22,32(sp)
   2a658:	dd400715 	stw	r21,28(sp)
   2a65c:	dd000615 	stw	r20,24(sp)
   2a660:	dcc00515 	stw	r19,20(sp)
   2a664:	dc800415 	stw	r18,16(sp)
   2a668:	2021883a 	mov	r16,r4
   2a66c:	2823883a 	mov	r17,r5
   2a670:	2839883a 	mov	fp,r5
   2a674:	38003c1e 	bne	r7,zero,2a768 <__umoddi3+0x12c>
   2a678:	3027883a 	mov	r19,r6
   2a67c:	2029883a 	mov	r20,r4
   2a680:	2980512e 	bgeu	r5,r6,2a7c8 <__umoddi3+0x18c>
   2a684:	00bfffd4 	movui	r2,65535
   2a688:	11809a36 	bltu	r2,r6,2a8f4 <__umoddi3+0x2b8>
   2a68c:	01003fc4 	movi	r4,255
   2a690:	2189803a 	cmpltu	r4,r4,r6
   2a694:	200890fa 	slli	r4,r4,3
   2a698:	3104d83a 	srl	r2,r6,r4
   2a69c:	00c000f4 	movhi	r3,3
   2a6a0:	18c02104 	addi	r3,r3,132
   2a6a4:	1885883a 	add	r2,r3,r2
   2a6a8:	10c00003 	ldbu	r3,0(r2)
   2a6ac:	00800804 	movi	r2,32
   2a6b0:	1909883a 	add	r4,r3,r4
   2a6b4:	1125c83a 	sub	r18,r2,r4
   2a6b8:	90000526 	beq	r18,zero,2a6d0 <__umoddi3+0x94>
   2a6bc:	8ca2983a 	sll	r17,r17,r18
   2a6c0:	8108d83a 	srl	r4,r16,r4
   2a6c4:	34a6983a 	sll	r19,r6,r18
   2a6c8:	84a8983a 	sll	r20,r16,r18
   2a6cc:	2478b03a 	or	fp,r4,r17
   2a6d0:	982ed43a 	srli	r23,r19,16
   2a6d4:	e009883a 	mov	r4,fp
   2a6d8:	9dbfffcc 	andi	r22,r19,65535
   2a6dc:	b80b883a 	mov	r5,r23
   2a6e0:	0020aec0 	call	20aec <__umodsi3>
   2a6e4:	e009883a 	mov	r4,fp
   2a6e8:	b80b883a 	mov	r5,r23
   2a6ec:	102b883a 	mov	r21,r2
   2a6f0:	0020a880 	call	20a88 <__udivsi3>
   2a6f4:	a806943a 	slli	r3,r21,16
   2a6f8:	a008d43a 	srli	r4,r20,16
   2a6fc:	b085383a 	mul	r2,r22,r2
   2a700:	20c8b03a 	or	r4,r4,r3
   2a704:	2080032e 	bgeu	r4,r2,2a714 <__umoddi3+0xd8>
   2a708:	24c9883a 	add	r4,r4,r19
   2a70c:	24c00136 	bltu	r4,r19,2a714 <__umoddi3+0xd8>
   2a710:	20811036 	bltu	r4,r2,2ab54 <__umoddi3+0x518>
   2a714:	20abc83a 	sub	r21,r4,r2
   2a718:	b80b883a 	mov	r5,r23
   2a71c:	a809883a 	mov	r4,r21
   2a720:	0020aec0 	call	20aec <__umodsi3>
   2a724:	1023883a 	mov	r17,r2
   2a728:	b80b883a 	mov	r5,r23
   2a72c:	a809883a 	mov	r4,r21
   2a730:	0020a880 	call	20a88 <__udivsi3>
   2a734:	8822943a 	slli	r17,r17,16
   2a738:	b085383a 	mul	r2,r22,r2
   2a73c:	a0ffffcc 	andi	r3,r20,65535
   2a740:	1c46b03a 	or	r3,r3,r17
   2a744:	1880042e 	bgeu	r3,r2,2a758 <__umoddi3+0x11c>
   2a748:	1cc7883a 	add	r3,r3,r19
   2a74c:	1cc00236 	bltu	r3,r19,2a758 <__umoddi3+0x11c>
   2a750:	1880012e 	bgeu	r3,r2,2a758 <__umoddi3+0x11c>
   2a754:	1cc7883a 	add	r3,r3,r19
   2a758:	1885c83a 	sub	r2,r3,r2
   2a75c:	1484d83a 	srl	r2,r2,r18
   2a760:	0007883a 	mov	r3,zero
   2a764:	00004f06 	br	2a8a4 <__umoddi3+0x268>
   2a768:	29c04c36 	bltu	r5,r7,2a89c <__umoddi3+0x260>
   2a76c:	00bfffd4 	movui	r2,65535
   2a770:	11c0582e 	bgeu	r2,r7,2a8d4 <__umoddi3+0x298>
   2a774:	00804034 	movhi	r2,256
   2a778:	10bfffc4 	addi	r2,r2,-1
   2a77c:	11c0e736 	bltu	r2,r7,2ab1c <__umoddi3+0x4e0>
   2a780:	01000404 	movi	r4,16
   2a784:	3904d83a 	srl	r2,r7,r4
   2a788:	00c000f4 	movhi	r3,3
   2a78c:	18c02104 	addi	r3,r3,132
   2a790:	1885883a 	add	r2,r3,r2
   2a794:	14c00003 	ldbu	r19,0(r2)
   2a798:	00c00804 	movi	r3,32
   2a79c:	9927883a 	add	r19,r19,r4
   2a7a0:	1ce9c83a 	sub	r20,r3,r19
   2a7a4:	a000581e 	bne	r20,zero,2a908 <__umoddi3+0x2cc>
   2a7a8:	3c400136 	bltu	r7,r17,2a7b0 <__umoddi3+0x174>
   2a7ac:	8180eb36 	bltu	r16,r6,2ab5c <__umoddi3+0x520>
   2a7b0:	8185c83a 	sub	r2,r16,r6
   2a7b4:	89e3c83a 	sub	r17,r17,r7
   2a7b8:	8089803a 	cmpltu	r4,r16,r2
   2a7bc:	8939c83a 	sub	fp,r17,r4
   2a7c0:	e007883a 	mov	r3,fp
   2a7c4:	00003706 	br	2a8a4 <__umoddi3+0x268>
   2a7c8:	3000041e 	bne	r6,zero,2a7dc <__umoddi3+0x1a0>
   2a7cc:	000b883a 	mov	r5,zero
   2a7d0:	01000044 	movi	r4,1
   2a7d4:	0020a880 	call	20a88 <__udivsi3>
   2a7d8:	1027883a 	mov	r19,r2
   2a7dc:	00bfffd4 	movui	r2,65535
   2a7e0:	14c0402e 	bgeu	r2,r19,2a8e4 <__umoddi3+0x2a8>
   2a7e4:	00804034 	movhi	r2,256
   2a7e8:	10bfffc4 	addi	r2,r2,-1
   2a7ec:	14c0cd36 	bltu	r2,r19,2ab24 <__umoddi3+0x4e8>
   2a7f0:	00800404 	movi	r2,16
   2a7f4:	9886d83a 	srl	r3,r19,r2
   2a7f8:	010000f4 	movhi	r4,3
   2a7fc:	21002104 	addi	r4,r4,132
   2a800:	20c7883a 	add	r3,r4,r3
   2a804:	18c00003 	ldbu	r3,0(r3)
   2a808:	1887883a 	add	r3,r3,r2
   2a80c:	00800804 	movi	r2,32
   2a810:	10e5c83a 	sub	r18,r2,r3
   2a814:	9000901e 	bne	r18,zero,2aa58 <__umoddi3+0x41c>
   2a818:	982cd43a 	srli	r22,r19,16
   2a81c:	8ce3c83a 	sub	r17,r17,r19
   2a820:	9d7fffcc 	andi	r21,r19,65535
   2a824:	b00b883a 	mov	r5,r22
   2a828:	8809883a 	mov	r4,r17
   2a82c:	0020aec0 	call	20aec <__umodsi3>
   2a830:	8809883a 	mov	r4,r17
   2a834:	b00b883a 	mov	r5,r22
   2a838:	1021883a 	mov	r16,r2
   2a83c:	0020a880 	call	20a88 <__udivsi3>
   2a840:	8006943a 	slli	r3,r16,16
   2a844:	a008d43a 	srli	r4,r20,16
   2a848:	1545383a 	mul	r2,r2,r21
   2a84c:	20c8b03a 	or	r4,r4,r3
   2a850:	2080042e 	bgeu	r4,r2,2a864 <__umoddi3+0x228>
   2a854:	24c9883a 	add	r4,r4,r19
   2a858:	24c00236 	bltu	r4,r19,2a864 <__umoddi3+0x228>
   2a85c:	2080012e 	bgeu	r4,r2,2a864 <__umoddi3+0x228>
   2a860:	24c9883a 	add	r4,r4,r19
   2a864:	20a1c83a 	sub	r16,r4,r2
   2a868:	b00b883a 	mov	r5,r22
   2a86c:	8009883a 	mov	r4,r16
   2a870:	0020aec0 	call	20aec <__umodsi3>
   2a874:	1023883a 	mov	r17,r2
   2a878:	b00b883a 	mov	r5,r22
   2a87c:	8009883a 	mov	r4,r16
   2a880:	0020a880 	call	20a88 <__udivsi3>
   2a884:	8822943a 	slli	r17,r17,16
   2a888:	1545383a 	mul	r2,r2,r21
   2a88c:	a53fffcc 	andi	r20,r20,65535
   2a890:	a446b03a 	or	r3,r20,r17
   2a894:	18bfb02e 	bgeu	r3,r2,2a758 <__alt_data_end+0xfffea758>
   2a898:	003fab06 	br	2a748 <__alt_data_end+0xfffea748>
   2a89c:	2005883a 	mov	r2,r4
   2a8a0:	2807883a 	mov	r3,r5
   2a8a4:	dfc00b17 	ldw	ra,44(sp)
   2a8a8:	df000a17 	ldw	fp,40(sp)
   2a8ac:	ddc00917 	ldw	r23,36(sp)
   2a8b0:	dd800817 	ldw	r22,32(sp)
   2a8b4:	dd400717 	ldw	r21,28(sp)
   2a8b8:	dd000617 	ldw	r20,24(sp)
   2a8bc:	dcc00517 	ldw	r19,20(sp)
   2a8c0:	dc800417 	ldw	r18,16(sp)
   2a8c4:	dc400317 	ldw	r17,12(sp)
   2a8c8:	dc000217 	ldw	r16,8(sp)
   2a8cc:	dec00c04 	addi	sp,sp,48
   2a8d0:	f800283a 	ret
   2a8d4:	04c03fc4 	movi	r19,255
   2a8d8:	99c9803a 	cmpltu	r4,r19,r7
   2a8dc:	200890fa 	slli	r4,r4,3
   2a8e0:	003fa806 	br	2a784 <__alt_data_end+0xfffea784>
   2a8e4:	00803fc4 	movi	r2,255
   2a8e8:	14c5803a 	cmpltu	r2,r2,r19
   2a8ec:	100490fa 	slli	r2,r2,3
   2a8f0:	003fc006 	br	2a7f4 <__alt_data_end+0xfffea7f4>
   2a8f4:	00804034 	movhi	r2,256
   2a8f8:	10bfffc4 	addi	r2,r2,-1
   2a8fc:	11808b36 	bltu	r2,r6,2ab2c <__umoddi3+0x4f0>
   2a900:	01000404 	movi	r4,16
   2a904:	003f6406 	br	2a698 <__alt_data_end+0xfffea698>
   2a908:	34c4d83a 	srl	r2,r6,r19
   2a90c:	3d0e983a 	sll	r7,r7,r20
   2a910:	8cf8d83a 	srl	fp,r17,r19
   2a914:	8d10983a 	sll	r8,r17,r20
   2a918:	38aab03a 	or	r21,r7,r2
   2a91c:	a82cd43a 	srli	r22,r21,16
   2a920:	84e2d83a 	srl	r17,r16,r19
   2a924:	e009883a 	mov	r4,fp
   2a928:	b00b883a 	mov	r5,r22
   2a92c:	8a22b03a 	or	r17,r17,r8
   2a930:	3524983a 	sll	r18,r6,r20
   2a934:	0020aec0 	call	20aec <__umodsi3>
   2a938:	e009883a 	mov	r4,fp
   2a93c:	b00b883a 	mov	r5,r22
   2a940:	102f883a 	mov	r23,r2
   2a944:	0020a880 	call	20a88 <__udivsi3>
   2a948:	100d883a 	mov	r6,r2
   2a94c:	b808943a 	slli	r4,r23,16
   2a950:	aa3fffcc 	andi	r8,r21,65535
   2a954:	8804d43a 	srli	r2,r17,16
   2a958:	41af383a 	mul	r23,r8,r6
   2a95c:	8520983a 	sll	r16,r16,r20
   2a960:	1104b03a 	or	r2,r2,r4
   2a964:	15c0042e 	bgeu	r2,r23,2a978 <__umoddi3+0x33c>
   2a968:	1545883a 	add	r2,r2,r21
   2a96c:	30ffffc4 	addi	r3,r6,-1
   2a970:	1540742e 	bgeu	r2,r21,2ab44 <__umoddi3+0x508>
   2a974:	180d883a 	mov	r6,r3
   2a978:	15efc83a 	sub	r23,r2,r23
   2a97c:	b00b883a 	mov	r5,r22
   2a980:	b809883a 	mov	r4,r23
   2a984:	d9800115 	stw	r6,4(sp)
   2a988:	da000015 	stw	r8,0(sp)
   2a98c:	0020aec0 	call	20aec <__umodsi3>
   2a990:	b00b883a 	mov	r5,r22
   2a994:	b809883a 	mov	r4,r23
   2a998:	1039883a 	mov	fp,r2
   2a99c:	0020a880 	call	20a88 <__udivsi3>
   2a9a0:	da000017 	ldw	r8,0(sp)
   2a9a4:	e038943a 	slli	fp,fp,16
   2a9a8:	100b883a 	mov	r5,r2
   2a9ac:	4089383a 	mul	r4,r8,r2
   2a9b0:	8a3fffcc 	andi	r8,r17,65535
   2a9b4:	4710b03a 	or	r8,r8,fp
   2a9b8:	d9800117 	ldw	r6,4(sp)
   2a9bc:	4100042e 	bgeu	r8,r4,2a9d0 <__umoddi3+0x394>
   2a9c0:	4551883a 	add	r8,r8,r21
   2a9c4:	10bfffc4 	addi	r2,r2,-1
   2a9c8:	45405a2e 	bgeu	r8,r21,2ab34 <__umoddi3+0x4f8>
   2a9cc:	100b883a 	mov	r5,r2
   2a9d0:	300c943a 	slli	r6,r6,16
   2a9d4:	91ffffcc 	andi	r7,r18,65535
   2a9d8:	9004d43a 	srli	r2,r18,16
   2a9dc:	314cb03a 	or	r6,r6,r5
   2a9e0:	317fffcc 	andi	r5,r6,65535
   2a9e4:	300cd43a 	srli	r6,r6,16
   2a9e8:	29d3383a 	mul	r9,r5,r7
   2a9ec:	288b383a 	mul	r5,r5,r2
   2a9f0:	31cf383a 	mul	r7,r6,r7
   2a9f4:	4806d43a 	srli	r3,r9,16
   2a9f8:	4111c83a 	sub	r8,r8,r4
   2a9fc:	29cb883a 	add	r5,r5,r7
   2aa00:	194b883a 	add	r5,r3,r5
   2aa04:	3085383a 	mul	r2,r6,r2
   2aa08:	29c0022e 	bgeu	r5,r7,2aa14 <__umoddi3+0x3d8>
   2aa0c:	00c00074 	movhi	r3,1
   2aa10:	10c5883a 	add	r2,r2,r3
   2aa14:	2808d43a 	srli	r4,r5,16
   2aa18:	280a943a 	slli	r5,r5,16
   2aa1c:	4a7fffcc 	andi	r9,r9,65535
   2aa20:	2085883a 	add	r2,r4,r2
   2aa24:	2a4b883a 	add	r5,r5,r9
   2aa28:	40803636 	bltu	r8,r2,2ab04 <__umoddi3+0x4c8>
   2aa2c:	40804d26 	beq	r8,r2,2ab64 <__umoddi3+0x528>
   2aa30:	4089c83a 	sub	r4,r8,r2
   2aa34:	280f883a 	mov	r7,r5
   2aa38:	81cfc83a 	sub	r7,r16,r7
   2aa3c:	81c7803a 	cmpltu	r3,r16,r7
   2aa40:	20c7c83a 	sub	r3,r4,r3
   2aa44:	1cc4983a 	sll	r2,r3,r19
   2aa48:	3d0ed83a 	srl	r7,r7,r20
   2aa4c:	1d06d83a 	srl	r3,r3,r20
   2aa50:	11c4b03a 	or	r2,r2,r7
   2aa54:	003f9306 	br	2a8a4 <__alt_data_end+0xfffea8a4>
   2aa58:	9ca6983a 	sll	r19,r19,r18
   2aa5c:	88e8d83a 	srl	r20,r17,r3
   2aa60:	80c4d83a 	srl	r2,r16,r3
   2aa64:	982cd43a 	srli	r22,r19,16
   2aa68:	8ca2983a 	sll	r17,r17,r18
   2aa6c:	a009883a 	mov	r4,r20
   2aa70:	b00b883a 	mov	r5,r22
   2aa74:	1478b03a 	or	fp,r2,r17
   2aa78:	0020aec0 	call	20aec <__umodsi3>
   2aa7c:	a009883a 	mov	r4,r20
   2aa80:	b00b883a 	mov	r5,r22
   2aa84:	1023883a 	mov	r17,r2
   2aa88:	0020a880 	call	20a88 <__udivsi3>
   2aa8c:	9d7fffcc 	andi	r21,r19,65535
   2aa90:	880a943a 	slli	r5,r17,16
   2aa94:	e008d43a 	srli	r4,fp,16
   2aa98:	a885383a 	mul	r2,r21,r2
   2aa9c:	84a8983a 	sll	r20,r16,r18
   2aaa0:	2148b03a 	or	r4,r4,r5
   2aaa4:	2080042e 	bgeu	r4,r2,2aab8 <__umoddi3+0x47c>
   2aaa8:	24c9883a 	add	r4,r4,r19
   2aaac:	24c00236 	bltu	r4,r19,2aab8 <__umoddi3+0x47c>
   2aab0:	2080012e 	bgeu	r4,r2,2aab8 <__umoddi3+0x47c>
   2aab4:	24c9883a 	add	r4,r4,r19
   2aab8:	20a3c83a 	sub	r17,r4,r2
   2aabc:	b00b883a 	mov	r5,r22
   2aac0:	8809883a 	mov	r4,r17
   2aac4:	0020aec0 	call	20aec <__umodsi3>
   2aac8:	102f883a 	mov	r23,r2
   2aacc:	8809883a 	mov	r4,r17
   2aad0:	b00b883a 	mov	r5,r22
   2aad4:	0020a880 	call	20a88 <__udivsi3>
   2aad8:	b82e943a 	slli	r23,r23,16
   2aadc:	a885383a 	mul	r2,r21,r2
   2aae0:	e13fffcc 	andi	r4,fp,65535
   2aae4:	25c8b03a 	or	r4,r4,r23
   2aae8:	2080042e 	bgeu	r4,r2,2aafc <__umoddi3+0x4c0>
   2aaec:	24c9883a 	add	r4,r4,r19
   2aaf0:	24c00236 	bltu	r4,r19,2aafc <__umoddi3+0x4c0>
   2aaf4:	2080012e 	bgeu	r4,r2,2aafc <__umoddi3+0x4c0>
   2aaf8:	24c9883a 	add	r4,r4,r19
   2aafc:	20a3c83a 	sub	r17,r4,r2
   2ab00:	003f4806 	br	2a824 <__alt_data_end+0xfffea824>
   2ab04:	2c8fc83a 	sub	r7,r5,r18
   2ab08:	1545c83a 	sub	r2,r2,r21
   2ab0c:	29cb803a 	cmpltu	r5,r5,r7
   2ab10:	1145c83a 	sub	r2,r2,r5
   2ab14:	4089c83a 	sub	r4,r8,r2
   2ab18:	003fc706 	br	2aa38 <__alt_data_end+0xfffeaa38>
   2ab1c:	01000604 	movi	r4,24
   2ab20:	003f1806 	br	2a784 <__alt_data_end+0xfffea784>
   2ab24:	00800604 	movi	r2,24
   2ab28:	003f3206 	br	2a7f4 <__alt_data_end+0xfffea7f4>
   2ab2c:	01000604 	movi	r4,24
   2ab30:	003ed906 	br	2a698 <__alt_data_end+0xfffea698>
   2ab34:	413fa52e 	bgeu	r8,r4,2a9cc <__alt_data_end+0xfffea9cc>
   2ab38:	297fff84 	addi	r5,r5,-2
   2ab3c:	4551883a 	add	r8,r8,r21
   2ab40:	003fa306 	br	2a9d0 <__alt_data_end+0xfffea9d0>
   2ab44:	15ff8b2e 	bgeu	r2,r23,2a974 <__alt_data_end+0xfffea974>
   2ab48:	31bfff84 	addi	r6,r6,-2
   2ab4c:	1545883a 	add	r2,r2,r21
   2ab50:	003f8906 	br	2a978 <__alt_data_end+0xfffea978>
   2ab54:	24c9883a 	add	r4,r4,r19
   2ab58:	003eee06 	br	2a714 <__alt_data_end+0xfffea714>
   2ab5c:	8005883a 	mov	r2,r16
   2ab60:	003f1706 	br	2a7c0 <__alt_data_end+0xfffea7c0>
   2ab64:	817fe736 	bltu	r16,r5,2ab04 <__alt_data_end+0xfffeab04>
   2ab68:	280f883a 	mov	r7,r5
   2ab6c:	0009883a 	mov	r4,zero
   2ab70:	003fb106 	br	2aa38 <__alt_data_end+0xfffeaa38>

0002ab74 <__adddf3>:
   2ab74:	02c00434 	movhi	r11,16
   2ab78:	5affffc4 	addi	r11,r11,-1
   2ab7c:	2806d7fa 	srli	r3,r5,31
   2ab80:	2ad4703a 	and	r10,r5,r11
   2ab84:	3ad2703a 	and	r9,r7,r11
   2ab88:	3804d53a 	srli	r2,r7,20
   2ab8c:	3018d77a 	srli	r12,r6,29
   2ab90:	280ad53a 	srli	r5,r5,20
   2ab94:	501490fa 	slli	r10,r10,3
   2ab98:	2010d77a 	srli	r8,r4,29
   2ab9c:	481290fa 	slli	r9,r9,3
   2aba0:	380ed7fa 	srli	r7,r7,31
   2aba4:	defffb04 	addi	sp,sp,-20
   2aba8:	dc800215 	stw	r18,8(sp)
   2abac:	dc400115 	stw	r17,4(sp)
   2abb0:	dc000015 	stw	r16,0(sp)
   2abb4:	dfc00415 	stw	ra,16(sp)
   2abb8:	dcc00315 	stw	r19,12(sp)
   2abbc:	1c803fcc 	andi	r18,r3,255
   2abc0:	2c01ffcc 	andi	r16,r5,2047
   2abc4:	5210b03a 	or	r8,r10,r8
   2abc8:	202290fa 	slli	r17,r4,3
   2abcc:	1081ffcc 	andi	r2,r2,2047
   2abd0:	4b12b03a 	or	r9,r9,r12
   2abd4:	300c90fa 	slli	r6,r6,3
   2abd8:	91c07526 	beq	r18,r7,2adb0 <__adddf3+0x23c>
   2abdc:	8087c83a 	sub	r3,r16,r2
   2abe0:	00c0ab0e 	bge	zero,r3,2ae90 <__adddf3+0x31c>
   2abe4:	10002a1e 	bne	r2,zero,2ac90 <__adddf3+0x11c>
   2abe8:	4984b03a 	or	r2,r9,r6
   2abec:	1000961e 	bne	r2,zero,2ae48 <__adddf3+0x2d4>
   2abf0:	888001cc 	andi	r2,r17,7
   2abf4:	10000726 	beq	r2,zero,2ac14 <__adddf3+0xa0>
   2abf8:	888003cc 	andi	r2,r17,15
   2abfc:	00c00104 	movi	r3,4
   2ac00:	10c00426 	beq	r2,r3,2ac14 <__adddf3+0xa0>
   2ac04:	88c7883a 	add	r3,r17,r3
   2ac08:	1c63803a 	cmpltu	r17,r3,r17
   2ac0c:	4451883a 	add	r8,r8,r17
   2ac10:	1823883a 	mov	r17,r3
   2ac14:	4080202c 	andhi	r2,r8,128
   2ac18:	10005926 	beq	r2,zero,2ad80 <__adddf3+0x20c>
   2ac1c:	84000044 	addi	r16,r16,1
   2ac20:	0081ffc4 	movi	r2,2047
   2ac24:	8080ba26 	beq	r16,r2,2af10 <__adddf3+0x39c>
   2ac28:	00bfe034 	movhi	r2,65408
   2ac2c:	10bfffc4 	addi	r2,r2,-1
   2ac30:	4090703a 	and	r8,r8,r2
   2ac34:	4004977a 	slli	r2,r8,29
   2ac38:	4010927a 	slli	r8,r8,9
   2ac3c:	8822d0fa 	srli	r17,r17,3
   2ac40:	8401ffcc 	andi	r16,r16,2047
   2ac44:	4010d33a 	srli	r8,r8,12
   2ac48:	9007883a 	mov	r3,r18
   2ac4c:	1444b03a 	or	r2,r2,r17
   2ac50:	8401ffcc 	andi	r16,r16,2047
   2ac54:	8020953a 	slli	r16,r16,20
   2ac58:	18c03fcc 	andi	r3,r3,255
   2ac5c:	01000434 	movhi	r4,16
   2ac60:	213fffc4 	addi	r4,r4,-1
   2ac64:	180697fa 	slli	r3,r3,31
   2ac68:	4110703a 	and	r8,r8,r4
   2ac6c:	4410b03a 	or	r8,r8,r16
   2ac70:	40c6b03a 	or	r3,r8,r3
   2ac74:	dfc00417 	ldw	ra,16(sp)
   2ac78:	dcc00317 	ldw	r19,12(sp)
   2ac7c:	dc800217 	ldw	r18,8(sp)
   2ac80:	dc400117 	ldw	r17,4(sp)
   2ac84:	dc000017 	ldw	r16,0(sp)
   2ac88:	dec00504 	addi	sp,sp,20
   2ac8c:	f800283a 	ret
   2ac90:	0081ffc4 	movi	r2,2047
   2ac94:	80bfd626 	beq	r16,r2,2abf0 <__alt_data_end+0xfffeabf0>
   2ac98:	4a402034 	orhi	r9,r9,128
   2ac9c:	00800e04 	movi	r2,56
   2aca0:	10c09f16 	blt	r2,r3,2af20 <__adddf3+0x3ac>
   2aca4:	008007c4 	movi	r2,31
   2aca8:	10c0c216 	blt	r2,r3,2afb4 <__adddf3+0x440>
   2acac:	00800804 	movi	r2,32
   2acb0:	10c5c83a 	sub	r2,r2,r3
   2acb4:	488a983a 	sll	r5,r9,r2
   2acb8:	30c8d83a 	srl	r4,r6,r3
   2acbc:	3084983a 	sll	r2,r6,r2
   2acc0:	48c6d83a 	srl	r3,r9,r3
   2acc4:	290cb03a 	or	r6,r5,r4
   2acc8:	1004c03a 	cmpne	r2,r2,zero
   2accc:	308cb03a 	or	r6,r6,r2
   2acd0:	898dc83a 	sub	r6,r17,r6
   2acd4:	89a3803a 	cmpltu	r17,r17,r6
   2acd8:	40d1c83a 	sub	r8,r8,r3
   2acdc:	4451c83a 	sub	r8,r8,r17
   2ace0:	3023883a 	mov	r17,r6
   2ace4:	4080202c 	andhi	r2,r8,128
   2ace8:	10002326 	beq	r2,zero,2ad78 <__adddf3+0x204>
   2acec:	04c02034 	movhi	r19,128
   2acf0:	9cffffc4 	addi	r19,r19,-1
   2acf4:	44e6703a 	and	r19,r8,r19
   2acf8:	98007626 	beq	r19,zero,2aed4 <__adddf3+0x360>
   2acfc:	9809883a 	mov	r4,r19
   2ad00:	002d1780 	call	2d178 <__clzsi2>
   2ad04:	10fffe04 	addi	r3,r2,-8
   2ad08:	010007c4 	movi	r4,31
   2ad0c:	20c07716 	blt	r4,r3,2aeec <__adddf3+0x378>
   2ad10:	00800804 	movi	r2,32
   2ad14:	10c5c83a 	sub	r2,r2,r3
   2ad18:	8884d83a 	srl	r2,r17,r2
   2ad1c:	98d0983a 	sll	r8,r19,r3
   2ad20:	88e2983a 	sll	r17,r17,r3
   2ad24:	1204b03a 	or	r2,r2,r8
   2ad28:	1c007416 	blt	r3,r16,2aefc <__adddf3+0x388>
   2ad2c:	1c21c83a 	sub	r16,r3,r16
   2ad30:	82000044 	addi	r8,r16,1
   2ad34:	00c007c4 	movi	r3,31
   2ad38:	1a009116 	blt	r3,r8,2af80 <__adddf3+0x40c>
   2ad3c:	00c00804 	movi	r3,32
   2ad40:	1a07c83a 	sub	r3,r3,r8
   2ad44:	8a08d83a 	srl	r4,r17,r8
   2ad48:	88e2983a 	sll	r17,r17,r3
   2ad4c:	10c6983a 	sll	r3,r2,r3
   2ad50:	1210d83a 	srl	r8,r2,r8
   2ad54:	8804c03a 	cmpne	r2,r17,zero
   2ad58:	1906b03a 	or	r3,r3,r4
   2ad5c:	18a2b03a 	or	r17,r3,r2
   2ad60:	0021883a 	mov	r16,zero
   2ad64:	003fa206 	br	2abf0 <__alt_data_end+0xfffeabf0>
   2ad68:	1890b03a 	or	r8,r3,r2
   2ad6c:	40017d26 	beq	r8,zero,2b364 <__adddf3+0x7f0>
   2ad70:	1011883a 	mov	r8,r2
   2ad74:	1823883a 	mov	r17,r3
   2ad78:	888001cc 	andi	r2,r17,7
   2ad7c:	103f9e1e 	bne	r2,zero,2abf8 <__alt_data_end+0xfffeabf8>
   2ad80:	4004977a 	slli	r2,r8,29
   2ad84:	8822d0fa 	srli	r17,r17,3
   2ad88:	4010d0fa 	srli	r8,r8,3
   2ad8c:	9007883a 	mov	r3,r18
   2ad90:	1444b03a 	or	r2,r2,r17
   2ad94:	0101ffc4 	movi	r4,2047
   2ad98:	81002426 	beq	r16,r4,2ae2c <__adddf3+0x2b8>
   2ad9c:	8120703a 	and	r16,r16,r4
   2ada0:	01000434 	movhi	r4,16
   2ada4:	213fffc4 	addi	r4,r4,-1
   2ada8:	4110703a 	and	r8,r8,r4
   2adac:	003fa806 	br	2ac50 <__alt_data_end+0xfffeac50>
   2adb0:	8089c83a 	sub	r4,r16,r2
   2adb4:	01005e0e 	bge	zero,r4,2af30 <__adddf3+0x3bc>
   2adb8:	10002b26 	beq	r2,zero,2ae68 <__adddf3+0x2f4>
   2adbc:	0081ffc4 	movi	r2,2047
   2adc0:	80bf8b26 	beq	r16,r2,2abf0 <__alt_data_end+0xfffeabf0>
   2adc4:	4a402034 	orhi	r9,r9,128
   2adc8:	00800e04 	movi	r2,56
   2adcc:	1100a40e 	bge	r2,r4,2b060 <__adddf3+0x4ec>
   2add0:	498cb03a 	or	r6,r9,r6
   2add4:	300ac03a 	cmpne	r5,r6,zero
   2add8:	0013883a 	mov	r9,zero
   2addc:	2c4b883a 	add	r5,r5,r17
   2ade0:	2c63803a 	cmpltu	r17,r5,r17
   2ade4:	4a11883a 	add	r8,r9,r8
   2ade8:	8a11883a 	add	r8,r17,r8
   2adec:	2823883a 	mov	r17,r5
   2adf0:	4080202c 	andhi	r2,r8,128
   2adf4:	103fe026 	beq	r2,zero,2ad78 <__alt_data_end+0xfffead78>
   2adf8:	84000044 	addi	r16,r16,1
   2adfc:	0081ffc4 	movi	r2,2047
   2ae00:	8080d226 	beq	r16,r2,2b14c <__adddf3+0x5d8>
   2ae04:	00bfe034 	movhi	r2,65408
   2ae08:	10bfffc4 	addi	r2,r2,-1
   2ae0c:	4090703a 	and	r8,r8,r2
   2ae10:	880ad07a 	srli	r5,r17,1
   2ae14:	400897fa 	slli	r4,r8,31
   2ae18:	88c0004c 	andi	r3,r17,1
   2ae1c:	28e2b03a 	or	r17,r5,r3
   2ae20:	4010d07a 	srli	r8,r8,1
   2ae24:	2462b03a 	or	r17,r4,r17
   2ae28:	003f7106 	br	2abf0 <__alt_data_end+0xfffeabf0>
   2ae2c:	4088b03a 	or	r4,r8,r2
   2ae30:	20014526 	beq	r4,zero,2b348 <__adddf3+0x7d4>
   2ae34:	01000434 	movhi	r4,16
   2ae38:	42000234 	orhi	r8,r8,8
   2ae3c:	213fffc4 	addi	r4,r4,-1
   2ae40:	4110703a 	and	r8,r8,r4
   2ae44:	003f8206 	br	2ac50 <__alt_data_end+0xfffeac50>
   2ae48:	18ffffc4 	addi	r3,r3,-1
   2ae4c:	1800491e 	bne	r3,zero,2af74 <__adddf3+0x400>
   2ae50:	898bc83a 	sub	r5,r17,r6
   2ae54:	8963803a 	cmpltu	r17,r17,r5
   2ae58:	4251c83a 	sub	r8,r8,r9
   2ae5c:	4451c83a 	sub	r8,r8,r17
   2ae60:	2823883a 	mov	r17,r5
   2ae64:	003f9f06 	br	2ace4 <__alt_data_end+0xfffeace4>
   2ae68:	4984b03a 	or	r2,r9,r6
   2ae6c:	103f6026 	beq	r2,zero,2abf0 <__alt_data_end+0xfffeabf0>
   2ae70:	213fffc4 	addi	r4,r4,-1
   2ae74:	2000931e 	bne	r4,zero,2b0c4 <__adddf3+0x550>
   2ae78:	898d883a 	add	r6,r17,r6
   2ae7c:	3463803a 	cmpltu	r17,r6,r17
   2ae80:	4251883a 	add	r8,r8,r9
   2ae84:	8a11883a 	add	r8,r17,r8
   2ae88:	3023883a 	mov	r17,r6
   2ae8c:	003fd806 	br	2adf0 <__alt_data_end+0xfffeadf0>
   2ae90:	1800541e 	bne	r3,zero,2afe4 <__adddf3+0x470>
   2ae94:	80800044 	addi	r2,r16,1
   2ae98:	1081ffcc 	andi	r2,r2,2047
   2ae9c:	00c00044 	movi	r3,1
   2aea0:	1880a00e 	bge	r3,r2,2b124 <__adddf3+0x5b0>
   2aea4:	8989c83a 	sub	r4,r17,r6
   2aea8:	8905803a 	cmpltu	r2,r17,r4
   2aeac:	4267c83a 	sub	r19,r8,r9
   2aeb0:	98a7c83a 	sub	r19,r19,r2
   2aeb4:	9880202c 	andhi	r2,r19,128
   2aeb8:	10006326 	beq	r2,zero,2b048 <__adddf3+0x4d4>
   2aebc:	3463c83a 	sub	r17,r6,r17
   2aec0:	4a07c83a 	sub	r3,r9,r8
   2aec4:	344d803a 	cmpltu	r6,r6,r17
   2aec8:	19a7c83a 	sub	r19,r3,r6
   2aecc:	3825883a 	mov	r18,r7
   2aed0:	983f8a1e 	bne	r19,zero,2acfc <__alt_data_end+0xfffeacfc>
   2aed4:	8809883a 	mov	r4,r17
   2aed8:	002d1780 	call	2d178 <__clzsi2>
   2aedc:	10800804 	addi	r2,r2,32
   2aee0:	10fffe04 	addi	r3,r2,-8
   2aee4:	010007c4 	movi	r4,31
   2aee8:	20ff890e 	bge	r4,r3,2ad10 <__alt_data_end+0xfffead10>
   2aeec:	10bff604 	addi	r2,r2,-40
   2aef0:	8884983a 	sll	r2,r17,r2
   2aef4:	0023883a 	mov	r17,zero
   2aef8:	1c3f8c0e 	bge	r3,r16,2ad2c <__alt_data_end+0xfffead2c>
   2aefc:	023fe034 	movhi	r8,65408
   2af00:	423fffc4 	addi	r8,r8,-1
   2af04:	80e1c83a 	sub	r16,r16,r3
   2af08:	1210703a 	and	r8,r2,r8
   2af0c:	003f3806 	br	2abf0 <__alt_data_end+0xfffeabf0>
   2af10:	9007883a 	mov	r3,r18
   2af14:	0011883a 	mov	r8,zero
   2af18:	0005883a 	mov	r2,zero
   2af1c:	003f4c06 	br	2ac50 <__alt_data_end+0xfffeac50>
   2af20:	498cb03a 	or	r6,r9,r6
   2af24:	300cc03a 	cmpne	r6,r6,zero
   2af28:	0007883a 	mov	r3,zero
   2af2c:	003f6806 	br	2acd0 <__alt_data_end+0xfffeacd0>
   2af30:	20009c1e 	bne	r4,zero,2b1a4 <__adddf3+0x630>
   2af34:	80800044 	addi	r2,r16,1
   2af38:	1141ffcc 	andi	r5,r2,2047
   2af3c:	01000044 	movi	r4,1
   2af40:	2140670e 	bge	r4,r5,2b0e0 <__adddf3+0x56c>
   2af44:	0101ffc4 	movi	r4,2047
   2af48:	11007f26 	beq	r2,r4,2b148 <__adddf3+0x5d4>
   2af4c:	898d883a 	add	r6,r17,r6
   2af50:	4247883a 	add	r3,r8,r9
   2af54:	3451803a 	cmpltu	r8,r6,r17
   2af58:	40d1883a 	add	r8,r8,r3
   2af5c:	402297fa 	slli	r17,r8,31
   2af60:	300cd07a 	srli	r6,r6,1
   2af64:	4010d07a 	srli	r8,r8,1
   2af68:	1021883a 	mov	r16,r2
   2af6c:	89a2b03a 	or	r17,r17,r6
   2af70:	003f1f06 	br	2abf0 <__alt_data_end+0xfffeabf0>
   2af74:	0081ffc4 	movi	r2,2047
   2af78:	80bf481e 	bne	r16,r2,2ac9c <__alt_data_end+0xfffeac9c>
   2af7c:	003f1c06 	br	2abf0 <__alt_data_end+0xfffeabf0>
   2af80:	843ff844 	addi	r16,r16,-31
   2af84:	01000804 	movi	r4,32
   2af88:	1406d83a 	srl	r3,r2,r16
   2af8c:	41005026 	beq	r8,r4,2b0d0 <__adddf3+0x55c>
   2af90:	01001004 	movi	r4,64
   2af94:	2211c83a 	sub	r8,r4,r8
   2af98:	1204983a 	sll	r2,r2,r8
   2af9c:	88a2b03a 	or	r17,r17,r2
   2afa0:	8822c03a 	cmpne	r17,r17,zero
   2afa4:	1c62b03a 	or	r17,r3,r17
   2afa8:	0011883a 	mov	r8,zero
   2afac:	0021883a 	mov	r16,zero
   2afb0:	003f7106 	br	2ad78 <__alt_data_end+0xfffead78>
   2afb4:	193ff804 	addi	r4,r3,-32
   2afb8:	00800804 	movi	r2,32
   2afbc:	4908d83a 	srl	r4,r9,r4
   2afc0:	18804526 	beq	r3,r2,2b0d8 <__adddf3+0x564>
   2afc4:	00801004 	movi	r2,64
   2afc8:	10c5c83a 	sub	r2,r2,r3
   2afcc:	4886983a 	sll	r3,r9,r2
   2afd0:	198cb03a 	or	r6,r3,r6
   2afd4:	300cc03a 	cmpne	r6,r6,zero
   2afd8:	218cb03a 	or	r6,r4,r6
   2afdc:	0007883a 	mov	r3,zero
   2afe0:	003f3b06 	br	2acd0 <__alt_data_end+0xfffeacd0>
   2afe4:	80002a26 	beq	r16,zero,2b090 <__adddf3+0x51c>
   2afe8:	0101ffc4 	movi	r4,2047
   2afec:	11006826 	beq	r2,r4,2b190 <__adddf3+0x61c>
   2aff0:	00c7c83a 	sub	r3,zero,r3
   2aff4:	42002034 	orhi	r8,r8,128
   2aff8:	01000e04 	movi	r4,56
   2affc:	20c07c16 	blt	r4,r3,2b1f0 <__adddf3+0x67c>
   2b000:	010007c4 	movi	r4,31
   2b004:	20c0da16 	blt	r4,r3,2b370 <__adddf3+0x7fc>
   2b008:	01000804 	movi	r4,32
   2b00c:	20c9c83a 	sub	r4,r4,r3
   2b010:	4114983a 	sll	r10,r8,r4
   2b014:	88cad83a 	srl	r5,r17,r3
   2b018:	8908983a 	sll	r4,r17,r4
   2b01c:	40c6d83a 	srl	r3,r8,r3
   2b020:	5162b03a 	or	r17,r10,r5
   2b024:	2008c03a 	cmpne	r4,r4,zero
   2b028:	8922b03a 	or	r17,r17,r4
   2b02c:	3463c83a 	sub	r17,r6,r17
   2b030:	48c7c83a 	sub	r3,r9,r3
   2b034:	344d803a 	cmpltu	r6,r6,r17
   2b038:	1991c83a 	sub	r8,r3,r6
   2b03c:	1021883a 	mov	r16,r2
   2b040:	3825883a 	mov	r18,r7
   2b044:	003f2706 	br	2ace4 <__alt_data_end+0xfffeace4>
   2b048:	24d0b03a 	or	r8,r4,r19
   2b04c:	40001b1e 	bne	r8,zero,2b0bc <__adddf3+0x548>
   2b050:	0005883a 	mov	r2,zero
   2b054:	0007883a 	mov	r3,zero
   2b058:	0021883a 	mov	r16,zero
   2b05c:	003f4d06 	br	2ad94 <__alt_data_end+0xfffead94>
   2b060:	008007c4 	movi	r2,31
   2b064:	11003c16 	blt	r2,r4,2b158 <__adddf3+0x5e4>
   2b068:	00800804 	movi	r2,32
   2b06c:	1105c83a 	sub	r2,r2,r4
   2b070:	488e983a 	sll	r7,r9,r2
   2b074:	310ad83a 	srl	r5,r6,r4
   2b078:	3084983a 	sll	r2,r6,r2
   2b07c:	4912d83a 	srl	r9,r9,r4
   2b080:	394ab03a 	or	r5,r7,r5
   2b084:	1004c03a 	cmpne	r2,r2,zero
   2b088:	288ab03a 	or	r5,r5,r2
   2b08c:	003f5306 	br	2addc <__alt_data_end+0xfffeaddc>
   2b090:	4448b03a 	or	r4,r8,r17
   2b094:	20003e26 	beq	r4,zero,2b190 <__adddf3+0x61c>
   2b098:	00c6303a 	nor	r3,zero,r3
   2b09c:	18003a1e 	bne	r3,zero,2b188 <__adddf3+0x614>
   2b0a0:	3463c83a 	sub	r17,r6,r17
   2b0a4:	4a07c83a 	sub	r3,r9,r8
   2b0a8:	344d803a 	cmpltu	r6,r6,r17
   2b0ac:	1991c83a 	sub	r8,r3,r6
   2b0b0:	1021883a 	mov	r16,r2
   2b0b4:	3825883a 	mov	r18,r7
   2b0b8:	003f0a06 	br	2ace4 <__alt_data_end+0xfffeace4>
   2b0bc:	2023883a 	mov	r17,r4
   2b0c0:	003f0d06 	br	2acf8 <__alt_data_end+0xfffeacf8>
   2b0c4:	0081ffc4 	movi	r2,2047
   2b0c8:	80bf3f1e 	bne	r16,r2,2adc8 <__alt_data_end+0xfffeadc8>
   2b0cc:	003ec806 	br	2abf0 <__alt_data_end+0xfffeabf0>
   2b0d0:	0005883a 	mov	r2,zero
   2b0d4:	003fb106 	br	2af9c <__alt_data_end+0xfffeaf9c>
   2b0d8:	0007883a 	mov	r3,zero
   2b0dc:	003fbc06 	br	2afd0 <__alt_data_end+0xfffeafd0>
   2b0e0:	4444b03a 	or	r2,r8,r17
   2b0e4:	8000871e 	bne	r16,zero,2b304 <__adddf3+0x790>
   2b0e8:	1000ba26 	beq	r2,zero,2b3d4 <__adddf3+0x860>
   2b0ec:	4984b03a 	or	r2,r9,r6
   2b0f0:	103ebf26 	beq	r2,zero,2abf0 <__alt_data_end+0xfffeabf0>
   2b0f4:	8985883a 	add	r2,r17,r6
   2b0f8:	4247883a 	add	r3,r8,r9
   2b0fc:	1451803a 	cmpltu	r8,r2,r17
   2b100:	40d1883a 	add	r8,r8,r3
   2b104:	40c0202c 	andhi	r3,r8,128
   2b108:	1023883a 	mov	r17,r2
   2b10c:	183f1a26 	beq	r3,zero,2ad78 <__alt_data_end+0xfffead78>
   2b110:	00bfe034 	movhi	r2,65408
   2b114:	10bfffc4 	addi	r2,r2,-1
   2b118:	2021883a 	mov	r16,r4
   2b11c:	4090703a 	and	r8,r8,r2
   2b120:	003eb306 	br	2abf0 <__alt_data_end+0xfffeabf0>
   2b124:	4444b03a 	or	r2,r8,r17
   2b128:	8000291e 	bne	r16,zero,2b1d0 <__adddf3+0x65c>
   2b12c:	10004b1e 	bne	r2,zero,2b25c <__adddf3+0x6e8>
   2b130:	4990b03a 	or	r8,r9,r6
   2b134:	40008b26 	beq	r8,zero,2b364 <__adddf3+0x7f0>
   2b138:	4811883a 	mov	r8,r9
   2b13c:	3023883a 	mov	r17,r6
   2b140:	3825883a 	mov	r18,r7
   2b144:	003eaa06 	br	2abf0 <__alt_data_end+0xfffeabf0>
   2b148:	1021883a 	mov	r16,r2
   2b14c:	0011883a 	mov	r8,zero
   2b150:	0005883a 	mov	r2,zero
   2b154:	003f0f06 	br	2ad94 <__alt_data_end+0xfffead94>
   2b158:	217ff804 	addi	r5,r4,-32
   2b15c:	00800804 	movi	r2,32
   2b160:	494ad83a 	srl	r5,r9,r5
   2b164:	20807d26 	beq	r4,r2,2b35c <__adddf3+0x7e8>
   2b168:	00801004 	movi	r2,64
   2b16c:	1109c83a 	sub	r4,r2,r4
   2b170:	4912983a 	sll	r9,r9,r4
   2b174:	498cb03a 	or	r6,r9,r6
   2b178:	300cc03a 	cmpne	r6,r6,zero
   2b17c:	298ab03a 	or	r5,r5,r6
   2b180:	0013883a 	mov	r9,zero
   2b184:	003f1506 	br	2addc <__alt_data_end+0xfffeaddc>
   2b188:	0101ffc4 	movi	r4,2047
   2b18c:	113f9a1e 	bne	r2,r4,2aff8 <__alt_data_end+0xfffeaff8>
   2b190:	4811883a 	mov	r8,r9
   2b194:	3023883a 	mov	r17,r6
   2b198:	1021883a 	mov	r16,r2
   2b19c:	3825883a 	mov	r18,r7
   2b1a0:	003e9306 	br	2abf0 <__alt_data_end+0xfffeabf0>
   2b1a4:	8000161e 	bne	r16,zero,2b200 <__adddf3+0x68c>
   2b1a8:	444ab03a 	or	r5,r8,r17
   2b1ac:	28005126 	beq	r5,zero,2b2f4 <__adddf3+0x780>
   2b1b0:	0108303a 	nor	r4,zero,r4
   2b1b4:	20004d1e 	bne	r4,zero,2b2ec <__adddf3+0x778>
   2b1b8:	89a3883a 	add	r17,r17,r6
   2b1bc:	4253883a 	add	r9,r8,r9
   2b1c0:	898d803a 	cmpltu	r6,r17,r6
   2b1c4:	3251883a 	add	r8,r6,r9
   2b1c8:	1021883a 	mov	r16,r2
   2b1cc:	003f0806 	br	2adf0 <__alt_data_end+0xfffeadf0>
   2b1d0:	1000301e 	bne	r2,zero,2b294 <__adddf3+0x720>
   2b1d4:	4984b03a 	or	r2,r9,r6
   2b1d8:	10007126 	beq	r2,zero,2b3a0 <__adddf3+0x82c>
   2b1dc:	4811883a 	mov	r8,r9
   2b1e0:	3023883a 	mov	r17,r6
   2b1e4:	3825883a 	mov	r18,r7
   2b1e8:	0401ffc4 	movi	r16,2047
   2b1ec:	003e8006 	br	2abf0 <__alt_data_end+0xfffeabf0>
   2b1f0:	4462b03a 	or	r17,r8,r17
   2b1f4:	8822c03a 	cmpne	r17,r17,zero
   2b1f8:	0007883a 	mov	r3,zero
   2b1fc:	003f8b06 	br	2b02c <__alt_data_end+0xfffeb02c>
   2b200:	0141ffc4 	movi	r5,2047
   2b204:	11403b26 	beq	r2,r5,2b2f4 <__adddf3+0x780>
   2b208:	0109c83a 	sub	r4,zero,r4
   2b20c:	42002034 	orhi	r8,r8,128
   2b210:	01400e04 	movi	r5,56
   2b214:	29006716 	blt	r5,r4,2b3b4 <__adddf3+0x840>
   2b218:	014007c4 	movi	r5,31
   2b21c:	29007016 	blt	r5,r4,2b3e0 <__adddf3+0x86c>
   2b220:	01400804 	movi	r5,32
   2b224:	290bc83a 	sub	r5,r5,r4
   2b228:	4154983a 	sll	r10,r8,r5
   2b22c:	890ed83a 	srl	r7,r17,r4
   2b230:	894a983a 	sll	r5,r17,r5
   2b234:	4108d83a 	srl	r4,r8,r4
   2b238:	51e2b03a 	or	r17,r10,r7
   2b23c:	280ac03a 	cmpne	r5,r5,zero
   2b240:	8962b03a 	or	r17,r17,r5
   2b244:	89a3883a 	add	r17,r17,r6
   2b248:	2253883a 	add	r9,r4,r9
   2b24c:	898d803a 	cmpltu	r6,r17,r6
   2b250:	3251883a 	add	r8,r6,r9
   2b254:	1021883a 	mov	r16,r2
   2b258:	003ee506 	br	2adf0 <__alt_data_end+0xfffeadf0>
   2b25c:	4984b03a 	or	r2,r9,r6
   2b260:	103e6326 	beq	r2,zero,2abf0 <__alt_data_end+0xfffeabf0>
   2b264:	8987c83a 	sub	r3,r17,r6
   2b268:	88c9803a 	cmpltu	r4,r17,r3
   2b26c:	4245c83a 	sub	r2,r8,r9
   2b270:	1105c83a 	sub	r2,r2,r4
   2b274:	1100202c 	andhi	r4,r2,128
   2b278:	203ebb26 	beq	r4,zero,2ad68 <__alt_data_end+0xfffead68>
   2b27c:	3463c83a 	sub	r17,r6,r17
   2b280:	4a07c83a 	sub	r3,r9,r8
   2b284:	344d803a 	cmpltu	r6,r6,r17
   2b288:	1991c83a 	sub	r8,r3,r6
   2b28c:	3825883a 	mov	r18,r7
   2b290:	003e5706 	br	2abf0 <__alt_data_end+0xfffeabf0>
   2b294:	4984b03a 	or	r2,r9,r6
   2b298:	10002e26 	beq	r2,zero,2b354 <__adddf3+0x7e0>
   2b29c:	4004d0fa 	srli	r2,r8,3
   2b2a0:	8822d0fa 	srli	r17,r17,3
   2b2a4:	4010977a 	slli	r8,r8,29
   2b2a8:	10c0022c 	andhi	r3,r2,8
   2b2ac:	4462b03a 	or	r17,r8,r17
   2b2b0:	18000826 	beq	r3,zero,2b2d4 <__adddf3+0x760>
   2b2b4:	4808d0fa 	srli	r4,r9,3
   2b2b8:	20c0022c 	andhi	r3,r4,8
   2b2bc:	1800051e 	bne	r3,zero,2b2d4 <__adddf3+0x760>
   2b2c0:	300cd0fa 	srli	r6,r6,3
   2b2c4:	4806977a 	slli	r3,r9,29
   2b2c8:	2005883a 	mov	r2,r4
   2b2cc:	3825883a 	mov	r18,r7
   2b2d0:	19a2b03a 	or	r17,r3,r6
   2b2d4:	8810d77a 	srli	r8,r17,29
   2b2d8:	100490fa 	slli	r2,r2,3
   2b2dc:	882290fa 	slli	r17,r17,3
   2b2e0:	0401ffc4 	movi	r16,2047
   2b2e4:	4090b03a 	or	r8,r8,r2
   2b2e8:	003e4106 	br	2abf0 <__alt_data_end+0xfffeabf0>
   2b2ec:	0141ffc4 	movi	r5,2047
   2b2f0:	117fc71e 	bne	r2,r5,2b210 <__alt_data_end+0xfffeb210>
   2b2f4:	4811883a 	mov	r8,r9
   2b2f8:	3023883a 	mov	r17,r6
   2b2fc:	1021883a 	mov	r16,r2
   2b300:	003e3b06 	br	2abf0 <__alt_data_end+0xfffeabf0>
   2b304:	10002f26 	beq	r2,zero,2b3c4 <__adddf3+0x850>
   2b308:	4984b03a 	or	r2,r9,r6
   2b30c:	10001126 	beq	r2,zero,2b354 <__adddf3+0x7e0>
   2b310:	4004d0fa 	srli	r2,r8,3
   2b314:	8822d0fa 	srli	r17,r17,3
   2b318:	4010977a 	slli	r8,r8,29
   2b31c:	10c0022c 	andhi	r3,r2,8
   2b320:	4462b03a 	or	r17,r8,r17
   2b324:	183feb26 	beq	r3,zero,2b2d4 <__alt_data_end+0xfffeb2d4>
   2b328:	4808d0fa 	srli	r4,r9,3
   2b32c:	20c0022c 	andhi	r3,r4,8
   2b330:	183fe81e 	bne	r3,zero,2b2d4 <__alt_data_end+0xfffeb2d4>
   2b334:	300cd0fa 	srli	r6,r6,3
   2b338:	4806977a 	slli	r3,r9,29
   2b33c:	2005883a 	mov	r2,r4
   2b340:	19a2b03a 	or	r17,r3,r6
   2b344:	003fe306 	br	2b2d4 <__alt_data_end+0xfffeb2d4>
   2b348:	0011883a 	mov	r8,zero
   2b34c:	0005883a 	mov	r2,zero
   2b350:	003e3f06 	br	2ac50 <__alt_data_end+0xfffeac50>
   2b354:	0401ffc4 	movi	r16,2047
   2b358:	003e2506 	br	2abf0 <__alt_data_end+0xfffeabf0>
   2b35c:	0013883a 	mov	r9,zero
   2b360:	003f8406 	br	2b174 <__alt_data_end+0xfffeb174>
   2b364:	0005883a 	mov	r2,zero
   2b368:	0007883a 	mov	r3,zero
   2b36c:	003e8906 	br	2ad94 <__alt_data_end+0xfffead94>
   2b370:	197ff804 	addi	r5,r3,-32
   2b374:	01000804 	movi	r4,32
   2b378:	414ad83a 	srl	r5,r8,r5
   2b37c:	19002426 	beq	r3,r4,2b410 <__adddf3+0x89c>
   2b380:	01001004 	movi	r4,64
   2b384:	20c7c83a 	sub	r3,r4,r3
   2b388:	40c6983a 	sll	r3,r8,r3
   2b38c:	1c46b03a 	or	r3,r3,r17
   2b390:	1806c03a 	cmpne	r3,r3,zero
   2b394:	28e2b03a 	or	r17,r5,r3
   2b398:	0007883a 	mov	r3,zero
   2b39c:	003f2306 	br	2b02c <__alt_data_end+0xfffeb02c>
   2b3a0:	0007883a 	mov	r3,zero
   2b3a4:	5811883a 	mov	r8,r11
   2b3a8:	00bfffc4 	movi	r2,-1
   2b3ac:	0401ffc4 	movi	r16,2047
   2b3b0:	003e7806 	br	2ad94 <__alt_data_end+0xfffead94>
   2b3b4:	4462b03a 	or	r17,r8,r17
   2b3b8:	8822c03a 	cmpne	r17,r17,zero
   2b3bc:	0009883a 	mov	r4,zero
   2b3c0:	003fa006 	br	2b244 <__alt_data_end+0xfffeb244>
   2b3c4:	4811883a 	mov	r8,r9
   2b3c8:	3023883a 	mov	r17,r6
   2b3cc:	0401ffc4 	movi	r16,2047
   2b3d0:	003e0706 	br	2abf0 <__alt_data_end+0xfffeabf0>
   2b3d4:	4811883a 	mov	r8,r9
   2b3d8:	3023883a 	mov	r17,r6
   2b3dc:	003e0406 	br	2abf0 <__alt_data_end+0xfffeabf0>
   2b3e0:	21fff804 	addi	r7,r4,-32
   2b3e4:	01400804 	movi	r5,32
   2b3e8:	41ced83a 	srl	r7,r8,r7
   2b3ec:	21400a26 	beq	r4,r5,2b418 <__adddf3+0x8a4>
   2b3f0:	01401004 	movi	r5,64
   2b3f4:	2909c83a 	sub	r4,r5,r4
   2b3f8:	4108983a 	sll	r4,r8,r4
   2b3fc:	2448b03a 	or	r4,r4,r17
   2b400:	2008c03a 	cmpne	r4,r4,zero
   2b404:	3922b03a 	or	r17,r7,r4
   2b408:	0009883a 	mov	r4,zero
   2b40c:	003f8d06 	br	2b244 <__alt_data_end+0xfffeb244>
   2b410:	0007883a 	mov	r3,zero
   2b414:	003fdd06 	br	2b38c <__alt_data_end+0xfffeb38c>
   2b418:	0009883a 	mov	r4,zero
   2b41c:	003ff706 	br	2b3fc <__alt_data_end+0xfffeb3fc>

0002b420 <__divdf3>:
   2b420:	defff204 	addi	sp,sp,-56
   2b424:	dd400915 	stw	r21,36(sp)
   2b428:	282ad53a 	srli	r21,r5,20
   2b42c:	dd000815 	stw	r20,32(sp)
   2b430:	2828d7fa 	srli	r20,r5,31
   2b434:	dc000415 	stw	r16,16(sp)
   2b438:	04000434 	movhi	r16,16
   2b43c:	df000c15 	stw	fp,48(sp)
   2b440:	843fffc4 	addi	r16,r16,-1
   2b444:	dfc00d15 	stw	ra,52(sp)
   2b448:	ddc00b15 	stw	r23,44(sp)
   2b44c:	dd800a15 	stw	r22,40(sp)
   2b450:	dcc00715 	stw	r19,28(sp)
   2b454:	dc800615 	stw	r18,24(sp)
   2b458:	dc400515 	stw	r17,20(sp)
   2b45c:	ad41ffcc 	andi	r21,r21,2047
   2b460:	2c20703a 	and	r16,r5,r16
   2b464:	a7003fcc 	andi	fp,r20,255
   2b468:	a8006126 	beq	r21,zero,2b5f0 <__divdf3+0x1d0>
   2b46c:	0081ffc4 	movi	r2,2047
   2b470:	2025883a 	mov	r18,r4
   2b474:	a8803726 	beq	r21,r2,2b554 <__divdf3+0x134>
   2b478:	80800434 	orhi	r2,r16,16
   2b47c:	100490fa 	slli	r2,r2,3
   2b480:	2020d77a 	srli	r16,r4,29
   2b484:	202490fa 	slli	r18,r4,3
   2b488:	ad7f0044 	addi	r21,r21,-1023
   2b48c:	80a0b03a 	or	r16,r16,r2
   2b490:	0027883a 	mov	r19,zero
   2b494:	0013883a 	mov	r9,zero
   2b498:	3804d53a 	srli	r2,r7,20
   2b49c:	382cd7fa 	srli	r22,r7,31
   2b4a0:	04400434 	movhi	r17,16
   2b4a4:	8c7fffc4 	addi	r17,r17,-1
   2b4a8:	1081ffcc 	andi	r2,r2,2047
   2b4ac:	3011883a 	mov	r8,r6
   2b4b0:	3c62703a 	and	r17,r7,r17
   2b4b4:	b5c03fcc 	andi	r23,r22,255
   2b4b8:	10006c26 	beq	r2,zero,2b66c <__divdf3+0x24c>
   2b4bc:	00c1ffc4 	movi	r3,2047
   2b4c0:	10c06426 	beq	r2,r3,2b654 <__divdf3+0x234>
   2b4c4:	88c00434 	orhi	r3,r17,16
   2b4c8:	180690fa 	slli	r3,r3,3
   2b4cc:	3022d77a 	srli	r17,r6,29
   2b4d0:	301090fa 	slli	r8,r6,3
   2b4d4:	10bf0044 	addi	r2,r2,-1023
   2b4d8:	88e2b03a 	or	r17,r17,r3
   2b4dc:	000f883a 	mov	r7,zero
   2b4e0:	a58cf03a 	xor	r6,r20,r22
   2b4e4:	3cc8b03a 	or	r4,r7,r19
   2b4e8:	a8abc83a 	sub	r21,r21,r2
   2b4ec:	008003c4 	movi	r2,15
   2b4f0:	3007883a 	mov	r3,r6
   2b4f4:	34c03fcc 	andi	r19,r6,255
   2b4f8:	11009036 	bltu	r2,r4,2b73c <__divdf3+0x31c>
   2b4fc:	200890ba 	slli	r4,r4,2
   2b500:	008000f4 	movhi	r2,3
   2b504:	10ad4504 	addi	r2,r2,-19180
   2b508:	2089883a 	add	r4,r4,r2
   2b50c:	20800017 	ldw	r2,0(r4)
   2b510:	1000683a 	jmp	r2
   2b514:	0002b73c 	xorhi	zero,zero,2780
   2b518:	0002b58c 	andi	zero,zero,2774
   2b51c:	0002b72c 	andhi	zero,zero,2780
   2b520:	0002b580 	call	2b58 <__alt_mem_onchip_memory2_0-0x1d4a8>
   2b524:	0002b72c 	andhi	zero,zero,2780
   2b528:	0002b700 	call	2b70 <__alt_mem_onchip_memory2_0-0x1d490>
   2b52c:	0002b72c 	andhi	zero,zero,2780
   2b530:	0002b580 	call	2b58 <__alt_mem_onchip_memory2_0-0x1d4a8>
   2b534:	0002b58c 	andi	zero,zero,2774
   2b538:	0002b58c 	andi	zero,zero,2774
   2b53c:	0002b700 	call	2b70 <__alt_mem_onchip_memory2_0-0x1d490>
   2b540:	0002b580 	call	2b58 <__alt_mem_onchip_memory2_0-0x1d4a8>
   2b544:	0002b570 	cmpltui	zero,zero,2773
   2b548:	0002b570 	cmpltui	zero,zero,2773
   2b54c:	0002b570 	cmpltui	zero,zero,2773
   2b550:	0002ba20 	cmpeqi	zero,zero,2792
   2b554:	2404b03a 	or	r2,r4,r16
   2b558:	1000661e 	bne	r2,zero,2b6f4 <__divdf3+0x2d4>
   2b55c:	04c00204 	movi	r19,8
   2b560:	0021883a 	mov	r16,zero
   2b564:	0025883a 	mov	r18,zero
   2b568:	02400084 	movi	r9,2
   2b56c:	003fca06 	br	2b498 <__alt_data_end+0xfffeb498>
   2b570:	8023883a 	mov	r17,r16
   2b574:	9011883a 	mov	r8,r18
   2b578:	e02f883a 	mov	r23,fp
   2b57c:	480f883a 	mov	r7,r9
   2b580:	00800084 	movi	r2,2
   2b584:	3881311e 	bne	r7,r2,2ba4c <__divdf3+0x62c>
   2b588:	b827883a 	mov	r19,r23
   2b58c:	98c0004c 	andi	r3,r19,1
   2b590:	0081ffc4 	movi	r2,2047
   2b594:	000b883a 	mov	r5,zero
   2b598:	0025883a 	mov	r18,zero
   2b59c:	1004953a 	slli	r2,r2,20
   2b5a0:	18c03fcc 	andi	r3,r3,255
   2b5a4:	04400434 	movhi	r17,16
   2b5a8:	8c7fffc4 	addi	r17,r17,-1
   2b5ac:	180697fa 	slli	r3,r3,31
   2b5b0:	2c4a703a 	and	r5,r5,r17
   2b5b4:	288ab03a 	or	r5,r5,r2
   2b5b8:	28c6b03a 	or	r3,r5,r3
   2b5bc:	9005883a 	mov	r2,r18
   2b5c0:	dfc00d17 	ldw	ra,52(sp)
   2b5c4:	df000c17 	ldw	fp,48(sp)
   2b5c8:	ddc00b17 	ldw	r23,44(sp)
   2b5cc:	dd800a17 	ldw	r22,40(sp)
   2b5d0:	dd400917 	ldw	r21,36(sp)
   2b5d4:	dd000817 	ldw	r20,32(sp)
   2b5d8:	dcc00717 	ldw	r19,28(sp)
   2b5dc:	dc800617 	ldw	r18,24(sp)
   2b5e0:	dc400517 	ldw	r17,20(sp)
   2b5e4:	dc000417 	ldw	r16,16(sp)
   2b5e8:	dec00e04 	addi	sp,sp,56
   2b5ec:	f800283a 	ret
   2b5f0:	2404b03a 	or	r2,r4,r16
   2b5f4:	2027883a 	mov	r19,r4
   2b5f8:	10003926 	beq	r2,zero,2b6e0 <__divdf3+0x2c0>
   2b5fc:	80012e26 	beq	r16,zero,2bab8 <__divdf3+0x698>
   2b600:	8009883a 	mov	r4,r16
   2b604:	d9800315 	stw	r6,12(sp)
   2b608:	d9c00215 	stw	r7,8(sp)
   2b60c:	002d1780 	call	2d178 <__clzsi2>
   2b610:	d9800317 	ldw	r6,12(sp)
   2b614:	d9c00217 	ldw	r7,8(sp)
   2b618:	113ffd44 	addi	r4,r2,-11
   2b61c:	00c00704 	movi	r3,28
   2b620:	19012116 	blt	r3,r4,2baa8 <__divdf3+0x688>
   2b624:	00c00744 	movi	r3,29
   2b628:	147ffe04 	addi	r17,r2,-8
   2b62c:	1907c83a 	sub	r3,r3,r4
   2b630:	8460983a 	sll	r16,r16,r17
   2b634:	98c6d83a 	srl	r3,r19,r3
   2b638:	9c64983a 	sll	r18,r19,r17
   2b63c:	1c20b03a 	or	r16,r3,r16
   2b640:	1080fcc4 	addi	r2,r2,1011
   2b644:	00abc83a 	sub	r21,zero,r2
   2b648:	0027883a 	mov	r19,zero
   2b64c:	0013883a 	mov	r9,zero
   2b650:	003f9106 	br	2b498 <__alt_data_end+0xfffeb498>
   2b654:	3446b03a 	or	r3,r6,r17
   2b658:	18001f1e 	bne	r3,zero,2b6d8 <__divdf3+0x2b8>
   2b65c:	0023883a 	mov	r17,zero
   2b660:	0011883a 	mov	r8,zero
   2b664:	01c00084 	movi	r7,2
   2b668:	003f9d06 	br	2b4e0 <__alt_data_end+0xfffeb4e0>
   2b66c:	3446b03a 	or	r3,r6,r17
   2b670:	18001526 	beq	r3,zero,2b6c8 <__divdf3+0x2a8>
   2b674:	88011b26 	beq	r17,zero,2bae4 <__divdf3+0x6c4>
   2b678:	8809883a 	mov	r4,r17
   2b67c:	d9800315 	stw	r6,12(sp)
   2b680:	da400115 	stw	r9,4(sp)
   2b684:	002d1780 	call	2d178 <__clzsi2>
   2b688:	d9800317 	ldw	r6,12(sp)
   2b68c:	da400117 	ldw	r9,4(sp)
   2b690:	113ffd44 	addi	r4,r2,-11
   2b694:	00c00704 	movi	r3,28
   2b698:	19010e16 	blt	r3,r4,2bad4 <__divdf3+0x6b4>
   2b69c:	00c00744 	movi	r3,29
   2b6a0:	123ffe04 	addi	r8,r2,-8
   2b6a4:	1907c83a 	sub	r3,r3,r4
   2b6a8:	8a22983a 	sll	r17,r17,r8
   2b6ac:	30c6d83a 	srl	r3,r6,r3
   2b6b0:	3210983a 	sll	r8,r6,r8
   2b6b4:	1c62b03a 	or	r17,r3,r17
   2b6b8:	1080fcc4 	addi	r2,r2,1011
   2b6bc:	0085c83a 	sub	r2,zero,r2
   2b6c0:	000f883a 	mov	r7,zero
   2b6c4:	003f8606 	br	2b4e0 <__alt_data_end+0xfffeb4e0>
   2b6c8:	0023883a 	mov	r17,zero
   2b6cc:	0011883a 	mov	r8,zero
   2b6d0:	01c00044 	movi	r7,1
   2b6d4:	003f8206 	br	2b4e0 <__alt_data_end+0xfffeb4e0>
   2b6d8:	01c000c4 	movi	r7,3
   2b6dc:	003f8006 	br	2b4e0 <__alt_data_end+0xfffeb4e0>
   2b6e0:	04c00104 	movi	r19,4
   2b6e4:	0021883a 	mov	r16,zero
   2b6e8:	0025883a 	mov	r18,zero
   2b6ec:	02400044 	movi	r9,1
   2b6f0:	003f6906 	br	2b498 <__alt_data_end+0xfffeb498>
   2b6f4:	04c00304 	movi	r19,12
   2b6f8:	024000c4 	movi	r9,3
   2b6fc:	003f6606 	br	2b498 <__alt_data_end+0xfffeb498>
   2b700:	01400434 	movhi	r5,16
   2b704:	0007883a 	mov	r3,zero
   2b708:	297fffc4 	addi	r5,r5,-1
   2b70c:	04bfffc4 	movi	r18,-1
   2b710:	0081ffc4 	movi	r2,2047
   2b714:	003fa106 	br	2b59c <__alt_data_end+0xfffeb59c>
   2b718:	00c00044 	movi	r3,1
   2b71c:	1887c83a 	sub	r3,r3,r2
   2b720:	01000e04 	movi	r4,56
   2b724:	20c1210e 	bge	r4,r3,2bbac <__divdf3+0x78c>
   2b728:	98c0004c 	andi	r3,r19,1
   2b72c:	0005883a 	mov	r2,zero
   2b730:	000b883a 	mov	r5,zero
   2b734:	0025883a 	mov	r18,zero
   2b738:	003f9806 	br	2b59c <__alt_data_end+0xfffeb59c>
   2b73c:	8c00fd36 	bltu	r17,r16,2bb34 <__divdf3+0x714>
   2b740:	8440fb26 	beq	r16,r17,2bb30 <__divdf3+0x710>
   2b744:	8007883a 	mov	r3,r16
   2b748:	ad7fffc4 	addi	r21,r21,-1
   2b74c:	0021883a 	mov	r16,zero
   2b750:	4004d63a 	srli	r2,r8,24
   2b754:	8822923a 	slli	r17,r17,8
   2b758:	1809883a 	mov	r4,r3
   2b75c:	402c923a 	slli	r22,r8,8
   2b760:	88b8b03a 	or	fp,r17,r2
   2b764:	e028d43a 	srli	r20,fp,16
   2b768:	d8c00015 	stw	r3,0(sp)
   2b76c:	e5ffffcc 	andi	r23,fp,65535
   2b770:	a00b883a 	mov	r5,r20
   2b774:	0020a880 	call	20a88 <__udivsi3>
   2b778:	d8c00017 	ldw	r3,0(sp)
   2b77c:	a00b883a 	mov	r5,r20
   2b780:	d8800315 	stw	r2,12(sp)
   2b784:	1809883a 	mov	r4,r3
   2b788:	0020aec0 	call	20aec <__umodsi3>
   2b78c:	d9800317 	ldw	r6,12(sp)
   2b790:	1006943a 	slli	r3,r2,16
   2b794:	9004d43a 	srli	r2,r18,16
   2b798:	b9a3383a 	mul	r17,r23,r6
   2b79c:	10c4b03a 	or	r2,r2,r3
   2b7a0:	1440062e 	bgeu	r2,r17,2b7bc <__divdf3+0x39c>
   2b7a4:	1705883a 	add	r2,r2,fp
   2b7a8:	30ffffc4 	addi	r3,r6,-1
   2b7ac:	1700ee36 	bltu	r2,fp,2bb68 <__divdf3+0x748>
   2b7b0:	1440ed2e 	bgeu	r2,r17,2bb68 <__divdf3+0x748>
   2b7b4:	31bfff84 	addi	r6,r6,-2
   2b7b8:	1705883a 	add	r2,r2,fp
   2b7bc:	1463c83a 	sub	r17,r2,r17
   2b7c0:	a00b883a 	mov	r5,r20
   2b7c4:	8809883a 	mov	r4,r17
   2b7c8:	d9800315 	stw	r6,12(sp)
   2b7cc:	0020a880 	call	20a88 <__udivsi3>
   2b7d0:	a00b883a 	mov	r5,r20
   2b7d4:	8809883a 	mov	r4,r17
   2b7d8:	d8800215 	stw	r2,8(sp)
   2b7dc:	0020aec0 	call	20aec <__umodsi3>
   2b7e0:	d9c00217 	ldw	r7,8(sp)
   2b7e4:	1004943a 	slli	r2,r2,16
   2b7e8:	94bfffcc 	andi	r18,r18,65535
   2b7ec:	b9d1383a 	mul	r8,r23,r7
   2b7f0:	90a4b03a 	or	r18,r18,r2
   2b7f4:	d9800317 	ldw	r6,12(sp)
   2b7f8:	9200062e 	bgeu	r18,r8,2b814 <__divdf3+0x3f4>
   2b7fc:	9725883a 	add	r18,r18,fp
   2b800:	38bfffc4 	addi	r2,r7,-1
   2b804:	9700d636 	bltu	r18,fp,2bb60 <__divdf3+0x740>
   2b808:	9200d52e 	bgeu	r18,r8,2bb60 <__divdf3+0x740>
   2b80c:	39ffff84 	addi	r7,r7,-2
   2b810:	9725883a 	add	r18,r18,fp
   2b814:	3004943a 	slli	r2,r6,16
   2b818:	b012d43a 	srli	r9,r22,16
   2b81c:	b1bfffcc 	andi	r6,r22,65535
   2b820:	11e2b03a 	or	r17,r2,r7
   2b824:	8806d43a 	srli	r3,r17,16
   2b828:	893fffcc 	andi	r4,r17,65535
   2b82c:	218b383a 	mul	r5,r4,r6
   2b830:	30c5383a 	mul	r2,r6,r3
   2b834:	2249383a 	mul	r4,r4,r9
   2b838:	280ed43a 	srli	r7,r5,16
   2b83c:	9225c83a 	sub	r18,r18,r8
   2b840:	2089883a 	add	r4,r4,r2
   2b844:	3909883a 	add	r4,r7,r4
   2b848:	1a47383a 	mul	r3,r3,r9
   2b84c:	2080022e 	bgeu	r4,r2,2b858 <__divdf3+0x438>
   2b850:	00800074 	movhi	r2,1
   2b854:	1887883a 	add	r3,r3,r2
   2b858:	2004d43a 	srli	r2,r4,16
   2b85c:	2008943a 	slli	r4,r4,16
   2b860:	297fffcc 	andi	r5,r5,65535
   2b864:	10c7883a 	add	r3,r2,r3
   2b868:	2149883a 	add	r4,r4,r5
   2b86c:	90c0a536 	bltu	r18,r3,2bb04 <__divdf3+0x6e4>
   2b870:	90c0bf26 	beq	r18,r3,2bb70 <__divdf3+0x750>
   2b874:	90c7c83a 	sub	r3,r18,r3
   2b878:	810fc83a 	sub	r7,r16,r4
   2b87c:	81e5803a 	cmpltu	r18,r16,r7
   2b880:	1ca5c83a 	sub	r18,r3,r18
   2b884:	e480c126 	beq	fp,r18,2bb8c <__divdf3+0x76c>
   2b888:	a00b883a 	mov	r5,r20
   2b88c:	9009883a 	mov	r4,r18
   2b890:	d9800315 	stw	r6,12(sp)
   2b894:	d9c00215 	stw	r7,8(sp)
   2b898:	da400115 	stw	r9,4(sp)
   2b89c:	0020a880 	call	20a88 <__udivsi3>
   2b8a0:	a00b883a 	mov	r5,r20
   2b8a4:	9009883a 	mov	r4,r18
   2b8a8:	d8800015 	stw	r2,0(sp)
   2b8ac:	0020aec0 	call	20aec <__umodsi3>
   2b8b0:	d9c00217 	ldw	r7,8(sp)
   2b8b4:	da000017 	ldw	r8,0(sp)
   2b8b8:	1006943a 	slli	r3,r2,16
   2b8bc:	3804d43a 	srli	r2,r7,16
   2b8c0:	ba21383a 	mul	r16,r23,r8
   2b8c4:	d9800317 	ldw	r6,12(sp)
   2b8c8:	10c4b03a 	or	r2,r2,r3
   2b8cc:	da400117 	ldw	r9,4(sp)
   2b8d0:	1400062e 	bgeu	r2,r16,2b8ec <__divdf3+0x4cc>
   2b8d4:	1705883a 	add	r2,r2,fp
   2b8d8:	40ffffc4 	addi	r3,r8,-1
   2b8dc:	1700ad36 	bltu	r2,fp,2bb94 <__divdf3+0x774>
   2b8e0:	1400ac2e 	bgeu	r2,r16,2bb94 <__divdf3+0x774>
   2b8e4:	423fff84 	addi	r8,r8,-2
   2b8e8:	1705883a 	add	r2,r2,fp
   2b8ec:	1421c83a 	sub	r16,r2,r16
   2b8f0:	a00b883a 	mov	r5,r20
   2b8f4:	8009883a 	mov	r4,r16
   2b8f8:	d9800315 	stw	r6,12(sp)
   2b8fc:	d9c00215 	stw	r7,8(sp)
   2b900:	da000015 	stw	r8,0(sp)
   2b904:	da400115 	stw	r9,4(sp)
   2b908:	0020a880 	call	20a88 <__udivsi3>
   2b90c:	8009883a 	mov	r4,r16
   2b910:	a00b883a 	mov	r5,r20
   2b914:	1025883a 	mov	r18,r2
   2b918:	0020aec0 	call	20aec <__umodsi3>
   2b91c:	d9c00217 	ldw	r7,8(sp)
   2b920:	1004943a 	slli	r2,r2,16
   2b924:	bcaf383a 	mul	r23,r23,r18
   2b928:	393fffcc 	andi	r4,r7,65535
   2b92c:	2088b03a 	or	r4,r4,r2
   2b930:	d9800317 	ldw	r6,12(sp)
   2b934:	da000017 	ldw	r8,0(sp)
   2b938:	da400117 	ldw	r9,4(sp)
   2b93c:	25c0062e 	bgeu	r4,r23,2b958 <__divdf3+0x538>
   2b940:	2709883a 	add	r4,r4,fp
   2b944:	90bfffc4 	addi	r2,r18,-1
   2b948:	27009436 	bltu	r4,fp,2bb9c <__divdf3+0x77c>
   2b94c:	25c0932e 	bgeu	r4,r23,2bb9c <__divdf3+0x77c>
   2b950:	94bfff84 	addi	r18,r18,-2
   2b954:	2709883a 	add	r4,r4,fp
   2b958:	4004943a 	slli	r2,r8,16
   2b95c:	25efc83a 	sub	r23,r4,r23
   2b960:	1490b03a 	or	r8,r2,r18
   2b964:	4008d43a 	srli	r4,r8,16
   2b968:	40ffffcc 	andi	r3,r8,65535
   2b96c:	30c5383a 	mul	r2,r6,r3
   2b970:	1a47383a 	mul	r3,r3,r9
   2b974:	310d383a 	mul	r6,r6,r4
   2b978:	100ad43a 	srli	r5,r2,16
   2b97c:	4913383a 	mul	r9,r9,r4
   2b980:	1987883a 	add	r3,r3,r6
   2b984:	28c7883a 	add	r3,r5,r3
   2b988:	1980022e 	bgeu	r3,r6,2b994 <__divdf3+0x574>
   2b98c:	01000074 	movhi	r4,1
   2b990:	4913883a 	add	r9,r9,r4
   2b994:	1808d43a 	srli	r4,r3,16
   2b998:	1806943a 	slli	r3,r3,16
   2b99c:	10bfffcc 	andi	r2,r2,65535
   2b9a0:	2253883a 	add	r9,r4,r9
   2b9a4:	1887883a 	add	r3,r3,r2
   2b9a8:	ba403836 	bltu	r23,r9,2ba8c <__divdf3+0x66c>
   2b9ac:	ba403626 	beq	r23,r9,2ba88 <__divdf3+0x668>
   2b9b0:	42000054 	ori	r8,r8,1
   2b9b4:	a880ffc4 	addi	r2,r21,1023
   2b9b8:	00bf570e 	bge	zero,r2,2b718 <__alt_data_end+0xfffeb718>
   2b9bc:	40c001cc 	andi	r3,r8,7
   2b9c0:	18000726 	beq	r3,zero,2b9e0 <__divdf3+0x5c0>
   2b9c4:	40c003cc 	andi	r3,r8,15
   2b9c8:	01000104 	movi	r4,4
   2b9cc:	19000426 	beq	r3,r4,2b9e0 <__divdf3+0x5c0>
   2b9d0:	4107883a 	add	r3,r8,r4
   2b9d4:	1a11803a 	cmpltu	r8,r3,r8
   2b9d8:	8a23883a 	add	r17,r17,r8
   2b9dc:	1811883a 	mov	r8,r3
   2b9e0:	88c0402c 	andhi	r3,r17,256
   2b9e4:	18000426 	beq	r3,zero,2b9f8 <__divdf3+0x5d8>
   2b9e8:	00ffc034 	movhi	r3,65280
   2b9ec:	18ffffc4 	addi	r3,r3,-1
   2b9f0:	a8810004 	addi	r2,r21,1024
   2b9f4:	88e2703a 	and	r17,r17,r3
   2b9f8:	00c1ff84 	movi	r3,2046
   2b9fc:	18bee316 	blt	r3,r2,2b58c <__alt_data_end+0xfffeb58c>
   2ba00:	8824977a 	slli	r18,r17,29
   2ba04:	4010d0fa 	srli	r8,r8,3
   2ba08:	8822927a 	slli	r17,r17,9
   2ba0c:	1081ffcc 	andi	r2,r2,2047
   2ba10:	9224b03a 	or	r18,r18,r8
   2ba14:	880ad33a 	srli	r5,r17,12
   2ba18:	98c0004c 	andi	r3,r19,1
   2ba1c:	003edf06 	br	2b59c <__alt_data_end+0xfffeb59c>
   2ba20:	8080022c 	andhi	r2,r16,8
   2ba24:	10001226 	beq	r2,zero,2ba70 <__divdf3+0x650>
   2ba28:	8880022c 	andhi	r2,r17,8
   2ba2c:	1000101e 	bne	r2,zero,2ba70 <__divdf3+0x650>
   2ba30:	00800434 	movhi	r2,16
   2ba34:	89400234 	orhi	r5,r17,8
   2ba38:	10bfffc4 	addi	r2,r2,-1
   2ba3c:	b007883a 	mov	r3,r22
   2ba40:	288a703a 	and	r5,r5,r2
   2ba44:	4025883a 	mov	r18,r8
   2ba48:	003f3106 	br	2b710 <__alt_data_end+0xfffeb710>
   2ba4c:	008000c4 	movi	r2,3
   2ba50:	3880a626 	beq	r7,r2,2bcec <__divdf3+0x8cc>
   2ba54:	00800044 	movi	r2,1
   2ba58:	3880521e 	bne	r7,r2,2bba4 <__divdf3+0x784>
   2ba5c:	b807883a 	mov	r3,r23
   2ba60:	0005883a 	mov	r2,zero
   2ba64:	000b883a 	mov	r5,zero
   2ba68:	0025883a 	mov	r18,zero
   2ba6c:	003ecb06 	br	2b59c <__alt_data_end+0xfffeb59c>
   2ba70:	00800434 	movhi	r2,16
   2ba74:	81400234 	orhi	r5,r16,8
   2ba78:	10bfffc4 	addi	r2,r2,-1
   2ba7c:	a007883a 	mov	r3,r20
   2ba80:	288a703a 	and	r5,r5,r2
   2ba84:	003f2206 	br	2b710 <__alt_data_end+0xfffeb710>
   2ba88:	183fca26 	beq	r3,zero,2b9b4 <__alt_data_end+0xfffeb9b4>
   2ba8c:	e5ef883a 	add	r23,fp,r23
   2ba90:	40bfffc4 	addi	r2,r8,-1
   2ba94:	bf00392e 	bgeu	r23,fp,2bb7c <__divdf3+0x75c>
   2ba98:	1011883a 	mov	r8,r2
   2ba9c:	ba7fc41e 	bne	r23,r9,2b9b0 <__alt_data_end+0xfffeb9b0>
   2baa0:	b0ffc31e 	bne	r22,r3,2b9b0 <__alt_data_end+0xfffeb9b0>
   2baa4:	003fc306 	br	2b9b4 <__alt_data_end+0xfffeb9b4>
   2baa8:	143ff604 	addi	r16,r2,-40
   2baac:	9c20983a 	sll	r16,r19,r16
   2bab0:	0025883a 	mov	r18,zero
   2bab4:	003ee206 	br	2b640 <__alt_data_end+0xfffeb640>
   2bab8:	d9800315 	stw	r6,12(sp)
   2babc:	d9c00215 	stw	r7,8(sp)
   2bac0:	002d1780 	call	2d178 <__clzsi2>
   2bac4:	10800804 	addi	r2,r2,32
   2bac8:	d9c00217 	ldw	r7,8(sp)
   2bacc:	d9800317 	ldw	r6,12(sp)
   2bad0:	003ed106 	br	2b618 <__alt_data_end+0xfffeb618>
   2bad4:	147ff604 	addi	r17,r2,-40
   2bad8:	3462983a 	sll	r17,r6,r17
   2badc:	0011883a 	mov	r8,zero
   2bae0:	003ef506 	br	2b6b8 <__alt_data_end+0xfffeb6b8>
   2bae4:	3009883a 	mov	r4,r6
   2bae8:	d9800315 	stw	r6,12(sp)
   2baec:	da400115 	stw	r9,4(sp)
   2baf0:	002d1780 	call	2d178 <__clzsi2>
   2baf4:	10800804 	addi	r2,r2,32
   2baf8:	da400117 	ldw	r9,4(sp)
   2bafc:	d9800317 	ldw	r6,12(sp)
   2bb00:	003ee306 	br	2b690 <__alt_data_end+0xfffeb690>
   2bb04:	85a1883a 	add	r16,r16,r22
   2bb08:	8585803a 	cmpltu	r2,r16,r22
   2bb0c:	1705883a 	add	r2,r2,fp
   2bb10:	14a5883a 	add	r18,r2,r18
   2bb14:	88bfffc4 	addi	r2,r17,-1
   2bb18:	e4800c2e 	bgeu	fp,r18,2bb4c <__divdf3+0x72c>
   2bb1c:	90c03e36 	bltu	r18,r3,2bc18 <__divdf3+0x7f8>
   2bb20:	1c806926 	beq	r3,r18,2bcc8 <__divdf3+0x8a8>
   2bb24:	90c7c83a 	sub	r3,r18,r3
   2bb28:	1023883a 	mov	r17,r2
   2bb2c:	003f5206 	br	2b878 <__alt_data_end+0xfffeb878>
   2bb30:	923f0436 	bltu	r18,r8,2b744 <__alt_data_end+0xfffeb744>
   2bb34:	800897fa 	slli	r4,r16,31
   2bb38:	9004d07a 	srli	r2,r18,1
   2bb3c:	8006d07a 	srli	r3,r16,1
   2bb40:	902097fa 	slli	r16,r18,31
   2bb44:	20a4b03a 	or	r18,r4,r2
   2bb48:	003f0106 	br	2b750 <__alt_data_end+0xfffeb750>
   2bb4c:	e4bff51e 	bne	fp,r18,2bb24 <__alt_data_end+0xfffebb24>
   2bb50:	85bff22e 	bgeu	r16,r22,2bb1c <__alt_data_end+0xfffebb1c>
   2bb54:	e0c7c83a 	sub	r3,fp,r3
   2bb58:	1023883a 	mov	r17,r2
   2bb5c:	003f4606 	br	2b878 <__alt_data_end+0xfffeb878>
   2bb60:	100f883a 	mov	r7,r2
   2bb64:	003f2b06 	br	2b814 <__alt_data_end+0xfffeb814>
   2bb68:	180d883a 	mov	r6,r3
   2bb6c:	003f1306 	br	2b7bc <__alt_data_end+0xfffeb7bc>
   2bb70:	813fe436 	bltu	r16,r4,2bb04 <__alt_data_end+0xfffebb04>
   2bb74:	0007883a 	mov	r3,zero
   2bb78:	003f3f06 	br	2b878 <__alt_data_end+0xfffeb878>
   2bb7c:	ba402c36 	bltu	r23,r9,2bc30 <__divdf3+0x810>
   2bb80:	4dc05426 	beq	r9,r23,2bcd4 <__divdf3+0x8b4>
   2bb84:	1011883a 	mov	r8,r2
   2bb88:	003f8906 	br	2b9b0 <__alt_data_end+0xfffeb9b0>
   2bb8c:	023fffc4 	movi	r8,-1
   2bb90:	003f8806 	br	2b9b4 <__alt_data_end+0xfffeb9b4>
   2bb94:	1811883a 	mov	r8,r3
   2bb98:	003f5406 	br	2b8ec <__alt_data_end+0xfffeb8ec>
   2bb9c:	1025883a 	mov	r18,r2
   2bba0:	003f6d06 	br	2b958 <__alt_data_end+0xfffeb958>
   2bba4:	b827883a 	mov	r19,r23
   2bba8:	003f8206 	br	2b9b4 <__alt_data_end+0xfffeb9b4>
   2bbac:	010007c4 	movi	r4,31
   2bbb0:	20c02616 	blt	r4,r3,2bc4c <__divdf3+0x82c>
   2bbb4:	00800804 	movi	r2,32
   2bbb8:	10c5c83a 	sub	r2,r2,r3
   2bbbc:	888a983a 	sll	r5,r17,r2
   2bbc0:	40c8d83a 	srl	r4,r8,r3
   2bbc4:	4084983a 	sll	r2,r8,r2
   2bbc8:	88e2d83a 	srl	r17,r17,r3
   2bbcc:	2906b03a 	or	r3,r5,r4
   2bbd0:	1004c03a 	cmpne	r2,r2,zero
   2bbd4:	1886b03a 	or	r3,r3,r2
   2bbd8:	188001cc 	andi	r2,r3,7
   2bbdc:	10000726 	beq	r2,zero,2bbfc <__divdf3+0x7dc>
   2bbe0:	188003cc 	andi	r2,r3,15
   2bbe4:	01000104 	movi	r4,4
   2bbe8:	11000426 	beq	r2,r4,2bbfc <__divdf3+0x7dc>
   2bbec:	1805883a 	mov	r2,r3
   2bbf0:	10c00104 	addi	r3,r2,4
   2bbf4:	1885803a 	cmpltu	r2,r3,r2
   2bbf8:	88a3883a 	add	r17,r17,r2
   2bbfc:	8880202c 	andhi	r2,r17,128
   2bc00:	10002726 	beq	r2,zero,2bca0 <__divdf3+0x880>
   2bc04:	98c0004c 	andi	r3,r19,1
   2bc08:	00800044 	movi	r2,1
   2bc0c:	000b883a 	mov	r5,zero
   2bc10:	0025883a 	mov	r18,zero
   2bc14:	003e6106 	br	2b59c <__alt_data_end+0xfffeb59c>
   2bc18:	85a1883a 	add	r16,r16,r22
   2bc1c:	8585803a 	cmpltu	r2,r16,r22
   2bc20:	1705883a 	add	r2,r2,fp
   2bc24:	14a5883a 	add	r18,r2,r18
   2bc28:	8c7fff84 	addi	r17,r17,-2
   2bc2c:	003f1106 	br	2b874 <__alt_data_end+0xfffeb874>
   2bc30:	b589883a 	add	r4,r22,r22
   2bc34:	25ad803a 	cmpltu	r22,r4,r22
   2bc38:	b739883a 	add	fp,r22,fp
   2bc3c:	40bfff84 	addi	r2,r8,-2
   2bc40:	bf2f883a 	add	r23,r23,fp
   2bc44:	202d883a 	mov	r22,r4
   2bc48:	003f9306 	br	2ba98 <__alt_data_end+0xfffeba98>
   2bc4c:	013ff844 	movi	r4,-31
   2bc50:	2085c83a 	sub	r2,r4,r2
   2bc54:	8888d83a 	srl	r4,r17,r2
   2bc58:	00800804 	movi	r2,32
   2bc5c:	18802126 	beq	r3,r2,2bce4 <__divdf3+0x8c4>
   2bc60:	00801004 	movi	r2,64
   2bc64:	10c5c83a 	sub	r2,r2,r3
   2bc68:	8884983a 	sll	r2,r17,r2
   2bc6c:	1204b03a 	or	r2,r2,r8
   2bc70:	1004c03a 	cmpne	r2,r2,zero
   2bc74:	2084b03a 	or	r2,r4,r2
   2bc78:	144001cc 	andi	r17,r2,7
   2bc7c:	88000d1e 	bne	r17,zero,2bcb4 <__divdf3+0x894>
   2bc80:	000b883a 	mov	r5,zero
   2bc84:	1024d0fa 	srli	r18,r2,3
   2bc88:	98c0004c 	andi	r3,r19,1
   2bc8c:	0005883a 	mov	r2,zero
   2bc90:	9464b03a 	or	r18,r18,r17
   2bc94:	003e4106 	br	2b59c <__alt_data_end+0xfffeb59c>
   2bc98:	1007883a 	mov	r3,r2
   2bc9c:	0023883a 	mov	r17,zero
   2bca0:	880a927a 	slli	r5,r17,9
   2bca4:	1805883a 	mov	r2,r3
   2bca8:	8822977a 	slli	r17,r17,29
   2bcac:	280ad33a 	srli	r5,r5,12
   2bcb0:	003ff406 	br	2bc84 <__alt_data_end+0xfffebc84>
   2bcb4:	10c003cc 	andi	r3,r2,15
   2bcb8:	01000104 	movi	r4,4
   2bcbc:	193ff626 	beq	r3,r4,2bc98 <__alt_data_end+0xfffebc98>
   2bcc0:	0023883a 	mov	r17,zero
   2bcc4:	003fca06 	br	2bbf0 <__alt_data_end+0xfffebbf0>
   2bcc8:	813fd336 	bltu	r16,r4,2bc18 <__alt_data_end+0xfffebc18>
   2bccc:	1023883a 	mov	r17,r2
   2bcd0:	003fa806 	br	2bb74 <__alt_data_end+0xfffebb74>
   2bcd4:	b0ffd636 	bltu	r22,r3,2bc30 <__alt_data_end+0xfffebc30>
   2bcd8:	1011883a 	mov	r8,r2
   2bcdc:	b0ff341e 	bne	r22,r3,2b9b0 <__alt_data_end+0xfffeb9b0>
   2bce0:	003f3406 	br	2b9b4 <__alt_data_end+0xfffeb9b4>
   2bce4:	0005883a 	mov	r2,zero
   2bce8:	003fe006 	br	2bc6c <__alt_data_end+0xfffebc6c>
   2bcec:	00800434 	movhi	r2,16
   2bcf0:	89400234 	orhi	r5,r17,8
   2bcf4:	10bfffc4 	addi	r2,r2,-1
   2bcf8:	b807883a 	mov	r3,r23
   2bcfc:	288a703a 	and	r5,r5,r2
   2bd00:	4025883a 	mov	r18,r8
   2bd04:	003e8206 	br	2b710 <__alt_data_end+0xfffeb710>

0002bd08 <__eqdf2>:
   2bd08:	2804d53a 	srli	r2,r5,20
   2bd0c:	3806d53a 	srli	r3,r7,20
   2bd10:	02000434 	movhi	r8,16
   2bd14:	423fffc4 	addi	r8,r8,-1
   2bd18:	1081ffcc 	andi	r2,r2,2047
   2bd1c:	0281ffc4 	movi	r10,2047
   2bd20:	2a12703a 	and	r9,r5,r8
   2bd24:	18c1ffcc 	andi	r3,r3,2047
   2bd28:	3a10703a 	and	r8,r7,r8
   2bd2c:	280ad7fa 	srli	r5,r5,31
   2bd30:	380ed7fa 	srli	r7,r7,31
   2bd34:	12801026 	beq	r2,r10,2bd78 <__eqdf2+0x70>
   2bd38:	0281ffc4 	movi	r10,2047
   2bd3c:	1a800a26 	beq	r3,r10,2bd68 <__eqdf2+0x60>
   2bd40:	10c00226 	beq	r2,r3,2bd4c <__eqdf2+0x44>
   2bd44:	00800044 	movi	r2,1
   2bd48:	f800283a 	ret
   2bd4c:	4a3ffd1e 	bne	r9,r8,2bd44 <__alt_data_end+0xfffebd44>
   2bd50:	21bffc1e 	bne	r4,r6,2bd44 <__alt_data_end+0xfffebd44>
   2bd54:	29c00c26 	beq	r5,r7,2bd88 <__eqdf2+0x80>
   2bd58:	103ffa1e 	bne	r2,zero,2bd44 <__alt_data_end+0xfffebd44>
   2bd5c:	2244b03a 	or	r2,r4,r9
   2bd60:	1004c03a 	cmpne	r2,r2,zero
   2bd64:	f800283a 	ret
   2bd68:	3214b03a 	or	r10,r6,r8
   2bd6c:	503ff426 	beq	r10,zero,2bd40 <__alt_data_end+0xfffebd40>
   2bd70:	00800044 	movi	r2,1
   2bd74:	f800283a 	ret
   2bd78:	2254b03a 	or	r10,r4,r9
   2bd7c:	503fee26 	beq	r10,zero,2bd38 <__alt_data_end+0xfffebd38>
   2bd80:	00800044 	movi	r2,1
   2bd84:	f800283a 	ret
   2bd88:	0005883a 	mov	r2,zero
   2bd8c:	f800283a 	ret

0002bd90 <__gedf2>:
   2bd90:	2804d53a 	srli	r2,r5,20
   2bd94:	3806d53a 	srli	r3,r7,20
   2bd98:	02000434 	movhi	r8,16
   2bd9c:	423fffc4 	addi	r8,r8,-1
   2bda0:	1081ffcc 	andi	r2,r2,2047
   2bda4:	0241ffc4 	movi	r9,2047
   2bda8:	2a14703a 	and	r10,r5,r8
   2bdac:	18c1ffcc 	andi	r3,r3,2047
   2bdb0:	3a10703a 	and	r8,r7,r8
   2bdb4:	280ad7fa 	srli	r5,r5,31
   2bdb8:	380ed7fa 	srli	r7,r7,31
   2bdbc:	12401d26 	beq	r2,r9,2be34 <__gedf2+0xa4>
   2bdc0:	0241ffc4 	movi	r9,2047
   2bdc4:	1a401226 	beq	r3,r9,2be10 <__gedf2+0x80>
   2bdc8:	1000081e 	bne	r2,zero,2bdec <__gedf2+0x5c>
   2bdcc:	2296b03a 	or	r11,r4,r10
   2bdd0:	5813003a 	cmpeq	r9,r11,zero
   2bdd4:	1800091e 	bne	r3,zero,2bdfc <__gedf2+0x6c>
   2bdd8:	3218b03a 	or	r12,r6,r8
   2bddc:	6000071e 	bne	r12,zero,2bdfc <__gedf2+0x6c>
   2bde0:	0005883a 	mov	r2,zero
   2bde4:	5800101e 	bne	r11,zero,2be28 <__gedf2+0x98>
   2bde8:	f800283a 	ret
   2bdec:	18000c1e 	bne	r3,zero,2be20 <__gedf2+0x90>
   2bdf0:	3212b03a 	or	r9,r6,r8
   2bdf4:	48000c26 	beq	r9,zero,2be28 <__gedf2+0x98>
   2bdf8:	0013883a 	mov	r9,zero
   2bdfc:	39c03fcc 	andi	r7,r7,255
   2be00:	48000826 	beq	r9,zero,2be24 <__gedf2+0x94>
   2be04:	38000926 	beq	r7,zero,2be2c <__gedf2+0x9c>
   2be08:	00800044 	movi	r2,1
   2be0c:	f800283a 	ret
   2be10:	3212b03a 	or	r9,r6,r8
   2be14:	483fec26 	beq	r9,zero,2bdc8 <__alt_data_end+0xfffebdc8>
   2be18:	00bfff84 	movi	r2,-2
   2be1c:	f800283a 	ret
   2be20:	39c03fcc 	andi	r7,r7,255
   2be24:	29c00626 	beq	r5,r7,2be40 <__gedf2+0xb0>
   2be28:	283ff726 	beq	r5,zero,2be08 <__alt_data_end+0xfffebe08>
   2be2c:	00bfffc4 	movi	r2,-1
   2be30:	f800283a 	ret
   2be34:	2292b03a 	or	r9,r4,r10
   2be38:	483fe126 	beq	r9,zero,2bdc0 <__alt_data_end+0xfffebdc0>
   2be3c:	003ff606 	br	2be18 <__alt_data_end+0xfffebe18>
   2be40:	18bff916 	blt	r3,r2,2be28 <__alt_data_end+0xfffebe28>
   2be44:	10c00316 	blt	r2,r3,2be54 <__gedf2+0xc4>
   2be48:	42bff736 	bltu	r8,r10,2be28 <__alt_data_end+0xfffebe28>
   2be4c:	52000326 	beq	r10,r8,2be5c <__gedf2+0xcc>
   2be50:	5200042e 	bgeu	r10,r8,2be64 <__gedf2+0xd4>
   2be54:	283fec1e 	bne	r5,zero,2be08 <__alt_data_end+0xfffebe08>
   2be58:	003ff406 	br	2be2c <__alt_data_end+0xfffebe2c>
   2be5c:	313ff236 	bltu	r6,r4,2be28 <__alt_data_end+0xfffebe28>
   2be60:	21bffc36 	bltu	r4,r6,2be54 <__alt_data_end+0xfffebe54>
   2be64:	0005883a 	mov	r2,zero
   2be68:	f800283a 	ret

0002be6c <__ledf2>:
   2be6c:	2804d53a 	srli	r2,r5,20
   2be70:	3810d53a 	srli	r8,r7,20
   2be74:	00c00434 	movhi	r3,16
   2be78:	18ffffc4 	addi	r3,r3,-1
   2be7c:	1081ffcc 	andi	r2,r2,2047
   2be80:	0241ffc4 	movi	r9,2047
   2be84:	28d4703a 	and	r10,r5,r3
   2be88:	4201ffcc 	andi	r8,r8,2047
   2be8c:	38c6703a 	and	r3,r7,r3
   2be90:	280ad7fa 	srli	r5,r5,31
   2be94:	380ed7fa 	srli	r7,r7,31
   2be98:	12401f26 	beq	r2,r9,2bf18 <__ledf2+0xac>
   2be9c:	0241ffc4 	movi	r9,2047
   2bea0:	42401426 	beq	r8,r9,2bef4 <__ledf2+0x88>
   2bea4:	1000091e 	bne	r2,zero,2becc <__ledf2+0x60>
   2bea8:	2296b03a 	or	r11,r4,r10
   2beac:	5813003a 	cmpeq	r9,r11,zero
   2beb0:	29403fcc 	andi	r5,r5,255
   2beb4:	40000a1e 	bne	r8,zero,2bee0 <__ledf2+0x74>
   2beb8:	30d8b03a 	or	r12,r6,r3
   2bebc:	6000081e 	bne	r12,zero,2bee0 <__ledf2+0x74>
   2bec0:	0005883a 	mov	r2,zero
   2bec4:	5800111e 	bne	r11,zero,2bf0c <__ledf2+0xa0>
   2bec8:	f800283a 	ret
   2becc:	29403fcc 	andi	r5,r5,255
   2bed0:	40000c1e 	bne	r8,zero,2bf04 <__ledf2+0x98>
   2bed4:	30d2b03a 	or	r9,r6,r3
   2bed8:	48000c26 	beq	r9,zero,2bf0c <__ledf2+0xa0>
   2bedc:	0013883a 	mov	r9,zero
   2bee0:	39c03fcc 	andi	r7,r7,255
   2bee4:	48000826 	beq	r9,zero,2bf08 <__ledf2+0x9c>
   2bee8:	38001126 	beq	r7,zero,2bf30 <__ledf2+0xc4>
   2beec:	00800044 	movi	r2,1
   2bef0:	f800283a 	ret
   2bef4:	30d2b03a 	or	r9,r6,r3
   2bef8:	483fea26 	beq	r9,zero,2bea4 <__alt_data_end+0xfffebea4>
   2befc:	00800084 	movi	r2,2
   2bf00:	f800283a 	ret
   2bf04:	39c03fcc 	andi	r7,r7,255
   2bf08:	39400726 	beq	r7,r5,2bf28 <__ledf2+0xbc>
   2bf0c:	2800081e 	bne	r5,zero,2bf30 <__ledf2+0xc4>
   2bf10:	00800044 	movi	r2,1
   2bf14:	f800283a 	ret
   2bf18:	2292b03a 	or	r9,r4,r10
   2bf1c:	483fdf26 	beq	r9,zero,2be9c <__alt_data_end+0xfffebe9c>
   2bf20:	00800084 	movi	r2,2
   2bf24:	f800283a 	ret
   2bf28:	4080030e 	bge	r8,r2,2bf38 <__ledf2+0xcc>
   2bf2c:	383fef26 	beq	r7,zero,2beec <__alt_data_end+0xfffebeec>
   2bf30:	00bfffc4 	movi	r2,-1
   2bf34:	f800283a 	ret
   2bf38:	123feb16 	blt	r2,r8,2bee8 <__alt_data_end+0xfffebee8>
   2bf3c:	1abff336 	bltu	r3,r10,2bf0c <__alt_data_end+0xfffebf0c>
   2bf40:	50c00326 	beq	r10,r3,2bf50 <__ledf2+0xe4>
   2bf44:	50c0042e 	bgeu	r10,r3,2bf58 <__ledf2+0xec>
   2bf48:	283fe81e 	bne	r5,zero,2beec <__alt_data_end+0xfffebeec>
   2bf4c:	003ff806 	br	2bf30 <__alt_data_end+0xfffebf30>
   2bf50:	313fee36 	bltu	r6,r4,2bf0c <__alt_data_end+0xfffebf0c>
   2bf54:	21bffc36 	bltu	r4,r6,2bf48 <__alt_data_end+0xfffebf48>
   2bf58:	0005883a 	mov	r2,zero
   2bf5c:	f800283a 	ret

0002bf60 <__muldf3>:
   2bf60:	defff304 	addi	sp,sp,-52
   2bf64:	2804d53a 	srli	r2,r5,20
   2bf68:	dd800915 	stw	r22,36(sp)
   2bf6c:	282cd7fa 	srli	r22,r5,31
   2bf70:	dc000315 	stw	r16,12(sp)
   2bf74:	04000434 	movhi	r16,16
   2bf78:	dd400815 	stw	r21,32(sp)
   2bf7c:	dc800515 	stw	r18,20(sp)
   2bf80:	843fffc4 	addi	r16,r16,-1
   2bf84:	dfc00c15 	stw	ra,48(sp)
   2bf88:	df000b15 	stw	fp,44(sp)
   2bf8c:	ddc00a15 	stw	r23,40(sp)
   2bf90:	dd000715 	stw	r20,28(sp)
   2bf94:	dcc00615 	stw	r19,24(sp)
   2bf98:	dc400415 	stw	r17,16(sp)
   2bf9c:	1481ffcc 	andi	r18,r2,2047
   2bfa0:	2c20703a 	and	r16,r5,r16
   2bfa4:	b02b883a 	mov	r21,r22
   2bfa8:	b2403fcc 	andi	r9,r22,255
   2bfac:	90006026 	beq	r18,zero,2c130 <__muldf3+0x1d0>
   2bfb0:	0081ffc4 	movi	r2,2047
   2bfb4:	2029883a 	mov	r20,r4
   2bfb8:	90803626 	beq	r18,r2,2c094 <__muldf3+0x134>
   2bfbc:	80800434 	orhi	r2,r16,16
   2bfc0:	100490fa 	slli	r2,r2,3
   2bfc4:	2020d77a 	srli	r16,r4,29
   2bfc8:	202890fa 	slli	r20,r4,3
   2bfcc:	94bf0044 	addi	r18,r18,-1023
   2bfd0:	80a0b03a 	or	r16,r16,r2
   2bfd4:	0027883a 	mov	r19,zero
   2bfd8:	0039883a 	mov	fp,zero
   2bfdc:	3804d53a 	srli	r2,r7,20
   2bfe0:	382ed7fa 	srli	r23,r7,31
   2bfe4:	04400434 	movhi	r17,16
   2bfe8:	8c7fffc4 	addi	r17,r17,-1
   2bfec:	1081ffcc 	andi	r2,r2,2047
   2bff0:	3011883a 	mov	r8,r6
   2bff4:	3c62703a 	and	r17,r7,r17
   2bff8:	ba803fcc 	andi	r10,r23,255
   2bffc:	10006d26 	beq	r2,zero,2c1b4 <__muldf3+0x254>
   2c000:	00c1ffc4 	movi	r3,2047
   2c004:	10c06526 	beq	r2,r3,2c19c <__muldf3+0x23c>
   2c008:	88c00434 	orhi	r3,r17,16
   2c00c:	180690fa 	slli	r3,r3,3
   2c010:	3022d77a 	srli	r17,r6,29
   2c014:	301090fa 	slli	r8,r6,3
   2c018:	10bf0044 	addi	r2,r2,-1023
   2c01c:	88e2b03a 	or	r17,r17,r3
   2c020:	000b883a 	mov	r5,zero
   2c024:	9085883a 	add	r2,r18,r2
   2c028:	2cc8b03a 	or	r4,r5,r19
   2c02c:	00c003c4 	movi	r3,15
   2c030:	bdacf03a 	xor	r22,r23,r22
   2c034:	12c00044 	addi	r11,r2,1
   2c038:	19009936 	bltu	r3,r4,2c2a0 <__muldf3+0x340>
   2c03c:	200890ba 	slli	r4,r4,2
   2c040:	00c000f4 	movhi	r3,3
   2c044:	18f01504 	addi	r3,r3,-16300
   2c048:	20c9883a 	add	r4,r4,r3
   2c04c:	20c00017 	ldw	r3,0(r4)
   2c050:	1800683a 	jmp	r3
   2c054:	0002c2a0 	cmpeqi	zero,zero,2826
   2c058:	0002c0b4 	movhi	zero,2818
   2c05c:	0002c0b4 	movhi	zero,2818
   2c060:	0002c0b0 	cmpltui	zero,zero,2818
   2c064:	0002c27c 	xorhi	zero,zero,2825
   2c068:	0002c27c 	xorhi	zero,zero,2825
   2c06c:	0002c264 	muli	zero,zero,2825
   2c070:	0002c0b0 	cmpltui	zero,zero,2818
   2c074:	0002c27c 	xorhi	zero,zero,2825
   2c078:	0002c264 	muli	zero,zero,2825
   2c07c:	0002c27c 	xorhi	zero,zero,2825
   2c080:	0002c0b0 	cmpltui	zero,zero,2818
   2c084:	0002c28c 	andi	zero,zero,2826
   2c088:	0002c28c 	andi	zero,zero,2826
   2c08c:	0002c28c 	andi	zero,zero,2826
   2c090:	0002c4a8 	cmpgeui	zero,zero,2834
   2c094:	2404b03a 	or	r2,r4,r16
   2c098:	10006f1e 	bne	r2,zero,2c258 <__muldf3+0x2f8>
   2c09c:	04c00204 	movi	r19,8
   2c0a0:	0021883a 	mov	r16,zero
   2c0a4:	0029883a 	mov	r20,zero
   2c0a8:	07000084 	movi	fp,2
   2c0ac:	003fcb06 	br	2bfdc <__alt_data_end+0xfffebfdc>
   2c0b0:	502d883a 	mov	r22,r10
   2c0b4:	00800084 	movi	r2,2
   2c0b8:	28805726 	beq	r5,r2,2c218 <__muldf3+0x2b8>
   2c0bc:	008000c4 	movi	r2,3
   2c0c0:	28816626 	beq	r5,r2,2c65c <__muldf3+0x6fc>
   2c0c4:	00800044 	movi	r2,1
   2c0c8:	2881411e 	bne	r5,r2,2c5d0 <__muldf3+0x670>
   2c0cc:	b02b883a 	mov	r21,r22
   2c0d0:	0005883a 	mov	r2,zero
   2c0d4:	000b883a 	mov	r5,zero
   2c0d8:	0029883a 	mov	r20,zero
   2c0dc:	1004953a 	slli	r2,r2,20
   2c0e0:	a8c03fcc 	andi	r3,r21,255
   2c0e4:	04400434 	movhi	r17,16
   2c0e8:	8c7fffc4 	addi	r17,r17,-1
   2c0ec:	180697fa 	slli	r3,r3,31
   2c0f0:	2c4a703a 	and	r5,r5,r17
   2c0f4:	288ab03a 	or	r5,r5,r2
   2c0f8:	28c6b03a 	or	r3,r5,r3
   2c0fc:	a005883a 	mov	r2,r20
   2c100:	dfc00c17 	ldw	ra,48(sp)
   2c104:	df000b17 	ldw	fp,44(sp)
   2c108:	ddc00a17 	ldw	r23,40(sp)
   2c10c:	dd800917 	ldw	r22,36(sp)
   2c110:	dd400817 	ldw	r21,32(sp)
   2c114:	dd000717 	ldw	r20,28(sp)
   2c118:	dcc00617 	ldw	r19,24(sp)
   2c11c:	dc800517 	ldw	r18,20(sp)
   2c120:	dc400417 	ldw	r17,16(sp)
   2c124:	dc000317 	ldw	r16,12(sp)
   2c128:	dec00d04 	addi	sp,sp,52
   2c12c:	f800283a 	ret
   2c130:	2404b03a 	or	r2,r4,r16
   2c134:	2027883a 	mov	r19,r4
   2c138:	10004226 	beq	r2,zero,2c244 <__muldf3+0x2e4>
   2c13c:	8000fc26 	beq	r16,zero,2c530 <__muldf3+0x5d0>
   2c140:	8009883a 	mov	r4,r16
   2c144:	d9800215 	stw	r6,8(sp)
   2c148:	d9c00015 	stw	r7,0(sp)
   2c14c:	da400115 	stw	r9,4(sp)
   2c150:	002d1780 	call	2d178 <__clzsi2>
   2c154:	d9800217 	ldw	r6,8(sp)
   2c158:	d9c00017 	ldw	r7,0(sp)
   2c15c:	da400117 	ldw	r9,4(sp)
   2c160:	113ffd44 	addi	r4,r2,-11
   2c164:	00c00704 	movi	r3,28
   2c168:	1900ed16 	blt	r3,r4,2c520 <__muldf3+0x5c0>
   2c16c:	00c00744 	movi	r3,29
   2c170:	147ffe04 	addi	r17,r2,-8
   2c174:	1907c83a 	sub	r3,r3,r4
   2c178:	8460983a 	sll	r16,r16,r17
   2c17c:	98c6d83a 	srl	r3,r19,r3
   2c180:	9c68983a 	sll	r20,r19,r17
   2c184:	1c20b03a 	or	r16,r3,r16
   2c188:	1080fcc4 	addi	r2,r2,1011
   2c18c:	00a5c83a 	sub	r18,zero,r2
   2c190:	0027883a 	mov	r19,zero
   2c194:	0039883a 	mov	fp,zero
   2c198:	003f9006 	br	2bfdc <__alt_data_end+0xfffebfdc>
   2c19c:	3446b03a 	or	r3,r6,r17
   2c1a0:	1800261e 	bne	r3,zero,2c23c <__muldf3+0x2dc>
   2c1a4:	0023883a 	mov	r17,zero
   2c1a8:	0011883a 	mov	r8,zero
   2c1ac:	01400084 	movi	r5,2
   2c1b0:	003f9c06 	br	2c024 <__alt_data_end+0xfffec024>
   2c1b4:	3446b03a 	or	r3,r6,r17
   2c1b8:	18001c26 	beq	r3,zero,2c22c <__muldf3+0x2cc>
   2c1bc:	8800ce26 	beq	r17,zero,2c4f8 <__muldf3+0x598>
   2c1c0:	8809883a 	mov	r4,r17
   2c1c4:	d9800215 	stw	r6,8(sp)
   2c1c8:	da400115 	stw	r9,4(sp)
   2c1cc:	da800015 	stw	r10,0(sp)
   2c1d0:	002d1780 	call	2d178 <__clzsi2>
   2c1d4:	d9800217 	ldw	r6,8(sp)
   2c1d8:	da400117 	ldw	r9,4(sp)
   2c1dc:	da800017 	ldw	r10,0(sp)
   2c1e0:	113ffd44 	addi	r4,r2,-11
   2c1e4:	00c00704 	movi	r3,28
   2c1e8:	1900bf16 	blt	r3,r4,2c4e8 <__muldf3+0x588>
   2c1ec:	00c00744 	movi	r3,29
   2c1f0:	123ffe04 	addi	r8,r2,-8
   2c1f4:	1907c83a 	sub	r3,r3,r4
   2c1f8:	8a22983a 	sll	r17,r17,r8
   2c1fc:	30c6d83a 	srl	r3,r6,r3
   2c200:	3210983a 	sll	r8,r6,r8
   2c204:	1c62b03a 	or	r17,r3,r17
   2c208:	1080fcc4 	addi	r2,r2,1011
   2c20c:	0085c83a 	sub	r2,zero,r2
   2c210:	000b883a 	mov	r5,zero
   2c214:	003f8306 	br	2c024 <__alt_data_end+0xfffec024>
   2c218:	b02b883a 	mov	r21,r22
   2c21c:	0081ffc4 	movi	r2,2047
   2c220:	000b883a 	mov	r5,zero
   2c224:	0029883a 	mov	r20,zero
   2c228:	003fac06 	br	2c0dc <__alt_data_end+0xfffec0dc>
   2c22c:	0023883a 	mov	r17,zero
   2c230:	0011883a 	mov	r8,zero
   2c234:	01400044 	movi	r5,1
   2c238:	003f7a06 	br	2c024 <__alt_data_end+0xfffec024>
   2c23c:	014000c4 	movi	r5,3
   2c240:	003f7806 	br	2c024 <__alt_data_end+0xfffec024>
   2c244:	04c00104 	movi	r19,4
   2c248:	0021883a 	mov	r16,zero
   2c24c:	0029883a 	mov	r20,zero
   2c250:	07000044 	movi	fp,1
   2c254:	003f6106 	br	2bfdc <__alt_data_end+0xfffebfdc>
   2c258:	04c00304 	movi	r19,12
   2c25c:	070000c4 	movi	fp,3
   2c260:	003f5e06 	br	2bfdc <__alt_data_end+0xfffebfdc>
   2c264:	01400434 	movhi	r5,16
   2c268:	002b883a 	mov	r21,zero
   2c26c:	297fffc4 	addi	r5,r5,-1
   2c270:	053fffc4 	movi	r20,-1
   2c274:	0081ffc4 	movi	r2,2047
   2c278:	003f9806 	br	2c0dc <__alt_data_end+0xfffec0dc>
   2c27c:	8023883a 	mov	r17,r16
   2c280:	a011883a 	mov	r8,r20
   2c284:	e00b883a 	mov	r5,fp
   2c288:	003f8a06 	br	2c0b4 <__alt_data_end+0xfffec0b4>
   2c28c:	8023883a 	mov	r17,r16
   2c290:	a011883a 	mov	r8,r20
   2c294:	482d883a 	mov	r22,r9
   2c298:	e00b883a 	mov	r5,fp
   2c29c:	003f8506 	br	2c0b4 <__alt_data_end+0xfffec0b4>
   2c2a0:	a00ad43a 	srli	r5,r20,16
   2c2a4:	401ad43a 	srli	r13,r8,16
   2c2a8:	a53fffcc 	andi	r20,r20,65535
   2c2ac:	423fffcc 	andi	r8,r8,65535
   2c2b0:	4519383a 	mul	r12,r8,r20
   2c2b4:	4147383a 	mul	r3,r8,r5
   2c2b8:	6d09383a 	mul	r4,r13,r20
   2c2bc:	600cd43a 	srli	r6,r12,16
   2c2c0:	2b5d383a 	mul	r14,r5,r13
   2c2c4:	20c9883a 	add	r4,r4,r3
   2c2c8:	310d883a 	add	r6,r6,r4
   2c2cc:	30c0022e 	bgeu	r6,r3,2c2d8 <__muldf3+0x378>
   2c2d0:	00c00074 	movhi	r3,1
   2c2d4:	70dd883a 	add	r14,r14,r3
   2c2d8:	8826d43a 	srli	r19,r17,16
   2c2dc:	8bffffcc 	andi	r15,r17,65535
   2c2e0:	7d23383a 	mul	r17,r15,r20
   2c2e4:	7949383a 	mul	r4,r15,r5
   2c2e8:	9d29383a 	mul	r20,r19,r20
   2c2ec:	8814d43a 	srli	r10,r17,16
   2c2f0:	3012943a 	slli	r9,r6,16
   2c2f4:	a129883a 	add	r20,r20,r4
   2c2f8:	633fffcc 	andi	r12,r12,65535
   2c2fc:	5515883a 	add	r10,r10,r20
   2c300:	3006d43a 	srli	r3,r6,16
   2c304:	4b13883a 	add	r9,r9,r12
   2c308:	2ccb383a 	mul	r5,r5,r19
   2c30c:	5100022e 	bgeu	r10,r4,2c318 <__muldf3+0x3b8>
   2c310:	01000074 	movhi	r4,1
   2c314:	290b883a 	add	r5,r5,r4
   2c318:	802ad43a 	srli	r21,r16,16
   2c31c:	843fffcc 	andi	r16,r16,65535
   2c320:	440d383a 	mul	r6,r8,r16
   2c324:	4565383a 	mul	r18,r8,r21
   2c328:	8349383a 	mul	r4,r16,r13
   2c32c:	500e943a 	slli	r7,r10,16
   2c330:	3010d43a 	srli	r8,r6,16
   2c334:	5028d43a 	srli	r20,r10,16
   2c338:	2489883a 	add	r4,r4,r18
   2c33c:	8abfffcc 	andi	r10,r17,65535
   2c340:	3a95883a 	add	r10,r7,r10
   2c344:	4119883a 	add	r12,r8,r4
   2c348:	a169883a 	add	r20,r20,r5
   2c34c:	1a87883a 	add	r3,r3,r10
   2c350:	6d5b383a 	mul	r13,r13,r21
   2c354:	6480022e 	bgeu	r12,r18,2c360 <__muldf3+0x400>
   2c358:	01000074 	movhi	r4,1
   2c35c:	691b883a 	add	r13,r13,r4
   2c360:	7c25383a 	mul	r18,r15,r16
   2c364:	7d4b383a 	mul	r5,r15,r21
   2c368:	84cf383a 	mul	r7,r16,r19
   2c36c:	901ed43a 	srli	r15,r18,16
   2c370:	6008d43a 	srli	r4,r12,16
   2c374:	6010943a 	slli	r8,r12,16
   2c378:	394f883a 	add	r7,r7,r5
   2c37c:	333fffcc 	andi	r12,r6,65535
   2c380:	79df883a 	add	r15,r15,r7
   2c384:	235b883a 	add	r13,r4,r13
   2c388:	9d63383a 	mul	r17,r19,r21
   2c38c:	4309883a 	add	r4,r8,r12
   2c390:	7940022e 	bgeu	r15,r5,2c39c <__muldf3+0x43c>
   2c394:	01400074 	movhi	r5,1
   2c398:	8963883a 	add	r17,r17,r5
   2c39c:	780a943a 	slli	r5,r15,16
   2c3a0:	91bfffcc 	andi	r6,r18,65535
   2c3a4:	70c7883a 	add	r3,r14,r3
   2c3a8:	298d883a 	add	r6,r5,r6
   2c3ac:	1a8f803a 	cmpltu	r7,r3,r10
   2c3b0:	350b883a 	add	r5,r6,r20
   2c3b4:	20c7883a 	add	r3,r4,r3
   2c3b8:	3955883a 	add	r10,r7,r5
   2c3bc:	1909803a 	cmpltu	r4,r3,r4
   2c3c0:	6a91883a 	add	r8,r13,r10
   2c3c4:	780cd43a 	srli	r6,r15,16
   2c3c8:	2219883a 	add	r12,r4,r8
   2c3cc:	2d0b803a 	cmpltu	r5,r5,r20
   2c3d0:	51cf803a 	cmpltu	r7,r10,r7
   2c3d4:	29ceb03a 	or	r7,r5,r7
   2c3d8:	4351803a 	cmpltu	r8,r8,r13
   2c3dc:	610b803a 	cmpltu	r5,r12,r4
   2c3e0:	4148b03a 	or	r4,r8,r5
   2c3e4:	398f883a 	add	r7,r7,r6
   2c3e8:	3909883a 	add	r4,r7,r4
   2c3ec:	1810927a 	slli	r8,r3,9
   2c3f0:	2449883a 	add	r4,r4,r17
   2c3f4:	2008927a 	slli	r4,r4,9
   2c3f8:	6022d5fa 	srli	r17,r12,23
   2c3fc:	1806d5fa 	srli	r3,r3,23
   2c400:	4252b03a 	or	r9,r8,r9
   2c404:	600a927a 	slli	r5,r12,9
   2c408:	4810c03a 	cmpne	r8,r9,zero
   2c40c:	2462b03a 	or	r17,r4,r17
   2c410:	40c6b03a 	or	r3,r8,r3
   2c414:	8900402c 	andhi	r4,r17,256
   2c418:	1950b03a 	or	r8,r3,r5
   2c41c:	20000726 	beq	r4,zero,2c43c <__muldf3+0x4dc>
   2c420:	4006d07a 	srli	r3,r8,1
   2c424:	880497fa 	slli	r2,r17,31
   2c428:	4200004c 	andi	r8,r8,1
   2c42c:	8822d07a 	srli	r17,r17,1
   2c430:	1a10b03a 	or	r8,r3,r8
   2c434:	1210b03a 	or	r8,r2,r8
   2c438:	5805883a 	mov	r2,r11
   2c43c:	1140ffc4 	addi	r5,r2,1023
   2c440:	0140440e 	bge	zero,r5,2c554 <__muldf3+0x5f4>
   2c444:	40c001cc 	andi	r3,r8,7
   2c448:	18000726 	beq	r3,zero,2c468 <__muldf3+0x508>
   2c44c:	40c003cc 	andi	r3,r8,15
   2c450:	01000104 	movi	r4,4
   2c454:	19000426 	beq	r3,r4,2c468 <__muldf3+0x508>
   2c458:	4107883a 	add	r3,r8,r4
   2c45c:	1a11803a 	cmpltu	r8,r3,r8
   2c460:	8a23883a 	add	r17,r17,r8
   2c464:	1811883a 	mov	r8,r3
   2c468:	88c0402c 	andhi	r3,r17,256
   2c46c:	18000426 	beq	r3,zero,2c480 <__muldf3+0x520>
   2c470:	11410004 	addi	r5,r2,1024
   2c474:	00bfc034 	movhi	r2,65280
   2c478:	10bfffc4 	addi	r2,r2,-1
   2c47c:	88a2703a 	and	r17,r17,r2
   2c480:	0081ff84 	movi	r2,2046
   2c484:	117f6416 	blt	r2,r5,2c218 <__alt_data_end+0xfffec218>
   2c488:	8828977a 	slli	r20,r17,29
   2c48c:	4010d0fa 	srli	r8,r8,3
   2c490:	8822927a 	slli	r17,r17,9
   2c494:	2881ffcc 	andi	r2,r5,2047
   2c498:	a228b03a 	or	r20,r20,r8
   2c49c:	880ad33a 	srli	r5,r17,12
   2c4a0:	b02b883a 	mov	r21,r22
   2c4a4:	003f0d06 	br	2c0dc <__alt_data_end+0xfffec0dc>
   2c4a8:	8080022c 	andhi	r2,r16,8
   2c4ac:	10000926 	beq	r2,zero,2c4d4 <__muldf3+0x574>
   2c4b0:	8880022c 	andhi	r2,r17,8
   2c4b4:	1000071e 	bne	r2,zero,2c4d4 <__muldf3+0x574>
   2c4b8:	00800434 	movhi	r2,16
   2c4bc:	89400234 	orhi	r5,r17,8
   2c4c0:	10bfffc4 	addi	r2,r2,-1
   2c4c4:	b82b883a 	mov	r21,r23
   2c4c8:	288a703a 	and	r5,r5,r2
   2c4cc:	4029883a 	mov	r20,r8
   2c4d0:	003f6806 	br	2c274 <__alt_data_end+0xfffec274>
   2c4d4:	00800434 	movhi	r2,16
   2c4d8:	81400234 	orhi	r5,r16,8
   2c4dc:	10bfffc4 	addi	r2,r2,-1
   2c4e0:	288a703a 	and	r5,r5,r2
   2c4e4:	003f6306 	br	2c274 <__alt_data_end+0xfffec274>
   2c4e8:	147ff604 	addi	r17,r2,-40
   2c4ec:	3462983a 	sll	r17,r6,r17
   2c4f0:	0011883a 	mov	r8,zero
   2c4f4:	003f4406 	br	2c208 <__alt_data_end+0xfffec208>
   2c4f8:	3009883a 	mov	r4,r6
   2c4fc:	d9800215 	stw	r6,8(sp)
   2c500:	da400115 	stw	r9,4(sp)
   2c504:	da800015 	stw	r10,0(sp)
   2c508:	002d1780 	call	2d178 <__clzsi2>
   2c50c:	10800804 	addi	r2,r2,32
   2c510:	da800017 	ldw	r10,0(sp)
   2c514:	da400117 	ldw	r9,4(sp)
   2c518:	d9800217 	ldw	r6,8(sp)
   2c51c:	003f3006 	br	2c1e0 <__alt_data_end+0xfffec1e0>
   2c520:	143ff604 	addi	r16,r2,-40
   2c524:	9c20983a 	sll	r16,r19,r16
   2c528:	0029883a 	mov	r20,zero
   2c52c:	003f1606 	br	2c188 <__alt_data_end+0xfffec188>
   2c530:	d9800215 	stw	r6,8(sp)
   2c534:	d9c00015 	stw	r7,0(sp)
   2c538:	da400115 	stw	r9,4(sp)
   2c53c:	002d1780 	call	2d178 <__clzsi2>
   2c540:	10800804 	addi	r2,r2,32
   2c544:	da400117 	ldw	r9,4(sp)
   2c548:	d9c00017 	ldw	r7,0(sp)
   2c54c:	d9800217 	ldw	r6,8(sp)
   2c550:	003f0306 	br	2c160 <__alt_data_end+0xfffec160>
   2c554:	00c00044 	movi	r3,1
   2c558:	1947c83a 	sub	r3,r3,r5
   2c55c:	00800e04 	movi	r2,56
   2c560:	10feda16 	blt	r2,r3,2c0cc <__alt_data_end+0xfffec0cc>
   2c564:	008007c4 	movi	r2,31
   2c568:	10c01b16 	blt	r2,r3,2c5d8 <__muldf3+0x678>
   2c56c:	00800804 	movi	r2,32
   2c570:	10c5c83a 	sub	r2,r2,r3
   2c574:	888a983a 	sll	r5,r17,r2
   2c578:	40c8d83a 	srl	r4,r8,r3
   2c57c:	4084983a 	sll	r2,r8,r2
   2c580:	88e2d83a 	srl	r17,r17,r3
   2c584:	2906b03a 	or	r3,r5,r4
   2c588:	1004c03a 	cmpne	r2,r2,zero
   2c58c:	1886b03a 	or	r3,r3,r2
   2c590:	188001cc 	andi	r2,r3,7
   2c594:	10000726 	beq	r2,zero,2c5b4 <__muldf3+0x654>
   2c598:	188003cc 	andi	r2,r3,15
   2c59c:	01000104 	movi	r4,4
   2c5a0:	11000426 	beq	r2,r4,2c5b4 <__muldf3+0x654>
   2c5a4:	1805883a 	mov	r2,r3
   2c5a8:	10c00104 	addi	r3,r2,4
   2c5ac:	1885803a 	cmpltu	r2,r3,r2
   2c5b0:	88a3883a 	add	r17,r17,r2
   2c5b4:	8880202c 	andhi	r2,r17,128
   2c5b8:	10001c26 	beq	r2,zero,2c62c <__muldf3+0x6cc>
   2c5bc:	b02b883a 	mov	r21,r22
   2c5c0:	00800044 	movi	r2,1
   2c5c4:	000b883a 	mov	r5,zero
   2c5c8:	0029883a 	mov	r20,zero
   2c5cc:	003ec306 	br	2c0dc <__alt_data_end+0xfffec0dc>
   2c5d0:	5805883a 	mov	r2,r11
   2c5d4:	003f9906 	br	2c43c <__alt_data_end+0xfffec43c>
   2c5d8:	00bff844 	movi	r2,-31
   2c5dc:	1145c83a 	sub	r2,r2,r5
   2c5e0:	8888d83a 	srl	r4,r17,r2
   2c5e4:	00800804 	movi	r2,32
   2c5e8:	18801a26 	beq	r3,r2,2c654 <__muldf3+0x6f4>
   2c5ec:	00801004 	movi	r2,64
   2c5f0:	10c5c83a 	sub	r2,r2,r3
   2c5f4:	8884983a 	sll	r2,r17,r2
   2c5f8:	1204b03a 	or	r2,r2,r8
   2c5fc:	1004c03a 	cmpne	r2,r2,zero
   2c600:	2084b03a 	or	r2,r4,r2
   2c604:	144001cc 	andi	r17,r2,7
   2c608:	88000d1e 	bne	r17,zero,2c640 <__muldf3+0x6e0>
   2c60c:	000b883a 	mov	r5,zero
   2c610:	1028d0fa 	srli	r20,r2,3
   2c614:	b02b883a 	mov	r21,r22
   2c618:	0005883a 	mov	r2,zero
   2c61c:	a468b03a 	or	r20,r20,r17
   2c620:	003eae06 	br	2c0dc <__alt_data_end+0xfffec0dc>
   2c624:	1007883a 	mov	r3,r2
   2c628:	0023883a 	mov	r17,zero
   2c62c:	880a927a 	slli	r5,r17,9
   2c630:	1805883a 	mov	r2,r3
   2c634:	8822977a 	slli	r17,r17,29
   2c638:	280ad33a 	srli	r5,r5,12
   2c63c:	003ff406 	br	2c610 <__alt_data_end+0xfffec610>
   2c640:	10c003cc 	andi	r3,r2,15
   2c644:	01000104 	movi	r4,4
   2c648:	193ff626 	beq	r3,r4,2c624 <__alt_data_end+0xfffec624>
   2c64c:	0023883a 	mov	r17,zero
   2c650:	003fd506 	br	2c5a8 <__alt_data_end+0xfffec5a8>
   2c654:	0005883a 	mov	r2,zero
   2c658:	003fe706 	br	2c5f8 <__alt_data_end+0xfffec5f8>
   2c65c:	00800434 	movhi	r2,16
   2c660:	89400234 	orhi	r5,r17,8
   2c664:	10bfffc4 	addi	r2,r2,-1
   2c668:	b02b883a 	mov	r21,r22
   2c66c:	288a703a 	and	r5,r5,r2
   2c670:	4029883a 	mov	r20,r8
   2c674:	003eff06 	br	2c274 <__alt_data_end+0xfffec274>

0002c678 <__subdf3>:
   2c678:	02000434 	movhi	r8,16
   2c67c:	423fffc4 	addi	r8,r8,-1
   2c680:	defffb04 	addi	sp,sp,-20
   2c684:	2a14703a 	and	r10,r5,r8
   2c688:	3812d53a 	srli	r9,r7,20
   2c68c:	3a10703a 	and	r8,r7,r8
   2c690:	2006d77a 	srli	r3,r4,29
   2c694:	3004d77a 	srli	r2,r6,29
   2c698:	dc000015 	stw	r16,0(sp)
   2c69c:	501490fa 	slli	r10,r10,3
   2c6a0:	2820d53a 	srli	r16,r5,20
   2c6a4:	401090fa 	slli	r8,r8,3
   2c6a8:	dc800215 	stw	r18,8(sp)
   2c6ac:	dc400115 	stw	r17,4(sp)
   2c6b0:	dfc00415 	stw	ra,16(sp)
   2c6b4:	202290fa 	slli	r17,r4,3
   2c6b8:	dcc00315 	stw	r19,12(sp)
   2c6bc:	4a41ffcc 	andi	r9,r9,2047
   2c6c0:	0101ffc4 	movi	r4,2047
   2c6c4:	2824d7fa 	srli	r18,r5,31
   2c6c8:	8401ffcc 	andi	r16,r16,2047
   2c6cc:	50c6b03a 	or	r3,r10,r3
   2c6d0:	380ed7fa 	srli	r7,r7,31
   2c6d4:	408ab03a 	or	r5,r8,r2
   2c6d8:	300c90fa 	slli	r6,r6,3
   2c6dc:	49009626 	beq	r9,r4,2c938 <__subdf3+0x2c0>
   2c6e0:	39c0005c 	xori	r7,r7,1
   2c6e4:	8245c83a 	sub	r2,r16,r9
   2c6e8:	3c807426 	beq	r7,r18,2c8bc <__subdf3+0x244>
   2c6ec:	0080af0e 	bge	zero,r2,2c9ac <__subdf3+0x334>
   2c6f0:	48002a1e 	bne	r9,zero,2c79c <__subdf3+0x124>
   2c6f4:	2988b03a 	or	r4,r5,r6
   2c6f8:	20009a1e 	bne	r4,zero,2c964 <__subdf3+0x2ec>
   2c6fc:	888001cc 	andi	r2,r17,7
   2c700:	10000726 	beq	r2,zero,2c720 <__subdf3+0xa8>
   2c704:	888003cc 	andi	r2,r17,15
   2c708:	01000104 	movi	r4,4
   2c70c:	11000426 	beq	r2,r4,2c720 <__subdf3+0xa8>
   2c710:	890b883a 	add	r5,r17,r4
   2c714:	2c63803a 	cmpltu	r17,r5,r17
   2c718:	1c47883a 	add	r3,r3,r17
   2c71c:	2823883a 	mov	r17,r5
   2c720:	1880202c 	andhi	r2,r3,128
   2c724:	10005926 	beq	r2,zero,2c88c <__subdf3+0x214>
   2c728:	84000044 	addi	r16,r16,1
   2c72c:	0081ffc4 	movi	r2,2047
   2c730:	8080be26 	beq	r16,r2,2ca2c <__subdf3+0x3b4>
   2c734:	017fe034 	movhi	r5,65408
   2c738:	297fffc4 	addi	r5,r5,-1
   2c73c:	1946703a 	and	r3,r3,r5
   2c740:	1804977a 	slli	r2,r3,29
   2c744:	1806927a 	slli	r3,r3,9
   2c748:	8822d0fa 	srli	r17,r17,3
   2c74c:	8401ffcc 	andi	r16,r16,2047
   2c750:	180ad33a 	srli	r5,r3,12
   2c754:	9100004c 	andi	r4,r18,1
   2c758:	1444b03a 	or	r2,r2,r17
   2c75c:	80c1ffcc 	andi	r3,r16,2047
   2c760:	1820953a 	slli	r16,r3,20
   2c764:	20c03fcc 	andi	r3,r4,255
   2c768:	180897fa 	slli	r4,r3,31
   2c76c:	00c00434 	movhi	r3,16
   2c770:	18ffffc4 	addi	r3,r3,-1
   2c774:	28c6703a 	and	r3,r5,r3
   2c778:	1c06b03a 	or	r3,r3,r16
   2c77c:	1906b03a 	or	r3,r3,r4
   2c780:	dfc00417 	ldw	ra,16(sp)
   2c784:	dcc00317 	ldw	r19,12(sp)
   2c788:	dc800217 	ldw	r18,8(sp)
   2c78c:	dc400117 	ldw	r17,4(sp)
   2c790:	dc000017 	ldw	r16,0(sp)
   2c794:	dec00504 	addi	sp,sp,20
   2c798:	f800283a 	ret
   2c79c:	0101ffc4 	movi	r4,2047
   2c7a0:	813fd626 	beq	r16,r4,2c6fc <__alt_data_end+0xfffec6fc>
   2c7a4:	29402034 	orhi	r5,r5,128
   2c7a8:	01000e04 	movi	r4,56
   2c7ac:	2080a316 	blt	r4,r2,2ca3c <__subdf3+0x3c4>
   2c7b0:	010007c4 	movi	r4,31
   2c7b4:	2080c616 	blt	r4,r2,2cad0 <__subdf3+0x458>
   2c7b8:	01000804 	movi	r4,32
   2c7bc:	2089c83a 	sub	r4,r4,r2
   2c7c0:	2910983a 	sll	r8,r5,r4
   2c7c4:	308ed83a 	srl	r7,r6,r2
   2c7c8:	3108983a 	sll	r4,r6,r4
   2c7cc:	2884d83a 	srl	r2,r5,r2
   2c7d0:	41ccb03a 	or	r6,r8,r7
   2c7d4:	2008c03a 	cmpne	r4,r4,zero
   2c7d8:	310cb03a 	or	r6,r6,r4
   2c7dc:	898dc83a 	sub	r6,r17,r6
   2c7e0:	89a3803a 	cmpltu	r17,r17,r6
   2c7e4:	1887c83a 	sub	r3,r3,r2
   2c7e8:	1c47c83a 	sub	r3,r3,r17
   2c7ec:	3023883a 	mov	r17,r6
   2c7f0:	1880202c 	andhi	r2,r3,128
   2c7f4:	10002326 	beq	r2,zero,2c884 <__subdf3+0x20c>
   2c7f8:	04c02034 	movhi	r19,128
   2c7fc:	9cffffc4 	addi	r19,r19,-1
   2c800:	1ce6703a 	and	r19,r3,r19
   2c804:	98007a26 	beq	r19,zero,2c9f0 <__subdf3+0x378>
   2c808:	9809883a 	mov	r4,r19
   2c80c:	002d1780 	call	2d178 <__clzsi2>
   2c810:	113ffe04 	addi	r4,r2,-8
   2c814:	00c007c4 	movi	r3,31
   2c818:	19007b16 	blt	r3,r4,2ca08 <__subdf3+0x390>
   2c81c:	00800804 	movi	r2,32
   2c820:	1105c83a 	sub	r2,r2,r4
   2c824:	8884d83a 	srl	r2,r17,r2
   2c828:	9906983a 	sll	r3,r19,r4
   2c82c:	8922983a 	sll	r17,r17,r4
   2c830:	10c4b03a 	or	r2,r2,r3
   2c834:	24007816 	blt	r4,r16,2ca18 <__subdf3+0x3a0>
   2c838:	2421c83a 	sub	r16,r4,r16
   2c83c:	80c00044 	addi	r3,r16,1
   2c840:	010007c4 	movi	r4,31
   2c844:	20c09516 	blt	r4,r3,2ca9c <__subdf3+0x424>
   2c848:	01400804 	movi	r5,32
   2c84c:	28cbc83a 	sub	r5,r5,r3
   2c850:	88c8d83a 	srl	r4,r17,r3
   2c854:	8962983a 	sll	r17,r17,r5
   2c858:	114a983a 	sll	r5,r2,r5
   2c85c:	10c6d83a 	srl	r3,r2,r3
   2c860:	8804c03a 	cmpne	r2,r17,zero
   2c864:	290ab03a 	or	r5,r5,r4
   2c868:	28a2b03a 	or	r17,r5,r2
   2c86c:	0021883a 	mov	r16,zero
   2c870:	003fa206 	br	2c6fc <__alt_data_end+0xfffec6fc>
   2c874:	2090b03a 	or	r8,r4,r2
   2c878:	40018e26 	beq	r8,zero,2ceb4 <__subdf3+0x83c>
   2c87c:	1007883a 	mov	r3,r2
   2c880:	2023883a 	mov	r17,r4
   2c884:	888001cc 	andi	r2,r17,7
   2c888:	103f9e1e 	bne	r2,zero,2c704 <__alt_data_end+0xfffec704>
   2c88c:	1804977a 	slli	r2,r3,29
   2c890:	8822d0fa 	srli	r17,r17,3
   2c894:	1810d0fa 	srli	r8,r3,3
   2c898:	9100004c 	andi	r4,r18,1
   2c89c:	1444b03a 	or	r2,r2,r17
   2c8a0:	00c1ffc4 	movi	r3,2047
   2c8a4:	80c02826 	beq	r16,r3,2c948 <__subdf3+0x2d0>
   2c8a8:	01400434 	movhi	r5,16
   2c8ac:	297fffc4 	addi	r5,r5,-1
   2c8b0:	80e0703a 	and	r16,r16,r3
   2c8b4:	414a703a 	and	r5,r8,r5
   2c8b8:	003fa806 	br	2c75c <__alt_data_end+0xfffec75c>
   2c8bc:	0080630e 	bge	zero,r2,2ca4c <__subdf3+0x3d4>
   2c8c0:	48003026 	beq	r9,zero,2c984 <__subdf3+0x30c>
   2c8c4:	0101ffc4 	movi	r4,2047
   2c8c8:	813f8c26 	beq	r16,r4,2c6fc <__alt_data_end+0xfffec6fc>
   2c8cc:	29402034 	orhi	r5,r5,128
   2c8d0:	01000e04 	movi	r4,56
   2c8d4:	2080a90e 	bge	r4,r2,2cb7c <__subdf3+0x504>
   2c8d8:	298cb03a 	or	r6,r5,r6
   2c8dc:	3012c03a 	cmpne	r9,r6,zero
   2c8e0:	0005883a 	mov	r2,zero
   2c8e4:	4c53883a 	add	r9,r9,r17
   2c8e8:	4c63803a 	cmpltu	r17,r9,r17
   2c8ec:	10c7883a 	add	r3,r2,r3
   2c8f0:	88c7883a 	add	r3,r17,r3
   2c8f4:	4823883a 	mov	r17,r9
   2c8f8:	1880202c 	andhi	r2,r3,128
   2c8fc:	1000d026 	beq	r2,zero,2cc40 <__subdf3+0x5c8>
   2c900:	84000044 	addi	r16,r16,1
   2c904:	0081ffc4 	movi	r2,2047
   2c908:	8080fe26 	beq	r16,r2,2cd04 <__subdf3+0x68c>
   2c90c:	00bfe034 	movhi	r2,65408
   2c910:	10bfffc4 	addi	r2,r2,-1
   2c914:	1886703a 	and	r3,r3,r2
   2c918:	880ad07a 	srli	r5,r17,1
   2c91c:	180497fa 	slli	r2,r3,31
   2c920:	8900004c 	andi	r4,r17,1
   2c924:	2922b03a 	or	r17,r5,r4
   2c928:	1806d07a 	srli	r3,r3,1
   2c92c:	1462b03a 	or	r17,r2,r17
   2c930:	3825883a 	mov	r18,r7
   2c934:	003f7106 	br	2c6fc <__alt_data_end+0xfffec6fc>
   2c938:	2984b03a 	or	r2,r5,r6
   2c93c:	103f6826 	beq	r2,zero,2c6e0 <__alt_data_end+0xfffec6e0>
   2c940:	39c03fcc 	andi	r7,r7,255
   2c944:	003f6706 	br	2c6e4 <__alt_data_end+0xfffec6e4>
   2c948:	4086b03a 	or	r3,r8,r2
   2c94c:	18015226 	beq	r3,zero,2ce98 <__subdf3+0x820>
   2c950:	00c00434 	movhi	r3,16
   2c954:	41400234 	orhi	r5,r8,8
   2c958:	18ffffc4 	addi	r3,r3,-1
   2c95c:	28ca703a 	and	r5,r5,r3
   2c960:	003f7e06 	br	2c75c <__alt_data_end+0xfffec75c>
   2c964:	10bfffc4 	addi	r2,r2,-1
   2c968:	1000491e 	bne	r2,zero,2ca90 <__subdf3+0x418>
   2c96c:	898fc83a 	sub	r7,r17,r6
   2c970:	89e3803a 	cmpltu	r17,r17,r7
   2c974:	1947c83a 	sub	r3,r3,r5
   2c978:	1c47c83a 	sub	r3,r3,r17
   2c97c:	3823883a 	mov	r17,r7
   2c980:	003f9b06 	br	2c7f0 <__alt_data_end+0xfffec7f0>
   2c984:	2988b03a 	or	r4,r5,r6
   2c988:	203f5c26 	beq	r4,zero,2c6fc <__alt_data_end+0xfffec6fc>
   2c98c:	10bfffc4 	addi	r2,r2,-1
   2c990:	1000931e 	bne	r2,zero,2cbe0 <__subdf3+0x568>
   2c994:	898d883a 	add	r6,r17,r6
   2c998:	3463803a 	cmpltu	r17,r6,r17
   2c99c:	1947883a 	add	r3,r3,r5
   2c9a0:	88c7883a 	add	r3,r17,r3
   2c9a4:	3023883a 	mov	r17,r6
   2c9a8:	003fd306 	br	2c8f8 <__alt_data_end+0xfffec8f8>
   2c9ac:	1000541e 	bne	r2,zero,2cb00 <__subdf3+0x488>
   2c9b0:	80800044 	addi	r2,r16,1
   2c9b4:	1081ffcc 	andi	r2,r2,2047
   2c9b8:	01000044 	movi	r4,1
   2c9bc:	2080a20e 	bge	r4,r2,2cc48 <__subdf3+0x5d0>
   2c9c0:	8989c83a 	sub	r4,r17,r6
   2c9c4:	8905803a 	cmpltu	r2,r17,r4
   2c9c8:	1967c83a 	sub	r19,r3,r5
   2c9cc:	98a7c83a 	sub	r19,r19,r2
   2c9d0:	9880202c 	andhi	r2,r19,128
   2c9d4:	10006326 	beq	r2,zero,2cb64 <__subdf3+0x4ec>
   2c9d8:	3463c83a 	sub	r17,r6,r17
   2c9dc:	28c7c83a 	sub	r3,r5,r3
   2c9e0:	344d803a 	cmpltu	r6,r6,r17
   2c9e4:	19a7c83a 	sub	r19,r3,r6
   2c9e8:	3825883a 	mov	r18,r7
   2c9ec:	983f861e 	bne	r19,zero,2c808 <__alt_data_end+0xfffec808>
   2c9f0:	8809883a 	mov	r4,r17
   2c9f4:	002d1780 	call	2d178 <__clzsi2>
   2c9f8:	10800804 	addi	r2,r2,32
   2c9fc:	113ffe04 	addi	r4,r2,-8
   2ca00:	00c007c4 	movi	r3,31
   2ca04:	193f850e 	bge	r3,r4,2c81c <__alt_data_end+0xfffec81c>
   2ca08:	10bff604 	addi	r2,r2,-40
   2ca0c:	8884983a 	sll	r2,r17,r2
   2ca10:	0023883a 	mov	r17,zero
   2ca14:	243f880e 	bge	r4,r16,2c838 <__alt_data_end+0xfffec838>
   2ca18:	00ffe034 	movhi	r3,65408
   2ca1c:	18ffffc4 	addi	r3,r3,-1
   2ca20:	8121c83a 	sub	r16,r16,r4
   2ca24:	10c6703a 	and	r3,r2,r3
   2ca28:	003f3406 	br	2c6fc <__alt_data_end+0xfffec6fc>
   2ca2c:	9100004c 	andi	r4,r18,1
   2ca30:	000b883a 	mov	r5,zero
   2ca34:	0005883a 	mov	r2,zero
   2ca38:	003f4806 	br	2c75c <__alt_data_end+0xfffec75c>
   2ca3c:	298cb03a 	or	r6,r5,r6
   2ca40:	300cc03a 	cmpne	r6,r6,zero
   2ca44:	0005883a 	mov	r2,zero
   2ca48:	003f6406 	br	2c7dc <__alt_data_end+0xfffec7dc>
   2ca4c:	10009a1e 	bne	r2,zero,2ccb8 <__subdf3+0x640>
   2ca50:	82400044 	addi	r9,r16,1
   2ca54:	4881ffcc 	andi	r2,r9,2047
   2ca58:	02800044 	movi	r10,1
   2ca5c:	5080670e 	bge	r10,r2,2cbfc <__subdf3+0x584>
   2ca60:	0081ffc4 	movi	r2,2047
   2ca64:	4880af26 	beq	r9,r2,2cd24 <__subdf3+0x6ac>
   2ca68:	898d883a 	add	r6,r17,r6
   2ca6c:	1945883a 	add	r2,r3,r5
   2ca70:	3447803a 	cmpltu	r3,r6,r17
   2ca74:	1887883a 	add	r3,r3,r2
   2ca78:	182297fa 	slli	r17,r3,31
   2ca7c:	300cd07a 	srli	r6,r6,1
   2ca80:	1806d07a 	srli	r3,r3,1
   2ca84:	4821883a 	mov	r16,r9
   2ca88:	89a2b03a 	or	r17,r17,r6
   2ca8c:	003f1b06 	br	2c6fc <__alt_data_end+0xfffec6fc>
   2ca90:	0101ffc4 	movi	r4,2047
   2ca94:	813f441e 	bne	r16,r4,2c7a8 <__alt_data_end+0xfffec7a8>
   2ca98:	003f1806 	br	2c6fc <__alt_data_end+0xfffec6fc>
   2ca9c:	843ff844 	addi	r16,r16,-31
   2caa0:	01400804 	movi	r5,32
   2caa4:	1408d83a 	srl	r4,r2,r16
   2caa8:	19405026 	beq	r3,r5,2cbec <__subdf3+0x574>
   2caac:	01401004 	movi	r5,64
   2cab0:	28c7c83a 	sub	r3,r5,r3
   2cab4:	10c4983a 	sll	r2,r2,r3
   2cab8:	88a2b03a 	or	r17,r17,r2
   2cabc:	8822c03a 	cmpne	r17,r17,zero
   2cac0:	2462b03a 	or	r17,r4,r17
   2cac4:	0007883a 	mov	r3,zero
   2cac8:	0021883a 	mov	r16,zero
   2cacc:	003f6d06 	br	2c884 <__alt_data_end+0xfffec884>
   2cad0:	11fff804 	addi	r7,r2,-32
   2cad4:	01000804 	movi	r4,32
   2cad8:	29ced83a 	srl	r7,r5,r7
   2cadc:	11004526 	beq	r2,r4,2cbf4 <__subdf3+0x57c>
   2cae0:	01001004 	movi	r4,64
   2cae4:	2089c83a 	sub	r4,r4,r2
   2cae8:	2904983a 	sll	r2,r5,r4
   2caec:	118cb03a 	or	r6,r2,r6
   2caf0:	300cc03a 	cmpne	r6,r6,zero
   2caf4:	398cb03a 	or	r6,r7,r6
   2caf8:	0005883a 	mov	r2,zero
   2cafc:	003f3706 	br	2c7dc <__alt_data_end+0xfffec7dc>
   2cb00:	80002a26 	beq	r16,zero,2cbac <__subdf3+0x534>
   2cb04:	0101ffc4 	movi	r4,2047
   2cb08:	49006626 	beq	r9,r4,2cca4 <__subdf3+0x62c>
   2cb0c:	0085c83a 	sub	r2,zero,r2
   2cb10:	18c02034 	orhi	r3,r3,128
   2cb14:	01000e04 	movi	r4,56
   2cb18:	20807e16 	blt	r4,r2,2cd14 <__subdf3+0x69c>
   2cb1c:	010007c4 	movi	r4,31
   2cb20:	2080e716 	blt	r4,r2,2cec0 <__subdf3+0x848>
   2cb24:	01000804 	movi	r4,32
   2cb28:	2089c83a 	sub	r4,r4,r2
   2cb2c:	1914983a 	sll	r10,r3,r4
   2cb30:	8890d83a 	srl	r8,r17,r2
   2cb34:	8908983a 	sll	r4,r17,r4
   2cb38:	1884d83a 	srl	r2,r3,r2
   2cb3c:	5222b03a 	or	r17,r10,r8
   2cb40:	2006c03a 	cmpne	r3,r4,zero
   2cb44:	88e2b03a 	or	r17,r17,r3
   2cb48:	3463c83a 	sub	r17,r6,r17
   2cb4c:	2885c83a 	sub	r2,r5,r2
   2cb50:	344d803a 	cmpltu	r6,r6,r17
   2cb54:	1187c83a 	sub	r3,r2,r6
   2cb58:	4821883a 	mov	r16,r9
   2cb5c:	3825883a 	mov	r18,r7
   2cb60:	003f2306 	br	2c7f0 <__alt_data_end+0xfffec7f0>
   2cb64:	24d0b03a 	or	r8,r4,r19
   2cb68:	40001b1e 	bne	r8,zero,2cbd8 <__subdf3+0x560>
   2cb6c:	0005883a 	mov	r2,zero
   2cb70:	0009883a 	mov	r4,zero
   2cb74:	0021883a 	mov	r16,zero
   2cb78:	003f4906 	br	2c8a0 <__alt_data_end+0xfffec8a0>
   2cb7c:	010007c4 	movi	r4,31
   2cb80:	20803a16 	blt	r4,r2,2cc6c <__subdf3+0x5f4>
   2cb84:	01000804 	movi	r4,32
   2cb88:	2089c83a 	sub	r4,r4,r2
   2cb8c:	2912983a 	sll	r9,r5,r4
   2cb90:	3090d83a 	srl	r8,r6,r2
   2cb94:	3108983a 	sll	r4,r6,r4
   2cb98:	2884d83a 	srl	r2,r5,r2
   2cb9c:	4a12b03a 	or	r9,r9,r8
   2cba0:	2008c03a 	cmpne	r4,r4,zero
   2cba4:	4912b03a 	or	r9,r9,r4
   2cba8:	003f4e06 	br	2c8e4 <__alt_data_end+0xfffec8e4>
   2cbac:	1c48b03a 	or	r4,r3,r17
   2cbb0:	20003c26 	beq	r4,zero,2cca4 <__subdf3+0x62c>
   2cbb4:	0084303a 	nor	r2,zero,r2
   2cbb8:	1000381e 	bne	r2,zero,2cc9c <__subdf3+0x624>
   2cbbc:	3463c83a 	sub	r17,r6,r17
   2cbc0:	28c5c83a 	sub	r2,r5,r3
   2cbc4:	344d803a 	cmpltu	r6,r6,r17
   2cbc8:	1187c83a 	sub	r3,r2,r6
   2cbcc:	4821883a 	mov	r16,r9
   2cbd0:	3825883a 	mov	r18,r7
   2cbd4:	003f0606 	br	2c7f0 <__alt_data_end+0xfffec7f0>
   2cbd8:	2023883a 	mov	r17,r4
   2cbdc:	003f0906 	br	2c804 <__alt_data_end+0xfffec804>
   2cbe0:	0101ffc4 	movi	r4,2047
   2cbe4:	813f3a1e 	bne	r16,r4,2c8d0 <__alt_data_end+0xfffec8d0>
   2cbe8:	003ec406 	br	2c6fc <__alt_data_end+0xfffec6fc>
   2cbec:	0005883a 	mov	r2,zero
   2cbf0:	003fb106 	br	2cab8 <__alt_data_end+0xfffecab8>
   2cbf4:	0005883a 	mov	r2,zero
   2cbf8:	003fbc06 	br	2caec <__alt_data_end+0xfffecaec>
   2cbfc:	1c44b03a 	or	r2,r3,r17
   2cc00:	80008e1e 	bne	r16,zero,2ce3c <__subdf3+0x7c4>
   2cc04:	1000c826 	beq	r2,zero,2cf28 <__subdf3+0x8b0>
   2cc08:	2984b03a 	or	r2,r5,r6
   2cc0c:	103ebb26 	beq	r2,zero,2c6fc <__alt_data_end+0xfffec6fc>
   2cc10:	8989883a 	add	r4,r17,r6
   2cc14:	1945883a 	add	r2,r3,r5
   2cc18:	2447803a 	cmpltu	r3,r4,r17
   2cc1c:	1887883a 	add	r3,r3,r2
   2cc20:	1880202c 	andhi	r2,r3,128
   2cc24:	2023883a 	mov	r17,r4
   2cc28:	103f1626 	beq	r2,zero,2c884 <__alt_data_end+0xfffec884>
   2cc2c:	00bfe034 	movhi	r2,65408
   2cc30:	10bfffc4 	addi	r2,r2,-1
   2cc34:	5021883a 	mov	r16,r10
   2cc38:	1886703a 	and	r3,r3,r2
   2cc3c:	003eaf06 	br	2c6fc <__alt_data_end+0xfffec6fc>
   2cc40:	3825883a 	mov	r18,r7
   2cc44:	003f0f06 	br	2c884 <__alt_data_end+0xfffec884>
   2cc48:	1c44b03a 	or	r2,r3,r17
   2cc4c:	8000251e 	bne	r16,zero,2cce4 <__subdf3+0x66c>
   2cc50:	1000661e 	bne	r2,zero,2cdec <__subdf3+0x774>
   2cc54:	2990b03a 	or	r8,r5,r6
   2cc58:	40009626 	beq	r8,zero,2ceb4 <__subdf3+0x83c>
   2cc5c:	2807883a 	mov	r3,r5
   2cc60:	3023883a 	mov	r17,r6
   2cc64:	3825883a 	mov	r18,r7
   2cc68:	003ea406 	br	2c6fc <__alt_data_end+0xfffec6fc>
   2cc6c:	127ff804 	addi	r9,r2,-32
   2cc70:	01000804 	movi	r4,32
   2cc74:	2a52d83a 	srl	r9,r5,r9
   2cc78:	11008c26 	beq	r2,r4,2ceac <__subdf3+0x834>
   2cc7c:	01001004 	movi	r4,64
   2cc80:	2085c83a 	sub	r2,r4,r2
   2cc84:	2884983a 	sll	r2,r5,r2
   2cc88:	118cb03a 	or	r6,r2,r6
   2cc8c:	300cc03a 	cmpne	r6,r6,zero
   2cc90:	4992b03a 	or	r9,r9,r6
   2cc94:	0005883a 	mov	r2,zero
   2cc98:	003f1206 	br	2c8e4 <__alt_data_end+0xfffec8e4>
   2cc9c:	0101ffc4 	movi	r4,2047
   2cca0:	493f9c1e 	bne	r9,r4,2cb14 <__alt_data_end+0xfffecb14>
   2cca4:	2807883a 	mov	r3,r5
   2cca8:	3023883a 	mov	r17,r6
   2ccac:	4821883a 	mov	r16,r9
   2ccb0:	3825883a 	mov	r18,r7
   2ccb4:	003e9106 	br	2c6fc <__alt_data_end+0xfffec6fc>
   2ccb8:	80001f1e 	bne	r16,zero,2cd38 <__subdf3+0x6c0>
   2ccbc:	1c48b03a 	or	r4,r3,r17
   2ccc0:	20005a26 	beq	r4,zero,2ce2c <__subdf3+0x7b4>
   2ccc4:	0084303a 	nor	r2,zero,r2
   2ccc8:	1000561e 	bne	r2,zero,2ce24 <__subdf3+0x7ac>
   2cccc:	89a3883a 	add	r17,r17,r6
   2ccd0:	1945883a 	add	r2,r3,r5
   2ccd4:	898d803a 	cmpltu	r6,r17,r6
   2ccd8:	3087883a 	add	r3,r6,r2
   2ccdc:	4821883a 	mov	r16,r9
   2cce0:	003f0506 	br	2c8f8 <__alt_data_end+0xfffec8f8>
   2cce4:	10002b1e 	bne	r2,zero,2cd94 <__subdf3+0x71c>
   2cce8:	2984b03a 	or	r2,r5,r6
   2ccec:	10008026 	beq	r2,zero,2cef0 <__subdf3+0x878>
   2ccf0:	2807883a 	mov	r3,r5
   2ccf4:	3023883a 	mov	r17,r6
   2ccf8:	3825883a 	mov	r18,r7
   2ccfc:	0401ffc4 	movi	r16,2047
   2cd00:	003e7e06 	br	2c6fc <__alt_data_end+0xfffec6fc>
   2cd04:	3809883a 	mov	r4,r7
   2cd08:	0011883a 	mov	r8,zero
   2cd0c:	0005883a 	mov	r2,zero
   2cd10:	003ee306 	br	2c8a0 <__alt_data_end+0xfffec8a0>
   2cd14:	1c62b03a 	or	r17,r3,r17
   2cd18:	8822c03a 	cmpne	r17,r17,zero
   2cd1c:	0005883a 	mov	r2,zero
   2cd20:	003f8906 	br	2cb48 <__alt_data_end+0xfffecb48>
   2cd24:	3809883a 	mov	r4,r7
   2cd28:	4821883a 	mov	r16,r9
   2cd2c:	0011883a 	mov	r8,zero
   2cd30:	0005883a 	mov	r2,zero
   2cd34:	003eda06 	br	2c8a0 <__alt_data_end+0xfffec8a0>
   2cd38:	0101ffc4 	movi	r4,2047
   2cd3c:	49003b26 	beq	r9,r4,2ce2c <__subdf3+0x7b4>
   2cd40:	0085c83a 	sub	r2,zero,r2
   2cd44:	18c02034 	orhi	r3,r3,128
   2cd48:	01000e04 	movi	r4,56
   2cd4c:	20806e16 	blt	r4,r2,2cf08 <__subdf3+0x890>
   2cd50:	010007c4 	movi	r4,31
   2cd54:	20807716 	blt	r4,r2,2cf34 <__subdf3+0x8bc>
   2cd58:	01000804 	movi	r4,32
   2cd5c:	2089c83a 	sub	r4,r4,r2
   2cd60:	1914983a 	sll	r10,r3,r4
   2cd64:	8890d83a 	srl	r8,r17,r2
   2cd68:	8908983a 	sll	r4,r17,r4
   2cd6c:	1884d83a 	srl	r2,r3,r2
   2cd70:	5222b03a 	or	r17,r10,r8
   2cd74:	2006c03a 	cmpne	r3,r4,zero
   2cd78:	88e2b03a 	or	r17,r17,r3
   2cd7c:	89a3883a 	add	r17,r17,r6
   2cd80:	1145883a 	add	r2,r2,r5
   2cd84:	898d803a 	cmpltu	r6,r17,r6
   2cd88:	3087883a 	add	r3,r6,r2
   2cd8c:	4821883a 	mov	r16,r9
   2cd90:	003ed906 	br	2c8f8 <__alt_data_end+0xfffec8f8>
   2cd94:	2984b03a 	or	r2,r5,r6
   2cd98:	10004226 	beq	r2,zero,2cea4 <__subdf3+0x82c>
   2cd9c:	1808d0fa 	srli	r4,r3,3
   2cda0:	8822d0fa 	srli	r17,r17,3
   2cda4:	1806977a 	slli	r3,r3,29
   2cda8:	2080022c 	andhi	r2,r4,8
   2cdac:	1c62b03a 	or	r17,r3,r17
   2cdb0:	10000826 	beq	r2,zero,2cdd4 <__subdf3+0x75c>
   2cdb4:	2812d0fa 	srli	r9,r5,3
   2cdb8:	4880022c 	andhi	r2,r9,8
   2cdbc:	1000051e 	bne	r2,zero,2cdd4 <__subdf3+0x75c>
   2cdc0:	300cd0fa 	srli	r6,r6,3
   2cdc4:	2804977a 	slli	r2,r5,29
   2cdc8:	4809883a 	mov	r4,r9
   2cdcc:	3825883a 	mov	r18,r7
   2cdd0:	11a2b03a 	or	r17,r2,r6
   2cdd4:	8806d77a 	srli	r3,r17,29
   2cdd8:	200890fa 	slli	r4,r4,3
   2cddc:	882290fa 	slli	r17,r17,3
   2cde0:	0401ffc4 	movi	r16,2047
   2cde4:	1906b03a 	or	r3,r3,r4
   2cde8:	003e4406 	br	2c6fc <__alt_data_end+0xfffec6fc>
   2cdec:	2984b03a 	or	r2,r5,r6
   2cdf0:	103e4226 	beq	r2,zero,2c6fc <__alt_data_end+0xfffec6fc>
   2cdf4:	8989c83a 	sub	r4,r17,r6
   2cdf8:	8911803a 	cmpltu	r8,r17,r4
   2cdfc:	1945c83a 	sub	r2,r3,r5
   2ce00:	1205c83a 	sub	r2,r2,r8
   2ce04:	1200202c 	andhi	r8,r2,128
   2ce08:	403e9a26 	beq	r8,zero,2c874 <__alt_data_end+0xfffec874>
   2ce0c:	3463c83a 	sub	r17,r6,r17
   2ce10:	28c5c83a 	sub	r2,r5,r3
   2ce14:	344d803a 	cmpltu	r6,r6,r17
   2ce18:	1187c83a 	sub	r3,r2,r6
   2ce1c:	3825883a 	mov	r18,r7
   2ce20:	003e3606 	br	2c6fc <__alt_data_end+0xfffec6fc>
   2ce24:	0101ffc4 	movi	r4,2047
   2ce28:	493fc71e 	bne	r9,r4,2cd48 <__alt_data_end+0xfffecd48>
   2ce2c:	2807883a 	mov	r3,r5
   2ce30:	3023883a 	mov	r17,r6
   2ce34:	4821883a 	mov	r16,r9
   2ce38:	003e3006 	br	2c6fc <__alt_data_end+0xfffec6fc>
   2ce3c:	10003626 	beq	r2,zero,2cf18 <__subdf3+0x8a0>
   2ce40:	2984b03a 	or	r2,r5,r6
   2ce44:	10001726 	beq	r2,zero,2cea4 <__subdf3+0x82c>
   2ce48:	1808d0fa 	srli	r4,r3,3
   2ce4c:	8822d0fa 	srli	r17,r17,3
   2ce50:	1806977a 	slli	r3,r3,29
   2ce54:	2080022c 	andhi	r2,r4,8
   2ce58:	1c62b03a 	or	r17,r3,r17
   2ce5c:	10000726 	beq	r2,zero,2ce7c <__subdf3+0x804>
   2ce60:	2812d0fa 	srli	r9,r5,3
   2ce64:	4880022c 	andhi	r2,r9,8
   2ce68:	1000041e 	bne	r2,zero,2ce7c <__subdf3+0x804>
   2ce6c:	300cd0fa 	srli	r6,r6,3
   2ce70:	2804977a 	slli	r2,r5,29
   2ce74:	4809883a 	mov	r4,r9
   2ce78:	11a2b03a 	or	r17,r2,r6
   2ce7c:	8806d77a 	srli	r3,r17,29
   2ce80:	200890fa 	slli	r4,r4,3
   2ce84:	882290fa 	slli	r17,r17,3
   2ce88:	3825883a 	mov	r18,r7
   2ce8c:	1906b03a 	or	r3,r3,r4
   2ce90:	0401ffc4 	movi	r16,2047
   2ce94:	003e1906 	br	2c6fc <__alt_data_end+0xfffec6fc>
   2ce98:	000b883a 	mov	r5,zero
   2ce9c:	0005883a 	mov	r2,zero
   2cea0:	003e2e06 	br	2c75c <__alt_data_end+0xfffec75c>
   2cea4:	0401ffc4 	movi	r16,2047
   2cea8:	003e1406 	br	2c6fc <__alt_data_end+0xfffec6fc>
   2ceac:	0005883a 	mov	r2,zero
   2ceb0:	003f7506 	br	2cc88 <__alt_data_end+0xfffecc88>
   2ceb4:	0005883a 	mov	r2,zero
   2ceb8:	0009883a 	mov	r4,zero
   2cebc:	003e7806 	br	2c8a0 <__alt_data_end+0xfffec8a0>
   2cec0:	123ff804 	addi	r8,r2,-32
   2cec4:	01000804 	movi	r4,32
   2cec8:	1a10d83a 	srl	r8,r3,r8
   2cecc:	11002526 	beq	r2,r4,2cf64 <__subdf3+0x8ec>
   2ced0:	01001004 	movi	r4,64
   2ced4:	2085c83a 	sub	r2,r4,r2
   2ced8:	1884983a 	sll	r2,r3,r2
   2cedc:	1444b03a 	or	r2,r2,r17
   2cee0:	1004c03a 	cmpne	r2,r2,zero
   2cee4:	40a2b03a 	or	r17,r8,r2
   2cee8:	0005883a 	mov	r2,zero
   2ceec:	003f1606 	br	2cb48 <__alt_data_end+0xfffecb48>
   2cef0:	02000434 	movhi	r8,16
   2cef4:	0009883a 	mov	r4,zero
   2cef8:	423fffc4 	addi	r8,r8,-1
   2cefc:	00bfffc4 	movi	r2,-1
   2cf00:	0401ffc4 	movi	r16,2047
   2cf04:	003e6606 	br	2c8a0 <__alt_data_end+0xfffec8a0>
   2cf08:	1c62b03a 	or	r17,r3,r17
   2cf0c:	8822c03a 	cmpne	r17,r17,zero
   2cf10:	0005883a 	mov	r2,zero
   2cf14:	003f9906 	br	2cd7c <__alt_data_end+0xfffecd7c>
   2cf18:	2807883a 	mov	r3,r5
   2cf1c:	3023883a 	mov	r17,r6
   2cf20:	0401ffc4 	movi	r16,2047
   2cf24:	003df506 	br	2c6fc <__alt_data_end+0xfffec6fc>
   2cf28:	2807883a 	mov	r3,r5
   2cf2c:	3023883a 	mov	r17,r6
   2cf30:	003df206 	br	2c6fc <__alt_data_end+0xfffec6fc>
   2cf34:	123ff804 	addi	r8,r2,-32
   2cf38:	01000804 	movi	r4,32
   2cf3c:	1a10d83a 	srl	r8,r3,r8
   2cf40:	11000a26 	beq	r2,r4,2cf6c <__subdf3+0x8f4>
   2cf44:	01001004 	movi	r4,64
   2cf48:	2085c83a 	sub	r2,r4,r2
   2cf4c:	1884983a 	sll	r2,r3,r2
   2cf50:	1444b03a 	or	r2,r2,r17
   2cf54:	1004c03a 	cmpne	r2,r2,zero
   2cf58:	40a2b03a 	or	r17,r8,r2
   2cf5c:	0005883a 	mov	r2,zero
   2cf60:	003f8606 	br	2cd7c <__alt_data_end+0xfffecd7c>
   2cf64:	0005883a 	mov	r2,zero
   2cf68:	003fdc06 	br	2cedc <__alt_data_end+0xfffecedc>
   2cf6c:	0005883a 	mov	r2,zero
   2cf70:	003ff706 	br	2cf50 <__alt_data_end+0xfffecf50>

0002cf74 <__fixdfsi>:
   2cf74:	280cd53a 	srli	r6,r5,20
   2cf78:	00c00434 	movhi	r3,16
   2cf7c:	18ffffc4 	addi	r3,r3,-1
   2cf80:	3181ffcc 	andi	r6,r6,2047
   2cf84:	01c0ff84 	movi	r7,1022
   2cf88:	28c6703a 	and	r3,r5,r3
   2cf8c:	280ad7fa 	srli	r5,r5,31
   2cf90:	3980120e 	bge	r7,r6,2cfdc <__fixdfsi+0x68>
   2cf94:	00810744 	movi	r2,1053
   2cf98:	11800c16 	blt	r2,r6,2cfcc <__fixdfsi+0x58>
   2cf9c:	00810cc4 	movi	r2,1075
   2cfa0:	1185c83a 	sub	r2,r2,r6
   2cfa4:	01c007c4 	movi	r7,31
   2cfa8:	18c00434 	orhi	r3,r3,16
   2cfac:	38800d16 	blt	r7,r2,2cfe4 <__fixdfsi+0x70>
   2cfb0:	31befb44 	addi	r6,r6,-1043
   2cfb4:	2084d83a 	srl	r2,r4,r2
   2cfb8:	1986983a 	sll	r3,r3,r6
   2cfbc:	1884b03a 	or	r2,r3,r2
   2cfc0:	28000726 	beq	r5,zero,2cfe0 <__fixdfsi+0x6c>
   2cfc4:	0085c83a 	sub	r2,zero,r2
   2cfc8:	f800283a 	ret
   2cfcc:	00a00034 	movhi	r2,32768
   2cfd0:	10bfffc4 	addi	r2,r2,-1
   2cfd4:	2885883a 	add	r2,r5,r2
   2cfd8:	f800283a 	ret
   2cfdc:	0005883a 	mov	r2,zero
   2cfe0:	f800283a 	ret
   2cfe4:	008104c4 	movi	r2,1043
   2cfe8:	1185c83a 	sub	r2,r2,r6
   2cfec:	1884d83a 	srl	r2,r3,r2
   2cff0:	003ff306 	br	2cfc0 <__alt_data_end+0xfffecfc0>

0002cff4 <__floatsidf>:
   2cff4:	defffd04 	addi	sp,sp,-12
   2cff8:	dfc00215 	stw	ra,8(sp)
   2cffc:	dc400115 	stw	r17,4(sp)
   2d000:	dc000015 	stw	r16,0(sp)
   2d004:	20002b26 	beq	r4,zero,2d0b4 <__floatsidf+0xc0>
   2d008:	2023883a 	mov	r17,r4
   2d00c:	2020d7fa 	srli	r16,r4,31
   2d010:	20002d16 	blt	r4,zero,2d0c8 <__floatsidf+0xd4>
   2d014:	8809883a 	mov	r4,r17
   2d018:	002d1780 	call	2d178 <__clzsi2>
   2d01c:	01410784 	movi	r5,1054
   2d020:	288bc83a 	sub	r5,r5,r2
   2d024:	01010cc4 	movi	r4,1075
   2d028:	2149c83a 	sub	r4,r4,r5
   2d02c:	00c007c4 	movi	r3,31
   2d030:	1900160e 	bge	r3,r4,2d08c <__floatsidf+0x98>
   2d034:	00c104c4 	movi	r3,1043
   2d038:	1947c83a 	sub	r3,r3,r5
   2d03c:	88c6983a 	sll	r3,r17,r3
   2d040:	00800434 	movhi	r2,16
   2d044:	10bfffc4 	addi	r2,r2,-1
   2d048:	1886703a 	and	r3,r3,r2
   2d04c:	2941ffcc 	andi	r5,r5,2047
   2d050:	800d883a 	mov	r6,r16
   2d054:	0005883a 	mov	r2,zero
   2d058:	280a953a 	slli	r5,r5,20
   2d05c:	31803fcc 	andi	r6,r6,255
   2d060:	01000434 	movhi	r4,16
   2d064:	300c97fa 	slli	r6,r6,31
   2d068:	213fffc4 	addi	r4,r4,-1
   2d06c:	1906703a 	and	r3,r3,r4
   2d070:	1946b03a 	or	r3,r3,r5
   2d074:	1986b03a 	or	r3,r3,r6
   2d078:	dfc00217 	ldw	ra,8(sp)
   2d07c:	dc400117 	ldw	r17,4(sp)
   2d080:	dc000017 	ldw	r16,0(sp)
   2d084:	dec00304 	addi	sp,sp,12
   2d088:	f800283a 	ret
   2d08c:	00c002c4 	movi	r3,11
   2d090:	1887c83a 	sub	r3,r3,r2
   2d094:	88c6d83a 	srl	r3,r17,r3
   2d098:	8904983a 	sll	r2,r17,r4
   2d09c:	01000434 	movhi	r4,16
   2d0a0:	213fffc4 	addi	r4,r4,-1
   2d0a4:	2941ffcc 	andi	r5,r5,2047
   2d0a8:	1906703a 	and	r3,r3,r4
   2d0ac:	800d883a 	mov	r6,r16
   2d0b0:	003fe906 	br	2d058 <__alt_data_end+0xfffed058>
   2d0b4:	000d883a 	mov	r6,zero
   2d0b8:	000b883a 	mov	r5,zero
   2d0bc:	0007883a 	mov	r3,zero
   2d0c0:	0005883a 	mov	r2,zero
   2d0c4:	003fe406 	br	2d058 <__alt_data_end+0xfffed058>
   2d0c8:	0123c83a 	sub	r17,zero,r4
   2d0cc:	003fd106 	br	2d014 <__alt_data_end+0xfffed014>

0002d0d0 <__floatunsidf>:
   2d0d0:	defffe04 	addi	sp,sp,-8
   2d0d4:	dc000015 	stw	r16,0(sp)
   2d0d8:	dfc00115 	stw	ra,4(sp)
   2d0dc:	2021883a 	mov	r16,r4
   2d0e0:	20002226 	beq	r4,zero,2d16c <__floatunsidf+0x9c>
   2d0e4:	002d1780 	call	2d178 <__clzsi2>
   2d0e8:	01010784 	movi	r4,1054
   2d0ec:	2089c83a 	sub	r4,r4,r2
   2d0f0:	01810cc4 	movi	r6,1075
   2d0f4:	310dc83a 	sub	r6,r6,r4
   2d0f8:	00c007c4 	movi	r3,31
   2d0fc:	1980120e 	bge	r3,r6,2d148 <__floatunsidf+0x78>
   2d100:	00c104c4 	movi	r3,1043
   2d104:	1907c83a 	sub	r3,r3,r4
   2d108:	80ca983a 	sll	r5,r16,r3
   2d10c:	00800434 	movhi	r2,16
   2d110:	10bfffc4 	addi	r2,r2,-1
   2d114:	2101ffcc 	andi	r4,r4,2047
   2d118:	0021883a 	mov	r16,zero
   2d11c:	288a703a 	and	r5,r5,r2
   2d120:	2008953a 	slli	r4,r4,20
   2d124:	00c00434 	movhi	r3,16
   2d128:	18ffffc4 	addi	r3,r3,-1
   2d12c:	28c6703a 	and	r3,r5,r3
   2d130:	8005883a 	mov	r2,r16
   2d134:	1906b03a 	or	r3,r3,r4
   2d138:	dfc00117 	ldw	ra,4(sp)
   2d13c:	dc000017 	ldw	r16,0(sp)
   2d140:	dec00204 	addi	sp,sp,8
   2d144:	f800283a 	ret
   2d148:	00c002c4 	movi	r3,11
   2d14c:	188bc83a 	sub	r5,r3,r2
   2d150:	814ad83a 	srl	r5,r16,r5
   2d154:	00c00434 	movhi	r3,16
   2d158:	18ffffc4 	addi	r3,r3,-1
   2d15c:	81a0983a 	sll	r16,r16,r6
   2d160:	2101ffcc 	andi	r4,r4,2047
   2d164:	28ca703a 	and	r5,r5,r3
   2d168:	003fed06 	br	2d120 <__alt_data_end+0xfffed120>
   2d16c:	0009883a 	mov	r4,zero
   2d170:	000b883a 	mov	r5,zero
   2d174:	003fea06 	br	2d120 <__alt_data_end+0xfffed120>

0002d178 <__clzsi2>:
   2d178:	00bfffd4 	movui	r2,65535
   2d17c:	11000536 	bltu	r2,r4,2d194 <__clzsi2+0x1c>
   2d180:	00803fc4 	movi	r2,255
   2d184:	11000f36 	bltu	r2,r4,2d1c4 <__clzsi2+0x4c>
   2d188:	00800804 	movi	r2,32
   2d18c:	0007883a 	mov	r3,zero
   2d190:	00000506 	br	2d1a8 <__clzsi2+0x30>
   2d194:	00804034 	movhi	r2,256
   2d198:	10bfffc4 	addi	r2,r2,-1
   2d19c:	11000c2e 	bgeu	r2,r4,2d1d0 <__clzsi2+0x58>
   2d1a0:	00800204 	movi	r2,8
   2d1a4:	00c00604 	movi	r3,24
   2d1a8:	20c8d83a 	srl	r4,r4,r3
   2d1ac:	00c000f4 	movhi	r3,3
   2d1b0:	18c02104 	addi	r3,r3,132
   2d1b4:	1909883a 	add	r4,r3,r4
   2d1b8:	20c00003 	ldbu	r3,0(r4)
   2d1bc:	10c5c83a 	sub	r2,r2,r3
   2d1c0:	f800283a 	ret
   2d1c4:	00800604 	movi	r2,24
   2d1c8:	00c00204 	movi	r3,8
   2d1cc:	003ff606 	br	2d1a8 <__alt_data_end+0xfffed1a8>
   2d1d0:	00800404 	movi	r2,16
   2d1d4:	1007883a 	mov	r3,r2
   2d1d8:	003ff306 	br	2d1a8 <__alt_data_end+0xfffed1a8>

0002d1dc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2d1dc:	defffe04 	addi	sp,sp,-8
   2d1e0:	dfc00115 	stw	ra,4(sp)
   2d1e4:	df000015 	stw	fp,0(sp)
   2d1e8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2d1ec:	d0a00b17 	ldw	r2,-32724(gp)
   2d1f0:	10000326 	beq	r2,zero,2d200 <alt_get_errno+0x24>
   2d1f4:	d0a00b17 	ldw	r2,-32724(gp)
   2d1f8:	103ee83a 	callr	r2
   2d1fc:	00000106 	br	2d204 <alt_get_errno+0x28>
   2d200:	d0a6d404 	addi	r2,gp,-25776
}
   2d204:	e037883a 	mov	sp,fp
   2d208:	dfc00117 	ldw	ra,4(sp)
   2d20c:	df000017 	ldw	fp,0(sp)
   2d210:	dec00204 	addi	sp,sp,8
   2d214:	f800283a 	ret

0002d218 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   2d218:	defffb04 	addi	sp,sp,-20
   2d21c:	dfc00415 	stw	ra,16(sp)
   2d220:	df000315 	stw	fp,12(sp)
   2d224:	df000304 	addi	fp,sp,12
   2d228:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   2d22c:	e0bfff17 	ldw	r2,-4(fp)
   2d230:	10000616 	blt	r2,zero,2d24c <close+0x34>
   2d234:	e0bfff17 	ldw	r2,-4(fp)
   2d238:	10c00324 	muli	r3,r2,12
   2d23c:	008000f4 	movhi	r2,3
   2d240:	1082a104 	addi	r2,r2,2692
   2d244:	1885883a 	add	r2,r3,r2
   2d248:	00000106 	br	2d250 <close+0x38>
   2d24c:	0005883a 	mov	r2,zero
   2d250:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   2d254:	e0bffd17 	ldw	r2,-12(fp)
   2d258:	10001926 	beq	r2,zero,2d2c0 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   2d25c:	e0bffd17 	ldw	r2,-12(fp)
   2d260:	10800017 	ldw	r2,0(r2)
   2d264:	10800417 	ldw	r2,16(r2)
   2d268:	10000626 	beq	r2,zero,2d284 <close+0x6c>
   2d26c:	e0bffd17 	ldw	r2,-12(fp)
   2d270:	10800017 	ldw	r2,0(r2)
   2d274:	10800417 	ldw	r2,16(r2)
   2d278:	e13ffd17 	ldw	r4,-12(fp)
   2d27c:	103ee83a 	callr	r2
   2d280:	00000106 	br	2d288 <close+0x70>
   2d284:	0005883a 	mov	r2,zero
   2d288:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   2d28c:	e13fff17 	ldw	r4,-4(fp)
   2d290:	002dde00 	call	2dde0 <alt_release_fd>
    if (rval < 0)
   2d294:	e0bffe17 	ldw	r2,-8(fp)
   2d298:	1000070e 	bge	r2,zero,2d2b8 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   2d29c:	002d1dc0 	call	2d1dc <alt_get_errno>
   2d2a0:	1007883a 	mov	r3,r2
   2d2a4:	e0bffe17 	ldw	r2,-8(fp)
   2d2a8:	0085c83a 	sub	r2,zero,r2
   2d2ac:	18800015 	stw	r2,0(r3)
      return -1;
   2d2b0:	00bfffc4 	movi	r2,-1
   2d2b4:	00000706 	br	2d2d4 <close+0xbc>
    }
    return 0;
   2d2b8:	0005883a 	mov	r2,zero
   2d2bc:	00000506 	br	2d2d4 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2d2c0:	002d1dc0 	call	2d1dc <alt_get_errno>
   2d2c4:	1007883a 	mov	r3,r2
   2d2c8:	00801444 	movi	r2,81
   2d2cc:	18800015 	stw	r2,0(r3)
    return -1;
   2d2d0:	00bfffc4 	movi	r2,-1
  }
}
   2d2d4:	e037883a 	mov	sp,fp
   2d2d8:	dfc00117 	ldw	ra,4(sp)
   2d2dc:	df000017 	ldw	fp,0(sp)
   2d2e0:	dec00204 	addi	sp,sp,8
   2d2e4:	f800283a 	ret

0002d2e8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   2d2e8:	defffc04 	addi	sp,sp,-16
   2d2ec:	df000315 	stw	fp,12(sp)
   2d2f0:	df000304 	addi	fp,sp,12
   2d2f4:	e13ffd15 	stw	r4,-12(fp)
   2d2f8:	e17ffe15 	stw	r5,-8(fp)
   2d2fc:	e1bfff15 	stw	r6,-4(fp)
  return len;
   2d300:	e0bfff17 	ldw	r2,-4(fp)
}
   2d304:	e037883a 	mov	sp,fp
   2d308:	df000017 	ldw	fp,0(sp)
   2d30c:	dec00104 	addi	sp,sp,4
   2d310:	f800283a 	ret

0002d314 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2d314:	defffe04 	addi	sp,sp,-8
   2d318:	dfc00115 	stw	ra,4(sp)
   2d31c:	df000015 	stw	fp,0(sp)
   2d320:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2d324:	d0a00b17 	ldw	r2,-32724(gp)
   2d328:	10000326 	beq	r2,zero,2d338 <alt_get_errno+0x24>
   2d32c:	d0a00b17 	ldw	r2,-32724(gp)
   2d330:	103ee83a 	callr	r2
   2d334:	00000106 	br	2d33c <alt_get_errno+0x28>
   2d338:	d0a6d404 	addi	r2,gp,-25776
}
   2d33c:	e037883a 	mov	sp,fp
   2d340:	dfc00117 	ldw	ra,4(sp)
   2d344:	df000017 	ldw	fp,0(sp)
   2d348:	dec00204 	addi	sp,sp,8
   2d34c:	f800283a 	ret

0002d350 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   2d350:	defffb04 	addi	sp,sp,-20
   2d354:	dfc00415 	stw	ra,16(sp)
   2d358:	df000315 	stw	fp,12(sp)
   2d35c:	df000304 	addi	fp,sp,12
   2d360:	e13ffe15 	stw	r4,-8(fp)
   2d364:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2d368:	e0bffe17 	ldw	r2,-8(fp)
   2d36c:	10000616 	blt	r2,zero,2d388 <fstat+0x38>
   2d370:	e0bffe17 	ldw	r2,-8(fp)
   2d374:	10c00324 	muli	r3,r2,12
   2d378:	008000f4 	movhi	r2,3
   2d37c:	1082a104 	addi	r2,r2,2692
   2d380:	1885883a 	add	r2,r3,r2
   2d384:	00000106 	br	2d38c <fstat+0x3c>
   2d388:	0005883a 	mov	r2,zero
   2d38c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   2d390:	e0bffd17 	ldw	r2,-12(fp)
   2d394:	10001026 	beq	r2,zero,2d3d8 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   2d398:	e0bffd17 	ldw	r2,-12(fp)
   2d39c:	10800017 	ldw	r2,0(r2)
   2d3a0:	10800817 	ldw	r2,32(r2)
   2d3a4:	10000726 	beq	r2,zero,2d3c4 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   2d3a8:	e0bffd17 	ldw	r2,-12(fp)
   2d3ac:	10800017 	ldw	r2,0(r2)
   2d3b0:	10800817 	ldw	r2,32(r2)
   2d3b4:	e17fff17 	ldw	r5,-4(fp)
   2d3b8:	e13ffd17 	ldw	r4,-12(fp)
   2d3bc:	103ee83a 	callr	r2
   2d3c0:	00000a06 	br	2d3ec <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   2d3c4:	e0bfff17 	ldw	r2,-4(fp)
   2d3c8:	00c80004 	movi	r3,8192
   2d3cc:	10c00115 	stw	r3,4(r2)
      return 0;
   2d3d0:	0005883a 	mov	r2,zero
   2d3d4:	00000506 	br	2d3ec <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2d3d8:	002d3140 	call	2d314 <alt_get_errno>
   2d3dc:	1007883a 	mov	r3,r2
   2d3e0:	00801444 	movi	r2,81
   2d3e4:	18800015 	stw	r2,0(r3)
    return -1;
   2d3e8:	00bfffc4 	movi	r2,-1
  }
}
   2d3ec:	e037883a 	mov	sp,fp
   2d3f0:	dfc00117 	ldw	ra,4(sp)
   2d3f4:	df000017 	ldw	fp,0(sp)
   2d3f8:	dec00204 	addi	sp,sp,8
   2d3fc:	f800283a 	ret

0002d400 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   2d400:	defff904 	addi	sp,sp,-28
   2d404:	dfc00615 	stw	ra,24(sp)
   2d408:	df000515 	stw	fp,20(sp)
   2d40c:	df000504 	addi	fp,sp,20
   2d410:	e13ffc15 	stw	r4,-16(fp)
   2d414:	e17ffd15 	stw	r5,-12(fp)
   2d418:	e1bffe15 	stw	r6,-8(fp)
   2d41c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   2d420:	e0800217 	ldw	r2,8(fp)
   2d424:	d8800015 	stw	r2,0(sp)
   2d428:	e1ffff17 	ldw	r7,-4(fp)
   2d42c:	e1bffe17 	ldw	r6,-8(fp)
   2d430:	e17ffd17 	ldw	r5,-12(fp)
   2d434:	e13ffc17 	ldw	r4,-16(fp)
   2d438:	002d5b00 	call	2d5b0 <alt_iic_isr_register>
}  
   2d43c:	e037883a 	mov	sp,fp
   2d440:	dfc00117 	ldw	ra,4(sp)
   2d444:	df000017 	ldw	fp,0(sp)
   2d448:	dec00204 	addi	sp,sp,8
   2d44c:	f800283a 	ret

0002d450 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   2d450:	defff904 	addi	sp,sp,-28
   2d454:	df000615 	stw	fp,24(sp)
   2d458:	df000604 	addi	fp,sp,24
   2d45c:	e13ffe15 	stw	r4,-8(fp)
   2d460:	e17fff15 	stw	r5,-4(fp)
   2d464:	e0bfff17 	ldw	r2,-4(fp)
   2d468:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2d46c:	0005303a 	rdctl	r2,status
   2d470:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2d474:	e0fffb17 	ldw	r3,-20(fp)
   2d478:	00bfff84 	movi	r2,-2
   2d47c:	1884703a 	and	r2,r3,r2
   2d480:	1001703a 	wrctl	status,r2
  
  return context;
   2d484:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   2d488:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   2d48c:	00c00044 	movi	r3,1
   2d490:	e0bffa17 	ldw	r2,-24(fp)
   2d494:	1884983a 	sll	r2,r3,r2
   2d498:	1007883a 	mov	r3,r2
   2d49c:	d0a6d517 	ldw	r2,-25772(gp)
   2d4a0:	1884b03a 	or	r2,r3,r2
   2d4a4:	d0a6d515 	stw	r2,-25772(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   2d4a8:	d0a6d517 	ldw	r2,-25772(gp)
   2d4ac:	100170fa 	wrctl	ienable,r2
   2d4b0:	e0bffc17 	ldw	r2,-16(fp)
   2d4b4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2d4b8:	e0bffd17 	ldw	r2,-12(fp)
   2d4bc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   2d4c0:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   2d4c4:	0001883a 	nop
}
   2d4c8:	e037883a 	mov	sp,fp
   2d4cc:	df000017 	ldw	fp,0(sp)
   2d4d0:	dec00104 	addi	sp,sp,4
   2d4d4:	f800283a 	ret

0002d4d8 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   2d4d8:	defff904 	addi	sp,sp,-28
   2d4dc:	df000615 	stw	fp,24(sp)
   2d4e0:	df000604 	addi	fp,sp,24
   2d4e4:	e13ffe15 	stw	r4,-8(fp)
   2d4e8:	e17fff15 	stw	r5,-4(fp)
   2d4ec:	e0bfff17 	ldw	r2,-4(fp)
   2d4f0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2d4f4:	0005303a 	rdctl	r2,status
   2d4f8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2d4fc:	e0fffb17 	ldw	r3,-20(fp)
   2d500:	00bfff84 	movi	r2,-2
   2d504:	1884703a 	and	r2,r3,r2
   2d508:	1001703a 	wrctl	status,r2
  
  return context;
   2d50c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   2d510:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   2d514:	00c00044 	movi	r3,1
   2d518:	e0bffa17 	ldw	r2,-24(fp)
   2d51c:	1884983a 	sll	r2,r3,r2
   2d520:	0084303a 	nor	r2,zero,r2
   2d524:	1007883a 	mov	r3,r2
   2d528:	d0a6d517 	ldw	r2,-25772(gp)
   2d52c:	1884703a 	and	r2,r3,r2
   2d530:	d0a6d515 	stw	r2,-25772(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   2d534:	d0a6d517 	ldw	r2,-25772(gp)
   2d538:	100170fa 	wrctl	ienable,r2
   2d53c:	e0bffc17 	ldw	r2,-16(fp)
   2d540:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2d544:	e0bffd17 	ldw	r2,-12(fp)
   2d548:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   2d54c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   2d550:	0001883a 	nop
}
   2d554:	e037883a 	mov	sp,fp
   2d558:	df000017 	ldw	fp,0(sp)
   2d55c:	dec00104 	addi	sp,sp,4
   2d560:	f800283a 	ret

0002d564 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   2d564:	defffc04 	addi	sp,sp,-16
   2d568:	df000315 	stw	fp,12(sp)
   2d56c:	df000304 	addi	fp,sp,12
   2d570:	e13ffe15 	stw	r4,-8(fp)
   2d574:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   2d578:	000530fa 	rdctl	r2,ienable
   2d57c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   2d580:	00c00044 	movi	r3,1
   2d584:	e0bfff17 	ldw	r2,-4(fp)
   2d588:	1884983a 	sll	r2,r3,r2
   2d58c:	1007883a 	mov	r3,r2
   2d590:	e0bffd17 	ldw	r2,-12(fp)
   2d594:	1884703a 	and	r2,r3,r2
   2d598:	1004c03a 	cmpne	r2,r2,zero
   2d59c:	10803fcc 	andi	r2,r2,255
}
   2d5a0:	e037883a 	mov	sp,fp
   2d5a4:	df000017 	ldw	fp,0(sp)
   2d5a8:	dec00104 	addi	sp,sp,4
   2d5ac:	f800283a 	ret

0002d5b0 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   2d5b0:	defff504 	addi	sp,sp,-44
   2d5b4:	dfc00a15 	stw	ra,40(sp)
   2d5b8:	df000915 	stw	fp,36(sp)
   2d5bc:	df000904 	addi	fp,sp,36
   2d5c0:	e13ffc15 	stw	r4,-16(fp)
   2d5c4:	e17ffd15 	stw	r5,-12(fp)
   2d5c8:	e1bffe15 	stw	r6,-8(fp)
   2d5cc:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   2d5d0:	00bffa84 	movi	r2,-22
   2d5d4:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   2d5d8:	e0bffd17 	ldw	r2,-12(fp)
   2d5dc:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   2d5e0:	e0bff817 	ldw	r2,-32(fp)
   2d5e4:	10800808 	cmpgei	r2,r2,32
   2d5e8:	1000271e 	bne	r2,zero,2d688 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2d5ec:	0005303a 	rdctl	r2,status
   2d5f0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2d5f4:	e0fffb17 	ldw	r3,-20(fp)
   2d5f8:	00bfff84 	movi	r2,-2
   2d5fc:	1884703a 	and	r2,r3,r2
   2d600:	1001703a 	wrctl	status,r2
  
  return context;
   2d604:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   2d608:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   2d60c:	008000f4 	movhi	r2,3
   2d610:	108dff04 	addi	r2,r2,14332
   2d614:	e0fff817 	ldw	r3,-32(fp)
   2d618:	180690fa 	slli	r3,r3,3
   2d61c:	10c5883a 	add	r2,r2,r3
   2d620:	e0fffe17 	ldw	r3,-8(fp)
   2d624:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   2d628:	008000f4 	movhi	r2,3
   2d62c:	108dff04 	addi	r2,r2,14332
   2d630:	e0fff817 	ldw	r3,-32(fp)
   2d634:	180690fa 	slli	r3,r3,3
   2d638:	10c5883a 	add	r2,r2,r3
   2d63c:	10800104 	addi	r2,r2,4
   2d640:	e0ffff17 	ldw	r3,-4(fp)
   2d644:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   2d648:	e0bffe17 	ldw	r2,-8(fp)
   2d64c:	10000526 	beq	r2,zero,2d664 <alt_iic_isr_register+0xb4>
   2d650:	e0bff817 	ldw	r2,-32(fp)
   2d654:	100b883a 	mov	r5,r2
   2d658:	e13ffc17 	ldw	r4,-16(fp)
   2d65c:	002d4500 	call	2d450 <alt_ic_irq_enable>
   2d660:	00000406 	br	2d674 <alt_iic_isr_register+0xc4>
   2d664:	e0bff817 	ldw	r2,-32(fp)
   2d668:	100b883a 	mov	r5,r2
   2d66c:	e13ffc17 	ldw	r4,-16(fp)
   2d670:	002d4d80 	call	2d4d8 <alt_ic_irq_disable>
   2d674:	e0bff715 	stw	r2,-36(fp)
   2d678:	e0bffa17 	ldw	r2,-24(fp)
   2d67c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2d680:	e0bff917 	ldw	r2,-28(fp)
   2d684:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   2d688:	e0bff717 	ldw	r2,-36(fp)
}
   2d68c:	e037883a 	mov	sp,fp
   2d690:	dfc00117 	ldw	ra,4(sp)
   2d694:	df000017 	ldw	fp,0(sp)
   2d698:	dec00204 	addi	sp,sp,8
   2d69c:	f800283a 	ret

0002d6a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2d6a0:	defffe04 	addi	sp,sp,-8
   2d6a4:	dfc00115 	stw	ra,4(sp)
   2d6a8:	df000015 	stw	fp,0(sp)
   2d6ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2d6b0:	d0a00b17 	ldw	r2,-32724(gp)
   2d6b4:	10000326 	beq	r2,zero,2d6c4 <alt_get_errno+0x24>
   2d6b8:	d0a00b17 	ldw	r2,-32724(gp)
   2d6bc:	103ee83a 	callr	r2
   2d6c0:	00000106 	br	2d6c8 <alt_get_errno+0x28>
   2d6c4:	d0a6d404 	addi	r2,gp,-25776
}
   2d6c8:	e037883a 	mov	sp,fp
   2d6cc:	dfc00117 	ldw	ra,4(sp)
   2d6d0:	df000017 	ldw	fp,0(sp)
   2d6d4:	dec00204 	addi	sp,sp,8
   2d6d8:	f800283a 	ret

0002d6dc <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   2d6dc:	deffed04 	addi	sp,sp,-76
   2d6e0:	dfc01215 	stw	ra,72(sp)
   2d6e4:	df001115 	stw	fp,68(sp)
   2d6e8:	df001104 	addi	fp,sp,68
   2d6ec:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2d6f0:	e0bfff17 	ldw	r2,-4(fp)
   2d6f4:	10000616 	blt	r2,zero,2d710 <isatty+0x34>
   2d6f8:	e0bfff17 	ldw	r2,-4(fp)
   2d6fc:	10c00324 	muli	r3,r2,12
   2d700:	008000f4 	movhi	r2,3
   2d704:	1082a104 	addi	r2,r2,2692
   2d708:	1885883a 	add	r2,r3,r2
   2d70c:	00000106 	br	2d714 <isatty+0x38>
   2d710:	0005883a 	mov	r2,zero
   2d714:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   2d718:	e0bfef17 	ldw	r2,-68(fp)
   2d71c:	10000e26 	beq	r2,zero,2d758 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   2d720:	e0bfef17 	ldw	r2,-68(fp)
   2d724:	10800017 	ldw	r2,0(r2)
   2d728:	10800817 	ldw	r2,32(r2)
   2d72c:	1000021e 	bne	r2,zero,2d738 <isatty+0x5c>
    {
      return 1;
   2d730:	00800044 	movi	r2,1
   2d734:	00000d06 	br	2d76c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   2d738:	e0bff004 	addi	r2,fp,-64
   2d73c:	100b883a 	mov	r5,r2
   2d740:	e13fff17 	ldw	r4,-4(fp)
   2d744:	002d3500 	call	2d350 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   2d748:	e0bff117 	ldw	r2,-60(fp)
   2d74c:	10880020 	cmpeqi	r2,r2,8192
   2d750:	10803fcc 	andi	r2,r2,255
   2d754:	00000506 	br	2d76c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2d758:	002d6a00 	call	2d6a0 <alt_get_errno>
   2d75c:	1007883a 	mov	r3,r2
   2d760:	00801444 	movi	r2,81
   2d764:	18800015 	stw	r2,0(r3)
    return 0;
   2d768:	0005883a 	mov	r2,zero
  }
}
   2d76c:	e037883a 	mov	sp,fp
   2d770:	dfc00117 	ldw	ra,4(sp)
   2d774:	df000017 	ldw	fp,0(sp)
   2d778:	dec00204 	addi	sp,sp,8
   2d77c:	f800283a 	ret

0002d780 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   2d780:	defffc04 	addi	sp,sp,-16
   2d784:	df000315 	stw	fp,12(sp)
   2d788:	df000304 	addi	fp,sp,12
   2d78c:	e13ffd15 	stw	r4,-12(fp)
   2d790:	e17ffe15 	stw	r5,-8(fp)
   2d794:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   2d798:	e0fffe17 	ldw	r3,-8(fp)
   2d79c:	e0bffd17 	ldw	r2,-12(fp)
   2d7a0:	18800c26 	beq	r3,r2,2d7d4 <alt_load_section+0x54>
  {
    while( to != end )
   2d7a4:	00000806 	br	2d7c8 <alt_load_section+0x48>
    {
      *to++ = *from++;
   2d7a8:	e0bffe17 	ldw	r2,-8(fp)
   2d7ac:	10c00104 	addi	r3,r2,4
   2d7b0:	e0fffe15 	stw	r3,-8(fp)
   2d7b4:	e0fffd17 	ldw	r3,-12(fp)
   2d7b8:	19000104 	addi	r4,r3,4
   2d7bc:	e13ffd15 	stw	r4,-12(fp)
   2d7c0:	18c00017 	ldw	r3,0(r3)
   2d7c4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   2d7c8:	e0fffe17 	ldw	r3,-8(fp)
   2d7cc:	e0bfff17 	ldw	r2,-4(fp)
   2d7d0:	18bff51e 	bne	r3,r2,2d7a8 <__alt_data_end+0xfffed7a8>
    {
      *to++ = *from++;
    }
  }
}
   2d7d4:	0001883a 	nop
   2d7d8:	e037883a 	mov	sp,fp
   2d7dc:	df000017 	ldw	fp,0(sp)
   2d7e0:	dec00104 	addi	sp,sp,4
   2d7e4:	f800283a 	ret

0002d7e8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   2d7e8:	defffe04 	addi	sp,sp,-8
   2d7ec:	dfc00115 	stw	ra,4(sp)
   2d7f0:	df000015 	stw	fp,0(sp)
   2d7f4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   2d7f8:	018000f4 	movhi	r6,3
   2d7fc:	31872904 	addi	r6,r6,7332
   2d800:	014000f4 	movhi	r5,3
   2d804:	29406e04 	addi	r5,r5,440
   2d808:	010000f4 	movhi	r4,3
   2d80c:	21072904 	addi	r4,r4,7332
   2d810:	002d7800 	call	2d780 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   2d814:	018000b4 	movhi	r6,2
   2d818:	31809104 	addi	r6,r6,580
   2d81c:	014000b4 	movhi	r5,2
   2d820:	29400804 	addi	r5,r5,32
   2d824:	010000b4 	movhi	r4,2
   2d828:	21000804 	addi	r4,r4,32
   2d82c:	002d7800 	call	2d780 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   2d830:	018000f4 	movhi	r6,3
   2d834:	31806e04 	addi	r6,r6,440
   2d838:	014000f4 	movhi	r5,3
   2d83c:	297f2304 	addi	r5,r5,-884
   2d840:	010000f4 	movhi	r4,3
   2d844:	213f2304 	addi	r4,r4,-884
   2d848:	002d7800 	call	2d780 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   2d84c:	002ed7c0 	call	2ed7c <alt_dcache_flush_all>
  alt_icache_flush_all();
   2d850:	002ef3c0 	call	2ef3c <alt_icache_flush_all>
}
   2d854:	0001883a 	nop
   2d858:	e037883a 	mov	sp,fp
   2d85c:	dfc00117 	ldw	ra,4(sp)
   2d860:	df000017 	ldw	fp,0(sp)
   2d864:	dec00204 	addi	sp,sp,8
   2d868:	f800283a 	ret

0002d86c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2d86c:	defffe04 	addi	sp,sp,-8
   2d870:	dfc00115 	stw	ra,4(sp)
   2d874:	df000015 	stw	fp,0(sp)
   2d878:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2d87c:	d0a00b17 	ldw	r2,-32724(gp)
   2d880:	10000326 	beq	r2,zero,2d890 <alt_get_errno+0x24>
   2d884:	d0a00b17 	ldw	r2,-32724(gp)
   2d888:	103ee83a 	callr	r2
   2d88c:	00000106 	br	2d894 <alt_get_errno+0x28>
   2d890:	d0a6d404 	addi	r2,gp,-25776
}
   2d894:	e037883a 	mov	sp,fp
   2d898:	dfc00117 	ldw	ra,4(sp)
   2d89c:	df000017 	ldw	fp,0(sp)
   2d8a0:	dec00204 	addi	sp,sp,8
   2d8a4:	f800283a 	ret

0002d8a8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   2d8a8:	defff904 	addi	sp,sp,-28
   2d8ac:	dfc00615 	stw	ra,24(sp)
   2d8b0:	df000515 	stw	fp,20(sp)
   2d8b4:	df000504 	addi	fp,sp,20
   2d8b8:	e13ffd15 	stw	r4,-12(fp)
   2d8bc:	e17ffe15 	stw	r5,-8(fp)
   2d8c0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   2d8c4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2d8c8:	e0bffd17 	ldw	r2,-12(fp)
   2d8cc:	10000616 	blt	r2,zero,2d8e8 <lseek+0x40>
   2d8d0:	e0bffd17 	ldw	r2,-12(fp)
   2d8d4:	10c00324 	muli	r3,r2,12
   2d8d8:	008000f4 	movhi	r2,3
   2d8dc:	1082a104 	addi	r2,r2,2692
   2d8e0:	1885883a 	add	r2,r3,r2
   2d8e4:	00000106 	br	2d8ec <lseek+0x44>
   2d8e8:	0005883a 	mov	r2,zero
   2d8ec:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   2d8f0:	e0bffc17 	ldw	r2,-16(fp)
   2d8f4:	10001026 	beq	r2,zero,2d938 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   2d8f8:	e0bffc17 	ldw	r2,-16(fp)
   2d8fc:	10800017 	ldw	r2,0(r2)
   2d900:	10800717 	ldw	r2,28(r2)
   2d904:	10000926 	beq	r2,zero,2d92c <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   2d908:	e0bffc17 	ldw	r2,-16(fp)
   2d90c:	10800017 	ldw	r2,0(r2)
   2d910:	10800717 	ldw	r2,28(r2)
   2d914:	e1bfff17 	ldw	r6,-4(fp)
   2d918:	e17ffe17 	ldw	r5,-8(fp)
   2d91c:	e13ffc17 	ldw	r4,-16(fp)
   2d920:	103ee83a 	callr	r2
   2d924:	e0bffb15 	stw	r2,-20(fp)
   2d928:	00000506 	br	2d940 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   2d92c:	00bfde84 	movi	r2,-134
   2d930:	e0bffb15 	stw	r2,-20(fp)
   2d934:	00000206 	br	2d940 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   2d938:	00bfebc4 	movi	r2,-81
   2d93c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   2d940:	e0bffb17 	ldw	r2,-20(fp)
   2d944:	1000070e 	bge	r2,zero,2d964 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   2d948:	002d86c0 	call	2d86c <alt_get_errno>
   2d94c:	1007883a 	mov	r3,r2
   2d950:	e0bffb17 	ldw	r2,-20(fp)
   2d954:	0085c83a 	sub	r2,zero,r2
   2d958:	18800015 	stw	r2,0(r3)
    rc = -1;
   2d95c:	00bfffc4 	movi	r2,-1
   2d960:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   2d964:	e0bffb17 	ldw	r2,-20(fp)
}
   2d968:	e037883a 	mov	sp,fp
   2d96c:	dfc00117 	ldw	ra,4(sp)
   2d970:	df000017 	ldw	fp,0(sp)
   2d974:	dec00204 	addi	sp,sp,8
   2d978:	f800283a 	ret

0002d97c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   2d97c:	defffd04 	addi	sp,sp,-12
   2d980:	dfc00215 	stw	ra,8(sp)
   2d984:	df000115 	stw	fp,4(sp)
   2d988:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   2d98c:	0009883a 	mov	r4,zero
   2d990:	002e05c0 	call	2e05c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   2d994:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   2d998:	002e0940 	call	2e094 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   2d99c:	018000f4 	movhi	r6,3
   2d9a0:	31806404 	addi	r6,r6,400
   2d9a4:	014000f4 	movhi	r5,3
   2d9a8:	29406404 	addi	r5,r5,400
   2d9ac:	010000f4 	movhi	r4,3
   2d9b0:	21006404 	addi	r4,r4,400
   2d9b4:	002f0bc0 	call	2f0bc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   2d9b8:	002ee7c0 	call	2ee7c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   2d9bc:	010000f4 	movhi	r4,3
   2d9c0:	213bb704 	addi	r4,r4,-4388
   2d9c4:	002f7900 	call	2f790 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   2d9c8:	d0a6d617 	ldw	r2,-25768(gp)
   2d9cc:	d0e6d717 	ldw	r3,-25764(gp)
   2d9d0:	d126d817 	ldw	r4,-25760(gp)
   2d9d4:	200d883a 	mov	r6,r4
   2d9d8:	180b883a 	mov	r5,r3
   2d9dc:	1009883a 	mov	r4,r2
   2d9e0:	00209640 	call	20964 <main>
   2d9e4:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   2d9e8:	01000044 	movi	r4,1
   2d9ec:	002d2180 	call	2d218 <close>
  exit (result);
   2d9f0:	e13fff17 	ldw	r4,-4(fp)
   2d9f4:	002f7a40 	call	2f7a4 <exit>

0002d9f8 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   2d9f8:	defffe04 	addi	sp,sp,-8
   2d9fc:	df000115 	stw	fp,4(sp)
   2da00:	df000104 	addi	fp,sp,4
   2da04:	e13fff15 	stw	r4,-4(fp)
}
   2da08:	0001883a 	nop
   2da0c:	e037883a 	mov	sp,fp
   2da10:	df000017 	ldw	fp,0(sp)
   2da14:	dec00104 	addi	sp,sp,4
   2da18:	f800283a 	ret

0002da1c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   2da1c:	defffe04 	addi	sp,sp,-8
   2da20:	df000115 	stw	fp,4(sp)
   2da24:	df000104 	addi	fp,sp,4
   2da28:	e13fff15 	stw	r4,-4(fp)
}
   2da2c:	0001883a 	nop
   2da30:	e037883a 	mov	sp,fp
   2da34:	df000017 	ldw	fp,0(sp)
   2da38:	dec00104 	addi	sp,sp,4
   2da3c:	f800283a 	ret

0002da40 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   2da40:	defff204 	addi	sp,sp,-56
   2da44:	dfc00a15 	stw	ra,40(sp)
   2da48:	df000915 	stw	fp,36(sp)
   2da4c:	df000904 	addi	fp,sp,36
   2da50:	e13fff15 	stw	r4,-4(fp)
   2da54:	e1400215 	stw	r5,8(fp)
   2da58:	e1800315 	stw	r6,12(fp)
   2da5c:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
   2da60:	e0800204 	addi	r2,fp,8
   2da64:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   2da68:	e0bfff17 	ldw	r2,-4(fp)
   2da6c:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
   2da70:	00006f06 	br	2dc30 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   2da74:	e0bff807 	ldb	r2,-32(fp)
   2da78:	10800960 	cmpeqi	r2,r2,37
   2da7c:	1000041e 	bne	r2,zero,2da90 <alt_printf+0x50>
        {
            alt_putchar(c);
   2da80:	e0bff807 	ldb	r2,-32(fp)
   2da84:	1009883a 	mov	r4,r2
   2da88:	002dc6c0 	call	2dc6c <alt_putchar>
   2da8c:	00006806 	br	2dc30 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   2da90:	e0bff717 	ldw	r2,-36(fp)
   2da94:	10c00044 	addi	r3,r2,1
   2da98:	e0fff715 	stw	r3,-36(fp)
   2da9c:	10800003 	ldbu	r2,0(r2)
   2daa0:	e0bff805 	stb	r2,-32(fp)
   2daa4:	e0bff807 	ldb	r2,-32(fp)
   2daa8:	10006926 	beq	r2,zero,2dc50 <alt_printf+0x210>
            {
                if (c == '%')
   2daac:	e0bff807 	ldb	r2,-32(fp)
   2dab0:	10800958 	cmpnei	r2,r2,37
   2dab4:	1000041e 	bne	r2,zero,2dac8 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   2dab8:	e0bff807 	ldb	r2,-32(fp)
   2dabc:	1009883a 	mov	r4,r2
   2dac0:	002dc6c0 	call	2dc6c <alt_putchar>
   2dac4:	00005a06 	br	2dc30 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
   2dac8:	e0bff807 	ldb	r2,-32(fp)
   2dacc:	108018d8 	cmpnei	r2,r2,99
   2dad0:	1000081e 	bne	r2,zero,2daf4 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
   2dad4:	e0bffe17 	ldw	r2,-8(fp)
   2dad8:	10c00104 	addi	r3,r2,4
   2dadc:	e0fffe15 	stw	r3,-8(fp)
   2dae0:	10800017 	ldw	r2,0(r2)
   2dae4:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
   2dae8:	e13ffd17 	ldw	r4,-12(fp)
   2daec:	002dc6c0 	call	2dc6c <alt_putchar>
   2daf0:	00004f06 	br	2dc30 <alt_printf+0x1f0>
                }
                else if (c == 'x')
   2daf4:	e0bff807 	ldb	r2,-32(fp)
   2daf8:	10801e18 	cmpnei	r2,r2,120
   2dafc:	1000341e 	bne	r2,zero,2dbd0 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   2db00:	e0bffe17 	ldw	r2,-8(fp)
   2db04:	10c00104 	addi	r3,r2,4
   2db08:	e0fffe15 	stw	r3,-8(fp)
   2db0c:	10800017 	ldw	r2,0(r2)
   2db10:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   2db14:	e0bffb17 	ldw	r2,-20(fp)
   2db18:	1000031e 	bne	r2,zero,2db28 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
   2db1c:	01000c04 	movi	r4,48
   2db20:	002dc6c0 	call	2dc6c <alt_putchar>
                        continue;
   2db24:	00004206 	br	2dc30 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   2db28:	00800704 	movi	r2,28
   2db2c:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
   2db30:	00000306 	br	2db40 <alt_printf+0x100>
                        digit_shift -= 4;
   2db34:	e0bff917 	ldw	r2,-28(fp)
   2db38:	10bfff04 	addi	r2,r2,-4
   2db3c:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   2db40:	00c003c4 	movi	r3,15
   2db44:	e0bff917 	ldw	r2,-28(fp)
   2db48:	1884983a 	sll	r2,r3,r2
   2db4c:	1007883a 	mov	r3,r2
   2db50:	e0bffb17 	ldw	r2,-20(fp)
   2db54:	1884703a 	and	r2,r3,r2
   2db58:	103ff626 	beq	r2,zero,2db34 <__alt_data_end+0xfffedb34>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   2db5c:	00001906 	br	2dbc4 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   2db60:	00c003c4 	movi	r3,15
   2db64:	e0bff917 	ldw	r2,-28(fp)
   2db68:	1884983a 	sll	r2,r3,r2
   2db6c:	1007883a 	mov	r3,r2
   2db70:	e0bffb17 	ldw	r2,-20(fp)
   2db74:	1886703a 	and	r3,r3,r2
   2db78:	e0bff917 	ldw	r2,-28(fp)
   2db7c:	1884d83a 	srl	r2,r3,r2
   2db80:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
   2db84:	e0bffc17 	ldw	r2,-16(fp)
   2db88:	108002a8 	cmpgeui	r2,r2,10
   2db8c:	1000041e 	bne	r2,zero,2dba0 <alt_printf+0x160>
                            c = '0' + digit;
   2db90:	e0bffc17 	ldw	r2,-16(fp)
   2db94:	10800c04 	addi	r2,r2,48
   2db98:	e0bff805 	stb	r2,-32(fp)
   2db9c:	00000306 	br	2dbac <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
   2dba0:	e0bffc17 	ldw	r2,-16(fp)
   2dba4:	108015c4 	addi	r2,r2,87
   2dba8:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
   2dbac:	e0bff807 	ldb	r2,-32(fp)
   2dbb0:	1009883a 	mov	r4,r2
   2dbb4:	002dc6c0 	call	2dc6c <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   2dbb8:	e0bff917 	ldw	r2,-28(fp)
   2dbbc:	10bfff04 	addi	r2,r2,-4
   2dbc0:	e0bff915 	stw	r2,-28(fp)
   2dbc4:	e0bff917 	ldw	r2,-28(fp)
   2dbc8:	103fe50e 	bge	r2,zero,2db60 <__alt_data_end+0xfffedb60>
   2dbcc:	00001806 	br	2dc30 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   2dbd0:	e0bff807 	ldb	r2,-32(fp)
   2dbd4:	10801cd8 	cmpnei	r2,r2,115
   2dbd8:	1000151e 	bne	r2,zero,2dc30 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   2dbdc:	e0bffe17 	ldw	r2,-8(fp)
   2dbe0:	10c00104 	addi	r3,r2,4
   2dbe4:	e0fffe15 	stw	r3,-8(fp)
   2dbe8:	10800017 	ldw	r2,0(r2)
   2dbec:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
   2dbf0:	00000906 	br	2dc18 <alt_printf+0x1d8>
                      alt_putchar(*s++);
   2dbf4:	e0bffa17 	ldw	r2,-24(fp)
   2dbf8:	10c00044 	addi	r3,r2,1
   2dbfc:	e0fffa15 	stw	r3,-24(fp)
   2dc00:	10800003 	ldbu	r2,0(r2)
   2dc04:	10803fcc 	andi	r2,r2,255
   2dc08:	1080201c 	xori	r2,r2,128
   2dc0c:	10bfe004 	addi	r2,r2,-128
   2dc10:	1009883a 	mov	r4,r2
   2dc14:	002dc6c0 	call	2dc6c <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   2dc18:	e0bffa17 	ldw	r2,-24(fp)
   2dc1c:	10800003 	ldbu	r2,0(r2)
   2dc20:	10803fcc 	andi	r2,r2,255
   2dc24:	1080201c 	xori	r2,r2,128
   2dc28:	10bfe004 	addi	r2,r2,-128
   2dc2c:	103ff11e 	bne	r2,zero,2dbf4 <__alt_data_end+0xfffedbf4>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   2dc30:	e0bff717 	ldw	r2,-36(fp)
   2dc34:	10c00044 	addi	r3,r2,1
   2dc38:	e0fff715 	stw	r3,-36(fp)
   2dc3c:	10800003 	ldbu	r2,0(r2)
   2dc40:	e0bff805 	stb	r2,-32(fp)
   2dc44:	e0bff807 	ldb	r2,-32(fp)
   2dc48:	103f8a1e 	bne	r2,zero,2da74 <__alt_data_end+0xfffeda74>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   2dc4c:	00000106 	br	2dc54 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
   2dc50:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   2dc54:	0001883a 	nop
   2dc58:	e037883a 	mov	sp,fp
   2dc5c:	dfc00117 	ldw	ra,4(sp)
   2dc60:	df000017 	ldw	fp,0(sp)
   2dc64:	dec00504 	addi	sp,sp,20
   2dc68:	f800283a 	ret

0002dc6c <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   2dc6c:	defffd04 	addi	sp,sp,-12
   2dc70:	dfc00215 	stw	ra,8(sp)
   2dc74:	df000115 	stw	fp,4(sp)
   2dc78:	df000104 	addi	fp,sp,4
   2dc7c:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   2dc80:	d0a00117 	ldw	r2,-32764(gp)
   2dc84:	10800217 	ldw	r2,8(r2)
   2dc88:	100b883a 	mov	r5,r2
   2dc8c:	e13fff17 	ldw	r4,-4(fp)
   2dc90:	002f8f80 	call	2f8f8 <putc>
#endif
#endif
}
   2dc94:	e037883a 	mov	sp,fp
   2dc98:	dfc00117 	ldw	ra,4(sp)
   2dc9c:	df000017 	ldw	fp,0(sp)
   2dca0:	dec00204 	addi	sp,sp,8
   2dca4:	f800283a 	ret

0002dca8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2dca8:	defffe04 	addi	sp,sp,-8
   2dcac:	dfc00115 	stw	ra,4(sp)
   2dcb0:	df000015 	stw	fp,0(sp)
   2dcb4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2dcb8:	d0a00b17 	ldw	r2,-32724(gp)
   2dcbc:	10000326 	beq	r2,zero,2dccc <alt_get_errno+0x24>
   2dcc0:	d0a00b17 	ldw	r2,-32724(gp)
   2dcc4:	103ee83a 	callr	r2
   2dcc8:	00000106 	br	2dcd0 <alt_get_errno+0x28>
   2dccc:	d0a6d404 	addi	r2,gp,-25776
}
   2dcd0:	e037883a 	mov	sp,fp
   2dcd4:	dfc00117 	ldw	ra,4(sp)
   2dcd8:	df000017 	ldw	fp,0(sp)
   2dcdc:	dec00204 	addi	sp,sp,8
   2dce0:	f800283a 	ret

0002dce4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   2dce4:	defff904 	addi	sp,sp,-28
   2dce8:	dfc00615 	stw	ra,24(sp)
   2dcec:	df000515 	stw	fp,20(sp)
   2dcf0:	df000504 	addi	fp,sp,20
   2dcf4:	e13ffd15 	stw	r4,-12(fp)
   2dcf8:	e17ffe15 	stw	r5,-8(fp)
   2dcfc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2dd00:	e0bffd17 	ldw	r2,-12(fp)
   2dd04:	10000616 	blt	r2,zero,2dd20 <read+0x3c>
   2dd08:	e0bffd17 	ldw	r2,-12(fp)
   2dd0c:	10c00324 	muli	r3,r2,12
   2dd10:	008000f4 	movhi	r2,3
   2dd14:	1082a104 	addi	r2,r2,2692
   2dd18:	1885883a 	add	r2,r3,r2
   2dd1c:	00000106 	br	2dd24 <read+0x40>
   2dd20:	0005883a 	mov	r2,zero
   2dd24:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   2dd28:	e0bffb17 	ldw	r2,-20(fp)
   2dd2c:	10002226 	beq	r2,zero,2ddb8 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   2dd30:	e0bffb17 	ldw	r2,-20(fp)
   2dd34:	10800217 	ldw	r2,8(r2)
   2dd38:	108000cc 	andi	r2,r2,3
   2dd3c:	10800060 	cmpeqi	r2,r2,1
   2dd40:	1000181e 	bne	r2,zero,2dda4 <read+0xc0>
        (fd->dev->read))
   2dd44:	e0bffb17 	ldw	r2,-20(fp)
   2dd48:	10800017 	ldw	r2,0(r2)
   2dd4c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   2dd50:	10001426 	beq	r2,zero,2dda4 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   2dd54:	e0bffb17 	ldw	r2,-20(fp)
   2dd58:	10800017 	ldw	r2,0(r2)
   2dd5c:	10800517 	ldw	r2,20(r2)
   2dd60:	e0ffff17 	ldw	r3,-4(fp)
   2dd64:	180d883a 	mov	r6,r3
   2dd68:	e17ffe17 	ldw	r5,-8(fp)
   2dd6c:	e13ffb17 	ldw	r4,-20(fp)
   2dd70:	103ee83a 	callr	r2
   2dd74:	e0bffc15 	stw	r2,-16(fp)
   2dd78:	e0bffc17 	ldw	r2,-16(fp)
   2dd7c:	1000070e 	bge	r2,zero,2dd9c <read+0xb8>
        {
          ALT_ERRNO = -rval;
   2dd80:	002dca80 	call	2dca8 <alt_get_errno>
   2dd84:	1007883a 	mov	r3,r2
   2dd88:	e0bffc17 	ldw	r2,-16(fp)
   2dd8c:	0085c83a 	sub	r2,zero,r2
   2dd90:	18800015 	stw	r2,0(r3)
          return -1;
   2dd94:	00bfffc4 	movi	r2,-1
   2dd98:	00000c06 	br	2ddcc <read+0xe8>
        }
        return rval;
   2dd9c:	e0bffc17 	ldw	r2,-16(fp)
   2dda0:	00000a06 	br	2ddcc <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   2dda4:	002dca80 	call	2dca8 <alt_get_errno>
   2dda8:	1007883a 	mov	r3,r2
   2ddac:	00800344 	movi	r2,13
   2ddb0:	18800015 	stw	r2,0(r3)
   2ddb4:	00000406 	br	2ddc8 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   2ddb8:	002dca80 	call	2dca8 <alt_get_errno>
   2ddbc:	1007883a 	mov	r3,r2
   2ddc0:	00801444 	movi	r2,81
   2ddc4:	18800015 	stw	r2,0(r3)
  }
  return -1;
   2ddc8:	00bfffc4 	movi	r2,-1
}
   2ddcc:	e037883a 	mov	sp,fp
   2ddd0:	dfc00117 	ldw	ra,4(sp)
   2ddd4:	df000017 	ldw	fp,0(sp)
   2ddd8:	dec00204 	addi	sp,sp,8
   2dddc:	f800283a 	ret

0002dde0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   2dde0:	defffe04 	addi	sp,sp,-8
   2dde4:	df000115 	stw	fp,4(sp)
   2dde8:	df000104 	addi	fp,sp,4
   2ddec:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   2ddf0:	e0bfff17 	ldw	r2,-4(fp)
   2ddf4:	108000d0 	cmplti	r2,r2,3
   2ddf8:	10000d1e 	bne	r2,zero,2de30 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   2ddfc:	008000f4 	movhi	r2,3
   2de00:	1082a104 	addi	r2,r2,2692
   2de04:	e0ffff17 	ldw	r3,-4(fp)
   2de08:	18c00324 	muli	r3,r3,12
   2de0c:	10c5883a 	add	r2,r2,r3
   2de10:	10800204 	addi	r2,r2,8
   2de14:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   2de18:	008000f4 	movhi	r2,3
   2de1c:	1082a104 	addi	r2,r2,2692
   2de20:	e0ffff17 	ldw	r3,-4(fp)
   2de24:	18c00324 	muli	r3,r3,12
   2de28:	10c5883a 	add	r2,r2,r3
   2de2c:	10000015 	stw	zero,0(r2)
  }
}
   2de30:	0001883a 	nop
   2de34:	e037883a 	mov	sp,fp
   2de38:	df000017 	ldw	fp,0(sp)
   2de3c:	dec00104 	addi	sp,sp,4
   2de40:	f800283a 	ret

0002de44 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   2de44:	defff904 	addi	sp,sp,-28
   2de48:	df000615 	stw	fp,24(sp)
   2de4c:	df000604 	addi	fp,sp,24
   2de50:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2de54:	0005303a 	rdctl	r2,status
   2de58:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2de5c:	e0fffe17 	ldw	r3,-8(fp)
   2de60:	00bfff84 	movi	r2,-2
   2de64:	1884703a 	and	r2,r3,r2
   2de68:	1001703a 	wrctl	status,r2
  
  return context;
   2de6c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   2de70:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   2de74:	d0a00d17 	ldw	r2,-32716(gp)
   2de78:	10c000c4 	addi	r3,r2,3
   2de7c:	00bfff04 	movi	r2,-4
   2de80:	1884703a 	and	r2,r3,r2
   2de84:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   2de88:	d0e00d17 	ldw	r3,-32716(gp)
   2de8c:	e0bfff17 	ldw	r2,-4(fp)
   2de90:	1887883a 	add	r3,r3,r2
   2de94:	00800134 	movhi	r2,4
   2de98:	10800004 	addi	r2,r2,0
   2de9c:	10c0062e 	bgeu	r2,r3,2deb8 <sbrk+0x74>
   2dea0:	e0bffb17 	ldw	r2,-20(fp)
   2dea4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2dea8:	e0bffa17 	ldw	r2,-24(fp)
   2deac:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   2deb0:	00bfffc4 	movi	r2,-1
   2deb4:	00000b06 	br	2dee4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   2deb8:	d0a00d17 	ldw	r2,-32716(gp)
   2debc:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   2dec0:	d0e00d17 	ldw	r3,-32716(gp)
   2dec4:	e0bfff17 	ldw	r2,-4(fp)
   2dec8:	1885883a 	add	r2,r3,r2
   2decc:	d0a00d15 	stw	r2,-32716(gp)
   2ded0:	e0bffb17 	ldw	r2,-20(fp)
   2ded4:	e0bffc15 	stw	r2,-16(fp)
   2ded8:	e0bffc17 	ldw	r2,-16(fp)
   2dedc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   2dee0:	e0bffd17 	ldw	r2,-12(fp)
} 
   2dee4:	e037883a 	mov	sp,fp
   2dee8:	df000017 	ldw	fp,0(sp)
   2deec:	dec00104 	addi	sp,sp,4
   2def0:	f800283a 	ret

0002def4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2def4:	defffe04 	addi	sp,sp,-8
   2def8:	dfc00115 	stw	ra,4(sp)
   2defc:	df000015 	stw	fp,0(sp)
   2df00:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2df04:	d0a00b17 	ldw	r2,-32724(gp)
   2df08:	10000326 	beq	r2,zero,2df18 <alt_get_errno+0x24>
   2df0c:	d0a00b17 	ldw	r2,-32724(gp)
   2df10:	103ee83a 	callr	r2
   2df14:	00000106 	br	2df1c <alt_get_errno+0x28>
   2df18:	d0a6d404 	addi	r2,gp,-25776
}
   2df1c:	e037883a 	mov	sp,fp
   2df20:	dfc00117 	ldw	ra,4(sp)
   2df24:	df000017 	ldw	fp,0(sp)
   2df28:	dec00204 	addi	sp,sp,8
   2df2c:	f800283a 	ret

0002df30 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   2df30:	defff904 	addi	sp,sp,-28
   2df34:	dfc00615 	stw	ra,24(sp)
   2df38:	df000515 	stw	fp,20(sp)
   2df3c:	df000504 	addi	fp,sp,20
   2df40:	e13ffd15 	stw	r4,-12(fp)
   2df44:	e17ffe15 	stw	r5,-8(fp)
   2df48:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2df4c:	e0bffd17 	ldw	r2,-12(fp)
   2df50:	10000616 	blt	r2,zero,2df6c <write+0x3c>
   2df54:	e0bffd17 	ldw	r2,-12(fp)
   2df58:	10c00324 	muli	r3,r2,12
   2df5c:	008000f4 	movhi	r2,3
   2df60:	1082a104 	addi	r2,r2,2692
   2df64:	1885883a 	add	r2,r3,r2
   2df68:	00000106 	br	2df70 <write+0x40>
   2df6c:	0005883a 	mov	r2,zero
   2df70:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   2df74:	e0bffb17 	ldw	r2,-20(fp)
   2df78:	10002126 	beq	r2,zero,2e000 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   2df7c:	e0bffb17 	ldw	r2,-20(fp)
   2df80:	10800217 	ldw	r2,8(r2)
   2df84:	108000cc 	andi	r2,r2,3
   2df88:	10001826 	beq	r2,zero,2dfec <write+0xbc>
   2df8c:	e0bffb17 	ldw	r2,-20(fp)
   2df90:	10800017 	ldw	r2,0(r2)
   2df94:	10800617 	ldw	r2,24(r2)
   2df98:	10001426 	beq	r2,zero,2dfec <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   2df9c:	e0bffb17 	ldw	r2,-20(fp)
   2dfa0:	10800017 	ldw	r2,0(r2)
   2dfa4:	10800617 	ldw	r2,24(r2)
   2dfa8:	e0ffff17 	ldw	r3,-4(fp)
   2dfac:	180d883a 	mov	r6,r3
   2dfb0:	e17ffe17 	ldw	r5,-8(fp)
   2dfb4:	e13ffb17 	ldw	r4,-20(fp)
   2dfb8:	103ee83a 	callr	r2
   2dfbc:	e0bffc15 	stw	r2,-16(fp)
   2dfc0:	e0bffc17 	ldw	r2,-16(fp)
   2dfc4:	1000070e 	bge	r2,zero,2dfe4 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   2dfc8:	002def40 	call	2def4 <alt_get_errno>
   2dfcc:	1007883a 	mov	r3,r2
   2dfd0:	e0bffc17 	ldw	r2,-16(fp)
   2dfd4:	0085c83a 	sub	r2,zero,r2
   2dfd8:	18800015 	stw	r2,0(r3)
        return -1;
   2dfdc:	00bfffc4 	movi	r2,-1
   2dfe0:	00000c06 	br	2e014 <write+0xe4>
      }
      return rval;
   2dfe4:	e0bffc17 	ldw	r2,-16(fp)
   2dfe8:	00000a06 	br	2e014 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   2dfec:	002def40 	call	2def4 <alt_get_errno>
   2dff0:	1007883a 	mov	r3,r2
   2dff4:	00800344 	movi	r2,13
   2dff8:	18800015 	stw	r2,0(r3)
   2dffc:	00000406 	br	2e010 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   2e000:	002def40 	call	2def4 <alt_get_errno>
   2e004:	1007883a 	mov	r3,r2
   2e008:	00801444 	movi	r2,81
   2e00c:	18800015 	stw	r2,0(r3)
  }
  return -1;
   2e010:	00bfffc4 	movi	r2,-1
}
   2e014:	e037883a 	mov	sp,fp
   2e018:	dfc00117 	ldw	ra,4(sp)
   2e01c:	df000017 	ldw	fp,0(sp)
   2e020:	dec00204 	addi	sp,sp,8
   2e024:	f800283a 	ret

0002e028 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   2e028:	defffd04 	addi	sp,sp,-12
   2e02c:	dfc00215 	stw	ra,8(sp)
   2e030:	df000115 	stw	fp,4(sp)
   2e034:	df000104 	addi	fp,sp,4
   2e038:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   2e03c:	d1600804 	addi	r5,gp,-32736
   2e040:	e13fff17 	ldw	r4,-4(fp)
   2e044:	002edd80 	call	2edd8 <alt_dev_llist_insert>
}
   2e048:	e037883a 	mov	sp,fp
   2e04c:	dfc00117 	ldw	ra,4(sp)
   2e050:	df000017 	ldw	fp,0(sp)
   2e054:	dec00204 	addi	sp,sp,8
   2e058:	f800283a 	ret

0002e05c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   2e05c:	defffd04 	addi	sp,sp,-12
   2e060:	dfc00215 	stw	ra,8(sp)
   2e064:	df000115 	stw	fp,4(sp)
   2e068:	df000104 	addi	fp,sp,4
   2e06c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   2e070:	002f5300 	call	2f530 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   2e074:	00800044 	movi	r2,1
   2e078:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   2e07c:	0001883a 	nop
   2e080:	e037883a 	mov	sp,fp
   2e084:	dfc00117 	ldw	ra,4(sp)
   2e088:	df000017 	ldw	fp,0(sp)
   2e08c:	dec00204 	addi	sp,sp,8
   2e090:	f800283a 	ret

0002e094 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   2e094:	defffe04 	addi	sp,sp,-8
   2e098:	dfc00115 	stw	ra,4(sp)
   2e09c:	df000015 	stw	fp,0(sp)
   2e0a0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   2e0a4:	01c0fa04 	movi	r7,1000
   2e0a8:	018000c4 	movi	r6,3
   2e0ac:	000b883a 	mov	r5,zero
   2e0b0:	01000134 	movhi	r4,4
   2e0b4:	21040004 	addi	r4,r4,4096
   2e0b8:	002ebd40 	call	2ebd4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   2e0bc:	01800084 	movi	r6,2
   2e0c0:	000b883a 	mov	r5,zero
   2e0c4:	010000f4 	movhi	r4,3
   2e0c8:	21030b04 	addi	r4,r4,3116
   2e0cc:	002e2580 	call	2e258 <altera_avalon_jtag_uart_init>
   2e0d0:	010000f4 	movhi	r4,3
   2e0d4:	21030104 	addi	r4,r4,3076
   2e0d8:	002e0280 	call	2e028 <alt_dev_reg>
}
   2e0dc:	0001883a 	nop
   2e0e0:	e037883a 	mov	sp,fp
   2e0e4:	dfc00117 	ldw	ra,4(sp)
   2e0e8:	df000017 	ldw	fp,0(sp)
   2e0ec:	dec00204 	addi	sp,sp,8
   2e0f0:	f800283a 	ret

0002e0f4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   2e0f4:	defffa04 	addi	sp,sp,-24
   2e0f8:	dfc00515 	stw	ra,20(sp)
   2e0fc:	df000415 	stw	fp,16(sp)
   2e100:	df000404 	addi	fp,sp,16
   2e104:	e13ffd15 	stw	r4,-12(fp)
   2e108:	e17ffe15 	stw	r5,-8(fp)
   2e10c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2e110:	e0bffd17 	ldw	r2,-12(fp)
   2e114:	10800017 	ldw	r2,0(r2)
   2e118:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   2e11c:	e0bffc17 	ldw	r2,-16(fp)
   2e120:	10c00a04 	addi	r3,r2,40
   2e124:	e0bffd17 	ldw	r2,-12(fp)
   2e128:	10800217 	ldw	r2,8(r2)
   2e12c:	100f883a 	mov	r7,r2
   2e130:	e1bfff17 	ldw	r6,-4(fp)
   2e134:	e17ffe17 	ldw	r5,-8(fp)
   2e138:	1809883a 	mov	r4,r3
   2e13c:	002e71c0 	call	2e71c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   2e140:	e037883a 	mov	sp,fp
   2e144:	dfc00117 	ldw	ra,4(sp)
   2e148:	df000017 	ldw	fp,0(sp)
   2e14c:	dec00204 	addi	sp,sp,8
   2e150:	f800283a 	ret

0002e154 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   2e154:	defffa04 	addi	sp,sp,-24
   2e158:	dfc00515 	stw	ra,20(sp)
   2e15c:	df000415 	stw	fp,16(sp)
   2e160:	df000404 	addi	fp,sp,16
   2e164:	e13ffd15 	stw	r4,-12(fp)
   2e168:	e17ffe15 	stw	r5,-8(fp)
   2e16c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2e170:	e0bffd17 	ldw	r2,-12(fp)
   2e174:	10800017 	ldw	r2,0(r2)
   2e178:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   2e17c:	e0bffc17 	ldw	r2,-16(fp)
   2e180:	10c00a04 	addi	r3,r2,40
   2e184:	e0bffd17 	ldw	r2,-12(fp)
   2e188:	10800217 	ldw	r2,8(r2)
   2e18c:	100f883a 	mov	r7,r2
   2e190:	e1bfff17 	ldw	r6,-4(fp)
   2e194:	e17ffe17 	ldw	r5,-8(fp)
   2e198:	1809883a 	mov	r4,r3
   2e19c:	002e9380 	call	2e938 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   2e1a0:	e037883a 	mov	sp,fp
   2e1a4:	dfc00117 	ldw	ra,4(sp)
   2e1a8:	df000017 	ldw	fp,0(sp)
   2e1ac:	dec00204 	addi	sp,sp,8
   2e1b0:	f800283a 	ret

0002e1b4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   2e1b4:	defffc04 	addi	sp,sp,-16
   2e1b8:	dfc00315 	stw	ra,12(sp)
   2e1bc:	df000215 	stw	fp,8(sp)
   2e1c0:	df000204 	addi	fp,sp,8
   2e1c4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2e1c8:	e0bfff17 	ldw	r2,-4(fp)
   2e1cc:	10800017 	ldw	r2,0(r2)
   2e1d0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   2e1d4:	e0bffe17 	ldw	r2,-8(fp)
   2e1d8:	10c00a04 	addi	r3,r2,40
   2e1dc:	e0bfff17 	ldw	r2,-4(fp)
   2e1e0:	10800217 	ldw	r2,8(r2)
   2e1e4:	100b883a 	mov	r5,r2
   2e1e8:	1809883a 	mov	r4,r3
   2e1ec:	002e5c40 	call	2e5c4 <altera_avalon_jtag_uart_close>
}
   2e1f0:	e037883a 	mov	sp,fp
   2e1f4:	dfc00117 	ldw	ra,4(sp)
   2e1f8:	df000017 	ldw	fp,0(sp)
   2e1fc:	dec00204 	addi	sp,sp,8
   2e200:	f800283a 	ret

0002e204 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   2e204:	defffa04 	addi	sp,sp,-24
   2e208:	dfc00515 	stw	ra,20(sp)
   2e20c:	df000415 	stw	fp,16(sp)
   2e210:	df000404 	addi	fp,sp,16
   2e214:	e13ffd15 	stw	r4,-12(fp)
   2e218:	e17ffe15 	stw	r5,-8(fp)
   2e21c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   2e220:	e0bffd17 	ldw	r2,-12(fp)
   2e224:	10800017 	ldw	r2,0(r2)
   2e228:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   2e22c:	e0bffc17 	ldw	r2,-16(fp)
   2e230:	10800a04 	addi	r2,r2,40
   2e234:	e1bfff17 	ldw	r6,-4(fp)
   2e238:	e17ffe17 	ldw	r5,-8(fp)
   2e23c:	1009883a 	mov	r4,r2
   2e240:	002e62c0 	call	2e62c <altera_avalon_jtag_uart_ioctl>
}
   2e244:	e037883a 	mov	sp,fp
   2e248:	dfc00117 	ldw	ra,4(sp)
   2e24c:	df000017 	ldw	fp,0(sp)
   2e250:	dec00204 	addi	sp,sp,8
   2e254:	f800283a 	ret

0002e258 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   2e258:	defffa04 	addi	sp,sp,-24
   2e25c:	dfc00515 	stw	ra,20(sp)
   2e260:	df000415 	stw	fp,16(sp)
   2e264:	df000404 	addi	fp,sp,16
   2e268:	e13ffd15 	stw	r4,-12(fp)
   2e26c:	e17ffe15 	stw	r5,-8(fp)
   2e270:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2e274:	e0bffd17 	ldw	r2,-12(fp)
   2e278:	00c00044 	movi	r3,1
   2e27c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   2e280:	e0bffd17 	ldw	r2,-12(fp)
   2e284:	10800017 	ldw	r2,0(r2)
   2e288:	10800104 	addi	r2,r2,4
   2e28c:	1007883a 	mov	r3,r2
   2e290:	e0bffd17 	ldw	r2,-12(fp)
   2e294:	10800817 	ldw	r2,32(r2)
   2e298:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   2e29c:	e0bffe17 	ldw	r2,-8(fp)
   2e2a0:	e0ffff17 	ldw	r3,-4(fp)
   2e2a4:	d8000015 	stw	zero,0(sp)
   2e2a8:	e1fffd17 	ldw	r7,-12(fp)
   2e2ac:	018000f4 	movhi	r6,3
   2e2b0:	31b8c604 	addi	r6,r6,-7400
   2e2b4:	180b883a 	mov	r5,r3
   2e2b8:	1009883a 	mov	r4,r2
   2e2bc:	002d4000 	call	2d400 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   2e2c0:	e0bffd17 	ldw	r2,-12(fp)
   2e2c4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   2e2c8:	e0bffd17 	ldw	r2,-12(fp)
   2e2cc:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   2e2d0:	d0e6da17 	ldw	r3,-25752(gp)
   2e2d4:	e1fffd17 	ldw	r7,-12(fp)
   2e2d8:	018000f4 	movhi	r6,3
   2e2dc:	31b94904 	addi	r6,r6,-6876
   2e2e0:	180b883a 	mov	r5,r3
   2e2e4:	1009883a 	mov	r4,r2
   2e2e8:	002ec500 	call	2ec50 <alt_alarm_start>
   2e2ec:	1000040e 	bge	r2,zero,2e300 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   2e2f0:	e0fffd17 	ldw	r3,-12(fp)
   2e2f4:	00a00034 	movhi	r2,32768
   2e2f8:	10bfffc4 	addi	r2,r2,-1
   2e2fc:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   2e300:	0001883a 	nop
   2e304:	e037883a 	mov	sp,fp
   2e308:	dfc00117 	ldw	ra,4(sp)
   2e30c:	df000017 	ldw	fp,0(sp)
   2e310:	dec00204 	addi	sp,sp,8
   2e314:	f800283a 	ret

0002e318 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   2e318:	defff804 	addi	sp,sp,-32
   2e31c:	df000715 	stw	fp,28(sp)
   2e320:	df000704 	addi	fp,sp,28
   2e324:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   2e328:	e0bfff17 	ldw	r2,-4(fp)
   2e32c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   2e330:	e0bffb17 	ldw	r2,-20(fp)
   2e334:	10800017 	ldw	r2,0(r2)
   2e338:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2e33c:	e0bffc17 	ldw	r2,-16(fp)
   2e340:	10800104 	addi	r2,r2,4
   2e344:	10800037 	ldwio	r2,0(r2)
   2e348:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   2e34c:	e0bffd17 	ldw	r2,-12(fp)
   2e350:	1080c00c 	andi	r2,r2,768
   2e354:	10006d26 	beq	r2,zero,2e50c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   2e358:	e0bffd17 	ldw	r2,-12(fp)
   2e35c:	1080400c 	andi	r2,r2,256
   2e360:	10003526 	beq	r2,zero,2e438 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   2e364:	00800074 	movhi	r2,1
   2e368:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2e36c:	e0bffb17 	ldw	r2,-20(fp)
   2e370:	10800a17 	ldw	r2,40(r2)
   2e374:	10800044 	addi	r2,r2,1
   2e378:	1081ffcc 	andi	r2,r2,2047
   2e37c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   2e380:	e0bffb17 	ldw	r2,-20(fp)
   2e384:	10c00b17 	ldw	r3,44(r2)
   2e388:	e0bffe17 	ldw	r2,-8(fp)
   2e38c:	18801526 	beq	r3,r2,2e3e4 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   2e390:	e0bffc17 	ldw	r2,-16(fp)
   2e394:	10800037 	ldwio	r2,0(r2)
   2e398:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   2e39c:	e0bff917 	ldw	r2,-28(fp)
   2e3a0:	10a0000c 	andi	r2,r2,32768
   2e3a4:	10001126 	beq	r2,zero,2e3ec <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   2e3a8:	e0bffb17 	ldw	r2,-20(fp)
   2e3ac:	10800a17 	ldw	r2,40(r2)
   2e3b0:	e0fff917 	ldw	r3,-28(fp)
   2e3b4:	1809883a 	mov	r4,r3
   2e3b8:	e0fffb17 	ldw	r3,-20(fp)
   2e3bc:	1885883a 	add	r2,r3,r2
   2e3c0:	10800e04 	addi	r2,r2,56
   2e3c4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2e3c8:	e0bffb17 	ldw	r2,-20(fp)
   2e3cc:	10800a17 	ldw	r2,40(r2)
   2e3d0:	10800044 	addi	r2,r2,1
   2e3d4:	10c1ffcc 	andi	r3,r2,2047
   2e3d8:	e0bffb17 	ldw	r2,-20(fp)
   2e3dc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   2e3e0:	003fe206 	br	2e36c <__alt_data_end+0xfffee36c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   2e3e4:	0001883a 	nop
   2e3e8:	00000106 	br	2e3f0 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   2e3ec:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   2e3f0:	e0bff917 	ldw	r2,-28(fp)
   2e3f4:	10bfffec 	andhi	r2,r2,65535
   2e3f8:	10000f26 	beq	r2,zero,2e438 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2e3fc:	e0bffb17 	ldw	r2,-20(fp)
   2e400:	10c00817 	ldw	r3,32(r2)
   2e404:	00bfff84 	movi	r2,-2
   2e408:	1886703a 	and	r3,r3,r2
   2e40c:	e0bffb17 	ldw	r2,-20(fp)
   2e410:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   2e414:	e0bffc17 	ldw	r2,-16(fp)
   2e418:	10800104 	addi	r2,r2,4
   2e41c:	1007883a 	mov	r3,r2
   2e420:	e0bffb17 	ldw	r2,-20(fp)
   2e424:	10800817 	ldw	r2,32(r2)
   2e428:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2e42c:	e0bffc17 	ldw	r2,-16(fp)
   2e430:	10800104 	addi	r2,r2,4
   2e434:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   2e438:	e0bffd17 	ldw	r2,-12(fp)
   2e43c:	1080800c 	andi	r2,r2,512
   2e440:	103fbe26 	beq	r2,zero,2e33c <__alt_data_end+0xfffee33c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   2e444:	e0bffd17 	ldw	r2,-12(fp)
   2e448:	1004d43a 	srli	r2,r2,16
   2e44c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   2e450:	00001406 	br	2e4a4 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   2e454:	e0bffc17 	ldw	r2,-16(fp)
   2e458:	e0fffb17 	ldw	r3,-20(fp)
   2e45c:	18c00d17 	ldw	r3,52(r3)
   2e460:	e13ffb17 	ldw	r4,-20(fp)
   2e464:	20c7883a 	add	r3,r4,r3
   2e468:	18c20e04 	addi	r3,r3,2104
   2e46c:	18c00003 	ldbu	r3,0(r3)
   2e470:	18c03fcc 	andi	r3,r3,255
   2e474:	18c0201c 	xori	r3,r3,128
   2e478:	18ffe004 	addi	r3,r3,-128
   2e47c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2e480:	e0bffb17 	ldw	r2,-20(fp)
   2e484:	10800d17 	ldw	r2,52(r2)
   2e488:	10800044 	addi	r2,r2,1
   2e48c:	10c1ffcc 	andi	r3,r2,2047
   2e490:	e0bffb17 	ldw	r2,-20(fp)
   2e494:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   2e498:	e0bffa17 	ldw	r2,-24(fp)
   2e49c:	10bfffc4 	addi	r2,r2,-1
   2e4a0:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   2e4a4:	e0bffa17 	ldw	r2,-24(fp)
   2e4a8:	10000526 	beq	r2,zero,2e4c0 <altera_avalon_jtag_uart_irq+0x1a8>
   2e4ac:	e0bffb17 	ldw	r2,-20(fp)
   2e4b0:	10c00d17 	ldw	r3,52(r2)
   2e4b4:	e0bffb17 	ldw	r2,-20(fp)
   2e4b8:	10800c17 	ldw	r2,48(r2)
   2e4bc:	18bfe51e 	bne	r3,r2,2e454 <__alt_data_end+0xfffee454>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   2e4c0:	e0bffa17 	ldw	r2,-24(fp)
   2e4c4:	103f9d26 	beq	r2,zero,2e33c <__alt_data_end+0xfffee33c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   2e4c8:	e0bffb17 	ldw	r2,-20(fp)
   2e4cc:	10c00817 	ldw	r3,32(r2)
   2e4d0:	00bfff44 	movi	r2,-3
   2e4d4:	1886703a 	and	r3,r3,r2
   2e4d8:	e0bffb17 	ldw	r2,-20(fp)
   2e4dc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2e4e0:	e0bffb17 	ldw	r2,-20(fp)
   2e4e4:	10800017 	ldw	r2,0(r2)
   2e4e8:	10800104 	addi	r2,r2,4
   2e4ec:	1007883a 	mov	r3,r2
   2e4f0:	e0bffb17 	ldw	r2,-20(fp)
   2e4f4:	10800817 	ldw	r2,32(r2)
   2e4f8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2e4fc:	e0bffc17 	ldw	r2,-16(fp)
   2e500:	10800104 	addi	r2,r2,4
   2e504:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   2e508:	003f8c06 	br	2e33c <__alt_data_end+0xfffee33c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   2e50c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   2e510:	0001883a 	nop
   2e514:	e037883a 	mov	sp,fp
   2e518:	df000017 	ldw	fp,0(sp)
   2e51c:	dec00104 	addi	sp,sp,4
   2e520:	f800283a 	ret

0002e524 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   2e524:	defff804 	addi	sp,sp,-32
   2e528:	df000715 	stw	fp,28(sp)
   2e52c:	df000704 	addi	fp,sp,28
   2e530:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   2e534:	e0bffb17 	ldw	r2,-20(fp)
   2e538:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   2e53c:	e0bff917 	ldw	r2,-28(fp)
   2e540:	10800017 	ldw	r2,0(r2)
   2e544:	10800104 	addi	r2,r2,4
   2e548:	10800037 	ldwio	r2,0(r2)
   2e54c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   2e550:	e0bffa17 	ldw	r2,-24(fp)
   2e554:	1081000c 	andi	r2,r2,1024
   2e558:	10000b26 	beq	r2,zero,2e588 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   2e55c:	e0bff917 	ldw	r2,-28(fp)
   2e560:	10800017 	ldw	r2,0(r2)
   2e564:	10800104 	addi	r2,r2,4
   2e568:	1007883a 	mov	r3,r2
   2e56c:	e0bff917 	ldw	r2,-28(fp)
   2e570:	10800817 	ldw	r2,32(r2)
   2e574:	10810014 	ori	r2,r2,1024
   2e578:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   2e57c:	e0bff917 	ldw	r2,-28(fp)
   2e580:	10000915 	stw	zero,36(r2)
   2e584:	00000a06 	br	2e5b0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   2e588:	e0bff917 	ldw	r2,-28(fp)
   2e58c:	10c00917 	ldw	r3,36(r2)
   2e590:	00a00034 	movhi	r2,32768
   2e594:	10bfff04 	addi	r2,r2,-4
   2e598:	10c00536 	bltu	r2,r3,2e5b0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   2e59c:	e0bff917 	ldw	r2,-28(fp)
   2e5a0:	10800917 	ldw	r2,36(r2)
   2e5a4:	10c00044 	addi	r3,r2,1
   2e5a8:	e0bff917 	ldw	r2,-28(fp)
   2e5ac:	10c00915 	stw	r3,36(r2)
   2e5b0:	d0a6da17 	ldw	r2,-25752(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   2e5b4:	e037883a 	mov	sp,fp
   2e5b8:	df000017 	ldw	fp,0(sp)
   2e5bc:	dec00104 	addi	sp,sp,4
   2e5c0:	f800283a 	ret

0002e5c4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   2e5c4:	defffd04 	addi	sp,sp,-12
   2e5c8:	df000215 	stw	fp,8(sp)
   2e5cc:	df000204 	addi	fp,sp,8
   2e5d0:	e13ffe15 	stw	r4,-8(fp)
   2e5d4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   2e5d8:	00000506 	br	2e5f0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   2e5dc:	e0bfff17 	ldw	r2,-4(fp)
   2e5e0:	1090000c 	andi	r2,r2,16384
   2e5e4:	10000226 	beq	r2,zero,2e5f0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   2e5e8:	00bffd44 	movi	r2,-11
   2e5ec:	00000b06 	br	2e61c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   2e5f0:	e0bffe17 	ldw	r2,-8(fp)
   2e5f4:	10c00d17 	ldw	r3,52(r2)
   2e5f8:	e0bffe17 	ldw	r2,-8(fp)
   2e5fc:	10800c17 	ldw	r2,48(r2)
   2e600:	18800526 	beq	r3,r2,2e618 <altera_avalon_jtag_uart_close+0x54>
   2e604:	e0bffe17 	ldw	r2,-8(fp)
   2e608:	10c00917 	ldw	r3,36(r2)
   2e60c:	e0bffe17 	ldw	r2,-8(fp)
   2e610:	10800117 	ldw	r2,4(r2)
   2e614:	18bff136 	bltu	r3,r2,2e5dc <__alt_data_end+0xfffee5dc>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   2e618:	0005883a 	mov	r2,zero
}
   2e61c:	e037883a 	mov	sp,fp
   2e620:	df000017 	ldw	fp,0(sp)
   2e624:	dec00104 	addi	sp,sp,4
   2e628:	f800283a 	ret

0002e62c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   2e62c:	defffa04 	addi	sp,sp,-24
   2e630:	df000515 	stw	fp,20(sp)
   2e634:	df000504 	addi	fp,sp,20
   2e638:	e13ffd15 	stw	r4,-12(fp)
   2e63c:	e17ffe15 	stw	r5,-8(fp)
   2e640:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   2e644:	00bff9c4 	movi	r2,-25
   2e648:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   2e64c:	e0bffe17 	ldw	r2,-8(fp)
   2e650:	10da8060 	cmpeqi	r3,r2,27137
   2e654:	1800031e 	bne	r3,zero,2e664 <altera_avalon_jtag_uart_ioctl+0x38>
   2e658:	109a80a0 	cmpeqi	r2,r2,27138
   2e65c:	1000181e 	bne	r2,zero,2e6c0 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   2e660:	00002906 	br	2e708 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   2e664:	e0bffd17 	ldw	r2,-12(fp)
   2e668:	10c00117 	ldw	r3,4(r2)
   2e66c:	00a00034 	movhi	r2,32768
   2e670:	10bfffc4 	addi	r2,r2,-1
   2e674:	18802126 	beq	r3,r2,2e6fc <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   2e678:	e0bfff17 	ldw	r2,-4(fp)
   2e67c:	10800017 	ldw	r2,0(r2)
   2e680:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   2e684:	e0bffc17 	ldw	r2,-16(fp)
   2e688:	10800090 	cmplti	r2,r2,2
   2e68c:	1000061e 	bne	r2,zero,2e6a8 <altera_avalon_jtag_uart_ioctl+0x7c>
   2e690:	e0fffc17 	ldw	r3,-16(fp)
   2e694:	00a00034 	movhi	r2,32768
   2e698:	10bfffc4 	addi	r2,r2,-1
   2e69c:	18800226 	beq	r3,r2,2e6a8 <altera_avalon_jtag_uart_ioctl+0x7c>
   2e6a0:	e0bffc17 	ldw	r2,-16(fp)
   2e6a4:	00000206 	br	2e6b0 <altera_avalon_jtag_uart_ioctl+0x84>
   2e6a8:	00a00034 	movhi	r2,32768
   2e6ac:	10bfff84 	addi	r2,r2,-2
   2e6b0:	e0fffd17 	ldw	r3,-12(fp)
   2e6b4:	18800115 	stw	r2,4(r3)
      rc = 0;
   2e6b8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   2e6bc:	00000f06 	br	2e6fc <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   2e6c0:	e0bffd17 	ldw	r2,-12(fp)
   2e6c4:	10c00117 	ldw	r3,4(r2)
   2e6c8:	00a00034 	movhi	r2,32768
   2e6cc:	10bfffc4 	addi	r2,r2,-1
   2e6d0:	18800c26 	beq	r3,r2,2e704 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   2e6d4:	e0bffd17 	ldw	r2,-12(fp)
   2e6d8:	10c00917 	ldw	r3,36(r2)
   2e6dc:	e0bffd17 	ldw	r2,-12(fp)
   2e6e0:	10800117 	ldw	r2,4(r2)
   2e6e4:	1885803a 	cmpltu	r2,r3,r2
   2e6e8:	10c03fcc 	andi	r3,r2,255
   2e6ec:	e0bfff17 	ldw	r2,-4(fp)
   2e6f0:	10c00015 	stw	r3,0(r2)
      rc = 0;
   2e6f4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   2e6f8:	00000206 	br	2e704 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   2e6fc:	0001883a 	nop
   2e700:	00000106 	br	2e708 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   2e704:	0001883a 	nop

  default:
    break;
  }

  return rc;
   2e708:	e0bffb17 	ldw	r2,-20(fp)
}
   2e70c:	e037883a 	mov	sp,fp
   2e710:	df000017 	ldw	fp,0(sp)
   2e714:	dec00104 	addi	sp,sp,4
   2e718:	f800283a 	ret

0002e71c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   2e71c:	defff304 	addi	sp,sp,-52
   2e720:	dfc00c15 	stw	ra,48(sp)
   2e724:	df000b15 	stw	fp,44(sp)
   2e728:	df000b04 	addi	fp,sp,44
   2e72c:	e13ffc15 	stw	r4,-16(fp)
   2e730:	e17ffd15 	stw	r5,-12(fp)
   2e734:	e1bffe15 	stw	r6,-8(fp)
   2e738:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   2e73c:	e0bffd17 	ldw	r2,-12(fp)
   2e740:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   2e744:	00004706 	br	2e864 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   2e748:	e0bffc17 	ldw	r2,-16(fp)
   2e74c:	10800a17 	ldw	r2,40(r2)
   2e750:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   2e754:	e0bffc17 	ldw	r2,-16(fp)
   2e758:	10800b17 	ldw	r2,44(r2)
   2e75c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   2e760:	e0fff717 	ldw	r3,-36(fp)
   2e764:	e0bff817 	ldw	r2,-32(fp)
   2e768:	18800536 	bltu	r3,r2,2e780 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   2e76c:	e0fff717 	ldw	r3,-36(fp)
   2e770:	e0bff817 	ldw	r2,-32(fp)
   2e774:	1885c83a 	sub	r2,r3,r2
   2e778:	e0bff615 	stw	r2,-40(fp)
   2e77c:	00000406 	br	2e790 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   2e780:	00c20004 	movi	r3,2048
   2e784:	e0bff817 	ldw	r2,-32(fp)
   2e788:	1885c83a 	sub	r2,r3,r2
   2e78c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   2e790:	e0bff617 	ldw	r2,-40(fp)
   2e794:	10001e26 	beq	r2,zero,2e810 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   2e798:	e0fffe17 	ldw	r3,-8(fp)
   2e79c:	e0bff617 	ldw	r2,-40(fp)
   2e7a0:	1880022e 	bgeu	r3,r2,2e7ac <altera_avalon_jtag_uart_read+0x90>
        n = space;
   2e7a4:	e0bffe17 	ldw	r2,-8(fp)
   2e7a8:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   2e7ac:	e0bffc17 	ldw	r2,-16(fp)
   2e7b0:	10c00e04 	addi	r3,r2,56
   2e7b4:	e0bff817 	ldw	r2,-32(fp)
   2e7b8:	1885883a 	add	r2,r3,r2
   2e7bc:	e1bff617 	ldw	r6,-40(fp)
   2e7c0:	100b883a 	mov	r5,r2
   2e7c4:	e13ff517 	ldw	r4,-44(fp)
   2e7c8:	0025fe80 	call	25fe8 <memcpy>
      ptr   += n;
   2e7cc:	e0fff517 	ldw	r3,-44(fp)
   2e7d0:	e0bff617 	ldw	r2,-40(fp)
   2e7d4:	1885883a 	add	r2,r3,r2
   2e7d8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   2e7dc:	e0fffe17 	ldw	r3,-8(fp)
   2e7e0:	e0bff617 	ldw	r2,-40(fp)
   2e7e4:	1885c83a 	sub	r2,r3,r2
   2e7e8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2e7ec:	e0fff817 	ldw	r3,-32(fp)
   2e7f0:	e0bff617 	ldw	r2,-40(fp)
   2e7f4:	1885883a 	add	r2,r3,r2
   2e7f8:	10c1ffcc 	andi	r3,r2,2047
   2e7fc:	e0bffc17 	ldw	r2,-16(fp)
   2e800:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   2e804:	e0bffe17 	ldw	r2,-8(fp)
   2e808:	00bfcf16 	blt	zero,r2,2e748 <__alt_data_end+0xfffee748>
   2e80c:	00000106 	br	2e814 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   2e810:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   2e814:	e0fff517 	ldw	r3,-44(fp)
   2e818:	e0bffd17 	ldw	r2,-12(fp)
   2e81c:	1880141e 	bne	r3,r2,2e870 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   2e820:	e0bfff17 	ldw	r2,-4(fp)
   2e824:	1090000c 	andi	r2,r2,16384
   2e828:	1000131e 	bne	r2,zero,2e878 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   2e82c:	0001883a 	nop
   2e830:	e0bffc17 	ldw	r2,-16(fp)
   2e834:	10c00a17 	ldw	r3,40(r2)
   2e838:	e0bff717 	ldw	r2,-36(fp)
   2e83c:	1880051e 	bne	r3,r2,2e854 <altera_avalon_jtag_uart_read+0x138>
   2e840:	e0bffc17 	ldw	r2,-16(fp)
   2e844:	10c00917 	ldw	r3,36(r2)
   2e848:	e0bffc17 	ldw	r2,-16(fp)
   2e84c:	10800117 	ldw	r2,4(r2)
   2e850:	18bff736 	bltu	r3,r2,2e830 <__alt_data_end+0xfffee830>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   2e854:	e0bffc17 	ldw	r2,-16(fp)
   2e858:	10c00a17 	ldw	r3,40(r2)
   2e85c:	e0bff717 	ldw	r2,-36(fp)
   2e860:	18800726 	beq	r3,r2,2e880 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   2e864:	e0bffe17 	ldw	r2,-8(fp)
   2e868:	00bfb716 	blt	zero,r2,2e748 <__alt_data_end+0xfffee748>
   2e86c:	00000506 	br	2e884 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   2e870:	0001883a 	nop
   2e874:	00000306 	br	2e884 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   2e878:	0001883a 	nop
   2e87c:	00000106 	br	2e884 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   2e880:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   2e884:	e0fff517 	ldw	r3,-44(fp)
   2e888:	e0bffd17 	ldw	r2,-12(fp)
   2e88c:	18801826 	beq	r3,r2,2e8f0 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2e890:	0005303a 	rdctl	r2,status
   2e894:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2e898:	e0fffb17 	ldw	r3,-20(fp)
   2e89c:	00bfff84 	movi	r2,-2
   2e8a0:	1884703a 	and	r2,r3,r2
   2e8a4:	1001703a 	wrctl	status,r2
  
  return context;
   2e8a8:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   2e8ac:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2e8b0:	e0bffc17 	ldw	r2,-16(fp)
   2e8b4:	10800817 	ldw	r2,32(r2)
   2e8b8:	10c00054 	ori	r3,r2,1
   2e8bc:	e0bffc17 	ldw	r2,-16(fp)
   2e8c0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2e8c4:	e0bffc17 	ldw	r2,-16(fp)
   2e8c8:	10800017 	ldw	r2,0(r2)
   2e8cc:	10800104 	addi	r2,r2,4
   2e8d0:	1007883a 	mov	r3,r2
   2e8d4:	e0bffc17 	ldw	r2,-16(fp)
   2e8d8:	10800817 	ldw	r2,32(r2)
   2e8dc:	18800035 	stwio	r2,0(r3)
   2e8e0:	e0bffa17 	ldw	r2,-24(fp)
   2e8e4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2e8e8:	e0bff917 	ldw	r2,-28(fp)
   2e8ec:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   2e8f0:	e0fff517 	ldw	r3,-44(fp)
   2e8f4:	e0bffd17 	ldw	r2,-12(fp)
   2e8f8:	18800426 	beq	r3,r2,2e90c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   2e8fc:	e0fff517 	ldw	r3,-44(fp)
   2e900:	e0bffd17 	ldw	r2,-12(fp)
   2e904:	1885c83a 	sub	r2,r3,r2
   2e908:	00000606 	br	2e924 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   2e90c:	e0bfff17 	ldw	r2,-4(fp)
   2e910:	1090000c 	andi	r2,r2,16384
   2e914:	10000226 	beq	r2,zero,2e920 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   2e918:	00bffd44 	movi	r2,-11
   2e91c:	00000106 	br	2e924 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   2e920:	00bffec4 	movi	r2,-5
}
   2e924:	e037883a 	mov	sp,fp
   2e928:	dfc00117 	ldw	ra,4(sp)
   2e92c:	df000017 	ldw	fp,0(sp)
   2e930:	dec00204 	addi	sp,sp,8
   2e934:	f800283a 	ret

0002e938 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   2e938:	defff304 	addi	sp,sp,-52
   2e93c:	dfc00c15 	stw	ra,48(sp)
   2e940:	df000b15 	stw	fp,44(sp)
   2e944:	df000b04 	addi	fp,sp,44
   2e948:	e13ffc15 	stw	r4,-16(fp)
   2e94c:	e17ffd15 	stw	r5,-12(fp)
   2e950:	e1bffe15 	stw	r6,-8(fp)
   2e954:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   2e958:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   2e95c:	e0bffd17 	ldw	r2,-12(fp)
   2e960:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   2e964:	00003706 	br	2ea44 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   2e968:	e0bffc17 	ldw	r2,-16(fp)
   2e96c:	10800c17 	ldw	r2,48(r2)
   2e970:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   2e974:	e0bffc17 	ldw	r2,-16(fp)
   2e978:	10800d17 	ldw	r2,52(r2)
   2e97c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   2e980:	e0fff917 	ldw	r3,-28(fp)
   2e984:	e0bff517 	ldw	r2,-44(fp)
   2e988:	1880062e 	bgeu	r3,r2,2e9a4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   2e98c:	e0fff517 	ldw	r3,-44(fp)
   2e990:	e0bff917 	ldw	r2,-28(fp)
   2e994:	1885c83a 	sub	r2,r3,r2
   2e998:	10bfffc4 	addi	r2,r2,-1
   2e99c:	e0bff615 	stw	r2,-40(fp)
   2e9a0:	00000b06 	br	2e9d0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   2e9a4:	e0bff517 	ldw	r2,-44(fp)
   2e9a8:	10000526 	beq	r2,zero,2e9c0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   2e9ac:	00c20004 	movi	r3,2048
   2e9b0:	e0bff917 	ldw	r2,-28(fp)
   2e9b4:	1885c83a 	sub	r2,r3,r2
   2e9b8:	e0bff615 	stw	r2,-40(fp)
   2e9bc:	00000406 	br	2e9d0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   2e9c0:	00c1ffc4 	movi	r3,2047
   2e9c4:	e0bff917 	ldw	r2,-28(fp)
   2e9c8:	1885c83a 	sub	r2,r3,r2
   2e9cc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   2e9d0:	e0bff617 	ldw	r2,-40(fp)
   2e9d4:	10001e26 	beq	r2,zero,2ea50 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   2e9d8:	e0fffe17 	ldw	r3,-8(fp)
   2e9dc:	e0bff617 	ldw	r2,-40(fp)
   2e9e0:	1880022e 	bgeu	r3,r2,2e9ec <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   2e9e4:	e0bffe17 	ldw	r2,-8(fp)
   2e9e8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   2e9ec:	e0bffc17 	ldw	r2,-16(fp)
   2e9f0:	10c20e04 	addi	r3,r2,2104
   2e9f4:	e0bff917 	ldw	r2,-28(fp)
   2e9f8:	1885883a 	add	r2,r3,r2
   2e9fc:	e1bff617 	ldw	r6,-40(fp)
   2ea00:	e17ffd17 	ldw	r5,-12(fp)
   2ea04:	1009883a 	mov	r4,r2
   2ea08:	0025fe80 	call	25fe8 <memcpy>
      ptr   += n;
   2ea0c:	e0fffd17 	ldw	r3,-12(fp)
   2ea10:	e0bff617 	ldw	r2,-40(fp)
   2ea14:	1885883a 	add	r2,r3,r2
   2ea18:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   2ea1c:	e0fffe17 	ldw	r3,-8(fp)
   2ea20:	e0bff617 	ldw	r2,-40(fp)
   2ea24:	1885c83a 	sub	r2,r3,r2
   2ea28:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2ea2c:	e0fff917 	ldw	r3,-28(fp)
   2ea30:	e0bff617 	ldw	r2,-40(fp)
   2ea34:	1885883a 	add	r2,r3,r2
   2ea38:	10c1ffcc 	andi	r3,r2,2047
   2ea3c:	e0bffc17 	ldw	r2,-16(fp)
   2ea40:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   2ea44:	e0bffe17 	ldw	r2,-8(fp)
   2ea48:	00bfc716 	blt	zero,r2,2e968 <__alt_data_end+0xfffee968>
   2ea4c:	00000106 	br	2ea54 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   2ea50:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2ea54:	0005303a 	rdctl	r2,status
   2ea58:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2ea5c:	e0fffb17 	ldw	r3,-20(fp)
   2ea60:	00bfff84 	movi	r2,-2
   2ea64:	1884703a 	and	r2,r3,r2
   2ea68:	1001703a 	wrctl	status,r2
  
  return context;
   2ea6c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   2ea70:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   2ea74:	e0bffc17 	ldw	r2,-16(fp)
   2ea78:	10800817 	ldw	r2,32(r2)
   2ea7c:	10c00094 	ori	r3,r2,2
   2ea80:	e0bffc17 	ldw	r2,-16(fp)
   2ea84:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2ea88:	e0bffc17 	ldw	r2,-16(fp)
   2ea8c:	10800017 	ldw	r2,0(r2)
   2ea90:	10800104 	addi	r2,r2,4
   2ea94:	1007883a 	mov	r3,r2
   2ea98:	e0bffc17 	ldw	r2,-16(fp)
   2ea9c:	10800817 	ldw	r2,32(r2)
   2eaa0:	18800035 	stwio	r2,0(r3)
   2eaa4:	e0bffa17 	ldw	r2,-24(fp)
   2eaa8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2eaac:	e0bff817 	ldw	r2,-32(fp)
   2eab0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   2eab4:	e0bffe17 	ldw	r2,-8(fp)
   2eab8:	0080100e 	bge	zero,r2,2eafc <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   2eabc:	e0bfff17 	ldw	r2,-4(fp)
   2eac0:	1090000c 	andi	r2,r2,16384
   2eac4:	1000101e 	bne	r2,zero,2eb08 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   2eac8:	0001883a 	nop
   2eacc:	e0bffc17 	ldw	r2,-16(fp)
   2ead0:	10c00d17 	ldw	r3,52(r2)
   2ead4:	e0bff517 	ldw	r2,-44(fp)
   2ead8:	1880051e 	bne	r3,r2,2eaf0 <altera_avalon_jtag_uart_write+0x1b8>
   2eadc:	e0bffc17 	ldw	r2,-16(fp)
   2eae0:	10c00917 	ldw	r3,36(r2)
   2eae4:	e0bffc17 	ldw	r2,-16(fp)
   2eae8:	10800117 	ldw	r2,4(r2)
   2eaec:	18bff736 	bltu	r3,r2,2eacc <__alt_data_end+0xfffeeacc>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   2eaf0:	e0bffc17 	ldw	r2,-16(fp)
   2eaf4:	10800917 	ldw	r2,36(r2)
   2eaf8:	1000051e 	bne	r2,zero,2eb10 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   2eafc:	e0bffe17 	ldw	r2,-8(fp)
   2eb00:	00bfd016 	blt	zero,r2,2ea44 <__alt_data_end+0xfffeea44>
   2eb04:	00000306 	br	2eb14 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   2eb08:	0001883a 	nop
   2eb0c:	00000106 	br	2eb14 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   2eb10:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   2eb14:	e0fffd17 	ldw	r3,-12(fp)
   2eb18:	e0bff717 	ldw	r2,-36(fp)
   2eb1c:	18800426 	beq	r3,r2,2eb30 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   2eb20:	e0fffd17 	ldw	r3,-12(fp)
   2eb24:	e0bff717 	ldw	r2,-36(fp)
   2eb28:	1885c83a 	sub	r2,r3,r2
   2eb2c:	00000606 	br	2eb48 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   2eb30:	e0bfff17 	ldw	r2,-4(fp)
   2eb34:	1090000c 	andi	r2,r2,16384
   2eb38:	10000226 	beq	r2,zero,2eb44 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   2eb3c:	00bffd44 	movi	r2,-11
   2eb40:	00000106 	br	2eb48 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   2eb44:	00bffec4 	movi	r2,-5
}
   2eb48:	e037883a 	mov	sp,fp
   2eb4c:	dfc00117 	ldw	ra,4(sp)
   2eb50:	df000017 	ldw	fp,0(sp)
   2eb54:	dec00204 	addi	sp,sp,8
   2eb58:	f800283a 	ret

0002eb5c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   2eb5c:	defffa04 	addi	sp,sp,-24
   2eb60:	dfc00515 	stw	ra,20(sp)
   2eb64:	df000415 	stw	fp,16(sp)
   2eb68:	df000404 	addi	fp,sp,16
   2eb6c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   2eb70:	0007883a 	mov	r3,zero
   2eb74:	e0bfff17 	ldw	r2,-4(fp)
   2eb78:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   2eb7c:	e0bfff17 	ldw	r2,-4(fp)
   2eb80:	10800104 	addi	r2,r2,4
   2eb84:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2eb88:	0005303a 	rdctl	r2,status
   2eb8c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2eb90:	e0fffd17 	ldw	r3,-12(fp)
   2eb94:	00bfff84 	movi	r2,-2
   2eb98:	1884703a 	and	r2,r3,r2
   2eb9c:	1001703a 	wrctl	status,r2
  
  return context;
   2eba0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   2eba4:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   2eba8:	002f4280 	call	2f428 <alt_tick>
   2ebac:	e0bffc17 	ldw	r2,-16(fp)
   2ebb0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2ebb4:	e0bffe17 	ldw	r2,-8(fp)
   2ebb8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   2ebbc:	0001883a 	nop
   2ebc0:	e037883a 	mov	sp,fp
   2ebc4:	dfc00117 	ldw	ra,4(sp)
   2ebc8:	df000017 	ldw	fp,0(sp)
   2ebcc:	dec00204 	addi	sp,sp,8
   2ebd0:	f800283a 	ret

0002ebd4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   2ebd4:	defff804 	addi	sp,sp,-32
   2ebd8:	dfc00715 	stw	ra,28(sp)
   2ebdc:	df000615 	stw	fp,24(sp)
   2ebe0:	df000604 	addi	fp,sp,24
   2ebe4:	e13ffc15 	stw	r4,-16(fp)
   2ebe8:	e17ffd15 	stw	r5,-12(fp)
   2ebec:	e1bffe15 	stw	r6,-8(fp)
   2ebf0:	e1ffff15 	stw	r7,-4(fp)
   2ebf4:	e0bfff17 	ldw	r2,-4(fp)
   2ebf8:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   2ebfc:	d0a6da17 	ldw	r2,-25752(gp)
   2ec00:	1000021e 	bne	r2,zero,2ec0c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   2ec04:	e0bffb17 	ldw	r2,-20(fp)
   2ec08:	d0a6da15 	stw	r2,-25752(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   2ec0c:	e0bffc17 	ldw	r2,-16(fp)
   2ec10:	10800104 	addi	r2,r2,4
   2ec14:	00c001c4 	movi	r3,7
   2ec18:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   2ec1c:	d8000015 	stw	zero,0(sp)
   2ec20:	e1fffc17 	ldw	r7,-16(fp)
   2ec24:	018000f4 	movhi	r6,3
   2ec28:	31bad704 	addi	r6,r6,-5284
   2ec2c:	e17ffe17 	ldw	r5,-8(fp)
   2ec30:	e13ffd17 	ldw	r4,-12(fp)
   2ec34:	002d4000 	call	2d400 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   2ec38:	0001883a 	nop
   2ec3c:	e037883a 	mov	sp,fp
   2ec40:	dfc00117 	ldw	ra,4(sp)
   2ec44:	df000017 	ldw	fp,0(sp)
   2ec48:	dec00204 	addi	sp,sp,8
   2ec4c:	f800283a 	ret

0002ec50 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   2ec50:	defff504 	addi	sp,sp,-44
   2ec54:	df000a15 	stw	fp,40(sp)
   2ec58:	df000a04 	addi	fp,sp,40
   2ec5c:	e13ffc15 	stw	r4,-16(fp)
   2ec60:	e17ffd15 	stw	r5,-12(fp)
   2ec64:	e1bffe15 	stw	r6,-8(fp)
   2ec68:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   2ec6c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   2ec70:	d0a6da17 	ldw	r2,-25752(gp)
  
  if (alt_ticks_per_second ())
   2ec74:	10003c26 	beq	r2,zero,2ed68 <alt_alarm_start+0x118>
  {
    if (alarm)
   2ec78:	e0bffc17 	ldw	r2,-16(fp)
   2ec7c:	10003826 	beq	r2,zero,2ed60 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   2ec80:	e0bffc17 	ldw	r2,-16(fp)
   2ec84:	e0fffe17 	ldw	r3,-8(fp)
   2ec88:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   2ec8c:	e0bffc17 	ldw	r2,-16(fp)
   2ec90:	e0ffff17 	ldw	r3,-4(fp)
   2ec94:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2ec98:	0005303a 	rdctl	r2,status
   2ec9c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2eca0:	e0fff917 	ldw	r3,-28(fp)
   2eca4:	00bfff84 	movi	r2,-2
   2eca8:	1884703a 	and	r2,r3,r2
   2ecac:	1001703a 	wrctl	status,r2
  
  return context;
   2ecb0:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   2ecb4:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   2ecb8:	d0a6db17 	ldw	r2,-25748(gp)
      
      current_nticks = alt_nticks();
   2ecbc:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   2ecc0:	e0fffd17 	ldw	r3,-12(fp)
   2ecc4:	e0bff617 	ldw	r2,-40(fp)
   2ecc8:	1885883a 	add	r2,r3,r2
   2eccc:	10c00044 	addi	r3,r2,1
   2ecd0:	e0bffc17 	ldw	r2,-16(fp)
   2ecd4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   2ecd8:	e0bffc17 	ldw	r2,-16(fp)
   2ecdc:	10c00217 	ldw	r3,8(r2)
   2ece0:	e0bff617 	ldw	r2,-40(fp)
   2ece4:	1880042e 	bgeu	r3,r2,2ecf8 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   2ece8:	e0bffc17 	ldw	r2,-16(fp)
   2ecec:	00c00044 	movi	r3,1
   2ecf0:	10c00405 	stb	r3,16(r2)
   2ecf4:	00000206 	br	2ed00 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   2ecf8:	e0bffc17 	ldw	r2,-16(fp)
   2ecfc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   2ed00:	e0bffc17 	ldw	r2,-16(fp)
   2ed04:	d0e00e04 	addi	r3,gp,-32712
   2ed08:	e0fffa15 	stw	r3,-24(fp)
   2ed0c:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   2ed10:	e0bffb17 	ldw	r2,-20(fp)
   2ed14:	e0fffa17 	ldw	r3,-24(fp)
   2ed18:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   2ed1c:	e0bffa17 	ldw	r2,-24(fp)
   2ed20:	10c00017 	ldw	r3,0(r2)
   2ed24:	e0bffb17 	ldw	r2,-20(fp)
   2ed28:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   2ed2c:	e0bffa17 	ldw	r2,-24(fp)
   2ed30:	10800017 	ldw	r2,0(r2)
   2ed34:	e0fffb17 	ldw	r3,-20(fp)
   2ed38:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   2ed3c:	e0bffa17 	ldw	r2,-24(fp)
   2ed40:	e0fffb17 	ldw	r3,-20(fp)
   2ed44:	10c00015 	stw	r3,0(r2)
   2ed48:	e0bff817 	ldw	r2,-32(fp)
   2ed4c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2ed50:	e0bff717 	ldw	r2,-36(fp)
   2ed54:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   2ed58:	0005883a 	mov	r2,zero
   2ed5c:	00000306 	br	2ed6c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   2ed60:	00bffa84 	movi	r2,-22
   2ed64:	00000106 	br	2ed6c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   2ed68:	00bfde84 	movi	r2,-134
  }
}
   2ed6c:	e037883a 	mov	sp,fp
   2ed70:	df000017 	ldw	fp,0(sp)
   2ed74:	dec00104 	addi	sp,sp,4
   2ed78:	f800283a 	ret

0002ed7c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   2ed7c:	deffff04 	addi	sp,sp,-4
   2ed80:	df000015 	stw	fp,0(sp)
   2ed84:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   2ed88:	0001883a 	nop
   2ed8c:	e037883a 	mov	sp,fp
   2ed90:	df000017 	ldw	fp,0(sp)
   2ed94:	dec00104 	addi	sp,sp,4
   2ed98:	f800283a 	ret

0002ed9c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2ed9c:	defffe04 	addi	sp,sp,-8
   2eda0:	dfc00115 	stw	ra,4(sp)
   2eda4:	df000015 	stw	fp,0(sp)
   2eda8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2edac:	d0a00b17 	ldw	r2,-32724(gp)
   2edb0:	10000326 	beq	r2,zero,2edc0 <alt_get_errno+0x24>
   2edb4:	d0a00b17 	ldw	r2,-32724(gp)
   2edb8:	103ee83a 	callr	r2
   2edbc:	00000106 	br	2edc4 <alt_get_errno+0x28>
   2edc0:	d0a6d404 	addi	r2,gp,-25776
}
   2edc4:	e037883a 	mov	sp,fp
   2edc8:	dfc00117 	ldw	ra,4(sp)
   2edcc:	df000017 	ldw	fp,0(sp)
   2edd0:	dec00204 	addi	sp,sp,8
   2edd4:	f800283a 	ret

0002edd8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   2edd8:	defffa04 	addi	sp,sp,-24
   2eddc:	dfc00515 	stw	ra,20(sp)
   2ede0:	df000415 	stw	fp,16(sp)
   2ede4:	df000404 	addi	fp,sp,16
   2ede8:	e13ffe15 	stw	r4,-8(fp)
   2edec:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   2edf0:	e0bffe17 	ldw	r2,-8(fp)
   2edf4:	10000326 	beq	r2,zero,2ee04 <alt_dev_llist_insert+0x2c>
   2edf8:	e0bffe17 	ldw	r2,-8(fp)
   2edfc:	10800217 	ldw	r2,8(r2)
   2ee00:	1000061e 	bne	r2,zero,2ee1c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   2ee04:	002ed9c0 	call	2ed9c <alt_get_errno>
   2ee08:	1007883a 	mov	r3,r2
   2ee0c:	00800584 	movi	r2,22
   2ee10:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   2ee14:	00bffa84 	movi	r2,-22
   2ee18:	00001306 	br	2ee68 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   2ee1c:	e0bffe17 	ldw	r2,-8(fp)
   2ee20:	e0ffff17 	ldw	r3,-4(fp)
   2ee24:	e0fffc15 	stw	r3,-16(fp)
   2ee28:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   2ee2c:	e0bffd17 	ldw	r2,-12(fp)
   2ee30:	e0fffc17 	ldw	r3,-16(fp)
   2ee34:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   2ee38:	e0bffc17 	ldw	r2,-16(fp)
   2ee3c:	10c00017 	ldw	r3,0(r2)
   2ee40:	e0bffd17 	ldw	r2,-12(fp)
   2ee44:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   2ee48:	e0bffc17 	ldw	r2,-16(fp)
   2ee4c:	10800017 	ldw	r2,0(r2)
   2ee50:	e0fffd17 	ldw	r3,-12(fp)
   2ee54:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   2ee58:	e0bffc17 	ldw	r2,-16(fp)
   2ee5c:	e0fffd17 	ldw	r3,-12(fp)
   2ee60:	10c00015 	stw	r3,0(r2)

  return 0;  
   2ee64:	0005883a 	mov	r2,zero
}
   2ee68:	e037883a 	mov	sp,fp
   2ee6c:	dfc00117 	ldw	ra,4(sp)
   2ee70:	df000017 	ldw	fp,0(sp)
   2ee74:	dec00204 	addi	sp,sp,8
   2ee78:	f800283a 	ret

0002ee7c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   2ee7c:	defffd04 	addi	sp,sp,-12
   2ee80:	dfc00215 	stw	ra,8(sp)
   2ee84:	df000115 	stw	fp,4(sp)
   2ee88:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   2ee8c:	008000f4 	movhi	r2,3
   2ee90:	10bf2204 	addi	r2,r2,-888
   2ee94:	e0bfff15 	stw	r2,-4(fp)
   2ee98:	00000606 	br	2eeb4 <_do_ctors+0x38>
        (*ctor) (); 
   2ee9c:	e0bfff17 	ldw	r2,-4(fp)
   2eea0:	10800017 	ldw	r2,0(r2)
   2eea4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   2eea8:	e0bfff17 	ldw	r2,-4(fp)
   2eeac:	10bfff04 	addi	r2,r2,-4
   2eeb0:	e0bfff15 	stw	r2,-4(fp)
   2eeb4:	e0ffff17 	ldw	r3,-4(fp)
   2eeb8:	008000f4 	movhi	r2,3
   2eebc:	10bf2304 	addi	r2,r2,-884
   2eec0:	18bff62e 	bgeu	r3,r2,2ee9c <__alt_data_end+0xfffeee9c>
        (*ctor) (); 
}
   2eec4:	0001883a 	nop
   2eec8:	e037883a 	mov	sp,fp
   2eecc:	dfc00117 	ldw	ra,4(sp)
   2eed0:	df000017 	ldw	fp,0(sp)
   2eed4:	dec00204 	addi	sp,sp,8
   2eed8:	f800283a 	ret

0002eedc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   2eedc:	defffd04 	addi	sp,sp,-12
   2eee0:	dfc00215 	stw	ra,8(sp)
   2eee4:	df000115 	stw	fp,4(sp)
   2eee8:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   2eeec:	008000f4 	movhi	r2,3
   2eef0:	10bf2204 	addi	r2,r2,-888
   2eef4:	e0bfff15 	stw	r2,-4(fp)
   2eef8:	00000606 	br	2ef14 <_do_dtors+0x38>
        (*dtor) (); 
   2eefc:	e0bfff17 	ldw	r2,-4(fp)
   2ef00:	10800017 	ldw	r2,0(r2)
   2ef04:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   2ef08:	e0bfff17 	ldw	r2,-4(fp)
   2ef0c:	10bfff04 	addi	r2,r2,-4
   2ef10:	e0bfff15 	stw	r2,-4(fp)
   2ef14:	e0ffff17 	ldw	r3,-4(fp)
   2ef18:	008000f4 	movhi	r2,3
   2ef1c:	10bf2304 	addi	r2,r2,-884
   2ef20:	18bff62e 	bgeu	r3,r2,2eefc <__alt_data_end+0xfffeeefc>
        (*dtor) (); 
}
   2ef24:	0001883a 	nop
   2ef28:	e037883a 	mov	sp,fp
   2ef2c:	dfc00117 	ldw	ra,4(sp)
   2ef30:	df000017 	ldw	fp,0(sp)
   2ef34:	dec00204 	addi	sp,sp,8
   2ef38:	f800283a 	ret

0002ef3c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   2ef3c:	deffff04 	addi	sp,sp,-4
   2ef40:	df000015 	stw	fp,0(sp)
   2ef44:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   2ef48:	0001883a 	nop
   2ef4c:	e037883a 	mov	sp,fp
   2ef50:	df000017 	ldw	fp,0(sp)
   2ef54:	dec00104 	addi	sp,sp,4
   2ef58:	f800283a 	ret

0002ef5c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   2ef5c:	defffe04 	addi	sp,sp,-8
   2ef60:	df000115 	stw	fp,4(sp)
   2ef64:	df000104 	addi	fp,sp,4
   2ef68:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   2ef6c:	e0bfff17 	ldw	r2,-4(fp)
   2ef70:	10bffe84 	addi	r2,r2,-6
   2ef74:	10c00428 	cmpgeui	r3,r2,16
   2ef78:	18001a1e 	bne	r3,zero,2efe4 <alt_exception_cause_generated_bad_addr+0x88>
   2ef7c:	100690ba 	slli	r3,r2,2
   2ef80:	008000f4 	movhi	r2,3
   2ef84:	10bbe504 	addi	r2,r2,-4204
   2ef88:	1885883a 	add	r2,r3,r2
   2ef8c:	10800017 	ldw	r2,0(r2)
   2ef90:	1000683a 	jmp	r2
   2ef94:	0002efd4 	movui	zero,3007
   2ef98:	0002efd4 	movui	zero,3007
   2ef9c:	0002efe4 	muli	zero,zero,3007
   2efa0:	0002efe4 	muli	zero,zero,3007
   2efa4:	0002efe4 	muli	zero,zero,3007
   2efa8:	0002efd4 	movui	zero,3007
   2efac:	0002efdc 	xori	zero,zero,3007
   2efb0:	0002efe4 	muli	zero,zero,3007
   2efb4:	0002efd4 	movui	zero,3007
   2efb8:	0002efd4 	movui	zero,3007
   2efbc:	0002efe4 	muli	zero,zero,3007
   2efc0:	0002efd4 	movui	zero,3007
   2efc4:	0002efdc 	xori	zero,zero,3007
   2efc8:	0002efe4 	muli	zero,zero,3007
   2efcc:	0002efe4 	muli	zero,zero,3007
   2efd0:	0002efd4 	movui	zero,3007
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   2efd4:	00800044 	movi	r2,1
   2efd8:	00000306 	br	2efe8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   2efdc:	0005883a 	mov	r2,zero
   2efe0:	00000106 	br	2efe8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   2efe4:	0005883a 	mov	r2,zero
  }
}
   2efe8:	e037883a 	mov	sp,fp
   2efec:	df000017 	ldw	fp,0(sp)
   2eff0:	dec00104 	addi	sp,sp,4
   2eff4:	f800283a 	ret

0002eff8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   2eff8:	defff904 	addi	sp,sp,-28
   2effc:	dfc00615 	stw	ra,24(sp)
   2f000:	df000515 	stw	fp,20(sp)
   2f004:	df000504 	addi	fp,sp,20
   2f008:	e13ffc15 	stw	r4,-16(fp)
   2f00c:	e17ffd15 	stw	r5,-12(fp)
   2f010:	e1bffe15 	stw	r6,-8(fp)
   2f014:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   2f018:	e1bfff17 	ldw	r6,-4(fp)
   2f01c:	e17ffe17 	ldw	r5,-8(fp)
   2f020:	e13ffd17 	ldw	r4,-12(fp)
   2f024:	002f2380 	call	2f238 <open>
   2f028:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   2f02c:	e0bffb17 	ldw	r2,-20(fp)
   2f030:	10001c16 	blt	r2,zero,2f0a4 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   2f034:	008000f4 	movhi	r2,3
   2f038:	1082a104 	addi	r2,r2,2692
   2f03c:	e0fffb17 	ldw	r3,-20(fp)
   2f040:	18c00324 	muli	r3,r3,12
   2f044:	10c5883a 	add	r2,r2,r3
   2f048:	10c00017 	ldw	r3,0(r2)
   2f04c:	e0bffc17 	ldw	r2,-16(fp)
   2f050:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   2f054:	008000f4 	movhi	r2,3
   2f058:	1082a104 	addi	r2,r2,2692
   2f05c:	e0fffb17 	ldw	r3,-20(fp)
   2f060:	18c00324 	muli	r3,r3,12
   2f064:	10c5883a 	add	r2,r2,r3
   2f068:	10800104 	addi	r2,r2,4
   2f06c:	10c00017 	ldw	r3,0(r2)
   2f070:	e0bffc17 	ldw	r2,-16(fp)
   2f074:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   2f078:	008000f4 	movhi	r2,3
   2f07c:	1082a104 	addi	r2,r2,2692
   2f080:	e0fffb17 	ldw	r3,-20(fp)
   2f084:	18c00324 	muli	r3,r3,12
   2f088:	10c5883a 	add	r2,r2,r3
   2f08c:	10800204 	addi	r2,r2,8
   2f090:	10c00017 	ldw	r3,0(r2)
   2f094:	e0bffc17 	ldw	r2,-16(fp)
   2f098:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   2f09c:	e13ffb17 	ldw	r4,-20(fp)
   2f0a0:	002dde00 	call	2dde0 <alt_release_fd>
  }
} 
   2f0a4:	0001883a 	nop
   2f0a8:	e037883a 	mov	sp,fp
   2f0ac:	dfc00117 	ldw	ra,4(sp)
   2f0b0:	df000017 	ldw	fp,0(sp)
   2f0b4:	dec00204 	addi	sp,sp,8
   2f0b8:	f800283a 	ret

0002f0bc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   2f0bc:	defffb04 	addi	sp,sp,-20
   2f0c0:	dfc00415 	stw	ra,16(sp)
   2f0c4:	df000315 	stw	fp,12(sp)
   2f0c8:	df000304 	addi	fp,sp,12
   2f0cc:	e13ffd15 	stw	r4,-12(fp)
   2f0d0:	e17ffe15 	stw	r5,-8(fp)
   2f0d4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   2f0d8:	01c07fc4 	movi	r7,511
   2f0dc:	01800044 	movi	r6,1
   2f0e0:	e17ffd17 	ldw	r5,-12(fp)
   2f0e4:	010000f4 	movhi	r4,3
   2f0e8:	2102a404 	addi	r4,r4,2704
   2f0ec:	002eff80 	call	2eff8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   2f0f0:	01c07fc4 	movi	r7,511
   2f0f4:	000d883a 	mov	r6,zero
   2f0f8:	e17ffe17 	ldw	r5,-8(fp)
   2f0fc:	010000f4 	movhi	r4,3
   2f100:	2102a104 	addi	r4,r4,2692
   2f104:	002eff80 	call	2eff8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   2f108:	01c07fc4 	movi	r7,511
   2f10c:	01800044 	movi	r6,1
   2f110:	e17fff17 	ldw	r5,-4(fp)
   2f114:	010000f4 	movhi	r4,3
   2f118:	2102a704 	addi	r4,r4,2716
   2f11c:	002eff80 	call	2eff8 <alt_open_fd>
}  
   2f120:	0001883a 	nop
   2f124:	e037883a 	mov	sp,fp
   2f128:	dfc00117 	ldw	ra,4(sp)
   2f12c:	df000017 	ldw	fp,0(sp)
   2f130:	dec00204 	addi	sp,sp,8
   2f134:	f800283a 	ret

0002f138 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2f138:	defffe04 	addi	sp,sp,-8
   2f13c:	dfc00115 	stw	ra,4(sp)
   2f140:	df000015 	stw	fp,0(sp)
   2f144:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2f148:	d0a00b17 	ldw	r2,-32724(gp)
   2f14c:	10000326 	beq	r2,zero,2f15c <alt_get_errno+0x24>
   2f150:	d0a00b17 	ldw	r2,-32724(gp)
   2f154:	103ee83a 	callr	r2
   2f158:	00000106 	br	2f160 <alt_get_errno+0x28>
   2f15c:	d0a6d404 	addi	r2,gp,-25776
}
   2f160:	e037883a 	mov	sp,fp
   2f164:	dfc00117 	ldw	ra,4(sp)
   2f168:	df000017 	ldw	fp,0(sp)
   2f16c:	dec00204 	addi	sp,sp,8
   2f170:	f800283a 	ret

0002f174 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   2f174:	defffd04 	addi	sp,sp,-12
   2f178:	df000215 	stw	fp,8(sp)
   2f17c:	df000204 	addi	fp,sp,8
   2f180:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   2f184:	e0bfff17 	ldw	r2,-4(fp)
   2f188:	10800217 	ldw	r2,8(r2)
   2f18c:	10d00034 	orhi	r3,r2,16384
   2f190:	e0bfff17 	ldw	r2,-4(fp)
   2f194:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   2f198:	e03ffe15 	stw	zero,-8(fp)
   2f19c:	00001d06 	br	2f214 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   2f1a0:	008000f4 	movhi	r2,3
   2f1a4:	1082a104 	addi	r2,r2,2692
   2f1a8:	e0fffe17 	ldw	r3,-8(fp)
   2f1ac:	18c00324 	muli	r3,r3,12
   2f1b0:	10c5883a 	add	r2,r2,r3
   2f1b4:	10c00017 	ldw	r3,0(r2)
   2f1b8:	e0bfff17 	ldw	r2,-4(fp)
   2f1bc:	10800017 	ldw	r2,0(r2)
   2f1c0:	1880111e 	bne	r3,r2,2f208 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   2f1c4:	008000f4 	movhi	r2,3
   2f1c8:	1082a104 	addi	r2,r2,2692
   2f1cc:	e0fffe17 	ldw	r3,-8(fp)
   2f1d0:	18c00324 	muli	r3,r3,12
   2f1d4:	10c5883a 	add	r2,r2,r3
   2f1d8:	10800204 	addi	r2,r2,8
   2f1dc:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   2f1e0:	1000090e 	bge	r2,zero,2f208 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   2f1e4:	e0bffe17 	ldw	r2,-8(fp)
   2f1e8:	10c00324 	muli	r3,r2,12
   2f1ec:	008000f4 	movhi	r2,3
   2f1f0:	1082a104 	addi	r2,r2,2692
   2f1f4:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   2f1f8:	e0bfff17 	ldw	r2,-4(fp)
   2f1fc:	18800226 	beq	r3,r2,2f208 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   2f200:	00bffcc4 	movi	r2,-13
   2f204:	00000806 	br	2f228 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   2f208:	e0bffe17 	ldw	r2,-8(fp)
   2f20c:	10800044 	addi	r2,r2,1
   2f210:	e0bffe15 	stw	r2,-8(fp)
   2f214:	d0a00a17 	ldw	r2,-32728(gp)
   2f218:	1007883a 	mov	r3,r2
   2f21c:	e0bffe17 	ldw	r2,-8(fp)
   2f220:	18bfdf2e 	bgeu	r3,r2,2f1a0 <__alt_data_end+0xfffef1a0>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   2f224:	0005883a 	mov	r2,zero
}
   2f228:	e037883a 	mov	sp,fp
   2f22c:	df000017 	ldw	fp,0(sp)
   2f230:	dec00104 	addi	sp,sp,4
   2f234:	f800283a 	ret

0002f238 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   2f238:	defff604 	addi	sp,sp,-40
   2f23c:	dfc00915 	stw	ra,36(sp)
   2f240:	df000815 	stw	fp,32(sp)
   2f244:	df000804 	addi	fp,sp,32
   2f248:	e13ffd15 	stw	r4,-12(fp)
   2f24c:	e17ffe15 	stw	r5,-8(fp)
   2f250:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   2f254:	00bfffc4 	movi	r2,-1
   2f258:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   2f25c:	00bffb44 	movi	r2,-19
   2f260:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   2f264:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   2f268:	d1600804 	addi	r5,gp,-32736
   2f26c:	e13ffd17 	ldw	r4,-12(fp)
   2f270:	002f5540 	call	2f554 <alt_find_dev>
   2f274:	e0bff815 	stw	r2,-32(fp)
   2f278:	e0bff817 	ldw	r2,-32(fp)
   2f27c:	1000051e 	bne	r2,zero,2f294 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   2f280:	e13ffd17 	ldw	r4,-12(fp)
   2f284:	002f5e40 	call	2f5e4 <alt_find_file>
   2f288:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   2f28c:	00800044 	movi	r2,1
   2f290:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   2f294:	e0bff817 	ldw	r2,-32(fp)
   2f298:	10002926 	beq	r2,zero,2f340 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   2f29c:	e13ff817 	ldw	r4,-32(fp)
   2f2a0:	002f6ec0 	call	2f6ec <alt_get_fd>
   2f2a4:	e0bff915 	stw	r2,-28(fp)
   2f2a8:	e0bff917 	ldw	r2,-28(fp)
   2f2ac:	1000030e 	bge	r2,zero,2f2bc <open+0x84>
    {
      status = index;
   2f2b0:	e0bff917 	ldw	r2,-28(fp)
   2f2b4:	e0bffa15 	stw	r2,-24(fp)
   2f2b8:	00002306 	br	2f348 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   2f2bc:	e0bff917 	ldw	r2,-28(fp)
   2f2c0:	10c00324 	muli	r3,r2,12
   2f2c4:	008000f4 	movhi	r2,3
   2f2c8:	1082a104 	addi	r2,r2,2692
   2f2cc:	1885883a 	add	r2,r3,r2
   2f2d0:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   2f2d4:	e0fffe17 	ldw	r3,-8(fp)
   2f2d8:	00900034 	movhi	r2,16384
   2f2dc:	10bfffc4 	addi	r2,r2,-1
   2f2e0:	1886703a 	and	r3,r3,r2
   2f2e4:	e0bffc17 	ldw	r2,-16(fp)
   2f2e8:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   2f2ec:	e0bffb17 	ldw	r2,-20(fp)
   2f2f0:	1000051e 	bne	r2,zero,2f308 <open+0xd0>
   2f2f4:	e13ffc17 	ldw	r4,-16(fp)
   2f2f8:	002f1740 	call	2f174 <alt_file_locked>
   2f2fc:	e0bffa15 	stw	r2,-24(fp)
   2f300:	e0bffa17 	ldw	r2,-24(fp)
   2f304:	10001016 	blt	r2,zero,2f348 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   2f308:	e0bff817 	ldw	r2,-32(fp)
   2f30c:	10800317 	ldw	r2,12(r2)
   2f310:	10000826 	beq	r2,zero,2f334 <open+0xfc>
   2f314:	e0bff817 	ldw	r2,-32(fp)
   2f318:	10800317 	ldw	r2,12(r2)
   2f31c:	e1ffff17 	ldw	r7,-4(fp)
   2f320:	e1bffe17 	ldw	r6,-8(fp)
   2f324:	e17ffd17 	ldw	r5,-12(fp)
   2f328:	e13ffc17 	ldw	r4,-16(fp)
   2f32c:	103ee83a 	callr	r2
   2f330:	00000106 	br	2f338 <open+0x100>
   2f334:	0005883a 	mov	r2,zero
   2f338:	e0bffa15 	stw	r2,-24(fp)
   2f33c:	00000206 	br	2f348 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   2f340:	00bffb44 	movi	r2,-19
   2f344:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   2f348:	e0bffa17 	ldw	r2,-24(fp)
   2f34c:	1000090e 	bge	r2,zero,2f374 <open+0x13c>
  {
    alt_release_fd (index);  
   2f350:	e13ff917 	ldw	r4,-28(fp)
   2f354:	002dde00 	call	2dde0 <alt_release_fd>
    ALT_ERRNO = -status;
   2f358:	002f1380 	call	2f138 <alt_get_errno>
   2f35c:	1007883a 	mov	r3,r2
   2f360:	e0bffa17 	ldw	r2,-24(fp)
   2f364:	0085c83a 	sub	r2,zero,r2
   2f368:	18800015 	stw	r2,0(r3)
    return -1;
   2f36c:	00bfffc4 	movi	r2,-1
   2f370:	00000106 	br	2f378 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   2f374:	e0bff917 	ldw	r2,-28(fp)
}
   2f378:	e037883a 	mov	sp,fp
   2f37c:	dfc00117 	ldw	ra,4(sp)
   2f380:	df000017 	ldw	fp,0(sp)
   2f384:	dec00204 	addi	sp,sp,8
   2f388:	f800283a 	ret

0002f38c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   2f38c:	defffa04 	addi	sp,sp,-24
   2f390:	df000515 	stw	fp,20(sp)
   2f394:	df000504 	addi	fp,sp,20
   2f398:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2f39c:	0005303a 	rdctl	r2,status
   2f3a0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2f3a4:	e0fffc17 	ldw	r3,-16(fp)
   2f3a8:	00bfff84 	movi	r2,-2
   2f3ac:	1884703a 	and	r2,r3,r2
   2f3b0:	1001703a 	wrctl	status,r2
  
  return context;
   2f3b4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   2f3b8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   2f3bc:	e0bfff17 	ldw	r2,-4(fp)
   2f3c0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   2f3c4:	e0bffd17 	ldw	r2,-12(fp)
   2f3c8:	10800017 	ldw	r2,0(r2)
   2f3cc:	e0fffd17 	ldw	r3,-12(fp)
   2f3d0:	18c00117 	ldw	r3,4(r3)
   2f3d4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   2f3d8:	e0bffd17 	ldw	r2,-12(fp)
   2f3dc:	10800117 	ldw	r2,4(r2)
   2f3e0:	e0fffd17 	ldw	r3,-12(fp)
   2f3e4:	18c00017 	ldw	r3,0(r3)
   2f3e8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   2f3ec:	e0bffd17 	ldw	r2,-12(fp)
   2f3f0:	e0fffd17 	ldw	r3,-12(fp)
   2f3f4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   2f3f8:	e0bffd17 	ldw	r2,-12(fp)
   2f3fc:	e0fffd17 	ldw	r3,-12(fp)
   2f400:	10c00015 	stw	r3,0(r2)
   2f404:	e0bffb17 	ldw	r2,-20(fp)
   2f408:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2f40c:	e0bffe17 	ldw	r2,-8(fp)
   2f410:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   2f414:	0001883a 	nop
   2f418:	e037883a 	mov	sp,fp
   2f41c:	df000017 	ldw	fp,0(sp)
   2f420:	dec00104 	addi	sp,sp,4
   2f424:	f800283a 	ret

0002f428 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   2f428:	defffb04 	addi	sp,sp,-20
   2f42c:	dfc00415 	stw	ra,16(sp)
   2f430:	df000315 	stw	fp,12(sp)
   2f434:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   2f438:	d0a00e17 	ldw	r2,-32712(gp)
   2f43c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   2f440:	d0a6db17 	ldw	r2,-25748(gp)
   2f444:	10800044 	addi	r2,r2,1
   2f448:	d0a6db15 	stw	r2,-25748(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   2f44c:	00002e06 	br	2f508 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   2f450:	e0bffd17 	ldw	r2,-12(fp)
   2f454:	10800017 	ldw	r2,0(r2)
   2f458:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   2f45c:	e0bffd17 	ldw	r2,-12(fp)
   2f460:	10800403 	ldbu	r2,16(r2)
   2f464:	10803fcc 	andi	r2,r2,255
   2f468:	10000426 	beq	r2,zero,2f47c <alt_tick+0x54>
   2f46c:	d0a6db17 	ldw	r2,-25748(gp)
   2f470:	1000021e 	bne	r2,zero,2f47c <alt_tick+0x54>
    {
      alarm->rollover = 0;
   2f474:	e0bffd17 	ldw	r2,-12(fp)
   2f478:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   2f47c:	e0bffd17 	ldw	r2,-12(fp)
   2f480:	10800217 	ldw	r2,8(r2)
   2f484:	d0e6db17 	ldw	r3,-25748(gp)
   2f488:	18801d36 	bltu	r3,r2,2f500 <alt_tick+0xd8>
   2f48c:	e0bffd17 	ldw	r2,-12(fp)
   2f490:	10800403 	ldbu	r2,16(r2)
   2f494:	10803fcc 	andi	r2,r2,255
   2f498:	1000191e 	bne	r2,zero,2f500 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   2f49c:	e0bffd17 	ldw	r2,-12(fp)
   2f4a0:	10800317 	ldw	r2,12(r2)
   2f4a4:	e0fffd17 	ldw	r3,-12(fp)
   2f4a8:	18c00517 	ldw	r3,20(r3)
   2f4ac:	1809883a 	mov	r4,r3
   2f4b0:	103ee83a 	callr	r2
   2f4b4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   2f4b8:	e0bfff17 	ldw	r2,-4(fp)
   2f4bc:	1000031e 	bne	r2,zero,2f4cc <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   2f4c0:	e13ffd17 	ldw	r4,-12(fp)
   2f4c4:	002f38c0 	call	2f38c <alt_alarm_stop>
   2f4c8:	00000d06 	br	2f500 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   2f4cc:	e0bffd17 	ldw	r2,-12(fp)
   2f4d0:	10c00217 	ldw	r3,8(r2)
   2f4d4:	e0bfff17 	ldw	r2,-4(fp)
   2f4d8:	1887883a 	add	r3,r3,r2
   2f4dc:	e0bffd17 	ldw	r2,-12(fp)
   2f4e0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   2f4e4:	e0bffd17 	ldw	r2,-12(fp)
   2f4e8:	10c00217 	ldw	r3,8(r2)
   2f4ec:	d0a6db17 	ldw	r2,-25748(gp)
   2f4f0:	1880032e 	bgeu	r3,r2,2f500 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   2f4f4:	e0bffd17 	ldw	r2,-12(fp)
   2f4f8:	00c00044 	movi	r3,1
   2f4fc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   2f500:	e0bffe17 	ldw	r2,-8(fp)
   2f504:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   2f508:	e0fffd17 	ldw	r3,-12(fp)
   2f50c:	d0a00e04 	addi	r2,gp,-32712
   2f510:	18bfcf1e 	bne	r3,r2,2f450 <__alt_data_end+0xfffef450>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   2f514:	0001883a 	nop
}
   2f518:	0001883a 	nop
   2f51c:	e037883a 	mov	sp,fp
   2f520:	dfc00117 	ldw	ra,4(sp)
   2f524:	df000017 	ldw	fp,0(sp)
   2f528:	dec00204 	addi	sp,sp,8
   2f52c:	f800283a 	ret

0002f530 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   2f530:	deffff04 	addi	sp,sp,-4
   2f534:	df000015 	stw	fp,0(sp)
   2f538:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   2f53c:	000170fa 	wrctl	ienable,zero
}
   2f540:	0001883a 	nop
   2f544:	e037883a 	mov	sp,fp
   2f548:	df000017 	ldw	fp,0(sp)
   2f54c:	dec00104 	addi	sp,sp,4
   2f550:	f800283a 	ret

0002f554 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   2f554:	defffa04 	addi	sp,sp,-24
   2f558:	dfc00515 	stw	ra,20(sp)
   2f55c:	df000415 	stw	fp,16(sp)
   2f560:	df000404 	addi	fp,sp,16
   2f564:	e13ffe15 	stw	r4,-8(fp)
   2f568:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   2f56c:	e0bfff17 	ldw	r2,-4(fp)
   2f570:	10800017 	ldw	r2,0(r2)
   2f574:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   2f578:	e13ffe17 	ldw	r4,-8(fp)
   2f57c:	00275340 	call	27534 <strlen>
   2f580:	10800044 	addi	r2,r2,1
   2f584:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   2f588:	00000d06 	br	2f5c0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   2f58c:	e0bffc17 	ldw	r2,-16(fp)
   2f590:	10800217 	ldw	r2,8(r2)
   2f594:	e0fffd17 	ldw	r3,-12(fp)
   2f598:	180d883a 	mov	r6,r3
   2f59c:	e17ffe17 	ldw	r5,-8(fp)
   2f5a0:	1009883a 	mov	r4,r2
   2f5a4:	002f7dc0 	call	2f7dc <memcmp>
   2f5a8:	1000021e 	bne	r2,zero,2f5b4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   2f5ac:	e0bffc17 	ldw	r2,-16(fp)
   2f5b0:	00000706 	br	2f5d0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   2f5b4:	e0bffc17 	ldw	r2,-16(fp)
   2f5b8:	10800017 	ldw	r2,0(r2)
   2f5bc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   2f5c0:	e0fffc17 	ldw	r3,-16(fp)
   2f5c4:	e0bfff17 	ldw	r2,-4(fp)
   2f5c8:	18bff01e 	bne	r3,r2,2f58c <__alt_data_end+0xfffef58c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   2f5cc:	0005883a 	mov	r2,zero
}
   2f5d0:	e037883a 	mov	sp,fp
   2f5d4:	dfc00117 	ldw	ra,4(sp)
   2f5d8:	df000017 	ldw	fp,0(sp)
   2f5dc:	dec00204 	addi	sp,sp,8
   2f5e0:	f800283a 	ret

0002f5e4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   2f5e4:	defffb04 	addi	sp,sp,-20
   2f5e8:	dfc00415 	stw	ra,16(sp)
   2f5ec:	df000315 	stw	fp,12(sp)
   2f5f0:	df000304 	addi	fp,sp,12
   2f5f4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   2f5f8:	d0a00617 	ldw	r2,-32744(gp)
   2f5fc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   2f600:	00003106 	br	2f6c8 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   2f604:	e0bffd17 	ldw	r2,-12(fp)
   2f608:	10800217 	ldw	r2,8(r2)
   2f60c:	1009883a 	mov	r4,r2
   2f610:	00275340 	call	27534 <strlen>
   2f614:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   2f618:	e0bffd17 	ldw	r2,-12(fp)
   2f61c:	10c00217 	ldw	r3,8(r2)
   2f620:	e0bffe17 	ldw	r2,-8(fp)
   2f624:	10bfffc4 	addi	r2,r2,-1
   2f628:	1885883a 	add	r2,r3,r2
   2f62c:	10800003 	ldbu	r2,0(r2)
   2f630:	10803fcc 	andi	r2,r2,255
   2f634:	1080201c 	xori	r2,r2,128
   2f638:	10bfe004 	addi	r2,r2,-128
   2f63c:	10800bd8 	cmpnei	r2,r2,47
   2f640:	1000031e 	bne	r2,zero,2f650 <alt_find_file+0x6c>
    {
      len -= 1;
   2f644:	e0bffe17 	ldw	r2,-8(fp)
   2f648:	10bfffc4 	addi	r2,r2,-1
   2f64c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   2f650:	e0bffe17 	ldw	r2,-8(fp)
   2f654:	e0ffff17 	ldw	r3,-4(fp)
   2f658:	1885883a 	add	r2,r3,r2
   2f65c:	10800003 	ldbu	r2,0(r2)
   2f660:	10803fcc 	andi	r2,r2,255
   2f664:	1080201c 	xori	r2,r2,128
   2f668:	10bfe004 	addi	r2,r2,-128
   2f66c:	10800be0 	cmpeqi	r2,r2,47
   2f670:	1000081e 	bne	r2,zero,2f694 <alt_find_file+0xb0>
   2f674:	e0bffe17 	ldw	r2,-8(fp)
   2f678:	e0ffff17 	ldw	r3,-4(fp)
   2f67c:	1885883a 	add	r2,r3,r2
   2f680:	10800003 	ldbu	r2,0(r2)
   2f684:	10803fcc 	andi	r2,r2,255
   2f688:	1080201c 	xori	r2,r2,128
   2f68c:	10bfe004 	addi	r2,r2,-128
   2f690:	10000a1e 	bne	r2,zero,2f6bc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   2f694:	e0bffd17 	ldw	r2,-12(fp)
   2f698:	10800217 	ldw	r2,8(r2)
   2f69c:	e0fffe17 	ldw	r3,-8(fp)
   2f6a0:	180d883a 	mov	r6,r3
   2f6a4:	e17fff17 	ldw	r5,-4(fp)
   2f6a8:	1009883a 	mov	r4,r2
   2f6ac:	002f7dc0 	call	2f7dc <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   2f6b0:	1000021e 	bne	r2,zero,2f6bc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   2f6b4:	e0bffd17 	ldw	r2,-12(fp)
   2f6b8:	00000706 	br	2f6d8 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   2f6bc:	e0bffd17 	ldw	r2,-12(fp)
   2f6c0:	10800017 	ldw	r2,0(r2)
   2f6c4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   2f6c8:	e0fffd17 	ldw	r3,-12(fp)
   2f6cc:	d0a00604 	addi	r2,gp,-32744
   2f6d0:	18bfcc1e 	bne	r3,r2,2f604 <__alt_data_end+0xfffef604>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   2f6d4:	0005883a 	mov	r2,zero
}
   2f6d8:	e037883a 	mov	sp,fp
   2f6dc:	dfc00117 	ldw	ra,4(sp)
   2f6e0:	df000017 	ldw	fp,0(sp)
   2f6e4:	dec00204 	addi	sp,sp,8
   2f6e8:	f800283a 	ret

0002f6ec <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   2f6ec:	defffc04 	addi	sp,sp,-16
   2f6f0:	df000315 	stw	fp,12(sp)
   2f6f4:	df000304 	addi	fp,sp,12
   2f6f8:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   2f6fc:	00bffa04 	movi	r2,-24
   2f700:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   2f704:	e03ffd15 	stw	zero,-12(fp)
   2f708:	00001906 	br	2f770 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   2f70c:	008000f4 	movhi	r2,3
   2f710:	1082a104 	addi	r2,r2,2692
   2f714:	e0fffd17 	ldw	r3,-12(fp)
   2f718:	18c00324 	muli	r3,r3,12
   2f71c:	10c5883a 	add	r2,r2,r3
   2f720:	10800017 	ldw	r2,0(r2)
   2f724:	10000f1e 	bne	r2,zero,2f764 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   2f728:	008000f4 	movhi	r2,3
   2f72c:	1082a104 	addi	r2,r2,2692
   2f730:	e0fffd17 	ldw	r3,-12(fp)
   2f734:	18c00324 	muli	r3,r3,12
   2f738:	10c5883a 	add	r2,r2,r3
   2f73c:	e0ffff17 	ldw	r3,-4(fp)
   2f740:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   2f744:	d0e00a17 	ldw	r3,-32728(gp)
   2f748:	e0bffd17 	ldw	r2,-12(fp)
   2f74c:	1880020e 	bge	r3,r2,2f758 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   2f750:	e0bffd17 	ldw	r2,-12(fp)
   2f754:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   2f758:	e0bffd17 	ldw	r2,-12(fp)
   2f75c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   2f760:	00000606 	br	2f77c <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   2f764:	e0bffd17 	ldw	r2,-12(fp)
   2f768:	10800044 	addi	r2,r2,1
   2f76c:	e0bffd15 	stw	r2,-12(fp)
   2f770:	e0bffd17 	ldw	r2,-12(fp)
   2f774:	10800810 	cmplti	r2,r2,32
   2f778:	103fe41e 	bne	r2,zero,2f70c <__alt_data_end+0xfffef70c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   2f77c:	e0bffe17 	ldw	r2,-8(fp)
}
   2f780:	e037883a 	mov	sp,fp
   2f784:	df000017 	ldw	fp,0(sp)
   2f788:	dec00104 	addi	sp,sp,4
   2f78c:	f800283a 	ret

0002f790 <atexit>:
   2f790:	200b883a 	mov	r5,r4
   2f794:	000f883a 	mov	r7,zero
   2f798:	000d883a 	mov	r6,zero
   2f79c:	0009883a 	mov	r4,zero
   2f7a0:	002f9c01 	jmpi	2f9c0 <__register_exitproc>

0002f7a4 <exit>:
   2f7a4:	defffe04 	addi	sp,sp,-8
   2f7a8:	000b883a 	mov	r5,zero
   2f7ac:	dc000015 	stw	r16,0(sp)
   2f7b0:	dfc00115 	stw	ra,4(sp)
   2f7b4:	2021883a 	mov	r16,r4
   2f7b8:	002fad80 	call	2fad8 <__call_exitprocs>
   2f7bc:	008000f4 	movhi	r2,3
   2f7c0:	10871904 	addi	r2,r2,7268
   2f7c4:	11000017 	ldw	r4,0(r2)
   2f7c8:	20800f17 	ldw	r2,60(r4)
   2f7cc:	10000126 	beq	r2,zero,2f7d4 <exit+0x30>
   2f7d0:	103ee83a 	callr	r2
   2f7d4:	8009883a 	mov	r4,r16
   2f7d8:	002fc580 	call	2fc58 <_exit>

0002f7dc <memcmp>:
   2f7dc:	01c000c4 	movi	r7,3
   2f7e0:	3980192e 	bgeu	r7,r6,2f848 <memcmp+0x6c>
   2f7e4:	2144b03a 	or	r2,r4,r5
   2f7e8:	11c4703a 	and	r2,r2,r7
   2f7ec:	10000f26 	beq	r2,zero,2f82c <memcmp+0x50>
   2f7f0:	20800003 	ldbu	r2,0(r4)
   2f7f4:	28c00003 	ldbu	r3,0(r5)
   2f7f8:	10c0151e 	bne	r2,r3,2f850 <memcmp+0x74>
   2f7fc:	31bfff84 	addi	r6,r6,-2
   2f800:	01ffffc4 	movi	r7,-1
   2f804:	00000406 	br	2f818 <memcmp+0x3c>
   2f808:	20800003 	ldbu	r2,0(r4)
   2f80c:	28c00003 	ldbu	r3,0(r5)
   2f810:	31bfffc4 	addi	r6,r6,-1
   2f814:	10c00e1e 	bne	r2,r3,2f850 <memcmp+0x74>
   2f818:	21000044 	addi	r4,r4,1
   2f81c:	29400044 	addi	r5,r5,1
   2f820:	31fff91e 	bne	r6,r7,2f808 <__alt_data_end+0xfffef808>
   2f824:	0005883a 	mov	r2,zero
   2f828:	f800283a 	ret
   2f82c:	20c00017 	ldw	r3,0(r4)
   2f830:	28800017 	ldw	r2,0(r5)
   2f834:	18bfee1e 	bne	r3,r2,2f7f0 <__alt_data_end+0xfffef7f0>
   2f838:	31bfff04 	addi	r6,r6,-4
   2f83c:	21000104 	addi	r4,r4,4
   2f840:	29400104 	addi	r5,r5,4
   2f844:	39bff936 	bltu	r7,r6,2f82c <__alt_data_end+0xfffef82c>
   2f848:	303fe91e 	bne	r6,zero,2f7f0 <__alt_data_end+0xfffef7f0>
   2f84c:	003ff506 	br	2f824 <__alt_data_end+0xfffef824>
   2f850:	10c5c83a 	sub	r2,r2,r3
   2f854:	f800283a 	ret

0002f858 <_putc_r>:
   2f858:	defffc04 	addi	sp,sp,-16
   2f85c:	dc000215 	stw	r16,8(sp)
   2f860:	dfc00315 	stw	ra,12(sp)
   2f864:	2021883a 	mov	r16,r4
   2f868:	20000226 	beq	r4,zero,2f874 <_putc_r+0x1c>
   2f86c:	20800e17 	ldw	r2,56(r4)
   2f870:	10001b26 	beq	r2,zero,2f8e0 <_putc_r+0x88>
   2f874:	30800217 	ldw	r2,8(r6)
   2f878:	10bfffc4 	addi	r2,r2,-1
   2f87c:	30800215 	stw	r2,8(r6)
   2f880:	10000a16 	blt	r2,zero,2f8ac <_putc_r+0x54>
   2f884:	30800017 	ldw	r2,0(r6)
   2f888:	11400005 	stb	r5,0(r2)
   2f88c:	30800017 	ldw	r2,0(r6)
   2f890:	10c00044 	addi	r3,r2,1
   2f894:	30c00015 	stw	r3,0(r6)
   2f898:	10800003 	ldbu	r2,0(r2)
   2f89c:	dfc00317 	ldw	ra,12(sp)
   2f8a0:	dc000217 	ldw	r16,8(sp)
   2f8a4:	dec00404 	addi	sp,sp,16
   2f8a8:	f800283a 	ret
   2f8ac:	30c00617 	ldw	r3,24(r6)
   2f8b0:	10c00616 	blt	r2,r3,2f8cc <_putc_r+0x74>
   2f8b4:	30800017 	ldw	r2,0(r6)
   2f8b8:	00c00284 	movi	r3,10
   2f8bc:	11400005 	stb	r5,0(r2)
   2f8c0:	30800017 	ldw	r2,0(r6)
   2f8c4:	11400003 	ldbu	r5,0(r2)
   2f8c8:	28fff11e 	bne	r5,r3,2f890 <__alt_data_end+0xfffef890>
   2f8cc:	8009883a 	mov	r4,r16
   2f8d0:	dfc00317 	ldw	ra,12(sp)
   2f8d4:	dc000217 	ldw	r16,8(sp)
   2f8d8:	dec00404 	addi	sp,sp,16
   2f8dc:	0029d841 	jmpi	29d84 <__swbuf_r>
   2f8e0:	d9400015 	stw	r5,0(sp)
   2f8e4:	d9800115 	stw	r6,4(sp)
   2f8e8:	0024e540 	call	24e54 <__sinit>
   2f8ec:	d9800117 	ldw	r6,4(sp)
   2f8f0:	d9400017 	ldw	r5,0(sp)
   2f8f4:	003fdf06 	br	2f874 <__alt_data_end+0xfffef874>

0002f8f8 <putc>:
   2f8f8:	008000f4 	movhi	r2,3
   2f8fc:	defffc04 	addi	sp,sp,-16
   2f900:	10871a04 	addi	r2,r2,7272
   2f904:	dc000115 	stw	r16,4(sp)
   2f908:	14000017 	ldw	r16,0(r2)
   2f90c:	dc400215 	stw	r17,8(sp)
   2f910:	dfc00315 	stw	ra,12(sp)
   2f914:	2023883a 	mov	r17,r4
   2f918:	80000226 	beq	r16,zero,2f924 <putc+0x2c>
   2f91c:	80800e17 	ldw	r2,56(r16)
   2f920:	10001a26 	beq	r2,zero,2f98c <putc+0x94>
   2f924:	28800217 	ldw	r2,8(r5)
   2f928:	10bfffc4 	addi	r2,r2,-1
   2f92c:	28800215 	stw	r2,8(r5)
   2f930:	10000b16 	blt	r2,zero,2f960 <putc+0x68>
   2f934:	28800017 	ldw	r2,0(r5)
   2f938:	14400005 	stb	r17,0(r2)
   2f93c:	28800017 	ldw	r2,0(r5)
   2f940:	10c00044 	addi	r3,r2,1
   2f944:	28c00015 	stw	r3,0(r5)
   2f948:	10800003 	ldbu	r2,0(r2)
   2f94c:	dfc00317 	ldw	ra,12(sp)
   2f950:	dc400217 	ldw	r17,8(sp)
   2f954:	dc000117 	ldw	r16,4(sp)
   2f958:	dec00404 	addi	sp,sp,16
   2f95c:	f800283a 	ret
   2f960:	28c00617 	ldw	r3,24(r5)
   2f964:	10c00e16 	blt	r2,r3,2f9a0 <putc+0xa8>
   2f968:	28800017 	ldw	r2,0(r5)
   2f96c:	01000284 	movi	r4,10
   2f970:	14400005 	stb	r17,0(r2)
   2f974:	28800017 	ldw	r2,0(r5)
   2f978:	10c00003 	ldbu	r3,0(r2)
   2f97c:	193ff01e 	bne	r3,r4,2f940 <__alt_data_end+0xfffef940>
   2f980:	280d883a 	mov	r6,r5
   2f984:	180b883a 	mov	r5,r3
   2f988:	00000706 	br	2f9a8 <putc+0xb0>
   2f98c:	8009883a 	mov	r4,r16
   2f990:	d9400015 	stw	r5,0(sp)
   2f994:	0024e540 	call	24e54 <__sinit>
   2f998:	d9400017 	ldw	r5,0(sp)
   2f99c:	003fe106 	br	2f924 <__alt_data_end+0xfffef924>
   2f9a0:	280d883a 	mov	r6,r5
   2f9a4:	880b883a 	mov	r5,r17
   2f9a8:	8009883a 	mov	r4,r16
   2f9ac:	dfc00317 	ldw	ra,12(sp)
   2f9b0:	dc400217 	ldw	r17,8(sp)
   2f9b4:	dc000117 	ldw	r16,4(sp)
   2f9b8:	dec00404 	addi	sp,sp,16
   2f9bc:	0029d841 	jmpi	29d84 <__swbuf_r>

0002f9c0 <__register_exitproc>:
   2f9c0:	defffa04 	addi	sp,sp,-24
   2f9c4:	dc000315 	stw	r16,12(sp)
   2f9c8:	040000f4 	movhi	r16,3
   2f9cc:	84071904 	addi	r16,r16,7268
   2f9d0:	80c00017 	ldw	r3,0(r16)
   2f9d4:	dc400415 	stw	r17,16(sp)
   2f9d8:	dfc00515 	stw	ra,20(sp)
   2f9dc:	18805217 	ldw	r2,328(r3)
   2f9e0:	2023883a 	mov	r17,r4
   2f9e4:	10003726 	beq	r2,zero,2fac4 <__register_exitproc+0x104>
   2f9e8:	10c00117 	ldw	r3,4(r2)
   2f9ec:	010007c4 	movi	r4,31
   2f9f0:	20c00e16 	blt	r4,r3,2fa2c <__register_exitproc+0x6c>
   2f9f4:	1a000044 	addi	r8,r3,1
   2f9f8:	8800221e 	bne	r17,zero,2fa84 <__register_exitproc+0xc4>
   2f9fc:	18c00084 	addi	r3,r3,2
   2fa00:	18c7883a 	add	r3,r3,r3
   2fa04:	18c7883a 	add	r3,r3,r3
   2fa08:	12000115 	stw	r8,4(r2)
   2fa0c:	10c7883a 	add	r3,r2,r3
   2fa10:	19400015 	stw	r5,0(r3)
   2fa14:	0005883a 	mov	r2,zero
   2fa18:	dfc00517 	ldw	ra,20(sp)
   2fa1c:	dc400417 	ldw	r17,16(sp)
   2fa20:	dc000317 	ldw	r16,12(sp)
   2fa24:	dec00604 	addi	sp,sp,24
   2fa28:	f800283a 	ret
   2fa2c:	00800034 	movhi	r2,0
   2fa30:	10800004 	addi	r2,r2,0
   2fa34:	10002626 	beq	r2,zero,2fad0 <__register_exitproc+0x110>
   2fa38:	01006404 	movi	r4,400
   2fa3c:	d9400015 	stw	r5,0(sp)
   2fa40:	d9800115 	stw	r6,4(sp)
   2fa44:	d9c00215 	stw	r7,8(sp)
   2fa48:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>
   2fa4c:	d9400017 	ldw	r5,0(sp)
   2fa50:	d9800117 	ldw	r6,4(sp)
   2fa54:	d9c00217 	ldw	r7,8(sp)
   2fa58:	10001d26 	beq	r2,zero,2fad0 <__register_exitproc+0x110>
   2fa5c:	81000017 	ldw	r4,0(r16)
   2fa60:	10000115 	stw	zero,4(r2)
   2fa64:	02000044 	movi	r8,1
   2fa68:	22405217 	ldw	r9,328(r4)
   2fa6c:	0007883a 	mov	r3,zero
   2fa70:	12400015 	stw	r9,0(r2)
   2fa74:	20805215 	stw	r2,328(r4)
   2fa78:	10006215 	stw	zero,392(r2)
   2fa7c:	10006315 	stw	zero,396(r2)
   2fa80:	883fde26 	beq	r17,zero,2f9fc <__alt_data_end+0xfffef9fc>
   2fa84:	18c9883a 	add	r4,r3,r3
   2fa88:	2109883a 	add	r4,r4,r4
   2fa8c:	1109883a 	add	r4,r2,r4
   2fa90:	21802215 	stw	r6,136(r4)
   2fa94:	01800044 	movi	r6,1
   2fa98:	12406217 	ldw	r9,392(r2)
   2fa9c:	30cc983a 	sll	r6,r6,r3
   2faa0:	4992b03a 	or	r9,r9,r6
   2faa4:	12406215 	stw	r9,392(r2)
   2faa8:	21c04215 	stw	r7,264(r4)
   2faac:	01000084 	movi	r4,2
   2fab0:	893fd21e 	bne	r17,r4,2f9fc <__alt_data_end+0xfffef9fc>
   2fab4:	11006317 	ldw	r4,396(r2)
   2fab8:	218cb03a 	or	r6,r4,r6
   2fabc:	11806315 	stw	r6,396(r2)
   2fac0:	003fce06 	br	2f9fc <__alt_data_end+0xfffef9fc>
   2fac4:	18805304 	addi	r2,r3,332
   2fac8:	18805215 	stw	r2,328(r3)
   2facc:	003fc606 	br	2f9e8 <__alt_data_end+0xfffef9e8>
   2fad0:	00bfffc4 	movi	r2,-1
   2fad4:	003fd006 	br	2fa18 <__alt_data_end+0xfffefa18>

0002fad8 <__call_exitprocs>:
   2fad8:	defff504 	addi	sp,sp,-44
   2fadc:	df000915 	stw	fp,36(sp)
   2fae0:	dd400615 	stw	r21,24(sp)
   2fae4:	dc800315 	stw	r18,12(sp)
   2fae8:	dfc00a15 	stw	ra,40(sp)
   2faec:	ddc00815 	stw	r23,32(sp)
   2faf0:	dd800715 	stw	r22,28(sp)
   2faf4:	dd000515 	stw	r20,20(sp)
   2faf8:	dcc00415 	stw	r19,16(sp)
   2fafc:	dc400215 	stw	r17,8(sp)
   2fb00:	dc000115 	stw	r16,4(sp)
   2fb04:	d9000015 	stw	r4,0(sp)
   2fb08:	2839883a 	mov	fp,r5
   2fb0c:	04800044 	movi	r18,1
   2fb10:	057fffc4 	movi	r21,-1
   2fb14:	008000f4 	movhi	r2,3
   2fb18:	10871904 	addi	r2,r2,7268
   2fb1c:	12000017 	ldw	r8,0(r2)
   2fb20:	45005217 	ldw	r20,328(r8)
   2fb24:	44c05204 	addi	r19,r8,328
   2fb28:	a0001c26 	beq	r20,zero,2fb9c <__call_exitprocs+0xc4>
   2fb2c:	a0800117 	ldw	r2,4(r20)
   2fb30:	15ffffc4 	addi	r23,r2,-1
   2fb34:	b8000d16 	blt	r23,zero,2fb6c <__call_exitprocs+0x94>
   2fb38:	14000044 	addi	r16,r2,1
   2fb3c:	8421883a 	add	r16,r16,r16
   2fb40:	8421883a 	add	r16,r16,r16
   2fb44:	84402004 	addi	r17,r16,128
   2fb48:	a463883a 	add	r17,r20,r17
   2fb4c:	a421883a 	add	r16,r20,r16
   2fb50:	e0001e26 	beq	fp,zero,2fbcc <__call_exitprocs+0xf4>
   2fb54:	80804017 	ldw	r2,256(r16)
   2fb58:	e0801c26 	beq	fp,r2,2fbcc <__call_exitprocs+0xf4>
   2fb5c:	bdffffc4 	addi	r23,r23,-1
   2fb60:	843fff04 	addi	r16,r16,-4
   2fb64:	8c7fff04 	addi	r17,r17,-4
   2fb68:	bd7ff91e 	bne	r23,r21,2fb50 <__alt_data_end+0xfffefb50>
   2fb6c:	00800034 	movhi	r2,0
   2fb70:	10800004 	addi	r2,r2,0
   2fb74:	10000926 	beq	r2,zero,2fb9c <__call_exitprocs+0xc4>
   2fb78:	a0800117 	ldw	r2,4(r20)
   2fb7c:	1000301e 	bne	r2,zero,2fc40 <__call_exitprocs+0x168>
   2fb80:	a0800017 	ldw	r2,0(r20)
   2fb84:	10003226 	beq	r2,zero,2fc50 <__call_exitprocs+0x178>
   2fb88:	a009883a 	mov	r4,r20
   2fb8c:	98800015 	stw	r2,0(r19)
   2fb90:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>
   2fb94:	9d000017 	ldw	r20,0(r19)
   2fb98:	a03fe41e 	bne	r20,zero,2fb2c <__alt_data_end+0xfffefb2c>
   2fb9c:	dfc00a17 	ldw	ra,40(sp)
   2fba0:	df000917 	ldw	fp,36(sp)
   2fba4:	ddc00817 	ldw	r23,32(sp)
   2fba8:	dd800717 	ldw	r22,28(sp)
   2fbac:	dd400617 	ldw	r21,24(sp)
   2fbb0:	dd000517 	ldw	r20,20(sp)
   2fbb4:	dcc00417 	ldw	r19,16(sp)
   2fbb8:	dc800317 	ldw	r18,12(sp)
   2fbbc:	dc400217 	ldw	r17,8(sp)
   2fbc0:	dc000117 	ldw	r16,4(sp)
   2fbc4:	dec00b04 	addi	sp,sp,44
   2fbc8:	f800283a 	ret
   2fbcc:	a0800117 	ldw	r2,4(r20)
   2fbd0:	80c00017 	ldw	r3,0(r16)
   2fbd4:	10bfffc4 	addi	r2,r2,-1
   2fbd8:	15c01426 	beq	r2,r23,2fc2c <__call_exitprocs+0x154>
   2fbdc:	80000015 	stw	zero,0(r16)
   2fbe0:	183fde26 	beq	r3,zero,2fb5c <__alt_data_end+0xfffefb5c>
   2fbe4:	95c8983a 	sll	r4,r18,r23
   2fbe8:	a0806217 	ldw	r2,392(r20)
   2fbec:	a5800117 	ldw	r22,4(r20)
   2fbf0:	2084703a 	and	r2,r4,r2
   2fbf4:	10000b26 	beq	r2,zero,2fc24 <__call_exitprocs+0x14c>
   2fbf8:	a0806317 	ldw	r2,396(r20)
   2fbfc:	2088703a 	and	r4,r4,r2
   2fc00:	20000c1e 	bne	r4,zero,2fc34 <__call_exitprocs+0x15c>
   2fc04:	89400017 	ldw	r5,0(r17)
   2fc08:	d9000017 	ldw	r4,0(sp)
   2fc0c:	183ee83a 	callr	r3
   2fc10:	a0800117 	ldw	r2,4(r20)
   2fc14:	15bfbf1e 	bne	r2,r22,2fb14 <__alt_data_end+0xfffefb14>
   2fc18:	98800017 	ldw	r2,0(r19)
   2fc1c:	153fcf26 	beq	r2,r20,2fb5c <__alt_data_end+0xfffefb5c>
   2fc20:	003fbc06 	br	2fb14 <__alt_data_end+0xfffefb14>
   2fc24:	183ee83a 	callr	r3
   2fc28:	003ff906 	br	2fc10 <__alt_data_end+0xfffefc10>
   2fc2c:	a5c00115 	stw	r23,4(r20)
   2fc30:	003feb06 	br	2fbe0 <__alt_data_end+0xfffefbe0>
   2fc34:	89000017 	ldw	r4,0(r17)
   2fc38:	183ee83a 	callr	r3
   2fc3c:	003ff406 	br	2fc10 <__alt_data_end+0xfffefc10>
   2fc40:	a0800017 	ldw	r2,0(r20)
   2fc44:	a027883a 	mov	r19,r20
   2fc48:	1029883a 	mov	r20,r2
   2fc4c:	003fb606 	br	2fb28 <__alt_data_end+0xfffefb28>
   2fc50:	0005883a 	mov	r2,zero
   2fc54:	003ffb06 	br	2fc44 <__alt_data_end+0xfffefc44>

0002fc58 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   2fc58:	defffd04 	addi	sp,sp,-12
   2fc5c:	df000215 	stw	fp,8(sp)
   2fc60:	df000204 	addi	fp,sp,8
   2fc64:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   2fc68:	0001883a 	nop
   2fc6c:	e0bfff17 	ldw	r2,-4(fp)
   2fc70:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   2fc74:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   2fc78:	10000226 	beq	r2,zero,2fc84 <_exit+0x2c>
    ALT_SIM_FAIL();
   2fc7c:	002af070 	cmpltui	zero,zero,43969
   2fc80:	00000106 	br	2fc88 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   2fc84:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   2fc88:	003fff06 	br	2fc88 <__alt_data_end+0xfffefc88>

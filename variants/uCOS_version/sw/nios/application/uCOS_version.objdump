
uCOS_version.elf:     file format elf32-littlenios2
uCOS_version.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04000244

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x00018c28 memsz 0x00018c28 flags r-x
    LOAD off    0x00019c48 vaddr 0x04018c48 paddr 0x0401a7bc align 2**12
         filesz 0x00001b74 memsz 0x00001b74 flags rw-
    LOAD off    0x0001c330 vaddr 0x0401c330 paddr 0x0401c330 align 2**12
         filesz 0x00000000 memsz 0x0000b42c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04000000  04000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00018480  04000244  04000244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000584  040186c4  040186c4  000196c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b74  04018c48  0401a7bc  00019c48  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000b42c  0401c330  0401c330  0001c330  2**2
                  ALLOC, SMALL_DATA
  6 .new_sdram_controller_0 00000000  0402775c  0402775c  0001b7bc  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  08020000  08020000  0001b7bc  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0001b7bc  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001038  00000000  00000000  0001b7e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002d9af  00000000  00000000  0001c818  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000ad06  00000000  00000000  0004a1c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000dd76  00000000  00000000  00054ecd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000333c  00000000  00000000  00062c44  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000049f2  00000000  00000000  00065f80  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00017868  00000000  00000000  0006a972  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  000821dc  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000018c0  00000000  00000000  00082210  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000006  00000000  00000000  0008872a  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00088730  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0008873c  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0008873d  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  0008873e  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  00088749  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  00088754  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000a  00000000  00000000  0008875f  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000028  00000000  00000000  00088769  2**0
                  CONTENTS, READONLY
 27 .jdi          0000597d  00000000  00000000  00088791  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     0006e018  00000000  00000000  0008e10e  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
04000244 l    d  .text	00000000 .text
040186c4 l    d  .rodata	00000000 .rodata
04018c48 l    d  .rwdata	00000000 .rwdata
0401c330 l    d  .bss	00000000 .bss
0402775c l    d  .new_sdram_controller_0	00000000 .new_sdram_controller_0
08020000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/RTES/variants/uCOS_version/sw/nios/uCOS_version_bsp//obj/HAL/src/crt0.o
0400028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_ucosii.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0401886a l     O .rodata	00000010 zeroes.4404
04002df8 l     F .text	000000bc __sbprintf
0401887a l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
04003008 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
04004b38 l     F .text	00000008 __fp_unlock
04004b4c l     F .text	0000019c __sinit.part.1
04004ce8 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
04018c48 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
0401908c l     O .rwdata	00000020 lc_ctype_charset
0401906c l     O .rwdata	00000020 lc_message_charset
040190ac l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
040188ac l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
040080e4 l     F .text	000000fc __sprint_r.part.0
040189e0 l     O .rodata	00000010 blanks.4348
040189d0 l     O .rodata	00000010 zeroes.4349
04009670 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0400d32c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0400d438 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0400d464 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0400d7f0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0400d8d0 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0400d9bc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_read.c
0400db88 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0401a734 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0400ddd4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_env_lock.c
0401a738 l     O .rwdata	00000004 lockid
0401c37c l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
0401a73c l     O .rwdata	00000004 lockid
0401c384 l     O .bss	00000004 locks
00000000 l    df *ABS*	00000000 os_core.c
0400f804 l     F .text	00000048 OS_InitMisc
0400f84c l     F .text	0000006c OS_InitRdyList
0400f9b8 l     F .text	000000e4 OS_InitTCBList
0400f724 l     F .text	000000e0 OS_InitEventList
0400f8b8 l     F .text	00000080 OS_InitTaskIdle
0400f938 l     F .text	00000080 OS_InitTaskStat
0400fc28 l     F .text	00000074 OS_SchedNew
00000000 l    df *ABS*	00000000 os_dbg.c
00000000 l    df *ABS*	00000000 os_flag.c
04011938 l     F .text	000000f4 OS_FlagTaskRdy
040116f8 l     F .text	00000160 OS_FlagBlock
00000000 l    df *ABS*	00000000 os_mbox.c
00000000 l    df *ABS*	00000000 os_mem.c
00000000 l    df *ABS*	00000000 os_q.c
00000000 l    df *ABS*	00000000 os_sem.c
00000000 l    df *ABS*	00000000 os_task.c
00000000 l    df *ABS*	00000000 os_time.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
040164a8 l     F .text	00000034 alt_dev_reg
04019694 l     O .rwdata	0000106c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
04016820 l     F .text	000002a4 altera_avalon_jtag_uart_irq
04016ac4 l     F .text	00000104 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
040172a0 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
04017508 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
04017778 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
040178b8 l     F .text	0000003c alt_get_errno
040178f4 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 os_cpu_a.o
00000040 l       *ABS*	00000000 OSCtxSw_SWITCH_PC
00000000 l    df *ABS*	00000000 os_cpu_c.c
00000014 l       *ABS*	00000000 OSTCBNext_OFFSET
00000032 l       *ABS*	00000000 OSTCBPrio_OFFSET
00000000 l       *ABS*	00000000 OSTCBStkPtr_OFFSET
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0401c3dc g     O .bss	00000004 alt_instruction_exception_handler
04007728 g     F .text	00000074 _mprec_log10
0401a78a g     O .rwdata	00000002 OSTaskNameSize
04007814 g     F .text	0000008c __any_on
04009c0c g     F .text	00000054 _isatty_r
040188b8 g     O .rodata	00000028 __mprec_tinytens
0400dacc g     F .text	000000bc alt_main
04000a78 g     F .text	000000c0 _puts_r
04024438 g     O .bss	00000100 alt_irq
04009c60 g     F .text	00000060 _lseek_r
04012c20 g     F .text	000000cc OS_MemInit
0401a7bc g       *ABS*	00000000 __flash_rwdata_start
04016448 g     F .text	00000060 OSTimeSet
0400be58 g     F .text	00000088 .hidden __eqdf2
0400e478 g     F .text	00000610 OSEventPendMulti
0402775c g       *ABS*	00000000 __alt_heap_start
04017f00 g     F .text	00000024 OSTaskCreateHook
0401c410 g     O .bss	00002000 task1_stk
04000a3c g     F .text	0000003c printf
0401a762 g     O .rwdata	00000002 OSMboxEn
0400eae0 g     F .text	0000004c OSIntEnter
04009e78 g     F .text	0000009c _wcrtomb_r
04007fa4 g     F .text	0000005c __sseek
04004e88 g     F .text	00000010 __sinit
04009d20 g     F .text	00000140 __swbuf_r
0401a772 g     O .rwdata	00000002 OSQEn
04005950 g     F .text	0000007c _setlocale_r
04004cf0 g     F .text	00000068 __sfmoreglue
0400e14c g     F .text	000000cc __malloc_unlock
04017f68 g     F .text	00000020 OSTaskStatHook
0401c38c g     O .bss	00000001 OSLockNesting
0401a7b0 g     O .rwdata	00000002 OSDataSize
0401c38d g     O .bss	00000001 OSRunning
04006620 g     F .text	0000015c memmove
04017fa8 g     F .text	00000020 OSInitHookBegin
0401a7a8 g     O .rwdata	00000002 OSTmrSize
04004e70 g     F .text	00000018 _cleanup
040068a4 g     F .text	000000a8 _Balloc
0401c390 g     O .bss	00000004 OSIdleCtr
0400bee0 g     F .text	000000dc .hidden __gtdf2
04017cb0 g     F .text	00000024 altera_nios2_gen2_irq_init
04017d80 g       .text	00000000 OSStartTsk
0400ff58 g     F .text	000002d4 OS_TCBInit
04000000 g     F .entry	0000001c __reset
0401a7ae g     O .rwdata	00000002 OSTmrWheelTblSize
04000020 g       *ABS*	00000000 __flash_exceptions_start
0401a74e g     O .rwdata	00000002 OSEventSize
0401c394 g     O .bss	00000001 OSPrioHighRdy
04009bb0 g     F .text	0000005c _fstat_r
04017f24 g     F .text	00000024 OSTaskDelHook
0401c364 g     O .bss	00000004 errno
04007f20 g     F .text	00000008 __seofread
04017d60 g       .text	00000000 OSStartHighRdy
04014eec g     F .text	000001e4 OSTaskCreateExt
04011240 g     F .text	00000060 OSFlagPendGetFlagsRdy
0401a78e g     O .rwdata	00000002 OSTaskStatStkSize
040103bc g     F .text	00000308 OSFlagAccept
04013258 g     F .text	000000b8 OSQFlush
04012cec g     F .text	00000140 OSQAccept
0401c374 g     O .bss	00000004 alt_argv
04022700 g       *ABS*	00000000 _gp
04014d40 g     F .text	000001ac OSTaskCreate
04014850 g     F .text	000004f0 OSTaskChangePrio
0401c388 g     O .bss	00000004 alt_heapsem
0401022c g     F .text	00000190 OSDebugInit
040150d0 g     F .text	00000344 OSTaskDel
04019514 g     O .rwdata	00000180 alt_fd_list
04024538 g     O .bss	00000370 OSFlagTbl
0400f504 g     F .text	000000b8 OS_EventTaskRemove
0401802c g     F .text	00000090 alt_find_dev
040064d8 g     F .text	00000148 memcpy
0401a778 g     O .rwdata	00000002 OSRdyTblSize
04004b40 g     F .text	0000000c _cleanup_r
0400d144 g     F .text	000000dc .hidden __floatsidf
0401783c g     F .text	0000007c alt_io_redirect
0400bfbc g     F .text	000000f4 .hidden __ltdf2
040186c4 g       *ABS*	00000000 __DTOR_END__
04000b38 g     F .text	00000014 puts
040176dc g     F .text	0000009c alt_exception_cause_generated_bad_addr
0400e218 g     F .text	00000120 OSEventNameGet
0401a75c g     O .rwdata	00000002 OSFlagMax
04007e04 g     F .text	00000074 __fpclassifyd
04007684 g     F .text	000000a4 __ratio
0400eb2c g     F .text	000000f8 OSIntExit
04009654 g     F .text	0000001c __vfiprintf_internal
0401a796 g     O .rwdata	00000002 OSTCBSize
0401c395 g     O .bss	00000001 OSPrioCur
04016d20 g     F .text	000002bc altera_avalon_jtag_uart_read
04000a0c g     F .text	00000030 _printf_r
08020000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0400ac08 g     F .text	00000064 .hidden __udivsi3
0400d82c g     F .text	000000a4 isatty
0401a77c g     O .rwdata	00000002 OSStkWidth
04018908 g     O .rodata	000000c8 __mprec_tens
0401a770 g     O .rwdata	00000002 OSPtrSize
040059cc g     F .text	0000000c __locale_charset
0401a750 g     O .rwdata	00000002 OSEventTblSize
04017cd4 g       .text	00000000 OSCtxSw
040182a0 g     F .text	00000090 alt_icache_flush
0401c360 g     O .bss	00000004 __malloc_top_pad
0401c398 g     O .bss	00000004 OSTCBList
0401c368 g     O .bss	00000004 alt_fd_list_lock
0401a708 g     O .rwdata	00000004 __mb_cur_max
040059fc g     F .text	0000000c _localeconv_r
04006cb0 g     F .text	0000003c __i2b
0400530c g     F .text	000004bc __sfvwrite_r
040248a8 g     O .bss	00000c30 OSMemTbl
0401c39c g     O .bss	00000001 OSTickStepState
04007e78 g     F .text	00000054 _sbrk_r
0401a774 g     O .rwdata	00000002 OSQMax
040254d8 g     O .bss	00000800 OSTaskStatStk
0401285c g     F .text	000000f0 OSMemNameGet
0401e410 g     O .bss	00002000 task4_stk
0401a754 g     O .rwdata	00000002 OSFlagEn
04009cc0 g     F .text	00000060 _read_r
0401a79a g     O .rwdata	00000002 OSTimeTickHookEn
04011a2c g     F .text	000000a4 OS_FlagUnlink
04013708 g     F .text	00000168 OSQPost
0401a728 g     O .rwdata	00000004 alt_max_fd
0400faf0 g     F .text	00000068 OS_MemCopy
0400fb58 g     F .text	000000d0 OS_Sched
040098a4 g     F .text	000000f0 _fclose_r
0401276c g     F .text	000000f0 OSMemGet
04012488 g     F .text	00000110 OSMboxQuery
040156fc g     F .text	000001b4 OSTaskNameSet
04004b08 g     F .text	00000030 fflush
0401c35c g     O .bss	00000004 __malloc_max_sbrked_mem
0401c3a0 g     O .bss	00000004 OSCtxSwCtr
04017f88 g     F .text	00000020 OSTimeTickHook
0401a75e g     O .rwdata	00000002 OSFlagNameSize
0400f5bc g     F .text	00000100 OS_EventTaskRemoveMulti
0400acc4 g     F .text	000008ac .hidden __adddf3
0400f3b4 g     F .text	00000150 OS_EventTaskWaitMulti
0400742c g     F .text	0000010c __b2d
0401a776 g     O .rwdata	00000002 OSQSize
0400a5d8 g     F .text	00000538 .hidden __umoddi3
0400d9f8 g     F .text	000000d4 lseek
040141b8 g     F .text	0000020c OSSemPend
0401a700 g     O .rwdata	00000004 _global_impure_ptr
040078a0 g     F .text	00000564 _realloc_r
0401a760 g     O .rwdata	00000002 OSLowestPrio
0402775c g       *ABS*	00000000 __bss_end
0400d700 g     F .text	000000f0 alt_iic_isr_register
04018008 g     F .text	00000024 OSTCBInitHook
0401c330 g     O .bss	00000004 sem_res
0401a7a6 g     O .rwdata	00000002 OSTmrCfgTicksPerSec
04017ba8 g     F .text	00000108 alt_tick
0401221c g     F .text	00000110 OSMboxPost
0400a060 g     F .text	00000578 .hidden __udivdi3
04009b0c g     F .text	00000024 _fputwc_r
0401a748 g     O .rwdata	00000002 OSEventEn
040188e0 g     O .rodata	00000028 __mprec_bigtens
04006a94 g     F .text	00000104 __s2b
0401a7a2 g     O .rwdata	00000002 OSTmrCfgNameSize
0400d220 g     F .text	000000a8 .hidden __floatunsidf
0400716c g     F .text	00000060 __mcmp
04004ea8 g     F .text	00000018 __fp_lock_all
0400d6b4 g     F .text	0000004c alt_ic_irq_enabled
04011858 g     F .text	000000e0 OS_FlagInit
04017b0c g     F .text	0000009c alt_alarm_stop
0401a784 g     O .rwdata	00000002 OSTaskIdleStkSize
0401c36c g     O .bss	00000004 alt_irq_active
04013df0 g     F .text	000000b0 OSSemAccept
04012a60 g     F .text	000000d8 OSMemPut
04012598 g     F .text	000001d4 OSMemCreate
0401c3a4 g     O .bss	00000004 OSIdleCtrMax
040000fc g     F .exceptions	000000d4 alt_irq_handler
040194ec g     O .rwdata	00000028 alt_dev_null
0401a798 g     O .rwdata	00000002 OSTicksPerSec
04017cd4 g       .text	00000000 OSIntCtxSw
040174c0 g     F .text	00000048 alt_dcache_flush_all
04006b98 g     F .text	00000068 __hi0bits
0400d0c4 g     F .text	00000080 .hidden __fixdfsi
0401c3a8 g     O .bss	00000004 OSTCBFreeList
0401a7bc g       *ABS*	00000000 __ram_rwdata_end
040143c4 g     F .text	0000016c OSSemPendAbort
0401c334 g     O .bss	00000004 mail_res
0401a720 g     O .rwdata	00000008 alt_dev_list
0400de10 g     F .text	000000f8 write
0401a79c g     O .rwdata	00000002 OSVersionNbr
04018c48 g       *ABS*	00000000 __ram_rodata_end
0400d4a0 g     F .text	000000b0 fstat
0400bfbc g     F .text	000000f4 .hidden __ledf2
0400079c g     F .text	000000ac task_queue
0401a744 g     O .rwdata	00000004 OSEndiannessTest
04006ee4 g     F .text	00000140 __pow5mult
040081f8 g     F .text	0000145c ___vfiprintf_internal_r
0401c354 g     O .bss	00000004 __nlocale_changed
0400ac6c g     F .text	00000058 .hidden __umodsi3
04020410 g     O .bss	00000028 msg_queue
0401a756 g     O .rwdata	00000002 OSFlagGrpSize
0402775c g       *ABS*	00000000 end
040166d8 g     F .text	00000148 altera_avalon_jtag_uart_init
0400fdc0 g     F .text	000000cc OS_TaskStat
040001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
040186c4 g       *ABS*	00000000 __CTOR_LIST__
040005a0 g     F .text	000000a8 flag_isr_and
08000000 g       *ABS*	00000000 __alt_stack_pointer
04017318 g     F .text	0000007c alt_avalon_timer_sc_init
0400d2c8 g     F .text	00000064 .hidden __clzsi2
04016fdc g     F .text	000002c4 altera_avalon_jtag_uart_write
04004e98 g     F .text	00000004 __sfp_lock_acquire
040063f4 g     F .text	000000e4 memchr
0400fa9c g     F .text	00000054 OS_MemClr
04000be4 g     F .text	000021f8 ___vfprintf_internal_r
04017da4 g     F .text	0000015c OSTaskStkInit
04004ffc g     F .text	00000310 _free_r
040059d8 g     F .text	00000010 __locale_mb_cur_max
0400f10c g     F .text	00000198 OS_EventTaskRdy
04018510 g     F .text	00000180 __call_exitprocs
0401c3ac g     O .bss	00000001 OSCPUUsage
0401c350 g     O .bss	00000004 __mlocale_changed
0401a70c g     O .rwdata	00000004 __malloc_sbrk_base
04000244 g     F .text	0000004c _start
0401c3e0 g     O .bss	00000004 _alt_tick_rate
04013310 g     F .text	0000028c OSQPend
04015fbc g     F .text	00000104 OSTimeDly
04007024 g     F .text	00000148 __lshift
0401c3e4 g     O .bss	00000004 _alt_nticks
0400dbc4 g     F .text	000000fc read
04016514 g     F .text	00000060 alt_sys_init
040183f8 g     F .text	00000118 __register_exitproc
0401c3ad g     O .bss	00000001 OSTaskCtr
040160c0 g     F .text	00000158 OSTimeDlyHMSM
04006cec g     F .text	000001f8 __multiply
04016bc8 g     F .text	00000068 altera_avalon_jtag_uart_close
04018c48 g       *ABS*	00000000 __ram_rwdata_start
040186c4 g       *ABS*	00000000 __ram_rodata_start
0401c3e8 g     O .bss	00000028 __malloc_current_mallinfo
0401a74a g     O .rwdata	00000002 OSEventMax
04007538 g     F .text	0000014c __d2b
04014530 g     F .text	00000110 OSSemPost
0400ecb0 g     F .text	000000dc OSSchedUnlock
04016574 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
040181c4 g     F .text	000000dc alt_get_fd
0401c3b0 g     O .bss	00000004 OSMemFreeList
0400edfc g     F .text	000000b0 OSStatInit
04011634 g     F .text	000000c4 OSFlagQuery
0401a780 g     O .rwdata	00000002 OSTaskCreateExtEn
0400978c g     F .text	00000054 _close_r
0401837c g     F .text	0000007c memcmp
0400f0ec g     F .text	00000020 OS_Dummy
04016634 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0402775c g       *ABS*	00000000 __alt_stack_base
04016684 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
04002eb4 g     F .text	00000154 __swsetup_r
04025cd8 g     O .bss	000001e0 OSQTbl
0400b570 g     F .text	000008e8 .hidden __divdf3
04004d58 g     F .text	00000118 __sfp
0400779c g     F .text	00000078 __copybits
040190e4 g     O .rwdata	00000408 __malloc_av_
04004ea4 g     F .text	00000004 __sinit_lock_release
0401c3b4 g     O .bss	00000004 OSTCBHighRdy
0400c0b0 g     F .text	00000718 .hidden __muldf3
04007ecc g     F .text	00000054 __sread
0401c3b8 g     O .bss	00000004 OSQFreeList
040180bc g     F .text	00000108 alt_find_file
04017544 g     F .text	000000a4 alt_dev_llist_insert
0400e02c g     F .text	00000120 __malloc_lock
0400dd24 g     F .text	000000b0 sbrk
04000848 g     F .text	000000a8 queue_isr
0400e338 g     F .text	00000140 OSEventNameSet
04004aac g     F .text	0000005c _fflush_r
040097e0 g     F .text	000000c4 _calloc_r
0401c3bc g     O .bss	00000001 OSRdyGrp
0401c330 g       *ABS*	00000000 __bss_start
0400677c g     F .text	00000128 memset
040008f0 g     F .text	0000011c main
0401c378 g     O .bss	00000004 alt_envp
0401c358 g     O .bss	00000004 __malloc_max_total_mem
040165d4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
04009e60 g     F .text	00000018 __swbuf
04018b10 g     O .rodata	00000100 OSUnMapTbl
0401a77a g     O .rwdata	00000002 OSSemEn
040112a0 g     F .text	00000394 OSFlagPost
04008000 g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
04009994 g     F .text	00000014 fclose
0400f2a4 g     F .text	00000110 OS_EventTaskWait
04020438 g     O .bss	00002000 task2_stk
0400fe8c g     F .text	000000cc OS_TaskStatStkChk
04015414 g     F .text	00000150 OSTaskDelReq
04003208 g     F .text	00001688 _dtoa_r
04005be8 g     F .text	0000080c _malloc_r
04009fd4 g     F .text	00000030 __ascii_wctomb
0401a72c g     O .rwdata	00000004 alt_errno
0400ed8c g     F .text	00000070 OSStart
04022438 g     O .bss	00002000 task3_stk
0400dfcc g     F .text	00000060 __env_unlock
040057c8 g     F .text	000000c4 _fwalk
040158b0 g     F .text	000001d4 OSTaskResume
04012b38 g     F .text	000000e8 OSMemQuery
0401a78c g     O .rwdata	00000002 OSTaskStatEn
0401a766 g     O .rwdata	00000002 OSMemMax
04013870 g     F .text	00000170 OSQPostFront
0400ab10 g     F .text	00000084 .hidden __divsi3
0401c3bd g     O .bss	00000003 OSRdyTbl
0401a740 g     O .rwdata	00000002 OSDebugEn
04004ed8 g     F .text	00000124 _malloc_trim_r
040186c4 g       *ABS*	00000000 __CTOR_END__
0401a758 g     O .rwdata	00000002 OSFlagNodeSize
0401a7a0 g     O .rwdata	00000002 OSTmrCfgMax
04008008 g     F .text	000000dc strcmp
04012e2c g     F .text	000001ac OSQCreate
04015564 g     F .text	00000198 OSTaskNameGet
040186c4 g       *ABS*	00000000 __flash_rodata_start
040139e0 g     F .text	0000020c OSQPostOpt
0400eeac g     F .text	00000220 OSTimeTick
0401a788 g     O .rwdata	00000002 OSTaskMax
040186c4 g       *ABS*	00000000 __DTOR_LIST__
04013ea0 g     F .text	000000d8 OSSemCreate
0401a7ac g     O .rwdata	00000002 OSTmrWheelSize
0400038c g     F .text	000000ac task_flag_or
04000290 g     F .text	00000094 task_sem
0400be58 g     F .text	00000088 .hidden __nedf2
0401a782 g     O .rwdata	00000002 OSTaskDelEn
04014640 g     F .text	00000110 OSSemQuery
04012fd8 g     F .text	00000280 OSQDel
0401359c g     F .text	0000016c OSQPendAbort
040164dc g     F .text	00000038 alt_irq_init
0401c338 g     O .bss	00000002 some_msg
0400dcc0 g     F .text	00000064 alt_release_fd
040189f0 g     O .rodata	00000100 .hidden __clz_tab
0401c34c g     O .bss	00000004 _PathLocale
04018330 g     F .text	00000014 atexit
0400972c g     F .text	00000060 _write_r
0400ec24 g     F .text	0000008c OSSchedLock
04005a08 g     F .text	00000018 setlocale
040106c4 g     F .text	00000108 OSFlagCreate
0401a704 g     O .rwdata	00000004 _impure_ptr
0401c370 g     O .bss	00000004 alt_argc
04004890 g     F .text	0000021c __sflush_r
04017648 g     F .text	00000060 _do_dtors
040059f4 g     F .text	00000008 __locale_cjk_lang
0401a752 g     O .rwdata	00000002 OSEventMultiEn
040107cc g     F .text	00000248 OSFlagDel
0401c3c0 g     O .bss	00000004 OSEventFreeList
040120b0 g     F .text	0000016c OSMboxPendAbort
04000020 g       .exceptions	00000000 alt_irq_entry
040073c8 g     F .text	00000064 __ulp
0401a79e g     O .rwdata	00000002 OSTmrEn
04010c88 g     F .text	000005b8 OSFlagPend
04004ec0 g     F .text	00000018 __fp_unlock_all
0401a718 g     O .rwdata	00000008 alt_fs_list
0400fc9c g     F .text	00000074 OS_StrCopy
0401a768 g     O .rwdata	00000002 OSMemNameSize
04017fc8 g     F .text	00000020 OSInitHookEnd
04000020 g       *ABS*	00000000 __ram_exceptions_start
04000324 g     F .text	00000068 sem_isr
0401a794 g     O .rwdata	00000002 OSTCBPrioTblMax
04005a20 g     F .text	0000000c localeconv
0401a790 g     O .rwdata	00000002 OSTaskStatStkChkEn
04000000 g       *ABS*	00000000 __alt_mem_new_sdram_controller_0
04011b68 g     F .text	000000d4 OSMboxCreate
0400d550 g     F .text	00000050 alt_ic_isr_register
0401a764 g     O .rwdata	00000002 OSMemEn
0401a76e g     O .rwdata	00000002 OSMutexEn
0401a7bc g       *ABS*	00000000 _edata
0402775c g       *ABS*	00000000 _end
0401c3c4 g     O .bss	00000001 OSIntNesting
040004dc g     F .text	000000c4 task_flag_and
040099a8 g     F .text	00000164 __fputwc
04000244 g       *ABS*	00000000 __ram_exceptions_end
04016c30 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
04016218 g     F .text	000001d4 OSTimeDlyResume
04010b3c g     F .text	0000014c OSFlagNameSet
04011e7c g     F .text	00000234 OSMboxPend
04015a84 g     F .text	000001c0 OSTaskStkChk
0400d628 g     F .text	0000008c alt_ic_irq_disable
0401a76a g     O .rwdata	00000002 OSMemSize
04007f28 g     F .text	0000007c __swrite
0401a710 g     O .rwdata	00000004 __malloc_trim_threshold
040059e8 g     F .text	0000000c __locale_msgcharset
0401c3c8 g     O .bss	00000004 OSTCBCur
04018344 g     F .text	00000038 exit
0401c33a g     O .bss	00000002 flags
0401a76c g     O .rwdata	00000002 OSMemTblSize
0400588c g     F .text	000000c4 _fwalk_reent
040071cc g     F .text	000001fc __mdiff
0400ab94 g     F .text	00000074 .hidden __modsi3
04011ad0 g     F .text	00000098 OSMboxAccept
08000000 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
04004e9c g     F .text	00000004 __sfp_lock_release
0400ea88 g     F .text	00000058 OSInit
04015e28 g     F .text	00000124 OSTaskQuery
0401c33c g     O .bss	00000004 start
04013d48 g     F .text	000000a8 OS_QInit
0400fd10 g     F .text	00000054 OS_StrLen
0401294c g     F .text	00000114 OSMemNameSet
040006f4 g     F .text	000000a8 mail_isr
0401a786 g     O .rwdata	00000002 OSTaskProfileEn
0401c3cc g     O .bss	00000004 OSTime
04000438 g     F .text	000000a4 flag_isr_or
04025eb8 g     O .bss	00000800 OSTaskIdleStk
04018690 g     F .text	00000034 _exit
0401232c g     F .text	0000015c OSMboxPostOpt
04017394 g     F .text	0000012c alt_alarm_start
04010a14 g     F .text	00000128 OSFlagNameGet
040163ec g     F .text	0000005c OSTimeGet
04005a2c g     F .text	000001bc __smakebuf_r
04000648 g     F .text	000000ac task_mail
04000b4c g     F .text	00000098 strlen
04017f48 g     F .text	00000020 OSTaskSwHook
040179b8 g     F .text	00000154 open
040266b8 g     O .bss	00000b40 OSEventTbl
0400bee0 g     F .text	000000dc .hidden __gedf2
0401c340 g     O .bss	00000004 stop
040271f8 g     O .bss	00000510 OSTCBTbl
04014750 g     F .text	00000100 OSSemSet
0401a714 g     O .rwdata	00000004 __wctomb
040081e0 g     F .text	00000018 __sprint_r
040176a8 g     F .text	00000034 alt_icache_flush_all
0401a730 g     O .rwdata	00000004 alt_priority_mask
04013f78 g     F .text	00000240 OSSemDel
0401c3d0 g     O .bss	00000004 OSFlagFreeList
0400d5a0 g     F .text	00000088 alt_ic_irq_enable
0401a74c g     O .rwdata	00000002 OSEventNameSize
04011c3c g     F .text	00000240 OSMboxDel
04002ddc g     F .text	0000001c __vfprintf_internal
0401c3d4 g     O .bss	00000001 OSStatRdy
04027708 g     O .bss	00000054 OSTCBPrioTbl
0400a004 g     F .text	0000005c _wctomb_r
0400df08 g     F .text	000000c4 __env_lock
0401a792 g     O .rwdata	00000002 OSTaskSwHookEn
0400c7c8 g     F .text	000008fc .hidden __subdf3
04006c00 g     F .text	000000b0 __lo0bits
0401a7b4 g     O .rwdata	00000008 alt_alarm_list
0401a75a g     O .rwdata	00000002 OSFlagWidth
040175e8 g     F .text	00000060 _do_ctors
0401c344 g     O .bss	00000004 queue_res
04009f14 g     F .text	000000c0 wcrtomb
0400d368 g     F .text	000000d0 close
0401c380 g     O .bss	00000004 alt_envsem
0401c3d8 g     O .bss	00000004 OSIdleCtrRun
0400f0cc g     F .text	00000020 OSVersion
0401a7a4 g     O .rwdata	00000002 OSTmrCfgWheelSize
0400d938 g     F .text	00000084 alt_load
04015f4c g     F .text	00000070 OS_TaskStkClr
0401a77e g     O .rwdata	00000002 OSTaskCreateEn
0401c348 g     O .bss	00000004 flag_res
0400f6bc g     F .text	00000068 OS_EventWaitListInit
04009b30 g     F .text	00000080 fputwc
04017fe8 g     F .text	00000020 OSTaskIdleHook
04004ea0 g     F .text	00000004 __sinit_lock_acquire
04006974 g     F .text	00000120 __multadd
04015c44 g     F .text	000001e4 OSTaskSuspend
0400694c g     F .text	00000028 _Bfree
0400fd64 g     F .text	0000005c OS_TaskIdle
0401a7aa g     O .rwdata	00000002 OSTmrTblSize
04013bec g     F .text	0000015c OSQQuery



Disassembly of section .entry:

04000000 <__reset>:
 */

#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
 4000000:	00800074 	movhi	r2,1
#else
    movui r2, NIOS2_ICACHE_SIZE
#endif

0:
    initi r2
 4000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 4000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 400000c:	00bffd16 	blt	zero,r2,4000004 <__alt_mem_onchip_memory2_0+0xfbfe0004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4000010:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 4000014:	08409114 	ori	at,at,580
    jmp r1
 4000018:	0800683a 	jmp	at
 400001c:	00000000 	call	0 <OSTCBStkPtr_OFFSET>

Disassembly of section .exceptions:

04000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000fc0 	call	40000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000706 	br	40000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 400008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4000098:	40001d00 	call	40001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 400009c:	1000021e 	bne	r2,zero,40000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000f8:	ef80083a 	eret

040000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000fc:	defff904 	addi	sp,sp,-28
 4000100:	dfc00615 	stw	ra,24(sp)
 4000104:	df000515 	stw	fp,20(sp)
 4000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 400010c:	400eae00 	call	400eae0 <OSIntEnter>
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000110:	0005313a 	rdctl	r2,ipending
 4000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 400011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4000124:	00800044 	movi	r2,1
 4000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 400012c:	e0fffb17 	ldw	r3,-20(fp)
 4000130:	e0bffc17 	ldw	r2,-16(fp)
 4000134:	1884703a 	and	r2,r3,r2
 4000138:	10001426 	beq	r2,zero,400018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 400013c:	008100b4 	movhi	r2,1026
 4000140:	10910e04 	addi	r2,r2,17464
 4000144:	e0fffd17 	ldw	r3,-12(fp)
 4000148:	180690fa 	slli	r3,r3,3
 400014c:	10c5883a 	add	r2,r2,r3
 4000150:	10c00017 	ldw	r3,0(r2)
 4000154:	008100b4 	movhi	r2,1026
 4000158:	10910e04 	addi	r2,r2,17464
 400015c:	e13ffd17 	ldw	r4,-12(fp)
 4000160:	200890fa 	slli	r4,r4,3
 4000164:	1105883a 	add	r2,r2,r4
 4000168:	10800104 	addi	r2,r2,4
 400016c:	10800017 	ldw	r2,0(r2)
 4000170:	1009883a 	mov	r4,r2
 4000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 400017c:	0005313a 	rdctl	r2,ipending
 4000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4000184:	e0bfff17 	ldw	r2,-4(fp)
 4000188:	00000706 	br	40001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 400018c:	e0bffc17 	ldw	r2,-16(fp)
 4000190:	1085883a 	add	r2,r2,r2
 4000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4000198:	e0bffd17 	ldw	r2,-12(fp)
 400019c:	10800044 	addi	r2,r2,1
 40001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40001a4:	003fe106 	br	400012c <__alt_mem_onchip_memory2_0+0xfbfe012c>

    active = alt_irq_pending ();
 40001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 40001ac:	e0bffb17 	ldw	r2,-20(fp)
 40001b0:	103fdb1e 	bne	r2,zero,4000120 <__alt_mem_onchip_memory2_0+0xfbfe0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40001b4:	400eb2c0 	call	400eb2c <OSIntExit>
}
 40001b8:	0001883a 	nop
 40001bc:	e037883a 	mov	sp,fp
 40001c0:	dfc00117 	ldw	ra,4(sp)
 40001c4:	df000017 	ldw	fp,0(sp)
 40001c8:	dec00204 	addi	sp,sp,8
 40001cc:	f800283a 	ret

040001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 40001d0:	defffb04 	addi	sp,sp,-20
 40001d4:	dfc00415 	stw	ra,16(sp)
 40001d8:	df000315 	stw	fp,12(sp)
 40001dc:	df000304 	addi	fp,sp,12
 40001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 40001e4:	000531fa 	rdctl	r2,exception
 40001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 40001ec:	e0bffd17 	ldw	r2,-12(fp)
 40001f0:	10801f0c 	andi	r2,r2,124
 40001f4:	1004d0ba 	srli	r2,r2,2
 40001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 40001fc:	0005333a 	rdctl	r2,badaddr
 4000200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 4000204:	d0a73717 	ldw	r2,-25380(gp)
 4000208:	10000726 	beq	r2,zero,4000228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 400020c:	d0a73717 	ldw	r2,-25380(gp)
 4000210:	e0fffd17 	ldw	r3,-12(fp)
 4000214:	e1bffe17 	ldw	r6,-8(fp)
 4000218:	e17fff17 	ldw	r5,-4(fp)
 400021c:	1809883a 	mov	r4,r3
 4000220:	103ee83a 	callr	r2
 4000224:	00000206 	br	4000230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4000228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 400022c:	0005883a 	mov	r2,zero
}
 4000230:	e037883a 	mov	sp,fp
 4000234:	dfc00117 	ldw	ra,4(sp)
 4000238:	df000017 	ldw	fp,0(sp)
 400023c:	dec00204 	addi	sp,sp,8
 4000240:	f800283a 	ret

Disassembly of section .text:

04000244 <_start>:

#if NIOS2_DCACHE_SIZE > 0 && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
 4000244:	00800074 	movhi	r2,1
#else
    movui r2, NIOS2_DCACHE_SIZE
#endif

0:
    initd 0(r2)
 4000248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 400024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 4000250:	00bffd16 	blt	zero,r2,4000248 <__alt_mem_onchip_memory2_0+0xfbfe0248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4000254:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 4000258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 400025c:	068100b4 	movhi	gp,1026
    ori gp, gp, %lo(_gp)
 4000260:	d689c014 	ori	gp,gp,9984
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4000264:	00810074 	movhi	r2,1025
    ori r2, r2, %lo(__bss_start)
 4000268:	10b0cc14 	ori	r2,r2,49968

    movhi r3, %hi(__bss_end)
 400026c:	00c100b4 	movhi	r3,1026
    ori r3, r3, %lo(__bss_end)
 4000270:	18ddd714 	ori	r3,r3,30556

    beq r2, r3, 1f
 4000274:	10c00326 	beq	r2,r3,4000284 <_start+0x40>

0:
    stw zero, (r2)
 4000278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 400027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 4000280:	10fffd36 	bltu	r2,r3,4000278 <__alt_mem_onchip_memory2_0+0xfbfe0278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4000284:	400d9380 	call	400d938 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4000288:	400dacc0 	call	400dacc <alt_main>

0400028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 400028c:	003fff06 	br	400028c <__alt_mem_onchip_memory2_0+0xfbfe028c>

04000290 <task_sem>:
msg some_msg;

unsigned int start,stop;

void task_sem(void* pdata)
{
 4000290:	defffc04 	addi	sp,sp,-16
 4000294:	dfc00315 	stw	ra,12(sp)
 4000298:	df000215 	stw	fp,8(sp)
 400029c:	df000204 	addi	fp,sp,8
 40002a0:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
	while (1)
	{
		OSSemPend(sem_res,0,&err);
 40002a4:	d0a70c17 	ldw	r2,-25552(gp)
 40002a8:	e1bffe04 	addi	r6,fp,-8
 40002ac:	000b883a 	mov	r5,zero
 40002b0:	1009883a 	mov	r4,r2
 40002b4:	40141b80 	call	40141b8 <OSSemPend>
		IOWR_ALTERA_AVALON_TIMER_SNAPL(TIMER_0_BASE, arbval);
 40002b8:	00ffffd4 	movui	r3,65535
 40002bc:	00820134 	movhi	r2,2052
 40002c0:	10840c04 	addi	r2,r2,4144
 40002c4:	10c00035 	stwio	r3,0(r2)
		stop = IORD_ALTERA_AVALON_TIMER_SNAPL(TIMER_0_BASE);
 40002c8:	00820134 	movhi	r2,2052
 40002cc:	10840c04 	addi	r2,r2,4144
 40002d0:	10800037 	ldwio	r2,0(r2)
 40002d4:	d0a71015 	stw	r2,-25536(gp)
		if(err == OS_NO_ERR)
 40002d8:	e0bffe03 	ldbu	r2,-8(fp)
 40002dc:	10803fcc 	andi	r2,r2,255
 40002e0:	1000081e 	bne	r2,zero,4000304 <task_sem+0x74>
			printf("Getting semaphore in : %u cycle\n", start - stop);
 40002e4:	d0e70f17 	ldw	r3,-25540(gp)
 40002e8:	d0a71017 	ldw	r2,-25536(gp)
 40002ec:	1885c83a 	sub	r2,r3,r2
 40002f0:	100b883a 	mov	r5,r2
 40002f4:	010100b4 	movhi	r4,1026
 40002f8:	2121b104 	addi	r4,r4,-31036
 40002fc:	4000a3c0 	call	4000a3c <printf>
 4000300:	00000306 	br	4000310 <task_sem+0x80>
		else
			printf("Some error has occurred: Not getting semaphore\n");
 4000304:	010100b4 	movhi	r4,1026
 4000308:	2121ba04 	addi	r4,r4,-31000
 400030c:	4000b380 	call	4000b38 <puts>
		// Set channel 0 low
		IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x0);
 4000310:	0007883a 	mov	r3,zero
 4000314:	00820134 	movhi	r2,2052
 4000318:	10841804 	addi	r2,r2,4192
 400031c:	10c00035 	stwio	r3,0(r2)
	 }
 4000320:	003fe006 	br	40002a4 <__alt_mem_onchip_memory2_0+0xfbfe02a4>

04000324 <sem_isr>:
}

void sem_isr(void* context)
{
 4000324:	defffd04 	addi	sp,sp,-12
 4000328:	dfc00215 	stw	ra,8(sp)
 400032c:	df000115 	stw	fp,4(sp)
 4000330:	df000104 	addi	fp,sp,4
 4000334:	e13fff15 	stw	r4,-4(fp)
	// Set channel 0 high
	//IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x1);
	// Clear interrupt bit
	IOWR_32DIRECT(PIO_0_BASE, PIO_CLR_EDGES_ADDR, PIO_ALL_CLR);
 4000338:	00c003c4 	movi	r3,15
 400033c:	00820134 	movhi	r2,2052
 4000340:	10842304 	addi	r2,r2,4236
 4000344:	10c00035 	stwio	r3,0(r2)
	INT8U err;
	//unsigned char v = IORD(PIO_0_BASE, 3);
	OSSemPost(sem_res);
 4000348:	d0a70c17 	ldw	r2,-25552(gp)
 400034c:	1009883a 	mov	r4,r2
 4000350:	40145300 	call	4014530 <OSSemPost>
	IOWR_ALTERA_AVALON_TIMER_SNAPL(TIMER_0_BASE, arbval);
 4000354:	00ffffd4 	movui	r3,65535
 4000358:	00820134 	movhi	r2,2052
 400035c:	10840c04 	addi	r2,r2,4144
 4000360:	10c00035 	stwio	r3,0(r2)
	start = IORD_ALTERA_AVALON_TIMER_SNAPL(TIMER_0_BASE);
 4000364:	00820134 	movhi	r2,2052
 4000368:	10840c04 	addi	r2,r2,4144
 400036c:	10800037 	ldwio	r2,0(r2)
 4000370:	d0a70f15 	stw	r2,-25540(gp)
}
 4000374:	0001883a 	nop
 4000378:	e037883a 	mov	sp,fp
 400037c:	dfc00117 	ldw	ra,4(sp)
 4000380:	df000017 	ldw	fp,0(sp)
 4000384:	dec00204 	addi	sp,sp,8
 4000388:	f800283a 	ret

0400038c <task_flag_or>:

void task_flag_or(void* pdata)
{
 400038c:	defffb04 	addi	sp,sp,-20
 4000390:	dfc00415 	stw	ra,16(sp)
 4000394:	df000315 	stw	fp,12(sp)
 4000398:	df000304 	addi	fp,sp,12
 400039c:	e13fff15 	stw	r4,-4(fp)

	INT8U err;
	while (1)
	{
		// OR version
		printf("Testing flag OR version\n");
 40003a0:	010100b4 	movhi	r4,1026
 40003a4:	2121c604 	addi	r4,r4,-30952
 40003a8:	4000b380 	call	4000b38 <puts>
		OSFlagPend(flag_res, 0x0f, OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME, 0, &err);
 40003ac:	d0a71217 	ldw	r2,-25528(gp)
 40003b0:	e0fffe04 	addi	r3,fp,-8
 40003b4:	d8c00015 	stw	r3,0(sp)
 40003b8:	000f883a 	mov	r7,zero
 40003bc:	018020c4 	movi	r6,131
 40003c0:	014003c4 	movi	r5,15
 40003c4:	1009883a 	mov	r4,r2
 40003c8:	4010c880 	call	4010c88 <OSFlagPend>

		// Set channel 0 low
		IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x0);
 40003cc:	0007883a 	mov	r3,zero
 40003d0:	00820134 	movhi	r2,2052
 40003d4:	10841804 	addi	r2,r2,4192
 40003d8:	10c00035 	stwio	r3,0(r2)

		IOWR_ALTERA_AVALON_TIMER_SNAPL(TIMER_0_BASE, arbval);
 40003dc:	00ffffd4 	movui	r3,65535
 40003e0:	00820134 	movhi	r2,2052
 40003e4:	10840c04 	addi	r2,r2,4144
 40003e8:	10c00035 	stwio	r3,0(r2)
		stop = IORD_ALTERA_AVALON_TIMER_SNAPL(TIMER_0_BASE);
 40003ec:	00820134 	movhi	r2,2052
 40003f0:	10840c04 	addi	r2,r2,4144
 40003f4:	10800037 	ldwio	r2,0(r2)
 40003f8:	d0a71015 	stw	r2,-25536(gp)
		if(err == OS_NO_ERR)
 40003fc:	e0bffe03 	ldbu	r2,-8(fp)
 4000400:	10803fcc 	andi	r2,r2,255
 4000404:	1000081e 	bne	r2,zero,4000428 <task_flag_or+0x9c>
			printf("Getting flag in : %u cycle\n", start - stop);
 4000408:	d0e70f17 	ldw	r3,-25540(gp)
 400040c:	d0a71017 	ldw	r2,-25536(gp)
 4000410:	1885c83a 	sub	r2,r3,r2
 4000414:	100b883a 	mov	r5,r2
 4000418:	010100b4 	movhi	r4,1026
 400041c:	2121cc04 	addi	r4,r4,-30928
 4000420:	4000a3c0 	call	4000a3c <printf>
 4000424:	003fde06 	br	40003a0 <__alt_mem_onchip_memory2_0+0xfbfe03a0>
		else
			printf("Not getting flag\n");
 4000428:	010100b4 	movhi	r4,1026
 400042c:	2121d304 	addi	r4,r4,-30900
 4000430:	4000b380 	call	4000b38 <puts>
	}
 4000434:	003fda06 	br	40003a0 <__alt_mem_onchip_memory2_0+0xfbfe03a0>

04000438 <flag_isr_or>:
}

void flag_isr_or(void* context)
{
 4000438:	defffc04 	addi	sp,sp,-16
 400043c:	dfc00315 	stw	ra,12(sp)
 4000440:	df000215 	stw	fp,8(sp)
 4000444:	df000204 	addi	fp,sp,8
 4000448:	e13fff15 	stw	r4,-4(fp)
	// Set channel 0 high
	IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x1);
 400044c:	00c00044 	movi	r3,1
 4000450:	00820134 	movhi	r2,2052
 4000454:	10841804 	addi	r2,r2,4192
 4000458:	10c00035 	stwio	r3,0(r2)

	INT8U err;
	unsigned char v = IORD_32DIRECT(PIO_0_BASE, 12);
 400045c:	00820134 	movhi	r2,2052
 4000460:	10842304 	addi	r2,r2,4236
 4000464:	10800037 	ldwio	r2,0(r2)
 4000468:	e0bffe05 	stb	r2,-8(fp)
	v = (v & 0x0f);
 400046c:	e0bffe03 	ldbu	r2,-8(fp)
 4000470:	108003cc 	andi	r2,r2,15
 4000474:	e0bffe05 	stb	r2,-8(fp)

	// Clear interrupt
	IOWR_32DIRECT(PIO_0_BASE, 12, 0x0f);
 4000478:	00c003c4 	movi	r3,15
 400047c:	00820134 	movhi	r2,2052
 4000480:	10842304 	addi	r2,r2,4236
 4000484:	10c00035 	stwio	r3,0(r2)


	OSFlagPost(flag_res, 0xff, OS_FLAG_SET, &err);
 4000488:	d0a71217 	ldw	r2,-25528(gp)
 400048c:	e0fffe44 	addi	r3,fp,-7
 4000490:	180f883a 	mov	r7,r3
 4000494:	01800044 	movi	r6,1
 4000498:	01403fc4 	movi	r5,255
 400049c:	1009883a 	mov	r4,r2
 40004a0:	40112a00 	call	40112a0 <OSFlagPost>
	IOWR_ALTERA_AVALON_TIMER_SNAPL(TIMER_0_BASE, arbval);
 40004a4:	00ffffd4 	movui	r3,65535
 40004a8:	00820134 	movhi	r2,2052
 40004ac:	10840c04 	addi	r2,r2,4144
 40004b0:	10c00035 	stwio	r3,0(r2)
	start = IORD_ALTERA_AVALON_TIMER_SNAPL(TIMER_0_BASE);
 40004b4:	00820134 	movhi	r2,2052
 40004b8:	10840c04 	addi	r2,r2,4144
 40004bc:	10800037 	ldwio	r2,0(r2)
 40004c0:	d0a70f15 	stw	r2,-25540(gp)
}
 40004c4:	0001883a 	nop
 40004c8:	e037883a 	mov	sp,fp
 40004cc:	dfc00117 	ldw	ra,4(sp)
 40004d0:	df000017 	ldw	fp,0(sp)
 40004d4:	dec00204 	addi	sp,sp,8
 40004d8:	f800283a 	ret

040004dc <task_flag_and>:

void task_flag_and(void* pdata)
{
 40004dc:	defffb04 	addi	sp,sp,-20
 40004e0:	dfc00415 	stw	ra,16(sp)
 40004e4:	df000315 	stw	fp,12(sp)
 40004e8:	df000304 	addi	fp,sp,12
 40004ec:	e13fff15 	stw	r4,-4(fp)

	INT8U err;
	while (1)
	{
		// AND version
		printf("Testing flag AND version\n");
 40004f0:	010100b4 	movhi	r4,1026
 40004f4:	2121d804 	addi	r4,r4,-30880
 40004f8:	4000b380 	call	4000b38 <puts>
		OSFlagPend(flag_res, 0xf, OS_FLAG_WAIT_SET_ALL + OS_FLAG_CONSUME, 0, &err);
 40004fc:	d0a71217 	ldw	r2,-25528(gp)
 4000500:	e0fffe04 	addi	r3,fp,-8
 4000504:	d8c00015 	stw	r3,0(sp)
 4000508:	000f883a 	mov	r7,zero
 400050c:	01802084 	movi	r6,130
 4000510:	014003c4 	movi	r5,15
 4000514:	1009883a 	mov	r4,r2
 4000518:	4010c880 	call	4010c88 <OSFlagPend>

		// Set channel 0 low
		IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x0);
 400051c:	0007883a 	mov	r3,zero
 4000520:	00820134 	movhi	r2,2052
 4000524:	10841804 	addi	r2,r2,4192
 4000528:	10c00035 	stwio	r3,0(r2)

		IOWR_ALTERA_AVALON_TIMER_SNAPL(TIMER_0_BASE, arbval);
 400052c:	00ffffd4 	movui	r3,65535
 4000530:	00820134 	movhi	r2,2052
 4000534:	10840c04 	addi	r2,r2,4144
 4000538:	10c00035 	stwio	r3,0(r2)
		stop = IORD_ALTERA_AVALON_TIMER_SNAPL(TIMER_0_BASE);
 400053c:	00820134 	movhi	r2,2052
 4000540:	10840c04 	addi	r2,r2,4144
 4000544:	10800037 	ldwio	r2,0(r2)
 4000548:	d0a71015 	stw	r2,-25536(gp)
		if(err == OS_NO_ERR)
 400054c:	e0bffe03 	ldbu	r2,-8(fp)
 4000550:	10803fcc 	andi	r2,r2,255
 4000554:	1000081e 	bne	r2,zero,4000578 <task_flag_and+0x9c>
			printf("Getting flag in : %u cycle\n", start - stop);
 4000558:	d0e70f17 	ldw	r3,-25540(gp)
 400055c:	d0a71017 	ldw	r2,-25536(gp)
 4000560:	1885c83a 	sub	r2,r3,r2
 4000564:	100b883a 	mov	r5,r2
 4000568:	010100b4 	movhi	r4,1026
 400056c:	2121cc04 	addi	r4,r4,-30928
 4000570:	4000a3c0 	call	4000a3c <printf>
 4000574:	00000306 	br	4000584 <task_flag_and+0xa8>
		else
			printf("Not getting flag\n");
 4000578:	010100b4 	movhi	r4,1026
 400057c:	2121d304 	addi	r4,r4,-30900
 4000580:	4000b380 	call	4000b38 <puts>
		OSFlagPost(flag_res, 0xf, OS_FLAG_CLR, &err);
 4000584:	d0a71217 	ldw	r2,-25528(gp)
 4000588:	e1fffe04 	addi	r7,fp,-8
 400058c:	000d883a 	mov	r6,zero
 4000590:	014003c4 	movi	r5,15
 4000594:	1009883a 	mov	r4,r2
 4000598:	40112a00 	call	40112a0 <OSFlagPost>
	}
 400059c:	003fd406 	br	40004f0 <__alt_mem_onchip_memory2_0+0xfbfe04f0>

040005a0 <flag_isr_and>:
}

void flag_isr_and(void* context)
{
 40005a0:	defffc04 	addi	sp,sp,-16
 40005a4:	dfc00315 	stw	ra,12(sp)
 40005a8:	df000215 	stw	fp,8(sp)
 40005ac:	df000204 	addi	fp,sp,8
 40005b0:	e13fff15 	stw	r4,-4(fp)
	// Set channel 0 high
	IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x1);
 40005b4:	00c00044 	movi	r3,1
 40005b8:	00820134 	movhi	r2,2052
 40005bc:	10841804 	addi	r2,r2,4192
 40005c0:	10c00035 	stwio	r3,0(r2)

	INT8U err;
	unsigned char v = IORD_32DIRECT(PIO_0_BASE, 12);
 40005c4:	00820134 	movhi	r2,2052
 40005c8:	10842304 	addi	r2,r2,4236
 40005cc:	10800037 	ldwio	r2,0(r2)
 40005d0:	e0bffe05 	stb	r2,-8(fp)
	v = (v & 0x0f);
 40005d4:	e0bffe03 	ldbu	r2,-8(fp)
 40005d8:	108003cc 	andi	r2,r2,15
 40005dc:	e0bffe05 	stb	r2,-8(fp)
	OSFlagPost(flag_res, v, OS_FLAG_SET, &err);
 40005e0:	d0a71217 	ldw	r2,-25528(gp)
 40005e4:	e0fffe03 	ldbu	r3,-8(fp)
 40005e8:	e13ffe44 	addi	r4,fp,-7
 40005ec:	200f883a 	mov	r7,r4
 40005f0:	01800044 	movi	r6,1
 40005f4:	180b883a 	mov	r5,r3
 40005f8:	1009883a 	mov	r4,r2
 40005fc:	40112a00 	call	40112a0 <OSFlagPost>
	IOWR_ALTERA_AVALON_TIMER_SNAPL(TIMER_0_BASE, arbval);
 4000600:	00ffffd4 	movui	r3,65535
 4000604:	00820134 	movhi	r2,2052
 4000608:	10840c04 	addi	r2,r2,4144
 400060c:	10c00035 	stwio	r3,0(r2)
	start = IORD_ALTERA_AVALON_TIMER_SNAPL(TIMER_0_BASE);
 4000610:	00820134 	movhi	r2,2052
 4000614:	10840c04 	addi	r2,r2,4144
 4000618:	10800037 	ldwio	r2,0(r2)
 400061c:	d0a70f15 	stw	r2,-25540(gp)
	IOWR_32DIRECT(PIO_0_BASE, 12, 0x0f);
 4000620:	00c003c4 	movi	r3,15
 4000624:	00820134 	movhi	r2,2052
 4000628:	10842304 	addi	r2,r2,4236
 400062c:	10c00035 	stwio	r3,0(r2)
}
 4000630:	0001883a 	nop
 4000634:	e037883a 	mov	sp,fp
 4000638:	dfc00117 	ldw	ra,4(sp)
 400063c:	df000017 	ldw	fp,0(sp)
 4000640:	dec00204 	addi	sp,sp,8
 4000644:	f800283a 	ret

04000648 <task_mail>:

void task_mail(void* pdata)
{
 4000648:	defffb04 	addi	sp,sp,-20
 400064c:	dfc00415 	stw	ra,16(sp)
 4000650:	df000315 	stw	fp,12(sp)
 4000654:	df000304 	addi	fp,sp,12
 4000658:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
	msg* bla;

	while (1)
	{
		bla = (struct msg*)OSMboxPend(mail_res, 0, &err);
 400065c:	d0a70d17 	ldw	r2,-25548(gp)
 4000660:	e0fffe04 	addi	r3,fp,-8
 4000664:	180d883a 	mov	r6,r3
 4000668:	000b883a 	mov	r5,zero
 400066c:	1009883a 	mov	r4,r2
 4000670:	4011e7c0 	call	4011e7c <OSMboxPend>
 4000674:	e0bffd15 	stw	r2,-12(fp)
		IOWR_ALTERA_AVALON_TIMER_SNAPL(TIMER_0_BASE, 9);
 4000678:	00c00244 	movi	r3,9
 400067c:	00820134 	movhi	r2,2052
 4000680:	10840c04 	addi	r2,r2,4144
 4000684:	10c00035 	stwio	r3,0(r2)
		stop = IORD_ALTERA_AVALON_TIMER_SNAPL(TIMER_0_BASE);
 4000688:	00820134 	movhi	r2,2052
 400068c:	10840c04 	addi	r2,r2,4144
 4000690:	10800037 	ldwio	r2,0(r2)
 4000694:	d0a71015 	stw	r2,-25536(gp)
		if(err == OS_NO_ERR)
 4000698:	e0bffe03 	ldbu	r2,-8(fp)
 400069c:	10803fcc 	andi	r2,r2,255
 40006a0:	1000101e 	bne	r2,zero,40006e4 <task_mail+0x9c>
			printf("Getting message in : %u cycles with button number %u and edge %02X\n",start - stop, bla->button_number, bla->edge);
 40006a4:	d0e70f17 	ldw	r3,-25540(gp)
 40006a8:	d0a71017 	ldw	r2,-25536(gp)
 40006ac:	1887c83a 	sub	r3,r3,r2
 40006b0:	e0bffd17 	ldw	r2,-12(fp)
 40006b4:	10800003 	ldbu	r2,0(r2)
 40006b8:	11003fcc 	andi	r4,r2,255
 40006bc:	e0bffd17 	ldw	r2,-12(fp)
 40006c0:	10800043 	ldbu	r2,1(r2)
 40006c4:	10803fcc 	andi	r2,r2,255
 40006c8:	100f883a 	mov	r7,r2
 40006cc:	200d883a 	mov	r6,r4
 40006d0:	180b883a 	mov	r5,r3
 40006d4:	010100b4 	movhi	r4,1026
 40006d8:	2121df04 	addi	r4,r4,-30852
 40006dc:	4000a3c0 	call	4000a3c <printf>
 40006e0:	003fde06 	br	400065c <__alt_mem_onchip_memory2_0+0xfbfe065c>
		else
			printf("Not getting message\n");
 40006e4:	010100b4 	movhi	r4,1026
 40006e8:	2121f004 	addi	r4,r4,-30784
 40006ec:	4000b380 	call	4000b38 <puts>
	}
 40006f0:	003fda06 	br	400065c <__alt_mem_onchip_memory2_0+0xfbfe065c>

040006f4 <mail_isr>:
}

void mail_isr(void* context)
{
 40006f4:	defffc04 	addi	sp,sp,-16
 40006f8:	dfc00315 	stw	ra,12(sp)
 40006fc:	df000215 	stw	fp,8(sp)
 4000700:	df000204 	addi	fp,sp,8
 4000704:	e13fff15 	stw	r4,-4(fp)
	INT8U err;

	unsigned char v = IORD(PIO_0_BASE, 3);
 4000708:	00820134 	movhi	r2,2052
 400070c:	10842304 	addi	r2,r2,4236
 4000710:	10800037 	ldwio	r2,0(r2)
 4000714:	e0bffe05 	stb	r2,-8(fp)
	some_msg.button_number = v;
 4000718:	e0bffe03 	ldbu	r2,-8(fp)
 400071c:	d0a70e05 	stb	r2,-25544(gp)
	some_msg.edge = ((IORD(PIO_0_BASE,0)&0x1) == 0) ? 0x80 : 0;
 4000720:	00820134 	movhi	r2,2052
 4000724:	10842004 	addi	r2,r2,4224
 4000728:	10800037 	ldwio	r2,0(r2)
 400072c:	1080004c 	andi	r2,r2,1
 4000730:	1000021e 	bne	r2,zero,400073c <mail_isr+0x48>
 4000734:	00bfe004 	movi	r2,-128
 4000738:	00000106 	br	4000740 <mail_isr+0x4c>
 400073c:	0005883a 	mov	r2,zero
 4000740:	d0a70e45 	stb	r2,-25543(gp)
	OSMboxPost(mail_res, &some_msg);
 4000744:	d0a70d17 	ldw	r2,-25548(gp)
 4000748:	d1670e04 	addi	r5,gp,-25544
 400074c:	1009883a 	mov	r4,r2
 4000750:	401221c0 	call	401221c <OSMboxPost>
	IOWR_ALTERA_AVALON_TIMER_SNAPL(TIMER_0_BASE, 9);
 4000754:	00c00244 	movi	r3,9
 4000758:	00820134 	movhi	r2,2052
 400075c:	10840c04 	addi	r2,r2,4144
 4000760:	10c00035 	stwio	r3,0(r2)
	start = IORD_ALTERA_AVALON_TIMER_SNAPL(TIMER_0_BASE);
 4000764:	00820134 	movhi	r2,2052
 4000768:	10840c04 	addi	r2,r2,4144
 400076c:	10800037 	ldwio	r2,0(r2)
 4000770:	d0a70f15 	stw	r2,-25540(gp)
	// Clear interrupt bit
	IOWR_32DIRECT(PIO_0_BASE, PIO_CLR_EDGES_ADDR, PIO_ALL_CLR);
 4000774:	00c003c4 	movi	r3,15
 4000778:	00820134 	movhi	r2,2052
 400077c:	10842304 	addi	r2,r2,4236
 4000780:	10c00035 	stwio	r3,0(r2)
}
 4000784:	0001883a 	nop
 4000788:	e037883a 	mov	sp,fp
 400078c:	dfc00117 	ldw	ra,4(sp)
 4000790:	df000017 	ldw	fp,0(sp)
 4000794:	dec00204 	addi	sp,sp,8
 4000798:	f800283a 	ret

0400079c <task_queue>:

void task_queue(void* pdata)
{
 400079c:	defffb04 	addi	sp,sp,-20
 40007a0:	dfc00415 	stw	ra,16(sp)
 40007a4:	df000315 	stw	fp,12(sp)
 40007a8:	df000304 	addi	fp,sp,12
 40007ac:	e13fff15 	stw	r4,-4(fp)

	msg* bla;

	while (1)
	{
		bla = (struct msg*)OSQPend(queue_res, 0, &err);
 40007b0:	d0a71117 	ldw	r2,-25532(gp)
 40007b4:	e0fffe04 	addi	r3,fp,-8
 40007b8:	180d883a 	mov	r6,r3
 40007bc:	000b883a 	mov	r5,zero
 40007c0:	1009883a 	mov	r4,r2
 40007c4:	40133100 	call	4013310 <OSQPend>
 40007c8:	e0bffd15 	stw	r2,-12(fp)
		IOWR_ALTERA_AVALON_TIMER_SNAPL(TIMER_0_BASE, arbval);
 40007cc:	00ffffd4 	movui	r3,65535
 40007d0:	00820134 	movhi	r2,2052
 40007d4:	10840c04 	addi	r2,r2,4144
 40007d8:	10c00035 	stwio	r3,0(r2)
		stop = IORD_ALTERA_AVALON_TIMER_SNAPL(TIMER_0_BASE);
 40007dc:	00820134 	movhi	r2,2052
 40007e0:	10840c04 	addi	r2,r2,4144
 40007e4:	10800037 	ldwio	r2,0(r2)
 40007e8:	d0a71015 	stw	r2,-25536(gp)
		if(err == OS_NO_ERR)
 40007ec:	e0bffe03 	ldbu	r2,-8(fp)
 40007f0:	10803fcc 	andi	r2,r2,255
 40007f4:	1000101e 	bne	r2,zero,4000838 <task_queue+0x9c>
			printf("Getting message from queue in : %u cycles with button number %u and edge %02X\n", start - stop, bla->button_number, bla->edge);
 40007f8:	d0e70f17 	ldw	r3,-25540(gp)
 40007fc:	d0a71017 	ldw	r2,-25536(gp)
 4000800:	1887c83a 	sub	r3,r3,r2
 4000804:	e0bffd17 	ldw	r2,-12(fp)
 4000808:	10800003 	ldbu	r2,0(r2)
 400080c:	11003fcc 	andi	r4,r2,255
 4000810:	e0bffd17 	ldw	r2,-12(fp)
 4000814:	10800043 	ldbu	r2,1(r2)
 4000818:	10803fcc 	andi	r2,r2,255
 400081c:	100f883a 	mov	r7,r2
 4000820:	200d883a 	mov	r6,r4
 4000824:	180b883a 	mov	r5,r3
 4000828:	010100b4 	movhi	r4,1026
 400082c:	2121f504 	addi	r4,r4,-30764
 4000830:	4000a3c0 	call	4000a3c <printf>
 4000834:	003fde06 	br	40007b0 <__alt_mem_onchip_memory2_0+0xfbfe07b0>
		else
			printf("Not getting message\n");
 4000838:	010100b4 	movhi	r4,1026
 400083c:	2121f004 	addi	r4,r4,-30784
 4000840:	4000b380 	call	4000b38 <puts>
	}
 4000844:	003fda06 	br	40007b0 <__alt_mem_onchip_memory2_0+0xfbfe07b0>

04000848 <queue_isr>:
}
void queue_isr(void* context)
{
 4000848:	defffc04 	addi	sp,sp,-16
 400084c:	dfc00315 	stw	ra,12(sp)
 4000850:	df000215 	stw	fp,8(sp)
 4000854:	df000204 	addi	fp,sp,8
 4000858:	e13fff15 	stw	r4,-4(fp)
	INT8U err;
	unsigned char v = IORD(PIO_0_BASE, 3);
 400085c:	00820134 	movhi	r2,2052
 4000860:	10842304 	addi	r2,r2,4236
 4000864:	10800037 	ldwio	r2,0(r2)
 4000868:	e0bffe05 	stb	r2,-8(fp)
	some_msg.button_number = v;
 400086c:	e0bffe03 	ldbu	r2,-8(fp)
 4000870:	d0a70e05 	stb	r2,-25544(gp)
	some_msg.edge = ((IORD(PIO_0_BASE,0)&0x1) == 0) ? 0x80 : 0;
 4000874:	00820134 	movhi	r2,2052
 4000878:	10842004 	addi	r2,r2,4224
 400087c:	10800037 	ldwio	r2,0(r2)
 4000880:	1080004c 	andi	r2,r2,1
 4000884:	1000021e 	bne	r2,zero,4000890 <queue_isr+0x48>
 4000888:	00bfe004 	movi	r2,-128
 400088c:	00000106 	br	4000894 <queue_isr+0x4c>
 4000890:	0005883a 	mov	r2,zero
 4000894:	d0a70e45 	stb	r2,-25543(gp)
	OSQPost(queue_res, &some_msg);
 4000898:	d0a71117 	ldw	r2,-25532(gp)
 400089c:	d1670e04 	addi	r5,gp,-25544
 40008a0:	1009883a 	mov	r4,r2
 40008a4:	40137080 	call	4013708 <OSQPost>
	IOWR_ALTERA_AVALON_TIMER_SNAPL(TIMER_0_BASE, arbval);
 40008a8:	00ffffd4 	movui	r3,65535
 40008ac:	00820134 	movhi	r2,2052
 40008b0:	10840c04 	addi	r2,r2,4144
 40008b4:	10c00035 	stwio	r3,0(r2)
	start = IORD_ALTERA_AVALON_TIMER_SNAPL(TIMER_0_BASE);
 40008b8:	00820134 	movhi	r2,2052
 40008bc:	10840c04 	addi	r2,r2,4144
 40008c0:	10800037 	ldwio	r2,0(r2)
 40008c4:	d0a70f15 	stw	r2,-25540(gp)

	// Clear interrupt bit
	IOWR_32DIRECT(PIO_0_BASE, 12, 0xf);
 40008c8:	00c003c4 	movi	r3,15
 40008cc:	00820134 	movhi	r2,2052
 40008d0:	10842304 	addi	r2,r2,4236
 40008d4:	10c00035 	stwio	r3,0(r2)
}
 40008d8:	0001883a 	nop
 40008dc:	e037883a 	mov	sp,fp
 40008e0:	dfc00117 	ldw	ra,4(sp)
 40008e4:	df000017 	ldw	fp,0(sp)
 40008e8:	dec00204 	addi	sp,sp,8
 40008ec:	f800283a 	ret

040008f0 <main>:

int main(void)
{
 40008f0:	defff904 	addi	sp,sp,-28
 40008f4:	dfc00615 	stw	ra,24(sp)
 40008f8:	df000515 	stw	fp,20(sp)
 40008fc:	df000504 	addi	fp,sp,20
	IOWR_32DIRECT(TIMER_1_BASE, 4, 6);
 4000900:	00c00184 	movi	r3,6
 4000904:	00820134 	movhi	r2,2052
 4000908:	10840104 	addi	r2,r2,4100
 400090c:	10c00035 	stwio	r3,0(r2)

	IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x0);
 4000910:	0007883a 	mov	r3,zero
 4000914:	00820134 	movhi	r2,2052
 4000918:	10841804 	addi	r2,r2,4192
 400091c:	10c00035 	stwio	r3,0(r2)
	INT8U err;
	//sem_res = OSSemCreate(1);
	//flag_res = OSFlagCreate(0, &err);
	//mail_res = OSMboxCreate(NULL);
	queue_res = OSQCreate(msg_queue, QUEUE_SIZE);
 4000920:	01400284 	movi	r5,10
 4000924:	010100b4 	movhi	r4,1026
 4000928:	21010404 	addi	r4,r4,1040
 400092c:	4012e2c0 	call	4012e2c <OSQCreate>
 4000930:	d0a71115 	stw	r2,-25532(gp)

	// Initialize timer
	IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_0_BASE, 0xffff);
 4000934:	00ffffd4 	movui	r3,65535
 4000938:	00820134 	movhi	r2,2052
 400093c:	10840a04 	addi	r2,r2,4136
 4000940:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_0_BASE, 0xffff);
 4000944:	00ffffd4 	movui	r3,65535
 4000948:	00820134 	movhi	r2,2052
 400094c:	10840b04 	addi	r2,r2,4140
 4000950:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE,2);
 4000954:	00c00084 	movi	r3,2
 4000958:	00820134 	movhi	r2,2052
 400095c:	10840904 	addi	r2,r2,4132
 4000960:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE,6);
 4000964:	00c00184 	movi	r3,6
 4000968:	00820134 	movhi	r2,2052
 400096c:	10840904 	addi	r2,r2,4132
 4000970:	10c00035 	stwio	r3,0(r2)
	//alt_ic_isr_register(PIO_0_IRQ_INTERRUPT_CONTROLLER_ID, PIO_0_IRQ, flag_isr_or, NULL, NULL);
	//alt_ic_isr_register(PIO_0_IRQ_INTERRUPT_CONTROLLER_ID, PIO_0_IRQ, flag_isr_and, NULL, NULL);

	//alt_ic_isr_register(PIO_0_IRQ_INTERRUPT_CONTROLLER_ID, PIO_0_IRQ, mail_isr, NULL, NULL);

	alt_ic_isr_register(PIO_0_IRQ_INTERRUPT_CONTROLLER_ID, PIO_0_IRQ, queue_isr, NULL, NULL);
 4000974:	d8000015 	stw	zero,0(sp)
 4000978:	000f883a 	mov	r7,zero
 400097c:	01810034 	movhi	r6,1024
 4000980:	31821204 	addi	r6,r6,2120
 4000984:	01400104 	movi	r5,4
 4000988:	0009883a 	mov	r4,zero
 400098c:	400d5500 	call	400d550 <alt_ic_isr_register>

	IOWR(PIO_0_BASE,3,0x0f);
 4000990:	00c003c4 	movi	r3,15
 4000994:	00820134 	movhi	r2,2052
 4000998:	10842304 	addi	r2,r2,4236
 400099c:	10c00035 	stwio	r3,0(r2)
	IOWR(PIO_0_BASE,2,0x0f);
 40009a0:	00c003c4 	movi	r3,15
 40009a4:	00820134 	movhi	r2,2052
 40009a8:	10842204 	addi	r2,r2,4232
 40009ac:	10c00035 	stwio	r3,0(r2)
	//OSTaskCreateExt(task_flag_or, NULL, (void *)&task2_stk[TASK_STACKSIZE-1], TASK2_PRIORITY, TASK2_PRIORITY, task2_stk, TASK_STACKSIZE, NULL, 0);
	//OSTaskCreateExt(task_flag_and, NULL, (void *)&task2_stk[TASK_STACKSIZE-1], TASK2_PRIORITY, TASK2_PRIORITY, task2_stk, TASK_STACKSIZE, NULL, 0);

	//OSTaskCreateExt(task_mail, NULL, (void *)&task3_stk[TASK_STACKSIZE-1], TASK3_PRIORITY, TASK3_PRIORITY, task3_stk, TASK_STACKSIZE,  NULL, 0);

	OSTaskCreateExt(task_queue, NULL, (void *)&task4_stk[TASK_STACKSIZE-1], TASK4_PRIORITY, TASK4_PRIORITY, task4_stk, TASK_STACKSIZE, NULL, 0);
 40009b0:	d8000415 	stw	zero,16(sp)
 40009b4:	d8000315 	stw	zero,12(sp)
 40009b8:	00820004 	movi	r2,2048
 40009bc:	d8800215 	stw	r2,8(sp)
 40009c0:	008100b4 	movhi	r2,1026
 40009c4:	10b90404 	addi	r2,r2,-7152
 40009c8:	d8800115 	stw	r2,4(sp)
 40009cc:	00800104 	movi	r2,4
 40009d0:	d8800015 	stw	r2,0(sp)
 40009d4:	01c00104 	movi	r7,4
 40009d8:	018100b4 	movhi	r6,1026
 40009dc:	31810304 	addi	r6,r6,1036
 40009e0:	000b883a 	mov	r5,zero
 40009e4:	01010034 	movhi	r4,1024
 40009e8:	2101e704 	addi	r4,r4,1948
 40009ec:	4014eec0 	call	4014eec <OSTaskCreateExt>

	OSStart();
 40009f0:	400ed8c0 	call	400ed8c <OSStart>
	return 0;
 40009f4:	0005883a 	mov	r2,zero
 }
 40009f8:	e037883a 	mov	sp,fp
 40009fc:	dfc00117 	ldw	ra,4(sp)
 4000a00:	df000017 	ldw	fp,0(sp)
 4000a04:	dec00204 	addi	sp,sp,8
 4000a08:	f800283a 	ret

04000a0c <_printf_r>:
 4000a0c:	defffd04 	addi	sp,sp,-12
 4000a10:	2805883a 	mov	r2,r5
 4000a14:	dfc00015 	stw	ra,0(sp)
 4000a18:	d9800115 	stw	r6,4(sp)
 4000a1c:	d9c00215 	stw	r7,8(sp)
 4000a20:	21400217 	ldw	r5,8(r4)
 4000a24:	d9c00104 	addi	r7,sp,4
 4000a28:	100d883a 	mov	r6,r2
 4000a2c:	4000be40 	call	4000be4 <___vfprintf_internal_r>
 4000a30:	dfc00017 	ldw	ra,0(sp)
 4000a34:	dec00304 	addi	sp,sp,12
 4000a38:	f800283a 	ret

04000a3c <printf>:
 4000a3c:	defffc04 	addi	sp,sp,-16
 4000a40:	dfc00015 	stw	ra,0(sp)
 4000a44:	d9400115 	stw	r5,4(sp)
 4000a48:	d9800215 	stw	r6,8(sp)
 4000a4c:	d9c00315 	stw	r7,12(sp)
 4000a50:	008100b4 	movhi	r2,1026
 4000a54:	10a9c104 	addi	r2,r2,-22780
 4000a58:	10800017 	ldw	r2,0(r2)
 4000a5c:	200b883a 	mov	r5,r4
 4000a60:	d9800104 	addi	r6,sp,4
 4000a64:	11000217 	ldw	r4,8(r2)
 4000a68:	4002ddc0 	call	4002ddc <__vfprintf_internal>
 4000a6c:	dfc00017 	ldw	ra,0(sp)
 4000a70:	dec00404 	addi	sp,sp,16
 4000a74:	f800283a 	ret

04000a78 <_puts_r>:
 4000a78:	defff604 	addi	sp,sp,-40
 4000a7c:	dc000715 	stw	r16,28(sp)
 4000a80:	2021883a 	mov	r16,r4
 4000a84:	2809883a 	mov	r4,r5
 4000a88:	dc400815 	stw	r17,32(sp)
 4000a8c:	dfc00915 	stw	ra,36(sp)
 4000a90:	2823883a 	mov	r17,r5
 4000a94:	4000b4c0 	call	4000b4c <strlen>
 4000a98:	10c00044 	addi	r3,r2,1
 4000a9c:	d8800115 	stw	r2,4(sp)
 4000aa0:	008100b4 	movhi	r2,1026
 4000aa4:	10a20904 	addi	r2,r2,-30684
 4000aa8:	d8800215 	stw	r2,8(sp)
 4000aac:	00800044 	movi	r2,1
 4000ab0:	d8800315 	stw	r2,12(sp)
 4000ab4:	00800084 	movi	r2,2
 4000ab8:	dc400015 	stw	r17,0(sp)
 4000abc:	d8c00615 	stw	r3,24(sp)
 4000ac0:	dec00415 	stw	sp,16(sp)
 4000ac4:	d8800515 	stw	r2,20(sp)
 4000ac8:	80000226 	beq	r16,zero,4000ad4 <_puts_r+0x5c>
 4000acc:	80800e17 	ldw	r2,56(r16)
 4000ad0:	10001426 	beq	r2,zero,4000b24 <_puts_r+0xac>
 4000ad4:	81400217 	ldw	r5,8(r16)
 4000ad8:	2880030b 	ldhu	r2,12(r5)
 4000adc:	10c8000c 	andi	r3,r2,8192
 4000ae0:	1800061e 	bne	r3,zero,4000afc <_puts_r+0x84>
 4000ae4:	29001917 	ldw	r4,100(r5)
 4000ae8:	00f7ffc4 	movi	r3,-8193
 4000aec:	10880014 	ori	r2,r2,8192
 4000af0:	20c6703a 	and	r3,r4,r3
 4000af4:	2880030d 	sth	r2,12(r5)
 4000af8:	28c01915 	stw	r3,100(r5)
 4000afc:	d9800404 	addi	r6,sp,16
 4000b00:	8009883a 	mov	r4,r16
 4000b04:	400530c0 	call	400530c <__sfvwrite_r>
 4000b08:	1000091e 	bne	r2,zero,4000b30 <_puts_r+0xb8>
 4000b0c:	00800284 	movi	r2,10
 4000b10:	dfc00917 	ldw	ra,36(sp)
 4000b14:	dc400817 	ldw	r17,32(sp)
 4000b18:	dc000717 	ldw	r16,28(sp)
 4000b1c:	dec00a04 	addi	sp,sp,40
 4000b20:	f800283a 	ret
 4000b24:	8009883a 	mov	r4,r16
 4000b28:	4004e880 	call	4004e88 <__sinit>
 4000b2c:	003fe906 	br	4000ad4 <__alt_mem_onchip_memory2_0+0xfbfe0ad4>
 4000b30:	00bfffc4 	movi	r2,-1
 4000b34:	003ff606 	br	4000b10 <__alt_mem_onchip_memory2_0+0xfbfe0b10>

04000b38 <puts>:
 4000b38:	008100b4 	movhi	r2,1026
 4000b3c:	10a9c104 	addi	r2,r2,-22780
 4000b40:	200b883a 	mov	r5,r4
 4000b44:	11000017 	ldw	r4,0(r2)
 4000b48:	4000a781 	jmpi	4000a78 <_puts_r>

04000b4c <strlen>:
 4000b4c:	208000cc 	andi	r2,r4,3
 4000b50:	10002026 	beq	r2,zero,4000bd4 <strlen+0x88>
 4000b54:	20800007 	ldb	r2,0(r4)
 4000b58:	10002026 	beq	r2,zero,4000bdc <strlen+0x90>
 4000b5c:	2005883a 	mov	r2,r4
 4000b60:	00000206 	br	4000b6c <strlen+0x20>
 4000b64:	10c00007 	ldb	r3,0(r2)
 4000b68:	18001826 	beq	r3,zero,4000bcc <strlen+0x80>
 4000b6c:	10800044 	addi	r2,r2,1
 4000b70:	10c000cc 	andi	r3,r2,3
 4000b74:	183ffb1e 	bne	r3,zero,4000b64 <__alt_mem_onchip_memory2_0+0xfbfe0b64>
 4000b78:	10c00017 	ldw	r3,0(r2)
 4000b7c:	01ffbff4 	movhi	r7,65279
 4000b80:	39ffbfc4 	addi	r7,r7,-257
 4000b84:	00ca303a 	nor	r5,zero,r3
 4000b88:	01a02074 	movhi	r6,32897
 4000b8c:	19c7883a 	add	r3,r3,r7
 4000b90:	31a02004 	addi	r6,r6,-32640
 4000b94:	1946703a 	and	r3,r3,r5
 4000b98:	1986703a 	and	r3,r3,r6
 4000b9c:	1800091e 	bne	r3,zero,4000bc4 <strlen+0x78>
 4000ba0:	10800104 	addi	r2,r2,4
 4000ba4:	10c00017 	ldw	r3,0(r2)
 4000ba8:	19cb883a 	add	r5,r3,r7
 4000bac:	00c6303a 	nor	r3,zero,r3
 4000bb0:	28c6703a 	and	r3,r5,r3
 4000bb4:	1986703a 	and	r3,r3,r6
 4000bb8:	183ff926 	beq	r3,zero,4000ba0 <__alt_mem_onchip_memory2_0+0xfbfe0ba0>
 4000bbc:	00000106 	br	4000bc4 <strlen+0x78>
 4000bc0:	10800044 	addi	r2,r2,1
 4000bc4:	10c00007 	ldb	r3,0(r2)
 4000bc8:	183ffd1e 	bne	r3,zero,4000bc0 <__alt_mem_onchip_memory2_0+0xfbfe0bc0>
 4000bcc:	1105c83a 	sub	r2,r2,r4
 4000bd0:	f800283a 	ret
 4000bd4:	2005883a 	mov	r2,r4
 4000bd8:	003fe706 	br	4000b78 <__alt_mem_onchip_memory2_0+0xfbfe0b78>
 4000bdc:	0005883a 	mov	r2,zero
 4000be0:	f800283a 	ret

04000be4 <___vfprintf_internal_r>:
 4000be4:	deffb804 	addi	sp,sp,-288
 4000be8:	dfc04715 	stw	ra,284(sp)
 4000bec:	ddc04515 	stw	r23,276(sp)
 4000bf0:	dd404315 	stw	r21,268(sp)
 4000bf4:	d9002c15 	stw	r4,176(sp)
 4000bf8:	282f883a 	mov	r23,r5
 4000bfc:	302b883a 	mov	r21,r6
 4000c00:	d9c02d15 	stw	r7,180(sp)
 4000c04:	df004615 	stw	fp,280(sp)
 4000c08:	dd804415 	stw	r22,272(sp)
 4000c0c:	dd004215 	stw	r20,264(sp)
 4000c10:	dcc04115 	stw	r19,260(sp)
 4000c14:	dc804015 	stw	r18,256(sp)
 4000c18:	dc403f15 	stw	r17,252(sp)
 4000c1c:	dc003e15 	stw	r16,248(sp)
 4000c20:	40059fc0 	call	40059fc <_localeconv_r>
 4000c24:	10800017 	ldw	r2,0(r2)
 4000c28:	1009883a 	mov	r4,r2
 4000c2c:	d8803415 	stw	r2,208(sp)
 4000c30:	4000b4c0 	call	4000b4c <strlen>
 4000c34:	d8803715 	stw	r2,220(sp)
 4000c38:	d8802c17 	ldw	r2,176(sp)
 4000c3c:	10000226 	beq	r2,zero,4000c48 <___vfprintf_internal_r+0x64>
 4000c40:	10800e17 	ldw	r2,56(r2)
 4000c44:	1000f926 	beq	r2,zero,400102c <___vfprintf_internal_r+0x448>
 4000c48:	b880030b 	ldhu	r2,12(r23)
 4000c4c:	10c8000c 	andi	r3,r2,8192
 4000c50:	1800061e 	bne	r3,zero,4000c6c <___vfprintf_internal_r+0x88>
 4000c54:	b9001917 	ldw	r4,100(r23)
 4000c58:	00f7ffc4 	movi	r3,-8193
 4000c5c:	10880014 	ori	r2,r2,8192
 4000c60:	20c6703a 	and	r3,r4,r3
 4000c64:	b880030d 	sth	r2,12(r23)
 4000c68:	b8c01915 	stw	r3,100(r23)
 4000c6c:	10c0020c 	andi	r3,r2,8
 4000c70:	1800c126 	beq	r3,zero,4000f78 <___vfprintf_internal_r+0x394>
 4000c74:	b8c00417 	ldw	r3,16(r23)
 4000c78:	1800bf26 	beq	r3,zero,4000f78 <___vfprintf_internal_r+0x394>
 4000c7c:	1080068c 	andi	r2,r2,26
 4000c80:	00c00284 	movi	r3,10
 4000c84:	10c0c426 	beq	r2,r3,4000f98 <___vfprintf_internal_r+0x3b4>
 4000c88:	d8c00404 	addi	r3,sp,16
 4000c8c:	050100b4 	movhi	r20,1026
 4000c90:	d9001e04 	addi	r4,sp,120
 4000c94:	a5221a84 	addi	r20,r20,-30614
 4000c98:	d8c01e15 	stw	r3,120(sp)
 4000c9c:	d8002015 	stw	zero,128(sp)
 4000ca0:	d8001f15 	stw	zero,124(sp)
 4000ca4:	d8003315 	stw	zero,204(sp)
 4000ca8:	d8003615 	stw	zero,216(sp)
 4000cac:	d8003815 	stw	zero,224(sp)
 4000cb0:	1811883a 	mov	r8,r3
 4000cb4:	d8003915 	stw	zero,228(sp)
 4000cb8:	d8003a15 	stw	zero,232(sp)
 4000cbc:	d8002f15 	stw	zero,188(sp)
 4000cc0:	d9002815 	stw	r4,160(sp)
 4000cc4:	a8800007 	ldb	r2,0(r21)
 4000cc8:	10027b26 	beq	r2,zero,40016b8 <___vfprintf_internal_r+0xad4>
 4000ccc:	00c00944 	movi	r3,37
 4000cd0:	a821883a 	mov	r16,r21
 4000cd4:	10c0021e 	bne	r2,r3,4000ce0 <___vfprintf_internal_r+0xfc>
 4000cd8:	00001406 	br	4000d2c <___vfprintf_internal_r+0x148>
 4000cdc:	10c00326 	beq	r2,r3,4000cec <___vfprintf_internal_r+0x108>
 4000ce0:	84000044 	addi	r16,r16,1
 4000ce4:	80800007 	ldb	r2,0(r16)
 4000ce8:	103ffc1e 	bne	r2,zero,4000cdc <__alt_mem_onchip_memory2_0+0xfbfe0cdc>
 4000cec:	8563c83a 	sub	r17,r16,r21
 4000cf0:	88000e26 	beq	r17,zero,4000d2c <___vfprintf_internal_r+0x148>
 4000cf4:	d8c02017 	ldw	r3,128(sp)
 4000cf8:	d8801f17 	ldw	r2,124(sp)
 4000cfc:	45400015 	stw	r21,0(r8)
 4000d00:	1c47883a 	add	r3,r3,r17
 4000d04:	10800044 	addi	r2,r2,1
 4000d08:	d8c02015 	stw	r3,128(sp)
 4000d0c:	44400115 	stw	r17,4(r8)
 4000d10:	d8801f15 	stw	r2,124(sp)
 4000d14:	00c001c4 	movi	r3,7
 4000d18:	1880a716 	blt	r3,r2,4000fb8 <___vfprintf_internal_r+0x3d4>
 4000d1c:	42000204 	addi	r8,r8,8
 4000d20:	d9402f17 	ldw	r5,188(sp)
 4000d24:	2c4b883a 	add	r5,r5,r17
 4000d28:	d9402f15 	stw	r5,188(sp)
 4000d2c:	80800007 	ldb	r2,0(r16)
 4000d30:	1000a826 	beq	r2,zero,4000fd4 <___vfprintf_internal_r+0x3f0>
 4000d34:	84400047 	ldb	r17,1(r16)
 4000d38:	00bfffc4 	movi	r2,-1
 4000d3c:	85400044 	addi	r21,r16,1
 4000d40:	d8002785 	stb	zero,158(sp)
 4000d44:	0007883a 	mov	r3,zero
 4000d48:	000f883a 	mov	r7,zero
 4000d4c:	d8802915 	stw	r2,164(sp)
 4000d50:	d8003115 	stw	zero,196(sp)
 4000d54:	0025883a 	mov	r18,zero
 4000d58:	01401604 	movi	r5,88
 4000d5c:	01800244 	movi	r6,9
 4000d60:	02800a84 	movi	r10,42
 4000d64:	02401b04 	movi	r9,108
 4000d68:	ad400044 	addi	r21,r21,1
 4000d6c:	88bff804 	addi	r2,r17,-32
 4000d70:	28830436 	bltu	r5,r2,4001984 <___vfprintf_internal_r+0xda0>
 4000d74:	100490ba 	slli	r2,r2,2
 4000d78:	01010034 	movhi	r4,1024
 4000d7c:	21036304 	addi	r4,r4,3468
 4000d80:	1105883a 	add	r2,r2,r4
 4000d84:	10800017 	ldw	r2,0(r2)
 4000d88:	1000683a 	jmp	r2
 4000d8c:	040018a4 	muli	r16,zero,98
 4000d90:	04001984 	movi	r16,102
 4000d94:	04001984 	movi	r16,102
 4000d98:	040018c4 	movi	r16,99
 4000d9c:	04001984 	movi	r16,102
 4000da0:	04001984 	movi	r16,102
 4000da4:	04001984 	movi	r16,102
 4000da8:	04001984 	movi	r16,102
 4000dac:	04001984 	movi	r16,102
 4000db0:	04001984 	movi	r16,102
 4000db4:	04001038 	rdprs	r16,zero,64
 4000db8:	040017e0 	cmpeqi	r16,zero,95
 4000dbc:	04001984 	movi	r16,102
 4000dc0:	04000f00 	call	4000f0 <OSCtxSw_SWITCH_PC+0x4000b0>
 4000dc4:	04001060 	cmpeqi	r16,zero,65
 4000dc8:	04001984 	movi	r16,102
 4000dcc:	040010a0 	cmpeqi	r16,zero,66
 4000dd0:	040010ac 	andhi	r16,zero,66
 4000dd4:	040010ac 	andhi	r16,zero,66
 4000dd8:	040010ac 	andhi	r16,zero,66
 4000ddc:	040010ac 	andhi	r16,zero,66
 4000de0:	040010ac 	andhi	r16,zero,66
 4000de4:	040010ac 	andhi	r16,zero,66
 4000de8:	040010ac 	andhi	r16,zero,66
 4000dec:	040010ac 	andhi	r16,zero,66
 4000df0:	040010ac 	andhi	r16,zero,66
 4000df4:	04001984 	movi	r16,102
 4000df8:	04001984 	movi	r16,102
 4000dfc:	04001984 	movi	r16,102
 4000e00:	04001984 	movi	r16,102
 4000e04:	04001984 	movi	r16,102
 4000e08:	04001984 	movi	r16,102
 4000e0c:	04001984 	movi	r16,102
 4000e10:	04001984 	movi	r16,102
 4000e14:	04001984 	movi	r16,102
 4000e18:	04001984 	movi	r16,102
 4000e1c:	040010e0 	cmpeqi	r16,zero,67
 4000e20:	0400119c 	xori	r16,zero,70
 4000e24:	04001984 	movi	r16,102
 4000e28:	0400119c 	xori	r16,zero,70
 4000e2c:	04001984 	movi	r16,102
 4000e30:	04001984 	movi	r16,102
 4000e34:	04001984 	movi	r16,102
 4000e38:	04001984 	movi	r16,102
 4000e3c:	0400123c 	xorhi	r16,zero,72
 4000e40:	04001984 	movi	r16,102
 4000e44:	04001984 	movi	r16,102
 4000e48:	04001248 	cmpgei	r16,zero,73
 4000e4c:	04001984 	movi	r16,102
 4000e50:	04001984 	movi	r16,102
 4000e54:	04001984 	movi	r16,102
 4000e58:	04001984 	movi	r16,102
 4000e5c:	04001984 	movi	r16,102
 4000e60:	040016c0 	call	40016c <OSCtxSw_SWITCH_PC+0x40012c>
 4000e64:	04001984 	movi	r16,102
 4000e68:	04001984 	movi	r16,102
 4000e6c:	04001720 	cmpeqi	r16,zero,92
 4000e70:	04001984 	movi	r16,102
 4000e74:	04001984 	movi	r16,102
 4000e78:	04001984 	movi	r16,102
 4000e7c:	04001984 	movi	r16,102
 4000e80:	04001984 	movi	r16,102
 4000e84:	04001984 	movi	r16,102
 4000e88:	04001984 	movi	r16,102
 4000e8c:	04001984 	movi	r16,102
 4000e90:	04001984 	movi	r16,102
 4000e94:	04001984 	movi	r16,102
 4000e98:	04001930 	cmpltui	r16,zero,100
 4000e9c:	040018d0 	cmplti	r16,zero,99
 4000ea0:	0400119c 	xori	r16,zero,70
 4000ea4:	0400119c 	xori	r16,zero,70
 4000ea8:	0400119c 	xori	r16,zero,70
 4000eac:	040018e0 	cmpeqi	r16,zero,99
 4000eb0:	040018d0 	cmplti	r16,zero,99
 4000eb4:	04001984 	movi	r16,102
 4000eb8:	04001984 	movi	r16,102
 4000ebc:	040018ec 	andhi	r16,zero,99
 4000ec0:	04001984 	movi	r16,102
 4000ec4:	040018fc 	xorhi	r16,zero,99
 4000ec8:	040017d0 	cmplti	r16,zero,95
 4000ecc:	04000f0c 	andi	r16,zero,60
 4000ed0:	040017f0 	cmpltui	r16,zero,95
 4000ed4:	04001984 	movi	r16,102
 4000ed8:	040017fc 	xorhi	r16,zero,95
 4000edc:	04001984 	movi	r16,102
 4000ee0:	04001858 	cmpnei	r16,zero,97
 4000ee4:	04001984 	movi	r16,102
 4000ee8:	04001984 	movi	r16,102
 4000eec:	04001868 	cmpgeui	r16,zero,97
 4000ef0:	d9003117 	ldw	r4,196(sp)
 4000ef4:	d8802d15 	stw	r2,180(sp)
 4000ef8:	0109c83a 	sub	r4,zero,r4
 4000efc:	d9003115 	stw	r4,196(sp)
 4000f00:	94800114 	ori	r18,r18,4
 4000f04:	ac400007 	ldb	r17,0(r21)
 4000f08:	003f9706 	br	4000d68 <__alt_mem_onchip_memory2_0+0xfbfe0d68>
 4000f0c:	00800c04 	movi	r2,48
 4000f10:	d9002d17 	ldw	r4,180(sp)
 4000f14:	d9402917 	ldw	r5,164(sp)
 4000f18:	d8802705 	stb	r2,156(sp)
 4000f1c:	00801e04 	movi	r2,120
 4000f20:	d8802745 	stb	r2,157(sp)
 4000f24:	d8002785 	stb	zero,158(sp)
 4000f28:	20c00104 	addi	r3,r4,4
 4000f2c:	24c00017 	ldw	r19,0(r4)
 4000f30:	002d883a 	mov	r22,zero
 4000f34:	90800094 	ori	r2,r18,2
 4000f38:	28029a16 	blt	r5,zero,40019a4 <___vfprintf_internal_r+0xdc0>
 4000f3c:	00bfdfc4 	movi	r2,-129
 4000f40:	90a4703a 	and	r18,r18,r2
 4000f44:	d8c02d15 	stw	r3,180(sp)
 4000f48:	94800094 	ori	r18,r18,2
 4000f4c:	9802871e 	bne	r19,zero,400196c <___vfprintf_internal_r+0xd88>
 4000f50:	008100b4 	movhi	r2,1026
 4000f54:	10a21304 	addi	r2,r2,-30644
 4000f58:	d8803915 	stw	r2,228(sp)
 4000f5c:	04401e04 	movi	r17,120
 4000f60:	d8802917 	ldw	r2,164(sp)
 4000f64:	0039883a 	mov	fp,zero
 4000f68:	1001e926 	beq	r2,zero,4001710 <___vfprintf_internal_r+0xb2c>
 4000f6c:	0027883a 	mov	r19,zero
 4000f70:	002d883a 	mov	r22,zero
 4000f74:	00020506 	br	400178c <___vfprintf_internal_r+0xba8>
 4000f78:	d9002c17 	ldw	r4,176(sp)
 4000f7c:	b80b883a 	mov	r5,r23
 4000f80:	4002eb40 	call	4002eb4 <__swsetup_r>
 4000f84:	1005ac1e 	bne	r2,zero,4002638 <___vfprintf_internal_r+0x1a54>
 4000f88:	b880030b 	ldhu	r2,12(r23)
 4000f8c:	00c00284 	movi	r3,10
 4000f90:	1080068c 	andi	r2,r2,26
 4000f94:	10ff3c1e 	bne	r2,r3,4000c88 <__alt_mem_onchip_memory2_0+0xfbfe0c88>
 4000f98:	b880038f 	ldh	r2,14(r23)
 4000f9c:	103f3a16 	blt	r2,zero,4000c88 <__alt_mem_onchip_memory2_0+0xfbfe0c88>
 4000fa0:	d9c02d17 	ldw	r7,180(sp)
 4000fa4:	d9002c17 	ldw	r4,176(sp)
 4000fa8:	a80d883a 	mov	r6,r21
 4000fac:	b80b883a 	mov	r5,r23
 4000fb0:	4002df80 	call	4002df8 <__sbprintf>
 4000fb4:	00001106 	br	4000ffc <___vfprintf_internal_r+0x418>
 4000fb8:	d9002c17 	ldw	r4,176(sp)
 4000fbc:	d9801e04 	addi	r6,sp,120
 4000fc0:	b80b883a 	mov	r5,r23
 4000fc4:	40081e00 	call	40081e0 <__sprint_r>
 4000fc8:	1000081e 	bne	r2,zero,4000fec <___vfprintf_internal_r+0x408>
 4000fcc:	da000404 	addi	r8,sp,16
 4000fd0:	003f5306 	br	4000d20 <__alt_mem_onchip_memory2_0+0xfbfe0d20>
 4000fd4:	d8802017 	ldw	r2,128(sp)
 4000fd8:	10000426 	beq	r2,zero,4000fec <___vfprintf_internal_r+0x408>
 4000fdc:	d9002c17 	ldw	r4,176(sp)
 4000fe0:	d9801e04 	addi	r6,sp,120
 4000fe4:	b80b883a 	mov	r5,r23
 4000fe8:	40081e00 	call	40081e0 <__sprint_r>
 4000fec:	b880030b 	ldhu	r2,12(r23)
 4000ff0:	1080100c 	andi	r2,r2,64
 4000ff4:	1005901e 	bne	r2,zero,4002638 <___vfprintf_internal_r+0x1a54>
 4000ff8:	d8802f17 	ldw	r2,188(sp)
 4000ffc:	dfc04717 	ldw	ra,284(sp)
 4001000:	df004617 	ldw	fp,280(sp)
 4001004:	ddc04517 	ldw	r23,276(sp)
 4001008:	dd804417 	ldw	r22,272(sp)
 400100c:	dd404317 	ldw	r21,268(sp)
 4001010:	dd004217 	ldw	r20,264(sp)
 4001014:	dcc04117 	ldw	r19,260(sp)
 4001018:	dc804017 	ldw	r18,256(sp)
 400101c:	dc403f17 	ldw	r17,252(sp)
 4001020:	dc003e17 	ldw	r16,248(sp)
 4001024:	dec04804 	addi	sp,sp,288
 4001028:	f800283a 	ret
 400102c:	d9002c17 	ldw	r4,176(sp)
 4001030:	4004e880 	call	4004e88 <__sinit>
 4001034:	003f0406 	br	4000c48 <__alt_mem_onchip_memory2_0+0xfbfe0c48>
 4001038:	d8802d17 	ldw	r2,180(sp)
 400103c:	d9002d17 	ldw	r4,180(sp)
 4001040:	10800017 	ldw	r2,0(r2)
 4001044:	d8803115 	stw	r2,196(sp)
 4001048:	20800104 	addi	r2,r4,4
 400104c:	d9003117 	ldw	r4,196(sp)
 4001050:	203fa716 	blt	r4,zero,4000ef0 <__alt_mem_onchip_memory2_0+0xfbfe0ef0>
 4001054:	d8802d15 	stw	r2,180(sp)
 4001058:	ac400007 	ldb	r17,0(r21)
 400105c:	003f4206 	br	4000d68 <__alt_mem_onchip_memory2_0+0xfbfe0d68>
 4001060:	ac400007 	ldb	r17,0(r21)
 4001064:	aac00044 	addi	r11,r21,1
 4001068:	8a872826 	beq	r17,r10,4002d0c <___vfprintf_internal_r+0x2128>
 400106c:	88bff404 	addi	r2,r17,-48
 4001070:	0009883a 	mov	r4,zero
 4001074:	30867d36 	bltu	r6,r2,4002a6c <___vfprintf_internal_r+0x1e88>
 4001078:	5c400007 	ldb	r17,0(r11)
 400107c:	210002a4 	muli	r4,r4,10
 4001080:	5d400044 	addi	r21,r11,1
 4001084:	a817883a 	mov	r11,r21
 4001088:	2089883a 	add	r4,r4,r2
 400108c:	88bff404 	addi	r2,r17,-48
 4001090:	30bff92e 	bgeu	r6,r2,4001078 <__alt_mem_onchip_memory2_0+0xfbfe1078>
 4001094:	2005c916 	blt	r4,zero,40027bc <___vfprintf_internal_r+0x1bd8>
 4001098:	d9002915 	stw	r4,164(sp)
 400109c:	003f3306 	br	4000d6c <__alt_mem_onchip_memory2_0+0xfbfe0d6c>
 40010a0:	94802014 	ori	r18,r18,128
 40010a4:	ac400007 	ldb	r17,0(r21)
 40010a8:	003f2f06 	br	4000d68 <__alt_mem_onchip_memory2_0+0xfbfe0d68>
 40010ac:	a809883a 	mov	r4,r21
 40010b0:	d8003115 	stw	zero,196(sp)
 40010b4:	88bff404 	addi	r2,r17,-48
 40010b8:	0017883a 	mov	r11,zero
 40010bc:	24400007 	ldb	r17,0(r4)
 40010c0:	5ac002a4 	muli	r11,r11,10
 40010c4:	ad400044 	addi	r21,r21,1
 40010c8:	a809883a 	mov	r4,r21
 40010cc:	12d7883a 	add	r11,r2,r11
 40010d0:	88bff404 	addi	r2,r17,-48
 40010d4:	30bff92e 	bgeu	r6,r2,40010bc <__alt_mem_onchip_memory2_0+0xfbfe10bc>
 40010d8:	dac03115 	stw	r11,196(sp)
 40010dc:	003f2306 	br	4000d6c <__alt_mem_onchip_memory2_0+0xfbfe0d6c>
 40010e0:	18c03fcc 	andi	r3,r3,255
 40010e4:	18072b1e 	bne	r3,zero,4002d94 <___vfprintf_internal_r+0x21b0>
 40010e8:	94800414 	ori	r18,r18,16
 40010ec:	9080080c 	andi	r2,r18,32
 40010f0:	10037b26 	beq	r2,zero,4001ee0 <___vfprintf_internal_r+0x12fc>
 40010f4:	d9402d17 	ldw	r5,180(sp)
 40010f8:	28800117 	ldw	r2,4(r5)
 40010fc:	2cc00017 	ldw	r19,0(r5)
 4001100:	29400204 	addi	r5,r5,8
 4001104:	d9402d15 	stw	r5,180(sp)
 4001108:	102d883a 	mov	r22,r2
 400110c:	10044b16 	blt	r2,zero,400223c <___vfprintf_internal_r+0x1658>
 4001110:	d9402917 	ldw	r5,164(sp)
 4001114:	df002783 	ldbu	fp,158(sp)
 4001118:	2803bc16 	blt	r5,zero,400200c <___vfprintf_internal_r+0x1428>
 400111c:	00ffdfc4 	movi	r3,-129
 4001120:	9d84b03a 	or	r2,r19,r22
 4001124:	90e4703a 	and	r18,r18,r3
 4001128:	10017726 	beq	r2,zero,4001708 <___vfprintf_internal_r+0xb24>
 400112c:	b0038326 	beq	r22,zero,4001f3c <___vfprintf_internal_r+0x1358>
 4001130:	dc402a15 	stw	r17,168(sp)
 4001134:	dc001e04 	addi	r16,sp,120
 4001138:	b023883a 	mov	r17,r22
 400113c:	402d883a 	mov	r22,r8
 4001140:	9809883a 	mov	r4,r19
 4001144:	880b883a 	mov	r5,r17
 4001148:	01800284 	movi	r6,10
 400114c:	000f883a 	mov	r7,zero
 4001150:	400a5d80 	call	400a5d8 <__umoddi3>
 4001154:	10800c04 	addi	r2,r2,48
 4001158:	843fffc4 	addi	r16,r16,-1
 400115c:	9809883a 	mov	r4,r19
 4001160:	880b883a 	mov	r5,r17
 4001164:	80800005 	stb	r2,0(r16)
 4001168:	01800284 	movi	r6,10
 400116c:	000f883a 	mov	r7,zero
 4001170:	400a0600 	call	400a060 <__udivdi3>
 4001174:	1027883a 	mov	r19,r2
 4001178:	10c4b03a 	or	r2,r2,r3
 400117c:	1823883a 	mov	r17,r3
 4001180:	103fef1e 	bne	r2,zero,4001140 <__alt_mem_onchip_memory2_0+0xfbfe1140>
 4001184:	d8c02817 	ldw	r3,160(sp)
 4001188:	dc402a17 	ldw	r17,168(sp)
 400118c:	b011883a 	mov	r8,r22
 4001190:	1c07c83a 	sub	r3,r3,r16
 4001194:	d8c02e15 	stw	r3,184(sp)
 4001198:	00005906 	br	4001300 <___vfprintf_internal_r+0x71c>
 400119c:	18c03fcc 	andi	r3,r3,255
 40011a0:	1806fa1e 	bne	r3,zero,4002d8c <___vfprintf_internal_r+0x21a8>
 40011a4:	9080020c 	andi	r2,r18,8
 40011a8:	10048a26 	beq	r2,zero,40023d4 <___vfprintf_internal_r+0x17f0>
 40011ac:	d8c02d17 	ldw	r3,180(sp)
 40011b0:	d9002d17 	ldw	r4,180(sp)
 40011b4:	d9402d17 	ldw	r5,180(sp)
 40011b8:	18c00017 	ldw	r3,0(r3)
 40011bc:	21000117 	ldw	r4,4(r4)
 40011c0:	29400204 	addi	r5,r5,8
 40011c4:	d8c03615 	stw	r3,216(sp)
 40011c8:	d9003815 	stw	r4,224(sp)
 40011cc:	d9402d15 	stw	r5,180(sp)
 40011d0:	d9003617 	ldw	r4,216(sp)
 40011d4:	d9403817 	ldw	r5,224(sp)
 40011d8:	da003d15 	stw	r8,244(sp)
 40011dc:	04000044 	movi	r16,1
 40011e0:	4007e040 	call	4007e04 <__fpclassifyd>
 40011e4:	da003d17 	ldw	r8,244(sp)
 40011e8:	14041f1e 	bne	r2,r16,4002268 <___vfprintf_internal_r+0x1684>
 40011ec:	d9003617 	ldw	r4,216(sp)
 40011f0:	d9403817 	ldw	r5,224(sp)
 40011f4:	000d883a 	mov	r6,zero
 40011f8:	000f883a 	mov	r7,zero
 40011fc:	400bfbc0 	call	400bfbc <__ledf2>
 4001200:	da003d17 	ldw	r8,244(sp)
 4001204:	1005be16 	blt	r2,zero,4002900 <___vfprintf_internal_r+0x1d1c>
 4001208:	df002783 	ldbu	fp,158(sp)
 400120c:	008011c4 	movi	r2,71
 4001210:	1445330e 	bge	r2,r17,40026e0 <___vfprintf_internal_r+0x1afc>
 4001214:	040100b4 	movhi	r16,1026
 4001218:	84220b04 	addi	r16,r16,-30676
 400121c:	00c000c4 	movi	r3,3
 4001220:	00bfdfc4 	movi	r2,-129
 4001224:	d8c02a15 	stw	r3,168(sp)
 4001228:	90a4703a 	and	r18,r18,r2
 400122c:	d8c02e15 	stw	r3,184(sp)
 4001230:	d8002915 	stw	zero,164(sp)
 4001234:	d8003215 	stw	zero,200(sp)
 4001238:	00003706 	br	4001318 <___vfprintf_internal_r+0x734>
 400123c:	94800214 	ori	r18,r18,8
 4001240:	ac400007 	ldb	r17,0(r21)
 4001244:	003ec806 	br	4000d68 <__alt_mem_onchip_memory2_0+0xfbfe0d68>
 4001248:	18c03fcc 	andi	r3,r3,255
 400124c:	1806db1e 	bne	r3,zero,4002dbc <___vfprintf_internal_r+0x21d8>
 4001250:	94800414 	ori	r18,r18,16
 4001254:	9080080c 	andi	r2,r18,32
 4001258:	1002d826 	beq	r2,zero,4001dbc <___vfprintf_internal_r+0x11d8>
 400125c:	d9402d17 	ldw	r5,180(sp)
 4001260:	d8c02917 	ldw	r3,164(sp)
 4001264:	d8002785 	stb	zero,158(sp)
 4001268:	28800204 	addi	r2,r5,8
 400126c:	2cc00017 	ldw	r19,0(r5)
 4001270:	2d800117 	ldw	r22,4(r5)
 4001274:	18048f16 	blt	r3,zero,40024b4 <___vfprintf_internal_r+0x18d0>
 4001278:	013fdfc4 	movi	r4,-129
 400127c:	9d86b03a 	or	r3,r19,r22
 4001280:	d8802d15 	stw	r2,180(sp)
 4001284:	9124703a 	and	r18,r18,r4
 4001288:	1802d91e 	bne	r3,zero,4001df0 <___vfprintf_internal_r+0x120c>
 400128c:	d8c02917 	ldw	r3,164(sp)
 4001290:	0039883a 	mov	fp,zero
 4001294:	1805c326 	beq	r3,zero,40029a4 <___vfprintf_internal_r+0x1dc0>
 4001298:	0027883a 	mov	r19,zero
 400129c:	002d883a 	mov	r22,zero
 40012a0:	dc001e04 	addi	r16,sp,120
 40012a4:	9806d0fa 	srli	r3,r19,3
 40012a8:	b008977a 	slli	r4,r22,29
 40012ac:	b02cd0fa 	srli	r22,r22,3
 40012b0:	9cc001cc 	andi	r19,r19,7
 40012b4:	98800c04 	addi	r2,r19,48
 40012b8:	843fffc4 	addi	r16,r16,-1
 40012bc:	20e6b03a 	or	r19,r4,r3
 40012c0:	80800005 	stb	r2,0(r16)
 40012c4:	9d86b03a 	or	r3,r19,r22
 40012c8:	183ff61e 	bne	r3,zero,40012a4 <__alt_mem_onchip_memory2_0+0xfbfe12a4>
 40012cc:	90c0004c 	andi	r3,r18,1
 40012d0:	18013b26 	beq	r3,zero,40017c0 <___vfprintf_internal_r+0xbdc>
 40012d4:	10803fcc 	andi	r2,r2,255
 40012d8:	1080201c 	xori	r2,r2,128
 40012dc:	10bfe004 	addi	r2,r2,-128
 40012e0:	00c00c04 	movi	r3,48
 40012e4:	10c13626 	beq	r2,r3,40017c0 <___vfprintf_internal_r+0xbdc>
 40012e8:	80ffffc5 	stb	r3,-1(r16)
 40012ec:	d8c02817 	ldw	r3,160(sp)
 40012f0:	80bfffc4 	addi	r2,r16,-1
 40012f4:	1021883a 	mov	r16,r2
 40012f8:	1887c83a 	sub	r3,r3,r2
 40012fc:	d8c02e15 	stw	r3,184(sp)
 4001300:	d8802e17 	ldw	r2,184(sp)
 4001304:	d9002917 	ldw	r4,164(sp)
 4001308:	1100010e 	bge	r2,r4,4001310 <___vfprintf_internal_r+0x72c>
 400130c:	2005883a 	mov	r2,r4
 4001310:	d8802a15 	stw	r2,168(sp)
 4001314:	d8003215 	stw	zero,200(sp)
 4001318:	e7003fcc 	andi	fp,fp,255
 400131c:	e700201c 	xori	fp,fp,128
 4001320:	e73fe004 	addi	fp,fp,-128
 4001324:	e0000326 	beq	fp,zero,4001334 <___vfprintf_internal_r+0x750>
 4001328:	d8c02a17 	ldw	r3,168(sp)
 400132c:	18c00044 	addi	r3,r3,1
 4001330:	d8c02a15 	stw	r3,168(sp)
 4001334:	90c0008c 	andi	r3,r18,2
 4001338:	d8c02b15 	stw	r3,172(sp)
 400133c:	18000326 	beq	r3,zero,400134c <___vfprintf_internal_r+0x768>
 4001340:	d8c02a17 	ldw	r3,168(sp)
 4001344:	18c00084 	addi	r3,r3,2
 4001348:	d8c02a15 	stw	r3,168(sp)
 400134c:	90c0210c 	andi	r3,r18,132
 4001350:	d8c03015 	stw	r3,192(sp)
 4001354:	1801a31e 	bne	r3,zero,40019e4 <___vfprintf_internal_r+0xe00>
 4001358:	d9003117 	ldw	r4,196(sp)
 400135c:	d8c02a17 	ldw	r3,168(sp)
 4001360:	20e7c83a 	sub	r19,r4,r3
 4001364:	04c19f0e 	bge	zero,r19,40019e4 <___vfprintf_internal_r+0xe00>
 4001368:	02400404 	movi	r9,16
 400136c:	d8c02017 	ldw	r3,128(sp)
 4001370:	d8801f17 	ldw	r2,124(sp)
 4001374:	4cc50d0e 	bge	r9,r19,40027ac <___vfprintf_internal_r+0x1bc8>
 4001378:	014100b4 	movhi	r5,1026
 400137c:	29621e84 	addi	r5,r5,-30598
 4001380:	dc403b15 	stw	r17,236(sp)
 4001384:	d9403515 	stw	r5,212(sp)
 4001388:	9823883a 	mov	r17,r19
 400138c:	482d883a 	mov	r22,r9
 4001390:	9027883a 	mov	r19,r18
 4001394:	070001c4 	movi	fp,7
 4001398:	8025883a 	mov	r18,r16
 400139c:	dc002c17 	ldw	r16,176(sp)
 40013a0:	00000306 	br	40013b0 <___vfprintf_internal_r+0x7cc>
 40013a4:	8c7ffc04 	addi	r17,r17,-16
 40013a8:	42000204 	addi	r8,r8,8
 40013ac:	b440130e 	bge	r22,r17,40013fc <___vfprintf_internal_r+0x818>
 40013b0:	010100b4 	movhi	r4,1026
 40013b4:	18c00404 	addi	r3,r3,16
 40013b8:	10800044 	addi	r2,r2,1
 40013bc:	21221e84 	addi	r4,r4,-30598
 40013c0:	41000015 	stw	r4,0(r8)
 40013c4:	45800115 	stw	r22,4(r8)
 40013c8:	d8c02015 	stw	r3,128(sp)
 40013cc:	d8801f15 	stw	r2,124(sp)
 40013d0:	e0bff40e 	bge	fp,r2,40013a4 <__alt_mem_onchip_memory2_0+0xfbfe13a4>
 40013d4:	d9801e04 	addi	r6,sp,120
 40013d8:	b80b883a 	mov	r5,r23
 40013dc:	8009883a 	mov	r4,r16
 40013e0:	40081e00 	call	40081e0 <__sprint_r>
 40013e4:	103f011e 	bne	r2,zero,4000fec <__alt_mem_onchip_memory2_0+0xfbfe0fec>
 40013e8:	8c7ffc04 	addi	r17,r17,-16
 40013ec:	d8c02017 	ldw	r3,128(sp)
 40013f0:	d8801f17 	ldw	r2,124(sp)
 40013f4:	da000404 	addi	r8,sp,16
 40013f8:	b47fed16 	blt	r22,r17,40013b0 <__alt_mem_onchip_memory2_0+0xfbfe13b0>
 40013fc:	9021883a 	mov	r16,r18
 4001400:	9825883a 	mov	r18,r19
 4001404:	8827883a 	mov	r19,r17
 4001408:	dc403b17 	ldw	r17,236(sp)
 400140c:	d9403517 	ldw	r5,212(sp)
 4001410:	98c7883a 	add	r3,r19,r3
 4001414:	10800044 	addi	r2,r2,1
 4001418:	41400015 	stw	r5,0(r8)
 400141c:	44c00115 	stw	r19,4(r8)
 4001420:	d8c02015 	stw	r3,128(sp)
 4001424:	d8801f15 	stw	r2,124(sp)
 4001428:	010001c4 	movi	r4,7
 400142c:	2082a316 	blt	r4,r2,4001ebc <___vfprintf_internal_r+0x12d8>
 4001430:	df002787 	ldb	fp,158(sp)
 4001434:	42000204 	addi	r8,r8,8
 4001438:	e0000c26 	beq	fp,zero,400146c <___vfprintf_internal_r+0x888>
 400143c:	d8801f17 	ldw	r2,124(sp)
 4001440:	d9002784 	addi	r4,sp,158
 4001444:	18c00044 	addi	r3,r3,1
 4001448:	10800044 	addi	r2,r2,1
 400144c:	41000015 	stw	r4,0(r8)
 4001450:	01000044 	movi	r4,1
 4001454:	41000115 	stw	r4,4(r8)
 4001458:	d8c02015 	stw	r3,128(sp)
 400145c:	d8801f15 	stw	r2,124(sp)
 4001460:	010001c4 	movi	r4,7
 4001464:	20823c16 	blt	r4,r2,4001d58 <___vfprintf_internal_r+0x1174>
 4001468:	42000204 	addi	r8,r8,8
 400146c:	d8802b17 	ldw	r2,172(sp)
 4001470:	10000c26 	beq	r2,zero,40014a4 <___vfprintf_internal_r+0x8c0>
 4001474:	d8801f17 	ldw	r2,124(sp)
 4001478:	d9002704 	addi	r4,sp,156
 400147c:	18c00084 	addi	r3,r3,2
 4001480:	10800044 	addi	r2,r2,1
 4001484:	41000015 	stw	r4,0(r8)
 4001488:	01000084 	movi	r4,2
 400148c:	41000115 	stw	r4,4(r8)
 4001490:	d8c02015 	stw	r3,128(sp)
 4001494:	d8801f15 	stw	r2,124(sp)
 4001498:	010001c4 	movi	r4,7
 400149c:	20823616 	blt	r4,r2,4001d78 <___vfprintf_internal_r+0x1194>
 40014a0:	42000204 	addi	r8,r8,8
 40014a4:	d9003017 	ldw	r4,192(sp)
 40014a8:	00802004 	movi	r2,128
 40014ac:	20819926 	beq	r4,r2,4001b14 <___vfprintf_internal_r+0xf30>
 40014b0:	d9402917 	ldw	r5,164(sp)
 40014b4:	d8802e17 	ldw	r2,184(sp)
 40014b8:	28adc83a 	sub	r22,r5,r2
 40014bc:	0580310e 	bge	zero,r22,4001584 <___vfprintf_internal_r+0x9a0>
 40014c0:	07000404 	movi	fp,16
 40014c4:	d8801f17 	ldw	r2,124(sp)
 40014c8:	e584140e 	bge	fp,r22,400251c <___vfprintf_internal_r+0x1938>
 40014cc:	014100b4 	movhi	r5,1026
 40014d0:	29621a84 	addi	r5,r5,-30614
 40014d4:	dc402915 	stw	r17,164(sp)
 40014d8:	d9402b15 	stw	r5,172(sp)
 40014dc:	b023883a 	mov	r17,r22
 40014e0:	04c001c4 	movi	r19,7
 40014e4:	a82d883a 	mov	r22,r21
 40014e8:	902b883a 	mov	r21,r18
 40014ec:	8025883a 	mov	r18,r16
 40014f0:	dc002c17 	ldw	r16,176(sp)
 40014f4:	00000306 	br	4001504 <___vfprintf_internal_r+0x920>
 40014f8:	8c7ffc04 	addi	r17,r17,-16
 40014fc:	42000204 	addi	r8,r8,8
 4001500:	e440110e 	bge	fp,r17,4001548 <___vfprintf_internal_r+0x964>
 4001504:	18c00404 	addi	r3,r3,16
 4001508:	10800044 	addi	r2,r2,1
 400150c:	45000015 	stw	r20,0(r8)
 4001510:	47000115 	stw	fp,4(r8)
 4001514:	d8c02015 	stw	r3,128(sp)
 4001518:	d8801f15 	stw	r2,124(sp)
 400151c:	98bff60e 	bge	r19,r2,40014f8 <__alt_mem_onchip_memory2_0+0xfbfe14f8>
 4001520:	d9801e04 	addi	r6,sp,120
 4001524:	b80b883a 	mov	r5,r23
 4001528:	8009883a 	mov	r4,r16
 400152c:	40081e00 	call	40081e0 <__sprint_r>
 4001530:	103eae1e 	bne	r2,zero,4000fec <__alt_mem_onchip_memory2_0+0xfbfe0fec>
 4001534:	8c7ffc04 	addi	r17,r17,-16
 4001538:	d8c02017 	ldw	r3,128(sp)
 400153c:	d8801f17 	ldw	r2,124(sp)
 4001540:	da000404 	addi	r8,sp,16
 4001544:	e47fef16 	blt	fp,r17,4001504 <__alt_mem_onchip_memory2_0+0xfbfe1504>
 4001548:	9021883a 	mov	r16,r18
 400154c:	a825883a 	mov	r18,r21
 4001550:	b02b883a 	mov	r21,r22
 4001554:	882d883a 	mov	r22,r17
 4001558:	dc402917 	ldw	r17,164(sp)
 400155c:	d9002b17 	ldw	r4,172(sp)
 4001560:	1d87883a 	add	r3,r3,r22
 4001564:	10800044 	addi	r2,r2,1
 4001568:	41000015 	stw	r4,0(r8)
 400156c:	45800115 	stw	r22,4(r8)
 4001570:	d8c02015 	stw	r3,128(sp)
 4001574:	d8801f15 	stw	r2,124(sp)
 4001578:	010001c4 	movi	r4,7
 400157c:	2081ee16 	blt	r4,r2,4001d38 <___vfprintf_internal_r+0x1154>
 4001580:	42000204 	addi	r8,r8,8
 4001584:	9080400c 	andi	r2,r18,256
 4001588:	1001181e 	bne	r2,zero,40019ec <___vfprintf_internal_r+0xe08>
 400158c:	d9402e17 	ldw	r5,184(sp)
 4001590:	d8801f17 	ldw	r2,124(sp)
 4001594:	44000015 	stw	r16,0(r8)
 4001598:	1947883a 	add	r3,r3,r5
 400159c:	10800044 	addi	r2,r2,1
 40015a0:	41400115 	stw	r5,4(r8)
 40015a4:	d8c02015 	stw	r3,128(sp)
 40015a8:	d8801f15 	stw	r2,124(sp)
 40015ac:	010001c4 	movi	r4,7
 40015b0:	2081d316 	blt	r4,r2,4001d00 <___vfprintf_internal_r+0x111c>
 40015b4:	42000204 	addi	r8,r8,8
 40015b8:	9480010c 	andi	r18,r18,4
 40015bc:	90003226 	beq	r18,zero,4001688 <___vfprintf_internal_r+0xaa4>
 40015c0:	d9403117 	ldw	r5,196(sp)
 40015c4:	d8802a17 	ldw	r2,168(sp)
 40015c8:	28a1c83a 	sub	r16,r5,r2
 40015cc:	04002e0e 	bge	zero,r16,4001688 <___vfprintf_internal_r+0xaa4>
 40015d0:	04400404 	movi	r17,16
 40015d4:	d8801f17 	ldw	r2,124(sp)
 40015d8:	8c04a20e 	bge	r17,r16,4002864 <___vfprintf_internal_r+0x1c80>
 40015dc:	014100b4 	movhi	r5,1026
 40015e0:	29621e84 	addi	r5,r5,-30598
 40015e4:	d9403515 	stw	r5,212(sp)
 40015e8:	048001c4 	movi	r18,7
 40015ec:	dcc02c17 	ldw	r19,176(sp)
 40015f0:	00000306 	br	4001600 <___vfprintf_internal_r+0xa1c>
 40015f4:	843ffc04 	addi	r16,r16,-16
 40015f8:	42000204 	addi	r8,r8,8
 40015fc:	8c00130e 	bge	r17,r16,400164c <___vfprintf_internal_r+0xa68>
 4001600:	010100b4 	movhi	r4,1026
 4001604:	18c00404 	addi	r3,r3,16
 4001608:	10800044 	addi	r2,r2,1
 400160c:	21221e84 	addi	r4,r4,-30598
 4001610:	41000015 	stw	r4,0(r8)
 4001614:	44400115 	stw	r17,4(r8)
 4001618:	d8c02015 	stw	r3,128(sp)
 400161c:	d8801f15 	stw	r2,124(sp)
 4001620:	90bff40e 	bge	r18,r2,40015f4 <__alt_mem_onchip_memory2_0+0xfbfe15f4>
 4001624:	d9801e04 	addi	r6,sp,120
 4001628:	b80b883a 	mov	r5,r23
 400162c:	9809883a 	mov	r4,r19
 4001630:	40081e00 	call	40081e0 <__sprint_r>
 4001634:	103e6d1e 	bne	r2,zero,4000fec <__alt_mem_onchip_memory2_0+0xfbfe0fec>
 4001638:	843ffc04 	addi	r16,r16,-16
 400163c:	d8c02017 	ldw	r3,128(sp)
 4001640:	d8801f17 	ldw	r2,124(sp)
 4001644:	da000404 	addi	r8,sp,16
 4001648:	8c3fed16 	blt	r17,r16,4001600 <__alt_mem_onchip_memory2_0+0xfbfe1600>
 400164c:	d9403517 	ldw	r5,212(sp)
 4001650:	1c07883a 	add	r3,r3,r16
 4001654:	10800044 	addi	r2,r2,1
 4001658:	41400015 	stw	r5,0(r8)
 400165c:	44000115 	stw	r16,4(r8)
 4001660:	d8c02015 	stw	r3,128(sp)
 4001664:	d8801f15 	stw	r2,124(sp)
 4001668:	010001c4 	movi	r4,7
 400166c:	2080060e 	bge	r4,r2,4001688 <___vfprintf_internal_r+0xaa4>
 4001670:	d9002c17 	ldw	r4,176(sp)
 4001674:	d9801e04 	addi	r6,sp,120
 4001678:	b80b883a 	mov	r5,r23
 400167c:	40081e00 	call	40081e0 <__sprint_r>
 4001680:	103e5a1e 	bne	r2,zero,4000fec <__alt_mem_onchip_memory2_0+0xfbfe0fec>
 4001684:	d8c02017 	ldw	r3,128(sp)
 4001688:	d8803117 	ldw	r2,196(sp)
 400168c:	d9002a17 	ldw	r4,168(sp)
 4001690:	1100010e 	bge	r2,r4,4001698 <___vfprintf_internal_r+0xab4>
 4001694:	2005883a 	mov	r2,r4
 4001698:	d9402f17 	ldw	r5,188(sp)
 400169c:	288b883a 	add	r5,r5,r2
 40016a0:	d9402f15 	stw	r5,188(sp)
 40016a4:	18019e1e 	bne	r3,zero,4001d20 <___vfprintf_internal_r+0x113c>
 40016a8:	a8800007 	ldb	r2,0(r21)
 40016ac:	d8001f15 	stw	zero,124(sp)
 40016b0:	da000404 	addi	r8,sp,16
 40016b4:	103d851e 	bne	r2,zero,4000ccc <__alt_mem_onchip_memory2_0+0xfbfe0ccc>
 40016b8:	a821883a 	mov	r16,r21
 40016bc:	003d9b06 	br	4000d2c <__alt_mem_onchip_memory2_0+0xfbfe0d2c>
 40016c0:	18c03fcc 	andi	r3,r3,255
 40016c4:	1805c11e 	bne	r3,zero,4002dcc <___vfprintf_internal_r+0x21e8>
 40016c8:	94800414 	ori	r18,r18,16
 40016cc:	9080080c 	andi	r2,r18,32
 40016d0:	10020c26 	beq	r2,zero,4001f04 <___vfprintf_internal_r+0x1320>
 40016d4:	d8802d17 	ldw	r2,180(sp)
 40016d8:	d9002917 	ldw	r4,164(sp)
 40016dc:	d8002785 	stb	zero,158(sp)
 40016e0:	10c00204 	addi	r3,r2,8
 40016e4:	14c00017 	ldw	r19,0(r2)
 40016e8:	15800117 	ldw	r22,4(r2)
 40016ec:	20040f16 	blt	r4,zero,400272c <___vfprintf_internal_r+0x1b48>
 40016f0:	013fdfc4 	movi	r4,-129
 40016f4:	9d84b03a 	or	r2,r19,r22
 40016f8:	d8c02d15 	stw	r3,180(sp)
 40016fc:	9124703a 	and	r18,r18,r4
 4001700:	0039883a 	mov	fp,zero
 4001704:	103e891e 	bne	r2,zero,400112c <__alt_mem_onchip_memory2_0+0xfbfe112c>
 4001708:	d9002917 	ldw	r4,164(sp)
 400170c:	2002c11e 	bne	r4,zero,4002214 <___vfprintf_internal_r+0x1630>
 4001710:	d8002915 	stw	zero,164(sp)
 4001714:	d8002e15 	stw	zero,184(sp)
 4001718:	dc001e04 	addi	r16,sp,120
 400171c:	003ef806 	br	4001300 <__alt_mem_onchip_memory2_0+0xfbfe1300>
 4001720:	18c03fcc 	andi	r3,r3,255
 4001724:	18059d1e 	bne	r3,zero,4002d9c <___vfprintf_internal_r+0x21b8>
 4001728:	014100b4 	movhi	r5,1026
 400172c:	29620e04 	addi	r5,r5,-30664
 4001730:	d9403915 	stw	r5,228(sp)
 4001734:	9080080c 	andi	r2,r18,32
 4001738:	10005226 	beq	r2,zero,4001884 <___vfprintf_internal_r+0xca0>
 400173c:	d8802d17 	ldw	r2,180(sp)
 4001740:	14c00017 	ldw	r19,0(r2)
 4001744:	15800117 	ldw	r22,4(r2)
 4001748:	10800204 	addi	r2,r2,8
 400174c:	d8802d15 	stw	r2,180(sp)
 4001750:	9080004c 	andi	r2,r18,1
 4001754:	10019026 	beq	r2,zero,4001d98 <___vfprintf_internal_r+0x11b4>
 4001758:	9d84b03a 	or	r2,r19,r22
 400175c:	10036926 	beq	r2,zero,4002504 <___vfprintf_internal_r+0x1920>
 4001760:	d8c02917 	ldw	r3,164(sp)
 4001764:	00800c04 	movi	r2,48
 4001768:	d8802705 	stb	r2,156(sp)
 400176c:	dc402745 	stb	r17,157(sp)
 4001770:	d8002785 	stb	zero,158(sp)
 4001774:	90800094 	ori	r2,r18,2
 4001778:	18045d16 	blt	r3,zero,40028f0 <___vfprintf_internal_r+0x1d0c>
 400177c:	00bfdfc4 	movi	r2,-129
 4001780:	90a4703a 	and	r18,r18,r2
 4001784:	94800094 	ori	r18,r18,2
 4001788:	0039883a 	mov	fp,zero
 400178c:	d9003917 	ldw	r4,228(sp)
 4001790:	dc001e04 	addi	r16,sp,120
 4001794:	988003cc 	andi	r2,r19,15
 4001798:	b006973a 	slli	r3,r22,28
 400179c:	2085883a 	add	r2,r4,r2
 40017a0:	9826d13a 	srli	r19,r19,4
 40017a4:	10800003 	ldbu	r2,0(r2)
 40017a8:	b02cd13a 	srli	r22,r22,4
 40017ac:	843fffc4 	addi	r16,r16,-1
 40017b0:	1ce6b03a 	or	r19,r3,r19
 40017b4:	80800005 	stb	r2,0(r16)
 40017b8:	9d84b03a 	or	r2,r19,r22
 40017bc:	103ff51e 	bne	r2,zero,4001794 <__alt_mem_onchip_memory2_0+0xfbfe1794>
 40017c0:	d8c02817 	ldw	r3,160(sp)
 40017c4:	1c07c83a 	sub	r3,r3,r16
 40017c8:	d8c02e15 	stw	r3,184(sp)
 40017cc:	003ecc06 	br	4001300 <__alt_mem_onchip_memory2_0+0xfbfe1300>
 40017d0:	18c03fcc 	andi	r3,r3,255
 40017d4:	183e9f26 	beq	r3,zero,4001254 <__alt_mem_onchip_memory2_0+0xfbfe1254>
 40017d8:	d9c02785 	stb	r7,158(sp)
 40017dc:	003e9d06 	br	4001254 <__alt_mem_onchip_memory2_0+0xfbfe1254>
 40017e0:	00c00044 	movi	r3,1
 40017e4:	01c00ac4 	movi	r7,43
 40017e8:	ac400007 	ldb	r17,0(r21)
 40017ec:	003d5e06 	br	4000d68 <__alt_mem_onchip_memory2_0+0xfbfe0d68>
 40017f0:	94800814 	ori	r18,r18,32
 40017f4:	ac400007 	ldb	r17,0(r21)
 40017f8:	003d5b06 	br	4000d68 <__alt_mem_onchip_memory2_0+0xfbfe0d68>
 40017fc:	d8c02d17 	ldw	r3,180(sp)
 4001800:	d8002785 	stb	zero,158(sp)
 4001804:	1c000017 	ldw	r16,0(r3)
 4001808:	1cc00104 	addi	r19,r3,4
 400180c:	80041926 	beq	r16,zero,4002874 <___vfprintf_internal_r+0x1c90>
 4001810:	d9002917 	ldw	r4,164(sp)
 4001814:	2003d016 	blt	r4,zero,4002758 <___vfprintf_internal_r+0x1b74>
 4001818:	200d883a 	mov	r6,r4
 400181c:	000b883a 	mov	r5,zero
 4001820:	8009883a 	mov	r4,r16
 4001824:	da003d15 	stw	r8,244(sp)
 4001828:	40063f40 	call	40063f4 <memchr>
 400182c:	da003d17 	ldw	r8,244(sp)
 4001830:	10045426 	beq	r2,zero,4002984 <___vfprintf_internal_r+0x1da0>
 4001834:	1405c83a 	sub	r2,r2,r16
 4001838:	d8802e15 	stw	r2,184(sp)
 400183c:	1003cc16 	blt	r2,zero,4002770 <___vfprintf_internal_r+0x1b8c>
 4001840:	df002783 	ldbu	fp,158(sp)
 4001844:	d8802a15 	stw	r2,168(sp)
 4001848:	dcc02d15 	stw	r19,180(sp)
 400184c:	d8002915 	stw	zero,164(sp)
 4001850:	d8003215 	stw	zero,200(sp)
 4001854:	003eb006 	br	4001318 <__alt_mem_onchip_memory2_0+0xfbfe1318>
 4001858:	18c03fcc 	andi	r3,r3,255
 400185c:	183f9b26 	beq	r3,zero,40016cc <__alt_mem_onchip_memory2_0+0xfbfe16cc>
 4001860:	d9c02785 	stb	r7,158(sp)
 4001864:	003f9906 	br	40016cc <__alt_mem_onchip_memory2_0+0xfbfe16cc>
 4001868:	18c03fcc 	andi	r3,r3,255
 400186c:	1805551e 	bne	r3,zero,4002dc4 <___vfprintf_internal_r+0x21e0>
 4001870:	014100b4 	movhi	r5,1026
 4001874:	29621304 	addi	r5,r5,-30644
 4001878:	d9403915 	stw	r5,228(sp)
 400187c:	9080080c 	andi	r2,r18,32
 4001880:	103fae1e 	bne	r2,zero,400173c <__alt_mem_onchip_memory2_0+0xfbfe173c>
 4001884:	9080040c 	andi	r2,r18,16
 4001888:	1002de26 	beq	r2,zero,4002404 <___vfprintf_internal_r+0x1820>
 400188c:	d8c02d17 	ldw	r3,180(sp)
 4001890:	002d883a 	mov	r22,zero
 4001894:	1cc00017 	ldw	r19,0(r3)
 4001898:	18c00104 	addi	r3,r3,4
 400189c:	d8c02d15 	stw	r3,180(sp)
 40018a0:	003fab06 	br	4001750 <__alt_mem_onchip_memory2_0+0xfbfe1750>
 40018a4:	38803fcc 	andi	r2,r7,255
 40018a8:	1080201c 	xori	r2,r2,128
 40018ac:	10bfe004 	addi	r2,r2,-128
 40018b0:	1002d21e 	bne	r2,zero,40023fc <___vfprintf_internal_r+0x1818>
 40018b4:	00c00044 	movi	r3,1
 40018b8:	01c00804 	movi	r7,32
 40018bc:	ac400007 	ldb	r17,0(r21)
 40018c0:	003d2906 	br	4000d68 <__alt_mem_onchip_memory2_0+0xfbfe0d68>
 40018c4:	94800054 	ori	r18,r18,1
 40018c8:	ac400007 	ldb	r17,0(r21)
 40018cc:	003d2606 	br	4000d68 <__alt_mem_onchip_memory2_0+0xfbfe0d68>
 40018d0:	18c03fcc 	andi	r3,r3,255
 40018d4:	183e0526 	beq	r3,zero,40010ec <__alt_mem_onchip_memory2_0+0xfbfe10ec>
 40018d8:	d9c02785 	stb	r7,158(sp)
 40018dc:	003e0306 	br	40010ec <__alt_mem_onchip_memory2_0+0xfbfe10ec>
 40018e0:	94801014 	ori	r18,r18,64
 40018e4:	ac400007 	ldb	r17,0(r21)
 40018e8:	003d1f06 	br	4000d68 <__alt_mem_onchip_memory2_0+0xfbfe0d68>
 40018ec:	ac400007 	ldb	r17,0(r21)
 40018f0:	8a438726 	beq	r17,r9,4002710 <___vfprintf_internal_r+0x1b2c>
 40018f4:	94800414 	ori	r18,r18,16
 40018f8:	003d1b06 	br	4000d68 <__alt_mem_onchip_memory2_0+0xfbfe0d68>
 40018fc:	18c03fcc 	andi	r3,r3,255
 4001900:	1805341e 	bne	r3,zero,4002dd4 <___vfprintf_internal_r+0x21f0>
 4001904:	9080080c 	andi	r2,r18,32
 4001908:	1002cd26 	beq	r2,zero,4002440 <___vfprintf_internal_r+0x185c>
 400190c:	d9402d17 	ldw	r5,180(sp)
 4001910:	d9002f17 	ldw	r4,188(sp)
 4001914:	28800017 	ldw	r2,0(r5)
 4001918:	2007d7fa 	srai	r3,r4,31
 400191c:	29400104 	addi	r5,r5,4
 4001920:	d9402d15 	stw	r5,180(sp)
 4001924:	11000015 	stw	r4,0(r2)
 4001928:	10c00115 	stw	r3,4(r2)
 400192c:	003ce506 	br	4000cc4 <__alt_mem_onchip_memory2_0+0xfbfe0cc4>
 4001930:	d8c02d17 	ldw	r3,180(sp)
 4001934:	d9002d17 	ldw	r4,180(sp)
 4001938:	d8002785 	stb	zero,158(sp)
 400193c:	18800017 	ldw	r2,0(r3)
 4001940:	21000104 	addi	r4,r4,4
 4001944:	00c00044 	movi	r3,1
 4001948:	d8c02a15 	stw	r3,168(sp)
 400194c:	d8801405 	stb	r2,80(sp)
 4001950:	d9002d15 	stw	r4,180(sp)
 4001954:	d8c02e15 	stw	r3,184(sp)
 4001958:	d8002915 	stw	zero,164(sp)
 400195c:	d8003215 	stw	zero,200(sp)
 4001960:	dc001404 	addi	r16,sp,80
 4001964:	0039883a 	mov	fp,zero
 4001968:	003e7206 	br	4001334 <__alt_mem_onchip_memory2_0+0xfbfe1334>
 400196c:	010100b4 	movhi	r4,1026
 4001970:	21221304 	addi	r4,r4,-30644
 4001974:	0039883a 	mov	fp,zero
 4001978:	d9003915 	stw	r4,228(sp)
 400197c:	04401e04 	movi	r17,120
 4001980:	003f8206 	br	400178c <__alt_mem_onchip_memory2_0+0xfbfe178c>
 4001984:	18c03fcc 	andi	r3,r3,255
 4001988:	1805061e 	bne	r3,zero,4002da4 <___vfprintf_internal_r+0x21c0>
 400198c:	883d9126 	beq	r17,zero,4000fd4 <__alt_mem_onchip_memory2_0+0xfbfe0fd4>
 4001990:	00c00044 	movi	r3,1
 4001994:	d8c02a15 	stw	r3,168(sp)
 4001998:	dc401405 	stb	r17,80(sp)
 400199c:	d8002785 	stb	zero,158(sp)
 40019a0:	003fec06 	br	4001954 <__alt_mem_onchip_memory2_0+0xfbfe1954>
 40019a4:	014100b4 	movhi	r5,1026
 40019a8:	29621304 	addi	r5,r5,-30644
 40019ac:	d9403915 	stw	r5,228(sp)
 40019b0:	d8c02d15 	stw	r3,180(sp)
 40019b4:	1025883a 	mov	r18,r2
 40019b8:	04401e04 	movi	r17,120
 40019bc:	9d84b03a 	or	r2,r19,r22
 40019c0:	1000fc1e 	bne	r2,zero,4001db4 <___vfprintf_internal_r+0x11d0>
 40019c4:	0039883a 	mov	fp,zero
 40019c8:	00800084 	movi	r2,2
 40019cc:	10803fcc 	andi	r2,r2,255
 40019d0:	00c00044 	movi	r3,1
 40019d4:	10c20f26 	beq	r2,r3,4002214 <___vfprintf_internal_r+0x1630>
 40019d8:	00c00084 	movi	r3,2
 40019dc:	10fd6326 	beq	r2,r3,4000f6c <__alt_mem_onchip_memory2_0+0xfbfe0f6c>
 40019e0:	003e2d06 	br	4001298 <__alt_mem_onchip_memory2_0+0xfbfe1298>
 40019e4:	d8c02017 	ldw	r3,128(sp)
 40019e8:	003e9306 	br	4001438 <__alt_mem_onchip_memory2_0+0xfbfe1438>
 40019ec:	00801944 	movi	r2,101
 40019f0:	14407e0e 	bge	r2,r17,4001bec <___vfprintf_internal_r+0x1008>
 40019f4:	d9003617 	ldw	r4,216(sp)
 40019f8:	d9403817 	ldw	r5,224(sp)
 40019fc:	000d883a 	mov	r6,zero
 4001a00:	000f883a 	mov	r7,zero
 4001a04:	d8c03c15 	stw	r3,240(sp)
 4001a08:	da003d15 	stw	r8,244(sp)
 4001a0c:	400be580 	call	400be58 <__eqdf2>
 4001a10:	d8c03c17 	ldw	r3,240(sp)
 4001a14:	da003d17 	ldw	r8,244(sp)
 4001a18:	1000f71e 	bne	r2,zero,4001df8 <___vfprintf_internal_r+0x1214>
 4001a1c:	d8801f17 	ldw	r2,124(sp)
 4001a20:	010100b4 	movhi	r4,1026
 4001a24:	21221a04 	addi	r4,r4,-30616
 4001a28:	18c00044 	addi	r3,r3,1
 4001a2c:	10800044 	addi	r2,r2,1
 4001a30:	41000015 	stw	r4,0(r8)
 4001a34:	01000044 	movi	r4,1
 4001a38:	41000115 	stw	r4,4(r8)
 4001a3c:	d8c02015 	stw	r3,128(sp)
 4001a40:	d8801f15 	stw	r2,124(sp)
 4001a44:	010001c4 	movi	r4,7
 4001a48:	2082b816 	blt	r4,r2,400252c <___vfprintf_internal_r+0x1948>
 4001a4c:	42000204 	addi	r8,r8,8
 4001a50:	d8802617 	ldw	r2,152(sp)
 4001a54:	d9403317 	ldw	r5,204(sp)
 4001a58:	11400216 	blt	r2,r5,4001a64 <___vfprintf_internal_r+0xe80>
 4001a5c:	9080004c 	andi	r2,r18,1
 4001a60:	103ed526 	beq	r2,zero,40015b8 <__alt_mem_onchip_memory2_0+0xfbfe15b8>
 4001a64:	d8803717 	ldw	r2,220(sp)
 4001a68:	d9003417 	ldw	r4,208(sp)
 4001a6c:	d9403717 	ldw	r5,220(sp)
 4001a70:	1887883a 	add	r3,r3,r2
 4001a74:	d8801f17 	ldw	r2,124(sp)
 4001a78:	41000015 	stw	r4,0(r8)
 4001a7c:	41400115 	stw	r5,4(r8)
 4001a80:	10800044 	addi	r2,r2,1
 4001a84:	d8c02015 	stw	r3,128(sp)
 4001a88:	d8801f15 	stw	r2,124(sp)
 4001a8c:	010001c4 	movi	r4,7
 4001a90:	20832916 	blt	r4,r2,4002738 <___vfprintf_internal_r+0x1b54>
 4001a94:	42000204 	addi	r8,r8,8
 4001a98:	d8803317 	ldw	r2,204(sp)
 4001a9c:	143fffc4 	addi	r16,r2,-1
 4001aa0:	043ec50e 	bge	zero,r16,40015b8 <__alt_mem_onchip_memory2_0+0xfbfe15b8>
 4001aa4:	04400404 	movi	r17,16
 4001aa8:	d8801f17 	ldw	r2,124(sp)
 4001aac:	8c00880e 	bge	r17,r16,4001cd0 <___vfprintf_internal_r+0x10ec>
 4001ab0:	014100b4 	movhi	r5,1026
 4001ab4:	29621a84 	addi	r5,r5,-30614
 4001ab8:	d9402b15 	stw	r5,172(sp)
 4001abc:	058001c4 	movi	r22,7
 4001ac0:	dcc02c17 	ldw	r19,176(sp)
 4001ac4:	00000306 	br	4001ad4 <___vfprintf_internal_r+0xef0>
 4001ac8:	42000204 	addi	r8,r8,8
 4001acc:	843ffc04 	addi	r16,r16,-16
 4001ad0:	8c00820e 	bge	r17,r16,4001cdc <___vfprintf_internal_r+0x10f8>
 4001ad4:	18c00404 	addi	r3,r3,16
 4001ad8:	10800044 	addi	r2,r2,1
 4001adc:	45000015 	stw	r20,0(r8)
 4001ae0:	44400115 	stw	r17,4(r8)
 4001ae4:	d8c02015 	stw	r3,128(sp)
 4001ae8:	d8801f15 	stw	r2,124(sp)
 4001aec:	b0bff60e 	bge	r22,r2,4001ac8 <__alt_mem_onchip_memory2_0+0xfbfe1ac8>
 4001af0:	d9801e04 	addi	r6,sp,120
 4001af4:	b80b883a 	mov	r5,r23
 4001af8:	9809883a 	mov	r4,r19
 4001afc:	40081e00 	call	40081e0 <__sprint_r>
 4001b00:	103d3a1e 	bne	r2,zero,4000fec <__alt_mem_onchip_memory2_0+0xfbfe0fec>
 4001b04:	d8c02017 	ldw	r3,128(sp)
 4001b08:	d8801f17 	ldw	r2,124(sp)
 4001b0c:	da000404 	addi	r8,sp,16
 4001b10:	003fee06 	br	4001acc <__alt_mem_onchip_memory2_0+0xfbfe1acc>
 4001b14:	d9403117 	ldw	r5,196(sp)
 4001b18:	d8802a17 	ldw	r2,168(sp)
 4001b1c:	28adc83a 	sub	r22,r5,r2
 4001b20:	05be630e 	bge	zero,r22,40014b0 <__alt_mem_onchip_memory2_0+0xfbfe14b0>
 4001b24:	07000404 	movi	fp,16
 4001b28:	d8801f17 	ldw	r2,124(sp)
 4001b2c:	e5838f0e 	bge	fp,r22,400296c <___vfprintf_internal_r+0x1d88>
 4001b30:	014100b4 	movhi	r5,1026
 4001b34:	29621a84 	addi	r5,r5,-30614
 4001b38:	dc403015 	stw	r17,192(sp)
 4001b3c:	d9402b15 	stw	r5,172(sp)
 4001b40:	b023883a 	mov	r17,r22
 4001b44:	04c001c4 	movi	r19,7
 4001b48:	a82d883a 	mov	r22,r21
 4001b4c:	902b883a 	mov	r21,r18
 4001b50:	8025883a 	mov	r18,r16
 4001b54:	dc002c17 	ldw	r16,176(sp)
 4001b58:	00000306 	br	4001b68 <___vfprintf_internal_r+0xf84>
 4001b5c:	8c7ffc04 	addi	r17,r17,-16
 4001b60:	42000204 	addi	r8,r8,8
 4001b64:	e440110e 	bge	fp,r17,4001bac <___vfprintf_internal_r+0xfc8>
 4001b68:	18c00404 	addi	r3,r3,16
 4001b6c:	10800044 	addi	r2,r2,1
 4001b70:	45000015 	stw	r20,0(r8)
 4001b74:	47000115 	stw	fp,4(r8)
 4001b78:	d8c02015 	stw	r3,128(sp)
 4001b7c:	d8801f15 	stw	r2,124(sp)
 4001b80:	98bff60e 	bge	r19,r2,4001b5c <__alt_mem_onchip_memory2_0+0xfbfe1b5c>
 4001b84:	d9801e04 	addi	r6,sp,120
 4001b88:	b80b883a 	mov	r5,r23
 4001b8c:	8009883a 	mov	r4,r16
 4001b90:	40081e00 	call	40081e0 <__sprint_r>
 4001b94:	103d151e 	bne	r2,zero,4000fec <__alt_mem_onchip_memory2_0+0xfbfe0fec>
 4001b98:	8c7ffc04 	addi	r17,r17,-16
 4001b9c:	d8c02017 	ldw	r3,128(sp)
 4001ba0:	d8801f17 	ldw	r2,124(sp)
 4001ba4:	da000404 	addi	r8,sp,16
 4001ba8:	e47fef16 	blt	fp,r17,4001b68 <__alt_mem_onchip_memory2_0+0xfbfe1b68>
 4001bac:	9021883a 	mov	r16,r18
 4001bb0:	a825883a 	mov	r18,r21
 4001bb4:	b02b883a 	mov	r21,r22
 4001bb8:	882d883a 	mov	r22,r17
 4001bbc:	dc403017 	ldw	r17,192(sp)
 4001bc0:	d9002b17 	ldw	r4,172(sp)
 4001bc4:	1d87883a 	add	r3,r3,r22
 4001bc8:	10800044 	addi	r2,r2,1
 4001bcc:	41000015 	stw	r4,0(r8)
 4001bd0:	45800115 	stw	r22,4(r8)
 4001bd4:	d8c02015 	stw	r3,128(sp)
 4001bd8:	d8801f15 	stw	r2,124(sp)
 4001bdc:	010001c4 	movi	r4,7
 4001be0:	20818e16 	blt	r4,r2,400221c <___vfprintf_internal_r+0x1638>
 4001be4:	42000204 	addi	r8,r8,8
 4001be8:	003e3106 	br	40014b0 <__alt_mem_onchip_memory2_0+0xfbfe14b0>
 4001bec:	d9403317 	ldw	r5,204(sp)
 4001bf0:	00800044 	movi	r2,1
 4001bf4:	18c00044 	addi	r3,r3,1
 4001bf8:	1141530e 	bge	r2,r5,4002148 <___vfprintf_internal_r+0x1564>
 4001bfc:	dc401f17 	ldw	r17,124(sp)
 4001c00:	00800044 	movi	r2,1
 4001c04:	40800115 	stw	r2,4(r8)
 4001c08:	8c400044 	addi	r17,r17,1
 4001c0c:	44000015 	stw	r16,0(r8)
 4001c10:	d8c02015 	stw	r3,128(sp)
 4001c14:	dc401f15 	stw	r17,124(sp)
 4001c18:	008001c4 	movi	r2,7
 4001c1c:	14416b16 	blt	r2,r17,40021cc <___vfprintf_internal_r+0x15e8>
 4001c20:	42000204 	addi	r8,r8,8
 4001c24:	d8803717 	ldw	r2,220(sp)
 4001c28:	d9003417 	ldw	r4,208(sp)
 4001c2c:	8c400044 	addi	r17,r17,1
 4001c30:	10c7883a 	add	r3,r2,r3
 4001c34:	40800115 	stw	r2,4(r8)
 4001c38:	41000015 	stw	r4,0(r8)
 4001c3c:	d8c02015 	stw	r3,128(sp)
 4001c40:	dc401f15 	stw	r17,124(sp)
 4001c44:	008001c4 	movi	r2,7
 4001c48:	14416916 	blt	r2,r17,40021f0 <___vfprintf_internal_r+0x160c>
 4001c4c:	45800204 	addi	r22,r8,8
 4001c50:	d9003617 	ldw	r4,216(sp)
 4001c54:	d9403817 	ldw	r5,224(sp)
 4001c58:	000d883a 	mov	r6,zero
 4001c5c:	000f883a 	mov	r7,zero
 4001c60:	d8c03c15 	stw	r3,240(sp)
 4001c64:	400be580 	call	400be58 <__eqdf2>
 4001c68:	d8c03c17 	ldw	r3,240(sp)
 4001c6c:	1000bc26 	beq	r2,zero,4001f60 <___vfprintf_internal_r+0x137c>
 4001c70:	d9403317 	ldw	r5,204(sp)
 4001c74:	84000044 	addi	r16,r16,1
 4001c78:	8c400044 	addi	r17,r17,1
 4001c7c:	28bfffc4 	addi	r2,r5,-1
 4001c80:	1887883a 	add	r3,r3,r2
 4001c84:	b0800115 	stw	r2,4(r22)
 4001c88:	b4000015 	stw	r16,0(r22)
 4001c8c:	d8c02015 	stw	r3,128(sp)
 4001c90:	dc401f15 	stw	r17,124(sp)
 4001c94:	008001c4 	movi	r2,7
 4001c98:	14414316 	blt	r2,r17,40021a8 <___vfprintf_internal_r+0x15c4>
 4001c9c:	b5800204 	addi	r22,r22,8
 4001ca0:	d9003a17 	ldw	r4,232(sp)
 4001ca4:	df0022c4 	addi	fp,sp,139
 4001ca8:	8c400044 	addi	r17,r17,1
 4001cac:	20c7883a 	add	r3,r4,r3
 4001cb0:	b7000015 	stw	fp,0(r22)
 4001cb4:	b1000115 	stw	r4,4(r22)
 4001cb8:	d8c02015 	stw	r3,128(sp)
 4001cbc:	dc401f15 	stw	r17,124(sp)
 4001cc0:	008001c4 	movi	r2,7
 4001cc4:	14400e16 	blt	r2,r17,4001d00 <___vfprintf_internal_r+0x111c>
 4001cc8:	b2000204 	addi	r8,r22,8
 4001ccc:	003e3a06 	br	40015b8 <__alt_mem_onchip_memory2_0+0xfbfe15b8>
 4001cd0:	010100b4 	movhi	r4,1026
 4001cd4:	21221a84 	addi	r4,r4,-30614
 4001cd8:	d9002b15 	stw	r4,172(sp)
 4001cdc:	d9002b17 	ldw	r4,172(sp)
 4001ce0:	1c07883a 	add	r3,r3,r16
 4001ce4:	44000115 	stw	r16,4(r8)
 4001ce8:	41000015 	stw	r4,0(r8)
 4001cec:	10800044 	addi	r2,r2,1
 4001cf0:	d8c02015 	stw	r3,128(sp)
 4001cf4:	d8801f15 	stw	r2,124(sp)
 4001cf8:	010001c4 	movi	r4,7
 4001cfc:	20be2d0e 	bge	r4,r2,40015b4 <__alt_mem_onchip_memory2_0+0xfbfe15b4>
 4001d00:	d9002c17 	ldw	r4,176(sp)
 4001d04:	d9801e04 	addi	r6,sp,120
 4001d08:	b80b883a 	mov	r5,r23
 4001d0c:	40081e00 	call	40081e0 <__sprint_r>
 4001d10:	103cb61e 	bne	r2,zero,4000fec <__alt_mem_onchip_memory2_0+0xfbfe0fec>
 4001d14:	d8c02017 	ldw	r3,128(sp)
 4001d18:	da000404 	addi	r8,sp,16
 4001d1c:	003e2606 	br	40015b8 <__alt_mem_onchip_memory2_0+0xfbfe15b8>
 4001d20:	d9002c17 	ldw	r4,176(sp)
 4001d24:	d9801e04 	addi	r6,sp,120
 4001d28:	b80b883a 	mov	r5,r23
 4001d2c:	40081e00 	call	40081e0 <__sprint_r>
 4001d30:	103e5d26 	beq	r2,zero,40016a8 <__alt_mem_onchip_memory2_0+0xfbfe16a8>
 4001d34:	003cad06 	br	4000fec <__alt_mem_onchip_memory2_0+0xfbfe0fec>
 4001d38:	d9002c17 	ldw	r4,176(sp)
 4001d3c:	d9801e04 	addi	r6,sp,120
 4001d40:	b80b883a 	mov	r5,r23
 4001d44:	40081e00 	call	40081e0 <__sprint_r>
 4001d48:	103ca81e 	bne	r2,zero,4000fec <__alt_mem_onchip_memory2_0+0xfbfe0fec>
 4001d4c:	d8c02017 	ldw	r3,128(sp)
 4001d50:	da000404 	addi	r8,sp,16
 4001d54:	003e0b06 	br	4001584 <__alt_mem_onchip_memory2_0+0xfbfe1584>
 4001d58:	d9002c17 	ldw	r4,176(sp)
 4001d5c:	d9801e04 	addi	r6,sp,120
 4001d60:	b80b883a 	mov	r5,r23
 4001d64:	40081e00 	call	40081e0 <__sprint_r>
 4001d68:	103ca01e 	bne	r2,zero,4000fec <__alt_mem_onchip_memory2_0+0xfbfe0fec>
 4001d6c:	d8c02017 	ldw	r3,128(sp)
 4001d70:	da000404 	addi	r8,sp,16
 4001d74:	003dbd06 	br	400146c <__alt_mem_onchip_memory2_0+0xfbfe146c>
 4001d78:	d9002c17 	ldw	r4,176(sp)
 4001d7c:	d9801e04 	addi	r6,sp,120
 4001d80:	b80b883a 	mov	r5,r23
 4001d84:	40081e00 	call	40081e0 <__sprint_r>
 4001d88:	103c981e 	bne	r2,zero,4000fec <__alt_mem_onchip_memory2_0+0xfbfe0fec>
 4001d8c:	d8c02017 	ldw	r3,128(sp)
 4001d90:	da000404 	addi	r8,sp,16
 4001d94:	003dc306 	br	40014a4 <__alt_mem_onchip_memory2_0+0xfbfe14a4>
 4001d98:	d8802917 	ldw	r2,164(sp)
 4001d9c:	d8002785 	stb	zero,158(sp)
 4001da0:	103f0616 	blt	r2,zero,40019bc <__alt_mem_onchip_memory2_0+0xfbfe19bc>
 4001da4:	00ffdfc4 	movi	r3,-129
 4001da8:	9d84b03a 	or	r2,r19,r22
 4001dac:	90e4703a 	and	r18,r18,r3
 4001db0:	103c6b26 	beq	r2,zero,4000f60 <__alt_mem_onchip_memory2_0+0xfbfe0f60>
 4001db4:	0039883a 	mov	fp,zero
 4001db8:	003e7406 	br	400178c <__alt_mem_onchip_memory2_0+0xfbfe178c>
 4001dbc:	9080040c 	andi	r2,r18,16
 4001dc0:	1001b326 	beq	r2,zero,4002490 <___vfprintf_internal_r+0x18ac>
 4001dc4:	d9002d17 	ldw	r4,180(sp)
 4001dc8:	d9402917 	ldw	r5,164(sp)
 4001dcc:	d8002785 	stb	zero,158(sp)
 4001dd0:	20800104 	addi	r2,r4,4
 4001dd4:	24c00017 	ldw	r19,0(r4)
 4001dd8:	002d883a 	mov	r22,zero
 4001ddc:	2801b516 	blt	r5,zero,40024b4 <___vfprintf_internal_r+0x18d0>
 4001de0:	00ffdfc4 	movi	r3,-129
 4001de4:	d8802d15 	stw	r2,180(sp)
 4001de8:	90e4703a 	and	r18,r18,r3
 4001dec:	983d2726 	beq	r19,zero,400128c <__alt_mem_onchip_memory2_0+0xfbfe128c>
 4001df0:	0039883a 	mov	fp,zero
 4001df4:	003d2a06 	br	40012a0 <__alt_mem_onchip_memory2_0+0xfbfe12a0>
 4001df8:	dc402617 	ldw	r17,152(sp)
 4001dfc:	0441d30e 	bge	zero,r17,400254c <___vfprintf_internal_r+0x1968>
 4001e00:	dc403217 	ldw	r17,200(sp)
 4001e04:	d8803317 	ldw	r2,204(sp)
 4001e08:	1440010e 	bge	r2,r17,4001e10 <___vfprintf_internal_r+0x122c>
 4001e0c:	1023883a 	mov	r17,r2
 4001e10:	04400a0e 	bge	zero,r17,4001e3c <___vfprintf_internal_r+0x1258>
 4001e14:	d8801f17 	ldw	r2,124(sp)
 4001e18:	1c47883a 	add	r3,r3,r17
 4001e1c:	44000015 	stw	r16,0(r8)
 4001e20:	10800044 	addi	r2,r2,1
 4001e24:	44400115 	stw	r17,4(r8)
 4001e28:	d8c02015 	stw	r3,128(sp)
 4001e2c:	d8801f15 	stw	r2,124(sp)
 4001e30:	010001c4 	movi	r4,7
 4001e34:	20826516 	blt	r4,r2,40027cc <___vfprintf_internal_r+0x1be8>
 4001e38:	42000204 	addi	r8,r8,8
 4001e3c:	88026116 	blt	r17,zero,40027c4 <___vfprintf_internal_r+0x1be0>
 4001e40:	d9003217 	ldw	r4,200(sp)
 4001e44:	2463c83a 	sub	r17,r4,r17
 4001e48:	04407b0e 	bge	zero,r17,4002038 <___vfprintf_internal_r+0x1454>
 4001e4c:	05800404 	movi	r22,16
 4001e50:	d8801f17 	ldw	r2,124(sp)
 4001e54:	b4419d0e 	bge	r22,r17,40024cc <___vfprintf_internal_r+0x18e8>
 4001e58:	010100b4 	movhi	r4,1026
 4001e5c:	21221a84 	addi	r4,r4,-30614
 4001e60:	d9002b15 	stw	r4,172(sp)
 4001e64:	070001c4 	movi	fp,7
 4001e68:	dcc02c17 	ldw	r19,176(sp)
 4001e6c:	00000306 	br	4001e7c <___vfprintf_internal_r+0x1298>
 4001e70:	42000204 	addi	r8,r8,8
 4001e74:	8c7ffc04 	addi	r17,r17,-16
 4001e78:	b441970e 	bge	r22,r17,40024d8 <___vfprintf_internal_r+0x18f4>
 4001e7c:	18c00404 	addi	r3,r3,16
 4001e80:	10800044 	addi	r2,r2,1
 4001e84:	45000015 	stw	r20,0(r8)
 4001e88:	45800115 	stw	r22,4(r8)
 4001e8c:	d8c02015 	stw	r3,128(sp)
 4001e90:	d8801f15 	stw	r2,124(sp)
 4001e94:	e0bff60e 	bge	fp,r2,4001e70 <__alt_mem_onchip_memory2_0+0xfbfe1e70>
 4001e98:	d9801e04 	addi	r6,sp,120
 4001e9c:	b80b883a 	mov	r5,r23
 4001ea0:	9809883a 	mov	r4,r19
 4001ea4:	40081e00 	call	40081e0 <__sprint_r>
 4001ea8:	103c501e 	bne	r2,zero,4000fec <__alt_mem_onchip_memory2_0+0xfbfe0fec>
 4001eac:	d8c02017 	ldw	r3,128(sp)
 4001eb0:	d8801f17 	ldw	r2,124(sp)
 4001eb4:	da000404 	addi	r8,sp,16
 4001eb8:	003fee06 	br	4001e74 <__alt_mem_onchip_memory2_0+0xfbfe1e74>
 4001ebc:	d9002c17 	ldw	r4,176(sp)
 4001ec0:	d9801e04 	addi	r6,sp,120
 4001ec4:	b80b883a 	mov	r5,r23
 4001ec8:	40081e00 	call	40081e0 <__sprint_r>
 4001ecc:	103c471e 	bne	r2,zero,4000fec <__alt_mem_onchip_memory2_0+0xfbfe0fec>
 4001ed0:	d8c02017 	ldw	r3,128(sp)
 4001ed4:	df002787 	ldb	fp,158(sp)
 4001ed8:	da000404 	addi	r8,sp,16
 4001edc:	003d5606 	br	4001438 <__alt_mem_onchip_memory2_0+0xfbfe1438>
 4001ee0:	9080040c 	andi	r2,r18,16
 4001ee4:	10016126 	beq	r2,zero,400246c <___vfprintf_internal_r+0x1888>
 4001ee8:	d8802d17 	ldw	r2,180(sp)
 4001eec:	14c00017 	ldw	r19,0(r2)
 4001ef0:	10800104 	addi	r2,r2,4
 4001ef4:	d8802d15 	stw	r2,180(sp)
 4001ef8:	982dd7fa 	srai	r22,r19,31
 4001efc:	b005883a 	mov	r2,r22
 4001f00:	003c8206 	br	400110c <__alt_mem_onchip_memory2_0+0xfbfe110c>
 4001f04:	9080040c 	andi	r2,r18,16
 4001f08:	10003526 	beq	r2,zero,4001fe0 <___vfprintf_internal_r+0x13fc>
 4001f0c:	d9402d17 	ldw	r5,180(sp)
 4001f10:	d8c02917 	ldw	r3,164(sp)
 4001f14:	d8002785 	stb	zero,158(sp)
 4001f18:	28800104 	addi	r2,r5,4
 4001f1c:	2cc00017 	ldw	r19,0(r5)
 4001f20:	002d883a 	mov	r22,zero
 4001f24:	18003716 	blt	r3,zero,4002004 <___vfprintf_internal_r+0x1420>
 4001f28:	00ffdfc4 	movi	r3,-129
 4001f2c:	d8802d15 	stw	r2,180(sp)
 4001f30:	90e4703a 	and	r18,r18,r3
 4001f34:	0039883a 	mov	fp,zero
 4001f38:	983df326 	beq	r19,zero,4001708 <__alt_mem_onchip_memory2_0+0xfbfe1708>
 4001f3c:	00800244 	movi	r2,9
 4001f40:	14fc7b36 	bltu	r2,r19,4001130 <__alt_mem_onchip_memory2_0+0xfbfe1130>
 4001f44:	d8c02817 	ldw	r3,160(sp)
 4001f48:	dc001dc4 	addi	r16,sp,119
 4001f4c:	9cc00c04 	addi	r19,r19,48
 4001f50:	1c07c83a 	sub	r3,r3,r16
 4001f54:	dcc01dc5 	stb	r19,119(sp)
 4001f58:	d8c02e15 	stw	r3,184(sp)
 4001f5c:	003ce806 	br	4001300 <__alt_mem_onchip_memory2_0+0xfbfe1300>
 4001f60:	d8803317 	ldw	r2,204(sp)
 4001f64:	143fffc4 	addi	r16,r2,-1
 4001f68:	043f4d0e 	bge	zero,r16,4001ca0 <__alt_mem_onchip_memory2_0+0xfbfe1ca0>
 4001f6c:	07000404 	movi	fp,16
 4001f70:	e400810e 	bge	fp,r16,4002178 <___vfprintf_internal_r+0x1594>
 4001f74:	014100b4 	movhi	r5,1026
 4001f78:	29621a84 	addi	r5,r5,-30614
 4001f7c:	d9402b15 	stw	r5,172(sp)
 4001f80:	01c001c4 	movi	r7,7
 4001f84:	dcc02c17 	ldw	r19,176(sp)
 4001f88:	00000306 	br	4001f98 <___vfprintf_internal_r+0x13b4>
 4001f8c:	b5800204 	addi	r22,r22,8
 4001f90:	843ffc04 	addi	r16,r16,-16
 4001f94:	e4007b0e 	bge	fp,r16,4002184 <___vfprintf_internal_r+0x15a0>
 4001f98:	18c00404 	addi	r3,r3,16
 4001f9c:	8c400044 	addi	r17,r17,1
 4001fa0:	b5000015 	stw	r20,0(r22)
 4001fa4:	b7000115 	stw	fp,4(r22)
 4001fa8:	d8c02015 	stw	r3,128(sp)
 4001fac:	dc401f15 	stw	r17,124(sp)
 4001fb0:	3c7ff60e 	bge	r7,r17,4001f8c <__alt_mem_onchip_memory2_0+0xfbfe1f8c>
 4001fb4:	d9801e04 	addi	r6,sp,120
 4001fb8:	b80b883a 	mov	r5,r23
 4001fbc:	9809883a 	mov	r4,r19
 4001fc0:	d9c03c15 	stw	r7,240(sp)
 4001fc4:	40081e00 	call	40081e0 <__sprint_r>
 4001fc8:	d9c03c17 	ldw	r7,240(sp)
 4001fcc:	103c071e 	bne	r2,zero,4000fec <__alt_mem_onchip_memory2_0+0xfbfe0fec>
 4001fd0:	d8c02017 	ldw	r3,128(sp)
 4001fd4:	dc401f17 	ldw	r17,124(sp)
 4001fd8:	dd800404 	addi	r22,sp,16
 4001fdc:	003fec06 	br	4001f90 <__alt_mem_onchip_memory2_0+0xfbfe1f90>
 4001fe0:	9080100c 	andi	r2,r18,64
 4001fe4:	d8002785 	stb	zero,158(sp)
 4001fe8:	10010e26 	beq	r2,zero,4002424 <___vfprintf_internal_r+0x1840>
 4001fec:	d9002d17 	ldw	r4,180(sp)
 4001ff0:	d9402917 	ldw	r5,164(sp)
 4001ff4:	002d883a 	mov	r22,zero
 4001ff8:	20800104 	addi	r2,r4,4
 4001ffc:	24c0000b 	ldhu	r19,0(r4)
 4002000:	283fc90e 	bge	r5,zero,4001f28 <__alt_mem_onchip_memory2_0+0xfbfe1f28>
 4002004:	d8802d15 	stw	r2,180(sp)
 4002008:	0039883a 	mov	fp,zero
 400200c:	9d84b03a 	or	r2,r19,r22
 4002010:	103c461e 	bne	r2,zero,400112c <__alt_mem_onchip_memory2_0+0xfbfe112c>
 4002014:	00800044 	movi	r2,1
 4002018:	003e6c06 	br	40019cc <__alt_mem_onchip_memory2_0+0xfbfe19cc>
 400201c:	d9002c17 	ldw	r4,176(sp)
 4002020:	d9801e04 	addi	r6,sp,120
 4002024:	b80b883a 	mov	r5,r23
 4002028:	40081e00 	call	40081e0 <__sprint_r>
 400202c:	103bef1e 	bne	r2,zero,4000fec <__alt_mem_onchip_memory2_0+0xfbfe0fec>
 4002030:	d8c02017 	ldw	r3,128(sp)
 4002034:	da000404 	addi	r8,sp,16
 4002038:	d9003217 	ldw	r4,200(sp)
 400203c:	d8802617 	ldw	r2,152(sp)
 4002040:	d9403317 	ldw	r5,204(sp)
 4002044:	8123883a 	add	r17,r16,r4
 4002048:	11400216 	blt	r2,r5,4002054 <___vfprintf_internal_r+0x1470>
 400204c:	9100004c 	andi	r4,r18,1
 4002050:	20000d26 	beq	r4,zero,4002088 <___vfprintf_internal_r+0x14a4>
 4002054:	d9003717 	ldw	r4,220(sp)
 4002058:	d9403417 	ldw	r5,208(sp)
 400205c:	1907883a 	add	r3,r3,r4
 4002060:	d9001f17 	ldw	r4,124(sp)
 4002064:	41400015 	stw	r5,0(r8)
 4002068:	d9403717 	ldw	r5,220(sp)
 400206c:	21000044 	addi	r4,r4,1
 4002070:	d8c02015 	stw	r3,128(sp)
 4002074:	41400115 	stw	r5,4(r8)
 4002078:	d9001f15 	stw	r4,124(sp)
 400207c:	014001c4 	movi	r5,7
 4002080:	2901e816 	blt	r5,r4,4002824 <___vfprintf_internal_r+0x1c40>
 4002084:	42000204 	addi	r8,r8,8
 4002088:	d9003317 	ldw	r4,204(sp)
 400208c:	8121883a 	add	r16,r16,r4
 4002090:	2085c83a 	sub	r2,r4,r2
 4002094:	8461c83a 	sub	r16,r16,r17
 4002098:	1400010e 	bge	r2,r16,40020a0 <___vfprintf_internal_r+0x14bc>
 400209c:	1021883a 	mov	r16,r2
 40020a0:	04000a0e 	bge	zero,r16,40020cc <___vfprintf_internal_r+0x14e8>
 40020a4:	d9001f17 	ldw	r4,124(sp)
 40020a8:	1c07883a 	add	r3,r3,r16
 40020ac:	44400015 	stw	r17,0(r8)
 40020b0:	21000044 	addi	r4,r4,1
 40020b4:	44000115 	stw	r16,4(r8)
 40020b8:	d8c02015 	stw	r3,128(sp)
 40020bc:	d9001f15 	stw	r4,124(sp)
 40020c0:	014001c4 	movi	r5,7
 40020c4:	2901fb16 	blt	r5,r4,40028b4 <___vfprintf_internal_r+0x1cd0>
 40020c8:	42000204 	addi	r8,r8,8
 40020cc:	8001f716 	blt	r16,zero,40028ac <___vfprintf_internal_r+0x1cc8>
 40020d0:	1421c83a 	sub	r16,r2,r16
 40020d4:	043d380e 	bge	zero,r16,40015b8 <__alt_mem_onchip_memory2_0+0xfbfe15b8>
 40020d8:	04400404 	movi	r17,16
 40020dc:	d8801f17 	ldw	r2,124(sp)
 40020e0:	8c3efb0e 	bge	r17,r16,4001cd0 <__alt_mem_onchip_memory2_0+0xfbfe1cd0>
 40020e4:	014100b4 	movhi	r5,1026
 40020e8:	29621a84 	addi	r5,r5,-30614
 40020ec:	d9402b15 	stw	r5,172(sp)
 40020f0:	058001c4 	movi	r22,7
 40020f4:	dcc02c17 	ldw	r19,176(sp)
 40020f8:	00000306 	br	4002108 <___vfprintf_internal_r+0x1524>
 40020fc:	42000204 	addi	r8,r8,8
 4002100:	843ffc04 	addi	r16,r16,-16
 4002104:	8c3ef50e 	bge	r17,r16,4001cdc <__alt_mem_onchip_memory2_0+0xfbfe1cdc>
 4002108:	18c00404 	addi	r3,r3,16
 400210c:	10800044 	addi	r2,r2,1
 4002110:	45000015 	stw	r20,0(r8)
 4002114:	44400115 	stw	r17,4(r8)
 4002118:	d8c02015 	stw	r3,128(sp)
 400211c:	d8801f15 	stw	r2,124(sp)
 4002120:	b0bff60e 	bge	r22,r2,40020fc <__alt_mem_onchip_memory2_0+0xfbfe20fc>
 4002124:	d9801e04 	addi	r6,sp,120
 4002128:	b80b883a 	mov	r5,r23
 400212c:	9809883a 	mov	r4,r19
 4002130:	40081e00 	call	40081e0 <__sprint_r>
 4002134:	103bad1e 	bne	r2,zero,4000fec <__alt_mem_onchip_memory2_0+0xfbfe0fec>
 4002138:	d8c02017 	ldw	r3,128(sp)
 400213c:	d8801f17 	ldw	r2,124(sp)
 4002140:	da000404 	addi	r8,sp,16
 4002144:	003fee06 	br	4002100 <__alt_mem_onchip_memory2_0+0xfbfe2100>
 4002148:	9088703a 	and	r4,r18,r2
 400214c:	203eab1e 	bne	r4,zero,4001bfc <__alt_mem_onchip_memory2_0+0xfbfe1bfc>
 4002150:	dc401f17 	ldw	r17,124(sp)
 4002154:	40800115 	stw	r2,4(r8)
 4002158:	44000015 	stw	r16,0(r8)
 400215c:	8c400044 	addi	r17,r17,1
 4002160:	d8c02015 	stw	r3,128(sp)
 4002164:	dc401f15 	stw	r17,124(sp)
 4002168:	008001c4 	movi	r2,7
 400216c:	14400e16 	blt	r2,r17,40021a8 <___vfprintf_internal_r+0x15c4>
 4002170:	45800204 	addi	r22,r8,8
 4002174:	003eca06 	br	4001ca0 <__alt_mem_onchip_memory2_0+0xfbfe1ca0>
 4002178:	010100b4 	movhi	r4,1026
 400217c:	21221a84 	addi	r4,r4,-30614
 4002180:	d9002b15 	stw	r4,172(sp)
 4002184:	d8802b17 	ldw	r2,172(sp)
 4002188:	1c07883a 	add	r3,r3,r16
 400218c:	8c400044 	addi	r17,r17,1
 4002190:	b0800015 	stw	r2,0(r22)
 4002194:	b4000115 	stw	r16,4(r22)
 4002198:	d8c02015 	stw	r3,128(sp)
 400219c:	dc401f15 	stw	r17,124(sp)
 40021a0:	008001c4 	movi	r2,7
 40021a4:	147ebd0e 	bge	r2,r17,4001c9c <__alt_mem_onchip_memory2_0+0xfbfe1c9c>
 40021a8:	d9002c17 	ldw	r4,176(sp)
 40021ac:	d9801e04 	addi	r6,sp,120
 40021b0:	b80b883a 	mov	r5,r23
 40021b4:	40081e00 	call	40081e0 <__sprint_r>
 40021b8:	103b8c1e 	bne	r2,zero,4000fec <__alt_mem_onchip_memory2_0+0xfbfe0fec>
 40021bc:	d8c02017 	ldw	r3,128(sp)
 40021c0:	dc401f17 	ldw	r17,124(sp)
 40021c4:	dd800404 	addi	r22,sp,16
 40021c8:	003eb506 	br	4001ca0 <__alt_mem_onchip_memory2_0+0xfbfe1ca0>
 40021cc:	d9002c17 	ldw	r4,176(sp)
 40021d0:	d9801e04 	addi	r6,sp,120
 40021d4:	b80b883a 	mov	r5,r23
 40021d8:	40081e00 	call	40081e0 <__sprint_r>
 40021dc:	103b831e 	bne	r2,zero,4000fec <__alt_mem_onchip_memory2_0+0xfbfe0fec>
 40021e0:	d8c02017 	ldw	r3,128(sp)
 40021e4:	dc401f17 	ldw	r17,124(sp)
 40021e8:	da000404 	addi	r8,sp,16
 40021ec:	003e8d06 	br	4001c24 <__alt_mem_onchip_memory2_0+0xfbfe1c24>
 40021f0:	d9002c17 	ldw	r4,176(sp)
 40021f4:	d9801e04 	addi	r6,sp,120
 40021f8:	b80b883a 	mov	r5,r23
 40021fc:	40081e00 	call	40081e0 <__sprint_r>
 4002200:	103b7a1e 	bne	r2,zero,4000fec <__alt_mem_onchip_memory2_0+0xfbfe0fec>
 4002204:	d8c02017 	ldw	r3,128(sp)
 4002208:	dc401f17 	ldw	r17,124(sp)
 400220c:	dd800404 	addi	r22,sp,16
 4002210:	003e8f06 	br	4001c50 <__alt_mem_onchip_memory2_0+0xfbfe1c50>
 4002214:	0027883a 	mov	r19,zero
 4002218:	003f4a06 	br	4001f44 <__alt_mem_onchip_memory2_0+0xfbfe1f44>
 400221c:	d9002c17 	ldw	r4,176(sp)
 4002220:	d9801e04 	addi	r6,sp,120
 4002224:	b80b883a 	mov	r5,r23
 4002228:	40081e00 	call	40081e0 <__sprint_r>
 400222c:	103b6f1e 	bne	r2,zero,4000fec <__alt_mem_onchip_memory2_0+0xfbfe0fec>
 4002230:	d8c02017 	ldw	r3,128(sp)
 4002234:	da000404 	addi	r8,sp,16
 4002238:	003c9d06 	br	40014b0 <__alt_mem_onchip_memory2_0+0xfbfe14b0>
 400223c:	04e7c83a 	sub	r19,zero,r19
 4002240:	9804c03a 	cmpne	r2,r19,zero
 4002244:	05adc83a 	sub	r22,zero,r22
 4002248:	b0adc83a 	sub	r22,r22,r2
 400224c:	d8802917 	ldw	r2,164(sp)
 4002250:	07000b44 	movi	fp,45
 4002254:	df002785 	stb	fp,158(sp)
 4002258:	10017b16 	blt	r2,zero,4002848 <___vfprintf_internal_r+0x1c64>
 400225c:	00bfdfc4 	movi	r2,-129
 4002260:	90a4703a 	and	r18,r18,r2
 4002264:	003bb106 	br	400112c <__alt_mem_onchip_memory2_0+0xfbfe112c>
 4002268:	d9003617 	ldw	r4,216(sp)
 400226c:	d9403817 	ldw	r5,224(sp)
 4002270:	da003d15 	stw	r8,244(sp)
 4002274:	4007e040 	call	4007e04 <__fpclassifyd>
 4002278:	da003d17 	ldw	r8,244(sp)
 400227c:	1000f026 	beq	r2,zero,4002640 <___vfprintf_internal_r+0x1a5c>
 4002280:	d9002917 	ldw	r4,164(sp)
 4002284:	05bff7c4 	movi	r22,-33
 4002288:	00bfffc4 	movi	r2,-1
 400228c:	8dac703a 	and	r22,r17,r22
 4002290:	20820026 	beq	r4,r2,4002a94 <___vfprintf_internal_r+0x1eb0>
 4002294:	008011c4 	movi	r2,71
 4002298:	b081f726 	beq	r22,r2,4002a78 <___vfprintf_internal_r+0x1e94>
 400229c:	d9003817 	ldw	r4,224(sp)
 40022a0:	90c04014 	ori	r3,r18,256
 40022a4:	d8c02b15 	stw	r3,172(sp)
 40022a8:	20021516 	blt	r4,zero,4002b00 <___vfprintf_internal_r+0x1f1c>
 40022ac:	dcc03817 	ldw	r19,224(sp)
 40022b0:	d8002a05 	stb	zero,168(sp)
 40022b4:	00801984 	movi	r2,102
 40022b8:	8881f926 	beq	r17,r2,4002aa0 <___vfprintf_internal_r+0x1ebc>
 40022bc:	00801184 	movi	r2,70
 40022c0:	88821c26 	beq	r17,r2,4002b34 <___vfprintf_internal_r+0x1f50>
 40022c4:	00801144 	movi	r2,69
 40022c8:	b081ef26 	beq	r22,r2,4002a88 <___vfprintf_internal_r+0x1ea4>
 40022cc:	d8c02917 	ldw	r3,164(sp)
 40022d0:	d8802104 	addi	r2,sp,132
 40022d4:	d8800315 	stw	r2,12(sp)
 40022d8:	d9403617 	ldw	r5,216(sp)
 40022dc:	d8802504 	addi	r2,sp,148
 40022e0:	d9002c17 	ldw	r4,176(sp)
 40022e4:	d8800215 	stw	r2,8(sp)
 40022e8:	d8802604 	addi	r2,sp,152
 40022ec:	d8c00015 	stw	r3,0(sp)
 40022f0:	d8800115 	stw	r2,4(sp)
 40022f4:	01c00084 	movi	r7,2
 40022f8:	980d883a 	mov	r6,r19
 40022fc:	d8c03c15 	stw	r3,240(sp)
 4002300:	da003d15 	stw	r8,244(sp)
 4002304:	40032080 	call	4003208 <_dtoa_r>
 4002308:	1021883a 	mov	r16,r2
 400230c:	008019c4 	movi	r2,103
 4002310:	d8c03c17 	ldw	r3,240(sp)
 4002314:	da003d17 	ldw	r8,244(sp)
 4002318:	88817126 	beq	r17,r2,40028e0 <___vfprintf_internal_r+0x1cfc>
 400231c:	008011c4 	movi	r2,71
 4002320:	88829226 	beq	r17,r2,4002d6c <___vfprintf_internal_r+0x2188>
 4002324:	80f9883a 	add	fp,r16,r3
 4002328:	d9003617 	ldw	r4,216(sp)
 400232c:	000d883a 	mov	r6,zero
 4002330:	000f883a 	mov	r7,zero
 4002334:	980b883a 	mov	r5,r19
 4002338:	da003d15 	stw	r8,244(sp)
 400233c:	400be580 	call	400be58 <__eqdf2>
 4002340:	da003d17 	ldw	r8,244(sp)
 4002344:	10018d26 	beq	r2,zero,400297c <___vfprintf_internal_r+0x1d98>
 4002348:	d8802117 	ldw	r2,132(sp)
 400234c:	1700062e 	bgeu	r2,fp,4002368 <___vfprintf_internal_r+0x1784>
 4002350:	01000c04 	movi	r4,48
 4002354:	10c00044 	addi	r3,r2,1
 4002358:	d8c02115 	stw	r3,132(sp)
 400235c:	11000005 	stb	r4,0(r2)
 4002360:	d8802117 	ldw	r2,132(sp)
 4002364:	173ffb36 	bltu	r2,fp,4002354 <__alt_mem_onchip_memory2_0+0xfbfe2354>
 4002368:	1405c83a 	sub	r2,r2,r16
 400236c:	d8803315 	stw	r2,204(sp)
 4002370:	008011c4 	movi	r2,71
 4002374:	b0817626 	beq	r22,r2,4002950 <___vfprintf_internal_r+0x1d6c>
 4002378:	00801944 	movi	r2,101
 400237c:	1442810e 	bge	r2,r17,4002d84 <___vfprintf_internal_r+0x21a0>
 4002380:	d8c02617 	ldw	r3,152(sp)
 4002384:	00801984 	movi	r2,102
 4002388:	d8c03215 	stw	r3,200(sp)
 400238c:	8881fe26 	beq	r17,r2,4002b88 <___vfprintf_internal_r+0x1fa4>
 4002390:	d8c03217 	ldw	r3,200(sp)
 4002394:	d9003317 	ldw	r4,204(sp)
 4002398:	1901dd16 	blt	r3,r4,4002b10 <___vfprintf_internal_r+0x1f2c>
 400239c:	9480004c 	andi	r18,r18,1
 40023a0:	90022b1e 	bne	r18,zero,4002c50 <___vfprintf_internal_r+0x206c>
 40023a4:	1805883a 	mov	r2,r3
 40023a8:	18028016 	blt	r3,zero,4002dac <___vfprintf_internal_r+0x21c8>
 40023ac:	d8c03217 	ldw	r3,200(sp)
 40023b0:	044019c4 	movi	r17,103
 40023b4:	d8c02e15 	stw	r3,184(sp)
 40023b8:	df002a07 	ldb	fp,168(sp)
 40023bc:	e001531e 	bne	fp,zero,400290c <___vfprintf_internal_r+0x1d28>
 40023c0:	df002783 	ldbu	fp,158(sp)
 40023c4:	d8802a15 	stw	r2,168(sp)
 40023c8:	dc802b17 	ldw	r18,172(sp)
 40023cc:	d8002915 	stw	zero,164(sp)
 40023d0:	003bd106 	br	4001318 <__alt_mem_onchip_memory2_0+0xfbfe1318>
 40023d4:	d8802d17 	ldw	r2,180(sp)
 40023d8:	d8c02d17 	ldw	r3,180(sp)
 40023dc:	d9002d17 	ldw	r4,180(sp)
 40023e0:	10800017 	ldw	r2,0(r2)
 40023e4:	18c00117 	ldw	r3,4(r3)
 40023e8:	21000204 	addi	r4,r4,8
 40023ec:	d8803615 	stw	r2,216(sp)
 40023f0:	d8c03815 	stw	r3,224(sp)
 40023f4:	d9002d15 	stw	r4,180(sp)
 40023f8:	003b7506 	br	40011d0 <__alt_mem_onchip_memory2_0+0xfbfe11d0>
 40023fc:	ac400007 	ldb	r17,0(r21)
 4002400:	003a5906 	br	4000d68 <__alt_mem_onchip_memory2_0+0xfbfe0d68>
 4002404:	9080100c 	andi	r2,r18,64
 4002408:	1000a826 	beq	r2,zero,40026ac <___vfprintf_internal_r+0x1ac8>
 400240c:	d9002d17 	ldw	r4,180(sp)
 4002410:	002d883a 	mov	r22,zero
 4002414:	24c0000b 	ldhu	r19,0(r4)
 4002418:	21000104 	addi	r4,r4,4
 400241c:	d9002d15 	stw	r4,180(sp)
 4002420:	003ccb06 	br	4001750 <__alt_mem_onchip_memory2_0+0xfbfe1750>
 4002424:	d8c02d17 	ldw	r3,180(sp)
 4002428:	d9002917 	ldw	r4,164(sp)
 400242c:	002d883a 	mov	r22,zero
 4002430:	18800104 	addi	r2,r3,4
 4002434:	1cc00017 	ldw	r19,0(r3)
 4002438:	203ebb0e 	bge	r4,zero,4001f28 <__alt_mem_onchip_memory2_0+0xfbfe1f28>
 400243c:	003ef106 	br	4002004 <__alt_mem_onchip_memory2_0+0xfbfe2004>
 4002440:	9080040c 	andi	r2,r18,16
 4002444:	1000921e 	bne	r2,zero,4002690 <___vfprintf_internal_r+0x1aac>
 4002448:	9480100c 	andi	r18,r18,64
 400244c:	90013926 	beq	r18,zero,4002934 <___vfprintf_internal_r+0x1d50>
 4002450:	d9002d17 	ldw	r4,180(sp)
 4002454:	d9402f17 	ldw	r5,188(sp)
 4002458:	20800017 	ldw	r2,0(r4)
 400245c:	21000104 	addi	r4,r4,4
 4002460:	d9002d15 	stw	r4,180(sp)
 4002464:	1140000d 	sth	r5,0(r2)
 4002468:	003a1606 	br	4000cc4 <__alt_mem_onchip_memory2_0+0xfbfe0cc4>
 400246c:	9080100c 	andi	r2,r18,64
 4002470:	10008026 	beq	r2,zero,4002674 <___vfprintf_internal_r+0x1a90>
 4002474:	d8c02d17 	ldw	r3,180(sp)
 4002478:	1cc0000f 	ldh	r19,0(r3)
 400247c:	18c00104 	addi	r3,r3,4
 4002480:	d8c02d15 	stw	r3,180(sp)
 4002484:	982dd7fa 	srai	r22,r19,31
 4002488:	b005883a 	mov	r2,r22
 400248c:	003b1f06 	br	400110c <__alt_mem_onchip_memory2_0+0xfbfe110c>
 4002490:	9080100c 	andi	r2,r18,64
 4002494:	d8002785 	stb	zero,158(sp)
 4002498:	10008a1e 	bne	r2,zero,40026c4 <___vfprintf_internal_r+0x1ae0>
 400249c:	d9402d17 	ldw	r5,180(sp)
 40024a0:	d8c02917 	ldw	r3,164(sp)
 40024a4:	002d883a 	mov	r22,zero
 40024a8:	28800104 	addi	r2,r5,4
 40024ac:	2cc00017 	ldw	r19,0(r5)
 40024b0:	183e4b0e 	bge	r3,zero,4001de0 <__alt_mem_onchip_memory2_0+0xfbfe1de0>
 40024b4:	9d86b03a 	or	r3,r19,r22
 40024b8:	d8802d15 	stw	r2,180(sp)
 40024bc:	183e4c1e 	bne	r3,zero,4001df0 <__alt_mem_onchip_memory2_0+0xfbfe1df0>
 40024c0:	0039883a 	mov	fp,zero
 40024c4:	0005883a 	mov	r2,zero
 40024c8:	003d4006 	br	40019cc <__alt_mem_onchip_memory2_0+0xfbfe19cc>
 40024cc:	014100b4 	movhi	r5,1026
 40024d0:	29621a84 	addi	r5,r5,-30614
 40024d4:	d9402b15 	stw	r5,172(sp)
 40024d8:	d9402b17 	ldw	r5,172(sp)
 40024dc:	1c47883a 	add	r3,r3,r17
 40024e0:	10800044 	addi	r2,r2,1
 40024e4:	41400015 	stw	r5,0(r8)
 40024e8:	44400115 	stw	r17,4(r8)
 40024ec:	d8c02015 	stw	r3,128(sp)
 40024f0:	d8801f15 	stw	r2,124(sp)
 40024f4:	010001c4 	movi	r4,7
 40024f8:	20bec816 	blt	r4,r2,400201c <__alt_mem_onchip_memory2_0+0xfbfe201c>
 40024fc:	42000204 	addi	r8,r8,8
 4002500:	003ecd06 	br	4002038 <__alt_mem_onchip_memory2_0+0xfbfe2038>
 4002504:	d9002917 	ldw	r4,164(sp)
 4002508:	d8002785 	stb	zero,158(sp)
 400250c:	203d2d16 	blt	r4,zero,40019c4 <__alt_mem_onchip_memory2_0+0xfbfe19c4>
 4002510:	00bfdfc4 	movi	r2,-129
 4002514:	90a4703a 	and	r18,r18,r2
 4002518:	003a9106 	br	4000f60 <__alt_mem_onchip_memory2_0+0xfbfe0f60>
 400251c:	010100b4 	movhi	r4,1026
 4002520:	21221a84 	addi	r4,r4,-30614
 4002524:	d9002b15 	stw	r4,172(sp)
 4002528:	003c0c06 	br	400155c <__alt_mem_onchip_memory2_0+0xfbfe155c>
 400252c:	d9002c17 	ldw	r4,176(sp)
 4002530:	d9801e04 	addi	r6,sp,120
 4002534:	b80b883a 	mov	r5,r23
 4002538:	40081e00 	call	40081e0 <__sprint_r>
 400253c:	103aab1e 	bne	r2,zero,4000fec <__alt_mem_onchip_memory2_0+0xfbfe0fec>
 4002540:	d8c02017 	ldw	r3,128(sp)
 4002544:	da000404 	addi	r8,sp,16
 4002548:	003d4106 	br	4001a50 <__alt_mem_onchip_memory2_0+0xfbfe1a50>
 400254c:	d8801f17 	ldw	r2,124(sp)
 4002550:	014100b4 	movhi	r5,1026
 4002554:	01000044 	movi	r4,1
 4002558:	18c00044 	addi	r3,r3,1
 400255c:	10800044 	addi	r2,r2,1
 4002560:	29621a04 	addi	r5,r5,-30616
 4002564:	41000115 	stw	r4,4(r8)
 4002568:	41400015 	stw	r5,0(r8)
 400256c:	d8c02015 	stw	r3,128(sp)
 4002570:	d8801f15 	stw	r2,124(sp)
 4002574:	010001c4 	movi	r4,7
 4002578:	20805c16 	blt	r4,r2,40026ec <___vfprintf_internal_r+0x1b08>
 400257c:	42000204 	addi	r8,r8,8
 4002580:	8800041e 	bne	r17,zero,4002594 <___vfprintf_internal_r+0x19b0>
 4002584:	d8803317 	ldw	r2,204(sp)
 4002588:	1000021e 	bne	r2,zero,4002594 <___vfprintf_internal_r+0x19b0>
 400258c:	9080004c 	andi	r2,r18,1
 4002590:	103c0926 	beq	r2,zero,40015b8 <__alt_mem_onchip_memory2_0+0xfbfe15b8>
 4002594:	d9003717 	ldw	r4,220(sp)
 4002598:	d8801f17 	ldw	r2,124(sp)
 400259c:	d9403417 	ldw	r5,208(sp)
 40025a0:	20c7883a 	add	r3,r4,r3
 40025a4:	10800044 	addi	r2,r2,1
 40025a8:	41000115 	stw	r4,4(r8)
 40025ac:	41400015 	stw	r5,0(r8)
 40025b0:	d8c02015 	stw	r3,128(sp)
 40025b4:	d8801f15 	stw	r2,124(sp)
 40025b8:	010001c4 	movi	r4,7
 40025bc:	20812116 	blt	r4,r2,4002a44 <___vfprintf_internal_r+0x1e60>
 40025c0:	42000204 	addi	r8,r8,8
 40025c4:	0463c83a 	sub	r17,zero,r17
 40025c8:	0440730e 	bge	zero,r17,4002798 <___vfprintf_internal_r+0x1bb4>
 40025cc:	05800404 	movi	r22,16
 40025d0:	b440860e 	bge	r22,r17,40027ec <___vfprintf_internal_r+0x1c08>
 40025d4:	014100b4 	movhi	r5,1026
 40025d8:	29621a84 	addi	r5,r5,-30614
 40025dc:	d9402b15 	stw	r5,172(sp)
 40025e0:	070001c4 	movi	fp,7
 40025e4:	dcc02c17 	ldw	r19,176(sp)
 40025e8:	00000306 	br	40025f8 <___vfprintf_internal_r+0x1a14>
 40025ec:	42000204 	addi	r8,r8,8
 40025f0:	8c7ffc04 	addi	r17,r17,-16
 40025f4:	b440800e 	bge	r22,r17,40027f8 <___vfprintf_internal_r+0x1c14>
 40025f8:	18c00404 	addi	r3,r3,16
 40025fc:	10800044 	addi	r2,r2,1
 4002600:	45000015 	stw	r20,0(r8)
 4002604:	45800115 	stw	r22,4(r8)
 4002608:	d8c02015 	stw	r3,128(sp)
 400260c:	d8801f15 	stw	r2,124(sp)
 4002610:	e0bff60e 	bge	fp,r2,40025ec <__alt_mem_onchip_memory2_0+0xfbfe25ec>
 4002614:	d9801e04 	addi	r6,sp,120
 4002618:	b80b883a 	mov	r5,r23
 400261c:	9809883a 	mov	r4,r19
 4002620:	40081e00 	call	40081e0 <__sprint_r>
 4002624:	103a711e 	bne	r2,zero,4000fec <__alt_mem_onchip_memory2_0+0xfbfe0fec>
 4002628:	d8c02017 	ldw	r3,128(sp)
 400262c:	d8801f17 	ldw	r2,124(sp)
 4002630:	da000404 	addi	r8,sp,16
 4002634:	003fee06 	br	40025f0 <__alt_mem_onchip_memory2_0+0xfbfe25f0>
 4002638:	00bfffc4 	movi	r2,-1
 400263c:	003a6f06 	br	4000ffc <__alt_mem_onchip_memory2_0+0xfbfe0ffc>
 4002640:	008011c4 	movi	r2,71
 4002644:	1440b816 	blt	r2,r17,4002928 <___vfprintf_internal_r+0x1d44>
 4002648:	040100b4 	movhi	r16,1026
 400264c:	84220c04 	addi	r16,r16,-30672
 4002650:	00c000c4 	movi	r3,3
 4002654:	00bfdfc4 	movi	r2,-129
 4002658:	d8c02a15 	stw	r3,168(sp)
 400265c:	90a4703a 	and	r18,r18,r2
 4002660:	df002783 	ldbu	fp,158(sp)
 4002664:	d8c02e15 	stw	r3,184(sp)
 4002668:	d8002915 	stw	zero,164(sp)
 400266c:	d8003215 	stw	zero,200(sp)
 4002670:	003b2906 	br	4001318 <__alt_mem_onchip_memory2_0+0xfbfe1318>
 4002674:	d9002d17 	ldw	r4,180(sp)
 4002678:	24c00017 	ldw	r19,0(r4)
 400267c:	21000104 	addi	r4,r4,4
 4002680:	d9002d15 	stw	r4,180(sp)
 4002684:	982dd7fa 	srai	r22,r19,31
 4002688:	b005883a 	mov	r2,r22
 400268c:	003a9f06 	br	400110c <__alt_mem_onchip_memory2_0+0xfbfe110c>
 4002690:	d9402d17 	ldw	r5,180(sp)
 4002694:	d8c02f17 	ldw	r3,188(sp)
 4002698:	28800017 	ldw	r2,0(r5)
 400269c:	29400104 	addi	r5,r5,4
 40026a0:	d9402d15 	stw	r5,180(sp)
 40026a4:	10c00015 	stw	r3,0(r2)
 40026a8:	00398606 	br	4000cc4 <__alt_mem_onchip_memory2_0+0xfbfe0cc4>
 40026ac:	d9402d17 	ldw	r5,180(sp)
 40026b0:	002d883a 	mov	r22,zero
 40026b4:	2cc00017 	ldw	r19,0(r5)
 40026b8:	29400104 	addi	r5,r5,4
 40026bc:	d9402d15 	stw	r5,180(sp)
 40026c0:	003c2306 	br	4001750 <__alt_mem_onchip_memory2_0+0xfbfe1750>
 40026c4:	d8c02d17 	ldw	r3,180(sp)
 40026c8:	d9002917 	ldw	r4,164(sp)
 40026cc:	002d883a 	mov	r22,zero
 40026d0:	18800104 	addi	r2,r3,4
 40026d4:	1cc0000b 	ldhu	r19,0(r3)
 40026d8:	203dc10e 	bge	r4,zero,4001de0 <__alt_mem_onchip_memory2_0+0xfbfe1de0>
 40026dc:	003f7506 	br	40024b4 <__alt_mem_onchip_memory2_0+0xfbfe24b4>
 40026e0:	040100b4 	movhi	r16,1026
 40026e4:	84220a04 	addi	r16,r16,-30680
 40026e8:	003acc06 	br	400121c <__alt_mem_onchip_memory2_0+0xfbfe121c>
 40026ec:	d9002c17 	ldw	r4,176(sp)
 40026f0:	d9801e04 	addi	r6,sp,120
 40026f4:	b80b883a 	mov	r5,r23
 40026f8:	40081e00 	call	40081e0 <__sprint_r>
 40026fc:	103a3b1e 	bne	r2,zero,4000fec <__alt_mem_onchip_memory2_0+0xfbfe0fec>
 4002700:	dc402617 	ldw	r17,152(sp)
 4002704:	d8c02017 	ldw	r3,128(sp)
 4002708:	da000404 	addi	r8,sp,16
 400270c:	003f9c06 	br	4002580 <__alt_mem_onchip_memory2_0+0xfbfe2580>
 4002710:	ac400043 	ldbu	r17,1(r21)
 4002714:	94800814 	ori	r18,r18,32
 4002718:	ad400044 	addi	r21,r21,1
 400271c:	8c403fcc 	andi	r17,r17,255
 4002720:	8c40201c 	xori	r17,r17,128
 4002724:	8c7fe004 	addi	r17,r17,-128
 4002728:	00398f06 	br	4000d68 <__alt_mem_onchip_memory2_0+0xfbfe0d68>
 400272c:	d8c02d15 	stw	r3,180(sp)
 4002730:	0039883a 	mov	fp,zero
 4002734:	003e3506 	br	400200c <__alt_mem_onchip_memory2_0+0xfbfe200c>
 4002738:	d9002c17 	ldw	r4,176(sp)
 400273c:	d9801e04 	addi	r6,sp,120
 4002740:	b80b883a 	mov	r5,r23
 4002744:	40081e00 	call	40081e0 <__sprint_r>
 4002748:	103a281e 	bne	r2,zero,4000fec <__alt_mem_onchip_memory2_0+0xfbfe0fec>
 400274c:	d8c02017 	ldw	r3,128(sp)
 4002750:	da000404 	addi	r8,sp,16
 4002754:	003cd006 	br	4001a98 <__alt_mem_onchip_memory2_0+0xfbfe1a98>
 4002758:	8009883a 	mov	r4,r16
 400275c:	da003d15 	stw	r8,244(sp)
 4002760:	4000b4c0 	call	4000b4c <strlen>
 4002764:	d8802e15 	stw	r2,184(sp)
 4002768:	da003d17 	ldw	r8,244(sp)
 400276c:	103c340e 	bge	r2,zero,4001840 <__alt_mem_onchip_memory2_0+0xfbfe1840>
 4002770:	0005883a 	mov	r2,zero
 4002774:	003c3206 	br	4001840 <__alt_mem_onchip_memory2_0+0xfbfe1840>
 4002778:	d9002c17 	ldw	r4,176(sp)
 400277c:	d9801e04 	addi	r6,sp,120
 4002780:	b80b883a 	mov	r5,r23
 4002784:	40081e00 	call	40081e0 <__sprint_r>
 4002788:	103a181e 	bne	r2,zero,4000fec <__alt_mem_onchip_memory2_0+0xfbfe0fec>
 400278c:	d8c02017 	ldw	r3,128(sp)
 4002790:	d8801f17 	ldw	r2,124(sp)
 4002794:	da000404 	addi	r8,sp,16
 4002798:	d9403317 	ldw	r5,204(sp)
 400279c:	10800044 	addi	r2,r2,1
 40027a0:	44000015 	stw	r16,0(r8)
 40027a4:	28c7883a 	add	r3,r5,r3
 40027a8:	003b7d06 	br	40015a0 <__alt_mem_onchip_memory2_0+0xfbfe15a0>
 40027ac:	010100b4 	movhi	r4,1026
 40027b0:	21221e84 	addi	r4,r4,-30598
 40027b4:	d9003515 	stw	r4,212(sp)
 40027b8:	003b1406 	br	400140c <__alt_mem_onchip_memory2_0+0xfbfe140c>
 40027bc:	013fffc4 	movi	r4,-1
 40027c0:	003a3506 	br	4001098 <__alt_mem_onchip_memory2_0+0xfbfe1098>
 40027c4:	0023883a 	mov	r17,zero
 40027c8:	003d9d06 	br	4001e40 <__alt_mem_onchip_memory2_0+0xfbfe1e40>
 40027cc:	d9002c17 	ldw	r4,176(sp)
 40027d0:	d9801e04 	addi	r6,sp,120
 40027d4:	b80b883a 	mov	r5,r23
 40027d8:	40081e00 	call	40081e0 <__sprint_r>
 40027dc:	103a031e 	bne	r2,zero,4000fec <__alt_mem_onchip_memory2_0+0xfbfe0fec>
 40027e0:	d8c02017 	ldw	r3,128(sp)
 40027e4:	da000404 	addi	r8,sp,16
 40027e8:	003d9406 	br	4001e3c <__alt_mem_onchip_memory2_0+0xfbfe1e3c>
 40027ec:	010100b4 	movhi	r4,1026
 40027f0:	21221a84 	addi	r4,r4,-30614
 40027f4:	d9002b15 	stw	r4,172(sp)
 40027f8:	d9002b17 	ldw	r4,172(sp)
 40027fc:	1c47883a 	add	r3,r3,r17
 4002800:	10800044 	addi	r2,r2,1
 4002804:	41000015 	stw	r4,0(r8)
 4002808:	44400115 	stw	r17,4(r8)
 400280c:	d8c02015 	stw	r3,128(sp)
 4002810:	d8801f15 	stw	r2,124(sp)
 4002814:	010001c4 	movi	r4,7
 4002818:	20bfd716 	blt	r4,r2,4002778 <__alt_mem_onchip_memory2_0+0xfbfe2778>
 400281c:	42000204 	addi	r8,r8,8
 4002820:	003fdd06 	br	4002798 <__alt_mem_onchip_memory2_0+0xfbfe2798>
 4002824:	d9002c17 	ldw	r4,176(sp)
 4002828:	d9801e04 	addi	r6,sp,120
 400282c:	b80b883a 	mov	r5,r23
 4002830:	40081e00 	call	40081e0 <__sprint_r>
 4002834:	1039ed1e 	bne	r2,zero,4000fec <__alt_mem_onchip_memory2_0+0xfbfe0fec>
 4002838:	d8802617 	ldw	r2,152(sp)
 400283c:	d8c02017 	ldw	r3,128(sp)
 4002840:	da000404 	addi	r8,sp,16
 4002844:	003e1006 	br	4002088 <__alt_mem_onchip_memory2_0+0xfbfe2088>
 4002848:	00800044 	movi	r2,1
 400284c:	10803fcc 	andi	r2,r2,255
 4002850:	00c00044 	movi	r3,1
 4002854:	10fa3526 	beq	r2,r3,400112c <__alt_mem_onchip_memory2_0+0xfbfe112c>
 4002858:	00c00084 	movi	r3,2
 400285c:	10fbcb26 	beq	r2,r3,400178c <__alt_mem_onchip_memory2_0+0xfbfe178c>
 4002860:	003a8f06 	br	40012a0 <__alt_mem_onchip_memory2_0+0xfbfe12a0>
 4002864:	010100b4 	movhi	r4,1026
 4002868:	21221e84 	addi	r4,r4,-30598
 400286c:	d9003515 	stw	r4,212(sp)
 4002870:	003b7606 	br	400164c <__alt_mem_onchip_memory2_0+0xfbfe164c>
 4002874:	d8802917 	ldw	r2,164(sp)
 4002878:	00c00184 	movi	r3,6
 400287c:	1880012e 	bgeu	r3,r2,4002884 <___vfprintf_internal_r+0x1ca0>
 4002880:	1805883a 	mov	r2,r3
 4002884:	d8802e15 	stw	r2,184(sp)
 4002888:	1000ef16 	blt	r2,zero,4002c48 <___vfprintf_internal_r+0x2064>
 400288c:	040100b4 	movhi	r16,1026
 4002890:	d8802a15 	stw	r2,168(sp)
 4002894:	dcc02d15 	stw	r19,180(sp)
 4002898:	d8002915 	stw	zero,164(sp)
 400289c:	d8003215 	stw	zero,200(sp)
 40028a0:	84221804 	addi	r16,r16,-30624
 40028a4:	0039883a 	mov	fp,zero
 40028a8:	003aa206 	br	4001334 <__alt_mem_onchip_memory2_0+0xfbfe1334>
 40028ac:	0021883a 	mov	r16,zero
 40028b0:	003e0706 	br	40020d0 <__alt_mem_onchip_memory2_0+0xfbfe20d0>
 40028b4:	d9002c17 	ldw	r4,176(sp)
 40028b8:	d9801e04 	addi	r6,sp,120
 40028bc:	b80b883a 	mov	r5,r23
 40028c0:	40081e00 	call	40081e0 <__sprint_r>
 40028c4:	1039c91e 	bne	r2,zero,4000fec <__alt_mem_onchip_memory2_0+0xfbfe0fec>
 40028c8:	d8802617 	ldw	r2,152(sp)
 40028cc:	d9403317 	ldw	r5,204(sp)
 40028d0:	d8c02017 	ldw	r3,128(sp)
 40028d4:	da000404 	addi	r8,sp,16
 40028d8:	2885c83a 	sub	r2,r5,r2
 40028dc:	003dfb06 	br	40020cc <__alt_mem_onchip_memory2_0+0xfbfe20cc>
 40028e0:	9080004c 	andi	r2,r18,1
 40028e4:	103e8f1e 	bne	r2,zero,4002324 <__alt_mem_onchip_memory2_0+0xfbfe2324>
 40028e8:	d8802117 	ldw	r2,132(sp)
 40028ec:	003e9e06 	br	4002368 <__alt_mem_onchip_memory2_0+0xfbfe2368>
 40028f0:	1025883a 	mov	r18,r2
 40028f4:	0039883a 	mov	fp,zero
 40028f8:	00800084 	movi	r2,2
 40028fc:	003fd306 	br	400284c <__alt_mem_onchip_memory2_0+0xfbfe284c>
 4002900:	07000b44 	movi	fp,45
 4002904:	df002785 	stb	fp,158(sp)
 4002908:	003a4006 	br	400120c <__alt_mem_onchip_memory2_0+0xfbfe120c>
 400290c:	00c00b44 	movi	r3,45
 4002910:	d8c02785 	stb	r3,158(sp)
 4002914:	d8802a15 	stw	r2,168(sp)
 4002918:	dc802b17 	ldw	r18,172(sp)
 400291c:	d8002915 	stw	zero,164(sp)
 4002920:	07000b44 	movi	fp,45
 4002924:	003a8006 	br	4001328 <__alt_mem_onchip_memory2_0+0xfbfe1328>
 4002928:	040100b4 	movhi	r16,1026
 400292c:	84220d04 	addi	r16,r16,-30668
 4002930:	003f4706 	br	4002650 <__alt_mem_onchip_memory2_0+0xfbfe2650>
 4002934:	d8c02d17 	ldw	r3,180(sp)
 4002938:	d9002f17 	ldw	r4,188(sp)
 400293c:	18800017 	ldw	r2,0(r3)
 4002940:	18c00104 	addi	r3,r3,4
 4002944:	d8c02d15 	stw	r3,180(sp)
 4002948:	11000015 	stw	r4,0(r2)
 400294c:	0038dd06 	br	4000cc4 <__alt_mem_onchip_memory2_0+0xfbfe0cc4>
 4002950:	dd802617 	ldw	r22,152(sp)
 4002954:	00bfff44 	movi	r2,-3
 4002958:	b0801c16 	blt	r22,r2,40029cc <___vfprintf_internal_r+0x1de8>
 400295c:	d9402917 	ldw	r5,164(sp)
 4002960:	2d801a16 	blt	r5,r22,40029cc <___vfprintf_internal_r+0x1de8>
 4002964:	dd803215 	stw	r22,200(sp)
 4002968:	003e8906 	br	4002390 <__alt_mem_onchip_memory2_0+0xfbfe2390>
 400296c:	010100b4 	movhi	r4,1026
 4002970:	21221a84 	addi	r4,r4,-30614
 4002974:	d9002b15 	stw	r4,172(sp)
 4002978:	003c9106 	br	4001bc0 <__alt_mem_onchip_memory2_0+0xfbfe1bc0>
 400297c:	e005883a 	mov	r2,fp
 4002980:	003e7906 	br	4002368 <__alt_mem_onchip_memory2_0+0xfbfe2368>
 4002984:	d9402917 	ldw	r5,164(sp)
 4002988:	df002783 	ldbu	fp,158(sp)
 400298c:	dcc02d15 	stw	r19,180(sp)
 4002990:	d9402a15 	stw	r5,168(sp)
 4002994:	d9402e15 	stw	r5,184(sp)
 4002998:	d8002915 	stw	zero,164(sp)
 400299c:	d8003215 	stw	zero,200(sp)
 40029a0:	003a5d06 	br	4001318 <__alt_mem_onchip_memory2_0+0xfbfe1318>
 40029a4:	9080004c 	andi	r2,r18,1
 40029a8:	0039883a 	mov	fp,zero
 40029ac:	10000426 	beq	r2,zero,40029c0 <___vfprintf_internal_r+0x1ddc>
 40029b0:	00800c04 	movi	r2,48
 40029b4:	dc001dc4 	addi	r16,sp,119
 40029b8:	d8801dc5 	stb	r2,119(sp)
 40029bc:	003b8006 	br	40017c0 <__alt_mem_onchip_memory2_0+0xfbfe17c0>
 40029c0:	d8002e15 	stw	zero,184(sp)
 40029c4:	dc001e04 	addi	r16,sp,120
 40029c8:	003a4d06 	br	4001300 <__alt_mem_onchip_memory2_0+0xfbfe1300>
 40029cc:	8c7fff84 	addi	r17,r17,-2
 40029d0:	b5bfffc4 	addi	r22,r22,-1
 40029d4:	dd802615 	stw	r22,152(sp)
 40029d8:	dc4022c5 	stb	r17,139(sp)
 40029dc:	b000bf16 	blt	r22,zero,4002cdc <___vfprintf_internal_r+0x20f8>
 40029e0:	00800ac4 	movi	r2,43
 40029e4:	d8802305 	stb	r2,140(sp)
 40029e8:	00800244 	movi	r2,9
 40029ec:	15807016 	blt	r2,r22,4002bb0 <___vfprintf_internal_r+0x1fcc>
 40029f0:	00800c04 	movi	r2,48
 40029f4:	b5800c04 	addi	r22,r22,48
 40029f8:	d8802345 	stb	r2,141(sp)
 40029fc:	dd802385 	stb	r22,142(sp)
 4002a00:	d88023c4 	addi	r2,sp,143
 4002a04:	df0022c4 	addi	fp,sp,139
 4002a08:	d8c03317 	ldw	r3,204(sp)
 4002a0c:	1739c83a 	sub	fp,r2,fp
 4002a10:	d9003317 	ldw	r4,204(sp)
 4002a14:	e0c7883a 	add	r3,fp,r3
 4002a18:	df003a15 	stw	fp,232(sp)
 4002a1c:	d8c02e15 	stw	r3,184(sp)
 4002a20:	00800044 	movi	r2,1
 4002a24:	1100b30e 	bge	r2,r4,4002cf4 <___vfprintf_internal_r+0x2110>
 4002a28:	d8c02e17 	ldw	r3,184(sp)
 4002a2c:	18c00044 	addi	r3,r3,1
 4002a30:	d8c02e15 	stw	r3,184(sp)
 4002a34:	1805883a 	mov	r2,r3
 4002a38:	1800ac16 	blt	r3,zero,4002cec <___vfprintf_internal_r+0x2108>
 4002a3c:	d8003215 	stw	zero,200(sp)
 4002a40:	003e5d06 	br	40023b8 <__alt_mem_onchip_memory2_0+0xfbfe23b8>
 4002a44:	d9002c17 	ldw	r4,176(sp)
 4002a48:	d9801e04 	addi	r6,sp,120
 4002a4c:	b80b883a 	mov	r5,r23
 4002a50:	40081e00 	call	40081e0 <__sprint_r>
 4002a54:	1039651e 	bne	r2,zero,4000fec <__alt_mem_onchip_memory2_0+0xfbfe0fec>
 4002a58:	dc402617 	ldw	r17,152(sp)
 4002a5c:	d8c02017 	ldw	r3,128(sp)
 4002a60:	d8801f17 	ldw	r2,124(sp)
 4002a64:	da000404 	addi	r8,sp,16
 4002a68:	003ed606 	br	40025c4 <__alt_mem_onchip_memory2_0+0xfbfe25c4>
 4002a6c:	582b883a 	mov	r21,r11
 4002a70:	d8002915 	stw	zero,164(sp)
 4002a74:	0038bd06 	br	4000d6c <__alt_mem_onchip_memory2_0+0xfbfe0d6c>
 4002a78:	d8802917 	ldw	r2,164(sp)
 4002a7c:	103e071e 	bne	r2,zero,400229c <__alt_mem_onchip_memory2_0+0xfbfe229c>
 4002a80:	dc002915 	stw	r16,164(sp)
 4002a84:	003e0506 	br	400229c <__alt_mem_onchip_memory2_0+0xfbfe229c>
 4002a88:	d9002917 	ldw	r4,164(sp)
 4002a8c:	20c00044 	addi	r3,r4,1
 4002a90:	003e0f06 	br	40022d0 <__alt_mem_onchip_memory2_0+0xfbfe22d0>
 4002a94:	01400184 	movi	r5,6
 4002a98:	d9402915 	stw	r5,164(sp)
 4002a9c:	003dff06 	br	400229c <__alt_mem_onchip_memory2_0+0xfbfe229c>
 4002aa0:	d8802104 	addi	r2,sp,132
 4002aa4:	d8800315 	stw	r2,12(sp)
 4002aa8:	d8802504 	addi	r2,sp,148
 4002aac:	d8800215 	stw	r2,8(sp)
 4002ab0:	d8802604 	addi	r2,sp,152
 4002ab4:	d8800115 	stw	r2,4(sp)
 4002ab8:	d8802917 	ldw	r2,164(sp)
 4002abc:	d9403617 	ldw	r5,216(sp)
 4002ac0:	d9002c17 	ldw	r4,176(sp)
 4002ac4:	d8800015 	stw	r2,0(sp)
 4002ac8:	01c000c4 	movi	r7,3
 4002acc:	980d883a 	mov	r6,r19
 4002ad0:	da003d15 	stw	r8,244(sp)
 4002ad4:	40032080 	call	4003208 <_dtoa_r>
 4002ad8:	d8c02917 	ldw	r3,164(sp)
 4002adc:	da003d17 	ldw	r8,244(sp)
 4002ae0:	1021883a 	mov	r16,r2
 4002ae4:	10f9883a 	add	fp,r2,r3
 4002ae8:	81000007 	ldb	r4,0(r16)
 4002aec:	00800c04 	movi	r2,48
 4002af0:	20805e26 	beq	r4,r2,4002c6c <___vfprintf_internal_r+0x2088>
 4002af4:	d8c02617 	ldw	r3,152(sp)
 4002af8:	e0f9883a 	add	fp,fp,r3
 4002afc:	003e0a06 	br	4002328 <__alt_mem_onchip_memory2_0+0xfbfe2328>
 4002b00:	00c00b44 	movi	r3,45
 4002b04:	24e0003c 	xorhi	r19,r4,32768
 4002b08:	d8c02a05 	stb	r3,168(sp)
 4002b0c:	003de906 	br	40022b4 <__alt_mem_onchip_memory2_0+0xfbfe22b4>
 4002b10:	d8c03217 	ldw	r3,200(sp)
 4002b14:	00c07a0e 	bge	zero,r3,4002d00 <___vfprintf_internal_r+0x211c>
 4002b18:	00800044 	movi	r2,1
 4002b1c:	d9003317 	ldw	r4,204(sp)
 4002b20:	1105883a 	add	r2,r2,r4
 4002b24:	d8802e15 	stw	r2,184(sp)
 4002b28:	10004e16 	blt	r2,zero,4002c64 <___vfprintf_internal_r+0x2080>
 4002b2c:	044019c4 	movi	r17,103
 4002b30:	003e2106 	br	40023b8 <__alt_mem_onchip_memory2_0+0xfbfe23b8>
 4002b34:	d9002917 	ldw	r4,164(sp)
 4002b38:	d8802104 	addi	r2,sp,132
 4002b3c:	d8800315 	stw	r2,12(sp)
 4002b40:	d9000015 	stw	r4,0(sp)
 4002b44:	d8802504 	addi	r2,sp,148
 4002b48:	d9403617 	ldw	r5,216(sp)
 4002b4c:	d9002c17 	ldw	r4,176(sp)
 4002b50:	d8800215 	stw	r2,8(sp)
 4002b54:	d8802604 	addi	r2,sp,152
 4002b58:	d8800115 	stw	r2,4(sp)
 4002b5c:	01c000c4 	movi	r7,3
 4002b60:	980d883a 	mov	r6,r19
 4002b64:	da003d15 	stw	r8,244(sp)
 4002b68:	40032080 	call	4003208 <_dtoa_r>
 4002b6c:	d8c02917 	ldw	r3,164(sp)
 4002b70:	da003d17 	ldw	r8,244(sp)
 4002b74:	1021883a 	mov	r16,r2
 4002b78:	00801184 	movi	r2,70
 4002b7c:	80f9883a 	add	fp,r16,r3
 4002b80:	88bfd926 	beq	r17,r2,4002ae8 <__alt_mem_onchip_memory2_0+0xfbfe2ae8>
 4002b84:	003de806 	br	4002328 <__alt_mem_onchip_memory2_0+0xfbfe2328>
 4002b88:	d9002917 	ldw	r4,164(sp)
 4002b8c:	00c04d0e 	bge	zero,r3,4002cc4 <___vfprintf_internal_r+0x20e0>
 4002b90:	2000441e 	bne	r4,zero,4002ca4 <___vfprintf_internal_r+0x20c0>
 4002b94:	9480004c 	andi	r18,r18,1
 4002b98:	9000421e 	bne	r18,zero,4002ca4 <___vfprintf_internal_r+0x20c0>
 4002b9c:	1805883a 	mov	r2,r3
 4002ba0:	18007016 	blt	r3,zero,4002d64 <___vfprintf_internal_r+0x2180>
 4002ba4:	d8c03217 	ldw	r3,200(sp)
 4002ba8:	d8c02e15 	stw	r3,184(sp)
 4002bac:	003e0206 	br	40023b8 <__alt_mem_onchip_memory2_0+0xfbfe23b8>
 4002bb0:	df0022c4 	addi	fp,sp,139
 4002bb4:	dc002915 	stw	r16,164(sp)
 4002bb8:	4027883a 	mov	r19,r8
 4002bbc:	e021883a 	mov	r16,fp
 4002bc0:	b009883a 	mov	r4,r22
 4002bc4:	01400284 	movi	r5,10
 4002bc8:	400ab940 	call	400ab94 <__modsi3>
 4002bcc:	10800c04 	addi	r2,r2,48
 4002bd0:	843fffc4 	addi	r16,r16,-1
 4002bd4:	b009883a 	mov	r4,r22
 4002bd8:	01400284 	movi	r5,10
 4002bdc:	80800005 	stb	r2,0(r16)
 4002be0:	400ab100 	call	400ab10 <__divsi3>
 4002be4:	102d883a 	mov	r22,r2
 4002be8:	00800244 	movi	r2,9
 4002bec:	15bff416 	blt	r2,r22,4002bc0 <__alt_mem_onchip_memory2_0+0xfbfe2bc0>
 4002bf0:	9811883a 	mov	r8,r19
 4002bf4:	b0800c04 	addi	r2,r22,48
 4002bf8:	8027883a 	mov	r19,r16
 4002bfc:	997fffc4 	addi	r5,r19,-1
 4002c00:	98bfffc5 	stb	r2,-1(r19)
 4002c04:	dc002917 	ldw	r16,164(sp)
 4002c08:	2f006a2e 	bgeu	r5,fp,4002db4 <___vfprintf_internal_r+0x21d0>
 4002c0c:	d9c02384 	addi	r7,sp,142
 4002c10:	3ccfc83a 	sub	r7,r7,r19
 4002c14:	d9002344 	addi	r4,sp,141
 4002c18:	e1cf883a 	add	r7,fp,r7
 4002c1c:	00000106 	br	4002c24 <___vfprintf_internal_r+0x2040>
 4002c20:	28800003 	ldbu	r2,0(r5)
 4002c24:	20800005 	stb	r2,0(r4)
 4002c28:	21000044 	addi	r4,r4,1
 4002c2c:	29400044 	addi	r5,r5,1
 4002c30:	393ffb1e 	bne	r7,r4,4002c20 <__alt_mem_onchip_memory2_0+0xfbfe2c20>
 4002c34:	d8802304 	addi	r2,sp,140
 4002c38:	14c5c83a 	sub	r2,r2,r19
 4002c3c:	d8c02344 	addi	r3,sp,141
 4002c40:	1885883a 	add	r2,r3,r2
 4002c44:	003f7006 	br	4002a08 <__alt_mem_onchip_memory2_0+0xfbfe2a08>
 4002c48:	0005883a 	mov	r2,zero
 4002c4c:	003f0f06 	br	400288c <__alt_mem_onchip_memory2_0+0xfbfe288c>
 4002c50:	d8c03217 	ldw	r3,200(sp)
 4002c54:	18c00044 	addi	r3,r3,1
 4002c58:	d8c02e15 	stw	r3,184(sp)
 4002c5c:	1805883a 	mov	r2,r3
 4002c60:	183fb20e 	bge	r3,zero,4002b2c <__alt_mem_onchip_memory2_0+0xfbfe2b2c>
 4002c64:	0005883a 	mov	r2,zero
 4002c68:	003fb006 	br	4002b2c <__alt_mem_onchip_memory2_0+0xfbfe2b2c>
 4002c6c:	d9003617 	ldw	r4,216(sp)
 4002c70:	000d883a 	mov	r6,zero
 4002c74:	000f883a 	mov	r7,zero
 4002c78:	980b883a 	mov	r5,r19
 4002c7c:	d8c03c15 	stw	r3,240(sp)
 4002c80:	da003d15 	stw	r8,244(sp)
 4002c84:	400be580 	call	400be58 <__eqdf2>
 4002c88:	d8c03c17 	ldw	r3,240(sp)
 4002c8c:	da003d17 	ldw	r8,244(sp)
 4002c90:	103f9826 	beq	r2,zero,4002af4 <__alt_mem_onchip_memory2_0+0xfbfe2af4>
 4002c94:	00800044 	movi	r2,1
 4002c98:	10c7c83a 	sub	r3,r2,r3
 4002c9c:	d8c02615 	stw	r3,152(sp)
 4002ca0:	003f9506 	br	4002af8 <__alt_mem_onchip_memory2_0+0xfbfe2af8>
 4002ca4:	d9002917 	ldw	r4,164(sp)
 4002ca8:	d8c03217 	ldw	r3,200(sp)
 4002cac:	20800044 	addi	r2,r4,1
 4002cb0:	1885883a 	add	r2,r3,r2
 4002cb4:	d8802e15 	stw	r2,184(sp)
 4002cb8:	103dbf0e 	bge	r2,zero,40023b8 <__alt_mem_onchip_memory2_0+0xfbfe23b8>
 4002cbc:	0005883a 	mov	r2,zero
 4002cc0:	003dbd06 	br	40023b8 <__alt_mem_onchip_memory2_0+0xfbfe23b8>
 4002cc4:	2000211e 	bne	r4,zero,4002d4c <___vfprintf_internal_r+0x2168>
 4002cc8:	9480004c 	andi	r18,r18,1
 4002ccc:	90001f1e 	bne	r18,zero,4002d4c <___vfprintf_internal_r+0x2168>
 4002cd0:	00800044 	movi	r2,1
 4002cd4:	d8802e15 	stw	r2,184(sp)
 4002cd8:	003db706 	br	40023b8 <__alt_mem_onchip_memory2_0+0xfbfe23b8>
 4002cdc:	00800b44 	movi	r2,45
 4002ce0:	05adc83a 	sub	r22,zero,r22
 4002ce4:	d8802305 	stb	r2,140(sp)
 4002ce8:	003f3f06 	br	40029e8 <__alt_mem_onchip_memory2_0+0xfbfe29e8>
 4002cec:	0005883a 	mov	r2,zero
 4002cf0:	003f5206 	br	4002a3c <__alt_mem_onchip_memory2_0+0xfbfe2a3c>
 4002cf4:	90a4703a 	and	r18,r18,r2
 4002cf8:	903f4e26 	beq	r18,zero,4002a34 <__alt_mem_onchip_memory2_0+0xfbfe2a34>
 4002cfc:	003f4a06 	br	4002a28 <__alt_mem_onchip_memory2_0+0xfbfe2a28>
 4002d00:	00800084 	movi	r2,2
 4002d04:	10c5c83a 	sub	r2,r2,r3
 4002d08:	003f8406 	br	4002b1c <__alt_mem_onchip_memory2_0+0xfbfe2b1c>
 4002d0c:	d8802d17 	ldw	r2,180(sp)
 4002d10:	d9002d17 	ldw	r4,180(sp)
 4002d14:	ac400043 	ldbu	r17,1(r21)
 4002d18:	10800017 	ldw	r2,0(r2)
 4002d1c:	582b883a 	mov	r21,r11
 4002d20:	d8802915 	stw	r2,164(sp)
 4002d24:	20800104 	addi	r2,r4,4
 4002d28:	d9002917 	ldw	r4,164(sp)
 4002d2c:	d8802d15 	stw	r2,180(sp)
 4002d30:	203e7a0e 	bge	r4,zero,400271c <__alt_mem_onchip_memory2_0+0xfbfe271c>
 4002d34:	8c403fcc 	andi	r17,r17,255
 4002d38:	00bfffc4 	movi	r2,-1
 4002d3c:	8c40201c 	xori	r17,r17,128
 4002d40:	d8802915 	stw	r2,164(sp)
 4002d44:	8c7fe004 	addi	r17,r17,-128
 4002d48:	00380706 	br	4000d68 <__alt_mem_onchip_memory2_0+0xfbfe0d68>
 4002d4c:	d8c02917 	ldw	r3,164(sp)
 4002d50:	18c00084 	addi	r3,r3,2
 4002d54:	d8c02e15 	stw	r3,184(sp)
 4002d58:	1805883a 	mov	r2,r3
 4002d5c:	183d960e 	bge	r3,zero,40023b8 <__alt_mem_onchip_memory2_0+0xfbfe23b8>
 4002d60:	003fd606 	br	4002cbc <__alt_mem_onchip_memory2_0+0xfbfe2cbc>
 4002d64:	0005883a 	mov	r2,zero
 4002d68:	003f8e06 	br	4002ba4 <__alt_mem_onchip_memory2_0+0xfbfe2ba4>
 4002d6c:	9080004c 	andi	r2,r18,1
 4002d70:	103f811e 	bne	r2,zero,4002b78 <__alt_mem_onchip_memory2_0+0xfbfe2b78>
 4002d74:	d8802117 	ldw	r2,132(sp)
 4002d78:	1405c83a 	sub	r2,r2,r16
 4002d7c:	d8803315 	stw	r2,204(sp)
 4002d80:	b47ef326 	beq	r22,r17,4002950 <__alt_mem_onchip_memory2_0+0xfbfe2950>
 4002d84:	dd802617 	ldw	r22,152(sp)
 4002d88:	003f1106 	br	40029d0 <__alt_mem_onchip_memory2_0+0xfbfe29d0>
 4002d8c:	d9c02785 	stb	r7,158(sp)
 4002d90:	00390406 	br	40011a4 <__alt_mem_onchip_memory2_0+0xfbfe11a4>
 4002d94:	d9c02785 	stb	r7,158(sp)
 4002d98:	0038d306 	br	40010e8 <__alt_mem_onchip_memory2_0+0xfbfe10e8>
 4002d9c:	d9c02785 	stb	r7,158(sp)
 4002da0:	003a6106 	br	4001728 <__alt_mem_onchip_memory2_0+0xfbfe1728>
 4002da4:	d9c02785 	stb	r7,158(sp)
 4002da8:	003af806 	br	400198c <__alt_mem_onchip_memory2_0+0xfbfe198c>
 4002dac:	0005883a 	mov	r2,zero
 4002db0:	003d7e06 	br	40023ac <__alt_mem_onchip_memory2_0+0xfbfe23ac>
 4002db4:	d8802344 	addi	r2,sp,141
 4002db8:	003f1306 	br	4002a08 <__alt_mem_onchip_memory2_0+0xfbfe2a08>
 4002dbc:	d9c02785 	stb	r7,158(sp)
 4002dc0:	00392306 	br	4001250 <__alt_mem_onchip_memory2_0+0xfbfe1250>
 4002dc4:	d9c02785 	stb	r7,158(sp)
 4002dc8:	003aa906 	br	4001870 <__alt_mem_onchip_memory2_0+0xfbfe1870>
 4002dcc:	d9c02785 	stb	r7,158(sp)
 4002dd0:	003a3d06 	br	40016c8 <__alt_mem_onchip_memory2_0+0xfbfe16c8>
 4002dd4:	d9c02785 	stb	r7,158(sp)
 4002dd8:	003aca06 	br	4001904 <__alt_mem_onchip_memory2_0+0xfbfe1904>

04002ddc <__vfprintf_internal>:
 4002ddc:	008100b4 	movhi	r2,1026
 4002de0:	10a9c104 	addi	r2,r2,-22780
 4002de4:	300f883a 	mov	r7,r6
 4002de8:	280d883a 	mov	r6,r5
 4002dec:	200b883a 	mov	r5,r4
 4002df0:	11000017 	ldw	r4,0(r2)
 4002df4:	4000be41 	jmpi	4000be4 <___vfprintf_internal_r>

04002df8 <__sbprintf>:
 4002df8:	2880030b 	ldhu	r2,12(r5)
 4002dfc:	2ac01917 	ldw	r11,100(r5)
 4002e00:	2a80038b 	ldhu	r10,14(r5)
 4002e04:	2a400717 	ldw	r9,28(r5)
 4002e08:	2a000917 	ldw	r8,36(r5)
 4002e0c:	defee204 	addi	sp,sp,-1144
 4002e10:	00c10004 	movi	r3,1024
 4002e14:	dc011a15 	stw	r16,1128(sp)
 4002e18:	10bfff4c 	andi	r2,r2,65533
 4002e1c:	2821883a 	mov	r16,r5
 4002e20:	d8cb883a 	add	r5,sp,r3
 4002e24:	dc811c15 	stw	r18,1136(sp)
 4002e28:	dc411b15 	stw	r17,1132(sp)
 4002e2c:	dfc11d15 	stw	ra,1140(sp)
 4002e30:	2025883a 	mov	r18,r4
 4002e34:	d881030d 	sth	r2,1036(sp)
 4002e38:	dac11915 	stw	r11,1124(sp)
 4002e3c:	da81038d 	sth	r10,1038(sp)
 4002e40:	da410715 	stw	r9,1052(sp)
 4002e44:	da010915 	stw	r8,1060(sp)
 4002e48:	dec10015 	stw	sp,1024(sp)
 4002e4c:	dec10415 	stw	sp,1040(sp)
 4002e50:	d8c10215 	stw	r3,1032(sp)
 4002e54:	d8c10515 	stw	r3,1044(sp)
 4002e58:	d8010615 	stw	zero,1048(sp)
 4002e5c:	4000be40 	call	4000be4 <___vfprintf_internal_r>
 4002e60:	1023883a 	mov	r17,r2
 4002e64:	10000416 	blt	r2,zero,4002e78 <__sbprintf+0x80>
 4002e68:	d9410004 	addi	r5,sp,1024
 4002e6c:	9009883a 	mov	r4,r18
 4002e70:	4004aac0 	call	4004aac <_fflush_r>
 4002e74:	10000d1e 	bne	r2,zero,4002eac <__sbprintf+0xb4>
 4002e78:	d881030b 	ldhu	r2,1036(sp)
 4002e7c:	1080100c 	andi	r2,r2,64
 4002e80:	10000326 	beq	r2,zero,4002e90 <__sbprintf+0x98>
 4002e84:	8080030b 	ldhu	r2,12(r16)
 4002e88:	10801014 	ori	r2,r2,64
 4002e8c:	8080030d 	sth	r2,12(r16)
 4002e90:	8805883a 	mov	r2,r17
 4002e94:	dfc11d17 	ldw	ra,1140(sp)
 4002e98:	dc811c17 	ldw	r18,1136(sp)
 4002e9c:	dc411b17 	ldw	r17,1132(sp)
 4002ea0:	dc011a17 	ldw	r16,1128(sp)
 4002ea4:	dec11e04 	addi	sp,sp,1144
 4002ea8:	f800283a 	ret
 4002eac:	047fffc4 	movi	r17,-1
 4002eb0:	003ff106 	br	4002e78 <__alt_mem_onchip_memory2_0+0xfbfe2e78>

04002eb4 <__swsetup_r>:
 4002eb4:	008100b4 	movhi	r2,1026
 4002eb8:	defffd04 	addi	sp,sp,-12
 4002ebc:	10a9c104 	addi	r2,r2,-22780
 4002ec0:	dc400115 	stw	r17,4(sp)
 4002ec4:	2023883a 	mov	r17,r4
 4002ec8:	11000017 	ldw	r4,0(r2)
 4002ecc:	dc000015 	stw	r16,0(sp)
 4002ed0:	dfc00215 	stw	ra,8(sp)
 4002ed4:	2821883a 	mov	r16,r5
 4002ed8:	20000226 	beq	r4,zero,4002ee4 <__swsetup_r+0x30>
 4002edc:	20800e17 	ldw	r2,56(r4)
 4002ee0:	10003126 	beq	r2,zero,4002fa8 <__swsetup_r+0xf4>
 4002ee4:	8080030b 	ldhu	r2,12(r16)
 4002ee8:	10c0020c 	andi	r3,r2,8
 4002eec:	1009883a 	mov	r4,r2
 4002ef0:	18000f26 	beq	r3,zero,4002f30 <__swsetup_r+0x7c>
 4002ef4:	80c00417 	ldw	r3,16(r16)
 4002ef8:	18001526 	beq	r3,zero,4002f50 <__swsetup_r+0x9c>
 4002efc:	1100004c 	andi	r4,r2,1
 4002f00:	20001c1e 	bne	r4,zero,4002f74 <__swsetup_r+0xc0>
 4002f04:	1080008c 	andi	r2,r2,2
 4002f08:	1000291e 	bne	r2,zero,4002fb0 <__swsetup_r+0xfc>
 4002f0c:	80800517 	ldw	r2,20(r16)
 4002f10:	80800215 	stw	r2,8(r16)
 4002f14:	18001c26 	beq	r3,zero,4002f88 <__swsetup_r+0xd4>
 4002f18:	0005883a 	mov	r2,zero
 4002f1c:	dfc00217 	ldw	ra,8(sp)
 4002f20:	dc400117 	ldw	r17,4(sp)
 4002f24:	dc000017 	ldw	r16,0(sp)
 4002f28:	dec00304 	addi	sp,sp,12
 4002f2c:	f800283a 	ret
 4002f30:	2080040c 	andi	r2,r4,16
 4002f34:	10002e26 	beq	r2,zero,4002ff0 <__swsetup_r+0x13c>
 4002f38:	2080010c 	andi	r2,r4,4
 4002f3c:	10001e1e 	bne	r2,zero,4002fb8 <__swsetup_r+0x104>
 4002f40:	80c00417 	ldw	r3,16(r16)
 4002f44:	20800214 	ori	r2,r4,8
 4002f48:	8080030d 	sth	r2,12(r16)
 4002f4c:	183feb1e 	bne	r3,zero,4002efc <__alt_mem_onchip_memory2_0+0xfbfe2efc>
 4002f50:	1100a00c 	andi	r4,r2,640
 4002f54:	01408004 	movi	r5,512
 4002f58:	217fe826 	beq	r4,r5,4002efc <__alt_mem_onchip_memory2_0+0xfbfe2efc>
 4002f5c:	800b883a 	mov	r5,r16
 4002f60:	8809883a 	mov	r4,r17
 4002f64:	4005a2c0 	call	4005a2c <__smakebuf_r>
 4002f68:	8080030b 	ldhu	r2,12(r16)
 4002f6c:	80c00417 	ldw	r3,16(r16)
 4002f70:	003fe206 	br	4002efc <__alt_mem_onchip_memory2_0+0xfbfe2efc>
 4002f74:	80800517 	ldw	r2,20(r16)
 4002f78:	80000215 	stw	zero,8(r16)
 4002f7c:	0085c83a 	sub	r2,zero,r2
 4002f80:	80800615 	stw	r2,24(r16)
 4002f84:	183fe41e 	bne	r3,zero,4002f18 <__alt_mem_onchip_memory2_0+0xfbfe2f18>
 4002f88:	80c0030b 	ldhu	r3,12(r16)
 4002f8c:	0005883a 	mov	r2,zero
 4002f90:	1900200c 	andi	r4,r3,128
 4002f94:	203fe126 	beq	r4,zero,4002f1c <__alt_mem_onchip_memory2_0+0xfbfe2f1c>
 4002f98:	18c01014 	ori	r3,r3,64
 4002f9c:	80c0030d 	sth	r3,12(r16)
 4002fa0:	00bfffc4 	movi	r2,-1
 4002fa4:	003fdd06 	br	4002f1c <__alt_mem_onchip_memory2_0+0xfbfe2f1c>
 4002fa8:	4004e880 	call	4004e88 <__sinit>
 4002fac:	003fcd06 	br	4002ee4 <__alt_mem_onchip_memory2_0+0xfbfe2ee4>
 4002fb0:	0005883a 	mov	r2,zero
 4002fb4:	003fd606 	br	4002f10 <__alt_mem_onchip_memory2_0+0xfbfe2f10>
 4002fb8:	81400c17 	ldw	r5,48(r16)
 4002fbc:	28000626 	beq	r5,zero,4002fd8 <__swsetup_r+0x124>
 4002fc0:	80801004 	addi	r2,r16,64
 4002fc4:	28800326 	beq	r5,r2,4002fd4 <__swsetup_r+0x120>
 4002fc8:	8809883a 	mov	r4,r17
 4002fcc:	4004ffc0 	call	4004ffc <_free_r>
 4002fd0:	8100030b 	ldhu	r4,12(r16)
 4002fd4:	80000c15 	stw	zero,48(r16)
 4002fd8:	80c00417 	ldw	r3,16(r16)
 4002fdc:	00bff6c4 	movi	r2,-37
 4002fe0:	1108703a 	and	r4,r2,r4
 4002fe4:	80000115 	stw	zero,4(r16)
 4002fe8:	80c00015 	stw	r3,0(r16)
 4002fec:	003fd506 	br	4002f44 <__alt_mem_onchip_memory2_0+0xfbfe2f44>
 4002ff0:	00800244 	movi	r2,9
 4002ff4:	88800015 	stw	r2,0(r17)
 4002ff8:	20801014 	ori	r2,r4,64
 4002ffc:	8080030d 	sth	r2,12(r16)
 4003000:	00bfffc4 	movi	r2,-1
 4003004:	003fc506 	br	4002f1c <__alt_mem_onchip_memory2_0+0xfbfe2f1c>

04003008 <quorem>:
 4003008:	defff704 	addi	sp,sp,-36
 400300c:	dc800215 	stw	r18,8(sp)
 4003010:	20800417 	ldw	r2,16(r4)
 4003014:	2c800417 	ldw	r18,16(r5)
 4003018:	dfc00815 	stw	ra,32(sp)
 400301c:	ddc00715 	stw	r23,28(sp)
 4003020:	dd800615 	stw	r22,24(sp)
 4003024:	dd400515 	stw	r21,20(sp)
 4003028:	dd000415 	stw	r20,16(sp)
 400302c:	dcc00315 	stw	r19,12(sp)
 4003030:	dc400115 	stw	r17,4(sp)
 4003034:	dc000015 	stw	r16,0(sp)
 4003038:	14807116 	blt	r2,r18,4003200 <quorem+0x1f8>
 400303c:	94bfffc4 	addi	r18,r18,-1
 4003040:	94ad883a 	add	r22,r18,r18
 4003044:	b5ad883a 	add	r22,r22,r22
 4003048:	2c400504 	addi	r17,r5,20
 400304c:	8da9883a 	add	r20,r17,r22
 4003050:	25400504 	addi	r21,r4,20
 4003054:	282f883a 	mov	r23,r5
 4003058:	adad883a 	add	r22,r21,r22
 400305c:	a1400017 	ldw	r5,0(r20)
 4003060:	2021883a 	mov	r16,r4
 4003064:	b1000017 	ldw	r4,0(r22)
 4003068:	29400044 	addi	r5,r5,1
 400306c:	400ac080 	call	400ac08 <__udivsi3>
 4003070:	1027883a 	mov	r19,r2
 4003074:	10002c26 	beq	r2,zero,4003128 <quorem+0x120>
 4003078:	a813883a 	mov	r9,r21
 400307c:	880b883a 	mov	r5,r17
 4003080:	0009883a 	mov	r4,zero
 4003084:	000d883a 	mov	r6,zero
 4003088:	2a000017 	ldw	r8,0(r5)
 400308c:	49c00017 	ldw	r7,0(r9)
 4003090:	29400104 	addi	r5,r5,4
 4003094:	40bfffcc 	andi	r2,r8,65535
 4003098:	14c5383a 	mul	r2,r2,r19
 400309c:	4010d43a 	srli	r8,r8,16
 40030a0:	38ffffcc 	andi	r3,r7,65535
 40030a4:	1105883a 	add	r2,r2,r4
 40030a8:	1008d43a 	srli	r4,r2,16
 40030ac:	44d1383a 	mul	r8,r8,r19
 40030b0:	198d883a 	add	r6,r3,r6
 40030b4:	10ffffcc 	andi	r3,r2,65535
 40030b8:	30c7c83a 	sub	r3,r6,r3
 40030bc:	380ed43a 	srli	r7,r7,16
 40030c0:	4105883a 	add	r2,r8,r4
 40030c4:	180dd43a 	srai	r6,r3,16
 40030c8:	113fffcc 	andi	r4,r2,65535
 40030cc:	390fc83a 	sub	r7,r7,r4
 40030d0:	398d883a 	add	r6,r7,r6
 40030d4:	300e943a 	slli	r7,r6,16
 40030d8:	18ffffcc 	andi	r3,r3,65535
 40030dc:	1008d43a 	srli	r4,r2,16
 40030e0:	38ceb03a 	or	r7,r7,r3
 40030e4:	49c00015 	stw	r7,0(r9)
 40030e8:	300dd43a 	srai	r6,r6,16
 40030ec:	4a400104 	addi	r9,r9,4
 40030f0:	a17fe52e 	bgeu	r20,r5,4003088 <__alt_mem_onchip_memory2_0+0xfbfe3088>
 40030f4:	b0800017 	ldw	r2,0(r22)
 40030f8:	10000b1e 	bne	r2,zero,4003128 <quorem+0x120>
 40030fc:	b0bfff04 	addi	r2,r22,-4
 4003100:	a880082e 	bgeu	r21,r2,4003124 <quorem+0x11c>
 4003104:	b0ffff17 	ldw	r3,-4(r22)
 4003108:	18000326 	beq	r3,zero,4003118 <quorem+0x110>
 400310c:	00000506 	br	4003124 <quorem+0x11c>
 4003110:	10c00017 	ldw	r3,0(r2)
 4003114:	1800031e 	bne	r3,zero,4003124 <quorem+0x11c>
 4003118:	10bfff04 	addi	r2,r2,-4
 400311c:	94bfffc4 	addi	r18,r18,-1
 4003120:	a8bffb36 	bltu	r21,r2,4003110 <__alt_mem_onchip_memory2_0+0xfbfe3110>
 4003124:	84800415 	stw	r18,16(r16)
 4003128:	b80b883a 	mov	r5,r23
 400312c:	8009883a 	mov	r4,r16
 4003130:	400716c0 	call	400716c <__mcmp>
 4003134:	10002616 	blt	r2,zero,40031d0 <quorem+0x1c8>
 4003138:	9cc00044 	addi	r19,r19,1
 400313c:	a805883a 	mov	r2,r21
 4003140:	000b883a 	mov	r5,zero
 4003144:	11000017 	ldw	r4,0(r2)
 4003148:	89800017 	ldw	r6,0(r17)
 400314c:	10800104 	addi	r2,r2,4
 4003150:	20ffffcc 	andi	r3,r4,65535
 4003154:	194b883a 	add	r5,r3,r5
 4003158:	30ffffcc 	andi	r3,r6,65535
 400315c:	28c7c83a 	sub	r3,r5,r3
 4003160:	300cd43a 	srli	r6,r6,16
 4003164:	2008d43a 	srli	r4,r4,16
 4003168:	180bd43a 	srai	r5,r3,16
 400316c:	18ffffcc 	andi	r3,r3,65535
 4003170:	2189c83a 	sub	r4,r4,r6
 4003174:	2149883a 	add	r4,r4,r5
 4003178:	200c943a 	slli	r6,r4,16
 400317c:	8c400104 	addi	r17,r17,4
 4003180:	200bd43a 	srai	r5,r4,16
 4003184:	30c6b03a 	or	r3,r6,r3
 4003188:	10ffff15 	stw	r3,-4(r2)
 400318c:	a47fed2e 	bgeu	r20,r17,4003144 <__alt_mem_onchip_memory2_0+0xfbfe3144>
 4003190:	9485883a 	add	r2,r18,r18
 4003194:	1085883a 	add	r2,r2,r2
 4003198:	a887883a 	add	r3,r21,r2
 400319c:	18800017 	ldw	r2,0(r3)
 40031a0:	10000b1e 	bne	r2,zero,40031d0 <quorem+0x1c8>
 40031a4:	18bfff04 	addi	r2,r3,-4
 40031a8:	a880082e 	bgeu	r21,r2,40031cc <quorem+0x1c4>
 40031ac:	18ffff17 	ldw	r3,-4(r3)
 40031b0:	18000326 	beq	r3,zero,40031c0 <quorem+0x1b8>
 40031b4:	00000506 	br	40031cc <quorem+0x1c4>
 40031b8:	10c00017 	ldw	r3,0(r2)
 40031bc:	1800031e 	bne	r3,zero,40031cc <quorem+0x1c4>
 40031c0:	10bfff04 	addi	r2,r2,-4
 40031c4:	94bfffc4 	addi	r18,r18,-1
 40031c8:	a8bffb36 	bltu	r21,r2,40031b8 <__alt_mem_onchip_memory2_0+0xfbfe31b8>
 40031cc:	84800415 	stw	r18,16(r16)
 40031d0:	9805883a 	mov	r2,r19
 40031d4:	dfc00817 	ldw	ra,32(sp)
 40031d8:	ddc00717 	ldw	r23,28(sp)
 40031dc:	dd800617 	ldw	r22,24(sp)
 40031e0:	dd400517 	ldw	r21,20(sp)
 40031e4:	dd000417 	ldw	r20,16(sp)
 40031e8:	dcc00317 	ldw	r19,12(sp)
 40031ec:	dc800217 	ldw	r18,8(sp)
 40031f0:	dc400117 	ldw	r17,4(sp)
 40031f4:	dc000017 	ldw	r16,0(sp)
 40031f8:	dec00904 	addi	sp,sp,36
 40031fc:	f800283a 	ret
 4003200:	0005883a 	mov	r2,zero
 4003204:	003ff306 	br	40031d4 <__alt_mem_onchip_memory2_0+0xfbfe31d4>

04003208 <_dtoa_r>:
 4003208:	20801017 	ldw	r2,64(r4)
 400320c:	deffde04 	addi	sp,sp,-136
 4003210:	df002015 	stw	fp,128(sp)
 4003214:	dcc01b15 	stw	r19,108(sp)
 4003218:	dc801a15 	stw	r18,104(sp)
 400321c:	dc401915 	stw	r17,100(sp)
 4003220:	dc001815 	stw	r16,96(sp)
 4003224:	dfc02115 	stw	ra,132(sp)
 4003228:	ddc01f15 	stw	r23,124(sp)
 400322c:	dd801e15 	stw	r22,120(sp)
 4003230:	dd401d15 	stw	r21,116(sp)
 4003234:	dd001c15 	stw	r20,112(sp)
 4003238:	d9c00315 	stw	r7,12(sp)
 400323c:	2039883a 	mov	fp,r4
 4003240:	3023883a 	mov	r17,r6
 4003244:	2825883a 	mov	r18,r5
 4003248:	dc002417 	ldw	r16,144(sp)
 400324c:	3027883a 	mov	r19,r6
 4003250:	10000826 	beq	r2,zero,4003274 <_dtoa_r+0x6c>
 4003254:	21801117 	ldw	r6,68(r4)
 4003258:	00c00044 	movi	r3,1
 400325c:	100b883a 	mov	r5,r2
 4003260:	1986983a 	sll	r3,r3,r6
 4003264:	11800115 	stw	r6,4(r2)
 4003268:	10c00215 	stw	r3,8(r2)
 400326c:	400694c0 	call	400694c <_Bfree>
 4003270:	e0001015 	stw	zero,64(fp)
 4003274:	88002e16 	blt	r17,zero,4003330 <_dtoa_r+0x128>
 4003278:	80000015 	stw	zero,0(r16)
 400327c:	889ffc2c 	andhi	r2,r17,32752
 4003280:	00dffc34 	movhi	r3,32752
 4003284:	10c01c26 	beq	r2,r3,40032f8 <_dtoa_r+0xf0>
 4003288:	000d883a 	mov	r6,zero
 400328c:	000f883a 	mov	r7,zero
 4003290:	9009883a 	mov	r4,r18
 4003294:	980b883a 	mov	r5,r19
 4003298:	400be580 	call	400be58 <__eqdf2>
 400329c:	10002b1e 	bne	r2,zero,400334c <_dtoa_r+0x144>
 40032a0:	d9c02317 	ldw	r7,140(sp)
 40032a4:	00800044 	movi	r2,1
 40032a8:	38800015 	stw	r2,0(r7)
 40032ac:	d8802517 	ldw	r2,148(sp)
 40032b0:	10019e26 	beq	r2,zero,400392c <_dtoa_r+0x724>
 40032b4:	d8c02517 	ldw	r3,148(sp)
 40032b8:	008100b4 	movhi	r2,1026
 40032bc:	10a21a44 	addi	r2,r2,-30615
 40032c0:	18800015 	stw	r2,0(r3)
 40032c4:	10bfffc4 	addi	r2,r2,-1
 40032c8:	dfc02117 	ldw	ra,132(sp)
 40032cc:	df002017 	ldw	fp,128(sp)
 40032d0:	ddc01f17 	ldw	r23,124(sp)
 40032d4:	dd801e17 	ldw	r22,120(sp)
 40032d8:	dd401d17 	ldw	r21,116(sp)
 40032dc:	dd001c17 	ldw	r20,112(sp)
 40032e0:	dcc01b17 	ldw	r19,108(sp)
 40032e4:	dc801a17 	ldw	r18,104(sp)
 40032e8:	dc401917 	ldw	r17,100(sp)
 40032ec:	dc001817 	ldw	r16,96(sp)
 40032f0:	dec02204 	addi	sp,sp,136
 40032f4:	f800283a 	ret
 40032f8:	d8c02317 	ldw	r3,140(sp)
 40032fc:	0089c3c4 	movi	r2,9999
 4003300:	18800015 	stw	r2,0(r3)
 4003304:	90017726 	beq	r18,zero,40038e4 <_dtoa_r+0x6dc>
 4003308:	008100b4 	movhi	r2,1026
 400330c:	10a22604 	addi	r2,r2,-30568
 4003310:	d9002517 	ldw	r4,148(sp)
 4003314:	203fec26 	beq	r4,zero,40032c8 <__alt_mem_onchip_memory2_0+0xfbfe32c8>
 4003318:	10c000c7 	ldb	r3,3(r2)
 400331c:	1801781e 	bne	r3,zero,4003900 <_dtoa_r+0x6f8>
 4003320:	10c000c4 	addi	r3,r2,3
 4003324:	d9802517 	ldw	r6,148(sp)
 4003328:	30c00015 	stw	r3,0(r6)
 400332c:	003fe606 	br	40032c8 <__alt_mem_onchip_memory2_0+0xfbfe32c8>
 4003330:	04e00034 	movhi	r19,32768
 4003334:	9cffffc4 	addi	r19,r19,-1
 4003338:	00800044 	movi	r2,1
 400333c:	8ce6703a 	and	r19,r17,r19
 4003340:	80800015 	stw	r2,0(r16)
 4003344:	9823883a 	mov	r17,r19
 4003348:	003fcc06 	br	400327c <__alt_mem_onchip_memory2_0+0xfbfe327c>
 400334c:	d8800204 	addi	r2,sp,8
 4003350:	d8800015 	stw	r2,0(sp)
 4003354:	d9c00104 	addi	r7,sp,4
 4003358:	900b883a 	mov	r5,r18
 400335c:	980d883a 	mov	r6,r19
 4003360:	e009883a 	mov	r4,fp
 4003364:	8820d53a 	srli	r16,r17,20
 4003368:	40075380 	call	4007538 <__d2b>
 400336c:	d8800915 	stw	r2,36(sp)
 4003370:	8001651e 	bne	r16,zero,4003908 <_dtoa_r+0x700>
 4003374:	dd800217 	ldw	r22,8(sp)
 4003378:	dc000117 	ldw	r16,4(sp)
 400337c:	00800804 	movi	r2,32
 4003380:	b421883a 	add	r16,r22,r16
 4003384:	80c10c84 	addi	r3,r16,1074
 4003388:	10c2d10e 	bge	r2,r3,4003ed0 <_dtoa_r+0xcc8>
 400338c:	00801004 	movi	r2,64
 4003390:	81010484 	addi	r4,r16,1042
 4003394:	10c7c83a 	sub	r3,r2,r3
 4003398:	9108d83a 	srl	r4,r18,r4
 400339c:	88e2983a 	sll	r17,r17,r3
 40033a0:	2448b03a 	or	r4,r4,r17
 40033a4:	400d2200 	call	400d220 <__floatunsidf>
 40033a8:	017f8434 	movhi	r5,65040
 40033ac:	01800044 	movi	r6,1
 40033b0:	1009883a 	mov	r4,r2
 40033b4:	194b883a 	add	r5,r3,r5
 40033b8:	843fffc4 	addi	r16,r16,-1
 40033bc:	d9801115 	stw	r6,68(sp)
 40033c0:	000d883a 	mov	r6,zero
 40033c4:	01cffe34 	movhi	r7,16376
 40033c8:	400c7c80 	call	400c7c8 <__subdf3>
 40033cc:	0198dbf4 	movhi	r6,25455
 40033d0:	01cff4f4 	movhi	r7,16339
 40033d4:	3190d844 	addi	r6,r6,17249
 40033d8:	39e1e9c4 	addi	r7,r7,-30809
 40033dc:	1009883a 	mov	r4,r2
 40033e0:	180b883a 	mov	r5,r3
 40033e4:	400c0b00 	call	400c0b0 <__muldf3>
 40033e8:	01a2d874 	movhi	r6,35681
 40033ec:	01cff1f4 	movhi	r7,16327
 40033f0:	31b22cc4 	addi	r6,r6,-14157
 40033f4:	39e28a04 	addi	r7,r7,-30168
 40033f8:	180b883a 	mov	r5,r3
 40033fc:	1009883a 	mov	r4,r2
 4003400:	400acc40 	call	400acc4 <__adddf3>
 4003404:	8009883a 	mov	r4,r16
 4003408:	1029883a 	mov	r20,r2
 400340c:	1823883a 	mov	r17,r3
 4003410:	400d1440 	call	400d144 <__floatsidf>
 4003414:	019427f4 	movhi	r6,20639
 4003418:	01cff4f4 	movhi	r7,16339
 400341c:	319e7ec4 	addi	r6,r6,31227
 4003420:	39d104c4 	addi	r7,r7,17427
 4003424:	1009883a 	mov	r4,r2
 4003428:	180b883a 	mov	r5,r3
 400342c:	400c0b00 	call	400c0b0 <__muldf3>
 4003430:	100d883a 	mov	r6,r2
 4003434:	180f883a 	mov	r7,r3
 4003438:	a009883a 	mov	r4,r20
 400343c:	880b883a 	mov	r5,r17
 4003440:	400acc40 	call	400acc4 <__adddf3>
 4003444:	1009883a 	mov	r4,r2
 4003448:	180b883a 	mov	r5,r3
 400344c:	1029883a 	mov	r20,r2
 4003450:	1823883a 	mov	r17,r3
 4003454:	400d0c40 	call	400d0c4 <__fixdfsi>
 4003458:	000d883a 	mov	r6,zero
 400345c:	000f883a 	mov	r7,zero
 4003460:	a009883a 	mov	r4,r20
 4003464:	880b883a 	mov	r5,r17
 4003468:	d8800515 	stw	r2,20(sp)
 400346c:	400bfbc0 	call	400bfbc <__ledf2>
 4003470:	10028716 	blt	r2,zero,4003e90 <_dtoa_r+0xc88>
 4003474:	d8c00517 	ldw	r3,20(sp)
 4003478:	00800584 	movi	r2,22
 400347c:	10c27536 	bltu	r2,r3,4003e54 <_dtoa_r+0xc4c>
 4003480:	180490fa 	slli	r2,r3,3
 4003484:	00c100b4 	movhi	r3,1026
 4003488:	18e24204 	addi	r3,r3,-30456
 400348c:	1885883a 	add	r2,r3,r2
 4003490:	11000017 	ldw	r4,0(r2)
 4003494:	11400117 	ldw	r5,4(r2)
 4003498:	900d883a 	mov	r6,r18
 400349c:	980f883a 	mov	r7,r19
 40034a0:	400bee00 	call	400bee0 <__gedf2>
 40034a4:	00828d0e 	bge	zero,r2,4003edc <_dtoa_r+0xcd4>
 40034a8:	d9000517 	ldw	r4,20(sp)
 40034ac:	d8000e15 	stw	zero,56(sp)
 40034b0:	213fffc4 	addi	r4,r4,-1
 40034b4:	d9000515 	stw	r4,20(sp)
 40034b8:	b42dc83a 	sub	r22,r22,r16
 40034bc:	b5bfffc4 	addi	r22,r22,-1
 40034c0:	b0026f16 	blt	r22,zero,4003e80 <_dtoa_r+0xc78>
 40034c4:	d8000815 	stw	zero,32(sp)
 40034c8:	d9c00517 	ldw	r7,20(sp)
 40034cc:	38026416 	blt	r7,zero,4003e60 <_dtoa_r+0xc58>
 40034d0:	b1ed883a 	add	r22,r22,r7
 40034d4:	d9c00d15 	stw	r7,52(sp)
 40034d8:	d8000a15 	stw	zero,40(sp)
 40034dc:	d9800317 	ldw	r6,12(sp)
 40034e0:	00800244 	movi	r2,9
 40034e4:	11811436 	bltu	r2,r6,4003938 <_dtoa_r+0x730>
 40034e8:	00800144 	movi	r2,5
 40034ec:	1184e10e 	bge	r2,r6,4004874 <_dtoa_r+0x166c>
 40034f0:	31bfff04 	addi	r6,r6,-4
 40034f4:	d9800315 	stw	r6,12(sp)
 40034f8:	0023883a 	mov	r17,zero
 40034fc:	d9800317 	ldw	r6,12(sp)
 4003500:	008000c4 	movi	r2,3
 4003504:	30836726 	beq	r6,r2,40042a4 <_dtoa_r+0x109c>
 4003508:	1183410e 	bge	r2,r6,4004210 <_dtoa_r+0x1008>
 400350c:	d9c00317 	ldw	r7,12(sp)
 4003510:	00800104 	movi	r2,4
 4003514:	38827c26 	beq	r7,r2,4003f08 <_dtoa_r+0xd00>
 4003518:	00800144 	movi	r2,5
 400351c:	3884c41e 	bne	r7,r2,4004830 <_dtoa_r+0x1628>
 4003520:	00800044 	movi	r2,1
 4003524:	d8800b15 	stw	r2,44(sp)
 4003528:	d8c00517 	ldw	r3,20(sp)
 400352c:	d9002217 	ldw	r4,136(sp)
 4003530:	1907883a 	add	r3,r3,r4
 4003534:	19800044 	addi	r6,r3,1
 4003538:	d8c00c15 	stw	r3,48(sp)
 400353c:	d9800615 	stw	r6,24(sp)
 4003540:	0183a40e 	bge	zero,r6,40043d4 <_dtoa_r+0x11cc>
 4003544:	d9800617 	ldw	r6,24(sp)
 4003548:	3021883a 	mov	r16,r6
 400354c:	e0001115 	stw	zero,68(fp)
 4003550:	008005c4 	movi	r2,23
 4003554:	1184c92e 	bgeu	r2,r6,400487c <_dtoa_r+0x1674>
 4003558:	00c00044 	movi	r3,1
 400355c:	00800104 	movi	r2,4
 4003560:	1085883a 	add	r2,r2,r2
 4003564:	11000504 	addi	r4,r2,20
 4003568:	180b883a 	mov	r5,r3
 400356c:	18c00044 	addi	r3,r3,1
 4003570:	313ffb2e 	bgeu	r6,r4,4003560 <__alt_mem_onchip_memory2_0+0xfbfe3560>
 4003574:	e1401115 	stw	r5,68(fp)
 4003578:	e009883a 	mov	r4,fp
 400357c:	40068a40 	call	40068a4 <_Balloc>
 4003580:	d8800715 	stw	r2,28(sp)
 4003584:	e0801015 	stw	r2,64(fp)
 4003588:	00800384 	movi	r2,14
 400358c:	1400f736 	bltu	r2,r16,400396c <_dtoa_r+0x764>
 4003590:	8800f626 	beq	r17,zero,400396c <_dtoa_r+0x764>
 4003594:	d9c00517 	ldw	r7,20(sp)
 4003598:	01c39a0e 	bge	zero,r7,4004404 <_dtoa_r+0x11fc>
 400359c:	388003cc 	andi	r2,r7,15
 40035a0:	100490fa 	slli	r2,r2,3
 40035a4:	382bd13a 	srai	r21,r7,4
 40035a8:	00c100b4 	movhi	r3,1026
 40035ac:	18e24204 	addi	r3,r3,-30456
 40035b0:	1885883a 	add	r2,r3,r2
 40035b4:	a8c0040c 	andi	r3,r21,16
 40035b8:	12400017 	ldw	r9,0(r2)
 40035bc:	12000117 	ldw	r8,4(r2)
 40035c0:	18037926 	beq	r3,zero,40043a8 <_dtoa_r+0x11a0>
 40035c4:	008100b4 	movhi	r2,1026
 40035c8:	10a23804 	addi	r2,r2,-30496
 40035cc:	11800817 	ldw	r6,32(r2)
 40035d0:	11c00917 	ldw	r7,36(r2)
 40035d4:	9009883a 	mov	r4,r18
 40035d8:	980b883a 	mov	r5,r19
 40035dc:	da001715 	stw	r8,92(sp)
 40035e0:	da401615 	stw	r9,88(sp)
 40035e4:	400b5700 	call	400b570 <__divdf3>
 40035e8:	da001717 	ldw	r8,92(sp)
 40035ec:	da401617 	ldw	r9,88(sp)
 40035f0:	ad4003cc 	andi	r21,r21,15
 40035f4:	040000c4 	movi	r16,3
 40035f8:	1023883a 	mov	r17,r2
 40035fc:	1829883a 	mov	r20,r3
 4003600:	a8001126 	beq	r21,zero,4003648 <_dtoa_r+0x440>
 4003604:	05c100b4 	movhi	r23,1026
 4003608:	bde23804 	addi	r23,r23,-30496
 400360c:	4805883a 	mov	r2,r9
 4003610:	4007883a 	mov	r3,r8
 4003614:	a980004c 	andi	r6,r21,1
 4003618:	1009883a 	mov	r4,r2
 400361c:	a82bd07a 	srai	r21,r21,1
 4003620:	180b883a 	mov	r5,r3
 4003624:	30000426 	beq	r6,zero,4003638 <_dtoa_r+0x430>
 4003628:	b9800017 	ldw	r6,0(r23)
 400362c:	b9c00117 	ldw	r7,4(r23)
 4003630:	84000044 	addi	r16,r16,1
 4003634:	400c0b00 	call	400c0b0 <__muldf3>
 4003638:	bdc00204 	addi	r23,r23,8
 400363c:	a83ff51e 	bne	r21,zero,4003614 <__alt_mem_onchip_memory2_0+0xfbfe3614>
 4003640:	1013883a 	mov	r9,r2
 4003644:	1811883a 	mov	r8,r3
 4003648:	480d883a 	mov	r6,r9
 400364c:	400f883a 	mov	r7,r8
 4003650:	8809883a 	mov	r4,r17
 4003654:	a00b883a 	mov	r5,r20
 4003658:	400b5700 	call	400b570 <__divdf3>
 400365c:	d8800f15 	stw	r2,60(sp)
 4003660:	d8c01015 	stw	r3,64(sp)
 4003664:	d8c00e17 	ldw	r3,56(sp)
 4003668:	18000626 	beq	r3,zero,4003684 <_dtoa_r+0x47c>
 400366c:	d9000f17 	ldw	r4,60(sp)
 4003670:	d9401017 	ldw	r5,64(sp)
 4003674:	000d883a 	mov	r6,zero
 4003678:	01cffc34 	movhi	r7,16368
 400367c:	400bfbc0 	call	400bfbc <__ledf2>
 4003680:	10040b16 	blt	r2,zero,40046b0 <_dtoa_r+0x14a8>
 4003684:	8009883a 	mov	r4,r16
 4003688:	400d1440 	call	400d144 <__floatsidf>
 400368c:	d9800f17 	ldw	r6,60(sp)
 4003690:	d9c01017 	ldw	r7,64(sp)
 4003694:	1009883a 	mov	r4,r2
 4003698:	180b883a 	mov	r5,r3
 400369c:	400c0b00 	call	400c0b0 <__muldf3>
 40036a0:	000d883a 	mov	r6,zero
 40036a4:	01d00734 	movhi	r7,16412
 40036a8:	1009883a 	mov	r4,r2
 40036ac:	180b883a 	mov	r5,r3
 40036b0:	400acc40 	call	400acc4 <__adddf3>
 40036b4:	1021883a 	mov	r16,r2
 40036b8:	d8800617 	ldw	r2,24(sp)
 40036bc:	047f3034 	movhi	r17,64704
 40036c0:	1c63883a 	add	r17,r3,r17
 40036c4:	10031826 	beq	r2,zero,4004328 <_dtoa_r+0x1120>
 40036c8:	d8c00517 	ldw	r3,20(sp)
 40036cc:	db000617 	ldw	r12,24(sp)
 40036d0:	d8c01315 	stw	r3,76(sp)
 40036d4:	d9000b17 	ldw	r4,44(sp)
 40036d8:	20038f26 	beq	r4,zero,4004518 <_dtoa_r+0x1310>
 40036dc:	60bfffc4 	addi	r2,r12,-1
 40036e0:	100490fa 	slli	r2,r2,3
 40036e4:	00c100b4 	movhi	r3,1026
 40036e8:	18e24204 	addi	r3,r3,-30456
 40036ec:	1885883a 	add	r2,r3,r2
 40036f0:	11800017 	ldw	r6,0(r2)
 40036f4:	11c00117 	ldw	r7,4(r2)
 40036f8:	d8800717 	ldw	r2,28(sp)
 40036fc:	0009883a 	mov	r4,zero
 4003700:	014ff834 	movhi	r5,16352
 4003704:	db001615 	stw	r12,88(sp)
 4003708:	15c00044 	addi	r23,r2,1
 400370c:	400b5700 	call	400b570 <__divdf3>
 4003710:	800d883a 	mov	r6,r16
 4003714:	880f883a 	mov	r7,r17
 4003718:	1009883a 	mov	r4,r2
 400371c:	180b883a 	mov	r5,r3
 4003720:	400c7c80 	call	400c7c8 <__subdf3>
 4003724:	d9401017 	ldw	r5,64(sp)
 4003728:	d9000f17 	ldw	r4,60(sp)
 400372c:	102b883a 	mov	r21,r2
 4003730:	d8c01215 	stw	r3,72(sp)
 4003734:	400d0c40 	call	400d0c4 <__fixdfsi>
 4003738:	1009883a 	mov	r4,r2
 400373c:	1029883a 	mov	r20,r2
 4003740:	400d1440 	call	400d144 <__floatsidf>
 4003744:	d9000f17 	ldw	r4,60(sp)
 4003748:	d9401017 	ldw	r5,64(sp)
 400374c:	100d883a 	mov	r6,r2
 4003750:	180f883a 	mov	r7,r3
 4003754:	400c7c80 	call	400c7c8 <__subdf3>
 4003758:	1823883a 	mov	r17,r3
 400375c:	d8c00717 	ldw	r3,28(sp)
 4003760:	d9401217 	ldw	r5,72(sp)
 4003764:	a2000c04 	addi	r8,r20,48
 4003768:	1021883a 	mov	r16,r2
 400376c:	1a000005 	stb	r8,0(r3)
 4003770:	800d883a 	mov	r6,r16
 4003774:	880f883a 	mov	r7,r17
 4003778:	a809883a 	mov	r4,r21
 400377c:	4029883a 	mov	r20,r8
 4003780:	400bee00 	call	400bee0 <__gedf2>
 4003784:	00841d16 	blt	zero,r2,40047fc <_dtoa_r+0x15f4>
 4003788:	800d883a 	mov	r6,r16
 400378c:	880f883a 	mov	r7,r17
 4003790:	0009883a 	mov	r4,zero
 4003794:	014ffc34 	movhi	r5,16368
 4003798:	400c7c80 	call	400c7c8 <__subdf3>
 400379c:	d9401217 	ldw	r5,72(sp)
 40037a0:	100d883a 	mov	r6,r2
 40037a4:	180f883a 	mov	r7,r3
 40037a8:	a809883a 	mov	r4,r21
 40037ac:	400bee00 	call	400bee0 <__gedf2>
 40037b0:	db001617 	ldw	r12,88(sp)
 40037b4:	00840e16 	blt	zero,r2,40047f0 <_dtoa_r+0x15e8>
 40037b8:	00800044 	movi	r2,1
 40037bc:	13006b0e 	bge	r2,r12,400396c <_dtoa_r+0x764>
 40037c0:	d9000717 	ldw	r4,28(sp)
 40037c4:	dd800f15 	stw	r22,60(sp)
 40037c8:	dcc01015 	stw	r19,64(sp)
 40037cc:	2319883a 	add	r12,r4,r12
 40037d0:	dcc01217 	ldw	r19,72(sp)
 40037d4:	602d883a 	mov	r22,r12
 40037d8:	dc801215 	stw	r18,72(sp)
 40037dc:	b825883a 	mov	r18,r23
 40037e0:	00000906 	br	4003808 <_dtoa_r+0x600>
 40037e4:	400c7c80 	call	400c7c8 <__subdf3>
 40037e8:	a80d883a 	mov	r6,r21
 40037ec:	980f883a 	mov	r7,r19
 40037f0:	1009883a 	mov	r4,r2
 40037f4:	180b883a 	mov	r5,r3
 40037f8:	400bfbc0 	call	400bfbc <__ledf2>
 40037fc:	1003e816 	blt	r2,zero,40047a0 <_dtoa_r+0x1598>
 4003800:	b825883a 	mov	r18,r23
 4003804:	bd83e926 	beq	r23,r22,40047ac <_dtoa_r+0x15a4>
 4003808:	a809883a 	mov	r4,r21
 400380c:	980b883a 	mov	r5,r19
 4003810:	000d883a 	mov	r6,zero
 4003814:	01d00934 	movhi	r7,16420
 4003818:	400c0b00 	call	400c0b0 <__muldf3>
 400381c:	000d883a 	mov	r6,zero
 4003820:	01d00934 	movhi	r7,16420
 4003824:	8009883a 	mov	r4,r16
 4003828:	880b883a 	mov	r5,r17
 400382c:	102b883a 	mov	r21,r2
 4003830:	1827883a 	mov	r19,r3
 4003834:	400c0b00 	call	400c0b0 <__muldf3>
 4003838:	180b883a 	mov	r5,r3
 400383c:	1009883a 	mov	r4,r2
 4003840:	1821883a 	mov	r16,r3
 4003844:	1023883a 	mov	r17,r2
 4003848:	400d0c40 	call	400d0c4 <__fixdfsi>
 400384c:	1009883a 	mov	r4,r2
 4003850:	1029883a 	mov	r20,r2
 4003854:	400d1440 	call	400d144 <__floatsidf>
 4003858:	8809883a 	mov	r4,r17
 400385c:	800b883a 	mov	r5,r16
 4003860:	100d883a 	mov	r6,r2
 4003864:	180f883a 	mov	r7,r3
 4003868:	400c7c80 	call	400c7c8 <__subdf3>
 400386c:	a5000c04 	addi	r20,r20,48
 4003870:	a80d883a 	mov	r6,r21
 4003874:	980f883a 	mov	r7,r19
 4003878:	1009883a 	mov	r4,r2
 400387c:	180b883a 	mov	r5,r3
 4003880:	95000005 	stb	r20,0(r18)
 4003884:	1021883a 	mov	r16,r2
 4003888:	1823883a 	mov	r17,r3
 400388c:	400bfbc0 	call	400bfbc <__ledf2>
 4003890:	bdc00044 	addi	r23,r23,1
 4003894:	800d883a 	mov	r6,r16
 4003898:	880f883a 	mov	r7,r17
 400389c:	0009883a 	mov	r4,zero
 40038a0:	014ffc34 	movhi	r5,16368
 40038a4:	103fcf0e 	bge	r2,zero,40037e4 <__alt_mem_onchip_memory2_0+0xfbfe37e4>
 40038a8:	d8c01317 	ldw	r3,76(sp)
 40038ac:	d8c00515 	stw	r3,20(sp)
 40038b0:	d9400917 	ldw	r5,36(sp)
 40038b4:	e009883a 	mov	r4,fp
 40038b8:	400694c0 	call	400694c <_Bfree>
 40038bc:	d9000517 	ldw	r4,20(sp)
 40038c0:	d9802317 	ldw	r6,140(sp)
 40038c4:	d9c02517 	ldw	r7,148(sp)
 40038c8:	b8000005 	stb	zero,0(r23)
 40038cc:	20800044 	addi	r2,r4,1
 40038d0:	30800015 	stw	r2,0(r6)
 40038d4:	3802aa26 	beq	r7,zero,4004380 <_dtoa_r+0x1178>
 40038d8:	3dc00015 	stw	r23,0(r7)
 40038dc:	d8800717 	ldw	r2,28(sp)
 40038e0:	003e7906 	br	40032c8 <__alt_mem_onchip_memory2_0+0xfbfe32c8>
 40038e4:	00800434 	movhi	r2,16
 40038e8:	10bfffc4 	addi	r2,r2,-1
 40038ec:	88a2703a 	and	r17,r17,r2
 40038f0:	883e851e 	bne	r17,zero,4003308 <__alt_mem_onchip_memory2_0+0xfbfe3308>
 40038f4:	008100b4 	movhi	r2,1026
 40038f8:	10a22304 	addi	r2,r2,-30580
 40038fc:	003e8406 	br	4003310 <__alt_mem_onchip_memory2_0+0xfbfe3310>
 4003900:	10c00204 	addi	r3,r2,8
 4003904:	003e8706 	br	4003324 <__alt_mem_onchip_memory2_0+0xfbfe3324>
 4003908:	01400434 	movhi	r5,16
 400390c:	297fffc4 	addi	r5,r5,-1
 4003910:	994a703a 	and	r5,r19,r5
 4003914:	9009883a 	mov	r4,r18
 4003918:	843f0044 	addi	r16,r16,-1023
 400391c:	294ffc34 	orhi	r5,r5,16368
 4003920:	dd800217 	ldw	r22,8(sp)
 4003924:	d8001115 	stw	zero,68(sp)
 4003928:	003ea506 	br	40033c0 <__alt_mem_onchip_memory2_0+0xfbfe33c0>
 400392c:	008100b4 	movhi	r2,1026
 4003930:	10a21a04 	addi	r2,r2,-30616
 4003934:	003e6406 	br	40032c8 <__alt_mem_onchip_memory2_0+0xfbfe32c8>
 4003938:	e0001115 	stw	zero,68(fp)
 400393c:	000b883a 	mov	r5,zero
 4003940:	e009883a 	mov	r4,fp
 4003944:	40068a40 	call	40068a4 <_Balloc>
 4003948:	01bfffc4 	movi	r6,-1
 400394c:	01c00044 	movi	r7,1
 4003950:	d8800715 	stw	r2,28(sp)
 4003954:	d9800c15 	stw	r6,48(sp)
 4003958:	e0801015 	stw	r2,64(fp)
 400395c:	d8000315 	stw	zero,12(sp)
 4003960:	d9c00b15 	stw	r7,44(sp)
 4003964:	d9800615 	stw	r6,24(sp)
 4003968:	d8002215 	stw	zero,136(sp)
 400396c:	d8800117 	ldw	r2,4(sp)
 4003970:	10008916 	blt	r2,zero,4003b98 <_dtoa_r+0x990>
 4003974:	d9000517 	ldw	r4,20(sp)
 4003978:	00c00384 	movi	r3,14
 400397c:	19008616 	blt	r3,r4,4003b98 <_dtoa_r+0x990>
 4003980:	200490fa 	slli	r2,r4,3
 4003984:	00c100b4 	movhi	r3,1026
 4003988:	d9802217 	ldw	r6,136(sp)
 400398c:	18e24204 	addi	r3,r3,-30456
 4003990:	1885883a 	add	r2,r3,r2
 4003994:	14000017 	ldw	r16,0(r2)
 4003998:	14400117 	ldw	r17,4(r2)
 400399c:	30016316 	blt	r6,zero,4003f2c <_dtoa_r+0xd24>
 40039a0:	800d883a 	mov	r6,r16
 40039a4:	880f883a 	mov	r7,r17
 40039a8:	9009883a 	mov	r4,r18
 40039ac:	980b883a 	mov	r5,r19
 40039b0:	400b5700 	call	400b570 <__divdf3>
 40039b4:	180b883a 	mov	r5,r3
 40039b8:	1009883a 	mov	r4,r2
 40039bc:	400d0c40 	call	400d0c4 <__fixdfsi>
 40039c0:	1009883a 	mov	r4,r2
 40039c4:	102b883a 	mov	r21,r2
 40039c8:	400d1440 	call	400d144 <__floatsidf>
 40039cc:	800d883a 	mov	r6,r16
 40039d0:	880f883a 	mov	r7,r17
 40039d4:	1009883a 	mov	r4,r2
 40039d8:	180b883a 	mov	r5,r3
 40039dc:	400c0b00 	call	400c0b0 <__muldf3>
 40039e0:	100d883a 	mov	r6,r2
 40039e4:	180f883a 	mov	r7,r3
 40039e8:	9009883a 	mov	r4,r18
 40039ec:	980b883a 	mov	r5,r19
 40039f0:	400c7c80 	call	400c7c8 <__subdf3>
 40039f4:	d9c00717 	ldw	r7,28(sp)
 40039f8:	1009883a 	mov	r4,r2
 40039fc:	a8800c04 	addi	r2,r21,48
 4003a00:	38800005 	stb	r2,0(r7)
 4003a04:	3dc00044 	addi	r23,r7,1
 4003a08:	d9c00617 	ldw	r7,24(sp)
 4003a0c:	01800044 	movi	r6,1
 4003a10:	180b883a 	mov	r5,r3
 4003a14:	2005883a 	mov	r2,r4
 4003a18:	39803826 	beq	r7,r6,4003afc <_dtoa_r+0x8f4>
 4003a1c:	000d883a 	mov	r6,zero
 4003a20:	01d00934 	movhi	r7,16420
 4003a24:	400c0b00 	call	400c0b0 <__muldf3>
 4003a28:	000d883a 	mov	r6,zero
 4003a2c:	000f883a 	mov	r7,zero
 4003a30:	1009883a 	mov	r4,r2
 4003a34:	180b883a 	mov	r5,r3
 4003a38:	1025883a 	mov	r18,r2
 4003a3c:	1827883a 	mov	r19,r3
 4003a40:	400be580 	call	400be58 <__eqdf2>
 4003a44:	103f9a26 	beq	r2,zero,40038b0 <__alt_mem_onchip_memory2_0+0xfbfe38b0>
 4003a48:	d9c00617 	ldw	r7,24(sp)
 4003a4c:	d8c00717 	ldw	r3,28(sp)
 4003a50:	b829883a 	mov	r20,r23
 4003a54:	38bfffc4 	addi	r2,r7,-1
 4003a58:	18ad883a 	add	r22,r3,r2
 4003a5c:	00000a06 	br	4003a88 <_dtoa_r+0x880>
 4003a60:	400c0b00 	call	400c0b0 <__muldf3>
 4003a64:	000d883a 	mov	r6,zero
 4003a68:	000f883a 	mov	r7,zero
 4003a6c:	1009883a 	mov	r4,r2
 4003a70:	180b883a 	mov	r5,r3
 4003a74:	1025883a 	mov	r18,r2
 4003a78:	1827883a 	mov	r19,r3
 4003a7c:	b829883a 	mov	r20,r23
 4003a80:	400be580 	call	400be58 <__eqdf2>
 4003a84:	103f8a26 	beq	r2,zero,40038b0 <__alt_mem_onchip_memory2_0+0xfbfe38b0>
 4003a88:	800d883a 	mov	r6,r16
 4003a8c:	880f883a 	mov	r7,r17
 4003a90:	9009883a 	mov	r4,r18
 4003a94:	980b883a 	mov	r5,r19
 4003a98:	400b5700 	call	400b570 <__divdf3>
 4003a9c:	180b883a 	mov	r5,r3
 4003aa0:	1009883a 	mov	r4,r2
 4003aa4:	400d0c40 	call	400d0c4 <__fixdfsi>
 4003aa8:	1009883a 	mov	r4,r2
 4003aac:	102b883a 	mov	r21,r2
 4003ab0:	400d1440 	call	400d144 <__floatsidf>
 4003ab4:	800d883a 	mov	r6,r16
 4003ab8:	880f883a 	mov	r7,r17
 4003abc:	1009883a 	mov	r4,r2
 4003ac0:	180b883a 	mov	r5,r3
 4003ac4:	400c0b00 	call	400c0b0 <__muldf3>
 4003ac8:	100d883a 	mov	r6,r2
 4003acc:	180f883a 	mov	r7,r3
 4003ad0:	9009883a 	mov	r4,r18
 4003ad4:	980b883a 	mov	r5,r19
 4003ad8:	400c7c80 	call	400c7c8 <__subdf3>
 4003adc:	aa000c04 	addi	r8,r21,48
 4003ae0:	a2000005 	stb	r8,0(r20)
 4003ae4:	000d883a 	mov	r6,zero
 4003ae8:	01d00934 	movhi	r7,16420
 4003aec:	1009883a 	mov	r4,r2
 4003af0:	180b883a 	mov	r5,r3
 4003af4:	a5c00044 	addi	r23,r20,1
 4003af8:	b53fd91e 	bne	r22,r20,4003a60 <__alt_mem_onchip_memory2_0+0xfbfe3a60>
 4003afc:	100d883a 	mov	r6,r2
 4003b00:	180f883a 	mov	r7,r3
 4003b04:	1009883a 	mov	r4,r2
 4003b08:	180b883a 	mov	r5,r3
 4003b0c:	400acc40 	call	400acc4 <__adddf3>
 4003b10:	100d883a 	mov	r6,r2
 4003b14:	180f883a 	mov	r7,r3
 4003b18:	8009883a 	mov	r4,r16
 4003b1c:	880b883a 	mov	r5,r17
 4003b20:	1027883a 	mov	r19,r2
 4003b24:	1825883a 	mov	r18,r3
 4003b28:	400bfbc0 	call	400bfbc <__ledf2>
 4003b2c:	10000816 	blt	r2,zero,4003b50 <_dtoa_r+0x948>
 4003b30:	980d883a 	mov	r6,r19
 4003b34:	900f883a 	mov	r7,r18
 4003b38:	8009883a 	mov	r4,r16
 4003b3c:	880b883a 	mov	r5,r17
 4003b40:	400be580 	call	400be58 <__eqdf2>
 4003b44:	103f5a1e 	bne	r2,zero,40038b0 <__alt_mem_onchip_memory2_0+0xfbfe38b0>
 4003b48:	ad40004c 	andi	r21,r21,1
 4003b4c:	a83f5826 	beq	r21,zero,40038b0 <__alt_mem_onchip_memory2_0+0xfbfe38b0>
 4003b50:	bd3fffc3 	ldbu	r20,-1(r23)
 4003b54:	b8bfffc4 	addi	r2,r23,-1
 4003b58:	1007883a 	mov	r3,r2
 4003b5c:	01400e44 	movi	r5,57
 4003b60:	d9800717 	ldw	r6,28(sp)
 4003b64:	00000506 	br	4003b7c <_dtoa_r+0x974>
 4003b68:	18ffffc4 	addi	r3,r3,-1
 4003b6c:	11824726 	beq	r2,r6,400448c <_dtoa_r+0x1284>
 4003b70:	1d000003 	ldbu	r20,0(r3)
 4003b74:	102f883a 	mov	r23,r2
 4003b78:	10bfffc4 	addi	r2,r2,-1
 4003b7c:	a1003fcc 	andi	r4,r20,255
 4003b80:	2100201c 	xori	r4,r4,128
 4003b84:	213fe004 	addi	r4,r4,-128
 4003b88:	217ff726 	beq	r4,r5,4003b68 <__alt_mem_onchip_memory2_0+0xfbfe3b68>
 4003b8c:	a2000044 	addi	r8,r20,1
 4003b90:	12000005 	stb	r8,0(r2)
 4003b94:	003f4606 	br	40038b0 <__alt_mem_onchip_memory2_0+0xfbfe38b0>
 4003b98:	d9000b17 	ldw	r4,44(sp)
 4003b9c:	2000c826 	beq	r4,zero,4003ec0 <_dtoa_r+0xcb8>
 4003ba0:	d9800317 	ldw	r6,12(sp)
 4003ba4:	00c00044 	movi	r3,1
 4003ba8:	1980f90e 	bge	r3,r6,4003f90 <_dtoa_r+0xd88>
 4003bac:	d8800617 	ldw	r2,24(sp)
 4003bb0:	d8c00a17 	ldw	r3,40(sp)
 4003bb4:	157fffc4 	addi	r21,r2,-1
 4003bb8:	1d41f316 	blt	r3,r21,4004388 <_dtoa_r+0x1180>
 4003bbc:	1d6bc83a 	sub	r21,r3,r21
 4003bc0:	d9c00617 	ldw	r7,24(sp)
 4003bc4:	3802aa16 	blt	r7,zero,4004670 <_dtoa_r+0x1468>
 4003bc8:	dd000817 	ldw	r20,32(sp)
 4003bcc:	d8800617 	ldw	r2,24(sp)
 4003bd0:	d8c00817 	ldw	r3,32(sp)
 4003bd4:	01400044 	movi	r5,1
 4003bd8:	e009883a 	mov	r4,fp
 4003bdc:	1887883a 	add	r3,r3,r2
 4003be0:	d8c00815 	stw	r3,32(sp)
 4003be4:	b0ad883a 	add	r22,r22,r2
 4003be8:	4006cb00 	call	4006cb0 <__i2b>
 4003bec:	1023883a 	mov	r17,r2
 4003bf0:	a0000826 	beq	r20,zero,4003c14 <_dtoa_r+0xa0c>
 4003bf4:	0580070e 	bge	zero,r22,4003c14 <_dtoa_r+0xa0c>
 4003bf8:	a005883a 	mov	r2,r20
 4003bfc:	b500b916 	blt	r22,r20,4003ee4 <_dtoa_r+0xcdc>
 4003c00:	d9000817 	ldw	r4,32(sp)
 4003c04:	a0a9c83a 	sub	r20,r20,r2
 4003c08:	b0adc83a 	sub	r22,r22,r2
 4003c0c:	2089c83a 	sub	r4,r4,r2
 4003c10:	d9000815 	stw	r4,32(sp)
 4003c14:	d9800a17 	ldw	r6,40(sp)
 4003c18:	0181810e 	bge	zero,r6,4004220 <_dtoa_r+0x1018>
 4003c1c:	d9c00b17 	ldw	r7,44(sp)
 4003c20:	3800b326 	beq	r7,zero,4003ef0 <_dtoa_r+0xce8>
 4003c24:	a800b226 	beq	r21,zero,4003ef0 <_dtoa_r+0xce8>
 4003c28:	880b883a 	mov	r5,r17
 4003c2c:	a80d883a 	mov	r6,r21
 4003c30:	e009883a 	mov	r4,fp
 4003c34:	4006ee40 	call	4006ee4 <__pow5mult>
 4003c38:	d9800917 	ldw	r6,36(sp)
 4003c3c:	100b883a 	mov	r5,r2
 4003c40:	e009883a 	mov	r4,fp
 4003c44:	1023883a 	mov	r17,r2
 4003c48:	4006cec0 	call	4006cec <__multiply>
 4003c4c:	1021883a 	mov	r16,r2
 4003c50:	d8800a17 	ldw	r2,40(sp)
 4003c54:	d9400917 	ldw	r5,36(sp)
 4003c58:	e009883a 	mov	r4,fp
 4003c5c:	1545c83a 	sub	r2,r2,r21
 4003c60:	d8800a15 	stw	r2,40(sp)
 4003c64:	400694c0 	call	400694c <_Bfree>
 4003c68:	d8c00a17 	ldw	r3,40(sp)
 4003c6c:	18009f1e 	bne	r3,zero,4003eec <_dtoa_r+0xce4>
 4003c70:	05c00044 	movi	r23,1
 4003c74:	e009883a 	mov	r4,fp
 4003c78:	b80b883a 	mov	r5,r23
 4003c7c:	4006cb00 	call	4006cb0 <__i2b>
 4003c80:	d9000d17 	ldw	r4,52(sp)
 4003c84:	102b883a 	mov	r21,r2
 4003c88:	2000ce26 	beq	r4,zero,4003fc4 <_dtoa_r+0xdbc>
 4003c8c:	200d883a 	mov	r6,r4
 4003c90:	100b883a 	mov	r5,r2
 4003c94:	e009883a 	mov	r4,fp
 4003c98:	4006ee40 	call	4006ee4 <__pow5mult>
 4003c9c:	d9800317 	ldw	r6,12(sp)
 4003ca0:	102b883a 	mov	r21,r2
 4003ca4:	b981810e 	bge	r23,r6,40042ac <_dtoa_r+0x10a4>
 4003ca8:	0027883a 	mov	r19,zero
 4003cac:	a8800417 	ldw	r2,16(r21)
 4003cb0:	05c00804 	movi	r23,32
 4003cb4:	10800104 	addi	r2,r2,4
 4003cb8:	1085883a 	add	r2,r2,r2
 4003cbc:	1085883a 	add	r2,r2,r2
 4003cc0:	a885883a 	add	r2,r21,r2
 4003cc4:	11000017 	ldw	r4,0(r2)
 4003cc8:	4006b980 	call	4006b98 <__hi0bits>
 4003ccc:	b885c83a 	sub	r2,r23,r2
 4003cd0:	1585883a 	add	r2,r2,r22
 4003cd4:	108007cc 	andi	r2,r2,31
 4003cd8:	1000b326 	beq	r2,zero,4003fa8 <_dtoa_r+0xda0>
 4003cdc:	00c00804 	movi	r3,32
 4003ce0:	1887c83a 	sub	r3,r3,r2
 4003ce4:	01000104 	movi	r4,4
 4003ce8:	20c2cd0e 	bge	r4,r3,4004820 <_dtoa_r+0x1618>
 4003cec:	00c00704 	movi	r3,28
 4003cf0:	1885c83a 	sub	r2,r3,r2
 4003cf4:	d8c00817 	ldw	r3,32(sp)
 4003cf8:	a0a9883a 	add	r20,r20,r2
 4003cfc:	b0ad883a 	add	r22,r22,r2
 4003d00:	1887883a 	add	r3,r3,r2
 4003d04:	d8c00815 	stw	r3,32(sp)
 4003d08:	d9800817 	ldw	r6,32(sp)
 4003d0c:	0180040e 	bge	zero,r6,4003d20 <_dtoa_r+0xb18>
 4003d10:	800b883a 	mov	r5,r16
 4003d14:	e009883a 	mov	r4,fp
 4003d18:	40070240 	call	4007024 <__lshift>
 4003d1c:	1021883a 	mov	r16,r2
 4003d20:	0580050e 	bge	zero,r22,4003d38 <_dtoa_r+0xb30>
 4003d24:	a80b883a 	mov	r5,r21
 4003d28:	b00d883a 	mov	r6,r22
 4003d2c:	e009883a 	mov	r4,fp
 4003d30:	40070240 	call	4007024 <__lshift>
 4003d34:	102b883a 	mov	r21,r2
 4003d38:	d9c00e17 	ldw	r7,56(sp)
 4003d3c:	3801211e 	bne	r7,zero,40041c4 <_dtoa_r+0xfbc>
 4003d40:	d9800617 	ldw	r6,24(sp)
 4003d44:	0181380e 	bge	zero,r6,4004228 <_dtoa_r+0x1020>
 4003d48:	d8c00b17 	ldw	r3,44(sp)
 4003d4c:	1800ab1e 	bne	r3,zero,4003ffc <_dtoa_r+0xdf4>
 4003d50:	dc800717 	ldw	r18,28(sp)
 4003d54:	dcc00617 	ldw	r19,24(sp)
 4003d58:	9029883a 	mov	r20,r18
 4003d5c:	00000206 	br	4003d68 <_dtoa_r+0xb60>
 4003d60:	40069740 	call	4006974 <__multadd>
 4003d64:	1021883a 	mov	r16,r2
 4003d68:	a80b883a 	mov	r5,r21
 4003d6c:	8009883a 	mov	r4,r16
 4003d70:	40030080 	call	4003008 <quorem>
 4003d74:	10800c04 	addi	r2,r2,48
 4003d78:	90800005 	stb	r2,0(r18)
 4003d7c:	94800044 	addi	r18,r18,1
 4003d80:	9507c83a 	sub	r3,r18,r20
 4003d84:	000f883a 	mov	r7,zero
 4003d88:	01800284 	movi	r6,10
 4003d8c:	800b883a 	mov	r5,r16
 4003d90:	e009883a 	mov	r4,fp
 4003d94:	1cfff216 	blt	r3,r19,4003d60 <__alt_mem_onchip_memory2_0+0xfbfe3d60>
 4003d98:	1011883a 	mov	r8,r2
 4003d9c:	d8800617 	ldw	r2,24(sp)
 4003da0:	0082370e 	bge	zero,r2,4004680 <_dtoa_r+0x1478>
 4003da4:	d9000717 	ldw	r4,28(sp)
 4003da8:	0025883a 	mov	r18,zero
 4003dac:	20af883a 	add	r23,r4,r2
 4003db0:	01800044 	movi	r6,1
 4003db4:	800b883a 	mov	r5,r16
 4003db8:	e009883a 	mov	r4,fp
 4003dbc:	da001715 	stw	r8,92(sp)
 4003dc0:	40070240 	call	4007024 <__lshift>
 4003dc4:	a80b883a 	mov	r5,r21
 4003dc8:	1009883a 	mov	r4,r2
 4003dcc:	d8800915 	stw	r2,36(sp)
 4003dd0:	400716c0 	call	400716c <__mcmp>
 4003dd4:	da001717 	ldw	r8,92(sp)
 4003dd8:	0081800e 	bge	zero,r2,40043dc <_dtoa_r+0x11d4>
 4003ddc:	b93fffc3 	ldbu	r4,-1(r23)
 4003de0:	b8bfffc4 	addi	r2,r23,-1
 4003de4:	1007883a 	mov	r3,r2
 4003de8:	01800e44 	movi	r6,57
 4003dec:	d9c00717 	ldw	r7,28(sp)
 4003df0:	00000506 	br	4003e08 <_dtoa_r+0xc00>
 4003df4:	18ffffc4 	addi	r3,r3,-1
 4003df8:	11c12326 	beq	r2,r7,4004288 <_dtoa_r+0x1080>
 4003dfc:	19000003 	ldbu	r4,0(r3)
 4003e00:	102f883a 	mov	r23,r2
 4003e04:	10bfffc4 	addi	r2,r2,-1
 4003e08:	21403fcc 	andi	r5,r4,255
 4003e0c:	2940201c 	xori	r5,r5,128
 4003e10:	297fe004 	addi	r5,r5,-128
 4003e14:	29bff726 	beq	r5,r6,4003df4 <__alt_mem_onchip_memory2_0+0xfbfe3df4>
 4003e18:	21000044 	addi	r4,r4,1
 4003e1c:	11000005 	stb	r4,0(r2)
 4003e20:	a80b883a 	mov	r5,r21
 4003e24:	e009883a 	mov	r4,fp
 4003e28:	400694c0 	call	400694c <_Bfree>
 4003e2c:	883ea026 	beq	r17,zero,40038b0 <__alt_mem_onchip_memory2_0+0xfbfe38b0>
 4003e30:	90000426 	beq	r18,zero,4003e44 <_dtoa_r+0xc3c>
 4003e34:	94400326 	beq	r18,r17,4003e44 <_dtoa_r+0xc3c>
 4003e38:	900b883a 	mov	r5,r18
 4003e3c:	e009883a 	mov	r4,fp
 4003e40:	400694c0 	call	400694c <_Bfree>
 4003e44:	880b883a 	mov	r5,r17
 4003e48:	e009883a 	mov	r4,fp
 4003e4c:	400694c0 	call	400694c <_Bfree>
 4003e50:	003e9706 	br	40038b0 <__alt_mem_onchip_memory2_0+0xfbfe38b0>
 4003e54:	01800044 	movi	r6,1
 4003e58:	d9800e15 	stw	r6,56(sp)
 4003e5c:	003d9606 	br	40034b8 <__alt_mem_onchip_memory2_0+0xfbfe34b8>
 4003e60:	d8800817 	ldw	r2,32(sp)
 4003e64:	d8c00517 	ldw	r3,20(sp)
 4003e68:	d8000d15 	stw	zero,52(sp)
 4003e6c:	10c5c83a 	sub	r2,r2,r3
 4003e70:	00c9c83a 	sub	r4,zero,r3
 4003e74:	d8800815 	stw	r2,32(sp)
 4003e78:	d9000a15 	stw	r4,40(sp)
 4003e7c:	003d9706 	br	40034dc <__alt_mem_onchip_memory2_0+0xfbfe34dc>
 4003e80:	05adc83a 	sub	r22,zero,r22
 4003e84:	dd800815 	stw	r22,32(sp)
 4003e88:	002d883a 	mov	r22,zero
 4003e8c:	003d8e06 	br	40034c8 <__alt_mem_onchip_memory2_0+0xfbfe34c8>
 4003e90:	d9000517 	ldw	r4,20(sp)
 4003e94:	400d1440 	call	400d144 <__floatsidf>
 4003e98:	100d883a 	mov	r6,r2
 4003e9c:	180f883a 	mov	r7,r3
 4003ea0:	a009883a 	mov	r4,r20
 4003ea4:	880b883a 	mov	r5,r17
 4003ea8:	400be580 	call	400be58 <__eqdf2>
 4003eac:	103d7126 	beq	r2,zero,4003474 <__alt_mem_onchip_memory2_0+0xfbfe3474>
 4003eb0:	d9c00517 	ldw	r7,20(sp)
 4003eb4:	39ffffc4 	addi	r7,r7,-1
 4003eb8:	d9c00515 	stw	r7,20(sp)
 4003ebc:	003d6d06 	br	4003474 <__alt_mem_onchip_memory2_0+0xfbfe3474>
 4003ec0:	dd400a17 	ldw	r21,40(sp)
 4003ec4:	dd000817 	ldw	r20,32(sp)
 4003ec8:	0023883a 	mov	r17,zero
 4003ecc:	003f4806 	br	4003bf0 <__alt_mem_onchip_memory2_0+0xfbfe3bf0>
 4003ed0:	10e3c83a 	sub	r17,r2,r3
 4003ed4:	9448983a 	sll	r4,r18,r17
 4003ed8:	003d3206 	br	40033a4 <__alt_mem_onchip_memory2_0+0xfbfe33a4>
 4003edc:	d8000e15 	stw	zero,56(sp)
 4003ee0:	003d7506 	br	40034b8 <__alt_mem_onchip_memory2_0+0xfbfe34b8>
 4003ee4:	b005883a 	mov	r2,r22
 4003ee8:	003f4506 	br	4003c00 <__alt_mem_onchip_memory2_0+0xfbfe3c00>
 4003eec:	dc000915 	stw	r16,36(sp)
 4003ef0:	d9800a17 	ldw	r6,40(sp)
 4003ef4:	d9400917 	ldw	r5,36(sp)
 4003ef8:	e009883a 	mov	r4,fp
 4003efc:	4006ee40 	call	4006ee4 <__pow5mult>
 4003f00:	1021883a 	mov	r16,r2
 4003f04:	003f5a06 	br	4003c70 <__alt_mem_onchip_memory2_0+0xfbfe3c70>
 4003f08:	01c00044 	movi	r7,1
 4003f0c:	d9c00b15 	stw	r7,44(sp)
 4003f10:	d8802217 	ldw	r2,136(sp)
 4003f14:	0081280e 	bge	zero,r2,40043b8 <_dtoa_r+0x11b0>
 4003f18:	100d883a 	mov	r6,r2
 4003f1c:	1021883a 	mov	r16,r2
 4003f20:	d8800c15 	stw	r2,48(sp)
 4003f24:	d8800615 	stw	r2,24(sp)
 4003f28:	003d8806 	br	400354c <__alt_mem_onchip_memory2_0+0xfbfe354c>
 4003f2c:	d8800617 	ldw	r2,24(sp)
 4003f30:	00be9b16 	blt	zero,r2,40039a0 <__alt_mem_onchip_memory2_0+0xfbfe39a0>
 4003f34:	10010f1e 	bne	r2,zero,4004374 <_dtoa_r+0x116c>
 4003f38:	880b883a 	mov	r5,r17
 4003f3c:	000d883a 	mov	r6,zero
 4003f40:	01d00534 	movhi	r7,16404
 4003f44:	8009883a 	mov	r4,r16
 4003f48:	400c0b00 	call	400c0b0 <__muldf3>
 4003f4c:	900d883a 	mov	r6,r18
 4003f50:	980f883a 	mov	r7,r19
 4003f54:	1009883a 	mov	r4,r2
 4003f58:	180b883a 	mov	r5,r3
 4003f5c:	400bee00 	call	400bee0 <__gedf2>
 4003f60:	002b883a 	mov	r21,zero
 4003f64:	0023883a 	mov	r17,zero
 4003f68:	1000bf16 	blt	r2,zero,4004268 <_dtoa_r+0x1060>
 4003f6c:	d9802217 	ldw	r6,136(sp)
 4003f70:	ddc00717 	ldw	r23,28(sp)
 4003f74:	018c303a 	nor	r6,zero,r6
 4003f78:	d9800515 	stw	r6,20(sp)
 4003f7c:	a80b883a 	mov	r5,r21
 4003f80:	e009883a 	mov	r4,fp
 4003f84:	400694c0 	call	400694c <_Bfree>
 4003f88:	883e4926 	beq	r17,zero,40038b0 <__alt_mem_onchip_memory2_0+0xfbfe38b0>
 4003f8c:	003fad06 	br	4003e44 <__alt_mem_onchip_memory2_0+0xfbfe3e44>
 4003f90:	d9c01117 	ldw	r7,68(sp)
 4003f94:	3801bc26 	beq	r7,zero,4004688 <_dtoa_r+0x1480>
 4003f98:	10810cc4 	addi	r2,r2,1075
 4003f9c:	dd400a17 	ldw	r21,40(sp)
 4003fa0:	dd000817 	ldw	r20,32(sp)
 4003fa4:	003f0a06 	br	4003bd0 <__alt_mem_onchip_memory2_0+0xfbfe3bd0>
 4003fa8:	00800704 	movi	r2,28
 4003fac:	d9000817 	ldw	r4,32(sp)
 4003fb0:	a0a9883a 	add	r20,r20,r2
 4003fb4:	b0ad883a 	add	r22,r22,r2
 4003fb8:	2089883a 	add	r4,r4,r2
 4003fbc:	d9000815 	stw	r4,32(sp)
 4003fc0:	003f5106 	br	4003d08 <__alt_mem_onchip_memory2_0+0xfbfe3d08>
 4003fc4:	d8c00317 	ldw	r3,12(sp)
 4003fc8:	b8c1fc0e 	bge	r23,r3,40047bc <_dtoa_r+0x15b4>
 4003fcc:	0027883a 	mov	r19,zero
 4003fd0:	b805883a 	mov	r2,r23
 4003fd4:	003f3e06 	br	4003cd0 <__alt_mem_onchip_memory2_0+0xfbfe3cd0>
 4003fd8:	880b883a 	mov	r5,r17
 4003fdc:	e009883a 	mov	r4,fp
 4003fe0:	000f883a 	mov	r7,zero
 4003fe4:	01800284 	movi	r6,10
 4003fe8:	40069740 	call	4006974 <__multadd>
 4003fec:	d9000c17 	ldw	r4,48(sp)
 4003ff0:	1023883a 	mov	r17,r2
 4003ff4:	0102040e 	bge	zero,r4,4004808 <_dtoa_r+0x1600>
 4003ff8:	d9000615 	stw	r4,24(sp)
 4003ffc:	0500050e 	bge	zero,r20,4004014 <_dtoa_r+0xe0c>
 4004000:	880b883a 	mov	r5,r17
 4004004:	a00d883a 	mov	r6,r20
 4004008:	e009883a 	mov	r4,fp
 400400c:	40070240 	call	4007024 <__lshift>
 4004010:	1023883a 	mov	r17,r2
 4004014:	9801241e 	bne	r19,zero,40044a8 <_dtoa_r+0x12a0>
 4004018:	8829883a 	mov	r20,r17
 400401c:	d9000617 	ldw	r4,24(sp)
 4004020:	dcc00717 	ldw	r19,28(sp)
 4004024:	9480004c 	andi	r18,r18,1
 4004028:	20bfffc4 	addi	r2,r4,-1
 400402c:	9885883a 	add	r2,r19,r2
 4004030:	d8800415 	stw	r2,16(sp)
 4004034:	dc800615 	stw	r18,24(sp)
 4004038:	a80b883a 	mov	r5,r21
 400403c:	8009883a 	mov	r4,r16
 4004040:	40030080 	call	4003008 <quorem>
 4004044:	880b883a 	mov	r5,r17
 4004048:	8009883a 	mov	r4,r16
 400404c:	102f883a 	mov	r23,r2
 4004050:	400716c0 	call	400716c <__mcmp>
 4004054:	a80b883a 	mov	r5,r21
 4004058:	a00d883a 	mov	r6,r20
 400405c:	e009883a 	mov	r4,fp
 4004060:	102d883a 	mov	r22,r2
 4004064:	40071cc0 	call	40071cc <__mdiff>
 4004068:	1007883a 	mov	r3,r2
 400406c:	10800317 	ldw	r2,12(r2)
 4004070:	bc800c04 	addi	r18,r23,48
 4004074:	180b883a 	mov	r5,r3
 4004078:	10004e1e 	bne	r2,zero,40041b4 <_dtoa_r+0xfac>
 400407c:	8009883a 	mov	r4,r16
 4004080:	d8c01615 	stw	r3,88(sp)
 4004084:	400716c0 	call	400716c <__mcmp>
 4004088:	d8c01617 	ldw	r3,88(sp)
 400408c:	e009883a 	mov	r4,fp
 4004090:	d8801615 	stw	r2,88(sp)
 4004094:	180b883a 	mov	r5,r3
 4004098:	400694c0 	call	400694c <_Bfree>
 400409c:	d8801617 	ldw	r2,88(sp)
 40040a0:	1000041e 	bne	r2,zero,40040b4 <_dtoa_r+0xeac>
 40040a4:	d9800317 	ldw	r6,12(sp)
 40040a8:	3000021e 	bne	r6,zero,40040b4 <_dtoa_r+0xeac>
 40040ac:	d8c00617 	ldw	r3,24(sp)
 40040b0:	18003726 	beq	r3,zero,4004190 <_dtoa_r+0xf88>
 40040b4:	b0002016 	blt	r22,zero,4004138 <_dtoa_r+0xf30>
 40040b8:	b000041e 	bne	r22,zero,40040cc <_dtoa_r+0xec4>
 40040bc:	d9000317 	ldw	r4,12(sp)
 40040c0:	2000021e 	bne	r4,zero,40040cc <_dtoa_r+0xec4>
 40040c4:	d8c00617 	ldw	r3,24(sp)
 40040c8:	18001b26 	beq	r3,zero,4004138 <_dtoa_r+0xf30>
 40040cc:	00810716 	blt	zero,r2,40044ec <_dtoa_r+0x12e4>
 40040d0:	d8c00417 	ldw	r3,16(sp)
 40040d4:	9d800044 	addi	r22,r19,1
 40040d8:	9c800005 	stb	r18,0(r19)
 40040dc:	b02f883a 	mov	r23,r22
 40040e0:	98c10626 	beq	r19,r3,40044fc <_dtoa_r+0x12f4>
 40040e4:	800b883a 	mov	r5,r16
 40040e8:	000f883a 	mov	r7,zero
 40040ec:	01800284 	movi	r6,10
 40040f0:	e009883a 	mov	r4,fp
 40040f4:	40069740 	call	4006974 <__multadd>
 40040f8:	1021883a 	mov	r16,r2
 40040fc:	000f883a 	mov	r7,zero
 4004100:	01800284 	movi	r6,10
 4004104:	880b883a 	mov	r5,r17
 4004108:	e009883a 	mov	r4,fp
 400410c:	8d002526 	beq	r17,r20,40041a4 <_dtoa_r+0xf9c>
 4004110:	40069740 	call	4006974 <__multadd>
 4004114:	a00b883a 	mov	r5,r20
 4004118:	000f883a 	mov	r7,zero
 400411c:	01800284 	movi	r6,10
 4004120:	e009883a 	mov	r4,fp
 4004124:	1023883a 	mov	r17,r2
 4004128:	40069740 	call	4006974 <__multadd>
 400412c:	1029883a 	mov	r20,r2
 4004130:	b027883a 	mov	r19,r22
 4004134:	003fc006 	br	4004038 <__alt_mem_onchip_memory2_0+0xfbfe4038>
 4004138:	9011883a 	mov	r8,r18
 400413c:	00800e0e 	bge	zero,r2,4004178 <_dtoa_r+0xf70>
 4004140:	800b883a 	mov	r5,r16
 4004144:	01800044 	movi	r6,1
 4004148:	e009883a 	mov	r4,fp
 400414c:	da001715 	stw	r8,92(sp)
 4004150:	40070240 	call	4007024 <__lshift>
 4004154:	a80b883a 	mov	r5,r21
 4004158:	1009883a 	mov	r4,r2
 400415c:	1021883a 	mov	r16,r2
 4004160:	400716c0 	call	400716c <__mcmp>
 4004164:	da001717 	ldw	r8,92(sp)
 4004168:	0081960e 	bge	zero,r2,40047c4 <_dtoa_r+0x15bc>
 400416c:	00800e44 	movi	r2,57
 4004170:	40817026 	beq	r8,r2,4004734 <_dtoa_r+0x152c>
 4004174:	ba000c44 	addi	r8,r23,49
 4004178:	8825883a 	mov	r18,r17
 400417c:	9dc00044 	addi	r23,r19,1
 4004180:	9a000005 	stb	r8,0(r19)
 4004184:	a023883a 	mov	r17,r20
 4004188:	dc000915 	stw	r16,36(sp)
 400418c:	003f2406 	br	4003e20 <__alt_mem_onchip_memory2_0+0xfbfe3e20>
 4004190:	00800e44 	movi	r2,57
 4004194:	9011883a 	mov	r8,r18
 4004198:	90816626 	beq	r18,r2,4004734 <_dtoa_r+0x152c>
 400419c:	05bff516 	blt	zero,r22,4004174 <__alt_mem_onchip_memory2_0+0xfbfe4174>
 40041a0:	003ff506 	br	4004178 <__alt_mem_onchip_memory2_0+0xfbfe4178>
 40041a4:	40069740 	call	4006974 <__multadd>
 40041a8:	1023883a 	mov	r17,r2
 40041ac:	1029883a 	mov	r20,r2
 40041b0:	003fdf06 	br	4004130 <__alt_mem_onchip_memory2_0+0xfbfe4130>
 40041b4:	e009883a 	mov	r4,fp
 40041b8:	400694c0 	call	400694c <_Bfree>
 40041bc:	00800044 	movi	r2,1
 40041c0:	003fbc06 	br	40040b4 <__alt_mem_onchip_memory2_0+0xfbfe40b4>
 40041c4:	a80b883a 	mov	r5,r21
 40041c8:	8009883a 	mov	r4,r16
 40041cc:	400716c0 	call	400716c <__mcmp>
 40041d0:	103edb0e 	bge	r2,zero,4003d40 <__alt_mem_onchip_memory2_0+0xfbfe3d40>
 40041d4:	800b883a 	mov	r5,r16
 40041d8:	000f883a 	mov	r7,zero
 40041dc:	01800284 	movi	r6,10
 40041e0:	e009883a 	mov	r4,fp
 40041e4:	40069740 	call	4006974 <__multadd>
 40041e8:	1021883a 	mov	r16,r2
 40041ec:	d8800517 	ldw	r2,20(sp)
 40041f0:	d8c00b17 	ldw	r3,44(sp)
 40041f4:	10bfffc4 	addi	r2,r2,-1
 40041f8:	d8800515 	stw	r2,20(sp)
 40041fc:	183f761e 	bne	r3,zero,4003fd8 <__alt_mem_onchip_memory2_0+0xfbfe3fd8>
 4004200:	d9000c17 	ldw	r4,48(sp)
 4004204:	0101730e 	bge	zero,r4,40047d4 <_dtoa_r+0x15cc>
 4004208:	d9000615 	stw	r4,24(sp)
 400420c:	003ed006 	br	4003d50 <__alt_mem_onchip_memory2_0+0xfbfe3d50>
 4004210:	00800084 	movi	r2,2
 4004214:	3081861e 	bne	r6,r2,4004830 <_dtoa_r+0x1628>
 4004218:	d8000b15 	stw	zero,44(sp)
 400421c:	003f3c06 	br	4003f10 <__alt_mem_onchip_memory2_0+0xfbfe3f10>
 4004220:	dc000917 	ldw	r16,36(sp)
 4004224:	003e9206 	br	4003c70 <__alt_mem_onchip_memory2_0+0xfbfe3c70>
 4004228:	d9c00317 	ldw	r7,12(sp)
 400422c:	00800084 	movi	r2,2
 4004230:	11fec50e 	bge	r2,r7,4003d48 <__alt_mem_onchip_memory2_0+0xfbfe3d48>
 4004234:	d9000617 	ldw	r4,24(sp)
 4004238:	20013c1e 	bne	r4,zero,400472c <_dtoa_r+0x1524>
 400423c:	a80b883a 	mov	r5,r21
 4004240:	000f883a 	mov	r7,zero
 4004244:	01800144 	movi	r6,5
 4004248:	e009883a 	mov	r4,fp
 400424c:	40069740 	call	4006974 <__multadd>
 4004250:	100b883a 	mov	r5,r2
 4004254:	8009883a 	mov	r4,r16
 4004258:	102b883a 	mov	r21,r2
 400425c:	400716c0 	call	400716c <__mcmp>
 4004260:	dc000915 	stw	r16,36(sp)
 4004264:	00bf410e 	bge	zero,r2,4003f6c <__alt_mem_onchip_memory2_0+0xfbfe3f6c>
 4004268:	d9c00717 	ldw	r7,28(sp)
 400426c:	00800c44 	movi	r2,49
 4004270:	38800005 	stb	r2,0(r7)
 4004274:	d8800517 	ldw	r2,20(sp)
 4004278:	3dc00044 	addi	r23,r7,1
 400427c:	10800044 	addi	r2,r2,1
 4004280:	d8800515 	stw	r2,20(sp)
 4004284:	003f3d06 	br	4003f7c <__alt_mem_onchip_memory2_0+0xfbfe3f7c>
 4004288:	d9800517 	ldw	r6,20(sp)
 400428c:	d9c00717 	ldw	r7,28(sp)
 4004290:	00800c44 	movi	r2,49
 4004294:	31800044 	addi	r6,r6,1
 4004298:	d9800515 	stw	r6,20(sp)
 400429c:	38800005 	stb	r2,0(r7)
 40042a0:	003edf06 	br	4003e20 <__alt_mem_onchip_memory2_0+0xfbfe3e20>
 40042a4:	d8000b15 	stw	zero,44(sp)
 40042a8:	003c9f06 	br	4003528 <__alt_mem_onchip_memory2_0+0xfbfe3528>
 40042ac:	903e7e1e 	bne	r18,zero,4003ca8 <__alt_mem_onchip_memory2_0+0xfbfe3ca8>
 40042b0:	00800434 	movhi	r2,16
 40042b4:	10bfffc4 	addi	r2,r2,-1
 40042b8:	9884703a 	and	r2,r19,r2
 40042bc:	1000ea1e 	bne	r2,zero,4004668 <_dtoa_r+0x1460>
 40042c0:	9cdffc2c 	andhi	r19,r19,32752
 40042c4:	9800e826 	beq	r19,zero,4004668 <_dtoa_r+0x1460>
 40042c8:	d9c00817 	ldw	r7,32(sp)
 40042cc:	b5800044 	addi	r22,r22,1
 40042d0:	04c00044 	movi	r19,1
 40042d4:	39c00044 	addi	r7,r7,1
 40042d8:	d9c00815 	stw	r7,32(sp)
 40042dc:	d8800d17 	ldw	r2,52(sp)
 40042e0:	103e721e 	bne	r2,zero,4003cac <__alt_mem_onchip_memory2_0+0xfbfe3cac>
 40042e4:	00800044 	movi	r2,1
 40042e8:	003e7906 	br	4003cd0 <__alt_mem_onchip_memory2_0+0xfbfe3cd0>
 40042ec:	8009883a 	mov	r4,r16
 40042f0:	400d1440 	call	400d144 <__floatsidf>
 40042f4:	d9800f17 	ldw	r6,60(sp)
 40042f8:	d9c01017 	ldw	r7,64(sp)
 40042fc:	1009883a 	mov	r4,r2
 4004300:	180b883a 	mov	r5,r3
 4004304:	400c0b00 	call	400c0b0 <__muldf3>
 4004308:	000d883a 	mov	r6,zero
 400430c:	01d00734 	movhi	r7,16412
 4004310:	1009883a 	mov	r4,r2
 4004314:	180b883a 	mov	r5,r3
 4004318:	400acc40 	call	400acc4 <__adddf3>
 400431c:	047f3034 	movhi	r17,64704
 4004320:	1021883a 	mov	r16,r2
 4004324:	1c63883a 	add	r17,r3,r17
 4004328:	d9000f17 	ldw	r4,60(sp)
 400432c:	d9401017 	ldw	r5,64(sp)
 4004330:	000d883a 	mov	r6,zero
 4004334:	01d00534 	movhi	r7,16404
 4004338:	400c7c80 	call	400c7c8 <__subdf3>
 400433c:	800d883a 	mov	r6,r16
 4004340:	880f883a 	mov	r7,r17
 4004344:	1009883a 	mov	r4,r2
 4004348:	180b883a 	mov	r5,r3
 400434c:	102b883a 	mov	r21,r2
 4004350:	1829883a 	mov	r20,r3
 4004354:	400bee00 	call	400bee0 <__gedf2>
 4004358:	00806c16 	blt	zero,r2,400450c <_dtoa_r+0x1304>
 400435c:	89e0003c 	xorhi	r7,r17,32768
 4004360:	800d883a 	mov	r6,r16
 4004364:	a809883a 	mov	r4,r21
 4004368:	a00b883a 	mov	r5,r20
 400436c:	400bfbc0 	call	400bfbc <__ledf2>
 4004370:	103d7e0e 	bge	r2,zero,400396c <__alt_mem_onchip_memory2_0+0xfbfe396c>
 4004374:	002b883a 	mov	r21,zero
 4004378:	0023883a 	mov	r17,zero
 400437c:	003efb06 	br	4003f6c <__alt_mem_onchip_memory2_0+0xfbfe3f6c>
 4004380:	d8800717 	ldw	r2,28(sp)
 4004384:	003bd006 	br	40032c8 <__alt_mem_onchip_memory2_0+0xfbfe32c8>
 4004388:	d9000a17 	ldw	r4,40(sp)
 400438c:	d9800d17 	ldw	r6,52(sp)
 4004390:	dd400a15 	stw	r21,40(sp)
 4004394:	a905c83a 	sub	r2,r21,r4
 4004398:	308d883a 	add	r6,r6,r2
 400439c:	d9800d15 	stw	r6,52(sp)
 40043a0:	002b883a 	mov	r21,zero
 40043a4:	003e0606 	br	4003bc0 <__alt_mem_onchip_memory2_0+0xfbfe3bc0>
 40043a8:	9023883a 	mov	r17,r18
 40043ac:	9829883a 	mov	r20,r19
 40043b0:	04000084 	movi	r16,2
 40043b4:	003c9206 	br	4003600 <__alt_mem_onchip_memory2_0+0xfbfe3600>
 40043b8:	04000044 	movi	r16,1
 40043bc:	dc000c15 	stw	r16,48(sp)
 40043c0:	dc000615 	stw	r16,24(sp)
 40043c4:	dc002215 	stw	r16,136(sp)
 40043c8:	e0001115 	stw	zero,68(fp)
 40043cc:	000b883a 	mov	r5,zero
 40043d0:	003c6906 	br	4003578 <__alt_mem_onchip_memory2_0+0xfbfe3578>
 40043d4:	3021883a 	mov	r16,r6
 40043d8:	003ffb06 	br	40043c8 <__alt_mem_onchip_memory2_0+0xfbfe43c8>
 40043dc:	1000021e 	bne	r2,zero,40043e8 <_dtoa_r+0x11e0>
 40043e0:	4200004c 	andi	r8,r8,1
 40043e4:	403e7d1e 	bne	r8,zero,4003ddc <__alt_mem_onchip_memory2_0+0xfbfe3ddc>
 40043e8:	01000c04 	movi	r4,48
 40043ec:	00000106 	br	40043f4 <_dtoa_r+0x11ec>
 40043f0:	102f883a 	mov	r23,r2
 40043f4:	b8bfffc4 	addi	r2,r23,-1
 40043f8:	10c00007 	ldb	r3,0(r2)
 40043fc:	193ffc26 	beq	r3,r4,40043f0 <__alt_mem_onchip_memory2_0+0xfbfe43f0>
 4004400:	003e8706 	br	4003e20 <__alt_mem_onchip_memory2_0+0xfbfe3e20>
 4004404:	d8800517 	ldw	r2,20(sp)
 4004408:	00a3c83a 	sub	r17,zero,r2
 400440c:	8800a426 	beq	r17,zero,40046a0 <_dtoa_r+0x1498>
 4004410:	888003cc 	andi	r2,r17,15
 4004414:	100490fa 	slli	r2,r2,3
 4004418:	00c100b4 	movhi	r3,1026
 400441c:	18e24204 	addi	r3,r3,-30456
 4004420:	1885883a 	add	r2,r3,r2
 4004424:	11800017 	ldw	r6,0(r2)
 4004428:	11c00117 	ldw	r7,4(r2)
 400442c:	9009883a 	mov	r4,r18
 4004430:	980b883a 	mov	r5,r19
 4004434:	8823d13a 	srai	r17,r17,4
 4004438:	400c0b00 	call	400c0b0 <__muldf3>
 400443c:	d8800f15 	stw	r2,60(sp)
 4004440:	d8c01015 	stw	r3,64(sp)
 4004444:	8800e826 	beq	r17,zero,40047e8 <_dtoa_r+0x15e0>
 4004448:	050100b4 	movhi	r20,1026
 400444c:	a5223804 	addi	r20,r20,-30496
 4004450:	04000084 	movi	r16,2
 4004454:	8980004c 	andi	r6,r17,1
 4004458:	1009883a 	mov	r4,r2
 400445c:	8823d07a 	srai	r17,r17,1
 4004460:	180b883a 	mov	r5,r3
 4004464:	30000426 	beq	r6,zero,4004478 <_dtoa_r+0x1270>
 4004468:	a1800017 	ldw	r6,0(r20)
 400446c:	a1c00117 	ldw	r7,4(r20)
 4004470:	84000044 	addi	r16,r16,1
 4004474:	400c0b00 	call	400c0b0 <__muldf3>
 4004478:	a5000204 	addi	r20,r20,8
 400447c:	883ff51e 	bne	r17,zero,4004454 <__alt_mem_onchip_memory2_0+0xfbfe4454>
 4004480:	d8800f15 	stw	r2,60(sp)
 4004484:	d8c01015 	stw	r3,64(sp)
 4004488:	003c7606 	br	4003664 <__alt_mem_onchip_memory2_0+0xfbfe3664>
 400448c:	00c00c04 	movi	r3,48
 4004490:	10c00005 	stb	r3,0(r2)
 4004494:	d8c00517 	ldw	r3,20(sp)
 4004498:	bd3fffc3 	ldbu	r20,-1(r23)
 400449c:	18c00044 	addi	r3,r3,1
 40044a0:	d8c00515 	stw	r3,20(sp)
 40044a4:	003db906 	br	4003b8c <__alt_mem_onchip_memory2_0+0xfbfe3b8c>
 40044a8:	89400117 	ldw	r5,4(r17)
 40044ac:	e009883a 	mov	r4,fp
 40044b0:	40068a40 	call	40068a4 <_Balloc>
 40044b4:	89800417 	ldw	r6,16(r17)
 40044b8:	89400304 	addi	r5,r17,12
 40044bc:	11000304 	addi	r4,r2,12
 40044c0:	31800084 	addi	r6,r6,2
 40044c4:	318d883a 	add	r6,r6,r6
 40044c8:	318d883a 	add	r6,r6,r6
 40044cc:	1027883a 	mov	r19,r2
 40044d0:	40064d80 	call	40064d8 <memcpy>
 40044d4:	01800044 	movi	r6,1
 40044d8:	980b883a 	mov	r5,r19
 40044dc:	e009883a 	mov	r4,fp
 40044e0:	40070240 	call	4007024 <__lshift>
 40044e4:	1029883a 	mov	r20,r2
 40044e8:	003ecc06 	br	400401c <__alt_mem_onchip_memory2_0+0xfbfe401c>
 40044ec:	00800e44 	movi	r2,57
 40044f0:	90809026 	beq	r18,r2,4004734 <_dtoa_r+0x152c>
 40044f4:	92000044 	addi	r8,r18,1
 40044f8:	003f1f06 	br	4004178 <__alt_mem_onchip_memory2_0+0xfbfe4178>
 40044fc:	9011883a 	mov	r8,r18
 4004500:	8825883a 	mov	r18,r17
 4004504:	a023883a 	mov	r17,r20
 4004508:	003e2906 	br	4003db0 <__alt_mem_onchip_memory2_0+0xfbfe3db0>
 400450c:	002b883a 	mov	r21,zero
 4004510:	0023883a 	mov	r17,zero
 4004514:	003f5406 	br	4004268 <__alt_mem_onchip_memory2_0+0xfbfe4268>
 4004518:	61bfffc4 	addi	r6,r12,-1
 400451c:	300490fa 	slli	r2,r6,3
 4004520:	00c100b4 	movhi	r3,1026
 4004524:	18e24204 	addi	r3,r3,-30456
 4004528:	1885883a 	add	r2,r3,r2
 400452c:	11000017 	ldw	r4,0(r2)
 4004530:	11400117 	ldw	r5,4(r2)
 4004534:	d8800717 	ldw	r2,28(sp)
 4004538:	880f883a 	mov	r7,r17
 400453c:	d9801215 	stw	r6,72(sp)
 4004540:	800d883a 	mov	r6,r16
 4004544:	db001615 	stw	r12,88(sp)
 4004548:	15c00044 	addi	r23,r2,1
 400454c:	400c0b00 	call	400c0b0 <__muldf3>
 4004550:	d9401017 	ldw	r5,64(sp)
 4004554:	d9000f17 	ldw	r4,60(sp)
 4004558:	d8c01515 	stw	r3,84(sp)
 400455c:	d8801415 	stw	r2,80(sp)
 4004560:	400d0c40 	call	400d0c4 <__fixdfsi>
 4004564:	1009883a 	mov	r4,r2
 4004568:	1021883a 	mov	r16,r2
 400456c:	400d1440 	call	400d144 <__floatsidf>
 4004570:	d9000f17 	ldw	r4,60(sp)
 4004574:	d9401017 	ldw	r5,64(sp)
 4004578:	100d883a 	mov	r6,r2
 400457c:	180f883a 	mov	r7,r3
 4004580:	400c7c80 	call	400c7c8 <__subdf3>
 4004584:	1829883a 	mov	r20,r3
 4004588:	d8c00717 	ldw	r3,28(sp)
 400458c:	84000c04 	addi	r16,r16,48
 4004590:	1023883a 	mov	r17,r2
 4004594:	1c000005 	stb	r16,0(r3)
 4004598:	db001617 	ldw	r12,88(sp)
 400459c:	00800044 	movi	r2,1
 40045a0:	60802226 	beq	r12,r2,400462c <_dtoa_r+0x1424>
 40045a4:	d9c00717 	ldw	r7,28(sp)
 40045a8:	8805883a 	mov	r2,r17
 40045ac:	b82b883a 	mov	r21,r23
 40045b0:	3b19883a 	add	r12,r7,r12
 40045b4:	6023883a 	mov	r17,r12
 40045b8:	a007883a 	mov	r3,r20
 40045bc:	dc800f15 	stw	r18,60(sp)
 40045c0:	000d883a 	mov	r6,zero
 40045c4:	01d00934 	movhi	r7,16420
 40045c8:	1009883a 	mov	r4,r2
 40045cc:	180b883a 	mov	r5,r3
 40045d0:	400c0b00 	call	400c0b0 <__muldf3>
 40045d4:	180b883a 	mov	r5,r3
 40045d8:	1009883a 	mov	r4,r2
 40045dc:	1829883a 	mov	r20,r3
 40045e0:	1025883a 	mov	r18,r2
 40045e4:	400d0c40 	call	400d0c4 <__fixdfsi>
 40045e8:	1009883a 	mov	r4,r2
 40045ec:	1021883a 	mov	r16,r2
 40045f0:	400d1440 	call	400d144 <__floatsidf>
 40045f4:	100d883a 	mov	r6,r2
 40045f8:	180f883a 	mov	r7,r3
 40045fc:	9009883a 	mov	r4,r18
 4004600:	a00b883a 	mov	r5,r20
 4004604:	84000c04 	addi	r16,r16,48
 4004608:	400c7c80 	call	400c7c8 <__subdf3>
 400460c:	ad400044 	addi	r21,r21,1
 4004610:	ac3fffc5 	stb	r16,-1(r21)
 4004614:	ac7fea1e 	bne	r21,r17,40045c0 <__alt_mem_onchip_memory2_0+0xfbfe45c0>
 4004618:	1023883a 	mov	r17,r2
 400461c:	d8801217 	ldw	r2,72(sp)
 4004620:	dc800f17 	ldw	r18,60(sp)
 4004624:	1829883a 	mov	r20,r3
 4004628:	b8af883a 	add	r23,r23,r2
 400462c:	d9001417 	ldw	r4,80(sp)
 4004630:	d9401517 	ldw	r5,84(sp)
 4004634:	000d883a 	mov	r6,zero
 4004638:	01cff834 	movhi	r7,16352
 400463c:	400acc40 	call	400acc4 <__adddf3>
 4004640:	880d883a 	mov	r6,r17
 4004644:	a00f883a 	mov	r7,r20
 4004648:	1009883a 	mov	r4,r2
 400464c:	180b883a 	mov	r5,r3
 4004650:	400bfbc0 	call	400bfbc <__ledf2>
 4004654:	10003e0e 	bge	r2,zero,4004750 <_dtoa_r+0x1548>
 4004658:	d9001317 	ldw	r4,76(sp)
 400465c:	bd3fffc3 	ldbu	r20,-1(r23)
 4004660:	d9000515 	stw	r4,20(sp)
 4004664:	003d3b06 	br	4003b54 <__alt_mem_onchip_memory2_0+0xfbfe3b54>
 4004668:	0027883a 	mov	r19,zero
 400466c:	003f1b06 	br	40042dc <__alt_mem_onchip_memory2_0+0xfbfe42dc>
 4004670:	d8800817 	ldw	r2,32(sp)
 4004674:	11e9c83a 	sub	r20,r2,r7
 4004678:	0005883a 	mov	r2,zero
 400467c:	003d5406 	br	4003bd0 <__alt_mem_onchip_memory2_0+0xfbfe3bd0>
 4004680:	00800044 	movi	r2,1
 4004684:	003dc706 	br	4003da4 <__alt_mem_onchip_memory2_0+0xfbfe3da4>
 4004688:	d8c00217 	ldw	r3,8(sp)
 400468c:	00800d84 	movi	r2,54
 4004690:	dd400a17 	ldw	r21,40(sp)
 4004694:	10c5c83a 	sub	r2,r2,r3
 4004698:	dd000817 	ldw	r20,32(sp)
 400469c:	003d4c06 	br	4003bd0 <__alt_mem_onchip_memory2_0+0xfbfe3bd0>
 40046a0:	dc800f15 	stw	r18,60(sp)
 40046a4:	dcc01015 	stw	r19,64(sp)
 40046a8:	04000084 	movi	r16,2
 40046ac:	003bed06 	br	4003664 <__alt_mem_onchip_memory2_0+0xfbfe3664>
 40046b0:	d9000617 	ldw	r4,24(sp)
 40046b4:	203f0d26 	beq	r4,zero,40042ec <__alt_mem_onchip_memory2_0+0xfbfe42ec>
 40046b8:	d9800c17 	ldw	r6,48(sp)
 40046bc:	01bcab0e 	bge	zero,r6,400396c <__alt_mem_onchip_memory2_0+0xfbfe396c>
 40046c0:	d9401017 	ldw	r5,64(sp)
 40046c4:	d9000f17 	ldw	r4,60(sp)
 40046c8:	000d883a 	mov	r6,zero
 40046cc:	01d00934 	movhi	r7,16420
 40046d0:	400c0b00 	call	400c0b0 <__muldf3>
 40046d4:	81000044 	addi	r4,r16,1
 40046d8:	d8800f15 	stw	r2,60(sp)
 40046dc:	d8c01015 	stw	r3,64(sp)
 40046e0:	400d1440 	call	400d144 <__floatsidf>
 40046e4:	d9800f17 	ldw	r6,60(sp)
 40046e8:	d9c01017 	ldw	r7,64(sp)
 40046ec:	1009883a 	mov	r4,r2
 40046f0:	180b883a 	mov	r5,r3
 40046f4:	400c0b00 	call	400c0b0 <__muldf3>
 40046f8:	01d00734 	movhi	r7,16412
 40046fc:	000d883a 	mov	r6,zero
 4004700:	1009883a 	mov	r4,r2
 4004704:	180b883a 	mov	r5,r3
 4004708:	400acc40 	call	400acc4 <__adddf3>
 400470c:	d9c00517 	ldw	r7,20(sp)
 4004710:	047f3034 	movhi	r17,64704
 4004714:	1021883a 	mov	r16,r2
 4004718:	39ffffc4 	addi	r7,r7,-1
 400471c:	d9c01315 	stw	r7,76(sp)
 4004720:	1c63883a 	add	r17,r3,r17
 4004724:	db000c17 	ldw	r12,48(sp)
 4004728:	003bea06 	br	40036d4 <__alt_mem_onchip_memory2_0+0xfbfe36d4>
 400472c:	dc000915 	stw	r16,36(sp)
 4004730:	003e0e06 	br	4003f6c <__alt_mem_onchip_memory2_0+0xfbfe3f6c>
 4004734:	01000e44 	movi	r4,57
 4004738:	8825883a 	mov	r18,r17
 400473c:	9dc00044 	addi	r23,r19,1
 4004740:	99000005 	stb	r4,0(r19)
 4004744:	a023883a 	mov	r17,r20
 4004748:	dc000915 	stw	r16,36(sp)
 400474c:	003da406 	br	4003de0 <__alt_mem_onchip_memory2_0+0xfbfe3de0>
 4004750:	d9801417 	ldw	r6,80(sp)
 4004754:	d9c01517 	ldw	r7,84(sp)
 4004758:	0009883a 	mov	r4,zero
 400475c:	014ff834 	movhi	r5,16352
 4004760:	400c7c80 	call	400c7c8 <__subdf3>
 4004764:	880d883a 	mov	r6,r17
 4004768:	a00f883a 	mov	r7,r20
 400476c:	1009883a 	mov	r4,r2
 4004770:	180b883a 	mov	r5,r3
 4004774:	400bee00 	call	400bee0 <__gedf2>
 4004778:	00bc7c0e 	bge	zero,r2,400396c <__alt_mem_onchip_memory2_0+0xfbfe396c>
 400477c:	01000c04 	movi	r4,48
 4004780:	00000106 	br	4004788 <_dtoa_r+0x1580>
 4004784:	102f883a 	mov	r23,r2
 4004788:	b8bfffc4 	addi	r2,r23,-1
 400478c:	10c00007 	ldb	r3,0(r2)
 4004790:	193ffc26 	beq	r3,r4,4004784 <__alt_mem_onchip_memory2_0+0xfbfe4784>
 4004794:	d9801317 	ldw	r6,76(sp)
 4004798:	d9800515 	stw	r6,20(sp)
 400479c:	003c4406 	br	40038b0 <__alt_mem_onchip_memory2_0+0xfbfe38b0>
 40047a0:	d9801317 	ldw	r6,76(sp)
 40047a4:	d9800515 	stw	r6,20(sp)
 40047a8:	003cea06 	br	4003b54 <__alt_mem_onchip_memory2_0+0xfbfe3b54>
 40047ac:	dd800f17 	ldw	r22,60(sp)
 40047b0:	dcc01017 	ldw	r19,64(sp)
 40047b4:	dc801217 	ldw	r18,72(sp)
 40047b8:	003c6c06 	br	400396c <__alt_mem_onchip_memory2_0+0xfbfe396c>
 40047bc:	903e031e 	bne	r18,zero,4003fcc <__alt_mem_onchip_memory2_0+0xfbfe3fcc>
 40047c0:	003ebb06 	br	40042b0 <__alt_mem_onchip_memory2_0+0xfbfe42b0>
 40047c4:	103e6c1e 	bne	r2,zero,4004178 <__alt_mem_onchip_memory2_0+0xfbfe4178>
 40047c8:	4080004c 	andi	r2,r8,1
 40047cc:	103e6a26 	beq	r2,zero,4004178 <__alt_mem_onchip_memory2_0+0xfbfe4178>
 40047d0:	003e6606 	br	400416c <__alt_mem_onchip_memory2_0+0xfbfe416c>
 40047d4:	d8c00317 	ldw	r3,12(sp)
 40047d8:	00800084 	movi	r2,2
 40047dc:	10c02916 	blt	r2,r3,4004884 <_dtoa_r+0x167c>
 40047e0:	d9000c17 	ldw	r4,48(sp)
 40047e4:	003e8806 	br	4004208 <__alt_mem_onchip_memory2_0+0xfbfe4208>
 40047e8:	04000084 	movi	r16,2
 40047ec:	003b9d06 	br	4003664 <__alt_mem_onchip_memory2_0+0xfbfe3664>
 40047f0:	d9001317 	ldw	r4,76(sp)
 40047f4:	d9000515 	stw	r4,20(sp)
 40047f8:	003cd606 	br	4003b54 <__alt_mem_onchip_memory2_0+0xfbfe3b54>
 40047fc:	d8801317 	ldw	r2,76(sp)
 4004800:	d8800515 	stw	r2,20(sp)
 4004804:	003c2a06 	br	40038b0 <__alt_mem_onchip_memory2_0+0xfbfe38b0>
 4004808:	d9800317 	ldw	r6,12(sp)
 400480c:	00800084 	movi	r2,2
 4004810:	11801516 	blt	r2,r6,4004868 <_dtoa_r+0x1660>
 4004814:	d9c00c17 	ldw	r7,48(sp)
 4004818:	d9c00615 	stw	r7,24(sp)
 400481c:	003df706 	br	4003ffc <__alt_mem_onchip_memory2_0+0xfbfe3ffc>
 4004820:	193d3926 	beq	r3,r4,4003d08 <__alt_mem_onchip_memory2_0+0xfbfe3d08>
 4004824:	00c00f04 	movi	r3,60
 4004828:	1885c83a 	sub	r2,r3,r2
 400482c:	003ddf06 	br	4003fac <__alt_mem_onchip_memory2_0+0xfbfe3fac>
 4004830:	e009883a 	mov	r4,fp
 4004834:	e0001115 	stw	zero,68(fp)
 4004838:	000b883a 	mov	r5,zero
 400483c:	40068a40 	call	40068a4 <_Balloc>
 4004840:	d8800715 	stw	r2,28(sp)
 4004844:	d8c00717 	ldw	r3,28(sp)
 4004848:	00bfffc4 	movi	r2,-1
 400484c:	01000044 	movi	r4,1
 4004850:	d8800c15 	stw	r2,48(sp)
 4004854:	e0c01015 	stw	r3,64(fp)
 4004858:	d9000b15 	stw	r4,44(sp)
 400485c:	d8800615 	stw	r2,24(sp)
 4004860:	d8002215 	stw	zero,136(sp)
 4004864:	003c4106 	br	400396c <__alt_mem_onchip_memory2_0+0xfbfe396c>
 4004868:	d8c00c17 	ldw	r3,48(sp)
 400486c:	d8c00615 	stw	r3,24(sp)
 4004870:	003e7006 	br	4004234 <__alt_mem_onchip_memory2_0+0xfbfe4234>
 4004874:	04400044 	movi	r17,1
 4004878:	003b2006 	br	40034fc <__alt_mem_onchip_memory2_0+0xfbfe34fc>
 400487c:	000b883a 	mov	r5,zero
 4004880:	003b3d06 	br	4003578 <__alt_mem_onchip_memory2_0+0xfbfe3578>
 4004884:	d8800c17 	ldw	r2,48(sp)
 4004888:	d8800615 	stw	r2,24(sp)
 400488c:	003e6906 	br	4004234 <__alt_mem_onchip_memory2_0+0xfbfe4234>

04004890 <__sflush_r>:
 4004890:	2880030b 	ldhu	r2,12(r5)
 4004894:	defffb04 	addi	sp,sp,-20
 4004898:	dcc00315 	stw	r19,12(sp)
 400489c:	dc400115 	stw	r17,4(sp)
 40048a0:	dfc00415 	stw	ra,16(sp)
 40048a4:	dc800215 	stw	r18,8(sp)
 40048a8:	dc000015 	stw	r16,0(sp)
 40048ac:	10c0020c 	andi	r3,r2,8
 40048b0:	2823883a 	mov	r17,r5
 40048b4:	2027883a 	mov	r19,r4
 40048b8:	1800311e 	bne	r3,zero,4004980 <__sflush_r+0xf0>
 40048bc:	28c00117 	ldw	r3,4(r5)
 40048c0:	10820014 	ori	r2,r2,2048
 40048c4:	2880030d 	sth	r2,12(r5)
 40048c8:	00c04b0e 	bge	zero,r3,40049f8 <__sflush_r+0x168>
 40048cc:	8a000a17 	ldw	r8,40(r17)
 40048d0:	40002326 	beq	r8,zero,4004960 <__sflush_r+0xd0>
 40048d4:	9c000017 	ldw	r16,0(r19)
 40048d8:	10c4000c 	andi	r3,r2,4096
 40048dc:	98000015 	stw	zero,0(r19)
 40048e0:	18004826 	beq	r3,zero,4004a04 <__sflush_r+0x174>
 40048e4:	89801417 	ldw	r6,80(r17)
 40048e8:	10c0010c 	andi	r3,r2,4
 40048ec:	18000626 	beq	r3,zero,4004908 <__sflush_r+0x78>
 40048f0:	88c00117 	ldw	r3,4(r17)
 40048f4:	88800c17 	ldw	r2,48(r17)
 40048f8:	30cdc83a 	sub	r6,r6,r3
 40048fc:	10000226 	beq	r2,zero,4004908 <__sflush_r+0x78>
 4004900:	88800f17 	ldw	r2,60(r17)
 4004904:	308dc83a 	sub	r6,r6,r2
 4004908:	89400717 	ldw	r5,28(r17)
 400490c:	000f883a 	mov	r7,zero
 4004910:	9809883a 	mov	r4,r19
 4004914:	403ee83a 	callr	r8
 4004918:	00ffffc4 	movi	r3,-1
 400491c:	10c04426 	beq	r2,r3,4004a30 <__sflush_r+0x1a0>
 4004920:	88c0030b 	ldhu	r3,12(r17)
 4004924:	89000417 	ldw	r4,16(r17)
 4004928:	88000115 	stw	zero,4(r17)
 400492c:	197dffcc 	andi	r5,r3,63487
 4004930:	8940030d 	sth	r5,12(r17)
 4004934:	89000015 	stw	r4,0(r17)
 4004938:	18c4000c 	andi	r3,r3,4096
 400493c:	18002c1e 	bne	r3,zero,40049f0 <__sflush_r+0x160>
 4004940:	89400c17 	ldw	r5,48(r17)
 4004944:	9c000015 	stw	r16,0(r19)
 4004948:	28000526 	beq	r5,zero,4004960 <__sflush_r+0xd0>
 400494c:	88801004 	addi	r2,r17,64
 4004950:	28800226 	beq	r5,r2,400495c <__sflush_r+0xcc>
 4004954:	9809883a 	mov	r4,r19
 4004958:	4004ffc0 	call	4004ffc <_free_r>
 400495c:	88000c15 	stw	zero,48(r17)
 4004960:	0005883a 	mov	r2,zero
 4004964:	dfc00417 	ldw	ra,16(sp)
 4004968:	dcc00317 	ldw	r19,12(sp)
 400496c:	dc800217 	ldw	r18,8(sp)
 4004970:	dc400117 	ldw	r17,4(sp)
 4004974:	dc000017 	ldw	r16,0(sp)
 4004978:	dec00504 	addi	sp,sp,20
 400497c:	f800283a 	ret
 4004980:	2c800417 	ldw	r18,16(r5)
 4004984:	903ff626 	beq	r18,zero,4004960 <__alt_mem_onchip_memory2_0+0xfbfe4960>
 4004988:	2c000017 	ldw	r16,0(r5)
 400498c:	108000cc 	andi	r2,r2,3
 4004990:	2c800015 	stw	r18,0(r5)
 4004994:	84a1c83a 	sub	r16,r16,r18
 4004998:	1000131e 	bne	r2,zero,40049e8 <__sflush_r+0x158>
 400499c:	28800517 	ldw	r2,20(r5)
 40049a0:	88800215 	stw	r2,8(r17)
 40049a4:	04000316 	blt	zero,r16,40049b4 <__sflush_r+0x124>
 40049a8:	003fed06 	br	4004960 <__alt_mem_onchip_memory2_0+0xfbfe4960>
 40049ac:	90a5883a 	add	r18,r18,r2
 40049b0:	043feb0e 	bge	zero,r16,4004960 <__alt_mem_onchip_memory2_0+0xfbfe4960>
 40049b4:	88800917 	ldw	r2,36(r17)
 40049b8:	89400717 	ldw	r5,28(r17)
 40049bc:	800f883a 	mov	r7,r16
 40049c0:	900d883a 	mov	r6,r18
 40049c4:	9809883a 	mov	r4,r19
 40049c8:	103ee83a 	callr	r2
 40049cc:	80a1c83a 	sub	r16,r16,r2
 40049d0:	00bff616 	blt	zero,r2,40049ac <__alt_mem_onchip_memory2_0+0xfbfe49ac>
 40049d4:	88c0030b 	ldhu	r3,12(r17)
 40049d8:	00bfffc4 	movi	r2,-1
 40049dc:	18c01014 	ori	r3,r3,64
 40049e0:	88c0030d 	sth	r3,12(r17)
 40049e4:	003fdf06 	br	4004964 <__alt_mem_onchip_memory2_0+0xfbfe4964>
 40049e8:	0005883a 	mov	r2,zero
 40049ec:	003fec06 	br	40049a0 <__alt_mem_onchip_memory2_0+0xfbfe49a0>
 40049f0:	88801415 	stw	r2,80(r17)
 40049f4:	003fd206 	br	4004940 <__alt_mem_onchip_memory2_0+0xfbfe4940>
 40049f8:	28c00f17 	ldw	r3,60(r5)
 40049fc:	00ffb316 	blt	zero,r3,40048cc <__alt_mem_onchip_memory2_0+0xfbfe48cc>
 4004a00:	003fd706 	br	4004960 <__alt_mem_onchip_memory2_0+0xfbfe4960>
 4004a04:	89400717 	ldw	r5,28(r17)
 4004a08:	000d883a 	mov	r6,zero
 4004a0c:	01c00044 	movi	r7,1
 4004a10:	9809883a 	mov	r4,r19
 4004a14:	403ee83a 	callr	r8
 4004a18:	100d883a 	mov	r6,r2
 4004a1c:	00bfffc4 	movi	r2,-1
 4004a20:	30801426 	beq	r6,r2,4004a74 <__sflush_r+0x1e4>
 4004a24:	8880030b 	ldhu	r2,12(r17)
 4004a28:	8a000a17 	ldw	r8,40(r17)
 4004a2c:	003fae06 	br	40048e8 <__alt_mem_onchip_memory2_0+0xfbfe48e8>
 4004a30:	98c00017 	ldw	r3,0(r19)
 4004a34:	183fba26 	beq	r3,zero,4004920 <__alt_mem_onchip_memory2_0+0xfbfe4920>
 4004a38:	01000744 	movi	r4,29
 4004a3c:	19000626 	beq	r3,r4,4004a58 <__sflush_r+0x1c8>
 4004a40:	01000584 	movi	r4,22
 4004a44:	19000426 	beq	r3,r4,4004a58 <__sflush_r+0x1c8>
 4004a48:	88c0030b 	ldhu	r3,12(r17)
 4004a4c:	18c01014 	ori	r3,r3,64
 4004a50:	88c0030d 	sth	r3,12(r17)
 4004a54:	003fc306 	br	4004964 <__alt_mem_onchip_memory2_0+0xfbfe4964>
 4004a58:	8880030b 	ldhu	r2,12(r17)
 4004a5c:	88c00417 	ldw	r3,16(r17)
 4004a60:	88000115 	stw	zero,4(r17)
 4004a64:	10bdffcc 	andi	r2,r2,63487
 4004a68:	8880030d 	sth	r2,12(r17)
 4004a6c:	88c00015 	stw	r3,0(r17)
 4004a70:	003fb306 	br	4004940 <__alt_mem_onchip_memory2_0+0xfbfe4940>
 4004a74:	98800017 	ldw	r2,0(r19)
 4004a78:	103fea26 	beq	r2,zero,4004a24 <__alt_mem_onchip_memory2_0+0xfbfe4a24>
 4004a7c:	00c00744 	movi	r3,29
 4004a80:	10c00226 	beq	r2,r3,4004a8c <__sflush_r+0x1fc>
 4004a84:	00c00584 	movi	r3,22
 4004a88:	10c0031e 	bne	r2,r3,4004a98 <__sflush_r+0x208>
 4004a8c:	9c000015 	stw	r16,0(r19)
 4004a90:	0005883a 	mov	r2,zero
 4004a94:	003fb306 	br	4004964 <__alt_mem_onchip_memory2_0+0xfbfe4964>
 4004a98:	88c0030b 	ldhu	r3,12(r17)
 4004a9c:	3005883a 	mov	r2,r6
 4004aa0:	18c01014 	ori	r3,r3,64
 4004aa4:	88c0030d 	sth	r3,12(r17)
 4004aa8:	003fae06 	br	4004964 <__alt_mem_onchip_memory2_0+0xfbfe4964>

04004aac <_fflush_r>:
 4004aac:	defffd04 	addi	sp,sp,-12
 4004ab0:	dc000115 	stw	r16,4(sp)
 4004ab4:	dfc00215 	stw	ra,8(sp)
 4004ab8:	2021883a 	mov	r16,r4
 4004abc:	20000226 	beq	r4,zero,4004ac8 <_fflush_r+0x1c>
 4004ac0:	20800e17 	ldw	r2,56(r4)
 4004ac4:	10000c26 	beq	r2,zero,4004af8 <_fflush_r+0x4c>
 4004ac8:	2880030f 	ldh	r2,12(r5)
 4004acc:	1000051e 	bne	r2,zero,4004ae4 <_fflush_r+0x38>
 4004ad0:	0005883a 	mov	r2,zero
 4004ad4:	dfc00217 	ldw	ra,8(sp)
 4004ad8:	dc000117 	ldw	r16,4(sp)
 4004adc:	dec00304 	addi	sp,sp,12
 4004ae0:	f800283a 	ret
 4004ae4:	8009883a 	mov	r4,r16
 4004ae8:	dfc00217 	ldw	ra,8(sp)
 4004aec:	dc000117 	ldw	r16,4(sp)
 4004af0:	dec00304 	addi	sp,sp,12
 4004af4:	40048901 	jmpi	4004890 <__sflush_r>
 4004af8:	d9400015 	stw	r5,0(sp)
 4004afc:	4004e880 	call	4004e88 <__sinit>
 4004b00:	d9400017 	ldw	r5,0(sp)
 4004b04:	003ff006 	br	4004ac8 <__alt_mem_onchip_memory2_0+0xfbfe4ac8>

04004b08 <fflush>:
 4004b08:	20000526 	beq	r4,zero,4004b20 <fflush+0x18>
 4004b0c:	008100b4 	movhi	r2,1026
 4004b10:	10a9c104 	addi	r2,r2,-22780
 4004b14:	200b883a 	mov	r5,r4
 4004b18:	11000017 	ldw	r4,0(r2)
 4004b1c:	4004aac1 	jmpi	4004aac <_fflush_r>
 4004b20:	008100b4 	movhi	r2,1026
 4004b24:	10a9c004 	addi	r2,r2,-22784
 4004b28:	11000017 	ldw	r4,0(r2)
 4004b2c:	01410034 	movhi	r5,1024
 4004b30:	2952ab04 	addi	r5,r5,19116
 4004b34:	400588c1 	jmpi	400588c <_fwalk_reent>

04004b38 <__fp_unlock>:
 4004b38:	0005883a 	mov	r2,zero
 4004b3c:	f800283a 	ret

04004b40 <_cleanup_r>:
 4004b40:	01410074 	movhi	r5,1025
 4004b44:	29662904 	addi	r5,r5,-26460
 4004b48:	400588c1 	jmpi	400588c <_fwalk_reent>

04004b4c <__sinit.part.1>:
 4004b4c:	defff704 	addi	sp,sp,-36
 4004b50:	00c10034 	movhi	r3,1024
 4004b54:	dfc00815 	stw	ra,32(sp)
 4004b58:	ddc00715 	stw	r23,28(sp)
 4004b5c:	dd800615 	stw	r22,24(sp)
 4004b60:	dd400515 	stw	r21,20(sp)
 4004b64:	dd000415 	stw	r20,16(sp)
 4004b68:	dcc00315 	stw	r19,12(sp)
 4004b6c:	dc800215 	stw	r18,8(sp)
 4004b70:	dc400115 	stw	r17,4(sp)
 4004b74:	dc000015 	stw	r16,0(sp)
 4004b78:	18d2d004 	addi	r3,r3,19264
 4004b7c:	24000117 	ldw	r16,4(r4)
 4004b80:	20c00f15 	stw	r3,60(r4)
 4004b84:	2080bb04 	addi	r2,r4,748
 4004b88:	00c000c4 	movi	r3,3
 4004b8c:	20c0b915 	stw	r3,740(r4)
 4004b90:	2080ba15 	stw	r2,744(r4)
 4004b94:	2000b815 	stw	zero,736(r4)
 4004b98:	05c00204 	movi	r23,8
 4004b9c:	00800104 	movi	r2,4
 4004ba0:	2025883a 	mov	r18,r4
 4004ba4:	b80d883a 	mov	r6,r23
 4004ba8:	81001704 	addi	r4,r16,92
 4004bac:	000b883a 	mov	r5,zero
 4004bb0:	80000015 	stw	zero,0(r16)
 4004bb4:	80000115 	stw	zero,4(r16)
 4004bb8:	80000215 	stw	zero,8(r16)
 4004bbc:	8080030d 	sth	r2,12(r16)
 4004bc0:	80001915 	stw	zero,100(r16)
 4004bc4:	8000038d 	sth	zero,14(r16)
 4004bc8:	80000415 	stw	zero,16(r16)
 4004bcc:	80000515 	stw	zero,20(r16)
 4004bd0:	80000615 	stw	zero,24(r16)
 4004bd4:	400677c0 	call	400677c <memset>
 4004bd8:	05810034 	movhi	r22,1024
 4004bdc:	94400217 	ldw	r17,8(r18)
 4004be0:	05410034 	movhi	r21,1024
 4004be4:	05010034 	movhi	r20,1024
 4004be8:	04c10074 	movhi	r19,1025
 4004bec:	b59fb304 	addi	r22,r22,32460
 4004bf0:	ad5fca04 	addi	r21,r21,32552
 4004bf4:	a51fe904 	addi	r20,r20,32676
 4004bf8:	9ce00004 	addi	r19,r19,-32768
 4004bfc:	85800815 	stw	r22,32(r16)
 4004c00:	85400915 	stw	r21,36(r16)
 4004c04:	85000a15 	stw	r20,40(r16)
 4004c08:	84c00b15 	stw	r19,44(r16)
 4004c0c:	84000715 	stw	r16,28(r16)
 4004c10:	00800284 	movi	r2,10
 4004c14:	8880030d 	sth	r2,12(r17)
 4004c18:	00800044 	movi	r2,1
 4004c1c:	b80d883a 	mov	r6,r23
 4004c20:	89001704 	addi	r4,r17,92
 4004c24:	000b883a 	mov	r5,zero
 4004c28:	88000015 	stw	zero,0(r17)
 4004c2c:	88000115 	stw	zero,4(r17)
 4004c30:	88000215 	stw	zero,8(r17)
 4004c34:	88001915 	stw	zero,100(r17)
 4004c38:	8880038d 	sth	r2,14(r17)
 4004c3c:	88000415 	stw	zero,16(r17)
 4004c40:	88000515 	stw	zero,20(r17)
 4004c44:	88000615 	stw	zero,24(r17)
 4004c48:	400677c0 	call	400677c <memset>
 4004c4c:	94000317 	ldw	r16,12(r18)
 4004c50:	00800484 	movi	r2,18
 4004c54:	8c400715 	stw	r17,28(r17)
 4004c58:	8d800815 	stw	r22,32(r17)
 4004c5c:	8d400915 	stw	r21,36(r17)
 4004c60:	8d000a15 	stw	r20,40(r17)
 4004c64:	8cc00b15 	stw	r19,44(r17)
 4004c68:	8080030d 	sth	r2,12(r16)
 4004c6c:	00800084 	movi	r2,2
 4004c70:	80000015 	stw	zero,0(r16)
 4004c74:	80000115 	stw	zero,4(r16)
 4004c78:	80000215 	stw	zero,8(r16)
 4004c7c:	80001915 	stw	zero,100(r16)
 4004c80:	8080038d 	sth	r2,14(r16)
 4004c84:	80000415 	stw	zero,16(r16)
 4004c88:	80000515 	stw	zero,20(r16)
 4004c8c:	80000615 	stw	zero,24(r16)
 4004c90:	b80d883a 	mov	r6,r23
 4004c94:	000b883a 	mov	r5,zero
 4004c98:	81001704 	addi	r4,r16,92
 4004c9c:	400677c0 	call	400677c <memset>
 4004ca0:	00800044 	movi	r2,1
 4004ca4:	84000715 	stw	r16,28(r16)
 4004ca8:	85800815 	stw	r22,32(r16)
 4004cac:	85400915 	stw	r21,36(r16)
 4004cb0:	85000a15 	stw	r20,40(r16)
 4004cb4:	84c00b15 	stw	r19,44(r16)
 4004cb8:	90800e15 	stw	r2,56(r18)
 4004cbc:	dfc00817 	ldw	ra,32(sp)
 4004cc0:	ddc00717 	ldw	r23,28(sp)
 4004cc4:	dd800617 	ldw	r22,24(sp)
 4004cc8:	dd400517 	ldw	r21,20(sp)
 4004ccc:	dd000417 	ldw	r20,16(sp)
 4004cd0:	dcc00317 	ldw	r19,12(sp)
 4004cd4:	dc800217 	ldw	r18,8(sp)
 4004cd8:	dc400117 	ldw	r17,4(sp)
 4004cdc:	dc000017 	ldw	r16,0(sp)
 4004ce0:	dec00904 	addi	sp,sp,36
 4004ce4:	f800283a 	ret

04004ce8 <__fp_lock>:
 4004ce8:	0005883a 	mov	r2,zero
 4004cec:	f800283a 	ret

04004cf0 <__sfmoreglue>:
 4004cf0:	defffc04 	addi	sp,sp,-16
 4004cf4:	dc400115 	stw	r17,4(sp)
 4004cf8:	2c7fffc4 	addi	r17,r5,-1
 4004cfc:	8c401a24 	muli	r17,r17,104
 4004d00:	dc800215 	stw	r18,8(sp)
 4004d04:	2825883a 	mov	r18,r5
 4004d08:	89401d04 	addi	r5,r17,116
 4004d0c:	dc000015 	stw	r16,0(sp)
 4004d10:	dfc00315 	stw	ra,12(sp)
 4004d14:	4005be80 	call	4005be8 <_malloc_r>
 4004d18:	1021883a 	mov	r16,r2
 4004d1c:	10000726 	beq	r2,zero,4004d3c <__sfmoreglue+0x4c>
 4004d20:	11000304 	addi	r4,r2,12
 4004d24:	10000015 	stw	zero,0(r2)
 4004d28:	14800115 	stw	r18,4(r2)
 4004d2c:	11000215 	stw	r4,8(r2)
 4004d30:	89801a04 	addi	r6,r17,104
 4004d34:	000b883a 	mov	r5,zero
 4004d38:	400677c0 	call	400677c <memset>
 4004d3c:	8005883a 	mov	r2,r16
 4004d40:	dfc00317 	ldw	ra,12(sp)
 4004d44:	dc800217 	ldw	r18,8(sp)
 4004d48:	dc400117 	ldw	r17,4(sp)
 4004d4c:	dc000017 	ldw	r16,0(sp)
 4004d50:	dec00404 	addi	sp,sp,16
 4004d54:	f800283a 	ret

04004d58 <__sfp>:
 4004d58:	defffb04 	addi	sp,sp,-20
 4004d5c:	dc000015 	stw	r16,0(sp)
 4004d60:	040100b4 	movhi	r16,1026
 4004d64:	8429c004 	addi	r16,r16,-22784
 4004d68:	dcc00315 	stw	r19,12(sp)
 4004d6c:	2027883a 	mov	r19,r4
 4004d70:	81000017 	ldw	r4,0(r16)
 4004d74:	dfc00415 	stw	ra,16(sp)
 4004d78:	dc800215 	stw	r18,8(sp)
 4004d7c:	20800e17 	ldw	r2,56(r4)
 4004d80:	dc400115 	stw	r17,4(sp)
 4004d84:	1000021e 	bne	r2,zero,4004d90 <__sfp+0x38>
 4004d88:	4004b4c0 	call	4004b4c <__sinit.part.1>
 4004d8c:	81000017 	ldw	r4,0(r16)
 4004d90:	2480b804 	addi	r18,r4,736
 4004d94:	047fffc4 	movi	r17,-1
 4004d98:	91000117 	ldw	r4,4(r18)
 4004d9c:	94000217 	ldw	r16,8(r18)
 4004da0:	213fffc4 	addi	r4,r4,-1
 4004da4:	20000a16 	blt	r4,zero,4004dd0 <__sfp+0x78>
 4004da8:	8080030f 	ldh	r2,12(r16)
 4004dac:	10000c26 	beq	r2,zero,4004de0 <__sfp+0x88>
 4004db0:	80c01d04 	addi	r3,r16,116
 4004db4:	00000206 	br	4004dc0 <__sfp+0x68>
 4004db8:	18bfe60f 	ldh	r2,-104(r3)
 4004dbc:	10000826 	beq	r2,zero,4004de0 <__sfp+0x88>
 4004dc0:	213fffc4 	addi	r4,r4,-1
 4004dc4:	1c3ffd04 	addi	r16,r3,-12
 4004dc8:	18c01a04 	addi	r3,r3,104
 4004dcc:	247ffa1e 	bne	r4,r17,4004db8 <__alt_mem_onchip_memory2_0+0xfbfe4db8>
 4004dd0:	90800017 	ldw	r2,0(r18)
 4004dd4:	10001d26 	beq	r2,zero,4004e4c <__sfp+0xf4>
 4004dd8:	1025883a 	mov	r18,r2
 4004ddc:	003fee06 	br	4004d98 <__alt_mem_onchip_memory2_0+0xfbfe4d98>
 4004de0:	00bfffc4 	movi	r2,-1
 4004de4:	8080038d 	sth	r2,14(r16)
 4004de8:	00800044 	movi	r2,1
 4004dec:	8080030d 	sth	r2,12(r16)
 4004df0:	80001915 	stw	zero,100(r16)
 4004df4:	80000015 	stw	zero,0(r16)
 4004df8:	80000215 	stw	zero,8(r16)
 4004dfc:	80000115 	stw	zero,4(r16)
 4004e00:	80000415 	stw	zero,16(r16)
 4004e04:	80000515 	stw	zero,20(r16)
 4004e08:	80000615 	stw	zero,24(r16)
 4004e0c:	01800204 	movi	r6,8
 4004e10:	000b883a 	mov	r5,zero
 4004e14:	81001704 	addi	r4,r16,92
 4004e18:	400677c0 	call	400677c <memset>
 4004e1c:	8005883a 	mov	r2,r16
 4004e20:	80000c15 	stw	zero,48(r16)
 4004e24:	80000d15 	stw	zero,52(r16)
 4004e28:	80001115 	stw	zero,68(r16)
 4004e2c:	80001215 	stw	zero,72(r16)
 4004e30:	dfc00417 	ldw	ra,16(sp)
 4004e34:	dcc00317 	ldw	r19,12(sp)
 4004e38:	dc800217 	ldw	r18,8(sp)
 4004e3c:	dc400117 	ldw	r17,4(sp)
 4004e40:	dc000017 	ldw	r16,0(sp)
 4004e44:	dec00504 	addi	sp,sp,20
 4004e48:	f800283a 	ret
 4004e4c:	01400104 	movi	r5,4
 4004e50:	9809883a 	mov	r4,r19
 4004e54:	4004cf00 	call	4004cf0 <__sfmoreglue>
 4004e58:	90800015 	stw	r2,0(r18)
 4004e5c:	103fde1e 	bne	r2,zero,4004dd8 <__alt_mem_onchip_memory2_0+0xfbfe4dd8>
 4004e60:	00800304 	movi	r2,12
 4004e64:	98800015 	stw	r2,0(r19)
 4004e68:	0005883a 	mov	r2,zero
 4004e6c:	003ff006 	br	4004e30 <__alt_mem_onchip_memory2_0+0xfbfe4e30>

04004e70 <_cleanup>:
 4004e70:	008100b4 	movhi	r2,1026
 4004e74:	10a9c004 	addi	r2,r2,-22784
 4004e78:	11000017 	ldw	r4,0(r2)
 4004e7c:	01410074 	movhi	r5,1025
 4004e80:	29662904 	addi	r5,r5,-26460
 4004e84:	400588c1 	jmpi	400588c <_fwalk_reent>

04004e88 <__sinit>:
 4004e88:	20800e17 	ldw	r2,56(r4)
 4004e8c:	10000126 	beq	r2,zero,4004e94 <__sinit+0xc>
 4004e90:	f800283a 	ret
 4004e94:	4004b4c1 	jmpi	4004b4c <__sinit.part.1>

04004e98 <__sfp_lock_acquire>:
 4004e98:	f800283a 	ret

04004e9c <__sfp_lock_release>:
 4004e9c:	f800283a 	ret

04004ea0 <__sinit_lock_acquire>:
 4004ea0:	f800283a 	ret

04004ea4 <__sinit_lock_release>:
 4004ea4:	f800283a 	ret

04004ea8 <__fp_lock_all>:
 4004ea8:	008100b4 	movhi	r2,1026
 4004eac:	10a9c104 	addi	r2,r2,-22780
 4004eb0:	11000017 	ldw	r4,0(r2)
 4004eb4:	01410034 	movhi	r5,1024
 4004eb8:	29533a04 	addi	r5,r5,19688
 4004ebc:	40057c81 	jmpi	40057c8 <_fwalk>

04004ec0 <__fp_unlock_all>:
 4004ec0:	008100b4 	movhi	r2,1026
 4004ec4:	10a9c104 	addi	r2,r2,-22780
 4004ec8:	11000017 	ldw	r4,0(r2)
 4004ecc:	01410034 	movhi	r5,1024
 4004ed0:	2952ce04 	addi	r5,r5,19256
 4004ed4:	40057c81 	jmpi	40057c8 <_fwalk>

04004ed8 <_malloc_trim_r>:
 4004ed8:	defffb04 	addi	sp,sp,-20
 4004edc:	dcc00315 	stw	r19,12(sp)
 4004ee0:	04c100b4 	movhi	r19,1026
 4004ee4:	dc800215 	stw	r18,8(sp)
 4004ee8:	dc400115 	stw	r17,4(sp)
 4004eec:	dc000015 	stw	r16,0(sp)
 4004ef0:	dfc00415 	stw	ra,16(sp)
 4004ef4:	2821883a 	mov	r16,r5
 4004ef8:	9ce43904 	addi	r19,r19,-28444
 4004efc:	2025883a 	mov	r18,r4
 4004f00:	400e02c0 	call	400e02c <__malloc_lock>
 4004f04:	98800217 	ldw	r2,8(r19)
 4004f08:	14400117 	ldw	r17,4(r2)
 4004f0c:	00bfff04 	movi	r2,-4
 4004f10:	88a2703a 	and	r17,r17,r2
 4004f14:	8c21c83a 	sub	r16,r17,r16
 4004f18:	8403fbc4 	addi	r16,r16,4079
 4004f1c:	8020d33a 	srli	r16,r16,12
 4004f20:	0083ffc4 	movi	r2,4095
 4004f24:	843fffc4 	addi	r16,r16,-1
 4004f28:	8020933a 	slli	r16,r16,12
 4004f2c:	1400060e 	bge	r2,r16,4004f48 <_malloc_trim_r+0x70>
 4004f30:	000b883a 	mov	r5,zero
 4004f34:	9009883a 	mov	r4,r18
 4004f38:	4007e780 	call	4007e78 <_sbrk_r>
 4004f3c:	98c00217 	ldw	r3,8(r19)
 4004f40:	1c47883a 	add	r3,r3,r17
 4004f44:	10c00a26 	beq	r2,r3,4004f70 <_malloc_trim_r+0x98>
 4004f48:	9009883a 	mov	r4,r18
 4004f4c:	400e14c0 	call	400e14c <__malloc_unlock>
 4004f50:	0005883a 	mov	r2,zero
 4004f54:	dfc00417 	ldw	ra,16(sp)
 4004f58:	dcc00317 	ldw	r19,12(sp)
 4004f5c:	dc800217 	ldw	r18,8(sp)
 4004f60:	dc400117 	ldw	r17,4(sp)
 4004f64:	dc000017 	ldw	r16,0(sp)
 4004f68:	dec00504 	addi	sp,sp,20
 4004f6c:	f800283a 	ret
 4004f70:	040bc83a 	sub	r5,zero,r16
 4004f74:	9009883a 	mov	r4,r18
 4004f78:	4007e780 	call	4007e78 <_sbrk_r>
 4004f7c:	00ffffc4 	movi	r3,-1
 4004f80:	10c00d26 	beq	r2,r3,4004fb8 <_malloc_trim_r+0xe0>
 4004f84:	00c100b4 	movhi	r3,1026
 4004f88:	18f0fa04 	addi	r3,r3,-15384
 4004f8c:	18800017 	ldw	r2,0(r3)
 4004f90:	99000217 	ldw	r4,8(r19)
 4004f94:	8c23c83a 	sub	r17,r17,r16
 4004f98:	8c400054 	ori	r17,r17,1
 4004f9c:	1421c83a 	sub	r16,r2,r16
 4004fa0:	24400115 	stw	r17,4(r4)
 4004fa4:	9009883a 	mov	r4,r18
 4004fa8:	1c000015 	stw	r16,0(r3)
 4004fac:	400e14c0 	call	400e14c <__malloc_unlock>
 4004fb0:	00800044 	movi	r2,1
 4004fb4:	003fe706 	br	4004f54 <__alt_mem_onchip_memory2_0+0xfbfe4f54>
 4004fb8:	000b883a 	mov	r5,zero
 4004fbc:	9009883a 	mov	r4,r18
 4004fc0:	4007e780 	call	4007e78 <_sbrk_r>
 4004fc4:	99000217 	ldw	r4,8(r19)
 4004fc8:	014003c4 	movi	r5,15
 4004fcc:	1107c83a 	sub	r3,r2,r4
 4004fd0:	28ffdd0e 	bge	r5,r3,4004f48 <__alt_mem_onchip_memory2_0+0xfbfe4f48>
 4004fd4:	014100b4 	movhi	r5,1026
 4004fd8:	2969c304 	addi	r5,r5,-22772
 4004fdc:	29400017 	ldw	r5,0(r5)
 4004fe0:	18c00054 	ori	r3,r3,1
 4004fe4:	20c00115 	stw	r3,4(r4)
 4004fe8:	00c100b4 	movhi	r3,1026
 4004fec:	1145c83a 	sub	r2,r2,r5
 4004ff0:	18f0fa04 	addi	r3,r3,-15384
 4004ff4:	18800015 	stw	r2,0(r3)
 4004ff8:	003fd306 	br	4004f48 <__alt_mem_onchip_memory2_0+0xfbfe4f48>

04004ffc <_free_r>:
 4004ffc:	28004126 	beq	r5,zero,4005104 <_free_r+0x108>
 4005000:	defffd04 	addi	sp,sp,-12
 4005004:	dc400115 	stw	r17,4(sp)
 4005008:	dc000015 	stw	r16,0(sp)
 400500c:	2023883a 	mov	r17,r4
 4005010:	2821883a 	mov	r16,r5
 4005014:	dfc00215 	stw	ra,8(sp)
 4005018:	400e02c0 	call	400e02c <__malloc_lock>
 400501c:	81ffff17 	ldw	r7,-4(r16)
 4005020:	00bfff84 	movi	r2,-2
 4005024:	010100b4 	movhi	r4,1026
 4005028:	81bffe04 	addi	r6,r16,-8
 400502c:	3884703a 	and	r2,r7,r2
 4005030:	21243904 	addi	r4,r4,-28444
 4005034:	308b883a 	add	r5,r6,r2
 4005038:	2a400117 	ldw	r9,4(r5)
 400503c:	22000217 	ldw	r8,8(r4)
 4005040:	00ffff04 	movi	r3,-4
 4005044:	48c6703a 	and	r3,r9,r3
 4005048:	2a005726 	beq	r5,r8,40051a8 <_free_r+0x1ac>
 400504c:	28c00115 	stw	r3,4(r5)
 4005050:	39c0004c 	andi	r7,r7,1
 4005054:	3800091e 	bne	r7,zero,400507c <_free_r+0x80>
 4005058:	823ffe17 	ldw	r8,-8(r16)
 400505c:	22400204 	addi	r9,r4,8
 4005060:	320dc83a 	sub	r6,r6,r8
 4005064:	31c00217 	ldw	r7,8(r6)
 4005068:	1205883a 	add	r2,r2,r8
 400506c:	3a406526 	beq	r7,r9,4005204 <_free_r+0x208>
 4005070:	32000317 	ldw	r8,12(r6)
 4005074:	3a000315 	stw	r8,12(r7)
 4005078:	41c00215 	stw	r7,8(r8)
 400507c:	28cf883a 	add	r7,r5,r3
 4005080:	39c00117 	ldw	r7,4(r7)
 4005084:	39c0004c 	andi	r7,r7,1
 4005088:	38003a26 	beq	r7,zero,4005174 <_free_r+0x178>
 400508c:	10c00054 	ori	r3,r2,1
 4005090:	30c00115 	stw	r3,4(r6)
 4005094:	3087883a 	add	r3,r6,r2
 4005098:	18800015 	stw	r2,0(r3)
 400509c:	00c07fc4 	movi	r3,511
 40050a0:	18801936 	bltu	r3,r2,4005108 <_free_r+0x10c>
 40050a4:	1004d0fa 	srli	r2,r2,3
 40050a8:	01c00044 	movi	r7,1
 40050ac:	21400117 	ldw	r5,4(r4)
 40050b0:	10c00044 	addi	r3,r2,1
 40050b4:	18c7883a 	add	r3,r3,r3
 40050b8:	1005d0ba 	srai	r2,r2,2
 40050bc:	18c7883a 	add	r3,r3,r3
 40050c0:	18c7883a 	add	r3,r3,r3
 40050c4:	1907883a 	add	r3,r3,r4
 40050c8:	3884983a 	sll	r2,r7,r2
 40050cc:	19c00017 	ldw	r7,0(r3)
 40050d0:	1a3ffe04 	addi	r8,r3,-8
 40050d4:	1144b03a 	or	r2,r2,r5
 40050d8:	32000315 	stw	r8,12(r6)
 40050dc:	31c00215 	stw	r7,8(r6)
 40050e0:	20800115 	stw	r2,4(r4)
 40050e4:	19800015 	stw	r6,0(r3)
 40050e8:	39800315 	stw	r6,12(r7)
 40050ec:	8809883a 	mov	r4,r17
 40050f0:	dfc00217 	ldw	ra,8(sp)
 40050f4:	dc400117 	ldw	r17,4(sp)
 40050f8:	dc000017 	ldw	r16,0(sp)
 40050fc:	dec00304 	addi	sp,sp,12
 4005100:	400e14c1 	jmpi	400e14c <__malloc_unlock>
 4005104:	f800283a 	ret
 4005108:	100ad27a 	srli	r5,r2,9
 400510c:	00c00104 	movi	r3,4
 4005110:	19404a36 	bltu	r3,r5,400523c <_free_r+0x240>
 4005114:	100ad1ba 	srli	r5,r2,6
 4005118:	28c00e44 	addi	r3,r5,57
 400511c:	18c7883a 	add	r3,r3,r3
 4005120:	29400e04 	addi	r5,r5,56
 4005124:	18c7883a 	add	r3,r3,r3
 4005128:	18c7883a 	add	r3,r3,r3
 400512c:	1909883a 	add	r4,r3,r4
 4005130:	20c00017 	ldw	r3,0(r4)
 4005134:	01c100b4 	movhi	r7,1026
 4005138:	213ffe04 	addi	r4,r4,-8
 400513c:	39e43904 	addi	r7,r7,-28444
 4005140:	20c04426 	beq	r4,r3,4005254 <_free_r+0x258>
 4005144:	01ffff04 	movi	r7,-4
 4005148:	19400117 	ldw	r5,4(r3)
 400514c:	29ca703a 	and	r5,r5,r7
 4005150:	1140022e 	bgeu	r2,r5,400515c <_free_r+0x160>
 4005154:	18c00217 	ldw	r3,8(r3)
 4005158:	20fffb1e 	bne	r4,r3,4005148 <__alt_mem_onchip_memory2_0+0xfbfe5148>
 400515c:	19000317 	ldw	r4,12(r3)
 4005160:	31000315 	stw	r4,12(r6)
 4005164:	30c00215 	stw	r3,8(r6)
 4005168:	21800215 	stw	r6,8(r4)
 400516c:	19800315 	stw	r6,12(r3)
 4005170:	003fde06 	br	40050ec <__alt_mem_onchip_memory2_0+0xfbfe50ec>
 4005174:	29c00217 	ldw	r7,8(r5)
 4005178:	10c5883a 	add	r2,r2,r3
 400517c:	00c100b4 	movhi	r3,1026
 4005180:	18e43b04 	addi	r3,r3,-28436
 4005184:	38c03b26 	beq	r7,r3,4005274 <_free_r+0x278>
 4005188:	2a000317 	ldw	r8,12(r5)
 400518c:	11400054 	ori	r5,r2,1
 4005190:	3087883a 	add	r3,r6,r2
 4005194:	3a000315 	stw	r8,12(r7)
 4005198:	41c00215 	stw	r7,8(r8)
 400519c:	31400115 	stw	r5,4(r6)
 40051a0:	18800015 	stw	r2,0(r3)
 40051a4:	003fbd06 	br	400509c <__alt_mem_onchip_memory2_0+0xfbfe509c>
 40051a8:	39c0004c 	andi	r7,r7,1
 40051ac:	10c5883a 	add	r2,r2,r3
 40051b0:	3800071e 	bne	r7,zero,40051d0 <_free_r+0x1d4>
 40051b4:	81fffe17 	ldw	r7,-8(r16)
 40051b8:	31cdc83a 	sub	r6,r6,r7
 40051bc:	30c00317 	ldw	r3,12(r6)
 40051c0:	31400217 	ldw	r5,8(r6)
 40051c4:	11c5883a 	add	r2,r2,r7
 40051c8:	28c00315 	stw	r3,12(r5)
 40051cc:	19400215 	stw	r5,8(r3)
 40051d0:	10c00054 	ori	r3,r2,1
 40051d4:	30c00115 	stw	r3,4(r6)
 40051d8:	00c100b4 	movhi	r3,1026
 40051dc:	18e9c404 	addi	r3,r3,-22768
 40051e0:	18c00017 	ldw	r3,0(r3)
 40051e4:	21800215 	stw	r6,8(r4)
 40051e8:	10ffc036 	bltu	r2,r3,40050ec <__alt_mem_onchip_memory2_0+0xfbfe50ec>
 40051ec:	008100b4 	movhi	r2,1026
 40051f0:	10b0d804 	addi	r2,r2,-15520
 40051f4:	11400017 	ldw	r5,0(r2)
 40051f8:	8809883a 	mov	r4,r17
 40051fc:	4004ed80 	call	4004ed8 <_malloc_trim_r>
 4005200:	003fba06 	br	40050ec <__alt_mem_onchip_memory2_0+0xfbfe50ec>
 4005204:	28c9883a 	add	r4,r5,r3
 4005208:	21000117 	ldw	r4,4(r4)
 400520c:	2100004c 	andi	r4,r4,1
 4005210:	2000391e 	bne	r4,zero,40052f8 <_free_r+0x2fc>
 4005214:	29c00217 	ldw	r7,8(r5)
 4005218:	29000317 	ldw	r4,12(r5)
 400521c:	1885883a 	add	r2,r3,r2
 4005220:	10c00054 	ori	r3,r2,1
 4005224:	39000315 	stw	r4,12(r7)
 4005228:	21c00215 	stw	r7,8(r4)
 400522c:	30c00115 	stw	r3,4(r6)
 4005230:	308d883a 	add	r6,r6,r2
 4005234:	30800015 	stw	r2,0(r6)
 4005238:	003fac06 	br	40050ec <__alt_mem_onchip_memory2_0+0xfbfe50ec>
 400523c:	00c00504 	movi	r3,20
 4005240:	19401536 	bltu	r3,r5,4005298 <_free_r+0x29c>
 4005244:	28c01704 	addi	r3,r5,92
 4005248:	18c7883a 	add	r3,r3,r3
 400524c:	294016c4 	addi	r5,r5,91
 4005250:	003fb406 	br	4005124 <__alt_mem_onchip_memory2_0+0xfbfe5124>
 4005254:	280bd0ba 	srai	r5,r5,2
 4005258:	00c00044 	movi	r3,1
 400525c:	38800117 	ldw	r2,4(r7)
 4005260:	194a983a 	sll	r5,r3,r5
 4005264:	2007883a 	mov	r3,r4
 4005268:	2884b03a 	or	r2,r5,r2
 400526c:	38800115 	stw	r2,4(r7)
 4005270:	003fbb06 	br	4005160 <__alt_mem_onchip_memory2_0+0xfbfe5160>
 4005274:	21800515 	stw	r6,20(r4)
 4005278:	21800415 	stw	r6,16(r4)
 400527c:	10c00054 	ori	r3,r2,1
 4005280:	31c00315 	stw	r7,12(r6)
 4005284:	31c00215 	stw	r7,8(r6)
 4005288:	30c00115 	stw	r3,4(r6)
 400528c:	308d883a 	add	r6,r6,r2
 4005290:	30800015 	stw	r2,0(r6)
 4005294:	003f9506 	br	40050ec <__alt_mem_onchip_memory2_0+0xfbfe50ec>
 4005298:	00c01504 	movi	r3,84
 400529c:	19400536 	bltu	r3,r5,40052b4 <_free_r+0x2b8>
 40052a0:	100ad33a 	srli	r5,r2,12
 40052a4:	28c01bc4 	addi	r3,r5,111
 40052a8:	18c7883a 	add	r3,r3,r3
 40052ac:	29401b84 	addi	r5,r5,110
 40052b0:	003f9c06 	br	4005124 <__alt_mem_onchip_memory2_0+0xfbfe5124>
 40052b4:	00c05504 	movi	r3,340
 40052b8:	19400536 	bltu	r3,r5,40052d0 <_free_r+0x2d4>
 40052bc:	100ad3fa 	srli	r5,r2,15
 40052c0:	28c01e04 	addi	r3,r5,120
 40052c4:	18c7883a 	add	r3,r3,r3
 40052c8:	29401dc4 	addi	r5,r5,119
 40052cc:	003f9506 	br	4005124 <__alt_mem_onchip_memory2_0+0xfbfe5124>
 40052d0:	00c15504 	movi	r3,1364
 40052d4:	19400536 	bltu	r3,r5,40052ec <_free_r+0x2f0>
 40052d8:	100ad4ba 	srli	r5,r2,18
 40052dc:	28c01f44 	addi	r3,r5,125
 40052e0:	18c7883a 	add	r3,r3,r3
 40052e4:	29401f04 	addi	r5,r5,124
 40052e8:	003f8e06 	br	4005124 <__alt_mem_onchip_memory2_0+0xfbfe5124>
 40052ec:	00c03f84 	movi	r3,254
 40052f0:	01401f84 	movi	r5,126
 40052f4:	003f8b06 	br	4005124 <__alt_mem_onchip_memory2_0+0xfbfe5124>
 40052f8:	10c00054 	ori	r3,r2,1
 40052fc:	30c00115 	stw	r3,4(r6)
 4005300:	308d883a 	add	r6,r6,r2
 4005304:	30800015 	stw	r2,0(r6)
 4005308:	003f7806 	br	40050ec <__alt_mem_onchip_memory2_0+0xfbfe50ec>

0400530c <__sfvwrite_r>:
 400530c:	30800217 	ldw	r2,8(r6)
 4005310:	10006726 	beq	r2,zero,40054b0 <__sfvwrite_r+0x1a4>
 4005314:	28c0030b 	ldhu	r3,12(r5)
 4005318:	defff404 	addi	sp,sp,-48
 400531c:	dd400715 	stw	r21,28(sp)
 4005320:	dd000615 	stw	r20,24(sp)
 4005324:	dc000215 	stw	r16,8(sp)
 4005328:	dfc00b15 	stw	ra,44(sp)
 400532c:	df000a15 	stw	fp,40(sp)
 4005330:	ddc00915 	stw	r23,36(sp)
 4005334:	dd800815 	stw	r22,32(sp)
 4005338:	dcc00515 	stw	r19,20(sp)
 400533c:	dc800415 	stw	r18,16(sp)
 4005340:	dc400315 	stw	r17,12(sp)
 4005344:	1880020c 	andi	r2,r3,8
 4005348:	2821883a 	mov	r16,r5
 400534c:	202b883a 	mov	r21,r4
 4005350:	3029883a 	mov	r20,r6
 4005354:	10002726 	beq	r2,zero,40053f4 <__sfvwrite_r+0xe8>
 4005358:	28800417 	ldw	r2,16(r5)
 400535c:	10002526 	beq	r2,zero,40053f4 <__sfvwrite_r+0xe8>
 4005360:	1880008c 	andi	r2,r3,2
 4005364:	a4400017 	ldw	r17,0(r20)
 4005368:	10002a26 	beq	r2,zero,4005414 <__sfvwrite_r+0x108>
 400536c:	05a00034 	movhi	r22,32768
 4005370:	0027883a 	mov	r19,zero
 4005374:	0025883a 	mov	r18,zero
 4005378:	b5bf0004 	addi	r22,r22,-1024
 400537c:	980d883a 	mov	r6,r19
 4005380:	a809883a 	mov	r4,r21
 4005384:	90004626 	beq	r18,zero,40054a0 <__sfvwrite_r+0x194>
 4005388:	900f883a 	mov	r7,r18
 400538c:	b480022e 	bgeu	r22,r18,4005398 <__sfvwrite_r+0x8c>
 4005390:	01e00034 	movhi	r7,32768
 4005394:	39ff0004 	addi	r7,r7,-1024
 4005398:	80800917 	ldw	r2,36(r16)
 400539c:	81400717 	ldw	r5,28(r16)
 40053a0:	103ee83a 	callr	r2
 40053a4:	0080570e 	bge	zero,r2,4005504 <__sfvwrite_r+0x1f8>
 40053a8:	a0c00217 	ldw	r3,8(r20)
 40053ac:	98a7883a 	add	r19,r19,r2
 40053b0:	90a5c83a 	sub	r18,r18,r2
 40053b4:	1885c83a 	sub	r2,r3,r2
 40053b8:	a0800215 	stw	r2,8(r20)
 40053bc:	103fef1e 	bne	r2,zero,400537c <__alt_mem_onchip_memory2_0+0xfbfe537c>
 40053c0:	0005883a 	mov	r2,zero
 40053c4:	dfc00b17 	ldw	ra,44(sp)
 40053c8:	df000a17 	ldw	fp,40(sp)
 40053cc:	ddc00917 	ldw	r23,36(sp)
 40053d0:	dd800817 	ldw	r22,32(sp)
 40053d4:	dd400717 	ldw	r21,28(sp)
 40053d8:	dd000617 	ldw	r20,24(sp)
 40053dc:	dcc00517 	ldw	r19,20(sp)
 40053e0:	dc800417 	ldw	r18,16(sp)
 40053e4:	dc400317 	ldw	r17,12(sp)
 40053e8:	dc000217 	ldw	r16,8(sp)
 40053ec:	dec00c04 	addi	sp,sp,48
 40053f0:	f800283a 	ret
 40053f4:	800b883a 	mov	r5,r16
 40053f8:	a809883a 	mov	r4,r21
 40053fc:	4002eb40 	call	4002eb4 <__swsetup_r>
 4005400:	1000eb1e 	bne	r2,zero,40057b0 <__sfvwrite_r+0x4a4>
 4005404:	80c0030b 	ldhu	r3,12(r16)
 4005408:	a4400017 	ldw	r17,0(r20)
 400540c:	1880008c 	andi	r2,r3,2
 4005410:	103fd61e 	bne	r2,zero,400536c <__alt_mem_onchip_memory2_0+0xfbfe536c>
 4005414:	1880004c 	andi	r2,r3,1
 4005418:	10003f1e 	bne	r2,zero,4005518 <__sfvwrite_r+0x20c>
 400541c:	0039883a 	mov	fp,zero
 4005420:	0025883a 	mov	r18,zero
 4005424:	90001a26 	beq	r18,zero,4005490 <__sfvwrite_r+0x184>
 4005428:	1880800c 	andi	r2,r3,512
 400542c:	84c00217 	ldw	r19,8(r16)
 4005430:	10002126 	beq	r2,zero,40054b8 <__sfvwrite_r+0x1ac>
 4005434:	982f883a 	mov	r23,r19
 4005438:	94c09336 	bltu	r18,r19,4005688 <__sfvwrite_r+0x37c>
 400543c:	1881200c 	andi	r2,r3,1152
 4005440:	10009e1e 	bne	r2,zero,40056bc <__sfvwrite_r+0x3b0>
 4005444:	81000017 	ldw	r4,0(r16)
 4005448:	b80d883a 	mov	r6,r23
 400544c:	e00b883a 	mov	r5,fp
 4005450:	40066200 	call	4006620 <memmove>
 4005454:	80c00217 	ldw	r3,8(r16)
 4005458:	81000017 	ldw	r4,0(r16)
 400545c:	9005883a 	mov	r2,r18
 4005460:	1ce7c83a 	sub	r19,r3,r19
 4005464:	25cf883a 	add	r7,r4,r23
 4005468:	84c00215 	stw	r19,8(r16)
 400546c:	81c00015 	stw	r7,0(r16)
 4005470:	a0c00217 	ldw	r3,8(r20)
 4005474:	e0b9883a 	add	fp,fp,r2
 4005478:	90a5c83a 	sub	r18,r18,r2
 400547c:	18a7c83a 	sub	r19,r3,r2
 4005480:	a4c00215 	stw	r19,8(r20)
 4005484:	983fce26 	beq	r19,zero,40053c0 <__alt_mem_onchip_memory2_0+0xfbfe53c0>
 4005488:	80c0030b 	ldhu	r3,12(r16)
 400548c:	903fe61e 	bne	r18,zero,4005428 <__alt_mem_onchip_memory2_0+0xfbfe5428>
 4005490:	8f000017 	ldw	fp,0(r17)
 4005494:	8c800117 	ldw	r18,4(r17)
 4005498:	8c400204 	addi	r17,r17,8
 400549c:	003fe106 	br	4005424 <__alt_mem_onchip_memory2_0+0xfbfe5424>
 40054a0:	8cc00017 	ldw	r19,0(r17)
 40054a4:	8c800117 	ldw	r18,4(r17)
 40054a8:	8c400204 	addi	r17,r17,8
 40054ac:	003fb306 	br	400537c <__alt_mem_onchip_memory2_0+0xfbfe537c>
 40054b0:	0005883a 	mov	r2,zero
 40054b4:	f800283a 	ret
 40054b8:	81000017 	ldw	r4,0(r16)
 40054bc:	80800417 	ldw	r2,16(r16)
 40054c0:	11005736 	bltu	r2,r4,4005620 <__sfvwrite_r+0x314>
 40054c4:	85c00517 	ldw	r23,20(r16)
 40054c8:	95c05536 	bltu	r18,r23,4005620 <__sfvwrite_r+0x314>
 40054cc:	00a00034 	movhi	r2,32768
 40054d0:	10bfffc4 	addi	r2,r2,-1
 40054d4:	9009883a 	mov	r4,r18
 40054d8:	1480012e 	bgeu	r2,r18,40054e0 <__sfvwrite_r+0x1d4>
 40054dc:	1009883a 	mov	r4,r2
 40054e0:	b80b883a 	mov	r5,r23
 40054e4:	400ab100 	call	400ab10 <__divsi3>
 40054e8:	15cf383a 	mul	r7,r2,r23
 40054ec:	81400717 	ldw	r5,28(r16)
 40054f0:	80800917 	ldw	r2,36(r16)
 40054f4:	e00d883a 	mov	r6,fp
 40054f8:	a809883a 	mov	r4,r21
 40054fc:	103ee83a 	callr	r2
 4005500:	00bfdb16 	blt	zero,r2,4005470 <__alt_mem_onchip_memory2_0+0xfbfe5470>
 4005504:	8080030b 	ldhu	r2,12(r16)
 4005508:	10801014 	ori	r2,r2,64
 400550c:	8080030d 	sth	r2,12(r16)
 4005510:	00bfffc4 	movi	r2,-1
 4005514:	003fab06 	br	40053c4 <__alt_mem_onchip_memory2_0+0xfbfe53c4>
 4005518:	0027883a 	mov	r19,zero
 400551c:	0011883a 	mov	r8,zero
 4005520:	0039883a 	mov	fp,zero
 4005524:	0025883a 	mov	r18,zero
 4005528:	90001f26 	beq	r18,zero,40055a8 <__sfvwrite_r+0x29c>
 400552c:	40005a26 	beq	r8,zero,4005698 <__sfvwrite_r+0x38c>
 4005530:	982d883a 	mov	r22,r19
 4005534:	94c0012e 	bgeu	r18,r19,400553c <__sfvwrite_r+0x230>
 4005538:	902d883a 	mov	r22,r18
 400553c:	81000017 	ldw	r4,0(r16)
 4005540:	80800417 	ldw	r2,16(r16)
 4005544:	b02f883a 	mov	r23,r22
 4005548:	81c00517 	ldw	r7,20(r16)
 400554c:	1100032e 	bgeu	r2,r4,400555c <__sfvwrite_r+0x250>
 4005550:	80c00217 	ldw	r3,8(r16)
 4005554:	38c7883a 	add	r3,r7,r3
 4005558:	1d801816 	blt	r3,r22,40055bc <__sfvwrite_r+0x2b0>
 400555c:	b1c03e16 	blt	r22,r7,4005658 <__sfvwrite_r+0x34c>
 4005560:	80800917 	ldw	r2,36(r16)
 4005564:	81400717 	ldw	r5,28(r16)
 4005568:	e00d883a 	mov	r6,fp
 400556c:	da000115 	stw	r8,4(sp)
 4005570:	a809883a 	mov	r4,r21
 4005574:	103ee83a 	callr	r2
 4005578:	102f883a 	mov	r23,r2
 400557c:	da000117 	ldw	r8,4(sp)
 4005580:	00bfe00e 	bge	zero,r2,4005504 <__alt_mem_onchip_memory2_0+0xfbfe5504>
 4005584:	9de7c83a 	sub	r19,r19,r23
 4005588:	98001f26 	beq	r19,zero,4005608 <__sfvwrite_r+0x2fc>
 400558c:	a0800217 	ldw	r2,8(r20)
 4005590:	e5f9883a 	add	fp,fp,r23
 4005594:	95e5c83a 	sub	r18,r18,r23
 4005598:	15efc83a 	sub	r23,r2,r23
 400559c:	a5c00215 	stw	r23,8(r20)
 40055a0:	b83f8726 	beq	r23,zero,40053c0 <__alt_mem_onchip_memory2_0+0xfbfe53c0>
 40055a4:	903fe11e 	bne	r18,zero,400552c <__alt_mem_onchip_memory2_0+0xfbfe552c>
 40055a8:	8f000017 	ldw	fp,0(r17)
 40055ac:	8c800117 	ldw	r18,4(r17)
 40055b0:	0011883a 	mov	r8,zero
 40055b4:	8c400204 	addi	r17,r17,8
 40055b8:	003fdb06 	br	4005528 <__alt_mem_onchip_memory2_0+0xfbfe5528>
 40055bc:	180d883a 	mov	r6,r3
 40055c0:	e00b883a 	mov	r5,fp
 40055c4:	da000115 	stw	r8,4(sp)
 40055c8:	d8c00015 	stw	r3,0(sp)
 40055cc:	40066200 	call	4006620 <memmove>
 40055d0:	d8c00017 	ldw	r3,0(sp)
 40055d4:	80800017 	ldw	r2,0(r16)
 40055d8:	800b883a 	mov	r5,r16
 40055dc:	a809883a 	mov	r4,r21
 40055e0:	10c5883a 	add	r2,r2,r3
 40055e4:	80800015 	stw	r2,0(r16)
 40055e8:	d8c00015 	stw	r3,0(sp)
 40055ec:	4004aac0 	call	4004aac <_fflush_r>
 40055f0:	d8c00017 	ldw	r3,0(sp)
 40055f4:	da000117 	ldw	r8,4(sp)
 40055f8:	103fc21e 	bne	r2,zero,4005504 <__alt_mem_onchip_memory2_0+0xfbfe5504>
 40055fc:	182f883a 	mov	r23,r3
 4005600:	9de7c83a 	sub	r19,r19,r23
 4005604:	983fe11e 	bne	r19,zero,400558c <__alt_mem_onchip_memory2_0+0xfbfe558c>
 4005608:	800b883a 	mov	r5,r16
 400560c:	a809883a 	mov	r4,r21
 4005610:	4004aac0 	call	4004aac <_fflush_r>
 4005614:	103fbb1e 	bne	r2,zero,4005504 <__alt_mem_onchip_memory2_0+0xfbfe5504>
 4005618:	0011883a 	mov	r8,zero
 400561c:	003fdb06 	br	400558c <__alt_mem_onchip_memory2_0+0xfbfe558c>
 4005620:	94c0012e 	bgeu	r18,r19,4005628 <__sfvwrite_r+0x31c>
 4005624:	9027883a 	mov	r19,r18
 4005628:	980d883a 	mov	r6,r19
 400562c:	e00b883a 	mov	r5,fp
 4005630:	40066200 	call	4006620 <memmove>
 4005634:	80800217 	ldw	r2,8(r16)
 4005638:	80c00017 	ldw	r3,0(r16)
 400563c:	14c5c83a 	sub	r2,r2,r19
 4005640:	1cc7883a 	add	r3,r3,r19
 4005644:	80800215 	stw	r2,8(r16)
 4005648:	80c00015 	stw	r3,0(r16)
 400564c:	10004326 	beq	r2,zero,400575c <__sfvwrite_r+0x450>
 4005650:	9805883a 	mov	r2,r19
 4005654:	003f8606 	br	4005470 <__alt_mem_onchip_memory2_0+0xfbfe5470>
 4005658:	b00d883a 	mov	r6,r22
 400565c:	e00b883a 	mov	r5,fp
 4005660:	da000115 	stw	r8,4(sp)
 4005664:	40066200 	call	4006620 <memmove>
 4005668:	80800217 	ldw	r2,8(r16)
 400566c:	80c00017 	ldw	r3,0(r16)
 4005670:	da000117 	ldw	r8,4(sp)
 4005674:	1585c83a 	sub	r2,r2,r22
 4005678:	1dad883a 	add	r22,r3,r22
 400567c:	80800215 	stw	r2,8(r16)
 4005680:	85800015 	stw	r22,0(r16)
 4005684:	003fbf06 	br	4005584 <__alt_mem_onchip_memory2_0+0xfbfe5584>
 4005688:	81000017 	ldw	r4,0(r16)
 400568c:	9027883a 	mov	r19,r18
 4005690:	902f883a 	mov	r23,r18
 4005694:	003f6c06 	br	4005448 <__alt_mem_onchip_memory2_0+0xfbfe5448>
 4005698:	900d883a 	mov	r6,r18
 400569c:	01400284 	movi	r5,10
 40056a0:	e009883a 	mov	r4,fp
 40056a4:	40063f40 	call	40063f4 <memchr>
 40056a8:	10003e26 	beq	r2,zero,40057a4 <__sfvwrite_r+0x498>
 40056ac:	10800044 	addi	r2,r2,1
 40056b0:	1727c83a 	sub	r19,r2,fp
 40056b4:	02000044 	movi	r8,1
 40056b8:	003f9d06 	br	4005530 <__alt_mem_onchip_memory2_0+0xfbfe5530>
 40056bc:	80800517 	ldw	r2,20(r16)
 40056c0:	81400417 	ldw	r5,16(r16)
 40056c4:	81c00017 	ldw	r7,0(r16)
 40056c8:	10a7883a 	add	r19,r2,r2
 40056cc:	9885883a 	add	r2,r19,r2
 40056d0:	1026d7fa 	srli	r19,r2,31
 40056d4:	396dc83a 	sub	r22,r7,r5
 40056d8:	b1000044 	addi	r4,r22,1
 40056dc:	9885883a 	add	r2,r19,r2
 40056e0:	1027d07a 	srai	r19,r2,1
 40056e4:	2485883a 	add	r2,r4,r18
 40056e8:	980d883a 	mov	r6,r19
 40056ec:	9880022e 	bgeu	r19,r2,40056f8 <__sfvwrite_r+0x3ec>
 40056f0:	1027883a 	mov	r19,r2
 40056f4:	100d883a 	mov	r6,r2
 40056f8:	18c1000c 	andi	r3,r3,1024
 40056fc:	18001c26 	beq	r3,zero,4005770 <__sfvwrite_r+0x464>
 4005700:	300b883a 	mov	r5,r6
 4005704:	a809883a 	mov	r4,r21
 4005708:	4005be80 	call	4005be8 <_malloc_r>
 400570c:	102f883a 	mov	r23,r2
 4005710:	10002926 	beq	r2,zero,40057b8 <__sfvwrite_r+0x4ac>
 4005714:	81400417 	ldw	r5,16(r16)
 4005718:	b00d883a 	mov	r6,r22
 400571c:	1009883a 	mov	r4,r2
 4005720:	40064d80 	call	40064d8 <memcpy>
 4005724:	8080030b 	ldhu	r2,12(r16)
 4005728:	00fedfc4 	movi	r3,-1153
 400572c:	10c4703a 	and	r2,r2,r3
 4005730:	10802014 	ori	r2,r2,128
 4005734:	8080030d 	sth	r2,12(r16)
 4005738:	bd89883a 	add	r4,r23,r22
 400573c:	9d8fc83a 	sub	r7,r19,r22
 4005740:	85c00415 	stw	r23,16(r16)
 4005744:	84c00515 	stw	r19,20(r16)
 4005748:	81000015 	stw	r4,0(r16)
 400574c:	9027883a 	mov	r19,r18
 4005750:	81c00215 	stw	r7,8(r16)
 4005754:	902f883a 	mov	r23,r18
 4005758:	003f3b06 	br	4005448 <__alt_mem_onchip_memory2_0+0xfbfe5448>
 400575c:	800b883a 	mov	r5,r16
 4005760:	a809883a 	mov	r4,r21
 4005764:	4004aac0 	call	4004aac <_fflush_r>
 4005768:	103fb926 	beq	r2,zero,4005650 <__alt_mem_onchip_memory2_0+0xfbfe5650>
 400576c:	003f6506 	br	4005504 <__alt_mem_onchip_memory2_0+0xfbfe5504>
 4005770:	a809883a 	mov	r4,r21
 4005774:	40078a00 	call	40078a0 <_realloc_r>
 4005778:	102f883a 	mov	r23,r2
 400577c:	103fee1e 	bne	r2,zero,4005738 <__alt_mem_onchip_memory2_0+0xfbfe5738>
 4005780:	81400417 	ldw	r5,16(r16)
 4005784:	a809883a 	mov	r4,r21
 4005788:	4004ffc0 	call	4004ffc <_free_r>
 400578c:	8080030b 	ldhu	r2,12(r16)
 4005790:	00ffdfc4 	movi	r3,-129
 4005794:	1884703a 	and	r2,r3,r2
 4005798:	00c00304 	movi	r3,12
 400579c:	a8c00015 	stw	r3,0(r21)
 40057a0:	003f5906 	br	4005508 <__alt_mem_onchip_memory2_0+0xfbfe5508>
 40057a4:	94c00044 	addi	r19,r18,1
 40057a8:	02000044 	movi	r8,1
 40057ac:	003f6006 	br	4005530 <__alt_mem_onchip_memory2_0+0xfbfe5530>
 40057b0:	00bfffc4 	movi	r2,-1
 40057b4:	003f0306 	br	40053c4 <__alt_mem_onchip_memory2_0+0xfbfe53c4>
 40057b8:	00800304 	movi	r2,12
 40057bc:	a8800015 	stw	r2,0(r21)
 40057c0:	8080030b 	ldhu	r2,12(r16)
 40057c4:	003f5006 	br	4005508 <__alt_mem_onchip_memory2_0+0xfbfe5508>

040057c8 <_fwalk>:
 40057c8:	defff704 	addi	sp,sp,-36
 40057cc:	dd000415 	stw	r20,16(sp)
 40057d0:	dfc00815 	stw	ra,32(sp)
 40057d4:	ddc00715 	stw	r23,28(sp)
 40057d8:	dd800615 	stw	r22,24(sp)
 40057dc:	dd400515 	stw	r21,20(sp)
 40057e0:	dcc00315 	stw	r19,12(sp)
 40057e4:	dc800215 	stw	r18,8(sp)
 40057e8:	dc400115 	stw	r17,4(sp)
 40057ec:	dc000015 	stw	r16,0(sp)
 40057f0:	2500b804 	addi	r20,r4,736
 40057f4:	a0002326 	beq	r20,zero,4005884 <_fwalk+0xbc>
 40057f8:	282b883a 	mov	r21,r5
 40057fc:	002f883a 	mov	r23,zero
 4005800:	05800044 	movi	r22,1
 4005804:	04ffffc4 	movi	r19,-1
 4005808:	a4400117 	ldw	r17,4(r20)
 400580c:	a4800217 	ldw	r18,8(r20)
 4005810:	8c7fffc4 	addi	r17,r17,-1
 4005814:	88000d16 	blt	r17,zero,400584c <_fwalk+0x84>
 4005818:	94000304 	addi	r16,r18,12
 400581c:	94800384 	addi	r18,r18,14
 4005820:	8080000b 	ldhu	r2,0(r16)
 4005824:	8c7fffc4 	addi	r17,r17,-1
 4005828:	813ffd04 	addi	r4,r16,-12
 400582c:	b080042e 	bgeu	r22,r2,4005840 <_fwalk+0x78>
 4005830:	9080000f 	ldh	r2,0(r18)
 4005834:	14c00226 	beq	r2,r19,4005840 <_fwalk+0x78>
 4005838:	a83ee83a 	callr	r21
 400583c:	b8aeb03a 	or	r23,r23,r2
 4005840:	84001a04 	addi	r16,r16,104
 4005844:	94801a04 	addi	r18,r18,104
 4005848:	8cfff51e 	bne	r17,r19,4005820 <__alt_mem_onchip_memory2_0+0xfbfe5820>
 400584c:	a5000017 	ldw	r20,0(r20)
 4005850:	a03fed1e 	bne	r20,zero,4005808 <__alt_mem_onchip_memory2_0+0xfbfe5808>
 4005854:	b805883a 	mov	r2,r23
 4005858:	dfc00817 	ldw	ra,32(sp)
 400585c:	ddc00717 	ldw	r23,28(sp)
 4005860:	dd800617 	ldw	r22,24(sp)
 4005864:	dd400517 	ldw	r21,20(sp)
 4005868:	dd000417 	ldw	r20,16(sp)
 400586c:	dcc00317 	ldw	r19,12(sp)
 4005870:	dc800217 	ldw	r18,8(sp)
 4005874:	dc400117 	ldw	r17,4(sp)
 4005878:	dc000017 	ldw	r16,0(sp)
 400587c:	dec00904 	addi	sp,sp,36
 4005880:	f800283a 	ret
 4005884:	002f883a 	mov	r23,zero
 4005888:	003ff206 	br	4005854 <__alt_mem_onchip_memory2_0+0xfbfe5854>

0400588c <_fwalk_reent>:
 400588c:	defff704 	addi	sp,sp,-36
 4005890:	dd000415 	stw	r20,16(sp)
 4005894:	dfc00815 	stw	ra,32(sp)
 4005898:	ddc00715 	stw	r23,28(sp)
 400589c:	dd800615 	stw	r22,24(sp)
 40058a0:	dd400515 	stw	r21,20(sp)
 40058a4:	dcc00315 	stw	r19,12(sp)
 40058a8:	dc800215 	stw	r18,8(sp)
 40058ac:	dc400115 	stw	r17,4(sp)
 40058b0:	dc000015 	stw	r16,0(sp)
 40058b4:	2500b804 	addi	r20,r4,736
 40058b8:	a0002326 	beq	r20,zero,4005948 <_fwalk_reent+0xbc>
 40058bc:	282b883a 	mov	r21,r5
 40058c0:	2027883a 	mov	r19,r4
 40058c4:	002f883a 	mov	r23,zero
 40058c8:	05800044 	movi	r22,1
 40058cc:	04bfffc4 	movi	r18,-1
 40058d0:	a4400117 	ldw	r17,4(r20)
 40058d4:	a4000217 	ldw	r16,8(r20)
 40058d8:	8c7fffc4 	addi	r17,r17,-1
 40058dc:	88000c16 	blt	r17,zero,4005910 <_fwalk_reent+0x84>
 40058e0:	84000304 	addi	r16,r16,12
 40058e4:	8080000b 	ldhu	r2,0(r16)
 40058e8:	8c7fffc4 	addi	r17,r17,-1
 40058ec:	817ffd04 	addi	r5,r16,-12
 40058f0:	b080052e 	bgeu	r22,r2,4005908 <_fwalk_reent+0x7c>
 40058f4:	8080008f 	ldh	r2,2(r16)
 40058f8:	9809883a 	mov	r4,r19
 40058fc:	14800226 	beq	r2,r18,4005908 <_fwalk_reent+0x7c>
 4005900:	a83ee83a 	callr	r21
 4005904:	b8aeb03a 	or	r23,r23,r2
 4005908:	84001a04 	addi	r16,r16,104
 400590c:	8cbff51e 	bne	r17,r18,40058e4 <__alt_mem_onchip_memory2_0+0xfbfe58e4>
 4005910:	a5000017 	ldw	r20,0(r20)
 4005914:	a03fee1e 	bne	r20,zero,40058d0 <__alt_mem_onchip_memory2_0+0xfbfe58d0>
 4005918:	b805883a 	mov	r2,r23
 400591c:	dfc00817 	ldw	ra,32(sp)
 4005920:	ddc00717 	ldw	r23,28(sp)
 4005924:	dd800617 	ldw	r22,24(sp)
 4005928:	dd400517 	ldw	r21,20(sp)
 400592c:	dd000417 	ldw	r20,16(sp)
 4005930:	dcc00317 	ldw	r19,12(sp)
 4005934:	dc800217 	ldw	r18,8(sp)
 4005938:	dc400117 	ldw	r17,4(sp)
 400593c:	dc000017 	ldw	r16,0(sp)
 4005940:	dec00904 	addi	sp,sp,36
 4005944:	f800283a 	ret
 4005948:	002f883a 	mov	r23,zero
 400594c:	003ff206 	br	4005918 <__alt_mem_onchip_memory2_0+0xfbfe5918>

04005950 <_setlocale_r>:
 4005950:	30001b26 	beq	r6,zero,40059c0 <_setlocale_r+0x70>
 4005954:	014100b4 	movhi	r5,1026
 4005958:	defffe04 	addi	sp,sp,-8
 400595c:	29622804 	addi	r5,r5,-30560
 4005960:	3009883a 	mov	r4,r6
 4005964:	dc000015 	stw	r16,0(sp)
 4005968:	dfc00115 	stw	ra,4(sp)
 400596c:	3021883a 	mov	r16,r6
 4005970:	40080080 	call	4008008 <strcmp>
 4005974:	1000061e 	bne	r2,zero,4005990 <_setlocale_r+0x40>
 4005978:	008100b4 	movhi	r2,1026
 400597c:	10a22704 	addi	r2,r2,-30564
 4005980:	dfc00117 	ldw	ra,4(sp)
 4005984:	dc000017 	ldw	r16,0(sp)
 4005988:	dec00204 	addi	sp,sp,8
 400598c:	f800283a 	ret
 4005990:	014100b4 	movhi	r5,1026
 4005994:	29622704 	addi	r5,r5,-30564
 4005998:	8009883a 	mov	r4,r16
 400599c:	40080080 	call	4008008 <strcmp>
 40059a0:	103ff526 	beq	r2,zero,4005978 <__alt_mem_onchip_memory2_0+0xfbfe5978>
 40059a4:	014100b4 	movhi	r5,1026
 40059a8:	29621204 	addi	r5,r5,-30648
 40059ac:	8009883a 	mov	r4,r16
 40059b0:	40080080 	call	4008008 <strcmp>
 40059b4:	103ff026 	beq	r2,zero,4005978 <__alt_mem_onchip_memory2_0+0xfbfe5978>
 40059b8:	0005883a 	mov	r2,zero
 40059bc:	003ff006 	br	4005980 <__alt_mem_onchip_memory2_0+0xfbfe5980>
 40059c0:	008100b4 	movhi	r2,1026
 40059c4:	10a22704 	addi	r2,r2,-30564
 40059c8:	f800283a 	ret

040059cc <__locale_charset>:
 40059cc:	008100b4 	movhi	r2,1026
 40059d0:	10a42304 	addi	r2,r2,-28532
 40059d4:	f800283a 	ret

040059d8 <__locale_mb_cur_max>:
 40059d8:	008100b4 	movhi	r2,1026
 40059dc:	10a9c204 	addi	r2,r2,-22776
 40059e0:	10800017 	ldw	r2,0(r2)
 40059e4:	f800283a 	ret

040059e8 <__locale_msgcharset>:
 40059e8:	008100b4 	movhi	r2,1026
 40059ec:	10a41b04 	addi	r2,r2,-28564
 40059f0:	f800283a 	ret

040059f4 <__locale_cjk_lang>:
 40059f4:	0005883a 	mov	r2,zero
 40059f8:	f800283a 	ret

040059fc <_localeconv_r>:
 40059fc:	008100b4 	movhi	r2,1026
 4005a00:	10a42b04 	addi	r2,r2,-28500
 4005a04:	f800283a 	ret

04005a08 <setlocale>:
 4005a08:	008100b4 	movhi	r2,1026
 4005a0c:	10a9c104 	addi	r2,r2,-22780
 4005a10:	280d883a 	mov	r6,r5
 4005a14:	200b883a 	mov	r5,r4
 4005a18:	11000017 	ldw	r4,0(r2)
 4005a1c:	40059501 	jmpi	4005950 <_setlocale_r>

04005a20 <localeconv>:
 4005a20:	008100b4 	movhi	r2,1026
 4005a24:	10a42b04 	addi	r2,r2,-28500
 4005a28:	f800283a 	ret

04005a2c <__smakebuf_r>:
 4005a2c:	2880030b 	ldhu	r2,12(r5)
 4005a30:	10c0008c 	andi	r3,r2,2
 4005a34:	1800411e 	bne	r3,zero,4005b3c <__smakebuf_r+0x110>
 4005a38:	deffec04 	addi	sp,sp,-80
 4005a3c:	dc000f15 	stw	r16,60(sp)
 4005a40:	2821883a 	mov	r16,r5
 4005a44:	2940038f 	ldh	r5,14(r5)
 4005a48:	dc401015 	stw	r17,64(sp)
 4005a4c:	dfc01315 	stw	ra,76(sp)
 4005a50:	dcc01215 	stw	r19,72(sp)
 4005a54:	dc801115 	stw	r18,68(sp)
 4005a58:	2023883a 	mov	r17,r4
 4005a5c:	28001c16 	blt	r5,zero,4005ad0 <__smakebuf_r+0xa4>
 4005a60:	d80d883a 	mov	r6,sp
 4005a64:	4009bb00 	call	4009bb0 <_fstat_r>
 4005a68:	10001816 	blt	r2,zero,4005acc <__smakebuf_r+0xa0>
 4005a6c:	d8800117 	ldw	r2,4(sp)
 4005a70:	00e00014 	movui	r3,32768
 4005a74:	10bc000c 	andi	r2,r2,61440
 4005a78:	14c80020 	cmpeqi	r19,r2,8192
 4005a7c:	10c03726 	beq	r2,r3,4005b5c <__smakebuf_r+0x130>
 4005a80:	80c0030b 	ldhu	r3,12(r16)
 4005a84:	18c20014 	ori	r3,r3,2048
 4005a88:	80c0030d 	sth	r3,12(r16)
 4005a8c:	00c80004 	movi	r3,8192
 4005a90:	10c0521e 	bne	r2,r3,4005bdc <__smakebuf_r+0x1b0>
 4005a94:	8140038f 	ldh	r5,14(r16)
 4005a98:	8809883a 	mov	r4,r17
 4005a9c:	4009c0c0 	call	4009c0c <_isatty_r>
 4005aa0:	10004c26 	beq	r2,zero,4005bd4 <__smakebuf_r+0x1a8>
 4005aa4:	8080030b 	ldhu	r2,12(r16)
 4005aa8:	80c010c4 	addi	r3,r16,67
 4005aac:	80c00015 	stw	r3,0(r16)
 4005ab0:	10800054 	ori	r2,r2,1
 4005ab4:	8080030d 	sth	r2,12(r16)
 4005ab8:	00800044 	movi	r2,1
 4005abc:	80c00415 	stw	r3,16(r16)
 4005ac0:	80800515 	stw	r2,20(r16)
 4005ac4:	04810004 	movi	r18,1024
 4005ac8:	00000706 	br	4005ae8 <__smakebuf_r+0xbc>
 4005acc:	8080030b 	ldhu	r2,12(r16)
 4005ad0:	10c0200c 	andi	r3,r2,128
 4005ad4:	18001f1e 	bne	r3,zero,4005b54 <__smakebuf_r+0x128>
 4005ad8:	04810004 	movi	r18,1024
 4005adc:	10820014 	ori	r2,r2,2048
 4005ae0:	8080030d 	sth	r2,12(r16)
 4005ae4:	0027883a 	mov	r19,zero
 4005ae8:	900b883a 	mov	r5,r18
 4005aec:	8809883a 	mov	r4,r17
 4005af0:	4005be80 	call	4005be8 <_malloc_r>
 4005af4:	10002c26 	beq	r2,zero,4005ba8 <__smakebuf_r+0x17c>
 4005af8:	80c0030b 	ldhu	r3,12(r16)
 4005afc:	01010034 	movhi	r4,1024
 4005b00:	2112d004 	addi	r4,r4,19264
 4005b04:	89000f15 	stw	r4,60(r17)
 4005b08:	18c02014 	ori	r3,r3,128
 4005b0c:	80c0030d 	sth	r3,12(r16)
 4005b10:	80800015 	stw	r2,0(r16)
 4005b14:	80800415 	stw	r2,16(r16)
 4005b18:	84800515 	stw	r18,20(r16)
 4005b1c:	98001a1e 	bne	r19,zero,4005b88 <__smakebuf_r+0x15c>
 4005b20:	dfc01317 	ldw	ra,76(sp)
 4005b24:	dcc01217 	ldw	r19,72(sp)
 4005b28:	dc801117 	ldw	r18,68(sp)
 4005b2c:	dc401017 	ldw	r17,64(sp)
 4005b30:	dc000f17 	ldw	r16,60(sp)
 4005b34:	dec01404 	addi	sp,sp,80
 4005b38:	f800283a 	ret
 4005b3c:	288010c4 	addi	r2,r5,67
 4005b40:	28800015 	stw	r2,0(r5)
 4005b44:	28800415 	stw	r2,16(r5)
 4005b48:	00800044 	movi	r2,1
 4005b4c:	28800515 	stw	r2,20(r5)
 4005b50:	f800283a 	ret
 4005b54:	04801004 	movi	r18,64
 4005b58:	003fe006 	br	4005adc <__alt_mem_onchip_memory2_0+0xfbfe5adc>
 4005b5c:	81000a17 	ldw	r4,40(r16)
 4005b60:	00c10034 	movhi	r3,1024
 4005b64:	18dfe904 	addi	r3,r3,32676
 4005b68:	20ffc51e 	bne	r4,r3,4005a80 <__alt_mem_onchip_memory2_0+0xfbfe5a80>
 4005b6c:	8080030b 	ldhu	r2,12(r16)
 4005b70:	04810004 	movi	r18,1024
 4005b74:	84801315 	stw	r18,76(r16)
 4005b78:	1484b03a 	or	r2,r2,r18
 4005b7c:	8080030d 	sth	r2,12(r16)
 4005b80:	0027883a 	mov	r19,zero
 4005b84:	003fd806 	br	4005ae8 <__alt_mem_onchip_memory2_0+0xfbfe5ae8>
 4005b88:	8140038f 	ldh	r5,14(r16)
 4005b8c:	8809883a 	mov	r4,r17
 4005b90:	4009c0c0 	call	4009c0c <_isatty_r>
 4005b94:	103fe226 	beq	r2,zero,4005b20 <__alt_mem_onchip_memory2_0+0xfbfe5b20>
 4005b98:	8080030b 	ldhu	r2,12(r16)
 4005b9c:	10800054 	ori	r2,r2,1
 4005ba0:	8080030d 	sth	r2,12(r16)
 4005ba4:	003fde06 	br	4005b20 <__alt_mem_onchip_memory2_0+0xfbfe5b20>
 4005ba8:	8080030b 	ldhu	r2,12(r16)
 4005bac:	10c0800c 	andi	r3,r2,512
 4005bb0:	183fdb1e 	bne	r3,zero,4005b20 <__alt_mem_onchip_memory2_0+0xfbfe5b20>
 4005bb4:	10800094 	ori	r2,r2,2
 4005bb8:	80c010c4 	addi	r3,r16,67
 4005bbc:	8080030d 	sth	r2,12(r16)
 4005bc0:	00800044 	movi	r2,1
 4005bc4:	80c00015 	stw	r3,0(r16)
 4005bc8:	80c00415 	stw	r3,16(r16)
 4005bcc:	80800515 	stw	r2,20(r16)
 4005bd0:	003fd306 	br	4005b20 <__alt_mem_onchip_memory2_0+0xfbfe5b20>
 4005bd4:	04810004 	movi	r18,1024
 4005bd8:	003fc306 	br	4005ae8 <__alt_mem_onchip_memory2_0+0xfbfe5ae8>
 4005bdc:	0027883a 	mov	r19,zero
 4005be0:	04810004 	movi	r18,1024
 4005be4:	003fc006 	br	4005ae8 <__alt_mem_onchip_memory2_0+0xfbfe5ae8>

04005be8 <_malloc_r>:
 4005be8:	defff504 	addi	sp,sp,-44
 4005bec:	dc800315 	stw	r18,12(sp)
 4005bf0:	dfc00a15 	stw	ra,40(sp)
 4005bf4:	df000915 	stw	fp,36(sp)
 4005bf8:	ddc00815 	stw	r23,32(sp)
 4005bfc:	dd800715 	stw	r22,28(sp)
 4005c00:	dd400615 	stw	r21,24(sp)
 4005c04:	dd000515 	stw	r20,20(sp)
 4005c08:	dcc00415 	stw	r19,16(sp)
 4005c0c:	dc400215 	stw	r17,8(sp)
 4005c10:	dc000115 	stw	r16,4(sp)
 4005c14:	288002c4 	addi	r2,r5,11
 4005c18:	00c00584 	movi	r3,22
 4005c1c:	2025883a 	mov	r18,r4
 4005c20:	18807f2e 	bgeu	r3,r2,4005e20 <_malloc_r+0x238>
 4005c24:	047ffe04 	movi	r17,-8
 4005c28:	1462703a 	and	r17,r2,r17
 4005c2c:	8800a316 	blt	r17,zero,4005ebc <_malloc_r+0x2d4>
 4005c30:	8940a236 	bltu	r17,r5,4005ebc <_malloc_r+0x2d4>
 4005c34:	400e02c0 	call	400e02c <__malloc_lock>
 4005c38:	00807dc4 	movi	r2,503
 4005c3c:	1441e92e 	bgeu	r2,r17,40063e4 <_malloc_r+0x7fc>
 4005c40:	8804d27a 	srli	r2,r17,9
 4005c44:	1000a126 	beq	r2,zero,4005ecc <_malloc_r+0x2e4>
 4005c48:	00c00104 	movi	r3,4
 4005c4c:	18811e36 	bltu	r3,r2,40060c8 <_malloc_r+0x4e0>
 4005c50:	8804d1ba 	srli	r2,r17,6
 4005c54:	12000e44 	addi	r8,r2,57
 4005c58:	11c00e04 	addi	r7,r2,56
 4005c5c:	4209883a 	add	r4,r8,r8
 4005c60:	04c100b4 	movhi	r19,1026
 4005c64:	2109883a 	add	r4,r4,r4
 4005c68:	9ce43904 	addi	r19,r19,-28444
 4005c6c:	2109883a 	add	r4,r4,r4
 4005c70:	9909883a 	add	r4,r19,r4
 4005c74:	24000117 	ldw	r16,4(r4)
 4005c78:	213ffe04 	addi	r4,r4,-8
 4005c7c:	24009726 	beq	r4,r16,4005edc <_malloc_r+0x2f4>
 4005c80:	80800117 	ldw	r2,4(r16)
 4005c84:	01bfff04 	movi	r6,-4
 4005c88:	014003c4 	movi	r5,15
 4005c8c:	1184703a 	and	r2,r2,r6
 4005c90:	1447c83a 	sub	r3,r2,r17
 4005c94:	28c00716 	blt	r5,r3,4005cb4 <_malloc_r+0xcc>
 4005c98:	1800920e 	bge	r3,zero,4005ee4 <_malloc_r+0x2fc>
 4005c9c:	84000317 	ldw	r16,12(r16)
 4005ca0:	24008e26 	beq	r4,r16,4005edc <_malloc_r+0x2f4>
 4005ca4:	80800117 	ldw	r2,4(r16)
 4005ca8:	1184703a 	and	r2,r2,r6
 4005cac:	1447c83a 	sub	r3,r2,r17
 4005cb0:	28fff90e 	bge	r5,r3,4005c98 <__alt_mem_onchip_memory2_0+0xfbfe5c98>
 4005cb4:	3809883a 	mov	r4,r7
 4005cb8:	018100b4 	movhi	r6,1026
 4005cbc:	9c000417 	ldw	r16,16(r19)
 4005cc0:	31a43904 	addi	r6,r6,-28444
 4005cc4:	32000204 	addi	r8,r6,8
 4005cc8:	82013426 	beq	r16,r8,400619c <_malloc_r+0x5b4>
 4005ccc:	80c00117 	ldw	r3,4(r16)
 4005cd0:	00bfff04 	movi	r2,-4
 4005cd4:	188e703a 	and	r7,r3,r2
 4005cd8:	3c45c83a 	sub	r2,r7,r17
 4005cdc:	00c003c4 	movi	r3,15
 4005ce0:	18811f16 	blt	r3,r2,4006160 <_malloc_r+0x578>
 4005ce4:	32000515 	stw	r8,20(r6)
 4005ce8:	32000415 	stw	r8,16(r6)
 4005cec:	10007f0e 	bge	r2,zero,4005eec <_malloc_r+0x304>
 4005cf0:	00807fc4 	movi	r2,511
 4005cf4:	11c0fd36 	bltu	r2,r7,40060ec <_malloc_r+0x504>
 4005cf8:	3806d0fa 	srli	r3,r7,3
 4005cfc:	01c00044 	movi	r7,1
 4005d00:	30800117 	ldw	r2,4(r6)
 4005d04:	19400044 	addi	r5,r3,1
 4005d08:	294b883a 	add	r5,r5,r5
 4005d0c:	1807d0ba 	srai	r3,r3,2
 4005d10:	294b883a 	add	r5,r5,r5
 4005d14:	294b883a 	add	r5,r5,r5
 4005d18:	298b883a 	add	r5,r5,r6
 4005d1c:	38c6983a 	sll	r3,r7,r3
 4005d20:	29c00017 	ldw	r7,0(r5)
 4005d24:	2a7ffe04 	addi	r9,r5,-8
 4005d28:	1886b03a 	or	r3,r3,r2
 4005d2c:	82400315 	stw	r9,12(r16)
 4005d30:	81c00215 	stw	r7,8(r16)
 4005d34:	30c00115 	stw	r3,4(r6)
 4005d38:	2c000015 	stw	r16,0(r5)
 4005d3c:	3c000315 	stw	r16,12(r7)
 4005d40:	2005d0ba 	srai	r2,r4,2
 4005d44:	01400044 	movi	r5,1
 4005d48:	288a983a 	sll	r5,r5,r2
 4005d4c:	19406f36 	bltu	r3,r5,4005f0c <_malloc_r+0x324>
 4005d50:	28c4703a 	and	r2,r5,r3
 4005d54:	10000a1e 	bne	r2,zero,4005d80 <_malloc_r+0x198>
 4005d58:	00bfff04 	movi	r2,-4
 4005d5c:	294b883a 	add	r5,r5,r5
 4005d60:	2088703a 	and	r4,r4,r2
 4005d64:	28c4703a 	and	r2,r5,r3
 4005d68:	21000104 	addi	r4,r4,4
 4005d6c:	1000041e 	bne	r2,zero,4005d80 <_malloc_r+0x198>
 4005d70:	294b883a 	add	r5,r5,r5
 4005d74:	28c4703a 	and	r2,r5,r3
 4005d78:	21000104 	addi	r4,r4,4
 4005d7c:	103ffc26 	beq	r2,zero,4005d70 <__alt_mem_onchip_memory2_0+0xfbfe5d70>
 4005d80:	02bfff04 	movi	r10,-4
 4005d84:	024003c4 	movi	r9,15
 4005d88:	21800044 	addi	r6,r4,1
 4005d8c:	318d883a 	add	r6,r6,r6
 4005d90:	318d883a 	add	r6,r6,r6
 4005d94:	318d883a 	add	r6,r6,r6
 4005d98:	998d883a 	add	r6,r19,r6
 4005d9c:	333ffe04 	addi	r12,r6,-8
 4005da0:	2017883a 	mov	r11,r4
 4005da4:	31800104 	addi	r6,r6,4
 4005da8:	34000017 	ldw	r16,0(r6)
 4005dac:	31fffd04 	addi	r7,r6,-12
 4005db0:	81c0041e 	bne	r16,r7,4005dc4 <_malloc_r+0x1dc>
 4005db4:	0000fb06 	br	40061a4 <_malloc_r+0x5bc>
 4005db8:	1801030e 	bge	r3,zero,40061c8 <_malloc_r+0x5e0>
 4005dbc:	84000317 	ldw	r16,12(r16)
 4005dc0:	81c0f826 	beq	r16,r7,40061a4 <_malloc_r+0x5bc>
 4005dc4:	80800117 	ldw	r2,4(r16)
 4005dc8:	1284703a 	and	r2,r2,r10
 4005dcc:	1447c83a 	sub	r3,r2,r17
 4005dd0:	48fff90e 	bge	r9,r3,4005db8 <__alt_mem_onchip_memory2_0+0xfbfe5db8>
 4005dd4:	80800317 	ldw	r2,12(r16)
 4005dd8:	81000217 	ldw	r4,8(r16)
 4005ddc:	89400054 	ori	r5,r17,1
 4005de0:	81400115 	stw	r5,4(r16)
 4005de4:	20800315 	stw	r2,12(r4)
 4005de8:	11000215 	stw	r4,8(r2)
 4005dec:	8463883a 	add	r17,r16,r17
 4005df0:	9c400515 	stw	r17,20(r19)
 4005df4:	9c400415 	stw	r17,16(r19)
 4005df8:	18800054 	ori	r2,r3,1
 4005dfc:	88800115 	stw	r2,4(r17)
 4005e00:	8a000315 	stw	r8,12(r17)
 4005e04:	8a000215 	stw	r8,8(r17)
 4005e08:	88e3883a 	add	r17,r17,r3
 4005e0c:	88c00015 	stw	r3,0(r17)
 4005e10:	9009883a 	mov	r4,r18
 4005e14:	400e14c0 	call	400e14c <__malloc_unlock>
 4005e18:	80800204 	addi	r2,r16,8
 4005e1c:	00001b06 	br	4005e8c <_malloc_r+0x2a4>
 4005e20:	04400404 	movi	r17,16
 4005e24:	89402536 	bltu	r17,r5,4005ebc <_malloc_r+0x2d4>
 4005e28:	400e02c0 	call	400e02c <__malloc_lock>
 4005e2c:	00800184 	movi	r2,6
 4005e30:	01000084 	movi	r4,2
 4005e34:	04c100b4 	movhi	r19,1026
 4005e38:	1085883a 	add	r2,r2,r2
 4005e3c:	9ce43904 	addi	r19,r19,-28444
 4005e40:	1085883a 	add	r2,r2,r2
 4005e44:	9885883a 	add	r2,r19,r2
 4005e48:	14000117 	ldw	r16,4(r2)
 4005e4c:	10fffe04 	addi	r3,r2,-8
 4005e50:	80c0d926 	beq	r16,r3,40061b8 <_malloc_r+0x5d0>
 4005e54:	80c00117 	ldw	r3,4(r16)
 4005e58:	81000317 	ldw	r4,12(r16)
 4005e5c:	00bfff04 	movi	r2,-4
 4005e60:	1884703a 	and	r2,r3,r2
 4005e64:	81400217 	ldw	r5,8(r16)
 4005e68:	8085883a 	add	r2,r16,r2
 4005e6c:	10c00117 	ldw	r3,4(r2)
 4005e70:	29000315 	stw	r4,12(r5)
 4005e74:	21400215 	stw	r5,8(r4)
 4005e78:	18c00054 	ori	r3,r3,1
 4005e7c:	10c00115 	stw	r3,4(r2)
 4005e80:	9009883a 	mov	r4,r18
 4005e84:	400e14c0 	call	400e14c <__malloc_unlock>
 4005e88:	80800204 	addi	r2,r16,8
 4005e8c:	dfc00a17 	ldw	ra,40(sp)
 4005e90:	df000917 	ldw	fp,36(sp)
 4005e94:	ddc00817 	ldw	r23,32(sp)
 4005e98:	dd800717 	ldw	r22,28(sp)
 4005e9c:	dd400617 	ldw	r21,24(sp)
 4005ea0:	dd000517 	ldw	r20,20(sp)
 4005ea4:	dcc00417 	ldw	r19,16(sp)
 4005ea8:	dc800317 	ldw	r18,12(sp)
 4005eac:	dc400217 	ldw	r17,8(sp)
 4005eb0:	dc000117 	ldw	r16,4(sp)
 4005eb4:	dec00b04 	addi	sp,sp,44
 4005eb8:	f800283a 	ret
 4005ebc:	00800304 	movi	r2,12
 4005ec0:	90800015 	stw	r2,0(r18)
 4005ec4:	0005883a 	mov	r2,zero
 4005ec8:	003ff006 	br	4005e8c <__alt_mem_onchip_memory2_0+0xfbfe5e8c>
 4005ecc:	01002004 	movi	r4,128
 4005ed0:	02001004 	movi	r8,64
 4005ed4:	01c00fc4 	movi	r7,63
 4005ed8:	003f6106 	br	4005c60 <__alt_mem_onchip_memory2_0+0xfbfe5c60>
 4005edc:	4009883a 	mov	r4,r8
 4005ee0:	003f7506 	br	4005cb8 <__alt_mem_onchip_memory2_0+0xfbfe5cb8>
 4005ee4:	81000317 	ldw	r4,12(r16)
 4005ee8:	003fde06 	br	4005e64 <__alt_mem_onchip_memory2_0+0xfbfe5e64>
 4005eec:	81c5883a 	add	r2,r16,r7
 4005ef0:	11400117 	ldw	r5,4(r2)
 4005ef4:	9009883a 	mov	r4,r18
 4005ef8:	29400054 	ori	r5,r5,1
 4005efc:	11400115 	stw	r5,4(r2)
 4005f00:	400e14c0 	call	400e14c <__malloc_unlock>
 4005f04:	80800204 	addi	r2,r16,8
 4005f08:	003fe006 	br	4005e8c <__alt_mem_onchip_memory2_0+0xfbfe5e8c>
 4005f0c:	9c000217 	ldw	r16,8(r19)
 4005f10:	00bfff04 	movi	r2,-4
 4005f14:	85800117 	ldw	r22,4(r16)
 4005f18:	b0ac703a 	and	r22,r22,r2
 4005f1c:	b4400336 	bltu	r22,r17,4005f2c <_malloc_r+0x344>
 4005f20:	b445c83a 	sub	r2,r22,r17
 4005f24:	00c003c4 	movi	r3,15
 4005f28:	18805d16 	blt	r3,r2,40060a0 <_malloc_r+0x4b8>
 4005f2c:	05c100b4 	movhi	r23,1026
 4005f30:	008100b4 	movhi	r2,1026
 4005f34:	10b0d804 	addi	r2,r2,-15520
 4005f38:	bde9c304 	addi	r23,r23,-22772
 4005f3c:	15400017 	ldw	r21,0(r2)
 4005f40:	b8c00017 	ldw	r3,0(r23)
 4005f44:	00bfffc4 	movi	r2,-1
 4005f48:	858d883a 	add	r6,r16,r22
 4005f4c:	8d6b883a 	add	r21,r17,r21
 4005f50:	1880ea26 	beq	r3,r2,40062fc <_malloc_r+0x714>
 4005f54:	ad4403c4 	addi	r21,r21,4111
 4005f58:	00bc0004 	movi	r2,-4096
 4005f5c:	a8aa703a 	and	r21,r21,r2
 4005f60:	a80b883a 	mov	r5,r21
 4005f64:	9009883a 	mov	r4,r18
 4005f68:	d9800015 	stw	r6,0(sp)
 4005f6c:	4007e780 	call	4007e78 <_sbrk_r>
 4005f70:	1029883a 	mov	r20,r2
 4005f74:	00bfffc4 	movi	r2,-1
 4005f78:	d9800017 	ldw	r6,0(sp)
 4005f7c:	a080e826 	beq	r20,r2,4006320 <_malloc_r+0x738>
 4005f80:	a180a636 	bltu	r20,r6,400621c <_malloc_r+0x634>
 4005f84:	070100b4 	movhi	fp,1026
 4005f88:	e730fa04 	addi	fp,fp,-15384
 4005f8c:	e0800017 	ldw	r2,0(fp)
 4005f90:	a887883a 	add	r3,r21,r2
 4005f94:	e0c00015 	stw	r3,0(fp)
 4005f98:	3500e626 	beq	r6,r20,4006334 <_malloc_r+0x74c>
 4005f9c:	b9000017 	ldw	r4,0(r23)
 4005fa0:	00bfffc4 	movi	r2,-1
 4005fa4:	2080ee26 	beq	r4,r2,4006360 <_malloc_r+0x778>
 4005fa8:	a185c83a 	sub	r2,r20,r6
 4005fac:	10c5883a 	add	r2,r2,r3
 4005fb0:	e0800015 	stw	r2,0(fp)
 4005fb4:	a0c001cc 	andi	r3,r20,7
 4005fb8:	1800bc26 	beq	r3,zero,40062ac <_malloc_r+0x6c4>
 4005fbc:	a0e9c83a 	sub	r20,r20,r3
 4005fc0:	00840204 	movi	r2,4104
 4005fc4:	a5000204 	addi	r20,r20,8
 4005fc8:	10c7c83a 	sub	r3,r2,r3
 4005fcc:	a545883a 	add	r2,r20,r21
 4005fd0:	1083ffcc 	andi	r2,r2,4095
 4005fd4:	18abc83a 	sub	r21,r3,r2
 4005fd8:	a80b883a 	mov	r5,r21
 4005fdc:	9009883a 	mov	r4,r18
 4005fe0:	4007e780 	call	4007e78 <_sbrk_r>
 4005fe4:	00ffffc4 	movi	r3,-1
 4005fe8:	10c0e126 	beq	r2,r3,4006370 <_malloc_r+0x788>
 4005fec:	1505c83a 	sub	r2,r2,r20
 4005ff0:	1545883a 	add	r2,r2,r21
 4005ff4:	10800054 	ori	r2,r2,1
 4005ff8:	e0c00017 	ldw	r3,0(fp)
 4005ffc:	9d000215 	stw	r20,8(r19)
 4006000:	a0800115 	stw	r2,4(r20)
 4006004:	a8c7883a 	add	r3,r21,r3
 4006008:	e0c00015 	stw	r3,0(fp)
 400600c:	84c00e26 	beq	r16,r19,4006048 <_malloc_r+0x460>
 4006010:	018003c4 	movi	r6,15
 4006014:	3580a72e 	bgeu	r6,r22,40062b4 <_malloc_r+0x6cc>
 4006018:	81400117 	ldw	r5,4(r16)
 400601c:	013ffe04 	movi	r4,-8
 4006020:	b0bffd04 	addi	r2,r22,-12
 4006024:	1104703a 	and	r2,r2,r4
 4006028:	2900004c 	andi	r4,r5,1
 400602c:	2088b03a 	or	r4,r4,r2
 4006030:	81000115 	stw	r4,4(r16)
 4006034:	01400144 	movi	r5,5
 4006038:	8089883a 	add	r4,r16,r2
 400603c:	21400115 	stw	r5,4(r4)
 4006040:	21400215 	stw	r5,8(r4)
 4006044:	3080cd36 	bltu	r6,r2,400637c <_malloc_r+0x794>
 4006048:	008100b4 	movhi	r2,1026
 400604c:	10b0d704 	addi	r2,r2,-15524
 4006050:	11000017 	ldw	r4,0(r2)
 4006054:	20c0012e 	bgeu	r4,r3,400605c <_malloc_r+0x474>
 4006058:	10c00015 	stw	r3,0(r2)
 400605c:	008100b4 	movhi	r2,1026
 4006060:	10b0d604 	addi	r2,r2,-15528
 4006064:	11000017 	ldw	r4,0(r2)
 4006068:	9c000217 	ldw	r16,8(r19)
 400606c:	20c0012e 	bgeu	r4,r3,4006074 <_malloc_r+0x48c>
 4006070:	10c00015 	stw	r3,0(r2)
 4006074:	80c00117 	ldw	r3,4(r16)
 4006078:	00bfff04 	movi	r2,-4
 400607c:	1886703a 	and	r3,r3,r2
 4006080:	1c45c83a 	sub	r2,r3,r17
 4006084:	1c400236 	bltu	r3,r17,4006090 <_malloc_r+0x4a8>
 4006088:	00c003c4 	movi	r3,15
 400608c:	18800416 	blt	r3,r2,40060a0 <_malloc_r+0x4b8>
 4006090:	9009883a 	mov	r4,r18
 4006094:	400e14c0 	call	400e14c <__malloc_unlock>
 4006098:	0005883a 	mov	r2,zero
 400609c:	003f7b06 	br	4005e8c <__alt_mem_onchip_memory2_0+0xfbfe5e8c>
 40060a0:	88c00054 	ori	r3,r17,1
 40060a4:	80c00115 	stw	r3,4(r16)
 40060a8:	8463883a 	add	r17,r16,r17
 40060ac:	10800054 	ori	r2,r2,1
 40060b0:	9c400215 	stw	r17,8(r19)
 40060b4:	88800115 	stw	r2,4(r17)
 40060b8:	9009883a 	mov	r4,r18
 40060bc:	400e14c0 	call	400e14c <__malloc_unlock>
 40060c0:	80800204 	addi	r2,r16,8
 40060c4:	003f7106 	br	4005e8c <__alt_mem_onchip_memory2_0+0xfbfe5e8c>
 40060c8:	00c00504 	movi	r3,20
 40060cc:	18804a2e 	bgeu	r3,r2,40061f8 <_malloc_r+0x610>
 40060d0:	00c01504 	movi	r3,84
 40060d4:	18806e36 	bltu	r3,r2,4006290 <_malloc_r+0x6a8>
 40060d8:	8804d33a 	srli	r2,r17,12
 40060dc:	12001bc4 	addi	r8,r2,111
 40060e0:	11c01b84 	addi	r7,r2,110
 40060e4:	4209883a 	add	r4,r8,r8
 40060e8:	003edd06 	br	4005c60 <__alt_mem_onchip_memory2_0+0xfbfe5c60>
 40060ec:	3804d27a 	srli	r2,r7,9
 40060f0:	00c00104 	movi	r3,4
 40060f4:	1880442e 	bgeu	r3,r2,4006208 <_malloc_r+0x620>
 40060f8:	00c00504 	movi	r3,20
 40060fc:	18808136 	bltu	r3,r2,4006304 <_malloc_r+0x71c>
 4006100:	11401704 	addi	r5,r2,92
 4006104:	10c016c4 	addi	r3,r2,91
 4006108:	294b883a 	add	r5,r5,r5
 400610c:	294b883a 	add	r5,r5,r5
 4006110:	294b883a 	add	r5,r5,r5
 4006114:	994b883a 	add	r5,r19,r5
 4006118:	28800017 	ldw	r2,0(r5)
 400611c:	018100b4 	movhi	r6,1026
 4006120:	297ffe04 	addi	r5,r5,-8
 4006124:	31a43904 	addi	r6,r6,-28444
 4006128:	28806526 	beq	r5,r2,40062c0 <_malloc_r+0x6d8>
 400612c:	01bfff04 	movi	r6,-4
 4006130:	10c00117 	ldw	r3,4(r2)
 4006134:	1986703a 	and	r3,r3,r6
 4006138:	38c0022e 	bgeu	r7,r3,4006144 <_malloc_r+0x55c>
 400613c:	10800217 	ldw	r2,8(r2)
 4006140:	28bffb1e 	bne	r5,r2,4006130 <__alt_mem_onchip_memory2_0+0xfbfe6130>
 4006144:	11400317 	ldw	r5,12(r2)
 4006148:	98c00117 	ldw	r3,4(r19)
 400614c:	81400315 	stw	r5,12(r16)
 4006150:	80800215 	stw	r2,8(r16)
 4006154:	2c000215 	stw	r16,8(r5)
 4006158:	14000315 	stw	r16,12(r2)
 400615c:	003ef806 	br	4005d40 <__alt_mem_onchip_memory2_0+0xfbfe5d40>
 4006160:	88c00054 	ori	r3,r17,1
 4006164:	80c00115 	stw	r3,4(r16)
 4006168:	8463883a 	add	r17,r16,r17
 400616c:	34400515 	stw	r17,20(r6)
 4006170:	34400415 	stw	r17,16(r6)
 4006174:	10c00054 	ori	r3,r2,1
 4006178:	8a000315 	stw	r8,12(r17)
 400617c:	8a000215 	stw	r8,8(r17)
 4006180:	88c00115 	stw	r3,4(r17)
 4006184:	88a3883a 	add	r17,r17,r2
 4006188:	88800015 	stw	r2,0(r17)
 400618c:	9009883a 	mov	r4,r18
 4006190:	400e14c0 	call	400e14c <__malloc_unlock>
 4006194:	80800204 	addi	r2,r16,8
 4006198:	003f3c06 	br	4005e8c <__alt_mem_onchip_memory2_0+0xfbfe5e8c>
 400619c:	30c00117 	ldw	r3,4(r6)
 40061a0:	003ee706 	br	4005d40 <__alt_mem_onchip_memory2_0+0xfbfe5d40>
 40061a4:	5ac00044 	addi	r11,r11,1
 40061a8:	588000cc 	andi	r2,r11,3
 40061ac:	31800204 	addi	r6,r6,8
 40061b0:	103efd1e 	bne	r2,zero,4005da8 <__alt_mem_onchip_memory2_0+0xfbfe5da8>
 40061b4:	00002406 	br	4006248 <_malloc_r+0x660>
 40061b8:	14000317 	ldw	r16,12(r2)
 40061bc:	143f251e 	bne	r2,r16,4005e54 <__alt_mem_onchip_memory2_0+0xfbfe5e54>
 40061c0:	21000084 	addi	r4,r4,2
 40061c4:	003ebc06 	br	4005cb8 <__alt_mem_onchip_memory2_0+0xfbfe5cb8>
 40061c8:	8085883a 	add	r2,r16,r2
 40061cc:	10c00117 	ldw	r3,4(r2)
 40061d0:	81000317 	ldw	r4,12(r16)
 40061d4:	81400217 	ldw	r5,8(r16)
 40061d8:	18c00054 	ori	r3,r3,1
 40061dc:	10c00115 	stw	r3,4(r2)
 40061e0:	29000315 	stw	r4,12(r5)
 40061e4:	21400215 	stw	r5,8(r4)
 40061e8:	9009883a 	mov	r4,r18
 40061ec:	400e14c0 	call	400e14c <__malloc_unlock>
 40061f0:	80800204 	addi	r2,r16,8
 40061f4:	003f2506 	br	4005e8c <__alt_mem_onchip_memory2_0+0xfbfe5e8c>
 40061f8:	12001704 	addi	r8,r2,92
 40061fc:	11c016c4 	addi	r7,r2,91
 4006200:	4209883a 	add	r4,r8,r8
 4006204:	003e9606 	br	4005c60 <__alt_mem_onchip_memory2_0+0xfbfe5c60>
 4006208:	3804d1ba 	srli	r2,r7,6
 400620c:	11400e44 	addi	r5,r2,57
 4006210:	10c00e04 	addi	r3,r2,56
 4006214:	294b883a 	add	r5,r5,r5
 4006218:	003fbc06 	br	400610c <__alt_mem_onchip_memory2_0+0xfbfe610c>
 400621c:	84ff5926 	beq	r16,r19,4005f84 <__alt_mem_onchip_memory2_0+0xfbfe5f84>
 4006220:	008100b4 	movhi	r2,1026
 4006224:	10a43904 	addi	r2,r2,-28444
 4006228:	14000217 	ldw	r16,8(r2)
 400622c:	00bfff04 	movi	r2,-4
 4006230:	80c00117 	ldw	r3,4(r16)
 4006234:	1886703a 	and	r3,r3,r2
 4006238:	003f9106 	br	4006080 <__alt_mem_onchip_memory2_0+0xfbfe6080>
 400623c:	60800217 	ldw	r2,8(r12)
 4006240:	213fffc4 	addi	r4,r4,-1
 4006244:	1300651e 	bne	r2,r12,40063dc <_malloc_r+0x7f4>
 4006248:	208000cc 	andi	r2,r4,3
 400624c:	633ffe04 	addi	r12,r12,-8
 4006250:	103ffa1e 	bne	r2,zero,400623c <__alt_mem_onchip_memory2_0+0xfbfe623c>
 4006254:	98800117 	ldw	r2,4(r19)
 4006258:	0146303a 	nor	r3,zero,r5
 400625c:	1884703a 	and	r2,r3,r2
 4006260:	98800115 	stw	r2,4(r19)
 4006264:	294b883a 	add	r5,r5,r5
 4006268:	117f2836 	bltu	r2,r5,4005f0c <__alt_mem_onchip_memory2_0+0xfbfe5f0c>
 400626c:	283f2726 	beq	r5,zero,4005f0c <__alt_mem_onchip_memory2_0+0xfbfe5f0c>
 4006270:	2886703a 	and	r3,r5,r2
 4006274:	5809883a 	mov	r4,r11
 4006278:	183ec31e 	bne	r3,zero,4005d88 <__alt_mem_onchip_memory2_0+0xfbfe5d88>
 400627c:	294b883a 	add	r5,r5,r5
 4006280:	2886703a 	and	r3,r5,r2
 4006284:	21000104 	addi	r4,r4,4
 4006288:	183ffc26 	beq	r3,zero,400627c <__alt_mem_onchip_memory2_0+0xfbfe627c>
 400628c:	003ebe06 	br	4005d88 <__alt_mem_onchip_memory2_0+0xfbfe5d88>
 4006290:	00c05504 	movi	r3,340
 4006294:	18801236 	bltu	r3,r2,40062e0 <_malloc_r+0x6f8>
 4006298:	8804d3fa 	srli	r2,r17,15
 400629c:	12001e04 	addi	r8,r2,120
 40062a0:	11c01dc4 	addi	r7,r2,119
 40062a4:	4209883a 	add	r4,r8,r8
 40062a8:	003e6d06 	br	4005c60 <__alt_mem_onchip_memory2_0+0xfbfe5c60>
 40062ac:	00c40004 	movi	r3,4096
 40062b0:	003f4606 	br	4005fcc <__alt_mem_onchip_memory2_0+0xfbfe5fcc>
 40062b4:	00800044 	movi	r2,1
 40062b8:	a0800115 	stw	r2,4(r20)
 40062bc:	003f7406 	br	4006090 <__alt_mem_onchip_memory2_0+0xfbfe6090>
 40062c0:	1805d0ba 	srai	r2,r3,2
 40062c4:	01c00044 	movi	r7,1
 40062c8:	30c00117 	ldw	r3,4(r6)
 40062cc:	388e983a 	sll	r7,r7,r2
 40062d0:	2805883a 	mov	r2,r5
 40062d4:	38c6b03a 	or	r3,r7,r3
 40062d8:	30c00115 	stw	r3,4(r6)
 40062dc:	003f9b06 	br	400614c <__alt_mem_onchip_memory2_0+0xfbfe614c>
 40062e0:	00c15504 	movi	r3,1364
 40062e4:	18801a36 	bltu	r3,r2,4006350 <_malloc_r+0x768>
 40062e8:	8804d4ba 	srli	r2,r17,18
 40062ec:	12001f44 	addi	r8,r2,125
 40062f0:	11c01f04 	addi	r7,r2,124
 40062f4:	4209883a 	add	r4,r8,r8
 40062f8:	003e5906 	br	4005c60 <__alt_mem_onchip_memory2_0+0xfbfe5c60>
 40062fc:	ad400404 	addi	r21,r21,16
 4006300:	003f1706 	br	4005f60 <__alt_mem_onchip_memory2_0+0xfbfe5f60>
 4006304:	00c01504 	movi	r3,84
 4006308:	18802336 	bltu	r3,r2,4006398 <_malloc_r+0x7b0>
 400630c:	3804d33a 	srli	r2,r7,12
 4006310:	11401bc4 	addi	r5,r2,111
 4006314:	10c01b84 	addi	r3,r2,110
 4006318:	294b883a 	add	r5,r5,r5
 400631c:	003f7b06 	br	400610c <__alt_mem_onchip_memory2_0+0xfbfe610c>
 4006320:	9c000217 	ldw	r16,8(r19)
 4006324:	00bfff04 	movi	r2,-4
 4006328:	80c00117 	ldw	r3,4(r16)
 400632c:	1886703a 	and	r3,r3,r2
 4006330:	003f5306 	br	4006080 <__alt_mem_onchip_memory2_0+0xfbfe6080>
 4006334:	3083ffcc 	andi	r2,r6,4095
 4006338:	103f181e 	bne	r2,zero,4005f9c <__alt_mem_onchip_memory2_0+0xfbfe5f9c>
 400633c:	99000217 	ldw	r4,8(r19)
 4006340:	b545883a 	add	r2,r22,r21
 4006344:	10800054 	ori	r2,r2,1
 4006348:	20800115 	stw	r2,4(r4)
 400634c:	003f3e06 	br	4006048 <__alt_mem_onchip_memory2_0+0xfbfe6048>
 4006350:	01003f84 	movi	r4,254
 4006354:	02001fc4 	movi	r8,127
 4006358:	01c01f84 	movi	r7,126
 400635c:	003e4006 	br	4005c60 <__alt_mem_onchip_memory2_0+0xfbfe5c60>
 4006360:	008100b4 	movhi	r2,1026
 4006364:	10a9c304 	addi	r2,r2,-22772
 4006368:	15000015 	stw	r20,0(r2)
 400636c:	003f1106 	br	4005fb4 <__alt_mem_onchip_memory2_0+0xfbfe5fb4>
 4006370:	00800044 	movi	r2,1
 4006374:	002b883a 	mov	r21,zero
 4006378:	003f1f06 	br	4005ff8 <__alt_mem_onchip_memory2_0+0xfbfe5ff8>
 400637c:	81400204 	addi	r5,r16,8
 4006380:	9009883a 	mov	r4,r18
 4006384:	4004ffc0 	call	4004ffc <_free_r>
 4006388:	008100b4 	movhi	r2,1026
 400638c:	10b0fa04 	addi	r2,r2,-15384
 4006390:	10c00017 	ldw	r3,0(r2)
 4006394:	003f2c06 	br	4006048 <__alt_mem_onchip_memory2_0+0xfbfe6048>
 4006398:	00c05504 	movi	r3,340
 400639c:	18800536 	bltu	r3,r2,40063b4 <_malloc_r+0x7cc>
 40063a0:	3804d3fa 	srli	r2,r7,15
 40063a4:	11401e04 	addi	r5,r2,120
 40063a8:	10c01dc4 	addi	r3,r2,119
 40063ac:	294b883a 	add	r5,r5,r5
 40063b0:	003f5606 	br	400610c <__alt_mem_onchip_memory2_0+0xfbfe610c>
 40063b4:	00c15504 	movi	r3,1364
 40063b8:	18800536 	bltu	r3,r2,40063d0 <_malloc_r+0x7e8>
 40063bc:	3804d4ba 	srli	r2,r7,18
 40063c0:	11401f44 	addi	r5,r2,125
 40063c4:	10c01f04 	addi	r3,r2,124
 40063c8:	294b883a 	add	r5,r5,r5
 40063cc:	003f4f06 	br	400610c <__alt_mem_onchip_memory2_0+0xfbfe610c>
 40063d0:	01403f84 	movi	r5,254
 40063d4:	00c01f84 	movi	r3,126
 40063d8:	003f4c06 	br	400610c <__alt_mem_onchip_memory2_0+0xfbfe610c>
 40063dc:	98800117 	ldw	r2,4(r19)
 40063e0:	003fa006 	br	4006264 <__alt_mem_onchip_memory2_0+0xfbfe6264>
 40063e4:	8808d0fa 	srli	r4,r17,3
 40063e8:	20800044 	addi	r2,r4,1
 40063ec:	1085883a 	add	r2,r2,r2
 40063f0:	003e9006 	br	4005e34 <__alt_mem_onchip_memory2_0+0xfbfe5e34>

040063f4 <memchr>:
 40063f4:	208000cc 	andi	r2,r4,3
 40063f8:	280f883a 	mov	r7,r5
 40063fc:	10003426 	beq	r2,zero,40064d0 <memchr+0xdc>
 4006400:	30bfffc4 	addi	r2,r6,-1
 4006404:	30001a26 	beq	r6,zero,4006470 <memchr+0x7c>
 4006408:	20c00003 	ldbu	r3,0(r4)
 400640c:	29803fcc 	andi	r6,r5,255
 4006410:	30c0051e 	bne	r6,r3,4006428 <memchr+0x34>
 4006414:	00001806 	br	4006478 <memchr+0x84>
 4006418:	10001526 	beq	r2,zero,4006470 <memchr+0x7c>
 400641c:	20c00003 	ldbu	r3,0(r4)
 4006420:	10bfffc4 	addi	r2,r2,-1
 4006424:	30c01426 	beq	r6,r3,4006478 <memchr+0x84>
 4006428:	21000044 	addi	r4,r4,1
 400642c:	20c000cc 	andi	r3,r4,3
 4006430:	183ff91e 	bne	r3,zero,4006418 <__alt_mem_onchip_memory2_0+0xfbfe6418>
 4006434:	020000c4 	movi	r8,3
 4006438:	40801136 	bltu	r8,r2,4006480 <memchr+0x8c>
 400643c:	10000c26 	beq	r2,zero,4006470 <memchr+0x7c>
 4006440:	20c00003 	ldbu	r3,0(r4)
 4006444:	29403fcc 	andi	r5,r5,255
 4006448:	28c00b26 	beq	r5,r3,4006478 <memchr+0x84>
 400644c:	20c00044 	addi	r3,r4,1
 4006450:	39803fcc 	andi	r6,r7,255
 4006454:	2089883a 	add	r4,r4,r2
 4006458:	00000306 	br	4006468 <memchr+0x74>
 400645c:	18c00044 	addi	r3,r3,1
 4006460:	197fffc3 	ldbu	r5,-1(r3)
 4006464:	31400526 	beq	r6,r5,400647c <memchr+0x88>
 4006468:	1805883a 	mov	r2,r3
 400646c:	20fffb1e 	bne	r4,r3,400645c <__alt_mem_onchip_memory2_0+0xfbfe645c>
 4006470:	0005883a 	mov	r2,zero
 4006474:	f800283a 	ret
 4006478:	2005883a 	mov	r2,r4
 400647c:	f800283a 	ret
 4006480:	28c03fcc 	andi	r3,r5,255
 4006484:	1812923a 	slli	r9,r3,8
 4006488:	02ffbff4 	movhi	r11,65279
 400648c:	02a02074 	movhi	r10,32897
 4006490:	48d2b03a 	or	r9,r9,r3
 4006494:	4806943a 	slli	r3,r9,16
 4006498:	5affbfc4 	addi	r11,r11,-257
 400649c:	52a02004 	addi	r10,r10,-32640
 40064a0:	48d2b03a 	or	r9,r9,r3
 40064a4:	20c00017 	ldw	r3,0(r4)
 40064a8:	48c6f03a 	xor	r3,r9,r3
 40064ac:	1acd883a 	add	r6,r3,r11
 40064b0:	00c6303a 	nor	r3,zero,r3
 40064b4:	30c6703a 	and	r3,r6,r3
 40064b8:	1a86703a 	and	r3,r3,r10
 40064bc:	183fe01e 	bne	r3,zero,4006440 <__alt_mem_onchip_memory2_0+0xfbfe6440>
 40064c0:	10bfff04 	addi	r2,r2,-4
 40064c4:	21000104 	addi	r4,r4,4
 40064c8:	40bff636 	bltu	r8,r2,40064a4 <__alt_mem_onchip_memory2_0+0xfbfe64a4>
 40064cc:	003fdb06 	br	400643c <__alt_mem_onchip_memory2_0+0xfbfe643c>
 40064d0:	3005883a 	mov	r2,r6
 40064d4:	003fd706 	br	4006434 <__alt_mem_onchip_memory2_0+0xfbfe6434>

040064d8 <memcpy>:
 40064d8:	defffd04 	addi	sp,sp,-12
 40064dc:	dfc00215 	stw	ra,8(sp)
 40064e0:	dc400115 	stw	r17,4(sp)
 40064e4:	dc000015 	stw	r16,0(sp)
 40064e8:	00c003c4 	movi	r3,15
 40064ec:	2005883a 	mov	r2,r4
 40064f0:	1980452e 	bgeu	r3,r6,4006608 <memcpy+0x130>
 40064f4:	2906b03a 	or	r3,r5,r4
 40064f8:	18c000cc 	andi	r3,r3,3
 40064fc:	1800441e 	bne	r3,zero,4006610 <memcpy+0x138>
 4006500:	347ffc04 	addi	r17,r6,-16
 4006504:	8822d13a 	srli	r17,r17,4
 4006508:	28c00104 	addi	r3,r5,4
 400650c:	23400104 	addi	r13,r4,4
 4006510:	8820913a 	slli	r16,r17,4
 4006514:	2b000204 	addi	r12,r5,8
 4006518:	22c00204 	addi	r11,r4,8
 400651c:	84000504 	addi	r16,r16,20
 4006520:	2a800304 	addi	r10,r5,12
 4006524:	22400304 	addi	r9,r4,12
 4006528:	2c21883a 	add	r16,r5,r16
 400652c:	2811883a 	mov	r8,r5
 4006530:	200f883a 	mov	r7,r4
 4006534:	41000017 	ldw	r4,0(r8)
 4006538:	1fc00017 	ldw	ra,0(r3)
 400653c:	63c00017 	ldw	r15,0(r12)
 4006540:	39000015 	stw	r4,0(r7)
 4006544:	53800017 	ldw	r14,0(r10)
 4006548:	6fc00015 	stw	ra,0(r13)
 400654c:	5bc00015 	stw	r15,0(r11)
 4006550:	4b800015 	stw	r14,0(r9)
 4006554:	18c00404 	addi	r3,r3,16
 4006558:	39c00404 	addi	r7,r7,16
 400655c:	42000404 	addi	r8,r8,16
 4006560:	6b400404 	addi	r13,r13,16
 4006564:	63000404 	addi	r12,r12,16
 4006568:	5ac00404 	addi	r11,r11,16
 400656c:	52800404 	addi	r10,r10,16
 4006570:	4a400404 	addi	r9,r9,16
 4006574:	1c3fef1e 	bne	r3,r16,4006534 <__alt_mem_onchip_memory2_0+0xfbfe6534>
 4006578:	89c00044 	addi	r7,r17,1
 400657c:	380e913a 	slli	r7,r7,4
 4006580:	310003cc 	andi	r4,r6,15
 4006584:	02c000c4 	movi	r11,3
 4006588:	11c7883a 	add	r3,r2,r7
 400658c:	29cb883a 	add	r5,r5,r7
 4006590:	5900212e 	bgeu	r11,r4,4006618 <memcpy+0x140>
 4006594:	1813883a 	mov	r9,r3
 4006598:	2811883a 	mov	r8,r5
 400659c:	200f883a 	mov	r7,r4
 40065a0:	42800017 	ldw	r10,0(r8)
 40065a4:	4a400104 	addi	r9,r9,4
 40065a8:	39ffff04 	addi	r7,r7,-4
 40065ac:	4abfff15 	stw	r10,-4(r9)
 40065b0:	42000104 	addi	r8,r8,4
 40065b4:	59fffa36 	bltu	r11,r7,40065a0 <__alt_mem_onchip_memory2_0+0xfbfe65a0>
 40065b8:	213fff04 	addi	r4,r4,-4
 40065bc:	2008d0ba 	srli	r4,r4,2
 40065c0:	318000cc 	andi	r6,r6,3
 40065c4:	21000044 	addi	r4,r4,1
 40065c8:	2109883a 	add	r4,r4,r4
 40065cc:	2109883a 	add	r4,r4,r4
 40065d0:	1907883a 	add	r3,r3,r4
 40065d4:	290b883a 	add	r5,r5,r4
 40065d8:	30000626 	beq	r6,zero,40065f4 <memcpy+0x11c>
 40065dc:	198d883a 	add	r6,r3,r6
 40065e0:	29c00003 	ldbu	r7,0(r5)
 40065e4:	18c00044 	addi	r3,r3,1
 40065e8:	29400044 	addi	r5,r5,1
 40065ec:	19ffffc5 	stb	r7,-1(r3)
 40065f0:	19bffb1e 	bne	r3,r6,40065e0 <__alt_mem_onchip_memory2_0+0xfbfe65e0>
 40065f4:	dfc00217 	ldw	ra,8(sp)
 40065f8:	dc400117 	ldw	r17,4(sp)
 40065fc:	dc000017 	ldw	r16,0(sp)
 4006600:	dec00304 	addi	sp,sp,12
 4006604:	f800283a 	ret
 4006608:	2007883a 	mov	r3,r4
 400660c:	003ff206 	br	40065d8 <__alt_mem_onchip_memory2_0+0xfbfe65d8>
 4006610:	2007883a 	mov	r3,r4
 4006614:	003ff106 	br	40065dc <__alt_mem_onchip_memory2_0+0xfbfe65dc>
 4006618:	200d883a 	mov	r6,r4
 400661c:	003fee06 	br	40065d8 <__alt_mem_onchip_memory2_0+0xfbfe65d8>

04006620 <memmove>:
 4006620:	2005883a 	mov	r2,r4
 4006624:	29000b2e 	bgeu	r5,r4,4006654 <memmove+0x34>
 4006628:	298f883a 	add	r7,r5,r6
 400662c:	21c0092e 	bgeu	r4,r7,4006654 <memmove+0x34>
 4006630:	2187883a 	add	r3,r4,r6
 4006634:	198bc83a 	sub	r5,r3,r6
 4006638:	30004826 	beq	r6,zero,400675c <memmove+0x13c>
 400663c:	39ffffc4 	addi	r7,r7,-1
 4006640:	39000003 	ldbu	r4,0(r7)
 4006644:	18ffffc4 	addi	r3,r3,-1
 4006648:	19000005 	stb	r4,0(r3)
 400664c:	28fffb1e 	bne	r5,r3,400663c <__alt_mem_onchip_memory2_0+0xfbfe663c>
 4006650:	f800283a 	ret
 4006654:	00c003c4 	movi	r3,15
 4006658:	1980412e 	bgeu	r3,r6,4006760 <memmove+0x140>
 400665c:	2886b03a 	or	r3,r5,r2
 4006660:	18c000cc 	andi	r3,r3,3
 4006664:	1800401e 	bne	r3,zero,4006768 <memmove+0x148>
 4006668:	33fffc04 	addi	r15,r6,-16
 400666c:	781ed13a 	srli	r15,r15,4
 4006670:	28c00104 	addi	r3,r5,4
 4006674:	13400104 	addi	r13,r2,4
 4006678:	781c913a 	slli	r14,r15,4
 400667c:	2b000204 	addi	r12,r5,8
 4006680:	12c00204 	addi	r11,r2,8
 4006684:	73800504 	addi	r14,r14,20
 4006688:	2a800304 	addi	r10,r5,12
 400668c:	12400304 	addi	r9,r2,12
 4006690:	2b9d883a 	add	r14,r5,r14
 4006694:	2811883a 	mov	r8,r5
 4006698:	100f883a 	mov	r7,r2
 400669c:	41000017 	ldw	r4,0(r8)
 40066a0:	39c00404 	addi	r7,r7,16
 40066a4:	18c00404 	addi	r3,r3,16
 40066a8:	393ffc15 	stw	r4,-16(r7)
 40066ac:	193ffc17 	ldw	r4,-16(r3)
 40066b0:	6b400404 	addi	r13,r13,16
 40066b4:	5ac00404 	addi	r11,r11,16
 40066b8:	693ffc15 	stw	r4,-16(r13)
 40066bc:	61000017 	ldw	r4,0(r12)
 40066c0:	4a400404 	addi	r9,r9,16
 40066c4:	42000404 	addi	r8,r8,16
 40066c8:	593ffc15 	stw	r4,-16(r11)
 40066cc:	51000017 	ldw	r4,0(r10)
 40066d0:	63000404 	addi	r12,r12,16
 40066d4:	52800404 	addi	r10,r10,16
 40066d8:	493ffc15 	stw	r4,-16(r9)
 40066dc:	1bbfef1e 	bne	r3,r14,400669c <__alt_mem_onchip_memory2_0+0xfbfe669c>
 40066e0:	79000044 	addi	r4,r15,1
 40066e4:	2008913a 	slli	r4,r4,4
 40066e8:	328003cc 	andi	r10,r6,15
 40066ec:	02c000c4 	movi	r11,3
 40066f0:	1107883a 	add	r3,r2,r4
 40066f4:	290b883a 	add	r5,r5,r4
 40066f8:	5a801e2e 	bgeu	r11,r10,4006774 <memmove+0x154>
 40066fc:	1813883a 	mov	r9,r3
 4006700:	2811883a 	mov	r8,r5
 4006704:	500f883a 	mov	r7,r10
 4006708:	41000017 	ldw	r4,0(r8)
 400670c:	4a400104 	addi	r9,r9,4
 4006710:	39ffff04 	addi	r7,r7,-4
 4006714:	493fff15 	stw	r4,-4(r9)
 4006718:	42000104 	addi	r8,r8,4
 400671c:	59fffa36 	bltu	r11,r7,4006708 <__alt_mem_onchip_memory2_0+0xfbfe6708>
 4006720:	513fff04 	addi	r4,r10,-4
 4006724:	2008d0ba 	srli	r4,r4,2
 4006728:	318000cc 	andi	r6,r6,3
 400672c:	21000044 	addi	r4,r4,1
 4006730:	2109883a 	add	r4,r4,r4
 4006734:	2109883a 	add	r4,r4,r4
 4006738:	1907883a 	add	r3,r3,r4
 400673c:	290b883a 	add	r5,r5,r4
 4006740:	30000b26 	beq	r6,zero,4006770 <memmove+0x150>
 4006744:	198d883a 	add	r6,r3,r6
 4006748:	29c00003 	ldbu	r7,0(r5)
 400674c:	18c00044 	addi	r3,r3,1
 4006750:	29400044 	addi	r5,r5,1
 4006754:	19ffffc5 	stb	r7,-1(r3)
 4006758:	19bffb1e 	bne	r3,r6,4006748 <__alt_mem_onchip_memory2_0+0xfbfe6748>
 400675c:	f800283a 	ret
 4006760:	1007883a 	mov	r3,r2
 4006764:	003ff606 	br	4006740 <__alt_mem_onchip_memory2_0+0xfbfe6740>
 4006768:	1007883a 	mov	r3,r2
 400676c:	003ff506 	br	4006744 <__alt_mem_onchip_memory2_0+0xfbfe6744>
 4006770:	f800283a 	ret
 4006774:	500d883a 	mov	r6,r10
 4006778:	003ff106 	br	4006740 <__alt_mem_onchip_memory2_0+0xfbfe6740>

0400677c <memset>:
 400677c:	20c000cc 	andi	r3,r4,3
 4006780:	2005883a 	mov	r2,r4
 4006784:	18004426 	beq	r3,zero,4006898 <memset+0x11c>
 4006788:	31ffffc4 	addi	r7,r6,-1
 400678c:	30004026 	beq	r6,zero,4006890 <memset+0x114>
 4006790:	2813883a 	mov	r9,r5
 4006794:	200d883a 	mov	r6,r4
 4006798:	2007883a 	mov	r3,r4
 400679c:	00000406 	br	40067b0 <memset+0x34>
 40067a0:	3a3fffc4 	addi	r8,r7,-1
 40067a4:	31800044 	addi	r6,r6,1
 40067a8:	38003926 	beq	r7,zero,4006890 <memset+0x114>
 40067ac:	400f883a 	mov	r7,r8
 40067b0:	18c00044 	addi	r3,r3,1
 40067b4:	32400005 	stb	r9,0(r6)
 40067b8:	1a0000cc 	andi	r8,r3,3
 40067bc:	403ff81e 	bne	r8,zero,40067a0 <__alt_mem_onchip_memory2_0+0xfbfe67a0>
 40067c0:	010000c4 	movi	r4,3
 40067c4:	21c02d2e 	bgeu	r4,r7,400687c <memset+0x100>
 40067c8:	29003fcc 	andi	r4,r5,255
 40067cc:	200c923a 	slli	r6,r4,8
 40067d0:	3108b03a 	or	r4,r6,r4
 40067d4:	200c943a 	slli	r6,r4,16
 40067d8:	218cb03a 	or	r6,r4,r6
 40067dc:	010003c4 	movi	r4,15
 40067e0:	21c0182e 	bgeu	r4,r7,4006844 <memset+0xc8>
 40067e4:	3b3ffc04 	addi	r12,r7,-16
 40067e8:	6018d13a 	srli	r12,r12,4
 40067ec:	1a000104 	addi	r8,r3,4
 40067f0:	1ac00204 	addi	r11,r3,8
 40067f4:	6008913a 	slli	r4,r12,4
 40067f8:	1a800304 	addi	r10,r3,12
 40067fc:	1813883a 	mov	r9,r3
 4006800:	21000504 	addi	r4,r4,20
 4006804:	1909883a 	add	r4,r3,r4
 4006808:	49800015 	stw	r6,0(r9)
 400680c:	41800015 	stw	r6,0(r8)
 4006810:	59800015 	stw	r6,0(r11)
 4006814:	51800015 	stw	r6,0(r10)
 4006818:	42000404 	addi	r8,r8,16
 400681c:	4a400404 	addi	r9,r9,16
 4006820:	5ac00404 	addi	r11,r11,16
 4006824:	52800404 	addi	r10,r10,16
 4006828:	413ff71e 	bne	r8,r4,4006808 <__alt_mem_onchip_memory2_0+0xfbfe6808>
 400682c:	63000044 	addi	r12,r12,1
 4006830:	6018913a 	slli	r12,r12,4
 4006834:	39c003cc 	andi	r7,r7,15
 4006838:	010000c4 	movi	r4,3
 400683c:	1b07883a 	add	r3,r3,r12
 4006840:	21c00e2e 	bgeu	r4,r7,400687c <memset+0x100>
 4006844:	1813883a 	mov	r9,r3
 4006848:	3811883a 	mov	r8,r7
 400684c:	010000c4 	movi	r4,3
 4006850:	49800015 	stw	r6,0(r9)
 4006854:	423fff04 	addi	r8,r8,-4
 4006858:	4a400104 	addi	r9,r9,4
 400685c:	223ffc36 	bltu	r4,r8,4006850 <__alt_mem_onchip_memory2_0+0xfbfe6850>
 4006860:	393fff04 	addi	r4,r7,-4
 4006864:	2008d0ba 	srli	r4,r4,2
 4006868:	39c000cc 	andi	r7,r7,3
 400686c:	21000044 	addi	r4,r4,1
 4006870:	2109883a 	add	r4,r4,r4
 4006874:	2109883a 	add	r4,r4,r4
 4006878:	1907883a 	add	r3,r3,r4
 400687c:	38000526 	beq	r7,zero,4006894 <memset+0x118>
 4006880:	19cf883a 	add	r7,r3,r7
 4006884:	19400005 	stb	r5,0(r3)
 4006888:	18c00044 	addi	r3,r3,1
 400688c:	38fffd1e 	bne	r7,r3,4006884 <__alt_mem_onchip_memory2_0+0xfbfe6884>
 4006890:	f800283a 	ret
 4006894:	f800283a 	ret
 4006898:	2007883a 	mov	r3,r4
 400689c:	300f883a 	mov	r7,r6
 40068a0:	003fc706 	br	40067c0 <__alt_mem_onchip_memory2_0+0xfbfe67c0>

040068a4 <_Balloc>:
 40068a4:	20801317 	ldw	r2,76(r4)
 40068a8:	defffc04 	addi	sp,sp,-16
 40068ac:	dc400115 	stw	r17,4(sp)
 40068b0:	dc000015 	stw	r16,0(sp)
 40068b4:	dfc00315 	stw	ra,12(sp)
 40068b8:	dc800215 	stw	r18,8(sp)
 40068bc:	2023883a 	mov	r17,r4
 40068c0:	2821883a 	mov	r16,r5
 40068c4:	10000f26 	beq	r2,zero,4006904 <_Balloc+0x60>
 40068c8:	8407883a 	add	r3,r16,r16
 40068cc:	18c7883a 	add	r3,r3,r3
 40068d0:	10c7883a 	add	r3,r2,r3
 40068d4:	18800017 	ldw	r2,0(r3)
 40068d8:	10001126 	beq	r2,zero,4006920 <_Balloc+0x7c>
 40068dc:	11000017 	ldw	r4,0(r2)
 40068e0:	19000015 	stw	r4,0(r3)
 40068e4:	10000415 	stw	zero,16(r2)
 40068e8:	10000315 	stw	zero,12(r2)
 40068ec:	dfc00317 	ldw	ra,12(sp)
 40068f0:	dc800217 	ldw	r18,8(sp)
 40068f4:	dc400117 	ldw	r17,4(sp)
 40068f8:	dc000017 	ldw	r16,0(sp)
 40068fc:	dec00404 	addi	sp,sp,16
 4006900:	f800283a 	ret
 4006904:	01800844 	movi	r6,33
 4006908:	01400104 	movi	r5,4
 400690c:	40097e00 	call	40097e0 <_calloc_r>
 4006910:	88801315 	stw	r2,76(r17)
 4006914:	103fec1e 	bne	r2,zero,40068c8 <__alt_mem_onchip_memory2_0+0xfbfe68c8>
 4006918:	0005883a 	mov	r2,zero
 400691c:	003ff306 	br	40068ec <__alt_mem_onchip_memory2_0+0xfbfe68ec>
 4006920:	01400044 	movi	r5,1
 4006924:	2c24983a 	sll	r18,r5,r16
 4006928:	8809883a 	mov	r4,r17
 400692c:	91800144 	addi	r6,r18,5
 4006930:	318d883a 	add	r6,r6,r6
 4006934:	318d883a 	add	r6,r6,r6
 4006938:	40097e00 	call	40097e0 <_calloc_r>
 400693c:	103ff626 	beq	r2,zero,4006918 <__alt_mem_onchip_memory2_0+0xfbfe6918>
 4006940:	14000115 	stw	r16,4(r2)
 4006944:	14800215 	stw	r18,8(r2)
 4006948:	003fe606 	br	40068e4 <__alt_mem_onchip_memory2_0+0xfbfe68e4>

0400694c <_Bfree>:
 400694c:	28000826 	beq	r5,zero,4006970 <_Bfree+0x24>
 4006950:	28c00117 	ldw	r3,4(r5)
 4006954:	20801317 	ldw	r2,76(r4)
 4006958:	18c7883a 	add	r3,r3,r3
 400695c:	18c7883a 	add	r3,r3,r3
 4006960:	10c5883a 	add	r2,r2,r3
 4006964:	10c00017 	ldw	r3,0(r2)
 4006968:	28c00015 	stw	r3,0(r5)
 400696c:	11400015 	stw	r5,0(r2)
 4006970:	f800283a 	ret

04006974 <__multadd>:
 4006974:	defffa04 	addi	sp,sp,-24
 4006978:	dc800315 	stw	r18,12(sp)
 400697c:	dc400215 	stw	r17,8(sp)
 4006980:	dc000115 	stw	r16,4(sp)
 4006984:	2823883a 	mov	r17,r5
 4006988:	2c000417 	ldw	r16,16(r5)
 400698c:	dfc00515 	stw	ra,20(sp)
 4006990:	dcc00415 	stw	r19,16(sp)
 4006994:	2025883a 	mov	r18,r4
 4006998:	29400504 	addi	r5,r5,20
 400699c:	0011883a 	mov	r8,zero
 40069a0:	28c00017 	ldw	r3,0(r5)
 40069a4:	29400104 	addi	r5,r5,4
 40069a8:	42000044 	addi	r8,r8,1
 40069ac:	18bfffcc 	andi	r2,r3,65535
 40069b0:	1185383a 	mul	r2,r2,r6
 40069b4:	1806d43a 	srli	r3,r3,16
 40069b8:	11cf883a 	add	r7,r2,r7
 40069bc:	3808d43a 	srli	r4,r7,16
 40069c0:	1987383a 	mul	r3,r3,r6
 40069c4:	38bfffcc 	andi	r2,r7,65535
 40069c8:	1907883a 	add	r3,r3,r4
 40069cc:	1808943a 	slli	r4,r3,16
 40069d0:	180ed43a 	srli	r7,r3,16
 40069d4:	2085883a 	add	r2,r4,r2
 40069d8:	28bfff15 	stw	r2,-4(r5)
 40069dc:	443ff016 	blt	r8,r16,40069a0 <__alt_mem_onchip_memory2_0+0xfbfe69a0>
 40069e0:	38000926 	beq	r7,zero,4006a08 <__multadd+0x94>
 40069e4:	88800217 	ldw	r2,8(r17)
 40069e8:	80800f0e 	bge	r16,r2,4006a28 <__multadd+0xb4>
 40069ec:	80800144 	addi	r2,r16,5
 40069f0:	1085883a 	add	r2,r2,r2
 40069f4:	1085883a 	add	r2,r2,r2
 40069f8:	8885883a 	add	r2,r17,r2
 40069fc:	11c00015 	stw	r7,0(r2)
 4006a00:	84000044 	addi	r16,r16,1
 4006a04:	8c000415 	stw	r16,16(r17)
 4006a08:	8805883a 	mov	r2,r17
 4006a0c:	dfc00517 	ldw	ra,20(sp)
 4006a10:	dcc00417 	ldw	r19,16(sp)
 4006a14:	dc800317 	ldw	r18,12(sp)
 4006a18:	dc400217 	ldw	r17,8(sp)
 4006a1c:	dc000117 	ldw	r16,4(sp)
 4006a20:	dec00604 	addi	sp,sp,24
 4006a24:	f800283a 	ret
 4006a28:	89400117 	ldw	r5,4(r17)
 4006a2c:	9009883a 	mov	r4,r18
 4006a30:	d9c00015 	stw	r7,0(sp)
 4006a34:	29400044 	addi	r5,r5,1
 4006a38:	40068a40 	call	40068a4 <_Balloc>
 4006a3c:	89800417 	ldw	r6,16(r17)
 4006a40:	89400304 	addi	r5,r17,12
 4006a44:	11000304 	addi	r4,r2,12
 4006a48:	31800084 	addi	r6,r6,2
 4006a4c:	318d883a 	add	r6,r6,r6
 4006a50:	318d883a 	add	r6,r6,r6
 4006a54:	1027883a 	mov	r19,r2
 4006a58:	40064d80 	call	40064d8 <memcpy>
 4006a5c:	d9c00017 	ldw	r7,0(sp)
 4006a60:	88000a26 	beq	r17,zero,4006a8c <__multadd+0x118>
 4006a64:	88c00117 	ldw	r3,4(r17)
 4006a68:	90801317 	ldw	r2,76(r18)
 4006a6c:	18c7883a 	add	r3,r3,r3
 4006a70:	18c7883a 	add	r3,r3,r3
 4006a74:	10c5883a 	add	r2,r2,r3
 4006a78:	10c00017 	ldw	r3,0(r2)
 4006a7c:	88c00015 	stw	r3,0(r17)
 4006a80:	14400015 	stw	r17,0(r2)
 4006a84:	9823883a 	mov	r17,r19
 4006a88:	003fd806 	br	40069ec <__alt_mem_onchip_memory2_0+0xfbfe69ec>
 4006a8c:	9823883a 	mov	r17,r19
 4006a90:	003fd606 	br	40069ec <__alt_mem_onchip_memory2_0+0xfbfe69ec>

04006a94 <__s2b>:
 4006a94:	defff904 	addi	sp,sp,-28
 4006a98:	dc400115 	stw	r17,4(sp)
 4006a9c:	dc000015 	stw	r16,0(sp)
 4006aa0:	2023883a 	mov	r17,r4
 4006aa4:	2821883a 	mov	r16,r5
 4006aa8:	39000204 	addi	r4,r7,8
 4006aac:	01400244 	movi	r5,9
 4006ab0:	dcc00315 	stw	r19,12(sp)
 4006ab4:	dc800215 	stw	r18,8(sp)
 4006ab8:	dfc00615 	stw	ra,24(sp)
 4006abc:	dd400515 	stw	r21,20(sp)
 4006ac0:	dd000415 	stw	r20,16(sp)
 4006ac4:	3825883a 	mov	r18,r7
 4006ac8:	3027883a 	mov	r19,r6
 4006acc:	400ab100 	call	400ab10 <__divsi3>
 4006ad0:	00c00044 	movi	r3,1
 4006ad4:	000b883a 	mov	r5,zero
 4006ad8:	1880030e 	bge	r3,r2,4006ae8 <__s2b+0x54>
 4006adc:	18c7883a 	add	r3,r3,r3
 4006ae0:	29400044 	addi	r5,r5,1
 4006ae4:	18bffd16 	blt	r3,r2,4006adc <__alt_mem_onchip_memory2_0+0xfbfe6adc>
 4006ae8:	8809883a 	mov	r4,r17
 4006aec:	40068a40 	call	40068a4 <_Balloc>
 4006af0:	d8c00717 	ldw	r3,28(sp)
 4006af4:	10c00515 	stw	r3,20(r2)
 4006af8:	00c00044 	movi	r3,1
 4006afc:	10c00415 	stw	r3,16(r2)
 4006b00:	00c00244 	movi	r3,9
 4006b04:	1cc0210e 	bge	r3,r19,4006b8c <__s2b+0xf8>
 4006b08:	80eb883a 	add	r21,r16,r3
 4006b0c:	a829883a 	mov	r20,r21
 4006b10:	84e1883a 	add	r16,r16,r19
 4006b14:	a1c00007 	ldb	r7,0(r20)
 4006b18:	01800284 	movi	r6,10
 4006b1c:	a5000044 	addi	r20,r20,1
 4006b20:	100b883a 	mov	r5,r2
 4006b24:	39fff404 	addi	r7,r7,-48
 4006b28:	8809883a 	mov	r4,r17
 4006b2c:	40069740 	call	4006974 <__multadd>
 4006b30:	a43ff81e 	bne	r20,r16,4006b14 <__alt_mem_onchip_memory2_0+0xfbfe6b14>
 4006b34:	ace1883a 	add	r16,r21,r19
 4006b38:	843ffe04 	addi	r16,r16,-8
 4006b3c:	9c800a0e 	bge	r19,r18,4006b68 <__s2b+0xd4>
 4006b40:	94e5c83a 	sub	r18,r18,r19
 4006b44:	84a5883a 	add	r18,r16,r18
 4006b48:	81c00007 	ldb	r7,0(r16)
 4006b4c:	01800284 	movi	r6,10
 4006b50:	84000044 	addi	r16,r16,1
 4006b54:	100b883a 	mov	r5,r2
 4006b58:	39fff404 	addi	r7,r7,-48
 4006b5c:	8809883a 	mov	r4,r17
 4006b60:	40069740 	call	4006974 <__multadd>
 4006b64:	84bff81e 	bne	r16,r18,4006b48 <__alt_mem_onchip_memory2_0+0xfbfe6b48>
 4006b68:	dfc00617 	ldw	ra,24(sp)
 4006b6c:	dd400517 	ldw	r21,20(sp)
 4006b70:	dd000417 	ldw	r20,16(sp)
 4006b74:	dcc00317 	ldw	r19,12(sp)
 4006b78:	dc800217 	ldw	r18,8(sp)
 4006b7c:	dc400117 	ldw	r17,4(sp)
 4006b80:	dc000017 	ldw	r16,0(sp)
 4006b84:	dec00704 	addi	sp,sp,28
 4006b88:	f800283a 	ret
 4006b8c:	84000284 	addi	r16,r16,10
 4006b90:	1827883a 	mov	r19,r3
 4006b94:	003fe906 	br	4006b3c <__alt_mem_onchip_memory2_0+0xfbfe6b3c>

04006b98 <__hi0bits>:
 4006b98:	20bfffec 	andhi	r2,r4,65535
 4006b9c:	1000141e 	bne	r2,zero,4006bf0 <__hi0bits+0x58>
 4006ba0:	2008943a 	slli	r4,r4,16
 4006ba4:	00800404 	movi	r2,16
 4006ba8:	20ffc02c 	andhi	r3,r4,65280
 4006bac:	1800021e 	bne	r3,zero,4006bb8 <__hi0bits+0x20>
 4006bb0:	2008923a 	slli	r4,r4,8
 4006bb4:	10800204 	addi	r2,r2,8
 4006bb8:	20fc002c 	andhi	r3,r4,61440
 4006bbc:	1800021e 	bne	r3,zero,4006bc8 <__hi0bits+0x30>
 4006bc0:	2008913a 	slli	r4,r4,4
 4006bc4:	10800104 	addi	r2,r2,4
 4006bc8:	20f0002c 	andhi	r3,r4,49152
 4006bcc:	1800031e 	bne	r3,zero,4006bdc <__hi0bits+0x44>
 4006bd0:	2109883a 	add	r4,r4,r4
 4006bd4:	10800084 	addi	r2,r2,2
 4006bd8:	2109883a 	add	r4,r4,r4
 4006bdc:	20000316 	blt	r4,zero,4006bec <__hi0bits+0x54>
 4006be0:	2110002c 	andhi	r4,r4,16384
 4006be4:	2000041e 	bne	r4,zero,4006bf8 <__hi0bits+0x60>
 4006be8:	00800804 	movi	r2,32
 4006bec:	f800283a 	ret
 4006bf0:	0005883a 	mov	r2,zero
 4006bf4:	003fec06 	br	4006ba8 <__alt_mem_onchip_memory2_0+0xfbfe6ba8>
 4006bf8:	10800044 	addi	r2,r2,1
 4006bfc:	f800283a 	ret

04006c00 <__lo0bits>:
 4006c00:	20c00017 	ldw	r3,0(r4)
 4006c04:	188001cc 	andi	r2,r3,7
 4006c08:	10000826 	beq	r2,zero,4006c2c <__lo0bits+0x2c>
 4006c0c:	1880004c 	andi	r2,r3,1
 4006c10:	1000211e 	bne	r2,zero,4006c98 <__lo0bits+0x98>
 4006c14:	1880008c 	andi	r2,r3,2
 4006c18:	1000211e 	bne	r2,zero,4006ca0 <__lo0bits+0xa0>
 4006c1c:	1806d0ba 	srli	r3,r3,2
 4006c20:	00800084 	movi	r2,2
 4006c24:	20c00015 	stw	r3,0(r4)
 4006c28:	f800283a 	ret
 4006c2c:	18bfffcc 	andi	r2,r3,65535
 4006c30:	10001326 	beq	r2,zero,4006c80 <__lo0bits+0x80>
 4006c34:	0005883a 	mov	r2,zero
 4006c38:	19403fcc 	andi	r5,r3,255
 4006c3c:	2800021e 	bne	r5,zero,4006c48 <__lo0bits+0x48>
 4006c40:	1806d23a 	srli	r3,r3,8
 4006c44:	10800204 	addi	r2,r2,8
 4006c48:	194003cc 	andi	r5,r3,15
 4006c4c:	2800021e 	bne	r5,zero,4006c58 <__lo0bits+0x58>
 4006c50:	1806d13a 	srli	r3,r3,4
 4006c54:	10800104 	addi	r2,r2,4
 4006c58:	194000cc 	andi	r5,r3,3
 4006c5c:	2800021e 	bne	r5,zero,4006c68 <__lo0bits+0x68>
 4006c60:	1806d0ba 	srli	r3,r3,2
 4006c64:	10800084 	addi	r2,r2,2
 4006c68:	1940004c 	andi	r5,r3,1
 4006c6c:	2800081e 	bne	r5,zero,4006c90 <__lo0bits+0x90>
 4006c70:	1806d07a 	srli	r3,r3,1
 4006c74:	1800051e 	bne	r3,zero,4006c8c <__lo0bits+0x8c>
 4006c78:	00800804 	movi	r2,32
 4006c7c:	f800283a 	ret
 4006c80:	1806d43a 	srli	r3,r3,16
 4006c84:	00800404 	movi	r2,16
 4006c88:	003feb06 	br	4006c38 <__alt_mem_onchip_memory2_0+0xfbfe6c38>
 4006c8c:	10800044 	addi	r2,r2,1
 4006c90:	20c00015 	stw	r3,0(r4)
 4006c94:	f800283a 	ret
 4006c98:	0005883a 	mov	r2,zero
 4006c9c:	f800283a 	ret
 4006ca0:	1806d07a 	srli	r3,r3,1
 4006ca4:	00800044 	movi	r2,1
 4006ca8:	20c00015 	stw	r3,0(r4)
 4006cac:	f800283a 	ret

04006cb0 <__i2b>:
 4006cb0:	defffd04 	addi	sp,sp,-12
 4006cb4:	dc000015 	stw	r16,0(sp)
 4006cb8:	04000044 	movi	r16,1
 4006cbc:	dc400115 	stw	r17,4(sp)
 4006cc0:	2823883a 	mov	r17,r5
 4006cc4:	800b883a 	mov	r5,r16
 4006cc8:	dfc00215 	stw	ra,8(sp)
 4006ccc:	40068a40 	call	40068a4 <_Balloc>
 4006cd0:	14400515 	stw	r17,20(r2)
 4006cd4:	14000415 	stw	r16,16(r2)
 4006cd8:	dfc00217 	ldw	ra,8(sp)
 4006cdc:	dc400117 	ldw	r17,4(sp)
 4006ce0:	dc000017 	ldw	r16,0(sp)
 4006ce4:	dec00304 	addi	sp,sp,12
 4006ce8:	f800283a 	ret

04006cec <__multiply>:
 4006cec:	defffa04 	addi	sp,sp,-24
 4006cf0:	dcc00315 	stw	r19,12(sp)
 4006cf4:	dc800215 	stw	r18,8(sp)
 4006cf8:	34c00417 	ldw	r19,16(r6)
 4006cfc:	2c800417 	ldw	r18,16(r5)
 4006d00:	dd000415 	stw	r20,16(sp)
 4006d04:	dc400115 	stw	r17,4(sp)
 4006d08:	dfc00515 	stw	ra,20(sp)
 4006d0c:	dc000015 	stw	r16,0(sp)
 4006d10:	2829883a 	mov	r20,r5
 4006d14:	3023883a 	mov	r17,r6
 4006d18:	94c0050e 	bge	r18,r19,4006d30 <__multiply+0x44>
 4006d1c:	9007883a 	mov	r3,r18
 4006d20:	3029883a 	mov	r20,r6
 4006d24:	9825883a 	mov	r18,r19
 4006d28:	2823883a 	mov	r17,r5
 4006d2c:	1827883a 	mov	r19,r3
 4006d30:	a0800217 	ldw	r2,8(r20)
 4006d34:	94e1883a 	add	r16,r18,r19
 4006d38:	a1400117 	ldw	r5,4(r20)
 4006d3c:	1400010e 	bge	r2,r16,4006d44 <__multiply+0x58>
 4006d40:	29400044 	addi	r5,r5,1
 4006d44:	40068a40 	call	40068a4 <_Balloc>
 4006d48:	8415883a 	add	r10,r16,r16
 4006d4c:	12c00504 	addi	r11,r2,20
 4006d50:	5295883a 	add	r10,r10,r10
 4006d54:	5a95883a 	add	r10,r11,r10
 4006d58:	5807883a 	mov	r3,r11
 4006d5c:	5a80032e 	bgeu	r11,r10,4006d6c <__multiply+0x80>
 4006d60:	18000015 	stw	zero,0(r3)
 4006d64:	18c00104 	addi	r3,r3,4
 4006d68:	1abffd36 	bltu	r3,r10,4006d60 <__alt_mem_onchip_memory2_0+0xfbfe6d60>
 4006d6c:	9ce7883a 	add	r19,r19,r19
 4006d70:	94a5883a 	add	r18,r18,r18
 4006d74:	89800504 	addi	r6,r17,20
 4006d78:	9ce7883a 	add	r19,r19,r19
 4006d7c:	a3400504 	addi	r13,r20,20
 4006d80:	94a5883a 	add	r18,r18,r18
 4006d84:	34d9883a 	add	r12,r6,r19
 4006d88:	6c93883a 	add	r9,r13,r18
 4006d8c:	3300422e 	bgeu	r6,r12,4006e98 <__multiply+0x1ac>
 4006d90:	37c00017 	ldw	ra,0(r6)
 4006d94:	fbffffcc 	andi	r15,ra,65535
 4006d98:	78001b26 	beq	r15,zero,4006e08 <__multiply+0x11c>
 4006d9c:	5811883a 	mov	r8,r11
 4006da0:	681d883a 	mov	r14,r13
 4006da4:	000f883a 	mov	r7,zero
 4006da8:	71000017 	ldw	r4,0(r14)
 4006dac:	40c00017 	ldw	r3,0(r8)
 4006db0:	73800104 	addi	r14,r14,4
 4006db4:	217fffcc 	andi	r5,r4,65535
 4006db8:	2bcb383a 	mul	r5,r5,r15
 4006dbc:	2008d43a 	srli	r4,r4,16
 4006dc0:	1c7fffcc 	andi	r17,r3,65535
 4006dc4:	2c4b883a 	add	r5,r5,r17
 4006dc8:	29cb883a 	add	r5,r5,r7
 4006dcc:	23c9383a 	mul	r4,r4,r15
 4006dd0:	1806d43a 	srli	r3,r3,16
 4006dd4:	280ed43a 	srli	r7,r5,16
 4006dd8:	297fffcc 	andi	r5,r5,65535
 4006ddc:	20c7883a 	add	r3,r4,r3
 4006de0:	19c7883a 	add	r3,r3,r7
 4006de4:	1808943a 	slli	r4,r3,16
 4006de8:	4023883a 	mov	r17,r8
 4006dec:	180ed43a 	srli	r7,r3,16
 4006df0:	214ab03a 	or	r5,r4,r5
 4006df4:	41400015 	stw	r5,0(r8)
 4006df8:	42000104 	addi	r8,r8,4
 4006dfc:	727fea36 	bltu	r14,r9,4006da8 <__alt_mem_onchip_memory2_0+0xfbfe6da8>
 4006e00:	89c00115 	stw	r7,4(r17)
 4006e04:	37c00017 	ldw	ra,0(r6)
 4006e08:	f83ed43a 	srli	ra,ra,16
 4006e0c:	f8001f26 	beq	ra,zero,4006e8c <__multiply+0x1a0>
 4006e10:	58c00017 	ldw	r3,0(r11)
 4006e14:	681d883a 	mov	r14,r13
 4006e18:	581f883a 	mov	r15,r11
 4006e1c:	1811883a 	mov	r8,r3
 4006e20:	5825883a 	mov	r18,r11
 4006e24:	000f883a 	mov	r7,zero
 4006e28:	00000106 	br	4006e30 <__multiply+0x144>
 4006e2c:	8825883a 	mov	r18,r17
 4006e30:	7140000b 	ldhu	r5,0(r14)
 4006e34:	4010d43a 	srli	r8,r8,16
 4006e38:	193fffcc 	andi	r4,r3,65535
 4006e3c:	2fcb383a 	mul	r5,r5,ra
 4006e40:	7bc00104 	addi	r15,r15,4
 4006e44:	73800104 	addi	r14,r14,4
 4006e48:	2a0b883a 	add	r5,r5,r8
 4006e4c:	29cb883a 	add	r5,r5,r7
 4006e50:	2806943a 	slli	r3,r5,16
 4006e54:	94400104 	addi	r17,r18,4
 4006e58:	280ad43a 	srli	r5,r5,16
 4006e5c:	1908b03a 	or	r4,r3,r4
 4006e60:	793fff15 	stw	r4,-4(r15)
 4006e64:	70ffff17 	ldw	r3,-4(r14)
 4006e68:	8a000017 	ldw	r8,0(r17)
 4006e6c:	1806d43a 	srli	r3,r3,16
 4006e70:	413fffcc 	andi	r4,r8,65535
 4006e74:	1fc7383a 	mul	r3,r3,ra
 4006e78:	1907883a 	add	r3,r3,r4
 4006e7c:	1947883a 	add	r3,r3,r5
 4006e80:	180ed43a 	srli	r7,r3,16
 4006e84:	727fe936 	bltu	r14,r9,4006e2c <__alt_mem_onchip_memory2_0+0xfbfe6e2c>
 4006e88:	90c00115 	stw	r3,4(r18)
 4006e8c:	31800104 	addi	r6,r6,4
 4006e90:	5ac00104 	addi	r11,r11,4
 4006e94:	333fbe36 	bltu	r6,r12,4006d90 <__alt_mem_onchip_memory2_0+0xfbfe6d90>
 4006e98:	0400090e 	bge	zero,r16,4006ec0 <__multiply+0x1d4>
 4006e9c:	50ffff17 	ldw	r3,-4(r10)
 4006ea0:	52bfff04 	addi	r10,r10,-4
 4006ea4:	18000326 	beq	r3,zero,4006eb4 <__multiply+0x1c8>
 4006ea8:	00000506 	br	4006ec0 <__multiply+0x1d4>
 4006eac:	50c00017 	ldw	r3,0(r10)
 4006eb0:	1800031e 	bne	r3,zero,4006ec0 <__multiply+0x1d4>
 4006eb4:	843fffc4 	addi	r16,r16,-1
 4006eb8:	52bfff04 	addi	r10,r10,-4
 4006ebc:	803ffb1e 	bne	r16,zero,4006eac <__alt_mem_onchip_memory2_0+0xfbfe6eac>
 4006ec0:	14000415 	stw	r16,16(r2)
 4006ec4:	dfc00517 	ldw	ra,20(sp)
 4006ec8:	dd000417 	ldw	r20,16(sp)
 4006ecc:	dcc00317 	ldw	r19,12(sp)
 4006ed0:	dc800217 	ldw	r18,8(sp)
 4006ed4:	dc400117 	ldw	r17,4(sp)
 4006ed8:	dc000017 	ldw	r16,0(sp)
 4006edc:	dec00604 	addi	sp,sp,24
 4006ee0:	f800283a 	ret

04006ee4 <__pow5mult>:
 4006ee4:	defffa04 	addi	sp,sp,-24
 4006ee8:	dcc00315 	stw	r19,12(sp)
 4006eec:	dc000015 	stw	r16,0(sp)
 4006ef0:	dfc00515 	stw	ra,20(sp)
 4006ef4:	dd000415 	stw	r20,16(sp)
 4006ef8:	dc800215 	stw	r18,8(sp)
 4006efc:	dc400115 	stw	r17,4(sp)
 4006f00:	308000cc 	andi	r2,r6,3
 4006f04:	3021883a 	mov	r16,r6
 4006f08:	2027883a 	mov	r19,r4
 4006f0c:	10002f1e 	bne	r2,zero,4006fcc <__pow5mult+0xe8>
 4006f10:	2825883a 	mov	r18,r5
 4006f14:	8021d0ba 	srai	r16,r16,2
 4006f18:	80001a26 	beq	r16,zero,4006f84 <__pow5mult+0xa0>
 4006f1c:	9c401217 	ldw	r17,72(r19)
 4006f20:	8800061e 	bne	r17,zero,4006f3c <__pow5mult+0x58>
 4006f24:	00003406 	br	4006ff8 <__pow5mult+0x114>
 4006f28:	8021d07a 	srai	r16,r16,1
 4006f2c:	80001526 	beq	r16,zero,4006f84 <__pow5mult+0xa0>
 4006f30:	88800017 	ldw	r2,0(r17)
 4006f34:	10001c26 	beq	r2,zero,4006fa8 <__pow5mult+0xc4>
 4006f38:	1023883a 	mov	r17,r2
 4006f3c:	8080004c 	andi	r2,r16,1
 4006f40:	103ff926 	beq	r2,zero,4006f28 <__alt_mem_onchip_memory2_0+0xfbfe6f28>
 4006f44:	880d883a 	mov	r6,r17
 4006f48:	900b883a 	mov	r5,r18
 4006f4c:	9809883a 	mov	r4,r19
 4006f50:	4006cec0 	call	4006cec <__multiply>
 4006f54:	90001b26 	beq	r18,zero,4006fc4 <__pow5mult+0xe0>
 4006f58:	91000117 	ldw	r4,4(r18)
 4006f5c:	98c01317 	ldw	r3,76(r19)
 4006f60:	8021d07a 	srai	r16,r16,1
 4006f64:	2109883a 	add	r4,r4,r4
 4006f68:	2109883a 	add	r4,r4,r4
 4006f6c:	1907883a 	add	r3,r3,r4
 4006f70:	19000017 	ldw	r4,0(r3)
 4006f74:	91000015 	stw	r4,0(r18)
 4006f78:	1c800015 	stw	r18,0(r3)
 4006f7c:	1025883a 	mov	r18,r2
 4006f80:	803feb1e 	bne	r16,zero,4006f30 <__alt_mem_onchip_memory2_0+0xfbfe6f30>
 4006f84:	9005883a 	mov	r2,r18
 4006f88:	dfc00517 	ldw	ra,20(sp)
 4006f8c:	dd000417 	ldw	r20,16(sp)
 4006f90:	dcc00317 	ldw	r19,12(sp)
 4006f94:	dc800217 	ldw	r18,8(sp)
 4006f98:	dc400117 	ldw	r17,4(sp)
 4006f9c:	dc000017 	ldw	r16,0(sp)
 4006fa0:	dec00604 	addi	sp,sp,24
 4006fa4:	f800283a 	ret
 4006fa8:	880d883a 	mov	r6,r17
 4006fac:	880b883a 	mov	r5,r17
 4006fb0:	9809883a 	mov	r4,r19
 4006fb4:	4006cec0 	call	4006cec <__multiply>
 4006fb8:	88800015 	stw	r2,0(r17)
 4006fbc:	10000015 	stw	zero,0(r2)
 4006fc0:	003fdd06 	br	4006f38 <__alt_mem_onchip_memory2_0+0xfbfe6f38>
 4006fc4:	1025883a 	mov	r18,r2
 4006fc8:	003fd706 	br	4006f28 <__alt_mem_onchip_memory2_0+0xfbfe6f28>
 4006fcc:	10bfffc4 	addi	r2,r2,-1
 4006fd0:	1085883a 	add	r2,r2,r2
 4006fd4:	00c100b4 	movhi	r3,1026
 4006fd8:	18e22b04 	addi	r3,r3,-30548
 4006fdc:	1085883a 	add	r2,r2,r2
 4006fe0:	1885883a 	add	r2,r3,r2
 4006fe4:	11800017 	ldw	r6,0(r2)
 4006fe8:	000f883a 	mov	r7,zero
 4006fec:	40069740 	call	4006974 <__multadd>
 4006ff0:	1025883a 	mov	r18,r2
 4006ff4:	003fc706 	br	4006f14 <__alt_mem_onchip_memory2_0+0xfbfe6f14>
 4006ff8:	05000044 	movi	r20,1
 4006ffc:	a00b883a 	mov	r5,r20
 4007000:	9809883a 	mov	r4,r19
 4007004:	40068a40 	call	40068a4 <_Balloc>
 4007008:	1023883a 	mov	r17,r2
 400700c:	00809c44 	movi	r2,625
 4007010:	88800515 	stw	r2,20(r17)
 4007014:	8d000415 	stw	r20,16(r17)
 4007018:	9c401215 	stw	r17,72(r19)
 400701c:	88000015 	stw	zero,0(r17)
 4007020:	003fc606 	br	4006f3c <__alt_mem_onchip_memory2_0+0xfbfe6f3c>

04007024 <__lshift>:
 4007024:	defff904 	addi	sp,sp,-28
 4007028:	dd400515 	stw	r21,20(sp)
 400702c:	dcc00315 	stw	r19,12(sp)
 4007030:	302bd17a 	srai	r21,r6,5
 4007034:	2cc00417 	ldw	r19,16(r5)
 4007038:	28800217 	ldw	r2,8(r5)
 400703c:	dd000415 	stw	r20,16(sp)
 4007040:	ace7883a 	add	r19,r21,r19
 4007044:	dc800215 	stw	r18,8(sp)
 4007048:	dc400115 	stw	r17,4(sp)
 400704c:	dc000015 	stw	r16,0(sp)
 4007050:	dfc00615 	stw	ra,24(sp)
 4007054:	9c000044 	addi	r16,r19,1
 4007058:	2823883a 	mov	r17,r5
 400705c:	3029883a 	mov	r20,r6
 4007060:	2025883a 	mov	r18,r4
 4007064:	29400117 	ldw	r5,4(r5)
 4007068:	1400030e 	bge	r2,r16,4007078 <__lshift+0x54>
 400706c:	1085883a 	add	r2,r2,r2
 4007070:	29400044 	addi	r5,r5,1
 4007074:	143ffd16 	blt	r2,r16,400706c <__alt_mem_onchip_memory2_0+0xfbfe706c>
 4007078:	9009883a 	mov	r4,r18
 400707c:	40068a40 	call	40068a4 <_Balloc>
 4007080:	10c00504 	addi	r3,r2,20
 4007084:	0540070e 	bge	zero,r21,40070a4 <__lshift+0x80>
 4007088:	ad6b883a 	add	r21,r21,r21
 400708c:	ad6b883a 	add	r21,r21,r21
 4007090:	1809883a 	mov	r4,r3
 4007094:	1d47883a 	add	r3,r3,r21
 4007098:	20000015 	stw	zero,0(r4)
 400709c:	21000104 	addi	r4,r4,4
 40070a0:	193ffd1e 	bne	r3,r4,4007098 <__alt_mem_onchip_memory2_0+0xfbfe7098>
 40070a4:	8a000417 	ldw	r8,16(r17)
 40070a8:	89000504 	addi	r4,r17,20
 40070ac:	a18007cc 	andi	r6,r20,31
 40070b0:	4211883a 	add	r8,r8,r8
 40070b4:	4211883a 	add	r8,r8,r8
 40070b8:	2211883a 	add	r8,r4,r8
 40070bc:	30002326 	beq	r6,zero,400714c <__lshift+0x128>
 40070c0:	02400804 	movi	r9,32
 40070c4:	4993c83a 	sub	r9,r9,r6
 40070c8:	000b883a 	mov	r5,zero
 40070cc:	21c00017 	ldw	r7,0(r4)
 40070d0:	1815883a 	mov	r10,r3
 40070d4:	18c00104 	addi	r3,r3,4
 40070d8:	398e983a 	sll	r7,r7,r6
 40070dc:	21000104 	addi	r4,r4,4
 40070e0:	394ab03a 	or	r5,r7,r5
 40070e4:	197fff15 	stw	r5,-4(r3)
 40070e8:	217fff17 	ldw	r5,-4(r4)
 40070ec:	2a4ad83a 	srl	r5,r5,r9
 40070f0:	223ff636 	bltu	r4,r8,40070cc <__alt_mem_onchip_memory2_0+0xfbfe70cc>
 40070f4:	51400115 	stw	r5,4(r10)
 40070f8:	28001a1e 	bne	r5,zero,4007164 <__lshift+0x140>
 40070fc:	843fffc4 	addi	r16,r16,-1
 4007100:	14000415 	stw	r16,16(r2)
 4007104:	88000826 	beq	r17,zero,4007128 <__lshift+0x104>
 4007108:	89000117 	ldw	r4,4(r17)
 400710c:	90c01317 	ldw	r3,76(r18)
 4007110:	2109883a 	add	r4,r4,r4
 4007114:	2109883a 	add	r4,r4,r4
 4007118:	1907883a 	add	r3,r3,r4
 400711c:	19000017 	ldw	r4,0(r3)
 4007120:	89000015 	stw	r4,0(r17)
 4007124:	1c400015 	stw	r17,0(r3)
 4007128:	dfc00617 	ldw	ra,24(sp)
 400712c:	dd400517 	ldw	r21,20(sp)
 4007130:	dd000417 	ldw	r20,16(sp)
 4007134:	dcc00317 	ldw	r19,12(sp)
 4007138:	dc800217 	ldw	r18,8(sp)
 400713c:	dc400117 	ldw	r17,4(sp)
 4007140:	dc000017 	ldw	r16,0(sp)
 4007144:	dec00704 	addi	sp,sp,28
 4007148:	f800283a 	ret
 400714c:	21400017 	ldw	r5,0(r4)
 4007150:	18c00104 	addi	r3,r3,4
 4007154:	21000104 	addi	r4,r4,4
 4007158:	197fff15 	stw	r5,-4(r3)
 400715c:	223ffb36 	bltu	r4,r8,400714c <__alt_mem_onchip_memory2_0+0xfbfe714c>
 4007160:	003fe606 	br	40070fc <__alt_mem_onchip_memory2_0+0xfbfe70fc>
 4007164:	9c000084 	addi	r16,r19,2
 4007168:	003fe406 	br	40070fc <__alt_mem_onchip_memory2_0+0xfbfe70fc>

0400716c <__mcmp>:
 400716c:	20800417 	ldw	r2,16(r4)
 4007170:	28c00417 	ldw	r3,16(r5)
 4007174:	10c5c83a 	sub	r2,r2,r3
 4007178:	1000111e 	bne	r2,zero,40071c0 <__mcmp+0x54>
 400717c:	18c7883a 	add	r3,r3,r3
 4007180:	18c7883a 	add	r3,r3,r3
 4007184:	21000504 	addi	r4,r4,20
 4007188:	29400504 	addi	r5,r5,20
 400718c:	20c5883a 	add	r2,r4,r3
 4007190:	28cb883a 	add	r5,r5,r3
 4007194:	00000106 	br	400719c <__mcmp+0x30>
 4007198:	20800a2e 	bgeu	r4,r2,40071c4 <__mcmp+0x58>
 400719c:	10bfff04 	addi	r2,r2,-4
 40071a0:	297fff04 	addi	r5,r5,-4
 40071a4:	11800017 	ldw	r6,0(r2)
 40071a8:	28c00017 	ldw	r3,0(r5)
 40071ac:	30fffa26 	beq	r6,r3,4007198 <__alt_mem_onchip_memory2_0+0xfbfe7198>
 40071b0:	30c00236 	bltu	r6,r3,40071bc <__mcmp+0x50>
 40071b4:	00800044 	movi	r2,1
 40071b8:	f800283a 	ret
 40071bc:	00bfffc4 	movi	r2,-1
 40071c0:	f800283a 	ret
 40071c4:	0005883a 	mov	r2,zero
 40071c8:	f800283a 	ret

040071cc <__mdiff>:
 40071cc:	28c00417 	ldw	r3,16(r5)
 40071d0:	30800417 	ldw	r2,16(r6)
 40071d4:	defffa04 	addi	sp,sp,-24
 40071d8:	dcc00315 	stw	r19,12(sp)
 40071dc:	dc800215 	stw	r18,8(sp)
 40071e0:	dfc00515 	stw	ra,20(sp)
 40071e4:	dd000415 	stw	r20,16(sp)
 40071e8:	dc400115 	stw	r17,4(sp)
 40071ec:	dc000015 	stw	r16,0(sp)
 40071f0:	1887c83a 	sub	r3,r3,r2
 40071f4:	2825883a 	mov	r18,r5
 40071f8:	3027883a 	mov	r19,r6
 40071fc:	1800141e 	bne	r3,zero,4007250 <__mdiff+0x84>
 4007200:	1085883a 	add	r2,r2,r2
 4007204:	1085883a 	add	r2,r2,r2
 4007208:	2a000504 	addi	r8,r5,20
 400720c:	34000504 	addi	r16,r6,20
 4007210:	4087883a 	add	r3,r8,r2
 4007214:	8085883a 	add	r2,r16,r2
 4007218:	00000106 	br	4007220 <__mdiff+0x54>
 400721c:	40c0592e 	bgeu	r8,r3,4007384 <__mdiff+0x1b8>
 4007220:	18ffff04 	addi	r3,r3,-4
 4007224:	10bfff04 	addi	r2,r2,-4
 4007228:	19c00017 	ldw	r7,0(r3)
 400722c:	11400017 	ldw	r5,0(r2)
 4007230:	397ffa26 	beq	r7,r5,400721c <__alt_mem_onchip_memory2_0+0xfbfe721c>
 4007234:	3940592e 	bgeu	r7,r5,400739c <__mdiff+0x1d0>
 4007238:	9005883a 	mov	r2,r18
 400723c:	4023883a 	mov	r17,r8
 4007240:	9825883a 	mov	r18,r19
 4007244:	05000044 	movi	r20,1
 4007248:	1027883a 	mov	r19,r2
 400724c:	00000406 	br	4007260 <__mdiff+0x94>
 4007250:	18005616 	blt	r3,zero,40073ac <__mdiff+0x1e0>
 4007254:	34400504 	addi	r17,r6,20
 4007258:	2c000504 	addi	r16,r5,20
 400725c:	0029883a 	mov	r20,zero
 4007260:	91400117 	ldw	r5,4(r18)
 4007264:	40068a40 	call	40068a4 <_Balloc>
 4007268:	92400417 	ldw	r9,16(r18)
 400726c:	9b000417 	ldw	r12,16(r19)
 4007270:	12c00504 	addi	r11,r2,20
 4007274:	4a51883a 	add	r8,r9,r9
 4007278:	6319883a 	add	r12,r12,r12
 400727c:	4211883a 	add	r8,r8,r8
 4007280:	6319883a 	add	r12,r12,r12
 4007284:	15000315 	stw	r20,12(r2)
 4007288:	8211883a 	add	r8,r16,r8
 400728c:	8b19883a 	add	r12,r17,r12
 4007290:	0007883a 	mov	r3,zero
 4007294:	81400017 	ldw	r5,0(r16)
 4007298:	89c00017 	ldw	r7,0(r17)
 400729c:	59800104 	addi	r6,r11,4
 40072a0:	293fffcc 	andi	r4,r5,65535
 40072a4:	20c7883a 	add	r3,r4,r3
 40072a8:	393fffcc 	andi	r4,r7,65535
 40072ac:	1909c83a 	sub	r4,r3,r4
 40072b0:	280ad43a 	srli	r5,r5,16
 40072b4:	380ed43a 	srli	r7,r7,16
 40072b8:	2007d43a 	srai	r3,r4,16
 40072bc:	213fffcc 	andi	r4,r4,65535
 40072c0:	29cbc83a 	sub	r5,r5,r7
 40072c4:	28c7883a 	add	r3,r5,r3
 40072c8:	180a943a 	slli	r5,r3,16
 40072cc:	8c400104 	addi	r17,r17,4
 40072d0:	84000104 	addi	r16,r16,4
 40072d4:	2908b03a 	or	r4,r5,r4
 40072d8:	59000015 	stw	r4,0(r11)
 40072dc:	1807d43a 	srai	r3,r3,16
 40072e0:	3015883a 	mov	r10,r6
 40072e4:	3017883a 	mov	r11,r6
 40072e8:	8b3fea36 	bltu	r17,r12,4007294 <__alt_mem_onchip_memory2_0+0xfbfe7294>
 40072ec:	8200162e 	bgeu	r16,r8,4007348 <__mdiff+0x17c>
 40072f0:	8017883a 	mov	r11,r16
 40072f4:	59400017 	ldw	r5,0(r11)
 40072f8:	31800104 	addi	r6,r6,4
 40072fc:	5ac00104 	addi	r11,r11,4
 4007300:	293fffcc 	andi	r4,r5,65535
 4007304:	20c7883a 	add	r3,r4,r3
 4007308:	280ed43a 	srli	r7,r5,16
 400730c:	180bd43a 	srai	r5,r3,16
 4007310:	193fffcc 	andi	r4,r3,65535
 4007314:	3947883a 	add	r3,r7,r5
 4007318:	180a943a 	slli	r5,r3,16
 400731c:	1807d43a 	srai	r3,r3,16
 4007320:	2908b03a 	or	r4,r5,r4
 4007324:	313fff15 	stw	r4,-4(r6)
 4007328:	5a3ff236 	bltu	r11,r8,40072f4 <__alt_mem_onchip_memory2_0+0xfbfe72f4>
 400732c:	0406303a 	nor	r3,zero,r16
 4007330:	1a07883a 	add	r3,r3,r8
 4007334:	1806d0ba 	srli	r3,r3,2
 4007338:	18c00044 	addi	r3,r3,1
 400733c:	18c7883a 	add	r3,r3,r3
 4007340:	18c7883a 	add	r3,r3,r3
 4007344:	50d5883a 	add	r10,r10,r3
 4007348:	50ffff04 	addi	r3,r10,-4
 400734c:	2000041e 	bne	r4,zero,4007360 <__mdiff+0x194>
 4007350:	18ffff04 	addi	r3,r3,-4
 4007354:	19000017 	ldw	r4,0(r3)
 4007358:	4a7fffc4 	addi	r9,r9,-1
 400735c:	203ffc26 	beq	r4,zero,4007350 <__alt_mem_onchip_memory2_0+0xfbfe7350>
 4007360:	12400415 	stw	r9,16(r2)
 4007364:	dfc00517 	ldw	ra,20(sp)
 4007368:	dd000417 	ldw	r20,16(sp)
 400736c:	dcc00317 	ldw	r19,12(sp)
 4007370:	dc800217 	ldw	r18,8(sp)
 4007374:	dc400117 	ldw	r17,4(sp)
 4007378:	dc000017 	ldw	r16,0(sp)
 400737c:	dec00604 	addi	sp,sp,24
 4007380:	f800283a 	ret
 4007384:	000b883a 	mov	r5,zero
 4007388:	40068a40 	call	40068a4 <_Balloc>
 400738c:	00c00044 	movi	r3,1
 4007390:	10c00415 	stw	r3,16(r2)
 4007394:	10000515 	stw	zero,20(r2)
 4007398:	003ff206 	br	4007364 <__alt_mem_onchip_memory2_0+0xfbfe7364>
 400739c:	8023883a 	mov	r17,r16
 40073a0:	0029883a 	mov	r20,zero
 40073a4:	4021883a 	mov	r16,r8
 40073a8:	003fad06 	br	4007260 <__alt_mem_onchip_memory2_0+0xfbfe7260>
 40073ac:	9005883a 	mov	r2,r18
 40073b0:	94400504 	addi	r17,r18,20
 40073b4:	9c000504 	addi	r16,r19,20
 40073b8:	9825883a 	mov	r18,r19
 40073bc:	05000044 	movi	r20,1
 40073c0:	1027883a 	mov	r19,r2
 40073c4:	003fa606 	br	4007260 <__alt_mem_onchip_memory2_0+0xfbfe7260>

040073c8 <__ulp>:
 40073c8:	295ffc2c 	andhi	r5,r5,32752
 40073cc:	00bf3034 	movhi	r2,64704
 40073d0:	2887883a 	add	r3,r5,r2
 40073d4:	00c0020e 	bge	zero,r3,40073e0 <__ulp+0x18>
 40073d8:	0005883a 	mov	r2,zero
 40073dc:	f800283a 	ret
 40073e0:	00c7c83a 	sub	r3,zero,r3
 40073e4:	1807d53a 	srai	r3,r3,20
 40073e8:	008004c4 	movi	r2,19
 40073ec:	10c00b0e 	bge	r2,r3,400741c <__ulp+0x54>
 40073f0:	18bffb04 	addi	r2,r3,-20
 40073f4:	01000784 	movi	r4,30
 40073f8:	0007883a 	mov	r3,zero
 40073fc:	20800516 	blt	r4,r2,4007414 <__ulp+0x4c>
 4007400:	010007c4 	movi	r4,31
 4007404:	2089c83a 	sub	r4,r4,r2
 4007408:	00800044 	movi	r2,1
 400740c:	1104983a 	sll	r2,r2,r4
 4007410:	f800283a 	ret
 4007414:	00800044 	movi	r2,1
 4007418:	f800283a 	ret
 400741c:	01400234 	movhi	r5,8
 4007420:	28c7d83a 	sra	r3,r5,r3
 4007424:	0005883a 	mov	r2,zero
 4007428:	f800283a 	ret

0400742c <__b2d>:
 400742c:	defffa04 	addi	sp,sp,-24
 4007430:	dc000015 	stw	r16,0(sp)
 4007434:	24000417 	ldw	r16,16(r4)
 4007438:	dc400115 	stw	r17,4(sp)
 400743c:	24400504 	addi	r17,r4,20
 4007440:	8421883a 	add	r16,r16,r16
 4007444:	8421883a 	add	r16,r16,r16
 4007448:	8c21883a 	add	r16,r17,r16
 400744c:	dc800215 	stw	r18,8(sp)
 4007450:	84bfff17 	ldw	r18,-4(r16)
 4007454:	dd000415 	stw	r20,16(sp)
 4007458:	dcc00315 	stw	r19,12(sp)
 400745c:	9009883a 	mov	r4,r18
 4007460:	2829883a 	mov	r20,r5
 4007464:	dfc00515 	stw	ra,20(sp)
 4007468:	4006b980 	call	4006b98 <__hi0bits>
 400746c:	00c00804 	movi	r3,32
 4007470:	1889c83a 	sub	r4,r3,r2
 4007474:	a1000015 	stw	r4,0(r20)
 4007478:	01000284 	movi	r4,10
 400747c:	84ffff04 	addi	r19,r16,-4
 4007480:	20801216 	blt	r4,r2,40074cc <__b2d+0xa0>
 4007484:	018002c4 	movi	r6,11
 4007488:	308dc83a 	sub	r6,r6,r2
 400748c:	9186d83a 	srl	r3,r18,r6
 4007490:	18cffc34 	orhi	r3,r3,16368
 4007494:	8cc0212e 	bgeu	r17,r19,400751c <__b2d+0xf0>
 4007498:	813ffe17 	ldw	r4,-8(r16)
 400749c:	218cd83a 	srl	r6,r4,r6
 40074a0:	10800544 	addi	r2,r2,21
 40074a4:	9084983a 	sll	r2,r18,r2
 40074a8:	1184b03a 	or	r2,r2,r6
 40074ac:	dfc00517 	ldw	ra,20(sp)
 40074b0:	dd000417 	ldw	r20,16(sp)
 40074b4:	dcc00317 	ldw	r19,12(sp)
 40074b8:	dc800217 	ldw	r18,8(sp)
 40074bc:	dc400117 	ldw	r17,4(sp)
 40074c0:	dc000017 	ldw	r16,0(sp)
 40074c4:	dec00604 	addi	sp,sp,24
 40074c8:	f800283a 	ret
 40074cc:	8cc00f2e 	bgeu	r17,r19,400750c <__b2d+0xe0>
 40074d0:	117ffd44 	addi	r5,r2,-11
 40074d4:	80bffe17 	ldw	r2,-8(r16)
 40074d8:	28000e26 	beq	r5,zero,4007514 <__b2d+0xe8>
 40074dc:	1949c83a 	sub	r4,r3,r5
 40074e0:	9164983a 	sll	r18,r18,r5
 40074e4:	1106d83a 	srl	r3,r2,r4
 40074e8:	81bffe04 	addi	r6,r16,-8
 40074ec:	948ffc34 	orhi	r18,r18,16368
 40074f0:	90c6b03a 	or	r3,r18,r3
 40074f4:	89800e2e 	bgeu	r17,r6,4007530 <__b2d+0x104>
 40074f8:	81bffd17 	ldw	r6,-12(r16)
 40074fc:	1144983a 	sll	r2,r2,r5
 4007500:	310ad83a 	srl	r5,r6,r4
 4007504:	2884b03a 	or	r2,r5,r2
 4007508:	003fe806 	br	40074ac <__alt_mem_onchip_memory2_0+0xfbfe74ac>
 400750c:	10bffd44 	addi	r2,r2,-11
 4007510:	1000041e 	bne	r2,zero,4007524 <__b2d+0xf8>
 4007514:	90cffc34 	orhi	r3,r18,16368
 4007518:	003fe406 	br	40074ac <__alt_mem_onchip_memory2_0+0xfbfe74ac>
 400751c:	000d883a 	mov	r6,zero
 4007520:	003fdf06 	br	40074a0 <__alt_mem_onchip_memory2_0+0xfbfe74a0>
 4007524:	90a4983a 	sll	r18,r18,r2
 4007528:	0005883a 	mov	r2,zero
 400752c:	003ff906 	br	4007514 <__alt_mem_onchip_memory2_0+0xfbfe7514>
 4007530:	1144983a 	sll	r2,r2,r5
 4007534:	003fdd06 	br	40074ac <__alt_mem_onchip_memory2_0+0xfbfe74ac>

04007538 <__d2b>:
 4007538:	defff804 	addi	sp,sp,-32
 400753c:	dc000215 	stw	r16,8(sp)
 4007540:	3021883a 	mov	r16,r6
 4007544:	dc400315 	stw	r17,12(sp)
 4007548:	8022907a 	slli	r17,r16,1
 400754c:	dd000615 	stw	r20,24(sp)
 4007550:	2829883a 	mov	r20,r5
 4007554:	01400044 	movi	r5,1
 4007558:	dcc00515 	stw	r19,20(sp)
 400755c:	dc800415 	stw	r18,16(sp)
 4007560:	dfc00715 	stw	ra,28(sp)
 4007564:	3825883a 	mov	r18,r7
 4007568:	8822d57a 	srli	r17,r17,21
 400756c:	40068a40 	call	40068a4 <_Balloc>
 4007570:	1027883a 	mov	r19,r2
 4007574:	00800434 	movhi	r2,16
 4007578:	10bfffc4 	addi	r2,r2,-1
 400757c:	808c703a 	and	r6,r16,r2
 4007580:	88000126 	beq	r17,zero,4007588 <__d2b+0x50>
 4007584:	31800434 	orhi	r6,r6,16
 4007588:	d9800015 	stw	r6,0(sp)
 400758c:	a0002426 	beq	r20,zero,4007620 <__d2b+0xe8>
 4007590:	d9000104 	addi	r4,sp,4
 4007594:	dd000115 	stw	r20,4(sp)
 4007598:	4006c000 	call	4006c00 <__lo0bits>
 400759c:	d8c00017 	ldw	r3,0(sp)
 40075a0:	10002f1e 	bne	r2,zero,4007660 <__d2b+0x128>
 40075a4:	d9000117 	ldw	r4,4(sp)
 40075a8:	99000515 	stw	r4,20(r19)
 40075ac:	1821003a 	cmpeq	r16,r3,zero
 40075b0:	01000084 	movi	r4,2
 40075b4:	2421c83a 	sub	r16,r4,r16
 40075b8:	98c00615 	stw	r3,24(r19)
 40075bc:	9c000415 	stw	r16,16(r19)
 40075c0:	88001f1e 	bne	r17,zero,4007640 <__d2b+0x108>
 40075c4:	10bef384 	addi	r2,r2,-1074
 40075c8:	90800015 	stw	r2,0(r18)
 40075cc:	00900034 	movhi	r2,16384
 40075d0:	10bfffc4 	addi	r2,r2,-1
 40075d4:	8085883a 	add	r2,r16,r2
 40075d8:	1085883a 	add	r2,r2,r2
 40075dc:	1085883a 	add	r2,r2,r2
 40075e0:	9885883a 	add	r2,r19,r2
 40075e4:	11000517 	ldw	r4,20(r2)
 40075e8:	8020917a 	slli	r16,r16,5
 40075ec:	4006b980 	call	4006b98 <__hi0bits>
 40075f0:	d8c00817 	ldw	r3,32(sp)
 40075f4:	8085c83a 	sub	r2,r16,r2
 40075f8:	18800015 	stw	r2,0(r3)
 40075fc:	9805883a 	mov	r2,r19
 4007600:	dfc00717 	ldw	ra,28(sp)
 4007604:	dd000617 	ldw	r20,24(sp)
 4007608:	dcc00517 	ldw	r19,20(sp)
 400760c:	dc800417 	ldw	r18,16(sp)
 4007610:	dc400317 	ldw	r17,12(sp)
 4007614:	dc000217 	ldw	r16,8(sp)
 4007618:	dec00804 	addi	sp,sp,32
 400761c:	f800283a 	ret
 4007620:	d809883a 	mov	r4,sp
 4007624:	4006c000 	call	4006c00 <__lo0bits>
 4007628:	d8c00017 	ldw	r3,0(sp)
 400762c:	04000044 	movi	r16,1
 4007630:	9c000415 	stw	r16,16(r19)
 4007634:	98c00515 	stw	r3,20(r19)
 4007638:	10800804 	addi	r2,r2,32
 400763c:	883fe126 	beq	r17,zero,40075c4 <__alt_mem_onchip_memory2_0+0xfbfe75c4>
 4007640:	00c00d44 	movi	r3,53
 4007644:	8c7ef344 	addi	r17,r17,-1075
 4007648:	88a3883a 	add	r17,r17,r2
 400764c:	1885c83a 	sub	r2,r3,r2
 4007650:	d8c00817 	ldw	r3,32(sp)
 4007654:	94400015 	stw	r17,0(r18)
 4007658:	18800015 	stw	r2,0(r3)
 400765c:	003fe706 	br	40075fc <__alt_mem_onchip_memory2_0+0xfbfe75fc>
 4007660:	01000804 	movi	r4,32
 4007664:	2089c83a 	sub	r4,r4,r2
 4007668:	1908983a 	sll	r4,r3,r4
 400766c:	d9400117 	ldw	r5,4(sp)
 4007670:	1886d83a 	srl	r3,r3,r2
 4007674:	2148b03a 	or	r4,r4,r5
 4007678:	99000515 	stw	r4,20(r19)
 400767c:	d8c00015 	stw	r3,0(sp)
 4007680:	003fca06 	br	40075ac <__alt_mem_onchip_memory2_0+0xfbfe75ac>

04007684 <__ratio>:
 4007684:	defff904 	addi	sp,sp,-28
 4007688:	dc400315 	stw	r17,12(sp)
 400768c:	2823883a 	mov	r17,r5
 4007690:	d9400104 	addi	r5,sp,4
 4007694:	dfc00615 	stw	ra,24(sp)
 4007698:	dcc00515 	stw	r19,20(sp)
 400769c:	dc800415 	stw	r18,16(sp)
 40076a0:	2027883a 	mov	r19,r4
 40076a4:	dc000215 	stw	r16,8(sp)
 40076a8:	400742c0 	call	400742c <__b2d>
 40076ac:	d80b883a 	mov	r5,sp
 40076b0:	8809883a 	mov	r4,r17
 40076b4:	1025883a 	mov	r18,r2
 40076b8:	1821883a 	mov	r16,r3
 40076bc:	400742c0 	call	400742c <__b2d>
 40076c0:	8a000417 	ldw	r8,16(r17)
 40076c4:	99000417 	ldw	r4,16(r19)
 40076c8:	d9400117 	ldw	r5,4(sp)
 40076cc:	2209c83a 	sub	r4,r4,r8
 40076d0:	2010917a 	slli	r8,r4,5
 40076d4:	d9000017 	ldw	r4,0(sp)
 40076d8:	2909c83a 	sub	r4,r5,r4
 40076dc:	4109883a 	add	r4,r8,r4
 40076e0:	01000e0e 	bge	zero,r4,400771c <__ratio+0x98>
 40076e4:	2008953a 	slli	r4,r4,20
 40076e8:	2421883a 	add	r16,r4,r16
 40076ec:	100d883a 	mov	r6,r2
 40076f0:	180f883a 	mov	r7,r3
 40076f4:	9009883a 	mov	r4,r18
 40076f8:	800b883a 	mov	r5,r16
 40076fc:	400b5700 	call	400b570 <__divdf3>
 4007700:	dfc00617 	ldw	ra,24(sp)
 4007704:	dcc00517 	ldw	r19,20(sp)
 4007708:	dc800417 	ldw	r18,16(sp)
 400770c:	dc400317 	ldw	r17,12(sp)
 4007710:	dc000217 	ldw	r16,8(sp)
 4007714:	dec00704 	addi	sp,sp,28
 4007718:	f800283a 	ret
 400771c:	2008953a 	slli	r4,r4,20
 4007720:	1907c83a 	sub	r3,r3,r4
 4007724:	003ff106 	br	40076ec <__alt_mem_onchip_memory2_0+0xfbfe76ec>

04007728 <_mprec_log10>:
 4007728:	defffe04 	addi	sp,sp,-8
 400772c:	dc000015 	stw	r16,0(sp)
 4007730:	dfc00115 	stw	ra,4(sp)
 4007734:	008005c4 	movi	r2,23
 4007738:	2021883a 	mov	r16,r4
 400773c:	11000d0e 	bge	r2,r4,4007774 <_mprec_log10+0x4c>
 4007740:	0005883a 	mov	r2,zero
 4007744:	00cffc34 	movhi	r3,16368
 4007748:	843fffc4 	addi	r16,r16,-1
 400774c:	000d883a 	mov	r6,zero
 4007750:	01d00934 	movhi	r7,16420
 4007754:	1009883a 	mov	r4,r2
 4007758:	180b883a 	mov	r5,r3
 400775c:	400c0b00 	call	400c0b0 <__muldf3>
 4007760:	803ff91e 	bne	r16,zero,4007748 <__alt_mem_onchip_memory2_0+0xfbfe7748>
 4007764:	dfc00117 	ldw	ra,4(sp)
 4007768:	dc000017 	ldw	r16,0(sp)
 400776c:	dec00204 	addi	sp,sp,8
 4007770:	f800283a 	ret
 4007774:	202090fa 	slli	r16,r4,3
 4007778:	008100b4 	movhi	r2,1026
 400777c:	10a24204 	addi	r2,r2,-30456
 4007780:	1421883a 	add	r16,r2,r16
 4007784:	80800017 	ldw	r2,0(r16)
 4007788:	80c00117 	ldw	r3,4(r16)
 400778c:	dfc00117 	ldw	ra,4(sp)
 4007790:	dc000017 	ldw	r16,0(sp)
 4007794:	dec00204 	addi	sp,sp,8
 4007798:	f800283a 	ret

0400779c <__copybits>:
 400779c:	297fffc4 	addi	r5,r5,-1
 40077a0:	280fd17a 	srai	r7,r5,5
 40077a4:	30c00417 	ldw	r3,16(r6)
 40077a8:	30800504 	addi	r2,r6,20
 40077ac:	39c00044 	addi	r7,r7,1
 40077b0:	18c7883a 	add	r3,r3,r3
 40077b4:	39cf883a 	add	r7,r7,r7
 40077b8:	18c7883a 	add	r3,r3,r3
 40077bc:	39cf883a 	add	r7,r7,r7
 40077c0:	10c7883a 	add	r3,r2,r3
 40077c4:	21cf883a 	add	r7,r4,r7
 40077c8:	10c00d2e 	bgeu	r2,r3,4007800 <__copybits+0x64>
 40077cc:	200b883a 	mov	r5,r4
 40077d0:	12000017 	ldw	r8,0(r2)
 40077d4:	29400104 	addi	r5,r5,4
 40077d8:	10800104 	addi	r2,r2,4
 40077dc:	2a3fff15 	stw	r8,-4(r5)
 40077e0:	10fffb36 	bltu	r2,r3,40077d0 <__alt_mem_onchip_memory2_0+0xfbfe77d0>
 40077e4:	1985c83a 	sub	r2,r3,r6
 40077e8:	10bffac4 	addi	r2,r2,-21
 40077ec:	1004d0ba 	srli	r2,r2,2
 40077f0:	10800044 	addi	r2,r2,1
 40077f4:	1085883a 	add	r2,r2,r2
 40077f8:	1085883a 	add	r2,r2,r2
 40077fc:	2089883a 	add	r4,r4,r2
 4007800:	21c0032e 	bgeu	r4,r7,4007810 <__copybits+0x74>
 4007804:	20000015 	stw	zero,0(r4)
 4007808:	21000104 	addi	r4,r4,4
 400780c:	21fffd36 	bltu	r4,r7,4007804 <__alt_mem_onchip_memory2_0+0xfbfe7804>
 4007810:	f800283a 	ret

04007814 <__any_on>:
 4007814:	20c00417 	ldw	r3,16(r4)
 4007818:	2805d17a 	srai	r2,r5,5
 400781c:	21000504 	addi	r4,r4,20
 4007820:	18800d0e 	bge	r3,r2,4007858 <__any_on+0x44>
 4007824:	18c7883a 	add	r3,r3,r3
 4007828:	18c7883a 	add	r3,r3,r3
 400782c:	20c7883a 	add	r3,r4,r3
 4007830:	20c0192e 	bgeu	r4,r3,4007898 <__any_on+0x84>
 4007834:	18bfff17 	ldw	r2,-4(r3)
 4007838:	18ffff04 	addi	r3,r3,-4
 400783c:	1000041e 	bne	r2,zero,4007850 <__any_on+0x3c>
 4007840:	20c0142e 	bgeu	r4,r3,4007894 <__any_on+0x80>
 4007844:	18ffff04 	addi	r3,r3,-4
 4007848:	19400017 	ldw	r5,0(r3)
 400784c:	283ffc26 	beq	r5,zero,4007840 <__alt_mem_onchip_memory2_0+0xfbfe7840>
 4007850:	00800044 	movi	r2,1
 4007854:	f800283a 	ret
 4007858:	10c00a0e 	bge	r2,r3,4007884 <__any_on+0x70>
 400785c:	1085883a 	add	r2,r2,r2
 4007860:	1085883a 	add	r2,r2,r2
 4007864:	294007cc 	andi	r5,r5,31
 4007868:	2087883a 	add	r3,r4,r2
 400786c:	283ff026 	beq	r5,zero,4007830 <__alt_mem_onchip_memory2_0+0xfbfe7830>
 4007870:	19800017 	ldw	r6,0(r3)
 4007874:	3144d83a 	srl	r2,r6,r5
 4007878:	114a983a 	sll	r5,r2,r5
 400787c:	317ff41e 	bne	r6,r5,4007850 <__alt_mem_onchip_memory2_0+0xfbfe7850>
 4007880:	003feb06 	br	4007830 <__alt_mem_onchip_memory2_0+0xfbfe7830>
 4007884:	1085883a 	add	r2,r2,r2
 4007888:	1085883a 	add	r2,r2,r2
 400788c:	2087883a 	add	r3,r4,r2
 4007890:	003fe706 	br	4007830 <__alt_mem_onchip_memory2_0+0xfbfe7830>
 4007894:	f800283a 	ret
 4007898:	0005883a 	mov	r2,zero
 400789c:	f800283a 	ret

040078a0 <_realloc_r>:
 40078a0:	defff604 	addi	sp,sp,-40
 40078a4:	dc800215 	stw	r18,8(sp)
 40078a8:	dfc00915 	stw	ra,36(sp)
 40078ac:	df000815 	stw	fp,32(sp)
 40078b0:	ddc00715 	stw	r23,28(sp)
 40078b4:	dd800615 	stw	r22,24(sp)
 40078b8:	dd400515 	stw	r21,20(sp)
 40078bc:	dd000415 	stw	r20,16(sp)
 40078c0:	dcc00315 	stw	r19,12(sp)
 40078c4:	dc400115 	stw	r17,4(sp)
 40078c8:	dc000015 	stw	r16,0(sp)
 40078cc:	3025883a 	mov	r18,r6
 40078d0:	2800b726 	beq	r5,zero,4007bb0 <_realloc_r+0x310>
 40078d4:	282b883a 	mov	r21,r5
 40078d8:	2029883a 	mov	r20,r4
 40078dc:	400e02c0 	call	400e02c <__malloc_lock>
 40078e0:	a8bfff17 	ldw	r2,-4(r21)
 40078e4:	043fff04 	movi	r16,-4
 40078e8:	90c002c4 	addi	r3,r18,11
 40078ec:	01000584 	movi	r4,22
 40078f0:	acfffe04 	addi	r19,r21,-8
 40078f4:	1420703a 	and	r16,r2,r16
 40078f8:	20c0332e 	bgeu	r4,r3,40079c8 <_realloc_r+0x128>
 40078fc:	047ffe04 	movi	r17,-8
 4007900:	1c62703a 	and	r17,r3,r17
 4007904:	8807883a 	mov	r3,r17
 4007908:	88005816 	blt	r17,zero,4007a6c <_realloc_r+0x1cc>
 400790c:	8c805736 	bltu	r17,r18,4007a6c <_realloc_r+0x1cc>
 4007910:	80c0300e 	bge	r16,r3,40079d4 <_realloc_r+0x134>
 4007914:	070100b4 	movhi	fp,1026
 4007918:	e7243904 	addi	fp,fp,-28444
 400791c:	e1c00217 	ldw	r7,8(fp)
 4007920:	9c09883a 	add	r4,r19,r16
 4007924:	22000117 	ldw	r8,4(r4)
 4007928:	21c06326 	beq	r4,r7,4007ab8 <_realloc_r+0x218>
 400792c:	017fff84 	movi	r5,-2
 4007930:	414a703a 	and	r5,r8,r5
 4007934:	214b883a 	add	r5,r4,r5
 4007938:	29800117 	ldw	r6,4(r5)
 400793c:	3180004c 	andi	r6,r6,1
 4007940:	30003f26 	beq	r6,zero,4007a40 <_realloc_r+0x1a0>
 4007944:	1080004c 	andi	r2,r2,1
 4007948:	10008326 	beq	r2,zero,4007b58 <_realloc_r+0x2b8>
 400794c:	900b883a 	mov	r5,r18
 4007950:	a009883a 	mov	r4,r20
 4007954:	4005be80 	call	4005be8 <_malloc_r>
 4007958:	1025883a 	mov	r18,r2
 400795c:	10011e26 	beq	r2,zero,4007dd8 <_realloc_r+0x538>
 4007960:	a93fff17 	ldw	r4,-4(r21)
 4007964:	10fffe04 	addi	r3,r2,-8
 4007968:	00bfff84 	movi	r2,-2
 400796c:	2084703a 	and	r2,r4,r2
 4007970:	9885883a 	add	r2,r19,r2
 4007974:	1880ee26 	beq	r3,r2,4007d30 <_realloc_r+0x490>
 4007978:	81bfff04 	addi	r6,r16,-4
 400797c:	00800904 	movi	r2,36
 4007980:	1180b836 	bltu	r2,r6,4007c64 <_realloc_r+0x3c4>
 4007984:	00c004c4 	movi	r3,19
 4007988:	19809636 	bltu	r3,r6,4007be4 <_realloc_r+0x344>
 400798c:	9005883a 	mov	r2,r18
 4007990:	a807883a 	mov	r3,r21
 4007994:	19000017 	ldw	r4,0(r3)
 4007998:	11000015 	stw	r4,0(r2)
 400799c:	19000117 	ldw	r4,4(r3)
 40079a0:	11000115 	stw	r4,4(r2)
 40079a4:	18c00217 	ldw	r3,8(r3)
 40079a8:	10c00215 	stw	r3,8(r2)
 40079ac:	a80b883a 	mov	r5,r21
 40079b0:	a009883a 	mov	r4,r20
 40079b4:	4004ffc0 	call	4004ffc <_free_r>
 40079b8:	a009883a 	mov	r4,r20
 40079bc:	400e14c0 	call	400e14c <__malloc_unlock>
 40079c0:	9005883a 	mov	r2,r18
 40079c4:	00001206 	br	4007a10 <_realloc_r+0x170>
 40079c8:	00c00404 	movi	r3,16
 40079cc:	1823883a 	mov	r17,r3
 40079d0:	003fce06 	br	400790c <__alt_mem_onchip_memory2_0+0xfbfe790c>
 40079d4:	a825883a 	mov	r18,r21
 40079d8:	8445c83a 	sub	r2,r16,r17
 40079dc:	00c003c4 	movi	r3,15
 40079e0:	18802636 	bltu	r3,r2,4007a7c <_realloc_r+0x1dc>
 40079e4:	99800117 	ldw	r6,4(r19)
 40079e8:	9c07883a 	add	r3,r19,r16
 40079ec:	3180004c 	andi	r6,r6,1
 40079f0:	3420b03a 	or	r16,r6,r16
 40079f4:	9c000115 	stw	r16,4(r19)
 40079f8:	18800117 	ldw	r2,4(r3)
 40079fc:	10800054 	ori	r2,r2,1
 4007a00:	18800115 	stw	r2,4(r3)
 4007a04:	a009883a 	mov	r4,r20
 4007a08:	400e14c0 	call	400e14c <__malloc_unlock>
 4007a0c:	9005883a 	mov	r2,r18
 4007a10:	dfc00917 	ldw	ra,36(sp)
 4007a14:	df000817 	ldw	fp,32(sp)
 4007a18:	ddc00717 	ldw	r23,28(sp)
 4007a1c:	dd800617 	ldw	r22,24(sp)
 4007a20:	dd400517 	ldw	r21,20(sp)
 4007a24:	dd000417 	ldw	r20,16(sp)
 4007a28:	dcc00317 	ldw	r19,12(sp)
 4007a2c:	dc800217 	ldw	r18,8(sp)
 4007a30:	dc400117 	ldw	r17,4(sp)
 4007a34:	dc000017 	ldw	r16,0(sp)
 4007a38:	dec00a04 	addi	sp,sp,40
 4007a3c:	f800283a 	ret
 4007a40:	017fff04 	movi	r5,-4
 4007a44:	414a703a 	and	r5,r8,r5
 4007a48:	814d883a 	add	r6,r16,r5
 4007a4c:	30c01f16 	blt	r6,r3,4007acc <_realloc_r+0x22c>
 4007a50:	20800317 	ldw	r2,12(r4)
 4007a54:	20c00217 	ldw	r3,8(r4)
 4007a58:	a825883a 	mov	r18,r21
 4007a5c:	3021883a 	mov	r16,r6
 4007a60:	18800315 	stw	r2,12(r3)
 4007a64:	10c00215 	stw	r3,8(r2)
 4007a68:	003fdb06 	br	40079d8 <__alt_mem_onchip_memory2_0+0xfbfe79d8>
 4007a6c:	00800304 	movi	r2,12
 4007a70:	a0800015 	stw	r2,0(r20)
 4007a74:	0005883a 	mov	r2,zero
 4007a78:	003fe506 	br	4007a10 <__alt_mem_onchip_memory2_0+0xfbfe7a10>
 4007a7c:	98c00117 	ldw	r3,4(r19)
 4007a80:	9c4b883a 	add	r5,r19,r17
 4007a84:	11000054 	ori	r4,r2,1
 4007a88:	18c0004c 	andi	r3,r3,1
 4007a8c:	1c62b03a 	or	r17,r3,r17
 4007a90:	9c400115 	stw	r17,4(r19)
 4007a94:	29000115 	stw	r4,4(r5)
 4007a98:	2885883a 	add	r2,r5,r2
 4007a9c:	10c00117 	ldw	r3,4(r2)
 4007aa0:	29400204 	addi	r5,r5,8
 4007aa4:	a009883a 	mov	r4,r20
 4007aa8:	18c00054 	ori	r3,r3,1
 4007aac:	10c00115 	stw	r3,4(r2)
 4007ab0:	4004ffc0 	call	4004ffc <_free_r>
 4007ab4:	003fd306 	br	4007a04 <__alt_mem_onchip_memory2_0+0xfbfe7a04>
 4007ab8:	017fff04 	movi	r5,-4
 4007abc:	414a703a 	and	r5,r8,r5
 4007ac0:	89800404 	addi	r6,r17,16
 4007ac4:	8151883a 	add	r8,r16,r5
 4007ac8:	4180590e 	bge	r8,r6,4007c30 <_realloc_r+0x390>
 4007acc:	1080004c 	andi	r2,r2,1
 4007ad0:	103f9e1e 	bne	r2,zero,400794c <__alt_mem_onchip_memory2_0+0xfbfe794c>
 4007ad4:	adbffe17 	ldw	r22,-8(r21)
 4007ad8:	00bfff04 	movi	r2,-4
 4007adc:	9dadc83a 	sub	r22,r19,r22
 4007ae0:	b1800117 	ldw	r6,4(r22)
 4007ae4:	3084703a 	and	r2,r6,r2
 4007ae8:	20002026 	beq	r4,zero,4007b6c <_realloc_r+0x2cc>
 4007aec:	80af883a 	add	r23,r16,r2
 4007af0:	b96f883a 	add	r23,r23,r5
 4007af4:	21c05f26 	beq	r4,r7,4007c74 <_realloc_r+0x3d4>
 4007af8:	b8c01c16 	blt	r23,r3,4007b6c <_realloc_r+0x2cc>
 4007afc:	20800317 	ldw	r2,12(r4)
 4007b00:	20c00217 	ldw	r3,8(r4)
 4007b04:	81bfff04 	addi	r6,r16,-4
 4007b08:	01000904 	movi	r4,36
 4007b0c:	18800315 	stw	r2,12(r3)
 4007b10:	10c00215 	stw	r3,8(r2)
 4007b14:	b0c00217 	ldw	r3,8(r22)
 4007b18:	b0800317 	ldw	r2,12(r22)
 4007b1c:	b4800204 	addi	r18,r22,8
 4007b20:	18800315 	stw	r2,12(r3)
 4007b24:	10c00215 	stw	r3,8(r2)
 4007b28:	21801b36 	bltu	r4,r6,4007b98 <_realloc_r+0x2f8>
 4007b2c:	008004c4 	movi	r2,19
 4007b30:	1180352e 	bgeu	r2,r6,4007c08 <_realloc_r+0x368>
 4007b34:	a8800017 	ldw	r2,0(r21)
 4007b38:	b0800215 	stw	r2,8(r22)
 4007b3c:	a8800117 	ldw	r2,4(r21)
 4007b40:	b0800315 	stw	r2,12(r22)
 4007b44:	008006c4 	movi	r2,27
 4007b48:	11807f36 	bltu	r2,r6,4007d48 <_realloc_r+0x4a8>
 4007b4c:	b0800404 	addi	r2,r22,16
 4007b50:	ad400204 	addi	r21,r21,8
 4007b54:	00002d06 	br	4007c0c <_realloc_r+0x36c>
 4007b58:	adbffe17 	ldw	r22,-8(r21)
 4007b5c:	00bfff04 	movi	r2,-4
 4007b60:	9dadc83a 	sub	r22,r19,r22
 4007b64:	b1000117 	ldw	r4,4(r22)
 4007b68:	2084703a 	and	r2,r4,r2
 4007b6c:	b03f7726 	beq	r22,zero,400794c <__alt_mem_onchip_memory2_0+0xfbfe794c>
 4007b70:	80af883a 	add	r23,r16,r2
 4007b74:	b8ff7516 	blt	r23,r3,400794c <__alt_mem_onchip_memory2_0+0xfbfe794c>
 4007b78:	b0800317 	ldw	r2,12(r22)
 4007b7c:	b0c00217 	ldw	r3,8(r22)
 4007b80:	81bfff04 	addi	r6,r16,-4
 4007b84:	01000904 	movi	r4,36
 4007b88:	18800315 	stw	r2,12(r3)
 4007b8c:	10c00215 	stw	r3,8(r2)
 4007b90:	b4800204 	addi	r18,r22,8
 4007b94:	21bfe52e 	bgeu	r4,r6,4007b2c <__alt_mem_onchip_memory2_0+0xfbfe7b2c>
 4007b98:	a80b883a 	mov	r5,r21
 4007b9c:	9009883a 	mov	r4,r18
 4007ba0:	40066200 	call	4006620 <memmove>
 4007ba4:	b821883a 	mov	r16,r23
 4007ba8:	b027883a 	mov	r19,r22
 4007bac:	003f8a06 	br	40079d8 <__alt_mem_onchip_memory2_0+0xfbfe79d8>
 4007bb0:	300b883a 	mov	r5,r6
 4007bb4:	dfc00917 	ldw	ra,36(sp)
 4007bb8:	df000817 	ldw	fp,32(sp)
 4007bbc:	ddc00717 	ldw	r23,28(sp)
 4007bc0:	dd800617 	ldw	r22,24(sp)
 4007bc4:	dd400517 	ldw	r21,20(sp)
 4007bc8:	dd000417 	ldw	r20,16(sp)
 4007bcc:	dcc00317 	ldw	r19,12(sp)
 4007bd0:	dc800217 	ldw	r18,8(sp)
 4007bd4:	dc400117 	ldw	r17,4(sp)
 4007bd8:	dc000017 	ldw	r16,0(sp)
 4007bdc:	dec00a04 	addi	sp,sp,40
 4007be0:	4005be81 	jmpi	4005be8 <_malloc_r>
 4007be4:	a8c00017 	ldw	r3,0(r21)
 4007be8:	90c00015 	stw	r3,0(r18)
 4007bec:	a8c00117 	ldw	r3,4(r21)
 4007bf0:	90c00115 	stw	r3,4(r18)
 4007bf4:	00c006c4 	movi	r3,27
 4007bf8:	19804536 	bltu	r3,r6,4007d10 <_realloc_r+0x470>
 4007bfc:	90800204 	addi	r2,r18,8
 4007c00:	a8c00204 	addi	r3,r21,8
 4007c04:	003f6306 	br	4007994 <__alt_mem_onchip_memory2_0+0xfbfe7994>
 4007c08:	9005883a 	mov	r2,r18
 4007c0c:	a8c00017 	ldw	r3,0(r21)
 4007c10:	b821883a 	mov	r16,r23
 4007c14:	b027883a 	mov	r19,r22
 4007c18:	10c00015 	stw	r3,0(r2)
 4007c1c:	a8c00117 	ldw	r3,4(r21)
 4007c20:	10c00115 	stw	r3,4(r2)
 4007c24:	a8c00217 	ldw	r3,8(r21)
 4007c28:	10c00215 	stw	r3,8(r2)
 4007c2c:	003f6a06 	br	40079d8 <__alt_mem_onchip_memory2_0+0xfbfe79d8>
 4007c30:	9c67883a 	add	r19,r19,r17
 4007c34:	4445c83a 	sub	r2,r8,r17
 4007c38:	e4c00215 	stw	r19,8(fp)
 4007c3c:	10800054 	ori	r2,r2,1
 4007c40:	98800115 	stw	r2,4(r19)
 4007c44:	a8bfff17 	ldw	r2,-4(r21)
 4007c48:	a009883a 	mov	r4,r20
 4007c4c:	1080004c 	andi	r2,r2,1
 4007c50:	1462b03a 	or	r17,r2,r17
 4007c54:	ac7fff15 	stw	r17,-4(r21)
 4007c58:	400e14c0 	call	400e14c <__malloc_unlock>
 4007c5c:	a805883a 	mov	r2,r21
 4007c60:	003f6b06 	br	4007a10 <__alt_mem_onchip_memory2_0+0xfbfe7a10>
 4007c64:	a80b883a 	mov	r5,r21
 4007c68:	9009883a 	mov	r4,r18
 4007c6c:	40066200 	call	4006620 <memmove>
 4007c70:	003f4e06 	br	40079ac <__alt_mem_onchip_memory2_0+0xfbfe79ac>
 4007c74:	89000404 	addi	r4,r17,16
 4007c78:	b93fbc16 	blt	r23,r4,4007b6c <__alt_mem_onchip_memory2_0+0xfbfe7b6c>
 4007c7c:	b0800317 	ldw	r2,12(r22)
 4007c80:	b0c00217 	ldw	r3,8(r22)
 4007c84:	81bfff04 	addi	r6,r16,-4
 4007c88:	01000904 	movi	r4,36
 4007c8c:	18800315 	stw	r2,12(r3)
 4007c90:	10c00215 	stw	r3,8(r2)
 4007c94:	b4800204 	addi	r18,r22,8
 4007c98:	21804336 	bltu	r4,r6,4007da8 <_realloc_r+0x508>
 4007c9c:	008004c4 	movi	r2,19
 4007ca0:	11803f2e 	bgeu	r2,r6,4007da0 <_realloc_r+0x500>
 4007ca4:	a8800017 	ldw	r2,0(r21)
 4007ca8:	b0800215 	stw	r2,8(r22)
 4007cac:	a8800117 	ldw	r2,4(r21)
 4007cb0:	b0800315 	stw	r2,12(r22)
 4007cb4:	008006c4 	movi	r2,27
 4007cb8:	11803f36 	bltu	r2,r6,4007db8 <_realloc_r+0x518>
 4007cbc:	b0800404 	addi	r2,r22,16
 4007cc0:	ad400204 	addi	r21,r21,8
 4007cc4:	a8c00017 	ldw	r3,0(r21)
 4007cc8:	10c00015 	stw	r3,0(r2)
 4007ccc:	a8c00117 	ldw	r3,4(r21)
 4007cd0:	10c00115 	stw	r3,4(r2)
 4007cd4:	a8c00217 	ldw	r3,8(r21)
 4007cd8:	10c00215 	stw	r3,8(r2)
 4007cdc:	b447883a 	add	r3,r22,r17
 4007ce0:	bc45c83a 	sub	r2,r23,r17
 4007ce4:	e0c00215 	stw	r3,8(fp)
 4007ce8:	10800054 	ori	r2,r2,1
 4007cec:	18800115 	stw	r2,4(r3)
 4007cf0:	b0800117 	ldw	r2,4(r22)
 4007cf4:	a009883a 	mov	r4,r20
 4007cf8:	1080004c 	andi	r2,r2,1
 4007cfc:	1462b03a 	or	r17,r2,r17
 4007d00:	b4400115 	stw	r17,4(r22)
 4007d04:	400e14c0 	call	400e14c <__malloc_unlock>
 4007d08:	9005883a 	mov	r2,r18
 4007d0c:	003f4006 	br	4007a10 <__alt_mem_onchip_memory2_0+0xfbfe7a10>
 4007d10:	a8c00217 	ldw	r3,8(r21)
 4007d14:	90c00215 	stw	r3,8(r18)
 4007d18:	a8c00317 	ldw	r3,12(r21)
 4007d1c:	90c00315 	stw	r3,12(r18)
 4007d20:	30801126 	beq	r6,r2,4007d68 <_realloc_r+0x4c8>
 4007d24:	90800404 	addi	r2,r18,16
 4007d28:	a8c00404 	addi	r3,r21,16
 4007d2c:	003f1906 	br	4007994 <__alt_mem_onchip_memory2_0+0xfbfe7994>
 4007d30:	90ffff17 	ldw	r3,-4(r18)
 4007d34:	00bfff04 	movi	r2,-4
 4007d38:	a825883a 	mov	r18,r21
 4007d3c:	1884703a 	and	r2,r3,r2
 4007d40:	80a1883a 	add	r16,r16,r2
 4007d44:	003f2406 	br	40079d8 <__alt_mem_onchip_memory2_0+0xfbfe79d8>
 4007d48:	a8800217 	ldw	r2,8(r21)
 4007d4c:	b0800415 	stw	r2,16(r22)
 4007d50:	a8800317 	ldw	r2,12(r21)
 4007d54:	b0800515 	stw	r2,20(r22)
 4007d58:	31000a26 	beq	r6,r4,4007d84 <_realloc_r+0x4e4>
 4007d5c:	b0800604 	addi	r2,r22,24
 4007d60:	ad400404 	addi	r21,r21,16
 4007d64:	003fa906 	br	4007c0c <__alt_mem_onchip_memory2_0+0xfbfe7c0c>
 4007d68:	a9000417 	ldw	r4,16(r21)
 4007d6c:	90800604 	addi	r2,r18,24
 4007d70:	a8c00604 	addi	r3,r21,24
 4007d74:	91000415 	stw	r4,16(r18)
 4007d78:	a9000517 	ldw	r4,20(r21)
 4007d7c:	91000515 	stw	r4,20(r18)
 4007d80:	003f0406 	br	4007994 <__alt_mem_onchip_memory2_0+0xfbfe7994>
 4007d84:	a8c00417 	ldw	r3,16(r21)
 4007d88:	ad400604 	addi	r21,r21,24
 4007d8c:	b0800804 	addi	r2,r22,32
 4007d90:	b0c00615 	stw	r3,24(r22)
 4007d94:	a8ffff17 	ldw	r3,-4(r21)
 4007d98:	b0c00715 	stw	r3,28(r22)
 4007d9c:	003f9b06 	br	4007c0c <__alt_mem_onchip_memory2_0+0xfbfe7c0c>
 4007da0:	9005883a 	mov	r2,r18
 4007da4:	003fc706 	br	4007cc4 <__alt_mem_onchip_memory2_0+0xfbfe7cc4>
 4007da8:	a80b883a 	mov	r5,r21
 4007dac:	9009883a 	mov	r4,r18
 4007db0:	40066200 	call	4006620 <memmove>
 4007db4:	003fc906 	br	4007cdc <__alt_mem_onchip_memory2_0+0xfbfe7cdc>
 4007db8:	a8800217 	ldw	r2,8(r21)
 4007dbc:	b0800415 	stw	r2,16(r22)
 4007dc0:	a8800317 	ldw	r2,12(r21)
 4007dc4:	b0800515 	stw	r2,20(r22)
 4007dc8:	31000726 	beq	r6,r4,4007de8 <_realloc_r+0x548>
 4007dcc:	b0800604 	addi	r2,r22,24
 4007dd0:	ad400404 	addi	r21,r21,16
 4007dd4:	003fbb06 	br	4007cc4 <__alt_mem_onchip_memory2_0+0xfbfe7cc4>
 4007dd8:	a009883a 	mov	r4,r20
 4007ddc:	400e14c0 	call	400e14c <__malloc_unlock>
 4007de0:	0005883a 	mov	r2,zero
 4007de4:	003f0a06 	br	4007a10 <__alt_mem_onchip_memory2_0+0xfbfe7a10>
 4007de8:	a8c00417 	ldw	r3,16(r21)
 4007dec:	ad400604 	addi	r21,r21,24
 4007df0:	b0800804 	addi	r2,r22,32
 4007df4:	b0c00615 	stw	r3,24(r22)
 4007df8:	a8ffff17 	ldw	r3,-4(r21)
 4007dfc:	b0c00715 	stw	r3,28(r22)
 4007e00:	003fb006 	br	4007cc4 <__alt_mem_onchip_memory2_0+0xfbfe7cc4>

04007e04 <__fpclassifyd>:
 4007e04:	00a00034 	movhi	r2,32768
 4007e08:	10bfffc4 	addi	r2,r2,-1
 4007e0c:	2884703a 	and	r2,r5,r2
 4007e10:	10000726 	beq	r2,zero,4007e30 <__fpclassifyd+0x2c>
 4007e14:	00fffc34 	movhi	r3,65520
 4007e18:	019ff834 	movhi	r6,32736
 4007e1c:	28c7883a 	add	r3,r5,r3
 4007e20:	31bfffc4 	addi	r6,r6,-1
 4007e24:	30c00536 	bltu	r6,r3,4007e3c <__fpclassifyd+0x38>
 4007e28:	00800104 	movi	r2,4
 4007e2c:	f800283a 	ret
 4007e30:	2000021e 	bne	r4,zero,4007e3c <__fpclassifyd+0x38>
 4007e34:	00800084 	movi	r2,2
 4007e38:	f800283a 	ret
 4007e3c:	00dffc34 	movhi	r3,32752
 4007e40:	019ff834 	movhi	r6,32736
 4007e44:	28cb883a 	add	r5,r5,r3
 4007e48:	31bfffc4 	addi	r6,r6,-1
 4007e4c:	317ff62e 	bgeu	r6,r5,4007e28 <__alt_mem_onchip_memory2_0+0xfbfe7e28>
 4007e50:	01400434 	movhi	r5,16
 4007e54:	297fffc4 	addi	r5,r5,-1
 4007e58:	28800236 	bltu	r5,r2,4007e64 <__fpclassifyd+0x60>
 4007e5c:	008000c4 	movi	r2,3
 4007e60:	f800283a 	ret
 4007e64:	10c00226 	beq	r2,r3,4007e70 <__fpclassifyd+0x6c>
 4007e68:	0005883a 	mov	r2,zero
 4007e6c:	f800283a 	ret
 4007e70:	2005003a 	cmpeq	r2,r4,zero
 4007e74:	f800283a 	ret

04007e78 <_sbrk_r>:
 4007e78:	defffd04 	addi	sp,sp,-12
 4007e7c:	dc000015 	stw	r16,0(sp)
 4007e80:	040100b4 	movhi	r16,1026
 4007e84:	dc400115 	stw	r17,4(sp)
 4007e88:	8430d904 	addi	r16,r16,-15516
 4007e8c:	2023883a 	mov	r17,r4
 4007e90:	2809883a 	mov	r4,r5
 4007e94:	dfc00215 	stw	ra,8(sp)
 4007e98:	80000015 	stw	zero,0(r16)
 4007e9c:	400dd240 	call	400dd24 <sbrk>
 4007ea0:	00ffffc4 	movi	r3,-1
 4007ea4:	10c00526 	beq	r2,r3,4007ebc <_sbrk_r+0x44>
 4007ea8:	dfc00217 	ldw	ra,8(sp)
 4007eac:	dc400117 	ldw	r17,4(sp)
 4007eb0:	dc000017 	ldw	r16,0(sp)
 4007eb4:	dec00304 	addi	sp,sp,12
 4007eb8:	f800283a 	ret
 4007ebc:	80c00017 	ldw	r3,0(r16)
 4007ec0:	183ff926 	beq	r3,zero,4007ea8 <__alt_mem_onchip_memory2_0+0xfbfe7ea8>
 4007ec4:	88c00015 	stw	r3,0(r17)
 4007ec8:	003ff706 	br	4007ea8 <__alt_mem_onchip_memory2_0+0xfbfe7ea8>

04007ecc <__sread>:
 4007ecc:	defffe04 	addi	sp,sp,-8
 4007ed0:	dc000015 	stw	r16,0(sp)
 4007ed4:	2821883a 	mov	r16,r5
 4007ed8:	2940038f 	ldh	r5,14(r5)
 4007edc:	dfc00115 	stw	ra,4(sp)
 4007ee0:	4009cc00 	call	4009cc0 <_read_r>
 4007ee4:	10000716 	blt	r2,zero,4007f04 <__sread+0x38>
 4007ee8:	80c01417 	ldw	r3,80(r16)
 4007eec:	1887883a 	add	r3,r3,r2
 4007ef0:	80c01415 	stw	r3,80(r16)
 4007ef4:	dfc00117 	ldw	ra,4(sp)
 4007ef8:	dc000017 	ldw	r16,0(sp)
 4007efc:	dec00204 	addi	sp,sp,8
 4007f00:	f800283a 	ret
 4007f04:	80c0030b 	ldhu	r3,12(r16)
 4007f08:	18fbffcc 	andi	r3,r3,61439
 4007f0c:	80c0030d 	sth	r3,12(r16)
 4007f10:	dfc00117 	ldw	ra,4(sp)
 4007f14:	dc000017 	ldw	r16,0(sp)
 4007f18:	dec00204 	addi	sp,sp,8
 4007f1c:	f800283a 	ret

04007f20 <__seofread>:
 4007f20:	0005883a 	mov	r2,zero
 4007f24:	f800283a 	ret

04007f28 <__swrite>:
 4007f28:	2880030b 	ldhu	r2,12(r5)
 4007f2c:	defffb04 	addi	sp,sp,-20
 4007f30:	dcc00315 	stw	r19,12(sp)
 4007f34:	dc800215 	stw	r18,8(sp)
 4007f38:	dc400115 	stw	r17,4(sp)
 4007f3c:	dc000015 	stw	r16,0(sp)
 4007f40:	dfc00415 	stw	ra,16(sp)
 4007f44:	10c0400c 	andi	r3,r2,256
 4007f48:	2821883a 	mov	r16,r5
 4007f4c:	2023883a 	mov	r17,r4
 4007f50:	3025883a 	mov	r18,r6
 4007f54:	3827883a 	mov	r19,r7
 4007f58:	18000526 	beq	r3,zero,4007f70 <__swrite+0x48>
 4007f5c:	2940038f 	ldh	r5,14(r5)
 4007f60:	01c00084 	movi	r7,2
 4007f64:	000d883a 	mov	r6,zero
 4007f68:	4009c600 	call	4009c60 <_lseek_r>
 4007f6c:	8080030b 	ldhu	r2,12(r16)
 4007f70:	8140038f 	ldh	r5,14(r16)
 4007f74:	10bbffcc 	andi	r2,r2,61439
 4007f78:	980f883a 	mov	r7,r19
 4007f7c:	900d883a 	mov	r6,r18
 4007f80:	8809883a 	mov	r4,r17
 4007f84:	8080030d 	sth	r2,12(r16)
 4007f88:	dfc00417 	ldw	ra,16(sp)
 4007f8c:	dcc00317 	ldw	r19,12(sp)
 4007f90:	dc800217 	ldw	r18,8(sp)
 4007f94:	dc400117 	ldw	r17,4(sp)
 4007f98:	dc000017 	ldw	r16,0(sp)
 4007f9c:	dec00504 	addi	sp,sp,20
 4007fa0:	400972c1 	jmpi	400972c <_write_r>

04007fa4 <__sseek>:
 4007fa4:	defffe04 	addi	sp,sp,-8
 4007fa8:	dc000015 	stw	r16,0(sp)
 4007fac:	2821883a 	mov	r16,r5
 4007fb0:	2940038f 	ldh	r5,14(r5)
 4007fb4:	dfc00115 	stw	ra,4(sp)
 4007fb8:	4009c600 	call	4009c60 <_lseek_r>
 4007fbc:	00ffffc4 	movi	r3,-1
 4007fc0:	10c00826 	beq	r2,r3,4007fe4 <__sseek+0x40>
 4007fc4:	80c0030b 	ldhu	r3,12(r16)
 4007fc8:	80801415 	stw	r2,80(r16)
 4007fcc:	18c40014 	ori	r3,r3,4096
 4007fd0:	80c0030d 	sth	r3,12(r16)
 4007fd4:	dfc00117 	ldw	ra,4(sp)
 4007fd8:	dc000017 	ldw	r16,0(sp)
 4007fdc:	dec00204 	addi	sp,sp,8
 4007fe0:	f800283a 	ret
 4007fe4:	80c0030b 	ldhu	r3,12(r16)
 4007fe8:	18fbffcc 	andi	r3,r3,61439
 4007fec:	80c0030d 	sth	r3,12(r16)
 4007ff0:	dfc00117 	ldw	ra,4(sp)
 4007ff4:	dc000017 	ldw	r16,0(sp)
 4007ff8:	dec00204 	addi	sp,sp,8
 4007ffc:	f800283a 	ret

04008000 <__sclose>:
 4008000:	2940038f 	ldh	r5,14(r5)
 4008004:	400978c1 	jmpi	400978c <_close_r>

04008008 <strcmp>:
 4008008:	2144b03a 	or	r2,r4,r5
 400800c:	108000cc 	andi	r2,r2,3
 4008010:	1000171e 	bne	r2,zero,4008070 <strcmp+0x68>
 4008014:	20800017 	ldw	r2,0(r4)
 4008018:	28c00017 	ldw	r3,0(r5)
 400801c:	10c0141e 	bne	r2,r3,4008070 <strcmp+0x68>
 4008020:	027fbff4 	movhi	r9,65279
 4008024:	4a7fbfc4 	addi	r9,r9,-257
 4008028:	0086303a 	nor	r3,zero,r2
 400802c:	02202074 	movhi	r8,32897
 4008030:	1245883a 	add	r2,r2,r9
 4008034:	42202004 	addi	r8,r8,-32640
 4008038:	10c4703a 	and	r2,r2,r3
 400803c:	1204703a 	and	r2,r2,r8
 4008040:	10000226 	beq	r2,zero,400804c <strcmp+0x44>
 4008044:	00002306 	br	40080d4 <strcmp+0xcc>
 4008048:	1000221e 	bne	r2,zero,40080d4 <strcmp+0xcc>
 400804c:	21000104 	addi	r4,r4,4
 4008050:	20c00017 	ldw	r3,0(r4)
 4008054:	29400104 	addi	r5,r5,4
 4008058:	29800017 	ldw	r6,0(r5)
 400805c:	1a4f883a 	add	r7,r3,r9
 4008060:	00c4303a 	nor	r2,zero,r3
 4008064:	3884703a 	and	r2,r7,r2
 4008068:	1204703a 	and	r2,r2,r8
 400806c:	19bff626 	beq	r3,r6,4008048 <__alt_mem_onchip_memory2_0+0xfbfe8048>
 4008070:	20800003 	ldbu	r2,0(r4)
 4008074:	10c03fcc 	andi	r3,r2,255
 4008078:	18c0201c 	xori	r3,r3,128
 400807c:	18ffe004 	addi	r3,r3,-128
 4008080:	18000c26 	beq	r3,zero,40080b4 <strcmp+0xac>
 4008084:	29800007 	ldb	r6,0(r5)
 4008088:	19800326 	beq	r3,r6,4008098 <strcmp+0x90>
 400808c:	00001306 	br	40080dc <strcmp+0xd4>
 4008090:	29800007 	ldb	r6,0(r5)
 4008094:	11800b1e 	bne	r2,r6,40080c4 <strcmp+0xbc>
 4008098:	21000044 	addi	r4,r4,1
 400809c:	20c00003 	ldbu	r3,0(r4)
 40080a0:	29400044 	addi	r5,r5,1
 40080a4:	18803fcc 	andi	r2,r3,255
 40080a8:	1080201c 	xori	r2,r2,128
 40080ac:	10bfe004 	addi	r2,r2,-128
 40080b0:	103ff71e 	bne	r2,zero,4008090 <__alt_mem_onchip_memory2_0+0xfbfe8090>
 40080b4:	0007883a 	mov	r3,zero
 40080b8:	28800003 	ldbu	r2,0(r5)
 40080bc:	1885c83a 	sub	r2,r3,r2
 40080c0:	f800283a 	ret
 40080c4:	28800003 	ldbu	r2,0(r5)
 40080c8:	18c03fcc 	andi	r3,r3,255
 40080cc:	1885c83a 	sub	r2,r3,r2
 40080d0:	f800283a 	ret
 40080d4:	0005883a 	mov	r2,zero
 40080d8:	f800283a 	ret
 40080dc:	10c03fcc 	andi	r3,r2,255
 40080e0:	003ff506 	br	40080b8 <__alt_mem_onchip_memory2_0+0xfbfe80b8>

040080e4 <__sprint_r.part.0>:
 40080e4:	28801917 	ldw	r2,100(r5)
 40080e8:	defff604 	addi	sp,sp,-40
 40080ec:	dd400515 	stw	r21,20(sp)
 40080f0:	dfc00915 	stw	ra,36(sp)
 40080f4:	df000815 	stw	fp,32(sp)
 40080f8:	ddc00715 	stw	r23,28(sp)
 40080fc:	dd800615 	stw	r22,24(sp)
 4008100:	dd000415 	stw	r20,16(sp)
 4008104:	dcc00315 	stw	r19,12(sp)
 4008108:	dc800215 	stw	r18,8(sp)
 400810c:	dc400115 	stw	r17,4(sp)
 4008110:	dc000015 	stw	r16,0(sp)
 4008114:	1088000c 	andi	r2,r2,8192
 4008118:	302b883a 	mov	r21,r6
 400811c:	10002e26 	beq	r2,zero,40081d8 <__sprint_r.part.0+0xf4>
 4008120:	30800217 	ldw	r2,8(r6)
 4008124:	35800017 	ldw	r22,0(r6)
 4008128:	10002926 	beq	r2,zero,40081d0 <__sprint_r.part.0+0xec>
 400812c:	2827883a 	mov	r19,r5
 4008130:	2029883a 	mov	r20,r4
 4008134:	b5c00104 	addi	r23,r22,4
 4008138:	04bfffc4 	movi	r18,-1
 400813c:	bc400017 	ldw	r17,0(r23)
 4008140:	b4000017 	ldw	r16,0(r22)
 4008144:	0039883a 	mov	fp,zero
 4008148:	8822d0ba 	srli	r17,r17,2
 400814c:	8800031e 	bne	r17,zero,400815c <__sprint_r.part.0+0x78>
 4008150:	00001806 	br	40081b4 <__sprint_r.part.0+0xd0>
 4008154:	84000104 	addi	r16,r16,4
 4008158:	8f001526 	beq	r17,fp,40081b0 <__sprint_r.part.0+0xcc>
 400815c:	81400017 	ldw	r5,0(r16)
 4008160:	980d883a 	mov	r6,r19
 4008164:	a009883a 	mov	r4,r20
 4008168:	4009b0c0 	call	4009b0c <_fputwc_r>
 400816c:	e7000044 	addi	fp,fp,1
 4008170:	14bff81e 	bne	r2,r18,4008154 <__alt_mem_onchip_memory2_0+0xfbfe8154>
 4008174:	9005883a 	mov	r2,r18
 4008178:	a8000215 	stw	zero,8(r21)
 400817c:	a8000115 	stw	zero,4(r21)
 4008180:	dfc00917 	ldw	ra,36(sp)
 4008184:	df000817 	ldw	fp,32(sp)
 4008188:	ddc00717 	ldw	r23,28(sp)
 400818c:	dd800617 	ldw	r22,24(sp)
 4008190:	dd400517 	ldw	r21,20(sp)
 4008194:	dd000417 	ldw	r20,16(sp)
 4008198:	dcc00317 	ldw	r19,12(sp)
 400819c:	dc800217 	ldw	r18,8(sp)
 40081a0:	dc400117 	ldw	r17,4(sp)
 40081a4:	dc000017 	ldw	r16,0(sp)
 40081a8:	dec00a04 	addi	sp,sp,40
 40081ac:	f800283a 	ret
 40081b0:	a8800217 	ldw	r2,8(r21)
 40081b4:	8c63883a 	add	r17,r17,r17
 40081b8:	8c63883a 	add	r17,r17,r17
 40081bc:	1445c83a 	sub	r2,r2,r17
 40081c0:	a8800215 	stw	r2,8(r21)
 40081c4:	b5800204 	addi	r22,r22,8
 40081c8:	bdc00204 	addi	r23,r23,8
 40081cc:	103fdb1e 	bne	r2,zero,400813c <__alt_mem_onchip_memory2_0+0xfbfe813c>
 40081d0:	0005883a 	mov	r2,zero
 40081d4:	003fe806 	br	4008178 <__alt_mem_onchip_memory2_0+0xfbfe8178>
 40081d8:	400530c0 	call	400530c <__sfvwrite_r>
 40081dc:	003fe606 	br	4008178 <__alt_mem_onchip_memory2_0+0xfbfe8178>

040081e0 <__sprint_r>:
 40081e0:	30c00217 	ldw	r3,8(r6)
 40081e4:	18000126 	beq	r3,zero,40081ec <__sprint_r+0xc>
 40081e8:	40080e41 	jmpi	40080e4 <__sprint_r.part.0>
 40081ec:	30000115 	stw	zero,4(r6)
 40081f0:	0005883a 	mov	r2,zero
 40081f4:	f800283a 	ret

040081f8 <___vfiprintf_internal_r>:
 40081f8:	deffc904 	addi	sp,sp,-220
 40081fc:	df003515 	stw	fp,212(sp)
 4008200:	dd003115 	stw	r20,196(sp)
 4008204:	dfc03615 	stw	ra,216(sp)
 4008208:	ddc03415 	stw	r23,208(sp)
 400820c:	dd803315 	stw	r22,204(sp)
 4008210:	dd403215 	stw	r21,200(sp)
 4008214:	dcc03015 	stw	r19,192(sp)
 4008218:	dc802f15 	stw	r18,188(sp)
 400821c:	dc402e15 	stw	r17,184(sp)
 4008220:	dc002d15 	stw	r16,180(sp)
 4008224:	d9002015 	stw	r4,128(sp)
 4008228:	d9c02215 	stw	r7,136(sp)
 400822c:	2829883a 	mov	r20,r5
 4008230:	3039883a 	mov	fp,r6
 4008234:	20000226 	beq	r4,zero,4008240 <___vfiprintf_internal_r+0x48>
 4008238:	20800e17 	ldw	r2,56(r4)
 400823c:	1000cf26 	beq	r2,zero,400857c <___vfiprintf_internal_r+0x384>
 4008240:	a080030b 	ldhu	r2,12(r20)
 4008244:	10c8000c 	andi	r3,r2,8192
 4008248:	1800061e 	bne	r3,zero,4008264 <___vfiprintf_internal_r+0x6c>
 400824c:	a1001917 	ldw	r4,100(r20)
 4008250:	00f7ffc4 	movi	r3,-8193
 4008254:	10880014 	ori	r2,r2,8192
 4008258:	20c6703a 	and	r3,r4,r3
 400825c:	a080030d 	sth	r2,12(r20)
 4008260:	a0c01915 	stw	r3,100(r20)
 4008264:	10c0020c 	andi	r3,r2,8
 4008268:	1800a926 	beq	r3,zero,4008510 <___vfiprintf_internal_r+0x318>
 400826c:	a0c00417 	ldw	r3,16(r20)
 4008270:	1800a726 	beq	r3,zero,4008510 <___vfiprintf_internal_r+0x318>
 4008274:	1080068c 	andi	r2,r2,26
 4008278:	00c00284 	movi	r3,10
 400827c:	10c0ac26 	beq	r2,r3,4008530 <___vfiprintf_internal_r+0x338>
 4008280:	da801a04 	addi	r10,sp,104
 4008284:	da801e15 	stw	r10,120(sp)
 4008288:	d8801e17 	ldw	r2,120(sp)
 400828c:	da8019c4 	addi	r10,sp,103
 4008290:	058100b4 	movhi	r22,1026
 4008294:	05c100b4 	movhi	r23,1026
 4008298:	da801f15 	stw	r10,124(sp)
 400829c:	1295c83a 	sub	r10,r2,r10
 40082a0:	b5a27804 	addi	r22,r22,-30240
 40082a4:	bde27404 	addi	r23,r23,-30256
 40082a8:	dec01a15 	stw	sp,104(sp)
 40082ac:	d8001c15 	stw	zero,112(sp)
 40082b0:	d8001b15 	stw	zero,108(sp)
 40082b4:	d8002615 	stw	zero,152(sp)
 40082b8:	d8002315 	stw	zero,140(sp)
 40082bc:	da802715 	stw	r10,156(sp)
 40082c0:	d811883a 	mov	r8,sp
 40082c4:	dd002115 	stw	r20,132(sp)
 40082c8:	e021883a 	mov	r16,fp
 40082cc:	80800007 	ldb	r2,0(r16)
 40082d0:	1003ea26 	beq	r2,zero,400927c <___vfiprintf_internal_r+0x1084>
 40082d4:	00c00944 	movi	r3,37
 40082d8:	8025883a 	mov	r18,r16
 40082dc:	10c0021e 	bne	r2,r3,40082e8 <___vfiprintf_internal_r+0xf0>
 40082e0:	00001606 	br	400833c <___vfiprintf_internal_r+0x144>
 40082e4:	10c00326 	beq	r2,r3,40082f4 <___vfiprintf_internal_r+0xfc>
 40082e8:	94800044 	addi	r18,r18,1
 40082ec:	90800007 	ldb	r2,0(r18)
 40082f0:	103ffc1e 	bne	r2,zero,40082e4 <__alt_mem_onchip_memory2_0+0xfbfe82e4>
 40082f4:	9423c83a 	sub	r17,r18,r16
 40082f8:	88001026 	beq	r17,zero,400833c <___vfiprintf_internal_r+0x144>
 40082fc:	d8c01c17 	ldw	r3,112(sp)
 4008300:	d8801b17 	ldw	r2,108(sp)
 4008304:	44000015 	stw	r16,0(r8)
 4008308:	88c7883a 	add	r3,r17,r3
 400830c:	10800044 	addi	r2,r2,1
 4008310:	44400115 	stw	r17,4(r8)
 4008314:	d8c01c15 	stw	r3,112(sp)
 4008318:	d8801b15 	stw	r2,108(sp)
 400831c:	010001c4 	movi	r4,7
 4008320:	2080760e 	bge	r4,r2,40084fc <___vfiprintf_internal_r+0x304>
 4008324:	1803821e 	bne	r3,zero,4009130 <___vfiprintf_internal_r+0xf38>
 4008328:	da802317 	ldw	r10,140(sp)
 400832c:	d8001b15 	stw	zero,108(sp)
 4008330:	d811883a 	mov	r8,sp
 4008334:	5455883a 	add	r10,r10,r17
 4008338:	da802315 	stw	r10,140(sp)
 400833c:	90800007 	ldb	r2,0(r18)
 4008340:	10044626 	beq	r2,zero,400945c <___vfiprintf_internal_r+0x1264>
 4008344:	90c00047 	ldb	r3,1(r18)
 4008348:	94000044 	addi	r16,r18,1
 400834c:	d8001d85 	stb	zero,118(sp)
 4008350:	0009883a 	mov	r4,zero
 4008354:	000f883a 	mov	r7,zero
 4008358:	027fffc4 	movi	r9,-1
 400835c:	0023883a 	mov	r17,zero
 4008360:	0029883a 	mov	r20,zero
 4008364:	01401604 	movi	r5,88
 4008368:	01800244 	movi	r6,9
 400836c:	03400a84 	movi	r13,42
 4008370:	03001b04 	movi	r12,108
 4008374:	84000044 	addi	r16,r16,1
 4008378:	18bff804 	addi	r2,r3,-32
 400837c:	28827336 	bltu	r5,r2,4008d4c <___vfiprintf_internal_r+0xb54>
 4008380:	100490ba 	slli	r2,r2,2
 4008384:	02810074 	movhi	r10,1025
 4008388:	52a0e604 	addi	r10,r10,-31848
 400838c:	1285883a 	add	r2,r2,r10
 4008390:	10800017 	ldw	r2,0(r2)
 4008394:	1000683a 	jmp	r2
 4008398:	04008a80 	call	4008a8 <OSCtxSw_SWITCH_PC+0x400868>
 400839c:	04008d4c 	andi	r16,zero,565
 40083a0:	04008d4c 	andi	r16,zero,565
 40083a4:	04008aa0 	cmpeqi	r16,zero,554
 40083a8:	04008d4c 	andi	r16,zero,565
 40083ac:	04008d4c 	andi	r16,zero,565
 40083b0:	04008d4c 	andi	r16,zero,565
 40083b4:	04008d4c 	andi	r16,zero,565
 40083b8:	04008d4c 	andi	r16,zero,565
 40083bc:	04008d4c 	andi	r16,zero,565
 40083c0:	04008c88 	cmpgei	r16,zero,562
 40083c4:	04008ca4 	muli	r16,zero,562
 40083c8:	04008d4c 	andi	r16,zero,565
 40083cc:	0400858c 	andi	r16,zero,534
 40083d0:	04008cb4 	movhi	r16,562
 40083d4:	04008d4c 	andi	r16,zero,565
 40083d8:	04008aac 	andhi	r16,zero,554
 40083dc:	04008ab8 	rdprs	r16,zero,554
 40083e0:	04008ab8 	rdprs	r16,zero,554
 40083e4:	04008ab8 	rdprs	r16,zero,554
 40083e8:	04008ab8 	rdprs	r16,zero,554
 40083ec:	04008ab8 	rdprs	r16,zero,554
 40083f0:	04008ab8 	rdprs	r16,zero,554
 40083f4:	04008ab8 	rdprs	r16,zero,554
 40083f8:	04008ab8 	rdprs	r16,zero,554
 40083fc:	04008ab8 	rdprs	r16,zero,554
 4008400:	04008d4c 	andi	r16,zero,565
 4008404:	04008d4c 	andi	r16,zero,565
 4008408:	04008d4c 	andi	r16,zero,565
 400840c:	04008d4c 	andi	r16,zero,565
 4008410:	04008d4c 	andi	r16,zero,565
 4008414:	04008d4c 	andi	r16,zero,565
 4008418:	04008d4c 	andi	r16,zero,565
 400841c:	04008d4c 	andi	r16,zero,565
 4008420:	04008d4c 	andi	r16,zero,565
 4008424:	04008d4c 	andi	r16,zero,565
 4008428:	04008ae4 	muli	r16,zero,555
 400842c:	04008d4c 	andi	r16,zero,565
 4008430:	04008d4c 	andi	r16,zero,565
 4008434:	04008d4c 	andi	r16,zero,565
 4008438:	04008d4c 	andi	r16,zero,565
 400843c:	04008d4c 	andi	r16,zero,565
 4008440:	04008d4c 	andi	r16,zero,565
 4008444:	04008d4c 	andi	r16,zero,565
 4008448:	04008d4c 	andi	r16,zero,565
 400844c:	04008d4c 	andi	r16,zero,565
 4008450:	04008d4c 	andi	r16,zero,565
 4008454:	04008b1c 	xori	r16,zero,556
 4008458:	04008d4c 	andi	r16,zero,565
 400845c:	04008d4c 	andi	r16,zero,565
 4008460:	04008d4c 	andi	r16,zero,565
 4008464:	04008d4c 	andi	r16,zero,565
 4008468:	04008d4c 	andi	r16,zero,565
 400846c:	04008b74 	movhi	r16,557
 4008470:	04008d4c 	andi	r16,zero,565
 4008474:	04008d4c 	andi	r16,zero,565
 4008478:	04008be4 	muli	r16,zero,559
 400847c:	04008d4c 	andi	r16,zero,565
 4008480:	04008d4c 	andi	r16,zero,565
 4008484:	04008d4c 	andi	r16,zero,565
 4008488:	04008d4c 	andi	r16,zero,565
 400848c:	04008d4c 	andi	r16,zero,565
 4008490:	04008d4c 	andi	r16,zero,565
 4008494:	04008d4c 	andi	r16,zero,565
 4008498:	04008d4c 	andi	r16,zero,565
 400849c:	04008d4c 	andi	r16,zero,565
 40084a0:	04008d4c 	andi	r16,zero,565
 40084a4:	04008990 	cmplti	r16,zero,550
 40084a8:	040089bc 	xorhi	r16,zero,550
 40084ac:	04008d4c 	andi	r16,zero,565
 40084b0:	04008d4c 	andi	r16,zero,565
 40084b4:	04008d4c 	andi	r16,zero,565
 40084b8:	04008cf4 	movhi	r16,563
 40084bc:	040089bc 	xorhi	r16,zero,550
 40084c0:	04008d4c 	andi	r16,zero,565
 40084c4:	04008d4c 	andi	r16,zero,565
 40084c8:	04008850 	cmplti	r16,zero,545
 40084cc:	04008d4c 	andi	r16,zero,565
 40084d0:	04008860 	cmpeqi	r16,zero,545
 40084d4:	0400889c 	xori	r16,zero,546
 40084d8:	04008598 	cmpnei	r16,zero,534
 40084dc:	04008844 	movi	r16,545
 40084e0:	04008d4c 	andi	r16,zero,565
 40084e4:	04008c20 	cmpeqi	r16,zero,560
 40084e8:	04008d4c 	andi	r16,zero,565
 40084ec:	04008c78 	rdprs	r16,zero,561
 40084f0:	04008d4c 	andi	r16,zero,565
 40084f4:	04008d4c 	andi	r16,zero,565
 40084f8:	0400893c 	xorhi	r16,zero,548
 40084fc:	42000204 	addi	r8,r8,8
 4008500:	da802317 	ldw	r10,140(sp)
 4008504:	5455883a 	add	r10,r10,r17
 4008508:	da802315 	stw	r10,140(sp)
 400850c:	003f8b06 	br	400833c <__alt_mem_onchip_memory2_0+0xfbfe833c>
 4008510:	d9002017 	ldw	r4,128(sp)
 4008514:	a00b883a 	mov	r5,r20
 4008518:	4002eb40 	call	4002eb4 <__swsetup_r>
 400851c:	1003b11e 	bne	r2,zero,40093e4 <___vfiprintf_internal_r+0x11ec>
 4008520:	a080030b 	ldhu	r2,12(r20)
 4008524:	00c00284 	movi	r3,10
 4008528:	1080068c 	andi	r2,r2,26
 400852c:	10ff541e 	bne	r2,r3,4008280 <__alt_mem_onchip_memory2_0+0xfbfe8280>
 4008530:	a080038f 	ldh	r2,14(r20)
 4008534:	103f5216 	blt	r2,zero,4008280 <__alt_mem_onchip_memory2_0+0xfbfe8280>
 4008538:	d9c02217 	ldw	r7,136(sp)
 400853c:	d9002017 	ldw	r4,128(sp)
 4008540:	e00d883a 	mov	r6,fp
 4008544:	a00b883a 	mov	r5,r20
 4008548:	40096700 	call	4009670 <__sbprintf>
 400854c:	dfc03617 	ldw	ra,216(sp)
 4008550:	df003517 	ldw	fp,212(sp)
 4008554:	ddc03417 	ldw	r23,208(sp)
 4008558:	dd803317 	ldw	r22,204(sp)
 400855c:	dd403217 	ldw	r21,200(sp)
 4008560:	dd003117 	ldw	r20,196(sp)
 4008564:	dcc03017 	ldw	r19,192(sp)
 4008568:	dc802f17 	ldw	r18,188(sp)
 400856c:	dc402e17 	ldw	r17,184(sp)
 4008570:	dc002d17 	ldw	r16,180(sp)
 4008574:	dec03704 	addi	sp,sp,220
 4008578:	f800283a 	ret
 400857c:	4004e880 	call	4004e88 <__sinit>
 4008580:	003f2f06 	br	4008240 <__alt_mem_onchip_memory2_0+0xfbfe8240>
 4008584:	0463c83a 	sub	r17,zero,r17
 4008588:	d8802215 	stw	r2,136(sp)
 400858c:	a5000114 	ori	r20,r20,4
 4008590:	80c00007 	ldb	r3,0(r16)
 4008594:	003f7706 	br	4008374 <__alt_mem_onchip_memory2_0+0xfbfe8374>
 4008598:	00800c04 	movi	r2,48
 400859c:	da802217 	ldw	r10,136(sp)
 40085a0:	d8801d05 	stb	r2,116(sp)
 40085a4:	00801e04 	movi	r2,120
 40085a8:	d8801d45 	stb	r2,117(sp)
 40085ac:	d8001d85 	stb	zero,118(sp)
 40085b0:	50c00104 	addi	r3,r10,4
 40085b4:	54800017 	ldw	r18,0(r10)
 40085b8:	0027883a 	mov	r19,zero
 40085bc:	a0800094 	ori	r2,r20,2
 40085c0:	48030b16 	blt	r9,zero,40091f0 <___vfiprintf_internal_r+0xff8>
 40085c4:	00bfdfc4 	movi	r2,-129
 40085c8:	a096703a 	and	r11,r20,r2
 40085cc:	d8c02215 	stw	r3,136(sp)
 40085d0:	5d000094 	ori	r20,r11,2
 40085d4:	90032b1e 	bne	r18,zero,4009284 <___vfiprintf_internal_r+0x108c>
 40085d8:	008100b4 	movhi	r2,1026
 40085dc:	10a21304 	addi	r2,r2,-30644
 40085e0:	d8802615 	stw	r2,152(sp)
 40085e4:	0039883a 	mov	fp,zero
 40085e8:	48017b1e 	bne	r9,zero,4008bd8 <___vfiprintf_internal_r+0x9e0>
 40085ec:	0013883a 	mov	r9,zero
 40085f0:	0027883a 	mov	r19,zero
 40085f4:	dd401a04 	addi	r21,sp,104
 40085f8:	4825883a 	mov	r18,r9
 40085fc:	4cc0010e 	bge	r9,r19,4008604 <___vfiprintf_internal_r+0x40c>
 4008600:	9825883a 	mov	r18,r19
 4008604:	e7003fcc 	andi	fp,fp,255
 4008608:	e700201c 	xori	fp,fp,128
 400860c:	e73fe004 	addi	fp,fp,-128
 4008610:	e0000126 	beq	fp,zero,4008618 <___vfiprintf_internal_r+0x420>
 4008614:	94800044 	addi	r18,r18,1
 4008618:	a380008c 	andi	r14,r20,2
 400861c:	70000126 	beq	r14,zero,4008624 <___vfiprintf_internal_r+0x42c>
 4008620:	94800084 	addi	r18,r18,2
 4008624:	a700210c 	andi	fp,r20,132
 4008628:	e001df1e 	bne	fp,zero,4008da8 <___vfiprintf_internal_r+0xbb0>
 400862c:	8c87c83a 	sub	r3,r17,r18
 4008630:	00c1dd0e 	bge	zero,r3,4008da8 <___vfiprintf_internal_r+0xbb0>
 4008634:	01c00404 	movi	r7,16
 4008638:	d8801c17 	ldw	r2,112(sp)
 400863c:	38c3ad0e 	bge	r7,r3,40094f4 <___vfiprintf_internal_r+0x12fc>
 4008640:	028100b4 	movhi	r10,1026
 4008644:	52a27804 	addi	r10,r10,-30240
 4008648:	dc002915 	stw	r16,164(sp)
 400864c:	d9801b17 	ldw	r6,108(sp)
 4008650:	da802415 	stw	r10,144(sp)
 4008654:	03c001c4 	movi	r15,7
 4008658:	da402515 	stw	r9,148(sp)
 400865c:	db802815 	stw	r14,160(sp)
 4008660:	1821883a 	mov	r16,r3
 4008664:	00000506 	br	400867c <___vfiprintf_internal_r+0x484>
 4008668:	31400084 	addi	r5,r6,2
 400866c:	42000204 	addi	r8,r8,8
 4008670:	200d883a 	mov	r6,r4
 4008674:	843ffc04 	addi	r16,r16,-16
 4008678:	3c000d0e 	bge	r7,r16,40086b0 <___vfiprintf_internal_r+0x4b8>
 400867c:	10800404 	addi	r2,r2,16
 4008680:	31000044 	addi	r4,r6,1
 4008684:	45800015 	stw	r22,0(r8)
 4008688:	41c00115 	stw	r7,4(r8)
 400868c:	d8801c15 	stw	r2,112(sp)
 4008690:	d9001b15 	stw	r4,108(sp)
 4008694:	793ff40e 	bge	r15,r4,4008668 <__alt_mem_onchip_memory2_0+0xfbfe8668>
 4008698:	1001b51e 	bne	r2,zero,4008d70 <___vfiprintf_internal_r+0xb78>
 400869c:	843ffc04 	addi	r16,r16,-16
 40086a0:	000d883a 	mov	r6,zero
 40086a4:	01400044 	movi	r5,1
 40086a8:	d811883a 	mov	r8,sp
 40086ac:	3c3ff316 	blt	r7,r16,400867c <__alt_mem_onchip_memory2_0+0xfbfe867c>
 40086b0:	8007883a 	mov	r3,r16
 40086b4:	da402517 	ldw	r9,148(sp)
 40086b8:	db802817 	ldw	r14,160(sp)
 40086bc:	dc002917 	ldw	r16,164(sp)
 40086c0:	da802417 	ldw	r10,144(sp)
 40086c4:	1885883a 	add	r2,r3,r2
 40086c8:	40c00115 	stw	r3,4(r8)
 40086cc:	42800015 	stw	r10,0(r8)
 40086d0:	d8801c15 	stw	r2,112(sp)
 40086d4:	d9401b15 	stw	r5,108(sp)
 40086d8:	00c001c4 	movi	r3,7
 40086dc:	19426016 	blt	r3,r5,4009060 <___vfiprintf_internal_r+0xe68>
 40086e0:	d8c01d87 	ldb	r3,118(sp)
 40086e4:	42000204 	addi	r8,r8,8
 40086e8:	29000044 	addi	r4,r5,1
 40086ec:	1801b31e 	bne	r3,zero,4008dbc <___vfiprintf_internal_r+0xbc4>
 40086f0:	7001c026 	beq	r14,zero,4008df4 <___vfiprintf_internal_r+0xbfc>
 40086f4:	d8c01d04 	addi	r3,sp,116
 40086f8:	10800084 	addi	r2,r2,2
 40086fc:	40c00015 	stw	r3,0(r8)
 4008700:	00c00084 	movi	r3,2
 4008704:	40c00115 	stw	r3,4(r8)
 4008708:	d8801c15 	stw	r2,112(sp)
 400870c:	d9001b15 	stw	r4,108(sp)
 4008710:	00c001c4 	movi	r3,7
 4008714:	1902650e 	bge	r3,r4,40090ac <___vfiprintf_internal_r+0xeb4>
 4008718:	10029a1e 	bne	r2,zero,4009184 <___vfiprintf_internal_r+0xf8c>
 400871c:	00c02004 	movi	r3,128
 4008720:	01000044 	movi	r4,1
 4008724:	000b883a 	mov	r5,zero
 4008728:	d811883a 	mov	r8,sp
 400872c:	e0c1b31e 	bne	fp,r3,4008dfc <___vfiprintf_internal_r+0xc04>
 4008730:	8cb9c83a 	sub	fp,r17,r18
 4008734:	0701b10e 	bge	zero,fp,4008dfc <___vfiprintf_internal_r+0xc04>
 4008738:	01c00404 	movi	r7,16
 400873c:	3f03890e 	bge	r7,fp,4009564 <___vfiprintf_internal_r+0x136c>
 4008740:	00c100b4 	movhi	r3,1026
 4008744:	18e27404 	addi	r3,r3,-30256
 4008748:	d8c02415 	stw	r3,144(sp)
 400874c:	8007883a 	mov	r3,r16
 4008750:	034001c4 	movi	r13,7
 4008754:	e021883a 	mov	r16,fp
 4008758:	da402515 	stw	r9,148(sp)
 400875c:	1839883a 	mov	fp,r3
 4008760:	00000506 	br	4008778 <___vfiprintf_internal_r+0x580>
 4008764:	29800084 	addi	r6,r5,2
 4008768:	42000204 	addi	r8,r8,8
 400876c:	180b883a 	mov	r5,r3
 4008770:	843ffc04 	addi	r16,r16,-16
 4008774:	3c000d0e 	bge	r7,r16,40087ac <___vfiprintf_internal_r+0x5b4>
 4008778:	10800404 	addi	r2,r2,16
 400877c:	28c00044 	addi	r3,r5,1
 4008780:	45c00015 	stw	r23,0(r8)
 4008784:	41c00115 	stw	r7,4(r8)
 4008788:	d8801c15 	stw	r2,112(sp)
 400878c:	d8c01b15 	stw	r3,108(sp)
 4008790:	68fff40e 	bge	r13,r3,4008764 <__alt_mem_onchip_memory2_0+0xfbfe8764>
 4008794:	1002241e 	bne	r2,zero,4009028 <___vfiprintf_internal_r+0xe30>
 4008798:	843ffc04 	addi	r16,r16,-16
 400879c:	01800044 	movi	r6,1
 40087a0:	000b883a 	mov	r5,zero
 40087a4:	d811883a 	mov	r8,sp
 40087a8:	3c3ff316 	blt	r7,r16,4008778 <__alt_mem_onchip_memory2_0+0xfbfe8778>
 40087ac:	da402517 	ldw	r9,148(sp)
 40087b0:	e007883a 	mov	r3,fp
 40087b4:	8039883a 	mov	fp,r16
 40087b8:	1821883a 	mov	r16,r3
 40087bc:	d8c02417 	ldw	r3,144(sp)
 40087c0:	1705883a 	add	r2,r2,fp
 40087c4:	47000115 	stw	fp,4(r8)
 40087c8:	40c00015 	stw	r3,0(r8)
 40087cc:	d8801c15 	stw	r2,112(sp)
 40087d0:	d9801b15 	stw	r6,108(sp)
 40087d4:	00c001c4 	movi	r3,7
 40087d8:	19827616 	blt	r3,r6,40091b4 <___vfiprintf_internal_r+0xfbc>
 40087dc:	4cf9c83a 	sub	fp,r9,r19
 40087e0:	42000204 	addi	r8,r8,8
 40087e4:	31000044 	addi	r4,r6,1
 40087e8:	300b883a 	mov	r5,r6
 40087ec:	07018516 	blt	zero,fp,4008e04 <___vfiprintf_internal_r+0xc0c>
 40087f0:	9885883a 	add	r2,r19,r2
 40087f4:	45400015 	stw	r21,0(r8)
 40087f8:	44c00115 	stw	r19,4(r8)
 40087fc:	d8801c15 	stw	r2,112(sp)
 4008800:	d9001b15 	stw	r4,108(sp)
 4008804:	00c001c4 	movi	r3,7
 4008808:	1901dd0e 	bge	r3,r4,4008f80 <___vfiprintf_internal_r+0xd88>
 400880c:	1002401e 	bne	r2,zero,4009110 <___vfiprintf_internal_r+0xf18>
 4008810:	d8001b15 	stw	zero,108(sp)
 4008814:	a2c0010c 	andi	r11,r20,4
 4008818:	58000226 	beq	r11,zero,4008824 <___vfiprintf_internal_r+0x62c>
 400881c:	8ca7c83a 	sub	r19,r17,r18
 4008820:	04c2f216 	blt	zero,r19,40093ec <___vfiprintf_internal_r+0x11f4>
 4008824:	8c80010e 	bge	r17,r18,400882c <___vfiprintf_internal_r+0x634>
 4008828:	9023883a 	mov	r17,r18
 400882c:	da802317 	ldw	r10,140(sp)
 4008830:	5455883a 	add	r10,r10,r17
 4008834:	da802315 	stw	r10,140(sp)
 4008838:	d8001b15 	stw	zero,108(sp)
 400883c:	d811883a 	mov	r8,sp
 4008840:	003ea206 	br	40082cc <__alt_mem_onchip_memory2_0+0xfbfe82cc>
 4008844:	a5000814 	ori	r20,r20,32
 4008848:	80c00007 	ldb	r3,0(r16)
 400884c:	003ec906 	br	4008374 <__alt_mem_onchip_memory2_0+0xfbfe8374>
 4008850:	80c00007 	ldb	r3,0(r16)
 4008854:	1b030926 	beq	r3,r12,400947c <___vfiprintf_internal_r+0x1284>
 4008858:	a5000414 	ori	r20,r20,16
 400885c:	003ec506 	br	4008374 <__alt_mem_onchip_memory2_0+0xfbfe8374>
 4008860:	21003fcc 	andi	r4,r4,255
 4008864:	20035e1e 	bne	r4,zero,40095e0 <___vfiprintf_internal_r+0x13e8>
 4008868:	a080080c 	andi	r2,r20,32
 400886c:	1002a526 	beq	r2,zero,4009304 <___vfiprintf_internal_r+0x110c>
 4008870:	da802217 	ldw	r10,136(sp)
 4008874:	50800017 	ldw	r2,0(r10)
 4008878:	da802317 	ldw	r10,140(sp)
 400887c:	5007d7fa 	srai	r3,r10,31
 4008880:	da802217 	ldw	r10,136(sp)
 4008884:	10c00115 	stw	r3,4(r2)
 4008888:	52800104 	addi	r10,r10,4
 400888c:	da802215 	stw	r10,136(sp)
 4008890:	da802317 	ldw	r10,140(sp)
 4008894:	12800015 	stw	r10,0(r2)
 4008898:	003e8c06 	br	40082cc <__alt_mem_onchip_memory2_0+0xfbfe82cc>
 400889c:	21003fcc 	andi	r4,r4,255
 40088a0:	2003511e 	bne	r4,zero,40095e8 <___vfiprintf_internal_r+0x13f0>
 40088a4:	a080080c 	andi	r2,r20,32
 40088a8:	1000a126 	beq	r2,zero,4008b30 <___vfiprintf_internal_r+0x938>
 40088ac:	da802217 	ldw	r10,136(sp)
 40088b0:	d8001d85 	stb	zero,118(sp)
 40088b4:	50800204 	addi	r2,r10,8
 40088b8:	54800017 	ldw	r18,0(r10)
 40088bc:	54c00117 	ldw	r19,4(r10)
 40088c0:	4802b416 	blt	r9,zero,4009394 <___vfiprintf_internal_r+0x119c>
 40088c4:	013fdfc4 	movi	r4,-129
 40088c8:	94c6b03a 	or	r3,r18,r19
 40088cc:	d8802215 	stw	r2,136(sp)
 40088d0:	a128703a 	and	r20,r20,r4
 40088d4:	1800a226 	beq	r3,zero,4008b60 <___vfiprintf_internal_r+0x968>
 40088d8:	0039883a 	mov	fp,zero
 40088dc:	dd401a04 	addi	r21,sp,104
 40088e0:	9006d0fa 	srli	r3,r18,3
 40088e4:	9808977a 	slli	r4,r19,29
 40088e8:	9826d0fa 	srli	r19,r19,3
 40088ec:	948001cc 	andi	r18,r18,7
 40088f0:	90800c04 	addi	r2,r18,48
 40088f4:	ad7fffc4 	addi	r21,r21,-1
 40088f8:	20e4b03a 	or	r18,r4,r3
 40088fc:	a8800005 	stb	r2,0(r21)
 4008900:	94c6b03a 	or	r3,r18,r19
 4008904:	183ff61e 	bne	r3,zero,40088e0 <__alt_mem_onchip_memory2_0+0xfbfe88e0>
 4008908:	a0c0004c 	andi	r3,r20,1
 400890c:	18005926 	beq	r3,zero,4008a74 <___vfiprintf_internal_r+0x87c>
 4008910:	10803fcc 	andi	r2,r2,255
 4008914:	1080201c 	xori	r2,r2,128
 4008918:	10bfe004 	addi	r2,r2,-128
 400891c:	00c00c04 	movi	r3,48
 4008920:	10c05426 	beq	r2,r3,4008a74 <___vfiprintf_internal_r+0x87c>
 4008924:	da801e17 	ldw	r10,120(sp)
 4008928:	a8bfffc4 	addi	r2,r21,-1
 400892c:	a8ffffc5 	stb	r3,-1(r21)
 4008930:	50a7c83a 	sub	r19,r10,r2
 4008934:	102b883a 	mov	r21,r2
 4008938:	003f2f06 	br	40085f8 <__alt_mem_onchip_memory2_0+0xfbfe85f8>
 400893c:	21003fcc 	andi	r4,r4,255
 4008940:	2003421e 	bne	r4,zero,400964c <___vfiprintf_internal_r+0x1454>
 4008944:	008100b4 	movhi	r2,1026
 4008948:	10a21304 	addi	r2,r2,-30644
 400894c:	d8802615 	stw	r2,152(sp)
 4008950:	a080080c 	andi	r2,r20,32
 4008954:	1000aa26 	beq	r2,zero,4008c00 <___vfiprintf_internal_r+0xa08>
 4008958:	da802217 	ldw	r10,136(sp)
 400895c:	54800017 	ldw	r18,0(r10)
 4008960:	54c00117 	ldw	r19,4(r10)
 4008964:	52800204 	addi	r10,r10,8
 4008968:	da802215 	stw	r10,136(sp)
 400896c:	a080004c 	andi	r2,r20,1
 4008970:	1001d226 	beq	r2,zero,40090bc <___vfiprintf_internal_r+0xec4>
 4008974:	94c4b03a 	or	r2,r18,r19
 4008978:	1002351e 	bne	r2,zero,4009250 <___vfiprintf_internal_r+0x1058>
 400897c:	d8001d85 	stb	zero,118(sp)
 4008980:	48022216 	blt	r9,zero,400920c <___vfiprintf_internal_r+0x1014>
 4008984:	00bfdfc4 	movi	r2,-129
 4008988:	a0a8703a 	and	r20,r20,r2
 400898c:	003f1506 	br	40085e4 <__alt_mem_onchip_memory2_0+0xfbfe85e4>
 4008990:	da802217 	ldw	r10,136(sp)
 4008994:	04800044 	movi	r18,1
 4008998:	d8001d85 	stb	zero,118(sp)
 400899c:	50800017 	ldw	r2,0(r10)
 40089a0:	52800104 	addi	r10,r10,4
 40089a4:	da802215 	stw	r10,136(sp)
 40089a8:	d8801005 	stb	r2,64(sp)
 40089ac:	9027883a 	mov	r19,r18
 40089b0:	dd401004 	addi	r21,sp,64
 40089b4:	0013883a 	mov	r9,zero
 40089b8:	003f1706 	br	4008618 <__alt_mem_onchip_memory2_0+0xfbfe8618>
 40089bc:	21003fcc 	andi	r4,r4,255
 40089c0:	2003201e 	bne	r4,zero,4009644 <___vfiprintf_internal_r+0x144c>
 40089c4:	a080080c 	andi	r2,r20,32
 40089c8:	10004b26 	beq	r2,zero,4008af8 <___vfiprintf_internal_r+0x900>
 40089cc:	da802217 	ldw	r10,136(sp)
 40089d0:	50800117 	ldw	r2,4(r10)
 40089d4:	54800017 	ldw	r18,0(r10)
 40089d8:	52800204 	addi	r10,r10,8
 40089dc:	da802215 	stw	r10,136(sp)
 40089e0:	1027883a 	mov	r19,r2
 40089e4:	10022c16 	blt	r2,zero,4009298 <___vfiprintf_internal_r+0x10a0>
 40089e8:	df001d83 	ldbu	fp,118(sp)
 40089ec:	48007216 	blt	r9,zero,4008bb8 <___vfiprintf_internal_r+0x9c0>
 40089f0:	00ffdfc4 	movi	r3,-129
 40089f4:	94c4b03a 	or	r2,r18,r19
 40089f8:	a0e8703a 	and	r20,r20,r3
 40089fc:	1000cc26 	beq	r2,zero,4008d30 <___vfiprintf_internal_r+0xb38>
 4008a00:	98021026 	beq	r19,zero,4009244 <___vfiprintf_internal_r+0x104c>
 4008a04:	dc402415 	stw	r17,144(sp)
 4008a08:	dc002515 	stw	r16,148(sp)
 4008a0c:	9823883a 	mov	r17,r19
 4008a10:	9021883a 	mov	r16,r18
 4008a14:	dd401a04 	addi	r21,sp,104
 4008a18:	4825883a 	mov	r18,r9
 4008a1c:	4027883a 	mov	r19,r8
 4008a20:	8009883a 	mov	r4,r16
 4008a24:	880b883a 	mov	r5,r17
 4008a28:	01800284 	movi	r6,10
 4008a2c:	000f883a 	mov	r7,zero
 4008a30:	400a5d80 	call	400a5d8 <__umoddi3>
 4008a34:	10800c04 	addi	r2,r2,48
 4008a38:	ad7fffc4 	addi	r21,r21,-1
 4008a3c:	8009883a 	mov	r4,r16
 4008a40:	880b883a 	mov	r5,r17
 4008a44:	a8800005 	stb	r2,0(r21)
 4008a48:	01800284 	movi	r6,10
 4008a4c:	000f883a 	mov	r7,zero
 4008a50:	400a0600 	call	400a060 <__udivdi3>
 4008a54:	1021883a 	mov	r16,r2
 4008a58:	10c4b03a 	or	r2,r2,r3
 4008a5c:	1823883a 	mov	r17,r3
 4008a60:	103fef1e 	bne	r2,zero,4008a20 <__alt_mem_onchip_memory2_0+0xfbfe8a20>
 4008a64:	dc402417 	ldw	r17,144(sp)
 4008a68:	dc002517 	ldw	r16,148(sp)
 4008a6c:	9013883a 	mov	r9,r18
 4008a70:	9811883a 	mov	r8,r19
 4008a74:	da801e17 	ldw	r10,120(sp)
 4008a78:	5567c83a 	sub	r19,r10,r21
 4008a7c:	003ede06 	br	40085f8 <__alt_mem_onchip_memory2_0+0xfbfe85f8>
 4008a80:	38803fcc 	andi	r2,r7,255
 4008a84:	1080201c 	xori	r2,r2,128
 4008a88:	10bfe004 	addi	r2,r2,-128
 4008a8c:	1002371e 	bne	r2,zero,400936c <___vfiprintf_internal_r+0x1174>
 4008a90:	01000044 	movi	r4,1
 4008a94:	01c00804 	movi	r7,32
 4008a98:	80c00007 	ldb	r3,0(r16)
 4008a9c:	003e3506 	br	4008374 <__alt_mem_onchip_memory2_0+0xfbfe8374>
 4008aa0:	a5000054 	ori	r20,r20,1
 4008aa4:	80c00007 	ldb	r3,0(r16)
 4008aa8:	003e3206 	br	4008374 <__alt_mem_onchip_memory2_0+0xfbfe8374>
 4008aac:	a5002014 	ori	r20,r20,128
 4008ab0:	80c00007 	ldb	r3,0(r16)
 4008ab4:	003e2f06 	br	4008374 <__alt_mem_onchip_memory2_0+0xfbfe8374>
 4008ab8:	8015883a 	mov	r10,r16
 4008abc:	0023883a 	mov	r17,zero
 4008ac0:	18bff404 	addi	r2,r3,-48
 4008ac4:	50c00007 	ldb	r3,0(r10)
 4008ac8:	8c4002a4 	muli	r17,r17,10
 4008acc:	84000044 	addi	r16,r16,1
 4008ad0:	8015883a 	mov	r10,r16
 4008ad4:	1463883a 	add	r17,r2,r17
 4008ad8:	18bff404 	addi	r2,r3,-48
 4008adc:	30bff92e 	bgeu	r6,r2,4008ac4 <__alt_mem_onchip_memory2_0+0xfbfe8ac4>
 4008ae0:	003e2506 	br	4008378 <__alt_mem_onchip_memory2_0+0xfbfe8378>
 4008ae4:	21003fcc 	andi	r4,r4,255
 4008ae8:	2002d41e 	bne	r4,zero,400963c <___vfiprintf_internal_r+0x1444>
 4008aec:	a5000414 	ori	r20,r20,16
 4008af0:	a080080c 	andi	r2,r20,32
 4008af4:	103fb51e 	bne	r2,zero,40089cc <__alt_mem_onchip_memory2_0+0xfbfe89cc>
 4008af8:	a080040c 	andi	r2,r20,16
 4008afc:	1001f826 	beq	r2,zero,40092e0 <___vfiprintf_internal_r+0x10e8>
 4008b00:	da802217 	ldw	r10,136(sp)
 4008b04:	54800017 	ldw	r18,0(r10)
 4008b08:	52800104 	addi	r10,r10,4
 4008b0c:	da802215 	stw	r10,136(sp)
 4008b10:	9027d7fa 	srai	r19,r18,31
 4008b14:	9805883a 	mov	r2,r19
 4008b18:	003fb206 	br	40089e4 <__alt_mem_onchip_memory2_0+0xfbfe89e4>
 4008b1c:	21003fcc 	andi	r4,r4,255
 4008b20:	2002c41e 	bne	r4,zero,4009634 <___vfiprintf_internal_r+0x143c>
 4008b24:	a5000414 	ori	r20,r20,16
 4008b28:	a080080c 	andi	r2,r20,32
 4008b2c:	103f5f1e 	bne	r2,zero,40088ac <__alt_mem_onchip_memory2_0+0xfbfe88ac>
 4008b30:	a080040c 	andi	r2,r20,16
 4008b34:	10020f26 	beq	r2,zero,4009374 <___vfiprintf_internal_r+0x117c>
 4008b38:	da802217 	ldw	r10,136(sp)
 4008b3c:	d8001d85 	stb	zero,118(sp)
 4008b40:	0027883a 	mov	r19,zero
 4008b44:	50800104 	addi	r2,r10,4
 4008b48:	54800017 	ldw	r18,0(r10)
 4008b4c:	48021116 	blt	r9,zero,4009394 <___vfiprintf_internal_r+0x119c>
 4008b50:	00ffdfc4 	movi	r3,-129
 4008b54:	d8802215 	stw	r2,136(sp)
 4008b58:	a0e8703a 	and	r20,r20,r3
 4008b5c:	903f5e1e 	bne	r18,zero,40088d8 <__alt_mem_onchip_memory2_0+0xfbfe88d8>
 4008b60:	0039883a 	mov	fp,zero
 4008b64:	4802a626 	beq	r9,zero,4009600 <___vfiprintf_internal_r+0x1408>
 4008b68:	0025883a 	mov	r18,zero
 4008b6c:	0027883a 	mov	r19,zero
 4008b70:	003f5a06 	br	40088dc <__alt_mem_onchip_memory2_0+0xfbfe88dc>
 4008b74:	21003fcc 	andi	r4,r4,255
 4008b78:	20029f1e 	bne	r4,zero,40095f8 <___vfiprintf_internal_r+0x1400>
 4008b7c:	a5000414 	ori	r20,r20,16
 4008b80:	a080080c 	andi	r2,r20,32
 4008b84:	10005e1e 	bne	r2,zero,4008d00 <___vfiprintf_internal_r+0xb08>
 4008b88:	a080040c 	andi	r2,r20,16
 4008b8c:	1001a21e 	bne	r2,zero,4009218 <___vfiprintf_internal_r+0x1020>
 4008b90:	a080100c 	andi	r2,r20,64
 4008b94:	d8001d85 	stb	zero,118(sp)
 4008b98:	da802217 	ldw	r10,136(sp)
 4008b9c:	1002231e 	bne	r2,zero,400942c <___vfiprintf_internal_r+0x1234>
 4008ba0:	50800104 	addi	r2,r10,4
 4008ba4:	54800017 	ldw	r18,0(r10)
 4008ba8:	0027883a 	mov	r19,zero
 4008bac:	4801a00e 	bge	r9,zero,4009230 <___vfiprintf_internal_r+0x1038>
 4008bb0:	d8802215 	stw	r2,136(sp)
 4008bb4:	0039883a 	mov	fp,zero
 4008bb8:	94c4b03a 	or	r2,r18,r19
 4008bbc:	103f901e 	bne	r2,zero,4008a00 <__alt_mem_onchip_memory2_0+0xfbfe8a00>
 4008bc0:	00800044 	movi	r2,1
 4008bc4:	10803fcc 	andi	r2,r2,255
 4008bc8:	00c00044 	movi	r3,1
 4008bcc:	10c05926 	beq	r2,r3,4008d34 <___vfiprintf_internal_r+0xb3c>
 4008bd0:	00c00084 	movi	r3,2
 4008bd4:	10ffe41e 	bne	r2,r3,4008b68 <__alt_mem_onchip_memory2_0+0xfbfe8b68>
 4008bd8:	0025883a 	mov	r18,zero
 4008bdc:	0027883a 	mov	r19,zero
 4008be0:	00013d06 	br	40090d8 <___vfiprintf_internal_r+0xee0>
 4008be4:	21003fcc 	andi	r4,r4,255
 4008be8:	2002811e 	bne	r4,zero,40095f0 <___vfiprintf_internal_r+0x13f8>
 4008bec:	008100b4 	movhi	r2,1026
 4008bf0:	10a20e04 	addi	r2,r2,-30664
 4008bf4:	d8802615 	stw	r2,152(sp)
 4008bf8:	a080080c 	andi	r2,r20,32
 4008bfc:	103f561e 	bne	r2,zero,4008958 <__alt_mem_onchip_memory2_0+0xfbfe8958>
 4008c00:	a080040c 	andi	r2,r20,16
 4008c04:	1001d126 	beq	r2,zero,400934c <___vfiprintf_internal_r+0x1154>
 4008c08:	da802217 	ldw	r10,136(sp)
 4008c0c:	0027883a 	mov	r19,zero
 4008c10:	54800017 	ldw	r18,0(r10)
 4008c14:	52800104 	addi	r10,r10,4
 4008c18:	da802215 	stw	r10,136(sp)
 4008c1c:	003f5306 	br	400896c <__alt_mem_onchip_memory2_0+0xfbfe896c>
 4008c20:	da802217 	ldw	r10,136(sp)
 4008c24:	d8001d85 	stb	zero,118(sp)
 4008c28:	55400017 	ldw	r21,0(r10)
 4008c2c:	50c00104 	addi	r3,r10,4
 4008c30:	a8024226 	beq	r21,zero,400953c <___vfiprintf_internal_r+0x1344>
 4008c34:	48021816 	blt	r9,zero,4009498 <___vfiprintf_internal_r+0x12a0>
 4008c38:	480d883a 	mov	r6,r9
 4008c3c:	000b883a 	mov	r5,zero
 4008c40:	a809883a 	mov	r4,r21
 4008c44:	d8c02a15 	stw	r3,168(sp)
 4008c48:	da002b15 	stw	r8,172(sp)
 4008c4c:	da402c15 	stw	r9,176(sp)
 4008c50:	40063f40 	call	40063f4 <memchr>
 4008c54:	d8c02a17 	ldw	r3,168(sp)
 4008c58:	da002b17 	ldw	r8,172(sp)
 4008c5c:	da402c17 	ldw	r9,176(sp)
 4008c60:	10024826 	beq	r2,zero,4009584 <___vfiprintf_internal_r+0x138c>
 4008c64:	1567c83a 	sub	r19,r2,r21
 4008c68:	df001d83 	ldbu	fp,118(sp)
 4008c6c:	d8c02215 	stw	r3,136(sp)
 4008c70:	0013883a 	mov	r9,zero
 4008c74:	003e6006 	br	40085f8 <__alt_mem_onchip_memory2_0+0xfbfe85f8>
 4008c78:	21003fcc 	andi	r4,r4,255
 4008c7c:	203fc026 	beq	r4,zero,4008b80 <__alt_mem_onchip_memory2_0+0xfbfe8b80>
 4008c80:	d9c01d85 	stb	r7,118(sp)
 4008c84:	003fbe06 	br	4008b80 <__alt_mem_onchip_memory2_0+0xfbfe8b80>
 4008c88:	da802217 	ldw	r10,136(sp)
 4008c8c:	54400017 	ldw	r17,0(r10)
 4008c90:	50800104 	addi	r2,r10,4
 4008c94:	883e3b16 	blt	r17,zero,4008584 <__alt_mem_onchip_memory2_0+0xfbfe8584>
 4008c98:	d8802215 	stw	r2,136(sp)
 4008c9c:	80c00007 	ldb	r3,0(r16)
 4008ca0:	003db406 	br	4008374 <__alt_mem_onchip_memory2_0+0xfbfe8374>
 4008ca4:	01000044 	movi	r4,1
 4008ca8:	01c00ac4 	movi	r7,43
 4008cac:	80c00007 	ldb	r3,0(r16)
 4008cb0:	003db006 	br	4008374 <__alt_mem_onchip_memory2_0+0xfbfe8374>
 4008cb4:	80c00007 	ldb	r3,0(r16)
 4008cb8:	82800044 	addi	r10,r16,1
 4008cbc:	1b423c26 	beq	r3,r13,40095b0 <___vfiprintf_internal_r+0x13b8>
 4008cc0:	18bff404 	addi	r2,r3,-48
 4008cc4:	0013883a 	mov	r9,zero
 4008cc8:	30822b36 	bltu	r6,r2,4009578 <___vfiprintf_internal_r+0x1380>
 4008ccc:	50c00007 	ldb	r3,0(r10)
 4008cd0:	4a4002a4 	muli	r9,r9,10
 4008cd4:	54000044 	addi	r16,r10,1
 4008cd8:	8015883a 	mov	r10,r16
 4008cdc:	4893883a 	add	r9,r9,r2
 4008ce0:	18bff404 	addi	r2,r3,-48
 4008ce4:	30bff92e 	bgeu	r6,r2,4008ccc <__alt_mem_onchip_memory2_0+0xfbfe8ccc>
 4008ce8:	483da30e 	bge	r9,zero,4008378 <__alt_mem_onchip_memory2_0+0xfbfe8378>
 4008cec:	027fffc4 	movi	r9,-1
 4008cf0:	003da106 	br	4008378 <__alt_mem_onchip_memory2_0+0xfbfe8378>
 4008cf4:	a5001014 	ori	r20,r20,64
 4008cf8:	80c00007 	ldb	r3,0(r16)
 4008cfc:	003d9d06 	br	4008374 <__alt_mem_onchip_memory2_0+0xfbfe8374>
 4008d00:	da802217 	ldw	r10,136(sp)
 4008d04:	d8001d85 	stb	zero,118(sp)
 4008d08:	50c00204 	addi	r3,r10,8
 4008d0c:	54800017 	ldw	r18,0(r10)
 4008d10:	54c00117 	ldw	r19,4(r10)
 4008d14:	4801ca16 	blt	r9,zero,4009440 <___vfiprintf_internal_r+0x1248>
 4008d18:	013fdfc4 	movi	r4,-129
 4008d1c:	94c4b03a 	or	r2,r18,r19
 4008d20:	d8c02215 	stw	r3,136(sp)
 4008d24:	a128703a 	and	r20,r20,r4
 4008d28:	0039883a 	mov	fp,zero
 4008d2c:	103f341e 	bne	r2,zero,4008a00 <__alt_mem_onchip_memory2_0+0xfbfe8a00>
 4008d30:	483e2e26 	beq	r9,zero,40085ec <__alt_mem_onchip_memory2_0+0xfbfe85ec>
 4008d34:	0025883a 	mov	r18,zero
 4008d38:	94800c04 	addi	r18,r18,48
 4008d3c:	dc8019c5 	stb	r18,103(sp)
 4008d40:	dcc02717 	ldw	r19,156(sp)
 4008d44:	dd4019c4 	addi	r21,sp,103
 4008d48:	003e2b06 	br	40085f8 <__alt_mem_onchip_memory2_0+0xfbfe85f8>
 4008d4c:	21003fcc 	andi	r4,r4,255
 4008d50:	2002361e 	bne	r4,zero,400962c <___vfiprintf_internal_r+0x1434>
 4008d54:	1801c126 	beq	r3,zero,400945c <___vfiprintf_internal_r+0x1264>
 4008d58:	04800044 	movi	r18,1
 4008d5c:	d8c01005 	stb	r3,64(sp)
 4008d60:	d8001d85 	stb	zero,118(sp)
 4008d64:	9027883a 	mov	r19,r18
 4008d68:	dd401004 	addi	r21,sp,64
 4008d6c:	003f1106 	br	40089b4 <__alt_mem_onchip_memory2_0+0xfbfe89b4>
 4008d70:	d9402117 	ldw	r5,132(sp)
 4008d74:	d9002017 	ldw	r4,128(sp)
 4008d78:	d9801a04 	addi	r6,sp,104
 4008d7c:	d9c02b15 	stw	r7,172(sp)
 4008d80:	dbc02a15 	stw	r15,168(sp)
 4008d84:	40080e40 	call	40080e4 <__sprint_r.part.0>
 4008d88:	d9c02b17 	ldw	r7,172(sp)
 4008d8c:	dbc02a17 	ldw	r15,168(sp)
 4008d90:	10006d1e 	bne	r2,zero,4008f48 <___vfiprintf_internal_r+0xd50>
 4008d94:	d9801b17 	ldw	r6,108(sp)
 4008d98:	d8801c17 	ldw	r2,112(sp)
 4008d9c:	d811883a 	mov	r8,sp
 4008da0:	31400044 	addi	r5,r6,1
 4008da4:	003e3306 	br	4008674 <__alt_mem_onchip_memory2_0+0xfbfe8674>
 4008da8:	d9401b17 	ldw	r5,108(sp)
 4008dac:	d8801c17 	ldw	r2,112(sp)
 4008db0:	29000044 	addi	r4,r5,1
 4008db4:	d8c01d87 	ldb	r3,118(sp)
 4008db8:	183e4d26 	beq	r3,zero,40086f0 <__alt_mem_onchip_memory2_0+0xfbfe86f0>
 4008dbc:	00c00044 	movi	r3,1
 4008dc0:	d9401d84 	addi	r5,sp,118
 4008dc4:	10c5883a 	add	r2,r2,r3
 4008dc8:	41400015 	stw	r5,0(r8)
 4008dcc:	40c00115 	stw	r3,4(r8)
 4008dd0:	d8801c15 	stw	r2,112(sp)
 4008dd4:	d9001b15 	stw	r4,108(sp)
 4008dd8:	014001c4 	movi	r5,7
 4008ddc:	2900a90e 	bge	r5,r4,4009084 <___vfiprintf_internal_r+0xe8c>
 4008de0:	1000da1e 	bne	r2,zero,400914c <___vfiprintf_internal_r+0xf54>
 4008de4:	7000ab1e 	bne	r14,zero,4009094 <___vfiprintf_internal_r+0xe9c>
 4008de8:	000b883a 	mov	r5,zero
 4008dec:	1809883a 	mov	r4,r3
 4008df0:	d811883a 	mov	r8,sp
 4008df4:	00c02004 	movi	r3,128
 4008df8:	e0fe4d26 	beq	fp,r3,4008730 <__alt_mem_onchip_memory2_0+0xfbfe8730>
 4008dfc:	4cf9c83a 	sub	fp,r9,r19
 4008e00:	073e7b0e 	bge	zero,fp,40087f0 <__alt_mem_onchip_memory2_0+0xfbfe87f0>
 4008e04:	01c00404 	movi	r7,16
 4008e08:	3f01900e 	bge	r7,fp,400944c <___vfiprintf_internal_r+0x1254>
 4008e0c:	00c100b4 	movhi	r3,1026
 4008e10:	18e27404 	addi	r3,r3,-30256
 4008e14:	d8c02415 	stw	r3,144(sp)
 4008e18:	034001c4 	movi	r13,7
 4008e1c:	00000506 	br	4008e34 <___vfiprintf_internal_r+0xc3c>
 4008e20:	29000084 	addi	r4,r5,2
 4008e24:	42000204 	addi	r8,r8,8
 4008e28:	180b883a 	mov	r5,r3
 4008e2c:	e73ffc04 	addi	fp,fp,-16
 4008e30:	3f000d0e 	bge	r7,fp,4008e68 <___vfiprintf_internal_r+0xc70>
 4008e34:	10800404 	addi	r2,r2,16
 4008e38:	28c00044 	addi	r3,r5,1
 4008e3c:	45c00015 	stw	r23,0(r8)
 4008e40:	41c00115 	stw	r7,4(r8)
 4008e44:	d8801c15 	stw	r2,112(sp)
 4008e48:	d8c01b15 	stw	r3,108(sp)
 4008e4c:	68fff40e 	bge	r13,r3,4008e20 <__alt_mem_onchip_memory2_0+0xfbfe8e20>
 4008e50:	1000101e 	bne	r2,zero,4008e94 <___vfiprintf_internal_r+0xc9c>
 4008e54:	e73ffc04 	addi	fp,fp,-16
 4008e58:	01000044 	movi	r4,1
 4008e5c:	000b883a 	mov	r5,zero
 4008e60:	d811883a 	mov	r8,sp
 4008e64:	3f3ff316 	blt	r7,fp,4008e34 <__alt_mem_onchip_memory2_0+0xfbfe8e34>
 4008e68:	da802417 	ldw	r10,144(sp)
 4008e6c:	1705883a 	add	r2,r2,fp
 4008e70:	47000115 	stw	fp,4(r8)
 4008e74:	42800015 	stw	r10,0(r8)
 4008e78:	d8801c15 	stw	r2,112(sp)
 4008e7c:	d9001b15 	stw	r4,108(sp)
 4008e80:	00c001c4 	movi	r3,7
 4008e84:	19003616 	blt	r3,r4,4008f60 <___vfiprintf_internal_r+0xd68>
 4008e88:	42000204 	addi	r8,r8,8
 4008e8c:	21000044 	addi	r4,r4,1
 4008e90:	003e5706 	br	40087f0 <__alt_mem_onchip_memory2_0+0xfbfe87f0>
 4008e94:	d9402117 	ldw	r5,132(sp)
 4008e98:	d9002017 	ldw	r4,128(sp)
 4008e9c:	d9801a04 	addi	r6,sp,104
 4008ea0:	d9c02b15 	stw	r7,172(sp)
 4008ea4:	db402a15 	stw	r13,168(sp)
 4008ea8:	40080e40 	call	40080e4 <__sprint_r.part.0>
 4008eac:	d9c02b17 	ldw	r7,172(sp)
 4008eb0:	db402a17 	ldw	r13,168(sp)
 4008eb4:	1000241e 	bne	r2,zero,4008f48 <___vfiprintf_internal_r+0xd50>
 4008eb8:	d9401b17 	ldw	r5,108(sp)
 4008ebc:	d8801c17 	ldw	r2,112(sp)
 4008ec0:	d811883a 	mov	r8,sp
 4008ec4:	29000044 	addi	r4,r5,1
 4008ec8:	003fd806 	br	4008e2c <__alt_mem_onchip_memory2_0+0xfbfe8e2c>
 4008ecc:	d9401b17 	ldw	r5,108(sp)
 4008ed0:	00c100b4 	movhi	r3,1026
 4008ed4:	18e27804 	addi	r3,r3,-30240
 4008ed8:	d8c02415 	stw	r3,144(sp)
 4008edc:	29400044 	addi	r5,r5,1
 4008ee0:	d8c02417 	ldw	r3,144(sp)
 4008ee4:	14c5883a 	add	r2,r2,r19
 4008ee8:	44c00115 	stw	r19,4(r8)
 4008eec:	40c00015 	stw	r3,0(r8)
 4008ef0:	d8801c15 	stw	r2,112(sp)
 4008ef4:	d9401b15 	stw	r5,108(sp)
 4008ef8:	00c001c4 	movi	r3,7
 4008efc:	1940070e 	bge	r3,r5,4008f1c <___vfiprintf_internal_r+0xd24>
 4008f00:	103e4826 	beq	r2,zero,4008824 <__alt_mem_onchip_memory2_0+0xfbfe8824>
 4008f04:	d9402117 	ldw	r5,132(sp)
 4008f08:	d9002017 	ldw	r4,128(sp)
 4008f0c:	d9801a04 	addi	r6,sp,104
 4008f10:	40080e40 	call	40080e4 <__sprint_r.part.0>
 4008f14:	10000c1e 	bne	r2,zero,4008f48 <___vfiprintf_internal_r+0xd50>
 4008f18:	d8801c17 	ldw	r2,112(sp)
 4008f1c:	8c80010e 	bge	r17,r18,4008f24 <___vfiprintf_internal_r+0xd2c>
 4008f20:	9023883a 	mov	r17,r18
 4008f24:	da802317 	ldw	r10,140(sp)
 4008f28:	5455883a 	add	r10,r10,r17
 4008f2c:	da802315 	stw	r10,140(sp)
 4008f30:	103e4126 	beq	r2,zero,4008838 <__alt_mem_onchip_memory2_0+0xfbfe8838>
 4008f34:	d9402117 	ldw	r5,132(sp)
 4008f38:	d9002017 	ldw	r4,128(sp)
 4008f3c:	d9801a04 	addi	r6,sp,104
 4008f40:	40080e40 	call	40080e4 <__sprint_r.part.0>
 4008f44:	103e3c26 	beq	r2,zero,4008838 <__alt_mem_onchip_memory2_0+0xfbfe8838>
 4008f48:	dd002117 	ldw	r20,132(sp)
 4008f4c:	a080030b 	ldhu	r2,12(r20)
 4008f50:	1080100c 	andi	r2,r2,64
 4008f54:	1001231e 	bne	r2,zero,40093e4 <___vfiprintf_internal_r+0x11ec>
 4008f58:	d8802317 	ldw	r2,140(sp)
 4008f5c:	003d7b06 	br	400854c <__alt_mem_onchip_memory2_0+0xfbfe854c>
 4008f60:	1000991e 	bne	r2,zero,40091c8 <___vfiprintf_internal_r+0xfd0>
 4008f64:	00c00044 	movi	r3,1
 4008f68:	9805883a 	mov	r2,r19
 4008f6c:	dd400015 	stw	r21,0(sp)
 4008f70:	dcc00115 	stw	r19,4(sp)
 4008f74:	dcc01c15 	stw	r19,112(sp)
 4008f78:	d8c01b15 	stw	r3,108(sp)
 4008f7c:	d811883a 	mov	r8,sp
 4008f80:	42000204 	addi	r8,r8,8
 4008f84:	a2c0010c 	andi	r11,r20,4
 4008f88:	583fe426 	beq	r11,zero,4008f1c <__alt_mem_onchip_memory2_0+0xfbfe8f1c>
 4008f8c:	8ca7c83a 	sub	r19,r17,r18
 4008f90:	04ffe20e 	bge	zero,r19,4008f1c <__alt_mem_onchip_memory2_0+0xfbfe8f1c>
 4008f94:	01c00404 	movi	r7,16
 4008f98:	3cffcc0e 	bge	r7,r19,4008ecc <__alt_mem_onchip_memory2_0+0xfbfe8ecc>
 4008f9c:	028100b4 	movhi	r10,1026
 4008fa0:	52a27804 	addi	r10,r10,-30240
 4008fa4:	d9001b17 	ldw	r4,108(sp)
 4008fa8:	da802415 	stw	r10,144(sp)
 4008fac:	382b883a 	mov	r21,r7
 4008fb0:	050001c4 	movi	r20,7
 4008fb4:	df002017 	ldw	fp,128(sp)
 4008fb8:	00000506 	br	4008fd0 <___vfiprintf_internal_r+0xdd8>
 4008fbc:	21400084 	addi	r5,r4,2
 4008fc0:	42000204 	addi	r8,r8,8
 4008fc4:	1809883a 	mov	r4,r3
 4008fc8:	9cfffc04 	addi	r19,r19,-16
 4008fcc:	acffc40e 	bge	r21,r19,4008ee0 <__alt_mem_onchip_memory2_0+0xfbfe8ee0>
 4008fd0:	10800404 	addi	r2,r2,16
 4008fd4:	20c00044 	addi	r3,r4,1
 4008fd8:	45800015 	stw	r22,0(r8)
 4008fdc:	45400115 	stw	r21,4(r8)
 4008fe0:	d8801c15 	stw	r2,112(sp)
 4008fe4:	d8c01b15 	stw	r3,108(sp)
 4008fe8:	a0fff40e 	bge	r20,r3,4008fbc <__alt_mem_onchip_memory2_0+0xfbfe8fbc>
 4008fec:	1000041e 	bne	r2,zero,4009000 <___vfiprintf_internal_r+0xe08>
 4008ff0:	01400044 	movi	r5,1
 4008ff4:	0009883a 	mov	r4,zero
 4008ff8:	d811883a 	mov	r8,sp
 4008ffc:	003ff206 	br	4008fc8 <__alt_mem_onchip_memory2_0+0xfbfe8fc8>
 4009000:	d9402117 	ldw	r5,132(sp)
 4009004:	d9801a04 	addi	r6,sp,104
 4009008:	e009883a 	mov	r4,fp
 400900c:	40080e40 	call	40080e4 <__sprint_r.part.0>
 4009010:	103fcd1e 	bne	r2,zero,4008f48 <__alt_mem_onchip_memory2_0+0xfbfe8f48>
 4009014:	d9001b17 	ldw	r4,108(sp)
 4009018:	d8801c17 	ldw	r2,112(sp)
 400901c:	d811883a 	mov	r8,sp
 4009020:	21400044 	addi	r5,r4,1
 4009024:	003fe806 	br	4008fc8 <__alt_mem_onchip_memory2_0+0xfbfe8fc8>
 4009028:	d9402117 	ldw	r5,132(sp)
 400902c:	d9002017 	ldw	r4,128(sp)
 4009030:	d9801a04 	addi	r6,sp,104
 4009034:	d9c02b15 	stw	r7,172(sp)
 4009038:	db402a15 	stw	r13,168(sp)
 400903c:	40080e40 	call	40080e4 <__sprint_r.part.0>
 4009040:	d9c02b17 	ldw	r7,172(sp)
 4009044:	db402a17 	ldw	r13,168(sp)
 4009048:	103fbf1e 	bne	r2,zero,4008f48 <__alt_mem_onchip_memory2_0+0xfbfe8f48>
 400904c:	d9401b17 	ldw	r5,108(sp)
 4009050:	d8801c17 	ldw	r2,112(sp)
 4009054:	d811883a 	mov	r8,sp
 4009058:	29800044 	addi	r6,r5,1
 400905c:	003dc406 	br	4008770 <__alt_mem_onchip_memory2_0+0xfbfe8770>
 4009060:	1000d21e 	bne	r2,zero,40093ac <___vfiprintf_internal_r+0x11b4>
 4009064:	d8c01d87 	ldb	r3,118(sp)
 4009068:	18009526 	beq	r3,zero,40092c0 <___vfiprintf_internal_r+0x10c8>
 400906c:	00800044 	movi	r2,1
 4009070:	d8c01d84 	addi	r3,sp,118
 4009074:	1009883a 	mov	r4,r2
 4009078:	d8c00015 	stw	r3,0(sp)
 400907c:	d8800115 	stw	r2,4(sp)
 4009080:	d811883a 	mov	r8,sp
 4009084:	200b883a 	mov	r5,r4
 4009088:	42000204 	addi	r8,r8,8
 400908c:	21000044 	addi	r4,r4,1
 4009090:	003d9706 	br	40086f0 <__alt_mem_onchip_memory2_0+0xfbfe86f0>
 4009094:	d9001d04 	addi	r4,sp,116
 4009098:	00800084 	movi	r2,2
 400909c:	d9000015 	stw	r4,0(sp)
 40090a0:	d8800115 	stw	r2,4(sp)
 40090a4:	1809883a 	mov	r4,r3
 40090a8:	d811883a 	mov	r8,sp
 40090ac:	200b883a 	mov	r5,r4
 40090b0:	42000204 	addi	r8,r8,8
 40090b4:	21000044 	addi	r4,r4,1
 40090b8:	003f4e06 	br	4008df4 <__alt_mem_onchip_memory2_0+0xfbfe8df4>
 40090bc:	d8001d85 	stb	zero,118(sp)
 40090c0:	48005016 	blt	r9,zero,4009204 <___vfiprintf_internal_r+0x100c>
 40090c4:	00ffdfc4 	movi	r3,-129
 40090c8:	94c4b03a 	or	r2,r18,r19
 40090cc:	a0e8703a 	and	r20,r20,r3
 40090d0:	103d4426 	beq	r2,zero,40085e4 <__alt_mem_onchip_memory2_0+0xfbfe85e4>
 40090d4:	0039883a 	mov	fp,zero
 40090d8:	d9002617 	ldw	r4,152(sp)
 40090dc:	dd401a04 	addi	r21,sp,104
 40090e0:	908003cc 	andi	r2,r18,15
 40090e4:	9806973a 	slli	r3,r19,28
 40090e8:	2085883a 	add	r2,r4,r2
 40090ec:	9024d13a 	srli	r18,r18,4
 40090f0:	10800003 	ldbu	r2,0(r2)
 40090f4:	9826d13a 	srli	r19,r19,4
 40090f8:	ad7fffc4 	addi	r21,r21,-1
 40090fc:	1ca4b03a 	or	r18,r3,r18
 4009100:	a8800005 	stb	r2,0(r21)
 4009104:	94c4b03a 	or	r2,r18,r19
 4009108:	103ff51e 	bne	r2,zero,40090e0 <__alt_mem_onchip_memory2_0+0xfbfe90e0>
 400910c:	003e5906 	br	4008a74 <__alt_mem_onchip_memory2_0+0xfbfe8a74>
 4009110:	d9402117 	ldw	r5,132(sp)
 4009114:	d9002017 	ldw	r4,128(sp)
 4009118:	d9801a04 	addi	r6,sp,104
 400911c:	40080e40 	call	40080e4 <__sprint_r.part.0>
 4009120:	103f891e 	bne	r2,zero,4008f48 <__alt_mem_onchip_memory2_0+0xfbfe8f48>
 4009124:	d8801c17 	ldw	r2,112(sp)
 4009128:	d811883a 	mov	r8,sp
 400912c:	003f9506 	br	4008f84 <__alt_mem_onchip_memory2_0+0xfbfe8f84>
 4009130:	d9402117 	ldw	r5,132(sp)
 4009134:	d9002017 	ldw	r4,128(sp)
 4009138:	d9801a04 	addi	r6,sp,104
 400913c:	40080e40 	call	40080e4 <__sprint_r.part.0>
 4009140:	103f811e 	bne	r2,zero,4008f48 <__alt_mem_onchip_memory2_0+0xfbfe8f48>
 4009144:	d811883a 	mov	r8,sp
 4009148:	003ced06 	br	4008500 <__alt_mem_onchip_memory2_0+0xfbfe8500>
 400914c:	d9402117 	ldw	r5,132(sp)
 4009150:	d9002017 	ldw	r4,128(sp)
 4009154:	d9801a04 	addi	r6,sp,104
 4009158:	da402c15 	stw	r9,176(sp)
 400915c:	db802a15 	stw	r14,168(sp)
 4009160:	40080e40 	call	40080e4 <__sprint_r.part.0>
 4009164:	da402c17 	ldw	r9,176(sp)
 4009168:	db802a17 	ldw	r14,168(sp)
 400916c:	103f761e 	bne	r2,zero,4008f48 <__alt_mem_onchip_memory2_0+0xfbfe8f48>
 4009170:	d9401b17 	ldw	r5,108(sp)
 4009174:	d8801c17 	ldw	r2,112(sp)
 4009178:	d811883a 	mov	r8,sp
 400917c:	29000044 	addi	r4,r5,1
 4009180:	003d5b06 	br	40086f0 <__alt_mem_onchip_memory2_0+0xfbfe86f0>
 4009184:	d9402117 	ldw	r5,132(sp)
 4009188:	d9002017 	ldw	r4,128(sp)
 400918c:	d9801a04 	addi	r6,sp,104
 4009190:	da402c15 	stw	r9,176(sp)
 4009194:	40080e40 	call	40080e4 <__sprint_r.part.0>
 4009198:	da402c17 	ldw	r9,176(sp)
 400919c:	103f6a1e 	bne	r2,zero,4008f48 <__alt_mem_onchip_memory2_0+0xfbfe8f48>
 40091a0:	d9401b17 	ldw	r5,108(sp)
 40091a4:	d8801c17 	ldw	r2,112(sp)
 40091a8:	d811883a 	mov	r8,sp
 40091ac:	29000044 	addi	r4,r5,1
 40091b0:	003f1006 	br	4008df4 <__alt_mem_onchip_memory2_0+0xfbfe8df4>
 40091b4:	1000c31e 	bne	r2,zero,40094c4 <___vfiprintf_internal_r+0x12cc>
 40091b8:	01000044 	movi	r4,1
 40091bc:	000b883a 	mov	r5,zero
 40091c0:	d811883a 	mov	r8,sp
 40091c4:	003f0d06 	br	4008dfc <__alt_mem_onchip_memory2_0+0xfbfe8dfc>
 40091c8:	d9402117 	ldw	r5,132(sp)
 40091cc:	d9002017 	ldw	r4,128(sp)
 40091d0:	d9801a04 	addi	r6,sp,104
 40091d4:	40080e40 	call	40080e4 <__sprint_r.part.0>
 40091d8:	103f5b1e 	bne	r2,zero,4008f48 <__alt_mem_onchip_memory2_0+0xfbfe8f48>
 40091dc:	d9001b17 	ldw	r4,108(sp)
 40091e0:	d8801c17 	ldw	r2,112(sp)
 40091e4:	d811883a 	mov	r8,sp
 40091e8:	21000044 	addi	r4,r4,1
 40091ec:	003d8006 	br	40087f0 <__alt_mem_onchip_memory2_0+0xfbfe87f0>
 40091f0:	010100b4 	movhi	r4,1026
 40091f4:	21221304 	addi	r4,r4,-30644
 40091f8:	d9002615 	stw	r4,152(sp)
 40091fc:	d8c02215 	stw	r3,136(sp)
 4009200:	1029883a 	mov	r20,r2
 4009204:	94c4b03a 	or	r2,r18,r19
 4009208:	103fb21e 	bne	r2,zero,40090d4 <__alt_mem_onchip_memory2_0+0xfbfe90d4>
 400920c:	0039883a 	mov	fp,zero
 4009210:	00800084 	movi	r2,2
 4009214:	003e6b06 	br	4008bc4 <__alt_mem_onchip_memory2_0+0xfbfe8bc4>
 4009218:	da802217 	ldw	r10,136(sp)
 400921c:	d8001d85 	stb	zero,118(sp)
 4009220:	0027883a 	mov	r19,zero
 4009224:	50800104 	addi	r2,r10,4
 4009228:	54800017 	ldw	r18,0(r10)
 400922c:	483e6016 	blt	r9,zero,4008bb0 <__alt_mem_onchip_memory2_0+0xfbfe8bb0>
 4009230:	00ffdfc4 	movi	r3,-129
 4009234:	d8802215 	stw	r2,136(sp)
 4009238:	a0e8703a 	and	r20,r20,r3
 400923c:	0039883a 	mov	fp,zero
 4009240:	903ebb26 	beq	r18,zero,4008d30 <__alt_mem_onchip_memory2_0+0xfbfe8d30>
 4009244:	00800244 	movi	r2,9
 4009248:	14bdee36 	bltu	r2,r18,4008a04 <__alt_mem_onchip_memory2_0+0xfbfe8a04>
 400924c:	003eba06 	br	4008d38 <__alt_mem_onchip_memory2_0+0xfbfe8d38>
 4009250:	00800c04 	movi	r2,48
 4009254:	d8c01d45 	stb	r3,117(sp)
 4009258:	d8801d05 	stb	r2,116(sp)
 400925c:	d8001d85 	stb	zero,118(sp)
 4009260:	a0c00094 	ori	r3,r20,2
 4009264:	4800a916 	blt	r9,zero,400950c <___vfiprintf_internal_r+0x1314>
 4009268:	00bfdfc4 	movi	r2,-129
 400926c:	a096703a 	and	r11,r20,r2
 4009270:	5d000094 	ori	r20,r11,2
 4009274:	0039883a 	mov	fp,zero
 4009278:	003f9706 	br	40090d8 <__alt_mem_onchip_memory2_0+0xfbfe90d8>
 400927c:	8025883a 	mov	r18,r16
 4009280:	003c2e06 	br	400833c <__alt_mem_onchip_memory2_0+0xfbfe833c>
 4009284:	008100b4 	movhi	r2,1026
 4009288:	10a21304 	addi	r2,r2,-30644
 400928c:	0039883a 	mov	fp,zero
 4009290:	d8802615 	stw	r2,152(sp)
 4009294:	003f9006 	br	40090d8 <__alt_mem_onchip_memory2_0+0xfbfe90d8>
 4009298:	04a5c83a 	sub	r18,zero,r18
 400929c:	07000b44 	movi	fp,45
 40092a0:	9004c03a 	cmpne	r2,r18,zero
 40092a4:	04e7c83a 	sub	r19,zero,r19
 40092a8:	df001d85 	stb	fp,118(sp)
 40092ac:	98a7c83a 	sub	r19,r19,r2
 40092b0:	48009f16 	blt	r9,zero,4009530 <___vfiprintf_internal_r+0x1338>
 40092b4:	00bfdfc4 	movi	r2,-129
 40092b8:	a0a8703a 	and	r20,r20,r2
 40092bc:	003dd006 	br	4008a00 <__alt_mem_onchip_memory2_0+0xfbfe8a00>
 40092c0:	70004c26 	beq	r14,zero,40093f4 <___vfiprintf_internal_r+0x11fc>
 40092c4:	00800084 	movi	r2,2
 40092c8:	d8c01d04 	addi	r3,sp,116
 40092cc:	d8c00015 	stw	r3,0(sp)
 40092d0:	d8800115 	stw	r2,4(sp)
 40092d4:	01000044 	movi	r4,1
 40092d8:	d811883a 	mov	r8,sp
 40092dc:	003f7306 	br	40090ac <__alt_mem_onchip_memory2_0+0xfbfe90ac>
 40092e0:	a080100c 	andi	r2,r20,64
 40092e4:	da802217 	ldw	r10,136(sp)
 40092e8:	103e0626 	beq	r2,zero,4008b04 <__alt_mem_onchip_memory2_0+0xfbfe8b04>
 40092ec:	5480000f 	ldh	r18,0(r10)
 40092f0:	52800104 	addi	r10,r10,4
 40092f4:	da802215 	stw	r10,136(sp)
 40092f8:	9027d7fa 	srai	r19,r18,31
 40092fc:	9805883a 	mov	r2,r19
 4009300:	003db806 	br	40089e4 <__alt_mem_onchip_memory2_0+0xfbfe89e4>
 4009304:	a080040c 	andi	r2,r20,16
 4009308:	1000091e 	bne	r2,zero,4009330 <___vfiprintf_internal_r+0x1138>
 400930c:	a2c0100c 	andi	r11,r20,64
 4009310:	58000726 	beq	r11,zero,4009330 <___vfiprintf_internal_r+0x1138>
 4009314:	da802217 	ldw	r10,136(sp)
 4009318:	50800017 	ldw	r2,0(r10)
 400931c:	52800104 	addi	r10,r10,4
 4009320:	da802215 	stw	r10,136(sp)
 4009324:	da802317 	ldw	r10,140(sp)
 4009328:	1280000d 	sth	r10,0(r2)
 400932c:	003be706 	br	40082cc <__alt_mem_onchip_memory2_0+0xfbfe82cc>
 4009330:	da802217 	ldw	r10,136(sp)
 4009334:	50800017 	ldw	r2,0(r10)
 4009338:	52800104 	addi	r10,r10,4
 400933c:	da802215 	stw	r10,136(sp)
 4009340:	da802317 	ldw	r10,140(sp)
 4009344:	12800015 	stw	r10,0(r2)
 4009348:	003be006 	br	40082cc <__alt_mem_onchip_memory2_0+0xfbfe82cc>
 400934c:	a080100c 	andi	r2,r20,64
 4009350:	da802217 	ldw	r10,136(sp)
 4009354:	10003026 	beq	r2,zero,4009418 <___vfiprintf_internal_r+0x1220>
 4009358:	5480000b 	ldhu	r18,0(r10)
 400935c:	52800104 	addi	r10,r10,4
 4009360:	0027883a 	mov	r19,zero
 4009364:	da802215 	stw	r10,136(sp)
 4009368:	003d8006 	br	400896c <__alt_mem_onchip_memory2_0+0xfbfe896c>
 400936c:	80c00007 	ldb	r3,0(r16)
 4009370:	003c0006 	br	4008374 <__alt_mem_onchip_memory2_0+0xfbfe8374>
 4009374:	a080100c 	andi	r2,r20,64
 4009378:	d8001d85 	stb	zero,118(sp)
 400937c:	da802217 	ldw	r10,136(sp)
 4009380:	1000201e 	bne	r2,zero,4009404 <___vfiprintf_internal_r+0x120c>
 4009384:	50800104 	addi	r2,r10,4
 4009388:	54800017 	ldw	r18,0(r10)
 400938c:	0027883a 	mov	r19,zero
 4009390:	483def0e 	bge	r9,zero,4008b50 <__alt_mem_onchip_memory2_0+0xfbfe8b50>
 4009394:	94c6b03a 	or	r3,r18,r19
 4009398:	d8802215 	stw	r2,136(sp)
 400939c:	183d4e1e 	bne	r3,zero,40088d8 <__alt_mem_onchip_memory2_0+0xfbfe88d8>
 40093a0:	0039883a 	mov	fp,zero
 40093a4:	0005883a 	mov	r2,zero
 40093a8:	003e0606 	br	4008bc4 <__alt_mem_onchip_memory2_0+0xfbfe8bc4>
 40093ac:	d9402117 	ldw	r5,132(sp)
 40093b0:	d9002017 	ldw	r4,128(sp)
 40093b4:	d9801a04 	addi	r6,sp,104
 40093b8:	da402c15 	stw	r9,176(sp)
 40093bc:	db802a15 	stw	r14,168(sp)
 40093c0:	40080e40 	call	40080e4 <__sprint_r.part.0>
 40093c4:	da402c17 	ldw	r9,176(sp)
 40093c8:	db802a17 	ldw	r14,168(sp)
 40093cc:	103ede1e 	bne	r2,zero,4008f48 <__alt_mem_onchip_memory2_0+0xfbfe8f48>
 40093d0:	d9401b17 	ldw	r5,108(sp)
 40093d4:	d8801c17 	ldw	r2,112(sp)
 40093d8:	d811883a 	mov	r8,sp
 40093dc:	29000044 	addi	r4,r5,1
 40093e0:	003e7406 	br	4008db4 <__alt_mem_onchip_memory2_0+0xfbfe8db4>
 40093e4:	00bfffc4 	movi	r2,-1
 40093e8:	003c5806 	br	400854c <__alt_mem_onchip_memory2_0+0xfbfe854c>
 40093ec:	d811883a 	mov	r8,sp
 40093f0:	003ee806 	br	4008f94 <__alt_mem_onchip_memory2_0+0xfbfe8f94>
 40093f4:	000b883a 	mov	r5,zero
 40093f8:	01000044 	movi	r4,1
 40093fc:	d811883a 	mov	r8,sp
 4009400:	003e7c06 	br	4008df4 <__alt_mem_onchip_memory2_0+0xfbfe8df4>
 4009404:	50800104 	addi	r2,r10,4
 4009408:	5480000b 	ldhu	r18,0(r10)
 400940c:	0027883a 	mov	r19,zero
 4009410:	483dcf0e 	bge	r9,zero,4008b50 <__alt_mem_onchip_memory2_0+0xfbfe8b50>
 4009414:	003fdf06 	br	4009394 <__alt_mem_onchip_memory2_0+0xfbfe9394>
 4009418:	54800017 	ldw	r18,0(r10)
 400941c:	52800104 	addi	r10,r10,4
 4009420:	0027883a 	mov	r19,zero
 4009424:	da802215 	stw	r10,136(sp)
 4009428:	003d5006 	br	400896c <__alt_mem_onchip_memory2_0+0xfbfe896c>
 400942c:	50800104 	addi	r2,r10,4
 4009430:	5480000b 	ldhu	r18,0(r10)
 4009434:	0027883a 	mov	r19,zero
 4009438:	483f7d0e 	bge	r9,zero,4009230 <__alt_mem_onchip_memory2_0+0xfbfe9230>
 400943c:	003ddc06 	br	4008bb0 <__alt_mem_onchip_memory2_0+0xfbfe8bb0>
 4009440:	d8c02215 	stw	r3,136(sp)
 4009444:	0039883a 	mov	fp,zero
 4009448:	003ddb06 	br	4008bb8 <__alt_mem_onchip_memory2_0+0xfbfe8bb8>
 400944c:	028100b4 	movhi	r10,1026
 4009450:	52a27404 	addi	r10,r10,-30256
 4009454:	da802415 	stw	r10,144(sp)
 4009458:	003e8306 	br	4008e68 <__alt_mem_onchip_memory2_0+0xfbfe8e68>
 400945c:	d8801c17 	ldw	r2,112(sp)
 4009460:	dd002117 	ldw	r20,132(sp)
 4009464:	103eb926 	beq	r2,zero,4008f4c <__alt_mem_onchip_memory2_0+0xfbfe8f4c>
 4009468:	d9002017 	ldw	r4,128(sp)
 400946c:	d9801a04 	addi	r6,sp,104
 4009470:	a00b883a 	mov	r5,r20
 4009474:	40080e40 	call	40080e4 <__sprint_r.part.0>
 4009478:	003eb406 	br	4008f4c <__alt_mem_onchip_memory2_0+0xfbfe8f4c>
 400947c:	80c00043 	ldbu	r3,1(r16)
 4009480:	a5000814 	ori	r20,r20,32
 4009484:	84000044 	addi	r16,r16,1
 4009488:	18c03fcc 	andi	r3,r3,255
 400948c:	18c0201c 	xori	r3,r3,128
 4009490:	18ffe004 	addi	r3,r3,-128
 4009494:	003bb706 	br	4008374 <__alt_mem_onchip_memory2_0+0xfbfe8374>
 4009498:	a809883a 	mov	r4,r21
 400949c:	d8c02a15 	stw	r3,168(sp)
 40094a0:	da002b15 	stw	r8,172(sp)
 40094a4:	4000b4c0 	call	4000b4c <strlen>
 40094a8:	d8c02a17 	ldw	r3,168(sp)
 40094ac:	1027883a 	mov	r19,r2
 40094b0:	df001d83 	ldbu	fp,118(sp)
 40094b4:	d8c02215 	stw	r3,136(sp)
 40094b8:	0013883a 	mov	r9,zero
 40094bc:	da002b17 	ldw	r8,172(sp)
 40094c0:	003c4d06 	br	40085f8 <__alt_mem_onchip_memory2_0+0xfbfe85f8>
 40094c4:	d9402117 	ldw	r5,132(sp)
 40094c8:	d9002017 	ldw	r4,128(sp)
 40094cc:	d9801a04 	addi	r6,sp,104
 40094d0:	da402c15 	stw	r9,176(sp)
 40094d4:	40080e40 	call	40080e4 <__sprint_r.part.0>
 40094d8:	da402c17 	ldw	r9,176(sp)
 40094dc:	103e9a1e 	bne	r2,zero,4008f48 <__alt_mem_onchip_memory2_0+0xfbfe8f48>
 40094e0:	d9401b17 	ldw	r5,108(sp)
 40094e4:	d8801c17 	ldw	r2,112(sp)
 40094e8:	d811883a 	mov	r8,sp
 40094ec:	29000044 	addi	r4,r5,1
 40094f0:	003e4206 	br	4008dfc <__alt_mem_onchip_memory2_0+0xfbfe8dfc>
 40094f4:	d9401b17 	ldw	r5,108(sp)
 40094f8:	010100b4 	movhi	r4,1026
 40094fc:	21227804 	addi	r4,r4,-30240
 4009500:	d9002415 	stw	r4,144(sp)
 4009504:	29400044 	addi	r5,r5,1
 4009508:	003c6d06 	br	40086c0 <__alt_mem_onchip_memory2_0+0xfbfe86c0>
 400950c:	0039883a 	mov	fp,zero
 4009510:	00800084 	movi	r2,2
 4009514:	10803fcc 	andi	r2,r2,255
 4009518:	01000044 	movi	r4,1
 400951c:	11001e26 	beq	r2,r4,4009598 <___vfiprintf_internal_r+0x13a0>
 4009520:	01000084 	movi	r4,2
 4009524:	11001e1e 	bne	r2,r4,40095a0 <___vfiprintf_internal_r+0x13a8>
 4009528:	1829883a 	mov	r20,r3
 400952c:	003eea06 	br	40090d8 <__alt_mem_onchip_memory2_0+0xfbfe90d8>
 4009530:	a007883a 	mov	r3,r20
 4009534:	00800044 	movi	r2,1
 4009538:	003ff606 	br	4009514 <__alt_mem_onchip_memory2_0+0xfbfe9514>
 400953c:	00800184 	movi	r2,6
 4009540:	1240012e 	bgeu	r2,r9,4009548 <___vfiprintf_internal_r+0x1350>
 4009544:	1013883a 	mov	r9,r2
 4009548:	4827883a 	mov	r19,r9
 400954c:	4825883a 	mov	r18,r9
 4009550:	48001516 	blt	r9,zero,40095a8 <___vfiprintf_internal_r+0x13b0>
 4009554:	054100b4 	movhi	r21,1026
 4009558:	d8c02215 	stw	r3,136(sp)
 400955c:	ad621804 	addi	r21,r21,-30624
 4009560:	003d1406 	br	40089b4 <__alt_mem_onchip_memory2_0+0xfbfe89b4>
 4009564:	028100b4 	movhi	r10,1026
 4009568:	52a27404 	addi	r10,r10,-30256
 400956c:	da802415 	stw	r10,144(sp)
 4009570:	200d883a 	mov	r6,r4
 4009574:	003c9106 	br	40087bc <__alt_mem_onchip_memory2_0+0xfbfe87bc>
 4009578:	5021883a 	mov	r16,r10
 400957c:	0013883a 	mov	r9,zero
 4009580:	003b7d06 	br	4008378 <__alt_mem_onchip_memory2_0+0xfbfe8378>
 4009584:	4827883a 	mov	r19,r9
 4009588:	df001d83 	ldbu	fp,118(sp)
 400958c:	d8c02215 	stw	r3,136(sp)
 4009590:	0013883a 	mov	r9,zero
 4009594:	003c1806 	br	40085f8 <__alt_mem_onchip_memory2_0+0xfbfe85f8>
 4009598:	1829883a 	mov	r20,r3
 400959c:	003d1806 	br	4008a00 <__alt_mem_onchip_memory2_0+0xfbfe8a00>
 40095a0:	1829883a 	mov	r20,r3
 40095a4:	003ccd06 	br	40088dc <__alt_mem_onchip_memory2_0+0xfbfe88dc>
 40095a8:	0025883a 	mov	r18,zero
 40095ac:	003fe906 	br	4009554 <__alt_mem_onchip_memory2_0+0xfbfe9554>
 40095b0:	d8802217 	ldw	r2,136(sp)
 40095b4:	80c00043 	ldbu	r3,1(r16)
 40095b8:	5021883a 	mov	r16,r10
 40095bc:	12400017 	ldw	r9,0(r2)
 40095c0:	10800104 	addi	r2,r2,4
 40095c4:	d8802215 	stw	r2,136(sp)
 40095c8:	483faf0e 	bge	r9,zero,4009488 <__alt_mem_onchip_memory2_0+0xfbfe9488>
 40095cc:	18c03fcc 	andi	r3,r3,255
 40095d0:	18c0201c 	xori	r3,r3,128
 40095d4:	027fffc4 	movi	r9,-1
 40095d8:	18ffe004 	addi	r3,r3,-128
 40095dc:	003b6506 	br	4008374 <__alt_mem_onchip_memory2_0+0xfbfe8374>
 40095e0:	d9c01d85 	stb	r7,118(sp)
 40095e4:	003ca006 	br	4008868 <__alt_mem_onchip_memory2_0+0xfbfe8868>
 40095e8:	d9c01d85 	stb	r7,118(sp)
 40095ec:	003cad06 	br	40088a4 <__alt_mem_onchip_memory2_0+0xfbfe88a4>
 40095f0:	d9c01d85 	stb	r7,118(sp)
 40095f4:	003d7d06 	br	4008bec <__alt_mem_onchip_memory2_0+0xfbfe8bec>
 40095f8:	d9c01d85 	stb	r7,118(sp)
 40095fc:	003d5f06 	br	4008b7c <__alt_mem_onchip_memory2_0+0xfbfe8b7c>
 4009600:	a080004c 	andi	r2,r20,1
 4009604:	0039883a 	mov	fp,zero
 4009608:	10000526 	beq	r2,zero,4009620 <___vfiprintf_internal_r+0x1428>
 400960c:	00800c04 	movi	r2,48
 4009610:	d88019c5 	stb	r2,103(sp)
 4009614:	dcc02717 	ldw	r19,156(sp)
 4009618:	dd4019c4 	addi	r21,sp,103
 400961c:	003bf606 	br	40085f8 <__alt_mem_onchip_memory2_0+0xfbfe85f8>
 4009620:	0027883a 	mov	r19,zero
 4009624:	dd401a04 	addi	r21,sp,104
 4009628:	003bf306 	br	40085f8 <__alt_mem_onchip_memory2_0+0xfbfe85f8>
 400962c:	d9c01d85 	stb	r7,118(sp)
 4009630:	003dc806 	br	4008d54 <__alt_mem_onchip_memory2_0+0xfbfe8d54>
 4009634:	d9c01d85 	stb	r7,118(sp)
 4009638:	003d3a06 	br	4008b24 <__alt_mem_onchip_memory2_0+0xfbfe8b24>
 400963c:	d9c01d85 	stb	r7,118(sp)
 4009640:	003d2a06 	br	4008aec <__alt_mem_onchip_memory2_0+0xfbfe8aec>
 4009644:	d9c01d85 	stb	r7,118(sp)
 4009648:	003cde06 	br	40089c4 <__alt_mem_onchip_memory2_0+0xfbfe89c4>
 400964c:	d9c01d85 	stb	r7,118(sp)
 4009650:	003cbc06 	br	4008944 <__alt_mem_onchip_memory2_0+0xfbfe8944>

04009654 <__vfiprintf_internal>:
 4009654:	008100b4 	movhi	r2,1026
 4009658:	10a9c104 	addi	r2,r2,-22780
 400965c:	300f883a 	mov	r7,r6
 4009660:	280d883a 	mov	r6,r5
 4009664:	200b883a 	mov	r5,r4
 4009668:	11000017 	ldw	r4,0(r2)
 400966c:	40081f81 	jmpi	40081f8 <___vfiprintf_internal_r>

04009670 <__sbprintf>:
 4009670:	2880030b 	ldhu	r2,12(r5)
 4009674:	2ac01917 	ldw	r11,100(r5)
 4009678:	2a80038b 	ldhu	r10,14(r5)
 400967c:	2a400717 	ldw	r9,28(r5)
 4009680:	2a000917 	ldw	r8,36(r5)
 4009684:	defee204 	addi	sp,sp,-1144
 4009688:	00c10004 	movi	r3,1024
 400968c:	dc011a15 	stw	r16,1128(sp)
 4009690:	10bfff4c 	andi	r2,r2,65533
 4009694:	2821883a 	mov	r16,r5
 4009698:	d8cb883a 	add	r5,sp,r3
 400969c:	dc811c15 	stw	r18,1136(sp)
 40096a0:	dc411b15 	stw	r17,1132(sp)
 40096a4:	dfc11d15 	stw	ra,1140(sp)
 40096a8:	2025883a 	mov	r18,r4
 40096ac:	d881030d 	sth	r2,1036(sp)
 40096b0:	dac11915 	stw	r11,1124(sp)
 40096b4:	da81038d 	sth	r10,1038(sp)
 40096b8:	da410715 	stw	r9,1052(sp)
 40096bc:	da010915 	stw	r8,1060(sp)
 40096c0:	dec10015 	stw	sp,1024(sp)
 40096c4:	dec10415 	stw	sp,1040(sp)
 40096c8:	d8c10215 	stw	r3,1032(sp)
 40096cc:	d8c10515 	stw	r3,1044(sp)
 40096d0:	d8010615 	stw	zero,1048(sp)
 40096d4:	40081f80 	call	40081f8 <___vfiprintf_internal_r>
 40096d8:	1023883a 	mov	r17,r2
 40096dc:	10000416 	blt	r2,zero,40096f0 <__sbprintf+0x80>
 40096e0:	d9410004 	addi	r5,sp,1024
 40096e4:	9009883a 	mov	r4,r18
 40096e8:	4004aac0 	call	4004aac <_fflush_r>
 40096ec:	10000d1e 	bne	r2,zero,4009724 <__sbprintf+0xb4>
 40096f0:	d881030b 	ldhu	r2,1036(sp)
 40096f4:	1080100c 	andi	r2,r2,64
 40096f8:	10000326 	beq	r2,zero,4009708 <__sbprintf+0x98>
 40096fc:	8080030b 	ldhu	r2,12(r16)
 4009700:	10801014 	ori	r2,r2,64
 4009704:	8080030d 	sth	r2,12(r16)
 4009708:	8805883a 	mov	r2,r17
 400970c:	dfc11d17 	ldw	ra,1140(sp)
 4009710:	dc811c17 	ldw	r18,1136(sp)
 4009714:	dc411b17 	ldw	r17,1132(sp)
 4009718:	dc011a17 	ldw	r16,1128(sp)
 400971c:	dec11e04 	addi	sp,sp,1144
 4009720:	f800283a 	ret
 4009724:	047fffc4 	movi	r17,-1
 4009728:	003ff106 	br	40096f0 <__alt_mem_onchip_memory2_0+0xfbfe96f0>

0400972c <_write_r>:
 400972c:	defffd04 	addi	sp,sp,-12
 4009730:	2805883a 	mov	r2,r5
 4009734:	dc000015 	stw	r16,0(sp)
 4009738:	040100b4 	movhi	r16,1026
 400973c:	dc400115 	stw	r17,4(sp)
 4009740:	300b883a 	mov	r5,r6
 4009744:	8430d904 	addi	r16,r16,-15516
 4009748:	2023883a 	mov	r17,r4
 400974c:	380d883a 	mov	r6,r7
 4009750:	1009883a 	mov	r4,r2
 4009754:	dfc00215 	stw	ra,8(sp)
 4009758:	80000015 	stw	zero,0(r16)
 400975c:	400de100 	call	400de10 <write>
 4009760:	00ffffc4 	movi	r3,-1
 4009764:	10c00526 	beq	r2,r3,400977c <_write_r+0x50>
 4009768:	dfc00217 	ldw	ra,8(sp)
 400976c:	dc400117 	ldw	r17,4(sp)
 4009770:	dc000017 	ldw	r16,0(sp)
 4009774:	dec00304 	addi	sp,sp,12
 4009778:	f800283a 	ret
 400977c:	80c00017 	ldw	r3,0(r16)
 4009780:	183ff926 	beq	r3,zero,4009768 <__alt_mem_onchip_memory2_0+0xfbfe9768>
 4009784:	88c00015 	stw	r3,0(r17)
 4009788:	003ff706 	br	4009768 <__alt_mem_onchip_memory2_0+0xfbfe9768>

0400978c <_close_r>:
 400978c:	defffd04 	addi	sp,sp,-12
 4009790:	dc000015 	stw	r16,0(sp)
 4009794:	040100b4 	movhi	r16,1026
 4009798:	dc400115 	stw	r17,4(sp)
 400979c:	8430d904 	addi	r16,r16,-15516
 40097a0:	2023883a 	mov	r17,r4
 40097a4:	2809883a 	mov	r4,r5
 40097a8:	dfc00215 	stw	ra,8(sp)
 40097ac:	80000015 	stw	zero,0(r16)
 40097b0:	400d3680 	call	400d368 <close>
 40097b4:	00ffffc4 	movi	r3,-1
 40097b8:	10c00526 	beq	r2,r3,40097d0 <_close_r+0x44>
 40097bc:	dfc00217 	ldw	ra,8(sp)
 40097c0:	dc400117 	ldw	r17,4(sp)
 40097c4:	dc000017 	ldw	r16,0(sp)
 40097c8:	dec00304 	addi	sp,sp,12
 40097cc:	f800283a 	ret
 40097d0:	80c00017 	ldw	r3,0(r16)
 40097d4:	183ff926 	beq	r3,zero,40097bc <__alt_mem_onchip_memory2_0+0xfbfe97bc>
 40097d8:	88c00015 	stw	r3,0(r17)
 40097dc:	003ff706 	br	40097bc <__alt_mem_onchip_memory2_0+0xfbfe97bc>

040097e0 <_calloc_r>:
 40097e0:	298b383a 	mul	r5,r5,r6
 40097e4:	defffe04 	addi	sp,sp,-8
 40097e8:	dfc00115 	stw	ra,4(sp)
 40097ec:	dc000015 	stw	r16,0(sp)
 40097f0:	4005be80 	call	4005be8 <_malloc_r>
 40097f4:	10002926 	beq	r2,zero,400989c <_calloc_r+0xbc>
 40097f8:	11bfff17 	ldw	r6,-4(r2)
 40097fc:	1021883a 	mov	r16,r2
 4009800:	00bfff04 	movi	r2,-4
 4009804:	308c703a 	and	r6,r6,r2
 4009808:	00c00904 	movi	r3,36
 400980c:	308d883a 	add	r6,r6,r2
 4009810:	19801636 	bltu	r3,r6,400986c <_calloc_r+0x8c>
 4009814:	008004c4 	movi	r2,19
 4009818:	11800b2e 	bgeu	r2,r6,4009848 <_calloc_r+0x68>
 400981c:	80000015 	stw	zero,0(r16)
 4009820:	80000115 	stw	zero,4(r16)
 4009824:	008006c4 	movi	r2,27
 4009828:	11801a2e 	bgeu	r2,r6,4009894 <_calloc_r+0xb4>
 400982c:	80000215 	stw	zero,8(r16)
 4009830:	80000315 	stw	zero,12(r16)
 4009834:	30c0151e 	bne	r6,r3,400988c <_calloc_r+0xac>
 4009838:	80000415 	stw	zero,16(r16)
 400983c:	80800604 	addi	r2,r16,24
 4009840:	80000515 	stw	zero,20(r16)
 4009844:	00000106 	br	400984c <_calloc_r+0x6c>
 4009848:	8005883a 	mov	r2,r16
 400984c:	10000015 	stw	zero,0(r2)
 4009850:	10000115 	stw	zero,4(r2)
 4009854:	10000215 	stw	zero,8(r2)
 4009858:	8005883a 	mov	r2,r16
 400985c:	dfc00117 	ldw	ra,4(sp)
 4009860:	dc000017 	ldw	r16,0(sp)
 4009864:	dec00204 	addi	sp,sp,8
 4009868:	f800283a 	ret
 400986c:	000b883a 	mov	r5,zero
 4009870:	8009883a 	mov	r4,r16
 4009874:	400677c0 	call	400677c <memset>
 4009878:	8005883a 	mov	r2,r16
 400987c:	dfc00117 	ldw	ra,4(sp)
 4009880:	dc000017 	ldw	r16,0(sp)
 4009884:	dec00204 	addi	sp,sp,8
 4009888:	f800283a 	ret
 400988c:	80800404 	addi	r2,r16,16
 4009890:	003fee06 	br	400984c <__alt_mem_onchip_memory2_0+0xfbfe984c>
 4009894:	80800204 	addi	r2,r16,8
 4009898:	003fec06 	br	400984c <__alt_mem_onchip_memory2_0+0xfbfe984c>
 400989c:	0005883a 	mov	r2,zero
 40098a0:	003fee06 	br	400985c <__alt_mem_onchip_memory2_0+0xfbfe985c>

040098a4 <_fclose_r>:
 40098a4:	28003926 	beq	r5,zero,400998c <_fclose_r+0xe8>
 40098a8:	defffc04 	addi	sp,sp,-16
 40098ac:	dc400115 	stw	r17,4(sp)
 40098b0:	dc000015 	stw	r16,0(sp)
 40098b4:	dfc00315 	stw	ra,12(sp)
 40098b8:	dc800215 	stw	r18,8(sp)
 40098bc:	2023883a 	mov	r17,r4
 40098c0:	2821883a 	mov	r16,r5
 40098c4:	20000226 	beq	r4,zero,40098d0 <_fclose_r+0x2c>
 40098c8:	20800e17 	ldw	r2,56(r4)
 40098cc:	10002726 	beq	r2,zero,400996c <_fclose_r+0xc8>
 40098d0:	8080030f 	ldh	r2,12(r16)
 40098d4:	1000071e 	bne	r2,zero,40098f4 <_fclose_r+0x50>
 40098d8:	0005883a 	mov	r2,zero
 40098dc:	dfc00317 	ldw	ra,12(sp)
 40098e0:	dc800217 	ldw	r18,8(sp)
 40098e4:	dc400117 	ldw	r17,4(sp)
 40098e8:	dc000017 	ldw	r16,0(sp)
 40098ec:	dec00404 	addi	sp,sp,16
 40098f0:	f800283a 	ret
 40098f4:	800b883a 	mov	r5,r16
 40098f8:	8809883a 	mov	r4,r17
 40098fc:	40048900 	call	4004890 <__sflush_r>
 4009900:	1025883a 	mov	r18,r2
 4009904:	80800b17 	ldw	r2,44(r16)
 4009908:	10000426 	beq	r2,zero,400991c <_fclose_r+0x78>
 400990c:	81400717 	ldw	r5,28(r16)
 4009910:	8809883a 	mov	r4,r17
 4009914:	103ee83a 	callr	r2
 4009918:	10001616 	blt	r2,zero,4009974 <_fclose_r+0xd0>
 400991c:	8080030b 	ldhu	r2,12(r16)
 4009920:	1080200c 	andi	r2,r2,128
 4009924:	1000151e 	bne	r2,zero,400997c <_fclose_r+0xd8>
 4009928:	81400c17 	ldw	r5,48(r16)
 400992c:	28000526 	beq	r5,zero,4009944 <_fclose_r+0xa0>
 4009930:	80801004 	addi	r2,r16,64
 4009934:	28800226 	beq	r5,r2,4009940 <_fclose_r+0x9c>
 4009938:	8809883a 	mov	r4,r17
 400993c:	4004ffc0 	call	4004ffc <_free_r>
 4009940:	80000c15 	stw	zero,48(r16)
 4009944:	81401117 	ldw	r5,68(r16)
 4009948:	28000326 	beq	r5,zero,4009958 <_fclose_r+0xb4>
 400994c:	8809883a 	mov	r4,r17
 4009950:	4004ffc0 	call	4004ffc <_free_r>
 4009954:	80001115 	stw	zero,68(r16)
 4009958:	4004e980 	call	4004e98 <__sfp_lock_acquire>
 400995c:	8000030d 	sth	zero,12(r16)
 4009960:	4004e9c0 	call	4004e9c <__sfp_lock_release>
 4009964:	9005883a 	mov	r2,r18
 4009968:	003fdc06 	br	40098dc <__alt_mem_onchip_memory2_0+0xfbfe98dc>
 400996c:	4004e880 	call	4004e88 <__sinit>
 4009970:	003fd706 	br	40098d0 <__alt_mem_onchip_memory2_0+0xfbfe98d0>
 4009974:	04bfffc4 	movi	r18,-1
 4009978:	003fe806 	br	400991c <__alt_mem_onchip_memory2_0+0xfbfe991c>
 400997c:	81400417 	ldw	r5,16(r16)
 4009980:	8809883a 	mov	r4,r17
 4009984:	4004ffc0 	call	4004ffc <_free_r>
 4009988:	003fe706 	br	4009928 <__alt_mem_onchip_memory2_0+0xfbfe9928>
 400998c:	0005883a 	mov	r2,zero
 4009990:	f800283a 	ret

04009994 <fclose>:
 4009994:	008100b4 	movhi	r2,1026
 4009998:	10a9c104 	addi	r2,r2,-22780
 400999c:	200b883a 	mov	r5,r4
 40099a0:	11000017 	ldw	r4,0(r2)
 40099a4:	40098a41 	jmpi	40098a4 <_fclose_r>

040099a8 <__fputwc>:
 40099a8:	defff804 	addi	sp,sp,-32
 40099ac:	dcc00415 	stw	r19,16(sp)
 40099b0:	dc800315 	stw	r18,12(sp)
 40099b4:	dc000115 	stw	r16,4(sp)
 40099b8:	dfc00715 	stw	ra,28(sp)
 40099bc:	dd400615 	stw	r21,24(sp)
 40099c0:	dd000515 	stw	r20,20(sp)
 40099c4:	dc400215 	stw	r17,8(sp)
 40099c8:	2027883a 	mov	r19,r4
 40099cc:	2825883a 	mov	r18,r5
 40099d0:	3021883a 	mov	r16,r6
 40099d4:	40059d80 	call	40059d8 <__locale_mb_cur_max>
 40099d8:	00c00044 	movi	r3,1
 40099dc:	10c03e26 	beq	r2,r3,4009ad8 <__fputwc+0x130>
 40099e0:	81c01704 	addi	r7,r16,92
 40099e4:	900d883a 	mov	r6,r18
 40099e8:	d80b883a 	mov	r5,sp
 40099ec:	9809883a 	mov	r4,r19
 40099f0:	4009e780 	call	4009e78 <_wcrtomb_r>
 40099f4:	1029883a 	mov	r20,r2
 40099f8:	00bfffc4 	movi	r2,-1
 40099fc:	a0802026 	beq	r20,r2,4009a80 <__fputwc+0xd8>
 4009a00:	d9400003 	ldbu	r5,0(sp)
 4009a04:	a0001c26 	beq	r20,zero,4009a78 <__fputwc+0xd0>
 4009a08:	0023883a 	mov	r17,zero
 4009a0c:	05400284 	movi	r21,10
 4009a10:	00000906 	br	4009a38 <__fputwc+0x90>
 4009a14:	80800017 	ldw	r2,0(r16)
 4009a18:	11400005 	stb	r5,0(r2)
 4009a1c:	80c00017 	ldw	r3,0(r16)
 4009a20:	18c00044 	addi	r3,r3,1
 4009a24:	80c00015 	stw	r3,0(r16)
 4009a28:	8c400044 	addi	r17,r17,1
 4009a2c:	dc45883a 	add	r2,sp,r17
 4009a30:	8d00112e 	bgeu	r17,r20,4009a78 <__fputwc+0xd0>
 4009a34:	11400003 	ldbu	r5,0(r2)
 4009a38:	80c00217 	ldw	r3,8(r16)
 4009a3c:	18ffffc4 	addi	r3,r3,-1
 4009a40:	80c00215 	stw	r3,8(r16)
 4009a44:	183ff30e 	bge	r3,zero,4009a14 <__alt_mem_onchip_memory2_0+0xfbfe9a14>
 4009a48:	80800617 	ldw	r2,24(r16)
 4009a4c:	18801916 	blt	r3,r2,4009ab4 <__fputwc+0x10c>
 4009a50:	80800017 	ldw	r2,0(r16)
 4009a54:	11400005 	stb	r5,0(r2)
 4009a58:	80800017 	ldw	r2,0(r16)
 4009a5c:	10c00003 	ldbu	r3,0(r2)
 4009a60:	10800044 	addi	r2,r2,1
 4009a64:	1d402326 	beq	r3,r21,4009af4 <__fputwc+0x14c>
 4009a68:	80800015 	stw	r2,0(r16)
 4009a6c:	8c400044 	addi	r17,r17,1
 4009a70:	dc45883a 	add	r2,sp,r17
 4009a74:	8d3fef36 	bltu	r17,r20,4009a34 <__alt_mem_onchip_memory2_0+0xfbfe9a34>
 4009a78:	9005883a 	mov	r2,r18
 4009a7c:	00000406 	br	4009a90 <__fputwc+0xe8>
 4009a80:	80c0030b 	ldhu	r3,12(r16)
 4009a84:	a005883a 	mov	r2,r20
 4009a88:	18c01014 	ori	r3,r3,64
 4009a8c:	80c0030d 	sth	r3,12(r16)
 4009a90:	dfc00717 	ldw	ra,28(sp)
 4009a94:	dd400617 	ldw	r21,24(sp)
 4009a98:	dd000517 	ldw	r20,20(sp)
 4009a9c:	dcc00417 	ldw	r19,16(sp)
 4009aa0:	dc800317 	ldw	r18,12(sp)
 4009aa4:	dc400217 	ldw	r17,8(sp)
 4009aa8:	dc000117 	ldw	r16,4(sp)
 4009aac:	dec00804 	addi	sp,sp,32
 4009ab0:	f800283a 	ret
 4009ab4:	800d883a 	mov	r6,r16
 4009ab8:	29403fcc 	andi	r5,r5,255
 4009abc:	9809883a 	mov	r4,r19
 4009ac0:	4009d200 	call	4009d20 <__swbuf_r>
 4009ac4:	10bfffe0 	cmpeqi	r2,r2,-1
 4009ac8:	10803fcc 	andi	r2,r2,255
 4009acc:	103fd626 	beq	r2,zero,4009a28 <__alt_mem_onchip_memory2_0+0xfbfe9a28>
 4009ad0:	00bfffc4 	movi	r2,-1
 4009ad4:	003fee06 	br	4009a90 <__alt_mem_onchip_memory2_0+0xfbfe9a90>
 4009ad8:	90ffffc4 	addi	r3,r18,-1
 4009adc:	01003f84 	movi	r4,254
 4009ae0:	20ffbf36 	bltu	r4,r3,40099e0 <__alt_mem_onchip_memory2_0+0xfbfe99e0>
 4009ae4:	900b883a 	mov	r5,r18
 4009ae8:	dc800005 	stb	r18,0(sp)
 4009aec:	1029883a 	mov	r20,r2
 4009af0:	003fc506 	br	4009a08 <__alt_mem_onchip_memory2_0+0xfbfe9a08>
 4009af4:	800d883a 	mov	r6,r16
 4009af8:	a80b883a 	mov	r5,r21
 4009afc:	9809883a 	mov	r4,r19
 4009b00:	4009d200 	call	4009d20 <__swbuf_r>
 4009b04:	10bfffe0 	cmpeqi	r2,r2,-1
 4009b08:	003fef06 	br	4009ac8 <__alt_mem_onchip_memory2_0+0xfbfe9ac8>

04009b0c <_fputwc_r>:
 4009b0c:	3080030b 	ldhu	r2,12(r6)
 4009b10:	10c8000c 	andi	r3,r2,8192
 4009b14:	1800051e 	bne	r3,zero,4009b2c <_fputwc_r+0x20>
 4009b18:	30c01917 	ldw	r3,100(r6)
 4009b1c:	10880014 	ori	r2,r2,8192
 4009b20:	3080030d 	sth	r2,12(r6)
 4009b24:	18880014 	ori	r2,r3,8192
 4009b28:	30801915 	stw	r2,100(r6)
 4009b2c:	40099a81 	jmpi	40099a8 <__fputwc>

04009b30 <fputwc>:
 4009b30:	008100b4 	movhi	r2,1026
 4009b34:	defffc04 	addi	sp,sp,-16
 4009b38:	10a9c104 	addi	r2,r2,-22780
 4009b3c:	dc000115 	stw	r16,4(sp)
 4009b40:	14000017 	ldw	r16,0(r2)
 4009b44:	dc400215 	stw	r17,8(sp)
 4009b48:	dfc00315 	stw	ra,12(sp)
 4009b4c:	2023883a 	mov	r17,r4
 4009b50:	80000226 	beq	r16,zero,4009b5c <fputwc+0x2c>
 4009b54:	80800e17 	ldw	r2,56(r16)
 4009b58:	10001026 	beq	r2,zero,4009b9c <fputwc+0x6c>
 4009b5c:	2880030b 	ldhu	r2,12(r5)
 4009b60:	10c8000c 	andi	r3,r2,8192
 4009b64:	1800051e 	bne	r3,zero,4009b7c <fputwc+0x4c>
 4009b68:	28c01917 	ldw	r3,100(r5)
 4009b6c:	10880014 	ori	r2,r2,8192
 4009b70:	2880030d 	sth	r2,12(r5)
 4009b74:	18880014 	ori	r2,r3,8192
 4009b78:	28801915 	stw	r2,100(r5)
 4009b7c:	280d883a 	mov	r6,r5
 4009b80:	8009883a 	mov	r4,r16
 4009b84:	880b883a 	mov	r5,r17
 4009b88:	dfc00317 	ldw	ra,12(sp)
 4009b8c:	dc400217 	ldw	r17,8(sp)
 4009b90:	dc000117 	ldw	r16,4(sp)
 4009b94:	dec00404 	addi	sp,sp,16
 4009b98:	40099a81 	jmpi	40099a8 <__fputwc>
 4009b9c:	8009883a 	mov	r4,r16
 4009ba0:	d9400015 	stw	r5,0(sp)
 4009ba4:	4004e880 	call	4004e88 <__sinit>
 4009ba8:	d9400017 	ldw	r5,0(sp)
 4009bac:	003feb06 	br	4009b5c <__alt_mem_onchip_memory2_0+0xfbfe9b5c>

04009bb0 <_fstat_r>:
 4009bb0:	defffd04 	addi	sp,sp,-12
 4009bb4:	2805883a 	mov	r2,r5
 4009bb8:	dc000015 	stw	r16,0(sp)
 4009bbc:	040100b4 	movhi	r16,1026
 4009bc0:	dc400115 	stw	r17,4(sp)
 4009bc4:	8430d904 	addi	r16,r16,-15516
 4009bc8:	2023883a 	mov	r17,r4
 4009bcc:	300b883a 	mov	r5,r6
 4009bd0:	1009883a 	mov	r4,r2
 4009bd4:	dfc00215 	stw	ra,8(sp)
 4009bd8:	80000015 	stw	zero,0(r16)
 4009bdc:	400d4a00 	call	400d4a0 <fstat>
 4009be0:	00ffffc4 	movi	r3,-1
 4009be4:	10c00526 	beq	r2,r3,4009bfc <_fstat_r+0x4c>
 4009be8:	dfc00217 	ldw	ra,8(sp)
 4009bec:	dc400117 	ldw	r17,4(sp)
 4009bf0:	dc000017 	ldw	r16,0(sp)
 4009bf4:	dec00304 	addi	sp,sp,12
 4009bf8:	f800283a 	ret
 4009bfc:	80c00017 	ldw	r3,0(r16)
 4009c00:	183ff926 	beq	r3,zero,4009be8 <__alt_mem_onchip_memory2_0+0xfbfe9be8>
 4009c04:	88c00015 	stw	r3,0(r17)
 4009c08:	003ff706 	br	4009be8 <__alt_mem_onchip_memory2_0+0xfbfe9be8>

04009c0c <_isatty_r>:
 4009c0c:	defffd04 	addi	sp,sp,-12
 4009c10:	dc000015 	stw	r16,0(sp)
 4009c14:	040100b4 	movhi	r16,1026
 4009c18:	dc400115 	stw	r17,4(sp)
 4009c1c:	8430d904 	addi	r16,r16,-15516
 4009c20:	2023883a 	mov	r17,r4
 4009c24:	2809883a 	mov	r4,r5
 4009c28:	dfc00215 	stw	ra,8(sp)
 4009c2c:	80000015 	stw	zero,0(r16)
 4009c30:	400d82c0 	call	400d82c <isatty>
 4009c34:	00ffffc4 	movi	r3,-1
 4009c38:	10c00526 	beq	r2,r3,4009c50 <_isatty_r+0x44>
 4009c3c:	dfc00217 	ldw	ra,8(sp)
 4009c40:	dc400117 	ldw	r17,4(sp)
 4009c44:	dc000017 	ldw	r16,0(sp)
 4009c48:	dec00304 	addi	sp,sp,12
 4009c4c:	f800283a 	ret
 4009c50:	80c00017 	ldw	r3,0(r16)
 4009c54:	183ff926 	beq	r3,zero,4009c3c <__alt_mem_onchip_memory2_0+0xfbfe9c3c>
 4009c58:	88c00015 	stw	r3,0(r17)
 4009c5c:	003ff706 	br	4009c3c <__alt_mem_onchip_memory2_0+0xfbfe9c3c>

04009c60 <_lseek_r>:
 4009c60:	defffd04 	addi	sp,sp,-12
 4009c64:	2805883a 	mov	r2,r5
 4009c68:	dc000015 	stw	r16,0(sp)
 4009c6c:	040100b4 	movhi	r16,1026
 4009c70:	dc400115 	stw	r17,4(sp)
 4009c74:	300b883a 	mov	r5,r6
 4009c78:	8430d904 	addi	r16,r16,-15516
 4009c7c:	2023883a 	mov	r17,r4
 4009c80:	380d883a 	mov	r6,r7
 4009c84:	1009883a 	mov	r4,r2
 4009c88:	dfc00215 	stw	ra,8(sp)
 4009c8c:	80000015 	stw	zero,0(r16)
 4009c90:	400d9f80 	call	400d9f8 <lseek>
 4009c94:	00ffffc4 	movi	r3,-1
 4009c98:	10c00526 	beq	r2,r3,4009cb0 <_lseek_r+0x50>
 4009c9c:	dfc00217 	ldw	ra,8(sp)
 4009ca0:	dc400117 	ldw	r17,4(sp)
 4009ca4:	dc000017 	ldw	r16,0(sp)
 4009ca8:	dec00304 	addi	sp,sp,12
 4009cac:	f800283a 	ret
 4009cb0:	80c00017 	ldw	r3,0(r16)
 4009cb4:	183ff926 	beq	r3,zero,4009c9c <__alt_mem_onchip_memory2_0+0xfbfe9c9c>
 4009cb8:	88c00015 	stw	r3,0(r17)
 4009cbc:	003ff706 	br	4009c9c <__alt_mem_onchip_memory2_0+0xfbfe9c9c>

04009cc0 <_read_r>:
 4009cc0:	defffd04 	addi	sp,sp,-12
 4009cc4:	2805883a 	mov	r2,r5
 4009cc8:	dc000015 	stw	r16,0(sp)
 4009ccc:	040100b4 	movhi	r16,1026
 4009cd0:	dc400115 	stw	r17,4(sp)
 4009cd4:	300b883a 	mov	r5,r6
 4009cd8:	8430d904 	addi	r16,r16,-15516
 4009cdc:	2023883a 	mov	r17,r4
 4009ce0:	380d883a 	mov	r6,r7
 4009ce4:	1009883a 	mov	r4,r2
 4009ce8:	dfc00215 	stw	ra,8(sp)
 4009cec:	80000015 	stw	zero,0(r16)
 4009cf0:	400dbc40 	call	400dbc4 <read>
 4009cf4:	00ffffc4 	movi	r3,-1
 4009cf8:	10c00526 	beq	r2,r3,4009d10 <_read_r+0x50>
 4009cfc:	dfc00217 	ldw	ra,8(sp)
 4009d00:	dc400117 	ldw	r17,4(sp)
 4009d04:	dc000017 	ldw	r16,0(sp)
 4009d08:	dec00304 	addi	sp,sp,12
 4009d0c:	f800283a 	ret
 4009d10:	80c00017 	ldw	r3,0(r16)
 4009d14:	183ff926 	beq	r3,zero,4009cfc <__alt_mem_onchip_memory2_0+0xfbfe9cfc>
 4009d18:	88c00015 	stw	r3,0(r17)
 4009d1c:	003ff706 	br	4009cfc <__alt_mem_onchip_memory2_0+0xfbfe9cfc>

04009d20 <__swbuf_r>:
 4009d20:	defffb04 	addi	sp,sp,-20
 4009d24:	dcc00315 	stw	r19,12(sp)
 4009d28:	dc800215 	stw	r18,8(sp)
 4009d2c:	dc000015 	stw	r16,0(sp)
 4009d30:	dfc00415 	stw	ra,16(sp)
 4009d34:	dc400115 	stw	r17,4(sp)
 4009d38:	2025883a 	mov	r18,r4
 4009d3c:	2827883a 	mov	r19,r5
 4009d40:	3021883a 	mov	r16,r6
 4009d44:	20000226 	beq	r4,zero,4009d50 <__swbuf_r+0x30>
 4009d48:	20800e17 	ldw	r2,56(r4)
 4009d4c:	10004226 	beq	r2,zero,4009e58 <__swbuf_r+0x138>
 4009d50:	80800617 	ldw	r2,24(r16)
 4009d54:	8100030b 	ldhu	r4,12(r16)
 4009d58:	80800215 	stw	r2,8(r16)
 4009d5c:	2080020c 	andi	r2,r4,8
 4009d60:	10003626 	beq	r2,zero,4009e3c <__swbuf_r+0x11c>
 4009d64:	80c00417 	ldw	r3,16(r16)
 4009d68:	18003426 	beq	r3,zero,4009e3c <__swbuf_r+0x11c>
 4009d6c:	2088000c 	andi	r2,r4,8192
 4009d70:	9c403fcc 	andi	r17,r19,255
 4009d74:	10001a26 	beq	r2,zero,4009de0 <__swbuf_r+0xc0>
 4009d78:	80800017 	ldw	r2,0(r16)
 4009d7c:	81000517 	ldw	r4,20(r16)
 4009d80:	10c7c83a 	sub	r3,r2,r3
 4009d84:	1900200e 	bge	r3,r4,4009e08 <__swbuf_r+0xe8>
 4009d88:	18c00044 	addi	r3,r3,1
 4009d8c:	81000217 	ldw	r4,8(r16)
 4009d90:	11400044 	addi	r5,r2,1
 4009d94:	81400015 	stw	r5,0(r16)
 4009d98:	213fffc4 	addi	r4,r4,-1
 4009d9c:	81000215 	stw	r4,8(r16)
 4009da0:	14c00005 	stb	r19,0(r2)
 4009da4:	80800517 	ldw	r2,20(r16)
 4009da8:	10c01e26 	beq	r2,r3,4009e24 <__swbuf_r+0x104>
 4009dac:	8080030b 	ldhu	r2,12(r16)
 4009db0:	1080004c 	andi	r2,r2,1
 4009db4:	10000226 	beq	r2,zero,4009dc0 <__swbuf_r+0xa0>
 4009db8:	00800284 	movi	r2,10
 4009dbc:	88801926 	beq	r17,r2,4009e24 <__swbuf_r+0x104>
 4009dc0:	8805883a 	mov	r2,r17
 4009dc4:	dfc00417 	ldw	ra,16(sp)
 4009dc8:	dcc00317 	ldw	r19,12(sp)
 4009dcc:	dc800217 	ldw	r18,8(sp)
 4009dd0:	dc400117 	ldw	r17,4(sp)
 4009dd4:	dc000017 	ldw	r16,0(sp)
 4009dd8:	dec00504 	addi	sp,sp,20
 4009ddc:	f800283a 	ret
 4009de0:	81401917 	ldw	r5,100(r16)
 4009de4:	00b7ffc4 	movi	r2,-8193
 4009de8:	21080014 	ori	r4,r4,8192
 4009dec:	2884703a 	and	r2,r5,r2
 4009df0:	80801915 	stw	r2,100(r16)
 4009df4:	80800017 	ldw	r2,0(r16)
 4009df8:	8100030d 	sth	r4,12(r16)
 4009dfc:	81000517 	ldw	r4,20(r16)
 4009e00:	10c7c83a 	sub	r3,r2,r3
 4009e04:	193fe016 	blt	r3,r4,4009d88 <__alt_mem_onchip_memory2_0+0xfbfe9d88>
 4009e08:	800b883a 	mov	r5,r16
 4009e0c:	9009883a 	mov	r4,r18
 4009e10:	4004aac0 	call	4004aac <_fflush_r>
 4009e14:	1000071e 	bne	r2,zero,4009e34 <__swbuf_r+0x114>
 4009e18:	80800017 	ldw	r2,0(r16)
 4009e1c:	00c00044 	movi	r3,1
 4009e20:	003fda06 	br	4009d8c <__alt_mem_onchip_memory2_0+0xfbfe9d8c>
 4009e24:	800b883a 	mov	r5,r16
 4009e28:	9009883a 	mov	r4,r18
 4009e2c:	4004aac0 	call	4004aac <_fflush_r>
 4009e30:	103fe326 	beq	r2,zero,4009dc0 <__alt_mem_onchip_memory2_0+0xfbfe9dc0>
 4009e34:	00bfffc4 	movi	r2,-1
 4009e38:	003fe206 	br	4009dc4 <__alt_mem_onchip_memory2_0+0xfbfe9dc4>
 4009e3c:	800b883a 	mov	r5,r16
 4009e40:	9009883a 	mov	r4,r18
 4009e44:	4002eb40 	call	4002eb4 <__swsetup_r>
 4009e48:	103ffa1e 	bne	r2,zero,4009e34 <__alt_mem_onchip_memory2_0+0xfbfe9e34>
 4009e4c:	8100030b 	ldhu	r4,12(r16)
 4009e50:	80c00417 	ldw	r3,16(r16)
 4009e54:	003fc506 	br	4009d6c <__alt_mem_onchip_memory2_0+0xfbfe9d6c>
 4009e58:	4004e880 	call	4004e88 <__sinit>
 4009e5c:	003fbc06 	br	4009d50 <__alt_mem_onchip_memory2_0+0xfbfe9d50>

04009e60 <__swbuf>:
 4009e60:	008100b4 	movhi	r2,1026
 4009e64:	10a9c104 	addi	r2,r2,-22780
 4009e68:	280d883a 	mov	r6,r5
 4009e6c:	200b883a 	mov	r5,r4
 4009e70:	11000017 	ldw	r4,0(r2)
 4009e74:	4009d201 	jmpi	4009d20 <__swbuf_r>

04009e78 <_wcrtomb_r>:
 4009e78:	defff604 	addi	sp,sp,-40
 4009e7c:	008100b4 	movhi	r2,1026
 4009e80:	dc800815 	stw	r18,32(sp)
 4009e84:	dc400715 	stw	r17,28(sp)
 4009e88:	dc000615 	stw	r16,24(sp)
 4009e8c:	10a9c504 	addi	r2,r2,-22764
 4009e90:	dfc00915 	stw	ra,36(sp)
 4009e94:	2021883a 	mov	r16,r4
 4009e98:	3823883a 	mov	r17,r7
 4009e9c:	14800017 	ldw	r18,0(r2)
 4009ea0:	28001426 	beq	r5,zero,4009ef4 <_wcrtomb_r+0x7c>
 4009ea4:	d9400415 	stw	r5,16(sp)
 4009ea8:	d9800515 	stw	r6,20(sp)
 4009eac:	40059cc0 	call	40059cc <__locale_charset>
 4009eb0:	d9800517 	ldw	r6,20(sp)
 4009eb4:	d9400417 	ldw	r5,16(sp)
 4009eb8:	100f883a 	mov	r7,r2
 4009ebc:	dc400015 	stw	r17,0(sp)
 4009ec0:	8009883a 	mov	r4,r16
 4009ec4:	903ee83a 	callr	r18
 4009ec8:	00ffffc4 	movi	r3,-1
 4009ecc:	10c0031e 	bne	r2,r3,4009edc <_wcrtomb_r+0x64>
 4009ed0:	88000015 	stw	zero,0(r17)
 4009ed4:	00c02284 	movi	r3,138
 4009ed8:	80c00015 	stw	r3,0(r16)
 4009edc:	dfc00917 	ldw	ra,36(sp)
 4009ee0:	dc800817 	ldw	r18,32(sp)
 4009ee4:	dc400717 	ldw	r17,28(sp)
 4009ee8:	dc000617 	ldw	r16,24(sp)
 4009eec:	dec00a04 	addi	sp,sp,40
 4009ef0:	f800283a 	ret
 4009ef4:	40059cc0 	call	40059cc <__locale_charset>
 4009ef8:	100f883a 	mov	r7,r2
 4009efc:	dc400015 	stw	r17,0(sp)
 4009f00:	000d883a 	mov	r6,zero
 4009f04:	d9400104 	addi	r5,sp,4
 4009f08:	8009883a 	mov	r4,r16
 4009f0c:	903ee83a 	callr	r18
 4009f10:	003fed06 	br	4009ec8 <__alt_mem_onchip_memory2_0+0xfbfe9ec8>

04009f14 <wcrtomb>:
 4009f14:	defff604 	addi	sp,sp,-40
 4009f18:	008100b4 	movhi	r2,1026
 4009f1c:	dc800615 	stw	r18,24(sp)
 4009f20:	dc400515 	stw	r17,20(sp)
 4009f24:	10a9c104 	addi	r2,r2,-22780
 4009f28:	dfc00915 	stw	ra,36(sp)
 4009f2c:	dd000815 	stw	r20,32(sp)
 4009f30:	dcc00715 	stw	r19,28(sp)
 4009f34:	dc000415 	stw	r16,16(sp)
 4009f38:	3025883a 	mov	r18,r6
 4009f3c:	14400017 	ldw	r17,0(r2)
 4009f40:	20001926 	beq	r4,zero,4009fa8 <wcrtomb+0x94>
 4009f44:	008100b4 	movhi	r2,1026
 4009f48:	10a9c504 	addi	r2,r2,-22764
 4009f4c:	15000017 	ldw	r20,0(r2)
 4009f50:	2021883a 	mov	r16,r4
 4009f54:	2827883a 	mov	r19,r5
 4009f58:	40059cc0 	call	40059cc <__locale_charset>
 4009f5c:	100f883a 	mov	r7,r2
 4009f60:	dc800015 	stw	r18,0(sp)
 4009f64:	980d883a 	mov	r6,r19
 4009f68:	800b883a 	mov	r5,r16
 4009f6c:	8809883a 	mov	r4,r17
 4009f70:	a03ee83a 	callr	r20
 4009f74:	00ffffc4 	movi	r3,-1
 4009f78:	10c0031e 	bne	r2,r3,4009f88 <wcrtomb+0x74>
 4009f7c:	90000015 	stw	zero,0(r18)
 4009f80:	00c02284 	movi	r3,138
 4009f84:	88c00015 	stw	r3,0(r17)
 4009f88:	dfc00917 	ldw	ra,36(sp)
 4009f8c:	dd000817 	ldw	r20,32(sp)
 4009f90:	dcc00717 	ldw	r19,28(sp)
 4009f94:	dc800617 	ldw	r18,24(sp)
 4009f98:	dc400517 	ldw	r17,20(sp)
 4009f9c:	dc000417 	ldw	r16,16(sp)
 4009fa0:	dec00a04 	addi	sp,sp,40
 4009fa4:	f800283a 	ret
 4009fa8:	008100b4 	movhi	r2,1026
 4009fac:	10a9c504 	addi	r2,r2,-22764
 4009fb0:	14000017 	ldw	r16,0(r2)
 4009fb4:	40059cc0 	call	40059cc <__locale_charset>
 4009fb8:	100f883a 	mov	r7,r2
 4009fbc:	dc800015 	stw	r18,0(sp)
 4009fc0:	000d883a 	mov	r6,zero
 4009fc4:	d9400104 	addi	r5,sp,4
 4009fc8:	8809883a 	mov	r4,r17
 4009fcc:	803ee83a 	callr	r16
 4009fd0:	003fe806 	br	4009f74 <__alt_mem_onchip_memory2_0+0xfbfe9f74>

04009fd4 <__ascii_wctomb>:
 4009fd4:	28000526 	beq	r5,zero,4009fec <__ascii_wctomb+0x18>
 4009fd8:	00803fc4 	movi	r2,255
 4009fdc:	11800536 	bltu	r2,r6,4009ff4 <__ascii_wctomb+0x20>
 4009fe0:	29800005 	stb	r6,0(r5)
 4009fe4:	00800044 	movi	r2,1
 4009fe8:	f800283a 	ret
 4009fec:	0005883a 	mov	r2,zero
 4009ff0:	f800283a 	ret
 4009ff4:	00802284 	movi	r2,138
 4009ff8:	20800015 	stw	r2,0(r4)
 4009ffc:	00bfffc4 	movi	r2,-1
 400a000:	f800283a 	ret

0400a004 <_wctomb_r>:
 400a004:	008100b4 	movhi	r2,1026
 400a008:	defff904 	addi	sp,sp,-28
 400a00c:	10a9c504 	addi	r2,r2,-22764
 400a010:	dfc00615 	stw	ra,24(sp)
 400a014:	dc400515 	stw	r17,20(sp)
 400a018:	dc000415 	stw	r16,16(sp)
 400a01c:	3823883a 	mov	r17,r7
 400a020:	14000017 	ldw	r16,0(r2)
 400a024:	d9000115 	stw	r4,4(sp)
 400a028:	d9400215 	stw	r5,8(sp)
 400a02c:	d9800315 	stw	r6,12(sp)
 400a030:	40059cc0 	call	40059cc <__locale_charset>
 400a034:	d9800317 	ldw	r6,12(sp)
 400a038:	d9400217 	ldw	r5,8(sp)
 400a03c:	d9000117 	ldw	r4,4(sp)
 400a040:	100f883a 	mov	r7,r2
 400a044:	dc400015 	stw	r17,0(sp)
 400a048:	803ee83a 	callr	r16
 400a04c:	dfc00617 	ldw	ra,24(sp)
 400a050:	dc400517 	ldw	r17,20(sp)
 400a054:	dc000417 	ldw	r16,16(sp)
 400a058:	dec00704 	addi	sp,sp,28
 400a05c:	f800283a 	ret

0400a060 <__udivdi3>:
 400a060:	defff504 	addi	sp,sp,-44
 400a064:	dcc00415 	stw	r19,16(sp)
 400a068:	dc000115 	stw	r16,4(sp)
 400a06c:	dfc00a15 	stw	ra,40(sp)
 400a070:	df000915 	stw	fp,36(sp)
 400a074:	ddc00815 	stw	r23,32(sp)
 400a078:	dd800715 	stw	r22,28(sp)
 400a07c:	dd400615 	stw	r21,24(sp)
 400a080:	dd000515 	stw	r20,20(sp)
 400a084:	dc800315 	stw	r18,12(sp)
 400a088:	dc400215 	stw	r17,8(sp)
 400a08c:	2027883a 	mov	r19,r4
 400a090:	2821883a 	mov	r16,r5
 400a094:	3800411e 	bne	r7,zero,400a19c <__udivdi3+0x13c>
 400a098:	3023883a 	mov	r17,r6
 400a09c:	2025883a 	mov	r18,r4
 400a0a0:	2980522e 	bgeu	r5,r6,400a1ec <__udivdi3+0x18c>
 400a0a4:	00bfffd4 	movui	r2,65535
 400a0a8:	282d883a 	mov	r22,r5
 400a0ac:	1180a836 	bltu	r2,r6,400a350 <__udivdi3+0x2f0>
 400a0b0:	00803fc4 	movi	r2,255
 400a0b4:	1185803a 	cmpltu	r2,r2,r6
 400a0b8:	100490fa 	slli	r2,r2,3
 400a0bc:	3086d83a 	srl	r3,r6,r2
 400a0c0:	010100b4 	movhi	r4,1026
 400a0c4:	21227c04 	addi	r4,r4,-30224
 400a0c8:	20c7883a 	add	r3,r4,r3
 400a0cc:	18c00003 	ldbu	r3,0(r3)
 400a0d0:	1885883a 	add	r2,r3,r2
 400a0d4:	00c00804 	movi	r3,32
 400a0d8:	1887c83a 	sub	r3,r3,r2
 400a0dc:	18000526 	beq	r3,zero,400a0f4 <__udivdi3+0x94>
 400a0e0:	80e0983a 	sll	r16,r16,r3
 400a0e4:	9884d83a 	srl	r2,r19,r2
 400a0e8:	30e2983a 	sll	r17,r6,r3
 400a0ec:	98e4983a 	sll	r18,r19,r3
 400a0f0:	142cb03a 	or	r22,r2,r16
 400a0f4:	882ad43a 	srli	r21,r17,16
 400a0f8:	b009883a 	mov	r4,r22
 400a0fc:	8d3fffcc 	andi	r20,r17,65535
 400a100:	a80b883a 	mov	r5,r21
 400a104:	400ac6c0 	call	400ac6c <__umodsi3>
 400a108:	b009883a 	mov	r4,r22
 400a10c:	a80b883a 	mov	r5,r21
 400a110:	1027883a 	mov	r19,r2
 400a114:	400ac080 	call	400ac08 <__udivsi3>
 400a118:	102d883a 	mov	r22,r2
 400a11c:	9826943a 	slli	r19,r19,16
 400a120:	9004d43a 	srli	r2,r18,16
 400a124:	a5a1383a 	mul	r16,r20,r22
 400a128:	14c4b03a 	or	r2,r2,r19
 400a12c:	1400052e 	bgeu	r2,r16,400a144 <__udivdi3+0xe4>
 400a130:	1445883a 	add	r2,r2,r17
 400a134:	b0ffffc4 	addi	r3,r22,-1
 400a138:	14400136 	bltu	r2,r17,400a140 <__udivdi3+0xe0>
 400a13c:	14012336 	bltu	r2,r16,400a5cc <__udivdi3+0x56c>
 400a140:	182d883a 	mov	r22,r3
 400a144:	1421c83a 	sub	r16,r2,r16
 400a148:	a80b883a 	mov	r5,r21
 400a14c:	8009883a 	mov	r4,r16
 400a150:	400ac6c0 	call	400ac6c <__umodsi3>
 400a154:	1027883a 	mov	r19,r2
 400a158:	a80b883a 	mov	r5,r21
 400a15c:	8009883a 	mov	r4,r16
 400a160:	400ac080 	call	400ac08 <__udivsi3>
 400a164:	9826943a 	slli	r19,r19,16
 400a168:	a0a9383a 	mul	r20,r20,r2
 400a16c:	94bfffcc 	andi	r18,r18,65535
 400a170:	94e4b03a 	or	r18,r18,r19
 400a174:	9500052e 	bgeu	r18,r20,400a18c <__udivdi3+0x12c>
 400a178:	8ca5883a 	add	r18,r17,r18
 400a17c:	10ffffc4 	addi	r3,r2,-1
 400a180:	9440f136 	bltu	r18,r17,400a548 <__udivdi3+0x4e8>
 400a184:	9500f02e 	bgeu	r18,r20,400a548 <__udivdi3+0x4e8>
 400a188:	10bfff84 	addi	r2,r2,-2
 400a18c:	b00c943a 	slli	r6,r22,16
 400a190:	0007883a 	mov	r3,zero
 400a194:	3084b03a 	or	r2,r6,r2
 400a198:	00005906 	br	400a300 <__udivdi3+0x2a0>
 400a19c:	29c05636 	bltu	r5,r7,400a2f8 <__udivdi3+0x298>
 400a1a0:	00bfffd4 	movui	r2,65535
 400a1a4:	11c0622e 	bgeu	r2,r7,400a330 <__udivdi3+0x2d0>
 400a1a8:	00804034 	movhi	r2,256
 400a1ac:	10bfffc4 	addi	r2,r2,-1
 400a1b0:	11c0ee36 	bltu	r2,r7,400a56c <__udivdi3+0x50c>
 400a1b4:	00800404 	movi	r2,16
 400a1b8:	3886d83a 	srl	r3,r7,r2
 400a1bc:	010100b4 	movhi	r4,1026
 400a1c0:	21227c04 	addi	r4,r4,-30224
 400a1c4:	20c7883a 	add	r3,r4,r3
 400a1c8:	18c00003 	ldbu	r3,0(r3)
 400a1cc:	05400804 	movi	r21,32
 400a1d0:	1885883a 	add	r2,r3,r2
 400a1d4:	a8abc83a 	sub	r21,r21,r2
 400a1d8:	a800621e 	bne	r21,zero,400a364 <__udivdi3+0x304>
 400a1dc:	3c00e936 	bltu	r7,r16,400a584 <__udivdi3+0x524>
 400a1e0:	9985403a 	cmpgeu	r2,r19,r6
 400a1e4:	0007883a 	mov	r3,zero
 400a1e8:	00004506 	br	400a300 <__udivdi3+0x2a0>
 400a1ec:	3000041e 	bne	r6,zero,400a200 <__udivdi3+0x1a0>
 400a1f0:	000b883a 	mov	r5,zero
 400a1f4:	01000044 	movi	r4,1
 400a1f8:	400ac080 	call	400ac08 <__udivsi3>
 400a1fc:	1023883a 	mov	r17,r2
 400a200:	00bfffd4 	movui	r2,65535
 400a204:	14404e2e 	bgeu	r2,r17,400a340 <__udivdi3+0x2e0>
 400a208:	00804034 	movhi	r2,256
 400a20c:	10bfffc4 	addi	r2,r2,-1
 400a210:	1440d836 	bltu	r2,r17,400a574 <__udivdi3+0x514>
 400a214:	00800404 	movi	r2,16
 400a218:	8886d83a 	srl	r3,r17,r2
 400a21c:	010100b4 	movhi	r4,1026
 400a220:	21227c04 	addi	r4,r4,-30224
 400a224:	20c7883a 	add	r3,r4,r3
 400a228:	18c00003 	ldbu	r3,0(r3)
 400a22c:	1885883a 	add	r2,r3,r2
 400a230:	00c00804 	movi	r3,32
 400a234:	1887c83a 	sub	r3,r3,r2
 400a238:	18008f1e 	bne	r3,zero,400a478 <__udivdi3+0x418>
 400a23c:	882ad43a 	srli	r21,r17,16
 400a240:	8461c83a 	sub	r16,r16,r17
 400a244:	8d3fffcc 	andi	r20,r17,65535
 400a248:	00c00044 	movi	r3,1
 400a24c:	8009883a 	mov	r4,r16
 400a250:	a80b883a 	mov	r5,r21
 400a254:	d8c00015 	stw	r3,0(sp)
 400a258:	400ac6c0 	call	400ac6c <__umodsi3>
 400a25c:	8009883a 	mov	r4,r16
 400a260:	a80b883a 	mov	r5,r21
 400a264:	1027883a 	mov	r19,r2
 400a268:	400ac080 	call	400ac08 <__udivsi3>
 400a26c:	9826943a 	slli	r19,r19,16
 400a270:	9008d43a 	srli	r4,r18,16
 400a274:	1521383a 	mul	r16,r2,r20
 400a278:	102d883a 	mov	r22,r2
 400a27c:	24c8b03a 	or	r4,r4,r19
 400a280:	d8c00017 	ldw	r3,0(sp)
 400a284:	2400052e 	bgeu	r4,r16,400a29c <__udivdi3+0x23c>
 400a288:	2449883a 	add	r4,r4,r17
 400a28c:	b0bfffc4 	addi	r2,r22,-1
 400a290:	24400136 	bltu	r4,r17,400a298 <__udivdi3+0x238>
 400a294:	2400ca36 	bltu	r4,r16,400a5c0 <__udivdi3+0x560>
 400a298:	102d883a 	mov	r22,r2
 400a29c:	2421c83a 	sub	r16,r4,r16
 400a2a0:	a80b883a 	mov	r5,r21
 400a2a4:	8009883a 	mov	r4,r16
 400a2a8:	d8c00015 	stw	r3,0(sp)
 400a2ac:	400ac6c0 	call	400ac6c <__umodsi3>
 400a2b0:	1027883a 	mov	r19,r2
 400a2b4:	a80b883a 	mov	r5,r21
 400a2b8:	8009883a 	mov	r4,r16
 400a2bc:	400ac080 	call	400ac08 <__udivsi3>
 400a2c0:	9826943a 	slli	r19,r19,16
 400a2c4:	1529383a 	mul	r20,r2,r20
 400a2c8:	94bfffcc 	andi	r18,r18,65535
 400a2cc:	94e4b03a 	or	r18,r18,r19
 400a2d0:	d8c00017 	ldw	r3,0(sp)
 400a2d4:	9500052e 	bgeu	r18,r20,400a2ec <__udivdi3+0x28c>
 400a2d8:	8ca5883a 	add	r18,r17,r18
 400a2dc:	113fffc4 	addi	r4,r2,-1
 400a2e0:	94409736 	bltu	r18,r17,400a540 <__udivdi3+0x4e0>
 400a2e4:	9500962e 	bgeu	r18,r20,400a540 <__udivdi3+0x4e0>
 400a2e8:	10bfff84 	addi	r2,r2,-2
 400a2ec:	b00c943a 	slli	r6,r22,16
 400a2f0:	3084b03a 	or	r2,r6,r2
 400a2f4:	00000206 	br	400a300 <__udivdi3+0x2a0>
 400a2f8:	0007883a 	mov	r3,zero
 400a2fc:	0005883a 	mov	r2,zero
 400a300:	dfc00a17 	ldw	ra,40(sp)
 400a304:	df000917 	ldw	fp,36(sp)
 400a308:	ddc00817 	ldw	r23,32(sp)
 400a30c:	dd800717 	ldw	r22,28(sp)
 400a310:	dd400617 	ldw	r21,24(sp)
 400a314:	dd000517 	ldw	r20,20(sp)
 400a318:	dcc00417 	ldw	r19,16(sp)
 400a31c:	dc800317 	ldw	r18,12(sp)
 400a320:	dc400217 	ldw	r17,8(sp)
 400a324:	dc000117 	ldw	r16,4(sp)
 400a328:	dec00b04 	addi	sp,sp,44
 400a32c:	f800283a 	ret
 400a330:	00803fc4 	movi	r2,255
 400a334:	11c5803a 	cmpltu	r2,r2,r7
 400a338:	100490fa 	slli	r2,r2,3
 400a33c:	003f9e06 	br	400a1b8 <__alt_mem_onchip_memory2_0+0xfbfea1b8>
 400a340:	00803fc4 	movi	r2,255
 400a344:	1445803a 	cmpltu	r2,r2,r17
 400a348:	100490fa 	slli	r2,r2,3
 400a34c:	003fb206 	br	400a218 <__alt_mem_onchip_memory2_0+0xfbfea218>
 400a350:	00804034 	movhi	r2,256
 400a354:	10bfffc4 	addi	r2,r2,-1
 400a358:	11808836 	bltu	r2,r6,400a57c <__udivdi3+0x51c>
 400a35c:	00800404 	movi	r2,16
 400a360:	003f5606 	br	400a0bc <__alt_mem_onchip_memory2_0+0xfbfea0bc>
 400a364:	30aed83a 	srl	r23,r6,r2
 400a368:	3d4e983a 	sll	r7,r7,r21
 400a36c:	80acd83a 	srl	r22,r16,r2
 400a370:	9884d83a 	srl	r2,r19,r2
 400a374:	3deeb03a 	or	r23,r7,r23
 400a378:	b824d43a 	srli	r18,r23,16
 400a37c:	8560983a 	sll	r16,r16,r21
 400a380:	b009883a 	mov	r4,r22
 400a384:	900b883a 	mov	r5,r18
 400a388:	3568983a 	sll	r20,r6,r21
 400a38c:	1420b03a 	or	r16,r2,r16
 400a390:	400ac6c0 	call	400ac6c <__umodsi3>
 400a394:	b009883a 	mov	r4,r22
 400a398:	900b883a 	mov	r5,r18
 400a39c:	1023883a 	mov	r17,r2
 400a3a0:	400ac080 	call	400ac08 <__udivsi3>
 400a3a4:	8808943a 	slli	r4,r17,16
 400a3a8:	bf3fffcc 	andi	fp,r23,65535
 400a3ac:	8006d43a 	srli	r3,r16,16
 400a3b0:	e0a3383a 	mul	r17,fp,r2
 400a3b4:	100d883a 	mov	r6,r2
 400a3b8:	1906b03a 	or	r3,r3,r4
 400a3bc:	1c40042e 	bgeu	r3,r17,400a3d0 <__udivdi3+0x370>
 400a3c0:	1dc7883a 	add	r3,r3,r23
 400a3c4:	10bfffc4 	addi	r2,r2,-1
 400a3c8:	1dc0752e 	bgeu	r3,r23,400a5a0 <__udivdi3+0x540>
 400a3cc:	100d883a 	mov	r6,r2
 400a3d0:	1c63c83a 	sub	r17,r3,r17
 400a3d4:	900b883a 	mov	r5,r18
 400a3d8:	8809883a 	mov	r4,r17
 400a3dc:	d9800015 	stw	r6,0(sp)
 400a3e0:	400ac6c0 	call	400ac6c <__umodsi3>
 400a3e4:	102d883a 	mov	r22,r2
 400a3e8:	8809883a 	mov	r4,r17
 400a3ec:	900b883a 	mov	r5,r18
 400a3f0:	400ac080 	call	400ac08 <__udivsi3>
 400a3f4:	b02c943a 	slli	r22,r22,16
 400a3f8:	e089383a 	mul	r4,fp,r2
 400a3fc:	843fffcc 	andi	r16,r16,65535
 400a400:	85a0b03a 	or	r16,r16,r22
 400a404:	d9800017 	ldw	r6,0(sp)
 400a408:	8100042e 	bgeu	r16,r4,400a41c <__udivdi3+0x3bc>
 400a40c:	85e1883a 	add	r16,r16,r23
 400a410:	10ffffc4 	addi	r3,r2,-1
 400a414:	85c05e2e 	bgeu	r16,r23,400a590 <__udivdi3+0x530>
 400a418:	1805883a 	mov	r2,r3
 400a41c:	300c943a 	slli	r6,r6,16
 400a420:	a17fffcc 	andi	r5,r20,65535
 400a424:	a028d43a 	srli	r20,r20,16
 400a428:	3084b03a 	or	r2,r6,r2
 400a42c:	10ffffcc 	andi	r3,r2,65535
 400a430:	100cd43a 	srli	r6,r2,16
 400a434:	194f383a 	mul	r7,r3,r5
 400a438:	1d07383a 	mul	r3,r3,r20
 400a43c:	314b383a 	mul	r5,r6,r5
 400a440:	3810d43a 	srli	r8,r7,16
 400a444:	8121c83a 	sub	r16,r16,r4
 400a448:	1947883a 	add	r3,r3,r5
 400a44c:	40c7883a 	add	r3,r8,r3
 400a450:	350d383a 	mul	r6,r6,r20
 400a454:	1940022e 	bgeu	r3,r5,400a460 <__udivdi3+0x400>
 400a458:	01000074 	movhi	r4,1
 400a45c:	310d883a 	add	r6,r6,r4
 400a460:	1828d43a 	srli	r20,r3,16
 400a464:	a18d883a 	add	r6,r20,r6
 400a468:	81803e36 	bltu	r16,r6,400a564 <__udivdi3+0x504>
 400a46c:	81803826 	beq	r16,r6,400a550 <__udivdi3+0x4f0>
 400a470:	0007883a 	mov	r3,zero
 400a474:	003fa206 	br	400a300 <__alt_mem_onchip_memory2_0+0xfbfea300>
 400a478:	88e2983a 	sll	r17,r17,r3
 400a47c:	80a8d83a 	srl	r20,r16,r2
 400a480:	80e0983a 	sll	r16,r16,r3
 400a484:	882ad43a 	srli	r21,r17,16
 400a488:	9884d83a 	srl	r2,r19,r2
 400a48c:	a009883a 	mov	r4,r20
 400a490:	a80b883a 	mov	r5,r21
 400a494:	142eb03a 	or	r23,r2,r16
 400a498:	98e4983a 	sll	r18,r19,r3
 400a49c:	400ac6c0 	call	400ac6c <__umodsi3>
 400a4a0:	a009883a 	mov	r4,r20
 400a4a4:	a80b883a 	mov	r5,r21
 400a4a8:	1021883a 	mov	r16,r2
 400a4ac:	400ac080 	call	400ac08 <__udivsi3>
 400a4b0:	1039883a 	mov	fp,r2
 400a4b4:	8d3fffcc 	andi	r20,r17,65535
 400a4b8:	8020943a 	slli	r16,r16,16
 400a4bc:	b804d43a 	srli	r2,r23,16
 400a4c0:	a72d383a 	mul	r22,r20,fp
 400a4c4:	1404b03a 	or	r2,r2,r16
 400a4c8:	1580062e 	bgeu	r2,r22,400a4e4 <__udivdi3+0x484>
 400a4cc:	1445883a 	add	r2,r2,r17
 400a4d0:	e0ffffc4 	addi	r3,fp,-1
 400a4d4:	14403836 	bltu	r2,r17,400a5b8 <__udivdi3+0x558>
 400a4d8:	1580372e 	bgeu	r2,r22,400a5b8 <__udivdi3+0x558>
 400a4dc:	e73fff84 	addi	fp,fp,-2
 400a4e0:	1445883a 	add	r2,r2,r17
 400a4e4:	15adc83a 	sub	r22,r2,r22
 400a4e8:	a80b883a 	mov	r5,r21
 400a4ec:	b009883a 	mov	r4,r22
 400a4f0:	400ac6c0 	call	400ac6c <__umodsi3>
 400a4f4:	1027883a 	mov	r19,r2
 400a4f8:	b009883a 	mov	r4,r22
 400a4fc:	a80b883a 	mov	r5,r21
 400a500:	400ac080 	call	400ac08 <__udivsi3>
 400a504:	9826943a 	slli	r19,r19,16
 400a508:	a0a1383a 	mul	r16,r20,r2
 400a50c:	b93fffcc 	andi	r4,r23,65535
 400a510:	24c8b03a 	or	r4,r4,r19
 400a514:	2400062e 	bgeu	r4,r16,400a530 <__udivdi3+0x4d0>
 400a518:	2449883a 	add	r4,r4,r17
 400a51c:	10ffffc4 	addi	r3,r2,-1
 400a520:	24402336 	bltu	r4,r17,400a5b0 <__udivdi3+0x550>
 400a524:	2400222e 	bgeu	r4,r16,400a5b0 <__udivdi3+0x550>
 400a528:	10bfff84 	addi	r2,r2,-2
 400a52c:	2449883a 	add	r4,r4,r17
 400a530:	e038943a 	slli	fp,fp,16
 400a534:	2421c83a 	sub	r16,r4,r16
 400a538:	e086b03a 	or	r3,fp,r2
 400a53c:	003f4306 	br	400a24c <__alt_mem_onchip_memory2_0+0xfbfea24c>
 400a540:	2005883a 	mov	r2,r4
 400a544:	003f6906 	br	400a2ec <__alt_mem_onchip_memory2_0+0xfbfea2ec>
 400a548:	1805883a 	mov	r2,r3
 400a54c:	003f0f06 	br	400a18c <__alt_mem_onchip_memory2_0+0xfbfea18c>
 400a550:	1806943a 	slli	r3,r3,16
 400a554:	9d66983a 	sll	r19,r19,r21
 400a558:	39ffffcc 	andi	r7,r7,65535
 400a55c:	19c7883a 	add	r3,r3,r7
 400a560:	98ffc32e 	bgeu	r19,r3,400a470 <__alt_mem_onchip_memory2_0+0xfbfea470>
 400a564:	10bfffc4 	addi	r2,r2,-1
 400a568:	003fc106 	br	400a470 <__alt_mem_onchip_memory2_0+0xfbfea470>
 400a56c:	00800604 	movi	r2,24
 400a570:	003f1106 	br	400a1b8 <__alt_mem_onchip_memory2_0+0xfbfea1b8>
 400a574:	00800604 	movi	r2,24
 400a578:	003f2706 	br	400a218 <__alt_mem_onchip_memory2_0+0xfbfea218>
 400a57c:	00800604 	movi	r2,24
 400a580:	003ece06 	br	400a0bc <__alt_mem_onchip_memory2_0+0xfbfea0bc>
 400a584:	0007883a 	mov	r3,zero
 400a588:	00800044 	movi	r2,1
 400a58c:	003f5c06 	br	400a300 <__alt_mem_onchip_memory2_0+0xfbfea300>
 400a590:	813fa12e 	bgeu	r16,r4,400a418 <__alt_mem_onchip_memory2_0+0xfbfea418>
 400a594:	10bfff84 	addi	r2,r2,-2
 400a598:	85e1883a 	add	r16,r16,r23
 400a59c:	003f9f06 	br	400a41c <__alt_mem_onchip_memory2_0+0xfbfea41c>
 400a5a0:	1c7f8a2e 	bgeu	r3,r17,400a3cc <__alt_mem_onchip_memory2_0+0xfbfea3cc>
 400a5a4:	31bfff84 	addi	r6,r6,-2
 400a5a8:	1dc7883a 	add	r3,r3,r23
 400a5ac:	003f8806 	br	400a3d0 <__alt_mem_onchip_memory2_0+0xfbfea3d0>
 400a5b0:	1805883a 	mov	r2,r3
 400a5b4:	003fde06 	br	400a530 <__alt_mem_onchip_memory2_0+0xfbfea530>
 400a5b8:	1839883a 	mov	fp,r3
 400a5bc:	003fc906 	br	400a4e4 <__alt_mem_onchip_memory2_0+0xfbfea4e4>
 400a5c0:	b5bfff84 	addi	r22,r22,-2
 400a5c4:	2449883a 	add	r4,r4,r17
 400a5c8:	003f3406 	br	400a29c <__alt_mem_onchip_memory2_0+0xfbfea29c>
 400a5cc:	b5bfff84 	addi	r22,r22,-2
 400a5d0:	1445883a 	add	r2,r2,r17
 400a5d4:	003edb06 	br	400a144 <__alt_mem_onchip_memory2_0+0xfbfea144>

0400a5d8 <__umoddi3>:
 400a5d8:	defff404 	addi	sp,sp,-48
 400a5dc:	df000a15 	stw	fp,40(sp)
 400a5e0:	dc400315 	stw	r17,12(sp)
 400a5e4:	dc000215 	stw	r16,8(sp)
 400a5e8:	dfc00b15 	stw	ra,44(sp)
 400a5ec:	ddc00915 	stw	r23,36(sp)
 400a5f0:	dd800815 	stw	r22,32(sp)
 400a5f4:	dd400715 	stw	r21,28(sp)
 400a5f8:	dd000615 	stw	r20,24(sp)
 400a5fc:	dcc00515 	stw	r19,20(sp)
 400a600:	dc800415 	stw	r18,16(sp)
 400a604:	2021883a 	mov	r16,r4
 400a608:	2823883a 	mov	r17,r5
 400a60c:	2839883a 	mov	fp,r5
 400a610:	38003c1e 	bne	r7,zero,400a704 <__umoddi3+0x12c>
 400a614:	3027883a 	mov	r19,r6
 400a618:	2029883a 	mov	r20,r4
 400a61c:	2980512e 	bgeu	r5,r6,400a764 <__umoddi3+0x18c>
 400a620:	00bfffd4 	movui	r2,65535
 400a624:	11809a36 	bltu	r2,r6,400a890 <__umoddi3+0x2b8>
 400a628:	01003fc4 	movi	r4,255
 400a62c:	2189803a 	cmpltu	r4,r4,r6
 400a630:	200890fa 	slli	r4,r4,3
 400a634:	3104d83a 	srl	r2,r6,r4
 400a638:	00c100b4 	movhi	r3,1026
 400a63c:	18e27c04 	addi	r3,r3,-30224
 400a640:	1885883a 	add	r2,r3,r2
 400a644:	10c00003 	ldbu	r3,0(r2)
 400a648:	00800804 	movi	r2,32
 400a64c:	1909883a 	add	r4,r3,r4
 400a650:	1125c83a 	sub	r18,r2,r4
 400a654:	90000526 	beq	r18,zero,400a66c <__umoddi3+0x94>
 400a658:	8ca2983a 	sll	r17,r17,r18
 400a65c:	8108d83a 	srl	r4,r16,r4
 400a660:	34a6983a 	sll	r19,r6,r18
 400a664:	84a8983a 	sll	r20,r16,r18
 400a668:	2478b03a 	or	fp,r4,r17
 400a66c:	982ed43a 	srli	r23,r19,16
 400a670:	e009883a 	mov	r4,fp
 400a674:	9dbfffcc 	andi	r22,r19,65535
 400a678:	b80b883a 	mov	r5,r23
 400a67c:	400ac6c0 	call	400ac6c <__umodsi3>
 400a680:	e009883a 	mov	r4,fp
 400a684:	b80b883a 	mov	r5,r23
 400a688:	102b883a 	mov	r21,r2
 400a68c:	400ac080 	call	400ac08 <__udivsi3>
 400a690:	a806943a 	slli	r3,r21,16
 400a694:	a008d43a 	srli	r4,r20,16
 400a698:	b085383a 	mul	r2,r22,r2
 400a69c:	20c8b03a 	or	r4,r4,r3
 400a6a0:	2080032e 	bgeu	r4,r2,400a6b0 <__umoddi3+0xd8>
 400a6a4:	24c9883a 	add	r4,r4,r19
 400a6a8:	24c00136 	bltu	r4,r19,400a6b0 <__umoddi3+0xd8>
 400a6ac:	20811036 	bltu	r4,r2,400aaf0 <__umoddi3+0x518>
 400a6b0:	20abc83a 	sub	r21,r4,r2
 400a6b4:	b80b883a 	mov	r5,r23
 400a6b8:	a809883a 	mov	r4,r21
 400a6bc:	400ac6c0 	call	400ac6c <__umodsi3>
 400a6c0:	1023883a 	mov	r17,r2
 400a6c4:	b80b883a 	mov	r5,r23
 400a6c8:	a809883a 	mov	r4,r21
 400a6cc:	400ac080 	call	400ac08 <__udivsi3>
 400a6d0:	8822943a 	slli	r17,r17,16
 400a6d4:	b085383a 	mul	r2,r22,r2
 400a6d8:	a0ffffcc 	andi	r3,r20,65535
 400a6dc:	1c46b03a 	or	r3,r3,r17
 400a6e0:	1880042e 	bgeu	r3,r2,400a6f4 <__umoddi3+0x11c>
 400a6e4:	1cc7883a 	add	r3,r3,r19
 400a6e8:	1cc00236 	bltu	r3,r19,400a6f4 <__umoddi3+0x11c>
 400a6ec:	1880012e 	bgeu	r3,r2,400a6f4 <__umoddi3+0x11c>
 400a6f0:	1cc7883a 	add	r3,r3,r19
 400a6f4:	1885c83a 	sub	r2,r3,r2
 400a6f8:	1484d83a 	srl	r2,r2,r18
 400a6fc:	0007883a 	mov	r3,zero
 400a700:	00004f06 	br	400a840 <__umoddi3+0x268>
 400a704:	29c04c36 	bltu	r5,r7,400a838 <__umoddi3+0x260>
 400a708:	00bfffd4 	movui	r2,65535
 400a70c:	11c0582e 	bgeu	r2,r7,400a870 <__umoddi3+0x298>
 400a710:	00804034 	movhi	r2,256
 400a714:	10bfffc4 	addi	r2,r2,-1
 400a718:	11c0e736 	bltu	r2,r7,400aab8 <__umoddi3+0x4e0>
 400a71c:	01000404 	movi	r4,16
 400a720:	3904d83a 	srl	r2,r7,r4
 400a724:	00c100b4 	movhi	r3,1026
 400a728:	18e27c04 	addi	r3,r3,-30224
 400a72c:	1885883a 	add	r2,r3,r2
 400a730:	14c00003 	ldbu	r19,0(r2)
 400a734:	00c00804 	movi	r3,32
 400a738:	9927883a 	add	r19,r19,r4
 400a73c:	1ce9c83a 	sub	r20,r3,r19
 400a740:	a000581e 	bne	r20,zero,400a8a4 <__umoddi3+0x2cc>
 400a744:	3c400136 	bltu	r7,r17,400a74c <__umoddi3+0x174>
 400a748:	8180eb36 	bltu	r16,r6,400aaf8 <__umoddi3+0x520>
 400a74c:	8185c83a 	sub	r2,r16,r6
 400a750:	89e3c83a 	sub	r17,r17,r7
 400a754:	8089803a 	cmpltu	r4,r16,r2
 400a758:	8939c83a 	sub	fp,r17,r4
 400a75c:	e007883a 	mov	r3,fp
 400a760:	00003706 	br	400a840 <__umoddi3+0x268>
 400a764:	3000041e 	bne	r6,zero,400a778 <__umoddi3+0x1a0>
 400a768:	000b883a 	mov	r5,zero
 400a76c:	01000044 	movi	r4,1
 400a770:	400ac080 	call	400ac08 <__udivsi3>
 400a774:	1027883a 	mov	r19,r2
 400a778:	00bfffd4 	movui	r2,65535
 400a77c:	14c0402e 	bgeu	r2,r19,400a880 <__umoddi3+0x2a8>
 400a780:	00804034 	movhi	r2,256
 400a784:	10bfffc4 	addi	r2,r2,-1
 400a788:	14c0cd36 	bltu	r2,r19,400aac0 <__umoddi3+0x4e8>
 400a78c:	00800404 	movi	r2,16
 400a790:	9886d83a 	srl	r3,r19,r2
 400a794:	010100b4 	movhi	r4,1026
 400a798:	21227c04 	addi	r4,r4,-30224
 400a79c:	20c7883a 	add	r3,r4,r3
 400a7a0:	18c00003 	ldbu	r3,0(r3)
 400a7a4:	1887883a 	add	r3,r3,r2
 400a7a8:	00800804 	movi	r2,32
 400a7ac:	10e5c83a 	sub	r18,r2,r3
 400a7b0:	9000901e 	bne	r18,zero,400a9f4 <__umoddi3+0x41c>
 400a7b4:	982cd43a 	srli	r22,r19,16
 400a7b8:	8ce3c83a 	sub	r17,r17,r19
 400a7bc:	9d7fffcc 	andi	r21,r19,65535
 400a7c0:	b00b883a 	mov	r5,r22
 400a7c4:	8809883a 	mov	r4,r17
 400a7c8:	400ac6c0 	call	400ac6c <__umodsi3>
 400a7cc:	8809883a 	mov	r4,r17
 400a7d0:	b00b883a 	mov	r5,r22
 400a7d4:	1021883a 	mov	r16,r2
 400a7d8:	400ac080 	call	400ac08 <__udivsi3>
 400a7dc:	8006943a 	slli	r3,r16,16
 400a7e0:	a008d43a 	srli	r4,r20,16
 400a7e4:	1545383a 	mul	r2,r2,r21
 400a7e8:	20c8b03a 	or	r4,r4,r3
 400a7ec:	2080042e 	bgeu	r4,r2,400a800 <__umoddi3+0x228>
 400a7f0:	24c9883a 	add	r4,r4,r19
 400a7f4:	24c00236 	bltu	r4,r19,400a800 <__umoddi3+0x228>
 400a7f8:	2080012e 	bgeu	r4,r2,400a800 <__umoddi3+0x228>
 400a7fc:	24c9883a 	add	r4,r4,r19
 400a800:	20a1c83a 	sub	r16,r4,r2
 400a804:	b00b883a 	mov	r5,r22
 400a808:	8009883a 	mov	r4,r16
 400a80c:	400ac6c0 	call	400ac6c <__umodsi3>
 400a810:	1023883a 	mov	r17,r2
 400a814:	b00b883a 	mov	r5,r22
 400a818:	8009883a 	mov	r4,r16
 400a81c:	400ac080 	call	400ac08 <__udivsi3>
 400a820:	8822943a 	slli	r17,r17,16
 400a824:	1545383a 	mul	r2,r2,r21
 400a828:	a53fffcc 	andi	r20,r20,65535
 400a82c:	a446b03a 	or	r3,r20,r17
 400a830:	18bfb02e 	bgeu	r3,r2,400a6f4 <__alt_mem_onchip_memory2_0+0xfbfea6f4>
 400a834:	003fab06 	br	400a6e4 <__alt_mem_onchip_memory2_0+0xfbfea6e4>
 400a838:	2005883a 	mov	r2,r4
 400a83c:	2807883a 	mov	r3,r5
 400a840:	dfc00b17 	ldw	ra,44(sp)
 400a844:	df000a17 	ldw	fp,40(sp)
 400a848:	ddc00917 	ldw	r23,36(sp)
 400a84c:	dd800817 	ldw	r22,32(sp)
 400a850:	dd400717 	ldw	r21,28(sp)
 400a854:	dd000617 	ldw	r20,24(sp)
 400a858:	dcc00517 	ldw	r19,20(sp)
 400a85c:	dc800417 	ldw	r18,16(sp)
 400a860:	dc400317 	ldw	r17,12(sp)
 400a864:	dc000217 	ldw	r16,8(sp)
 400a868:	dec00c04 	addi	sp,sp,48
 400a86c:	f800283a 	ret
 400a870:	04c03fc4 	movi	r19,255
 400a874:	99c9803a 	cmpltu	r4,r19,r7
 400a878:	200890fa 	slli	r4,r4,3
 400a87c:	003fa806 	br	400a720 <__alt_mem_onchip_memory2_0+0xfbfea720>
 400a880:	00803fc4 	movi	r2,255
 400a884:	14c5803a 	cmpltu	r2,r2,r19
 400a888:	100490fa 	slli	r2,r2,3
 400a88c:	003fc006 	br	400a790 <__alt_mem_onchip_memory2_0+0xfbfea790>
 400a890:	00804034 	movhi	r2,256
 400a894:	10bfffc4 	addi	r2,r2,-1
 400a898:	11808b36 	bltu	r2,r6,400aac8 <__umoddi3+0x4f0>
 400a89c:	01000404 	movi	r4,16
 400a8a0:	003f6406 	br	400a634 <__alt_mem_onchip_memory2_0+0xfbfea634>
 400a8a4:	34c4d83a 	srl	r2,r6,r19
 400a8a8:	3d0e983a 	sll	r7,r7,r20
 400a8ac:	8cf8d83a 	srl	fp,r17,r19
 400a8b0:	8d10983a 	sll	r8,r17,r20
 400a8b4:	38aab03a 	or	r21,r7,r2
 400a8b8:	a82cd43a 	srli	r22,r21,16
 400a8bc:	84e2d83a 	srl	r17,r16,r19
 400a8c0:	e009883a 	mov	r4,fp
 400a8c4:	b00b883a 	mov	r5,r22
 400a8c8:	8a22b03a 	or	r17,r17,r8
 400a8cc:	3524983a 	sll	r18,r6,r20
 400a8d0:	400ac6c0 	call	400ac6c <__umodsi3>
 400a8d4:	e009883a 	mov	r4,fp
 400a8d8:	b00b883a 	mov	r5,r22
 400a8dc:	102f883a 	mov	r23,r2
 400a8e0:	400ac080 	call	400ac08 <__udivsi3>
 400a8e4:	100d883a 	mov	r6,r2
 400a8e8:	b808943a 	slli	r4,r23,16
 400a8ec:	aa3fffcc 	andi	r8,r21,65535
 400a8f0:	8804d43a 	srli	r2,r17,16
 400a8f4:	41af383a 	mul	r23,r8,r6
 400a8f8:	8520983a 	sll	r16,r16,r20
 400a8fc:	1104b03a 	or	r2,r2,r4
 400a900:	15c0042e 	bgeu	r2,r23,400a914 <__umoddi3+0x33c>
 400a904:	1545883a 	add	r2,r2,r21
 400a908:	30ffffc4 	addi	r3,r6,-1
 400a90c:	1540742e 	bgeu	r2,r21,400aae0 <__umoddi3+0x508>
 400a910:	180d883a 	mov	r6,r3
 400a914:	15efc83a 	sub	r23,r2,r23
 400a918:	b00b883a 	mov	r5,r22
 400a91c:	b809883a 	mov	r4,r23
 400a920:	d9800115 	stw	r6,4(sp)
 400a924:	da000015 	stw	r8,0(sp)
 400a928:	400ac6c0 	call	400ac6c <__umodsi3>
 400a92c:	b00b883a 	mov	r5,r22
 400a930:	b809883a 	mov	r4,r23
 400a934:	1039883a 	mov	fp,r2
 400a938:	400ac080 	call	400ac08 <__udivsi3>
 400a93c:	da000017 	ldw	r8,0(sp)
 400a940:	e038943a 	slli	fp,fp,16
 400a944:	100b883a 	mov	r5,r2
 400a948:	4089383a 	mul	r4,r8,r2
 400a94c:	8a3fffcc 	andi	r8,r17,65535
 400a950:	4710b03a 	or	r8,r8,fp
 400a954:	d9800117 	ldw	r6,4(sp)
 400a958:	4100042e 	bgeu	r8,r4,400a96c <__umoddi3+0x394>
 400a95c:	4551883a 	add	r8,r8,r21
 400a960:	10bfffc4 	addi	r2,r2,-1
 400a964:	45405a2e 	bgeu	r8,r21,400aad0 <__umoddi3+0x4f8>
 400a968:	100b883a 	mov	r5,r2
 400a96c:	300c943a 	slli	r6,r6,16
 400a970:	91ffffcc 	andi	r7,r18,65535
 400a974:	9004d43a 	srli	r2,r18,16
 400a978:	314cb03a 	or	r6,r6,r5
 400a97c:	317fffcc 	andi	r5,r6,65535
 400a980:	300cd43a 	srli	r6,r6,16
 400a984:	29d3383a 	mul	r9,r5,r7
 400a988:	288b383a 	mul	r5,r5,r2
 400a98c:	31cf383a 	mul	r7,r6,r7
 400a990:	4806d43a 	srli	r3,r9,16
 400a994:	4111c83a 	sub	r8,r8,r4
 400a998:	29cb883a 	add	r5,r5,r7
 400a99c:	194b883a 	add	r5,r3,r5
 400a9a0:	3085383a 	mul	r2,r6,r2
 400a9a4:	29c0022e 	bgeu	r5,r7,400a9b0 <__umoddi3+0x3d8>
 400a9a8:	00c00074 	movhi	r3,1
 400a9ac:	10c5883a 	add	r2,r2,r3
 400a9b0:	2808d43a 	srli	r4,r5,16
 400a9b4:	280a943a 	slli	r5,r5,16
 400a9b8:	4a7fffcc 	andi	r9,r9,65535
 400a9bc:	2085883a 	add	r2,r4,r2
 400a9c0:	2a4b883a 	add	r5,r5,r9
 400a9c4:	40803636 	bltu	r8,r2,400aaa0 <__umoddi3+0x4c8>
 400a9c8:	40804d26 	beq	r8,r2,400ab00 <__umoddi3+0x528>
 400a9cc:	4089c83a 	sub	r4,r8,r2
 400a9d0:	280f883a 	mov	r7,r5
 400a9d4:	81cfc83a 	sub	r7,r16,r7
 400a9d8:	81c7803a 	cmpltu	r3,r16,r7
 400a9dc:	20c7c83a 	sub	r3,r4,r3
 400a9e0:	1cc4983a 	sll	r2,r3,r19
 400a9e4:	3d0ed83a 	srl	r7,r7,r20
 400a9e8:	1d06d83a 	srl	r3,r3,r20
 400a9ec:	11c4b03a 	or	r2,r2,r7
 400a9f0:	003f9306 	br	400a840 <__alt_mem_onchip_memory2_0+0xfbfea840>
 400a9f4:	9ca6983a 	sll	r19,r19,r18
 400a9f8:	88e8d83a 	srl	r20,r17,r3
 400a9fc:	80c4d83a 	srl	r2,r16,r3
 400aa00:	982cd43a 	srli	r22,r19,16
 400aa04:	8ca2983a 	sll	r17,r17,r18
 400aa08:	a009883a 	mov	r4,r20
 400aa0c:	b00b883a 	mov	r5,r22
 400aa10:	1478b03a 	or	fp,r2,r17
 400aa14:	400ac6c0 	call	400ac6c <__umodsi3>
 400aa18:	a009883a 	mov	r4,r20
 400aa1c:	b00b883a 	mov	r5,r22
 400aa20:	1023883a 	mov	r17,r2
 400aa24:	400ac080 	call	400ac08 <__udivsi3>
 400aa28:	9d7fffcc 	andi	r21,r19,65535
 400aa2c:	880a943a 	slli	r5,r17,16
 400aa30:	e008d43a 	srli	r4,fp,16
 400aa34:	a885383a 	mul	r2,r21,r2
 400aa38:	84a8983a 	sll	r20,r16,r18
 400aa3c:	2148b03a 	or	r4,r4,r5
 400aa40:	2080042e 	bgeu	r4,r2,400aa54 <__umoddi3+0x47c>
 400aa44:	24c9883a 	add	r4,r4,r19
 400aa48:	24c00236 	bltu	r4,r19,400aa54 <__umoddi3+0x47c>
 400aa4c:	2080012e 	bgeu	r4,r2,400aa54 <__umoddi3+0x47c>
 400aa50:	24c9883a 	add	r4,r4,r19
 400aa54:	20a3c83a 	sub	r17,r4,r2
 400aa58:	b00b883a 	mov	r5,r22
 400aa5c:	8809883a 	mov	r4,r17
 400aa60:	400ac6c0 	call	400ac6c <__umodsi3>
 400aa64:	102f883a 	mov	r23,r2
 400aa68:	8809883a 	mov	r4,r17
 400aa6c:	b00b883a 	mov	r5,r22
 400aa70:	400ac080 	call	400ac08 <__udivsi3>
 400aa74:	b82e943a 	slli	r23,r23,16
 400aa78:	a885383a 	mul	r2,r21,r2
 400aa7c:	e13fffcc 	andi	r4,fp,65535
 400aa80:	25c8b03a 	or	r4,r4,r23
 400aa84:	2080042e 	bgeu	r4,r2,400aa98 <__umoddi3+0x4c0>
 400aa88:	24c9883a 	add	r4,r4,r19
 400aa8c:	24c00236 	bltu	r4,r19,400aa98 <__umoddi3+0x4c0>
 400aa90:	2080012e 	bgeu	r4,r2,400aa98 <__umoddi3+0x4c0>
 400aa94:	24c9883a 	add	r4,r4,r19
 400aa98:	20a3c83a 	sub	r17,r4,r2
 400aa9c:	003f4806 	br	400a7c0 <__alt_mem_onchip_memory2_0+0xfbfea7c0>
 400aaa0:	2c8fc83a 	sub	r7,r5,r18
 400aaa4:	1545c83a 	sub	r2,r2,r21
 400aaa8:	29cb803a 	cmpltu	r5,r5,r7
 400aaac:	1145c83a 	sub	r2,r2,r5
 400aab0:	4089c83a 	sub	r4,r8,r2
 400aab4:	003fc706 	br	400a9d4 <__alt_mem_onchip_memory2_0+0xfbfea9d4>
 400aab8:	01000604 	movi	r4,24
 400aabc:	003f1806 	br	400a720 <__alt_mem_onchip_memory2_0+0xfbfea720>
 400aac0:	00800604 	movi	r2,24
 400aac4:	003f3206 	br	400a790 <__alt_mem_onchip_memory2_0+0xfbfea790>
 400aac8:	01000604 	movi	r4,24
 400aacc:	003ed906 	br	400a634 <__alt_mem_onchip_memory2_0+0xfbfea634>
 400aad0:	413fa52e 	bgeu	r8,r4,400a968 <__alt_mem_onchip_memory2_0+0xfbfea968>
 400aad4:	297fff84 	addi	r5,r5,-2
 400aad8:	4551883a 	add	r8,r8,r21
 400aadc:	003fa306 	br	400a96c <__alt_mem_onchip_memory2_0+0xfbfea96c>
 400aae0:	15ff8b2e 	bgeu	r2,r23,400a910 <__alt_mem_onchip_memory2_0+0xfbfea910>
 400aae4:	31bfff84 	addi	r6,r6,-2
 400aae8:	1545883a 	add	r2,r2,r21
 400aaec:	003f8906 	br	400a914 <__alt_mem_onchip_memory2_0+0xfbfea914>
 400aaf0:	24c9883a 	add	r4,r4,r19
 400aaf4:	003eee06 	br	400a6b0 <__alt_mem_onchip_memory2_0+0xfbfea6b0>
 400aaf8:	8005883a 	mov	r2,r16
 400aafc:	003f1706 	br	400a75c <__alt_mem_onchip_memory2_0+0xfbfea75c>
 400ab00:	817fe736 	bltu	r16,r5,400aaa0 <__alt_mem_onchip_memory2_0+0xfbfeaaa0>
 400ab04:	280f883a 	mov	r7,r5
 400ab08:	0009883a 	mov	r4,zero
 400ab0c:	003fb106 	br	400a9d4 <__alt_mem_onchip_memory2_0+0xfbfea9d4>

0400ab10 <__divsi3>:
 400ab10:	20001b16 	blt	r4,zero,400ab80 <__divsi3+0x70>
 400ab14:	000f883a 	mov	r7,zero
 400ab18:	28001616 	blt	r5,zero,400ab74 <__divsi3+0x64>
 400ab1c:	200d883a 	mov	r6,r4
 400ab20:	29001a2e 	bgeu	r5,r4,400ab8c <__divsi3+0x7c>
 400ab24:	00800804 	movi	r2,32
 400ab28:	00c00044 	movi	r3,1
 400ab2c:	00000106 	br	400ab34 <__divsi3+0x24>
 400ab30:	10000d26 	beq	r2,zero,400ab68 <__divsi3+0x58>
 400ab34:	294b883a 	add	r5,r5,r5
 400ab38:	10bfffc4 	addi	r2,r2,-1
 400ab3c:	18c7883a 	add	r3,r3,r3
 400ab40:	293ffb36 	bltu	r5,r4,400ab30 <__alt_mem_onchip_memory2_0+0xfbfeab30>
 400ab44:	0005883a 	mov	r2,zero
 400ab48:	18000726 	beq	r3,zero,400ab68 <__divsi3+0x58>
 400ab4c:	0005883a 	mov	r2,zero
 400ab50:	31400236 	bltu	r6,r5,400ab5c <__divsi3+0x4c>
 400ab54:	314dc83a 	sub	r6,r6,r5
 400ab58:	10c4b03a 	or	r2,r2,r3
 400ab5c:	1806d07a 	srli	r3,r3,1
 400ab60:	280ad07a 	srli	r5,r5,1
 400ab64:	183ffa1e 	bne	r3,zero,400ab50 <__alt_mem_onchip_memory2_0+0xfbfeab50>
 400ab68:	38000126 	beq	r7,zero,400ab70 <__divsi3+0x60>
 400ab6c:	0085c83a 	sub	r2,zero,r2
 400ab70:	f800283a 	ret
 400ab74:	014bc83a 	sub	r5,zero,r5
 400ab78:	39c0005c 	xori	r7,r7,1
 400ab7c:	003fe706 	br	400ab1c <__alt_mem_onchip_memory2_0+0xfbfeab1c>
 400ab80:	0109c83a 	sub	r4,zero,r4
 400ab84:	01c00044 	movi	r7,1
 400ab88:	003fe306 	br	400ab18 <__alt_mem_onchip_memory2_0+0xfbfeab18>
 400ab8c:	00c00044 	movi	r3,1
 400ab90:	003fee06 	br	400ab4c <__alt_mem_onchip_memory2_0+0xfbfeab4c>

0400ab94 <__modsi3>:
 400ab94:	20001716 	blt	r4,zero,400abf4 <__modsi3+0x60>
 400ab98:	000f883a 	mov	r7,zero
 400ab9c:	2005883a 	mov	r2,r4
 400aba0:	28001216 	blt	r5,zero,400abec <__modsi3+0x58>
 400aba4:	2900162e 	bgeu	r5,r4,400ac00 <__modsi3+0x6c>
 400aba8:	01800804 	movi	r6,32
 400abac:	00c00044 	movi	r3,1
 400abb0:	00000106 	br	400abb8 <__modsi3+0x24>
 400abb4:	30000a26 	beq	r6,zero,400abe0 <__modsi3+0x4c>
 400abb8:	294b883a 	add	r5,r5,r5
 400abbc:	31bfffc4 	addi	r6,r6,-1
 400abc0:	18c7883a 	add	r3,r3,r3
 400abc4:	293ffb36 	bltu	r5,r4,400abb4 <__alt_mem_onchip_memory2_0+0xfbfeabb4>
 400abc8:	18000526 	beq	r3,zero,400abe0 <__modsi3+0x4c>
 400abcc:	1806d07a 	srli	r3,r3,1
 400abd0:	11400136 	bltu	r2,r5,400abd8 <__modsi3+0x44>
 400abd4:	1145c83a 	sub	r2,r2,r5
 400abd8:	280ad07a 	srli	r5,r5,1
 400abdc:	183ffb1e 	bne	r3,zero,400abcc <__alt_mem_onchip_memory2_0+0xfbfeabcc>
 400abe0:	38000126 	beq	r7,zero,400abe8 <__modsi3+0x54>
 400abe4:	0085c83a 	sub	r2,zero,r2
 400abe8:	f800283a 	ret
 400abec:	014bc83a 	sub	r5,zero,r5
 400abf0:	003fec06 	br	400aba4 <__alt_mem_onchip_memory2_0+0xfbfeaba4>
 400abf4:	0109c83a 	sub	r4,zero,r4
 400abf8:	01c00044 	movi	r7,1
 400abfc:	003fe706 	br	400ab9c <__alt_mem_onchip_memory2_0+0xfbfeab9c>
 400ac00:	00c00044 	movi	r3,1
 400ac04:	003ff106 	br	400abcc <__alt_mem_onchip_memory2_0+0xfbfeabcc>

0400ac08 <__udivsi3>:
 400ac08:	200d883a 	mov	r6,r4
 400ac0c:	2900152e 	bgeu	r5,r4,400ac64 <__udivsi3+0x5c>
 400ac10:	28001416 	blt	r5,zero,400ac64 <__udivsi3+0x5c>
 400ac14:	00800804 	movi	r2,32
 400ac18:	00c00044 	movi	r3,1
 400ac1c:	00000206 	br	400ac28 <__udivsi3+0x20>
 400ac20:	10000e26 	beq	r2,zero,400ac5c <__udivsi3+0x54>
 400ac24:	28000516 	blt	r5,zero,400ac3c <__udivsi3+0x34>
 400ac28:	294b883a 	add	r5,r5,r5
 400ac2c:	10bfffc4 	addi	r2,r2,-1
 400ac30:	18c7883a 	add	r3,r3,r3
 400ac34:	293ffa36 	bltu	r5,r4,400ac20 <__alt_mem_onchip_memory2_0+0xfbfeac20>
 400ac38:	18000826 	beq	r3,zero,400ac5c <__udivsi3+0x54>
 400ac3c:	0005883a 	mov	r2,zero
 400ac40:	31400236 	bltu	r6,r5,400ac4c <__udivsi3+0x44>
 400ac44:	314dc83a 	sub	r6,r6,r5
 400ac48:	10c4b03a 	or	r2,r2,r3
 400ac4c:	1806d07a 	srli	r3,r3,1
 400ac50:	280ad07a 	srli	r5,r5,1
 400ac54:	183ffa1e 	bne	r3,zero,400ac40 <__alt_mem_onchip_memory2_0+0xfbfeac40>
 400ac58:	f800283a 	ret
 400ac5c:	0005883a 	mov	r2,zero
 400ac60:	f800283a 	ret
 400ac64:	00c00044 	movi	r3,1
 400ac68:	003ff406 	br	400ac3c <__alt_mem_onchip_memory2_0+0xfbfeac3c>

0400ac6c <__umodsi3>:
 400ac6c:	2005883a 	mov	r2,r4
 400ac70:	2900122e 	bgeu	r5,r4,400acbc <__umodsi3+0x50>
 400ac74:	28001116 	blt	r5,zero,400acbc <__umodsi3+0x50>
 400ac78:	01800804 	movi	r6,32
 400ac7c:	00c00044 	movi	r3,1
 400ac80:	00000206 	br	400ac8c <__umodsi3+0x20>
 400ac84:	30000c26 	beq	r6,zero,400acb8 <__umodsi3+0x4c>
 400ac88:	28000516 	blt	r5,zero,400aca0 <__umodsi3+0x34>
 400ac8c:	294b883a 	add	r5,r5,r5
 400ac90:	31bfffc4 	addi	r6,r6,-1
 400ac94:	18c7883a 	add	r3,r3,r3
 400ac98:	293ffa36 	bltu	r5,r4,400ac84 <__alt_mem_onchip_memory2_0+0xfbfeac84>
 400ac9c:	18000626 	beq	r3,zero,400acb8 <__umodsi3+0x4c>
 400aca0:	1806d07a 	srli	r3,r3,1
 400aca4:	11400136 	bltu	r2,r5,400acac <__umodsi3+0x40>
 400aca8:	1145c83a 	sub	r2,r2,r5
 400acac:	280ad07a 	srli	r5,r5,1
 400acb0:	183ffb1e 	bne	r3,zero,400aca0 <__alt_mem_onchip_memory2_0+0xfbfeaca0>
 400acb4:	f800283a 	ret
 400acb8:	f800283a 	ret
 400acbc:	00c00044 	movi	r3,1
 400acc0:	003ff706 	br	400aca0 <__alt_mem_onchip_memory2_0+0xfbfeaca0>

0400acc4 <__adddf3>:
 400acc4:	02c00434 	movhi	r11,16
 400acc8:	5affffc4 	addi	r11,r11,-1
 400accc:	2806d7fa 	srli	r3,r5,31
 400acd0:	2ad4703a 	and	r10,r5,r11
 400acd4:	3ad2703a 	and	r9,r7,r11
 400acd8:	3804d53a 	srli	r2,r7,20
 400acdc:	3018d77a 	srli	r12,r6,29
 400ace0:	280ad53a 	srli	r5,r5,20
 400ace4:	501490fa 	slli	r10,r10,3
 400ace8:	2010d77a 	srli	r8,r4,29
 400acec:	481290fa 	slli	r9,r9,3
 400acf0:	380ed7fa 	srli	r7,r7,31
 400acf4:	defffb04 	addi	sp,sp,-20
 400acf8:	dc800215 	stw	r18,8(sp)
 400acfc:	dc400115 	stw	r17,4(sp)
 400ad00:	dc000015 	stw	r16,0(sp)
 400ad04:	dfc00415 	stw	ra,16(sp)
 400ad08:	dcc00315 	stw	r19,12(sp)
 400ad0c:	1c803fcc 	andi	r18,r3,255
 400ad10:	2c01ffcc 	andi	r16,r5,2047
 400ad14:	5210b03a 	or	r8,r10,r8
 400ad18:	202290fa 	slli	r17,r4,3
 400ad1c:	1081ffcc 	andi	r2,r2,2047
 400ad20:	4b12b03a 	or	r9,r9,r12
 400ad24:	300c90fa 	slli	r6,r6,3
 400ad28:	91c07526 	beq	r18,r7,400af00 <__adddf3+0x23c>
 400ad2c:	8087c83a 	sub	r3,r16,r2
 400ad30:	00c0ab0e 	bge	zero,r3,400afe0 <__adddf3+0x31c>
 400ad34:	10002a1e 	bne	r2,zero,400ade0 <__adddf3+0x11c>
 400ad38:	4984b03a 	or	r2,r9,r6
 400ad3c:	1000961e 	bne	r2,zero,400af98 <__adddf3+0x2d4>
 400ad40:	888001cc 	andi	r2,r17,7
 400ad44:	10000726 	beq	r2,zero,400ad64 <__adddf3+0xa0>
 400ad48:	888003cc 	andi	r2,r17,15
 400ad4c:	00c00104 	movi	r3,4
 400ad50:	10c00426 	beq	r2,r3,400ad64 <__adddf3+0xa0>
 400ad54:	88c7883a 	add	r3,r17,r3
 400ad58:	1c63803a 	cmpltu	r17,r3,r17
 400ad5c:	4451883a 	add	r8,r8,r17
 400ad60:	1823883a 	mov	r17,r3
 400ad64:	4080202c 	andhi	r2,r8,128
 400ad68:	10005926 	beq	r2,zero,400aed0 <__adddf3+0x20c>
 400ad6c:	84000044 	addi	r16,r16,1
 400ad70:	0081ffc4 	movi	r2,2047
 400ad74:	8080ba26 	beq	r16,r2,400b060 <__adddf3+0x39c>
 400ad78:	00bfe034 	movhi	r2,65408
 400ad7c:	10bfffc4 	addi	r2,r2,-1
 400ad80:	4090703a 	and	r8,r8,r2
 400ad84:	4004977a 	slli	r2,r8,29
 400ad88:	4010927a 	slli	r8,r8,9
 400ad8c:	8822d0fa 	srli	r17,r17,3
 400ad90:	8401ffcc 	andi	r16,r16,2047
 400ad94:	4010d33a 	srli	r8,r8,12
 400ad98:	9007883a 	mov	r3,r18
 400ad9c:	1444b03a 	or	r2,r2,r17
 400ada0:	8401ffcc 	andi	r16,r16,2047
 400ada4:	8020953a 	slli	r16,r16,20
 400ada8:	18c03fcc 	andi	r3,r3,255
 400adac:	01000434 	movhi	r4,16
 400adb0:	213fffc4 	addi	r4,r4,-1
 400adb4:	180697fa 	slli	r3,r3,31
 400adb8:	4110703a 	and	r8,r8,r4
 400adbc:	4410b03a 	or	r8,r8,r16
 400adc0:	40c6b03a 	or	r3,r8,r3
 400adc4:	dfc00417 	ldw	ra,16(sp)
 400adc8:	dcc00317 	ldw	r19,12(sp)
 400adcc:	dc800217 	ldw	r18,8(sp)
 400add0:	dc400117 	ldw	r17,4(sp)
 400add4:	dc000017 	ldw	r16,0(sp)
 400add8:	dec00504 	addi	sp,sp,20
 400addc:	f800283a 	ret
 400ade0:	0081ffc4 	movi	r2,2047
 400ade4:	80bfd626 	beq	r16,r2,400ad40 <__alt_mem_onchip_memory2_0+0xfbfead40>
 400ade8:	4a402034 	orhi	r9,r9,128
 400adec:	00800e04 	movi	r2,56
 400adf0:	10c09f16 	blt	r2,r3,400b070 <__adddf3+0x3ac>
 400adf4:	008007c4 	movi	r2,31
 400adf8:	10c0c216 	blt	r2,r3,400b104 <__adddf3+0x440>
 400adfc:	00800804 	movi	r2,32
 400ae00:	10c5c83a 	sub	r2,r2,r3
 400ae04:	488a983a 	sll	r5,r9,r2
 400ae08:	30c8d83a 	srl	r4,r6,r3
 400ae0c:	3084983a 	sll	r2,r6,r2
 400ae10:	48c6d83a 	srl	r3,r9,r3
 400ae14:	290cb03a 	or	r6,r5,r4
 400ae18:	1004c03a 	cmpne	r2,r2,zero
 400ae1c:	308cb03a 	or	r6,r6,r2
 400ae20:	898dc83a 	sub	r6,r17,r6
 400ae24:	89a3803a 	cmpltu	r17,r17,r6
 400ae28:	40d1c83a 	sub	r8,r8,r3
 400ae2c:	4451c83a 	sub	r8,r8,r17
 400ae30:	3023883a 	mov	r17,r6
 400ae34:	4080202c 	andhi	r2,r8,128
 400ae38:	10002326 	beq	r2,zero,400aec8 <__adddf3+0x204>
 400ae3c:	04c02034 	movhi	r19,128
 400ae40:	9cffffc4 	addi	r19,r19,-1
 400ae44:	44e6703a 	and	r19,r8,r19
 400ae48:	98007626 	beq	r19,zero,400b024 <__adddf3+0x360>
 400ae4c:	9809883a 	mov	r4,r19
 400ae50:	400d2c80 	call	400d2c8 <__clzsi2>
 400ae54:	10fffe04 	addi	r3,r2,-8
 400ae58:	010007c4 	movi	r4,31
 400ae5c:	20c07716 	blt	r4,r3,400b03c <__adddf3+0x378>
 400ae60:	00800804 	movi	r2,32
 400ae64:	10c5c83a 	sub	r2,r2,r3
 400ae68:	8884d83a 	srl	r2,r17,r2
 400ae6c:	98d0983a 	sll	r8,r19,r3
 400ae70:	88e2983a 	sll	r17,r17,r3
 400ae74:	1204b03a 	or	r2,r2,r8
 400ae78:	1c007416 	blt	r3,r16,400b04c <__adddf3+0x388>
 400ae7c:	1c21c83a 	sub	r16,r3,r16
 400ae80:	82000044 	addi	r8,r16,1
 400ae84:	00c007c4 	movi	r3,31
 400ae88:	1a009116 	blt	r3,r8,400b0d0 <__adddf3+0x40c>
 400ae8c:	00c00804 	movi	r3,32
 400ae90:	1a07c83a 	sub	r3,r3,r8
 400ae94:	8a08d83a 	srl	r4,r17,r8
 400ae98:	88e2983a 	sll	r17,r17,r3
 400ae9c:	10c6983a 	sll	r3,r2,r3
 400aea0:	1210d83a 	srl	r8,r2,r8
 400aea4:	8804c03a 	cmpne	r2,r17,zero
 400aea8:	1906b03a 	or	r3,r3,r4
 400aeac:	18a2b03a 	or	r17,r3,r2
 400aeb0:	0021883a 	mov	r16,zero
 400aeb4:	003fa206 	br	400ad40 <__alt_mem_onchip_memory2_0+0xfbfead40>
 400aeb8:	1890b03a 	or	r8,r3,r2
 400aebc:	40017d26 	beq	r8,zero,400b4b4 <__adddf3+0x7f0>
 400aec0:	1011883a 	mov	r8,r2
 400aec4:	1823883a 	mov	r17,r3
 400aec8:	888001cc 	andi	r2,r17,7
 400aecc:	103f9e1e 	bne	r2,zero,400ad48 <__alt_mem_onchip_memory2_0+0xfbfead48>
 400aed0:	4004977a 	slli	r2,r8,29
 400aed4:	8822d0fa 	srli	r17,r17,3
 400aed8:	4010d0fa 	srli	r8,r8,3
 400aedc:	9007883a 	mov	r3,r18
 400aee0:	1444b03a 	or	r2,r2,r17
 400aee4:	0101ffc4 	movi	r4,2047
 400aee8:	81002426 	beq	r16,r4,400af7c <__adddf3+0x2b8>
 400aeec:	8120703a 	and	r16,r16,r4
 400aef0:	01000434 	movhi	r4,16
 400aef4:	213fffc4 	addi	r4,r4,-1
 400aef8:	4110703a 	and	r8,r8,r4
 400aefc:	003fa806 	br	400ada0 <__alt_mem_onchip_memory2_0+0xfbfeada0>
 400af00:	8089c83a 	sub	r4,r16,r2
 400af04:	01005e0e 	bge	zero,r4,400b080 <__adddf3+0x3bc>
 400af08:	10002b26 	beq	r2,zero,400afb8 <__adddf3+0x2f4>
 400af0c:	0081ffc4 	movi	r2,2047
 400af10:	80bf8b26 	beq	r16,r2,400ad40 <__alt_mem_onchip_memory2_0+0xfbfead40>
 400af14:	4a402034 	orhi	r9,r9,128
 400af18:	00800e04 	movi	r2,56
 400af1c:	1100a40e 	bge	r2,r4,400b1b0 <__adddf3+0x4ec>
 400af20:	498cb03a 	or	r6,r9,r6
 400af24:	300ac03a 	cmpne	r5,r6,zero
 400af28:	0013883a 	mov	r9,zero
 400af2c:	2c4b883a 	add	r5,r5,r17
 400af30:	2c63803a 	cmpltu	r17,r5,r17
 400af34:	4a11883a 	add	r8,r9,r8
 400af38:	8a11883a 	add	r8,r17,r8
 400af3c:	2823883a 	mov	r17,r5
 400af40:	4080202c 	andhi	r2,r8,128
 400af44:	103fe026 	beq	r2,zero,400aec8 <__alt_mem_onchip_memory2_0+0xfbfeaec8>
 400af48:	84000044 	addi	r16,r16,1
 400af4c:	0081ffc4 	movi	r2,2047
 400af50:	8080d226 	beq	r16,r2,400b29c <__adddf3+0x5d8>
 400af54:	00bfe034 	movhi	r2,65408
 400af58:	10bfffc4 	addi	r2,r2,-1
 400af5c:	4090703a 	and	r8,r8,r2
 400af60:	880ad07a 	srli	r5,r17,1
 400af64:	400897fa 	slli	r4,r8,31
 400af68:	88c0004c 	andi	r3,r17,1
 400af6c:	28e2b03a 	or	r17,r5,r3
 400af70:	4010d07a 	srli	r8,r8,1
 400af74:	2462b03a 	or	r17,r4,r17
 400af78:	003f7106 	br	400ad40 <__alt_mem_onchip_memory2_0+0xfbfead40>
 400af7c:	4088b03a 	or	r4,r8,r2
 400af80:	20014526 	beq	r4,zero,400b498 <__adddf3+0x7d4>
 400af84:	01000434 	movhi	r4,16
 400af88:	42000234 	orhi	r8,r8,8
 400af8c:	213fffc4 	addi	r4,r4,-1
 400af90:	4110703a 	and	r8,r8,r4
 400af94:	003f8206 	br	400ada0 <__alt_mem_onchip_memory2_0+0xfbfeada0>
 400af98:	18ffffc4 	addi	r3,r3,-1
 400af9c:	1800491e 	bne	r3,zero,400b0c4 <__adddf3+0x400>
 400afa0:	898bc83a 	sub	r5,r17,r6
 400afa4:	8963803a 	cmpltu	r17,r17,r5
 400afa8:	4251c83a 	sub	r8,r8,r9
 400afac:	4451c83a 	sub	r8,r8,r17
 400afb0:	2823883a 	mov	r17,r5
 400afb4:	003f9f06 	br	400ae34 <__alt_mem_onchip_memory2_0+0xfbfeae34>
 400afb8:	4984b03a 	or	r2,r9,r6
 400afbc:	103f6026 	beq	r2,zero,400ad40 <__alt_mem_onchip_memory2_0+0xfbfead40>
 400afc0:	213fffc4 	addi	r4,r4,-1
 400afc4:	2000931e 	bne	r4,zero,400b214 <__adddf3+0x550>
 400afc8:	898d883a 	add	r6,r17,r6
 400afcc:	3463803a 	cmpltu	r17,r6,r17
 400afd0:	4251883a 	add	r8,r8,r9
 400afd4:	8a11883a 	add	r8,r17,r8
 400afd8:	3023883a 	mov	r17,r6
 400afdc:	003fd806 	br	400af40 <__alt_mem_onchip_memory2_0+0xfbfeaf40>
 400afe0:	1800541e 	bne	r3,zero,400b134 <__adddf3+0x470>
 400afe4:	80800044 	addi	r2,r16,1
 400afe8:	1081ffcc 	andi	r2,r2,2047
 400afec:	00c00044 	movi	r3,1
 400aff0:	1880a00e 	bge	r3,r2,400b274 <__adddf3+0x5b0>
 400aff4:	8989c83a 	sub	r4,r17,r6
 400aff8:	8905803a 	cmpltu	r2,r17,r4
 400affc:	4267c83a 	sub	r19,r8,r9
 400b000:	98a7c83a 	sub	r19,r19,r2
 400b004:	9880202c 	andhi	r2,r19,128
 400b008:	10006326 	beq	r2,zero,400b198 <__adddf3+0x4d4>
 400b00c:	3463c83a 	sub	r17,r6,r17
 400b010:	4a07c83a 	sub	r3,r9,r8
 400b014:	344d803a 	cmpltu	r6,r6,r17
 400b018:	19a7c83a 	sub	r19,r3,r6
 400b01c:	3825883a 	mov	r18,r7
 400b020:	983f8a1e 	bne	r19,zero,400ae4c <__alt_mem_onchip_memory2_0+0xfbfeae4c>
 400b024:	8809883a 	mov	r4,r17
 400b028:	400d2c80 	call	400d2c8 <__clzsi2>
 400b02c:	10800804 	addi	r2,r2,32
 400b030:	10fffe04 	addi	r3,r2,-8
 400b034:	010007c4 	movi	r4,31
 400b038:	20ff890e 	bge	r4,r3,400ae60 <__alt_mem_onchip_memory2_0+0xfbfeae60>
 400b03c:	10bff604 	addi	r2,r2,-40
 400b040:	8884983a 	sll	r2,r17,r2
 400b044:	0023883a 	mov	r17,zero
 400b048:	1c3f8c0e 	bge	r3,r16,400ae7c <__alt_mem_onchip_memory2_0+0xfbfeae7c>
 400b04c:	023fe034 	movhi	r8,65408
 400b050:	423fffc4 	addi	r8,r8,-1
 400b054:	80e1c83a 	sub	r16,r16,r3
 400b058:	1210703a 	and	r8,r2,r8
 400b05c:	003f3806 	br	400ad40 <__alt_mem_onchip_memory2_0+0xfbfead40>
 400b060:	9007883a 	mov	r3,r18
 400b064:	0011883a 	mov	r8,zero
 400b068:	0005883a 	mov	r2,zero
 400b06c:	003f4c06 	br	400ada0 <__alt_mem_onchip_memory2_0+0xfbfeada0>
 400b070:	498cb03a 	or	r6,r9,r6
 400b074:	300cc03a 	cmpne	r6,r6,zero
 400b078:	0007883a 	mov	r3,zero
 400b07c:	003f6806 	br	400ae20 <__alt_mem_onchip_memory2_0+0xfbfeae20>
 400b080:	20009c1e 	bne	r4,zero,400b2f4 <__adddf3+0x630>
 400b084:	80800044 	addi	r2,r16,1
 400b088:	1141ffcc 	andi	r5,r2,2047
 400b08c:	01000044 	movi	r4,1
 400b090:	2140670e 	bge	r4,r5,400b230 <__adddf3+0x56c>
 400b094:	0101ffc4 	movi	r4,2047
 400b098:	11007f26 	beq	r2,r4,400b298 <__adddf3+0x5d4>
 400b09c:	898d883a 	add	r6,r17,r6
 400b0a0:	4247883a 	add	r3,r8,r9
 400b0a4:	3451803a 	cmpltu	r8,r6,r17
 400b0a8:	40d1883a 	add	r8,r8,r3
 400b0ac:	402297fa 	slli	r17,r8,31
 400b0b0:	300cd07a 	srli	r6,r6,1
 400b0b4:	4010d07a 	srli	r8,r8,1
 400b0b8:	1021883a 	mov	r16,r2
 400b0bc:	89a2b03a 	or	r17,r17,r6
 400b0c0:	003f1f06 	br	400ad40 <__alt_mem_onchip_memory2_0+0xfbfead40>
 400b0c4:	0081ffc4 	movi	r2,2047
 400b0c8:	80bf481e 	bne	r16,r2,400adec <__alt_mem_onchip_memory2_0+0xfbfeadec>
 400b0cc:	003f1c06 	br	400ad40 <__alt_mem_onchip_memory2_0+0xfbfead40>
 400b0d0:	843ff844 	addi	r16,r16,-31
 400b0d4:	01000804 	movi	r4,32
 400b0d8:	1406d83a 	srl	r3,r2,r16
 400b0dc:	41005026 	beq	r8,r4,400b220 <__adddf3+0x55c>
 400b0e0:	01001004 	movi	r4,64
 400b0e4:	2211c83a 	sub	r8,r4,r8
 400b0e8:	1204983a 	sll	r2,r2,r8
 400b0ec:	88a2b03a 	or	r17,r17,r2
 400b0f0:	8822c03a 	cmpne	r17,r17,zero
 400b0f4:	1c62b03a 	or	r17,r3,r17
 400b0f8:	0011883a 	mov	r8,zero
 400b0fc:	0021883a 	mov	r16,zero
 400b100:	003f7106 	br	400aec8 <__alt_mem_onchip_memory2_0+0xfbfeaec8>
 400b104:	193ff804 	addi	r4,r3,-32
 400b108:	00800804 	movi	r2,32
 400b10c:	4908d83a 	srl	r4,r9,r4
 400b110:	18804526 	beq	r3,r2,400b228 <__adddf3+0x564>
 400b114:	00801004 	movi	r2,64
 400b118:	10c5c83a 	sub	r2,r2,r3
 400b11c:	4886983a 	sll	r3,r9,r2
 400b120:	198cb03a 	or	r6,r3,r6
 400b124:	300cc03a 	cmpne	r6,r6,zero
 400b128:	218cb03a 	or	r6,r4,r6
 400b12c:	0007883a 	mov	r3,zero
 400b130:	003f3b06 	br	400ae20 <__alt_mem_onchip_memory2_0+0xfbfeae20>
 400b134:	80002a26 	beq	r16,zero,400b1e0 <__adddf3+0x51c>
 400b138:	0101ffc4 	movi	r4,2047
 400b13c:	11006826 	beq	r2,r4,400b2e0 <__adddf3+0x61c>
 400b140:	00c7c83a 	sub	r3,zero,r3
 400b144:	42002034 	orhi	r8,r8,128
 400b148:	01000e04 	movi	r4,56
 400b14c:	20c07c16 	blt	r4,r3,400b340 <__adddf3+0x67c>
 400b150:	010007c4 	movi	r4,31
 400b154:	20c0da16 	blt	r4,r3,400b4c0 <__adddf3+0x7fc>
 400b158:	01000804 	movi	r4,32
 400b15c:	20c9c83a 	sub	r4,r4,r3
 400b160:	4114983a 	sll	r10,r8,r4
 400b164:	88cad83a 	srl	r5,r17,r3
 400b168:	8908983a 	sll	r4,r17,r4
 400b16c:	40c6d83a 	srl	r3,r8,r3
 400b170:	5162b03a 	or	r17,r10,r5
 400b174:	2008c03a 	cmpne	r4,r4,zero
 400b178:	8922b03a 	or	r17,r17,r4
 400b17c:	3463c83a 	sub	r17,r6,r17
 400b180:	48c7c83a 	sub	r3,r9,r3
 400b184:	344d803a 	cmpltu	r6,r6,r17
 400b188:	1991c83a 	sub	r8,r3,r6
 400b18c:	1021883a 	mov	r16,r2
 400b190:	3825883a 	mov	r18,r7
 400b194:	003f2706 	br	400ae34 <__alt_mem_onchip_memory2_0+0xfbfeae34>
 400b198:	24d0b03a 	or	r8,r4,r19
 400b19c:	40001b1e 	bne	r8,zero,400b20c <__adddf3+0x548>
 400b1a0:	0005883a 	mov	r2,zero
 400b1a4:	0007883a 	mov	r3,zero
 400b1a8:	0021883a 	mov	r16,zero
 400b1ac:	003f4d06 	br	400aee4 <__alt_mem_onchip_memory2_0+0xfbfeaee4>
 400b1b0:	008007c4 	movi	r2,31
 400b1b4:	11003c16 	blt	r2,r4,400b2a8 <__adddf3+0x5e4>
 400b1b8:	00800804 	movi	r2,32
 400b1bc:	1105c83a 	sub	r2,r2,r4
 400b1c0:	488e983a 	sll	r7,r9,r2
 400b1c4:	310ad83a 	srl	r5,r6,r4
 400b1c8:	3084983a 	sll	r2,r6,r2
 400b1cc:	4912d83a 	srl	r9,r9,r4
 400b1d0:	394ab03a 	or	r5,r7,r5
 400b1d4:	1004c03a 	cmpne	r2,r2,zero
 400b1d8:	288ab03a 	or	r5,r5,r2
 400b1dc:	003f5306 	br	400af2c <__alt_mem_onchip_memory2_0+0xfbfeaf2c>
 400b1e0:	4448b03a 	or	r4,r8,r17
 400b1e4:	20003e26 	beq	r4,zero,400b2e0 <__adddf3+0x61c>
 400b1e8:	00c6303a 	nor	r3,zero,r3
 400b1ec:	18003a1e 	bne	r3,zero,400b2d8 <__adddf3+0x614>
 400b1f0:	3463c83a 	sub	r17,r6,r17
 400b1f4:	4a07c83a 	sub	r3,r9,r8
 400b1f8:	344d803a 	cmpltu	r6,r6,r17
 400b1fc:	1991c83a 	sub	r8,r3,r6
 400b200:	1021883a 	mov	r16,r2
 400b204:	3825883a 	mov	r18,r7
 400b208:	003f0a06 	br	400ae34 <__alt_mem_onchip_memory2_0+0xfbfeae34>
 400b20c:	2023883a 	mov	r17,r4
 400b210:	003f0d06 	br	400ae48 <__alt_mem_onchip_memory2_0+0xfbfeae48>
 400b214:	0081ffc4 	movi	r2,2047
 400b218:	80bf3f1e 	bne	r16,r2,400af18 <__alt_mem_onchip_memory2_0+0xfbfeaf18>
 400b21c:	003ec806 	br	400ad40 <__alt_mem_onchip_memory2_0+0xfbfead40>
 400b220:	0005883a 	mov	r2,zero
 400b224:	003fb106 	br	400b0ec <__alt_mem_onchip_memory2_0+0xfbfeb0ec>
 400b228:	0007883a 	mov	r3,zero
 400b22c:	003fbc06 	br	400b120 <__alt_mem_onchip_memory2_0+0xfbfeb120>
 400b230:	4444b03a 	or	r2,r8,r17
 400b234:	8000871e 	bne	r16,zero,400b454 <__adddf3+0x790>
 400b238:	1000ba26 	beq	r2,zero,400b524 <__adddf3+0x860>
 400b23c:	4984b03a 	or	r2,r9,r6
 400b240:	103ebf26 	beq	r2,zero,400ad40 <__alt_mem_onchip_memory2_0+0xfbfead40>
 400b244:	8985883a 	add	r2,r17,r6
 400b248:	4247883a 	add	r3,r8,r9
 400b24c:	1451803a 	cmpltu	r8,r2,r17
 400b250:	40d1883a 	add	r8,r8,r3
 400b254:	40c0202c 	andhi	r3,r8,128
 400b258:	1023883a 	mov	r17,r2
 400b25c:	183f1a26 	beq	r3,zero,400aec8 <__alt_mem_onchip_memory2_0+0xfbfeaec8>
 400b260:	00bfe034 	movhi	r2,65408
 400b264:	10bfffc4 	addi	r2,r2,-1
 400b268:	2021883a 	mov	r16,r4
 400b26c:	4090703a 	and	r8,r8,r2
 400b270:	003eb306 	br	400ad40 <__alt_mem_onchip_memory2_0+0xfbfead40>
 400b274:	4444b03a 	or	r2,r8,r17
 400b278:	8000291e 	bne	r16,zero,400b320 <__adddf3+0x65c>
 400b27c:	10004b1e 	bne	r2,zero,400b3ac <__adddf3+0x6e8>
 400b280:	4990b03a 	or	r8,r9,r6
 400b284:	40008b26 	beq	r8,zero,400b4b4 <__adddf3+0x7f0>
 400b288:	4811883a 	mov	r8,r9
 400b28c:	3023883a 	mov	r17,r6
 400b290:	3825883a 	mov	r18,r7
 400b294:	003eaa06 	br	400ad40 <__alt_mem_onchip_memory2_0+0xfbfead40>
 400b298:	1021883a 	mov	r16,r2
 400b29c:	0011883a 	mov	r8,zero
 400b2a0:	0005883a 	mov	r2,zero
 400b2a4:	003f0f06 	br	400aee4 <__alt_mem_onchip_memory2_0+0xfbfeaee4>
 400b2a8:	217ff804 	addi	r5,r4,-32
 400b2ac:	00800804 	movi	r2,32
 400b2b0:	494ad83a 	srl	r5,r9,r5
 400b2b4:	20807d26 	beq	r4,r2,400b4ac <__adddf3+0x7e8>
 400b2b8:	00801004 	movi	r2,64
 400b2bc:	1109c83a 	sub	r4,r2,r4
 400b2c0:	4912983a 	sll	r9,r9,r4
 400b2c4:	498cb03a 	or	r6,r9,r6
 400b2c8:	300cc03a 	cmpne	r6,r6,zero
 400b2cc:	298ab03a 	or	r5,r5,r6
 400b2d0:	0013883a 	mov	r9,zero
 400b2d4:	003f1506 	br	400af2c <__alt_mem_onchip_memory2_0+0xfbfeaf2c>
 400b2d8:	0101ffc4 	movi	r4,2047
 400b2dc:	113f9a1e 	bne	r2,r4,400b148 <__alt_mem_onchip_memory2_0+0xfbfeb148>
 400b2e0:	4811883a 	mov	r8,r9
 400b2e4:	3023883a 	mov	r17,r6
 400b2e8:	1021883a 	mov	r16,r2
 400b2ec:	3825883a 	mov	r18,r7
 400b2f0:	003e9306 	br	400ad40 <__alt_mem_onchip_memory2_0+0xfbfead40>
 400b2f4:	8000161e 	bne	r16,zero,400b350 <__adddf3+0x68c>
 400b2f8:	444ab03a 	or	r5,r8,r17
 400b2fc:	28005126 	beq	r5,zero,400b444 <__adddf3+0x780>
 400b300:	0108303a 	nor	r4,zero,r4
 400b304:	20004d1e 	bne	r4,zero,400b43c <__adddf3+0x778>
 400b308:	89a3883a 	add	r17,r17,r6
 400b30c:	4253883a 	add	r9,r8,r9
 400b310:	898d803a 	cmpltu	r6,r17,r6
 400b314:	3251883a 	add	r8,r6,r9
 400b318:	1021883a 	mov	r16,r2
 400b31c:	003f0806 	br	400af40 <__alt_mem_onchip_memory2_0+0xfbfeaf40>
 400b320:	1000301e 	bne	r2,zero,400b3e4 <__adddf3+0x720>
 400b324:	4984b03a 	or	r2,r9,r6
 400b328:	10007126 	beq	r2,zero,400b4f0 <__adddf3+0x82c>
 400b32c:	4811883a 	mov	r8,r9
 400b330:	3023883a 	mov	r17,r6
 400b334:	3825883a 	mov	r18,r7
 400b338:	0401ffc4 	movi	r16,2047
 400b33c:	003e8006 	br	400ad40 <__alt_mem_onchip_memory2_0+0xfbfead40>
 400b340:	4462b03a 	or	r17,r8,r17
 400b344:	8822c03a 	cmpne	r17,r17,zero
 400b348:	0007883a 	mov	r3,zero
 400b34c:	003f8b06 	br	400b17c <__alt_mem_onchip_memory2_0+0xfbfeb17c>
 400b350:	0141ffc4 	movi	r5,2047
 400b354:	11403b26 	beq	r2,r5,400b444 <__adddf3+0x780>
 400b358:	0109c83a 	sub	r4,zero,r4
 400b35c:	42002034 	orhi	r8,r8,128
 400b360:	01400e04 	movi	r5,56
 400b364:	29006716 	blt	r5,r4,400b504 <__adddf3+0x840>
 400b368:	014007c4 	movi	r5,31
 400b36c:	29007016 	blt	r5,r4,400b530 <__adddf3+0x86c>
 400b370:	01400804 	movi	r5,32
 400b374:	290bc83a 	sub	r5,r5,r4
 400b378:	4154983a 	sll	r10,r8,r5
 400b37c:	890ed83a 	srl	r7,r17,r4
 400b380:	894a983a 	sll	r5,r17,r5
 400b384:	4108d83a 	srl	r4,r8,r4
 400b388:	51e2b03a 	or	r17,r10,r7
 400b38c:	280ac03a 	cmpne	r5,r5,zero
 400b390:	8962b03a 	or	r17,r17,r5
 400b394:	89a3883a 	add	r17,r17,r6
 400b398:	2253883a 	add	r9,r4,r9
 400b39c:	898d803a 	cmpltu	r6,r17,r6
 400b3a0:	3251883a 	add	r8,r6,r9
 400b3a4:	1021883a 	mov	r16,r2
 400b3a8:	003ee506 	br	400af40 <__alt_mem_onchip_memory2_0+0xfbfeaf40>
 400b3ac:	4984b03a 	or	r2,r9,r6
 400b3b0:	103e6326 	beq	r2,zero,400ad40 <__alt_mem_onchip_memory2_0+0xfbfead40>
 400b3b4:	8987c83a 	sub	r3,r17,r6
 400b3b8:	88c9803a 	cmpltu	r4,r17,r3
 400b3bc:	4245c83a 	sub	r2,r8,r9
 400b3c0:	1105c83a 	sub	r2,r2,r4
 400b3c4:	1100202c 	andhi	r4,r2,128
 400b3c8:	203ebb26 	beq	r4,zero,400aeb8 <__alt_mem_onchip_memory2_0+0xfbfeaeb8>
 400b3cc:	3463c83a 	sub	r17,r6,r17
 400b3d0:	4a07c83a 	sub	r3,r9,r8
 400b3d4:	344d803a 	cmpltu	r6,r6,r17
 400b3d8:	1991c83a 	sub	r8,r3,r6
 400b3dc:	3825883a 	mov	r18,r7
 400b3e0:	003e5706 	br	400ad40 <__alt_mem_onchip_memory2_0+0xfbfead40>
 400b3e4:	4984b03a 	or	r2,r9,r6
 400b3e8:	10002e26 	beq	r2,zero,400b4a4 <__adddf3+0x7e0>
 400b3ec:	4004d0fa 	srli	r2,r8,3
 400b3f0:	8822d0fa 	srli	r17,r17,3
 400b3f4:	4010977a 	slli	r8,r8,29
 400b3f8:	10c0022c 	andhi	r3,r2,8
 400b3fc:	4462b03a 	or	r17,r8,r17
 400b400:	18000826 	beq	r3,zero,400b424 <__adddf3+0x760>
 400b404:	4808d0fa 	srli	r4,r9,3
 400b408:	20c0022c 	andhi	r3,r4,8
 400b40c:	1800051e 	bne	r3,zero,400b424 <__adddf3+0x760>
 400b410:	300cd0fa 	srli	r6,r6,3
 400b414:	4806977a 	slli	r3,r9,29
 400b418:	2005883a 	mov	r2,r4
 400b41c:	3825883a 	mov	r18,r7
 400b420:	19a2b03a 	or	r17,r3,r6
 400b424:	8810d77a 	srli	r8,r17,29
 400b428:	100490fa 	slli	r2,r2,3
 400b42c:	882290fa 	slli	r17,r17,3
 400b430:	0401ffc4 	movi	r16,2047
 400b434:	4090b03a 	or	r8,r8,r2
 400b438:	003e4106 	br	400ad40 <__alt_mem_onchip_memory2_0+0xfbfead40>
 400b43c:	0141ffc4 	movi	r5,2047
 400b440:	117fc71e 	bne	r2,r5,400b360 <__alt_mem_onchip_memory2_0+0xfbfeb360>
 400b444:	4811883a 	mov	r8,r9
 400b448:	3023883a 	mov	r17,r6
 400b44c:	1021883a 	mov	r16,r2
 400b450:	003e3b06 	br	400ad40 <__alt_mem_onchip_memory2_0+0xfbfead40>
 400b454:	10002f26 	beq	r2,zero,400b514 <__adddf3+0x850>
 400b458:	4984b03a 	or	r2,r9,r6
 400b45c:	10001126 	beq	r2,zero,400b4a4 <__adddf3+0x7e0>
 400b460:	4004d0fa 	srli	r2,r8,3
 400b464:	8822d0fa 	srli	r17,r17,3
 400b468:	4010977a 	slli	r8,r8,29
 400b46c:	10c0022c 	andhi	r3,r2,8
 400b470:	4462b03a 	or	r17,r8,r17
 400b474:	183feb26 	beq	r3,zero,400b424 <__alt_mem_onchip_memory2_0+0xfbfeb424>
 400b478:	4808d0fa 	srli	r4,r9,3
 400b47c:	20c0022c 	andhi	r3,r4,8
 400b480:	183fe81e 	bne	r3,zero,400b424 <__alt_mem_onchip_memory2_0+0xfbfeb424>
 400b484:	300cd0fa 	srli	r6,r6,3
 400b488:	4806977a 	slli	r3,r9,29
 400b48c:	2005883a 	mov	r2,r4
 400b490:	19a2b03a 	or	r17,r3,r6
 400b494:	003fe306 	br	400b424 <__alt_mem_onchip_memory2_0+0xfbfeb424>
 400b498:	0011883a 	mov	r8,zero
 400b49c:	0005883a 	mov	r2,zero
 400b4a0:	003e3f06 	br	400ada0 <__alt_mem_onchip_memory2_0+0xfbfeada0>
 400b4a4:	0401ffc4 	movi	r16,2047
 400b4a8:	003e2506 	br	400ad40 <__alt_mem_onchip_memory2_0+0xfbfead40>
 400b4ac:	0013883a 	mov	r9,zero
 400b4b0:	003f8406 	br	400b2c4 <__alt_mem_onchip_memory2_0+0xfbfeb2c4>
 400b4b4:	0005883a 	mov	r2,zero
 400b4b8:	0007883a 	mov	r3,zero
 400b4bc:	003e8906 	br	400aee4 <__alt_mem_onchip_memory2_0+0xfbfeaee4>
 400b4c0:	197ff804 	addi	r5,r3,-32
 400b4c4:	01000804 	movi	r4,32
 400b4c8:	414ad83a 	srl	r5,r8,r5
 400b4cc:	19002426 	beq	r3,r4,400b560 <__adddf3+0x89c>
 400b4d0:	01001004 	movi	r4,64
 400b4d4:	20c7c83a 	sub	r3,r4,r3
 400b4d8:	40c6983a 	sll	r3,r8,r3
 400b4dc:	1c46b03a 	or	r3,r3,r17
 400b4e0:	1806c03a 	cmpne	r3,r3,zero
 400b4e4:	28e2b03a 	or	r17,r5,r3
 400b4e8:	0007883a 	mov	r3,zero
 400b4ec:	003f2306 	br	400b17c <__alt_mem_onchip_memory2_0+0xfbfeb17c>
 400b4f0:	0007883a 	mov	r3,zero
 400b4f4:	5811883a 	mov	r8,r11
 400b4f8:	00bfffc4 	movi	r2,-1
 400b4fc:	0401ffc4 	movi	r16,2047
 400b500:	003e7806 	br	400aee4 <__alt_mem_onchip_memory2_0+0xfbfeaee4>
 400b504:	4462b03a 	or	r17,r8,r17
 400b508:	8822c03a 	cmpne	r17,r17,zero
 400b50c:	0009883a 	mov	r4,zero
 400b510:	003fa006 	br	400b394 <__alt_mem_onchip_memory2_0+0xfbfeb394>
 400b514:	4811883a 	mov	r8,r9
 400b518:	3023883a 	mov	r17,r6
 400b51c:	0401ffc4 	movi	r16,2047
 400b520:	003e0706 	br	400ad40 <__alt_mem_onchip_memory2_0+0xfbfead40>
 400b524:	4811883a 	mov	r8,r9
 400b528:	3023883a 	mov	r17,r6
 400b52c:	003e0406 	br	400ad40 <__alt_mem_onchip_memory2_0+0xfbfead40>
 400b530:	21fff804 	addi	r7,r4,-32
 400b534:	01400804 	movi	r5,32
 400b538:	41ced83a 	srl	r7,r8,r7
 400b53c:	21400a26 	beq	r4,r5,400b568 <__adddf3+0x8a4>
 400b540:	01401004 	movi	r5,64
 400b544:	2909c83a 	sub	r4,r5,r4
 400b548:	4108983a 	sll	r4,r8,r4
 400b54c:	2448b03a 	or	r4,r4,r17
 400b550:	2008c03a 	cmpne	r4,r4,zero
 400b554:	3922b03a 	or	r17,r7,r4
 400b558:	0009883a 	mov	r4,zero
 400b55c:	003f8d06 	br	400b394 <__alt_mem_onchip_memory2_0+0xfbfeb394>
 400b560:	0007883a 	mov	r3,zero
 400b564:	003fdd06 	br	400b4dc <__alt_mem_onchip_memory2_0+0xfbfeb4dc>
 400b568:	0009883a 	mov	r4,zero
 400b56c:	003ff706 	br	400b54c <__alt_mem_onchip_memory2_0+0xfbfeb54c>

0400b570 <__divdf3>:
 400b570:	defff204 	addi	sp,sp,-56
 400b574:	dd400915 	stw	r21,36(sp)
 400b578:	282ad53a 	srli	r21,r5,20
 400b57c:	dd000815 	stw	r20,32(sp)
 400b580:	2828d7fa 	srli	r20,r5,31
 400b584:	dc000415 	stw	r16,16(sp)
 400b588:	04000434 	movhi	r16,16
 400b58c:	df000c15 	stw	fp,48(sp)
 400b590:	843fffc4 	addi	r16,r16,-1
 400b594:	dfc00d15 	stw	ra,52(sp)
 400b598:	ddc00b15 	stw	r23,44(sp)
 400b59c:	dd800a15 	stw	r22,40(sp)
 400b5a0:	dcc00715 	stw	r19,28(sp)
 400b5a4:	dc800615 	stw	r18,24(sp)
 400b5a8:	dc400515 	stw	r17,20(sp)
 400b5ac:	ad41ffcc 	andi	r21,r21,2047
 400b5b0:	2c20703a 	and	r16,r5,r16
 400b5b4:	a7003fcc 	andi	fp,r20,255
 400b5b8:	a8006126 	beq	r21,zero,400b740 <__divdf3+0x1d0>
 400b5bc:	0081ffc4 	movi	r2,2047
 400b5c0:	2025883a 	mov	r18,r4
 400b5c4:	a8803726 	beq	r21,r2,400b6a4 <__divdf3+0x134>
 400b5c8:	80800434 	orhi	r2,r16,16
 400b5cc:	100490fa 	slli	r2,r2,3
 400b5d0:	2020d77a 	srli	r16,r4,29
 400b5d4:	202490fa 	slli	r18,r4,3
 400b5d8:	ad7f0044 	addi	r21,r21,-1023
 400b5dc:	80a0b03a 	or	r16,r16,r2
 400b5e0:	0027883a 	mov	r19,zero
 400b5e4:	0013883a 	mov	r9,zero
 400b5e8:	3804d53a 	srli	r2,r7,20
 400b5ec:	382cd7fa 	srli	r22,r7,31
 400b5f0:	04400434 	movhi	r17,16
 400b5f4:	8c7fffc4 	addi	r17,r17,-1
 400b5f8:	1081ffcc 	andi	r2,r2,2047
 400b5fc:	3011883a 	mov	r8,r6
 400b600:	3c62703a 	and	r17,r7,r17
 400b604:	b5c03fcc 	andi	r23,r22,255
 400b608:	10006c26 	beq	r2,zero,400b7bc <__divdf3+0x24c>
 400b60c:	00c1ffc4 	movi	r3,2047
 400b610:	10c06426 	beq	r2,r3,400b7a4 <__divdf3+0x234>
 400b614:	88c00434 	orhi	r3,r17,16
 400b618:	180690fa 	slli	r3,r3,3
 400b61c:	3022d77a 	srli	r17,r6,29
 400b620:	301090fa 	slli	r8,r6,3
 400b624:	10bf0044 	addi	r2,r2,-1023
 400b628:	88e2b03a 	or	r17,r17,r3
 400b62c:	000f883a 	mov	r7,zero
 400b630:	a58cf03a 	xor	r6,r20,r22
 400b634:	3cc8b03a 	or	r4,r7,r19
 400b638:	a8abc83a 	sub	r21,r21,r2
 400b63c:	008003c4 	movi	r2,15
 400b640:	3007883a 	mov	r3,r6
 400b644:	34c03fcc 	andi	r19,r6,255
 400b648:	11009036 	bltu	r2,r4,400b88c <__divdf3+0x31c>
 400b64c:	200890ba 	slli	r4,r4,2
 400b650:	00810074 	movhi	r2,1025
 400b654:	10ad9904 	addi	r2,r2,-18844
 400b658:	2089883a 	add	r4,r4,r2
 400b65c:	20800017 	ldw	r2,0(r4)
 400b660:	1000683a 	jmp	r2
 400b664:	0400b88c 	andi	r16,zero,738
 400b668:	0400b6dc 	xori	r16,zero,731
 400b66c:	0400b87c 	xorhi	r16,zero,737
 400b670:	0400b6d0 	cmplti	r16,zero,731
 400b674:	0400b87c 	xorhi	r16,zero,737
 400b678:	0400b850 	cmplti	r16,zero,737
 400b67c:	0400b87c 	xorhi	r16,zero,737
 400b680:	0400b6d0 	cmplti	r16,zero,731
 400b684:	0400b6dc 	xori	r16,zero,731
 400b688:	0400b6dc 	xori	r16,zero,731
 400b68c:	0400b850 	cmplti	r16,zero,737
 400b690:	0400b6d0 	cmplti	r16,zero,731
 400b694:	0400b6c0 	call	400b6c <OSCtxSw_SWITCH_PC+0x400b2c>
 400b698:	0400b6c0 	call	400b6c <OSCtxSw_SWITCH_PC+0x400b2c>
 400b69c:	0400b6c0 	call	400b6c <OSCtxSw_SWITCH_PC+0x400b2c>
 400b6a0:	0400bb70 	cmpltui	r16,zero,749
 400b6a4:	2404b03a 	or	r2,r4,r16
 400b6a8:	1000661e 	bne	r2,zero,400b844 <__divdf3+0x2d4>
 400b6ac:	04c00204 	movi	r19,8
 400b6b0:	0021883a 	mov	r16,zero
 400b6b4:	0025883a 	mov	r18,zero
 400b6b8:	02400084 	movi	r9,2
 400b6bc:	003fca06 	br	400b5e8 <__alt_mem_onchip_memory2_0+0xfbfeb5e8>
 400b6c0:	8023883a 	mov	r17,r16
 400b6c4:	9011883a 	mov	r8,r18
 400b6c8:	e02f883a 	mov	r23,fp
 400b6cc:	480f883a 	mov	r7,r9
 400b6d0:	00800084 	movi	r2,2
 400b6d4:	3881311e 	bne	r7,r2,400bb9c <__divdf3+0x62c>
 400b6d8:	b827883a 	mov	r19,r23
 400b6dc:	98c0004c 	andi	r3,r19,1
 400b6e0:	0081ffc4 	movi	r2,2047
 400b6e4:	000b883a 	mov	r5,zero
 400b6e8:	0025883a 	mov	r18,zero
 400b6ec:	1004953a 	slli	r2,r2,20
 400b6f0:	18c03fcc 	andi	r3,r3,255
 400b6f4:	04400434 	movhi	r17,16
 400b6f8:	8c7fffc4 	addi	r17,r17,-1
 400b6fc:	180697fa 	slli	r3,r3,31
 400b700:	2c4a703a 	and	r5,r5,r17
 400b704:	288ab03a 	or	r5,r5,r2
 400b708:	28c6b03a 	or	r3,r5,r3
 400b70c:	9005883a 	mov	r2,r18
 400b710:	dfc00d17 	ldw	ra,52(sp)
 400b714:	df000c17 	ldw	fp,48(sp)
 400b718:	ddc00b17 	ldw	r23,44(sp)
 400b71c:	dd800a17 	ldw	r22,40(sp)
 400b720:	dd400917 	ldw	r21,36(sp)
 400b724:	dd000817 	ldw	r20,32(sp)
 400b728:	dcc00717 	ldw	r19,28(sp)
 400b72c:	dc800617 	ldw	r18,24(sp)
 400b730:	dc400517 	ldw	r17,20(sp)
 400b734:	dc000417 	ldw	r16,16(sp)
 400b738:	dec00e04 	addi	sp,sp,56
 400b73c:	f800283a 	ret
 400b740:	2404b03a 	or	r2,r4,r16
 400b744:	2027883a 	mov	r19,r4
 400b748:	10003926 	beq	r2,zero,400b830 <__divdf3+0x2c0>
 400b74c:	80012e26 	beq	r16,zero,400bc08 <__divdf3+0x698>
 400b750:	8009883a 	mov	r4,r16
 400b754:	d9800315 	stw	r6,12(sp)
 400b758:	d9c00215 	stw	r7,8(sp)
 400b75c:	400d2c80 	call	400d2c8 <__clzsi2>
 400b760:	d9800317 	ldw	r6,12(sp)
 400b764:	d9c00217 	ldw	r7,8(sp)
 400b768:	113ffd44 	addi	r4,r2,-11
 400b76c:	00c00704 	movi	r3,28
 400b770:	19012116 	blt	r3,r4,400bbf8 <__divdf3+0x688>
 400b774:	00c00744 	movi	r3,29
 400b778:	147ffe04 	addi	r17,r2,-8
 400b77c:	1907c83a 	sub	r3,r3,r4
 400b780:	8460983a 	sll	r16,r16,r17
 400b784:	98c6d83a 	srl	r3,r19,r3
 400b788:	9c64983a 	sll	r18,r19,r17
 400b78c:	1c20b03a 	or	r16,r3,r16
 400b790:	1080fcc4 	addi	r2,r2,1011
 400b794:	00abc83a 	sub	r21,zero,r2
 400b798:	0027883a 	mov	r19,zero
 400b79c:	0013883a 	mov	r9,zero
 400b7a0:	003f9106 	br	400b5e8 <__alt_mem_onchip_memory2_0+0xfbfeb5e8>
 400b7a4:	3446b03a 	or	r3,r6,r17
 400b7a8:	18001f1e 	bne	r3,zero,400b828 <__divdf3+0x2b8>
 400b7ac:	0023883a 	mov	r17,zero
 400b7b0:	0011883a 	mov	r8,zero
 400b7b4:	01c00084 	movi	r7,2
 400b7b8:	003f9d06 	br	400b630 <__alt_mem_onchip_memory2_0+0xfbfeb630>
 400b7bc:	3446b03a 	or	r3,r6,r17
 400b7c0:	18001526 	beq	r3,zero,400b818 <__divdf3+0x2a8>
 400b7c4:	88011b26 	beq	r17,zero,400bc34 <__divdf3+0x6c4>
 400b7c8:	8809883a 	mov	r4,r17
 400b7cc:	d9800315 	stw	r6,12(sp)
 400b7d0:	da400115 	stw	r9,4(sp)
 400b7d4:	400d2c80 	call	400d2c8 <__clzsi2>
 400b7d8:	d9800317 	ldw	r6,12(sp)
 400b7dc:	da400117 	ldw	r9,4(sp)
 400b7e0:	113ffd44 	addi	r4,r2,-11
 400b7e4:	00c00704 	movi	r3,28
 400b7e8:	19010e16 	blt	r3,r4,400bc24 <__divdf3+0x6b4>
 400b7ec:	00c00744 	movi	r3,29
 400b7f0:	123ffe04 	addi	r8,r2,-8
 400b7f4:	1907c83a 	sub	r3,r3,r4
 400b7f8:	8a22983a 	sll	r17,r17,r8
 400b7fc:	30c6d83a 	srl	r3,r6,r3
 400b800:	3210983a 	sll	r8,r6,r8
 400b804:	1c62b03a 	or	r17,r3,r17
 400b808:	1080fcc4 	addi	r2,r2,1011
 400b80c:	0085c83a 	sub	r2,zero,r2
 400b810:	000f883a 	mov	r7,zero
 400b814:	003f8606 	br	400b630 <__alt_mem_onchip_memory2_0+0xfbfeb630>
 400b818:	0023883a 	mov	r17,zero
 400b81c:	0011883a 	mov	r8,zero
 400b820:	01c00044 	movi	r7,1
 400b824:	003f8206 	br	400b630 <__alt_mem_onchip_memory2_0+0xfbfeb630>
 400b828:	01c000c4 	movi	r7,3
 400b82c:	003f8006 	br	400b630 <__alt_mem_onchip_memory2_0+0xfbfeb630>
 400b830:	04c00104 	movi	r19,4
 400b834:	0021883a 	mov	r16,zero
 400b838:	0025883a 	mov	r18,zero
 400b83c:	02400044 	movi	r9,1
 400b840:	003f6906 	br	400b5e8 <__alt_mem_onchip_memory2_0+0xfbfeb5e8>
 400b844:	04c00304 	movi	r19,12
 400b848:	024000c4 	movi	r9,3
 400b84c:	003f6606 	br	400b5e8 <__alt_mem_onchip_memory2_0+0xfbfeb5e8>
 400b850:	01400434 	movhi	r5,16
 400b854:	0007883a 	mov	r3,zero
 400b858:	297fffc4 	addi	r5,r5,-1
 400b85c:	04bfffc4 	movi	r18,-1
 400b860:	0081ffc4 	movi	r2,2047
 400b864:	003fa106 	br	400b6ec <__alt_mem_onchip_memory2_0+0xfbfeb6ec>
 400b868:	00c00044 	movi	r3,1
 400b86c:	1887c83a 	sub	r3,r3,r2
 400b870:	01000e04 	movi	r4,56
 400b874:	20c1210e 	bge	r4,r3,400bcfc <__divdf3+0x78c>
 400b878:	98c0004c 	andi	r3,r19,1
 400b87c:	0005883a 	mov	r2,zero
 400b880:	000b883a 	mov	r5,zero
 400b884:	0025883a 	mov	r18,zero
 400b888:	003f9806 	br	400b6ec <__alt_mem_onchip_memory2_0+0xfbfeb6ec>
 400b88c:	8c00fd36 	bltu	r17,r16,400bc84 <__divdf3+0x714>
 400b890:	8440fb26 	beq	r16,r17,400bc80 <__divdf3+0x710>
 400b894:	8007883a 	mov	r3,r16
 400b898:	ad7fffc4 	addi	r21,r21,-1
 400b89c:	0021883a 	mov	r16,zero
 400b8a0:	4004d63a 	srli	r2,r8,24
 400b8a4:	8822923a 	slli	r17,r17,8
 400b8a8:	1809883a 	mov	r4,r3
 400b8ac:	402c923a 	slli	r22,r8,8
 400b8b0:	88b8b03a 	or	fp,r17,r2
 400b8b4:	e028d43a 	srli	r20,fp,16
 400b8b8:	d8c00015 	stw	r3,0(sp)
 400b8bc:	e5ffffcc 	andi	r23,fp,65535
 400b8c0:	a00b883a 	mov	r5,r20
 400b8c4:	400ac080 	call	400ac08 <__udivsi3>
 400b8c8:	d8c00017 	ldw	r3,0(sp)
 400b8cc:	a00b883a 	mov	r5,r20
 400b8d0:	d8800315 	stw	r2,12(sp)
 400b8d4:	1809883a 	mov	r4,r3
 400b8d8:	400ac6c0 	call	400ac6c <__umodsi3>
 400b8dc:	d9800317 	ldw	r6,12(sp)
 400b8e0:	1006943a 	slli	r3,r2,16
 400b8e4:	9004d43a 	srli	r2,r18,16
 400b8e8:	b9a3383a 	mul	r17,r23,r6
 400b8ec:	10c4b03a 	or	r2,r2,r3
 400b8f0:	1440062e 	bgeu	r2,r17,400b90c <__divdf3+0x39c>
 400b8f4:	1705883a 	add	r2,r2,fp
 400b8f8:	30ffffc4 	addi	r3,r6,-1
 400b8fc:	1700ee36 	bltu	r2,fp,400bcb8 <__divdf3+0x748>
 400b900:	1440ed2e 	bgeu	r2,r17,400bcb8 <__divdf3+0x748>
 400b904:	31bfff84 	addi	r6,r6,-2
 400b908:	1705883a 	add	r2,r2,fp
 400b90c:	1463c83a 	sub	r17,r2,r17
 400b910:	a00b883a 	mov	r5,r20
 400b914:	8809883a 	mov	r4,r17
 400b918:	d9800315 	stw	r6,12(sp)
 400b91c:	400ac080 	call	400ac08 <__udivsi3>
 400b920:	a00b883a 	mov	r5,r20
 400b924:	8809883a 	mov	r4,r17
 400b928:	d8800215 	stw	r2,8(sp)
 400b92c:	400ac6c0 	call	400ac6c <__umodsi3>
 400b930:	d9c00217 	ldw	r7,8(sp)
 400b934:	1004943a 	slli	r2,r2,16
 400b938:	94bfffcc 	andi	r18,r18,65535
 400b93c:	b9d1383a 	mul	r8,r23,r7
 400b940:	90a4b03a 	or	r18,r18,r2
 400b944:	d9800317 	ldw	r6,12(sp)
 400b948:	9200062e 	bgeu	r18,r8,400b964 <__divdf3+0x3f4>
 400b94c:	9725883a 	add	r18,r18,fp
 400b950:	38bfffc4 	addi	r2,r7,-1
 400b954:	9700d636 	bltu	r18,fp,400bcb0 <__divdf3+0x740>
 400b958:	9200d52e 	bgeu	r18,r8,400bcb0 <__divdf3+0x740>
 400b95c:	39ffff84 	addi	r7,r7,-2
 400b960:	9725883a 	add	r18,r18,fp
 400b964:	3004943a 	slli	r2,r6,16
 400b968:	b012d43a 	srli	r9,r22,16
 400b96c:	b1bfffcc 	andi	r6,r22,65535
 400b970:	11e2b03a 	or	r17,r2,r7
 400b974:	8806d43a 	srli	r3,r17,16
 400b978:	893fffcc 	andi	r4,r17,65535
 400b97c:	218b383a 	mul	r5,r4,r6
 400b980:	30c5383a 	mul	r2,r6,r3
 400b984:	2249383a 	mul	r4,r4,r9
 400b988:	280ed43a 	srli	r7,r5,16
 400b98c:	9225c83a 	sub	r18,r18,r8
 400b990:	2089883a 	add	r4,r4,r2
 400b994:	3909883a 	add	r4,r7,r4
 400b998:	1a47383a 	mul	r3,r3,r9
 400b99c:	2080022e 	bgeu	r4,r2,400b9a8 <__divdf3+0x438>
 400b9a0:	00800074 	movhi	r2,1
 400b9a4:	1887883a 	add	r3,r3,r2
 400b9a8:	2004d43a 	srli	r2,r4,16
 400b9ac:	2008943a 	slli	r4,r4,16
 400b9b0:	297fffcc 	andi	r5,r5,65535
 400b9b4:	10c7883a 	add	r3,r2,r3
 400b9b8:	2149883a 	add	r4,r4,r5
 400b9bc:	90c0a536 	bltu	r18,r3,400bc54 <__divdf3+0x6e4>
 400b9c0:	90c0bf26 	beq	r18,r3,400bcc0 <__divdf3+0x750>
 400b9c4:	90c7c83a 	sub	r3,r18,r3
 400b9c8:	810fc83a 	sub	r7,r16,r4
 400b9cc:	81e5803a 	cmpltu	r18,r16,r7
 400b9d0:	1ca5c83a 	sub	r18,r3,r18
 400b9d4:	e480c126 	beq	fp,r18,400bcdc <__divdf3+0x76c>
 400b9d8:	a00b883a 	mov	r5,r20
 400b9dc:	9009883a 	mov	r4,r18
 400b9e0:	d9800315 	stw	r6,12(sp)
 400b9e4:	d9c00215 	stw	r7,8(sp)
 400b9e8:	da400115 	stw	r9,4(sp)
 400b9ec:	400ac080 	call	400ac08 <__udivsi3>
 400b9f0:	a00b883a 	mov	r5,r20
 400b9f4:	9009883a 	mov	r4,r18
 400b9f8:	d8800015 	stw	r2,0(sp)
 400b9fc:	400ac6c0 	call	400ac6c <__umodsi3>
 400ba00:	d9c00217 	ldw	r7,8(sp)
 400ba04:	da000017 	ldw	r8,0(sp)
 400ba08:	1006943a 	slli	r3,r2,16
 400ba0c:	3804d43a 	srli	r2,r7,16
 400ba10:	ba21383a 	mul	r16,r23,r8
 400ba14:	d9800317 	ldw	r6,12(sp)
 400ba18:	10c4b03a 	or	r2,r2,r3
 400ba1c:	da400117 	ldw	r9,4(sp)
 400ba20:	1400062e 	bgeu	r2,r16,400ba3c <__divdf3+0x4cc>
 400ba24:	1705883a 	add	r2,r2,fp
 400ba28:	40ffffc4 	addi	r3,r8,-1
 400ba2c:	1700ad36 	bltu	r2,fp,400bce4 <__divdf3+0x774>
 400ba30:	1400ac2e 	bgeu	r2,r16,400bce4 <__divdf3+0x774>
 400ba34:	423fff84 	addi	r8,r8,-2
 400ba38:	1705883a 	add	r2,r2,fp
 400ba3c:	1421c83a 	sub	r16,r2,r16
 400ba40:	a00b883a 	mov	r5,r20
 400ba44:	8009883a 	mov	r4,r16
 400ba48:	d9800315 	stw	r6,12(sp)
 400ba4c:	d9c00215 	stw	r7,8(sp)
 400ba50:	da000015 	stw	r8,0(sp)
 400ba54:	da400115 	stw	r9,4(sp)
 400ba58:	400ac080 	call	400ac08 <__udivsi3>
 400ba5c:	8009883a 	mov	r4,r16
 400ba60:	a00b883a 	mov	r5,r20
 400ba64:	1025883a 	mov	r18,r2
 400ba68:	400ac6c0 	call	400ac6c <__umodsi3>
 400ba6c:	d9c00217 	ldw	r7,8(sp)
 400ba70:	1004943a 	slli	r2,r2,16
 400ba74:	bcaf383a 	mul	r23,r23,r18
 400ba78:	393fffcc 	andi	r4,r7,65535
 400ba7c:	2088b03a 	or	r4,r4,r2
 400ba80:	d9800317 	ldw	r6,12(sp)
 400ba84:	da000017 	ldw	r8,0(sp)
 400ba88:	da400117 	ldw	r9,4(sp)
 400ba8c:	25c0062e 	bgeu	r4,r23,400baa8 <__divdf3+0x538>
 400ba90:	2709883a 	add	r4,r4,fp
 400ba94:	90bfffc4 	addi	r2,r18,-1
 400ba98:	27009436 	bltu	r4,fp,400bcec <__divdf3+0x77c>
 400ba9c:	25c0932e 	bgeu	r4,r23,400bcec <__divdf3+0x77c>
 400baa0:	94bfff84 	addi	r18,r18,-2
 400baa4:	2709883a 	add	r4,r4,fp
 400baa8:	4004943a 	slli	r2,r8,16
 400baac:	25efc83a 	sub	r23,r4,r23
 400bab0:	1490b03a 	or	r8,r2,r18
 400bab4:	4008d43a 	srli	r4,r8,16
 400bab8:	40ffffcc 	andi	r3,r8,65535
 400babc:	30c5383a 	mul	r2,r6,r3
 400bac0:	1a47383a 	mul	r3,r3,r9
 400bac4:	310d383a 	mul	r6,r6,r4
 400bac8:	100ad43a 	srli	r5,r2,16
 400bacc:	4913383a 	mul	r9,r9,r4
 400bad0:	1987883a 	add	r3,r3,r6
 400bad4:	28c7883a 	add	r3,r5,r3
 400bad8:	1980022e 	bgeu	r3,r6,400bae4 <__divdf3+0x574>
 400badc:	01000074 	movhi	r4,1
 400bae0:	4913883a 	add	r9,r9,r4
 400bae4:	1808d43a 	srli	r4,r3,16
 400bae8:	1806943a 	slli	r3,r3,16
 400baec:	10bfffcc 	andi	r2,r2,65535
 400baf0:	2253883a 	add	r9,r4,r9
 400baf4:	1887883a 	add	r3,r3,r2
 400baf8:	ba403836 	bltu	r23,r9,400bbdc <__divdf3+0x66c>
 400bafc:	ba403626 	beq	r23,r9,400bbd8 <__divdf3+0x668>
 400bb00:	42000054 	ori	r8,r8,1
 400bb04:	a880ffc4 	addi	r2,r21,1023
 400bb08:	00bf570e 	bge	zero,r2,400b868 <__alt_mem_onchip_memory2_0+0xfbfeb868>
 400bb0c:	40c001cc 	andi	r3,r8,7
 400bb10:	18000726 	beq	r3,zero,400bb30 <__divdf3+0x5c0>
 400bb14:	40c003cc 	andi	r3,r8,15
 400bb18:	01000104 	movi	r4,4
 400bb1c:	19000426 	beq	r3,r4,400bb30 <__divdf3+0x5c0>
 400bb20:	4107883a 	add	r3,r8,r4
 400bb24:	1a11803a 	cmpltu	r8,r3,r8
 400bb28:	8a23883a 	add	r17,r17,r8
 400bb2c:	1811883a 	mov	r8,r3
 400bb30:	88c0402c 	andhi	r3,r17,256
 400bb34:	18000426 	beq	r3,zero,400bb48 <__divdf3+0x5d8>
 400bb38:	00ffc034 	movhi	r3,65280
 400bb3c:	18ffffc4 	addi	r3,r3,-1
 400bb40:	a8810004 	addi	r2,r21,1024
 400bb44:	88e2703a 	and	r17,r17,r3
 400bb48:	00c1ff84 	movi	r3,2046
 400bb4c:	18bee316 	blt	r3,r2,400b6dc <__alt_mem_onchip_memory2_0+0xfbfeb6dc>
 400bb50:	8824977a 	slli	r18,r17,29
 400bb54:	4010d0fa 	srli	r8,r8,3
 400bb58:	8822927a 	slli	r17,r17,9
 400bb5c:	1081ffcc 	andi	r2,r2,2047
 400bb60:	9224b03a 	or	r18,r18,r8
 400bb64:	880ad33a 	srli	r5,r17,12
 400bb68:	98c0004c 	andi	r3,r19,1
 400bb6c:	003edf06 	br	400b6ec <__alt_mem_onchip_memory2_0+0xfbfeb6ec>
 400bb70:	8080022c 	andhi	r2,r16,8
 400bb74:	10001226 	beq	r2,zero,400bbc0 <__divdf3+0x650>
 400bb78:	8880022c 	andhi	r2,r17,8
 400bb7c:	1000101e 	bne	r2,zero,400bbc0 <__divdf3+0x650>
 400bb80:	00800434 	movhi	r2,16
 400bb84:	89400234 	orhi	r5,r17,8
 400bb88:	10bfffc4 	addi	r2,r2,-1
 400bb8c:	b007883a 	mov	r3,r22
 400bb90:	288a703a 	and	r5,r5,r2
 400bb94:	4025883a 	mov	r18,r8
 400bb98:	003f3106 	br	400b860 <__alt_mem_onchip_memory2_0+0xfbfeb860>
 400bb9c:	008000c4 	movi	r2,3
 400bba0:	3880a626 	beq	r7,r2,400be3c <__divdf3+0x8cc>
 400bba4:	00800044 	movi	r2,1
 400bba8:	3880521e 	bne	r7,r2,400bcf4 <__divdf3+0x784>
 400bbac:	b807883a 	mov	r3,r23
 400bbb0:	0005883a 	mov	r2,zero
 400bbb4:	000b883a 	mov	r5,zero
 400bbb8:	0025883a 	mov	r18,zero
 400bbbc:	003ecb06 	br	400b6ec <__alt_mem_onchip_memory2_0+0xfbfeb6ec>
 400bbc0:	00800434 	movhi	r2,16
 400bbc4:	81400234 	orhi	r5,r16,8
 400bbc8:	10bfffc4 	addi	r2,r2,-1
 400bbcc:	a007883a 	mov	r3,r20
 400bbd0:	288a703a 	and	r5,r5,r2
 400bbd4:	003f2206 	br	400b860 <__alt_mem_onchip_memory2_0+0xfbfeb860>
 400bbd8:	183fca26 	beq	r3,zero,400bb04 <__alt_mem_onchip_memory2_0+0xfbfebb04>
 400bbdc:	e5ef883a 	add	r23,fp,r23
 400bbe0:	40bfffc4 	addi	r2,r8,-1
 400bbe4:	bf00392e 	bgeu	r23,fp,400bccc <__divdf3+0x75c>
 400bbe8:	1011883a 	mov	r8,r2
 400bbec:	ba7fc41e 	bne	r23,r9,400bb00 <__alt_mem_onchip_memory2_0+0xfbfebb00>
 400bbf0:	b0ffc31e 	bne	r22,r3,400bb00 <__alt_mem_onchip_memory2_0+0xfbfebb00>
 400bbf4:	003fc306 	br	400bb04 <__alt_mem_onchip_memory2_0+0xfbfebb04>
 400bbf8:	143ff604 	addi	r16,r2,-40
 400bbfc:	9c20983a 	sll	r16,r19,r16
 400bc00:	0025883a 	mov	r18,zero
 400bc04:	003ee206 	br	400b790 <__alt_mem_onchip_memory2_0+0xfbfeb790>
 400bc08:	d9800315 	stw	r6,12(sp)
 400bc0c:	d9c00215 	stw	r7,8(sp)
 400bc10:	400d2c80 	call	400d2c8 <__clzsi2>
 400bc14:	10800804 	addi	r2,r2,32
 400bc18:	d9c00217 	ldw	r7,8(sp)
 400bc1c:	d9800317 	ldw	r6,12(sp)
 400bc20:	003ed106 	br	400b768 <__alt_mem_onchip_memory2_0+0xfbfeb768>
 400bc24:	147ff604 	addi	r17,r2,-40
 400bc28:	3462983a 	sll	r17,r6,r17
 400bc2c:	0011883a 	mov	r8,zero
 400bc30:	003ef506 	br	400b808 <__alt_mem_onchip_memory2_0+0xfbfeb808>
 400bc34:	3009883a 	mov	r4,r6
 400bc38:	d9800315 	stw	r6,12(sp)
 400bc3c:	da400115 	stw	r9,4(sp)
 400bc40:	400d2c80 	call	400d2c8 <__clzsi2>
 400bc44:	10800804 	addi	r2,r2,32
 400bc48:	da400117 	ldw	r9,4(sp)
 400bc4c:	d9800317 	ldw	r6,12(sp)
 400bc50:	003ee306 	br	400b7e0 <__alt_mem_onchip_memory2_0+0xfbfeb7e0>
 400bc54:	85a1883a 	add	r16,r16,r22
 400bc58:	8585803a 	cmpltu	r2,r16,r22
 400bc5c:	1705883a 	add	r2,r2,fp
 400bc60:	14a5883a 	add	r18,r2,r18
 400bc64:	88bfffc4 	addi	r2,r17,-1
 400bc68:	e4800c2e 	bgeu	fp,r18,400bc9c <__divdf3+0x72c>
 400bc6c:	90c03e36 	bltu	r18,r3,400bd68 <__divdf3+0x7f8>
 400bc70:	1c806926 	beq	r3,r18,400be18 <__divdf3+0x8a8>
 400bc74:	90c7c83a 	sub	r3,r18,r3
 400bc78:	1023883a 	mov	r17,r2
 400bc7c:	003f5206 	br	400b9c8 <__alt_mem_onchip_memory2_0+0xfbfeb9c8>
 400bc80:	923f0436 	bltu	r18,r8,400b894 <__alt_mem_onchip_memory2_0+0xfbfeb894>
 400bc84:	800897fa 	slli	r4,r16,31
 400bc88:	9004d07a 	srli	r2,r18,1
 400bc8c:	8006d07a 	srli	r3,r16,1
 400bc90:	902097fa 	slli	r16,r18,31
 400bc94:	20a4b03a 	or	r18,r4,r2
 400bc98:	003f0106 	br	400b8a0 <__alt_mem_onchip_memory2_0+0xfbfeb8a0>
 400bc9c:	e4bff51e 	bne	fp,r18,400bc74 <__alt_mem_onchip_memory2_0+0xfbfebc74>
 400bca0:	85bff22e 	bgeu	r16,r22,400bc6c <__alt_mem_onchip_memory2_0+0xfbfebc6c>
 400bca4:	e0c7c83a 	sub	r3,fp,r3
 400bca8:	1023883a 	mov	r17,r2
 400bcac:	003f4606 	br	400b9c8 <__alt_mem_onchip_memory2_0+0xfbfeb9c8>
 400bcb0:	100f883a 	mov	r7,r2
 400bcb4:	003f2b06 	br	400b964 <__alt_mem_onchip_memory2_0+0xfbfeb964>
 400bcb8:	180d883a 	mov	r6,r3
 400bcbc:	003f1306 	br	400b90c <__alt_mem_onchip_memory2_0+0xfbfeb90c>
 400bcc0:	813fe436 	bltu	r16,r4,400bc54 <__alt_mem_onchip_memory2_0+0xfbfebc54>
 400bcc4:	0007883a 	mov	r3,zero
 400bcc8:	003f3f06 	br	400b9c8 <__alt_mem_onchip_memory2_0+0xfbfeb9c8>
 400bccc:	ba402c36 	bltu	r23,r9,400bd80 <__divdf3+0x810>
 400bcd0:	4dc05426 	beq	r9,r23,400be24 <__divdf3+0x8b4>
 400bcd4:	1011883a 	mov	r8,r2
 400bcd8:	003f8906 	br	400bb00 <__alt_mem_onchip_memory2_0+0xfbfebb00>
 400bcdc:	023fffc4 	movi	r8,-1
 400bce0:	003f8806 	br	400bb04 <__alt_mem_onchip_memory2_0+0xfbfebb04>
 400bce4:	1811883a 	mov	r8,r3
 400bce8:	003f5406 	br	400ba3c <__alt_mem_onchip_memory2_0+0xfbfeba3c>
 400bcec:	1025883a 	mov	r18,r2
 400bcf0:	003f6d06 	br	400baa8 <__alt_mem_onchip_memory2_0+0xfbfebaa8>
 400bcf4:	b827883a 	mov	r19,r23
 400bcf8:	003f8206 	br	400bb04 <__alt_mem_onchip_memory2_0+0xfbfebb04>
 400bcfc:	010007c4 	movi	r4,31
 400bd00:	20c02616 	blt	r4,r3,400bd9c <__divdf3+0x82c>
 400bd04:	00800804 	movi	r2,32
 400bd08:	10c5c83a 	sub	r2,r2,r3
 400bd0c:	888a983a 	sll	r5,r17,r2
 400bd10:	40c8d83a 	srl	r4,r8,r3
 400bd14:	4084983a 	sll	r2,r8,r2
 400bd18:	88e2d83a 	srl	r17,r17,r3
 400bd1c:	2906b03a 	or	r3,r5,r4
 400bd20:	1004c03a 	cmpne	r2,r2,zero
 400bd24:	1886b03a 	or	r3,r3,r2
 400bd28:	188001cc 	andi	r2,r3,7
 400bd2c:	10000726 	beq	r2,zero,400bd4c <__divdf3+0x7dc>
 400bd30:	188003cc 	andi	r2,r3,15
 400bd34:	01000104 	movi	r4,4
 400bd38:	11000426 	beq	r2,r4,400bd4c <__divdf3+0x7dc>
 400bd3c:	1805883a 	mov	r2,r3
 400bd40:	10c00104 	addi	r3,r2,4
 400bd44:	1885803a 	cmpltu	r2,r3,r2
 400bd48:	88a3883a 	add	r17,r17,r2
 400bd4c:	8880202c 	andhi	r2,r17,128
 400bd50:	10002726 	beq	r2,zero,400bdf0 <__divdf3+0x880>
 400bd54:	98c0004c 	andi	r3,r19,1
 400bd58:	00800044 	movi	r2,1
 400bd5c:	000b883a 	mov	r5,zero
 400bd60:	0025883a 	mov	r18,zero
 400bd64:	003e6106 	br	400b6ec <__alt_mem_onchip_memory2_0+0xfbfeb6ec>
 400bd68:	85a1883a 	add	r16,r16,r22
 400bd6c:	8585803a 	cmpltu	r2,r16,r22
 400bd70:	1705883a 	add	r2,r2,fp
 400bd74:	14a5883a 	add	r18,r2,r18
 400bd78:	8c7fff84 	addi	r17,r17,-2
 400bd7c:	003f1106 	br	400b9c4 <__alt_mem_onchip_memory2_0+0xfbfeb9c4>
 400bd80:	b589883a 	add	r4,r22,r22
 400bd84:	25ad803a 	cmpltu	r22,r4,r22
 400bd88:	b739883a 	add	fp,r22,fp
 400bd8c:	40bfff84 	addi	r2,r8,-2
 400bd90:	bf2f883a 	add	r23,r23,fp
 400bd94:	202d883a 	mov	r22,r4
 400bd98:	003f9306 	br	400bbe8 <__alt_mem_onchip_memory2_0+0xfbfebbe8>
 400bd9c:	013ff844 	movi	r4,-31
 400bda0:	2085c83a 	sub	r2,r4,r2
 400bda4:	8888d83a 	srl	r4,r17,r2
 400bda8:	00800804 	movi	r2,32
 400bdac:	18802126 	beq	r3,r2,400be34 <__divdf3+0x8c4>
 400bdb0:	00801004 	movi	r2,64
 400bdb4:	10c5c83a 	sub	r2,r2,r3
 400bdb8:	8884983a 	sll	r2,r17,r2
 400bdbc:	1204b03a 	or	r2,r2,r8
 400bdc0:	1004c03a 	cmpne	r2,r2,zero
 400bdc4:	2084b03a 	or	r2,r4,r2
 400bdc8:	144001cc 	andi	r17,r2,7
 400bdcc:	88000d1e 	bne	r17,zero,400be04 <__divdf3+0x894>
 400bdd0:	000b883a 	mov	r5,zero
 400bdd4:	1024d0fa 	srli	r18,r2,3
 400bdd8:	98c0004c 	andi	r3,r19,1
 400bddc:	0005883a 	mov	r2,zero
 400bde0:	9464b03a 	or	r18,r18,r17
 400bde4:	003e4106 	br	400b6ec <__alt_mem_onchip_memory2_0+0xfbfeb6ec>
 400bde8:	1007883a 	mov	r3,r2
 400bdec:	0023883a 	mov	r17,zero
 400bdf0:	880a927a 	slli	r5,r17,9
 400bdf4:	1805883a 	mov	r2,r3
 400bdf8:	8822977a 	slli	r17,r17,29
 400bdfc:	280ad33a 	srli	r5,r5,12
 400be00:	003ff406 	br	400bdd4 <__alt_mem_onchip_memory2_0+0xfbfebdd4>
 400be04:	10c003cc 	andi	r3,r2,15
 400be08:	01000104 	movi	r4,4
 400be0c:	193ff626 	beq	r3,r4,400bde8 <__alt_mem_onchip_memory2_0+0xfbfebde8>
 400be10:	0023883a 	mov	r17,zero
 400be14:	003fca06 	br	400bd40 <__alt_mem_onchip_memory2_0+0xfbfebd40>
 400be18:	813fd336 	bltu	r16,r4,400bd68 <__alt_mem_onchip_memory2_0+0xfbfebd68>
 400be1c:	1023883a 	mov	r17,r2
 400be20:	003fa806 	br	400bcc4 <__alt_mem_onchip_memory2_0+0xfbfebcc4>
 400be24:	b0ffd636 	bltu	r22,r3,400bd80 <__alt_mem_onchip_memory2_0+0xfbfebd80>
 400be28:	1011883a 	mov	r8,r2
 400be2c:	b0ff341e 	bne	r22,r3,400bb00 <__alt_mem_onchip_memory2_0+0xfbfebb00>
 400be30:	003f3406 	br	400bb04 <__alt_mem_onchip_memory2_0+0xfbfebb04>
 400be34:	0005883a 	mov	r2,zero
 400be38:	003fe006 	br	400bdbc <__alt_mem_onchip_memory2_0+0xfbfebdbc>
 400be3c:	00800434 	movhi	r2,16
 400be40:	89400234 	orhi	r5,r17,8
 400be44:	10bfffc4 	addi	r2,r2,-1
 400be48:	b807883a 	mov	r3,r23
 400be4c:	288a703a 	and	r5,r5,r2
 400be50:	4025883a 	mov	r18,r8
 400be54:	003e8206 	br	400b860 <__alt_mem_onchip_memory2_0+0xfbfeb860>

0400be58 <__eqdf2>:
 400be58:	2804d53a 	srli	r2,r5,20
 400be5c:	3806d53a 	srli	r3,r7,20
 400be60:	02000434 	movhi	r8,16
 400be64:	423fffc4 	addi	r8,r8,-1
 400be68:	1081ffcc 	andi	r2,r2,2047
 400be6c:	0281ffc4 	movi	r10,2047
 400be70:	2a12703a 	and	r9,r5,r8
 400be74:	18c1ffcc 	andi	r3,r3,2047
 400be78:	3a10703a 	and	r8,r7,r8
 400be7c:	280ad7fa 	srli	r5,r5,31
 400be80:	380ed7fa 	srli	r7,r7,31
 400be84:	12801026 	beq	r2,r10,400bec8 <__eqdf2+0x70>
 400be88:	0281ffc4 	movi	r10,2047
 400be8c:	1a800a26 	beq	r3,r10,400beb8 <__eqdf2+0x60>
 400be90:	10c00226 	beq	r2,r3,400be9c <__eqdf2+0x44>
 400be94:	00800044 	movi	r2,1
 400be98:	f800283a 	ret
 400be9c:	4a3ffd1e 	bne	r9,r8,400be94 <__alt_mem_onchip_memory2_0+0xfbfebe94>
 400bea0:	21bffc1e 	bne	r4,r6,400be94 <__alt_mem_onchip_memory2_0+0xfbfebe94>
 400bea4:	29c00c26 	beq	r5,r7,400bed8 <__eqdf2+0x80>
 400bea8:	103ffa1e 	bne	r2,zero,400be94 <__alt_mem_onchip_memory2_0+0xfbfebe94>
 400beac:	2244b03a 	or	r2,r4,r9
 400beb0:	1004c03a 	cmpne	r2,r2,zero
 400beb4:	f800283a 	ret
 400beb8:	3214b03a 	or	r10,r6,r8
 400bebc:	503ff426 	beq	r10,zero,400be90 <__alt_mem_onchip_memory2_0+0xfbfebe90>
 400bec0:	00800044 	movi	r2,1
 400bec4:	f800283a 	ret
 400bec8:	2254b03a 	or	r10,r4,r9
 400becc:	503fee26 	beq	r10,zero,400be88 <__alt_mem_onchip_memory2_0+0xfbfebe88>
 400bed0:	00800044 	movi	r2,1
 400bed4:	f800283a 	ret
 400bed8:	0005883a 	mov	r2,zero
 400bedc:	f800283a 	ret

0400bee0 <__gedf2>:
 400bee0:	2804d53a 	srli	r2,r5,20
 400bee4:	3806d53a 	srli	r3,r7,20
 400bee8:	02000434 	movhi	r8,16
 400beec:	423fffc4 	addi	r8,r8,-1
 400bef0:	1081ffcc 	andi	r2,r2,2047
 400bef4:	0241ffc4 	movi	r9,2047
 400bef8:	2a14703a 	and	r10,r5,r8
 400befc:	18c1ffcc 	andi	r3,r3,2047
 400bf00:	3a10703a 	and	r8,r7,r8
 400bf04:	280ad7fa 	srli	r5,r5,31
 400bf08:	380ed7fa 	srli	r7,r7,31
 400bf0c:	12401d26 	beq	r2,r9,400bf84 <__gedf2+0xa4>
 400bf10:	0241ffc4 	movi	r9,2047
 400bf14:	1a401226 	beq	r3,r9,400bf60 <__gedf2+0x80>
 400bf18:	1000081e 	bne	r2,zero,400bf3c <__gedf2+0x5c>
 400bf1c:	2296b03a 	or	r11,r4,r10
 400bf20:	5813003a 	cmpeq	r9,r11,zero
 400bf24:	1800091e 	bne	r3,zero,400bf4c <__gedf2+0x6c>
 400bf28:	3218b03a 	or	r12,r6,r8
 400bf2c:	6000071e 	bne	r12,zero,400bf4c <__gedf2+0x6c>
 400bf30:	0005883a 	mov	r2,zero
 400bf34:	5800101e 	bne	r11,zero,400bf78 <__gedf2+0x98>
 400bf38:	f800283a 	ret
 400bf3c:	18000c1e 	bne	r3,zero,400bf70 <__gedf2+0x90>
 400bf40:	3212b03a 	or	r9,r6,r8
 400bf44:	48000c26 	beq	r9,zero,400bf78 <__gedf2+0x98>
 400bf48:	0013883a 	mov	r9,zero
 400bf4c:	39c03fcc 	andi	r7,r7,255
 400bf50:	48000826 	beq	r9,zero,400bf74 <__gedf2+0x94>
 400bf54:	38000926 	beq	r7,zero,400bf7c <__gedf2+0x9c>
 400bf58:	00800044 	movi	r2,1
 400bf5c:	f800283a 	ret
 400bf60:	3212b03a 	or	r9,r6,r8
 400bf64:	483fec26 	beq	r9,zero,400bf18 <__alt_mem_onchip_memory2_0+0xfbfebf18>
 400bf68:	00bfff84 	movi	r2,-2
 400bf6c:	f800283a 	ret
 400bf70:	39c03fcc 	andi	r7,r7,255
 400bf74:	29c00626 	beq	r5,r7,400bf90 <__gedf2+0xb0>
 400bf78:	283ff726 	beq	r5,zero,400bf58 <__alt_mem_onchip_memory2_0+0xfbfebf58>
 400bf7c:	00bfffc4 	movi	r2,-1
 400bf80:	f800283a 	ret
 400bf84:	2292b03a 	or	r9,r4,r10
 400bf88:	483fe126 	beq	r9,zero,400bf10 <__alt_mem_onchip_memory2_0+0xfbfebf10>
 400bf8c:	003ff606 	br	400bf68 <__alt_mem_onchip_memory2_0+0xfbfebf68>
 400bf90:	18bff916 	blt	r3,r2,400bf78 <__alt_mem_onchip_memory2_0+0xfbfebf78>
 400bf94:	10c00316 	blt	r2,r3,400bfa4 <__gedf2+0xc4>
 400bf98:	42bff736 	bltu	r8,r10,400bf78 <__alt_mem_onchip_memory2_0+0xfbfebf78>
 400bf9c:	52000326 	beq	r10,r8,400bfac <__gedf2+0xcc>
 400bfa0:	5200042e 	bgeu	r10,r8,400bfb4 <__gedf2+0xd4>
 400bfa4:	283fec1e 	bne	r5,zero,400bf58 <__alt_mem_onchip_memory2_0+0xfbfebf58>
 400bfa8:	003ff406 	br	400bf7c <__alt_mem_onchip_memory2_0+0xfbfebf7c>
 400bfac:	313ff236 	bltu	r6,r4,400bf78 <__alt_mem_onchip_memory2_0+0xfbfebf78>
 400bfb0:	21bffc36 	bltu	r4,r6,400bfa4 <__alt_mem_onchip_memory2_0+0xfbfebfa4>
 400bfb4:	0005883a 	mov	r2,zero
 400bfb8:	f800283a 	ret

0400bfbc <__ledf2>:
 400bfbc:	2804d53a 	srli	r2,r5,20
 400bfc0:	3810d53a 	srli	r8,r7,20
 400bfc4:	00c00434 	movhi	r3,16
 400bfc8:	18ffffc4 	addi	r3,r3,-1
 400bfcc:	1081ffcc 	andi	r2,r2,2047
 400bfd0:	0241ffc4 	movi	r9,2047
 400bfd4:	28d4703a 	and	r10,r5,r3
 400bfd8:	4201ffcc 	andi	r8,r8,2047
 400bfdc:	38c6703a 	and	r3,r7,r3
 400bfe0:	280ad7fa 	srli	r5,r5,31
 400bfe4:	380ed7fa 	srli	r7,r7,31
 400bfe8:	12401f26 	beq	r2,r9,400c068 <__ledf2+0xac>
 400bfec:	0241ffc4 	movi	r9,2047
 400bff0:	42401426 	beq	r8,r9,400c044 <__ledf2+0x88>
 400bff4:	1000091e 	bne	r2,zero,400c01c <__ledf2+0x60>
 400bff8:	2296b03a 	or	r11,r4,r10
 400bffc:	5813003a 	cmpeq	r9,r11,zero
 400c000:	29403fcc 	andi	r5,r5,255
 400c004:	40000a1e 	bne	r8,zero,400c030 <__ledf2+0x74>
 400c008:	30d8b03a 	or	r12,r6,r3
 400c00c:	6000081e 	bne	r12,zero,400c030 <__ledf2+0x74>
 400c010:	0005883a 	mov	r2,zero
 400c014:	5800111e 	bne	r11,zero,400c05c <__ledf2+0xa0>
 400c018:	f800283a 	ret
 400c01c:	29403fcc 	andi	r5,r5,255
 400c020:	40000c1e 	bne	r8,zero,400c054 <__ledf2+0x98>
 400c024:	30d2b03a 	or	r9,r6,r3
 400c028:	48000c26 	beq	r9,zero,400c05c <__ledf2+0xa0>
 400c02c:	0013883a 	mov	r9,zero
 400c030:	39c03fcc 	andi	r7,r7,255
 400c034:	48000826 	beq	r9,zero,400c058 <__ledf2+0x9c>
 400c038:	38001126 	beq	r7,zero,400c080 <__ledf2+0xc4>
 400c03c:	00800044 	movi	r2,1
 400c040:	f800283a 	ret
 400c044:	30d2b03a 	or	r9,r6,r3
 400c048:	483fea26 	beq	r9,zero,400bff4 <__alt_mem_onchip_memory2_0+0xfbfebff4>
 400c04c:	00800084 	movi	r2,2
 400c050:	f800283a 	ret
 400c054:	39c03fcc 	andi	r7,r7,255
 400c058:	39400726 	beq	r7,r5,400c078 <__ledf2+0xbc>
 400c05c:	2800081e 	bne	r5,zero,400c080 <__ledf2+0xc4>
 400c060:	00800044 	movi	r2,1
 400c064:	f800283a 	ret
 400c068:	2292b03a 	or	r9,r4,r10
 400c06c:	483fdf26 	beq	r9,zero,400bfec <__alt_mem_onchip_memory2_0+0xfbfebfec>
 400c070:	00800084 	movi	r2,2
 400c074:	f800283a 	ret
 400c078:	4080030e 	bge	r8,r2,400c088 <__ledf2+0xcc>
 400c07c:	383fef26 	beq	r7,zero,400c03c <__alt_mem_onchip_memory2_0+0xfbfec03c>
 400c080:	00bfffc4 	movi	r2,-1
 400c084:	f800283a 	ret
 400c088:	123feb16 	blt	r2,r8,400c038 <__alt_mem_onchip_memory2_0+0xfbfec038>
 400c08c:	1abff336 	bltu	r3,r10,400c05c <__alt_mem_onchip_memory2_0+0xfbfec05c>
 400c090:	50c00326 	beq	r10,r3,400c0a0 <__ledf2+0xe4>
 400c094:	50c0042e 	bgeu	r10,r3,400c0a8 <__ledf2+0xec>
 400c098:	283fe81e 	bne	r5,zero,400c03c <__alt_mem_onchip_memory2_0+0xfbfec03c>
 400c09c:	003ff806 	br	400c080 <__alt_mem_onchip_memory2_0+0xfbfec080>
 400c0a0:	313fee36 	bltu	r6,r4,400c05c <__alt_mem_onchip_memory2_0+0xfbfec05c>
 400c0a4:	21bffc36 	bltu	r4,r6,400c098 <__alt_mem_onchip_memory2_0+0xfbfec098>
 400c0a8:	0005883a 	mov	r2,zero
 400c0ac:	f800283a 	ret

0400c0b0 <__muldf3>:
 400c0b0:	defff304 	addi	sp,sp,-52
 400c0b4:	2804d53a 	srli	r2,r5,20
 400c0b8:	dd800915 	stw	r22,36(sp)
 400c0bc:	282cd7fa 	srli	r22,r5,31
 400c0c0:	dc000315 	stw	r16,12(sp)
 400c0c4:	04000434 	movhi	r16,16
 400c0c8:	dd400815 	stw	r21,32(sp)
 400c0cc:	dc800515 	stw	r18,20(sp)
 400c0d0:	843fffc4 	addi	r16,r16,-1
 400c0d4:	dfc00c15 	stw	ra,48(sp)
 400c0d8:	df000b15 	stw	fp,44(sp)
 400c0dc:	ddc00a15 	stw	r23,40(sp)
 400c0e0:	dd000715 	stw	r20,28(sp)
 400c0e4:	dcc00615 	stw	r19,24(sp)
 400c0e8:	dc400415 	stw	r17,16(sp)
 400c0ec:	1481ffcc 	andi	r18,r2,2047
 400c0f0:	2c20703a 	and	r16,r5,r16
 400c0f4:	b02b883a 	mov	r21,r22
 400c0f8:	b2403fcc 	andi	r9,r22,255
 400c0fc:	90006026 	beq	r18,zero,400c280 <__muldf3+0x1d0>
 400c100:	0081ffc4 	movi	r2,2047
 400c104:	2029883a 	mov	r20,r4
 400c108:	90803626 	beq	r18,r2,400c1e4 <__muldf3+0x134>
 400c10c:	80800434 	orhi	r2,r16,16
 400c110:	100490fa 	slli	r2,r2,3
 400c114:	2020d77a 	srli	r16,r4,29
 400c118:	202890fa 	slli	r20,r4,3
 400c11c:	94bf0044 	addi	r18,r18,-1023
 400c120:	80a0b03a 	or	r16,r16,r2
 400c124:	0027883a 	mov	r19,zero
 400c128:	0039883a 	mov	fp,zero
 400c12c:	3804d53a 	srli	r2,r7,20
 400c130:	382ed7fa 	srli	r23,r7,31
 400c134:	04400434 	movhi	r17,16
 400c138:	8c7fffc4 	addi	r17,r17,-1
 400c13c:	1081ffcc 	andi	r2,r2,2047
 400c140:	3011883a 	mov	r8,r6
 400c144:	3c62703a 	and	r17,r7,r17
 400c148:	ba803fcc 	andi	r10,r23,255
 400c14c:	10006d26 	beq	r2,zero,400c304 <__muldf3+0x254>
 400c150:	00c1ffc4 	movi	r3,2047
 400c154:	10c06526 	beq	r2,r3,400c2ec <__muldf3+0x23c>
 400c158:	88c00434 	orhi	r3,r17,16
 400c15c:	180690fa 	slli	r3,r3,3
 400c160:	3022d77a 	srli	r17,r6,29
 400c164:	301090fa 	slli	r8,r6,3
 400c168:	10bf0044 	addi	r2,r2,-1023
 400c16c:	88e2b03a 	or	r17,r17,r3
 400c170:	000b883a 	mov	r5,zero
 400c174:	9085883a 	add	r2,r18,r2
 400c178:	2cc8b03a 	or	r4,r5,r19
 400c17c:	00c003c4 	movi	r3,15
 400c180:	bdacf03a 	xor	r22,r23,r22
 400c184:	12c00044 	addi	r11,r2,1
 400c188:	19009936 	bltu	r3,r4,400c3f0 <__muldf3+0x340>
 400c18c:	200890ba 	slli	r4,r4,2
 400c190:	00c10074 	movhi	r3,1025
 400c194:	18f06904 	addi	r3,r3,-15964
 400c198:	20c9883a 	add	r4,r4,r3
 400c19c:	20c00017 	ldw	r3,0(r4)
 400c1a0:	1800683a 	jmp	r3
 400c1a4:	0400c3f0 	cmpltui	r16,zero,783
 400c1a8:	0400c204 	movi	r16,776
 400c1ac:	0400c204 	movi	r16,776
 400c1b0:	0400c200 	call	400c20 <OSCtxSw_SWITCH_PC+0x400be0>
 400c1b4:	0400c3cc 	andi	r16,zero,783
 400c1b8:	0400c3cc 	andi	r16,zero,783
 400c1bc:	0400c3b4 	movhi	r16,782
 400c1c0:	0400c200 	call	400c20 <OSCtxSw_SWITCH_PC+0x400be0>
 400c1c4:	0400c3cc 	andi	r16,zero,783
 400c1c8:	0400c3b4 	movhi	r16,782
 400c1cc:	0400c3cc 	andi	r16,zero,783
 400c1d0:	0400c200 	call	400c20 <OSCtxSw_SWITCH_PC+0x400be0>
 400c1d4:	0400c3dc 	xori	r16,zero,783
 400c1d8:	0400c3dc 	xori	r16,zero,783
 400c1dc:	0400c3dc 	xori	r16,zero,783
 400c1e0:	0400c5f8 	rdprs	r16,zero,791
 400c1e4:	2404b03a 	or	r2,r4,r16
 400c1e8:	10006f1e 	bne	r2,zero,400c3a8 <__muldf3+0x2f8>
 400c1ec:	04c00204 	movi	r19,8
 400c1f0:	0021883a 	mov	r16,zero
 400c1f4:	0029883a 	mov	r20,zero
 400c1f8:	07000084 	movi	fp,2
 400c1fc:	003fcb06 	br	400c12c <__alt_mem_onchip_memory2_0+0xfbfec12c>
 400c200:	502d883a 	mov	r22,r10
 400c204:	00800084 	movi	r2,2
 400c208:	28805726 	beq	r5,r2,400c368 <__muldf3+0x2b8>
 400c20c:	008000c4 	movi	r2,3
 400c210:	28816626 	beq	r5,r2,400c7ac <__muldf3+0x6fc>
 400c214:	00800044 	movi	r2,1
 400c218:	2881411e 	bne	r5,r2,400c720 <__muldf3+0x670>
 400c21c:	b02b883a 	mov	r21,r22
 400c220:	0005883a 	mov	r2,zero
 400c224:	000b883a 	mov	r5,zero
 400c228:	0029883a 	mov	r20,zero
 400c22c:	1004953a 	slli	r2,r2,20
 400c230:	a8c03fcc 	andi	r3,r21,255
 400c234:	04400434 	movhi	r17,16
 400c238:	8c7fffc4 	addi	r17,r17,-1
 400c23c:	180697fa 	slli	r3,r3,31
 400c240:	2c4a703a 	and	r5,r5,r17
 400c244:	288ab03a 	or	r5,r5,r2
 400c248:	28c6b03a 	or	r3,r5,r3
 400c24c:	a005883a 	mov	r2,r20
 400c250:	dfc00c17 	ldw	ra,48(sp)
 400c254:	df000b17 	ldw	fp,44(sp)
 400c258:	ddc00a17 	ldw	r23,40(sp)
 400c25c:	dd800917 	ldw	r22,36(sp)
 400c260:	dd400817 	ldw	r21,32(sp)
 400c264:	dd000717 	ldw	r20,28(sp)
 400c268:	dcc00617 	ldw	r19,24(sp)
 400c26c:	dc800517 	ldw	r18,20(sp)
 400c270:	dc400417 	ldw	r17,16(sp)
 400c274:	dc000317 	ldw	r16,12(sp)
 400c278:	dec00d04 	addi	sp,sp,52
 400c27c:	f800283a 	ret
 400c280:	2404b03a 	or	r2,r4,r16
 400c284:	2027883a 	mov	r19,r4
 400c288:	10004226 	beq	r2,zero,400c394 <__muldf3+0x2e4>
 400c28c:	8000fc26 	beq	r16,zero,400c680 <__muldf3+0x5d0>
 400c290:	8009883a 	mov	r4,r16
 400c294:	d9800215 	stw	r6,8(sp)
 400c298:	d9c00015 	stw	r7,0(sp)
 400c29c:	da400115 	stw	r9,4(sp)
 400c2a0:	400d2c80 	call	400d2c8 <__clzsi2>
 400c2a4:	d9800217 	ldw	r6,8(sp)
 400c2a8:	d9c00017 	ldw	r7,0(sp)
 400c2ac:	da400117 	ldw	r9,4(sp)
 400c2b0:	113ffd44 	addi	r4,r2,-11
 400c2b4:	00c00704 	movi	r3,28
 400c2b8:	1900ed16 	blt	r3,r4,400c670 <__muldf3+0x5c0>
 400c2bc:	00c00744 	movi	r3,29
 400c2c0:	147ffe04 	addi	r17,r2,-8
 400c2c4:	1907c83a 	sub	r3,r3,r4
 400c2c8:	8460983a 	sll	r16,r16,r17
 400c2cc:	98c6d83a 	srl	r3,r19,r3
 400c2d0:	9c68983a 	sll	r20,r19,r17
 400c2d4:	1c20b03a 	or	r16,r3,r16
 400c2d8:	1080fcc4 	addi	r2,r2,1011
 400c2dc:	00a5c83a 	sub	r18,zero,r2
 400c2e0:	0027883a 	mov	r19,zero
 400c2e4:	0039883a 	mov	fp,zero
 400c2e8:	003f9006 	br	400c12c <__alt_mem_onchip_memory2_0+0xfbfec12c>
 400c2ec:	3446b03a 	or	r3,r6,r17
 400c2f0:	1800261e 	bne	r3,zero,400c38c <__muldf3+0x2dc>
 400c2f4:	0023883a 	mov	r17,zero
 400c2f8:	0011883a 	mov	r8,zero
 400c2fc:	01400084 	movi	r5,2
 400c300:	003f9c06 	br	400c174 <__alt_mem_onchip_memory2_0+0xfbfec174>
 400c304:	3446b03a 	or	r3,r6,r17
 400c308:	18001c26 	beq	r3,zero,400c37c <__muldf3+0x2cc>
 400c30c:	8800ce26 	beq	r17,zero,400c648 <__muldf3+0x598>
 400c310:	8809883a 	mov	r4,r17
 400c314:	d9800215 	stw	r6,8(sp)
 400c318:	da400115 	stw	r9,4(sp)
 400c31c:	da800015 	stw	r10,0(sp)
 400c320:	400d2c80 	call	400d2c8 <__clzsi2>
 400c324:	d9800217 	ldw	r6,8(sp)
 400c328:	da400117 	ldw	r9,4(sp)
 400c32c:	da800017 	ldw	r10,0(sp)
 400c330:	113ffd44 	addi	r4,r2,-11
 400c334:	00c00704 	movi	r3,28
 400c338:	1900bf16 	blt	r3,r4,400c638 <__muldf3+0x588>
 400c33c:	00c00744 	movi	r3,29
 400c340:	123ffe04 	addi	r8,r2,-8
 400c344:	1907c83a 	sub	r3,r3,r4
 400c348:	8a22983a 	sll	r17,r17,r8
 400c34c:	30c6d83a 	srl	r3,r6,r3
 400c350:	3210983a 	sll	r8,r6,r8
 400c354:	1c62b03a 	or	r17,r3,r17
 400c358:	1080fcc4 	addi	r2,r2,1011
 400c35c:	0085c83a 	sub	r2,zero,r2
 400c360:	000b883a 	mov	r5,zero
 400c364:	003f8306 	br	400c174 <__alt_mem_onchip_memory2_0+0xfbfec174>
 400c368:	b02b883a 	mov	r21,r22
 400c36c:	0081ffc4 	movi	r2,2047
 400c370:	000b883a 	mov	r5,zero
 400c374:	0029883a 	mov	r20,zero
 400c378:	003fac06 	br	400c22c <__alt_mem_onchip_memory2_0+0xfbfec22c>
 400c37c:	0023883a 	mov	r17,zero
 400c380:	0011883a 	mov	r8,zero
 400c384:	01400044 	movi	r5,1
 400c388:	003f7a06 	br	400c174 <__alt_mem_onchip_memory2_0+0xfbfec174>
 400c38c:	014000c4 	movi	r5,3
 400c390:	003f7806 	br	400c174 <__alt_mem_onchip_memory2_0+0xfbfec174>
 400c394:	04c00104 	movi	r19,4
 400c398:	0021883a 	mov	r16,zero
 400c39c:	0029883a 	mov	r20,zero
 400c3a0:	07000044 	movi	fp,1
 400c3a4:	003f6106 	br	400c12c <__alt_mem_onchip_memory2_0+0xfbfec12c>
 400c3a8:	04c00304 	movi	r19,12
 400c3ac:	070000c4 	movi	fp,3
 400c3b0:	003f5e06 	br	400c12c <__alt_mem_onchip_memory2_0+0xfbfec12c>
 400c3b4:	01400434 	movhi	r5,16
 400c3b8:	002b883a 	mov	r21,zero
 400c3bc:	297fffc4 	addi	r5,r5,-1
 400c3c0:	053fffc4 	movi	r20,-1
 400c3c4:	0081ffc4 	movi	r2,2047
 400c3c8:	003f9806 	br	400c22c <__alt_mem_onchip_memory2_0+0xfbfec22c>
 400c3cc:	8023883a 	mov	r17,r16
 400c3d0:	a011883a 	mov	r8,r20
 400c3d4:	e00b883a 	mov	r5,fp
 400c3d8:	003f8a06 	br	400c204 <__alt_mem_onchip_memory2_0+0xfbfec204>
 400c3dc:	8023883a 	mov	r17,r16
 400c3e0:	a011883a 	mov	r8,r20
 400c3e4:	482d883a 	mov	r22,r9
 400c3e8:	e00b883a 	mov	r5,fp
 400c3ec:	003f8506 	br	400c204 <__alt_mem_onchip_memory2_0+0xfbfec204>
 400c3f0:	a00ad43a 	srli	r5,r20,16
 400c3f4:	401ad43a 	srli	r13,r8,16
 400c3f8:	a53fffcc 	andi	r20,r20,65535
 400c3fc:	423fffcc 	andi	r8,r8,65535
 400c400:	4519383a 	mul	r12,r8,r20
 400c404:	4147383a 	mul	r3,r8,r5
 400c408:	6d09383a 	mul	r4,r13,r20
 400c40c:	600cd43a 	srli	r6,r12,16
 400c410:	2b5d383a 	mul	r14,r5,r13
 400c414:	20c9883a 	add	r4,r4,r3
 400c418:	310d883a 	add	r6,r6,r4
 400c41c:	30c0022e 	bgeu	r6,r3,400c428 <__muldf3+0x378>
 400c420:	00c00074 	movhi	r3,1
 400c424:	70dd883a 	add	r14,r14,r3
 400c428:	8826d43a 	srli	r19,r17,16
 400c42c:	8bffffcc 	andi	r15,r17,65535
 400c430:	7d23383a 	mul	r17,r15,r20
 400c434:	7949383a 	mul	r4,r15,r5
 400c438:	9d29383a 	mul	r20,r19,r20
 400c43c:	8814d43a 	srli	r10,r17,16
 400c440:	3012943a 	slli	r9,r6,16
 400c444:	a129883a 	add	r20,r20,r4
 400c448:	633fffcc 	andi	r12,r12,65535
 400c44c:	5515883a 	add	r10,r10,r20
 400c450:	3006d43a 	srli	r3,r6,16
 400c454:	4b13883a 	add	r9,r9,r12
 400c458:	2ccb383a 	mul	r5,r5,r19
 400c45c:	5100022e 	bgeu	r10,r4,400c468 <__muldf3+0x3b8>
 400c460:	01000074 	movhi	r4,1
 400c464:	290b883a 	add	r5,r5,r4
 400c468:	802ad43a 	srli	r21,r16,16
 400c46c:	843fffcc 	andi	r16,r16,65535
 400c470:	440d383a 	mul	r6,r8,r16
 400c474:	4565383a 	mul	r18,r8,r21
 400c478:	8349383a 	mul	r4,r16,r13
 400c47c:	500e943a 	slli	r7,r10,16
 400c480:	3010d43a 	srli	r8,r6,16
 400c484:	5028d43a 	srli	r20,r10,16
 400c488:	2489883a 	add	r4,r4,r18
 400c48c:	8abfffcc 	andi	r10,r17,65535
 400c490:	3a95883a 	add	r10,r7,r10
 400c494:	4119883a 	add	r12,r8,r4
 400c498:	a169883a 	add	r20,r20,r5
 400c49c:	1a87883a 	add	r3,r3,r10
 400c4a0:	6d5b383a 	mul	r13,r13,r21
 400c4a4:	6480022e 	bgeu	r12,r18,400c4b0 <__muldf3+0x400>
 400c4a8:	01000074 	movhi	r4,1
 400c4ac:	691b883a 	add	r13,r13,r4
 400c4b0:	7c25383a 	mul	r18,r15,r16
 400c4b4:	7d4b383a 	mul	r5,r15,r21
 400c4b8:	84cf383a 	mul	r7,r16,r19
 400c4bc:	901ed43a 	srli	r15,r18,16
 400c4c0:	6008d43a 	srli	r4,r12,16
 400c4c4:	6010943a 	slli	r8,r12,16
 400c4c8:	394f883a 	add	r7,r7,r5
 400c4cc:	333fffcc 	andi	r12,r6,65535
 400c4d0:	79df883a 	add	r15,r15,r7
 400c4d4:	235b883a 	add	r13,r4,r13
 400c4d8:	9d63383a 	mul	r17,r19,r21
 400c4dc:	4309883a 	add	r4,r8,r12
 400c4e0:	7940022e 	bgeu	r15,r5,400c4ec <__muldf3+0x43c>
 400c4e4:	01400074 	movhi	r5,1
 400c4e8:	8963883a 	add	r17,r17,r5
 400c4ec:	780a943a 	slli	r5,r15,16
 400c4f0:	91bfffcc 	andi	r6,r18,65535
 400c4f4:	70c7883a 	add	r3,r14,r3
 400c4f8:	298d883a 	add	r6,r5,r6
 400c4fc:	1a8f803a 	cmpltu	r7,r3,r10
 400c500:	350b883a 	add	r5,r6,r20
 400c504:	20c7883a 	add	r3,r4,r3
 400c508:	3955883a 	add	r10,r7,r5
 400c50c:	1909803a 	cmpltu	r4,r3,r4
 400c510:	6a91883a 	add	r8,r13,r10
 400c514:	780cd43a 	srli	r6,r15,16
 400c518:	2219883a 	add	r12,r4,r8
 400c51c:	2d0b803a 	cmpltu	r5,r5,r20
 400c520:	51cf803a 	cmpltu	r7,r10,r7
 400c524:	29ceb03a 	or	r7,r5,r7
 400c528:	4351803a 	cmpltu	r8,r8,r13
 400c52c:	610b803a 	cmpltu	r5,r12,r4
 400c530:	4148b03a 	or	r4,r8,r5
 400c534:	398f883a 	add	r7,r7,r6
 400c538:	3909883a 	add	r4,r7,r4
 400c53c:	1810927a 	slli	r8,r3,9
 400c540:	2449883a 	add	r4,r4,r17
 400c544:	2008927a 	slli	r4,r4,9
 400c548:	6022d5fa 	srli	r17,r12,23
 400c54c:	1806d5fa 	srli	r3,r3,23
 400c550:	4252b03a 	or	r9,r8,r9
 400c554:	600a927a 	slli	r5,r12,9
 400c558:	4810c03a 	cmpne	r8,r9,zero
 400c55c:	2462b03a 	or	r17,r4,r17
 400c560:	40c6b03a 	or	r3,r8,r3
 400c564:	8900402c 	andhi	r4,r17,256
 400c568:	1950b03a 	or	r8,r3,r5
 400c56c:	20000726 	beq	r4,zero,400c58c <__muldf3+0x4dc>
 400c570:	4006d07a 	srli	r3,r8,1
 400c574:	880497fa 	slli	r2,r17,31
 400c578:	4200004c 	andi	r8,r8,1
 400c57c:	8822d07a 	srli	r17,r17,1
 400c580:	1a10b03a 	or	r8,r3,r8
 400c584:	1210b03a 	or	r8,r2,r8
 400c588:	5805883a 	mov	r2,r11
 400c58c:	1140ffc4 	addi	r5,r2,1023
 400c590:	0140440e 	bge	zero,r5,400c6a4 <__muldf3+0x5f4>
 400c594:	40c001cc 	andi	r3,r8,7
 400c598:	18000726 	beq	r3,zero,400c5b8 <__muldf3+0x508>
 400c59c:	40c003cc 	andi	r3,r8,15
 400c5a0:	01000104 	movi	r4,4
 400c5a4:	19000426 	beq	r3,r4,400c5b8 <__muldf3+0x508>
 400c5a8:	4107883a 	add	r3,r8,r4
 400c5ac:	1a11803a 	cmpltu	r8,r3,r8
 400c5b0:	8a23883a 	add	r17,r17,r8
 400c5b4:	1811883a 	mov	r8,r3
 400c5b8:	88c0402c 	andhi	r3,r17,256
 400c5bc:	18000426 	beq	r3,zero,400c5d0 <__muldf3+0x520>
 400c5c0:	11410004 	addi	r5,r2,1024
 400c5c4:	00bfc034 	movhi	r2,65280
 400c5c8:	10bfffc4 	addi	r2,r2,-1
 400c5cc:	88a2703a 	and	r17,r17,r2
 400c5d0:	0081ff84 	movi	r2,2046
 400c5d4:	117f6416 	blt	r2,r5,400c368 <__alt_mem_onchip_memory2_0+0xfbfec368>
 400c5d8:	8828977a 	slli	r20,r17,29
 400c5dc:	4010d0fa 	srli	r8,r8,3
 400c5e0:	8822927a 	slli	r17,r17,9
 400c5e4:	2881ffcc 	andi	r2,r5,2047
 400c5e8:	a228b03a 	or	r20,r20,r8
 400c5ec:	880ad33a 	srli	r5,r17,12
 400c5f0:	b02b883a 	mov	r21,r22
 400c5f4:	003f0d06 	br	400c22c <__alt_mem_onchip_memory2_0+0xfbfec22c>
 400c5f8:	8080022c 	andhi	r2,r16,8
 400c5fc:	10000926 	beq	r2,zero,400c624 <__muldf3+0x574>
 400c600:	8880022c 	andhi	r2,r17,8
 400c604:	1000071e 	bne	r2,zero,400c624 <__muldf3+0x574>
 400c608:	00800434 	movhi	r2,16
 400c60c:	89400234 	orhi	r5,r17,8
 400c610:	10bfffc4 	addi	r2,r2,-1
 400c614:	b82b883a 	mov	r21,r23
 400c618:	288a703a 	and	r5,r5,r2
 400c61c:	4029883a 	mov	r20,r8
 400c620:	003f6806 	br	400c3c4 <__alt_mem_onchip_memory2_0+0xfbfec3c4>
 400c624:	00800434 	movhi	r2,16
 400c628:	81400234 	orhi	r5,r16,8
 400c62c:	10bfffc4 	addi	r2,r2,-1
 400c630:	288a703a 	and	r5,r5,r2
 400c634:	003f6306 	br	400c3c4 <__alt_mem_onchip_memory2_0+0xfbfec3c4>
 400c638:	147ff604 	addi	r17,r2,-40
 400c63c:	3462983a 	sll	r17,r6,r17
 400c640:	0011883a 	mov	r8,zero
 400c644:	003f4406 	br	400c358 <__alt_mem_onchip_memory2_0+0xfbfec358>
 400c648:	3009883a 	mov	r4,r6
 400c64c:	d9800215 	stw	r6,8(sp)
 400c650:	da400115 	stw	r9,4(sp)
 400c654:	da800015 	stw	r10,0(sp)
 400c658:	400d2c80 	call	400d2c8 <__clzsi2>
 400c65c:	10800804 	addi	r2,r2,32
 400c660:	da800017 	ldw	r10,0(sp)
 400c664:	da400117 	ldw	r9,4(sp)
 400c668:	d9800217 	ldw	r6,8(sp)
 400c66c:	003f3006 	br	400c330 <__alt_mem_onchip_memory2_0+0xfbfec330>
 400c670:	143ff604 	addi	r16,r2,-40
 400c674:	9c20983a 	sll	r16,r19,r16
 400c678:	0029883a 	mov	r20,zero
 400c67c:	003f1606 	br	400c2d8 <__alt_mem_onchip_memory2_0+0xfbfec2d8>
 400c680:	d9800215 	stw	r6,8(sp)
 400c684:	d9c00015 	stw	r7,0(sp)
 400c688:	da400115 	stw	r9,4(sp)
 400c68c:	400d2c80 	call	400d2c8 <__clzsi2>
 400c690:	10800804 	addi	r2,r2,32
 400c694:	da400117 	ldw	r9,4(sp)
 400c698:	d9c00017 	ldw	r7,0(sp)
 400c69c:	d9800217 	ldw	r6,8(sp)
 400c6a0:	003f0306 	br	400c2b0 <__alt_mem_onchip_memory2_0+0xfbfec2b0>
 400c6a4:	00c00044 	movi	r3,1
 400c6a8:	1947c83a 	sub	r3,r3,r5
 400c6ac:	00800e04 	movi	r2,56
 400c6b0:	10feda16 	blt	r2,r3,400c21c <__alt_mem_onchip_memory2_0+0xfbfec21c>
 400c6b4:	008007c4 	movi	r2,31
 400c6b8:	10c01b16 	blt	r2,r3,400c728 <__muldf3+0x678>
 400c6bc:	00800804 	movi	r2,32
 400c6c0:	10c5c83a 	sub	r2,r2,r3
 400c6c4:	888a983a 	sll	r5,r17,r2
 400c6c8:	40c8d83a 	srl	r4,r8,r3
 400c6cc:	4084983a 	sll	r2,r8,r2
 400c6d0:	88e2d83a 	srl	r17,r17,r3
 400c6d4:	2906b03a 	or	r3,r5,r4
 400c6d8:	1004c03a 	cmpne	r2,r2,zero
 400c6dc:	1886b03a 	or	r3,r3,r2
 400c6e0:	188001cc 	andi	r2,r3,7
 400c6e4:	10000726 	beq	r2,zero,400c704 <__muldf3+0x654>
 400c6e8:	188003cc 	andi	r2,r3,15
 400c6ec:	01000104 	movi	r4,4
 400c6f0:	11000426 	beq	r2,r4,400c704 <__muldf3+0x654>
 400c6f4:	1805883a 	mov	r2,r3
 400c6f8:	10c00104 	addi	r3,r2,4
 400c6fc:	1885803a 	cmpltu	r2,r3,r2
 400c700:	88a3883a 	add	r17,r17,r2
 400c704:	8880202c 	andhi	r2,r17,128
 400c708:	10001c26 	beq	r2,zero,400c77c <__muldf3+0x6cc>
 400c70c:	b02b883a 	mov	r21,r22
 400c710:	00800044 	movi	r2,1
 400c714:	000b883a 	mov	r5,zero
 400c718:	0029883a 	mov	r20,zero
 400c71c:	003ec306 	br	400c22c <__alt_mem_onchip_memory2_0+0xfbfec22c>
 400c720:	5805883a 	mov	r2,r11
 400c724:	003f9906 	br	400c58c <__alt_mem_onchip_memory2_0+0xfbfec58c>
 400c728:	00bff844 	movi	r2,-31
 400c72c:	1145c83a 	sub	r2,r2,r5
 400c730:	8888d83a 	srl	r4,r17,r2
 400c734:	00800804 	movi	r2,32
 400c738:	18801a26 	beq	r3,r2,400c7a4 <__muldf3+0x6f4>
 400c73c:	00801004 	movi	r2,64
 400c740:	10c5c83a 	sub	r2,r2,r3
 400c744:	8884983a 	sll	r2,r17,r2
 400c748:	1204b03a 	or	r2,r2,r8
 400c74c:	1004c03a 	cmpne	r2,r2,zero
 400c750:	2084b03a 	or	r2,r4,r2
 400c754:	144001cc 	andi	r17,r2,7
 400c758:	88000d1e 	bne	r17,zero,400c790 <__muldf3+0x6e0>
 400c75c:	000b883a 	mov	r5,zero
 400c760:	1028d0fa 	srli	r20,r2,3
 400c764:	b02b883a 	mov	r21,r22
 400c768:	0005883a 	mov	r2,zero
 400c76c:	a468b03a 	or	r20,r20,r17
 400c770:	003eae06 	br	400c22c <__alt_mem_onchip_memory2_0+0xfbfec22c>
 400c774:	1007883a 	mov	r3,r2
 400c778:	0023883a 	mov	r17,zero
 400c77c:	880a927a 	slli	r5,r17,9
 400c780:	1805883a 	mov	r2,r3
 400c784:	8822977a 	slli	r17,r17,29
 400c788:	280ad33a 	srli	r5,r5,12
 400c78c:	003ff406 	br	400c760 <__alt_mem_onchip_memory2_0+0xfbfec760>
 400c790:	10c003cc 	andi	r3,r2,15
 400c794:	01000104 	movi	r4,4
 400c798:	193ff626 	beq	r3,r4,400c774 <__alt_mem_onchip_memory2_0+0xfbfec774>
 400c79c:	0023883a 	mov	r17,zero
 400c7a0:	003fd506 	br	400c6f8 <__alt_mem_onchip_memory2_0+0xfbfec6f8>
 400c7a4:	0005883a 	mov	r2,zero
 400c7a8:	003fe706 	br	400c748 <__alt_mem_onchip_memory2_0+0xfbfec748>
 400c7ac:	00800434 	movhi	r2,16
 400c7b0:	89400234 	orhi	r5,r17,8
 400c7b4:	10bfffc4 	addi	r2,r2,-1
 400c7b8:	b02b883a 	mov	r21,r22
 400c7bc:	288a703a 	and	r5,r5,r2
 400c7c0:	4029883a 	mov	r20,r8
 400c7c4:	003eff06 	br	400c3c4 <__alt_mem_onchip_memory2_0+0xfbfec3c4>

0400c7c8 <__subdf3>:
 400c7c8:	02000434 	movhi	r8,16
 400c7cc:	423fffc4 	addi	r8,r8,-1
 400c7d0:	defffb04 	addi	sp,sp,-20
 400c7d4:	2a14703a 	and	r10,r5,r8
 400c7d8:	3812d53a 	srli	r9,r7,20
 400c7dc:	3a10703a 	and	r8,r7,r8
 400c7e0:	2006d77a 	srli	r3,r4,29
 400c7e4:	3004d77a 	srli	r2,r6,29
 400c7e8:	dc000015 	stw	r16,0(sp)
 400c7ec:	501490fa 	slli	r10,r10,3
 400c7f0:	2820d53a 	srli	r16,r5,20
 400c7f4:	401090fa 	slli	r8,r8,3
 400c7f8:	dc800215 	stw	r18,8(sp)
 400c7fc:	dc400115 	stw	r17,4(sp)
 400c800:	dfc00415 	stw	ra,16(sp)
 400c804:	202290fa 	slli	r17,r4,3
 400c808:	dcc00315 	stw	r19,12(sp)
 400c80c:	4a41ffcc 	andi	r9,r9,2047
 400c810:	0101ffc4 	movi	r4,2047
 400c814:	2824d7fa 	srli	r18,r5,31
 400c818:	8401ffcc 	andi	r16,r16,2047
 400c81c:	50c6b03a 	or	r3,r10,r3
 400c820:	380ed7fa 	srli	r7,r7,31
 400c824:	408ab03a 	or	r5,r8,r2
 400c828:	300c90fa 	slli	r6,r6,3
 400c82c:	49009626 	beq	r9,r4,400ca88 <__subdf3+0x2c0>
 400c830:	39c0005c 	xori	r7,r7,1
 400c834:	8245c83a 	sub	r2,r16,r9
 400c838:	3c807426 	beq	r7,r18,400ca0c <__subdf3+0x244>
 400c83c:	0080af0e 	bge	zero,r2,400cafc <__subdf3+0x334>
 400c840:	48002a1e 	bne	r9,zero,400c8ec <__subdf3+0x124>
 400c844:	2988b03a 	or	r4,r5,r6
 400c848:	20009a1e 	bne	r4,zero,400cab4 <__subdf3+0x2ec>
 400c84c:	888001cc 	andi	r2,r17,7
 400c850:	10000726 	beq	r2,zero,400c870 <__subdf3+0xa8>
 400c854:	888003cc 	andi	r2,r17,15
 400c858:	01000104 	movi	r4,4
 400c85c:	11000426 	beq	r2,r4,400c870 <__subdf3+0xa8>
 400c860:	890b883a 	add	r5,r17,r4
 400c864:	2c63803a 	cmpltu	r17,r5,r17
 400c868:	1c47883a 	add	r3,r3,r17
 400c86c:	2823883a 	mov	r17,r5
 400c870:	1880202c 	andhi	r2,r3,128
 400c874:	10005926 	beq	r2,zero,400c9dc <__subdf3+0x214>
 400c878:	84000044 	addi	r16,r16,1
 400c87c:	0081ffc4 	movi	r2,2047
 400c880:	8080be26 	beq	r16,r2,400cb7c <__subdf3+0x3b4>
 400c884:	017fe034 	movhi	r5,65408
 400c888:	297fffc4 	addi	r5,r5,-1
 400c88c:	1946703a 	and	r3,r3,r5
 400c890:	1804977a 	slli	r2,r3,29
 400c894:	1806927a 	slli	r3,r3,9
 400c898:	8822d0fa 	srli	r17,r17,3
 400c89c:	8401ffcc 	andi	r16,r16,2047
 400c8a0:	180ad33a 	srli	r5,r3,12
 400c8a4:	9100004c 	andi	r4,r18,1
 400c8a8:	1444b03a 	or	r2,r2,r17
 400c8ac:	80c1ffcc 	andi	r3,r16,2047
 400c8b0:	1820953a 	slli	r16,r3,20
 400c8b4:	20c03fcc 	andi	r3,r4,255
 400c8b8:	180897fa 	slli	r4,r3,31
 400c8bc:	00c00434 	movhi	r3,16
 400c8c0:	18ffffc4 	addi	r3,r3,-1
 400c8c4:	28c6703a 	and	r3,r5,r3
 400c8c8:	1c06b03a 	or	r3,r3,r16
 400c8cc:	1906b03a 	or	r3,r3,r4
 400c8d0:	dfc00417 	ldw	ra,16(sp)
 400c8d4:	dcc00317 	ldw	r19,12(sp)
 400c8d8:	dc800217 	ldw	r18,8(sp)
 400c8dc:	dc400117 	ldw	r17,4(sp)
 400c8e0:	dc000017 	ldw	r16,0(sp)
 400c8e4:	dec00504 	addi	sp,sp,20
 400c8e8:	f800283a 	ret
 400c8ec:	0101ffc4 	movi	r4,2047
 400c8f0:	813fd626 	beq	r16,r4,400c84c <__alt_mem_onchip_memory2_0+0xfbfec84c>
 400c8f4:	29402034 	orhi	r5,r5,128
 400c8f8:	01000e04 	movi	r4,56
 400c8fc:	2080a316 	blt	r4,r2,400cb8c <__subdf3+0x3c4>
 400c900:	010007c4 	movi	r4,31
 400c904:	2080c616 	blt	r4,r2,400cc20 <__subdf3+0x458>
 400c908:	01000804 	movi	r4,32
 400c90c:	2089c83a 	sub	r4,r4,r2
 400c910:	2910983a 	sll	r8,r5,r4
 400c914:	308ed83a 	srl	r7,r6,r2
 400c918:	3108983a 	sll	r4,r6,r4
 400c91c:	2884d83a 	srl	r2,r5,r2
 400c920:	41ccb03a 	or	r6,r8,r7
 400c924:	2008c03a 	cmpne	r4,r4,zero
 400c928:	310cb03a 	or	r6,r6,r4
 400c92c:	898dc83a 	sub	r6,r17,r6
 400c930:	89a3803a 	cmpltu	r17,r17,r6
 400c934:	1887c83a 	sub	r3,r3,r2
 400c938:	1c47c83a 	sub	r3,r3,r17
 400c93c:	3023883a 	mov	r17,r6
 400c940:	1880202c 	andhi	r2,r3,128
 400c944:	10002326 	beq	r2,zero,400c9d4 <__subdf3+0x20c>
 400c948:	04c02034 	movhi	r19,128
 400c94c:	9cffffc4 	addi	r19,r19,-1
 400c950:	1ce6703a 	and	r19,r3,r19
 400c954:	98007a26 	beq	r19,zero,400cb40 <__subdf3+0x378>
 400c958:	9809883a 	mov	r4,r19
 400c95c:	400d2c80 	call	400d2c8 <__clzsi2>
 400c960:	113ffe04 	addi	r4,r2,-8
 400c964:	00c007c4 	movi	r3,31
 400c968:	19007b16 	blt	r3,r4,400cb58 <__subdf3+0x390>
 400c96c:	00800804 	movi	r2,32
 400c970:	1105c83a 	sub	r2,r2,r4
 400c974:	8884d83a 	srl	r2,r17,r2
 400c978:	9906983a 	sll	r3,r19,r4
 400c97c:	8922983a 	sll	r17,r17,r4
 400c980:	10c4b03a 	or	r2,r2,r3
 400c984:	24007816 	blt	r4,r16,400cb68 <__subdf3+0x3a0>
 400c988:	2421c83a 	sub	r16,r4,r16
 400c98c:	80c00044 	addi	r3,r16,1
 400c990:	010007c4 	movi	r4,31
 400c994:	20c09516 	blt	r4,r3,400cbec <__subdf3+0x424>
 400c998:	01400804 	movi	r5,32
 400c99c:	28cbc83a 	sub	r5,r5,r3
 400c9a0:	88c8d83a 	srl	r4,r17,r3
 400c9a4:	8962983a 	sll	r17,r17,r5
 400c9a8:	114a983a 	sll	r5,r2,r5
 400c9ac:	10c6d83a 	srl	r3,r2,r3
 400c9b0:	8804c03a 	cmpne	r2,r17,zero
 400c9b4:	290ab03a 	or	r5,r5,r4
 400c9b8:	28a2b03a 	or	r17,r5,r2
 400c9bc:	0021883a 	mov	r16,zero
 400c9c0:	003fa206 	br	400c84c <__alt_mem_onchip_memory2_0+0xfbfec84c>
 400c9c4:	2090b03a 	or	r8,r4,r2
 400c9c8:	40018e26 	beq	r8,zero,400d004 <__subdf3+0x83c>
 400c9cc:	1007883a 	mov	r3,r2
 400c9d0:	2023883a 	mov	r17,r4
 400c9d4:	888001cc 	andi	r2,r17,7
 400c9d8:	103f9e1e 	bne	r2,zero,400c854 <__alt_mem_onchip_memory2_0+0xfbfec854>
 400c9dc:	1804977a 	slli	r2,r3,29
 400c9e0:	8822d0fa 	srli	r17,r17,3
 400c9e4:	1810d0fa 	srli	r8,r3,3
 400c9e8:	9100004c 	andi	r4,r18,1
 400c9ec:	1444b03a 	or	r2,r2,r17
 400c9f0:	00c1ffc4 	movi	r3,2047
 400c9f4:	80c02826 	beq	r16,r3,400ca98 <__subdf3+0x2d0>
 400c9f8:	01400434 	movhi	r5,16
 400c9fc:	297fffc4 	addi	r5,r5,-1
 400ca00:	80e0703a 	and	r16,r16,r3
 400ca04:	414a703a 	and	r5,r8,r5
 400ca08:	003fa806 	br	400c8ac <__alt_mem_onchip_memory2_0+0xfbfec8ac>
 400ca0c:	0080630e 	bge	zero,r2,400cb9c <__subdf3+0x3d4>
 400ca10:	48003026 	beq	r9,zero,400cad4 <__subdf3+0x30c>
 400ca14:	0101ffc4 	movi	r4,2047
 400ca18:	813f8c26 	beq	r16,r4,400c84c <__alt_mem_onchip_memory2_0+0xfbfec84c>
 400ca1c:	29402034 	orhi	r5,r5,128
 400ca20:	01000e04 	movi	r4,56
 400ca24:	2080a90e 	bge	r4,r2,400cccc <__subdf3+0x504>
 400ca28:	298cb03a 	or	r6,r5,r6
 400ca2c:	3012c03a 	cmpne	r9,r6,zero
 400ca30:	0005883a 	mov	r2,zero
 400ca34:	4c53883a 	add	r9,r9,r17
 400ca38:	4c63803a 	cmpltu	r17,r9,r17
 400ca3c:	10c7883a 	add	r3,r2,r3
 400ca40:	88c7883a 	add	r3,r17,r3
 400ca44:	4823883a 	mov	r17,r9
 400ca48:	1880202c 	andhi	r2,r3,128
 400ca4c:	1000d026 	beq	r2,zero,400cd90 <__subdf3+0x5c8>
 400ca50:	84000044 	addi	r16,r16,1
 400ca54:	0081ffc4 	movi	r2,2047
 400ca58:	8080fe26 	beq	r16,r2,400ce54 <__subdf3+0x68c>
 400ca5c:	00bfe034 	movhi	r2,65408
 400ca60:	10bfffc4 	addi	r2,r2,-1
 400ca64:	1886703a 	and	r3,r3,r2
 400ca68:	880ad07a 	srli	r5,r17,1
 400ca6c:	180497fa 	slli	r2,r3,31
 400ca70:	8900004c 	andi	r4,r17,1
 400ca74:	2922b03a 	or	r17,r5,r4
 400ca78:	1806d07a 	srli	r3,r3,1
 400ca7c:	1462b03a 	or	r17,r2,r17
 400ca80:	3825883a 	mov	r18,r7
 400ca84:	003f7106 	br	400c84c <__alt_mem_onchip_memory2_0+0xfbfec84c>
 400ca88:	2984b03a 	or	r2,r5,r6
 400ca8c:	103f6826 	beq	r2,zero,400c830 <__alt_mem_onchip_memory2_0+0xfbfec830>
 400ca90:	39c03fcc 	andi	r7,r7,255
 400ca94:	003f6706 	br	400c834 <__alt_mem_onchip_memory2_0+0xfbfec834>
 400ca98:	4086b03a 	or	r3,r8,r2
 400ca9c:	18015226 	beq	r3,zero,400cfe8 <__subdf3+0x820>
 400caa0:	00c00434 	movhi	r3,16
 400caa4:	41400234 	orhi	r5,r8,8
 400caa8:	18ffffc4 	addi	r3,r3,-1
 400caac:	28ca703a 	and	r5,r5,r3
 400cab0:	003f7e06 	br	400c8ac <__alt_mem_onchip_memory2_0+0xfbfec8ac>
 400cab4:	10bfffc4 	addi	r2,r2,-1
 400cab8:	1000491e 	bne	r2,zero,400cbe0 <__subdf3+0x418>
 400cabc:	898fc83a 	sub	r7,r17,r6
 400cac0:	89e3803a 	cmpltu	r17,r17,r7
 400cac4:	1947c83a 	sub	r3,r3,r5
 400cac8:	1c47c83a 	sub	r3,r3,r17
 400cacc:	3823883a 	mov	r17,r7
 400cad0:	003f9b06 	br	400c940 <__alt_mem_onchip_memory2_0+0xfbfec940>
 400cad4:	2988b03a 	or	r4,r5,r6
 400cad8:	203f5c26 	beq	r4,zero,400c84c <__alt_mem_onchip_memory2_0+0xfbfec84c>
 400cadc:	10bfffc4 	addi	r2,r2,-1
 400cae0:	1000931e 	bne	r2,zero,400cd30 <__subdf3+0x568>
 400cae4:	898d883a 	add	r6,r17,r6
 400cae8:	3463803a 	cmpltu	r17,r6,r17
 400caec:	1947883a 	add	r3,r3,r5
 400caf0:	88c7883a 	add	r3,r17,r3
 400caf4:	3023883a 	mov	r17,r6
 400caf8:	003fd306 	br	400ca48 <__alt_mem_onchip_memory2_0+0xfbfeca48>
 400cafc:	1000541e 	bne	r2,zero,400cc50 <__subdf3+0x488>
 400cb00:	80800044 	addi	r2,r16,1
 400cb04:	1081ffcc 	andi	r2,r2,2047
 400cb08:	01000044 	movi	r4,1
 400cb0c:	2080a20e 	bge	r4,r2,400cd98 <__subdf3+0x5d0>
 400cb10:	8989c83a 	sub	r4,r17,r6
 400cb14:	8905803a 	cmpltu	r2,r17,r4
 400cb18:	1967c83a 	sub	r19,r3,r5
 400cb1c:	98a7c83a 	sub	r19,r19,r2
 400cb20:	9880202c 	andhi	r2,r19,128
 400cb24:	10006326 	beq	r2,zero,400ccb4 <__subdf3+0x4ec>
 400cb28:	3463c83a 	sub	r17,r6,r17
 400cb2c:	28c7c83a 	sub	r3,r5,r3
 400cb30:	344d803a 	cmpltu	r6,r6,r17
 400cb34:	19a7c83a 	sub	r19,r3,r6
 400cb38:	3825883a 	mov	r18,r7
 400cb3c:	983f861e 	bne	r19,zero,400c958 <__alt_mem_onchip_memory2_0+0xfbfec958>
 400cb40:	8809883a 	mov	r4,r17
 400cb44:	400d2c80 	call	400d2c8 <__clzsi2>
 400cb48:	10800804 	addi	r2,r2,32
 400cb4c:	113ffe04 	addi	r4,r2,-8
 400cb50:	00c007c4 	movi	r3,31
 400cb54:	193f850e 	bge	r3,r4,400c96c <__alt_mem_onchip_memory2_0+0xfbfec96c>
 400cb58:	10bff604 	addi	r2,r2,-40
 400cb5c:	8884983a 	sll	r2,r17,r2
 400cb60:	0023883a 	mov	r17,zero
 400cb64:	243f880e 	bge	r4,r16,400c988 <__alt_mem_onchip_memory2_0+0xfbfec988>
 400cb68:	00ffe034 	movhi	r3,65408
 400cb6c:	18ffffc4 	addi	r3,r3,-1
 400cb70:	8121c83a 	sub	r16,r16,r4
 400cb74:	10c6703a 	and	r3,r2,r3
 400cb78:	003f3406 	br	400c84c <__alt_mem_onchip_memory2_0+0xfbfec84c>
 400cb7c:	9100004c 	andi	r4,r18,1
 400cb80:	000b883a 	mov	r5,zero
 400cb84:	0005883a 	mov	r2,zero
 400cb88:	003f4806 	br	400c8ac <__alt_mem_onchip_memory2_0+0xfbfec8ac>
 400cb8c:	298cb03a 	or	r6,r5,r6
 400cb90:	300cc03a 	cmpne	r6,r6,zero
 400cb94:	0005883a 	mov	r2,zero
 400cb98:	003f6406 	br	400c92c <__alt_mem_onchip_memory2_0+0xfbfec92c>
 400cb9c:	10009a1e 	bne	r2,zero,400ce08 <__subdf3+0x640>
 400cba0:	82400044 	addi	r9,r16,1
 400cba4:	4881ffcc 	andi	r2,r9,2047
 400cba8:	02800044 	movi	r10,1
 400cbac:	5080670e 	bge	r10,r2,400cd4c <__subdf3+0x584>
 400cbb0:	0081ffc4 	movi	r2,2047
 400cbb4:	4880af26 	beq	r9,r2,400ce74 <__subdf3+0x6ac>
 400cbb8:	898d883a 	add	r6,r17,r6
 400cbbc:	1945883a 	add	r2,r3,r5
 400cbc0:	3447803a 	cmpltu	r3,r6,r17
 400cbc4:	1887883a 	add	r3,r3,r2
 400cbc8:	182297fa 	slli	r17,r3,31
 400cbcc:	300cd07a 	srli	r6,r6,1
 400cbd0:	1806d07a 	srli	r3,r3,1
 400cbd4:	4821883a 	mov	r16,r9
 400cbd8:	89a2b03a 	or	r17,r17,r6
 400cbdc:	003f1b06 	br	400c84c <__alt_mem_onchip_memory2_0+0xfbfec84c>
 400cbe0:	0101ffc4 	movi	r4,2047
 400cbe4:	813f441e 	bne	r16,r4,400c8f8 <__alt_mem_onchip_memory2_0+0xfbfec8f8>
 400cbe8:	003f1806 	br	400c84c <__alt_mem_onchip_memory2_0+0xfbfec84c>
 400cbec:	843ff844 	addi	r16,r16,-31
 400cbf0:	01400804 	movi	r5,32
 400cbf4:	1408d83a 	srl	r4,r2,r16
 400cbf8:	19405026 	beq	r3,r5,400cd3c <__subdf3+0x574>
 400cbfc:	01401004 	movi	r5,64
 400cc00:	28c7c83a 	sub	r3,r5,r3
 400cc04:	10c4983a 	sll	r2,r2,r3
 400cc08:	88a2b03a 	or	r17,r17,r2
 400cc0c:	8822c03a 	cmpne	r17,r17,zero
 400cc10:	2462b03a 	or	r17,r4,r17
 400cc14:	0007883a 	mov	r3,zero
 400cc18:	0021883a 	mov	r16,zero
 400cc1c:	003f6d06 	br	400c9d4 <__alt_mem_onchip_memory2_0+0xfbfec9d4>
 400cc20:	11fff804 	addi	r7,r2,-32
 400cc24:	01000804 	movi	r4,32
 400cc28:	29ced83a 	srl	r7,r5,r7
 400cc2c:	11004526 	beq	r2,r4,400cd44 <__subdf3+0x57c>
 400cc30:	01001004 	movi	r4,64
 400cc34:	2089c83a 	sub	r4,r4,r2
 400cc38:	2904983a 	sll	r2,r5,r4
 400cc3c:	118cb03a 	or	r6,r2,r6
 400cc40:	300cc03a 	cmpne	r6,r6,zero
 400cc44:	398cb03a 	or	r6,r7,r6
 400cc48:	0005883a 	mov	r2,zero
 400cc4c:	003f3706 	br	400c92c <__alt_mem_onchip_memory2_0+0xfbfec92c>
 400cc50:	80002a26 	beq	r16,zero,400ccfc <__subdf3+0x534>
 400cc54:	0101ffc4 	movi	r4,2047
 400cc58:	49006626 	beq	r9,r4,400cdf4 <__subdf3+0x62c>
 400cc5c:	0085c83a 	sub	r2,zero,r2
 400cc60:	18c02034 	orhi	r3,r3,128
 400cc64:	01000e04 	movi	r4,56
 400cc68:	20807e16 	blt	r4,r2,400ce64 <__subdf3+0x69c>
 400cc6c:	010007c4 	movi	r4,31
 400cc70:	2080e716 	blt	r4,r2,400d010 <__subdf3+0x848>
 400cc74:	01000804 	movi	r4,32
 400cc78:	2089c83a 	sub	r4,r4,r2
 400cc7c:	1914983a 	sll	r10,r3,r4
 400cc80:	8890d83a 	srl	r8,r17,r2
 400cc84:	8908983a 	sll	r4,r17,r4
 400cc88:	1884d83a 	srl	r2,r3,r2
 400cc8c:	5222b03a 	or	r17,r10,r8
 400cc90:	2006c03a 	cmpne	r3,r4,zero
 400cc94:	88e2b03a 	or	r17,r17,r3
 400cc98:	3463c83a 	sub	r17,r6,r17
 400cc9c:	2885c83a 	sub	r2,r5,r2
 400cca0:	344d803a 	cmpltu	r6,r6,r17
 400cca4:	1187c83a 	sub	r3,r2,r6
 400cca8:	4821883a 	mov	r16,r9
 400ccac:	3825883a 	mov	r18,r7
 400ccb0:	003f2306 	br	400c940 <__alt_mem_onchip_memory2_0+0xfbfec940>
 400ccb4:	24d0b03a 	or	r8,r4,r19
 400ccb8:	40001b1e 	bne	r8,zero,400cd28 <__subdf3+0x560>
 400ccbc:	0005883a 	mov	r2,zero
 400ccc0:	0009883a 	mov	r4,zero
 400ccc4:	0021883a 	mov	r16,zero
 400ccc8:	003f4906 	br	400c9f0 <__alt_mem_onchip_memory2_0+0xfbfec9f0>
 400cccc:	010007c4 	movi	r4,31
 400ccd0:	20803a16 	blt	r4,r2,400cdbc <__subdf3+0x5f4>
 400ccd4:	01000804 	movi	r4,32
 400ccd8:	2089c83a 	sub	r4,r4,r2
 400ccdc:	2912983a 	sll	r9,r5,r4
 400cce0:	3090d83a 	srl	r8,r6,r2
 400cce4:	3108983a 	sll	r4,r6,r4
 400cce8:	2884d83a 	srl	r2,r5,r2
 400ccec:	4a12b03a 	or	r9,r9,r8
 400ccf0:	2008c03a 	cmpne	r4,r4,zero
 400ccf4:	4912b03a 	or	r9,r9,r4
 400ccf8:	003f4e06 	br	400ca34 <__alt_mem_onchip_memory2_0+0xfbfeca34>
 400ccfc:	1c48b03a 	or	r4,r3,r17
 400cd00:	20003c26 	beq	r4,zero,400cdf4 <__subdf3+0x62c>
 400cd04:	0084303a 	nor	r2,zero,r2
 400cd08:	1000381e 	bne	r2,zero,400cdec <__subdf3+0x624>
 400cd0c:	3463c83a 	sub	r17,r6,r17
 400cd10:	28c5c83a 	sub	r2,r5,r3
 400cd14:	344d803a 	cmpltu	r6,r6,r17
 400cd18:	1187c83a 	sub	r3,r2,r6
 400cd1c:	4821883a 	mov	r16,r9
 400cd20:	3825883a 	mov	r18,r7
 400cd24:	003f0606 	br	400c940 <__alt_mem_onchip_memory2_0+0xfbfec940>
 400cd28:	2023883a 	mov	r17,r4
 400cd2c:	003f0906 	br	400c954 <__alt_mem_onchip_memory2_0+0xfbfec954>
 400cd30:	0101ffc4 	movi	r4,2047
 400cd34:	813f3a1e 	bne	r16,r4,400ca20 <__alt_mem_onchip_memory2_0+0xfbfeca20>
 400cd38:	003ec406 	br	400c84c <__alt_mem_onchip_memory2_0+0xfbfec84c>
 400cd3c:	0005883a 	mov	r2,zero
 400cd40:	003fb106 	br	400cc08 <__alt_mem_onchip_memory2_0+0xfbfecc08>
 400cd44:	0005883a 	mov	r2,zero
 400cd48:	003fbc06 	br	400cc3c <__alt_mem_onchip_memory2_0+0xfbfecc3c>
 400cd4c:	1c44b03a 	or	r2,r3,r17
 400cd50:	80008e1e 	bne	r16,zero,400cf8c <__subdf3+0x7c4>
 400cd54:	1000c826 	beq	r2,zero,400d078 <__subdf3+0x8b0>
 400cd58:	2984b03a 	or	r2,r5,r6
 400cd5c:	103ebb26 	beq	r2,zero,400c84c <__alt_mem_onchip_memory2_0+0xfbfec84c>
 400cd60:	8989883a 	add	r4,r17,r6
 400cd64:	1945883a 	add	r2,r3,r5
 400cd68:	2447803a 	cmpltu	r3,r4,r17
 400cd6c:	1887883a 	add	r3,r3,r2
 400cd70:	1880202c 	andhi	r2,r3,128
 400cd74:	2023883a 	mov	r17,r4
 400cd78:	103f1626 	beq	r2,zero,400c9d4 <__alt_mem_onchip_memory2_0+0xfbfec9d4>
 400cd7c:	00bfe034 	movhi	r2,65408
 400cd80:	10bfffc4 	addi	r2,r2,-1
 400cd84:	5021883a 	mov	r16,r10
 400cd88:	1886703a 	and	r3,r3,r2
 400cd8c:	003eaf06 	br	400c84c <__alt_mem_onchip_memory2_0+0xfbfec84c>
 400cd90:	3825883a 	mov	r18,r7
 400cd94:	003f0f06 	br	400c9d4 <__alt_mem_onchip_memory2_0+0xfbfec9d4>
 400cd98:	1c44b03a 	or	r2,r3,r17
 400cd9c:	8000251e 	bne	r16,zero,400ce34 <__subdf3+0x66c>
 400cda0:	1000661e 	bne	r2,zero,400cf3c <__subdf3+0x774>
 400cda4:	2990b03a 	or	r8,r5,r6
 400cda8:	40009626 	beq	r8,zero,400d004 <__subdf3+0x83c>
 400cdac:	2807883a 	mov	r3,r5
 400cdb0:	3023883a 	mov	r17,r6
 400cdb4:	3825883a 	mov	r18,r7
 400cdb8:	003ea406 	br	400c84c <__alt_mem_onchip_memory2_0+0xfbfec84c>
 400cdbc:	127ff804 	addi	r9,r2,-32
 400cdc0:	01000804 	movi	r4,32
 400cdc4:	2a52d83a 	srl	r9,r5,r9
 400cdc8:	11008c26 	beq	r2,r4,400cffc <__subdf3+0x834>
 400cdcc:	01001004 	movi	r4,64
 400cdd0:	2085c83a 	sub	r2,r4,r2
 400cdd4:	2884983a 	sll	r2,r5,r2
 400cdd8:	118cb03a 	or	r6,r2,r6
 400cddc:	300cc03a 	cmpne	r6,r6,zero
 400cde0:	4992b03a 	or	r9,r9,r6
 400cde4:	0005883a 	mov	r2,zero
 400cde8:	003f1206 	br	400ca34 <__alt_mem_onchip_memory2_0+0xfbfeca34>
 400cdec:	0101ffc4 	movi	r4,2047
 400cdf0:	493f9c1e 	bne	r9,r4,400cc64 <__alt_mem_onchip_memory2_0+0xfbfecc64>
 400cdf4:	2807883a 	mov	r3,r5
 400cdf8:	3023883a 	mov	r17,r6
 400cdfc:	4821883a 	mov	r16,r9
 400ce00:	3825883a 	mov	r18,r7
 400ce04:	003e9106 	br	400c84c <__alt_mem_onchip_memory2_0+0xfbfec84c>
 400ce08:	80001f1e 	bne	r16,zero,400ce88 <__subdf3+0x6c0>
 400ce0c:	1c48b03a 	or	r4,r3,r17
 400ce10:	20005a26 	beq	r4,zero,400cf7c <__subdf3+0x7b4>
 400ce14:	0084303a 	nor	r2,zero,r2
 400ce18:	1000561e 	bne	r2,zero,400cf74 <__subdf3+0x7ac>
 400ce1c:	89a3883a 	add	r17,r17,r6
 400ce20:	1945883a 	add	r2,r3,r5
 400ce24:	898d803a 	cmpltu	r6,r17,r6
 400ce28:	3087883a 	add	r3,r6,r2
 400ce2c:	4821883a 	mov	r16,r9
 400ce30:	003f0506 	br	400ca48 <__alt_mem_onchip_memory2_0+0xfbfeca48>
 400ce34:	10002b1e 	bne	r2,zero,400cee4 <__subdf3+0x71c>
 400ce38:	2984b03a 	or	r2,r5,r6
 400ce3c:	10008026 	beq	r2,zero,400d040 <__subdf3+0x878>
 400ce40:	2807883a 	mov	r3,r5
 400ce44:	3023883a 	mov	r17,r6
 400ce48:	3825883a 	mov	r18,r7
 400ce4c:	0401ffc4 	movi	r16,2047
 400ce50:	003e7e06 	br	400c84c <__alt_mem_onchip_memory2_0+0xfbfec84c>
 400ce54:	3809883a 	mov	r4,r7
 400ce58:	0011883a 	mov	r8,zero
 400ce5c:	0005883a 	mov	r2,zero
 400ce60:	003ee306 	br	400c9f0 <__alt_mem_onchip_memory2_0+0xfbfec9f0>
 400ce64:	1c62b03a 	or	r17,r3,r17
 400ce68:	8822c03a 	cmpne	r17,r17,zero
 400ce6c:	0005883a 	mov	r2,zero
 400ce70:	003f8906 	br	400cc98 <__alt_mem_onchip_memory2_0+0xfbfecc98>
 400ce74:	3809883a 	mov	r4,r7
 400ce78:	4821883a 	mov	r16,r9
 400ce7c:	0011883a 	mov	r8,zero
 400ce80:	0005883a 	mov	r2,zero
 400ce84:	003eda06 	br	400c9f0 <__alt_mem_onchip_memory2_0+0xfbfec9f0>
 400ce88:	0101ffc4 	movi	r4,2047
 400ce8c:	49003b26 	beq	r9,r4,400cf7c <__subdf3+0x7b4>
 400ce90:	0085c83a 	sub	r2,zero,r2
 400ce94:	18c02034 	orhi	r3,r3,128
 400ce98:	01000e04 	movi	r4,56
 400ce9c:	20806e16 	blt	r4,r2,400d058 <__subdf3+0x890>
 400cea0:	010007c4 	movi	r4,31
 400cea4:	20807716 	blt	r4,r2,400d084 <__subdf3+0x8bc>
 400cea8:	01000804 	movi	r4,32
 400ceac:	2089c83a 	sub	r4,r4,r2
 400ceb0:	1914983a 	sll	r10,r3,r4
 400ceb4:	8890d83a 	srl	r8,r17,r2
 400ceb8:	8908983a 	sll	r4,r17,r4
 400cebc:	1884d83a 	srl	r2,r3,r2
 400cec0:	5222b03a 	or	r17,r10,r8
 400cec4:	2006c03a 	cmpne	r3,r4,zero
 400cec8:	88e2b03a 	or	r17,r17,r3
 400cecc:	89a3883a 	add	r17,r17,r6
 400ced0:	1145883a 	add	r2,r2,r5
 400ced4:	898d803a 	cmpltu	r6,r17,r6
 400ced8:	3087883a 	add	r3,r6,r2
 400cedc:	4821883a 	mov	r16,r9
 400cee0:	003ed906 	br	400ca48 <__alt_mem_onchip_memory2_0+0xfbfeca48>
 400cee4:	2984b03a 	or	r2,r5,r6
 400cee8:	10004226 	beq	r2,zero,400cff4 <__subdf3+0x82c>
 400ceec:	1808d0fa 	srli	r4,r3,3
 400cef0:	8822d0fa 	srli	r17,r17,3
 400cef4:	1806977a 	slli	r3,r3,29
 400cef8:	2080022c 	andhi	r2,r4,8
 400cefc:	1c62b03a 	or	r17,r3,r17
 400cf00:	10000826 	beq	r2,zero,400cf24 <__subdf3+0x75c>
 400cf04:	2812d0fa 	srli	r9,r5,3
 400cf08:	4880022c 	andhi	r2,r9,8
 400cf0c:	1000051e 	bne	r2,zero,400cf24 <__subdf3+0x75c>
 400cf10:	300cd0fa 	srli	r6,r6,3
 400cf14:	2804977a 	slli	r2,r5,29
 400cf18:	4809883a 	mov	r4,r9
 400cf1c:	3825883a 	mov	r18,r7
 400cf20:	11a2b03a 	or	r17,r2,r6
 400cf24:	8806d77a 	srli	r3,r17,29
 400cf28:	200890fa 	slli	r4,r4,3
 400cf2c:	882290fa 	slli	r17,r17,3
 400cf30:	0401ffc4 	movi	r16,2047
 400cf34:	1906b03a 	or	r3,r3,r4
 400cf38:	003e4406 	br	400c84c <__alt_mem_onchip_memory2_0+0xfbfec84c>
 400cf3c:	2984b03a 	or	r2,r5,r6
 400cf40:	103e4226 	beq	r2,zero,400c84c <__alt_mem_onchip_memory2_0+0xfbfec84c>
 400cf44:	8989c83a 	sub	r4,r17,r6
 400cf48:	8911803a 	cmpltu	r8,r17,r4
 400cf4c:	1945c83a 	sub	r2,r3,r5
 400cf50:	1205c83a 	sub	r2,r2,r8
 400cf54:	1200202c 	andhi	r8,r2,128
 400cf58:	403e9a26 	beq	r8,zero,400c9c4 <__alt_mem_onchip_memory2_0+0xfbfec9c4>
 400cf5c:	3463c83a 	sub	r17,r6,r17
 400cf60:	28c5c83a 	sub	r2,r5,r3
 400cf64:	344d803a 	cmpltu	r6,r6,r17
 400cf68:	1187c83a 	sub	r3,r2,r6
 400cf6c:	3825883a 	mov	r18,r7
 400cf70:	003e3606 	br	400c84c <__alt_mem_onchip_memory2_0+0xfbfec84c>
 400cf74:	0101ffc4 	movi	r4,2047
 400cf78:	493fc71e 	bne	r9,r4,400ce98 <__alt_mem_onchip_memory2_0+0xfbfece98>
 400cf7c:	2807883a 	mov	r3,r5
 400cf80:	3023883a 	mov	r17,r6
 400cf84:	4821883a 	mov	r16,r9
 400cf88:	003e3006 	br	400c84c <__alt_mem_onchip_memory2_0+0xfbfec84c>
 400cf8c:	10003626 	beq	r2,zero,400d068 <__subdf3+0x8a0>
 400cf90:	2984b03a 	or	r2,r5,r6
 400cf94:	10001726 	beq	r2,zero,400cff4 <__subdf3+0x82c>
 400cf98:	1808d0fa 	srli	r4,r3,3
 400cf9c:	8822d0fa 	srli	r17,r17,3
 400cfa0:	1806977a 	slli	r3,r3,29
 400cfa4:	2080022c 	andhi	r2,r4,8
 400cfa8:	1c62b03a 	or	r17,r3,r17
 400cfac:	10000726 	beq	r2,zero,400cfcc <__subdf3+0x804>
 400cfb0:	2812d0fa 	srli	r9,r5,3
 400cfb4:	4880022c 	andhi	r2,r9,8
 400cfb8:	1000041e 	bne	r2,zero,400cfcc <__subdf3+0x804>
 400cfbc:	300cd0fa 	srli	r6,r6,3
 400cfc0:	2804977a 	slli	r2,r5,29
 400cfc4:	4809883a 	mov	r4,r9
 400cfc8:	11a2b03a 	or	r17,r2,r6
 400cfcc:	8806d77a 	srli	r3,r17,29
 400cfd0:	200890fa 	slli	r4,r4,3
 400cfd4:	882290fa 	slli	r17,r17,3
 400cfd8:	3825883a 	mov	r18,r7
 400cfdc:	1906b03a 	or	r3,r3,r4
 400cfe0:	0401ffc4 	movi	r16,2047
 400cfe4:	003e1906 	br	400c84c <__alt_mem_onchip_memory2_0+0xfbfec84c>
 400cfe8:	000b883a 	mov	r5,zero
 400cfec:	0005883a 	mov	r2,zero
 400cff0:	003e2e06 	br	400c8ac <__alt_mem_onchip_memory2_0+0xfbfec8ac>
 400cff4:	0401ffc4 	movi	r16,2047
 400cff8:	003e1406 	br	400c84c <__alt_mem_onchip_memory2_0+0xfbfec84c>
 400cffc:	0005883a 	mov	r2,zero
 400d000:	003f7506 	br	400cdd8 <__alt_mem_onchip_memory2_0+0xfbfecdd8>
 400d004:	0005883a 	mov	r2,zero
 400d008:	0009883a 	mov	r4,zero
 400d00c:	003e7806 	br	400c9f0 <__alt_mem_onchip_memory2_0+0xfbfec9f0>
 400d010:	123ff804 	addi	r8,r2,-32
 400d014:	01000804 	movi	r4,32
 400d018:	1a10d83a 	srl	r8,r3,r8
 400d01c:	11002526 	beq	r2,r4,400d0b4 <__subdf3+0x8ec>
 400d020:	01001004 	movi	r4,64
 400d024:	2085c83a 	sub	r2,r4,r2
 400d028:	1884983a 	sll	r2,r3,r2
 400d02c:	1444b03a 	or	r2,r2,r17
 400d030:	1004c03a 	cmpne	r2,r2,zero
 400d034:	40a2b03a 	or	r17,r8,r2
 400d038:	0005883a 	mov	r2,zero
 400d03c:	003f1606 	br	400cc98 <__alt_mem_onchip_memory2_0+0xfbfecc98>
 400d040:	02000434 	movhi	r8,16
 400d044:	0009883a 	mov	r4,zero
 400d048:	423fffc4 	addi	r8,r8,-1
 400d04c:	00bfffc4 	movi	r2,-1
 400d050:	0401ffc4 	movi	r16,2047
 400d054:	003e6606 	br	400c9f0 <__alt_mem_onchip_memory2_0+0xfbfec9f0>
 400d058:	1c62b03a 	or	r17,r3,r17
 400d05c:	8822c03a 	cmpne	r17,r17,zero
 400d060:	0005883a 	mov	r2,zero
 400d064:	003f9906 	br	400cecc <__alt_mem_onchip_memory2_0+0xfbfececc>
 400d068:	2807883a 	mov	r3,r5
 400d06c:	3023883a 	mov	r17,r6
 400d070:	0401ffc4 	movi	r16,2047
 400d074:	003df506 	br	400c84c <__alt_mem_onchip_memory2_0+0xfbfec84c>
 400d078:	2807883a 	mov	r3,r5
 400d07c:	3023883a 	mov	r17,r6
 400d080:	003df206 	br	400c84c <__alt_mem_onchip_memory2_0+0xfbfec84c>
 400d084:	123ff804 	addi	r8,r2,-32
 400d088:	01000804 	movi	r4,32
 400d08c:	1a10d83a 	srl	r8,r3,r8
 400d090:	11000a26 	beq	r2,r4,400d0bc <__subdf3+0x8f4>
 400d094:	01001004 	movi	r4,64
 400d098:	2085c83a 	sub	r2,r4,r2
 400d09c:	1884983a 	sll	r2,r3,r2
 400d0a0:	1444b03a 	or	r2,r2,r17
 400d0a4:	1004c03a 	cmpne	r2,r2,zero
 400d0a8:	40a2b03a 	or	r17,r8,r2
 400d0ac:	0005883a 	mov	r2,zero
 400d0b0:	003f8606 	br	400cecc <__alt_mem_onchip_memory2_0+0xfbfececc>
 400d0b4:	0005883a 	mov	r2,zero
 400d0b8:	003fdc06 	br	400d02c <__alt_mem_onchip_memory2_0+0xfbfed02c>
 400d0bc:	0005883a 	mov	r2,zero
 400d0c0:	003ff706 	br	400d0a0 <__alt_mem_onchip_memory2_0+0xfbfed0a0>

0400d0c4 <__fixdfsi>:
 400d0c4:	280cd53a 	srli	r6,r5,20
 400d0c8:	00c00434 	movhi	r3,16
 400d0cc:	18ffffc4 	addi	r3,r3,-1
 400d0d0:	3181ffcc 	andi	r6,r6,2047
 400d0d4:	01c0ff84 	movi	r7,1022
 400d0d8:	28c6703a 	and	r3,r5,r3
 400d0dc:	280ad7fa 	srli	r5,r5,31
 400d0e0:	3980120e 	bge	r7,r6,400d12c <__fixdfsi+0x68>
 400d0e4:	00810744 	movi	r2,1053
 400d0e8:	11800c16 	blt	r2,r6,400d11c <__fixdfsi+0x58>
 400d0ec:	00810cc4 	movi	r2,1075
 400d0f0:	1185c83a 	sub	r2,r2,r6
 400d0f4:	01c007c4 	movi	r7,31
 400d0f8:	18c00434 	orhi	r3,r3,16
 400d0fc:	38800d16 	blt	r7,r2,400d134 <__fixdfsi+0x70>
 400d100:	31befb44 	addi	r6,r6,-1043
 400d104:	2084d83a 	srl	r2,r4,r2
 400d108:	1986983a 	sll	r3,r3,r6
 400d10c:	1884b03a 	or	r2,r3,r2
 400d110:	28000726 	beq	r5,zero,400d130 <__fixdfsi+0x6c>
 400d114:	0085c83a 	sub	r2,zero,r2
 400d118:	f800283a 	ret
 400d11c:	00a00034 	movhi	r2,32768
 400d120:	10bfffc4 	addi	r2,r2,-1
 400d124:	2885883a 	add	r2,r5,r2
 400d128:	f800283a 	ret
 400d12c:	0005883a 	mov	r2,zero
 400d130:	f800283a 	ret
 400d134:	008104c4 	movi	r2,1043
 400d138:	1185c83a 	sub	r2,r2,r6
 400d13c:	1884d83a 	srl	r2,r3,r2
 400d140:	003ff306 	br	400d110 <__alt_mem_onchip_memory2_0+0xfbfed110>

0400d144 <__floatsidf>:
 400d144:	defffd04 	addi	sp,sp,-12
 400d148:	dfc00215 	stw	ra,8(sp)
 400d14c:	dc400115 	stw	r17,4(sp)
 400d150:	dc000015 	stw	r16,0(sp)
 400d154:	20002b26 	beq	r4,zero,400d204 <__floatsidf+0xc0>
 400d158:	2023883a 	mov	r17,r4
 400d15c:	2020d7fa 	srli	r16,r4,31
 400d160:	20002d16 	blt	r4,zero,400d218 <__floatsidf+0xd4>
 400d164:	8809883a 	mov	r4,r17
 400d168:	400d2c80 	call	400d2c8 <__clzsi2>
 400d16c:	01410784 	movi	r5,1054
 400d170:	288bc83a 	sub	r5,r5,r2
 400d174:	01010cc4 	movi	r4,1075
 400d178:	2149c83a 	sub	r4,r4,r5
 400d17c:	00c007c4 	movi	r3,31
 400d180:	1900160e 	bge	r3,r4,400d1dc <__floatsidf+0x98>
 400d184:	00c104c4 	movi	r3,1043
 400d188:	1947c83a 	sub	r3,r3,r5
 400d18c:	88c6983a 	sll	r3,r17,r3
 400d190:	00800434 	movhi	r2,16
 400d194:	10bfffc4 	addi	r2,r2,-1
 400d198:	1886703a 	and	r3,r3,r2
 400d19c:	2941ffcc 	andi	r5,r5,2047
 400d1a0:	800d883a 	mov	r6,r16
 400d1a4:	0005883a 	mov	r2,zero
 400d1a8:	280a953a 	slli	r5,r5,20
 400d1ac:	31803fcc 	andi	r6,r6,255
 400d1b0:	01000434 	movhi	r4,16
 400d1b4:	300c97fa 	slli	r6,r6,31
 400d1b8:	213fffc4 	addi	r4,r4,-1
 400d1bc:	1906703a 	and	r3,r3,r4
 400d1c0:	1946b03a 	or	r3,r3,r5
 400d1c4:	1986b03a 	or	r3,r3,r6
 400d1c8:	dfc00217 	ldw	ra,8(sp)
 400d1cc:	dc400117 	ldw	r17,4(sp)
 400d1d0:	dc000017 	ldw	r16,0(sp)
 400d1d4:	dec00304 	addi	sp,sp,12
 400d1d8:	f800283a 	ret
 400d1dc:	00c002c4 	movi	r3,11
 400d1e0:	1887c83a 	sub	r3,r3,r2
 400d1e4:	88c6d83a 	srl	r3,r17,r3
 400d1e8:	8904983a 	sll	r2,r17,r4
 400d1ec:	01000434 	movhi	r4,16
 400d1f0:	213fffc4 	addi	r4,r4,-1
 400d1f4:	2941ffcc 	andi	r5,r5,2047
 400d1f8:	1906703a 	and	r3,r3,r4
 400d1fc:	800d883a 	mov	r6,r16
 400d200:	003fe906 	br	400d1a8 <__alt_mem_onchip_memory2_0+0xfbfed1a8>
 400d204:	000d883a 	mov	r6,zero
 400d208:	000b883a 	mov	r5,zero
 400d20c:	0007883a 	mov	r3,zero
 400d210:	0005883a 	mov	r2,zero
 400d214:	003fe406 	br	400d1a8 <__alt_mem_onchip_memory2_0+0xfbfed1a8>
 400d218:	0123c83a 	sub	r17,zero,r4
 400d21c:	003fd106 	br	400d164 <__alt_mem_onchip_memory2_0+0xfbfed164>

0400d220 <__floatunsidf>:
 400d220:	defffe04 	addi	sp,sp,-8
 400d224:	dc000015 	stw	r16,0(sp)
 400d228:	dfc00115 	stw	ra,4(sp)
 400d22c:	2021883a 	mov	r16,r4
 400d230:	20002226 	beq	r4,zero,400d2bc <__floatunsidf+0x9c>
 400d234:	400d2c80 	call	400d2c8 <__clzsi2>
 400d238:	01010784 	movi	r4,1054
 400d23c:	2089c83a 	sub	r4,r4,r2
 400d240:	01810cc4 	movi	r6,1075
 400d244:	310dc83a 	sub	r6,r6,r4
 400d248:	00c007c4 	movi	r3,31
 400d24c:	1980120e 	bge	r3,r6,400d298 <__floatunsidf+0x78>
 400d250:	00c104c4 	movi	r3,1043
 400d254:	1907c83a 	sub	r3,r3,r4
 400d258:	80ca983a 	sll	r5,r16,r3
 400d25c:	00800434 	movhi	r2,16
 400d260:	10bfffc4 	addi	r2,r2,-1
 400d264:	2101ffcc 	andi	r4,r4,2047
 400d268:	0021883a 	mov	r16,zero
 400d26c:	288a703a 	and	r5,r5,r2
 400d270:	2008953a 	slli	r4,r4,20
 400d274:	00c00434 	movhi	r3,16
 400d278:	18ffffc4 	addi	r3,r3,-1
 400d27c:	28c6703a 	and	r3,r5,r3
 400d280:	8005883a 	mov	r2,r16
 400d284:	1906b03a 	or	r3,r3,r4
 400d288:	dfc00117 	ldw	ra,4(sp)
 400d28c:	dc000017 	ldw	r16,0(sp)
 400d290:	dec00204 	addi	sp,sp,8
 400d294:	f800283a 	ret
 400d298:	00c002c4 	movi	r3,11
 400d29c:	188bc83a 	sub	r5,r3,r2
 400d2a0:	814ad83a 	srl	r5,r16,r5
 400d2a4:	00c00434 	movhi	r3,16
 400d2a8:	18ffffc4 	addi	r3,r3,-1
 400d2ac:	81a0983a 	sll	r16,r16,r6
 400d2b0:	2101ffcc 	andi	r4,r4,2047
 400d2b4:	28ca703a 	and	r5,r5,r3
 400d2b8:	003fed06 	br	400d270 <__alt_mem_onchip_memory2_0+0xfbfed270>
 400d2bc:	0009883a 	mov	r4,zero
 400d2c0:	000b883a 	mov	r5,zero
 400d2c4:	003fea06 	br	400d270 <__alt_mem_onchip_memory2_0+0xfbfed270>

0400d2c8 <__clzsi2>:
 400d2c8:	00bfffd4 	movui	r2,65535
 400d2cc:	11000536 	bltu	r2,r4,400d2e4 <__clzsi2+0x1c>
 400d2d0:	00803fc4 	movi	r2,255
 400d2d4:	11000f36 	bltu	r2,r4,400d314 <__clzsi2+0x4c>
 400d2d8:	00800804 	movi	r2,32
 400d2dc:	0007883a 	mov	r3,zero
 400d2e0:	00000506 	br	400d2f8 <__clzsi2+0x30>
 400d2e4:	00804034 	movhi	r2,256
 400d2e8:	10bfffc4 	addi	r2,r2,-1
 400d2ec:	11000c2e 	bgeu	r2,r4,400d320 <__clzsi2+0x58>
 400d2f0:	00800204 	movi	r2,8
 400d2f4:	00c00604 	movi	r3,24
 400d2f8:	20c8d83a 	srl	r4,r4,r3
 400d2fc:	00c100b4 	movhi	r3,1026
 400d300:	18e27c04 	addi	r3,r3,-30224
 400d304:	1909883a 	add	r4,r3,r4
 400d308:	20c00003 	ldbu	r3,0(r4)
 400d30c:	10c5c83a 	sub	r2,r2,r3
 400d310:	f800283a 	ret
 400d314:	00800604 	movi	r2,24
 400d318:	00c00204 	movi	r3,8
 400d31c:	003ff606 	br	400d2f8 <__alt_mem_onchip_memory2_0+0xfbfed2f8>
 400d320:	00800404 	movi	r2,16
 400d324:	1007883a 	mov	r3,r2
 400d328:	003ff306 	br	400d2f8 <__alt_mem_onchip_memory2_0+0xfbfed2f8>

0400d32c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400d32c:	defffe04 	addi	sp,sp,-8
 400d330:	dfc00115 	stw	ra,4(sp)
 400d334:	df000015 	stw	fp,0(sp)
 400d338:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400d33c:	d0a00b17 	ldw	r2,-32724(gp)
 400d340:	10000326 	beq	r2,zero,400d350 <alt_get_errno+0x24>
 400d344:	d0a00b17 	ldw	r2,-32724(gp)
 400d348:	103ee83a 	callr	r2
 400d34c:	00000106 	br	400d354 <alt_get_errno+0x28>
 400d350:	d0a71904 	addi	r2,gp,-25500
}
 400d354:	e037883a 	mov	sp,fp
 400d358:	dfc00117 	ldw	ra,4(sp)
 400d35c:	df000017 	ldw	fp,0(sp)
 400d360:	dec00204 	addi	sp,sp,8
 400d364:	f800283a 	ret

0400d368 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 400d368:	defffb04 	addi	sp,sp,-20
 400d36c:	dfc00415 	stw	ra,16(sp)
 400d370:	df000315 	stw	fp,12(sp)
 400d374:	df000304 	addi	fp,sp,12
 400d378:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 400d37c:	e0bfff17 	ldw	r2,-4(fp)
 400d380:	10000616 	blt	r2,zero,400d39c <close+0x34>
 400d384:	e0bfff17 	ldw	r2,-4(fp)
 400d388:	10c00324 	muli	r3,r2,12
 400d38c:	008100b4 	movhi	r2,1026
 400d390:	10a54504 	addi	r2,r2,-27372
 400d394:	1885883a 	add	r2,r3,r2
 400d398:	00000106 	br	400d3a0 <close+0x38>
 400d39c:	0005883a 	mov	r2,zero
 400d3a0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 400d3a4:	e0bffd17 	ldw	r2,-12(fp)
 400d3a8:	10001926 	beq	r2,zero,400d410 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 400d3ac:	e0bffd17 	ldw	r2,-12(fp)
 400d3b0:	10800017 	ldw	r2,0(r2)
 400d3b4:	10800417 	ldw	r2,16(r2)
 400d3b8:	10000626 	beq	r2,zero,400d3d4 <close+0x6c>
 400d3bc:	e0bffd17 	ldw	r2,-12(fp)
 400d3c0:	10800017 	ldw	r2,0(r2)
 400d3c4:	10800417 	ldw	r2,16(r2)
 400d3c8:	e13ffd17 	ldw	r4,-12(fp)
 400d3cc:	103ee83a 	callr	r2
 400d3d0:	00000106 	br	400d3d8 <close+0x70>
 400d3d4:	0005883a 	mov	r2,zero
 400d3d8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 400d3dc:	e13fff17 	ldw	r4,-4(fp)
 400d3e0:	400dcc00 	call	400dcc0 <alt_release_fd>
    if (rval < 0)
 400d3e4:	e0bffe17 	ldw	r2,-8(fp)
 400d3e8:	1000070e 	bge	r2,zero,400d408 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 400d3ec:	400d32c0 	call	400d32c <alt_get_errno>
 400d3f0:	1007883a 	mov	r3,r2
 400d3f4:	e0bffe17 	ldw	r2,-8(fp)
 400d3f8:	0085c83a 	sub	r2,zero,r2
 400d3fc:	18800015 	stw	r2,0(r3)
      return -1;
 400d400:	00bfffc4 	movi	r2,-1
 400d404:	00000706 	br	400d424 <close+0xbc>
    }
    return 0;
 400d408:	0005883a 	mov	r2,zero
 400d40c:	00000506 	br	400d424 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400d410:	400d32c0 	call	400d32c <alt_get_errno>
 400d414:	1007883a 	mov	r3,r2
 400d418:	00801444 	movi	r2,81
 400d41c:	18800015 	stw	r2,0(r3)
    return -1;
 400d420:	00bfffc4 	movi	r2,-1
  }
}
 400d424:	e037883a 	mov	sp,fp
 400d428:	dfc00117 	ldw	ra,4(sp)
 400d42c:	df000017 	ldw	fp,0(sp)
 400d430:	dec00204 	addi	sp,sp,8
 400d434:	f800283a 	ret

0400d438 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 400d438:	defffc04 	addi	sp,sp,-16
 400d43c:	df000315 	stw	fp,12(sp)
 400d440:	df000304 	addi	fp,sp,12
 400d444:	e13ffd15 	stw	r4,-12(fp)
 400d448:	e17ffe15 	stw	r5,-8(fp)
 400d44c:	e1bfff15 	stw	r6,-4(fp)
  return len;
 400d450:	e0bfff17 	ldw	r2,-4(fp)
}
 400d454:	e037883a 	mov	sp,fp
 400d458:	df000017 	ldw	fp,0(sp)
 400d45c:	dec00104 	addi	sp,sp,4
 400d460:	f800283a 	ret

0400d464 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400d464:	defffe04 	addi	sp,sp,-8
 400d468:	dfc00115 	stw	ra,4(sp)
 400d46c:	df000015 	stw	fp,0(sp)
 400d470:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400d474:	d0a00b17 	ldw	r2,-32724(gp)
 400d478:	10000326 	beq	r2,zero,400d488 <alt_get_errno+0x24>
 400d47c:	d0a00b17 	ldw	r2,-32724(gp)
 400d480:	103ee83a 	callr	r2
 400d484:	00000106 	br	400d48c <alt_get_errno+0x28>
 400d488:	d0a71904 	addi	r2,gp,-25500
}
 400d48c:	e037883a 	mov	sp,fp
 400d490:	dfc00117 	ldw	ra,4(sp)
 400d494:	df000017 	ldw	fp,0(sp)
 400d498:	dec00204 	addi	sp,sp,8
 400d49c:	f800283a 	ret

0400d4a0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 400d4a0:	defffb04 	addi	sp,sp,-20
 400d4a4:	dfc00415 	stw	ra,16(sp)
 400d4a8:	df000315 	stw	fp,12(sp)
 400d4ac:	df000304 	addi	fp,sp,12
 400d4b0:	e13ffe15 	stw	r4,-8(fp)
 400d4b4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400d4b8:	e0bffe17 	ldw	r2,-8(fp)
 400d4bc:	10000616 	blt	r2,zero,400d4d8 <fstat+0x38>
 400d4c0:	e0bffe17 	ldw	r2,-8(fp)
 400d4c4:	10c00324 	muli	r3,r2,12
 400d4c8:	008100b4 	movhi	r2,1026
 400d4cc:	10a54504 	addi	r2,r2,-27372
 400d4d0:	1885883a 	add	r2,r3,r2
 400d4d4:	00000106 	br	400d4dc <fstat+0x3c>
 400d4d8:	0005883a 	mov	r2,zero
 400d4dc:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 400d4e0:	e0bffd17 	ldw	r2,-12(fp)
 400d4e4:	10001026 	beq	r2,zero,400d528 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 400d4e8:	e0bffd17 	ldw	r2,-12(fp)
 400d4ec:	10800017 	ldw	r2,0(r2)
 400d4f0:	10800817 	ldw	r2,32(r2)
 400d4f4:	10000726 	beq	r2,zero,400d514 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 400d4f8:	e0bffd17 	ldw	r2,-12(fp)
 400d4fc:	10800017 	ldw	r2,0(r2)
 400d500:	10800817 	ldw	r2,32(r2)
 400d504:	e17fff17 	ldw	r5,-4(fp)
 400d508:	e13ffd17 	ldw	r4,-12(fp)
 400d50c:	103ee83a 	callr	r2
 400d510:	00000a06 	br	400d53c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 400d514:	e0bfff17 	ldw	r2,-4(fp)
 400d518:	00c80004 	movi	r3,8192
 400d51c:	10c00115 	stw	r3,4(r2)
      return 0;
 400d520:	0005883a 	mov	r2,zero
 400d524:	00000506 	br	400d53c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400d528:	400d4640 	call	400d464 <alt_get_errno>
 400d52c:	1007883a 	mov	r3,r2
 400d530:	00801444 	movi	r2,81
 400d534:	18800015 	stw	r2,0(r3)
    return -1;
 400d538:	00bfffc4 	movi	r2,-1
  }
}
 400d53c:	e037883a 	mov	sp,fp
 400d540:	dfc00117 	ldw	ra,4(sp)
 400d544:	df000017 	ldw	fp,0(sp)
 400d548:	dec00204 	addi	sp,sp,8
 400d54c:	f800283a 	ret

0400d550 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 400d550:	defff904 	addi	sp,sp,-28
 400d554:	dfc00615 	stw	ra,24(sp)
 400d558:	df000515 	stw	fp,20(sp)
 400d55c:	df000504 	addi	fp,sp,20
 400d560:	e13ffc15 	stw	r4,-16(fp)
 400d564:	e17ffd15 	stw	r5,-12(fp)
 400d568:	e1bffe15 	stw	r6,-8(fp)
 400d56c:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 400d570:	e0800217 	ldw	r2,8(fp)
 400d574:	d8800015 	stw	r2,0(sp)
 400d578:	e1ffff17 	ldw	r7,-4(fp)
 400d57c:	e1bffe17 	ldw	r6,-8(fp)
 400d580:	e17ffd17 	ldw	r5,-12(fp)
 400d584:	e13ffc17 	ldw	r4,-16(fp)
 400d588:	400d7000 	call	400d700 <alt_iic_isr_register>
}  
 400d58c:	e037883a 	mov	sp,fp
 400d590:	dfc00117 	ldw	ra,4(sp)
 400d594:	df000017 	ldw	fp,0(sp)
 400d598:	dec00204 	addi	sp,sp,8
 400d59c:	f800283a 	ret

0400d5a0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 400d5a0:	defff904 	addi	sp,sp,-28
 400d5a4:	df000615 	stw	fp,24(sp)
 400d5a8:	df000604 	addi	fp,sp,24
 400d5ac:	e13ffe15 	stw	r4,-8(fp)
 400d5b0:	e17fff15 	stw	r5,-4(fp)
 400d5b4:	e0bfff17 	ldw	r2,-4(fp)
 400d5b8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400d5bc:	0005303a 	rdctl	r2,status
 400d5c0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400d5c4:	e0fffb17 	ldw	r3,-20(fp)
 400d5c8:	00bfff84 	movi	r2,-2
 400d5cc:	1884703a 	and	r2,r3,r2
 400d5d0:	1001703a 	wrctl	status,r2
  
  return context;
 400d5d4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 400d5d8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 400d5dc:	00c00044 	movi	r3,1
 400d5e0:	e0bffa17 	ldw	r2,-24(fp)
 400d5e4:	1884983a 	sll	r2,r3,r2
 400d5e8:	1007883a 	mov	r3,r2
 400d5ec:	d0a71b17 	ldw	r2,-25492(gp)
 400d5f0:	1884b03a 	or	r2,r3,r2
 400d5f4:	d0a71b15 	stw	r2,-25492(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 400d5f8:	d0a71b17 	ldw	r2,-25492(gp)
 400d5fc:	100170fa 	wrctl	ienable,r2
 400d600:	e0bffc17 	ldw	r2,-16(fp)
 400d604:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400d608:	e0bffd17 	ldw	r2,-12(fp)
 400d60c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 400d610:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 400d614:	0001883a 	nop
}
 400d618:	e037883a 	mov	sp,fp
 400d61c:	df000017 	ldw	fp,0(sp)
 400d620:	dec00104 	addi	sp,sp,4
 400d624:	f800283a 	ret

0400d628 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 400d628:	defff904 	addi	sp,sp,-28
 400d62c:	df000615 	stw	fp,24(sp)
 400d630:	df000604 	addi	fp,sp,24
 400d634:	e13ffe15 	stw	r4,-8(fp)
 400d638:	e17fff15 	stw	r5,-4(fp)
 400d63c:	e0bfff17 	ldw	r2,-4(fp)
 400d640:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400d644:	0005303a 	rdctl	r2,status
 400d648:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400d64c:	e0fffb17 	ldw	r3,-20(fp)
 400d650:	00bfff84 	movi	r2,-2
 400d654:	1884703a 	and	r2,r3,r2
 400d658:	1001703a 	wrctl	status,r2
  
  return context;
 400d65c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 400d660:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 400d664:	00c00044 	movi	r3,1
 400d668:	e0bffa17 	ldw	r2,-24(fp)
 400d66c:	1884983a 	sll	r2,r3,r2
 400d670:	0084303a 	nor	r2,zero,r2
 400d674:	1007883a 	mov	r3,r2
 400d678:	d0a71b17 	ldw	r2,-25492(gp)
 400d67c:	1884703a 	and	r2,r3,r2
 400d680:	d0a71b15 	stw	r2,-25492(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 400d684:	d0a71b17 	ldw	r2,-25492(gp)
 400d688:	100170fa 	wrctl	ienable,r2
 400d68c:	e0bffc17 	ldw	r2,-16(fp)
 400d690:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400d694:	e0bffd17 	ldw	r2,-12(fp)
 400d698:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 400d69c:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 400d6a0:	0001883a 	nop
}
 400d6a4:	e037883a 	mov	sp,fp
 400d6a8:	df000017 	ldw	fp,0(sp)
 400d6ac:	dec00104 	addi	sp,sp,4
 400d6b0:	f800283a 	ret

0400d6b4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 400d6b4:	defffc04 	addi	sp,sp,-16
 400d6b8:	df000315 	stw	fp,12(sp)
 400d6bc:	df000304 	addi	fp,sp,12
 400d6c0:	e13ffe15 	stw	r4,-8(fp)
 400d6c4:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 400d6c8:	000530fa 	rdctl	r2,ienable
 400d6cc:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 400d6d0:	00c00044 	movi	r3,1
 400d6d4:	e0bfff17 	ldw	r2,-4(fp)
 400d6d8:	1884983a 	sll	r2,r3,r2
 400d6dc:	1007883a 	mov	r3,r2
 400d6e0:	e0bffd17 	ldw	r2,-12(fp)
 400d6e4:	1884703a 	and	r2,r3,r2
 400d6e8:	1004c03a 	cmpne	r2,r2,zero
 400d6ec:	10803fcc 	andi	r2,r2,255
}
 400d6f0:	e037883a 	mov	sp,fp
 400d6f4:	df000017 	ldw	fp,0(sp)
 400d6f8:	dec00104 	addi	sp,sp,4
 400d6fc:	f800283a 	ret

0400d700 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 400d700:	defff504 	addi	sp,sp,-44
 400d704:	dfc00a15 	stw	ra,40(sp)
 400d708:	df000915 	stw	fp,36(sp)
 400d70c:	df000904 	addi	fp,sp,36
 400d710:	e13ffc15 	stw	r4,-16(fp)
 400d714:	e17ffd15 	stw	r5,-12(fp)
 400d718:	e1bffe15 	stw	r6,-8(fp)
 400d71c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 400d720:	00bffa84 	movi	r2,-22
 400d724:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 400d728:	e0bffd17 	ldw	r2,-12(fp)
 400d72c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 400d730:	e0bff817 	ldw	r2,-32(fp)
 400d734:	10800808 	cmpgei	r2,r2,32
 400d738:	1000271e 	bne	r2,zero,400d7d8 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400d73c:	0005303a 	rdctl	r2,status
 400d740:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400d744:	e0fffb17 	ldw	r3,-20(fp)
 400d748:	00bfff84 	movi	r2,-2
 400d74c:	1884703a 	and	r2,r3,r2
 400d750:	1001703a 	wrctl	status,r2
  
  return context;
 400d754:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 400d758:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 400d75c:	008100b4 	movhi	r2,1026
 400d760:	10910e04 	addi	r2,r2,17464
 400d764:	e0fff817 	ldw	r3,-32(fp)
 400d768:	180690fa 	slli	r3,r3,3
 400d76c:	10c5883a 	add	r2,r2,r3
 400d770:	e0fffe17 	ldw	r3,-8(fp)
 400d774:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 400d778:	008100b4 	movhi	r2,1026
 400d77c:	10910e04 	addi	r2,r2,17464
 400d780:	e0fff817 	ldw	r3,-32(fp)
 400d784:	180690fa 	slli	r3,r3,3
 400d788:	10c5883a 	add	r2,r2,r3
 400d78c:	10800104 	addi	r2,r2,4
 400d790:	e0ffff17 	ldw	r3,-4(fp)
 400d794:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 400d798:	e0bffe17 	ldw	r2,-8(fp)
 400d79c:	10000526 	beq	r2,zero,400d7b4 <alt_iic_isr_register+0xb4>
 400d7a0:	e0bff817 	ldw	r2,-32(fp)
 400d7a4:	100b883a 	mov	r5,r2
 400d7a8:	e13ffc17 	ldw	r4,-16(fp)
 400d7ac:	400d5a00 	call	400d5a0 <alt_ic_irq_enable>
 400d7b0:	00000406 	br	400d7c4 <alt_iic_isr_register+0xc4>
 400d7b4:	e0bff817 	ldw	r2,-32(fp)
 400d7b8:	100b883a 	mov	r5,r2
 400d7bc:	e13ffc17 	ldw	r4,-16(fp)
 400d7c0:	400d6280 	call	400d628 <alt_ic_irq_disable>
 400d7c4:	e0bff715 	stw	r2,-36(fp)
 400d7c8:	e0bffa17 	ldw	r2,-24(fp)
 400d7cc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400d7d0:	e0bff917 	ldw	r2,-28(fp)
 400d7d4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 400d7d8:	e0bff717 	ldw	r2,-36(fp)
}
 400d7dc:	e037883a 	mov	sp,fp
 400d7e0:	dfc00117 	ldw	ra,4(sp)
 400d7e4:	df000017 	ldw	fp,0(sp)
 400d7e8:	dec00204 	addi	sp,sp,8
 400d7ec:	f800283a 	ret

0400d7f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400d7f0:	defffe04 	addi	sp,sp,-8
 400d7f4:	dfc00115 	stw	ra,4(sp)
 400d7f8:	df000015 	stw	fp,0(sp)
 400d7fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400d800:	d0a00b17 	ldw	r2,-32724(gp)
 400d804:	10000326 	beq	r2,zero,400d814 <alt_get_errno+0x24>
 400d808:	d0a00b17 	ldw	r2,-32724(gp)
 400d80c:	103ee83a 	callr	r2
 400d810:	00000106 	br	400d818 <alt_get_errno+0x28>
 400d814:	d0a71904 	addi	r2,gp,-25500
}
 400d818:	e037883a 	mov	sp,fp
 400d81c:	dfc00117 	ldw	ra,4(sp)
 400d820:	df000017 	ldw	fp,0(sp)
 400d824:	dec00204 	addi	sp,sp,8
 400d828:	f800283a 	ret

0400d82c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 400d82c:	deffed04 	addi	sp,sp,-76
 400d830:	dfc01215 	stw	ra,72(sp)
 400d834:	df001115 	stw	fp,68(sp)
 400d838:	df001104 	addi	fp,sp,68
 400d83c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400d840:	e0bfff17 	ldw	r2,-4(fp)
 400d844:	10000616 	blt	r2,zero,400d860 <isatty+0x34>
 400d848:	e0bfff17 	ldw	r2,-4(fp)
 400d84c:	10c00324 	muli	r3,r2,12
 400d850:	008100b4 	movhi	r2,1026
 400d854:	10a54504 	addi	r2,r2,-27372
 400d858:	1885883a 	add	r2,r3,r2
 400d85c:	00000106 	br	400d864 <isatty+0x38>
 400d860:	0005883a 	mov	r2,zero
 400d864:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 400d868:	e0bfef17 	ldw	r2,-68(fp)
 400d86c:	10000e26 	beq	r2,zero,400d8a8 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 400d870:	e0bfef17 	ldw	r2,-68(fp)
 400d874:	10800017 	ldw	r2,0(r2)
 400d878:	10800817 	ldw	r2,32(r2)
 400d87c:	1000021e 	bne	r2,zero,400d888 <isatty+0x5c>
    {
      return 1;
 400d880:	00800044 	movi	r2,1
 400d884:	00000d06 	br	400d8bc <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 400d888:	e0bff004 	addi	r2,fp,-64
 400d88c:	100b883a 	mov	r5,r2
 400d890:	e13fff17 	ldw	r4,-4(fp)
 400d894:	400d4a00 	call	400d4a0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 400d898:	e0bff117 	ldw	r2,-60(fp)
 400d89c:	10880020 	cmpeqi	r2,r2,8192
 400d8a0:	10803fcc 	andi	r2,r2,255
 400d8a4:	00000506 	br	400d8bc <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400d8a8:	400d7f00 	call	400d7f0 <alt_get_errno>
 400d8ac:	1007883a 	mov	r3,r2
 400d8b0:	00801444 	movi	r2,81
 400d8b4:	18800015 	stw	r2,0(r3)
    return 0;
 400d8b8:	0005883a 	mov	r2,zero
  }
}
 400d8bc:	e037883a 	mov	sp,fp
 400d8c0:	dfc00117 	ldw	ra,4(sp)
 400d8c4:	df000017 	ldw	fp,0(sp)
 400d8c8:	dec00204 	addi	sp,sp,8
 400d8cc:	f800283a 	ret

0400d8d0 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 400d8d0:	defffc04 	addi	sp,sp,-16
 400d8d4:	df000315 	stw	fp,12(sp)
 400d8d8:	df000304 	addi	fp,sp,12
 400d8dc:	e13ffd15 	stw	r4,-12(fp)
 400d8e0:	e17ffe15 	stw	r5,-8(fp)
 400d8e4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 400d8e8:	e0fffe17 	ldw	r3,-8(fp)
 400d8ec:	e0bffd17 	ldw	r2,-12(fp)
 400d8f0:	18800c26 	beq	r3,r2,400d924 <alt_load_section+0x54>
  {
    while( to != end )
 400d8f4:	00000806 	br	400d918 <alt_load_section+0x48>
    {
      *to++ = *from++;
 400d8f8:	e0bffe17 	ldw	r2,-8(fp)
 400d8fc:	10c00104 	addi	r3,r2,4
 400d900:	e0fffe15 	stw	r3,-8(fp)
 400d904:	e0fffd17 	ldw	r3,-12(fp)
 400d908:	19000104 	addi	r4,r3,4
 400d90c:	e13ffd15 	stw	r4,-12(fp)
 400d910:	18c00017 	ldw	r3,0(r3)
 400d914:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 400d918:	e0fffe17 	ldw	r3,-8(fp)
 400d91c:	e0bfff17 	ldw	r2,-4(fp)
 400d920:	18bff51e 	bne	r3,r2,400d8f8 <__alt_mem_onchip_memory2_0+0xfbfed8f8>
    {
      *to++ = *from++;
    }
  }
}
 400d924:	0001883a 	nop
 400d928:	e037883a 	mov	sp,fp
 400d92c:	df000017 	ldw	fp,0(sp)
 400d930:	dec00104 	addi	sp,sp,4
 400d934:	f800283a 	ret

0400d938 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 400d938:	defffe04 	addi	sp,sp,-8
 400d93c:	dfc00115 	stw	ra,4(sp)
 400d940:	df000015 	stw	fp,0(sp)
 400d944:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 400d948:	018100b4 	movhi	r6,1026
 400d94c:	31a9ef04 	addi	r6,r6,-22596
 400d950:	014100b4 	movhi	r5,1026
 400d954:	29631204 	addi	r5,r5,-29624
 400d958:	010100b4 	movhi	r4,1026
 400d95c:	2129ef04 	addi	r4,r4,-22596
 400d960:	400d8d00 	call	400d8d0 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 400d964:	01810034 	movhi	r6,1024
 400d968:	31809104 	addi	r6,r6,580
 400d96c:	01410034 	movhi	r5,1024
 400d970:	29400804 	addi	r5,r5,32
 400d974:	01010034 	movhi	r4,1024
 400d978:	21000804 	addi	r4,r4,32
 400d97c:	400d8d00 	call	400d8d0 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 400d980:	018100b4 	movhi	r6,1026
 400d984:	31a31204 	addi	r6,r6,-29624
 400d988:	014100b4 	movhi	r5,1026
 400d98c:	2961b104 	addi	r5,r5,-31036
 400d990:	010100b4 	movhi	r4,1026
 400d994:	2121b104 	addi	r4,r4,-31036
 400d998:	400d8d00 	call	400d8d0 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 400d99c:	40174c00 	call	40174c0 <alt_dcache_flush_all>
  alt_icache_flush_all();
 400d9a0:	40176a80 	call	40176a8 <alt_icache_flush_all>
}
 400d9a4:	0001883a 	nop
 400d9a8:	e037883a 	mov	sp,fp
 400d9ac:	dfc00117 	ldw	ra,4(sp)
 400d9b0:	df000017 	ldw	fp,0(sp)
 400d9b4:	dec00204 	addi	sp,sp,8
 400d9b8:	f800283a 	ret

0400d9bc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400d9bc:	defffe04 	addi	sp,sp,-8
 400d9c0:	dfc00115 	stw	ra,4(sp)
 400d9c4:	df000015 	stw	fp,0(sp)
 400d9c8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400d9cc:	d0a00b17 	ldw	r2,-32724(gp)
 400d9d0:	10000326 	beq	r2,zero,400d9e0 <alt_get_errno+0x24>
 400d9d4:	d0a00b17 	ldw	r2,-32724(gp)
 400d9d8:	103ee83a 	callr	r2
 400d9dc:	00000106 	br	400d9e4 <alt_get_errno+0x28>
 400d9e0:	d0a71904 	addi	r2,gp,-25500
}
 400d9e4:	e037883a 	mov	sp,fp
 400d9e8:	dfc00117 	ldw	ra,4(sp)
 400d9ec:	df000017 	ldw	fp,0(sp)
 400d9f0:	dec00204 	addi	sp,sp,8
 400d9f4:	f800283a 	ret

0400d9f8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 400d9f8:	defff904 	addi	sp,sp,-28
 400d9fc:	dfc00615 	stw	ra,24(sp)
 400da00:	df000515 	stw	fp,20(sp)
 400da04:	df000504 	addi	fp,sp,20
 400da08:	e13ffd15 	stw	r4,-12(fp)
 400da0c:	e17ffe15 	stw	r5,-8(fp)
 400da10:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 400da14:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400da18:	e0bffd17 	ldw	r2,-12(fp)
 400da1c:	10000616 	blt	r2,zero,400da38 <lseek+0x40>
 400da20:	e0bffd17 	ldw	r2,-12(fp)
 400da24:	10c00324 	muli	r3,r2,12
 400da28:	008100b4 	movhi	r2,1026
 400da2c:	10a54504 	addi	r2,r2,-27372
 400da30:	1885883a 	add	r2,r3,r2
 400da34:	00000106 	br	400da3c <lseek+0x44>
 400da38:	0005883a 	mov	r2,zero
 400da3c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 400da40:	e0bffc17 	ldw	r2,-16(fp)
 400da44:	10001026 	beq	r2,zero,400da88 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 400da48:	e0bffc17 	ldw	r2,-16(fp)
 400da4c:	10800017 	ldw	r2,0(r2)
 400da50:	10800717 	ldw	r2,28(r2)
 400da54:	10000926 	beq	r2,zero,400da7c <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 400da58:	e0bffc17 	ldw	r2,-16(fp)
 400da5c:	10800017 	ldw	r2,0(r2)
 400da60:	10800717 	ldw	r2,28(r2)
 400da64:	e1bfff17 	ldw	r6,-4(fp)
 400da68:	e17ffe17 	ldw	r5,-8(fp)
 400da6c:	e13ffc17 	ldw	r4,-16(fp)
 400da70:	103ee83a 	callr	r2
 400da74:	e0bffb15 	stw	r2,-20(fp)
 400da78:	00000506 	br	400da90 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 400da7c:	00bfde84 	movi	r2,-134
 400da80:	e0bffb15 	stw	r2,-20(fp)
 400da84:	00000206 	br	400da90 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 400da88:	00bfebc4 	movi	r2,-81
 400da8c:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 400da90:	e0bffb17 	ldw	r2,-20(fp)
 400da94:	1000070e 	bge	r2,zero,400dab4 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 400da98:	400d9bc0 	call	400d9bc <alt_get_errno>
 400da9c:	1007883a 	mov	r3,r2
 400daa0:	e0bffb17 	ldw	r2,-20(fp)
 400daa4:	0085c83a 	sub	r2,zero,r2
 400daa8:	18800015 	stw	r2,0(r3)
    rc = -1;
 400daac:	00bfffc4 	movi	r2,-1
 400dab0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 400dab4:	e0bffb17 	ldw	r2,-20(fp)
}
 400dab8:	e037883a 	mov	sp,fp
 400dabc:	dfc00117 	ldw	ra,4(sp)
 400dac0:	df000017 	ldw	fp,0(sp)
 400dac4:	dec00204 	addi	sp,sp,8
 400dac8:	f800283a 	ret

0400dacc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 400dacc:	defff904 	addi	sp,sp,-28
 400dad0:	dfc00615 	stw	ra,24(sp)
 400dad4:	df000515 	stw	fp,20(sp)
 400dad8:	df000504 	addi	fp,sp,20
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 400dadc:	0009883a 	mov	r4,zero
 400dae0:	40164dc0 	call	40164dc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 400dae4:	400ea880 	call	400ea88 <OSInit>
 400dae8:	01000044 	movi	r4,1
 400daec:	4013ea00 	call	4013ea0 <OSSemCreate>
 400daf0:	d0a72015 	stw	r2,-25472(gp)
 400daf4:	01000044 	movi	r4,1
 400daf8:	4013ea00 	call	4013ea0 <OSSemCreate>
 400dafc:	d0a72215 	stw	r2,-25464(gp)
 400db00:	d0a71a04 	addi	r2,gp,-25496
 400db04:	e0bffc15 	stw	r2,-16(fp)
 400db08:	00800044 	movi	r2,1
 400db0c:	e0bffd0d 	sth	r2,-12(fp)
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_create (OS_EVENT** sem, 
              INT16U value)
{
  *sem = OSSemCreate (value);
 400db10:	e0bffd0b 	ldhu	r2,-12(fp)
 400db14:	1009883a 	mov	r4,r2
 400db18:	4013ea00 	call	4013ea0 <OSSemCreate>
 400db1c:	1007883a 	mov	r3,r2
 400db20:	e0bffc17 	ldw	r2,-16(fp)
 400db24:	10c00015 	stw	r3,0(r2)
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 400db28:	40165140 	call	4016514 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 400db2c:	018100b4 	movhi	r6,1026
 400db30:	31a2bf04 	addi	r6,r6,-29956
 400db34:	014100b4 	movhi	r5,1026
 400db38:	2962bf04 	addi	r5,r5,-29956
 400db3c:	010100b4 	movhi	r4,1026
 400db40:	2122bf04 	addi	r4,r4,-29956
 400db44:	401783c0 	call	401783c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 400db48:	40175e80 	call	40175e8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 400db4c:	01010074 	movhi	r4,1025
 400db50:	211d9204 	addi	r4,r4,30280
 400db54:	40183300 	call	4018330 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 400db58:	d0a71c17 	ldw	r2,-25488(gp)
 400db5c:	d0e71d17 	ldw	r3,-25484(gp)
 400db60:	d1271e17 	ldw	r4,-25480(gp)
 400db64:	200d883a 	mov	r6,r4
 400db68:	180b883a 	mov	r5,r3
 400db6c:	1009883a 	mov	r4,r2
 400db70:	40008f00 	call	40008f0 <main>
 400db74:	e0bffb15 	stw	r2,-20(fp)
  close(STDOUT_FILENO);
 400db78:	01000044 	movi	r4,1
 400db7c:	400d3680 	call	400d368 <close>
  exit (result);
 400db80:	e13ffb17 	ldw	r4,-20(fp)
 400db84:	40183440 	call	4018344 <exit>

0400db88 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400db88:	defffe04 	addi	sp,sp,-8
 400db8c:	dfc00115 	stw	ra,4(sp)
 400db90:	df000015 	stw	fp,0(sp)
 400db94:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400db98:	d0a00b17 	ldw	r2,-32724(gp)
 400db9c:	10000326 	beq	r2,zero,400dbac <alt_get_errno+0x24>
 400dba0:	d0a00b17 	ldw	r2,-32724(gp)
 400dba4:	103ee83a 	callr	r2
 400dba8:	00000106 	br	400dbb0 <alt_get_errno+0x28>
 400dbac:	d0a71904 	addi	r2,gp,-25500
}
 400dbb0:	e037883a 	mov	sp,fp
 400dbb4:	dfc00117 	ldw	ra,4(sp)
 400dbb8:	df000017 	ldw	fp,0(sp)
 400dbbc:	dec00204 	addi	sp,sp,8
 400dbc0:	f800283a 	ret

0400dbc4 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 400dbc4:	defff904 	addi	sp,sp,-28
 400dbc8:	dfc00615 	stw	ra,24(sp)
 400dbcc:	df000515 	stw	fp,20(sp)
 400dbd0:	df000504 	addi	fp,sp,20
 400dbd4:	e13ffd15 	stw	r4,-12(fp)
 400dbd8:	e17ffe15 	stw	r5,-8(fp)
 400dbdc:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400dbe0:	e0bffd17 	ldw	r2,-12(fp)
 400dbe4:	10000616 	blt	r2,zero,400dc00 <read+0x3c>
 400dbe8:	e0bffd17 	ldw	r2,-12(fp)
 400dbec:	10c00324 	muli	r3,r2,12
 400dbf0:	008100b4 	movhi	r2,1026
 400dbf4:	10a54504 	addi	r2,r2,-27372
 400dbf8:	1885883a 	add	r2,r3,r2
 400dbfc:	00000106 	br	400dc04 <read+0x40>
 400dc00:	0005883a 	mov	r2,zero
 400dc04:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 400dc08:	e0bffb17 	ldw	r2,-20(fp)
 400dc0c:	10002226 	beq	r2,zero,400dc98 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 400dc10:	e0bffb17 	ldw	r2,-20(fp)
 400dc14:	10800217 	ldw	r2,8(r2)
 400dc18:	108000cc 	andi	r2,r2,3
 400dc1c:	10800060 	cmpeqi	r2,r2,1
 400dc20:	1000181e 	bne	r2,zero,400dc84 <read+0xc0>
        (fd->dev->read))
 400dc24:	e0bffb17 	ldw	r2,-20(fp)
 400dc28:	10800017 	ldw	r2,0(r2)
 400dc2c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 400dc30:	10001426 	beq	r2,zero,400dc84 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 400dc34:	e0bffb17 	ldw	r2,-20(fp)
 400dc38:	10800017 	ldw	r2,0(r2)
 400dc3c:	10800517 	ldw	r2,20(r2)
 400dc40:	e0ffff17 	ldw	r3,-4(fp)
 400dc44:	180d883a 	mov	r6,r3
 400dc48:	e17ffe17 	ldw	r5,-8(fp)
 400dc4c:	e13ffb17 	ldw	r4,-20(fp)
 400dc50:	103ee83a 	callr	r2
 400dc54:	e0bffc15 	stw	r2,-16(fp)
 400dc58:	e0bffc17 	ldw	r2,-16(fp)
 400dc5c:	1000070e 	bge	r2,zero,400dc7c <read+0xb8>
        {
          ALT_ERRNO = -rval;
 400dc60:	400db880 	call	400db88 <alt_get_errno>
 400dc64:	1007883a 	mov	r3,r2
 400dc68:	e0bffc17 	ldw	r2,-16(fp)
 400dc6c:	0085c83a 	sub	r2,zero,r2
 400dc70:	18800015 	stw	r2,0(r3)
          return -1;
 400dc74:	00bfffc4 	movi	r2,-1
 400dc78:	00000c06 	br	400dcac <read+0xe8>
        }
        return rval;
 400dc7c:	e0bffc17 	ldw	r2,-16(fp)
 400dc80:	00000a06 	br	400dcac <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 400dc84:	400db880 	call	400db88 <alt_get_errno>
 400dc88:	1007883a 	mov	r3,r2
 400dc8c:	00800344 	movi	r2,13
 400dc90:	18800015 	stw	r2,0(r3)
 400dc94:	00000406 	br	400dca8 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 400dc98:	400db880 	call	400db88 <alt_get_errno>
 400dc9c:	1007883a 	mov	r3,r2
 400dca0:	00801444 	movi	r2,81
 400dca4:	18800015 	stw	r2,0(r3)
  }
  return -1;
 400dca8:	00bfffc4 	movi	r2,-1
}
 400dcac:	e037883a 	mov	sp,fp
 400dcb0:	dfc00117 	ldw	ra,4(sp)
 400dcb4:	df000017 	ldw	fp,0(sp)
 400dcb8:	dec00204 	addi	sp,sp,8
 400dcbc:	f800283a 	ret

0400dcc0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 400dcc0:	defffe04 	addi	sp,sp,-8
 400dcc4:	df000115 	stw	fp,4(sp)
 400dcc8:	df000104 	addi	fp,sp,4
 400dccc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 400dcd0:	e0bfff17 	ldw	r2,-4(fp)
 400dcd4:	108000d0 	cmplti	r2,r2,3
 400dcd8:	10000d1e 	bne	r2,zero,400dd10 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 400dcdc:	008100b4 	movhi	r2,1026
 400dce0:	10a54504 	addi	r2,r2,-27372
 400dce4:	e0ffff17 	ldw	r3,-4(fp)
 400dce8:	18c00324 	muli	r3,r3,12
 400dcec:	10c5883a 	add	r2,r2,r3
 400dcf0:	10800204 	addi	r2,r2,8
 400dcf4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 400dcf8:	008100b4 	movhi	r2,1026
 400dcfc:	10a54504 	addi	r2,r2,-27372
 400dd00:	e0ffff17 	ldw	r3,-4(fp)
 400dd04:	18c00324 	muli	r3,r3,12
 400dd08:	10c5883a 	add	r2,r2,r3
 400dd0c:	10000015 	stw	zero,0(r2)
  }
}
 400dd10:	0001883a 	nop
 400dd14:	e037883a 	mov	sp,fp
 400dd18:	df000017 	ldw	fp,0(sp)
 400dd1c:	dec00104 	addi	sp,sp,4
 400dd20:	f800283a 	ret

0400dd24 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 400dd24:	defff904 	addi	sp,sp,-28
 400dd28:	df000615 	stw	fp,24(sp)
 400dd2c:	df000604 	addi	fp,sp,24
 400dd30:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400dd34:	0005303a 	rdctl	r2,status
 400dd38:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400dd3c:	e0fffe17 	ldw	r3,-8(fp)
 400dd40:	00bfff84 	movi	r2,-2
 400dd44:	1884703a 	and	r2,r3,r2
 400dd48:	1001703a 	wrctl	status,r2
  
  return context;
 400dd4c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 400dd50:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 400dd54:	d0a00d17 	ldw	r2,-32716(gp)
 400dd58:	10c000c4 	addi	r3,r2,3
 400dd5c:	00bfff04 	movi	r2,-4
 400dd60:	1884703a 	and	r2,r3,r2
 400dd64:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 400dd68:	d0e00d17 	ldw	r3,-32716(gp)
 400dd6c:	e0bfff17 	ldw	r2,-4(fp)
 400dd70:	1887883a 	add	r3,r3,r2
 400dd74:	00820034 	movhi	r2,2048
 400dd78:	10800004 	addi	r2,r2,0
 400dd7c:	10c0062e 	bgeu	r2,r3,400dd98 <sbrk+0x74>
 400dd80:	e0bffb17 	ldw	r2,-20(fp)
 400dd84:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400dd88:	e0bffa17 	ldw	r2,-24(fp)
 400dd8c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 400dd90:	00bfffc4 	movi	r2,-1
 400dd94:	00000b06 	br	400ddc4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 400dd98:	d0a00d17 	ldw	r2,-32716(gp)
 400dd9c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 400dda0:	d0e00d17 	ldw	r3,-32716(gp)
 400dda4:	e0bfff17 	ldw	r2,-4(fp)
 400dda8:	1885883a 	add	r2,r3,r2
 400ddac:	d0a00d15 	stw	r2,-32716(gp)
 400ddb0:	e0bffb17 	ldw	r2,-20(fp)
 400ddb4:	e0bffc15 	stw	r2,-16(fp)
 400ddb8:	e0bffc17 	ldw	r2,-16(fp)
 400ddbc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 400ddc0:	e0bffd17 	ldw	r2,-12(fp)
} 
 400ddc4:	e037883a 	mov	sp,fp
 400ddc8:	df000017 	ldw	fp,0(sp)
 400ddcc:	dec00104 	addi	sp,sp,4
 400ddd0:	f800283a 	ret

0400ddd4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400ddd4:	defffe04 	addi	sp,sp,-8
 400ddd8:	dfc00115 	stw	ra,4(sp)
 400dddc:	df000015 	stw	fp,0(sp)
 400dde0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400dde4:	d0a00b17 	ldw	r2,-32724(gp)
 400dde8:	10000326 	beq	r2,zero,400ddf8 <alt_get_errno+0x24>
 400ddec:	d0a00b17 	ldw	r2,-32724(gp)
 400ddf0:	103ee83a 	callr	r2
 400ddf4:	00000106 	br	400ddfc <alt_get_errno+0x28>
 400ddf8:	d0a71904 	addi	r2,gp,-25500
}
 400ddfc:	e037883a 	mov	sp,fp
 400de00:	dfc00117 	ldw	ra,4(sp)
 400de04:	df000017 	ldw	fp,0(sp)
 400de08:	dec00204 	addi	sp,sp,8
 400de0c:	f800283a 	ret

0400de10 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 400de10:	defff904 	addi	sp,sp,-28
 400de14:	dfc00615 	stw	ra,24(sp)
 400de18:	df000515 	stw	fp,20(sp)
 400de1c:	df000504 	addi	fp,sp,20
 400de20:	e13ffd15 	stw	r4,-12(fp)
 400de24:	e17ffe15 	stw	r5,-8(fp)
 400de28:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400de2c:	e0bffd17 	ldw	r2,-12(fp)
 400de30:	10000616 	blt	r2,zero,400de4c <write+0x3c>
 400de34:	e0bffd17 	ldw	r2,-12(fp)
 400de38:	10c00324 	muli	r3,r2,12
 400de3c:	008100b4 	movhi	r2,1026
 400de40:	10a54504 	addi	r2,r2,-27372
 400de44:	1885883a 	add	r2,r3,r2
 400de48:	00000106 	br	400de50 <write+0x40>
 400de4c:	0005883a 	mov	r2,zero
 400de50:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 400de54:	e0bffb17 	ldw	r2,-20(fp)
 400de58:	10002126 	beq	r2,zero,400dee0 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 400de5c:	e0bffb17 	ldw	r2,-20(fp)
 400de60:	10800217 	ldw	r2,8(r2)
 400de64:	108000cc 	andi	r2,r2,3
 400de68:	10001826 	beq	r2,zero,400decc <write+0xbc>
 400de6c:	e0bffb17 	ldw	r2,-20(fp)
 400de70:	10800017 	ldw	r2,0(r2)
 400de74:	10800617 	ldw	r2,24(r2)
 400de78:	10001426 	beq	r2,zero,400decc <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 400de7c:	e0bffb17 	ldw	r2,-20(fp)
 400de80:	10800017 	ldw	r2,0(r2)
 400de84:	10800617 	ldw	r2,24(r2)
 400de88:	e0ffff17 	ldw	r3,-4(fp)
 400de8c:	180d883a 	mov	r6,r3
 400de90:	e17ffe17 	ldw	r5,-8(fp)
 400de94:	e13ffb17 	ldw	r4,-20(fp)
 400de98:	103ee83a 	callr	r2
 400de9c:	e0bffc15 	stw	r2,-16(fp)
 400dea0:	e0bffc17 	ldw	r2,-16(fp)
 400dea4:	1000070e 	bge	r2,zero,400dec4 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 400dea8:	400ddd40 	call	400ddd4 <alt_get_errno>
 400deac:	1007883a 	mov	r3,r2
 400deb0:	e0bffc17 	ldw	r2,-16(fp)
 400deb4:	0085c83a 	sub	r2,zero,r2
 400deb8:	18800015 	stw	r2,0(r3)
        return -1;
 400debc:	00bfffc4 	movi	r2,-1
 400dec0:	00000c06 	br	400def4 <write+0xe4>
      }
      return rval;
 400dec4:	e0bffc17 	ldw	r2,-16(fp)
 400dec8:	00000a06 	br	400def4 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 400decc:	400ddd40 	call	400ddd4 <alt_get_errno>
 400ded0:	1007883a 	mov	r3,r2
 400ded4:	00800344 	movi	r2,13
 400ded8:	18800015 	stw	r2,0(r3)
 400dedc:	00000406 	br	400def0 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 400dee0:	400ddd40 	call	400ddd4 <alt_get_errno>
 400dee4:	1007883a 	mov	r3,r2
 400dee8:	00801444 	movi	r2,81
 400deec:	18800015 	stw	r2,0(r3)
  }
  return -1;
 400def0:	00bfffc4 	movi	r2,-1
}
 400def4:	e037883a 	mov	sp,fp
 400def8:	dfc00117 	ldw	ra,4(sp)
 400defc:	df000017 	ldw	fp,0(sp)
 400df00:	dec00204 	addi	sp,sp,8
 400df04:	f800283a 	ret

0400df08 <__env_lock>:
/*
 *
 */

void __env_lock ( struct _reent *_r )
{
 400df08:	deffdf04 	addi	sp,sp,-132
 400df0c:	dfc02015 	stw	ra,128(sp)
 400df10:	df001f15 	stw	fp,124(sp)
 400df14:	df001f04 	addi	fp,sp,124
 400df18:	e13fff15 	stw	r4,-4(fp)
  INT8U err;
  int id;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 400df1c:	e0bfe204 	addi	r2,fp,-120
 400df20:	100b883a 	mov	r5,r2
 400df24:	01003fc4 	movi	r4,255
 400df28:	4015e280 	call	4015e28 <OSTaskQuery>
 400df2c:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 400df30:	e0bffe83 	ldbu	r2,-6(fp)
 400df34:	10803fcc 	andi	r2,r2,255
 400df38:	10001e1e 	bne	r2,zero,400dfb4 <__env_lock+0xac>
    return;

  id = tcb.OSTCBPrio;
 400df3c:	e0bfee83 	ldbu	r2,-70(fp)
 400df40:	10803fcc 	andi	r2,r2,255
 400df44:	e0bfe115 	stw	r2,-124(fp)
   
  /* see if we own the environment already */

  OSSemQuery( alt_envsem, &semdata );
 400df48:	d0a72017 	ldw	r2,-25472(gp)
 400df4c:	e0fffd04 	addi	r3,fp,-12
 400df50:	180b883a 	mov	r5,r3
 400df54:	1009883a 	mov	r4,r2
 400df58:	40146400 	call	4014640 <OSSemQuery>
  if( semdata.OSEventGrp && id == lockid ) 
 400df5c:	e0bffe43 	ldbu	r2,-7(fp)
 400df60:	10803fcc 	andi	r2,r2,255
 400df64:	10000726 	beq	r2,zero,400df84 <__env_lock+0x7c>
 400df68:	d0a00e17 	ldw	r2,-32712(gp)
 400df6c:	e0ffe117 	ldw	r3,-124(fp)
 400df70:	1880041e 	bne	r3,r2,400df84 <__env_lock+0x7c>
  {
    /* we do; just count the recursion */

    locks++;
 400df74:	d0a71f17 	ldw	r2,-25476(gp)
 400df78:	10800044 	addi	r2,r2,1
 400df7c:	d0a71f15 	stw	r2,-25476(gp)
 400df80:	00000a06 	br	400dfac <__env_lock+0xa4>
  }
  else 
  {
    /* wait on the other task to yield, then claim ownership */

    OSSemPend( alt_envsem, 0, &err );
 400df84:	d0a72017 	ldw	r2,-25472(gp)
 400df88:	e0fffe84 	addi	r3,fp,-6
 400df8c:	180d883a 	mov	r6,r3
 400df90:	000b883a 	mov	r5,zero
 400df94:	1009883a 	mov	r4,r2
 400df98:	40141b80 	call	40141b8 <OSSemPend>
    locks  = 1;
 400df9c:	00800044 	movi	r2,1
 400dfa0:	d0a71f15 	stw	r2,-25476(gp)
    lockid = id;
 400dfa4:	e0bfe117 	ldw	r2,-124(fp)
 400dfa8:	d0a00e15 	stw	r2,-32712(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
 400dfac:	0001883a 	nop
 400dfb0:	00000106 	br	400dfb8 <__env_lock+0xb0>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
 400dfb4:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 400dfb8:	e037883a 	mov	sp,fp
 400dfbc:	dfc00117 	ldw	ra,4(sp)
 400dfc0:	df000017 	ldw	fp,0(sp)
 400dfc4:	dec00204 	addi	sp,sp,8
 400dfc8:	f800283a 	ret

0400dfcc <__env_unlock>:
/*
 *
 */

void __env_unlock ( struct _reent *_r )
{
 400dfcc:	defffd04 	addi	sp,sp,-12
 400dfd0:	dfc00215 	stw	ra,8(sp)
 400dfd4:	df000115 	stw	fp,4(sp)
 400dfd8:	df000104 	addi	fp,sp,4
 400dfdc:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
 400dfe0:	d0a71f17 	ldw	r2,-25476(gp)
 400dfe4:	10000b26 	beq	r2,zero,400e014 <__env_unlock+0x48>
   /* 
    * release the environment once the number of locks == the number 
    * of unlocks 
    */

  if( (--locks) == 0 ) 
 400dfe8:	d0a71f17 	ldw	r2,-25476(gp)
 400dfec:	10bfffc4 	addi	r2,r2,-1
 400dff0:	d0a71f15 	stw	r2,-25476(gp)
 400dff4:	d0a71f17 	ldw	r2,-25476(gp)
 400dff8:	1000071e 	bne	r2,zero,400e018 <__env_unlock+0x4c>
  {
    lockid = -1;
 400dffc:	00bfffc4 	movi	r2,-1
 400e000:	d0a00e15 	stw	r2,-32712(gp)
    OSSemPost( alt_envsem );
 400e004:	d0a72017 	ldw	r2,-25472(gp)
 400e008:	1009883a 	mov	r4,r2
 400e00c:	40145300 	call	4014530 <OSSemPost>
 400e010:	00000106 	br	400e018 <__env_unlock+0x4c>

void __env_unlock ( struct _reent *_r )
{
#if OS_THREAD_SAFE_NEWLIB
  if (locks == 0)
    return;
 400e014:	0001883a 	nop
  {
    lockid = -1;
    OSSemPost( alt_envsem );
  }
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 400e018:	e037883a 	mov	sp,fp
 400e01c:	dfc00117 	ldw	ra,4(sp)
 400e020:	df000017 	ldw	fp,0(sp)
 400e024:	dec00204 	addi	sp,sp,8
 400e028:	f800283a 	ret

0400e02c <__malloc_lock>:
/*
 *
 */

void __malloc_lock ( struct _reent *_r )
{
 400e02c:	deffdb04 	addi	sp,sp,-148
 400e030:	dfc02415 	stw	ra,144(sp)
 400e034:	df002315 	stw	fp,140(sp)
 400e038:	df002304 	addi	fp,sp,140
 400e03c:	e13fff15 	stw	r4,-4(fp)
  OS_TCB tcb;
  OS_SEM_DATA semdata;
  INT8U err;
  int id;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 400e040:	e03fdd15 	stw	zero,-140(fp)
#endif  
  
  if (OSRunning != OS_TRUE)
 400e044:	d0a72343 	ldbu	r2,-25459(gp)
 400e048:	10803fcc 	andi	r2,r2,255
 400e04c:	10800060 	cmpeqi	r2,r2,1
 400e050:	10003626 	beq	r2,zero,400e12c <__malloc_lock+0x100>
      return;

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
 400e054:	e0bfe204 	addi	r2,fp,-120
 400e058:	100b883a 	mov	r5,r2
 400e05c:	01003fc4 	movi	r4,255
 400e060:	4015e280 	call	4015e28 <OSTaskQuery>
 400e064:	e0bffe85 	stb	r2,-6(fp)
  if (err != OS_NO_ERR)
 400e068:	e0bffe83 	ldbu	r2,-6(fp)
 400e06c:	10803fcc 	andi	r2,r2,255
 400e070:	1000301e 	bne	r2,zero,400e134 <__malloc_lock+0x108>
    return;

  id = tcb.OSTCBPrio;
 400e074:	e0bfee83 	ldbu	r2,-70(fp)
 400e078:	10803fcc 	andi	r2,r2,255
 400e07c:	e0bfde15 	stw	r2,-136(fp)
   
  /* see if we own the heap already */

  OSSemQuery( alt_heapsem, &semdata );
 400e080:	d0a72217 	ldw	r2,-25464(gp)
 400e084:	e0fffd04 	addi	r3,fp,-12
 400e088:	180b883a 	mov	r5,r3
 400e08c:	1009883a 	mov	r4,r2
 400e090:	40146400 	call	4014640 <OSSemQuery>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400e094:	0005303a 	rdctl	r2,status
 400e098:	e0bfe115 	stw	r2,-124(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400e09c:	e0ffe117 	ldw	r3,-124(fp)
 400e0a0:	00bfff84 	movi	r2,-2
 400e0a4:	1884703a 	and	r2,r3,r2
 400e0a8:	1001703a 	wrctl	status,r2
  
  return context;
 400e0ac:	e0bfe117 	ldw	r2,-124(fp)
  
  OS_ENTER_CRITICAL();
 400e0b0:	e0bfdd15 	stw	r2,-140(fp)

  if( !semdata.OSCnt && id == lockid ) 
 400e0b4:	e0bffd0b 	ldhu	r2,-12(fp)
 400e0b8:	10bfffcc 	andi	r2,r2,65535
 400e0bc:	10000b1e 	bne	r2,zero,400e0ec <__malloc_lock+0xc0>
 400e0c0:	d0a00f17 	ldw	r2,-32708(gp)
 400e0c4:	e0ffde17 	ldw	r3,-136(fp)
 400e0c8:	1880081e 	bne	r3,r2,400e0ec <__malloc_lock+0xc0>
  {
    /* we do; just count the recursion */
    locks++;
 400e0cc:	d0a72117 	ldw	r2,-25468(gp)
 400e0d0:	10800044 	addi	r2,r2,1
 400e0d4:	d0a72115 	stw	r2,-25468(gp)
 400e0d8:	e0bfdd17 	ldw	r2,-140(fp)
 400e0dc:	e0bfdf15 	stw	r2,-132(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400e0e0:	e0bfdf17 	ldw	r2,-132(fp)
 400e0e4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
 400e0e8:	00000e06 	br	400e124 <__malloc_lock+0xf8>
 400e0ec:	e0bfdd17 	ldw	r2,-140(fp)
 400e0f0:	e0bfe015 	stw	r2,-128(fp)
 400e0f4:	e0bfe017 	ldw	r2,-128(fp)
 400e0f8:	1001703a 	wrctl	status,r2
  else 
  {
    /* wait on the other task to yield the heap, then claim ownership of it */
    OS_EXIT_CRITICAL();

    OSSemPend( alt_heapsem, 0, &err );
 400e0fc:	d0a72217 	ldw	r2,-25464(gp)
 400e100:	e0fffe84 	addi	r3,fp,-6
 400e104:	180d883a 	mov	r6,r3
 400e108:	000b883a 	mov	r5,zero
 400e10c:	1009883a 	mov	r4,r2
 400e110:	40141b80 	call	40141b8 <OSSemPend>
    locks  = 1;
 400e114:	00800044 	movi	r2,1
 400e118:	d0a72115 	stw	r2,-25468(gp)
    lockid = id;
 400e11c:	e0bfde17 	ldw	r2,-136(fp)
 400e120:	d0a00f15 	stw	r2,-32708(gp)
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
 400e124:	0001883a 	nop
 400e128:	00000306 	br	400e138 <__malloc_lock+0x10c>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif  
  
  if (OSRunning != OS_TRUE)
      return;
 400e12c:	0001883a 	nop
 400e130:	00000106 	br	400e138 <__malloc_lock+0x10c>

  /* use our priority as a task id */

  err = OSTaskQuery( OS_PRIO_SELF, &tcb );
  if (err != OS_NO_ERR)
    return;
 400e134:	0001883a 	nop
    lockid = id;
  }

#endif /* OS_THREAD_SAFE_NEWLIB */
  return;
}
 400e138:	e037883a 	mov	sp,fp
 400e13c:	dfc00117 	ldw	ra,4(sp)
 400e140:	df000017 	ldw	fp,0(sp)
 400e144:	dec00204 	addi	sp,sp,8
 400e148:	f800283a 	ret

0400e14c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 400e14c:	defff804 	addi	sp,sp,-32
 400e150:	dfc00715 	stw	ra,28(sp)
 400e154:	df000615 	stw	fp,24(sp)
 400e158:	df000604 	addi	fp,sp,24
 400e15c:	e13fff15 	stw	r4,-4(fp)
#if OS_THREAD_SAFE_NEWLIB

#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 400e160:	e03ffa15 	stw	zero,-24(fp)
#endif 

  if (OSRunning != OS_TRUE)
 400e164:	d0a72343 	ldbu	r2,-25459(gp)
 400e168:	10803fcc 	andi	r2,r2,255
 400e16c:	10800060 	cmpeqi	r2,r2,1
 400e170:	10002326 	beq	r2,zero,400e200 <__malloc_unlock+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400e174:	0005303a 	rdctl	r2,status
 400e178:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400e17c:	e0fffe17 	ldw	r3,-8(fp)
 400e180:	00bfff84 	movi	r2,-2
 400e184:	1884703a 	and	r2,r3,r2
 400e188:	1001703a 	wrctl	status,r2
  
  return context;
 400e18c:	e0bffe17 	ldw	r2,-8(fp)
      return;

  OS_ENTER_CRITICAL();
 400e190:	e0bffa15 	stw	r2,-24(fp)
  if (locks == 0)
 400e194:	d0a72117 	ldw	r2,-25468(gp)
 400e198:	1000051e 	bne	r2,zero,400e1b0 <__malloc_unlock+0x64>
 400e19c:	e0bffa17 	ldw	r2,-24(fp)
 400e1a0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400e1a4:	e0bffb17 	ldw	r2,-20(fp)
 400e1a8:	1001703a 	wrctl	status,r2
  {
      OS_EXIT_CRITICAL();
      return;
 400e1ac:	00001506 	br	400e204 <__malloc_unlock+0xb8>
  }

  /* release the heap once the number of locks == the number of unlocks */
  if( (--locks) == 0 ) 
 400e1b0:	d0a72117 	ldw	r2,-25468(gp)
 400e1b4:	10bfffc4 	addi	r2,r2,-1
 400e1b8:	d0a72115 	stw	r2,-25468(gp)
 400e1bc:	d0a72117 	ldw	r2,-25468(gp)
 400e1c0:	10000a1e 	bne	r2,zero,400e1ec <__malloc_unlock+0xa0>
  {
    lockid = -1;
 400e1c4:	00bfffc4 	movi	r2,-1
 400e1c8:	d0a00f15 	stw	r2,-32708(gp)
 400e1cc:	e0bffa17 	ldw	r2,-24(fp)
 400e1d0:	e0bffc15 	stw	r2,-16(fp)
 400e1d4:	e0bffc17 	ldw	r2,-16(fp)
 400e1d8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSSemPost( alt_heapsem );
 400e1dc:	d0a72217 	ldw	r2,-25464(gp)
 400e1e0:	1009883a 	mov	r4,r2
 400e1e4:	40145300 	call	4014530 <OSSemPost>
 400e1e8:	00000606 	br	400e204 <__malloc_unlock+0xb8>
 400e1ec:	e0bffa17 	ldw	r2,-24(fp)
 400e1f0:	e0bffd15 	stw	r2,-12(fp)
 400e1f4:	e0bffd17 	ldw	r2,-12(fp)
 400e1f8:	1001703a 	wrctl	status,r2
 400e1fc:	00000106 	br	400e204 <__malloc_unlock+0xb8>
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
#endif 

  if (OSRunning != OS_TRUE)
      return;
 400e200:	0001883a 	nop
  {
      OS_EXIT_CRITICAL();
  }
  
#endif /* OS_THREAD_SAFE_NEWLIB */
}
 400e204:	e037883a 	mov	sp,fp
 400e208:	dfc00117 	ldw	ra,4(sp)
 400e20c:	df000017 	ldw	fp,0(sp)
 400e210:	dec00204 	addi	sp,sp,8
 400e214:	f800283a 	ret

0400e218 <OSEventNameGet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
INT8U  OSEventNameGet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 400e218:	defff704 	addi	sp,sp,-36
 400e21c:	dfc00815 	stw	ra,32(sp)
 400e220:	df000715 	stw	fp,28(sp)
 400e224:	df000704 	addi	fp,sp,28
 400e228:	e13ffd15 	stw	r4,-12(fp)
 400e22c:	e17ffe15 	stw	r5,-8(fp)
 400e230:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 400e234:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 400e238:	e0bfff17 	ldw	r2,-4(fp)
 400e23c:	1000021e 	bne	r2,zero,400e248 <OSEventNameGet+0x30>
        return (0);
 400e240:	0005883a 	mov	r2,zero
 400e244:	00003706 	br	400e324 <OSEventNameGet+0x10c>
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 400e248:	e0bffd17 	ldw	r2,-12(fp)
 400e24c:	1000051e 	bne	r2,zero,400e264 <OSEventNameGet+0x4c>
        *perr = OS_ERR_PEVENT_NULL;
 400e250:	e0bfff17 	ldw	r2,-4(fp)
 400e254:	00c00104 	movi	r3,4
 400e258:	10c00005 	stb	r3,0(r2)
        return (0);
 400e25c:	0005883a 	mov	r2,zero
 400e260:	00003006 	br	400e324 <OSEventNameGet+0x10c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 400e264:	e0bffe17 	ldw	r2,-8(fp)
 400e268:	1000051e 	bne	r2,zero,400e280 <OSEventNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
 400e26c:	e0bfff17 	ldw	r2,-4(fp)
 400e270:	00c00304 	movi	r3,12
 400e274:	10c00005 	stb	r3,0(r2)
        return (0);
 400e278:	0005883a 	mov	r2,zero
 400e27c:	00002906 	br	400e324 <OSEventNameGet+0x10c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 400e280:	d0a73103 	ldbu	r2,-25404(gp)
 400e284:	10803fcc 	andi	r2,r2,255
 400e288:	10000526 	beq	r2,zero,400e2a0 <OSEventNameGet+0x88>
        *perr  = OS_ERR_NAME_GET_ISR;
 400e28c:	e0bfff17 	ldw	r2,-4(fp)
 400e290:	00c00444 	movi	r3,17
 400e294:	10c00005 	stb	r3,0(r2)
        return (0);
 400e298:	0005883a 	mov	r2,zero
 400e29c:	00002106 	br	400e324 <OSEventNameGet+0x10c>
    }
    switch (pevent->OSEventType) {
 400e2a0:	e0bffd17 	ldw	r2,-12(fp)
 400e2a4:	10800003 	ldbu	r2,0(r2)
 400e2a8:	10803fcc 	andi	r2,r2,255
 400e2ac:	10bfffc4 	addi	r2,r2,-1
 400e2b0:	10800128 	cmpgeui	r2,r2,4
 400e2b4:	10000526 	beq	r2,zero,400e2cc <OSEventNameGet+0xb4>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 400e2b8:	e0bfff17 	ldw	r2,-4(fp)
 400e2bc:	00c00044 	movi	r3,1
 400e2c0:	10c00005 	stb	r3,0(r2)
             return (0);
 400e2c4:	0005883a 	mov	r2,zero
 400e2c8:	00001606 	br	400e324 <OSEventNameGet+0x10c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
 400e2cc:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400e2d0:	0005303a 	rdctl	r2,status
 400e2d4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400e2d8:	e0fffb17 	ldw	r3,-20(fp)
 400e2dc:	00bfff84 	movi	r2,-2
 400e2e0:	1884703a 	and	r2,r3,r2
 400e2e4:	1001703a 	wrctl	status,r2
  
  return context;
 400e2e8:	e0bffb17 	ldw	r2,-20(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return (0);
    }
    OS_ENTER_CRITICAL();
 400e2ec:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pevent->OSEventName);   /* Copy name from OS_EVENT                       */
 400e2f0:	e0bffd17 	ldw	r2,-12(fp)
 400e2f4:	10800384 	addi	r2,r2,14
 400e2f8:	100b883a 	mov	r5,r2
 400e2fc:	e13ffe17 	ldw	r4,-8(fp)
 400e300:	400fc9c0 	call	400fc9c <OS_StrCopy>
 400e304:	e0bffa05 	stb	r2,-24(fp)
 400e308:	e0bff917 	ldw	r2,-28(fp)
 400e30c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400e310:	e0bffc17 	ldw	r2,-16(fp)
 400e314:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 400e318:	e0bfff17 	ldw	r2,-4(fp)
 400e31c:	10000005 	stb	zero,0(r2)
    return (len);
 400e320:	e0bffa03 	ldbu	r2,-24(fp)
}
 400e324:	e037883a 	mov	sp,fp
 400e328:	dfc00117 	ldw	ra,4(sp)
 400e32c:	df000017 	ldw	fp,0(sp)
 400e330:	dec00204 	addi	sp,sp,8
 400e334:	f800283a 	ret

0400e338 <OSEventNameSet>:
*********************************************************************************************************
*/

#if (OS_EVENT_EN) && (OS_EVENT_NAME_SIZE > 1)
void  OSEventNameSet (OS_EVENT *pevent, INT8U *pname, INT8U *perr)
{
 400e338:	defff604 	addi	sp,sp,-40
 400e33c:	dfc00915 	stw	ra,36(sp)
 400e340:	df000815 	stw	fp,32(sp)
 400e344:	df000804 	addi	fp,sp,32
 400e348:	e13ffd15 	stw	r4,-12(fp)
 400e34c:	e17ffe15 	stw	r5,-8(fp)
 400e350:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 400e354:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 400e358:	e0bfff17 	ldw	r2,-4(fp)
 400e35c:	10004026 	beq	r2,zero,400e460 <OSEventNameSet+0x128>
        return;
    }
    if (pevent == (OS_EVENT *)0) {               /* Is 'pevent' a NULL pointer?                        */
 400e360:	e0bffd17 	ldw	r2,-12(fp)
 400e364:	1000041e 	bne	r2,zero,400e378 <OSEventNameSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
 400e368:	e0bfff17 	ldw	r2,-4(fp)
 400e36c:	00c00104 	movi	r3,4
 400e370:	10c00005 	stb	r3,0(r2)
        return;
 400e374:	00003b06 	br	400e464 <OSEventNameSet+0x12c>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 400e378:	e0bffe17 	ldw	r2,-8(fp)
 400e37c:	1000041e 	bne	r2,zero,400e390 <OSEventNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
 400e380:	e0bfff17 	ldw	r2,-4(fp)
 400e384:	00c00304 	movi	r3,12
 400e388:	10c00005 	stb	r3,0(r2)
        return;
 400e38c:	00003506 	br	400e464 <OSEventNameSet+0x12c>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 400e390:	d0a73103 	ldbu	r2,-25404(gp)
 400e394:	10803fcc 	andi	r2,r2,255
 400e398:	10000426 	beq	r2,zero,400e3ac <OSEventNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
 400e39c:	e0bfff17 	ldw	r2,-4(fp)
 400e3a0:	00c00484 	movi	r3,18
 400e3a4:	10c00005 	stb	r3,0(r2)
        return;
 400e3a8:	00002e06 	br	400e464 <OSEventNameSet+0x12c>
    }
    switch (pevent->OSEventType) {
 400e3ac:	e0bffd17 	ldw	r2,-12(fp)
 400e3b0:	10800003 	ldbu	r2,0(r2)
 400e3b4:	10803fcc 	andi	r2,r2,255
 400e3b8:	10bfffc4 	addi	r2,r2,-1
 400e3bc:	10800128 	cmpgeui	r2,r2,4
 400e3c0:	10000426 	beq	r2,zero,400e3d4 <OSEventNameSet+0x9c>
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;

        default:
             *perr = OS_ERR_EVENT_TYPE;
 400e3c4:	e0bfff17 	ldw	r2,-4(fp)
 400e3c8:	00c00044 	movi	r3,1
 400e3cc:	10c00005 	stb	r3,0(r2)
             return;
 400e3d0:	00002406 	br	400e464 <OSEventNameSet+0x12c>
    switch (pevent->OSEventType) {
        case OS_EVENT_TYPE_SEM:
        case OS_EVENT_TYPE_MUTEX:
        case OS_EVENT_TYPE_MBOX:
        case OS_EVENT_TYPE_Q:
             break;
 400e3d4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400e3d8:	0005303a 	rdctl	r2,status
 400e3dc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400e3e0:	e0fffc17 	ldw	r3,-16(fp)
 400e3e4:	00bfff84 	movi	r2,-2
 400e3e8:	1884703a 	and	r2,r3,r2
 400e3ec:	1001703a 	wrctl	status,r2
  
  return context;
 400e3f0:	e0bffc17 	ldw	r2,-16(fp)

        default:
             *perr = OS_ERR_EVENT_TYPE;
             return;
    }
    OS_ENTER_CRITICAL();
 400e3f4:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                           /* Can we fit the string in the storage area?    */
 400e3f8:	e13ffe17 	ldw	r4,-8(fp)
 400e3fc:	400fd100 	call	400fd10 <OS_StrLen>
 400e400:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_EVENT_NAME_SIZE - 1)) {             /* No                                            */
 400e404:	e0bffa03 	ldbu	r2,-24(fp)
 400e408:	10800830 	cmpltui	r2,r2,32
 400e40c:	1000081e 	bne	r2,zero,400e430 <OSEventNameSet+0xf8>
 400e410:	e0bff817 	ldw	r2,-32(fp)
 400e414:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400e418:	e0bff917 	ldw	r2,-28(fp)
 400e41c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_NAME_TOO_LONG;
 400e420:	e0bfff17 	ldw	r2,-4(fp)
 400e424:	00c002c4 	movi	r3,11
 400e428:	10c00005 	stb	r3,0(r2)
        return;
 400e42c:	00000d06 	br	400e464 <OSEventNameSet+0x12c>
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
 400e430:	e0bffd17 	ldw	r2,-12(fp)
 400e434:	10800384 	addi	r2,r2,14
 400e438:	e17ffe17 	ldw	r5,-8(fp)
 400e43c:	1009883a 	mov	r4,r2
 400e440:	400fc9c0 	call	400fc9c <OS_StrCopy>
 400e444:	e0bff817 	ldw	r2,-32(fp)
 400e448:	e0bffb15 	stw	r2,-20(fp)
 400e44c:	e0bffb17 	ldw	r2,-20(fp)
 400e450:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 400e454:	e0bfff17 	ldw	r2,-4(fp)
 400e458:	10000005 	stb	zero,0(r2)
 400e45c:	00000106 	br	400e464 <OSEventNameSet+0x12c>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
 400e460:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pevent->OSEventName, pname);     /* Yes, copy name to the event control block     */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
 400e464:	e037883a 	mov	sp,fp
 400e468:	dfc00117 	ldw	ra,4(sp)
 400e46c:	df000017 	ldw	fp,0(sp)
 400e470:	dec00204 	addi	sp,sp,8
 400e474:	f800283a 	ret

0400e478 <OSEventPendMulti>:
*********************************************************************************************************
*/
/*$PAGE*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
INT16U  OSEventPendMulti (OS_EVENT **pevents_pend, OS_EVENT **pevents_rdy, void **pmsgs_rdy, INT16U timeout, INT8U *perr)
{
 400e478:	deffed04 	addi	sp,sp,-76
 400e47c:	dfc01215 	stw	ra,72(sp)
 400e480:	df001115 	stw	fp,68(sp)
 400e484:	df001104 	addi	fp,sp,68
 400e488:	e13ffc15 	stw	r4,-16(fp)
 400e48c:	e17ffd15 	stw	r5,-12(fp)
 400e490:	e1bffe15 	stw	r6,-8(fp)
 400e494:	3805883a 	mov	r2,r7
 400e498:	e0bfff0d 	sth	r2,-4(fp)
#endif
    BOOLEAN     events_rdy;
    INT16U      events_rdy_nbr;
    INT8U       events_stat;
#if (OS_CRITICAL_METHOD == 3)                           /* Allocate storage for CPU status register    */
    OS_CPU_SR   cpu_sr = 0;
 400e49c:	e03ff315 	stw	zero,-52(fp)
#endif



#if (OS_ARG_CHK_EN > 0)
    if (perr == (INT8U *)0) {                           /* Validate 'perr'                             */
 400e4a0:	e0800217 	ldw	r2,8(fp)
 400e4a4:	1000021e 	bne	r2,zero,400e4b0 <OSEventPendMulti+0x38>
        return (0);
 400e4a8:	0005883a 	mov	r2,zero
 400e4ac:	00017106 	br	400ea74 <OSEventPendMulti+0x5fc>
    }
    if (pevents_pend == (OS_EVENT **)0) {               /* Validate 'pevents_pend'                     */
 400e4b0:	e0bffc17 	ldw	r2,-16(fp)
 400e4b4:	1000051e 	bne	r2,zero,400e4cc <OSEventPendMulti+0x54>
       *perr =  OS_ERR_PEVENT_NULL;
 400e4b8:	e0800217 	ldw	r2,8(fp)
 400e4bc:	00c00104 	movi	r3,4
 400e4c0:	10c00005 	stb	r3,0(r2)
        return (0);
 400e4c4:	0005883a 	mov	r2,zero
 400e4c8:	00016a06 	br	400ea74 <OSEventPendMulti+0x5fc>
    }
    if (pevents_rdy  == (OS_EVENT **)0) {               /* Validate 'pevents_rdy'                      */
 400e4cc:	e0bffd17 	ldw	r2,-12(fp)
 400e4d0:	1000051e 	bne	r2,zero,400e4e8 <OSEventPendMulti+0x70>
       *perr =  OS_ERR_PEVENT_NULL;
 400e4d4:	e0800217 	ldw	r2,8(fp)
 400e4d8:	00c00104 	movi	r3,4
 400e4dc:	10c00005 	stb	r3,0(r2)
        return (0);
 400e4e0:	0005883a 	mov	r2,zero
 400e4e4:	00016306 	br	400ea74 <OSEventPendMulti+0x5fc>
    }
    if (pmsgs_rdy == (void **)0) {                      /* Validate 'pmsgs_rdy'                        */
 400e4e8:	e0bffe17 	ldw	r2,-8(fp)
 400e4ec:	1000051e 	bne	r2,zero,400e504 <OSEventPendMulti+0x8c>
       *perr =  OS_ERR_PEVENT_NULL;
 400e4f0:	e0800217 	ldw	r2,8(fp)
 400e4f4:	00c00104 	movi	r3,4
 400e4f8:	10c00005 	stb	r3,0(r2)
        return (0);
 400e4fc:	0005883a 	mov	r2,zero
 400e500:	00015c06 	br	400ea74 <OSEventPendMulti+0x5fc>
    }
#endif

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */
 400e504:	e0bffd17 	ldw	r2,-12(fp)
 400e508:	10000015 	stw	zero,0(r2)

    pevents     =  pevents_pend;
 400e50c:	e0bffc17 	ldw	r2,-16(fp)
 400e510:	e0bfef15 	stw	r2,-68(fp)
    pevent      = *pevents;
 400e514:	e0bfef17 	ldw	r2,-68(fp)
 400e518:	10800017 	ldw	r2,0(r2)
 400e51c:	e0bff015 	stw	r2,-64(fp)
    while  (pevent != (OS_EVENT *)0) {
 400e520:	00001906 	br	400e588 <OSEventPendMulti+0x110>
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
 400e524:	e0bff017 	ldw	r2,-64(fp)
 400e528:	10800003 	ldbu	r2,0(r2)
 400e52c:	10803fcc 	andi	r2,r2,255
 400e530:	10c000a0 	cmpeqi	r3,r2,2
 400e534:	1800091e 	bne	r3,zero,400e55c <OSEventPendMulti+0xe4>
 400e538:	10c000e0 	cmpeqi	r3,r2,3
 400e53c:	1800091e 	bne	r3,zero,400e564 <OSEventPendMulti+0xec>
 400e540:	10800060 	cmpeqi	r2,r2,1
 400e544:	1000091e 	bne	r2,zero,400e56c <OSEventPendMulti+0xf4>
#endif

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
 400e548:	e0800217 	ldw	r2,8(fp)
 400e54c:	00c00044 	movi	r3,1
 400e550:	10c00005 	stb	r3,0(r2)
                 return (0);
 400e554:	0005883a 	mov	r2,zero
 400e558:	00014606 	br	400ea74 <OSEventPendMulti+0x5fc>
            case OS_EVENT_TYPE_MBOX:
                 break;
#endif
#if ((OS_Q_EN   > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 break;
 400e55c:	0001883a 	nop
 400e560:	00000306 	br	400e570 <OSEventPendMulti+0xf8>
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
        switch (pevent->OSEventType) {                  /* Validate event block types                  */
#if (OS_SEM_EN  > 0)
            case OS_EVENT_TYPE_SEM:
                 break;
 400e564:	0001883a 	nop
 400e568:	00000106 	br	400e570 <OSEventPendMulti+0xf8>
#endif
#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 break;
 400e56c:	0001883a 	nop
            case OS_EVENT_TYPE_FLAG:
            default:           
                *perr = OS_ERR_EVENT_TYPE;
                 return (0);
        }
        pevents++;
 400e570:	e0bfef17 	ldw	r2,-68(fp)
 400e574:	10800104 	addi	r2,r2,4
 400e578:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
 400e57c:	e0bfef17 	ldw	r2,-68(fp)
 400e580:	10800017 	ldw	r2,0(r2)
 400e584:	e0bff015 	stw	r2,-64(fp)

   *pevents_rdy = (OS_EVENT *)0;                        /* Init array to NULL in case of errors        */

    pevents     =  pevents_pend;
    pevent      = *pevents;
    while  (pevent != (OS_EVENT *)0) {
 400e588:	e0bff017 	ldw	r2,-64(fp)
 400e58c:	103fe51e 	bne	r2,zero,400e524 <__alt_mem_onchip_memory2_0+0xfbfee524>
        }
        pevents++;
        pevent = *pevents;
    }

    if (OSIntNesting  > 0) {                            /* See if called from ISR ...                  */
 400e590:	d0a73103 	ldbu	r2,-25404(gp)
 400e594:	10803fcc 	andi	r2,r2,255
 400e598:	10000526 	beq	r2,zero,400e5b0 <OSEventPendMulti+0x138>
       *perr =  OS_ERR_PEND_ISR;                        /* ... can't PEND from an ISR                  */
 400e59c:	e0800217 	ldw	r2,8(fp)
 400e5a0:	00c00084 	movi	r3,2
 400e5a4:	10c00005 	stb	r3,0(r2)
        return (0);
 400e5a8:	0005883a 	mov	r2,zero
 400e5ac:	00013106 	br	400ea74 <OSEventPendMulti+0x5fc>
    }
    if (OSLockNesting > 0) {                            /* See if called with scheduler locked ...     */
 400e5b0:	d0a72303 	ldbu	r2,-25460(gp)
 400e5b4:	10803fcc 	andi	r2,r2,255
 400e5b8:	10000526 	beq	r2,zero,400e5d0 <OSEventPendMulti+0x158>
       *perr =  OS_ERR_PEND_LOCKED;                     /* ... can't PEND when locked                  */
 400e5bc:	e0800217 	ldw	r2,8(fp)
 400e5c0:	00c00344 	movi	r3,13
 400e5c4:	10c00005 	stb	r3,0(r2)
        return (0);
 400e5c8:	0005883a 	mov	r2,zero
 400e5cc:	00012906 	br	400ea74 <OSEventPendMulti+0x5fc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400e5d0:	0005303a 	rdctl	r2,status
 400e5d4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400e5d8:	e0fffb17 	ldw	r3,-20(fp)
 400e5dc:	00bfff84 	movi	r2,-2
 400e5e0:	1884703a 	and	r2,r3,r2
 400e5e4:	1001703a 	wrctl	status,r2
  
  return context;
 400e5e8:	e0bffb17 	ldw	r2,-20(fp)
    }

/*$PAGE*/
    OS_ENTER_CRITICAL();
 400e5ec:	e0bff315 	stw	r2,-52(fp)
    events_rdy     =  OS_FALSE;
 400e5f0:	e03ff105 	stb	zero,-60(fp)
    events_rdy_nbr =  0;
 400e5f4:	e03ff18d 	sth	zero,-58(fp)
    events_stat    =  OS_STAT_RDY;
 400e5f8:	e03ff205 	stb	zero,-56(fp)
    pevents        =  pevents_pend;
 400e5fc:	e0bffc17 	ldw	r2,-16(fp)
 400e600:	e0bfef15 	stw	r2,-68(fp)
    pevent         = *pevents;
 400e604:	e0bfef17 	ldw	r2,-68(fp)
 400e608:	10800017 	ldw	r2,0(r2)
 400e60c:	e0bff015 	stw	r2,-64(fp)
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 400e610:	00008106 	br	400e818 <OSEventPendMulti+0x3a0>
        switch (pevent->OSEventType) {
 400e614:	e0bff017 	ldw	r2,-64(fp)
 400e618:	10800003 	ldbu	r2,0(r2)
 400e61c:	10803fcc 	andi	r2,r2,255
 400e620:	10c000a0 	cmpeqi	r3,r2,2
 400e624:	18003c1e 	bne	r3,zero,400e718 <OSEventPendMulti+0x2a0>
 400e628:	10c000e0 	cmpeqi	r3,r2,3
 400e62c:	1800031e 	bne	r3,zero,400e63c <OSEventPendMulti+0x1c4>
 400e630:	10800060 	cmpeqi	r2,r2,1
 400e634:	10001e1e 	bne	r2,zero,400e6b0 <OSEventPendMulti+0x238>
 400e638:	00006606 	br	400e7d4 <OSEventPendMulti+0x35c>
#if (OS_SEM_EN > 0)
            case OS_EVENT_TYPE_SEM:
                 if (pevent->OSEventCnt > 0) {          /* If semaphore count > 0, resource available; */
 400e63c:	e0bff017 	ldw	r2,-64(fp)
 400e640:	1080020b 	ldhu	r2,8(r2)
 400e644:	10bfffcc 	andi	r2,r2,65535
 400e648:	10001526 	beq	r2,zero,400e6a0 <OSEventPendMulti+0x228>
                     pevent->OSEventCnt--;              /* ... decrement semaphore,                ... */
 400e64c:	e0bff017 	ldw	r2,-64(fp)
 400e650:	1080020b 	ldhu	r2,8(r2)
 400e654:	10bfffc4 	addi	r2,r2,-1
 400e658:	1007883a 	mov	r3,r2
 400e65c:	e0bff017 	ldw	r2,-64(fp)
 400e660:	10c0020d 	sth	r3,8(r2)
                    *pevents_rdy++ =  pevent;           /* ... and return available semaphore event    */
 400e664:	e0bffd17 	ldw	r2,-12(fp)
 400e668:	10c00104 	addi	r3,r2,4
 400e66c:	e0fffd15 	stw	r3,-12(fp)
 400e670:	e0fff017 	ldw	r3,-64(fp)
 400e674:	10c00015 	stw	r3,0(r2)
                      events_rdy   =  OS_TRUE;
 400e678:	00800044 	movi	r2,1
 400e67c:	e0bff105 	stb	r2,-60(fp)
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
 400e680:	e0bffe17 	ldw	r2,-8(fp)
 400e684:	10c00104 	addi	r3,r2,4
 400e688:	e0fffe15 	stw	r3,-8(fp)
 400e68c:	10000015 	stw	zero,0(r2)
                      events_rdy_nbr++;
 400e690:	e0bff18b 	ldhu	r2,-58(fp)
 400e694:	10800044 	addi	r2,r2,1
 400e698:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
                 }
                 break;
 400e69c:	00005806 	br	400e800 <OSEventPendMulti+0x388>
                      events_rdy   =  OS_TRUE;
                    *pmsgs_rdy++   = (void *)0;         /* NO message returned  for semaphores         */
                      events_rdy_nbr++;

                 } else {
                      events_stat |=  OS_STAT_SEM;      /* Configure multi-pend for semaphore events   */
 400e6a0:	e0bff203 	ldbu	r2,-56(fp)
 400e6a4:	10800054 	ori	r2,r2,1
 400e6a8:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
 400e6ac:	00005406 	br	400e800 <OSEventPendMulti+0x388>
#endif

#if (OS_MBOX_EN > 0)
            case OS_EVENT_TYPE_MBOX:
                 if (pevent->OSEventPtr != (void *)0) { /* If mailbox NOT empty;                   ... */
 400e6b0:	e0bff017 	ldw	r2,-64(fp)
 400e6b4:	10800117 	ldw	r2,4(r2)
 400e6b8:	10001326 	beq	r2,zero,400e708 <OSEventPendMulti+0x290>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++         = (void *)pevent->OSEventPtr;
 400e6bc:	e0bffe17 	ldw	r2,-8(fp)
 400e6c0:	10c00104 	addi	r3,r2,4
 400e6c4:	e0fffe15 	stw	r3,-8(fp)
 400e6c8:	e0fff017 	ldw	r3,-64(fp)
 400e6cc:	18c00117 	ldw	r3,4(r3)
 400e6d0:	10c00015 	stw	r3,0(r2)
                     pevent->OSEventPtr  = (void *)0;
 400e6d4:	e0bff017 	ldw	r2,-64(fp)
 400e6d8:	10000115 	stw	zero,4(r2)
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
 400e6dc:	e0bffd17 	ldw	r2,-12(fp)
 400e6e0:	10c00104 	addi	r3,r2,4
 400e6e4:	e0fffd15 	stw	r3,-12(fp)
 400e6e8:	e0fff017 	ldw	r3,-64(fp)
 400e6ec:	10c00015 	stw	r3,0(r2)
                      events_rdy         =  OS_TRUE;
 400e6f0:	00800044 	movi	r2,1
 400e6f4:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
 400e6f8:	e0bff18b 	ldhu	r2,-58(fp)
 400e6fc:	10800044 	addi	r2,r2,1
 400e700:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
                 }
                 break;
 400e704:	00003e06 	br	400e800 <OSEventPendMulti+0x388>
                    *pevents_rdy++       =  pevent;     /* ... and return available mailbox event      */
                      events_rdy         =  OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_MBOX;      /* Configure multi-pend for mailbox events     */
 400e708:	e0bff203 	ldbu	r2,-56(fp)
 400e70c:	10800094 	ori	r2,r2,2
 400e710:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
 400e714:	00003a06 	br	400e800 <OSEventPendMulti+0x388>
#endif

#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
            case OS_EVENT_TYPE_Q:
                 pq = (OS_Q *)pevent->OSEventPtr;
 400e718:	e0bff017 	ldw	r2,-64(fp)
 400e71c:	10800117 	ldw	r2,4(r2)
 400e720:	e0bff515 	stw	r2,-44(fp)
                 if (pq->OSQEntries > 0) {              /* If queue NOT empty;                     ... */
 400e724:	e0bff517 	ldw	r2,-44(fp)
 400e728:	1080058b 	ldhu	r2,22(r2)
 400e72c:	10bfffcc 	andi	r2,r2,65535
 400e730:	10002426 	beq	r2,zero,400e7c4 <OSEventPendMulti+0x34c>
                                                        /* ... return available message,           ... */
                    *pmsgs_rdy++ = (void *)*pq->OSQOut++;
 400e734:	e0bffe17 	ldw	r2,-8(fp)
 400e738:	10c00104 	addi	r3,r2,4
 400e73c:	e0fffe15 	stw	r3,-8(fp)
 400e740:	e0fff517 	ldw	r3,-44(fp)
 400e744:	18c00417 	ldw	r3,16(r3)
 400e748:	19400104 	addi	r5,r3,4
 400e74c:	e13ff517 	ldw	r4,-44(fp)
 400e750:	21400415 	stw	r5,16(r4)
 400e754:	18c00017 	ldw	r3,0(r3)
 400e758:	10c00015 	stw	r3,0(r2)
                     if (pq->OSQOut == pq->OSQEnd) {    /* If OUT ptr at queue end, ...                */
 400e75c:	e0bff517 	ldw	r2,-44(fp)
 400e760:	10c00417 	ldw	r3,16(r2)
 400e764:	e0bff517 	ldw	r2,-44(fp)
 400e768:	10800217 	ldw	r2,8(r2)
 400e76c:	1880041e 	bne	r3,r2,400e780 <OSEventPendMulti+0x308>
                         pq->OSQOut  = pq->OSQStart;    /* ... wrap   to queue start                   */
 400e770:	e0bff517 	ldw	r2,-44(fp)
 400e774:	10c00117 	ldw	r3,4(r2)
 400e778:	e0bff517 	ldw	r2,-44(fp)
 400e77c:	10c00415 	stw	r3,16(r2)
                     }
                     pq->OSQEntries--;                  /* Update number of queue entries              */
 400e780:	e0bff517 	ldw	r2,-44(fp)
 400e784:	1080058b 	ldhu	r2,22(r2)
 400e788:	10bfffc4 	addi	r2,r2,-1
 400e78c:	1007883a 	mov	r3,r2
 400e790:	e0bff517 	ldw	r2,-44(fp)
 400e794:	10c0058d 	sth	r3,22(r2)
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
 400e798:	e0bffd17 	ldw	r2,-12(fp)
 400e79c:	10c00104 	addi	r3,r2,4
 400e7a0:	e0fffd15 	stw	r3,-12(fp)
 400e7a4:	e0fff017 	ldw	r3,-64(fp)
 400e7a8:	10c00015 	stw	r3,0(r2)
                      events_rdy   = OS_TRUE;
 400e7ac:	00800044 	movi	r2,1
 400e7b0:	e0bff105 	stb	r2,-60(fp)
                      events_rdy_nbr++;
 400e7b4:	e0bff18b 	ldhu	r2,-58(fp)
 400e7b8:	10800044 	addi	r2,r2,1
 400e7bc:	e0bff18d 	sth	r2,-58(fp)

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
                 }
                 break;
 400e7c0:	00000f06 	br	400e800 <OSEventPendMulti+0x388>
                    *pevents_rdy++ = pevent;            /* ... and return available queue event        */
                      events_rdy   = OS_TRUE;
                      events_rdy_nbr++;

                 } else {
                      events_stat |= OS_STAT_Q;         /* Configure multi-pend for queue events       */
 400e7c4:	e0bff203 	ldbu	r2,-56(fp)
 400e7c8:	10800114 	ori	r2,r2,4
 400e7cc:	e0bff205 	stb	r2,-56(fp)
                 }
                 break;
 400e7d0:	00000b06 	br	400e800 <OSEventPendMulti+0x388>
 400e7d4:	e0bff317 	ldw	r2,-52(fp)
 400e7d8:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400e7dc:	e0bff417 	ldw	r2,-48(fp)
 400e7e0:	1001703a 	wrctl	status,r2

            case OS_EVENT_TYPE_MUTEX:                                            
            case OS_EVENT_TYPE_FLAG:
            default:           
                 OS_EXIT_CRITICAL();
                *pevents_rdy = (OS_EVENT *)0;           /* NULL terminate return event array           */
 400e7e4:	e0bffd17 	ldw	r2,-12(fp)
 400e7e8:	10000015 	stw	zero,0(r2)
                *perr        =  OS_ERR_EVENT_TYPE;
 400e7ec:	e0800217 	ldw	r2,8(fp)
 400e7f0:	00c00044 	movi	r3,1
 400e7f4:	10c00005 	stb	r3,0(r2)
                 return (events_rdy_nbr);
 400e7f8:	e0bff18b 	ldhu	r2,-58(fp)
 400e7fc:	00009d06 	br	400ea74 <OSEventPendMulti+0x5fc>
        }
        pevents++;
 400e800:	e0bfef17 	ldw	r2,-68(fp)
 400e804:	10800104 	addi	r2,r2,4
 400e808:	e0bfef15 	stw	r2,-68(fp)
        pevent = *pevents;
 400e80c:	e0bfef17 	ldw	r2,-68(fp)
 400e810:	10800017 	ldw	r2,0(r2)
 400e814:	e0bff015 	stw	r2,-64(fp)
    events_rdy     =  OS_FALSE;
    events_rdy_nbr =  0;
    events_stat    =  OS_STAT_RDY;
    pevents        =  pevents_pend;
    pevent         = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* See if any events already available         */
 400e818:	e0bff017 	ldw	r2,-64(fp)
 400e81c:	103f7d1e 	bne	r2,zero,400e614 <__alt_mem_onchip_memory2_0+0xfbfee614>
        }
        pevents++;
        pevent = *pevents;
    }

    if ( events_rdy == OS_TRUE) {                       /* Return any events already available         */
 400e820:	e0bff103 	ldbu	r2,-60(fp)
 400e824:	10800058 	cmpnei	r2,r2,1
 400e828:	10000a1e 	bne	r2,zero,400e854 <OSEventPendMulti+0x3dc>
       *pevents_rdy = (OS_EVENT *)0;                    /* NULL terminate return event array           */
 400e82c:	e0bffd17 	ldw	r2,-12(fp)
 400e830:	10000015 	stw	zero,0(r2)
 400e834:	e0bff317 	ldw	r2,-52(fp)
 400e838:	e0bff615 	stw	r2,-40(fp)
 400e83c:	e0bff617 	ldw	r2,-40(fp)
 400e840:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
       *perr        =  OS_ERR_NONE;
 400e844:	e0800217 	ldw	r2,8(fp)
 400e848:	10000005 	stb	zero,0(r2)
        return (events_rdy_nbr);
 400e84c:	e0bff18b 	ldhu	r2,-58(fp)
 400e850:	00008806 	br	400ea74 <OSEventPendMulti+0x5fc>
    }
/*$PAGE*/
                                                        /* Otherwise, must wait until any event occurs */
    OSTCBCur->OSTCBStat     |= events_stat  |           /* Resource not available, ...                 */
 400e854:	d0a73217 	ldw	r2,-25400(gp)
 400e858:	d0e73217 	ldw	r3,-25400(gp)
 400e85c:	19000c03 	ldbu	r4,48(r3)
 400e860:	e0fff203 	ldbu	r3,-56(fp)
 400e864:	20c6b03a 	or	r3,r4,r3
 400e868:	1809883a 	mov	r4,r3
 400e86c:	00ffe004 	movi	r3,-128
 400e870:	20c6b03a 	or	r3,r4,r3
 400e874:	10c00c05 	stb	r3,48(r2)
                               OS_STAT_MULTI;           /* ... pend on multiple events                 */
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 400e878:	d0a73217 	ldw	r2,-25400(gp)
 400e87c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;                 /* Store pend timeout in TCB                   */
 400e880:	d0a73217 	ldw	r2,-25400(gp)
 400e884:	e0ffff0b 	ldhu	r3,-4(fp)
 400e888:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWaitMulti(pevents_pend);                /* Suspend task until events or timeout occurs */
 400e88c:	e13ffc17 	ldw	r4,-16(fp)
 400e890:	400f3b40 	call	400f3b4 <OS_EventTaskWaitMulti>
 400e894:	e0bff317 	ldw	r2,-52(fp)
 400e898:	e0bff915 	stw	r2,-28(fp)
 400e89c:	e0bff917 	ldw	r2,-28(fp)
 400e8a0:	1001703a 	wrctl	status,r2

    OS_EXIT_CRITICAL();
    OS_Sched();                                         /* Find next highest priority task ready       */
 400e8a4:	400fb580 	call	400fb58 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400e8a8:	0005303a 	rdctl	r2,status
 400e8ac:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400e8b0:	e0fff717 	ldw	r3,-36(fp)
 400e8b4:	00bfff84 	movi	r2,-2
 400e8b8:	1884703a 	and	r2,r3,r2
 400e8bc:	1001703a 	wrctl	status,r2
  
  return context;
 400e8c0:	e0bff717 	ldw	r2,-36(fp)
    OS_ENTER_CRITICAL();
 400e8c4:	e0bff315 	stw	r2,-52(fp)

    switch (OSTCBCur->OSTCBStatPend) {                  /* Handle event posted, aborted, or timed-out  */
 400e8c8:	d0a73217 	ldw	r2,-25400(gp)
 400e8cc:	10800c43 	ldbu	r2,49(r2)
 400e8d0:	10803fcc 	andi	r2,r2,255
 400e8d4:	10000226 	beq	r2,zero,400e8e0 <OSEventPendMulti+0x468>
 400e8d8:	108000a0 	cmpeqi	r2,r2,2
 400e8dc:	10001826 	beq	r2,zero,400e940 <OSEventPendMulti+0x4c8>
        case OS_STAT_PEND_OK:
        case OS_STAT_PEND_ABORT:
             pevent = OSTCBCur->OSTCBEventPtr;
 400e8e0:	d0a73217 	ldw	r2,-25400(gp)
 400e8e4:	10800717 	ldw	r2,28(r2)
 400e8e8:	e0bff015 	stw	r2,-64(fp)
             if (pevent != (OS_EVENT *)0) {             /* If task event ptr != NULL, ...              */
 400e8ec:	e0bff017 	ldw	r2,-64(fp)
 400e8f0:	10000b26 	beq	r2,zero,400e920 <OSEventPendMulti+0x4a8>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
 400e8f4:	e0bffd17 	ldw	r2,-12(fp)
 400e8f8:	10c00104 	addi	r3,r2,4
 400e8fc:	e0fffd15 	stw	r3,-12(fp)
 400e900:	e0fff017 	ldw	r3,-64(fp)
 400e904:	10c00015 	stw	r3,0(r2)
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
 400e908:	e0bffd17 	ldw	r2,-12(fp)
 400e90c:	10000015 	stw	zero,0(r2)
                  events_rdy_nbr++;
 400e910:	e0bff18b 	ldhu	r2,-58(fp)
 400e914:	10800044 	addi	r2,r2,1
 400e918:	e0bff18d 	sth	r2,-58(fp)

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
             }
			 break;
 400e91c:	00000d06 	br	400e954 <OSEventPendMulti+0x4dc>
                *pevents_rdy++ =  pevent;               /* ... return available event ...              */
                *pevents_rdy   = (OS_EVENT *)0;         /* ... & NULL terminate return event array     */
                  events_rdy_nbr++;

             } else {                                   /* Else NO event available, handle as timeout  */
                 OSTCBCur->OSTCBStatPend = OS_STAT_PEND_TO;
 400e920:	d0a73217 	ldw	r2,-25400(gp)
 400e924:	00c00044 	movi	r3,1
 400e928:	10c00c45 	stb	r3,49(r2)
                 OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 400e92c:	d0a73217 	ldw	r2,-25400(gp)
 400e930:	e17ffc17 	ldw	r5,-16(fp)
 400e934:	1009883a 	mov	r4,r2
 400e938:	400f5bc0 	call	400f5bc <OS_EventTaskRemoveMulti>
             }
			 break;
 400e93c:	00000506 	br	400e954 <OSEventPendMulti+0x4dc>

        case OS_STAT_PEND_TO:
        default:                                        /* ... remove task from events' wait lists     */
             OS_EventTaskRemoveMulti(OSTCBCur, pevents_pend);
 400e940:	d0a73217 	ldw	r2,-25400(gp)
 400e944:	e17ffc17 	ldw	r5,-16(fp)
 400e948:	1009883a 	mov	r4,r2
 400e94c:	400f5bc0 	call	400f5bc <OS_EventTaskRemoveMulti>
             break;
 400e950:	0001883a 	nop
    }

    switch (OSTCBCur->OSTCBStatPend) {
 400e954:	d0a73217 	ldw	r2,-25400(gp)
 400e958:	10800c43 	ldbu	r2,49(r2)
 400e95c:	10803fcc 	andi	r2,r2,255
 400e960:	10000326 	beq	r2,zero,400e970 <OSEventPendMulti+0x4f8>
 400e964:	108000a0 	cmpeqi	r2,r2,2
 400e968:	1000231e 	bne	r2,zero,400e9f8 <OSEventPendMulti+0x580>
 400e96c:	00002a06 	br	400ea18 <OSEventPendMulti+0x5a0>
        case OS_STAT_PEND_OK:
             switch (pevent->OSEventType) {             /* Return event's message                      */
 400e970:	e0bff017 	ldw	r2,-64(fp)
 400e974:	10800003 	ldbu	r2,0(r2)
 400e978:	10803fcc 	andi	r2,r2,255
 400e97c:	0080100e 	bge	zero,r2,400e9c0 <OSEventPendMulti+0x548>
 400e980:	10c000d0 	cmplti	r3,r2,3
 400e984:	1800071e 	bne	r3,zero,400e9a4 <OSEventPendMulti+0x52c>
 400e988:	108000e0 	cmpeqi	r2,r2,3
 400e98c:	10000c26 	beq	r2,zero,400e9c0 <OSEventPendMulti+0x548>
#if (OS_SEM_EN > 0)
                 case OS_EVENT_TYPE_SEM:
                     *pmsgs_rdy++ = (void *)0;          /* NO message returned for semaphores          */
 400e990:	e0bffe17 	ldw	r2,-8(fp)
 400e994:	10c00104 	addi	r3,r2,4
 400e998:	e0fffe15 	stw	r3,-8(fp)
 400e99c:	10000015 	stw	zero,0(r2)
                      break;
 400e9a0:	00001206 	br	400e9ec <OSEventPendMulti+0x574>

#if ((OS_MBOX_EN > 0) ||                 \
    ((OS_Q_EN    > 0) && (OS_MAX_QS > 0)))
                 case OS_EVENT_TYPE_MBOX:
                 case OS_EVENT_TYPE_Q:
                     *pmsgs_rdy++ = (void *)OSTCBCur->OSTCBMsg;     /* Return received message         */
 400e9a4:	e0bffe17 	ldw	r2,-8(fp)
 400e9a8:	10c00104 	addi	r3,r2,4
 400e9ac:	e0fffe15 	stw	r3,-8(fp)
 400e9b0:	d0e73217 	ldw	r3,-25400(gp)
 400e9b4:	18c00917 	ldw	r3,36(r3)
 400e9b8:	10c00015 	stw	r3,0(r2)
                      break;
 400e9bc:	00000b06 	br	400e9ec <OSEventPendMulti+0x574>
 400e9c0:	e0bff317 	ldw	r2,-52(fp)
 400e9c4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400e9c8:	e0bff817 	ldw	r2,-32(fp)
 400e9cc:	1001703a 	wrctl	status,r2

                 case OS_EVENT_TYPE_MUTEX:                                       
                 case OS_EVENT_TYPE_FLAG:
                 default:           
                      OS_EXIT_CRITICAL();
                     *pevents_rdy = (OS_EVENT *)0;      /* NULL terminate return event array           */
 400e9d0:	e0bffd17 	ldw	r2,-12(fp)
 400e9d4:	10000015 	stw	zero,0(r2)
                     *perr        =  OS_ERR_EVENT_TYPE;
 400e9d8:	e0800217 	ldw	r2,8(fp)
 400e9dc:	00c00044 	movi	r3,1
 400e9e0:	10c00005 	stb	r3,0(r2)
                      return (events_rdy_nbr);
 400e9e4:	e0bff18b 	ldhu	r2,-58(fp)
 400e9e8:	00002206 	br	400ea74 <OSEventPendMulti+0x5fc>
             }
            *perr = OS_ERR_NONE;
 400e9ec:	e0800217 	ldw	r2,8(fp)
 400e9f0:	10000005 	stb	zero,0(r2)
             break;
 400e9f4:	00001006 	br	400ea38 <OSEventPendMulti+0x5c0>

        case OS_STAT_PEND_ABORT:
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for abort               */
 400e9f8:	e0bffe17 	ldw	r2,-8(fp)
 400e9fc:	10c00104 	addi	r3,r2,4
 400ea00:	e0fffe15 	stw	r3,-8(fp)
 400ea04:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_PEND_ABORT;          /* Indicate that event  aborted                */
 400ea08:	e0800217 	ldw	r2,8(fp)
 400ea0c:	00c00384 	movi	r3,14
 400ea10:	10c00005 	stb	r3,0(r2)
             break;
 400ea14:	00000806 	br	400ea38 <OSEventPendMulti+0x5c0>
                                                        
        case OS_STAT_PEND_TO:                                                
        default:        
            *pmsgs_rdy++ = (void *)0;                   /* NO message returned for timeout             */
 400ea18:	e0bffe17 	ldw	r2,-8(fp)
 400ea1c:	10c00104 	addi	r3,r2,4
 400ea20:	e0fffe15 	stw	r3,-8(fp)
 400ea24:	10000015 	stw	zero,0(r2)
            *perr        =  OS_ERR_TIMEOUT;             /* Indicate that events timed out              */
 400ea28:	e0800217 	ldw	r2,8(fp)
 400ea2c:	00c00284 	movi	r3,10
 400ea30:	10c00005 	stb	r3,0(r2)
             break;
 400ea34:	0001883a 	nop
    }

    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;        /* Set   task  status to ready                 */
 400ea38:	d0a73217 	ldw	r2,-25400(gp)
 400ea3c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;    /* Clear pend  status                          */
 400ea40:	d0a73217 	ldw	r2,-25400(gp)
 400ea44:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;      /* Clear event pointers                        */
 400ea48:	d0a73217 	ldw	r2,-25400(gp)
 400ea4c:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 400ea50:	d0a73217 	ldw	r2,-25400(gp)
 400ea54:	10000815 	stw	zero,32(r2)
    OSTCBCur->OSTCBMsg           = (void      *)0;      /* Clear task  message                         */
 400ea58:	d0a73217 	ldw	r2,-25400(gp)
 400ea5c:	10000915 	stw	zero,36(r2)
 400ea60:	e0bff317 	ldw	r2,-52(fp)
 400ea64:	e0bffa15 	stw	r2,-24(fp)
 400ea68:	e0bffa17 	ldw	r2,-24(fp)
 400ea6c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();

    return (events_rdy_nbr);
 400ea70:	e0bff18b 	ldhu	r2,-58(fp)
}
 400ea74:	e037883a 	mov	sp,fp
 400ea78:	dfc00117 	ldw	ra,4(sp)
 400ea7c:	df000017 	ldw	fp,0(sp)
 400ea80:	dec00204 	addi	sp,sp,8
 400ea84:	f800283a 	ret

0400ea88 <OSInit>:
* Returns    : none
*********************************************************************************************************
*/

void  OSInit (void)
{
 400ea88:	defffe04 	addi	sp,sp,-8
 400ea8c:	dfc00115 	stw	ra,4(sp)
 400ea90:	df000015 	stw	fp,0(sp)
 400ea94:	d839883a 	mov	fp,sp
    OSInitHookBegin();                                           /* Call port specific initialization code   */
 400ea98:	4017fa80 	call	4017fa8 <OSInitHookBegin>

    OS_InitMisc();                                               /* Initialize miscellaneous variables       */
 400ea9c:	400f8040 	call	400f804 <OS_InitMisc>

    OS_InitRdyList();                                            /* Initialize the Ready List                */
 400eaa0:	400f84c0 	call	400f84c <OS_InitRdyList>

    OS_InitTCBList();                                            /* Initialize the free list of OS_TCBs      */
 400eaa4:	400f9b80 	call	400f9b8 <OS_InitTCBList>

    OS_InitEventList();                                          /* Initialize the free list of OS_EVENTs    */
 400eaa8:	400f7240 	call	400f724 <OS_InitEventList>

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FlagInit();                                               /* Initialize the event flag structures     */
 400eaac:	40118580 	call	4011858 <OS_FlagInit>
#endif

#if (OS_MEM_EN > 0) && (OS_MAX_MEM_PART > 0)
    OS_MemInit();                                                /* Initialize the memory manager            */
 400eab0:	4012c200 	call	4012c20 <OS_MemInit>
#endif

#if (OS_Q_EN > 0) && (OS_MAX_QS > 0)
    OS_QInit();                                                  /* Initialize the message queue structures  */
 400eab4:	4013d480 	call	4013d48 <OS_QInit>
#endif

    OS_InitTaskIdle();                                           /* Create the Idle Task                     */
 400eab8:	400f8b80 	call	400f8b8 <OS_InitTaskIdle>
#if OS_TASK_STAT_EN > 0
    OS_InitTaskStat();                                           /* Create the Statistic Task                */
 400eabc:	400f9380 	call	400f938 <OS_InitTaskStat>

#if OS_TMR_EN > 0
    OSTmr_Init();                                                /* Initialize the Timer Manager             */
#endif

    OSInitHookEnd();                                             /* Call port specific init. code            */
 400eac0:	4017fc80 	call	4017fc8 <OSInitHookEnd>

#if OS_DEBUG_EN > 0
    OSDebugInit();
 400eac4:	401022c0 	call	401022c <OSDebugInit>
#endif
}
 400eac8:	0001883a 	nop
 400eacc:	e037883a 	mov	sp,fp
 400ead0:	dfc00117 	ldw	ra,4(sp)
 400ead4:	df000017 	ldw	fp,0(sp)
 400ead8:	dec00204 	addi	sp,sp,8
 400eadc:	f800283a 	ret

0400eae0 <OSIntEnter>:
*              5) You are allowed to nest interrupts up to 255 levels deep.
*********************************************************************************************************
*/

void  OSIntEnter (void)
{
 400eae0:	deffff04 	addi	sp,sp,-4
 400eae4:	df000015 	stw	fp,0(sp)
 400eae8:	d839883a 	mov	fp,sp
    if (OSRunning == OS_TRUE) {
 400eaec:	d0a72343 	ldbu	r2,-25459(gp)
 400eaf0:	10803fcc 	andi	r2,r2,255
 400eaf4:	10800058 	cmpnei	r2,r2,1
 400eaf8:	1000071e 	bne	r2,zero,400eb18 <OSIntEnter+0x38>
        if (OSIntNesting < 255u) {
 400eafc:	d0a73103 	ldbu	r2,-25404(gp)
 400eb00:	10803fcc 	andi	r2,r2,255
 400eb04:	10803fe0 	cmpeqi	r2,r2,255
 400eb08:	1000031e 	bne	r2,zero,400eb18 <OSIntEnter+0x38>
            OSIntNesting++;                      /* Increment ISR nesting level                        */
 400eb0c:	d0a73103 	ldbu	r2,-25404(gp)
 400eb10:	10800044 	addi	r2,r2,1
 400eb14:	d0a73105 	stb	r2,-25404(gp)
        }
    }
}
 400eb18:	0001883a 	nop
 400eb1c:	e037883a 	mov	sp,fp
 400eb20:	df000017 	ldw	fp,0(sp)
 400eb24:	dec00104 	addi	sp,sp,4
 400eb28:	f800283a 	ret

0400eb2c <OSIntExit>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OSIntExit (void)
{
 400eb2c:	defffb04 	addi	sp,sp,-20
 400eb30:	dfc00415 	stw	ra,16(sp)
 400eb34:	df000315 	stw	fp,12(sp)
 400eb38:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 400eb3c:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {
 400eb40:	d0a72343 	ldbu	r2,-25459(gp)
 400eb44:	10803fcc 	andi	r2,r2,255
 400eb48:	10800058 	cmpnei	r2,r2,1
 400eb4c:	10002f1e 	bne	r2,zero,400ec0c <OSIntExit+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400eb50:	0005303a 	rdctl	r2,status
 400eb54:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400eb58:	e0ffff17 	ldw	r3,-4(fp)
 400eb5c:	00bfff84 	movi	r2,-2
 400eb60:	1884703a 	and	r2,r3,r2
 400eb64:	1001703a 	wrctl	status,r2
  
  return context;
 400eb68:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
 400eb6c:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting > 0) {                            /* Prevent OSIntNesting from wrapping       */
 400eb70:	d0a73103 	ldbu	r2,-25404(gp)
 400eb74:	10803fcc 	andi	r2,r2,255
 400eb78:	10000326 	beq	r2,zero,400eb88 <OSIntExit+0x5c>
            OSIntNesting--;
 400eb7c:	d0a73103 	ldbu	r2,-25404(gp)
 400eb80:	10bfffc4 	addi	r2,r2,-1
 400eb84:	d0a73105 	stb	r2,-25404(gp)
        }
        if (OSIntNesting == 0) {                           /* Reschedule only if all ISRs complete ... */
 400eb88:	d0a73103 	ldbu	r2,-25404(gp)
 400eb8c:	10803fcc 	andi	r2,r2,255
 400eb90:	10001a1e 	bne	r2,zero,400ebfc <OSIntExit+0xd0>
            if (OSLockNesting == 0) {                      /* ... and not locked.                      */
 400eb94:	d0a72303 	ldbu	r2,-25460(gp)
 400eb98:	10803fcc 	andi	r2,r2,255
 400eb9c:	1000171e 	bne	r2,zero,400ebfc <OSIntExit+0xd0>
                OS_SchedNew();
 400eba0:	400fc280 	call	400fc28 <OS_SchedNew>
                if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy */
 400eba4:	d0e72503 	ldbu	r3,-25452(gp)
 400eba8:	d0a72543 	ldbu	r2,-25451(gp)
 400ebac:	18c03fcc 	andi	r3,r3,255
 400ebb0:	10803fcc 	andi	r2,r2,255
 400ebb4:	18801126 	beq	r3,r2,400ebfc <OSIntExit+0xd0>
                    OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy];
 400ebb8:	d0a72503 	ldbu	r2,-25452(gp)
 400ebbc:	10c03fcc 	andi	r3,r2,255
 400ebc0:	008100b4 	movhi	r2,1026
 400ebc4:	109dc204 	addi	r2,r2,30472
 400ebc8:	18c7883a 	add	r3,r3,r3
 400ebcc:	18c7883a 	add	r3,r3,r3
 400ebd0:	10c5883a 	add	r2,r2,r3
 400ebd4:	10800017 	ldw	r2,0(r2)
 400ebd8:	d0a72d15 	stw	r2,-25420(gp)
#if OS_TASK_PROFILE_EN > 0
                    OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task  */
 400ebdc:	d0a72d17 	ldw	r2,-25420(gp)
 400ebe0:	10c00e17 	ldw	r3,56(r2)
 400ebe4:	18c00044 	addi	r3,r3,1
 400ebe8:	10c00e15 	stw	r3,56(r2)
#endif
                    OSCtxSwCtr++;                          /* Keep track of the number of ctx switches */
 400ebec:	d0a72817 	ldw	r2,-25440(gp)
 400ebf0:	10800044 	addi	r2,r2,1
 400ebf4:	d0a72815 	stw	r2,-25440(gp)
                    OSIntCtxSw();                          /* Perform interrupt level ctx switch       */
 400ebf8:	4017cd40 	call	4017cd4 <OSCtxSw>
 400ebfc:	e0bffd17 	ldw	r2,-12(fp)
 400ec00:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400ec04:	e0bffe17 	ldw	r2,-8(fp)
 400ec08:	1001703a 	wrctl	status,r2
                }
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 400ec0c:	0001883a 	nop
 400ec10:	e037883a 	mov	sp,fp
 400ec14:	dfc00117 	ldw	ra,4(sp)
 400ec18:	df000017 	ldw	fp,0(sp)
 400ec1c:	dec00204 	addi	sp,sp,8
 400ec20:	f800283a 	ret

0400ec24 <OSSchedLock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedLock (void)
{
 400ec24:	defffc04 	addi	sp,sp,-16
 400ec28:	df000315 	stw	fp,12(sp)
 400ec2c:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 400ec30:	e03ffd15 	stw	zero,-12(fp)
#endif



    if (OSRunning == OS_TRUE) {                  /* Make sure multitasking is running                  */
 400ec34:	d0a72343 	ldbu	r2,-25459(gp)
 400ec38:	10803fcc 	andi	r2,r2,255
 400ec3c:	10800058 	cmpnei	r2,r2,1
 400ec40:	1000161e 	bne	r2,zero,400ec9c <OSSchedLock+0x78>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400ec44:	0005303a 	rdctl	r2,status
 400ec48:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400ec4c:	e0ffff17 	ldw	r3,-4(fp)
 400ec50:	00bfff84 	movi	r2,-2
 400ec54:	1884703a 	and	r2,r3,r2
 400ec58:	1001703a 	wrctl	status,r2
  
  return context;
 400ec5c:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
 400ec60:	e0bffd15 	stw	r2,-12(fp)
        if (OSIntNesting == 0) {                 /* Can't call from an ISR                             */
 400ec64:	d0a73103 	ldbu	r2,-25404(gp)
 400ec68:	10803fcc 	andi	r2,r2,255
 400ec6c:	1000071e 	bne	r2,zero,400ec8c <OSSchedLock+0x68>
            if (OSLockNesting < 255u) {          /* Prevent OSLockNesting from wrapping back to 0      */
 400ec70:	d0a72303 	ldbu	r2,-25460(gp)
 400ec74:	10803fcc 	andi	r2,r2,255
 400ec78:	10803fe0 	cmpeqi	r2,r2,255
 400ec7c:	1000031e 	bne	r2,zero,400ec8c <OSSchedLock+0x68>
                OSLockNesting++;                 /* Increment lock nesting level                       */
 400ec80:	d0a72303 	ldbu	r2,-25460(gp)
 400ec84:	10800044 	addi	r2,r2,1
 400ec88:	d0a72305 	stb	r2,-25460(gp)
 400ec8c:	e0bffd17 	ldw	r2,-12(fp)
 400ec90:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400ec94:	e0bffe17 	ldw	r2,-8(fp)
 400ec98:	1001703a 	wrctl	status,r2
            }
        }
        OS_EXIT_CRITICAL();
    }
}
 400ec9c:	0001883a 	nop
 400eca0:	e037883a 	mov	sp,fp
 400eca4:	df000017 	ldw	fp,0(sp)
 400eca8:	dec00104 	addi	sp,sp,4
 400ecac:	f800283a 	ret

0400ecb0 <OSSchedUnlock>:
*********************************************************************************************************
*/

#if OS_SCHED_LOCK_EN > 0
void  OSSchedUnlock (void)
{
 400ecb0:	defff804 	addi	sp,sp,-32
 400ecb4:	dfc00715 	stw	ra,28(sp)
 400ecb8:	df000615 	stw	fp,24(sp)
 400ecbc:	df000604 	addi	fp,sp,24
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 400ecc0:	e03ffa15 	stw	zero,-24(fp)
#endif



    if (OSRunning == OS_TRUE) {                            /* Make sure multitasking is running        */
 400ecc4:	d0a72343 	ldbu	r2,-25459(gp)
 400ecc8:	10803fcc 	andi	r2,r2,255
 400eccc:	10800058 	cmpnei	r2,r2,1
 400ecd0:	1000281e 	bne	r2,zero,400ed74 <OSSchedUnlock+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400ecd4:	0005303a 	rdctl	r2,status
 400ecd8:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400ecdc:	e0ffff17 	ldw	r3,-4(fp)
 400ece0:	00bfff84 	movi	r2,-2
 400ece4:	1884703a 	and	r2,r3,r2
 400ece8:	1001703a 	wrctl	status,r2
  
  return context;
 400ecec:	e0bfff17 	ldw	r2,-4(fp)
        OS_ENTER_CRITICAL();
 400ecf0:	e0bffa15 	stw	r2,-24(fp)
        if (OSLockNesting > 0) {                           /* Do not decrement if already 0            */
 400ecf4:	d0a72303 	ldbu	r2,-25460(gp)
 400ecf8:	10803fcc 	andi	r2,r2,255
 400ecfc:	10001926 	beq	r2,zero,400ed64 <OSSchedUnlock+0xb4>
            OSLockNesting--;                               /* Decrement lock nesting level             */
 400ed00:	d0a72303 	ldbu	r2,-25460(gp)
 400ed04:	10bfffc4 	addi	r2,r2,-1
 400ed08:	d0a72305 	stb	r2,-25460(gp)
            if (OSLockNesting == 0) {                      /* See if scheduler is enabled and ...      */
 400ed0c:	d0a72303 	ldbu	r2,-25460(gp)
 400ed10:	10803fcc 	andi	r2,r2,255
 400ed14:	10000e1e 	bne	r2,zero,400ed50 <OSSchedUnlock+0xa0>
                if (OSIntNesting == 0) {                   /* ... not in an ISR                        */
 400ed18:	d0a73103 	ldbu	r2,-25404(gp)
 400ed1c:	10803fcc 	andi	r2,r2,255
 400ed20:	1000061e 	bne	r2,zero,400ed3c <OSSchedUnlock+0x8c>
 400ed24:	e0bffa17 	ldw	r2,-24(fp)
 400ed28:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400ed2c:	e0bffb17 	ldw	r2,-20(fp)
 400ed30:	1001703a 	wrctl	status,r2
                    OS_EXIT_CRITICAL();
                    OS_Sched();                            /* See if a HPT is ready                    */
 400ed34:	400fb580 	call	400fb58 <OS_Sched>
            }
        } else {
            OS_EXIT_CRITICAL();
        }
    }
}
 400ed38:	00000e06 	br	400ed74 <OSSchedUnlock+0xc4>
 400ed3c:	e0bffa17 	ldw	r2,-24(fp)
 400ed40:	e0bffc15 	stw	r2,-16(fp)
 400ed44:	e0bffc17 	ldw	r2,-16(fp)
 400ed48:	1001703a 	wrctl	status,r2
 400ed4c:	00000906 	br	400ed74 <OSSchedUnlock+0xc4>
 400ed50:	e0bffa17 	ldw	r2,-24(fp)
 400ed54:	e0bffd15 	stw	r2,-12(fp)
 400ed58:	e0bffd17 	ldw	r2,-12(fp)
 400ed5c:	1001703a 	wrctl	status,r2
 400ed60:	00000406 	br	400ed74 <OSSchedUnlock+0xc4>
 400ed64:	e0bffa17 	ldw	r2,-24(fp)
 400ed68:	e0bffe15 	stw	r2,-8(fp)
 400ed6c:	e0bffe17 	ldw	r2,-8(fp)
 400ed70:	1001703a 	wrctl	status,r2
 400ed74:	0001883a 	nop
 400ed78:	e037883a 	mov	sp,fp
 400ed7c:	dfc00117 	ldw	ra,4(sp)
 400ed80:	df000017 	ldw	fp,0(sp)
 400ed84:	dec00204 	addi	sp,sp,8
 400ed88:	f800283a 	ret

0400ed8c <OSStart>:
*                 d_ Execute the task.
*********************************************************************************************************
*/

void  OSStart (void)
{
 400ed8c:	defffe04 	addi	sp,sp,-8
 400ed90:	dfc00115 	stw	ra,4(sp)
 400ed94:	df000015 	stw	fp,0(sp)
 400ed98:	d839883a 	mov	fp,sp
    if (OSRunning == OS_FALSE) {
 400ed9c:	d0a72343 	ldbu	r2,-25459(gp)
 400eda0:	10803fcc 	andi	r2,r2,255
 400eda4:	10000f1e 	bne	r2,zero,400ede4 <OSStart+0x58>
        OS_SchedNew();                               /* Find highest priority's task priority number   */
 400eda8:	400fc280 	call	400fc28 <OS_SchedNew>
        OSPrioCur     = OSPrioHighRdy;
 400edac:	d0a72503 	ldbu	r2,-25452(gp)
 400edb0:	d0a72545 	stb	r2,-25451(gp)
        OSTCBHighRdy  = OSTCBPrioTbl[OSPrioHighRdy]; /* Point to highest priority task ready to run    */
 400edb4:	d0a72503 	ldbu	r2,-25452(gp)
 400edb8:	10c03fcc 	andi	r3,r2,255
 400edbc:	008100b4 	movhi	r2,1026
 400edc0:	109dc204 	addi	r2,r2,30472
 400edc4:	18c7883a 	add	r3,r3,r3
 400edc8:	18c7883a 	add	r3,r3,r3
 400edcc:	10c5883a 	add	r2,r2,r3
 400edd0:	10800017 	ldw	r2,0(r2)
 400edd4:	d0a72d15 	stw	r2,-25420(gp)
        OSTCBCur      = OSTCBHighRdy;
 400edd8:	d0a72d17 	ldw	r2,-25420(gp)
 400eddc:	d0a73215 	stw	r2,-25400(gp)
        OSStartHighRdy();                            /* Execute target specific code to start task     */
 400ede0:	4017d600 	call	4017d60 <OSStartHighRdy>
    }
}
 400ede4:	0001883a 	nop
 400ede8:	e037883a 	mov	sp,fp
 400edec:	dfc00117 	ldw	ra,4(sp)
 400edf0:	df000017 	ldw	fp,0(sp)
 400edf4:	dec00204 	addi	sp,sp,8
 400edf8:	f800283a 	ret

0400edfc <OSStatInit>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OSStatInit (void)
{
 400edfc:	defff904 	addi	sp,sp,-28
 400ee00:	dfc00615 	stw	ra,24(sp)
 400ee04:	df000515 	stw	fp,20(sp)
 400ee08:	df000504 	addi	fp,sp,20
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 400ee0c:	e03ffb15 	stw	zero,-20(fp)
#endif



    OSTimeDly(2);                                /* Synchronize with clock tick                        */
 400ee10:	01000084 	movi	r4,2
 400ee14:	4015fbc0 	call	4015fbc <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400ee18:	0005303a 	rdctl	r2,status
 400ee1c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400ee20:	e0fffc17 	ldw	r3,-16(fp)
 400ee24:	00bfff84 	movi	r2,-2
 400ee28:	1884703a 	and	r2,r3,r2
 400ee2c:	1001703a 	wrctl	status,r2
  
  return context;
 400ee30:	e0bffc17 	ldw	r2,-16(fp)
    OS_ENTER_CRITICAL();
 400ee34:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtr    = 0L;                           /* Clear idle counter                                 */
 400ee38:	d0272415 	stw	zero,-25456(gp)
 400ee3c:	e0bffb17 	ldw	r2,-20(fp)
 400ee40:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400ee44:	e0bffd17 	ldw	r2,-12(fp)
 400ee48:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OSTimeDly(OS_TICKS_PER_SEC / 10);            /* Determine MAX. idle counter value for 1/10 second  */
 400ee4c:	01000144 	movi	r4,5
 400ee50:	4015fbc0 	call	4015fbc <OSTimeDly>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400ee54:	0005303a 	rdctl	r2,status
 400ee58:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400ee5c:	e0fffe17 	ldw	r3,-8(fp)
 400ee60:	00bfff84 	movi	r2,-2
 400ee64:	1884703a 	and	r2,r3,r2
 400ee68:	1001703a 	wrctl	status,r2
  
  return context;
 400ee6c:	e0bffe17 	ldw	r2,-8(fp)
    OS_ENTER_CRITICAL();
 400ee70:	e0bffb15 	stw	r2,-20(fp)
    OSIdleCtrMax = OSIdleCtr;                    /* Store maximum idle counter count in 1/10 second    */
 400ee74:	d0a72417 	ldw	r2,-25456(gp)
 400ee78:	d0a72915 	stw	r2,-25436(gp)
    OSStatRdy    = OS_TRUE;
 400ee7c:	00800044 	movi	r2,1
 400ee80:	d0a73505 	stb	r2,-25388(gp)
 400ee84:	e0bffb17 	ldw	r2,-20(fp)
 400ee88:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400ee8c:	e0bfff17 	ldw	r2,-4(fp)
 400ee90:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 400ee94:	0001883a 	nop
 400ee98:	e037883a 	mov	sp,fp
 400ee9c:	dfc00117 	ldw	ra,4(sp)
 400eea0:	df000017 	ldw	fp,0(sp)
 400eea4:	dec00204 	addi	sp,sp,8
 400eea8:	f800283a 	ret

0400eeac <OSTimeTick>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeTick (void)
{
 400eeac:	defff704 	addi	sp,sp,-36
 400eeb0:	dfc00815 	stw	ra,32(sp)
 400eeb4:	df000715 	stw	fp,28(sp)
 400eeb8:	df000704 	addi	fp,sp,28
    OS_TCB    *ptcb;
#if OS_TICK_STEP_EN > 0
    BOOLEAN    step;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 400eebc:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_TIME_TICK_HOOK_EN > 0
    OSTimeTickHook();                                      /* Call user definable hook                     */
 400eec0:	4017f880 	call	4017f88 <OSTimeTickHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400eec4:	0005303a 	rdctl	r2,status
 400eec8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400eecc:	e0fffd17 	ldw	r3,-12(fp)
 400eed0:	00bfff84 	movi	r2,-2
 400eed4:	1884703a 	and	r2,r3,r2
 400eed8:	1001703a 	wrctl	status,r2
  
  return context;
 400eedc:	e0bffd17 	ldw	r2,-12(fp)
#endif
#if OS_TIME_GET_SET_EN > 0
    OS_ENTER_CRITICAL();                                   /* Update the 32-bit tick counter               */
 400eee0:	e0bffb15 	stw	r2,-20(fp)
    OSTime++;
 400eee4:	d0a73317 	ldw	r2,-25396(gp)
 400eee8:	10800044 	addi	r2,r2,1
 400eeec:	d0a73315 	stw	r2,-25396(gp)
 400eef0:	e0bffb17 	ldw	r2,-20(fp)
 400eef4:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400eef8:	e0bfff17 	ldw	r2,-4(fp)
 400eefc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#endif
    if (OSRunning == OS_TRUE) {
 400ef00:	d0a72343 	ldbu	r2,-25459(gp)
 400ef04:	10803fcc 	andi	r2,r2,255
 400ef08:	10800058 	cmpnei	r2,r2,1
 400ef0c:	10006a1e 	bne	r2,zero,400f0b8 <OSTimeTick+0x20c>
#if OS_TICK_STEP_EN > 0
        switch (OSTickStepState) {                         /* Determine whether we need to process a tick  */
 400ef10:	d0a72703 	ldbu	r2,-25444(gp)
 400ef14:	10803fcc 	andi	r2,r2,255
 400ef18:	10c00060 	cmpeqi	r3,r2,1
 400ef1c:	1800061e 	bne	r3,zero,400ef38 <OSTimeTick+0x8c>
 400ef20:	10c000a0 	cmpeqi	r3,r2,2
 400ef24:	1800061e 	bne	r3,zero,400ef40 <OSTimeTick+0x94>
 400ef28:	10000a1e 	bne	r2,zero,400ef54 <OSTimeTick+0xa8>
            case OS_TICK_STEP_DIS:                         /* Yes, stepping is disabled                    */
                 step = OS_TRUE;
 400ef2c:	00800044 	movi	r2,1
 400ef30:	e0bffa05 	stb	r2,-24(fp)
                 break;
 400ef34:	00000b06 	br	400ef64 <OSTimeTick+0xb8>

            case OS_TICK_STEP_WAIT:                        /* No,  waiting for uC/OS-View to set ...       */
                 step = OS_FALSE;                          /*      .. OSTickStepState to OS_TICK_STEP_ONCE */
 400ef38:	e03ffa05 	stb	zero,-24(fp)
                 break;
 400ef3c:	00000906 	br	400ef64 <OSTimeTick+0xb8>

            case OS_TICK_STEP_ONCE:                        /* Yes, process tick once and wait for next ... */
                 step            = OS_TRUE;                /*      ... step command from uC/OS-View        */
 400ef40:	00800044 	movi	r2,1
 400ef44:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_WAIT;
 400ef48:	00800044 	movi	r2,1
 400ef4c:	d0a72705 	stb	r2,-25444(gp)
                 break;
 400ef50:	00000406 	br	400ef64 <OSTimeTick+0xb8>

            default:                                       /* Invalid case, correct situation              */
                 step            = OS_TRUE;
 400ef54:	00800044 	movi	r2,1
 400ef58:	e0bffa05 	stb	r2,-24(fp)
                 OSTickStepState = OS_TICK_STEP_DIS;
 400ef5c:	d0272705 	stb	zero,-25444(gp)
                 break;
 400ef60:	0001883a 	nop
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
 400ef64:	e0bffa03 	ldbu	r2,-24(fp)
 400ef68:	10005226 	beq	r2,zero,400f0b4 <OSTimeTick+0x208>
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
 400ef6c:	d0a72617 	ldw	r2,-25448(gp)
 400ef70:	e0bff915 	stw	r2,-28(fp)
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 400ef74:	00004906 	br	400f09c <OSTimeTick+0x1f0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400ef78:	0005303a 	rdctl	r2,status
 400ef7c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400ef80:	e0fffc17 	ldw	r3,-16(fp)
 400ef84:	00bfff84 	movi	r2,-2
 400ef88:	1884703a 	and	r2,r3,r2
 400ef8c:	1001703a 	wrctl	status,r2
  
  return context;
 400ef90:	e0bffc17 	ldw	r2,-16(fp)
            OS_ENTER_CRITICAL();
 400ef94:	e0bffb15 	stw	r2,-20(fp)
            if (ptcb->OSTCBDly != 0) {                     /* No, Delayed or waiting for event with TO     */
 400ef98:	e0bff917 	ldw	r2,-28(fp)
 400ef9c:	10800b8b 	ldhu	r2,46(r2)
 400efa0:	10bfffcc 	andi	r2,r2,65535
 400efa4:	10003626 	beq	r2,zero,400f080 <OSTimeTick+0x1d4>
                if (--ptcb->OSTCBDly == 0) {               /* Decrement nbr of ticks to end of delay       */
 400efa8:	e0bff917 	ldw	r2,-28(fp)
 400efac:	10800b8b 	ldhu	r2,46(r2)
 400efb0:	10bfffc4 	addi	r2,r2,-1
 400efb4:	1007883a 	mov	r3,r2
 400efb8:	e0bff917 	ldw	r2,-28(fp)
 400efbc:	10c00b8d 	sth	r3,46(r2)
 400efc0:	e0bff917 	ldw	r2,-28(fp)
 400efc4:	10800b8b 	ldhu	r2,46(r2)
 400efc8:	10bfffcc 	andi	r2,r2,65535
 400efcc:	10002c1e 	bne	r2,zero,400f080 <OSTimeTick+0x1d4>
                                                           /* Check for timeout                            */
                    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 400efd0:	e0bff917 	ldw	r2,-28(fp)
 400efd4:	10800c03 	ldbu	r2,48(r2)
 400efd8:	10803fcc 	andi	r2,r2,255
 400efdc:	10800dcc 	andi	r2,r2,55
 400efe0:	10000b26 	beq	r2,zero,400f010 <OSTimeTick+0x164>
                        ptcb->OSTCBStat  &= ~(INT8U)OS_STAT_PEND_ANY;          /* Yes, Clear status flag   */
 400efe4:	e0bff917 	ldw	r2,-28(fp)
 400efe8:	10c00c03 	ldbu	r3,48(r2)
 400efec:	00bff204 	movi	r2,-56
 400eff0:	1884703a 	and	r2,r3,r2
 400eff4:	1007883a 	mov	r3,r2
 400eff8:	e0bff917 	ldw	r2,-28(fp)
 400effc:	10c00c05 	stb	r3,48(r2)
                        ptcb->OSTCBStatPend = OS_STAT_PEND_TO;                 /* Indicate PEND timeout    */
 400f000:	e0bff917 	ldw	r2,-28(fp)
 400f004:	00c00044 	movi	r3,1
 400f008:	10c00c45 	stb	r3,49(r2)
 400f00c:	00000206 	br	400f018 <OSTimeTick+0x16c>
                    } else {
                        ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 400f010:	e0bff917 	ldw	r2,-28(fp)
 400f014:	10000c45 	stb	zero,49(r2)
                    }

                    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?       */
 400f018:	e0bff917 	ldw	r2,-28(fp)
 400f01c:	10800c03 	ldbu	r2,48(r2)
 400f020:	10803fcc 	andi	r2,r2,255
 400f024:	1080020c 	andi	r2,r2,8
 400f028:	1000151e 	bne	r2,zero,400f080 <OSTimeTick+0x1d4>
                        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready          */
 400f02c:	e0bff917 	ldw	r2,-28(fp)
 400f030:	10c00d83 	ldbu	r3,54(r2)
 400f034:	d0a72f03 	ldbu	r2,-25412(gp)
 400f038:	1884b03a 	or	r2,r3,r2
 400f03c:	d0a72f05 	stb	r2,-25412(gp)
                        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 400f040:	e0bff917 	ldw	r2,-28(fp)
 400f044:	10800d03 	ldbu	r2,52(r2)
 400f048:	10c03fcc 	andi	r3,r2,255
 400f04c:	e0bff917 	ldw	r2,-28(fp)
 400f050:	10800d03 	ldbu	r2,52(r2)
 400f054:	11003fcc 	andi	r4,r2,255
 400f058:	d0a72f44 	addi	r2,gp,-25411
 400f05c:	2085883a 	add	r2,r4,r2
 400f060:	11000003 	ldbu	r4,0(r2)
 400f064:	e0bff917 	ldw	r2,-28(fp)
 400f068:	10800d43 	ldbu	r2,53(r2)
 400f06c:	2084b03a 	or	r2,r4,r2
 400f070:	1009883a 	mov	r4,r2
 400f074:	d0a72f44 	addi	r2,gp,-25411
 400f078:	1885883a 	add	r2,r3,r2
 400f07c:	11000005 	stb	r4,0(r2)
                    }
                }
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
 400f080:	e0bff917 	ldw	r2,-28(fp)
 400f084:	10800517 	ldw	r2,20(r2)
 400f088:	e0bff915 	stw	r2,-28(fp)
 400f08c:	e0bffb17 	ldw	r2,-20(fp)
 400f090:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400f094:	e0bffe17 	ldw	r2,-8(fp)
 400f098:	1001703a 	wrctl	status,r2
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
        }
#endif
        ptcb = OSTCBList;                                  /* Point at first TCB in TCB list               */
        while (ptcb->OSTCBPrio != OS_TASK_IDLE_PRIO) {     /* Go through all TCBs in TCB list              */
 400f09c:	e0bff917 	ldw	r2,-28(fp)
 400f0a0:	10800c83 	ldbu	r2,50(r2)
 400f0a4:	10803fcc 	andi	r2,r2,255
 400f0a8:	10800518 	cmpnei	r2,r2,20
 400f0ac:	103fb21e 	bne	r2,zero,400ef78 <__alt_mem_onchip_memory2_0+0xfbfeef78>
 400f0b0:	00000106 	br	400f0b8 <OSTimeTick+0x20c>
                 step            = OS_TRUE;
                 OSTickStepState = OS_TICK_STEP_DIS;
                 break;
        }
        if (step == OS_FALSE) {                            /* Return if waiting for step command           */
            return;
 400f0b4:	0001883a 	nop
            }
            ptcb = ptcb->OSTCBNext;                        /* Point at next TCB in TCB list                */
            OS_EXIT_CRITICAL();
        }
    }
}
 400f0b8:	e037883a 	mov	sp,fp
 400f0bc:	dfc00117 	ldw	ra,4(sp)
 400f0c0:	df000017 	ldw	fp,0(sp)
 400f0c4:	dec00204 	addi	sp,sp,8
 400f0c8:	f800283a 	ret

0400f0cc <OSVersion>:
* Returns    : the version number of uC/OS-II multiplied by 100.
*********************************************************************************************************
*/

INT16U  OSVersion (void)
{
 400f0cc:	deffff04 	addi	sp,sp,-4
 400f0d0:	df000015 	stw	fp,0(sp)
 400f0d4:	d839883a 	mov	fp,sp
    return (OS_VERSION);
 400f0d8:	00804784 	movi	r2,286
}
 400f0dc:	e037883a 	mov	sp,fp
 400f0e0:	df000017 	ldw	fp,0(sp)
 400f0e4:	dec00104 	addi	sp,sp,4
 400f0e8:	f800283a 	ret

0400f0ec <OS_Dummy>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
void  OS_Dummy (void)
{
 400f0ec:	deffff04 	addi	sp,sp,-4
 400f0f0:	df000015 	stw	fp,0(sp)
 400f0f4:	d839883a 	mov	fp,sp
}
 400f0f8:	0001883a 	nop
 400f0fc:	e037883a 	mov	sp,fp
 400f100:	df000017 	ldw	fp,0(sp)
 400f104:	dec00104 	addi	sp,sp,4
 400f108:	f800283a 	ret

0400f10c <OS_EventTaskRdy>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
INT8U  OS_EventTaskRdy (OS_EVENT *pevent, void *pmsg, INT8U msk, INT8U pend_stat)
{
 400f10c:	defff804 	addi	sp,sp,-32
 400f110:	dfc00715 	stw	ra,28(sp)
 400f114:	df000615 	stw	fp,24(sp)
 400f118:	df000604 	addi	fp,sp,24
 400f11c:	e13ffc15 	stw	r4,-16(fp)
 400f120:	e17ffd15 	stw	r5,-12(fp)
 400f124:	3007883a 	mov	r3,r6
 400f128:	3805883a 	mov	r2,r7
 400f12c:	e0fffe05 	stb	r3,-8(fp)
 400f130:	e0bfff05 	stb	r2,-4(fp)
    INT16U  *ptbl;
#endif


#if OS_LOWEST_PRIO <= 63
    y    = OSUnMapTbl[pevent->OSEventGrp];              /* Find HPT waiting for message                */
 400f134:	e0bffc17 	ldw	r2,-16(fp)
 400f138:	10800283 	ldbu	r2,10(r2)
 400f13c:	10c03fcc 	andi	r3,r2,255
 400f140:	008100b4 	movhi	r2,1026
 400f144:	10a2c404 	addi	r2,r2,-29936
 400f148:	10c5883a 	add	r2,r2,r3
 400f14c:	10800003 	ldbu	r2,0(r2)
 400f150:	e0bffa05 	stb	r2,-24(fp)
    x    = OSUnMapTbl[pevent->OSEventTbl[y]];
 400f154:	e0bffa03 	ldbu	r2,-24(fp)
 400f158:	e0fffc17 	ldw	r3,-16(fp)
 400f15c:	1885883a 	add	r2,r3,r2
 400f160:	108002c4 	addi	r2,r2,11
 400f164:	10800003 	ldbu	r2,0(r2)
 400f168:	10c03fcc 	andi	r3,r2,255
 400f16c:	008100b4 	movhi	r2,1026
 400f170:	10a2c404 	addi	r2,r2,-29936
 400f174:	10c5883a 	add	r2,r2,r3
 400f178:	10800003 	ldbu	r2,0(r2)
 400f17c:	e0bffa45 	stb	r2,-23(fp)
    prio = (INT8U)((y << 3) + x);                       /* Find priority of task getting the msg       */
 400f180:	e0bffa03 	ldbu	r2,-24(fp)
 400f184:	100490fa 	slli	r2,r2,3
 400f188:	1007883a 	mov	r3,r2
 400f18c:	e0bffa43 	ldbu	r2,-23(fp)
 400f190:	1885883a 	add	r2,r3,r2
 400f194:	e0bffa85 	stb	r2,-22(fp)
        x = OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8;
    }
    prio = (INT8U)((y << 4) + x);                       /* Find priority of task getting the msg       */
#endif

    ptcb                  =  OSTCBPrioTbl[prio];        /* Point to this task's OS_TCB                 */
 400f198:	e0fffa83 	ldbu	r3,-22(fp)
 400f19c:	008100b4 	movhi	r2,1026
 400f1a0:	109dc204 	addi	r2,r2,30472
 400f1a4:	18c7883a 	add	r3,r3,r3
 400f1a8:	18c7883a 	add	r3,r3,r3
 400f1ac:	10c5883a 	add	r2,r2,r3
 400f1b0:	10800017 	ldw	r2,0(r2)
 400f1b4:	e0bffb15 	stw	r2,-20(fp)
    ptcb->OSTCBDly        =  0;                         /* Prevent OSTimeTick() from readying task     */
 400f1b8:	e0bffb17 	ldw	r2,-20(fp)
 400f1bc:	10000b8d 	sth	zero,46(r2)
#if ((OS_Q_EN > 0) && (OS_MAX_QS > 0)) || (OS_MBOX_EN > 0)
    ptcb->OSTCBMsg        =  pmsg;                      /* Send message directly to waiting task       */
 400f1c0:	e0bffb17 	ldw	r2,-20(fp)
 400f1c4:	e0fffd17 	ldw	r3,-12(fp)
 400f1c8:	10c00915 	stw	r3,36(r2)
#else
    pmsg                  =  pmsg;                      /* Prevent compiler warning if not used        */
#endif
    ptcb->OSTCBStat      &= ~msk;                       /* Clear bit associated with event type        */
 400f1cc:	e0bffb17 	ldw	r2,-20(fp)
 400f1d0:	10800c03 	ldbu	r2,48(r2)
 400f1d4:	1007883a 	mov	r3,r2
 400f1d8:	e0bffe03 	ldbu	r2,-8(fp)
 400f1dc:	0084303a 	nor	r2,zero,r2
 400f1e0:	1884703a 	and	r2,r3,r2
 400f1e4:	1007883a 	mov	r3,r2
 400f1e8:	e0bffb17 	ldw	r2,-20(fp)
 400f1ec:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend   =  pend_stat;                 /* Set pend status of post or abort            */
 400f1f0:	e0bffb17 	ldw	r2,-20(fp)
 400f1f4:	e0ffff03 	ldbu	r3,-4(fp)
 400f1f8:	10c00c45 	stb	r3,49(r2)
                                                        /* See if task is ready (could be susp'd)      */
    if ((ptcb->OSTCBStat &   OS_STAT_SUSPEND) == OS_STAT_RDY) {
 400f1fc:	e0bffb17 	ldw	r2,-20(fp)
 400f200:	10800c03 	ldbu	r2,48(r2)
 400f204:	10803fcc 	andi	r2,r2,255
 400f208:	1080020c 	andi	r2,r2,8
 400f20c:	1000111e 	bne	r2,zero,400f254 <OS_EventTaskRdy+0x148>
        OSRdyGrp         |=  ptcb->OSTCBBitY;           /* Put task in the ready to run list           */
 400f210:	e0bffb17 	ldw	r2,-20(fp)
 400f214:	10c00d83 	ldbu	r3,54(r2)
 400f218:	d0a72f03 	ldbu	r2,-25412(gp)
 400f21c:	1884b03a 	or	r2,r3,r2
 400f220:	d0a72f05 	stb	r2,-25412(gp)
        OSRdyTbl[y]      |=  ptcb->OSTCBBitX;
 400f224:	e0fffa03 	ldbu	r3,-24(fp)
 400f228:	e13ffa03 	ldbu	r4,-24(fp)
 400f22c:	d0a72f44 	addi	r2,gp,-25411
 400f230:	2085883a 	add	r2,r4,r2
 400f234:	11000003 	ldbu	r4,0(r2)
 400f238:	e0bffb17 	ldw	r2,-20(fp)
 400f23c:	10800d43 	ldbu	r2,53(r2)
 400f240:	2084b03a 	or	r2,r4,r2
 400f244:	1009883a 	mov	r4,r2
 400f248:	d0a72f44 	addi	r2,gp,-25411
 400f24c:	1885883a 	add	r2,r3,r2
 400f250:	11000005 	stb	r4,0(r2)
    }

    OS_EventTaskRemove(ptcb, pevent);                   /* Remove this task from event   wait list     */
 400f254:	e17ffc17 	ldw	r5,-16(fp)
 400f258:	e13ffb17 	ldw	r4,-20(fp)
 400f25c:	400f5040 	call	400f504 <OS_EventTaskRemove>
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from events' wait lists    */
 400f260:	e0bffb17 	ldw	r2,-20(fp)
 400f264:	10800817 	ldw	r2,32(r2)
 400f268:	10000826 	beq	r2,zero,400f28c <OS_EventTaskRdy+0x180>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 400f26c:	e0bffb17 	ldw	r2,-20(fp)
 400f270:	10800817 	ldw	r2,32(r2)
 400f274:	100b883a 	mov	r5,r2
 400f278:	e13ffb17 	ldw	r4,-20(fp)
 400f27c:	400f5bc0 	call	400f5bc <OS_EventTaskRemoveMulti>
        ptcb->OSTCBEventPtr       = (OS_EVENT  *)pevent;/* Return event as first multi-pend event ready*/
 400f280:	e0bffb17 	ldw	r2,-20(fp)
 400f284:	e0fffc17 	ldw	r3,-16(fp)
 400f288:	10c00715 	stw	r3,28(r2)
    }
#endif

    return (prio);
 400f28c:	e0bffa83 	ldbu	r2,-22(fp)
}
 400f290:	e037883a 	mov	sp,fp
 400f294:	dfc00117 	ldw	ra,4(sp)
 400f298:	df000017 	ldw	fp,0(sp)
 400f29c:	dec00204 	addi	sp,sp,8
 400f2a0:	f800283a 	ret

0400f2a4 <OS_EventTaskWait>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskWait (OS_EVENT *pevent)
{
 400f2a4:	defffd04 	addi	sp,sp,-12
 400f2a8:	df000215 	stw	fp,8(sp)
 400f2ac:	df000204 	addi	fp,sp,8
 400f2b0:	e13fff15 	stw	r4,-4(fp)
    INT8U  y;


    OSTCBCur->OSTCBEventPtr               = pevent;                 /* Store ptr to ECB in TCB         */
 400f2b4:	d0a73217 	ldw	r2,-25400(gp)
 400f2b8:	e0ffff17 	ldw	r3,-4(fp)
 400f2bc:	10c00715 	stw	r3,28(r2)

    pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;    /* Put task in waiting list        */
 400f2c0:	d0a73217 	ldw	r2,-25400(gp)
 400f2c4:	10800d03 	ldbu	r2,52(r2)
 400f2c8:	10803fcc 	andi	r2,r2,255
 400f2cc:	d0e73217 	ldw	r3,-25400(gp)
 400f2d0:	18c00d03 	ldbu	r3,52(r3)
 400f2d4:	18c03fcc 	andi	r3,r3,255
 400f2d8:	e13fff17 	ldw	r4,-4(fp)
 400f2dc:	20c7883a 	add	r3,r4,r3
 400f2e0:	18c002c4 	addi	r3,r3,11
 400f2e4:	19000003 	ldbu	r4,0(r3)
 400f2e8:	d0e73217 	ldw	r3,-25400(gp)
 400f2ec:	18c00d43 	ldbu	r3,53(r3)
 400f2f0:	20c6b03a 	or	r3,r4,r3
 400f2f4:	1809883a 	mov	r4,r3
 400f2f8:	e0ffff17 	ldw	r3,-4(fp)
 400f2fc:	1885883a 	add	r2,r3,r2
 400f300:	108002c4 	addi	r2,r2,11
 400f304:	11000005 	stb	r4,0(r2)
    pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 400f308:	e0bfff17 	ldw	r2,-4(fp)
 400f30c:	10c00283 	ldbu	r3,10(r2)
 400f310:	d0a73217 	ldw	r2,-25400(gp)
 400f314:	10800d83 	ldbu	r2,54(r2)
 400f318:	1884b03a 	or	r2,r3,r2
 400f31c:	1007883a 	mov	r3,r2
 400f320:	e0bfff17 	ldw	r2,-4(fp)
 400f324:	10c00285 	stb	r3,10(r2)

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 400f328:	d0a73217 	ldw	r2,-25400(gp)
 400f32c:	10800d03 	ldbu	r2,52(r2)
 400f330:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 400f334:	e0fffe03 	ldbu	r3,-8(fp)
 400f338:	e13ffe03 	ldbu	r4,-8(fp)
 400f33c:	d0a72f44 	addi	r2,gp,-25411
 400f340:	2085883a 	add	r2,r4,r2
 400f344:	10800003 	ldbu	r2,0(r2)
 400f348:	1009883a 	mov	r4,r2
 400f34c:	d0a73217 	ldw	r2,-25400(gp)
 400f350:	10800d43 	ldbu	r2,53(r2)
 400f354:	0084303a 	nor	r2,zero,r2
 400f358:	2084703a 	and	r2,r4,r2
 400f35c:	1009883a 	mov	r4,r2
 400f360:	d0a72f44 	addi	r2,gp,-25411
 400f364:	1885883a 	add	r2,r3,r2
 400f368:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
 400f36c:	e0fffe03 	ldbu	r3,-8(fp)
 400f370:	d0a72f44 	addi	r2,gp,-25411
 400f374:	1885883a 	add	r2,r3,r2
 400f378:	10800003 	ldbu	r2,0(r2)
 400f37c:	10803fcc 	andi	r2,r2,255
 400f380:	1000071e 	bne	r2,zero,400f3a0 <OS_EventTaskWait+0xfc>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 400f384:	d0a73217 	ldw	r2,-25400(gp)
 400f388:	10800d83 	ldbu	r2,54(r2)
 400f38c:	0084303a 	nor	r2,zero,r2
 400f390:	1007883a 	mov	r3,r2
 400f394:	d0a72f03 	ldbu	r2,-25412(gp)
 400f398:	1884703a 	and	r2,r3,r2
 400f39c:	d0a72f05 	stb	r2,-25412(gp)
    }
}
 400f3a0:	0001883a 	nop
 400f3a4:	e037883a 	mov	sp,fp
 400f3a8:	df000017 	ldw	fp,0(sp)
 400f3ac:	dec00104 	addi	sp,sp,4
 400f3b0:	f800283a 	ret

0400f3b4 <OS_EventTaskWaitMulti>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskWaitMulti (OS_EVENT **pevents_wait)
{
 400f3b4:	defffb04 	addi	sp,sp,-20
 400f3b8:	df000415 	stw	fp,16(sp)
 400f3bc:	df000404 	addi	fp,sp,16
 400f3c0:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT **pevents;
    OS_EVENT  *pevent;
    INT8U      y;


    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
 400f3c4:	d0a73217 	ldw	r2,-25400(gp)
 400f3c8:	10000715 	stw	zero,28(r2)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */
 400f3cc:	d0a73217 	ldw	r2,-25400(gp)
 400f3d0:	e0ffff17 	ldw	r3,-4(fp)
 400f3d4:	10c00815 	stw	r3,32(r2)

    pevents =  pevents_wait;
 400f3d8:	e0bfff17 	ldw	r2,-4(fp)
 400f3dc:	e0bffc15 	stw	r2,-16(fp)
    pevent  = *pevents;
 400f3e0:	e0bffc17 	ldw	r2,-16(fp)
 400f3e4:	10800017 	ldw	r2,0(r2)
 400f3e8:	e0bffd15 	stw	r2,-12(fp)
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 400f3ec:	00002006 	br	400f470 <OS_EventTaskWaitMulti+0xbc>
        pevent->OSEventTbl[OSTCBCur->OSTCBY] |= OSTCBCur->OSTCBBitX;
 400f3f0:	d0a73217 	ldw	r2,-25400(gp)
 400f3f4:	10800d03 	ldbu	r2,52(r2)
 400f3f8:	10803fcc 	andi	r2,r2,255
 400f3fc:	d0e73217 	ldw	r3,-25400(gp)
 400f400:	18c00d03 	ldbu	r3,52(r3)
 400f404:	18c03fcc 	andi	r3,r3,255
 400f408:	e13ffd17 	ldw	r4,-12(fp)
 400f40c:	20c7883a 	add	r3,r4,r3
 400f410:	18c002c4 	addi	r3,r3,11
 400f414:	19000003 	ldbu	r4,0(r3)
 400f418:	d0e73217 	ldw	r3,-25400(gp)
 400f41c:	18c00d43 	ldbu	r3,53(r3)
 400f420:	20c6b03a 	or	r3,r4,r3
 400f424:	1809883a 	mov	r4,r3
 400f428:	e0fffd17 	ldw	r3,-12(fp)
 400f42c:	1885883a 	add	r2,r3,r2
 400f430:	108002c4 	addi	r2,r2,11
 400f434:	11000005 	stb	r4,0(r2)
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
 400f438:	e0bffd17 	ldw	r2,-12(fp)
 400f43c:	10c00283 	ldbu	r3,10(r2)
 400f440:	d0a73217 	ldw	r2,-25400(gp)
 400f444:	10800d83 	ldbu	r2,54(r2)
 400f448:	1884b03a 	or	r2,r3,r2
 400f44c:	1007883a 	mov	r3,r2
 400f450:	e0bffd17 	ldw	r2,-12(fp)
 400f454:	10c00285 	stb	r3,10(r2)
        pevents++;
 400f458:	e0bffc17 	ldw	r2,-16(fp)
 400f45c:	10800104 	addi	r2,r2,4
 400f460:	e0bffc15 	stw	r2,-16(fp)
        pevent = *pevents;
 400f464:	e0bffc17 	ldw	r2,-16(fp)
 400f468:	10800017 	ldw	r2,0(r2)
 400f46c:	e0bffd15 	stw	r2,-12(fp)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)pevents_wait;       /* Store ptr to ECBs in TCB        */

    pevents =  pevents_wait;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                               /* Put task in waiting lists       */
 400f470:	e0bffd17 	ldw	r2,-12(fp)
 400f474:	103fde1e 	bne	r2,zero,400f3f0 <__alt_mem_onchip_memory2_0+0xfbfef3f0>
        pevent->OSEventGrp                   |= OSTCBCur->OSTCBBitY;
        pevents++;
        pevent = *pevents;
    }

    y             =  OSTCBCur->OSTCBY;            /* Task no longer ready                              */
 400f478:	d0a73217 	ldw	r2,-25400(gp)
 400f47c:	10800d03 	ldbu	r2,52(r2)
 400f480:	e0bffe05 	stb	r2,-8(fp)
    OSRdyTbl[y]  &= ~OSTCBCur->OSTCBBitX;
 400f484:	e0fffe03 	ldbu	r3,-8(fp)
 400f488:	e13ffe03 	ldbu	r4,-8(fp)
 400f48c:	d0a72f44 	addi	r2,gp,-25411
 400f490:	2085883a 	add	r2,r4,r2
 400f494:	10800003 	ldbu	r2,0(r2)
 400f498:	1009883a 	mov	r4,r2
 400f49c:	d0a73217 	ldw	r2,-25400(gp)
 400f4a0:	10800d43 	ldbu	r2,53(r2)
 400f4a4:	0084303a 	nor	r2,zero,r2
 400f4a8:	2084703a 	and	r2,r4,r2
 400f4ac:	1009883a 	mov	r4,r2
 400f4b0:	d0a72f44 	addi	r2,gp,-25411
 400f4b4:	1885883a 	add	r2,r3,r2
 400f4b8:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
 400f4bc:	e0fffe03 	ldbu	r3,-8(fp)
 400f4c0:	d0a72f44 	addi	r2,gp,-25411
 400f4c4:	1885883a 	add	r2,r3,r2
 400f4c8:	10800003 	ldbu	r2,0(r2)
 400f4cc:	10803fcc 	andi	r2,r2,255
 400f4d0:	1000071e 	bne	r2,zero,400f4f0 <OS_EventTaskWaitMulti+0x13c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;         /* Clear event grp bit if this was only task pending */
 400f4d4:	d0a73217 	ldw	r2,-25400(gp)
 400f4d8:	10800d83 	ldbu	r2,54(r2)
 400f4dc:	0084303a 	nor	r2,zero,r2
 400f4e0:	1007883a 	mov	r3,r2
 400f4e4:	d0a72f03 	ldbu	r2,-25412(gp)
 400f4e8:	1884703a 	and	r2,r3,r2
 400f4ec:	d0a72f05 	stb	r2,-25412(gp)
    }
}
 400f4f0:	0001883a 	nop
 400f4f4:	e037883a 	mov	sp,fp
 400f4f8:	df000017 	ldw	fp,0(sp)
 400f4fc:	dec00104 	addi	sp,sp,4
 400f500:	f800283a 	ret

0400f504 <OS_EventTaskRemove>:
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventTaskRemove (OS_TCB   *ptcb,
                          OS_EVENT *pevent)
{
 400f504:	defffc04 	addi	sp,sp,-16
 400f508:	df000315 	stw	fp,12(sp)
 400f50c:	df000304 	addi	fp,sp,12
 400f510:	e13ffe15 	stw	r4,-8(fp)
 400f514:	e17fff15 	stw	r5,-4(fp)
    INT8U  y;


    y                       =  ptcb->OSTCBY;
 400f518:	e0bffe17 	ldw	r2,-8(fp)
 400f51c:	10800d03 	ldbu	r2,52(r2)
 400f520:	e0bffd05 	stb	r2,-12(fp)
    pevent->OSEventTbl[y]  &= ~ptcb->OSTCBBitX;         /* Remove task from wait list                  */
 400f524:	e0bffd03 	ldbu	r2,-12(fp)
 400f528:	e0fffd03 	ldbu	r3,-12(fp)
 400f52c:	e13fff17 	ldw	r4,-4(fp)
 400f530:	20c7883a 	add	r3,r4,r3
 400f534:	18c002c4 	addi	r3,r3,11
 400f538:	18c00003 	ldbu	r3,0(r3)
 400f53c:	1809883a 	mov	r4,r3
 400f540:	e0fffe17 	ldw	r3,-8(fp)
 400f544:	18c00d43 	ldbu	r3,53(r3)
 400f548:	00c6303a 	nor	r3,zero,r3
 400f54c:	20c6703a 	and	r3,r4,r3
 400f550:	1809883a 	mov	r4,r3
 400f554:	e0ffff17 	ldw	r3,-4(fp)
 400f558:	1885883a 	add	r2,r3,r2
 400f55c:	108002c4 	addi	r2,r2,11
 400f560:	11000005 	stb	r4,0(r2)
    if (pevent->OSEventTbl[y] == 0) {
 400f564:	e0bffd03 	ldbu	r2,-12(fp)
 400f568:	e0ffff17 	ldw	r3,-4(fp)
 400f56c:	1885883a 	add	r2,r3,r2
 400f570:	108002c4 	addi	r2,r2,11
 400f574:	10800003 	ldbu	r2,0(r2)
 400f578:	10803fcc 	andi	r2,r2,255
 400f57c:	10000a1e 	bne	r2,zero,400f5a8 <OS_EventTaskRemove+0xa4>
        pevent->OSEventGrp &= ~ptcb->OSTCBBitY;
 400f580:	e0bfff17 	ldw	r2,-4(fp)
 400f584:	10800283 	ldbu	r2,10(r2)
 400f588:	1007883a 	mov	r3,r2
 400f58c:	e0bffe17 	ldw	r2,-8(fp)
 400f590:	10800d83 	ldbu	r2,54(r2)
 400f594:	0084303a 	nor	r2,zero,r2
 400f598:	1884703a 	and	r2,r3,r2
 400f59c:	1007883a 	mov	r3,r2
 400f5a0:	e0bfff17 	ldw	r2,-4(fp)
 400f5a4:	10c00285 	stb	r3,10(r2)
    }
}
 400f5a8:	0001883a 	nop
 400f5ac:	e037883a 	mov	sp,fp
 400f5b0:	df000017 	ldw	fp,0(sp)
 400f5b4:	dec00104 	addi	sp,sp,4
 400f5b8:	f800283a 	ret

0400f5bc <OS_EventTaskRemoveMulti>:
*********************************************************************************************************
*/
#if ((OS_EVENT_EN) && (OS_EVENT_MULTI_EN > 0))
void  OS_EventTaskRemoveMulti (OS_TCB    *ptcb,
                               OS_EVENT **pevents_multi)
{
 400f5bc:	defffa04 	addi	sp,sp,-24
 400f5c0:	df000515 	stw	fp,20(sp)
 400f5c4:	df000504 	addi	fp,sp,20
 400f5c8:	e13ffe15 	stw	r4,-8(fp)
 400f5cc:	e17fff15 	stw	r5,-4(fp)
    INT16U     bity;
    INT16U     bitx;
#endif


    y       =  ptcb->OSTCBY;
 400f5d0:	e0bffe17 	ldw	r2,-8(fp)
 400f5d4:	10800d03 	ldbu	r2,52(r2)
 400f5d8:	e0bffd05 	stb	r2,-12(fp)
    bity    =  ptcb->OSTCBBitY;
 400f5dc:	e0bffe17 	ldw	r2,-8(fp)
 400f5e0:	10800d83 	ldbu	r2,54(r2)
 400f5e4:	e0bffd45 	stb	r2,-11(fp)
    bitx    =  ptcb->OSTCBBitX;
 400f5e8:	e0bffe17 	ldw	r2,-8(fp)
 400f5ec:	10800d43 	ldbu	r2,53(r2)
 400f5f0:	e0bffd85 	stb	r2,-10(fp)
    pevents =  pevents_multi;
 400f5f4:	e0bfff17 	ldw	r2,-4(fp)
 400f5f8:	e0bffb15 	stw	r2,-20(fp)
    pevent  = *pevents;
 400f5fc:	e0bffb17 	ldw	r2,-20(fp)
 400f600:	10800017 	ldw	r2,0(r2)
 400f604:	e0bffc15 	stw	r2,-16(fp)
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 400f608:	00002506 	br	400f6a0 <OS_EventTaskRemoveMulti+0xe4>
        pevent->OSEventTbl[y]  &= ~bitx;
 400f60c:	e0bffd03 	ldbu	r2,-12(fp)
 400f610:	e0fffd03 	ldbu	r3,-12(fp)
 400f614:	e13ffc17 	ldw	r4,-16(fp)
 400f618:	20c7883a 	add	r3,r4,r3
 400f61c:	18c002c4 	addi	r3,r3,11
 400f620:	18c00003 	ldbu	r3,0(r3)
 400f624:	1809883a 	mov	r4,r3
 400f628:	e0fffd83 	ldbu	r3,-10(fp)
 400f62c:	00c6303a 	nor	r3,zero,r3
 400f630:	20c6703a 	and	r3,r4,r3
 400f634:	1809883a 	mov	r4,r3
 400f638:	e0fffc17 	ldw	r3,-16(fp)
 400f63c:	1885883a 	add	r2,r3,r2
 400f640:	108002c4 	addi	r2,r2,11
 400f644:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y] == 0) {
 400f648:	e0bffd03 	ldbu	r2,-12(fp)
 400f64c:	e0fffc17 	ldw	r3,-16(fp)
 400f650:	1885883a 	add	r2,r3,r2
 400f654:	108002c4 	addi	r2,r2,11
 400f658:	10800003 	ldbu	r2,0(r2)
 400f65c:	10803fcc 	andi	r2,r2,255
 400f660:	1000091e 	bne	r2,zero,400f688 <OS_EventTaskRemoveMulti+0xcc>
            pevent->OSEventGrp &= ~bity;
 400f664:	e0bffc17 	ldw	r2,-16(fp)
 400f668:	10800283 	ldbu	r2,10(r2)
 400f66c:	1007883a 	mov	r3,r2
 400f670:	e0bffd43 	ldbu	r2,-11(fp)
 400f674:	0084303a 	nor	r2,zero,r2
 400f678:	1884703a 	and	r2,r3,r2
 400f67c:	1007883a 	mov	r3,r2
 400f680:	e0bffc17 	ldw	r2,-16(fp)
 400f684:	10c00285 	stb	r3,10(r2)
        }
        pevents++;
 400f688:	e0bffb17 	ldw	r2,-20(fp)
 400f68c:	10800104 	addi	r2,r2,4
 400f690:	e0bffb15 	stw	r2,-20(fp)
        pevent = *pevents;
 400f694:	e0bffb17 	ldw	r2,-20(fp)
 400f698:	10800017 	ldw	r2,0(r2)
 400f69c:	e0bffc15 	stw	r2,-16(fp)
    y       =  ptcb->OSTCBY;
    bity    =  ptcb->OSTCBBitY;
    bitx    =  ptcb->OSTCBBitX;
    pevents =  pevents_multi;
    pevent  = *pevents;
    while (pevent != (OS_EVENT *)0) {                   /* Remove task from all events' wait lists     */
 400f6a0:	e0bffc17 	ldw	r2,-16(fp)
 400f6a4:	103fd91e 	bne	r2,zero,400f60c <__alt_mem_onchip_memory2_0+0xfbfef60c>
            pevent->OSEventGrp &= ~bity;
        }
        pevents++;
        pevent = *pevents;
    }
}
 400f6a8:	0001883a 	nop
 400f6ac:	e037883a 	mov	sp,fp
 400f6b0:	df000017 	ldw	fp,0(sp)
 400f6b4:	dec00104 	addi	sp,sp,4
 400f6b8:	f800283a 	ret

0400f6bc <OS_EventWaitListInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/
#if (OS_EVENT_EN)
void  OS_EventWaitListInit (OS_EVENT *pevent)
{
 400f6bc:	defffc04 	addi	sp,sp,-16
 400f6c0:	df000315 	stw	fp,12(sp)
 400f6c4:	df000304 	addi	fp,sp,12
 400f6c8:	e13fff15 	stw	r4,-4(fp)
    INT16U *ptbl;
#endif
    INT8U   i;


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
 400f6cc:	e0bfff17 	ldw	r2,-4(fp)
 400f6d0:	10000285 	stb	zero,10(r2)
    ptbl               = &pevent->OSEventTbl[0];
 400f6d4:	e0bfff17 	ldw	r2,-4(fp)
 400f6d8:	108002c4 	addi	r2,r2,11
 400f6dc:	e0bffd15 	stw	r2,-12(fp)

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 400f6e0:	e03ffe05 	stb	zero,-8(fp)
 400f6e4:	00000706 	br	400f704 <OS_EventWaitListInit+0x48>
        *ptbl++ = 0;
 400f6e8:	e0bffd17 	ldw	r2,-12(fp)
 400f6ec:	10c00044 	addi	r3,r2,1
 400f6f0:	e0fffd15 	stw	r3,-12(fp)
 400f6f4:	10000005 	stb	zero,0(r2)


    pevent->OSEventGrp = 0;                      /* No task waiting on event                           */
    ptbl               = &pevent->OSEventTbl[0];

    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 400f6f8:	e0bffe03 	ldbu	r2,-8(fp)
 400f6fc:	10800044 	addi	r2,r2,1
 400f700:	e0bffe05 	stb	r2,-8(fp)
 400f704:	e0bffe03 	ldbu	r2,-8(fp)
 400f708:	108000f0 	cmpltui	r2,r2,3
 400f70c:	103ff61e 	bne	r2,zero,400f6e8 <__alt_mem_onchip_memory2_0+0xfbfef6e8>
        *ptbl++ = 0;
    }
}
 400f710:	0001883a 	nop
 400f714:	e037883a 	mov	sp,fp
 400f718:	df000017 	ldw	fp,0(sp)
 400f71c:	dec00104 	addi	sp,sp,4
 400f720:	f800283a 	ret

0400f724 <OS_InitEventList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitEventList (void)
{
 400f724:	defffb04 	addi	sp,sp,-20
 400f728:	dfc00415 	stw	ra,16(sp)
 400f72c:	df000315 	stw	fp,12(sp)
 400f730:	df000304 	addi	fp,sp,12
    INT16U     i;
    OS_EVENT  *pevent1;
    OS_EVENT  *pevent2;


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
 400f734:	0142d004 	movi	r5,2880
 400f738:	010100b4 	movhi	r4,1026
 400f73c:	2119ae04 	addi	r4,r4,26296
 400f740:	400fa9c0 	call	400fa9c <OS_MemClr>
    pevent1 = &OSEventTbl[0];
 400f744:	008100b4 	movhi	r2,1026
 400f748:	1099ae04 	addi	r2,r2,26296
 400f74c:	e0bffe15 	stw	r2,-8(fp)
    pevent2 = &OSEventTbl[1];
 400f750:	008100b4 	movhi	r2,1026
 400f754:	1099ba04 	addi	r2,r2,26344
 400f758:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 400f75c:	e03ffd0d 	sth	zero,-12(fp)
 400f760:	00001306 	br	400f7b0 <OS_InitEventList+0x8c>
        pevent1->OSEventType    = OS_EVENT_TYPE_UNUSED;
 400f764:	e0bffe17 	ldw	r2,-8(fp)
 400f768:	10000005 	stb	zero,0(r2)
        pevent1->OSEventPtr     = pevent2;
 400f76c:	e0bffe17 	ldw	r2,-8(fp)
 400f770:	e0ffff17 	ldw	r3,-4(fp)
 400f774:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent1->OSEventName[0] = '?';                      /* Unknown name                            */
 400f778:	e0bffe17 	ldw	r2,-8(fp)
 400f77c:	00c00fc4 	movi	r3,63
 400f780:	10c00385 	stb	r3,14(r2)
        pevent1->OSEventName[1] = OS_ASCII_NUL;
 400f784:	e0bffe17 	ldw	r2,-8(fp)
 400f788:	100003c5 	stb	zero,15(r2)
#endif
        pevent1++;
 400f78c:	e0bffe17 	ldw	r2,-8(fp)
 400f790:	10800c04 	addi	r2,r2,48
 400f794:	e0bffe15 	stw	r2,-8(fp)
        pevent2++;
 400f798:	e0bfff17 	ldw	r2,-4(fp)
 400f79c:	10800c04 	addi	r2,r2,48
 400f7a0:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSEventTbl[0], sizeof(OSEventTbl)); /* Clear the event table                   */
    pevent1 = &OSEventTbl[0];
    pevent2 = &OSEventTbl[1];
    for (i = 0; i < (OS_MAX_EVENTS - 1); i++) {             /* Init. list of free EVENT control blocks */
 400f7a4:	e0bffd0b 	ldhu	r2,-12(fp)
 400f7a8:	10800044 	addi	r2,r2,1
 400f7ac:	e0bffd0d 	sth	r2,-12(fp)
 400f7b0:	e0bffd0b 	ldhu	r2,-12(fp)
 400f7b4:	10800ef0 	cmpltui	r2,r2,59
 400f7b8:	103fea1e 	bne	r2,zero,400f764 <__alt_mem_onchip_memory2_0+0xfbfef764>
        pevent1->OSEventName[1] = OS_ASCII_NUL;
#endif
        pevent1++;
        pevent2++;
    }
    pevent1->OSEventType            = OS_EVENT_TYPE_UNUSED;
 400f7bc:	e0bffe17 	ldw	r2,-8(fp)
 400f7c0:	10000005 	stb	zero,0(r2)
    pevent1->OSEventPtr             = (OS_EVENT *)0;
 400f7c4:	e0bffe17 	ldw	r2,-8(fp)
 400f7c8:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
    pevent1->OSEventName[0]         = '?';
 400f7cc:	e0bffe17 	ldw	r2,-8(fp)
 400f7d0:	00c00fc4 	movi	r3,63
 400f7d4:	10c00385 	stb	r3,14(r2)
    pevent1->OSEventName[1]         = OS_ASCII_NUL;
 400f7d8:	e0bffe17 	ldw	r2,-8(fp)
 400f7dc:	100003c5 	stb	zero,15(r2)
#endif
    OSEventFreeList                 = &OSEventTbl[0];
 400f7e0:	008100b4 	movhi	r2,1026
 400f7e4:	1099ae04 	addi	r2,r2,26296
 400f7e8:	d0a73015 	stw	r2,-25408(gp)
    OSEventFreeList->OSEventName[0] = '?';                  /* Unknown name                            */
    OSEventFreeList->OSEventName[1] = OS_ASCII_NUL;
#endif
#endif
#endif
}
 400f7ec:	0001883a 	nop
 400f7f0:	e037883a 	mov	sp,fp
 400f7f4:	dfc00117 	ldw	ra,4(sp)
 400f7f8:	df000017 	ldw	fp,0(sp)
 400f7fc:	dec00204 	addi	sp,sp,8
 400f800:	f800283a 	ret

0400f804 <OS_InitMisc>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitMisc (void)
{
 400f804:	deffff04 	addi	sp,sp,-4
 400f808:	df000015 	stw	fp,0(sp)
 400f80c:	d839883a 	mov	fp,sp
#if OS_TIME_GET_SET_EN > 0
    OSTime        = 0L;                                    /* Clear the 32-bit system clock            */
 400f810:	d0273315 	stw	zero,-25396(gp)
#endif

    OSIntNesting  = 0;                                     /* Clear the interrupt nesting counter      */
 400f814:	d0273105 	stb	zero,-25404(gp)
    OSLockNesting = 0;                                     /* Clear the scheduling lock counter        */
 400f818:	d0272305 	stb	zero,-25460(gp)

    OSTaskCtr     = 0;                                     /* Clear the number of tasks                */
 400f81c:	d0272b45 	stb	zero,-25427(gp)

    OSRunning     = OS_FALSE;                              /* Indicate that multitasking not started   */
 400f820:	d0272345 	stb	zero,-25459(gp)

    OSCtxSwCtr    = 0;                                     /* Clear the context switch counter         */
 400f824:	d0272815 	stw	zero,-25440(gp)
    OSIdleCtr     = 0L;                                    /* Clear the 32-bit idle counter            */
 400f828:	d0272415 	stw	zero,-25456(gp)

#if OS_TASK_STAT_EN > 0
    OSIdleCtrRun  = 0L;
 400f82c:	d0273615 	stw	zero,-25384(gp)
    OSIdleCtrMax  = 0L;
 400f830:	d0272915 	stw	zero,-25436(gp)
    OSStatRdy     = OS_FALSE;                              /* Statistic task is not ready              */
 400f834:	d0273505 	stb	zero,-25388(gp)
#endif
}
 400f838:	0001883a 	nop
 400f83c:	e037883a 	mov	sp,fp
 400f840:	df000017 	ldw	fp,0(sp)
 400f844:	dec00104 	addi	sp,sp,4
 400f848:	f800283a 	ret

0400f84c <OS_InitRdyList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitRdyList (void)
{
 400f84c:	defffd04 	addi	sp,sp,-12
 400f850:	df000215 	stw	fp,8(sp)
 400f854:	df000204 	addi	fp,sp,8
#else
    INT16U  *prdytbl;
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
 400f858:	d0272f05 	stb	zero,-25412(gp)
    prdytbl       = &OSRdyTbl[0];
 400f85c:	d0a72f44 	addi	r2,gp,-25411
 400f860:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 400f864:	e03ffe05 	stb	zero,-8(fp)
 400f868:	00000706 	br	400f888 <OS_InitRdyList+0x3c>
        *prdytbl++ = 0;
 400f86c:	e0bfff17 	ldw	r2,-4(fp)
 400f870:	10c00044 	addi	r3,r2,1
 400f874:	e0ffff15 	stw	r3,-4(fp)
 400f878:	10000005 	stb	zero,0(r2)
#endif


    OSRdyGrp      = 0;                                     /* Clear the ready list                     */
    prdytbl       = &OSRdyTbl[0];
    for (i = 0; i < OS_RDY_TBL_SIZE; i++) {
 400f87c:	e0bffe03 	ldbu	r2,-8(fp)
 400f880:	10800044 	addi	r2,r2,1
 400f884:	e0bffe05 	stb	r2,-8(fp)
 400f888:	e0bffe03 	ldbu	r2,-8(fp)
 400f88c:	108000f0 	cmpltui	r2,r2,3
 400f890:	103ff61e 	bne	r2,zero,400f86c <__alt_mem_onchip_memory2_0+0xfbfef86c>
        *prdytbl++ = 0;
    }

    OSPrioCur     = 0;
 400f894:	d0272545 	stb	zero,-25451(gp)
    OSPrioHighRdy = 0;
 400f898:	d0272505 	stb	zero,-25452(gp)

    OSTCBHighRdy  = (OS_TCB *)0;
 400f89c:	d0272d15 	stw	zero,-25420(gp)
    OSTCBCur      = (OS_TCB *)0;
 400f8a0:	d0273215 	stw	zero,-25400(gp)
}
 400f8a4:	0001883a 	nop
 400f8a8:	e037883a 	mov	sp,fp
 400f8ac:	df000017 	ldw	fp,0(sp)
 400f8b0:	dec00104 	addi	sp,sp,4
 400f8b4:	f800283a 	ret

0400f8b8 <OS_InitTaskIdle>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTaskIdle (void)
{
 400f8b8:	defff804 	addi	sp,sp,-32
 400f8bc:	dfc00715 	stw	ra,28(sp)
 400f8c0:	df000615 	stw	fp,24(sp)
 400f8c4:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskIdle,
 400f8c8:	008000c4 	movi	r2,3
 400f8cc:	d8800415 	stw	r2,16(sp)
 400f8d0:	d8000315 	stw	zero,12(sp)
 400f8d4:	00808004 	movi	r2,512
 400f8d8:	d8800215 	stw	r2,8(sp)
 400f8dc:	008100b4 	movhi	r2,1026
 400f8e0:	1097ae04 	addi	r2,r2,24248
 400f8e4:	d8800115 	stw	r2,4(sp)
 400f8e8:	00bfffd4 	movui	r2,65535
 400f8ec:	d8800015 	stw	r2,0(sp)
 400f8f0:	01c00504 	movi	r7,20
 400f8f4:	018100b4 	movhi	r6,1026
 400f8f8:	3199ad04 	addi	r6,r6,26292
 400f8fc:	000b883a 	mov	r5,zero
 400f900:	01010074 	movhi	r4,1025
 400f904:	213f5904 	addi	r4,r4,-668
 400f908:	4014eec0 	call	4014eec <OSTaskCreateExt>
                       OS_TASK_IDLE_PRIO);
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"uC/OS-II Idle", &err);
 400f90c:	e1bfff04 	addi	r6,fp,-4
 400f910:	014100b4 	movhi	r5,1026
 400f914:	29630404 	addi	r5,r5,-29680
 400f918:	01000504 	movi	r4,20
 400f91c:	40156fc0 	call	40156fc <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_IDLE_PRIO, (INT8U *)"OS-Idle", &err);
#endif
#endif
}
 400f920:	0001883a 	nop
 400f924:	e037883a 	mov	sp,fp
 400f928:	dfc00117 	ldw	ra,4(sp)
 400f92c:	df000017 	ldw	fp,0(sp)
 400f930:	dec00204 	addi	sp,sp,8
 400f934:	f800283a 	ret

0400f938 <OS_InitTaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
static  void  OS_InitTaskStat (void)
{
 400f938:	defff804 	addi	sp,sp,-32
 400f93c:	dfc00715 	stw	ra,28(sp)
 400f940:	df000615 	stw	fp,24(sp)
 400f944:	df000604 	addi	fp,sp,24
#endif


#if OS_TASK_CREATE_EXT_EN > 0
    #if OS_STK_GROWTH == 1
    (void)OSTaskCreateExt(OS_TaskStat,
 400f948:	008000c4 	movi	r2,3
 400f94c:	d8800415 	stw	r2,16(sp)
 400f950:	d8000315 	stw	zero,12(sp)
 400f954:	00808004 	movi	r2,512
 400f958:	d8800215 	stw	r2,8(sp)
 400f95c:	008100b4 	movhi	r2,1026
 400f960:	10953604 	addi	r2,r2,21720
 400f964:	d8800115 	stw	r2,4(sp)
 400f968:	00bfff94 	movui	r2,65534
 400f96c:	d8800015 	stw	r2,0(sp)
 400f970:	01c004c4 	movi	r7,19
 400f974:	018100b4 	movhi	r6,1026
 400f978:	31973504 	addi	r6,r6,23764
 400f97c:	000b883a 	mov	r5,zero
 400f980:	01010074 	movhi	r4,1025
 400f984:	213f7004 	addi	r4,r4,-576
 400f988:	4014eec0 	call	4014eec <OSTaskCreateExt>
                       OS_TASK_STAT_PRIO);                             /* One higher than the idle task  */
    #endif
#endif

#if OS_TASK_NAME_SIZE > 14
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"uC/OS-II Stat", &err);
 400f98c:	e1bfff04 	addi	r6,fp,-4
 400f990:	014100b4 	movhi	r5,1026
 400f994:	29630804 	addi	r5,r5,-29664
 400f998:	010004c4 	movi	r4,19
 400f99c:	40156fc0 	call	40156fc <OSTaskNameSet>
#else
#if OS_TASK_NAME_SIZE > 7
    OSTaskNameSet(OS_TASK_STAT_PRIO, (INT8U *)"OS-Stat", &err);
#endif
#endif
}
 400f9a0:	0001883a 	nop
 400f9a4:	e037883a 	mov	sp,fp
 400f9a8:	dfc00117 	ldw	ra,4(sp)
 400f9ac:	df000017 	ldw	fp,0(sp)
 400f9b0:	dec00204 	addi	sp,sp,8
 400f9b4:	f800283a 	ret

0400f9b8 <OS_InitTCBList>:
* Returns    : none
*********************************************************************************************************
*/

static  void  OS_InitTCBList (void)
{
 400f9b8:	defffb04 	addi	sp,sp,-20
 400f9bc:	dfc00415 	stw	ra,16(sp)
 400f9c0:	df000315 	stw	fp,12(sp)
 400f9c4:	df000304 	addi	fp,sp,12
    INT8U    i;
    OS_TCB  *ptcb1;
    OS_TCB  *ptcb2;


    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
 400f9c8:	01414404 	movi	r5,1296
 400f9cc:	010100b4 	movhi	r4,1026
 400f9d0:	211c7e04 	addi	r4,r4,29176
 400f9d4:	400fa9c0 	call	400fa9c <OS_MemClr>
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
 400f9d8:	01401504 	movi	r5,84
 400f9dc:	010100b4 	movhi	r4,1026
 400f9e0:	211dc204 	addi	r4,r4,30472
 400f9e4:	400fa9c0 	call	400fa9c <OS_MemClr>
    ptcb1 = &OSTCBTbl[0];
 400f9e8:	008100b4 	movhi	r2,1026
 400f9ec:	109c7e04 	addi	r2,r2,29176
 400f9f0:	e0bffe15 	stw	r2,-8(fp)
    ptcb2 = &OSTCBTbl[1];
 400f9f4:	008100b4 	movhi	r2,1026
 400f9f8:	109c9904 	addi	r2,r2,29284
 400f9fc:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 400fa00:	e03ffd05 	stb	zero,-12(fp)
 400fa04:	00001106 	br	400fa4c <OS_InitTCBList+0x94>
        ptcb1->OSTCBNext = ptcb2;
 400fa08:	e0bffe17 	ldw	r2,-8(fp)
 400fa0c:	e0ffff17 	ldw	r3,-4(fp)
 400fa10:	10c00515 	stw	r3,20(r2)
#if OS_TASK_NAME_SIZE > 1
        ptcb1->OSTCBTaskName[0] = '?';                           /* Unknown name                       */
 400fa14:	e0bffe17 	ldw	r2,-8(fp)
 400fa18:	00c00fc4 	movi	r3,63
 400fa1c:	10c01305 	stb	r3,76(r2)
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 400fa20:	e0bffe17 	ldw	r2,-8(fp)
 400fa24:	10001345 	stb	zero,77(r2)
#endif
        ptcb1++;
 400fa28:	e0bffe17 	ldw	r2,-8(fp)
 400fa2c:	10801b04 	addi	r2,r2,108
 400fa30:	e0bffe15 	stw	r2,-8(fp)
        ptcb2++;
 400fa34:	e0bfff17 	ldw	r2,-4(fp)
 400fa38:	10801b04 	addi	r2,r2,108
 400fa3c:	e0bfff15 	stw	r2,-4(fp)

    OS_MemClr((INT8U *)&OSTCBTbl[0],     sizeof(OSTCBTbl));      /* Clear all the TCBs                 */
    OS_MemClr((INT8U *)&OSTCBPrioTbl[0], sizeof(OSTCBPrioTbl));  /* Clear the priority table           */
    ptcb1 = &OSTCBTbl[0];
    ptcb2 = &OSTCBTbl[1];
    for (i = 0; i < (OS_MAX_TASKS + OS_N_SYS_TASKS - 1); i++) {  /* Init. list of free TCBs            */
 400fa40:	e0bffd03 	ldbu	r2,-12(fp)
 400fa44:	10800044 	addi	r2,r2,1
 400fa48:	e0bffd05 	stb	r2,-12(fp)
 400fa4c:	e0bffd03 	ldbu	r2,-12(fp)
 400fa50:	108002f0 	cmpltui	r2,r2,11
 400fa54:	103fec1e 	bne	r2,zero,400fa08 <__alt_mem_onchip_memory2_0+0xfbfefa08>
        ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
#endif
        ptcb1++;
        ptcb2++;
    }
    ptcb1->OSTCBNext = (OS_TCB *)0;                              /* Last OS_TCB                        */
 400fa58:	e0bffe17 	ldw	r2,-8(fp)
 400fa5c:	10000515 	stw	zero,20(r2)
#if OS_TASK_NAME_SIZE > 1
    ptcb1->OSTCBTaskName[0] = '?';                               /* Unknown name                       */
 400fa60:	e0bffe17 	ldw	r2,-8(fp)
 400fa64:	00c00fc4 	movi	r3,63
 400fa68:	10c01305 	stb	r3,76(r2)
    ptcb1->OSTCBTaskName[1] = OS_ASCII_NUL;
 400fa6c:	e0bffe17 	ldw	r2,-8(fp)
 400fa70:	10001345 	stb	zero,77(r2)
#endif
    OSTCBList               = (OS_TCB *)0;                       /* TCB lists initializations          */
 400fa74:	d0272615 	stw	zero,-25448(gp)
    OSTCBFreeList           = &OSTCBTbl[0];
 400fa78:	008100b4 	movhi	r2,1026
 400fa7c:	109c7e04 	addi	r2,r2,29176
 400fa80:	d0a72a15 	stw	r2,-25432(gp)
}
 400fa84:	0001883a 	nop
 400fa88:	e037883a 	mov	sp,fp
 400fa8c:	dfc00117 	ldw	ra,4(sp)
 400fa90:	df000017 	ldw	fp,0(sp)
 400fa94:	dec00204 	addi	sp,sp,8
 400fa98:	f800283a 	ret

0400fa9c <OS_MemClr>:
*                 of the alignment of the destination.
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
 400fa9c:	defffd04 	addi	sp,sp,-12
 400faa0:	df000215 	stw	fp,8(sp)
 400faa4:	df000204 	addi	fp,sp,8
 400faa8:	e13ffe15 	stw	r4,-8(fp)
 400faac:	2805883a 	mov	r2,r5
 400fab0:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
 400fab4:	00000706 	br	400fad4 <OS_MemClr+0x38>
        *pdest++ = (INT8U)0;
 400fab8:	e0bffe17 	ldw	r2,-8(fp)
 400fabc:	10c00044 	addi	r3,r2,1
 400fac0:	e0fffe15 	stw	r3,-8(fp)
 400fac4:	10000005 	stb	zero,0(r2)
        size--;
 400fac8:	e0bfff0b 	ldhu	r2,-4(fp)
 400facc:	10bfffc4 	addi	r2,r2,-1
 400fad0:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemClr (INT8U *pdest, INT16U size)
{
    while (size > 0) {
 400fad4:	e0bfff0b 	ldhu	r2,-4(fp)
 400fad8:	103ff71e 	bne	r2,zero,400fab8 <__alt_mem_onchip_memory2_0+0xfbfefab8>
        *pdest++ = (INT8U)0;
        size--;
    }
}
 400fadc:	0001883a 	nop
 400fae0:	e037883a 	mov	sp,fp
 400fae4:	df000017 	ldw	fp,0(sp)
 400fae8:	dec00104 	addi	sp,sp,4
 400faec:	f800283a 	ret

0400faf0 <OS_MemCopy>:
*                 of the alignment of the source and destination.
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
 400faf0:	defffc04 	addi	sp,sp,-16
 400faf4:	df000315 	stw	fp,12(sp)
 400faf8:	df000304 	addi	fp,sp,12
 400fafc:	e13ffd15 	stw	r4,-12(fp)
 400fb00:	e17ffe15 	stw	r5,-8(fp)
 400fb04:	3005883a 	mov	r2,r6
 400fb08:	e0bfff0d 	sth	r2,-4(fp)
    while (size > 0) {
 400fb0c:	00000b06 	br	400fb3c <OS_MemCopy+0x4c>
        *pdest++ = *psrc++;
 400fb10:	e0bffd17 	ldw	r2,-12(fp)
 400fb14:	10c00044 	addi	r3,r2,1
 400fb18:	e0fffd15 	stw	r3,-12(fp)
 400fb1c:	e0fffe17 	ldw	r3,-8(fp)
 400fb20:	19000044 	addi	r4,r3,1
 400fb24:	e13ffe15 	stw	r4,-8(fp)
 400fb28:	18c00003 	ldbu	r3,0(r3)
 400fb2c:	10c00005 	stb	r3,0(r2)
        size--;
 400fb30:	e0bfff0b 	ldhu	r2,-4(fp)
 400fb34:	10bfffc4 	addi	r2,r2,-1
 400fb38:	e0bfff0d 	sth	r2,-4(fp)
*********************************************************************************************************
*/

void  OS_MemCopy (INT8U *pdest, INT8U *psrc, INT16U size)
{
    while (size > 0) {
 400fb3c:	e0bfff0b 	ldhu	r2,-4(fp)
 400fb40:	103ff31e 	bne	r2,zero,400fb10 <__alt_mem_onchip_memory2_0+0xfbfefb10>
        *pdest++ = *psrc++;
        size--;
    }
}
 400fb44:	0001883a 	nop
 400fb48:	e037883a 	mov	sp,fp
 400fb4c:	df000017 	ldw	fp,0(sp)
 400fb50:	dec00104 	addi	sp,sp,4
 400fb54:	f800283a 	ret

0400fb58 <OS_Sched>:
*              2) Rescheduling is prevented when the scheduler is locked (see OS_SchedLock())
*********************************************************************************************************
*/

void  OS_Sched (void)
{
 400fb58:	defffb04 	addi	sp,sp,-20
 400fb5c:	dfc00415 	stw	ra,16(sp)
 400fb60:	df000315 	stw	fp,12(sp)
 400fb64:	df000304 	addi	fp,sp,12
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 400fb68:	e03ffd15 	stw	zero,-12(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400fb6c:	0005303a 	rdctl	r2,status
 400fb70:	e0bfff15 	stw	r2,-4(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400fb74:	e0ffff17 	ldw	r3,-4(fp)
 400fb78:	00bfff84 	movi	r2,-2
 400fb7c:	1884703a 	and	r2,r3,r2
 400fb80:	1001703a 	wrctl	status,r2
  
  return context;
 400fb84:	e0bfff17 	ldw	r2,-4(fp)
#endif



    OS_ENTER_CRITICAL();
 400fb88:	e0bffd15 	stw	r2,-12(fp)
    if (OSIntNesting == 0) {                           /* Schedule only if all ISRs done and ...       */
 400fb8c:	d0a73103 	ldbu	r2,-25404(gp)
 400fb90:	10803fcc 	andi	r2,r2,255
 400fb94:	10001a1e 	bne	r2,zero,400fc00 <OS_Sched+0xa8>
        if (OSLockNesting == 0) {                      /* ... scheduler is not locked                  */
 400fb98:	d0a72303 	ldbu	r2,-25460(gp)
 400fb9c:	10803fcc 	andi	r2,r2,255
 400fba0:	1000171e 	bne	r2,zero,400fc00 <OS_Sched+0xa8>
            OS_SchedNew();
 400fba4:	400fc280 	call	400fc28 <OS_SchedNew>
            if (OSPrioHighRdy != OSPrioCur) {          /* No Ctx Sw if current task is highest rdy     */
 400fba8:	d0e72503 	ldbu	r3,-25452(gp)
 400fbac:	d0a72543 	ldbu	r2,-25451(gp)
 400fbb0:	18c03fcc 	andi	r3,r3,255
 400fbb4:	10803fcc 	andi	r2,r2,255
 400fbb8:	18801126 	beq	r3,r2,400fc00 <OS_Sched+0xa8>
                OSTCBHighRdy = OSTCBPrioTbl[OSPrioHighRdy];
 400fbbc:	d0a72503 	ldbu	r2,-25452(gp)
 400fbc0:	10c03fcc 	andi	r3,r2,255
 400fbc4:	008100b4 	movhi	r2,1026
 400fbc8:	109dc204 	addi	r2,r2,30472
 400fbcc:	18c7883a 	add	r3,r3,r3
 400fbd0:	18c7883a 	add	r3,r3,r3
 400fbd4:	10c5883a 	add	r2,r2,r3
 400fbd8:	10800017 	ldw	r2,0(r2)
 400fbdc:	d0a72d15 	stw	r2,-25420(gp)
#if OS_TASK_PROFILE_EN > 0
                OSTCBHighRdy->OSTCBCtxSwCtr++;         /* Inc. # of context switches to this task      */
 400fbe0:	d0a72d17 	ldw	r2,-25420(gp)
 400fbe4:	10c00e17 	ldw	r3,56(r2)
 400fbe8:	18c00044 	addi	r3,r3,1
 400fbec:	10c00e15 	stw	r3,56(r2)
#endif
                OSCtxSwCtr++;                          /* Increment context switch counter             */
 400fbf0:	d0a72817 	ldw	r2,-25440(gp)
 400fbf4:	10800044 	addi	r2,r2,1
 400fbf8:	d0a72815 	stw	r2,-25440(gp)
                OS_TASK_SW();                          /* Perform a context switch                     */
 400fbfc:	4017cd40 	call	4017cd4 <OSCtxSw>
 400fc00:	e0bffd17 	ldw	r2,-12(fp)
 400fc04:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400fc08:	e0bffe17 	ldw	r2,-8(fp)
 400fc0c:	1001703a 	wrctl	status,r2
            }
        }
    }
    OS_EXIT_CRITICAL();
}
 400fc10:	0001883a 	nop
 400fc14:	e037883a 	mov	sp,fp
 400fc18:	dfc00117 	ldw	ra,4(sp)
 400fc1c:	df000017 	ldw	fp,0(sp)
 400fc20:	dec00204 	addi	sp,sp,8
 400fc24:	f800283a 	ret

0400fc28 <OS_SchedNew>:
*              2) Interrupts are assumed to be disabled when this function is called.
*********************************************************************************************************
*/

static  void  OS_SchedNew (void)
{
 400fc28:	defffe04 	addi	sp,sp,-8
 400fc2c:	df000115 	stw	fp,4(sp)
 400fc30:	df000104 	addi	fp,sp,4
#if OS_LOWEST_PRIO <= 63                         /* See if we support up to 64 tasks                   */
    INT8U   y;


    y             = OSUnMapTbl[OSRdyGrp];
 400fc34:	d0a72f03 	ldbu	r2,-25412(gp)
 400fc38:	10c03fcc 	andi	r3,r2,255
 400fc3c:	008100b4 	movhi	r2,1026
 400fc40:	10a2c404 	addi	r2,r2,-29936
 400fc44:	10c5883a 	add	r2,r2,r3
 400fc48:	10800003 	ldbu	r2,0(r2)
 400fc4c:	e0bfff05 	stb	r2,-4(fp)
    OSPrioHighRdy = (INT8U)((y << 3) + OSUnMapTbl[OSRdyTbl[y]]);
 400fc50:	e0bfff03 	ldbu	r2,-4(fp)
 400fc54:	100490fa 	slli	r2,r2,3
 400fc58:	1009883a 	mov	r4,r2
 400fc5c:	e0ffff03 	ldbu	r3,-4(fp)
 400fc60:	d0a72f44 	addi	r2,gp,-25411
 400fc64:	1885883a 	add	r2,r3,r2
 400fc68:	10800003 	ldbu	r2,0(r2)
 400fc6c:	10c03fcc 	andi	r3,r2,255
 400fc70:	008100b4 	movhi	r2,1026
 400fc74:	10a2c404 	addi	r2,r2,-29936
 400fc78:	10c5883a 	add	r2,r2,r3
 400fc7c:	10800003 	ldbu	r2,0(r2)
 400fc80:	2085883a 	add	r2,r4,r2
 400fc84:	d0a72505 	stb	r2,-25452(gp)
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl & 0xFF)]);
    } else {
        OSPrioHighRdy = (INT8U)((y << 4) + OSUnMapTbl[(*ptbl >> 8) & 0xFF] + 8);
    }
#endif
}
 400fc88:	0001883a 	nop
 400fc8c:	e037883a 	mov	sp,fp
 400fc90:	df000017 	ldw	fp,0(sp)
 400fc94:	dec00104 	addi	sp,sp,4
 400fc98:	f800283a 	ret

0400fc9c <OS_StrCopy>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrCopy (INT8U *pdest, INT8U *psrc)
{
 400fc9c:	defffc04 	addi	sp,sp,-16
 400fca0:	df000315 	stw	fp,12(sp)
 400fca4:	df000304 	addi	fp,sp,12
 400fca8:	e13ffe15 	stw	r4,-8(fp)
 400fcac:	e17fff15 	stw	r5,-4(fp)
    INT8U  len;


    len = 0;
 400fcb0:	e03ffd05 	stb	zero,-12(fp)
    while (*psrc != OS_ASCII_NUL) {
 400fcb4:	00000b06 	br	400fce4 <OS_StrCopy+0x48>
        *pdest++ = *psrc++;
 400fcb8:	e0bffe17 	ldw	r2,-8(fp)
 400fcbc:	10c00044 	addi	r3,r2,1
 400fcc0:	e0fffe15 	stw	r3,-8(fp)
 400fcc4:	e0ffff17 	ldw	r3,-4(fp)
 400fcc8:	19000044 	addi	r4,r3,1
 400fccc:	e13fff15 	stw	r4,-4(fp)
 400fcd0:	18c00003 	ldbu	r3,0(r3)
 400fcd4:	10c00005 	stb	r3,0(r2)
        len++;
 400fcd8:	e0bffd03 	ldbu	r2,-12(fp)
 400fcdc:	10800044 	addi	r2,r2,1
 400fce0:	e0bffd05 	stb	r2,-12(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 400fce4:	e0bfff17 	ldw	r2,-4(fp)
 400fce8:	10800003 	ldbu	r2,0(r2)
 400fcec:	10803fcc 	andi	r2,r2,255
 400fcf0:	103ff11e 	bne	r2,zero,400fcb8 <__alt_mem_onchip_memory2_0+0xfbfefcb8>
        *pdest++ = *psrc++;
        len++;
    }
    *pdest = OS_ASCII_NUL;
 400fcf4:	e0bffe17 	ldw	r2,-8(fp)
 400fcf8:	10000005 	stb	zero,0(r2)
    return (len);
 400fcfc:	e0bffd03 	ldbu	r2,-12(fp)
}
 400fd00:	e037883a 	mov	sp,fp
 400fd04:	df000017 	ldw	fp,0(sp)
 400fd08:	dec00104 	addi	sp,sp,4
 400fd0c:	f800283a 	ret

0400fd10 <OS_StrLen>:
*********************************************************************************************************
*/

#if (OS_EVENT_NAME_SIZE > 1) || (OS_FLAG_NAME_SIZE > 1) || (OS_MEM_NAME_SIZE > 1) || (OS_TASK_NAME_SIZE > 1) || (OS_TMR_CFG_NAME_SIZE > 1)
INT8U  OS_StrLen (INT8U *psrc)
{
 400fd10:	defffd04 	addi	sp,sp,-12
 400fd14:	df000215 	stw	fp,8(sp)
 400fd18:	df000204 	addi	fp,sp,8
 400fd1c:	e13fff15 	stw	r4,-4(fp)
    INT8U  len;


    len = 0;
 400fd20:	e03ffe05 	stb	zero,-8(fp)
    while (*psrc != OS_ASCII_NUL) {
 400fd24:	00000606 	br	400fd40 <OS_StrLen+0x30>
        psrc++;
 400fd28:	e0bfff17 	ldw	r2,-4(fp)
 400fd2c:	10800044 	addi	r2,r2,1
 400fd30:	e0bfff15 	stw	r2,-4(fp)
        len++;
 400fd34:	e0bffe03 	ldbu	r2,-8(fp)
 400fd38:	10800044 	addi	r2,r2,1
 400fd3c:	e0bffe05 	stb	r2,-8(fp)
{
    INT8U  len;


    len = 0;
    while (*psrc != OS_ASCII_NUL) {
 400fd40:	e0bfff17 	ldw	r2,-4(fp)
 400fd44:	10800003 	ldbu	r2,0(r2)
 400fd48:	10803fcc 	andi	r2,r2,255
 400fd4c:	103ff61e 	bne	r2,zero,400fd28 <__alt_mem_onchip_memory2_0+0xfbfefd28>
        psrc++;
        len++;
    }
    return (len);
 400fd50:	e0bffe03 	ldbu	r2,-8(fp)
}
 400fd54:	e037883a 	mov	sp,fp
 400fd58:	df000017 	ldw	fp,0(sp)
 400fd5c:	dec00104 	addi	sp,sp,4
 400fd60:	f800283a 	ret

0400fd64 <OS_TaskIdle>:
*                 power.
*********************************************************************************************************
*/

void  OS_TaskIdle (void *p_arg)
{
 400fd64:	defffa04 	addi	sp,sp,-24
 400fd68:	dfc00515 	stw	ra,20(sp)
 400fd6c:	df000415 	stw	fp,16(sp)
 400fd70:	df000404 	addi	fp,sp,16
 400fd74:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 400fd78:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400fd7c:	0005303a 	rdctl	r2,status
 400fd80:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400fd84:	e0fffd17 	ldw	r3,-12(fp)
 400fd88:	00bfff84 	movi	r2,-2
 400fd8c:	1884703a 	and	r2,r3,r2
 400fd90:	1001703a 	wrctl	status,r2
  
  return context;
 400fd94:	e0bffd17 	ldw	r2,-12(fp)



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    for (;;) {
        OS_ENTER_CRITICAL();
 400fd98:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtr++;
 400fd9c:	d0a72417 	ldw	r2,-25456(gp)
 400fda0:	10800044 	addi	r2,r2,1
 400fda4:	d0a72415 	stw	r2,-25456(gp)
 400fda8:	e0bffc17 	ldw	r2,-16(fp)
 400fdac:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400fdb0:	e0bffe17 	ldw	r2,-8(fp)
 400fdb4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSTaskIdleHook();                        /* Call user definable HOOK                           */
 400fdb8:	4017fe80 	call	4017fe8 <OSTaskIdleHook>
    }
 400fdbc:	003fef06 	br	400fd7c <__alt_mem_onchip_memory2_0+0xfbfefd7c>

0400fdc0 <OS_TaskStat>:
*********************************************************************************************************
*/

#if OS_TASK_STAT_EN > 0
void  OS_TaskStat (void *p_arg)
{
 400fdc0:	defffa04 	addi	sp,sp,-24
 400fdc4:	dfc00515 	stw	ra,20(sp)
 400fdc8:	df000415 	stw	fp,16(sp)
 400fdcc:	df000404 	addi	fp,sp,16
 400fdd0:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 400fdd4:	e03ffc15 	stw	zero,-16(fp)
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 400fdd8:	00000206 	br	400fde4 <OS_TaskStat+0x24>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
 400fddc:	01000284 	movi	r4,10
 400fde0:	4015fbc0 	call	4015fbc <OSTimeDly>
#endif



    (void)p_arg;                                 /* Prevent compiler warning for not using 'p_arg'     */
    while (OSStatRdy == OS_FALSE) {
 400fde4:	d0a73503 	ldbu	r2,-25388(gp)
 400fde8:	10803fcc 	andi	r2,r2,255
 400fdec:	103ffb26 	beq	r2,zero,400fddc <__alt_mem_onchip_memory2_0+0xfbfefddc>
        OSTimeDly(2 * OS_TICKS_PER_SEC / 10);    /* Wait until statistic task is ready                 */
    }
    OSIdleCtrMax /= 100L;
 400fdf0:	d0a72917 	ldw	r2,-25436(gp)
 400fdf4:	01401904 	movi	r5,100
 400fdf8:	1009883a 	mov	r4,r2
 400fdfc:	400ac080 	call	400ac08 <__udivsi3>
 400fe00:	d0a72915 	stw	r2,-25436(gp)
    if (OSIdleCtrMax == 0L) {
 400fe04:	d0a72917 	ldw	r2,-25436(gp)
 400fe08:	1000031e 	bne	r2,zero,400fe18 <OS_TaskStat+0x58>
        OSCPUUsage = 0;
 400fe0c:	d0272b05 	stb	zero,-25428(gp)
        (void)OSTaskSuspend(OS_PRIO_SELF);
 400fe10:	01003fc4 	movi	r4,255
 400fe14:	4015c440 	call	4015c44 <OSTaskSuspend>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400fe18:	0005303a 	rdctl	r2,status
 400fe1c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400fe20:	e0fffd17 	ldw	r3,-12(fp)
 400fe24:	00bfff84 	movi	r2,-2
 400fe28:	1884703a 	and	r2,r3,r2
 400fe2c:	1001703a 	wrctl	status,r2
  
  return context;
 400fe30:	e0bffd17 	ldw	r2,-12(fp)
    }
    for (;;) {
        OS_ENTER_CRITICAL();
 400fe34:	e0bffc15 	stw	r2,-16(fp)
        OSIdleCtrRun = OSIdleCtr;                /* Obtain the of the idle counter for the past second */
 400fe38:	d0a72417 	ldw	r2,-25456(gp)
 400fe3c:	d0a73615 	stw	r2,-25384(gp)
        OSIdleCtr    = 0L;                       /* Reset the idle counter for the next second         */
 400fe40:	d0272415 	stw	zero,-25456(gp)
 400fe44:	e0bffc17 	ldw	r2,-16(fp)
 400fe48:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400fe4c:	e0bffe17 	ldw	r2,-8(fp)
 400fe50:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OSCPUUsage   = (INT8U)(100L - OSIdleCtrRun / OSIdleCtrMax);
 400fe54:	d0a73617 	ldw	r2,-25384(gp)
 400fe58:	d0e72917 	ldw	r3,-25436(gp)
 400fe5c:	180b883a 	mov	r5,r3
 400fe60:	1009883a 	mov	r4,r2
 400fe64:	400ac080 	call	400ac08 <__udivsi3>
 400fe68:	1007883a 	mov	r3,r2
 400fe6c:	00801904 	movi	r2,100
 400fe70:	10c5c83a 	sub	r2,r2,r3
 400fe74:	d0a72b05 	stb	r2,-25428(gp)
        OSTaskStatHook();                        /* Invoke user definable hook                         */
 400fe78:	4017f680 	call	4017f68 <OSTaskStatHook>
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
        OS_TaskStatStkChk();                     /* Check the stacks for each task                     */
 400fe7c:	400fe8c0 	call	400fe8c <OS_TaskStatStkChk>
#endif
        OSTimeDly(OS_TICKS_PER_SEC / 10);        /* Accumulate OSIdleCtr for the next 1/10 second      */
 400fe80:	01000144 	movi	r4,5
 400fe84:	4015fbc0 	call	4015fbc <OSTimeDly>
    }
 400fe88:	003fe306 	br	400fe18 <__alt_mem_onchip_memory2_0+0xfbfefe18>

0400fe8c <OS_TaskStatStkChk>:
*********************************************************************************************************
*/

#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStatStkChk (void)
{
 400fe8c:	defffa04 	addi	sp,sp,-24
 400fe90:	dfc00515 	stw	ra,20(sp)
 400fe94:	df000415 	stw	fp,16(sp)
 400fe98:	df000404 	addi	fp,sp,16
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 400fe9c:	e03ffc05 	stb	zero,-16(fp)
 400fea0:	00002406 	br	400ff34 <OS_TaskStatStkChk+0xa8>
        err = OSTaskStkChk(prio, &stk_data);
 400fea4:	e0bffc03 	ldbu	r2,-16(fp)
 400fea8:	e0fffe04 	addi	r3,fp,-8
 400feac:	180b883a 	mov	r5,r3
 400feb0:	1009883a 	mov	r4,r2
 400feb4:	4015a840 	call	4015a84 <OSTaskStkChk>
 400feb8:	e0bffc45 	stb	r2,-15(fp)
        if (err == OS_ERR_NONE) {
 400febc:	e0bffc43 	ldbu	r2,-15(fp)
 400fec0:	1000191e 	bne	r2,zero,400ff28 <OS_TaskStatStkChk+0x9c>
            ptcb = OSTCBPrioTbl[prio];
 400fec4:	e0fffc03 	ldbu	r3,-16(fp)
 400fec8:	008100b4 	movhi	r2,1026
 400fecc:	109dc204 	addi	r2,r2,30472
 400fed0:	18c7883a 	add	r3,r3,r3
 400fed4:	18c7883a 	add	r3,r3,r3
 400fed8:	10c5883a 	add	r2,r2,r3
 400fedc:	10800017 	ldw	r2,0(r2)
 400fee0:	e0bffd15 	stw	r2,-12(fp)
            if (ptcb != (OS_TCB *)0) {                               /* Make sure task 'ptcb' is ...   */
 400fee4:	e0bffd17 	ldw	r2,-12(fp)
 400fee8:	10000f26 	beq	r2,zero,400ff28 <OS_TaskStatStkChk+0x9c>
                if (ptcb != OS_TCB_RESERVED) {                       /* ... still valid.               */
 400feec:	e0bffd17 	ldw	r2,-12(fp)
 400fef0:	10800060 	cmpeqi	r2,r2,1
 400fef4:	10000c1e 	bne	r2,zero,400ff28 <OS_TaskStatStkChk+0x9c>
#if OS_TASK_PROFILE_EN > 0
                    #if OS_STK_GROWTH == 1
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom + ptcb->OSTCBStkSize;
 400fef8:	e0bffd17 	ldw	r2,-12(fp)
 400fefc:	10c00217 	ldw	r3,8(r2)
 400ff00:	e0bffd17 	ldw	r2,-12(fp)
 400ff04:	10800317 	ldw	r2,12(r2)
 400ff08:	1085883a 	add	r2,r2,r2
 400ff0c:	1085883a 	add	r2,r2,r2
 400ff10:	1887883a 	add	r3,r3,r2
 400ff14:	e0bffd17 	ldw	r2,-12(fp)
 400ff18:	10c01115 	stw	r3,68(r2)
                    #else
                    ptcb->OSTCBStkBase = ptcb->OSTCBStkBottom - ptcb->OSTCBStkSize;
                    #endif
                    ptcb->OSTCBStkUsed = stk_data.OSUsed;            /* Store the number of bytes used */
 400ff1c:	e0ffff17 	ldw	r3,-4(fp)
 400ff20:	e0bffd17 	ldw	r2,-12(fp)
 400ff24:	10c01215 	stw	r3,72(r2)
    OS_STK_DATA  stk_data;
    INT8U        err;
    INT8U        prio;


    for (prio = 0; prio <= OS_TASK_IDLE_PRIO; prio++) {
 400ff28:	e0bffc03 	ldbu	r2,-16(fp)
 400ff2c:	10800044 	addi	r2,r2,1
 400ff30:	e0bffc05 	stb	r2,-16(fp)
 400ff34:	e0bffc03 	ldbu	r2,-16(fp)
 400ff38:	10800570 	cmpltui	r2,r2,21
 400ff3c:	103fd91e 	bne	r2,zero,400fea4 <__alt_mem_onchip_memory2_0+0xfbfefea4>
#endif
                }
            }
        }
    }
}
 400ff40:	0001883a 	nop
 400ff44:	e037883a 	mov	sp,fp
 400ff48:	dfc00117 	ldw	ra,4(sp)
 400ff4c:	df000017 	ldw	fp,0(sp)
 400ff50:	dec00204 	addi	sp,sp,8
 400ff54:	f800283a 	ret

0400ff58 <OS_TCBInit>:
* Note       : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

INT8U  OS_TCBInit (INT8U prio, OS_STK *ptos, OS_STK *pbos, INT16U id, INT32U stk_size, void *pext, INT16U opt)
{
 400ff58:	defff204 	addi	sp,sp,-56
 400ff5c:	dfc00d15 	stw	ra,52(sp)
 400ff60:	df000c15 	stw	fp,48(sp)
 400ff64:	df000c04 	addi	fp,sp,48
 400ff68:	e17ffc15 	stw	r5,-16(fp)
 400ff6c:	e1bffd15 	stw	r6,-12(fp)
 400ff70:	3807883a 	mov	r3,r7
 400ff74:	e0800417 	ldw	r2,16(fp)
 400ff78:	e13ffb05 	stb	r4,-20(fp)
 400ff7c:	e0fffe0d 	sth	r3,-8(fp)
 400ff80:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 400ff84:	e03ff415 	stw	zero,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400ff88:	0005303a 	rdctl	r2,status
 400ff8c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400ff90:	e0fffa17 	ldw	r3,-24(fp)
 400ff94:	00bfff84 	movi	r2,-2
 400ff98:	1884703a 	and	r2,r3,r2
 400ff9c:	1001703a 	wrctl	status,r2
  
  return context;
 400ffa0:	e0bffa17 	ldw	r2,-24(fp)
#endif



    OS_ENTER_CRITICAL();
 400ffa4:	e0bff415 	stw	r2,-48(fp)
    ptcb = OSTCBFreeList;                                  /* Get a free TCB from the free TCB list    */
 400ffa8:	d0a72a17 	ldw	r2,-25432(gp)
 400ffac:	e0bff615 	stw	r2,-40(fp)
    if (ptcb != (OS_TCB *)0) {
 400ffb0:	e0bff617 	ldw	r2,-40(fp)
 400ffb4:	10009326 	beq	r2,zero,4010204 <OS_TCBInit+0x2ac>
        OSTCBFreeList            = ptcb->OSTCBNext;        /* Update pointer to free TCB list          */
 400ffb8:	e0bff617 	ldw	r2,-40(fp)
 400ffbc:	10800517 	ldw	r2,20(r2)
 400ffc0:	d0a72a15 	stw	r2,-25432(gp)
 400ffc4:	e0bff417 	ldw	r2,-48(fp)
 400ffc8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400ffcc:	e0bff817 	ldw	r2,-32(fp)
 400ffd0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        ptcb->OSTCBStkPtr        = ptos;                   /* Load Stack pointer in TCB                */
 400ffd4:	e0bff617 	ldw	r2,-40(fp)
 400ffd8:	e0fffc17 	ldw	r3,-16(fp)
 400ffdc:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBPrio          = prio;                   /* Load task priority into TCB              */
 400ffe0:	e0bff617 	ldw	r2,-40(fp)
 400ffe4:	e0fffb03 	ldbu	r3,-20(fp)
 400ffe8:	10c00c85 	stb	r3,50(r2)
        ptcb->OSTCBStat          = OS_STAT_RDY;            /* Task is ready to run                     */
 400ffec:	e0bff617 	ldw	r2,-40(fp)
 400fff0:	10000c05 	stb	zero,48(r2)
        ptcb->OSTCBStatPend      = OS_STAT_PEND_OK;        /* Clear pend status                        */
 400fff4:	e0bff617 	ldw	r2,-40(fp)
 400fff8:	10000c45 	stb	zero,49(r2)
        ptcb->OSTCBDly           = 0;                      /* Task is not delayed                      */
 400fffc:	e0bff617 	ldw	r2,-40(fp)
 4010000:	10000b8d 	sth	zero,46(r2)

#if OS_TASK_CREATE_EXT_EN > 0
        ptcb->OSTCBExtPtr        = pext;                   /* Store pointer to TCB extension           */
 4010004:	e0bff617 	ldw	r2,-40(fp)
 4010008:	e0c00317 	ldw	r3,12(fp)
 401000c:	10c00115 	stw	r3,4(r2)
        ptcb->OSTCBStkSize       = stk_size;               /* Store stack size                         */
 4010010:	e0bff617 	ldw	r2,-40(fp)
 4010014:	e0c00217 	ldw	r3,8(fp)
 4010018:	10c00315 	stw	r3,12(r2)
        ptcb->OSTCBStkBottom     = pbos;                   /* Store pointer to bottom of stack         */
 401001c:	e0bff617 	ldw	r2,-40(fp)
 4010020:	e0fffd17 	ldw	r3,-12(fp)
 4010024:	10c00215 	stw	r3,8(r2)
        ptcb->OSTCBOpt           = opt;                    /* Store task options                       */
 4010028:	e0bff617 	ldw	r2,-40(fp)
 401002c:	e0ffff0b 	ldhu	r3,-4(fp)
 4010030:	10c0040d 	sth	r3,16(r2)
        ptcb->OSTCBId            = id;                     /* Store task ID                            */
 4010034:	e0bff617 	ldw	r2,-40(fp)
 4010038:	e0fffe0b 	ldhu	r3,-8(fp)
 401003c:	10c0048d 	sth	r3,18(r2)
        opt                      = opt;
        id                       = id;
#endif

#if OS_TASK_DEL_EN > 0
        ptcb->OSTCBDelReq        = OS_ERR_NONE;
 4010040:	e0bff617 	ldw	r2,-40(fp)
 4010044:	10000dc5 	stb	zero,55(r2)
#endif

#if OS_LOWEST_PRIO <= 63
        ptcb->OSTCBY             = (INT8U)(prio >> 3);          /* Pre-compute X, Y, BitX and BitY     */
 4010048:	e0bffb03 	ldbu	r2,-20(fp)
 401004c:	1004d0fa 	srli	r2,r2,3
 4010050:	1007883a 	mov	r3,r2
 4010054:	e0bff617 	ldw	r2,-40(fp)
 4010058:	10c00d05 	stb	r3,52(r2)
        ptcb->OSTCBX             = (INT8U)(prio & 0x07);
 401005c:	e0bffb03 	ldbu	r2,-20(fp)
 4010060:	108001cc 	andi	r2,r2,7
 4010064:	1007883a 	mov	r3,r2
 4010068:	e0bff617 	ldw	r2,-40(fp)
 401006c:	10c00cc5 	stb	r3,51(r2)
        ptcb->OSTCBBitY          = (INT8U)(1 << ptcb->OSTCBY);
 4010070:	e0bff617 	ldw	r2,-40(fp)
 4010074:	10800d03 	ldbu	r2,52(r2)
 4010078:	10803fcc 	andi	r2,r2,255
 401007c:	00c00044 	movi	r3,1
 4010080:	1884983a 	sll	r2,r3,r2
 4010084:	1007883a 	mov	r3,r2
 4010088:	e0bff617 	ldw	r2,-40(fp)
 401008c:	10c00d85 	stb	r3,54(r2)
        ptcb->OSTCBBitX          = (INT8U)(1 << ptcb->OSTCBX);
 4010090:	e0bff617 	ldw	r2,-40(fp)
 4010094:	10800cc3 	ldbu	r2,51(r2)
 4010098:	10803fcc 	andi	r2,r2,255
 401009c:	00c00044 	movi	r3,1
 40100a0:	1884983a 	sll	r2,r3,r2
 40100a4:	1007883a 	mov	r3,r2
 40100a8:	e0bff617 	ldw	r2,-40(fp)
 40100ac:	10c00d45 	stb	r3,53(r2)
        ptcb->OSTCBBitY          = (INT16U)(1 << ptcb->OSTCBY);
        ptcb->OSTCBBitX          = (INT16U)(1 << ptcb->OSTCBX);
#endif

#if (OS_EVENT_EN)
        ptcb->OSTCBEventPtr      = (OS_EVENT  *)0;         /* Task is not pending on an  event         */
 40100b0:	e0bff617 	ldw	r2,-40(fp)
 40100b4:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
        ptcb->OSTCBEventMultiPtr = (OS_EVENT **)0;         /* Task is not pending on any events        */
 40100b8:	e0bff617 	ldw	r2,-40(fp)
 40100bc:	10000815 	stw	zero,32(r2)
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0) && (OS_TASK_DEL_EN > 0)
        ptcb->OSTCBFlagNode  = (OS_FLAG_NODE *)0;          /* Task is not pending on an event flag     */
 40100c0:	e0bff617 	ldw	r2,-40(fp)
 40100c4:	10000a15 	stw	zero,40(r2)
#endif

#if (OS_MBOX_EN > 0) || ((OS_Q_EN > 0) && (OS_MAX_QS > 0))
        ptcb->OSTCBMsg       = (void *)0;                  /* No message received                      */
 40100c8:	e0bff617 	ldw	r2,-40(fp)
 40100cc:	10000915 	stw	zero,36(r2)
#endif

#if OS_TASK_PROFILE_EN > 0
        ptcb->OSTCBCtxSwCtr    = 0L;                       /* Initialize profiling variables           */
 40100d0:	e0bff617 	ldw	r2,-40(fp)
 40100d4:	10000e15 	stw	zero,56(r2)
        ptcb->OSTCBCyclesStart = 0L;
 40100d8:	e0bff617 	ldw	r2,-40(fp)
 40100dc:	10001015 	stw	zero,64(r2)
        ptcb->OSTCBCyclesTot   = 0L;
 40100e0:	e0bff617 	ldw	r2,-40(fp)
 40100e4:	10000f15 	stw	zero,60(r2)
        ptcb->OSTCBStkBase     = (OS_STK *)0;
 40100e8:	e0bff617 	ldw	r2,-40(fp)
 40100ec:	10001115 	stw	zero,68(r2)
        ptcb->OSTCBStkUsed     = 0L;
 40100f0:	e0bff617 	ldw	r2,-40(fp)
 40100f4:	10001215 	stw	zero,72(r2)
#endif

#if OS_TASK_NAME_SIZE > 1
        ptcb->OSTCBTaskName[0] = '?';                      /* Unknown name at task creation            */
 40100f8:	e0bff617 	ldw	r2,-40(fp)
 40100fc:	00c00fc4 	movi	r3,63
 4010100:	10c01305 	stb	r3,76(r2)
        ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 4010104:	e0bff617 	ldw	r2,-40(fp)
 4010108:	10001345 	stb	zero,77(r2)
#endif

        OSTCBInitHook(ptcb);
 401010c:	e13ff617 	ldw	r4,-40(fp)
 4010110:	40180080 	call	4018008 <OSTCBInitHook>

        OSTaskCreateHook(ptcb);                            /* Call user defined hook                   */
 4010114:	e13ff617 	ldw	r4,-40(fp)
 4010118:	4017f000 	call	4017f00 <OSTaskCreateHook>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401011c:	0005303a 	rdctl	r2,status
 4010120:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4010124:	e0fff517 	ldw	r3,-44(fp)
 4010128:	00bfff84 	movi	r2,-2
 401012c:	1884703a 	and	r2,r3,r2
 4010130:	1001703a 	wrctl	status,r2
  
  return context;
 4010134:	e0bff517 	ldw	r2,-44(fp)

        OS_ENTER_CRITICAL();
 4010138:	e0bff415 	stw	r2,-48(fp)
        OSTCBPrioTbl[prio] = ptcb;
 401013c:	e0fffb03 	ldbu	r3,-20(fp)
 4010140:	008100b4 	movhi	r2,1026
 4010144:	109dc204 	addi	r2,r2,30472
 4010148:	18c7883a 	add	r3,r3,r3
 401014c:	18c7883a 	add	r3,r3,r3
 4010150:	10c5883a 	add	r2,r2,r3
 4010154:	e0fff617 	ldw	r3,-40(fp)
 4010158:	10c00015 	stw	r3,0(r2)
        ptcb->OSTCBNext    = OSTCBList;                    /* Link into TCB chain                      */
 401015c:	d0e72617 	ldw	r3,-25448(gp)
 4010160:	e0bff617 	ldw	r2,-40(fp)
 4010164:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBPrev    = (OS_TCB *)0;
 4010168:	e0bff617 	ldw	r2,-40(fp)
 401016c:	10000615 	stw	zero,24(r2)
        if (OSTCBList != (OS_TCB *)0) {
 4010170:	d0a72617 	ldw	r2,-25448(gp)
 4010174:	10000326 	beq	r2,zero,4010184 <OS_TCBInit+0x22c>
            OSTCBList->OSTCBPrev = ptcb;
 4010178:	d0a72617 	ldw	r2,-25448(gp)
 401017c:	e0fff617 	ldw	r3,-40(fp)
 4010180:	10c00615 	stw	r3,24(r2)
        }
        OSTCBList               = ptcb;
 4010184:	e0bff617 	ldw	r2,-40(fp)
 4010188:	d0a72615 	stw	r2,-25448(gp)
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Make task ready to run                   */
 401018c:	e0bff617 	ldw	r2,-40(fp)
 4010190:	10c00d83 	ldbu	r3,54(r2)
 4010194:	d0a72f03 	ldbu	r2,-25412(gp)
 4010198:	1884b03a 	or	r2,r3,r2
 401019c:	d0a72f05 	stb	r2,-25412(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 40101a0:	e0bff617 	ldw	r2,-40(fp)
 40101a4:	10800d03 	ldbu	r2,52(r2)
 40101a8:	10c03fcc 	andi	r3,r2,255
 40101ac:	e0bff617 	ldw	r2,-40(fp)
 40101b0:	10800d03 	ldbu	r2,52(r2)
 40101b4:	11003fcc 	andi	r4,r2,255
 40101b8:	d0a72f44 	addi	r2,gp,-25411
 40101bc:	2085883a 	add	r2,r4,r2
 40101c0:	11000003 	ldbu	r4,0(r2)
 40101c4:	e0bff617 	ldw	r2,-40(fp)
 40101c8:	10800d43 	ldbu	r2,53(r2)
 40101cc:	2084b03a 	or	r2,r4,r2
 40101d0:	1009883a 	mov	r4,r2
 40101d4:	d0a72f44 	addi	r2,gp,-25411
 40101d8:	1885883a 	add	r2,r3,r2
 40101dc:	11000005 	stb	r4,0(r2)
        OSTaskCtr++;                                       /* Increment the #tasks counter             */
 40101e0:	d0a72b43 	ldbu	r2,-25427(gp)
 40101e4:	10800044 	addi	r2,r2,1
 40101e8:	d0a72b45 	stb	r2,-25427(gp)
 40101ec:	e0bff417 	ldw	r2,-48(fp)
 40101f0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40101f4:	e0bff717 	ldw	r2,-36(fp)
 40101f8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 40101fc:	0005883a 	mov	r2,zero
 4010200:	00000506 	br	4010218 <OS_TCBInit+0x2c0>
 4010204:	e0bff417 	ldw	r2,-48(fp)
 4010208:	e0bff915 	stw	r2,-28(fp)
 401020c:	e0bff917 	ldw	r2,-28(fp)
 4010210:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NO_MORE_TCB);
 4010214:	00801084 	movi	r2,66
}
 4010218:	e037883a 	mov	sp,fp
 401021c:	dfc00117 	ldw	ra,4(sp)
 4010220:	df000017 	ldw	fp,0(sp)
 4010224:	dec00204 	addi	sp,sp,8
 4010228:	f800283a 	ret

0401022c <OSDebugInit>:
*********************************************************************************************************
*/

#if OS_DEBUG_EN > 0
void  OSDebugInit (void)
{
 401022c:	defffe04 	addi	sp,sp,-8
 4010230:	df000115 	stw	fp,4(sp)
 4010234:	df000104 	addi	fp,sp,4
    void  *ptemp;

    
    ptemp = (void *)&OSDebugEn;
 4010238:	d0a01004 	addi	r2,gp,-32704
 401023c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEndiannessTest;
 4010240:	d0a01104 	addi	r2,gp,-32700
 4010244:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSEventMax;
 4010248:	d0a01284 	addi	r2,gp,-32694
 401024c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventNameSize;
 4010250:	d0a01304 	addi	r2,gp,-32692
 4010254:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventEn;
 4010258:	d0a01204 	addi	r2,gp,-32696
 401025c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventSize;
 4010260:	d0a01384 	addi	r2,gp,-32690
 4010264:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventTblSize;
 4010268:	d0a01404 	addi	r2,gp,-32688
 401026c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSEventMultiEn;
 4010270:	d0a01484 	addi	r2,gp,-32686
 4010274:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSFlagEn;
 4010278:	d0a01504 	addi	r2,gp,-32684
 401027c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagGrpSize;
 4010280:	d0a01584 	addi	r2,gp,-32682
 4010284:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNodeSize;
 4010288:	d0a01604 	addi	r2,gp,-32680
 401028c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagWidth;
 4010290:	d0a01684 	addi	r2,gp,-32678
 4010294:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagMax;
 4010298:	d0a01704 	addi	r2,gp,-32676
 401029c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSFlagNameSize;
 40102a0:	d0a01784 	addi	r2,gp,-32674
 40102a4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSLowestPrio;
 40102a8:	d0a01804 	addi	r2,gp,-32672
 40102ac:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMboxEn;
 40102b0:	d0a01884 	addi	r2,gp,-32670
 40102b4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMemEn;
 40102b8:	d0a01904 	addi	r2,gp,-32668
 40102bc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemMax;
 40102c0:	d0a01984 	addi	r2,gp,-32666
 40102c4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemNameSize;
 40102c8:	d0a01a04 	addi	r2,gp,-32664
 40102cc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemSize;
 40102d0:	d0a01a84 	addi	r2,gp,-32662
 40102d4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSMemTblSize;
 40102d8:	d0a01b04 	addi	r2,gp,-32660
 40102dc:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSMutexEn;
 40102e0:	d0a01b84 	addi	r2,gp,-32658
 40102e4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSPtrSize;
 40102e8:	d0a01c04 	addi	r2,gp,-32656
 40102ec:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSQEn;
 40102f0:	d0a01c84 	addi	r2,gp,-32654
 40102f4:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQMax;
 40102f8:	d0a01d04 	addi	r2,gp,-32652
 40102fc:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSQSize;
 4010300:	d0a01d84 	addi	r2,gp,-32650
 4010304:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSRdyTblSize;
 4010308:	d0a01e04 	addi	r2,gp,-32648
 401030c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSSemEn;
 4010310:	d0a01e84 	addi	r2,gp,-32646
 4010314:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSStkWidth;
 4010318:	d0a01f04 	addi	r2,gp,-32644
 401031c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTaskCreateEn;
 4010320:	d0a01f84 	addi	r2,gp,-32642
 4010324:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskCreateExtEn;
 4010328:	d0a02004 	addi	r2,gp,-32640
 401032c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskDelEn;
 4010330:	d0a02084 	addi	r2,gp,-32638
 4010334:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskIdleStkSize;
 4010338:	d0a02104 	addi	r2,gp,-32636
 401033c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskProfileEn;
 4010340:	d0a02184 	addi	r2,gp,-32634
 4010344:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskMax;
 4010348:	d0a02204 	addi	r2,gp,-32632
 401034c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskNameSize;
 4010350:	d0a02284 	addi	r2,gp,-32630
 4010354:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatEn;
 4010358:	d0a02304 	addi	r2,gp,-32628
 401035c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkSize;
 4010360:	d0a02384 	addi	r2,gp,-32626
 4010364:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskStatStkChkEn;
 4010368:	d0a02404 	addi	r2,gp,-32624
 401036c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTaskSwHookEn;
 4010370:	d0a02484 	addi	r2,gp,-32622
 4010374:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTCBPrioTblMax;
 4010378:	d0a02504 	addi	r2,gp,-32620
 401037c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTCBSize;
 4010380:	d0a02584 	addi	r2,gp,-32618
 4010384:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTicksPerSec;
 4010388:	d0a02604 	addi	r2,gp,-32616
 401038c:	e0bfff15 	stw	r2,-4(fp)
    ptemp = (void *)&OSTimeTickHookEn;
 4010390:	d0a02684 	addi	r2,gp,-32614
 4010394:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSTmrWheelSize;
    ptemp = (void *)&OSTmrWheelTblSize;
#endif

    ptemp = (void *)&OSVersionNbr;
 4010398:	d0a02704 	addi	r2,gp,-32612
 401039c:	e0bfff15 	stw	r2,-4(fp)

    ptemp = (void *)&OSDataSize;
 40103a0:	d0a02c04 	addi	r2,gp,-32592
 40103a4:	e0bfff15 	stw	r2,-4(fp)

    ptemp = ptemp;                             /* Prevent compiler warning for 'ptemp' not being used! */
}
 40103a8:	0001883a 	nop
 40103ac:	e037883a 	mov	sp,fp
 40103b0:	df000017 	ldw	fp,0(sp)
 40103b4:	dec00104 	addi	sp,sp,4
 40103b8:	f800283a 	ret

040103bc <OSFlagAccept>:
*********************************************************************************************************
*/

#if OS_FLAG_ACCEPT_EN > 0
OS_FLAGS  OSFlagAccept (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT8U *perr)
{
 40103bc:	defff204 	addi	sp,sp,-56
 40103c0:	df000d15 	stw	fp,52(sp)
 40103c4:	df000d04 	addi	fp,sp,52
 40103c8:	e13ffc15 	stw	r4,-16(fp)
 40103cc:	2807883a 	mov	r3,r5
 40103d0:	3005883a 	mov	r2,r6
 40103d4:	e1ffff15 	stw	r7,-4(fp)
 40103d8:	e0fffd0d 	sth	r3,-12(fp)
 40103dc:	e0bffe05 	stb	r2,-8(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 40103e0:	e03ff415 	stw	zero,-48(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 40103e4:	e0bfff17 	ldw	r2,-4(fp)
 40103e8:	1000021e 	bne	r2,zero,40103f4 <OSFlagAccept+0x38>
        return ((OS_FLAGS)0);
 40103ec:	0005883a 	mov	r2,zero
 40103f0:	0000b006 	br	40106b4 <OSFlagAccept+0x2f8>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 40103f4:	e0bffc17 	ldw	r2,-16(fp)
 40103f8:	1000051e 	bne	r2,zero,4010410 <OSFlagAccept+0x54>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 40103fc:	e0bfff17 	ldw	r2,-4(fp)
 4010400:	00c01b84 	movi	r3,110
 4010404:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 4010408:	0005883a 	mov	r2,zero
 401040c:	0000a906 	br	40106b4 <OSFlagAccept+0x2f8>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 4010410:	e0bffc17 	ldw	r2,-16(fp)
 4010414:	10800003 	ldbu	r2,0(r2)
 4010418:	10803fcc 	andi	r2,r2,255
 401041c:	10800160 	cmpeqi	r2,r2,5
 4010420:	1000051e 	bne	r2,zero,4010438 <OSFlagAccept+0x7c>
        *perr = OS_ERR_EVENT_TYPE;
 4010424:	e0bfff17 	ldw	r2,-4(fp)
 4010428:	00c00044 	movi	r3,1
 401042c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 4010430:	0005883a 	mov	r2,zero
 4010434:	00009f06 	br	40106b4 <OSFlagAccept+0x2f8>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 4010438:	e0fffe03 	ldbu	r3,-8(fp)
 401043c:	00bfe004 	movi	r2,-128
 4010440:	1884703a 	and	r2,r3,r2
 4010444:	e0bff505 	stb	r2,-44(fp)
    if (result != (INT8U)0) {                              /* See if we need to consume the flags      */
 4010448:	e0bff503 	ldbu	r2,-44(fp)
 401044c:	10000626 	beq	r2,zero,4010468 <OSFlagAccept+0xac>
        wait_type &= ~OS_FLAG_CONSUME;
 4010450:	e0bffe03 	ldbu	r2,-8(fp)
 4010454:	10801fcc 	andi	r2,r2,127
 4010458:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
 401045c:	00800044 	movi	r2,1
 4010460:	e0bff385 	stb	r2,-50(fp)
 4010464:	00000106 	br	401046c <OSFlagAccept+0xb0>
    } else {
        consume    = OS_FALSE;
 4010468:	e03ff385 	stb	zero,-50(fp)
    }
/*$PAGE*/
    *perr = OS_ERR_NONE;                                   /* Assume NO error until proven otherwise.  */
 401046c:	e0bfff17 	ldw	r2,-4(fp)
 4010470:	10000005 	stb	zero,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4010474:	0005303a 	rdctl	r2,status
 4010478:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401047c:	e0fffb17 	ldw	r3,-20(fp)
 4010480:	00bfff84 	movi	r2,-2
 4010484:	1884703a 	and	r2,r3,r2
 4010488:	1001703a 	wrctl	status,r2
  
  return context;
 401048c:	e0bffb17 	ldw	r2,-20(fp)
    OS_ENTER_CRITICAL();
 4010490:	e0bff415 	stw	r2,-48(fp)
    switch (wait_type) {
 4010494:	e0bffe03 	ldbu	r2,-8(fp)
 4010498:	10c00060 	cmpeqi	r3,r2,1
 401049c:	18005f1e 	bne	r3,zero,401061c <OSFlagAccept+0x260>
 40104a0:	10c00088 	cmpgei	r3,r2,2
 40104a4:	1800021e 	bne	r3,zero,40104b0 <OSFlagAccept+0xf4>
 40104a8:	10003f26 	beq	r2,zero,40105a8 <OSFlagAccept+0x1ec>
 40104ac:	00007706 	br	401068c <OSFlagAccept+0x2d0>
 40104b0:	10c000a0 	cmpeqi	r3,r2,2
 40104b4:	1800031e 	bne	r3,zero,40104c4 <OSFlagAccept+0x108>
 40104b8:	108000e0 	cmpeqi	r2,r2,3
 40104bc:	10001e1e 	bne	r2,zero,4010538 <OSFlagAccept+0x17c>
 40104c0:	00007206 	br	401068c <OSFlagAccept+0x2d0>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 40104c4:	e0bffc17 	ldw	r2,-16(fp)
 40104c8:	10c0020b 	ldhu	r3,8(r2)
 40104cc:	e0bffd0b 	ldhu	r2,-12(fp)
 40104d0:	1884703a 	and	r2,r3,r2
 40104d4:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 40104d8:	e0fff30b 	ldhu	r3,-52(fp)
 40104dc:	e0bffd0b 	ldhu	r2,-12(fp)
 40104e0:	18800d1e 	bne	r3,r2,4010518 <OSFlagAccept+0x15c>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 40104e4:	e0bff383 	ldbu	r2,-50(fp)
 40104e8:	10800058 	cmpnei	r2,r2,1
 40104ec:	10000d1e 	bne	r2,zero,4010524 <OSFlagAccept+0x168>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 40104f0:	e0bffc17 	ldw	r2,-16(fp)
 40104f4:	1080020b 	ldhu	r2,8(r2)
 40104f8:	1007883a 	mov	r3,r2
 40104fc:	e0bff30b 	ldhu	r2,-52(fp)
 4010500:	0084303a 	nor	r2,zero,r2
 4010504:	1884703a 	and	r2,r3,r2
 4010508:	1007883a 	mov	r3,r2
 401050c:	e0bffc17 	ldw	r2,-16(fp)
 4010510:	10c0020d 	sth	r3,8(r2)
 4010514:	00000306 	br	4010524 <OSFlagAccept+0x168>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 4010518:	e0bfff17 	ldw	r2,-4(fp)
 401051c:	00c01c04 	movi	r3,112
 4010520:	10c00005 	stb	r3,0(r2)
 4010524:	e0bff417 	ldw	r2,-48(fp)
 4010528:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401052c:	e0bff617 	ldw	r2,-40(fp)
 4010530:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 4010534:	00005e06 	br	40106b0 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);     /* Extract only the bits we want   */
 4010538:	e0bffc17 	ldw	r2,-16(fp)
 401053c:	10c0020b 	ldhu	r3,8(r2)
 4010540:	e0bffd0b 	ldhu	r2,-12(fp)
 4010544:	1884703a 	and	r2,r3,r2
 4010548:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 401054c:	e0bff30b 	ldhu	r2,-52(fp)
 4010550:	10000d26 	beq	r2,zero,4010588 <OSFlagAccept+0x1cc>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 4010554:	e0bff383 	ldbu	r2,-50(fp)
 4010558:	10800058 	cmpnei	r2,r2,1
 401055c:	10000d1e 	bne	r2,zero,4010594 <OSFlagAccept+0x1d8>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 4010560:	e0bffc17 	ldw	r2,-16(fp)
 4010564:	1080020b 	ldhu	r2,8(r2)
 4010568:	1007883a 	mov	r3,r2
 401056c:	e0bff30b 	ldhu	r2,-52(fp)
 4010570:	0084303a 	nor	r2,zero,r2
 4010574:	1884703a 	and	r2,r3,r2
 4010578:	1007883a 	mov	r3,r2
 401057c:	e0bffc17 	ldw	r2,-16(fp)
 4010580:	10c0020d 	sth	r3,8(r2)
 4010584:	00000306 	br	4010594 <OSFlagAccept+0x1d8>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 4010588:	e0bfff17 	ldw	r2,-4(fp)
 401058c:	00c01c04 	movi	r3,112
 4010590:	10c00005 	stb	r3,0(r2)
 4010594:	e0bff417 	ldw	r2,-48(fp)
 4010598:	e0bff715 	stw	r2,-36(fp)
 401059c:	e0bff717 	ldw	r2,-36(fp)
 40105a0:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 40105a4:	00004206 	br	40106b0 <OSFlagAccept+0x2f4>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 40105a8:	e0bffc17 	ldw	r2,-16(fp)
 40105ac:	1080020b 	ldhu	r2,8(r2)
 40105b0:	0084303a 	nor	r2,zero,r2
 40105b4:	1007883a 	mov	r3,r2
 40105b8:	e0bffd0b 	ldhu	r2,-12(fp)
 40105bc:	1884703a 	and	r2,r3,r2
 40105c0:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 40105c4:	e0fff30b 	ldhu	r3,-52(fp)
 40105c8:	e0bffd0b 	ldhu	r2,-12(fp)
 40105cc:	18800b1e 	bne	r3,r2,40105fc <OSFlagAccept+0x240>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 40105d0:	e0bff383 	ldbu	r2,-50(fp)
 40105d4:	10800058 	cmpnei	r2,r2,1
 40105d8:	10000b1e 	bne	r2,zero,4010608 <OSFlagAccept+0x24c>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 40105dc:	e0bffc17 	ldw	r2,-16(fp)
 40105e0:	10c0020b 	ldhu	r3,8(r2)
 40105e4:	e0bff30b 	ldhu	r2,-52(fp)
 40105e8:	1884b03a 	or	r2,r3,r2
 40105ec:	1007883a 	mov	r3,r2
 40105f0:	e0bffc17 	ldw	r2,-16(fp)
 40105f4:	10c0020d 	sth	r3,8(r2)
 40105f8:	00000306 	br	4010608 <OSFlagAccept+0x24c>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 40105fc:	e0bfff17 	ldw	r2,-4(fp)
 4010600:	00c01c04 	movi	r3,112
 4010604:	10c00005 	stb	r3,0(r2)
 4010608:	e0bff417 	ldw	r2,-48(fp)
 401060c:	e0bff815 	stw	r2,-32(fp)
 4010610:	e0bff817 	ldw	r2,-32(fp)
 4010614:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 4010618:	00002506 	br	40106b0 <OSFlagAccept+0x2f4>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 401061c:	e0bffc17 	ldw	r2,-16(fp)
 4010620:	1080020b 	ldhu	r2,8(r2)
 4010624:	0084303a 	nor	r2,zero,r2
 4010628:	1007883a 	mov	r3,r2
 401062c:	e0bffd0b 	ldhu	r2,-12(fp)
 4010630:	1884703a 	and	r2,r3,r2
 4010634:	e0bff30d 	sth	r2,-52(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 4010638:	e0bff30b 	ldhu	r2,-52(fp)
 401063c:	10000b26 	beq	r2,zero,401066c <OSFlagAccept+0x2b0>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 4010640:	e0bff383 	ldbu	r2,-50(fp)
 4010644:	10800058 	cmpnei	r2,r2,1
 4010648:	10000b1e 	bne	r2,zero,4010678 <OSFlagAccept+0x2bc>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 401064c:	e0bffc17 	ldw	r2,-16(fp)
 4010650:	10c0020b 	ldhu	r3,8(r2)
 4010654:	e0bff30b 	ldhu	r2,-52(fp)
 4010658:	1884b03a 	or	r2,r3,r2
 401065c:	1007883a 	mov	r3,r2
 4010660:	e0bffc17 	ldw	r2,-16(fp)
 4010664:	10c0020d 	sth	r3,8(r2)
 4010668:	00000306 	br	4010678 <OSFlagAccept+0x2bc>
                 }
             } else {
                 *perr = OS_ERR_FLAG_NOT_RDY;
 401066c:	e0bfff17 	ldw	r2,-4(fp)
 4010670:	00c01c04 	movi	r3,112
 4010674:	10c00005 	stb	r3,0(r2)
 4010678:	e0bff417 	ldw	r2,-48(fp)
 401067c:	e0bff915 	stw	r2,-28(fp)
 4010680:	e0bff917 	ldw	r2,-28(fp)
 4010684:	1001703a 	wrctl	status,r2
             }
             OS_EXIT_CRITICAL();
             break;
 4010688:	00000906 	br	40106b0 <OSFlagAccept+0x2f4>
 401068c:	e0bff417 	ldw	r2,-48(fp)
 4010690:	e0bffa15 	stw	r2,-24(fp)
 4010694:	e0bffa17 	ldw	r2,-24(fp)
 4010698:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 401069c:	e03ff30d 	sth	zero,-52(fp)
             *perr     = OS_ERR_FLAG_WAIT_TYPE;
 40106a0:	e0bfff17 	ldw	r2,-4(fp)
 40106a4:	00c01bc4 	movi	r3,111
 40106a8:	10c00005 	stb	r3,0(r2)
             break;
 40106ac:	0001883a 	nop
    }
    return (flags_rdy);
 40106b0:	e0bff30b 	ldhu	r2,-52(fp)
}
 40106b4:	e037883a 	mov	sp,fp
 40106b8:	df000017 	ldw	fp,0(sp)
 40106bc:	dec00104 	addi	sp,sp,4
 40106c0:	f800283a 	ret

040106c4 <OSFlagCreate>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAG_GRP  *OSFlagCreate (OS_FLAGS flags, INT8U *perr)
{
 40106c4:	defff804 	addi	sp,sp,-32
 40106c8:	df000715 	stw	fp,28(sp)
 40106cc:	df000704 	addi	fp,sp,28
 40106d0:	2005883a 	mov	r2,r4
 40106d4:	e17fff15 	stw	r5,-4(fp)
 40106d8:	e0bffe0d 	sth	r2,-8(fp)
    OS_FLAG_GRP *pgrp;
#if OS_CRITICAL_METHOD == 3                         /* Allocate storage for CPU status register        */
    OS_CPU_SR    cpu_sr = 0;
 40106dc:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                       /* Validate 'perr'                                 */
 40106e0:	e0bfff17 	ldw	r2,-4(fp)
 40106e4:	1000021e 	bne	r2,zero,40106f0 <OSFlagCreate+0x2c>
        return ((OS_FLAG_GRP *)0);
 40106e8:	0005883a 	mov	r2,zero
 40106ec:	00003306 	br	40107bc <OSFlagCreate+0xf8>
    }
#endif
    if (OSIntNesting > 0) {                         /* See if called from ISR ...                      */
 40106f0:	d0a73103 	ldbu	r2,-25404(gp)
 40106f4:	10803fcc 	andi	r2,r2,255
 40106f8:	10000526 	beq	r2,zero,4010710 <OSFlagCreate+0x4c>
        *perr = OS_ERR_CREATE_ISR;                  /* ... can't CREATE from an ISR                    */
 40106fc:	e0bfff17 	ldw	r2,-4(fp)
 4010700:	00c00404 	movi	r3,16
 4010704:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAG_GRP *)0);
 4010708:	0005883a 	mov	r2,zero
 401070c:	00002b06 	br	40107bc <OSFlagCreate+0xf8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4010710:	0005303a 	rdctl	r2,status
 4010714:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4010718:	e0fffd17 	ldw	r3,-12(fp)
 401071c:	00bfff84 	movi	r2,-2
 4010720:	1884703a 	and	r2,r3,r2
 4010724:	1001703a 	wrctl	status,r2
  
  return context;
 4010728:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 401072c:	e0bff915 	stw	r2,-28(fp)
    pgrp = OSFlagFreeList;                          /* Get next free event flag                        */
 4010730:	d0a73417 	ldw	r2,-25392(gp)
 4010734:	e0bffb15 	stw	r2,-20(fp)
    if (pgrp != (OS_FLAG_GRP *)0) {                 /* See if we have event flag groups available      */
 4010738:	e0bffb17 	ldw	r2,-20(fp)
 401073c:	10001726 	beq	r2,zero,401079c <OSFlagCreate+0xd8>
                                                    /* Adjust free list                                */
        OSFlagFreeList       = (OS_FLAG_GRP *)OSFlagFreeList->OSFlagWaitList;
 4010740:	d0a73417 	ldw	r2,-25392(gp)
 4010744:	10800117 	ldw	r2,4(r2)
 4010748:	d0a73415 	stw	r2,-25392(gp)
        pgrp->OSFlagType     = OS_EVENT_TYPE_FLAG;  /* Set to event flag group type                    */
 401074c:	e0bffb17 	ldw	r2,-20(fp)
 4010750:	00c00144 	movi	r3,5
 4010754:	10c00005 	stb	r3,0(r2)
        pgrp->OSFlagFlags    = flags;               /* Set to desired initial value                    */
 4010758:	e0bffb17 	ldw	r2,-20(fp)
 401075c:	e0fffe0b 	ldhu	r3,-8(fp)
 4010760:	10c0020d 	sth	r3,8(r2)
        pgrp->OSFlagWaitList = (void *)0;           /* Clear list of tasks waiting on flags            */
 4010764:	e0bffb17 	ldw	r2,-20(fp)
 4010768:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp->OSFlagName[0]  = '?';
 401076c:	e0bffb17 	ldw	r2,-20(fp)
 4010770:	00c00fc4 	movi	r3,63
 4010774:	10c00285 	stb	r3,10(r2)
        pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 4010778:	e0bffb17 	ldw	r2,-20(fp)
 401077c:	100002c5 	stb	zero,11(r2)
 4010780:	e0bff917 	ldw	r2,-28(fp)
 4010784:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4010788:	e0bffa17 	ldw	r2,-24(fp)
 401078c:	1001703a 	wrctl	status,r2
#endif
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_NONE;
 4010790:	e0bfff17 	ldw	r2,-4(fp)
 4010794:	10000005 	stb	zero,0(r2)
 4010798:	00000706 	br	40107b8 <OSFlagCreate+0xf4>
 401079c:	e0bff917 	ldw	r2,-28(fp)
 40107a0:	e0bffc15 	stw	r2,-16(fp)
 40107a4:	e0bffc17 	ldw	r2,-16(fp)
 40107a8:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();
        *perr                = OS_ERR_FLAG_GRP_DEPLETED;
 40107ac:	e0bfff17 	ldw	r2,-4(fp)
 40107b0:	00c01c84 	movi	r3,114
 40107b4:	10c00005 	stb	r3,0(r2)
    }
    return (pgrp);                                  /* Return pointer to event flag group              */
 40107b8:	e0bffb17 	ldw	r2,-20(fp)
}
 40107bc:	e037883a 	mov	sp,fp
 40107c0:	df000017 	ldw	fp,0(sp)
 40107c4:	dec00104 	addi	sp,sp,4
 40107c8:	f800283a 	ret

040107cc <OSFlagDel>:
*********************************************************************************************************
*/

#if OS_FLAG_DEL_EN > 0
OS_FLAG_GRP  *OSFlagDel (OS_FLAG_GRP *pgrp, INT8U opt, INT8U *perr)
{
 40107cc:	defff204 	addi	sp,sp,-56
 40107d0:	dfc00d15 	stw	ra,52(sp)
 40107d4:	df000c15 	stw	fp,48(sp)
 40107d8:	df000c04 	addi	fp,sp,48
 40107dc:	e13ffd15 	stw	r4,-12(fp)
 40107e0:	2805883a 	mov	r2,r5
 40107e4:	e1bfff15 	stw	r6,-4(fp)
 40107e8:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       tasks_waiting;
    OS_FLAG_NODE *pnode;
    OS_FLAG_GRP  *pgrp_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 40107ec:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 40107f0:	e0bfff17 	ldw	r2,-4(fp)
 40107f4:	1000021e 	bne	r2,zero,4010800 <OSFlagDel+0x34>
        return (pgrp);
 40107f8:	e0bffd17 	ldw	r2,-12(fp)
 40107fc:	00008006 	br	4010a00 <OSFlagDel+0x234>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 4010800:	e0bffd17 	ldw	r2,-12(fp)
 4010804:	1000051e 	bne	r2,zero,401081c <OSFlagDel+0x50>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 4010808:	e0bfff17 	ldw	r2,-4(fp)
 401080c:	00c01b84 	movi	r3,110
 4010810:	10c00005 	stb	r3,0(r2)
        return (pgrp);
 4010814:	e0bffd17 	ldw	r2,-12(fp)
 4010818:	00007906 	br	4010a00 <OSFlagDel+0x234>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 401081c:	d0a73103 	ldbu	r2,-25404(gp)
 4010820:	10803fcc 	andi	r2,r2,255
 4010824:	10000526 	beq	r2,zero,401083c <OSFlagDel+0x70>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 4010828:	e0bfff17 	ldw	r2,-4(fp)
 401082c:	00c003c4 	movi	r3,15
 4010830:	10c00005 	stb	r3,0(r2)
        return (pgrp);
 4010834:	e0bffd17 	ldw	r2,-12(fp)
 4010838:	00007106 	br	4010a00 <OSFlagDel+0x234>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event group type                */
 401083c:	e0bffd17 	ldw	r2,-12(fp)
 4010840:	10800003 	ldbu	r2,0(r2)
 4010844:	10803fcc 	andi	r2,r2,255
 4010848:	10800160 	cmpeqi	r2,r2,5
 401084c:	1000051e 	bne	r2,zero,4010864 <OSFlagDel+0x98>
        *perr = OS_ERR_EVENT_TYPE;
 4010850:	e0bfff17 	ldw	r2,-4(fp)
 4010854:	00c00044 	movi	r3,1
 4010858:	10c00005 	stb	r3,0(r2)
        return (pgrp);
 401085c:	e0bffd17 	ldw	r2,-12(fp)
 4010860:	00006706 	br	4010a00 <OSFlagDel+0x234>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4010864:	0005303a 	rdctl	r2,status
 4010868:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401086c:	e0fffc17 	ldw	r3,-16(fp)
 4010870:	00bfff84 	movi	r2,-2
 4010874:	1884703a 	and	r2,r3,r2
 4010878:	1001703a 	wrctl	status,r2
  
  return context;
 401087c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 4010880:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagWaitList != (void *)0) {               /* See if any tasks waiting on event flags  */
 4010884:	e0bffd17 	ldw	r2,-12(fp)
 4010888:	10800117 	ldw	r2,4(r2)
 401088c:	10000326 	beq	r2,zero,401089c <OSFlagDel+0xd0>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 4010890:	00800044 	movi	r2,1
 4010894:	e0bff405 	stb	r2,-48(fp)
 4010898:	00000106 	br	40108a0 <OSFlagDel+0xd4>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 401089c:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
 40108a0:	e0bffe03 	ldbu	r2,-8(fp)
 40108a4:	10000326 	beq	r2,zero,40108b4 <OSFlagDel+0xe8>
 40108a8:	10800060 	cmpeqi	r2,r2,1
 40108ac:	1000231e 	bne	r2,zero,401093c <OSFlagDel+0x170>
 40108b0:	00004806 	br	40109d4 <OSFlagDel+0x208>
        case OS_DEL_NO_PEND:                               /* Delete group if no task waiting          */
             if (tasks_waiting == OS_FALSE) {
 40108b4:	e0bff403 	ldbu	r2,-48(fp)
 40108b8:	1000161e 	bne	r2,zero,4010914 <OSFlagDel+0x148>
#if OS_FLAG_NAME_SIZE > 1
                 pgrp->OSFlagName[0]  = '?';               /* Unknown name                             */
 40108bc:	e0bffd17 	ldw	r2,-12(fp)
 40108c0:	00c00fc4 	movi	r3,63
 40108c4:	10c00285 	stb	r3,10(r2)
                 pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 40108c8:	e0bffd17 	ldw	r2,-12(fp)
 40108cc:	100002c5 	stb	zero,11(r2)
#endif
                 pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 40108d0:	e0bffd17 	ldw	r2,-12(fp)
 40108d4:	10000005 	stb	zero,0(r2)
                 pgrp->OSFlagWaitList = (void *)OSFlagFreeList; /* Return group to free list           */
 40108d8:	d0e73417 	ldw	r3,-25392(gp)
 40108dc:	e0bffd17 	ldw	r2,-12(fp)
 40108e0:	10c00115 	stw	r3,4(r2)
                 pgrp->OSFlagFlags    = (OS_FLAGS)0;
 40108e4:	e0bffd17 	ldw	r2,-12(fp)
 40108e8:	1000020d 	sth	zero,8(r2)
                 OSFlagFreeList       = pgrp;
 40108ec:	e0bffd17 	ldw	r2,-12(fp)
 40108f0:	d0a73415 	stw	r2,-25392(gp)
 40108f4:	e0bff717 	ldw	r2,-36(fp)
 40108f8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40108fc:	e0bff817 	ldw	r2,-32(fp)
 4010900:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
 4010904:	e0bfff17 	ldw	r2,-4(fp)
 4010908:	10000005 	stb	zero,0(r2)
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
 401090c:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
                 pgrp_return          = pgrp;
             }
             break;
 4010910:	00003a06 	br	40109fc <OSFlagDel+0x230>
 4010914:	e0bff717 	ldw	r2,-36(fp)
 4010918:	e0bff915 	stw	r2,-28(fp)
 401091c:	e0bff917 	ldw	r2,-28(fp)
 4010920:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_NONE;
                 pgrp_return          = (OS_FLAG_GRP *)0;  /* Event Flag Group has been deleted        */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                = OS_ERR_TASK_WAITING;
 4010924:	e0bfff17 	ldw	r2,-4(fp)
 4010928:	00c01244 	movi	r3,73
 401092c:	10c00005 	stb	r3,0(r2)
                 pgrp_return          = pgrp;
 4010930:	e0bffd17 	ldw	r2,-12(fp)
 4010934:	e0bff615 	stw	r2,-40(fp)
             }
             break;
 4010938:	00003006 	br	40109fc <OSFlagDel+0x230>

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 401093c:	e0bffd17 	ldw	r2,-12(fp)
 4010940:	10800117 	ldw	r2,4(r2)
 4010944:	e0bff515 	stw	r2,-44(fp)
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 4010948:	00000606 	br	4010964 <OSFlagDel+0x198>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
 401094c:	000b883a 	mov	r5,zero
 4010950:	e13ff517 	ldw	r4,-44(fp)
 4010954:	40119380 	call	4011938 <OS_FlagTaskRdy>
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 4010958:	e0bff517 	ldw	r2,-44(fp)
 401095c:	10800017 	ldw	r2,0(r2)
 4010960:	e0bff515 	stw	r2,-44(fp)
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the event flag group       */
             pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
             while (pnode != (OS_FLAG_NODE *)0) {          /* Ready ALL tasks waiting for flags        */
 4010964:	e0bff517 	ldw	r2,-44(fp)
 4010968:	103ff81e 	bne	r2,zero,401094c <__alt_mem_onchip_memory2_0+0xfbff094c>
                 (void)OS_FlagTaskRdy(pnode, (OS_FLAGS)0);
                 pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
             }
#if OS_FLAG_NAME_SIZE > 1
             pgrp->OSFlagName[0]  = '?';                   /* Unknown name                             */
 401096c:	e0bffd17 	ldw	r2,-12(fp)
 4010970:	00c00fc4 	movi	r3,63
 4010974:	10c00285 	stb	r3,10(r2)
             pgrp->OSFlagName[1]  = OS_ASCII_NUL;
 4010978:	e0bffd17 	ldw	r2,-12(fp)
 401097c:	100002c5 	stb	zero,11(r2)
#endif
             pgrp->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 4010980:	e0bffd17 	ldw	r2,-12(fp)
 4010984:	10000005 	stb	zero,0(r2)
             pgrp->OSFlagWaitList = (void *)OSFlagFreeList;/* Return group to free list                */
 4010988:	d0e73417 	ldw	r3,-25392(gp)
 401098c:	e0bffd17 	ldw	r2,-12(fp)
 4010990:	10c00115 	stw	r3,4(r2)
             pgrp->OSFlagFlags    = (OS_FLAGS)0;
 4010994:	e0bffd17 	ldw	r2,-12(fp)
 4010998:	1000020d 	sth	zero,8(r2)
             OSFlagFreeList       = pgrp;
 401099c:	e0bffd17 	ldw	r2,-12(fp)
 40109a0:	d0a73415 	stw	r2,-25392(gp)
 40109a4:	e0bff717 	ldw	r2,-36(fp)
 40109a8:	e0bffa15 	stw	r2,-24(fp)
 40109ac:	e0bffa17 	ldw	r2,-24(fp)
 40109b0:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 40109b4:	e0bff403 	ldbu	r2,-48(fp)
 40109b8:	10800058 	cmpnei	r2,r2,1
 40109bc:	1000011e 	bne	r2,zero,40109c4 <OSFlagDel+0x1f8>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 40109c0:	400fb580 	call	400fb58 <OS_Sched>
             }
             *perr = OS_ERR_NONE;
 40109c4:	e0bfff17 	ldw	r2,-4(fp)
 40109c8:	10000005 	stb	zero,0(r2)
             pgrp_return          = (OS_FLAG_GRP *)0;      /* Event Flag Group has been deleted        */
 40109cc:	e03ff615 	stw	zero,-40(fp)
             break;
 40109d0:	00000a06 	br	40109fc <OSFlagDel+0x230>
 40109d4:	e0bff717 	ldw	r2,-36(fp)
 40109d8:	e0bffb15 	stw	r2,-20(fp)
 40109dc:	e0bffb17 	ldw	r2,-20(fp)
 40109e0:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                = OS_ERR_INVALID_OPT;
 40109e4:	e0bfff17 	ldw	r2,-4(fp)
 40109e8:	00c001c4 	movi	r3,7
 40109ec:	10c00005 	stb	r3,0(r2)
             pgrp_return          = pgrp;
 40109f0:	e0bffd17 	ldw	r2,-12(fp)
 40109f4:	e0bff615 	stw	r2,-40(fp)
             break;
 40109f8:	0001883a 	nop
    }
    return (pgrp_return);
 40109fc:	e0bff617 	ldw	r2,-40(fp)
}
 4010a00:	e037883a 	mov	sp,fp
 4010a04:	dfc00117 	ldw	ra,4(sp)
 4010a08:	df000017 	ldw	fp,0(sp)
 4010a0c:	dec00204 	addi	sp,sp,8
 4010a10:	f800283a 	ret

04010a14 <OSFlagNameGet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
INT8U  OSFlagNameGet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 4010a14:	defff604 	addi	sp,sp,-40
 4010a18:	dfc00915 	stw	ra,36(sp)
 4010a1c:	df000815 	stw	fp,32(sp)
 4010a20:	df000804 	addi	fp,sp,32
 4010a24:	e13ffd15 	stw	r4,-12(fp)
 4010a28:	e17ffe15 	stw	r5,-8(fp)
 4010a2c:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4010a30:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 4010a34:	e0bfff17 	ldw	r2,-4(fp)
 4010a38:	1000021e 	bne	r2,zero,4010a44 <OSFlagNameGet+0x30>
        return (0);
 4010a3c:	0005883a 	mov	r2,zero
 4010a40:	00003906 	br	4010b28 <OSFlagNameGet+0x114>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 4010a44:	e0bffd17 	ldw	r2,-12(fp)
 4010a48:	1000051e 	bne	r2,zero,4010a60 <OSFlagNameGet+0x4c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 4010a4c:	e0bfff17 	ldw	r2,-4(fp)
 4010a50:	00c01b84 	movi	r3,110
 4010a54:	10c00005 	stb	r3,0(r2)
        return (0);
 4010a58:	0005883a 	mov	r2,zero
 4010a5c:	00003206 	br	4010b28 <OSFlagNameGet+0x114>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 4010a60:	e0bffe17 	ldw	r2,-8(fp)
 4010a64:	1000051e 	bne	r2,zero,4010a7c <OSFlagNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
 4010a68:	e0bfff17 	ldw	r2,-4(fp)
 4010a6c:	00c00304 	movi	r3,12
 4010a70:	10c00005 	stb	r3,0(r2)
        return (0);
 4010a74:	0005883a 	mov	r2,zero
 4010a78:	00002b06 	br	4010b28 <OSFlagNameGet+0x114>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 4010a7c:	d0a73103 	ldbu	r2,-25404(gp)
 4010a80:	10803fcc 	andi	r2,r2,255
 4010a84:	10000526 	beq	r2,zero,4010a9c <OSFlagNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
 4010a88:	e0bfff17 	ldw	r2,-4(fp)
 4010a8c:	00c00444 	movi	r3,17
 4010a90:	10c00005 	stb	r3,0(r2)
        return (0);
 4010a94:	0005883a 	mov	r2,zero
 4010a98:	00002306 	br	4010b28 <OSFlagNameGet+0x114>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4010a9c:	0005303a 	rdctl	r2,status
 4010aa0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4010aa4:	e0fffc17 	ldw	r3,-16(fp)
 4010aa8:	00bfff84 	movi	r2,-2
 4010aac:	1884703a 	and	r2,r3,r2
 4010ab0:	1001703a 	wrctl	status,r2
  
  return context;
 4010ab4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 4010ab8:	e0bff815 	stw	r2,-32(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 4010abc:	e0bffd17 	ldw	r2,-12(fp)
 4010ac0:	10800003 	ldbu	r2,0(r2)
 4010ac4:	10803fcc 	andi	r2,r2,255
 4010ac8:	10800160 	cmpeqi	r2,r2,5
 4010acc:	1000091e 	bne	r2,zero,4010af4 <OSFlagNameGet+0xe0>
 4010ad0:	e0bff817 	ldw	r2,-32(fp)
 4010ad4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4010ad8:	e0bff917 	ldw	r2,-28(fp)
 4010adc:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 4010ae0:	e0bfff17 	ldw	r2,-4(fp)
 4010ae4:	00c00044 	movi	r3,1
 4010ae8:	10c00005 	stb	r3,0(r2)
        return (0);
 4010aec:	0005883a 	mov	r2,zero
 4010af0:	00000d06 	br	4010b28 <OSFlagNameGet+0x114>
    }
    len   = OS_StrCopy(pname, pgrp->OSFlagName); /* Copy name from OS_FLAG_GRP                         */
 4010af4:	e0bffd17 	ldw	r2,-12(fp)
 4010af8:	10800284 	addi	r2,r2,10
 4010afc:	100b883a 	mov	r5,r2
 4010b00:	e13ffe17 	ldw	r4,-8(fp)
 4010b04:	400fc9c0 	call	400fc9c <OS_StrCopy>
 4010b08:	e0bffb05 	stb	r2,-20(fp)
 4010b0c:	e0bff817 	ldw	r2,-32(fp)
 4010b10:	e0bffa15 	stw	r2,-24(fp)
 4010b14:	e0bffa17 	ldw	r2,-24(fp)
 4010b18:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 4010b1c:	e0bfff17 	ldw	r2,-4(fp)
 4010b20:	10000005 	stb	zero,0(r2)
    return (len);
 4010b24:	e0bffb03 	ldbu	r2,-20(fp)
}
 4010b28:	e037883a 	mov	sp,fp
 4010b2c:	dfc00117 	ldw	ra,4(sp)
 4010b30:	df000017 	ldw	fp,0(sp)
 4010b34:	dec00204 	addi	sp,sp,8
 4010b38:	f800283a 	ret

04010b3c <OSFlagNameSet>:
*********************************************************************************************************
*/

#if OS_FLAG_NAME_SIZE > 1
void  OSFlagNameSet (OS_FLAG_GRP *pgrp, INT8U *pname, INT8U *perr)
{
 4010b3c:	defff504 	addi	sp,sp,-44
 4010b40:	dfc00a15 	stw	ra,40(sp)
 4010b44:	df000915 	stw	fp,36(sp)
 4010b48:	df000904 	addi	fp,sp,36
 4010b4c:	e13ffd15 	stw	r4,-12(fp)
 4010b50:	e17ffe15 	stw	r5,-8(fp)
 4010b54:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4010b58:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 4010b5c:	e0bfff17 	ldw	r2,-4(fp)
 4010b60:	10004326 	beq	r2,zero,4010c70 <OSFlagNameSet+0x134>
        return;
    }
    if (pgrp == (OS_FLAG_GRP *)0) {              /* Is 'pgrp' a NULL pointer?                          */
 4010b64:	e0bffd17 	ldw	r2,-12(fp)
 4010b68:	1000041e 	bne	r2,zero,4010b7c <OSFlagNameSet+0x40>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 4010b6c:	e0bfff17 	ldw	r2,-4(fp)
 4010b70:	00c01b84 	movi	r3,110
 4010b74:	10c00005 	stb	r3,0(r2)
        return;
 4010b78:	00003e06 	br	4010c74 <OSFlagNameSet+0x138>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 4010b7c:	e0bffe17 	ldw	r2,-8(fp)
 4010b80:	1000041e 	bne	r2,zero,4010b94 <OSFlagNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
 4010b84:	e0bfff17 	ldw	r2,-4(fp)
 4010b88:	00c00304 	movi	r3,12
 4010b8c:	10c00005 	stb	r3,0(r2)
        return;
 4010b90:	00003806 	br	4010c74 <OSFlagNameSet+0x138>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 4010b94:	d0a73103 	ldbu	r2,-25404(gp)
 4010b98:	10803fcc 	andi	r2,r2,255
 4010b9c:	10000426 	beq	r2,zero,4010bb0 <OSFlagNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
 4010ba0:	e0bfff17 	ldw	r2,-4(fp)
 4010ba4:	00c00484 	movi	r3,18
 4010ba8:	10c00005 	stb	r3,0(r2)
        return;
 4010bac:	00003106 	br	4010c74 <OSFlagNameSet+0x138>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4010bb0:	0005303a 	rdctl	r2,status
 4010bb4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4010bb8:	e0fffc17 	ldw	r3,-16(fp)
 4010bbc:	00bfff84 	movi	r2,-2
 4010bc0:	1884703a 	and	r2,r3,r2
 4010bc4:	1001703a 	wrctl	status,r2
  
  return context;
 4010bc8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 4010bcc:	e0bff715 	stw	r2,-36(fp)
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {
 4010bd0:	e0bffd17 	ldw	r2,-12(fp)
 4010bd4:	10800003 	ldbu	r2,0(r2)
 4010bd8:	10803fcc 	andi	r2,r2,255
 4010bdc:	10800160 	cmpeqi	r2,r2,5
 4010be0:	1000081e 	bne	r2,zero,4010c04 <OSFlagNameSet+0xc8>
 4010be4:	e0bff717 	ldw	r2,-36(fp)
 4010be8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4010bec:	e0bff817 	ldw	r2,-32(fp)
 4010bf0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_EVENT_TYPE;
 4010bf4:	e0bfff17 	ldw	r2,-4(fp)
 4010bf8:	00c00044 	movi	r3,1
 4010bfc:	10c00005 	stb	r3,0(r2)
        return;
 4010c00:	00001c06 	br	4010c74 <OSFlagNameSet+0x138>
    }
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 4010c04:	e13ffe17 	ldw	r4,-8(fp)
 4010c08:	400fd100 	call	400fd10 <OS_StrLen>
 4010c0c:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_FLAG_NAME_SIZE - 1)) {         /* No                                                 */
 4010c10:	e0bffa03 	ldbu	r2,-24(fp)
 4010c14:	10800830 	cmpltui	r2,r2,32
 4010c18:	1000081e 	bne	r2,zero,4010c3c <OSFlagNameSet+0x100>
 4010c1c:	e0bff717 	ldw	r2,-36(fp)
 4010c20:	e0bff915 	stw	r2,-28(fp)
 4010c24:	e0bff917 	ldw	r2,-28(fp)
 4010c28:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_FLAG_NAME_TOO_LONG;
 4010c2c:	e0bfff17 	ldw	r2,-4(fp)
 4010c30:	00c01cc4 	movi	r3,115
 4010c34:	10c00005 	stb	r3,0(r2)
        return;
 4010c38:	00000e06 	br	4010c74 <OSFlagNameSet+0x138>
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
 4010c3c:	e0bffd17 	ldw	r2,-12(fp)
 4010c40:	10800284 	addi	r2,r2,10
 4010c44:	e17ffe17 	ldw	r5,-8(fp)
 4010c48:	1009883a 	mov	r4,r2
 4010c4c:	400fc9c0 	call	400fc9c <OS_StrCopy>
 4010c50:	e0bff717 	ldw	r2,-36(fp)
 4010c54:	e0bffb15 	stw	r2,-20(fp)
 4010c58:	e0bffb17 	ldw	r2,-20(fp)
 4010c5c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 4010c60:	e0bfff17 	ldw	r2,-4(fp)
 4010c64:	10000005 	stb	zero,0(r2)
    return;
 4010c68:	0001883a 	nop
 4010c6c:	00000106 	br	4010c74 <OSFlagNameSet+0x138>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
 4010c70:	0001883a 	nop
    }
    (void)OS_StrCopy(pgrp->OSFlagName, pname);   /* Yes, copy name from OS_FLAG_GRP                    */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
    return;
}
 4010c74:	e037883a 	mov	sp,fp
 4010c78:	dfc00117 	ldw	ra,4(sp)
 4010c7c:	df000017 	ldw	fp,0(sp)
 4010c80:	dec00204 	addi	sp,sp,8
 4010c84:	f800283a 	ret

04010c88 <OSFlagPend>:
*                 event flags.
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPend (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U wait_type, INT16U timeout, INT8U *perr)
{
 4010c88:	deffe104 	addi	sp,sp,-124
 4010c8c:	dfc01e15 	stw	ra,120(sp)
 4010c90:	df001d15 	stw	fp,116(sp)
 4010c94:	df001d04 	addi	fp,sp,116
 4010c98:	e13ffc15 	stw	r4,-16(fp)
 4010c9c:	2809883a 	mov	r4,r5
 4010ca0:	3007883a 	mov	r3,r6
 4010ca4:	3805883a 	mov	r2,r7
 4010ca8:	e13ffd0d 	sth	r4,-12(fp)
 4010cac:	e0fffe05 	stb	r3,-8(fp)
 4010cb0:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAGS      flags_rdy;
    INT8U         result;
    INT8U         pend_stat;
    BOOLEAN       consume;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 4010cb4:	e03fe515 	stw	zero,-108(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 4010cb8:	e0800217 	ldw	r2,8(fp)
 4010cbc:	1000021e 	bne	r2,zero,4010cc8 <OSFlagPend+0x40>
        return ((OS_FLAGS)0);
 4010cc0:	0005883a 	mov	r2,zero
 4010cc4:	00015906 	br	401122c <OSFlagPend+0x5a4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                        /* Validate 'pgrp'                          */
 4010cc8:	e0bffc17 	ldw	r2,-16(fp)
 4010ccc:	1000051e 	bne	r2,zero,4010ce4 <OSFlagPend+0x5c>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 4010cd0:	e0800217 	ldw	r2,8(fp)
 4010cd4:	00c01b84 	movi	r3,110
 4010cd8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 4010cdc:	0005883a 	mov	r2,zero
 4010ce0:	00015206 	br	401122c <OSFlagPend+0x5a4>
    }
#endif
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 4010ce4:	d0a73103 	ldbu	r2,-25404(gp)
 4010ce8:	10803fcc 	andi	r2,r2,255
 4010cec:	10000526 	beq	r2,zero,4010d04 <OSFlagPend+0x7c>
        *perr = OS_ERR_PEND_ISR;                           /* ... can't PEND from an ISR               */
 4010cf0:	e0800217 	ldw	r2,8(fp)
 4010cf4:	00c00084 	movi	r3,2
 4010cf8:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 4010cfc:	0005883a 	mov	r2,zero
 4010d00:	00014a06 	br	401122c <OSFlagPend+0x5a4>
    }
    if (OSLockNesting > 0) {                               /* See if called with scheduler locked ...  */
 4010d04:	d0a72303 	ldbu	r2,-25460(gp)
 4010d08:	10803fcc 	andi	r2,r2,255
 4010d0c:	10000526 	beq	r2,zero,4010d24 <OSFlagPend+0x9c>
        *perr = OS_ERR_PEND_LOCKED;                        /* ... can't PEND when locked               */
 4010d10:	e0800217 	ldw	r2,8(fp)
 4010d14:	00c00344 	movi	r3,13
 4010d18:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 4010d1c:	0005883a 	mov	r2,zero
 4010d20:	00014206 	br	401122c <OSFlagPend+0x5a4>
    }
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {          /* Validate event block type                */
 4010d24:	e0bffc17 	ldw	r2,-16(fp)
 4010d28:	10800003 	ldbu	r2,0(r2)
 4010d2c:	10803fcc 	andi	r2,r2,255
 4010d30:	10800160 	cmpeqi	r2,r2,5
 4010d34:	1000051e 	bne	r2,zero,4010d4c <OSFlagPend+0xc4>
        *perr = OS_ERR_EVENT_TYPE;
 4010d38:	e0800217 	ldw	r2,8(fp)
 4010d3c:	00c00044 	movi	r3,1
 4010d40:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 4010d44:	0005883a 	mov	r2,zero
 4010d48:	00013806 	br	401122c <OSFlagPend+0x5a4>
    }
    result = (INT8U)(wait_type & OS_FLAG_CONSUME);
 4010d4c:	e0fffe03 	ldbu	r3,-8(fp)
 4010d50:	00bfe004 	movi	r2,-128
 4010d54:	1884703a 	and	r2,r3,r2
 4010d58:	e0bfe605 	stb	r2,-104(fp)
    if (result != (INT8U)0) {                             /* See if we need to consume the flags      */
 4010d5c:	e0bfe603 	ldbu	r2,-104(fp)
 4010d60:	10000626 	beq	r2,zero,4010d7c <OSFlagPend+0xf4>
        wait_type &= ~(INT8U)OS_FLAG_CONSUME;
 4010d64:	e0bffe03 	ldbu	r2,-8(fp)
 4010d68:	10801fcc 	andi	r2,r2,127
 4010d6c:	e0bffe05 	stb	r2,-8(fp)
        consume    = OS_TRUE;
 4010d70:	00800044 	movi	r2,1
 4010d74:	e0bfe405 	stb	r2,-112(fp)
 4010d78:	00000106 	br	4010d80 <OSFlagPend+0xf8>
    } else {
        consume    = OS_FALSE;
 4010d7c:	e03fe405 	stb	zero,-112(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4010d80:	0005303a 	rdctl	r2,status
 4010d84:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4010d88:	e0fff617 	ldw	r3,-40(fp)
 4010d8c:	00bfff84 	movi	r2,-2
 4010d90:	1884703a 	and	r2,r3,r2
 4010d94:	1001703a 	wrctl	status,r2
  
  return context;
 4010d98:	e0bff617 	ldw	r2,-40(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 4010d9c:	e0bfe515 	stw	r2,-108(fp)
    switch (wait_type) {
 4010da0:	e0bffe03 	ldbu	r2,-8(fp)
 4010da4:	10c00060 	cmpeqi	r3,r2,1
 4010da8:	1800921e 	bne	r3,zero,4010ff4 <OSFlagPend+0x36c>
 4010dac:	10c00088 	cmpgei	r3,r2,2
 4010db0:	1800021e 	bne	r3,zero,4010dbc <OSFlagPend+0x134>
 4010db4:	10006126 	beq	r2,zero,4010f3c <OSFlagPend+0x2b4>
 4010db8:	0000bb06 	br	40110a8 <OSFlagPend+0x420>
 4010dbc:	10c000a0 	cmpeqi	r3,r2,2
 4010dc0:	1800031e 	bne	r3,zero,4010dd0 <OSFlagPend+0x148>
 4010dc4:	108000e0 	cmpeqi	r2,r2,3
 4010dc8:	10002f1e 	bne	r2,zero,4010e88 <OSFlagPend+0x200>
 4010dcc:	0000b606 	br	40110a8 <OSFlagPend+0x420>
        case OS_FLAG_WAIT_SET_ALL:                         /* See if all required flags are set        */
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);   /* Extract only the bits we want     */
 4010dd0:	e0bffc17 	ldw	r2,-16(fp)
 4010dd4:	10c0020b 	ldhu	r3,8(r2)
 4010dd8:	e0bffd0b 	ldhu	r2,-12(fp)
 4010ddc:	1884703a 	and	r2,r3,r2
 4010de0:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 4010de4:	e0ffe80b 	ldhu	r3,-96(fp)
 4010de8:	e0bffd0b 	ldhu	r2,-12(fp)
 4010dec:	1880171e 	bne	r3,r2,4010e4c <OSFlagPend+0x1c4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 4010df0:	e0bfe403 	ldbu	r2,-112(fp)
 4010df4:	10800058 	cmpnei	r2,r2,1
 4010df8:	1000091e 	bne	r2,zero,4010e20 <OSFlagPend+0x198>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we wanted      */
 4010dfc:	e0bffc17 	ldw	r2,-16(fp)
 4010e00:	1080020b 	ldhu	r2,8(r2)
 4010e04:	1007883a 	mov	r3,r2
 4010e08:	e0bfe80b 	ldhu	r2,-96(fp)
 4010e0c:	0084303a 	nor	r2,zero,r2
 4010e10:	1884703a 	and	r2,r3,r2
 4010e14:	1007883a 	mov	r3,r2
 4010e18:	e0bffc17 	ldw	r2,-16(fp)
 4010e1c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 4010e20:	d0a73217 	ldw	r2,-25400(gp)
 4010e24:	e0ffe80b 	ldhu	r3,-96(fp)
 4010e28:	10c00b0d 	sth	r3,44(r2)
 4010e2c:	e0bfe517 	ldw	r2,-108(fp)
 4010e30:	e0bfe715 	stw	r2,-100(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4010e34:	e0bfe717 	ldw	r2,-100(fp)
 4010e38:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 4010e3c:	e0800217 	ldw	r2,8(fp)
 4010e40:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 4010e44:	e0bfe80b 	ldhu	r2,-96(fp)
 4010e48:	0000f806 	br	401122c <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 4010e4c:	e13ffd0b 	ldhu	r4,-12(fp)
 4010e50:	e17ffe03 	ldbu	r5,-8(fp)
 4010e54:	e0bfff0b 	ldhu	r2,-4(fp)
 4010e58:	e0fff704 	addi	r3,fp,-36
 4010e5c:	d8800015 	stw	r2,0(sp)
 4010e60:	280f883a 	mov	r7,r5
 4010e64:	200d883a 	mov	r6,r4
 4010e68:	180b883a 	mov	r5,r3
 4010e6c:	e13ffc17 	ldw	r4,-16(fp)
 4010e70:	40116f80 	call	40116f8 <OS_FlagBlock>
 4010e74:	e0bfe517 	ldw	r2,-108(fp)
 4010e78:	e0bfe915 	stw	r2,-92(fp)
 4010e7c:	e0bfe917 	ldw	r2,-92(fp)
 4010e80:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 4010e84:	00009206 	br	40110d0 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_SET_ANY:
             flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & flags);    /* Extract only the bits we want    */
 4010e88:	e0bffc17 	ldw	r2,-16(fp)
 4010e8c:	10c0020b 	ldhu	r3,8(r2)
 4010e90:	e0bffd0b 	ldhu	r2,-12(fp)
 4010e94:	1884703a 	and	r2,r3,r2
 4010e98:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag set                      */
 4010e9c:	e0bfe80b 	ldhu	r2,-96(fp)
 4010ea0:	10001726 	beq	r2,zero,4010f00 <OSFlagPend+0x278>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 4010ea4:	e0bfe403 	ldbu	r2,-112(fp)
 4010ea8:	10800058 	cmpnei	r2,r2,1
 4010eac:	1000091e 	bne	r2,zero,4010ed4 <OSFlagPend+0x24c>
                     pgrp->OSFlagFlags &= ~flags_rdy;      /* Clear ONLY the flags that we got         */
 4010eb0:	e0bffc17 	ldw	r2,-16(fp)
 4010eb4:	1080020b 	ldhu	r2,8(r2)
 4010eb8:	1007883a 	mov	r3,r2
 4010ebc:	e0bfe80b 	ldhu	r2,-96(fp)
 4010ec0:	0084303a 	nor	r2,zero,r2
 4010ec4:	1884703a 	and	r2,r3,r2
 4010ec8:	1007883a 	mov	r3,r2
 4010ecc:	e0bffc17 	ldw	r2,-16(fp)
 4010ed0:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 4010ed4:	d0a73217 	ldw	r2,-25400(gp)
 4010ed8:	e0ffe80b 	ldhu	r3,-96(fp)
 4010edc:	10c00b0d 	sth	r3,44(r2)
 4010ee0:	e0bfe517 	ldw	r2,-108(fp)
 4010ee4:	e0bfea15 	stw	r2,-88(fp)
 4010ee8:	e0bfea17 	ldw	r2,-88(fp)
 4010eec:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 4010ef0:	e0800217 	ldw	r2,8(fp)
 4010ef4:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 4010ef8:	e0bfe80b 	ldhu	r2,-96(fp)
 4010efc:	0000cb06 	br	401122c <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 4010f00:	e13ffd0b 	ldhu	r4,-12(fp)
 4010f04:	e17ffe03 	ldbu	r5,-8(fp)
 4010f08:	e0bfff0b 	ldhu	r2,-4(fp)
 4010f0c:	e0fff704 	addi	r3,fp,-36
 4010f10:	d8800015 	stw	r2,0(sp)
 4010f14:	280f883a 	mov	r7,r5
 4010f18:	200d883a 	mov	r6,r4
 4010f1c:	180b883a 	mov	r5,r3
 4010f20:	e13ffc17 	ldw	r4,-16(fp)
 4010f24:	40116f80 	call	40116f8 <OS_FlagBlock>
 4010f28:	e0bfe517 	ldw	r2,-108(fp)
 4010f2c:	e0bfeb15 	stw	r2,-84(fp)
 4010f30:	e0bfeb17 	ldw	r2,-84(fp)
 4010f34:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 4010f38:	00006506 	br	40110d0 <OSFlagPend+0x448>

#if OS_FLAG_WAIT_CLR_EN > 0
        case OS_FLAG_WAIT_CLR_ALL:                         /* See if all required flags are cleared    */
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags);  /* Extract only the bits we want     */
 4010f3c:	e0bffc17 	ldw	r2,-16(fp)
 4010f40:	1080020b 	ldhu	r2,8(r2)
 4010f44:	0084303a 	nor	r2,zero,r2
 4010f48:	1007883a 	mov	r3,r2
 4010f4c:	e0bffd0b 	ldhu	r2,-12(fp)
 4010f50:	1884703a 	and	r2,r3,r2
 4010f54:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy == flags) {                     /* Must match ALL the bits that we want     */
 4010f58:	e0ffe80b 	ldhu	r3,-96(fp)
 4010f5c:	e0bffd0b 	ldhu	r2,-12(fp)
 4010f60:	1880151e 	bne	r3,r2,4010fb8 <OSFlagPend+0x330>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 4010f64:	e0bfe403 	ldbu	r2,-112(fp)
 4010f68:	10800058 	cmpnei	r2,r2,1
 4010f6c:	1000071e 	bne	r2,zero,4010f8c <OSFlagPend+0x304>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we wanted        */
 4010f70:	e0bffc17 	ldw	r2,-16(fp)
 4010f74:	10c0020b 	ldhu	r3,8(r2)
 4010f78:	e0bfe80b 	ldhu	r2,-96(fp)
 4010f7c:	1884b03a 	or	r2,r3,r2
 4010f80:	1007883a 	mov	r3,r2
 4010f84:	e0bffc17 	ldw	r2,-16(fp)
 4010f88:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 4010f8c:	d0a73217 	ldw	r2,-25400(gp)
 4010f90:	e0ffe80b 	ldhu	r3,-96(fp)
 4010f94:	10c00b0d 	sth	r3,44(r2)
 4010f98:	e0bfe517 	ldw	r2,-108(fp)
 4010f9c:	e0bfec15 	stw	r2,-80(fp)
 4010fa0:	e0bfec17 	ldw	r2,-80(fp)
 4010fa4:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 4010fa8:	e0800217 	ldw	r2,8(fp)
 4010fac:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 4010fb0:	e0bfe80b 	ldhu	r2,-96(fp)
 4010fb4:	00009d06 	br	401122c <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 4010fb8:	e13ffd0b 	ldhu	r4,-12(fp)
 4010fbc:	e17ffe03 	ldbu	r5,-8(fp)
 4010fc0:	e0bfff0b 	ldhu	r2,-4(fp)
 4010fc4:	e0fff704 	addi	r3,fp,-36
 4010fc8:	d8800015 	stw	r2,0(sp)
 4010fcc:	280f883a 	mov	r7,r5
 4010fd0:	200d883a 	mov	r6,r4
 4010fd4:	180b883a 	mov	r5,r3
 4010fd8:	e13ffc17 	ldw	r4,-16(fp)
 4010fdc:	40116f80 	call	40116f8 <OS_FlagBlock>
 4010fe0:	e0bfe517 	ldw	r2,-108(fp)
 4010fe4:	e0bfed15 	stw	r2,-76(fp)
 4010fe8:	e0bfed17 	ldw	r2,-76(fp)
 4010fec:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 4010ff0:	00003706 	br	40110d0 <OSFlagPend+0x448>

        case OS_FLAG_WAIT_CLR_ANY:
             flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & flags); /* Extract only the bits we want      */
 4010ff4:	e0bffc17 	ldw	r2,-16(fp)
 4010ff8:	1080020b 	ldhu	r2,8(r2)
 4010ffc:	0084303a 	nor	r2,zero,r2
 4011000:	1007883a 	mov	r3,r2
 4011004:	e0bffd0b 	ldhu	r2,-12(fp)
 4011008:	1884703a 	and	r2,r3,r2
 401100c:	e0bfe80d 	sth	r2,-96(fp)
             if (flags_rdy != (OS_FLAGS)0) {               /* See if any flag cleared                  */
 4011010:	e0bfe80b 	ldhu	r2,-96(fp)
 4011014:	10001526 	beq	r2,zero,401106c <OSFlagPend+0x3e4>
                 if (consume == OS_TRUE) {                 /* See if we need to consume the flags      */
 4011018:	e0bfe403 	ldbu	r2,-112(fp)
 401101c:	10800058 	cmpnei	r2,r2,1
 4011020:	1000071e 	bne	r2,zero,4011040 <OSFlagPend+0x3b8>
                     pgrp->OSFlagFlags |= flags_rdy;       /* Set ONLY the flags that we got           */
 4011024:	e0bffc17 	ldw	r2,-16(fp)
 4011028:	10c0020b 	ldhu	r3,8(r2)
 401102c:	e0bfe80b 	ldhu	r2,-96(fp)
 4011030:	1884b03a 	or	r2,r3,r2
 4011034:	1007883a 	mov	r3,r2
 4011038:	e0bffc17 	ldw	r2,-16(fp)
 401103c:	10c0020d 	sth	r3,8(r2)
                 }
                 OSTCBCur->OSTCBFlagsRdy = flags_rdy;      /* Save flags that were ready               */
 4011040:	d0a73217 	ldw	r2,-25400(gp)
 4011044:	e0ffe80b 	ldhu	r3,-96(fp)
 4011048:	10c00b0d 	sth	r3,44(r2)
 401104c:	e0bfe517 	ldw	r2,-108(fp)
 4011050:	e0bfee15 	stw	r2,-72(fp)
 4011054:	e0bfee17 	ldw	r2,-72(fp)
 4011058:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();                       /* Yes, condition met, return to caller     */
                 *perr                   = OS_ERR_NONE;
 401105c:	e0800217 	ldw	r2,8(fp)
 4011060:	10000005 	stb	zero,0(r2)
                 return (flags_rdy);
 4011064:	e0bfe80b 	ldhu	r2,-96(fp)
 4011068:	00007006 	br	401122c <OSFlagPend+0x5a4>
             } else {                                      /* Block task until events occur or timeout */
                 OS_FlagBlock(pgrp, &node, flags, wait_type, timeout);
 401106c:	e13ffd0b 	ldhu	r4,-12(fp)
 4011070:	e17ffe03 	ldbu	r5,-8(fp)
 4011074:	e0bfff0b 	ldhu	r2,-4(fp)
 4011078:	e0fff704 	addi	r3,fp,-36
 401107c:	d8800015 	stw	r2,0(sp)
 4011080:	280f883a 	mov	r7,r5
 4011084:	200d883a 	mov	r6,r4
 4011088:	180b883a 	mov	r5,r3
 401108c:	e13ffc17 	ldw	r4,-16(fp)
 4011090:	40116f80 	call	40116f8 <OS_FlagBlock>
 4011094:	e0bfe517 	ldw	r2,-108(fp)
 4011098:	e0bfef15 	stw	r2,-68(fp)
 401109c:	e0bfef17 	ldw	r2,-68(fp)
 40110a0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
             }
             break;
 40110a4:	00000a06 	br	40110d0 <OSFlagPend+0x448>
 40110a8:	e0bfe517 	ldw	r2,-108(fp)
 40110ac:	e0bff015 	stw	r2,-64(fp)
 40110b0:	e0bff017 	ldw	r2,-64(fp)
 40110b4:	1001703a 	wrctl	status,r2
#endif

        default:
             OS_EXIT_CRITICAL();
             flags_rdy = (OS_FLAGS)0;
 40110b8:	e03fe80d 	sth	zero,-96(fp)
             *perr      = OS_ERR_FLAG_WAIT_TYPE;
 40110bc:	e0800217 	ldw	r2,8(fp)
 40110c0:	00c01bc4 	movi	r3,111
 40110c4:	10c00005 	stb	r3,0(r2)
             return (flags_rdy);
 40110c8:	e0bfe80b 	ldhu	r2,-96(fp)
 40110cc:	00005706 	br	401122c <OSFlagPend+0x5a4>
    }
/*$PAGE*/
    OS_Sched();                                            /* Find next HPT ready to run               */
 40110d0:	400fb580 	call	400fb58 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40110d4:	0005303a 	rdctl	r2,status
 40110d8:	e0bff115 	stw	r2,-60(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40110dc:	e0fff117 	ldw	r3,-60(fp)
 40110e0:	00bfff84 	movi	r2,-2
 40110e4:	1884703a 	and	r2,r3,r2
 40110e8:	1001703a 	wrctl	status,r2
  
  return context;
 40110ec:	e0bff117 	ldw	r2,-60(fp)
    OS_ENTER_CRITICAL();
 40110f0:	e0bfe515 	stw	r2,-108(fp)
    if (OSTCBCur->OSTCBStatPend != OS_STAT_PEND_OK) {      /* Have we timed-out or aborted?            */
 40110f4:	d0a73217 	ldw	r2,-25400(gp)
 40110f8:	10800c43 	ldbu	r2,49(r2)
 40110fc:	10803fcc 	andi	r2,r2,255
 4011100:	10001c26 	beq	r2,zero,4011174 <OSFlagPend+0x4ec>
        pend_stat                = OSTCBCur->OSTCBStatPend;
 4011104:	d0a73217 	ldw	r2,-25400(gp)
 4011108:	10800c43 	ldbu	r2,49(r2)
 401110c:	e0bff305 	stb	r2,-52(fp)
        OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 4011110:	d0a73217 	ldw	r2,-25400(gp)
 4011114:	10000c45 	stb	zero,49(r2)
        OS_FlagUnlink(&node);
 4011118:	e0bff704 	addi	r2,fp,-36
 401111c:	1009883a 	mov	r4,r2
 4011120:	4011a2c0 	call	4011a2c <OS_FlagUnlink>
        OSTCBCur->OSTCBStat      = OS_STAT_RDY;            /* Yes, make task ready-to-run              */
 4011124:	d0a73217 	ldw	r2,-25400(gp)
 4011128:	10000c05 	stb	zero,48(r2)
 401112c:	e0bfe517 	ldw	r2,-108(fp)
 4011130:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4011134:	e0bff217 	ldw	r2,-56(fp)
 4011138:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        flags_rdy                = (OS_FLAGS)0;
 401113c:	e03fe80d 	sth	zero,-96(fp)
        switch (pend_stat) {
 4011140:	e0bff303 	ldbu	r2,-52(fp)
 4011144:	108000a0 	cmpeqi	r2,r2,2
 4011148:	10000426 	beq	r2,zero,401115c <OSFlagPend+0x4d4>
            case OS_STAT_PEND_ABORT:
                 *perr = OS_ERR_PEND_ABORT;                 /* Indicate that we aborted   waiting       */
 401114c:	e0800217 	ldw	r2,8(fp)
 4011150:	00c00384 	movi	r3,14
 4011154:	10c00005 	stb	r3,0(r2)
                 break;
 4011158:	00000406 	br	401116c <OSFlagPend+0x4e4>

            case OS_STAT_PEND_TO:
            default:
                 *perr = OS_ERR_TIMEOUT;                    /* Indicate that we timed-out waiting       */
 401115c:	e0800217 	ldw	r2,8(fp)
 4011160:	00c00284 	movi	r3,10
 4011164:	10c00005 	stb	r3,0(r2)
                 break;
 4011168:	0001883a 	nop
        }
        return (flags_rdy);
 401116c:	e0bfe80b 	ldhu	r2,-96(fp)
 4011170:	00002e06 	br	401122c <OSFlagPend+0x5a4>
    }
    flags_rdy = OSTCBCur->OSTCBFlagsRdy;
 4011174:	d0a73217 	ldw	r2,-25400(gp)
 4011178:	10800b0b 	ldhu	r2,44(r2)
 401117c:	e0bfe80d 	sth	r2,-96(fp)
    if (consume == OS_TRUE) {                              /* See if we need to consume the flags      */
 4011180:	e0bfe403 	ldbu	r2,-112(fp)
 4011184:	10800058 	cmpnei	r2,r2,1
 4011188:	1000211e 	bne	r2,zero,4011210 <OSFlagPend+0x588>
        switch (wait_type) {
 401118c:	e0bffe03 	ldbu	r2,-8(fp)
 4011190:	10001616 	blt	r2,zero,40111ec <OSFlagPend+0x564>
 4011194:	10c00090 	cmplti	r3,r2,2
 4011198:	18000c1e 	bne	r3,zero,40111cc <OSFlagPend+0x544>
 401119c:	10800108 	cmpgei	r2,r2,4
 40111a0:	1000121e 	bne	r2,zero,40111ec <OSFlagPend+0x564>
            case OS_FLAG_WAIT_SET_ALL:
            case OS_FLAG_WAIT_SET_ANY:                     /* Clear ONLY the flags we got              */
                 pgrp->OSFlagFlags &= ~flags_rdy;
 40111a4:	e0bffc17 	ldw	r2,-16(fp)
 40111a8:	1080020b 	ldhu	r2,8(r2)
 40111ac:	1007883a 	mov	r3,r2
 40111b0:	e0bfe80b 	ldhu	r2,-96(fp)
 40111b4:	0084303a 	nor	r2,zero,r2
 40111b8:	1884703a 	and	r2,r3,r2
 40111bc:	1007883a 	mov	r3,r2
 40111c0:	e0bffc17 	ldw	r2,-16(fp)
 40111c4:	10c0020d 	sth	r3,8(r2)
                 break;
 40111c8:	00001106 	br	4011210 <OSFlagPend+0x588>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:
            case OS_FLAG_WAIT_CLR_ANY:                     /* Set   ONLY the flags we got              */
                 pgrp->OSFlagFlags |=  flags_rdy;
 40111cc:	e0bffc17 	ldw	r2,-16(fp)
 40111d0:	10c0020b 	ldhu	r3,8(r2)
 40111d4:	e0bfe80b 	ldhu	r2,-96(fp)
 40111d8:	1884b03a 	or	r2,r3,r2
 40111dc:	1007883a 	mov	r3,r2
 40111e0:	e0bffc17 	ldw	r2,-16(fp)
 40111e4:	10c0020d 	sth	r3,8(r2)
                 break;
 40111e8:	00000906 	br	4011210 <OSFlagPend+0x588>
 40111ec:	e0bfe517 	ldw	r2,-108(fp)
 40111f0:	e0bff415 	stw	r2,-48(fp)
 40111f4:	e0bff417 	ldw	r2,-48(fp)
 40111f8:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 40111fc:	e0800217 	ldw	r2,8(fp)
 4011200:	00c01bc4 	movi	r3,111
 4011204:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
 4011208:	0005883a 	mov	r2,zero
 401120c:	00000706 	br	401122c <OSFlagPend+0x5a4>
 4011210:	e0bfe517 	ldw	r2,-108(fp)
 4011214:	e0bff515 	stw	r2,-44(fp)
 4011218:	e0bff517 	ldw	r2,-44(fp)
 401121c:	1001703a 	wrctl	status,r2
        }
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;                                   /* Event(s) must have occurred              */
 4011220:	e0800217 	ldw	r2,8(fp)
 4011224:	10000005 	stb	zero,0(r2)
    return (flags_rdy);
 4011228:	e0bfe80b 	ldhu	r2,-96(fp)
}
 401122c:	e037883a 	mov	sp,fp
 4011230:	dfc00117 	ldw	ra,4(sp)
 4011234:	df000017 	ldw	fp,0(sp)
 4011238:	dec00204 	addi	sp,sp,8
 401123c:	f800283a 	ret

04011240 <OSFlagPendGetFlagsRdy>:
* Called from: Task ONLY
*********************************************************************************************************
*/

OS_FLAGS  OSFlagPendGetFlagsRdy (void)
{
 4011240:	defffb04 	addi	sp,sp,-20
 4011244:	df000415 	stw	fp,16(sp)
 4011248:	df000404 	addi	fp,sp,16
    OS_FLAGS      flags;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR     cpu_sr = 0;
 401124c:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4011250:	0005303a 	rdctl	r2,status
 4011254:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011258:	e0fffe17 	ldw	r3,-8(fp)
 401125c:	00bfff84 	movi	r2,-2
 4011260:	1884703a 	and	r2,r3,r2
 4011264:	1001703a 	wrctl	status,r2
  
  return context;
 4011268:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
 401126c:	e0bffc15 	stw	r2,-16(fp)
    flags = OSTCBCur->OSTCBFlagsRdy;
 4011270:	d0a73217 	ldw	r2,-25400(gp)
 4011274:	10800b0b 	ldhu	r2,44(r2)
 4011278:	e0bffd0d 	sth	r2,-12(fp)
 401127c:	e0bffc17 	ldw	r2,-16(fp)
 4011280:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4011284:	e0bfff17 	ldw	r2,-4(fp)
 4011288:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (flags);
 401128c:	e0bffd0b 	ldhu	r2,-12(fp)
}
 4011290:	e037883a 	mov	sp,fp
 4011294:	df000017 	ldw	fp,0(sp)
 4011298:	dec00104 	addi	sp,sp,4
 401129c:	f800283a 	ret

040112a0 <OSFlagPost>:
*              2) The amount of time interrupts are DISABLED depends on the number of tasks waiting on
*                 the event flag group.
*********************************************************************************************************
*/
OS_FLAGS  OSFlagPost (OS_FLAG_GRP *pgrp, OS_FLAGS flags, INT8U opt, INT8U *perr)
{
 40112a0:	deffef04 	addi	sp,sp,-68
 40112a4:	dfc01015 	stw	ra,64(sp)
 40112a8:	df000f15 	stw	fp,60(sp)
 40112ac:	df000f04 	addi	fp,sp,60
 40112b0:	e13ffc15 	stw	r4,-16(fp)
 40112b4:	2807883a 	mov	r3,r5
 40112b8:	3005883a 	mov	r2,r6
 40112bc:	e1ffff15 	stw	r7,-4(fp)
 40112c0:	e0fffd0d 	sth	r3,-12(fp)
 40112c4:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN       sched;
    OS_FLAGS      flags_cur;
    OS_FLAGS      flags_rdy;
    BOOLEAN       rdy;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR     cpu_sr = 0;
 40112c8:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 40112cc:	e0bfff17 	ldw	r2,-4(fp)
 40112d0:	1000021e 	bne	r2,zero,40112dc <OSFlagPost+0x3c>
        return ((OS_FLAGS)0);
 40112d4:	0005883a 	mov	r2,zero
 40112d8:	0000d106 	br	4011620 <OSFlagPost+0x380>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {                  /* Validate 'pgrp'                                */
 40112dc:	e0bffc17 	ldw	r2,-16(fp)
 40112e0:	1000051e 	bne	r2,zero,40112f8 <OSFlagPost+0x58>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 40112e4:	e0bfff17 	ldw	r2,-4(fp)
 40112e8:	00c01b84 	movi	r3,110
 40112ec:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 40112f0:	0005883a 	mov	r2,zero
 40112f4:	0000ca06 	br	4011620 <OSFlagPost+0x380>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) {    /* Make sure we are pointing to an event flag grp */
 40112f8:	e0bffc17 	ldw	r2,-16(fp)
 40112fc:	10800003 	ldbu	r2,0(r2)
 4011300:	10803fcc 	andi	r2,r2,255
 4011304:	10800160 	cmpeqi	r2,r2,5
 4011308:	1000051e 	bne	r2,zero,4011320 <OSFlagPost+0x80>
        *perr = OS_ERR_EVENT_TYPE;
 401130c:	e0bfff17 	ldw	r2,-4(fp)
 4011310:	00c00044 	movi	r3,1
 4011314:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 4011318:	0005883a 	mov	r2,zero
 401131c:	0000c006 	br	4011620 <OSFlagPost+0x380>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4011320:	0005303a 	rdctl	r2,status
 4011324:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011328:	e0fffb17 	ldw	r3,-20(fp)
 401132c:	00bfff84 	movi	r2,-2
 4011330:	1884703a 	and	r2,r3,r2
 4011334:	1001703a 	wrctl	status,r2
  
  return context;
 4011338:	e0bffb17 	ldw	r2,-20(fp)
    }
/*$PAGE*/
    OS_ENTER_CRITICAL();
 401133c:	e0bff315 	stw	r2,-52(fp)
    switch (opt) {
 4011340:	e0bffe03 	ldbu	r2,-8(fp)
 4011344:	10000326 	beq	r2,zero,4011354 <OSFlagPost+0xb4>
 4011348:	10800060 	cmpeqi	r2,r2,1
 401134c:	10000b1e 	bne	r2,zero,401137c <OSFlagPost+0xdc>
 4011350:	00001206 	br	401139c <OSFlagPost+0xfc>
        case OS_FLAG_CLR:
             pgrp->OSFlagFlags &= ~flags;            /* Clear the flags specified in the group         */
 4011354:	e0bffc17 	ldw	r2,-16(fp)
 4011358:	1080020b 	ldhu	r2,8(r2)
 401135c:	1007883a 	mov	r3,r2
 4011360:	e0bffd0b 	ldhu	r2,-12(fp)
 4011364:	0084303a 	nor	r2,zero,r2
 4011368:	1884703a 	and	r2,r3,r2
 401136c:	1007883a 	mov	r3,r2
 4011370:	e0bffc17 	ldw	r2,-16(fp)
 4011374:	10c0020d 	sth	r3,8(r2)
             break;
 4011378:	00001106 	br	40113c0 <OSFlagPost+0x120>

        case OS_FLAG_SET:
             pgrp->OSFlagFlags |=  flags;            /* Set   the flags specified in the group         */
 401137c:	e0bffc17 	ldw	r2,-16(fp)
 4011380:	10c0020b 	ldhu	r3,8(r2)
 4011384:	e0bffd0b 	ldhu	r2,-12(fp)
 4011388:	1884b03a 	or	r2,r3,r2
 401138c:	1007883a 	mov	r3,r2
 4011390:	e0bffc17 	ldw	r2,-16(fp)
 4011394:	10c0020d 	sth	r3,8(r2)
             break;
 4011398:	00000906 	br	40113c0 <OSFlagPost+0x120>
 401139c:	e0bff317 	ldw	r2,-52(fp)
 40113a0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40113a4:	e0bff417 	ldw	r2,-48(fp)
 40113a8:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();                     /* INVALID option                                 */
             *perr = OS_ERR_FLAG_INVALID_OPT;
 40113ac:	e0bfff17 	ldw	r2,-4(fp)
 40113b0:	00c01c44 	movi	r3,113
 40113b4:	10c00005 	stb	r3,0(r2)
             return ((OS_FLAGS)0);
 40113b8:	0005883a 	mov	r2,zero
 40113bc:	00009806 	br	4011620 <OSFlagPost+0x380>
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
 40113c0:	e03ff205 	stb	zero,-56(fp)
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 40113c4:	e0bffc17 	ldw	r2,-16(fp)
 40113c8:	10800117 	ldw	r2,4(r2)
 40113cc:	e0bff115 	stw	r2,-60(fp)
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 40113d0:	00007706 	br	40115b0 <OSFlagPost+0x310>
        switch (pnode->OSFlagNodeWaitType) {
 40113d4:	e0bff117 	ldw	r2,-60(fp)
 40113d8:	10800483 	ldbu	r2,18(r2)
 40113dc:	10803fcc 	andi	r2,r2,255
 40113e0:	10c00060 	cmpeqi	r3,r2,1
 40113e4:	18004a1e 	bne	r3,zero,4011510 <OSFlagPost+0x270>
 40113e8:	10c00088 	cmpgei	r3,r2,2
 40113ec:	1800021e 	bne	r3,zero,40113f8 <OSFlagPost+0x158>
 40113f0:	10002f26 	beq	r2,zero,40114b0 <OSFlagPost+0x210>
 40113f4:	00005b06 	br	4011564 <OSFlagPost+0x2c4>
 40113f8:	10c000a0 	cmpeqi	r3,r2,2
 40113fc:	1800031e 	bne	r3,zero,401140c <OSFlagPost+0x16c>
 4011400:	108000e0 	cmpeqi	r2,r2,3
 4011404:	1000171e 	bne	r2,zero,4011464 <OSFlagPost+0x1c4>
 4011408:	00005606 	br	4011564 <OSFlagPost+0x2c4>
            case OS_FLAG_WAIT_SET_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 401140c:	e0bffc17 	ldw	r2,-16(fp)
 4011410:	10c0020b 	ldhu	r3,8(r2)
 4011414:	e0bff117 	ldw	r2,-60(fp)
 4011418:	1080040b 	ldhu	r2,16(r2)
 401141c:	1884703a 	and	r2,r3,r2
 4011420:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 4011424:	e0bff117 	ldw	r2,-60(fp)
 4011428:	1080040b 	ldhu	r2,16(r2)
 401142c:	10ffffcc 	andi	r3,r2,65535
 4011430:	e0bff60b 	ldhu	r2,-40(fp)
 4011434:	1880541e 	bne	r3,r2,4011588 <OSFlagPost+0x2e8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 4011438:	e0bff60b 	ldhu	r2,-40(fp)
 401143c:	100b883a 	mov	r5,r2
 4011440:	e13ff117 	ldw	r4,-60(fp)
 4011444:	40119380 	call	4011938 <OS_FlagTaskRdy>
 4011448:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 401144c:	e0bff683 	ldbu	r2,-38(fp)
 4011450:	10800058 	cmpnei	r2,r2,1
 4011454:	10004c1e 	bne	r2,zero,4011588 <OSFlagPost+0x2e8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 4011458:	00800044 	movi	r2,1
 401145c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 4011460:	00004906 	br	4011588 <OSFlagPost+0x2e8>

            case OS_FLAG_WAIT_SET_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 4011464:	e0bffc17 	ldw	r2,-16(fp)
 4011468:	10c0020b 	ldhu	r3,8(r2)
 401146c:	e0bff117 	ldw	r2,-60(fp)
 4011470:	1080040b 	ldhu	r2,16(r2)
 4011474:	1884703a 	and	r2,r3,r2
 4011478:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 401147c:	e0bff60b 	ldhu	r2,-40(fp)
 4011480:	10004326 	beq	r2,zero,4011590 <OSFlagPost+0x2f0>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 4011484:	e0bff60b 	ldhu	r2,-40(fp)
 4011488:	100b883a 	mov	r5,r2
 401148c:	e13ff117 	ldw	r4,-60(fp)
 4011490:	40119380 	call	4011938 <OS_FlagTaskRdy>
 4011494:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 4011498:	e0bff683 	ldbu	r2,-38(fp)
 401149c:	10800058 	cmpnei	r2,r2,1
 40114a0:	10003b1e 	bne	r2,zero,4011590 <OSFlagPost+0x2f0>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 40114a4:	00800044 	movi	r2,1
 40114a8:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 40114ac:	00003806 	br	4011590 <OSFlagPost+0x2f0>

#if OS_FLAG_WAIT_CLR_EN > 0
            case OS_FLAG_WAIT_CLR_ALL:               /* See if all req. flags are set for current node */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 40114b0:	e0bffc17 	ldw	r2,-16(fp)
 40114b4:	1080020b 	ldhu	r2,8(r2)
 40114b8:	0084303a 	nor	r2,zero,r2
 40114bc:	1007883a 	mov	r3,r2
 40114c0:	e0bff117 	ldw	r2,-60(fp)
 40114c4:	1080040b 	ldhu	r2,16(r2)
 40114c8:	1884703a 	and	r2,r3,r2
 40114cc:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy == pnode->OSFlagNodeFlags) {
 40114d0:	e0bff117 	ldw	r2,-60(fp)
 40114d4:	1080040b 	ldhu	r2,16(r2)
 40114d8:	10ffffcc 	andi	r3,r2,65535
 40114dc:	e0bff60b 	ldhu	r2,-40(fp)
 40114e0:	18802d1e 	bne	r3,r2,4011598 <OSFlagPost+0x2f8>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 40114e4:	e0bff60b 	ldhu	r2,-40(fp)
 40114e8:	100b883a 	mov	r5,r2
 40114ec:	e13ff117 	ldw	r4,-60(fp)
 40114f0:	40119380 	call	4011938 <OS_FlagTaskRdy>
 40114f4:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 40114f8:	e0bff683 	ldbu	r2,-38(fp)
 40114fc:	10800058 	cmpnei	r2,r2,1
 4011500:	1000251e 	bne	r2,zero,4011598 <OSFlagPost+0x2f8>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 4011504:	00800044 	movi	r2,1
 4011508:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 401150c:	00002206 	br	4011598 <OSFlagPost+0x2f8>

            case OS_FLAG_WAIT_CLR_ANY:               /* See if any flag set                            */
                 flags_rdy = (OS_FLAGS)(~pgrp->OSFlagFlags & pnode->OSFlagNodeFlags);
 4011510:	e0bffc17 	ldw	r2,-16(fp)
 4011514:	1080020b 	ldhu	r2,8(r2)
 4011518:	0084303a 	nor	r2,zero,r2
 401151c:	1007883a 	mov	r3,r2
 4011520:	e0bff117 	ldw	r2,-60(fp)
 4011524:	1080040b 	ldhu	r2,16(r2)
 4011528:	1884703a 	and	r2,r3,r2
 401152c:	e0bff60d 	sth	r2,-40(fp)
                 if (flags_rdy != (OS_FLAGS)0) {
 4011530:	e0bff60b 	ldhu	r2,-40(fp)
 4011534:	10001a26 	beq	r2,zero,40115a0 <OSFlagPost+0x300>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
 4011538:	e0bff60b 	ldhu	r2,-40(fp)
 401153c:	100b883a 	mov	r5,r2
 4011540:	e13ff117 	ldw	r4,-60(fp)
 4011544:	40119380 	call	4011938 <OS_FlagTaskRdy>
 4011548:	e0bff685 	stb	r2,-38(fp)
                     if (rdy == OS_TRUE) {
 401154c:	e0bff683 	ldbu	r2,-38(fp)
 4011550:	10800058 	cmpnei	r2,r2,1
 4011554:	1000121e 	bne	r2,zero,40115a0 <OSFlagPost+0x300>
                         sched = OS_TRUE;                     /* When done we will reschedule          */
 4011558:	00800044 	movi	r2,1
 401155c:	e0bff205 	stb	r2,-56(fp)
                     }
                 }
                 break;
 4011560:	00000f06 	br	40115a0 <OSFlagPost+0x300>
 4011564:	e0bff317 	ldw	r2,-52(fp)
 4011568:	e0bff515 	stw	r2,-44(fp)
 401156c:	e0bff517 	ldw	r2,-44(fp)
 4011570:	1001703a 	wrctl	status,r2
#endif
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
 4011574:	e0bfff17 	ldw	r2,-4(fp)
 4011578:	00c01bc4 	movi	r3,111
 401157c:	10c00005 	stb	r3,0(r2)
                 return ((OS_FLAGS)0);
 4011580:	0005883a 	mov	r2,zero
 4011584:	00002606 	br	4011620 <OSFlagPost+0x380>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 4011588:	0001883a 	nop
 401158c:	00000506 	br	40115a4 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 4011590:	0001883a 	nop
 4011594:	00000306 	br	40115a4 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 4011598:	0001883a 	nop
 401159c:	00000106 	br	40115a4 <OSFlagPost+0x304>
                     rdy = OS_FlagTaskRdy(pnode, flags_rdy);  /* Make task RTR, event(s) Rx'd          */
                     if (rdy == OS_TRUE) {
                         sched = OS_TRUE;                     /* When done we will reschedule          */
                     }
                 }
                 break;
 40115a0:	0001883a 	nop
            default:
                 OS_EXIT_CRITICAL();
                 *perr = OS_ERR_FLAG_WAIT_TYPE;
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
 40115a4:	e0bff117 	ldw	r2,-60(fp)
 40115a8:	10800017 	ldw	r2,0(r2)
 40115ac:	e0bff115 	stw	r2,-60(fp)
             *perr = OS_ERR_FLAG_INVALID_OPT;
             return ((OS_FLAGS)0);
    }
    sched = OS_FALSE;                                /* Indicate that we don't need rescheduling       */
    pnode = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
    while (pnode != (OS_FLAG_NODE *)0) {             /* Go through all tasks waiting on event flag(s)  */
 40115b0:	e0bff117 	ldw	r2,-60(fp)
 40115b4:	103f871e 	bne	r2,zero,40113d4 <__alt_mem_onchip_memory2_0+0xfbff13d4>
 40115b8:	e0bff317 	ldw	r2,-52(fp)
 40115bc:	e0bff715 	stw	r2,-36(fp)
 40115c0:	e0bff717 	ldw	r2,-36(fp)
 40115c4:	1001703a 	wrctl	status,r2
                 return ((OS_FLAGS)0);
        }
        pnode = (OS_FLAG_NODE *)pnode->OSFlagNodeNext; /* Point to next task waiting for event flag(s) */
    }
    OS_EXIT_CRITICAL();
    if (sched == OS_TRUE) {
 40115c8:	e0bff203 	ldbu	r2,-56(fp)
 40115cc:	10800058 	cmpnei	r2,r2,1
 40115d0:	1000011e 	bne	r2,zero,40115d8 <OSFlagPost+0x338>
        OS_Sched();
 40115d4:	400fb580 	call	400fb58 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40115d8:	0005303a 	rdctl	r2,status
 40115dc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40115e0:	e0fffa17 	ldw	r3,-24(fp)
 40115e4:	00bfff84 	movi	r2,-2
 40115e8:	1884703a 	and	r2,r3,r2
 40115ec:	1001703a 	wrctl	status,r2
  
  return context;
 40115f0:	e0bffa17 	ldw	r2,-24(fp)
    }
    OS_ENTER_CRITICAL();
 40115f4:	e0bff315 	stw	r2,-52(fp)
    flags_cur = pgrp->OSFlagFlags;
 40115f8:	e0bffc17 	ldw	r2,-16(fp)
 40115fc:	1080020b 	ldhu	r2,8(r2)
 4011600:	e0bff90d 	sth	r2,-28(fp)
 4011604:	e0bff317 	ldw	r2,-52(fp)
 4011608:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401160c:	e0bff817 	ldw	r2,-32(fp)
 4011610:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr     = OS_ERR_NONE;
 4011614:	e0bfff17 	ldw	r2,-4(fp)
 4011618:	10000005 	stb	zero,0(r2)
    return (flags_cur);
 401161c:	e0bff90b 	ldhu	r2,-28(fp)
}
 4011620:	e037883a 	mov	sp,fp
 4011624:	dfc00117 	ldw	ra,4(sp)
 4011628:	df000017 	ldw	fp,0(sp)
 401162c:	dec00204 	addi	sp,sp,8
 4011630:	f800283a 	ret

04011634 <OSFlagQuery>:
*********************************************************************************************************
*/

#if OS_FLAG_QUERY_EN > 0
OS_FLAGS  OSFlagQuery (OS_FLAG_GRP *pgrp, INT8U *perr)
{
 4011634:	defff904 	addi	sp,sp,-28
 4011638:	df000615 	stw	fp,24(sp)
 401163c:	df000604 	addi	fp,sp,24
 4011640:	e13ffe15 	stw	r4,-8(fp)
 4011644:	e17fff15 	stw	r5,-4(fp)
    OS_FLAGS   flags;
#if OS_CRITICAL_METHOD == 3                       /* Allocate storage for CPU status register          */
    OS_CPU_SR  cpu_sr = 0;
 4011648:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                     /* Validate 'perr'                                   */
 401164c:	e0bfff17 	ldw	r2,-4(fp)
 4011650:	1000021e 	bne	r2,zero,401165c <OSFlagQuery+0x28>
        return ((OS_FLAGS)0);
 4011654:	0005883a 	mov	r2,zero
 4011658:	00002306 	br	40116e8 <OSFlagQuery+0xb4>
    }
    if (pgrp == (OS_FLAG_GRP *)0) {               /* Validate 'pgrp'                                   */
 401165c:	e0bffe17 	ldw	r2,-8(fp)
 4011660:	1000051e 	bne	r2,zero,4011678 <OSFlagQuery+0x44>
        *perr = OS_ERR_FLAG_INVALID_PGRP;
 4011664:	e0bfff17 	ldw	r2,-4(fp)
 4011668:	00c01b84 	movi	r3,110
 401166c:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 4011670:	0005883a 	mov	r2,zero
 4011674:	00001c06 	br	40116e8 <OSFlagQuery+0xb4>
    }
#endif
    if (pgrp->OSFlagType != OS_EVENT_TYPE_FLAG) { /* Validate event block type                         */
 4011678:	e0bffe17 	ldw	r2,-8(fp)
 401167c:	10800003 	ldbu	r2,0(r2)
 4011680:	10803fcc 	andi	r2,r2,255
 4011684:	10800160 	cmpeqi	r2,r2,5
 4011688:	1000051e 	bne	r2,zero,40116a0 <OSFlagQuery+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
 401168c:	e0bfff17 	ldw	r2,-4(fp)
 4011690:	00c00044 	movi	r3,1
 4011694:	10c00005 	stb	r3,0(r2)
        return ((OS_FLAGS)0);
 4011698:	0005883a 	mov	r2,zero
 401169c:	00001206 	br	40116e8 <OSFlagQuery+0xb4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40116a0:	0005303a 	rdctl	r2,status
 40116a4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40116a8:	e0fffc17 	ldw	r3,-16(fp)
 40116ac:	00bfff84 	movi	r2,-2
 40116b0:	1884703a 	and	r2,r3,r2
 40116b4:	1001703a 	wrctl	status,r2
  
  return context;
 40116b8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 40116bc:	e0bffa15 	stw	r2,-24(fp)
    flags = pgrp->OSFlagFlags;
 40116c0:	e0bffe17 	ldw	r2,-8(fp)
 40116c4:	1080020b 	ldhu	r2,8(r2)
 40116c8:	e0bffb0d 	sth	r2,-20(fp)
 40116cc:	e0bffa17 	ldw	r2,-24(fp)
 40116d0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40116d4:	e0bffd17 	ldw	r2,-12(fp)
 40116d8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 40116dc:	e0bfff17 	ldw	r2,-4(fp)
 40116e0:	10000005 	stb	zero,0(r2)
    return (flags);                               /* Return the current value of the event flags       */
 40116e4:	e0bffb0b 	ldhu	r2,-20(fp)
}
 40116e8:	e037883a 	mov	sp,fp
 40116ec:	df000017 	ldw	fp,0(sp)
 40116f0:	dec00104 	addi	sp,sp,4
 40116f4:	f800283a 	ret

040116f8 <OS_FlagBlock>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  void  OS_FlagBlock (OS_FLAG_GRP *pgrp, OS_FLAG_NODE *pnode, OS_FLAGS flags, INT8U wait_type, INT16U timeout)
{
 40116f8:	defff804 	addi	sp,sp,-32
 40116fc:	df000715 	stw	fp,28(sp)
 4011700:	df000704 	addi	fp,sp,28
 4011704:	e13ffb15 	stw	r4,-20(fp)
 4011708:	e17ffc15 	stw	r5,-16(fp)
 401170c:	3009883a 	mov	r4,r6
 4011710:	3807883a 	mov	r3,r7
 4011714:	e0800117 	ldw	r2,4(fp)
 4011718:	e13ffd0d 	sth	r4,-12(fp)
 401171c:	e0fffe05 	stb	r3,-8(fp)
 4011720:	e0bfff0d 	sth	r2,-4(fp)
    OS_FLAG_NODE  *pnode_next;
    INT8U          y;


    OSTCBCur->OSTCBStat      |= OS_STAT_FLAG;
 4011724:	d0a73217 	ldw	r2,-25400(gp)
 4011728:	d0e73217 	ldw	r3,-25400(gp)
 401172c:	18c00c03 	ldbu	r3,48(r3)
 4011730:	18c00814 	ori	r3,r3,32
 4011734:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend   = OS_STAT_PEND_OK;
 4011738:	d0a73217 	ldw	r2,-25400(gp)
 401173c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly        = timeout;              /* Store timeout in task's TCB                   */
 4011740:	d0a73217 	ldw	r2,-25400(gp)
 4011744:	e0ffff0b 	ldhu	r3,-4(fp)
 4011748:	10c00b8d 	sth	r3,46(r2)
#if OS_TASK_DEL_EN > 0
    OSTCBCur->OSTCBFlagNode   = pnode;                /* TCB to link to node                           */
 401174c:	d0a73217 	ldw	r2,-25400(gp)
 4011750:	e0fffc17 	ldw	r3,-16(fp)
 4011754:	10c00a15 	stw	r3,40(r2)
#endif
    pnode->OSFlagNodeFlags    = flags;                /* Save the flags that we need to wait for       */
 4011758:	e0bffc17 	ldw	r2,-16(fp)
 401175c:	e0fffd0b 	ldhu	r3,-12(fp)
 4011760:	10c0040d 	sth	r3,16(r2)
    pnode->OSFlagNodeWaitType = wait_type;            /* Save the type of wait we are doing            */
 4011764:	e0bffc17 	ldw	r2,-16(fp)
 4011768:	e0fffe03 	ldbu	r3,-8(fp)
 401176c:	10c00485 	stb	r3,18(r2)
    pnode->OSFlagNodeTCB      = (void *)OSTCBCur;     /* Link to task's TCB                            */
 4011770:	d0e73217 	ldw	r3,-25400(gp)
 4011774:	e0bffc17 	ldw	r2,-16(fp)
 4011778:	10c00215 	stw	r3,8(r2)
    pnode->OSFlagNodeNext     = pgrp->OSFlagWaitList; /* Add node at beginning of event flag wait list */
 401177c:	e0bffb17 	ldw	r2,-20(fp)
 4011780:	10c00117 	ldw	r3,4(r2)
 4011784:	e0bffc17 	ldw	r2,-16(fp)
 4011788:	10c00015 	stw	r3,0(r2)
    pnode->OSFlagNodePrev     = (void *)0;
 401178c:	e0bffc17 	ldw	r2,-16(fp)
 4011790:	10000115 	stw	zero,4(r2)
    pnode->OSFlagNodeFlagGrp  = (void *)pgrp;         /* Link to Event Flag Group                      */
 4011794:	e0bffc17 	ldw	r2,-16(fp)
 4011798:	e0fffb17 	ldw	r3,-20(fp)
 401179c:	10c00315 	stw	r3,12(r2)
    pnode_next                = (OS_FLAG_NODE *)pgrp->OSFlagWaitList;
 40117a0:	e0bffb17 	ldw	r2,-20(fp)
 40117a4:	10800117 	ldw	r2,4(r2)
 40117a8:	e0bff915 	stw	r2,-28(fp)
    if (pnode_next != (void *)0) {                    /* Is this the first NODE to insert?             */
 40117ac:	e0bff917 	ldw	r2,-28(fp)
 40117b0:	10000326 	beq	r2,zero,40117c0 <OS_FlagBlock+0xc8>
        pnode_next->OSFlagNodePrev = pnode;           /* No, link in doubly linked list                */
 40117b4:	e0bff917 	ldw	r2,-28(fp)
 40117b8:	e0fffc17 	ldw	r3,-16(fp)
 40117bc:	10c00115 	stw	r3,4(r2)
    }
    pgrp->OSFlagWaitList = (void *)pnode;
 40117c0:	e0bffb17 	ldw	r2,-20(fp)
 40117c4:	e0fffc17 	ldw	r3,-16(fp)
 40117c8:	10c00115 	stw	r3,4(r2)

    y            =  OSTCBCur->OSTCBY;                 /* Suspend current task until flag(s) received   */
 40117cc:	d0a73217 	ldw	r2,-25400(gp)
 40117d0:	10800d03 	ldbu	r2,52(r2)
 40117d4:	e0bffa05 	stb	r2,-24(fp)
    OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 40117d8:	e0fffa03 	ldbu	r3,-24(fp)
 40117dc:	e13ffa03 	ldbu	r4,-24(fp)
 40117e0:	d0a72f44 	addi	r2,gp,-25411
 40117e4:	2085883a 	add	r2,r4,r2
 40117e8:	10800003 	ldbu	r2,0(r2)
 40117ec:	1009883a 	mov	r4,r2
 40117f0:	d0a73217 	ldw	r2,-25400(gp)
 40117f4:	10800d43 	ldbu	r2,53(r2)
 40117f8:	0084303a 	nor	r2,zero,r2
 40117fc:	2084703a 	and	r2,r4,r2
 4011800:	1009883a 	mov	r4,r2
 4011804:	d0a72f44 	addi	r2,gp,-25411
 4011808:	1885883a 	add	r2,r3,r2
 401180c:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0x00) {
 4011810:	e0fffa03 	ldbu	r3,-24(fp)
 4011814:	d0a72f44 	addi	r2,gp,-25411
 4011818:	1885883a 	add	r2,r3,r2
 401181c:	10800003 	ldbu	r2,0(r2)
 4011820:	10803fcc 	andi	r2,r2,255
 4011824:	1000071e 	bne	r2,zero,4011844 <OS_FlagBlock+0x14c>
        OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 4011828:	d0a73217 	ldw	r2,-25400(gp)
 401182c:	10800d83 	ldbu	r2,54(r2)
 4011830:	0084303a 	nor	r2,zero,r2
 4011834:	1007883a 	mov	r3,r2
 4011838:	d0a72f03 	ldbu	r2,-25412(gp)
 401183c:	1884703a 	and	r2,r3,r2
 4011840:	d0a72f05 	stb	r2,-25412(gp)
    }
}
 4011844:	0001883a 	nop
 4011848:	e037883a 	mov	sp,fp
 401184c:	df000017 	ldw	fp,0(sp)
 4011850:	dec00104 	addi	sp,sp,4
 4011854:	f800283a 	ret

04011858 <OS_FlagInit>:
* WARNING    : You MUST NOT call this function from your code.  This is an INTERNAL function to uC/OS-II.
*********************************************************************************************************
*/

void  OS_FlagInit (void)
{
 4011858:	defffb04 	addi	sp,sp,-20
 401185c:	dfc00415 	stw	ra,16(sp)
 4011860:	df000315 	stw	fp,12(sp)
 4011864:	df000304 	addi	fp,sp,12
    INT16U       i;
    OS_FLAG_GRP *pgrp1;
    OS_FLAG_GRP *pgrp2;


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
 4011868:	0140dc04 	movi	r5,880
 401186c:	010100b4 	movhi	r4,1026
 4011870:	21114e04 	addi	r4,r4,17720
 4011874:	400fa9c0 	call	400fa9c <OS_MemClr>
    pgrp1 = &OSFlagTbl[0];
 4011878:	008100b4 	movhi	r2,1026
 401187c:	10914e04 	addi	r2,r2,17720
 4011880:	e0bffe15 	stw	r2,-8(fp)
    pgrp2 = &OSFlagTbl[1];
 4011884:	008100b4 	movhi	r2,1026
 4011888:	10915904 	addi	r2,r2,17764
 401188c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 4011890:	e03ffd0d 	sth	zero,-12(fp)
 4011894:	00001306 	br	40118e4 <OS_FlagInit+0x8c>
        pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 4011898:	e0bffe17 	ldw	r2,-8(fp)
 401189c:	10000005 	stb	zero,0(r2)
        pgrp1->OSFlagWaitList = (void *)pgrp2;
 40118a0:	e0bffe17 	ldw	r2,-8(fp)
 40118a4:	e0ffff17 	ldw	r3,-4(fp)
 40118a8:	10c00115 	stw	r3,4(r2)
#if OS_FLAG_NAME_SIZE > 1
        pgrp1->OSFlagName[0]  = '?';                                /* Unknown name                    */
 40118ac:	e0bffe17 	ldw	r2,-8(fp)
 40118b0:	00c00fc4 	movi	r3,63
 40118b4:	10c00285 	stb	r3,10(r2)
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 40118b8:	e0bffe17 	ldw	r2,-8(fp)
 40118bc:	100002c5 	stb	zero,11(r2)
#endif
        pgrp1++;
 40118c0:	e0bffe17 	ldw	r2,-8(fp)
 40118c4:	10800b04 	addi	r2,r2,44
 40118c8:	e0bffe15 	stw	r2,-8(fp)
        pgrp2++;
 40118cc:	e0bfff17 	ldw	r2,-4(fp)
 40118d0:	10800b04 	addi	r2,r2,44
 40118d4:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSFlagTbl[0], sizeof(OSFlagTbl));           /* Clear the flag group table      */
    pgrp1 = &OSFlagTbl[0];
    pgrp2 = &OSFlagTbl[1];
    for (i = 0; i < (OS_MAX_FLAGS - 1); i++) {                      /* Init. list of free EVENT FLAGS  */
 40118d8:	e0bffd0b 	ldhu	r2,-12(fp)
 40118dc:	10800044 	addi	r2,r2,1
 40118e0:	e0bffd0d 	sth	r2,-12(fp)
 40118e4:	e0bffd0b 	ldhu	r2,-12(fp)
 40118e8:	108004f0 	cmpltui	r2,r2,19
 40118ec:	103fea1e 	bne	r2,zero,4011898 <__alt_mem_onchip_memory2_0+0xfbff1898>
        pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
#endif
        pgrp1++;
        pgrp2++;
    }
    pgrp1->OSFlagType     = OS_EVENT_TYPE_UNUSED;
 40118f0:	e0bffe17 	ldw	r2,-8(fp)
 40118f4:	10000005 	stb	zero,0(r2)
    pgrp1->OSFlagWaitList = (void *)0;
 40118f8:	e0bffe17 	ldw	r2,-8(fp)
 40118fc:	10000115 	stw	zero,4(r2)
#if OS_FLAG_NAME_SIZE > 1
    pgrp1->OSFlagName[0]  = '?';                                    /* Unknown name                    */
 4011900:	e0bffe17 	ldw	r2,-8(fp)
 4011904:	00c00fc4 	movi	r3,63
 4011908:	10c00285 	stb	r3,10(r2)
    pgrp1->OSFlagName[1]  = OS_ASCII_NUL;
 401190c:	e0bffe17 	ldw	r2,-8(fp)
 4011910:	100002c5 	stb	zero,11(r2)
#endif
    OSFlagFreeList        = &OSFlagTbl[0];
 4011914:	008100b4 	movhi	r2,1026
 4011918:	10914e04 	addi	r2,r2,17720
 401191c:	d0a73415 	stw	r2,-25392(gp)
#endif
}
 4011920:	0001883a 	nop
 4011924:	e037883a 	mov	sp,fp
 4011928:	dfc00117 	ldw	ra,4(sp)
 401192c:	df000017 	ldw	fp,0(sp)
 4011930:	dec00204 	addi	sp,sp,8
 4011934:	f800283a 	ret

04011938 <OS_FlagTaskRdy>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

static  BOOLEAN  OS_FlagTaskRdy (OS_FLAG_NODE *pnode, OS_FLAGS flags_rdy)
{
 4011938:	defffa04 	addi	sp,sp,-24
 401193c:	dfc00515 	stw	ra,20(sp)
 4011940:	df000415 	stw	fp,16(sp)
 4011944:	df000404 	addi	fp,sp,16
 4011948:	e13ffe15 	stw	r4,-8(fp)
 401194c:	2805883a 	mov	r2,r5
 4011950:	e0bfff0d 	sth	r2,-4(fp)
    OS_TCB   *ptcb;
    BOOLEAN   sched;


    ptcb                 = (OS_TCB *)pnode->OSFlagNodeTCB; /* Point to TCB of waiting task             */
 4011954:	e0bffe17 	ldw	r2,-8(fp)
 4011958:	10800217 	ldw	r2,8(r2)
 401195c:	e0bffd15 	stw	r2,-12(fp)
    ptcb->OSTCBDly       = 0;
 4011960:	e0bffd17 	ldw	r2,-12(fp)
 4011964:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBFlagsRdy  = flags_rdy;
 4011968:	e0bffd17 	ldw	r2,-12(fp)
 401196c:	e0ffff0b 	ldhu	r3,-4(fp)
 4011970:	10c00b0d 	sth	r3,44(r2)
    ptcb->OSTCBStat     &= ~(INT8U)OS_STAT_FLAG;
 4011974:	e0bffd17 	ldw	r2,-12(fp)
 4011978:	10c00c03 	ldbu	r3,48(r2)
 401197c:	00bff7c4 	movi	r2,-33
 4011980:	1884703a 	and	r2,r3,r2
 4011984:	1007883a 	mov	r3,r2
 4011988:	e0bffd17 	ldw	r2,-12(fp)
 401198c:	10c00c05 	stb	r3,48(r2)
    ptcb->OSTCBStatPend  = OS_STAT_PEND_OK;
 4011990:	e0bffd17 	ldw	r2,-12(fp)
 4011994:	10000c45 	stb	zero,49(r2)
    if (ptcb->OSTCBStat == OS_STAT_RDY) {                  /* Task now ready?                          */
 4011998:	e0bffd17 	ldw	r2,-12(fp)
 401199c:	10800c03 	ldbu	r2,48(r2)
 40119a0:	10803fcc 	andi	r2,r2,255
 40119a4:	1000181e 	bne	r2,zero,4011a08 <OS_FlagTaskRdy+0xd0>
        OSRdyGrp               |= ptcb->OSTCBBitY;         /* Put task into ready list                 */
 40119a8:	e0bffd17 	ldw	r2,-12(fp)
 40119ac:	10c00d83 	ldbu	r3,54(r2)
 40119b0:	d0a72f03 	ldbu	r2,-25412(gp)
 40119b4:	1884b03a 	or	r2,r3,r2
 40119b8:	d0a72f05 	stb	r2,-25412(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 40119bc:	e0bffd17 	ldw	r2,-12(fp)
 40119c0:	10800d03 	ldbu	r2,52(r2)
 40119c4:	10c03fcc 	andi	r3,r2,255
 40119c8:	e0bffd17 	ldw	r2,-12(fp)
 40119cc:	10800d03 	ldbu	r2,52(r2)
 40119d0:	11003fcc 	andi	r4,r2,255
 40119d4:	d0a72f44 	addi	r2,gp,-25411
 40119d8:	2085883a 	add	r2,r4,r2
 40119dc:	11000003 	ldbu	r4,0(r2)
 40119e0:	e0bffd17 	ldw	r2,-12(fp)
 40119e4:	10800d43 	ldbu	r2,53(r2)
 40119e8:	2084b03a 	or	r2,r4,r2
 40119ec:	1009883a 	mov	r4,r2
 40119f0:	d0a72f44 	addi	r2,gp,-25411
 40119f4:	1885883a 	add	r2,r3,r2
 40119f8:	11000005 	stb	r4,0(r2)
        sched                   = OS_TRUE;
 40119fc:	00800044 	movi	r2,1
 4011a00:	e0bffc05 	stb	r2,-16(fp)
 4011a04:	00000106 	br	4011a0c <OS_FlagTaskRdy+0xd4>
    } else {
        sched                   = OS_FALSE;
 4011a08:	e03ffc05 	stb	zero,-16(fp)
    }
    OS_FlagUnlink(pnode);
 4011a0c:	e13ffe17 	ldw	r4,-8(fp)
 4011a10:	4011a2c0 	call	4011a2c <OS_FlagUnlink>
    return (sched);
 4011a14:	e0bffc03 	ldbu	r2,-16(fp)
}
 4011a18:	e037883a 	mov	sp,fp
 4011a1c:	dfc00117 	ldw	ra,4(sp)
 4011a20:	df000017 	ldw	fp,0(sp)
 4011a24:	dec00204 	addi	sp,sp,8
 4011a28:	f800283a 	ret

04011a2c <OS_FlagUnlink>:
*              2) This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_FlagUnlink (OS_FLAG_NODE *pnode)
{
 4011a2c:	defffa04 	addi	sp,sp,-24
 4011a30:	df000515 	stw	fp,20(sp)
 4011a34:	df000504 	addi	fp,sp,20
 4011a38:	e13fff15 	stw	r4,-4(fp)
    OS_FLAG_GRP  *pgrp;
    OS_FLAG_NODE *pnode_prev;
    OS_FLAG_NODE *pnode_next;


    pnode_prev = (OS_FLAG_NODE *)pnode->OSFlagNodePrev;
 4011a3c:	e0bfff17 	ldw	r2,-4(fp)
 4011a40:	10800117 	ldw	r2,4(r2)
 4011a44:	e0bffb15 	stw	r2,-20(fp)
    pnode_next = (OS_FLAG_NODE *)pnode->OSFlagNodeNext;
 4011a48:	e0bfff17 	ldw	r2,-4(fp)
 4011a4c:	10800017 	ldw	r2,0(r2)
 4011a50:	e0bffc15 	stw	r2,-16(fp)
    if (pnode_prev == (OS_FLAG_NODE *)0) {                      /* Is it first node in wait list?      */
 4011a54:	e0bffb17 	ldw	r2,-20(fp)
 4011a58:	10000b1e 	bne	r2,zero,4011a88 <OS_FlagUnlink+0x5c>
        pgrp                 = (OS_FLAG_GRP *)pnode->OSFlagNodeFlagGrp;
 4011a5c:	e0bfff17 	ldw	r2,-4(fp)
 4011a60:	10800317 	ldw	r2,12(r2)
 4011a64:	e0bffd15 	stw	r2,-12(fp)
        pgrp->OSFlagWaitList = (void *)pnode_next;              /*      Update list for new 1st node   */
 4011a68:	e0bffd17 	ldw	r2,-12(fp)
 4011a6c:	e0fffc17 	ldw	r3,-16(fp)
 4011a70:	10c00115 	stw	r3,4(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {
 4011a74:	e0bffc17 	ldw	r2,-16(fp)
 4011a78:	10000b26 	beq	r2,zero,4011aa8 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = (OS_FLAG_NODE *)0;     /*      Link new 1st node PREV to NULL */
 4011a7c:	e0bffc17 	ldw	r2,-16(fp)
 4011a80:	10000115 	stw	zero,4(r2)
 4011a84:	00000806 	br	4011aa8 <OS_FlagUnlink+0x7c>
        }
    } else {                                                    /* No,  A node somewhere in the list   */
        pnode_prev->OSFlagNodeNext = pnode_next;                /*      Link around the node to unlink */
 4011a88:	e0bffb17 	ldw	r2,-20(fp)
 4011a8c:	e0fffc17 	ldw	r3,-16(fp)
 4011a90:	10c00015 	stw	r3,0(r2)
        if (pnode_next != (OS_FLAG_NODE *)0) {                  /*      Was this the LAST node?        */
 4011a94:	e0bffc17 	ldw	r2,-16(fp)
 4011a98:	10000326 	beq	r2,zero,4011aa8 <OS_FlagUnlink+0x7c>
            pnode_next->OSFlagNodePrev = pnode_prev;            /*      No, Link around current node   */
 4011a9c:	e0bffc17 	ldw	r2,-16(fp)
 4011aa0:	e0fffb17 	ldw	r3,-20(fp)
 4011aa4:	10c00115 	stw	r3,4(r2)
        }
    }
#if OS_TASK_DEL_EN > 0
    ptcb                = (OS_TCB *)pnode->OSFlagNodeTCB;
 4011aa8:	e0bfff17 	ldw	r2,-4(fp)
 4011aac:	10800217 	ldw	r2,8(r2)
 4011ab0:	e0bffe15 	stw	r2,-8(fp)
    ptcb->OSTCBFlagNode = (OS_FLAG_NODE *)0;
 4011ab4:	e0bffe17 	ldw	r2,-8(fp)
 4011ab8:	10000a15 	stw	zero,40(r2)
#endif
}
 4011abc:	0001883a 	nop
 4011ac0:	e037883a 	mov	sp,fp
 4011ac4:	df000017 	ldw	fp,0(sp)
 4011ac8:	dec00104 	addi	sp,sp,4
 4011acc:	f800283a 	ret

04011ad0 <OSMboxAccept>:
*********************************************************************************************************
*/

#if OS_MBOX_ACCEPT_EN > 0
void  *OSMboxAccept (OS_EVENT *pevent)
{
 4011ad0:	defffa04 	addi	sp,sp,-24
 4011ad4:	df000515 	stw	fp,20(sp)
 4011ad8:	df000504 	addi	fp,sp,20
 4011adc:	e13fff15 	stw	r4,-4(fp)
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                               /* Allocate storage for CPU status register  */
    OS_CPU_SR  cpu_sr = 0;
 4011ae0:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                        /* Validate 'pevent'                         */
 4011ae4:	e0bfff17 	ldw	r2,-4(fp)
 4011ae8:	1000021e 	bne	r2,zero,4011af4 <OSMboxAccept+0x24>
        return ((void *)0);
 4011aec:	0005883a 	mov	r2,zero
 4011af0:	00001906 	br	4011b58 <OSMboxAccept+0x88>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {      /* Validate event block type                 */
 4011af4:	e0bfff17 	ldw	r2,-4(fp)
 4011af8:	10800003 	ldbu	r2,0(r2)
 4011afc:	10803fcc 	andi	r2,r2,255
 4011b00:	10800060 	cmpeqi	r2,r2,1
 4011b04:	1000021e 	bne	r2,zero,4011b10 <OSMboxAccept+0x40>
        return ((void *)0);
 4011b08:	0005883a 	mov	r2,zero
 4011b0c:	00001206 	br	4011b58 <OSMboxAccept+0x88>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4011b10:	0005303a 	rdctl	r2,status
 4011b14:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011b18:	e0fffd17 	ldw	r3,-12(fp)
 4011b1c:	00bfff84 	movi	r2,-2
 4011b20:	1884703a 	and	r2,r3,r2
 4011b24:	1001703a 	wrctl	status,r2
  
  return context;
 4011b28:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 4011b2c:	e0bffb15 	stw	r2,-20(fp)
    pmsg               = pevent->OSEventPtr;
 4011b30:	e0bfff17 	ldw	r2,-4(fp)
 4011b34:	10800117 	ldw	r2,4(r2)
 4011b38:	e0bffc15 	stw	r2,-16(fp)
    pevent->OSEventPtr = (void *)0;                       /* Clear the mailbox                         */
 4011b3c:	e0bfff17 	ldw	r2,-4(fp)
 4011b40:	10000115 	stw	zero,4(r2)
 4011b44:	e0bffb17 	ldw	r2,-20(fp)
 4011b48:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4011b4c:	e0bffe17 	ldw	r2,-8(fp)
 4011b50:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                        /* Return the message received (or NULL)     */
 4011b54:	e0bffc17 	ldw	r2,-16(fp)
}
 4011b58:	e037883a 	mov	sp,fp
 4011b5c:	df000017 	ldw	fp,0(sp)
 4011b60:	dec00104 	addi	sp,sp,4
 4011b64:	f800283a 	ret

04011b68 <OSMboxCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSMboxCreate (void *pmsg)
{
 4011b68:	defff904 	addi	sp,sp,-28
 4011b6c:	dfc00615 	stw	ra,24(sp)
 4011b70:	df000515 	stw	fp,20(sp)
 4011b74:	df000504 	addi	fp,sp,20
 4011b78:	e13fff15 	stw	r4,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4011b7c:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 4011b80:	d0a73103 	ldbu	r2,-25404(gp)
 4011b84:	10803fcc 	andi	r2,r2,255
 4011b88:	10000226 	beq	r2,zero,4011b94 <OSMboxCreate+0x2c>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
 4011b8c:	0005883a 	mov	r2,zero
 4011b90:	00002506 	br	4011c28 <OSMboxCreate+0xc0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4011b94:	0005303a 	rdctl	r2,status
 4011b98:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011b9c:	e0fffe17 	ldw	r3,-8(fp)
 4011ba0:	00bfff84 	movi	r2,-2
 4011ba4:	1884703a 	and	r2,r3,r2
 4011ba8:	1001703a 	wrctl	status,r2
  
  return context;
 4011bac:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 4011bb0:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
 4011bb4:	d0a73017 	ldw	r2,-25408(gp)
 4011bb8:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
 4011bbc:	d0a73017 	ldw	r2,-25408(gp)
 4011bc0:	10000326 	beq	r2,zero,4011bd0 <OSMboxCreate+0x68>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 4011bc4:	d0a73017 	ldw	r2,-25408(gp)
 4011bc8:	10800117 	ldw	r2,4(r2)
 4011bcc:	d0a73015 	stw	r2,-25408(gp)
 4011bd0:	e0bffb17 	ldw	r2,-20(fp)
 4011bd4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4011bd8:	e0bffc17 	ldw	r2,-16(fp)
 4011bdc:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {
 4011be0:	e0bffd17 	ldw	r2,-12(fp)
 4011be4:	10000f26 	beq	r2,zero,4011c24 <OSMboxCreate+0xbc>
        pevent->OSEventType    = OS_EVENT_TYPE_MBOX;
 4011be8:	e0bffd17 	ldw	r2,-12(fp)
 4011bec:	00c00044 	movi	r3,1
 4011bf0:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = 0;
 4011bf4:	e0bffd17 	ldw	r2,-12(fp)
 4011bf8:	1000020d 	sth	zero,8(r2)
        pevent->OSEventPtr     = pmsg;           /* Deposit message in event control block             */
 4011bfc:	e0bffd17 	ldw	r2,-12(fp)
 4011c00:	e0ffff17 	ldw	r3,-4(fp)
 4011c04:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';
 4011c08:	e0bffd17 	ldw	r2,-12(fp)
 4011c0c:	00c00fc4 	movi	r3,63
 4011c10:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
 4011c14:	e0bffd17 	ldw	r2,-12(fp)
 4011c18:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);
 4011c1c:	e13ffd17 	ldw	r4,-12(fp)
 4011c20:	400f6bc0 	call	400f6bc <OS_EventWaitListInit>
    }
    return (pevent);                             /* Return pointer to event control block              */
 4011c24:	e0bffd17 	ldw	r2,-12(fp)
}
 4011c28:	e037883a 	mov	sp,fp
 4011c2c:	dfc00117 	ldw	ra,4(sp)
 4011c30:	df000017 	ldw	fp,0(sp)
 4011c34:	dec00204 	addi	sp,sp,8
 4011c38:	f800283a 	ret

04011c3c <OSMboxDel>:
*********************************************************************************************************
*/

#if OS_MBOX_DEL_EN > 0
OS_EVENT  *OSMboxDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 4011c3c:	defff304 	addi	sp,sp,-52
 4011c40:	dfc00c15 	stw	ra,48(sp)
 4011c44:	df000b15 	stw	fp,44(sp)
 4011c48:	df000b04 	addi	fp,sp,44
 4011c4c:	e13ffd15 	stw	r4,-12(fp)
 4011c50:	2805883a 	mov	r2,r5
 4011c54:	e1bfff15 	stw	r6,-4(fp)
 4011c58:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 4011c5c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 4011c60:	e0bfff17 	ldw	r2,-4(fp)
 4011c64:	1000021e 	bne	r2,zero,4011c70 <OSMboxDel+0x34>
        return (pevent);
 4011c68:	e0bffd17 	ldw	r2,-12(fp)
 4011c6c:	00007e06 	br	4011e68 <OSMboxDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 4011c70:	e0bffd17 	ldw	r2,-12(fp)
 4011c74:	1000051e 	bne	r2,zero,4011c8c <OSMboxDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 4011c78:	e0bfff17 	ldw	r2,-4(fp)
 4011c7c:	00c00104 	movi	r3,4
 4011c80:	10c00005 	stb	r3,0(r2)
        return (pevent);
 4011c84:	e0bffd17 	ldw	r2,-12(fp)
 4011c88:	00007706 	br	4011e68 <OSMboxDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
 4011c8c:	e0bffd17 	ldw	r2,-12(fp)
 4011c90:	10800003 	ldbu	r2,0(r2)
 4011c94:	10803fcc 	andi	r2,r2,255
 4011c98:	10800060 	cmpeqi	r2,r2,1
 4011c9c:	1000051e 	bne	r2,zero,4011cb4 <OSMboxDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 4011ca0:	e0bfff17 	ldw	r2,-4(fp)
 4011ca4:	00c00044 	movi	r3,1
 4011ca8:	10c00005 	stb	r3,0(r2)
        return (pevent);
 4011cac:	e0bffd17 	ldw	r2,-12(fp)
 4011cb0:	00006d06 	br	4011e68 <OSMboxDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 4011cb4:	d0a73103 	ldbu	r2,-25404(gp)
 4011cb8:	10803fcc 	andi	r2,r2,255
 4011cbc:	10000526 	beq	r2,zero,4011cd4 <OSMboxDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 4011cc0:	e0bfff17 	ldw	r2,-4(fp)
 4011cc4:	00c003c4 	movi	r3,15
 4011cc8:	10c00005 	stb	r3,0(r2)
        return (pevent);
 4011ccc:	e0bffd17 	ldw	r2,-12(fp)
 4011cd0:	00006506 	br	4011e68 <OSMboxDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4011cd4:	0005303a 	rdctl	r2,status
 4011cd8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011cdc:	e0fffc17 	ldw	r3,-16(fp)
 4011ce0:	00bfff84 	movi	r2,-2
 4011ce4:	1884703a 	and	r2,r3,r2
 4011ce8:	1001703a 	wrctl	status,r2
  
  return context;
 4011cec:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 4011cf0:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on mailbox      */
 4011cf4:	e0bffd17 	ldw	r2,-12(fp)
 4011cf8:	10800283 	ldbu	r2,10(r2)
 4011cfc:	10803fcc 	andi	r2,r2,255
 4011d00:	10000326 	beq	r2,zero,4011d10 <OSMboxDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 4011d04:	00800044 	movi	r2,1
 4011d08:	e0bff505 	stb	r2,-44(fp)
 4011d0c:	00000106 	br	4011d14 <OSMboxDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 4011d10:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
 4011d14:	e0bffe03 	ldbu	r2,-8(fp)
 4011d18:	10000326 	beq	r2,zero,4011d28 <OSMboxDel+0xec>
 4011d1c:	10800060 	cmpeqi	r2,r2,1
 4011d20:	1000281e 	bne	r2,zero,4011dc4 <OSMboxDel+0x188>
 4011d24:	00004506 	br	4011e3c <OSMboxDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete mailbox only if no task waiting   */
             if (tasks_waiting == OS_FALSE) {
 4011d28:	e0bff503 	ldbu	r2,-44(fp)
 4011d2c:	1000161e 	bne	r2,zero,4011d88 <OSMboxDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 4011d30:	e0bffd17 	ldw	r2,-12(fp)
 4011d34:	00c00fc4 	movi	r3,63
 4011d38:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 4011d3c:	e0bffd17 	ldw	r2,-12(fp)
 4011d40:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType = OS_EVENT_TYPE_UNUSED;
 4011d44:	e0bffd17 	ldw	r2,-12(fp)
 4011d48:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr  = OSEventFreeList;    /* Return Event Control Block to free list  */
 4011d4c:	d0e73017 	ldw	r3,-25408(gp)
 4011d50:	e0bffd17 	ldw	r2,-12(fp)
 4011d54:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt  = 0;
 4011d58:	e0bffd17 	ldw	r2,-12(fp)
 4011d5c:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList     = pevent;             /* Get next free event control block        */
 4011d60:	e0bffd17 	ldw	r2,-12(fp)
 4011d64:	d0a73015 	stw	r2,-25408(gp)
 4011d68:	e0bff717 	ldw	r2,-36(fp)
 4011d6c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4011d70:	e0bff817 	ldw	r2,-32(fp)
 4011d74:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
 4011d78:	e0bfff17 	ldw	r2,-4(fp)
 4011d7c:	10000005 	stb	zero,0(r2)
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
 4011d80:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
                 pevent_return       = pevent;
             }
             break;
 4011d84:	00003706 	br	4011e64 <OSMboxDel+0x228>
 4011d88:	e0bff717 	ldw	r2,-36(fp)
 4011d8c:	e0bff915 	stw	r2,-28(fp)
 4011d90:	e0bff917 	ldw	r2,-28(fp)
 4011d94:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_NONE;
                 pevent_return       = (OS_EVENT *)0;      /* Mailbox has been deleted                 */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr               = OS_ERR_TASK_WAITING;
 4011d98:	e0bfff17 	ldw	r2,-4(fp)
 4011d9c:	00c01244 	movi	r3,73
 4011da0:	10c00005 	stb	r3,0(r2)
                 pevent_return       = pevent;
 4011da4:	e0bffd17 	ldw	r2,-12(fp)
 4011da8:	e0bff615 	stw	r2,-40(fp)
             }
             break;
 4011dac:	00002d06 	br	4011e64 <OSMboxDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
 4011db0:	000f883a 	mov	r7,zero
 4011db4:	01800084 	movi	r6,2
 4011db8:	000b883a 	mov	r5,zero
 4011dbc:	e13ffd17 	ldw	r4,-12(fp)
 4011dc0:	400f10c0 	call	400f10c <OS_EventTaskRdy>
                 pevent_return       = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the mailbox                */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for mailbox      */
 4011dc4:	e0bffd17 	ldw	r2,-12(fp)
 4011dc8:	10800283 	ldbu	r2,10(r2)
 4011dcc:	10803fcc 	andi	r2,r2,255
 4011dd0:	103ff71e 	bne	r2,zero,4011db0 <__alt_mem_onchip_memory2_0+0xfbff1db0>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 4011dd4:	e0bffd17 	ldw	r2,-12(fp)
 4011dd8:	00c00fc4 	movi	r3,63
 4011ddc:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 4011de0:	e0bffd17 	ldw	r2,-12(fp)
 4011de4:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 4011de8:	e0bffd17 	ldw	r2,-12(fp)
 4011dec:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 4011df0:	d0e73017 	ldw	r3,-25408(gp)
 4011df4:	e0bffd17 	ldw	r2,-12(fp)
 4011df8:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 4011dfc:	e0bffd17 	ldw	r2,-12(fp)
 4011e00:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 4011e04:	e0bffd17 	ldw	r2,-12(fp)
 4011e08:	d0a73015 	stw	r2,-25408(gp)
 4011e0c:	e0bff717 	ldw	r2,-36(fp)
 4011e10:	e0bffa15 	stw	r2,-24(fp)
 4011e14:	e0bffa17 	ldw	r2,-24(fp)
 4011e18:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 4011e1c:	e0bff503 	ldbu	r2,-44(fp)
 4011e20:	10800058 	cmpnei	r2,r2,1
 4011e24:	1000011e 	bne	r2,zero,4011e2c <OSMboxDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 4011e28:	400fb580 	call	400fb58 <OS_Sched>
             }
             *perr         = OS_ERR_NONE;
 4011e2c:	e0bfff17 	ldw	r2,-4(fp)
 4011e30:	10000005 	stb	zero,0(r2)
             pevent_return = (OS_EVENT *)0;                /* Mailbox has been deleted                 */
 4011e34:	e03ff615 	stw	zero,-40(fp)
             break;
 4011e38:	00000a06 	br	4011e64 <OSMboxDel+0x228>
 4011e3c:	e0bff717 	ldw	r2,-36(fp)
 4011e40:	e0bffb15 	stw	r2,-20(fp)
 4011e44:	e0bffb17 	ldw	r2,-20(fp)
 4011e48:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr         = OS_ERR_INVALID_OPT;
 4011e4c:	e0bfff17 	ldw	r2,-4(fp)
 4011e50:	00c001c4 	movi	r3,7
 4011e54:	10c00005 	stb	r3,0(r2)
             pevent_return = pevent;
 4011e58:	e0bffd17 	ldw	r2,-12(fp)
 4011e5c:	e0bff615 	stw	r2,-40(fp)
             break;
 4011e60:	0001883a 	nop
    }
    return (pevent_return);
 4011e64:	e0bff617 	ldw	r2,-40(fp)
}
 4011e68:	e037883a 	mov	sp,fp
 4011e6c:	dfc00117 	ldw	ra,4(sp)
 4011e70:	df000017 	ldw	fp,0(sp)
 4011e74:	dec00204 	addi	sp,sp,8
 4011e78:	f800283a 	ret

04011e7c <OSMboxPend>:
*                            if you didn't pass the proper pointer to the event control block.
*********************************************************************************************************
*/
/*$PAGE*/
void  *OSMboxPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 4011e7c:	defff404 	addi	sp,sp,-48
 4011e80:	dfc00b15 	stw	ra,44(sp)
 4011e84:	df000a15 	stw	fp,40(sp)
 4011e88:	df000a04 	addi	fp,sp,40
 4011e8c:	e13ffd15 	stw	r4,-12(fp)
 4011e90:	2805883a 	mov	r2,r5
 4011e94:	e1bfff15 	stw	r6,-4(fp)
 4011e98:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 4011e9c:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 4011ea0:	e0bfff17 	ldw	r2,-4(fp)
 4011ea4:	1000021e 	bne	r2,zero,4011eb0 <OSMboxPend+0x34>
        return ((void *)0);
 4011ea8:	0005883a 	mov	r2,zero
 4011eac:	00007b06 	br	401209c <OSMboxPend+0x220>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 4011eb0:	e0bffd17 	ldw	r2,-12(fp)
 4011eb4:	1000051e 	bne	r2,zero,4011ecc <OSMboxPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 4011eb8:	e0bfff17 	ldw	r2,-4(fp)
 4011ebc:	00c00104 	movi	r3,4
 4011ec0:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 4011ec4:	0005883a 	mov	r2,zero
 4011ec8:	00007406 	br	401209c <OSMboxPend+0x220>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
 4011ecc:	e0bffd17 	ldw	r2,-12(fp)
 4011ed0:	10800003 	ldbu	r2,0(r2)
 4011ed4:	10803fcc 	andi	r2,r2,255
 4011ed8:	10800060 	cmpeqi	r2,r2,1
 4011edc:	1000051e 	bne	r2,zero,4011ef4 <OSMboxPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 4011ee0:	e0bfff17 	ldw	r2,-4(fp)
 4011ee4:	00c00044 	movi	r3,1
 4011ee8:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 4011eec:	0005883a 	mov	r2,zero
 4011ef0:	00006a06 	br	401209c <OSMboxPend+0x220>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
 4011ef4:	d0a73103 	ldbu	r2,-25404(gp)
 4011ef8:	10803fcc 	andi	r2,r2,255
 4011efc:	10000526 	beq	r2,zero,4011f14 <OSMboxPend+0x98>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 4011f00:	e0bfff17 	ldw	r2,-4(fp)
 4011f04:	00c00084 	movi	r3,2
 4011f08:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 4011f0c:	0005883a 	mov	r2,zero
 4011f10:	00006206 	br	401209c <OSMboxPend+0x220>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
 4011f14:	d0a72303 	ldbu	r2,-25460(gp)
 4011f18:	10803fcc 	andi	r2,r2,255
 4011f1c:	10000526 	beq	r2,zero,4011f34 <OSMboxPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 4011f20:	e0bfff17 	ldw	r2,-4(fp)
 4011f24:	00c00344 	movi	r3,13
 4011f28:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 4011f2c:	0005883a 	mov	r2,zero
 4011f30:	00005a06 	br	401209c <OSMboxPend+0x220>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4011f34:	0005303a 	rdctl	r2,status
 4011f38:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011f3c:	e0fffc17 	ldw	r3,-16(fp)
 4011f40:	00bfff84 	movi	r2,-2
 4011f44:	1884703a 	and	r2,r3,r2
 4011f48:	1001703a 	wrctl	status,r2
  
  return context;
 4011f4c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 4011f50:	e0bff715 	stw	r2,-36(fp)
    pmsg = pevent->OSEventPtr;
 4011f54:	e0bffd17 	ldw	r2,-12(fp)
 4011f58:	10800117 	ldw	r2,4(r2)
 4011f5c:	e0bff615 	stw	r2,-40(fp)
    if (pmsg != (void *)0) {                          /* See if there is already a message             */
 4011f60:	e0bff617 	ldw	r2,-40(fp)
 4011f64:	10000a26 	beq	r2,zero,4011f90 <OSMboxPend+0x114>
        pevent->OSEventPtr = (void *)0;               /* Clear the mailbox                             */
 4011f68:	e0bffd17 	ldw	r2,-12(fp)
 4011f6c:	10000115 	stw	zero,4(r2)
 4011f70:	e0bff717 	ldw	r2,-36(fp)
 4011f74:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4011f78:	e0bff817 	ldw	r2,-32(fp)
 4011f7c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 4011f80:	e0bfff17 	ldw	r2,-4(fp)
 4011f84:	10000005 	stb	zero,0(r2)
        return (pmsg);                                /* Return the message received (or NULL)         */
 4011f88:	e0bff617 	ldw	r2,-40(fp)
 4011f8c:	00004306 	br	401209c <OSMboxPend+0x220>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_MBOX;          /* Message not available, task will pend         */
 4011f90:	d0a73217 	ldw	r2,-25400(gp)
 4011f94:	d0e73217 	ldw	r3,-25400(gp)
 4011f98:	18c00c03 	ldbu	r3,48(r3)
 4011f9c:	18c00094 	ori	r3,r3,2
 4011fa0:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 4011fa4:	d0a73217 	ldw	r2,-25400(gp)
 4011fa8:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Load timeout in TCB                           */
 4011fac:	d0a73217 	ldw	r2,-25400(gp)
 4011fb0:	e0fffe0b 	ldhu	r3,-8(fp)
 4011fb4:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 4011fb8:	e13ffd17 	ldw	r4,-12(fp)
 4011fbc:	400f2a40 	call	400f2a4 <OS_EventTaskWait>
 4011fc0:	e0bff717 	ldw	r2,-36(fp)
 4011fc4:	e0bffb15 	stw	r2,-20(fp)
 4011fc8:	e0bffb17 	ldw	r2,-20(fp)
 4011fcc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready to run  */
 4011fd0:	400fb580 	call	400fb58 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4011fd4:	0005303a 	rdctl	r2,status
 4011fd8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011fdc:	e0fff917 	ldw	r3,-28(fp)
 4011fe0:	00bfff84 	movi	r2,-2
 4011fe4:	1884703a 	and	r2,r3,r2
 4011fe8:	1001703a 	wrctl	status,r2
  
  return context;
 4011fec:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
 4011ff0:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 4011ff4:	d0a73217 	ldw	r2,-25400(gp)
 4011ff8:	10800c43 	ldbu	r2,49(r2)
 4011ffc:	10803fcc 	andi	r2,r2,255
 4012000:	10000326 	beq	r2,zero,4012010 <OSMboxPend+0x194>
 4012004:	108000a0 	cmpeqi	r2,r2,2
 4012008:	1000071e 	bne	r2,zero,4012028 <OSMboxPend+0x1ac>
 401200c:	00000b06 	br	401203c <OSMboxPend+0x1c0>
        case OS_STAT_PEND_OK:
             pmsg =  OSTCBCur->OSTCBMsg;
 4012010:	d0a73217 	ldw	r2,-25400(gp)
 4012014:	10800917 	ldw	r2,36(r2)
 4012018:	e0bff615 	stw	r2,-40(fp)
            *perr =  OS_ERR_NONE;
 401201c:	e0bfff17 	ldw	r2,-4(fp)
 4012020:	10000005 	stb	zero,0(r2)
             break;
 4012024:	00000e06 	br	4012060 <OSMboxPend+0x1e4>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
 4012028:	e03ff615 	stw	zero,-40(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 401202c:	e0bfff17 	ldw	r2,-4(fp)
 4012030:	00c00384 	movi	r3,14
 4012034:	10c00005 	stb	r3,0(r2)
             break;
 4012038:	00000906 	br	4012060 <OSMboxPend+0x1e4>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 401203c:	d0a73217 	ldw	r2,-25400(gp)
 4012040:	e17ffd17 	ldw	r5,-12(fp)
 4012044:	1009883a 	mov	r4,r2
 4012048:	400f5040 	call	400f504 <OS_EventTaskRemove>
             pmsg = (void *)0;
 401204c:	e03ff615 	stw	zero,-40(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 4012050:	e0bfff17 	ldw	r2,-4(fp)
 4012054:	00c00284 	movi	r3,10
 4012058:	10c00005 	stb	r3,0(r2)
             break;
 401205c:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 4012060:	d0a73217 	ldw	r2,-25400(gp)
 4012064:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 4012068:	d0a73217 	ldw	r2,-25400(gp)
 401206c:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 4012070:	d0a73217 	ldw	r2,-25400(gp)
 4012074:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 4012078:	d0a73217 	ldw	r2,-25400(gp)
 401207c:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
 4012080:	d0a73217 	ldw	r2,-25400(gp)
 4012084:	10000915 	stw	zero,36(r2)
 4012088:	e0bff717 	ldw	r2,-36(fp)
 401208c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4012090:	e0bffa17 	ldw	r2,-24(fp)
 4012094:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
 4012098:	e0bff617 	ldw	r2,-40(fp)
}
 401209c:	e037883a 	mov	sp,fp
 40120a0:	dfc00117 	ldw	ra,4(sp)
 40120a4:	df000017 	ldw	fp,0(sp)
 40120a8:	dec00204 	addi	sp,sp,8
 40120ac:	f800283a 	ret

040120b0 <OSMboxPendAbort>:
*********************************************************************************************************
*/

#if OS_MBOX_PEND_ABORT_EN > 0
INT8U  OSMboxPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 40120b0:	defff604 	addi	sp,sp,-40
 40120b4:	dfc00915 	stw	ra,36(sp)
 40120b8:	df000815 	stw	fp,32(sp)
 40120bc:	df000804 	addi	fp,sp,32
 40120c0:	e13ffd15 	stw	r4,-12(fp)
 40120c4:	2805883a 	mov	r2,r5
 40120c8:	e1bfff15 	stw	r6,-4(fp)
 40120cc:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 40120d0:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 40120d4:	e0bfff17 	ldw	r2,-4(fp)
 40120d8:	1000021e 	bne	r2,zero,40120e4 <OSMboxPendAbort+0x34>
        return (0);
 40120dc:	0005883a 	mov	r2,zero
 40120e0:	00004906 	br	4012208 <OSMboxPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 40120e4:	e0bffd17 	ldw	r2,-12(fp)
 40120e8:	1000051e 	bne	r2,zero,4012100 <OSMboxPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 40120ec:	e0bfff17 	ldw	r2,-4(fp)
 40120f0:	00c00104 	movi	r3,4
 40120f4:	10c00005 	stb	r3,0(r2)
        return (0);
 40120f8:	0005883a 	mov	r2,zero
 40120fc:	00004206 	br	4012208 <OSMboxPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
 4012100:	e0bffd17 	ldw	r2,-12(fp)
 4012104:	10800003 	ldbu	r2,0(r2)
 4012108:	10803fcc 	andi	r2,r2,255
 401210c:	10800060 	cmpeqi	r2,r2,1
 4012110:	1000051e 	bne	r2,zero,4012128 <OSMboxPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 4012114:	e0bfff17 	ldw	r2,-4(fp)
 4012118:	00c00044 	movi	r3,1
 401211c:	10c00005 	stb	r3,0(r2)
        return (0);
 4012120:	0005883a 	mov	r2,zero
 4012124:	00003806 	br	4012208 <OSMboxPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4012128:	0005303a 	rdctl	r2,status
 401212c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4012130:	e0fffc17 	ldw	r3,-16(fp)
 4012134:	00bfff84 	movi	r2,-2
 4012138:	1884703a 	and	r2,r3,r2
 401213c:	1001703a 	wrctl	status,r2
  
  return context;
 4012140:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 4012144:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
 4012148:	e0bffd17 	ldw	r2,-12(fp)
 401214c:	10800283 	ldbu	r2,10(r2)
 4012150:	10803fcc 	andi	r2,r2,255
 4012154:	10002526 	beq	r2,zero,40121ec <OSMboxPendAbort+0x13c>
        nbr_tasks = 0;
 4012158:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
 401215c:	e0bffe03 	ldbu	r2,-8(fp)
 4012160:	10800060 	cmpeqi	r2,r2,1
 4012164:	10000e26 	beq	r2,zero,40121a0 <OSMboxPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
 4012168:	00000806 	br	401218c <OSMboxPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
 401216c:	01c00084 	movi	r7,2
 4012170:	01800084 	movi	r6,2
 4012174:	000b883a 	mov	r5,zero
 4012178:	e13ffd17 	ldw	r4,-12(fp)
 401217c:	400f10c0 	call	400f10c <OS_EventTaskRdy>
                     nbr_tasks++;
 4012180:	e0bff803 	ldbu	r2,-32(fp)
 4012184:	10800044 	addi	r2,r2,1
 4012188:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on mailbox?      */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on mailbox  */
 401218c:	e0bffd17 	ldw	r2,-12(fp)
 4012190:	10800283 	ldbu	r2,10(r2)
 4012194:	10803fcc 	andi	r2,r2,255
 4012198:	103ff41e 	bne	r2,zero,401216c <__alt_mem_onchip_memory2_0+0xfbff216c>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 401219c:	00000906 	br	40121c4 <OSMboxPendAbort+0x114>
             
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on mailbox  */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_MBOX, OS_STAT_PEND_ABORT);
 40121a0:	01c00084 	movi	r7,2
 40121a4:	01800084 	movi	r6,2
 40121a8:	000b883a 	mov	r5,zero
 40121ac:	e13ffd17 	ldw	r4,-12(fp)
 40121b0:	400f10c0 	call	400f10c <OS_EventTaskRdy>
                 nbr_tasks++;
 40121b4:	e0bff803 	ldbu	r2,-32(fp)
 40121b8:	10800044 	addi	r2,r2,1
 40121bc:	e0bff805 	stb	r2,-32(fp)
                 break;
 40121c0:	0001883a 	nop
 40121c4:	e0bff917 	ldw	r2,-28(fp)
 40121c8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40121cc:	e0bffa17 	ldw	r2,-24(fp)
 40121d0:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
 40121d4:	400fb580 	call	400fb58 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 40121d8:	e0bfff17 	ldw	r2,-4(fp)
 40121dc:	00c00384 	movi	r3,14
 40121e0:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
 40121e4:	e0bff803 	ldbu	r2,-32(fp)
 40121e8:	00000706 	br	4012208 <OSMboxPendAbort+0x158>
 40121ec:	e0bff917 	ldw	r2,-28(fp)
 40121f0:	e0bffb15 	stw	r2,-20(fp)
 40121f4:	e0bffb17 	ldw	r2,-20(fp)
 40121f8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 40121fc:	e0bfff17 	ldw	r2,-4(fp)
 4012200:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on mailbox              */
 4012204:	0005883a 	mov	r2,zero
}
 4012208:	e037883a 	mov	sp,fp
 401220c:	dfc00117 	ldw	ra,4(sp)
 4012210:	df000017 	ldw	fp,0(sp)
 4012214:	dec00204 	addi	sp,sp,8
 4012218:	f800283a 	ret

0401221c <OSMboxPost>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_EN > 0
INT8U  OSMboxPost (OS_EVENT *pevent, void *pmsg)
{
 401221c:	defff704 	addi	sp,sp,-36
 4012220:	dfc00815 	stw	ra,32(sp)
 4012224:	df000715 	stw	fp,28(sp)
 4012228:	df000704 	addi	fp,sp,28
 401222c:	e13ffe15 	stw	r4,-8(fp)
 4012230:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 4012234:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 4012238:	e0bffe17 	ldw	r2,-8(fp)
 401223c:	1000021e 	bne	r2,zero,4012248 <OSMboxPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
 4012240:	00800104 	movi	r2,4
 4012244:	00003406 	br	4012318 <OSMboxPost+0xfc>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
 4012248:	e0bfff17 	ldw	r2,-4(fp)
 401224c:	1000021e 	bne	r2,zero,4012258 <OSMboxPost+0x3c>
        return (OS_ERR_POST_NULL_PTR);
 4012250:	008000c4 	movi	r2,3
 4012254:	00003006 	br	4012318 <OSMboxPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
 4012258:	e0bffe17 	ldw	r2,-8(fp)
 401225c:	10800003 	ldbu	r2,0(r2)
 4012260:	10803fcc 	andi	r2,r2,255
 4012264:	10800060 	cmpeqi	r2,r2,1
 4012268:	1000021e 	bne	r2,zero,4012274 <OSMboxPost+0x58>
        return (OS_ERR_EVENT_TYPE);
 401226c:	00800044 	movi	r2,1
 4012270:	00002906 	br	4012318 <OSMboxPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4012274:	0005303a 	rdctl	r2,status
 4012278:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401227c:	e0fffd17 	ldw	r3,-12(fp)
 4012280:	00bfff84 	movi	r2,-2
 4012284:	1884703a 	and	r2,r3,r2
 4012288:	1001703a 	wrctl	status,r2
  
  return context;
 401228c:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 4012290:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
 4012294:	e0bffe17 	ldw	r2,-8(fp)
 4012298:	10800283 	ldbu	r2,10(r2)
 401229c:	10803fcc 	andi	r2,r2,255
 40122a0:	10000c26 	beq	r2,zero,40122d4 <OSMboxPost+0xb8>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
 40122a4:	000f883a 	mov	r7,zero
 40122a8:	01800084 	movi	r6,2
 40122ac:	e17fff17 	ldw	r5,-4(fp)
 40122b0:	e13ffe17 	ldw	r4,-8(fp)
 40122b4:	400f10c0 	call	400f10c <OS_EventTaskRdy>
 40122b8:	e0bff917 	ldw	r2,-28(fp)
 40122bc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40122c0:	e0bffa17 	ldw	r2,-24(fp)
 40122c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
 40122c8:	400fb580 	call	400fb58 <OS_Sched>
        return (OS_ERR_NONE);
 40122cc:	0005883a 	mov	r2,zero
 40122d0:	00001106 	br	4012318 <OSMboxPost+0xfc>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
 40122d4:	e0bffe17 	ldw	r2,-8(fp)
 40122d8:	10800117 	ldw	r2,4(r2)
 40122dc:	10000626 	beq	r2,zero,40122f8 <OSMboxPost+0xdc>
 40122e0:	e0bff917 	ldw	r2,-28(fp)
 40122e4:	e0bffb15 	stw	r2,-20(fp)
 40122e8:	e0bffb17 	ldw	r2,-20(fp)
 40122ec:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
 40122f0:	00800504 	movi	r2,20
 40122f4:	00000806 	br	4012318 <OSMboxPost+0xfc>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
 40122f8:	e0bffe17 	ldw	r2,-8(fp)
 40122fc:	e0ffff17 	ldw	r3,-4(fp)
 4012300:	10c00115 	stw	r3,4(r2)
 4012304:	e0bff917 	ldw	r2,-28(fp)
 4012308:	e0bffc15 	stw	r2,-16(fp)
 401230c:	e0bffc17 	ldw	r2,-16(fp)
 4012310:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 4012314:	0005883a 	mov	r2,zero
}
 4012318:	e037883a 	mov	sp,fp
 401231c:	dfc00117 	ldw	ra,4(sp)
 4012320:	df000017 	ldw	fp,0(sp)
 4012324:	dec00204 	addi	sp,sp,8
 4012328:	f800283a 	ret

0401232c <OSMboxPostOpt>:
*********************************************************************************************************
*/

#if OS_MBOX_POST_OPT_EN > 0
INT8U  OSMboxPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
 401232c:	defff604 	addi	sp,sp,-40
 4012330:	dfc00915 	stw	ra,36(sp)
 4012334:	df000815 	stw	fp,32(sp)
 4012338:	df000804 	addi	fp,sp,32
 401233c:	e13ffd15 	stw	r4,-12(fp)
 4012340:	e17ffe15 	stw	r5,-8(fp)
 4012344:	3005883a 	mov	r2,r6
 4012348:	e0bfff05 	stb	r2,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 401234c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 4012350:	e0bffd17 	ldw	r2,-12(fp)
 4012354:	1000021e 	bne	r2,zero,4012360 <OSMboxPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
 4012358:	00800104 	movi	r2,4
 401235c:	00004506 	br	4012474 <OSMboxPostOpt+0x148>
    }
    if (pmsg == (void *)0) {                          /* Make sure we are not posting a NULL pointer   */
 4012360:	e0bffe17 	ldw	r2,-8(fp)
 4012364:	1000021e 	bne	r2,zero,4012370 <OSMboxPostOpt+0x44>
        return (OS_ERR_POST_NULL_PTR);
 4012368:	008000c4 	movi	r2,3
 401236c:	00004106 	br	4012474 <OSMboxPostOpt+0x148>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {  /* Validate event block type                     */
 4012370:	e0bffd17 	ldw	r2,-12(fp)
 4012374:	10800003 	ldbu	r2,0(r2)
 4012378:	10803fcc 	andi	r2,r2,255
 401237c:	10800060 	cmpeqi	r2,r2,1
 4012380:	1000021e 	bne	r2,zero,401238c <OSMboxPostOpt+0x60>
        return (OS_ERR_EVENT_TYPE);
 4012384:	00800044 	movi	r2,1
 4012388:	00003a06 	br	4012474 <OSMboxPostOpt+0x148>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401238c:	0005303a 	rdctl	r2,status
 4012390:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4012394:	e0fffc17 	ldw	r3,-16(fp)
 4012398:	00bfff84 	movi	r2,-2
 401239c:	1884703a 	and	r2,r3,r2
 40123a0:	1001703a 	wrctl	status,r2
  
  return context;
 40123a4:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 40123a8:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
 40123ac:	e0bffd17 	ldw	r2,-12(fp)
 40123b0:	10800283 	ldbu	r2,10(r2)
 40123b4:	10803fcc 	andi	r2,r2,255
 40123b8:	10001d26 	beq	r2,zero,4012430 <OSMboxPostOpt+0x104>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
 40123bc:	e0bfff03 	ldbu	r2,-4(fp)
 40123c0:	1080004c 	andi	r2,r2,1
 40123c4:	10000b26 	beq	r2,zero,40123f4 <OSMboxPostOpt+0xc8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
 40123c8:	00000506 	br	40123e0 <OSMboxPostOpt+0xb4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
 40123cc:	000f883a 	mov	r7,zero
 40123d0:	01800084 	movi	r6,2
 40123d4:	e17ffe17 	ldw	r5,-8(fp)
 40123d8:	e13ffd17 	ldw	r4,-12(fp)
 40123dc:	400f10c0 	call	400f10c <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on mailbox            */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on mailbox     */
 40123e0:	e0bffd17 	ldw	r2,-12(fp)
 40123e4:	10800283 	ldbu	r2,10(r2)
 40123e8:	10803fcc 	andi	r2,r2,255
 40123ec:	103ff71e 	bne	r2,zero,40123cc <__alt_mem_onchip_memory2_0+0xfbff23cc>
 40123f0:	00000506 	br	4012408 <OSMboxPostOpt+0xdc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on mbox              */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_MBOX, OS_STAT_PEND_OK);
 40123f4:	000f883a 	mov	r7,zero
 40123f8:	01800084 	movi	r6,2
 40123fc:	e17ffe17 	ldw	r5,-8(fp)
 4012400:	e13ffd17 	ldw	r4,-12(fp)
 4012404:	400f10c0 	call	400f10c <OS_EventTaskRdy>
 4012408:	e0bff817 	ldw	r2,-32(fp)
 401240c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4012410:	e0bff917 	ldw	r2,-28(fp)
 4012414:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
 4012418:	e0bfff03 	ldbu	r2,-4(fp)
 401241c:	1080010c 	andi	r2,r2,4
 4012420:	1000011e 	bne	r2,zero,4012428 <OSMboxPostOpt+0xfc>
            OS_Sched();                               /* Find HPT ready to run                         */
 4012424:	400fb580 	call	400fb58 <OS_Sched>
        }
        return (OS_ERR_NONE);
 4012428:	0005883a 	mov	r2,zero
 401242c:	00001106 	br	4012474 <OSMboxPostOpt+0x148>
    }
    if (pevent->OSEventPtr != (void *)0) {            /* Make sure mailbox doesn't already have a msg  */
 4012430:	e0bffd17 	ldw	r2,-12(fp)
 4012434:	10800117 	ldw	r2,4(r2)
 4012438:	10000626 	beq	r2,zero,4012454 <OSMboxPostOpt+0x128>
 401243c:	e0bff817 	ldw	r2,-32(fp)
 4012440:	e0bffa15 	stw	r2,-24(fp)
 4012444:	e0bffa17 	ldw	r2,-24(fp)
 4012448:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MBOX_FULL);
 401244c:	00800504 	movi	r2,20
 4012450:	00000806 	br	4012474 <OSMboxPostOpt+0x148>
    }
    pevent->OSEventPtr = pmsg;                        /* Place message in mailbox                      */
 4012454:	e0bffd17 	ldw	r2,-12(fp)
 4012458:	e0fffe17 	ldw	r3,-8(fp)
 401245c:	10c00115 	stw	r3,4(r2)
 4012460:	e0bff817 	ldw	r2,-32(fp)
 4012464:	e0bffb15 	stw	r2,-20(fp)
 4012468:	e0bffb17 	ldw	r2,-20(fp)
 401246c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 4012470:	0005883a 	mov	r2,zero
}
 4012474:	e037883a 	mov	sp,fp
 4012478:	dfc00117 	ldw	ra,4(sp)
 401247c:	df000017 	ldw	fp,0(sp)
 4012480:	dec00204 	addi	sp,sp,8
 4012484:	f800283a 	ret

04012488 <OSMboxQuery>:
*********************************************************************************************************
*/

#if OS_MBOX_QUERY_EN > 0
INT8U  OSMboxQuery (OS_EVENT *pevent, OS_MBOX_DATA *p_mbox_data)
{
 4012488:	defff704 	addi	sp,sp,-36
 401248c:	df000815 	stw	fp,32(sp)
 4012490:	df000804 	addi	fp,sp,32
 4012494:	e13ffe15 	stw	r4,-8(fp)
 4012498:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 401249c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 40124a0:	e0bffe17 	ldw	r2,-8(fp)
 40124a4:	1000021e 	bne	r2,zero,40124b0 <OSMboxQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
 40124a8:	00800104 	movi	r2,4
 40124ac:	00003606 	br	4012588 <OSMboxQuery+0x100>
    }
    if (p_mbox_data == (OS_MBOX_DATA *)0) {                /* Validate 'p_mbox_data'                   */
 40124b0:	e0bfff17 	ldw	r2,-4(fp)
 40124b4:	1000021e 	bne	r2,zero,40124c0 <OSMboxQuery+0x38>
        return (OS_ERR_PDATA_NULL);
 40124b8:	00800244 	movi	r2,9
 40124bc:	00003206 	br	4012588 <OSMboxQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_MBOX) {       /* Validate event block type                */
 40124c0:	e0bffe17 	ldw	r2,-8(fp)
 40124c4:	10800003 	ldbu	r2,0(r2)
 40124c8:	10803fcc 	andi	r2,r2,255
 40124cc:	10800060 	cmpeqi	r2,r2,1
 40124d0:	1000021e 	bne	r2,zero,40124dc <OSMboxQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
 40124d4:	00800044 	movi	r2,1
 40124d8:	00002b06 	br	4012588 <OSMboxQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40124dc:	0005303a 	rdctl	r2,status
 40124e0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40124e4:	e0fffd17 	ldw	r3,-12(fp)
 40124e8:	00bfff84 	movi	r2,-2
 40124ec:	1884703a 	and	r2,r3,r2
 40124f0:	1001703a 	wrctl	status,r2
  
  return context;
 40124f4:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 40124f8:	e0bffb15 	stw	r2,-20(fp)
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
 40124fc:	e0bffe17 	ldw	r2,-8(fp)
 4012500:	10c00283 	ldbu	r3,10(r2)
 4012504:	e0bfff17 	ldw	r2,-4(fp)
 4012508:	10c001c5 	stb	r3,7(r2)
    psrc                    = &pevent->OSEventTbl[0];
 401250c:	e0bffe17 	ldw	r2,-8(fp)
 4012510:	108002c4 	addi	r2,r2,11
 4012514:	e0bff915 	stw	r2,-28(fp)
    pdest                   = &p_mbox_data->OSEventTbl[0];
 4012518:	e0bfff17 	ldw	r2,-4(fp)
 401251c:	10800104 	addi	r2,r2,4
 4012520:	e0bffa15 	stw	r2,-24(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 4012524:	e03ff805 	stb	zero,-32(fp)
 4012528:	00000b06 	br	4012558 <OSMboxQuery+0xd0>
        *pdest++ = *psrc++;
 401252c:	e0bffa17 	ldw	r2,-24(fp)
 4012530:	10c00044 	addi	r3,r2,1
 4012534:	e0fffa15 	stw	r3,-24(fp)
 4012538:	e0fff917 	ldw	r3,-28(fp)
 401253c:	19000044 	addi	r4,r3,1
 4012540:	e13ff915 	stw	r4,-28(fp)
 4012544:	18c00003 	ldbu	r3,0(r3)
 4012548:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_mbox_data->OSEventGrp = pevent->OSEventGrp;          /* Copy message mailbox wait list           */
    psrc                    = &pevent->OSEventTbl[0];
    pdest                   = &p_mbox_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 401254c:	e0bff803 	ldbu	r2,-32(fp)
 4012550:	10800044 	addi	r2,r2,1
 4012554:	e0bff805 	stb	r2,-32(fp)
 4012558:	e0bff803 	ldbu	r2,-32(fp)
 401255c:	108000f0 	cmpltui	r2,r2,3
 4012560:	103ff21e 	bne	r2,zero,401252c <__alt_mem_onchip_memory2_0+0xfbff252c>
        *pdest++ = *psrc++;
    }
    p_mbox_data->OSMsg = pevent->OSEventPtr;               /* Get message from mailbox                 */
 4012564:	e0bffe17 	ldw	r2,-8(fp)
 4012568:	10c00117 	ldw	r3,4(r2)
 401256c:	e0bfff17 	ldw	r2,-4(fp)
 4012570:	10c00015 	stw	r3,0(r2)
 4012574:	e0bffb17 	ldw	r2,-20(fp)
 4012578:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401257c:	e0bffc17 	ldw	r2,-16(fp)
 4012580:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 4012584:	0005883a 	mov	r2,zero
}
 4012588:	e037883a 	mov	sp,fp
 401258c:	df000017 	ldw	fp,0(sp)
 4012590:	dec00104 	addi	sp,sp,4
 4012594:	f800283a 	ret

04012598 <OSMemCreate>:
*                              free partition is available.
*********************************************************************************************************
*/

OS_MEM  *OSMemCreate (void *addr, INT32U nblks, INT32U blksize, INT8U *perr)
{
 4012598:	defff404 	addi	sp,sp,-48
 401259c:	df000b15 	stw	fp,44(sp)
 40125a0:	df000b04 	addi	fp,sp,44
 40125a4:	e13ffc15 	stw	r4,-16(fp)
 40125a8:	e17ffd15 	stw	r5,-12(fp)
 40125ac:	e1bffe15 	stw	r6,-8(fp)
 40125b0:	e1ffff15 	stw	r7,-4(fp)
    OS_MEM    *pmem;
    INT8U     *pblk;
    void     **plink;
    INT32U     i;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 40125b4:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0              
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 40125b8:	e0bfff17 	ldw	r2,-4(fp)
 40125bc:	1000021e 	bne	r2,zero,40125c8 <OSMemCreate+0x30>
        return ((OS_MEM *)0);
 40125c0:	0005883a 	mov	r2,zero
 40125c4:	00006506 	br	401275c <OSMemCreate+0x1c4>
    }
    if (addr == (void *)0) {                          /* Must pass a valid address for the memory part.*/
 40125c8:	e0bffc17 	ldw	r2,-16(fp)
 40125cc:	1000051e 	bne	r2,zero,40125e4 <OSMemCreate+0x4c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 40125d0:	e0bfff17 	ldw	r2,-4(fp)
 40125d4:	00c01884 	movi	r3,98
 40125d8:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 40125dc:	0005883a 	mov	r2,zero
 40125e0:	00005e06 	br	401275c <OSMemCreate+0x1c4>
    }
    if (((INT32U)addr & (sizeof(void *) - 1)) != 0){  /* Must be pointer size aligned                  */
 40125e4:	e0bffc17 	ldw	r2,-16(fp)
 40125e8:	108000cc 	andi	r2,r2,3
 40125ec:	10000526 	beq	r2,zero,4012604 <OSMemCreate+0x6c>
        *perr = OS_ERR_MEM_INVALID_ADDR;
 40125f0:	e0bfff17 	ldw	r2,-4(fp)
 40125f4:	00c01884 	movi	r3,98
 40125f8:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 40125fc:	0005883a 	mov	r2,zero
 4012600:	00005606 	br	401275c <OSMemCreate+0x1c4>
    }
    if (nblks < 2) {                                  /* Must have at least 2 blocks per partition     */
 4012604:	e0bffd17 	ldw	r2,-12(fp)
 4012608:	108000a8 	cmpgeui	r2,r2,2
 401260c:	1000051e 	bne	r2,zero,4012624 <OSMemCreate+0x8c>
        *perr = OS_ERR_MEM_INVALID_BLKS;
 4012610:	e0bfff17 	ldw	r2,-4(fp)
 4012614:	00c016c4 	movi	r3,91
 4012618:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 401261c:	0005883a 	mov	r2,zero
 4012620:	00004e06 	br	401275c <OSMemCreate+0x1c4>
    }
    if (blksize < sizeof(void *)) {                   /* Must contain space for at least a pointer     */
 4012624:	e0bffe17 	ldw	r2,-8(fp)
 4012628:	10800128 	cmpgeui	r2,r2,4
 401262c:	1000051e 	bne	r2,zero,4012644 <OSMemCreate+0xac>
        *perr = OS_ERR_MEM_INVALID_SIZE;
 4012630:	e0bfff17 	ldw	r2,-4(fp)
 4012634:	00c01704 	movi	r3,92
 4012638:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 401263c:	0005883a 	mov	r2,zero
 4012640:	00004606 	br	401275c <OSMemCreate+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4012644:	0005303a 	rdctl	r2,status
 4012648:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401264c:	e0fffb17 	ldw	r3,-20(fp)
 4012650:	00bfff84 	movi	r2,-2
 4012654:	1884703a 	and	r2,r3,r2
 4012658:	1001703a 	wrctl	status,r2
  
  return context;
 401265c:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 4012660:	e0bff815 	stw	r2,-32(fp)
    pmem = OSMemFreeList;                             /* Get next free memory partition                */
 4012664:	d0a72c17 	ldw	r2,-25424(gp)
 4012668:	e0bffa15 	stw	r2,-24(fp)
    if (OSMemFreeList != (OS_MEM *)0) {               /* See if pool of free partitions was empty      */
 401266c:	d0a72c17 	ldw	r2,-25424(gp)
 4012670:	10000326 	beq	r2,zero,4012680 <OSMemCreate+0xe8>
        OSMemFreeList = (OS_MEM *)OSMemFreeList->OSMemFreeList;
 4012674:	d0a72c17 	ldw	r2,-25424(gp)
 4012678:	10800117 	ldw	r2,4(r2)
 401267c:	d0a72c15 	stw	r2,-25424(gp)
 4012680:	e0bff817 	ldw	r2,-32(fp)
 4012684:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4012688:	e0bff917 	ldw	r2,-28(fp)
 401268c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pmem == (OS_MEM *)0) {                        /* See if we have a memory partition             */
 4012690:	e0bffa17 	ldw	r2,-24(fp)
 4012694:	1000051e 	bne	r2,zero,40126ac <OSMemCreate+0x114>
        *perr = OS_ERR_MEM_INVALID_PART;
 4012698:	e0bfff17 	ldw	r2,-4(fp)
 401269c:	00c01684 	movi	r3,90
 40126a0:	10c00005 	stb	r3,0(r2)
        return ((OS_MEM *)0);
 40126a4:	0005883a 	mov	r2,zero
 40126a8:	00002c06 	br	401275c <OSMemCreate+0x1c4>
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
 40126ac:	e0bffc17 	ldw	r2,-16(fp)
 40126b0:	e0bff615 	stw	r2,-40(fp)
    pblk  = (INT8U *)((INT32U)addr + blksize);
 40126b4:	e0fffc17 	ldw	r3,-16(fp)
 40126b8:	e0bffe17 	ldw	r2,-8(fp)
 40126bc:	1885883a 	add	r2,r3,r2
 40126c0:	e0bff515 	stw	r2,-44(fp)
    for (i = 0; i < (nblks - 1); i++) {
 40126c4:	e03ff715 	stw	zero,-36(fp)
 40126c8:	00000c06 	br	40126fc <OSMemCreate+0x164>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
 40126cc:	e0bff617 	ldw	r2,-40(fp)
 40126d0:	e0fff517 	ldw	r3,-44(fp)
 40126d4:	10c00015 	stw	r3,0(r2)
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
 40126d8:	e0bff517 	ldw	r2,-44(fp)
 40126dc:	e0bff615 	stw	r2,-40(fp)
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
 40126e0:	e0fff517 	ldw	r3,-44(fp)
 40126e4:	e0bffe17 	ldw	r2,-8(fp)
 40126e8:	1885883a 	add	r2,r3,r2
 40126ec:	e0bff515 	stw	r2,-44(fp)
        *perr = OS_ERR_MEM_INVALID_PART;
        return ((OS_MEM *)0);
    }
    plink = (void **)addr;                            /* Create linked list of free memory blocks      */
    pblk  = (INT8U *)((INT32U)addr + blksize);
    for (i = 0; i < (nblks - 1); i++) {
 40126f0:	e0bff717 	ldw	r2,-36(fp)
 40126f4:	10800044 	addi	r2,r2,1
 40126f8:	e0bff715 	stw	r2,-36(fp)
 40126fc:	e0bffd17 	ldw	r2,-12(fp)
 4012700:	10bfffc4 	addi	r2,r2,-1
 4012704:	e0fff717 	ldw	r3,-36(fp)
 4012708:	18bff036 	bltu	r3,r2,40126cc <__alt_mem_onchip_memory2_0+0xfbff26cc>
       *plink = (void *)pblk;                         /* Save pointer to NEXT block in CURRENT block   */
        plink = (void **)pblk;                        /* Position to  NEXT      block                  */
        pblk  = (INT8U *)((INT32U)pblk + blksize);    /* Point to the FOLLOWING block                  */
    }
    *plink              = (void *)0;                  /* Last memory block points to NULL              */
 401270c:	e0bff617 	ldw	r2,-40(fp)
 4012710:	10000015 	stw	zero,0(r2)
    pmem->OSMemAddr     = addr;                       /* Store start address of memory partition       */
 4012714:	e0bffa17 	ldw	r2,-24(fp)
 4012718:	e0fffc17 	ldw	r3,-16(fp)
 401271c:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = addr;                       /* Initialize pointer to pool of free blocks     */
 4012720:	e0bffa17 	ldw	r2,-24(fp)
 4012724:	e0fffc17 	ldw	r3,-16(fp)
 4012728:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree    = nblks;                      /* Store number of free blocks in MCB            */
 401272c:	e0bffa17 	ldw	r2,-24(fp)
 4012730:	e0fffd17 	ldw	r3,-12(fp)
 4012734:	10c00415 	stw	r3,16(r2)
    pmem->OSMemNBlks    = nblks;
 4012738:	e0bffa17 	ldw	r2,-24(fp)
 401273c:	e0fffd17 	ldw	r3,-12(fp)
 4012740:	10c00315 	stw	r3,12(r2)
    pmem->OSMemBlkSize  = blksize;                    /* Store block size of each memory blocks        */
 4012744:	e0bffa17 	ldw	r2,-24(fp)
 4012748:	e0fffe17 	ldw	r3,-8(fp)
 401274c:	10c00215 	stw	r3,8(r2)
    *perr               = OS_ERR_NONE;
 4012750:	e0bfff17 	ldw	r2,-4(fp)
 4012754:	10000005 	stb	zero,0(r2)
    return (pmem);
 4012758:	e0bffa17 	ldw	r2,-24(fp)
}
 401275c:	e037883a 	mov	sp,fp
 4012760:	df000017 	ldw	fp,0(sp)
 4012764:	dec00104 	addi	sp,sp,4
 4012768:	f800283a 	ret

0401276c <OSMemGet>:
*               A pointer to NULL if an error is detected
*********************************************************************************************************
*/

void  *OSMemGet (OS_MEM *pmem, INT8U *perr)
{
 401276c:	defff804 	addi	sp,sp,-32
 4012770:	df000715 	stw	fp,28(sp)
 4012774:	df000704 	addi	fp,sp,28
 4012778:	e13ffe15 	stw	r4,-8(fp)
 401277c:	e17fff15 	stw	r5,-4(fp)
    void      *pblk;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 4012780:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 4012784:	e0bfff17 	ldw	r2,-4(fp)
 4012788:	1000021e 	bne	r2,zero,4012794 <OSMemGet+0x28>
        return ((void *)0);
 401278c:	0005883a 	mov	r2,zero
 4012790:	00002e06 	br	401284c <OSMemGet+0xe0>
    }
    if (pmem == (OS_MEM *)0) {                        /* Must point to a valid memory partition        */
 4012794:	e0bffe17 	ldw	r2,-8(fp)
 4012798:	1000051e 	bne	r2,zero,40127b0 <OSMemGet+0x44>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 401279c:	e0bfff17 	ldw	r2,-4(fp)
 40127a0:	00c01804 	movi	r3,96
 40127a4:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 40127a8:	0005883a 	mov	r2,zero
 40127ac:	00002706 	br	401284c <OSMemGet+0xe0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40127b0:	0005303a 	rdctl	r2,status
 40127b4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40127b8:	e0fffd17 	ldw	r3,-12(fp)
 40127bc:	00bfff84 	movi	r2,-2
 40127c0:	1884703a 	and	r2,r3,r2
 40127c4:	1001703a 	wrctl	status,r2
  
  return context;
 40127c8:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 40127cc:	e0bff915 	stw	r2,-28(fp)
    if (pmem->OSMemNFree > 0) {                       /* See if there are any free memory blocks       */
 40127d0:	e0bffe17 	ldw	r2,-8(fp)
 40127d4:	10800417 	ldw	r2,16(r2)
 40127d8:	10001426 	beq	r2,zero,401282c <OSMemGet+0xc0>
        pblk                = pmem->OSMemFreeList;    /* Yes, point to next free memory block          */
 40127dc:	e0bffe17 	ldw	r2,-8(fp)
 40127e0:	10800117 	ldw	r2,4(r2)
 40127e4:	e0bffb15 	stw	r2,-20(fp)
        pmem->OSMemFreeList = *(void **)pblk;         /*      Adjust pointer to new free list          */
 40127e8:	e0bffb17 	ldw	r2,-20(fp)
 40127ec:	10c00017 	ldw	r3,0(r2)
 40127f0:	e0bffe17 	ldw	r2,-8(fp)
 40127f4:	10c00115 	stw	r3,4(r2)
        pmem->OSMemNFree--;                           /*      One less memory block in this partition  */
 40127f8:	e0bffe17 	ldw	r2,-8(fp)
 40127fc:	10800417 	ldw	r2,16(r2)
 4012800:	10ffffc4 	addi	r3,r2,-1
 4012804:	e0bffe17 	ldw	r2,-8(fp)
 4012808:	10c00415 	stw	r3,16(r2)
 401280c:	e0bff917 	ldw	r2,-28(fp)
 4012810:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4012814:	e0bffa17 	ldw	r2,-24(fp)
 4012818:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;                          /*      No error                                 */
 401281c:	e0bfff17 	ldw	r2,-4(fp)
 4012820:	10000005 	stb	zero,0(r2)
        return (pblk);                                /*      Return memory block to caller            */
 4012824:	e0bffb17 	ldw	r2,-20(fp)
 4012828:	00000806 	br	401284c <OSMemGet+0xe0>
 401282c:	e0bff917 	ldw	r2,-28(fp)
 4012830:	e0bffc15 	stw	r2,-16(fp)
 4012834:	e0bffc17 	ldw	r2,-16(fp)
 4012838:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_MEM_NO_FREE_BLKS;                  /* No,  Notify caller of empty memory partition  */
 401283c:	e0bfff17 	ldw	r2,-4(fp)
 4012840:	00c01744 	movi	r3,93
 4012844:	10c00005 	stb	r3,0(r2)
    return ((void *)0);                               /*      Return NULL pointer to caller            */
 4012848:	0005883a 	mov	r2,zero
}
 401284c:	e037883a 	mov	sp,fp
 4012850:	df000017 	ldw	fp,0(sp)
 4012854:	dec00104 	addi	sp,sp,4
 4012858:	f800283a 	ret

0401285c <OSMemNameGet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
INT8U  OSMemNameGet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 401285c:	defff704 	addi	sp,sp,-36
 4012860:	dfc00815 	stw	ra,32(sp)
 4012864:	df000715 	stw	fp,28(sp)
 4012868:	df000704 	addi	fp,sp,28
 401286c:	e13ffd15 	stw	r4,-12(fp)
 4012870:	e17ffe15 	stw	r5,-8(fp)
 4012874:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4012878:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 401287c:	e0bfff17 	ldw	r2,-4(fp)
 4012880:	1000021e 	bne	r2,zero,401288c <OSMemNameGet+0x30>
        return (0);
 4012884:	0005883a 	mov	r2,zero
 4012888:	00002b06 	br	4012938 <OSMemNameGet+0xdc>
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 401288c:	e0bffd17 	ldw	r2,-12(fp)
 4012890:	1000051e 	bne	r2,zero,40128a8 <OSMemNameGet+0x4c>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 4012894:	e0bfff17 	ldw	r2,-4(fp)
 4012898:	00c01804 	movi	r3,96
 401289c:	10c00005 	stb	r3,0(r2)
        return (0);
 40128a0:	0005883a 	mov	r2,zero
 40128a4:	00002406 	br	4012938 <OSMemNameGet+0xdc>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 40128a8:	e0bffe17 	ldw	r2,-8(fp)
 40128ac:	1000051e 	bne	r2,zero,40128c4 <OSMemNameGet+0x68>
        *perr = OS_ERR_PNAME_NULL;
 40128b0:	e0bfff17 	ldw	r2,-4(fp)
 40128b4:	00c00304 	movi	r3,12
 40128b8:	10c00005 	stb	r3,0(r2)
        return (0);
 40128bc:	0005883a 	mov	r2,zero
 40128c0:	00001d06 	br	4012938 <OSMemNameGet+0xdc>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 40128c4:	d0a73103 	ldbu	r2,-25404(gp)
 40128c8:	10803fcc 	andi	r2,r2,255
 40128cc:	10000526 	beq	r2,zero,40128e4 <OSMemNameGet+0x88>
        *perr = OS_ERR_NAME_GET_ISR;
 40128d0:	e0bfff17 	ldw	r2,-4(fp)
 40128d4:	00c00444 	movi	r3,17
 40128d8:	10c00005 	stb	r3,0(r2)
        return (0);
 40128dc:	0005883a 	mov	r2,zero
 40128e0:	00001506 	br	4012938 <OSMemNameGet+0xdc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40128e4:	0005303a 	rdctl	r2,status
 40128e8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40128ec:	e0fffb17 	ldw	r3,-20(fp)
 40128f0:	00bfff84 	movi	r2,-2
 40128f4:	1884703a 	and	r2,r3,r2
 40128f8:	1001703a 	wrctl	status,r2
  
  return context;
 40128fc:	e0bffb17 	ldw	r2,-20(fp)
    }
    OS_ENTER_CRITICAL();
 4012900:	e0bff915 	stw	r2,-28(fp)
    len   = OS_StrCopy(pname, pmem->OSMemName);  /* Copy name from OS_MEM                              */
 4012904:	e0bffd17 	ldw	r2,-12(fp)
 4012908:	10800504 	addi	r2,r2,20
 401290c:	100b883a 	mov	r5,r2
 4012910:	e13ffe17 	ldw	r4,-8(fp)
 4012914:	400fc9c0 	call	400fc9c <OS_StrCopy>
 4012918:	e0bffa05 	stb	r2,-24(fp)
 401291c:	e0bff917 	ldw	r2,-28(fp)
 4012920:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4012924:	e0bffc17 	ldw	r2,-16(fp)
 4012928:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 401292c:	e0bfff17 	ldw	r2,-4(fp)
 4012930:	10000005 	stb	zero,0(r2)
    return (len);
 4012934:	e0bffa03 	ldbu	r2,-24(fp)
}
 4012938:	e037883a 	mov	sp,fp
 401293c:	dfc00117 	ldw	ra,4(sp)
 4012940:	df000017 	ldw	fp,0(sp)
 4012944:	dec00204 	addi	sp,sp,8
 4012948:	f800283a 	ret

0401294c <OSMemNameSet>:
*********************************************************************************************************
*/

#if OS_MEM_NAME_SIZE > 1
void  OSMemNameSet (OS_MEM *pmem, INT8U *pname, INT8U *perr)
{
 401294c:	defff604 	addi	sp,sp,-40
 4012950:	dfc00915 	stw	ra,36(sp)
 4012954:	df000815 	stw	fp,32(sp)
 4012958:	df000804 	addi	fp,sp,32
 401295c:	e13ffd15 	stw	r4,-12(fp)
 4012960:	e17ffe15 	stw	r5,-8(fp)
 4012964:	e1bfff15 	stw	r6,-4(fp)
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4012968:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 401296c:	e0bfff17 	ldw	r2,-4(fp)
 4012970:	10003526 	beq	r2,zero,4012a48 <OSMemNameSet+0xfc>
        return;
    }
    if (pmem == (OS_MEM *)0) {                   /* Is 'pmem' a NULL pointer?                          */
 4012974:	e0bffd17 	ldw	r2,-12(fp)
 4012978:	1000041e 	bne	r2,zero,401298c <OSMemNameSet+0x40>
        *perr = OS_ERR_MEM_INVALID_PMEM;
 401297c:	e0bfff17 	ldw	r2,-4(fp)
 4012980:	00c01804 	movi	r3,96
 4012984:	10c00005 	stb	r3,0(r2)
        return;
 4012988:	00003006 	br	4012a4c <OSMemNameSet+0x100>
    }
    if (pname == (INT8U *)0) {                   /* Is 'pname' a NULL pointer?                         */
 401298c:	e0bffe17 	ldw	r2,-8(fp)
 4012990:	1000041e 	bne	r2,zero,40129a4 <OSMemNameSet+0x58>
        *perr = OS_ERR_PNAME_NULL;
 4012994:	e0bfff17 	ldw	r2,-4(fp)
 4012998:	00c00304 	movi	r3,12
 401299c:	10c00005 	stb	r3,0(r2)
        return;
 40129a0:	00002a06 	br	4012a4c <OSMemNameSet+0x100>
    }
#endif
    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 40129a4:	d0a73103 	ldbu	r2,-25404(gp)
 40129a8:	10803fcc 	andi	r2,r2,255
 40129ac:	10000426 	beq	r2,zero,40129c0 <OSMemNameSet+0x74>
        *perr = OS_ERR_NAME_SET_ISR;
 40129b0:	e0bfff17 	ldw	r2,-4(fp)
 40129b4:	00c00484 	movi	r3,18
 40129b8:	10c00005 	stb	r3,0(r2)
        return;
 40129bc:	00002306 	br	4012a4c <OSMemNameSet+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40129c0:	0005303a 	rdctl	r2,status
 40129c4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40129c8:	e0fffc17 	ldw	r3,-16(fp)
 40129cc:	00bfff84 	movi	r2,-2
 40129d0:	1884703a 	and	r2,r3,r2
 40129d4:	1001703a 	wrctl	status,r2
  
  return context;
 40129d8:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 40129dc:	e0bff815 	stw	r2,-32(fp)
    len = OS_StrLen(pname);                      /* Can we fit the string in the storage area?         */
 40129e0:	e13ffe17 	ldw	r4,-8(fp)
 40129e4:	400fd100 	call	400fd10 <OS_StrLen>
 40129e8:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_MEM_NAME_SIZE - 1)) {          /* No                                                 */
 40129ec:	e0bffa03 	ldbu	r2,-24(fp)
 40129f0:	10800830 	cmpltui	r2,r2,32
 40129f4:	1000081e 	bne	r2,zero,4012a18 <OSMemNameSet+0xcc>
 40129f8:	e0bff817 	ldw	r2,-32(fp)
 40129fc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4012a00:	e0bff917 	ldw	r2,-28(fp)
 4012a04:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_MEM_NAME_TOO_LONG;
 4012a08:	e0bfff17 	ldw	r2,-4(fp)
 4012a0c:	00c018c4 	movi	r3,99
 4012a10:	10c00005 	stb	r3,0(r2)
        return;
 4012a14:	00000d06 	br	4012a4c <OSMemNameSet+0x100>
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
 4012a18:	e0bffd17 	ldw	r2,-12(fp)
 4012a1c:	10800504 	addi	r2,r2,20
 4012a20:	e17ffe17 	ldw	r5,-8(fp)
 4012a24:	1009883a 	mov	r4,r2
 4012a28:	400fc9c0 	call	400fc9c <OS_StrCopy>
 4012a2c:	e0bff817 	ldw	r2,-32(fp)
 4012a30:	e0bffb15 	stw	r2,-20(fp)
 4012a34:	e0bffb17 	ldw	r2,-20(fp)
 4012a38:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 4012a3c:	e0bfff17 	ldw	r2,-4(fp)
 4012a40:	10000005 	stb	zero,0(r2)
 4012a44:	00000106 	br	4012a4c <OSMemNameSet+0x100>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
        return;
 4012a48:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(pmem->OSMemName, pname);    /* Yes, copy name to the memory partition header      */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
 4012a4c:	e037883a 	mov	sp,fp
 4012a50:	dfc00117 	ldw	ra,4(sp)
 4012a54:	df000017 	ldw	fp,0(sp)
 4012a58:	dec00204 	addi	sp,sp,8
 4012a5c:	f800283a 	ret

04012a60 <OSMemPut>:
*               OS_ERR_MEM_INVALID_PBLK  if you passed a NULL pointer for the block to release.
*********************************************************************************************************
*/

INT8U  OSMemPut (OS_MEM *pmem, void *pblk)
{
 4012a60:	defff904 	addi	sp,sp,-28
 4012a64:	df000615 	stw	fp,24(sp)
 4012a68:	df000604 	addi	fp,sp,24
 4012a6c:	e13ffe15 	stw	r4,-8(fp)
 4012a70:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4012a74:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 4012a78:	e0bffe17 	ldw	r2,-8(fp)
 4012a7c:	1000021e 	bne	r2,zero,4012a88 <OSMemPut+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
 4012a80:	00801804 	movi	r2,96
 4012a84:	00002806 	br	4012b28 <OSMemPut+0xc8>
    }
    if (pblk == (void *)0) {                     /* Must release a valid block                         */
 4012a88:	e0bfff17 	ldw	r2,-4(fp)
 4012a8c:	1000021e 	bne	r2,zero,4012a98 <OSMemPut+0x38>
        return (OS_ERR_MEM_INVALID_PBLK);
 4012a90:	008017c4 	movi	r2,95
 4012a94:	00002406 	br	4012b28 <OSMemPut+0xc8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4012a98:	0005303a 	rdctl	r2,status
 4012a9c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4012aa0:	e0fffd17 	ldw	r3,-12(fp)
 4012aa4:	00bfff84 	movi	r2,-2
 4012aa8:	1884703a 	and	r2,r3,r2
 4012aac:	1001703a 	wrctl	status,r2
  
  return context;
 4012ab0:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 4012ab4:	e0bffa15 	stw	r2,-24(fp)
    if (pmem->OSMemNFree >= pmem->OSMemNBlks) {  /* Make sure all blocks not already returned          */
 4012ab8:	e0bffe17 	ldw	r2,-8(fp)
 4012abc:	10c00417 	ldw	r3,16(r2)
 4012ac0:	e0bffe17 	ldw	r2,-8(fp)
 4012ac4:	10800317 	ldw	r2,12(r2)
 4012ac8:	18800636 	bltu	r3,r2,4012ae4 <OSMemPut+0x84>
 4012acc:	e0bffa17 	ldw	r2,-24(fp)
 4012ad0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4012ad4:	e0bffb17 	ldw	r2,-20(fp)
 4012ad8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_MEM_FULL);
 4012adc:	00801784 	movi	r2,94
 4012ae0:	00001106 	br	4012b28 <OSMemPut+0xc8>
    }
    *(void **)pblk      = pmem->OSMemFreeList;   /* Insert released block into free block list         */
 4012ae4:	e0bffe17 	ldw	r2,-8(fp)
 4012ae8:	10c00117 	ldw	r3,4(r2)
 4012aec:	e0bfff17 	ldw	r2,-4(fp)
 4012af0:	10c00015 	stw	r3,0(r2)
    pmem->OSMemFreeList = pblk;
 4012af4:	e0bffe17 	ldw	r2,-8(fp)
 4012af8:	e0ffff17 	ldw	r3,-4(fp)
 4012afc:	10c00115 	stw	r3,4(r2)
    pmem->OSMemNFree++;                          /* One more memory block in this partition            */
 4012b00:	e0bffe17 	ldw	r2,-8(fp)
 4012b04:	10800417 	ldw	r2,16(r2)
 4012b08:	10c00044 	addi	r3,r2,1
 4012b0c:	e0bffe17 	ldw	r2,-8(fp)
 4012b10:	10c00415 	stw	r3,16(r2)
 4012b14:	e0bffa17 	ldw	r2,-24(fp)
 4012b18:	e0bffc15 	stw	r2,-16(fp)
 4012b1c:	e0bffc17 	ldw	r2,-16(fp)
 4012b20:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);                        /* Notify caller that memory block was released       */
 4012b24:	0005883a 	mov	r2,zero
}
 4012b28:	e037883a 	mov	sp,fp
 4012b2c:	df000017 	ldw	fp,0(sp)
 4012b30:	dec00104 	addi	sp,sp,4
 4012b34:	f800283a 	ret

04012b38 <OSMemQuery>:
*********************************************************************************************************
*/

#if OS_MEM_QUERY_EN > 0
INT8U  OSMemQuery (OS_MEM *pmem, OS_MEM_DATA *p_mem_data)
{
 4012b38:	defffa04 	addi	sp,sp,-24
 4012b3c:	df000515 	stw	fp,20(sp)
 4012b40:	df000504 	addi	fp,sp,20
 4012b44:	e13ffe15 	stw	r4,-8(fp)
 4012b48:	e17fff15 	stw	r5,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4012b4c:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pmem == (OS_MEM *)0) {                   /* Must point to a valid memory partition             */
 4012b50:	e0bffe17 	ldw	r2,-8(fp)
 4012b54:	1000021e 	bne	r2,zero,4012b60 <OSMemQuery+0x28>
        return (OS_ERR_MEM_INVALID_PMEM);
 4012b58:	00801804 	movi	r2,96
 4012b5c:	00002c06 	br	4012c10 <OSMemQuery+0xd8>
    }
    if (p_mem_data == (OS_MEM_DATA *)0) {        /* Must release a valid storage area for the data     */
 4012b60:	e0bfff17 	ldw	r2,-4(fp)
 4012b64:	1000021e 	bne	r2,zero,4012b70 <OSMemQuery+0x38>
        return (OS_ERR_MEM_INVALID_PDATA);
 4012b68:	00801844 	movi	r2,97
 4012b6c:	00002806 	br	4012c10 <OSMemQuery+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4012b70:	0005303a 	rdctl	r2,status
 4012b74:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4012b78:	e0fffc17 	ldw	r3,-16(fp)
 4012b7c:	00bfff84 	movi	r2,-2
 4012b80:	1884703a 	and	r2,r3,r2
 4012b84:	1001703a 	wrctl	status,r2
  
  return context;
 4012b88:	e0bffc17 	ldw	r2,-16(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 4012b8c:	e0bffb15 	stw	r2,-20(fp)
    p_mem_data->OSAddr     = pmem->OSMemAddr;
 4012b90:	e0bffe17 	ldw	r2,-8(fp)
 4012b94:	10c00017 	ldw	r3,0(r2)
 4012b98:	e0bfff17 	ldw	r2,-4(fp)
 4012b9c:	10c00015 	stw	r3,0(r2)
    p_mem_data->OSFreeList = pmem->OSMemFreeList;
 4012ba0:	e0bffe17 	ldw	r2,-8(fp)
 4012ba4:	10c00117 	ldw	r3,4(r2)
 4012ba8:	e0bfff17 	ldw	r2,-4(fp)
 4012bac:	10c00115 	stw	r3,4(r2)
    p_mem_data->OSBlkSize  = pmem->OSMemBlkSize;
 4012bb0:	e0bffe17 	ldw	r2,-8(fp)
 4012bb4:	10c00217 	ldw	r3,8(r2)
 4012bb8:	e0bfff17 	ldw	r2,-4(fp)
 4012bbc:	10c00215 	stw	r3,8(r2)
    p_mem_data->OSNBlks    = pmem->OSMemNBlks;
 4012bc0:	e0bffe17 	ldw	r2,-8(fp)
 4012bc4:	10c00317 	ldw	r3,12(r2)
 4012bc8:	e0bfff17 	ldw	r2,-4(fp)
 4012bcc:	10c00315 	stw	r3,12(r2)
    p_mem_data->OSNFree    = pmem->OSMemNFree;
 4012bd0:	e0bffe17 	ldw	r2,-8(fp)
 4012bd4:	10c00417 	ldw	r3,16(r2)
 4012bd8:	e0bfff17 	ldw	r2,-4(fp)
 4012bdc:	10c00415 	stw	r3,16(r2)
 4012be0:	e0bffb17 	ldw	r2,-20(fp)
 4012be4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4012be8:	e0bffd17 	ldw	r2,-12(fp)
 4012bec:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    p_mem_data->OSNUsed    = p_mem_data->OSNBlks - p_mem_data->OSNFree;
 4012bf0:	e0bfff17 	ldw	r2,-4(fp)
 4012bf4:	10c00317 	ldw	r3,12(r2)
 4012bf8:	e0bfff17 	ldw	r2,-4(fp)
 4012bfc:	10800417 	ldw	r2,16(r2)
 4012c00:	1887c83a 	sub	r3,r3,r2
 4012c04:	e0bfff17 	ldw	r2,-4(fp)
 4012c08:	10c00515 	stw	r3,20(r2)
    return (OS_ERR_NONE);
 4012c0c:	0005883a 	mov	r2,zero
}
 4012c10:	e037883a 	mov	sp,fp
 4012c14:	df000017 	ldw	fp,0(sp)
 4012c18:	dec00104 	addi	sp,sp,4
 4012c1c:	f800283a 	ret

04012c20 <OS_MemInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_MemInit (void)
{
 4012c20:	defffc04 	addi	sp,sp,-16
 4012c24:	dfc00315 	stw	ra,12(sp)
 4012c28:	df000215 	stw	fp,8(sp)
 4012c2c:	df000204 	addi	fp,sp,8
#if OS_MAX_MEM_PART >= 2
    OS_MEM  *pmem;
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
 4012c30:	01430c04 	movi	r5,3120
 4012c34:	010100b4 	movhi	r4,1026
 4012c38:	21122a04 	addi	r4,r4,18600
 4012c3c:	400fa9c0 	call	400fa9c <OS_MemClr>
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
 4012c40:	008100b4 	movhi	r2,1026
 4012c44:	10922a04 	addi	r2,r2,18600
 4012c48:	e0bffe15 	stw	r2,-8(fp)
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 4012c4c:	e03fff0d 	sth	zero,-4(fp)
 4012c50:	00001306 	br	4012ca0 <OS_MemInit+0x80>
        pmem->OSMemFreeList = (void *)&OSMemTbl[i+1];     /* Chain list of free partitions             */
 4012c54:	e0bfff0b 	ldhu	r2,-4(fp)
 4012c58:	10800044 	addi	r2,r2,1
 4012c5c:	10c00d24 	muli	r3,r2,52
 4012c60:	008100b4 	movhi	r2,1026
 4012c64:	10922a04 	addi	r2,r2,18600
 4012c68:	1887883a 	add	r3,r3,r2
 4012c6c:	e0bffe17 	ldw	r2,-8(fp)
 4012c70:	10c00115 	stw	r3,4(r2)
#if OS_MEM_NAME_SIZE > 1
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
 4012c74:	e0bffe17 	ldw	r2,-8(fp)
 4012c78:	00c00fc4 	movi	r3,63
 4012c7c:	10c00505 	stb	r3,20(r2)
        pmem->OSMemName[1]  = OS_ASCII_NUL;
 4012c80:	e0bffe17 	ldw	r2,-8(fp)
 4012c84:	10000545 	stb	zero,21(r2)
#endif
        pmem++;
 4012c88:	e0bffe17 	ldw	r2,-8(fp)
 4012c8c:	10800d04 	addi	r2,r2,52
 4012c90:	e0bffe15 	stw	r2,-8(fp)
    INT16U   i;


    OS_MemClr((INT8U *)&OSMemTbl[0], sizeof(OSMemTbl));   /* Clear the memory partition table          */
    pmem = &OSMemTbl[0];                                  /* Point to memory control block (MCB)       */
    for (i = 0; i < (OS_MAX_MEM_PART - 1); i++) {         /* Init. list of free memory partitions      */
 4012c94:	e0bfff0b 	ldhu	r2,-4(fp)
 4012c98:	10800044 	addi	r2,r2,1
 4012c9c:	e0bfff0d 	sth	r2,-4(fp)
 4012ca0:	e0bfff0b 	ldhu	r2,-4(fp)
 4012ca4:	10800ef0 	cmpltui	r2,r2,59
 4012ca8:	103fea1e 	bne	r2,zero,4012c54 <__alt_mem_onchip_memory2_0+0xfbff2c54>
        pmem->OSMemName[0]  = '?';                        /* Unknown name                              */
        pmem->OSMemName[1]  = OS_ASCII_NUL;
#endif
        pmem++;
    }
    pmem->OSMemFreeList = (void *)0;                      /* Initialize last node                      */
 4012cac:	e0bffe17 	ldw	r2,-8(fp)
 4012cb0:	10000115 	stw	zero,4(r2)
#if OS_MEM_NAME_SIZE > 1
    pmem->OSMemName[0]  = '?';                            /* Unknown name                              */
 4012cb4:	e0bffe17 	ldw	r2,-8(fp)
 4012cb8:	00c00fc4 	movi	r3,63
 4012cbc:	10c00505 	stb	r3,20(r2)
    pmem->OSMemName[1]  = OS_ASCII_NUL;
 4012cc0:	e0bffe17 	ldw	r2,-8(fp)
 4012cc4:	10000545 	stb	zero,21(r2)
#endif

    OSMemFreeList       = &OSMemTbl[0];                   /* Point to beginning of free list           */
 4012cc8:	008100b4 	movhi	r2,1026
 4012ccc:	10922a04 	addi	r2,r2,18600
 4012cd0:	d0a72c15 	stw	r2,-25424(gp)
#endif
}
 4012cd4:	0001883a 	nop
 4012cd8:	e037883a 	mov	sp,fp
 4012cdc:	dfc00117 	ldw	ra,4(sp)
 4012ce0:	df000017 	ldw	fp,0(sp)
 4012ce4:	dec00204 	addi	sp,sp,8
 4012ce8:	f800283a 	ret

04012cec <OSQAccept>:
*********************************************************************************************************
*/

#if OS_Q_ACCEPT_EN > 0
void  *OSQAccept (OS_EVENT *pevent, INT8U *perr)
{
 4012cec:	defff804 	addi	sp,sp,-32
 4012cf0:	df000715 	stw	fp,28(sp)
 4012cf4:	df000704 	addi	fp,sp,28
 4012cf8:	e13ffe15 	stw	r4,-8(fp)
 4012cfc:	e17fff15 	stw	r5,-4(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4012d00:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 4012d04:	e0bfff17 	ldw	r2,-4(fp)
 4012d08:	1000021e 	bne	r2,zero,4012d14 <OSQAccept+0x28>
        return ((void *)0);
 4012d0c:	0005883a 	mov	r2,zero
 4012d10:	00004206 	br	4012e1c <OSQAccept+0x130>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 4012d14:	e0bffe17 	ldw	r2,-8(fp)
 4012d18:	1000051e 	bne	r2,zero,4012d30 <OSQAccept+0x44>
        *perr = OS_ERR_PEVENT_NULL;
 4012d1c:	e0bfff17 	ldw	r2,-4(fp)
 4012d20:	00c00104 	movi	r3,4
 4012d24:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 4012d28:	0005883a 	mov	r2,zero
 4012d2c:	00003b06 	br	4012e1c <OSQAccept+0x130>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 4012d30:	e0bffe17 	ldw	r2,-8(fp)
 4012d34:	10800003 	ldbu	r2,0(r2)
 4012d38:	10803fcc 	andi	r2,r2,255
 4012d3c:	108000a0 	cmpeqi	r2,r2,2
 4012d40:	1000051e 	bne	r2,zero,4012d58 <OSQAccept+0x6c>
        *perr = OS_ERR_EVENT_TYPE;
 4012d44:	e0bfff17 	ldw	r2,-4(fp)
 4012d48:	00c00044 	movi	r3,1
 4012d4c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 4012d50:	0005883a 	mov	r2,zero
 4012d54:	00003106 	br	4012e1c <OSQAccept+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4012d58:	0005303a 	rdctl	r2,status
 4012d5c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4012d60:	e0fffd17 	ldw	r3,-12(fp)
 4012d64:	00bfff84 	movi	r2,-2
 4012d68:	1884703a 	and	r2,r3,r2
 4012d6c:	1001703a 	wrctl	status,r2
  
  return context;
 4012d70:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 4012d74:	e0bffa15 	stw	r2,-24(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 4012d78:	e0bffe17 	ldw	r2,-8(fp)
 4012d7c:	10800117 	ldw	r2,4(r2)
 4012d80:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 4012d84:	e0bffc17 	ldw	r2,-16(fp)
 4012d88:	1080058b 	ldhu	r2,22(r2)
 4012d8c:	10bfffcc 	andi	r2,r2,65535
 4012d90:	10001926 	beq	r2,zero,4012df8 <OSQAccept+0x10c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 4012d94:	e0bffc17 	ldw	r2,-16(fp)
 4012d98:	10800417 	ldw	r2,16(r2)
 4012d9c:	11000104 	addi	r4,r2,4
 4012da0:	e0fffc17 	ldw	r3,-16(fp)
 4012da4:	19000415 	stw	r4,16(r3)
 4012da8:	10800017 	ldw	r2,0(r2)
 4012dac:	e0bff915 	stw	r2,-28(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 4012db0:	e0bffc17 	ldw	r2,-16(fp)
 4012db4:	1080058b 	ldhu	r2,22(r2)
 4012db8:	10bfffc4 	addi	r2,r2,-1
 4012dbc:	1007883a 	mov	r3,r2
 4012dc0:	e0bffc17 	ldw	r2,-16(fp)
 4012dc4:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 4012dc8:	e0bffc17 	ldw	r2,-16(fp)
 4012dcc:	10c00417 	ldw	r3,16(r2)
 4012dd0:	e0bffc17 	ldw	r2,-16(fp)
 4012dd4:	10800217 	ldw	r2,8(r2)
 4012dd8:	1880041e 	bne	r3,r2,4012dec <OSQAccept+0x100>
            pq->OSQOut = pq->OSQStart;
 4012ddc:	e0bffc17 	ldw	r2,-16(fp)
 4012de0:	10c00117 	ldw	r3,4(r2)
 4012de4:	e0bffc17 	ldw	r2,-16(fp)
 4012de8:	10c00415 	stw	r3,16(r2)
        }
        *perr = OS_ERR_NONE;
 4012dec:	e0bfff17 	ldw	r2,-4(fp)
 4012df0:	10000005 	stb	zero,0(r2)
 4012df4:	00000406 	br	4012e08 <OSQAccept+0x11c>
    } else {
        *perr = OS_ERR_Q_EMPTY;
 4012df8:	e0bfff17 	ldw	r2,-4(fp)
 4012dfc:	00c007c4 	movi	r3,31
 4012e00:	10c00005 	stb	r3,0(r2)
        pmsg  = (void *)0;                       /* Queue is empty                                     */
 4012e04:	e03ff915 	stw	zero,-28(fp)
 4012e08:	e0bffa17 	ldw	r2,-24(fp)
 4012e0c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4012e10:	e0bffb17 	ldw	r2,-20(fp)
 4012e14:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (pmsg);                               /* Return message received (or NULL)                  */
 4012e18:	e0bff917 	ldw	r2,-28(fp)
}
 4012e1c:	e037883a 	mov	sp,fp
 4012e20:	df000017 	ldw	fp,0(sp)
 4012e24:	dec00104 	addi	sp,sp,4
 4012e28:	f800283a 	ret

04012e2c <OSQCreate>:
*              == (OS_EVENT *)0  if no event control blocks were available or an error was detected
*********************************************************************************************************
*/

OS_EVENT  *OSQCreate (void **start, INT16U size)
{
 4012e2c:	defff404 	addi	sp,sp,-48
 4012e30:	dfc00b15 	stw	ra,44(sp)
 4012e34:	df000a15 	stw	fp,40(sp)
 4012e38:	df000a04 	addi	fp,sp,40
 4012e3c:	e13ffe15 	stw	r4,-8(fp)
 4012e40:	2805883a 	mov	r2,r5
 4012e44:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4012e48:	e03ff715 	stw	zero,-36(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 4012e4c:	d0a73103 	ldbu	r2,-25404(gp)
 4012e50:	10803fcc 	andi	r2,r2,255
 4012e54:	10000226 	beq	r2,zero,4012e60 <OSQCreate+0x34>
        return ((OS_EVENT *)0);                  /* ... can't CREATE from an ISR                       */
 4012e58:	0005883a 	mov	r2,zero
 4012e5c:	00005906 	br	4012fc4 <OSQCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4012e60:	0005303a 	rdctl	r2,status
 4012e64:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4012e68:	e0fffd17 	ldw	r3,-12(fp)
 4012e6c:	00bfff84 	movi	r2,-2
 4012e70:	1884703a 	and	r2,r3,r2
 4012e74:	1001703a 	wrctl	status,r2
  
  return context;
 4012e78:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 4012e7c:	e0bff715 	stw	r2,-36(fp)
    pevent = OSEventFreeList;                    /* Get next free event control block                  */
 4012e80:	d0a73017 	ldw	r2,-25408(gp)
 4012e84:	e0bff615 	stw	r2,-40(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {      /* See if pool of free ECB pool was empty             */
 4012e88:	d0a73017 	ldw	r2,-25408(gp)
 4012e8c:	10000326 	beq	r2,zero,4012e9c <OSQCreate+0x70>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 4012e90:	d0a73017 	ldw	r2,-25408(gp)
 4012e94:	10800117 	ldw	r2,4(r2)
 4012e98:	d0a73015 	stw	r2,-25408(gp)
 4012e9c:	e0bff717 	ldw	r2,-36(fp)
 4012ea0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4012ea4:	e0bff817 	ldw	r2,-32(fp)
 4012ea8:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {               /* See if we have an event control block              */
 4012eac:	e0bff617 	ldw	r2,-40(fp)
 4012eb0:	10004326 	beq	r2,zero,4012fc0 <OSQCreate+0x194>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4012eb4:	0005303a 	rdctl	r2,status
 4012eb8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4012ebc:	e0fff917 	ldw	r3,-28(fp)
 4012ec0:	00bfff84 	movi	r2,-2
 4012ec4:	1884703a 	and	r2,r3,r2
 4012ec8:	1001703a 	wrctl	status,r2
  
  return context;
 4012ecc:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();
 4012ed0:	e0bff715 	stw	r2,-36(fp)
        pq = OSQFreeList;                        /* Get a free queue control block                     */
 4012ed4:	d0a72e17 	ldw	r2,-25416(gp)
 4012ed8:	e0bffb15 	stw	r2,-20(fp)
        if (pq != (OS_Q *)0) {                   /* Were we able to get a queue control block ?        */
 4012edc:	e0bffb17 	ldw	r2,-20(fp)
 4012ee0:	10002d26 	beq	r2,zero,4012f98 <OSQCreate+0x16c>
            OSQFreeList            = OSQFreeList->OSQPtr; /* Yes, Adjust free list pointer to next free*/
 4012ee4:	d0a72e17 	ldw	r2,-25416(gp)
 4012ee8:	10800017 	ldw	r2,0(r2)
 4012eec:	d0a72e15 	stw	r2,-25416(gp)
 4012ef0:	e0bff717 	ldw	r2,-36(fp)
 4012ef4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4012ef8:	e0bffa17 	ldw	r2,-24(fp)
 4012efc:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pq->OSQStart           = start;               /*      Initialize the queue                 */
 4012f00:	e0bffb17 	ldw	r2,-20(fp)
 4012f04:	e0fffe17 	ldw	r3,-8(fp)
 4012f08:	10c00115 	stw	r3,4(r2)
            pq->OSQEnd             = &start[size];
 4012f0c:	e0bfff0b 	ldhu	r2,-4(fp)
 4012f10:	1085883a 	add	r2,r2,r2
 4012f14:	1085883a 	add	r2,r2,r2
 4012f18:	1007883a 	mov	r3,r2
 4012f1c:	e0bffe17 	ldw	r2,-8(fp)
 4012f20:	10c7883a 	add	r3,r2,r3
 4012f24:	e0bffb17 	ldw	r2,-20(fp)
 4012f28:	10c00215 	stw	r3,8(r2)
            pq->OSQIn              = start;
 4012f2c:	e0bffb17 	ldw	r2,-20(fp)
 4012f30:	e0fffe17 	ldw	r3,-8(fp)
 4012f34:	10c00315 	stw	r3,12(r2)
            pq->OSQOut             = start;
 4012f38:	e0bffb17 	ldw	r2,-20(fp)
 4012f3c:	e0fffe17 	ldw	r3,-8(fp)
 4012f40:	10c00415 	stw	r3,16(r2)
            pq->OSQSize            = size;
 4012f44:	e0bffb17 	ldw	r2,-20(fp)
 4012f48:	e0ffff0b 	ldhu	r3,-4(fp)
 4012f4c:	10c0050d 	sth	r3,20(r2)
            pq->OSQEntries         = 0;
 4012f50:	e0bffb17 	ldw	r2,-20(fp)
 4012f54:	1000058d 	sth	zero,22(r2)
            pevent->OSEventType    = OS_EVENT_TYPE_Q;
 4012f58:	e0bff617 	ldw	r2,-40(fp)
 4012f5c:	00c00084 	movi	r3,2
 4012f60:	10c00005 	stb	r3,0(r2)
            pevent->OSEventCnt     = 0;
 4012f64:	e0bff617 	ldw	r2,-40(fp)
 4012f68:	1000020d 	sth	zero,8(r2)
            pevent->OSEventPtr     = pq;
 4012f6c:	e0bff617 	ldw	r2,-40(fp)
 4012f70:	e0fffb17 	ldw	r3,-20(fp)
 4012f74:	10c00115 	stw	r3,4(r2)
#if OS_EVENT_NAME_SIZE > 1
            pevent->OSEventName[0] = '?';                  /* Unknown name                             */
 4012f78:	e0bff617 	ldw	r2,-40(fp)
 4012f7c:	00c00fc4 	movi	r3,63
 4012f80:	10c00385 	stb	r3,14(r2)
            pevent->OSEventName[1] = OS_ASCII_NUL;
 4012f84:	e0bff617 	ldw	r2,-40(fp)
 4012f88:	100003c5 	stb	zero,15(r2)
#endif
            OS_EventWaitListInit(pevent);                 /*      Initalize the wait list              */
 4012f8c:	e13ff617 	ldw	r4,-40(fp)
 4012f90:	400f6bc0 	call	400f6bc <OS_EventWaitListInit>
 4012f94:	00000a06 	br	4012fc0 <OSQCreate+0x194>
        } else {
            pevent->OSEventPtr = (void *)OSEventFreeList; /* No,  Return event control block on error  */
 4012f98:	d0e73017 	ldw	r3,-25408(gp)
 4012f9c:	e0bff617 	ldw	r2,-40(fp)
 4012fa0:	10c00115 	stw	r3,4(r2)
            OSEventFreeList    = pevent;
 4012fa4:	e0bff617 	ldw	r2,-40(fp)
 4012fa8:	d0a73015 	stw	r2,-25408(gp)
 4012fac:	e0bff717 	ldw	r2,-36(fp)
 4012fb0:	e0bffc15 	stw	r2,-16(fp)
 4012fb4:	e0bffc17 	ldw	r2,-16(fp)
 4012fb8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
            pevent = (OS_EVENT *)0;
 4012fbc:	e03ff615 	stw	zero,-40(fp)
        }
    }
    return (pevent);
 4012fc0:	e0bff617 	ldw	r2,-40(fp)
}
 4012fc4:	e037883a 	mov	sp,fp
 4012fc8:	dfc00117 	ldw	ra,4(sp)
 4012fcc:	df000017 	ldw	fp,0(sp)
 4012fd0:	dec00204 	addi	sp,sp,8
 4012fd4:	f800283a 	ret

04012fd8 <OSQDel>:
*********************************************************************************************************
*/

#if OS_Q_DEL_EN > 0
OS_EVENT  *OSQDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 4012fd8:	defff204 	addi	sp,sp,-56
 4012fdc:	dfc00d15 	stw	ra,52(sp)
 4012fe0:	df000c15 	stw	fp,48(sp)
 4012fe4:	df000c04 	addi	fp,sp,48
 4012fe8:	e13ffd15 	stw	r4,-12(fp)
 4012fec:	2805883a 	mov	r2,r5
 4012ff0:	e1bfff15 	stw	r6,-4(fp)
 4012ff4:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 4012ff8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 4012ffc:	e0bfff17 	ldw	r2,-4(fp)
 4013000:	1000021e 	bne	r2,zero,401300c <OSQDel+0x34>
        return (pevent);
 4013004:	e0bffd17 	ldw	r2,-12(fp)
 4013008:	00008e06 	br	4013244 <OSQDel+0x26c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 401300c:	e0bffd17 	ldw	r2,-12(fp)
 4013010:	1000051e 	bne	r2,zero,4013028 <OSQDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 4013014:	e0bfff17 	ldw	r2,-4(fp)
 4013018:	00c00104 	movi	r3,4
 401301c:	10c00005 	stb	r3,0(r2)
        return (pevent);
 4013020:	e0bffd17 	ldw	r2,-12(fp)
 4013024:	00008706 	br	4013244 <OSQDel+0x26c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 4013028:	e0bffd17 	ldw	r2,-12(fp)
 401302c:	10800003 	ldbu	r2,0(r2)
 4013030:	10803fcc 	andi	r2,r2,255
 4013034:	108000a0 	cmpeqi	r2,r2,2
 4013038:	1000051e 	bne	r2,zero,4013050 <OSQDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 401303c:	e0bfff17 	ldw	r2,-4(fp)
 4013040:	00c00044 	movi	r3,1
 4013044:	10c00005 	stb	r3,0(r2)
        return (pevent);
 4013048:	e0bffd17 	ldw	r2,-12(fp)
 401304c:	00007d06 	br	4013244 <OSQDel+0x26c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 4013050:	d0a73103 	ldbu	r2,-25404(gp)
 4013054:	10803fcc 	andi	r2,r2,255
 4013058:	10000526 	beq	r2,zero,4013070 <OSQDel+0x98>
        *perr = OS_ERR_DEL_ISR;                            /* ... can't DELETE from an ISR             */
 401305c:	e0bfff17 	ldw	r2,-4(fp)
 4013060:	00c003c4 	movi	r3,15
 4013064:	10c00005 	stb	r3,0(r2)
        return (pevent);
 4013068:	e0bffd17 	ldw	r2,-12(fp)
 401306c:	00007506 	br	4013244 <OSQDel+0x26c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4013070:	0005303a 	rdctl	r2,status
 4013074:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4013078:	e0fffc17 	ldw	r3,-16(fp)
 401307c:	00bfff84 	movi	r2,-2
 4013080:	1884703a 	and	r2,r3,r2
 4013084:	1001703a 	wrctl	status,r2
  
  return context;
 4013088:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 401308c:	e0bff615 	stw	r2,-40(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on queue        */
 4013090:	e0bffd17 	ldw	r2,-12(fp)
 4013094:	10800283 	ldbu	r2,10(r2)
 4013098:	10803fcc 	andi	r2,r2,255
 401309c:	10000326 	beq	r2,zero,40130ac <OSQDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 40130a0:	00800044 	movi	r2,1
 40130a4:	e0bff405 	stb	r2,-48(fp)
 40130a8:	00000106 	br	40130b0 <OSQDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 40130ac:	e03ff405 	stb	zero,-48(fp)
    }
    switch (opt) {
 40130b0:	e0bffe03 	ldbu	r2,-8(fp)
 40130b4:	10000326 	beq	r2,zero,40130c4 <OSQDel+0xec>
 40130b8:	10800060 	cmpeqi	r2,r2,1
 40130bc:	1000301e 	bne	r2,zero,4013180 <OSQDel+0x1a8>
 40130c0:	00005506 	br	4013218 <OSQDel+0x240>
        case OS_DEL_NO_PEND:                               /* Delete queue only if no task waiting     */
             if (tasks_waiting == OS_FALSE) {
 40130c4:	e0bff403 	ldbu	r2,-48(fp)
 40130c8:	10001e1e 	bne	r2,zero,4013144 <OSQDel+0x16c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 40130cc:	e0bffd17 	ldw	r2,-12(fp)
 40130d0:	00c00fc4 	movi	r3,63
 40130d4:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 40130d8:	e0bffd17 	ldw	r2,-12(fp)
 40130dc:	100003c5 	stb	zero,15(r2)
#endif
                 pq                     = (OS_Q *)pevent->OSEventPtr;  /* Return OS_Q to free list     */
 40130e0:	e0bffd17 	ldw	r2,-12(fp)
 40130e4:	10800117 	ldw	r2,4(r2)
 40130e8:	e0bff815 	stw	r2,-32(fp)
                 pq->OSQPtr             = OSQFreeList;
 40130ec:	d0e72e17 	ldw	r3,-25416(gp)
 40130f0:	e0bff817 	ldw	r2,-32(fp)
 40130f4:	10c00015 	stw	r3,0(r2)
                 OSQFreeList            = pq;
 40130f8:	e0bff817 	ldw	r2,-32(fp)
 40130fc:	d0a72e15 	stw	r2,-25416(gp)
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 4013100:	e0bffd17 	ldw	r2,-12(fp)
 4013104:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 4013108:	d0e73017 	ldw	r3,-25408(gp)
 401310c:	e0bffd17 	ldw	r2,-12(fp)
 4013110:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 4013114:	e0bffd17 	ldw	r2,-12(fp)
 4013118:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 401311c:	e0bffd17 	ldw	r2,-12(fp)
 4013120:	d0a73015 	stw	r2,-25408(gp)
 4013124:	e0bff617 	ldw	r2,-40(fp)
 4013128:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401312c:	e0bff717 	ldw	r2,-36(fp)
 4013130:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 4013134:	e0bfff17 	ldw	r2,-4(fp)
 4013138:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
 401313c:	e03ff515 	stw	zero,-44(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
 4013140:	00003f06 	br	4013240 <OSQDel+0x268>
 4013144:	e0bff617 	ldw	r2,-40(fp)
 4013148:	e0bff915 	stw	r2,-28(fp)
 401314c:	e0bff917 	ldw	r2,-28(fp)
 4013150:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Queue has been deleted                   */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 4013154:	e0bfff17 	ldw	r2,-4(fp)
 4013158:	00c01244 	movi	r3,73
 401315c:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
 4013160:	e0bffd17 	ldw	r2,-12(fp)
 4013164:	e0bff515 	stw	r2,-44(fp)
             }
             break;
 4013168:	00003506 	br	4013240 <OSQDel+0x268>

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
 401316c:	000f883a 	mov	r7,zero
 4013170:	01800104 	movi	r6,4
 4013174:	000b883a 	mov	r5,zero
 4013178:	e13ffd17 	ldw	r4,-12(fp)
 401317c:	400f10c0 	call	400f10c <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the queue                  */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for queue        */
 4013180:	e0bffd17 	ldw	r2,-12(fp)
 4013184:	10800283 	ldbu	r2,10(r2)
 4013188:	10803fcc 	andi	r2,r2,255
 401318c:	103ff71e 	bne	r2,zero,401316c <__alt_mem_onchip_memory2_0+0xfbff316c>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 4013190:	e0bffd17 	ldw	r2,-12(fp)
 4013194:	00c00fc4 	movi	r3,63
 4013198:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 401319c:	e0bffd17 	ldw	r2,-12(fp)
 40131a0:	100003c5 	stb	zero,15(r2)
#endif
             pq                     = (OS_Q *)pevent->OSEventPtr;   /* Return OS_Q to free list        */
 40131a4:	e0bffd17 	ldw	r2,-12(fp)
 40131a8:	10800117 	ldw	r2,4(r2)
 40131ac:	e0bff815 	stw	r2,-32(fp)
             pq->OSQPtr             = OSQFreeList;
 40131b0:	d0e72e17 	ldw	r3,-25416(gp)
 40131b4:	e0bff817 	ldw	r2,-32(fp)
 40131b8:	10c00015 	stw	r3,0(r2)
             OSQFreeList            = pq;
 40131bc:	e0bff817 	ldw	r2,-32(fp)
 40131c0:	d0a72e15 	stw	r2,-25416(gp)
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 40131c4:	e0bffd17 	ldw	r2,-12(fp)
 40131c8:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 40131cc:	d0e73017 	ldw	r3,-25408(gp)
 40131d0:	e0bffd17 	ldw	r2,-12(fp)
 40131d4:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 40131d8:	e0bffd17 	ldw	r2,-12(fp)
 40131dc:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 40131e0:	e0bffd17 	ldw	r2,-12(fp)
 40131e4:	d0a73015 	stw	r2,-25408(gp)
 40131e8:	e0bff617 	ldw	r2,-40(fp)
 40131ec:	e0bffa15 	stw	r2,-24(fp)
 40131f0:	e0bffa17 	ldw	r2,-24(fp)
 40131f4:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 40131f8:	e0bff403 	ldbu	r2,-48(fp)
 40131fc:	10800058 	cmpnei	r2,r2,1
 4013200:	1000011e 	bne	r2,zero,4013208 <OSQDel+0x230>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 4013204:	400fb580 	call	400fb58 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 4013208:	e0bfff17 	ldw	r2,-4(fp)
 401320c:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Queue has been deleted                   */
 4013210:	e03ff515 	stw	zero,-44(fp)
             break;
 4013214:	00000a06 	br	4013240 <OSQDel+0x268>
 4013218:	e0bff617 	ldw	r2,-40(fp)
 401321c:	e0bffb15 	stw	r2,-20(fp)
 4013220:	e0bffb17 	ldw	r2,-20(fp)
 4013224:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 4013228:	e0bfff17 	ldw	r2,-4(fp)
 401322c:	00c001c4 	movi	r3,7
 4013230:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
 4013234:	e0bffd17 	ldw	r2,-12(fp)
 4013238:	e0bff515 	stw	r2,-44(fp)
             break;
 401323c:	0001883a 	nop
    }
    return (pevent_return);
 4013240:	e0bff517 	ldw	r2,-44(fp)
}
 4013244:	e037883a 	mov	sp,fp
 4013248:	dfc00117 	ldw	ra,4(sp)
 401324c:	df000017 	ldw	fp,0(sp)
 4013250:	dec00204 	addi	sp,sp,8
 4013254:	f800283a 	ret

04013258 <OSQFlush>:
*********************************************************************************************************
*/

#if OS_Q_FLUSH_EN > 0
INT8U  OSQFlush (OS_EVENT *pevent)
{
 4013258:	defffa04 	addi	sp,sp,-24
 401325c:	df000515 	stw	fp,20(sp)
 4013260:	df000504 	addi	fp,sp,20
 4013264:	e13fff15 	stw	r4,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 4013268:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 401326c:	e0bfff17 	ldw	r2,-4(fp)
 4013270:	1000021e 	bne	r2,zero,401327c <OSQFlush+0x24>
        return (OS_ERR_PEVENT_NULL);
 4013274:	00800104 	movi	r2,4
 4013278:	00002106 	br	4013300 <OSQFlush+0xa8>
    }
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 401327c:	e0bfff17 	ldw	r2,-4(fp)
 4013280:	10800003 	ldbu	r2,0(r2)
 4013284:	10803fcc 	andi	r2,r2,255
 4013288:	108000a0 	cmpeqi	r2,r2,2
 401328c:	1000021e 	bne	r2,zero,4013298 <OSQFlush+0x40>
        return (OS_ERR_EVENT_TYPE);
 4013290:	00800044 	movi	r2,1
 4013294:	00001a06 	br	4013300 <OSQFlush+0xa8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4013298:	0005303a 	rdctl	r2,status
 401329c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40132a0:	e0fffd17 	ldw	r3,-12(fp)
 40132a4:	00bfff84 	movi	r2,-2
 40132a8:	1884703a 	and	r2,r3,r2
 40132ac:	1001703a 	wrctl	status,r2
  
  return context;
 40132b0:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 40132b4:	e0bffb15 	stw	r2,-20(fp)
    pq             = (OS_Q *)pevent->OSEventPtr;      /* Point to queue storage structure              */
 40132b8:	e0bfff17 	ldw	r2,-4(fp)
 40132bc:	10800117 	ldw	r2,4(r2)
 40132c0:	e0bffc15 	stw	r2,-16(fp)
    pq->OSQIn      = pq->OSQStart;
 40132c4:	e0bffc17 	ldw	r2,-16(fp)
 40132c8:	10c00117 	ldw	r3,4(r2)
 40132cc:	e0bffc17 	ldw	r2,-16(fp)
 40132d0:	10c00315 	stw	r3,12(r2)
    pq->OSQOut     = pq->OSQStart;
 40132d4:	e0bffc17 	ldw	r2,-16(fp)
 40132d8:	10c00117 	ldw	r3,4(r2)
 40132dc:	e0bffc17 	ldw	r2,-16(fp)
 40132e0:	10c00415 	stw	r3,16(r2)
    pq->OSQEntries = 0;
 40132e4:	e0bffc17 	ldw	r2,-16(fp)
 40132e8:	1000058d 	sth	zero,22(r2)
 40132ec:	e0bffb17 	ldw	r2,-20(fp)
 40132f0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40132f4:	e0bffe17 	ldw	r2,-8(fp)
 40132f8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 40132fc:	0005883a 	mov	r2,zero
}
 4013300:	e037883a 	mov	sp,fp
 4013304:	df000017 	ldw	fp,0(sp)
 4013308:	dec00104 	addi	sp,sp,4
 401330c:	f800283a 	ret

04013310 <OSQPend>:
* Note(s)    : As of V2.60, this function allows you to receive NULL pointer messages.
*********************************************************************************************************
*/

void  *OSQPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 4013310:	defff304 	addi	sp,sp,-52
 4013314:	dfc00c15 	stw	ra,48(sp)
 4013318:	df000b15 	stw	fp,44(sp)
 401331c:	df000b04 	addi	fp,sp,44
 4013320:	e13ffd15 	stw	r4,-12(fp)
 4013324:	2805883a 	mov	r2,r5
 4013328:	e1bfff15 	stw	r6,-4(fp)
 401332c:	e0bffe0d 	sth	r2,-8(fp)
    void      *pmsg;
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4013330:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                    /* Validate 'perr'                                    */
 4013334:	e0bfff17 	ldw	r2,-4(fp)
 4013338:	1000021e 	bne	r2,zero,4013344 <OSQPend+0x34>
        return ((void *)0);
 401333c:	0005883a 	mov	r2,zero
 4013340:	00009106 	br	4013588 <OSQPend+0x278>
    }
    if (pevent == (OS_EVENT *)0) {               /* Validate 'pevent'                                  */
 4013344:	e0bffd17 	ldw	r2,-12(fp)
 4013348:	1000051e 	bne	r2,zero,4013360 <OSQPend+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 401334c:	e0bfff17 	ldw	r2,-4(fp)
 4013350:	00c00104 	movi	r3,4
 4013354:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 4013358:	0005883a 	mov	r2,zero
 401335c:	00008a06 	br	4013588 <OSQPend+0x278>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {/* Validate event block type                          */
 4013360:	e0bffd17 	ldw	r2,-12(fp)
 4013364:	10800003 	ldbu	r2,0(r2)
 4013368:	10803fcc 	andi	r2,r2,255
 401336c:	108000a0 	cmpeqi	r2,r2,2
 4013370:	1000051e 	bne	r2,zero,4013388 <OSQPend+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 4013374:	e0bfff17 	ldw	r2,-4(fp)
 4013378:	00c00044 	movi	r3,1
 401337c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 4013380:	0005883a 	mov	r2,zero
 4013384:	00008006 	br	4013588 <OSQPend+0x278>
    }
    if (OSIntNesting > 0) {                      /* See if called from ISR ...                         */
 4013388:	d0a73103 	ldbu	r2,-25404(gp)
 401338c:	10803fcc 	andi	r2,r2,255
 4013390:	10000526 	beq	r2,zero,40133a8 <OSQPend+0x98>
        *perr = OS_ERR_PEND_ISR;                 /* ... can't PEND from an ISR                         */
 4013394:	e0bfff17 	ldw	r2,-4(fp)
 4013398:	00c00084 	movi	r3,2
 401339c:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 40133a0:	0005883a 	mov	r2,zero
 40133a4:	00007806 	br	4013588 <OSQPend+0x278>
    }
    if (OSLockNesting > 0) {                     /* See if called with scheduler locked ...            */
 40133a8:	d0a72303 	ldbu	r2,-25460(gp)
 40133ac:	10803fcc 	andi	r2,r2,255
 40133b0:	10000526 	beq	r2,zero,40133c8 <OSQPend+0xb8>
        *perr = OS_ERR_PEND_LOCKED;              /* ... can't PEND when locked                         */
 40133b4:	e0bfff17 	ldw	r2,-4(fp)
 40133b8:	00c00344 	movi	r3,13
 40133bc:	10c00005 	stb	r3,0(r2)
        return ((void *)0);
 40133c0:	0005883a 	mov	r2,zero
 40133c4:	00007006 	br	4013588 <OSQPend+0x278>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40133c8:	0005303a 	rdctl	r2,status
 40133cc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40133d0:	e0fffc17 	ldw	r3,-16(fp)
 40133d4:	00bfff84 	movi	r2,-2
 40133d8:	1884703a 	and	r2,r3,r2
 40133dc:	1001703a 	wrctl	status,r2
  
  return context;
 40133e0:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 40133e4:	e0bff615 	stw	r2,-40(fp)
    pq = (OS_Q *)pevent->OSEventPtr;             /* Point at queue control block                       */
 40133e8:	e0bffd17 	ldw	r2,-12(fp)
 40133ec:	10800117 	ldw	r2,4(r2)
 40133f0:	e0bff815 	stw	r2,-32(fp)
    if (pq->OSQEntries > 0) {                    /* See if any messages in the queue                   */
 40133f4:	e0bff817 	ldw	r2,-32(fp)
 40133f8:	1080058b 	ldhu	r2,22(r2)
 40133fc:	10bfffcc 	andi	r2,r2,65535
 4013400:	10001e26 	beq	r2,zero,401347c <OSQPend+0x16c>
        pmsg = *pq->OSQOut++;                    /* Yes, extract oldest message from the queue         */
 4013404:	e0bff817 	ldw	r2,-32(fp)
 4013408:	10800417 	ldw	r2,16(r2)
 401340c:	11000104 	addi	r4,r2,4
 4013410:	e0fff817 	ldw	r3,-32(fp)
 4013414:	19000415 	stw	r4,16(r3)
 4013418:	10800017 	ldw	r2,0(r2)
 401341c:	e0bff515 	stw	r2,-44(fp)
        pq->OSQEntries--;                        /* Update the number of entries in the queue          */
 4013420:	e0bff817 	ldw	r2,-32(fp)
 4013424:	1080058b 	ldhu	r2,22(r2)
 4013428:	10bfffc4 	addi	r2,r2,-1
 401342c:	1007883a 	mov	r3,r2
 4013430:	e0bff817 	ldw	r2,-32(fp)
 4013434:	10c0058d 	sth	r3,22(r2)
        if (pq->OSQOut == pq->OSQEnd) {          /* Wrap OUT pointer if we are at the end of the queue */
 4013438:	e0bff817 	ldw	r2,-32(fp)
 401343c:	10c00417 	ldw	r3,16(r2)
 4013440:	e0bff817 	ldw	r2,-32(fp)
 4013444:	10800217 	ldw	r2,8(r2)
 4013448:	1880041e 	bne	r3,r2,401345c <OSQPend+0x14c>
            pq->OSQOut = pq->OSQStart;
 401344c:	e0bff817 	ldw	r2,-32(fp)
 4013450:	10c00117 	ldw	r3,4(r2)
 4013454:	e0bff817 	ldw	r2,-32(fp)
 4013458:	10c00415 	stw	r3,16(r2)
 401345c:	e0bff617 	ldw	r2,-40(fp)
 4013460:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4013464:	e0bff717 	ldw	r2,-36(fp)
 4013468:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 401346c:	e0bfff17 	ldw	r2,-4(fp)
 4013470:	10000005 	stb	zero,0(r2)
        return (pmsg);                           /* Return message received                            */
 4013474:	e0bff517 	ldw	r2,-44(fp)
 4013478:	00004306 	br	4013588 <OSQPend+0x278>
    }
    OSTCBCur->OSTCBStat     |= OS_STAT_Q;        /* Task will have to pend for a message to be posted  */
 401347c:	d0a73217 	ldw	r2,-25400(gp)
 4013480:	d0e73217 	ldw	r3,-25400(gp)
 4013484:	18c00c03 	ldbu	r3,48(r3)
 4013488:	18c00114 	ori	r3,r3,4
 401348c:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 4013490:	d0a73217 	ldw	r2,-25400(gp)
 4013494:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;          /* Load timeout into TCB                              */
 4013498:	d0a73217 	ldw	r2,-25400(gp)
 401349c:	e0fffe0b 	ldhu	r3,-8(fp)
 40134a0:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                    /* Suspend task until event or timeout occurs         */
 40134a4:	e13ffd17 	ldw	r4,-12(fp)
 40134a8:	400f2a40 	call	400f2a4 <OS_EventTaskWait>
 40134ac:	e0bff617 	ldw	r2,-40(fp)
 40134b0:	e0bffb15 	stw	r2,-20(fp)
 40134b4:	e0bffb17 	ldw	r2,-20(fp)
 40134b8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                  /* Find next highest priority task ready to run       */
 40134bc:	400fb580 	call	400fb58 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40134c0:	0005303a 	rdctl	r2,status
 40134c4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40134c8:	e0fff917 	ldw	r3,-28(fp)
 40134cc:	00bfff84 	movi	r2,-2
 40134d0:	1884703a 	and	r2,r3,r2
 40134d4:	1001703a 	wrctl	status,r2
  
  return context;
 40134d8:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
 40134dc:	e0bff615 	stw	r2,-40(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 40134e0:	d0a73217 	ldw	r2,-25400(gp)
 40134e4:	10800c43 	ldbu	r2,49(r2)
 40134e8:	10803fcc 	andi	r2,r2,255
 40134ec:	10000326 	beq	r2,zero,40134fc <OSQPend+0x1ec>
 40134f0:	108000a0 	cmpeqi	r2,r2,2
 40134f4:	1000071e 	bne	r2,zero,4013514 <OSQPend+0x204>
 40134f8:	00000b06 	br	4013528 <OSQPend+0x218>
        case OS_STAT_PEND_OK:                         /* Extract message from TCB (Put there by QPost) */
             pmsg =  OSTCBCur->OSTCBMsg;
 40134fc:	d0a73217 	ldw	r2,-25400(gp)
 4013500:	10800917 	ldw	r2,36(r2)
 4013504:	e0bff515 	stw	r2,-44(fp)
            *perr =  OS_ERR_NONE;
 4013508:	e0bfff17 	ldw	r2,-4(fp)
 401350c:	10000005 	stb	zero,0(r2)
             break;
 4013510:	00000e06 	br	401354c <OSQPend+0x23c>

        case OS_STAT_PEND_ABORT:
             pmsg = (void *)0;
 4013514:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 4013518:	e0bfff17 	ldw	r2,-4(fp)
 401351c:	00c00384 	movi	r3,14
 4013520:	10c00005 	stb	r3,0(r2)
             break;
 4013524:	00000906 	br	401354c <OSQPend+0x23c>

        case OS_STAT_PEND_TO:
        default:
             OS_EventTaskRemove(OSTCBCur, pevent);
 4013528:	d0a73217 	ldw	r2,-25400(gp)
 401352c:	e17ffd17 	ldw	r5,-12(fp)
 4013530:	1009883a 	mov	r4,r2
 4013534:	400f5040 	call	400f504 <OS_EventTaskRemove>
             pmsg = (void *)0;
 4013538:	e03ff515 	stw	zero,-44(fp)
            *perr =  OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 401353c:	e0bfff17 	ldw	r2,-4(fp)
 4013540:	00c00284 	movi	r3,10
 4013544:	10c00005 	stb	r3,0(r2)
             break;
 4013548:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 401354c:	d0a73217 	ldw	r2,-25400(gp)
 4013550:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 4013554:	d0a73217 	ldw	r2,-25400(gp)
 4013558:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 401355c:	d0a73217 	ldw	r2,-25400(gp)
 4013560:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 4013564:	d0a73217 	ldw	r2,-25400(gp)
 4013568:	10000815 	stw	zero,32(r2)
#endif
    OSTCBCur->OSTCBMsg           = (void      *)0;    /* Clear  received message                       */
 401356c:	d0a73217 	ldw	r2,-25400(gp)
 4013570:	10000915 	stw	zero,36(r2)
 4013574:	e0bff617 	ldw	r2,-40(fp)
 4013578:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401357c:	e0bffa17 	ldw	r2,-24(fp)
 4013580:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (pmsg);                                    /* Return received message                       */
 4013584:	e0bff517 	ldw	r2,-44(fp)
}
 4013588:	e037883a 	mov	sp,fp
 401358c:	dfc00117 	ldw	ra,4(sp)
 4013590:	df000017 	ldw	fp,0(sp)
 4013594:	dec00204 	addi	sp,sp,8
 4013598:	f800283a 	ret

0401359c <OSQPendAbort>:
*********************************************************************************************************
*/

#if OS_Q_PEND_ABORT_EN > 0
INT8U  OSQPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 401359c:	defff604 	addi	sp,sp,-40
 40135a0:	dfc00915 	stw	ra,36(sp)
 40135a4:	df000815 	stw	fp,32(sp)
 40135a8:	df000804 	addi	fp,sp,32
 40135ac:	e13ffd15 	stw	r4,-12(fp)
 40135b0:	2805883a 	mov	r2,r5
 40135b4:	e1bfff15 	stw	r6,-4(fp)
 40135b8:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 40135bc:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 40135c0:	e0bfff17 	ldw	r2,-4(fp)
 40135c4:	1000021e 	bne	r2,zero,40135d0 <OSQPendAbort+0x34>
        return (0);
 40135c8:	0005883a 	mov	r2,zero
 40135cc:	00004906 	br	40136f4 <OSQPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 40135d0:	e0bffd17 	ldw	r2,-12(fp)
 40135d4:	1000051e 	bne	r2,zero,40135ec <OSQPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 40135d8:	e0bfff17 	ldw	r2,-4(fp)
 40135dc:	00c00104 	movi	r3,4
 40135e0:	10c00005 	stb	r3,0(r2)
        return (0);
 40135e4:	0005883a 	mov	r2,zero
 40135e8:	00004206 	br	40136f4 <OSQPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {          /* Validate event block type                */
 40135ec:	e0bffd17 	ldw	r2,-12(fp)
 40135f0:	10800003 	ldbu	r2,0(r2)
 40135f4:	10803fcc 	andi	r2,r2,255
 40135f8:	108000a0 	cmpeqi	r2,r2,2
 40135fc:	1000051e 	bne	r2,zero,4013614 <OSQPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 4013600:	e0bfff17 	ldw	r2,-4(fp)
 4013604:	00c00044 	movi	r3,1
 4013608:	10c00005 	stb	r3,0(r2)
        return (0);
 401360c:	0005883a 	mov	r2,zero
 4013610:	00003806 	br	40136f4 <OSQPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4013614:	0005303a 	rdctl	r2,status
 4013618:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401361c:	e0fffc17 	ldw	r3,-16(fp)
 4013620:	00bfff84 	movi	r2,-2
 4013624:	1884703a 	and	r2,r3,r2
 4013628:	1001703a 	wrctl	status,r2
  
  return context;
 401362c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 4013630:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
 4013634:	e0bffd17 	ldw	r2,-12(fp)
 4013638:	10800283 	ldbu	r2,10(r2)
 401363c:	10803fcc 	andi	r2,r2,255
 4013640:	10002526 	beq	r2,zero,40136d8 <OSQPendAbort+0x13c>
        nbr_tasks = 0;
 4013644:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
 4013648:	e0bffe03 	ldbu	r2,-8(fp)
 401364c:	10800060 	cmpeqi	r2,r2,1
 4013650:	10000e26 	beq	r2,zero,401368c <OSQPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
 4013654:	00000806 	br	4013678 <OSQPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 4013658:	01c00084 	movi	r7,2
 401365c:	01800104 	movi	r6,4
 4013660:	000b883a 	mov	r5,zero
 4013664:	e13ffd17 	ldw	r4,-12(fp)
 4013668:	400f10c0 	call	400f10c <OS_EventTaskRdy>
                     nbr_tasks++;
 401366c:	e0bff803 	ldbu	r2,-32(fp)
 4013670:	10800044 	addi	r2,r2,1
 4013674:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                         /* See if any task waiting on queue?        */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:                    /* Do we need to abort ALL waiting tasks?   */
                 while (pevent->OSEventGrp != 0) {         /* Yes, ready ALL tasks waiting on queue    */
 4013678:	e0bffd17 	ldw	r2,-12(fp)
 401367c:	10800283 	ldbu	r2,10(r2)
 4013680:	10803fcc 	andi	r2,r2,255
 4013684:	103ff41e 	bne	r2,zero,4013658 <__alt_mem_onchip_memory2_0+0xfbff3658>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 4013688:	00000906 	br	40136b0 <OSQPendAbort+0x114>
               
            case OS_PEND_OPT_NONE:
            default:                                       /* No,  ready HPT       waiting on queue    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_Q, OS_STAT_PEND_ABORT);
 401368c:	01c00084 	movi	r7,2
 4013690:	01800104 	movi	r6,4
 4013694:	000b883a 	mov	r5,zero
 4013698:	e13ffd17 	ldw	r4,-12(fp)
 401369c:	400f10c0 	call	400f10c <OS_EventTaskRdy>
                 nbr_tasks++;
 40136a0:	e0bff803 	ldbu	r2,-32(fp)
 40136a4:	10800044 	addi	r2,r2,1
 40136a8:	e0bff805 	stb	r2,-32(fp)
                 break;
 40136ac:	0001883a 	nop
 40136b0:	e0bff917 	ldw	r2,-28(fp)
 40136b4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40136b8:	e0bffa17 	ldw	r2,-24(fp)
 40136bc:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                        /* Find HPT ready to run                    */
 40136c0:	400fb580 	call	400fb58 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 40136c4:	e0bfff17 	ldw	r2,-4(fp)
 40136c8:	00c00384 	movi	r3,14
 40136cc:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
 40136d0:	e0bff803 	ldbu	r2,-32(fp)
 40136d4:	00000706 	br	40136f4 <OSQPendAbort+0x158>
 40136d8:	e0bff917 	ldw	r2,-28(fp)
 40136dc:	e0bffb15 	stw	r2,-20(fp)
 40136e0:	e0bffb17 	ldw	r2,-20(fp)
 40136e4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 40136e8:	e0bfff17 	ldw	r2,-4(fp)
 40136ec:	10000005 	stb	zero,0(r2)
    return (0);                                            /* No tasks waiting on queue                */
 40136f0:	0005883a 	mov	r2,zero
}
 40136f4:	e037883a 	mov	sp,fp
 40136f8:	dfc00117 	ldw	ra,4(sp)
 40136fc:	df000017 	ldw	fp,0(sp)
 4013700:	dec00204 	addi	sp,sp,8
 4013704:	f800283a 	ret

04013708 <OSQPost>:
*********************************************************************************************************
*/

#if OS_Q_POST_EN > 0
INT8U  OSQPost (OS_EVENT *pevent, void *pmsg)
{
 4013708:	defff604 	addi	sp,sp,-40
 401370c:	dfc00915 	stw	ra,36(sp)
 4013710:	df000815 	stw	fp,32(sp)
 4013714:	df000804 	addi	fp,sp,32
 4013718:	e13ffe15 	stw	r4,-8(fp)
 401371c:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 4013720:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 4013724:	e0bffe17 	ldw	r2,-8(fp)
 4013728:	1000021e 	bne	r2,zero,4013734 <OSQPost+0x2c>
        return (OS_ERR_PEVENT_NULL);
 401372c:	00800104 	movi	r2,4
 4013730:	00004a06 	br	401385c <OSQPost+0x154>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 4013734:	e0bffe17 	ldw	r2,-8(fp)
 4013738:	10800003 	ldbu	r2,0(r2)
 401373c:	10803fcc 	andi	r2,r2,255
 4013740:	108000a0 	cmpeqi	r2,r2,2
 4013744:	1000021e 	bne	r2,zero,4013750 <OSQPost+0x48>
        return (OS_ERR_EVENT_TYPE);
 4013748:	00800044 	movi	r2,1
 401374c:	00004306 	br	401385c <OSQPost+0x154>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4013750:	0005303a 	rdctl	r2,status
 4013754:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4013758:	e0fffd17 	ldw	r3,-12(fp)
 401375c:	00bfff84 	movi	r2,-2
 4013760:	1884703a 	and	r2,r3,r2
 4013764:	1001703a 	wrctl	status,r2
  
  return context;
 4013768:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 401376c:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                     /* See if any task pending on queue             */
 4013770:	e0bffe17 	ldw	r2,-8(fp)
 4013774:	10800283 	ldbu	r2,10(r2)
 4013778:	10803fcc 	andi	r2,r2,255
 401377c:	10000c26 	beq	r2,zero,40137b0 <OSQPost+0xa8>
                                                       /* Ready highest priority task waiting on event */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 4013780:	000f883a 	mov	r7,zero
 4013784:	01800104 	movi	r6,4
 4013788:	e17fff17 	ldw	r5,-4(fp)
 401378c:	e13ffe17 	ldw	r4,-8(fp)
 4013790:	400f10c0 	call	400f10c <OS_EventTaskRdy>
 4013794:	e0bff817 	ldw	r2,-32(fp)
 4013798:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401379c:	e0bff917 	ldw	r2,-28(fp)
 40137a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                    /* Find highest priority task ready to run      */
 40137a4:	400fb580 	call	400fb58 <OS_Sched>
        return (OS_ERR_NONE);
 40137a8:	0005883a 	mov	r2,zero
 40137ac:	00002b06 	br	401385c <OSQPost+0x154>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                   /* Point to queue control block                 */
 40137b0:	e0bffe17 	ldw	r2,-8(fp)
 40137b4:	10800117 	ldw	r2,4(r2)
 40137b8:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {               /* Make sure queue is not full                  */
 40137bc:	e0bffb17 	ldw	r2,-20(fp)
 40137c0:	10c0058b 	ldhu	r3,22(r2)
 40137c4:	e0bffb17 	ldw	r2,-20(fp)
 40137c8:	1080050b 	ldhu	r2,20(r2)
 40137cc:	18ffffcc 	andi	r3,r3,65535
 40137d0:	10bfffcc 	andi	r2,r2,65535
 40137d4:	18800636 	bltu	r3,r2,40137f0 <OSQPost+0xe8>
 40137d8:	e0bff817 	ldw	r2,-32(fp)
 40137dc:	e0bffa15 	stw	r2,-24(fp)
 40137e0:	e0bffa17 	ldw	r2,-24(fp)
 40137e4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 40137e8:	00800784 	movi	r2,30
 40137ec:	00001b06 	br	401385c <OSQPost+0x154>
    }
    *pq->OSQIn++ = pmsg;                               /* Insert message into queue                    */
 40137f0:	e0bffb17 	ldw	r2,-20(fp)
 40137f4:	10800317 	ldw	r2,12(r2)
 40137f8:	11000104 	addi	r4,r2,4
 40137fc:	e0fffb17 	ldw	r3,-20(fp)
 4013800:	19000315 	stw	r4,12(r3)
 4013804:	e0ffff17 	ldw	r3,-4(fp)
 4013808:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                  /* Update the nbr of entries in the queue       */
 401380c:	e0bffb17 	ldw	r2,-20(fp)
 4013810:	1080058b 	ldhu	r2,22(r2)
 4013814:	10800044 	addi	r2,r2,1
 4013818:	1007883a 	mov	r3,r2
 401381c:	e0bffb17 	ldw	r2,-20(fp)
 4013820:	10c0058d 	sth	r3,22(r2)
    if (pq->OSQIn == pq->OSQEnd) {                     /* Wrap IN ptr if we are at end of queue        */
 4013824:	e0bffb17 	ldw	r2,-20(fp)
 4013828:	10c00317 	ldw	r3,12(r2)
 401382c:	e0bffb17 	ldw	r2,-20(fp)
 4013830:	10800217 	ldw	r2,8(r2)
 4013834:	1880041e 	bne	r3,r2,4013848 <OSQPost+0x140>
        pq->OSQIn = pq->OSQStart;
 4013838:	e0bffb17 	ldw	r2,-20(fp)
 401383c:	10c00117 	ldw	r3,4(r2)
 4013840:	e0bffb17 	ldw	r2,-20(fp)
 4013844:	10c00315 	stw	r3,12(r2)
 4013848:	e0bff817 	ldw	r2,-32(fp)
 401384c:	e0bffc15 	stw	r2,-16(fp)
 4013850:	e0bffc17 	ldw	r2,-16(fp)
 4013854:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 4013858:	0005883a 	mov	r2,zero
}
 401385c:	e037883a 	mov	sp,fp
 4013860:	dfc00117 	ldw	ra,4(sp)
 4013864:	df000017 	ldw	fp,0(sp)
 4013868:	dec00204 	addi	sp,sp,8
 401386c:	f800283a 	ret

04013870 <OSQPostFront>:
*********************************************************************************************************
*/

#if OS_Q_POST_FRONT_EN > 0
INT8U  OSQPostFront (OS_EVENT *pevent, void *pmsg)
{
 4013870:	defff604 	addi	sp,sp,-40
 4013874:	dfc00915 	stw	ra,36(sp)
 4013878:	df000815 	stw	fp,32(sp)
 401387c:	df000804 	addi	fp,sp,32
 4013880:	e13ffe15 	stw	r4,-8(fp)
 4013884:	e17fff15 	stw	r5,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 4013888:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 401388c:	e0bffe17 	ldw	r2,-8(fp)
 4013890:	1000021e 	bne	r2,zero,401389c <OSQPostFront+0x2c>
        return (OS_ERR_PEVENT_NULL);
 4013894:	00800104 	movi	r2,4
 4013898:	00004c06 	br	40139cc <OSQPostFront+0x15c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 401389c:	e0bffe17 	ldw	r2,-8(fp)
 40138a0:	10800003 	ldbu	r2,0(r2)
 40138a4:	10803fcc 	andi	r2,r2,255
 40138a8:	108000a0 	cmpeqi	r2,r2,2
 40138ac:	1000021e 	bne	r2,zero,40138b8 <OSQPostFront+0x48>
        return (OS_ERR_EVENT_TYPE);
 40138b0:	00800044 	movi	r2,1
 40138b4:	00004506 	br	40139cc <OSQPostFront+0x15c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40138b8:	0005303a 	rdctl	r2,status
 40138bc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40138c0:	e0fffd17 	ldw	r3,-12(fp)
 40138c4:	00bfff84 	movi	r2,-2
 40138c8:	1884703a 	and	r2,r3,r2
 40138cc:	1001703a 	wrctl	status,r2
  
  return context;
 40138d0:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 40138d4:	e0bff815 	stw	r2,-32(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task pending on queue              */
 40138d8:	e0bffe17 	ldw	r2,-8(fp)
 40138dc:	10800283 	ldbu	r2,10(r2)
 40138e0:	10803fcc 	andi	r2,r2,255
 40138e4:	10000c26 	beq	r2,zero,4013918 <OSQPostFront+0xa8>
                                                      /* Ready highest priority task waiting on event  */
        (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 40138e8:	000f883a 	mov	r7,zero
 40138ec:	01800104 	movi	r6,4
 40138f0:	e17fff17 	ldw	r5,-4(fp)
 40138f4:	e13ffe17 	ldw	r4,-8(fp)
 40138f8:	400f10c0 	call	400f10c <OS_EventTaskRdy>
 40138fc:	e0bff817 	ldw	r2,-32(fp)
 4013900:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4013904:	e0bff917 	ldw	r2,-28(fp)
 4013908:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find highest priority task ready to run       */
 401390c:	400fb580 	call	400fb58 <OS_Sched>
        return (OS_ERR_NONE);
 4013910:	0005883a 	mov	r2,zero
 4013914:	00002d06 	br	40139cc <OSQPostFront+0x15c>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 4013918:	e0bffe17 	ldw	r2,-8(fp)
 401391c:	10800117 	ldw	r2,4(r2)
 4013920:	e0bffb15 	stw	r2,-20(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 4013924:	e0bffb17 	ldw	r2,-20(fp)
 4013928:	10c0058b 	ldhu	r3,22(r2)
 401392c:	e0bffb17 	ldw	r2,-20(fp)
 4013930:	1080050b 	ldhu	r2,20(r2)
 4013934:	18ffffcc 	andi	r3,r3,65535
 4013938:	10bfffcc 	andi	r2,r2,65535
 401393c:	18800636 	bltu	r3,r2,4013958 <OSQPostFront+0xe8>
 4013940:	e0bff817 	ldw	r2,-32(fp)
 4013944:	e0bffa15 	stw	r2,-24(fp)
 4013948:	e0bffa17 	ldw	r2,-24(fp)
 401394c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 4013950:	00800784 	movi	r2,30
 4013954:	00001d06 	br	40139cc <OSQPostFront+0x15c>
    }
    if (pq->OSQOut == pq->OSQStart) {                 /* Wrap OUT ptr if we are at the 1st queue entry */
 4013958:	e0bffb17 	ldw	r2,-20(fp)
 401395c:	10c00417 	ldw	r3,16(r2)
 4013960:	e0bffb17 	ldw	r2,-20(fp)
 4013964:	10800117 	ldw	r2,4(r2)
 4013968:	1880041e 	bne	r3,r2,401397c <OSQPostFront+0x10c>
        pq->OSQOut = pq->OSQEnd;
 401396c:	e0bffb17 	ldw	r2,-20(fp)
 4013970:	10c00217 	ldw	r3,8(r2)
 4013974:	e0bffb17 	ldw	r2,-20(fp)
 4013978:	10c00415 	stw	r3,16(r2)
    }
    pq->OSQOut--;
 401397c:	e0bffb17 	ldw	r2,-20(fp)
 4013980:	10800417 	ldw	r2,16(r2)
 4013984:	10ffff04 	addi	r3,r2,-4
 4013988:	e0bffb17 	ldw	r2,-20(fp)
 401398c:	10c00415 	stw	r3,16(r2)
    *pq->OSQOut = pmsg;                               /* Insert message into queue                     */
 4013990:	e0bffb17 	ldw	r2,-20(fp)
 4013994:	10800417 	ldw	r2,16(r2)
 4013998:	e0ffff17 	ldw	r3,-4(fp)
 401399c:	10c00015 	stw	r3,0(r2)
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 40139a0:	e0bffb17 	ldw	r2,-20(fp)
 40139a4:	1080058b 	ldhu	r2,22(r2)
 40139a8:	10800044 	addi	r2,r2,1
 40139ac:	1007883a 	mov	r3,r2
 40139b0:	e0bffb17 	ldw	r2,-20(fp)
 40139b4:	10c0058d 	sth	r3,22(r2)
 40139b8:	e0bff817 	ldw	r2,-32(fp)
 40139bc:	e0bffc15 	stw	r2,-16(fp)
 40139c0:	e0bffc17 	ldw	r2,-16(fp)
 40139c4:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 40139c8:	0005883a 	mov	r2,zero
}
 40139cc:	e037883a 	mov	sp,fp
 40139d0:	dfc00117 	ldw	ra,4(sp)
 40139d4:	df000017 	ldw	fp,0(sp)
 40139d8:	dec00204 	addi	sp,sp,8
 40139dc:	f800283a 	ret

040139e0 <OSQPostOpt>:
*********************************************************************************************************
*/

#if OS_Q_POST_OPT_EN > 0
INT8U  OSQPostOpt (OS_EVENT *pevent, void *pmsg, INT8U opt)
{
 40139e0:	defff504 	addi	sp,sp,-44
 40139e4:	dfc00a15 	stw	ra,40(sp)
 40139e8:	df000915 	stw	fp,36(sp)
 40139ec:	df000904 	addi	fp,sp,36
 40139f0:	e13ffd15 	stw	r4,-12(fp)
 40139f4:	e17ffe15 	stw	r5,-8(fp)
 40139f8:	3005883a 	mov	r2,r6
 40139fc:	e0bfff05 	stb	r2,-4(fp)
    OS_Q      *pq;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 4013a00:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 4013a04:	e0bffd17 	ldw	r2,-12(fp)
 4013a08:	1000021e 	bne	r2,zero,4013a14 <OSQPostOpt+0x34>
        return (OS_ERR_PEVENT_NULL);
 4013a0c:	00800104 	movi	r2,4
 4013a10:	00007106 	br	4013bd8 <OSQPostOpt+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {     /* Validate event block type                     */
 4013a14:	e0bffd17 	ldw	r2,-12(fp)
 4013a18:	10800003 	ldbu	r2,0(r2)
 4013a1c:	10803fcc 	andi	r2,r2,255
 4013a20:	108000a0 	cmpeqi	r2,r2,2
 4013a24:	1000021e 	bne	r2,zero,4013a30 <OSQPostOpt+0x50>
        return (OS_ERR_EVENT_TYPE);
 4013a28:	00800044 	movi	r2,1
 4013a2c:	00006a06 	br	4013bd8 <OSQPostOpt+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4013a30:	0005303a 	rdctl	r2,status
 4013a34:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4013a38:	e0fffc17 	ldw	r3,-16(fp)
 4013a3c:	00bfff84 	movi	r2,-2
 4013a40:	1884703a 	and	r2,r3,r2
 4013a44:	1001703a 	wrctl	status,r2
  
  return context;
 4013a48:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 4013a4c:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
 4013a50:	e0bffd17 	ldw	r2,-12(fp)
 4013a54:	10800283 	ldbu	r2,10(r2)
 4013a58:	10803fcc 	andi	r2,r2,255
 4013a5c:	10001d26 	beq	r2,zero,4013ad4 <OSQPostOpt+0xf4>
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
 4013a60:	e0bfff03 	ldbu	r2,-4(fp)
 4013a64:	1080004c 	andi	r2,r2,1
 4013a68:	10000b26 	beq	r2,zero,4013a98 <OSQPostOpt+0xb8>
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 4013a6c:	00000506 	br	4013a84 <OSQPostOpt+0xa4>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 4013a70:	000f883a 	mov	r7,zero
 4013a74:	01800104 	movi	r6,4
 4013a78:	e17ffe17 	ldw	r5,-8(fp)
 4013a7c:	e13ffd17 	ldw	r4,-12(fp)
 4013a80:	400f10c0 	call	400f10c <OS_EventTaskRdy>
        return (OS_ERR_EVENT_TYPE);
    }
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0x00) {                 /* See if any task pending on queue              */
        if ((opt & OS_POST_OPT_BROADCAST) != 0x00) {  /* Do we need to post msg to ALL waiting tasks ? */
            while (pevent->OSEventGrp != 0) {         /* Yes, Post to ALL tasks waiting on queue       */
 4013a84:	e0bffd17 	ldw	r2,-12(fp)
 4013a88:	10800283 	ldbu	r2,10(r2)
 4013a8c:	10803fcc 	andi	r2,r2,255
 4013a90:	103ff71e 	bne	r2,zero,4013a70 <__alt_mem_onchip_memory2_0+0xfbff3a70>
 4013a94:	00000506 	br	4013aac <OSQPostOpt+0xcc>
                (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
            }
        } else {                                      /* No,  Post to HPT waiting on queue             */
            (void)OS_EventTaskRdy(pevent, pmsg, OS_STAT_Q, OS_STAT_PEND_OK);
 4013a98:	000f883a 	mov	r7,zero
 4013a9c:	01800104 	movi	r6,4
 4013aa0:	e17ffe17 	ldw	r5,-8(fp)
 4013aa4:	e13ffd17 	ldw	r4,-12(fp)
 4013aa8:	400f10c0 	call	400f10c <OS_EventTaskRdy>
 4013aac:	e0bff717 	ldw	r2,-36(fp)
 4013ab0:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4013ab4:	e0bff817 	ldw	r2,-32(fp)
 4013ab8:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        if ((opt & OS_POST_OPT_NO_SCHED) == 0) {	  /* See if scheduler needs to be invoked          */
 4013abc:	e0bfff03 	ldbu	r2,-4(fp)
 4013ac0:	1080010c 	andi	r2,r2,4
 4013ac4:	1000011e 	bne	r2,zero,4013acc <OSQPostOpt+0xec>
            OS_Sched();                               /* Find highest priority task ready to run       */
 4013ac8:	400fb580 	call	400fb58 <OS_Sched>
        }
        return (OS_ERR_NONE);
 4013acc:	0005883a 	mov	r2,zero
 4013ad0:	00004106 	br	4013bd8 <OSQPostOpt+0x1f8>
    }
    pq = (OS_Q *)pevent->OSEventPtr;                  /* Point to queue control block                  */
 4013ad4:	e0bffd17 	ldw	r2,-12(fp)
 4013ad8:	10800117 	ldw	r2,4(r2)
 4013adc:	e0bffa15 	stw	r2,-24(fp)
    if (pq->OSQEntries >= pq->OSQSize) {              /* Make sure queue is not full                   */
 4013ae0:	e0bffa17 	ldw	r2,-24(fp)
 4013ae4:	10c0058b 	ldhu	r3,22(r2)
 4013ae8:	e0bffa17 	ldw	r2,-24(fp)
 4013aec:	1080050b 	ldhu	r2,20(r2)
 4013af0:	18ffffcc 	andi	r3,r3,65535
 4013af4:	10bfffcc 	andi	r2,r2,65535
 4013af8:	18800636 	bltu	r3,r2,4013b14 <OSQPostOpt+0x134>
 4013afc:	e0bff717 	ldw	r2,-36(fp)
 4013b00:	e0bff915 	stw	r2,-28(fp)
 4013b04:	e0bff917 	ldw	r2,-28(fp)
 4013b08:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_Q_FULL);
 4013b0c:	00800784 	movi	r2,30
 4013b10:	00003106 	br	4013bd8 <OSQPostOpt+0x1f8>
    }
    if ((opt & OS_POST_OPT_FRONT) != 0x00) {          /* Do we post to the FRONT of the queue?         */
 4013b14:	e0bfff03 	ldbu	r2,-4(fp)
 4013b18:	1080008c 	andi	r2,r2,2
 4013b1c:	10001326 	beq	r2,zero,4013b6c <OSQPostOpt+0x18c>
        if (pq->OSQOut == pq->OSQStart) {             /* Yes, Post as LIFO, Wrap OUT pointer if we ... */
 4013b20:	e0bffa17 	ldw	r2,-24(fp)
 4013b24:	10c00417 	ldw	r3,16(r2)
 4013b28:	e0bffa17 	ldw	r2,-24(fp)
 4013b2c:	10800117 	ldw	r2,4(r2)
 4013b30:	1880041e 	bne	r3,r2,4013b44 <OSQPostOpt+0x164>
            pq->OSQOut = pq->OSQEnd;                  /*      ... are at the 1st queue entry           */
 4013b34:	e0bffa17 	ldw	r2,-24(fp)
 4013b38:	10c00217 	ldw	r3,8(r2)
 4013b3c:	e0bffa17 	ldw	r2,-24(fp)
 4013b40:	10c00415 	stw	r3,16(r2)
        }
        pq->OSQOut--;
 4013b44:	e0bffa17 	ldw	r2,-24(fp)
 4013b48:	10800417 	ldw	r2,16(r2)
 4013b4c:	10ffff04 	addi	r3,r2,-4
 4013b50:	e0bffa17 	ldw	r2,-24(fp)
 4013b54:	10c00415 	stw	r3,16(r2)
        *pq->OSQOut = pmsg;                           /*      Insert message into queue                */
 4013b58:	e0bffa17 	ldw	r2,-24(fp)
 4013b5c:	10800417 	ldw	r2,16(r2)
 4013b60:	e0fffe17 	ldw	r3,-8(fp)
 4013b64:	10c00015 	stw	r3,0(r2)
 4013b68:	00001006 	br	4013bac <OSQPostOpt+0x1cc>
    } else {                                          /* No,  Post as FIFO                             */
        *pq->OSQIn++ = pmsg;                          /*      Insert message into queue                */
 4013b6c:	e0bffa17 	ldw	r2,-24(fp)
 4013b70:	10800317 	ldw	r2,12(r2)
 4013b74:	11000104 	addi	r4,r2,4
 4013b78:	e0fffa17 	ldw	r3,-24(fp)
 4013b7c:	19000315 	stw	r4,12(r3)
 4013b80:	e0fffe17 	ldw	r3,-8(fp)
 4013b84:	10c00015 	stw	r3,0(r2)
        if (pq->OSQIn == pq->OSQEnd) {                /*      Wrap IN ptr if we are at end of queue    */
 4013b88:	e0bffa17 	ldw	r2,-24(fp)
 4013b8c:	10c00317 	ldw	r3,12(r2)
 4013b90:	e0bffa17 	ldw	r2,-24(fp)
 4013b94:	10800217 	ldw	r2,8(r2)
 4013b98:	1880041e 	bne	r3,r2,4013bac <OSQPostOpt+0x1cc>
            pq->OSQIn = pq->OSQStart;
 4013b9c:	e0bffa17 	ldw	r2,-24(fp)
 4013ba0:	10c00117 	ldw	r3,4(r2)
 4013ba4:	e0bffa17 	ldw	r2,-24(fp)
 4013ba8:	10c00315 	stw	r3,12(r2)
        }
    }
    pq->OSQEntries++;                                 /* Update the nbr of entries in the queue        */
 4013bac:	e0bffa17 	ldw	r2,-24(fp)
 4013bb0:	1080058b 	ldhu	r2,22(r2)
 4013bb4:	10800044 	addi	r2,r2,1
 4013bb8:	1007883a 	mov	r3,r2
 4013bbc:	e0bffa17 	ldw	r2,-24(fp)
 4013bc0:	10c0058d 	sth	r3,22(r2)
 4013bc4:	e0bff717 	ldw	r2,-36(fp)
 4013bc8:	e0bffb15 	stw	r2,-20(fp)
 4013bcc:	e0bffb17 	ldw	r2,-20(fp)
 4013bd0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 4013bd4:	0005883a 	mov	r2,zero
}
 4013bd8:	e037883a 	mov	sp,fp
 4013bdc:	dfc00117 	ldw	ra,4(sp)
 4013be0:	df000017 	ldw	fp,0(sp)
 4013be4:	dec00204 	addi	sp,sp,8
 4013be8:	f800283a 	ret

04013bec <OSQQuery>:
*********************************************************************************************************
*/

#if OS_Q_QUERY_EN > 0
INT8U  OSQQuery (OS_EVENT *pevent, OS_Q_DATA *p_q_data)
{
 4013bec:	defff604 	addi	sp,sp,-40
 4013bf0:	df000915 	stw	fp,36(sp)
 4013bf4:	df000904 	addi	fp,sp,36
 4013bf8:	e13ffe15 	stw	r4,-8(fp)
 4013bfc:	e17fff15 	stw	r5,-4(fp)
#else
    INT16U    *psrc;
    INT16U    *pdest;
#endif
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 4013c00:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                     /* Validate 'pevent'                            */
 4013c04:	e0bffe17 	ldw	r2,-8(fp)
 4013c08:	1000021e 	bne	r2,zero,4013c14 <OSQQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
 4013c0c:	00800104 	movi	r2,4
 4013c10:	00004906 	br	4013d38 <OSQQuery+0x14c>
    }
    if (p_q_data == (OS_Q_DATA *)0) {                  /* Validate 'p_q_data'                          */
 4013c14:	e0bfff17 	ldw	r2,-4(fp)
 4013c18:	1000021e 	bne	r2,zero,4013c24 <OSQQuery+0x38>
        return (OS_ERR_PDATA_NULL);
 4013c1c:	00800244 	movi	r2,9
 4013c20:	00004506 	br	4013d38 <OSQQuery+0x14c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_Q) {      /* Validate event block type                    */
 4013c24:	e0bffe17 	ldw	r2,-8(fp)
 4013c28:	10800003 	ldbu	r2,0(r2)
 4013c2c:	10803fcc 	andi	r2,r2,255
 4013c30:	108000a0 	cmpeqi	r2,r2,2
 4013c34:	1000021e 	bne	r2,zero,4013c40 <OSQQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
 4013c38:	00800044 	movi	r2,1
 4013c3c:	00003e06 	br	4013d38 <OSQQuery+0x14c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4013c40:	0005303a 	rdctl	r2,status
 4013c44:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4013c48:	e0fffd17 	ldw	r3,-12(fp)
 4013c4c:	00bfff84 	movi	r2,-2
 4013c50:	1884703a 	and	r2,r3,r2
 4013c54:	1001703a 	wrctl	status,r2
  
  return context;
 4013c58:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 4013c5c:	e0bffa15 	stw	r2,-24(fp)
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
 4013c60:	e0bffe17 	ldw	r2,-8(fp)
 4013c64:	10c00283 	ldbu	r3,10(r2)
 4013c68:	e0bfff17 	ldw	r2,-4(fp)
 4013c6c:	10c002c5 	stb	r3,11(r2)
    psrc                 = &pevent->OSEventTbl[0];
 4013c70:	e0bffe17 	ldw	r2,-8(fp)
 4013c74:	108002c4 	addi	r2,r2,11
 4013c78:	e0bff815 	stw	r2,-32(fp)
    pdest                = &p_q_data->OSEventTbl[0];
 4013c7c:	e0bfff17 	ldw	r2,-4(fp)
 4013c80:	10800204 	addi	r2,r2,8
 4013c84:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 4013c88:	e03ff705 	stb	zero,-36(fp)
 4013c8c:	00000b06 	br	4013cbc <OSQQuery+0xd0>
        *pdest++ = *psrc++;
 4013c90:	e0bff917 	ldw	r2,-28(fp)
 4013c94:	10c00044 	addi	r3,r2,1
 4013c98:	e0fff915 	stw	r3,-28(fp)
 4013c9c:	e0fff817 	ldw	r3,-32(fp)
 4013ca0:	19000044 	addi	r4,r3,1
 4013ca4:	e13ff815 	stw	r4,-32(fp)
 4013ca8:	18c00003 	ldbu	r3,0(r3)
 4013cac:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_q_data->OSEventGrp = pevent->OSEventGrp;         /* Copy message queue wait list                 */
    psrc                 = &pevent->OSEventTbl[0];
    pdest                = &p_q_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 4013cb0:	e0bff703 	ldbu	r2,-36(fp)
 4013cb4:	10800044 	addi	r2,r2,1
 4013cb8:	e0bff705 	stb	r2,-36(fp)
 4013cbc:	e0bff703 	ldbu	r2,-36(fp)
 4013cc0:	108000f0 	cmpltui	r2,r2,3
 4013cc4:	103ff21e 	bne	r2,zero,4013c90 <__alt_mem_onchip_memory2_0+0xfbff3c90>
        *pdest++ = *psrc++;
    }
    pq = (OS_Q *)pevent->OSEventPtr;
 4013cc8:	e0bffe17 	ldw	r2,-8(fp)
 4013ccc:	10800117 	ldw	r2,4(r2)
 4013cd0:	e0bffc15 	stw	r2,-16(fp)
    if (pq->OSQEntries > 0) {
 4013cd4:	e0bffc17 	ldw	r2,-16(fp)
 4013cd8:	1080058b 	ldhu	r2,22(r2)
 4013cdc:	10bfffcc 	andi	r2,r2,65535
 4013ce0:	10000626 	beq	r2,zero,4013cfc <OSQQuery+0x110>
        p_q_data->OSMsg = *pq->OSQOut;                 /* Get next message to return if available      */
 4013ce4:	e0bffc17 	ldw	r2,-16(fp)
 4013ce8:	10800417 	ldw	r2,16(r2)
 4013cec:	10c00017 	ldw	r3,0(r2)
 4013cf0:	e0bfff17 	ldw	r2,-4(fp)
 4013cf4:	10c00015 	stw	r3,0(r2)
 4013cf8:	00000206 	br	4013d04 <OSQQuery+0x118>
    } else {
        p_q_data->OSMsg = (void *)0;
 4013cfc:	e0bfff17 	ldw	r2,-4(fp)
 4013d00:	10000015 	stw	zero,0(r2)
    }
    p_q_data->OSNMsgs = pq->OSQEntries;
 4013d04:	e0bffc17 	ldw	r2,-16(fp)
 4013d08:	10c0058b 	ldhu	r3,22(r2)
 4013d0c:	e0bfff17 	ldw	r2,-4(fp)
 4013d10:	10c0010d 	sth	r3,4(r2)
    p_q_data->OSQSize = pq->OSQSize;
 4013d14:	e0bffc17 	ldw	r2,-16(fp)
 4013d18:	10c0050b 	ldhu	r3,20(r2)
 4013d1c:	e0bfff17 	ldw	r2,-4(fp)
 4013d20:	10c0018d 	sth	r3,6(r2)
 4013d24:	e0bffa17 	ldw	r2,-24(fp)
 4013d28:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4013d2c:	e0bffb17 	ldw	r2,-20(fp)
 4013d30:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 4013d34:	0005883a 	mov	r2,zero
}
 4013d38:	e037883a 	mov	sp,fp
 4013d3c:	df000017 	ldw	fp,0(sp)
 4013d40:	dec00104 	addi	sp,sp,4
 4013d44:	f800283a 	ret

04013d48 <OS_QInit>:
* Note(s)    : This function is INTERNAL to uC/OS-II and your application should not call it.
*********************************************************************************************************
*/

void  OS_QInit (void)
{
 4013d48:	defffb04 	addi	sp,sp,-20
 4013d4c:	dfc00415 	stw	ra,16(sp)
 4013d50:	df000315 	stw	fp,12(sp)
 4013d54:	df000304 	addi	fp,sp,12
    OS_Q   *pq1;
    OS_Q   *pq2;



    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
 4013d58:	01407804 	movi	r5,480
 4013d5c:	010100b4 	movhi	r4,1026
 4013d60:	21173604 	addi	r4,r4,23768
 4013d64:	400fa9c0 	call	400fa9c <OS_MemClr>
    pq1 = &OSQTbl[0];
 4013d68:	008100b4 	movhi	r2,1026
 4013d6c:	10973604 	addi	r2,r2,23768
 4013d70:	e0bffe15 	stw	r2,-8(fp)
    pq2 = &OSQTbl[1];
 4013d74:	008100b4 	movhi	r2,1026
 4013d78:	10973c04 	addi	r2,r2,23792
 4013d7c:	e0bfff15 	stw	r2,-4(fp)
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 4013d80:	e03ffd0d 	sth	zero,-12(fp)
 4013d84:	00000c06 	br	4013db8 <OS_QInit+0x70>
        pq1->OSQPtr = pq2;
 4013d88:	e0bffe17 	ldw	r2,-8(fp)
 4013d8c:	e0ffff17 	ldw	r3,-4(fp)
 4013d90:	10c00015 	stw	r3,0(r2)
        pq1++;
 4013d94:	e0bffe17 	ldw	r2,-8(fp)
 4013d98:	10800604 	addi	r2,r2,24
 4013d9c:	e0bffe15 	stw	r2,-8(fp)
        pq2++;
 4013da0:	e0bfff17 	ldw	r2,-4(fp)
 4013da4:	10800604 	addi	r2,r2,24
 4013da8:	e0bfff15 	stw	r2,-4(fp)


    OS_MemClr((INT8U *)&OSQTbl[0], sizeof(OSQTbl));  /* Clear the queue table                          */
    pq1 = &OSQTbl[0];
    pq2 = &OSQTbl[1];
    for (i = 0; i < (OS_MAX_QS - 1); i++) {          /* Init. list of free QUEUE control blocks        */
 4013dac:	e0bffd0b 	ldhu	r2,-12(fp)
 4013db0:	10800044 	addi	r2,r2,1
 4013db4:	e0bffd0d 	sth	r2,-12(fp)
 4013db8:	e0bffd0b 	ldhu	r2,-12(fp)
 4013dbc:	108004f0 	cmpltui	r2,r2,19
 4013dc0:	103ff11e 	bne	r2,zero,4013d88 <__alt_mem_onchip_memory2_0+0xfbff3d88>
        pq1->OSQPtr = pq2;
        pq1++;
        pq2++;
    }
    pq1->OSQPtr = (OS_Q *)0;
 4013dc4:	e0bffe17 	ldw	r2,-8(fp)
 4013dc8:	10000015 	stw	zero,0(r2)
    OSQFreeList = &OSQTbl[0];
 4013dcc:	008100b4 	movhi	r2,1026
 4013dd0:	10973604 	addi	r2,r2,23768
 4013dd4:	d0a72e15 	stw	r2,-25416(gp)
#endif
}
 4013dd8:	0001883a 	nop
 4013ddc:	e037883a 	mov	sp,fp
 4013de0:	dfc00117 	ldw	ra,4(sp)
 4013de4:	df000017 	ldw	fp,0(sp)
 4013de8:	dec00204 	addi	sp,sp,8
 4013dec:	f800283a 	ret

04013df0 <OSSemAccept>:
*********************************************************************************************************
*/

#if OS_SEM_ACCEPT_EN > 0
INT16U  OSSemAccept (OS_EVENT *pevent)
{
 4013df0:	defffa04 	addi	sp,sp,-24
 4013df4:	df000515 	stw	fp,20(sp)
 4013df8:	df000504 	addi	fp,sp,20
 4013dfc:	e13fff15 	stw	r4,-4(fp)
    INT16U     cnt;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 4013e00:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 4013e04:	e0bfff17 	ldw	r2,-4(fp)
 4013e08:	1000021e 	bne	r2,zero,4013e14 <OSSemAccept+0x24>
        return (0);
 4013e0c:	0005883a 	mov	r2,zero
 4013e10:	00001f06 	br	4013e90 <OSSemAccept+0xa0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 4013e14:	e0bfff17 	ldw	r2,-4(fp)
 4013e18:	10800003 	ldbu	r2,0(r2)
 4013e1c:	10803fcc 	andi	r2,r2,255
 4013e20:	108000e0 	cmpeqi	r2,r2,3
 4013e24:	1000021e 	bne	r2,zero,4013e30 <OSSemAccept+0x40>
        return (0);
 4013e28:	0005883a 	mov	r2,zero
 4013e2c:	00001806 	br	4013e90 <OSSemAccept+0xa0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4013e30:	0005303a 	rdctl	r2,status
 4013e34:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4013e38:	e0fffe17 	ldw	r3,-8(fp)
 4013e3c:	00bfff84 	movi	r2,-2
 4013e40:	1884703a 	and	r2,r3,r2
 4013e44:	1001703a 	wrctl	status,r2
  
  return context;
 4013e48:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 4013e4c:	e0bffb15 	stw	r2,-20(fp)
    cnt = pevent->OSEventCnt;
 4013e50:	e0bfff17 	ldw	r2,-4(fp)
 4013e54:	1080020b 	ldhu	r2,8(r2)
 4013e58:	e0bffd0d 	sth	r2,-12(fp)
    if (cnt > 0) {                                    /* See if resource is available                  */
 4013e5c:	e0bffd0b 	ldhu	r2,-12(fp)
 4013e60:	10000626 	beq	r2,zero,4013e7c <OSSemAccept+0x8c>
        pevent->OSEventCnt--;                         /* Yes, decrement semaphore and notify caller    */
 4013e64:	e0bfff17 	ldw	r2,-4(fp)
 4013e68:	1080020b 	ldhu	r2,8(r2)
 4013e6c:	10bfffc4 	addi	r2,r2,-1
 4013e70:	1007883a 	mov	r3,r2
 4013e74:	e0bfff17 	ldw	r2,-4(fp)
 4013e78:	10c0020d 	sth	r3,8(r2)
 4013e7c:	e0bffb17 	ldw	r2,-20(fp)
 4013e80:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4013e84:	e0bffc17 	ldw	r2,-16(fp)
 4013e88:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (cnt);                                     /* Return semaphore count                        */
 4013e8c:	e0bffd0b 	ldhu	r2,-12(fp)
}
 4013e90:	e037883a 	mov	sp,fp
 4013e94:	df000017 	ldw	fp,0(sp)
 4013e98:	dec00104 	addi	sp,sp,4
 4013e9c:	f800283a 	ret

04013ea0 <OSSemCreate>:
*              == (void *)0  if no event control blocks were available
*********************************************************************************************************
*/

OS_EVENT  *OSSemCreate (INT16U cnt)
{
 4013ea0:	defff904 	addi	sp,sp,-28
 4013ea4:	dfc00615 	stw	ra,24(sp)
 4013ea8:	df000515 	stw	fp,20(sp)
 4013eac:	df000504 	addi	fp,sp,20
 4013eb0:	2005883a 	mov	r2,r4
 4013eb4:	e0bfff0d 	sth	r2,-4(fp)
    OS_EVENT  *pevent;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 4013eb8:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 4013ebc:	d0a73103 	ldbu	r2,-25404(gp)
 4013ec0:	10803fcc 	andi	r2,r2,255
 4013ec4:	10000226 	beq	r2,zero,4013ed0 <OSSemCreate+0x30>
        return ((OS_EVENT *)0);                            /* ... can't CREATE from an ISR             */
 4013ec8:	0005883a 	mov	r2,zero
 4013ecc:	00002506 	br	4013f64 <OSSemCreate+0xc4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4013ed0:	0005303a 	rdctl	r2,status
 4013ed4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4013ed8:	e0fffe17 	ldw	r3,-8(fp)
 4013edc:	00bfff84 	movi	r2,-2
 4013ee0:	1884703a 	and	r2,r3,r2
 4013ee4:	1001703a 	wrctl	status,r2
  
  return context;
 4013ee8:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 4013eec:	e0bffb15 	stw	r2,-20(fp)
    pevent = OSEventFreeList;                              /* Get next free event control block        */
 4013ef0:	d0a73017 	ldw	r2,-25408(gp)
 4013ef4:	e0bffd15 	stw	r2,-12(fp)
    if (OSEventFreeList != (OS_EVENT *)0) {                /* See if pool of free ECB pool was empty   */
 4013ef8:	d0a73017 	ldw	r2,-25408(gp)
 4013efc:	10000326 	beq	r2,zero,4013f0c <OSSemCreate+0x6c>
        OSEventFreeList = (OS_EVENT *)OSEventFreeList->OSEventPtr;
 4013f00:	d0a73017 	ldw	r2,-25408(gp)
 4013f04:	10800117 	ldw	r2,4(r2)
 4013f08:	d0a73015 	stw	r2,-25408(gp)
 4013f0c:	e0bffb17 	ldw	r2,-20(fp)
 4013f10:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4013f14:	e0bffc17 	ldw	r2,-16(fp)
 4013f18:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    if (pevent != (OS_EVENT *)0) {                         /* Get an event control block               */
 4013f1c:	e0bffd17 	ldw	r2,-12(fp)
 4013f20:	10000f26 	beq	r2,zero,4013f60 <OSSemCreate+0xc0>
        pevent->OSEventType    = OS_EVENT_TYPE_SEM;
 4013f24:	e0bffd17 	ldw	r2,-12(fp)
 4013f28:	00c000c4 	movi	r3,3
 4013f2c:	10c00005 	stb	r3,0(r2)
        pevent->OSEventCnt     = cnt;                      /* Set semaphore value                      */
 4013f30:	e0bffd17 	ldw	r2,-12(fp)
 4013f34:	e0ffff0b 	ldhu	r3,-4(fp)
 4013f38:	10c0020d 	sth	r3,8(r2)
        pevent->OSEventPtr     = (void *)0;                /* Unlink from ECB free list                */
 4013f3c:	e0bffd17 	ldw	r2,-12(fp)
 4013f40:	10000115 	stw	zero,4(r2)
#if OS_EVENT_NAME_SIZE > 1
        pevent->OSEventName[0] = '?';                      /* Unknown name                             */
 4013f44:	e0bffd17 	ldw	r2,-12(fp)
 4013f48:	00c00fc4 	movi	r3,63
 4013f4c:	10c00385 	stb	r3,14(r2)
        pevent->OSEventName[1] = OS_ASCII_NUL;
 4013f50:	e0bffd17 	ldw	r2,-12(fp)
 4013f54:	100003c5 	stb	zero,15(r2)
#endif
        OS_EventWaitListInit(pevent);                      /* Initialize to 'nobody waiting' on sem.   */
 4013f58:	e13ffd17 	ldw	r4,-12(fp)
 4013f5c:	400f6bc0 	call	400f6bc <OS_EventWaitListInit>
    }
    return (pevent);
 4013f60:	e0bffd17 	ldw	r2,-12(fp)
}
 4013f64:	e037883a 	mov	sp,fp
 4013f68:	dfc00117 	ldw	ra,4(sp)
 4013f6c:	df000017 	ldw	fp,0(sp)
 4013f70:	dec00204 	addi	sp,sp,8
 4013f74:	f800283a 	ret

04013f78 <OSSemDel>:
*********************************************************************************************************
*/

#if OS_SEM_DEL_EN > 0
OS_EVENT  *OSSemDel (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 4013f78:	defff304 	addi	sp,sp,-52
 4013f7c:	dfc00c15 	stw	ra,48(sp)
 4013f80:	df000b15 	stw	fp,44(sp)
 4013f84:	df000b04 	addi	fp,sp,44
 4013f88:	e13ffd15 	stw	r4,-12(fp)
 4013f8c:	2805883a 	mov	r2,r5
 4013f90:	e1bfff15 	stw	r6,-4(fp)
 4013f94:	e0bffe05 	stb	r2,-8(fp)
    BOOLEAN    tasks_waiting;
    OS_EVENT  *pevent_return;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 4013f98:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                              /* Validate 'perr'                          */
 4013f9c:	e0bfff17 	ldw	r2,-4(fp)
 4013fa0:	1000021e 	bne	r2,zero,4013fac <OSSemDel+0x34>
        return (pevent);
 4013fa4:	e0bffd17 	ldw	r2,-12(fp)
 4013fa8:	00007e06 	br	40141a4 <OSSemDel+0x22c>
    }
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 4013fac:	e0bffd17 	ldw	r2,-12(fp)
 4013fb0:	1000051e 	bne	r2,zero,4013fc8 <OSSemDel+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 4013fb4:	e0bfff17 	ldw	r2,-4(fp)
 4013fb8:	00c00104 	movi	r3,4
 4013fbc:	10c00005 	stb	r3,0(r2)
        return (pevent);
 4013fc0:	e0bffd17 	ldw	r2,-12(fp)
 4013fc4:	00007706 	br	40141a4 <OSSemDel+0x22c>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 4013fc8:	e0bffd17 	ldw	r2,-12(fp)
 4013fcc:	10800003 	ldbu	r2,0(r2)
 4013fd0:	10803fcc 	andi	r2,r2,255
 4013fd4:	108000e0 	cmpeqi	r2,r2,3
 4013fd8:	1000051e 	bne	r2,zero,4013ff0 <OSSemDel+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 4013fdc:	e0bfff17 	ldw	r2,-4(fp)
 4013fe0:	00c00044 	movi	r3,1
 4013fe4:	10c00005 	stb	r3,0(r2)
        return (pevent);
 4013fe8:	e0bffd17 	ldw	r2,-12(fp)
 4013fec:	00006d06 	br	40141a4 <OSSemDel+0x22c>
    }
    if (OSIntNesting > 0) {                                /* See if called from ISR ...               */
 4013ff0:	d0a73103 	ldbu	r2,-25404(gp)
 4013ff4:	10803fcc 	andi	r2,r2,255
 4013ff8:	10000526 	beq	r2,zero,4014010 <OSSemDel+0x98>
        *perr = OS_ERR_DEL_ISR;                             /* ... can't DELETE from an ISR             */
 4013ffc:	e0bfff17 	ldw	r2,-4(fp)
 4014000:	00c003c4 	movi	r3,15
 4014004:	10c00005 	stb	r3,0(r2)
        return (pevent);
 4014008:	e0bffd17 	ldw	r2,-12(fp)
 401400c:	00006506 	br	40141a4 <OSSemDel+0x22c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4014010:	0005303a 	rdctl	r2,status
 4014014:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4014018:	e0fffc17 	ldw	r3,-16(fp)
 401401c:	00bfff84 	movi	r2,-2
 4014020:	1884703a 	and	r2,r3,r2
 4014024:	1001703a 	wrctl	status,r2
  
  return context;
 4014028:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 401402c:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventGrp != 0) {                         /* See if any tasks waiting on semaphore    */
 4014030:	e0bffd17 	ldw	r2,-12(fp)
 4014034:	10800283 	ldbu	r2,10(r2)
 4014038:	10803fcc 	andi	r2,r2,255
 401403c:	10000326 	beq	r2,zero,401404c <OSSemDel+0xd4>
        tasks_waiting = OS_TRUE;                           /* Yes                                      */
 4014040:	00800044 	movi	r2,1
 4014044:	e0bff505 	stb	r2,-44(fp)
 4014048:	00000106 	br	4014050 <OSSemDel+0xd8>
    } else {
        tasks_waiting = OS_FALSE;                          /* No                                       */
 401404c:	e03ff505 	stb	zero,-44(fp)
    }
    switch (opt) {
 4014050:	e0bffe03 	ldbu	r2,-8(fp)
 4014054:	10000326 	beq	r2,zero,4014064 <OSSemDel+0xec>
 4014058:	10800060 	cmpeqi	r2,r2,1
 401405c:	1000281e 	bne	r2,zero,4014100 <OSSemDel+0x188>
 4014060:	00004506 	br	4014178 <OSSemDel+0x200>
        case OS_DEL_NO_PEND:                               /* Delete semaphore only if no task waiting */
             if (tasks_waiting == OS_FALSE) {
 4014064:	e0bff503 	ldbu	r2,-44(fp)
 4014068:	1000161e 	bne	r2,zero,40140c4 <OSSemDel+0x14c>
#if OS_EVENT_NAME_SIZE > 1
                 pevent->OSEventName[0] = '?';             /* Unknown name                             */
 401406c:	e0bffd17 	ldw	r2,-12(fp)
 4014070:	00c00fc4 	movi	r3,63
 4014074:	10c00385 	stb	r3,14(r2)
                 pevent->OSEventName[1] = OS_ASCII_NUL;
 4014078:	e0bffd17 	ldw	r2,-12(fp)
 401407c:	100003c5 	stb	zero,15(r2)
#endif
                 pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 4014080:	e0bffd17 	ldw	r2,-12(fp)
 4014084:	10000005 	stb	zero,0(r2)
                 pevent->OSEventPtr     = OSEventFreeList; /* Return Event Control Block to free list  */
 4014088:	d0e73017 	ldw	r3,-25408(gp)
 401408c:	e0bffd17 	ldw	r2,-12(fp)
 4014090:	10c00115 	stw	r3,4(r2)
                 pevent->OSEventCnt     = 0;
 4014094:	e0bffd17 	ldw	r2,-12(fp)
 4014098:	1000020d 	sth	zero,8(r2)
                 OSEventFreeList        = pevent;          /* Get next free event control block        */
 401409c:	e0bffd17 	ldw	r2,-12(fp)
 40140a0:	d0a73015 	stw	r2,-25408(gp)
 40140a4:	e0bff717 	ldw	r2,-36(fp)
 40140a8:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40140ac:	e0bff817 	ldw	r2,-32(fp)
 40140b0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
 40140b4:	e0bfff17 	ldw	r2,-4(fp)
 40140b8:	10000005 	stb	zero,0(r2)
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
 40140bc:	e03ff615 	stw	zero,-40(fp)
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
                 pevent_return          = pevent;
             }
             break;
 40140c0:	00003706 	br	40141a0 <OSSemDel+0x228>
 40140c4:	e0bff717 	ldw	r2,-36(fp)
 40140c8:	e0bff915 	stw	r2,-28(fp)
 40140cc:	e0bff917 	ldw	r2,-28(fp)
 40140d0:	1001703a 	wrctl	status,r2
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_NONE;
                 pevent_return          = (OS_EVENT *)0;   /* Semaphore has been deleted               */
             } else {
                 OS_EXIT_CRITICAL();
                 *perr                  = OS_ERR_TASK_WAITING;
 40140d4:	e0bfff17 	ldw	r2,-4(fp)
 40140d8:	00c01244 	movi	r3,73
 40140dc:	10c00005 	stb	r3,0(r2)
                 pevent_return          = pevent;
 40140e0:	e0bffd17 	ldw	r2,-12(fp)
 40140e4:	e0bff615 	stw	r2,-40(fp)
             }
             break;
 40140e8:	00002d06 	br	40141a0 <OSSemDel+0x228>

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 40140ec:	000f883a 	mov	r7,zero
 40140f0:	01800044 	movi	r6,1
 40140f4:	000b883a 	mov	r5,zero
 40140f8:	e13ffd17 	ldw	r4,-12(fp)
 40140fc:	400f10c0 	call	400f10c <OS_EventTaskRdy>
                 pevent_return          = pevent;
             }
             break;

        case OS_DEL_ALWAYS:                                /* Always delete the semaphore              */
             while (pevent->OSEventGrp != 0) {             /* Ready ALL tasks waiting for semaphore    */
 4014100:	e0bffd17 	ldw	r2,-12(fp)
 4014104:	10800283 	ldbu	r2,10(r2)
 4014108:	10803fcc 	andi	r2,r2,255
 401410c:	103ff71e 	bne	r2,zero,40140ec <__alt_mem_onchip_memory2_0+0xfbff40ec>
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
             }
#if OS_EVENT_NAME_SIZE > 1
             pevent->OSEventName[0] = '?';                 /* Unknown name                             */
 4014110:	e0bffd17 	ldw	r2,-12(fp)
 4014114:	00c00fc4 	movi	r3,63
 4014118:	10c00385 	stb	r3,14(r2)
             pevent->OSEventName[1] = OS_ASCII_NUL;
 401411c:	e0bffd17 	ldw	r2,-12(fp)
 4014120:	100003c5 	stb	zero,15(r2)
#endif
             pevent->OSEventType    = OS_EVENT_TYPE_UNUSED;
 4014124:	e0bffd17 	ldw	r2,-12(fp)
 4014128:	10000005 	stb	zero,0(r2)
             pevent->OSEventPtr     = OSEventFreeList;     /* Return Event Control Block to free list  */
 401412c:	d0e73017 	ldw	r3,-25408(gp)
 4014130:	e0bffd17 	ldw	r2,-12(fp)
 4014134:	10c00115 	stw	r3,4(r2)
             pevent->OSEventCnt     = 0;
 4014138:	e0bffd17 	ldw	r2,-12(fp)
 401413c:	1000020d 	sth	zero,8(r2)
             OSEventFreeList        = pevent;              /* Get next free event control block        */
 4014140:	e0bffd17 	ldw	r2,-12(fp)
 4014144:	d0a73015 	stw	r2,-25408(gp)
 4014148:	e0bff717 	ldw	r2,-36(fp)
 401414c:	e0bffa15 	stw	r2,-24(fp)
 4014150:	e0bffa17 	ldw	r2,-24(fp)
 4014154:	1001703a 	wrctl	status,r2
             OS_EXIT_CRITICAL();
             if (tasks_waiting == OS_TRUE) {               /* Reschedule only if task(s) were waiting  */
 4014158:	e0bff503 	ldbu	r2,-44(fp)
 401415c:	10800058 	cmpnei	r2,r2,1
 4014160:	1000011e 	bne	r2,zero,4014168 <OSSemDel+0x1f0>
                 OS_Sched();                               /* Find highest priority task ready to run  */
 4014164:	400fb580 	call	400fb58 <OS_Sched>
             }
             *perr                  = OS_ERR_NONE;
 4014168:	e0bfff17 	ldw	r2,-4(fp)
 401416c:	10000005 	stb	zero,0(r2)
             pevent_return          = (OS_EVENT *)0;       /* Semaphore has been deleted               */
 4014170:	e03ff615 	stw	zero,-40(fp)
             break;
 4014174:	00000a06 	br	40141a0 <OSSemDel+0x228>
 4014178:	e0bff717 	ldw	r2,-36(fp)
 401417c:	e0bffb15 	stw	r2,-20(fp)
 4014180:	e0bffb17 	ldw	r2,-20(fp)
 4014184:	1001703a 	wrctl	status,r2

        default:
             OS_EXIT_CRITICAL();
             *perr                  = OS_ERR_INVALID_OPT;
 4014188:	e0bfff17 	ldw	r2,-4(fp)
 401418c:	00c001c4 	movi	r3,7
 4014190:	10c00005 	stb	r3,0(r2)
             pevent_return          = pevent;
 4014194:	e0bffd17 	ldw	r2,-12(fp)
 4014198:	e0bff615 	stw	r2,-40(fp)
             break;
 401419c:	0001883a 	nop
    }
    return (pevent_return);
 40141a0:	e0bff617 	ldw	r2,-40(fp)
}
 40141a4:	e037883a 	mov	sp,fp
 40141a8:	dfc00117 	ldw	ra,4(sp)
 40141ac:	df000017 	ldw	fp,0(sp)
 40141b0:	dec00204 	addi	sp,sp,8
 40141b4:	f800283a 	ret

040141b8 <OSSemPend>:
* Returns    : none
*********************************************************************************************************
*/
/*$PAGE*/
void  OSSemPend (OS_EVENT *pevent, INT16U timeout, INT8U *perr)
{
 40141b8:	defff504 	addi	sp,sp,-44
 40141bc:	dfc00a15 	stw	ra,40(sp)
 40141c0:	df000915 	stw	fp,36(sp)
 40141c4:	df000904 	addi	fp,sp,36
 40141c8:	e13ffd15 	stw	r4,-12(fp)
 40141cc:	2805883a 	mov	r2,r5
 40141d0:	e1bfff15 	stw	r6,-4(fp)
 40141d4:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 40141d8:	e03ff715 	stw	zero,-36(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 40141dc:	e0bfff17 	ldw	r2,-4(fp)
 40141e0:	10007226 	beq	r2,zero,40143ac <OSSemPend+0x1f4>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 40141e4:	e0bffd17 	ldw	r2,-12(fp)
 40141e8:	1000041e 	bne	r2,zero,40141fc <OSSemPend+0x44>
        *perr = OS_ERR_PEVENT_NULL;
 40141ec:	e0bfff17 	ldw	r2,-4(fp)
 40141f0:	00c00104 	movi	r3,4
 40141f4:	10c00005 	stb	r3,0(r2)
        return;
 40141f8:	00006d06 	br	40143b0 <OSSemPend+0x1f8>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 40141fc:	e0bffd17 	ldw	r2,-12(fp)
 4014200:	10800003 	ldbu	r2,0(r2)
 4014204:	10803fcc 	andi	r2,r2,255
 4014208:	108000e0 	cmpeqi	r2,r2,3
 401420c:	1000041e 	bne	r2,zero,4014220 <OSSemPend+0x68>
        *perr = OS_ERR_EVENT_TYPE;
 4014210:	e0bfff17 	ldw	r2,-4(fp)
 4014214:	00c00044 	movi	r3,1
 4014218:	10c00005 	stb	r3,0(r2)
        return;
 401421c:	00006406 	br	40143b0 <OSSemPend+0x1f8>
    }
    if (OSIntNesting > 0) {                           /* See if called from ISR ...                    */
 4014220:	d0a73103 	ldbu	r2,-25404(gp)
 4014224:	10803fcc 	andi	r2,r2,255
 4014228:	10000426 	beq	r2,zero,401423c <OSSemPend+0x84>
        *perr = OS_ERR_PEND_ISR;                      /* ... can't PEND from an ISR                    */
 401422c:	e0bfff17 	ldw	r2,-4(fp)
 4014230:	00c00084 	movi	r3,2
 4014234:	10c00005 	stb	r3,0(r2)
        return;
 4014238:	00005d06 	br	40143b0 <OSSemPend+0x1f8>
    }
    if (OSLockNesting > 0) {                          /* See if called with scheduler locked ...       */
 401423c:	d0a72303 	ldbu	r2,-25460(gp)
 4014240:	10803fcc 	andi	r2,r2,255
 4014244:	10000426 	beq	r2,zero,4014258 <OSSemPend+0xa0>
        *perr = OS_ERR_PEND_LOCKED;                   /* ... can't PEND when locked                    */
 4014248:	e0bfff17 	ldw	r2,-4(fp)
 401424c:	00c00344 	movi	r3,13
 4014250:	10c00005 	stb	r3,0(r2)
        return;
 4014254:	00005606 	br	40143b0 <OSSemPend+0x1f8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4014258:	0005303a 	rdctl	r2,status
 401425c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4014260:	e0fffc17 	ldw	r3,-16(fp)
 4014264:	00bfff84 	movi	r2,-2
 4014268:	1884703a 	and	r2,r3,r2
 401426c:	1001703a 	wrctl	status,r2
  
  return context;
 4014270:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 4014274:	e0bff715 	stw	r2,-36(fp)
    if (pevent->OSEventCnt > 0) {                     /* If sem. is positive, resource available ...   */
 4014278:	e0bffd17 	ldw	r2,-12(fp)
 401427c:	1080020b 	ldhu	r2,8(r2)
 4014280:	10bfffcc 	andi	r2,r2,65535
 4014284:	10000d26 	beq	r2,zero,40142bc <OSSemPend+0x104>
        pevent->OSEventCnt--;                         /* ... decrement semaphore only if positive.     */
 4014288:	e0bffd17 	ldw	r2,-12(fp)
 401428c:	1080020b 	ldhu	r2,8(r2)
 4014290:	10bfffc4 	addi	r2,r2,-1
 4014294:	1007883a 	mov	r3,r2
 4014298:	e0bffd17 	ldw	r2,-12(fp)
 401429c:	10c0020d 	sth	r3,8(r2)
 40142a0:	e0bff717 	ldw	r2,-36(fp)
 40142a4:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40142a8:	e0bff817 	ldw	r2,-32(fp)
 40142ac:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_NONE;
 40142b0:	e0bfff17 	ldw	r2,-4(fp)
 40142b4:	10000005 	stb	zero,0(r2)
        return;
 40142b8:	00003d06 	br	40143b0 <OSSemPend+0x1f8>
    }
                                                      /* Otherwise, must wait until event occurs       */
    OSTCBCur->OSTCBStat     |= OS_STAT_SEM;           /* Resource not available, pend on semaphore     */
 40142bc:	d0a73217 	ldw	r2,-25400(gp)
 40142c0:	d0e73217 	ldw	r3,-25400(gp)
 40142c4:	18c00c03 	ldbu	r3,48(r3)
 40142c8:	18c00054 	ori	r3,r3,1
 40142cc:	10c00c05 	stb	r3,48(r2)
    OSTCBCur->OSTCBStatPend  = OS_STAT_PEND_OK;
 40142d0:	d0a73217 	ldw	r2,-25400(gp)
 40142d4:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBDly       = timeout;               /* Store pend timeout in TCB                     */
 40142d8:	d0a73217 	ldw	r2,-25400(gp)
 40142dc:	e0fffe0b 	ldhu	r3,-8(fp)
 40142e0:	10c00b8d 	sth	r3,46(r2)
    OS_EventTaskWait(pevent);                         /* Suspend task until event or timeout occurs    */
 40142e4:	e13ffd17 	ldw	r4,-12(fp)
 40142e8:	400f2a40 	call	400f2a4 <OS_EventTaskWait>
 40142ec:	e0bff717 	ldw	r2,-36(fp)
 40142f0:	e0bffb15 	stw	r2,-20(fp)
 40142f4:	e0bffb17 	ldw	r2,-20(fp)
 40142f8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    OS_Sched();                                       /* Find next highest priority task ready         */
 40142fc:	400fb580 	call	400fb58 <OS_Sched>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4014300:	0005303a 	rdctl	r2,status
 4014304:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4014308:	e0fff917 	ldw	r3,-28(fp)
 401430c:	00bfff84 	movi	r2,-2
 4014310:	1884703a 	and	r2,r3,r2
 4014314:	1001703a 	wrctl	status,r2
  
  return context;
 4014318:	e0bff917 	ldw	r2,-28(fp)
    OS_ENTER_CRITICAL();
 401431c:	e0bff715 	stw	r2,-36(fp)
    switch (OSTCBCur->OSTCBStatPend) {                /* See if we timed-out or aborted                */
 4014320:	d0a73217 	ldw	r2,-25400(gp)
 4014324:	10800c43 	ldbu	r2,49(r2)
 4014328:	10803fcc 	andi	r2,r2,255
 401432c:	10000326 	beq	r2,zero,401433c <OSSemPend+0x184>
 4014330:	108000a0 	cmpeqi	r2,r2,2
 4014334:	1000041e 	bne	r2,zero,4014348 <OSSemPend+0x190>
 4014338:	00000706 	br	4014358 <OSSemPend+0x1a0>
        case OS_STAT_PEND_OK:
             *perr = OS_ERR_NONE;
 401433c:	e0bfff17 	ldw	r2,-4(fp)
 4014340:	10000005 	stb	zero,0(r2)
             break;
 4014344:	00000c06 	br	4014378 <OSSemPend+0x1c0>

        case OS_STAT_PEND_ABORT:
             *perr = OS_ERR_PEND_ABORT;               /* Indicate that we aborted                      */
 4014348:	e0bfff17 	ldw	r2,-4(fp)
 401434c:	00c00384 	movi	r3,14
 4014350:	10c00005 	stb	r3,0(r2)
             break;
 4014354:	00000806 	br	4014378 <OSSemPend+0x1c0>

        case OS_STAT_PEND_TO:
        default:        
             OS_EventTaskRemove(OSTCBCur, pevent);
 4014358:	d0a73217 	ldw	r2,-25400(gp)
 401435c:	e17ffd17 	ldw	r5,-12(fp)
 4014360:	1009883a 	mov	r4,r2
 4014364:	400f5040 	call	400f504 <OS_EventTaskRemove>
             *perr = OS_ERR_TIMEOUT;                  /* Indicate that we didn't get event within TO   */
 4014368:	e0bfff17 	ldw	r2,-4(fp)
 401436c:	00c00284 	movi	r3,10
 4014370:	10c00005 	stb	r3,0(r2)
             break;
 4014374:	0001883a 	nop
    }
    OSTCBCur->OSTCBStat          =  OS_STAT_RDY;      /* Set   task  status to ready                   */
 4014378:	d0a73217 	ldw	r2,-25400(gp)
 401437c:	10000c05 	stb	zero,48(r2)
    OSTCBCur->OSTCBStatPend      =  OS_STAT_PEND_OK;  /* Clear pend  status                            */
 4014380:	d0a73217 	ldw	r2,-25400(gp)
 4014384:	10000c45 	stb	zero,49(r2)
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
 4014388:	d0a73217 	ldw	r2,-25400(gp)
 401438c:	10000715 	stw	zero,28(r2)
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
 4014390:	d0a73217 	ldw	r2,-25400(gp)
 4014394:	10000815 	stw	zero,32(r2)
 4014398:	e0bff717 	ldw	r2,-36(fp)
 401439c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40143a0:	e0bffa17 	ldw	r2,-24(fp)
 40143a4:	1001703a 	wrctl	status,r2
 40143a8:	00000106 	br	40143b0 <OSSemPend+0x1f8>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
 40143ac:	0001883a 	nop
    OSTCBCur->OSTCBEventPtr      = (OS_EVENT  *)0;    /* Clear event pointers                          */
#if (OS_EVENT_MULTI_EN > 0)
    OSTCBCur->OSTCBEventMultiPtr = (OS_EVENT **)0;
#endif
    OS_EXIT_CRITICAL();
}
 40143b0:	e037883a 	mov	sp,fp
 40143b4:	dfc00117 	ldw	ra,4(sp)
 40143b8:	df000017 	ldw	fp,0(sp)
 40143bc:	dec00204 	addi	sp,sp,8
 40143c0:	f800283a 	ret

040143c4 <OSSemPendAbort>:
*********************************************************************************************************
*/

#if OS_SEM_PEND_ABORT_EN > 0
INT8U  OSSemPendAbort (OS_EVENT *pevent, INT8U opt, INT8U *perr)
{
 40143c4:	defff604 	addi	sp,sp,-40
 40143c8:	dfc00915 	stw	ra,36(sp)
 40143cc:	df000815 	stw	fp,32(sp)
 40143d0:	df000804 	addi	fp,sp,32
 40143d4:	e13ffd15 	stw	r4,-12(fp)
 40143d8:	2805883a 	mov	r2,r5
 40143dc:	e1bfff15 	stw	r6,-4(fp)
 40143e0:	e0bffe05 	stb	r2,-8(fp)
    INT8U      nbr_tasks;
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 40143e4:	e03ff915 	stw	zero,-28(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 40143e8:	e0bfff17 	ldw	r2,-4(fp)
 40143ec:	1000021e 	bne	r2,zero,40143f8 <OSSemPendAbort+0x34>
        return (0);
 40143f0:	0005883a 	mov	r2,zero
 40143f4:	00004906 	br	401451c <OSSemPendAbort+0x158>
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 40143f8:	e0bffd17 	ldw	r2,-12(fp)
 40143fc:	1000051e 	bne	r2,zero,4014414 <OSSemPendAbort+0x50>
        *perr = OS_ERR_PEVENT_NULL;
 4014400:	e0bfff17 	ldw	r2,-4(fp)
 4014404:	00c00104 	movi	r3,4
 4014408:	10c00005 	stb	r3,0(r2)
        return (0);
 401440c:	0005883a 	mov	r2,zero
 4014410:	00004206 	br	401451c <OSSemPendAbort+0x158>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 4014414:	e0bffd17 	ldw	r2,-12(fp)
 4014418:	10800003 	ldbu	r2,0(r2)
 401441c:	10803fcc 	andi	r2,r2,255
 4014420:	108000e0 	cmpeqi	r2,r2,3
 4014424:	1000051e 	bne	r2,zero,401443c <OSSemPendAbort+0x78>
        *perr = OS_ERR_EVENT_TYPE;
 4014428:	e0bfff17 	ldw	r2,-4(fp)
 401442c:	00c00044 	movi	r3,1
 4014430:	10c00005 	stb	r3,0(r2)
        return (0);
 4014434:	0005883a 	mov	r2,zero
 4014438:	00003806 	br	401451c <OSSemPendAbort+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401443c:	0005303a 	rdctl	r2,status
 4014440:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4014444:	e0fffc17 	ldw	r3,-16(fp)
 4014448:	00bfff84 	movi	r2,-2
 401444c:	1884703a 	and	r2,r3,r2
 4014450:	1001703a 	wrctl	status,r2
  
  return context;
 4014454:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 4014458:	e0bff915 	stw	r2,-28(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
 401445c:	e0bffd17 	ldw	r2,-12(fp)
 4014460:	10800283 	ldbu	r2,10(r2)
 4014464:	10803fcc 	andi	r2,r2,255
 4014468:	10002526 	beq	r2,zero,4014500 <OSSemPendAbort+0x13c>
        nbr_tasks = 0;
 401446c:	e03ff805 	stb	zero,-32(fp)
        switch (opt) {
 4014470:	e0bffe03 	ldbu	r2,-8(fp)
 4014474:	10800060 	cmpeqi	r2,r2,1
 4014478:	10000e26 	beq	r2,zero,40144b4 <OSSemPendAbort+0xf0>
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
 401447c:	00000806 	br	40144a0 <OSSemPendAbort+0xdc>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 4014480:	01c00084 	movi	r7,2
 4014484:	01800044 	movi	r6,1
 4014488:	000b883a 	mov	r5,zero
 401448c:	e13ffd17 	ldw	r4,-12(fp)
 4014490:	400f10c0 	call	400f10c <OS_EventTaskRdy>
                     nbr_tasks++;
 4014494:	e0bff803 	ldbu	r2,-32(fp)
 4014498:	10800044 	addi	r2,r2,1
 401449c:	e0bff805 	stb	r2,-32(fp)
    OS_ENTER_CRITICAL();
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting on semaphore?         */
        nbr_tasks = 0;
        switch (opt) {
            case OS_PEND_OPT_BROADCAST:               /* Do we need to abort ALL waiting tasks?        */
                 while (pevent->OSEventGrp != 0) {    /* Yes, ready ALL tasks waiting on semaphore     */
 40144a0:	e0bffd17 	ldw	r2,-12(fp)
 40144a4:	10800283 	ldbu	r2,10(r2)
 40144a8:	10803fcc 	andi	r2,r2,255
 40144ac:	103ff41e 	bne	r2,zero,4014480 <__alt_mem_onchip_memory2_0+0xfbff4480>
                     (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
                     nbr_tasks++;
                 }
                 break;
 40144b0:	00000906 	br	40144d8 <OSSemPendAbort+0x114>
                 
            case OS_PEND_OPT_NONE:
            default:                                  /* No,  ready HPT       waiting on semaphore     */
                 (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_ABORT);
 40144b4:	01c00084 	movi	r7,2
 40144b8:	01800044 	movi	r6,1
 40144bc:	000b883a 	mov	r5,zero
 40144c0:	e13ffd17 	ldw	r4,-12(fp)
 40144c4:	400f10c0 	call	400f10c <OS_EventTaskRdy>
                 nbr_tasks++;
 40144c8:	e0bff803 	ldbu	r2,-32(fp)
 40144cc:	10800044 	addi	r2,r2,1
 40144d0:	e0bff805 	stb	r2,-32(fp)
                 break;
 40144d4:	0001883a 	nop
 40144d8:	e0bff917 	ldw	r2,-28(fp)
 40144dc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40144e0:	e0bffa17 	ldw	r2,-24(fp)
 40144e4:	1001703a 	wrctl	status,r2
        }
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 40144e8:	400fb580 	call	400fb58 <OS_Sched>
        *perr = OS_ERR_PEND_ABORT;
 40144ec:	e0bfff17 	ldw	r2,-4(fp)
 40144f0:	00c00384 	movi	r3,14
 40144f4:	10c00005 	stb	r3,0(r2)
        return (nbr_tasks);
 40144f8:	e0bff803 	ldbu	r2,-32(fp)
 40144fc:	00000706 	br	401451c <OSSemPendAbort+0x158>
 4014500:	e0bff917 	ldw	r2,-28(fp)
 4014504:	e0bffb15 	stw	r2,-20(fp)
 4014508:	e0bffb17 	ldw	r2,-20(fp)
 401450c:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 4014510:	e0bfff17 	ldw	r2,-4(fp)
 4014514:	10000005 	stb	zero,0(r2)
    return (0);                                       /* No tasks waiting on semaphore                 */
 4014518:	0005883a 	mov	r2,zero
}
 401451c:	e037883a 	mov	sp,fp
 4014520:	dfc00117 	ldw	ra,4(sp)
 4014524:	df000017 	ldw	fp,0(sp)
 4014528:	dec00204 	addi	sp,sp,8
 401452c:	f800283a 	ret

04014530 <OSSemPost>:
*              OS_ERR_PEVENT_NULL  If 'pevent' is a NULL pointer.
*********************************************************************************************************
*/

INT8U  OSSemPost (OS_EVENT *pevent)
{
 4014530:	defff804 	addi	sp,sp,-32
 4014534:	dfc00715 	stw	ra,28(sp)
 4014538:	df000615 	stw	fp,24(sp)
 401453c:	df000604 	addi	fp,sp,24
 4014540:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 4014544:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 4014548:	e0bfff17 	ldw	r2,-4(fp)
 401454c:	1000021e 	bne	r2,zero,4014558 <OSSemPost+0x28>
        return (OS_ERR_PEVENT_NULL);
 4014550:	00800104 	movi	r2,4
 4014554:	00003506 	br	401462c <OSSemPost+0xfc>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 4014558:	e0bfff17 	ldw	r2,-4(fp)
 401455c:	10800003 	ldbu	r2,0(r2)
 4014560:	10803fcc 	andi	r2,r2,255
 4014564:	108000e0 	cmpeqi	r2,r2,3
 4014568:	1000021e 	bne	r2,zero,4014574 <OSSemPost+0x44>
        return (OS_ERR_EVENT_TYPE);
 401456c:	00800044 	movi	r2,1
 4014570:	00002e06 	br	401462c <OSSemPost+0xfc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4014574:	0005303a 	rdctl	r2,status
 4014578:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401457c:	e0fffe17 	ldw	r3,-8(fp)
 4014580:	00bfff84 	movi	r2,-2
 4014584:	1884703a 	and	r2,r3,r2
 4014588:	1001703a 	wrctl	status,r2
  
  return context;
 401458c:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 4014590:	e0bffa15 	stw	r2,-24(fp)
    if (pevent->OSEventGrp != 0) {                    /* See if any task waiting for semaphore         */
 4014594:	e0bfff17 	ldw	r2,-4(fp)
 4014598:	10800283 	ldbu	r2,10(r2)
 401459c:	10803fcc 	andi	r2,r2,255
 40145a0:	10000c26 	beq	r2,zero,40145d4 <OSSemPost+0xa4>
                                                      /* Ready HPT waiting on event                    */
        (void)OS_EventTaskRdy(pevent, (void *)0, OS_STAT_SEM, OS_STAT_PEND_OK);
 40145a4:	000f883a 	mov	r7,zero
 40145a8:	01800044 	movi	r6,1
 40145ac:	000b883a 	mov	r5,zero
 40145b0:	e13fff17 	ldw	r4,-4(fp)
 40145b4:	400f10c0 	call	400f10c <OS_EventTaskRdy>
 40145b8:	e0bffa17 	ldw	r2,-24(fp)
 40145bc:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40145c0:	e0bffb17 	ldw	r2,-20(fp)
 40145c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                   /* Find HPT ready to run                         */
 40145c8:	400fb580 	call	400fb58 <OS_Sched>
        return (OS_ERR_NONE);
 40145cc:	0005883a 	mov	r2,zero
 40145d0:	00001606 	br	401462c <OSSemPost+0xfc>
    }
    if (pevent->OSEventCnt < 65535u) {                /* Make sure semaphore will not overflow         */
 40145d4:	e0bfff17 	ldw	r2,-4(fp)
 40145d8:	1080020b 	ldhu	r2,8(r2)
 40145dc:	10ffffcc 	andi	r3,r2,65535
 40145e0:	00bfffd4 	movui	r2,65535
 40145e4:	18800c26 	beq	r3,r2,4014618 <OSSemPost+0xe8>
        pevent->OSEventCnt++;                         /* Increment semaphore count to register event   */
 40145e8:	e0bfff17 	ldw	r2,-4(fp)
 40145ec:	1080020b 	ldhu	r2,8(r2)
 40145f0:	10800044 	addi	r2,r2,1
 40145f4:	1007883a 	mov	r3,r2
 40145f8:	e0bfff17 	ldw	r2,-4(fp)
 40145fc:	10c0020d 	sth	r3,8(r2)
 4014600:	e0bffa17 	ldw	r2,-24(fp)
 4014604:	e0bffc15 	stw	r2,-16(fp)
 4014608:	e0bffc17 	ldw	r2,-16(fp)
 401460c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_NONE);
 4014610:	0005883a 	mov	r2,zero
 4014614:	00000506 	br	401462c <OSSemPost+0xfc>
 4014618:	e0bffa17 	ldw	r2,-24(fp)
 401461c:	e0bffd15 	stw	r2,-12(fp)
 4014620:	e0bffd17 	ldw	r2,-12(fp)
 4014624:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                               /* Semaphore value has reached its maximum       */
    return (OS_ERR_SEM_OVF);
 4014628:	00800c84 	movi	r2,50
}
 401462c:	e037883a 	mov	sp,fp
 4014630:	dfc00117 	ldw	ra,4(sp)
 4014634:	df000017 	ldw	fp,0(sp)
 4014638:	dec00204 	addi	sp,sp,8
 401463c:	f800283a 	ret

04014640 <OSSemQuery>:
*********************************************************************************************************
*/

#if OS_SEM_QUERY_EN > 0
INT8U  OSSemQuery (OS_EVENT *pevent, OS_SEM_DATA *p_sem_data)
{
 4014640:	defff704 	addi	sp,sp,-36
 4014644:	df000815 	stw	fp,32(sp)
 4014648:	df000804 	addi	fp,sp,32
 401464c:	e13ffe15 	stw	r4,-8(fp)
 4014650:	e17fff15 	stw	r5,-4(fp)
    INT16U    *psrc;
    INT16U    *pdest;
#endif
    INT8U      i;
#if OS_CRITICAL_METHOD == 3                                /* Allocate storage for CPU status register */
    OS_CPU_SR  cpu_sr = 0;
 4014654:	e03ffb15 	stw	zero,-20(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (pevent == (OS_EVENT *)0) {                         /* Validate 'pevent'                        */
 4014658:	e0bffe17 	ldw	r2,-8(fp)
 401465c:	1000021e 	bne	r2,zero,4014668 <OSSemQuery+0x28>
        return (OS_ERR_PEVENT_NULL);
 4014660:	00800104 	movi	r2,4
 4014664:	00003606 	br	4014740 <OSSemQuery+0x100>
    }
    if (p_sem_data == (OS_SEM_DATA *)0) {                  /* Validate 'p_sem_data'                    */
 4014668:	e0bfff17 	ldw	r2,-4(fp)
 401466c:	1000021e 	bne	r2,zero,4014678 <OSSemQuery+0x38>
        return (OS_ERR_PDATA_NULL);
 4014670:	00800244 	movi	r2,9
 4014674:	00003206 	br	4014740 <OSSemQuery+0x100>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {        /* Validate event block type                */
 4014678:	e0bffe17 	ldw	r2,-8(fp)
 401467c:	10800003 	ldbu	r2,0(r2)
 4014680:	10803fcc 	andi	r2,r2,255
 4014684:	108000e0 	cmpeqi	r2,r2,3
 4014688:	1000021e 	bne	r2,zero,4014694 <OSSemQuery+0x54>
        return (OS_ERR_EVENT_TYPE);
 401468c:	00800044 	movi	r2,1
 4014690:	00002b06 	br	4014740 <OSSemQuery+0x100>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4014694:	0005303a 	rdctl	r2,status
 4014698:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401469c:	e0fffd17 	ldw	r3,-12(fp)
 40146a0:	00bfff84 	movi	r2,-2
 40146a4:	1884703a 	and	r2,r3,r2
 40146a8:	1001703a 	wrctl	status,r2
  
  return context;
 40146ac:	e0bffd17 	ldw	r2,-12(fp)
    }
    OS_ENTER_CRITICAL();
 40146b0:	e0bffb15 	stw	r2,-20(fp)
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
 40146b4:	e0bffe17 	ldw	r2,-8(fp)
 40146b8:	10c00283 	ldbu	r3,10(r2)
 40146bc:	e0bfff17 	ldw	r2,-4(fp)
 40146c0:	10c00145 	stb	r3,5(r2)
    psrc                   = &pevent->OSEventTbl[0];
 40146c4:	e0bffe17 	ldw	r2,-8(fp)
 40146c8:	108002c4 	addi	r2,r2,11
 40146cc:	e0bff815 	stw	r2,-32(fp)
    pdest                  = &p_sem_data->OSEventTbl[0];
 40146d0:	e0bfff17 	ldw	r2,-4(fp)
 40146d4:	10800084 	addi	r2,r2,2
 40146d8:	e0bff915 	stw	r2,-28(fp)
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 40146dc:	e03ffa05 	stb	zero,-24(fp)
 40146e0:	00000b06 	br	4014710 <OSSemQuery+0xd0>
        *pdest++ = *psrc++;
 40146e4:	e0bff917 	ldw	r2,-28(fp)
 40146e8:	10c00044 	addi	r3,r2,1
 40146ec:	e0fff915 	stw	r3,-28(fp)
 40146f0:	e0fff817 	ldw	r3,-32(fp)
 40146f4:	19000044 	addi	r4,r3,1
 40146f8:	e13ff815 	stw	r4,-32(fp)
 40146fc:	18c00003 	ldbu	r3,0(r3)
 4014700:	10c00005 	stb	r3,0(r2)
    }
    OS_ENTER_CRITICAL();
    p_sem_data->OSEventGrp = pevent->OSEventGrp;           /* Copy message mailbox wait list           */
    psrc                   = &pevent->OSEventTbl[0];
    pdest                  = &p_sem_data->OSEventTbl[0];
    for (i = 0; i < OS_EVENT_TBL_SIZE; i++) {
 4014704:	e0bffa03 	ldbu	r2,-24(fp)
 4014708:	10800044 	addi	r2,r2,1
 401470c:	e0bffa05 	stb	r2,-24(fp)
 4014710:	e0bffa03 	ldbu	r2,-24(fp)
 4014714:	108000f0 	cmpltui	r2,r2,3
 4014718:	103ff21e 	bne	r2,zero,40146e4 <__alt_mem_onchip_memory2_0+0xfbff46e4>
        *pdest++ = *psrc++;
    }
    p_sem_data->OSCnt = pevent->OSEventCnt;                /* Get semaphore count                      */
 401471c:	e0bffe17 	ldw	r2,-8(fp)
 4014720:	10c0020b 	ldhu	r3,8(r2)
 4014724:	e0bfff17 	ldw	r2,-4(fp)
 4014728:	10c0000d 	sth	r3,0(r2)
 401472c:	e0bffb17 	ldw	r2,-20(fp)
 4014730:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4014734:	e0bffc17 	ldw	r2,-16(fp)
 4014738:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 401473c:	0005883a 	mov	r2,zero
}
 4014740:	e037883a 	mov	sp,fp
 4014744:	df000017 	ldw	fp,0(sp)
 4014748:	dec00104 	addi	sp,sp,4
 401474c:	f800283a 	ret

04014750 <OSSemSet>:
*********************************************************************************************************
*/

#if OS_SEM_SET_EN > 0
void  OSSemSet (OS_EVENT *pevent, INT16U cnt, INT8U *perr)
{
 4014750:	defff904 	addi	sp,sp,-28
 4014754:	df000615 	stw	fp,24(sp)
 4014758:	df000604 	addi	fp,sp,24
 401475c:	e13ffd15 	stw	r4,-12(fp)
 4014760:	2805883a 	mov	r2,r5
 4014764:	e1bfff15 	stw	r6,-4(fp)
 4014768:	e0bffe0d 	sth	r2,-8(fp)
#if OS_CRITICAL_METHOD == 3                           /* Allocate storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 401476c:	e03ffa15 	stw	zero,-24(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
 4014770:	e0bfff17 	ldw	r2,-4(fp)
 4014774:	10003126 	beq	r2,zero,401483c <OSSemSet+0xec>
        return;
    }
    if (pevent == (OS_EVENT *)0) {                    /* Validate 'pevent'                             */
 4014778:	e0bffd17 	ldw	r2,-12(fp)
 401477c:	1000041e 	bne	r2,zero,4014790 <OSSemSet+0x40>
        *perr = OS_ERR_PEVENT_NULL;
 4014780:	e0bfff17 	ldw	r2,-4(fp)
 4014784:	00c00104 	movi	r3,4
 4014788:	10c00005 	stb	r3,0(r2)
        return;
 401478c:	00002c06 	br	4014840 <OSSemSet+0xf0>
    }
#endif
    if (pevent->OSEventType != OS_EVENT_TYPE_SEM) {   /* Validate event block type                     */
 4014790:	e0bffd17 	ldw	r2,-12(fp)
 4014794:	10800003 	ldbu	r2,0(r2)
 4014798:	10803fcc 	andi	r2,r2,255
 401479c:	108000e0 	cmpeqi	r2,r2,3
 40147a0:	1000041e 	bne	r2,zero,40147b4 <OSSemSet+0x64>
        *perr = OS_ERR_EVENT_TYPE;
 40147a4:	e0bfff17 	ldw	r2,-4(fp)
 40147a8:	00c00044 	movi	r3,1
 40147ac:	10c00005 	stb	r3,0(r2)
        return;
 40147b0:	00002306 	br	4014840 <OSSemSet+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40147b4:	0005303a 	rdctl	r2,status
 40147b8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40147bc:	e0fffc17 	ldw	r3,-16(fp)
 40147c0:	00bfff84 	movi	r2,-2
 40147c4:	1884703a 	and	r2,r3,r2
 40147c8:	1001703a 	wrctl	status,r2
  
  return context;
 40147cc:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 40147d0:	e0bffa15 	stw	r2,-24(fp)
    *perr = OS_ERR_NONE;
 40147d4:	e0bfff17 	ldw	r2,-4(fp)
 40147d8:	10000005 	stb	zero,0(r2)
    if (pevent->OSEventCnt > 0) {                     /* See if semaphore already has a count          */
 40147dc:	e0bffd17 	ldw	r2,-12(fp)
 40147e0:	1080020b 	ldhu	r2,8(r2)
 40147e4:	10bfffcc 	andi	r2,r2,65535
 40147e8:	10000426 	beq	r2,zero,40147fc <OSSemSet+0xac>
        pevent->OSEventCnt = cnt;                     /* Yes, set it to the new value specified.       */
 40147ec:	e0bffd17 	ldw	r2,-12(fp)
 40147f0:	e0fffe0b 	ldhu	r3,-8(fp)
 40147f4:	10c0020d 	sth	r3,8(r2)
 40147f8:	00000b06 	br	4014828 <OSSemSet+0xd8>
    } else {                                          /* No                                            */
        if (pevent->OSEventGrp == 0) {                /*      See if task(s) waiting?                  */
 40147fc:	e0bffd17 	ldw	r2,-12(fp)
 4014800:	10800283 	ldbu	r2,10(r2)
 4014804:	10803fcc 	andi	r2,r2,255
 4014808:	1000041e 	bne	r2,zero,401481c <OSSemSet+0xcc>
            pevent->OSEventCnt = cnt;                 /*      No, OK to set the value                  */
 401480c:	e0bffd17 	ldw	r2,-12(fp)
 4014810:	e0fffe0b 	ldhu	r3,-8(fp)
 4014814:	10c0020d 	sth	r3,8(r2)
 4014818:	00000306 	br	4014828 <OSSemSet+0xd8>
        } else {
            *perr              = OS_ERR_TASK_WAITING;
 401481c:	e0bfff17 	ldw	r2,-4(fp)
 4014820:	00c01244 	movi	r3,73
 4014824:	10c00005 	stb	r3,0(r2)
 4014828:	e0bffa17 	ldw	r2,-24(fp)
 401482c:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4014830:	e0bffb17 	ldw	r2,-20(fp)
 4014834:	1001703a 	wrctl	status,r2
 4014838:	00000106 	br	4014840 <OSSemSet+0xf0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                         /* Validate 'perr'                               */
        return;
 401483c:	0001883a 	nop
        } else {
            *perr              = OS_ERR_TASK_WAITING;
        }
    }
    OS_EXIT_CRITICAL();
}
 4014840:	e037883a 	mov	sp,fp
 4014844:	df000017 	ldw	fp,0(sp)
 4014848:	dec00104 	addi	sp,sp,4
 401484c:	f800283a 	ret

04014850 <OSTaskChangePrio>:
*********************************************************************************************************
*/

#if OS_TASK_CHANGE_PRIO_EN > 0
INT8U  OSTaskChangePrio (INT8U oldprio, INT8U newprio)
{
 4014850:	defff104 	addi	sp,sp,-60
 4014854:	dfc00e15 	stw	ra,56(sp)
 4014858:	df000d15 	stw	fp,52(sp)
 401485c:	df000d04 	addi	fp,sp,52
 4014860:	2007883a 	mov	r3,r4
 4014864:	2805883a 	mov	r2,r5
 4014868:	e0fffe05 	stb	r3,-8(fp)
 401486c:	e0bfff05 	stb	r2,-4(fp)
    INT16U     bitx_new;
    INT16U     bity_old;
    INT16U     bitx_old;
#endif
#if OS_CRITICAL_METHOD == 3
    OS_CPU_SR  cpu_sr = 0;                                  /* Storage for CPU status register         */
 4014870:	e03ff515 	stw	zero,-44(fp)
#endif


/*$PAGE*/
#if OS_ARG_CHK_EN > 0
    if (oldprio >= OS_LOWEST_PRIO) {
 4014874:	e0bffe03 	ldbu	r2,-8(fp)
 4014878:	10800530 	cmpltui	r2,r2,20
 401487c:	1000051e 	bne	r2,zero,4014894 <OSTaskChangePrio+0x44>
        if (oldprio != OS_PRIO_SELF) {
 4014880:	e0bffe03 	ldbu	r2,-8(fp)
 4014884:	10803fe0 	cmpeqi	r2,r2,255
 4014888:	1000021e 	bne	r2,zero,4014894 <OSTaskChangePrio+0x44>
            return (OS_ERR_PRIO_INVALID);
 401488c:	00800a84 	movi	r2,42
 4014890:	00012606 	br	4014d2c <OSTaskChangePrio+0x4dc>
        }
    }
    if (newprio >= OS_LOWEST_PRIO) {
 4014894:	e0bfff03 	ldbu	r2,-4(fp)
 4014898:	10800530 	cmpltui	r2,r2,20
 401489c:	1000021e 	bne	r2,zero,40148a8 <OSTaskChangePrio+0x58>
        return (OS_ERR_PRIO_INVALID);
 40148a0:	00800a84 	movi	r2,42
 40148a4:	00012106 	br	4014d2c <OSTaskChangePrio+0x4dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40148a8:	0005303a 	rdctl	r2,status
 40148ac:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40148b0:	e0fffd17 	ldw	r3,-12(fp)
 40148b4:	00bfff84 	movi	r2,-2
 40148b8:	1884703a 	and	r2,r3,r2
 40148bc:	1001703a 	wrctl	status,r2
  
  return context;
 40148c0:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 40148c4:	e0bff515 	stw	r2,-44(fp)
    if (OSTCBPrioTbl[newprio] != (OS_TCB *)0) {             /* New priority must not already exist     */
 40148c8:	e0ffff03 	ldbu	r3,-4(fp)
 40148cc:	008100b4 	movhi	r2,1026
 40148d0:	109dc204 	addi	r2,r2,30472
 40148d4:	18c7883a 	add	r3,r3,r3
 40148d8:	18c7883a 	add	r3,r3,r3
 40148dc:	10c5883a 	add	r2,r2,r3
 40148e0:	10800017 	ldw	r2,0(r2)
 40148e4:	10000626 	beq	r2,zero,4014900 <OSTaskChangePrio+0xb0>
 40148e8:	e0bff517 	ldw	r2,-44(fp)
 40148ec:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40148f0:	e0bff617 	ldw	r2,-40(fp)
 40148f4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO_EXIST);
 40148f8:	00800a04 	movi	r2,40
 40148fc:	00010b06 	br	4014d2c <OSTaskChangePrio+0x4dc>
    }
    if (oldprio == OS_PRIO_SELF) {                          /* See if changing self                    */
 4014900:	e0bffe03 	ldbu	r2,-8(fp)
 4014904:	10803fd8 	cmpnei	r2,r2,255
 4014908:	1000031e 	bne	r2,zero,4014918 <OSTaskChangePrio+0xc8>
        oldprio = OSTCBCur->OSTCBPrio;                      /* Yes, get priority                       */
 401490c:	d0a73217 	ldw	r2,-25400(gp)
 4014910:	10800c83 	ldbu	r2,50(r2)
 4014914:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[oldprio];
 4014918:	e0fffe03 	ldbu	r3,-8(fp)
 401491c:	008100b4 	movhi	r2,1026
 4014920:	109dc204 	addi	r2,r2,30472
 4014924:	18c7883a 	add	r3,r3,r3
 4014928:	18c7883a 	add	r3,r3,r3
 401492c:	10c5883a 	add	r2,r2,r3
 4014930:	10800017 	ldw	r2,0(r2)
 4014934:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                              /* Does task to change exist?              */
 4014938:	e0bff817 	ldw	r2,-32(fp)
 401493c:	1000061e 	bne	r2,zero,4014958 <OSTaskChangePrio+0x108>
 4014940:	e0bff517 	ldw	r2,-44(fp)
 4014944:	e0bff715 	stw	r2,-36(fp)
 4014948:	e0bff717 	ldw	r2,-36(fp)
 401494c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_PRIO);
 4014950:	00800a44 	movi	r2,41
 4014954:	0000f506 	br	4014d2c <OSTaskChangePrio+0x4dc>
    }
    if (ptcb == OS_TCB_RESERVED) {                          /* Is task assigned to Mutex               */
 4014958:	e0bff817 	ldw	r2,-32(fp)
 401495c:	10800058 	cmpnei	r2,r2,1
 4014960:	1000061e 	bne	r2,zero,401497c <OSTaskChangePrio+0x12c>
 4014964:	e0bff517 	ldw	r2,-44(fp)
 4014968:	e0bff915 	stw	r2,-28(fp)
 401496c:	e0bff917 	ldw	r2,-28(fp)
 4014970:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                                 /* No, can't change its priority!          */
        return (OS_ERR_TASK_NOT_EXIST);
 4014974:	008010c4 	movi	r2,67
 4014978:	0000ec06 	br	4014d2c <OSTaskChangePrio+0x4dc>
    }
#if OS_LOWEST_PRIO <= 63
    y_new                 = (INT8U)(newprio >> 3);          /* Yes, compute new TCB fields             */
 401497c:	e0bfff03 	ldbu	r2,-4(fp)
 4014980:	1004d0fa 	srli	r2,r2,3
 4014984:	e0bffb05 	stb	r2,-20(fp)
    x_new                 = (INT8U)(newprio & 0x07);
 4014988:	e0bfff03 	ldbu	r2,-4(fp)
 401498c:	108001cc 	andi	r2,r2,7
 4014990:	e0bffb45 	stb	r2,-19(fp)
    bity_new              = (INT8U)(1 << y_new);
 4014994:	e0bffb03 	ldbu	r2,-20(fp)
 4014998:	00c00044 	movi	r3,1
 401499c:	1884983a 	sll	r2,r3,r2
 40149a0:	e0bffb85 	stb	r2,-18(fp)
    bitx_new              = (INT8U)(1 << x_new);
 40149a4:	e0bffb43 	ldbu	r2,-19(fp)
 40149a8:	00c00044 	movi	r3,1
 40149ac:	1884983a 	sll	r2,r3,r2
 40149b0:	e0bffbc5 	stb	r2,-17(fp)
    x_new                 = (INT8U)( newprio & 0x0F);
    bity_new              = (INT16U)(1 << y_new);
    bitx_new              = (INT16U)(1 << x_new);
#endif

    OSTCBPrioTbl[oldprio] = (OS_TCB *)0;                    /* Remove TCB from old priority            */
 40149b4:	e0fffe03 	ldbu	r3,-8(fp)
 40149b8:	008100b4 	movhi	r2,1026
 40149bc:	109dc204 	addi	r2,r2,30472
 40149c0:	18c7883a 	add	r3,r3,r3
 40149c4:	18c7883a 	add	r3,r3,r3
 40149c8:	10c5883a 	add	r2,r2,r3
 40149cc:	10000015 	stw	zero,0(r2)
    OSTCBPrioTbl[newprio] =  ptcb;                          /* Place pointer to TCB @ new priority     */
 40149d0:	e0ffff03 	ldbu	r3,-4(fp)
 40149d4:	008100b4 	movhi	r2,1026
 40149d8:	109dc204 	addi	r2,r2,30472
 40149dc:	18c7883a 	add	r3,r3,r3
 40149e0:	18c7883a 	add	r3,r3,r3
 40149e4:	10c5883a 	add	r2,r2,r3
 40149e8:	e0fff817 	ldw	r3,-32(fp)
 40149ec:	10c00015 	stw	r3,0(r2)
    y_old                 =  ptcb->OSTCBY;
 40149f0:	e0bff817 	ldw	r2,-32(fp)
 40149f4:	10800d03 	ldbu	r2,52(r2)
 40149f8:	e0bffc05 	stb	r2,-16(fp)
    bity_old              =  ptcb->OSTCBBitY;
 40149fc:	e0bff817 	ldw	r2,-32(fp)
 4014a00:	10800d83 	ldbu	r2,54(r2)
 4014a04:	e0bffc45 	stb	r2,-15(fp)
    bitx_old              =  ptcb->OSTCBBitX;
 4014a08:	e0bff817 	ldw	r2,-32(fp)
 4014a0c:	10800d43 	ldbu	r2,53(r2)
 4014a10:	e0bffc85 	stb	r2,-14(fp)
    if ((OSRdyTbl[y_old] &   bitx_old) != 0) {              /* If task is ready make it not            */
 4014a14:	e0fffc03 	ldbu	r3,-16(fp)
 4014a18:	d0a72f44 	addi	r2,gp,-25411
 4014a1c:	1885883a 	add	r2,r3,r2
 4014a20:	10c00003 	ldbu	r3,0(r2)
 4014a24:	e0bffc83 	ldbu	r2,-14(fp)
 4014a28:	1884703a 	and	r2,r3,r2
 4014a2c:	10803fcc 	andi	r2,r2,255
 4014a30:	10002826 	beq	r2,zero,4014ad4 <OSTaskChangePrio+0x284>
         OSRdyTbl[y_old] &= ~bitx_old;
 4014a34:	e0fffc03 	ldbu	r3,-16(fp)
 4014a38:	e13ffc03 	ldbu	r4,-16(fp)
 4014a3c:	d0a72f44 	addi	r2,gp,-25411
 4014a40:	2085883a 	add	r2,r4,r2
 4014a44:	10800003 	ldbu	r2,0(r2)
 4014a48:	1009883a 	mov	r4,r2
 4014a4c:	e0bffc83 	ldbu	r2,-14(fp)
 4014a50:	0084303a 	nor	r2,zero,r2
 4014a54:	2084703a 	and	r2,r4,r2
 4014a58:	1009883a 	mov	r4,r2
 4014a5c:	d0a72f44 	addi	r2,gp,-25411
 4014a60:	1885883a 	add	r2,r3,r2
 4014a64:	11000005 	stb	r4,0(r2)
         if (OSRdyTbl[y_old] == 0) {
 4014a68:	e0fffc03 	ldbu	r3,-16(fp)
 4014a6c:	d0a72f44 	addi	r2,gp,-25411
 4014a70:	1885883a 	add	r2,r3,r2
 4014a74:	10800003 	ldbu	r2,0(r2)
 4014a78:	10803fcc 	andi	r2,r2,255
 4014a7c:	1000061e 	bne	r2,zero,4014a98 <OSTaskChangePrio+0x248>
             OSRdyGrp &= ~bity_old;
 4014a80:	e0bffc43 	ldbu	r2,-15(fp)
 4014a84:	0084303a 	nor	r2,zero,r2
 4014a88:	1007883a 	mov	r3,r2
 4014a8c:	d0a72f03 	ldbu	r2,-25412(gp)
 4014a90:	1884703a 	and	r2,r3,r2
 4014a94:	d0a72f05 	stb	r2,-25412(gp)
         }
         OSRdyGrp        |= bity_new;                       /* Make new priority ready to run          */
 4014a98:	d0e72f03 	ldbu	r3,-25412(gp)
 4014a9c:	e0bffb83 	ldbu	r2,-18(fp)
 4014aa0:	1884b03a 	or	r2,r3,r2
 4014aa4:	d0a72f05 	stb	r2,-25412(gp)
         OSRdyTbl[y_new] |= bitx_new;
 4014aa8:	e0fffb03 	ldbu	r3,-20(fp)
 4014aac:	e13ffb03 	ldbu	r4,-20(fp)
 4014ab0:	d0a72f44 	addi	r2,gp,-25411
 4014ab4:	2085883a 	add	r2,r4,r2
 4014ab8:	11000003 	ldbu	r4,0(r2)
 4014abc:	e0bffbc3 	ldbu	r2,-17(fp)
 4014ac0:	2084b03a 	or	r2,r4,r2
 4014ac4:	1009883a 	mov	r4,r2
 4014ac8:	d0a72f44 	addi	r2,gp,-25411
 4014acc:	1885883a 	add	r2,r3,r2
 4014ad0:	11000005 	stb	r4,0(r2)
    }

#if (OS_EVENT_EN)
    pevent = ptcb->OSTCBEventPtr;
 4014ad4:	e0bff817 	ldw	r2,-32(fp)
 4014ad8:	10800717 	ldw	r2,28(r2)
 4014adc:	e0bff315 	stw	r2,-52(fp)
    if (pevent != (OS_EVENT *)0) {
 4014ae0:	e0bff317 	ldw	r2,-52(fp)
 4014ae4:	10003326 	beq	r2,zero,4014bb4 <OSTaskChangePrio+0x364>
        pevent->OSEventTbl[y_old] &= ~bitx_old;             /* Remove old task prio from wait list     */
 4014ae8:	e0bffc03 	ldbu	r2,-16(fp)
 4014aec:	e0fffc03 	ldbu	r3,-16(fp)
 4014af0:	e13ff317 	ldw	r4,-52(fp)
 4014af4:	20c7883a 	add	r3,r4,r3
 4014af8:	18c002c4 	addi	r3,r3,11
 4014afc:	18c00003 	ldbu	r3,0(r3)
 4014b00:	1809883a 	mov	r4,r3
 4014b04:	e0fffc83 	ldbu	r3,-14(fp)
 4014b08:	00c6303a 	nor	r3,zero,r3
 4014b0c:	20c6703a 	and	r3,r4,r3
 4014b10:	1809883a 	mov	r4,r3
 4014b14:	e0fff317 	ldw	r3,-52(fp)
 4014b18:	1885883a 	add	r2,r3,r2
 4014b1c:	108002c4 	addi	r2,r2,11
 4014b20:	11000005 	stb	r4,0(r2)
        if (pevent->OSEventTbl[y_old] == 0) {
 4014b24:	e0bffc03 	ldbu	r2,-16(fp)
 4014b28:	e0fff317 	ldw	r3,-52(fp)
 4014b2c:	1885883a 	add	r2,r3,r2
 4014b30:	108002c4 	addi	r2,r2,11
 4014b34:	10800003 	ldbu	r2,0(r2)
 4014b38:	10803fcc 	andi	r2,r2,255
 4014b3c:	1000091e 	bne	r2,zero,4014b64 <OSTaskChangePrio+0x314>
            pevent->OSEventGrp    &= ~bity_old;
 4014b40:	e0bff317 	ldw	r2,-52(fp)
 4014b44:	10800283 	ldbu	r2,10(r2)
 4014b48:	1007883a 	mov	r3,r2
 4014b4c:	e0bffc43 	ldbu	r2,-15(fp)
 4014b50:	0084303a 	nor	r2,zero,r2
 4014b54:	1884703a 	and	r2,r3,r2
 4014b58:	1007883a 	mov	r3,r2
 4014b5c:	e0bff317 	ldw	r2,-52(fp)
 4014b60:	10c00285 	stb	r3,10(r2)
        }
        pevent->OSEventGrp        |= bity_new;              /* Add    new task prio to   wait list     */
 4014b64:	e0bff317 	ldw	r2,-52(fp)
 4014b68:	10c00283 	ldbu	r3,10(r2)
 4014b6c:	e0bffb83 	ldbu	r2,-18(fp)
 4014b70:	1884b03a 	or	r2,r3,r2
 4014b74:	1007883a 	mov	r3,r2
 4014b78:	e0bff317 	ldw	r2,-52(fp)
 4014b7c:	10c00285 	stb	r3,10(r2)
        pevent->OSEventTbl[y_new] |= bitx_new;
 4014b80:	e0bffb03 	ldbu	r2,-20(fp)
 4014b84:	e0fffb03 	ldbu	r3,-20(fp)
 4014b88:	e13ff317 	ldw	r4,-52(fp)
 4014b8c:	20c7883a 	add	r3,r4,r3
 4014b90:	18c002c4 	addi	r3,r3,11
 4014b94:	19000003 	ldbu	r4,0(r3)
 4014b98:	e0fffbc3 	ldbu	r3,-17(fp)
 4014b9c:	20c6b03a 	or	r3,r4,r3
 4014ba0:	1809883a 	mov	r4,r3
 4014ba4:	e0fff317 	ldw	r3,-52(fp)
 4014ba8:	1885883a 	add	r2,r3,r2
 4014bac:	108002c4 	addi	r2,r2,11
 4014bb0:	11000005 	stb	r4,0(r2)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
 4014bb4:	e0bff817 	ldw	r2,-32(fp)
 4014bb8:	10800817 	ldw	r2,32(r2)
 4014bbc:	10004226 	beq	r2,zero,4014cc8 <OSTaskChangePrio+0x478>
        pevents =  ptcb->OSTCBEventMultiPtr;
 4014bc0:	e0bff817 	ldw	r2,-32(fp)
 4014bc4:	10800817 	ldw	r2,32(r2)
 4014bc8:	e0bff415 	stw	r2,-48(fp)
        pevent  = *pevents;
 4014bcc:	e0bff417 	ldw	r2,-48(fp)
 4014bd0:	10800017 	ldw	r2,0(r2)
 4014bd4:	e0bff315 	stw	r2,-52(fp)
        while (pevent != (OS_EVENT *)0) {
 4014bd8:	00003906 	br	4014cc0 <OSTaskChangePrio+0x470>
            pevent->OSEventTbl[y_old] &= ~bitx_old;         /* Remove old task prio from wait lists    */
 4014bdc:	e0bffc03 	ldbu	r2,-16(fp)
 4014be0:	e0fffc03 	ldbu	r3,-16(fp)
 4014be4:	e13ff317 	ldw	r4,-52(fp)
 4014be8:	20c7883a 	add	r3,r4,r3
 4014bec:	18c002c4 	addi	r3,r3,11
 4014bf0:	18c00003 	ldbu	r3,0(r3)
 4014bf4:	1809883a 	mov	r4,r3
 4014bf8:	e0fffc83 	ldbu	r3,-14(fp)
 4014bfc:	00c6303a 	nor	r3,zero,r3
 4014c00:	20c6703a 	and	r3,r4,r3
 4014c04:	1809883a 	mov	r4,r3
 4014c08:	e0fff317 	ldw	r3,-52(fp)
 4014c0c:	1885883a 	add	r2,r3,r2
 4014c10:	108002c4 	addi	r2,r2,11
 4014c14:	11000005 	stb	r4,0(r2)
            if (pevent->OSEventTbl[y_old] == 0) {
 4014c18:	e0bffc03 	ldbu	r2,-16(fp)
 4014c1c:	e0fff317 	ldw	r3,-52(fp)
 4014c20:	1885883a 	add	r2,r3,r2
 4014c24:	108002c4 	addi	r2,r2,11
 4014c28:	10800003 	ldbu	r2,0(r2)
 4014c2c:	10803fcc 	andi	r2,r2,255
 4014c30:	1000091e 	bne	r2,zero,4014c58 <OSTaskChangePrio+0x408>
                pevent->OSEventGrp    &= ~bity_old;
 4014c34:	e0bff317 	ldw	r2,-52(fp)
 4014c38:	10800283 	ldbu	r2,10(r2)
 4014c3c:	1007883a 	mov	r3,r2
 4014c40:	e0bffc43 	ldbu	r2,-15(fp)
 4014c44:	0084303a 	nor	r2,zero,r2
 4014c48:	1884703a 	and	r2,r3,r2
 4014c4c:	1007883a 	mov	r3,r2
 4014c50:	e0bff317 	ldw	r2,-52(fp)
 4014c54:	10c00285 	stb	r3,10(r2)
            }
            pevent->OSEventGrp        |= bity_new;          /* Add    new task prio to   wait lists    */
 4014c58:	e0bff317 	ldw	r2,-52(fp)
 4014c5c:	10c00283 	ldbu	r3,10(r2)
 4014c60:	e0bffb83 	ldbu	r2,-18(fp)
 4014c64:	1884b03a 	or	r2,r3,r2
 4014c68:	1007883a 	mov	r3,r2
 4014c6c:	e0bff317 	ldw	r2,-52(fp)
 4014c70:	10c00285 	stb	r3,10(r2)
            pevent->OSEventTbl[y_new] |= bitx_new;
 4014c74:	e0bffb03 	ldbu	r2,-20(fp)
 4014c78:	e0fffb03 	ldbu	r3,-20(fp)
 4014c7c:	e13ff317 	ldw	r4,-52(fp)
 4014c80:	20c7883a 	add	r3,r4,r3
 4014c84:	18c002c4 	addi	r3,r3,11
 4014c88:	19000003 	ldbu	r4,0(r3)
 4014c8c:	e0fffbc3 	ldbu	r3,-17(fp)
 4014c90:	20c6b03a 	or	r3,r4,r3
 4014c94:	1809883a 	mov	r4,r3
 4014c98:	e0fff317 	ldw	r3,-52(fp)
 4014c9c:	1885883a 	add	r2,r3,r2
 4014ca0:	108002c4 	addi	r2,r2,11
 4014ca4:	11000005 	stb	r4,0(r2)
            pevents++;
 4014ca8:	e0bff417 	ldw	r2,-48(fp)
 4014cac:	10800104 	addi	r2,r2,4
 4014cb0:	e0bff415 	stw	r2,-48(fp)
            pevent                     = *pevents;
 4014cb4:	e0bff417 	ldw	r2,-48(fp)
 4014cb8:	10800017 	ldw	r2,0(r2)
 4014cbc:	e0bff315 	stw	r2,-52(fp)
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {
        pevents =  ptcb->OSTCBEventMultiPtr;
        pevent  = *pevents;
        while (pevent != (OS_EVENT *)0) {
 4014cc0:	e0bff317 	ldw	r2,-52(fp)
 4014cc4:	103fc51e 	bne	r2,zero,4014bdc <__alt_mem_onchip_memory2_0+0xfbff4bdc>
        }
    }
#endif
#endif

    ptcb->OSTCBPrio = newprio;                              /* Set new task priority                   */
 4014cc8:	e0bff817 	ldw	r2,-32(fp)
 4014ccc:	e0ffff03 	ldbu	r3,-4(fp)
 4014cd0:	10c00c85 	stb	r3,50(r2)
    ptcb->OSTCBY    = y_new;
 4014cd4:	e0bff817 	ldw	r2,-32(fp)
 4014cd8:	e0fffb03 	ldbu	r3,-20(fp)
 4014cdc:	10c00d05 	stb	r3,52(r2)
    ptcb->OSTCBX    = x_new;
 4014ce0:	e0bff817 	ldw	r2,-32(fp)
 4014ce4:	e0fffb43 	ldbu	r3,-19(fp)
 4014ce8:	10c00cc5 	stb	r3,51(r2)
    ptcb->OSTCBBitY = bity_new;
 4014cec:	e0bff817 	ldw	r2,-32(fp)
 4014cf0:	e0fffb83 	ldbu	r3,-18(fp)
 4014cf4:	10c00d85 	stb	r3,54(r2)
    ptcb->OSTCBBitX = bitx_new;
 4014cf8:	e0bff817 	ldw	r2,-32(fp)
 4014cfc:	e0fffbc3 	ldbu	r3,-17(fp)
 4014d00:	10c00d45 	stb	r3,53(r2)
 4014d04:	e0bff517 	ldw	r2,-44(fp)
 4014d08:	e0bffa15 	stw	r2,-24(fp)
 4014d0c:	e0bffa17 	ldw	r2,-24(fp)
 4014d10:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 4014d14:	d0a72343 	ldbu	r2,-25459(gp)
 4014d18:	10803fcc 	andi	r2,r2,255
 4014d1c:	10800058 	cmpnei	r2,r2,1
 4014d20:	1000011e 	bne	r2,zero,4014d28 <OSTaskChangePrio+0x4d8>
        OS_Sched();                                         /* Find new highest priority task          */
 4014d24:	400fb580 	call	400fb58 <OS_Sched>
    }
    return (OS_ERR_NONE);
 4014d28:	0005883a 	mov	r2,zero
}
 4014d2c:	e037883a 	mov	sp,fp
 4014d30:	dfc00117 	ldw	ra,4(sp)
 4014d34:	df000017 	ldw	fp,0(sp)
 4014d38:	dec00204 	addi	sp,sp,8
 4014d3c:	f800283a 	ret

04014d40 <OSTaskCreate>:
*********************************************************************************************************
*/

#if OS_TASK_CREATE_EN > 0
INT8U  OSTaskCreate (void (*task)(void *p_arg), void *p_arg, OS_STK *ptos, INT8U prio)
{
 4014d40:	deffee04 	addi	sp,sp,-72
 4014d44:	dfc01115 	stw	ra,68(sp)
 4014d48:	df001015 	stw	fp,64(sp)
 4014d4c:	df001004 	addi	fp,sp,64
 4014d50:	e13ffc15 	stw	r4,-16(fp)
 4014d54:	e17ffd15 	stw	r5,-12(fp)
 4014d58:	e1bffe15 	stw	r6,-8(fp)
 4014d5c:	3805883a 	mov	r2,r7
 4014d60:	e0bfff05 	stb	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 4014d64:	e03ff315 	stw	zero,-52(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 4014d68:	e0bfff03 	ldbu	r2,-4(fp)
 4014d6c:	10800570 	cmpltui	r2,r2,21
 4014d70:	1000021e 	bne	r2,zero,4014d7c <OSTaskCreate+0x3c>
        return (OS_ERR_PRIO_INVALID);
 4014d74:	00800a84 	movi	r2,42
 4014d78:	00005706 	br	4014ed8 <OSTaskCreate+0x198>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4014d7c:	0005303a 	rdctl	r2,status
 4014d80:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4014d84:	e0fffb17 	ldw	r3,-20(fp)
 4014d88:	00bfff84 	movi	r2,-2
 4014d8c:	1884703a 	and	r2,r3,r2
 4014d90:	1001703a 	wrctl	status,r2
  
  return context;
 4014d94:	e0bffb17 	ldw	r2,-20(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 4014d98:	e0bff315 	stw	r2,-52(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 4014d9c:	d0a73103 	ldbu	r2,-25404(gp)
 4014da0:	10803fcc 	andi	r2,r2,255
 4014da4:	10000626 	beq	r2,zero,4014dc0 <OSTaskCreate+0x80>
 4014da8:	e0bff317 	ldw	r2,-52(fp)
 4014dac:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4014db0:	e0bff417 	ldw	r2,-48(fp)
 4014db4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 4014db8:	00800f04 	movi	r2,60
 4014dbc:	00004606 	br	4014ed8 <OSTaskCreate+0x198>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 4014dc0:	e0ffff03 	ldbu	r3,-4(fp)
 4014dc4:	008100b4 	movhi	r2,1026
 4014dc8:	109dc204 	addi	r2,r2,30472
 4014dcc:	18c7883a 	add	r3,r3,r3
 4014dd0:	18c7883a 	add	r3,r3,r3
 4014dd4:	10c5883a 	add	r2,r2,r3
 4014dd8:	10800017 	ldw	r2,0(r2)
 4014ddc:	1000391e 	bne	r2,zero,4014ec4 <OSTaskCreate+0x184>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 4014de0:	e0ffff03 	ldbu	r3,-4(fp)
 4014de4:	008100b4 	movhi	r2,1026
 4014de8:	109dc204 	addi	r2,r2,30472
 4014dec:	18c7883a 	add	r3,r3,r3
 4014df0:	18c7883a 	add	r3,r3,r3
 4014df4:	10c5883a 	add	r2,r2,r3
 4014df8:	00c00044 	movi	r3,1
 4014dfc:	10c00015 	stw	r3,0(r2)
 4014e00:	e0bff317 	ldw	r2,-52(fp)
 4014e04:	e0bff515 	stw	r2,-44(fp)
 4014e08:	e0bff517 	ldw	r2,-44(fp)
 4014e0c:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();
        psp = OSTaskStkInit(task, p_arg, ptos, 0);              /* Initialize the task's stack         */
 4014e10:	000f883a 	mov	r7,zero
 4014e14:	e1bffe17 	ldw	r6,-8(fp)
 4014e18:	e17ffd17 	ldw	r5,-12(fp)
 4014e1c:	e13ffc17 	ldw	r4,-16(fp)
 4014e20:	4017da40 	call	4017da4 <OSTaskStkInit>
 4014e24:	e0bff715 	stw	r2,-36(fp)
        err = OS_TCBInit(prio, psp, (OS_STK *)0, 0, 0, (void *)0, 0);
 4014e28:	e0bfff03 	ldbu	r2,-4(fp)
 4014e2c:	d8000215 	stw	zero,8(sp)
 4014e30:	d8000115 	stw	zero,4(sp)
 4014e34:	d8000015 	stw	zero,0(sp)
 4014e38:	000f883a 	mov	r7,zero
 4014e3c:	000d883a 	mov	r6,zero
 4014e40:	e17ff717 	ldw	r5,-36(fp)
 4014e44:	1009883a 	mov	r4,r2
 4014e48:	400ff580 	call	400ff58 <OS_TCBInit>
 4014e4c:	e0bff805 	stb	r2,-32(fp)
        if (err == OS_ERR_NONE) {
 4014e50:	e0bff803 	ldbu	r2,-32(fp)
 4014e54:	1000061e 	bne	r2,zero,4014e70 <OSTaskCreate+0x130>
            if (OSRunning == OS_TRUE) {      /* Find highest priority task if multitasking has started */
 4014e58:	d0a72343 	ldbu	r2,-25459(gp)
 4014e5c:	10803fcc 	andi	r2,r2,255
 4014e60:	10800058 	cmpnei	r2,r2,1
 4014e64:	1000151e 	bne	r2,zero,4014ebc <OSTaskCreate+0x17c>
                OS_Sched();
 4014e68:	400fb580 	call	400fb58 <OS_Sched>
 4014e6c:	00001306 	br	4014ebc <OSTaskCreate+0x17c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4014e70:	0005303a 	rdctl	r2,status
 4014e74:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4014e78:	e0fffa17 	ldw	r3,-24(fp)
 4014e7c:	00bfff84 	movi	r2,-2
 4014e80:	1884703a 	and	r2,r3,r2
 4014e84:	1001703a 	wrctl	status,r2
  
  return context;
 4014e88:	e0bffa17 	ldw	r2,-24(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 4014e8c:	e0bff315 	stw	r2,-52(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;/* Make this priority available to others                 */
 4014e90:	e0ffff03 	ldbu	r3,-4(fp)
 4014e94:	008100b4 	movhi	r2,1026
 4014e98:	109dc204 	addi	r2,r2,30472
 4014e9c:	18c7883a 	add	r3,r3,r3
 4014ea0:	18c7883a 	add	r3,r3,r3
 4014ea4:	10c5883a 	add	r2,r2,r3
 4014ea8:	10000015 	stw	zero,0(r2)
 4014eac:	e0bff317 	ldw	r2,-52(fp)
 4014eb0:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4014eb4:	e0bff617 	ldw	r2,-40(fp)
 4014eb8:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 4014ebc:	e0bff803 	ldbu	r2,-32(fp)
 4014ec0:	00000506 	br	4014ed8 <OSTaskCreate+0x198>
 4014ec4:	e0bff317 	ldw	r2,-52(fp)
 4014ec8:	e0bff915 	stw	r2,-28(fp)
 4014ecc:	e0bff917 	ldw	r2,-28(fp)
 4014ed0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 4014ed4:	00800a04 	movi	r2,40
}
 4014ed8:	e037883a 	mov	sp,fp
 4014edc:	dfc00117 	ldw	ra,4(sp)
 4014ee0:	df000017 	ldw	fp,0(sp)
 4014ee4:	dec00204 	addi	sp,sp,8
 4014ee8:	f800283a 	ret

04014eec <OSTaskCreateExt>:
                        INT16U   id,
                        OS_STK  *pbos,
                        INT32U   stk_size,
                        void    *pext,
                        INT16U   opt)
{
 4014eec:	deffec04 	addi	sp,sp,-80
 4014ef0:	dfc01315 	stw	ra,76(sp)
 4014ef4:	df001215 	stw	fp,72(sp)
 4014ef8:	df001204 	addi	fp,sp,72
 4014efc:	e13ffa15 	stw	r4,-24(fp)
 4014f00:	e17ffb15 	stw	r5,-20(fp)
 4014f04:	e1bffc15 	stw	r6,-16(fp)
 4014f08:	3809883a 	mov	r4,r7
 4014f0c:	e0c00217 	ldw	r3,8(fp)
 4014f10:	e0800617 	ldw	r2,24(fp)
 4014f14:	e13ffd05 	stb	r4,-12(fp)
 4014f18:	e0fffe0d 	sth	r3,-8(fp)
 4014f1c:	e0bfff0d 	sth	r2,-4(fp)
    OS_STK    *psp;
    INT8U      err;
#if OS_CRITICAL_METHOD == 3                  /* Allocate storage for CPU status register               */
    OS_CPU_SR  cpu_sr = 0;
 4014f20:	e03ff115 	stw	zero,-60(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {             /* Make sure priority is within allowable range           */
 4014f24:	e0bffd03 	ldbu	r2,-12(fp)
 4014f28:	10800570 	cmpltui	r2,r2,21
 4014f2c:	1000021e 	bne	r2,zero,4014f38 <OSTaskCreateExt+0x4c>
        return (OS_ERR_PRIO_INVALID);
 4014f30:	00800a84 	movi	r2,42
 4014f34:	00006106 	br	40150bc <OSTaskCreateExt+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4014f38:	0005303a 	rdctl	r2,status
 4014f3c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4014f40:	e0fff917 	ldw	r3,-28(fp)
 4014f44:	00bfff84 	movi	r2,-2
 4014f48:	1884703a 	and	r2,r3,r2
 4014f4c:	1001703a 	wrctl	status,r2
  
  return context;
 4014f50:	e0bff917 	ldw	r2,-28(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 4014f54:	e0bff115 	stw	r2,-60(fp)
    if (OSIntNesting > 0) {                  /* Make sure we don't create the task from within an ISR  */
 4014f58:	d0a73103 	ldbu	r2,-25404(gp)
 4014f5c:	10803fcc 	andi	r2,r2,255
 4014f60:	10000626 	beq	r2,zero,4014f7c <OSTaskCreateExt+0x90>
 4014f64:	e0bff117 	ldw	r2,-60(fp)
 4014f68:	e0bff215 	stw	r2,-56(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4014f6c:	e0bff217 	ldw	r2,-56(fp)
 4014f70:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_CREATE_ISR);
 4014f74:	00800f04 	movi	r2,60
 4014f78:	00005006 	br	40150bc <OSTaskCreateExt+0x1d0>
    }
    if (OSTCBPrioTbl[prio] == (OS_TCB *)0) { /* Make sure task doesn't already exist at this priority  */
 4014f7c:	e0fffd03 	ldbu	r3,-12(fp)
 4014f80:	008100b4 	movhi	r2,1026
 4014f84:	109dc204 	addi	r2,r2,30472
 4014f88:	18c7883a 	add	r3,r3,r3
 4014f8c:	18c7883a 	add	r3,r3,r3
 4014f90:	10c5883a 	add	r2,r2,r3
 4014f94:	10800017 	ldw	r2,0(r2)
 4014f98:	1000431e 	bne	r2,zero,40150a8 <OSTaskCreateExt+0x1bc>
        OSTCBPrioTbl[prio] = OS_TCB_RESERVED;/* Reserve the priority to prevent others from doing ...  */
 4014f9c:	e0fffd03 	ldbu	r3,-12(fp)
 4014fa0:	008100b4 	movhi	r2,1026
 4014fa4:	109dc204 	addi	r2,r2,30472
 4014fa8:	18c7883a 	add	r3,r3,r3
 4014fac:	18c7883a 	add	r3,r3,r3
 4014fb0:	10c5883a 	add	r2,r2,r3
 4014fb4:	00c00044 	movi	r3,1
 4014fb8:	10c00015 	stw	r3,0(r2)
 4014fbc:	e0bff117 	ldw	r2,-60(fp)
 4014fc0:	e0bff315 	stw	r2,-52(fp)
 4014fc4:	e0bff317 	ldw	r2,-52(fp)
 4014fc8:	1001703a 	wrctl	status,r2
                                             /* ... the same thing until task is created.              */
        OS_EXIT_CRITICAL();

#if (OS_TASK_STAT_STK_CHK_EN > 0)
        OS_TaskStkClr(pbos, stk_size, opt);                    /* Clear the task stack (if needed)     */
 4014fcc:	e0bfff0b 	ldhu	r2,-4(fp)
 4014fd0:	100d883a 	mov	r6,r2
 4014fd4:	e1400417 	ldw	r5,16(fp)
 4014fd8:	e1000317 	ldw	r4,12(fp)
 4014fdc:	4015f4c0 	call	4015f4c <OS_TaskStkClr>
#endif

        psp = OSTaskStkInit(task, p_arg, ptos, opt);           /* Initialize the task's stack          */
 4014fe0:	e0bfff0b 	ldhu	r2,-4(fp)
 4014fe4:	100f883a 	mov	r7,r2
 4014fe8:	e1bffc17 	ldw	r6,-16(fp)
 4014fec:	e17ffb17 	ldw	r5,-20(fp)
 4014ff0:	e13ffa17 	ldw	r4,-24(fp)
 4014ff4:	4017da40 	call	4017da4 <OSTaskStkInit>
 4014ff8:	e0bff515 	stw	r2,-44(fp)
        err = OS_TCBInit(prio, psp, pbos, id, stk_size, pext, opt);
 4014ffc:	e0fffd03 	ldbu	r3,-12(fp)
 4015000:	e13ffe0b 	ldhu	r4,-8(fp)
 4015004:	e0bfff0b 	ldhu	r2,-4(fp)
 4015008:	d8800215 	stw	r2,8(sp)
 401500c:	e0800517 	ldw	r2,20(fp)
 4015010:	d8800115 	stw	r2,4(sp)
 4015014:	e0800417 	ldw	r2,16(fp)
 4015018:	d8800015 	stw	r2,0(sp)
 401501c:	200f883a 	mov	r7,r4
 4015020:	e1800317 	ldw	r6,12(fp)
 4015024:	e17ff517 	ldw	r5,-44(fp)
 4015028:	1809883a 	mov	r4,r3
 401502c:	400ff580 	call	400ff58 <OS_TCBInit>
 4015030:	e0bff605 	stb	r2,-40(fp)
        if (err == OS_ERR_NONE) {
 4015034:	e0bff603 	ldbu	r2,-40(fp)
 4015038:	1000061e 	bne	r2,zero,4015054 <OSTaskCreateExt+0x168>
            if (OSRunning == OS_TRUE) {                        /* Find HPT if multitasking has started */
 401503c:	d0a72343 	ldbu	r2,-25459(gp)
 4015040:	10803fcc 	andi	r2,r2,255
 4015044:	10800058 	cmpnei	r2,r2,1
 4015048:	1000151e 	bne	r2,zero,40150a0 <OSTaskCreateExt+0x1b4>
                OS_Sched();
 401504c:	400fb580 	call	400fb58 <OS_Sched>
 4015050:	00001306 	br	40150a0 <OSTaskCreateExt+0x1b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4015054:	0005303a 	rdctl	r2,status
 4015058:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401505c:	e0fff817 	ldw	r3,-32(fp)
 4015060:	00bfff84 	movi	r2,-2
 4015064:	1884703a 	and	r2,r3,r2
 4015068:	1001703a 	wrctl	status,r2
  
  return context;
 401506c:	e0bff817 	ldw	r2,-32(fp)
            }
        } else {
            OS_ENTER_CRITICAL();
 4015070:	e0bff115 	stw	r2,-60(fp)
            OSTCBPrioTbl[prio] = (OS_TCB *)0;                  /* Make this priority avail. to others  */
 4015074:	e0fffd03 	ldbu	r3,-12(fp)
 4015078:	008100b4 	movhi	r2,1026
 401507c:	109dc204 	addi	r2,r2,30472
 4015080:	18c7883a 	add	r3,r3,r3
 4015084:	18c7883a 	add	r3,r3,r3
 4015088:	10c5883a 	add	r2,r2,r3
 401508c:	10000015 	stw	zero,0(r2)
 4015090:	e0bff117 	ldw	r2,-60(fp)
 4015094:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4015098:	e0bff417 	ldw	r2,-48(fp)
 401509c:	1001703a 	wrctl	status,r2
            OS_EXIT_CRITICAL();
        }
        return (err);
 40150a0:	e0bff603 	ldbu	r2,-40(fp)
 40150a4:	00000506 	br	40150bc <OSTaskCreateExt+0x1d0>
 40150a8:	e0bff117 	ldw	r2,-60(fp)
 40150ac:	e0bff715 	stw	r2,-36(fp)
 40150b0:	e0bff717 	ldw	r2,-36(fp)
 40150b4:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_PRIO_EXIST);
 40150b8:	00800a04 	movi	r2,40
}
 40150bc:	e037883a 	mov	sp,fp
 40150c0:	dfc00117 	ldw	ra,4(sp)
 40150c4:	df000017 	ldw	fp,0(sp)
 40150c8:	dec00204 	addi	sp,sp,8
 40150cc:	f800283a 	ret

040150d0 <OSTaskDel>:
*********************************************************************************************************
*/

#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDel (INT8U prio)
{
 40150d0:	defff404 	addi	sp,sp,-48
 40150d4:	dfc00b15 	stw	ra,44(sp)
 40150d8:	df000a15 	stw	fp,40(sp)
 40150dc:	df000a04 	addi	fp,sp,40
 40150e0:	2005883a 	mov	r2,r4
 40150e4:	e0bfff05 	stb	r2,-4(fp)
#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    OS_FLAG_NODE *pnode;
#endif
    OS_TCB       *ptcb;
#if OS_CRITICAL_METHOD == 3                             /* Allocate storage for CPU status register    */
    OS_CPU_SR     cpu_sr = 0;
 40150e8:	e03ff615 	stw	zero,-40(fp)
#endif



    if (OSIntNesting > 0) {                             /* See if trying to delete from ISR            */
 40150ec:	d0a73103 	ldbu	r2,-25404(gp)
 40150f0:	10803fcc 	andi	r2,r2,255
 40150f4:	10000226 	beq	r2,zero,4015100 <OSTaskDel+0x30>
        return (OS_ERR_TASK_DEL_ISR);
 40150f8:	00801004 	movi	r2,64
 40150fc:	0000c006 	br	4015400 <OSTaskDel+0x330>
    }
    if (prio == OS_TASK_IDLE_PRIO) {                    /* Not allowed to delete idle task             */
 4015100:	e0bfff03 	ldbu	r2,-4(fp)
 4015104:	10800518 	cmpnei	r2,r2,20
 4015108:	1000021e 	bne	r2,zero,4015114 <OSTaskDel+0x44>
        return (OS_ERR_TASK_DEL_IDLE);
 401510c:	00800f84 	movi	r2,62
 4015110:	0000bb06 	br	4015400 <OSTaskDel+0x330>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                       /* Task priority valid ?                       */
 4015114:	e0bfff03 	ldbu	r2,-4(fp)
 4015118:	10800530 	cmpltui	r2,r2,20
 401511c:	1000051e 	bne	r2,zero,4015134 <OSTaskDel+0x64>
        if (prio != OS_PRIO_SELF) {
 4015120:	e0bfff03 	ldbu	r2,-4(fp)
 4015124:	10803fe0 	cmpeqi	r2,r2,255
 4015128:	1000021e 	bne	r2,zero,4015134 <OSTaskDel+0x64>
            return (OS_ERR_PRIO_INVALID);
 401512c:	00800a84 	movi	r2,42
 4015130:	0000b306 	br	4015400 <OSTaskDel+0x330>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4015134:	0005303a 	rdctl	r2,status
 4015138:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401513c:	e0fffe17 	ldw	r3,-8(fp)
 4015140:	00bfff84 	movi	r2,-2
 4015144:	1884703a 	and	r2,r3,r2
 4015148:	1001703a 	wrctl	status,r2
  
  return context;
 401514c:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif

/*$PAGE*/
    OS_ENTER_CRITICAL();
 4015150:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                         /* See if requesting to delete self            */
 4015154:	e0bfff03 	ldbu	r2,-4(fp)
 4015158:	10803fd8 	cmpnei	r2,r2,255
 401515c:	1000031e 	bne	r2,zero,401516c <OSTaskDel+0x9c>
        prio = OSTCBCur->OSTCBPrio;                     /* Set priority to delete to current           */
 4015160:	d0a73217 	ldw	r2,-25400(gp)
 4015164:	10800c83 	ldbu	r2,50(r2)
 4015168:	e0bfff05 	stb	r2,-4(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 401516c:	e0ffff03 	ldbu	r3,-4(fp)
 4015170:	008100b4 	movhi	r2,1026
 4015174:	109dc204 	addi	r2,r2,30472
 4015178:	18c7883a 	add	r3,r3,r3
 401517c:	18c7883a 	add	r3,r3,r3
 4015180:	10c5883a 	add	r2,r2,r3
 4015184:	10800017 	ldw	r2,0(r2)
 4015188:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                          /* Task to delete must exist                   */
 401518c:	e0bff817 	ldw	r2,-32(fp)
 4015190:	1000061e 	bne	r2,zero,40151ac <OSTaskDel+0xdc>
 4015194:	e0bff617 	ldw	r2,-40(fp)
 4015198:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401519c:	e0bff717 	ldw	r2,-36(fp)
 40151a0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 40151a4:	008010c4 	movi	r2,67
 40151a8:	00009506 	br	4015400 <OSTaskDel+0x330>
    }
    if (ptcb == OS_TCB_RESERVED) {                      /* Must not be assigned to Mutex               */
 40151ac:	e0bff817 	ldw	r2,-32(fp)
 40151b0:	10800058 	cmpnei	r2,r2,1
 40151b4:	1000061e 	bne	r2,zero,40151d0 <OSTaskDel+0x100>
 40151b8:	e0bff617 	ldw	r2,-40(fp)
 40151bc:	e0bff915 	stw	r2,-28(fp)
 40151c0:	e0bff917 	ldw	r2,-28(fp)
 40151c4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 40151c8:	00800f44 	movi	r2,61
 40151cc:	00008c06 	br	4015400 <OSTaskDel+0x330>
    }

    OSRdyTbl[ptcb->OSTCBY] &= ~ptcb->OSTCBBitX;
 40151d0:	e0bff817 	ldw	r2,-32(fp)
 40151d4:	10800d03 	ldbu	r2,52(r2)
 40151d8:	10c03fcc 	andi	r3,r2,255
 40151dc:	e0bff817 	ldw	r2,-32(fp)
 40151e0:	10800d03 	ldbu	r2,52(r2)
 40151e4:	11003fcc 	andi	r4,r2,255
 40151e8:	d0a72f44 	addi	r2,gp,-25411
 40151ec:	2085883a 	add	r2,r4,r2
 40151f0:	10800003 	ldbu	r2,0(r2)
 40151f4:	1009883a 	mov	r4,r2
 40151f8:	e0bff817 	ldw	r2,-32(fp)
 40151fc:	10800d43 	ldbu	r2,53(r2)
 4015200:	0084303a 	nor	r2,zero,r2
 4015204:	2084703a 	and	r2,r4,r2
 4015208:	1009883a 	mov	r4,r2
 401520c:	d0a72f44 	addi	r2,gp,-25411
 4015210:	1885883a 	add	r2,r3,r2
 4015214:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[ptcb->OSTCBY] == 0) {                  /* Make task not ready                         */
 4015218:	e0bff817 	ldw	r2,-32(fp)
 401521c:	10800d03 	ldbu	r2,52(r2)
 4015220:	10c03fcc 	andi	r3,r2,255
 4015224:	d0a72f44 	addi	r2,gp,-25411
 4015228:	1885883a 	add	r2,r3,r2
 401522c:	10800003 	ldbu	r2,0(r2)
 4015230:	10803fcc 	andi	r2,r2,255
 4015234:	1000071e 	bne	r2,zero,4015254 <OSTaskDel+0x184>
        OSRdyGrp           &= ~ptcb->OSTCBBitY;
 4015238:	e0bff817 	ldw	r2,-32(fp)
 401523c:	10800d83 	ldbu	r2,54(r2)
 4015240:	0084303a 	nor	r2,zero,r2
 4015244:	1007883a 	mov	r3,r2
 4015248:	d0a72f03 	ldbu	r2,-25412(gp)
 401524c:	1884703a 	and	r2,r3,r2
 4015250:	d0a72f05 	stb	r2,-25412(gp)
    }
    
#if (OS_EVENT_EN)
    if (ptcb->OSTCBEventPtr != (OS_EVENT *)0) {
 4015254:	e0bff817 	ldw	r2,-32(fp)
 4015258:	10800717 	ldw	r2,28(r2)
 401525c:	10000526 	beq	r2,zero,4015274 <OSTaskDel+0x1a4>
        OS_EventTaskRemove(ptcb, ptcb->OSTCBEventPtr);  /* Remove this task from any event   wait list */
 4015260:	e0bff817 	ldw	r2,-32(fp)
 4015264:	10800717 	ldw	r2,28(r2)
 4015268:	100b883a 	mov	r5,r2
 401526c:	e13ff817 	ldw	r4,-32(fp)
 4015270:	400f5040 	call	400f504 <OS_EventTaskRemove>
    }
#if (OS_EVENT_MULTI_EN > 0)
    if (ptcb->OSTCBEventMultiPtr != (OS_EVENT **)0) {   /* Remove this task from any events' wait lists*/
 4015274:	e0bff817 	ldw	r2,-32(fp)
 4015278:	10800817 	ldw	r2,32(r2)
 401527c:	10000526 	beq	r2,zero,4015294 <OSTaskDel+0x1c4>
        OS_EventTaskRemoveMulti(ptcb, ptcb->OSTCBEventMultiPtr);
 4015280:	e0bff817 	ldw	r2,-32(fp)
 4015284:	10800817 	ldw	r2,32(r2)
 4015288:	100b883a 	mov	r5,r2
 401528c:	e13ff817 	ldw	r4,-32(fp)
 4015290:	400f5bc0 	call	400f5bc <OS_EventTaskRemoveMulti>
    }
#endif
#endif

#if (OS_FLAG_EN > 0) && (OS_MAX_FLAGS > 0)
    pnode = ptcb->OSTCBFlagNode;
 4015294:	e0bff817 	ldw	r2,-32(fp)
 4015298:	10800a17 	ldw	r2,40(r2)
 401529c:	e0bffb15 	stw	r2,-20(fp)
    if (pnode != (OS_FLAG_NODE *)0) {                   /* If task is waiting on event flag            */
 40152a0:	e0bffb17 	ldw	r2,-20(fp)
 40152a4:	10000226 	beq	r2,zero,40152b0 <OSTaskDel+0x1e0>
        OS_FlagUnlink(pnode);                           /* Remove from wait list                       */
 40152a8:	e13ffb17 	ldw	r4,-20(fp)
 40152ac:	4011a2c0 	call	4011a2c <OS_FlagUnlink>
    }
#endif

    ptcb->OSTCBDly      = 0;                            /* Prevent OSTimeTick() from updating          */
 40152b0:	e0bff817 	ldw	r2,-32(fp)
 40152b4:	10000b8d 	sth	zero,46(r2)
    ptcb->OSTCBStat     = OS_STAT_RDY;                  /* Prevent task from being resumed             */
 40152b8:	e0bff817 	ldw	r2,-32(fp)
 40152bc:	10000c05 	stb	zero,48(r2)
    ptcb->OSTCBStatPend = OS_STAT_PEND_OK;
 40152c0:	e0bff817 	ldw	r2,-32(fp)
 40152c4:	10000c45 	stb	zero,49(r2)
    if (OSLockNesting < 255u) {                         /* Make sure we don't context switch           */
 40152c8:	d0a72303 	ldbu	r2,-25460(gp)
 40152cc:	10803fcc 	andi	r2,r2,255
 40152d0:	10803fe0 	cmpeqi	r2,r2,255
 40152d4:	1000031e 	bne	r2,zero,40152e4 <OSTaskDel+0x214>
        OSLockNesting++;
 40152d8:	d0a72303 	ldbu	r2,-25460(gp)
 40152dc:	10800044 	addi	r2,r2,1
 40152e0:	d0a72305 	stb	r2,-25460(gp)
 40152e4:	e0bff617 	ldw	r2,-40(fp)
 40152e8:	e0bffd15 	stw	r2,-12(fp)
 40152ec:	e0bffd17 	ldw	r2,-12(fp)
 40152f0:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();                                 /* Enabling INT. ignores next instruc.         */
    OS_Dummy();                                         /* ... Dummy ensures that INTs will be         */
 40152f4:	400f0ec0 	call	400f0ec <OS_Dummy>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40152f8:	0005303a 	rdctl	r2,status
 40152fc:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4015300:	e0fffa17 	ldw	r3,-24(fp)
 4015304:	00bfff84 	movi	r2,-2
 4015308:	1884703a 	and	r2,r3,r2
 401530c:	1001703a 	wrctl	status,r2
  
  return context;
 4015310:	e0bffa17 	ldw	r2,-24(fp)
    OS_ENTER_CRITICAL();                                /* ... disabled HERE!                          */
 4015314:	e0bff615 	stw	r2,-40(fp)
    if (OSLockNesting > 0) {                            /* Remove context switch lock                  */
 4015318:	d0a72303 	ldbu	r2,-25460(gp)
 401531c:	10803fcc 	andi	r2,r2,255
 4015320:	10000326 	beq	r2,zero,4015330 <OSTaskDel+0x260>
        OSLockNesting--;
 4015324:	d0a72303 	ldbu	r2,-25460(gp)
 4015328:	10bfffc4 	addi	r2,r2,-1
 401532c:	d0a72305 	stb	r2,-25460(gp)
    }
    OSTaskDelHook(ptcb);                                /* Call user defined hook                      */
 4015330:	e13ff817 	ldw	r4,-32(fp)
 4015334:	4017f240 	call	4017f24 <OSTaskDelHook>
    OSTaskCtr--;                                        /* One less task being managed                 */
 4015338:	d0a72b43 	ldbu	r2,-25427(gp)
 401533c:	10bfffc4 	addi	r2,r2,-1
 4015340:	d0a72b45 	stb	r2,-25427(gp)
    OSTCBPrioTbl[prio] = (OS_TCB *)0;                   /* Clear old priority entry                    */
 4015344:	e0ffff03 	ldbu	r3,-4(fp)
 4015348:	008100b4 	movhi	r2,1026
 401534c:	109dc204 	addi	r2,r2,30472
 4015350:	18c7883a 	add	r3,r3,r3
 4015354:	18c7883a 	add	r3,r3,r3
 4015358:	10c5883a 	add	r2,r2,r3
 401535c:	10000015 	stw	zero,0(r2)
    if (ptcb->OSTCBPrev == (OS_TCB *)0) {               /* Remove from TCB chain                       */
 4015360:	e0bff817 	ldw	r2,-32(fp)
 4015364:	10800617 	ldw	r2,24(r2)
 4015368:	1000071e 	bne	r2,zero,4015388 <OSTaskDel+0x2b8>
        ptcb->OSTCBNext->OSTCBPrev = (OS_TCB *)0;
 401536c:	e0bff817 	ldw	r2,-32(fp)
 4015370:	10800517 	ldw	r2,20(r2)
 4015374:	10000615 	stw	zero,24(r2)
        OSTCBList                  = ptcb->OSTCBNext;
 4015378:	e0bff817 	ldw	r2,-32(fp)
 401537c:	10800517 	ldw	r2,20(r2)
 4015380:	d0a72615 	stw	r2,-25448(gp)
 4015384:	00000a06 	br	40153b0 <OSTaskDel+0x2e0>
    } else {
        ptcb->OSTCBPrev->OSTCBNext = ptcb->OSTCBNext;
 4015388:	e0bff817 	ldw	r2,-32(fp)
 401538c:	10800617 	ldw	r2,24(r2)
 4015390:	e0fff817 	ldw	r3,-32(fp)
 4015394:	18c00517 	ldw	r3,20(r3)
 4015398:	10c00515 	stw	r3,20(r2)
        ptcb->OSTCBNext->OSTCBPrev = ptcb->OSTCBPrev;
 401539c:	e0bff817 	ldw	r2,-32(fp)
 40153a0:	10800517 	ldw	r2,20(r2)
 40153a4:	e0fff817 	ldw	r3,-32(fp)
 40153a8:	18c00617 	ldw	r3,24(r3)
 40153ac:	10c00615 	stw	r3,24(r2)
    }
    ptcb->OSTCBNext   = OSTCBFreeList;                  /* Return TCB to free TCB list                 */
 40153b0:	d0e72a17 	ldw	r3,-25432(gp)
 40153b4:	e0bff817 	ldw	r2,-32(fp)
 40153b8:	10c00515 	stw	r3,20(r2)
    OSTCBFreeList     = ptcb;
 40153bc:	e0bff817 	ldw	r2,-32(fp)
 40153c0:	d0a72a15 	stw	r2,-25432(gp)
#if OS_TASK_NAME_SIZE > 1
    ptcb->OSTCBTaskName[0] = '?';                       /* Unknown name                                */
 40153c4:	e0bff817 	ldw	r2,-32(fp)
 40153c8:	00c00fc4 	movi	r3,63
 40153cc:	10c01305 	stb	r3,76(r2)
    ptcb->OSTCBTaskName[1] = OS_ASCII_NUL;
 40153d0:	e0bff817 	ldw	r2,-32(fp)
 40153d4:	10001345 	stb	zero,77(r2)
 40153d8:	e0bff617 	ldw	r2,-40(fp)
 40153dc:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40153e0:	e0bffc17 	ldw	r2,-16(fp)
 40153e4:	1001703a 	wrctl	status,r2
#endif
    OS_EXIT_CRITICAL();
    if (OSRunning == OS_TRUE) {
 40153e8:	d0a72343 	ldbu	r2,-25459(gp)
 40153ec:	10803fcc 	andi	r2,r2,255
 40153f0:	10800058 	cmpnei	r2,r2,1
 40153f4:	1000011e 	bne	r2,zero,40153fc <OSTaskDel+0x32c>
        OS_Sched();                                     /* Find new highest priority task              */
 40153f8:	400fb580 	call	400fb58 <OS_Sched>
    }
    return (OS_ERR_NONE);
 40153fc:	0005883a 	mov	r2,zero
}
 4015400:	e037883a 	mov	sp,fp
 4015404:	dfc00117 	ldw	ra,4(sp)
 4015408:	df000017 	ldw	fp,0(sp)
 401540c:	dec00204 	addi	sp,sp,8
 4015410:	f800283a 	ret

04015414 <OSTaskDelReq>:
*********************************************************************************************************
*/
/*$PAGE*/
#if OS_TASK_DEL_EN > 0
INT8U  OSTaskDelReq (INT8U prio)
{
 4015414:	defff504 	addi	sp,sp,-44
 4015418:	df000a15 	stw	fp,40(sp)
 401541c:	df000a04 	addi	fp,sp,40
 4015420:	2005883a 	mov	r2,r4
 4015424:	e0bfff05 	stb	r2,-4(fp)
    INT8U      stat;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4015428:	e03ff615 	stw	zero,-40(fp)
#endif



    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to delete idle task     */
 401542c:	e0bfff03 	ldbu	r2,-4(fp)
 4015430:	10800518 	cmpnei	r2,r2,20
 4015434:	1000021e 	bne	r2,zero,4015440 <OSTaskDelReq+0x2c>
        return (OS_ERR_TASK_DEL_IDLE);
 4015438:	00800f84 	movi	r2,62
 401543c:	00004506 	br	4015554 <OSTaskDelReq+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 4015440:	e0bfff03 	ldbu	r2,-4(fp)
 4015444:	10800530 	cmpltui	r2,r2,20
 4015448:	1000051e 	bne	r2,zero,4015460 <OSTaskDelReq+0x4c>
        if (prio != OS_PRIO_SELF) {
 401544c:	e0bfff03 	ldbu	r2,-4(fp)
 4015450:	10803fe0 	cmpeqi	r2,r2,255
 4015454:	1000021e 	bne	r2,zero,4015460 <OSTaskDelReq+0x4c>
            return (OS_ERR_PRIO_INVALID);
 4015458:	00800a84 	movi	r2,42
 401545c:	00003d06 	br	4015554 <OSTaskDelReq+0x140>
        }
    }
#endif
    if (prio == OS_PRIO_SELF) {                                 /* See if a task is requesting to ...  */
 4015460:	e0bfff03 	ldbu	r2,-4(fp)
 4015464:	10803fd8 	cmpnei	r2,r2,255
 4015468:	1000111e 	bne	r2,zero,40154b0 <OSTaskDelReq+0x9c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401546c:	0005303a 	rdctl	r2,status
 4015470:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4015474:	e0fff917 	ldw	r3,-28(fp)
 4015478:	00bfff84 	movi	r2,-2
 401547c:	1884703a 	and	r2,r3,r2
 4015480:	1001703a 	wrctl	status,r2
  
  return context;
 4015484:	e0bff917 	ldw	r2,-28(fp)
        OS_ENTER_CRITICAL();                                    /* ... this task to delete itself      */
 4015488:	e0bff615 	stw	r2,-40(fp)
        stat = OSTCBCur->OSTCBDelReq;                           /* Return request status to caller     */
 401548c:	d0a73217 	ldw	r2,-25400(gp)
 4015490:	10800dc3 	ldbu	r2,55(r2)
 4015494:	e0bff805 	stb	r2,-32(fp)
 4015498:	e0bff617 	ldw	r2,-40(fp)
 401549c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40154a0:	e0bffe17 	ldw	r2,-8(fp)
 40154a4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (stat);
 40154a8:	e0bff803 	ldbu	r2,-32(fp)
 40154ac:	00002906 	br	4015554 <OSTaskDelReq+0x140>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40154b0:	0005303a 	rdctl	r2,status
 40154b4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40154b8:	e0fff717 	ldw	r3,-36(fp)
 40154bc:	00bfff84 	movi	r2,-2
 40154c0:	1884703a 	and	r2,r3,r2
 40154c4:	1001703a 	wrctl	status,r2
  
  return context;
 40154c8:	e0bff717 	ldw	r2,-36(fp)
    }
    OS_ENTER_CRITICAL();
 40154cc:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
 40154d0:	e0ffff03 	ldbu	r3,-4(fp)
 40154d4:	008100b4 	movhi	r2,1026
 40154d8:	109dc204 	addi	r2,r2,30472
 40154dc:	18c7883a 	add	r3,r3,r3
 40154e0:	18c7883a 	add	r3,r3,r3
 40154e4:	10c5883a 	add	r2,r2,r3
 40154e8:	10800017 	ldw	r2,0(r2)
 40154ec:	e0bffb15 	stw	r2,-20(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to delete must exist           */
 40154f0:	e0bffb17 	ldw	r2,-20(fp)
 40154f4:	1000061e 	bne	r2,zero,4015510 <OSTaskDelReq+0xfc>
 40154f8:	e0bff617 	ldw	r2,-40(fp)
 40154fc:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4015500:	e0bffa17 	ldw	r2,-24(fp)
 4015504:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                         /* Task must already be deleted        */
 4015508:	008010c4 	movi	r2,67
 401550c:	00001106 	br	4015554 <OSTaskDelReq+0x140>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* Must NOT be assigned to a Mutex     */
 4015510:	e0bffb17 	ldw	r2,-20(fp)
 4015514:	10800058 	cmpnei	r2,r2,1
 4015518:	1000061e 	bne	r2,zero,4015534 <OSTaskDelReq+0x120>
 401551c:	e0bff617 	ldw	r2,-40(fp)
 4015520:	e0bffc15 	stw	r2,-16(fp)
 4015524:	e0bffc17 	ldw	r2,-16(fp)
 4015528:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_DEL);
 401552c:	00800f44 	movi	r2,61
 4015530:	00000806 	br	4015554 <OSTaskDelReq+0x140>
    }
    ptcb->OSTCBDelReq = OS_ERR_TASK_DEL_REQ;                    /* Set flag indicating task to be DEL. */
 4015534:	e0bffb17 	ldw	r2,-20(fp)
 4015538:	00c00fc4 	movi	r3,63
 401553c:	10c00dc5 	stb	r3,55(r2)
 4015540:	e0bff617 	ldw	r2,-40(fp)
 4015544:	e0bffd15 	stw	r2,-12(fp)
 4015548:	e0bffd17 	ldw	r2,-12(fp)
 401554c:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 4015550:	0005883a 	mov	r2,zero
}
 4015554:	e037883a 	mov	sp,fp
 4015558:	df000017 	ldw	fp,0(sp)
 401555c:	dec00104 	addi	sp,sp,4
 4015560:	f800283a 	ret

04015564 <OSTaskNameGet>:
*********************************************************************************************************
*/

#if OS_TASK_NAME_SIZE > 1
INT8U  OSTaskNameGet (INT8U prio, INT8U *pname, INT8U *perr)
{
 4015564:	defff404 	addi	sp,sp,-48
 4015568:	dfc00b15 	stw	ra,44(sp)
 401556c:	df000a15 	stw	fp,40(sp)
 4015570:	df000a04 	addi	fp,sp,40
 4015574:	2005883a 	mov	r2,r4
 4015578:	e17ffe15 	stw	r5,-8(fp)
 401557c:	e1bfff15 	stw	r6,-4(fp)
 4015580:	e0bffd05 	stb	r2,-12(fp)
    OS_TCB    *ptcb;
    INT8U      len;
#if OS_CRITICAL_METHOD == 3                              /* Allocate storage for CPU status register   */
    OS_CPU_SR  cpu_sr = 0;
 4015584:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                            /* Validate 'perr'                            */
 4015588:	e0bfff17 	ldw	r2,-4(fp)
 401558c:	1000021e 	bne	r2,zero,4015598 <OSTaskNameGet+0x34>
        return (0);
 4015590:	0005883a 	mov	r2,zero
 4015594:	00005406 	br	40156e8 <OSTaskNameGet+0x184>
    }
    if (prio > OS_LOWEST_PRIO) {                         /* Task priority valid ?                      */
 4015598:	e0bffd03 	ldbu	r2,-12(fp)
 401559c:	10800570 	cmpltui	r2,r2,21
 40155a0:	1000081e 	bne	r2,zero,40155c4 <OSTaskNameGet+0x60>
        if (prio != OS_PRIO_SELF) {
 40155a4:	e0bffd03 	ldbu	r2,-12(fp)
 40155a8:	10803fe0 	cmpeqi	r2,r2,255
 40155ac:	1000051e 	bne	r2,zero,40155c4 <OSTaskNameGet+0x60>
            *perr = OS_ERR_PRIO_INVALID;                 /* No                                         */
 40155b0:	e0bfff17 	ldw	r2,-4(fp)
 40155b4:	00c00a84 	movi	r3,42
 40155b8:	10c00005 	stb	r3,0(r2)
            return (0);
 40155bc:	0005883a 	mov	r2,zero
 40155c0:	00004906 	br	40156e8 <OSTaskNameGet+0x184>
        }
    }
    if (pname == (INT8U *)0) {                           /* Is 'pname' a NULL pointer?                 */
 40155c4:	e0bffe17 	ldw	r2,-8(fp)
 40155c8:	1000051e 	bne	r2,zero,40155e0 <OSTaskNameGet+0x7c>
        *perr = OS_ERR_PNAME_NULL;                       /* Yes                                        */
 40155cc:	e0bfff17 	ldw	r2,-4(fp)
 40155d0:	00c00304 	movi	r3,12
 40155d4:	10c00005 	stb	r3,0(r2)
        return (0);
 40155d8:	0005883a 	mov	r2,zero
 40155dc:	00004206 	br	40156e8 <OSTaskNameGet+0x184>
    }
#endif
    if (OSIntNesting > 0) {                              /* See if trying to call from an ISR          */
 40155e0:	d0a73103 	ldbu	r2,-25404(gp)
 40155e4:	10803fcc 	andi	r2,r2,255
 40155e8:	10000526 	beq	r2,zero,4015600 <OSTaskNameGet+0x9c>
        *perr = OS_ERR_NAME_GET_ISR;
 40155ec:	e0bfff17 	ldw	r2,-4(fp)
 40155f0:	00c00444 	movi	r3,17
 40155f4:	10c00005 	stb	r3,0(r2)
        return (0);
 40155f8:	0005883a 	mov	r2,zero
 40155fc:	00003a06 	br	40156e8 <OSTaskNameGet+0x184>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4015600:	0005303a 	rdctl	r2,status
 4015604:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4015608:	e0fffc17 	ldw	r3,-16(fp)
 401560c:	00bfff84 	movi	r2,-2
 4015610:	1884703a 	and	r2,r3,r2
 4015614:	1001703a 	wrctl	status,r2
  
  return context;
 4015618:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 401561c:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                          /* See if caller desires it's own name        */
 4015620:	e0bffd03 	ldbu	r2,-12(fp)
 4015624:	10803fd8 	cmpnei	r2,r2,255
 4015628:	1000031e 	bne	r2,zero,4015638 <OSTaskNameGet+0xd4>
        prio = OSTCBCur->OSTCBPrio;
 401562c:	d0a73217 	ldw	r2,-25400(gp)
 4015630:	10800c83 	ldbu	r2,50(r2)
 4015634:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 4015638:	e0fffd03 	ldbu	r3,-12(fp)
 401563c:	008100b4 	movhi	r2,1026
 4015640:	109dc204 	addi	r2,r2,30472
 4015644:	18c7883a 	add	r3,r3,r3
 4015648:	18c7883a 	add	r3,r3,r3
 401564c:	10c5883a 	add	r2,r2,r3
 4015650:	10800017 	ldw	r2,0(r2)
 4015654:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                           /* Does task exist?                           */
 4015658:	e0bff817 	ldw	r2,-32(fp)
 401565c:	1000091e 	bne	r2,zero,4015684 <OSTaskNameGet+0x120>
 4015660:	e0bff617 	ldw	r2,-40(fp)
 4015664:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4015668:	e0bff717 	ldw	r2,-36(fp)
 401566c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* No                                         */
        *perr = OS_ERR_TASK_NOT_EXIST;
 4015670:	e0bfff17 	ldw	r2,-4(fp)
 4015674:	00c010c4 	movi	r3,67
 4015678:	10c00005 	stb	r3,0(r2)
        return (0);
 401567c:	0005883a 	mov	r2,zero
 4015680:	00001906 	br	40156e8 <OSTaskNameGet+0x184>
    }
    if (ptcb == OS_TCB_RESERVED) {                       /* Task assigned to a Mutex?                  */
 4015684:	e0bff817 	ldw	r2,-32(fp)
 4015688:	10800058 	cmpnei	r2,r2,1
 401568c:	1000091e 	bne	r2,zero,40156b4 <OSTaskNameGet+0x150>
 4015690:	e0bff617 	ldw	r2,-40(fp)
 4015694:	e0bff915 	stw	r2,-28(fp)
 4015698:	e0bff917 	ldw	r2,-28(fp)
 401569c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                              /* Yes                                        */
        *perr = OS_ERR_TASK_NOT_EXIST;
 40156a0:	e0bfff17 	ldw	r2,-4(fp)
 40156a4:	00c010c4 	movi	r3,67
 40156a8:	10c00005 	stb	r3,0(r2)
        return (0);
 40156ac:	0005883a 	mov	r2,zero
 40156b0:	00000d06 	br	40156e8 <OSTaskNameGet+0x184>
    }
    len   = OS_StrCopy(pname, ptcb->OSTCBTaskName);      /* Yes, copy name from TCB                    */
 40156b4:	e0bff817 	ldw	r2,-32(fp)
 40156b8:	10801304 	addi	r2,r2,76
 40156bc:	100b883a 	mov	r5,r2
 40156c0:	e13ffe17 	ldw	r4,-8(fp)
 40156c4:	400fc9c0 	call	400fc9c <OS_StrCopy>
 40156c8:	e0bffb05 	stb	r2,-20(fp)
 40156cc:	e0bff617 	ldw	r2,-40(fp)
 40156d0:	e0bffa15 	stw	r2,-24(fp)
 40156d4:	e0bffa17 	ldw	r2,-24(fp)
 40156d8:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 40156dc:	e0bfff17 	ldw	r2,-4(fp)
 40156e0:	10000005 	stb	zero,0(r2)
    return (len);
 40156e4:	e0bffb03 	ldbu	r2,-20(fp)
}
 40156e8:	e037883a 	mov	sp,fp
 40156ec:	dfc00117 	ldw	ra,4(sp)
 40156f0:	df000017 	ldw	fp,0(sp)
 40156f4:	dec00204 	addi	sp,sp,8
 40156f8:	f800283a 	ret

040156fc <OSTaskNameSet>:
* Returns    : None
*********************************************************************************************************
*/
#if OS_TASK_NAME_SIZE > 1
void  OSTaskNameSet (INT8U prio, INT8U *pname, INT8U *perr)
{
 40156fc:	defff304 	addi	sp,sp,-52
 4015700:	dfc00c15 	stw	ra,48(sp)
 4015704:	df000b15 	stw	fp,44(sp)
 4015708:	df000b04 	addi	fp,sp,44
 401570c:	2005883a 	mov	r2,r4
 4015710:	e17ffe15 	stw	r5,-8(fp)
 4015714:	e1bfff15 	stw	r6,-4(fp)
 4015718:	e0bffd05 	stb	r2,-12(fp)
    INT8U      len;
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                          /* Allocate storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 401571c:	e03ff515 	stw	zero,-44(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
 4015720:	e0bfff17 	ldw	r2,-4(fp)
 4015724:	10005c26 	beq	r2,zero,4015898 <OSTaskNameSet+0x19c>
        return;
    }
    if (prio > OS_LOWEST_PRIO) {                     /* Task priority valid ?                          */
 4015728:	e0bffd03 	ldbu	r2,-12(fp)
 401572c:	10800570 	cmpltui	r2,r2,21
 4015730:	1000071e 	bne	r2,zero,4015750 <OSTaskNameSet+0x54>
        if (prio != OS_PRIO_SELF) {
 4015734:	e0bffd03 	ldbu	r2,-12(fp)
 4015738:	10803fe0 	cmpeqi	r2,r2,255
 401573c:	1000041e 	bne	r2,zero,4015750 <OSTaskNameSet+0x54>
            *perr = OS_ERR_PRIO_INVALID;             /* No                                             */
 4015740:	e0bfff17 	ldw	r2,-4(fp)
 4015744:	00c00a84 	movi	r3,42
 4015748:	10c00005 	stb	r3,0(r2)
            return;
 401574c:	00005306 	br	401589c <OSTaskNameSet+0x1a0>
        }
    }
    if (pname == (INT8U *)0) {                       /* Is 'pname' a NULL pointer?                     */
 4015750:	e0bffe17 	ldw	r2,-8(fp)
 4015754:	1000041e 	bne	r2,zero,4015768 <OSTaskNameSet+0x6c>
        *perr = OS_ERR_PNAME_NULL;                   /* Yes                                            */
 4015758:	e0bfff17 	ldw	r2,-4(fp)
 401575c:	00c00304 	movi	r3,12
 4015760:	10c00005 	stb	r3,0(r2)
        return;
 4015764:	00004d06 	br	401589c <OSTaskNameSet+0x1a0>
    }
#endif
    if (OSIntNesting > 0) {                          /* See if trying to call from an ISR              */
 4015768:	d0a73103 	ldbu	r2,-25404(gp)
 401576c:	10803fcc 	andi	r2,r2,255
 4015770:	10000426 	beq	r2,zero,4015784 <OSTaskNameSet+0x88>
        *perr = OS_ERR_NAME_SET_ISR;
 4015774:	e0bfff17 	ldw	r2,-4(fp)
 4015778:	00c00484 	movi	r3,18
 401577c:	10c00005 	stb	r3,0(r2)
        return;
 4015780:	00004606 	br	401589c <OSTaskNameSet+0x1a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4015784:	0005303a 	rdctl	r2,status
 4015788:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401578c:	e0fffc17 	ldw	r3,-16(fp)
 4015790:	00bfff84 	movi	r2,-2
 4015794:	1884703a 	and	r2,r3,r2
 4015798:	1001703a 	wrctl	status,r2
  
  return context;
 401579c:	e0bffc17 	ldw	r2,-16(fp)
    }
    OS_ENTER_CRITICAL();
 40157a0:	e0bff515 	stw	r2,-44(fp)
    if (prio == OS_PRIO_SELF) {                      /* See if caller desires to set it's own name     */
 40157a4:	e0bffd03 	ldbu	r2,-12(fp)
 40157a8:	10803fd8 	cmpnei	r2,r2,255
 40157ac:	1000031e 	bne	r2,zero,40157bc <OSTaskNameSet+0xc0>
        prio = OSTCBCur->OSTCBPrio;
 40157b0:	d0a73217 	ldw	r2,-25400(gp)
 40157b4:	10800c83 	ldbu	r2,50(r2)
 40157b8:	e0bffd05 	stb	r2,-12(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 40157bc:	e0fffd03 	ldbu	r3,-12(fp)
 40157c0:	008100b4 	movhi	r2,1026
 40157c4:	109dc204 	addi	r2,r2,30472
 40157c8:	18c7883a 	add	r3,r3,r3
 40157cc:	18c7883a 	add	r3,r3,r3
 40157d0:	10c5883a 	add	r2,r2,r3
 40157d4:	10800017 	ldw	r2,0(r2)
 40157d8:	e0bff715 	stw	r2,-36(fp)
    if (ptcb == (OS_TCB *)0) {                       /* Does task exist?                               */
 40157dc:	e0bff717 	ldw	r2,-36(fp)
 40157e0:	1000081e 	bne	r2,zero,4015804 <OSTaskNameSet+0x108>
 40157e4:	e0bff517 	ldw	r2,-44(fp)
 40157e8:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40157ec:	e0bff617 	ldw	r2,-40(fp)
 40157f0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* No                                             */
        *perr = OS_ERR_TASK_NOT_EXIST;
 40157f4:	e0bfff17 	ldw	r2,-4(fp)
 40157f8:	00c010c4 	movi	r3,67
 40157fc:	10c00005 	stb	r3,0(r2)
        return;
 4015800:	00002606 	br	401589c <OSTaskNameSet+0x1a0>
    }
    if (ptcb == OS_TCB_RESERVED) {                   /* Task assigned to a Mutex?                      */
 4015804:	e0bff717 	ldw	r2,-36(fp)
 4015808:	10800058 	cmpnei	r2,r2,1
 401580c:	1000081e 	bne	r2,zero,4015830 <OSTaskNameSet+0x134>
 4015810:	e0bff517 	ldw	r2,-44(fp)
 4015814:	e0bff815 	stw	r2,-32(fp)
 4015818:	e0bff817 	ldw	r2,-32(fp)
 401581c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();                          /* Yes                                            */
        *perr = OS_ERR_TASK_NOT_EXIST;
 4015820:	e0bfff17 	ldw	r2,-4(fp)
 4015824:	00c010c4 	movi	r3,67
 4015828:	10c00005 	stb	r3,0(r2)
        return;
 401582c:	00001b06 	br	401589c <OSTaskNameSet+0x1a0>
    }
    len = OS_StrLen(pname);                          /* Yes, Can we fit the string in the TCB?         */
 4015830:	e13ffe17 	ldw	r4,-8(fp)
 4015834:	400fd100 	call	400fd10 <OS_StrLen>
 4015838:	e0bffa05 	stb	r2,-24(fp)
    if (len > (OS_TASK_NAME_SIZE - 1)) {             /*      No                                        */
 401583c:	e0bffa03 	ldbu	r2,-24(fp)
 4015840:	10800830 	cmpltui	r2,r2,32
 4015844:	1000081e 	bne	r2,zero,4015868 <OSTaskNameSet+0x16c>
 4015848:	e0bff517 	ldw	r2,-44(fp)
 401584c:	e0bff915 	stw	r2,-28(fp)
 4015850:	e0bff917 	ldw	r2,-28(fp)
 4015854:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        *perr = OS_ERR_TASK_NAME_TOO_LONG;
 4015858:	e0bfff17 	ldw	r2,-4(fp)
 401585c:	00c01044 	movi	r3,65
 4015860:	10c00005 	stb	r3,0(r2)
        return;
 4015864:	00000d06 	br	401589c <OSTaskNameSet+0x1a0>
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
 4015868:	e0bff717 	ldw	r2,-36(fp)
 401586c:	10801304 	addi	r2,r2,76
 4015870:	e17ffe17 	ldw	r5,-8(fp)
 4015874:	1009883a 	mov	r4,r2
 4015878:	400fc9c0 	call	400fc9c <OS_StrCopy>
 401587c:	e0bff517 	ldw	r2,-44(fp)
 4015880:	e0bffb15 	stw	r2,-20(fp)
 4015884:	e0bffb17 	ldw	r2,-20(fp)
 4015888:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
 401588c:	e0bfff17 	ldw	r2,-4(fp)
 4015890:	10000005 	stb	zero,0(r2)
 4015894:	00000106 	br	401589c <OSTaskNameSet+0x1a0>



#if OS_ARG_CHK_EN > 0
    if (perr == (INT8U *)0) {                        /* Validate 'perr'                                */
        return;
 4015898:	0001883a 	nop
        return;
    }
    (void)OS_StrCopy(ptcb->OSTCBTaskName, pname);    /*      Yes, copy to TCB                          */
    OS_EXIT_CRITICAL();
    *perr = OS_ERR_NONE;
}
 401589c:	e037883a 	mov	sp,fp
 40158a0:	dfc00117 	ldw	ra,4(sp)
 40158a4:	df000017 	ldw	fp,0(sp)
 40158a8:	dec00204 	addi	sp,sp,8
 40158ac:	f800283a 	ret

040158b0 <OSTaskResume>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskResume (INT8U prio)
{
 40158b0:	defff404 	addi	sp,sp,-48
 40158b4:	dfc00b15 	stw	ra,44(sp)
 40158b8:	df000a15 	stw	fp,40(sp)
 40158bc:	df000a04 	addi	fp,sp,40
 40158c0:	2005883a 	mov	r2,r4
 40158c4:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                   /* Storage for CPU status register       */
    OS_CPU_SR  cpu_sr = 0;
 40158c8:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio >= OS_LOWEST_PRIO) {                             /* Make sure task priority is valid      */
 40158cc:	e0bfff03 	ldbu	r2,-4(fp)
 40158d0:	10800530 	cmpltui	r2,r2,20
 40158d4:	1000021e 	bne	r2,zero,40158e0 <OSTaskResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 40158d8:	00800a84 	movi	r2,42
 40158dc:	00006406 	br	4015a70 <OSTaskResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40158e0:	0005303a 	rdctl	r2,status
 40158e4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40158e8:	e0fffe17 	ldw	r3,-8(fp)
 40158ec:	00bfff84 	movi	r2,-2
 40158f0:	1884703a 	and	r2,r3,r2
 40158f4:	1001703a 	wrctl	status,r2
  
  return context;
 40158f8:	e0bffe17 	ldw	r2,-8(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 40158fc:	e0bff615 	stw	r2,-40(fp)
    ptcb = OSTCBPrioTbl[prio];
 4015900:	e0ffff03 	ldbu	r3,-4(fp)
 4015904:	008100b4 	movhi	r2,1026
 4015908:	109dc204 	addi	r2,r2,30472
 401590c:	18c7883a 	add	r3,r3,r3
 4015910:	18c7883a 	add	r3,r3,r3
 4015914:	10c5883a 	add	r2,r2,r3
 4015918:	10800017 	ldw	r2,0(r2)
 401591c:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                                /* Task to suspend must exist            */
 4015920:	e0bff817 	ldw	r2,-32(fp)
 4015924:	1000061e 	bne	r2,zero,4015940 <OSTaskResume+0x90>
 4015928:	e0bff617 	ldw	r2,-40(fp)
 401592c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4015930:	e0bff717 	ldw	r2,-36(fp)
 4015934:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_RESUME_PRIO);
 4015938:	00801184 	movi	r2,70
 401593c:	00004c06 	br	4015a70 <OSTaskResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {                            /* See if assigned to Mutex              */
 4015940:	e0bff817 	ldw	r2,-32(fp)
 4015944:	10800058 	cmpnei	r2,r2,1
 4015948:	1000061e 	bne	r2,zero,4015964 <OSTaskResume+0xb4>
 401594c:	e0bff617 	ldw	r2,-40(fp)
 4015950:	e0bff915 	stw	r2,-28(fp)
 4015954:	e0bff917 	ldw	r2,-28(fp)
 4015958:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 401595c:	008010c4 	movi	r2,67
 4015960:	00004306 	br	4015a70 <OSTaskResume+0x1c0>
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) != OS_STAT_RDY) { /* Task must be suspended                */
 4015964:	e0bff817 	ldw	r2,-32(fp)
 4015968:	10800c03 	ldbu	r2,48(r2)
 401596c:	10803fcc 	andi	r2,r2,255
 4015970:	1080020c 	andi	r2,r2,8
 4015974:	10003926 	beq	r2,zero,4015a5c <OSTaskResume+0x1ac>
        ptcb->OSTCBStat &= ~(INT8U)OS_STAT_SUSPEND;           /* Remove suspension                     */
 4015978:	e0bff817 	ldw	r2,-32(fp)
 401597c:	10c00c03 	ldbu	r3,48(r2)
 4015980:	00bffdc4 	movi	r2,-9
 4015984:	1884703a 	and	r2,r3,r2
 4015988:	1007883a 	mov	r3,r2
 401598c:	e0bff817 	ldw	r2,-32(fp)
 4015990:	10c00c05 	stb	r3,48(r2)
        if (ptcb->OSTCBStat == OS_STAT_RDY) {                 /* See if task is now ready              */
 4015994:	e0bff817 	ldw	r2,-32(fp)
 4015998:	10800c03 	ldbu	r2,48(r2)
 401599c:	10803fcc 	andi	r2,r2,255
 40159a0:	1000281e 	bne	r2,zero,4015a44 <OSTaskResume+0x194>
            if (ptcb->OSTCBDly == 0) {
 40159a4:	e0bff817 	ldw	r2,-32(fp)
 40159a8:	10800b8b 	ldhu	r2,46(r2)
 40159ac:	10bfffcc 	andi	r2,r2,65535
 40159b0:	10001f1e 	bne	r2,zero,4015a30 <OSTaskResume+0x180>
                OSRdyGrp               |= ptcb->OSTCBBitY;    /* Yes, Make task ready to run           */
 40159b4:	e0bff817 	ldw	r2,-32(fp)
 40159b8:	10c00d83 	ldbu	r3,54(r2)
 40159bc:	d0a72f03 	ldbu	r2,-25412(gp)
 40159c0:	1884b03a 	or	r2,r3,r2
 40159c4:	d0a72f05 	stb	r2,-25412(gp)
                OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 40159c8:	e0bff817 	ldw	r2,-32(fp)
 40159cc:	10800d03 	ldbu	r2,52(r2)
 40159d0:	10c03fcc 	andi	r3,r2,255
 40159d4:	e0bff817 	ldw	r2,-32(fp)
 40159d8:	10800d03 	ldbu	r2,52(r2)
 40159dc:	11003fcc 	andi	r4,r2,255
 40159e0:	d0a72f44 	addi	r2,gp,-25411
 40159e4:	2085883a 	add	r2,r4,r2
 40159e8:	11000003 	ldbu	r4,0(r2)
 40159ec:	e0bff817 	ldw	r2,-32(fp)
 40159f0:	10800d43 	ldbu	r2,53(r2)
 40159f4:	2084b03a 	or	r2,r4,r2
 40159f8:	1009883a 	mov	r4,r2
 40159fc:	d0a72f44 	addi	r2,gp,-25411
 4015a00:	1885883a 	add	r2,r3,r2
 4015a04:	11000005 	stb	r4,0(r2)
 4015a08:	e0bff617 	ldw	r2,-40(fp)
 4015a0c:	e0bffa15 	stw	r2,-24(fp)
 4015a10:	e0bffa17 	ldw	r2,-24(fp)
 4015a14:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
                if (OSRunning == OS_TRUE) {
 4015a18:	d0a72343 	ldbu	r2,-25459(gp)
 4015a1c:	10803fcc 	andi	r2,r2,255
 4015a20:	10800058 	cmpnei	r2,r2,1
 4015a24:	10000b1e 	bne	r2,zero,4015a54 <OSTaskResume+0x1a4>
                    OS_Sched();                               /* Find new highest priority task        */
 4015a28:	400fb580 	call	400fb58 <OS_Sched>
 4015a2c:	00000906 	br	4015a54 <OSTaskResume+0x1a4>
 4015a30:	e0bff617 	ldw	r2,-40(fp)
 4015a34:	e0bffb15 	stw	r2,-20(fp)
 4015a38:	e0bffb17 	ldw	r2,-20(fp)
 4015a3c:	1001703a 	wrctl	status,r2
 4015a40:	00000406 	br	4015a54 <OSTaskResume+0x1a4>
 4015a44:	e0bff617 	ldw	r2,-40(fp)
 4015a48:	e0bffc15 	stw	r2,-16(fp)
 4015a4c:	e0bffc17 	ldw	r2,-16(fp)
 4015a50:	1001703a 	wrctl	status,r2
                OS_EXIT_CRITICAL();
            }
        } else {                                              /* Must be pending on event              */
            OS_EXIT_CRITICAL();
        }
        return (OS_ERR_NONE);
 4015a54:	0005883a 	mov	r2,zero
 4015a58:	00000506 	br	4015a70 <OSTaskResume+0x1c0>
 4015a5c:	e0bff617 	ldw	r2,-40(fp)
 4015a60:	e0bffd15 	stw	r2,-12(fp)
 4015a64:	e0bffd17 	ldw	r2,-12(fp)
 4015a68:	1001703a 	wrctl	status,r2
    }
    OS_EXIT_CRITICAL();
    return (OS_ERR_TASK_NOT_SUSPENDED);
 4015a6c:	00801104 	movi	r2,68
}
 4015a70:	e037883a 	mov	sp,fp
 4015a74:	dfc00117 	ldw	ra,4(sp)
 4015a78:	df000017 	ldw	fp,0(sp)
 4015a7c:	dec00204 	addi	sp,sp,8
 4015a80:	f800283a 	ret

04015a84 <OSTaskStkChk>:
*              OS_ERR_PDATA_NULL      if 'p_stk_data' is a NULL pointer
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
INT8U  OSTaskStkChk (INT8U prio, OS_STK_DATA *p_stk_data)
{
 4015a84:	defff304 	addi	sp,sp,-52
 4015a88:	df000c15 	stw	fp,48(sp)
 4015a8c:	df000c04 	addi	fp,sp,48
 4015a90:	2005883a 	mov	r2,r4
 4015a94:	e17fff15 	stw	r5,-4(fp)
 4015a98:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
    OS_STK    *pchk;
    INT32U     nfree;
    INT32U     size;
#if OS_CRITICAL_METHOD == 3                            /* Allocate storage for CPU status register     */
    OS_CPU_SR  cpu_sr = 0;
 4015a9c:	e03ff615 	stw	zero,-40(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                       /* Make sure task priority is valid             */
 4015aa0:	e0bffe03 	ldbu	r2,-8(fp)
 4015aa4:	10800570 	cmpltui	r2,r2,21
 4015aa8:	1000051e 	bne	r2,zero,4015ac0 <OSTaskStkChk+0x3c>
        if (prio != OS_PRIO_SELF) {
 4015aac:	e0bffe03 	ldbu	r2,-8(fp)
 4015ab0:	10803fe0 	cmpeqi	r2,r2,255
 4015ab4:	1000021e 	bne	r2,zero,4015ac0 <OSTaskStkChk+0x3c>
            return (OS_ERR_PRIO_INVALID);
 4015ab8:	00800a84 	movi	r2,42
 4015abc:	00005d06 	br	4015c34 <OSTaskStkChk+0x1b0>
        }
    }
    if (p_stk_data == (OS_STK_DATA *)0) {              /* Validate 'p_stk_data'                        */
 4015ac0:	e0bfff17 	ldw	r2,-4(fp)
 4015ac4:	1000021e 	bne	r2,zero,4015ad0 <OSTaskStkChk+0x4c>
        return (OS_ERR_PDATA_NULL);
 4015ac8:	00800244 	movi	r2,9
 4015acc:	00005906 	br	4015c34 <OSTaskStkChk+0x1b0>
    }
#endif
    p_stk_data->OSFree = 0;                            /* Assume failure, set to 0 size                */
 4015ad0:	e0bfff17 	ldw	r2,-4(fp)
 4015ad4:	10000015 	stw	zero,0(r2)
    p_stk_data->OSUsed = 0;
 4015ad8:	e0bfff17 	ldw	r2,-4(fp)
 4015adc:	10000115 	stw	zero,4(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4015ae0:	0005303a 	rdctl	r2,status
 4015ae4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4015ae8:	e0fffd17 	ldw	r3,-12(fp)
 4015aec:	00bfff84 	movi	r2,-2
 4015af0:	1884703a 	and	r2,r3,r2
 4015af4:	1001703a 	wrctl	status,r2
  
  return context;
 4015af8:	e0bffd17 	ldw	r2,-12(fp)
    OS_ENTER_CRITICAL();
 4015afc:	e0bff615 	stw	r2,-40(fp)
    if (prio == OS_PRIO_SELF) {                        /* See if check for SELF                        */
 4015b00:	e0bffe03 	ldbu	r2,-8(fp)
 4015b04:	10803fd8 	cmpnei	r2,r2,255
 4015b08:	1000031e 	bne	r2,zero,4015b18 <OSTaskStkChk+0x94>
        prio = OSTCBCur->OSTCBPrio;
 4015b0c:	d0a73217 	ldw	r2,-25400(gp)
 4015b10:	10800c83 	ldbu	r2,50(r2)
 4015b14:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 4015b18:	e0fffe03 	ldbu	r3,-8(fp)
 4015b1c:	008100b4 	movhi	r2,1026
 4015b20:	109dc204 	addi	r2,r2,30472
 4015b24:	18c7883a 	add	r3,r3,r3
 4015b28:	18c7883a 	add	r3,r3,r3
 4015b2c:	10c5883a 	add	r2,r2,r3
 4015b30:	10800017 	ldw	r2,0(r2)
 4015b34:	e0bff815 	stw	r2,-32(fp)
    if (ptcb == (OS_TCB *)0) {                         /* Make sure task exist                         */
 4015b38:	e0bff817 	ldw	r2,-32(fp)
 4015b3c:	1000061e 	bne	r2,zero,4015b58 <OSTaskStkChk+0xd4>
 4015b40:	e0bff617 	ldw	r2,-40(fp)
 4015b44:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4015b48:	e0bff717 	ldw	r2,-36(fp)
 4015b4c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 4015b50:	008010c4 	movi	r2,67
 4015b54:	00003706 	br	4015c34 <OSTaskStkChk+0x1b0>
    }
    if (ptcb == OS_TCB_RESERVED) {
 4015b58:	e0bff817 	ldw	r2,-32(fp)
 4015b5c:	10800058 	cmpnei	r2,r2,1
 4015b60:	1000061e 	bne	r2,zero,4015b7c <OSTaskStkChk+0xf8>
 4015b64:	e0bff617 	ldw	r2,-40(fp)
 4015b68:	e0bff915 	stw	r2,-28(fp)
 4015b6c:	e0bff917 	ldw	r2,-28(fp)
 4015b70:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 4015b74:	008010c4 	movi	r2,67
 4015b78:	00002e06 	br	4015c34 <OSTaskStkChk+0x1b0>
    }
    if ((ptcb->OSTCBOpt & OS_TASK_OPT_STK_CHK) == 0) { /* Make sure stack checking option is set       */
 4015b7c:	e0bff817 	ldw	r2,-32(fp)
 4015b80:	1080040b 	ldhu	r2,16(r2)
 4015b84:	10bfffcc 	andi	r2,r2,65535
 4015b88:	1080004c 	andi	r2,r2,1
 4015b8c:	1000061e 	bne	r2,zero,4015ba8 <OSTaskStkChk+0x124>
 4015b90:	e0bff617 	ldw	r2,-40(fp)
 4015b94:	e0bffa15 	stw	r2,-24(fp)
 4015b98:	e0bffa17 	ldw	r2,-24(fp)
 4015b9c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_OPT);
 4015ba0:	00801144 	movi	r2,69
 4015ba4:	00002306 	br	4015c34 <OSTaskStkChk+0x1b0>
    }
    nfree = 0;
 4015ba8:	e03ff515 	stw	zero,-44(fp)
    size  = ptcb->OSTCBStkSize;
 4015bac:	e0bff817 	ldw	r2,-32(fp)
 4015bb0:	10800317 	ldw	r2,12(r2)
 4015bb4:	e0bffc15 	stw	r2,-16(fp)
    pchk  = ptcb->OSTCBStkBottom;
 4015bb8:	e0bff817 	ldw	r2,-32(fp)
 4015bbc:	10800217 	ldw	r2,8(r2)
 4015bc0:	e0bff415 	stw	r2,-48(fp)
 4015bc4:	e0bff617 	ldw	r2,-40(fp)
 4015bc8:	e0bffb15 	stw	r2,-20(fp)
 4015bcc:	e0bffb17 	ldw	r2,-20(fp)
 4015bd0:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 4015bd4:	00000306 	br	4015be4 <OSTaskStkChk+0x160>
        nfree++;
 4015bd8:	e0bff517 	ldw	r2,-44(fp)
 4015bdc:	10800044 	addi	r2,r2,1
 4015be0:	e0bff515 	stw	r2,-44(fp)
    nfree = 0;
    size  = ptcb->OSTCBStkSize;
    pchk  = ptcb->OSTCBStkBottom;
    OS_EXIT_CRITICAL();
#if OS_STK_GROWTH == 1
    while (*pchk++ == (OS_STK)0) {                    /* Compute the number of zero entries on the stk */
 4015be4:	e0bff417 	ldw	r2,-48(fp)
 4015be8:	10c00104 	addi	r3,r2,4
 4015bec:	e0fff415 	stw	r3,-48(fp)
 4015bf0:	10800017 	ldw	r2,0(r2)
 4015bf4:	103ff826 	beq	r2,zero,4015bd8 <__alt_mem_onchip_memory2_0+0xfbff5bd8>
#else
    while (*pchk-- == (OS_STK)0) {
        nfree++;
    }
#endif
    p_stk_data->OSFree = nfree * sizeof(OS_STK);          /* Compute number of free bytes on the stack */
 4015bf8:	e0bff517 	ldw	r2,-44(fp)
 4015bfc:	1085883a 	add	r2,r2,r2
 4015c00:	1085883a 	add	r2,r2,r2
 4015c04:	1007883a 	mov	r3,r2
 4015c08:	e0bfff17 	ldw	r2,-4(fp)
 4015c0c:	10c00015 	stw	r3,0(r2)
    p_stk_data->OSUsed = (size - nfree) * sizeof(OS_STK); /* Compute number of bytes used on the stack */
 4015c10:	e0fffc17 	ldw	r3,-16(fp)
 4015c14:	e0bff517 	ldw	r2,-44(fp)
 4015c18:	1885c83a 	sub	r2,r3,r2
 4015c1c:	1085883a 	add	r2,r2,r2
 4015c20:	1085883a 	add	r2,r2,r2
 4015c24:	1007883a 	mov	r3,r2
 4015c28:	e0bfff17 	ldw	r2,-4(fp)
 4015c2c:	10c00115 	stw	r3,4(r2)
    return (OS_ERR_NONE);
 4015c30:	0005883a 	mov	r2,zero
}
 4015c34:	e037883a 	mov	sp,fp
 4015c38:	df000017 	ldw	fp,0(sp)
 4015c3c:	dec00104 	addi	sp,sp,4
 4015c40:	f800283a 	ret

04015c44 <OSTaskSuspend>:
*********************************************************************************************************
*/

#if OS_TASK_SUSPEND_EN > 0
INT8U  OSTaskSuspend (INT8U prio)
{
 4015c44:	defff504 	addi	sp,sp,-44
 4015c48:	dfc00a15 	stw	ra,40(sp)
 4015c4c:	df000915 	stw	fp,36(sp)
 4015c50:	df000904 	addi	fp,sp,36
 4015c54:	2005883a 	mov	r2,r4
 4015c58:	e0bfff05 	stb	r2,-4(fp)
    BOOLEAN    self;
    OS_TCB    *ptcb;
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4015c5c:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio == OS_TASK_IDLE_PRIO) {                            /* Not allowed to suspend idle task    */
 4015c60:	e0bfff03 	ldbu	r2,-4(fp)
 4015c64:	10800518 	cmpnei	r2,r2,20
 4015c68:	1000021e 	bne	r2,zero,4015c74 <OSTaskSuspend+0x30>
        return (OS_ERR_TASK_SUSPEND_IDLE);
 4015c6c:	008011c4 	movi	r2,71
 4015c70:	00006806 	br	4015e14 <OSTaskSuspend+0x1d0>
    }
    if (prio >= OS_LOWEST_PRIO) {                               /* Task priority valid ?               */
 4015c74:	e0bfff03 	ldbu	r2,-4(fp)
 4015c78:	10800530 	cmpltui	r2,r2,20
 4015c7c:	1000051e 	bne	r2,zero,4015c94 <OSTaskSuspend+0x50>
        if (prio != OS_PRIO_SELF) {
 4015c80:	e0bfff03 	ldbu	r2,-4(fp)
 4015c84:	10803fe0 	cmpeqi	r2,r2,255
 4015c88:	1000021e 	bne	r2,zero,4015c94 <OSTaskSuspend+0x50>
            return (OS_ERR_PRIO_INVALID);
 4015c8c:	00800a84 	movi	r2,42
 4015c90:	00006006 	br	4015e14 <OSTaskSuspend+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4015c94:	0005303a 	rdctl	r2,status
 4015c98:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4015c9c:	e0fffe17 	ldw	r3,-8(fp)
 4015ca0:	00bfff84 	movi	r2,-2
 4015ca4:	1884703a 	and	r2,r3,r2
 4015ca8:	1001703a 	wrctl	status,r2
  
  return context;
 4015cac:	e0bffe17 	ldw	r2,-8(fp)
        }
    }
#endif
    OS_ENTER_CRITICAL();
 4015cb0:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                                 /* See if suspend SELF                 */
 4015cb4:	e0bfff03 	ldbu	r2,-4(fp)
 4015cb8:	10803fd8 	cmpnei	r2,r2,255
 4015cbc:	1000061e 	bne	r2,zero,4015cd8 <OSTaskSuspend+0x94>
        prio = OSTCBCur->OSTCBPrio;
 4015cc0:	d0a73217 	ldw	r2,-25400(gp)
 4015cc4:	10800c83 	ldbu	r2,50(r2)
 4015cc8:	e0bfff05 	stb	r2,-4(fp)
        self = OS_TRUE;
 4015ccc:	00800044 	movi	r2,1
 4015cd0:	e0bff705 	stb	r2,-36(fp)
 4015cd4:	00000906 	br	4015cfc <OSTaskSuspend+0xb8>
    } else if (prio == OSTCBCur->OSTCBPrio) {                   /* See if suspending self              */
 4015cd8:	d0a73217 	ldw	r2,-25400(gp)
 4015cdc:	10800c83 	ldbu	r2,50(r2)
 4015ce0:	10c03fcc 	andi	r3,r2,255
 4015ce4:	e0bfff03 	ldbu	r2,-4(fp)
 4015ce8:	1880031e 	bne	r3,r2,4015cf8 <OSTaskSuspend+0xb4>
        self = OS_TRUE;
 4015cec:	00800044 	movi	r2,1
 4015cf0:	e0bff705 	stb	r2,-36(fp)
 4015cf4:	00000106 	br	4015cfc <OSTaskSuspend+0xb8>
    } else {
        self = OS_FALSE;                                        /* No suspending another task          */
 4015cf8:	e03ff705 	stb	zero,-36(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 4015cfc:	e0ffff03 	ldbu	r3,-4(fp)
 4015d00:	008100b4 	movhi	r2,1026
 4015d04:	109dc204 	addi	r2,r2,30472
 4015d08:	18c7883a 	add	r3,r3,r3
 4015d0c:	18c7883a 	add	r3,r3,r3
 4015d10:	10c5883a 	add	r2,r2,r3
 4015d14:	10800017 	ldw	r2,0(r2)
 4015d18:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                                  /* Task to suspend must exist          */
 4015d1c:	e0bffa17 	ldw	r2,-24(fp)
 4015d20:	1000061e 	bne	r2,zero,4015d3c <OSTaskSuspend+0xf8>
 4015d24:	e0bff817 	ldw	r2,-32(fp)
 4015d28:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4015d2c:	e0bff917 	ldw	r2,-28(fp)
 4015d30:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_SUSPEND_PRIO);
 4015d34:	00801204 	movi	r2,72
 4015d38:	00003606 	br	4015e14 <OSTaskSuspend+0x1d0>
    }
    if (ptcb == OS_TCB_RESERVED) {                              /* See if assigned to Mutex            */
 4015d3c:	e0bffa17 	ldw	r2,-24(fp)
 4015d40:	10800058 	cmpnei	r2,r2,1
 4015d44:	1000061e 	bne	r2,zero,4015d60 <OSTaskSuspend+0x11c>
 4015d48:	e0bff817 	ldw	r2,-32(fp)
 4015d4c:	e0bffb15 	stw	r2,-20(fp)
 4015d50:	e0bffb17 	ldw	r2,-20(fp)
 4015d54:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 4015d58:	008010c4 	movi	r2,67
 4015d5c:	00002d06 	br	4015e14 <OSTaskSuspend+0x1d0>
    }
    y            = ptcb->OSTCBY;
 4015d60:	e0bffa17 	ldw	r2,-24(fp)
 4015d64:	10800d03 	ldbu	r2,52(r2)
 4015d68:	e0bffd05 	stb	r2,-12(fp)
    OSRdyTbl[y] &= ~ptcb->OSTCBBitX;                            /* Make task not ready                 */
 4015d6c:	e0fffd03 	ldbu	r3,-12(fp)
 4015d70:	e13ffd03 	ldbu	r4,-12(fp)
 4015d74:	d0a72f44 	addi	r2,gp,-25411
 4015d78:	2085883a 	add	r2,r4,r2
 4015d7c:	10800003 	ldbu	r2,0(r2)
 4015d80:	1009883a 	mov	r4,r2
 4015d84:	e0bffa17 	ldw	r2,-24(fp)
 4015d88:	10800d43 	ldbu	r2,53(r2)
 4015d8c:	0084303a 	nor	r2,zero,r2
 4015d90:	2084703a 	and	r2,r4,r2
 4015d94:	1009883a 	mov	r4,r2
 4015d98:	d0a72f44 	addi	r2,gp,-25411
 4015d9c:	1885883a 	add	r2,r3,r2
 4015da0:	11000005 	stb	r4,0(r2)
    if (OSRdyTbl[y] == 0) {
 4015da4:	e0fffd03 	ldbu	r3,-12(fp)
 4015da8:	d0a72f44 	addi	r2,gp,-25411
 4015dac:	1885883a 	add	r2,r3,r2
 4015db0:	10800003 	ldbu	r2,0(r2)
 4015db4:	10803fcc 	andi	r2,r2,255
 4015db8:	1000071e 	bne	r2,zero,4015dd8 <OSTaskSuspend+0x194>
        OSRdyGrp &= ~ptcb->OSTCBBitY;
 4015dbc:	e0bffa17 	ldw	r2,-24(fp)
 4015dc0:	10800d83 	ldbu	r2,54(r2)
 4015dc4:	0084303a 	nor	r2,zero,r2
 4015dc8:	1007883a 	mov	r3,r2
 4015dcc:	d0a72f03 	ldbu	r2,-25412(gp)
 4015dd0:	1884703a 	and	r2,r3,r2
 4015dd4:	d0a72f05 	stb	r2,-25412(gp)
    }
    ptcb->OSTCBStat |= OS_STAT_SUSPEND;                         /* Status of task is 'SUSPENDED'       */
 4015dd8:	e0bffa17 	ldw	r2,-24(fp)
 4015ddc:	10800c03 	ldbu	r2,48(r2)
 4015de0:	10800214 	ori	r2,r2,8
 4015de4:	1007883a 	mov	r3,r2
 4015de8:	e0bffa17 	ldw	r2,-24(fp)
 4015dec:	10c00c05 	stb	r3,48(r2)
 4015df0:	e0bff817 	ldw	r2,-32(fp)
 4015df4:	e0bffc15 	stw	r2,-16(fp)
 4015df8:	e0bffc17 	ldw	r2,-16(fp)
 4015dfc:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    if (self == OS_TRUE) {                                      /* Context switch only if SELF         */
 4015e00:	e0bff703 	ldbu	r2,-36(fp)
 4015e04:	10800058 	cmpnei	r2,r2,1
 4015e08:	1000011e 	bne	r2,zero,4015e10 <OSTaskSuspend+0x1cc>
        OS_Sched();                                             /* Find new highest priority task      */
 4015e0c:	400fb580 	call	400fb58 <OS_Sched>
    }
    return (OS_ERR_NONE);
 4015e10:	0005883a 	mov	r2,zero
}
 4015e14:	e037883a 	mov	sp,fp
 4015e18:	dfc00117 	ldw	ra,4(sp)
 4015e1c:	df000017 	ldw	fp,0(sp)
 4015e20:	dec00204 	addi	sp,sp,8
 4015e24:	f800283a 	ret

04015e28 <OSTaskQuery>:
*********************************************************************************************************
*/

#if OS_TASK_QUERY_EN > 0
INT8U  OSTaskQuery (INT8U prio, OS_TCB *p_task_data)
{
 4015e28:	defff604 	addi	sp,sp,-40
 4015e2c:	dfc00915 	stw	ra,36(sp)
 4015e30:	df000815 	stw	fp,32(sp)
 4015e34:	df000804 	addi	fp,sp,32
 4015e38:	2005883a 	mov	r2,r4
 4015e3c:	e17fff15 	stw	r5,-4(fp)
 4015e40:	e0bffe05 	stb	r2,-8(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4015e44:	e03ff815 	stw	zero,-32(fp)
#endif



#if OS_ARG_CHK_EN > 0
    if (prio > OS_LOWEST_PRIO) {                 /* Task priority valid ?                              */
 4015e48:	e0bffe03 	ldbu	r2,-8(fp)
 4015e4c:	10800570 	cmpltui	r2,r2,21
 4015e50:	1000051e 	bne	r2,zero,4015e68 <OSTaskQuery+0x40>
        if (prio != OS_PRIO_SELF) {
 4015e54:	e0bffe03 	ldbu	r2,-8(fp)
 4015e58:	10803fe0 	cmpeqi	r2,r2,255
 4015e5c:	1000021e 	bne	r2,zero,4015e68 <OSTaskQuery+0x40>
            return (OS_ERR_PRIO_INVALID);
 4015e60:	00800a84 	movi	r2,42
 4015e64:	00003406 	br	4015f38 <OSTaskQuery+0x110>
        }
    }
    if (p_task_data == (OS_TCB *)0) {            /* Validate 'p_task_data'                             */
 4015e68:	e0bfff17 	ldw	r2,-4(fp)
 4015e6c:	1000021e 	bne	r2,zero,4015e78 <OSTaskQuery+0x50>
        return (OS_ERR_PDATA_NULL);
 4015e70:	00800244 	movi	r2,9
 4015e74:	00003006 	br	4015f38 <OSTaskQuery+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4015e78:	0005303a 	rdctl	r2,status
 4015e7c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4015e80:	e0fffd17 	ldw	r3,-12(fp)
 4015e84:	00bfff84 	movi	r2,-2
 4015e88:	1884703a 	and	r2,r3,r2
 4015e8c:	1001703a 	wrctl	status,r2
  
  return context;
 4015e90:	e0bffd17 	ldw	r2,-12(fp)
    }
#endif
    OS_ENTER_CRITICAL();
 4015e94:	e0bff815 	stw	r2,-32(fp)
    if (prio == OS_PRIO_SELF) {                  /* See if suspend SELF                                */
 4015e98:	e0bffe03 	ldbu	r2,-8(fp)
 4015e9c:	10803fd8 	cmpnei	r2,r2,255
 4015ea0:	1000031e 	bne	r2,zero,4015eb0 <OSTaskQuery+0x88>
        prio = OSTCBCur->OSTCBPrio;
 4015ea4:	d0a73217 	ldw	r2,-25400(gp)
 4015ea8:	10800c83 	ldbu	r2,50(r2)
 4015eac:	e0bffe05 	stb	r2,-8(fp)
    }
    ptcb = OSTCBPrioTbl[prio];
 4015eb0:	e0fffe03 	ldbu	r3,-8(fp)
 4015eb4:	008100b4 	movhi	r2,1026
 4015eb8:	109dc204 	addi	r2,r2,30472
 4015ebc:	18c7883a 	add	r3,r3,r3
 4015ec0:	18c7883a 	add	r3,r3,r3
 4015ec4:	10c5883a 	add	r2,r2,r3
 4015ec8:	10800017 	ldw	r2,0(r2)
 4015ecc:	e0bffa15 	stw	r2,-24(fp)
    if (ptcb == (OS_TCB *)0) {                   /* Task to query must exist                           */
 4015ed0:	e0bffa17 	ldw	r2,-24(fp)
 4015ed4:	1000061e 	bne	r2,zero,4015ef0 <OSTaskQuery+0xc8>
 4015ed8:	e0bff817 	ldw	r2,-32(fp)
 4015edc:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4015ee0:	e0bff917 	ldw	r2,-28(fp)
 4015ee4:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_PRIO);
 4015ee8:	00800a44 	movi	r2,41
 4015eec:	00001206 	br	4015f38 <OSTaskQuery+0x110>
    }
    if (ptcb == OS_TCB_RESERVED) {               /* Task to query must not be assigned to a Mutex      */
 4015ef0:	e0bffa17 	ldw	r2,-24(fp)
 4015ef4:	10800058 	cmpnei	r2,r2,1
 4015ef8:	1000061e 	bne	r2,zero,4015f14 <OSTaskQuery+0xec>
 4015efc:	e0bff817 	ldw	r2,-32(fp)
 4015f00:	e0bffb15 	stw	r2,-20(fp)
 4015f04:	e0bffb17 	ldw	r2,-20(fp)
 4015f08:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);
 4015f0c:	008010c4 	movi	r2,67
 4015f10:	00000906 	br	4015f38 <OSTaskQuery+0x110>
    }
                                                 /* Copy TCB into user storage area                    */
    OS_MemCopy((INT8U *)p_task_data, (INT8U *)ptcb, sizeof(OS_TCB));
 4015f14:	01801b04 	movi	r6,108
 4015f18:	e17ffa17 	ldw	r5,-24(fp)
 4015f1c:	e13fff17 	ldw	r4,-4(fp)
 4015f20:	400faf00 	call	400faf0 <OS_MemCopy>
 4015f24:	e0bff817 	ldw	r2,-32(fp)
 4015f28:	e0bffc15 	stw	r2,-16(fp)
 4015f2c:	e0bffc17 	ldw	r2,-16(fp)
 4015f30:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (OS_ERR_NONE);
 4015f34:	0005883a 	mov	r2,zero
}
 4015f38:	e037883a 	mov	sp,fp
 4015f3c:	dfc00117 	ldw	ra,4(sp)
 4015f40:	df000017 	ldw	fp,0(sp)
 4015f44:	dec00204 	addi	sp,sp,8
 4015f48:	f800283a 	ret

04015f4c <OS_TaskStkClr>:
* Returns    : none
*********************************************************************************************************
*/
#if (OS_TASK_STAT_STK_CHK_EN > 0) && (OS_TASK_CREATE_EXT_EN > 0)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
 4015f4c:	defffc04 	addi	sp,sp,-16
 4015f50:	df000315 	stw	fp,12(sp)
 4015f54:	df000304 	addi	fp,sp,12
 4015f58:	e13ffd15 	stw	r4,-12(fp)
 4015f5c:	e17ffe15 	stw	r5,-8(fp)
 4015f60:	3005883a 	mov	r2,r6
 4015f64:	e0bfff0d 	sth	r2,-4(fp)
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
 4015f68:	e0bfff0b 	ldhu	r2,-4(fp)
 4015f6c:	1080004c 	andi	r2,r2,1
 4015f70:	10000d26 	beq	r2,zero,4015fa8 <OS_TaskStkClr+0x5c>
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
 4015f74:	e0bfff0b 	ldhu	r2,-4(fp)
 4015f78:	1080008c 	andi	r2,r2,2
 4015f7c:	10000a26 	beq	r2,zero,4015fa8 <OS_TaskStkClr+0x5c>
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 4015f80:	00000706 	br	4015fa0 <OS_TaskStkClr+0x54>
                size--;
 4015f84:	e0bffe17 	ldw	r2,-8(fp)
 4015f88:	10bfffc4 	addi	r2,r2,-1
 4015f8c:	e0bffe15 	stw	r2,-8(fp)
                *pbos++ = (OS_STK)0;                   /* Clear from bottom of stack and up!           */
 4015f90:	e0bffd17 	ldw	r2,-12(fp)
 4015f94:	10c00104 	addi	r3,r2,4
 4015f98:	e0fffd15 	stw	r3,-12(fp)
 4015f9c:	10000015 	stw	zero,0(r2)
void  OS_TaskStkClr (OS_STK *pbos, INT32U size, INT16U opt)
{
    if ((opt & OS_TASK_OPT_STK_CHK) != 0x0000) {       /* See if stack checking has been enabled       */
        if ((opt & OS_TASK_OPT_STK_CLR) != 0x0000) {   /* See if stack needs to be cleared             */
#if OS_STK_GROWTH == 1
            while (size > 0) {                         /* Stack grows from HIGH to LOW memory          */
 4015fa0:	e0bffe17 	ldw	r2,-8(fp)
 4015fa4:	103ff71e 	bne	r2,zero,4015f84 <__alt_mem_onchip_memory2_0+0xfbff5f84>
                *pbos-- = (OS_STK)0;                   /* Clear from bottom of stack and down          */
            }
#endif
        }
    }
}
 4015fa8:	0001883a 	nop
 4015fac:	e037883a 	mov	sp,fp
 4015fb0:	df000017 	ldw	fp,0(sp)
 4015fb4:	dec00104 	addi	sp,sp,4
 4015fb8:	f800283a 	ret

04015fbc <OSTimeDly>:
* Returns    : none
*********************************************************************************************************
*/

void  OSTimeDly (INT16U ticks)
{
 4015fbc:	defff904 	addi	sp,sp,-28
 4015fc0:	dfc00615 	stw	ra,24(sp)
 4015fc4:	df000515 	stw	fp,20(sp)
 4015fc8:	df000504 	addi	fp,sp,20
 4015fcc:	2005883a 	mov	r2,r4
 4015fd0:	e0bfff0d 	sth	r2,-4(fp)
    INT8U      y;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4015fd4:	e03ffb15 	stw	zero,-20(fp)
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 4015fd8:	d0a73103 	ldbu	r2,-25404(gp)
 4015fdc:	10803fcc 	andi	r2,r2,255
 4015fe0:	1000311e 	bne	r2,zero,40160a8 <OSTimeDly+0xec>
        return;
    }
    if (ticks > 0) {                             /* 0 means no delay!                                  */
 4015fe4:	e0bfff0b 	ldhu	r2,-4(fp)
 4015fe8:	10003026 	beq	r2,zero,40160ac <OSTimeDly+0xf0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4015fec:	0005303a 	rdctl	r2,status
 4015ff0:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4015ff4:	e0fffe17 	ldw	r3,-8(fp)
 4015ff8:	00bfff84 	movi	r2,-2
 4015ffc:	1884703a 	and	r2,r3,r2
 4016000:	1001703a 	wrctl	status,r2
  
  return context;
 4016004:	e0bffe17 	ldw	r2,-8(fp)
        OS_ENTER_CRITICAL();
 4016008:	e0bffb15 	stw	r2,-20(fp)
        y            =  OSTCBCur->OSTCBY;        /* Delay current task                                 */
 401600c:	d0a73217 	ldw	r2,-25400(gp)
 4016010:	10800d03 	ldbu	r2,52(r2)
 4016014:	e0bffd05 	stb	r2,-12(fp)
        OSRdyTbl[y] &= ~OSTCBCur->OSTCBBitX;
 4016018:	e0fffd03 	ldbu	r3,-12(fp)
 401601c:	e13ffd03 	ldbu	r4,-12(fp)
 4016020:	d0a72f44 	addi	r2,gp,-25411
 4016024:	2085883a 	add	r2,r4,r2
 4016028:	10800003 	ldbu	r2,0(r2)
 401602c:	1009883a 	mov	r4,r2
 4016030:	d0a73217 	ldw	r2,-25400(gp)
 4016034:	10800d43 	ldbu	r2,53(r2)
 4016038:	0084303a 	nor	r2,zero,r2
 401603c:	2084703a 	and	r2,r4,r2
 4016040:	1009883a 	mov	r4,r2
 4016044:	d0a72f44 	addi	r2,gp,-25411
 4016048:	1885883a 	add	r2,r3,r2
 401604c:	11000005 	stb	r4,0(r2)
        if (OSRdyTbl[y] == 0) {
 4016050:	e0fffd03 	ldbu	r3,-12(fp)
 4016054:	d0a72f44 	addi	r2,gp,-25411
 4016058:	1885883a 	add	r2,r3,r2
 401605c:	10800003 	ldbu	r2,0(r2)
 4016060:	10803fcc 	andi	r2,r2,255
 4016064:	1000071e 	bne	r2,zero,4016084 <OSTimeDly+0xc8>
            OSRdyGrp &= ~OSTCBCur->OSTCBBitY;
 4016068:	d0a73217 	ldw	r2,-25400(gp)
 401606c:	10800d83 	ldbu	r2,54(r2)
 4016070:	0084303a 	nor	r2,zero,r2
 4016074:	1007883a 	mov	r3,r2
 4016078:	d0a72f03 	ldbu	r2,-25412(gp)
 401607c:	1884703a 	and	r2,r3,r2
 4016080:	d0a72f05 	stb	r2,-25412(gp)
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
 4016084:	d0a73217 	ldw	r2,-25400(gp)
 4016088:	e0ffff0b 	ldhu	r3,-4(fp)
 401608c:	10c00b8d 	sth	r3,46(r2)
 4016090:	e0bffb17 	ldw	r2,-20(fp)
 4016094:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4016098:	e0bffc17 	ldw	r2,-16(fp)
 401609c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
 40160a0:	400fb580 	call	400fb58 <OS_Sched>
 40160a4:	00000106 	br	40160ac <OSTimeDly+0xf0>
#endif



    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
        return;
 40160a8:	0001883a 	nop
        }
        OSTCBCur->OSTCBDly = ticks;              /* Load ticks in TCB                                  */
        OS_EXIT_CRITICAL();
        OS_Sched();                              /* Find next task to run!                             */
    }
}
 40160ac:	e037883a 	mov	sp,fp
 40160b0:	dfc00117 	ldw	ra,4(sp)
 40160b4:	df000017 	ldw	fp,0(sp)
 40160b8:	dec00204 	addi	sp,sp,8
 40160bc:	f800283a 	ret

040160c0 <OSTimeDlyHMSM>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_HMSM_EN > 0
INT8U  OSTimeDlyHMSM (INT8U hours, INT8U minutes, INT8U seconds, INT16U ms)
{
 40160c0:	defff704 	addi	sp,sp,-36
 40160c4:	dfc00815 	stw	ra,32(sp)
 40160c8:	df000715 	stw	fp,28(sp)
 40160cc:	dc000615 	stw	r16,24(sp)
 40160d0:	df000704 	addi	fp,sp,28
 40160d4:	2011883a 	mov	r8,r4
 40160d8:	2809883a 	mov	r4,r5
 40160dc:	3007883a 	mov	r3,r6
 40160e0:	3805883a 	mov	r2,r7
 40160e4:	e23ffb05 	stb	r8,-20(fp)
 40160e8:	e13ffc05 	stb	r4,-16(fp)
 40160ec:	e0fffd05 	stb	r3,-12(fp)
 40160f0:	e0bffe0d 	sth	r2,-8(fp)
    INT32U ticks;
    INT16U loops;


    if (OSIntNesting > 0) {                      /* See if trying to call from an ISR                  */
 40160f4:	d0a73103 	ldbu	r2,-25404(gp)
 40160f8:	10803fcc 	andi	r2,r2,255
 40160fc:	10000226 	beq	r2,zero,4016108 <OSTimeDlyHMSM+0x48>
        return (OS_ERR_TIME_DLY_ISR);
 4016100:	00801544 	movi	r2,85
 4016104:	00003e06 	br	4016200 <OSTimeDlyHMSM+0x140>
    }
#if OS_ARG_CHK_EN > 0
    if (hours == 0) {
 4016108:	e0bffb03 	ldbu	r2,-20(fp)
 401610c:	1000081e 	bne	r2,zero,4016130 <OSTimeDlyHMSM+0x70>
        if (minutes == 0) {
 4016110:	e0bffc03 	ldbu	r2,-16(fp)
 4016114:	1000061e 	bne	r2,zero,4016130 <OSTimeDlyHMSM+0x70>
            if (seconds == 0) {
 4016118:	e0bffd03 	ldbu	r2,-12(fp)
 401611c:	1000041e 	bne	r2,zero,4016130 <OSTimeDlyHMSM+0x70>
                if (ms == 0) {
 4016120:	e0bffe0b 	ldhu	r2,-8(fp)
 4016124:	1000021e 	bne	r2,zero,4016130 <OSTimeDlyHMSM+0x70>
                    return (OS_ERR_TIME_ZERO_DLY);
 4016128:	00801504 	movi	r2,84
 401612c:	00003406 	br	4016200 <OSTimeDlyHMSM+0x140>
                }
            }
        }
    }
    if (minutes > 59) {
 4016130:	e0bffc03 	ldbu	r2,-16(fp)
 4016134:	10800f30 	cmpltui	r2,r2,60
 4016138:	1000021e 	bne	r2,zero,4016144 <OSTimeDlyHMSM+0x84>
        return (OS_ERR_TIME_INVALID_MINUTES);    /* Validate arguments to be within range              */
 401613c:	00801444 	movi	r2,81
 4016140:	00002f06 	br	4016200 <OSTimeDlyHMSM+0x140>
    }
    if (seconds > 59) {
 4016144:	e0bffd03 	ldbu	r2,-12(fp)
 4016148:	10800f30 	cmpltui	r2,r2,60
 401614c:	1000021e 	bne	r2,zero,4016158 <OSTimeDlyHMSM+0x98>
        return (OS_ERR_TIME_INVALID_SECONDS);
 4016150:	00801484 	movi	r2,82
 4016154:	00002a06 	br	4016200 <OSTimeDlyHMSM+0x140>
    }
    if (ms > 999) {
 4016158:	e0bffe0b 	ldhu	r2,-8(fp)
 401615c:	1080fa30 	cmpltui	r2,r2,1000
 4016160:	1000021e 	bne	r2,zero,401616c <OSTimeDlyHMSM+0xac>
        return (OS_ERR_TIME_INVALID_MS);
 4016164:	008014c4 	movi	r2,83
 4016168:	00002506 	br	4016200 <OSTimeDlyHMSM+0x140>
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
 401616c:	e0bffb03 	ldbu	r2,-20(fp)
 4016170:	10c38424 	muli	r3,r2,3600
 4016174:	e0bffc03 	ldbu	r2,-16(fp)
 4016178:	10800f24 	muli	r2,r2,60
 401617c:	1887883a 	add	r3,r3,r2
 4016180:	e0bffd03 	ldbu	r2,-12(fp)
 4016184:	1885883a 	add	r2,r3,r2
 4016188:	14000ca4 	muli	r16,r2,50
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
 401618c:	e0bffe0b 	ldhu	r2,-8(fp)
 4016190:	10800ca4 	muli	r2,r2,50
 4016194:	10807d04 	addi	r2,r2,500
 4016198:	0140fa04 	movi	r5,1000
 401619c:	1009883a 	mov	r4,r2
 40161a0:	400ac080 	call	400ac08 <__udivsi3>
        return (OS_ERR_TIME_INVALID_MS);
    }
#endif
                                                 /* Compute the total number of clock ticks required.. */
                                                 /* .. (rounded to the nearest tick)                   */
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
 40161a4:	8085883a 	add	r2,r16,r2
 40161a8:	e0bffa15 	stw	r2,-24(fp)
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
 40161ac:	e0bffa17 	ldw	r2,-24(fp)
 40161b0:	1004d43a 	srli	r2,r2,16
 40161b4:	e0bff90d 	sth	r2,-28(fp)
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
 40161b8:	e0bffa17 	ldw	r2,-24(fp)
 40161bc:	10bfffcc 	andi	r2,r2,65535
 40161c0:	e0bffa15 	stw	r2,-24(fp)
    OSTimeDly((INT16U)ticks);
 40161c4:	e0bffa17 	ldw	r2,-24(fp)
 40161c8:	10bfffcc 	andi	r2,r2,65535
 40161cc:	1009883a 	mov	r4,r2
 40161d0:	4015fbc0 	call	4015fbc <OSTimeDly>
    while (loops > 0) {
 40161d4:	00000706 	br	40161f4 <OSTimeDlyHMSM+0x134>
        OSTimeDly((INT16U)32768u);
 40161d8:	01200014 	movui	r4,32768
 40161dc:	4015fbc0 	call	4015fbc <OSTimeDly>
        OSTimeDly((INT16U)32768u);
 40161e0:	01200014 	movui	r4,32768
 40161e4:	4015fbc0 	call	4015fbc <OSTimeDly>
        loops--;
 40161e8:	e0bff90b 	ldhu	r2,-28(fp)
 40161ec:	10bfffc4 	addi	r2,r2,-1
 40161f0:	e0bff90d 	sth	r2,-28(fp)
    ticks = ((INT32U)hours * 3600L + (INT32U)minutes * 60L + (INT32U)seconds) * OS_TICKS_PER_SEC
          + OS_TICKS_PER_SEC * ((INT32U)ms + 500L / OS_TICKS_PER_SEC) / 1000L;
    loops = (INT16U)(ticks >> 16);               /* Compute the integral number of 65536 tick delays   */
    ticks = ticks & 0xFFFFL;                     /* Obtain  the fractional number of ticks             */
    OSTimeDly((INT16U)ticks);
    while (loops > 0) {
 40161f4:	e0bff90b 	ldhu	r2,-28(fp)
 40161f8:	103ff71e 	bne	r2,zero,40161d8 <__alt_mem_onchip_memory2_0+0xfbff61d8>
        OSTimeDly((INT16U)32768u);
        OSTimeDly((INT16U)32768u);
        loops--;
    }
    return (OS_ERR_NONE);
 40161fc:	0005883a 	mov	r2,zero
}
 4016200:	e6ffff04 	addi	sp,fp,-4
 4016204:	dfc00217 	ldw	ra,8(sp)
 4016208:	df000117 	ldw	fp,4(sp)
 401620c:	dc000017 	ldw	r16,0(sp)
 4016210:	dec00304 	addi	sp,sp,12
 4016214:	f800283a 	ret

04016218 <OSTimeDlyResume>:
*********************************************************************************************************
*/

#if OS_TIME_DLY_RESUME_EN > 0
INT8U  OSTimeDlyResume (INT8U prio)
{
 4016218:	defff504 	addi	sp,sp,-44
 401621c:	dfc00a15 	stw	ra,40(sp)
 4016220:	df000915 	stw	fp,36(sp)
 4016224:	df000904 	addi	fp,sp,36
 4016228:	2005883a 	mov	r2,r4
 401622c:	e0bfff05 	stb	r2,-4(fp)
    OS_TCB    *ptcb;
#if OS_CRITICAL_METHOD == 3                                    /* Storage for CPU status register      */
    OS_CPU_SR  cpu_sr = 0;
 4016230:	e03ff715 	stw	zero,-36(fp)
#endif



    if (prio >= OS_LOWEST_PRIO) {
 4016234:	e0bfff03 	ldbu	r2,-4(fp)
 4016238:	10800530 	cmpltui	r2,r2,20
 401623c:	1000021e 	bne	r2,zero,4016248 <OSTimeDlyResume+0x30>
        return (OS_ERR_PRIO_INVALID);
 4016240:	00800a84 	movi	r2,42
 4016244:	00006406 	br	40163d8 <OSTimeDlyResume+0x1c0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4016248:	0005303a 	rdctl	r2,status
 401624c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4016250:	e0fffe17 	ldw	r3,-8(fp)
 4016254:	00bfff84 	movi	r2,-2
 4016258:	1884703a 	and	r2,r3,r2
 401625c:	1001703a 	wrctl	status,r2
  
  return context;
 4016260:	e0bffe17 	ldw	r2,-8(fp)
    }
    OS_ENTER_CRITICAL();
 4016264:	e0bff715 	stw	r2,-36(fp)
    ptcb = OSTCBPrioTbl[prio];                                 /* Make sure that task exist            */
 4016268:	e0ffff03 	ldbu	r3,-4(fp)
 401626c:	008100b4 	movhi	r2,1026
 4016270:	109dc204 	addi	r2,r2,30472
 4016274:	18c7883a 	add	r3,r3,r3
 4016278:	18c7883a 	add	r3,r3,r3
 401627c:	10c5883a 	add	r2,r2,r3
 4016280:	10800017 	ldw	r2,0(r2)
 4016284:	e0bff915 	stw	r2,-28(fp)
    if (ptcb == (OS_TCB *)0) {
 4016288:	e0bff917 	ldw	r2,-28(fp)
 401628c:	1000061e 	bne	r2,zero,40162a8 <OSTimeDlyResume+0x90>
 4016290:	e0bff717 	ldw	r2,-36(fp)
 4016294:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4016298:	e0bff817 	ldw	r2,-32(fp)
 401629c:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 40162a0:	008010c4 	movi	r2,67
 40162a4:	00004c06 	br	40163d8 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb == OS_TCB_RESERVED) {
 40162a8:	e0bff917 	ldw	r2,-28(fp)
 40162ac:	10800058 	cmpnei	r2,r2,1
 40162b0:	1000061e 	bne	r2,zero,40162cc <OSTimeDlyResume+0xb4>
 40162b4:	e0bff717 	ldw	r2,-36(fp)
 40162b8:	e0bffa15 	stw	r2,-24(fp)
 40162bc:	e0bffa17 	ldw	r2,-24(fp)
 40162c0:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TASK_NOT_EXIST);                        /* The task does not exist              */
 40162c4:	008010c4 	movi	r2,67
 40162c8:	00004306 	br	40163d8 <OSTimeDlyResume+0x1c0>
    }
    if (ptcb->OSTCBDly == 0) {                                 /* See if task is delayed               */
 40162cc:	e0bff917 	ldw	r2,-28(fp)
 40162d0:	10800b8b 	ldhu	r2,46(r2)
 40162d4:	10bfffcc 	andi	r2,r2,65535
 40162d8:	1000061e 	bne	r2,zero,40162f4 <OSTimeDlyResume+0xdc>
 40162dc:	e0bff717 	ldw	r2,-36(fp)
 40162e0:	e0bffb15 	stw	r2,-20(fp)
 40162e4:	e0bffb17 	ldw	r2,-20(fp)
 40162e8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        return (OS_ERR_TIME_NOT_DLY);                          /* Indicate that task was not delayed   */
 40162ec:	00801404 	movi	r2,80
 40162f0:	00003906 	br	40163d8 <OSTimeDlyResume+0x1c0>
    }

    ptcb->OSTCBDly = 0;                                        /* Clear the time delay                 */
 40162f4:	e0bff917 	ldw	r2,-28(fp)
 40162f8:	10000b8d 	sth	zero,46(r2)
    if ((ptcb->OSTCBStat & OS_STAT_PEND_ANY) != OS_STAT_RDY) {
 40162fc:	e0bff917 	ldw	r2,-28(fp)
 4016300:	10800c03 	ldbu	r2,48(r2)
 4016304:	10803fcc 	andi	r2,r2,255
 4016308:	10800dcc 	andi	r2,r2,55
 401630c:	10000b26 	beq	r2,zero,401633c <OSTimeDlyResume+0x124>
        ptcb->OSTCBStat     &= ~OS_STAT_PEND_ANY;              /* Yes, Clear status flag               */
 4016310:	e0bff917 	ldw	r2,-28(fp)
 4016314:	10c00c03 	ldbu	r3,48(r2)
 4016318:	00bff204 	movi	r2,-56
 401631c:	1884703a 	and	r2,r3,r2
 4016320:	1007883a 	mov	r3,r2
 4016324:	e0bff917 	ldw	r2,-28(fp)
 4016328:	10c00c05 	stb	r3,48(r2)
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_TO;               /* Indicate PEND timeout                */
 401632c:	e0bff917 	ldw	r2,-28(fp)
 4016330:	00c00044 	movi	r3,1
 4016334:	10c00c45 	stb	r3,49(r2)
 4016338:	00000206 	br	4016344 <OSTimeDlyResume+0x12c>
    } else {
        ptcb->OSTCBStatPend  =  OS_STAT_PEND_OK;
 401633c:	e0bff917 	ldw	r2,-28(fp)
 4016340:	10000c45 	stb	zero,49(r2)
    }
    if ((ptcb->OSTCBStat & OS_STAT_SUSPEND) == OS_STAT_RDY) {  /* Is task suspended?                   */
 4016344:	e0bff917 	ldw	r2,-28(fp)
 4016348:	10800c03 	ldbu	r2,48(r2)
 401634c:	10803fcc 	andi	r2,r2,255
 4016350:	1080020c 	andi	r2,r2,8
 4016354:	10001b1e 	bne	r2,zero,40163c4 <OSTimeDlyResume+0x1ac>
        OSRdyGrp               |= ptcb->OSTCBBitY;             /* No,  Make ready                      */
 4016358:	e0bff917 	ldw	r2,-28(fp)
 401635c:	10c00d83 	ldbu	r3,54(r2)
 4016360:	d0a72f03 	ldbu	r2,-25412(gp)
 4016364:	1884b03a 	or	r2,r3,r2
 4016368:	d0a72f05 	stb	r2,-25412(gp)
        OSRdyTbl[ptcb->OSTCBY] |= ptcb->OSTCBBitX;
 401636c:	e0bff917 	ldw	r2,-28(fp)
 4016370:	10800d03 	ldbu	r2,52(r2)
 4016374:	10c03fcc 	andi	r3,r2,255
 4016378:	e0bff917 	ldw	r2,-28(fp)
 401637c:	10800d03 	ldbu	r2,52(r2)
 4016380:	11003fcc 	andi	r4,r2,255
 4016384:	d0a72f44 	addi	r2,gp,-25411
 4016388:	2085883a 	add	r2,r4,r2
 401638c:	11000003 	ldbu	r4,0(r2)
 4016390:	e0bff917 	ldw	r2,-28(fp)
 4016394:	10800d43 	ldbu	r2,53(r2)
 4016398:	2084b03a 	or	r2,r4,r2
 401639c:	1009883a 	mov	r4,r2
 40163a0:	d0a72f44 	addi	r2,gp,-25411
 40163a4:	1885883a 	add	r2,r3,r2
 40163a8:	11000005 	stb	r4,0(r2)
 40163ac:	e0bff717 	ldw	r2,-36(fp)
 40163b0:	e0bffc15 	stw	r2,-16(fp)
 40163b4:	e0bffc17 	ldw	r2,-16(fp)
 40163b8:	1001703a 	wrctl	status,r2
        OS_EXIT_CRITICAL();
        OS_Sched();                                            /* See if this is new highest priority  */
 40163bc:	400fb580 	call	400fb58 <OS_Sched>
 40163c0:	00000406 	br	40163d4 <OSTimeDlyResume+0x1bc>
 40163c4:	e0bff717 	ldw	r2,-36(fp)
 40163c8:	e0bffd15 	stw	r2,-12(fp)
 40163cc:	e0bffd17 	ldw	r2,-12(fp)
 40163d0:	1001703a 	wrctl	status,r2
    } else {
        OS_EXIT_CRITICAL();                                    /* Task may be suspended                */
    }
    return (OS_ERR_NONE);
 40163d4:	0005883a 	mov	r2,zero
}
 40163d8:	e037883a 	mov	sp,fp
 40163dc:	dfc00117 	ldw	ra,4(sp)
 40163e0:	df000017 	ldw	fp,0(sp)
 40163e4:	dec00204 	addi	sp,sp,8
 40163e8:	f800283a 	ret

040163ec <OSTimeGet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
INT32U  OSTimeGet (void)
{
 40163ec:	defffb04 	addi	sp,sp,-20
 40163f0:	df000415 	stw	fp,16(sp)
 40163f4:	df000404 	addi	fp,sp,16
    INT32U     ticks;
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 40163f8:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40163fc:	0005303a 	rdctl	r2,status
 4016400:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4016404:	e0fffe17 	ldw	r3,-8(fp)
 4016408:	00bfff84 	movi	r2,-2
 401640c:	1884703a 	and	r2,r3,r2
 4016410:	1001703a 	wrctl	status,r2
  
  return context;
 4016414:	e0bffe17 	ldw	r2,-8(fp)
#endif



    OS_ENTER_CRITICAL();
 4016418:	e0bffc15 	stw	r2,-16(fp)
    ticks = OSTime;
 401641c:	d0a73317 	ldw	r2,-25396(gp)
 4016420:	e0bffd15 	stw	r2,-12(fp)
 4016424:	e0bffc17 	ldw	r2,-16(fp)
 4016428:	e0bfff15 	stw	r2,-4(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401642c:	e0bfff17 	ldw	r2,-4(fp)
 4016430:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
    return (ticks);
 4016434:	e0bffd17 	ldw	r2,-12(fp)
}
 4016438:	e037883a 	mov	sp,fp
 401643c:	df000017 	ldw	fp,0(sp)
 4016440:	dec00104 	addi	sp,sp,4
 4016444:	f800283a 	ret

04016448 <OSTimeSet>:
*********************************************************************************************************
*/

#if OS_TIME_GET_SET_EN > 0
void  OSTimeSet (INT32U ticks)
{
 4016448:	defffb04 	addi	sp,sp,-20
 401644c:	df000415 	stw	fp,16(sp)
 4016450:	df000404 	addi	fp,sp,16
 4016454:	e13fff15 	stw	r4,-4(fp)
#if OS_CRITICAL_METHOD == 3                      /* Allocate storage for CPU status register           */
    OS_CPU_SR  cpu_sr = 0;
 4016458:	e03ffc15 	stw	zero,-16(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401645c:	0005303a 	rdctl	r2,status
 4016460:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4016464:	e0fffd17 	ldw	r3,-12(fp)
 4016468:	00bfff84 	movi	r2,-2
 401646c:	1884703a 	and	r2,r3,r2
 4016470:	1001703a 	wrctl	status,r2
  
  return context;
 4016474:	e0bffd17 	ldw	r2,-12(fp)
#endif



    OS_ENTER_CRITICAL();
 4016478:	e0bffc15 	stw	r2,-16(fp)
    OSTime = ticks;
 401647c:	e0bfff17 	ldw	r2,-4(fp)
 4016480:	d0a73315 	stw	r2,-25396(gp)
 4016484:	e0bffc17 	ldw	r2,-16(fp)
 4016488:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401648c:	e0bffe17 	ldw	r2,-8(fp)
 4016490:	1001703a 	wrctl	status,r2
    OS_EXIT_CRITICAL();
}
 4016494:	0001883a 	nop
 4016498:	e037883a 	mov	sp,fp
 401649c:	df000017 	ldw	fp,0(sp)
 40164a0:	dec00104 	addi	sp,sp,4
 40164a4:	f800283a 	ret

040164a8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 40164a8:	defffd04 	addi	sp,sp,-12
 40164ac:	dfc00215 	stw	ra,8(sp)
 40164b0:	df000115 	stw	fp,4(sp)
 40164b4:	df000104 	addi	fp,sp,4
 40164b8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 40164bc:	d1600804 	addi	r5,gp,-32736
 40164c0:	e13fff17 	ldw	r4,-4(fp)
 40164c4:	40175440 	call	4017544 <alt_dev_llist_insert>
}
 40164c8:	e037883a 	mov	sp,fp
 40164cc:	dfc00117 	ldw	ra,4(sp)
 40164d0:	df000017 	ldw	fp,0(sp)
 40164d4:	dec00204 	addi	sp,sp,8
 40164d8:	f800283a 	ret

040164dc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 40164dc:	defffd04 	addi	sp,sp,-12
 40164e0:	dfc00215 	stw	ra,8(sp)
 40164e4:	df000115 	stw	fp,4(sp)
 40164e8:	df000104 	addi	fp,sp,4
 40164ec:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 40164f0:	4017cb00 	call	4017cb0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 40164f4:	00800044 	movi	r2,1
 40164f8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 40164fc:	0001883a 	nop
 4016500:	e037883a 	mov	sp,fp
 4016504:	dfc00117 	ldw	ra,4(sp)
 4016508:	df000017 	ldw	fp,0(sp)
 401650c:	dec00204 	addi	sp,sp,8
 4016510:	f800283a 	ret

04016514 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 4016514:	defffe04 	addi	sp,sp,-8
 4016518:	dfc00115 	stw	ra,4(sp)
 401651c:	df000015 	stw	fp,0(sp)
 4016520:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
 4016524:	01c00c84 	movi	r7,50
 4016528:	01800144 	movi	r6,5
 401652c:	000b883a 	mov	r5,zero
 4016530:	01020134 	movhi	r4,2052
 4016534:	21040004 	addi	r4,r4,4096
 4016538:	40173180 	call	4017318 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 401653c:	01800084 	movi	r6,2
 4016540:	000b883a 	mov	r5,zero
 4016544:	010100b4 	movhi	r4,1026
 4016548:	2125af04 	addi	r4,r4,-26948
 401654c:	40166d80 	call	40166d8 <altera_avalon_jtag_uart_init>
 4016550:	010100b4 	movhi	r4,1026
 4016554:	2125a504 	addi	r4,r4,-26988
 4016558:	40164a80 	call	40164a8 <alt_dev_reg>
}
 401655c:	0001883a 	nop
 4016560:	e037883a 	mov	sp,fp
 4016564:	dfc00117 	ldw	ra,4(sp)
 4016568:	df000017 	ldw	fp,0(sp)
 401656c:	dec00204 	addi	sp,sp,8
 4016570:	f800283a 	ret

04016574 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 4016574:	defffa04 	addi	sp,sp,-24
 4016578:	dfc00515 	stw	ra,20(sp)
 401657c:	df000415 	stw	fp,16(sp)
 4016580:	df000404 	addi	fp,sp,16
 4016584:	e13ffd15 	stw	r4,-12(fp)
 4016588:	e17ffe15 	stw	r5,-8(fp)
 401658c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4016590:	e0bffd17 	ldw	r2,-12(fp)
 4016594:	10800017 	ldw	r2,0(r2)
 4016598:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 401659c:	e0bffc17 	ldw	r2,-16(fp)
 40165a0:	10c00a04 	addi	r3,r2,40
 40165a4:	e0bffd17 	ldw	r2,-12(fp)
 40165a8:	10800217 	ldw	r2,8(r2)
 40165ac:	100f883a 	mov	r7,r2
 40165b0:	e1bfff17 	ldw	r6,-4(fp)
 40165b4:	e17ffe17 	ldw	r5,-8(fp)
 40165b8:	1809883a 	mov	r4,r3
 40165bc:	4016d200 	call	4016d20 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 40165c0:	e037883a 	mov	sp,fp
 40165c4:	dfc00117 	ldw	ra,4(sp)
 40165c8:	df000017 	ldw	fp,0(sp)
 40165cc:	dec00204 	addi	sp,sp,8
 40165d0:	f800283a 	ret

040165d4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 40165d4:	defffa04 	addi	sp,sp,-24
 40165d8:	dfc00515 	stw	ra,20(sp)
 40165dc:	df000415 	stw	fp,16(sp)
 40165e0:	df000404 	addi	fp,sp,16
 40165e4:	e13ffd15 	stw	r4,-12(fp)
 40165e8:	e17ffe15 	stw	r5,-8(fp)
 40165ec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 40165f0:	e0bffd17 	ldw	r2,-12(fp)
 40165f4:	10800017 	ldw	r2,0(r2)
 40165f8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 40165fc:	e0bffc17 	ldw	r2,-16(fp)
 4016600:	10c00a04 	addi	r3,r2,40
 4016604:	e0bffd17 	ldw	r2,-12(fp)
 4016608:	10800217 	ldw	r2,8(r2)
 401660c:	100f883a 	mov	r7,r2
 4016610:	e1bfff17 	ldw	r6,-4(fp)
 4016614:	e17ffe17 	ldw	r5,-8(fp)
 4016618:	1809883a 	mov	r4,r3
 401661c:	4016fdc0 	call	4016fdc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 4016620:	e037883a 	mov	sp,fp
 4016624:	dfc00117 	ldw	ra,4(sp)
 4016628:	df000017 	ldw	fp,0(sp)
 401662c:	dec00204 	addi	sp,sp,8
 4016630:	f800283a 	ret

04016634 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 4016634:	defffc04 	addi	sp,sp,-16
 4016638:	dfc00315 	stw	ra,12(sp)
 401663c:	df000215 	stw	fp,8(sp)
 4016640:	df000204 	addi	fp,sp,8
 4016644:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4016648:	e0bfff17 	ldw	r2,-4(fp)
 401664c:	10800017 	ldw	r2,0(r2)
 4016650:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 4016654:	e0bffe17 	ldw	r2,-8(fp)
 4016658:	10c00a04 	addi	r3,r2,40
 401665c:	e0bfff17 	ldw	r2,-4(fp)
 4016660:	10800217 	ldw	r2,8(r2)
 4016664:	100b883a 	mov	r5,r2
 4016668:	1809883a 	mov	r4,r3
 401666c:	4016bc80 	call	4016bc8 <altera_avalon_jtag_uart_close>
}
 4016670:	e037883a 	mov	sp,fp
 4016674:	dfc00117 	ldw	ra,4(sp)
 4016678:	df000017 	ldw	fp,0(sp)
 401667c:	dec00204 	addi	sp,sp,8
 4016680:	f800283a 	ret

04016684 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 4016684:	defffa04 	addi	sp,sp,-24
 4016688:	dfc00515 	stw	ra,20(sp)
 401668c:	df000415 	stw	fp,16(sp)
 4016690:	df000404 	addi	fp,sp,16
 4016694:	e13ffd15 	stw	r4,-12(fp)
 4016698:	e17ffe15 	stw	r5,-8(fp)
 401669c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 40166a0:	e0bffd17 	ldw	r2,-12(fp)
 40166a4:	10800017 	ldw	r2,0(r2)
 40166a8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 40166ac:	e0bffc17 	ldw	r2,-16(fp)
 40166b0:	10800a04 	addi	r2,r2,40
 40166b4:	e1bfff17 	ldw	r6,-4(fp)
 40166b8:	e17ffe17 	ldw	r5,-8(fp)
 40166bc:	1009883a 	mov	r4,r2
 40166c0:	4016c300 	call	4016c30 <altera_avalon_jtag_uart_ioctl>
}
 40166c4:	e037883a 	mov	sp,fp
 40166c8:	dfc00117 	ldw	ra,4(sp)
 40166cc:	df000017 	ldw	fp,0(sp)
 40166d0:	dec00204 	addi	sp,sp,8
 40166d4:	f800283a 	ret

040166d8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 40166d8:	defff104 	addi	sp,sp,-60
 40166dc:	dfc00e15 	stw	ra,56(sp)
 40166e0:	df000d15 	stw	fp,52(sp)
 40166e4:	df000d04 	addi	fp,sp,52
 40166e8:	e13ff915 	stw	r4,-28(fp)
 40166ec:	e17ffa15 	stw	r5,-24(fp)
 40166f0:	e1bffb15 	stw	r6,-20(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
 40166f4:	e0bff917 	ldw	r2,-28(fp)
 40166f8:	10800c04 	addi	r2,r2,48
 40166fc:	e0bff415 	stw	r2,-48(fp)
 4016700:	e03ff80d 	sth	zero,-32(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_flag_create (OS_FLAG_GRP** pgroup, 
               OS_FLAGS flags)
{
  INT8U err;
  *pgroup = OSFlagCreate (flags, &err);
 4016704:	e0bff80b 	ldhu	r2,-32(fp)
 4016708:	e0fff884 	addi	r3,fp,-30
 401670c:	180b883a 	mov	r5,r3
 4016710:	1009883a 	mov	r4,r2
 4016714:	40106c40 	call	40106c4 <OSFlagCreate>
 4016718:	1007883a 	mov	r3,r2
 401671c:	e0bff417 	ldw	r2,-48(fp)
 4016720:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->read_lock, 1);
 4016724:	e0bff917 	ldw	r2,-28(fp)
 4016728:	10800a04 	addi	r2,r2,40
 401672c:	e0bff515 	stw	r2,-44(fp)
 4016730:	00800044 	movi	r2,1
 4016734:	e0bff78d 	sth	r2,-34(fp)
 4016738:	e0bff78b 	ldhu	r2,-34(fp)
 401673c:	1009883a 	mov	r4,r2
 4016740:	4013ea00 	call	4013ea0 <OSSemCreate>
 4016744:	1007883a 	mov	r3,r2
 4016748:	e0bff517 	ldw	r2,-44(fp)
 401674c:	10c00015 	stw	r3,0(r2)
  ALT_SEM_CREATE(&sp->write_lock, 1);
 4016750:	e0bff917 	ldw	r2,-28(fp)
 4016754:	10800b04 	addi	r2,r2,44
 4016758:	e0bff615 	stw	r2,-40(fp)
 401675c:	00800044 	movi	r2,1
 4016760:	e0bff70d 	sth	r2,-36(fp)
 4016764:	e0bff70b 	ldhu	r2,-36(fp)
 4016768:	1009883a 	mov	r4,r2
 401676c:	4013ea00 	call	4013ea0 <OSSemCreate>
 4016770:	1007883a 	mov	r3,r2
 4016774:	e0bff617 	ldw	r2,-40(fp)
 4016778:	10c00015 	stw	r3,0(r2)

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 401677c:	e0bff917 	ldw	r2,-28(fp)
 4016780:	00c00044 	movi	r3,1
 4016784:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 4016788:	e0bff917 	ldw	r2,-28(fp)
 401678c:	10800017 	ldw	r2,0(r2)
 4016790:	10800104 	addi	r2,r2,4
 4016794:	1007883a 	mov	r3,r2
 4016798:	e0bff917 	ldw	r2,-28(fp)
 401679c:	10800817 	ldw	r2,32(r2)
 40167a0:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 40167a4:	e0bffa17 	ldw	r2,-24(fp)
 40167a8:	e0fffb17 	ldw	r3,-20(fp)
 40167ac:	d8000015 	stw	zero,0(sp)
 40167b0:	e1fff917 	ldw	r7,-28(fp)
 40167b4:	01810074 	movhi	r6,1025
 40167b8:	319a0804 	addi	r6,r6,26656
 40167bc:	180b883a 	mov	r5,r3
 40167c0:	1009883a 	mov	r4,r2
 40167c4:	400d5500 	call	400d550 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 40167c8:	e0bff917 	ldw	r2,-28(fp)
 40167cc:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 40167d0:	e0bff917 	ldw	r2,-28(fp)
 40167d4:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 40167d8:	d0e73817 	ldw	r3,-25376(gp)
 40167dc:	e1fff917 	ldw	r7,-28(fp)
 40167e0:	01810074 	movhi	r6,1025
 40167e4:	319ab104 	addi	r6,r6,27332
 40167e8:	180b883a 	mov	r5,r3
 40167ec:	1009883a 	mov	r4,r2
 40167f0:	40173940 	call	4017394 <alt_alarm_start>
 40167f4:	1000040e 	bge	r2,zero,4016808 <altera_avalon_jtag_uart_init+0x130>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 40167f8:	e0fff917 	ldw	r3,-28(fp)
 40167fc:	00a00034 	movhi	r2,32768
 4016800:	10bfffc4 	addi	r2,r2,-1
 4016804:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 4016808:	0001883a 	nop
 401680c:	e037883a 	mov	sp,fp
 4016810:	dfc00117 	ldw	ra,4(sp)
 4016814:	df000017 	ldw	fp,0(sp)
 4016818:	dec00204 	addi	sp,sp,8
 401681c:	f800283a 	ret

04016820 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 4016820:	defff204 	addi	sp,sp,-56
 4016824:	dfc00d15 	stw	ra,52(sp)
 4016828:	df000c15 	stw	fp,48(sp)
 401682c:	df000c04 	addi	fp,sp,48
 4016830:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 4016834:	e0bfff17 	ldw	r2,-4(fp)
 4016838:	e0bff615 	stw	r2,-40(fp)
  unsigned int base = sp->base;
 401683c:	e0bff617 	ldw	r2,-40(fp)
 4016840:	10800017 	ldw	r2,0(r2)
 4016844:	e0bff715 	stw	r2,-36(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4016848:	e0bff717 	ldw	r2,-36(fp)
 401684c:	10800104 	addi	r2,r2,4
 4016850:	10800037 	ldwio	r2,0(r2)
 4016854:	e0bff815 	stw	r2,-32(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 4016858:	e0bff817 	ldw	r2,-32(fp)
 401685c:	1080c00c 	andi	r2,r2,768
 4016860:	10009126 	beq	r2,zero,4016aa8 <altera_avalon_jtag_uart_irq+0x288>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 4016864:	e0bff817 	ldw	r2,-32(fp)
 4016868:	1080400c 	andi	r2,r2,256
 401686c:	10004726 	beq	r2,zero,401698c <altera_avalon_jtag_uart_irq+0x16c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 4016870:	00800074 	movhi	r2,1
 4016874:	e0bff415 	stw	r2,-48(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4016878:	e0bff617 	ldw	r2,-40(fp)
 401687c:	10800d17 	ldw	r2,52(r2)
 4016880:	10800044 	addi	r2,r2,1
 4016884:	1081ffcc 	andi	r2,r2,2047
 4016888:	e0bff915 	stw	r2,-28(fp)
        if (next == sp->rx_out)
 401688c:	e0bff617 	ldw	r2,-40(fp)
 4016890:	10c00e17 	ldw	r3,56(r2)
 4016894:	e0bff917 	ldw	r2,-28(fp)
 4016898:	18802726 	beq	r3,r2,4016938 <altera_avalon_jtag_uart_irq+0x118>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 401689c:	e0bff717 	ldw	r2,-36(fp)
 40168a0:	10800037 	ldwio	r2,0(r2)
 40168a4:	e0bff415 	stw	r2,-48(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 40168a8:	e0bff417 	ldw	r2,-48(fp)
 40168ac:	10a0000c 	andi	r2,r2,32768
 40168b0:	10002326 	beq	r2,zero,4016940 <altera_avalon_jtag_uart_irq+0x120>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 40168b4:	e0bff617 	ldw	r2,-40(fp)
 40168b8:	10800d17 	ldw	r2,52(r2)
 40168bc:	e0fff417 	ldw	r3,-48(fp)
 40168c0:	1809883a 	mov	r4,r3
 40168c4:	e0fff617 	ldw	r3,-40(fp)
 40168c8:	1885883a 	add	r2,r3,r2
 40168cc:	10801104 	addi	r2,r2,68
 40168d0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40168d4:	e0bff617 	ldw	r2,-40(fp)
 40168d8:	10800d17 	ldw	r2,52(r2)
 40168dc:	10800044 	addi	r2,r2,1
 40168e0:	10c1ffcc 	andi	r3,r2,2047
 40168e4:	e0bff617 	ldw	r2,-40(fp)
 40168e8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
 40168ec:	e0bff617 	ldw	r2,-40(fp)
 40168f0:	10800c17 	ldw	r2,48(r2)
 40168f4:	e0bffb15 	stw	r2,-20(fp)
 40168f8:	00800044 	movi	r2,1
 40168fc:	e0bffc0d 	sth	r2,-16(fp)
 4016900:	00800044 	movi	r2,1
 4016904:	e0bffc85 	stb	r2,-14(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 4016908:	d0a72343 	ldbu	r2,-25459(gp)
 401690c:	10803fcc 	andi	r2,r2,255
 4016910:	103fd926 	beq	r2,zero,4016878 <__alt_mem_onchip_memory2_0+0xfbff6878>
  {
    OSFlagPost (group, flags, opt, &err);
 4016914:	e0bffc0b 	ldhu	r2,-16(fp)
 4016918:	e0fffc83 	ldbu	r3,-14(fp)
 401691c:	e13ffdc4 	addi	r4,fp,-9
 4016920:	200f883a 	mov	r7,r4
 4016924:	180d883a 	mov	r6,r3
 4016928:	100b883a 	mov	r5,r2
 401692c:	e13ffb17 	ldw	r4,-20(fp)
 4016930:	40112a00 	call	40112a0 <OSFlagPost>
      }
 4016934:	003fd006 	br	4016878 <__alt_mem_onchip_memory2_0+0xfbff6878>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 4016938:	0001883a 	nop
 401693c:	00000106 	br	4016944 <altera_avalon_jtag_uart_irq+0x124>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 4016940:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 4016944:	e0bff417 	ldw	r2,-48(fp)
 4016948:	10bfffec 	andhi	r2,r2,65535
 401694c:	10000f26 	beq	r2,zero,401698c <altera_avalon_jtag_uart_irq+0x16c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4016950:	e0bff617 	ldw	r2,-40(fp)
 4016954:	10c00817 	ldw	r3,32(r2)
 4016958:	00bfff84 	movi	r2,-2
 401695c:	1886703a 	and	r3,r3,r2
 4016960:	e0bff617 	ldw	r2,-40(fp)
 4016964:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 4016968:	e0bff717 	ldw	r2,-36(fp)
 401696c:	10800104 	addi	r2,r2,4
 4016970:	1007883a 	mov	r3,r2
 4016974:	e0bff617 	ldw	r2,-40(fp)
 4016978:	10800817 	ldw	r2,32(r2)
 401697c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4016980:	e0bff717 	ldw	r2,-36(fp)
 4016984:	10800104 	addi	r2,r2,4
 4016988:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 401698c:	e0bff817 	ldw	r2,-32(fp)
 4016990:	1080800c 	andi	r2,r2,512
 4016994:	103fac26 	beq	r2,zero,4016848 <__alt_mem_onchip_memory2_0+0xfbff6848>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 4016998:	e0bff817 	ldw	r2,-32(fp)
 401699c:	1004d43a 	srli	r2,r2,16
 40169a0:	e0bff515 	stw	r2,-44(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 40169a4:	00002606 	br	4016a40 <altera_avalon_jtag_uart_irq+0x220>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 40169a8:	e0bff717 	ldw	r2,-36(fp)
 40169ac:	e0fff617 	ldw	r3,-40(fp)
 40169b0:	18c01017 	ldw	r3,64(r3)
 40169b4:	e13ff617 	ldw	r4,-40(fp)
 40169b8:	20c7883a 	add	r3,r4,r3
 40169bc:	18c21104 	addi	r3,r3,2116
 40169c0:	18c00003 	ldbu	r3,0(r3)
 40169c4:	18c03fcc 	andi	r3,r3,255
 40169c8:	18c0201c 	xori	r3,r3,128
 40169cc:	18ffe004 	addi	r3,r3,-128
 40169d0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40169d4:	e0bff617 	ldw	r2,-40(fp)
 40169d8:	10801017 	ldw	r2,64(r2)
 40169dc:	10800044 	addi	r2,r2,1
 40169e0:	10c1ffcc 	andi	r3,r2,2047
 40169e4:	e0bff617 	ldw	r2,-40(fp)
 40169e8:	10c01015 	stw	r3,64(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);
 40169ec:	e0bff617 	ldw	r2,-40(fp)
 40169f0:	10800c17 	ldw	r2,48(r2)
 40169f4:	e0bffa15 	stw	r2,-24(fp)
 40169f8:	00800084 	movi	r2,2
 40169fc:	e0bffd0d 	sth	r2,-12(fp)
 4016a00:	00800044 	movi	r2,1
 4016a04:	e0bffd85 	stb	r2,-10(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 4016a08:	d0a72343 	ldbu	r2,-25459(gp)
 4016a0c:	10803fcc 	andi	r2,r2,255
 4016a10:	10000826 	beq	r2,zero,4016a34 <altera_avalon_jtag_uart_irq+0x214>
  {
    OSFlagPost (group, flags, opt, &err);
 4016a14:	e0bffd0b 	ldhu	r2,-12(fp)
 4016a18:	e0fffd83 	ldbu	r3,-10(fp)
 4016a1c:	e13ffe04 	addi	r4,fp,-8
 4016a20:	200f883a 	mov	r7,r4
 4016a24:	180d883a 	mov	r6,r3
 4016a28:	100b883a 	mov	r5,r2
 4016a2c:	e13ffa17 	ldw	r4,-24(fp)
 4016a30:	40112a00 	call	40112a0 <OSFlagPost>

        space--;
 4016a34:	e0bff517 	ldw	r2,-44(fp)
 4016a38:	10bfffc4 	addi	r2,r2,-1
 4016a3c:	e0bff515 	stw	r2,-44(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 4016a40:	e0bff517 	ldw	r2,-44(fp)
 4016a44:	10000526 	beq	r2,zero,4016a5c <altera_avalon_jtag_uart_irq+0x23c>
 4016a48:	e0bff617 	ldw	r2,-40(fp)
 4016a4c:	10c01017 	ldw	r3,64(r2)
 4016a50:	e0bff617 	ldw	r2,-40(fp)
 4016a54:	10800f17 	ldw	r2,60(r2)
 4016a58:	18bfd31e 	bne	r3,r2,40169a8 <__alt_mem_onchip_memory2_0+0xfbff69a8>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 4016a5c:	e0bff517 	ldw	r2,-44(fp)
 4016a60:	103f7926 	beq	r2,zero,4016848 <__alt_mem_onchip_memory2_0+0xfbff6848>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4016a64:	e0bff617 	ldw	r2,-40(fp)
 4016a68:	10c00817 	ldw	r3,32(r2)
 4016a6c:	00bfff44 	movi	r2,-3
 4016a70:	1886703a 	and	r3,r3,r2
 4016a74:	e0bff617 	ldw	r2,-40(fp)
 4016a78:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4016a7c:	e0bff617 	ldw	r2,-40(fp)
 4016a80:	10800017 	ldw	r2,0(r2)
 4016a84:	10800104 	addi	r2,r2,4
 4016a88:	1007883a 	mov	r3,r2
 4016a8c:	e0bff617 	ldw	r2,-40(fp)
 4016a90:	10800817 	ldw	r2,32(r2)
 4016a94:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4016a98:	e0bff717 	ldw	r2,-36(fp)
 4016a9c:	10800104 	addi	r2,r2,4
 4016aa0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 4016aa4:	003f6806 	br	4016848 <__alt_mem_onchip_memory2_0+0xfbff6848>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 4016aa8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 4016aac:	0001883a 	nop
 4016ab0:	e037883a 	mov	sp,fp
 4016ab4:	dfc00117 	ldw	ra,4(sp)
 4016ab8:	df000017 	ldw	fp,0(sp)
 4016abc:	dec00204 	addi	sp,sp,8
 4016ac0:	f800283a 	ret

04016ac4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 4016ac4:	defff904 	addi	sp,sp,-28
 4016ac8:	dfc00615 	stw	ra,24(sp)
 4016acc:	df000515 	stw	fp,20(sp)
 4016ad0:	df000504 	addi	fp,sp,20
 4016ad4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 4016ad8:	e0bfff17 	ldw	r2,-4(fp)
 4016adc:	e0bffb15 	stw	r2,-20(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 4016ae0:	e0bffb17 	ldw	r2,-20(fp)
 4016ae4:	10800017 	ldw	r2,0(r2)
 4016ae8:	10800104 	addi	r2,r2,4
 4016aec:	10800037 	ldwio	r2,0(r2)
 4016af0:	e0bffc15 	stw	r2,-16(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 4016af4:	e0bffc17 	ldw	r2,-16(fp)
 4016af8:	1081000c 	andi	r2,r2,1024
 4016afc:	10000b26 	beq	r2,zero,4016b2c <altera_avalon_jtag_uart_timeout+0x68>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 4016b00:	e0bffb17 	ldw	r2,-20(fp)
 4016b04:	10800017 	ldw	r2,0(r2)
 4016b08:	10800104 	addi	r2,r2,4
 4016b0c:	1007883a 	mov	r3,r2
 4016b10:	e0bffb17 	ldw	r2,-20(fp)
 4016b14:	10800817 	ldw	r2,32(r2)
 4016b18:	10810014 	ori	r2,r2,1024
 4016b1c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 4016b20:	e0bffb17 	ldw	r2,-20(fp)
 4016b24:	10000915 	stw	zero,36(r2)
 4016b28:	00002106 	br	4016bb0 <altera_avalon_jtag_uart_timeout+0xec>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 4016b2c:	e0bffb17 	ldw	r2,-20(fp)
 4016b30:	10c00917 	ldw	r3,36(r2)
 4016b34:	00a00034 	movhi	r2,32768
 4016b38:	10bfff04 	addi	r2,r2,-4
 4016b3c:	10c01c36 	bltu	r2,r3,4016bb0 <altera_avalon_jtag_uart_timeout+0xec>
    sp->host_inactive++;
 4016b40:	e0bffb17 	ldw	r2,-20(fp)
 4016b44:	10800917 	ldw	r2,36(r2)
 4016b48:	10c00044 	addi	r3,r2,1
 4016b4c:	e0bffb17 	ldw	r2,-20(fp)
 4016b50:	10c00915 	stw	r3,36(r2)
    
    if (sp->host_inactive >= sp->timeout) {
 4016b54:	e0bffb17 	ldw	r2,-20(fp)
 4016b58:	10c00917 	ldw	r3,36(r2)
 4016b5c:	e0bffb17 	ldw	r2,-20(fp)
 4016b60:	10800117 	ldw	r2,4(r2)
 4016b64:	18801236 	bltu	r3,r2,4016bb0 <altera_avalon_jtag_uart_timeout+0xec>
      /* Post an event to indicate host is inactive (for jtag_uart_read */
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
 4016b68:	e0bffb17 	ldw	r2,-20(fp)
 4016b6c:	10800c17 	ldw	r2,48(r2)
 4016b70:	e0bffd15 	stw	r2,-12(fp)
 4016b74:	00800104 	movi	r2,4
 4016b78:	e0bffe0d 	sth	r2,-8(fp)
 4016b7c:	00800044 	movi	r2,1
 4016b80:	e0bffe85 	stb	r2,-6(fp)
                   OS_FLAGS     flags, 
                   INT8U        opt)
{
  INT8U err;

  if (OSRunning)
 4016b84:	d0a72343 	ldbu	r2,-25459(gp)
 4016b88:	10803fcc 	andi	r2,r2,255
 4016b8c:	10000826 	beq	r2,zero,4016bb0 <altera_avalon_jtag_uart_timeout+0xec>
  {
    OSFlagPost (group, flags, opt, &err);
 4016b90:	e0bffe0b 	ldhu	r2,-8(fp)
 4016b94:	e0fffe83 	ldbu	r3,-6(fp)
 4016b98:	e13ffec4 	addi	r4,fp,-5
 4016b9c:	200f883a 	mov	r7,r4
 4016ba0:	180d883a 	mov	r6,r3
 4016ba4:	100b883a 	mov	r5,r2
 4016ba8:	e13ffd17 	ldw	r4,-12(fp)
 4016bac:	40112a00 	call	40112a0 <OSFlagPost>
 4016bb0:	d0a73817 	ldw	r2,-25376(gp)
    }
  }

  return alt_ticks_per_second();
}
 4016bb4:	e037883a 	mov	sp,fp
 4016bb8:	dfc00117 	ldw	ra,4(sp)
 4016bbc:	df000017 	ldw	fp,0(sp)
 4016bc0:	dec00204 	addi	sp,sp,8
 4016bc4:	f800283a 	ret

04016bc8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 4016bc8:	defffd04 	addi	sp,sp,-12
 4016bcc:	df000215 	stw	fp,8(sp)
 4016bd0:	df000204 	addi	fp,sp,8
 4016bd4:	e13ffe15 	stw	r4,-8(fp)
 4016bd8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4016bdc:	00000506 	br	4016bf4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 4016be0:	e0bfff17 	ldw	r2,-4(fp)
 4016be4:	1090000c 	andi	r2,r2,16384
 4016be8:	10000226 	beq	r2,zero,4016bf4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 4016bec:	00bffd44 	movi	r2,-11
 4016bf0:	00000b06 	br	4016c20 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4016bf4:	e0bffe17 	ldw	r2,-8(fp)
 4016bf8:	10c01017 	ldw	r3,64(r2)
 4016bfc:	e0bffe17 	ldw	r2,-8(fp)
 4016c00:	10800f17 	ldw	r2,60(r2)
 4016c04:	18800526 	beq	r3,r2,4016c1c <altera_avalon_jtag_uart_close+0x54>
 4016c08:	e0bffe17 	ldw	r2,-8(fp)
 4016c0c:	10c00917 	ldw	r3,36(r2)
 4016c10:	e0bffe17 	ldw	r2,-8(fp)
 4016c14:	10800117 	ldw	r2,4(r2)
 4016c18:	18bff136 	bltu	r3,r2,4016be0 <__alt_mem_onchip_memory2_0+0xfbff6be0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 4016c1c:	0005883a 	mov	r2,zero
}
 4016c20:	e037883a 	mov	sp,fp
 4016c24:	df000017 	ldw	fp,0(sp)
 4016c28:	dec00104 	addi	sp,sp,4
 4016c2c:	f800283a 	ret

04016c30 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 4016c30:	defffa04 	addi	sp,sp,-24
 4016c34:	df000515 	stw	fp,20(sp)
 4016c38:	df000504 	addi	fp,sp,20
 4016c3c:	e13ffd15 	stw	r4,-12(fp)
 4016c40:	e17ffe15 	stw	r5,-8(fp)
 4016c44:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 4016c48:	00bff9c4 	movi	r2,-25
 4016c4c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 4016c50:	e0bffe17 	ldw	r2,-8(fp)
 4016c54:	10da8060 	cmpeqi	r3,r2,27137
 4016c58:	1800031e 	bne	r3,zero,4016c68 <altera_avalon_jtag_uart_ioctl+0x38>
 4016c5c:	109a80a0 	cmpeqi	r2,r2,27138
 4016c60:	1000181e 	bne	r2,zero,4016cc4 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 4016c64:	00002906 	br	4016d0c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 4016c68:	e0bffd17 	ldw	r2,-12(fp)
 4016c6c:	10c00117 	ldw	r3,4(r2)
 4016c70:	00a00034 	movhi	r2,32768
 4016c74:	10bfffc4 	addi	r2,r2,-1
 4016c78:	18802126 	beq	r3,r2,4016d00 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 4016c7c:	e0bfff17 	ldw	r2,-4(fp)
 4016c80:	10800017 	ldw	r2,0(r2)
 4016c84:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 4016c88:	e0bffc17 	ldw	r2,-16(fp)
 4016c8c:	10800090 	cmplti	r2,r2,2
 4016c90:	1000061e 	bne	r2,zero,4016cac <altera_avalon_jtag_uart_ioctl+0x7c>
 4016c94:	e0fffc17 	ldw	r3,-16(fp)
 4016c98:	00a00034 	movhi	r2,32768
 4016c9c:	10bfffc4 	addi	r2,r2,-1
 4016ca0:	18800226 	beq	r3,r2,4016cac <altera_avalon_jtag_uart_ioctl+0x7c>
 4016ca4:	e0bffc17 	ldw	r2,-16(fp)
 4016ca8:	00000206 	br	4016cb4 <altera_avalon_jtag_uart_ioctl+0x84>
 4016cac:	00a00034 	movhi	r2,32768
 4016cb0:	10bfff84 	addi	r2,r2,-2
 4016cb4:	e0fffd17 	ldw	r3,-12(fp)
 4016cb8:	18800115 	stw	r2,4(r3)
      rc = 0;
 4016cbc:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 4016cc0:	00000f06 	br	4016d00 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 4016cc4:	e0bffd17 	ldw	r2,-12(fp)
 4016cc8:	10c00117 	ldw	r3,4(r2)
 4016ccc:	00a00034 	movhi	r2,32768
 4016cd0:	10bfffc4 	addi	r2,r2,-1
 4016cd4:	18800c26 	beq	r3,r2,4016d08 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 4016cd8:	e0bffd17 	ldw	r2,-12(fp)
 4016cdc:	10c00917 	ldw	r3,36(r2)
 4016ce0:	e0bffd17 	ldw	r2,-12(fp)
 4016ce4:	10800117 	ldw	r2,4(r2)
 4016ce8:	1885803a 	cmpltu	r2,r3,r2
 4016cec:	10c03fcc 	andi	r3,r2,255
 4016cf0:	e0bfff17 	ldw	r2,-4(fp)
 4016cf4:	10c00015 	stw	r3,0(r2)
      rc = 0;
 4016cf8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 4016cfc:	00000206 	br	4016d08 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 4016d00:	0001883a 	nop
 4016d04:	00000106 	br	4016d0c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 4016d08:	0001883a 	nop

  default:
    break;
  }

  return rc;
 4016d0c:	e0bffb17 	ldw	r2,-20(fp)
}
 4016d10:	e037883a 	mov	sp,fp
 4016d14:	df000017 	ldw	fp,0(sp)
 4016d18:	dec00104 	addi	sp,sp,4
 4016d1c:	f800283a 	ret

04016d20 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 4016d20:	deffed04 	addi	sp,sp,-76
 4016d24:	dfc01215 	stw	ra,72(sp)
 4016d28:	df001115 	stw	fp,68(sp)
 4016d2c:	df001104 	addi	fp,sp,68
 4016d30:	e13ffc15 	stw	r4,-16(fp)
 4016d34:	e17ffd15 	stw	r5,-12(fp)
 4016d38:	e1bffe15 	stw	r6,-8(fp)
 4016d3c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 4016d40:	e0bffd17 	ldw	r2,-12(fp)
 4016d44:	e0bff015 	stw	r2,-64(fp)

  /*
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);
 4016d48:	e0bffc17 	ldw	r2,-16(fp)
 4016d4c:	10800a17 	ldw	r2,40(r2)
 4016d50:	e0bff815 	stw	r2,-32(fp)
 4016d54:	e03ff90d 	sth	zero,-28(fp)

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sem_pend (OS_EVENT* sem, 
                  INT16U timeout)
{
  INT8U err;
  OSSemPend (sem, timeout, &err);
 4016d58:	e0bff90b 	ldhu	r2,-28(fp)
 4016d5c:	e0fffb04 	addi	r3,fp,-20
 4016d60:	180d883a 	mov	r6,r3
 4016d64:	100b883a 	mov	r5,r2
 4016d68:	e13ff817 	ldw	r4,-32(fp)
 4016d6c:	40141b80 	call	40141b8 <OSSemPend>

  while (space > 0)
 4016d70:	00006106 	br	4016ef8 <altera_avalon_jtag_uart_read+0x1d8>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 4016d74:	e0bffc17 	ldw	r2,-16(fp)
 4016d78:	10800d17 	ldw	r2,52(r2)
 4016d7c:	e0bff315 	stw	r2,-52(fp)
      out = sp->rx_out;
 4016d80:	e0bffc17 	ldw	r2,-16(fp)
 4016d84:	10800e17 	ldw	r2,56(r2)
 4016d88:	e0bff415 	stw	r2,-48(fp)

      if (in >= out)
 4016d8c:	e0fff317 	ldw	r3,-52(fp)
 4016d90:	e0bff417 	ldw	r2,-48(fp)
 4016d94:	18800536 	bltu	r3,r2,4016dac <altera_avalon_jtag_uart_read+0x8c>
        n = in - out;
 4016d98:	e0fff317 	ldw	r3,-52(fp)
 4016d9c:	e0bff417 	ldw	r2,-48(fp)
 4016da0:	1885c83a 	sub	r2,r3,r2
 4016da4:	e0bff115 	stw	r2,-60(fp)
 4016da8:	00000406 	br	4016dbc <altera_avalon_jtag_uart_read+0x9c>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 4016dac:	00c20004 	movi	r3,2048
 4016db0:	e0bff417 	ldw	r2,-48(fp)
 4016db4:	1885c83a 	sub	r2,r3,r2
 4016db8:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
 4016dbc:	e0bff117 	ldw	r2,-60(fp)
 4016dc0:	10001e26 	beq	r2,zero,4016e3c <altera_avalon_jtag_uart_read+0x11c>
        break; /* No more data available */

      if (n > space)
 4016dc4:	e0fffe17 	ldw	r3,-8(fp)
 4016dc8:	e0bff117 	ldw	r2,-60(fp)
 4016dcc:	1880022e 	bgeu	r3,r2,4016dd8 <altera_avalon_jtag_uart_read+0xb8>
        n = space;
 4016dd0:	e0bffe17 	ldw	r2,-8(fp)
 4016dd4:	e0bff115 	stw	r2,-60(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 4016dd8:	e0bffc17 	ldw	r2,-16(fp)
 4016ddc:	10c01104 	addi	r3,r2,68
 4016de0:	e0bff417 	ldw	r2,-48(fp)
 4016de4:	1885883a 	add	r2,r3,r2
 4016de8:	e1bff117 	ldw	r6,-60(fp)
 4016dec:	100b883a 	mov	r5,r2
 4016df0:	e13ff017 	ldw	r4,-64(fp)
 4016df4:	40064d80 	call	40064d8 <memcpy>
      ptr   += n;
 4016df8:	e0fff017 	ldw	r3,-64(fp)
 4016dfc:	e0bff117 	ldw	r2,-60(fp)
 4016e00:	1885883a 	add	r2,r3,r2
 4016e04:	e0bff015 	stw	r2,-64(fp)
      space -= n;
 4016e08:	e0fffe17 	ldw	r3,-8(fp)
 4016e0c:	e0bff117 	ldw	r2,-60(fp)
 4016e10:	1885c83a 	sub	r2,r3,r2
 4016e14:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4016e18:	e0fff417 	ldw	r3,-48(fp)
 4016e1c:	e0bff117 	ldw	r2,-60(fp)
 4016e20:	1885883a 	add	r2,r3,r2
 4016e24:	10c1ffcc 	andi	r3,r2,2047
 4016e28:	e0bffc17 	ldw	r2,-16(fp)
 4016e2c:	10c00e15 	stw	r3,56(r2)
    }
    while (space > 0);
 4016e30:	e0bffe17 	ldw	r2,-8(fp)
 4016e34:	00bfcf16 	blt	zero,r2,4016d74 <__alt_mem_onchip_memory2_0+0xfbff6d74>
 4016e38:	00000106 	br	4016e40 <altera_avalon_jtag_uart_read+0x120>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 4016e3c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 4016e40:	e0fff017 	ldw	r3,-64(fp)
 4016e44:	e0bffd17 	ldw	r2,-12(fp)
 4016e48:	18802e1e 	bne	r3,r2,4016f04 <altera_avalon_jtag_uart_read+0x1e4>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 4016e4c:	e0bfff17 	ldw	r2,-4(fp)
 4016e50:	1090000c 	andi	r2,r2,16384
 4016e54:	10002d1e 	bne	r2,zero,4016f0c <altera_avalon_jtag_uart_read+0x1ec>
      break;

#ifdef __ucosii__
    /* OS Present: Pend on a flag if the OS is running, otherwise spin */
    if(OSRunning == OS_TRUE) {
 4016e58:	d0a72343 	ldbu	r2,-25459(gp)
 4016e5c:	10803fcc 	andi	r2,r2,255
 4016e60:	10800058 	cmpnei	r2,r2,1
 4016e64:	1000161e 	bne	r2,zero,4016ec0 <altera_avalon_jtag_uart_read+0x1a0>
       * When running in a multi-threaded mode, we pend on the read event
       * flag set and timeout event flag set in the isr. This avoids wasting CPU
       * cycles waiting in this thread, when we could be doing something more
       * profitable elsewhere.
       */
      ALT_FLAG_PEND (sp->events,
 4016e68:	e0bffc17 	ldw	r2,-16(fp)
 4016e6c:	10800c17 	ldw	r2,48(r2)
 4016e70:	e0bff215 	stw	r2,-56(fp)
 4016e74:	00800144 	movi	r2,5
 4016e78:	e0bff98d 	sth	r2,-26(fp)
 4016e7c:	00bfe0c4 	movi	r2,-125
 4016e80:	e0bffa05 	stb	r2,-24(fp)
 4016e84:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 4016e88:	d0a72343 	ldbu	r2,-25459(gp)
 4016e8c:	10803fcc 	andi	r2,r2,255
 4016e90:	10001526 	beq	r2,zero,4016ee8 <altera_avalon_jtag_uart_read+0x1c8>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 4016e94:	e0fff98b 	ldhu	r3,-26(fp)
 4016e98:	e13ffa03 	ldbu	r4,-24(fp)
 4016e9c:	e17ffa8b 	ldhu	r5,-22(fp)
 4016ea0:	e0bffb44 	addi	r2,fp,-19
 4016ea4:	d8800015 	stw	r2,0(sp)
 4016ea8:	280f883a 	mov	r7,r5
 4016eac:	200d883a 	mov	r6,r4
 4016eb0:	180b883a 	mov	r5,r3
 4016eb4:	e13ff217 	ldw	r4,-56(fp)
 4016eb8:	4010c880 	call	4010c88 <OSFlagPend>
 4016ebc:	00000a06 	br	4016ee8 <altera_avalon_jtag_uart_read+0x1c8>
                     OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                     0);
    }
    else {
      /* Spin until more data arrives or until host disconnects */
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 4016ec0:	0001883a 	nop
 4016ec4:	e0bffc17 	ldw	r2,-16(fp)
 4016ec8:	10c00d17 	ldw	r3,52(r2)
 4016ecc:	e0bff317 	ldw	r2,-52(fp)
 4016ed0:	1880051e 	bne	r3,r2,4016ee8 <altera_avalon_jtag_uart_read+0x1c8>
 4016ed4:	e0bffc17 	ldw	r2,-16(fp)
 4016ed8:	10c00917 	ldw	r3,36(r2)
 4016edc:	e0bffc17 	ldw	r2,-16(fp)
 4016ee0:	10800117 	ldw	r2,4(r2)
 4016ee4:	18bff736 	bltu	r3,r2,4016ec4 <__alt_mem_onchip_memory2_0+0xfbff6ec4>
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 4016ee8:	e0bffc17 	ldw	r2,-16(fp)
 4016eec:	10c00d17 	ldw	r3,52(r2)
 4016ef0:	e0bff317 	ldw	r2,-52(fp)
 4016ef4:	18800726 	beq	r3,r2,4016f14 <altera_avalon_jtag_uart_read+0x1f4>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4016ef8:	e0bffe17 	ldw	r2,-8(fp)
 4016efc:	00bf9d16 	blt	zero,r2,4016d74 <__alt_mem_onchip_memory2_0+0xfbff6d74>
 4016f00:	00000506 	br	4016f18 <altera_avalon_jtag_uart_read+0x1f8>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 4016f04:	0001883a 	nop
 4016f08:	00000306 	br	4016f18 <altera_avalon_jtag_uart_read+0x1f8>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 4016f0c:	0001883a 	nop
 4016f10:	00000106 	br	4016f18 <altera_avalon_jtag_uart_read+0x1f8>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 4016f14:	0001883a 	nop
  /*
   * Now that access to the circular buffer is complete, release the read
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);
 4016f18:	e0bffc17 	ldw	r2,-16(fp)
 4016f1c:	10800a17 	ldw	r2,40(r2)
 4016f20:	1009883a 	mov	r4,r2
 4016f24:	40145300 	call	4014530 <OSSemPost>

  if (ptr != buffer)
 4016f28:	e0fff017 	ldw	r3,-64(fp)
 4016f2c:	e0bffd17 	ldw	r2,-12(fp)
 4016f30:	18801826 	beq	r3,r2,4016f94 <altera_avalon_jtag_uart_read+0x274>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4016f34:	0005303a 	rdctl	r2,status
 4016f38:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4016f3c:	e0fff717 	ldw	r3,-36(fp)
 4016f40:	00bfff84 	movi	r2,-2
 4016f44:	1884703a 	and	r2,r3,r2
 4016f48:	1001703a 	wrctl	status,r2
  
  return context;
 4016f4c:	e0bff717 	ldw	r2,-36(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 4016f50:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4016f54:	e0bffc17 	ldw	r2,-16(fp)
 4016f58:	10800817 	ldw	r2,32(r2)
 4016f5c:	10c00054 	ori	r3,r2,1
 4016f60:	e0bffc17 	ldw	r2,-16(fp)
 4016f64:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4016f68:	e0bffc17 	ldw	r2,-16(fp)
 4016f6c:	10800017 	ldw	r2,0(r2)
 4016f70:	10800104 	addi	r2,r2,4
 4016f74:	1007883a 	mov	r3,r2
 4016f78:	e0bffc17 	ldw	r2,-16(fp)
 4016f7c:	10800817 	ldw	r2,32(r2)
 4016f80:	18800035 	stwio	r2,0(r3)
 4016f84:	e0bff617 	ldw	r2,-40(fp)
 4016f88:	e0bff515 	stw	r2,-44(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4016f8c:	e0bff517 	ldw	r2,-44(fp)
 4016f90:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 4016f94:	e0fff017 	ldw	r3,-64(fp)
 4016f98:	e0bffd17 	ldw	r2,-12(fp)
 4016f9c:	18800426 	beq	r3,r2,4016fb0 <altera_avalon_jtag_uart_read+0x290>
    return ptr - buffer;
 4016fa0:	e0fff017 	ldw	r3,-64(fp)
 4016fa4:	e0bffd17 	ldw	r2,-12(fp)
 4016fa8:	1885c83a 	sub	r2,r3,r2
 4016fac:	00000606 	br	4016fc8 <altera_avalon_jtag_uart_read+0x2a8>
  else if (flags & O_NONBLOCK)
 4016fb0:	e0bfff17 	ldw	r2,-4(fp)
 4016fb4:	1090000c 	andi	r2,r2,16384
 4016fb8:	10000226 	beq	r2,zero,4016fc4 <altera_avalon_jtag_uart_read+0x2a4>
    return -EWOULDBLOCK;
 4016fbc:	00bffd44 	movi	r2,-11
 4016fc0:	00000106 	br	4016fc8 <altera_avalon_jtag_uart_read+0x2a8>
  else
    return -EIO;
 4016fc4:	00bffec4 	movi	r2,-5
}
 4016fc8:	e037883a 	mov	sp,fp
 4016fcc:	dfc00117 	ldw	ra,4(sp)
 4016fd0:	df000017 	ldw	fp,0(sp)
 4016fd4:	dec00204 	addi	sp,sp,8
 4016fd8:	f800283a 	ret

04016fdc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 4016fdc:	deffed04 	addi	sp,sp,-76
 4016fe0:	dfc01215 	stw	ra,72(sp)
 4016fe4:	df001115 	stw	fp,68(sp)
 4016fe8:	df001104 	addi	fp,sp,68
 4016fec:	e13ffc15 	stw	r4,-16(fp)
 4016ff0:	e17ffd15 	stw	r5,-12(fp)
 4016ff4:	e1bffe15 	stw	r6,-8(fp)
 4016ff8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 4016ffc:	e03ff015 	stw	zero,-64(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 4017000:	e0bffd17 	ldw	r2,-12(fp)
 4017004:	e0bff215 	stw	r2,-56(fp)

  /*
   * When running in a multi threaded environment, obtain the "write_lock"
   * semaphore. This ensures that writing to the device is thread-safe.
   */
  ALT_SEM_PEND (sp->write_lock, 0);
 4017008:	e0bffc17 	ldw	r2,-16(fp)
 401700c:	10800b17 	ldw	r2,44(r2)
 4017010:	e0bff815 	stw	r2,-32(fp)
 4017014:	e03ff90d 	sth	zero,-28(fp)
 4017018:	e0bff90b 	ldhu	r2,-28(fp)
 401701c:	e0fffb44 	addi	r3,fp,-19
 4017020:	180d883a 	mov	r6,r3
 4017024:	100b883a 	mov	r5,r2
 4017028:	e13ff817 	ldw	r4,-32(fp)
 401702c:	40141b80 	call	40141b8 <OSSemPend>

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4017030:	00003706 	br	4017110 <altera_avalon_jtag_uart_write+0x134>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 4017034:	e0bffc17 	ldw	r2,-16(fp)
 4017038:	10800f17 	ldw	r2,60(r2)
 401703c:	e0bff415 	stw	r2,-48(fp)
      out = sp->tx_out;
 4017040:	e0bffc17 	ldw	r2,-16(fp)
 4017044:	10801017 	ldw	r2,64(r2)
 4017048:	e0bff015 	stw	r2,-64(fp)

      if (in < out)
 401704c:	e0fff417 	ldw	r3,-48(fp)
 4017050:	e0bff017 	ldw	r2,-64(fp)
 4017054:	1880062e 	bgeu	r3,r2,4017070 <altera_avalon_jtag_uart_write+0x94>
        n = out - 1 - in;
 4017058:	e0fff017 	ldw	r3,-64(fp)
 401705c:	e0bff417 	ldw	r2,-48(fp)
 4017060:	1885c83a 	sub	r2,r3,r2
 4017064:	10bfffc4 	addi	r2,r2,-1
 4017068:	e0bff115 	stw	r2,-60(fp)
 401706c:	00000b06 	br	401709c <altera_avalon_jtag_uart_write+0xc0>
      else if (out > 0)
 4017070:	e0bff017 	ldw	r2,-64(fp)
 4017074:	10000526 	beq	r2,zero,401708c <altera_avalon_jtag_uart_write+0xb0>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 4017078:	00c20004 	movi	r3,2048
 401707c:	e0bff417 	ldw	r2,-48(fp)
 4017080:	1885c83a 	sub	r2,r3,r2
 4017084:	e0bff115 	stw	r2,-60(fp)
 4017088:	00000406 	br	401709c <altera_avalon_jtag_uart_write+0xc0>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 401708c:	00c1ffc4 	movi	r3,2047
 4017090:	e0bff417 	ldw	r2,-48(fp)
 4017094:	1885c83a 	sub	r2,r3,r2
 4017098:	e0bff115 	stw	r2,-60(fp)

      if (n == 0)
 401709c:	e0bff117 	ldw	r2,-60(fp)
 40170a0:	10001e26 	beq	r2,zero,401711c <altera_avalon_jtag_uart_write+0x140>
        break;

      if (n > count)
 40170a4:	e0fffe17 	ldw	r3,-8(fp)
 40170a8:	e0bff117 	ldw	r2,-60(fp)
 40170ac:	1880022e 	bgeu	r3,r2,40170b8 <altera_avalon_jtag_uart_write+0xdc>
        n = count;
 40170b0:	e0bffe17 	ldw	r2,-8(fp)
 40170b4:	e0bff115 	stw	r2,-60(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 40170b8:	e0bffc17 	ldw	r2,-16(fp)
 40170bc:	10c21104 	addi	r3,r2,2116
 40170c0:	e0bff417 	ldw	r2,-48(fp)
 40170c4:	1885883a 	add	r2,r3,r2
 40170c8:	e1bff117 	ldw	r6,-60(fp)
 40170cc:	e17ffd17 	ldw	r5,-12(fp)
 40170d0:	1009883a 	mov	r4,r2
 40170d4:	40064d80 	call	40064d8 <memcpy>
      ptr   += n;
 40170d8:	e0fffd17 	ldw	r3,-12(fp)
 40170dc:	e0bff117 	ldw	r2,-60(fp)
 40170e0:	1885883a 	add	r2,r3,r2
 40170e4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 40170e8:	e0fffe17 	ldw	r3,-8(fp)
 40170ec:	e0bff117 	ldw	r2,-60(fp)
 40170f0:	1885c83a 	sub	r2,r3,r2
 40170f4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40170f8:	e0fff417 	ldw	r3,-48(fp)
 40170fc:	e0bff117 	ldw	r2,-60(fp)
 4017100:	1885883a 	add	r2,r3,r2
 4017104:	10c1ffcc 	andi	r3,r2,2047
 4017108:	e0bffc17 	ldw	r2,-16(fp)
 401710c:	10c00f15 	stw	r3,60(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4017110:	e0bffe17 	ldw	r2,-8(fp)
 4017114:	00bfc716 	blt	zero,r2,4017034 <__alt_mem_onchip_memory2_0+0xfbff7034>
 4017118:	00000106 	br	4017120 <altera_avalon_jtag_uart_write+0x144>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 401711c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4017120:	0005303a 	rdctl	r2,status
 4017124:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4017128:	e0fff717 	ldw	r3,-36(fp)
 401712c:	00bfff84 	movi	r2,-2
 4017130:	1884703a 	and	r2,r3,r2
 4017134:	1001703a 	wrctl	status,r2
  
  return context;
 4017138:	e0bff717 	ldw	r2,-36(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 401713c:	e0bff615 	stw	r2,-40(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4017140:	e0bffc17 	ldw	r2,-16(fp)
 4017144:	10800817 	ldw	r2,32(r2)
 4017148:	10c00094 	ori	r3,r2,2
 401714c:	e0bffc17 	ldw	r2,-16(fp)
 4017150:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4017154:	e0bffc17 	ldw	r2,-16(fp)
 4017158:	10800017 	ldw	r2,0(r2)
 401715c:	10800104 	addi	r2,r2,4
 4017160:	1007883a 	mov	r3,r2
 4017164:	e0bffc17 	ldw	r2,-16(fp)
 4017168:	10800817 	ldw	r2,32(r2)
 401716c:	18800035 	stwio	r2,0(r3)
 4017170:	e0bff617 	ldw	r2,-40(fp)
 4017174:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4017178:	e0bff317 	ldw	r2,-52(fp)
 401717c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 4017180:	e0bffe17 	ldw	r2,-8(fp)
 4017184:	00802a0e 	bge	zero,r2,4017230 <altera_avalon_jtag_uart_write+0x254>
    {
      if (flags & O_NONBLOCK)
 4017188:	e0bfff17 	ldw	r2,-4(fp)
 401718c:	1090000c 	andi	r2,r2,16384
 4017190:	10002a1e 	bne	r2,zero,401723c <altera_avalon_jtag_uart_write+0x260>
        break;

#ifdef __ucosii__
      /* OS Present: Pend on a flag if the OS is running, otherwise spin */
      if(OSRunning == OS_TRUE) {
 4017194:	d0a72343 	ldbu	r2,-25459(gp)
 4017198:	10803fcc 	andi	r2,r2,255
 401719c:	10800058 	cmpnei	r2,r2,1
 40171a0:	1000161e 	bne	r2,zero,40171fc <altera_avalon_jtag_uart_write+0x220>
         * more profitable elsewhere.
         */
#ifdef ALTERA_AVALON_JTAG_UART_IGNORE_FIFO_FULL_ERROR
        if(!sp->host_inactive)
#endif
        ALT_FLAG_PEND (sp->events,
 40171a4:	e0bffc17 	ldw	r2,-16(fp)
 40171a8:	10800c17 	ldw	r2,48(r2)
 40171ac:	e0bff515 	stw	r2,-44(fp)
 40171b0:	00800184 	movi	r2,6
 40171b4:	e0bff98d 	sth	r2,-26(fp)
 40171b8:	00bfe0c4 	movi	r2,-125
 40171bc:	e0bffa05 	stb	r2,-24(fp)
 40171c0:	e03ffa8d 	sth	zero,-22(fp)
                   OS_FLAGS flags, 
                   INT8U wait_type, 
                   INT16U timeout)
{
  INT8U err;
  if (OSRunning)
 40171c4:	d0a72343 	ldbu	r2,-25459(gp)
 40171c8:	10803fcc 	andi	r2,r2,255
 40171cc:	10001526 	beq	r2,zero,4017224 <altera_avalon_jtag_uart_write+0x248>
  {
    OSFlagPend (group, flags, wait_type, timeout, &err);
 40171d0:	e0fff98b 	ldhu	r3,-26(fp)
 40171d4:	e13ffa03 	ldbu	r4,-24(fp)
 40171d8:	e17ffa8b 	ldhu	r5,-22(fp)
 40171dc:	e0bffb04 	addi	r2,fp,-20
 40171e0:	d8800015 	stw	r2,0(sp)
 40171e4:	280f883a 	mov	r7,r5
 40171e8:	200d883a 	mov	r6,r4
 40171ec:	180b883a 	mov	r5,r3
 40171f0:	e13ff517 	ldw	r4,-44(fp)
 40171f4:	4010c880 	call	4010c88 <OSFlagPend>
 40171f8:	00000a06 	br	4017224 <altera_avalon_jtag_uart_write+0x248>
        /*
         * OS not running: Wait for data to be removed from buffer.
         * Once the interrupt routine has removed some data then we
         * will be able to insert some more.
         */
        while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 40171fc:	0001883a 	nop
 4017200:	e0bffc17 	ldw	r2,-16(fp)
 4017204:	10c01017 	ldw	r3,64(r2)
 4017208:	e0bff017 	ldw	r2,-64(fp)
 401720c:	1880051e 	bne	r3,r2,4017224 <altera_avalon_jtag_uart_write+0x248>
 4017210:	e0bffc17 	ldw	r2,-16(fp)
 4017214:	10c00917 	ldw	r3,36(r2)
 4017218:	e0bffc17 	ldw	r2,-16(fp)
 401721c:	10800117 	ldw	r2,4(r2)
 4017220:	18bff736 	bltu	r3,r2,4017200 <__alt_mem_onchip_memory2_0+0xfbff7200>
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 4017224:	e0bffc17 	ldw	r2,-16(fp)
 4017228:	10800917 	ldw	r2,36(r2)
 401722c:	1000051e 	bne	r2,zero,4017244 <altera_avalon_jtag_uart_write+0x268>
         break;
    }
  }
  while (count > 0);
 4017230:	e0bffe17 	ldw	r2,-8(fp)
 4017234:	00bfb616 	blt	zero,r2,4017110 <__alt_mem_onchip_memory2_0+0xfbff7110>
 4017238:	00000306 	br	4017248 <altera_avalon_jtag_uart_write+0x26c>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 401723c:	0001883a 	nop
 4017240:	00000106 	br	4017248 <altera_avalon_jtag_uart_write+0x26c>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 4017244:	0001883a 	nop

  /*
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);
 4017248:	e0bffc17 	ldw	r2,-16(fp)
 401724c:	10800b17 	ldw	r2,44(r2)
 4017250:	1009883a 	mov	r4,r2
 4017254:	40145300 	call	4014530 <OSSemPost>

  if (ptr != start)
 4017258:	e0fffd17 	ldw	r3,-12(fp)
 401725c:	e0bff217 	ldw	r2,-56(fp)
 4017260:	18800426 	beq	r3,r2,4017274 <altera_avalon_jtag_uart_write+0x298>
    return ptr - start;
 4017264:	e0fffd17 	ldw	r3,-12(fp)
 4017268:	e0bff217 	ldw	r2,-56(fp)
 401726c:	1885c83a 	sub	r2,r3,r2
 4017270:	00000606 	br	401728c <altera_avalon_jtag_uart_write+0x2b0>
  else if (flags & O_NONBLOCK)
 4017274:	e0bfff17 	ldw	r2,-4(fp)
 4017278:	1090000c 	andi	r2,r2,16384
 401727c:	10000226 	beq	r2,zero,4017288 <altera_avalon_jtag_uart_write+0x2ac>
    return -EWOULDBLOCK;
 4017280:	00bffd44 	movi	r2,-11
 4017284:	00000106 	br	401728c <altera_avalon_jtag_uart_write+0x2b0>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 4017288:	00bffec4 	movi	r2,-5
}
 401728c:	e037883a 	mov	sp,fp
 4017290:	dfc00117 	ldw	ra,4(sp)
 4017294:	df000017 	ldw	fp,0(sp)
 4017298:	dec00204 	addi	sp,sp,8
 401729c:	f800283a 	ret

040172a0 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 40172a0:	defffa04 	addi	sp,sp,-24
 40172a4:	dfc00515 	stw	ra,20(sp)
 40172a8:	df000415 	stw	fp,16(sp)
 40172ac:	df000404 	addi	fp,sp,16
 40172b0:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 40172b4:	0007883a 	mov	r3,zero
 40172b8:	e0bfff17 	ldw	r2,-4(fp)
 40172bc:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 40172c0:	e0bfff17 	ldw	r2,-4(fp)
 40172c4:	10800104 	addi	r2,r2,4
 40172c8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40172cc:	0005303a 	rdctl	r2,status
 40172d0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40172d4:	e0fffd17 	ldw	r3,-12(fp)
 40172d8:	00bfff84 	movi	r2,-2
 40172dc:	1884703a 	and	r2,r3,r2
 40172e0:	1001703a 	wrctl	status,r2
  
  return context;
 40172e4:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 40172e8:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 40172ec:	4017ba80 	call	4017ba8 <alt_tick>
 40172f0:	e0bffc17 	ldw	r2,-16(fp)
 40172f4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40172f8:	e0bffe17 	ldw	r2,-8(fp)
 40172fc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 4017300:	0001883a 	nop
 4017304:	e037883a 	mov	sp,fp
 4017308:	dfc00117 	ldw	ra,4(sp)
 401730c:	df000017 	ldw	fp,0(sp)
 4017310:	dec00204 	addi	sp,sp,8
 4017314:	f800283a 	ret

04017318 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 4017318:	defff804 	addi	sp,sp,-32
 401731c:	dfc00715 	stw	ra,28(sp)
 4017320:	df000615 	stw	fp,24(sp)
 4017324:	df000604 	addi	fp,sp,24
 4017328:	e13ffc15 	stw	r4,-16(fp)
 401732c:	e17ffd15 	stw	r5,-12(fp)
 4017330:	e1bffe15 	stw	r6,-8(fp)
 4017334:	e1ffff15 	stw	r7,-4(fp)
 4017338:	e0bfff17 	ldw	r2,-4(fp)
 401733c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 4017340:	d0a73817 	ldw	r2,-25376(gp)
 4017344:	1000021e 	bne	r2,zero,4017350 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 4017348:	e0bffb17 	ldw	r2,-20(fp)
 401734c:	d0a73815 	stw	r2,-25376(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 4017350:	e0bffc17 	ldw	r2,-16(fp)
 4017354:	10800104 	addi	r2,r2,4
 4017358:	00c001c4 	movi	r3,7
 401735c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 4017360:	d8000015 	stw	zero,0(sp)
 4017364:	e1fffc17 	ldw	r7,-16(fp)
 4017368:	01810074 	movhi	r6,1025
 401736c:	319ca804 	addi	r6,r6,29344
 4017370:	e17ffe17 	ldw	r5,-8(fp)
 4017374:	e13ffd17 	ldw	r4,-12(fp)
 4017378:	400d5500 	call	400d550 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 401737c:	0001883a 	nop
 4017380:	e037883a 	mov	sp,fp
 4017384:	dfc00117 	ldw	ra,4(sp)
 4017388:	df000017 	ldw	fp,0(sp)
 401738c:	dec00204 	addi	sp,sp,8
 4017390:	f800283a 	ret

04017394 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 4017394:	defff504 	addi	sp,sp,-44
 4017398:	df000a15 	stw	fp,40(sp)
 401739c:	df000a04 	addi	fp,sp,40
 40173a0:	e13ffc15 	stw	r4,-16(fp)
 40173a4:	e17ffd15 	stw	r5,-12(fp)
 40173a8:	e1bffe15 	stw	r6,-8(fp)
 40173ac:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 40173b0:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 40173b4:	d0a73817 	ldw	r2,-25376(gp)
  
  if (alt_ticks_per_second ())
 40173b8:	10003c26 	beq	r2,zero,40174ac <alt_alarm_start+0x118>
  {
    if (alarm)
 40173bc:	e0bffc17 	ldw	r2,-16(fp)
 40173c0:	10003826 	beq	r2,zero,40174a4 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 40173c4:	e0bffc17 	ldw	r2,-16(fp)
 40173c8:	e0fffe17 	ldw	r3,-8(fp)
 40173cc:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 40173d0:	e0bffc17 	ldw	r2,-16(fp)
 40173d4:	e0ffff17 	ldw	r3,-4(fp)
 40173d8:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40173dc:	0005303a 	rdctl	r2,status
 40173e0:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40173e4:	e0fff917 	ldw	r3,-28(fp)
 40173e8:	00bfff84 	movi	r2,-2
 40173ec:	1884703a 	and	r2,r3,r2
 40173f0:	1001703a 	wrctl	status,r2
  
  return context;
 40173f4:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 40173f8:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 40173fc:	d0a73917 	ldw	r2,-25372(gp)
      
      current_nticks = alt_nticks();
 4017400:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 4017404:	e0fffd17 	ldw	r3,-12(fp)
 4017408:	e0bff617 	ldw	r2,-40(fp)
 401740c:	1885883a 	add	r2,r3,r2
 4017410:	10c00044 	addi	r3,r2,1
 4017414:	e0bffc17 	ldw	r2,-16(fp)
 4017418:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 401741c:	e0bffc17 	ldw	r2,-16(fp)
 4017420:	10c00217 	ldw	r3,8(r2)
 4017424:	e0bff617 	ldw	r2,-40(fp)
 4017428:	1880042e 	bgeu	r3,r2,401743c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 401742c:	e0bffc17 	ldw	r2,-16(fp)
 4017430:	00c00044 	movi	r3,1
 4017434:	10c00405 	stb	r3,16(r2)
 4017438:	00000206 	br	4017444 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 401743c:	e0bffc17 	ldw	r2,-16(fp)
 4017440:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 4017444:	e0bffc17 	ldw	r2,-16(fp)
 4017448:	d0e02d04 	addi	r3,gp,-32588
 401744c:	e0fffa15 	stw	r3,-24(fp)
 4017450:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4017454:	e0bffb17 	ldw	r2,-20(fp)
 4017458:	e0fffa17 	ldw	r3,-24(fp)
 401745c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 4017460:	e0bffa17 	ldw	r2,-24(fp)
 4017464:	10c00017 	ldw	r3,0(r2)
 4017468:	e0bffb17 	ldw	r2,-20(fp)
 401746c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4017470:	e0bffa17 	ldw	r2,-24(fp)
 4017474:	10800017 	ldw	r2,0(r2)
 4017478:	e0fffb17 	ldw	r3,-20(fp)
 401747c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4017480:	e0bffa17 	ldw	r2,-24(fp)
 4017484:	e0fffb17 	ldw	r3,-20(fp)
 4017488:	10c00015 	stw	r3,0(r2)
 401748c:	e0bff817 	ldw	r2,-32(fp)
 4017490:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4017494:	e0bff717 	ldw	r2,-36(fp)
 4017498:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 401749c:	0005883a 	mov	r2,zero
 40174a0:	00000306 	br	40174b0 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 40174a4:	00bffa84 	movi	r2,-22
 40174a8:	00000106 	br	40174b0 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 40174ac:	00bfde84 	movi	r2,-134
  }
}
 40174b0:	e037883a 	mov	sp,fp
 40174b4:	df000017 	ldw	fp,0(sp)
 40174b8:	dec00104 	addi	sp,sp,4
 40174bc:	f800283a 	ret

040174c0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 40174c0:	defffe04 	addi	sp,sp,-8
 40174c4:	df000115 	stw	fp,4(sp)
 40174c8:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 40174cc:	e03fff15 	stw	zero,-4(fp)
 40174d0:	00000506 	br	40174e8 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 40174d4:	e0bfff17 	ldw	r2,-4(fp)
 40174d8:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 40174dc:	e0bfff17 	ldw	r2,-4(fp)
 40174e0:	10800804 	addi	r2,r2,32
 40174e4:	e0bfff15 	stw	r2,-4(fp)
 40174e8:	e0bfff17 	ldw	r2,-4(fp)
 40174ec:	00ffffd4 	movui	r3,65535
 40174f0:	18bff82e 	bgeu	r3,r2,40174d4 <__alt_mem_onchip_memory2_0+0xfbff74d4>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 40174f4:	0001883a 	nop
 40174f8:	e037883a 	mov	sp,fp
 40174fc:	df000017 	ldw	fp,0(sp)
 4017500:	dec00104 	addi	sp,sp,4
 4017504:	f800283a 	ret

04017508 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4017508:	defffe04 	addi	sp,sp,-8
 401750c:	dfc00115 	stw	ra,4(sp)
 4017510:	df000015 	stw	fp,0(sp)
 4017514:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4017518:	d0a00b17 	ldw	r2,-32724(gp)
 401751c:	10000326 	beq	r2,zero,401752c <alt_get_errno+0x24>
 4017520:	d0a00b17 	ldw	r2,-32724(gp)
 4017524:	103ee83a 	callr	r2
 4017528:	00000106 	br	4017530 <alt_get_errno+0x28>
 401752c:	d0a71904 	addi	r2,gp,-25500
}
 4017530:	e037883a 	mov	sp,fp
 4017534:	dfc00117 	ldw	ra,4(sp)
 4017538:	df000017 	ldw	fp,0(sp)
 401753c:	dec00204 	addi	sp,sp,8
 4017540:	f800283a 	ret

04017544 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 4017544:	defffa04 	addi	sp,sp,-24
 4017548:	dfc00515 	stw	ra,20(sp)
 401754c:	df000415 	stw	fp,16(sp)
 4017550:	df000404 	addi	fp,sp,16
 4017554:	e13ffe15 	stw	r4,-8(fp)
 4017558:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 401755c:	e0bffe17 	ldw	r2,-8(fp)
 4017560:	10000326 	beq	r2,zero,4017570 <alt_dev_llist_insert+0x2c>
 4017564:	e0bffe17 	ldw	r2,-8(fp)
 4017568:	10800217 	ldw	r2,8(r2)
 401756c:	1000061e 	bne	r2,zero,4017588 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 4017570:	40175080 	call	4017508 <alt_get_errno>
 4017574:	1007883a 	mov	r3,r2
 4017578:	00800584 	movi	r2,22
 401757c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 4017580:	00bffa84 	movi	r2,-22
 4017584:	00001306 	br	40175d4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 4017588:	e0bffe17 	ldw	r2,-8(fp)
 401758c:	e0ffff17 	ldw	r3,-4(fp)
 4017590:	e0fffc15 	stw	r3,-16(fp)
 4017594:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4017598:	e0bffd17 	ldw	r2,-12(fp)
 401759c:	e0fffc17 	ldw	r3,-16(fp)
 40175a0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 40175a4:	e0bffc17 	ldw	r2,-16(fp)
 40175a8:	10c00017 	ldw	r3,0(r2)
 40175ac:	e0bffd17 	ldw	r2,-12(fp)
 40175b0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 40175b4:	e0bffc17 	ldw	r2,-16(fp)
 40175b8:	10800017 	ldw	r2,0(r2)
 40175bc:	e0fffd17 	ldw	r3,-12(fp)
 40175c0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 40175c4:	e0bffc17 	ldw	r2,-16(fp)
 40175c8:	e0fffd17 	ldw	r3,-12(fp)
 40175cc:	10c00015 	stw	r3,0(r2)

  return 0;  
 40175d0:	0005883a 	mov	r2,zero
}
 40175d4:	e037883a 	mov	sp,fp
 40175d8:	dfc00117 	ldw	ra,4(sp)
 40175dc:	df000017 	ldw	fp,0(sp)
 40175e0:	dec00204 	addi	sp,sp,8
 40175e4:	f800283a 	ret

040175e8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 40175e8:	defffd04 	addi	sp,sp,-12
 40175ec:	dfc00215 	stw	ra,8(sp)
 40175f0:	df000115 	stw	fp,4(sp)
 40175f4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 40175f8:	008100b4 	movhi	r2,1026
 40175fc:	10a1b004 	addi	r2,r2,-31040
 4017600:	e0bfff15 	stw	r2,-4(fp)
 4017604:	00000606 	br	4017620 <_do_ctors+0x38>
        (*ctor) (); 
 4017608:	e0bfff17 	ldw	r2,-4(fp)
 401760c:	10800017 	ldw	r2,0(r2)
 4017610:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4017614:	e0bfff17 	ldw	r2,-4(fp)
 4017618:	10bfff04 	addi	r2,r2,-4
 401761c:	e0bfff15 	stw	r2,-4(fp)
 4017620:	e0ffff17 	ldw	r3,-4(fp)
 4017624:	008100b4 	movhi	r2,1026
 4017628:	10a1b104 	addi	r2,r2,-31036
 401762c:	18bff62e 	bgeu	r3,r2,4017608 <__alt_mem_onchip_memory2_0+0xfbff7608>
        (*ctor) (); 
}
 4017630:	0001883a 	nop
 4017634:	e037883a 	mov	sp,fp
 4017638:	dfc00117 	ldw	ra,4(sp)
 401763c:	df000017 	ldw	fp,0(sp)
 4017640:	dec00204 	addi	sp,sp,8
 4017644:	f800283a 	ret

04017648 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 4017648:	defffd04 	addi	sp,sp,-12
 401764c:	dfc00215 	stw	ra,8(sp)
 4017650:	df000115 	stw	fp,4(sp)
 4017654:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4017658:	008100b4 	movhi	r2,1026
 401765c:	10a1b004 	addi	r2,r2,-31040
 4017660:	e0bfff15 	stw	r2,-4(fp)
 4017664:	00000606 	br	4017680 <_do_dtors+0x38>
        (*dtor) (); 
 4017668:	e0bfff17 	ldw	r2,-4(fp)
 401766c:	10800017 	ldw	r2,0(r2)
 4017670:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4017674:	e0bfff17 	ldw	r2,-4(fp)
 4017678:	10bfff04 	addi	r2,r2,-4
 401767c:	e0bfff15 	stw	r2,-4(fp)
 4017680:	e0ffff17 	ldw	r3,-4(fp)
 4017684:	008100b4 	movhi	r2,1026
 4017688:	10a1b104 	addi	r2,r2,-31036
 401768c:	18bff62e 	bgeu	r3,r2,4017668 <__alt_mem_onchip_memory2_0+0xfbff7668>
        (*dtor) (); 
}
 4017690:	0001883a 	nop
 4017694:	e037883a 	mov	sp,fp
 4017698:	dfc00117 	ldw	ra,4(sp)
 401769c:	df000017 	ldw	fp,0(sp)
 40176a0:	dec00204 	addi	sp,sp,8
 40176a4:	f800283a 	ret

040176a8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 40176a8:	defffe04 	addi	sp,sp,-8
 40176ac:	dfc00115 	stw	ra,4(sp)
 40176b0:	df000015 	stw	fp,0(sp)
 40176b4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 40176b8:	01400074 	movhi	r5,1
 40176bc:	0009883a 	mov	r4,zero
 40176c0:	40182a00 	call	40182a0 <alt_icache_flush>
#endif
}
 40176c4:	0001883a 	nop
 40176c8:	e037883a 	mov	sp,fp
 40176cc:	dfc00117 	ldw	ra,4(sp)
 40176d0:	df000017 	ldw	fp,0(sp)
 40176d4:	dec00204 	addi	sp,sp,8
 40176d8:	f800283a 	ret

040176dc <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 40176dc:	defffe04 	addi	sp,sp,-8
 40176e0:	df000115 	stw	fp,4(sp)
 40176e4:	df000104 	addi	fp,sp,4
 40176e8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 40176ec:	e0bfff17 	ldw	r2,-4(fp)
 40176f0:	10bffe84 	addi	r2,r2,-6
 40176f4:	10c00428 	cmpgeui	r3,r2,16
 40176f8:	18001a1e 	bne	r3,zero,4017764 <alt_exception_cause_generated_bad_addr+0x88>
 40176fc:	100690ba 	slli	r3,r2,2
 4017700:	00810074 	movhi	r2,1025
 4017704:	109dc504 	addi	r2,r2,30484
 4017708:	1885883a 	add	r2,r3,r2
 401770c:	10800017 	ldw	r2,0(r2)
 4017710:	1000683a 	jmp	r2
 4017714:	04017754 	movui	r16,1501
 4017718:	04017754 	movui	r16,1501
 401771c:	04017764 	muli	r16,zero,1501
 4017720:	04017764 	muli	r16,zero,1501
 4017724:	04017764 	muli	r16,zero,1501
 4017728:	04017754 	movui	r16,1501
 401772c:	0401775c 	xori	r16,zero,1501
 4017730:	04017764 	muli	r16,zero,1501
 4017734:	04017754 	movui	r16,1501
 4017738:	04017754 	movui	r16,1501
 401773c:	04017764 	muli	r16,zero,1501
 4017740:	04017754 	movui	r16,1501
 4017744:	0401775c 	xori	r16,zero,1501
 4017748:	04017764 	muli	r16,zero,1501
 401774c:	04017764 	muli	r16,zero,1501
 4017750:	04017754 	movui	r16,1501
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 4017754:	00800044 	movi	r2,1
 4017758:	00000306 	br	4017768 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 401775c:	0005883a 	mov	r2,zero
 4017760:	00000106 	br	4017768 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 4017764:	0005883a 	mov	r2,zero
  }
}
 4017768:	e037883a 	mov	sp,fp
 401776c:	df000017 	ldw	fp,0(sp)
 4017770:	dec00104 	addi	sp,sp,4
 4017774:	f800283a 	ret

04017778 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 4017778:	defff904 	addi	sp,sp,-28
 401777c:	dfc00615 	stw	ra,24(sp)
 4017780:	df000515 	stw	fp,20(sp)
 4017784:	df000504 	addi	fp,sp,20
 4017788:	e13ffc15 	stw	r4,-16(fp)
 401778c:	e17ffd15 	stw	r5,-12(fp)
 4017790:	e1bffe15 	stw	r6,-8(fp)
 4017794:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 4017798:	e1bfff17 	ldw	r6,-4(fp)
 401779c:	e17ffe17 	ldw	r5,-8(fp)
 40177a0:	e13ffd17 	ldw	r4,-12(fp)
 40177a4:	40179b80 	call	40179b8 <open>
 40177a8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 40177ac:	e0bffb17 	ldw	r2,-20(fp)
 40177b0:	10001c16 	blt	r2,zero,4017824 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 40177b4:	008100b4 	movhi	r2,1026
 40177b8:	10a54504 	addi	r2,r2,-27372
 40177bc:	e0fffb17 	ldw	r3,-20(fp)
 40177c0:	18c00324 	muli	r3,r3,12
 40177c4:	10c5883a 	add	r2,r2,r3
 40177c8:	10c00017 	ldw	r3,0(r2)
 40177cc:	e0bffc17 	ldw	r2,-16(fp)
 40177d0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 40177d4:	008100b4 	movhi	r2,1026
 40177d8:	10a54504 	addi	r2,r2,-27372
 40177dc:	e0fffb17 	ldw	r3,-20(fp)
 40177e0:	18c00324 	muli	r3,r3,12
 40177e4:	10c5883a 	add	r2,r2,r3
 40177e8:	10800104 	addi	r2,r2,4
 40177ec:	10c00017 	ldw	r3,0(r2)
 40177f0:	e0bffc17 	ldw	r2,-16(fp)
 40177f4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 40177f8:	008100b4 	movhi	r2,1026
 40177fc:	10a54504 	addi	r2,r2,-27372
 4017800:	e0fffb17 	ldw	r3,-20(fp)
 4017804:	18c00324 	muli	r3,r3,12
 4017808:	10c5883a 	add	r2,r2,r3
 401780c:	10800204 	addi	r2,r2,8
 4017810:	10c00017 	ldw	r3,0(r2)
 4017814:	e0bffc17 	ldw	r2,-16(fp)
 4017818:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 401781c:	e13ffb17 	ldw	r4,-20(fp)
 4017820:	400dcc00 	call	400dcc0 <alt_release_fd>
  }
} 
 4017824:	0001883a 	nop
 4017828:	e037883a 	mov	sp,fp
 401782c:	dfc00117 	ldw	ra,4(sp)
 4017830:	df000017 	ldw	fp,0(sp)
 4017834:	dec00204 	addi	sp,sp,8
 4017838:	f800283a 	ret

0401783c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 401783c:	defffb04 	addi	sp,sp,-20
 4017840:	dfc00415 	stw	ra,16(sp)
 4017844:	df000315 	stw	fp,12(sp)
 4017848:	df000304 	addi	fp,sp,12
 401784c:	e13ffd15 	stw	r4,-12(fp)
 4017850:	e17ffe15 	stw	r5,-8(fp)
 4017854:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 4017858:	01c07fc4 	movi	r7,511
 401785c:	01800044 	movi	r6,1
 4017860:	e17ffd17 	ldw	r5,-12(fp)
 4017864:	010100b4 	movhi	r4,1026
 4017868:	21254804 	addi	r4,r4,-27360
 401786c:	40177780 	call	4017778 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 4017870:	01c07fc4 	movi	r7,511
 4017874:	000d883a 	mov	r6,zero
 4017878:	e17ffe17 	ldw	r5,-8(fp)
 401787c:	010100b4 	movhi	r4,1026
 4017880:	21254504 	addi	r4,r4,-27372
 4017884:	40177780 	call	4017778 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 4017888:	01c07fc4 	movi	r7,511
 401788c:	01800044 	movi	r6,1
 4017890:	e17fff17 	ldw	r5,-4(fp)
 4017894:	010100b4 	movhi	r4,1026
 4017898:	21254b04 	addi	r4,r4,-27348
 401789c:	40177780 	call	4017778 <alt_open_fd>
}  
 40178a0:	0001883a 	nop
 40178a4:	e037883a 	mov	sp,fp
 40178a8:	dfc00117 	ldw	ra,4(sp)
 40178ac:	df000017 	ldw	fp,0(sp)
 40178b0:	dec00204 	addi	sp,sp,8
 40178b4:	f800283a 	ret

040178b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40178b8:	defffe04 	addi	sp,sp,-8
 40178bc:	dfc00115 	stw	ra,4(sp)
 40178c0:	df000015 	stw	fp,0(sp)
 40178c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40178c8:	d0a00b17 	ldw	r2,-32724(gp)
 40178cc:	10000326 	beq	r2,zero,40178dc <alt_get_errno+0x24>
 40178d0:	d0a00b17 	ldw	r2,-32724(gp)
 40178d4:	103ee83a 	callr	r2
 40178d8:	00000106 	br	40178e0 <alt_get_errno+0x28>
 40178dc:	d0a71904 	addi	r2,gp,-25500
}
 40178e0:	e037883a 	mov	sp,fp
 40178e4:	dfc00117 	ldw	ra,4(sp)
 40178e8:	df000017 	ldw	fp,0(sp)
 40178ec:	dec00204 	addi	sp,sp,8
 40178f0:	f800283a 	ret

040178f4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 40178f4:	defffd04 	addi	sp,sp,-12
 40178f8:	df000215 	stw	fp,8(sp)
 40178fc:	df000204 	addi	fp,sp,8
 4017900:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 4017904:	e0bfff17 	ldw	r2,-4(fp)
 4017908:	10800217 	ldw	r2,8(r2)
 401790c:	10d00034 	orhi	r3,r2,16384
 4017910:	e0bfff17 	ldw	r2,-4(fp)
 4017914:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4017918:	e03ffe15 	stw	zero,-8(fp)
 401791c:	00001d06 	br	4017994 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4017920:	008100b4 	movhi	r2,1026
 4017924:	10a54504 	addi	r2,r2,-27372
 4017928:	e0fffe17 	ldw	r3,-8(fp)
 401792c:	18c00324 	muli	r3,r3,12
 4017930:	10c5883a 	add	r2,r2,r3
 4017934:	10c00017 	ldw	r3,0(r2)
 4017938:	e0bfff17 	ldw	r2,-4(fp)
 401793c:	10800017 	ldw	r2,0(r2)
 4017940:	1880111e 	bne	r3,r2,4017988 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4017944:	008100b4 	movhi	r2,1026
 4017948:	10a54504 	addi	r2,r2,-27372
 401794c:	e0fffe17 	ldw	r3,-8(fp)
 4017950:	18c00324 	muli	r3,r3,12
 4017954:	10c5883a 	add	r2,r2,r3
 4017958:	10800204 	addi	r2,r2,8
 401795c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4017960:	1000090e 	bge	r2,zero,4017988 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 4017964:	e0bffe17 	ldw	r2,-8(fp)
 4017968:	10c00324 	muli	r3,r2,12
 401796c:	008100b4 	movhi	r2,1026
 4017970:	10a54504 	addi	r2,r2,-27372
 4017974:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4017978:	e0bfff17 	ldw	r2,-4(fp)
 401797c:	18800226 	beq	r3,r2,4017988 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 4017980:	00bffcc4 	movi	r2,-13
 4017984:	00000806 	br	40179a8 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4017988:	e0bffe17 	ldw	r2,-8(fp)
 401798c:	10800044 	addi	r2,r2,1
 4017990:	e0bffe15 	stw	r2,-8(fp)
 4017994:	d0a00a17 	ldw	r2,-32728(gp)
 4017998:	1007883a 	mov	r3,r2
 401799c:	e0bffe17 	ldw	r2,-8(fp)
 40179a0:	18bfdf2e 	bgeu	r3,r2,4017920 <__alt_mem_onchip_memory2_0+0xfbff7920>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 40179a4:	0005883a 	mov	r2,zero
}
 40179a8:	e037883a 	mov	sp,fp
 40179ac:	df000017 	ldw	fp,0(sp)
 40179b0:	dec00104 	addi	sp,sp,4
 40179b4:	f800283a 	ret

040179b8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 40179b8:	defff604 	addi	sp,sp,-40
 40179bc:	dfc00915 	stw	ra,36(sp)
 40179c0:	df000815 	stw	fp,32(sp)
 40179c4:	df000804 	addi	fp,sp,32
 40179c8:	e13ffd15 	stw	r4,-12(fp)
 40179cc:	e17ffe15 	stw	r5,-8(fp)
 40179d0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 40179d4:	00bfffc4 	movi	r2,-1
 40179d8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 40179dc:	00bffb44 	movi	r2,-19
 40179e0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 40179e4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 40179e8:	d1600804 	addi	r5,gp,-32736
 40179ec:	e13ffd17 	ldw	r4,-12(fp)
 40179f0:	401802c0 	call	401802c <alt_find_dev>
 40179f4:	e0bff815 	stw	r2,-32(fp)
 40179f8:	e0bff817 	ldw	r2,-32(fp)
 40179fc:	1000051e 	bne	r2,zero,4017a14 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 4017a00:	e13ffd17 	ldw	r4,-12(fp)
 4017a04:	40180bc0 	call	40180bc <alt_find_file>
 4017a08:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 4017a0c:	00800044 	movi	r2,1
 4017a10:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 4017a14:	e0bff817 	ldw	r2,-32(fp)
 4017a18:	10002926 	beq	r2,zero,4017ac0 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 4017a1c:	e13ff817 	ldw	r4,-32(fp)
 4017a20:	40181c40 	call	40181c4 <alt_get_fd>
 4017a24:	e0bff915 	stw	r2,-28(fp)
 4017a28:	e0bff917 	ldw	r2,-28(fp)
 4017a2c:	1000030e 	bge	r2,zero,4017a3c <open+0x84>
    {
      status = index;
 4017a30:	e0bff917 	ldw	r2,-28(fp)
 4017a34:	e0bffa15 	stw	r2,-24(fp)
 4017a38:	00002306 	br	4017ac8 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 4017a3c:	e0bff917 	ldw	r2,-28(fp)
 4017a40:	10c00324 	muli	r3,r2,12
 4017a44:	008100b4 	movhi	r2,1026
 4017a48:	10a54504 	addi	r2,r2,-27372
 4017a4c:	1885883a 	add	r2,r3,r2
 4017a50:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 4017a54:	e0fffe17 	ldw	r3,-8(fp)
 4017a58:	00900034 	movhi	r2,16384
 4017a5c:	10bfffc4 	addi	r2,r2,-1
 4017a60:	1886703a 	and	r3,r3,r2
 4017a64:	e0bffc17 	ldw	r2,-16(fp)
 4017a68:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 4017a6c:	e0bffb17 	ldw	r2,-20(fp)
 4017a70:	1000051e 	bne	r2,zero,4017a88 <open+0xd0>
 4017a74:	e13ffc17 	ldw	r4,-16(fp)
 4017a78:	40178f40 	call	40178f4 <alt_file_locked>
 4017a7c:	e0bffa15 	stw	r2,-24(fp)
 4017a80:	e0bffa17 	ldw	r2,-24(fp)
 4017a84:	10001016 	blt	r2,zero,4017ac8 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 4017a88:	e0bff817 	ldw	r2,-32(fp)
 4017a8c:	10800317 	ldw	r2,12(r2)
 4017a90:	10000826 	beq	r2,zero,4017ab4 <open+0xfc>
 4017a94:	e0bff817 	ldw	r2,-32(fp)
 4017a98:	10800317 	ldw	r2,12(r2)
 4017a9c:	e1ffff17 	ldw	r7,-4(fp)
 4017aa0:	e1bffe17 	ldw	r6,-8(fp)
 4017aa4:	e17ffd17 	ldw	r5,-12(fp)
 4017aa8:	e13ffc17 	ldw	r4,-16(fp)
 4017aac:	103ee83a 	callr	r2
 4017ab0:	00000106 	br	4017ab8 <open+0x100>
 4017ab4:	0005883a 	mov	r2,zero
 4017ab8:	e0bffa15 	stw	r2,-24(fp)
 4017abc:	00000206 	br	4017ac8 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 4017ac0:	00bffb44 	movi	r2,-19
 4017ac4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 4017ac8:	e0bffa17 	ldw	r2,-24(fp)
 4017acc:	1000090e 	bge	r2,zero,4017af4 <open+0x13c>
  {
    alt_release_fd (index);  
 4017ad0:	e13ff917 	ldw	r4,-28(fp)
 4017ad4:	400dcc00 	call	400dcc0 <alt_release_fd>
    ALT_ERRNO = -status;
 4017ad8:	40178b80 	call	40178b8 <alt_get_errno>
 4017adc:	1007883a 	mov	r3,r2
 4017ae0:	e0bffa17 	ldw	r2,-24(fp)
 4017ae4:	0085c83a 	sub	r2,zero,r2
 4017ae8:	18800015 	stw	r2,0(r3)
    return -1;
 4017aec:	00bfffc4 	movi	r2,-1
 4017af0:	00000106 	br	4017af8 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 4017af4:	e0bff917 	ldw	r2,-28(fp)
}
 4017af8:	e037883a 	mov	sp,fp
 4017afc:	dfc00117 	ldw	ra,4(sp)
 4017b00:	df000017 	ldw	fp,0(sp)
 4017b04:	dec00204 	addi	sp,sp,8
 4017b08:	f800283a 	ret

04017b0c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 4017b0c:	defffa04 	addi	sp,sp,-24
 4017b10:	df000515 	stw	fp,20(sp)
 4017b14:	df000504 	addi	fp,sp,20
 4017b18:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4017b1c:	0005303a 	rdctl	r2,status
 4017b20:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4017b24:	e0fffc17 	ldw	r3,-16(fp)
 4017b28:	00bfff84 	movi	r2,-2
 4017b2c:	1884703a 	and	r2,r3,r2
 4017b30:	1001703a 	wrctl	status,r2
  
  return context;
 4017b34:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 4017b38:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 4017b3c:	e0bfff17 	ldw	r2,-4(fp)
 4017b40:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 4017b44:	e0bffd17 	ldw	r2,-12(fp)
 4017b48:	10800017 	ldw	r2,0(r2)
 4017b4c:	e0fffd17 	ldw	r3,-12(fp)
 4017b50:	18c00117 	ldw	r3,4(r3)
 4017b54:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 4017b58:	e0bffd17 	ldw	r2,-12(fp)
 4017b5c:	10800117 	ldw	r2,4(r2)
 4017b60:	e0fffd17 	ldw	r3,-12(fp)
 4017b64:	18c00017 	ldw	r3,0(r3)
 4017b68:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 4017b6c:	e0bffd17 	ldw	r2,-12(fp)
 4017b70:	e0fffd17 	ldw	r3,-12(fp)
 4017b74:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 4017b78:	e0bffd17 	ldw	r2,-12(fp)
 4017b7c:	e0fffd17 	ldw	r3,-12(fp)
 4017b80:	10c00015 	stw	r3,0(r2)
 4017b84:	e0bffb17 	ldw	r2,-20(fp)
 4017b88:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4017b8c:	e0bffe17 	ldw	r2,-8(fp)
 4017b90:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 4017b94:	0001883a 	nop
 4017b98:	e037883a 	mov	sp,fp
 4017b9c:	df000017 	ldw	fp,0(sp)
 4017ba0:	dec00104 	addi	sp,sp,4
 4017ba4:	f800283a 	ret

04017ba8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 4017ba8:	defffb04 	addi	sp,sp,-20
 4017bac:	dfc00415 	stw	ra,16(sp)
 4017bb0:	df000315 	stw	fp,12(sp)
 4017bb4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 4017bb8:	d0a02d17 	ldw	r2,-32588(gp)
 4017bbc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 4017bc0:	d0a73917 	ldw	r2,-25372(gp)
 4017bc4:	10800044 	addi	r2,r2,1
 4017bc8:	d0a73915 	stw	r2,-25372(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4017bcc:	00002e06 	br	4017c88 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 4017bd0:	e0bffd17 	ldw	r2,-12(fp)
 4017bd4:	10800017 	ldw	r2,0(r2)
 4017bd8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 4017bdc:	e0bffd17 	ldw	r2,-12(fp)
 4017be0:	10800403 	ldbu	r2,16(r2)
 4017be4:	10803fcc 	andi	r2,r2,255
 4017be8:	10000426 	beq	r2,zero,4017bfc <alt_tick+0x54>
 4017bec:	d0a73917 	ldw	r2,-25372(gp)
 4017bf0:	1000021e 	bne	r2,zero,4017bfc <alt_tick+0x54>
    {
      alarm->rollover = 0;
 4017bf4:	e0bffd17 	ldw	r2,-12(fp)
 4017bf8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 4017bfc:	e0bffd17 	ldw	r2,-12(fp)
 4017c00:	10800217 	ldw	r2,8(r2)
 4017c04:	d0e73917 	ldw	r3,-25372(gp)
 4017c08:	18801d36 	bltu	r3,r2,4017c80 <alt_tick+0xd8>
 4017c0c:	e0bffd17 	ldw	r2,-12(fp)
 4017c10:	10800403 	ldbu	r2,16(r2)
 4017c14:	10803fcc 	andi	r2,r2,255
 4017c18:	1000191e 	bne	r2,zero,4017c80 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 4017c1c:	e0bffd17 	ldw	r2,-12(fp)
 4017c20:	10800317 	ldw	r2,12(r2)
 4017c24:	e0fffd17 	ldw	r3,-12(fp)
 4017c28:	18c00517 	ldw	r3,20(r3)
 4017c2c:	1809883a 	mov	r4,r3
 4017c30:	103ee83a 	callr	r2
 4017c34:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 4017c38:	e0bfff17 	ldw	r2,-4(fp)
 4017c3c:	1000031e 	bne	r2,zero,4017c4c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 4017c40:	e13ffd17 	ldw	r4,-12(fp)
 4017c44:	4017b0c0 	call	4017b0c <alt_alarm_stop>
 4017c48:	00000d06 	br	4017c80 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 4017c4c:	e0bffd17 	ldw	r2,-12(fp)
 4017c50:	10c00217 	ldw	r3,8(r2)
 4017c54:	e0bfff17 	ldw	r2,-4(fp)
 4017c58:	1887883a 	add	r3,r3,r2
 4017c5c:	e0bffd17 	ldw	r2,-12(fp)
 4017c60:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 4017c64:	e0bffd17 	ldw	r2,-12(fp)
 4017c68:	10c00217 	ldw	r3,8(r2)
 4017c6c:	d0a73917 	ldw	r2,-25372(gp)
 4017c70:	1880032e 	bgeu	r3,r2,4017c80 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 4017c74:	e0bffd17 	ldw	r2,-12(fp)
 4017c78:	00c00044 	movi	r3,1
 4017c7c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 4017c80:	e0bffe17 	ldw	r2,-8(fp)
 4017c84:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4017c88:	e0fffd17 	ldw	r3,-12(fp)
 4017c8c:	d0a02d04 	addi	r2,gp,-32588
 4017c90:	18bfcf1e 	bne	r3,r2,4017bd0 <__alt_mem_onchip_memory2_0+0xfbff7bd0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 4017c94:	400eeac0 	call	400eeac <OSTimeTick>
}
 4017c98:	0001883a 	nop
 4017c9c:	e037883a 	mov	sp,fp
 4017ca0:	dfc00117 	ldw	ra,4(sp)
 4017ca4:	df000017 	ldw	fp,0(sp)
 4017ca8:	dec00204 	addi	sp,sp,8
 4017cac:	f800283a 	ret

04017cb0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 4017cb0:	deffff04 	addi	sp,sp,-4
 4017cb4:	df000015 	stw	fp,0(sp)
 4017cb8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 4017cbc:	000170fa 	wrctl	ienable,zero
}
 4017cc0:	0001883a 	nop
 4017cc4:	e037883a 	mov	sp,fp
 4017cc8:	df000017 	ldw	fp,0(sp)
 4017ccc:	dec00104 	addi	sp,sp,4
 4017cd0:	f800283a 	ret

04017cd4 <OSCtxSw>:

      /* 
       * Save the remaining registers to the stack. 
       */

      addi sp, sp, -44
 4017cd4:	defff504 	addi	sp,sp,-44
      bltu  sp, et, .Lstack_overflow

#endif

#if OS_THREAD_SAFE_NEWLIB
      ldw r3, %gprel(_impure_ptr)(gp)   /* load the pointer */
 4017cd8:	d0e00117 	ldw	r3,-32764(gp)
#endif /* OS_THREAD_SAFE_NEWLIB */

      ldw r4, %gprel(OSTCBCur)(gp)
 4017cdc:	d1273217 	ldw	r4,-25400(gp)

      stw ra,  0(sp)
 4017ce0:	dfc00015 	stw	ra,0(sp)
      stw fp,  4(sp)
 4017ce4:	df000115 	stw	fp,4(sp)
      stw r23, 8(sp)
 4017ce8:	ddc00215 	stw	r23,8(sp)
      stw r22, 12(sp)
 4017cec:	dd800315 	stw	r22,12(sp)
      stw r21, 16(sp)
 4017cf0:	dd400415 	stw	r21,16(sp)
      stw r20, 20(sp)
 4017cf4:	dd000515 	stw	r20,20(sp)
      stw r19, 24(sp)
 4017cf8:	dcc00615 	stw	r19,24(sp)
      stw r18, 28(sp)
 4017cfc:	dc800715 	stw	r18,28(sp)
      stw r17, 32(sp)
 4017d00:	dc400815 	stw	r17,32(sp)
      stw r16, 36(sp)
 4017d04:	dc000915 	stw	r16,36(sp)
       * store the current value of _impure_ptr so it can be restored
       * later; _impure_ptr is asigned on a per task basis. It is used
       * by Newlib to achieve reentrancy.	
       */

      stw r3, 40(sp)                  /* save the impure pointer */
 4017d08:	d8c00a15 	stw	r3,40(sp)
      /* 
       * Save the current tasks stack pointer into the current tasks OS_TCB.
       * i.e. OSTCBCur->OSTCBStkPtr = sp;
       */

      stw sp, (r4)                  /* save the stack pointer (OSTCBStkPtr */
 4017d0c:	26c00015 	stw	sp,0(r4)

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 4017d10:	4017f480 	call	4017f48 <OSTaskSwHook>
      /*
       * OSTCBCur = OSTCBHighRdy; 
       * OSPrioCur = OSPrioHighRdy; 
       */

      ldw r4, %gprel(OSTCBHighRdy)(gp)
 4017d14:	d1272d17 	ldw	r4,-25420(gp)
      ldb r5, %gprel(OSPrioHighRdy)(gp)
 4017d18:	d1672507 	ldb	r5,-25452(gp)

      stw r4, %gprel(OSTCBCur)(gp)     /* set the current task to be the new task */
 4017d1c:	d1273215 	stw	r4,-25400(gp)
      stb r5, %gprel(OSPrioCur)(gp)    /* store the new task's priority as the current */
 4017d20:	d1672545 	stb	r5,-25451(gp)

      /*
       * Set the stack pointer to point to the new task's stack
       */

      ldw sp, (r4) /* the stack pointer is the first entry in the OS_TCB structure */
 4017d24:	26c00017 	ldw	sp,0(r4)
      /*
       * restore the value of _impure_ptr ; _impure_ptr is asigned on a 
       * per task basis. It is used by Newlib to achieve reentrancy.	
       */

      ldw r3, 40(sp)                  /* load the new impure pointer */
 4017d28:	d8c00a17 	ldw	r3,40(sp)

      /*
       * Restore the saved registers for the new task.
       */

      ldw ra,  0(sp)
 4017d2c:	dfc00017 	ldw	ra,0(sp)
      ldw fp,  4(sp)
 4017d30:	df000117 	ldw	fp,4(sp)
      ldw r23, 8(sp)
 4017d34:	ddc00217 	ldw	r23,8(sp)
      ldw r22, 12(sp)
 4017d38:	dd800317 	ldw	r22,12(sp)
      ldw r21, 16(sp)
 4017d3c:	dd400417 	ldw	r21,16(sp)
      ldw r20, 20(sp)
 4017d40:	dd000517 	ldw	r20,20(sp)
      ldw r19, 24(sp)
 4017d44:	dcc00617 	ldw	r19,24(sp)
      ldw r18, 28(sp)
 4017d48:	dc800717 	ldw	r18,28(sp)
      ldw r17, 32(sp)
 4017d4c:	dc400817 	ldw	r17,32(sp)
      ldw r16, 36(sp)
 4017d50:	dc000917 	ldw	r16,36(sp)

#if OS_THREAD_SAFE_NEWLIB

      stw r3, %gprel(_impure_ptr)(gp) /* update _impure_ptr */
 4017d54:	d0e00115 	stw	r3,-32764(gp)

      stw et, %gprel(alt_stack_limit_value)(gp)

#endif

      addi sp, sp, 44
 4017d58:	dec00b04 	addi	sp,sp,44

      /*
       * resume execution of the new task.
       */

      ret
 4017d5c:	f800283a 	ret

04017d60 <OSStartHighRdy>:

      /*
       * disable interrupts so that the scheduler doesn't run while
       * we're initialising this task.
       */  
      rdctl r18, status
 4017d60:	0025303a 	rdctl	r18,status
      subi  r17, zero, 2   /* r17 = 0xfffffffe */
 4017d64:	047fff84 	movi	r17,-2
      and   r18, r18, r17
 4017d68:	9464703a 	and	r18,r18,r17
      wrctl status, r18
 4017d6c:	9001703a 	wrctl	status,r18

      /*
       * Call the user definable OSTaskSWHook()
       */

      call OSTaskSwHook
 4017d70:	4017f480 	call	4017f48 <OSTaskSwHook>

      /* 
       * set OSRunning = TRUE.
       */

      movi r18, 1                    /* set r18 to the value 'TRUE' */
 4017d74:	04800044 	movi	r18,1
      stb r18, %gprel(OSRunning)(gp) /* save this to OSRunning */
 4017d78:	d4a72345 	stb	r18,-25459(gp)

      /*
       * start execution of the new task.
       */

      br 9b
 4017d7c:	003fe506 	br	4017d14 <__alt_mem_onchip_memory2_0+0xfbff7d14>

04017d80 <OSStartTsk>:

OSStartTsk:
      /* This instruction is never executed.  Its here to make the
       * backtrace work right 
       */
      movi sp, 0
 4017d80:	06c00004 	movi	sp,0

      /* Enable interrupts */
      rdctl r2, status
 4017d84:	0005303a 	rdctl	r2,status
      ori   r2, r2, 0x1
 4017d88:	10800054 	ori	r2,r2,1
      wrctl status, r2
 4017d8c:	1001703a 	wrctl	status,r2

      ldw r2, 4(sp)
 4017d90:	d8800117 	ldw	r2,4(sp)
      ldw r4, 0(sp)
 4017d94:	d9000017 	ldw	r4,0(sp)

      addi sp, sp, 8
 4017d98:	dec00204 	addi	sp,sp,8

      callr r2
 4017d9c:	103ee83a 	callr	r2

      nop
 4017da0:	0001883a 	nop

04017da4 <OSTaskStkInit>:
 *              been placed on the stack in the proper order.
 *
 ***********************************************************************************************/

OS_STK *OSTaskStkInit(void (*task)(void *pd), void *pdata, OS_STK *pstk, INT16U opt)
{
 4017da4:	defff704 	addi	sp,sp,-36
 4017da8:	dfc00815 	stw	ra,32(sp)
 4017dac:	df000715 	stw	fp,28(sp)
 4017db0:	df000704 	addi	fp,sp,28
 4017db4:	e13ffc15 	stw	r4,-16(fp)
 4017db8:	e17ffd15 	stw	r5,-12(fp)
 4017dbc:	e1bffe15 	stw	r6,-8(fp)
 4017dc0:	3805883a 	mov	r2,r7
 4017dc4:	e0bfff0d 	sth	r2,-4(fp)
    * create and initialise the impure pointer used for Newlib thread local storage.
    * This is only done if the C library is being used in a thread safe mode. Otherwise
    * a single reent structure is used for all threads, which saves memory.
    */

   local_impure_ptr = (struct _reent*)((((INT32U)(pstk)) & ~0x3) - sizeof(struct _reent));
 4017dc8:	e0fffe17 	ldw	r3,-8(fp)
 4017dcc:	00bfff04 	movi	r2,-4
 4017dd0:	1884703a 	and	r2,r3,r2
 4017dd4:	10bef704 	addi	r2,r2,-1060
 4017dd8:	e0bff915 	stw	r2,-28(fp)

   _REENT_INIT_PTR (local_impure_ptr);
 4017ddc:	01810904 	movi	r6,1060
 4017de0:	000b883a 	mov	r5,zero
 4017de4:	e13ff917 	ldw	r4,-28(fp)
 4017de8:	400677c0 	call	400677c <memset>
 4017dec:	e0bff917 	ldw	r2,-28(fp)
 4017df0:	10c0bb04 	addi	r3,r2,748
 4017df4:	e0bff917 	ldw	r2,-28(fp)
 4017df8:	10c00115 	stw	r3,4(r2)
 4017dfc:	e0bff917 	ldw	r2,-28(fp)
 4017e00:	10c0d504 	addi	r3,r2,852
 4017e04:	e0bff917 	ldw	r2,-28(fp)
 4017e08:	10c00215 	stw	r3,8(r2)
 4017e0c:	e0bff917 	ldw	r2,-28(fp)
 4017e10:	10c0ef04 	addi	r3,r2,956
 4017e14:	e0bff917 	ldw	r2,-28(fp)
 4017e18:	10c00315 	stw	r3,12(r2)
 4017e1c:	e0fff917 	ldw	r3,-28(fp)
 4017e20:	008100b4 	movhi	r2,1026
 4017e24:	10a31104 	addi	r2,r2,-29628
 4017e28:	18800d15 	stw	r2,52(r3)
 4017e2c:	e0bff917 	ldw	r2,-28(fp)
 4017e30:	00c00044 	movi	r3,1
 4017e34:	10c02915 	stw	r3,164(r2)
 4017e38:	10002a15 	stw	zero,168(r2)
 4017e3c:	e0bff917 	ldw	r2,-28(fp)
 4017e40:	00ccc384 	movi	r3,13070
 4017e44:	10c02b0d 	sth	r3,172(r2)
 4017e48:	e0bff917 	ldw	r2,-28(fp)
 4017e4c:	00eaf344 	movi	r3,-21555
 4017e50:	10c02b8d 	sth	r3,174(r2)
 4017e54:	e0bff917 	ldw	r2,-28(fp)
 4017e58:	00c48d04 	movi	r3,4660
 4017e5c:	10c02c0d 	sth	r3,176(r2)
 4017e60:	e0bff917 	ldw	r2,-28(fp)
 4017e64:	00f99b44 	movi	r3,-6547
 4017e68:	10c02c8d 	sth	r3,178(r2)
 4017e6c:	e0bff917 	ldw	r2,-28(fp)
 4017e70:	00f7bb04 	movi	r3,-8468
 4017e74:	10c02d0d 	sth	r3,180(r2)
 4017e78:	e0bff917 	ldw	r2,-28(fp)
 4017e7c:	00c00144 	movi	r3,5
 4017e80:	10c02d8d 	sth	r3,182(r2)
 4017e84:	e0bff917 	ldw	r2,-28(fp)
 4017e88:	00c002c4 	movi	r3,11
 4017e8c:	10c02e0d 	sth	r3,184(r2)
   /* 
    * create a stack frame at the top of the stack (leaving space for the 
    * reentrant data structure).
    */

   frame_pointer = (INT32U*) local_impure_ptr;
 4017e90:	e0bff917 	ldw	r2,-28(fp)
 4017e94:	e0bffa15 	stw	r2,-24(fp)
#else
   frame_pointer =   (INT32U*) (((INT32U)(pstk)) & ~0x3);
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk = frame_pointer - 13;
 4017e98:	e0bffa17 	ldw	r2,-24(fp)
 4017e9c:	10bff304 	addi	r2,r2,-52
 4017ea0:	e0bffb15 	stw	r2,-20(fp)

   /* Now fill the stack frame. */

   stk[12] = (INT32U)task;            /* task address (ra) */
 4017ea4:	e0bffb17 	ldw	r2,-20(fp)
 4017ea8:	10800c04 	addi	r2,r2,48
 4017eac:	e0fffc17 	ldw	r3,-16(fp)
 4017eb0:	10c00015 	stw	r3,0(r2)
   stk[11] = (INT32U) pdata;          /* first register argument (r4) */
 4017eb4:	e0bffb17 	ldw	r2,-20(fp)
 4017eb8:	10800b04 	addi	r2,r2,44
 4017ebc:	e0fffd17 	ldw	r3,-12(fp)
 4017ec0:	10c00015 	stw	r3,0(r2)

#if OS_THREAD_SAFE_NEWLIB
   stk[10] = (INT32U) local_impure_ptr; /* value of _impure_ptr for this thread */
 4017ec4:	e0bffb17 	ldw	r2,-20(fp)
 4017ec8:	10800a04 	addi	r2,r2,40
 4017ecc:	e0fff917 	ldw	r3,-28(fp)
 4017ed0:	10c00015 	stw	r3,0(r2)
#endif /* OS_THREAD_SAFE_NEWLIB */
   stk[0]  = ((INT32U)&OSStartTsk) + 4;/* exception return address (ea) */  
 4017ed4:	00810074 	movhi	r2,1025
 4017ed8:	109f6004 	addi	r2,r2,32128
 4017edc:	10c00104 	addi	r3,r2,4
 4017ee0:	e0bffb17 	ldw	r2,-20(fp)
 4017ee4:	10c00015 	stw	r3,0(r2)
    */
   __asm__ (".set OSTCBNext_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBNext)));
   __asm__ (".set OSTCBPrio_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBPrio)));
   __asm__ (".set OSTCBStkPtr_OFFSET,%0" :: "i" (offsetof(OS_TCB, OSTCBStkPtr)));
  
   return((OS_STK *)stk);
 4017ee8:	e0bffb17 	ldw	r2,-20(fp)
}
 4017eec:	e037883a 	mov	sp,fp
 4017ef0:	dfc00117 	ldw	ra,4(sp)
 4017ef4:	df000017 	ldw	fp,0(sp)
 4017ef8:	dec00204 	addi	sp,sp,8
 4017efc:	f800283a 	ret

04017f00 <OSTaskCreateHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskCreateHook (OS_TCB *ptcb)
{
 4017f00:	defffe04 	addi	sp,sp,-8
 4017f04:	df000115 	stw	fp,4(sp)
 4017f08:	df000104 	addi	fp,sp,4
 4017f0c:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning */
}
 4017f10:	0001883a 	nop
 4017f14:	e037883a 	mov	sp,fp
 4017f18:	df000017 	ldw	fp,0(sp)
 4017f1c:	dec00104 	addi	sp,sp,4
 4017f20:	f800283a 	ret

04017f24 <OSTaskDelHook>:
*
* Note(s)    : 1) Interrupts are disabled during this call.
*********************************************************************************************************
*/
void OSTaskDelHook (OS_TCB *ptcb)
{
 4017f24:	defffe04 	addi	sp,sp,-8
 4017f28:	df000115 	stw	fp,4(sp)
 4017f2c:	df000104 	addi	fp,sp,4
 4017f30:	e13fff15 	stw	r4,-4(fp)
    ptcb = ptcb;                       /* Prevent compiler warning                                     */
}
 4017f34:	0001883a 	nop
 4017f38:	e037883a 	mov	sp,fp
 4017f3c:	df000017 	ldw	fp,0(sp)
 4017f40:	dec00104 	addi	sp,sp,4
 4017f44:	f800283a 	ret

04017f48 <OSTaskSwHook>:
*                 will be 'switched in' (i.e. the highest priority task) and, 'OSTCBCur' points to the
*                 task being switched out (i.e. the preempted task).
*********************************************************************************************************
*/
void OSTaskSwHook (void)
{
 4017f48:	deffff04 	addi	sp,sp,-4
 4017f4c:	df000015 	stw	fp,0(sp)
 4017f50:	d839883a 	mov	fp,sp
}
 4017f54:	0001883a 	nop
 4017f58:	e037883a 	mov	sp,fp
 4017f5c:	df000017 	ldw	fp,0(sp)
 4017f60:	dec00104 	addi	sp,sp,4
 4017f64:	f800283a 	ret

04017f68 <OSTaskStatHook>:
*
* Arguments  : none
*********************************************************************************************************
*/
void OSTaskStatHook (void)
{
 4017f68:	deffff04 	addi	sp,sp,-4
 4017f6c:	df000015 	stw	fp,0(sp)
 4017f70:	d839883a 	mov	fp,sp
}
 4017f74:	0001883a 	nop
 4017f78:	e037883a 	mov	sp,fp
 4017f7c:	df000017 	ldw	fp,0(sp)
 4017f80:	dec00104 	addi	sp,sp,4
 4017f84:	f800283a 	ret

04017f88 <OSTimeTickHook>:
#ifdef ALT_INICHE
void cticks_hook(void);
#endif

void OSTimeTickHook (void)
{
 4017f88:	deffff04 	addi	sp,sp,-4
 4017f8c:	df000015 	stw	fp,0(sp)
 4017f90:	d839883a 	mov	fp,sp
    
#ifdef ALT_INICHE
    /* Service the Interniche timer */
    cticks_hook();
#endif
}
 4017f94:	0001883a 	nop
 4017f98:	e037883a 	mov	sp,fp
 4017f9c:	df000017 	ldw	fp,0(sp)
 4017fa0:	dec00104 	addi	sp,sp,4
 4017fa4:	f800283a 	ret

04017fa8 <OSInitHookBegin>:

void OSInitHookBegin(void)
{
 4017fa8:	deffff04 	addi	sp,sp,-4
 4017fac:	df000015 	stw	fp,0(sp)
 4017fb0:	d839883a 	mov	fp,sp
#if OS_TMR_EN > 0
    OSTmrCtr = 0;
#endif
}
 4017fb4:	0001883a 	nop
 4017fb8:	e037883a 	mov	sp,fp
 4017fbc:	df000017 	ldw	fp,0(sp)
 4017fc0:	dec00104 	addi	sp,sp,4
 4017fc4:	f800283a 	ret

04017fc8 <OSInitHookEnd>:

void OSInitHookEnd(void)
{
 4017fc8:	deffff04 	addi	sp,sp,-4
 4017fcc:	df000015 	stw	fp,0(sp)
 4017fd0:	d839883a 	mov	fp,sp
}
 4017fd4:	0001883a 	nop
 4017fd8:	e037883a 	mov	sp,fp
 4017fdc:	df000017 	ldw	fp,0(sp)
 4017fe0:	dec00104 	addi	sp,sp,4
 4017fe4:	f800283a 	ret

04017fe8 <OSTaskIdleHook>:

void OSTaskIdleHook(void)
{
 4017fe8:	deffff04 	addi	sp,sp,-4
 4017fec:	df000015 	stw	fp,0(sp)
 4017ff0:	d839883a 	mov	fp,sp
}
 4017ff4:	0001883a 	nop
 4017ff8:	e037883a 	mov	sp,fp
 4017ffc:	df000017 	ldw	fp,0(sp)
 4018000:	dec00104 	addi	sp,sp,4
 4018004:	f800283a 	ret

04018008 <OSTCBInitHook>:

void OSTCBInitHook(OS_TCB *ptcb)
{
 4018008:	defffe04 	addi	sp,sp,-8
 401800c:	df000115 	stw	fp,4(sp)
 4018010:	df000104 	addi	fp,sp,4
 4018014:	e13fff15 	stw	r4,-4(fp)
}
 4018018:	0001883a 	nop
 401801c:	e037883a 	mov	sp,fp
 4018020:	df000017 	ldw	fp,0(sp)
 4018024:	dec00104 	addi	sp,sp,4
 4018028:	f800283a 	ret

0401802c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 401802c:	defffa04 	addi	sp,sp,-24
 4018030:	dfc00515 	stw	ra,20(sp)
 4018034:	df000415 	stw	fp,16(sp)
 4018038:	df000404 	addi	fp,sp,16
 401803c:	e13ffe15 	stw	r4,-8(fp)
 4018040:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 4018044:	e0bfff17 	ldw	r2,-4(fp)
 4018048:	10800017 	ldw	r2,0(r2)
 401804c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 4018050:	e13ffe17 	ldw	r4,-8(fp)
 4018054:	4000b4c0 	call	4000b4c <strlen>
 4018058:	10800044 	addi	r2,r2,1
 401805c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4018060:	00000d06 	br	4018098 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 4018064:	e0bffc17 	ldw	r2,-16(fp)
 4018068:	10800217 	ldw	r2,8(r2)
 401806c:	e0fffd17 	ldw	r3,-12(fp)
 4018070:	180d883a 	mov	r6,r3
 4018074:	e17ffe17 	ldw	r5,-8(fp)
 4018078:	1009883a 	mov	r4,r2
 401807c:	401837c0 	call	401837c <memcmp>
 4018080:	1000021e 	bne	r2,zero,401808c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 4018084:	e0bffc17 	ldw	r2,-16(fp)
 4018088:	00000706 	br	40180a8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 401808c:	e0bffc17 	ldw	r2,-16(fp)
 4018090:	10800017 	ldw	r2,0(r2)
 4018094:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4018098:	e0fffc17 	ldw	r3,-16(fp)
 401809c:	e0bfff17 	ldw	r2,-4(fp)
 40180a0:	18bff01e 	bne	r3,r2,4018064 <__alt_mem_onchip_memory2_0+0xfbff8064>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 40180a4:	0005883a 	mov	r2,zero
}
 40180a8:	e037883a 	mov	sp,fp
 40180ac:	dfc00117 	ldw	ra,4(sp)
 40180b0:	df000017 	ldw	fp,0(sp)
 40180b4:	dec00204 	addi	sp,sp,8
 40180b8:	f800283a 	ret

040180bc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 40180bc:	defffb04 	addi	sp,sp,-20
 40180c0:	dfc00415 	stw	ra,16(sp)
 40180c4:	df000315 	stw	fp,12(sp)
 40180c8:	df000304 	addi	fp,sp,12
 40180cc:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 40180d0:	d0a00617 	ldw	r2,-32744(gp)
 40180d4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 40180d8:	00003106 	br	40181a0 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 40180dc:	e0bffd17 	ldw	r2,-12(fp)
 40180e0:	10800217 	ldw	r2,8(r2)
 40180e4:	1009883a 	mov	r4,r2
 40180e8:	4000b4c0 	call	4000b4c <strlen>
 40180ec:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 40180f0:	e0bffd17 	ldw	r2,-12(fp)
 40180f4:	10c00217 	ldw	r3,8(r2)
 40180f8:	e0bffe17 	ldw	r2,-8(fp)
 40180fc:	10bfffc4 	addi	r2,r2,-1
 4018100:	1885883a 	add	r2,r3,r2
 4018104:	10800003 	ldbu	r2,0(r2)
 4018108:	10803fcc 	andi	r2,r2,255
 401810c:	1080201c 	xori	r2,r2,128
 4018110:	10bfe004 	addi	r2,r2,-128
 4018114:	10800bd8 	cmpnei	r2,r2,47
 4018118:	1000031e 	bne	r2,zero,4018128 <alt_find_file+0x6c>
    {
      len -= 1;
 401811c:	e0bffe17 	ldw	r2,-8(fp)
 4018120:	10bfffc4 	addi	r2,r2,-1
 4018124:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4018128:	e0bffe17 	ldw	r2,-8(fp)
 401812c:	e0ffff17 	ldw	r3,-4(fp)
 4018130:	1885883a 	add	r2,r3,r2
 4018134:	10800003 	ldbu	r2,0(r2)
 4018138:	10803fcc 	andi	r2,r2,255
 401813c:	1080201c 	xori	r2,r2,128
 4018140:	10bfe004 	addi	r2,r2,-128
 4018144:	10800be0 	cmpeqi	r2,r2,47
 4018148:	1000081e 	bne	r2,zero,401816c <alt_find_file+0xb0>
 401814c:	e0bffe17 	ldw	r2,-8(fp)
 4018150:	e0ffff17 	ldw	r3,-4(fp)
 4018154:	1885883a 	add	r2,r3,r2
 4018158:	10800003 	ldbu	r2,0(r2)
 401815c:	10803fcc 	andi	r2,r2,255
 4018160:	1080201c 	xori	r2,r2,128
 4018164:	10bfe004 	addi	r2,r2,-128
 4018168:	10000a1e 	bne	r2,zero,4018194 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 401816c:	e0bffd17 	ldw	r2,-12(fp)
 4018170:	10800217 	ldw	r2,8(r2)
 4018174:	e0fffe17 	ldw	r3,-8(fp)
 4018178:	180d883a 	mov	r6,r3
 401817c:	e17fff17 	ldw	r5,-4(fp)
 4018180:	1009883a 	mov	r4,r2
 4018184:	401837c0 	call	401837c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4018188:	1000021e 	bne	r2,zero,4018194 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 401818c:	e0bffd17 	ldw	r2,-12(fp)
 4018190:	00000706 	br	40181b0 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 4018194:	e0bffd17 	ldw	r2,-12(fp)
 4018198:	10800017 	ldw	r2,0(r2)
 401819c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 40181a0:	e0fffd17 	ldw	r3,-12(fp)
 40181a4:	d0a00604 	addi	r2,gp,-32744
 40181a8:	18bfcc1e 	bne	r3,r2,40180dc <__alt_mem_onchip_memory2_0+0xfbff80dc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 40181ac:	0005883a 	mov	r2,zero
}
 40181b0:	e037883a 	mov	sp,fp
 40181b4:	dfc00117 	ldw	ra,4(sp)
 40181b8:	df000017 	ldw	fp,0(sp)
 40181bc:	dec00204 	addi	sp,sp,8
 40181c0:	f800283a 	ret

040181c4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 40181c4:	defff904 	addi	sp,sp,-28
 40181c8:	dfc00615 	stw	ra,24(sp)
 40181cc:	df000515 	stw	fp,20(sp)
 40181d0:	df000504 	addi	fp,sp,20
 40181d4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 40181d8:	00bffa04 	movi	r2,-24
 40181dc:	e0bffc15 	stw	r2,-16(fp)
  /* 
   * Take the alt_fd_list_lock semaphore in order to avoid races when 
   * accessing the file descriptor pool.
   */
  
  ALT_SEM_PEND(alt_fd_list_lock, 0);
 40181e0:	d0a71a17 	ldw	r2,-25496(gp)
 40181e4:	e0bffd15 	stw	r2,-12(fp)
 40181e8:	e03ffe0d 	sth	zero,-8(fp)
 40181ec:	e0bffe0b 	ldhu	r2,-8(fp)
 40181f0:	e0fffe84 	addi	r3,fp,-6
 40181f4:	180d883a 	mov	r6,r3
 40181f8:	100b883a 	mov	r5,r2
 40181fc:	e13ffd17 	ldw	r4,-12(fp)
 4018200:	40141b80 	call	40141b8 <OSSemPend>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4018204:	e03ffb15 	stw	zero,-20(fp)
 4018208:	00001906 	br	4018270 <alt_get_fd+0xac>
  {
    if (!alt_fd_list[i].dev)
 401820c:	008100b4 	movhi	r2,1026
 4018210:	10a54504 	addi	r2,r2,-27372
 4018214:	e0fffb17 	ldw	r3,-20(fp)
 4018218:	18c00324 	muli	r3,r3,12
 401821c:	10c5883a 	add	r2,r2,r3
 4018220:	10800017 	ldw	r2,0(r2)
 4018224:	10000f1e 	bne	r2,zero,4018264 <alt_get_fd+0xa0>
    {
      alt_fd_list[i].dev = dev;
 4018228:	008100b4 	movhi	r2,1026
 401822c:	10a54504 	addi	r2,r2,-27372
 4018230:	e0fffb17 	ldw	r3,-20(fp)
 4018234:	18c00324 	muli	r3,r3,12
 4018238:	10c5883a 	add	r2,r2,r3
 401823c:	e0ffff17 	ldw	r3,-4(fp)
 4018240:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 4018244:	d0e00a17 	ldw	r3,-32728(gp)
 4018248:	e0bffb17 	ldw	r2,-20(fp)
 401824c:	1880020e 	bge	r3,r2,4018258 <alt_get_fd+0x94>
      {
        alt_max_fd = i;
 4018250:	e0bffb17 	ldw	r2,-20(fp)
 4018254:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
 4018258:	e0bffb17 	ldw	r2,-20(fp)
 401825c:	e0bffc15 	stw	r2,-16(fp)
      goto alt_get_fd_exit;
 4018260:	00000606 	br	401827c <alt_get_fd+0xb8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4018264:	e0bffb17 	ldw	r2,-20(fp)
 4018268:	10800044 	addi	r2,r2,1
 401826c:	e0bffb15 	stw	r2,-20(fp)
 4018270:	e0bffb17 	ldw	r2,-20(fp)
 4018274:	10800810 	cmplti	r2,r2,32
 4018278:	103fe41e 	bne	r2,zero,401820c <__alt_mem_onchip_memory2_0+0xfbff820c>
  /*
   * Release the alt_fd_list_lock semaphore now that we are done with the
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);
 401827c:	d0a71a17 	ldw	r2,-25496(gp)
 4018280:	1009883a 	mov	r4,r2
 4018284:	40145300 	call	4014530 <OSSemPost>

  return rc;
 4018288:	e0bffc17 	ldw	r2,-16(fp)
}
 401828c:	e037883a 	mov	sp,fp
 4018290:	dfc00117 	ldw	ra,4(sp)
 4018294:	df000017 	ldw	fp,0(sp)
 4018298:	dec00204 	addi	sp,sp,8
 401829c:	f800283a 	ret

040182a0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 40182a0:	defffb04 	addi	sp,sp,-20
 40182a4:	df000415 	stw	fp,16(sp)
 40182a8:	df000404 	addi	fp,sp,16
 40182ac:	e13ffe15 	stw	r4,-8(fp)
 40182b0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 40182b4:	e0bfff17 	ldw	r2,-4(fp)
 40182b8:	00c00074 	movhi	r3,1
 40182bc:	1880022e 	bgeu	r3,r2,40182c8 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 40182c0:	00800074 	movhi	r2,1
 40182c4:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 40182c8:	e0fffe17 	ldw	r3,-8(fp)
 40182cc:	e0bfff17 	ldw	r2,-4(fp)
 40182d0:	1885883a 	add	r2,r3,r2
 40182d4:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 40182d8:	e0bffe17 	ldw	r2,-8(fp)
 40182dc:	e0bffc15 	stw	r2,-16(fp)
 40182e0:	00000506 	br	40182f8 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 40182e4:	e0bffc17 	ldw	r2,-16(fp)
 40182e8:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 40182ec:	e0bffc17 	ldw	r2,-16(fp)
 40182f0:	10800804 	addi	r2,r2,32
 40182f4:	e0bffc15 	stw	r2,-16(fp)
 40182f8:	e0fffc17 	ldw	r3,-16(fp)
 40182fc:	e0bffd17 	ldw	r2,-12(fp)
 4018300:	18bff836 	bltu	r3,r2,40182e4 <__alt_mem_onchip_memory2_0+0xfbff82e4>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 4018304:	e0bffe17 	ldw	r2,-8(fp)
 4018308:	108007cc 	andi	r2,r2,31
 401830c:	10000226 	beq	r2,zero,4018318 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 4018310:	e0bffc17 	ldw	r2,-16(fp)
 4018314:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 4018318:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 401831c:	0001883a 	nop
 4018320:	e037883a 	mov	sp,fp
 4018324:	df000017 	ldw	fp,0(sp)
 4018328:	dec00104 	addi	sp,sp,4
 401832c:	f800283a 	ret

04018330 <atexit>:
 4018330:	200b883a 	mov	r5,r4
 4018334:	000f883a 	mov	r7,zero
 4018338:	000d883a 	mov	r6,zero
 401833c:	0009883a 	mov	r4,zero
 4018340:	40183f81 	jmpi	40183f8 <__register_exitproc>

04018344 <exit>:
 4018344:	defffe04 	addi	sp,sp,-8
 4018348:	000b883a 	mov	r5,zero
 401834c:	dc000015 	stw	r16,0(sp)
 4018350:	dfc00115 	stw	ra,4(sp)
 4018354:	2021883a 	mov	r16,r4
 4018358:	40185100 	call	4018510 <__call_exitprocs>
 401835c:	008100b4 	movhi	r2,1026
 4018360:	10a9c004 	addi	r2,r2,-22784
 4018364:	11000017 	ldw	r4,0(r2)
 4018368:	20800f17 	ldw	r2,60(r4)
 401836c:	10000126 	beq	r2,zero,4018374 <exit+0x30>
 4018370:	103ee83a 	callr	r2
 4018374:	8009883a 	mov	r4,r16
 4018378:	40186900 	call	4018690 <_exit>

0401837c <memcmp>:
 401837c:	01c000c4 	movi	r7,3
 4018380:	3980192e 	bgeu	r7,r6,40183e8 <memcmp+0x6c>
 4018384:	2144b03a 	or	r2,r4,r5
 4018388:	11c4703a 	and	r2,r2,r7
 401838c:	10000f26 	beq	r2,zero,40183cc <memcmp+0x50>
 4018390:	20800003 	ldbu	r2,0(r4)
 4018394:	28c00003 	ldbu	r3,0(r5)
 4018398:	10c0151e 	bne	r2,r3,40183f0 <memcmp+0x74>
 401839c:	31bfff84 	addi	r6,r6,-2
 40183a0:	01ffffc4 	movi	r7,-1
 40183a4:	00000406 	br	40183b8 <memcmp+0x3c>
 40183a8:	20800003 	ldbu	r2,0(r4)
 40183ac:	28c00003 	ldbu	r3,0(r5)
 40183b0:	31bfffc4 	addi	r6,r6,-1
 40183b4:	10c00e1e 	bne	r2,r3,40183f0 <memcmp+0x74>
 40183b8:	21000044 	addi	r4,r4,1
 40183bc:	29400044 	addi	r5,r5,1
 40183c0:	31fff91e 	bne	r6,r7,40183a8 <__alt_mem_onchip_memory2_0+0xfbff83a8>
 40183c4:	0005883a 	mov	r2,zero
 40183c8:	f800283a 	ret
 40183cc:	20c00017 	ldw	r3,0(r4)
 40183d0:	28800017 	ldw	r2,0(r5)
 40183d4:	18bfee1e 	bne	r3,r2,4018390 <__alt_mem_onchip_memory2_0+0xfbff8390>
 40183d8:	31bfff04 	addi	r6,r6,-4
 40183dc:	21000104 	addi	r4,r4,4
 40183e0:	29400104 	addi	r5,r5,4
 40183e4:	39bff936 	bltu	r7,r6,40183cc <__alt_mem_onchip_memory2_0+0xfbff83cc>
 40183e8:	303fe91e 	bne	r6,zero,4018390 <__alt_mem_onchip_memory2_0+0xfbff8390>
 40183ec:	003ff506 	br	40183c4 <__alt_mem_onchip_memory2_0+0xfbff83c4>
 40183f0:	10c5c83a 	sub	r2,r2,r3
 40183f4:	f800283a 	ret

040183f8 <__register_exitproc>:
 40183f8:	defffa04 	addi	sp,sp,-24
 40183fc:	dc000315 	stw	r16,12(sp)
 4018400:	040100b4 	movhi	r16,1026
 4018404:	8429c004 	addi	r16,r16,-22784
 4018408:	80c00017 	ldw	r3,0(r16)
 401840c:	dc400415 	stw	r17,16(sp)
 4018410:	dfc00515 	stw	ra,20(sp)
 4018414:	18805217 	ldw	r2,328(r3)
 4018418:	2023883a 	mov	r17,r4
 401841c:	10003726 	beq	r2,zero,40184fc <__register_exitproc+0x104>
 4018420:	10c00117 	ldw	r3,4(r2)
 4018424:	010007c4 	movi	r4,31
 4018428:	20c00e16 	blt	r4,r3,4018464 <__register_exitproc+0x6c>
 401842c:	1a000044 	addi	r8,r3,1
 4018430:	8800221e 	bne	r17,zero,40184bc <__register_exitproc+0xc4>
 4018434:	18c00084 	addi	r3,r3,2
 4018438:	18c7883a 	add	r3,r3,r3
 401843c:	18c7883a 	add	r3,r3,r3
 4018440:	12000115 	stw	r8,4(r2)
 4018444:	10c7883a 	add	r3,r2,r3
 4018448:	19400015 	stw	r5,0(r3)
 401844c:	0005883a 	mov	r2,zero
 4018450:	dfc00517 	ldw	ra,20(sp)
 4018454:	dc400417 	ldw	r17,16(sp)
 4018458:	dc000317 	ldw	r16,12(sp)
 401845c:	dec00604 	addi	sp,sp,24
 4018460:	f800283a 	ret
 4018464:	00800034 	movhi	r2,0
 4018468:	10800004 	addi	r2,r2,0
 401846c:	10002626 	beq	r2,zero,4018508 <__register_exitproc+0x110>
 4018470:	01006404 	movi	r4,400
 4018474:	d9400015 	stw	r5,0(sp)
 4018478:	d9800115 	stw	r6,4(sp)
 401847c:	d9c00215 	stw	r7,8(sp)
 4018480:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 4018484:	d9400017 	ldw	r5,0(sp)
 4018488:	d9800117 	ldw	r6,4(sp)
 401848c:	d9c00217 	ldw	r7,8(sp)
 4018490:	10001d26 	beq	r2,zero,4018508 <__register_exitproc+0x110>
 4018494:	81000017 	ldw	r4,0(r16)
 4018498:	10000115 	stw	zero,4(r2)
 401849c:	02000044 	movi	r8,1
 40184a0:	22405217 	ldw	r9,328(r4)
 40184a4:	0007883a 	mov	r3,zero
 40184a8:	12400015 	stw	r9,0(r2)
 40184ac:	20805215 	stw	r2,328(r4)
 40184b0:	10006215 	stw	zero,392(r2)
 40184b4:	10006315 	stw	zero,396(r2)
 40184b8:	883fde26 	beq	r17,zero,4018434 <__alt_mem_onchip_memory2_0+0xfbff8434>
 40184bc:	18c9883a 	add	r4,r3,r3
 40184c0:	2109883a 	add	r4,r4,r4
 40184c4:	1109883a 	add	r4,r2,r4
 40184c8:	21802215 	stw	r6,136(r4)
 40184cc:	01800044 	movi	r6,1
 40184d0:	12406217 	ldw	r9,392(r2)
 40184d4:	30cc983a 	sll	r6,r6,r3
 40184d8:	4992b03a 	or	r9,r9,r6
 40184dc:	12406215 	stw	r9,392(r2)
 40184e0:	21c04215 	stw	r7,264(r4)
 40184e4:	01000084 	movi	r4,2
 40184e8:	893fd21e 	bne	r17,r4,4018434 <__alt_mem_onchip_memory2_0+0xfbff8434>
 40184ec:	11006317 	ldw	r4,396(r2)
 40184f0:	218cb03a 	or	r6,r4,r6
 40184f4:	11806315 	stw	r6,396(r2)
 40184f8:	003fce06 	br	4018434 <__alt_mem_onchip_memory2_0+0xfbff8434>
 40184fc:	18805304 	addi	r2,r3,332
 4018500:	18805215 	stw	r2,328(r3)
 4018504:	003fc606 	br	4018420 <__alt_mem_onchip_memory2_0+0xfbff8420>
 4018508:	00bfffc4 	movi	r2,-1
 401850c:	003fd006 	br	4018450 <__alt_mem_onchip_memory2_0+0xfbff8450>

04018510 <__call_exitprocs>:
 4018510:	defff504 	addi	sp,sp,-44
 4018514:	df000915 	stw	fp,36(sp)
 4018518:	dd400615 	stw	r21,24(sp)
 401851c:	dc800315 	stw	r18,12(sp)
 4018520:	dfc00a15 	stw	ra,40(sp)
 4018524:	ddc00815 	stw	r23,32(sp)
 4018528:	dd800715 	stw	r22,28(sp)
 401852c:	dd000515 	stw	r20,20(sp)
 4018530:	dcc00415 	stw	r19,16(sp)
 4018534:	dc400215 	stw	r17,8(sp)
 4018538:	dc000115 	stw	r16,4(sp)
 401853c:	d9000015 	stw	r4,0(sp)
 4018540:	2839883a 	mov	fp,r5
 4018544:	04800044 	movi	r18,1
 4018548:	057fffc4 	movi	r21,-1
 401854c:	008100b4 	movhi	r2,1026
 4018550:	10a9c004 	addi	r2,r2,-22784
 4018554:	12000017 	ldw	r8,0(r2)
 4018558:	45005217 	ldw	r20,328(r8)
 401855c:	44c05204 	addi	r19,r8,328
 4018560:	a0001c26 	beq	r20,zero,40185d4 <__call_exitprocs+0xc4>
 4018564:	a0800117 	ldw	r2,4(r20)
 4018568:	15ffffc4 	addi	r23,r2,-1
 401856c:	b8000d16 	blt	r23,zero,40185a4 <__call_exitprocs+0x94>
 4018570:	14000044 	addi	r16,r2,1
 4018574:	8421883a 	add	r16,r16,r16
 4018578:	8421883a 	add	r16,r16,r16
 401857c:	84402004 	addi	r17,r16,128
 4018580:	a463883a 	add	r17,r20,r17
 4018584:	a421883a 	add	r16,r20,r16
 4018588:	e0001e26 	beq	fp,zero,4018604 <__call_exitprocs+0xf4>
 401858c:	80804017 	ldw	r2,256(r16)
 4018590:	e0801c26 	beq	fp,r2,4018604 <__call_exitprocs+0xf4>
 4018594:	bdffffc4 	addi	r23,r23,-1
 4018598:	843fff04 	addi	r16,r16,-4
 401859c:	8c7fff04 	addi	r17,r17,-4
 40185a0:	bd7ff91e 	bne	r23,r21,4018588 <__alt_mem_onchip_memory2_0+0xfbff8588>
 40185a4:	00800034 	movhi	r2,0
 40185a8:	10800004 	addi	r2,r2,0
 40185ac:	10000926 	beq	r2,zero,40185d4 <__call_exitprocs+0xc4>
 40185b0:	a0800117 	ldw	r2,4(r20)
 40185b4:	1000301e 	bne	r2,zero,4018678 <__call_exitprocs+0x168>
 40185b8:	a0800017 	ldw	r2,0(r20)
 40185bc:	10003226 	beq	r2,zero,4018688 <__call_exitprocs+0x178>
 40185c0:	a009883a 	mov	r4,r20
 40185c4:	98800015 	stw	r2,0(r19)
 40185c8:	00000000 	call	0 <OSTCBStkPtr_OFFSET>
 40185cc:	9d000017 	ldw	r20,0(r19)
 40185d0:	a03fe41e 	bne	r20,zero,4018564 <__alt_mem_onchip_memory2_0+0xfbff8564>
 40185d4:	dfc00a17 	ldw	ra,40(sp)
 40185d8:	df000917 	ldw	fp,36(sp)
 40185dc:	ddc00817 	ldw	r23,32(sp)
 40185e0:	dd800717 	ldw	r22,28(sp)
 40185e4:	dd400617 	ldw	r21,24(sp)
 40185e8:	dd000517 	ldw	r20,20(sp)
 40185ec:	dcc00417 	ldw	r19,16(sp)
 40185f0:	dc800317 	ldw	r18,12(sp)
 40185f4:	dc400217 	ldw	r17,8(sp)
 40185f8:	dc000117 	ldw	r16,4(sp)
 40185fc:	dec00b04 	addi	sp,sp,44
 4018600:	f800283a 	ret
 4018604:	a0800117 	ldw	r2,4(r20)
 4018608:	80c00017 	ldw	r3,0(r16)
 401860c:	10bfffc4 	addi	r2,r2,-1
 4018610:	15c01426 	beq	r2,r23,4018664 <__call_exitprocs+0x154>
 4018614:	80000015 	stw	zero,0(r16)
 4018618:	183fde26 	beq	r3,zero,4018594 <__alt_mem_onchip_memory2_0+0xfbff8594>
 401861c:	95c8983a 	sll	r4,r18,r23
 4018620:	a0806217 	ldw	r2,392(r20)
 4018624:	a5800117 	ldw	r22,4(r20)
 4018628:	2084703a 	and	r2,r4,r2
 401862c:	10000b26 	beq	r2,zero,401865c <__call_exitprocs+0x14c>
 4018630:	a0806317 	ldw	r2,396(r20)
 4018634:	2088703a 	and	r4,r4,r2
 4018638:	20000c1e 	bne	r4,zero,401866c <__call_exitprocs+0x15c>
 401863c:	89400017 	ldw	r5,0(r17)
 4018640:	d9000017 	ldw	r4,0(sp)
 4018644:	183ee83a 	callr	r3
 4018648:	a0800117 	ldw	r2,4(r20)
 401864c:	15bfbf1e 	bne	r2,r22,401854c <__alt_mem_onchip_memory2_0+0xfbff854c>
 4018650:	98800017 	ldw	r2,0(r19)
 4018654:	153fcf26 	beq	r2,r20,4018594 <__alt_mem_onchip_memory2_0+0xfbff8594>
 4018658:	003fbc06 	br	401854c <__alt_mem_onchip_memory2_0+0xfbff854c>
 401865c:	183ee83a 	callr	r3
 4018660:	003ff906 	br	4018648 <__alt_mem_onchip_memory2_0+0xfbff8648>
 4018664:	a5c00115 	stw	r23,4(r20)
 4018668:	003feb06 	br	4018618 <__alt_mem_onchip_memory2_0+0xfbff8618>
 401866c:	89000017 	ldw	r4,0(r17)
 4018670:	183ee83a 	callr	r3
 4018674:	003ff406 	br	4018648 <__alt_mem_onchip_memory2_0+0xfbff8648>
 4018678:	a0800017 	ldw	r2,0(r20)
 401867c:	a027883a 	mov	r19,r20
 4018680:	1029883a 	mov	r20,r2
 4018684:	003fb606 	br	4018560 <__alt_mem_onchip_memory2_0+0xfbff8560>
 4018688:	0005883a 	mov	r2,zero
 401868c:	003ffb06 	br	401867c <__alt_mem_onchip_memory2_0+0xfbff867c>

04018690 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 4018690:	defffd04 	addi	sp,sp,-12
 4018694:	df000215 	stw	fp,8(sp)
 4018698:	df000204 	addi	fp,sp,8
 401869c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 40186a0:	d0272345 	stb	zero,-25459(gp)
 40186a4:	e0bfff17 	ldw	r2,-4(fp)
 40186a8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 40186ac:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 40186b0:	10000226 	beq	r2,zero,40186bc <_exit+0x2c>
    ALT_SIM_FAIL();
 40186b4:	002af070 	cmpltui	zero,zero,43969
 40186b8:	00000106 	br	40186c0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 40186bc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 40186c0:	003fff06 	br	40186c0 <__alt_mem_onchip_memory2_0+0xfbff86c0>


onchip_instrCacheDisabled_dataCacheDisabled.elf:     file format elf32-littlenios2
onchip_instrCacheDisabled_dataCacheDisabled.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020254

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x0001035c memsz 0x0001035c flags r-x
    LOAD off    0x0001137c vaddr 0x0003037c paddr 0x00031e68 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x00013954 vaddr 0x00033954 paddr 0x00033954 align 2**12
         filesz 0x00000000 memsz 0x0000016c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000234  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000fbd8  00020254  00020254  00001254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000550  0002fe2c  0002fe2c  00010e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  0003037c  00031e68  0001137c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000016c  00033954  00033954  00013954  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00033ac0  00033ac0  00012e68  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00012e68  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000ed8  00000000  00000000  00012e90  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00024021  00000000  00000000  00013d68  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000091f6  00000000  00000000  00037d89  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000b64c  00000000  00000000  00040f7f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000022a0  00000000  00000000  0004c5cc  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000392b  00000000  00000000  0004e86c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00017975  00000000  00000000  00052197  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00069b0c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000018d8  00000000  00000000  00069b20  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006e6b2  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0006e6b5  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0006e6c1  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006e6c2  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0006e6c3  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0006e6ce  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0006e6d9  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000a  00000000  00000000  0006e6e4  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000047  00000000  00000000  0006e6ee  2**0
                  CONTENTS, READONLY
 26 .jdi          0000597d  00000000  00000000  0006e735  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00043bd4  00000000  00000000  000740b2  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020254 l    d  .text	00000000 .text
0002fe2c l    d  .rodata	00000000 .rodata
0003037c l    d  .rwdata	00000000 .rwdata
00033954 l    d  .bss	00000000 .bss
00033ac0 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/RTES/variants/onchip_instrCacheDisabled_dataCacheDisabled/sw/nios/onchip_instrCacheDisabled_dataCacheDisabled_bsp//obj/HAL/src/crt0.o
0002028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
000300c2 l     O .rodata	00000010 zeroes.4404
00022f64 l     F .text	000000bc __sbprintf
000300d2 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00023174 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00024ca4 l     F .text	00000008 __fp_unlock
00024cb8 l     F .text	0000019c __sinit.part.1
00024e54 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0003037c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
000307c0 l     O .rwdata	00000020 lc_ctype_charset
000307a0 l     O .rwdata	00000020 lc_message_charset
000307e0 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
00030104 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0002776c l     F .text	000000fc __sprint_r.part.0
00030238 l     O .rodata	00000010 blanks.4348
00030228 l     O .rodata	00000010 zeroes.4349
00028cf8 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0002d37c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0002d488 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0002d4b4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0002d840 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0002d920 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0002da0c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
0002de48 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00031e5c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0002e094 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0002e1c8 l     F .text	00000034 alt_dev_reg
00030dc8 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0002e4b8 l     F .text	0000020c altera_avalon_jtag_uart_irq
0002e6c4 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0002ecfc l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0002ef3c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0002f198 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0002f2d8 l     F .text	0000003c alt_get_errno
0002f314 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0003398c g     O .bss	00000004 alt_instruction_exception_handler
00020a30 g     F .text	00000034 latency_isr_parport
0002727c g     F .text	00000074 _mprec_log10
00027368 g     F .text	0000008c __any_on
00029750 g     F .text	00000054 _isatty_r
00030110 g     O .rodata	00000028 __mprec_tinytens
0002db1c g     F .text	0000007c alt_main
000339c0 g     O .bss	00000100 alt_irq
000297a4 g     F .text	00000060 _lseek_r
00031e68 g       *ABS*	00000000 __flash_rwdata_start
0002bea8 g     F .text	00000088 .hidden __eqdf2
00033ac0 g       *ABS*	00000000 __alt_heap_start
00020d14 g     F .text	0000003c printf
0002a07c g     F .text	0000009c _wcrtomb_r
00027594 g     F .text	0000005c __sseek
00024ff4 g     F .text	00000010 __sinit
00029f24 g     F .text	00000140 __swbuf_r
00025600 g     F .text	0000007c _setlocale_r
00024e5c g     F .text	00000068 __sfmoreglue
0002dbbc g     F .text	00000024 __malloc_unlock
00029804 g     F .text	0000015c memmove
00020290 g     F .text	00000058 test_parallel_port
00024fdc g     F .text	00000018 _cleanup
000263f8 g     F .text	000000a8 _Balloc
00033954 g     O .bss	00000004 snaph
0002bf30 g     F .text	000000dc .hidden __gtdf2
0002f6d0 g     F .text	00000024 altera_nios2_gen2_irq_init
00020000 g     F .entry	0000000c __reset
00020020 g       *ABS*	00000000 __flash_exceptions_start
00029238 g     F .text	0000005c _fstat_r
00033978 g     O .bss	00000004 errno
00027510 g     F .text	00000008 __seofread
00033984 g     O .bss	00000004 alt_argv
00039e28 g       *ABS*	00000000 _gp
00030c48 g     O .rwdata	00000180 alt_fd_list
0002f6f4 g     F .text	00000090 alt_find_dev
00026188 g     F .text	00000148 memcpy
00024cac g     F .text	0000000c _cleanup_r
0002d194 g     F .text	000000dc .hidden __floatsidf
0002f25c g     F .text	0000007c alt_io_redirect
0002c00c g     F .text	000000f4 .hidden __ltdf2
0002fe2c g       *ABS*	00000000 __DTOR_END__
0002f0fc g     F .text	0000009c alt_exception_cause_generated_bad_addr
000273f4 g     F .text	00000074 __fpclassifyd
000271d8 g     F .text	000000a4 __ratio
00028cdc g     F .text	0000001c __vfiprintf_internal
0002e8bc g     F .text	0000021c altera_avalon_jtag_uart_read
00020ce4 g     F .text	00000030 _printf_r
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00020c28 g     F .text	00000064 .hidden __udivsi3
0002d87c g     F .text	000000a4 isatty
00030160 g     O .rodata	000000c8 __mprec_tens
0002567c g     F .text	0000000c __locale_charset
00033974 g     O .bss	00000004 __malloc_top_pad
00033958 g     O .bss	00000004 flag
00031e30 g     O .rwdata	00000004 __mb_cur_max
000256ac g     F .text	0000000c _localeconv_r
00029294 g     F .text	000004bc __sfvwrite_r
00026804 g     F .text	0000003c __i2b
00027468 g     F .text	00000054 _sbrk_r
00029960 g     F .text	00000060 _read_r
00031e50 g     O .rwdata	00000004 alt_max_fd
00028f2c g     F .text	000000f0 _fclose_r
00024c74 g     F .text	00000030 fflush
00033970 g     O .bss	00000004 __malloc_max_sbrked_mem
0002ad14 g     F .text	000008ac .hidden __adddf3
00026f80 g     F .text	0000010c __b2d
0002a7dc g     F .text	00000538 .hidden __umoddi3
0002da48 g     F .text	000000d4 lseek
00031e28 g     O .rwdata	00000004 _global_impure_ptr
000299c0 g     F .text	00000564 _realloc_r
00033ac0 g       *ABS*	00000000 __bss_end
0002d750 g     F .text	000000f0 alt_iic_isr_register
0002f5c8 g     F .text	00000108 alt_tick
0002a264 g     F .text	00000578 .hidden __udivdi3
00029194 g     F .text	00000024 _fputwc_r
00030138 g     O .rodata	00000028 __mprec_bigtens
000265e8 g     F .text	00000104 __s2b
0002d270 g     F .text	000000a8 .hidden __floatunsidf
00026cc0 g     F .text	00000060 __mcmp
00025014 g     F .text	00000018 __fp_lock_all
0002d704 g     F .text	0000004c alt_ic_irq_enabled
0002f52c g     F .text	0000009c alt_alarm_stop
00020984 g     F .text	000000ac test_recovtime_parport
0003397c g     O .bss	00000004 alt_irq_active
000200fc g     F .exceptions	000000e4 alt_irq_handler
00030c20 g     O .rwdata	00000028 alt_dev_null
0002ef1c g     F .text	00000020 alt_dcache_flush_all
000266ec g     F .text	00000068 __hi0bits
0002d114 g     F .text	00000080 .hidden __fixdfsi
00031e68 g       *ABS*	00000000 __ram_rwdata_end
00031e48 g     O .rwdata	00000008 alt_dev_list
0002e0d0 g     F .text	000000f8 write
0002f9f8 g     F .text	000000a0 _putc_r
0003037c g       *ABS*	00000000 __ram_rodata_end
0002d4f0 g     F .text	000000b0 fstat
0002c00c g     F .text	000000f4 .hidden __ledf2
00026a38 g     F .text	00000140 __pow5mult
00027880 g     F .text	0000145c ___vfiprintf_internal_r
00033968 g     O .bss	00000004 __nlocale_changed
00020c8c g     F .text	00000058 .hidden __umodsi3
00033ac0 g       *ABS*	00000000 end
0002e3f8 g     F .text	000000c0 altera_avalon_jtag_uart_init
000201e0 g     F .exceptions	00000074 alt_instruction_exception_entry
0002fe2c g       *ABS*	00000000 __CTOR_LIST__
00040000 g       *ABS*	00000000 __alt_stack_pointer
0002ed74 g     F .text	0000007c alt_avalon_timer_sc_init
0002d318 g     F .text	00000064 .hidden __clzsi2
0002ead8 g     F .text	00000224 altera_avalon_jtag_uart_write
000207f8 g     F .text	0000018c test_recovtime_print
00025004 g     F .text	00000004 __sfp_lock_acquire
000260a4 g     F .text	000000e4 memchr
00020d50 g     F .text	000021f8 ___vfprintf_internal_r
00025168 g     F .text	00000310 _free_r
0002dbe0 g     F .text	0000022c alt_printf
00025688 g     F .text	00000010 __locale_mb_cur_max
0002fc78 g     F .text	00000180 __call_exitprocs
00033964 g     O .bss	00000004 __mlocale_changed
00031e34 g     O .rwdata	00000004 __malloc_sbrk_base
00020254 g     F .text	0000003c _start
00033990 g     O .bss	00000004 _alt_tick_rate
00020518 g     F .text	00000044 resp_isr_parport
00026b78 g     F .text	00000148 __lshift
00033994 g     O .bss	00000004 _alt_nticks
0002de84 g     F .text	000000fc read
0002e234 g     F .text	00000060 alt_sys_init
0002fb60 g     F .text	00000118 __register_exitproc
00020a64 g     F .text	0000009c test_latency_parport
00026840 g     F .text	000001f8 __multiply
0002e764 g     F .text	00000068 altera_avalon_jtag_uart_close
0003037c g       *ABS*	00000000 __ram_rwdata_start
0002fe2c g       *ABS*	00000000 __ram_rodata_start
00033998 g     O .bss	00000028 __malloc_current_mallinfo
0002708c g     F .text	0000014c __d2b
0002e294 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0002f88c g     F .text	000000a4 alt_get_fd
00028e14 g     F .text	00000054 _close_r
0002f97c g     F .text	0000007c memcmp
0002e354 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00033ac0 g       *ABS*	00000000 __alt_stack_base
0002e3a4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00023020 g     F .text	00000154 __swsetup_r
0002b5c0 g     F .text	000008e8 .hidden __divdf3
00024ec4 g     F .text	00000118 __sfp
000272f0 g     F .text	00000078 __copybits
00030818 g     O .rwdata	00000408 __malloc_av_
00025010 g     F .text	00000004 __sinit_lock_release
0002c100 g     F .text	00000718 .hidden __muldf3
000274bc g     F .text	00000054 __sread
0002f784 g     F .text	00000108 alt_find_file
0002ef78 g     F .text	000000a4 alt_dev_llist_insert
0002db98 g     F .text	00000024 __malloc_lock
0002dfe4 g     F .text	000000b0 sbrk
00024c18 g     F .text	0000005c _fflush_r
00028e68 g     F .text	000000c4 _calloc_r
00033954 g       *ABS*	00000000 __bss_start
000262d0 g     F .text	00000128 memset
00020b00 g     F .text	00000030 main
00033988 g     O .bss	00000004 alt_envp
000202e8 g     F .text	000001a4 test_counter
0003396c g     O .bss	00000004 __malloc_max_total_mem
0002e2f4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0002a064 g     F .text	00000018 __swbuf
0003395c g     O .bss	00000004 snapl
000275f0 g     F .text	00000008 __sclose
00040000 g       *ABS*	00000000 __alt_heap_limit
0002901c g     F .text	00000014 fclose
00023374 g     F .text	00001688 _dtoa_r
00025898 g     F .text	0000080c _malloc_r
0002a1d8 g     F .text	00000030 __ascii_wctomb
00031e54 g     O .rwdata	00000004 alt_errno
00025478 g     F .text	000000c4 _fwalk
0002fa98 g     F .text	000000c8 putc
00020b30 g     F .text	00000084 .hidden __divsi3
00025044 g     F .text	00000124 _malloc_trim_r
0002fe2c g       *ABS*	00000000 __CTOR_END__
000275f8 g     F .text	000000dc strcmp
0002fe2c g       *ABS*	00000000 __flash_rodata_start
0002fe2c g       *ABS*	00000000 __DTOR_LIST__
0002bea8 g     F .text	00000088 .hidden __nedf2
0002e1fc g     F .text	00000038 alt_irq_init
0002df80 g     F .text	00000064 alt_release_fd
00030248 g     O .rodata	00000100 .hidden __clz_tab
00033960 g     O .bss	00000004 _PathLocale
0002f930 g     F .text	00000014 atexit
00028db4 g     F .text	00000060 _write_r
000256b8 g     F .text	00000018 setlocale
00031e2c g     O .rwdata	00000004 _impure_ptr
00033980 g     O .bss	00000004 alt_argc
000249fc g     F .text	0000021c __sflush_r
0002f07c g     F .text	00000060 _do_dtors
000256a4 g     F .text	00000008 __locale_cjk_lang
0002055c g     F .text	00000158 test_resptime_print
00020020 g       .exceptions	00000000 alt_irq_entry
00026f1c g     F .text	00000064 __ulp
0002502c g     F .text	00000018 __fp_unlock_all
000206b4 g     F .text	0000009c test_resptime_parport
00031e40 g     O .rwdata	00000008 alt_fs_list
00020020 g       *ABS*	00000000 __ram_exceptions_start
000256d0 g     F .text	0000000c localeconv
0002d5a0 g     F .text	00000050 alt_ic_isr_register
00031e68 g       *ABS*	00000000 _edata
00033ac0 g       *ABS*	00000000 _end
00029030 g     F .text	00000164 __fputwc
00020254 g       *ABS*	00000000 __ram_exceptions_end
0002e7cc g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0002d678 g     F .text	0000008c alt_ic_irq_disable
00027518 g     F .text	0000007c __swrite
00031e38 g     O .rwdata	00000004 __malloc_trim_threshold
00025698 g     F .text	0000000c __locale_msgcharset
000207a4 g     F .text	00000054 recov_isr_parport
0002f944 g     F .text	00000038 exit
0002553c g     F .text	000000c4 _fwalk_reent
00026d20 g     F .text	000001fc __mdiff
00020bb4 g     F .text	00000074 .hidden __modsi3
00040000 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
00025008 g     F .text	00000004 __sfp_lock_release
0002fdf8 g     F .text	00000034 _exit
0002edf0 g     F .text	0000012c alt_alarm_start
000256dc g     F .text	000001bc __smakebuf_r
000276d4 g     F .text	00000098 strlen
0002048c g     F .text	0000008c resp_isr_print
0002f3d8 g     F .text	00000154 open
00020750 g     F .text	00000054 recov_isr_print
0002bf30 g     F .text	000000dc .hidden __gedf2
0002de0c g     F .text	0000003c alt_putchar
00031e3c g     O .rwdata	00000004 __wctomb
00027868 g     F .text	00000018 __sprint_r
0002f0dc g     F .text	00000020 alt_icache_flush_all
00031e58 g     O .rwdata	00000004 alt_priority_mask
0002d5f0 g     F .text	00000088 alt_ic_irq_enable
00022f48 g     F .text	0000001c __vfprintf_internal
0002a208 g     F .text	0000005c _wctomb_r
0002c818 g     F .text	000008fc .hidden __subdf3
00026754 g     F .text	000000b0 __lo0bits
00031e60 g     O .rwdata	00000008 alt_alarm_list
0002f01c g     F .text	00000060 _do_ctors
0002a118 g     F .text	000000c0 wcrtomb
0002d3b8 g     F .text	000000d0 close
0002d988 g     F .text	00000084 alt_load
000291b8 g     F .text	00000080 fputwc
0002500c g     F .text	00000004 __sinit_lock_acquire
000264c8 g     F .text	00000120 __multadd
000264a0 g     F .text	00000028 _Bfree



Disassembly of section .entry:

00020000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20000:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20004:	08409514 	ori	at,at,596
    jmp r1
   20008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201e00 	call	201e0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
// Custom line clearing the parallel port
IOWR_32DIRECT(PARALLELPORT_0_BASE, 0, 0x0);
   2010c:	0007883a 	mov	r3,zero
   20110:	00800134 	movhi	r2,4
   20114:	10841004 	addi	r2,r2,4160
   20118:	10c00035 	stwio	r3,0(r2)
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2011c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20120:	0005313a 	rdctl	r2,ipending
   20124:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20128:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2012c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20130:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20134:	00800044 	movi	r2,1
   20138:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2013c:	e0fffb17 	ldw	r3,-20(fp)
   20140:	e0bffc17 	ldw	r2,-16(fp)
   20144:	1884703a 	and	r2,r3,r2
   20148:	10001426 	beq	r2,zero,2019c <alt_irq_handler+0xa0>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2014c:	008000f4 	movhi	r2,3
   20150:	108e7004 	addi	r2,r2,14784
   20154:	e0fffd17 	ldw	r3,-12(fp)
   20158:	180690fa 	slli	r3,r3,3
   2015c:	10c5883a 	add	r2,r2,r3
   20160:	10c00017 	ldw	r3,0(r2)
   20164:	008000f4 	movhi	r2,3
   20168:	108e7004 	addi	r2,r2,14784
   2016c:	e13ffd17 	ldw	r4,-12(fp)
   20170:	200890fa 	slli	r4,r4,3
   20174:	1105883a 	add	r2,r2,r4
   20178:	10800104 	addi	r2,r2,4
   2017c:	10800017 	ldw	r2,0(r2)
   20180:	1009883a 	mov	r4,r2
   20184:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   20188:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   2018c:	0005313a 	rdctl	r2,ipending
   20190:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20194:	e0bfff17 	ldw	r2,-4(fp)
   20198:	00000706 	br	201b8 <alt_irq_handler+0xbc>
      }
      mask <<= 1;
   2019c:	e0bffc17 	ldw	r2,-16(fp)
   201a0:	1085883a 	add	r2,r2,r2
   201a4:	e0bffc15 	stw	r2,-16(fp)
      i++;
   201a8:	e0bffd17 	ldw	r2,-12(fp)
   201ac:	10800044 	addi	r2,r2,1
   201b0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201b4:	003fe106 	br	2013c <__alt_data_end+0xfffe013c>

    active = alt_irq_pending ();
   201b8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   201bc:	e0bffb17 	ldw	r2,-20(fp)
   201c0:	103fdb1e 	bne	r2,zero,20130 <__alt_data_end+0xfffe0130>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201c4:	0001883a 	nop
}
   201c8:	0001883a 	nop
   201cc:	e037883a 	mov	sp,fp
   201d0:	dfc00117 	ldw	ra,4(sp)
   201d4:	df000017 	ldw	fp,0(sp)
   201d8:	dec00204 	addi	sp,sp,8
   201dc:	f800283a 	ret

000201e0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201e0:	defffb04 	addi	sp,sp,-20
   201e4:	dfc00415 	stw	ra,16(sp)
   201e8:	df000315 	stw	fp,12(sp)
   201ec:	df000304 	addi	fp,sp,12
   201f0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   201f4:	000531fa 	rdctl	r2,exception
   201f8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   201fc:	e0bffd17 	ldw	r2,-12(fp)
   20200:	10801f0c 	andi	r2,r2,124
   20204:	1004d0ba 	srli	r2,r2,2
   20208:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   2020c:	0005333a 	rdctl	r2,badaddr
   20210:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   20214:	d0a6d917 	ldw	r2,-25756(gp)
   20218:	10000726 	beq	r2,zero,20238 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   2021c:	d0a6d917 	ldw	r2,-25756(gp)
   20220:	e0fffd17 	ldw	r3,-12(fp)
   20224:	e1bffe17 	ldw	r6,-8(fp)
   20228:	e17fff17 	ldw	r5,-4(fp)
   2022c:	1809883a 	mov	r4,r3
   20230:	103ee83a 	callr	r2
   20234:	00000206 	br	20240 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20238:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   2023c:	0005883a 	mov	r2,zero
}
   20240:	e037883a 	mov	sp,fp
   20244:	dfc00117 	ldw	ra,4(sp)
   20248:	df000017 	ldw	fp,0(sp)
   2024c:	dec00204 	addi	sp,sp,8
   20250:	f800283a 	ret

Disassembly of section .text:

00020254 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20254:	06c00134 	movhi	sp,4
    ori sp, sp, %lo(__alt_stack_pointer)
   20258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   2025c:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
   20260:	d6a78a14 	ori	gp,gp,40488
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20264:	008000f4 	movhi	r2,3
    ori r2, r2, %lo(__bss_start)
   20268:	108e5514 	ori	r2,r2,14676

    movhi r3, %hi(__bss_end)
   2026c:	00c000f4 	movhi	r3,3
    ori r3, r3, %lo(__bss_end)
   20270:	18ceb014 	ori	r3,r3,15040

    beq r2, r3, 1f
   20274:	10c00326 	beq	r2,r3,20284 <_start+0x30>

0:
    stw zero, (r2)
   20278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   2027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   20280:	10fffd36 	bltu	r2,r3,20278 <__alt_data_end+0xfffe0278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20284:	002d9880 	call	2d988 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20288:	002db1c0 	call	2db1c <alt_main>

0002028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   2028c:	003fff06 	br	2028c <__alt_data_end+0xfffe028c>

00020290 <test_parallel_port>:
int snapl;
int snaph;
int flag;

void test_parallel_port()
{
   20290:	defffe04 	addi	sp,sp,-8
   20294:	dfc00115 	stw	ra,4(sp)
   20298:	df000015 	stw	fp,0(sp)
   2029c:	d839883a 	mov	fp,sp
	IOWR_32DIRECT(PARALLELPORT_0_BASE, 0, 0x1234abcd);
   202a0:	00c48d74 	movhi	r3,4661
   202a4:	18eaf344 	addi	r3,r3,-21555
   202a8:	00800134 	movhi	r2,4
   202ac:	10841004 	addi	r2,r2,4160
   202b0:	10c00035 	stwio	r3,0(r2)
	alt_printf("ParallelPort0=%x\n", IORD_32DIRECT(PARALLELPORT_0_BASE, 0));
   202b4:	00800134 	movhi	r2,4
   202b8:	10841004 	addi	r2,r2,4160
   202bc:	10800037 	ldwio	r2,0(r2)
   202c0:	100b883a 	mov	r5,r2
   202c4:	010000f4 	movhi	r4,3
   202c8:	213f8b04 	addi	r4,r4,-468
   202cc:	002dbe00 	call	2dbe0 <alt_printf>
}
   202d0:	0001883a 	nop
   202d4:	e037883a 	mov	sp,fp
   202d8:	dfc00117 	ldw	ra,4(sp)
   202dc:	df000017 	ldw	fp,0(sp)
   202e0:	dec00204 	addi	sp,sp,8
   202e4:	f800283a 	ret

000202e8 <test_counter>:

void test_counter()
{
   202e8:	defffe04 	addi	sp,sp,-8
   202ec:	dfc00115 	stw	ra,4(sp)
   202f0:	df000015 	stw	fp,0(sp)
   202f4:	d839883a 	mov	fp,sp
	IOWR_32DIRECT(COUNTER_0_BASE, COUNT_Target, Count_1sec);
   202f8:	00c0bef4 	movhi	r3,763
   202fc:	18fc2004 	addi	r3,r3,-3968
   20300:	00800134 	movhi	r2,4
   20304:	10840e04 	addi	r2,r2,4152
   20308:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(COUNTER_0_BASE, COUNT_RZ, arbval);
   2030c:	00ffffd4 	movui	r3,65535
   20310:	00800134 	movhi	r2,4
   20314:	10840904 	addi	r2,r2,4132
   20318:	10c00035 	stwio	r3,0(r2)
	alt_printf("iCounter after reset=%x\n", IORD_32DIRECT(COUNTER_0_BASE,0));
   2031c:	00800134 	movhi	r2,4
   20320:	10840804 	addi	r2,r2,4128
   20324:	10800037 	ldwio	r2,0(r2)
   20328:	100b883a 	mov	r5,r2
   2032c:	010000f4 	movhi	r4,3
   20330:	213f9004 	addi	r4,r4,-448
   20334:	002dbe00 	call	2dbe0 <alt_printf>
	alt_printf("iEn and iEOT=%x\n", IORD_32DIRECT(COUNTER_0_BASE, 20));
   20338:	00800134 	movhi	r2,4
   2033c:	10840d04 	addi	r2,r2,4148
   20340:	10800037 	ldwio	r2,0(r2)
   20344:	100b883a 	mov	r5,r2
   20348:	010000f4 	movhi	r4,3
   2034c:	213f9704 	addi	r4,r4,-420
   20350:	002dbe00 	call	2dbe0 <alt_printf>
	IOWR_32DIRECT(COUNTER_0_BASE, COUNT_Start, arbval);
   20354:	00ffffd4 	movui	r3,65535
   20358:	00800134 	movhi	r2,4
   2035c:	10840a04 	addi	r2,r2,4136
   20360:	10c00035 	stwio	r3,0(r2)
	alt_printf("iCounter while running=%x\n", IORD_32DIRECT(COUNTER_0_BASE,0));
   20364:	00800134 	movhi	r2,4
   20368:	10840804 	addi	r2,r2,4128
   2036c:	10800037 	ldwio	r2,0(r2)
   20370:	100b883a 	mov	r5,r2
   20374:	010000f4 	movhi	r4,3
   20378:	213f9c04 	addi	r4,r4,-400
   2037c:	002dbe00 	call	2dbe0 <alt_printf>
	alt_printf("iEn and iEOT=%x\n", IORD_32DIRECT(COUNTER_0_BASE, 20));
   20380:	00800134 	movhi	r2,4
   20384:	10840d04 	addi	r2,r2,4148
   20388:	10800037 	ldwio	r2,0(r2)
   2038c:	100b883a 	mov	r5,r2
   20390:	010000f4 	movhi	r4,3
   20394:	213f9704 	addi	r4,r4,-420
   20398:	002dbe00 	call	2dbe0 <alt_printf>
	IOWR_32DIRECT(COUNTER_0_BASE, COUNT_Stop, arbval);
   2039c:	00ffffd4 	movui	r3,65535
   203a0:	00800134 	movhi	r2,4
   203a4:	10840b04 	addi	r2,r2,4140
   203a8:	10c00035 	stwio	r3,0(r2)
	alt_printf("iCounter, first read after stop=%x\n", IORD_32DIRECT(COUNTER_0_BASE,0));
   203ac:	00800134 	movhi	r2,4
   203b0:	10840804 	addi	r2,r2,4128
   203b4:	10800037 	ldwio	r2,0(r2)
   203b8:	100b883a 	mov	r5,r2
   203bc:	010000f4 	movhi	r4,3
   203c0:	213fa304 	addi	r4,r4,-372
   203c4:	002dbe00 	call	2dbe0 <alt_printf>
	alt_printf("iCounter, second read after stop=%x\n", IORD_32DIRECT(COUNTER_0_BASE,0));
   203c8:	00800134 	movhi	r2,4
   203cc:	10840804 	addi	r2,r2,4128
   203d0:	10800037 	ldwio	r2,0(r2)
   203d4:	100b883a 	mov	r5,r2
   203d8:	010000f4 	movhi	r4,3
   203dc:	213fac04 	addi	r4,r4,-336
   203e0:	002dbe00 	call	2dbe0 <alt_printf>
	alt_printf("iEn and iEOT=%x\n", IORD_32DIRECT(COUNTER_0_BASE, 20));
   203e4:	00800134 	movhi	r2,4
   203e8:	10840d04 	addi	r2,r2,4148
   203ec:	10800037 	ldwio	r2,0(r2)
   203f0:	100b883a 	mov	r5,r2
   203f4:	010000f4 	movhi	r4,3
   203f8:	213f9704 	addi	r4,r4,-420
   203fc:	002dbe00 	call	2dbe0 <alt_printf>
	IOWR_32DIRECT(COUNTER_0_BASE, COUNT_Start, arbval);
   20400:	00ffffd4 	movui	r3,65535
   20404:	00800134 	movhi	r2,4
   20408:	10840a04 	addi	r2,r2,4136
   2040c:	10c00035 	stwio	r3,0(r2)
	alt_printf("iCounter, first read after restarting=%x\n", IORD_32DIRECT(COUNTER_0_BASE,0));
   20410:	00800134 	movhi	r2,4
   20414:	10840804 	addi	r2,r2,4128
   20418:	10800037 	ldwio	r2,0(r2)
   2041c:	100b883a 	mov	r5,r2
   20420:	010000f4 	movhi	r4,3
   20424:	213fb604 	addi	r4,r4,-296
   20428:	002dbe00 	call	2dbe0 <alt_printf>
	alt_printf("iCounter, second read after restarting=%x\n", IORD_32DIRECT(COUNTER_0_BASE,0));
   2042c:	00800134 	movhi	r2,4
   20430:	10840804 	addi	r2,r2,4128
   20434:	10800037 	ldwio	r2,0(r2)
   20438:	100b883a 	mov	r5,r2
   2043c:	010000f4 	movhi	r4,3
   20440:	213fc104 	addi	r4,r4,-252
   20444:	002dbe00 	call	2dbe0 <alt_printf>
	alt_printf("iEn and iEOT=%x\n", IORD_32DIRECT(COUNTER_0_BASE, 20));
   20448:	00800134 	movhi	r2,4
   2044c:	10840d04 	addi	r2,r2,4148
   20450:	10800037 	ldwio	r2,0(r2)
   20454:	100b883a 	mov	r5,r2
   20458:	010000f4 	movhi	r4,3
   2045c:	213f9704 	addi	r4,r4,-420
   20460:	002dbe00 	call	2dbe0 <alt_printf>
	IOWR_32DIRECT(COUNTER_0_BASE, COUNT_Stop, arbval);
   20464:	00ffffd4 	movui	r3,65535
   20468:	00800134 	movhi	r2,4
   2046c:	10840b04 	addi	r2,r2,4140
   20470:	10c00035 	stwio	r3,0(r2)
}
   20474:	0001883a 	nop
   20478:	e037883a 	mov	sp,fp
   2047c:	dfc00117 	ldw	ra,4(sp)
   20480:	df000017 	ldw	fp,0(sp)
   20484:	dec00204 	addi	sp,sp,8
   20488:	f800283a 	ret

0002048c <resp_isr_print>:

void resp_isr_print(void* context)
{
   2048c:	defffe04 	addi	sp,sp,-8
   20490:	df000115 	stw	fp,4(sp)
   20494:	df000104 	addi	fp,sp,4
   20498:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_TIMER_SNAPL(TIMER_0_BASE, arbval);
   2049c:	00ffffd4 	movui	r3,65535
   204a0:	00800134 	movhi	r2,4
   204a4:	10840404 	addi	r2,r2,4112
   204a8:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_SNAPH(TIMER_0_BASE, arbval);
   204ac:	00ffffd4 	movui	r3,65535
   204b0:	00800134 	movhi	r2,4
   204b4:	10840504 	addi	r2,r2,4116
   204b8:	10c00035 	stwio	r3,0(r2)
	snapl = IORD_ALTERA_AVALON_TIMER_SNAPL(TIMER_0_BASE);
   204bc:	00800134 	movhi	r2,4
   204c0:	10840404 	addi	r2,r2,4112
   204c4:	10800037 	ldwio	r2,0(r2)
   204c8:	d0a6cd15 	stw	r2,-25804(gp)
	snaph = IORD_ALTERA_AVALON_TIMER_SNAPH(TIMER_0_BASE);
   204cc:	00800134 	movhi	r2,4
   204d0:	10840504 	addi	r2,r2,4116
   204d4:	10800037 	ldwio	r2,0(r2)
   204d8:	d0a6cb15 	stw	r2,-25812(gp)
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, 0);
   204dc:	0007883a 	mov	r3,zero
   204e0:	00800134 	movhi	r2,4
   204e4:	10840104 	addi	r2,r2,4100
   204e8:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, 0);
   204ec:	0007883a 	mov	r3,zero
   204f0:	00800134 	movhi	r2,4
   204f4:	10840004 	addi	r2,r2,4096
   204f8:	10c00035 	stwio	r3,0(r2)
	flag = 1;
   204fc:	00800044 	movi	r2,1
   20500:	d0a6cc15 	stw	r2,-25808(gp)
}
   20504:	0001883a 	nop
   20508:	e037883a 	mov	sp,fp
   2050c:	df000017 	ldw	fp,0(sp)
   20510:	dec00104 	addi	sp,sp,4
   20514:	f800283a 	ret

00020518 <resp_isr_parport>:

void resp_isr_parport(void* context)
{
   20518:	defffe04 	addi	sp,sp,-8
   2051c:	df000115 	stw	fp,4(sp)
   20520:	df000104 	addi	fp,sp,4
   20524:	e13fff15 	stw	r4,-4(fp)
	// Record end of response time by setting channel 1 low
	IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x0);
   20528:	0007883a 	mov	r3,zero
   2052c:	00800134 	movhi	r2,4
   20530:	10841004 	addi	r2,r2,4160
   20534:	10c00035 	stwio	r3,0(r2)
	// Clear IRQ
	IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_IRQCLR, arbval);
   20538:	00ffffd4 	movui	r3,65535
   2053c:	00800134 	movhi	r2,4
   20540:	10841404 	addi	r2,r2,4176
   20544:	10c00035 	stwio	r3,0(r2)
}
   20548:	0001883a 	nop
   2054c:	e037883a 	mov	sp,fp
   20550:	df000017 	ldw	fp,0(sp)
   20554:	dec00104 	addi	sp,sp,4
   20558:	f800283a 	ret

0002055c <test_resptime_print>:

void test_resptime_print()
{
   2055c:	defff804 	addi	sp,sp,-32
   20560:	dfc00715 	stw	ra,28(sp)
   20564:	df000615 	stw	fp,24(sp)
   20568:	df000604 	addi	fp,sp,24
	// Register isr
	alt_ic_isr_register(TIMER_0_IRQ_INTERRUPT_CONTROLLER_ID, TIMER_0_IRQ, resp_isr_print, 0, 0);
   2056c:	d8000015 	stw	zero,0(sp)
   20570:	000f883a 	mov	r7,zero
   20574:	018000b4 	movhi	r6,2
   20578:	31812304 	addi	r6,r6,1164
   2057c:	014000c4 	movi	r5,3
   20580:	0009883a 	mov	r4,zero
   20584:	002d5a00 	call	2d5a0 <alt_ic_isr_register>
	// Initialize flag value
	flag = 0;
   20588:	d026cc15 	stw	zero,-25808(gp)
	// Initialize timer
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, 0);
   2058c:	0007883a 	mov	r3,zero
   20590:	00800134 	movhi	r2,4
   20594:	10840104 	addi	r2,r2,4100
   20598:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_0_BASE, 0xF080);
   2059c:	00fc2014 	movui	r3,61568
   205a0:	00800134 	movhi	r2,4
   205a4:	10840204 	addi	r2,r2,4104
   205a8:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_0_BASE, 0x02FA);
   205ac:	00c0be84 	movi	r3,762
   205b0:	00800134 	movhi	r2,4
   205b4:	10840304 	addi	r2,r2,4108
   205b8:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, TIMER_settings_start);
   205bc:	00c001c4 	movi	r3,7
   205c0:	00800134 	movhi	r2,4
   205c4:	10840104 	addi	r2,r2,4100
   205c8:	10c00035 	stwio	r3,0(r2)
	// Setup loop structure
	int counter = 0;
   205cc:	e03ffb15 	stw	zero,-20(fp)
	int max_iter = 10;
   205d0:	00800284 	movi	r2,10
   205d4:	e0bffd15 	stw	r2,-12(fp)
	int accum_val = 0;
   205d8:	e03ffc15 	stw	zero,-16(fp)
	int avg_val = 0;
   205dc:	e03ffe15 	stw	zero,-8(fp)
	int snapval = 0;
   205e0:	e03fff15 	stw	zero,-4(fp)
	printf("Testing response time using stock timer and\n"
   205e4:	e17ffd17 	ldw	r5,-12(fp)
   205e8:	010000f4 	movhi	r4,3
   205ec:	213fcc04 	addi	r4,r4,-208
   205f0:	0020d140 	call	20d14 <printf>
			" counting the average over %d iterations...\n", max_iter);
	while(counter < max_iter)
   205f4:	00001e06 	br	20670 <test_resptime_print+0x114>
	{
		if(flag)
   205f8:	d0a6cc17 	ldw	r2,-25808(gp)
   205fc:	10001c26 	beq	r2,zero,20670 <test_resptime_print+0x114>
		{
			snapval = Count_1secH-snaph<<16|Count_1secL-snapl;
   20600:	d0a6cb17 	ldw	r2,-25812(gp)
   20604:	00c0be84 	movi	r3,762
   20608:	1885c83a 	sub	r2,r3,r2
   2060c:	1006943a 	slli	r3,r2,16
   20610:	d0a6cd17 	ldw	r2,-25804(gp)
   20614:	013c2014 	movui	r4,61568
   20618:	2085c83a 	sub	r2,r4,r2
   2061c:	1884b03a 	or	r2,r3,r2
   20620:	e0bfff15 	stw	r2,-4(fp)
			alt_printf("Value at iteration %x is 0x%x clock cycles\n", counter+1, snapval);
   20624:	e0bffb17 	ldw	r2,-20(fp)
   20628:	10800044 	addi	r2,r2,1
   2062c:	e1bfff17 	ldw	r6,-4(fp)
   20630:	100b883a 	mov	r5,r2
   20634:	010000f4 	movhi	r4,3
   20638:	213fe304 	addi	r4,r4,-116
   2063c:	002dbe00 	call	2dbe0 <alt_printf>
			flag = 0;
   20640:	d026cc15 	stw	zero,-25808(gp)
			IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, TIMER_settings_start);
   20644:	00c001c4 	movi	r3,7
   20648:	00800134 	movhi	r2,4
   2064c:	10840104 	addi	r2,r2,4100
   20650:	10c00035 	stwio	r3,0(r2)
			accum_val += snapval;
   20654:	e0fffc17 	ldw	r3,-16(fp)
   20658:	e0bfff17 	ldw	r2,-4(fp)
   2065c:	1885883a 	add	r2,r3,r2
   20660:	e0bffc15 	stw	r2,-16(fp)
			counter += 1;
   20664:	e0bffb17 	ldw	r2,-20(fp)
   20668:	10800044 	addi	r2,r2,1
   2066c:	e0bffb15 	stw	r2,-20(fp)
	int accum_val = 0;
	int avg_val = 0;
	int snapval = 0;
	printf("Testing response time using stock timer and\n"
			" counting the average over %d iterations...\n", max_iter);
	while(counter < max_iter)
   20670:	e0fffb17 	ldw	r3,-20(fp)
   20674:	e0bffd17 	ldw	r2,-12(fp)
   20678:	18bfdf16 	blt	r3,r2,205f8 <__alt_data_end+0xfffe05f8>
			IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, TIMER_settings_start);
			accum_val += snapval;
			counter += 1;
		}
	}
	avg_val = accum_val/max_iter;
   2067c:	e17ffd17 	ldw	r5,-12(fp)
   20680:	e13ffc17 	ldw	r4,-16(fp)
   20684:	0020b300 	call	20b30 <__divsi3>
   20688:	e0bffe15 	stw	r2,-8(fp)
	printf("Average value for response time is %d clock cycles", avg_val);
   2068c:	e17ffe17 	ldw	r5,-8(fp)
   20690:	010000f4 	movhi	r4,3
   20694:	213fee04 	addi	r4,r4,-72
   20698:	0020d140 	call	20d14 <printf>
}
   2069c:	0001883a 	nop
   206a0:	e037883a 	mov	sp,fp
   206a4:	dfc00117 	ldw	ra,4(sp)
   206a8:	df000017 	ldw	fp,0(sp)
   206ac:	dec00204 	addi	sp,sp,8
   206b0:	f800283a 	ret

000206b4 <test_resptime_parport>:
void test_resptime_parport()
{
   206b4:	defffb04 	addi	sp,sp,-20
   206b8:	dfc00415 	stw	ra,16(sp)
   206bc:	df000315 	stw	fp,12(sp)
   206c0:	df000304 	addi	fp,sp,12
	// Register isr
	alt_ic_isr_register(PARALLELPORT_0_IRQ_INTERRUPT_CONTROLLER_ID, PARALLELPORT_0_IRQ, resp_isr_parport, 0, 0);
   206c4:	d8000015 	stw	zero,0(sp)
   206c8:	000f883a 	mov	r7,zero
   206cc:	018000b4 	movhi	r6,2
   206d0:	31814604 	addi	r6,r6,1304
   206d4:	01400044 	movi	r5,1
   206d8:	0009883a 	mov	r4,zero
   206dc:	002d5a00 	call	2d5a0 <alt_ic_isr_register>
	IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x0);
   206e0:	0007883a 	mov	r3,zero
   206e4:	00800134 	movhi	r2,4
   206e8:	10841004 	addi	r2,r2,4160
   206ec:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_IRQEN, 0x2);
   206f0:	00c00084 	movi	r3,2
   206f4:	00800134 	movhi	r2,4
   206f8:	10841304 	addi	r2,r2,4172
   206fc:	10c00035 	stwio	r3,0(r2)
	int iterations = 5;
   20700:	00800144 	movi	r2,5
   20704:	e0bfff15 	stw	r2,-4(fp)
	int counter = 0;
   20708:	e03ffe15 	stw	zero,-8(fp)
	while(counter < iterations)
   2070c:	00000706 	br	2072c <test_resptime_parport+0x78>
	{
		// Trigger interrupt by setting channel 1 high
		IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x2);
   20710:	00c00084 	movi	r3,2
   20714:	00800134 	movhi	r2,4
   20718:	10841004 	addi	r2,r2,4160
   2071c:	10c00035 	stwio	r3,0(r2)
		counter += 1;
   20720:	e0bffe17 	ldw	r2,-8(fp)
   20724:	10800044 	addi	r2,r2,1
   20728:	e0bffe15 	stw	r2,-8(fp)
	alt_ic_isr_register(PARALLELPORT_0_IRQ_INTERRUPT_CONTROLLER_ID, PARALLELPORT_0_IRQ, resp_isr_parport, 0, 0);
	IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x0);
	IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_IRQEN, 0x2);
	int iterations = 5;
	int counter = 0;
	while(counter < iterations)
   2072c:	e0fffe17 	ldw	r3,-8(fp)
   20730:	e0bfff17 	ldw	r2,-4(fp)
   20734:	18bff616 	blt	r3,r2,20710 <__alt_data_end+0xfffe0710>
	{
		// Trigger interrupt by setting channel 1 high
		IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x2);
		counter += 1;
	}
}
   20738:	0001883a 	nop
   2073c:	e037883a 	mov	sp,fp
   20740:	dfc00117 	ldw	ra,4(sp)
   20744:	df000017 	ldw	fp,0(sp)
   20748:	dec00204 	addi	sp,sp,8
   2074c:	f800283a 	ret

00020750 <recov_isr_print>:

void recov_isr_print(void* context)
{
   20750:	defffe04 	addi	sp,sp,-8
   20754:	df000115 	stw	fp,4(sp)
   20758:	df000104 	addi	fp,sp,4
   2075c:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, 0);
   20760:	0007883a 	mov	r3,zero
   20764:	00800134 	movhi	r2,4
   20768:	10840104 	addi	r2,r2,4100
   2076c:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, 0);
   20770:	0007883a 	mov	r3,zero
   20774:	00800134 	movhi	r2,4
   20778:	10840004 	addi	r2,r2,4096
   2077c:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(COUNTER_0_BASE, COUNT_Start, arbval);
   20780:	00ffffd4 	movui	r3,65535
   20784:	00800134 	movhi	r2,4
   20788:	10840a04 	addi	r2,r2,4136
   2078c:	10c00035 	stwio	r3,0(r2)
}
   20790:	0001883a 	nop
   20794:	e037883a 	mov	sp,fp
   20798:	df000017 	ldw	fp,0(sp)
   2079c:	dec00104 	addi	sp,sp,4
   207a0:	f800283a 	ret

000207a4 <recov_isr_parport>:

void recov_isr_parport(void* context)
{
   207a4:	defffe04 	addi	sp,sp,-8
   207a8:	df000115 	stw	fp,4(sp)
   207ac:	df000104 	addi	fp,sp,4
   207b0:	e13fff15 	stw	r4,-4(fp)
	// Clear all parport channels
	IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x0);
   207b4:	0007883a 	mov	r3,zero
   207b8:	00800134 	movhi	r2,4
   207bc:	10841004 	addi	r2,r2,4160
   207c0:	10c00035 	stwio	r3,0(r2)
	// Clear IRQ
	IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_IRQCLR, arbval);
   207c4:	00ffffd4 	movui	r3,65535
   207c8:	00800134 	movhi	r2,4
   207cc:	10841404 	addi	r2,r2,4176
   207d0:	10c00035 	stwio	r3,0(r2)
	// Set channel 0 high to record start of recovery time
	IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x1);
   207d4:	00c00044 	movi	r3,1
   207d8:	00800134 	movhi	r2,4
   207dc:	10841004 	addi	r2,r2,4160
   207e0:	10c00035 	stwio	r3,0(r2)
}
   207e4:	0001883a 	nop
   207e8:	e037883a 	mov	sp,fp
   207ec:	df000017 	ldw	fp,0(sp)
   207f0:	dec00104 	addi	sp,sp,4
   207f4:	f800283a 	ret

000207f8 <test_recovtime_print>:

void test_recovtime_print()
{
   207f8:	defff804 	addi	sp,sp,-32
   207fc:	dfc00715 	stw	ra,28(sp)
   20800:	df000615 	stw	fp,24(sp)
   20804:	df000604 	addi	fp,sp,24
	// Register interrupt function
	alt_ic_isr_register(TIMER_0_IRQ_INTERRUPT_CONTROLLER_ID, TIMER_0_IRQ, recov_isr_print, 0, 0);
   20808:	d8000015 	stw	zero,0(sp)
   2080c:	000f883a 	mov	r7,zero
   20810:	018000b4 	movhi	r6,2
   20814:	3181d404 	addi	r6,r6,1872
   20818:	014000c4 	movi	r5,3
   2081c:	0009883a 	mov	r4,zero
   20820:	002d5a00 	call	2d5a0 <alt_ic_isr_register>
	// Initialize counter, with maximum target value
	IOWR_32DIRECT(COUNTER_0_BASE, COUNT_Target, 0xFFFFFFFF);
   20824:	00ffffc4 	movi	r3,-1
   20828:	00800134 	movhi	r2,4
   2082c:	10840e04 	addi	r2,r2,4152
   20830:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(COUNTER_0_BASE, COUNT_RZ, arbval);
   20834:	00ffffd4 	movui	r3,65535
   20838:	00800134 	movhi	r2,4
   2083c:	10840904 	addi	r2,r2,4132
   20840:	10c00035 	stwio	r3,0(r2)
	// Initialize timer
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, 0);
   20844:	0007883a 	mov	r3,zero
   20848:	00800134 	movhi	r2,4
   2084c:	10840104 	addi	r2,r2,4100
   20850:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_0_BASE, 0xF080);
   20854:	00fc2014 	movui	r3,61568
   20858:	00800134 	movhi	r2,4
   2085c:	10840204 	addi	r2,r2,4104
   20860:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_0_BASE, 0x02FA);
   20864:	00c0be84 	movi	r3,762
   20868:	00800134 	movhi	r2,4
   2086c:	10840304 	addi	r2,r2,4108
   20870:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, TIMER_settings_start);
   20874:	00c001c4 	movi	r3,7
   20878:	00800134 	movhi	r2,4
   2087c:	10840104 	addi	r2,r2,4100
   20880:	10c00035 	stwio	r3,0(r2)
	// Setup loop structure
	int counter = 0;
   20884:	e03ffb15 	stw	zero,-20(fp)
	int max_iter = 10;
   20888:	00800284 	movi	r2,10
   2088c:	e0bffe15 	stw	r2,-8(fp)
	int accum_val = 0;
   20890:	e03ffc15 	stw	zero,-16(fp)
	int avg_val = 0;
   20894:	e03fff15 	stw	zero,-4(fp)
	int read_val;
	printf("\n\nTesting recovery time using custom counter and\n"
   20898:	e17ffe17 	ldw	r5,-8(fp)
   2089c:	010000f4 	movhi	r4,3
   208a0:	213ffb04 	addi	r4,r4,-20
   208a4:	0020d140 	call	20d14 <printf>
			" counting the average over %d iterations...\n", max_iter);
	while(counter < max_iter)
   208a8:	00002506 	br	20940 <test_recovtime_print+0x148>
	{
		read_val = IORD_32DIRECT(COUNTER_0_BASE,0);
   208ac:	00800134 	movhi	r2,4
   208b0:	10840804 	addi	r2,r2,4128
   208b4:	10800037 	ldwio	r2,0(r2)
   208b8:	e0bffd15 	stw	r2,-12(fp)
		while(read_val == 0)
   208bc:	00000406 	br	208d0 <test_recovtime_print+0xd8>
		{
			read_val = IORD_32DIRECT(COUNTER_0_BASE,0);
   208c0:	00800134 	movhi	r2,4
   208c4:	10840804 	addi	r2,r2,4128
   208c8:	10800037 	ldwio	r2,0(r2)
   208cc:	e0bffd15 	stw	r2,-12(fp)
	printf("\n\nTesting recovery time using custom counter and\n"
			" counting the average over %d iterations...\n", max_iter);
	while(counter < max_iter)
	{
		read_val = IORD_32DIRECT(COUNTER_0_BASE,0);
		while(read_val == 0)
   208d0:	e0bffd17 	ldw	r2,-12(fp)
   208d4:	103ffa26 	beq	r2,zero,208c0 <__alt_data_end+0xfffe08c0>
		{
			read_val = IORD_32DIRECT(COUNTER_0_BASE,0);
		}
		alt_printf("Value at iteration %x is 0x%x clock cycles\n", counter+1, read_val);
   208d8:	e0bffb17 	ldw	r2,-20(fp)
   208dc:	10800044 	addi	r2,r2,1
   208e0:	e1bffd17 	ldw	r6,-12(fp)
   208e4:	100b883a 	mov	r5,r2
   208e8:	010000f4 	movhi	r4,3
   208ec:	213fe304 	addi	r4,r4,-116
   208f0:	002dbe00 	call	2dbe0 <alt_printf>
		accum_val += read_val;
   208f4:	e0fffc17 	ldw	r3,-16(fp)
   208f8:	e0bffd17 	ldw	r2,-12(fp)
   208fc:	1885883a 	add	r2,r3,r2
   20900:	e0bffc15 	stw	r2,-16(fp)
		counter += 1;
   20904:	e0bffb17 	ldw	r2,-20(fp)
   20908:	10800044 	addi	r2,r2,1
   2090c:	e0bffb15 	stw	r2,-20(fp)
		IOWR_32DIRECT(COUNTER_0_BASE, COUNT_Stop, arbval);
   20910:	00ffffd4 	movui	r3,65535
   20914:	00800134 	movhi	r2,4
   20918:	10840b04 	addi	r2,r2,4140
   2091c:	10c00035 	stwio	r3,0(r2)
		IOWR_32DIRECT(COUNTER_0_BASE, COUNT_RZ, arbval);
   20920:	00ffffd4 	movui	r3,65535
   20924:	00800134 	movhi	r2,4
   20928:	10840904 	addi	r2,r2,4132
   2092c:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, TIMER_settings_start);
   20930:	00c001c4 	movi	r3,7
   20934:	00800134 	movhi	r2,4
   20938:	10840104 	addi	r2,r2,4100
   2093c:	10c00035 	stwio	r3,0(r2)
	int accum_val = 0;
	int avg_val = 0;
	int read_val;
	printf("\n\nTesting recovery time using custom counter and\n"
			" counting the average over %d iterations...\n", max_iter);
	while(counter < max_iter)
   20940:	e0fffb17 	ldw	r3,-20(fp)
   20944:	e0bffe17 	ldw	r2,-8(fp)
   20948:	18bfd816 	blt	r3,r2,208ac <__alt_data_end+0xfffe08ac>
		counter += 1;
		IOWR_32DIRECT(COUNTER_0_BASE, COUNT_Stop, arbval);
		IOWR_32DIRECT(COUNTER_0_BASE, COUNT_RZ, arbval);
		IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, TIMER_settings_start);
	}
	avg_val = accum_val/max_iter;
   2094c:	e17ffe17 	ldw	r5,-8(fp)
   20950:	e13ffc17 	ldw	r4,-16(fp)
   20954:	0020b300 	call	20b30 <__divsi3>
   20958:	e0bfff15 	stw	r2,-4(fp)
	printf("Average value for recovery time is %d clock cycles", avg_val);
   2095c:	e17fff17 	ldw	r5,-4(fp)
   20960:	010000f4 	movhi	r4,3
   20964:	21001304 	addi	r4,r4,76
   20968:	0020d140 	call	20d14 <printf>
}
   2096c:	0001883a 	nop
   20970:	e037883a 	mov	sp,fp
   20974:	dfc00117 	ldw	ra,4(sp)
   20978:	df000017 	ldw	fp,0(sp)
   2097c:	dec00204 	addi	sp,sp,8
   20980:	f800283a 	ret

00020984 <test_recovtime_parport>:

void test_recovtime_parport()
{
   20984:	defffb04 	addi	sp,sp,-20
   20988:	dfc00415 	stw	ra,16(sp)
   2098c:	df000315 	stw	fp,12(sp)
   20990:	df000304 	addi	fp,sp,12
	// Register isr
		alt_ic_isr_register(PARALLELPORT_0_IRQ_INTERRUPT_CONTROLLER_ID, PARALLELPORT_0_IRQ, recov_isr_parport, 0, 0);
   20994:	d8000015 	stw	zero,0(sp)
   20998:	000f883a 	mov	r7,zero
   2099c:	018000b4 	movhi	r6,2
   209a0:	3181e904 	addi	r6,r6,1956
   209a4:	01400044 	movi	r5,1
   209a8:	0009883a 	mov	r4,zero
   209ac:	002d5a00 	call	2d5a0 <alt_ic_isr_register>
		IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x0);
   209b0:	0007883a 	mov	r3,zero
   209b4:	00800134 	movhi	r2,4
   209b8:	10841004 	addi	r2,r2,4160
   209bc:	10c00035 	stwio	r3,0(r2)
		IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_IRQEN, 0x2);
   209c0:	00c00084 	movi	r3,2
   209c4:	00800134 	movhi	r2,4
   209c8:	10841304 	addi	r2,r2,4172
   209cc:	10c00035 	stwio	r3,0(r2)
		int iterations = 5;
   209d0:	00800144 	movi	r2,5
   209d4:	e0bfff15 	stw	r2,-4(fp)
		int counter = 0;
   209d8:	e03ffe15 	stw	zero,-8(fp)
		while(counter < iterations)
   209dc:	00000b06 	br	20a0c <test_recovtime_parport+0x88>
		{
			// Trigger the interrupt by setting channel 1 high
			IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x2);
   209e0:	00c00084 	movi	r3,2
   209e4:	00800134 	movhi	r2,4
   209e8:	10841004 	addi	r2,r2,4160
   209ec:	10c00035 	stwio	r3,0(r2)
			// Record end of recovery time by setting channel 0 low
			IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x0);
   209f0:	0007883a 	mov	r3,zero
   209f4:	00800134 	movhi	r2,4
   209f8:	10841004 	addi	r2,r2,4160
   209fc:	10c00035 	stwio	r3,0(r2)
			counter += 1;
   20a00:	e0bffe17 	ldw	r2,-8(fp)
   20a04:	10800044 	addi	r2,r2,1
   20a08:	e0bffe15 	stw	r2,-8(fp)
		alt_ic_isr_register(PARALLELPORT_0_IRQ_INTERRUPT_CONTROLLER_ID, PARALLELPORT_0_IRQ, recov_isr_parport, 0, 0);
		IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x0);
		IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_IRQEN, 0x2);
		int iterations = 5;
		int counter = 0;
		while(counter < iterations)
   20a0c:	e0fffe17 	ldw	r3,-8(fp)
   20a10:	e0bfff17 	ldw	r2,-4(fp)
   20a14:	18bff216 	blt	r3,r2,209e0 <__alt_data_end+0xfffe09e0>
			IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x2);
			// Record end of recovery time by setting channel 0 low
			IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x0);
			counter += 1;
		}
}
   20a18:	0001883a 	nop
   20a1c:	e037883a 	mov	sp,fp
   20a20:	dfc00117 	ldw	ra,4(sp)
   20a24:	df000017 	ldw	fp,0(sp)
   20a28:	dec00204 	addi	sp,sp,8
   20a2c:	f800283a 	ret

00020a30 <latency_isr_parport>:

void latency_isr_parport(void* context)
{
   20a30:	defffe04 	addi	sp,sp,-8
   20a34:	df000115 	stw	fp,4(sp)
   20a38:	df000104 	addi	fp,sp,4
   20a3c:	e13fff15 	stw	r4,-4(fp)
	IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_IRQCLR, arbval);
   20a40:	00ffffd4 	movui	r3,65535
   20a44:	00800134 	movhi	r2,4
   20a48:	10841404 	addi	r2,r2,4176
   20a4c:	10c00035 	stwio	r3,0(r2)
}
   20a50:	0001883a 	nop
   20a54:	e037883a 	mov	sp,fp
   20a58:	df000017 	ldw	fp,0(sp)
   20a5c:	dec00104 	addi	sp,sp,4
   20a60:	f800283a 	ret

00020a64 <test_latency_parport>:

void test_latency_parport()
{
   20a64:	defffb04 	addi	sp,sp,-20
   20a68:	dfc00415 	stw	ra,16(sp)
   20a6c:	df000315 	stw	fp,12(sp)
   20a70:	df000304 	addi	fp,sp,12
	alt_ic_isr_register(PARALLELPORT_0_IRQ_INTERRUPT_CONTROLLER_ID, PARALLELPORT_0_IRQ, latency_isr_parport, 0, 0);
   20a74:	d8000015 	stw	zero,0(sp)
   20a78:	000f883a 	mov	r7,zero
   20a7c:	018000b4 	movhi	r6,2
   20a80:	31828c04 	addi	r6,r6,2608
   20a84:	01400044 	movi	r5,1
   20a88:	0009883a 	mov	r4,zero
   20a8c:	002d5a00 	call	2d5a0 <alt_ic_isr_register>
	IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x0);
   20a90:	0007883a 	mov	r3,zero
   20a94:	00800134 	movhi	r2,4
   20a98:	10841004 	addi	r2,r2,4160
   20a9c:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_IRQEN, 0x1);
   20aa0:	00c00044 	movi	r3,1
   20aa4:	00800134 	movhi	r2,4
   20aa8:	10841304 	addi	r2,r2,4172
   20aac:	10c00035 	stwio	r3,0(r2)
	int iterations = 1e2;
   20ab0:	00801904 	movi	r2,100
   20ab4:	e0bfff15 	stw	r2,-4(fp)
	int counter = 0;
   20ab8:	e03ffe15 	stw	zero,-8(fp)
	while(counter < iterations)
   20abc:	00000706 	br	20adc <test_latency_parport+0x78>
	{
		// Trigger the interrupt by setting channel 1 high
		IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x1);
   20ac0:	00c00044 	movi	r3,1
   20ac4:	00800134 	movhi	r2,4
   20ac8:	10841004 	addi	r2,r2,4160
   20acc:	10c00035 	stwio	r3,0(r2)

		counter += 1;
   20ad0:	e0bffe17 	ldw	r2,-8(fp)
   20ad4:	10800044 	addi	r2,r2,1
   20ad8:	e0bffe15 	stw	r2,-8(fp)
	alt_ic_isr_register(PARALLELPORT_0_IRQ_INTERRUPT_CONTROLLER_ID, PARALLELPORT_0_IRQ, latency_isr_parport, 0, 0);
	IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x0);
	IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_IRQEN, 0x1);
	int iterations = 1e2;
	int counter = 0;
	while(counter < iterations)
   20adc:	e0fffe17 	ldw	r3,-8(fp)
   20ae0:	e0bfff17 	ldw	r2,-4(fp)
   20ae4:	18bff616 	blt	r3,r2,20ac0 <__alt_data_end+0xfffe0ac0>
		// Trigger the interrupt by setting channel 1 high
		IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x1);

		counter += 1;
	}
}
   20ae8:	0001883a 	nop
   20aec:	e037883a 	mov	sp,fp
   20af0:	dfc00117 	ldw	ra,4(sp)
   20af4:	df000017 	ldw	fp,0(sp)
   20af8:	dec00204 	addi	sp,sp,8
   20afc:	f800283a 	ret

00020b00 <main>:

int main()
{
   20b00:	defffe04 	addi	sp,sp,-8
   20b04:	dfc00115 	stw	ra,4(sp)
   20b08:	df000015 	stw	fp,0(sp)
   20b0c:	d839883a 	mov	fp,sp
	// Latency tests
	// De-comment line 90 in alt_irq_handler.c to run this test
	//test_latency_parport();

	// Response time tests
	test_resptime_print();
   20b10:	002055c0 	call	2055c <test_resptime_print>
	//test_resptime_parport();

	// Recovery time tests
	test_recovtime_print();
   20b14:	00207f80 	call	207f8 <test_recovtime_print>
	//test_recovtime_parport();
	return 0;
   20b18:	0005883a 	mov	r2,zero
}
   20b1c:	e037883a 	mov	sp,fp
   20b20:	dfc00117 	ldw	ra,4(sp)
   20b24:	df000017 	ldw	fp,0(sp)
   20b28:	dec00204 	addi	sp,sp,8
   20b2c:	f800283a 	ret

00020b30 <__divsi3>:
   20b30:	20001b16 	blt	r4,zero,20ba0 <__divsi3+0x70>
   20b34:	000f883a 	mov	r7,zero
   20b38:	28001616 	blt	r5,zero,20b94 <__divsi3+0x64>
   20b3c:	200d883a 	mov	r6,r4
   20b40:	29001a2e 	bgeu	r5,r4,20bac <__divsi3+0x7c>
   20b44:	00800804 	movi	r2,32
   20b48:	00c00044 	movi	r3,1
   20b4c:	00000106 	br	20b54 <__divsi3+0x24>
   20b50:	10000d26 	beq	r2,zero,20b88 <__divsi3+0x58>
   20b54:	294b883a 	add	r5,r5,r5
   20b58:	10bfffc4 	addi	r2,r2,-1
   20b5c:	18c7883a 	add	r3,r3,r3
   20b60:	293ffb36 	bltu	r5,r4,20b50 <__alt_data_end+0xfffe0b50>
   20b64:	0005883a 	mov	r2,zero
   20b68:	18000726 	beq	r3,zero,20b88 <__divsi3+0x58>
   20b6c:	0005883a 	mov	r2,zero
   20b70:	31400236 	bltu	r6,r5,20b7c <__divsi3+0x4c>
   20b74:	314dc83a 	sub	r6,r6,r5
   20b78:	10c4b03a 	or	r2,r2,r3
   20b7c:	1806d07a 	srli	r3,r3,1
   20b80:	280ad07a 	srli	r5,r5,1
   20b84:	183ffa1e 	bne	r3,zero,20b70 <__alt_data_end+0xfffe0b70>
   20b88:	38000126 	beq	r7,zero,20b90 <__divsi3+0x60>
   20b8c:	0085c83a 	sub	r2,zero,r2
   20b90:	f800283a 	ret
   20b94:	014bc83a 	sub	r5,zero,r5
   20b98:	39c0005c 	xori	r7,r7,1
   20b9c:	003fe706 	br	20b3c <__alt_data_end+0xfffe0b3c>
   20ba0:	0109c83a 	sub	r4,zero,r4
   20ba4:	01c00044 	movi	r7,1
   20ba8:	003fe306 	br	20b38 <__alt_data_end+0xfffe0b38>
   20bac:	00c00044 	movi	r3,1
   20bb0:	003fee06 	br	20b6c <__alt_data_end+0xfffe0b6c>

00020bb4 <__modsi3>:
   20bb4:	20001716 	blt	r4,zero,20c14 <__modsi3+0x60>
   20bb8:	000f883a 	mov	r7,zero
   20bbc:	2005883a 	mov	r2,r4
   20bc0:	28001216 	blt	r5,zero,20c0c <__modsi3+0x58>
   20bc4:	2900162e 	bgeu	r5,r4,20c20 <__modsi3+0x6c>
   20bc8:	01800804 	movi	r6,32
   20bcc:	00c00044 	movi	r3,1
   20bd0:	00000106 	br	20bd8 <__modsi3+0x24>
   20bd4:	30000a26 	beq	r6,zero,20c00 <__modsi3+0x4c>
   20bd8:	294b883a 	add	r5,r5,r5
   20bdc:	31bfffc4 	addi	r6,r6,-1
   20be0:	18c7883a 	add	r3,r3,r3
   20be4:	293ffb36 	bltu	r5,r4,20bd4 <__alt_data_end+0xfffe0bd4>
   20be8:	18000526 	beq	r3,zero,20c00 <__modsi3+0x4c>
   20bec:	1806d07a 	srli	r3,r3,1
   20bf0:	11400136 	bltu	r2,r5,20bf8 <__modsi3+0x44>
   20bf4:	1145c83a 	sub	r2,r2,r5
   20bf8:	280ad07a 	srli	r5,r5,1
   20bfc:	183ffb1e 	bne	r3,zero,20bec <__alt_data_end+0xfffe0bec>
   20c00:	38000126 	beq	r7,zero,20c08 <__modsi3+0x54>
   20c04:	0085c83a 	sub	r2,zero,r2
   20c08:	f800283a 	ret
   20c0c:	014bc83a 	sub	r5,zero,r5
   20c10:	003fec06 	br	20bc4 <__alt_data_end+0xfffe0bc4>
   20c14:	0109c83a 	sub	r4,zero,r4
   20c18:	01c00044 	movi	r7,1
   20c1c:	003fe706 	br	20bbc <__alt_data_end+0xfffe0bbc>
   20c20:	00c00044 	movi	r3,1
   20c24:	003ff106 	br	20bec <__alt_data_end+0xfffe0bec>

00020c28 <__udivsi3>:
   20c28:	200d883a 	mov	r6,r4
   20c2c:	2900152e 	bgeu	r5,r4,20c84 <__udivsi3+0x5c>
   20c30:	28001416 	blt	r5,zero,20c84 <__udivsi3+0x5c>
   20c34:	00800804 	movi	r2,32
   20c38:	00c00044 	movi	r3,1
   20c3c:	00000206 	br	20c48 <__udivsi3+0x20>
   20c40:	10000e26 	beq	r2,zero,20c7c <__udivsi3+0x54>
   20c44:	28000516 	blt	r5,zero,20c5c <__udivsi3+0x34>
   20c48:	294b883a 	add	r5,r5,r5
   20c4c:	10bfffc4 	addi	r2,r2,-1
   20c50:	18c7883a 	add	r3,r3,r3
   20c54:	293ffa36 	bltu	r5,r4,20c40 <__alt_data_end+0xfffe0c40>
   20c58:	18000826 	beq	r3,zero,20c7c <__udivsi3+0x54>
   20c5c:	0005883a 	mov	r2,zero
   20c60:	31400236 	bltu	r6,r5,20c6c <__udivsi3+0x44>
   20c64:	314dc83a 	sub	r6,r6,r5
   20c68:	10c4b03a 	or	r2,r2,r3
   20c6c:	1806d07a 	srli	r3,r3,1
   20c70:	280ad07a 	srli	r5,r5,1
   20c74:	183ffa1e 	bne	r3,zero,20c60 <__alt_data_end+0xfffe0c60>
   20c78:	f800283a 	ret
   20c7c:	0005883a 	mov	r2,zero
   20c80:	f800283a 	ret
   20c84:	00c00044 	movi	r3,1
   20c88:	003ff406 	br	20c5c <__alt_data_end+0xfffe0c5c>

00020c8c <__umodsi3>:
   20c8c:	2005883a 	mov	r2,r4
   20c90:	2900122e 	bgeu	r5,r4,20cdc <__umodsi3+0x50>
   20c94:	28001116 	blt	r5,zero,20cdc <__umodsi3+0x50>
   20c98:	01800804 	movi	r6,32
   20c9c:	00c00044 	movi	r3,1
   20ca0:	00000206 	br	20cac <__umodsi3+0x20>
   20ca4:	30000c26 	beq	r6,zero,20cd8 <__umodsi3+0x4c>
   20ca8:	28000516 	blt	r5,zero,20cc0 <__umodsi3+0x34>
   20cac:	294b883a 	add	r5,r5,r5
   20cb0:	31bfffc4 	addi	r6,r6,-1
   20cb4:	18c7883a 	add	r3,r3,r3
   20cb8:	293ffa36 	bltu	r5,r4,20ca4 <__alt_data_end+0xfffe0ca4>
   20cbc:	18000626 	beq	r3,zero,20cd8 <__umodsi3+0x4c>
   20cc0:	1806d07a 	srli	r3,r3,1
   20cc4:	11400136 	bltu	r2,r5,20ccc <__umodsi3+0x40>
   20cc8:	1145c83a 	sub	r2,r2,r5
   20ccc:	280ad07a 	srli	r5,r5,1
   20cd0:	183ffb1e 	bne	r3,zero,20cc0 <__alt_data_end+0xfffe0cc0>
   20cd4:	f800283a 	ret
   20cd8:	f800283a 	ret
   20cdc:	00c00044 	movi	r3,1
   20ce0:	003ff706 	br	20cc0 <__alt_data_end+0xfffe0cc0>

00020ce4 <_printf_r>:
   20ce4:	defffd04 	addi	sp,sp,-12
   20ce8:	2805883a 	mov	r2,r5
   20cec:	dfc00015 	stw	ra,0(sp)
   20cf0:	d9800115 	stw	r6,4(sp)
   20cf4:	d9c00215 	stw	r7,8(sp)
   20cf8:	21400217 	ldw	r5,8(r4)
   20cfc:	d9c00104 	addi	r7,sp,4
   20d00:	100d883a 	mov	r6,r2
   20d04:	0020d500 	call	20d50 <___vfprintf_internal_r>
   20d08:	dfc00017 	ldw	ra,0(sp)
   20d0c:	dec00304 	addi	sp,sp,12
   20d10:	f800283a 	ret

00020d14 <printf>:
   20d14:	defffc04 	addi	sp,sp,-16
   20d18:	dfc00015 	stw	ra,0(sp)
   20d1c:	d9400115 	stw	r5,4(sp)
   20d20:	d9800215 	stw	r6,8(sp)
   20d24:	d9c00315 	stw	r7,12(sp)
   20d28:	008000f4 	movhi	r2,3
   20d2c:	10878b04 	addi	r2,r2,7724
   20d30:	10800017 	ldw	r2,0(r2)
   20d34:	200b883a 	mov	r5,r4
   20d38:	d9800104 	addi	r6,sp,4
   20d3c:	11000217 	ldw	r4,8(r2)
   20d40:	0022f480 	call	22f48 <__vfprintf_internal>
   20d44:	dfc00017 	ldw	ra,0(sp)
   20d48:	dec00404 	addi	sp,sp,16
   20d4c:	f800283a 	ret

00020d50 <___vfprintf_internal_r>:
   20d50:	deffb804 	addi	sp,sp,-288
   20d54:	dfc04715 	stw	ra,284(sp)
   20d58:	ddc04515 	stw	r23,276(sp)
   20d5c:	dd404315 	stw	r21,268(sp)
   20d60:	d9002c15 	stw	r4,176(sp)
   20d64:	282f883a 	mov	r23,r5
   20d68:	302b883a 	mov	r21,r6
   20d6c:	d9c02d15 	stw	r7,180(sp)
   20d70:	df004615 	stw	fp,280(sp)
   20d74:	dd804415 	stw	r22,272(sp)
   20d78:	dd004215 	stw	r20,264(sp)
   20d7c:	dcc04115 	stw	r19,260(sp)
   20d80:	dc804015 	stw	r18,256(sp)
   20d84:	dc403f15 	stw	r17,252(sp)
   20d88:	dc003e15 	stw	r16,248(sp)
   20d8c:	00256ac0 	call	256ac <_localeconv_r>
   20d90:	10800017 	ldw	r2,0(r2)
   20d94:	1009883a 	mov	r4,r2
   20d98:	d8803415 	stw	r2,208(sp)
   20d9c:	00276d40 	call	276d4 <strlen>
   20da0:	d8803715 	stw	r2,220(sp)
   20da4:	d8802c17 	ldw	r2,176(sp)
   20da8:	10000226 	beq	r2,zero,20db4 <___vfprintf_internal_r+0x64>
   20dac:	10800e17 	ldw	r2,56(r2)
   20db0:	1000f926 	beq	r2,zero,21198 <___vfprintf_internal_r+0x448>
   20db4:	b880030b 	ldhu	r2,12(r23)
   20db8:	10c8000c 	andi	r3,r2,8192
   20dbc:	1800061e 	bne	r3,zero,20dd8 <___vfprintf_internal_r+0x88>
   20dc0:	b9001917 	ldw	r4,100(r23)
   20dc4:	00f7ffc4 	movi	r3,-8193
   20dc8:	10880014 	ori	r2,r2,8192
   20dcc:	20c6703a 	and	r3,r4,r3
   20dd0:	b880030d 	sth	r2,12(r23)
   20dd4:	b8c01915 	stw	r3,100(r23)
   20dd8:	10c0020c 	andi	r3,r2,8
   20ddc:	1800c126 	beq	r3,zero,210e4 <___vfprintf_internal_r+0x394>
   20de0:	b8c00417 	ldw	r3,16(r23)
   20de4:	1800bf26 	beq	r3,zero,210e4 <___vfprintf_internal_r+0x394>
   20de8:	1080068c 	andi	r2,r2,26
   20dec:	00c00284 	movi	r3,10
   20df0:	10c0c426 	beq	r2,r3,21104 <___vfprintf_internal_r+0x3b4>
   20df4:	d8c00404 	addi	r3,sp,16
   20df8:	050000f4 	movhi	r20,3
   20dfc:	d9001e04 	addi	r4,sp,120
   20e00:	a5003084 	addi	r20,r20,194
   20e04:	d8c01e15 	stw	r3,120(sp)
   20e08:	d8002015 	stw	zero,128(sp)
   20e0c:	d8001f15 	stw	zero,124(sp)
   20e10:	d8003315 	stw	zero,204(sp)
   20e14:	d8003615 	stw	zero,216(sp)
   20e18:	d8003815 	stw	zero,224(sp)
   20e1c:	1811883a 	mov	r8,r3
   20e20:	d8003915 	stw	zero,228(sp)
   20e24:	d8003a15 	stw	zero,232(sp)
   20e28:	d8002f15 	stw	zero,188(sp)
   20e2c:	d9002815 	stw	r4,160(sp)
   20e30:	a8800007 	ldb	r2,0(r21)
   20e34:	10027b26 	beq	r2,zero,21824 <___vfprintf_internal_r+0xad4>
   20e38:	00c00944 	movi	r3,37
   20e3c:	a821883a 	mov	r16,r21
   20e40:	10c0021e 	bne	r2,r3,20e4c <___vfprintf_internal_r+0xfc>
   20e44:	00001406 	br	20e98 <___vfprintf_internal_r+0x148>
   20e48:	10c00326 	beq	r2,r3,20e58 <___vfprintf_internal_r+0x108>
   20e4c:	84000044 	addi	r16,r16,1
   20e50:	80800007 	ldb	r2,0(r16)
   20e54:	103ffc1e 	bne	r2,zero,20e48 <__alt_data_end+0xfffe0e48>
   20e58:	8563c83a 	sub	r17,r16,r21
   20e5c:	88000e26 	beq	r17,zero,20e98 <___vfprintf_internal_r+0x148>
   20e60:	d8c02017 	ldw	r3,128(sp)
   20e64:	d8801f17 	ldw	r2,124(sp)
   20e68:	45400015 	stw	r21,0(r8)
   20e6c:	1c47883a 	add	r3,r3,r17
   20e70:	10800044 	addi	r2,r2,1
   20e74:	d8c02015 	stw	r3,128(sp)
   20e78:	44400115 	stw	r17,4(r8)
   20e7c:	d8801f15 	stw	r2,124(sp)
   20e80:	00c001c4 	movi	r3,7
   20e84:	1880a716 	blt	r3,r2,21124 <___vfprintf_internal_r+0x3d4>
   20e88:	42000204 	addi	r8,r8,8
   20e8c:	d9402f17 	ldw	r5,188(sp)
   20e90:	2c4b883a 	add	r5,r5,r17
   20e94:	d9402f15 	stw	r5,188(sp)
   20e98:	80800007 	ldb	r2,0(r16)
   20e9c:	1000a826 	beq	r2,zero,21140 <___vfprintf_internal_r+0x3f0>
   20ea0:	84400047 	ldb	r17,1(r16)
   20ea4:	00bfffc4 	movi	r2,-1
   20ea8:	85400044 	addi	r21,r16,1
   20eac:	d8002785 	stb	zero,158(sp)
   20eb0:	0007883a 	mov	r3,zero
   20eb4:	000f883a 	mov	r7,zero
   20eb8:	d8802915 	stw	r2,164(sp)
   20ebc:	d8003115 	stw	zero,196(sp)
   20ec0:	0025883a 	mov	r18,zero
   20ec4:	01401604 	movi	r5,88
   20ec8:	01800244 	movi	r6,9
   20ecc:	02800a84 	movi	r10,42
   20ed0:	02401b04 	movi	r9,108
   20ed4:	ad400044 	addi	r21,r21,1
   20ed8:	88bff804 	addi	r2,r17,-32
   20edc:	28830436 	bltu	r5,r2,21af0 <___vfprintf_internal_r+0xda0>
   20ee0:	100490ba 	slli	r2,r2,2
   20ee4:	010000b4 	movhi	r4,2
   20ee8:	2103be04 	addi	r4,r4,3832
   20eec:	1105883a 	add	r2,r2,r4
   20ef0:	10800017 	ldw	r2,0(r2)
   20ef4:	1000683a 	jmp	r2
   20ef8:	00021a10 	cmplti	zero,zero,2152
   20efc:	00021af0 	cmpltui	zero,zero,2155
   20f00:	00021af0 	cmpltui	zero,zero,2155
   20f04:	00021a30 	cmpltui	zero,zero,2152
   20f08:	00021af0 	cmpltui	zero,zero,2155
   20f0c:	00021af0 	cmpltui	zero,zero,2155
   20f10:	00021af0 	cmpltui	zero,zero,2155
   20f14:	00021af0 	cmpltui	zero,zero,2155
   20f18:	00021af0 	cmpltui	zero,zero,2155
   20f1c:	00021af0 	cmpltui	zero,zero,2155
   20f20:	000211a4 	muli	zero,zero,2118
   20f24:	0002194c 	andi	zero,zero,2149
   20f28:	00021af0 	cmpltui	zero,zero,2155
   20f2c:	0002106c 	andhi	zero,zero,2113
   20f30:	000211cc 	andi	zero,zero,2119
   20f34:	00021af0 	cmpltui	zero,zero,2155
   20f38:	0002120c 	andi	zero,zero,2120
   20f3c:	00021218 	cmpnei	zero,zero,2120
   20f40:	00021218 	cmpnei	zero,zero,2120
   20f44:	00021218 	cmpnei	zero,zero,2120
   20f48:	00021218 	cmpnei	zero,zero,2120
   20f4c:	00021218 	cmpnei	zero,zero,2120
   20f50:	00021218 	cmpnei	zero,zero,2120
   20f54:	00021218 	cmpnei	zero,zero,2120
   20f58:	00021218 	cmpnei	zero,zero,2120
   20f5c:	00021218 	cmpnei	zero,zero,2120
   20f60:	00021af0 	cmpltui	zero,zero,2155
   20f64:	00021af0 	cmpltui	zero,zero,2155
   20f68:	00021af0 	cmpltui	zero,zero,2155
   20f6c:	00021af0 	cmpltui	zero,zero,2155
   20f70:	00021af0 	cmpltui	zero,zero,2155
   20f74:	00021af0 	cmpltui	zero,zero,2155
   20f78:	00021af0 	cmpltui	zero,zero,2155
   20f7c:	00021af0 	cmpltui	zero,zero,2155
   20f80:	00021af0 	cmpltui	zero,zero,2155
   20f84:	00021af0 	cmpltui	zero,zero,2155
   20f88:	0002124c 	andi	zero,zero,2121
   20f8c:	00021308 	cmpgei	zero,zero,2124
   20f90:	00021af0 	cmpltui	zero,zero,2155
   20f94:	00021308 	cmpgei	zero,zero,2124
   20f98:	00021af0 	cmpltui	zero,zero,2155
   20f9c:	00021af0 	cmpltui	zero,zero,2155
   20fa0:	00021af0 	cmpltui	zero,zero,2155
   20fa4:	00021af0 	cmpltui	zero,zero,2155
   20fa8:	000213a8 	cmpgeui	zero,zero,2126
   20fac:	00021af0 	cmpltui	zero,zero,2155
   20fb0:	00021af0 	cmpltui	zero,zero,2155
   20fb4:	000213b4 	movhi	zero,2126
   20fb8:	00021af0 	cmpltui	zero,zero,2155
   20fbc:	00021af0 	cmpltui	zero,zero,2155
   20fc0:	00021af0 	cmpltui	zero,zero,2155
   20fc4:	00021af0 	cmpltui	zero,zero,2155
   20fc8:	00021af0 	cmpltui	zero,zero,2155
   20fcc:	0002182c 	andhi	zero,zero,2144
   20fd0:	00021af0 	cmpltui	zero,zero,2155
   20fd4:	00021af0 	cmpltui	zero,zero,2155
   20fd8:	0002188c 	andi	zero,zero,2146
   20fdc:	00021af0 	cmpltui	zero,zero,2155
   20fe0:	00021af0 	cmpltui	zero,zero,2155
   20fe4:	00021af0 	cmpltui	zero,zero,2155
   20fe8:	00021af0 	cmpltui	zero,zero,2155
   20fec:	00021af0 	cmpltui	zero,zero,2155
   20ff0:	00021af0 	cmpltui	zero,zero,2155
   20ff4:	00021af0 	cmpltui	zero,zero,2155
   20ff8:	00021af0 	cmpltui	zero,zero,2155
   20ffc:	00021af0 	cmpltui	zero,zero,2155
   21000:	00021af0 	cmpltui	zero,zero,2155
   21004:	00021a9c 	xori	zero,zero,2154
   21008:	00021a3c 	xorhi	zero,zero,2152
   2100c:	00021308 	cmpgei	zero,zero,2124
   21010:	00021308 	cmpgei	zero,zero,2124
   21014:	00021308 	cmpgei	zero,zero,2124
   21018:	00021a4c 	andi	zero,zero,2153
   2101c:	00021a3c 	xorhi	zero,zero,2152
   21020:	00021af0 	cmpltui	zero,zero,2155
   21024:	00021af0 	cmpltui	zero,zero,2155
   21028:	00021a58 	cmpnei	zero,zero,2153
   2102c:	00021af0 	cmpltui	zero,zero,2155
   21030:	00021a68 	cmpgeui	zero,zero,2153
   21034:	0002193c 	xorhi	zero,zero,2148
   21038:	00021078 	rdprs	zero,zero,2113
   2103c:	0002195c 	xori	zero,zero,2149
   21040:	00021af0 	cmpltui	zero,zero,2155
   21044:	00021968 	cmpgeui	zero,zero,2149
   21048:	00021af0 	cmpltui	zero,zero,2155
   2104c:	000219c4 	movi	zero,2151
   21050:	00021af0 	cmpltui	zero,zero,2155
   21054:	00021af0 	cmpltui	zero,zero,2155
   21058:	000219d4 	movui	zero,2151
   2105c:	d9003117 	ldw	r4,196(sp)
   21060:	d8802d15 	stw	r2,180(sp)
   21064:	0109c83a 	sub	r4,zero,r4
   21068:	d9003115 	stw	r4,196(sp)
   2106c:	94800114 	ori	r18,r18,4
   21070:	ac400007 	ldb	r17,0(r21)
   21074:	003f9706 	br	20ed4 <__alt_data_end+0xfffe0ed4>
   21078:	00800c04 	movi	r2,48
   2107c:	d9002d17 	ldw	r4,180(sp)
   21080:	d9402917 	ldw	r5,164(sp)
   21084:	d8802705 	stb	r2,156(sp)
   21088:	00801e04 	movi	r2,120
   2108c:	d8802745 	stb	r2,157(sp)
   21090:	d8002785 	stb	zero,158(sp)
   21094:	20c00104 	addi	r3,r4,4
   21098:	24c00017 	ldw	r19,0(r4)
   2109c:	002d883a 	mov	r22,zero
   210a0:	90800094 	ori	r2,r18,2
   210a4:	28029a16 	blt	r5,zero,21b10 <___vfprintf_internal_r+0xdc0>
   210a8:	00bfdfc4 	movi	r2,-129
   210ac:	90a4703a 	and	r18,r18,r2
   210b0:	d8c02d15 	stw	r3,180(sp)
   210b4:	94800094 	ori	r18,r18,2
   210b8:	9802871e 	bne	r19,zero,21ad8 <___vfprintf_internal_r+0xd88>
   210bc:	008000f4 	movhi	r2,3
   210c0:	10802904 	addi	r2,r2,164
   210c4:	d8803915 	stw	r2,228(sp)
   210c8:	04401e04 	movi	r17,120
   210cc:	d8802917 	ldw	r2,164(sp)
   210d0:	0039883a 	mov	fp,zero
   210d4:	1001e926 	beq	r2,zero,2187c <___vfprintf_internal_r+0xb2c>
   210d8:	0027883a 	mov	r19,zero
   210dc:	002d883a 	mov	r22,zero
   210e0:	00020506 	br	218f8 <___vfprintf_internal_r+0xba8>
   210e4:	d9002c17 	ldw	r4,176(sp)
   210e8:	b80b883a 	mov	r5,r23
   210ec:	00230200 	call	23020 <__swsetup_r>
   210f0:	1005ac1e 	bne	r2,zero,227a4 <___vfprintf_internal_r+0x1a54>
   210f4:	b880030b 	ldhu	r2,12(r23)
   210f8:	00c00284 	movi	r3,10
   210fc:	1080068c 	andi	r2,r2,26
   21100:	10ff3c1e 	bne	r2,r3,20df4 <__alt_data_end+0xfffe0df4>
   21104:	b880038f 	ldh	r2,14(r23)
   21108:	103f3a16 	blt	r2,zero,20df4 <__alt_data_end+0xfffe0df4>
   2110c:	d9c02d17 	ldw	r7,180(sp)
   21110:	d9002c17 	ldw	r4,176(sp)
   21114:	a80d883a 	mov	r6,r21
   21118:	b80b883a 	mov	r5,r23
   2111c:	0022f640 	call	22f64 <__sbprintf>
   21120:	00001106 	br	21168 <___vfprintf_internal_r+0x418>
   21124:	d9002c17 	ldw	r4,176(sp)
   21128:	d9801e04 	addi	r6,sp,120
   2112c:	b80b883a 	mov	r5,r23
   21130:	00278680 	call	27868 <__sprint_r>
   21134:	1000081e 	bne	r2,zero,21158 <___vfprintf_internal_r+0x408>
   21138:	da000404 	addi	r8,sp,16
   2113c:	003f5306 	br	20e8c <__alt_data_end+0xfffe0e8c>
   21140:	d8802017 	ldw	r2,128(sp)
   21144:	10000426 	beq	r2,zero,21158 <___vfprintf_internal_r+0x408>
   21148:	d9002c17 	ldw	r4,176(sp)
   2114c:	d9801e04 	addi	r6,sp,120
   21150:	b80b883a 	mov	r5,r23
   21154:	00278680 	call	27868 <__sprint_r>
   21158:	b880030b 	ldhu	r2,12(r23)
   2115c:	1080100c 	andi	r2,r2,64
   21160:	1005901e 	bne	r2,zero,227a4 <___vfprintf_internal_r+0x1a54>
   21164:	d8802f17 	ldw	r2,188(sp)
   21168:	dfc04717 	ldw	ra,284(sp)
   2116c:	df004617 	ldw	fp,280(sp)
   21170:	ddc04517 	ldw	r23,276(sp)
   21174:	dd804417 	ldw	r22,272(sp)
   21178:	dd404317 	ldw	r21,268(sp)
   2117c:	dd004217 	ldw	r20,264(sp)
   21180:	dcc04117 	ldw	r19,260(sp)
   21184:	dc804017 	ldw	r18,256(sp)
   21188:	dc403f17 	ldw	r17,252(sp)
   2118c:	dc003e17 	ldw	r16,248(sp)
   21190:	dec04804 	addi	sp,sp,288
   21194:	f800283a 	ret
   21198:	d9002c17 	ldw	r4,176(sp)
   2119c:	0024ff40 	call	24ff4 <__sinit>
   211a0:	003f0406 	br	20db4 <__alt_data_end+0xfffe0db4>
   211a4:	d8802d17 	ldw	r2,180(sp)
   211a8:	d9002d17 	ldw	r4,180(sp)
   211ac:	10800017 	ldw	r2,0(r2)
   211b0:	d8803115 	stw	r2,196(sp)
   211b4:	20800104 	addi	r2,r4,4
   211b8:	d9003117 	ldw	r4,196(sp)
   211bc:	203fa716 	blt	r4,zero,2105c <__alt_data_end+0xfffe105c>
   211c0:	d8802d15 	stw	r2,180(sp)
   211c4:	ac400007 	ldb	r17,0(r21)
   211c8:	003f4206 	br	20ed4 <__alt_data_end+0xfffe0ed4>
   211cc:	ac400007 	ldb	r17,0(r21)
   211d0:	aac00044 	addi	r11,r21,1
   211d4:	8a872826 	beq	r17,r10,22e78 <___vfprintf_internal_r+0x2128>
   211d8:	88bff404 	addi	r2,r17,-48
   211dc:	0009883a 	mov	r4,zero
   211e0:	30867d36 	bltu	r6,r2,22bd8 <___vfprintf_internal_r+0x1e88>
   211e4:	5c400007 	ldb	r17,0(r11)
   211e8:	210002a4 	muli	r4,r4,10
   211ec:	5d400044 	addi	r21,r11,1
   211f0:	a817883a 	mov	r11,r21
   211f4:	2089883a 	add	r4,r4,r2
   211f8:	88bff404 	addi	r2,r17,-48
   211fc:	30bff92e 	bgeu	r6,r2,211e4 <__alt_data_end+0xfffe11e4>
   21200:	2005c916 	blt	r4,zero,22928 <___vfprintf_internal_r+0x1bd8>
   21204:	d9002915 	stw	r4,164(sp)
   21208:	003f3306 	br	20ed8 <__alt_data_end+0xfffe0ed8>
   2120c:	94802014 	ori	r18,r18,128
   21210:	ac400007 	ldb	r17,0(r21)
   21214:	003f2f06 	br	20ed4 <__alt_data_end+0xfffe0ed4>
   21218:	a809883a 	mov	r4,r21
   2121c:	d8003115 	stw	zero,196(sp)
   21220:	88bff404 	addi	r2,r17,-48
   21224:	0017883a 	mov	r11,zero
   21228:	24400007 	ldb	r17,0(r4)
   2122c:	5ac002a4 	muli	r11,r11,10
   21230:	ad400044 	addi	r21,r21,1
   21234:	a809883a 	mov	r4,r21
   21238:	12d7883a 	add	r11,r2,r11
   2123c:	88bff404 	addi	r2,r17,-48
   21240:	30bff92e 	bgeu	r6,r2,21228 <__alt_data_end+0xfffe1228>
   21244:	dac03115 	stw	r11,196(sp)
   21248:	003f2306 	br	20ed8 <__alt_data_end+0xfffe0ed8>
   2124c:	18c03fcc 	andi	r3,r3,255
   21250:	18072b1e 	bne	r3,zero,22f00 <___vfprintf_internal_r+0x21b0>
   21254:	94800414 	ori	r18,r18,16
   21258:	9080080c 	andi	r2,r18,32
   2125c:	10037b26 	beq	r2,zero,2204c <___vfprintf_internal_r+0x12fc>
   21260:	d9402d17 	ldw	r5,180(sp)
   21264:	28800117 	ldw	r2,4(r5)
   21268:	2cc00017 	ldw	r19,0(r5)
   2126c:	29400204 	addi	r5,r5,8
   21270:	d9402d15 	stw	r5,180(sp)
   21274:	102d883a 	mov	r22,r2
   21278:	10044b16 	blt	r2,zero,223a8 <___vfprintf_internal_r+0x1658>
   2127c:	d9402917 	ldw	r5,164(sp)
   21280:	df002783 	ldbu	fp,158(sp)
   21284:	2803bc16 	blt	r5,zero,22178 <___vfprintf_internal_r+0x1428>
   21288:	00ffdfc4 	movi	r3,-129
   2128c:	9d84b03a 	or	r2,r19,r22
   21290:	90e4703a 	and	r18,r18,r3
   21294:	10017726 	beq	r2,zero,21874 <___vfprintf_internal_r+0xb24>
   21298:	b0038326 	beq	r22,zero,220a8 <___vfprintf_internal_r+0x1358>
   2129c:	dc402a15 	stw	r17,168(sp)
   212a0:	dc001e04 	addi	r16,sp,120
   212a4:	b023883a 	mov	r17,r22
   212a8:	402d883a 	mov	r22,r8
   212ac:	9809883a 	mov	r4,r19
   212b0:	880b883a 	mov	r5,r17
   212b4:	01800284 	movi	r6,10
   212b8:	000f883a 	mov	r7,zero
   212bc:	002a7dc0 	call	2a7dc <__umoddi3>
   212c0:	10800c04 	addi	r2,r2,48
   212c4:	843fffc4 	addi	r16,r16,-1
   212c8:	9809883a 	mov	r4,r19
   212cc:	880b883a 	mov	r5,r17
   212d0:	80800005 	stb	r2,0(r16)
   212d4:	01800284 	movi	r6,10
   212d8:	000f883a 	mov	r7,zero
   212dc:	002a2640 	call	2a264 <__udivdi3>
   212e0:	1027883a 	mov	r19,r2
   212e4:	10c4b03a 	or	r2,r2,r3
   212e8:	1823883a 	mov	r17,r3
   212ec:	103fef1e 	bne	r2,zero,212ac <__alt_data_end+0xfffe12ac>
   212f0:	d8c02817 	ldw	r3,160(sp)
   212f4:	dc402a17 	ldw	r17,168(sp)
   212f8:	b011883a 	mov	r8,r22
   212fc:	1c07c83a 	sub	r3,r3,r16
   21300:	d8c02e15 	stw	r3,184(sp)
   21304:	00005906 	br	2146c <___vfprintf_internal_r+0x71c>
   21308:	18c03fcc 	andi	r3,r3,255
   2130c:	1806fa1e 	bne	r3,zero,22ef8 <___vfprintf_internal_r+0x21a8>
   21310:	9080020c 	andi	r2,r18,8
   21314:	10048a26 	beq	r2,zero,22540 <___vfprintf_internal_r+0x17f0>
   21318:	d8c02d17 	ldw	r3,180(sp)
   2131c:	d9002d17 	ldw	r4,180(sp)
   21320:	d9402d17 	ldw	r5,180(sp)
   21324:	18c00017 	ldw	r3,0(r3)
   21328:	21000117 	ldw	r4,4(r4)
   2132c:	29400204 	addi	r5,r5,8
   21330:	d8c03615 	stw	r3,216(sp)
   21334:	d9003815 	stw	r4,224(sp)
   21338:	d9402d15 	stw	r5,180(sp)
   2133c:	d9003617 	ldw	r4,216(sp)
   21340:	d9403817 	ldw	r5,224(sp)
   21344:	da003d15 	stw	r8,244(sp)
   21348:	04000044 	movi	r16,1
   2134c:	00273f40 	call	273f4 <__fpclassifyd>
   21350:	da003d17 	ldw	r8,244(sp)
   21354:	14041f1e 	bne	r2,r16,223d4 <___vfprintf_internal_r+0x1684>
   21358:	d9003617 	ldw	r4,216(sp)
   2135c:	d9403817 	ldw	r5,224(sp)
   21360:	000d883a 	mov	r6,zero
   21364:	000f883a 	mov	r7,zero
   21368:	002c00c0 	call	2c00c <__ledf2>
   2136c:	da003d17 	ldw	r8,244(sp)
   21370:	1005be16 	blt	r2,zero,22a6c <___vfprintf_internal_r+0x1d1c>
   21374:	df002783 	ldbu	fp,158(sp)
   21378:	008011c4 	movi	r2,71
   2137c:	1445330e 	bge	r2,r17,2284c <___vfprintf_internal_r+0x1afc>
   21380:	040000f4 	movhi	r16,3
   21384:	84002104 	addi	r16,r16,132
   21388:	00c000c4 	movi	r3,3
   2138c:	00bfdfc4 	movi	r2,-129
   21390:	d8c02a15 	stw	r3,168(sp)
   21394:	90a4703a 	and	r18,r18,r2
   21398:	d8c02e15 	stw	r3,184(sp)
   2139c:	d8002915 	stw	zero,164(sp)
   213a0:	d8003215 	stw	zero,200(sp)
   213a4:	00003706 	br	21484 <___vfprintf_internal_r+0x734>
   213a8:	94800214 	ori	r18,r18,8
   213ac:	ac400007 	ldb	r17,0(r21)
   213b0:	003ec806 	br	20ed4 <__alt_data_end+0xfffe0ed4>
   213b4:	18c03fcc 	andi	r3,r3,255
   213b8:	1806db1e 	bne	r3,zero,22f28 <___vfprintf_internal_r+0x21d8>
   213bc:	94800414 	ori	r18,r18,16
   213c0:	9080080c 	andi	r2,r18,32
   213c4:	1002d826 	beq	r2,zero,21f28 <___vfprintf_internal_r+0x11d8>
   213c8:	d9402d17 	ldw	r5,180(sp)
   213cc:	d8c02917 	ldw	r3,164(sp)
   213d0:	d8002785 	stb	zero,158(sp)
   213d4:	28800204 	addi	r2,r5,8
   213d8:	2cc00017 	ldw	r19,0(r5)
   213dc:	2d800117 	ldw	r22,4(r5)
   213e0:	18048f16 	blt	r3,zero,22620 <___vfprintf_internal_r+0x18d0>
   213e4:	013fdfc4 	movi	r4,-129
   213e8:	9d86b03a 	or	r3,r19,r22
   213ec:	d8802d15 	stw	r2,180(sp)
   213f0:	9124703a 	and	r18,r18,r4
   213f4:	1802d91e 	bne	r3,zero,21f5c <___vfprintf_internal_r+0x120c>
   213f8:	d8c02917 	ldw	r3,164(sp)
   213fc:	0039883a 	mov	fp,zero
   21400:	1805c326 	beq	r3,zero,22b10 <___vfprintf_internal_r+0x1dc0>
   21404:	0027883a 	mov	r19,zero
   21408:	002d883a 	mov	r22,zero
   2140c:	dc001e04 	addi	r16,sp,120
   21410:	9806d0fa 	srli	r3,r19,3
   21414:	b008977a 	slli	r4,r22,29
   21418:	b02cd0fa 	srli	r22,r22,3
   2141c:	9cc001cc 	andi	r19,r19,7
   21420:	98800c04 	addi	r2,r19,48
   21424:	843fffc4 	addi	r16,r16,-1
   21428:	20e6b03a 	or	r19,r4,r3
   2142c:	80800005 	stb	r2,0(r16)
   21430:	9d86b03a 	or	r3,r19,r22
   21434:	183ff61e 	bne	r3,zero,21410 <__alt_data_end+0xfffe1410>
   21438:	90c0004c 	andi	r3,r18,1
   2143c:	18013b26 	beq	r3,zero,2192c <___vfprintf_internal_r+0xbdc>
   21440:	10803fcc 	andi	r2,r2,255
   21444:	1080201c 	xori	r2,r2,128
   21448:	10bfe004 	addi	r2,r2,-128
   2144c:	00c00c04 	movi	r3,48
   21450:	10c13626 	beq	r2,r3,2192c <___vfprintf_internal_r+0xbdc>
   21454:	80ffffc5 	stb	r3,-1(r16)
   21458:	d8c02817 	ldw	r3,160(sp)
   2145c:	80bfffc4 	addi	r2,r16,-1
   21460:	1021883a 	mov	r16,r2
   21464:	1887c83a 	sub	r3,r3,r2
   21468:	d8c02e15 	stw	r3,184(sp)
   2146c:	d8802e17 	ldw	r2,184(sp)
   21470:	d9002917 	ldw	r4,164(sp)
   21474:	1100010e 	bge	r2,r4,2147c <___vfprintf_internal_r+0x72c>
   21478:	2005883a 	mov	r2,r4
   2147c:	d8802a15 	stw	r2,168(sp)
   21480:	d8003215 	stw	zero,200(sp)
   21484:	e7003fcc 	andi	fp,fp,255
   21488:	e700201c 	xori	fp,fp,128
   2148c:	e73fe004 	addi	fp,fp,-128
   21490:	e0000326 	beq	fp,zero,214a0 <___vfprintf_internal_r+0x750>
   21494:	d8c02a17 	ldw	r3,168(sp)
   21498:	18c00044 	addi	r3,r3,1
   2149c:	d8c02a15 	stw	r3,168(sp)
   214a0:	90c0008c 	andi	r3,r18,2
   214a4:	d8c02b15 	stw	r3,172(sp)
   214a8:	18000326 	beq	r3,zero,214b8 <___vfprintf_internal_r+0x768>
   214ac:	d8c02a17 	ldw	r3,168(sp)
   214b0:	18c00084 	addi	r3,r3,2
   214b4:	d8c02a15 	stw	r3,168(sp)
   214b8:	90c0210c 	andi	r3,r18,132
   214bc:	d8c03015 	stw	r3,192(sp)
   214c0:	1801a31e 	bne	r3,zero,21b50 <___vfprintf_internal_r+0xe00>
   214c4:	d9003117 	ldw	r4,196(sp)
   214c8:	d8c02a17 	ldw	r3,168(sp)
   214cc:	20e7c83a 	sub	r19,r4,r3
   214d0:	04c19f0e 	bge	zero,r19,21b50 <___vfprintf_internal_r+0xe00>
   214d4:	02400404 	movi	r9,16
   214d8:	d8c02017 	ldw	r3,128(sp)
   214dc:	d8801f17 	ldw	r2,124(sp)
   214e0:	4cc50d0e 	bge	r9,r19,22918 <___vfprintf_internal_r+0x1bc8>
   214e4:	014000f4 	movhi	r5,3
   214e8:	29403484 	addi	r5,r5,210
   214ec:	dc403b15 	stw	r17,236(sp)
   214f0:	d9403515 	stw	r5,212(sp)
   214f4:	9823883a 	mov	r17,r19
   214f8:	482d883a 	mov	r22,r9
   214fc:	9027883a 	mov	r19,r18
   21500:	070001c4 	movi	fp,7
   21504:	8025883a 	mov	r18,r16
   21508:	dc002c17 	ldw	r16,176(sp)
   2150c:	00000306 	br	2151c <___vfprintf_internal_r+0x7cc>
   21510:	8c7ffc04 	addi	r17,r17,-16
   21514:	42000204 	addi	r8,r8,8
   21518:	b440130e 	bge	r22,r17,21568 <___vfprintf_internal_r+0x818>
   2151c:	010000f4 	movhi	r4,3
   21520:	18c00404 	addi	r3,r3,16
   21524:	10800044 	addi	r2,r2,1
   21528:	21003484 	addi	r4,r4,210
   2152c:	41000015 	stw	r4,0(r8)
   21530:	45800115 	stw	r22,4(r8)
   21534:	d8c02015 	stw	r3,128(sp)
   21538:	d8801f15 	stw	r2,124(sp)
   2153c:	e0bff40e 	bge	fp,r2,21510 <__alt_data_end+0xfffe1510>
   21540:	d9801e04 	addi	r6,sp,120
   21544:	b80b883a 	mov	r5,r23
   21548:	8009883a 	mov	r4,r16
   2154c:	00278680 	call	27868 <__sprint_r>
   21550:	103f011e 	bne	r2,zero,21158 <__alt_data_end+0xfffe1158>
   21554:	8c7ffc04 	addi	r17,r17,-16
   21558:	d8c02017 	ldw	r3,128(sp)
   2155c:	d8801f17 	ldw	r2,124(sp)
   21560:	da000404 	addi	r8,sp,16
   21564:	b47fed16 	blt	r22,r17,2151c <__alt_data_end+0xfffe151c>
   21568:	9021883a 	mov	r16,r18
   2156c:	9825883a 	mov	r18,r19
   21570:	8827883a 	mov	r19,r17
   21574:	dc403b17 	ldw	r17,236(sp)
   21578:	d9403517 	ldw	r5,212(sp)
   2157c:	98c7883a 	add	r3,r19,r3
   21580:	10800044 	addi	r2,r2,1
   21584:	41400015 	stw	r5,0(r8)
   21588:	44c00115 	stw	r19,4(r8)
   2158c:	d8c02015 	stw	r3,128(sp)
   21590:	d8801f15 	stw	r2,124(sp)
   21594:	010001c4 	movi	r4,7
   21598:	2082a316 	blt	r4,r2,22028 <___vfprintf_internal_r+0x12d8>
   2159c:	df002787 	ldb	fp,158(sp)
   215a0:	42000204 	addi	r8,r8,8
   215a4:	e0000c26 	beq	fp,zero,215d8 <___vfprintf_internal_r+0x888>
   215a8:	d8801f17 	ldw	r2,124(sp)
   215ac:	d9002784 	addi	r4,sp,158
   215b0:	18c00044 	addi	r3,r3,1
   215b4:	10800044 	addi	r2,r2,1
   215b8:	41000015 	stw	r4,0(r8)
   215bc:	01000044 	movi	r4,1
   215c0:	41000115 	stw	r4,4(r8)
   215c4:	d8c02015 	stw	r3,128(sp)
   215c8:	d8801f15 	stw	r2,124(sp)
   215cc:	010001c4 	movi	r4,7
   215d0:	20823c16 	blt	r4,r2,21ec4 <___vfprintf_internal_r+0x1174>
   215d4:	42000204 	addi	r8,r8,8
   215d8:	d8802b17 	ldw	r2,172(sp)
   215dc:	10000c26 	beq	r2,zero,21610 <___vfprintf_internal_r+0x8c0>
   215e0:	d8801f17 	ldw	r2,124(sp)
   215e4:	d9002704 	addi	r4,sp,156
   215e8:	18c00084 	addi	r3,r3,2
   215ec:	10800044 	addi	r2,r2,1
   215f0:	41000015 	stw	r4,0(r8)
   215f4:	01000084 	movi	r4,2
   215f8:	41000115 	stw	r4,4(r8)
   215fc:	d8c02015 	stw	r3,128(sp)
   21600:	d8801f15 	stw	r2,124(sp)
   21604:	010001c4 	movi	r4,7
   21608:	20823616 	blt	r4,r2,21ee4 <___vfprintf_internal_r+0x1194>
   2160c:	42000204 	addi	r8,r8,8
   21610:	d9003017 	ldw	r4,192(sp)
   21614:	00802004 	movi	r2,128
   21618:	20819926 	beq	r4,r2,21c80 <___vfprintf_internal_r+0xf30>
   2161c:	d9402917 	ldw	r5,164(sp)
   21620:	d8802e17 	ldw	r2,184(sp)
   21624:	28adc83a 	sub	r22,r5,r2
   21628:	0580310e 	bge	zero,r22,216f0 <___vfprintf_internal_r+0x9a0>
   2162c:	07000404 	movi	fp,16
   21630:	d8801f17 	ldw	r2,124(sp)
   21634:	e584140e 	bge	fp,r22,22688 <___vfprintf_internal_r+0x1938>
   21638:	014000f4 	movhi	r5,3
   2163c:	29403084 	addi	r5,r5,194
   21640:	dc402915 	stw	r17,164(sp)
   21644:	d9402b15 	stw	r5,172(sp)
   21648:	b023883a 	mov	r17,r22
   2164c:	04c001c4 	movi	r19,7
   21650:	a82d883a 	mov	r22,r21
   21654:	902b883a 	mov	r21,r18
   21658:	8025883a 	mov	r18,r16
   2165c:	dc002c17 	ldw	r16,176(sp)
   21660:	00000306 	br	21670 <___vfprintf_internal_r+0x920>
   21664:	8c7ffc04 	addi	r17,r17,-16
   21668:	42000204 	addi	r8,r8,8
   2166c:	e440110e 	bge	fp,r17,216b4 <___vfprintf_internal_r+0x964>
   21670:	18c00404 	addi	r3,r3,16
   21674:	10800044 	addi	r2,r2,1
   21678:	45000015 	stw	r20,0(r8)
   2167c:	47000115 	stw	fp,4(r8)
   21680:	d8c02015 	stw	r3,128(sp)
   21684:	d8801f15 	stw	r2,124(sp)
   21688:	98bff60e 	bge	r19,r2,21664 <__alt_data_end+0xfffe1664>
   2168c:	d9801e04 	addi	r6,sp,120
   21690:	b80b883a 	mov	r5,r23
   21694:	8009883a 	mov	r4,r16
   21698:	00278680 	call	27868 <__sprint_r>
   2169c:	103eae1e 	bne	r2,zero,21158 <__alt_data_end+0xfffe1158>
   216a0:	8c7ffc04 	addi	r17,r17,-16
   216a4:	d8c02017 	ldw	r3,128(sp)
   216a8:	d8801f17 	ldw	r2,124(sp)
   216ac:	da000404 	addi	r8,sp,16
   216b0:	e47fef16 	blt	fp,r17,21670 <__alt_data_end+0xfffe1670>
   216b4:	9021883a 	mov	r16,r18
   216b8:	a825883a 	mov	r18,r21
   216bc:	b02b883a 	mov	r21,r22
   216c0:	882d883a 	mov	r22,r17
   216c4:	dc402917 	ldw	r17,164(sp)
   216c8:	d9002b17 	ldw	r4,172(sp)
   216cc:	1d87883a 	add	r3,r3,r22
   216d0:	10800044 	addi	r2,r2,1
   216d4:	41000015 	stw	r4,0(r8)
   216d8:	45800115 	stw	r22,4(r8)
   216dc:	d8c02015 	stw	r3,128(sp)
   216e0:	d8801f15 	stw	r2,124(sp)
   216e4:	010001c4 	movi	r4,7
   216e8:	2081ee16 	blt	r4,r2,21ea4 <___vfprintf_internal_r+0x1154>
   216ec:	42000204 	addi	r8,r8,8
   216f0:	9080400c 	andi	r2,r18,256
   216f4:	1001181e 	bne	r2,zero,21b58 <___vfprintf_internal_r+0xe08>
   216f8:	d9402e17 	ldw	r5,184(sp)
   216fc:	d8801f17 	ldw	r2,124(sp)
   21700:	44000015 	stw	r16,0(r8)
   21704:	1947883a 	add	r3,r3,r5
   21708:	10800044 	addi	r2,r2,1
   2170c:	41400115 	stw	r5,4(r8)
   21710:	d8c02015 	stw	r3,128(sp)
   21714:	d8801f15 	stw	r2,124(sp)
   21718:	010001c4 	movi	r4,7
   2171c:	2081d316 	blt	r4,r2,21e6c <___vfprintf_internal_r+0x111c>
   21720:	42000204 	addi	r8,r8,8
   21724:	9480010c 	andi	r18,r18,4
   21728:	90003226 	beq	r18,zero,217f4 <___vfprintf_internal_r+0xaa4>
   2172c:	d9403117 	ldw	r5,196(sp)
   21730:	d8802a17 	ldw	r2,168(sp)
   21734:	28a1c83a 	sub	r16,r5,r2
   21738:	04002e0e 	bge	zero,r16,217f4 <___vfprintf_internal_r+0xaa4>
   2173c:	04400404 	movi	r17,16
   21740:	d8801f17 	ldw	r2,124(sp)
   21744:	8c04a20e 	bge	r17,r16,229d0 <___vfprintf_internal_r+0x1c80>
   21748:	014000f4 	movhi	r5,3
   2174c:	29403484 	addi	r5,r5,210
   21750:	d9403515 	stw	r5,212(sp)
   21754:	048001c4 	movi	r18,7
   21758:	dcc02c17 	ldw	r19,176(sp)
   2175c:	00000306 	br	2176c <___vfprintf_internal_r+0xa1c>
   21760:	843ffc04 	addi	r16,r16,-16
   21764:	42000204 	addi	r8,r8,8
   21768:	8c00130e 	bge	r17,r16,217b8 <___vfprintf_internal_r+0xa68>
   2176c:	010000f4 	movhi	r4,3
   21770:	18c00404 	addi	r3,r3,16
   21774:	10800044 	addi	r2,r2,1
   21778:	21003484 	addi	r4,r4,210
   2177c:	41000015 	stw	r4,0(r8)
   21780:	44400115 	stw	r17,4(r8)
   21784:	d8c02015 	stw	r3,128(sp)
   21788:	d8801f15 	stw	r2,124(sp)
   2178c:	90bff40e 	bge	r18,r2,21760 <__alt_data_end+0xfffe1760>
   21790:	d9801e04 	addi	r6,sp,120
   21794:	b80b883a 	mov	r5,r23
   21798:	9809883a 	mov	r4,r19
   2179c:	00278680 	call	27868 <__sprint_r>
   217a0:	103e6d1e 	bne	r2,zero,21158 <__alt_data_end+0xfffe1158>
   217a4:	843ffc04 	addi	r16,r16,-16
   217a8:	d8c02017 	ldw	r3,128(sp)
   217ac:	d8801f17 	ldw	r2,124(sp)
   217b0:	da000404 	addi	r8,sp,16
   217b4:	8c3fed16 	blt	r17,r16,2176c <__alt_data_end+0xfffe176c>
   217b8:	d9403517 	ldw	r5,212(sp)
   217bc:	1c07883a 	add	r3,r3,r16
   217c0:	10800044 	addi	r2,r2,1
   217c4:	41400015 	stw	r5,0(r8)
   217c8:	44000115 	stw	r16,4(r8)
   217cc:	d8c02015 	stw	r3,128(sp)
   217d0:	d8801f15 	stw	r2,124(sp)
   217d4:	010001c4 	movi	r4,7
   217d8:	2080060e 	bge	r4,r2,217f4 <___vfprintf_internal_r+0xaa4>
   217dc:	d9002c17 	ldw	r4,176(sp)
   217e0:	d9801e04 	addi	r6,sp,120
   217e4:	b80b883a 	mov	r5,r23
   217e8:	00278680 	call	27868 <__sprint_r>
   217ec:	103e5a1e 	bne	r2,zero,21158 <__alt_data_end+0xfffe1158>
   217f0:	d8c02017 	ldw	r3,128(sp)
   217f4:	d8803117 	ldw	r2,196(sp)
   217f8:	d9002a17 	ldw	r4,168(sp)
   217fc:	1100010e 	bge	r2,r4,21804 <___vfprintf_internal_r+0xab4>
   21800:	2005883a 	mov	r2,r4
   21804:	d9402f17 	ldw	r5,188(sp)
   21808:	288b883a 	add	r5,r5,r2
   2180c:	d9402f15 	stw	r5,188(sp)
   21810:	18019e1e 	bne	r3,zero,21e8c <___vfprintf_internal_r+0x113c>
   21814:	a8800007 	ldb	r2,0(r21)
   21818:	d8001f15 	stw	zero,124(sp)
   2181c:	da000404 	addi	r8,sp,16
   21820:	103d851e 	bne	r2,zero,20e38 <__alt_data_end+0xfffe0e38>
   21824:	a821883a 	mov	r16,r21
   21828:	003d9b06 	br	20e98 <__alt_data_end+0xfffe0e98>
   2182c:	18c03fcc 	andi	r3,r3,255
   21830:	1805c11e 	bne	r3,zero,22f38 <___vfprintf_internal_r+0x21e8>
   21834:	94800414 	ori	r18,r18,16
   21838:	9080080c 	andi	r2,r18,32
   2183c:	10020c26 	beq	r2,zero,22070 <___vfprintf_internal_r+0x1320>
   21840:	d8802d17 	ldw	r2,180(sp)
   21844:	d9002917 	ldw	r4,164(sp)
   21848:	d8002785 	stb	zero,158(sp)
   2184c:	10c00204 	addi	r3,r2,8
   21850:	14c00017 	ldw	r19,0(r2)
   21854:	15800117 	ldw	r22,4(r2)
   21858:	20040f16 	blt	r4,zero,22898 <___vfprintf_internal_r+0x1b48>
   2185c:	013fdfc4 	movi	r4,-129
   21860:	9d84b03a 	or	r2,r19,r22
   21864:	d8c02d15 	stw	r3,180(sp)
   21868:	9124703a 	and	r18,r18,r4
   2186c:	0039883a 	mov	fp,zero
   21870:	103e891e 	bne	r2,zero,21298 <__alt_data_end+0xfffe1298>
   21874:	d9002917 	ldw	r4,164(sp)
   21878:	2002c11e 	bne	r4,zero,22380 <___vfprintf_internal_r+0x1630>
   2187c:	d8002915 	stw	zero,164(sp)
   21880:	d8002e15 	stw	zero,184(sp)
   21884:	dc001e04 	addi	r16,sp,120
   21888:	003ef806 	br	2146c <__alt_data_end+0xfffe146c>
   2188c:	18c03fcc 	andi	r3,r3,255
   21890:	18059d1e 	bne	r3,zero,22f08 <___vfprintf_internal_r+0x21b8>
   21894:	014000f4 	movhi	r5,3
   21898:	29402404 	addi	r5,r5,144
   2189c:	d9403915 	stw	r5,228(sp)
   218a0:	9080080c 	andi	r2,r18,32
   218a4:	10005226 	beq	r2,zero,219f0 <___vfprintf_internal_r+0xca0>
   218a8:	d8802d17 	ldw	r2,180(sp)
   218ac:	14c00017 	ldw	r19,0(r2)
   218b0:	15800117 	ldw	r22,4(r2)
   218b4:	10800204 	addi	r2,r2,8
   218b8:	d8802d15 	stw	r2,180(sp)
   218bc:	9080004c 	andi	r2,r18,1
   218c0:	10019026 	beq	r2,zero,21f04 <___vfprintf_internal_r+0x11b4>
   218c4:	9d84b03a 	or	r2,r19,r22
   218c8:	10036926 	beq	r2,zero,22670 <___vfprintf_internal_r+0x1920>
   218cc:	d8c02917 	ldw	r3,164(sp)
   218d0:	00800c04 	movi	r2,48
   218d4:	d8802705 	stb	r2,156(sp)
   218d8:	dc402745 	stb	r17,157(sp)
   218dc:	d8002785 	stb	zero,158(sp)
   218e0:	90800094 	ori	r2,r18,2
   218e4:	18045d16 	blt	r3,zero,22a5c <___vfprintf_internal_r+0x1d0c>
   218e8:	00bfdfc4 	movi	r2,-129
   218ec:	90a4703a 	and	r18,r18,r2
   218f0:	94800094 	ori	r18,r18,2
   218f4:	0039883a 	mov	fp,zero
   218f8:	d9003917 	ldw	r4,228(sp)
   218fc:	dc001e04 	addi	r16,sp,120
   21900:	988003cc 	andi	r2,r19,15
   21904:	b006973a 	slli	r3,r22,28
   21908:	2085883a 	add	r2,r4,r2
   2190c:	9826d13a 	srli	r19,r19,4
   21910:	10800003 	ldbu	r2,0(r2)
   21914:	b02cd13a 	srli	r22,r22,4
   21918:	843fffc4 	addi	r16,r16,-1
   2191c:	1ce6b03a 	or	r19,r3,r19
   21920:	80800005 	stb	r2,0(r16)
   21924:	9d84b03a 	or	r2,r19,r22
   21928:	103ff51e 	bne	r2,zero,21900 <__alt_data_end+0xfffe1900>
   2192c:	d8c02817 	ldw	r3,160(sp)
   21930:	1c07c83a 	sub	r3,r3,r16
   21934:	d8c02e15 	stw	r3,184(sp)
   21938:	003ecc06 	br	2146c <__alt_data_end+0xfffe146c>
   2193c:	18c03fcc 	andi	r3,r3,255
   21940:	183e9f26 	beq	r3,zero,213c0 <__alt_data_end+0xfffe13c0>
   21944:	d9c02785 	stb	r7,158(sp)
   21948:	003e9d06 	br	213c0 <__alt_data_end+0xfffe13c0>
   2194c:	00c00044 	movi	r3,1
   21950:	01c00ac4 	movi	r7,43
   21954:	ac400007 	ldb	r17,0(r21)
   21958:	003d5e06 	br	20ed4 <__alt_data_end+0xfffe0ed4>
   2195c:	94800814 	ori	r18,r18,32
   21960:	ac400007 	ldb	r17,0(r21)
   21964:	003d5b06 	br	20ed4 <__alt_data_end+0xfffe0ed4>
   21968:	d8c02d17 	ldw	r3,180(sp)
   2196c:	d8002785 	stb	zero,158(sp)
   21970:	1c000017 	ldw	r16,0(r3)
   21974:	1cc00104 	addi	r19,r3,4
   21978:	80041926 	beq	r16,zero,229e0 <___vfprintf_internal_r+0x1c90>
   2197c:	d9002917 	ldw	r4,164(sp)
   21980:	2003d016 	blt	r4,zero,228c4 <___vfprintf_internal_r+0x1b74>
   21984:	200d883a 	mov	r6,r4
   21988:	000b883a 	mov	r5,zero
   2198c:	8009883a 	mov	r4,r16
   21990:	da003d15 	stw	r8,244(sp)
   21994:	00260a40 	call	260a4 <memchr>
   21998:	da003d17 	ldw	r8,244(sp)
   2199c:	10045426 	beq	r2,zero,22af0 <___vfprintf_internal_r+0x1da0>
   219a0:	1405c83a 	sub	r2,r2,r16
   219a4:	d8802e15 	stw	r2,184(sp)
   219a8:	1003cc16 	blt	r2,zero,228dc <___vfprintf_internal_r+0x1b8c>
   219ac:	df002783 	ldbu	fp,158(sp)
   219b0:	d8802a15 	stw	r2,168(sp)
   219b4:	dcc02d15 	stw	r19,180(sp)
   219b8:	d8002915 	stw	zero,164(sp)
   219bc:	d8003215 	stw	zero,200(sp)
   219c0:	003eb006 	br	21484 <__alt_data_end+0xfffe1484>
   219c4:	18c03fcc 	andi	r3,r3,255
   219c8:	183f9b26 	beq	r3,zero,21838 <__alt_data_end+0xfffe1838>
   219cc:	d9c02785 	stb	r7,158(sp)
   219d0:	003f9906 	br	21838 <__alt_data_end+0xfffe1838>
   219d4:	18c03fcc 	andi	r3,r3,255
   219d8:	1805551e 	bne	r3,zero,22f30 <___vfprintf_internal_r+0x21e0>
   219dc:	014000f4 	movhi	r5,3
   219e0:	29402904 	addi	r5,r5,164
   219e4:	d9403915 	stw	r5,228(sp)
   219e8:	9080080c 	andi	r2,r18,32
   219ec:	103fae1e 	bne	r2,zero,218a8 <__alt_data_end+0xfffe18a8>
   219f0:	9080040c 	andi	r2,r18,16
   219f4:	1002de26 	beq	r2,zero,22570 <___vfprintf_internal_r+0x1820>
   219f8:	d8c02d17 	ldw	r3,180(sp)
   219fc:	002d883a 	mov	r22,zero
   21a00:	1cc00017 	ldw	r19,0(r3)
   21a04:	18c00104 	addi	r3,r3,4
   21a08:	d8c02d15 	stw	r3,180(sp)
   21a0c:	003fab06 	br	218bc <__alt_data_end+0xfffe18bc>
   21a10:	38803fcc 	andi	r2,r7,255
   21a14:	1080201c 	xori	r2,r2,128
   21a18:	10bfe004 	addi	r2,r2,-128
   21a1c:	1002d21e 	bne	r2,zero,22568 <___vfprintf_internal_r+0x1818>
   21a20:	00c00044 	movi	r3,1
   21a24:	01c00804 	movi	r7,32
   21a28:	ac400007 	ldb	r17,0(r21)
   21a2c:	003d2906 	br	20ed4 <__alt_data_end+0xfffe0ed4>
   21a30:	94800054 	ori	r18,r18,1
   21a34:	ac400007 	ldb	r17,0(r21)
   21a38:	003d2606 	br	20ed4 <__alt_data_end+0xfffe0ed4>
   21a3c:	18c03fcc 	andi	r3,r3,255
   21a40:	183e0526 	beq	r3,zero,21258 <__alt_data_end+0xfffe1258>
   21a44:	d9c02785 	stb	r7,158(sp)
   21a48:	003e0306 	br	21258 <__alt_data_end+0xfffe1258>
   21a4c:	94801014 	ori	r18,r18,64
   21a50:	ac400007 	ldb	r17,0(r21)
   21a54:	003d1f06 	br	20ed4 <__alt_data_end+0xfffe0ed4>
   21a58:	ac400007 	ldb	r17,0(r21)
   21a5c:	8a438726 	beq	r17,r9,2287c <___vfprintf_internal_r+0x1b2c>
   21a60:	94800414 	ori	r18,r18,16
   21a64:	003d1b06 	br	20ed4 <__alt_data_end+0xfffe0ed4>
   21a68:	18c03fcc 	andi	r3,r3,255
   21a6c:	1805341e 	bne	r3,zero,22f40 <___vfprintf_internal_r+0x21f0>
   21a70:	9080080c 	andi	r2,r18,32
   21a74:	1002cd26 	beq	r2,zero,225ac <___vfprintf_internal_r+0x185c>
   21a78:	d9402d17 	ldw	r5,180(sp)
   21a7c:	d9002f17 	ldw	r4,188(sp)
   21a80:	28800017 	ldw	r2,0(r5)
   21a84:	2007d7fa 	srai	r3,r4,31
   21a88:	29400104 	addi	r5,r5,4
   21a8c:	d9402d15 	stw	r5,180(sp)
   21a90:	11000015 	stw	r4,0(r2)
   21a94:	10c00115 	stw	r3,4(r2)
   21a98:	003ce506 	br	20e30 <__alt_data_end+0xfffe0e30>
   21a9c:	d8c02d17 	ldw	r3,180(sp)
   21aa0:	d9002d17 	ldw	r4,180(sp)
   21aa4:	d8002785 	stb	zero,158(sp)
   21aa8:	18800017 	ldw	r2,0(r3)
   21aac:	21000104 	addi	r4,r4,4
   21ab0:	00c00044 	movi	r3,1
   21ab4:	d8c02a15 	stw	r3,168(sp)
   21ab8:	d8801405 	stb	r2,80(sp)
   21abc:	d9002d15 	stw	r4,180(sp)
   21ac0:	d8c02e15 	stw	r3,184(sp)
   21ac4:	d8002915 	stw	zero,164(sp)
   21ac8:	d8003215 	stw	zero,200(sp)
   21acc:	dc001404 	addi	r16,sp,80
   21ad0:	0039883a 	mov	fp,zero
   21ad4:	003e7206 	br	214a0 <__alt_data_end+0xfffe14a0>
   21ad8:	010000f4 	movhi	r4,3
   21adc:	21002904 	addi	r4,r4,164
   21ae0:	0039883a 	mov	fp,zero
   21ae4:	d9003915 	stw	r4,228(sp)
   21ae8:	04401e04 	movi	r17,120
   21aec:	003f8206 	br	218f8 <__alt_data_end+0xfffe18f8>
   21af0:	18c03fcc 	andi	r3,r3,255
   21af4:	1805061e 	bne	r3,zero,22f10 <___vfprintf_internal_r+0x21c0>
   21af8:	883d9126 	beq	r17,zero,21140 <__alt_data_end+0xfffe1140>
   21afc:	00c00044 	movi	r3,1
   21b00:	d8c02a15 	stw	r3,168(sp)
   21b04:	dc401405 	stb	r17,80(sp)
   21b08:	d8002785 	stb	zero,158(sp)
   21b0c:	003fec06 	br	21ac0 <__alt_data_end+0xfffe1ac0>
   21b10:	014000f4 	movhi	r5,3
   21b14:	29402904 	addi	r5,r5,164
   21b18:	d9403915 	stw	r5,228(sp)
   21b1c:	d8c02d15 	stw	r3,180(sp)
   21b20:	1025883a 	mov	r18,r2
   21b24:	04401e04 	movi	r17,120
   21b28:	9d84b03a 	or	r2,r19,r22
   21b2c:	1000fc1e 	bne	r2,zero,21f20 <___vfprintf_internal_r+0x11d0>
   21b30:	0039883a 	mov	fp,zero
   21b34:	00800084 	movi	r2,2
   21b38:	10803fcc 	andi	r2,r2,255
   21b3c:	00c00044 	movi	r3,1
   21b40:	10c20f26 	beq	r2,r3,22380 <___vfprintf_internal_r+0x1630>
   21b44:	00c00084 	movi	r3,2
   21b48:	10fd6326 	beq	r2,r3,210d8 <__alt_data_end+0xfffe10d8>
   21b4c:	003e2d06 	br	21404 <__alt_data_end+0xfffe1404>
   21b50:	d8c02017 	ldw	r3,128(sp)
   21b54:	003e9306 	br	215a4 <__alt_data_end+0xfffe15a4>
   21b58:	00801944 	movi	r2,101
   21b5c:	14407e0e 	bge	r2,r17,21d58 <___vfprintf_internal_r+0x1008>
   21b60:	d9003617 	ldw	r4,216(sp)
   21b64:	d9403817 	ldw	r5,224(sp)
   21b68:	000d883a 	mov	r6,zero
   21b6c:	000f883a 	mov	r7,zero
   21b70:	d8c03c15 	stw	r3,240(sp)
   21b74:	da003d15 	stw	r8,244(sp)
   21b78:	002bea80 	call	2bea8 <__eqdf2>
   21b7c:	d8c03c17 	ldw	r3,240(sp)
   21b80:	da003d17 	ldw	r8,244(sp)
   21b84:	1000f71e 	bne	r2,zero,21f64 <___vfprintf_internal_r+0x1214>
   21b88:	d8801f17 	ldw	r2,124(sp)
   21b8c:	010000f4 	movhi	r4,3
   21b90:	21003004 	addi	r4,r4,192
   21b94:	18c00044 	addi	r3,r3,1
   21b98:	10800044 	addi	r2,r2,1
   21b9c:	41000015 	stw	r4,0(r8)
   21ba0:	01000044 	movi	r4,1
   21ba4:	41000115 	stw	r4,4(r8)
   21ba8:	d8c02015 	stw	r3,128(sp)
   21bac:	d8801f15 	stw	r2,124(sp)
   21bb0:	010001c4 	movi	r4,7
   21bb4:	2082b816 	blt	r4,r2,22698 <___vfprintf_internal_r+0x1948>
   21bb8:	42000204 	addi	r8,r8,8
   21bbc:	d8802617 	ldw	r2,152(sp)
   21bc0:	d9403317 	ldw	r5,204(sp)
   21bc4:	11400216 	blt	r2,r5,21bd0 <___vfprintf_internal_r+0xe80>
   21bc8:	9080004c 	andi	r2,r18,1
   21bcc:	103ed526 	beq	r2,zero,21724 <__alt_data_end+0xfffe1724>
   21bd0:	d8803717 	ldw	r2,220(sp)
   21bd4:	d9003417 	ldw	r4,208(sp)
   21bd8:	d9403717 	ldw	r5,220(sp)
   21bdc:	1887883a 	add	r3,r3,r2
   21be0:	d8801f17 	ldw	r2,124(sp)
   21be4:	41000015 	stw	r4,0(r8)
   21be8:	41400115 	stw	r5,4(r8)
   21bec:	10800044 	addi	r2,r2,1
   21bf0:	d8c02015 	stw	r3,128(sp)
   21bf4:	d8801f15 	stw	r2,124(sp)
   21bf8:	010001c4 	movi	r4,7
   21bfc:	20832916 	blt	r4,r2,228a4 <___vfprintf_internal_r+0x1b54>
   21c00:	42000204 	addi	r8,r8,8
   21c04:	d8803317 	ldw	r2,204(sp)
   21c08:	143fffc4 	addi	r16,r2,-1
   21c0c:	043ec50e 	bge	zero,r16,21724 <__alt_data_end+0xfffe1724>
   21c10:	04400404 	movi	r17,16
   21c14:	d8801f17 	ldw	r2,124(sp)
   21c18:	8c00880e 	bge	r17,r16,21e3c <___vfprintf_internal_r+0x10ec>
   21c1c:	014000f4 	movhi	r5,3
   21c20:	29403084 	addi	r5,r5,194
   21c24:	d9402b15 	stw	r5,172(sp)
   21c28:	058001c4 	movi	r22,7
   21c2c:	dcc02c17 	ldw	r19,176(sp)
   21c30:	00000306 	br	21c40 <___vfprintf_internal_r+0xef0>
   21c34:	42000204 	addi	r8,r8,8
   21c38:	843ffc04 	addi	r16,r16,-16
   21c3c:	8c00820e 	bge	r17,r16,21e48 <___vfprintf_internal_r+0x10f8>
   21c40:	18c00404 	addi	r3,r3,16
   21c44:	10800044 	addi	r2,r2,1
   21c48:	45000015 	stw	r20,0(r8)
   21c4c:	44400115 	stw	r17,4(r8)
   21c50:	d8c02015 	stw	r3,128(sp)
   21c54:	d8801f15 	stw	r2,124(sp)
   21c58:	b0bff60e 	bge	r22,r2,21c34 <__alt_data_end+0xfffe1c34>
   21c5c:	d9801e04 	addi	r6,sp,120
   21c60:	b80b883a 	mov	r5,r23
   21c64:	9809883a 	mov	r4,r19
   21c68:	00278680 	call	27868 <__sprint_r>
   21c6c:	103d3a1e 	bne	r2,zero,21158 <__alt_data_end+0xfffe1158>
   21c70:	d8c02017 	ldw	r3,128(sp)
   21c74:	d8801f17 	ldw	r2,124(sp)
   21c78:	da000404 	addi	r8,sp,16
   21c7c:	003fee06 	br	21c38 <__alt_data_end+0xfffe1c38>
   21c80:	d9403117 	ldw	r5,196(sp)
   21c84:	d8802a17 	ldw	r2,168(sp)
   21c88:	28adc83a 	sub	r22,r5,r2
   21c8c:	05be630e 	bge	zero,r22,2161c <__alt_data_end+0xfffe161c>
   21c90:	07000404 	movi	fp,16
   21c94:	d8801f17 	ldw	r2,124(sp)
   21c98:	e5838f0e 	bge	fp,r22,22ad8 <___vfprintf_internal_r+0x1d88>
   21c9c:	014000f4 	movhi	r5,3
   21ca0:	29403084 	addi	r5,r5,194
   21ca4:	dc403015 	stw	r17,192(sp)
   21ca8:	d9402b15 	stw	r5,172(sp)
   21cac:	b023883a 	mov	r17,r22
   21cb0:	04c001c4 	movi	r19,7
   21cb4:	a82d883a 	mov	r22,r21
   21cb8:	902b883a 	mov	r21,r18
   21cbc:	8025883a 	mov	r18,r16
   21cc0:	dc002c17 	ldw	r16,176(sp)
   21cc4:	00000306 	br	21cd4 <___vfprintf_internal_r+0xf84>
   21cc8:	8c7ffc04 	addi	r17,r17,-16
   21ccc:	42000204 	addi	r8,r8,8
   21cd0:	e440110e 	bge	fp,r17,21d18 <___vfprintf_internal_r+0xfc8>
   21cd4:	18c00404 	addi	r3,r3,16
   21cd8:	10800044 	addi	r2,r2,1
   21cdc:	45000015 	stw	r20,0(r8)
   21ce0:	47000115 	stw	fp,4(r8)
   21ce4:	d8c02015 	stw	r3,128(sp)
   21ce8:	d8801f15 	stw	r2,124(sp)
   21cec:	98bff60e 	bge	r19,r2,21cc8 <__alt_data_end+0xfffe1cc8>
   21cf0:	d9801e04 	addi	r6,sp,120
   21cf4:	b80b883a 	mov	r5,r23
   21cf8:	8009883a 	mov	r4,r16
   21cfc:	00278680 	call	27868 <__sprint_r>
   21d00:	103d151e 	bne	r2,zero,21158 <__alt_data_end+0xfffe1158>
   21d04:	8c7ffc04 	addi	r17,r17,-16
   21d08:	d8c02017 	ldw	r3,128(sp)
   21d0c:	d8801f17 	ldw	r2,124(sp)
   21d10:	da000404 	addi	r8,sp,16
   21d14:	e47fef16 	blt	fp,r17,21cd4 <__alt_data_end+0xfffe1cd4>
   21d18:	9021883a 	mov	r16,r18
   21d1c:	a825883a 	mov	r18,r21
   21d20:	b02b883a 	mov	r21,r22
   21d24:	882d883a 	mov	r22,r17
   21d28:	dc403017 	ldw	r17,192(sp)
   21d2c:	d9002b17 	ldw	r4,172(sp)
   21d30:	1d87883a 	add	r3,r3,r22
   21d34:	10800044 	addi	r2,r2,1
   21d38:	41000015 	stw	r4,0(r8)
   21d3c:	45800115 	stw	r22,4(r8)
   21d40:	d8c02015 	stw	r3,128(sp)
   21d44:	d8801f15 	stw	r2,124(sp)
   21d48:	010001c4 	movi	r4,7
   21d4c:	20818e16 	blt	r4,r2,22388 <___vfprintf_internal_r+0x1638>
   21d50:	42000204 	addi	r8,r8,8
   21d54:	003e3106 	br	2161c <__alt_data_end+0xfffe161c>
   21d58:	d9403317 	ldw	r5,204(sp)
   21d5c:	00800044 	movi	r2,1
   21d60:	18c00044 	addi	r3,r3,1
   21d64:	1141530e 	bge	r2,r5,222b4 <___vfprintf_internal_r+0x1564>
   21d68:	dc401f17 	ldw	r17,124(sp)
   21d6c:	00800044 	movi	r2,1
   21d70:	40800115 	stw	r2,4(r8)
   21d74:	8c400044 	addi	r17,r17,1
   21d78:	44000015 	stw	r16,0(r8)
   21d7c:	d8c02015 	stw	r3,128(sp)
   21d80:	dc401f15 	stw	r17,124(sp)
   21d84:	008001c4 	movi	r2,7
   21d88:	14416b16 	blt	r2,r17,22338 <___vfprintf_internal_r+0x15e8>
   21d8c:	42000204 	addi	r8,r8,8
   21d90:	d8803717 	ldw	r2,220(sp)
   21d94:	d9003417 	ldw	r4,208(sp)
   21d98:	8c400044 	addi	r17,r17,1
   21d9c:	10c7883a 	add	r3,r2,r3
   21da0:	40800115 	stw	r2,4(r8)
   21da4:	41000015 	stw	r4,0(r8)
   21da8:	d8c02015 	stw	r3,128(sp)
   21dac:	dc401f15 	stw	r17,124(sp)
   21db0:	008001c4 	movi	r2,7
   21db4:	14416916 	blt	r2,r17,2235c <___vfprintf_internal_r+0x160c>
   21db8:	45800204 	addi	r22,r8,8
   21dbc:	d9003617 	ldw	r4,216(sp)
   21dc0:	d9403817 	ldw	r5,224(sp)
   21dc4:	000d883a 	mov	r6,zero
   21dc8:	000f883a 	mov	r7,zero
   21dcc:	d8c03c15 	stw	r3,240(sp)
   21dd0:	002bea80 	call	2bea8 <__eqdf2>
   21dd4:	d8c03c17 	ldw	r3,240(sp)
   21dd8:	1000bc26 	beq	r2,zero,220cc <___vfprintf_internal_r+0x137c>
   21ddc:	d9403317 	ldw	r5,204(sp)
   21de0:	84000044 	addi	r16,r16,1
   21de4:	8c400044 	addi	r17,r17,1
   21de8:	28bfffc4 	addi	r2,r5,-1
   21dec:	1887883a 	add	r3,r3,r2
   21df0:	b0800115 	stw	r2,4(r22)
   21df4:	b4000015 	stw	r16,0(r22)
   21df8:	d8c02015 	stw	r3,128(sp)
   21dfc:	dc401f15 	stw	r17,124(sp)
   21e00:	008001c4 	movi	r2,7
   21e04:	14414316 	blt	r2,r17,22314 <___vfprintf_internal_r+0x15c4>
   21e08:	b5800204 	addi	r22,r22,8
   21e0c:	d9003a17 	ldw	r4,232(sp)
   21e10:	df0022c4 	addi	fp,sp,139
   21e14:	8c400044 	addi	r17,r17,1
   21e18:	20c7883a 	add	r3,r4,r3
   21e1c:	b7000015 	stw	fp,0(r22)
   21e20:	b1000115 	stw	r4,4(r22)
   21e24:	d8c02015 	stw	r3,128(sp)
   21e28:	dc401f15 	stw	r17,124(sp)
   21e2c:	008001c4 	movi	r2,7
   21e30:	14400e16 	blt	r2,r17,21e6c <___vfprintf_internal_r+0x111c>
   21e34:	b2000204 	addi	r8,r22,8
   21e38:	003e3a06 	br	21724 <__alt_data_end+0xfffe1724>
   21e3c:	010000f4 	movhi	r4,3
   21e40:	21003084 	addi	r4,r4,194
   21e44:	d9002b15 	stw	r4,172(sp)
   21e48:	d9002b17 	ldw	r4,172(sp)
   21e4c:	1c07883a 	add	r3,r3,r16
   21e50:	44000115 	stw	r16,4(r8)
   21e54:	41000015 	stw	r4,0(r8)
   21e58:	10800044 	addi	r2,r2,1
   21e5c:	d8c02015 	stw	r3,128(sp)
   21e60:	d8801f15 	stw	r2,124(sp)
   21e64:	010001c4 	movi	r4,7
   21e68:	20be2d0e 	bge	r4,r2,21720 <__alt_data_end+0xfffe1720>
   21e6c:	d9002c17 	ldw	r4,176(sp)
   21e70:	d9801e04 	addi	r6,sp,120
   21e74:	b80b883a 	mov	r5,r23
   21e78:	00278680 	call	27868 <__sprint_r>
   21e7c:	103cb61e 	bne	r2,zero,21158 <__alt_data_end+0xfffe1158>
   21e80:	d8c02017 	ldw	r3,128(sp)
   21e84:	da000404 	addi	r8,sp,16
   21e88:	003e2606 	br	21724 <__alt_data_end+0xfffe1724>
   21e8c:	d9002c17 	ldw	r4,176(sp)
   21e90:	d9801e04 	addi	r6,sp,120
   21e94:	b80b883a 	mov	r5,r23
   21e98:	00278680 	call	27868 <__sprint_r>
   21e9c:	103e5d26 	beq	r2,zero,21814 <__alt_data_end+0xfffe1814>
   21ea0:	003cad06 	br	21158 <__alt_data_end+0xfffe1158>
   21ea4:	d9002c17 	ldw	r4,176(sp)
   21ea8:	d9801e04 	addi	r6,sp,120
   21eac:	b80b883a 	mov	r5,r23
   21eb0:	00278680 	call	27868 <__sprint_r>
   21eb4:	103ca81e 	bne	r2,zero,21158 <__alt_data_end+0xfffe1158>
   21eb8:	d8c02017 	ldw	r3,128(sp)
   21ebc:	da000404 	addi	r8,sp,16
   21ec0:	003e0b06 	br	216f0 <__alt_data_end+0xfffe16f0>
   21ec4:	d9002c17 	ldw	r4,176(sp)
   21ec8:	d9801e04 	addi	r6,sp,120
   21ecc:	b80b883a 	mov	r5,r23
   21ed0:	00278680 	call	27868 <__sprint_r>
   21ed4:	103ca01e 	bne	r2,zero,21158 <__alt_data_end+0xfffe1158>
   21ed8:	d8c02017 	ldw	r3,128(sp)
   21edc:	da000404 	addi	r8,sp,16
   21ee0:	003dbd06 	br	215d8 <__alt_data_end+0xfffe15d8>
   21ee4:	d9002c17 	ldw	r4,176(sp)
   21ee8:	d9801e04 	addi	r6,sp,120
   21eec:	b80b883a 	mov	r5,r23
   21ef0:	00278680 	call	27868 <__sprint_r>
   21ef4:	103c981e 	bne	r2,zero,21158 <__alt_data_end+0xfffe1158>
   21ef8:	d8c02017 	ldw	r3,128(sp)
   21efc:	da000404 	addi	r8,sp,16
   21f00:	003dc306 	br	21610 <__alt_data_end+0xfffe1610>
   21f04:	d8802917 	ldw	r2,164(sp)
   21f08:	d8002785 	stb	zero,158(sp)
   21f0c:	103f0616 	blt	r2,zero,21b28 <__alt_data_end+0xfffe1b28>
   21f10:	00ffdfc4 	movi	r3,-129
   21f14:	9d84b03a 	or	r2,r19,r22
   21f18:	90e4703a 	and	r18,r18,r3
   21f1c:	103c6b26 	beq	r2,zero,210cc <__alt_data_end+0xfffe10cc>
   21f20:	0039883a 	mov	fp,zero
   21f24:	003e7406 	br	218f8 <__alt_data_end+0xfffe18f8>
   21f28:	9080040c 	andi	r2,r18,16
   21f2c:	1001b326 	beq	r2,zero,225fc <___vfprintf_internal_r+0x18ac>
   21f30:	d9002d17 	ldw	r4,180(sp)
   21f34:	d9402917 	ldw	r5,164(sp)
   21f38:	d8002785 	stb	zero,158(sp)
   21f3c:	20800104 	addi	r2,r4,4
   21f40:	24c00017 	ldw	r19,0(r4)
   21f44:	002d883a 	mov	r22,zero
   21f48:	2801b516 	blt	r5,zero,22620 <___vfprintf_internal_r+0x18d0>
   21f4c:	00ffdfc4 	movi	r3,-129
   21f50:	d8802d15 	stw	r2,180(sp)
   21f54:	90e4703a 	and	r18,r18,r3
   21f58:	983d2726 	beq	r19,zero,213f8 <__alt_data_end+0xfffe13f8>
   21f5c:	0039883a 	mov	fp,zero
   21f60:	003d2a06 	br	2140c <__alt_data_end+0xfffe140c>
   21f64:	dc402617 	ldw	r17,152(sp)
   21f68:	0441d30e 	bge	zero,r17,226b8 <___vfprintf_internal_r+0x1968>
   21f6c:	dc403217 	ldw	r17,200(sp)
   21f70:	d8803317 	ldw	r2,204(sp)
   21f74:	1440010e 	bge	r2,r17,21f7c <___vfprintf_internal_r+0x122c>
   21f78:	1023883a 	mov	r17,r2
   21f7c:	04400a0e 	bge	zero,r17,21fa8 <___vfprintf_internal_r+0x1258>
   21f80:	d8801f17 	ldw	r2,124(sp)
   21f84:	1c47883a 	add	r3,r3,r17
   21f88:	44000015 	stw	r16,0(r8)
   21f8c:	10800044 	addi	r2,r2,1
   21f90:	44400115 	stw	r17,4(r8)
   21f94:	d8c02015 	stw	r3,128(sp)
   21f98:	d8801f15 	stw	r2,124(sp)
   21f9c:	010001c4 	movi	r4,7
   21fa0:	20826516 	blt	r4,r2,22938 <___vfprintf_internal_r+0x1be8>
   21fa4:	42000204 	addi	r8,r8,8
   21fa8:	88026116 	blt	r17,zero,22930 <___vfprintf_internal_r+0x1be0>
   21fac:	d9003217 	ldw	r4,200(sp)
   21fb0:	2463c83a 	sub	r17,r4,r17
   21fb4:	04407b0e 	bge	zero,r17,221a4 <___vfprintf_internal_r+0x1454>
   21fb8:	05800404 	movi	r22,16
   21fbc:	d8801f17 	ldw	r2,124(sp)
   21fc0:	b4419d0e 	bge	r22,r17,22638 <___vfprintf_internal_r+0x18e8>
   21fc4:	010000f4 	movhi	r4,3
   21fc8:	21003084 	addi	r4,r4,194
   21fcc:	d9002b15 	stw	r4,172(sp)
   21fd0:	070001c4 	movi	fp,7
   21fd4:	dcc02c17 	ldw	r19,176(sp)
   21fd8:	00000306 	br	21fe8 <___vfprintf_internal_r+0x1298>
   21fdc:	42000204 	addi	r8,r8,8
   21fe0:	8c7ffc04 	addi	r17,r17,-16
   21fe4:	b441970e 	bge	r22,r17,22644 <___vfprintf_internal_r+0x18f4>
   21fe8:	18c00404 	addi	r3,r3,16
   21fec:	10800044 	addi	r2,r2,1
   21ff0:	45000015 	stw	r20,0(r8)
   21ff4:	45800115 	stw	r22,4(r8)
   21ff8:	d8c02015 	stw	r3,128(sp)
   21ffc:	d8801f15 	stw	r2,124(sp)
   22000:	e0bff60e 	bge	fp,r2,21fdc <__alt_data_end+0xfffe1fdc>
   22004:	d9801e04 	addi	r6,sp,120
   22008:	b80b883a 	mov	r5,r23
   2200c:	9809883a 	mov	r4,r19
   22010:	00278680 	call	27868 <__sprint_r>
   22014:	103c501e 	bne	r2,zero,21158 <__alt_data_end+0xfffe1158>
   22018:	d8c02017 	ldw	r3,128(sp)
   2201c:	d8801f17 	ldw	r2,124(sp)
   22020:	da000404 	addi	r8,sp,16
   22024:	003fee06 	br	21fe0 <__alt_data_end+0xfffe1fe0>
   22028:	d9002c17 	ldw	r4,176(sp)
   2202c:	d9801e04 	addi	r6,sp,120
   22030:	b80b883a 	mov	r5,r23
   22034:	00278680 	call	27868 <__sprint_r>
   22038:	103c471e 	bne	r2,zero,21158 <__alt_data_end+0xfffe1158>
   2203c:	d8c02017 	ldw	r3,128(sp)
   22040:	df002787 	ldb	fp,158(sp)
   22044:	da000404 	addi	r8,sp,16
   22048:	003d5606 	br	215a4 <__alt_data_end+0xfffe15a4>
   2204c:	9080040c 	andi	r2,r18,16
   22050:	10016126 	beq	r2,zero,225d8 <___vfprintf_internal_r+0x1888>
   22054:	d8802d17 	ldw	r2,180(sp)
   22058:	14c00017 	ldw	r19,0(r2)
   2205c:	10800104 	addi	r2,r2,4
   22060:	d8802d15 	stw	r2,180(sp)
   22064:	982dd7fa 	srai	r22,r19,31
   22068:	b005883a 	mov	r2,r22
   2206c:	003c8206 	br	21278 <__alt_data_end+0xfffe1278>
   22070:	9080040c 	andi	r2,r18,16
   22074:	10003526 	beq	r2,zero,2214c <___vfprintf_internal_r+0x13fc>
   22078:	d9402d17 	ldw	r5,180(sp)
   2207c:	d8c02917 	ldw	r3,164(sp)
   22080:	d8002785 	stb	zero,158(sp)
   22084:	28800104 	addi	r2,r5,4
   22088:	2cc00017 	ldw	r19,0(r5)
   2208c:	002d883a 	mov	r22,zero
   22090:	18003716 	blt	r3,zero,22170 <___vfprintf_internal_r+0x1420>
   22094:	00ffdfc4 	movi	r3,-129
   22098:	d8802d15 	stw	r2,180(sp)
   2209c:	90e4703a 	and	r18,r18,r3
   220a0:	0039883a 	mov	fp,zero
   220a4:	983df326 	beq	r19,zero,21874 <__alt_data_end+0xfffe1874>
   220a8:	00800244 	movi	r2,9
   220ac:	14fc7b36 	bltu	r2,r19,2129c <__alt_data_end+0xfffe129c>
   220b0:	d8c02817 	ldw	r3,160(sp)
   220b4:	dc001dc4 	addi	r16,sp,119
   220b8:	9cc00c04 	addi	r19,r19,48
   220bc:	1c07c83a 	sub	r3,r3,r16
   220c0:	dcc01dc5 	stb	r19,119(sp)
   220c4:	d8c02e15 	stw	r3,184(sp)
   220c8:	003ce806 	br	2146c <__alt_data_end+0xfffe146c>
   220cc:	d8803317 	ldw	r2,204(sp)
   220d0:	143fffc4 	addi	r16,r2,-1
   220d4:	043f4d0e 	bge	zero,r16,21e0c <__alt_data_end+0xfffe1e0c>
   220d8:	07000404 	movi	fp,16
   220dc:	e400810e 	bge	fp,r16,222e4 <___vfprintf_internal_r+0x1594>
   220e0:	014000f4 	movhi	r5,3
   220e4:	29403084 	addi	r5,r5,194
   220e8:	d9402b15 	stw	r5,172(sp)
   220ec:	01c001c4 	movi	r7,7
   220f0:	dcc02c17 	ldw	r19,176(sp)
   220f4:	00000306 	br	22104 <___vfprintf_internal_r+0x13b4>
   220f8:	b5800204 	addi	r22,r22,8
   220fc:	843ffc04 	addi	r16,r16,-16
   22100:	e4007b0e 	bge	fp,r16,222f0 <___vfprintf_internal_r+0x15a0>
   22104:	18c00404 	addi	r3,r3,16
   22108:	8c400044 	addi	r17,r17,1
   2210c:	b5000015 	stw	r20,0(r22)
   22110:	b7000115 	stw	fp,4(r22)
   22114:	d8c02015 	stw	r3,128(sp)
   22118:	dc401f15 	stw	r17,124(sp)
   2211c:	3c7ff60e 	bge	r7,r17,220f8 <__alt_data_end+0xfffe20f8>
   22120:	d9801e04 	addi	r6,sp,120
   22124:	b80b883a 	mov	r5,r23
   22128:	9809883a 	mov	r4,r19
   2212c:	d9c03c15 	stw	r7,240(sp)
   22130:	00278680 	call	27868 <__sprint_r>
   22134:	d9c03c17 	ldw	r7,240(sp)
   22138:	103c071e 	bne	r2,zero,21158 <__alt_data_end+0xfffe1158>
   2213c:	d8c02017 	ldw	r3,128(sp)
   22140:	dc401f17 	ldw	r17,124(sp)
   22144:	dd800404 	addi	r22,sp,16
   22148:	003fec06 	br	220fc <__alt_data_end+0xfffe20fc>
   2214c:	9080100c 	andi	r2,r18,64
   22150:	d8002785 	stb	zero,158(sp)
   22154:	10010e26 	beq	r2,zero,22590 <___vfprintf_internal_r+0x1840>
   22158:	d9002d17 	ldw	r4,180(sp)
   2215c:	d9402917 	ldw	r5,164(sp)
   22160:	002d883a 	mov	r22,zero
   22164:	20800104 	addi	r2,r4,4
   22168:	24c0000b 	ldhu	r19,0(r4)
   2216c:	283fc90e 	bge	r5,zero,22094 <__alt_data_end+0xfffe2094>
   22170:	d8802d15 	stw	r2,180(sp)
   22174:	0039883a 	mov	fp,zero
   22178:	9d84b03a 	or	r2,r19,r22
   2217c:	103c461e 	bne	r2,zero,21298 <__alt_data_end+0xfffe1298>
   22180:	00800044 	movi	r2,1
   22184:	003e6c06 	br	21b38 <__alt_data_end+0xfffe1b38>
   22188:	d9002c17 	ldw	r4,176(sp)
   2218c:	d9801e04 	addi	r6,sp,120
   22190:	b80b883a 	mov	r5,r23
   22194:	00278680 	call	27868 <__sprint_r>
   22198:	103bef1e 	bne	r2,zero,21158 <__alt_data_end+0xfffe1158>
   2219c:	d8c02017 	ldw	r3,128(sp)
   221a0:	da000404 	addi	r8,sp,16
   221a4:	d9003217 	ldw	r4,200(sp)
   221a8:	d8802617 	ldw	r2,152(sp)
   221ac:	d9403317 	ldw	r5,204(sp)
   221b0:	8123883a 	add	r17,r16,r4
   221b4:	11400216 	blt	r2,r5,221c0 <___vfprintf_internal_r+0x1470>
   221b8:	9100004c 	andi	r4,r18,1
   221bc:	20000d26 	beq	r4,zero,221f4 <___vfprintf_internal_r+0x14a4>
   221c0:	d9003717 	ldw	r4,220(sp)
   221c4:	d9403417 	ldw	r5,208(sp)
   221c8:	1907883a 	add	r3,r3,r4
   221cc:	d9001f17 	ldw	r4,124(sp)
   221d0:	41400015 	stw	r5,0(r8)
   221d4:	d9403717 	ldw	r5,220(sp)
   221d8:	21000044 	addi	r4,r4,1
   221dc:	d8c02015 	stw	r3,128(sp)
   221e0:	41400115 	stw	r5,4(r8)
   221e4:	d9001f15 	stw	r4,124(sp)
   221e8:	014001c4 	movi	r5,7
   221ec:	2901e816 	blt	r5,r4,22990 <___vfprintf_internal_r+0x1c40>
   221f0:	42000204 	addi	r8,r8,8
   221f4:	d9003317 	ldw	r4,204(sp)
   221f8:	8121883a 	add	r16,r16,r4
   221fc:	2085c83a 	sub	r2,r4,r2
   22200:	8461c83a 	sub	r16,r16,r17
   22204:	1400010e 	bge	r2,r16,2220c <___vfprintf_internal_r+0x14bc>
   22208:	1021883a 	mov	r16,r2
   2220c:	04000a0e 	bge	zero,r16,22238 <___vfprintf_internal_r+0x14e8>
   22210:	d9001f17 	ldw	r4,124(sp)
   22214:	1c07883a 	add	r3,r3,r16
   22218:	44400015 	stw	r17,0(r8)
   2221c:	21000044 	addi	r4,r4,1
   22220:	44000115 	stw	r16,4(r8)
   22224:	d8c02015 	stw	r3,128(sp)
   22228:	d9001f15 	stw	r4,124(sp)
   2222c:	014001c4 	movi	r5,7
   22230:	2901fb16 	blt	r5,r4,22a20 <___vfprintf_internal_r+0x1cd0>
   22234:	42000204 	addi	r8,r8,8
   22238:	8001f716 	blt	r16,zero,22a18 <___vfprintf_internal_r+0x1cc8>
   2223c:	1421c83a 	sub	r16,r2,r16
   22240:	043d380e 	bge	zero,r16,21724 <__alt_data_end+0xfffe1724>
   22244:	04400404 	movi	r17,16
   22248:	d8801f17 	ldw	r2,124(sp)
   2224c:	8c3efb0e 	bge	r17,r16,21e3c <__alt_data_end+0xfffe1e3c>
   22250:	014000f4 	movhi	r5,3
   22254:	29403084 	addi	r5,r5,194
   22258:	d9402b15 	stw	r5,172(sp)
   2225c:	058001c4 	movi	r22,7
   22260:	dcc02c17 	ldw	r19,176(sp)
   22264:	00000306 	br	22274 <___vfprintf_internal_r+0x1524>
   22268:	42000204 	addi	r8,r8,8
   2226c:	843ffc04 	addi	r16,r16,-16
   22270:	8c3ef50e 	bge	r17,r16,21e48 <__alt_data_end+0xfffe1e48>
   22274:	18c00404 	addi	r3,r3,16
   22278:	10800044 	addi	r2,r2,1
   2227c:	45000015 	stw	r20,0(r8)
   22280:	44400115 	stw	r17,4(r8)
   22284:	d8c02015 	stw	r3,128(sp)
   22288:	d8801f15 	stw	r2,124(sp)
   2228c:	b0bff60e 	bge	r22,r2,22268 <__alt_data_end+0xfffe2268>
   22290:	d9801e04 	addi	r6,sp,120
   22294:	b80b883a 	mov	r5,r23
   22298:	9809883a 	mov	r4,r19
   2229c:	00278680 	call	27868 <__sprint_r>
   222a0:	103bad1e 	bne	r2,zero,21158 <__alt_data_end+0xfffe1158>
   222a4:	d8c02017 	ldw	r3,128(sp)
   222a8:	d8801f17 	ldw	r2,124(sp)
   222ac:	da000404 	addi	r8,sp,16
   222b0:	003fee06 	br	2226c <__alt_data_end+0xfffe226c>
   222b4:	9088703a 	and	r4,r18,r2
   222b8:	203eab1e 	bne	r4,zero,21d68 <__alt_data_end+0xfffe1d68>
   222bc:	dc401f17 	ldw	r17,124(sp)
   222c0:	40800115 	stw	r2,4(r8)
   222c4:	44000015 	stw	r16,0(r8)
   222c8:	8c400044 	addi	r17,r17,1
   222cc:	d8c02015 	stw	r3,128(sp)
   222d0:	dc401f15 	stw	r17,124(sp)
   222d4:	008001c4 	movi	r2,7
   222d8:	14400e16 	blt	r2,r17,22314 <___vfprintf_internal_r+0x15c4>
   222dc:	45800204 	addi	r22,r8,8
   222e0:	003eca06 	br	21e0c <__alt_data_end+0xfffe1e0c>
   222e4:	010000f4 	movhi	r4,3
   222e8:	21003084 	addi	r4,r4,194
   222ec:	d9002b15 	stw	r4,172(sp)
   222f0:	d8802b17 	ldw	r2,172(sp)
   222f4:	1c07883a 	add	r3,r3,r16
   222f8:	8c400044 	addi	r17,r17,1
   222fc:	b0800015 	stw	r2,0(r22)
   22300:	b4000115 	stw	r16,4(r22)
   22304:	d8c02015 	stw	r3,128(sp)
   22308:	dc401f15 	stw	r17,124(sp)
   2230c:	008001c4 	movi	r2,7
   22310:	147ebd0e 	bge	r2,r17,21e08 <__alt_data_end+0xfffe1e08>
   22314:	d9002c17 	ldw	r4,176(sp)
   22318:	d9801e04 	addi	r6,sp,120
   2231c:	b80b883a 	mov	r5,r23
   22320:	00278680 	call	27868 <__sprint_r>
   22324:	103b8c1e 	bne	r2,zero,21158 <__alt_data_end+0xfffe1158>
   22328:	d8c02017 	ldw	r3,128(sp)
   2232c:	dc401f17 	ldw	r17,124(sp)
   22330:	dd800404 	addi	r22,sp,16
   22334:	003eb506 	br	21e0c <__alt_data_end+0xfffe1e0c>
   22338:	d9002c17 	ldw	r4,176(sp)
   2233c:	d9801e04 	addi	r6,sp,120
   22340:	b80b883a 	mov	r5,r23
   22344:	00278680 	call	27868 <__sprint_r>
   22348:	103b831e 	bne	r2,zero,21158 <__alt_data_end+0xfffe1158>
   2234c:	d8c02017 	ldw	r3,128(sp)
   22350:	dc401f17 	ldw	r17,124(sp)
   22354:	da000404 	addi	r8,sp,16
   22358:	003e8d06 	br	21d90 <__alt_data_end+0xfffe1d90>
   2235c:	d9002c17 	ldw	r4,176(sp)
   22360:	d9801e04 	addi	r6,sp,120
   22364:	b80b883a 	mov	r5,r23
   22368:	00278680 	call	27868 <__sprint_r>
   2236c:	103b7a1e 	bne	r2,zero,21158 <__alt_data_end+0xfffe1158>
   22370:	d8c02017 	ldw	r3,128(sp)
   22374:	dc401f17 	ldw	r17,124(sp)
   22378:	dd800404 	addi	r22,sp,16
   2237c:	003e8f06 	br	21dbc <__alt_data_end+0xfffe1dbc>
   22380:	0027883a 	mov	r19,zero
   22384:	003f4a06 	br	220b0 <__alt_data_end+0xfffe20b0>
   22388:	d9002c17 	ldw	r4,176(sp)
   2238c:	d9801e04 	addi	r6,sp,120
   22390:	b80b883a 	mov	r5,r23
   22394:	00278680 	call	27868 <__sprint_r>
   22398:	103b6f1e 	bne	r2,zero,21158 <__alt_data_end+0xfffe1158>
   2239c:	d8c02017 	ldw	r3,128(sp)
   223a0:	da000404 	addi	r8,sp,16
   223a4:	003c9d06 	br	2161c <__alt_data_end+0xfffe161c>
   223a8:	04e7c83a 	sub	r19,zero,r19
   223ac:	9804c03a 	cmpne	r2,r19,zero
   223b0:	05adc83a 	sub	r22,zero,r22
   223b4:	b0adc83a 	sub	r22,r22,r2
   223b8:	d8802917 	ldw	r2,164(sp)
   223bc:	07000b44 	movi	fp,45
   223c0:	df002785 	stb	fp,158(sp)
   223c4:	10017b16 	blt	r2,zero,229b4 <___vfprintf_internal_r+0x1c64>
   223c8:	00bfdfc4 	movi	r2,-129
   223cc:	90a4703a 	and	r18,r18,r2
   223d0:	003bb106 	br	21298 <__alt_data_end+0xfffe1298>
   223d4:	d9003617 	ldw	r4,216(sp)
   223d8:	d9403817 	ldw	r5,224(sp)
   223dc:	da003d15 	stw	r8,244(sp)
   223e0:	00273f40 	call	273f4 <__fpclassifyd>
   223e4:	da003d17 	ldw	r8,244(sp)
   223e8:	1000f026 	beq	r2,zero,227ac <___vfprintf_internal_r+0x1a5c>
   223ec:	d9002917 	ldw	r4,164(sp)
   223f0:	05bff7c4 	movi	r22,-33
   223f4:	00bfffc4 	movi	r2,-1
   223f8:	8dac703a 	and	r22,r17,r22
   223fc:	20820026 	beq	r4,r2,22c00 <___vfprintf_internal_r+0x1eb0>
   22400:	008011c4 	movi	r2,71
   22404:	b081f726 	beq	r22,r2,22be4 <___vfprintf_internal_r+0x1e94>
   22408:	d9003817 	ldw	r4,224(sp)
   2240c:	90c04014 	ori	r3,r18,256
   22410:	d8c02b15 	stw	r3,172(sp)
   22414:	20021516 	blt	r4,zero,22c6c <___vfprintf_internal_r+0x1f1c>
   22418:	dcc03817 	ldw	r19,224(sp)
   2241c:	d8002a05 	stb	zero,168(sp)
   22420:	00801984 	movi	r2,102
   22424:	8881f926 	beq	r17,r2,22c0c <___vfprintf_internal_r+0x1ebc>
   22428:	00801184 	movi	r2,70
   2242c:	88821c26 	beq	r17,r2,22ca0 <___vfprintf_internal_r+0x1f50>
   22430:	00801144 	movi	r2,69
   22434:	b081ef26 	beq	r22,r2,22bf4 <___vfprintf_internal_r+0x1ea4>
   22438:	d8c02917 	ldw	r3,164(sp)
   2243c:	d8802104 	addi	r2,sp,132
   22440:	d8800315 	stw	r2,12(sp)
   22444:	d9403617 	ldw	r5,216(sp)
   22448:	d8802504 	addi	r2,sp,148
   2244c:	d9002c17 	ldw	r4,176(sp)
   22450:	d8800215 	stw	r2,8(sp)
   22454:	d8802604 	addi	r2,sp,152
   22458:	d8c00015 	stw	r3,0(sp)
   2245c:	d8800115 	stw	r2,4(sp)
   22460:	01c00084 	movi	r7,2
   22464:	980d883a 	mov	r6,r19
   22468:	d8c03c15 	stw	r3,240(sp)
   2246c:	da003d15 	stw	r8,244(sp)
   22470:	00233740 	call	23374 <_dtoa_r>
   22474:	1021883a 	mov	r16,r2
   22478:	008019c4 	movi	r2,103
   2247c:	d8c03c17 	ldw	r3,240(sp)
   22480:	da003d17 	ldw	r8,244(sp)
   22484:	88817126 	beq	r17,r2,22a4c <___vfprintf_internal_r+0x1cfc>
   22488:	008011c4 	movi	r2,71
   2248c:	88829226 	beq	r17,r2,22ed8 <___vfprintf_internal_r+0x2188>
   22490:	80f9883a 	add	fp,r16,r3
   22494:	d9003617 	ldw	r4,216(sp)
   22498:	000d883a 	mov	r6,zero
   2249c:	000f883a 	mov	r7,zero
   224a0:	980b883a 	mov	r5,r19
   224a4:	da003d15 	stw	r8,244(sp)
   224a8:	002bea80 	call	2bea8 <__eqdf2>
   224ac:	da003d17 	ldw	r8,244(sp)
   224b0:	10018d26 	beq	r2,zero,22ae8 <___vfprintf_internal_r+0x1d98>
   224b4:	d8802117 	ldw	r2,132(sp)
   224b8:	1700062e 	bgeu	r2,fp,224d4 <___vfprintf_internal_r+0x1784>
   224bc:	01000c04 	movi	r4,48
   224c0:	10c00044 	addi	r3,r2,1
   224c4:	d8c02115 	stw	r3,132(sp)
   224c8:	11000005 	stb	r4,0(r2)
   224cc:	d8802117 	ldw	r2,132(sp)
   224d0:	173ffb36 	bltu	r2,fp,224c0 <__alt_data_end+0xfffe24c0>
   224d4:	1405c83a 	sub	r2,r2,r16
   224d8:	d8803315 	stw	r2,204(sp)
   224dc:	008011c4 	movi	r2,71
   224e0:	b0817626 	beq	r22,r2,22abc <___vfprintf_internal_r+0x1d6c>
   224e4:	00801944 	movi	r2,101
   224e8:	1442810e 	bge	r2,r17,22ef0 <___vfprintf_internal_r+0x21a0>
   224ec:	d8c02617 	ldw	r3,152(sp)
   224f0:	00801984 	movi	r2,102
   224f4:	d8c03215 	stw	r3,200(sp)
   224f8:	8881fe26 	beq	r17,r2,22cf4 <___vfprintf_internal_r+0x1fa4>
   224fc:	d8c03217 	ldw	r3,200(sp)
   22500:	d9003317 	ldw	r4,204(sp)
   22504:	1901dd16 	blt	r3,r4,22c7c <___vfprintf_internal_r+0x1f2c>
   22508:	9480004c 	andi	r18,r18,1
   2250c:	90022b1e 	bne	r18,zero,22dbc <___vfprintf_internal_r+0x206c>
   22510:	1805883a 	mov	r2,r3
   22514:	18028016 	blt	r3,zero,22f18 <___vfprintf_internal_r+0x21c8>
   22518:	d8c03217 	ldw	r3,200(sp)
   2251c:	044019c4 	movi	r17,103
   22520:	d8c02e15 	stw	r3,184(sp)
   22524:	df002a07 	ldb	fp,168(sp)
   22528:	e001531e 	bne	fp,zero,22a78 <___vfprintf_internal_r+0x1d28>
   2252c:	df002783 	ldbu	fp,158(sp)
   22530:	d8802a15 	stw	r2,168(sp)
   22534:	dc802b17 	ldw	r18,172(sp)
   22538:	d8002915 	stw	zero,164(sp)
   2253c:	003bd106 	br	21484 <__alt_data_end+0xfffe1484>
   22540:	d8802d17 	ldw	r2,180(sp)
   22544:	d8c02d17 	ldw	r3,180(sp)
   22548:	d9002d17 	ldw	r4,180(sp)
   2254c:	10800017 	ldw	r2,0(r2)
   22550:	18c00117 	ldw	r3,4(r3)
   22554:	21000204 	addi	r4,r4,8
   22558:	d8803615 	stw	r2,216(sp)
   2255c:	d8c03815 	stw	r3,224(sp)
   22560:	d9002d15 	stw	r4,180(sp)
   22564:	003b7506 	br	2133c <__alt_data_end+0xfffe133c>
   22568:	ac400007 	ldb	r17,0(r21)
   2256c:	003a5906 	br	20ed4 <__alt_data_end+0xfffe0ed4>
   22570:	9080100c 	andi	r2,r18,64
   22574:	1000a826 	beq	r2,zero,22818 <___vfprintf_internal_r+0x1ac8>
   22578:	d9002d17 	ldw	r4,180(sp)
   2257c:	002d883a 	mov	r22,zero
   22580:	24c0000b 	ldhu	r19,0(r4)
   22584:	21000104 	addi	r4,r4,4
   22588:	d9002d15 	stw	r4,180(sp)
   2258c:	003ccb06 	br	218bc <__alt_data_end+0xfffe18bc>
   22590:	d8c02d17 	ldw	r3,180(sp)
   22594:	d9002917 	ldw	r4,164(sp)
   22598:	002d883a 	mov	r22,zero
   2259c:	18800104 	addi	r2,r3,4
   225a0:	1cc00017 	ldw	r19,0(r3)
   225a4:	203ebb0e 	bge	r4,zero,22094 <__alt_data_end+0xfffe2094>
   225a8:	003ef106 	br	22170 <__alt_data_end+0xfffe2170>
   225ac:	9080040c 	andi	r2,r18,16
   225b0:	1000921e 	bne	r2,zero,227fc <___vfprintf_internal_r+0x1aac>
   225b4:	9480100c 	andi	r18,r18,64
   225b8:	90013926 	beq	r18,zero,22aa0 <___vfprintf_internal_r+0x1d50>
   225bc:	d9002d17 	ldw	r4,180(sp)
   225c0:	d9402f17 	ldw	r5,188(sp)
   225c4:	20800017 	ldw	r2,0(r4)
   225c8:	21000104 	addi	r4,r4,4
   225cc:	d9002d15 	stw	r4,180(sp)
   225d0:	1140000d 	sth	r5,0(r2)
   225d4:	003a1606 	br	20e30 <__alt_data_end+0xfffe0e30>
   225d8:	9080100c 	andi	r2,r18,64
   225dc:	10008026 	beq	r2,zero,227e0 <___vfprintf_internal_r+0x1a90>
   225e0:	d8c02d17 	ldw	r3,180(sp)
   225e4:	1cc0000f 	ldh	r19,0(r3)
   225e8:	18c00104 	addi	r3,r3,4
   225ec:	d8c02d15 	stw	r3,180(sp)
   225f0:	982dd7fa 	srai	r22,r19,31
   225f4:	b005883a 	mov	r2,r22
   225f8:	003b1f06 	br	21278 <__alt_data_end+0xfffe1278>
   225fc:	9080100c 	andi	r2,r18,64
   22600:	d8002785 	stb	zero,158(sp)
   22604:	10008a1e 	bne	r2,zero,22830 <___vfprintf_internal_r+0x1ae0>
   22608:	d9402d17 	ldw	r5,180(sp)
   2260c:	d8c02917 	ldw	r3,164(sp)
   22610:	002d883a 	mov	r22,zero
   22614:	28800104 	addi	r2,r5,4
   22618:	2cc00017 	ldw	r19,0(r5)
   2261c:	183e4b0e 	bge	r3,zero,21f4c <__alt_data_end+0xfffe1f4c>
   22620:	9d86b03a 	or	r3,r19,r22
   22624:	d8802d15 	stw	r2,180(sp)
   22628:	183e4c1e 	bne	r3,zero,21f5c <__alt_data_end+0xfffe1f5c>
   2262c:	0039883a 	mov	fp,zero
   22630:	0005883a 	mov	r2,zero
   22634:	003d4006 	br	21b38 <__alt_data_end+0xfffe1b38>
   22638:	014000f4 	movhi	r5,3
   2263c:	29403084 	addi	r5,r5,194
   22640:	d9402b15 	stw	r5,172(sp)
   22644:	d9402b17 	ldw	r5,172(sp)
   22648:	1c47883a 	add	r3,r3,r17
   2264c:	10800044 	addi	r2,r2,1
   22650:	41400015 	stw	r5,0(r8)
   22654:	44400115 	stw	r17,4(r8)
   22658:	d8c02015 	stw	r3,128(sp)
   2265c:	d8801f15 	stw	r2,124(sp)
   22660:	010001c4 	movi	r4,7
   22664:	20bec816 	blt	r4,r2,22188 <__alt_data_end+0xfffe2188>
   22668:	42000204 	addi	r8,r8,8
   2266c:	003ecd06 	br	221a4 <__alt_data_end+0xfffe21a4>
   22670:	d9002917 	ldw	r4,164(sp)
   22674:	d8002785 	stb	zero,158(sp)
   22678:	203d2d16 	blt	r4,zero,21b30 <__alt_data_end+0xfffe1b30>
   2267c:	00bfdfc4 	movi	r2,-129
   22680:	90a4703a 	and	r18,r18,r2
   22684:	003a9106 	br	210cc <__alt_data_end+0xfffe10cc>
   22688:	010000f4 	movhi	r4,3
   2268c:	21003084 	addi	r4,r4,194
   22690:	d9002b15 	stw	r4,172(sp)
   22694:	003c0c06 	br	216c8 <__alt_data_end+0xfffe16c8>
   22698:	d9002c17 	ldw	r4,176(sp)
   2269c:	d9801e04 	addi	r6,sp,120
   226a0:	b80b883a 	mov	r5,r23
   226a4:	00278680 	call	27868 <__sprint_r>
   226a8:	103aab1e 	bne	r2,zero,21158 <__alt_data_end+0xfffe1158>
   226ac:	d8c02017 	ldw	r3,128(sp)
   226b0:	da000404 	addi	r8,sp,16
   226b4:	003d4106 	br	21bbc <__alt_data_end+0xfffe1bbc>
   226b8:	d8801f17 	ldw	r2,124(sp)
   226bc:	014000f4 	movhi	r5,3
   226c0:	01000044 	movi	r4,1
   226c4:	18c00044 	addi	r3,r3,1
   226c8:	10800044 	addi	r2,r2,1
   226cc:	29403004 	addi	r5,r5,192
   226d0:	41000115 	stw	r4,4(r8)
   226d4:	41400015 	stw	r5,0(r8)
   226d8:	d8c02015 	stw	r3,128(sp)
   226dc:	d8801f15 	stw	r2,124(sp)
   226e0:	010001c4 	movi	r4,7
   226e4:	20805c16 	blt	r4,r2,22858 <___vfprintf_internal_r+0x1b08>
   226e8:	42000204 	addi	r8,r8,8
   226ec:	8800041e 	bne	r17,zero,22700 <___vfprintf_internal_r+0x19b0>
   226f0:	d8803317 	ldw	r2,204(sp)
   226f4:	1000021e 	bne	r2,zero,22700 <___vfprintf_internal_r+0x19b0>
   226f8:	9080004c 	andi	r2,r18,1
   226fc:	103c0926 	beq	r2,zero,21724 <__alt_data_end+0xfffe1724>
   22700:	d9003717 	ldw	r4,220(sp)
   22704:	d8801f17 	ldw	r2,124(sp)
   22708:	d9403417 	ldw	r5,208(sp)
   2270c:	20c7883a 	add	r3,r4,r3
   22710:	10800044 	addi	r2,r2,1
   22714:	41000115 	stw	r4,4(r8)
   22718:	41400015 	stw	r5,0(r8)
   2271c:	d8c02015 	stw	r3,128(sp)
   22720:	d8801f15 	stw	r2,124(sp)
   22724:	010001c4 	movi	r4,7
   22728:	20812116 	blt	r4,r2,22bb0 <___vfprintf_internal_r+0x1e60>
   2272c:	42000204 	addi	r8,r8,8
   22730:	0463c83a 	sub	r17,zero,r17
   22734:	0440730e 	bge	zero,r17,22904 <___vfprintf_internal_r+0x1bb4>
   22738:	05800404 	movi	r22,16
   2273c:	b440860e 	bge	r22,r17,22958 <___vfprintf_internal_r+0x1c08>
   22740:	014000f4 	movhi	r5,3
   22744:	29403084 	addi	r5,r5,194
   22748:	d9402b15 	stw	r5,172(sp)
   2274c:	070001c4 	movi	fp,7
   22750:	dcc02c17 	ldw	r19,176(sp)
   22754:	00000306 	br	22764 <___vfprintf_internal_r+0x1a14>
   22758:	42000204 	addi	r8,r8,8
   2275c:	8c7ffc04 	addi	r17,r17,-16
   22760:	b440800e 	bge	r22,r17,22964 <___vfprintf_internal_r+0x1c14>
   22764:	18c00404 	addi	r3,r3,16
   22768:	10800044 	addi	r2,r2,1
   2276c:	45000015 	stw	r20,0(r8)
   22770:	45800115 	stw	r22,4(r8)
   22774:	d8c02015 	stw	r3,128(sp)
   22778:	d8801f15 	stw	r2,124(sp)
   2277c:	e0bff60e 	bge	fp,r2,22758 <__alt_data_end+0xfffe2758>
   22780:	d9801e04 	addi	r6,sp,120
   22784:	b80b883a 	mov	r5,r23
   22788:	9809883a 	mov	r4,r19
   2278c:	00278680 	call	27868 <__sprint_r>
   22790:	103a711e 	bne	r2,zero,21158 <__alt_data_end+0xfffe1158>
   22794:	d8c02017 	ldw	r3,128(sp)
   22798:	d8801f17 	ldw	r2,124(sp)
   2279c:	da000404 	addi	r8,sp,16
   227a0:	003fee06 	br	2275c <__alt_data_end+0xfffe275c>
   227a4:	00bfffc4 	movi	r2,-1
   227a8:	003a6f06 	br	21168 <__alt_data_end+0xfffe1168>
   227ac:	008011c4 	movi	r2,71
   227b0:	1440b816 	blt	r2,r17,22a94 <___vfprintf_internal_r+0x1d44>
   227b4:	040000f4 	movhi	r16,3
   227b8:	84002204 	addi	r16,r16,136
   227bc:	00c000c4 	movi	r3,3
   227c0:	00bfdfc4 	movi	r2,-129
   227c4:	d8c02a15 	stw	r3,168(sp)
   227c8:	90a4703a 	and	r18,r18,r2
   227cc:	df002783 	ldbu	fp,158(sp)
   227d0:	d8c02e15 	stw	r3,184(sp)
   227d4:	d8002915 	stw	zero,164(sp)
   227d8:	d8003215 	stw	zero,200(sp)
   227dc:	003b2906 	br	21484 <__alt_data_end+0xfffe1484>
   227e0:	d9002d17 	ldw	r4,180(sp)
   227e4:	24c00017 	ldw	r19,0(r4)
   227e8:	21000104 	addi	r4,r4,4
   227ec:	d9002d15 	stw	r4,180(sp)
   227f0:	982dd7fa 	srai	r22,r19,31
   227f4:	b005883a 	mov	r2,r22
   227f8:	003a9f06 	br	21278 <__alt_data_end+0xfffe1278>
   227fc:	d9402d17 	ldw	r5,180(sp)
   22800:	d8c02f17 	ldw	r3,188(sp)
   22804:	28800017 	ldw	r2,0(r5)
   22808:	29400104 	addi	r5,r5,4
   2280c:	d9402d15 	stw	r5,180(sp)
   22810:	10c00015 	stw	r3,0(r2)
   22814:	00398606 	br	20e30 <__alt_data_end+0xfffe0e30>
   22818:	d9402d17 	ldw	r5,180(sp)
   2281c:	002d883a 	mov	r22,zero
   22820:	2cc00017 	ldw	r19,0(r5)
   22824:	29400104 	addi	r5,r5,4
   22828:	d9402d15 	stw	r5,180(sp)
   2282c:	003c2306 	br	218bc <__alt_data_end+0xfffe18bc>
   22830:	d8c02d17 	ldw	r3,180(sp)
   22834:	d9002917 	ldw	r4,164(sp)
   22838:	002d883a 	mov	r22,zero
   2283c:	18800104 	addi	r2,r3,4
   22840:	1cc0000b 	ldhu	r19,0(r3)
   22844:	203dc10e 	bge	r4,zero,21f4c <__alt_data_end+0xfffe1f4c>
   22848:	003f7506 	br	22620 <__alt_data_end+0xfffe2620>
   2284c:	040000f4 	movhi	r16,3
   22850:	84002004 	addi	r16,r16,128
   22854:	003acc06 	br	21388 <__alt_data_end+0xfffe1388>
   22858:	d9002c17 	ldw	r4,176(sp)
   2285c:	d9801e04 	addi	r6,sp,120
   22860:	b80b883a 	mov	r5,r23
   22864:	00278680 	call	27868 <__sprint_r>
   22868:	103a3b1e 	bne	r2,zero,21158 <__alt_data_end+0xfffe1158>
   2286c:	dc402617 	ldw	r17,152(sp)
   22870:	d8c02017 	ldw	r3,128(sp)
   22874:	da000404 	addi	r8,sp,16
   22878:	003f9c06 	br	226ec <__alt_data_end+0xfffe26ec>
   2287c:	ac400043 	ldbu	r17,1(r21)
   22880:	94800814 	ori	r18,r18,32
   22884:	ad400044 	addi	r21,r21,1
   22888:	8c403fcc 	andi	r17,r17,255
   2288c:	8c40201c 	xori	r17,r17,128
   22890:	8c7fe004 	addi	r17,r17,-128
   22894:	00398f06 	br	20ed4 <__alt_data_end+0xfffe0ed4>
   22898:	d8c02d15 	stw	r3,180(sp)
   2289c:	0039883a 	mov	fp,zero
   228a0:	003e3506 	br	22178 <__alt_data_end+0xfffe2178>
   228a4:	d9002c17 	ldw	r4,176(sp)
   228a8:	d9801e04 	addi	r6,sp,120
   228ac:	b80b883a 	mov	r5,r23
   228b0:	00278680 	call	27868 <__sprint_r>
   228b4:	103a281e 	bne	r2,zero,21158 <__alt_data_end+0xfffe1158>
   228b8:	d8c02017 	ldw	r3,128(sp)
   228bc:	da000404 	addi	r8,sp,16
   228c0:	003cd006 	br	21c04 <__alt_data_end+0xfffe1c04>
   228c4:	8009883a 	mov	r4,r16
   228c8:	da003d15 	stw	r8,244(sp)
   228cc:	00276d40 	call	276d4 <strlen>
   228d0:	d8802e15 	stw	r2,184(sp)
   228d4:	da003d17 	ldw	r8,244(sp)
   228d8:	103c340e 	bge	r2,zero,219ac <__alt_data_end+0xfffe19ac>
   228dc:	0005883a 	mov	r2,zero
   228e0:	003c3206 	br	219ac <__alt_data_end+0xfffe19ac>
   228e4:	d9002c17 	ldw	r4,176(sp)
   228e8:	d9801e04 	addi	r6,sp,120
   228ec:	b80b883a 	mov	r5,r23
   228f0:	00278680 	call	27868 <__sprint_r>
   228f4:	103a181e 	bne	r2,zero,21158 <__alt_data_end+0xfffe1158>
   228f8:	d8c02017 	ldw	r3,128(sp)
   228fc:	d8801f17 	ldw	r2,124(sp)
   22900:	da000404 	addi	r8,sp,16
   22904:	d9403317 	ldw	r5,204(sp)
   22908:	10800044 	addi	r2,r2,1
   2290c:	44000015 	stw	r16,0(r8)
   22910:	28c7883a 	add	r3,r5,r3
   22914:	003b7d06 	br	2170c <__alt_data_end+0xfffe170c>
   22918:	010000f4 	movhi	r4,3
   2291c:	21003484 	addi	r4,r4,210
   22920:	d9003515 	stw	r4,212(sp)
   22924:	003b1406 	br	21578 <__alt_data_end+0xfffe1578>
   22928:	013fffc4 	movi	r4,-1
   2292c:	003a3506 	br	21204 <__alt_data_end+0xfffe1204>
   22930:	0023883a 	mov	r17,zero
   22934:	003d9d06 	br	21fac <__alt_data_end+0xfffe1fac>
   22938:	d9002c17 	ldw	r4,176(sp)
   2293c:	d9801e04 	addi	r6,sp,120
   22940:	b80b883a 	mov	r5,r23
   22944:	00278680 	call	27868 <__sprint_r>
   22948:	103a031e 	bne	r2,zero,21158 <__alt_data_end+0xfffe1158>
   2294c:	d8c02017 	ldw	r3,128(sp)
   22950:	da000404 	addi	r8,sp,16
   22954:	003d9406 	br	21fa8 <__alt_data_end+0xfffe1fa8>
   22958:	010000f4 	movhi	r4,3
   2295c:	21003084 	addi	r4,r4,194
   22960:	d9002b15 	stw	r4,172(sp)
   22964:	d9002b17 	ldw	r4,172(sp)
   22968:	1c47883a 	add	r3,r3,r17
   2296c:	10800044 	addi	r2,r2,1
   22970:	41000015 	stw	r4,0(r8)
   22974:	44400115 	stw	r17,4(r8)
   22978:	d8c02015 	stw	r3,128(sp)
   2297c:	d8801f15 	stw	r2,124(sp)
   22980:	010001c4 	movi	r4,7
   22984:	20bfd716 	blt	r4,r2,228e4 <__alt_data_end+0xfffe28e4>
   22988:	42000204 	addi	r8,r8,8
   2298c:	003fdd06 	br	22904 <__alt_data_end+0xfffe2904>
   22990:	d9002c17 	ldw	r4,176(sp)
   22994:	d9801e04 	addi	r6,sp,120
   22998:	b80b883a 	mov	r5,r23
   2299c:	00278680 	call	27868 <__sprint_r>
   229a0:	1039ed1e 	bne	r2,zero,21158 <__alt_data_end+0xfffe1158>
   229a4:	d8802617 	ldw	r2,152(sp)
   229a8:	d8c02017 	ldw	r3,128(sp)
   229ac:	da000404 	addi	r8,sp,16
   229b0:	003e1006 	br	221f4 <__alt_data_end+0xfffe21f4>
   229b4:	00800044 	movi	r2,1
   229b8:	10803fcc 	andi	r2,r2,255
   229bc:	00c00044 	movi	r3,1
   229c0:	10fa3526 	beq	r2,r3,21298 <__alt_data_end+0xfffe1298>
   229c4:	00c00084 	movi	r3,2
   229c8:	10fbcb26 	beq	r2,r3,218f8 <__alt_data_end+0xfffe18f8>
   229cc:	003a8f06 	br	2140c <__alt_data_end+0xfffe140c>
   229d0:	010000f4 	movhi	r4,3
   229d4:	21003484 	addi	r4,r4,210
   229d8:	d9003515 	stw	r4,212(sp)
   229dc:	003b7606 	br	217b8 <__alt_data_end+0xfffe17b8>
   229e0:	d8802917 	ldw	r2,164(sp)
   229e4:	00c00184 	movi	r3,6
   229e8:	1880012e 	bgeu	r3,r2,229f0 <___vfprintf_internal_r+0x1ca0>
   229ec:	1805883a 	mov	r2,r3
   229f0:	d8802e15 	stw	r2,184(sp)
   229f4:	1000ef16 	blt	r2,zero,22db4 <___vfprintf_internal_r+0x2064>
   229f8:	040000f4 	movhi	r16,3
   229fc:	d8802a15 	stw	r2,168(sp)
   22a00:	dcc02d15 	stw	r19,180(sp)
   22a04:	d8002915 	stw	zero,164(sp)
   22a08:	d8003215 	stw	zero,200(sp)
   22a0c:	84002e04 	addi	r16,r16,184
   22a10:	0039883a 	mov	fp,zero
   22a14:	003aa206 	br	214a0 <__alt_data_end+0xfffe14a0>
   22a18:	0021883a 	mov	r16,zero
   22a1c:	003e0706 	br	2223c <__alt_data_end+0xfffe223c>
   22a20:	d9002c17 	ldw	r4,176(sp)
   22a24:	d9801e04 	addi	r6,sp,120
   22a28:	b80b883a 	mov	r5,r23
   22a2c:	00278680 	call	27868 <__sprint_r>
   22a30:	1039c91e 	bne	r2,zero,21158 <__alt_data_end+0xfffe1158>
   22a34:	d8802617 	ldw	r2,152(sp)
   22a38:	d9403317 	ldw	r5,204(sp)
   22a3c:	d8c02017 	ldw	r3,128(sp)
   22a40:	da000404 	addi	r8,sp,16
   22a44:	2885c83a 	sub	r2,r5,r2
   22a48:	003dfb06 	br	22238 <__alt_data_end+0xfffe2238>
   22a4c:	9080004c 	andi	r2,r18,1
   22a50:	103e8f1e 	bne	r2,zero,22490 <__alt_data_end+0xfffe2490>
   22a54:	d8802117 	ldw	r2,132(sp)
   22a58:	003e9e06 	br	224d4 <__alt_data_end+0xfffe24d4>
   22a5c:	1025883a 	mov	r18,r2
   22a60:	0039883a 	mov	fp,zero
   22a64:	00800084 	movi	r2,2
   22a68:	003fd306 	br	229b8 <__alt_data_end+0xfffe29b8>
   22a6c:	07000b44 	movi	fp,45
   22a70:	df002785 	stb	fp,158(sp)
   22a74:	003a4006 	br	21378 <__alt_data_end+0xfffe1378>
   22a78:	00c00b44 	movi	r3,45
   22a7c:	d8c02785 	stb	r3,158(sp)
   22a80:	d8802a15 	stw	r2,168(sp)
   22a84:	dc802b17 	ldw	r18,172(sp)
   22a88:	d8002915 	stw	zero,164(sp)
   22a8c:	07000b44 	movi	fp,45
   22a90:	003a8006 	br	21494 <__alt_data_end+0xfffe1494>
   22a94:	040000f4 	movhi	r16,3
   22a98:	84002304 	addi	r16,r16,140
   22a9c:	003f4706 	br	227bc <__alt_data_end+0xfffe27bc>
   22aa0:	d8c02d17 	ldw	r3,180(sp)
   22aa4:	d9002f17 	ldw	r4,188(sp)
   22aa8:	18800017 	ldw	r2,0(r3)
   22aac:	18c00104 	addi	r3,r3,4
   22ab0:	d8c02d15 	stw	r3,180(sp)
   22ab4:	11000015 	stw	r4,0(r2)
   22ab8:	0038dd06 	br	20e30 <__alt_data_end+0xfffe0e30>
   22abc:	dd802617 	ldw	r22,152(sp)
   22ac0:	00bfff44 	movi	r2,-3
   22ac4:	b0801c16 	blt	r22,r2,22b38 <___vfprintf_internal_r+0x1de8>
   22ac8:	d9402917 	ldw	r5,164(sp)
   22acc:	2d801a16 	blt	r5,r22,22b38 <___vfprintf_internal_r+0x1de8>
   22ad0:	dd803215 	stw	r22,200(sp)
   22ad4:	003e8906 	br	224fc <__alt_data_end+0xfffe24fc>
   22ad8:	010000f4 	movhi	r4,3
   22adc:	21003084 	addi	r4,r4,194
   22ae0:	d9002b15 	stw	r4,172(sp)
   22ae4:	003c9106 	br	21d2c <__alt_data_end+0xfffe1d2c>
   22ae8:	e005883a 	mov	r2,fp
   22aec:	003e7906 	br	224d4 <__alt_data_end+0xfffe24d4>
   22af0:	d9402917 	ldw	r5,164(sp)
   22af4:	df002783 	ldbu	fp,158(sp)
   22af8:	dcc02d15 	stw	r19,180(sp)
   22afc:	d9402a15 	stw	r5,168(sp)
   22b00:	d9402e15 	stw	r5,184(sp)
   22b04:	d8002915 	stw	zero,164(sp)
   22b08:	d8003215 	stw	zero,200(sp)
   22b0c:	003a5d06 	br	21484 <__alt_data_end+0xfffe1484>
   22b10:	9080004c 	andi	r2,r18,1
   22b14:	0039883a 	mov	fp,zero
   22b18:	10000426 	beq	r2,zero,22b2c <___vfprintf_internal_r+0x1ddc>
   22b1c:	00800c04 	movi	r2,48
   22b20:	dc001dc4 	addi	r16,sp,119
   22b24:	d8801dc5 	stb	r2,119(sp)
   22b28:	003b8006 	br	2192c <__alt_data_end+0xfffe192c>
   22b2c:	d8002e15 	stw	zero,184(sp)
   22b30:	dc001e04 	addi	r16,sp,120
   22b34:	003a4d06 	br	2146c <__alt_data_end+0xfffe146c>
   22b38:	8c7fff84 	addi	r17,r17,-2
   22b3c:	b5bfffc4 	addi	r22,r22,-1
   22b40:	dd802615 	stw	r22,152(sp)
   22b44:	dc4022c5 	stb	r17,139(sp)
   22b48:	b000bf16 	blt	r22,zero,22e48 <___vfprintf_internal_r+0x20f8>
   22b4c:	00800ac4 	movi	r2,43
   22b50:	d8802305 	stb	r2,140(sp)
   22b54:	00800244 	movi	r2,9
   22b58:	15807016 	blt	r2,r22,22d1c <___vfprintf_internal_r+0x1fcc>
   22b5c:	00800c04 	movi	r2,48
   22b60:	b5800c04 	addi	r22,r22,48
   22b64:	d8802345 	stb	r2,141(sp)
   22b68:	dd802385 	stb	r22,142(sp)
   22b6c:	d88023c4 	addi	r2,sp,143
   22b70:	df0022c4 	addi	fp,sp,139
   22b74:	d8c03317 	ldw	r3,204(sp)
   22b78:	1739c83a 	sub	fp,r2,fp
   22b7c:	d9003317 	ldw	r4,204(sp)
   22b80:	e0c7883a 	add	r3,fp,r3
   22b84:	df003a15 	stw	fp,232(sp)
   22b88:	d8c02e15 	stw	r3,184(sp)
   22b8c:	00800044 	movi	r2,1
   22b90:	1100b30e 	bge	r2,r4,22e60 <___vfprintf_internal_r+0x2110>
   22b94:	d8c02e17 	ldw	r3,184(sp)
   22b98:	18c00044 	addi	r3,r3,1
   22b9c:	d8c02e15 	stw	r3,184(sp)
   22ba0:	1805883a 	mov	r2,r3
   22ba4:	1800ac16 	blt	r3,zero,22e58 <___vfprintf_internal_r+0x2108>
   22ba8:	d8003215 	stw	zero,200(sp)
   22bac:	003e5d06 	br	22524 <__alt_data_end+0xfffe2524>
   22bb0:	d9002c17 	ldw	r4,176(sp)
   22bb4:	d9801e04 	addi	r6,sp,120
   22bb8:	b80b883a 	mov	r5,r23
   22bbc:	00278680 	call	27868 <__sprint_r>
   22bc0:	1039651e 	bne	r2,zero,21158 <__alt_data_end+0xfffe1158>
   22bc4:	dc402617 	ldw	r17,152(sp)
   22bc8:	d8c02017 	ldw	r3,128(sp)
   22bcc:	d8801f17 	ldw	r2,124(sp)
   22bd0:	da000404 	addi	r8,sp,16
   22bd4:	003ed606 	br	22730 <__alt_data_end+0xfffe2730>
   22bd8:	582b883a 	mov	r21,r11
   22bdc:	d8002915 	stw	zero,164(sp)
   22be0:	0038bd06 	br	20ed8 <__alt_data_end+0xfffe0ed8>
   22be4:	d8802917 	ldw	r2,164(sp)
   22be8:	103e071e 	bne	r2,zero,22408 <__alt_data_end+0xfffe2408>
   22bec:	dc002915 	stw	r16,164(sp)
   22bf0:	003e0506 	br	22408 <__alt_data_end+0xfffe2408>
   22bf4:	d9002917 	ldw	r4,164(sp)
   22bf8:	20c00044 	addi	r3,r4,1
   22bfc:	003e0f06 	br	2243c <__alt_data_end+0xfffe243c>
   22c00:	01400184 	movi	r5,6
   22c04:	d9402915 	stw	r5,164(sp)
   22c08:	003dff06 	br	22408 <__alt_data_end+0xfffe2408>
   22c0c:	d8802104 	addi	r2,sp,132
   22c10:	d8800315 	stw	r2,12(sp)
   22c14:	d8802504 	addi	r2,sp,148
   22c18:	d8800215 	stw	r2,8(sp)
   22c1c:	d8802604 	addi	r2,sp,152
   22c20:	d8800115 	stw	r2,4(sp)
   22c24:	d8802917 	ldw	r2,164(sp)
   22c28:	d9403617 	ldw	r5,216(sp)
   22c2c:	d9002c17 	ldw	r4,176(sp)
   22c30:	d8800015 	stw	r2,0(sp)
   22c34:	01c000c4 	movi	r7,3
   22c38:	980d883a 	mov	r6,r19
   22c3c:	da003d15 	stw	r8,244(sp)
   22c40:	00233740 	call	23374 <_dtoa_r>
   22c44:	d8c02917 	ldw	r3,164(sp)
   22c48:	da003d17 	ldw	r8,244(sp)
   22c4c:	1021883a 	mov	r16,r2
   22c50:	10f9883a 	add	fp,r2,r3
   22c54:	81000007 	ldb	r4,0(r16)
   22c58:	00800c04 	movi	r2,48
   22c5c:	20805e26 	beq	r4,r2,22dd8 <___vfprintf_internal_r+0x2088>
   22c60:	d8c02617 	ldw	r3,152(sp)
   22c64:	e0f9883a 	add	fp,fp,r3
   22c68:	003e0a06 	br	22494 <__alt_data_end+0xfffe2494>
   22c6c:	00c00b44 	movi	r3,45
   22c70:	24e0003c 	xorhi	r19,r4,32768
   22c74:	d8c02a05 	stb	r3,168(sp)
   22c78:	003de906 	br	22420 <__alt_data_end+0xfffe2420>
   22c7c:	d8c03217 	ldw	r3,200(sp)
   22c80:	00c07a0e 	bge	zero,r3,22e6c <___vfprintf_internal_r+0x211c>
   22c84:	00800044 	movi	r2,1
   22c88:	d9003317 	ldw	r4,204(sp)
   22c8c:	1105883a 	add	r2,r2,r4
   22c90:	d8802e15 	stw	r2,184(sp)
   22c94:	10004e16 	blt	r2,zero,22dd0 <___vfprintf_internal_r+0x2080>
   22c98:	044019c4 	movi	r17,103
   22c9c:	003e2106 	br	22524 <__alt_data_end+0xfffe2524>
   22ca0:	d9002917 	ldw	r4,164(sp)
   22ca4:	d8802104 	addi	r2,sp,132
   22ca8:	d8800315 	stw	r2,12(sp)
   22cac:	d9000015 	stw	r4,0(sp)
   22cb0:	d8802504 	addi	r2,sp,148
   22cb4:	d9403617 	ldw	r5,216(sp)
   22cb8:	d9002c17 	ldw	r4,176(sp)
   22cbc:	d8800215 	stw	r2,8(sp)
   22cc0:	d8802604 	addi	r2,sp,152
   22cc4:	d8800115 	stw	r2,4(sp)
   22cc8:	01c000c4 	movi	r7,3
   22ccc:	980d883a 	mov	r6,r19
   22cd0:	da003d15 	stw	r8,244(sp)
   22cd4:	00233740 	call	23374 <_dtoa_r>
   22cd8:	d8c02917 	ldw	r3,164(sp)
   22cdc:	da003d17 	ldw	r8,244(sp)
   22ce0:	1021883a 	mov	r16,r2
   22ce4:	00801184 	movi	r2,70
   22ce8:	80f9883a 	add	fp,r16,r3
   22cec:	88bfd926 	beq	r17,r2,22c54 <__alt_data_end+0xfffe2c54>
   22cf0:	003de806 	br	22494 <__alt_data_end+0xfffe2494>
   22cf4:	d9002917 	ldw	r4,164(sp)
   22cf8:	00c04d0e 	bge	zero,r3,22e30 <___vfprintf_internal_r+0x20e0>
   22cfc:	2000441e 	bne	r4,zero,22e10 <___vfprintf_internal_r+0x20c0>
   22d00:	9480004c 	andi	r18,r18,1
   22d04:	9000421e 	bne	r18,zero,22e10 <___vfprintf_internal_r+0x20c0>
   22d08:	1805883a 	mov	r2,r3
   22d0c:	18007016 	blt	r3,zero,22ed0 <___vfprintf_internal_r+0x2180>
   22d10:	d8c03217 	ldw	r3,200(sp)
   22d14:	d8c02e15 	stw	r3,184(sp)
   22d18:	003e0206 	br	22524 <__alt_data_end+0xfffe2524>
   22d1c:	df0022c4 	addi	fp,sp,139
   22d20:	dc002915 	stw	r16,164(sp)
   22d24:	4027883a 	mov	r19,r8
   22d28:	e021883a 	mov	r16,fp
   22d2c:	b009883a 	mov	r4,r22
   22d30:	01400284 	movi	r5,10
   22d34:	0020bb40 	call	20bb4 <__modsi3>
   22d38:	10800c04 	addi	r2,r2,48
   22d3c:	843fffc4 	addi	r16,r16,-1
   22d40:	b009883a 	mov	r4,r22
   22d44:	01400284 	movi	r5,10
   22d48:	80800005 	stb	r2,0(r16)
   22d4c:	0020b300 	call	20b30 <__divsi3>
   22d50:	102d883a 	mov	r22,r2
   22d54:	00800244 	movi	r2,9
   22d58:	15bff416 	blt	r2,r22,22d2c <__alt_data_end+0xfffe2d2c>
   22d5c:	9811883a 	mov	r8,r19
   22d60:	b0800c04 	addi	r2,r22,48
   22d64:	8027883a 	mov	r19,r16
   22d68:	997fffc4 	addi	r5,r19,-1
   22d6c:	98bfffc5 	stb	r2,-1(r19)
   22d70:	dc002917 	ldw	r16,164(sp)
   22d74:	2f006a2e 	bgeu	r5,fp,22f20 <___vfprintf_internal_r+0x21d0>
   22d78:	d9c02384 	addi	r7,sp,142
   22d7c:	3ccfc83a 	sub	r7,r7,r19
   22d80:	d9002344 	addi	r4,sp,141
   22d84:	e1cf883a 	add	r7,fp,r7
   22d88:	00000106 	br	22d90 <___vfprintf_internal_r+0x2040>
   22d8c:	28800003 	ldbu	r2,0(r5)
   22d90:	20800005 	stb	r2,0(r4)
   22d94:	21000044 	addi	r4,r4,1
   22d98:	29400044 	addi	r5,r5,1
   22d9c:	393ffb1e 	bne	r7,r4,22d8c <__alt_data_end+0xfffe2d8c>
   22da0:	d8802304 	addi	r2,sp,140
   22da4:	14c5c83a 	sub	r2,r2,r19
   22da8:	d8c02344 	addi	r3,sp,141
   22dac:	1885883a 	add	r2,r3,r2
   22db0:	003f7006 	br	22b74 <__alt_data_end+0xfffe2b74>
   22db4:	0005883a 	mov	r2,zero
   22db8:	003f0f06 	br	229f8 <__alt_data_end+0xfffe29f8>
   22dbc:	d8c03217 	ldw	r3,200(sp)
   22dc0:	18c00044 	addi	r3,r3,1
   22dc4:	d8c02e15 	stw	r3,184(sp)
   22dc8:	1805883a 	mov	r2,r3
   22dcc:	183fb20e 	bge	r3,zero,22c98 <__alt_data_end+0xfffe2c98>
   22dd0:	0005883a 	mov	r2,zero
   22dd4:	003fb006 	br	22c98 <__alt_data_end+0xfffe2c98>
   22dd8:	d9003617 	ldw	r4,216(sp)
   22ddc:	000d883a 	mov	r6,zero
   22de0:	000f883a 	mov	r7,zero
   22de4:	980b883a 	mov	r5,r19
   22de8:	d8c03c15 	stw	r3,240(sp)
   22dec:	da003d15 	stw	r8,244(sp)
   22df0:	002bea80 	call	2bea8 <__eqdf2>
   22df4:	d8c03c17 	ldw	r3,240(sp)
   22df8:	da003d17 	ldw	r8,244(sp)
   22dfc:	103f9826 	beq	r2,zero,22c60 <__alt_data_end+0xfffe2c60>
   22e00:	00800044 	movi	r2,1
   22e04:	10c7c83a 	sub	r3,r2,r3
   22e08:	d8c02615 	stw	r3,152(sp)
   22e0c:	003f9506 	br	22c64 <__alt_data_end+0xfffe2c64>
   22e10:	d9002917 	ldw	r4,164(sp)
   22e14:	d8c03217 	ldw	r3,200(sp)
   22e18:	20800044 	addi	r2,r4,1
   22e1c:	1885883a 	add	r2,r3,r2
   22e20:	d8802e15 	stw	r2,184(sp)
   22e24:	103dbf0e 	bge	r2,zero,22524 <__alt_data_end+0xfffe2524>
   22e28:	0005883a 	mov	r2,zero
   22e2c:	003dbd06 	br	22524 <__alt_data_end+0xfffe2524>
   22e30:	2000211e 	bne	r4,zero,22eb8 <___vfprintf_internal_r+0x2168>
   22e34:	9480004c 	andi	r18,r18,1
   22e38:	90001f1e 	bne	r18,zero,22eb8 <___vfprintf_internal_r+0x2168>
   22e3c:	00800044 	movi	r2,1
   22e40:	d8802e15 	stw	r2,184(sp)
   22e44:	003db706 	br	22524 <__alt_data_end+0xfffe2524>
   22e48:	00800b44 	movi	r2,45
   22e4c:	05adc83a 	sub	r22,zero,r22
   22e50:	d8802305 	stb	r2,140(sp)
   22e54:	003f3f06 	br	22b54 <__alt_data_end+0xfffe2b54>
   22e58:	0005883a 	mov	r2,zero
   22e5c:	003f5206 	br	22ba8 <__alt_data_end+0xfffe2ba8>
   22e60:	90a4703a 	and	r18,r18,r2
   22e64:	903f4e26 	beq	r18,zero,22ba0 <__alt_data_end+0xfffe2ba0>
   22e68:	003f4a06 	br	22b94 <__alt_data_end+0xfffe2b94>
   22e6c:	00800084 	movi	r2,2
   22e70:	10c5c83a 	sub	r2,r2,r3
   22e74:	003f8406 	br	22c88 <__alt_data_end+0xfffe2c88>
   22e78:	d8802d17 	ldw	r2,180(sp)
   22e7c:	d9002d17 	ldw	r4,180(sp)
   22e80:	ac400043 	ldbu	r17,1(r21)
   22e84:	10800017 	ldw	r2,0(r2)
   22e88:	582b883a 	mov	r21,r11
   22e8c:	d8802915 	stw	r2,164(sp)
   22e90:	20800104 	addi	r2,r4,4
   22e94:	d9002917 	ldw	r4,164(sp)
   22e98:	d8802d15 	stw	r2,180(sp)
   22e9c:	203e7a0e 	bge	r4,zero,22888 <__alt_data_end+0xfffe2888>
   22ea0:	8c403fcc 	andi	r17,r17,255
   22ea4:	00bfffc4 	movi	r2,-1
   22ea8:	8c40201c 	xori	r17,r17,128
   22eac:	d8802915 	stw	r2,164(sp)
   22eb0:	8c7fe004 	addi	r17,r17,-128
   22eb4:	00380706 	br	20ed4 <__alt_data_end+0xfffe0ed4>
   22eb8:	d8c02917 	ldw	r3,164(sp)
   22ebc:	18c00084 	addi	r3,r3,2
   22ec0:	d8c02e15 	stw	r3,184(sp)
   22ec4:	1805883a 	mov	r2,r3
   22ec8:	183d960e 	bge	r3,zero,22524 <__alt_data_end+0xfffe2524>
   22ecc:	003fd606 	br	22e28 <__alt_data_end+0xfffe2e28>
   22ed0:	0005883a 	mov	r2,zero
   22ed4:	003f8e06 	br	22d10 <__alt_data_end+0xfffe2d10>
   22ed8:	9080004c 	andi	r2,r18,1
   22edc:	103f811e 	bne	r2,zero,22ce4 <__alt_data_end+0xfffe2ce4>
   22ee0:	d8802117 	ldw	r2,132(sp)
   22ee4:	1405c83a 	sub	r2,r2,r16
   22ee8:	d8803315 	stw	r2,204(sp)
   22eec:	b47ef326 	beq	r22,r17,22abc <__alt_data_end+0xfffe2abc>
   22ef0:	dd802617 	ldw	r22,152(sp)
   22ef4:	003f1106 	br	22b3c <__alt_data_end+0xfffe2b3c>
   22ef8:	d9c02785 	stb	r7,158(sp)
   22efc:	00390406 	br	21310 <__alt_data_end+0xfffe1310>
   22f00:	d9c02785 	stb	r7,158(sp)
   22f04:	0038d306 	br	21254 <__alt_data_end+0xfffe1254>
   22f08:	d9c02785 	stb	r7,158(sp)
   22f0c:	003a6106 	br	21894 <__alt_data_end+0xfffe1894>
   22f10:	d9c02785 	stb	r7,158(sp)
   22f14:	003af806 	br	21af8 <__alt_data_end+0xfffe1af8>
   22f18:	0005883a 	mov	r2,zero
   22f1c:	003d7e06 	br	22518 <__alt_data_end+0xfffe2518>
   22f20:	d8802344 	addi	r2,sp,141
   22f24:	003f1306 	br	22b74 <__alt_data_end+0xfffe2b74>
   22f28:	d9c02785 	stb	r7,158(sp)
   22f2c:	00392306 	br	213bc <__alt_data_end+0xfffe13bc>
   22f30:	d9c02785 	stb	r7,158(sp)
   22f34:	003aa906 	br	219dc <__alt_data_end+0xfffe19dc>
   22f38:	d9c02785 	stb	r7,158(sp)
   22f3c:	003a3d06 	br	21834 <__alt_data_end+0xfffe1834>
   22f40:	d9c02785 	stb	r7,158(sp)
   22f44:	003aca06 	br	21a70 <__alt_data_end+0xfffe1a70>

00022f48 <__vfprintf_internal>:
   22f48:	008000f4 	movhi	r2,3
   22f4c:	10878b04 	addi	r2,r2,7724
   22f50:	300f883a 	mov	r7,r6
   22f54:	280d883a 	mov	r6,r5
   22f58:	200b883a 	mov	r5,r4
   22f5c:	11000017 	ldw	r4,0(r2)
   22f60:	0020d501 	jmpi	20d50 <___vfprintf_internal_r>

00022f64 <__sbprintf>:
   22f64:	2880030b 	ldhu	r2,12(r5)
   22f68:	2ac01917 	ldw	r11,100(r5)
   22f6c:	2a80038b 	ldhu	r10,14(r5)
   22f70:	2a400717 	ldw	r9,28(r5)
   22f74:	2a000917 	ldw	r8,36(r5)
   22f78:	defee204 	addi	sp,sp,-1144
   22f7c:	00c10004 	movi	r3,1024
   22f80:	dc011a15 	stw	r16,1128(sp)
   22f84:	10bfff4c 	andi	r2,r2,65533
   22f88:	2821883a 	mov	r16,r5
   22f8c:	d8cb883a 	add	r5,sp,r3
   22f90:	dc811c15 	stw	r18,1136(sp)
   22f94:	dc411b15 	stw	r17,1132(sp)
   22f98:	dfc11d15 	stw	ra,1140(sp)
   22f9c:	2025883a 	mov	r18,r4
   22fa0:	d881030d 	sth	r2,1036(sp)
   22fa4:	dac11915 	stw	r11,1124(sp)
   22fa8:	da81038d 	sth	r10,1038(sp)
   22fac:	da410715 	stw	r9,1052(sp)
   22fb0:	da010915 	stw	r8,1060(sp)
   22fb4:	dec10015 	stw	sp,1024(sp)
   22fb8:	dec10415 	stw	sp,1040(sp)
   22fbc:	d8c10215 	stw	r3,1032(sp)
   22fc0:	d8c10515 	stw	r3,1044(sp)
   22fc4:	d8010615 	stw	zero,1048(sp)
   22fc8:	0020d500 	call	20d50 <___vfprintf_internal_r>
   22fcc:	1023883a 	mov	r17,r2
   22fd0:	10000416 	blt	r2,zero,22fe4 <__sbprintf+0x80>
   22fd4:	d9410004 	addi	r5,sp,1024
   22fd8:	9009883a 	mov	r4,r18
   22fdc:	0024c180 	call	24c18 <_fflush_r>
   22fe0:	10000d1e 	bne	r2,zero,23018 <__sbprintf+0xb4>
   22fe4:	d881030b 	ldhu	r2,1036(sp)
   22fe8:	1080100c 	andi	r2,r2,64
   22fec:	10000326 	beq	r2,zero,22ffc <__sbprintf+0x98>
   22ff0:	8080030b 	ldhu	r2,12(r16)
   22ff4:	10801014 	ori	r2,r2,64
   22ff8:	8080030d 	sth	r2,12(r16)
   22ffc:	8805883a 	mov	r2,r17
   23000:	dfc11d17 	ldw	ra,1140(sp)
   23004:	dc811c17 	ldw	r18,1136(sp)
   23008:	dc411b17 	ldw	r17,1132(sp)
   2300c:	dc011a17 	ldw	r16,1128(sp)
   23010:	dec11e04 	addi	sp,sp,1144
   23014:	f800283a 	ret
   23018:	047fffc4 	movi	r17,-1
   2301c:	003ff106 	br	22fe4 <__alt_data_end+0xfffe2fe4>

00023020 <__swsetup_r>:
   23020:	008000f4 	movhi	r2,3
   23024:	defffd04 	addi	sp,sp,-12
   23028:	10878b04 	addi	r2,r2,7724
   2302c:	dc400115 	stw	r17,4(sp)
   23030:	2023883a 	mov	r17,r4
   23034:	11000017 	ldw	r4,0(r2)
   23038:	dc000015 	stw	r16,0(sp)
   2303c:	dfc00215 	stw	ra,8(sp)
   23040:	2821883a 	mov	r16,r5
   23044:	20000226 	beq	r4,zero,23050 <__swsetup_r+0x30>
   23048:	20800e17 	ldw	r2,56(r4)
   2304c:	10003126 	beq	r2,zero,23114 <__swsetup_r+0xf4>
   23050:	8080030b 	ldhu	r2,12(r16)
   23054:	10c0020c 	andi	r3,r2,8
   23058:	1009883a 	mov	r4,r2
   2305c:	18000f26 	beq	r3,zero,2309c <__swsetup_r+0x7c>
   23060:	80c00417 	ldw	r3,16(r16)
   23064:	18001526 	beq	r3,zero,230bc <__swsetup_r+0x9c>
   23068:	1100004c 	andi	r4,r2,1
   2306c:	20001c1e 	bne	r4,zero,230e0 <__swsetup_r+0xc0>
   23070:	1080008c 	andi	r2,r2,2
   23074:	1000291e 	bne	r2,zero,2311c <__swsetup_r+0xfc>
   23078:	80800517 	ldw	r2,20(r16)
   2307c:	80800215 	stw	r2,8(r16)
   23080:	18001c26 	beq	r3,zero,230f4 <__swsetup_r+0xd4>
   23084:	0005883a 	mov	r2,zero
   23088:	dfc00217 	ldw	ra,8(sp)
   2308c:	dc400117 	ldw	r17,4(sp)
   23090:	dc000017 	ldw	r16,0(sp)
   23094:	dec00304 	addi	sp,sp,12
   23098:	f800283a 	ret
   2309c:	2080040c 	andi	r2,r4,16
   230a0:	10002e26 	beq	r2,zero,2315c <__swsetup_r+0x13c>
   230a4:	2080010c 	andi	r2,r4,4
   230a8:	10001e1e 	bne	r2,zero,23124 <__swsetup_r+0x104>
   230ac:	80c00417 	ldw	r3,16(r16)
   230b0:	20800214 	ori	r2,r4,8
   230b4:	8080030d 	sth	r2,12(r16)
   230b8:	183feb1e 	bne	r3,zero,23068 <__alt_data_end+0xfffe3068>
   230bc:	1100a00c 	andi	r4,r2,640
   230c0:	01408004 	movi	r5,512
   230c4:	217fe826 	beq	r4,r5,23068 <__alt_data_end+0xfffe3068>
   230c8:	800b883a 	mov	r5,r16
   230cc:	8809883a 	mov	r4,r17
   230d0:	00256dc0 	call	256dc <__smakebuf_r>
   230d4:	8080030b 	ldhu	r2,12(r16)
   230d8:	80c00417 	ldw	r3,16(r16)
   230dc:	003fe206 	br	23068 <__alt_data_end+0xfffe3068>
   230e0:	80800517 	ldw	r2,20(r16)
   230e4:	80000215 	stw	zero,8(r16)
   230e8:	0085c83a 	sub	r2,zero,r2
   230ec:	80800615 	stw	r2,24(r16)
   230f0:	183fe41e 	bne	r3,zero,23084 <__alt_data_end+0xfffe3084>
   230f4:	80c0030b 	ldhu	r3,12(r16)
   230f8:	0005883a 	mov	r2,zero
   230fc:	1900200c 	andi	r4,r3,128
   23100:	203fe126 	beq	r4,zero,23088 <__alt_data_end+0xfffe3088>
   23104:	18c01014 	ori	r3,r3,64
   23108:	80c0030d 	sth	r3,12(r16)
   2310c:	00bfffc4 	movi	r2,-1
   23110:	003fdd06 	br	23088 <__alt_data_end+0xfffe3088>
   23114:	0024ff40 	call	24ff4 <__sinit>
   23118:	003fcd06 	br	23050 <__alt_data_end+0xfffe3050>
   2311c:	0005883a 	mov	r2,zero
   23120:	003fd606 	br	2307c <__alt_data_end+0xfffe307c>
   23124:	81400c17 	ldw	r5,48(r16)
   23128:	28000626 	beq	r5,zero,23144 <__swsetup_r+0x124>
   2312c:	80801004 	addi	r2,r16,64
   23130:	28800326 	beq	r5,r2,23140 <__swsetup_r+0x120>
   23134:	8809883a 	mov	r4,r17
   23138:	00251680 	call	25168 <_free_r>
   2313c:	8100030b 	ldhu	r4,12(r16)
   23140:	80000c15 	stw	zero,48(r16)
   23144:	80c00417 	ldw	r3,16(r16)
   23148:	00bff6c4 	movi	r2,-37
   2314c:	1108703a 	and	r4,r2,r4
   23150:	80000115 	stw	zero,4(r16)
   23154:	80c00015 	stw	r3,0(r16)
   23158:	003fd506 	br	230b0 <__alt_data_end+0xfffe30b0>
   2315c:	00800244 	movi	r2,9
   23160:	88800015 	stw	r2,0(r17)
   23164:	20801014 	ori	r2,r4,64
   23168:	8080030d 	sth	r2,12(r16)
   2316c:	00bfffc4 	movi	r2,-1
   23170:	003fc506 	br	23088 <__alt_data_end+0xfffe3088>

00023174 <quorem>:
   23174:	defff704 	addi	sp,sp,-36
   23178:	dc800215 	stw	r18,8(sp)
   2317c:	20800417 	ldw	r2,16(r4)
   23180:	2c800417 	ldw	r18,16(r5)
   23184:	dfc00815 	stw	ra,32(sp)
   23188:	ddc00715 	stw	r23,28(sp)
   2318c:	dd800615 	stw	r22,24(sp)
   23190:	dd400515 	stw	r21,20(sp)
   23194:	dd000415 	stw	r20,16(sp)
   23198:	dcc00315 	stw	r19,12(sp)
   2319c:	dc400115 	stw	r17,4(sp)
   231a0:	dc000015 	stw	r16,0(sp)
   231a4:	14807116 	blt	r2,r18,2336c <quorem+0x1f8>
   231a8:	94bfffc4 	addi	r18,r18,-1
   231ac:	94ad883a 	add	r22,r18,r18
   231b0:	b5ad883a 	add	r22,r22,r22
   231b4:	2c400504 	addi	r17,r5,20
   231b8:	8da9883a 	add	r20,r17,r22
   231bc:	25400504 	addi	r21,r4,20
   231c0:	282f883a 	mov	r23,r5
   231c4:	adad883a 	add	r22,r21,r22
   231c8:	a1400017 	ldw	r5,0(r20)
   231cc:	2021883a 	mov	r16,r4
   231d0:	b1000017 	ldw	r4,0(r22)
   231d4:	29400044 	addi	r5,r5,1
   231d8:	0020c280 	call	20c28 <__udivsi3>
   231dc:	1027883a 	mov	r19,r2
   231e0:	10002c26 	beq	r2,zero,23294 <quorem+0x120>
   231e4:	a813883a 	mov	r9,r21
   231e8:	880b883a 	mov	r5,r17
   231ec:	0009883a 	mov	r4,zero
   231f0:	000d883a 	mov	r6,zero
   231f4:	2a000017 	ldw	r8,0(r5)
   231f8:	49c00017 	ldw	r7,0(r9)
   231fc:	29400104 	addi	r5,r5,4
   23200:	40bfffcc 	andi	r2,r8,65535
   23204:	14c5383a 	mul	r2,r2,r19
   23208:	4010d43a 	srli	r8,r8,16
   2320c:	38ffffcc 	andi	r3,r7,65535
   23210:	1105883a 	add	r2,r2,r4
   23214:	1008d43a 	srli	r4,r2,16
   23218:	44d1383a 	mul	r8,r8,r19
   2321c:	198d883a 	add	r6,r3,r6
   23220:	10ffffcc 	andi	r3,r2,65535
   23224:	30c7c83a 	sub	r3,r6,r3
   23228:	380ed43a 	srli	r7,r7,16
   2322c:	4105883a 	add	r2,r8,r4
   23230:	180dd43a 	srai	r6,r3,16
   23234:	113fffcc 	andi	r4,r2,65535
   23238:	390fc83a 	sub	r7,r7,r4
   2323c:	398d883a 	add	r6,r7,r6
   23240:	300e943a 	slli	r7,r6,16
   23244:	18ffffcc 	andi	r3,r3,65535
   23248:	1008d43a 	srli	r4,r2,16
   2324c:	38ceb03a 	or	r7,r7,r3
   23250:	49c00015 	stw	r7,0(r9)
   23254:	300dd43a 	srai	r6,r6,16
   23258:	4a400104 	addi	r9,r9,4
   2325c:	a17fe52e 	bgeu	r20,r5,231f4 <__alt_data_end+0xfffe31f4>
   23260:	b0800017 	ldw	r2,0(r22)
   23264:	10000b1e 	bne	r2,zero,23294 <quorem+0x120>
   23268:	b0bfff04 	addi	r2,r22,-4
   2326c:	a880082e 	bgeu	r21,r2,23290 <quorem+0x11c>
   23270:	b0ffff17 	ldw	r3,-4(r22)
   23274:	18000326 	beq	r3,zero,23284 <quorem+0x110>
   23278:	00000506 	br	23290 <quorem+0x11c>
   2327c:	10c00017 	ldw	r3,0(r2)
   23280:	1800031e 	bne	r3,zero,23290 <quorem+0x11c>
   23284:	10bfff04 	addi	r2,r2,-4
   23288:	94bfffc4 	addi	r18,r18,-1
   2328c:	a8bffb36 	bltu	r21,r2,2327c <__alt_data_end+0xfffe327c>
   23290:	84800415 	stw	r18,16(r16)
   23294:	b80b883a 	mov	r5,r23
   23298:	8009883a 	mov	r4,r16
   2329c:	0026cc00 	call	26cc0 <__mcmp>
   232a0:	10002616 	blt	r2,zero,2333c <quorem+0x1c8>
   232a4:	9cc00044 	addi	r19,r19,1
   232a8:	a805883a 	mov	r2,r21
   232ac:	000b883a 	mov	r5,zero
   232b0:	11000017 	ldw	r4,0(r2)
   232b4:	89800017 	ldw	r6,0(r17)
   232b8:	10800104 	addi	r2,r2,4
   232bc:	20ffffcc 	andi	r3,r4,65535
   232c0:	194b883a 	add	r5,r3,r5
   232c4:	30ffffcc 	andi	r3,r6,65535
   232c8:	28c7c83a 	sub	r3,r5,r3
   232cc:	300cd43a 	srli	r6,r6,16
   232d0:	2008d43a 	srli	r4,r4,16
   232d4:	180bd43a 	srai	r5,r3,16
   232d8:	18ffffcc 	andi	r3,r3,65535
   232dc:	2189c83a 	sub	r4,r4,r6
   232e0:	2149883a 	add	r4,r4,r5
   232e4:	200c943a 	slli	r6,r4,16
   232e8:	8c400104 	addi	r17,r17,4
   232ec:	200bd43a 	srai	r5,r4,16
   232f0:	30c6b03a 	or	r3,r6,r3
   232f4:	10ffff15 	stw	r3,-4(r2)
   232f8:	a47fed2e 	bgeu	r20,r17,232b0 <__alt_data_end+0xfffe32b0>
   232fc:	9485883a 	add	r2,r18,r18
   23300:	1085883a 	add	r2,r2,r2
   23304:	a887883a 	add	r3,r21,r2
   23308:	18800017 	ldw	r2,0(r3)
   2330c:	10000b1e 	bne	r2,zero,2333c <quorem+0x1c8>
   23310:	18bfff04 	addi	r2,r3,-4
   23314:	a880082e 	bgeu	r21,r2,23338 <quorem+0x1c4>
   23318:	18ffff17 	ldw	r3,-4(r3)
   2331c:	18000326 	beq	r3,zero,2332c <quorem+0x1b8>
   23320:	00000506 	br	23338 <quorem+0x1c4>
   23324:	10c00017 	ldw	r3,0(r2)
   23328:	1800031e 	bne	r3,zero,23338 <quorem+0x1c4>
   2332c:	10bfff04 	addi	r2,r2,-4
   23330:	94bfffc4 	addi	r18,r18,-1
   23334:	a8bffb36 	bltu	r21,r2,23324 <__alt_data_end+0xfffe3324>
   23338:	84800415 	stw	r18,16(r16)
   2333c:	9805883a 	mov	r2,r19
   23340:	dfc00817 	ldw	ra,32(sp)
   23344:	ddc00717 	ldw	r23,28(sp)
   23348:	dd800617 	ldw	r22,24(sp)
   2334c:	dd400517 	ldw	r21,20(sp)
   23350:	dd000417 	ldw	r20,16(sp)
   23354:	dcc00317 	ldw	r19,12(sp)
   23358:	dc800217 	ldw	r18,8(sp)
   2335c:	dc400117 	ldw	r17,4(sp)
   23360:	dc000017 	ldw	r16,0(sp)
   23364:	dec00904 	addi	sp,sp,36
   23368:	f800283a 	ret
   2336c:	0005883a 	mov	r2,zero
   23370:	003ff306 	br	23340 <__alt_data_end+0xfffe3340>

00023374 <_dtoa_r>:
   23374:	20801017 	ldw	r2,64(r4)
   23378:	deffde04 	addi	sp,sp,-136
   2337c:	df002015 	stw	fp,128(sp)
   23380:	dcc01b15 	stw	r19,108(sp)
   23384:	dc801a15 	stw	r18,104(sp)
   23388:	dc401915 	stw	r17,100(sp)
   2338c:	dc001815 	stw	r16,96(sp)
   23390:	dfc02115 	stw	ra,132(sp)
   23394:	ddc01f15 	stw	r23,124(sp)
   23398:	dd801e15 	stw	r22,120(sp)
   2339c:	dd401d15 	stw	r21,116(sp)
   233a0:	dd001c15 	stw	r20,112(sp)
   233a4:	d9c00315 	stw	r7,12(sp)
   233a8:	2039883a 	mov	fp,r4
   233ac:	3023883a 	mov	r17,r6
   233b0:	2825883a 	mov	r18,r5
   233b4:	dc002417 	ldw	r16,144(sp)
   233b8:	3027883a 	mov	r19,r6
   233bc:	10000826 	beq	r2,zero,233e0 <_dtoa_r+0x6c>
   233c0:	21801117 	ldw	r6,68(r4)
   233c4:	00c00044 	movi	r3,1
   233c8:	100b883a 	mov	r5,r2
   233cc:	1986983a 	sll	r3,r3,r6
   233d0:	11800115 	stw	r6,4(r2)
   233d4:	10c00215 	stw	r3,8(r2)
   233d8:	00264a00 	call	264a0 <_Bfree>
   233dc:	e0001015 	stw	zero,64(fp)
   233e0:	88002e16 	blt	r17,zero,2349c <_dtoa_r+0x128>
   233e4:	80000015 	stw	zero,0(r16)
   233e8:	889ffc2c 	andhi	r2,r17,32752
   233ec:	00dffc34 	movhi	r3,32752
   233f0:	10c01c26 	beq	r2,r3,23464 <_dtoa_r+0xf0>
   233f4:	000d883a 	mov	r6,zero
   233f8:	000f883a 	mov	r7,zero
   233fc:	9009883a 	mov	r4,r18
   23400:	980b883a 	mov	r5,r19
   23404:	002bea80 	call	2bea8 <__eqdf2>
   23408:	10002b1e 	bne	r2,zero,234b8 <_dtoa_r+0x144>
   2340c:	d9c02317 	ldw	r7,140(sp)
   23410:	00800044 	movi	r2,1
   23414:	38800015 	stw	r2,0(r7)
   23418:	d8802517 	ldw	r2,148(sp)
   2341c:	10019e26 	beq	r2,zero,23a98 <_dtoa_r+0x724>
   23420:	d8c02517 	ldw	r3,148(sp)
   23424:	008000f4 	movhi	r2,3
   23428:	10803044 	addi	r2,r2,193
   2342c:	18800015 	stw	r2,0(r3)
   23430:	10bfffc4 	addi	r2,r2,-1
   23434:	dfc02117 	ldw	ra,132(sp)
   23438:	df002017 	ldw	fp,128(sp)
   2343c:	ddc01f17 	ldw	r23,124(sp)
   23440:	dd801e17 	ldw	r22,120(sp)
   23444:	dd401d17 	ldw	r21,116(sp)
   23448:	dd001c17 	ldw	r20,112(sp)
   2344c:	dcc01b17 	ldw	r19,108(sp)
   23450:	dc801a17 	ldw	r18,104(sp)
   23454:	dc401917 	ldw	r17,100(sp)
   23458:	dc001817 	ldw	r16,96(sp)
   2345c:	dec02204 	addi	sp,sp,136
   23460:	f800283a 	ret
   23464:	d8c02317 	ldw	r3,140(sp)
   23468:	0089c3c4 	movi	r2,9999
   2346c:	18800015 	stw	r2,0(r3)
   23470:	90017726 	beq	r18,zero,23a50 <_dtoa_r+0x6dc>
   23474:	008000f4 	movhi	r2,3
   23478:	10803c04 	addi	r2,r2,240
   2347c:	d9002517 	ldw	r4,148(sp)
   23480:	203fec26 	beq	r4,zero,23434 <__alt_data_end+0xfffe3434>
   23484:	10c000c7 	ldb	r3,3(r2)
   23488:	1801781e 	bne	r3,zero,23a6c <_dtoa_r+0x6f8>
   2348c:	10c000c4 	addi	r3,r2,3
   23490:	d9802517 	ldw	r6,148(sp)
   23494:	30c00015 	stw	r3,0(r6)
   23498:	003fe606 	br	23434 <__alt_data_end+0xfffe3434>
   2349c:	04e00034 	movhi	r19,32768
   234a0:	9cffffc4 	addi	r19,r19,-1
   234a4:	00800044 	movi	r2,1
   234a8:	8ce6703a 	and	r19,r17,r19
   234ac:	80800015 	stw	r2,0(r16)
   234b0:	9823883a 	mov	r17,r19
   234b4:	003fcc06 	br	233e8 <__alt_data_end+0xfffe33e8>
   234b8:	d8800204 	addi	r2,sp,8
   234bc:	d8800015 	stw	r2,0(sp)
   234c0:	d9c00104 	addi	r7,sp,4
   234c4:	900b883a 	mov	r5,r18
   234c8:	980d883a 	mov	r6,r19
   234cc:	e009883a 	mov	r4,fp
   234d0:	8820d53a 	srli	r16,r17,20
   234d4:	002708c0 	call	2708c <__d2b>
   234d8:	d8800915 	stw	r2,36(sp)
   234dc:	8001651e 	bne	r16,zero,23a74 <_dtoa_r+0x700>
   234e0:	dd800217 	ldw	r22,8(sp)
   234e4:	dc000117 	ldw	r16,4(sp)
   234e8:	00800804 	movi	r2,32
   234ec:	b421883a 	add	r16,r22,r16
   234f0:	80c10c84 	addi	r3,r16,1074
   234f4:	10c2d10e 	bge	r2,r3,2403c <_dtoa_r+0xcc8>
   234f8:	00801004 	movi	r2,64
   234fc:	81010484 	addi	r4,r16,1042
   23500:	10c7c83a 	sub	r3,r2,r3
   23504:	9108d83a 	srl	r4,r18,r4
   23508:	88e2983a 	sll	r17,r17,r3
   2350c:	2448b03a 	or	r4,r4,r17
   23510:	002d2700 	call	2d270 <__floatunsidf>
   23514:	017f8434 	movhi	r5,65040
   23518:	01800044 	movi	r6,1
   2351c:	1009883a 	mov	r4,r2
   23520:	194b883a 	add	r5,r3,r5
   23524:	843fffc4 	addi	r16,r16,-1
   23528:	d9801115 	stw	r6,68(sp)
   2352c:	000d883a 	mov	r6,zero
   23530:	01cffe34 	movhi	r7,16376
   23534:	002c8180 	call	2c818 <__subdf3>
   23538:	0198dbf4 	movhi	r6,25455
   2353c:	01cff4f4 	movhi	r7,16339
   23540:	3190d844 	addi	r6,r6,17249
   23544:	39e1e9c4 	addi	r7,r7,-30809
   23548:	1009883a 	mov	r4,r2
   2354c:	180b883a 	mov	r5,r3
   23550:	002c1000 	call	2c100 <__muldf3>
   23554:	01a2d874 	movhi	r6,35681
   23558:	01cff1f4 	movhi	r7,16327
   2355c:	31b22cc4 	addi	r6,r6,-14157
   23560:	39e28a04 	addi	r7,r7,-30168
   23564:	180b883a 	mov	r5,r3
   23568:	1009883a 	mov	r4,r2
   2356c:	002ad140 	call	2ad14 <__adddf3>
   23570:	8009883a 	mov	r4,r16
   23574:	1029883a 	mov	r20,r2
   23578:	1823883a 	mov	r17,r3
   2357c:	002d1940 	call	2d194 <__floatsidf>
   23580:	019427f4 	movhi	r6,20639
   23584:	01cff4f4 	movhi	r7,16339
   23588:	319e7ec4 	addi	r6,r6,31227
   2358c:	39d104c4 	addi	r7,r7,17427
   23590:	1009883a 	mov	r4,r2
   23594:	180b883a 	mov	r5,r3
   23598:	002c1000 	call	2c100 <__muldf3>
   2359c:	100d883a 	mov	r6,r2
   235a0:	180f883a 	mov	r7,r3
   235a4:	a009883a 	mov	r4,r20
   235a8:	880b883a 	mov	r5,r17
   235ac:	002ad140 	call	2ad14 <__adddf3>
   235b0:	1009883a 	mov	r4,r2
   235b4:	180b883a 	mov	r5,r3
   235b8:	1029883a 	mov	r20,r2
   235bc:	1823883a 	mov	r17,r3
   235c0:	002d1140 	call	2d114 <__fixdfsi>
   235c4:	000d883a 	mov	r6,zero
   235c8:	000f883a 	mov	r7,zero
   235cc:	a009883a 	mov	r4,r20
   235d0:	880b883a 	mov	r5,r17
   235d4:	d8800515 	stw	r2,20(sp)
   235d8:	002c00c0 	call	2c00c <__ledf2>
   235dc:	10028716 	blt	r2,zero,23ffc <_dtoa_r+0xc88>
   235e0:	d8c00517 	ldw	r3,20(sp)
   235e4:	00800584 	movi	r2,22
   235e8:	10c27536 	bltu	r2,r3,23fc0 <_dtoa_r+0xc4c>
   235ec:	180490fa 	slli	r2,r3,3
   235f0:	00c000f4 	movhi	r3,3
   235f4:	18c05804 	addi	r3,r3,352
   235f8:	1885883a 	add	r2,r3,r2
   235fc:	11000017 	ldw	r4,0(r2)
   23600:	11400117 	ldw	r5,4(r2)
   23604:	900d883a 	mov	r6,r18
   23608:	980f883a 	mov	r7,r19
   2360c:	002bf300 	call	2bf30 <__gedf2>
   23610:	00828d0e 	bge	zero,r2,24048 <_dtoa_r+0xcd4>
   23614:	d9000517 	ldw	r4,20(sp)
   23618:	d8000e15 	stw	zero,56(sp)
   2361c:	213fffc4 	addi	r4,r4,-1
   23620:	d9000515 	stw	r4,20(sp)
   23624:	b42dc83a 	sub	r22,r22,r16
   23628:	b5bfffc4 	addi	r22,r22,-1
   2362c:	b0026f16 	blt	r22,zero,23fec <_dtoa_r+0xc78>
   23630:	d8000815 	stw	zero,32(sp)
   23634:	d9c00517 	ldw	r7,20(sp)
   23638:	38026416 	blt	r7,zero,23fcc <_dtoa_r+0xc58>
   2363c:	b1ed883a 	add	r22,r22,r7
   23640:	d9c00d15 	stw	r7,52(sp)
   23644:	d8000a15 	stw	zero,40(sp)
   23648:	d9800317 	ldw	r6,12(sp)
   2364c:	00800244 	movi	r2,9
   23650:	11811436 	bltu	r2,r6,23aa4 <_dtoa_r+0x730>
   23654:	00800144 	movi	r2,5
   23658:	1184e10e 	bge	r2,r6,249e0 <_dtoa_r+0x166c>
   2365c:	31bfff04 	addi	r6,r6,-4
   23660:	d9800315 	stw	r6,12(sp)
   23664:	0023883a 	mov	r17,zero
   23668:	d9800317 	ldw	r6,12(sp)
   2366c:	008000c4 	movi	r2,3
   23670:	30836726 	beq	r6,r2,24410 <_dtoa_r+0x109c>
   23674:	1183410e 	bge	r2,r6,2437c <_dtoa_r+0x1008>
   23678:	d9c00317 	ldw	r7,12(sp)
   2367c:	00800104 	movi	r2,4
   23680:	38827c26 	beq	r7,r2,24074 <_dtoa_r+0xd00>
   23684:	00800144 	movi	r2,5
   23688:	3884c41e 	bne	r7,r2,2499c <_dtoa_r+0x1628>
   2368c:	00800044 	movi	r2,1
   23690:	d8800b15 	stw	r2,44(sp)
   23694:	d8c00517 	ldw	r3,20(sp)
   23698:	d9002217 	ldw	r4,136(sp)
   2369c:	1907883a 	add	r3,r3,r4
   236a0:	19800044 	addi	r6,r3,1
   236a4:	d8c00c15 	stw	r3,48(sp)
   236a8:	d9800615 	stw	r6,24(sp)
   236ac:	0183a40e 	bge	zero,r6,24540 <_dtoa_r+0x11cc>
   236b0:	d9800617 	ldw	r6,24(sp)
   236b4:	3021883a 	mov	r16,r6
   236b8:	e0001115 	stw	zero,68(fp)
   236bc:	008005c4 	movi	r2,23
   236c0:	1184c92e 	bgeu	r2,r6,249e8 <_dtoa_r+0x1674>
   236c4:	00c00044 	movi	r3,1
   236c8:	00800104 	movi	r2,4
   236cc:	1085883a 	add	r2,r2,r2
   236d0:	11000504 	addi	r4,r2,20
   236d4:	180b883a 	mov	r5,r3
   236d8:	18c00044 	addi	r3,r3,1
   236dc:	313ffb2e 	bgeu	r6,r4,236cc <__alt_data_end+0xfffe36cc>
   236e0:	e1401115 	stw	r5,68(fp)
   236e4:	e009883a 	mov	r4,fp
   236e8:	00263f80 	call	263f8 <_Balloc>
   236ec:	d8800715 	stw	r2,28(sp)
   236f0:	e0801015 	stw	r2,64(fp)
   236f4:	00800384 	movi	r2,14
   236f8:	1400f736 	bltu	r2,r16,23ad8 <_dtoa_r+0x764>
   236fc:	8800f626 	beq	r17,zero,23ad8 <_dtoa_r+0x764>
   23700:	d9c00517 	ldw	r7,20(sp)
   23704:	01c39a0e 	bge	zero,r7,24570 <_dtoa_r+0x11fc>
   23708:	388003cc 	andi	r2,r7,15
   2370c:	100490fa 	slli	r2,r2,3
   23710:	382bd13a 	srai	r21,r7,4
   23714:	00c000f4 	movhi	r3,3
   23718:	18c05804 	addi	r3,r3,352
   2371c:	1885883a 	add	r2,r3,r2
   23720:	a8c0040c 	andi	r3,r21,16
   23724:	12400017 	ldw	r9,0(r2)
   23728:	12000117 	ldw	r8,4(r2)
   2372c:	18037926 	beq	r3,zero,24514 <_dtoa_r+0x11a0>
   23730:	008000f4 	movhi	r2,3
   23734:	10804e04 	addi	r2,r2,312
   23738:	11800817 	ldw	r6,32(r2)
   2373c:	11c00917 	ldw	r7,36(r2)
   23740:	9009883a 	mov	r4,r18
   23744:	980b883a 	mov	r5,r19
   23748:	da001715 	stw	r8,92(sp)
   2374c:	da401615 	stw	r9,88(sp)
   23750:	002b5c00 	call	2b5c0 <__divdf3>
   23754:	da001717 	ldw	r8,92(sp)
   23758:	da401617 	ldw	r9,88(sp)
   2375c:	ad4003cc 	andi	r21,r21,15
   23760:	040000c4 	movi	r16,3
   23764:	1023883a 	mov	r17,r2
   23768:	1829883a 	mov	r20,r3
   2376c:	a8001126 	beq	r21,zero,237b4 <_dtoa_r+0x440>
   23770:	05c000f4 	movhi	r23,3
   23774:	bdc04e04 	addi	r23,r23,312
   23778:	4805883a 	mov	r2,r9
   2377c:	4007883a 	mov	r3,r8
   23780:	a980004c 	andi	r6,r21,1
   23784:	1009883a 	mov	r4,r2
   23788:	a82bd07a 	srai	r21,r21,1
   2378c:	180b883a 	mov	r5,r3
   23790:	30000426 	beq	r6,zero,237a4 <_dtoa_r+0x430>
   23794:	b9800017 	ldw	r6,0(r23)
   23798:	b9c00117 	ldw	r7,4(r23)
   2379c:	84000044 	addi	r16,r16,1
   237a0:	002c1000 	call	2c100 <__muldf3>
   237a4:	bdc00204 	addi	r23,r23,8
   237a8:	a83ff51e 	bne	r21,zero,23780 <__alt_data_end+0xfffe3780>
   237ac:	1013883a 	mov	r9,r2
   237b0:	1811883a 	mov	r8,r3
   237b4:	480d883a 	mov	r6,r9
   237b8:	400f883a 	mov	r7,r8
   237bc:	8809883a 	mov	r4,r17
   237c0:	a00b883a 	mov	r5,r20
   237c4:	002b5c00 	call	2b5c0 <__divdf3>
   237c8:	d8800f15 	stw	r2,60(sp)
   237cc:	d8c01015 	stw	r3,64(sp)
   237d0:	d8c00e17 	ldw	r3,56(sp)
   237d4:	18000626 	beq	r3,zero,237f0 <_dtoa_r+0x47c>
   237d8:	d9000f17 	ldw	r4,60(sp)
   237dc:	d9401017 	ldw	r5,64(sp)
   237e0:	000d883a 	mov	r6,zero
   237e4:	01cffc34 	movhi	r7,16368
   237e8:	002c00c0 	call	2c00c <__ledf2>
   237ec:	10040b16 	blt	r2,zero,2481c <_dtoa_r+0x14a8>
   237f0:	8009883a 	mov	r4,r16
   237f4:	002d1940 	call	2d194 <__floatsidf>
   237f8:	d9800f17 	ldw	r6,60(sp)
   237fc:	d9c01017 	ldw	r7,64(sp)
   23800:	1009883a 	mov	r4,r2
   23804:	180b883a 	mov	r5,r3
   23808:	002c1000 	call	2c100 <__muldf3>
   2380c:	000d883a 	mov	r6,zero
   23810:	01d00734 	movhi	r7,16412
   23814:	1009883a 	mov	r4,r2
   23818:	180b883a 	mov	r5,r3
   2381c:	002ad140 	call	2ad14 <__adddf3>
   23820:	1021883a 	mov	r16,r2
   23824:	d8800617 	ldw	r2,24(sp)
   23828:	047f3034 	movhi	r17,64704
   2382c:	1c63883a 	add	r17,r3,r17
   23830:	10031826 	beq	r2,zero,24494 <_dtoa_r+0x1120>
   23834:	d8c00517 	ldw	r3,20(sp)
   23838:	db000617 	ldw	r12,24(sp)
   2383c:	d8c01315 	stw	r3,76(sp)
   23840:	d9000b17 	ldw	r4,44(sp)
   23844:	20038f26 	beq	r4,zero,24684 <_dtoa_r+0x1310>
   23848:	60bfffc4 	addi	r2,r12,-1
   2384c:	100490fa 	slli	r2,r2,3
   23850:	00c000f4 	movhi	r3,3
   23854:	18c05804 	addi	r3,r3,352
   23858:	1885883a 	add	r2,r3,r2
   2385c:	11800017 	ldw	r6,0(r2)
   23860:	11c00117 	ldw	r7,4(r2)
   23864:	d8800717 	ldw	r2,28(sp)
   23868:	0009883a 	mov	r4,zero
   2386c:	014ff834 	movhi	r5,16352
   23870:	db001615 	stw	r12,88(sp)
   23874:	15c00044 	addi	r23,r2,1
   23878:	002b5c00 	call	2b5c0 <__divdf3>
   2387c:	800d883a 	mov	r6,r16
   23880:	880f883a 	mov	r7,r17
   23884:	1009883a 	mov	r4,r2
   23888:	180b883a 	mov	r5,r3
   2388c:	002c8180 	call	2c818 <__subdf3>
   23890:	d9401017 	ldw	r5,64(sp)
   23894:	d9000f17 	ldw	r4,60(sp)
   23898:	102b883a 	mov	r21,r2
   2389c:	d8c01215 	stw	r3,72(sp)
   238a0:	002d1140 	call	2d114 <__fixdfsi>
   238a4:	1009883a 	mov	r4,r2
   238a8:	1029883a 	mov	r20,r2
   238ac:	002d1940 	call	2d194 <__floatsidf>
   238b0:	d9000f17 	ldw	r4,60(sp)
   238b4:	d9401017 	ldw	r5,64(sp)
   238b8:	100d883a 	mov	r6,r2
   238bc:	180f883a 	mov	r7,r3
   238c0:	002c8180 	call	2c818 <__subdf3>
   238c4:	1823883a 	mov	r17,r3
   238c8:	d8c00717 	ldw	r3,28(sp)
   238cc:	d9401217 	ldw	r5,72(sp)
   238d0:	a2000c04 	addi	r8,r20,48
   238d4:	1021883a 	mov	r16,r2
   238d8:	1a000005 	stb	r8,0(r3)
   238dc:	800d883a 	mov	r6,r16
   238e0:	880f883a 	mov	r7,r17
   238e4:	a809883a 	mov	r4,r21
   238e8:	4029883a 	mov	r20,r8
   238ec:	002bf300 	call	2bf30 <__gedf2>
   238f0:	00841d16 	blt	zero,r2,24968 <_dtoa_r+0x15f4>
   238f4:	800d883a 	mov	r6,r16
   238f8:	880f883a 	mov	r7,r17
   238fc:	0009883a 	mov	r4,zero
   23900:	014ffc34 	movhi	r5,16368
   23904:	002c8180 	call	2c818 <__subdf3>
   23908:	d9401217 	ldw	r5,72(sp)
   2390c:	100d883a 	mov	r6,r2
   23910:	180f883a 	mov	r7,r3
   23914:	a809883a 	mov	r4,r21
   23918:	002bf300 	call	2bf30 <__gedf2>
   2391c:	db001617 	ldw	r12,88(sp)
   23920:	00840e16 	blt	zero,r2,2495c <_dtoa_r+0x15e8>
   23924:	00800044 	movi	r2,1
   23928:	13006b0e 	bge	r2,r12,23ad8 <_dtoa_r+0x764>
   2392c:	d9000717 	ldw	r4,28(sp)
   23930:	dd800f15 	stw	r22,60(sp)
   23934:	dcc01015 	stw	r19,64(sp)
   23938:	2319883a 	add	r12,r4,r12
   2393c:	dcc01217 	ldw	r19,72(sp)
   23940:	602d883a 	mov	r22,r12
   23944:	dc801215 	stw	r18,72(sp)
   23948:	b825883a 	mov	r18,r23
   2394c:	00000906 	br	23974 <_dtoa_r+0x600>
   23950:	002c8180 	call	2c818 <__subdf3>
   23954:	a80d883a 	mov	r6,r21
   23958:	980f883a 	mov	r7,r19
   2395c:	1009883a 	mov	r4,r2
   23960:	180b883a 	mov	r5,r3
   23964:	002c00c0 	call	2c00c <__ledf2>
   23968:	1003e816 	blt	r2,zero,2490c <_dtoa_r+0x1598>
   2396c:	b825883a 	mov	r18,r23
   23970:	bd83e926 	beq	r23,r22,24918 <_dtoa_r+0x15a4>
   23974:	a809883a 	mov	r4,r21
   23978:	980b883a 	mov	r5,r19
   2397c:	000d883a 	mov	r6,zero
   23980:	01d00934 	movhi	r7,16420
   23984:	002c1000 	call	2c100 <__muldf3>
   23988:	000d883a 	mov	r6,zero
   2398c:	01d00934 	movhi	r7,16420
   23990:	8009883a 	mov	r4,r16
   23994:	880b883a 	mov	r5,r17
   23998:	102b883a 	mov	r21,r2
   2399c:	1827883a 	mov	r19,r3
   239a0:	002c1000 	call	2c100 <__muldf3>
   239a4:	180b883a 	mov	r5,r3
   239a8:	1009883a 	mov	r4,r2
   239ac:	1821883a 	mov	r16,r3
   239b0:	1023883a 	mov	r17,r2
   239b4:	002d1140 	call	2d114 <__fixdfsi>
   239b8:	1009883a 	mov	r4,r2
   239bc:	1029883a 	mov	r20,r2
   239c0:	002d1940 	call	2d194 <__floatsidf>
   239c4:	8809883a 	mov	r4,r17
   239c8:	800b883a 	mov	r5,r16
   239cc:	100d883a 	mov	r6,r2
   239d0:	180f883a 	mov	r7,r3
   239d4:	002c8180 	call	2c818 <__subdf3>
   239d8:	a5000c04 	addi	r20,r20,48
   239dc:	a80d883a 	mov	r6,r21
   239e0:	980f883a 	mov	r7,r19
   239e4:	1009883a 	mov	r4,r2
   239e8:	180b883a 	mov	r5,r3
   239ec:	95000005 	stb	r20,0(r18)
   239f0:	1021883a 	mov	r16,r2
   239f4:	1823883a 	mov	r17,r3
   239f8:	002c00c0 	call	2c00c <__ledf2>
   239fc:	bdc00044 	addi	r23,r23,1
   23a00:	800d883a 	mov	r6,r16
   23a04:	880f883a 	mov	r7,r17
   23a08:	0009883a 	mov	r4,zero
   23a0c:	014ffc34 	movhi	r5,16368
   23a10:	103fcf0e 	bge	r2,zero,23950 <__alt_data_end+0xfffe3950>
   23a14:	d8c01317 	ldw	r3,76(sp)
   23a18:	d8c00515 	stw	r3,20(sp)
   23a1c:	d9400917 	ldw	r5,36(sp)
   23a20:	e009883a 	mov	r4,fp
   23a24:	00264a00 	call	264a0 <_Bfree>
   23a28:	d9000517 	ldw	r4,20(sp)
   23a2c:	d9802317 	ldw	r6,140(sp)
   23a30:	d9c02517 	ldw	r7,148(sp)
   23a34:	b8000005 	stb	zero,0(r23)
   23a38:	20800044 	addi	r2,r4,1
   23a3c:	30800015 	stw	r2,0(r6)
   23a40:	3802aa26 	beq	r7,zero,244ec <_dtoa_r+0x1178>
   23a44:	3dc00015 	stw	r23,0(r7)
   23a48:	d8800717 	ldw	r2,28(sp)
   23a4c:	003e7906 	br	23434 <__alt_data_end+0xfffe3434>
   23a50:	00800434 	movhi	r2,16
   23a54:	10bfffc4 	addi	r2,r2,-1
   23a58:	88a2703a 	and	r17,r17,r2
   23a5c:	883e851e 	bne	r17,zero,23474 <__alt_data_end+0xfffe3474>
   23a60:	008000f4 	movhi	r2,3
   23a64:	10803904 	addi	r2,r2,228
   23a68:	003e8406 	br	2347c <__alt_data_end+0xfffe347c>
   23a6c:	10c00204 	addi	r3,r2,8
   23a70:	003e8706 	br	23490 <__alt_data_end+0xfffe3490>
   23a74:	01400434 	movhi	r5,16
   23a78:	297fffc4 	addi	r5,r5,-1
   23a7c:	994a703a 	and	r5,r19,r5
   23a80:	9009883a 	mov	r4,r18
   23a84:	843f0044 	addi	r16,r16,-1023
   23a88:	294ffc34 	orhi	r5,r5,16368
   23a8c:	dd800217 	ldw	r22,8(sp)
   23a90:	d8001115 	stw	zero,68(sp)
   23a94:	003ea506 	br	2352c <__alt_data_end+0xfffe352c>
   23a98:	008000f4 	movhi	r2,3
   23a9c:	10803004 	addi	r2,r2,192
   23aa0:	003e6406 	br	23434 <__alt_data_end+0xfffe3434>
   23aa4:	e0001115 	stw	zero,68(fp)
   23aa8:	000b883a 	mov	r5,zero
   23aac:	e009883a 	mov	r4,fp
   23ab0:	00263f80 	call	263f8 <_Balloc>
   23ab4:	01bfffc4 	movi	r6,-1
   23ab8:	01c00044 	movi	r7,1
   23abc:	d8800715 	stw	r2,28(sp)
   23ac0:	d9800c15 	stw	r6,48(sp)
   23ac4:	e0801015 	stw	r2,64(fp)
   23ac8:	d8000315 	stw	zero,12(sp)
   23acc:	d9c00b15 	stw	r7,44(sp)
   23ad0:	d9800615 	stw	r6,24(sp)
   23ad4:	d8002215 	stw	zero,136(sp)
   23ad8:	d8800117 	ldw	r2,4(sp)
   23adc:	10008916 	blt	r2,zero,23d04 <_dtoa_r+0x990>
   23ae0:	d9000517 	ldw	r4,20(sp)
   23ae4:	00c00384 	movi	r3,14
   23ae8:	19008616 	blt	r3,r4,23d04 <_dtoa_r+0x990>
   23aec:	200490fa 	slli	r2,r4,3
   23af0:	00c000f4 	movhi	r3,3
   23af4:	d9802217 	ldw	r6,136(sp)
   23af8:	18c05804 	addi	r3,r3,352
   23afc:	1885883a 	add	r2,r3,r2
   23b00:	14000017 	ldw	r16,0(r2)
   23b04:	14400117 	ldw	r17,4(r2)
   23b08:	30016316 	blt	r6,zero,24098 <_dtoa_r+0xd24>
   23b0c:	800d883a 	mov	r6,r16
   23b10:	880f883a 	mov	r7,r17
   23b14:	9009883a 	mov	r4,r18
   23b18:	980b883a 	mov	r5,r19
   23b1c:	002b5c00 	call	2b5c0 <__divdf3>
   23b20:	180b883a 	mov	r5,r3
   23b24:	1009883a 	mov	r4,r2
   23b28:	002d1140 	call	2d114 <__fixdfsi>
   23b2c:	1009883a 	mov	r4,r2
   23b30:	102b883a 	mov	r21,r2
   23b34:	002d1940 	call	2d194 <__floatsidf>
   23b38:	800d883a 	mov	r6,r16
   23b3c:	880f883a 	mov	r7,r17
   23b40:	1009883a 	mov	r4,r2
   23b44:	180b883a 	mov	r5,r3
   23b48:	002c1000 	call	2c100 <__muldf3>
   23b4c:	100d883a 	mov	r6,r2
   23b50:	180f883a 	mov	r7,r3
   23b54:	9009883a 	mov	r4,r18
   23b58:	980b883a 	mov	r5,r19
   23b5c:	002c8180 	call	2c818 <__subdf3>
   23b60:	d9c00717 	ldw	r7,28(sp)
   23b64:	1009883a 	mov	r4,r2
   23b68:	a8800c04 	addi	r2,r21,48
   23b6c:	38800005 	stb	r2,0(r7)
   23b70:	3dc00044 	addi	r23,r7,1
   23b74:	d9c00617 	ldw	r7,24(sp)
   23b78:	01800044 	movi	r6,1
   23b7c:	180b883a 	mov	r5,r3
   23b80:	2005883a 	mov	r2,r4
   23b84:	39803826 	beq	r7,r6,23c68 <_dtoa_r+0x8f4>
   23b88:	000d883a 	mov	r6,zero
   23b8c:	01d00934 	movhi	r7,16420
   23b90:	002c1000 	call	2c100 <__muldf3>
   23b94:	000d883a 	mov	r6,zero
   23b98:	000f883a 	mov	r7,zero
   23b9c:	1009883a 	mov	r4,r2
   23ba0:	180b883a 	mov	r5,r3
   23ba4:	1025883a 	mov	r18,r2
   23ba8:	1827883a 	mov	r19,r3
   23bac:	002bea80 	call	2bea8 <__eqdf2>
   23bb0:	103f9a26 	beq	r2,zero,23a1c <__alt_data_end+0xfffe3a1c>
   23bb4:	d9c00617 	ldw	r7,24(sp)
   23bb8:	d8c00717 	ldw	r3,28(sp)
   23bbc:	b829883a 	mov	r20,r23
   23bc0:	38bfffc4 	addi	r2,r7,-1
   23bc4:	18ad883a 	add	r22,r3,r2
   23bc8:	00000a06 	br	23bf4 <_dtoa_r+0x880>
   23bcc:	002c1000 	call	2c100 <__muldf3>
   23bd0:	000d883a 	mov	r6,zero
   23bd4:	000f883a 	mov	r7,zero
   23bd8:	1009883a 	mov	r4,r2
   23bdc:	180b883a 	mov	r5,r3
   23be0:	1025883a 	mov	r18,r2
   23be4:	1827883a 	mov	r19,r3
   23be8:	b829883a 	mov	r20,r23
   23bec:	002bea80 	call	2bea8 <__eqdf2>
   23bf0:	103f8a26 	beq	r2,zero,23a1c <__alt_data_end+0xfffe3a1c>
   23bf4:	800d883a 	mov	r6,r16
   23bf8:	880f883a 	mov	r7,r17
   23bfc:	9009883a 	mov	r4,r18
   23c00:	980b883a 	mov	r5,r19
   23c04:	002b5c00 	call	2b5c0 <__divdf3>
   23c08:	180b883a 	mov	r5,r3
   23c0c:	1009883a 	mov	r4,r2
   23c10:	002d1140 	call	2d114 <__fixdfsi>
   23c14:	1009883a 	mov	r4,r2
   23c18:	102b883a 	mov	r21,r2
   23c1c:	002d1940 	call	2d194 <__floatsidf>
   23c20:	800d883a 	mov	r6,r16
   23c24:	880f883a 	mov	r7,r17
   23c28:	1009883a 	mov	r4,r2
   23c2c:	180b883a 	mov	r5,r3
   23c30:	002c1000 	call	2c100 <__muldf3>
   23c34:	100d883a 	mov	r6,r2
   23c38:	180f883a 	mov	r7,r3
   23c3c:	9009883a 	mov	r4,r18
   23c40:	980b883a 	mov	r5,r19
   23c44:	002c8180 	call	2c818 <__subdf3>
   23c48:	aa000c04 	addi	r8,r21,48
   23c4c:	a2000005 	stb	r8,0(r20)
   23c50:	000d883a 	mov	r6,zero
   23c54:	01d00934 	movhi	r7,16420
   23c58:	1009883a 	mov	r4,r2
   23c5c:	180b883a 	mov	r5,r3
   23c60:	a5c00044 	addi	r23,r20,1
   23c64:	b53fd91e 	bne	r22,r20,23bcc <__alt_data_end+0xfffe3bcc>
   23c68:	100d883a 	mov	r6,r2
   23c6c:	180f883a 	mov	r7,r3
   23c70:	1009883a 	mov	r4,r2
   23c74:	180b883a 	mov	r5,r3
   23c78:	002ad140 	call	2ad14 <__adddf3>
   23c7c:	100d883a 	mov	r6,r2
   23c80:	180f883a 	mov	r7,r3
   23c84:	8009883a 	mov	r4,r16
   23c88:	880b883a 	mov	r5,r17
   23c8c:	1027883a 	mov	r19,r2
   23c90:	1825883a 	mov	r18,r3
   23c94:	002c00c0 	call	2c00c <__ledf2>
   23c98:	10000816 	blt	r2,zero,23cbc <_dtoa_r+0x948>
   23c9c:	980d883a 	mov	r6,r19
   23ca0:	900f883a 	mov	r7,r18
   23ca4:	8009883a 	mov	r4,r16
   23ca8:	880b883a 	mov	r5,r17
   23cac:	002bea80 	call	2bea8 <__eqdf2>
   23cb0:	103f5a1e 	bne	r2,zero,23a1c <__alt_data_end+0xfffe3a1c>
   23cb4:	ad40004c 	andi	r21,r21,1
   23cb8:	a83f5826 	beq	r21,zero,23a1c <__alt_data_end+0xfffe3a1c>
   23cbc:	bd3fffc3 	ldbu	r20,-1(r23)
   23cc0:	b8bfffc4 	addi	r2,r23,-1
   23cc4:	1007883a 	mov	r3,r2
   23cc8:	01400e44 	movi	r5,57
   23ccc:	d9800717 	ldw	r6,28(sp)
   23cd0:	00000506 	br	23ce8 <_dtoa_r+0x974>
   23cd4:	18ffffc4 	addi	r3,r3,-1
   23cd8:	11824726 	beq	r2,r6,245f8 <_dtoa_r+0x1284>
   23cdc:	1d000003 	ldbu	r20,0(r3)
   23ce0:	102f883a 	mov	r23,r2
   23ce4:	10bfffc4 	addi	r2,r2,-1
   23ce8:	a1003fcc 	andi	r4,r20,255
   23cec:	2100201c 	xori	r4,r4,128
   23cf0:	213fe004 	addi	r4,r4,-128
   23cf4:	217ff726 	beq	r4,r5,23cd4 <__alt_data_end+0xfffe3cd4>
   23cf8:	a2000044 	addi	r8,r20,1
   23cfc:	12000005 	stb	r8,0(r2)
   23d00:	003f4606 	br	23a1c <__alt_data_end+0xfffe3a1c>
   23d04:	d9000b17 	ldw	r4,44(sp)
   23d08:	2000c826 	beq	r4,zero,2402c <_dtoa_r+0xcb8>
   23d0c:	d9800317 	ldw	r6,12(sp)
   23d10:	00c00044 	movi	r3,1
   23d14:	1980f90e 	bge	r3,r6,240fc <_dtoa_r+0xd88>
   23d18:	d8800617 	ldw	r2,24(sp)
   23d1c:	d8c00a17 	ldw	r3,40(sp)
   23d20:	157fffc4 	addi	r21,r2,-1
   23d24:	1d41f316 	blt	r3,r21,244f4 <_dtoa_r+0x1180>
   23d28:	1d6bc83a 	sub	r21,r3,r21
   23d2c:	d9c00617 	ldw	r7,24(sp)
   23d30:	3802aa16 	blt	r7,zero,247dc <_dtoa_r+0x1468>
   23d34:	dd000817 	ldw	r20,32(sp)
   23d38:	d8800617 	ldw	r2,24(sp)
   23d3c:	d8c00817 	ldw	r3,32(sp)
   23d40:	01400044 	movi	r5,1
   23d44:	e009883a 	mov	r4,fp
   23d48:	1887883a 	add	r3,r3,r2
   23d4c:	d8c00815 	stw	r3,32(sp)
   23d50:	b0ad883a 	add	r22,r22,r2
   23d54:	00268040 	call	26804 <__i2b>
   23d58:	1023883a 	mov	r17,r2
   23d5c:	a0000826 	beq	r20,zero,23d80 <_dtoa_r+0xa0c>
   23d60:	0580070e 	bge	zero,r22,23d80 <_dtoa_r+0xa0c>
   23d64:	a005883a 	mov	r2,r20
   23d68:	b500b916 	blt	r22,r20,24050 <_dtoa_r+0xcdc>
   23d6c:	d9000817 	ldw	r4,32(sp)
   23d70:	a0a9c83a 	sub	r20,r20,r2
   23d74:	b0adc83a 	sub	r22,r22,r2
   23d78:	2089c83a 	sub	r4,r4,r2
   23d7c:	d9000815 	stw	r4,32(sp)
   23d80:	d9800a17 	ldw	r6,40(sp)
   23d84:	0181810e 	bge	zero,r6,2438c <_dtoa_r+0x1018>
   23d88:	d9c00b17 	ldw	r7,44(sp)
   23d8c:	3800b326 	beq	r7,zero,2405c <_dtoa_r+0xce8>
   23d90:	a800b226 	beq	r21,zero,2405c <_dtoa_r+0xce8>
   23d94:	880b883a 	mov	r5,r17
   23d98:	a80d883a 	mov	r6,r21
   23d9c:	e009883a 	mov	r4,fp
   23da0:	0026a380 	call	26a38 <__pow5mult>
   23da4:	d9800917 	ldw	r6,36(sp)
   23da8:	100b883a 	mov	r5,r2
   23dac:	e009883a 	mov	r4,fp
   23db0:	1023883a 	mov	r17,r2
   23db4:	00268400 	call	26840 <__multiply>
   23db8:	1021883a 	mov	r16,r2
   23dbc:	d8800a17 	ldw	r2,40(sp)
   23dc0:	d9400917 	ldw	r5,36(sp)
   23dc4:	e009883a 	mov	r4,fp
   23dc8:	1545c83a 	sub	r2,r2,r21
   23dcc:	d8800a15 	stw	r2,40(sp)
   23dd0:	00264a00 	call	264a0 <_Bfree>
   23dd4:	d8c00a17 	ldw	r3,40(sp)
   23dd8:	18009f1e 	bne	r3,zero,24058 <_dtoa_r+0xce4>
   23ddc:	05c00044 	movi	r23,1
   23de0:	e009883a 	mov	r4,fp
   23de4:	b80b883a 	mov	r5,r23
   23de8:	00268040 	call	26804 <__i2b>
   23dec:	d9000d17 	ldw	r4,52(sp)
   23df0:	102b883a 	mov	r21,r2
   23df4:	2000ce26 	beq	r4,zero,24130 <_dtoa_r+0xdbc>
   23df8:	200d883a 	mov	r6,r4
   23dfc:	100b883a 	mov	r5,r2
   23e00:	e009883a 	mov	r4,fp
   23e04:	0026a380 	call	26a38 <__pow5mult>
   23e08:	d9800317 	ldw	r6,12(sp)
   23e0c:	102b883a 	mov	r21,r2
   23e10:	b981810e 	bge	r23,r6,24418 <_dtoa_r+0x10a4>
   23e14:	0027883a 	mov	r19,zero
   23e18:	a8800417 	ldw	r2,16(r21)
   23e1c:	05c00804 	movi	r23,32
   23e20:	10800104 	addi	r2,r2,4
   23e24:	1085883a 	add	r2,r2,r2
   23e28:	1085883a 	add	r2,r2,r2
   23e2c:	a885883a 	add	r2,r21,r2
   23e30:	11000017 	ldw	r4,0(r2)
   23e34:	00266ec0 	call	266ec <__hi0bits>
   23e38:	b885c83a 	sub	r2,r23,r2
   23e3c:	1585883a 	add	r2,r2,r22
   23e40:	108007cc 	andi	r2,r2,31
   23e44:	1000b326 	beq	r2,zero,24114 <_dtoa_r+0xda0>
   23e48:	00c00804 	movi	r3,32
   23e4c:	1887c83a 	sub	r3,r3,r2
   23e50:	01000104 	movi	r4,4
   23e54:	20c2cd0e 	bge	r4,r3,2498c <_dtoa_r+0x1618>
   23e58:	00c00704 	movi	r3,28
   23e5c:	1885c83a 	sub	r2,r3,r2
   23e60:	d8c00817 	ldw	r3,32(sp)
   23e64:	a0a9883a 	add	r20,r20,r2
   23e68:	b0ad883a 	add	r22,r22,r2
   23e6c:	1887883a 	add	r3,r3,r2
   23e70:	d8c00815 	stw	r3,32(sp)
   23e74:	d9800817 	ldw	r6,32(sp)
   23e78:	0180040e 	bge	zero,r6,23e8c <_dtoa_r+0xb18>
   23e7c:	800b883a 	mov	r5,r16
   23e80:	e009883a 	mov	r4,fp
   23e84:	0026b780 	call	26b78 <__lshift>
   23e88:	1021883a 	mov	r16,r2
   23e8c:	0580050e 	bge	zero,r22,23ea4 <_dtoa_r+0xb30>
   23e90:	a80b883a 	mov	r5,r21
   23e94:	b00d883a 	mov	r6,r22
   23e98:	e009883a 	mov	r4,fp
   23e9c:	0026b780 	call	26b78 <__lshift>
   23ea0:	102b883a 	mov	r21,r2
   23ea4:	d9c00e17 	ldw	r7,56(sp)
   23ea8:	3801211e 	bne	r7,zero,24330 <_dtoa_r+0xfbc>
   23eac:	d9800617 	ldw	r6,24(sp)
   23eb0:	0181380e 	bge	zero,r6,24394 <_dtoa_r+0x1020>
   23eb4:	d8c00b17 	ldw	r3,44(sp)
   23eb8:	1800ab1e 	bne	r3,zero,24168 <_dtoa_r+0xdf4>
   23ebc:	dc800717 	ldw	r18,28(sp)
   23ec0:	dcc00617 	ldw	r19,24(sp)
   23ec4:	9029883a 	mov	r20,r18
   23ec8:	00000206 	br	23ed4 <_dtoa_r+0xb60>
   23ecc:	00264c80 	call	264c8 <__multadd>
   23ed0:	1021883a 	mov	r16,r2
   23ed4:	a80b883a 	mov	r5,r21
   23ed8:	8009883a 	mov	r4,r16
   23edc:	00231740 	call	23174 <quorem>
   23ee0:	10800c04 	addi	r2,r2,48
   23ee4:	90800005 	stb	r2,0(r18)
   23ee8:	94800044 	addi	r18,r18,1
   23eec:	9507c83a 	sub	r3,r18,r20
   23ef0:	000f883a 	mov	r7,zero
   23ef4:	01800284 	movi	r6,10
   23ef8:	800b883a 	mov	r5,r16
   23efc:	e009883a 	mov	r4,fp
   23f00:	1cfff216 	blt	r3,r19,23ecc <__alt_data_end+0xfffe3ecc>
   23f04:	1011883a 	mov	r8,r2
   23f08:	d8800617 	ldw	r2,24(sp)
   23f0c:	0082370e 	bge	zero,r2,247ec <_dtoa_r+0x1478>
   23f10:	d9000717 	ldw	r4,28(sp)
   23f14:	0025883a 	mov	r18,zero
   23f18:	20af883a 	add	r23,r4,r2
   23f1c:	01800044 	movi	r6,1
   23f20:	800b883a 	mov	r5,r16
   23f24:	e009883a 	mov	r4,fp
   23f28:	da001715 	stw	r8,92(sp)
   23f2c:	0026b780 	call	26b78 <__lshift>
   23f30:	a80b883a 	mov	r5,r21
   23f34:	1009883a 	mov	r4,r2
   23f38:	d8800915 	stw	r2,36(sp)
   23f3c:	0026cc00 	call	26cc0 <__mcmp>
   23f40:	da001717 	ldw	r8,92(sp)
   23f44:	0081800e 	bge	zero,r2,24548 <_dtoa_r+0x11d4>
   23f48:	b93fffc3 	ldbu	r4,-1(r23)
   23f4c:	b8bfffc4 	addi	r2,r23,-1
   23f50:	1007883a 	mov	r3,r2
   23f54:	01800e44 	movi	r6,57
   23f58:	d9c00717 	ldw	r7,28(sp)
   23f5c:	00000506 	br	23f74 <_dtoa_r+0xc00>
   23f60:	18ffffc4 	addi	r3,r3,-1
   23f64:	11c12326 	beq	r2,r7,243f4 <_dtoa_r+0x1080>
   23f68:	19000003 	ldbu	r4,0(r3)
   23f6c:	102f883a 	mov	r23,r2
   23f70:	10bfffc4 	addi	r2,r2,-1
   23f74:	21403fcc 	andi	r5,r4,255
   23f78:	2940201c 	xori	r5,r5,128
   23f7c:	297fe004 	addi	r5,r5,-128
   23f80:	29bff726 	beq	r5,r6,23f60 <__alt_data_end+0xfffe3f60>
   23f84:	21000044 	addi	r4,r4,1
   23f88:	11000005 	stb	r4,0(r2)
   23f8c:	a80b883a 	mov	r5,r21
   23f90:	e009883a 	mov	r4,fp
   23f94:	00264a00 	call	264a0 <_Bfree>
   23f98:	883ea026 	beq	r17,zero,23a1c <__alt_data_end+0xfffe3a1c>
   23f9c:	90000426 	beq	r18,zero,23fb0 <_dtoa_r+0xc3c>
   23fa0:	94400326 	beq	r18,r17,23fb0 <_dtoa_r+0xc3c>
   23fa4:	900b883a 	mov	r5,r18
   23fa8:	e009883a 	mov	r4,fp
   23fac:	00264a00 	call	264a0 <_Bfree>
   23fb0:	880b883a 	mov	r5,r17
   23fb4:	e009883a 	mov	r4,fp
   23fb8:	00264a00 	call	264a0 <_Bfree>
   23fbc:	003e9706 	br	23a1c <__alt_data_end+0xfffe3a1c>
   23fc0:	01800044 	movi	r6,1
   23fc4:	d9800e15 	stw	r6,56(sp)
   23fc8:	003d9606 	br	23624 <__alt_data_end+0xfffe3624>
   23fcc:	d8800817 	ldw	r2,32(sp)
   23fd0:	d8c00517 	ldw	r3,20(sp)
   23fd4:	d8000d15 	stw	zero,52(sp)
   23fd8:	10c5c83a 	sub	r2,r2,r3
   23fdc:	00c9c83a 	sub	r4,zero,r3
   23fe0:	d8800815 	stw	r2,32(sp)
   23fe4:	d9000a15 	stw	r4,40(sp)
   23fe8:	003d9706 	br	23648 <__alt_data_end+0xfffe3648>
   23fec:	05adc83a 	sub	r22,zero,r22
   23ff0:	dd800815 	stw	r22,32(sp)
   23ff4:	002d883a 	mov	r22,zero
   23ff8:	003d8e06 	br	23634 <__alt_data_end+0xfffe3634>
   23ffc:	d9000517 	ldw	r4,20(sp)
   24000:	002d1940 	call	2d194 <__floatsidf>
   24004:	100d883a 	mov	r6,r2
   24008:	180f883a 	mov	r7,r3
   2400c:	a009883a 	mov	r4,r20
   24010:	880b883a 	mov	r5,r17
   24014:	002bea80 	call	2bea8 <__eqdf2>
   24018:	103d7126 	beq	r2,zero,235e0 <__alt_data_end+0xfffe35e0>
   2401c:	d9c00517 	ldw	r7,20(sp)
   24020:	39ffffc4 	addi	r7,r7,-1
   24024:	d9c00515 	stw	r7,20(sp)
   24028:	003d6d06 	br	235e0 <__alt_data_end+0xfffe35e0>
   2402c:	dd400a17 	ldw	r21,40(sp)
   24030:	dd000817 	ldw	r20,32(sp)
   24034:	0023883a 	mov	r17,zero
   24038:	003f4806 	br	23d5c <__alt_data_end+0xfffe3d5c>
   2403c:	10e3c83a 	sub	r17,r2,r3
   24040:	9448983a 	sll	r4,r18,r17
   24044:	003d3206 	br	23510 <__alt_data_end+0xfffe3510>
   24048:	d8000e15 	stw	zero,56(sp)
   2404c:	003d7506 	br	23624 <__alt_data_end+0xfffe3624>
   24050:	b005883a 	mov	r2,r22
   24054:	003f4506 	br	23d6c <__alt_data_end+0xfffe3d6c>
   24058:	dc000915 	stw	r16,36(sp)
   2405c:	d9800a17 	ldw	r6,40(sp)
   24060:	d9400917 	ldw	r5,36(sp)
   24064:	e009883a 	mov	r4,fp
   24068:	0026a380 	call	26a38 <__pow5mult>
   2406c:	1021883a 	mov	r16,r2
   24070:	003f5a06 	br	23ddc <__alt_data_end+0xfffe3ddc>
   24074:	01c00044 	movi	r7,1
   24078:	d9c00b15 	stw	r7,44(sp)
   2407c:	d8802217 	ldw	r2,136(sp)
   24080:	0081280e 	bge	zero,r2,24524 <_dtoa_r+0x11b0>
   24084:	100d883a 	mov	r6,r2
   24088:	1021883a 	mov	r16,r2
   2408c:	d8800c15 	stw	r2,48(sp)
   24090:	d8800615 	stw	r2,24(sp)
   24094:	003d8806 	br	236b8 <__alt_data_end+0xfffe36b8>
   24098:	d8800617 	ldw	r2,24(sp)
   2409c:	00be9b16 	blt	zero,r2,23b0c <__alt_data_end+0xfffe3b0c>
   240a0:	10010f1e 	bne	r2,zero,244e0 <_dtoa_r+0x116c>
   240a4:	880b883a 	mov	r5,r17
   240a8:	000d883a 	mov	r6,zero
   240ac:	01d00534 	movhi	r7,16404
   240b0:	8009883a 	mov	r4,r16
   240b4:	002c1000 	call	2c100 <__muldf3>
   240b8:	900d883a 	mov	r6,r18
   240bc:	980f883a 	mov	r7,r19
   240c0:	1009883a 	mov	r4,r2
   240c4:	180b883a 	mov	r5,r3
   240c8:	002bf300 	call	2bf30 <__gedf2>
   240cc:	002b883a 	mov	r21,zero
   240d0:	0023883a 	mov	r17,zero
   240d4:	1000bf16 	blt	r2,zero,243d4 <_dtoa_r+0x1060>
   240d8:	d9802217 	ldw	r6,136(sp)
   240dc:	ddc00717 	ldw	r23,28(sp)
   240e0:	018c303a 	nor	r6,zero,r6
   240e4:	d9800515 	stw	r6,20(sp)
   240e8:	a80b883a 	mov	r5,r21
   240ec:	e009883a 	mov	r4,fp
   240f0:	00264a00 	call	264a0 <_Bfree>
   240f4:	883e4926 	beq	r17,zero,23a1c <__alt_data_end+0xfffe3a1c>
   240f8:	003fad06 	br	23fb0 <__alt_data_end+0xfffe3fb0>
   240fc:	d9c01117 	ldw	r7,68(sp)
   24100:	3801bc26 	beq	r7,zero,247f4 <_dtoa_r+0x1480>
   24104:	10810cc4 	addi	r2,r2,1075
   24108:	dd400a17 	ldw	r21,40(sp)
   2410c:	dd000817 	ldw	r20,32(sp)
   24110:	003f0a06 	br	23d3c <__alt_data_end+0xfffe3d3c>
   24114:	00800704 	movi	r2,28
   24118:	d9000817 	ldw	r4,32(sp)
   2411c:	a0a9883a 	add	r20,r20,r2
   24120:	b0ad883a 	add	r22,r22,r2
   24124:	2089883a 	add	r4,r4,r2
   24128:	d9000815 	stw	r4,32(sp)
   2412c:	003f5106 	br	23e74 <__alt_data_end+0xfffe3e74>
   24130:	d8c00317 	ldw	r3,12(sp)
   24134:	b8c1fc0e 	bge	r23,r3,24928 <_dtoa_r+0x15b4>
   24138:	0027883a 	mov	r19,zero
   2413c:	b805883a 	mov	r2,r23
   24140:	003f3e06 	br	23e3c <__alt_data_end+0xfffe3e3c>
   24144:	880b883a 	mov	r5,r17
   24148:	e009883a 	mov	r4,fp
   2414c:	000f883a 	mov	r7,zero
   24150:	01800284 	movi	r6,10
   24154:	00264c80 	call	264c8 <__multadd>
   24158:	d9000c17 	ldw	r4,48(sp)
   2415c:	1023883a 	mov	r17,r2
   24160:	0102040e 	bge	zero,r4,24974 <_dtoa_r+0x1600>
   24164:	d9000615 	stw	r4,24(sp)
   24168:	0500050e 	bge	zero,r20,24180 <_dtoa_r+0xe0c>
   2416c:	880b883a 	mov	r5,r17
   24170:	a00d883a 	mov	r6,r20
   24174:	e009883a 	mov	r4,fp
   24178:	0026b780 	call	26b78 <__lshift>
   2417c:	1023883a 	mov	r17,r2
   24180:	9801241e 	bne	r19,zero,24614 <_dtoa_r+0x12a0>
   24184:	8829883a 	mov	r20,r17
   24188:	d9000617 	ldw	r4,24(sp)
   2418c:	dcc00717 	ldw	r19,28(sp)
   24190:	9480004c 	andi	r18,r18,1
   24194:	20bfffc4 	addi	r2,r4,-1
   24198:	9885883a 	add	r2,r19,r2
   2419c:	d8800415 	stw	r2,16(sp)
   241a0:	dc800615 	stw	r18,24(sp)
   241a4:	a80b883a 	mov	r5,r21
   241a8:	8009883a 	mov	r4,r16
   241ac:	00231740 	call	23174 <quorem>
   241b0:	880b883a 	mov	r5,r17
   241b4:	8009883a 	mov	r4,r16
   241b8:	102f883a 	mov	r23,r2
   241bc:	0026cc00 	call	26cc0 <__mcmp>
   241c0:	a80b883a 	mov	r5,r21
   241c4:	a00d883a 	mov	r6,r20
   241c8:	e009883a 	mov	r4,fp
   241cc:	102d883a 	mov	r22,r2
   241d0:	0026d200 	call	26d20 <__mdiff>
   241d4:	1007883a 	mov	r3,r2
   241d8:	10800317 	ldw	r2,12(r2)
   241dc:	bc800c04 	addi	r18,r23,48
   241e0:	180b883a 	mov	r5,r3
   241e4:	10004e1e 	bne	r2,zero,24320 <_dtoa_r+0xfac>
   241e8:	8009883a 	mov	r4,r16
   241ec:	d8c01615 	stw	r3,88(sp)
   241f0:	0026cc00 	call	26cc0 <__mcmp>
   241f4:	d8c01617 	ldw	r3,88(sp)
   241f8:	e009883a 	mov	r4,fp
   241fc:	d8801615 	stw	r2,88(sp)
   24200:	180b883a 	mov	r5,r3
   24204:	00264a00 	call	264a0 <_Bfree>
   24208:	d8801617 	ldw	r2,88(sp)
   2420c:	1000041e 	bne	r2,zero,24220 <_dtoa_r+0xeac>
   24210:	d9800317 	ldw	r6,12(sp)
   24214:	3000021e 	bne	r6,zero,24220 <_dtoa_r+0xeac>
   24218:	d8c00617 	ldw	r3,24(sp)
   2421c:	18003726 	beq	r3,zero,242fc <_dtoa_r+0xf88>
   24220:	b0002016 	blt	r22,zero,242a4 <_dtoa_r+0xf30>
   24224:	b000041e 	bne	r22,zero,24238 <_dtoa_r+0xec4>
   24228:	d9000317 	ldw	r4,12(sp)
   2422c:	2000021e 	bne	r4,zero,24238 <_dtoa_r+0xec4>
   24230:	d8c00617 	ldw	r3,24(sp)
   24234:	18001b26 	beq	r3,zero,242a4 <_dtoa_r+0xf30>
   24238:	00810716 	blt	zero,r2,24658 <_dtoa_r+0x12e4>
   2423c:	d8c00417 	ldw	r3,16(sp)
   24240:	9d800044 	addi	r22,r19,1
   24244:	9c800005 	stb	r18,0(r19)
   24248:	b02f883a 	mov	r23,r22
   2424c:	98c10626 	beq	r19,r3,24668 <_dtoa_r+0x12f4>
   24250:	800b883a 	mov	r5,r16
   24254:	000f883a 	mov	r7,zero
   24258:	01800284 	movi	r6,10
   2425c:	e009883a 	mov	r4,fp
   24260:	00264c80 	call	264c8 <__multadd>
   24264:	1021883a 	mov	r16,r2
   24268:	000f883a 	mov	r7,zero
   2426c:	01800284 	movi	r6,10
   24270:	880b883a 	mov	r5,r17
   24274:	e009883a 	mov	r4,fp
   24278:	8d002526 	beq	r17,r20,24310 <_dtoa_r+0xf9c>
   2427c:	00264c80 	call	264c8 <__multadd>
   24280:	a00b883a 	mov	r5,r20
   24284:	000f883a 	mov	r7,zero
   24288:	01800284 	movi	r6,10
   2428c:	e009883a 	mov	r4,fp
   24290:	1023883a 	mov	r17,r2
   24294:	00264c80 	call	264c8 <__multadd>
   24298:	1029883a 	mov	r20,r2
   2429c:	b027883a 	mov	r19,r22
   242a0:	003fc006 	br	241a4 <__alt_data_end+0xfffe41a4>
   242a4:	9011883a 	mov	r8,r18
   242a8:	00800e0e 	bge	zero,r2,242e4 <_dtoa_r+0xf70>
   242ac:	800b883a 	mov	r5,r16
   242b0:	01800044 	movi	r6,1
   242b4:	e009883a 	mov	r4,fp
   242b8:	da001715 	stw	r8,92(sp)
   242bc:	0026b780 	call	26b78 <__lshift>
   242c0:	a80b883a 	mov	r5,r21
   242c4:	1009883a 	mov	r4,r2
   242c8:	1021883a 	mov	r16,r2
   242cc:	0026cc00 	call	26cc0 <__mcmp>
   242d0:	da001717 	ldw	r8,92(sp)
   242d4:	0081960e 	bge	zero,r2,24930 <_dtoa_r+0x15bc>
   242d8:	00800e44 	movi	r2,57
   242dc:	40817026 	beq	r8,r2,248a0 <_dtoa_r+0x152c>
   242e0:	ba000c44 	addi	r8,r23,49
   242e4:	8825883a 	mov	r18,r17
   242e8:	9dc00044 	addi	r23,r19,1
   242ec:	9a000005 	stb	r8,0(r19)
   242f0:	a023883a 	mov	r17,r20
   242f4:	dc000915 	stw	r16,36(sp)
   242f8:	003f2406 	br	23f8c <__alt_data_end+0xfffe3f8c>
   242fc:	00800e44 	movi	r2,57
   24300:	9011883a 	mov	r8,r18
   24304:	90816626 	beq	r18,r2,248a0 <_dtoa_r+0x152c>
   24308:	05bff516 	blt	zero,r22,242e0 <__alt_data_end+0xfffe42e0>
   2430c:	003ff506 	br	242e4 <__alt_data_end+0xfffe42e4>
   24310:	00264c80 	call	264c8 <__multadd>
   24314:	1023883a 	mov	r17,r2
   24318:	1029883a 	mov	r20,r2
   2431c:	003fdf06 	br	2429c <__alt_data_end+0xfffe429c>
   24320:	e009883a 	mov	r4,fp
   24324:	00264a00 	call	264a0 <_Bfree>
   24328:	00800044 	movi	r2,1
   2432c:	003fbc06 	br	24220 <__alt_data_end+0xfffe4220>
   24330:	a80b883a 	mov	r5,r21
   24334:	8009883a 	mov	r4,r16
   24338:	0026cc00 	call	26cc0 <__mcmp>
   2433c:	103edb0e 	bge	r2,zero,23eac <__alt_data_end+0xfffe3eac>
   24340:	800b883a 	mov	r5,r16
   24344:	000f883a 	mov	r7,zero
   24348:	01800284 	movi	r6,10
   2434c:	e009883a 	mov	r4,fp
   24350:	00264c80 	call	264c8 <__multadd>
   24354:	1021883a 	mov	r16,r2
   24358:	d8800517 	ldw	r2,20(sp)
   2435c:	d8c00b17 	ldw	r3,44(sp)
   24360:	10bfffc4 	addi	r2,r2,-1
   24364:	d8800515 	stw	r2,20(sp)
   24368:	183f761e 	bne	r3,zero,24144 <__alt_data_end+0xfffe4144>
   2436c:	d9000c17 	ldw	r4,48(sp)
   24370:	0101730e 	bge	zero,r4,24940 <_dtoa_r+0x15cc>
   24374:	d9000615 	stw	r4,24(sp)
   24378:	003ed006 	br	23ebc <__alt_data_end+0xfffe3ebc>
   2437c:	00800084 	movi	r2,2
   24380:	3081861e 	bne	r6,r2,2499c <_dtoa_r+0x1628>
   24384:	d8000b15 	stw	zero,44(sp)
   24388:	003f3c06 	br	2407c <__alt_data_end+0xfffe407c>
   2438c:	dc000917 	ldw	r16,36(sp)
   24390:	003e9206 	br	23ddc <__alt_data_end+0xfffe3ddc>
   24394:	d9c00317 	ldw	r7,12(sp)
   24398:	00800084 	movi	r2,2
   2439c:	11fec50e 	bge	r2,r7,23eb4 <__alt_data_end+0xfffe3eb4>
   243a0:	d9000617 	ldw	r4,24(sp)
   243a4:	20013c1e 	bne	r4,zero,24898 <_dtoa_r+0x1524>
   243a8:	a80b883a 	mov	r5,r21
   243ac:	000f883a 	mov	r7,zero
   243b0:	01800144 	movi	r6,5
   243b4:	e009883a 	mov	r4,fp
   243b8:	00264c80 	call	264c8 <__multadd>
   243bc:	100b883a 	mov	r5,r2
   243c0:	8009883a 	mov	r4,r16
   243c4:	102b883a 	mov	r21,r2
   243c8:	0026cc00 	call	26cc0 <__mcmp>
   243cc:	dc000915 	stw	r16,36(sp)
   243d0:	00bf410e 	bge	zero,r2,240d8 <__alt_data_end+0xfffe40d8>
   243d4:	d9c00717 	ldw	r7,28(sp)
   243d8:	00800c44 	movi	r2,49
   243dc:	38800005 	stb	r2,0(r7)
   243e0:	d8800517 	ldw	r2,20(sp)
   243e4:	3dc00044 	addi	r23,r7,1
   243e8:	10800044 	addi	r2,r2,1
   243ec:	d8800515 	stw	r2,20(sp)
   243f0:	003f3d06 	br	240e8 <__alt_data_end+0xfffe40e8>
   243f4:	d9800517 	ldw	r6,20(sp)
   243f8:	d9c00717 	ldw	r7,28(sp)
   243fc:	00800c44 	movi	r2,49
   24400:	31800044 	addi	r6,r6,1
   24404:	d9800515 	stw	r6,20(sp)
   24408:	38800005 	stb	r2,0(r7)
   2440c:	003edf06 	br	23f8c <__alt_data_end+0xfffe3f8c>
   24410:	d8000b15 	stw	zero,44(sp)
   24414:	003c9f06 	br	23694 <__alt_data_end+0xfffe3694>
   24418:	903e7e1e 	bne	r18,zero,23e14 <__alt_data_end+0xfffe3e14>
   2441c:	00800434 	movhi	r2,16
   24420:	10bfffc4 	addi	r2,r2,-1
   24424:	9884703a 	and	r2,r19,r2
   24428:	1000ea1e 	bne	r2,zero,247d4 <_dtoa_r+0x1460>
   2442c:	9cdffc2c 	andhi	r19,r19,32752
   24430:	9800e826 	beq	r19,zero,247d4 <_dtoa_r+0x1460>
   24434:	d9c00817 	ldw	r7,32(sp)
   24438:	b5800044 	addi	r22,r22,1
   2443c:	04c00044 	movi	r19,1
   24440:	39c00044 	addi	r7,r7,1
   24444:	d9c00815 	stw	r7,32(sp)
   24448:	d8800d17 	ldw	r2,52(sp)
   2444c:	103e721e 	bne	r2,zero,23e18 <__alt_data_end+0xfffe3e18>
   24450:	00800044 	movi	r2,1
   24454:	003e7906 	br	23e3c <__alt_data_end+0xfffe3e3c>
   24458:	8009883a 	mov	r4,r16
   2445c:	002d1940 	call	2d194 <__floatsidf>
   24460:	d9800f17 	ldw	r6,60(sp)
   24464:	d9c01017 	ldw	r7,64(sp)
   24468:	1009883a 	mov	r4,r2
   2446c:	180b883a 	mov	r5,r3
   24470:	002c1000 	call	2c100 <__muldf3>
   24474:	000d883a 	mov	r6,zero
   24478:	01d00734 	movhi	r7,16412
   2447c:	1009883a 	mov	r4,r2
   24480:	180b883a 	mov	r5,r3
   24484:	002ad140 	call	2ad14 <__adddf3>
   24488:	047f3034 	movhi	r17,64704
   2448c:	1021883a 	mov	r16,r2
   24490:	1c63883a 	add	r17,r3,r17
   24494:	d9000f17 	ldw	r4,60(sp)
   24498:	d9401017 	ldw	r5,64(sp)
   2449c:	000d883a 	mov	r6,zero
   244a0:	01d00534 	movhi	r7,16404
   244a4:	002c8180 	call	2c818 <__subdf3>
   244a8:	800d883a 	mov	r6,r16
   244ac:	880f883a 	mov	r7,r17
   244b0:	1009883a 	mov	r4,r2
   244b4:	180b883a 	mov	r5,r3
   244b8:	102b883a 	mov	r21,r2
   244bc:	1829883a 	mov	r20,r3
   244c0:	002bf300 	call	2bf30 <__gedf2>
   244c4:	00806c16 	blt	zero,r2,24678 <_dtoa_r+0x1304>
   244c8:	89e0003c 	xorhi	r7,r17,32768
   244cc:	800d883a 	mov	r6,r16
   244d0:	a809883a 	mov	r4,r21
   244d4:	a00b883a 	mov	r5,r20
   244d8:	002c00c0 	call	2c00c <__ledf2>
   244dc:	103d7e0e 	bge	r2,zero,23ad8 <__alt_data_end+0xfffe3ad8>
   244e0:	002b883a 	mov	r21,zero
   244e4:	0023883a 	mov	r17,zero
   244e8:	003efb06 	br	240d8 <__alt_data_end+0xfffe40d8>
   244ec:	d8800717 	ldw	r2,28(sp)
   244f0:	003bd006 	br	23434 <__alt_data_end+0xfffe3434>
   244f4:	d9000a17 	ldw	r4,40(sp)
   244f8:	d9800d17 	ldw	r6,52(sp)
   244fc:	dd400a15 	stw	r21,40(sp)
   24500:	a905c83a 	sub	r2,r21,r4
   24504:	308d883a 	add	r6,r6,r2
   24508:	d9800d15 	stw	r6,52(sp)
   2450c:	002b883a 	mov	r21,zero
   24510:	003e0606 	br	23d2c <__alt_data_end+0xfffe3d2c>
   24514:	9023883a 	mov	r17,r18
   24518:	9829883a 	mov	r20,r19
   2451c:	04000084 	movi	r16,2
   24520:	003c9206 	br	2376c <__alt_data_end+0xfffe376c>
   24524:	04000044 	movi	r16,1
   24528:	dc000c15 	stw	r16,48(sp)
   2452c:	dc000615 	stw	r16,24(sp)
   24530:	dc002215 	stw	r16,136(sp)
   24534:	e0001115 	stw	zero,68(fp)
   24538:	000b883a 	mov	r5,zero
   2453c:	003c6906 	br	236e4 <__alt_data_end+0xfffe36e4>
   24540:	3021883a 	mov	r16,r6
   24544:	003ffb06 	br	24534 <__alt_data_end+0xfffe4534>
   24548:	1000021e 	bne	r2,zero,24554 <_dtoa_r+0x11e0>
   2454c:	4200004c 	andi	r8,r8,1
   24550:	403e7d1e 	bne	r8,zero,23f48 <__alt_data_end+0xfffe3f48>
   24554:	01000c04 	movi	r4,48
   24558:	00000106 	br	24560 <_dtoa_r+0x11ec>
   2455c:	102f883a 	mov	r23,r2
   24560:	b8bfffc4 	addi	r2,r23,-1
   24564:	10c00007 	ldb	r3,0(r2)
   24568:	193ffc26 	beq	r3,r4,2455c <__alt_data_end+0xfffe455c>
   2456c:	003e8706 	br	23f8c <__alt_data_end+0xfffe3f8c>
   24570:	d8800517 	ldw	r2,20(sp)
   24574:	00a3c83a 	sub	r17,zero,r2
   24578:	8800a426 	beq	r17,zero,2480c <_dtoa_r+0x1498>
   2457c:	888003cc 	andi	r2,r17,15
   24580:	100490fa 	slli	r2,r2,3
   24584:	00c000f4 	movhi	r3,3
   24588:	18c05804 	addi	r3,r3,352
   2458c:	1885883a 	add	r2,r3,r2
   24590:	11800017 	ldw	r6,0(r2)
   24594:	11c00117 	ldw	r7,4(r2)
   24598:	9009883a 	mov	r4,r18
   2459c:	980b883a 	mov	r5,r19
   245a0:	8823d13a 	srai	r17,r17,4
   245a4:	002c1000 	call	2c100 <__muldf3>
   245a8:	d8800f15 	stw	r2,60(sp)
   245ac:	d8c01015 	stw	r3,64(sp)
   245b0:	8800e826 	beq	r17,zero,24954 <_dtoa_r+0x15e0>
   245b4:	050000f4 	movhi	r20,3
   245b8:	a5004e04 	addi	r20,r20,312
   245bc:	04000084 	movi	r16,2
   245c0:	8980004c 	andi	r6,r17,1
   245c4:	1009883a 	mov	r4,r2
   245c8:	8823d07a 	srai	r17,r17,1
   245cc:	180b883a 	mov	r5,r3
   245d0:	30000426 	beq	r6,zero,245e4 <_dtoa_r+0x1270>
   245d4:	a1800017 	ldw	r6,0(r20)
   245d8:	a1c00117 	ldw	r7,4(r20)
   245dc:	84000044 	addi	r16,r16,1
   245e0:	002c1000 	call	2c100 <__muldf3>
   245e4:	a5000204 	addi	r20,r20,8
   245e8:	883ff51e 	bne	r17,zero,245c0 <__alt_data_end+0xfffe45c0>
   245ec:	d8800f15 	stw	r2,60(sp)
   245f0:	d8c01015 	stw	r3,64(sp)
   245f4:	003c7606 	br	237d0 <__alt_data_end+0xfffe37d0>
   245f8:	00c00c04 	movi	r3,48
   245fc:	10c00005 	stb	r3,0(r2)
   24600:	d8c00517 	ldw	r3,20(sp)
   24604:	bd3fffc3 	ldbu	r20,-1(r23)
   24608:	18c00044 	addi	r3,r3,1
   2460c:	d8c00515 	stw	r3,20(sp)
   24610:	003db906 	br	23cf8 <__alt_data_end+0xfffe3cf8>
   24614:	89400117 	ldw	r5,4(r17)
   24618:	e009883a 	mov	r4,fp
   2461c:	00263f80 	call	263f8 <_Balloc>
   24620:	89800417 	ldw	r6,16(r17)
   24624:	89400304 	addi	r5,r17,12
   24628:	11000304 	addi	r4,r2,12
   2462c:	31800084 	addi	r6,r6,2
   24630:	318d883a 	add	r6,r6,r6
   24634:	318d883a 	add	r6,r6,r6
   24638:	1027883a 	mov	r19,r2
   2463c:	00261880 	call	26188 <memcpy>
   24640:	01800044 	movi	r6,1
   24644:	980b883a 	mov	r5,r19
   24648:	e009883a 	mov	r4,fp
   2464c:	0026b780 	call	26b78 <__lshift>
   24650:	1029883a 	mov	r20,r2
   24654:	003ecc06 	br	24188 <__alt_data_end+0xfffe4188>
   24658:	00800e44 	movi	r2,57
   2465c:	90809026 	beq	r18,r2,248a0 <_dtoa_r+0x152c>
   24660:	92000044 	addi	r8,r18,1
   24664:	003f1f06 	br	242e4 <__alt_data_end+0xfffe42e4>
   24668:	9011883a 	mov	r8,r18
   2466c:	8825883a 	mov	r18,r17
   24670:	a023883a 	mov	r17,r20
   24674:	003e2906 	br	23f1c <__alt_data_end+0xfffe3f1c>
   24678:	002b883a 	mov	r21,zero
   2467c:	0023883a 	mov	r17,zero
   24680:	003f5406 	br	243d4 <__alt_data_end+0xfffe43d4>
   24684:	61bfffc4 	addi	r6,r12,-1
   24688:	300490fa 	slli	r2,r6,3
   2468c:	00c000f4 	movhi	r3,3
   24690:	18c05804 	addi	r3,r3,352
   24694:	1885883a 	add	r2,r3,r2
   24698:	11000017 	ldw	r4,0(r2)
   2469c:	11400117 	ldw	r5,4(r2)
   246a0:	d8800717 	ldw	r2,28(sp)
   246a4:	880f883a 	mov	r7,r17
   246a8:	d9801215 	stw	r6,72(sp)
   246ac:	800d883a 	mov	r6,r16
   246b0:	db001615 	stw	r12,88(sp)
   246b4:	15c00044 	addi	r23,r2,1
   246b8:	002c1000 	call	2c100 <__muldf3>
   246bc:	d9401017 	ldw	r5,64(sp)
   246c0:	d9000f17 	ldw	r4,60(sp)
   246c4:	d8c01515 	stw	r3,84(sp)
   246c8:	d8801415 	stw	r2,80(sp)
   246cc:	002d1140 	call	2d114 <__fixdfsi>
   246d0:	1009883a 	mov	r4,r2
   246d4:	1021883a 	mov	r16,r2
   246d8:	002d1940 	call	2d194 <__floatsidf>
   246dc:	d9000f17 	ldw	r4,60(sp)
   246e0:	d9401017 	ldw	r5,64(sp)
   246e4:	100d883a 	mov	r6,r2
   246e8:	180f883a 	mov	r7,r3
   246ec:	002c8180 	call	2c818 <__subdf3>
   246f0:	1829883a 	mov	r20,r3
   246f4:	d8c00717 	ldw	r3,28(sp)
   246f8:	84000c04 	addi	r16,r16,48
   246fc:	1023883a 	mov	r17,r2
   24700:	1c000005 	stb	r16,0(r3)
   24704:	db001617 	ldw	r12,88(sp)
   24708:	00800044 	movi	r2,1
   2470c:	60802226 	beq	r12,r2,24798 <_dtoa_r+0x1424>
   24710:	d9c00717 	ldw	r7,28(sp)
   24714:	8805883a 	mov	r2,r17
   24718:	b82b883a 	mov	r21,r23
   2471c:	3b19883a 	add	r12,r7,r12
   24720:	6023883a 	mov	r17,r12
   24724:	a007883a 	mov	r3,r20
   24728:	dc800f15 	stw	r18,60(sp)
   2472c:	000d883a 	mov	r6,zero
   24730:	01d00934 	movhi	r7,16420
   24734:	1009883a 	mov	r4,r2
   24738:	180b883a 	mov	r5,r3
   2473c:	002c1000 	call	2c100 <__muldf3>
   24740:	180b883a 	mov	r5,r3
   24744:	1009883a 	mov	r4,r2
   24748:	1829883a 	mov	r20,r3
   2474c:	1025883a 	mov	r18,r2
   24750:	002d1140 	call	2d114 <__fixdfsi>
   24754:	1009883a 	mov	r4,r2
   24758:	1021883a 	mov	r16,r2
   2475c:	002d1940 	call	2d194 <__floatsidf>
   24760:	100d883a 	mov	r6,r2
   24764:	180f883a 	mov	r7,r3
   24768:	9009883a 	mov	r4,r18
   2476c:	a00b883a 	mov	r5,r20
   24770:	84000c04 	addi	r16,r16,48
   24774:	002c8180 	call	2c818 <__subdf3>
   24778:	ad400044 	addi	r21,r21,1
   2477c:	ac3fffc5 	stb	r16,-1(r21)
   24780:	ac7fea1e 	bne	r21,r17,2472c <__alt_data_end+0xfffe472c>
   24784:	1023883a 	mov	r17,r2
   24788:	d8801217 	ldw	r2,72(sp)
   2478c:	dc800f17 	ldw	r18,60(sp)
   24790:	1829883a 	mov	r20,r3
   24794:	b8af883a 	add	r23,r23,r2
   24798:	d9001417 	ldw	r4,80(sp)
   2479c:	d9401517 	ldw	r5,84(sp)
   247a0:	000d883a 	mov	r6,zero
   247a4:	01cff834 	movhi	r7,16352
   247a8:	002ad140 	call	2ad14 <__adddf3>
   247ac:	880d883a 	mov	r6,r17
   247b0:	a00f883a 	mov	r7,r20
   247b4:	1009883a 	mov	r4,r2
   247b8:	180b883a 	mov	r5,r3
   247bc:	002c00c0 	call	2c00c <__ledf2>
   247c0:	10003e0e 	bge	r2,zero,248bc <_dtoa_r+0x1548>
   247c4:	d9001317 	ldw	r4,76(sp)
   247c8:	bd3fffc3 	ldbu	r20,-1(r23)
   247cc:	d9000515 	stw	r4,20(sp)
   247d0:	003d3b06 	br	23cc0 <__alt_data_end+0xfffe3cc0>
   247d4:	0027883a 	mov	r19,zero
   247d8:	003f1b06 	br	24448 <__alt_data_end+0xfffe4448>
   247dc:	d8800817 	ldw	r2,32(sp)
   247e0:	11e9c83a 	sub	r20,r2,r7
   247e4:	0005883a 	mov	r2,zero
   247e8:	003d5406 	br	23d3c <__alt_data_end+0xfffe3d3c>
   247ec:	00800044 	movi	r2,1
   247f0:	003dc706 	br	23f10 <__alt_data_end+0xfffe3f10>
   247f4:	d8c00217 	ldw	r3,8(sp)
   247f8:	00800d84 	movi	r2,54
   247fc:	dd400a17 	ldw	r21,40(sp)
   24800:	10c5c83a 	sub	r2,r2,r3
   24804:	dd000817 	ldw	r20,32(sp)
   24808:	003d4c06 	br	23d3c <__alt_data_end+0xfffe3d3c>
   2480c:	dc800f15 	stw	r18,60(sp)
   24810:	dcc01015 	stw	r19,64(sp)
   24814:	04000084 	movi	r16,2
   24818:	003bed06 	br	237d0 <__alt_data_end+0xfffe37d0>
   2481c:	d9000617 	ldw	r4,24(sp)
   24820:	203f0d26 	beq	r4,zero,24458 <__alt_data_end+0xfffe4458>
   24824:	d9800c17 	ldw	r6,48(sp)
   24828:	01bcab0e 	bge	zero,r6,23ad8 <__alt_data_end+0xfffe3ad8>
   2482c:	d9401017 	ldw	r5,64(sp)
   24830:	d9000f17 	ldw	r4,60(sp)
   24834:	000d883a 	mov	r6,zero
   24838:	01d00934 	movhi	r7,16420
   2483c:	002c1000 	call	2c100 <__muldf3>
   24840:	81000044 	addi	r4,r16,1
   24844:	d8800f15 	stw	r2,60(sp)
   24848:	d8c01015 	stw	r3,64(sp)
   2484c:	002d1940 	call	2d194 <__floatsidf>
   24850:	d9800f17 	ldw	r6,60(sp)
   24854:	d9c01017 	ldw	r7,64(sp)
   24858:	1009883a 	mov	r4,r2
   2485c:	180b883a 	mov	r5,r3
   24860:	002c1000 	call	2c100 <__muldf3>
   24864:	01d00734 	movhi	r7,16412
   24868:	000d883a 	mov	r6,zero
   2486c:	1009883a 	mov	r4,r2
   24870:	180b883a 	mov	r5,r3
   24874:	002ad140 	call	2ad14 <__adddf3>
   24878:	d9c00517 	ldw	r7,20(sp)
   2487c:	047f3034 	movhi	r17,64704
   24880:	1021883a 	mov	r16,r2
   24884:	39ffffc4 	addi	r7,r7,-1
   24888:	d9c01315 	stw	r7,76(sp)
   2488c:	1c63883a 	add	r17,r3,r17
   24890:	db000c17 	ldw	r12,48(sp)
   24894:	003bea06 	br	23840 <__alt_data_end+0xfffe3840>
   24898:	dc000915 	stw	r16,36(sp)
   2489c:	003e0e06 	br	240d8 <__alt_data_end+0xfffe40d8>
   248a0:	01000e44 	movi	r4,57
   248a4:	8825883a 	mov	r18,r17
   248a8:	9dc00044 	addi	r23,r19,1
   248ac:	99000005 	stb	r4,0(r19)
   248b0:	a023883a 	mov	r17,r20
   248b4:	dc000915 	stw	r16,36(sp)
   248b8:	003da406 	br	23f4c <__alt_data_end+0xfffe3f4c>
   248bc:	d9801417 	ldw	r6,80(sp)
   248c0:	d9c01517 	ldw	r7,84(sp)
   248c4:	0009883a 	mov	r4,zero
   248c8:	014ff834 	movhi	r5,16352
   248cc:	002c8180 	call	2c818 <__subdf3>
   248d0:	880d883a 	mov	r6,r17
   248d4:	a00f883a 	mov	r7,r20
   248d8:	1009883a 	mov	r4,r2
   248dc:	180b883a 	mov	r5,r3
   248e0:	002bf300 	call	2bf30 <__gedf2>
   248e4:	00bc7c0e 	bge	zero,r2,23ad8 <__alt_data_end+0xfffe3ad8>
   248e8:	01000c04 	movi	r4,48
   248ec:	00000106 	br	248f4 <_dtoa_r+0x1580>
   248f0:	102f883a 	mov	r23,r2
   248f4:	b8bfffc4 	addi	r2,r23,-1
   248f8:	10c00007 	ldb	r3,0(r2)
   248fc:	193ffc26 	beq	r3,r4,248f0 <__alt_data_end+0xfffe48f0>
   24900:	d9801317 	ldw	r6,76(sp)
   24904:	d9800515 	stw	r6,20(sp)
   24908:	003c4406 	br	23a1c <__alt_data_end+0xfffe3a1c>
   2490c:	d9801317 	ldw	r6,76(sp)
   24910:	d9800515 	stw	r6,20(sp)
   24914:	003cea06 	br	23cc0 <__alt_data_end+0xfffe3cc0>
   24918:	dd800f17 	ldw	r22,60(sp)
   2491c:	dcc01017 	ldw	r19,64(sp)
   24920:	dc801217 	ldw	r18,72(sp)
   24924:	003c6c06 	br	23ad8 <__alt_data_end+0xfffe3ad8>
   24928:	903e031e 	bne	r18,zero,24138 <__alt_data_end+0xfffe4138>
   2492c:	003ebb06 	br	2441c <__alt_data_end+0xfffe441c>
   24930:	103e6c1e 	bne	r2,zero,242e4 <__alt_data_end+0xfffe42e4>
   24934:	4080004c 	andi	r2,r8,1
   24938:	103e6a26 	beq	r2,zero,242e4 <__alt_data_end+0xfffe42e4>
   2493c:	003e6606 	br	242d8 <__alt_data_end+0xfffe42d8>
   24940:	d8c00317 	ldw	r3,12(sp)
   24944:	00800084 	movi	r2,2
   24948:	10c02916 	blt	r2,r3,249f0 <_dtoa_r+0x167c>
   2494c:	d9000c17 	ldw	r4,48(sp)
   24950:	003e8806 	br	24374 <__alt_data_end+0xfffe4374>
   24954:	04000084 	movi	r16,2
   24958:	003b9d06 	br	237d0 <__alt_data_end+0xfffe37d0>
   2495c:	d9001317 	ldw	r4,76(sp)
   24960:	d9000515 	stw	r4,20(sp)
   24964:	003cd606 	br	23cc0 <__alt_data_end+0xfffe3cc0>
   24968:	d8801317 	ldw	r2,76(sp)
   2496c:	d8800515 	stw	r2,20(sp)
   24970:	003c2a06 	br	23a1c <__alt_data_end+0xfffe3a1c>
   24974:	d9800317 	ldw	r6,12(sp)
   24978:	00800084 	movi	r2,2
   2497c:	11801516 	blt	r2,r6,249d4 <_dtoa_r+0x1660>
   24980:	d9c00c17 	ldw	r7,48(sp)
   24984:	d9c00615 	stw	r7,24(sp)
   24988:	003df706 	br	24168 <__alt_data_end+0xfffe4168>
   2498c:	193d3926 	beq	r3,r4,23e74 <__alt_data_end+0xfffe3e74>
   24990:	00c00f04 	movi	r3,60
   24994:	1885c83a 	sub	r2,r3,r2
   24998:	003ddf06 	br	24118 <__alt_data_end+0xfffe4118>
   2499c:	e009883a 	mov	r4,fp
   249a0:	e0001115 	stw	zero,68(fp)
   249a4:	000b883a 	mov	r5,zero
   249a8:	00263f80 	call	263f8 <_Balloc>
   249ac:	d8800715 	stw	r2,28(sp)
   249b0:	d8c00717 	ldw	r3,28(sp)
   249b4:	00bfffc4 	movi	r2,-1
   249b8:	01000044 	movi	r4,1
   249bc:	d8800c15 	stw	r2,48(sp)
   249c0:	e0c01015 	stw	r3,64(fp)
   249c4:	d9000b15 	stw	r4,44(sp)
   249c8:	d8800615 	stw	r2,24(sp)
   249cc:	d8002215 	stw	zero,136(sp)
   249d0:	003c4106 	br	23ad8 <__alt_data_end+0xfffe3ad8>
   249d4:	d8c00c17 	ldw	r3,48(sp)
   249d8:	d8c00615 	stw	r3,24(sp)
   249dc:	003e7006 	br	243a0 <__alt_data_end+0xfffe43a0>
   249e0:	04400044 	movi	r17,1
   249e4:	003b2006 	br	23668 <__alt_data_end+0xfffe3668>
   249e8:	000b883a 	mov	r5,zero
   249ec:	003b3d06 	br	236e4 <__alt_data_end+0xfffe36e4>
   249f0:	d8800c17 	ldw	r2,48(sp)
   249f4:	d8800615 	stw	r2,24(sp)
   249f8:	003e6906 	br	243a0 <__alt_data_end+0xfffe43a0>

000249fc <__sflush_r>:
   249fc:	2880030b 	ldhu	r2,12(r5)
   24a00:	defffb04 	addi	sp,sp,-20
   24a04:	dcc00315 	stw	r19,12(sp)
   24a08:	dc400115 	stw	r17,4(sp)
   24a0c:	dfc00415 	stw	ra,16(sp)
   24a10:	dc800215 	stw	r18,8(sp)
   24a14:	dc000015 	stw	r16,0(sp)
   24a18:	10c0020c 	andi	r3,r2,8
   24a1c:	2823883a 	mov	r17,r5
   24a20:	2027883a 	mov	r19,r4
   24a24:	1800311e 	bne	r3,zero,24aec <__sflush_r+0xf0>
   24a28:	28c00117 	ldw	r3,4(r5)
   24a2c:	10820014 	ori	r2,r2,2048
   24a30:	2880030d 	sth	r2,12(r5)
   24a34:	00c04b0e 	bge	zero,r3,24b64 <__sflush_r+0x168>
   24a38:	8a000a17 	ldw	r8,40(r17)
   24a3c:	40002326 	beq	r8,zero,24acc <__sflush_r+0xd0>
   24a40:	9c000017 	ldw	r16,0(r19)
   24a44:	10c4000c 	andi	r3,r2,4096
   24a48:	98000015 	stw	zero,0(r19)
   24a4c:	18004826 	beq	r3,zero,24b70 <__sflush_r+0x174>
   24a50:	89801417 	ldw	r6,80(r17)
   24a54:	10c0010c 	andi	r3,r2,4
   24a58:	18000626 	beq	r3,zero,24a74 <__sflush_r+0x78>
   24a5c:	88c00117 	ldw	r3,4(r17)
   24a60:	88800c17 	ldw	r2,48(r17)
   24a64:	30cdc83a 	sub	r6,r6,r3
   24a68:	10000226 	beq	r2,zero,24a74 <__sflush_r+0x78>
   24a6c:	88800f17 	ldw	r2,60(r17)
   24a70:	308dc83a 	sub	r6,r6,r2
   24a74:	89400717 	ldw	r5,28(r17)
   24a78:	000f883a 	mov	r7,zero
   24a7c:	9809883a 	mov	r4,r19
   24a80:	403ee83a 	callr	r8
   24a84:	00ffffc4 	movi	r3,-1
   24a88:	10c04426 	beq	r2,r3,24b9c <__sflush_r+0x1a0>
   24a8c:	88c0030b 	ldhu	r3,12(r17)
   24a90:	89000417 	ldw	r4,16(r17)
   24a94:	88000115 	stw	zero,4(r17)
   24a98:	197dffcc 	andi	r5,r3,63487
   24a9c:	8940030d 	sth	r5,12(r17)
   24aa0:	89000015 	stw	r4,0(r17)
   24aa4:	18c4000c 	andi	r3,r3,4096
   24aa8:	18002c1e 	bne	r3,zero,24b5c <__sflush_r+0x160>
   24aac:	89400c17 	ldw	r5,48(r17)
   24ab0:	9c000015 	stw	r16,0(r19)
   24ab4:	28000526 	beq	r5,zero,24acc <__sflush_r+0xd0>
   24ab8:	88801004 	addi	r2,r17,64
   24abc:	28800226 	beq	r5,r2,24ac8 <__sflush_r+0xcc>
   24ac0:	9809883a 	mov	r4,r19
   24ac4:	00251680 	call	25168 <_free_r>
   24ac8:	88000c15 	stw	zero,48(r17)
   24acc:	0005883a 	mov	r2,zero
   24ad0:	dfc00417 	ldw	ra,16(sp)
   24ad4:	dcc00317 	ldw	r19,12(sp)
   24ad8:	dc800217 	ldw	r18,8(sp)
   24adc:	dc400117 	ldw	r17,4(sp)
   24ae0:	dc000017 	ldw	r16,0(sp)
   24ae4:	dec00504 	addi	sp,sp,20
   24ae8:	f800283a 	ret
   24aec:	2c800417 	ldw	r18,16(r5)
   24af0:	903ff626 	beq	r18,zero,24acc <__alt_data_end+0xfffe4acc>
   24af4:	2c000017 	ldw	r16,0(r5)
   24af8:	108000cc 	andi	r2,r2,3
   24afc:	2c800015 	stw	r18,0(r5)
   24b00:	84a1c83a 	sub	r16,r16,r18
   24b04:	1000131e 	bne	r2,zero,24b54 <__sflush_r+0x158>
   24b08:	28800517 	ldw	r2,20(r5)
   24b0c:	88800215 	stw	r2,8(r17)
   24b10:	04000316 	blt	zero,r16,24b20 <__sflush_r+0x124>
   24b14:	003fed06 	br	24acc <__alt_data_end+0xfffe4acc>
   24b18:	90a5883a 	add	r18,r18,r2
   24b1c:	043feb0e 	bge	zero,r16,24acc <__alt_data_end+0xfffe4acc>
   24b20:	88800917 	ldw	r2,36(r17)
   24b24:	89400717 	ldw	r5,28(r17)
   24b28:	800f883a 	mov	r7,r16
   24b2c:	900d883a 	mov	r6,r18
   24b30:	9809883a 	mov	r4,r19
   24b34:	103ee83a 	callr	r2
   24b38:	80a1c83a 	sub	r16,r16,r2
   24b3c:	00bff616 	blt	zero,r2,24b18 <__alt_data_end+0xfffe4b18>
   24b40:	88c0030b 	ldhu	r3,12(r17)
   24b44:	00bfffc4 	movi	r2,-1
   24b48:	18c01014 	ori	r3,r3,64
   24b4c:	88c0030d 	sth	r3,12(r17)
   24b50:	003fdf06 	br	24ad0 <__alt_data_end+0xfffe4ad0>
   24b54:	0005883a 	mov	r2,zero
   24b58:	003fec06 	br	24b0c <__alt_data_end+0xfffe4b0c>
   24b5c:	88801415 	stw	r2,80(r17)
   24b60:	003fd206 	br	24aac <__alt_data_end+0xfffe4aac>
   24b64:	28c00f17 	ldw	r3,60(r5)
   24b68:	00ffb316 	blt	zero,r3,24a38 <__alt_data_end+0xfffe4a38>
   24b6c:	003fd706 	br	24acc <__alt_data_end+0xfffe4acc>
   24b70:	89400717 	ldw	r5,28(r17)
   24b74:	000d883a 	mov	r6,zero
   24b78:	01c00044 	movi	r7,1
   24b7c:	9809883a 	mov	r4,r19
   24b80:	403ee83a 	callr	r8
   24b84:	100d883a 	mov	r6,r2
   24b88:	00bfffc4 	movi	r2,-1
   24b8c:	30801426 	beq	r6,r2,24be0 <__sflush_r+0x1e4>
   24b90:	8880030b 	ldhu	r2,12(r17)
   24b94:	8a000a17 	ldw	r8,40(r17)
   24b98:	003fae06 	br	24a54 <__alt_data_end+0xfffe4a54>
   24b9c:	98c00017 	ldw	r3,0(r19)
   24ba0:	183fba26 	beq	r3,zero,24a8c <__alt_data_end+0xfffe4a8c>
   24ba4:	01000744 	movi	r4,29
   24ba8:	19000626 	beq	r3,r4,24bc4 <__sflush_r+0x1c8>
   24bac:	01000584 	movi	r4,22
   24bb0:	19000426 	beq	r3,r4,24bc4 <__sflush_r+0x1c8>
   24bb4:	88c0030b 	ldhu	r3,12(r17)
   24bb8:	18c01014 	ori	r3,r3,64
   24bbc:	88c0030d 	sth	r3,12(r17)
   24bc0:	003fc306 	br	24ad0 <__alt_data_end+0xfffe4ad0>
   24bc4:	8880030b 	ldhu	r2,12(r17)
   24bc8:	88c00417 	ldw	r3,16(r17)
   24bcc:	88000115 	stw	zero,4(r17)
   24bd0:	10bdffcc 	andi	r2,r2,63487
   24bd4:	8880030d 	sth	r2,12(r17)
   24bd8:	88c00015 	stw	r3,0(r17)
   24bdc:	003fb306 	br	24aac <__alt_data_end+0xfffe4aac>
   24be0:	98800017 	ldw	r2,0(r19)
   24be4:	103fea26 	beq	r2,zero,24b90 <__alt_data_end+0xfffe4b90>
   24be8:	00c00744 	movi	r3,29
   24bec:	10c00226 	beq	r2,r3,24bf8 <__sflush_r+0x1fc>
   24bf0:	00c00584 	movi	r3,22
   24bf4:	10c0031e 	bne	r2,r3,24c04 <__sflush_r+0x208>
   24bf8:	9c000015 	stw	r16,0(r19)
   24bfc:	0005883a 	mov	r2,zero
   24c00:	003fb306 	br	24ad0 <__alt_data_end+0xfffe4ad0>
   24c04:	88c0030b 	ldhu	r3,12(r17)
   24c08:	3005883a 	mov	r2,r6
   24c0c:	18c01014 	ori	r3,r3,64
   24c10:	88c0030d 	sth	r3,12(r17)
   24c14:	003fae06 	br	24ad0 <__alt_data_end+0xfffe4ad0>

00024c18 <_fflush_r>:
   24c18:	defffd04 	addi	sp,sp,-12
   24c1c:	dc000115 	stw	r16,4(sp)
   24c20:	dfc00215 	stw	ra,8(sp)
   24c24:	2021883a 	mov	r16,r4
   24c28:	20000226 	beq	r4,zero,24c34 <_fflush_r+0x1c>
   24c2c:	20800e17 	ldw	r2,56(r4)
   24c30:	10000c26 	beq	r2,zero,24c64 <_fflush_r+0x4c>
   24c34:	2880030f 	ldh	r2,12(r5)
   24c38:	1000051e 	bne	r2,zero,24c50 <_fflush_r+0x38>
   24c3c:	0005883a 	mov	r2,zero
   24c40:	dfc00217 	ldw	ra,8(sp)
   24c44:	dc000117 	ldw	r16,4(sp)
   24c48:	dec00304 	addi	sp,sp,12
   24c4c:	f800283a 	ret
   24c50:	8009883a 	mov	r4,r16
   24c54:	dfc00217 	ldw	ra,8(sp)
   24c58:	dc000117 	ldw	r16,4(sp)
   24c5c:	dec00304 	addi	sp,sp,12
   24c60:	00249fc1 	jmpi	249fc <__sflush_r>
   24c64:	d9400015 	stw	r5,0(sp)
   24c68:	0024ff40 	call	24ff4 <__sinit>
   24c6c:	d9400017 	ldw	r5,0(sp)
   24c70:	003ff006 	br	24c34 <__alt_data_end+0xfffe4c34>

00024c74 <fflush>:
   24c74:	20000526 	beq	r4,zero,24c8c <fflush+0x18>
   24c78:	008000f4 	movhi	r2,3
   24c7c:	10878b04 	addi	r2,r2,7724
   24c80:	200b883a 	mov	r5,r4
   24c84:	11000017 	ldw	r4,0(r2)
   24c88:	0024c181 	jmpi	24c18 <_fflush_r>
   24c8c:	008000f4 	movhi	r2,3
   24c90:	10878a04 	addi	r2,r2,7720
   24c94:	11000017 	ldw	r4,0(r2)
   24c98:	014000b4 	movhi	r5,2
   24c9c:	29530604 	addi	r5,r5,19480
   24ca0:	002553c1 	jmpi	2553c <_fwalk_reent>

00024ca4 <__fp_unlock>:
   24ca4:	0005883a 	mov	r2,zero
   24ca8:	f800283a 	ret

00024cac <_cleanup_r>:
   24cac:	014000f4 	movhi	r5,3
   24cb0:	2963cb04 	addi	r5,r5,-28884
   24cb4:	002553c1 	jmpi	2553c <_fwalk_reent>

00024cb8 <__sinit.part.1>:
   24cb8:	defff704 	addi	sp,sp,-36
   24cbc:	00c000b4 	movhi	r3,2
   24cc0:	dfc00815 	stw	ra,32(sp)
   24cc4:	ddc00715 	stw	r23,28(sp)
   24cc8:	dd800615 	stw	r22,24(sp)
   24ccc:	dd400515 	stw	r21,20(sp)
   24cd0:	dd000415 	stw	r20,16(sp)
   24cd4:	dcc00315 	stw	r19,12(sp)
   24cd8:	dc800215 	stw	r18,8(sp)
   24cdc:	dc400115 	stw	r17,4(sp)
   24ce0:	dc000015 	stw	r16,0(sp)
   24ce4:	18d32b04 	addi	r3,r3,19628
   24ce8:	24000117 	ldw	r16,4(r4)
   24cec:	20c00f15 	stw	r3,60(r4)
   24cf0:	2080bb04 	addi	r2,r4,748
   24cf4:	00c000c4 	movi	r3,3
   24cf8:	20c0b915 	stw	r3,740(r4)
   24cfc:	2080ba15 	stw	r2,744(r4)
   24d00:	2000b815 	stw	zero,736(r4)
   24d04:	05c00204 	movi	r23,8
   24d08:	00800104 	movi	r2,4
   24d0c:	2025883a 	mov	r18,r4
   24d10:	b80d883a 	mov	r6,r23
   24d14:	81001704 	addi	r4,r16,92
   24d18:	000b883a 	mov	r5,zero
   24d1c:	80000015 	stw	zero,0(r16)
   24d20:	80000115 	stw	zero,4(r16)
   24d24:	80000215 	stw	zero,8(r16)
   24d28:	8080030d 	sth	r2,12(r16)
   24d2c:	80001915 	stw	zero,100(r16)
   24d30:	8000038d 	sth	zero,14(r16)
   24d34:	80000415 	stw	zero,16(r16)
   24d38:	80000515 	stw	zero,20(r16)
   24d3c:	80000615 	stw	zero,24(r16)
   24d40:	00262d00 	call	262d0 <memset>
   24d44:	058000b4 	movhi	r22,2
   24d48:	94400217 	ldw	r17,8(r18)
   24d4c:	054000b4 	movhi	r21,2
   24d50:	050000b4 	movhi	r20,2
   24d54:	04c000b4 	movhi	r19,2
   24d58:	b59d2f04 	addi	r22,r22,29884
   24d5c:	ad5d4604 	addi	r21,r21,29976
   24d60:	a51d6504 	addi	r20,r20,30100
   24d64:	9cdd7c04 	addi	r19,r19,30192
   24d68:	85800815 	stw	r22,32(r16)
   24d6c:	85400915 	stw	r21,36(r16)
   24d70:	85000a15 	stw	r20,40(r16)
   24d74:	84c00b15 	stw	r19,44(r16)
   24d78:	84000715 	stw	r16,28(r16)
   24d7c:	00800284 	movi	r2,10
   24d80:	8880030d 	sth	r2,12(r17)
   24d84:	00800044 	movi	r2,1
   24d88:	b80d883a 	mov	r6,r23
   24d8c:	89001704 	addi	r4,r17,92
   24d90:	000b883a 	mov	r5,zero
   24d94:	88000015 	stw	zero,0(r17)
   24d98:	88000115 	stw	zero,4(r17)
   24d9c:	88000215 	stw	zero,8(r17)
   24da0:	88001915 	stw	zero,100(r17)
   24da4:	8880038d 	sth	r2,14(r17)
   24da8:	88000415 	stw	zero,16(r17)
   24dac:	88000515 	stw	zero,20(r17)
   24db0:	88000615 	stw	zero,24(r17)
   24db4:	00262d00 	call	262d0 <memset>
   24db8:	94000317 	ldw	r16,12(r18)
   24dbc:	00800484 	movi	r2,18
   24dc0:	8c400715 	stw	r17,28(r17)
   24dc4:	8d800815 	stw	r22,32(r17)
   24dc8:	8d400915 	stw	r21,36(r17)
   24dcc:	8d000a15 	stw	r20,40(r17)
   24dd0:	8cc00b15 	stw	r19,44(r17)
   24dd4:	8080030d 	sth	r2,12(r16)
   24dd8:	00800084 	movi	r2,2
   24ddc:	80000015 	stw	zero,0(r16)
   24de0:	80000115 	stw	zero,4(r16)
   24de4:	80000215 	stw	zero,8(r16)
   24de8:	80001915 	stw	zero,100(r16)
   24dec:	8080038d 	sth	r2,14(r16)
   24df0:	80000415 	stw	zero,16(r16)
   24df4:	80000515 	stw	zero,20(r16)
   24df8:	80000615 	stw	zero,24(r16)
   24dfc:	b80d883a 	mov	r6,r23
   24e00:	000b883a 	mov	r5,zero
   24e04:	81001704 	addi	r4,r16,92
   24e08:	00262d00 	call	262d0 <memset>
   24e0c:	00800044 	movi	r2,1
   24e10:	84000715 	stw	r16,28(r16)
   24e14:	85800815 	stw	r22,32(r16)
   24e18:	85400915 	stw	r21,36(r16)
   24e1c:	85000a15 	stw	r20,40(r16)
   24e20:	84c00b15 	stw	r19,44(r16)
   24e24:	90800e15 	stw	r2,56(r18)
   24e28:	dfc00817 	ldw	ra,32(sp)
   24e2c:	ddc00717 	ldw	r23,28(sp)
   24e30:	dd800617 	ldw	r22,24(sp)
   24e34:	dd400517 	ldw	r21,20(sp)
   24e38:	dd000417 	ldw	r20,16(sp)
   24e3c:	dcc00317 	ldw	r19,12(sp)
   24e40:	dc800217 	ldw	r18,8(sp)
   24e44:	dc400117 	ldw	r17,4(sp)
   24e48:	dc000017 	ldw	r16,0(sp)
   24e4c:	dec00904 	addi	sp,sp,36
   24e50:	f800283a 	ret

00024e54 <__fp_lock>:
   24e54:	0005883a 	mov	r2,zero
   24e58:	f800283a 	ret

00024e5c <__sfmoreglue>:
   24e5c:	defffc04 	addi	sp,sp,-16
   24e60:	dc400115 	stw	r17,4(sp)
   24e64:	2c7fffc4 	addi	r17,r5,-1
   24e68:	8c401a24 	muli	r17,r17,104
   24e6c:	dc800215 	stw	r18,8(sp)
   24e70:	2825883a 	mov	r18,r5
   24e74:	89401d04 	addi	r5,r17,116
   24e78:	dc000015 	stw	r16,0(sp)
   24e7c:	dfc00315 	stw	ra,12(sp)
   24e80:	00258980 	call	25898 <_malloc_r>
   24e84:	1021883a 	mov	r16,r2
   24e88:	10000726 	beq	r2,zero,24ea8 <__sfmoreglue+0x4c>
   24e8c:	11000304 	addi	r4,r2,12
   24e90:	10000015 	stw	zero,0(r2)
   24e94:	14800115 	stw	r18,4(r2)
   24e98:	11000215 	stw	r4,8(r2)
   24e9c:	89801a04 	addi	r6,r17,104
   24ea0:	000b883a 	mov	r5,zero
   24ea4:	00262d00 	call	262d0 <memset>
   24ea8:	8005883a 	mov	r2,r16
   24eac:	dfc00317 	ldw	ra,12(sp)
   24eb0:	dc800217 	ldw	r18,8(sp)
   24eb4:	dc400117 	ldw	r17,4(sp)
   24eb8:	dc000017 	ldw	r16,0(sp)
   24ebc:	dec00404 	addi	sp,sp,16
   24ec0:	f800283a 	ret

00024ec4 <__sfp>:
   24ec4:	defffb04 	addi	sp,sp,-20
   24ec8:	dc000015 	stw	r16,0(sp)
   24ecc:	040000f4 	movhi	r16,3
   24ed0:	84078a04 	addi	r16,r16,7720
   24ed4:	dcc00315 	stw	r19,12(sp)
   24ed8:	2027883a 	mov	r19,r4
   24edc:	81000017 	ldw	r4,0(r16)
   24ee0:	dfc00415 	stw	ra,16(sp)
   24ee4:	dc800215 	stw	r18,8(sp)
   24ee8:	20800e17 	ldw	r2,56(r4)
   24eec:	dc400115 	stw	r17,4(sp)
   24ef0:	1000021e 	bne	r2,zero,24efc <__sfp+0x38>
   24ef4:	0024cb80 	call	24cb8 <__sinit.part.1>
   24ef8:	81000017 	ldw	r4,0(r16)
   24efc:	2480b804 	addi	r18,r4,736
   24f00:	047fffc4 	movi	r17,-1
   24f04:	91000117 	ldw	r4,4(r18)
   24f08:	94000217 	ldw	r16,8(r18)
   24f0c:	213fffc4 	addi	r4,r4,-1
   24f10:	20000a16 	blt	r4,zero,24f3c <__sfp+0x78>
   24f14:	8080030f 	ldh	r2,12(r16)
   24f18:	10000c26 	beq	r2,zero,24f4c <__sfp+0x88>
   24f1c:	80c01d04 	addi	r3,r16,116
   24f20:	00000206 	br	24f2c <__sfp+0x68>
   24f24:	18bfe60f 	ldh	r2,-104(r3)
   24f28:	10000826 	beq	r2,zero,24f4c <__sfp+0x88>
   24f2c:	213fffc4 	addi	r4,r4,-1
   24f30:	1c3ffd04 	addi	r16,r3,-12
   24f34:	18c01a04 	addi	r3,r3,104
   24f38:	247ffa1e 	bne	r4,r17,24f24 <__alt_data_end+0xfffe4f24>
   24f3c:	90800017 	ldw	r2,0(r18)
   24f40:	10001d26 	beq	r2,zero,24fb8 <__sfp+0xf4>
   24f44:	1025883a 	mov	r18,r2
   24f48:	003fee06 	br	24f04 <__alt_data_end+0xfffe4f04>
   24f4c:	00bfffc4 	movi	r2,-1
   24f50:	8080038d 	sth	r2,14(r16)
   24f54:	00800044 	movi	r2,1
   24f58:	8080030d 	sth	r2,12(r16)
   24f5c:	80001915 	stw	zero,100(r16)
   24f60:	80000015 	stw	zero,0(r16)
   24f64:	80000215 	stw	zero,8(r16)
   24f68:	80000115 	stw	zero,4(r16)
   24f6c:	80000415 	stw	zero,16(r16)
   24f70:	80000515 	stw	zero,20(r16)
   24f74:	80000615 	stw	zero,24(r16)
   24f78:	01800204 	movi	r6,8
   24f7c:	000b883a 	mov	r5,zero
   24f80:	81001704 	addi	r4,r16,92
   24f84:	00262d00 	call	262d0 <memset>
   24f88:	8005883a 	mov	r2,r16
   24f8c:	80000c15 	stw	zero,48(r16)
   24f90:	80000d15 	stw	zero,52(r16)
   24f94:	80001115 	stw	zero,68(r16)
   24f98:	80001215 	stw	zero,72(r16)
   24f9c:	dfc00417 	ldw	ra,16(sp)
   24fa0:	dcc00317 	ldw	r19,12(sp)
   24fa4:	dc800217 	ldw	r18,8(sp)
   24fa8:	dc400117 	ldw	r17,4(sp)
   24fac:	dc000017 	ldw	r16,0(sp)
   24fb0:	dec00504 	addi	sp,sp,20
   24fb4:	f800283a 	ret
   24fb8:	01400104 	movi	r5,4
   24fbc:	9809883a 	mov	r4,r19
   24fc0:	0024e5c0 	call	24e5c <__sfmoreglue>
   24fc4:	90800015 	stw	r2,0(r18)
   24fc8:	103fde1e 	bne	r2,zero,24f44 <__alt_data_end+0xfffe4f44>
   24fcc:	00800304 	movi	r2,12
   24fd0:	98800015 	stw	r2,0(r19)
   24fd4:	0005883a 	mov	r2,zero
   24fd8:	003ff006 	br	24f9c <__alt_data_end+0xfffe4f9c>

00024fdc <_cleanup>:
   24fdc:	008000f4 	movhi	r2,3
   24fe0:	10878a04 	addi	r2,r2,7720
   24fe4:	11000017 	ldw	r4,0(r2)
   24fe8:	014000f4 	movhi	r5,3
   24fec:	2963cb04 	addi	r5,r5,-28884
   24ff0:	002553c1 	jmpi	2553c <_fwalk_reent>

00024ff4 <__sinit>:
   24ff4:	20800e17 	ldw	r2,56(r4)
   24ff8:	10000126 	beq	r2,zero,25000 <__sinit+0xc>
   24ffc:	f800283a 	ret
   25000:	0024cb81 	jmpi	24cb8 <__sinit.part.1>

00025004 <__sfp_lock_acquire>:
   25004:	f800283a 	ret

00025008 <__sfp_lock_release>:
   25008:	f800283a 	ret

0002500c <__sinit_lock_acquire>:
   2500c:	f800283a 	ret

00025010 <__sinit_lock_release>:
   25010:	f800283a 	ret

00025014 <__fp_lock_all>:
   25014:	008000f4 	movhi	r2,3
   25018:	10878b04 	addi	r2,r2,7724
   2501c:	11000017 	ldw	r4,0(r2)
   25020:	014000b4 	movhi	r5,2
   25024:	29539504 	addi	r5,r5,20052
   25028:	00254781 	jmpi	25478 <_fwalk>

0002502c <__fp_unlock_all>:
   2502c:	008000f4 	movhi	r2,3
   25030:	10878b04 	addi	r2,r2,7724
   25034:	11000017 	ldw	r4,0(r2)
   25038:	014000b4 	movhi	r5,2
   2503c:	29532904 	addi	r5,r5,19620
   25040:	00254781 	jmpi	25478 <_fwalk>

00025044 <_malloc_trim_r>:
   25044:	defffb04 	addi	sp,sp,-20
   25048:	dcc00315 	stw	r19,12(sp)
   2504c:	04c000f4 	movhi	r19,3
   25050:	dc800215 	stw	r18,8(sp)
   25054:	dc400115 	stw	r17,4(sp)
   25058:	dc000015 	stw	r16,0(sp)
   2505c:	dfc00415 	stw	ra,16(sp)
   25060:	2821883a 	mov	r16,r5
   25064:	9cc20604 	addi	r19,r19,2072
   25068:	2025883a 	mov	r18,r4
   2506c:	002db980 	call	2db98 <__malloc_lock>
   25070:	98800217 	ldw	r2,8(r19)
   25074:	14400117 	ldw	r17,4(r2)
   25078:	00bfff04 	movi	r2,-4
   2507c:	88a2703a 	and	r17,r17,r2
   25080:	8c21c83a 	sub	r16,r17,r16
   25084:	8403fbc4 	addi	r16,r16,4079
   25088:	8020d33a 	srli	r16,r16,12
   2508c:	0083ffc4 	movi	r2,4095
   25090:	843fffc4 	addi	r16,r16,-1
   25094:	8020933a 	slli	r16,r16,12
   25098:	1400060e 	bge	r2,r16,250b4 <_malloc_trim_r+0x70>
   2509c:	000b883a 	mov	r5,zero
   250a0:	9009883a 	mov	r4,r18
   250a4:	00274680 	call	27468 <_sbrk_r>
   250a8:	98c00217 	ldw	r3,8(r19)
   250ac:	1c47883a 	add	r3,r3,r17
   250b0:	10c00a26 	beq	r2,r3,250dc <_malloc_trim_r+0x98>
   250b4:	9009883a 	mov	r4,r18
   250b8:	002dbbc0 	call	2dbbc <__malloc_unlock>
   250bc:	0005883a 	mov	r2,zero
   250c0:	dfc00417 	ldw	ra,16(sp)
   250c4:	dcc00317 	ldw	r19,12(sp)
   250c8:	dc800217 	ldw	r18,8(sp)
   250cc:	dc400117 	ldw	r17,4(sp)
   250d0:	dc000017 	ldw	r16,0(sp)
   250d4:	dec00504 	addi	sp,sp,20
   250d8:	f800283a 	ret
   250dc:	040bc83a 	sub	r5,zero,r16
   250e0:	9009883a 	mov	r4,r18
   250e4:	00274680 	call	27468 <_sbrk_r>
   250e8:	00ffffc4 	movi	r3,-1
   250ec:	10c00d26 	beq	r2,r3,25124 <_malloc_trim_r+0xe0>
   250f0:	00c000f4 	movhi	r3,3
   250f4:	18ce6604 	addi	r3,r3,14744
   250f8:	18800017 	ldw	r2,0(r3)
   250fc:	99000217 	ldw	r4,8(r19)
   25100:	8c23c83a 	sub	r17,r17,r16
   25104:	8c400054 	ori	r17,r17,1
   25108:	1421c83a 	sub	r16,r2,r16
   2510c:	24400115 	stw	r17,4(r4)
   25110:	9009883a 	mov	r4,r18
   25114:	1c000015 	stw	r16,0(r3)
   25118:	002dbbc0 	call	2dbbc <__malloc_unlock>
   2511c:	00800044 	movi	r2,1
   25120:	003fe706 	br	250c0 <__alt_data_end+0xfffe50c0>
   25124:	000b883a 	mov	r5,zero
   25128:	9009883a 	mov	r4,r18
   2512c:	00274680 	call	27468 <_sbrk_r>
   25130:	99000217 	ldw	r4,8(r19)
   25134:	014003c4 	movi	r5,15
   25138:	1107c83a 	sub	r3,r2,r4
   2513c:	28ffdd0e 	bge	r5,r3,250b4 <__alt_data_end+0xfffe50b4>
   25140:	014000f4 	movhi	r5,3
   25144:	29478d04 	addi	r5,r5,7732
   25148:	29400017 	ldw	r5,0(r5)
   2514c:	18c00054 	ori	r3,r3,1
   25150:	20c00115 	stw	r3,4(r4)
   25154:	00c000f4 	movhi	r3,3
   25158:	1145c83a 	sub	r2,r2,r5
   2515c:	18ce6604 	addi	r3,r3,14744
   25160:	18800015 	stw	r2,0(r3)
   25164:	003fd306 	br	250b4 <__alt_data_end+0xfffe50b4>

00025168 <_free_r>:
   25168:	28004126 	beq	r5,zero,25270 <_free_r+0x108>
   2516c:	defffd04 	addi	sp,sp,-12
   25170:	dc400115 	stw	r17,4(sp)
   25174:	dc000015 	stw	r16,0(sp)
   25178:	2023883a 	mov	r17,r4
   2517c:	2821883a 	mov	r16,r5
   25180:	dfc00215 	stw	ra,8(sp)
   25184:	002db980 	call	2db98 <__malloc_lock>
   25188:	81ffff17 	ldw	r7,-4(r16)
   2518c:	00bfff84 	movi	r2,-2
   25190:	010000f4 	movhi	r4,3
   25194:	81bffe04 	addi	r6,r16,-8
   25198:	3884703a 	and	r2,r7,r2
   2519c:	21020604 	addi	r4,r4,2072
   251a0:	308b883a 	add	r5,r6,r2
   251a4:	2a400117 	ldw	r9,4(r5)
   251a8:	22000217 	ldw	r8,8(r4)
   251ac:	00ffff04 	movi	r3,-4
   251b0:	48c6703a 	and	r3,r9,r3
   251b4:	2a005726 	beq	r5,r8,25314 <_free_r+0x1ac>
   251b8:	28c00115 	stw	r3,4(r5)
   251bc:	39c0004c 	andi	r7,r7,1
   251c0:	3800091e 	bne	r7,zero,251e8 <_free_r+0x80>
   251c4:	823ffe17 	ldw	r8,-8(r16)
   251c8:	22400204 	addi	r9,r4,8
   251cc:	320dc83a 	sub	r6,r6,r8
   251d0:	31c00217 	ldw	r7,8(r6)
   251d4:	1205883a 	add	r2,r2,r8
   251d8:	3a406526 	beq	r7,r9,25370 <_free_r+0x208>
   251dc:	32000317 	ldw	r8,12(r6)
   251e0:	3a000315 	stw	r8,12(r7)
   251e4:	41c00215 	stw	r7,8(r8)
   251e8:	28cf883a 	add	r7,r5,r3
   251ec:	39c00117 	ldw	r7,4(r7)
   251f0:	39c0004c 	andi	r7,r7,1
   251f4:	38003a26 	beq	r7,zero,252e0 <_free_r+0x178>
   251f8:	10c00054 	ori	r3,r2,1
   251fc:	30c00115 	stw	r3,4(r6)
   25200:	3087883a 	add	r3,r6,r2
   25204:	18800015 	stw	r2,0(r3)
   25208:	00c07fc4 	movi	r3,511
   2520c:	18801936 	bltu	r3,r2,25274 <_free_r+0x10c>
   25210:	1004d0fa 	srli	r2,r2,3
   25214:	01c00044 	movi	r7,1
   25218:	21400117 	ldw	r5,4(r4)
   2521c:	10c00044 	addi	r3,r2,1
   25220:	18c7883a 	add	r3,r3,r3
   25224:	1005d0ba 	srai	r2,r2,2
   25228:	18c7883a 	add	r3,r3,r3
   2522c:	18c7883a 	add	r3,r3,r3
   25230:	1907883a 	add	r3,r3,r4
   25234:	3884983a 	sll	r2,r7,r2
   25238:	19c00017 	ldw	r7,0(r3)
   2523c:	1a3ffe04 	addi	r8,r3,-8
   25240:	1144b03a 	or	r2,r2,r5
   25244:	32000315 	stw	r8,12(r6)
   25248:	31c00215 	stw	r7,8(r6)
   2524c:	20800115 	stw	r2,4(r4)
   25250:	19800015 	stw	r6,0(r3)
   25254:	39800315 	stw	r6,12(r7)
   25258:	8809883a 	mov	r4,r17
   2525c:	dfc00217 	ldw	ra,8(sp)
   25260:	dc400117 	ldw	r17,4(sp)
   25264:	dc000017 	ldw	r16,0(sp)
   25268:	dec00304 	addi	sp,sp,12
   2526c:	002dbbc1 	jmpi	2dbbc <__malloc_unlock>
   25270:	f800283a 	ret
   25274:	100ad27a 	srli	r5,r2,9
   25278:	00c00104 	movi	r3,4
   2527c:	19404a36 	bltu	r3,r5,253a8 <_free_r+0x240>
   25280:	100ad1ba 	srli	r5,r2,6
   25284:	28c00e44 	addi	r3,r5,57
   25288:	18c7883a 	add	r3,r3,r3
   2528c:	29400e04 	addi	r5,r5,56
   25290:	18c7883a 	add	r3,r3,r3
   25294:	18c7883a 	add	r3,r3,r3
   25298:	1909883a 	add	r4,r3,r4
   2529c:	20c00017 	ldw	r3,0(r4)
   252a0:	01c000f4 	movhi	r7,3
   252a4:	213ffe04 	addi	r4,r4,-8
   252a8:	39c20604 	addi	r7,r7,2072
   252ac:	20c04426 	beq	r4,r3,253c0 <_free_r+0x258>
   252b0:	01ffff04 	movi	r7,-4
   252b4:	19400117 	ldw	r5,4(r3)
   252b8:	29ca703a 	and	r5,r5,r7
   252bc:	1140022e 	bgeu	r2,r5,252c8 <_free_r+0x160>
   252c0:	18c00217 	ldw	r3,8(r3)
   252c4:	20fffb1e 	bne	r4,r3,252b4 <__alt_data_end+0xfffe52b4>
   252c8:	19000317 	ldw	r4,12(r3)
   252cc:	31000315 	stw	r4,12(r6)
   252d0:	30c00215 	stw	r3,8(r6)
   252d4:	21800215 	stw	r6,8(r4)
   252d8:	19800315 	stw	r6,12(r3)
   252dc:	003fde06 	br	25258 <__alt_data_end+0xfffe5258>
   252e0:	29c00217 	ldw	r7,8(r5)
   252e4:	10c5883a 	add	r2,r2,r3
   252e8:	00c000f4 	movhi	r3,3
   252ec:	18c20804 	addi	r3,r3,2080
   252f0:	38c03b26 	beq	r7,r3,253e0 <_free_r+0x278>
   252f4:	2a000317 	ldw	r8,12(r5)
   252f8:	11400054 	ori	r5,r2,1
   252fc:	3087883a 	add	r3,r6,r2
   25300:	3a000315 	stw	r8,12(r7)
   25304:	41c00215 	stw	r7,8(r8)
   25308:	31400115 	stw	r5,4(r6)
   2530c:	18800015 	stw	r2,0(r3)
   25310:	003fbd06 	br	25208 <__alt_data_end+0xfffe5208>
   25314:	39c0004c 	andi	r7,r7,1
   25318:	10c5883a 	add	r2,r2,r3
   2531c:	3800071e 	bne	r7,zero,2533c <_free_r+0x1d4>
   25320:	81fffe17 	ldw	r7,-8(r16)
   25324:	31cdc83a 	sub	r6,r6,r7
   25328:	30c00317 	ldw	r3,12(r6)
   2532c:	31400217 	ldw	r5,8(r6)
   25330:	11c5883a 	add	r2,r2,r7
   25334:	28c00315 	stw	r3,12(r5)
   25338:	19400215 	stw	r5,8(r3)
   2533c:	10c00054 	ori	r3,r2,1
   25340:	30c00115 	stw	r3,4(r6)
   25344:	00c000f4 	movhi	r3,3
   25348:	18c78e04 	addi	r3,r3,7736
   2534c:	18c00017 	ldw	r3,0(r3)
   25350:	21800215 	stw	r6,8(r4)
   25354:	10ffc036 	bltu	r2,r3,25258 <__alt_data_end+0xfffe5258>
   25358:	008000f4 	movhi	r2,3
   2535c:	108e5d04 	addi	r2,r2,14708
   25360:	11400017 	ldw	r5,0(r2)
   25364:	8809883a 	mov	r4,r17
   25368:	00250440 	call	25044 <_malloc_trim_r>
   2536c:	003fba06 	br	25258 <__alt_data_end+0xfffe5258>
   25370:	28c9883a 	add	r4,r5,r3
   25374:	21000117 	ldw	r4,4(r4)
   25378:	2100004c 	andi	r4,r4,1
   2537c:	2000391e 	bne	r4,zero,25464 <_free_r+0x2fc>
   25380:	29c00217 	ldw	r7,8(r5)
   25384:	29000317 	ldw	r4,12(r5)
   25388:	1885883a 	add	r2,r3,r2
   2538c:	10c00054 	ori	r3,r2,1
   25390:	39000315 	stw	r4,12(r7)
   25394:	21c00215 	stw	r7,8(r4)
   25398:	30c00115 	stw	r3,4(r6)
   2539c:	308d883a 	add	r6,r6,r2
   253a0:	30800015 	stw	r2,0(r6)
   253a4:	003fac06 	br	25258 <__alt_data_end+0xfffe5258>
   253a8:	00c00504 	movi	r3,20
   253ac:	19401536 	bltu	r3,r5,25404 <_free_r+0x29c>
   253b0:	28c01704 	addi	r3,r5,92
   253b4:	18c7883a 	add	r3,r3,r3
   253b8:	294016c4 	addi	r5,r5,91
   253bc:	003fb406 	br	25290 <__alt_data_end+0xfffe5290>
   253c0:	280bd0ba 	srai	r5,r5,2
   253c4:	00c00044 	movi	r3,1
   253c8:	38800117 	ldw	r2,4(r7)
   253cc:	194a983a 	sll	r5,r3,r5
   253d0:	2007883a 	mov	r3,r4
   253d4:	2884b03a 	or	r2,r5,r2
   253d8:	38800115 	stw	r2,4(r7)
   253dc:	003fbb06 	br	252cc <__alt_data_end+0xfffe52cc>
   253e0:	21800515 	stw	r6,20(r4)
   253e4:	21800415 	stw	r6,16(r4)
   253e8:	10c00054 	ori	r3,r2,1
   253ec:	31c00315 	stw	r7,12(r6)
   253f0:	31c00215 	stw	r7,8(r6)
   253f4:	30c00115 	stw	r3,4(r6)
   253f8:	308d883a 	add	r6,r6,r2
   253fc:	30800015 	stw	r2,0(r6)
   25400:	003f9506 	br	25258 <__alt_data_end+0xfffe5258>
   25404:	00c01504 	movi	r3,84
   25408:	19400536 	bltu	r3,r5,25420 <_free_r+0x2b8>
   2540c:	100ad33a 	srli	r5,r2,12
   25410:	28c01bc4 	addi	r3,r5,111
   25414:	18c7883a 	add	r3,r3,r3
   25418:	29401b84 	addi	r5,r5,110
   2541c:	003f9c06 	br	25290 <__alt_data_end+0xfffe5290>
   25420:	00c05504 	movi	r3,340
   25424:	19400536 	bltu	r3,r5,2543c <_free_r+0x2d4>
   25428:	100ad3fa 	srli	r5,r2,15
   2542c:	28c01e04 	addi	r3,r5,120
   25430:	18c7883a 	add	r3,r3,r3
   25434:	29401dc4 	addi	r5,r5,119
   25438:	003f9506 	br	25290 <__alt_data_end+0xfffe5290>
   2543c:	00c15504 	movi	r3,1364
   25440:	19400536 	bltu	r3,r5,25458 <_free_r+0x2f0>
   25444:	100ad4ba 	srli	r5,r2,18
   25448:	28c01f44 	addi	r3,r5,125
   2544c:	18c7883a 	add	r3,r3,r3
   25450:	29401f04 	addi	r5,r5,124
   25454:	003f8e06 	br	25290 <__alt_data_end+0xfffe5290>
   25458:	00c03f84 	movi	r3,254
   2545c:	01401f84 	movi	r5,126
   25460:	003f8b06 	br	25290 <__alt_data_end+0xfffe5290>
   25464:	10c00054 	ori	r3,r2,1
   25468:	30c00115 	stw	r3,4(r6)
   2546c:	308d883a 	add	r6,r6,r2
   25470:	30800015 	stw	r2,0(r6)
   25474:	003f7806 	br	25258 <__alt_data_end+0xfffe5258>

00025478 <_fwalk>:
   25478:	defff704 	addi	sp,sp,-36
   2547c:	dd000415 	stw	r20,16(sp)
   25480:	dfc00815 	stw	ra,32(sp)
   25484:	ddc00715 	stw	r23,28(sp)
   25488:	dd800615 	stw	r22,24(sp)
   2548c:	dd400515 	stw	r21,20(sp)
   25490:	dcc00315 	stw	r19,12(sp)
   25494:	dc800215 	stw	r18,8(sp)
   25498:	dc400115 	stw	r17,4(sp)
   2549c:	dc000015 	stw	r16,0(sp)
   254a0:	2500b804 	addi	r20,r4,736
   254a4:	a0002326 	beq	r20,zero,25534 <_fwalk+0xbc>
   254a8:	282b883a 	mov	r21,r5
   254ac:	002f883a 	mov	r23,zero
   254b0:	05800044 	movi	r22,1
   254b4:	04ffffc4 	movi	r19,-1
   254b8:	a4400117 	ldw	r17,4(r20)
   254bc:	a4800217 	ldw	r18,8(r20)
   254c0:	8c7fffc4 	addi	r17,r17,-1
   254c4:	88000d16 	blt	r17,zero,254fc <_fwalk+0x84>
   254c8:	94000304 	addi	r16,r18,12
   254cc:	94800384 	addi	r18,r18,14
   254d0:	8080000b 	ldhu	r2,0(r16)
   254d4:	8c7fffc4 	addi	r17,r17,-1
   254d8:	813ffd04 	addi	r4,r16,-12
   254dc:	b080042e 	bgeu	r22,r2,254f0 <_fwalk+0x78>
   254e0:	9080000f 	ldh	r2,0(r18)
   254e4:	14c00226 	beq	r2,r19,254f0 <_fwalk+0x78>
   254e8:	a83ee83a 	callr	r21
   254ec:	b8aeb03a 	or	r23,r23,r2
   254f0:	84001a04 	addi	r16,r16,104
   254f4:	94801a04 	addi	r18,r18,104
   254f8:	8cfff51e 	bne	r17,r19,254d0 <__alt_data_end+0xfffe54d0>
   254fc:	a5000017 	ldw	r20,0(r20)
   25500:	a03fed1e 	bne	r20,zero,254b8 <__alt_data_end+0xfffe54b8>
   25504:	b805883a 	mov	r2,r23
   25508:	dfc00817 	ldw	ra,32(sp)
   2550c:	ddc00717 	ldw	r23,28(sp)
   25510:	dd800617 	ldw	r22,24(sp)
   25514:	dd400517 	ldw	r21,20(sp)
   25518:	dd000417 	ldw	r20,16(sp)
   2551c:	dcc00317 	ldw	r19,12(sp)
   25520:	dc800217 	ldw	r18,8(sp)
   25524:	dc400117 	ldw	r17,4(sp)
   25528:	dc000017 	ldw	r16,0(sp)
   2552c:	dec00904 	addi	sp,sp,36
   25530:	f800283a 	ret
   25534:	002f883a 	mov	r23,zero
   25538:	003ff206 	br	25504 <__alt_data_end+0xfffe5504>

0002553c <_fwalk_reent>:
   2553c:	defff704 	addi	sp,sp,-36
   25540:	dd000415 	stw	r20,16(sp)
   25544:	dfc00815 	stw	ra,32(sp)
   25548:	ddc00715 	stw	r23,28(sp)
   2554c:	dd800615 	stw	r22,24(sp)
   25550:	dd400515 	stw	r21,20(sp)
   25554:	dcc00315 	stw	r19,12(sp)
   25558:	dc800215 	stw	r18,8(sp)
   2555c:	dc400115 	stw	r17,4(sp)
   25560:	dc000015 	stw	r16,0(sp)
   25564:	2500b804 	addi	r20,r4,736
   25568:	a0002326 	beq	r20,zero,255f8 <_fwalk_reent+0xbc>
   2556c:	282b883a 	mov	r21,r5
   25570:	2027883a 	mov	r19,r4
   25574:	002f883a 	mov	r23,zero
   25578:	05800044 	movi	r22,1
   2557c:	04bfffc4 	movi	r18,-1
   25580:	a4400117 	ldw	r17,4(r20)
   25584:	a4000217 	ldw	r16,8(r20)
   25588:	8c7fffc4 	addi	r17,r17,-1
   2558c:	88000c16 	blt	r17,zero,255c0 <_fwalk_reent+0x84>
   25590:	84000304 	addi	r16,r16,12
   25594:	8080000b 	ldhu	r2,0(r16)
   25598:	8c7fffc4 	addi	r17,r17,-1
   2559c:	817ffd04 	addi	r5,r16,-12
   255a0:	b080052e 	bgeu	r22,r2,255b8 <_fwalk_reent+0x7c>
   255a4:	8080008f 	ldh	r2,2(r16)
   255a8:	9809883a 	mov	r4,r19
   255ac:	14800226 	beq	r2,r18,255b8 <_fwalk_reent+0x7c>
   255b0:	a83ee83a 	callr	r21
   255b4:	b8aeb03a 	or	r23,r23,r2
   255b8:	84001a04 	addi	r16,r16,104
   255bc:	8cbff51e 	bne	r17,r18,25594 <__alt_data_end+0xfffe5594>
   255c0:	a5000017 	ldw	r20,0(r20)
   255c4:	a03fee1e 	bne	r20,zero,25580 <__alt_data_end+0xfffe5580>
   255c8:	b805883a 	mov	r2,r23
   255cc:	dfc00817 	ldw	ra,32(sp)
   255d0:	ddc00717 	ldw	r23,28(sp)
   255d4:	dd800617 	ldw	r22,24(sp)
   255d8:	dd400517 	ldw	r21,20(sp)
   255dc:	dd000417 	ldw	r20,16(sp)
   255e0:	dcc00317 	ldw	r19,12(sp)
   255e4:	dc800217 	ldw	r18,8(sp)
   255e8:	dc400117 	ldw	r17,4(sp)
   255ec:	dc000017 	ldw	r16,0(sp)
   255f0:	dec00904 	addi	sp,sp,36
   255f4:	f800283a 	ret
   255f8:	002f883a 	mov	r23,zero
   255fc:	003ff206 	br	255c8 <__alt_data_end+0xfffe55c8>

00025600 <_setlocale_r>:
   25600:	30001b26 	beq	r6,zero,25670 <_setlocale_r+0x70>
   25604:	014000f4 	movhi	r5,3
   25608:	defffe04 	addi	sp,sp,-8
   2560c:	29403e04 	addi	r5,r5,248
   25610:	3009883a 	mov	r4,r6
   25614:	dc000015 	stw	r16,0(sp)
   25618:	dfc00115 	stw	ra,4(sp)
   2561c:	3021883a 	mov	r16,r6
   25620:	00275f80 	call	275f8 <strcmp>
   25624:	1000061e 	bne	r2,zero,25640 <_setlocale_r+0x40>
   25628:	008000f4 	movhi	r2,3
   2562c:	10803d04 	addi	r2,r2,244
   25630:	dfc00117 	ldw	ra,4(sp)
   25634:	dc000017 	ldw	r16,0(sp)
   25638:	dec00204 	addi	sp,sp,8
   2563c:	f800283a 	ret
   25640:	014000f4 	movhi	r5,3
   25644:	29403d04 	addi	r5,r5,244
   25648:	8009883a 	mov	r4,r16
   2564c:	00275f80 	call	275f8 <strcmp>
   25650:	103ff526 	beq	r2,zero,25628 <__alt_data_end+0xfffe5628>
   25654:	014000f4 	movhi	r5,3
   25658:	29402804 	addi	r5,r5,160
   2565c:	8009883a 	mov	r4,r16
   25660:	00275f80 	call	275f8 <strcmp>
   25664:	103ff026 	beq	r2,zero,25628 <__alt_data_end+0xfffe5628>
   25668:	0005883a 	mov	r2,zero
   2566c:	003ff006 	br	25630 <__alt_data_end+0xfffe5630>
   25670:	008000f4 	movhi	r2,3
   25674:	10803d04 	addi	r2,r2,244
   25678:	f800283a 	ret

0002567c <__locale_charset>:
   2567c:	008000f4 	movhi	r2,3
   25680:	1081f004 	addi	r2,r2,1984
   25684:	f800283a 	ret

00025688 <__locale_mb_cur_max>:
   25688:	008000f4 	movhi	r2,3
   2568c:	10878c04 	addi	r2,r2,7728
   25690:	10800017 	ldw	r2,0(r2)
   25694:	f800283a 	ret

00025698 <__locale_msgcharset>:
   25698:	008000f4 	movhi	r2,3
   2569c:	1081e804 	addi	r2,r2,1952
   256a0:	f800283a 	ret

000256a4 <__locale_cjk_lang>:
   256a4:	0005883a 	mov	r2,zero
   256a8:	f800283a 	ret

000256ac <_localeconv_r>:
   256ac:	008000f4 	movhi	r2,3
   256b0:	1081f804 	addi	r2,r2,2016
   256b4:	f800283a 	ret

000256b8 <setlocale>:
   256b8:	008000f4 	movhi	r2,3
   256bc:	10878b04 	addi	r2,r2,7724
   256c0:	280d883a 	mov	r6,r5
   256c4:	200b883a 	mov	r5,r4
   256c8:	11000017 	ldw	r4,0(r2)
   256cc:	00256001 	jmpi	25600 <_setlocale_r>

000256d0 <localeconv>:
   256d0:	008000f4 	movhi	r2,3
   256d4:	1081f804 	addi	r2,r2,2016
   256d8:	f800283a 	ret

000256dc <__smakebuf_r>:
   256dc:	2880030b 	ldhu	r2,12(r5)
   256e0:	10c0008c 	andi	r3,r2,2
   256e4:	1800411e 	bne	r3,zero,257ec <__smakebuf_r+0x110>
   256e8:	deffec04 	addi	sp,sp,-80
   256ec:	dc000f15 	stw	r16,60(sp)
   256f0:	2821883a 	mov	r16,r5
   256f4:	2940038f 	ldh	r5,14(r5)
   256f8:	dc401015 	stw	r17,64(sp)
   256fc:	dfc01315 	stw	ra,76(sp)
   25700:	dcc01215 	stw	r19,72(sp)
   25704:	dc801115 	stw	r18,68(sp)
   25708:	2023883a 	mov	r17,r4
   2570c:	28001c16 	blt	r5,zero,25780 <__smakebuf_r+0xa4>
   25710:	d80d883a 	mov	r6,sp
   25714:	00292380 	call	29238 <_fstat_r>
   25718:	10001816 	blt	r2,zero,2577c <__smakebuf_r+0xa0>
   2571c:	d8800117 	ldw	r2,4(sp)
   25720:	00e00014 	movui	r3,32768
   25724:	10bc000c 	andi	r2,r2,61440
   25728:	14c80020 	cmpeqi	r19,r2,8192
   2572c:	10c03726 	beq	r2,r3,2580c <__smakebuf_r+0x130>
   25730:	80c0030b 	ldhu	r3,12(r16)
   25734:	18c20014 	ori	r3,r3,2048
   25738:	80c0030d 	sth	r3,12(r16)
   2573c:	00c80004 	movi	r3,8192
   25740:	10c0521e 	bne	r2,r3,2588c <__smakebuf_r+0x1b0>
   25744:	8140038f 	ldh	r5,14(r16)
   25748:	8809883a 	mov	r4,r17
   2574c:	00297500 	call	29750 <_isatty_r>
   25750:	10004c26 	beq	r2,zero,25884 <__smakebuf_r+0x1a8>
   25754:	8080030b 	ldhu	r2,12(r16)
   25758:	80c010c4 	addi	r3,r16,67
   2575c:	80c00015 	stw	r3,0(r16)
   25760:	10800054 	ori	r2,r2,1
   25764:	8080030d 	sth	r2,12(r16)
   25768:	00800044 	movi	r2,1
   2576c:	80c00415 	stw	r3,16(r16)
   25770:	80800515 	stw	r2,20(r16)
   25774:	04810004 	movi	r18,1024
   25778:	00000706 	br	25798 <__smakebuf_r+0xbc>
   2577c:	8080030b 	ldhu	r2,12(r16)
   25780:	10c0200c 	andi	r3,r2,128
   25784:	18001f1e 	bne	r3,zero,25804 <__smakebuf_r+0x128>
   25788:	04810004 	movi	r18,1024
   2578c:	10820014 	ori	r2,r2,2048
   25790:	8080030d 	sth	r2,12(r16)
   25794:	0027883a 	mov	r19,zero
   25798:	900b883a 	mov	r5,r18
   2579c:	8809883a 	mov	r4,r17
   257a0:	00258980 	call	25898 <_malloc_r>
   257a4:	10002c26 	beq	r2,zero,25858 <__smakebuf_r+0x17c>
   257a8:	80c0030b 	ldhu	r3,12(r16)
   257ac:	010000b4 	movhi	r4,2
   257b0:	21132b04 	addi	r4,r4,19628
   257b4:	89000f15 	stw	r4,60(r17)
   257b8:	18c02014 	ori	r3,r3,128
   257bc:	80c0030d 	sth	r3,12(r16)
   257c0:	80800015 	stw	r2,0(r16)
   257c4:	80800415 	stw	r2,16(r16)
   257c8:	84800515 	stw	r18,20(r16)
   257cc:	98001a1e 	bne	r19,zero,25838 <__smakebuf_r+0x15c>
   257d0:	dfc01317 	ldw	ra,76(sp)
   257d4:	dcc01217 	ldw	r19,72(sp)
   257d8:	dc801117 	ldw	r18,68(sp)
   257dc:	dc401017 	ldw	r17,64(sp)
   257e0:	dc000f17 	ldw	r16,60(sp)
   257e4:	dec01404 	addi	sp,sp,80
   257e8:	f800283a 	ret
   257ec:	288010c4 	addi	r2,r5,67
   257f0:	28800015 	stw	r2,0(r5)
   257f4:	28800415 	stw	r2,16(r5)
   257f8:	00800044 	movi	r2,1
   257fc:	28800515 	stw	r2,20(r5)
   25800:	f800283a 	ret
   25804:	04801004 	movi	r18,64
   25808:	003fe006 	br	2578c <__alt_data_end+0xfffe578c>
   2580c:	81000a17 	ldw	r4,40(r16)
   25810:	00c000b4 	movhi	r3,2
   25814:	18dd6504 	addi	r3,r3,30100
   25818:	20ffc51e 	bne	r4,r3,25730 <__alt_data_end+0xfffe5730>
   2581c:	8080030b 	ldhu	r2,12(r16)
   25820:	04810004 	movi	r18,1024
   25824:	84801315 	stw	r18,76(r16)
   25828:	1484b03a 	or	r2,r2,r18
   2582c:	8080030d 	sth	r2,12(r16)
   25830:	0027883a 	mov	r19,zero
   25834:	003fd806 	br	25798 <__alt_data_end+0xfffe5798>
   25838:	8140038f 	ldh	r5,14(r16)
   2583c:	8809883a 	mov	r4,r17
   25840:	00297500 	call	29750 <_isatty_r>
   25844:	103fe226 	beq	r2,zero,257d0 <__alt_data_end+0xfffe57d0>
   25848:	8080030b 	ldhu	r2,12(r16)
   2584c:	10800054 	ori	r2,r2,1
   25850:	8080030d 	sth	r2,12(r16)
   25854:	003fde06 	br	257d0 <__alt_data_end+0xfffe57d0>
   25858:	8080030b 	ldhu	r2,12(r16)
   2585c:	10c0800c 	andi	r3,r2,512
   25860:	183fdb1e 	bne	r3,zero,257d0 <__alt_data_end+0xfffe57d0>
   25864:	10800094 	ori	r2,r2,2
   25868:	80c010c4 	addi	r3,r16,67
   2586c:	8080030d 	sth	r2,12(r16)
   25870:	00800044 	movi	r2,1
   25874:	80c00015 	stw	r3,0(r16)
   25878:	80c00415 	stw	r3,16(r16)
   2587c:	80800515 	stw	r2,20(r16)
   25880:	003fd306 	br	257d0 <__alt_data_end+0xfffe57d0>
   25884:	04810004 	movi	r18,1024
   25888:	003fc306 	br	25798 <__alt_data_end+0xfffe5798>
   2588c:	0027883a 	mov	r19,zero
   25890:	04810004 	movi	r18,1024
   25894:	003fc006 	br	25798 <__alt_data_end+0xfffe5798>

00025898 <_malloc_r>:
   25898:	defff504 	addi	sp,sp,-44
   2589c:	dc800315 	stw	r18,12(sp)
   258a0:	dfc00a15 	stw	ra,40(sp)
   258a4:	df000915 	stw	fp,36(sp)
   258a8:	ddc00815 	stw	r23,32(sp)
   258ac:	dd800715 	stw	r22,28(sp)
   258b0:	dd400615 	stw	r21,24(sp)
   258b4:	dd000515 	stw	r20,20(sp)
   258b8:	dcc00415 	stw	r19,16(sp)
   258bc:	dc400215 	stw	r17,8(sp)
   258c0:	dc000115 	stw	r16,4(sp)
   258c4:	288002c4 	addi	r2,r5,11
   258c8:	00c00584 	movi	r3,22
   258cc:	2025883a 	mov	r18,r4
   258d0:	18807f2e 	bgeu	r3,r2,25ad0 <_malloc_r+0x238>
   258d4:	047ffe04 	movi	r17,-8
   258d8:	1462703a 	and	r17,r2,r17
   258dc:	8800a316 	blt	r17,zero,25b6c <_malloc_r+0x2d4>
   258e0:	8940a236 	bltu	r17,r5,25b6c <_malloc_r+0x2d4>
   258e4:	002db980 	call	2db98 <__malloc_lock>
   258e8:	00807dc4 	movi	r2,503
   258ec:	1441e92e 	bgeu	r2,r17,26094 <_malloc_r+0x7fc>
   258f0:	8804d27a 	srli	r2,r17,9
   258f4:	1000a126 	beq	r2,zero,25b7c <_malloc_r+0x2e4>
   258f8:	00c00104 	movi	r3,4
   258fc:	18811e36 	bltu	r3,r2,25d78 <_malloc_r+0x4e0>
   25900:	8804d1ba 	srli	r2,r17,6
   25904:	12000e44 	addi	r8,r2,57
   25908:	11c00e04 	addi	r7,r2,56
   2590c:	4209883a 	add	r4,r8,r8
   25910:	04c000f4 	movhi	r19,3
   25914:	2109883a 	add	r4,r4,r4
   25918:	9cc20604 	addi	r19,r19,2072
   2591c:	2109883a 	add	r4,r4,r4
   25920:	9909883a 	add	r4,r19,r4
   25924:	24000117 	ldw	r16,4(r4)
   25928:	213ffe04 	addi	r4,r4,-8
   2592c:	24009726 	beq	r4,r16,25b8c <_malloc_r+0x2f4>
   25930:	80800117 	ldw	r2,4(r16)
   25934:	01bfff04 	movi	r6,-4
   25938:	014003c4 	movi	r5,15
   2593c:	1184703a 	and	r2,r2,r6
   25940:	1447c83a 	sub	r3,r2,r17
   25944:	28c00716 	blt	r5,r3,25964 <_malloc_r+0xcc>
   25948:	1800920e 	bge	r3,zero,25b94 <_malloc_r+0x2fc>
   2594c:	84000317 	ldw	r16,12(r16)
   25950:	24008e26 	beq	r4,r16,25b8c <_malloc_r+0x2f4>
   25954:	80800117 	ldw	r2,4(r16)
   25958:	1184703a 	and	r2,r2,r6
   2595c:	1447c83a 	sub	r3,r2,r17
   25960:	28fff90e 	bge	r5,r3,25948 <__alt_data_end+0xfffe5948>
   25964:	3809883a 	mov	r4,r7
   25968:	018000f4 	movhi	r6,3
   2596c:	9c000417 	ldw	r16,16(r19)
   25970:	31820604 	addi	r6,r6,2072
   25974:	32000204 	addi	r8,r6,8
   25978:	82013426 	beq	r16,r8,25e4c <_malloc_r+0x5b4>
   2597c:	80c00117 	ldw	r3,4(r16)
   25980:	00bfff04 	movi	r2,-4
   25984:	188e703a 	and	r7,r3,r2
   25988:	3c45c83a 	sub	r2,r7,r17
   2598c:	00c003c4 	movi	r3,15
   25990:	18811f16 	blt	r3,r2,25e10 <_malloc_r+0x578>
   25994:	32000515 	stw	r8,20(r6)
   25998:	32000415 	stw	r8,16(r6)
   2599c:	10007f0e 	bge	r2,zero,25b9c <_malloc_r+0x304>
   259a0:	00807fc4 	movi	r2,511
   259a4:	11c0fd36 	bltu	r2,r7,25d9c <_malloc_r+0x504>
   259a8:	3806d0fa 	srli	r3,r7,3
   259ac:	01c00044 	movi	r7,1
   259b0:	30800117 	ldw	r2,4(r6)
   259b4:	19400044 	addi	r5,r3,1
   259b8:	294b883a 	add	r5,r5,r5
   259bc:	1807d0ba 	srai	r3,r3,2
   259c0:	294b883a 	add	r5,r5,r5
   259c4:	294b883a 	add	r5,r5,r5
   259c8:	298b883a 	add	r5,r5,r6
   259cc:	38c6983a 	sll	r3,r7,r3
   259d0:	29c00017 	ldw	r7,0(r5)
   259d4:	2a7ffe04 	addi	r9,r5,-8
   259d8:	1886b03a 	or	r3,r3,r2
   259dc:	82400315 	stw	r9,12(r16)
   259e0:	81c00215 	stw	r7,8(r16)
   259e4:	30c00115 	stw	r3,4(r6)
   259e8:	2c000015 	stw	r16,0(r5)
   259ec:	3c000315 	stw	r16,12(r7)
   259f0:	2005d0ba 	srai	r2,r4,2
   259f4:	01400044 	movi	r5,1
   259f8:	288a983a 	sll	r5,r5,r2
   259fc:	19406f36 	bltu	r3,r5,25bbc <_malloc_r+0x324>
   25a00:	28c4703a 	and	r2,r5,r3
   25a04:	10000a1e 	bne	r2,zero,25a30 <_malloc_r+0x198>
   25a08:	00bfff04 	movi	r2,-4
   25a0c:	294b883a 	add	r5,r5,r5
   25a10:	2088703a 	and	r4,r4,r2
   25a14:	28c4703a 	and	r2,r5,r3
   25a18:	21000104 	addi	r4,r4,4
   25a1c:	1000041e 	bne	r2,zero,25a30 <_malloc_r+0x198>
   25a20:	294b883a 	add	r5,r5,r5
   25a24:	28c4703a 	and	r2,r5,r3
   25a28:	21000104 	addi	r4,r4,4
   25a2c:	103ffc26 	beq	r2,zero,25a20 <__alt_data_end+0xfffe5a20>
   25a30:	02bfff04 	movi	r10,-4
   25a34:	024003c4 	movi	r9,15
   25a38:	21800044 	addi	r6,r4,1
   25a3c:	318d883a 	add	r6,r6,r6
   25a40:	318d883a 	add	r6,r6,r6
   25a44:	318d883a 	add	r6,r6,r6
   25a48:	998d883a 	add	r6,r19,r6
   25a4c:	333ffe04 	addi	r12,r6,-8
   25a50:	2017883a 	mov	r11,r4
   25a54:	31800104 	addi	r6,r6,4
   25a58:	34000017 	ldw	r16,0(r6)
   25a5c:	31fffd04 	addi	r7,r6,-12
   25a60:	81c0041e 	bne	r16,r7,25a74 <_malloc_r+0x1dc>
   25a64:	0000fb06 	br	25e54 <_malloc_r+0x5bc>
   25a68:	1801030e 	bge	r3,zero,25e78 <_malloc_r+0x5e0>
   25a6c:	84000317 	ldw	r16,12(r16)
   25a70:	81c0f826 	beq	r16,r7,25e54 <_malloc_r+0x5bc>
   25a74:	80800117 	ldw	r2,4(r16)
   25a78:	1284703a 	and	r2,r2,r10
   25a7c:	1447c83a 	sub	r3,r2,r17
   25a80:	48fff90e 	bge	r9,r3,25a68 <__alt_data_end+0xfffe5a68>
   25a84:	80800317 	ldw	r2,12(r16)
   25a88:	81000217 	ldw	r4,8(r16)
   25a8c:	89400054 	ori	r5,r17,1
   25a90:	81400115 	stw	r5,4(r16)
   25a94:	20800315 	stw	r2,12(r4)
   25a98:	11000215 	stw	r4,8(r2)
   25a9c:	8463883a 	add	r17,r16,r17
   25aa0:	9c400515 	stw	r17,20(r19)
   25aa4:	9c400415 	stw	r17,16(r19)
   25aa8:	18800054 	ori	r2,r3,1
   25aac:	88800115 	stw	r2,4(r17)
   25ab0:	8a000315 	stw	r8,12(r17)
   25ab4:	8a000215 	stw	r8,8(r17)
   25ab8:	88e3883a 	add	r17,r17,r3
   25abc:	88c00015 	stw	r3,0(r17)
   25ac0:	9009883a 	mov	r4,r18
   25ac4:	002dbbc0 	call	2dbbc <__malloc_unlock>
   25ac8:	80800204 	addi	r2,r16,8
   25acc:	00001b06 	br	25b3c <_malloc_r+0x2a4>
   25ad0:	04400404 	movi	r17,16
   25ad4:	89402536 	bltu	r17,r5,25b6c <_malloc_r+0x2d4>
   25ad8:	002db980 	call	2db98 <__malloc_lock>
   25adc:	00800184 	movi	r2,6
   25ae0:	01000084 	movi	r4,2
   25ae4:	04c000f4 	movhi	r19,3
   25ae8:	1085883a 	add	r2,r2,r2
   25aec:	9cc20604 	addi	r19,r19,2072
   25af0:	1085883a 	add	r2,r2,r2
   25af4:	9885883a 	add	r2,r19,r2
   25af8:	14000117 	ldw	r16,4(r2)
   25afc:	10fffe04 	addi	r3,r2,-8
   25b00:	80c0d926 	beq	r16,r3,25e68 <_malloc_r+0x5d0>
   25b04:	80c00117 	ldw	r3,4(r16)
   25b08:	81000317 	ldw	r4,12(r16)
   25b0c:	00bfff04 	movi	r2,-4
   25b10:	1884703a 	and	r2,r3,r2
   25b14:	81400217 	ldw	r5,8(r16)
   25b18:	8085883a 	add	r2,r16,r2
   25b1c:	10c00117 	ldw	r3,4(r2)
   25b20:	29000315 	stw	r4,12(r5)
   25b24:	21400215 	stw	r5,8(r4)
   25b28:	18c00054 	ori	r3,r3,1
   25b2c:	10c00115 	stw	r3,4(r2)
   25b30:	9009883a 	mov	r4,r18
   25b34:	002dbbc0 	call	2dbbc <__malloc_unlock>
   25b38:	80800204 	addi	r2,r16,8
   25b3c:	dfc00a17 	ldw	ra,40(sp)
   25b40:	df000917 	ldw	fp,36(sp)
   25b44:	ddc00817 	ldw	r23,32(sp)
   25b48:	dd800717 	ldw	r22,28(sp)
   25b4c:	dd400617 	ldw	r21,24(sp)
   25b50:	dd000517 	ldw	r20,20(sp)
   25b54:	dcc00417 	ldw	r19,16(sp)
   25b58:	dc800317 	ldw	r18,12(sp)
   25b5c:	dc400217 	ldw	r17,8(sp)
   25b60:	dc000117 	ldw	r16,4(sp)
   25b64:	dec00b04 	addi	sp,sp,44
   25b68:	f800283a 	ret
   25b6c:	00800304 	movi	r2,12
   25b70:	90800015 	stw	r2,0(r18)
   25b74:	0005883a 	mov	r2,zero
   25b78:	003ff006 	br	25b3c <__alt_data_end+0xfffe5b3c>
   25b7c:	01002004 	movi	r4,128
   25b80:	02001004 	movi	r8,64
   25b84:	01c00fc4 	movi	r7,63
   25b88:	003f6106 	br	25910 <__alt_data_end+0xfffe5910>
   25b8c:	4009883a 	mov	r4,r8
   25b90:	003f7506 	br	25968 <__alt_data_end+0xfffe5968>
   25b94:	81000317 	ldw	r4,12(r16)
   25b98:	003fde06 	br	25b14 <__alt_data_end+0xfffe5b14>
   25b9c:	81c5883a 	add	r2,r16,r7
   25ba0:	11400117 	ldw	r5,4(r2)
   25ba4:	9009883a 	mov	r4,r18
   25ba8:	29400054 	ori	r5,r5,1
   25bac:	11400115 	stw	r5,4(r2)
   25bb0:	002dbbc0 	call	2dbbc <__malloc_unlock>
   25bb4:	80800204 	addi	r2,r16,8
   25bb8:	003fe006 	br	25b3c <__alt_data_end+0xfffe5b3c>
   25bbc:	9c000217 	ldw	r16,8(r19)
   25bc0:	00bfff04 	movi	r2,-4
   25bc4:	85800117 	ldw	r22,4(r16)
   25bc8:	b0ac703a 	and	r22,r22,r2
   25bcc:	b4400336 	bltu	r22,r17,25bdc <_malloc_r+0x344>
   25bd0:	b445c83a 	sub	r2,r22,r17
   25bd4:	00c003c4 	movi	r3,15
   25bd8:	18805d16 	blt	r3,r2,25d50 <_malloc_r+0x4b8>
   25bdc:	05c000f4 	movhi	r23,3
   25be0:	008000f4 	movhi	r2,3
   25be4:	108e5d04 	addi	r2,r2,14708
   25be8:	bdc78d04 	addi	r23,r23,7732
   25bec:	15400017 	ldw	r21,0(r2)
   25bf0:	b8c00017 	ldw	r3,0(r23)
   25bf4:	00bfffc4 	movi	r2,-1
   25bf8:	858d883a 	add	r6,r16,r22
   25bfc:	8d6b883a 	add	r21,r17,r21
   25c00:	1880ea26 	beq	r3,r2,25fac <_malloc_r+0x714>
   25c04:	ad4403c4 	addi	r21,r21,4111
   25c08:	00bc0004 	movi	r2,-4096
   25c0c:	a8aa703a 	and	r21,r21,r2
   25c10:	a80b883a 	mov	r5,r21
   25c14:	9009883a 	mov	r4,r18
   25c18:	d9800015 	stw	r6,0(sp)
   25c1c:	00274680 	call	27468 <_sbrk_r>
   25c20:	1029883a 	mov	r20,r2
   25c24:	00bfffc4 	movi	r2,-1
   25c28:	d9800017 	ldw	r6,0(sp)
   25c2c:	a080e826 	beq	r20,r2,25fd0 <_malloc_r+0x738>
   25c30:	a180a636 	bltu	r20,r6,25ecc <_malloc_r+0x634>
   25c34:	070000f4 	movhi	fp,3
   25c38:	e70e6604 	addi	fp,fp,14744
   25c3c:	e0800017 	ldw	r2,0(fp)
   25c40:	a887883a 	add	r3,r21,r2
   25c44:	e0c00015 	stw	r3,0(fp)
   25c48:	3500e626 	beq	r6,r20,25fe4 <_malloc_r+0x74c>
   25c4c:	b9000017 	ldw	r4,0(r23)
   25c50:	00bfffc4 	movi	r2,-1
   25c54:	2080ee26 	beq	r4,r2,26010 <_malloc_r+0x778>
   25c58:	a185c83a 	sub	r2,r20,r6
   25c5c:	10c5883a 	add	r2,r2,r3
   25c60:	e0800015 	stw	r2,0(fp)
   25c64:	a0c001cc 	andi	r3,r20,7
   25c68:	1800bc26 	beq	r3,zero,25f5c <_malloc_r+0x6c4>
   25c6c:	a0e9c83a 	sub	r20,r20,r3
   25c70:	00840204 	movi	r2,4104
   25c74:	a5000204 	addi	r20,r20,8
   25c78:	10c7c83a 	sub	r3,r2,r3
   25c7c:	a545883a 	add	r2,r20,r21
   25c80:	1083ffcc 	andi	r2,r2,4095
   25c84:	18abc83a 	sub	r21,r3,r2
   25c88:	a80b883a 	mov	r5,r21
   25c8c:	9009883a 	mov	r4,r18
   25c90:	00274680 	call	27468 <_sbrk_r>
   25c94:	00ffffc4 	movi	r3,-1
   25c98:	10c0e126 	beq	r2,r3,26020 <_malloc_r+0x788>
   25c9c:	1505c83a 	sub	r2,r2,r20
   25ca0:	1545883a 	add	r2,r2,r21
   25ca4:	10800054 	ori	r2,r2,1
   25ca8:	e0c00017 	ldw	r3,0(fp)
   25cac:	9d000215 	stw	r20,8(r19)
   25cb0:	a0800115 	stw	r2,4(r20)
   25cb4:	a8c7883a 	add	r3,r21,r3
   25cb8:	e0c00015 	stw	r3,0(fp)
   25cbc:	84c00e26 	beq	r16,r19,25cf8 <_malloc_r+0x460>
   25cc0:	018003c4 	movi	r6,15
   25cc4:	3580a72e 	bgeu	r6,r22,25f64 <_malloc_r+0x6cc>
   25cc8:	81400117 	ldw	r5,4(r16)
   25ccc:	013ffe04 	movi	r4,-8
   25cd0:	b0bffd04 	addi	r2,r22,-12
   25cd4:	1104703a 	and	r2,r2,r4
   25cd8:	2900004c 	andi	r4,r5,1
   25cdc:	2088b03a 	or	r4,r4,r2
   25ce0:	81000115 	stw	r4,4(r16)
   25ce4:	01400144 	movi	r5,5
   25ce8:	8089883a 	add	r4,r16,r2
   25cec:	21400115 	stw	r5,4(r4)
   25cf0:	21400215 	stw	r5,8(r4)
   25cf4:	3080cd36 	bltu	r6,r2,2602c <_malloc_r+0x794>
   25cf8:	008000f4 	movhi	r2,3
   25cfc:	108e5c04 	addi	r2,r2,14704
   25d00:	11000017 	ldw	r4,0(r2)
   25d04:	20c0012e 	bgeu	r4,r3,25d0c <_malloc_r+0x474>
   25d08:	10c00015 	stw	r3,0(r2)
   25d0c:	008000f4 	movhi	r2,3
   25d10:	108e5b04 	addi	r2,r2,14700
   25d14:	11000017 	ldw	r4,0(r2)
   25d18:	9c000217 	ldw	r16,8(r19)
   25d1c:	20c0012e 	bgeu	r4,r3,25d24 <_malloc_r+0x48c>
   25d20:	10c00015 	stw	r3,0(r2)
   25d24:	80c00117 	ldw	r3,4(r16)
   25d28:	00bfff04 	movi	r2,-4
   25d2c:	1886703a 	and	r3,r3,r2
   25d30:	1c45c83a 	sub	r2,r3,r17
   25d34:	1c400236 	bltu	r3,r17,25d40 <_malloc_r+0x4a8>
   25d38:	00c003c4 	movi	r3,15
   25d3c:	18800416 	blt	r3,r2,25d50 <_malloc_r+0x4b8>
   25d40:	9009883a 	mov	r4,r18
   25d44:	002dbbc0 	call	2dbbc <__malloc_unlock>
   25d48:	0005883a 	mov	r2,zero
   25d4c:	003f7b06 	br	25b3c <__alt_data_end+0xfffe5b3c>
   25d50:	88c00054 	ori	r3,r17,1
   25d54:	80c00115 	stw	r3,4(r16)
   25d58:	8463883a 	add	r17,r16,r17
   25d5c:	10800054 	ori	r2,r2,1
   25d60:	9c400215 	stw	r17,8(r19)
   25d64:	88800115 	stw	r2,4(r17)
   25d68:	9009883a 	mov	r4,r18
   25d6c:	002dbbc0 	call	2dbbc <__malloc_unlock>
   25d70:	80800204 	addi	r2,r16,8
   25d74:	003f7106 	br	25b3c <__alt_data_end+0xfffe5b3c>
   25d78:	00c00504 	movi	r3,20
   25d7c:	18804a2e 	bgeu	r3,r2,25ea8 <_malloc_r+0x610>
   25d80:	00c01504 	movi	r3,84
   25d84:	18806e36 	bltu	r3,r2,25f40 <_malloc_r+0x6a8>
   25d88:	8804d33a 	srli	r2,r17,12
   25d8c:	12001bc4 	addi	r8,r2,111
   25d90:	11c01b84 	addi	r7,r2,110
   25d94:	4209883a 	add	r4,r8,r8
   25d98:	003edd06 	br	25910 <__alt_data_end+0xfffe5910>
   25d9c:	3804d27a 	srli	r2,r7,9
   25da0:	00c00104 	movi	r3,4
   25da4:	1880442e 	bgeu	r3,r2,25eb8 <_malloc_r+0x620>
   25da8:	00c00504 	movi	r3,20
   25dac:	18808136 	bltu	r3,r2,25fb4 <_malloc_r+0x71c>
   25db0:	11401704 	addi	r5,r2,92
   25db4:	10c016c4 	addi	r3,r2,91
   25db8:	294b883a 	add	r5,r5,r5
   25dbc:	294b883a 	add	r5,r5,r5
   25dc0:	294b883a 	add	r5,r5,r5
   25dc4:	994b883a 	add	r5,r19,r5
   25dc8:	28800017 	ldw	r2,0(r5)
   25dcc:	018000f4 	movhi	r6,3
   25dd0:	297ffe04 	addi	r5,r5,-8
   25dd4:	31820604 	addi	r6,r6,2072
   25dd8:	28806526 	beq	r5,r2,25f70 <_malloc_r+0x6d8>
   25ddc:	01bfff04 	movi	r6,-4
   25de0:	10c00117 	ldw	r3,4(r2)
   25de4:	1986703a 	and	r3,r3,r6
   25de8:	38c0022e 	bgeu	r7,r3,25df4 <_malloc_r+0x55c>
   25dec:	10800217 	ldw	r2,8(r2)
   25df0:	28bffb1e 	bne	r5,r2,25de0 <__alt_data_end+0xfffe5de0>
   25df4:	11400317 	ldw	r5,12(r2)
   25df8:	98c00117 	ldw	r3,4(r19)
   25dfc:	81400315 	stw	r5,12(r16)
   25e00:	80800215 	stw	r2,8(r16)
   25e04:	2c000215 	stw	r16,8(r5)
   25e08:	14000315 	stw	r16,12(r2)
   25e0c:	003ef806 	br	259f0 <__alt_data_end+0xfffe59f0>
   25e10:	88c00054 	ori	r3,r17,1
   25e14:	80c00115 	stw	r3,4(r16)
   25e18:	8463883a 	add	r17,r16,r17
   25e1c:	34400515 	stw	r17,20(r6)
   25e20:	34400415 	stw	r17,16(r6)
   25e24:	10c00054 	ori	r3,r2,1
   25e28:	8a000315 	stw	r8,12(r17)
   25e2c:	8a000215 	stw	r8,8(r17)
   25e30:	88c00115 	stw	r3,4(r17)
   25e34:	88a3883a 	add	r17,r17,r2
   25e38:	88800015 	stw	r2,0(r17)
   25e3c:	9009883a 	mov	r4,r18
   25e40:	002dbbc0 	call	2dbbc <__malloc_unlock>
   25e44:	80800204 	addi	r2,r16,8
   25e48:	003f3c06 	br	25b3c <__alt_data_end+0xfffe5b3c>
   25e4c:	30c00117 	ldw	r3,4(r6)
   25e50:	003ee706 	br	259f0 <__alt_data_end+0xfffe59f0>
   25e54:	5ac00044 	addi	r11,r11,1
   25e58:	588000cc 	andi	r2,r11,3
   25e5c:	31800204 	addi	r6,r6,8
   25e60:	103efd1e 	bne	r2,zero,25a58 <__alt_data_end+0xfffe5a58>
   25e64:	00002406 	br	25ef8 <_malloc_r+0x660>
   25e68:	14000317 	ldw	r16,12(r2)
   25e6c:	143f251e 	bne	r2,r16,25b04 <__alt_data_end+0xfffe5b04>
   25e70:	21000084 	addi	r4,r4,2
   25e74:	003ebc06 	br	25968 <__alt_data_end+0xfffe5968>
   25e78:	8085883a 	add	r2,r16,r2
   25e7c:	10c00117 	ldw	r3,4(r2)
   25e80:	81000317 	ldw	r4,12(r16)
   25e84:	81400217 	ldw	r5,8(r16)
   25e88:	18c00054 	ori	r3,r3,1
   25e8c:	10c00115 	stw	r3,4(r2)
   25e90:	29000315 	stw	r4,12(r5)
   25e94:	21400215 	stw	r5,8(r4)
   25e98:	9009883a 	mov	r4,r18
   25e9c:	002dbbc0 	call	2dbbc <__malloc_unlock>
   25ea0:	80800204 	addi	r2,r16,8
   25ea4:	003f2506 	br	25b3c <__alt_data_end+0xfffe5b3c>
   25ea8:	12001704 	addi	r8,r2,92
   25eac:	11c016c4 	addi	r7,r2,91
   25eb0:	4209883a 	add	r4,r8,r8
   25eb4:	003e9606 	br	25910 <__alt_data_end+0xfffe5910>
   25eb8:	3804d1ba 	srli	r2,r7,6
   25ebc:	11400e44 	addi	r5,r2,57
   25ec0:	10c00e04 	addi	r3,r2,56
   25ec4:	294b883a 	add	r5,r5,r5
   25ec8:	003fbc06 	br	25dbc <__alt_data_end+0xfffe5dbc>
   25ecc:	84ff5926 	beq	r16,r19,25c34 <__alt_data_end+0xfffe5c34>
   25ed0:	008000f4 	movhi	r2,3
   25ed4:	10820604 	addi	r2,r2,2072
   25ed8:	14000217 	ldw	r16,8(r2)
   25edc:	00bfff04 	movi	r2,-4
   25ee0:	80c00117 	ldw	r3,4(r16)
   25ee4:	1886703a 	and	r3,r3,r2
   25ee8:	003f9106 	br	25d30 <__alt_data_end+0xfffe5d30>
   25eec:	60800217 	ldw	r2,8(r12)
   25ef0:	213fffc4 	addi	r4,r4,-1
   25ef4:	1300651e 	bne	r2,r12,2608c <_malloc_r+0x7f4>
   25ef8:	208000cc 	andi	r2,r4,3
   25efc:	633ffe04 	addi	r12,r12,-8
   25f00:	103ffa1e 	bne	r2,zero,25eec <__alt_data_end+0xfffe5eec>
   25f04:	98800117 	ldw	r2,4(r19)
   25f08:	0146303a 	nor	r3,zero,r5
   25f0c:	1884703a 	and	r2,r3,r2
   25f10:	98800115 	stw	r2,4(r19)
   25f14:	294b883a 	add	r5,r5,r5
   25f18:	117f2836 	bltu	r2,r5,25bbc <__alt_data_end+0xfffe5bbc>
   25f1c:	283f2726 	beq	r5,zero,25bbc <__alt_data_end+0xfffe5bbc>
   25f20:	2886703a 	and	r3,r5,r2
   25f24:	5809883a 	mov	r4,r11
   25f28:	183ec31e 	bne	r3,zero,25a38 <__alt_data_end+0xfffe5a38>
   25f2c:	294b883a 	add	r5,r5,r5
   25f30:	2886703a 	and	r3,r5,r2
   25f34:	21000104 	addi	r4,r4,4
   25f38:	183ffc26 	beq	r3,zero,25f2c <__alt_data_end+0xfffe5f2c>
   25f3c:	003ebe06 	br	25a38 <__alt_data_end+0xfffe5a38>
   25f40:	00c05504 	movi	r3,340
   25f44:	18801236 	bltu	r3,r2,25f90 <_malloc_r+0x6f8>
   25f48:	8804d3fa 	srli	r2,r17,15
   25f4c:	12001e04 	addi	r8,r2,120
   25f50:	11c01dc4 	addi	r7,r2,119
   25f54:	4209883a 	add	r4,r8,r8
   25f58:	003e6d06 	br	25910 <__alt_data_end+0xfffe5910>
   25f5c:	00c40004 	movi	r3,4096
   25f60:	003f4606 	br	25c7c <__alt_data_end+0xfffe5c7c>
   25f64:	00800044 	movi	r2,1
   25f68:	a0800115 	stw	r2,4(r20)
   25f6c:	003f7406 	br	25d40 <__alt_data_end+0xfffe5d40>
   25f70:	1805d0ba 	srai	r2,r3,2
   25f74:	01c00044 	movi	r7,1
   25f78:	30c00117 	ldw	r3,4(r6)
   25f7c:	388e983a 	sll	r7,r7,r2
   25f80:	2805883a 	mov	r2,r5
   25f84:	38c6b03a 	or	r3,r7,r3
   25f88:	30c00115 	stw	r3,4(r6)
   25f8c:	003f9b06 	br	25dfc <__alt_data_end+0xfffe5dfc>
   25f90:	00c15504 	movi	r3,1364
   25f94:	18801a36 	bltu	r3,r2,26000 <_malloc_r+0x768>
   25f98:	8804d4ba 	srli	r2,r17,18
   25f9c:	12001f44 	addi	r8,r2,125
   25fa0:	11c01f04 	addi	r7,r2,124
   25fa4:	4209883a 	add	r4,r8,r8
   25fa8:	003e5906 	br	25910 <__alt_data_end+0xfffe5910>
   25fac:	ad400404 	addi	r21,r21,16
   25fb0:	003f1706 	br	25c10 <__alt_data_end+0xfffe5c10>
   25fb4:	00c01504 	movi	r3,84
   25fb8:	18802336 	bltu	r3,r2,26048 <_malloc_r+0x7b0>
   25fbc:	3804d33a 	srli	r2,r7,12
   25fc0:	11401bc4 	addi	r5,r2,111
   25fc4:	10c01b84 	addi	r3,r2,110
   25fc8:	294b883a 	add	r5,r5,r5
   25fcc:	003f7b06 	br	25dbc <__alt_data_end+0xfffe5dbc>
   25fd0:	9c000217 	ldw	r16,8(r19)
   25fd4:	00bfff04 	movi	r2,-4
   25fd8:	80c00117 	ldw	r3,4(r16)
   25fdc:	1886703a 	and	r3,r3,r2
   25fe0:	003f5306 	br	25d30 <__alt_data_end+0xfffe5d30>
   25fe4:	3083ffcc 	andi	r2,r6,4095
   25fe8:	103f181e 	bne	r2,zero,25c4c <__alt_data_end+0xfffe5c4c>
   25fec:	99000217 	ldw	r4,8(r19)
   25ff0:	b545883a 	add	r2,r22,r21
   25ff4:	10800054 	ori	r2,r2,1
   25ff8:	20800115 	stw	r2,4(r4)
   25ffc:	003f3e06 	br	25cf8 <__alt_data_end+0xfffe5cf8>
   26000:	01003f84 	movi	r4,254
   26004:	02001fc4 	movi	r8,127
   26008:	01c01f84 	movi	r7,126
   2600c:	003e4006 	br	25910 <__alt_data_end+0xfffe5910>
   26010:	008000f4 	movhi	r2,3
   26014:	10878d04 	addi	r2,r2,7732
   26018:	15000015 	stw	r20,0(r2)
   2601c:	003f1106 	br	25c64 <__alt_data_end+0xfffe5c64>
   26020:	00800044 	movi	r2,1
   26024:	002b883a 	mov	r21,zero
   26028:	003f1f06 	br	25ca8 <__alt_data_end+0xfffe5ca8>
   2602c:	81400204 	addi	r5,r16,8
   26030:	9009883a 	mov	r4,r18
   26034:	00251680 	call	25168 <_free_r>
   26038:	008000f4 	movhi	r2,3
   2603c:	108e6604 	addi	r2,r2,14744
   26040:	10c00017 	ldw	r3,0(r2)
   26044:	003f2c06 	br	25cf8 <__alt_data_end+0xfffe5cf8>
   26048:	00c05504 	movi	r3,340
   2604c:	18800536 	bltu	r3,r2,26064 <_malloc_r+0x7cc>
   26050:	3804d3fa 	srli	r2,r7,15
   26054:	11401e04 	addi	r5,r2,120
   26058:	10c01dc4 	addi	r3,r2,119
   2605c:	294b883a 	add	r5,r5,r5
   26060:	003f5606 	br	25dbc <__alt_data_end+0xfffe5dbc>
   26064:	00c15504 	movi	r3,1364
   26068:	18800536 	bltu	r3,r2,26080 <_malloc_r+0x7e8>
   2606c:	3804d4ba 	srli	r2,r7,18
   26070:	11401f44 	addi	r5,r2,125
   26074:	10c01f04 	addi	r3,r2,124
   26078:	294b883a 	add	r5,r5,r5
   2607c:	003f4f06 	br	25dbc <__alt_data_end+0xfffe5dbc>
   26080:	01403f84 	movi	r5,254
   26084:	00c01f84 	movi	r3,126
   26088:	003f4c06 	br	25dbc <__alt_data_end+0xfffe5dbc>
   2608c:	98800117 	ldw	r2,4(r19)
   26090:	003fa006 	br	25f14 <__alt_data_end+0xfffe5f14>
   26094:	8808d0fa 	srli	r4,r17,3
   26098:	20800044 	addi	r2,r4,1
   2609c:	1085883a 	add	r2,r2,r2
   260a0:	003e9006 	br	25ae4 <__alt_data_end+0xfffe5ae4>

000260a4 <memchr>:
   260a4:	208000cc 	andi	r2,r4,3
   260a8:	280f883a 	mov	r7,r5
   260ac:	10003426 	beq	r2,zero,26180 <memchr+0xdc>
   260b0:	30bfffc4 	addi	r2,r6,-1
   260b4:	30001a26 	beq	r6,zero,26120 <memchr+0x7c>
   260b8:	20c00003 	ldbu	r3,0(r4)
   260bc:	29803fcc 	andi	r6,r5,255
   260c0:	30c0051e 	bne	r6,r3,260d8 <memchr+0x34>
   260c4:	00001806 	br	26128 <memchr+0x84>
   260c8:	10001526 	beq	r2,zero,26120 <memchr+0x7c>
   260cc:	20c00003 	ldbu	r3,0(r4)
   260d0:	10bfffc4 	addi	r2,r2,-1
   260d4:	30c01426 	beq	r6,r3,26128 <memchr+0x84>
   260d8:	21000044 	addi	r4,r4,1
   260dc:	20c000cc 	andi	r3,r4,3
   260e0:	183ff91e 	bne	r3,zero,260c8 <__alt_data_end+0xfffe60c8>
   260e4:	020000c4 	movi	r8,3
   260e8:	40801136 	bltu	r8,r2,26130 <memchr+0x8c>
   260ec:	10000c26 	beq	r2,zero,26120 <memchr+0x7c>
   260f0:	20c00003 	ldbu	r3,0(r4)
   260f4:	29403fcc 	andi	r5,r5,255
   260f8:	28c00b26 	beq	r5,r3,26128 <memchr+0x84>
   260fc:	20c00044 	addi	r3,r4,1
   26100:	39803fcc 	andi	r6,r7,255
   26104:	2089883a 	add	r4,r4,r2
   26108:	00000306 	br	26118 <memchr+0x74>
   2610c:	18c00044 	addi	r3,r3,1
   26110:	197fffc3 	ldbu	r5,-1(r3)
   26114:	31400526 	beq	r6,r5,2612c <memchr+0x88>
   26118:	1805883a 	mov	r2,r3
   2611c:	20fffb1e 	bne	r4,r3,2610c <__alt_data_end+0xfffe610c>
   26120:	0005883a 	mov	r2,zero
   26124:	f800283a 	ret
   26128:	2005883a 	mov	r2,r4
   2612c:	f800283a 	ret
   26130:	28c03fcc 	andi	r3,r5,255
   26134:	1812923a 	slli	r9,r3,8
   26138:	02ffbff4 	movhi	r11,65279
   2613c:	02a02074 	movhi	r10,32897
   26140:	48d2b03a 	or	r9,r9,r3
   26144:	4806943a 	slli	r3,r9,16
   26148:	5affbfc4 	addi	r11,r11,-257
   2614c:	52a02004 	addi	r10,r10,-32640
   26150:	48d2b03a 	or	r9,r9,r3
   26154:	20c00017 	ldw	r3,0(r4)
   26158:	48c6f03a 	xor	r3,r9,r3
   2615c:	1acd883a 	add	r6,r3,r11
   26160:	00c6303a 	nor	r3,zero,r3
   26164:	30c6703a 	and	r3,r6,r3
   26168:	1a86703a 	and	r3,r3,r10
   2616c:	183fe01e 	bne	r3,zero,260f0 <__alt_data_end+0xfffe60f0>
   26170:	10bfff04 	addi	r2,r2,-4
   26174:	21000104 	addi	r4,r4,4
   26178:	40bff636 	bltu	r8,r2,26154 <__alt_data_end+0xfffe6154>
   2617c:	003fdb06 	br	260ec <__alt_data_end+0xfffe60ec>
   26180:	3005883a 	mov	r2,r6
   26184:	003fd706 	br	260e4 <__alt_data_end+0xfffe60e4>

00026188 <memcpy>:
   26188:	defffd04 	addi	sp,sp,-12
   2618c:	dfc00215 	stw	ra,8(sp)
   26190:	dc400115 	stw	r17,4(sp)
   26194:	dc000015 	stw	r16,0(sp)
   26198:	00c003c4 	movi	r3,15
   2619c:	2005883a 	mov	r2,r4
   261a0:	1980452e 	bgeu	r3,r6,262b8 <memcpy+0x130>
   261a4:	2906b03a 	or	r3,r5,r4
   261a8:	18c000cc 	andi	r3,r3,3
   261ac:	1800441e 	bne	r3,zero,262c0 <memcpy+0x138>
   261b0:	347ffc04 	addi	r17,r6,-16
   261b4:	8822d13a 	srli	r17,r17,4
   261b8:	28c00104 	addi	r3,r5,4
   261bc:	23400104 	addi	r13,r4,4
   261c0:	8820913a 	slli	r16,r17,4
   261c4:	2b000204 	addi	r12,r5,8
   261c8:	22c00204 	addi	r11,r4,8
   261cc:	84000504 	addi	r16,r16,20
   261d0:	2a800304 	addi	r10,r5,12
   261d4:	22400304 	addi	r9,r4,12
   261d8:	2c21883a 	add	r16,r5,r16
   261dc:	2811883a 	mov	r8,r5
   261e0:	200f883a 	mov	r7,r4
   261e4:	41000017 	ldw	r4,0(r8)
   261e8:	1fc00017 	ldw	ra,0(r3)
   261ec:	63c00017 	ldw	r15,0(r12)
   261f0:	39000015 	stw	r4,0(r7)
   261f4:	53800017 	ldw	r14,0(r10)
   261f8:	6fc00015 	stw	ra,0(r13)
   261fc:	5bc00015 	stw	r15,0(r11)
   26200:	4b800015 	stw	r14,0(r9)
   26204:	18c00404 	addi	r3,r3,16
   26208:	39c00404 	addi	r7,r7,16
   2620c:	42000404 	addi	r8,r8,16
   26210:	6b400404 	addi	r13,r13,16
   26214:	63000404 	addi	r12,r12,16
   26218:	5ac00404 	addi	r11,r11,16
   2621c:	52800404 	addi	r10,r10,16
   26220:	4a400404 	addi	r9,r9,16
   26224:	1c3fef1e 	bne	r3,r16,261e4 <__alt_data_end+0xfffe61e4>
   26228:	89c00044 	addi	r7,r17,1
   2622c:	380e913a 	slli	r7,r7,4
   26230:	310003cc 	andi	r4,r6,15
   26234:	02c000c4 	movi	r11,3
   26238:	11c7883a 	add	r3,r2,r7
   2623c:	29cb883a 	add	r5,r5,r7
   26240:	5900212e 	bgeu	r11,r4,262c8 <memcpy+0x140>
   26244:	1813883a 	mov	r9,r3
   26248:	2811883a 	mov	r8,r5
   2624c:	200f883a 	mov	r7,r4
   26250:	42800017 	ldw	r10,0(r8)
   26254:	4a400104 	addi	r9,r9,4
   26258:	39ffff04 	addi	r7,r7,-4
   2625c:	4abfff15 	stw	r10,-4(r9)
   26260:	42000104 	addi	r8,r8,4
   26264:	59fffa36 	bltu	r11,r7,26250 <__alt_data_end+0xfffe6250>
   26268:	213fff04 	addi	r4,r4,-4
   2626c:	2008d0ba 	srli	r4,r4,2
   26270:	318000cc 	andi	r6,r6,3
   26274:	21000044 	addi	r4,r4,1
   26278:	2109883a 	add	r4,r4,r4
   2627c:	2109883a 	add	r4,r4,r4
   26280:	1907883a 	add	r3,r3,r4
   26284:	290b883a 	add	r5,r5,r4
   26288:	30000626 	beq	r6,zero,262a4 <memcpy+0x11c>
   2628c:	198d883a 	add	r6,r3,r6
   26290:	29c00003 	ldbu	r7,0(r5)
   26294:	18c00044 	addi	r3,r3,1
   26298:	29400044 	addi	r5,r5,1
   2629c:	19ffffc5 	stb	r7,-1(r3)
   262a0:	19bffb1e 	bne	r3,r6,26290 <__alt_data_end+0xfffe6290>
   262a4:	dfc00217 	ldw	ra,8(sp)
   262a8:	dc400117 	ldw	r17,4(sp)
   262ac:	dc000017 	ldw	r16,0(sp)
   262b0:	dec00304 	addi	sp,sp,12
   262b4:	f800283a 	ret
   262b8:	2007883a 	mov	r3,r4
   262bc:	003ff206 	br	26288 <__alt_data_end+0xfffe6288>
   262c0:	2007883a 	mov	r3,r4
   262c4:	003ff106 	br	2628c <__alt_data_end+0xfffe628c>
   262c8:	200d883a 	mov	r6,r4
   262cc:	003fee06 	br	26288 <__alt_data_end+0xfffe6288>

000262d0 <memset>:
   262d0:	20c000cc 	andi	r3,r4,3
   262d4:	2005883a 	mov	r2,r4
   262d8:	18004426 	beq	r3,zero,263ec <memset+0x11c>
   262dc:	31ffffc4 	addi	r7,r6,-1
   262e0:	30004026 	beq	r6,zero,263e4 <memset+0x114>
   262e4:	2813883a 	mov	r9,r5
   262e8:	200d883a 	mov	r6,r4
   262ec:	2007883a 	mov	r3,r4
   262f0:	00000406 	br	26304 <memset+0x34>
   262f4:	3a3fffc4 	addi	r8,r7,-1
   262f8:	31800044 	addi	r6,r6,1
   262fc:	38003926 	beq	r7,zero,263e4 <memset+0x114>
   26300:	400f883a 	mov	r7,r8
   26304:	18c00044 	addi	r3,r3,1
   26308:	32400005 	stb	r9,0(r6)
   2630c:	1a0000cc 	andi	r8,r3,3
   26310:	403ff81e 	bne	r8,zero,262f4 <__alt_data_end+0xfffe62f4>
   26314:	010000c4 	movi	r4,3
   26318:	21c02d2e 	bgeu	r4,r7,263d0 <memset+0x100>
   2631c:	29003fcc 	andi	r4,r5,255
   26320:	200c923a 	slli	r6,r4,8
   26324:	3108b03a 	or	r4,r6,r4
   26328:	200c943a 	slli	r6,r4,16
   2632c:	218cb03a 	or	r6,r4,r6
   26330:	010003c4 	movi	r4,15
   26334:	21c0182e 	bgeu	r4,r7,26398 <memset+0xc8>
   26338:	3b3ffc04 	addi	r12,r7,-16
   2633c:	6018d13a 	srli	r12,r12,4
   26340:	1a000104 	addi	r8,r3,4
   26344:	1ac00204 	addi	r11,r3,8
   26348:	6008913a 	slli	r4,r12,4
   2634c:	1a800304 	addi	r10,r3,12
   26350:	1813883a 	mov	r9,r3
   26354:	21000504 	addi	r4,r4,20
   26358:	1909883a 	add	r4,r3,r4
   2635c:	49800015 	stw	r6,0(r9)
   26360:	41800015 	stw	r6,0(r8)
   26364:	59800015 	stw	r6,0(r11)
   26368:	51800015 	stw	r6,0(r10)
   2636c:	42000404 	addi	r8,r8,16
   26370:	4a400404 	addi	r9,r9,16
   26374:	5ac00404 	addi	r11,r11,16
   26378:	52800404 	addi	r10,r10,16
   2637c:	413ff71e 	bne	r8,r4,2635c <__alt_data_end+0xfffe635c>
   26380:	63000044 	addi	r12,r12,1
   26384:	6018913a 	slli	r12,r12,4
   26388:	39c003cc 	andi	r7,r7,15
   2638c:	010000c4 	movi	r4,3
   26390:	1b07883a 	add	r3,r3,r12
   26394:	21c00e2e 	bgeu	r4,r7,263d0 <memset+0x100>
   26398:	1813883a 	mov	r9,r3
   2639c:	3811883a 	mov	r8,r7
   263a0:	010000c4 	movi	r4,3
   263a4:	49800015 	stw	r6,0(r9)
   263a8:	423fff04 	addi	r8,r8,-4
   263ac:	4a400104 	addi	r9,r9,4
   263b0:	223ffc36 	bltu	r4,r8,263a4 <__alt_data_end+0xfffe63a4>
   263b4:	393fff04 	addi	r4,r7,-4
   263b8:	2008d0ba 	srli	r4,r4,2
   263bc:	39c000cc 	andi	r7,r7,3
   263c0:	21000044 	addi	r4,r4,1
   263c4:	2109883a 	add	r4,r4,r4
   263c8:	2109883a 	add	r4,r4,r4
   263cc:	1907883a 	add	r3,r3,r4
   263d0:	38000526 	beq	r7,zero,263e8 <memset+0x118>
   263d4:	19cf883a 	add	r7,r3,r7
   263d8:	19400005 	stb	r5,0(r3)
   263dc:	18c00044 	addi	r3,r3,1
   263e0:	38fffd1e 	bne	r7,r3,263d8 <__alt_data_end+0xfffe63d8>
   263e4:	f800283a 	ret
   263e8:	f800283a 	ret
   263ec:	2007883a 	mov	r3,r4
   263f0:	300f883a 	mov	r7,r6
   263f4:	003fc706 	br	26314 <__alt_data_end+0xfffe6314>

000263f8 <_Balloc>:
   263f8:	20801317 	ldw	r2,76(r4)
   263fc:	defffc04 	addi	sp,sp,-16
   26400:	dc400115 	stw	r17,4(sp)
   26404:	dc000015 	stw	r16,0(sp)
   26408:	dfc00315 	stw	ra,12(sp)
   2640c:	dc800215 	stw	r18,8(sp)
   26410:	2023883a 	mov	r17,r4
   26414:	2821883a 	mov	r16,r5
   26418:	10000f26 	beq	r2,zero,26458 <_Balloc+0x60>
   2641c:	8407883a 	add	r3,r16,r16
   26420:	18c7883a 	add	r3,r3,r3
   26424:	10c7883a 	add	r3,r2,r3
   26428:	18800017 	ldw	r2,0(r3)
   2642c:	10001126 	beq	r2,zero,26474 <_Balloc+0x7c>
   26430:	11000017 	ldw	r4,0(r2)
   26434:	19000015 	stw	r4,0(r3)
   26438:	10000415 	stw	zero,16(r2)
   2643c:	10000315 	stw	zero,12(r2)
   26440:	dfc00317 	ldw	ra,12(sp)
   26444:	dc800217 	ldw	r18,8(sp)
   26448:	dc400117 	ldw	r17,4(sp)
   2644c:	dc000017 	ldw	r16,0(sp)
   26450:	dec00404 	addi	sp,sp,16
   26454:	f800283a 	ret
   26458:	01800844 	movi	r6,33
   2645c:	01400104 	movi	r5,4
   26460:	0028e680 	call	28e68 <_calloc_r>
   26464:	88801315 	stw	r2,76(r17)
   26468:	103fec1e 	bne	r2,zero,2641c <__alt_data_end+0xfffe641c>
   2646c:	0005883a 	mov	r2,zero
   26470:	003ff306 	br	26440 <__alt_data_end+0xfffe6440>
   26474:	01400044 	movi	r5,1
   26478:	2c24983a 	sll	r18,r5,r16
   2647c:	8809883a 	mov	r4,r17
   26480:	91800144 	addi	r6,r18,5
   26484:	318d883a 	add	r6,r6,r6
   26488:	318d883a 	add	r6,r6,r6
   2648c:	0028e680 	call	28e68 <_calloc_r>
   26490:	103ff626 	beq	r2,zero,2646c <__alt_data_end+0xfffe646c>
   26494:	14000115 	stw	r16,4(r2)
   26498:	14800215 	stw	r18,8(r2)
   2649c:	003fe606 	br	26438 <__alt_data_end+0xfffe6438>

000264a0 <_Bfree>:
   264a0:	28000826 	beq	r5,zero,264c4 <_Bfree+0x24>
   264a4:	28c00117 	ldw	r3,4(r5)
   264a8:	20801317 	ldw	r2,76(r4)
   264ac:	18c7883a 	add	r3,r3,r3
   264b0:	18c7883a 	add	r3,r3,r3
   264b4:	10c5883a 	add	r2,r2,r3
   264b8:	10c00017 	ldw	r3,0(r2)
   264bc:	28c00015 	stw	r3,0(r5)
   264c0:	11400015 	stw	r5,0(r2)
   264c4:	f800283a 	ret

000264c8 <__multadd>:
   264c8:	defffa04 	addi	sp,sp,-24
   264cc:	dc800315 	stw	r18,12(sp)
   264d0:	dc400215 	stw	r17,8(sp)
   264d4:	dc000115 	stw	r16,4(sp)
   264d8:	2823883a 	mov	r17,r5
   264dc:	2c000417 	ldw	r16,16(r5)
   264e0:	dfc00515 	stw	ra,20(sp)
   264e4:	dcc00415 	stw	r19,16(sp)
   264e8:	2025883a 	mov	r18,r4
   264ec:	29400504 	addi	r5,r5,20
   264f0:	0011883a 	mov	r8,zero
   264f4:	28c00017 	ldw	r3,0(r5)
   264f8:	29400104 	addi	r5,r5,4
   264fc:	42000044 	addi	r8,r8,1
   26500:	18bfffcc 	andi	r2,r3,65535
   26504:	1185383a 	mul	r2,r2,r6
   26508:	1806d43a 	srli	r3,r3,16
   2650c:	11cf883a 	add	r7,r2,r7
   26510:	3808d43a 	srli	r4,r7,16
   26514:	1987383a 	mul	r3,r3,r6
   26518:	38bfffcc 	andi	r2,r7,65535
   2651c:	1907883a 	add	r3,r3,r4
   26520:	1808943a 	slli	r4,r3,16
   26524:	180ed43a 	srli	r7,r3,16
   26528:	2085883a 	add	r2,r4,r2
   2652c:	28bfff15 	stw	r2,-4(r5)
   26530:	443ff016 	blt	r8,r16,264f4 <__alt_data_end+0xfffe64f4>
   26534:	38000926 	beq	r7,zero,2655c <__multadd+0x94>
   26538:	88800217 	ldw	r2,8(r17)
   2653c:	80800f0e 	bge	r16,r2,2657c <__multadd+0xb4>
   26540:	80800144 	addi	r2,r16,5
   26544:	1085883a 	add	r2,r2,r2
   26548:	1085883a 	add	r2,r2,r2
   2654c:	8885883a 	add	r2,r17,r2
   26550:	11c00015 	stw	r7,0(r2)
   26554:	84000044 	addi	r16,r16,1
   26558:	8c000415 	stw	r16,16(r17)
   2655c:	8805883a 	mov	r2,r17
   26560:	dfc00517 	ldw	ra,20(sp)
   26564:	dcc00417 	ldw	r19,16(sp)
   26568:	dc800317 	ldw	r18,12(sp)
   2656c:	dc400217 	ldw	r17,8(sp)
   26570:	dc000117 	ldw	r16,4(sp)
   26574:	dec00604 	addi	sp,sp,24
   26578:	f800283a 	ret
   2657c:	89400117 	ldw	r5,4(r17)
   26580:	9009883a 	mov	r4,r18
   26584:	d9c00015 	stw	r7,0(sp)
   26588:	29400044 	addi	r5,r5,1
   2658c:	00263f80 	call	263f8 <_Balloc>
   26590:	89800417 	ldw	r6,16(r17)
   26594:	89400304 	addi	r5,r17,12
   26598:	11000304 	addi	r4,r2,12
   2659c:	31800084 	addi	r6,r6,2
   265a0:	318d883a 	add	r6,r6,r6
   265a4:	318d883a 	add	r6,r6,r6
   265a8:	1027883a 	mov	r19,r2
   265ac:	00261880 	call	26188 <memcpy>
   265b0:	d9c00017 	ldw	r7,0(sp)
   265b4:	88000a26 	beq	r17,zero,265e0 <__multadd+0x118>
   265b8:	88c00117 	ldw	r3,4(r17)
   265bc:	90801317 	ldw	r2,76(r18)
   265c0:	18c7883a 	add	r3,r3,r3
   265c4:	18c7883a 	add	r3,r3,r3
   265c8:	10c5883a 	add	r2,r2,r3
   265cc:	10c00017 	ldw	r3,0(r2)
   265d0:	88c00015 	stw	r3,0(r17)
   265d4:	14400015 	stw	r17,0(r2)
   265d8:	9823883a 	mov	r17,r19
   265dc:	003fd806 	br	26540 <__alt_data_end+0xfffe6540>
   265e0:	9823883a 	mov	r17,r19
   265e4:	003fd606 	br	26540 <__alt_data_end+0xfffe6540>

000265e8 <__s2b>:
   265e8:	defff904 	addi	sp,sp,-28
   265ec:	dc400115 	stw	r17,4(sp)
   265f0:	dc000015 	stw	r16,0(sp)
   265f4:	2023883a 	mov	r17,r4
   265f8:	2821883a 	mov	r16,r5
   265fc:	39000204 	addi	r4,r7,8
   26600:	01400244 	movi	r5,9
   26604:	dcc00315 	stw	r19,12(sp)
   26608:	dc800215 	stw	r18,8(sp)
   2660c:	dfc00615 	stw	ra,24(sp)
   26610:	dd400515 	stw	r21,20(sp)
   26614:	dd000415 	stw	r20,16(sp)
   26618:	3825883a 	mov	r18,r7
   2661c:	3027883a 	mov	r19,r6
   26620:	0020b300 	call	20b30 <__divsi3>
   26624:	00c00044 	movi	r3,1
   26628:	000b883a 	mov	r5,zero
   2662c:	1880030e 	bge	r3,r2,2663c <__s2b+0x54>
   26630:	18c7883a 	add	r3,r3,r3
   26634:	29400044 	addi	r5,r5,1
   26638:	18bffd16 	blt	r3,r2,26630 <__alt_data_end+0xfffe6630>
   2663c:	8809883a 	mov	r4,r17
   26640:	00263f80 	call	263f8 <_Balloc>
   26644:	d8c00717 	ldw	r3,28(sp)
   26648:	10c00515 	stw	r3,20(r2)
   2664c:	00c00044 	movi	r3,1
   26650:	10c00415 	stw	r3,16(r2)
   26654:	00c00244 	movi	r3,9
   26658:	1cc0210e 	bge	r3,r19,266e0 <__s2b+0xf8>
   2665c:	80eb883a 	add	r21,r16,r3
   26660:	a829883a 	mov	r20,r21
   26664:	84e1883a 	add	r16,r16,r19
   26668:	a1c00007 	ldb	r7,0(r20)
   2666c:	01800284 	movi	r6,10
   26670:	a5000044 	addi	r20,r20,1
   26674:	100b883a 	mov	r5,r2
   26678:	39fff404 	addi	r7,r7,-48
   2667c:	8809883a 	mov	r4,r17
   26680:	00264c80 	call	264c8 <__multadd>
   26684:	a43ff81e 	bne	r20,r16,26668 <__alt_data_end+0xfffe6668>
   26688:	ace1883a 	add	r16,r21,r19
   2668c:	843ffe04 	addi	r16,r16,-8
   26690:	9c800a0e 	bge	r19,r18,266bc <__s2b+0xd4>
   26694:	94e5c83a 	sub	r18,r18,r19
   26698:	84a5883a 	add	r18,r16,r18
   2669c:	81c00007 	ldb	r7,0(r16)
   266a0:	01800284 	movi	r6,10
   266a4:	84000044 	addi	r16,r16,1
   266a8:	100b883a 	mov	r5,r2
   266ac:	39fff404 	addi	r7,r7,-48
   266b0:	8809883a 	mov	r4,r17
   266b4:	00264c80 	call	264c8 <__multadd>
   266b8:	84bff81e 	bne	r16,r18,2669c <__alt_data_end+0xfffe669c>
   266bc:	dfc00617 	ldw	ra,24(sp)
   266c0:	dd400517 	ldw	r21,20(sp)
   266c4:	dd000417 	ldw	r20,16(sp)
   266c8:	dcc00317 	ldw	r19,12(sp)
   266cc:	dc800217 	ldw	r18,8(sp)
   266d0:	dc400117 	ldw	r17,4(sp)
   266d4:	dc000017 	ldw	r16,0(sp)
   266d8:	dec00704 	addi	sp,sp,28
   266dc:	f800283a 	ret
   266e0:	84000284 	addi	r16,r16,10
   266e4:	1827883a 	mov	r19,r3
   266e8:	003fe906 	br	26690 <__alt_data_end+0xfffe6690>

000266ec <__hi0bits>:
   266ec:	20bfffec 	andhi	r2,r4,65535
   266f0:	1000141e 	bne	r2,zero,26744 <__hi0bits+0x58>
   266f4:	2008943a 	slli	r4,r4,16
   266f8:	00800404 	movi	r2,16
   266fc:	20ffc02c 	andhi	r3,r4,65280
   26700:	1800021e 	bne	r3,zero,2670c <__hi0bits+0x20>
   26704:	2008923a 	slli	r4,r4,8
   26708:	10800204 	addi	r2,r2,8
   2670c:	20fc002c 	andhi	r3,r4,61440
   26710:	1800021e 	bne	r3,zero,2671c <__hi0bits+0x30>
   26714:	2008913a 	slli	r4,r4,4
   26718:	10800104 	addi	r2,r2,4
   2671c:	20f0002c 	andhi	r3,r4,49152
   26720:	1800031e 	bne	r3,zero,26730 <__hi0bits+0x44>
   26724:	2109883a 	add	r4,r4,r4
   26728:	10800084 	addi	r2,r2,2
   2672c:	2109883a 	add	r4,r4,r4
   26730:	20000316 	blt	r4,zero,26740 <__hi0bits+0x54>
   26734:	2110002c 	andhi	r4,r4,16384
   26738:	2000041e 	bne	r4,zero,2674c <__hi0bits+0x60>
   2673c:	00800804 	movi	r2,32
   26740:	f800283a 	ret
   26744:	0005883a 	mov	r2,zero
   26748:	003fec06 	br	266fc <__alt_data_end+0xfffe66fc>
   2674c:	10800044 	addi	r2,r2,1
   26750:	f800283a 	ret

00026754 <__lo0bits>:
   26754:	20c00017 	ldw	r3,0(r4)
   26758:	188001cc 	andi	r2,r3,7
   2675c:	10000826 	beq	r2,zero,26780 <__lo0bits+0x2c>
   26760:	1880004c 	andi	r2,r3,1
   26764:	1000211e 	bne	r2,zero,267ec <__lo0bits+0x98>
   26768:	1880008c 	andi	r2,r3,2
   2676c:	1000211e 	bne	r2,zero,267f4 <__lo0bits+0xa0>
   26770:	1806d0ba 	srli	r3,r3,2
   26774:	00800084 	movi	r2,2
   26778:	20c00015 	stw	r3,0(r4)
   2677c:	f800283a 	ret
   26780:	18bfffcc 	andi	r2,r3,65535
   26784:	10001326 	beq	r2,zero,267d4 <__lo0bits+0x80>
   26788:	0005883a 	mov	r2,zero
   2678c:	19403fcc 	andi	r5,r3,255
   26790:	2800021e 	bne	r5,zero,2679c <__lo0bits+0x48>
   26794:	1806d23a 	srli	r3,r3,8
   26798:	10800204 	addi	r2,r2,8
   2679c:	194003cc 	andi	r5,r3,15
   267a0:	2800021e 	bne	r5,zero,267ac <__lo0bits+0x58>
   267a4:	1806d13a 	srli	r3,r3,4
   267a8:	10800104 	addi	r2,r2,4
   267ac:	194000cc 	andi	r5,r3,3
   267b0:	2800021e 	bne	r5,zero,267bc <__lo0bits+0x68>
   267b4:	1806d0ba 	srli	r3,r3,2
   267b8:	10800084 	addi	r2,r2,2
   267bc:	1940004c 	andi	r5,r3,1
   267c0:	2800081e 	bne	r5,zero,267e4 <__lo0bits+0x90>
   267c4:	1806d07a 	srli	r3,r3,1
   267c8:	1800051e 	bne	r3,zero,267e0 <__lo0bits+0x8c>
   267cc:	00800804 	movi	r2,32
   267d0:	f800283a 	ret
   267d4:	1806d43a 	srli	r3,r3,16
   267d8:	00800404 	movi	r2,16
   267dc:	003feb06 	br	2678c <__alt_data_end+0xfffe678c>
   267e0:	10800044 	addi	r2,r2,1
   267e4:	20c00015 	stw	r3,0(r4)
   267e8:	f800283a 	ret
   267ec:	0005883a 	mov	r2,zero
   267f0:	f800283a 	ret
   267f4:	1806d07a 	srli	r3,r3,1
   267f8:	00800044 	movi	r2,1
   267fc:	20c00015 	stw	r3,0(r4)
   26800:	f800283a 	ret

00026804 <__i2b>:
   26804:	defffd04 	addi	sp,sp,-12
   26808:	dc000015 	stw	r16,0(sp)
   2680c:	04000044 	movi	r16,1
   26810:	dc400115 	stw	r17,4(sp)
   26814:	2823883a 	mov	r17,r5
   26818:	800b883a 	mov	r5,r16
   2681c:	dfc00215 	stw	ra,8(sp)
   26820:	00263f80 	call	263f8 <_Balloc>
   26824:	14400515 	stw	r17,20(r2)
   26828:	14000415 	stw	r16,16(r2)
   2682c:	dfc00217 	ldw	ra,8(sp)
   26830:	dc400117 	ldw	r17,4(sp)
   26834:	dc000017 	ldw	r16,0(sp)
   26838:	dec00304 	addi	sp,sp,12
   2683c:	f800283a 	ret

00026840 <__multiply>:
   26840:	defffa04 	addi	sp,sp,-24
   26844:	dcc00315 	stw	r19,12(sp)
   26848:	dc800215 	stw	r18,8(sp)
   2684c:	34c00417 	ldw	r19,16(r6)
   26850:	2c800417 	ldw	r18,16(r5)
   26854:	dd000415 	stw	r20,16(sp)
   26858:	dc400115 	stw	r17,4(sp)
   2685c:	dfc00515 	stw	ra,20(sp)
   26860:	dc000015 	stw	r16,0(sp)
   26864:	2829883a 	mov	r20,r5
   26868:	3023883a 	mov	r17,r6
   2686c:	94c0050e 	bge	r18,r19,26884 <__multiply+0x44>
   26870:	9007883a 	mov	r3,r18
   26874:	3029883a 	mov	r20,r6
   26878:	9825883a 	mov	r18,r19
   2687c:	2823883a 	mov	r17,r5
   26880:	1827883a 	mov	r19,r3
   26884:	a0800217 	ldw	r2,8(r20)
   26888:	94e1883a 	add	r16,r18,r19
   2688c:	a1400117 	ldw	r5,4(r20)
   26890:	1400010e 	bge	r2,r16,26898 <__multiply+0x58>
   26894:	29400044 	addi	r5,r5,1
   26898:	00263f80 	call	263f8 <_Balloc>
   2689c:	8415883a 	add	r10,r16,r16
   268a0:	12c00504 	addi	r11,r2,20
   268a4:	5295883a 	add	r10,r10,r10
   268a8:	5a95883a 	add	r10,r11,r10
   268ac:	5807883a 	mov	r3,r11
   268b0:	5a80032e 	bgeu	r11,r10,268c0 <__multiply+0x80>
   268b4:	18000015 	stw	zero,0(r3)
   268b8:	18c00104 	addi	r3,r3,4
   268bc:	1abffd36 	bltu	r3,r10,268b4 <__alt_data_end+0xfffe68b4>
   268c0:	9ce7883a 	add	r19,r19,r19
   268c4:	94a5883a 	add	r18,r18,r18
   268c8:	89800504 	addi	r6,r17,20
   268cc:	9ce7883a 	add	r19,r19,r19
   268d0:	a3400504 	addi	r13,r20,20
   268d4:	94a5883a 	add	r18,r18,r18
   268d8:	34d9883a 	add	r12,r6,r19
   268dc:	6c93883a 	add	r9,r13,r18
   268e0:	3300422e 	bgeu	r6,r12,269ec <__multiply+0x1ac>
   268e4:	37c00017 	ldw	ra,0(r6)
   268e8:	fbffffcc 	andi	r15,ra,65535
   268ec:	78001b26 	beq	r15,zero,2695c <__multiply+0x11c>
   268f0:	5811883a 	mov	r8,r11
   268f4:	681d883a 	mov	r14,r13
   268f8:	000f883a 	mov	r7,zero
   268fc:	71000017 	ldw	r4,0(r14)
   26900:	40c00017 	ldw	r3,0(r8)
   26904:	73800104 	addi	r14,r14,4
   26908:	217fffcc 	andi	r5,r4,65535
   2690c:	2bcb383a 	mul	r5,r5,r15
   26910:	2008d43a 	srli	r4,r4,16
   26914:	1c7fffcc 	andi	r17,r3,65535
   26918:	2c4b883a 	add	r5,r5,r17
   2691c:	29cb883a 	add	r5,r5,r7
   26920:	23c9383a 	mul	r4,r4,r15
   26924:	1806d43a 	srli	r3,r3,16
   26928:	280ed43a 	srli	r7,r5,16
   2692c:	297fffcc 	andi	r5,r5,65535
   26930:	20c7883a 	add	r3,r4,r3
   26934:	19c7883a 	add	r3,r3,r7
   26938:	1808943a 	slli	r4,r3,16
   2693c:	4023883a 	mov	r17,r8
   26940:	180ed43a 	srli	r7,r3,16
   26944:	214ab03a 	or	r5,r4,r5
   26948:	41400015 	stw	r5,0(r8)
   2694c:	42000104 	addi	r8,r8,4
   26950:	727fea36 	bltu	r14,r9,268fc <__alt_data_end+0xfffe68fc>
   26954:	89c00115 	stw	r7,4(r17)
   26958:	37c00017 	ldw	ra,0(r6)
   2695c:	f83ed43a 	srli	ra,ra,16
   26960:	f8001f26 	beq	ra,zero,269e0 <__multiply+0x1a0>
   26964:	58c00017 	ldw	r3,0(r11)
   26968:	681d883a 	mov	r14,r13
   2696c:	581f883a 	mov	r15,r11
   26970:	1811883a 	mov	r8,r3
   26974:	5825883a 	mov	r18,r11
   26978:	000f883a 	mov	r7,zero
   2697c:	00000106 	br	26984 <__multiply+0x144>
   26980:	8825883a 	mov	r18,r17
   26984:	7140000b 	ldhu	r5,0(r14)
   26988:	4010d43a 	srli	r8,r8,16
   2698c:	193fffcc 	andi	r4,r3,65535
   26990:	2fcb383a 	mul	r5,r5,ra
   26994:	7bc00104 	addi	r15,r15,4
   26998:	73800104 	addi	r14,r14,4
   2699c:	2a0b883a 	add	r5,r5,r8
   269a0:	29cb883a 	add	r5,r5,r7
   269a4:	2806943a 	slli	r3,r5,16
   269a8:	94400104 	addi	r17,r18,4
   269ac:	280ad43a 	srli	r5,r5,16
   269b0:	1908b03a 	or	r4,r3,r4
   269b4:	793fff15 	stw	r4,-4(r15)
   269b8:	70ffff17 	ldw	r3,-4(r14)
   269bc:	8a000017 	ldw	r8,0(r17)
   269c0:	1806d43a 	srli	r3,r3,16
   269c4:	413fffcc 	andi	r4,r8,65535
   269c8:	1fc7383a 	mul	r3,r3,ra
   269cc:	1907883a 	add	r3,r3,r4
   269d0:	1947883a 	add	r3,r3,r5
   269d4:	180ed43a 	srli	r7,r3,16
   269d8:	727fe936 	bltu	r14,r9,26980 <__alt_data_end+0xfffe6980>
   269dc:	90c00115 	stw	r3,4(r18)
   269e0:	31800104 	addi	r6,r6,4
   269e4:	5ac00104 	addi	r11,r11,4
   269e8:	333fbe36 	bltu	r6,r12,268e4 <__alt_data_end+0xfffe68e4>
   269ec:	0400090e 	bge	zero,r16,26a14 <__multiply+0x1d4>
   269f0:	50ffff17 	ldw	r3,-4(r10)
   269f4:	52bfff04 	addi	r10,r10,-4
   269f8:	18000326 	beq	r3,zero,26a08 <__multiply+0x1c8>
   269fc:	00000506 	br	26a14 <__multiply+0x1d4>
   26a00:	50c00017 	ldw	r3,0(r10)
   26a04:	1800031e 	bne	r3,zero,26a14 <__multiply+0x1d4>
   26a08:	843fffc4 	addi	r16,r16,-1
   26a0c:	52bfff04 	addi	r10,r10,-4
   26a10:	803ffb1e 	bne	r16,zero,26a00 <__alt_data_end+0xfffe6a00>
   26a14:	14000415 	stw	r16,16(r2)
   26a18:	dfc00517 	ldw	ra,20(sp)
   26a1c:	dd000417 	ldw	r20,16(sp)
   26a20:	dcc00317 	ldw	r19,12(sp)
   26a24:	dc800217 	ldw	r18,8(sp)
   26a28:	dc400117 	ldw	r17,4(sp)
   26a2c:	dc000017 	ldw	r16,0(sp)
   26a30:	dec00604 	addi	sp,sp,24
   26a34:	f800283a 	ret

00026a38 <__pow5mult>:
   26a38:	defffa04 	addi	sp,sp,-24
   26a3c:	dcc00315 	stw	r19,12(sp)
   26a40:	dc000015 	stw	r16,0(sp)
   26a44:	dfc00515 	stw	ra,20(sp)
   26a48:	dd000415 	stw	r20,16(sp)
   26a4c:	dc800215 	stw	r18,8(sp)
   26a50:	dc400115 	stw	r17,4(sp)
   26a54:	308000cc 	andi	r2,r6,3
   26a58:	3021883a 	mov	r16,r6
   26a5c:	2027883a 	mov	r19,r4
   26a60:	10002f1e 	bne	r2,zero,26b20 <__pow5mult+0xe8>
   26a64:	2825883a 	mov	r18,r5
   26a68:	8021d0ba 	srai	r16,r16,2
   26a6c:	80001a26 	beq	r16,zero,26ad8 <__pow5mult+0xa0>
   26a70:	9c401217 	ldw	r17,72(r19)
   26a74:	8800061e 	bne	r17,zero,26a90 <__pow5mult+0x58>
   26a78:	00003406 	br	26b4c <__pow5mult+0x114>
   26a7c:	8021d07a 	srai	r16,r16,1
   26a80:	80001526 	beq	r16,zero,26ad8 <__pow5mult+0xa0>
   26a84:	88800017 	ldw	r2,0(r17)
   26a88:	10001c26 	beq	r2,zero,26afc <__pow5mult+0xc4>
   26a8c:	1023883a 	mov	r17,r2
   26a90:	8080004c 	andi	r2,r16,1
   26a94:	103ff926 	beq	r2,zero,26a7c <__alt_data_end+0xfffe6a7c>
   26a98:	880d883a 	mov	r6,r17
   26a9c:	900b883a 	mov	r5,r18
   26aa0:	9809883a 	mov	r4,r19
   26aa4:	00268400 	call	26840 <__multiply>
   26aa8:	90001b26 	beq	r18,zero,26b18 <__pow5mult+0xe0>
   26aac:	91000117 	ldw	r4,4(r18)
   26ab0:	98c01317 	ldw	r3,76(r19)
   26ab4:	8021d07a 	srai	r16,r16,1
   26ab8:	2109883a 	add	r4,r4,r4
   26abc:	2109883a 	add	r4,r4,r4
   26ac0:	1907883a 	add	r3,r3,r4
   26ac4:	19000017 	ldw	r4,0(r3)
   26ac8:	91000015 	stw	r4,0(r18)
   26acc:	1c800015 	stw	r18,0(r3)
   26ad0:	1025883a 	mov	r18,r2
   26ad4:	803feb1e 	bne	r16,zero,26a84 <__alt_data_end+0xfffe6a84>
   26ad8:	9005883a 	mov	r2,r18
   26adc:	dfc00517 	ldw	ra,20(sp)
   26ae0:	dd000417 	ldw	r20,16(sp)
   26ae4:	dcc00317 	ldw	r19,12(sp)
   26ae8:	dc800217 	ldw	r18,8(sp)
   26aec:	dc400117 	ldw	r17,4(sp)
   26af0:	dc000017 	ldw	r16,0(sp)
   26af4:	dec00604 	addi	sp,sp,24
   26af8:	f800283a 	ret
   26afc:	880d883a 	mov	r6,r17
   26b00:	880b883a 	mov	r5,r17
   26b04:	9809883a 	mov	r4,r19
   26b08:	00268400 	call	26840 <__multiply>
   26b0c:	88800015 	stw	r2,0(r17)
   26b10:	10000015 	stw	zero,0(r2)
   26b14:	003fdd06 	br	26a8c <__alt_data_end+0xfffe6a8c>
   26b18:	1025883a 	mov	r18,r2
   26b1c:	003fd706 	br	26a7c <__alt_data_end+0xfffe6a7c>
   26b20:	10bfffc4 	addi	r2,r2,-1
   26b24:	1085883a 	add	r2,r2,r2
   26b28:	00c000f4 	movhi	r3,3
   26b2c:	18c04104 	addi	r3,r3,260
   26b30:	1085883a 	add	r2,r2,r2
   26b34:	1885883a 	add	r2,r3,r2
   26b38:	11800017 	ldw	r6,0(r2)
   26b3c:	000f883a 	mov	r7,zero
   26b40:	00264c80 	call	264c8 <__multadd>
   26b44:	1025883a 	mov	r18,r2
   26b48:	003fc706 	br	26a68 <__alt_data_end+0xfffe6a68>
   26b4c:	05000044 	movi	r20,1
   26b50:	a00b883a 	mov	r5,r20
   26b54:	9809883a 	mov	r4,r19
   26b58:	00263f80 	call	263f8 <_Balloc>
   26b5c:	1023883a 	mov	r17,r2
   26b60:	00809c44 	movi	r2,625
   26b64:	88800515 	stw	r2,20(r17)
   26b68:	8d000415 	stw	r20,16(r17)
   26b6c:	9c401215 	stw	r17,72(r19)
   26b70:	88000015 	stw	zero,0(r17)
   26b74:	003fc606 	br	26a90 <__alt_data_end+0xfffe6a90>

00026b78 <__lshift>:
   26b78:	defff904 	addi	sp,sp,-28
   26b7c:	dd400515 	stw	r21,20(sp)
   26b80:	dcc00315 	stw	r19,12(sp)
   26b84:	302bd17a 	srai	r21,r6,5
   26b88:	2cc00417 	ldw	r19,16(r5)
   26b8c:	28800217 	ldw	r2,8(r5)
   26b90:	dd000415 	stw	r20,16(sp)
   26b94:	ace7883a 	add	r19,r21,r19
   26b98:	dc800215 	stw	r18,8(sp)
   26b9c:	dc400115 	stw	r17,4(sp)
   26ba0:	dc000015 	stw	r16,0(sp)
   26ba4:	dfc00615 	stw	ra,24(sp)
   26ba8:	9c000044 	addi	r16,r19,1
   26bac:	2823883a 	mov	r17,r5
   26bb0:	3029883a 	mov	r20,r6
   26bb4:	2025883a 	mov	r18,r4
   26bb8:	29400117 	ldw	r5,4(r5)
   26bbc:	1400030e 	bge	r2,r16,26bcc <__lshift+0x54>
   26bc0:	1085883a 	add	r2,r2,r2
   26bc4:	29400044 	addi	r5,r5,1
   26bc8:	143ffd16 	blt	r2,r16,26bc0 <__alt_data_end+0xfffe6bc0>
   26bcc:	9009883a 	mov	r4,r18
   26bd0:	00263f80 	call	263f8 <_Balloc>
   26bd4:	10c00504 	addi	r3,r2,20
   26bd8:	0540070e 	bge	zero,r21,26bf8 <__lshift+0x80>
   26bdc:	ad6b883a 	add	r21,r21,r21
   26be0:	ad6b883a 	add	r21,r21,r21
   26be4:	1809883a 	mov	r4,r3
   26be8:	1d47883a 	add	r3,r3,r21
   26bec:	20000015 	stw	zero,0(r4)
   26bf0:	21000104 	addi	r4,r4,4
   26bf4:	193ffd1e 	bne	r3,r4,26bec <__alt_data_end+0xfffe6bec>
   26bf8:	8a000417 	ldw	r8,16(r17)
   26bfc:	89000504 	addi	r4,r17,20
   26c00:	a18007cc 	andi	r6,r20,31
   26c04:	4211883a 	add	r8,r8,r8
   26c08:	4211883a 	add	r8,r8,r8
   26c0c:	2211883a 	add	r8,r4,r8
   26c10:	30002326 	beq	r6,zero,26ca0 <__lshift+0x128>
   26c14:	02400804 	movi	r9,32
   26c18:	4993c83a 	sub	r9,r9,r6
   26c1c:	000b883a 	mov	r5,zero
   26c20:	21c00017 	ldw	r7,0(r4)
   26c24:	1815883a 	mov	r10,r3
   26c28:	18c00104 	addi	r3,r3,4
   26c2c:	398e983a 	sll	r7,r7,r6
   26c30:	21000104 	addi	r4,r4,4
   26c34:	394ab03a 	or	r5,r7,r5
   26c38:	197fff15 	stw	r5,-4(r3)
   26c3c:	217fff17 	ldw	r5,-4(r4)
   26c40:	2a4ad83a 	srl	r5,r5,r9
   26c44:	223ff636 	bltu	r4,r8,26c20 <__alt_data_end+0xfffe6c20>
   26c48:	51400115 	stw	r5,4(r10)
   26c4c:	28001a1e 	bne	r5,zero,26cb8 <__lshift+0x140>
   26c50:	843fffc4 	addi	r16,r16,-1
   26c54:	14000415 	stw	r16,16(r2)
   26c58:	88000826 	beq	r17,zero,26c7c <__lshift+0x104>
   26c5c:	89000117 	ldw	r4,4(r17)
   26c60:	90c01317 	ldw	r3,76(r18)
   26c64:	2109883a 	add	r4,r4,r4
   26c68:	2109883a 	add	r4,r4,r4
   26c6c:	1907883a 	add	r3,r3,r4
   26c70:	19000017 	ldw	r4,0(r3)
   26c74:	89000015 	stw	r4,0(r17)
   26c78:	1c400015 	stw	r17,0(r3)
   26c7c:	dfc00617 	ldw	ra,24(sp)
   26c80:	dd400517 	ldw	r21,20(sp)
   26c84:	dd000417 	ldw	r20,16(sp)
   26c88:	dcc00317 	ldw	r19,12(sp)
   26c8c:	dc800217 	ldw	r18,8(sp)
   26c90:	dc400117 	ldw	r17,4(sp)
   26c94:	dc000017 	ldw	r16,0(sp)
   26c98:	dec00704 	addi	sp,sp,28
   26c9c:	f800283a 	ret
   26ca0:	21400017 	ldw	r5,0(r4)
   26ca4:	18c00104 	addi	r3,r3,4
   26ca8:	21000104 	addi	r4,r4,4
   26cac:	197fff15 	stw	r5,-4(r3)
   26cb0:	223ffb36 	bltu	r4,r8,26ca0 <__alt_data_end+0xfffe6ca0>
   26cb4:	003fe606 	br	26c50 <__alt_data_end+0xfffe6c50>
   26cb8:	9c000084 	addi	r16,r19,2
   26cbc:	003fe406 	br	26c50 <__alt_data_end+0xfffe6c50>

00026cc0 <__mcmp>:
   26cc0:	20800417 	ldw	r2,16(r4)
   26cc4:	28c00417 	ldw	r3,16(r5)
   26cc8:	10c5c83a 	sub	r2,r2,r3
   26ccc:	1000111e 	bne	r2,zero,26d14 <__mcmp+0x54>
   26cd0:	18c7883a 	add	r3,r3,r3
   26cd4:	18c7883a 	add	r3,r3,r3
   26cd8:	21000504 	addi	r4,r4,20
   26cdc:	29400504 	addi	r5,r5,20
   26ce0:	20c5883a 	add	r2,r4,r3
   26ce4:	28cb883a 	add	r5,r5,r3
   26ce8:	00000106 	br	26cf0 <__mcmp+0x30>
   26cec:	20800a2e 	bgeu	r4,r2,26d18 <__mcmp+0x58>
   26cf0:	10bfff04 	addi	r2,r2,-4
   26cf4:	297fff04 	addi	r5,r5,-4
   26cf8:	11800017 	ldw	r6,0(r2)
   26cfc:	28c00017 	ldw	r3,0(r5)
   26d00:	30fffa26 	beq	r6,r3,26cec <__alt_data_end+0xfffe6cec>
   26d04:	30c00236 	bltu	r6,r3,26d10 <__mcmp+0x50>
   26d08:	00800044 	movi	r2,1
   26d0c:	f800283a 	ret
   26d10:	00bfffc4 	movi	r2,-1
   26d14:	f800283a 	ret
   26d18:	0005883a 	mov	r2,zero
   26d1c:	f800283a 	ret

00026d20 <__mdiff>:
   26d20:	28c00417 	ldw	r3,16(r5)
   26d24:	30800417 	ldw	r2,16(r6)
   26d28:	defffa04 	addi	sp,sp,-24
   26d2c:	dcc00315 	stw	r19,12(sp)
   26d30:	dc800215 	stw	r18,8(sp)
   26d34:	dfc00515 	stw	ra,20(sp)
   26d38:	dd000415 	stw	r20,16(sp)
   26d3c:	dc400115 	stw	r17,4(sp)
   26d40:	dc000015 	stw	r16,0(sp)
   26d44:	1887c83a 	sub	r3,r3,r2
   26d48:	2825883a 	mov	r18,r5
   26d4c:	3027883a 	mov	r19,r6
   26d50:	1800141e 	bne	r3,zero,26da4 <__mdiff+0x84>
   26d54:	1085883a 	add	r2,r2,r2
   26d58:	1085883a 	add	r2,r2,r2
   26d5c:	2a000504 	addi	r8,r5,20
   26d60:	34000504 	addi	r16,r6,20
   26d64:	4087883a 	add	r3,r8,r2
   26d68:	8085883a 	add	r2,r16,r2
   26d6c:	00000106 	br	26d74 <__mdiff+0x54>
   26d70:	40c0592e 	bgeu	r8,r3,26ed8 <__mdiff+0x1b8>
   26d74:	18ffff04 	addi	r3,r3,-4
   26d78:	10bfff04 	addi	r2,r2,-4
   26d7c:	19c00017 	ldw	r7,0(r3)
   26d80:	11400017 	ldw	r5,0(r2)
   26d84:	397ffa26 	beq	r7,r5,26d70 <__alt_data_end+0xfffe6d70>
   26d88:	3940592e 	bgeu	r7,r5,26ef0 <__mdiff+0x1d0>
   26d8c:	9005883a 	mov	r2,r18
   26d90:	4023883a 	mov	r17,r8
   26d94:	9825883a 	mov	r18,r19
   26d98:	05000044 	movi	r20,1
   26d9c:	1027883a 	mov	r19,r2
   26da0:	00000406 	br	26db4 <__mdiff+0x94>
   26da4:	18005616 	blt	r3,zero,26f00 <__mdiff+0x1e0>
   26da8:	34400504 	addi	r17,r6,20
   26dac:	2c000504 	addi	r16,r5,20
   26db0:	0029883a 	mov	r20,zero
   26db4:	91400117 	ldw	r5,4(r18)
   26db8:	00263f80 	call	263f8 <_Balloc>
   26dbc:	92400417 	ldw	r9,16(r18)
   26dc0:	9b000417 	ldw	r12,16(r19)
   26dc4:	12c00504 	addi	r11,r2,20
   26dc8:	4a51883a 	add	r8,r9,r9
   26dcc:	6319883a 	add	r12,r12,r12
   26dd0:	4211883a 	add	r8,r8,r8
   26dd4:	6319883a 	add	r12,r12,r12
   26dd8:	15000315 	stw	r20,12(r2)
   26ddc:	8211883a 	add	r8,r16,r8
   26de0:	8b19883a 	add	r12,r17,r12
   26de4:	0007883a 	mov	r3,zero
   26de8:	81400017 	ldw	r5,0(r16)
   26dec:	89c00017 	ldw	r7,0(r17)
   26df0:	59800104 	addi	r6,r11,4
   26df4:	293fffcc 	andi	r4,r5,65535
   26df8:	20c7883a 	add	r3,r4,r3
   26dfc:	393fffcc 	andi	r4,r7,65535
   26e00:	1909c83a 	sub	r4,r3,r4
   26e04:	280ad43a 	srli	r5,r5,16
   26e08:	380ed43a 	srli	r7,r7,16
   26e0c:	2007d43a 	srai	r3,r4,16
   26e10:	213fffcc 	andi	r4,r4,65535
   26e14:	29cbc83a 	sub	r5,r5,r7
   26e18:	28c7883a 	add	r3,r5,r3
   26e1c:	180a943a 	slli	r5,r3,16
   26e20:	8c400104 	addi	r17,r17,4
   26e24:	84000104 	addi	r16,r16,4
   26e28:	2908b03a 	or	r4,r5,r4
   26e2c:	59000015 	stw	r4,0(r11)
   26e30:	1807d43a 	srai	r3,r3,16
   26e34:	3015883a 	mov	r10,r6
   26e38:	3017883a 	mov	r11,r6
   26e3c:	8b3fea36 	bltu	r17,r12,26de8 <__alt_data_end+0xfffe6de8>
   26e40:	8200162e 	bgeu	r16,r8,26e9c <__mdiff+0x17c>
   26e44:	8017883a 	mov	r11,r16
   26e48:	59400017 	ldw	r5,0(r11)
   26e4c:	31800104 	addi	r6,r6,4
   26e50:	5ac00104 	addi	r11,r11,4
   26e54:	293fffcc 	andi	r4,r5,65535
   26e58:	20c7883a 	add	r3,r4,r3
   26e5c:	280ed43a 	srli	r7,r5,16
   26e60:	180bd43a 	srai	r5,r3,16
   26e64:	193fffcc 	andi	r4,r3,65535
   26e68:	3947883a 	add	r3,r7,r5
   26e6c:	180a943a 	slli	r5,r3,16
   26e70:	1807d43a 	srai	r3,r3,16
   26e74:	2908b03a 	or	r4,r5,r4
   26e78:	313fff15 	stw	r4,-4(r6)
   26e7c:	5a3ff236 	bltu	r11,r8,26e48 <__alt_data_end+0xfffe6e48>
   26e80:	0406303a 	nor	r3,zero,r16
   26e84:	1a07883a 	add	r3,r3,r8
   26e88:	1806d0ba 	srli	r3,r3,2
   26e8c:	18c00044 	addi	r3,r3,1
   26e90:	18c7883a 	add	r3,r3,r3
   26e94:	18c7883a 	add	r3,r3,r3
   26e98:	50d5883a 	add	r10,r10,r3
   26e9c:	50ffff04 	addi	r3,r10,-4
   26ea0:	2000041e 	bne	r4,zero,26eb4 <__mdiff+0x194>
   26ea4:	18ffff04 	addi	r3,r3,-4
   26ea8:	19000017 	ldw	r4,0(r3)
   26eac:	4a7fffc4 	addi	r9,r9,-1
   26eb0:	203ffc26 	beq	r4,zero,26ea4 <__alt_data_end+0xfffe6ea4>
   26eb4:	12400415 	stw	r9,16(r2)
   26eb8:	dfc00517 	ldw	ra,20(sp)
   26ebc:	dd000417 	ldw	r20,16(sp)
   26ec0:	dcc00317 	ldw	r19,12(sp)
   26ec4:	dc800217 	ldw	r18,8(sp)
   26ec8:	dc400117 	ldw	r17,4(sp)
   26ecc:	dc000017 	ldw	r16,0(sp)
   26ed0:	dec00604 	addi	sp,sp,24
   26ed4:	f800283a 	ret
   26ed8:	000b883a 	mov	r5,zero
   26edc:	00263f80 	call	263f8 <_Balloc>
   26ee0:	00c00044 	movi	r3,1
   26ee4:	10c00415 	stw	r3,16(r2)
   26ee8:	10000515 	stw	zero,20(r2)
   26eec:	003ff206 	br	26eb8 <__alt_data_end+0xfffe6eb8>
   26ef0:	8023883a 	mov	r17,r16
   26ef4:	0029883a 	mov	r20,zero
   26ef8:	4021883a 	mov	r16,r8
   26efc:	003fad06 	br	26db4 <__alt_data_end+0xfffe6db4>
   26f00:	9005883a 	mov	r2,r18
   26f04:	94400504 	addi	r17,r18,20
   26f08:	9c000504 	addi	r16,r19,20
   26f0c:	9825883a 	mov	r18,r19
   26f10:	05000044 	movi	r20,1
   26f14:	1027883a 	mov	r19,r2
   26f18:	003fa606 	br	26db4 <__alt_data_end+0xfffe6db4>

00026f1c <__ulp>:
   26f1c:	295ffc2c 	andhi	r5,r5,32752
   26f20:	00bf3034 	movhi	r2,64704
   26f24:	2887883a 	add	r3,r5,r2
   26f28:	00c0020e 	bge	zero,r3,26f34 <__ulp+0x18>
   26f2c:	0005883a 	mov	r2,zero
   26f30:	f800283a 	ret
   26f34:	00c7c83a 	sub	r3,zero,r3
   26f38:	1807d53a 	srai	r3,r3,20
   26f3c:	008004c4 	movi	r2,19
   26f40:	10c00b0e 	bge	r2,r3,26f70 <__ulp+0x54>
   26f44:	18bffb04 	addi	r2,r3,-20
   26f48:	01000784 	movi	r4,30
   26f4c:	0007883a 	mov	r3,zero
   26f50:	20800516 	blt	r4,r2,26f68 <__ulp+0x4c>
   26f54:	010007c4 	movi	r4,31
   26f58:	2089c83a 	sub	r4,r4,r2
   26f5c:	00800044 	movi	r2,1
   26f60:	1104983a 	sll	r2,r2,r4
   26f64:	f800283a 	ret
   26f68:	00800044 	movi	r2,1
   26f6c:	f800283a 	ret
   26f70:	01400234 	movhi	r5,8
   26f74:	28c7d83a 	sra	r3,r5,r3
   26f78:	0005883a 	mov	r2,zero
   26f7c:	f800283a 	ret

00026f80 <__b2d>:
   26f80:	defffa04 	addi	sp,sp,-24
   26f84:	dc000015 	stw	r16,0(sp)
   26f88:	24000417 	ldw	r16,16(r4)
   26f8c:	dc400115 	stw	r17,4(sp)
   26f90:	24400504 	addi	r17,r4,20
   26f94:	8421883a 	add	r16,r16,r16
   26f98:	8421883a 	add	r16,r16,r16
   26f9c:	8c21883a 	add	r16,r17,r16
   26fa0:	dc800215 	stw	r18,8(sp)
   26fa4:	84bfff17 	ldw	r18,-4(r16)
   26fa8:	dd000415 	stw	r20,16(sp)
   26fac:	dcc00315 	stw	r19,12(sp)
   26fb0:	9009883a 	mov	r4,r18
   26fb4:	2829883a 	mov	r20,r5
   26fb8:	dfc00515 	stw	ra,20(sp)
   26fbc:	00266ec0 	call	266ec <__hi0bits>
   26fc0:	00c00804 	movi	r3,32
   26fc4:	1889c83a 	sub	r4,r3,r2
   26fc8:	a1000015 	stw	r4,0(r20)
   26fcc:	01000284 	movi	r4,10
   26fd0:	84ffff04 	addi	r19,r16,-4
   26fd4:	20801216 	blt	r4,r2,27020 <__b2d+0xa0>
   26fd8:	018002c4 	movi	r6,11
   26fdc:	308dc83a 	sub	r6,r6,r2
   26fe0:	9186d83a 	srl	r3,r18,r6
   26fe4:	18cffc34 	orhi	r3,r3,16368
   26fe8:	8cc0212e 	bgeu	r17,r19,27070 <__b2d+0xf0>
   26fec:	813ffe17 	ldw	r4,-8(r16)
   26ff0:	218cd83a 	srl	r6,r4,r6
   26ff4:	10800544 	addi	r2,r2,21
   26ff8:	9084983a 	sll	r2,r18,r2
   26ffc:	1184b03a 	or	r2,r2,r6
   27000:	dfc00517 	ldw	ra,20(sp)
   27004:	dd000417 	ldw	r20,16(sp)
   27008:	dcc00317 	ldw	r19,12(sp)
   2700c:	dc800217 	ldw	r18,8(sp)
   27010:	dc400117 	ldw	r17,4(sp)
   27014:	dc000017 	ldw	r16,0(sp)
   27018:	dec00604 	addi	sp,sp,24
   2701c:	f800283a 	ret
   27020:	8cc00f2e 	bgeu	r17,r19,27060 <__b2d+0xe0>
   27024:	117ffd44 	addi	r5,r2,-11
   27028:	80bffe17 	ldw	r2,-8(r16)
   2702c:	28000e26 	beq	r5,zero,27068 <__b2d+0xe8>
   27030:	1949c83a 	sub	r4,r3,r5
   27034:	9164983a 	sll	r18,r18,r5
   27038:	1106d83a 	srl	r3,r2,r4
   2703c:	81bffe04 	addi	r6,r16,-8
   27040:	948ffc34 	orhi	r18,r18,16368
   27044:	90c6b03a 	or	r3,r18,r3
   27048:	89800e2e 	bgeu	r17,r6,27084 <__b2d+0x104>
   2704c:	81bffd17 	ldw	r6,-12(r16)
   27050:	1144983a 	sll	r2,r2,r5
   27054:	310ad83a 	srl	r5,r6,r4
   27058:	2884b03a 	or	r2,r5,r2
   2705c:	003fe806 	br	27000 <__alt_data_end+0xfffe7000>
   27060:	10bffd44 	addi	r2,r2,-11
   27064:	1000041e 	bne	r2,zero,27078 <__b2d+0xf8>
   27068:	90cffc34 	orhi	r3,r18,16368
   2706c:	003fe406 	br	27000 <__alt_data_end+0xfffe7000>
   27070:	000d883a 	mov	r6,zero
   27074:	003fdf06 	br	26ff4 <__alt_data_end+0xfffe6ff4>
   27078:	90a4983a 	sll	r18,r18,r2
   2707c:	0005883a 	mov	r2,zero
   27080:	003ff906 	br	27068 <__alt_data_end+0xfffe7068>
   27084:	1144983a 	sll	r2,r2,r5
   27088:	003fdd06 	br	27000 <__alt_data_end+0xfffe7000>

0002708c <__d2b>:
   2708c:	defff804 	addi	sp,sp,-32
   27090:	dc000215 	stw	r16,8(sp)
   27094:	3021883a 	mov	r16,r6
   27098:	dc400315 	stw	r17,12(sp)
   2709c:	8022907a 	slli	r17,r16,1
   270a0:	dd000615 	stw	r20,24(sp)
   270a4:	2829883a 	mov	r20,r5
   270a8:	01400044 	movi	r5,1
   270ac:	dcc00515 	stw	r19,20(sp)
   270b0:	dc800415 	stw	r18,16(sp)
   270b4:	dfc00715 	stw	ra,28(sp)
   270b8:	3825883a 	mov	r18,r7
   270bc:	8822d57a 	srli	r17,r17,21
   270c0:	00263f80 	call	263f8 <_Balloc>
   270c4:	1027883a 	mov	r19,r2
   270c8:	00800434 	movhi	r2,16
   270cc:	10bfffc4 	addi	r2,r2,-1
   270d0:	808c703a 	and	r6,r16,r2
   270d4:	88000126 	beq	r17,zero,270dc <__d2b+0x50>
   270d8:	31800434 	orhi	r6,r6,16
   270dc:	d9800015 	stw	r6,0(sp)
   270e0:	a0002426 	beq	r20,zero,27174 <__d2b+0xe8>
   270e4:	d9000104 	addi	r4,sp,4
   270e8:	dd000115 	stw	r20,4(sp)
   270ec:	00267540 	call	26754 <__lo0bits>
   270f0:	d8c00017 	ldw	r3,0(sp)
   270f4:	10002f1e 	bne	r2,zero,271b4 <__d2b+0x128>
   270f8:	d9000117 	ldw	r4,4(sp)
   270fc:	99000515 	stw	r4,20(r19)
   27100:	1821003a 	cmpeq	r16,r3,zero
   27104:	01000084 	movi	r4,2
   27108:	2421c83a 	sub	r16,r4,r16
   2710c:	98c00615 	stw	r3,24(r19)
   27110:	9c000415 	stw	r16,16(r19)
   27114:	88001f1e 	bne	r17,zero,27194 <__d2b+0x108>
   27118:	10bef384 	addi	r2,r2,-1074
   2711c:	90800015 	stw	r2,0(r18)
   27120:	00900034 	movhi	r2,16384
   27124:	10bfffc4 	addi	r2,r2,-1
   27128:	8085883a 	add	r2,r16,r2
   2712c:	1085883a 	add	r2,r2,r2
   27130:	1085883a 	add	r2,r2,r2
   27134:	9885883a 	add	r2,r19,r2
   27138:	11000517 	ldw	r4,20(r2)
   2713c:	8020917a 	slli	r16,r16,5
   27140:	00266ec0 	call	266ec <__hi0bits>
   27144:	d8c00817 	ldw	r3,32(sp)
   27148:	8085c83a 	sub	r2,r16,r2
   2714c:	18800015 	stw	r2,0(r3)
   27150:	9805883a 	mov	r2,r19
   27154:	dfc00717 	ldw	ra,28(sp)
   27158:	dd000617 	ldw	r20,24(sp)
   2715c:	dcc00517 	ldw	r19,20(sp)
   27160:	dc800417 	ldw	r18,16(sp)
   27164:	dc400317 	ldw	r17,12(sp)
   27168:	dc000217 	ldw	r16,8(sp)
   2716c:	dec00804 	addi	sp,sp,32
   27170:	f800283a 	ret
   27174:	d809883a 	mov	r4,sp
   27178:	00267540 	call	26754 <__lo0bits>
   2717c:	d8c00017 	ldw	r3,0(sp)
   27180:	04000044 	movi	r16,1
   27184:	9c000415 	stw	r16,16(r19)
   27188:	98c00515 	stw	r3,20(r19)
   2718c:	10800804 	addi	r2,r2,32
   27190:	883fe126 	beq	r17,zero,27118 <__alt_data_end+0xfffe7118>
   27194:	00c00d44 	movi	r3,53
   27198:	8c7ef344 	addi	r17,r17,-1075
   2719c:	88a3883a 	add	r17,r17,r2
   271a0:	1885c83a 	sub	r2,r3,r2
   271a4:	d8c00817 	ldw	r3,32(sp)
   271a8:	94400015 	stw	r17,0(r18)
   271ac:	18800015 	stw	r2,0(r3)
   271b0:	003fe706 	br	27150 <__alt_data_end+0xfffe7150>
   271b4:	01000804 	movi	r4,32
   271b8:	2089c83a 	sub	r4,r4,r2
   271bc:	1908983a 	sll	r4,r3,r4
   271c0:	d9400117 	ldw	r5,4(sp)
   271c4:	1886d83a 	srl	r3,r3,r2
   271c8:	2148b03a 	or	r4,r4,r5
   271cc:	99000515 	stw	r4,20(r19)
   271d0:	d8c00015 	stw	r3,0(sp)
   271d4:	003fca06 	br	27100 <__alt_data_end+0xfffe7100>

000271d8 <__ratio>:
   271d8:	defff904 	addi	sp,sp,-28
   271dc:	dc400315 	stw	r17,12(sp)
   271e0:	2823883a 	mov	r17,r5
   271e4:	d9400104 	addi	r5,sp,4
   271e8:	dfc00615 	stw	ra,24(sp)
   271ec:	dcc00515 	stw	r19,20(sp)
   271f0:	dc800415 	stw	r18,16(sp)
   271f4:	2027883a 	mov	r19,r4
   271f8:	dc000215 	stw	r16,8(sp)
   271fc:	0026f800 	call	26f80 <__b2d>
   27200:	d80b883a 	mov	r5,sp
   27204:	8809883a 	mov	r4,r17
   27208:	1025883a 	mov	r18,r2
   2720c:	1821883a 	mov	r16,r3
   27210:	0026f800 	call	26f80 <__b2d>
   27214:	8a000417 	ldw	r8,16(r17)
   27218:	99000417 	ldw	r4,16(r19)
   2721c:	d9400117 	ldw	r5,4(sp)
   27220:	2209c83a 	sub	r4,r4,r8
   27224:	2010917a 	slli	r8,r4,5
   27228:	d9000017 	ldw	r4,0(sp)
   2722c:	2909c83a 	sub	r4,r5,r4
   27230:	4109883a 	add	r4,r8,r4
   27234:	01000e0e 	bge	zero,r4,27270 <__ratio+0x98>
   27238:	2008953a 	slli	r4,r4,20
   2723c:	2421883a 	add	r16,r4,r16
   27240:	100d883a 	mov	r6,r2
   27244:	180f883a 	mov	r7,r3
   27248:	9009883a 	mov	r4,r18
   2724c:	800b883a 	mov	r5,r16
   27250:	002b5c00 	call	2b5c0 <__divdf3>
   27254:	dfc00617 	ldw	ra,24(sp)
   27258:	dcc00517 	ldw	r19,20(sp)
   2725c:	dc800417 	ldw	r18,16(sp)
   27260:	dc400317 	ldw	r17,12(sp)
   27264:	dc000217 	ldw	r16,8(sp)
   27268:	dec00704 	addi	sp,sp,28
   2726c:	f800283a 	ret
   27270:	2008953a 	slli	r4,r4,20
   27274:	1907c83a 	sub	r3,r3,r4
   27278:	003ff106 	br	27240 <__alt_data_end+0xfffe7240>

0002727c <_mprec_log10>:
   2727c:	defffe04 	addi	sp,sp,-8
   27280:	dc000015 	stw	r16,0(sp)
   27284:	dfc00115 	stw	ra,4(sp)
   27288:	008005c4 	movi	r2,23
   2728c:	2021883a 	mov	r16,r4
   27290:	11000d0e 	bge	r2,r4,272c8 <_mprec_log10+0x4c>
   27294:	0005883a 	mov	r2,zero
   27298:	00cffc34 	movhi	r3,16368
   2729c:	843fffc4 	addi	r16,r16,-1
   272a0:	000d883a 	mov	r6,zero
   272a4:	01d00934 	movhi	r7,16420
   272a8:	1009883a 	mov	r4,r2
   272ac:	180b883a 	mov	r5,r3
   272b0:	002c1000 	call	2c100 <__muldf3>
   272b4:	803ff91e 	bne	r16,zero,2729c <__alt_data_end+0xfffe729c>
   272b8:	dfc00117 	ldw	ra,4(sp)
   272bc:	dc000017 	ldw	r16,0(sp)
   272c0:	dec00204 	addi	sp,sp,8
   272c4:	f800283a 	ret
   272c8:	202090fa 	slli	r16,r4,3
   272cc:	008000f4 	movhi	r2,3
   272d0:	10805804 	addi	r2,r2,352
   272d4:	1421883a 	add	r16,r2,r16
   272d8:	80800017 	ldw	r2,0(r16)
   272dc:	80c00117 	ldw	r3,4(r16)
   272e0:	dfc00117 	ldw	ra,4(sp)
   272e4:	dc000017 	ldw	r16,0(sp)
   272e8:	dec00204 	addi	sp,sp,8
   272ec:	f800283a 	ret

000272f0 <__copybits>:
   272f0:	297fffc4 	addi	r5,r5,-1
   272f4:	280fd17a 	srai	r7,r5,5
   272f8:	30c00417 	ldw	r3,16(r6)
   272fc:	30800504 	addi	r2,r6,20
   27300:	39c00044 	addi	r7,r7,1
   27304:	18c7883a 	add	r3,r3,r3
   27308:	39cf883a 	add	r7,r7,r7
   2730c:	18c7883a 	add	r3,r3,r3
   27310:	39cf883a 	add	r7,r7,r7
   27314:	10c7883a 	add	r3,r2,r3
   27318:	21cf883a 	add	r7,r4,r7
   2731c:	10c00d2e 	bgeu	r2,r3,27354 <__copybits+0x64>
   27320:	200b883a 	mov	r5,r4
   27324:	12000017 	ldw	r8,0(r2)
   27328:	29400104 	addi	r5,r5,4
   2732c:	10800104 	addi	r2,r2,4
   27330:	2a3fff15 	stw	r8,-4(r5)
   27334:	10fffb36 	bltu	r2,r3,27324 <__alt_data_end+0xfffe7324>
   27338:	1985c83a 	sub	r2,r3,r6
   2733c:	10bffac4 	addi	r2,r2,-21
   27340:	1004d0ba 	srli	r2,r2,2
   27344:	10800044 	addi	r2,r2,1
   27348:	1085883a 	add	r2,r2,r2
   2734c:	1085883a 	add	r2,r2,r2
   27350:	2089883a 	add	r4,r4,r2
   27354:	21c0032e 	bgeu	r4,r7,27364 <__copybits+0x74>
   27358:	20000015 	stw	zero,0(r4)
   2735c:	21000104 	addi	r4,r4,4
   27360:	21fffd36 	bltu	r4,r7,27358 <__alt_data_end+0xfffe7358>
   27364:	f800283a 	ret

00027368 <__any_on>:
   27368:	20c00417 	ldw	r3,16(r4)
   2736c:	2805d17a 	srai	r2,r5,5
   27370:	21000504 	addi	r4,r4,20
   27374:	18800d0e 	bge	r3,r2,273ac <__any_on+0x44>
   27378:	18c7883a 	add	r3,r3,r3
   2737c:	18c7883a 	add	r3,r3,r3
   27380:	20c7883a 	add	r3,r4,r3
   27384:	20c0192e 	bgeu	r4,r3,273ec <__any_on+0x84>
   27388:	18bfff17 	ldw	r2,-4(r3)
   2738c:	18ffff04 	addi	r3,r3,-4
   27390:	1000041e 	bne	r2,zero,273a4 <__any_on+0x3c>
   27394:	20c0142e 	bgeu	r4,r3,273e8 <__any_on+0x80>
   27398:	18ffff04 	addi	r3,r3,-4
   2739c:	19400017 	ldw	r5,0(r3)
   273a0:	283ffc26 	beq	r5,zero,27394 <__alt_data_end+0xfffe7394>
   273a4:	00800044 	movi	r2,1
   273a8:	f800283a 	ret
   273ac:	10c00a0e 	bge	r2,r3,273d8 <__any_on+0x70>
   273b0:	1085883a 	add	r2,r2,r2
   273b4:	1085883a 	add	r2,r2,r2
   273b8:	294007cc 	andi	r5,r5,31
   273bc:	2087883a 	add	r3,r4,r2
   273c0:	283ff026 	beq	r5,zero,27384 <__alt_data_end+0xfffe7384>
   273c4:	19800017 	ldw	r6,0(r3)
   273c8:	3144d83a 	srl	r2,r6,r5
   273cc:	114a983a 	sll	r5,r2,r5
   273d0:	317ff41e 	bne	r6,r5,273a4 <__alt_data_end+0xfffe73a4>
   273d4:	003feb06 	br	27384 <__alt_data_end+0xfffe7384>
   273d8:	1085883a 	add	r2,r2,r2
   273dc:	1085883a 	add	r2,r2,r2
   273e0:	2087883a 	add	r3,r4,r2
   273e4:	003fe706 	br	27384 <__alt_data_end+0xfffe7384>
   273e8:	f800283a 	ret
   273ec:	0005883a 	mov	r2,zero
   273f0:	f800283a 	ret

000273f4 <__fpclassifyd>:
   273f4:	00a00034 	movhi	r2,32768
   273f8:	10bfffc4 	addi	r2,r2,-1
   273fc:	2884703a 	and	r2,r5,r2
   27400:	10000726 	beq	r2,zero,27420 <__fpclassifyd+0x2c>
   27404:	00fffc34 	movhi	r3,65520
   27408:	019ff834 	movhi	r6,32736
   2740c:	28c7883a 	add	r3,r5,r3
   27410:	31bfffc4 	addi	r6,r6,-1
   27414:	30c00536 	bltu	r6,r3,2742c <__fpclassifyd+0x38>
   27418:	00800104 	movi	r2,4
   2741c:	f800283a 	ret
   27420:	2000021e 	bne	r4,zero,2742c <__fpclassifyd+0x38>
   27424:	00800084 	movi	r2,2
   27428:	f800283a 	ret
   2742c:	00dffc34 	movhi	r3,32752
   27430:	019ff834 	movhi	r6,32736
   27434:	28cb883a 	add	r5,r5,r3
   27438:	31bfffc4 	addi	r6,r6,-1
   2743c:	317ff62e 	bgeu	r6,r5,27418 <__alt_data_end+0xfffe7418>
   27440:	01400434 	movhi	r5,16
   27444:	297fffc4 	addi	r5,r5,-1
   27448:	28800236 	bltu	r5,r2,27454 <__fpclassifyd+0x60>
   2744c:	008000c4 	movi	r2,3
   27450:	f800283a 	ret
   27454:	10c00226 	beq	r2,r3,27460 <__fpclassifyd+0x6c>
   27458:	0005883a 	mov	r2,zero
   2745c:	f800283a 	ret
   27460:	2005003a 	cmpeq	r2,r4,zero
   27464:	f800283a 	ret

00027468 <_sbrk_r>:
   27468:	defffd04 	addi	sp,sp,-12
   2746c:	dc000015 	stw	r16,0(sp)
   27470:	040000f4 	movhi	r16,3
   27474:	dc400115 	stw	r17,4(sp)
   27478:	840e5e04 	addi	r16,r16,14712
   2747c:	2023883a 	mov	r17,r4
   27480:	2809883a 	mov	r4,r5
   27484:	dfc00215 	stw	ra,8(sp)
   27488:	80000015 	stw	zero,0(r16)
   2748c:	002dfe40 	call	2dfe4 <sbrk>
   27490:	00ffffc4 	movi	r3,-1
   27494:	10c00526 	beq	r2,r3,274ac <_sbrk_r+0x44>
   27498:	dfc00217 	ldw	ra,8(sp)
   2749c:	dc400117 	ldw	r17,4(sp)
   274a0:	dc000017 	ldw	r16,0(sp)
   274a4:	dec00304 	addi	sp,sp,12
   274a8:	f800283a 	ret
   274ac:	80c00017 	ldw	r3,0(r16)
   274b0:	183ff926 	beq	r3,zero,27498 <__alt_data_end+0xfffe7498>
   274b4:	88c00015 	stw	r3,0(r17)
   274b8:	003ff706 	br	27498 <__alt_data_end+0xfffe7498>

000274bc <__sread>:
   274bc:	defffe04 	addi	sp,sp,-8
   274c0:	dc000015 	stw	r16,0(sp)
   274c4:	2821883a 	mov	r16,r5
   274c8:	2940038f 	ldh	r5,14(r5)
   274cc:	dfc00115 	stw	ra,4(sp)
   274d0:	00299600 	call	29960 <_read_r>
   274d4:	10000716 	blt	r2,zero,274f4 <__sread+0x38>
   274d8:	80c01417 	ldw	r3,80(r16)
   274dc:	1887883a 	add	r3,r3,r2
   274e0:	80c01415 	stw	r3,80(r16)
   274e4:	dfc00117 	ldw	ra,4(sp)
   274e8:	dc000017 	ldw	r16,0(sp)
   274ec:	dec00204 	addi	sp,sp,8
   274f0:	f800283a 	ret
   274f4:	80c0030b 	ldhu	r3,12(r16)
   274f8:	18fbffcc 	andi	r3,r3,61439
   274fc:	80c0030d 	sth	r3,12(r16)
   27500:	dfc00117 	ldw	ra,4(sp)
   27504:	dc000017 	ldw	r16,0(sp)
   27508:	dec00204 	addi	sp,sp,8
   2750c:	f800283a 	ret

00027510 <__seofread>:
   27510:	0005883a 	mov	r2,zero
   27514:	f800283a 	ret

00027518 <__swrite>:
   27518:	2880030b 	ldhu	r2,12(r5)
   2751c:	defffb04 	addi	sp,sp,-20
   27520:	dcc00315 	stw	r19,12(sp)
   27524:	dc800215 	stw	r18,8(sp)
   27528:	dc400115 	stw	r17,4(sp)
   2752c:	dc000015 	stw	r16,0(sp)
   27530:	dfc00415 	stw	ra,16(sp)
   27534:	10c0400c 	andi	r3,r2,256
   27538:	2821883a 	mov	r16,r5
   2753c:	2023883a 	mov	r17,r4
   27540:	3025883a 	mov	r18,r6
   27544:	3827883a 	mov	r19,r7
   27548:	18000526 	beq	r3,zero,27560 <__swrite+0x48>
   2754c:	2940038f 	ldh	r5,14(r5)
   27550:	01c00084 	movi	r7,2
   27554:	000d883a 	mov	r6,zero
   27558:	00297a40 	call	297a4 <_lseek_r>
   2755c:	8080030b 	ldhu	r2,12(r16)
   27560:	8140038f 	ldh	r5,14(r16)
   27564:	10bbffcc 	andi	r2,r2,61439
   27568:	980f883a 	mov	r7,r19
   2756c:	900d883a 	mov	r6,r18
   27570:	8809883a 	mov	r4,r17
   27574:	8080030d 	sth	r2,12(r16)
   27578:	dfc00417 	ldw	ra,16(sp)
   2757c:	dcc00317 	ldw	r19,12(sp)
   27580:	dc800217 	ldw	r18,8(sp)
   27584:	dc400117 	ldw	r17,4(sp)
   27588:	dc000017 	ldw	r16,0(sp)
   2758c:	dec00504 	addi	sp,sp,20
   27590:	0028db41 	jmpi	28db4 <_write_r>

00027594 <__sseek>:
   27594:	defffe04 	addi	sp,sp,-8
   27598:	dc000015 	stw	r16,0(sp)
   2759c:	2821883a 	mov	r16,r5
   275a0:	2940038f 	ldh	r5,14(r5)
   275a4:	dfc00115 	stw	ra,4(sp)
   275a8:	00297a40 	call	297a4 <_lseek_r>
   275ac:	00ffffc4 	movi	r3,-1
   275b0:	10c00826 	beq	r2,r3,275d4 <__sseek+0x40>
   275b4:	80c0030b 	ldhu	r3,12(r16)
   275b8:	80801415 	stw	r2,80(r16)
   275bc:	18c40014 	ori	r3,r3,4096
   275c0:	80c0030d 	sth	r3,12(r16)
   275c4:	dfc00117 	ldw	ra,4(sp)
   275c8:	dc000017 	ldw	r16,0(sp)
   275cc:	dec00204 	addi	sp,sp,8
   275d0:	f800283a 	ret
   275d4:	80c0030b 	ldhu	r3,12(r16)
   275d8:	18fbffcc 	andi	r3,r3,61439
   275dc:	80c0030d 	sth	r3,12(r16)
   275e0:	dfc00117 	ldw	ra,4(sp)
   275e4:	dc000017 	ldw	r16,0(sp)
   275e8:	dec00204 	addi	sp,sp,8
   275ec:	f800283a 	ret

000275f0 <__sclose>:
   275f0:	2940038f 	ldh	r5,14(r5)
   275f4:	0028e141 	jmpi	28e14 <_close_r>

000275f8 <strcmp>:
   275f8:	2144b03a 	or	r2,r4,r5
   275fc:	108000cc 	andi	r2,r2,3
   27600:	1000171e 	bne	r2,zero,27660 <strcmp+0x68>
   27604:	20800017 	ldw	r2,0(r4)
   27608:	28c00017 	ldw	r3,0(r5)
   2760c:	10c0141e 	bne	r2,r3,27660 <strcmp+0x68>
   27610:	027fbff4 	movhi	r9,65279
   27614:	4a7fbfc4 	addi	r9,r9,-257
   27618:	0086303a 	nor	r3,zero,r2
   2761c:	02202074 	movhi	r8,32897
   27620:	1245883a 	add	r2,r2,r9
   27624:	42202004 	addi	r8,r8,-32640
   27628:	10c4703a 	and	r2,r2,r3
   2762c:	1204703a 	and	r2,r2,r8
   27630:	10000226 	beq	r2,zero,2763c <strcmp+0x44>
   27634:	00002306 	br	276c4 <strcmp+0xcc>
   27638:	1000221e 	bne	r2,zero,276c4 <strcmp+0xcc>
   2763c:	21000104 	addi	r4,r4,4
   27640:	20c00017 	ldw	r3,0(r4)
   27644:	29400104 	addi	r5,r5,4
   27648:	29800017 	ldw	r6,0(r5)
   2764c:	1a4f883a 	add	r7,r3,r9
   27650:	00c4303a 	nor	r2,zero,r3
   27654:	3884703a 	and	r2,r7,r2
   27658:	1204703a 	and	r2,r2,r8
   2765c:	19bff626 	beq	r3,r6,27638 <__alt_data_end+0xfffe7638>
   27660:	20800003 	ldbu	r2,0(r4)
   27664:	10c03fcc 	andi	r3,r2,255
   27668:	18c0201c 	xori	r3,r3,128
   2766c:	18ffe004 	addi	r3,r3,-128
   27670:	18000c26 	beq	r3,zero,276a4 <strcmp+0xac>
   27674:	29800007 	ldb	r6,0(r5)
   27678:	19800326 	beq	r3,r6,27688 <strcmp+0x90>
   2767c:	00001306 	br	276cc <strcmp+0xd4>
   27680:	29800007 	ldb	r6,0(r5)
   27684:	11800b1e 	bne	r2,r6,276b4 <strcmp+0xbc>
   27688:	21000044 	addi	r4,r4,1
   2768c:	20c00003 	ldbu	r3,0(r4)
   27690:	29400044 	addi	r5,r5,1
   27694:	18803fcc 	andi	r2,r3,255
   27698:	1080201c 	xori	r2,r2,128
   2769c:	10bfe004 	addi	r2,r2,-128
   276a0:	103ff71e 	bne	r2,zero,27680 <__alt_data_end+0xfffe7680>
   276a4:	0007883a 	mov	r3,zero
   276a8:	28800003 	ldbu	r2,0(r5)
   276ac:	1885c83a 	sub	r2,r3,r2
   276b0:	f800283a 	ret
   276b4:	28800003 	ldbu	r2,0(r5)
   276b8:	18c03fcc 	andi	r3,r3,255
   276bc:	1885c83a 	sub	r2,r3,r2
   276c0:	f800283a 	ret
   276c4:	0005883a 	mov	r2,zero
   276c8:	f800283a 	ret
   276cc:	10c03fcc 	andi	r3,r2,255
   276d0:	003ff506 	br	276a8 <__alt_data_end+0xfffe76a8>

000276d4 <strlen>:
   276d4:	208000cc 	andi	r2,r4,3
   276d8:	10002026 	beq	r2,zero,2775c <strlen+0x88>
   276dc:	20800007 	ldb	r2,0(r4)
   276e0:	10002026 	beq	r2,zero,27764 <strlen+0x90>
   276e4:	2005883a 	mov	r2,r4
   276e8:	00000206 	br	276f4 <strlen+0x20>
   276ec:	10c00007 	ldb	r3,0(r2)
   276f0:	18001826 	beq	r3,zero,27754 <strlen+0x80>
   276f4:	10800044 	addi	r2,r2,1
   276f8:	10c000cc 	andi	r3,r2,3
   276fc:	183ffb1e 	bne	r3,zero,276ec <__alt_data_end+0xfffe76ec>
   27700:	10c00017 	ldw	r3,0(r2)
   27704:	01ffbff4 	movhi	r7,65279
   27708:	39ffbfc4 	addi	r7,r7,-257
   2770c:	00ca303a 	nor	r5,zero,r3
   27710:	01a02074 	movhi	r6,32897
   27714:	19c7883a 	add	r3,r3,r7
   27718:	31a02004 	addi	r6,r6,-32640
   2771c:	1946703a 	and	r3,r3,r5
   27720:	1986703a 	and	r3,r3,r6
   27724:	1800091e 	bne	r3,zero,2774c <strlen+0x78>
   27728:	10800104 	addi	r2,r2,4
   2772c:	10c00017 	ldw	r3,0(r2)
   27730:	19cb883a 	add	r5,r3,r7
   27734:	00c6303a 	nor	r3,zero,r3
   27738:	28c6703a 	and	r3,r5,r3
   2773c:	1986703a 	and	r3,r3,r6
   27740:	183ff926 	beq	r3,zero,27728 <__alt_data_end+0xfffe7728>
   27744:	00000106 	br	2774c <strlen+0x78>
   27748:	10800044 	addi	r2,r2,1
   2774c:	10c00007 	ldb	r3,0(r2)
   27750:	183ffd1e 	bne	r3,zero,27748 <__alt_data_end+0xfffe7748>
   27754:	1105c83a 	sub	r2,r2,r4
   27758:	f800283a 	ret
   2775c:	2005883a 	mov	r2,r4
   27760:	003fe706 	br	27700 <__alt_data_end+0xfffe7700>
   27764:	0005883a 	mov	r2,zero
   27768:	f800283a 	ret

0002776c <__sprint_r.part.0>:
   2776c:	28801917 	ldw	r2,100(r5)
   27770:	defff604 	addi	sp,sp,-40
   27774:	dd400515 	stw	r21,20(sp)
   27778:	dfc00915 	stw	ra,36(sp)
   2777c:	df000815 	stw	fp,32(sp)
   27780:	ddc00715 	stw	r23,28(sp)
   27784:	dd800615 	stw	r22,24(sp)
   27788:	dd000415 	stw	r20,16(sp)
   2778c:	dcc00315 	stw	r19,12(sp)
   27790:	dc800215 	stw	r18,8(sp)
   27794:	dc400115 	stw	r17,4(sp)
   27798:	dc000015 	stw	r16,0(sp)
   2779c:	1088000c 	andi	r2,r2,8192
   277a0:	302b883a 	mov	r21,r6
   277a4:	10002e26 	beq	r2,zero,27860 <__sprint_r.part.0+0xf4>
   277a8:	30800217 	ldw	r2,8(r6)
   277ac:	35800017 	ldw	r22,0(r6)
   277b0:	10002926 	beq	r2,zero,27858 <__sprint_r.part.0+0xec>
   277b4:	2827883a 	mov	r19,r5
   277b8:	2029883a 	mov	r20,r4
   277bc:	b5c00104 	addi	r23,r22,4
   277c0:	04bfffc4 	movi	r18,-1
   277c4:	bc400017 	ldw	r17,0(r23)
   277c8:	b4000017 	ldw	r16,0(r22)
   277cc:	0039883a 	mov	fp,zero
   277d0:	8822d0ba 	srli	r17,r17,2
   277d4:	8800031e 	bne	r17,zero,277e4 <__sprint_r.part.0+0x78>
   277d8:	00001806 	br	2783c <__sprint_r.part.0+0xd0>
   277dc:	84000104 	addi	r16,r16,4
   277e0:	8f001526 	beq	r17,fp,27838 <__sprint_r.part.0+0xcc>
   277e4:	81400017 	ldw	r5,0(r16)
   277e8:	980d883a 	mov	r6,r19
   277ec:	a009883a 	mov	r4,r20
   277f0:	00291940 	call	29194 <_fputwc_r>
   277f4:	e7000044 	addi	fp,fp,1
   277f8:	14bff81e 	bne	r2,r18,277dc <__alt_data_end+0xfffe77dc>
   277fc:	9005883a 	mov	r2,r18
   27800:	a8000215 	stw	zero,8(r21)
   27804:	a8000115 	stw	zero,4(r21)
   27808:	dfc00917 	ldw	ra,36(sp)
   2780c:	df000817 	ldw	fp,32(sp)
   27810:	ddc00717 	ldw	r23,28(sp)
   27814:	dd800617 	ldw	r22,24(sp)
   27818:	dd400517 	ldw	r21,20(sp)
   2781c:	dd000417 	ldw	r20,16(sp)
   27820:	dcc00317 	ldw	r19,12(sp)
   27824:	dc800217 	ldw	r18,8(sp)
   27828:	dc400117 	ldw	r17,4(sp)
   2782c:	dc000017 	ldw	r16,0(sp)
   27830:	dec00a04 	addi	sp,sp,40
   27834:	f800283a 	ret
   27838:	a8800217 	ldw	r2,8(r21)
   2783c:	8c63883a 	add	r17,r17,r17
   27840:	8c63883a 	add	r17,r17,r17
   27844:	1445c83a 	sub	r2,r2,r17
   27848:	a8800215 	stw	r2,8(r21)
   2784c:	b5800204 	addi	r22,r22,8
   27850:	bdc00204 	addi	r23,r23,8
   27854:	103fdb1e 	bne	r2,zero,277c4 <__alt_data_end+0xfffe77c4>
   27858:	0005883a 	mov	r2,zero
   2785c:	003fe806 	br	27800 <__alt_data_end+0xfffe7800>
   27860:	00292940 	call	29294 <__sfvwrite_r>
   27864:	003fe606 	br	27800 <__alt_data_end+0xfffe7800>

00027868 <__sprint_r>:
   27868:	30c00217 	ldw	r3,8(r6)
   2786c:	18000126 	beq	r3,zero,27874 <__sprint_r+0xc>
   27870:	002776c1 	jmpi	2776c <__sprint_r.part.0>
   27874:	30000115 	stw	zero,4(r6)
   27878:	0005883a 	mov	r2,zero
   2787c:	f800283a 	ret

00027880 <___vfiprintf_internal_r>:
   27880:	deffc904 	addi	sp,sp,-220
   27884:	df003515 	stw	fp,212(sp)
   27888:	dd003115 	stw	r20,196(sp)
   2788c:	dfc03615 	stw	ra,216(sp)
   27890:	ddc03415 	stw	r23,208(sp)
   27894:	dd803315 	stw	r22,204(sp)
   27898:	dd403215 	stw	r21,200(sp)
   2789c:	dcc03015 	stw	r19,192(sp)
   278a0:	dc802f15 	stw	r18,188(sp)
   278a4:	dc402e15 	stw	r17,184(sp)
   278a8:	dc002d15 	stw	r16,180(sp)
   278ac:	d9002015 	stw	r4,128(sp)
   278b0:	d9c02215 	stw	r7,136(sp)
   278b4:	2829883a 	mov	r20,r5
   278b8:	3039883a 	mov	fp,r6
   278bc:	20000226 	beq	r4,zero,278c8 <___vfiprintf_internal_r+0x48>
   278c0:	20800e17 	ldw	r2,56(r4)
   278c4:	1000cf26 	beq	r2,zero,27c04 <___vfiprintf_internal_r+0x384>
   278c8:	a080030b 	ldhu	r2,12(r20)
   278cc:	10c8000c 	andi	r3,r2,8192
   278d0:	1800061e 	bne	r3,zero,278ec <___vfiprintf_internal_r+0x6c>
   278d4:	a1001917 	ldw	r4,100(r20)
   278d8:	00f7ffc4 	movi	r3,-8193
   278dc:	10880014 	ori	r2,r2,8192
   278e0:	20c6703a 	and	r3,r4,r3
   278e4:	a080030d 	sth	r2,12(r20)
   278e8:	a0c01915 	stw	r3,100(r20)
   278ec:	10c0020c 	andi	r3,r2,8
   278f0:	1800a926 	beq	r3,zero,27b98 <___vfiprintf_internal_r+0x318>
   278f4:	a0c00417 	ldw	r3,16(r20)
   278f8:	1800a726 	beq	r3,zero,27b98 <___vfiprintf_internal_r+0x318>
   278fc:	1080068c 	andi	r2,r2,26
   27900:	00c00284 	movi	r3,10
   27904:	10c0ac26 	beq	r2,r3,27bb8 <___vfiprintf_internal_r+0x338>
   27908:	da801a04 	addi	r10,sp,104
   2790c:	da801e15 	stw	r10,120(sp)
   27910:	d8801e17 	ldw	r2,120(sp)
   27914:	da8019c4 	addi	r10,sp,103
   27918:	058000f4 	movhi	r22,3
   2791c:	05c000f4 	movhi	r23,3
   27920:	da801f15 	stw	r10,124(sp)
   27924:	1295c83a 	sub	r10,r2,r10
   27928:	b5808e04 	addi	r22,r22,568
   2792c:	bdc08a04 	addi	r23,r23,552
   27930:	dec01a15 	stw	sp,104(sp)
   27934:	d8001c15 	stw	zero,112(sp)
   27938:	d8001b15 	stw	zero,108(sp)
   2793c:	d8002615 	stw	zero,152(sp)
   27940:	d8002315 	stw	zero,140(sp)
   27944:	da802715 	stw	r10,156(sp)
   27948:	d811883a 	mov	r8,sp
   2794c:	dd002115 	stw	r20,132(sp)
   27950:	e021883a 	mov	r16,fp
   27954:	80800007 	ldb	r2,0(r16)
   27958:	1003ea26 	beq	r2,zero,28904 <___vfiprintf_internal_r+0x1084>
   2795c:	00c00944 	movi	r3,37
   27960:	8025883a 	mov	r18,r16
   27964:	10c0021e 	bne	r2,r3,27970 <___vfiprintf_internal_r+0xf0>
   27968:	00001606 	br	279c4 <___vfiprintf_internal_r+0x144>
   2796c:	10c00326 	beq	r2,r3,2797c <___vfiprintf_internal_r+0xfc>
   27970:	94800044 	addi	r18,r18,1
   27974:	90800007 	ldb	r2,0(r18)
   27978:	103ffc1e 	bne	r2,zero,2796c <__alt_data_end+0xfffe796c>
   2797c:	9423c83a 	sub	r17,r18,r16
   27980:	88001026 	beq	r17,zero,279c4 <___vfiprintf_internal_r+0x144>
   27984:	d8c01c17 	ldw	r3,112(sp)
   27988:	d8801b17 	ldw	r2,108(sp)
   2798c:	44000015 	stw	r16,0(r8)
   27990:	88c7883a 	add	r3,r17,r3
   27994:	10800044 	addi	r2,r2,1
   27998:	44400115 	stw	r17,4(r8)
   2799c:	d8c01c15 	stw	r3,112(sp)
   279a0:	d8801b15 	stw	r2,108(sp)
   279a4:	010001c4 	movi	r4,7
   279a8:	2080760e 	bge	r4,r2,27b84 <___vfiprintf_internal_r+0x304>
   279ac:	1803821e 	bne	r3,zero,287b8 <___vfiprintf_internal_r+0xf38>
   279b0:	da802317 	ldw	r10,140(sp)
   279b4:	d8001b15 	stw	zero,108(sp)
   279b8:	d811883a 	mov	r8,sp
   279bc:	5455883a 	add	r10,r10,r17
   279c0:	da802315 	stw	r10,140(sp)
   279c4:	90800007 	ldb	r2,0(r18)
   279c8:	10044626 	beq	r2,zero,28ae4 <___vfiprintf_internal_r+0x1264>
   279cc:	90c00047 	ldb	r3,1(r18)
   279d0:	94000044 	addi	r16,r18,1
   279d4:	d8001d85 	stb	zero,118(sp)
   279d8:	0009883a 	mov	r4,zero
   279dc:	000f883a 	mov	r7,zero
   279e0:	027fffc4 	movi	r9,-1
   279e4:	0023883a 	mov	r17,zero
   279e8:	0029883a 	mov	r20,zero
   279ec:	01401604 	movi	r5,88
   279f0:	01800244 	movi	r6,9
   279f4:	03400a84 	movi	r13,42
   279f8:	03001b04 	movi	r12,108
   279fc:	84000044 	addi	r16,r16,1
   27a00:	18bff804 	addi	r2,r3,-32
   27a04:	28827336 	bltu	r5,r2,283d4 <___vfiprintf_internal_r+0xb54>
   27a08:	100490ba 	slli	r2,r2,2
   27a0c:	028000b4 	movhi	r10,2
   27a10:	529e8804 	addi	r10,r10,31264
   27a14:	1285883a 	add	r2,r2,r10
   27a18:	10800017 	ldw	r2,0(r2)
   27a1c:	1000683a 	jmp	r2
   27a20:	00028108 	cmpgei	zero,zero,2564
   27a24:	000283d4 	movui	zero,2575
   27a28:	000283d4 	movui	zero,2575
   27a2c:	00028128 	cmpgeui	zero,zero,2564
   27a30:	000283d4 	movui	zero,2575
   27a34:	000283d4 	movui	zero,2575
   27a38:	000283d4 	movui	zero,2575
   27a3c:	000283d4 	movui	zero,2575
   27a40:	000283d4 	movui	zero,2575
   27a44:	000283d4 	movui	zero,2575
   27a48:	00028310 	cmplti	zero,zero,2572
   27a4c:	0002832c 	andhi	zero,zero,2572
   27a50:	000283d4 	movui	zero,2575
   27a54:	00027c14 	movui	zero,2544
   27a58:	0002833c 	xorhi	zero,zero,2572
   27a5c:	000283d4 	movui	zero,2575
   27a60:	00028134 	movhi	zero,2564
   27a64:	00028140 	call	2814 <__alt_mem_onchip_memory2_0-0x1d7ec>
   27a68:	00028140 	call	2814 <__alt_mem_onchip_memory2_0-0x1d7ec>
   27a6c:	00028140 	call	2814 <__alt_mem_onchip_memory2_0-0x1d7ec>
   27a70:	00028140 	call	2814 <__alt_mem_onchip_memory2_0-0x1d7ec>
   27a74:	00028140 	call	2814 <__alt_mem_onchip_memory2_0-0x1d7ec>
   27a78:	00028140 	call	2814 <__alt_mem_onchip_memory2_0-0x1d7ec>
   27a7c:	00028140 	call	2814 <__alt_mem_onchip_memory2_0-0x1d7ec>
   27a80:	00028140 	call	2814 <__alt_mem_onchip_memory2_0-0x1d7ec>
   27a84:	00028140 	call	2814 <__alt_mem_onchip_memory2_0-0x1d7ec>
   27a88:	000283d4 	movui	zero,2575
   27a8c:	000283d4 	movui	zero,2575
   27a90:	000283d4 	movui	zero,2575
   27a94:	000283d4 	movui	zero,2575
   27a98:	000283d4 	movui	zero,2575
   27a9c:	000283d4 	movui	zero,2575
   27aa0:	000283d4 	movui	zero,2575
   27aa4:	000283d4 	movui	zero,2575
   27aa8:	000283d4 	movui	zero,2575
   27aac:	000283d4 	movui	zero,2575
   27ab0:	0002816c 	andhi	zero,zero,2565
   27ab4:	000283d4 	movui	zero,2575
   27ab8:	000283d4 	movui	zero,2575
   27abc:	000283d4 	movui	zero,2575
   27ac0:	000283d4 	movui	zero,2575
   27ac4:	000283d4 	movui	zero,2575
   27ac8:	000283d4 	movui	zero,2575
   27acc:	000283d4 	movui	zero,2575
   27ad0:	000283d4 	movui	zero,2575
   27ad4:	000283d4 	movui	zero,2575
   27ad8:	000283d4 	movui	zero,2575
   27adc:	000281a4 	muli	zero,zero,2566
   27ae0:	000283d4 	movui	zero,2575
   27ae4:	000283d4 	movui	zero,2575
   27ae8:	000283d4 	movui	zero,2575
   27aec:	000283d4 	movui	zero,2575
   27af0:	000283d4 	movui	zero,2575
   27af4:	000281fc 	xorhi	zero,zero,2567
   27af8:	000283d4 	movui	zero,2575
   27afc:	000283d4 	movui	zero,2575
   27b00:	0002826c 	andhi	zero,zero,2569
   27b04:	000283d4 	movui	zero,2575
   27b08:	000283d4 	movui	zero,2575
   27b0c:	000283d4 	movui	zero,2575
   27b10:	000283d4 	movui	zero,2575
   27b14:	000283d4 	movui	zero,2575
   27b18:	000283d4 	movui	zero,2575
   27b1c:	000283d4 	movui	zero,2575
   27b20:	000283d4 	movui	zero,2575
   27b24:	000283d4 	movui	zero,2575
   27b28:	000283d4 	movui	zero,2575
   27b2c:	00028018 	cmpnei	zero,zero,2560
   27b30:	00028044 	movi	zero,2561
   27b34:	000283d4 	movui	zero,2575
   27b38:	000283d4 	movui	zero,2575
   27b3c:	000283d4 	movui	zero,2575
   27b40:	0002837c 	xorhi	zero,zero,2573
   27b44:	00028044 	movi	zero,2561
   27b48:	000283d4 	movui	zero,2575
   27b4c:	000283d4 	movui	zero,2575
   27b50:	00027ed8 	cmpnei	zero,zero,2555
   27b54:	000283d4 	movui	zero,2575
   27b58:	00027ee8 	cmpgeui	zero,zero,2555
   27b5c:	00027f24 	muli	zero,zero,2556
   27b60:	00027c20 	cmpeqi	zero,zero,2544
   27b64:	00027ecc 	andi	zero,zero,2555
   27b68:	000283d4 	movui	zero,2575
   27b6c:	000282a8 	cmpgeui	zero,zero,2570
   27b70:	000283d4 	movui	zero,2575
   27b74:	00028300 	call	2830 <__alt_mem_onchip_memory2_0-0x1d7d0>
   27b78:	000283d4 	movui	zero,2575
   27b7c:	000283d4 	movui	zero,2575
   27b80:	00027fc4 	movi	zero,2559
   27b84:	42000204 	addi	r8,r8,8
   27b88:	da802317 	ldw	r10,140(sp)
   27b8c:	5455883a 	add	r10,r10,r17
   27b90:	da802315 	stw	r10,140(sp)
   27b94:	003f8b06 	br	279c4 <__alt_data_end+0xfffe79c4>
   27b98:	d9002017 	ldw	r4,128(sp)
   27b9c:	a00b883a 	mov	r5,r20
   27ba0:	00230200 	call	23020 <__swsetup_r>
   27ba4:	1003b11e 	bne	r2,zero,28a6c <___vfiprintf_internal_r+0x11ec>
   27ba8:	a080030b 	ldhu	r2,12(r20)
   27bac:	00c00284 	movi	r3,10
   27bb0:	1080068c 	andi	r2,r2,26
   27bb4:	10ff541e 	bne	r2,r3,27908 <__alt_data_end+0xfffe7908>
   27bb8:	a080038f 	ldh	r2,14(r20)
   27bbc:	103f5216 	blt	r2,zero,27908 <__alt_data_end+0xfffe7908>
   27bc0:	d9c02217 	ldw	r7,136(sp)
   27bc4:	d9002017 	ldw	r4,128(sp)
   27bc8:	e00d883a 	mov	r6,fp
   27bcc:	a00b883a 	mov	r5,r20
   27bd0:	0028cf80 	call	28cf8 <__sbprintf>
   27bd4:	dfc03617 	ldw	ra,216(sp)
   27bd8:	df003517 	ldw	fp,212(sp)
   27bdc:	ddc03417 	ldw	r23,208(sp)
   27be0:	dd803317 	ldw	r22,204(sp)
   27be4:	dd403217 	ldw	r21,200(sp)
   27be8:	dd003117 	ldw	r20,196(sp)
   27bec:	dcc03017 	ldw	r19,192(sp)
   27bf0:	dc802f17 	ldw	r18,188(sp)
   27bf4:	dc402e17 	ldw	r17,184(sp)
   27bf8:	dc002d17 	ldw	r16,180(sp)
   27bfc:	dec03704 	addi	sp,sp,220
   27c00:	f800283a 	ret
   27c04:	0024ff40 	call	24ff4 <__sinit>
   27c08:	003f2f06 	br	278c8 <__alt_data_end+0xfffe78c8>
   27c0c:	0463c83a 	sub	r17,zero,r17
   27c10:	d8802215 	stw	r2,136(sp)
   27c14:	a5000114 	ori	r20,r20,4
   27c18:	80c00007 	ldb	r3,0(r16)
   27c1c:	003f7706 	br	279fc <__alt_data_end+0xfffe79fc>
   27c20:	00800c04 	movi	r2,48
   27c24:	da802217 	ldw	r10,136(sp)
   27c28:	d8801d05 	stb	r2,116(sp)
   27c2c:	00801e04 	movi	r2,120
   27c30:	d8801d45 	stb	r2,117(sp)
   27c34:	d8001d85 	stb	zero,118(sp)
   27c38:	50c00104 	addi	r3,r10,4
   27c3c:	54800017 	ldw	r18,0(r10)
   27c40:	0027883a 	mov	r19,zero
   27c44:	a0800094 	ori	r2,r20,2
   27c48:	48030b16 	blt	r9,zero,28878 <___vfiprintf_internal_r+0xff8>
   27c4c:	00bfdfc4 	movi	r2,-129
   27c50:	a096703a 	and	r11,r20,r2
   27c54:	d8c02215 	stw	r3,136(sp)
   27c58:	5d000094 	ori	r20,r11,2
   27c5c:	90032b1e 	bne	r18,zero,2890c <___vfiprintf_internal_r+0x108c>
   27c60:	008000f4 	movhi	r2,3
   27c64:	10802904 	addi	r2,r2,164
   27c68:	d8802615 	stw	r2,152(sp)
   27c6c:	0039883a 	mov	fp,zero
   27c70:	48017b1e 	bne	r9,zero,28260 <___vfiprintf_internal_r+0x9e0>
   27c74:	0013883a 	mov	r9,zero
   27c78:	0027883a 	mov	r19,zero
   27c7c:	dd401a04 	addi	r21,sp,104
   27c80:	4825883a 	mov	r18,r9
   27c84:	4cc0010e 	bge	r9,r19,27c8c <___vfiprintf_internal_r+0x40c>
   27c88:	9825883a 	mov	r18,r19
   27c8c:	e7003fcc 	andi	fp,fp,255
   27c90:	e700201c 	xori	fp,fp,128
   27c94:	e73fe004 	addi	fp,fp,-128
   27c98:	e0000126 	beq	fp,zero,27ca0 <___vfiprintf_internal_r+0x420>
   27c9c:	94800044 	addi	r18,r18,1
   27ca0:	a380008c 	andi	r14,r20,2
   27ca4:	70000126 	beq	r14,zero,27cac <___vfiprintf_internal_r+0x42c>
   27ca8:	94800084 	addi	r18,r18,2
   27cac:	a700210c 	andi	fp,r20,132
   27cb0:	e001df1e 	bne	fp,zero,28430 <___vfiprintf_internal_r+0xbb0>
   27cb4:	8c87c83a 	sub	r3,r17,r18
   27cb8:	00c1dd0e 	bge	zero,r3,28430 <___vfiprintf_internal_r+0xbb0>
   27cbc:	01c00404 	movi	r7,16
   27cc0:	d8801c17 	ldw	r2,112(sp)
   27cc4:	38c3ad0e 	bge	r7,r3,28b7c <___vfiprintf_internal_r+0x12fc>
   27cc8:	028000f4 	movhi	r10,3
   27ccc:	52808e04 	addi	r10,r10,568
   27cd0:	dc002915 	stw	r16,164(sp)
   27cd4:	d9801b17 	ldw	r6,108(sp)
   27cd8:	da802415 	stw	r10,144(sp)
   27cdc:	03c001c4 	movi	r15,7
   27ce0:	da402515 	stw	r9,148(sp)
   27ce4:	db802815 	stw	r14,160(sp)
   27ce8:	1821883a 	mov	r16,r3
   27cec:	00000506 	br	27d04 <___vfiprintf_internal_r+0x484>
   27cf0:	31400084 	addi	r5,r6,2
   27cf4:	42000204 	addi	r8,r8,8
   27cf8:	200d883a 	mov	r6,r4
   27cfc:	843ffc04 	addi	r16,r16,-16
   27d00:	3c000d0e 	bge	r7,r16,27d38 <___vfiprintf_internal_r+0x4b8>
   27d04:	10800404 	addi	r2,r2,16
   27d08:	31000044 	addi	r4,r6,1
   27d0c:	45800015 	stw	r22,0(r8)
   27d10:	41c00115 	stw	r7,4(r8)
   27d14:	d8801c15 	stw	r2,112(sp)
   27d18:	d9001b15 	stw	r4,108(sp)
   27d1c:	793ff40e 	bge	r15,r4,27cf0 <__alt_data_end+0xfffe7cf0>
   27d20:	1001b51e 	bne	r2,zero,283f8 <___vfiprintf_internal_r+0xb78>
   27d24:	843ffc04 	addi	r16,r16,-16
   27d28:	000d883a 	mov	r6,zero
   27d2c:	01400044 	movi	r5,1
   27d30:	d811883a 	mov	r8,sp
   27d34:	3c3ff316 	blt	r7,r16,27d04 <__alt_data_end+0xfffe7d04>
   27d38:	8007883a 	mov	r3,r16
   27d3c:	da402517 	ldw	r9,148(sp)
   27d40:	db802817 	ldw	r14,160(sp)
   27d44:	dc002917 	ldw	r16,164(sp)
   27d48:	da802417 	ldw	r10,144(sp)
   27d4c:	1885883a 	add	r2,r3,r2
   27d50:	40c00115 	stw	r3,4(r8)
   27d54:	42800015 	stw	r10,0(r8)
   27d58:	d8801c15 	stw	r2,112(sp)
   27d5c:	d9401b15 	stw	r5,108(sp)
   27d60:	00c001c4 	movi	r3,7
   27d64:	19426016 	blt	r3,r5,286e8 <___vfiprintf_internal_r+0xe68>
   27d68:	d8c01d87 	ldb	r3,118(sp)
   27d6c:	42000204 	addi	r8,r8,8
   27d70:	29000044 	addi	r4,r5,1
   27d74:	1801b31e 	bne	r3,zero,28444 <___vfiprintf_internal_r+0xbc4>
   27d78:	7001c026 	beq	r14,zero,2847c <___vfiprintf_internal_r+0xbfc>
   27d7c:	d8c01d04 	addi	r3,sp,116
   27d80:	10800084 	addi	r2,r2,2
   27d84:	40c00015 	stw	r3,0(r8)
   27d88:	00c00084 	movi	r3,2
   27d8c:	40c00115 	stw	r3,4(r8)
   27d90:	d8801c15 	stw	r2,112(sp)
   27d94:	d9001b15 	stw	r4,108(sp)
   27d98:	00c001c4 	movi	r3,7
   27d9c:	1902650e 	bge	r3,r4,28734 <___vfiprintf_internal_r+0xeb4>
   27da0:	10029a1e 	bne	r2,zero,2880c <___vfiprintf_internal_r+0xf8c>
   27da4:	00c02004 	movi	r3,128
   27da8:	01000044 	movi	r4,1
   27dac:	000b883a 	mov	r5,zero
   27db0:	d811883a 	mov	r8,sp
   27db4:	e0c1b31e 	bne	fp,r3,28484 <___vfiprintf_internal_r+0xc04>
   27db8:	8cb9c83a 	sub	fp,r17,r18
   27dbc:	0701b10e 	bge	zero,fp,28484 <___vfiprintf_internal_r+0xc04>
   27dc0:	01c00404 	movi	r7,16
   27dc4:	3f03890e 	bge	r7,fp,28bec <___vfiprintf_internal_r+0x136c>
   27dc8:	00c000f4 	movhi	r3,3
   27dcc:	18c08a04 	addi	r3,r3,552
   27dd0:	d8c02415 	stw	r3,144(sp)
   27dd4:	8007883a 	mov	r3,r16
   27dd8:	034001c4 	movi	r13,7
   27ddc:	e021883a 	mov	r16,fp
   27de0:	da402515 	stw	r9,148(sp)
   27de4:	1839883a 	mov	fp,r3
   27de8:	00000506 	br	27e00 <___vfiprintf_internal_r+0x580>
   27dec:	29800084 	addi	r6,r5,2
   27df0:	42000204 	addi	r8,r8,8
   27df4:	180b883a 	mov	r5,r3
   27df8:	843ffc04 	addi	r16,r16,-16
   27dfc:	3c000d0e 	bge	r7,r16,27e34 <___vfiprintf_internal_r+0x5b4>
   27e00:	10800404 	addi	r2,r2,16
   27e04:	28c00044 	addi	r3,r5,1
   27e08:	45c00015 	stw	r23,0(r8)
   27e0c:	41c00115 	stw	r7,4(r8)
   27e10:	d8801c15 	stw	r2,112(sp)
   27e14:	d8c01b15 	stw	r3,108(sp)
   27e18:	68fff40e 	bge	r13,r3,27dec <__alt_data_end+0xfffe7dec>
   27e1c:	1002241e 	bne	r2,zero,286b0 <___vfiprintf_internal_r+0xe30>
   27e20:	843ffc04 	addi	r16,r16,-16
   27e24:	01800044 	movi	r6,1
   27e28:	000b883a 	mov	r5,zero
   27e2c:	d811883a 	mov	r8,sp
   27e30:	3c3ff316 	blt	r7,r16,27e00 <__alt_data_end+0xfffe7e00>
   27e34:	da402517 	ldw	r9,148(sp)
   27e38:	e007883a 	mov	r3,fp
   27e3c:	8039883a 	mov	fp,r16
   27e40:	1821883a 	mov	r16,r3
   27e44:	d8c02417 	ldw	r3,144(sp)
   27e48:	1705883a 	add	r2,r2,fp
   27e4c:	47000115 	stw	fp,4(r8)
   27e50:	40c00015 	stw	r3,0(r8)
   27e54:	d8801c15 	stw	r2,112(sp)
   27e58:	d9801b15 	stw	r6,108(sp)
   27e5c:	00c001c4 	movi	r3,7
   27e60:	19827616 	blt	r3,r6,2883c <___vfiprintf_internal_r+0xfbc>
   27e64:	4cf9c83a 	sub	fp,r9,r19
   27e68:	42000204 	addi	r8,r8,8
   27e6c:	31000044 	addi	r4,r6,1
   27e70:	300b883a 	mov	r5,r6
   27e74:	07018516 	blt	zero,fp,2848c <___vfiprintf_internal_r+0xc0c>
   27e78:	9885883a 	add	r2,r19,r2
   27e7c:	45400015 	stw	r21,0(r8)
   27e80:	44c00115 	stw	r19,4(r8)
   27e84:	d8801c15 	stw	r2,112(sp)
   27e88:	d9001b15 	stw	r4,108(sp)
   27e8c:	00c001c4 	movi	r3,7
   27e90:	1901dd0e 	bge	r3,r4,28608 <___vfiprintf_internal_r+0xd88>
   27e94:	1002401e 	bne	r2,zero,28798 <___vfiprintf_internal_r+0xf18>
   27e98:	d8001b15 	stw	zero,108(sp)
   27e9c:	a2c0010c 	andi	r11,r20,4
   27ea0:	58000226 	beq	r11,zero,27eac <___vfiprintf_internal_r+0x62c>
   27ea4:	8ca7c83a 	sub	r19,r17,r18
   27ea8:	04c2f216 	blt	zero,r19,28a74 <___vfiprintf_internal_r+0x11f4>
   27eac:	8c80010e 	bge	r17,r18,27eb4 <___vfiprintf_internal_r+0x634>
   27eb0:	9023883a 	mov	r17,r18
   27eb4:	da802317 	ldw	r10,140(sp)
   27eb8:	5455883a 	add	r10,r10,r17
   27ebc:	da802315 	stw	r10,140(sp)
   27ec0:	d8001b15 	stw	zero,108(sp)
   27ec4:	d811883a 	mov	r8,sp
   27ec8:	003ea206 	br	27954 <__alt_data_end+0xfffe7954>
   27ecc:	a5000814 	ori	r20,r20,32
   27ed0:	80c00007 	ldb	r3,0(r16)
   27ed4:	003ec906 	br	279fc <__alt_data_end+0xfffe79fc>
   27ed8:	80c00007 	ldb	r3,0(r16)
   27edc:	1b030926 	beq	r3,r12,28b04 <___vfiprintf_internal_r+0x1284>
   27ee0:	a5000414 	ori	r20,r20,16
   27ee4:	003ec506 	br	279fc <__alt_data_end+0xfffe79fc>
   27ee8:	21003fcc 	andi	r4,r4,255
   27eec:	20035e1e 	bne	r4,zero,28c68 <___vfiprintf_internal_r+0x13e8>
   27ef0:	a080080c 	andi	r2,r20,32
   27ef4:	1002a526 	beq	r2,zero,2898c <___vfiprintf_internal_r+0x110c>
   27ef8:	da802217 	ldw	r10,136(sp)
   27efc:	50800017 	ldw	r2,0(r10)
   27f00:	da802317 	ldw	r10,140(sp)
   27f04:	5007d7fa 	srai	r3,r10,31
   27f08:	da802217 	ldw	r10,136(sp)
   27f0c:	10c00115 	stw	r3,4(r2)
   27f10:	52800104 	addi	r10,r10,4
   27f14:	da802215 	stw	r10,136(sp)
   27f18:	da802317 	ldw	r10,140(sp)
   27f1c:	12800015 	stw	r10,0(r2)
   27f20:	003e8c06 	br	27954 <__alt_data_end+0xfffe7954>
   27f24:	21003fcc 	andi	r4,r4,255
   27f28:	2003511e 	bne	r4,zero,28c70 <___vfiprintf_internal_r+0x13f0>
   27f2c:	a080080c 	andi	r2,r20,32
   27f30:	1000a126 	beq	r2,zero,281b8 <___vfiprintf_internal_r+0x938>
   27f34:	da802217 	ldw	r10,136(sp)
   27f38:	d8001d85 	stb	zero,118(sp)
   27f3c:	50800204 	addi	r2,r10,8
   27f40:	54800017 	ldw	r18,0(r10)
   27f44:	54c00117 	ldw	r19,4(r10)
   27f48:	4802b416 	blt	r9,zero,28a1c <___vfiprintf_internal_r+0x119c>
   27f4c:	013fdfc4 	movi	r4,-129
   27f50:	94c6b03a 	or	r3,r18,r19
   27f54:	d8802215 	stw	r2,136(sp)
   27f58:	a128703a 	and	r20,r20,r4
   27f5c:	1800a226 	beq	r3,zero,281e8 <___vfiprintf_internal_r+0x968>
   27f60:	0039883a 	mov	fp,zero
   27f64:	dd401a04 	addi	r21,sp,104
   27f68:	9006d0fa 	srli	r3,r18,3
   27f6c:	9808977a 	slli	r4,r19,29
   27f70:	9826d0fa 	srli	r19,r19,3
   27f74:	948001cc 	andi	r18,r18,7
   27f78:	90800c04 	addi	r2,r18,48
   27f7c:	ad7fffc4 	addi	r21,r21,-1
   27f80:	20e4b03a 	or	r18,r4,r3
   27f84:	a8800005 	stb	r2,0(r21)
   27f88:	94c6b03a 	or	r3,r18,r19
   27f8c:	183ff61e 	bne	r3,zero,27f68 <__alt_data_end+0xfffe7f68>
   27f90:	a0c0004c 	andi	r3,r20,1
   27f94:	18005926 	beq	r3,zero,280fc <___vfiprintf_internal_r+0x87c>
   27f98:	10803fcc 	andi	r2,r2,255
   27f9c:	1080201c 	xori	r2,r2,128
   27fa0:	10bfe004 	addi	r2,r2,-128
   27fa4:	00c00c04 	movi	r3,48
   27fa8:	10c05426 	beq	r2,r3,280fc <___vfiprintf_internal_r+0x87c>
   27fac:	da801e17 	ldw	r10,120(sp)
   27fb0:	a8bfffc4 	addi	r2,r21,-1
   27fb4:	a8ffffc5 	stb	r3,-1(r21)
   27fb8:	50a7c83a 	sub	r19,r10,r2
   27fbc:	102b883a 	mov	r21,r2
   27fc0:	003f2f06 	br	27c80 <__alt_data_end+0xfffe7c80>
   27fc4:	21003fcc 	andi	r4,r4,255
   27fc8:	2003421e 	bne	r4,zero,28cd4 <___vfiprintf_internal_r+0x1454>
   27fcc:	008000f4 	movhi	r2,3
   27fd0:	10802904 	addi	r2,r2,164
   27fd4:	d8802615 	stw	r2,152(sp)
   27fd8:	a080080c 	andi	r2,r20,32
   27fdc:	1000aa26 	beq	r2,zero,28288 <___vfiprintf_internal_r+0xa08>
   27fe0:	da802217 	ldw	r10,136(sp)
   27fe4:	54800017 	ldw	r18,0(r10)
   27fe8:	54c00117 	ldw	r19,4(r10)
   27fec:	52800204 	addi	r10,r10,8
   27ff0:	da802215 	stw	r10,136(sp)
   27ff4:	a080004c 	andi	r2,r20,1
   27ff8:	1001d226 	beq	r2,zero,28744 <___vfiprintf_internal_r+0xec4>
   27ffc:	94c4b03a 	or	r2,r18,r19
   28000:	1002351e 	bne	r2,zero,288d8 <___vfiprintf_internal_r+0x1058>
   28004:	d8001d85 	stb	zero,118(sp)
   28008:	48022216 	blt	r9,zero,28894 <___vfiprintf_internal_r+0x1014>
   2800c:	00bfdfc4 	movi	r2,-129
   28010:	a0a8703a 	and	r20,r20,r2
   28014:	003f1506 	br	27c6c <__alt_data_end+0xfffe7c6c>
   28018:	da802217 	ldw	r10,136(sp)
   2801c:	04800044 	movi	r18,1
   28020:	d8001d85 	stb	zero,118(sp)
   28024:	50800017 	ldw	r2,0(r10)
   28028:	52800104 	addi	r10,r10,4
   2802c:	da802215 	stw	r10,136(sp)
   28030:	d8801005 	stb	r2,64(sp)
   28034:	9027883a 	mov	r19,r18
   28038:	dd401004 	addi	r21,sp,64
   2803c:	0013883a 	mov	r9,zero
   28040:	003f1706 	br	27ca0 <__alt_data_end+0xfffe7ca0>
   28044:	21003fcc 	andi	r4,r4,255
   28048:	2003201e 	bne	r4,zero,28ccc <___vfiprintf_internal_r+0x144c>
   2804c:	a080080c 	andi	r2,r20,32
   28050:	10004b26 	beq	r2,zero,28180 <___vfiprintf_internal_r+0x900>
   28054:	da802217 	ldw	r10,136(sp)
   28058:	50800117 	ldw	r2,4(r10)
   2805c:	54800017 	ldw	r18,0(r10)
   28060:	52800204 	addi	r10,r10,8
   28064:	da802215 	stw	r10,136(sp)
   28068:	1027883a 	mov	r19,r2
   2806c:	10022c16 	blt	r2,zero,28920 <___vfiprintf_internal_r+0x10a0>
   28070:	df001d83 	ldbu	fp,118(sp)
   28074:	48007216 	blt	r9,zero,28240 <___vfiprintf_internal_r+0x9c0>
   28078:	00ffdfc4 	movi	r3,-129
   2807c:	94c4b03a 	or	r2,r18,r19
   28080:	a0e8703a 	and	r20,r20,r3
   28084:	1000cc26 	beq	r2,zero,283b8 <___vfiprintf_internal_r+0xb38>
   28088:	98021026 	beq	r19,zero,288cc <___vfiprintf_internal_r+0x104c>
   2808c:	dc402415 	stw	r17,144(sp)
   28090:	dc002515 	stw	r16,148(sp)
   28094:	9823883a 	mov	r17,r19
   28098:	9021883a 	mov	r16,r18
   2809c:	dd401a04 	addi	r21,sp,104
   280a0:	4825883a 	mov	r18,r9
   280a4:	4027883a 	mov	r19,r8
   280a8:	8009883a 	mov	r4,r16
   280ac:	880b883a 	mov	r5,r17
   280b0:	01800284 	movi	r6,10
   280b4:	000f883a 	mov	r7,zero
   280b8:	002a7dc0 	call	2a7dc <__umoddi3>
   280bc:	10800c04 	addi	r2,r2,48
   280c0:	ad7fffc4 	addi	r21,r21,-1
   280c4:	8009883a 	mov	r4,r16
   280c8:	880b883a 	mov	r5,r17
   280cc:	a8800005 	stb	r2,0(r21)
   280d0:	01800284 	movi	r6,10
   280d4:	000f883a 	mov	r7,zero
   280d8:	002a2640 	call	2a264 <__udivdi3>
   280dc:	1021883a 	mov	r16,r2
   280e0:	10c4b03a 	or	r2,r2,r3
   280e4:	1823883a 	mov	r17,r3
   280e8:	103fef1e 	bne	r2,zero,280a8 <__alt_data_end+0xfffe80a8>
   280ec:	dc402417 	ldw	r17,144(sp)
   280f0:	dc002517 	ldw	r16,148(sp)
   280f4:	9013883a 	mov	r9,r18
   280f8:	9811883a 	mov	r8,r19
   280fc:	da801e17 	ldw	r10,120(sp)
   28100:	5567c83a 	sub	r19,r10,r21
   28104:	003ede06 	br	27c80 <__alt_data_end+0xfffe7c80>
   28108:	38803fcc 	andi	r2,r7,255
   2810c:	1080201c 	xori	r2,r2,128
   28110:	10bfe004 	addi	r2,r2,-128
   28114:	1002371e 	bne	r2,zero,289f4 <___vfiprintf_internal_r+0x1174>
   28118:	01000044 	movi	r4,1
   2811c:	01c00804 	movi	r7,32
   28120:	80c00007 	ldb	r3,0(r16)
   28124:	003e3506 	br	279fc <__alt_data_end+0xfffe79fc>
   28128:	a5000054 	ori	r20,r20,1
   2812c:	80c00007 	ldb	r3,0(r16)
   28130:	003e3206 	br	279fc <__alt_data_end+0xfffe79fc>
   28134:	a5002014 	ori	r20,r20,128
   28138:	80c00007 	ldb	r3,0(r16)
   2813c:	003e2f06 	br	279fc <__alt_data_end+0xfffe79fc>
   28140:	8015883a 	mov	r10,r16
   28144:	0023883a 	mov	r17,zero
   28148:	18bff404 	addi	r2,r3,-48
   2814c:	50c00007 	ldb	r3,0(r10)
   28150:	8c4002a4 	muli	r17,r17,10
   28154:	84000044 	addi	r16,r16,1
   28158:	8015883a 	mov	r10,r16
   2815c:	1463883a 	add	r17,r2,r17
   28160:	18bff404 	addi	r2,r3,-48
   28164:	30bff92e 	bgeu	r6,r2,2814c <__alt_data_end+0xfffe814c>
   28168:	003e2506 	br	27a00 <__alt_data_end+0xfffe7a00>
   2816c:	21003fcc 	andi	r4,r4,255
   28170:	2002d41e 	bne	r4,zero,28cc4 <___vfiprintf_internal_r+0x1444>
   28174:	a5000414 	ori	r20,r20,16
   28178:	a080080c 	andi	r2,r20,32
   2817c:	103fb51e 	bne	r2,zero,28054 <__alt_data_end+0xfffe8054>
   28180:	a080040c 	andi	r2,r20,16
   28184:	1001f826 	beq	r2,zero,28968 <___vfiprintf_internal_r+0x10e8>
   28188:	da802217 	ldw	r10,136(sp)
   2818c:	54800017 	ldw	r18,0(r10)
   28190:	52800104 	addi	r10,r10,4
   28194:	da802215 	stw	r10,136(sp)
   28198:	9027d7fa 	srai	r19,r18,31
   2819c:	9805883a 	mov	r2,r19
   281a0:	003fb206 	br	2806c <__alt_data_end+0xfffe806c>
   281a4:	21003fcc 	andi	r4,r4,255
   281a8:	2002c41e 	bne	r4,zero,28cbc <___vfiprintf_internal_r+0x143c>
   281ac:	a5000414 	ori	r20,r20,16
   281b0:	a080080c 	andi	r2,r20,32
   281b4:	103f5f1e 	bne	r2,zero,27f34 <__alt_data_end+0xfffe7f34>
   281b8:	a080040c 	andi	r2,r20,16
   281bc:	10020f26 	beq	r2,zero,289fc <___vfiprintf_internal_r+0x117c>
   281c0:	da802217 	ldw	r10,136(sp)
   281c4:	d8001d85 	stb	zero,118(sp)
   281c8:	0027883a 	mov	r19,zero
   281cc:	50800104 	addi	r2,r10,4
   281d0:	54800017 	ldw	r18,0(r10)
   281d4:	48021116 	blt	r9,zero,28a1c <___vfiprintf_internal_r+0x119c>
   281d8:	00ffdfc4 	movi	r3,-129
   281dc:	d8802215 	stw	r2,136(sp)
   281e0:	a0e8703a 	and	r20,r20,r3
   281e4:	903f5e1e 	bne	r18,zero,27f60 <__alt_data_end+0xfffe7f60>
   281e8:	0039883a 	mov	fp,zero
   281ec:	4802a626 	beq	r9,zero,28c88 <___vfiprintf_internal_r+0x1408>
   281f0:	0025883a 	mov	r18,zero
   281f4:	0027883a 	mov	r19,zero
   281f8:	003f5a06 	br	27f64 <__alt_data_end+0xfffe7f64>
   281fc:	21003fcc 	andi	r4,r4,255
   28200:	20029f1e 	bne	r4,zero,28c80 <___vfiprintf_internal_r+0x1400>
   28204:	a5000414 	ori	r20,r20,16
   28208:	a080080c 	andi	r2,r20,32
   2820c:	10005e1e 	bne	r2,zero,28388 <___vfiprintf_internal_r+0xb08>
   28210:	a080040c 	andi	r2,r20,16
   28214:	1001a21e 	bne	r2,zero,288a0 <___vfiprintf_internal_r+0x1020>
   28218:	a080100c 	andi	r2,r20,64
   2821c:	d8001d85 	stb	zero,118(sp)
   28220:	da802217 	ldw	r10,136(sp)
   28224:	1002231e 	bne	r2,zero,28ab4 <___vfiprintf_internal_r+0x1234>
   28228:	50800104 	addi	r2,r10,4
   2822c:	54800017 	ldw	r18,0(r10)
   28230:	0027883a 	mov	r19,zero
   28234:	4801a00e 	bge	r9,zero,288b8 <___vfiprintf_internal_r+0x1038>
   28238:	d8802215 	stw	r2,136(sp)
   2823c:	0039883a 	mov	fp,zero
   28240:	94c4b03a 	or	r2,r18,r19
   28244:	103f901e 	bne	r2,zero,28088 <__alt_data_end+0xfffe8088>
   28248:	00800044 	movi	r2,1
   2824c:	10803fcc 	andi	r2,r2,255
   28250:	00c00044 	movi	r3,1
   28254:	10c05926 	beq	r2,r3,283bc <___vfiprintf_internal_r+0xb3c>
   28258:	00c00084 	movi	r3,2
   2825c:	10ffe41e 	bne	r2,r3,281f0 <__alt_data_end+0xfffe81f0>
   28260:	0025883a 	mov	r18,zero
   28264:	0027883a 	mov	r19,zero
   28268:	00013d06 	br	28760 <___vfiprintf_internal_r+0xee0>
   2826c:	21003fcc 	andi	r4,r4,255
   28270:	2002811e 	bne	r4,zero,28c78 <___vfiprintf_internal_r+0x13f8>
   28274:	008000f4 	movhi	r2,3
   28278:	10802404 	addi	r2,r2,144
   2827c:	d8802615 	stw	r2,152(sp)
   28280:	a080080c 	andi	r2,r20,32
   28284:	103f561e 	bne	r2,zero,27fe0 <__alt_data_end+0xfffe7fe0>
   28288:	a080040c 	andi	r2,r20,16
   2828c:	1001d126 	beq	r2,zero,289d4 <___vfiprintf_internal_r+0x1154>
   28290:	da802217 	ldw	r10,136(sp)
   28294:	0027883a 	mov	r19,zero
   28298:	54800017 	ldw	r18,0(r10)
   2829c:	52800104 	addi	r10,r10,4
   282a0:	da802215 	stw	r10,136(sp)
   282a4:	003f5306 	br	27ff4 <__alt_data_end+0xfffe7ff4>
   282a8:	da802217 	ldw	r10,136(sp)
   282ac:	d8001d85 	stb	zero,118(sp)
   282b0:	55400017 	ldw	r21,0(r10)
   282b4:	50c00104 	addi	r3,r10,4
   282b8:	a8024226 	beq	r21,zero,28bc4 <___vfiprintf_internal_r+0x1344>
   282bc:	48021816 	blt	r9,zero,28b20 <___vfiprintf_internal_r+0x12a0>
   282c0:	480d883a 	mov	r6,r9
   282c4:	000b883a 	mov	r5,zero
   282c8:	a809883a 	mov	r4,r21
   282cc:	d8c02a15 	stw	r3,168(sp)
   282d0:	da002b15 	stw	r8,172(sp)
   282d4:	da402c15 	stw	r9,176(sp)
   282d8:	00260a40 	call	260a4 <memchr>
   282dc:	d8c02a17 	ldw	r3,168(sp)
   282e0:	da002b17 	ldw	r8,172(sp)
   282e4:	da402c17 	ldw	r9,176(sp)
   282e8:	10024826 	beq	r2,zero,28c0c <___vfiprintf_internal_r+0x138c>
   282ec:	1567c83a 	sub	r19,r2,r21
   282f0:	df001d83 	ldbu	fp,118(sp)
   282f4:	d8c02215 	stw	r3,136(sp)
   282f8:	0013883a 	mov	r9,zero
   282fc:	003e6006 	br	27c80 <__alt_data_end+0xfffe7c80>
   28300:	21003fcc 	andi	r4,r4,255
   28304:	203fc026 	beq	r4,zero,28208 <__alt_data_end+0xfffe8208>
   28308:	d9c01d85 	stb	r7,118(sp)
   2830c:	003fbe06 	br	28208 <__alt_data_end+0xfffe8208>
   28310:	da802217 	ldw	r10,136(sp)
   28314:	54400017 	ldw	r17,0(r10)
   28318:	50800104 	addi	r2,r10,4
   2831c:	883e3b16 	blt	r17,zero,27c0c <__alt_data_end+0xfffe7c0c>
   28320:	d8802215 	stw	r2,136(sp)
   28324:	80c00007 	ldb	r3,0(r16)
   28328:	003db406 	br	279fc <__alt_data_end+0xfffe79fc>
   2832c:	01000044 	movi	r4,1
   28330:	01c00ac4 	movi	r7,43
   28334:	80c00007 	ldb	r3,0(r16)
   28338:	003db006 	br	279fc <__alt_data_end+0xfffe79fc>
   2833c:	80c00007 	ldb	r3,0(r16)
   28340:	82800044 	addi	r10,r16,1
   28344:	1b423c26 	beq	r3,r13,28c38 <___vfiprintf_internal_r+0x13b8>
   28348:	18bff404 	addi	r2,r3,-48
   2834c:	0013883a 	mov	r9,zero
   28350:	30822b36 	bltu	r6,r2,28c00 <___vfiprintf_internal_r+0x1380>
   28354:	50c00007 	ldb	r3,0(r10)
   28358:	4a4002a4 	muli	r9,r9,10
   2835c:	54000044 	addi	r16,r10,1
   28360:	8015883a 	mov	r10,r16
   28364:	4893883a 	add	r9,r9,r2
   28368:	18bff404 	addi	r2,r3,-48
   2836c:	30bff92e 	bgeu	r6,r2,28354 <__alt_data_end+0xfffe8354>
   28370:	483da30e 	bge	r9,zero,27a00 <__alt_data_end+0xfffe7a00>
   28374:	027fffc4 	movi	r9,-1
   28378:	003da106 	br	27a00 <__alt_data_end+0xfffe7a00>
   2837c:	a5001014 	ori	r20,r20,64
   28380:	80c00007 	ldb	r3,0(r16)
   28384:	003d9d06 	br	279fc <__alt_data_end+0xfffe79fc>
   28388:	da802217 	ldw	r10,136(sp)
   2838c:	d8001d85 	stb	zero,118(sp)
   28390:	50c00204 	addi	r3,r10,8
   28394:	54800017 	ldw	r18,0(r10)
   28398:	54c00117 	ldw	r19,4(r10)
   2839c:	4801ca16 	blt	r9,zero,28ac8 <___vfiprintf_internal_r+0x1248>
   283a0:	013fdfc4 	movi	r4,-129
   283a4:	94c4b03a 	or	r2,r18,r19
   283a8:	d8c02215 	stw	r3,136(sp)
   283ac:	a128703a 	and	r20,r20,r4
   283b0:	0039883a 	mov	fp,zero
   283b4:	103f341e 	bne	r2,zero,28088 <__alt_data_end+0xfffe8088>
   283b8:	483e2e26 	beq	r9,zero,27c74 <__alt_data_end+0xfffe7c74>
   283bc:	0025883a 	mov	r18,zero
   283c0:	94800c04 	addi	r18,r18,48
   283c4:	dc8019c5 	stb	r18,103(sp)
   283c8:	dcc02717 	ldw	r19,156(sp)
   283cc:	dd4019c4 	addi	r21,sp,103
   283d0:	003e2b06 	br	27c80 <__alt_data_end+0xfffe7c80>
   283d4:	21003fcc 	andi	r4,r4,255
   283d8:	2002361e 	bne	r4,zero,28cb4 <___vfiprintf_internal_r+0x1434>
   283dc:	1801c126 	beq	r3,zero,28ae4 <___vfiprintf_internal_r+0x1264>
   283e0:	04800044 	movi	r18,1
   283e4:	d8c01005 	stb	r3,64(sp)
   283e8:	d8001d85 	stb	zero,118(sp)
   283ec:	9027883a 	mov	r19,r18
   283f0:	dd401004 	addi	r21,sp,64
   283f4:	003f1106 	br	2803c <__alt_data_end+0xfffe803c>
   283f8:	d9402117 	ldw	r5,132(sp)
   283fc:	d9002017 	ldw	r4,128(sp)
   28400:	d9801a04 	addi	r6,sp,104
   28404:	d9c02b15 	stw	r7,172(sp)
   28408:	dbc02a15 	stw	r15,168(sp)
   2840c:	002776c0 	call	2776c <__sprint_r.part.0>
   28410:	d9c02b17 	ldw	r7,172(sp)
   28414:	dbc02a17 	ldw	r15,168(sp)
   28418:	10006d1e 	bne	r2,zero,285d0 <___vfiprintf_internal_r+0xd50>
   2841c:	d9801b17 	ldw	r6,108(sp)
   28420:	d8801c17 	ldw	r2,112(sp)
   28424:	d811883a 	mov	r8,sp
   28428:	31400044 	addi	r5,r6,1
   2842c:	003e3306 	br	27cfc <__alt_data_end+0xfffe7cfc>
   28430:	d9401b17 	ldw	r5,108(sp)
   28434:	d8801c17 	ldw	r2,112(sp)
   28438:	29000044 	addi	r4,r5,1
   2843c:	d8c01d87 	ldb	r3,118(sp)
   28440:	183e4d26 	beq	r3,zero,27d78 <__alt_data_end+0xfffe7d78>
   28444:	00c00044 	movi	r3,1
   28448:	d9401d84 	addi	r5,sp,118
   2844c:	10c5883a 	add	r2,r2,r3
   28450:	41400015 	stw	r5,0(r8)
   28454:	40c00115 	stw	r3,4(r8)
   28458:	d8801c15 	stw	r2,112(sp)
   2845c:	d9001b15 	stw	r4,108(sp)
   28460:	014001c4 	movi	r5,7
   28464:	2900a90e 	bge	r5,r4,2870c <___vfiprintf_internal_r+0xe8c>
   28468:	1000da1e 	bne	r2,zero,287d4 <___vfiprintf_internal_r+0xf54>
   2846c:	7000ab1e 	bne	r14,zero,2871c <___vfiprintf_internal_r+0xe9c>
   28470:	000b883a 	mov	r5,zero
   28474:	1809883a 	mov	r4,r3
   28478:	d811883a 	mov	r8,sp
   2847c:	00c02004 	movi	r3,128
   28480:	e0fe4d26 	beq	fp,r3,27db8 <__alt_data_end+0xfffe7db8>
   28484:	4cf9c83a 	sub	fp,r9,r19
   28488:	073e7b0e 	bge	zero,fp,27e78 <__alt_data_end+0xfffe7e78>
   2848c:	01c00404 	movi	r7,16
   28490:	3f01900e 	bge	r7,fp,28ad4 <___vfiprintf_internal_r+0x1254>
   28494:	00c000f4 	movhi	r3,3
   28498:	18c08a04 	addi	r3,r3,552
   2849c:	d8c02415 	stw	r3,144(sp)
   284a0:	034001c4 	movi	r13,7
   284a4:	00000506 	br	284bc <___vfiprintf_internal_r+0xc3c>
   284a8:	29000084 	addi	r4,r5,2
   284ac:	42000204 	addi	r8,r8,8
   284b0:	180b883a 	mov	r5,r3
   284b4:	e73ffc04 	addi	fp,fp,-16
   284b8:	3f000d0e 	bge	r7,fp,284f0 <___vfiprintf_internal_r+0xc70>
   284bc:	10800404 	addi	r2,r2,16
   284c0:	28c00044 	addi	r3,r5,1
   284c4:	45c00015 	stw	r23,0(r8)
   284c8:	41c00115 	stw	r7,4(r8)
   284cc:	d8801c15 	stw	r2,112(sp)
   284d0:	d8c01b15 	stw	r3,108(sp)
   284d4:	68fff40e 	bge	r13,r3,284a8 <__alt_data_end+0xfffe84a8>
   284d8:	1000101e 	bne	r2,zero,2851c <___vfiprintf_internal_r+0xc9c>
   284dc:	e73ffc04 	addi	fp,fp,-16
   284e0:	01000044 	movi	r4,1
   284e4:	000b883a 	mov	r5,zero
   284e8:	d811883a 	mov	r8,sp
   284ec:	3f3ff316 	blt	r7,fp,284bc <__alt_data_end+0xfffe84bc>
   284f0:	da802417 	ldw	r10,144(sp)
   284f4:	1705883a 	add	r2,r2,fp
   284f8:	47000115 	stw	fp,4(r8)
   284fc:	42800015 	stw	r10,0(r8)
   28500:	d8801c15 	stw	r2,112(sp)
   28504:	d9001b15 	stw	r4,108(sp)
   28508:	00c001c4 	movi	r3,7
   2850c:	19003616 	blt	r3,r4,285e8 <___vfiprintf_internal_r+0xd68>
   28510:	42000204 	addi	r8,r8,8
   28514:	21000044 	addi	r4,r4,1
   28518:	003e5706 	br	27e78 <__alt_data_end+0xfffe7e78>
   2851c:	d9402117 	ldw	r5,132(sp)
   28520:	d9002017 	ldw	r4,128(sp)
   28524:	d9801a04 	addi	r6,sp,104
   28528:	d9c02b15 	stw	r7,172(sp)
   2852c:	db402a15 	stw	r13,168(sp)
   28530:	002776c0 	call	2776c <__sprint_r.part.0>
   28534:	d9c02b17 	ldw	r7,172(sp)
   28538:	db402a17 	ldw	r13,168(sp)
   2853c:	1000241e 	bne	r2,zero,285d0 <___vfiprintf_internal_r+0xd50>
   28540:	d9401b17 	ldw	r5,108(sp)
   28544:	d8801c17 	ldw	r2,112(sp)
   28548:	d811883a 	mov	r8,sp
   2854c:	29000044 	addi	r4,r5,1
   28550:	003fd806 	br	284b4 <__alt_data_end+0xfffe84b4>
   28554:	d9401b17 	ldw	r5,108(sp)
   28558:	00c000f4 	movhi	r3,3
   2855c:	18c08e04 	addi	r3,r3,568
   28560:	d8c02415 	stw	r3,144(sp)
   28564:	29400044 	addi	r5,r5,1
   28568:	d8c02417 	ldw	r3,144(sp)
   2856c:	14c5883a 	add	r2,r2,r19
   28570:	44c00115 	stw	r19,4(r8)
   28574:	40c00015 	stw	r3,0(r8)
   28578:	d8801c15 	stw	r2,112(sp)
   2857c:	d9401b15 	stw	r5,108(sp)
   28580:	00c001c4 	movi	r3,7
   28584:	1940070e 	bge	r3,r5,285a4 <___vfiprintf_internal_r+0xd24>
   28588:	103e4826 	beq	r2,zero,27eac <__alt_data_end+0xfffe7eac>
   2858c:	d9402117 	ldw	r5,132(sp)
   28590:	d9002017 	ldw	r4,128(sp)
   28594:	d9801a04 	addi	r6,sp,104
   28598:	002776c0 	call	2776c <__sprint_r.part.0>
   2859c:	10000c1e 	bne	r2,zero,285d0 <___vfiprintf_internal_r+0xd50>
   285a0:	d8801c17 	ldw	r2,112(sp)
   285a4:	8c80010e 	bge	r17,r18,285ac <___vfiprintf_internal_r+0xd2c>
   285a8:	9023883a 	mov	r17,r18
   285ac:	da802317 	ldw	r10,140(sp)
   285b0:	5455883a 	add	r10,r10,r17
   285b4:	da802315 	stw	r10,140(sp)
   285b8:	103e4126 	beq	r2,zero,27ec0 <__alt_data_end+0xfffe7ec0>
   285bc:	d9402117 	ldw	r5,132(sp)
   285c0:	d9002017 	ldw	r4,128(sp)
   285c4:	d9801a04 	addi	r6,sp,104
   285c8:	002776c0 	call	2776c <__sprint_r.part.0>
   285cc:	103e3c26 	beq	r2,zero,27ec0 <__alt_data_end+0xfffe7ec0>
   285d0:	dd002117 	ldw	r20,132(sp)
   285d4:	a080030b 	ldhu	r2,12(r20)
   285d8:	1080100c 	andi	r2,r2,64
   285dc:	1001231e 	bne	r2,zero,28a6c <___vfiprintf_internal_r+0x11ec>
   285e0:	d8802317 	ldw	r2,140(sp)
   285e4:	003d7b06 	br	27bd4 <__alt_data_end+0xfffe7bd4>
   285e8:	1000991e 	bne	r2,zero,28850 <___vfiprintf_internal_r+0xfd0>
   285ec:	00c00044 	movi	r3,1
   285f0:	9805883a 	mov	r2,r19
   285f4:	dd400015 	stw	r21,0(sp)
   285f8:	dcc00115 	stw	r19,4(sp)
   285fc:	dcc01c15 	stw	r19,112(sp)
   28600:	d8c01b15 	stw	r3,108(sp)
   28604:	d811883a 	mov	r8,sp
   28608:	42000204 	addi	r8,r8,8
   2860c:	a2c0010c 	andi	r11,r20,4
   28610:	583fe426 	beq	r11,zero,285a4 <__alt_data_end+0xfffe85a4>
   28614:	8ca7c83a 	sub	r19,r17,r18
   28618:	04ffe20e 	bge	zero,r19,285a4 <__alt_data_end+0xfffe85a4>
   2861c:	01c00404 	movi	r7,16
   28620:	3cffcc0e 	bge	r7,r19,28554 <__alt_data_end+0xfffe8554>
   28624:	028000f4 	movhi	r10,3
   28628:	52808e04 	addi	r10,r10,568
   2862c:	d9001b17 	ldw	r4,108(sp)
   28630:	da802415 	stw	r10,144(sp)
   28634:	382b883a 	mov	r21,r7
   28638:	050001c4 	movi	r20,7
   2863c:	df002017 	ldw	fp,128(sp)
   28640:	00000506 	br	28658 <___vfiprintf_internal_r+0xdd8>
   28644:	21400084 	addi	r5,r4,2
   28648:	42000204 	addi	r8,r8,8
   2864c:	1809883a 	mov	r4,r3
   28650:	9cfffc04 	addi	r19,r19,-16
   28654:	acffc40e 	bge	r21,r19,28568 <__alt_data_end+0xfffe8568>
   28658:	10800404 	addi	r2,r2,16
   2865c:	20c00044 	addi	r3,r4,1
   28660:	45800015 	stw	r22,0(r8)
   28664:	45400115 	stw	r21,4(r8)
   28668:	d8801c15 	stw	r2,112(sp)
   2866c:	d8c01b15 	stw	r3,108(sp)
   28670:	a0fff40e 	bge	r20,r3,28644 <__alt_data_end+0xfffe8644>
   28674:	1000041e 	bne	r2,zero,28688 <___vfiprintf_internal_r+0xe08>
   28678:	01400044 	movi	r5,1
   2867c:	0009883a 	mov	r4,zero
   28680:	d811883a 	mov	r8,sp
   28684:	003ff206 	br	28650 <__alt_data_end+0xfffe8650>
   28688:	d9402117 	ldw	r5,132(sp)
   2868c:	d9801a04 	addi	r6,sp,104
   28690:	e009883a 	mov	r4,fp
   28694:	002776c0 	call	2776c <__sprint_r.part.0>
   28698:	103fcd1e 	bne	r2,zero,285d0 <__alt_data_end+0xfffe85d0>
   2869c:	d9001b17 	ldw	r4,108(sp)
   286a0:	d8801c17 	ldw	r2,112(sp)
   286a4:	d811883a 	mov	r8,sp
   286a8:	21400044 	addi	r5,r4,1
   286ac:	003fe806 	br	28650 <__alt_data_end+0xfffe8650>
   286b0:	d9402117 	ldw	r5,132(sp)
   286b4:	d9002017 	ldw	r4,128(sp)
   286b8:	d9801a04 	addi	r6,sp,104
   286bc:	d9c02b15 	stw	r7,172(sp)
   286c0:	db402a15 	stw	r13,168(sp)
   286c4:	002776c0 	call	2776c <__sprint_r.part.0>
   286c8:	d9c02b17 	ldw	r7,172(sp)
   286cc:	db402a17 	ldw	r13,168(sp)
   286d0:	103fbf1e 	bne	r2,zero,285d0 <__alt_data_end+0xfffe85d0>
   286d4:	d9401b17 	ldw	r5,108(sp)
   286d8:	d8801c17 	ldw	r2,112(sp)
   286dc:	d811883a 	mov	r8,sp
   286e0:	29800044 	addi	r6,r5,1
   286e4:	003dc406 	br	27df8 <__alt_data_end+0xfffe7df8>
   286e8:	1000d21e 	bne	r2,zero,28a34 <___vfiprintf_internal_r+0x11b4>
   286ec:	d8c01d87 	ldb	r3,118(sp)
   286f0:	18009526 	beq	r3,zero,28948 <___vfiprintf_internal_r+0x10c8>
   286f4:	00800044 	movi	r2,1
   286f8:	d8c01d84 	addi	r3,sp,118
   286fc:	1009883a 	mov	r4,r2
   28700:	d8c00015 	stw	r3,0(sp)
   28704:	d8800115 	stw	r2,4(sp)
   28708:	d811883a 	mov	r8,sp
   2870c:	200b883a 	mov	r5,r4
   28710:	42000204 	addi	r8,r8,8
   28714:	21000044 	addi	r4,r4,1
   28718:	003d9706 	br	27d78 <__alt_data_end+0xfffe7d78>
   2871c:	d9001d04 	addi	r4,sp,116
   28720:	00800084 	movi	r2,2
   28724:	d9000015 	stw	r4,0(sp)
   28728:	d8800115 	stw	r2,4(sp)
   2872c:	1809883a 	mov	r4,r3
   28730:	d811883a 	mov	r8,sp
   28734:	200b883a 	mov	r5,r4
   28738:	42000204 	addi	r8,r8,8
   2873c:	21000044 	addi	r4,r4,1
   28740:	003f4e06 	br	2847c <__alt_data_end+0xfffe847c>
   28744:	d8001d85 	stb	zero,118(sp)
   28748:	48005016 	blt	r9,zero,2888c <___vfiprintf_internal_r+0x100c>
   2874c:	00ffdfc4 	movi	r3,-129
   28750:	94c4b03a 	or	r2,r18,r19
   28754:	a0e8703a 	and	r20,r20,r3
   28758:	103d4426 	beq	r2,zero,27c6c <__alt_data_end+0xfffe7c6c>
   2875c:	0039883a 	mov	fp,zero
   28760:	d9002617 	ldw	r4,152(sp)
   28764:	dd401a04 	addi	r21,sp,104
   28768:	908003cc 	andi	r2,r18,15
   2876c:	9806973a 	slli	r3,r19,28
   28770:	2085883a 	add	r2,r4,r2
   28774:	9024d13a 	srli	r18,r18,4
   28778:	10800003 	ldbu	r2,0(r2)
   2877c:	9826d13a 	srli	r19,r19,4
   28780:	ad7fffc4 	addi	r21,r21,-1
   28784:	1ca4b03a 	or	r18,r3,r18
   28788:	a8800005 	stb	r2,0(r21)
   2878c:	94c4b03a 	or	r2,r18,r19
   28790:	103ff51e 	bne	r2,zero,28768 <__alt_data_end+0xfffe8768>
   28794:	003e5906 	br	280fc <__alt_data_end+0xfffe80fc>
   28798:	d9402117 	ldw	r5,132(sp)
   2879c:	d9002017 	ldw	r4,128(sp)
   287a0:	d9801a04 	addi	r6,sp,104
   287a4:	002776c0 	call	2776c <__sprint_r.part.0>
   287a8:	103f891e 	bne	r2,zero,285d0 <__alt_data_end+0xfffe85d0>
   287ac:	d8801c17 	ldw	r2,112(sp)
   287b0:	d811883a 	mov	r8,sp
   287b4:	003f9506 	br	2860c <__alt_data_end+0xfffe860c>
   287b8:	d9402117 	ldw	r5,132(sp)
   287bc:	d9002017 	ldw	r4,128(sp)
   287c0:	d9801a04 	addi	r6,sp,104
   287c4:	002776c0 	call	2776c <__sprint_r.part.0>
   287c8:	103f811e 	bne	r2,zero,285d0 <__alt_data_end+0xfffe85d0>
   287cc:	d811883a 	mov	r8,sp
   287d0:	003ced06 	br	27b88 <__alt_data_end+0xfffe7b88>
   287d4:	d9402117 	ldw	r5,132(sp)
   287d8:	d9002017 	ldw	r4,128(sp)
   287dc:	d9801a04 	addi	r6,sp,104
   287e0:	da402c15 	stw	r9,176(sp)
   287e4:	db802a15 	stw	r14,168(sp)
   287e8:	002776c0 	call	2776c <__sprint_r.part.0>
   287ec:	da402c17 	ldw	r9,176(sp)
   287f0:	db802a17 	ldw	r14,168(sp)
   287f4:	103f761e 	bne	r2,zero,285d0 <__alt_data_end+0xfffe85d0>
   287f8:	d9401b17 	ldw	r5,108(sp)
   287fc:	d8801c17 	ldw	r2,112(sp)
   28800:	d811883a 	mov	r8,sp
   28804:	29000044 	addi	r4,r5,1
   28808:	003d5b06 	br	27d78 <__alt_data_end+0xfffe7d78>
   2880c:	d9402117 	ldw	r5,132(sp)
   28810:	d9002017 	ldw	r4,128(sp)
   28814:	d9801a04 	addi	r6,sp,104
   28818:	da402c15 	stw	r9,176(sp)
   2881c:	002776c0 	call	2776c <__sprint_r.part.0>
   28820:	da402c17 	ldw	r9,176(sp)
   28824:	103f6a1e 	bne	r2,zero,285d0 <__alt_data_end+0xfffe85d0>
   28828:	d9401b17 	ldw	r5,108(sp)
   2882c:	d8801c17 	ldw	r2,112(sp)
   28830:	d811883a 	mov	r8,sp
   28834:	29000044 	addi	r4,r5,1
   28838:	003f1006 	br	2847c <__alt_data_end+0xfffe847c>
   2883c:	1000c31e 	bne	r2,zero,28b4c <___vfiprintf_internal_r+0x12cc>
   28840:	01000044 	movi	r4,1
   28844:	000b883a 	mov	r5,zero
   28848:	d811883a 	mov	r8,sp
   2884c:	003f0d06 	br	28484 <__alt_data_end+0xfffe8484>
   28850:	d9402117 	ldw	r5,132(sp)
   28854:	d9002017 	ldw	r4,128(sp)
   28858:	d9801a04 	addi	r6,sp,104
   2885c:	002776c0 	call	2776c <__sprint_r.part.0>
   28860:	103f5b1e 	bne	r2,zero,285d0 <__alt_data_end+0xfffe85d0>
   28864:	d9001b17 	ldw	r4,108(sp)
   28868:	d8801c17 	ldw	r2,112(sp)
   2886c:	d811883a 	mov	r8,sp
   28870:	21000044 	addi	r4,r4,1
   28874:	003d8006 	br	27e78 <__alt_data_end+0xfffe7e78>
   28878:	010000f4 	movhi	r4,3
   2887c:	21002904 	addi	r4,r4,164
   28880:	d9002615 	stw	r4,152(sp)
   28884:	d8c02215 	stw	r3,136(sp)
   28888:	1029883a 	mov	r20,r2
   2888c:	94c4b03a 	or	r2,r18,r19
   28890:	103fb21e 	bne	r2,zero,2875c <__alt_data_end+0xfffe875c>
   28894:	0039883a 	mov	fp,zero
   28898:	00800084 	movi	r2,2
   2889c:	003e6b06 	br	2824c <__alt_data_end+0xfffe824c>
   288a0:	da802217 	ldw	r10,136(sp)
   288a4:	d8001d85 	stb	zero,118(sp)
   288a8:	0027883a 	mov	r19,zero
   288ac:	50800104 	addi	r2,r10,4
   288b0:	54800017 	ldw	r18,0(r10)
   288b4:	483e6016 	blt	r9,zero,28238 <__alt_data_end+0xfffe8238>
   288b8:	00ffdfc4 	movi	r3,-129
   288bc:	d8802215 	stw	r2,136(sp)
   288c0:	a0e8703a 	and	r20,r20,r3
   288c4:	0039883a 	mov	fp,zero
   288c8:	903ebb26 	beq	r18,zero,283b8 <__alt_data_end+0xfffe83b8>
   288cc:	00800244 	movi	r2,9
   288d0:	14bdee36 	bltu	r2,r18,2808c <__alt_data_end+0xfffe808c>
   288d4:	003eba06 	br	283c0 <__alt_data_end+0xfffe83c0>
   288d8:	00800c04 	movi	r2,48
   288dc:	d8c01d45 	stb	r3,117(sp)
   288e0:	d8801d05 	stb	r2,116(sp)
   288e4:	d8001d85 	stb	zero,118(sp)
   288e8:	a0c00094 	ori	r3,r20,2
   288ec:	4800a916 	blt	r9,zero,28b94 <___vfiprintf_internal_r+0x1314>
   288f0:	00bfdfc4 	movi	r2,-129
   288f4:	a096703a 	and	r11,r20,r2
   288f8:	5d000094 	ori	r20,r11,2
   288fc:	0039883a 	mov	fp,zero
   28900:	003f9706 	br	28760 <__alt_data_end+0xfffe8760>
   28904:	8025883a 	mov	r18,r16
   28908:	003c2e06 	br	279c4 <__alt_data_end+0xfffe79c4>
   2890c:	008000f4 	movhi	r2,3
   28910:	10802904 	addi	r2,r2,164
   28914:	0039883a 	mov	fp,zero
   28918:	d8802615 	stw	r2,152(sp)
   2891c:	003f9006 	br	28760 <__alt_data_end+0xfffe8760>
   28920:	04a5c83a 	sub	r18,zero,r18
   28924:	07000b44 	movi	fp,45
   28928:	9004c03a 	cmpne	r2,r18,zero
   2892c:	04e7c83a 	sub	r19,zero,r19
   28930:	df001d85 	stb	fp,118(sp)
   28934:	98a7c83a 	sub	r19,r19,r2
   28938:	48009f16 	blt	r9,zero,28bb8 <___vfiprintf_internal_r+0x1338>
   2893c:	00bfdfc4 	movi	r2,-129
   28940:	a0a8703a 	and	r20,r20,r2
   28944:	003dd006 	br	28088 <__alt_data_end+0xfffe8088>
   28948:	70004c26 	beq	r14,zero,28a7c <___vfiprintf_internal_r+0x11fc>
   2894c:	00800084 	movi	r2,2
   28950:	d8c01d04 	addi	r3,sp,116
   28954:	d8c00015 	stw	r3,0(sp)
   28958:	d8800115 	stw	r2,4(sp)
   2895c:	01000044 	movi	r4,1
   28960:	d811883a 	mov	r8,sp
   28964:	003f7306 	br	28734 <__alt_data_end+0xfffe8734>
   28968:	a080100c 	andi	r2,r20,64
   2896c:	da802217 	ldw	r10,136(sp)
   28970:	103e0626 	beq	r2,zero,2818c <__alt_data_end+0xfffe818c>
   28974:	5480000f 	ldh	r18,0(r10)
   28978:	52800104 	addi	r10,r10,4
   2897c:	da802215 	stw	r10,136(sp)
   28980:	9027d7fa 	srai	r19,r18,31
   28984:	9805883a 	mov	r2,r19
   28988:	003db806 	br	2806c <__alt_data_end+0xfffe806c>
   2898c:	a080040c 	andi	r2,r20,16
   28990:	1000091e 	bne	r2,zero,289b8 <___vfiprintf_internal_r+0x1138>
   28994:	a2c0100c 	andi	r11,r20,64
   28998:	58000726 	beq	r11,zero,289b8 <___vfiprintf_internal_r+0x1138>
   2899c:	da802217 	ldw	r10,136(sp)
   289a0:	50800017 	ldw	r2,0(r10)
   289a4:	52800104 	addi	r10,r10,4
   289a8:	da802215 	stw	r10,136(sp)
   289ac:	da802317 	ldw	r10,140(sp)
   289b0:	1280000d 	sth	r10,0(r2)
   289b4:	003be706 	br	27954 <__alt_data_end+0xfffe7954>
   289b8:	da802217 	ldw	r10,136(sp)
   289bc:	50800017 	ldw	r2,0(r10)
   289c0:	52800104 	addi	r10,r10,4
   289c4:	da802215 	stw	r10,136(sp)
   289c8:	da802317 	ldw	r10,140(sp)
   289cc:	12800015 	stw	r10,0(r2)
   289d0:	003be006 	br	27954 <__alt_data_end+0xfffe7954>
   289d4:	a080100c 	andi	r2,r20,64
   289d8:	da802217 	ldw	r10,136(sp)
   289dc:	10003026 	beq	r2,zero,28aa0 <___vfiprintf_internal_r+0x1220>
   289e0:	5480000b 	ldhu	r18,0(r10)
   289e4:	52800104 	addi	r10,r10,4
   289e8:	0027883a 	mov	r19,zero
   289ec:	da802215 	stw	r10,136(sp)
   289f0:	003d8006 	br	27ff4 <__alt_data_end+0xfffe7ff4>
   289f4:	80c00007 	ldb	r3,0(r16)
   289f8:	003c0006 	br	279fc <__alt_data_end+0xfffe79fc>
   289fc:	a080100c 	andi	r2,r20,64
   28a00:	d8001d85 	stb	zero,118(sp)
   28a04:	da802217 	ldw	r10,136(sp)
   28a08:	1000201e 	bne	r2,zero,28a8c <___vfiprintf_internal_r+0x120c>
   28a0c:	50800104 	addi	r2,r10,4
   28a10:	54800017 	ldw	r18,0(r10)
   28a14:	0027883a 	mov	r19,zero
   28a18:	483def0e 	bge	r9,zero,281d8 <__alt_data_end+0xfffe81d8>
   28a1c:	94c6b03a 	or	r3,r18,r19
   28a20:	d8802215 	stw	r2,136(sp)
   28a24:	183d4e1e 	bne	r3,zero,27f60 <__alt_data_end+0xfffe7f60>
   28a28:	0039883a 	mov	fp,zero
   28a2c:	0005883a 	mov	r2,zero
   28a30:	003e0606 	br	2824c <__alt_data_end+0xfffe824c>
   28a34:	d9402117 	ldw	r5,132(sp)
   28a38:	d9002017 	ldw	r4,128(sp)
   28a3c:	d9801a04 	addi	r6,sp,104
   28a40:	da402c15 	stw	r9,176(sp)
   28a44:	db802a15 	stw	r14,168(sp)
   28a48:	002776c0 	call	2776c <__sprint_r.part.0>
   28a4c:	da402c17 	ldw	r9,176(sp)
   28a50:	db802a17 	ldw	r14,168(sp)
   28a54:	103ede1e 	bne	r2,zero,285d0 <__alt_data_end+0xfffe85d0>
   28a58:	d9401b17 	ldw	r5,108(sp)
   28a5c:	d8801c17 	ldw	r2,112(sp)
   28a60:	d811883a 	mov	r8,sp
   28a64:	29000044 	addi	r4,r5,1
   28a68:	003e7406 	br	2843c <__alt_data_end+0xfffe843c>
   28a6c:	00bfffc4 	movi	r2,-1
   28a70:	003c5806 	br	27bd4 <__alt_data_end+0xfffe7bd4>
   28a74:	d811883a 	mov	r8,sp
   28a78:	003ee806 	br	2861c <__alt_data_end+0xfffe861c>
   28a7c:	000b883a 	mov	r5,zero
   28a80:	01000044 	movi	r4,1
   28a84:	d811883a 	mov	r8,sp
   28a88:	003e7c06 	br	2847c <__alt_data_end+0xfffe847c>
   28a8c:	50800104 	addi	r2,r10,4
   28a90:	5480000b 	ldhu	r18,0(r10)
   28a94:	0027883a 	mov	r19,zero
   28a98:	483dcf0e 	bge	r9,zero,281d8 <__alt_data_end+0xfffe81d8>
   28a9c:	003fdf06 	br	28a1c <__alt_data_end+0xfffe8a1c>
   28aa0:	54800017 	ldw	r18,0(r10)
   28aa4:	52800104 	addi	r10,r10,4
   28aa8:	0027883a 	mov	r19,zero
   28aac:	da802215 	stw	r10,136(sp)
   28ab0:	003d5006 	br	27ff4 <__alt_data_end+0xfffe7ff4>
   28ab4:	50800104 	addi	r2,r10,4
   28ab8:	5480000b 	ldhu	r18,0(r10)
   28abc:	0027883a 	mov	r19,zero
   28ac0:	483f7d0e 	bge	r9,zero,288b8 <__alt_data_end+0xfffe88b8>
   28ac4:	003ddc06 	br	28238 <__alt_data_end+0xfffe8238>
   28ac8:	d8c02215 	stw	r3,136(sp)
   28acc:	0039883a 	mov	fp,zero
   28ad0:	003ddb06 	br	28240 <__alt_data_end+0xfffe8240>
   28ad4:	028000f4 	movhi	r10,3
   28ad8:	52808a04 	addi	r10,r10,552
   28adc:	da802415 	stw	r10,144(sp)
   28ae0:	003e8306 	br	284f0 <__alt_data_end+0xfffe84f0>
   28ae4:	d8801c17 	ldw	r2,112(sp)
   28ae8:	dd002117 	ldw	r20,132(sp)
   28aec:	103eb926 	beq	r2,zero,285d4 <__alt_data_end+0xfffe85d4>
   28af0:	d9002017 	ldw	r4,128(sp)
   28af4:	d9801a04 	addi	r6,sp,104
   28af8:	a00b883a 	mov	r5,r20
   28afc:	002776c0 	call	2776c <__sprint_r.part.0>
   28b00:	003eb406 	br	285d4 <__alt_data_end+0xfffe85d4>
   28b04:	80c00043 	ldbu	r3,1(r16)
   28b08:	a5000814 	ori	r20,r20,32
   28b0c:	84000044 	addi	r16,r16,1
   28b10:	18c03fcc 	andi	r3,r3,255
   28b14:	18c0201c 	xori	r3,r3,128
   28b18:	18ffe004 	addi	r3,r3,-128
   28b1c:	003bb706 	br	279fc <__alt_data_end+0xfffe79fc>
   28b20:	a809883a 	mov	r4,r21
   28b24:	d8c02a15 	stw	r3,168(sp)
   28b28:	da002b15 	stw	r8,172(sp)
   28b2c:	00276d40 	call	276d4 <strlen>
   28b30:	d8c02a17 	ldw	r3,168(sp)
   28b34:	1027883a 	mov	r19,r2
   28b38:	df001d83 	ldbu	fp,118(sp)
   28b3c:	d8c02215 	stw	r3,136(sp)
   28b40:	0013883a 	mov	r9,zero
   28b44:	da002b17 	ldw	r8,172(sp)
   28b48:	003c4d06 	br	27c80 <__alt_data_end+0xfffe7c80>
   28b4c:	d9402117 	ldw	r5,132(sp)
   28b50:	d9002017 	ldw	r4,128(sp)
   28b54:	d9801a04 	addi	r6,sp,104
   28b58:	da402c15 	stw	r9,176(sp)
   28b5c:	002776c0 	call	2776c <__sprint_r.part.0>
   28b60:	da402c17 	ldw	r9,176(sp)
   28b64:	103e9a1e 	bne	r2,zero,285d0 <__alt_data_end+0xfffe85d0>
   28b68:	d9401b17 	ldw	r5,108(sp)
   28b6c:	d8801c17 	ldw	r2,112(sp)
   28b70:	d811883a 	mov	r8,sp
   28b74:	29000044 	addi	r4,r5,1
   28b78:	003e4206 	br	28484 <__alt_data_end+0xfffe8484>
   28b7c:	d9401b17 	ldw	r5,108(sp)
   28b80:	010000f4 	movhi	r4,3
   28b84:	21008e04 	addi	r4,r4,568
   28b88:	d9002415 	stw	r4,144(sp)
   28b8c:	29400044 	addi	r5,r5,1
   28b90:	003c6d06 	br	27d48 <__alt_data_end+0xfffe7d48>
   28b94:	0039883a 	mov	fp,zero
   28b98:	00800084 	movi	r2,2
   28b9c:	10803fcc 	andi	r2,r2,255
   28ba0:	01000044 	movi	r4,1
   28ba4:	11001e26 	beq	r2,r4,28c20 <___vfiprintf_internal_r+0x13a0>
   28ba8:	01000084 	movi	r4,2
   28bac:	11001e1e 	bne	r2,r4,28c28 <___vfiprintf_internal_r+0x13a8>
   28bb0:	1829883a 	mov	r20,r3
   28bb4:	003eea06 	br	28760 <__alt_data_end+0xfffe8760>
   28bb8:	a007883a 	mov	r3,r20
   28bbc:	00800044 	movi	r2,1
   28bc0:	003ff606 	br	28b9c <__alt_data_end+0xfffe8b9c>
   28bc4:	00800184 	movi	r2,6
   28bc8:	1240012e 	bgeu	r2,r9,28bd0 <___vfiprintf_internal_r+0x1350>
   28bcc:	1013883a 	mov	r9,r2
   28bd0:	4827883a 	mov	r19,r9
   28bd4:	4825883a 	mov	r18,r9
   28bd8:	48001516 	blt	r9,zero,28c30 <___vfiprintf_internal_r+0x13b0>
   28bdc:	054000f4 	movhi	r21,3
   28be0:	d8c02215 	stw	r3,136(sp)
   28be4:	ad402e04 	addi	r21,r21,184
   28be8:	003d1406 	br	2803c <__alt_data_end+0xfffe803c>
   28bec:	028000f4 	movhi	r10,3
   28bf0:	52808a04 	addi	r10,r10,552
   28bf4:	da802415 	stw	r10,144(sp)
   28bf8:	200d883a 	mov	r6,r4
   28bfc:	003c9106 	br	27e44 <__alt_data_end+0xfffe7e44>
   28c00:	5021883a 	mov	r16,r10
   28c04:	0013883a 	mov	r9,zero
   28c08:	003b7d06 	br	27a00 <__alt_data_end+0xfffe7a00>
   28c0c:	4827883a 	mov	r19,r9
   28c10:	df001d83 	ldbu	fp,118(sp)
   28c14:	d8c02215 	stw	r3,136(sp)
   28c18:	0013883a 	mov	r9,zero
   28c1c:	003c1806 	br	27c80 <__alt_data_end+0xfffe7c80>
   28c20:	1829883a 	mov	r20,r3
   28c24:	003d1806 	br	28088 <__alt_data_end+0xfffe8088>
   28c28:	1829883a 	mov	r20,r3
   28c2c:	003ccd06 	br	27f64 <__alt_data_end+0xfffe7f64>
   28c30:	0025883a 	mov	r18,zero
   28c34:	003fe906 	br	28bdc <__alt_data_end+0xfffe8bdc>
   28c38:	d8802217 	ldw	r2,136(sp)
   28c3c:	80c00043 	ldbu	r3,1(r16)
   28c40:	5021883a 	mov	r16,r10
   28c44:	12400017 	ldw	r9,0(r2)
   28c48:	10800104 	addi	r2,r2,4
   28c4c:	d8802215 	stw	r2,136(sp)
   28c50:	483faf0e 	bge	r9,zero,28b10 <__alt_data_end+0xfffe8b10>
   28c54:	18c03fcc 	andi	r3,r3,255
   28c58:	18c0201c 	xori	r3,r3,128
   28c5c:	027fffc4 	movi	r9,-1
   28c60:	18ffe004 	addi	r3,r3,-128
   28c64:	003b6506 	br	279fc <__alt_data_end+0xfffe79fc>
   28c68:	d9c01d85 	stb	r7,118(sp)
   28c6c:	003ca006 	br	27ef0 <__alt_data_end+0xfffe7ef0>
   28c70:	d9c01d85 	stb	r7,118(sp)
   28c74:	003cad06 	br	27f2c <__alt_data_end+0xfffe7f2c>
   28c78:	d9c01d85 	stb	r7,118(sp)
   28c7c:	003d7d06 	br	28274 <__alt_data_end+0xfffe8274>
   28c80:	d9c01d85 	stb	r7,118(sp)
   28c84:	003d5f06 	br	28204 <__alt_data_end+0xfffe8204>
   28c88:	a080004c 	andi	r2,r20,1
   28c8c:	0039883a 	mov	fp,zero
   28c90:	10000526 	beq	r2,zero,28ca8 <___vfiprintf_internal_r+0x1428>
   28c94:	00800c04 	movi	r2,48
   28c98:	d88019c5 	stb	r2,103(sp)
   28c9c:	dcc02717 	ldw	r19,156(sp)
   28ca0:	dd4019c4 	addi	r21,sp,103
   28ca4:	003bf606 	br	27c80 <__alt_data_end+0xfffe7c80>
   28ca8:	0027883a 	mov	r19,zero
   28cac:	dd401a04 	addi	r21,sp,104
   28cb0:	003bf306 	br	27c80 <__alt_data_end+0xfffe7c80>
   28cb4:	d9c01d85 	stb	r7,118(sp)
   28cb8:	003dc806 	br	283dc <__alt_data_end+0xfffe83dc>
   28cbc:	d9c01d85 	stb	r7,118(sp)
   28cc0:	003d3a06 	br	281ac <__alt_data_end+0xfffe81ac>
   28cc4:	d9c01d85 	stb	r7,118(sp)
   28cc8:	003d2a06 	br	28174 <__alt_data_end+0xfffe8174>
   28ccc:	d9c01d85 	stb	r7,118(sp)
   28cd0:	003cde06 	br	2804c <__alt_data_end+0xfffe804c>
   28cd4:	d9c01d85 	stb	r7,118(sp)
   28cd8:	003cbc06 	br	27fcc <__alt_data_end+0xfffe7fcc>

00028cdc <__vfiprintf_internal>:
   28cdc:	008000f4 	movhi	r2,3
   28ce0:	10878b04 	addi	r2,r2,7724
   28ce4:	300f883a 	mov	r7,r6
   28ce8:	280d883a 	mov	r6,r5
   28cec:	200b883a 	mov	r5,r4
   28cf0:	11000017 	ldw	r4,0(r2)
   28cf4:	00278801 	jmpi	27880 <___vfiprintf_internal_r>

00028cf8 <__sbprintf>:
   28cf8:	2880030b 	ldhu	r2,12(r5)
   28cfc:	2ac01917 	ldw	r11,100(r5)
   28d00:	2a80038b 	ldhu	r10,14(r5)
   28d04:	2a400717 	ldw	r9,28(r5)
   28d08:	2a000917 	ldw	r8,36(r5)
   28d0c:	defee204 	addi	sp,sp,-1144
   28d10:	00c10004 	movi	r3,1024
   28d14:	dc011a15 	stw	r16,1128(sp)
   28d18:	10bfff4c 	andi	r2,r2,65533
   28d1c:	2821883a 	mov	r16,r5
   28d20:	d8cb883a 	add	r5,sp,r3
   28d24:	dc811c15 	stw	r18,1136(sp)
   28d28:	dc411b15 	stw	r17,1132(sp)
   28d2c:	dfc11d15 	stw	ra,1140(sp)
   28d30:	2025883a 	mov	r18,r4
   28d34:	d881030d 	sth	r2,1036(sp)
   28d38:	dac11915 	stw	r11,1124(sp)
   28d3c:	da81038d 	sth	r10,1038(sp)
   28d40:	da410715 	stw	r9,1052(sp)
   28d44:	da010915 	stw	r8,1060(sp)
   28d48:	dec10015 	stw	sp,1024(sp)
   28d4c:	dec10415 	stw	sp,1040(sp)
   28d50:	d8c10215 	stw	r3,1032(sp)
   28d54:	d8c10515 	stw	r3,1044(sp)
   28d58:	d8010615 	stw	zero,1048(sp)
   28d5c:	00278800 	call	27880 <___vfiprintf_internal_r>
   28d60:	1023883a 	mov	r17,r2
   28d64:	10000416 	blt	r2,zero,28d78 <__sbprintf+0x80>
   28d68:	d9410004 	addi	r5,sp,1024
   28d6c:	9009883a 	mov	r4,r18
   28d70:	0024c180 	call	24c18 <_fflush_r>
   28d74:	10000d1e 	bne	r2,zero,28dac <__sbprintf+0xb4>
   28d78:	d881030b 	ldhu	r2,1036(sp)
   28d7c:	1080100c 	andi	r2,r2,64
   28d80:	10000326 	beq	r2,zero,28d90 <__sbprintf+0x98>
   28d84:	8080030b 	ldhu	r2,12(r16)
   28d88:	10801014 	ori	r2,r2,64
   28d8c:	8080030d 	sth	r2,12(r16)
   28d90:	8805883a 	mov	r2,r17
   28d94:	dfc11d17 	ldw	ra,1140(sp)
   28d98:	dc811c17 	ldw	r18,1136(sp)
   28d9c:	dc411b17 	ldw	r17,1132(sp)
   28da0:	dc011a17 	ldw	r16,1128(sp)
   28da4:	dec11e04 	addi	sp,sp,1144
   28da8:	f800283a 	ret
   28dac:	047fffc4 	movi	r17,-1
   28db0:	003ff106 	br	28d78 <__alt_data_end+0xfffe8d78>

00028db4 <_write_r>:
   28db4:	defffd04 	addi	sp,sp,-12
   28db8:	2805883a 	mov	r2,r5
   28dbc:	dc000015 	stw	r16,0(sp)
   28dc0:	040000f4 	movhi	r16,3
   28dc4:	dc400115 	stw	r17,4(sp)
   28dc8:	300b883a 	mov	r5,r6
   28dcc:	840e5e04 	addi	r16,r16,14712
   28dd0:	2023883a 	mov	r17,r4
   28dd4:	380d883a 	mov	r6,r7
   28dd8:	1009883a 	mov	r4,r2
   28ddc:	dfc00215 	stw	ra,8(sp)
   28de0:	80000015 	stw	zero,0(r16)
   28de4:	002e0d00 	call	2e0d0 <write>
   28de8:	00ffffc4 	movi	r3,-1
   28dec:	10c00526 	beq	r2,r3,28e04 <_write_r+0x50>
   28df0:	dfc00217 	ldw	ra,8(sp)
   28df4:	dc400117 	ldw	r17,4(sp)
   28df8:	dc000017 	ldw	r16,0(sp)
   28dfc:	dec00304 	addi	sp,sp,12
   28e00:	f800283a 	ret
   28e04:	80c00017 	ldw	r3,0(r16)
   28e08:	183ff926 	beq	r3,zero,28df0 <__alt_data_end+0xfffe8df0>
   28e0c:	88c00015 	stw	r3,0(r17)
   28e10:	003ff706 	br	28df0 <__alt_data_end+0xfffe8df0>

00028e14 <_close_r>:
   28e14:	defffd04 	addi	sp,sp,-12
   28e18:	dc000015 	stw	r16,0(sp)
   28e1c:	040000f4 	movhi	r16,3
   28e20:	dc400115 	stw	r17,4(sp)
   28e24:	840e5e04 	addi	r16,r16,14712
   28e28:	2023883a 	mov	r17,r4
   28e2c:	2809883a 	mov	r4,r5
   28e30:	dfc00215 	stw	ra,8(sp)
   28e34:	80000015 	stw	zero,0(r16)
   28e38:	002d3b80 	call	2d3b8 <close>
   28e3c:	00ffffc4 	movi	r3,-1
   28e40:	10c00526 	beq	r2,r3,28e58 <_close_r+0x44>
   28e44:	dfc00217 	ldw	ra,8(sp)
   28e48:	dc400117 	ldw	r17,4(sp)
   28e4c:	dc000017 	ldw	r16,0(sp)
   28e50:	dec00304 	addi	sp,sp,12
   28e54:	f800283a 	ret
   28e58:	80c00017 	ldw	r3,0(r16)
   28e5c:	183ff926 	beq	r3,zero,28e44 <__alt_data_end+0xfffe8e44>
   28e60:	88c00015 	stw	r3,0(r17)
   28e64:	003ff706 	br	28e44 <__alt_data_end+0xfffe8e44>

00028e68 <_calloc_r>:
   28e68:	298b383a 	mul	r5,r5,r6
   28e6c:	defffe04 	addi	sp,sp,-8
   28e70:	dfc00115 	stw	ra,4(sp)
   28e74:	dc000015 	stw	r16,0(sp)
   28e78:	00258980 	call	25898 <_malloc_r>
   28e7c:	10002926 	beq	r2,zero,28f24 <_calloc_r+0xbc>
   28e80:	11bfff17 	ldw	r6,-4(r2)
   28e84:	1021883a 	mov	r16,r2
   28e88:	00bfff04 	movi	r2,-4
   28e8c:	308c703a 	and	r6,r6,r2
   28e90:	00c00904 	movi	r3,36
   28e94:	308d883a 	add	r6,r6,r2
   28e98:	19801636 	bltu	r3,r6,28ef4 <_calloc_r+0x8c>
   28e9c:	008004c4 	movi	r2,19
   28ea0:	11800b2e 	bgeu	r2,r6,28ed0 <_calloc_r+0x68>
   28ea4:	80000015 	stw	zero,0(r16)
   28ea8:	80000115 	stw	zero,4(r16)
   28eac:	008006c4 	movi	r2,27
   28eb0:	11801a2e 	bgeu	r2,r6,28f1c <_calloc_r+0xb4>
   28eb4:	80000215 	stw	zero,8(r16)
   28eb8:	80000315 	stw	zero,12(r16)
   28ebc:	30c0151e 	bne	r6,r3,28f14 <_calloc_r+0xac>
   28ec0:	80000415 	stw	zero,16(r16)
   28ec4:	80800604 	addi	r2,r16,24
   28ec8:	80000515 	stw	zero,20(r16)
   28ecc:	00000106 	br	28ed4 <_calloc_r+0x6c>
   28ed0:	8005883a 	mov	r2,r16
   28ed4:	10000015 	stw	zero,0(r2)
   28ed8:	10000115 	stw	zero,4(r2)
   28edc:	10000215 	stw	zero,8(r2)
   28ee0:	8005883a 	mov	r2,r16
   28ee4:	dfc00117 	ldw	ra,4(sp)
   28ee8:	dc000017 	ldw	r16,0(sp)
   28eec:	dec00204 	addi	sp,sp,8
   28ef0:	f800283a 	ret
   28ef4:	000b883a 	mov	r5,zero
   28ef8:	8009883a 	mov	r4,r16
   28efc:	00262d00 	call	262d0 <memset>
   28f00:	8005883a 	mov	r2,r16
   28f04:	dfc00117 	ldw	ra,4(sp)
   28f08:	dc000017 	ldw	r16,0(sp)
   28f0c:	dec00204 	addi	sp,sp,8
   28f10:	f800283a 	ret
   28f14:	80800404 	addi	r2,r16,16
   28f18:	003fee06 	br	28ed4 <__alt_data_end+0xfffe8ed4>
   28f1c:	80800204 	addi	r2,r16,8
   28f20:	003fec06 	br	28ed4 <__alt_data_end+0xfffe8ed4>
   28f24:	0005883a 	mov	r2,zero
   28f28:	003fee06 	br	28ee4 <__alt_data_end+0xfffe8ee4>

00028f2c <_fclose_r>:
   28f2c:	28003926 	beq	r5,zero,29014 <_fclose_r+0xe8>
   28f30:	defffc04 	addi	sp,sp,-16
   28f34:	dc400115 	stw	r17,4(sp)
   28f38:	dc000015 	stw	r16,0(sp)
   28f3c:	dfc00315 	stw	ra,12(sp)
   28f40:	dc800215 	stw	r18,8(sp)
   28f44:	2023883a 	mov	r17,r4
   28f48:	2821883a 	mov	r16,r5
   28f4c:	20000226 	beq	r4,zero,28f58 <_fclose_r+0x2c>
   28f50:	20800e17 	ldw	r2,56(r4)
   28f54:	10002726 	beq	r2,zero,28ff4 <_fclose_r+0xc8>
   28f58:	8080030f 	ldh	r2,12(r16)
   28f5c:	1000071e 	bne	r2,zero,28f7c <_fclose_r+0x50>
   28f60:	0005883a 	mov	r2,zero
   28f64:	dfc00317 	ldw	ra,12(sp)
   28f68:	dc800217 	ldw	r18,8(sp)
   28f6c:	dc400117 	ldw	r17,4(sp)
   28f70:	dc000017 	ldw	r16,0(sp)
   28f74:	dec00404 	addi	sp,sp,16
   28f78:	f800283a 	ret
   28f7c:	800b883a 	mov	r5,r16
   28f80:	8809883a 	mov	r4,r17
   28f84:	00249fc0 	call	249fc <__sflush_r>
   28f88:	1025883a 	mov	r18,r2
   28f8c:	80800b17 	ldw	r2,44(r16)
   28f90:	10000426 	beq	r2,zero,28fa4 <_fclose_r+0x78>
   28f94:	81400717 	ldw	r5,28(r16)
   28f98:	8809883a 	mov	r4,r17
   28f9c:	103ee83a 	callr	r2
   28fa0:	10001616 	blt	r2,zero,28ffc <_fclose_r+0xd0>
   28fa4:	8080030b 	ldhu	r2,12(r16)
   28fa8:	1080200c 	andi	r2,r2,128
   28fac:	1000151e 	bne	r2,zero,29004 <_fclose_r+0xd8>
   28fb0:	81400c17 	ldw	r5,48(r16)
   28fb4:	28000526 	beq	r5,zero,28fcc <_fclose_r+0xa0>
   28fb8:	80801004 	addi	r2,r16,64
   28fbc:	28800226 	beq	r5,r2,28fc8 <_fclose_r+0x9c>
   28fc0:	8809883a 	mov	r4,r17
   28fc4:	00251680 	call	25168 <_free_r>
   28fc8:	80000c15 	stw	zero,48(r16)
   28fcc:	81401117 	ldw	r5,68(r16)
   28fd0:	28000326 	beq	r5,zero,28fe0 <_fclose_r+0xb4>
   28fd4:	8809883a 	mov	r4,r17
   28fd8:	00251680 	call	25168 <_free_r>
   28fdc:	80001115 	stw	zero,68(r16)
   28fe0:	00250040 	call	25004 <__sfp_lock_acquire>
   28fe4:	8000030d 	sth	zero,12(r16)
   28fe8:	00250080 	call	25008 <__sfp_lock_release>
   28fec:	9005883a 	mov	r2,r18
   28ff0:	003fdc06 	br	28f64 <__alt_data_end+0xfffe8f64>
   28ff4:	0024ff40 	call	24ff4 <__sinit>
   28ff8:	003fd706 	br	28f58 <__alt_data_end+0xfffe8f58>
   28ffc:	04bfffc4 	movi	r18,-1
   29000:	003fe806 	br	28fa4 <__alt_data_end+0xfffe8fa4>
   29004:	81400417 	ldw	r5,16(r16)
   29008:	8809883a 	mov	r4,r17
   2900c:	00251680 	call	25168 <_free_r>
   29010:	003fe706 	br	28fb0 <__alt_data_end+0xfffe8fb0>
   29014:	0005883a 	mov	r2,zero
   29018:	f800283a 	ret

0002901c <fclose>:
   2901c:	008000f4 	movhi	r2,3
   29020:	10878b04 	addi	r2,r2,7724
   29024:	200b883a 	mov	r5,r4
   29028:	11000017 	ldw	r4,0(r2)
   2902c:	0028f2c1 	jmpi	28f2c <_fclose_r>

00029030 <__fputwc>:
   29030:	defff804 	addi	sp,sp,-32
   29034:	dcc00415 	stw	r19,16(sp)
   29038:	dc800315 	stw	r18,12(sp)
   2903c:	dc000115 	stw	r16,4(sp)
   29040:	dfc00715 	stw	ra,28(sp)
   29044:	dd400615 	stw	r21,24(sp)
   29048:	dd000515 	stw	r20,20(sp)
   2904c:	dc400215 	stw	r17,8(sp)
   29050:	2027883a 	mov	r19,r4
   29054:	2825883a 	mov	r18,r5
   29058:	3021883a 	mov	r16,r6
   2905c:	00256880 	call	25688 <__locale_mb_cur_max>
   29060:	00c00044 	movi	r3,1
   29064:	10c03e26 	beq	r2,r3,29160 <__fputwc+0x130>
   29068:	81c01704 	addi	r7,r16,92
   2906c:	900d883a 	mov	r6,r18
   29070:	d80b883a 	mov	r5,sp
   29074:	9809883a 	mov	r4,r19
   29078:	002a07c0 	call	2a07c <_wcrtomb_r>
   2907c:	1029883a 	mov	r20,r2
   29080:	00bfffc4 	movi	r2,-1
   29084:	a0802026 	beq	r20,r2,29108 <__fputwc+0xd8>
   29088:	d9400003 	ldbu	r5,0(sp)
   2908c:	a0001c26 	beq	r20,zero,29100 <__fputwc+0xd0>
   29090:	0023883a 	mov	r17,zero
   29094:	05400284 	movi	r21,10
   29098:	00000906 	br	290c0 <__fputwc+0x90>
   2909c:	80800017 	ldw	r2,0(r16)
   290a0:	11400005 	stb	r5,0(r2)
   290a4:	80c00017 	ldw	r3,0(r16)
   290a8:	18c00044 	addi	r3,r3,1
   290ac:	80c00015 	stw	r3,0(r16)
   290b0:	8c400044 	addi	r17,r17,1
   290b4:	dc45883a 	add	r2,sp,r17
   290b8:	8d00112e 	bgeu	r17,r20,29100 <__fputwc+0xd0>
   290bc:	11400003 	ldbu	r5,0(r2)
   290c0:	80c00217 	ldw	r3,8(r16)
   290c4:	18ffffc4 	addi	r3,r3,-1
   290c8:	80c00215 	stw	r3,8(r16)
   290cc:	183ff30e 	bge	r3,zero,2909c <__alt_data_end+0xfffe909c>
   290d0:	80800617 	ldw	r2,24(r16)
   290d4:	18801916 	blt	r3,r2,2913c <__fputwc+0x10c>
   290d8:	80800017 	ldw	r2,0(r16)
   290dc:	11400005 	stb	r5,0(r2)
   290e0:	80800017 	ldw	r2,0(r16)
   290e4:	10c00003 	ldbu	r3,0(r2)
   290e8:	10800044 	addi	r2,r2,1
   290ec:	1d402326 	beq	r3,r21,2917c <__fputwc+0x14c>
   290f0:	80800015 	stw	r2,0(r16)
   290f4:	8c400044 	addi	r17,r17,1
   290f8:	dc45883a 	add	r2,sp,r17
   290fc:	8d3fef36 	bltu	r17,r20,290bc <__alt_data_end+0xfffe90bc>
   29100:	9005883a 	mov	r2,r18
   29104:	00000406 	br	29118 <__fputwc+0xe8>
   29108:	80c0030b 	ldhu	r3,12(r16)
   2910c:	a005883a 	mov	r2,r20
   29110:	18c01014 	ori	r3,r3,64
   29114:	80c0030d 	sth	r3,12(r16)
   29118:	dfc00717 	ldw	ra,28(sp)
   2911c:	dd400617 	ldw	r21,24(sp)
   29120:	dd000517 	ldw	r20,20(sp)
   29124:	dcc00417 	ldw	r19,16(sp)
   29128:	dc800317 	ldw	r18,12(sp)
   2912c:	dc400217 	ldw	r17,8(sp)
   29130:	dc000117 	ldw	r16,4(sp)
   29134:	dec00804 	addi	sp,sp,32
   29138:	f800283a 	ret
   2913c:	800d883a 	mov	r6,r16
   29140:	29403fcc 	andi	r5,r5,255
   29144:	9809883a 	mov	r4,r19
   29148:	0029f240 	call	29f24 <__swbuf_r>
   2914c:	10bfffe0 	cmpeqi	r2,r2,-1
   29150:	10803fcc 	andi	r2,r2,255
   29154:	103fd626 	beq	r2,zero,290b0 <__alt_data_end+0xfffe90b0>
   29158:	00bfffc4 	movi	r2,-1
   2915c:	003fee06 	br	29118 <__alt_data_end+0xfffe9118>
   29160:	90ffffc4 	addi	r3,r18,-1
   29164:	01003f84 	movi	r4,254
   29168:	20ffbf36 	bltu	r4,r3,29068 <__alt_data_end+0xfffe9068>
   2916c:	900b883a 	mov	r5,r18
   29170:	dc800005 	stb	r18,0(sp)
   29174:	1029883a 	mov	r20,r2
   29178:	003fc506 	br	29090 <__alt_data_end+0xfffe9090>
   2917c:	800d883a 	mov	r6,r16
   29180:	a80b883a 	mov	r5,r21
   29184:	9809883a 	mov	r4,r19
   29188:	0029f240 	call	29f24 <__swbuf_r>
   2918c:	10bfffe0 	cmpeqi	r2,r2,-1
   29190:	003fef06 	br	29150 <__alt_data_end+0xfffe9150>

00029194 <_fputwc_r>:
   29194:	3080030b 	ldhu	r2,12(r6)
   29198:	10c8000c 	andi	r3,r2,8192
   2919c:	1800051e 	bne	r3,zero,291b4 <_fputwc_r+0x20>
   291a0:	30c01917 	ldw	r3,100(r6)
   291a4:	10880014 	ori	r2,r2,8192
   291a8:	3080030d 	sth	r2,12(r6)
   291ac:	18880014 	ori	r2,r3,8192
   291b0:	30801915 	stw	r2,100(r6)
   291b4:	00290301 	jmpi	29030 <__fputwc>

000291b8 <fputwc>:
   291b8:	008000f4 	movhi	r2,3
   291bc:	defffc04 	addi	sp,sp,-16
   291c0:	10878b04 	addi	r2,r2,7724
   291c4:	dc000115 	stw	r16,4(sp)
   291c8:	14000017 	ldw	r16,0(r2)
   291cc:	dc400215 	stw	r17,8(sp)
   291d0:	dfc00315 	stw	ra,12(sp)
   291d4:	2023883a 	mov	r17,r4
   291d8:	80000226 	beq	r16,zero,291e4 <fputwc+0x2c>
   291dc:	80800e17 	ldw	r2,56(r16)
   291e0:	10001026 	beq	r2,zero,29224 <fputwc+0x6c>
   291e4:	2880030b 	ldhu	r2,12(r5)
   291e8:	10c8000c 	andi	r3,r2,8192
   291ec:	1800051e 	bne	r3,zero,29204 <fputwc+0x4c>
   291f0:	28c01917 	ldw	r3,100(r5)
   291f4:	10880014 	ori	r2,r2,8192
   291f8:	2880030d 	sth	r2,12(r5)
   291fc:	18880014 	ori	r2,r3,8192
   29200:	28801915 	stw	r2,100(r5)
   29204:	280d883a 	mov	r6,r5
   29208:	8009883a 	mov	r4,r16
   2920c:	880b883a 	mov	r5,r17
   29210:	dfc00317 	ldw	ra,12(sp)
   29214:	dc400217 	ldw	r17,8(sp)
   29218:	dc000117 	ldw	r16,4(sp)
   2921c:	dec00404 	addi	sp,sp,16
   29220:	00290301 	jmpi	29030 <__fputwc>
   29224:	8009883a 	mov	r4,r16
   29228:	d9400015 	stw	r5,0(sp)
   2922c:	0024ff40 	call	24ff4 <__sinit>
   29230:	d9400017 	ldw	r5,0(sp)
   29234:	003feb06 	br	291e4 <__alt_data_end+0xfffe91e4>

00029238 <_fstat_r>:
   29238:	defffd04 	addi	sp,sp,-12
   2923c:	2805883a 	mov	r2,r5
   29240:	dc000015 	stw	r16,0(sp)
   29244:	040000f4 	movhi	r16,3
   29248:	dc400115 	stw	r17,4(sp)
   2924c:	840e5e04 	addi	r16,r16,14712
   29250:	2023883a 	mov	r17,r4
   29254:	300b883a 	mov	r5,r6
   29258:	1009883a 	mov	r4,r2
   2925c:	dfc00215 	stw	ra,8(sp)
   29260:	80000015 	stw	zero,0(r16)
   29264:	002d4f00 	call	2d4f0 <fstat>
   29268:	00ffffc4 	movi	r3,-1
   2926c:	10c00526 	beq	r2,r3,29284 <_fstat_r+0x4c>
   29270:	dfc00217 	ldw	ra,8(sp)
   29274:	dc400117 	ldw	r17,4(sp)
   29278:	dc000017 	ldw	r16,0(sp)
   2927c:	dec00304 	addi	sp,sp,12
   29280:	f800283a 	ret
   29284:	80c00017 	ldw	r3,0(r16)
   29288:	183ff926 	beq	r3,zero,29270 <__alt_data_end+0xfffe9270>
   2928c:	88c00015 	stw	r3,0(r17)
   29290:	003ff706 	br	29270 <__alt_data_end+0xfffe9270>

00029294 <__sfvwrite_r>:
   29294:	30800217 	ldw	r2,8(r6)
   29298:	10006726 	beq	r2,zero,29438 <__sfvwrite_r+0x1a4>
   2929c:	28c0030b 	ldhu	r3,12(r5)
   292a0:	defff404 	addi	sp,sp,-48
   292a4:	dd400715 	stw	r21,28(sp)
   292a8:	dd000615 	stw	r20,24(sp)
   292ac:	dc000215 	stw	r16,8(sp)
   292b0:	dfc00b15 	stw	ra,44(sp)
   292b4:	df000a15 	stw	fp,40(sp)
   292b8:	ddc00915 	stw	r23,36(sp)
   292bc:	dd800815 	stw	r22,32(sp)
   292c0:	dcc00515 	stw	r19,20(sp)
   292c4:	dc800415 	stw	r18,16(sp)
   292c8:	dc400315 	stw	r17,12(sp)
   292cc:	1880020c 	andi	r2,r3,8
   292d0:	2821883a 	mov	r16,r5
   292d4:	202b883a 	mov	r21,r4
   292d8:	3029883a 	mov	r20,r6
   292dc:	10002726 	beq	r2,zero,2937c <__sfvwrite_r+0xe8>
   292e0:	28800417 	ldw	r2,16(r5)
   292e4:	10002526 	beq	r2,zero,2937c <__sfvwrite_r+0xe8>
   292e8:	1880008c 	andi	r2,r3,2
   292ec:	a4400017 	ldw	r17,0(r20)
   292f0:	10002a26 	beq	r2,zero,2939c <__sfvwrite_r+0x108>
   292f4:	05a00034 	movhi	r22,32768
   292f8:	0027883a 	mov	r19,zero
   292fc:	0025883a 	mov	r18,zero
   29300:	b5bf0004 	addi	r22,r22,-1024
   29304:	980d883a 	mov	r6,r19
   29308:	a809883a 	mov	r4,r21
   2930c:	90004626 	beq	r18,zero,29428 <__sfvwrite_r+0x194>
   29310:	900f883a 	mov	r7,r18
   29314:	b480022e 	bgeu	r22,r18,29320 <__sfvwrite_r+0x8c>
   29318:	01e00034 	movhi	r7,32768
   2931c:	39ff0004 	addi	r7,r7,-1024
   29320:	80800917 	ldw	r2,36(r16)
   29324:	81400717 	ldw	r5,28(r16)
   29328:	103ee83a 	callr	r2
   2932c:	0080570e 	bge	zero,r2,2948c <__sfvwrite_r+0x1f8>
   29330:	a0c00217 	ldw	r3,8(r20)
   29334:	98a7883a 	add	r19,r19,r2
   29338:	90a5c83a 	sub	r18,r18,r2
   2933c:	1885c83a 	sub	r2,r3,r2
   29340:	a0800215 	stw	r2,8(r20)
   29344:	103fef1e 	bne	r2,zero,29304 <__alt_data_end+0xfffe9304>
   29348:	0005883a 	mov	r2,zero
   2934c:	dfc00b17 	ldw	ra,44(sp)
   29350:	df000a17 	ldw	fp,40(sp)
   29354:	ddc00917 	ldw	r23,36(sp)
   29358:	dd800817 	ldw	r22,32(sp)
   2935c:	dd400717 	ldw	r21,28(sp)
   29360:	dd000617 	ldw	r20,24(sp)
   29364:	dcc00517 	ldw	r19,20(sp)
   29368:	dc800417 	ldw	r18,16(sp)
   2936c:	dc400317 	ldw	r17,12(sp)
   29370:	dc000217 	ldw	r16,8(sp)
   29374:	dec00c04 	addi	sp,sp,48
   29378:	f800283a 	ret
   2937c:	800b883a 	mov	r5,r16
   29380:	a809883a 	mov	r4,r21
   29384:	00230200 	call	23020 <__swsetup_r>
   29388:	1000eb1e 	bne	r2,zero,29738 <__sfvwrite_r+0x4a4>
   2938c:	80c0030b 	ldhu	r3,12(r16)
   29390:	a4400017 	ldw	r17,0(r20)
   29394:	1880008c 	andi	r2,r3,2
   29398:	103fd61e 	bne	r2,zero,292f4 <__alt_data_end+0xfffe92f4>
   2939c:	1880004c 	andi	r2,r3,1
   293a0:	10003f1e 	bne	r2,zero,294a0 <__sfvwrite_r+0x20c>
   293a4:	0039883a 	mov	fp,zero
   293a8:	0025883a 	mov	r18,zero
   293ac:	90001a26 	beq	r18,zero,29418 <__sfvwrite_r+0x184>
   293b0:	1880800c 	andi	r2,r3,512
   293b4:	84c00217 	ldw	r19,8(r16)
   293b8:	10002126 	beq	r2,zero,29440 <__sfvwrite_r+0x1ac>
   293bc:	982f883a 	mov	r23,r19
   293c0:	94c09336 	bltu	r18,r19,29610 <__sfvwrite_r+0x37c>
   293c4:	1881200c 	andi	r2,r3,1152
   293c8:	10009e1e 	bne	r2,zero,29644 <__sfvwrite_r+0x3b0>
   293cc:	81000017 	ldw	r4,0(r16)
   293d0:	b80d883a 	mov	r6,r23
   293d4:	e00b883a 	mov	r5,fp
   293d8:	00298040 	call	29804 <memmove>
   293dc:	80c00217 	ldw	r3,8(r16)
   293e0:	81000017 	ldw	r4,0(r16)
   293e4:	9005883a 	mov	r2,r18
   293e8:	1ce7c83a 	sub	r19,r3,r19
   293ec:	25cf883a 	add	r7,r4,r23
   293f0:	84c00215 	stw	r19,8(r16)
   293f4:	81c00015 	stw	r7,0(r16)
   293f8:	a0c00217 	ldw	r3,8(r20)
   293fc:	e0b9883a 	add	fp,fp,r2
   29400:	90a5c83a 	sub	r18,r18,r2
   29404:	18a7c83a 	sub	r19,r3,r2
   29408:	a4c00215 	stw	r19,8(r20)
   2940c:	983fce26 	beq	r19,zero,29348 <__alt_data_end+0xfffe9348>
   29410:	80c0030b 	ldhu	r3,12(r16)
   29414:	903fe61e 	bne	r18,zero,293b0 <__alt_data_end+0xfffe93b0>
   29418:	8f000017 	ldw	fp,0(r17)
   2941c:	8c800117 	ldw	r18,4(r17)
   29420:	8c400204 	addi	r17,r17,8
   29424:	003fe106 	br	293ac <__alt_data_end+0xfffe93ac>
   29428:	8cc00017 	ldw	r19,0(r17)
   2942c:	8c800117 	ldw	r18,4(r17)
   29430:	8c400204 	addi	r17,r17,8
   29434:	003fb306 	br	29304 <__alt_data_end+0xfffe9304>
   29438:	0005883a 	mov	r2,zero
   2943c:	f800283a 	ret
   29440:	81000017 	ldw	r4,0(r16)
   29444:	80800417 	ldw	r2,16(r16)
   29448:	11005736 	bltu	r2,r4,295a8 <__sfvwrite_r+0x314>
   2944c:	85c00517 	ldw	r23,20(r16)
   29450:	95c05536 	bltu	r18,r23,295a8 <__sfvwrite_r+0x314>
   29454:	00a00034 	movhi	r2,32768
   29458:	10bfffc4 	addi	r2,r2,-1
   2945c:	9009883a 	mov	r4,r18
   29460:	1480012e 	bgeu	r2,r18,29468 <__sfvwrite_r+0x1d4>
   29464:	1009883a 	mov	r4,r2
   29468:	b80b883a 	mov	r5,r23
   2946c:	0020b300 	call	20b30 <__divsi3>
   29470:	15cf383a 	mul	r7,r2,r23
   29474:	81400717 	ldw	r5,28(r16)
   29478:	80800917 	ldw	r2,36(r16)
   2947c:	e00d883a 	mov	r6,fp
   29480:	a809883a 	mov	r4,r21
   29484:	103ee83a 	callr	r2
   29488:	00bfdb16 	blt	zero,r2,293f8 <__alt_data_end+0xfffe93f8>
   2948c:	8080030b 	ldhu	r2,12(r16)
   29490:	10801014 	ori	r2,r2,64
   29494:	8080030d 	sth	r2,12(r16)
   29498:	00bfffc4 	movi	r2,-1
   2949c:	003fab06 	br	2934c <__alt_data_end+0xfffe934c>
   294a0:	0027883a 	mov	r19,zero
   294a4:	0011883a 	mov	r8,zero
   294a8:	0039883a 	mov	fp,zero
   294ac:	0025883a 	mov	r18,zero
   294b0:	90001f26 	beq	r18,zero,29530 <__sfvwrite_r+0x29c>
   294b4:	40005a26 	beq	r8,zero,29620 <__sfvwrite_r+0x38c>
   294b8:	982d883a 	mov	r22,r19
   294bc:	94c0012e 	bgeu	r18,r19,294c4 <__sfvwrite_r+0x230>
   294c0:	902d883a 	mov	r22,r18
   294c4:	81000017 	ldw	r4,0(r16)
   294c8:	80800417 	ldw	r2,16(r16)
   294cc:	b02f883a 	mov	r23,r22
   294d0:	81c00517 	ldw	r7,20(r16)
   294d4:	1100032e 	bgeu	r2,r4,294e4 <__sfvwrite_r+0x250>
   294d8:	80c00217 	ldw	r3,8(r16)
   294dc:	38c7883a 	add	r3,r7,r3
   294e0:	1d801816 	blt	r3,r22,29544 <__sfvwrite_r+0x2b0>
   294e4:	b1c03e16 	blt	r22,r7,295e0 <__sfvwrite_r+0x34c>
   294e8:	80800917 	ldw	r2,36(r16)
   294ec:	81400717 	ldw	r5,28(r16)
   294f0:	e00d883a 	mov	r6,fp
   294f4:	da000115 	stw	r8,4(sp)
   294f8:	a809883a 	mov	r4,r21
   294fc:	103ee83a 	callr	r2
   29500:	102f883a 	mov	r23,r2
   29504:	da000117 	ldw	r8,4(sp)
   29508:	00bfe00e 	bge	zero,r2,2948c <__alt_data_end+0xfffe948c>
   2950c:	9de7c83a 	sub	r19,r19,r23
   29510:	98001f26 	beq	r19,zero,29590 <__sfvwrite_r+0x2fc>
   29514:	a0800217 	ldw	r2,8(r20)
   29518:	e5f9883a 	add	fp,fp,r23
   2951c:	95e5c83a 	sub	r18,r18,r23
   29520:	15efc83a 	sub	r23,r2,r23
   29524:	a5c00215 	stw	r23,8(r20)
   29528:	b83f8726 	beq	r23,zero,29348 <__alt_data_end+0xfffe9348>
   2952c:	903fe11e 	bne	r18,zero,294b4 <__alt_data_end+0xfffe94b4>
   29530:	8f000017 	ldw	fp,0(r17)
   29534:	8c800117 	ldw	r18,4(r17)
   29538:	0011883a 	mov	r8,zero
   2953c:	8c400204 	addi	r17,r17,8
   29540:	003fdb06 	br	294b0 <__alt_data_end+0xfffe94b0>
   29544:	180d883a 	mov	r6,r3
   29548:	e00b883a 	mov	r5,fp
   2954c:	da000115 	stw	r8,4(sp)
   29550:	d8c00015 	stw	r3,0(sp)
   29554:	00298040 	call	29804 <memmove>
   29558:	d8c00017 	ldw	r3,0(sp)
   2955c:	80800017 	ldw	r2,0(r16)
   29560:	800b883a 	mov	r5,r16
   29564:	a809883a 	mov	r4,r21
   29568:	10c5883a 	add	r2,r2,r3
   2956c:	80800015 	stw	r2,0(r16)
   29570:	d8c00015 	stw	r3,0(sp)
   29574:	0024c180 	call	24c18 <_fflush_r>
   29578:	d8c00017 	ldw	r3,0(sp)
   2957c:	da000117 	ldw	r8,4(sp)
   29580:	103fc21e 	bne	r2,zero,2948c <__alt_data_end+0xfffe948c>
   29584:	182f883a 	mov	r23,r3
   29588:	9de7c83a 	sub	r19,r19,r23
   2958c:	983fe11e 	bne	r19,zero,29514 <__alt_data_end+0xfffe9514>
   29590:	800b883a 	mov	r5,r16
   29594:	a809883a 	mov	r4,r21
   29598:	0024c180 	call	24c18 <_fflush_r>
   2959c:	103fbb1e 	bne	r2,zero,2948c <__alt_data_end+0xfffe948c>
   295a0:	0011883a 	mov	r8,zero
   295a4:	003fdb06 	br	29514 <__alt_data_end+0xfffe9514>
   295a8:	94c0012e 	bgeu	r18,r19,295b0 <__sfvwrite_r+0x31c>
   295ac:	9027883a 	mov	r19,r18
   295b0:	980d883a 	mov	r6,r19
   295b4:	e00b883a 	mov	r5,fp
   295b8:	00298040 	call	29804 <memmove>
   295bc:	80800217 	ldw	r2,8(r16)
   295c0:	80c00017 	ldw	r3,0(r16)
   295c4:	14c5c83a 	sub	r2,r2,r19
   295c8:	1cc7883a 	add	r3,r3,r19
   295cc:	80800215 	stw	r2,8(r16)
   295d0:	80c00015 	stw	r3,0(r16)
   295d4:	10004326 	beq	r2,zero,296e4 <__sfvwrite_r+0x450>
   295d8:	9805883a 	mov	r2,r19
   295dc:	003f8606 	br	293f8 <__alt_data_end+0xfffe93f8>
   295e0:	b00d883a 	mov	r6,r22
   295e4:	e00b883a 	mov	r5,fp
   295e8:	da000115 	stw	r8,4(sp)
   295ec:	00298040 	call	29804 <memmove>
   295f0:	80800217 	ldw	r2,8(r16)
   295f4:	80c00017 	ldw	r3,0(r16)
   295f8:	da000117 	ldw	r8,4(sp)
   295fc:	1585c83a 	sub	r2,r2,r22
   29600:	1dad883a 	add	r22,r3,r22
   29604:	80800215 	stw	r2,8(r16)
   29608:	85800015 	stw	r22,0(r16)
   2960c:	003fbf06 	br	2950c <__alt_data_end+0xfffe950c>
   29610:	81000017 	ldw	r4,0(r16)
   29614:	9027883a 	mov	r19,r18
   29618:	902f883a 	mov	r23,r18
   2961c:	003f6c06 	br	293d0 <__alt_data_end+0xfffe93d0>
   29620:	900d883a 	mov	r6,r18
   29624:	01400284 	movi	r5,10
   29628:	e009883a 	mov	r4,fp
   2962c:	00260a40 	call	260a4 <memchr>
   29630:	10003e26 	beq	r2,zero,2972c <__sfvwrite_r+0x498>
   29634:	10800044 	addi	r2,r2,1
   29638:	1727c83a 	sub	r19,r2,fp
   2963c:	02000044 	movi	r8,1
   29640:	003f9d06 	br	294b8 <__alt_data_end+0xfffe94b8>
   29644:	80800517 	ldw	r2,20(r16)
   29648:	81400417 	ldw	r5,16(r16)
   2964c:	81c00017 	ldw	r7,0(r16)
   29650:	10a7883a 	add	r19,r2,r2
   29654:	9885883a 	add	r2,r19,r2
   29658:	1026d7fa 	srli	r19,r2,31
   2965c:	396dc83a 	sub	r22,r7,r5
   29660:	b1000044 	addi	r4,r22,1
   29664:	9885883a 	add	r2,r19,r2
   29668:	1027d07a 	srai	r19,r2,1
   2966c:	2485883a 	add	r2,r4,r18
   29670:	980d883a 	mov	r6,r19
   29674:	9880022e 	bgeu	r19,r2,29680 <__sfvwrite_r+0x3ec>
   29678:	1027883a 	mov	r19,r2
   2967c:	100d883a 	mov	r6,r2
   29680:	18c1000c 	andi	r3,r3,1024
   29684:	18001c26 	beq	r3,zero,296f8 <__sfvwrite_r+0x464>
   29688:	300b883a 	mov	r5,r6
   2968c:	a809883a 	mov	r4,r21
   29690:	00258980 	call	25898 <_malloc_r>
   29694:	102f883a 	mov	r23,r2
   29698:	10002926 	beq	r2,zero,29740 <__sfvwrite_r+0x4ac>
   2969c:	81400417 	ldw	r5,16(r16)
   296a0:	b00d883a 	mov	r6,r22
   296a4:	1009883a 	mov	r4,r2
   296a8:	00261880 	call	26188 <memcpy>
   296ac:	8080030b 	ldhu	r2,12(r16)
   296b0:	00fedfc4 	movi	r3,-1153
   296b4:	10c4703a 	and	r2,r2,r3
   296b8:	10802014 	ori	r2,r2,128
   296bc:	8080030d 	sth	r2,12(r16)
   296c0:	bd89883a 	add	r4,r23,r22
   296c4:	9d8fc83a 	sub	r7,r19,r22
   296c8:	85c00415 	stw	r23,16(r16)
   296cc:	84c00515 	stw	r19,20(r16)
   296d0:	81000015 	stw	r4,0(r16)
   296d4:	9027883a 	mov	r19,r18
   296d8:	81c00215 	stw	r7,8(r16)
   296dc:	902f883a 	mov	r23,r18
   296e0:	003f3b06 	br	293d0 <__alt_data_end+0xfffe93d0>
   296e4:	800b883a 	mov	r5,r16
   296e8:	a809883a 	mov	r4,r21
   296ec:	0024c180 	call	24c18 <_fflush_r>
   296f0:	103fb926 	beq	r2,zero,295d8 <__alt_data_end+0xfffe95d8>
   296f4:	003f6506 	br	2948c <__alt_data_end+0xfffe948c>
   296f8:	a809883a 	mov	r4,r21
   296fc:	00299c00 	call	299c0 <_realloc_r>
   29700:	102f883a 	mov	r23,r2
   29704:	103fee1e 	bne	r2,zero,296c0 <__alt_data_end+0xfffe96c0>
   29708:	81400417 	ldw	r5,16(r16)
   2970c:	a809883a 	mov	r4,r21
   29710:	00251680 	call	25168 <_free_r>
   29714:	8080030b 	ldhu	r2,12(r16)
   29718:	00ffdfc4 	movi	r3,-129
   2971c:	1884703a 	and	r2,r3,r2
   29720:	00c00304 	movi	r3,12
   29724:	a8c00015 	stw	r3,0(r21)
   29728:	003f5906 	br	29490 <__alt_data_end+0xfffe9490>
   2972c:	94c00044 	addi	r19,r18,1
   29730:	02000044 	movi	r8,1
   29734:	003f6006 	br	294b8 <__alt_data_end+0xfffe94b8>
   29738:	00bfffc4 	movi	r2,-1
   2973c:	003f0306 	br	2934c <__alt_data_end+0xfffe934c>
   29740:	00800304 	movi	r2,12
   29744:	a8800015 	stw	r2,0(r21)
   29748:	8080030b 	ldhu	r2,12(r16)
   2974c:	003f5006 	br	29490 <__alt_data_end+0xfffe9490>

00029750 <_isatty_r>:
   29750:	defffd04 	addi	sp,sp,-12
   29754:	dc000015 	stw	r16,0(sp)
   29758:	040000f4 	movhi	r16,3
   2975c:	dc400115 	stw	r17,4(sp)
   29760:	840e5e04 	addi	r16,r16,14712
   29764:	2023883a 	mov	r17,r4
   29768:	2809883a 	mov	r4,r5
   2976c:	dfc00215 	stw	ra,8(sp)
   29770:	80000015 	stw	zero,0(r16)
   29774:	002d87c0 	call	2d87c <isatty>
   29778:	00ffffc4 	movi	r3,-1
   2977c:	10c00526 	beq	r2,r3,29794 <_isatty_r+0x44>
   29780:	dfc00217 	ldw	ra,8(sp)
   29784:	dc400117 	ldw	r17,4(sp)
   29788:	dc000017 	ldw	r16,0(sp)
   2978c:	dec00304 	addi	sp,sp,12
   29790:	f800283a 	ret
   29794:	80c00017 	ldw	r3,0(r16)
   29798:	183ff926 	beq	r3,zero,29780 <__alt_data_end+0xfffe9780>
   2979c:	88c00015 	stw	r3,0(r17)
   297a0:	003ff706 	br	29780 <__alt_data_end+0xfffe9780>

000297a4 <_lseek_r>:
   297a4:	defffd04 	addi	sp,sp,-12
   297a8:	2805883a 	mov	r2,r5
   297ac:	dc000015 	stw	r16,0(sp)
   297b0:	040000f4 	movhi	r16,3
   297b4:	dc400115 	stw	r17,4(sp)
   297b8:	300b883a 	mov	r5,r6
   297bc:	840e5e04 	addi	r16,r16,14712
   297c0:	2023883a 	mov	r17,r4
   297c4:	380d883a 	mov	r6,r7
   297c8:	1009883a 	mov	r4,r2
   297cc:	dfc00215 	stw	ra,8(sp)
   297d0:	80000015 	stw	zero,0(r16)
   297d4:	002da480 	call	2da48 <lseek>
   297d8:	00ffffc4 	movi	r3,-1
   297dc:	10c00526 	beq	r2,r3,297f4 <_lseek_r+0x50>
   297e0:	dfc00217 	ldw	ra,8(sp)
   297e4:	dc400117 	ldw	r17,4(sp)
   297e8:	dc000017 	ldw	r16,0(sp)
   297ec:	dec00304 	addi	sp,sp,12
   297f0:	f800283a 	ret
   297f4:	80c00017 	ldw	r3,0(r16)
   297f8:	183ff926 	beq	r3,zero,297e0 <__alt_data_end+0xfffe97e0>
   297fc:	88c00015 	stw	r3,0(r17)
   29800:	003ff706 	br	297e0 <__alt_data_end+0xfffe97e0>

00029804 <memmove>:
   29804:	2005883a 	mov	r2,r4
   29808:	29000b2e 	bgeu	r5,r4,29838 <memmove+0x34>
   2980c:	298f883a 	add	r7,r5,r6
   29810:	21c0092e 	bgeu	r4,r7,29838 <memmove+0x34>
   29814:	2187883a 	add	r3,r4,r6
   29818:	198bc83a 	sub	r5,r3,r6
   2981c:	30004826 	beq	r6,zero,29940 <memmove+0x13c>
   29820:	39ffffc4 	addi	r7,r7,-1
   29824:	39000003 	ldbu	r4,0(r7)
   29828:	18ffffc4 	addi	r3,r3,-1
   2982c:	19000005 	stb	r4,0(r3)
   29830:	28fffb1e 	bne	r5,r3,29820 <__alt_data_end+0xfffe9820>
   29834:	f800283a 	ret
   29838:	00c003c4 	movi	r3,15
   2983c:	1980412e 	bgeu	r3,r6,29944 <memmove+0x140>
   29840:	2886b03a 	or	r3,r5,r2
   29844:	18c000cc 	andi	r3,r3,3
   29848:	1800401e 	bne	r3,zero,2994c <memmove+0x148>
   2984c:	33fffc04 	addi	r15,r6,-16
   29850:	781ed13a 	srli	r15,r15,4
   29854:	28c00104 	addi	r3,r5,4
   29858:	13400104 	addi	r13,r2,4
   2985c:	781c913a 	slli	r14,r15,4
   29860:	2b000204 	addi	r12,r5,8
   29864:	12c00204 	addi	r11,r2,8
   29868:	73800504 	addi	r14,r14,20
   2986c:	2a800304 	addi	r10,r5,12
   29870:	12400304 	addi	r9,r2,12
   29874:	2b9d883a 	add	r14,r5,r14
   29878:	2811883a 	mov	r8,r5
   2987c:	100f883a 	mov	r7,r2
   29880:	41000017 	ldw	r4,0(r8)
   29884:	39c00404 	addi	r7,r7,16
   29888:	18c00404 	addi	r3,r3,16
   2988c:	393ffc15 	stw	r4,-16(r7)
   29890:	193ffc17 	ldw	r4,-16(r3)
   29894:	6b400404 	addi	r13,r13,16
   29898:	5ac00404 	addi	r11,r11,16
   2989c:	693ffc15 	stw	r4,-16(r13)
   298a0:	61000017 	ldw	r4,0(r12)
   298a4:	4a400404 	addi	r9,r9,16
   298a8:	42000404 	addi	r8,r8,16
   298ac:	593ffc15 	stw	r4,-16(r11)
   298b0:	51000017 	ldw	r4,0(r10)
   298b4:	63000404 	addi	r12,r12,16
   298b8:	52800404 	addi	r10,r10,16
   298bc:	493ffc15 	stw	r4,-16(r9)
   298c0:	1bbfef1e 	bne	r3,r14,29880 <__alt_data_end+0xfffe9880>
   298c4:	79000044 	addi	r4,r15,1
   298c8:	2008913a 	slli	r4,r4,4
   298cc:	328003cc 	andi	r10,r6,15
   298d0:	02c000c4 	movi	r11,3
   298d4:	1107883a 	add	r3,r2,r4
   298d8:	290b883a 	add	r5,r5,r4
   298dc:	5a801e2e 	bgeu	r11,r10,29958 <memmove+0x154>
   298e0:	1813883a 	mov	r9,r3
   298e4:	2811883a 	mov	r8,r5
   298e8:	500f883a 	mov	r7,r10
   298ec:	41000017 	ldw	r4,0(r8)
   298f0:	4a400104 	addi	r9,r9,4
   298f4:	39ffff04 	addi	r7,r7,-4
   298f8:	493fff15 	stw	r4,-4(r9)
   298fc:	42000104 	addi	r8,r8,4
   29900:	59fffa36 	bltu	r11,r7,298ec <__alt_data_end+0xfffe98ec>
   29904:	513fff04 	addi	r4,r10,-4
   29908:	2008d0ba 	srli	r4,r4,2
   2990c:	318000cc 	andi	r6,r6,3
   29910:	21000044 	addi	r4,r4,1
   29914:	2109883a 	add	r4,r4,r4
   29918:	2109883a 	add	r4,r4,r4
   2991c:	1907883a 	add	r3,r3,r4
   29920:	290b883a 	add	r5,r5,r4
   29924:	30000b26 	beq	r6,zero,29954 <memmove+0x150>
   29928:	198d883a 	add	r6,r3,r6
   2992c:	29c00003 	ldbu	r7,0(r5)
   29930:	18c00044 	addi	r3,r3,1
   29934:	29400044 	addi	r5,r5,1
   29938:	19ffffc5 	stb	r7,-1(r3)
   2993c:	19bffb1e 	bne	r3,r6,2992c <__alt_data_end+0xfffe992c>
   29940:	f800283a 	ret
   29944:	1007883a 	mov	r3,r2
   29948:	003ff606 	br	29924 <__alt_data_end+0xfffe9924>
   2994c:	1007883a 	mov	r3,r2
   29950:	003ff506 	br	29928 <__alt_data_end+0xfffe9928>
   29954:	f800283a 	ret
   29958:	500d883a 	mov	r6,r10
   2995c:	003ff106 	br	29924 <__alt_data_end+0xfffe9924>

00029960 <_read_r>:
   29960:	defffd04 	addi	sp,sp,-12
   29964:	2805883a 	mov	r2,r5
   29968:	dc000015 	stw	r16,0(sp)
   2996c:	040000f4 	movhi	r16,3
   29970:	dc400115 	stw	r17,4(sp)
   29974:	300b883a 	mov	r5,r6
   29978:	840e5e04 	addi	r16,r16,14712
   2997c:	2023883a 	mov	r17,r4
   29980:	380d883a 	mov	r6,r7
   29984:	1009883a 	mov	r4,r2
   29988:	dfc00215 	stw	ra,8(sp)
   2998c:	80000015 	stw	zero,0(r16)
   29990:	002de840 	call	2de84 <read>
   29994:	00ffffc4 	movi	r3,-1
   29998:	10c00526 	beq	r2,r3,299b0 <_read_r+0x50>
   2999c:	dfc00217 	ldw	ra,8(sp)
   299a0:	dc400117 	ldw	r17,4(sp)
   299a4:	dc000017 	ldw	r16,0(sp)
   299a8:	dec00304 	addi	sp,sp,12
   299ac:	f800283a 	ret
   299b0:	80c00017 	ldw	r3,0(r16)
   299b4:	183ff926 	beq	r3,zero,2999c <__alt_data_end+0xfffe999c>
   299b8:	88c00015 	stw	r3,0(r17)
   299bc:	003ff706 	br	2999c <__alt_data_end+0xfffe999c>

000299c0 <_realloc_r>:
   299c0:	defff604 	addi	sp,sp,-40
   299c4:	dc800215 	stw	r18,8(sp)
   299c8:	dfc00915 	stw	ra,36(sp)
   299cc:	df000815 	stw	fp,32(sp)
   299d0:	ddc00715 	stw	r23,28(sp)
   299d4:	dd800615 	stw	r22,24(sp)
   299d8:	dd400515 	stw	r21,20(sp)
   299dc:	dd000415 	stw	r20,16(sp)
   299e0:	dcc00315 	stw	r19,12(sp)
   299e4:	dc400115 	stw	r17,4(sp)
   299e8:	dc000015 	stw	r16,0(sp)
   299ec:	3025883a 	mov	r18,r6
   299f0:	2800b726 	beq	r5,zero,29cd0 <_realloc_r+0x310>
   299f4:	282b883a 	mov	r21,r5
   299f8:	2029883a 	mov	r20,r4
   299fc:	002db980 	call	2db98 <__malloc_lock>
   29a00:	a8bfff17 	ldw	r2,-4(r21)
   29a04:	043fff04 	movi	r16,-4
   29a08:	90c002c4 	addi	r3,r18,11
   29a0c:	01000584 	movi	r4,22
   29a10:	acfffe04 	addi	r19,r21,-8
   29a14:	1420703a 	and	r16,r2,r16
   29a18:	20c0332e 	bgeu	r4,r3,29ae8 <_realloc_r+0x128>
   29a1c:	047ffe04 	movi	r17,-8
   29a20:	1c62703a 	and	r17,r3,r17
   29a24:	8807883a 	mov	r3,r17
   29a28:	88005816 	blt	r17,zero,29b8c <_realloc_r+0x1cc>
   29a2c:	8c805736 	bltu	r17,r18,29b8c <_realloc_r+0x1cc>
   29a30:	80c0300e 	bge	r16,r3,29af4 <_realloc_r+0x134>
   29a34:	070000f4 	movhi	fp,3
   29a38:	e7020604 	addi	fp,fp,2072
   29a3c:	e1c00217 	ldw	r7,8(fp)
   29a40:	9c09883a 	add	r4,r19,r16
   29a44:	22000117 	ldw	r8,4(r4)
   29a48:	21c06326 	beq	r4,r7,29bd8 <_realloc_r+0x218>
   29a4c:	017fff84 	movi	r5,-2
   29a50:	414a703a 	and	r5,r8,r5
   29a54:	214b883a 	add	r5,r4,r5
   29a58:	29800117 	ldw	r6,4(r5)
   29a5c:	3180004c 	andi	r6,r6,1
   29a60:	30003f26 	beq	r6,zero,29b60 <_realloc_r+0x1a0>
   29a64:	1080004c 	andi	r2,r2,1
   29a68:	10008326 	beq	r2,zero,29c78 <_realloc_r+0x2b8>
   29a6c:	900b883a 	mov	r5,r18
   29a70:	a009883a 	mov	r4,r20
   29a74:	00258980 	call	25898 <_malloc_r>
   29a78:	1025883a 	mov	r18,r2
   29a7c:	10011e26 	beq	r2,zero,29ef8 <_realloc_r+0x538>
   29a80:	a93fff17 	ldw	r4,-4(r21)
   29a84:	10fffe04 	addi	r3,r2,-8
   29a88:	00bfff84 	movi	r2,-2
   29a8c:	2084703a 	and	r2,r4,r2
   29a90:	9885883a 	add	r2,r19,r2
   29a94:	1880ee26 	beq	r3,r2,29e50 <_realloc_r+0x490>
   29a98:	81bfff04 	addi	r6,r16,-4
   29a9c:	00800904 	movi	r2,36
   29aa0:	1180b836 	bltu	r2,r6,29d84 <_realloc_r+0x3c4>
   29aa4:	00c004c4 	movi	r3,19
   29aa8:	19809636 	bltu	r3,r6,29d04 <_realloc_r+0x344>
   29aac:	9005883a 	mov	r2,r18
   29ab0:	a807883a 	mov	r3,r21
   29ab4:	19000017 	ldw	r4,0(r3)
   29ab8:	11000015 	stw	r4,0(r2)
   29abc:	19000117 	ldw	r4,4(r3)
   29ac0:	11000115 	stw	r4,4(r2)
   29ac4:	18c00217 	ldw	r3,8(r3)
   29ac8:	10c00215 	stw	r3,8(r2)
   29acc:	a80b883a 	mov	r5,r21
   29ad0:	a009883a 	mov	r4,r20
   29ad4:	00251680 	call	25168 <_free_r>
   29ad8:	a009883a 	mov	r4,r20
   29adc:	002dbbc0 	call	2dbbc <__malloc_unlock>
   29ae0:	9005883a 	mov	r2,r18
   29ae4:	00001206 	br	29b30 <_realloc_r+0x170>
   29ae8:	00c00404 	movi	r3,16
   29aec:	1823883a 	mov	r17,r3
   29af0:	003fce06 	br	29a2c <__alt_data_end+0xfffe9a2c>
   29af4:	a825883a 	mov	r18,r21
   29af8:	8445c83a 	sub	r2,r16,r17
   29afc:	00c003c4 	movi	r3,15
   29b00:	18802636 	bltu	r3,r2,29b9c <_realloc_r+0x1dc>
   29b04:	99800117 	ldw	r6,4(r19)
   29b08:	9c07883a 	add	r3,r19,r16
   29b0c:	3180004c 	andi	r6,r6,1
   29b10:	3420b03a 	or	r16,r6,r16
   29b14:	9c000115 	stw	r16,4(r19)
   29b18:	18800117 	ldw	r2,4(r3)
   29b1c:	10800054 	ori	r2,r2,1
   29b20:	18800115 	stw	r2,4(r3)
   29b24:	a009883a 	mov	r4,r20
   29b28:	002dbbc0 	call	2dbbc <__malloc_unlock>
   29b2c:	9005883a 	mov	r2,r18
   29b30:	dfc00917 	ldw	ra,36(sp)
   29b34:	df000817 	ldw	fp,32(sp)
   29b38:	ddc00717 	ldw	r23,28(sp)
   29b3c:	dd800617 	ldw	r22,24(sp)
   29b40:	dd400517 	ldw	r21,20(sp)
   29b44:	dd000417 	ldw	r20,16(sp)
   29b48:	dcc00317 	ldw	r19,12(sp)
   29b4c:	dc800217 	ldw	r18,8(sp)
   29b50:	dc400117 	ldw	r17,4(sp)
   29b54:	dc000017 	ldw	r16,0(sp)
   29b58:	dec00a04 	addi	sp,sp,40
   29b5c:	f800283a 	ret
   29b60:	017fff04 	movi	r5,-4
   29b64:	414a703a 	and	r5,r8,r5
   29b68:	814d883a 	add	r6,r16,r5
   29b6c:	30c01f16 	blt	r6,r3,29bec <_realloc_r+0x22c>
   29b70:	20800317 	ldw	r2,12(r4)
   29b74:	20c00217 	ldw	r3,8(r4)
   29b78:	a825883a 	mov	r18,r21
   29b7c:	3021883a 	mov	r16,r6
   29b80:	18800315 	stw	r2,12(r3)
   29b84:	10c00215 	stw	r3,8(r2)
   29b88:	003fdb06 	br	29af8 <__alt_data_end+0xfffe9af8>
   29b8c:	00800304 	movi	r2,12
   29b90:	a0800015 	stw	r2,0(r20)
   29b94:	0005883a 	mov	r2,zero
   29b98:	003fe506 	br	29b30 <__alt_data_end+0xfffe9b30>
   29b9c:	98c00117 	ldw	r3,4(r19)
   29ba0:	9c4b883a 	add	r5,r19,r17
   29ba4:	11000054 	ori	r4,r2,1
   29ba8:	18c0004c 	andi	r3,r3,1
   29bac:	1c62b03a 	or	r17,r3,r17
   29bb0:	9c400115 	stw	r17,4(r19)
   29bb4:	29000115 	stw	r4,4(r5)
   29bb8:	2885883a 	add	r2,r5,r2
   29bbc:	10c00117 	ldw	r3,4(r2)
   29bc0:	29400204 	addi	r5,r5,8
   29bc4:	a009883a 	mov	r4,r20
   29bc8:	18c00054 	ori	r3,r3,1
   29bcc:	10c00115 	stw	r3,4(r2)
   29bd0:	00251680 	call	25168 <_free_r>
   29bd4:	003fd306 	br	29b24 <__alt_data_end+0xfffe9b24>
   29bd8:	017fff04 	movi	r5,-4
   29bdc:	414a703a 	and	r5,r8,r5
   29be0:	89800404 	addi	r6,r17,16
   29be4:	8151883a 	add	r8,r16,r5
   29be8:	4180590e 	bge	r8,r6,29d50 <_realloc_r+0x390>
   29bec:	1080004c 	andi	r2,r2,1
   29bf0:	103f9e1e 	bne	r2,zero,29a6c <__alt_data_end+0xfffe9a6c>
   29bf4:	adbffe17 	ldw	r22,-8(r21)
   29bf8:	00bfff04 	movi	r2,-4
   29bfc:	9dadc83a 	sub	r22,r19,r22
   29c00:	b1800117 	ldw	r6,4(r22)
   29c04:	3084703a 	and	r2,r6,r2
   29c08:	20002026 	beq	r4,zero,29c8c <_realloc_r+0x2cc>
   29c0c:	80af883a 	add	r23,r16,r2
   29c10:	b96f883a 	add	r23,r23,r5
   29c14:	21c05f26 	beq	r4,r7,29d94 <_realloc_r+0x3d4>
   29c18:	b8c01c16 	blt	r23,r3,29c8c <_realloc_r+0x2cc>
   29c1c:	20800317 	ldw	r2,12(r4)
   29c20:	20c00217 	ldw	r3,8(r4)
   29c24:	81bfff04 	addi	r6,r16,-4
   29c28:	01000904 	movi	r4,36
   29c2c:	18800315 	stw	r2,12(r3)
   29c30:	10c00215 	stw	r3,8(r2)
   29c34:	b0c00217 	ldw	r3,8(r22)
   29c38:	b0800317 	ldw	r2,12(r22)
   29c3c:	b4800204 	addi	r18,r22,8
   29c40:	18800315 	stw	r2,12(r3)
   29c44:	10c00215 	stw	r3,8(r2)
   29c48:	21801b36 	bltu	r4,r6,29cb8 <_realloc_r+0x2f8>
   29c4c:	008004c4 	movi	r2,19
   29c50:	1180352e 	bgeu	r2,r6,29d28 <_realloc_r+0x368>
   29c54:	a8800017 	ldw	r2,0(r21)
   29c58:	b0800215 	stw	r2,8(r22)
   29c5c:	a8800117 	ldw	r2,4(r21)
   29c60:	b0800315 	stw	r2,12(r22)
   29c64:	008006c4 	movi	r2,27
   29c68:	11807f36 	bltu	r2,r6,29e68 <_realloc_r+0x4a8>
   29c6c:	b0800404 	addi	r2,r22,16
   29c70:	ad400204 	addi	r21,r21,8
   29c74:	00002d06 	br	29d2c <_realloc_r+0x36c>
   29c78:	adbffe17 	ldw	r22,-8(r21)
   29c7c:	00bfff04 	movi	r2,-4
   29c80:	9dadc83a 	sub	r22,r19,r22
   29c84:	b1000117 	ldw	r4,4(r22)
   29c88:	2084703a 	and	r2,r4,r2
   29c8c:	b03f7726 	beq	r22,zero,29a6c <__alt_data_end+0xfffe9a6c>
   29c90:	80af883a 	add	r23,r16,r2
   29c94:	b8ff7516 	blt	r23,r3,29a6c <__alt_data_end+0xfffe9a6c>
   29c98:	b0800317 	ldw	r2,12(r22)
   29c9c:	b0c00217 	ldw	r3,8(r22)
   29ca0:	81bfff04 	addi	r6,r16,-4
   29ca4:	01000904 	movi	r4,36
   29ca8:	18800315 	stw	r2,12(r3)
   29cac:	10c00215 	stw	r3,8(r2)
   29cb0:	b4800204 	addi	r18,r22,8
   29cb4:	21bfe52e 	bgeu	r4,r6,29c4c <__alt_data_end+0xfffe9c4c>
   29cb8:	a80b883a 	mov	r5,r21
   29cbc:	9009883a 	mov	r4,r18
   29cc0:	00298040 	call	29804 <memmove>
   29cc4:	b821883a 	mov	r16,r23
   29cc8:	b027883a 	mov	r19,r22
   29ccc:	003f8a06 	br	29af8 <__alt_data_end+0xfffe9af8>
   29cd0:	300b883a 	mov	r5,r6
   29cd4:	dfc00917 	ldw	ra,36(sp)
   29cd8:	df000817 	ldw	fp,32(sp)
   29cdc:	ddc00717 	ldw	r23,28(sp)
   29ce0:	dd800617 	ldw	r22,24(sp)
   29ce4:	dd400517 	ldw	r21,20(sp)
   29ce8:	dd000417 	ldw	r20,16(sp)
   29cec:	dcc00317 	ldw	r19,12(sp)
   29cf0:	dc800217 	ldw	r18,8(sp)
   29cf4:	dc400117 	ldw	r17,4(sp)
   29cf8:	dc000017 	ldw	r16,0(sp)
   29cfc:	dec00a04 	addi	sp,sp,40
   29d00:	00258981 	jmpi	25898 <_malloc_r>
   29d04:	a8c00017 	ldw	r3,0(r21)
   29d08:	90c00015 	stw	r3,0(r18)
   29d0c:	a8c00117 	ldw	r3,4(r21)
   29d10:	90c00115 	stw	r3,4(r18)
   29d14:	00c006c4 	movi	r3,27
   29d18:	19804536 	bltu	r3,r6,29e30 <_realloc_r+0x470>
   29d1c:	90800204 	addi	r2,r18,8
   29d20:	a8c00204 	addi	r3,r21,8
   29d24:	003f6306 	br	29ab4 <__alt_data_end+0xfffe9ab4>
   29d28:	9005883a 	mov	r2,r18
   29d2c:	a8c00017 	ldw	r3,0(r21)
   29d30:	b821883a 	mov	r16,r23
   29d34:	b027883a 	mov	r19,r22
   29d38:	10c00015 	stw	r3,0(r2)
   29d3c:	a8c00117 	ldw	r3,4(r21)
   29d40:	10c00115 	stw	r3,4(r2)
   29d44:	a8c00217 	ldw	r3,8(r21)
   29d48:	10c00215 	stw	r3,8(r2)
   29d4c:	003f6a06 	br	29af8 <__alt_data_end+0xfffe9af8>
   29d50:	9c67883a 	add	r19,r19,r17
   29d54:	4445c83a 	sub	r2,r8,r17
   29d58:	e4c00215 	stw	r19,8(fp)
   29d5c:	10800054 	ori	r2,r2,1
   29d60:	98800115 	stw	r2,4(r19)
   29d64:	a8bfff17 	ldw	r2,-4(r21)
   29d68:	a009883a 	mov	r4,r20
   29d6c:	1080004c 	andi	r2,r2,1
   29d70:	1462b03a 	or	r17,r2,r17
   29d74:	ac7fff15 	stw	r17,-4(r21)
   29d78:	002dbbc0 	call	2dbbc <__malloc_unlock>
   29d7c:	a805883a 	mov	r2,r21
   29d80:	003f6b06 	br	29b30 <__alt_data_end+0xfffe9b30>
   29d84:	a80b883a 	mov	r5,r21
   29d88:	9009883a 	mov	r4,r18
   29d8c:	00298040 	call	29804 <memmove>
   29d90:	003f4e06 	br	29acc <__alt_data_end+0xfffe9acc>
   29d94:	89000404 	addi	r4,r17,16
   29d98:	b93fbc16 	blt	r23,r4,29c8c <__alt_data_end+0xfffe9c8c>
   29d9c:	b0800317 	ldw	r2,12(r22)
   29da0:	b0c00217 	ldw	r3,8(r22)
   29da4:	81bfff04 	addi	r6,r16,-4
   29da8:	01000904 	movi	r4,36
   29dac:	18800315 	stw	r2,12(r3)
   29db0:	10c00215 	stw	r3,8(r2)
   29db4:	b4800204 	addi	r18,r22,8
   29db8:	21804336 	bltu	r4,r6,29ec8 <_realloc_r+0x508>
   29dbc:	008004c4 	movi	r2,19
   29dc0:	11803f2e 	bgeu	r2,r6,29ec0 <_realloc_r+0x500>
   29dc4:	a8800017 	ldw	r2,0(r21)
   29dc8:	b0800215 	stw	r2,8(r22)
   29dcc:	a8800117 	ldw	r2,4(r21)
   29dd0:	b0800315 	stw	r2,12(r22)
   29dd4:	008006c4 	movi	r2,27
   29dd8:	11803f36 	bltu	r2,r6,29ed8 <_realloc_r+0x518>
   29ddc:	b0800404 	addi	r2,r22,16
   29de0:	ad400204 	addi	r21,r21,8
   29de4:	a8c00017 	ldw	r3,0(r21)
   29de8:	10c00015 	stw	r3,0(r2)
   29dec:	a8c00117 	ldw	r3,4(r21)
   29df0:	10c00115 	stw	r3,4(r2)
   29df4:	a8c00217 	ldw	r3,8(r21)
   29df8:	10c00215 	stw	r3,8(r2)
   29dfc:	b447883a 	add	r3,r22,r17
   29e00:	bc45c83a 	sub	r2,r23,r17
   29e04:	e0c00215 	stw	r3,8(fp)
   29e08:	10800054 	ori	r2,r2,1
   29e0c:	18800115 	stw	r2,4(r3)
   29e10:	b0800117 	ldw	r2,4(r22)
   29e14:	a009883a 	mov	r4,r20
   29e18:	1080004c 	andi	r2,r2,1
   29e1c:	1462b03a 	or	r17,r2,r17
   29e20:	b4400115 	stw	r17,4(r22)
   29e24:	002dbbc0 	call	2dbbc <__malloc_unlock>
   29e28:	9005883a 	mov	r2,r18
   29e2c:	003f4006 	br	29b30 <__alt_data_end+0xfffe9b30>
   29e30:	a8c00217 	ldw	r3,8(r21)
   29e34:	90c00215 	stw	r3,8(r18)
   29e38:	a8c00317 	ldw	r3,12(r21)
   29e3c:	90c00315 	stw	r3,12(r18)
   29e40:	30801126 	beq	r6,r2,29e88 <_realloc_r+0x4c8>
   29e44:	90800404 	addi	r2,r18,16
   29e48:	a8c00404 	addi	r3,r21,16
   29e4c:	003f1906 	br	29ab4 <__alt_data_end+0xfffe9ab4>
   29e50:	90ffff17 	ldw	r3,-4(r18)
   29e54:	00bfff04 	movi	r2,-4
   29e58:	a825883a 	mov	r18,r21
   29e5c:	1884703a 	and	r2,r3,r2
   29e60:	80a1883a 	add	r16,r16,r2
   29e64:	003f2406 	br	29af8 <__alt_data_end+0xfffe9af8>
   29e68:	a8800217 	ldw	r2,8(r21)
   29e6c:	b0800415 	stw	r2,16(r22)
   29e70:	a8800317 	ldw	r2,12(r21)
   29e74:	b0800515 	stw	r2,20(r22)
   29e78:	31000a26 	beq	r6,r4,29ea4 <_realloc_r+0x4e4>
   29e7c:	b0800604 	addi	r2,r22,24
   29e80:	ad400404 	addi	r21,r21,16
   29e84:	003fa906 	br	29d2c <__alt_data_end+0xfffe9d2c>
   29e88:	a9000417 	ldw	r4,16(r21)
   29e8c:	90800604 	addi	r2,r18,24
   29e90:	a8c00604 	addi	r3,r21,24
   29e94:	91000415 	stw	r4,16(r18)
   29e98:	a9000517 	ldw	r4,20(r21)
   29e9c:	91000515 	stw	r4,20(r18)
   29ea0:	003f0406 	br	29ab4 <__alt_data_end+0xfffe9ab4>
   29ea4:	a8c00417 	ldw	r3,16(r21)
   29ea8:	ad400604 	addi	r21,r21,24
   29eac:	b0800804 	addi	r2,r22,32
   29eb0:	b0c00615 	stw	r3,24(r22)
   29eb4:	a8ffff17 	ldw	r3,-4(r21)
   29eb8:	b0c00715 	stw	r3,28(r22)
   29ebc:	003f9b06 	br	29d2c <__alt_data_end+0xfffe9d2c>
   29ec0:	9005883a 	mov	r2,r18
   29ec4:	003fc706 	br	29de4 <__alt_data_end+0xfffe9de4>
   29ec8:	a80b883a 	mov	r5,r21
   29ecc:	9009883a 	mov	r4,r18
   29ed0:	00298040 	call	29804 <memmove>
   29ed4:	003fc906 	br	29dfc <__alt_data_end+0xfffe9dfc>
   29ed8:	a8800217 	ldw	r2,8(r21)
   29edc:	b0800415 	stw	r2,16(r22)
   29ee0:	a8800317 	ldw	r2,12(r21)
   29ee4:	b0800515 	stw	r2,20(r22)
   29ee8:	31000726 	beq	r6,r4,29f08 <_realloc_r+0x548>
   29eec:	b0800604 	addi	r2,r22,24
   29ef0:	ad400404 	addi	r21,r21,16
   29ef4:	003fbb06 	br	29de4 <__alt_data_end+0xfffe9de4>
   29ef8:	a009883a 	mov	r4,r20
   29efc:	002dbbc0 	call	2dbbc <__malloc_unlock>
   29f00:	0005883a 	mov	r2,zero
   29f04:	003f0a06 	br	29b30 <__alt_data_end+0xfffe9b30>
   29f08:	a8c00417 	ldw	r3,16(r21)
   29f0c:	ad400604 	addi	r21,r21,24
   29f10:	b0800804 	addi	r2,r22,32
   29f14:	b0c00615 	stw	r3,24(r22)
   29f18:	a8ffff17 	ldw	r3,-4(r21)
   29f1c:	b0c00715 	stw	r3,28(r22)
   29f20:	003fb006 	br	29de4 <__alt_data_end+0xfffe9de4>

00029f24 <__swbuf_r>:
   29f24:	defffb04 	addi	sp,sp,-20
   29f28:	dcc00315 	stw	r19,12(sp)
   29f2c:	dc800215 	stw	r18,8(sp)
   29f30:	dc000015 	stw	r16,0(sp)
   29f34:	dfc00415 	stw	ra,16(sp)
   29f38:	dc400115 	stw	r17,4(sp)
   29f3c:	2025883a 	mov	r18,r4
   29f40:	2827883a 	mov	r19,r5
   29f44:	3021883a 	mov	r16,r6
   29f48:	20000226 	beq	r4,zero,29f54 <__swbuf_r+0x30>
   29f4c:	20800e17 	ldw	r2,56(r4)
   29f50:	10004226 	beq	r2,zero,2a05c <__swbuf_r+0x138>
   29f54:	80800617 	ldw	r2,24(r16)
   29f58:	8100030b 	ldhu	r4,12(r16)
   29f5c:	80800215 	stw	r2,8(r16)
   29f60:	2080020c 	andi	r2,r4,8
   29f64:	10003626 	beq	r2,zero,2a040 <__swbuf_r+0x11c>
   29f68:	80c00417 	ldw	r3,16(r16)
   29f6c:	18003426 	beq	r3,zero,2a040 <__swbuf_r+0x11c>
   29f70:	2088000c 	andi	r2,r4,8192
   29f74:	9c403fcc 	andi	r17,r19,255
   29f78:	10001a26 	beq	r2,zero,29fe4 <__swbuf_r+0xc0>
   29f7c:	80800017 	ldw	r2,0(r16)
   29f80:	81000517 	ldw	r4,20(r16)
   29f84:	10c7c83a 	sub	r3,r2,r3
   29f88:	1900200e 	bge	r3,r4,2a00c <__swbuf_r+0xe8>
   29f8c:	18c00044 	addi	r3,r3,1
   29f90:	81000217 	ldw	r4,8(r16)
   29f94:	11400044 	addi	r5,r2,1
   29f98:	81400015 	stw	r5,0(r16)
   29f9c:	213fffc4 	addi	r4,r4,-1
   29fa0:	81000215 	stw	r4,8(r16)
   29fa4:	14c00005 	stb	r19,0(r2)
   29fa8:	80800517 	ldw	r2,20(r16)
   29fac:	10c01e26 	beq	r2,r3,2a028 <__swbuf_r+0x104>
   29fb0:	8080030b 	ldhu	r2,12(r16)
   29fb4:	1080004c 	andi	r2,r2,1
   29fb8:	10000226 	beq	r2,zero,29fc4 <__swbuf_r+0xa0>
   29fbc:	00800284 	movi	r2,10
   29fc0:	88801926 	beq	r17,r2,2a028 <__swbuf_r+0x104>
   29fc4:	8805883a 	mov	r2,r17
   29fc8:	dfc00417 	ldw	ra,16(sp)
   29fcc:	dcc00317 	ldw	r19,12(sp)
   29fd0:	dc800217 	ldw	r18,8(sp)
   29fd4:	dc400117 	ldw	r17,4(sp)
   29fd8:	dc000017 	ldw	r16,0(sp)
   29fdc:	dec00504 	addi	sp,sp,20
   29fe0:	f800283a 	ret
   29fe4:	81401917 	ldw	r5,100(r16)
   29fe8:	00b7ffc4 	movi	r2,-8193
   29fec:	21080014 	ori	r4,r4,8192
   29ff0:	2884703a 	and	r2,r5,r2
   29ff4:	80801915 	stw	r2,100(r16)
   29ff8:	80800017 	ldw	r2,0(r16)
   29ffc:	8100030d 	sth	r4,12(r16)
   2a000:	81000517 	ldw	r4,20(r16)
   2a004:	10c7c83a 	sub	r3,r2,r3
   2a008:	193fe016 	blt	r3,r4,29f8c <__alt_data_end+0xfffe9f8c>
   2a00c:	800b883a 	mov	r5,r16
   2a010:	9009883a 	mov	r4,r18
   2a014:	0024c180 	call	24c18 <_fflush_r>
   2a018:	1000071e 	bne	r2,zero,2a038 <__swbuf_r+0x114>
   2a01c:	80800017 	ldw	r2,0(r16)
   2a020:	00c00044 	movi	r3,1
   2a024:	003fda06 	br	29f90 <__alt_data_end+0xfffe9f90>
   2a028:	800b883a 	mov	r5,r16
   2a02c:	9009883a 	mov	r4,r18
   2a030:	0024c180 	call	24c18 <_fflush_r>
   2a034:	103fe326 	beq	r2,zero,29fc4 <__alt_data_end+0xfffe9fc4>
   2a038:	00bfffc4 	movi	r2,-1
   2a03c:	003fe206 	br	29fc8 <__alt_data_end+0xfffe9fc8>
   2a040:	800b883a 	mov	r5,r16
   2a044:	9009883a 	mov	r4,r18
   2a048:	00230200 	call	23020 <__swsetup_r>
   2a04c:	103ffa1e 	bne	r2,zero,2a038 <__alt_data_end+0xfffea038>
   2a050:	8100030b 	ldhu	r4,12(r16)
   2a054:	80c00417 	ldw	r3,16(r16)
   2a058:	003fc506 	br	29f70 <__alt_data_end+0xfffe9f70>
   2a05c:	0024ff40 	call	24ff4 <__sinit>
   2a060:	003fbc06 	br	29f54 <__alt_data_end+0xfffe9f54>

0002a064 <__swbuf>:
   2a064:	008000f4 	movhi	r2,3
   2a068:	10878b04 	addi	r2,r2,7724
   2a06c:	280d883a 	mov	r6,r5
   2a070:	200b883a 	mov	r5,r4
   2a074:	11000017 	ldw	r4,0(r2)
   2a078:	0029f241 	jmpi	29f24 <__swbuf_r>

0002a07c <_wcrtomb_r>:
   2a07c:	defff604 	addi	sp,sp,-40
   2a080:	008000f4 	movhi	r2,3
   2a084:	dc800815 	stw	r18,32(sp)
   2a088:	dc400715 	stw	r17,28(sp)
   2a08c:	dc000615 	stw	r16,24(sp)
   2a090:	10878f04 	addi	r2,r2,7740
   2a094:	dfc00915 	stw	ra,36(sp)
   2a098:	2021883a 	mov	r16,r4
   2a09c:	3823883a 	mov	r17,r7
   2a0a0:	14800017 	ldw	r18,0(r2)
   2a0a4:	28001426 	beq	r5,zero,2a0f8 <_wcrtomb_r+0x7c>
   2a0a8:	d9400415 	stw	r5,16(sp)
   2a0ac:	d9800515 	stw	r6,20(sp)
   2a0b0:	002567c0 	call	2567c <__locale_charset>
   2a0b4:	d9800517 	ldw	r6,20(sp)
   2a0b8:	d9400417 	ldw	r5,16(sp)
   2a0bc:	100f883a 	mov	r7,r2
   2a0c0:	dc400015 	stw	r17,0(sp)
   2a0c4:	8009883a 	mov	r4,r16
   2a0c8:	903ee83a 	callr	r18
   2a0cc:	00ffffc4 	movi	r3,-1
   2a0d0:	10c0031e 	bne	r2,r3,2a0e0 <_wcrtomb_r+0x64>
   2a0d4:	88000015 	stw	zero,0(r17)
   2a0d8:	00c02284 	movi	r3,138
   2a0dc:	80c00015 	stw	r3,0(r16)
   2a0e0:	dfc00917 	ldw	ra,36(sp)
   2a0e4:	dc800817 	ldw	r18,32(sp)
   2a0e8:	dc400717 	ldw	r17,28(sp)
   2a0ec:	dc000617 	ldw	r16,24(sp)
   2a0f0:	dec00a04 	addi	sp,sp,40
   2a0f4:	f800283a 	ret
   2a0f8:	002567c0 	call	2567c <__locale_charset>
   2a0fc:	100f883a 	mov	r7,r2
   2a100:	dc400015 	stw	r17,0(sp)
   2a104:	000d883a 	mov	r6,zero
   2a108:	d9400104 	addi	r5,sp,4
   2a10c:	8009883a 	mov	r4,r16
   2a110:	903ee83a 	callr	r18
   2a114:	003fed06 	br	2a0cc <__alt_data_end+0xfffea0cc>

0002a118 <wcrtomb>:
   2a118:	defff604 	addi	sp,sp,-40
   2a11c:	008000f4 	movhi	r2,3
   2a120:	dc800615 	stw	r18,24(sp)
   2a124:	dc400515 	stw	r17,20(sp)
   2a128:	10878b04 	addi	r2,r2,7724
   2a12c:	dfc00915 	stw	ra,36(sp)
   2a130:	dd000815 	stw	r20,32(sp)
   2a134:	dcc00715 	stw	r19,28(sp)
   2a138:	dc000415 	stw	r16,16(sp)
   2a13c:	3025883a 	mov	r18,r6
   2a140:	14400017 	ldw	r17,0(r2)
   2a144:	20001926 	beq	r4,zero,2a1ac <wcrtomb+0x94>
   2a148:	008000f4 	movhi	r2,3
   2a14c:	10878f04 	addi	r2,r2,7740
   2a150:	15000017 	ldw	r20,0(r2)
   2a154:	2021883a 	mov	r16,r4
   2a158:	2827883a 	mov	r19,r5
   2a15c:	002567c0 	call	2567c <__locale_charset>
   2a160:	100f883a 	mov	r7,r2
   2a164:	dc800015 	stw	r18,0(sp)
   2a168:	980d883a 	mov	r6,r19
   2a16c:	800b883a 	mov	r5,r16
   2a170:	8809883a 	mov	r4,r17
   2a174:	a03ee83a 	callr	r20
   2a178:	00ffffc4 	movi	r3,-1
   2a17c:	10c0031e 	bne	r2,r3,2a18c <wcrtomb+0x74>
   2a180:	90000015 	stw	zero,0(r18)
   2a184:	00c02284 	movi	r3,138
   2a188:	88c00015 	stw	r3,0(r17)
   2a18c:	dfc00917 	ldw	ra,36(sp)
   2a190:	dd000817 	ldw	r20,32(sp)
   2a194:	dcc00717 	ldw	r19,28(sp)
   2a198:	dc800617 	ldw	r18,24(sp)
   2a19c:	dc400517 	ldw	r17,20(sp)
   2a1a0:	dc000417 	ldw	r16,16(sp)
   2a1a4:	dec00a04 	addi	sp,sp,40
   2a1a8:	f800283a 	ret
   2a1ac:	008000f4 	movhi	r2,3
   2a1b0:	10878f04 	addi	r2,r2,7740
   2a1b4:	14000017 	ldw	r16,0(r2)
   2a1b8:	002567c0 	call	2567c <__locale_charset>
   2a1bc:	100f883a 	mov	r7,r2
   2a1c0:	dc800015 	stw	r18,0(sp)
   2a1c4:	000d883a 	mov	r6,zero
   2a1c8:	d9400104 	addi	r5,sp,4
   2a1cc:	8809883a 	mov	r4,r17
   2a1d0:	803ee83a 	callr	r16
   2a1d4:	003fe806 	br	2a178 <__alt_data_end+0xfffea178>

0002a1d8 <__ascii_wctomb>:
   2a1d8:	28000526 	beq	r5,zero,2a1f0 <__ascii_wctomb+0x18>
   2a1dc:	00803fc4 	movi	r2,255
   2a1e0:	11800536 	bltu	r2,r6,2a1f8 <__ascii_wctomb+0x20>
   2a1e4:	29800005 	stb	r6,0(r5)
   2a1e8:	00800044 	movi	r2,1
   2a1ec:	f800283a 	ret
   2a1f0:	0005883a 	mov	r2,zero
   2a1f4:	f800283a 	ret
   2a1f8:	00802284 	movi	r2,138
   2a1fc:	20800015 	stw	r2,0(r4)
   2a200:	00bfffc4 	movi	r2,-1
   2a204:	f800283a 	ret

0002a208 <_wctomb_r>:
   2a208:	008000f4 	movhi	r2,3
   2a20c:	defff904 	addi	sp,sp,-28
   2a210:	10878f04 	addi	r2,r2,7740
   2a214:	dfc00615 	stw	ra,24(sp)
   2a218:	dc400515 	stw	r17,20(sp)
   2a21c:	dc000415 	stw	r16,16(sp)
   2a220:	3823883a 	mov	r17,r7
   2a224:	14000017 	ldw	r16,0(r2)
   2a228:	d9000115 	stw	r4,4(sp)
   2a22c:	d9400215 	stw	r5,8(sp)
   2a230:	d9800315 	stw	r6,12(sp)
   2a234:	002567c0 	call	2567c <__locale_charset>
   2a238:	d9800317 	ldw	r6,12(sp)
   2a23c:	d9400217 	ldw	r5,8(sp)
   2a240:	d9000117 	ldw	r4,4(sp)
   2a244:	100f883a 	mov	r7,r2
   2a248:	dc400015 	stw	r17,0(sp)
   2a24c:	803ee83a 	callr	r16
   2a250:	dfc00617 	ldw	ra,24(sp)
   2a254:	dc400517 	ldw	r17,20(sp)
   2a258:	dc000417 	ldw	r16,16(sp)
   2a25c:	dec00704 	addi	sp,sp,28
   2a260:	f800283a 	ret

0002a264 <__udivdi3>:
   2a264:	defff504 	addi	sp,sp,-44
   2a268:	dcc00415 	stw	r19,16(sp)
   2a26c:	dc000115 	stw	r16,4(sp)
   2a270:	dfc00a15 	stw	ra,40(sp)
   2a274:	df000915 	stw	fp,36(sp)
   2a278:	ddc00815 	stw	r23,32(sp)
   2a27c:	dd800715 	stw	r22,28(sp)
   2a280:	dd400615 	stw	r21,24(sp)
   2a284:	dd000515 	stw	r20,20(sp)
   2a288:	dc800315 	stw	r18,12(sp)
   2a28c:	dc400215 	stw	r17,8(sp)
   2a290:	2027883a 	mov	r19,r4
   2a294:	2821883a 	mov	r16,r5
   2a298:	3800411e 	bne	r7,zero,2a3a0 <__udivdi3+0x13c>
   2a29c:	3023883a 	mov	r17,r6
   2a2a0:	2025883a 	mov	r18,r4
   2a2a4:	2980522e 	bgeu	r5,r6,2a3f0 <__udivdi3+0x18c>
   2a2a8:	00bfffd4 	movui	r2,65535
   2a2ac:	282d883a 	mov	r22,r5
   2a2b0:	1180a836 	bltu	r2,r6,2a554 <__udivdi3+0x2f0>
   2a2b4:	00803fc4 	movi	r2,255
   2a2b8:	1185803a 	cmpltu	r2,r2,r6
   2a2bc:	100490fa 	slli	r2,r2,3
   2a2c0:	3086d83a 	srl	r3,r6,r2
   2a2c4:	010000f4 	movhi	r4,3
   2a2c8:	21009204 	addi	r4,r4,584
   2a2cc:	20c7883a 	add	r3,r4,r3
   2a2d0:	18c00003 	ldbu	r3,0(r3)
   2a2d4:	1885883a 	add	r2,r3,r2
   2a2d8:	00c00804 	movi	r3,32
   2a2dc:	1887c83a 	sub	r3,r3,r2
   2a2e0:	18000526 	beq	r3,zero,2a2f8 <__udivdi3+0x94>
   2a2e4:	80e0983a 	sll	r16,r16,r3
   2a2e8:	9884d83a 	srl	r2,r19,r2
   2a2ec:	30e2983a 	sll	r17,r6,r3
   2a2f0:	98e4983a 	sll	r18,r19,r3
   2a2f4:	142cb03a 	or	r22,r2,r16
   2a2f8:	882ad43a 	srli	r21,r17,16
   2a2fc:	b009883a 	mov	r4,r22
   2a300:	8d3fffcc 	andi	r20,r17,65535
   2a304:	a80b883a 	mov	r5,r21
   2a308:	0020c8c0 	call	20c8c <__umodsi3>
   2a30c:	b009883a 	mov	r4,r22
   2a310:	a80b883a 	mov	r5,r21
   2a314:	1027883a 	mov	r19,r2
   2a318:	0020c280 	call	20c28 <__udivsi3>
   2a31c:	102d883a 	mov	r22,r2
   2a320:	9826943a 	slli	r19,r19,16
   2a324:	9004d43a 	srli	r2,r18,16
   2a328:	a5a1383a 	mul	r16,r20,r22
   2a32c:	14c4b03a 	or	r2,r2,r19
   2a330:	1400052e 	bgeu	r2,r16,2a348 <__udivdi3+0xe4>
   2a334:	1445883a 	add	r2,r2,r17
   2a338:	b0ffffc4 	addi	r3,r22,-1
   2a33c:	14400136 	bltu	r2,r17,2a344 <__udivdi3+0xe0>
   2a340:	14012336 	bltu	r2,r16,2a7d0 <__udivdi3+0x56c>
   2a344:	182d883a 	mov	r22,r3
   2a348:	1421c83a 	sub	r16,r2,r16
   2a34c:	a80b883a 	mov	r5,r21
   2a350:	8009883a 	mov	r4,r16
   2a354:	0020c8c0 	call	20c8c <__umodsi3>
   2a358:	1027883a 	mov	r19,r2
   2a35c:	a80b883a 	mov	r5,r21
   2a360:	8009883a 	mov	r4,r16
   2a364:	0020c280 	call	20c28 <__udivsi3>
   2a368:	9826943a 	slli	r19,r19,16
   2a36c:	a0a9383a 	mul	r20,r20,r2
   2a370:	94bfffcc 	andi	r18,r18,65535
   2a374:	94e4b03a 	or	r18,r18,r19
   2a378:	9500052e 	bgeu	r18,r20,2a390 <__udivdi3+0x12c>
   2a37c:	8ca5883a 	add	r18,r17,r18
   2a380:	10ffffc4 	addi	r3,r2,-1
   2a384:	9440f136 	bltu	r18,r17,2a74c <__udivdi3+0x4e8>
   2a388:	9500f02e 	bgeu	r18,r20,2a74c <__udivdi3+0x4e8>
   2a38c:	10bfff84 	addi	r2,r2,-2
   2a390:	b00c943a 	slli	r6,r22,16
   2a394:	0007883a 	mov	r3,zero
   2a398:	3084b03a 	or	r2,r6,r2
   2a39c:	00005906 	br	2a504 <__udivdi3+0x2a0>
   2a3a0:	29c05636 	bltu	r5,r7,2a4fc <__udivdi3+0x298>
   2a3a4:	00bfffd4 	movui	r2,65535
   2a3a8:	11c0622e 	bgeu	r2,r7,2a534 <__udivdi3+0x2d0>
   2a3ac:	00804034 	movhi	r2,256
   2a3b0:	10bfffc4 	addi	r2,r2,-1
   2a3b4:	11c0ee36 	bltu	r2,r7,2a770 <__udivdi3+0x50c>
   2a3b8:	00800404 	movi	r2,16
   2a3bc:	3886d83a 	srl	r3,r7,r2
   2a3c0:	010000f4 	movhi	r4,3
   2a3c4:	21009204 	addi	r4,r4,584
   2a3c8:	20c7883a 	add	r3,r4,r3
   2a3cc:	18c00003 	ldbu	r3,0(r3)
   2a3d0:	05400804 	movi	r21,32
   2a3d4:	1885883a 	add	r2,r3,r2
   2a3d8:	a8abc83a 	sub	r21,r21,r2
   2a3dc:	a800621e 	bne	r21,zero,2a568 <__udivdi3+0x304>
   2a3e0:	3c00e936 	bltu	r7,r16,2a788 <__udivdi3+0x524>
   2a3e4:	9985403a 	cmpgeu	r2,r19,r6
   2a3e8:	0007883a 	mov	r3,zero
   2a3ec:	00004506 	br	2a504 <__udivdi3+0x2a0>
   2a3f0:	3000041e 	bne	r6,zero,2a404 <__udivdi3+0x1a0>
   2a3f4:	000b883a 	mov	r5,zero
   2a3f8:	01000044 	movi	r4,1
   2a3fc:	0020c280 	call	20c28 <__udivsi3>
   2a400:	1023883a 	mov	r17,r2
   2a404:	00bfffd4 	movui	r2,65535
   2a408:	14404e2e 	bgeu	r2,r17,2a544 <__udivdi3+0x2e0>
   2a40c:	00804034 	movhi	r2,256
   2a410:	10bfffc4 	addi	r2,r2,-1
   2a414:	1440d836 	bltu	r2,r17,2a778 <__udivdi3+0x514>
   2a418:	00800404 	movi	r2,16
   2a41c:	8886d83a 	srl	r3,r17,r2
   2a420:	010000f4 	movhi	r4,3
   2a424:	21009204 	addi	r4,r4,584
   2a428:	20c7883a 	add	r3,r4,r3
   2a42c:	18c00003 	ldbu	r3,0(r3)
   2a430:	1885883a 	add	r2,r3,r2
   2a434:	00c00804 	movi	r3,32
   2a438:	1887c83a 	sub	r3,r3,r2
   2a43c:	18008f1e 	bne	r3,zero,2a67c <__udivdi3+0x418>
   2a440:	882ad43a 	srli	r21,r17,16
   2a444:	8461c83a 	sub	r16,r16,r17
   2a448:	8d3fffcc 	andi	r20,r17,65535
   2a44c:	00c00044 	movi	r3,1
   2a450:	8009883a 	mov	r4,r16
   2a454:	a80b883a 	mov	r5,r21
   2a458:	d8c00015 	stw	r3,0(sp)
   2a45c:	0020c8c0 	call	20c8c <__umodsi3>
   2a460:	8009883a 	mov	r4,r16
   2a464:	a80b883a 	mov	r5,r21
   2a468:	1027883a 	mov	r19,r2
   2a46c:	0020c280 	call	20c28 <__udivsi3>
   2a470:	9826943a 	slli	r19,r19,16
   2a474:	9008d43a 	srli	r4,r18,16
   2a478:	1521383a 	mul	r16,r2,r20
   2a47c:	102d883a 	mov	r22,r2
   2a480:	24c8b03a 	or	r4,r4,r19
   2a484:	d8c00017 	ldw	r3,0(sp)
   2a488:	2400052e 	bgeu	r4,r16,2a4a0 <__udivdi3+0x23c>
   2a48c:	2449883a 	add	r4,r4,r17
   2a490:	b0bfffc4 	addi	r2,r22,-1
   2a494:	24400136 	bltu	r4,r17,2a49c <__udivdi3+0x238>
   2a498:	2400ca36 	bltu	r4,r16,2a7c4 <__udivdi3+0x560>
   2a49c:	102d883a 	mov	r22,r2
   2a4a0:	2421c83a 	sub	r16,r4,r16
   2a4a4:	a80b883a 	mov	r5,r21
   2a4a8:	8009883a 	mov	r4,r16
   2a4ac:	d8c00015 	stw	r3,0(sp)
   2a4b0:	0020c8c0 	call	20c8c <__umodsi3>
   2a4b4:	1027883a 	mov	r19,r2
   2a4b8:	a80b883a 	mov	r5,r21
   2a4bc:	8009883a 	mov	r4,r16
   2a4c0:	0020c280 	call	20c28 <__udivsi3>
   2a4c4:	9826943a 	slli	r19,r19,16
   2a4c8:	1529383a 	mul	r20,r2,r20
   2a4cc:	94bfffcc 	andi	r18,r18,65535
   2a4d0:	94e4b03a 	or	r18,r18,r19
   2a4d4:	d8c00017 	ldw	r3,0(sp)
   2a4d8:	9500052e 	bgeu	r18,r20,2a4f0 <__udivdi3+0x28c>
   2a4dc:	8ca5883a 	add	r18,r17,r18
   2a4e0:	113fffc4 	addi	r4,r2,-1
   2a4e4:	94409736 	bltu	r18,r17,2a744 <__udivdi3+0x4e0>
   2a4e8:	9500962e 	bgeu	r18,r20,2a744 <__udivdi3+0x4e0>
   2a4ec:	10bfff84 	addi	r2,r2,-2
   2a4f0:	b00c943a 	slli	r6,r22,16
   2a4f4:	3084b03a 	or	r2,r6,r2
   2a4f8:	00000206 	br	2a504 <__udivdi3+0x2a0>
   2a4fc:	0007883a 	mov	r3,zero
   2a500:	0005883a 	mov	r2,zero
   2a504:	dfc00a17 	ldw	ra,40(sp)
   2a508:	df000917 	ldw	fp,36(sp)
   2a50c:	ddc00817 	ldw	r23,32(sp)
   2a510:	dd800717 	ldw	r22,28(sp)
   2a514:	dd400617 	ldw	r21,24(sp)
   2a518:	dd000517 	ldw	r20,20(sp)
   2a51c:	dcc00417 	ldw	r19,16(sp)
   2a520:	dc800317 	ldw	r18,12(sp)
   2a524:	dc400217 	ldw	r17,8(sp)
   2a528:	dc000117 	ldw	r16,4(sp)
   2a52c:	dec00b04 	addi	sp,sp,44
   2a530:	f800283a 	ret
   2a534:	00803fc4 	movi	r2,255
   2a538:	11c5803a 	cmpltu	r2,r2,r7
   2a53c:	100490fa 	slli	r2,r2,3
   2a540:	003f9e06 	br	2a3bc <__alt_data_end+0xfffea3bc>
   2a544:	00803fc4 	movi	r2,255
   2a548:	1445803a 	cmpltu	r2,r2,r17
   2a54c:	100490fa 	slli	r2,r2,3
   2a550:	003fb206 	br	2a41c <__alt_data_end+0xfffea41c>
   2a554:	00804034 	movhi	r2,256
   2a558:	10bfffc4 	addi	r2,r2,-1
   2a55c:	11808836 	bltu	r2,r6,2a780 <__udivdi3+0x51c>
   2a560:	00800404 	movi	r2,16
   2a564:	003f5606 	br	2a2c0 <__alt_data_end+0xfffea2c0>
   2a568:	30aed83a 	srl	r23,r6,r2
   2a56c:	3d4e983a 	sll	r7,r7,r21
   2a570:	80acd83a 	srl	r22,r16,r2
   2a574:	9884d83a 	srl	r2,r19,r2
   2a578:	3deeb03a 	or	r23,r7,r23
   2a57c:	b824d43a 	srli	r18,r23,16
   2a580:	8560983a 	sll	r16,r16,r21
   2a584:	b009883a 	mov	r4,r22
   2a588:	900b883a 	mov	r5,r18
   2a58c:	3568983a 	sll	r20,r6,r21
   2a590:	1420b03a 	or	r16,r2,r16
   2a594:	0020c8c0 	call	20c8c <__umodsi3>
   2a598:	b009883a 	mov	r4,r22
   2a59c:	900b883a 	mov	r5,r18
   2a5a0:	1023883a 	mov	r17,r2
   2a5a4:	0020c280 	call	20c28 <__udivsi3>
   2a5a8:	8808943a 	slli	r4,r17,16
   2a5ac:	bf3fffcc 	andi	fp,r23,65535
   2a5b0:	8006d43a 	srli	r3,r16,16
   2a5b4:	e0a3383a 	mul	r17,fp,r2
   2a5b8:	100d883a 	mov	r6,r2
   2a5bc:	1906b03a 	or	r3,r3,r4
   2a5c0:	1c40042e 	bgeu	r3,r17,2a5d4 <__udivdi3+0x370>
   2a5c4:	1dc7883a 	add	r3,r3,r23
   2a5c8:	10bfffc4 	addi	r2,r2,-1
   2a5cc:	1dc0752e 	bgeu	r3,r23,2a7a4 <__udivdi3+0x540>
   2a5d0:	100d883a 	mov	r6,r2
   2a5d4:	1c63c83a 	sub	r17,r3,r17
   2a5d8:	900b883a 	mov	r5,r18
   2a5dc:	8809883a 	mov	r4,r17
   2a5e0:	d9800015 	stw	r6,0(sp)
   2a5e4:	0020c8c0 	call	20c8c <__umodsi3>
   2a5e8:	102d883a 	mov	r22,r2
   2a5ec:	8809883a 	mov	r4,r17
   2a5f0:	900b883a 	mov	r5,r18
   2a5f4:	0020c280 	call	20c28 <__udivsi3>
   2a5f8:	b02c943a 	slli	r22,r22,16
   2a5fc:	e089383a 	mul	r4,fp,r2
   2a600:	843fffcc 	andi	r16,r16,65535
   2a604:	85a0b03a 	or	r16,r16,r22
   2a608:	d9800017 	ldw	r6,0(sp)
   2a60c:	8100042e 	bgeu	r16,r4,2a620 <__udivdi3+0x3bc>
   2a610:	85e1883a 	add	r16,r16,r23
   2a614:	10ffffc4 	addi	r3,r2,-1
   2a618:	85c05e2e 	bgeu	r16,r23,2a794 <__udivdi3+0x530>
   2a61c:	1805883a 	mov	r2,r3
   2a620:	300c943a 	slli	r6,r6,16
   2a624:	a17fffcc 	andi	r5,r20,65535
   2a628:	a028d43a 	srli	r20,r20,16
   2a62c:	3084b03a 	or	r2,r6,r2
   2a630:	10ffffcc 	andi	r3,r2,65535
   2a634:	100cd43a 	srli	r6,r2,16
   2a638:	194f383a 	mul	r7,r3,r5
   2a63c:	1d07383a 	mul	r3,r3,r20
   2a640:	314b383a 	mul	r5,r6,r5
   2a644:	3810d43a 	srli	r8,r7,16
   2a648:	8121c83a 	sub	r16,r16,r4
   2a64c:	1947883a 	add	r3,r3,r5
   2a650:	40c7883a 	add	r3,r8,r3
   2a654:	350d383a 	mul	r6,r6,r20
   2a658:	1940022e 	bgeu	r3,r5,2a664 <__udivdi3+0x400>
   2a65c:	01000074 	movhi	r4,1
   2a660:	310d883a 	add	r6,r6,r4
   2a664:	1828d43a 	srli	r20,r3,16
   2a668:	a18d883a 	add	r6,r20,r6
   2a66c:	81803e36 	bltu	r16,r6,2a768 <__udivdi3+0x504>
   2a670:	81803826 	beq	r16,r6,2a754 <__udivdi3+0x4f0>
   2a674:	0007883a 	mov	r3,zero
   2a678:	003fa206 	br	2a504 <__alt_data_end+0xfffea504>
   2a67c:	88e2983a 	sll	r17,r17,r3
   2a680:	80a8d83a 	srl	r20,r16,r2
   2a684:	80e0983a 	sll	r16,r16,r3
   2a688:	882ad43a 	srli	r21,r17,16
   2a68c:	9884d83a 	srl	r2,r19,r2
   2a690:	a009883a 	mov	r4,r20
   2a694:	a80b883a 	mov	r5,r21
   2a698:	142eb03a 	or	r23,r2,r16
   2a69c:	98e4983a 	sll	r18,r19,r3
   2a6a0:	0020c8c0 	call	20c8c <__umodsi3>
   2a6a4:	a009883a 	mov	r4,r20
   2a6a8:	a80b883a 	mov	r5,r21
   2a6ac:	1021883a 	mov	r16,r2
   2a6b0:	0020c280 	call	20c28 <__udivsi3>
   2a6b4:	1039883a 	mov	fp,r2
   2a6b8:	8d3fffcc 	andi	r20,r17,65535
   2a6bc:	8020943a 	slli	r16,r16,16
   2a6c0:	b804d43a 	srli	r2,r23,16
   2a6c4:	a72d383a 	mul	r22,r20,fp
   2a6c8:	1404b03a 	or	r2,r2,r16
   2a6cc:	1580062e 	bgeu	r2,r22,2a6e8 <__udivdi3+0x484>
   2a6d0:	1445883a 	add	r2,r2,r17
   2a6d4:	e0ffffc4 	addi	r3,fp,-1
   2a6d8:	14403836 	bltu	r2,r17,2a7bc <__udivdi3+0x558>
   2a6dc:	1580372e 	bgeu	r2,r22,2a7bc <__udivdi3+0x558>
   2a6e0:	e73fff84 	addi	fp,fp,-2
   2a6e4:	1445883a 	add	r2,r2,r17
   2a6e8:	15adc83a 	sub	r22,r2,r22
   2a6ec:	a80b883a 	mov	r5,r21
   2a6f0:	b009883a 	mov	r4,r22
   2a6f4:	0020c8c0 	call	20c8c <__umodsi3>
   2a6f8:	1027883a 	mov	r19,r2
   2a6fc:	b009883a 	mov	r4,r22
   2a700:	a80b883a 	mov	r5,r21
   2a704:	0020c280 	call	20c28 <__udivsi3>
   2a708:	9826943a 	slli	r19,r19,16
   2a70c:	a0a1383a 	mul	r16,r20,r2
   2a710:	b93fffcc 	andi	r4,r23,65535
   2a714:	24c8b03a 	or	r4,r4,r19
   2a718:	2400062e 	bgeu	r4,r16,2a734 <__udivdi3+0x4d0>
   2a71c:	2449883a 	add	r4,r4,r17
   2a720:	10ffffc4 	addi	r3,r2,-1
   2a724:	24402336 	bltu	r4,r17,2a7b4 <__udivdi3+0x550>
   2a728:	2400222e 	bgeu	r4,r16,2a7b4 <__udivdi3+0x550>
   2a72c:	10bfff84 	addi	r2,r2,-2
   2a730:	2449883a 	add	r4,r4,r17
   2a734:	e038943a 	slli	fp,fp,16
   2a738:	2421c83a 	sub	r16,r4,r16
   2a73c:	e086b03a 	or	r3,fp,r2
   2a740:	003f4306 	br	2a450 <__alt_data_end+0xfffea450>
   2a744:	2005883a 	mov	r2,r4
   2a748:	003f6906 	br	2a4f0 <__alt_data_end+0xfffea4f0>
   2a74c:	1805883a 	mov	r2,r3
   2a750:	003f0f06 	br	2a390 <__alt_data_end+0xfffea390>
   2a754:	1806943a 	slli	r3,r3,16
   2a758:	9d66983a 	sll	r19,r19,r21
   2a75c:	39ffffcc 	andi	r7,r7,65535
   2a760:	19c7883a 	add	r3,r3,r7
   2a764:	98ffc32e 	bgeu	r19,r3,2a674 <__alt_data_end+0xfffea674>
   2a768:	10bfffc4 	addi	r2,r2,-1
   2a76c:	003fc106 	br	2a674 <__alt_data_end+0xfffea674>
   2a770:	00800604 	movi	r2,24
   2a774:	003f1106 	br	2a3bc <__alt_data_end+0xfffea3bc>
   2a778:	00800604 	movi	r2,24
   2a77c:	003f2706 	br	2a41c <__alt_data_end+0xfffea41c>
   2a780:	00800604 	movi	r2,24
   2a784:	003ece06 	br	2a2c0 <__alt_data_end+0xfffea2c0>
   2a788:	0007883a 	mov	r3,zero
   2a78c:	00800044 	movi	r2,1
   2a790:	003f5c06 	br	2a504 <__alt_data_end+0xfffea504>
   2a794:	813fa12e 	bgeu	r16,r4,2a61c <__alt_data_end+0xfffea61c>
   2a798:	10bfff84 	addi	r2,r2,-2
   2a79c:	85e1883a 	add	r16,r16,r23
   2a7a0:	003f9f06 	br	2a620 <__alt_data_end+0xfffea620>
   2a7a4:	1c7f8a2e 	bgeu	r3,r17,2a5d0 <__alt_data_end+0xfffea5d0>
   2a7a8:	31bfff84 	addi	r6,r6,-2
   2a7ac:	1dc7883a 	add	r3,r3,r23
   2a7b0:	003f8806 	br	2a5d4 <__alt_data_end+0xfffea5d4>
   2a7b4:	1805883a 	mov	r2,r3
   2a7b8:	003fde06 	br	2a734 <__alt_data_end+0xfffea734>
   2a7bc:	1839883a 	mov	fp,r3
   2a7c0:	003fc906 	br	2a6e8 <__alt_data_end+0xfffea6e8>
   2a7c4:	b5bfff84 	addi	r22,r22,-2
   2a7c8:	2449883a 	add	r4,r4,r17
   2a7cc:	003f3406 	br	2a4a0 <__alt_data_end+0xfffea4a0>
   2a7d0:	b5bfff84 	addi	r22,r22,-2
   2a7d4:	1445883a 	add	r2,r2,r17
   2a7d8:	003edb06 	br	2a348 <__alt_data_end+0xfffea348>

0002a7dc <__umoddi3>:
   2a7dc:	defff404 	addi	sp,sp,-48
   2a7e0:	df000a15 	stw	fp,40(sp)
   2a7e4:	dc400315 	stw	r17,12(sp)
   2a7e8:	dc000215 	stw	r16,8(sp)
   2a7ec:	dfc00b15 	stw	ra,44(sp)
   2a7f0:	ddc00915 	stw	r23,36(sp)
   2a7f4:	dd800815 	stw	r22,32(sp)
   2a7f8:	dd400715 	stw	r21,28(sp)
   2a7fc:	dd000615 	stw	r20,24(sp)
   2a800:	dcc00515 	stw	r19,20(sp)
   2a804:	dc800415 	stw	r18,16(sp)
   2a808:	2021883a 	mov	r16,r4
   2a80c:	2823883a 	mov	r17,r5
   2a810:	2839883a 	mov	fp,r5
   2a814:	38003c1e 	bne	r7,zero,2a908 <__umoddi3+0x12c>
   2a818:	3027883a 	mov	r19,r6
   2a81c:	2029883a 	mov	r20,r4
   2a820:	2980512e 	bgeu	r5,r6,2a968 <__umoddi3+0x18c>
   2a824:	00bfffd4 	movui	r2,65535
   2a828:	11809a36 	bltu	r2,r6,2aa94 <__umoddi3+0x2b8>
   2a82c:	01003fc4 	movi	r4,255
   2a830:	2189803a 	cmpltu	r4,r4,r6
   2a834:	200890fa 	slli	r4,r4,3
   2a838:	3104d83a 	srl	r2,r6,r4
   2a83c:	00c000f4 	movhi	r3,3
   2a840:	18c09204 	addi	r3,r3,584
   2a844:	1885883a 	add	r2,r3,r2
   2a848:	10c00003 	ldbu	r3,0(r2)
   2a84c:	00800804 	movi	r2,32
   2a850:	1909883a 	add	r4,r3,r4
   2a854:	1125c83a 	sub	r18,r2,r4
   2a858:	90000526 	beq	r18,zero,2a870 <__umoddi3+0x94>
   2a85c:	8ca2983a 	sll	r17,r17,r18
   2a860:	8108d83a 	srl	r4,r16,r4
   2a864:	34a6983a 	sll	r19,r6,r18
   2a868:	84a8983a 	sll	r20,r16,r18
   2a86c:	2478b03a 	or	fp,r4,r17
   2a870:	982ed43a 	srli	r23,r19,16
   2a874:	e009883a 	mov	r4,fp
   2a878:	9dbfffcc 	andi	r22,r19,65535
   2a87c:	b80b883a 	mov	r5,r23
   2a880:	0020c8c0 	call	20c8c <__umodsi3>
   2a884:	e009883a 	mov	r4,fp
   2a888:	b80b883a 	mov	r5,r23
   2a88c:	102b883a 	mov	r21,r2
   2a890:	0020c280 	call	20c28 <__udivsi3>
   2a894:	a806943a 	slli	r3,r21,16
   2a898:	a008d43a 	srli	r4,r20,16
   2a89c:	b085383a 	mul	r2,r22,r2
   2a8a0:	20c8b03a 	or	r4,r4,r3
   2a8a4:	2080032e 	bgeu	r4,r2,2a8b4 <__umoddi3+0xd8>
   2a8a8:	24c9883a 	add	r4,r4,r19
   2a8ac:	24c00136 	bltu	r4,r19,2a8b4 <__umoddi3+0xd8>
   2a8b0:	20811036 	bltu	r4,r2,2acf4 <__umoddi3+0x518>
   2a8b4:	20abc83a 	sub	r21,r4,r2
   2a8b8:	b80b883a 	mov	r5,r23
   2a8bc:	a809883a 	mov	r4,r21
   2a8c0:	0020c8c0 	call	20c8c <__umodsi3>
   2a8c4:	1023883a 	mov	r17,r2
   2a8c8:	b80b883a 	mov	r5,r23
   2a8cc:	a809883a 	mov	r4,r21
   2a8d0:	0020c280 	call	20c28 <__udivsi3>
   2a8d4:	8822943a 	slli	r17,r17,16
   2a8d8:	b085383a 	mul	r2,r22,r2
   2a8dc:	a0ffffcc 	andi	r3,r20,65535
   2a8e0:	1c46b03a 	or	r3,r3,r17
   2a8e4:	1880042e 	bgeu	r3,r2,2a8f8 <__umoddi3+0x11c>
   2a8e8:	1cc7883a 	add	r3,r3,r19
   2a8ec:	1cc00236 	bltu	r3,r19,2a8f8 <__umoddi3+0x11c>
   2a8f0:	1880012e 	bgeu	r3,r2,2a8f8 <__umoddi3+0x11c>
   2a8f4:	1cc7883a 	add	r3,r3,r19
   2a8f8:	1885c83a 	sub	r2,r3,r2
   2a8fc:	1484d83a 	srl	r2,r2,r18
   2a900:	0007883a 	mov	r3,zero
   2a904:	00004f06 	br	2aa44 <__umoddi3+0x268>
   2a908:	29c04c36 	bltu	r5,r7,2aa3c <__umoddi3+0x260>
   2a90c:	00bfffd4 	movui	r2,65535
   2a910:	11c0582e 	bgeu	r2,r7,2aa74 <__umoddi3+0x298>
   2a914:	00804034 	movhi	r2,256
   2a918:	10bfffc4 	addi	r2,r2,-1
   2a91c:	11c0e736 	bltu	r2,r7,2acbc <__umoddi3+0x4e0>
   2a920:	01000404 	movi	r4,16
   2a924:	3904d83a 	srl	r2,r7,r4
   2a928:	00c000f4 	movhi	r3,3
   2a92c:	18c09204 	addi	r3,r3,584
   2a930:	1885883a 	add	r2,r3,r2
   2a934:	14c00003 	ldbu	r19,0(r2)
   2a938:	00c00804 	movi	r3,32
   2a93c:	9927883a 	add	r19,r19,r4
   2a940:	1ce9c83a 	sub	r20,r3,r19
   2a944:	a000581e 	bne	r20,zero,2aaa8 <__umoddi3+0x2cc>
   2a948:	3c400136 	bltu	r7,r17,2a950 <__umoddi3+0x174>
   2a94c:	8180eb36 	bltu	r16,r6,2acfc <__umoddi3+0x520>
   2a950:	8185c83a 	sub	r2,r16,r6
   2a954:	89e3c83a 	sub	r17,r17,r7
   2a958:	8089803a 	cmpltu	r4,r16,r2
   2a95c:	8939c83a 	sub	fp,r17,r4
   2a960:	e007883a 	mov	r3,fp
   2a964:	00003706 	br	2aa44 <__umoddi3+0x268>
   2a968:	3000041e 	bne	r6,zero,2a97c <__umoddi3+0x1a0>
   2a96c:	000b883a 	mov	r5,zero
   2a970:	01000044 	movi	r4,1
   2a974:	0020c280 	call	20c28 <__udivsi3>
   2a978:	1027883a 	mov	r19,r2
   2a97c:	00bfffd4 	movui	r2,65535
   2a980:	14c0402e 	bgeu	r2,r19,2aa84 <__umoddi3+0x2a8>
   2a984:	00804034 	movhi	r2,256
   2a988:	10bfffc4 	addi	r2,r2,-1
   2a98c:	14c0cd36 	bltu	r2,r19,2acc4 <__umoddi3+0x4e8>
   2a990:	00800404 	movi	r2,16
   2a994:	9886d83a 	srl	r3,r19,r2
   2a998:	010000f4 	movhi	r4,3
   2a99c:	21009204 	addi	r4,r4,584
   2a9a0:	20c7883a 	add	r3,r4,r3
   2a9a4:	18c00003 	ldbu	r3,0(r3)
   2a9a8:	1887883a 	add	r3,r3,r2
   2a9ac:	00800804 	movi	r2,32
   2a9b0:	10e5c83a 	sub	r18,r2,r3
   2a9b4:	9000901e 	bne	r18,zero,2abf8 <__umoddi3+0x41c>
   2a9b8:	982cd43a 	srli	r22,r19,16
   2a9bc:	8ce3c83a 	sub	r17,r17,r19
   2a9c0:	9d7fffcc 	andi	r21,r19,65535
   2a9c4:	b00b883a 	mov	r5,r22
   2a9c8:	8809883a 	mov	r4,r17
   2a9cc:	0020c8c0 	call	20c8c <__umodsi3>
   2a9d0:	8809883a 	mov	r4,r17
   2a9d4:	b00b883a 	mov	r5,r22
   2a9d8:	1021883a 	mov	r16,r2
   2a9dc:	0020c280 	call	20c28 <__udivsi3>
   2a9e0:	8006943a 	slli	r3,r16,16
   2a9e4:	a008d43a 	srli	r4,r20,16
   2a9e8:	1545383a 	mul	r2,r2,r21
   2a9ec:	20c8b03a 	or	r4,r4,r3
   2a9f0:	2080042e 	bgeu	r4,r2,2aa04 <__umoddi3+0x228>
   2a9f4:	24c9883a 	add	r4,r4,r19
   2a9f8:	24c00236 	bltu	r4,r19,2aa04 <__umoddi3+0x228>
   2a9fc:	2080012e 	bgeu	r4,r2,2aa04 <__umoddi3+0x228>
   2aa00:	24c9883a 	add	r4,r4,r19
   2aa04:	20a1c83a 	sub	r16,r4,r2
   2aa08:	b00b883a 	mov	r5,r22
   2aa0c:	8009883a 	mov	r4,r16
   2aa10:	0020c8c0 	call	20c8c <__umodsi3>
   2aa14:	1023883a 	mov	r17,r2
   2aa18:	b00b883a 	mov	r5,r22
   2aa1c:	8009883a 	mov	r4,r16
   2aa20:	0020c280 	call	20c28 <__udivsi3>
   2aa24:	8822943a 	slli	r17,r17,16
   2aa28:	1545383a 	mul	r2,r2,r21
   2aa2c:	a53fffcc 	andi	r20,r20,65535
   2aa30:	a446b03a 	or	r3,r20,r17
   2aa34:	18bfb02e 	bgeu	r3,r2,2a8f8 <__alt_data_end+0xfffea8f8>
   2aa38:	003fab06 	br	2a8e8 <__alt_data_end+0xfffea8e8>
   2aa3c:	2005883a 	mov	r2,r4
   2aa40:	2807883a 	mov	r3,r5
   2aa44:	dfc00b17 	ldw	ra,44(sp)
   2aa48:	df000a17 	ldw	fp,40(sp)
   2aa4c:	ddc00917 	ldw	r23,36(sp)
   2aa50:	dd800817 	ldw	r22,32(sp)
   2aa54:	dd400717 	ldw	r21,28(sp)
   2aa58:	dd000617 	ldw	r20,24(sp)
   2aa5c:	dcc00517 	ldw	r19,20(sp)
   2aa60:	dc800417 	ldw	r18,16(sp)
   2aa64:	dc400317 	ldw	r17,12(sp)
   2aa68:	dc000217 	ldw	r16,8(sp)
   2aa6c:	dec00c04 	addi	sp,sp,48
   2aa70:	f800283a 	ret
   2aa74:	04c03fc4 	movi	r19,255
   2aa78:	99c9803a 	cmpltu	r4,r19,r7
   2aa7c:	200890fa 	slli	r4,r4,3
   2aa80:	003fa806 	br	2a924 <__alt_data_end+0xfffea924>
   2aa84:	00803fc4 	movi	r2,255
   2aa88:	14c5803a 	cmpltu	r2,r2,r19
   2aa8c:	100490fa 	slli	r2,r2,3
   2aa90:	003fc006 	br	2a994 <__alt_data_end+0xfffea994>
   2aa94:	00804034 	movhi	r2,256
   2aa98:	10bfffc4 	addi	r2,r2,-1
   2aa9c:	11808b36 	bltu	r2,r6,2accc <__umoddi3+0x4f0>
   2aaa0:	01000404 	movi	r4,16
   2aaa4:	003f6406 	br	2a838 <__alt_data_end+0xfffea838>
   2aaa8:	34c4d83a 	srl	r2,r6,r19
   2aaac:	3d0e983a 	sll	r7,r7,r20
   2aab0:	8cf8d83a 	srl	fp,r17,r19
   2aab4:	8d10983a 	sll	r8,r17,r20
   2aab8:	38aab03a 	or	r21,r7,r2
   2aabc:	a82cd43a 	srli	r22,r21,16
   2aac0:	84e2d83a 	srl	r17,r16,r19
   2aac4:	e009883a 	mov	r4,fp
   2aac8:	b00b883a 	mov	r5,r22
   2aacc:	8a22b03a 	or	r17,r17,r8
   2aad0:	3524983a 	sll	r18,r6,r20
   2aad4:	0020c8c0 	call	20c8c <__umodsi3>
   2aad8:	e009883a 	mov	r4,fp
   2aadc:	b00b883a 	mov	r5,r22
   2aae0:	102f883a 	mov	r23,r2
   2aae4:	0020c280 	call	20c28 <__udivsi3>
   2aae8:	100d883a 	mov	r6,r2
   2aaec:	b808943a 	slli	r4,r23,16
   2aaf0:	aa3fffcc 	andi	r8,r21,65535
   2aaf4:	8804d43a 	srli	r2,r17,16
   2aaf8:	41af383a 	mul	r23,r8,r6
   2aafc:	8520983a 	sll	r16,r16,r20
   2ab00:	1104b03a 	or	r2,r2,r4
   2ab04:	15c0042e 	bgeu	r2,r23,2ab18 <__umoddi3+0x33c>
   2ab08:	1545883a 	add	r2,r2,r21
   2ab0c:	30ffffc4 	addi	r3,r6,-1
   2ab10:	1540742e 	bgeu	r2,r21,2ace4 <__umoddi3+0x508>
   2ab14:	180d883a 	mov	r6,r3
   2ab18:	15efc83a 	sub	r23,r2,r23
   2ab1c:	b00b883a 	mov	r5,r22
   2ab20:	b809883a 	mov	r4,r23
   2ab24:	d9800115 	stw	r6,4(sp)
   2ab28:	da000015 	stw	r8,0(sp)
   2ab2c:	0020c8c0 	call	20c8c <__umodsi3>
   2ab30:	b00b883a 	mov	r5,r22
   2ab34:	b809883a 	mov	r4,r23
   2ab38:	1039883a 	mov	fp,r2
   2ab3c:	0020c280 	call	20c28 <__udivsi3>
   2ab40:	da000017 	ldw	r8,0(sp)
   2ab44:	e038943a 	slli	fp,fp,16
   2ab48:	100b883a 	mov	r5,r2
   2ab4c:	4089383a 	mul	r4,r8,r2
   2ab50:	8a3fffcc 	andi	r8,r17,65535
   2ab54:	4710b03a 	or	r8,r8,fp
   2ab58:	d9800117 	ldw	r6,4(sp)
   2ab5c:	4100042e 	bgeu	r8,r4,2ab70 <__umoddi3+0x394>
   2ab60:	4551883a 	add	r8,r8,r21
   2ab64:	10bfffc4 	addi	r2,r2,-1
   2ab68:	45405a2e 	bgeu	r8,r21,2acd4 <__umoddi3+0x4f8>
   2ab6c:	100b883a 	mov	r5,r2
   2ab70:	300c943a 	slli	r6,r6,16
   2ab74:	91ffffcc 	andi	r7,r18,65535
   2ab78:	9004d43a 	srli	r2,r18,16
   2ab7c:	314cb03a 	or	r6,r6,r5
   2ab80:	317fffcc 	andi	r5,r6,65535
   2ab84:	300cd43a 	srli	r6,r6,16
   2ab88:	29d3383a 	mul	r9,r5,r7
   2ab8c:	288b383a 	mul	r5,r5,r2
   2ab90:	31cf383a 	mul	r7,r6,r7
   2ab94:	4806d43a 	srli	r3,r9,16
   2ab98:	4111c83a 	sub	r8,r8,r4
   2ab9c:	29cb883a 	add	r5,r5,r7
   2aba0:	194b883a 	add	r5,r3,r5
   2aba4:	3085383a 	mul	r2,r6,r2
   2aba8:	29c0022e 	bgeu	r5,r7,2abb4 <__umoddi3+0x3d8>
   2abac:	00c00074 	movhi	r3,1
   2abb0:	10c5883a 	add	r2,r2,r3
   2abb4:	2808d43a 	srli	r4,r5,16
   2abb8:	280a943a 	slli	r5,r5,16
   2abbc:	4a7fffcc 	andi	r9,r9,65535
   2abc0:	2085883a 	add	r2,r4,r2
   2abc4:	2a4b883a 	add	r5,r5,r9
   2abc8:	40803636 	bltu	r8,r2,2aca4 <__umoddi3+0x4c8>
   2abcc:	40804d26 	beq	r8,r2,2ad04 <__umoddi3+0x528>
   2abd0:	4089c83a 	sub	r4,r8,r2
   2abd4:	280f883a 	mov	r7,r5
   2abd8:	81cfc83a 	sub	r7,r16,r7
   2abdc:	81c7803a 	cmpltu	r3,r16,r7
   2abe0:	20c7c83a 	sub	r3,r4,r3
   2abe4:	1cc4983a 	sll	r2,r3,r19
   2abe8:	3d0ed83a 	srl	r7,r7,r20
   2abec:	1d06d83a 	srl	r3,r3,r20
   2abf0:	11c4b03a 	or	r2,r2,r7
   2abf4:	003f9306 	br	2aa44 <__alt_data_end+0xfffeaa44>
   2abf8:	9ca6983a 	sll	r19,r19,r18
   2abfc:	88e8d83a 	srl	r20,r17,r3
   2ac00:	80c4d83a 	srl	r2,r16,r3
   2ac04:	982cd43a 	srli	r22,r19,16
   2ac08:	8ca2983a 	sll	r17,r17,r18
   2ac0c:	a009883a 	mov	r4,r20
   2ac10:	b00b883a 	mov	r5,r22
   2ac14:	1478b03a 	or	fp,r2,r17
   2ac18:	0020c8c0 	call	20c8c <__umodsi3>
   2ac1c:	a009883a 	mov	r4,r20
   2ac20:	b00b883a 	mov	r5,r22
   2ac24:	1023883a 	mov	r17,r2
   2ac28:	0020c280 	call	20c28 <__udivsi3>
   2ac2c:	9d7fffcc 	andi	r21,r19,65535
   2ac30:	880a943a 	slli	r5,r17,16
   2ac34:	e008d43a 	srli	r4,fp,16
   2ac38:	a885383a 	mul	r2,r21,r2
   2ac3c:	84a8983a 	sll	r20,r16,r18
   2ac40:	2148b03a 	or	r4,r4,r5
   2ac44:	2080042e 	bgeu	r4,r2,2ac58 <__umoddi3+0x47c>
   2ac48:	24c9883a 	add	r4,r4,r19
   2ac4c:	24c00236 	bltu	r4,r19,2ac58 <__umoddi3+0x47c>
   2ac50:	2080012e 	bgeu	r4,r2,2ac58 <__umoddi3+0x47c>
   2ac54:	24c9883a 	add	r4,r4,r19
   2ac58:	20a3c83a 	sub	r17,r4,r2
   2ac5c:	b00b883a 	mov	r5,r22
   2ac60:	8809883a 	mov	r4,r17
   2ac64:	0020c8c0 	call	20c8c <__umodsi3>
   2ac68:	102f883a 	mov	r23,r2
   2ac6c:	8809883a 	mov	r4,r17
   2ac70:	b00b883a 	mov	r5,r22
   2ac74:	0020c280 	call	20c28 <__udivsi3>
   2ac78:	b82e943a 	slli	r23,r23,16
   2ac7c:	a885383a 	mul	r2,r21,r2
   2ac80:	e13fffcc 	andi	r4,fp,65535
   2ac84:	25c8b03a 	or	r4,r4,r23
   2ac88:	2080042e 	bgeu	r4,r2,2ac9c <__umoddi3+0x4c0>
   2ac8c:	24c9883a 	add	r4,r4,r19
   2ac90:	24c00236 	bltu	r4,r19,2ac9c <__umoddi3+0x4c0>
   2ac94:	2080012e 	bgeu	r4,r2,2ac9c <__umoddi3+0x4c0>
   2ac98:	24c9883a 	add	r4,r4,r19
   2ac9c:	20a3c83a 	sub	r17,r4,r2
   2aca0:	003f4806 	br	2a9c4 <__alt_data_end+0xfffea9c4>
   2aca4:	2c8fc83a 	sub	r7,r5,r18
   2aca8:	1545c83a 	sub	r2,r2,r21
   2acac:	29cb803a 	cmpltu	r5,r5,r7
   2acb0:	1145c83a 	sub	r2,r2,r5
   2acb4:	4089c83a 	sub	r4,r8,r2
   2acb8:	003fc706 	br	2abd8 <__alt_data_end+0xfffeabd8>
   2acbc:	01000604 	movi	r4,24
   2acc0:	003f1806 	br	2a924 <__alt_data_end+0xfffea924>
   2acc4:	00800604 	movi	r2,24
   2acc8:	003f3206 	br	2a994 <__alt_data_end+0xfffea994>
   2accc:	01000604 	movi	r4,24
   2acd0:	003ed906 	br	2a838 <__alt_data_end+0xfffea838>
   2acd4:	413fa52e 	bgeu	r8,r4,2ab6c <__alt_data_end+0xfffeab6c>
   2acd8:	297fff84 	addi	r5,r5,-2
   2acdc:	4551883a 	add	r8,r8,r21
   2ace0:	003fa306 	br	2ab70 <__alt_data_end+0xfffeab70>
   2ace4:	15ff8b2e 	bgeu	r2,r23,2ab14 <__alt_data_end+0xfffeab14>
   2ace8:	31bfff84 	addi	r6,r6,-2
   2acec:	1545883a 	add	r2,r2,r21
   2acf0:	003f8906 	br	2ab18 <__alt_data_end+0xfffeab18>
   2acf4:	24c9883a 	add	r4,r4,r19
   2acf8:	003eee06 	br	2a8b4 <__alt_data_end+0xfffea8b4>
   2acfc:	8005883a 	mov	r2,r16
   2ad00:	003f1706 	br	2a960 <__alt_data_end+0xfffea960>
   2ad04:	817fe736 	bltu	r16,r5,2aca4 <__alt_data_end+0xfffeaca4>
   2ad08:	280f883a 	mov	r7,r5
   2ad0c:	0009883a 	mov	r4,zero
   2ad10:	003fb106 	br	2abd8 <__alt_data_end+0xfffeabd8>

0002ad14 <__adddf3>:
   2ad14:	02c00434 	movhi	r11,16
   2ad18:	5affffc4 	addi	r11,r11,-1
   2ad1c:	2806d7fa 	srli	r3,r5,31
   2ad20:	2ad4703a 	and	r10,r5,r11
   2ad24:	3ad2703a 	and	r9,r7,r11
   2ad28:	3804d53a 	srli	r2,r7,20
   2ad2c:	3018d77a 	srli	r12,r6,29
   2ad30:	280ad53a 	srli	r5,r5,20
   2ad34:	501490fa 	slli	r10,r10,3
   2ad38:	2010d77a 	srli	r8,r4,29
   2ad3c:	481290fa 	slli	r9,r9,3
   2ad40:	380ed7fa 	srli	r7,r7,31
   2ad44:	defffb04 	addi	sp,sp,-20
   2ad48:	dc800215 	stw	r18,8(sp)
   2ad4c:	dc400115 	stw	r17,4(sp)
   2ad50:	dc000015 	stw	r16,0(sp)
   2ad54:	dfc00415 	stw	ra,16(sp)
   2ad58:	dcc00315 	stw	r19,12(sp)
   2ad5c:	1c803fcc 	andi	r18,r3,255
   2ad60:	2c01ffcc 	andi	r16,r5,2047
   2ad64:	5210b03a 	or	r8,r10,r8
   2ad68:	202290fa 	slli	r17,r4,3
   2ad6c:	1081ffcc 	andi	r2,r2,2047
   2ad70:	4b12b03a 	or	r9,r9,r12
   2ad74:	300c90fa 	slli	r6,r6,3
   2ad78:	91c07526 	beq	r18,r7,2af50 <__adddf3+0x23c>
   2ad7c:	8087c83a 	sub	r3,r16,r2
   2ad80:	00c0ab0e 	bge	zero,r3,2b030 <__adddf3+0x31c>
   2ad84:	10002a1e 	bne	r2,zero,2ae30 <__adddf3+0x11c>
   2ad88:	4984b03a 	or	r2,r9,r6
   2ad8c:	1000961e 	bne	r2,zero,2afe8 <__adddf3+0x2d4>
   2ad90:	888001cc 	andi	r2,r17,7
   2ad94:	10000726 	beq	r2,zero,2adb4 <__adddf3+0xa0>
   2ad98:	888003cc 	andi	r2,r17,15
   2ad9c:	00c00104 	movi	r3,4
   2ada0:	10c00426 	beq	r2,r3,2adb4 <__adddf3+0xa0>
   2ada4:	88c7883a 	add	r3,r17,r3
   2ada8:	1c63803a 	cmpltu	r17,r3,r17
   2adac:	4451883a 	add	r8,r8,r17
   2adb0:	1823883a 	mov	r17,r3
   2adb4:	4080202c 	andhi	r2,r8,128
   2adb8:	10005926 	beq	r2,zero,2af20 <__adddf3+0x20c>
   2adbc:	84000044 	addi	r16,r16,1
   2adc0:	0081ffc4 	movi	r2,2047
   2adc4:	8080ba26 	beq	r16,r2,2b0b0 <__adddf3+0x39c>
   2adc8:	00bfe034 	movhi	r2,65408
   2adcc:	10bfffc4 	addi	r2,r2,-1
   2add0:	4090703a 	and	r8,r8,r2
   2add4:	4004977a 	slli	r2,r8,29
   2add8:	4010927a 	slli	r8,r8,9
   2addc:	8822d0fa 	srli	r17,r17,3
   2ade0:	8401ffcc 	andi	r16,r16,2047
   2ade4:	4010d33a 	srli	r8,r8,12
   2ade8:	9007883a 	mov	r3,r18
   2adec:	1444b03a 	or	r2,r2,r17
   2adf0:	8401ffcc 	andi	r16,r16,2047
   2adf4:	8020953a 	slli	r16,r16,20
   2adf8:	18c03fcc 	andi	r3,r3,255
   2adfc:	01000434 	movhi	r4,16
   2ae00:	213fffc4 	addi	r4,r4,-1
   2ae04:	180697fa 	slli	r3,r3,31
   2ae08:	4110703a 	and	r8,r8,r4
   2ae0c:	4410b03a 	or	r8,r8,r16
   2ae10:	40c6b03a 	or	r3,r8,r3
   2ae14:	dfc00417 	ldw	ra,16(sp)
   2ae18:	dcc00317 	ldw	r19,12(sp)
   2ae1c:	dc800217 	ldw	r18,8(sp)
   2ae20:	dc400117 	ldw	r17,4(sp)
   2ae24:	dc000017 	ldw	r16,0(sp)
   2ae28:	dec00504 	addi	sp,sp,20
   2ae2c:	f800283a 	ret
   2ae30:	0081ffc4 	movi	r2,2047
   2ae34:	80bfd626 	beq	r16,r2,2ad90 <__alt_data_end+0xfffead90>
   2ae38:	4a402034 	orhi	r9,r9,128
   2ae3c:	00800e04 	movi	r2,56
   2ae40:	10c09f16 	blt	r2,r3,2b0c0 <__adddf3+0x3ac>
   2ae44:	008007c4 	movi	r2,31
   2ae48:	10c0c216 	blt	r2,r3,2b154 <__adddf3+0x440>
   2ae4c:	00800804 	movi	r2,32
   2ae50:	10c5c83a 	sub	r2,r2,r3
   2ae54:	488a983a 	sll	r5,r9,r2
   2ae58:	30c8d83a 	srl	r4,r6,r3
   2ae5c:	3084983a 	sll	r2,r6,r2
   2ae60:	48c6d83a 	srl	r3,r9,r3
   2ae64:	290cb03a 	or	r6,r5,r4
   2ae68:	1004c03a 	cmpne	r2,r2,zero
   2ae6c:	308cb03a 	or	r6,r6,r2
   2ae70:	898dc83a 	sub	r6,r17,r6
   2ae74:	89a3803a 	cmpltu	r17,r17,r6
   2ae78:	40d1c83a 	sub	r8,r8,r3
   2ae7c:	4451c83a 	sub	r8,r8,r17
   2ae80:	3023883a 	mov	r17,r6
   2ae84:	4080202c 	andhi	r2,r8,128
   2ae88:	10002326 	beq	r2,zero,2af18 <__adddf3+0x204>
   2ae8c:	04c02034 	movhi	r19,128
   2ae90:	9cffffc4 	addi	r19,r19,-1
   2ae94:	44e6703a 	and	r19,r8,r19
   2ae98:	98007626 	beq	r19,zero,2b074 <__adddf3+0x360>
   2ae9c:	9809883a 	mov	r4,r19
   2aea0:	002d3180 	call	2d318 <__clzsi2>
   2aea4:	10fffe04 	addi	r3,r2,-8
   2aea8:	010007c4 	movi	r4,31
   2aeac:	20c07716 	blt	r4,r3,2b08c <__adddf3+0x378>
   2aeb0:	00800804 	movi	r2,32
   2aeb4:	10c5c83a 	sub	r2,r2,r3
   2aeb8:	8884d83a 	srl	r2,r17,r2
   2aebc:	98d0983a 	sll	r8,r19,r3
   2aec0:	88e2983a 	sll	r17,r17,r3
   2aec4:	1204b03a 	or	r2,r2,r8
   2aec8:	1c007416 	blt	r3,r16,2b09c <__adddf3+0x388>
   2aecc:	1c21c83a 	sub	r16,r3,r16
   2aed0:	82000044 	addi	r8,r16,1
   2aed4:	00c007c4 	movi	r3,31
   2aed8:	1a009116 	blt	r3,r8,2b120 <__adddf3+0x40c>
   2aedc:	00c00804 	movi	r3,32
   2aee0:	1a07c83a 	sub	r3,r3,r8
   2aee4:	8a08d83a 	srl	r4,r17,r8
   2aee8:	88e2983a 	sll	r17,r17,r3
   2aeec:	10c6983a 	sll	r3,r2,r3
   2aef0:	1210d83a 	srl	r8,r2,r8
   2aef4:	8804c03a 	cmpne	r2,r17,zero
   2aef8:	1906b03a 	or	r3,r3,r4
   2aefc:	18a2b03a 	or	r17,r3,r2
   2af00:	0021883a 	mov	r16,zero
   2af04:	003fa206 	br	2ad90 <__alt_data_end+0xfffead90>
   2af08:	1890b03a 	or	r8,r3,r2
   2af0c:	40017d26 	beq	r8,zero,2b504 <__adddf3+0x7f0>
   2af10:	1011883a 	mov	r8,r2
   2af14:	1823883a 	mov	r17,r3
   2af18:	888001cc 	andi	r2,r17,7
   2af1c:	103f9e1e 	bne	r2,zero,2ad98 <__alt_data_end+0xfffead98>
   2af20:	4004977a 	slli	r2,r8,29
   2af24:	8822d0fa 	srli	r17,r17,3
   2af28:	4010d0fa 	srli	r8,r8,3
   2af2c:	9007883a 	mov	r3,r18
   2af30:	1444b03a 	or	r2,r2,r17
   2af34:	0101ffc4 	movi	r4,2047
   2af38:	81002426 	beq	r16,r4,2afcc <__adddf3+0x2b8>
   2af3c:	8120703a 	and	r16,r16,r4
   2af40:	01000434 	movhi	r4,16
   2af44:	213fffc4 	addi	r4,r4,-1
   2af48:	4110703a 	and	r8,r8,r4
   2af4c:	003fa806 	br	2adf0 <__alt_data_end+0xfffeadf0>
   2af50:	8089c83a 	sub	r4,r16,r2
   2af54:	01005e0e 	bge	zero,r4,2b0d0 <__adddf3+0x3bc>
   2af58:	10002b26 	beq	r2,zero,2b008 <__adddf3+0x2f4>
   2af5c:	0081ffc4 	movi	r2,2047
   2af60:	80bf8b26 	beq	r16,r2,2ad90 <__alt_data_end+0xfffead90>
   2af64:	4a402034 	orhi	r9,r9,128
   2af68:	00800e04 	movi	r2,56
   2af6c:	1100a40e 	bge	r2,r4,2b200 <__adddf3+0x4ec>
   2af70:	498cb03a 	or	r6,r9,r6
   2af74:	300ac03a 	cmpne	r5,r6,zero
   2af78:	0013883a 	mov	r9,zero
   2af7c:	2c4b883a 	add	r5,r5,r17
   2af80:	2c63803a 	cmpltu	r17,r5,r17
   2af84:	4a11883a 	add	r8,r9,r8
   2af88:	8a11883a 	add	r8,r17,r8
   2af8c:	2823883a 	mov	r17,r5
   2af90:	4080202c 	andhi	r2,r8,128
   2af94:	103fe026 	beq	r2,zero,2af18 <__alt_data_end+0xfffeaf18>
   2af98:	84000044 	addi	r16,r16,1
   2af9c:	0081ffc4 	movi	r2,2047
   2afa0:	8080d226 	beq	r16,r2,2b2ec <__adddf3+0x5d8>
   2afa4:	00bfe034 	movhi	r2,65408
   2afa8:	10bfffc4 	addi	r2,r2,-1
   2afac:	4090703a 	and	r8,r8,r2
   2afb0:	880ad07a 	srli	r5,r17,1
   2afb4:	400897fa 	slli	r4,r8,31
   2afb8:	88c0004c 	andi	r3,r17,1
   2afbc:	28e2b03a 	or	r17,r5,r3
   2afc0:	4010d07a 	srli	r8,r8,1
   2afc4:	2462b03a 	or	r17,r4,r17
   2afc8:	003f7106 	br	2ad90 <__alt_data_end+0xfffead90>
   2afcc:	4088b03a 	or	r4,r8,r2
   2afd0:	20014526 	beq	r4,zero,2b4e8 <__adddf3+0x7d4>
   2afd4:	01000434 	movhi	r4,16
   2afd8:	42000234 	orhi	r8,r8,8
   2afdc:	213fffc4 	addi	r4,r4,-1
   2afe0:	4110703a 	and	r8,r8,r4
   2afe4:	003f8206 	br	2adf0 <__alt_data_end+0xfffeadf0>
   2afe8:	18ffffc4 	addi	r3,r3,-1
   2afec:	1800491e 	bne	r3,zero,2b114 <__adddf3+0x400>
   2aff0:	898bc83a 	sub	r5,r17,r6
   2aff4:	8963803a 	cmpltu	r17,r17,r5
   2aff8:	4251c83a 	sub	r8,r8,r9
   2affc:	4451c83a 	sub	r8,r8,r17
   2b000:	2823883a 	mov	r17,r5
   2b004:	003f9f06 	br	2ae84 <__alt_data_end+0xfffeae84>
   2b008:	4984b03a 	or	r2,r9,r6
   2b00c:	103f6026 	beq	r2,zero,2ad90 <__alt_data_end+0xfffead90>
   2b010:	213fffc4 	addi	r4,r4,-1
   2b014:	2000931e 	bne	r4,zero,2b264 <__adddf3+0x550>
   2b018:	898d883a 	add	r6,r17,r6
   2b01c:	3463803a 	cmpltu	r17,r6,r17
   2b020:	4251883a 	add	r8,r8,r9
   2b024:	8a11883a 	add	r8,r17,r8
   2b028:	3023883a 	mov	r17,r6
   2b02c:	003fd806 	br	2af90 <__alt_data_end+0xfffeaf90>
   2b030:	1800541e 	bne	r3,zero,2b184 <__adddf3+0x470>
   2b034:	80800044 	addi	r2,r16,1
   2b038:	1081ffcc 	andi	r2,r2,2047
   2b03c:	00c00044 	movi	r3,1
   2b040:	1880a00e 	bge	r3,r2,2b2c4 <__adddf3+0x5b0>
   2b044:	8989c83a 	sub	r4,r17,r6
   2b048:	8905803a 	cmpltu	r2,r17,r4
   2b04c:	4267c83a 	sub	r19,r8,r9
   2b050:	98a7c83a 	sub	r19,r19,r2
   2b054:	9880202c 	andhi	r2,r19,128
   2b058:	10006326 	beq	r2,zero,2b1e8 <__adddf3+0x4d4>
   2b05c:	3463c83a 	sub	r17,r6,r17
   2b060:	4a07c83a 	sub	r3,r9,r8
   2b064:	344d803a 	cmpltu	r6,r6,r17
   2b068:	19a7c83a 	sub	r19,r3,r6
   2b06c:	3825883a 	mov	r18,r7
   2b070:	983f8a1e 	bne	r19,zero,2ae9c <__alt_data_end+0xfffeae9c>
   2b074:	8809883a 	mov	r4,r17
   2b078:	002d3180 	call	2d318 <__clzsi2>
   2b07c:	10800804 	addi	r2,r2,32
   2b080:	10fffe04 	addi	r3,r2,-8
   2b084:	010007c4 	movi	r4,31
   2b088:	20ff890e 	bge	r4,r3,2aeb0 <__alt_data_end+0xfffeaeb0>
   2b08c:	10bff604 	addi	r2,r2,-40
   2b090:	8884983a 	sll	r2,r17,r2
   2b094:	0023883a 	mov	r17,zero
   2b098:	1c3f8c0e 	bge	r3,r16,2aecc <__alt_data_end+0xfffeaecc>
   2b09c:	023fe034 	movhi	r8,65408
   2b0a0:	423fffc4 	addi	r8,r8,-1
   2b0a4:	80e1c83a 	sub	r16,r16,r3
   2b0a8:	1210703a 	and	r8,r2,r8
   2b0ac:	003f3806 	br	2ad90 <__alt_data_end+0xfffead90>
   2b0b0:	9007883a 	mov	r3,r18
   2b0b4:	0011883a 	mov	r8,zero
   2b0b8:	0005883a 	mov	r2,zero
   2b0bc:	003f4c06 	br	2adf0 <__alt_data_end+0xfffeadf0>
   2b0c0:	498cb03a 	or	r6,r9,r6
   2b0c4:	300cc03a 	cmpne	r6,r6,zero
   2b0c8:	0007883a 	mov	r3,zero
   2b0cc:	003f6806 	br	2ae70 <__alt_data_end+0xfffeae70>
   2b0d0:	20009c1e 	bne	r4,zero,2b344 <__adddf3+0x630>
   2b0d4:	80800044 	addi	r2,r16,1
   2b0d8:	1141ffcc 	andi	r5,r2,2047
   2b0dc:	01000044 	movi	r4,1
   2b0e0:	2140670e 	bge	r4,r5,2b280 <__adddf3+0x56c>
   2b0e4:	0101ffc4 	movi	r4,2047
   2b0e8:	11007f26 	beq	r2,r4,2b2e8 <__adddf3+0x5d4>
   2b0ec:	898d883a 	add	r6,r17,r6
   2b0f0:	4247883a 	add	r3,r8,r9
   2b0f4:	3451803a 	cmpltu	r8,r6,r17
   2b0f8:	40d1883a 	add	r8,r8,r3
   2b0fc:	402297fa 	slli	r17,r8,31
   2b100:	300cd07a 	srli	r6,r6,1
   2b104:	4010d07a 	srli	r8,r8,1
   2b108:	1021883a 	mov	r16,r2
   2b10c:	89a2b03a 	or	r17,r17,r6
   2b110:	003f1f06 	br	2ad90 <__alt_data_end+0xfffead90>
   2b114:	0081ffc4 	movi	r2,2047
   2b118:	80bf481e 	bne	r16,r2,2ae3c <__alt_data_end+0xfffeae3c>
   2b11c:	003f1c06 	br	2ad90 <__alt_data_end+0xfffead90>
   2b120:	843ff844 	addi	r16,r16,-31
   2b124:	01000804 	movi	r4,32
   2b128:	1406d83a 	srl	r3,r2,r16
   2b12c:	41005026 	beq	r8,r4,2b270 <__adddf3+0x55c>
   2b130:	01001004 	movi	r4,64
   2b134:	2211c83a 	sub	r8,r4,r8
   2b138:	1204983a 	sll	r2,r2,r8
   2b13c:	88a2b03a 	or	r17,r17,r2
   2b140:	8822c03a 	cmpne	r17,r17,zero
   2b144:	1c62b03a 	or	r17,r3,r17
   2b148:	0011883a 	mov	r8,zero
   2b14c:	0021883a 	mov	r16,zero
   2b150:	003f7106 	br	2af18 <__alt_data_end+0xfffeaf18>
   2b154:	193ff804 	addi	r4,r3,-32
   2b158:	00800804 	movi	r2,32
   2b15c:	4908d83a 	srl	r4,r9,r4
   2b160:	18804526 	beq	r3,r2,2b278 <__adddf3+0x564>
   2b164:	00801004 	movi	r2,64
   2b168:	10c5c83a 	sub	r2,r2,r3
   2b16c:	4886983a 	sll	r3,r9,r2
   2b170:	198cb03a 	or	r6,r3,r6
   2b174:	300cc03a 	cmpne	r6,r6,zero
   2b178:	218cb03a 	or	r6,r4,r6
   2b17c:	0007883a 	mov	r3,zero
   2b180:	003f3b06 	br	2ae70 <__alt_data_end+0xfffeae70>
   2b184:	80002a26 	beq	r16,zero,2b230 <__adddf3+0x51c>
   2b188:	0101ffc4 	movi	r4,2047
   2b18c:	11006826 	beq	r2,r4,2b330 <__adddf3+0x61c>
   2b190:	00c7c83a 	sub	r3,zero,r3
   2b194:	42002034 	orhi	r8,r8,128
   2b198:	01000e04 	movi	r4,56
   2b19c:	20c07c16 	blt	r4,r3,2b390 <__adddf3+0x67c>
   2b1a0:	010007c4 	movi	r4,31
   2b1a4:	20c0da16 	blt	r4,r3,2b510 <__adddf3+0x7fc>
   2b1a8:	01000804 	movi	r4,32
   2b1ac:	20c9c83a 	sub	r4,r4,r3
   2b1b0:	4114983a 	sll	r10,r8,r4
   2b1b4:	88cad83a 	srl	r5,r17,r3
   2b1b8:	8908983a 	sll	r4,r17,r4
   2b1bc:	40c6d83a 	srl	r3,r8,r3
   2b1c0:	5162b03a 	or	r17,r10,r5
   2b1c4:	2008c03a 	cmpne	r4,r4,zero
   2b1c8:	8922b03a 	or	r17,r17,r4
   2b1cc:	3463c83a 	sub	r17,r6,r17
   2b1d0:	48c7c83a 	sub	r3,r9,r3
   2b1d4:	344d803a 	cmpltu	r6,r6,r17
   2b1d8:	1991c83a 	sub	r8,r3,r6
   2b1dc:	1021883a 	mov	r16,r2
   2b1e0:	3825883a 	mov	r18,r7
   2b1e4:	003f2706 	br	2ae84 <__alt_data_end+0xfffeae84>
   2b1e8:	24d0b03a 	or	r8,r4,r19
   2b1ec:	40001b1e 	bne	r8,zero,2b25c <__adddf3+0x548>
   2b1f0:	0005883a 	mov	r2,zero
   2b1f4:	0007883a 	mov	r3,zero
   2b1f8:	0021883a 	mov	r16,zero
   2b1fc:	003f4d06 	br	2af34 <__alt_data_end+0xfffeaf34>
   2b200:	008007c4 	movi	r2,31
   2b204:	11003c16 	blt	r2,r4,2b2f8 <__adddf3+0x5e4>
   2b208:	00800804 	movi	r2,32
   2b20c:	1105c83a 	sub	r2,r2,r4
   2b210:	488e983a 	sll	r7,r9,r2
   2b214:	310ad83a 	srl	r5,r6,r4
   2b218:	3084983a 	sll	r2,r6,r2
   2b21c:	4912d83a 	srl	r9,r9,r4
   2b220:	394ab03a 	or	r5,r7,r5
   2b224:	1004c03a 	cmpne	r2,r2,zero
   2b228:	288ab03a 	or	r5,r5,r2
   2b22c:	003f5306 	br	2af7c <__alt_data_end+0xfffeaf7c>
   2b230:	4448b03a 	or	r4,r8,r17
   2b234:	20003e26 	beq	r4,zero,2b330 <__adddf3+0x61c>
   2b238:	00c6303a 	nor	r3,zero,r3
   2b23c:	18003a1e 	bne	r3,zero,2b328 <__adddf3+0x614>
   2b240:	3463c83a 	sub	r17,r6,r17
   2b244:	4a07c83a 	sub	r3,r9,r8
   2b248:	344d803a 	cmpltu	r6,r6,r17
   2b24c:	1991c83a 	sub	r8,r3,r6
   2b250:	1021883a 	mov	r16,r2
   2b254:	3825883a 	mov	r18,r7
   2b258:	003f0a06 	br	2ae84 <__alt_data_end+0xfffeae84>
   2b25c:	2023883a 	mov	r17,r4
   2b260:	003f0d06 	br	2ae98 <__alt_data_end+0xfffeae98>
   2b264:	0081ffc4 	movi	r2,2047
   2b268:	80bf3f1e 	bne	r16,r2,2af68 <__alt_data_end+0xfffeaf68>
   2b26c:	003ec806 	br	2ad90 <__alt_data_end+0xfffead90>
   2b270:	0005883a 	mov	r2,zero
   2b274:	003fb106 	br	2b13c <__alt_data_end+0xfffeb13c>
   2b278:	0007883a 	mov	r3,zero
   2b27c:	003fbc06 	br	2b170 <__alt_data_end+0xfffeb170>
   2b280:	4444b03a 	or	r2,r8,r17
   2b284:	8000871e 	bne	r16,zero,2b4a4 <__adddf3+0x790>
   2b288:	1000ba26 	beq	r2,zero,2b574 <__adddf3+0x860>
   2b28c:	4984b03a 	or	r2,r9,r6
   2b290:	103ebf26 	beq	r2,zero,2ad90 <__alt_data_end+0xfffead90>
   2b294:	8985883a 	add	r2,r17,r6
   2b298:	4247883a 	add	r3,r8,r9
   2b29c:	1451803a 	cmpltu	r8,r2,r17
   2b2a0:	40d1883a 	add	r8,r8,r3
   2b2a4:	40c0202c 	andhi	r3,r8,128
   2b2a8:	1023883a 	mov	r17,r2
   2b2ac:	183f1a26 	beq	r3,zero,2af18 <__alt_data_end+0xfffeaf18>
   2b2b0:	00bfe034 	movhi	r2,65408
   2b2b4:	10bfffc4 	addi	r2,r2,-1
   2b2b8:	2021883a 	mov	r16,r4
   2b2bc:	4090703a 	and	r8,r8,r2
   2b2c0:	003eb306 	br	2ad90 <__alt_data_end+0xfffead90>
   2b2c4:	4444b03a 	or	r2,r8,r17
   2b2c8:	8000291e 	bne	r16,zero,2b370 <__adddf3+0x65c>
   2b2cc:	10004b1e 	bne	r2,zero,2b3fc <__adddf3+0x6e8>
   2b2d0:	4990b03a 	or	r8,r9,r6
   2b2d4:	40008b26 	beq	r8,zero,2b504 <__adddf3+0x7f0>
   2b2d8:	4811883a 	mov	r8,r9
   2b2dc:	3023883a 	mov	r17,r6
   2b2e0:	3825883a 	mov	r18,r7
   2b2e4:	003eaa06 	br	2ad90 <__alt_data_end+0xfffead90>
   2b2e8:	1021883a 	mov	r16,r2
   2b2ec:	0011883a 	mov	r8,zero
   2b2f0:	0005883a 	mov	r2,zero
   2b2f4:	003f0f06 	br	2af34 <__alt_data_end+0xfffeaf34>
   2b2f8:	217ff804 	addi	r5,r4,-32
   2b2fc:	00800804 	movi	r2,32
   2b300:	494ad83a 	srl	r5,r9,r5
   2b304:	20807d26 	beq	r4,r2,2b4fc <__adddf3+0x7e8>
   2b308:	00801004 	movi	r2,64
   2b30c:	1109c83a 	sub	r4,r2,r4
   2b310:	4912983a 	sll	r9,r9,r4
   2b314:	498cb03a 	or	r6,r9,r6
   2b318:	300cc03a 	cmpne	r6,r6,zero
   2b31c:	298ab03a 	or	r5,r5,r6
   2b320:	0013883a 	mov	r9,zero
   2b324:	003f1506 	br	2af7c <__alt_data_end+0xfffeaf7c>
   2b328:	0101ffc4 	movi	r4,2047
   2b32c:	113f9a1e 	bne	r2,r4,2b198 <__alt_data_end+0xfffeb198>
   2b330:	4811883a 	mov	r8,r9
   2b334:	3023883a 	mov	r17,r6
   2b338:	1021883a 	mov	r16,r2
   2b33c:	3825883a 	mov	r18,r7
   2b340:	003e9306 	br	2ad90 <__alt_data_end+0xfffead90>
   2b344:	8000161e 	bne	r16,zero,2b3a0 <__adddf3+0x68c>
   2b348:	444ab03a 	or	r5,r8,r17
   2b34c:	28005126 	beq	r5,zero,2b494 <__adddf3+0x780>
   2b350:	0108303a 	nor	r4,zero,r4
   2b354:	20004d1e 	bne	r4,zero,2b48c <__adddf3+0x778>
   2b358:	89a3883a 	add	r17,r17,r6
   2b35c:	4253883a 	add	r9,r8,r9
   2b360:	898d803a 	cmpltu	r6,r17,r6
   2b364:	3251883a 	add	r8,r6,r9
   2b368:	1021883a 	mov	r16,r2
   2b36c:	003f0806 	br	2af90 <__alt_data_end+0xfffeaf90>
   2b370:	1000301e 	bne	r2,zero,2b434 <__adddf3+0x720>
   2b374:	4984b03a 	or	r2,r9,r6
   2b378:	10007126 	beq	r2,zero,2b540 <__adddf3+0x82c>
   2b37c:	4811883a 	mov	r8,r9
   2b380:	3023883a 	mov	r17,r6
   2b384:	3825883a 	mov	r18,r7
   2b388:	0401ffc4 	movi	r16,2047
   2b38c:	003e8006 	br	2ad90 <__alt_data_end+0xfffead90>
   2b390:	4462b03a 	or	r17,r8,r17
   2b394:	8822c03a 	cmpne	r17,r17,zero
   2b398:	0007883a 	mov	r3,zero
   2b39c:	003f8b06 	br	2b1cc <__alt_data_end+0xfffeb1cc>
   2b3a0:	0141ffc4 	movi	r5,2047
   2b3a4:	11403b26 	beq	r2,r5,2b494 <__adddf3+0x780>
   2b3a8:	0109c83a 	sub	r4,zero,r4
   2b3ac:	42002034 	orhi	r8,r8,128
   2b3b0:	01400e04 	movi	r5,56
   2b3b4:	29006716 	blt	r5,r4,2b554 <__adddf3+0x840>
   2b3b8:	014007c4 	movi	r5,31
   2b3bc:	29007016 	blt	r5,r4,2b580 <__adddf3+0x86c>
   2b3c0:	01400804 	movi	r5,32
   2b3c4:	290bc83a 	sub	r5,r5,r4
   2b3c8:	4154983a 	sll	r10,r8,r5
   2b3cc:	890ed83a 	srl	r7,r17,r4
   2b3d0:	894a983a 	sll	r5,r17,r5
   2b3d4:	4108d83a 	srl	r4,r8,r4
   2b3d8:	51e2b03a 	or	r17,r10,r7
   2b3dc:	280ac03a 	cmpne	r5,r5,zero
   2b3e0:	8962b03a 	or	r17,r17,r5
   2b3e4:	89a3883a 	add	r17,r17,r6
   2b3e8:	2253883a 	add	r9,r4,r9
   2b3ec:	898d803a 	cmpltu	r6,r17,r6
   2b3f0:	3251883a 	add	r8,r6,r9
   2b3f4:	1021883a 	mov	r16,r2
   2b3f8:	003ee506 	br	2af90 <__alt_data_end+0xfffeaf90>
   2b3fc:	4984b03a 	or	r2,r9,r6
   2b400:	103e6326 	beq	r2,zero,2ad90 <__alt_data_end+0xfffead90>
   2b404:	8987c83a 	sub	r3,r17,r6
   2b408:	88c9803a 	cmpltu	r4,r17,r3
   2b40c:	4245c83a 	sub	r2,r8,r9
   2b410:	1105c83a 	sub	r2,r2,r4
   2b414:	1100202c 	andhi	r4,r2,128
   2b418:	203ebb26 	beq	r4,zero,2af08 <__alt_data_end+0xfffeaf08>
   2b41c:	3463c83a 	sub	r17,r6,r17
   2b420:	4a07c83a 	sub	r3,r9,r8
   2b424:	344d803a 	cmpltu	r6,r6,r17
   2b428:	1991c83a 	sub	r8,r3,r6
   2b42c:	3825883a 	mov	r18,r7
   2b430:	003e5706 	br	2ad90 <__alt_data_end+0xfffead90>
   2b434:	4984b03a 	or	r2,r9,r6
   2b438:	10002e26 	beq	r2,zero,2b4f4 <__adddf3+0x7e0>
   2b43c:	4004d0fa 	srli	r2,r8,3
   2b440:	8822d0fa 	srli	r17,r17,3
   2b444:	4010977a 	slli	r8,r8,29
   2b448:	10c0022c 	andhi	r3,r2,8
   2b44c:	4462b03a 	or	r17,r8,r17
   2b450:	18000826 	beq	r3,zero,2b474 <__adddf3+0x760>
   2b454:	4808d0fa 	srli	r4,r9,3
   2b458:	20c0022c 	andhi	r3,r4,8
   2b45c:	1800051e 	bne	r3,zero,2b474 <__adddf3+0x760>
   2b460:	300cd0fa 	srli	r6,r6,3
   2b464:	4806977a 	slli	r3,r9,29
   2b468:	2005883a 	mov	r2,r4
   2b46c:	3825883a 	mov	r18,r7
   2b470:	19a2b03a 	or	r17,r3,r6
   2b474:	8810d77a 	srli	r8,r17,29
   2b478:	100490fa 	slli	r2,r2,3
   2b47c:	882290fa 	slli	r17,r17,3
   2b480:	0401ffc4 	movi	r16,2047
   2b484:	4090b03a 	or	r8,r8,r2
   2b488:	003e4106 	br	2ad90 <__alt_data_end+0xfffead90>
   2b48c:	0141ffc4 	movi	r5,2047
   2b490:	117fc71e 	bne	r2,r5,2b3b0 <__alt_data_end+0xfffeb3b0>
   2b494:	4811883a 	mov	r8,r9
   2b498:	3023883a 	mov	r17,r6
   2b49c:	1021883a 	mov	r16,r2
   2b4a0:	003e3b06 	br	2ad90 <__alt_data_end+0xfffead90>
   2b4a4:	10002f26 	beq	r2,zero,2b564 <__adddf3+0x850>
   2b4a8:	4984b03a 	or	r2,r9,r6
   2b4ac:	10001126 	beq	r2,zero,2b4f4 <__adddf3+0x7e0>
   2b4b0:	4004d0fa 	srli	r2,r8,3
   2b4b4:	8822d0fa 	srli	r17,r17,3
   2b4b8:	4010977a 	slli	r8,r8,29
   2b4bc:	10c0022c 	andhi	r3,r2,8
   2b4c0:	4462b03a 	or	r17,r8,r17
   2b4c4:	183feb26 	beq	r3,zero,2b474 <__alt_data_end+0xfffeb474>
   2b4c8:	4808d0fa 	srli	r4,r9,3
   2b4cc:	20c0022c 	andhi	r3,r4,8
   2b4d0:	183fe81e 	bne	r3,zero,2b474 <__alt_data_end+0xfffeb474>
   2b4d4:	300cd0fa 	srli	r6,r6,3
   2b4d8:	4806977a 	slli	r3,r9,29
   2b4dc:	2005883a 	mov	r2,r4
   2b4e0:	19a2b03a 	or	r17,r3,r6
   2b4e4:	003fe306 	br	2b474 <__alt_data_end+0xfffeb474>
   2b4e8:	0011883a 	mov	r8,zero
   2b4ec:	0005883a 	mov	r2,zero
   2b4f0:	003e3f06 	br	2adf0 <__alt_data_end+0xfffeadf0>
   2b4f4:	0401ffc4 	movi	r16,2047
   2b4f8:	003e2506 	br	2ad90 <__alt_data_end+0xfffead90>
   2b4fc:	0013883a 	mov	r9,zero
   2b500:	003f8406 	br	2b314 <__alt_data_end+0xfffeb314>
   2b504:	0005883a 	mov	r2,zero
   2b508:	0007883a 	mov	r3,zero
   2b50c:	003e8906 	br	2af34 <__alt_data_end+0xfffeaf34>
   2b510:	197ff804 	addi	r5,r3,-32
   2b514:	01000804 	movi	r4,32
   2b518:	414ad83a 	srl	r5,r8,r5
   2b51c:	19002426 	beq	r3,r4,2b5b0 <__adddf3+0x89c>
   2b520:	01001004 	movi	r4,64
   2b524:	20c7c83a 	sub	r3,r4,r3
   2b528:	40c6983a 	sll	r3,r8,r3
   2b52c:	1c46b03a 	or	r3,r3,r17
   2b530:	1806c03a 	cmpne	r3,r3,zero
   2b534:	28e2b03a 	or	r17,r5,r3
   2b538:	0007883a 	mov	r3,zero
   2b53c:	003f2306 	br	2b1cc <__alt_data_end+0xfffeb1cc>
   2b540:	0007883a 	mov	r3,zero
   2b544:	5811883a 	mov	r8,r11
   2b548:	00bfffc4 	movi	r2,-1
   2b54c:	0401ffc4 	movi	r16,2047
   2b550:	003e7806 	br	2af34 <__alt_data_end+0xfffeaf34>
   2b554:	4462b03a 	or	r17,r8,r17
   2b558:	8822c03a 	cmpne	r17,r17,zero
   2b55c:	0009883a 	mov	r4,zero
   2b560:	003fa006 	br	2b3e4 <__alt_data_end+0xfffeb3e4>
   2b564:	4811883a 	mov	r8,r9
   2b568:	3023883a 	mov	r17,r6
   2b56c:	0401ffc4 	movi	r16,2047
   2b570:	003e0706 	br	2ad90 <__alt_data_end+0xfffead90>
   2b574:	4811883a 	mov	r8,r9
   2b578:	3023883a 	mov	r17,r6
   2b57c:	003e0406 	br	2ad90 <__alt_data_end+0xfffead90>
   2b580:	21fff804 	addi	r7,r4,-32
   2b584:	01400804 	movi	r5,32
   2b588:	41ced83a 	srl	r7,r8,r7
   2b58c:	21400a26 	beq	r4,r5,2b5b8 <__adddf3+0x8a4>
   2b590:	01401004 	movi	r5,64
   2b594:	2909c83a 	sub	r4,r5,r4
   2b598:	4108983a 	sll	r4,r8,r4
   2b59c:	2448b03a 	or	r4,r4,r17
   2b5a0:	2008c03a 	cmpne	r4,r4,zero
   2b5a4:	3922b03a 	or	r17,r7,r4
   2b5a8:	0009883a 	mov	r4,zero
   2b5ac:	003f8d06 	br	2b3e4 <__alt_data_end+0xfffeb3e4>
   2b5b0:	0007883a 	mov	r3,zero
   2b5b4:	003fdd06 	br	2b52c <__alt_data_end+0xfffeb52c>
   2b5b8:	0009883a 	mov	r4,zero
   2b5bc:	003ff706 	br	2b59c <__alt_data_end+0xfffeb59c>

0002b5c0 <__divdf3>:
   2b5c0:	defff204 	addi	sp,sp,-56
   2b5c4:	dd400915 	stw	r21,36(sp)
   2b5c8:	282ad53a 	srli	r21,r5,20
   2b5cc:	dd000815 	stw	r20,32(sp)
   2b5d0:	2828d7fa 	srli	r20,r5,31
   2b5d4:	dc000415 	stw	r16,16(sp)
   2b5d8:	04000434 	movhi	r16,16
   2b5dc:	df000c15 	stw	fp,48(sp)
   2b5e0:	843fffc4 	addi	r16,r16,-1
   2b5e4:	dfc00d15 	stw	ra,52(sp)
   2b5e8:	ddc00b15 	stw	r23,44(sp)
   2b5ec:	dd800a15 	stw	r22,40(sp)
   2b5f0:	dcc00715 	stw	r19,28(sp)
   2b5f4:	dc800615 	stw	r18,24(sp)
   2b5f8:	dc400515 	stw	r17,20(sp)
   2b5fc:	ad41ffcc 	andi	r21,r21,2047
   2b600:	2c20703a 	and	r16,r5,r16
   2b604:	a7003fcc 	andi	fp,r20,255
   2b608:	a8006126 	beq	r21,zero,2b790 <__divdf3+0x1d0>
   2b60c:	0081ffc4 	movi	r2,2047
   2b610:	2025883a 	mov	r18,r4
   2b614:	a8803726 	beq	r21,r2,2b6f4 <__divdf3+0x134>
   2b618:	80800434 	orhi	r2,r16,16
   2b61c:	100490fa 	slli	r2,r2,3
   2b620:	2020d77a 	srli	r16,r4,29
   2b624:	202490fa 	slli	r18,r4,3
   2b628:	ad7f0044 	addi	r21,r21,-1023
   2b62c:	80a0b03a 	or	r16,r16,r2
   2b630:	0027883a 	mov	r19,zero
   2b634:	0013883a 	mov	r9,zero
   2b638:	3804d53a 	srli	r2,r7,20
   2b63c:	382cd7fa 	srli	r22,r7,31
   2b640:	04400434 	movhi	r17,16
   2b644:	8c7fffc4 	addi	r17,r17,-1
   2b648:	1081ffcc 	andi	r2,r2,2047
   2b64c:	3011883a 	mov	r8,r6
   2b650:	3c62703a 	and	r17,r7,r17
   2b654:	b5c03fcc 	andi	r23,r22,255
   2b658:	10006c26 	beq	r2,zero,2b80c <__divdf3+0x24c>
   2b65c:	00c1ffc4 	movi	r3,2047
   2b660:	10c06426 	beq	r2,r3,2b7f4 <__divdf3+0x234>
   2b664:	88c00434 	orhi	r3,r17,16
   2b668:	180690fa 	slli	r3,r3,3
   2b66c:	3022d77a 	srli	r17,r6,29
   2b670:	301090fa 	slli	r8,r6,3
   2b674:	10bf0044 	addi	r2,r2,-1023
   2b678:	88e2b03a 	or	r17,r17,r3
   2b67c:	000f883a 	mov	r7,zero
   2b680:	a58cf03a 	xor	r6,r20,r22
   2b684:	3cc8b03a 	or	r4,r7,r19
   2b688:	a8abc83a 	sub	r21,r21,r2
   2b68c:	008003c4 	movi	r2,15
   2b690:	3007883a 	mov	r3,r6
   2b694:	34c03fcc 	andi	r19,r6,255
   2b698:	11009036 	bltu	r2,r4,2b8dc <__divdf3+0x31c>
   2b69c:	200890ba 	slli	r4,r4,2
   2b6a0:	008000f4 	movhi	r2,3
   2b6a4:	10adad04 	addi	r2,r2,-18764
   2b6a8:	2089883a 	add	r4,r4,r2
   2b6ac:	20800017 	ldw	r2,0(r4)
   2b6b0:	1000683a 	jmp	r2
   2b6b4:	0002b8dc 	xori	zero,zero,2787
   2b6b8:	0002b72c 	andhi	zero,zero,2780
   2b6bc:	0002b8cc 	andi	zero,zero,2787
   2b6c0:	0002b720 	cmpeqi	zero,zero,2780
   2b6c4:	0002b8cc 	andi	zero,zero,2787
   2b6c8:	0002b8a0 	cmpeqi	zero,zero,2786
   2b6cc:	0002b8cc 	andi	zero,zero,2787
   2b6d0:	0002b720 	cmpeqi	zero,zero,2780
   2b6d4:	0002b72c 	andhi	zero,zero,2780
   2b6d8:	0002b72c 	andhi	zero,zero,2780
   2b6dc:	0002b8a0 	cmpeqi	zero,zero,2786
   2b6e0:	0002b720 	cmpeqi	zero,zero,2780
   2b6e4:	0002b710 	cmplti	zero,zero,2780
   2b6e8:	0002b710 	cmplti	zero,zero,2780
   2b6ec:	0002b710 	cmplti	zero,zero,2780
   2b6f0:	0002bbc0 	call	2bbc <__alt_mem_onchip_memory2_0-0x1d444>
   2b6f4:	2404b03a 	or	r2,r4,r16
   2b6f8:	1000661e 	bne	r2,zero,2b894 <__divdf3+0x2d4>
   2b6fc:	04c00204 	movi	r19,8
   2b700:	0021883a 	mov	r16,zero
   2b704:	0025883a 	mov	r18,zero
   2b708:	02400084 	movi	r9,2
   2b70c:	003fca06 	br	2b638 <__alt_data_end+0xfffeb638>
   2b710:	8023883a 	mov	r17,r16
   2b714:	9011883a 	mov	r8,r18
   2b718:	e02f883a 	mov	r23,fp
   2b71c:	480f883a 	mov	r7,r9
   2b720:	00800084 	movi	r2,2
   2b724:	3881311e 	bne	r7,r2,2bbec <__divdf3+0x62c>
   2b728:	b827883a 	mov	r19,r23
   2b72c:	98c0004c 	andi	r3,r19,1
   2b730:	0081ffc4 	movi	r2,2047
   2b734:	000b883a 	mov	r5,zero
   2b738:	0025883a 	mov	r18,zero
   2b73c:	1004953a 	slli	r2,r2,20
   2b740:	18c03fcc 	andi	r3,r3,255
   2b744:	04400434 	movhi	r17,16
   2b748:	8c7fffc4 	addi	r17,r17,-1
   2b74c:	180697fa 	slli	r3,r3,31
   2b750:	2c4a703a 	and	r5,r5,r17
   2b754:	288ab03a 	or	r5,r5,r2
   2b758:	28c6b03a 	or	r3,r5,r3
   2b75c:	9005883a 	mov	r2,r18
   2b760:	dfc00d17 	ldw	ra,52(sp)
   2b764:	df000c17 	ldw	fp,48(sp)
   2b768:	ddc00b17 	ldw	r23,44(sp)
   2b76c:	dd800a17 	ldw	r22,40(sp)
   2b770:	dd400917 	ldw	r21,36(sp)
   2b774:	dd000817 	ldw	r20,32(sp)
   2b778:	dcc00717 	ldw	r19,28(sp)
   2b77c:	dc800617 	ldw	r18,24(sp)
   2b780:	dc400517 	ldw	r17,20(sp)
   2b784:	dc000417 	ldw	r16,16(sp)
   2b788:	dec00e04 	addi	sp,sp,56
   2b78c:	f800283a 	ret
   2b790:	2404b03a 	or	r2,r4,r16
   2b794:	2027883a 	mov	r19,r4
   2b798:	10003926 	beq	r2,zero,2b880 <__divdf3+0x2c0>
   2b79c:	80012e26 	beq	r16,zero,2bc58 <__divdf3+0x698>
   2b7a0:	8009883a 	mov	r4,r16
   2b7a4:	d9800315 	stw	r6,12(sp)
   2b7a8:	d9c00215 	stw	r7,8(sp)
   2b7ac:	002d3180 	call	2d318 <__clzsi2>
   2b7b0:	d9800317 	ldw	r6,12(sp)
   2b7b4:	d9c00217 	ldw	r7,8(sp)
   2b7b8:	113ffd44 	addi	r4,r2,-11
   2b7bc:	00c00704 	movi	r3,28
   2b7c0:	19012116 	blt	r3,r4,2bc48 <__divdf3+0x688>
   2b7c4:	00c00744 	movi	r3,29
   2b7c8:	147ffe04 	addi	r17,r2,-8
   2b7cc:	1907c83a 	sub	r3,r3,r4
   2b7d0:	8460983a 	sll	r16,r16,r17
   2b7d4:	98c6d83a 	srl	r3,r19,r3
   2b7d8:	9c64983a 	sll	r18,r19,r17
   2b7dc:	1c20b03a 	or	r16,r3,r16
   2b7e0:	1080fcc4 	addi	r2,r2,1011
   2b7e4:	00abc83a 	sub	r21,zero,r2
   2b7e8:	0027883a 	mov	r19,zero
   2b7ec:	0013883a 	mov	r9,zero
   2b7f0:	003f9106 	br	2b638 <__alt_data_end+0xfffeb638>
   2b7f4:	3446b03a 	or	r3,r6,r17
   2b7f8:	18001f1e 	bne	r3,zero,2b878 <__divdf3+0x2b8>
   2b7fc:	0023883a 	mov	r17,zero
   2b800:	0011883a 	mov	r8,zero
   2b804:	01c00084 	movi	r7,2
   2b808:	003f9d06 	br	2b680 <__alt_data_end+0xfffeb680>
   2b80c:	3446b03a 	or	r3,r6,r17
   2b810:	18001526 	beq	r3,zero,2b868 <__divdf3+0x2a8>
   2b814:	88011b26 	beq	r17,zero,2bc84 <__divdf3+0x6c4>
   2b818:	8809883a 	mov	r4,r17
   2b81c:	d9800315 	stw	r6,12(sp)
   2b820:	da400115 	stw	r9,4(sp)
   2b824:	002d3180 	call	2d318 <__clzsi2>
   2b828:	d9800317 	ldw	r6,12(sp)
   2b82c:	da400117 	ldw	r9,4(sp)
   2b830:	113ffd44 	addi	r4,r2,-11
   2b834:	00c00704 	movi	r3,28
   2b838:	19010e16 	blt	r3,r4,2bc74 <__divdf3+0x6b4>
   2b83c:	00c00744 	movi	r3,29
   2b840:	123ffe04 	addi	r8,r2,-8
   2b844:	1907c83a 	sub	r3,r3,r4
   2b848:	8a22983a 	sll	r17,r17,r8
   2b84c:	30c6d83a 	srl	r3,r6,r3
   2b850:	3210983a 	sll	r8,r6,r8
   2b854:	1c62b03a 	or	r17,r3,r17
   2b858:	1080fcc4 	addi	r2,r2,1011
   2b85c:	0085c83a 	sub	r2,zero,r2
   2b860:	000f883a 	mov	r7,zero
   2b864:	003f8606 	br	2b680 <__alt_data_end+0xfffeb680>
   2b868:	0023883a 	mov	r17,zero
   2b86c:	0011883a 	mov	r8,zero
   2b870:	01c00044 	movi	r7,1
   2b874:	003f8206 	br	2b680 <__alt_data_end+0xfffeb680>
   2b878:	01c000c4 	movi	r7,3
   2b87c:	003f8006 	br	2b680 <__alt_data_end+0xfffeb680>
   2b880:	04c00104 	movi	r19,4
   2b884:	0021883a 	mov	r16,zero
   2b888:	0025883a 	mov	r18,zero
   2b88c:	02400044 	movi	r9,1
   2b890:	003f6906 	br	2b638 <__alt_data_end+0xfffeb638>
   2b894:	04c00304 	movi	r19,12
   2b898:	024000c4 	movi	r9,3
   2b89c:	003f6606 	br	2b638 <__alt_data_end+0xfffeb638>
   2b8a0:	01400434 	movhi	r5,16
   2b8a4:	0007883a 	mov	r3,zero
   2b8a8:	297fffc4 	addi	r5,r5,-1
   2b8ac:	04bfffc4 	movi	r18,-1
   2b8b0:	0081ffc4 	movi	r2,2047
   2b8b4:	003fa106 	br	2b73c <__alt_data_end+0xfffeb73c>
   2b8b8:	00c00044 	movi	r3,1
   2b8bc:	1887c83a 	sub	r3,r3,r2
   2b8c0:	01000e04 	movi	r4,56
   2b8c4:	20c1210e 	bge	r4,r3,2bd4c <__divdf3+0x78c>
   2b8c8:	98c0004c 	andi	r3,r19,1
   2b8cc:	0005883a 	mov	r2,zero
   2b8d0:	000b883a 	mov	r5,zero
   2b8d4:	0025883a 	mov	r18,zero
   2b8d8:	003f9806 	br	2b73c <__alt_data_end+0xfffeb73c>
   2b8dc:	8c00fd36 	bltu	r17,r16,2bcd4 <__divdf3+0x714>
   2b8e0:	8440fb26 	beq	r16,r17,2bcd0 <__divdf3+0x710>
   2b8e4:	8007883a 	mov	r3,r16
   2b8e8:	ad7fffc4 	addi	r21,r21,-1
   2b8ec:	0021883a 	mov	r16,zero
   2b8f0:	4004d63a 	srli	r2,r8,24
   2b8f4:	8822923a 	slli	r17,r17,8
   2b8f8:	1809883a 	mov	r4,r3
   2b8fc:	402c923a 	slli	r22,r8,8
   2b900:	88b8b03a 	or	fp,r17,r2
   2b904:	e028d43a 	srli	r20,fp,16
   2b908:	d8c00015 	stw	r3,0(sp)
   2b90c:	e5ffffcc 	andi	r23,fp,65535
   2b910:	a00b883a 	mov	r5,r20
   2b914:	0020c280 	call	20c28 <__udivsi3>
   2b918:	d8c00017 	ldw	r3,0(sp)
   2b91c:	a00b883a 	mov	r5,r20
   2b920:	d8800315 	stw	r2,12(sp)
   2b924:	1809883a 	mov	r4,r3
   2b928:	0020c8c0 	call	20c8c <__umodsi3>
   2b92c:	d9800317 	ldw	r6,12(sp)
   2b930:	1006943a 	slli	r3,r2,16
   2b934:	9004d43a 	srli	r2,r18,16
   2b938:	b9a3383a 	mul	r17,r23,r6
   2b93c:	10c4b03a 	or	r2,r2,r3
   2b940:	1440062e 	bgeu	r2,r17,2b95c <__divdf3+0x39c>
   2b944:	1705883a 	add	r2,r2,fp
   2b948:	30ffffc4 	addi	r3,r6,-1
   2b94c:	1700ee36 	bltu	r2,fp,2bd08 <__divdf3+0x748>
   2b950:	1440ed2e 	bgeu	r2,r17,2bd08 <__divdf3+0x748>
   2b954:	31bfff84 	addi	r6,r6,-2
   2b958:	1705883a 	add	r2,r2,fp
   2b95c:	1463c83a 	sub	r17,r2,r17
   2b960:	a00b883a 	mov	r5,r20
   2b964:	8809883a 	mov	r4,r17
   2b968:	d9800315 	stw	r6,12(sp)
   2b96c:	0020c280 	call	20c28 <__udivsi3>
   2b970:	a00b883a 	mov	r5,r20
   2b974:	8809883a 	mov	r4,r17
   2b978:	d8800215 	stw	r2,8(sp)
   2b97c:	0020c8c0 	call	20c8c <__umodsi3>
   2b980:	d9c00217 	ldw	r7,8(sp)
   2b984:	1004943a 	slli	r2,r2,16
   2b988:	94bfffcc 	andi	r18,r18,65535
   2b98c:	b9d1383a 	mul	r8,r23,r7
   2b990:	90a4b03a 	or	r18,r18,r2
   2b994:	d9800317 	ldw	r6,12(sp)
   2b998:	9200062e 	bgeu	r18,r8,2b9b4 <__divdf3+0x3f4>
   2b99c:	9725883a 	add	r18,r18,fp
   2b9a0:	38bfffc4 	addi	r2,r7,-1
   2b9a4:	9700d636 	bltu	r18,fp,2bd00 <__divdf3+0x740>
   2b9a8:	9200d52e 	bgeu	r18,r8,2bd00 <__divdf3+0x740>
   2b9ac:	39ffff84 	addi	r7,r7,-2
   2b9b0:	9725883a 	add	r18,r18,fp
   2b9b4:	3004943a 	slli	r2,r6,16
   2b9b8:	b012d43a 	srli	r9,r22,16
   2b9bc:	b1bfffcc 	andi	r6,r22,65535
   2b9c0:	11e2b03a 	or	r17,r2,r7
   2b9c4:	8806d43a 	srli	r3,r17,16
   2b9c8:	893fffcc 	andi	r4,r17,65535
   2b9cc:	218b383a 	mul	r5,r4,r6
   2b9d0:	30c5383a 	mul	r2,r6,r3
   2b9d4:	2249383a 	mul	r4,r4,r9
   2b9d8:	280ed43a 	srli	r7,r5,16
   2b9dc:	9225c83a 	sub	r18,r18,r8
   2b9e0:	2089883a 	add	r4,r4,r2
   2b9e4:	3909883a 	add	r4,r7,r4
   2b9e8:	1a47383a 	mul	r3,r3,r9
   2b9ec:	2080022e 	bgeu	r4,r2,2b9f8 <__divdf3+0x438>
   2b9f0:	00800074 	movhi	r2,1
   2b9f4:	1887883a 	add	r3,r3,r2
   2b9f8:	2004d43a 	srli	r2,r4,16
   2b9fc:	2008943a 	slli	r4,r4,16
   2ba00:	297fffcc 	andi	r5,r5,65535
   2ba04:	10c7883a 	add	r3,r2,r3
   2ba08:	2149883a 	add	r4,r4,r5
   2ba0c:	90c0a536 	bltu	r18,r3,2bca4 <__divdf3+0x6e4>
   2ba10:	90c0bf26 	beq	r18,r3,2bd10 <__divdf3+0x750>
   2ba14:	90c7c83a 	sub	r3,r18,r3
   2ba18:	810fc83a 	sub	r7,r16,r4
   2ba1c:	81e5803a 	cmpltu	r18,r16,r7
   2ba20:	1ca5c83a 	sub	r18,r3,r18
   2ba24:	e480c126 	beq	fp,r18,2bd2c <__divdf3+0x76c>
   2ba28:	a00b883a 	mov	r5,r20
   2ba2c:	9009883a 	mov	r4,r18
   2ba30:	d9800315 	stw	r6,12(sp)
   2ba34:	d9c00215 	stw	r7,8(sp)
   2ba38:	da400115 	stw	r9,4(sp)
   2ba3c:	0020c280 	call	20c28 <__udivsi3>
   2ba40:	a00b883a 	mov	r5,r20
   2ba44:	9009883a 	mov	r4,r18
   2ba48:	d8800015 	stw	r2,0(sp)
   2ba4c:	0020c8c0 	call	20c8c <__umodsi3>
   2ba50:	d9c00217 	ldw	r7,8(sp)
   2ba54:	da000017 	ldw	r8,0(sp)
   2ba58:	1006943a 	slli	r3,r2,16
   2ba5c:	3804d43a 	srli	r2,r7,16
   2ba60:	ba21383a 	mul	r16,r23,r8
   2ba64:	d9800317 	ldw	r6,12(sp)
   2ba68:	10c4b03a 	or	r2,r2,r3
   2ba6c:	da400117 	ldw	r9,4(sp)
   2ba70:	1400062e 	bgeu	r2,r16,2ba8c <__divdf3+0x4cc>
   2ba74:	1705883a 	add	r2,r2,fp
   2ba78:	40ffffc4 	addi	r3,r8,-1
   2ba7c:	1700ad36 	bltu	r2,fp,2bd34 <__divdf3+0x774>
   2ba80:	1400ac2e 	bgeu	r2,r16,2bd34 <__divdf3+0x774>
   2ba84:	423fff84 	addi	r8,r8,-2
   2ba88:	1705883a 	add	r2,r2,fp
   2ba8c:	1421c83a 	sub	r16,r2,r16
   2ba90:	a00b883a 	mov	r5,r20
   2ba94:	8009883a 	mov	r4,r16
   2ba98:	d9800315 	stw	r6,12(sp)
   2ba9c:	d9c00215 	stw	r7,8(sp)
   2baa0:	da000015 	stw	r8,0(sp)
   2baa4:	da400115 	stw	r9,4(sp)
   2baa8:	0020c280 	call	20c28 <__udivsi3>
   2baac:	8009883a 	mov	r4,r16
   2bab0:	a00b883a 	mov	r5,r20
   2bab4:	1025883a 	mov	r18,r2
   2bab8:	0020c8c0 	call	20c8c <__umodsi3>
   2babc:	d9c00217 	ldw	r7,8(sp)
   2bac0:	1004943a 	slli	r2,r2,16
   2bac4:	bcaf383a 	mul	r23,r23,r18
   2bac8:	393fffcc 	andi	r4,r7,65535
   2bacc:	2088b03a 	or	r4,r4,r2
   2bad0:	d9800317 	ldw	r6,12(sp)
   2bad4:	da000017 	ldw	r8,0(sp)
   2bad8:	da400117 	ldw	r9,4(sp)
   2badc:	25c0062e 	bgeu	r4,r23,2baf8 <__divdf3+0x538>
   2bae0:	2709883a 	add	r4,r4,fp
   2bae4:	90bfffc4 	addi	r2,r18,-1
   2bae8:	27009436 	bltu	r4,fp,2bd3c <__divdf3+0x77c>
   2baec:	25c0932e 	bgeu	r4,r23,2bd3c <__divdf3+0x77c>
   2baf0:	94bfff84 	addi	r18,r18,-2
   2baf4:	2709883a 	add	r4,r4,fp
   2baf8:	4004943a 	slli	r2,r8,16
   2bafc:	25efc83a 	sub	r23,r4,r23
   2bb00:	1490b03a 	or	r8,r2,r18
   2bb04:	4008d43a 	srli	r4,r8,16
   2bb08:	40ffffcc 	andi	r3,r8,65535
   2bb0c:	30c5383a 	mul	r2,r6,r3
   2bb10:	1a47383a 	mul	r3,r3,r9
   2bb14:	310d383a 	mul	r6,r6,r4
   2bb18:	100ad43a 	srli	r5,r2,16
   2bb1c:	4913383a 	mul	r9,r9,r4
   2bb20:	1987883a 	add	r3,r3,r6
   2bb24:	28c7883a 	add	r3,r5,r3
   2bb28:	1980022e 	bgeu	r3,r6,2bb34 <__divdf3+0x574>
   2bb2c:	01000074 	movhi	r4,1
   2bb30:	4913883a 	add	r9,r9,r4
   2bb34:	1808d43a 	srli	r4,r3,16
   2bb38:	1806943a 	slli	r3,r3,16
   2bb3c:	10bfffcc 	andi	r2,r2,65535
   2bb40:	2253883a 	add	r9,r4,r9
   2bb44:	1887883a 	add	r3,r3,r2
   2bb48:	ba403836 	bltu	r23,r9,2bc2c <__divdf3+0x66c>
   2bb4c:	ba403626 	beq	r23,r9,2bc28 <__divdf3+0x668>
   2bb50:	42000054 	ori	r8,r8,1
   2bb54:	a880ffc4 	addi	r2,r21,1023
   2bb58:	00bf570e 	bge	zero,r2,2b8b8 <__alt_data_end+0xfffeb8b8>
   2bb5c:	40c001cc 	andi	r3,r8,7
   2bb60:	18000726 	beq	r3,zero,2bb80 <__divdf3+0x5c0>
   2bb64:	40c003cc 	andi	r3,r8,15
   2bb68:	01000104 	movi	r4,4
   2bb6c:	19000426 	beq	r3,r4,2bb80 <__divdf3+0x5c0>
   2bb70:	4107883a 	add	r3,r8,r4
   2bb74:	1a11803a 	cmpltu	r8,r3,r8
   2bb78:	8a23883a 	add	r17,r17,r8
   2bb7c:	1811883a 	mov	r8,r3
   2bb80:	88c0402c 	andhi	r3,r17,256
   2bb84:	18000426 	beq	r3,zero,2bb98 <__divdf3+0x5d8>
   2bb88:	00ffc034 	movhi	r3,65280
   2bb8c:	18ffffc4 	addi	r3,r3,-1
   2bb90:	a8810004 	addi	r2,r21,1024
   2bb94:	88e2703a 	and	r17,r17,r3
   2bb98:	00c1ff84 	movi	r3,2046
   2bb9c:	18bee316 	blt	r3,r2,2b72c <__alt_data_end+0xfffeb72c>
   2bba0:	8824977a 	slli	r18,r17,29
   2bba4:	4010d0fa 	srli	r8,r8,3
   2bba8:	8822927a 	slli	r17,r17,9
   2bbac:	1081ffcc 	andi	r2,r2,2047
   2bbb0:	9224b03a 	or	r18,r18,r8
   2bbb4:	880ad33a 	srli	r5,r17,12
   2bbb8:	98c0004c 	andi	r3,r19,1
   2bbbc:	003edf06 	br	2b73c <__alt_data_end+0xfffeb73c>
   2bbc0:	8080022c 	andhi	r2,r16,8
   2bbc4:	10001226 	beq	r2,zero,2bc10 <__divdf3+0x650>
   2bbc8:	8880022c 	andhi	r2,r17,8
   2bbcc:	1000101e 	bne	r2,zero,2bc10 <__divdf3+0x650>
   2bbd0:	00800434 	movhi	r2,16
   2bbd4:	89400234 	orhi	r5,r17,8
   2bbd8:	10bfffc4 	addi	r2,r2,-1
   2bbdc:	b007883a 	mov	r3,r22
   2bbe0:	288a703a 	and	r5,r5,r2
   2bbe4:	4025883a 	mov	r18,r8
   2bbe8:	003f3106 	br	2b8b0 <__alt_data_end+0xfffeb8b0>
   2bbec:	008000c4 	movi	r2,3
   2bbf0:	3880a626 	beq	r7,r2,2be8c <__divdf3+0x8cc>
   2bbf4:	00800044 	movi	r2,1
   2bbf8:	3880521e 	bne	r7,r2,2bd44 <__divdf3+0x784>
   2bbfc:	b807883a 	mov	r3,r23
   2bc00:	0005883a 	mov	r2,zero
   2bc04:	000b883a 	mov	r5,zero
   2bc08:	0025883a 	mov	r18,zero
   2bc0c:	003ecb06 	br	2b73c <__alt_data_end+0xfffeb73c>
   2bc10:	00800434 	movhi	r2,16
   2bc14:	81400234 	orhi	r5,r16,8
   2bc18:	10bfffc4 	addi	r2,r2,-1
   2bc1c:	a007883a 	mov	r3,r20
   2bc20:	288a703a 	and	r5,r5,r2
   2bc24:	003f2206 	br	2b8b0 <__alt_data_end+0xfffeb8b0>
   2bc28:	183fca26 	beq	r3,zero,2bb54 <__alt_data_end+0xfffebb54>
   2bc2c:	e5ef883a 	add	r23,fp,r23
   2bc30:	40bfffc4 	addi	r2,r8,-1
   2bc34:	bf00392e 	bgeu	r23,fp,2bd1c <__divdf3+0x75c>
   2bc38:	1011883a 	mov	r8,r2
   2bc3c:	ba7fc41e 	bne	r23,r9,2bb50 <__alt_data_end+0xfffebb50>
   2bc40:	b0ffc31e 	bne	r22,r3,2bb50 <__alt_data_end+0xfffebb50>
   2bc44:	003fc306 	br	2bb54 <__alt_data_end+0xfffebb54>
   2bc48:	143ff604 	addi	r16,r2,-40
   2bc4c:	9c20983a 	sll	r16,r19,r16
   2bc50:	0025883a 	mov	r18,zero
   2bc54:	003ee206 	br	2b7e0 <__alt_data_end+0xfffeb7e0>
   2bc58:	d9800315 	stw	r6,12(sp)
   2bc5c:	d9c00215 	stw	r7,8(sp)
   2bc60:	002d3180 	call	2d318 <__clzsi2>
   2bc64:	10800804 	addi	r2,r2,32
   2bc68:	d9c00217 	ldw	r7,8(sp)
   2bc6c:	d9800317 	ldw	r6,12(sp)
   2bc70:	003ed106 	br	2b7b8 <__alt_data_end+0xfffeb7b8>
   2bc74:	147ff604 	addi	r17,r2,-40
   2bc78:	3462983a 	sll	r17,r6,r17
   2bc7c:	0011883a 	mov	r8,zero
   2bc80:	003ef506 	br	2b858 <__alt_data_end+0xfffeb858>
   2bc84:	3009883a 	mov	r4,r6
   2bc88:	d9800315 	stw	r6,12(sp)
   2bc8c:	da400115 	stw	r9,4(sp)
   2bc90:	002d3180 	call	2d318 <__clzsi2>
   2bc94:	10800804 	addi	r2,r2,32
   2bc98:	da400117 	ldw	r9,4(sp)
   2bc9c:	d9800317 	ldw	r6,12(sp)
   2bca0:	003ee306 	br	2b830 <__alt_data_end+0xfffeb830>
   2bca4:	85a1883a 	add	r16,r16,r22
   2bca8:	8585803a 	cmpltu	r2,r16,r22
   2bcac:	1705883a 	add	r2,r2,fp
   2bcb0:	14a5883a 	add	r18,r2,r18
   2bcb4:	88bfffc4 	addi	r2,r17,-1
   2bcb8:	e4800c2e 	bgeu	fp,r18,2bcec <__divdf3+0x72c>
   2bcbc:	90c03e36 	bltu	r18,r3,2bdb8 <__divdf3+0x7f8>
   2bcc0:	1c806926 	beq	r3,r18,2be68 <__divdf3+0x8a8>
   2bcc4:	90c7c83a 	sub	r3,r18,r3
   2bcc8:	1023883a 	mov	r17,r2
   2bccc:	003f5206 	br	2ba18 <__alt_data_end+0xfffeba18>
   2bcd0:	923f0436 	bltu	r18,r8,2b8e4 <__alt_data_end+0xfffeb8e4>
   2bcd4:	800897fa 	slli	r4,r16,31
   2bcd8:	9004d07a 	srli	r2,r18,1
   2bcdc:	8006d07a 	srli	r3,r16,1
   2bce0:	902097fa 	slli	r16,r18,31
   2bce4:	20a4b03a 	or	r18,r4,r2
   2bce8:	003f0106 	br	2b8f0 <__alt_data_end+0xfffeb8f0>
   2bcec:	e4bff51e 	bne	fp,r18,2bcc4 <__alt_data_end+0xfffebcc4>
   2bcf0:	85bff22e 	bgeu	r16,r22,2bcbc <__alt_data_end+0xfffebcbc>
   2bcf4:	e0c7c83a 	sub	r3,fp,r3
   2bcf8:	1023883a 	mov	r17,r2
   2bcfc:	003f4606 	br	2ba18 <__alt_data_end+0xfffeba18>
   2bd00:	100f883a 	mov	r7,r2
   2bd04:	003f2b06 	br	2b9b4 <__alt_data_end+0xfffeb9b4>
   2bd08:	180d883a 	mov	r6,r3
   2bd0c:	003f1306 	br	2b95c <__alt_data_end+0xfffeb95c>
   2bd10:	813fe436 	bltu	r16,r4,2bca4 <__alt_data_end+0xfffebca4>
   2bd14:	0007883a 	mov	r3,zero
   2bd18:	003f3f06 	br	2ba18 <__alt_data_end+0xfffeba18>
   2bd1c:	ba402c36 	bltu	r23,r9,2bdd0 <__divdf3+0x810>
   2bd20:	4dc05426 	beq	r9,r23,2be74 <__divdf3+0x8b4>
   2bd24:	1011883a 	mov	r8,r2
   2bd28:	003f8906 	br	2bb50 <__alt_data_end+0xfffebb50>
   2bd2c:	023fffc4 	movi	r8,-1
   2bd30:	003f8806 	br	2bb54 <__alt_data_end+0xfffebb54>
   2bd34:	1811883a 	mov	r8,r3
   2bd38:	003f5406 	br	2ba8c <__alt_data_end+0xfffeba8c>
   2bd3c:	1025883a 	mov	r18,r2
   2bd40:	003f6d06 	br	2baf8 <__alt_data_end+0xfffebaf8>
   2bd44:	b827883a 	mov	r19,r23
   2bd48:	003f8206 	br	2bb54 <__alt_data_end+0xfffebb54>
   2bd4c:	010007c4 	movi	r4,31
   2bd50:	20c02616 	blt	r4,r3,2bdec <__divdf3+0x82c>
   2bd54:	00800804 	movi	r2,32
   2bd58:	10c5c83a 	sub	r2,r2,r3
   2bd5c:	888a983a 	sll	r5,r17,r2
   2bd60:	40c8d83a 	srl	r4,r8,r3
   2bd64:	4084983a 	sll	r2,r8,r2
   2bd68:	88e2d83a 	srl	r17,r17,r3
   2bd6c:	2906b03a 	or	r3,r5,r4
   2bd70:	1004c03a 	cmpne	r2,r2,zero
   2bd74:	1886b03a 	or	r3,r3,r2
   2bd78:	188001cc 	andi	r2,r3,7
   2bd7c:	10000726 	beq	r2,zero,2bd9c <__divdf3+0x7dc>
   2bd80:	188003cc 	andi	r2,r3,15
   2bd84:	01000104 	movi	r4,4
   2bd88:	11000426 	beq	r2,r4,2bd9c <__divdf3+0x7dc>
   2bd8c:	1805883a 	mov	r2,r3
   2bd90:	10c00104 	addi	r3,r2,4
   2bd94:	1885803a 	cmpltu	r2,r3,r2
   2bd98:	88a3883a 	add	r17,r17,r2
   2bd9c:	8880202c 	andhi	r2,r17,128
   2bda0:	10002726 	beq	r2,zero,2be40 <__divdf3+0x880>
   2bda4:	98c0004c 	andi	r3,r19,1
   2bda8:	00800044 	movi	r2,1
   2bdac:	000b883a 	mov	r5,zero
   2bdb0:	0025883a 	mov	r18,zero
   2bdb4:	003e6106 	br	2b73c <__alt_data_end+0xfffeb73c>
   2bdb8:	85a1883a 	add	r16,r16,r22
   2bdbc:	8585803a 	cmpltu	r2,r16,r22
   2bdc0:	1705883a 	add	r2,r2,fp
   2bdc4:	14a5883a 	add	r18,r2,r18
   2bdc8:	8c7fff84 	addi	r17,r17,-2
   2bdcc:	003f1106 	br	2ba14 <__alt_data_end+0xfffeba14>
   2bdd0:	b589883a 	add	r4,r22,r22
   2bdd4:	25ad803a 	cmpltu	r22,r4,r22
   2bdd8:	b739883a 	add	fp,r22,fp
   2bddc:	40bfff84 	addi	r2,r8,-2
   2bde0:	bf2f883a 	add	r23,r23,fp
   2bde4:	202d883a 	mov	r22,r4
   2bde8:	003f9306 	br	2bc38 <__alt_data_end+0xfffebc38>
   2bdec:	013ff844 	movi	r4,-31
   2bdf0:	2085c83a 	sub	r2,r4,r2
   2bdf4:	8888d83a 	srl	r4,r17,r2
   2bdf8:	00800804 	movi	r2,32
   2bdfc:	18802126 	beq	r3,r2,2be84 <__divdf3+0x8c4>
   2be00:	00801004 	movi	r2,64
   2be04:	10c5c83a 	sub	r2,r2,r3
   2be08:	8884983a 	sll	r2,r17,r2
   2be0c:	1204b03a 	or	r2,r2,r8
   2be10:	1004c03a 	cmpne	r2,r2,zero
   2be14:	2084b03a 	or	r2,r4,r2
   2be18:	144001cc 	andi	r17,r2,7
   2be1c:	88000d1e 	bne	r17,zero,2be54 <__divdf3+0x894>
   2be20:	000b883a 	mov	r5,zero
   2be24:	1024d0fa 	srli	r18,r2,3
   2be28:	98c0004c 	andi	r3,r19,1
   2be2c:	0005883a 	mov	r2,zero
   2be30:	9464b03a 	or	r18,r18,r17
   2be34:	003e4106 	br	2b73c <__alt_data_end+0xfffeb73c>
   2be38:	1007883a 	mov	r3,r2
   2be3c:	0023883a 	mov	r17,zero
   2be40:	880a927a 	slli	r5,r17,9
   2be44:	1805883a 	mov	r2,r3
   2be48:	8822977a 	slli	r17,r17,29
   2be4c:	280ad33a 	srli	r5,r5,12
   2be50:	003ff406 	br	2be24 <__alt_data_end+0xfffebe24>
   2be54:	10c003cc 	andi	r3,r2,15
   2be58:	01000104 	movi	r4,4
   2be5c:	193ff626 	beq	r3,r4,2be38 <__alt_data_end+0xfffebe38>
   2be60:	0023883a 	mov	r17,zero
   2be64:	003fca06 	br	2bd90 <__alt_data_end+0xfffebd90>
   2be68:	813fd336 	bltu	r16,r4,2bdb8 <__alt_data_end+0xfffebdb8>
   2be6c:	1023883a 	mov	r17,r2
   2be70:	003fa806 	br	2bd14 <__alt_data_end+0xfffebd14>
   2be74:	b0ffd636 	bltu	r22,r3,2bdd0 <__alt_data_end+0xfffebdd0>
   2be78:	1011883a 	mov	r8,r2
   2be7c:	b0ff341e 	bne	r22,r3,2bb50 <__alt_data_end+0xfffebb50>
   2be80:	003f3406 	br	2bb54 <__alt_data_end+0xfffebb54>
   2be84:	0005883a 	mov	r2,zero
   2be88:	003fe006 	br	2be0c <__alt_data_end+0xfffebe0c>
   2be8c:	00800434 	movhi	r2,16
   2be90:	89400234 	orhi	r5,r17,8
   2be94:	10bfffc4 	addi	r2,r2,-1
   2be98:	b807883a 	mov	r3,r23
   2be9c:	288a703a 	and	r5,r5,r2
   2bea0:	4025883a 	mov	r18,r8
   2bea4:	003e8206 	br	2b8b0 <__alt_data_end+0xfffeb8b0>

0002bea8 <__eqdf2>:
   2bea8:	2804d53a 	srli	r2,r5,20
   2beac:	3806d53a 	srli	r3,r7,20
   2beb0:	02000434 	movhi	r8,16
   2beb4:	423fffc4 	addi	r8,r8,-1
   2beb8:	1081ffcc 	andi	r2,r2,2047
   2bebc:	0281ffc4 	movi	r10,2047
   2bec0:	2a12703a 	and	r9,r5,r8
   2bec4:	18c1ffcc 	andi	r3,r3,2047
   2bec8:	3a10703a 	and	r8,r7,r8
   2becc:	280ad7fa 	srli	r5,r5,31
   2bed0:	380ed7fa 	srli	r7,r7,31
   2bed4:	12801026 	beq	r2,r10,2bf18 <__eqdf2+0x70>
   2bed8:	0281ffc4 	movi	r10,2047
   2bedc:	1a800a26 	beq	r3,r10,2bf08 <__eqdf2+0x60>
   2bee0:	10c00226 	beq	r2,r3,2beec <__eqdf2+0x44>
   2bee4:	00800044 	movi	r2,1
   2bee8:	f800283a 	ret
   2beec:	4a3ffd1e 	bne	r9,r8,2bee4 <__alt_data_end+0xfffebee4>
   2bef0:	21bffc1e 	bne	r4,r6,2bee4 <__alt_data_end+0xfffebee4>
   2bef4:	29c00c26 	beq	r5,r7,2bf28 <__eqdf2+0x80>
   2bef8:	103ffa1e 	bne	r2,zero,2bee4 <__alt_data_end+0xfffebee4>
   2befc:	2244b03a 	or	r2,r4,r9
   2bf00:	1004c03a 	cmpne	r2,r2,zero
   2bf04:	f800283a 	ret
   2bf08:	3214b03a 	or	r10,r6,r8
   2bf0c:	503ff426 	beq	r10,zero,2bee0 <__alt_data_end+0xfffebee0>
   2bf10:	00800044 	movi	r2,1
   2bf14:	f800283a 	ret
   2bf18:	2254b03a 	or	r10,r4,r9
   2bf1c:	503fee26 	beq	r10,zero,2bed8 <__alt_data_end+0xfffebed8>
   2bf20:	00800044 	movi	r2,1
   2bf24:	f800283a 	ret
   2bf28:	0005883a 	mov	r2,zero
   2bf2c:	f800283a 	ret

0002bf30 <__gedf2>:
   2bf30:	2804d53a 	srli	r2,r5,20
   2bf34:	3806d53a 	srli	r3,r7,20
   2bf38:	02000434 	movhi	r8,16
   2bf3c:	423fffc4 	addi	r8,r8,-1
   2bf40:	1081ffcc 	andi	r2,r2,2047
   2bf44:	0241ffc4 	movi	r9,2047
   2bf48:	2a14703a 	and	r10,r5,r8
   2bf4c:	18c1ffcc 	andi	r3,r3,2047
   2bf50:	3a10703a 	and	r8,r7,r8
   2bf54:	280ad7fa 	srli	r5,r5,31
   2bf58:	380ed7fa 	srli	r7,r7,31
   2bf5c:	12401d26 	beq	r2,r9,2bfd4 <__gedf2+0xa4>
   2bf60:	0241ffc4 	movi	r9,2047
   2bf64:	1a401226 	beq	r3,r9,2bfb0 <__gedf2+0x80>
   2bf68:	1000081e 	bne	r2,zero,2bf8c <__gedf2+0x5c>
   2bf6c:	2296b03a 	or	r11,r4,r10
   2bf70:	5813003a 	cmpeq	r9,r11,zero
   2bf74:	1800091e 	bne	r3,zero,2bf9c <__gedf2+0x6c>
   2bf78:	3218b03a 	or	r12,r6,r8
   2bf7c:	6000071e 	bne	r12,zero,2bf9c <__gedf2+0x6c>
   2bf80:	0005883a 	mov	r2,zero
   2bf84:	5800101e 	bne	r11,zero,2bfc8 <__gedf2+0x98>
   2bf88:	f800283a 	ret
   2bf8c:	18000c1e 	bne	r3,zero,2bfc0 <__gedf2+0x90>
   2bf90:	3212b03a 	or	r9,r6,r8
   2bf94:	48000c26 	beq	r9,zero,2bfc8 <__gedf2+0x98>
   2bf98:	0013883a 	mov	r9,zero
   2bf9c:	39c03fcc 	andi	r7,r7,255
   2bfa0:	48000826 	beq	r9,zero,2bfc4 <__gedf2+0x94>
   2bfa4:	38000926 	beq	r7,zero,2bfcc <__gedf2+0x9c>
   2bfa8:	00800044 	movi	r2,1
   2bfac:	f800283a 	ret
   2bfb0:	3212b03a 	or	r9,r6,r8
   2bfb4:	483fec26 	beq	r9,zero,2bf68 <__alt_data_end+0xfffebf68>
   2bfb8:	00bfff84 	movi	r2,-2
   2bfbc:	f800283a 	ret
   2bfc0:	39c03fcc 	andi	r7,r7,255
   2bfc4:	29c00626 	beq	r5,r7,2bfe0 <__gedf2+0xb0>
   2bfc8:	283ff726 	beq	r5,zero,2bfa8 <__alt_data_end+0xfffebfa8>
   2bfcc:	00bfffc4 	movi	r2,-1
   2bfd0:	f800283a 	ret
   2bfd4:	2292b03a 	or	r9,r4,r10
   2bfd8:	483fe126 	beq	r9,zero,2bf60 <__alt_data_end+0xfffebf60>
   2bfdc:	003ff606 	br	2bfb8 <__alt_data_end+0xfffebfb8>
   2bfe0:	18bff916 	blt	r3,r2,2bfc8 <__alt_data_end+0xfffebfc8>
   2bfe4:	10c00316 	blt	r2,r3,2bff4 <__gedf2+0xc4>
   2bfe8:	42bff736 	bltu	r8,r10,2bfc8 <__alt_data_end+0xfffebfc8>
   2bfec:	52000326 	beq	r10,r8,2bffc <__gedf2+0xcc>
   2bff0:	5200042e 	bgeu	r10,r8,2c004 <__gedf2+0xd4>
   2bff4:	283fec1e 	bne	r5,zero,2bfa8 <__alt_data_end+0xfffebfa8>
   2bff8:	003ff406 	br	2bfcc <__alt_data_end+0xfffebfcc>
   2bffc:	313ff236 	bltu	r6,r4,2bfc8 <__alt_data_end+0xfffebfc8>
   2c000:	21bffc36 	bltu	r4,r6,2bff4 <__alt_data_end+0xfffebff4>
   2c004:	0005883a 	mov	r2,zero
   2c008:	f800283a 	ret

0002c00c <__ledf2>:
   2c00c:	2804d53a 	srli	r2,r5,20
   2c010:	3810d53a 	srli	r8,r7,20
   2c014:	00c00434 	movhi	r3,16
   2c018:	18ffffc4 	addi	r3,r3,-1
   2c01c:	1081ffcc 	andi	r2,r2,2047
   2c020:	0241ffc4 	movi	r9,2047
   2c024:	28d4703a 	and	r10,r5,r3
   2c028:	4201ffcc 	andi	r8,r8,2047
   2c02c:	38c6703a 	and	r3,r7,r3
   2c030:	280ad7fa 	srli	r5,r5,31
   2c034:	380ed7fa 	srli	r7,r7,31
   2c038:	12401f26 	beq	r2,r9,2c0b8 <__ledf2+0xac>
   2c03c:	0241ffc4 	movi	r9,2047
   2c040:	42401426 	beq	r8,r9,2c094 <__ledf2+0x88>
   2c044:	1000091e 	bne	r2,zero,2c06c <__ledf2+0x60>
   2c048:	2296b03a 	or	r11,r4,r10
   2c04c:	5813003a 	cmpeq	r9,r11,zero
   2c050:	29403fcc 	andi	r5,r5,255
   2c054:	40000a1e 	bne	r8,zero,2c080 <__ledf2+0x74>
   2c058:	30d8b03a 	or	r12,r6,r3
   2c05c:	6000081e 	bne	r12,zero,2c080 <__ledf2+0x74>
   2c060:	0005883a 	mov	r2,zero
   2c064:	5800111e 	bne	r11,zero,2c0ac <__ledf2+0xa0>
   2c068:	f800283a 	ret
   2c06c:	29403fcc 	andi	r5,r5,255
   2c070:	40000c1e 	bne	r8,zero,2c0a4 <__ledf2+0x98>
   2c074:	30d2b03a 	or	r9,r6,r3
   2c078:	48000c26 	beq	r9,zero,2c0ac <__ledf2+0xa0>
   2c07c:	0013883a 	mov	r9,zero
   2c080:	39c03fcc 	andi	r7,r7,255
   2c084:	48000826 	beq	r9,zero,2c0a8 <__ledf2+0x9c>
   2c088:	38001126 	beq	r7,zero,2c0d0 <__ledf2+0xc4>
   2c08c:	00800044 	movi	r2,1
   2c090:	f800283a 	ret
   2c094:	30d2b03a 	or	r9,r6,r3
   2c098:	483fea26 	beq	r9,zero,2c044 <__alt_data_end+0xfffec044>
   2c09c:	00800084 	movi	r2,2
   2c0a0:	f800283a 	ret
   2c0a4:	39c03fcc 	andi	r7,r7,255
   2c0a8:	39400726 	beq	r7,r5,2c0c8 <__ledf2+0xbc>
   2c0ac:	2800081e 	bne	r5,zero,2c0d0 <__ledf2+0xc4>
   2c0b0:	00800044 	movi	r2,1
   2c0b4:	f800283a 	ret
   2c0b8:	2292b03a 	or	r9,r4,r10
   2c0bc:	483fdf26 	beq	r9,zero,2c03c <__alt_data_end+0xfffec03c>
   2c0c0:	00800084 	movi	r2,2
   2c0c4:	f800283a 	ret
   2c0c8:	4080030e 	bge	r8,r2,2c0d8 <__ledf2+0xcc>
   2c0cc:	383fef26 	beq	r7,zero,2c08c <__alt_data_end+0xfffec08c>
   2c0d0:	00bfffc4 	movi	r2,-1
   2c0d4:	f800283a 	ret
   2c0d8:	123feb16 	blt	r2,r8,2c088 <__alt_data_end+0xfffec088>
   2c0dc:	1abff336 	bltu	r3,r10,2c0ac <__alt_data_end+0xfffec0ac>
   2c0e0:	50c00326 	beq	r10,r3,2c0f0 <__ledf2+0xe4>
   2c0e4:	50c0042e 	bgeu	r10,r3,2c0f8 <__ledf2+0xec>
   2c0e8:	283fe81e 	bne	r5,zero,2c08c <__alt_data_end+0xfffec08c>
   2c0ec:	003ff806 	br	2c0d0 <__alt_data_end+0xfffec0d0>
   2c0f0:	313fee36 	bltu	r6,r4,2c0ac <__alt_data_end+0xfffec0ac>
   2c0f4:	21bffc36 	bltu	r4,r6,2c0e8 <__alt_data_end+0xfffec0e8>
   2c0f8:	0005883a 	mov	r2,zero
   2c0fc:	f800283a 	ret

0002c100 <__muldf3>:
   2c100:	defff304 	addi	sp,sp,-52
   2c104:	2804d53a 	srli	r2,r5,20
   2c108:	dd800915 	stw	r22,36(sp)
   2c10c:	282cd7fa 	srli	r22,r5,31
   2c110:	dc000315 	stw	r16,12(sp)
   2c114:	04000434 	movhi	r16,16
   2c118:	dd400815 	stw	r21,32(sp)
   2c11c:	dc800515 	stw	r18,20(sp)
   2c120:	843fffc4 	addi	r16,r16,-1
   2c124:	dfc00c15 	stw	ra,48(sp)
   2c128:	df000b15 	stw	fp,44(sp)
   2c12c:	ddc00a15 	stw	r23,40(sp)
   2c130:	dd000715 	stw	r20,28(sp)
   2c134:	dcc00615 	stw	r19,24(sp)
   2c138:	dc400415 	stw	r17,16(sp)
   2c13c:	1481ffcc 	andi	r18,r2,2047
   2c140:	2c20703a 	and	r16,r5,r16
   2c144:	b02b883a 	mov	r21,r22
   2c148:	b2403fcc 	andi	r9,r22,255
   2c14c:	90006026 	beq	r18,zero,2c2d0 <__muldf3+0x1d0>
   2c150:	0081ffc4 	movi	r2,2047
   2c154:	2029883a 	mov	r20,r4
   2c158:	90803626 	beq	r18,r2,2c234 <__muldf3+0x134>
   2c15c:	80800434 	orhi	r2,r16,16
   2c160:	100490fa 	slli	r2,r2,3
   2c164:	2020d77a 	srli	r16,r4,29
   2c168:	202890fa 	slli	r20,r4,3
   2c16c:	94bf0044 	addi	r18,r18,-1023
   2c170:	80a0b03a 	or	r16,r16,r2
   2c174:	0027883a 	mov	r19,zero
   2c178:	0039883a 	mov	fp,zero
   2c17c:	3804d53a 	srli	r2,r7,20
   2c180:	382ed7fa 	srli	r23,r7,31
   2c184:	04400434 	movhi	r17,16
   2c188:	8c7fffc4 	addi	r17,r17,-1
   2c18c:	1081ffcc 	andi	r2,r2,2047
   2c190:	3011883a 	mov	r8,r6
   2c194:	3c62703a 	and	r17,r7,r17
   2c198:	ba803fcc 	andi	r10,r23,255
   2c19c:	10006d26 	beq	r2,zero,2c354 <__muldf3+0x254>
   2c1a0:	00c1ffc4 	movi	r3,2047
   2c1a4:	10c06526 	beq	r2,r3,2c33c <__muldf3+0x23c>
   2c1a8:	88c00434 	orhi	r3,r17,16
   2c1ac:	180690fa 	slli	r3,r3,3
   2c1b0:	3022d77a 	srli	r17,r6,29
   2c1b4:	301090fa 	slli	r8,r6,3
   2c1b8:	10bf0044 	addi	r2,r2,-1023
   2c1bc:	88e2b03a 	or	r17,r17,r3
   2c1c0:	000b883a 	mov	r5,zero
   2c1c4:	9085883a 	add	r2,r18,r2
   2c1c8:	2cc8b03a 	or	r4,r5,r19
   2c1cc:	00c003c4 	movi	r3,15
   2c1d0:	bdacf03a 	xor	r22,r23,r22
   2c1d4:	12c00044 	addi	r11,r2,1
   2c1d8:	19009936 	bltu	r3,r4,2c440 <__muldf3+0x340>
   2c1dc:	200890ba 	slli	r4,r4,2
   2c1e0:	00c000f4 	movhi	r3,3
   2c1e4:	18f07d04 	addi	r3,r3,-15884
   2c1e8:	20c9883a 	add	r4,r4,r3
   2c1ec:	20c00017 	ldw	r3,0(r4)
   2c1f0:	1800683a 	jmp	r3
   2c1f4:	0002c440 	call	2c44 <__alt_mem_onchip_memory2_0-0x1d3bc>
   2c1f8:	0002c254 	movui	zero,2825
   2c1fc:	0002c254 	movui	zero,2825
   2c200:	0002c250 	cmplti	zero,zero,2825
   2c204:	0002c41c 	xori	zero,zero,2832
   2c208:	0002c41c 	xori	zero,zero,2832
   2c20c:	0002c404 	movi	zero,2832
   2c210:	0002c250 	cmplti	zero,zero,2825
   2c214:	0002c41c 	xori	zero,zero,2832
   2c218:	0002c404 	movi	zero,2832
   2c21c:	0002c41c 	xori	zero,zero,2832
   2c220:	0002c250 	cmplti	zero,zero,2825
   2c224:	0002c42c 	andhi	zero,zero,2832
   2c228:	0002c42c 	andhi	zero,zero,2832
   2c22c:	0002c42c 	andhi	zero,zero,2832
   2c230:	0002c648 	cmpgei	zero,zero,2841
   2c234:	2404b03a 	or	r2,r4,r16
   2c238:	10006f1e 	bne	r2,zero,2c3f8 <__muldf3+0x2f8>
   2c23c:	04c00204 	movi	r19,8
   2c240:	0021883a 	mov	r16,zero
   2c244:	0029883a 	mov	r20,zero
   2c248:	07000084 	movi	fp,2
   2c24c:	003fcb06 	br	2c17c <__alt_data_end+0xfffec17c>
   2c250:	502d883a 	mov	r22,r10
   2c254:	00800084 	movi	r2,2
   2c258:	28805726 	beq	r5,r2,2c3b8 <__muldf3+0x2b8>
   2c25c:	008000c4 	movi	r2,3
   2c260:	28816626 	beq	r5,r2,2c7fc <__muldf3+0x6fc>
   2c264:	00800044 	movi	r2,1
   2c268:	2881411e 	bne	r5,r2,2c770 <__muldf3+0x670>
   2c26c:	b02b883a 	mov	r21,r22
   2c270:	0005883a 	mov	r2,zero
   2c274:	000b883a 	mov	r5,zero
   2c278:	0029883a 	mov	r20,zero
   2c27c:	1004953a 	slli	r2,r2,20
   2c280:	a8c03fcc 	andi	r3,r21,255
   2c284:	04400434 	movhi	r17,16
   2c288:	8c7fffc4 	addi	r17,r17,-1
   2c28c:	180697fa 	slli	r3,r3,31
   2c290:	2c4a703a 	and	r5,r5,r17
   2c294:	288ab03a 	or	r5,r5,r2
   2c298:	28c6b03a 	or	r3,r5,r3
   2c29c:	a005883a 	mov	r2,r20
   2c2a0:	dfc00c17 	ldw	ra,48(sp)
   2c2a4:	df000b17 	ldw	fp,44(sp)
   2c2a8:	ddc00a17 	ldw	r23,40(sp)
   2c2ac:	dd800917 	ldw	r22,36(sp)
   2c2b0:	dd400817 	ldw	r21,32(sp)
   2c2b4:	dd000717 	ldw	r20,28(sp)
   2c2b8:	dcc00617 	ldw	r19,24(sp)
   2c2bc:	dc800517 	ldw	r18,20(sp)
   2c2c0:	dc400417 	ldw	r17,16(sp)
   2c2c4:	dc000317 	ldw	r16,12(sp)
   2c2c8:	dec00d04 	addi	sp,sp,52
   2c2cc:	f800283a 	ret
   2c2d0:	2404b03a 	or	r2,r4,r16
   2c2d4:	2027883a 	mov	r19,r4
   2c2d8:	10004226 	beq	r2,zero,2c3e4 <__muldf3+0x2e4>
   2c2dc:	8000fc26 	beq	r16,zero,2c6d0 <__muldf3+0x5d0>
   2c2e0:	8009883a 	mov	r4,r16
   2c2e4:	d9800215 	stw	r6,8(sp)
   2c2e8:	d9c00015 	stw	r7,0(sp)
   2c2ec:	da400115 	stw	r9,4(sp)
   2c2f0:	002d3180 	call	2d318 <__clzsi2>
   2c2f4:	d9800217 	ldw	r6,8(sp)
   2c2f8:	d9c00017 	ldw	r7,0(sp)
   2c2fc:	da400117 	ldw	r9,4(sp)
   2c300:	113ffd44 	addi	r4,r2,-11
   2c304:	00c00704 	movi	r3,28
   2c308:	1900ed16 	blt	r3,r4,2c6c0 <__muldf3+0x5c0>
   2c30c:	00c00744 	movi	r3,29
   2c310:	147ffe04 	addi	r17,r2,-8
   2c314:	1907c83a 	sub	r3,r3,r4
   2c318:	8460983a 	sll	r16,r16,r17
   2c31c:	98c6d83a 	srl	r3,r19,r3
   2c320:	9c68983a 	sll	r20,r19,r17
   2c324:	1c20b03a 	or	r16,r3,r16
   2c328:	1080fcc4 	addi	r2,r2,1011
   2c32c:	00a5c83a 	sub	r18,zero,r2
   2c330:	0027883a 	mov	r19,zero
   2c334:	0039883a 	mov	fp,zero
   2c338:	003f9006 	br	2c17c <__alt_data_end+0xfffec17c>
   2c33c:	3446b03a 	or	r3,r6,r17
   2c340:	1800261e 	bne	r3,zero,2c3dc <__muldf3+0x2dc>
   2c344:	0023883a 	mov	r17,zero
   2c348:	0011883a 	mov	r8,zero
   2c34c:	01400084 	movi	r5,2
   2c350:	003f9c06 	br	2c1c4 <__alt_data_end+0xfffec1c4>
   2c354:	3446b03a 	or	r3,r6,r17
   2c358:	18001c26 	beq	r3,zero,2c3cc <__muldf3+0x2cc>
   2c35c:	8800ce26 	beq	r17,zero,2c698 <__muldf3+0x598>
   2c360:	8809883a 	mov	r4,r17
   2c364:	d9800215 	stw	r6,8(sp)
   2c368:	da400115 	stw	r9,4(sp)
   2c36c:	da800015 	stw	r10,0(sp)
   2c370:	002d3180 	call	2d318 <__clzsi2>
   2c374:	d9800217 	ldw	r6,8(sp)
   2c378:	da400117 	ldw	r9,4(sp)
   2c37c:	da800017 	ldw	r10,0(sp)
   2c380:	113ffd44 	addi	r4,r2,-11
   2c384:	00c00704 	movi	r3,28
   2c388:	1900bf16 	blt	r3,r4,2c688 <__muldf3+0x588>
   2c38c:	00c00744 	movi	r3,29
   2c390:	123ffe04 	addi	r8,r2,-8
   2c394:	1907c83a 	sub	r3,r3,r4
   2c398:	8a22983a 	sll	r17,r17,r8
   2c39c:	30c6d83a 	srl	r3,r6,r3
   2c3a0:	3210983a 	sll	r8,r6,r8
   2c3a4:	1c62b03a 	or	r17,r3,r17
   2c3a8:	1080fcc4 	addi	r2,r2,1011
   2c3ac:	0085c83a 	sub	r2,zero,r2
   2c3b0:	000b883a 	mov	r5,zero
   2c3b4:	003f8306 	br	2c1c4 <__alt_data_end+0xfffec1c4>
   2c3b8:	b02b883a 	mov	r21,r22
   2c3bc:	0081ffc4 	movi	r2,2047
   2c3c0:	000b883a 	mov	r5,zero
   2c3c4:	0029883a 	mov	r20,zero
   2c3c8:	003fac06 	br	2c27c <__alt_data_end+0xfffec27c>
   2c3cc:	0023883a 	mov	r17,zero
   2c3d0:	0011883a 	mov	r8,zero
   2c3d4:	01400044 	movi	r5,1
   2c3d8:	003f7a06 	br	2c1c4 <__alt_data_end+0xfffec1c4>
   2c3dc:	014000c4 	movi	r5,3
   2c3e0:	003f7806 	br	2c1c4 <__alt_data_end+0xfffec1c4>
   2c3e4:	04c00104 	movi	r19,4
   2c3e8:	0021883a 	mov	r16,zero
   2c3ec:	0029883a 	mov	r20,zero
   2c3f0:	07000044 	movi	fp,1
   2c3f4:	003f6106 	br	2c17c <__alt_data_end+0xfffec17c>
   2c3f8:	04c00304 	movi	r19,12
   2c3fc:	070000c4 	movi	fp,3
   2c400:	003f5e06 	br	2c17c <__alt_data_end+0xfffec17c>
   2c404:	01400434 	movhi	r5,16
   2c408:	002b883a 	mov	r21,zero
   2c40c:	297fffc4 	addi	r5,r5,-1
   2c410:	053fffc4 	movi	r20,-1
   2c414:	0081ffc4 	movi	r2,2047
   2c418:	003f9806 	br	2c27c <__alt_data_end+0xfffec27c>
   2c41c:	8023883a 	mov	r17,r16
   2c420:	a011883a 	mov	r8,r20
   2c424:	e00b883a 	mov	r5,fp
   2c428:	003f8a06 	br	2c254 <__alt_data_end+0xfffec254>
   2c42c:	8023883a 	mov	r17,r16
   2c430:	a011883a 	mov	r8,r20
   2c434:	482d883a 	mov	r22,r9
   2c438:	e00b883a 	mov	r5,fp
   2c43c:	003f8506 	br	2c254 <__alt_data_end+0xfffec254>
   2c440:	a00ad43a 	srli	r5,r20,16
   2c444:	401ad43a 	srli	r13,r8,16
   2c448:	a53fffcc 	andi	r20,r20,65535
   2c44c:	423fffcc 	andi	r8,r8,65535
   2c450:	4519383a 	mul	r12,r8,r20
   2c454:	4147383a 	mul	r3,r8,r5
   2c458:	6d09383a 	mul	r4,r13,r20
   2c45c:	600cd43a 	srli	r6,r12,16
   2c460:	2b5d383a 	mul	r14,r5,r13
   2c464:	20c9883a 	add	r4,r4,r3
   2c468:	310d883a 	add	r6,r6,r4
   2c46c:	30c0022e 	bgeu	r6,r3,2c478 <__muldf3+0x378>
   2c470:	00c00074 	movhi	r3,1
   2c474:	70dd883a 	add	r14,r14,r3
   2c478:	8826d43a 	srli	r19,r17,16
   2c47c:	8bffffcc 	andi	r15,r17,65535
   2c480:	7d23383a 	mul	r17,r15,r20
   2c484:	7949383a 	mul	r4,r15,r5
   2c488:	9d29383a 	mul	r20,r19,r20
   2c48c:	8814d43a 	srli	r10,r17,16
   2c490:	3012943a 	slli	r9,r6,16
   2c494:	a129883a 	add	r20,r20,r4
   2c498:	633fffcc 	andi	r12,r12,65535
   2c49c:	5515883a 	add	r10,r10,r20
   2c4a0:	3006d43a 	srli	r3,r6,16
   2c4a4:	4b13883a 	add	r9,r9,r12
   2c4a8:	2ccb383a 	mul	r5,r5,r19
   2c4ac:	5100022e 	bgeu	r10,r4,2c4b8 <__muldf3+0x3b8>
   2c4b0:	01000074 	movhi	r4,1
   2c4b4:	290b883a 	add	r5,r5,r4
   2c4b8:	802ad43a 	srli	r21,r16,16
   2c4bc:	843fffcc 	andi	r16,r16,65535
   2c4c0:	440d383a 	mul	r6,r8,r16
   2c4c4:	4565383a 	mul	r18,r8,r21
   2c4c8:	8349383a 	mul	r4,r16,r13
   2c4cc:	500e943a 	slli	r7,r10,16
   2c4d0:	3010d43a 	srli	r8,r6,16
   2c4d4:	5028d43a 	srli	r20,r10,16
   2c4d8:	2489883a 	add	r4,r4,r18
   2c4dc:	8abfffcc 	andi	r10,r17,65535
   2c4e0:	3a95883a 	add	r10,r7,r10
   2c4e4:	4119883a 	add	r12,r8,r4
   2c4e8:	a169883a 	add	r20,r20,r5
   2c4ec:	1a87883a 	add	r3,r3,r10
   2c4f0:	6d5b383a 	mul	r13,r13,r21
   2c4f4:	6480022e 	bgeu	r12,r18,2c500 <__muldf3+0x400>
   2c4f8:	01000074 	movhi	r4,1
   2c4fc:	691b883a 	add	r13,r13,r4
   2c500:	7c25383a 	mul	r18,r15,r16
   2c504:	7d4b383a 	mul	r5,r15,r21
   2c508:	84cf383a 	mul	r7,r16,r19
   2c50c:	901ed43a 	srli	r15,r18,16
   2c510:	6008d43a 	srli	r4,r12,16
   2c514:	6010943a 	slli	r8,r12,16
   2c518:	394f883a 	add	r7,r7,r5
   2c51c:	333fffcc 	andi	r12,r6,65535
   2c520:	79df883a 	add	r15,r15,r7
   2c524:	235b883a 	add	r13,r4,r13
   2c528:	9d63383a 	mul	r17,r19,r21
   2c52c:	4309883a 	add	r4,r8,r12
   2c530:	7940022e 	bgeu	r15,r5,2c53c <__muldf3+0x43c>
   2c534:	01400074 	movhi	r5,1
   2c538:	8963883a 	add	r17,r17,r5
   2c53c:	780a943a 	slli	r5,r15,16
   2c540:	91bfffcc 	andi	r6,r18,65535
   2c544:	70c7883a 	add	r3,r14,r3
   2c548:	298d883a 	add	r6,r5,r6
   2c54c:	1a8f803a 	cmpltu	r7,r3,r10
   2c550:	350b883a 	add	r5,r6,r20
   2c554:	20c7883a 	add	r3,r4,r3
   2c558:	3955883a 	add	r10,r7,r5
   2c55c:	1909803a 	cmpltu	r4,r3,r4
   2c560:	6a91883a 	add	r8,r13,r10
   2c564:	780cd43a 	srli	r6,r15,16
   2c568:	2219883a 	add	r12,r4,r8
   2c56c:	2d0b803a 	cmpltu	r5,r5,r20
   2c570:	51cf803a 	cmpltu	r7,r10,r7
   2c574:	29ceb03a 	or	r7,r5,r7
   2c578:	4351803a 	cmpltu	r8,r8,r13
   2c57c:	610b803a 	cmpltu	r5,r12,r4
   2c580:	4148b03a 	or	r4,r8,r5
   2c584:	398f883a 	add	r7,r7,r6
   2c588:	3909883a 	add	r4,r7,r4
   2c58c:	1810927a 	slli	r8,r3,9
   2c590:	2449883a 	add	r4,r4,r17
   2c594:	2008927a 	slli	r4,r4,9
   2c598:	6022d5fa 	srli	r17,r12,23
   2c59c:	1806d5fa 	srli	r3,r3,23
   2c5a0:	4252b03a 	or	r9,r8,r9
   2c5a4:	600a927a 	slli	r5,r12,9
   2c5a8:	4810c03a 	cmpne	r8,r9,zero
   2c5ac:	2462b03a 	or	r17,r4,r17
   2c5b0:	40c6b03a 	or	r3,r8,r3
   2c5b4:	8900402c 	andhi	r4,r17,256
   2c5b8:	1950b03a 	or	r8,r3,r5
   2c5bc:	20000726 	beq	r4,zero,2c5dc <__muldf3+0x4dc>
   2c5c0:	4006d07a 	srli	r3,r8,1
   2c5c4:	880497fa 	slli	r2,r17,31
   2c5c8:	4200004c 	andi	r8,r8,1
   2c5cc:	8822d07a 	srli	r17,r17,1
   2c5d0:	1a10b03a 	or	r8,r3,r8
   2c5d4:	1210b03a 	or	r8,r2,r8
   2c5d8:	5805883a 	mov	r2,r11
   2c5dc:	1140ffc4 	addi	r5,r2,1023
   2c5e0:	0140440e 	bge	zero,r5,2c6f4 <__muldf3+0x5f4>
   2c5e4:	40c001cc 	andi	r3,r8,7
   2c5e8:	18000726 	beq	r3,zero,2c608 <__muldf3+0x508>
   2c5ec:	40c003cc 	andi	r3,r8,15
   2c5f0:	01000104 	movi	r4,4
   2c5f4:	19000426 	beq	r3,r4,2c608 <__muldf3+0x508>
   2c5f8:	4107883a 	add	r3,r8,r4
   2c5fc:	1a11803a 	cmpltu	r8,r3,r8
   2c600:	8a23883a 	add	r17,r17,r8
   2c604:	1811883a 	mov	r8,r3
   2c608:	88c0402c 	andhi	r3,r17,256
   2c60c:	18000426 	beq	r3,zero,2c620 <__muldf3+0x520>
   2c610:	11410004 	addi	r5,r2,1024
   2c614:	00bfc034 	movhi	r2,65280
   2c618:	10bfffc4 	addi	r2,r2,-1
   2c61c:	88a2703a 	and	r17,r17,r2
   2c620:	0081ff84 	movi	r2,2046
   2c624:	117f6416 	blt	r2,r5,2c3b8 <__alt_data_end+0xfffec3b8>
   2c628:	8828977a 	slli	r20,r17,29
   2c62c:	4010d0fa 	srli	r8,r8,3
   2c630:	8822927a 	slli	r17,r17,9
   2c634:	2881ffcc 	andi	r2,r5,2047
   2c638:	a228b03a 	or	r20,r20,r8
   2c63c:	880ad33a 	srli	r5,r17,12
   2c640:	b02b883a 	mov	r21,r22
   2c644:	003f0d06 	br	2c27c <__alt_data_end+0xfffec27c>
   2c648:	8080022c 	andhi	r2,r16,8
   2c64c:	10000926 	beq	r2,zero,2c674 <__muldf3+0x574>
   2c650:	8880022c 	andhi	r2,r17,8
   2c654:	1000071e 	bne	r2,zero,2c674 <__muldf3+0x574>
   2c658:	00800434 	movhi	r2,16
   2c65c:	89400234 	orhi	r5,r17,8
   2c660:	10bfffc4 	addi	r2,r2,-1
   2c664:	b82b883a 	mov	r21,r23
   2c668:	288a703a 	and	r5,r5,r2
   2c66c:	4029883a 	mov	r20,r8
   2c670:	003f6806 	br	2c414 <__alt_data_end+0xfffec414>
   2c674:	00800434 	movhi	r2,16
   2c678:	81400234 	orhi	r5,r16,8
   2c67c:	10bfffc4 	addi	r2,r2,-1
   2c680:	288a703a 	and	r5,r5,r2
   2c684:	003f6306 	br	2c414 <__alt_data_end+0xfffec414>
   2c688:	147ff604 	addi	r17,r2,-40
   2c68c:	3462983a 	sll	r17,r6,r17
   2c690:	0011883a 	mov	r8,zero
   2c694:	003f4406 	br	2c3a8 <__alt_data_end+0xfffec3a8>
   2c698:	3009883a 	mov	r4,r6
   2c69c:	d9800215 	stw	r6,8(sp)
   2c6a0:	da400115 	stw	r9,4(sp)
   2c6a4:	da800015 	stw	r10,0(sp)
   2c6a8:	002d3180 	call	2d318 <__clzsi2>
   2c6ac:	10800804 	addi	r2,r2,32
   2c6b0:	da800017 	ldw	r10,0(sp)
   2c6b4:	da400117 	ldw	r9,4(sp)
   2c6b8:	d9800217 	ldw	r6,8(sp)
   2c6bc:	003f3006 	br	2c380 <__alt_data_end+0xfffec380>
   2c6c0:	143ff604 	addi	r16,r2,-40
   2c6c4:	9c20983a 	sll	r16,r19,r16
   2c6c8:	0029883a 	mov	r20,zero
   2c6cc:	003f1606 	br	2c328 <__alt_data_end+0xfffec328>
   2c6d0:	d9800215 	stw	r6,8(sp)
   2c6d4:	d9c00015 	stw	r7,0(sp)
   2c6d8:	da400115 	stw	r9,4(sp)
   2c6dc:	002d3180 	call	2d318 <__clzsi2>
   2c6e0:	10800804 	addi	r2,r2,32
   2c6e4:	da400117 	ldw	r9,4(sp)
   2c6e8:	d9c00017 	ldw	r7,0(sp)
   2c6ec:	d9800217 	ldw	r6,8(sp)
   2c6f0:	003f0306 	br	2c300 <__alt_data_end+0xfffec300>
   2c6f4:	00c00044 	movi	r3,1
   2c6f8:	1947c83a 	sub	r3,r3,r5
   2c6fc:	00800e04 	movi	r2,56
   2c700:	10feda16 	blt	r2,r3,2c26c <__alt_data_end+0xfffec26c>
   2c704:	008007c4 	movi	r2,31
   2c708:	10c01b16 	blt	r2,r3,2c778 <__muldf3+0x678>
   2c70c:	00800804 	movi	r2,32
   2c710:	10c5c83a 	sub	r2,r2,r3
   2c714:	888a983a 	sll	r5,r17,r2
   2c718:	40c8d83a 	srl	r4,r8,r3
   2c71c:	4084983a 	sll	r2,r8,r2
   2c720:	88e2d83a 	srl	r17,r17,r3
   2c724:	2906b03a 	or	r3,r5,r4
   2c728:	1004c03a 	cmpne	r2,r2,zero
   2c72c:	1886b03a 	or	r3,r3,r2
   2c730:	188001cc 	andi	r2,r3,7
   2c734:	10000726 	beq	r2,zero,2c754 <__muldf3+0x654>
   2c738:	188003cc 	andi	r2,r3,15
   2c73c:	01000104 	movi	r4,4
   2c740:	11000426 	beq	r2,r4,2c754 <__muldf3+0x654>
   2c744:	1805883a 	mov	r2,r3
   2c748:	10c00104 	addi	r3,r2,4
   2c74c:	1885803a 	cmpltu	r2,r3,r2
   2c750:	88a3883a 	add	r17,r17,r2
   2c754:	8880202c 	andhi	r2,r17,128
   2c758:	10001c26 	beq	r2,zero,2c7cc <__muldf3+0x6cc>
   2c75c:	b02b883a 	mov	r21,r22
   2c760:	00800044 	movi	r2,1
   2c764:	000b883a 	mov	r5,zero
   2c768:	0029883a 	mov	r20,zero
   2c76c:	003ec306 	br	2c27c <__alt_data_end+0xfffec27c>
   2c770:	5805883a 	mov	r2,r11
   2c774:	003f9906 	br	2c5dc <__alt_data_end+0xfffec5dc>
   2c778:	00bff844 	movi	r2,-31
   2c77c:	1145c83a 	sub	r2,r2,r5
   2c780:	8888d83a 	srl	r4,r17,r2
   2c784:	00800804 	movi	r2,32
   2c788:	18801a26 	beq	r3,r2,2c7f4 <__muldf3+0x6f4>
   2c78c:	00801004 	movi	r2,64
   2c790:	10c5c83a 	sub	r2,r2,r3
   2c794:	8884983a 	sll	r2,r17,r2
   2c798:	1204b03a 	or	r2,r2,r8
   2c79c:	1004c03a 	cmpne	r2,r2,zero
   2c7a0:	2084b03a 	or	r2,r4,r2
   2c7a4:	144001cc 	andi	r17,r2,7
   2c7a8:	88000d1e 	bne	r17,zero,2c7e0 <__muldf3+0x6e0>
   2c7ac:	000b883a 	mov	r5,zero
   2c7b0:	1028d0fa 	srli	r20,r2,3
   2c7b4:	b02b883a 	mov	r21,r22
   2c7b8:	0005883a 	mov	r2,zero
   2c7bc:	a468b03a 	or	r20,r20,r17
   2c7c0:	003eae06 	br	2c27c <__alt_data_end+0xfffec27c>
   2c7c4:	1007883a 	mov	r3,r2
   2c7c8:	0023883a 	mov	r17,zero
   2c7cc:	880a927a 	slli	r5,r17,9
   2c7d0:	1805883a 	mov	r2,r3
   2c7d4:	8822977a 	slli	r17,r17,29
   2c7d8:	280ad33a 	srli	r5,r5,12
   2c7dc:	003ff406 	br	2c7b0 <__alt_data_end+0xfffec7b0>
   2c7e0:	10c003cc 	andi	r3,r2,15
   2c7e4:	01000104 	movi	r4,4
   2c7e8:	193ff626 	beq	r3,r4,2c7c4 <__alt_data_end+0xfffec7c4>
   2c7ec:	0023883a 	mov	r17,zero
   2c7f0:	003fd506 	br	2c748 <__alt_data_end+0xfffec748>
   2c7f4:	0005883a 	mov	r2,zero
   2c7f8:	003fe706 	br	2c798 <__alt_data_end+0xfffec798>
   2c7fc:	00800434 	movhi	r2,16
   2c800:	89400234 	orhi	r5,r17,8
   2c804:	10bfffc4 	addi	r2,r2,-1
   2c808:	b02b883a 	mov	r21,r22
   2c80c:	288a703a 	and	r5,r5,r2
   2c810:	4029883a 	mov	r20,r8
   2c814:	003eff06 	br	2c414 <__alt_data_end+0xfffec414>

0002c818 <__subdf3>:
   2c818:	02000434 	movhi	r8,16
   2c81c:	423fffc4 	addi	r8,r8,-1
   2c820:	defffb04 	addi	sp,sp,-20
   2c824:	2a14703a 	and	r10,r5,r8
   2c828:	3812d53a 	srli	r9,r7,20
   2c82c:	3a10703a 	and	r8,r7,r8
   2c830:	2006d77a 	srli	r3,r4,29
   2c834:	3004d77a 	srli	r2,r6,29
   2c838:	dc000015 	stw	r16,0(sp)
   2c83c:	501490fa 	slli	r10,r10,3
   2c840:	2820d53a 	srli	r16,r5,20
   2c844:	401090fa 	slli	r8,r8,3
   2c848:	dc800215 	stw	r18,8(sp)
   2c84c:	dc400115 	stw	r17,4(sp)
   2c850:	dfc00415 	stw	ra,16(sp)
   2c854:	202290fa 	slli	r17,r4,3
   2c858:	dcc00315 	stw	r19,12(sp)
   2c85c:	4a41ffcc 	andi	r9,r9,2047
   2c860:	0101ffc4 	movi	r4,2047
   2c864:	2824d7fa 	srli	r18,r5,31
   2c868:	8401ffcc 	andi	r16,r16,2047
   2c86c:	50c6b03a 	or	r3,r10,r3
   2c870:	380ed7fa 	srli	r7,r7,31
   2c874:	408ab03a 	or	r5,r8,r2
   2c878:	300c90fa 	slli	r6,r6,3
   2c87c:	49009626 	beq	r9,r4,2cad8 <__subdf3+0x2c0>
   2c880:	39c0005c 	xori	r7,r7,1
   2c884:	8245c83a 	sub	r2,r16,r9
   2c888:	3c807426 	beq	r7,r18,2ca5c <__subdf3+0x244>
   2c88c:	0080af0e 	bge	zero,r2,2cb4c <__subdf3+0x334>
   2c890:	48002a1e 	bne	r9,zero,2c93c <__subdf3+0x124>
   2c894:	2988b03a 	or	r4,r5,r6
   2c898:	20009a1e 	bne	r4,zero,2cb04 <__subdf3+0x2ec>
   2c89c:	888001cc 	andi	r2,r17,7
   2c8a0:	10000726 	beq	r2,zero,2c8c0 <__subdf3+0xa8>
   2c8a4:	888003cc 	andi	r2,r17,15
   2c8a8:	01000104 	movi	r4,4
   2c8ac:	11000426 	beq	r2,r4,2c8c0 <__subdf3+0xa8>
   2c8b0:	890b883a 	add	r5,r17,r4
   2c8b4:	2c63803a 	cmpltu	r17,r5,r17
   2c8b8:	1c47883a 	add	r3,r3,r17
   2c8bc:	2823883a 	mov	r17,r5
   2c8c0:	1880202c 	andhi	r2,r3,128
   2c8c4:	10005926 	beq	r2,zero,2ca2c <__subdf3+0x214>
   2c8c8:	84000044 	addi	r16,r16,1
   2c8cc:	0081ffc4 	movi	r2,2047
   2c8d0:	8080be26 	beq	r16,r2,2cbcc <__subdf3+0x3b4>
   2c8d4:	017fe034 	movhi	r5,65408
   2c8d8:	297fffc4 	addi	r5,r5,-1
   2c8dc:	1946703a 	and	r3,r3,r5
   2c8e0:	1804977a 	slli	r2,r3,29
   2c8e4:	1806927a 	slli	r3,r3,9
   2c8e8:	8822d0fa 	srli	r17,r17,3
   2c8ec:	8401ffcc 	andi	r16,r16,2047
   2c8f0:	180ad33a 	srli	r5,r3,12
   2c8f4:	9100004c 	andi	r4,r18,1
   2c8f8:	1444b03a 	or	r2,r2,r17
   2c8fc:	80c1ffcc 	andi	r3,r16,2047
   2c900:	1820953a 	slli	r16,r3,20
   2c904:	20c03fcc 	andi	r3,r4,255
   2c908:	180897fa 	slli	r4,r3,31
   2c90c:	00c00434 	movhi	r3,16
   2c910:	18ffffc4 	addi	r3,r3,-1
   2c914:	28c6703a 	and	r3,r5,r3
   2c918:	1c06b03a 	or	r3,r3,r16
   2c91c:	1906b03a 	or	r3,r3,r4
   2c920:	dfc00417 	ldw	ra,16(sp)
   2c924:	dcc00317 	ldw	r19,12(sp)
   2c928:	dc800217 	ldw	r18,8(sp)
   2c92c:	dc400117 	ldw	r17,4(sp)
   2c930:	dc000017 	ldw	r16,0(sp)
   2c934:	dec00504 	addi	sp,sp,20
   2c938:	f800283a 	ret
   2c93c:	0101ffc4 	movi	r4,2047
   2c940:	813fd626 	beq	r16,r4,2c89c <__alt_data_end+0xfffec89c>
   2c944:	29402034 	orhi	r5,r5,128
   2c948:	01000e04 	movi	r4,56
   2c94c:	2080a316 	blt	r4,r2,2cbdc <__subdf3+0x3c4>
   2c950:	010007c4 	movi	r4,31
   2c954:	2080c616 	blt	r4,r2,2cc70 <__subdf3+0x458>
   2c958:	01000804 	movi	r4,32
   2c95c:	2089c83a 	sub	r4,r4,r2
   2c960:	2910983a 	sll	r8,r5,r4
   2c964:	308ed83a 	srl	r7,r6,r2
   2c968:	3108983a 	sll	r4,r6,r4
   2c96c:	2884d83a 	srl	r2,r5,r2
   2c970:	41ccb03a 	or	r6,r8,r7
   2c974:	2008c03a 	cmpne	r4,r4,zero
   2c978:	310cb03a 	or	r6,r6,r4
   2c97c:	898dc83a 	sub	r6,r17,r6
   2c980:	89a3803a 	cmpltu	r17,r17,r6
   2c984:	1887c83a 	sub	r3,r3,r2
   2c988:	1c47c83a 	sub	r3,r3,r17
   2c98c:	3023883a 	mov	r17,r6
   2c990:	1880202c 	andhi	r2,r3,128
   2c994:	10002326 	beq	r2,zero,2ca24 <__subdf3+0x20c>
   2c998:	04c02034 	movhi	r19,128
   2c99c:	9cffffc4 	addi	r19,r19,-1
   2c9a0:	1ce6703a 	and	r19,r3,r19
   2c9a4:	98007a26 	beq	r19,zero,2cb90 <__subdf3+0x378>
   2c9a8:	9809883a 	mov	r4,r19
   2c9ac:	002d3180 	call	2d318 <__clzsi2>
   2c9b0:	113ffe04 	addi	r4,r2,-8
   2c9b4:	00c007c4 	movi	r3,31
   2c9b8:	19007b16 	blt	r3,r4,2cba8 <__subdf3+0x390>
   2c9bc:	00800804 	movi	r2,32
   2c9c0:	1105c83a 	sub	r2,r2,r4
   2c9c4:	8884d83a 	srl	r2,r17,r2
   2c9c8:	9906983a 	sll	r3,r19,r4
   2c9cc:	8922983a 	sll	r17,r17,r4
   2c9d0:	10c4b03a 	or	r2,r2,r3
   2c9d4:	24007816 	blt	r4,r16,2cbb8 <__subdf3+0x3a0>
   2c9d8:	2421c83a 	sub	r16,r4,r16
   2c9dc:	80c00044 	addi	r3,r16,1
   2c9e0:	010007c4 	movi	r4,31
   2c9e4:	20c09516 	blt	r4,r3,2cc3c <__subdf3+0x424>
   2c9e8:	01400804 	movi	r5,32
   2c9ec:	28cbc83a 	sub	r5,r5,r3
   2c9f0:	88c8d83a 	srl	r4,r17,r3
   2c9f4:	8962983a 	sll	r17,r17,r5
   2c9f8:	114a983a 	sll	r5,r2,r5
   2c9fc:	10c6d83a 	srl	r3,r2,r3
   2ca00:	8804c03a 	cmpne	r2,r17,zero
   2ca04:	290ab03a 	or	r5,r5,r4
   2ca08:	28a2b03a 	or	r17,r5,r2
   2ca0c:	0021883a 	mov	r16,zero
   2ca10:	003fa206 	br	2c89c <__alt_data_end+0xfffec89c>
   2ca14:	2090b03a 	or	r8,r4,r2
   2ca18:	40018e26 	beq	r8,zero,2d054 <__subdf3+0x83c>
   2ca1c:	1007883a 	mov	r3,r2
   2ca20:	2023883a 	mov	r17,r4
   2ca24:	888001cc 	andi	r2,r17,7
   2ca28:	103f9e1e 	bne	r2,zero,2c8a4 <__alt_data_end+0xfffec8a4>
   2ca2c:	1804977a 	slli	r2,r3,29
   2ca30:	8822d0fa 	srli	r17,r17,3
   2ca34:	1810d0fa 	srli	r8,r3,3
   2ca38:	9100004c 	andi	r4,r18,1
   2ca3c:	1444b03a 	or	r2,r2,r17
   2ca40:	00c1ffc4 	movi	r3,2047
   2ca44:	80c02826 	beq	r16,r3,2cae8 <__subdf3+0x2d0>
   2ca48:	01400434 	movhi	r5,16
   2ca4c:	297fffc4 	addi	r5,r5,-1
   2ca50:	80e0703a 	and	r16,r16,r3
   2ca54:	414a703a 	and	r5,r8,r5
   2ca58:	003fa806 	br	2c8fc <__alt_data_end+0xfffec8fc>
   2ca5c:	0080630e 	bge	zero,r2,2cbec <__subdf3+0x3d4>
   2ca60:	48003026 	beq	r9,zero,2cb24 <__subdf3+0x30c>
   2ca64:	0101ffc4 	movi	r4,2047
   2ca68:	813f8c26 	beq	r16,r4,2c89c <__alt_data_end+0xfffec89c>
   2ca6c:	29402034 	orhi	r5,r5,128
   2ca70:	01000e04 	movi	r4,56
   2ca74:	2080a90e 	bge	r4,r2,2cd1c <__subdf3+0x504>
   2ca78:	298cb03a 	or	r6,r5,r6
   2ca7c:	3012c03a 	cmpne	r9,r6,zero
   2ca80:	0005883a 	mov	r2,zero
   2ca84:	4c53883a 	add	r9,r9,r17
   2ca88:	4c63803a 	cmpltu	r17,r9,r17
   2ca8c:	10c7883a 	add	r3,r2,r3
   2ca90:	88c7883a 	add	r3,r17,r3
   2ca94:	4823883a 	mov	r17,r9
   2ca98:	1880202c 	andhi	r2,r3,128
   2ca9c:	1000d026 	beq	r2,zero,2cde0 <__subdf3+0x5c8>
   2caa0:	84000044 	addi	r16,r16,1
   2caa4:	0081ffc4 	movi	r2,2047
   2caa8:	8080fe26 	beq	r16,r2,2cea4 <__subdf3+0x68c>
   2caac:	00bfe034 	movhi	r2,65408
   2cab0:	10bfffc4 	addi	r2,r2,-1
   2cab4:	1886703a 	and	r3,r3,r2
   2cab8:	880ad07a 	srli	r5,r17,1
   2cabc:	180497fa 	slli	r2,r3,31
   2cac0:	8900004c 	andi	r4,r17,1
   2cac4:	2922b03a 	or	r17,r5,r4
   2cac8:	1806d07a 	srli	r3,r3,1
   2cacc:	1462b03a 	or	r17,r2,r17
   2cad0:	3825883a 	mov	r18,r7
   2cad4:	003f7106 	br	2c89c <__alt_data_end+0xfffec89c>
   2cad8:	2984b03a 	or	r2,r5,r6
   2cadc:	103f6826 	beq	r2,zero,2c880 <__alt_data_end+0xfffec880>
   2cae0:	39c03fcc 	andi	r7,r7,255
   2cae4:	003f6706 	br	2c884 <__alt_data_end+0xfffec884>
   2cae8:	4086b03a 	or	r3,r8,r2
   2caec:	18015226 	beq	r3,zero,2d038 <__subdf3+0x820>
   2caf0:	00c00434 	movhi	r3,16
   2caf4:	41400234 	orhi	r5,r8,8
   2caf8:	18ffffc4 	addi	r3,r3,-1
   2cafc:	28ca703a 	and	r5,r5,r3
   2cb00:	003f7e06 	br	2c8fc <__alt_data_end+0xfffec8fc>
   2cb04:	10bfffc4 	addi	r2,r2,-1
   2cb08:	1000491e 	bne	r2,zero,2cc30 <__subdf3+0x418>
   2cb0c:	898fc83a 	sub	r7,r17,r6
   2cb10:	89e3803a 	cmpltu	r17,r17,r7
   2cb14:	1947c83a 	sub	r3,r3,r5
   2cb18:	1c47c83a 	sub	r3,r3,r17
   2cb1c:	3823883a 	mov	r17,r7
   2cb20:	003f9b06 	br	2c990 <__alt_data_end+0xfffec990>
   2cb24:	2988b03a 	or	r4,r5,r6
   2cb28:	203f5c26 	beq	r4,zero,2c89c <__alt_data_end+0xfffec89c>
   2cb2c:	10bfffc4 	addi	r2,r2,-1
   2cb30:	1000931e 	bne	r2,zero,2cd80 <__subdf3+0x568>
   2cb34:	898d883a 	add	r6,r17,r6
   2cb38:	3463803a 	cmpltu	r17,r6,r17
   2cb3c:	1947883a 	add	r3,r3,r5
   2cb40:	88c7883a 	add	r3,r17,r3
   2cb44:	3023883a 	mov	r17,r6
   2cb48:	003fd306 	br	2ca98 <__alt_data_end+0xfffeca98>
   2cb4c:	1000541e 	bne	r2,zero,2cca0 <__subdf3+0x488>
   2cb50:	80800044 	addi	r2,r16,1
   2cb54:	1081ffcc 	andi	r2,r2,2047
   2cb58:	01000044 	movi	r4,1
   2cb5c:	2080a20e 	bge	r4,r2,2cde8 <__subdf3+0x5d0>
   2cb60:	8989c83a 	sub	r4,r17,r6
   2cb64:	8905803a 	cmpltu	r2,r17,r4
   2cb68:	1967c83a 	sub	r19,r3,r5
   2cb6c:	98a7c83a 	sub	r19,r19,r2
   2cb70:	9880202c 	andhi	r2,r19,128
   2cb74:	10006326 	beq	r2,zero,2cd04 <__subdf3+0x4ec>
   2cb78:	3463c83a 	sub	r17,r6,r17
   2cb7c:	28c7c83a 	sub	r3,r5,r3
   2cb80:	344d803a 	cmpltu	r6,r6,r17
   2cb84:	19a7c83a 	sub	r19,r3,r6
   2cb88:	3825883a 	mov	r18,r7
   2cb8c:	983f861e 	bne	r19,zero,2c9a8 <__alt_data_end+0xfffec9a8>
   2cb90:	8809883a 	mov	r4,r17
   2cb94:	002d3180 	call	2d318 <__clzsi2>
   2cb98:	10800804 	addi	r2,r2,32
   2cb9c:	113ffe04 	addi	r4,r2,-8
   2cba0:	00c007c4 	movi	r3,31
   2cba4:	193f850e 	bge	r3,r4,2c9bc <__alt_data_end+0xfffec9bc>
   2cba8:	10bff604 	addi	r2,r2,-40
   2cbac:	8884983a 	sll	r2,r17,r2
   2cbb0:	0023883a 	mov	r17,zero
   2cbb4:	243f880e 	bge	r4,r16,2c9d8 <__alt_data_end+0xfffec9d8>
   2cbb8:	00ffe034 	movhi	r3,65408
   2cbbc:	18ffffc4 	addi	r3,r3,-1
   2cbc0:	8121c83a 	sub	r16,r16,r4
   2cbc4:	10c6703a 	and	r3,r2,r3
   2cbc8:	003f3406 	br	2c89c <__alt_data_end+0xfffec89c>
   2cbcc:	9100004c 	andi	r4,r18,1
   2cbd0:	000b883a 	mov	r5,zero
   2cbd4:	0005883a 	mov	r2,zero
   2cbd8:	003f4806 	br	2c8fc <__alt_data_end+0xfffec8fc>
   2cbdc:	298cb03a 	or	r6,r5,r6
   2cbe0:	300cc03a 	cmpne	r6,r6,zero
   2cbe4:	0005883a 	mov	r2,zero
   2cbe8:	003f6406 	br	2c97c <__alt_data_end+0xfffec97c>
   2cbec:	10009a1e 	bne	r2,zero,2ce58 <__subdf3+0x640>
   2cbf0:	82400044 	addi	r9,r16,1
   2cbf4:	4881ffcc 	andi	r2,r9,2047
   2cbf8:	02800044 	movi	r10,1
   2cbfc:	5080670e 	bge	r10,r2,2cd9c <__subdf3+0x584>
   2cc00:	0081ffc4 	movi	r2,2047
   2cc04:	4880af26 	beq	r9,r2,2cec4 <__subdf3+0x6ac>
   2cc08:	898d883a 	add	r6,r17,r6
   2cc0c:	1945883a 	add	r2,r3,r5
   2cc10:	3447803a 	cmpltu	r3,r6,r17
   2cc14:	1887883a 	add	r3,r3,r2
   2cc18:	182297fa 	slli	r17,r3,31
   2cc1c:	300cd07a 	srli	r6,r6,1
   2cc20:	1806d07a 	srli	r3,r3,1
   2cc24:	4821883a 	mov	r16,r9
   2cc28:	89a2b03a 	or	r17,r17,r6
   2cc2c:	003f1b06 	br	2c89c <__alt_data_end+0xfffec89c>
   2cc30:	0101ffc4 	movi	r4,2047
   2cc34:	813f441e 	bne	r16,r4,2c948 <__alt_data_end+0xfffec948>
   2cc38:	003f1806 	br	2c89c <__alt_data_end+0xfffec89c>
   2cc3c:	843ff844 	addi	r16,r16,-31
   2cc40:	01400804 	movi	r5,32
   2cc44:	1408d83a 	srl	r4,r2,r16
   2cc48:	19405026 	beq	r3,r5,2cd8c <__subdf3+0x574>
   2cc4c:	01401004 	movi	r5,64
   2cc50:	28c7c83a 	sub	r3,r5,r3
   2cc54:	10c4983a 	sll	r2,r2,r3
   2cc58:	88a2b03a 	or	r17,r17,r2
   2cc5c:	8822c03a 	cmpne	r17,r17,zero
   2cc60:	2462b03a 	or	r17,r4,r17
   2cc64:	0007883a 	mov	r3,zero
   2cc68:	0021883a 	mov	r16,zero
   2cc6c:	003f6d06 	br	2ca24 <__alt_data_end+0xfffeca24>
   2cc70:	11fff804 	addi	r7,r2,-32
   2cc74:	01000804 	movi	r4,32
   2cc78:	29ced83a 	srl	r7,r5,r7
   2cc7c:	11004526 	beq	r2,r4,2cd94 <__subdf3+0x57c>
   2cc80:	01001004 	movi	r4,64
   2cc84:	2089c83a 	sub	r4,r4,r2
   2cc88:	2904983a 	sll	r2,r5,r4
   2cc8c:	118cb03a 	or	r6,r2,r6
   2cc90:	300cc03a 	cmpne	r6,r6,zero
   2cc94:	398cb03a 	or	r6,r7,r6
   2cc98:	0005883a 	mov	r2,zero
   2cc9c:	003f3706 	br	2c97c <__alt_data_end+0xfffec97c>
   2cca0:	80002a26 	beq	r16,zero,2cd4c <__subdf3+0x534>
   2cca4:	0101ffc4 	movi	r4,2047
   2cca8:	49006626 	beq	r9,r4,2ce44 <__subdf3+0x62c>
   2ccac:	0085c83a 	sub	r2,zero,r2
   2ccb0:	18c02034 	orhi	r3,r3,128
   2ccb4:	01000e04 	movi	r4,56
   2ccb8:	20807e16 	blt	r4,r2,2ceb4 <__subdf3+0x69c>
   2ccbc:	010007c4 	movi	r4,31
   2ccc0:	2080e716 	blt	r4,r2,2d060 <__subdf3+0x848>
   2ccc4:	01000804 	movi	r4,32
   2ccc8:	2089c83a 	sub	r4,r4,r2
   2cccc:	1914983a 	sll	r10,r3,r4
   2ccd0:	8890d83a 	srl	r8,r17,r2
   2ccd4:	8908983a 	sll	r4,r17,r4
   2ccd8:	1884d83a 	srl	r2,r3,r2
   2ccdc:	5222b03a 	or	r17,r10,r8
   2cce0:	2006c03a 	cmpne	r3,r4,zero
   2cce4:	88e2b03a 	or	r17,r17,r3
   2cce8:	3463c83a 	sub	r17,r6,r17
   2ccec:	2885c83a 	sub	r2,r5,r2
   2ccf0:	344d803a 	cmpltu	r6,r6,r17
   2ccf4:	1187c83a 	sub	r3,r2,r6
   2ccf8:	4821883a 	mov	r16,r9
   2ccfc:	3825883a 	mov	r18,r7
   2cd00:	003f2306 	br	2c990 <__alt_data_end+0xfffec990>
   2cd04:	24d0b03a 	or	r8,r4,r19
   2cd08:	40001b1e 	bne	r8,zero,2cd78 <__subdf3+0x560>
   2cd0c:	0005883a 	mov	r2,zero
   2cd10:	0009883a 	mov	r4,zero
   2cd14:	0021883a 	mov	r16,zero
   2cd18:	003f4906 	br	2ca40 <__alt_data_end+0xfffeca40>
   2cd1c:	010007c4 	movi	r4,31
   2cd20:	20803a16 	blt	r4,r2,2ce0c <__subdf3+0x5f4>
   2cd24:	01000804 	movi	r4,32
   2cd28:	2089c83a 	sub	r4,r4,r2
   2cd2c:	2912983a 	sll	r9,r5,r4
   2cd30:	3090d83a 	srl	r8,r6,r2
   2cd34:	3108983a 	sll	r4,r6,r4
   2cd38:	2884d83a 	srl	r2,r5,r2
   2cd3c:	4a12b03a 	or	r9,r9,r8
   2cd40:	2008c03a 	cmpne	r4,r4,zero
   2cd44:	4912b03a 	or	r9,r9,r4
   2cd48:	003f4e06 	br	2ca84 <__alt_data_end+0xfffeca84>
   2cd4c:	1c48b03a 	or	r4,r3,r17
   2cd50:	20003c26 	beq	r4,zero,2ce44 <__subdf3+0x62c>
   2cd54:	0084303a 	nor	r2,zero,r2
   2cd58:	1000381e 	bne	r2,zero,2ce3c <__subdf3+0x624>
   2cd5c:	3463c83a 	sub	r17,r6,r17
   2cd60:	28c5c83a 	sub	r2,r5,r3
   2cd64:	344d803a 	cmpltu	r6,r6,r17
   2cd68:	1187c83a 	sub	r3,r2,r6
   2cd6c:	4821883a 	mov	r16,r9
   2cd70:	3825883a 	mov	r18,r7
   2cd74:	003f0606 	br	2c990 <__alt_data_end+0xfffec990>
   2cd78:	2023883a 	mov	r17,r4
   2cd7c:	003f0906 	br	2c9a4 <__alt_data_end+0xfffec9a4>
   2cd80:	0101ffc4 	movi	r4,2047
   2cd84:	813f3a1e 	bne	r16,r4,2ca70 <__alt_data_end+0xfffeca70>
   2cd88:	003ec406 	br	2c89c <__alt_data_end+0xfffec89c>
   2cd8c:	0005883a 	mov	r2,zero
   2cd90:	003fb106 	br	2cc58 <__alt_data_end+0xfffecc58>
   2cd94:	0005883a 	mov	r2,zero
   2cd98:	003fbc06 	br	2cc8c <__alt_data_end+0xfffecc8c>
   2cd9c:	1c44b03a 	or	r2,r3,r17
   2cda0:	80008e1e 	bne	r16,zero,2cfdc <__subdf3+0x7c4>
   2cda4:	1000c826 	beq	r2,zero,2d0c8 <__subdf3+0x8b0>
   2cda8:	2984b03a 	or	r2,r5,r6
   2cdac:	103ebb26 	beq	r2,zero,2c89c <__alt_data_end+0xfffec89c>
   2cdb0:	8989883a 	add	r4,r17,r6
   2cdb4:	1945883a 	add	r2,r3,r5
   2cdb8:	2447803a 	cmpltu	r3,r4,r17
   2cdbc:	1887883a 	add	r3,r3,r2
   2cdc0:	1880202c 	andhi	r2,r3,128
   2cdc4:	2023883a 	mov	r17,r4
   2cdc8:	103f1626 	beq	r2,zero,2ca24 <__alt_data_end+0xfffeca24>
   2cdcc:	00bfe034 	movhi	r2,65408
   2cdd0:	10bfffc4 	addi	r2,r2,-1
   2cdd4:	5021883a 	mov	r16,r10
   2cdd8:	1886703a 	and	r3,r3,r2
   2cddc:	003eaf06 	br	2c89c <__alt_data_end+0xfffec89c>
   2cde0:	3825883a 	mov	r18,r7
   2cde4:	003f0f06 	br	2ca24 <__alt_data_end+0xfffeca24>
   2cde8:	1c44b03a 	or	r2,r3,r17
   2cdec:	8000251e 	bne	r16,zero,2ce84 <__subdf3+0x66c>
   2cdf0:	1000661e 	bne	r2,zero,2cf8c <__subdf3+0x774>
   2cdf4:	2990b03a 	or	r8,r5,r6
   2cdf8:	40009626 	beq	r8,zero,2d054 <__subdf3+0x83c>
   2cdfc:	2807883a 	mov	r3,r5
   2ce00:	3023883a 	mov	r17,r6
   2ce04:	3825883a 	mov	r18,r7
   2ce08:	003ea406 	br	2c89c <__alt_data_end+0xfffec89c>
   2ce0c:	127ff804 	addi	r9,r2,-32
   2ce10:	01000804 	movi	r4,32
   2ce14:	2a52d83a 	srl	r9,r5,r9
   2ce18:	11008c26 	beq	r2,r4,2d04c <__subdf3+0x834>
   2ce1c:	01001004 	movi	r4,64
   2ce20:	2085c83a 	sub	r2,r4,r2
   2ce24:	2884983a 	sll	r2,r5,r2
   2ce28:	118cb03a 	or	r6,r2,r6
   2ce2c:	300cc03a 	cmpne	r6,r6,zero
   2ce30:	4992b03a 	or	r9,r9,r6
   2ce34:	0005883a 	mov	r2,zero
   2ce38:	003f1206 	br	2ca84 <__alt_data_end+0xfffeca84>
   2ce3c:	0101ffc4 	movi	r4,2047
   2ce40:	493f9c1e 	bne	r9,r4,2ccb4 <__alt_data_end+0xfffeccb4>
   2ce44:	2807883a 	mov	r3,r5
   2ce48:	3023883a 	mov	r17,r6
   2ce4c:	4821883a 	mov	r16,r9
   2ce50:	3825883a 	mov	r18,r7
   2ce54:	003e9106 	br	2c89c <__alt_data_end+0xfffec89c>
   2ce58:	80001f1e 	bne	r16,zero,2ced8 <__subdf3+0x6c0>
   2ce5c:	1c48b03a 	or	r4,r3,r17
   2ce60:	20005a26 	beq	r4,zero,2cfcc <__subdf3+0x7b4>
   2ce64:	0084303a 	nor	r2,zero,r2
   2ce68:	1000561e 	bne	r2,zero,2cfc4 <__subdf3+0x7ac>
   2ce6c:	89a3883a 	add	r17,r17,r6
   2ce70:	1945883a 	add	r2,r3,r5
   2ce74:	898d803a 	cmpltu	r6,r17,r6
   2ce78:	3087883a 	add	r3,r6,r2
   2ce7c:	4821883a 	mov	r16,r9
   2ce80:	003f0506 	br	2ca98 <__alt_data_end+0xfffeca98>
   2ce84:	10002b1e 	bne	r2,zero,2cf34 <__subdf3+0x71c>
   2ce88:	2984b03a 	or	r2,r5,r6
   2ce8c:	10008026 	beq	r2,zero,2d090 <__subdf3+0x878>
   2ce90:	2807883a 	mov	r3,r5
   2ce94:	3023883a 	mov	r17,r6
   2ce98:	3825883a 	mov	r18,r7
   2ce9c:	0401ffc4 	movi	r16,2047
   2cea0:	003e7e06 	br	2c89c <__alt_data_end+0xfffec89c>
   2cea4:	3809883a 	mov	r4,r7
   2cea8:	0011883a 	mov	r8,zero
   2ceac:	0005883a 	mov	r2,zero
   2ceb0:	003ee306 	br	2ca40 <__alt_data_end+0xfffeca40>
   2ceb4:	1c62b03a 	or	r17,r3,r17
   2ceb8:	8822c03a 	cmpne	r17,r17,zero
   2cebc:	0005883a 	mov	r2,zero
   2cec0:	003f8906 	br	2cce8 <__alt_data_end+0xfffecce8>
   2cec4:	3809883a 	mov	r4,r7
   2cec8:	4821883a 	mov	r16,r9
   2cecc:	0011883a 	mov	r8,zero
   2ced0:	0005883a 	mov	r2,zero
   2ced4:	003eda06 	br	2ca40 <__alt_data_end+0xfffeca40>
   2ced8:	0101ffc4 	movi	r4,2047
   2cedc:	49003b26 	beq	r9,r4,2cfcc <__subdf3+0x7b4>
   2cee0:	0085c83a 	sub	r2,zero,r2
   2cee4:	18c02034 	orhi	r3,r3,128
   2cee8:	01000e04 	movi	r4,56
   2ceec:	20806e16 	blt	r4,r2,2d0a8 <__subdf3+0x890>
   2cef0:	010007c4 	movi	r4,31
   2cef4:	20807716 	blt	r4,r2,2d0d4 <__subdf3+0x8bc>
   2cef8:	01000804 	movi	r4,32
   2cefc:	2089c83a 	sub	r4,r4,r2
   2cf00:	1914983a 	sll	r10,r3,r4
   2cf04:	8890d83a 	srl	r8,r17,r2
   2cf08:	8908983a 	sll	r4,r17,r4
   2cf0c:	1884d83a 	srl	r2,r3,r2
   2cf10:	5222b03a 	or	r17,r10,r8
   2cf14:	2006c03a 	cmpne	r3,r4,zero
   2cf18:	88e2b03a 	or	r17,r17,r3
   2cf1c:	89a3883a 	add	r17,r17,r6
   2cf20:	1145883a 	add	r2,r2,r5
   2cf24:	898d803a 	cmpltu	r6,r17,r6
   2cf28:	3087883a 	add	r3,r6,r2
   2cf2c:	4821883a 	mov	r16,r9
   2cf30:	003ed906 	br	2ca98 <__alt_data_end+0xfffeca98>
   2cf34:	2984b03a 	or	r2,r5,r6
   2cf38:	10004226 	beq	r2,zero,2d044 <__subdf3+0x82c>
   2cf3c:	1808d0fa 	srli	r4,r3,3
   2cf40:	8822d0fa 	srli	r17,r17,3
   2cf44:	1806977a 	slli	r3,r3,29
   2cf48:	2080022c 	andhi	r2,r4,8
   2cf4c:	1c62b03a 	or	r17,r3,r17
   2cf50:	10000826 	beq	r2,zero,2cf74 <__subdf3+0x75c>
   2cf54:	2812d0fa 	srli	r9,r5,3
   2cf58:	4880022c 	andhi	r2,r9,8
   2cf5c:	1000051e 	bne	r2,zero,2cf74 <__subdf3+0x75c>
   2cf60:	300cd0fa 	srli	r6,r6,3
   2cf64:	2804977a 	slli	r2,r5,29
   2cf68:	4809883a 	mov	r4,r9
   2cf6c:	3825883a 	mov	r18,r7
   2cf70:	11a2b03a 	or	r17,r2,r6
   2cf74:	8806d77a 	srli	r3,r17,29
   2cf78:	200890fa 	slli	r4,r4,3
   2cf7c:	882290fa 	slli	r17,r17,3
   2cf80:	0401ffc4 	movi	r16,2047
   2cf84:	1906b03a 	or	r3,r3,r4
   2cf88:	003e4406 	br	2c89c <__alt_data_end+0xfffec89c>
   2cf8c:	2984b03a 	or	r2,r5,r6
   2cf90:	103e4226 	beq	r2,zero,2c89c <__alt_data_end+0xfffec89c>
   2cf94:	8989c83a 	sub	r4,r17,r6
   2cf98:	8911803a 	cmpltu	r8,r17,r4
   2cf9c:	1945c83a 	sub	r2,r3,r5
   2cfa0:	1205c83a 	sub	r2,r2,r8
   2cfa4:	1200202c 	andhi	r8,r2,128
   2cfa8:	403e9a26 	beq	r8,zero,2ca14 <__alt_data_end+0xfffeca14>
   2cfac:	3463c83a 	sub	r17,r6,r17
   2cfb0:	28c5c83a 	sub	r2,r5,r3
   2cfb4:	344d803a 	cmpltu	r6,r6,r17
   2cfb8:	1187c83a 	sub	r3,r2,r6
   2cfbc:	3825883a 	mov	r18,r7
   2cfc0:	003e3606 	br	2c89c <__alt_data_end+0xfffec89c>
   2cfc4:	0101ffc4 	movi	r4,2047
   2cfc8:	493fc71e 	bne	r9,r4,2cee8 <__alt_data_end+0xfffecee8>
   2cfcc:	2807883a 	mov	r3,r5
   2cfd0:	3023883a 	mov	r17,r6
   2cfd4:	4821883a 	mov	r16,r9
   2cfd8:	003e3006 	br	2c89c <__alt_data_end+0xfffec89c>
   2cfdc:	10003626 	beq	r2,zero,2d0b8 <__subdf3+0x8a0>
   2cfe0:	2984b03a 	or	r2,r5,r6
   2cfe4:	10001726 	beq	r2,zero,2d044 <__subdf3+0x82c>
   2cfe8:	1808d0fa 	srli	r4,r3,3
   2cfec:	8822d0fa 	srli	r17,r17,3
   2cff0:	1806977a 	slli	r3,r3,29
   2cff4:	2080022c 	andhi	r2,r4,8
   2cff8:	1c62b03a 	or	r17,r3,r17
   2cffc:	10000726 	beq	r2,zero,2d01c <__subdf3+0x804>
   2d000:	2812d0fa 	srli	r9,r5,3
   2d004:	4880022c 	andhi	r2,r9,8
   2d008:	1000041e 	bne	r2,zero,2d01c <__subdf3+0x804>
   2d00c:	300cd0fa 	srli	r6,r6,3
   2d010:	2804977a 	slli	r2,r5,29
   2d014:	4809883a 	mov	r4,r9
   2d018:	11a2b03a 	or	r17,r2,r6
   2d01c:	8806d77a 	srli	r3,r17,29
   2d020:	200890fa 	slli	r4,r4,3
   2d024:	882290fa 	slli	r17,r17,3
   2d028:	3825883a 	mov	r18,r7
   2d02c:	1906b03a 	or	r3,r3,r4
   2d030:	0401ffc4 	movi	r16,2047
   2d034:	003e1906 	br	2c89c <__alt_data_end+0xfffec89c>
   2d038:	000b883a 	mov	r5,zero
   2d03c:	0005883a 	mov	r2,zero
   2d040:	003e2e06 	br	2c8fc <__alt_data_end+0xfffec8fc>
   2d044:	0401ffc4 	movi	r16,2047
   2d048:	003e1406 	br	2c89c <__alt_data_end+0xfffec89c>
   2d04c:	0005883a 	mov	r2,zero
   2d050:	003f7506 	br	2ce28 <__alt_data_end+0xfffece28>
   2d054:	0005883a 	mov	r2,zero
   2d058:	0009883a 	mov	r4,zero
   2d05c:	003e7806 	br	2ca40 <__alt_data_end+0xfffeca40>
   2d060:	123ff804 	addi	r8,r2,-32
   2d064:	01000804 	movi	r4,32
   2d068:	1a10d83a 	srl	r8,r3,r8
   2d06c:	11002526 	beq	r2,r4,2d104 <__subdf3+0x8ec>
   2d070:	01001004 	movi	r4,64
   2d074:	2085c83a 	sub	r2,r4,r2
   2d078:	1884983a 	sll	r2,r3,r2
   2d07c:	1444b03a 	or	r2,r2,r17
   2d080:	1004c03a 	cmpne	r2,r2,zero
   2d084:	40a2b03a 	or	r17,r8,r2
   2d088:	0005883a 	mov	r2,zero
   2d08c:	003f1606 	br	2cce8 <__alt_data_end+0xfffecce8>
   2d090:	02000434 	movhi	r8,16
   2d094:	0009883a 	mov	r4,zero
   2d098:	423fffc4 	addi	r8,r8,-1
   2d09c:	00bfffc4 	movi	r2,-1
   2d0a0:	0401ffc4 	movi	r16,2047
   2d0a4:	003e6606 	br	2ca40 <__alt_data_end+0xfffeca40>
   2d0a8:	1c62b03a 	or	r17,r3,r17
   2d0ac:	8822c03a 	cmpne	r17,r17,zero
   2d0b0:	0005883a 	mov	r2,zero
   2d0b4:	003f9906 	br	2cf1c <__alt_data_end+0xfffecf1c>
   2d0b8:	2807883a 	mov	r3,r5
   2d0bc:	3023883a 	mov	r17,r6
   2d0c0:	0401ffc4 	movi	r16,2047
   2d0c4:	003df506 	br	2c89c <__alt_data_end+0xfffec89c>
   2d0c8:	2807883a 	mov	r3,r5
   2d0cc:	3023883a 	mov	r17,r6
   2d0d0:	003df206 	br	2c89c <__alt_data_end+0xfffec89c>
   2d0d4:	123ff804 	addi	r8,r2,-32
   2d0d8:	01000804 	movi	r4,32
   2d0dc:	1a10d83a 	srl	r8,r3,r8
   2d0e0:	11000a26 	beq	r2,r4,2d10c <__subdf3+0x8f4>
   2d0e4:	01001004 	movi	r4,64
   2d0e8:	2085c83a 	sub	r2,r4,r2
   2d0ec:	1884983a 	sll	r2,r3,r2
   2d0f0:	1444b03a 	or	r2,r2,r17
   2d0f4:	1004c03a 	cmpne	r2,r2,zero
   2d0f8:	40a2b03a 	or	r17,r8,r2
   2d0fc:	0005883a 	mov	r2,zero
   2d100:	003f8606 	br	2cf1c <__alt_data_end+0xfffecf1c>
   2d104:	0005883a 	mov	r2,zero
   2d108:	003fdc06 	br	2d07c <__alt_data_end+0xfffed07c>
   2d10c:	0005883a 	mov	r2,zero
   2d110:	003ff706 	br	2d0f0 <__alt_data_end+0xfffed0f0>

0002d114 <__fixdfsi>:
   2d114:	280cd53a 	srli	r6,r5,20
   2d118:	00c00434 	movhi	r3,16
   2d11c:	18ffffc4 	addi	r3,r3,-1
   2d120:	3181ffcc 	andi	r6,r6,2047
   2d124:	01c0ff84 	movi	r7,1022
   2d128:	28c6703a 	and	r3,r5,r3
   2d12c:	280ad7fa 	srli	r5,r5,31
   2d130:	3980120e 	bge	r7,r6,2d17c <__fixdfsi+0x68>
   2d134:	00810744 	movi	r2,1053
   2d138:	11800c16 	blt	r2,r6,2d16c <__fixdfsi+0x58>
   2d13c:	00810cc4 	movi	r2,1075
   2d140:	1185c83a 	sub	r2,r2,r6
   2d144:	01c007c4 	movi	r7,31
   2d148:	18c00434 	orhi	r3,r3,16
   2d14c:	38800d16 	blt	r7,r2,2d184 <__fixdfsi+0x70>
   2d150:	31befb44 	addi	r6,r6,-1043
   2d154:	2084d83a 	srl	r2,r4,r2
   2d158:	1986983a 	sll	r3,r3,r6
   2d15c:	1884b03a 	or	r2,r3,r2
   2d160:	28000726 	beq	r5,zero,2d180 <__fixdfsi+0x6c>
   2d164:	0085c83a 	sub	r2,zero,r2
   2d168:	f800283a 	ret
   2d16c:	00a00034 	movhi	r2,32768
   2d170:	10bfffc4 	addi	r2,r2,-1
   2d174:	2885883a 	add	r2,r5,r2
   2d178:	f800283a 	ret
   2d17c:	0005883a 	mov	r2,zero
   2d180:	f800283a 	ret
   2d184:	008104c4 	movi	r2,1043
   2d188:	1185c83a 	sub	r2,r2,r6
   2d18c:	1884d83a 	srl	r2,r3,r2
   2d190:	003ff306 	br	2d160 <__alt_data_end+0xfffed160>

0002d194 <__floatsidf>:
   2d194:	defffd04 	addi	sp,sp,-12
   2d198:	dfc00215 	stw	ra,8(sp)
   2d19c:	dc400115 	stw	r17,4(sp)
   2d1a0:	dc000015 	stw	r16,0(sp)
   2d1a4:	20002b26 	beq	r4,zero,2d254 <__floatsidf+0xc0>
   2d1a8:	2023883a 	mov	r17,r4
   2d1ac:	2020d7fa 	srli	r16,r4,31
   2d1b0:	20002d16 	blt	r4,zero,2d268 <__floatsidf+0xd4>
   2d1b4:	8809883a 	mov	r4,r17
   2d1b8:	002d3180 	call	2d318 <__clzsi2>
   2d1bc:	01410784 	movi	r5,1054
   2d1c0:	288bc83a 	sub	r5,r5,r2
   2d1c4:	01010cc4 	movi	r4,1075
   2d1c8:	2149c83a 	sub	r4,r4,r5
   2d1cc:	00c007c4 	movi	r3,31
   2d1d0:	1900160e 	bge	r3,r4,2d22c <__floatsidf+0x98>
   2d1d4:	00c104c4 	movi	r3,1043
   2d1d8:	1947c83a 	sub	r3,r3,r5
   2d1dc:	88c6983a 	sll	r3,r17,r3
   2d1e0:	00800434 	movhi	r2,16
   2d1e4:	10bfffc4 	addi	r2,r2,-1
   2d1e8:	1886703a 	and	r3,r3,r2
   2d1ec:	2941ffcc 	andi	r5,r5,2047
   2d1f0:	800d883a 	mov	r6,r16
   2d1f4:	0005883a 	mov	r2,zero
   2d1f8:	280a953a 	slli	r5,r5,20
   2d1fc:	31803fcc 	andi	r6,r6,255
   2d200:	01000434 	movhi	r4,16
   2d204:	300c97fa 	slli	r6,r6,31
   2d208:	213fffc4 	addi	r4,r4,-1
   2d20c:	1906703a 	and	r3,r3,r4
   2d210:	1946b03a 	or	r3,r3,r5
   2d214:	1986b03a 	or	r3,r3,r6
   2d218:	dfc00217 	ldw	ra,8(sp)
   2d21c:	dc400117 	ldw	r17,4(sp)
   2d220:	dc000017 	ldw	r16,0(sp)
   2d224:	dec00304 	addi	sp,sp,12
   2d228:	f800283a 	ret
   2d22c:	00c002c4 	movi	r3,11
   2d230:	1887c83a 	sub	r3,r3,r2
   2d234:	88c6d83a 	srl	r3,r17,r3
   2d238:	8904983a 	sll	r2,r17,r4
   2d23c:	01000434 	movhi	r4,16
   2d240:	213fffc4 	addi	r4,r4,-1
   2d244:	2941ffcc 	andi	r5,r5,2047
   2d248:	1906703a 	and	r3,r3,r4
   2d24c:	800d883a 	mov	r6,r16
   2d250:	003fe906 	br	2d1f8 <__alt_data_end+0xfffed1f8>
   2d254:	000d883a 	mov	r6,zero
   2d258:	000b883a 	mov	r5,zero
   2d25c:	0007883a 	mov	r3,zero
   2d260:	0005883a 	mov	r2,zero
   2d264:	003fe406 	br	2d1f8 <__alt_data_end+0xfffed1f8>
   2d268:	0123c83a 	sub	r17,zero,r4
   2d26c:	003fd106 	br	2d1b4 <__alt_data_end+0xfffed1b4>

0002d270 <__floatunsidf>:
   2d270:	defffe04 	addi	sp,sp,-8
   2d274:	dc000015 	stw	r16,0(sp)
   2d278:	dfc00115 	stw	ra,4(sp)
   2d27c:	2021883a 	mov	r16,r4
   2d280:	20002226 	beq	r4,zero,2d30c <__floatunsidf+0x9c>
   2d284:	002d3180 	call	2d318 <__clzsi2>
   2d288:	01010784 	movi	r4,1054
   2d28c:	2089c83a 	sub	r4,r4,r2
   2d290:	01810cc4 	movi	r6,1075
   2d294:	310dc83a 	sub	r6,r6,r4
   2d298:	00c007c4 	movi	r3,31
   2d29c:	1980120e 	bge	r3,r6,2d2e8 <__floatunsidf+0x78>
   2d2a0:	00c104c4 	movi	r3,1043
   2d2a4:	1907c83a 	sub	r3,r3,r4
   2d2a8:	80ca983a 	sll	r5,r16,r3
   2d2ac:	00800434 	movhi	r2,16
   2d2b0:	10bfffc4 	addi	r2,r2,-1
   2d2b4:	2101ffcc 	andi	r4,r4,2047
   2d2b8:	0021883a 	mov	r16,zero
   2d2bc:	288a703a 	and	r5,r5,r2
   2d2c0:	2008953a 	slli	r4,r4,20
   2d2c4:	00c00434 	movhi	r3,16
   2d2c8:	18ffffc4 	addi	r3,r3,-1
   2d2cc:	28c6703a 	and	r3,r5,r3
   2d2d0:	8005883a 	mov	r2,r16
   2d2d4:	1906b03a 	or	r3,r3,r4
   2d2d8:	dfc00117 	ldw	ra,4(sp)
   2d2dc:	dc000017 	ldw	r16,0(sp)
   2d2e0:	dec00204 	addi	sp,sp,8
   2d2e4:	f800283a 	ret
   2d2e8:	00c002c4 	movi	r3,11
   2d2ec:	188bc83a 	sub	r5,r3,r2
   2d2f0:	814ad83a 	srl	r5,r16,r5
   2d2f4:	00c00434 	movhi	r3,16
   2d2f8:	18ffffc4 	addi	r3,r3,-1
   2d2fc:	81a0983a 	sll	r16,r16,r6
   2d300:	2101ffcc 	andi	r4,r4,2047
   2d304:	28ca703a 	and	r5,r5,r3
   2d308:	003fed06 	br	2d2c0 <__alt_data_end+0xfffed2c0>
   2d30c:	0009883a 	mov	r4,zero
   2d310:	000b883a 	mov	r5,zero
   2d314:	003fea06 	br	2d2c0 <__alt_data_end+0xfffed2c0>

0002d318 <__clzsi2>:
   2d318:	00bfffd4 	movui	r2,65535
   2d31c:	11000536 	bltu	r2,r4,2d334 <__clzsi2+0x1c>
   2d320:	00803fc4 	movi	r2,255
   2d324:	11000f36 	bltu	r2,r4,2d364 <__clzsi2+0x4c>
   2d328:	00800804 	movi	r2,32
   2d32c:	0007883a 	mov	r3,zero
   2d330:	00000506 	br	2d348 <__clzsi2+0x30>
   2d334:	00804034 	movhi	r2,256
   2d338:	10bfffc4 	addi	r2,r2,-1
   2d33c:	11000c2e 	bgeu	r2,r4,2d370 <__clzsi2+0x58>
   2d340:	00800204 	movi	r2,8
   2d344:	00c00604 	movi	r3,24
   2d348:	20c8d83a 	srl	r4,r4,r3
   2d34c:	00c000f4 	movhi	r3,3
   2d350:	18c09204 	addi	r3,r3,584
   2d354:	1909883a 	add	r4,r3,r4
   2d358:	20c00003 	ldbu	r3,0(r4)
   2d35c:	10c5c83a 	sub	r2,r2,r3
   2d360:	f800283a 	ret
   2d364:	00800604 	movi	r2,24
   2d368:	00c00204 	movi	r3,8
   2d36c:	003ff606 	br	2d348 <__alt_data_end+0xfffed348>
   2d370:	00800404 	movi	r2,16
   2d374:	1007883a 	mov	r3,r2
   2d378:	003ff306 	br	2d348 <__alt_data_end+0xfffed348>

0002d37c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2d37c:	defffe04 	addi	sp,sp,-8
   2d380:	dfc00115 	stw	ra,4(sp)
   2d384:	df000015 	stw	fp,0(sp)
   2d388:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2d38c:	d0a00b17 	ldw	r2,-32724(gp)
   2d390:	10000326 	beq	r2,zero,2d3a0 <alt_get_errno+0x24>
   2d394:	d0a00b17 	ldw	r2,-32724(gp)
   2d398:	103ee83a 	callr	r2
   2d39c:	00000106 	br	2d3a4 <alt_get_errno+0x28>
   2d3a0:	d0a6d404 	addi	r2,gp,-25776
}
   2d3a4:	e037883a 	mov	sp,fp
   2d3a8:	dfc00117 	ldw	ra,4(sp)
   2d3ac:	df000017 	ldw	fp,0(sp)
   2d3b0:	dec00204 	addi	sp,sp,8
   2d3b4:	f800283a 	ret

0002d3b8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   2d3b8:	defffb04 	addi	sp,sp,-20
   2d3bc:	dfc00415 	stw	ra,16(sp)
   2d3c0:	df000315 	stw	fp,12(sp)
   2d3c4:	df000304 	addi	fp,sp,12
   2d3c8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   2d3cc:	e0bfff17 	ldw	r2,-4(fp)
   2d3d0:	10000616 	blt	r2,zero,2d3ec <close+0x34>
   2d3d4:	e0bfff17 	ldw	r2,-4(fp)
   2d3d8:	10c00324 	muli	r3,r2,12
   2d3dc:	008000f4 	movhi	r2,3
   2d3e0:	10831204 	addi	r2,r2,3144
   2d3e4:	1885883a 	add	r2,r3,r2
   2d3e8:	00000106 	br	2d3f0 <close+0x38>
   2d3ec:	0005883a 	mov	r2,zero
   2d3f0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   2d3f4:	e0bffd17 	ldw	r2,-12(fp)
   2d3f8:	10001926 	beq	r2,zero,2d460 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   2d3fc:	e0bffd17 	ldw	r2,-12(fp)
   2d400:	10800017 	ldw	r2,0(r2)
   2d404:	10800417 	ldw	r2,16(r2)
   2d408:	10000626 	beq	r2,zero,2d424 <close+0x6c>
   2d40c:	e0bffd17 	ldw	r2,-12(fp)
   2d410:	10800017 	ldw	r2,0(r2)
   2d414:	10800417 	ldw	r2,16(r2)
   2d418:	e13ffd17 	ldw	r4,-12(fp)
   2d41c:	103ee83a 	callr	r2
   2d420:	00000106 	br	2d428 <close+0x70>
   2d424:	0005883a 	mov	r2,zero
   2d428:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   2d42c:	e13fff17 	ldw	r4,-4(fp)
   2d430:	002df800 	call	2df80 <alt_release_fd>
    if (rval < 0)
   2d434:	e0bffe17 	ldw	r2,-8(fp)
   2d438:	1000070e 	bge	r2,zero,2d458 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   2d43c:	002d37c0 	call	2d37c <alt_get_errno>
   2d440:	1007883a 	mov	r3,r2
   2d444:	e0bffe17 	ldw	r2,-8(fp)
   2d448:	0085c83a 	sub	r2,zero,r2
   2d44c:	18800015 	stw	r2,0(r3)
      return -1;
   2d450:	00bfffc4 	movi	r2,-1
   2d454:	00000706 	br	2d474 <close+0xbc>
    }
    return 0;
   2d458:	0005883a 	mov	r2,zero
   2d45c:	00000506 	br	2d474 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2d460:	002d37c0 	call	2d37c <alt_get_errno>
   2d464:	1007883a 	mov	r3,r2
   2d468:	00801444 	movi	r2,81
   2d46c:	18800015 	stw	r2,0(r3)
    return -1;
   2d470:	00bfffc4 	movi	r2,-1
  }
}
   2d474:	e037883a 	mov	sp,fp
   2d478:	dfc00117 	ldw	ra,4(sp)
   2d47c:	df000017 	ldw	fp,0(sp)
   2d480:	dec00204 	addi	sp,sp,8
   2d484:	f800283a 	ret

0002d488 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   2d488:	defffc04 	addi	sp,sp,-16
   2d48c:	df000315 	stw	fp,12(sp)
   2d490:	df000304 	addi	fp,sp,12
   2d494:	e13ffd15 	stw	r4,-12(fp)
   2d498:	e17ffe15 	stw	r5,-8(fp)
   2d49c:	e1bfff15 	stw	r6,-4(fp)
  return len;
   2d4a0:	e0bfff17 	ldw	r2,-4(fp)
}
   2d4a4:	e037883a 	mov	sp,fp
   2d4a8:	df000017 	ldw	fp,0(sp)
   2d4ac:	dec00104 	addi	sp,sp,4
   2d4b0:	f800283a 	ret

0002d4b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2d4b4:	defffe04 	addi	sp,sp,-8
   2d4b8:	dfc00115 	stw	ra,4(sp)
   2d4bc:	df000015 	stw	fp,0(sp)
   2d4c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2d4c4:	d0a00b17 	ldw	r2,-32724(gp)
   2d4c8:	10000326 	beq	r2,zero,2d4d8 <alt_get_errno+0x24>
   2d4cc:	d0a00b17 	ldw	r2,-32724(gp)
   2d4d0:	103ee83a 	callr	r2
   2d4d4:	00000106 	br	2d4dc <alt_get_errno+0x28>
   2d4d8:	d0a6d404 	addi	r2,gp,-25776
}
   2d4dc:	e037883a 	mov	sp,fp
   2d4e0:	dfc00117 	ldw	ra,4(sp)
   2d4e4:	df000017 	ldw	fp,0(sp)
   2d4e8:	dec00204 	addi	sp,sp,8
   2d4ec:	f800283a 	ret

0002d4f0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   2d4f0:	defffb04 	addi	sp,sp,-20
   2d4f4:	dfc00415 	stw	ra,16(sp)
   2d4f8:	df000315 	stw	fp,12(sp)
   2d4fc:	df000304 	addi	fp,sp,12
   2d500:	e13ffe15 	stw	r4,-8(fp)
   2d504:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2d508:	e0bffe17 	ldw	r2,-8(fp)
   2d50c:	10000616 	blt	r2,zero,2d528 <fstat+0x38>
   2d510:	e0bffe17 	ldw	r2,-8(fp)
   2d514:	10c00324 	muli	r3,r2,12
   2d518:	008000f4 	movhi	r2,3
   2d51c:	10831204 	addi	r2,r2,3144
   2d520:	1885883a 	add	r2,r3,r2
   2d524:	00000106 	br	2d52c <fstat+0x3c>
   2d528:	0005883a 	mov	r2,zero
   2d52c:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   2d530:	e0bffd17 	ldw	r2,-12(fp)
   2d534:	10001026 	beq	r2,zero,2d578 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   2d538:	e0bffd17 	ldw	r2,-12(fp)
   2d53c:	10800017 	ldw	r2,0(r2)
   2d540:	10800817 	ldw	r2,32(r2)
   2d544:	10000726 	beq	r2,zero,2d564 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   2d548:	e0bffd17 	ldw	r2,-12(fp)
   2d54c:	10800017 	ldw	r2,0(r2)
   2d550:	10800817 	ldw	r2,32(r2)
   2d554:	e17fff17 	ldw	r5,-4(fp)
   2d558:	e13ffd17 	ldw	r4,-12(fp)
   2d55c:	103ee83a 	callr	r2
   2d560:	00000a06 	br	2d58c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   2d564:	e0bfff17 	ldw	r2,-4(fp)
   2d568:	00c80004 	movi	r3,8192
   2d56c:	10c00115 	stw	r3,4(r2)
      return 0;
   2d570:	0005883a 	mov	r2,zero
   2d574:	00000506 	br	2d58c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2d578:	002d4b40 	call	2d4b4 <alt_get_errno>
   2d57c:	1007883a 	mov	r3,r2
   2d580:	00801444 	movi	r2,81
   2d584:	18800015 	stw	r2,0(r3)
    return -1;
   2d588:	00bfffc4 	movi	r2,-1
  }
}
   2d58c:	e037883a 	mov	sp,fp
   2d590:	dfc00117 	ldw	ra,4(sp)
   2d594:	df000017 	ldw	fp,0(sp)
   2d598:	dec00204 	addi	sp,sp,8
   2d59c:	f800283a 	ret

0002d5a0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   2d5a0:	defff904 	addi	sp,sp,-28
   2d5a4:	dfc00615 	stw	ra,24(sp)
   2d5a8:	df000515 	stw	fp,20(sp)
   2d5ac:	df000504 	addi	fp,sp,20
   2d5b0:	e13ffc15 	stw	r4,-16(fp)
   2d5b4:	e17ffd15 	stw	r5,-12(fp)
   2d5b8:	e1bffe15 	stw	r6,-8(fp)
   2d5bc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   2d5c0:	e0800217 	ldw	r2,8(fp)
   2d5c4:	d8800015 	stw	r2,0(sp)
   2d5c8:	e1ffff17 	ldw	r7,-4(fp)
   2d5cc:	e1bffe17 	ldw	r6,-8(fp)
   2d5d0:	e17ffd17 	ldw	r5,-12(fp)
   2d5d4:	e13ffc17 	ldw	r4,-16(fp)
   2d5d8:	002d7500 	call	2d750 <alt_iic_isr_register>
}  
   2d5dc:	e037883a 	mov	sp,fp
   2d5e0:	dfc00117 	ldw	ra,4(sp)
   2d5e4:	df000017 	ldw	fp,0(sp)
   2d5e8:	dec00204 	addi	sp,sp,8
   2d5ec:	f800283a 	ret

0002d5f0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   2d5f0:	defff904 	addi	sp,sp,-28
   2d5f4:	df000615 	stw	fp,24(sp)
   2d5f8:	df000604 	addi	fp,sp,24
   2d5fc:	e13ffe15 	stw	r4,-8(fp)
   2d600:	e17fff15 	stw	r5,-4(fp)
   2d604:	e0bfff17 	ldw	r2,-4(fp)
   2d608:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2d60c:	0005303a 	rdctl	r2,status
   2d610:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2d614:	e0fffb17 	ldw	r3,-20(fp)
   2d618:	00bfff84 	movi	r2,-2
   2d61c:	1884703a 	and	r2,r3,r2
   2d620:	1001703a 	wrctl	status,r2
  
  return context;
   2d624:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   2d628:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   2d62c:	00c00044 	movi	r3,1
   2d630:	e0bffa17 	ldw	r2,-24(fp)
   2d634:	1884983a 	sll	r2,r3,r2
   2d638:	1007883a 	mov	r3,r2
   2d63c:	d0a6d517 	ldw	r2,-25772(gp)
   2d640:	1884b03a 	or	r2,r3,r2
   2d644:	d0a6d515 	stw	r2,-25772(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   2d648:	d0a6d517 	ldw	r2,-25772(gp)
   2d64c:	100170fa 	wrctl	ienable,r2
   2d650:	e0bffc17 	ldw	r2,-16(fp)
   2d654:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2d658:	e0bffd17 	ldw	r2,-12(fp)
   2d65c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   2d660:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   2d664:	0001883a 	nop
}
   2d668:	e037883a 	mov	sp,fp
   2d66c:	df000017 	ldw	fp,0(sp)
   2d670:	dec00104 	addi	sp,sp,4
   2d674:	f800283a 	ret

0002d678 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   2d678:	defff904 	addi	sp,sp,-28
   2d67c:	df000615 	stw	fp,24(sp)
   2d680:	df000604 	addi	fp,sp,24
   2d684:	e13ffe15 	stw	r4,-8(fp)
   2d688:	e17fff15 	stw	r5,-4(fp)
   2d68c:	e0bfff17 	ldw	r2,-4(fp)
   2d690:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2d694:	0005303a 	rdctl	r2,status
   2d698:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2d69c:	e0fffb17 	ldw	r3,-20(fp)
   2d6a0:	00bfff84 	movi	r2,-2
   2d6a4:	1884703a 	and	r2,r3,r2
   2d6a8:	1001703a 	wrctl	status,r2
  
  return context;
   2d6ac:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   2d6b0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   2d6b4:	00c00044 	movi	r3,1
   2d6b8:	e0bffa17 	ldw	r2,-24(fp)
   2d6bc:	1884983a 	sll	r2,r3,r2
   2d6c0:	0084303a 	nor	r2,zero,r2
   2d6c4:	1007883a 	mov	r3,r2
   2d6c8:	d0a6d517 	ldw	r2,-25772(gp)
   2d6cc:	1884703a 	and	r2,r3,r2
   2d6d0:	d0a6d515 	stw	r2,-25772(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   2d6d4:	d0a6d517 	ldw	r2,-25772(gp)
   2d6d8:	100170fa 	wrctl	ienable,r2
   2d6dc:	e0bffc17 	ldw	r2,-16(fp)
   2d6e0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2d6e4:	e0bffd17 	ldw	r2,-12(fp)
   2d6e8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   2d6ec:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   2d6f0:	0001883a 	nop
}
   2d6f4:	e037883a 	mov	sp,fp
   2d6f8:	df000017 	ldw	fp,0(sp)
   2d6fc:	dec00104 	addi	sp,sp,4
   2d700:	f800283a 	ret

0002d704 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   2d704:	defffc04 	addi	sp,sp,-16
   2d708:	df000315 	stw	fp,12(sp)
   2d70c:	df000304 	addi	fp,sp,12
   2d710:	e13ffe15 	stw	r4,-8(fp)
   2d714:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   2d718:	000530fa 	rdctl	r2,ienable
   2d71c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   2d720:	00c00044 	movi	r3,1
   2d724:	e0bfff17 	ldw	r2,-4(fp)
   2d728:	1884983a 	sll	r2,r3,r2
   2d72c:	1007883a 	mov	r3,r2
   2d730:	e0bffd17 	ldw	r2,-12(fp)
   2d734:	1884703a 	and	r2,r3,r2
   2d738:	1004c03a 	cmpne	r2,r2,zero
   2d73c:	10803fcc 	andi	r2,r2,255
}
   2d740:	e037883a 	mov	sp,fp
   2d744:	df000017 	ldw	fp,0(sp)
   2d748:	dec00104 	addi	sp,sp,4
   2d74c:	f800283a 	ret

0002d750 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   2d750:	defff504 	addi	sp,sp,-44
   2d754:	dfc00a15 	stw	ra,40(sp)
   2d758:	df000915 	stw	fp,36(sp)
   2d75c:	df000904 	addi	fp,sp,36
   2d760:	e13ffc15 	stw	r4,-16(fp)
   2d764:	e17ffd15 	stw	r5,-12(fp)
   2d768:	e1bffe15 	stw	r6,-8(fp)
   2d76c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   2d770:	00bffa84 	movi	r2,-22
   2d774:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   2d778:	e0bffd17 	ldw	r2,-12(fp)
   2d77c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   2d780:	e0bff817 	ldw	r2,-32(fp)
   2d784:	10800808 	cmpgei	r2,r2,32
   2d788:	1000271e 	bne	r2,zero,2d828 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2d78c:	0005303a 	rdctl	r2,status
   2d790:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2d794:	e0fffb17 	ldw	r3,-20(fp)
   2d798:	00bfff84 	movi	r2,-2
   2d79c:	1884703a 	and	r2,r3,r2
   2d7a0:	1001703a 	wrctl	status,r2
  
  return context;
   2d7a4:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   2d7a8:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   2d7ac:	008000f4 	movhi	r2,3
   2d7b0:	108e7004 	addi	r2,r2,14784
   2d7b4:	e0fff817 	ldw	r3,-32(fp)
   2d7b8:	180690fa 	slli	r3,r3,3
   2d7bc:	10c5883a 	add	r2,r2,r3
   2d7c0:	e0fffe17 	ldw	r3,-8(fp)
   2d7c4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   2d7c8:	008000f4 	movhi	r2,3
   2d7cc:	108e7004 	addi	r2,r2,14784
   2d7d0:	e0fff817 	ldw	r3,-32(fp)
   2d7d4:	180690fa 	slli	r3,r3,3
   2d7d8:	10c5883a 	add	r2,r2,r3
   2d7dc:	10800104 	addi	r2,r2,4
   2d7e0:	e0ffff17 	ldw	r3,-4(fp)
   2d7e4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   2d7e8:	e0bffe17 	ldw	r2,-8(fp)
   2d7ec:	10000526 	beq	r2,zero,2d804 <alt_iic_isr_register+0xb4>
   2d7f0:	e0bff817 	ldw	r2,-32(fp)
   2d7f4:	100b883a 	mov	r5,r2
   2d7f8:	e13ffc17 	ldw	r4,-16(fp)
   2d7fc:	002d5f00 	call	2d5f0 <alt_ic_irq_enable>
   2d800:	00000406 	br	2d814 <alt_iic_isr_register+0xc4>
   2d804:	e0bff817 	ldw	r2,-32(fp)
   2d808:	100b883a 	mov	r5,r2
   2d80c:	e13ffc17 	ldw	r4,-16(fp)
   2d810:	002d6780 	call	2d678 <alt_ic_irq_disable>
   2d814:	e0bff715 	stw	r2,-36(fp)
   2d818:	e0bffa17 	ldw	r2,-24(fp)
   2d81c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2d820:	e0bff917 	ldw	r2,-28(fp)
   2d824:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   2d828:	e0bff717 	ldw	r2,-36(fp)
}
   2d82c:	e037883a 	mov	sp,fp
   2d830:	dfc00117 	ldw	ra,4(sp)
   2d834:	df000017 	ldw	fp,0(sp)
   2d838:	dec00204 	addi	sp,sp,8
   2d83c:	f800283a 	ret

0002d840 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2d840:	defffe04 	addi	sp,sp,-8
   2d844:	dfc00115 	stw	ra,4(sp)
   2d848:	df000015 	stw	fp,0(sp)
   2d84c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2d850:	d0a00b17 	ldw	r2,-32724(gp)
   2d854:	10000326 	beq	r2,zero,2d864 <alt_get_errno+0x24>
   2d858:	d0a00b17 	ldw	r2,-32724(gp)
   2d85c:	103ee83a 	callr	r2
   2d860:	00000106 	br	2d868 <alt_get_errno+0x28>
   2d864:	d0a6d404 	addi	r2,gp,-25776
}
   2d868:	e037883a 	mov	sp,fp
   2d86c:	dfc00117 	ldw	ra,4(sp)
   2d870:	df000017 	ldw	fp,0(sp)
   2d874:	dec00204 	addi	sp,sp,8
   2d878:	f800283a 	ret

0002d87c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   2d87c:	deffed04 	addi	sp,sp,-76
   2d880:	dfc01215 	stw	ra,72(sp)
   2d884:	df001115 	stw	fp,68(sp)
   2d888:	df001104 	addi	fp,sp,68
   2d88c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2d890:	e0bfff17 	ldw	r2,-4(fp)
   2d894:	10000616 	blt	r2,zero,2d8b0 <isatty+0x34>
   2d898:	e0bfff17 	ldw	r2,-4(fp)
   2d89c:	10c00324 	muli	r3,r2,12
   2d8a0:	008000f4 	movhi	r2,3
   2d8a4:	10831204 	addi	r2,r2,3144
   2d8a8:	1885883a 	add	r2,r3,r2
   2d8ac:	00000106 	br	2d8b4 <isatty+0x38>
   2d8b0:	0005883a 	mov	r2,zero
   2d8b4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   2d8b8:	e0bfef17 	ldw	r2,-68(fp)
   2d8bc:	10000e26 	beq	r2,zero,2d8f8 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   2d8c0:	e0bfef17 	ldw	r2,-68(fp)
   2d8c4:	10800017 	ldw	r2,0(r2)
   2d8c8:	10800817 	ldw	r2,32(r2)
   2d8cc:	1000021e 	bne	r2,zero,2d8d8 <isatty+0x5c>
    {
      return 1;
   2d8d0:	00800044 	movi	r2,1
   2d8d4:	00000d06 	br	2d90c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   2d8d8:	e0bff004 	addi	r2,fp,-64
   2d8dc:	100b883a 	mov	r5,r2
   2d8e0:	e13fff17 	ldw	r4,-4(fp)
   2d8e4:	002d4f00 	call	2d4f0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   2d8e8:	e0bff117 	ldw	r2,-60(fp)
   2d8ec:	10880020 	cmpeqi	r2,r2,8192
   2d8f0:	10803fcc 	andi	r2,r2,255
   2d8f4:	00000506 	br	2d90c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2d8f8:	002d8400 	call	2d840 <alt_get_errno>
   2d8fc:	1007883a 	mov	r3,r2
   2d900:	00801444 	movi	r2,81
   2d904:	18800015 	stw	r2,0(r3)
    return 0;
   2d908:	0005883a 	mov	r2,zero
  }
}
   2d90c:	e037883a 	mov	sp,fp
   2d910:	dfc00117 	ldw	ra,4(sp)
   2d914:	df000017 	ldw	fp,0(sp)
   2d918:	dec00204 	addi	sp,sp,8
   2d91c:	f800283a 	ret

0002d920 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   2d920:	defffc04 	addi	sp,sp,-16
   2d924:	df000315 	stw	fp,12(sp)
   2d928:	df000304 	addi	fp,sp,12
   2d92c:	e13ffd15 	stw	r4,-12(fp)
   2d930:	e17ffe15 	stw	r5,-8(fp)
   2d934:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   2d938:	e0fffe17 	ldw	r3,-8(fp)
   2d93c:	e0bffd17 	ldw	r2,-12(fp)
   2d940:	18800c26 	beq	r3,r2,2d974 <alt_load_section+0x54>
  {
    while( to != end )
   2d944:	00000806 	br	2d968 <alt_load_section+0x48>
    {
      *to++ = *from++;
   2d948:	e0bffe17 	ldw	r2,-8(fp)
   2d94c:	10c00104 	addi	r3,r2,4
   2d950:	e0fffe15 	stw	r3,-8(fp)
   2d954:	e0fffd17 	ldw	r3,-12(fp)
   2d958:	19000104 	addi	r4,r3,4
   2d95c:	e13ffd15 	stw	r4,-12(fp)
   2d960:	18c00017 	ldw	r3,0(r3)
   2d964:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   2d968:	e0fffe17 	ldw	r3,-8(fp)
   2d96c:	e0bfff17 	ldw	r2,-4(fp)
   2d970:	18bff51e 	bne	r3,r2,2d948 <__alt_data_end+0xfffed948>
    {
      *to++ = *from++;
    }
  }
}
   2d974:	0001883a 	nop
   2d978:	e037883a 	mov	sp,fp
   2d97c:	df000017 	ldw	fp,0(sp)
   2d980:	dec00104 	addi	sp,sp,4
   2d984:	f800283a 	ret

0002d988 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   2d988:	defffe04 	addi	sp,sp,-8
   2d98c:	dfc00115 	stw	ra,4(sp)
   2d990:	df000015 	stw	fp,0(sp)
   2d994:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   2d998:	018000f4 	movhi	r6,3
   2d99c:	31879a04 	addi	r6,r6,7784
   2d9a0:	014000f4 	movhi	r5,3
   2d9a4:	2940df04 	addi	r5,r5,892
   2d9a8:	010000f4 	movhi	r4,3
   2d9ac:	21079a04 	addi	r4,r4,7784
   2d9b0:	002d9200 	call	2d920 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   2d9b4:	018000b4 	movhi	r6,2
   2d9b8:	31809504 	addi	r6,r6,596
   2d9bc:	014000b4 	movhi	r5,2
   2d9c0:	29400804 	addi	r5,r5,32
   2d9c4:	010000b4 	movhi	r4,2
   2d9c8:	21000804 	addi	r4,r4,32
   2d9cc:	002d9200 	call	2d920 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   2d9d0:	018000f4 	movhi	r6,3
   2d9d4:	3180df04 	addi	r6,r6,892
   2d9d8:	014000f4 	movhi	r5,3
   2d9dc:	297f8b04 	addi	r5,r5,-468
   2d9e0:	010000f4 	movhi	r4,3
   2d9e4:	213f8b04 	addi	r4,r4,-468
   2d9e8:	002d9200 	call	2d920 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   2d9ec:	002ef1c0 	call	2ef1c <alt_dcache_flush_all>
  alt_icache_flush_all();
   2d9f0:	002f0dc0 	call	2f0dc <alt_icache_flush_all>
}
   2d9f4:	0001883a 	nop
   2d9f8:	e037883a 	mov	sp,fp
   2d9fc:	dfc00117 	ldw	ra,4(sp)
   2da00:	df000017 	ldw	fp,0(sp)
   2da04:	dec00204 	addi	sp,sp,8
   2da08:	f800283a 	ret

0002da0c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2da0c:	defffe04 	addi	sp,sp,-8
   2da10:	dfc00115 	stw	ra,4(sp)
   2da14:	df000015 	stw	fp,0(sp)
   2da18:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2da1c:	d0a00b17 	ldw	r2,-32724(gp)
   2da20:	10000326 	beq	r2,zero,2da30 <alt_get_errno+0x24>
   2da24:	d0a00b17 	ldw	r2,-32724(gp)
   2da28:	103ee83a 	callr	r2
   2da2c:	00000106 	br	2da34 <alt_get_errno+0x28>
   2da30:	d0a6d404 	addi	r2,gp,-25776
}
   2da34:	e037883a 	mov	sp,fp
   2da38:	dfc00117 	ldw	ra,4(sp)
   2da3c:	df000017 	ldw	fp,0(sp)
   2da40:	dec00204 	addi	sp,sp,8
   2da44:	f800283a 	ret

0002da48 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   2da48:	defff904 	addi	sp,sp,-28
   2da4c:	dfc00615 	stw	ra,24(sp)
   2da50:	df000515 	stw	fp,20(sp)
   2da54:	df000504 	addi	fp,sp,20
   2da58:	e13ffd15 	stw	r4,-12(fp)
   2da5c:	e17ffe15 	stw	r5,-8(fp)
   2da60:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   2da64:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2da68:	e0bffd17 	ldw	r2,-12(fp)
   2da6c:	10000616 	blt	r2,zero,2da88 <lseek+0x40>
   2da70:	e0bffd17 	ldw	r2,-12(fp)
   2da74:	10c00324 	muli	r3,r2,12
   2da78:	008000f4 	movhi	r2,3
   2da7c:	10831204 	addi	r2,r2,3144
   2da80:	1885883a 	add	r2,r3,r2
   2da84:	00000106 	br	2da8c <lseek+0x44>
   2da88:	0005883a 	mov	r2,zero
   2da8c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   2da90:	e0bffc17 	ldw	r2,-16(fp)
   2da94:	10001026 	beq	r2,zero,2dad8 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   2da98:	e0bffc17 	ldw	r2,-16(fp)
   2da9c:	10800017 	ldw	r2,0(r2)
   2daa0:	10800717 	ldw	r2,28(r2)
   2daa4:	10000926 	beq	r2,zero,2dacc <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   2daa8:	e0bffc17 	ldw	r2,-16(fp)
   2daac:	10800017 	ldw	r2,0(r2)
   2dab0:	10800717 	ldw	r2,28(r2)
   2dab4:	e1bfff17 	ldw	r6,-4(fp)
   2dab8:	e17ffe17 	ldw	r5,-8(fp)
   2dabc:	e13ffc17 	ldw	r4,-16(fp)
   2dac0:	103ee83a 	callr	r2
   2dac4:	e0bffb15 	stw	r2,-20(fp)
   2dac8:	00000506 	br	2dae0 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   2dacc:	00bfde84 	movi	r2,-134
   2dad0:	e0bffb15 	stw	r2,-20(fp)
   2dad4:	00000206 	br	2dae0 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   2dad8:	00bfebc4 	movi	r2,-81
   2dadc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   2dae0:	e0bffb17 	ldw	r2,-20(fp)
   2dae4:	1000070e 	bge	r2,zero,2db04 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   2dae8:	002da0c0 	call	2da0c <alt_get_errno>
   2daec:	1007883a 	mov	r3,r2
   2daf0:	e0bffb17 	ldw	r2,-20(fp)
   2daf4:	0085c83a 	sub	r2,zero,r2
   2daf8:	18800015 	stw	r2,0(r3)
    rc = -1;
   2dafc:	00bfffc4 	movi	r2,-1
   2db00:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   2db04:	e0bffb17 	ldw	r2,-20(fp)
}
   2db08:	e037883a 	mov	sp,fp
   2db0c:	dfc00117 	ldw	ra,4(sp)
   2db10:	df000017 	ldw	fp,0(sp)
   2db14:	dec00204 	addi	sp,sp,8
   2db18:	f800283a 	ret

0002db1c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   2db1c:	defffd04 	addi	sp,sp,-12
   2db20:	dfc00215 	stw	ra,8(sp)
   2db24:	df000115 	stw	fp,4(sp)
   2db28:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   2db2c:	0009883a 	mov	r4,zero
   2db30:	002e1fc0 	call	2e1fc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   2db34:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   2db38:	002e2340 	call	2e234 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   2db3c:	018000f4 	movhi	r6,3
   2db40:	3180d504 	addi	r6,r6,852
   2db44:	014000f4 	movhi	r5,3
   2db48:	2940d504 	addi	r5,r5,852
   2db4c:	010000f4 	movhi	r4,3
   2db50:	2100d504 	addi	r4,r4,852
   2db54:	002f25c0 	call	2f25c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   2db58:	002f01c0 	call	2f01c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   2db5c:	010000f4 	movhi	r4,3
   2db60:	213c1f04 	addi	r4,r4,-3972
   2db64:	002f9300 	call	2f930 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   2db68:	d0a6d617 	ldw	r2,-25768(gp)
   2db6c:	d0e6d717 	ldw	r3,-25764(gp)
   2db70:	d126d817 	ldw	r4,-25760(gp)
   2db74:	200d883a 	mov	r6,r4
   2db78:	180b883a 	mov	r5,r3
   2db7c:	1009883a 	mov	r4,r2
   2db80:	0020b000 	call	20b00 <main>
   2db84:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   2db88:	01000044 	movi	r4,1
   2db8c:	002d3b80 	call	2d3b8 <close>
  exit (result);
   2db90:	e13fff17 	ldw	r4,-4(fp)
   2db94:	002f9440 	call	2f944 <exit>

0002db98 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   2db98:	defffe04 	addi	sp,sp,-8
   2db9c:	df000115 	stw	fp,4(sp)
   2dba0:	df000104 	addi	fp,sp,4
   2dba4:	e13fff15 	stw	r4,-4(fp)
}
   2dba8:	0001883a 	nop
   2dbac:	e037883a 	mov	sp,fp
   2dbb0:	df000017 	ldw	fp,0(sp)
   2dbb4:	dec00104 	addi	sp,sp,4
   2dbb8:	f800283a 	ret

0002dbbc <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   2dbbc:	defffe04 	addi	sp,sp,-8
   2dbc0:	df000115 	stw	fp,4(sp)
   2dbc4:	df000104 	addi	fp,sp,4
   2dbc8:	e13fff15 	stw	r4,-4(fp)
}
   2dbcc:	0001883a 	nop
   2dbd0:	e037883a 	mov	sp,fp
   2dbd4:	df000017 	ldw	fp,0(sp)
   2dbd8:	dec00104 	addi	sp,sp,4
   2dbdc:	f800283a 	ret

0002dbe0 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   2dbe0:	defff204 	addi	sp,sp,-56
   2dbe4:	dfc00a15 	stw	ra,40(sp)
   2dbe8:	df000915 	stw	fp,36(sp)
   2dbec:	df000904 	addi	fp,sp,36
   2dbf0:	e13fff15 	stw	r4,-4(fp)
   2dbf4:	e1400215 	stw	r5,8(fp)
   2dbf8:	e1800315 	stw	r6,12(fp)
   2dbfc:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
   2dc00:	e0800204 	addi	r2,fp,8
   2dc04:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   2dc08:	e0bfff17 	ldw	r2,-4(fp)
   2dc0c:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
   2dc10:	00006f06 	br	2ddd0 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   2dc14:	e0bff807 	ldb	r2,-32(fp)
   2dc18:	10800960 	cmpeqi	r2,r2,37
   2dc1c:	1000041e 	bne	r2,zero,2dc30 <alt_printf+0x50>
        {
            alt_putchar(c);
   2dc20:	e0bff807 	ldb	r2,-32(fp)
   2dc24:	1009883a 	mov	r4,r2
   2dc28:	002de0c0 	call	2de0c <alt_putchar>
   2dc2c:	00006806 	br	2ddd0 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   2dc30:	e0bff717 	ldw	r2,-36(fp)
   2dc34:	10c00044 	addi	r3,r2,1
   2dc38:	e0fff715 	stw	r3,-36(fp)
   2dc3c:	10800003 	ldbu	r2,0(r2)
   2dc40:	e0bff805 	stb	r2,-32(fp)
   2dc44:	e0bff807 	ldb	r2,-32(fp)
   2dc48:	10006926 	beq	r2,zero,2ddf0 <alt_printf+0x210>
            {
                if (c == '%')
   2dc4c:	e0bff807 	ldb	r2,-32(fp)
   2dc50:	10800958 	cmpnei	r2,r2,37
   2dc54:	1000041e 	bne	r2,zero,2dc68 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   2dc58:	e0bff807 	ldb	r2,-32(fp)
   2dc5c:	1009883a 	mov	r4,r2
   2dc60:	002de0c0 	call	2de0c <alt_putchar>
   2dc64:	00005a06 	br	2ddd0 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
   2dc68:	e0bff807 	ldb	r2,-32(fp)
   2dc6c:	108018d8 	cmpnei	r2,r2,99
   2dc70:	1000081e 	bne	r2,zero,2dc94 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
   2dc74:	e0bffe17 	ldw	r2,-8(fp)
   2dc78:	10c00104 	addi	r3,r2,4
   2dc7c:	e0fffe15 	stw	r3,-8(fp)
   2dc80:	10800017 	ldw	r2,0(r2)
   2dc84:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
   2dc88:	e13ffd17 	ldw	r4,-12(fp)
   2dc8c:	002de0c0 	call	2de0c <alt_putchar>
   2dc90:	00004f06 	br	2ddd0 <alt_printf+0x1f0>
                }
                else if (c == 'x')
   2dc94:	e0bff807 	ldb	r2,-32(fp)
   2dc98:	10801e18 	cmpnei	r2,r2,120
   2dc9c:	1000341e 	bne	r2,zero,2dd70 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   2dca0:	e0bffe17 	ldw	r2,-8(fp)
   2dca4:	10c00104 	addi	r3,r2,4
   2dca8:	e0fffe15 	stw	r3,-8(fp)
   2dcac:	10800017 	ldw	r2,0(r2)
   2dcb0:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   2dcb4:	e0bffb17 	ldw	r2,-20(fp)
   2dcb8:	1000031e 	bne	r2,zero,2dcc8 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
   2dcbc:	01000c04 	movi	r4,48
   2dcc0:	002de0c0 	call	2de0c <alt_putchar>
                        continue;
   2dcc4:	00004206 	br	2ddd0 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   2dcc8:	00800704 	movi	r2,28
   2dccc:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
   2dcd0:	00000306 	br	2dce0 <alt_printf+0x100>
                        digit_shift -= 4;
   2dcd4:	e0bff917 	ldw	r2,-28(fp)
   2dcd8:	10bfff04 	addi	r2,r2,-4
   2dcdc:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   2dce0:	00c003c4 	movi	r3,15
   2dce4:	e0bff917 	ldw	r2,-28(fp)
   2dce8:	1884983a 	sll	r2,r3,r2
   2dcec:	1007883a 	mov	r3,r2
   2dcf0:	e0bffb17 	ldw	r2,-20(fp)
   2dcf4:	1884703a 	and	r2,r3,r2
   2dcf8:	103ff626 	beq	r2,zero,2dcd4 <__alt_data_end+0xfffedcd4>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   2dcfc:	00001906 	br	2dd64 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   2dd00:	00c003c4 	movi	r3,15
   2dd04:	e0bff917 	ldw	r2,-28(fp)
   2dd08:	1884983a 	sll	r2,r3,r2
   2dd0c:	1007883a 	mov	r3,r2
   2dd10:	e0bffb17 	ldw	r2,-20(fp)
   2dd14:	1886703a 	and	r3,r3,r2
   2dd18:	e0bff917 	ldw	r2,-28(fp)
   2dd1c:	1884d83a 	srl	r2,r3,r2
   2dd20:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
   2dd24:	e0bffc17 	ldw	r2,-16(fp)
   2dd28:	108002a8 	cmpgeui	r2,r2,10
   2dd2c:	1000041e 	bne	r2,zero,2dd40 <alt_printf+0x160>
                            c = '0' + digit;
   2dd30:	e0bffc17 	ldw	r2,-16(fp)
   2dd34:	10800c04 	addi	r2,r2,48
   2dd38:	e0bff805 	stb	r2,-32(fp)
   2dd3c:	00000306 	br	2dd4c <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
   2dd40:	e0bffc17 	ldw	r2,-16(fp)
   2dd44:	108015c4 	addi	r2,r2,87
   2dd48:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
   2dd4c:	e0bff807 	ldb	r2,-32(fp)
   2dd50:	1009883a 	mov	r4,r2
   2dd54:	002de0c0 	call	2de0c <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   2dd58:	e0bff917 	ldw	r2,-28(fp)
   2dd5c:	10bfff04 	addi	r2,r2,-4
   2dd60:	e0bff915 	stw	r2,-28(fp)
   2dd64:	e0bff917 	ldw	r2,-28(fp)
   2dd68:	103fe50e 	bge	r2,zero,2dd00 <__alt_data_end+0xfffedd00>
   2dd6c:	00001806 	br	2ddd0 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   2dd70:	e0bff807 	ldb	r2,-32(fp)
   2dd74:	10801cd8 	cmpnei	r2,r2,115
   2dd78:	1000151e 	bne	r2,zero,2ddd0 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   2dd7c:	e0bffe17 	ldw	r2,-8(fp)
   2dd80:	10c00104 	addi	r3,r2,4
   2dd84:	e0fffe15 	stw	r3,-8(fp)
   2dd88:	10800017 	ldw	r2,0(r2)
   2dd8c:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
   2dd90:	00000906 	br	2ddb8 <alt_printf+0x1d8>
                      alt_putchar(*s++);
   2dd94:	e0bffa17 	ldw	r2,-24(fp)
   2dd98:	10c00044 	addi	r3,r2,1
   2dd9c:	e0fffa15 	stw	r3,-24(fp)
   2dda0:	10800003 	ldbu	r2,0(r2)
   2dda4:	10803fcc 	andi	r2,r2,255
   2dda8:	1080201c 	xori	r2,r2,128
   2ddac:	10bfe004 	addi	r2,r2,-128
   2ddb0:	1009883a 	mov	r4,r2
   2ddb4:	002de0c0 	call	2de0c <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   2ddb8:	e0bffa17 	ldw	r2,-24(fp)
   2ddbc:	10800003 	ldbu	r2,0(r2)
   2ddc0:	10803fcc 	andi	r2,r2,255
   2ddc4:	1080201c 	xori	r2,r2,128
   2ddc8:	10bfe004 	addi	r2,r2,-128
   2ddcc:	103ff11e 	bne	r2,zero,2dd94 <__alt_data_end+0xfffedd94>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   2ddd0:	e0bff717 	ldw	r2,-36(fp)
   2ddd4:	10c00044 	addi	r3,r2,1
   2ddd8:	e0fff715 	stw	r3,-36(fp)
   2dddc:	10800003 	ldbu	r2,0(r2)
   2dde0:	e0bff805 	stb	r2,-32(fp)
   2dde4:	e0bff807 	ldb	r2,-32(fp)
   2dde8:	103f8a1e 	bne	r2,zero,2dc14 <__alt_data_end+0xfffedc14>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   2ddec:	00000106 	br	2ddf4 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
   2ddf0:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   2ddf4:	0001883a 	nop
   2ddf8:	e037883a 	mov	sp,fp
   2ddfc:	dfc00117 	ldw	ra,4(sp)
   2de00:	df000017 	ldw	fp,0(sp)
   2de04:	dec00504 	addi	sp,sp,20
   2de08:	f800283a 	ret

0002de0c <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   2de0c:	defffd04 	addi	sp,sp,-12
   2de10:	dfc00215 	stw	ra,8(sp)
   2de14:	df000115 	stw	fp,4(sp)
   2de18:	df000104 	addi	fp,sp,4
   2de1c:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   2de20:	d0a00117 	ldw	r2,-32764(gp)
   2de24:	10800217 	ldw	r2,8(r2)
   2de28:	100b883a 	mov	r5,r2
   2de2c:	e13fff17 	ldw	r4,-4(fp)
   2de30:	002fa980 	call	2fa98 <putc>
#endif
#endif
}
   2de34:	e037883a 	mov	sp,fp
   2de38:	dfc00117 	ldw	ra,4(sp)
   2de3c:	df000017 	ldw	fp,0(sp)
   2de40:	dec00204 	addi	sp,sp,8
   2de44:	f800283a 	ret

0002de48 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2de48:	defffe04 	addi	sp,sp,-8
   2de4c:	dfc00115 	stw	ra,4(sp)
   2de50:	df000015 	stw	fp,0(sp)
   2de54:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2de58:	d0a00b17 	ldw	r2,-32724(gp)
   2de5c:	10000326 	beq	r2,zero,2de6c <alt_get_errno+0x24>
   2de60:	d0a00b17 	ldw	r2,-32724(gp)
   2de64:	103ee83a 	callr	r2
   2de68:	00000106 	br	2de70 <alt_get_errno+0x28>
   2de6c:	d0a6d404 	addi	r2,gp,-25776
}
   2de70:	e037883a 	mov	sp,fp
   2de74:	dfc00117 	ldw	ra,4(sp)
   2de78:	df000017 	ldw	fp,0(sp)
   2de7c:	dec00204 	addi	sp,sp,8
   2de80:	f800283a 	ret

0002de84 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   2de84:	defff904 	addi	sp,sp,-28
   2de88:	dfc00615 	stw	ra,24(sp)
   2de8c:	df000515 	stw	fp,20(sp)
   2de90:	df000504 	addi	fp,sp,20
   2de94:	e13ffd15 	stw	r4,-12(fp)
   2de98:	e17ffe15 	stw	r5,-8(fp)
   2de9c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2dea0:	e0bffd17 	ldw	r2,-12(fp)
   2dea4:	10000616 	blt	r2,zero,2dec0 <read+0x3c>
   2dea8:	e0bffd17 	ldw	r2,-12(fp)
   2deac:	10c00324 	muli	r3,r2,12
   2deb0:	008000f4 	movhi	r2,3
   2deb4:	10831204 	addi	r2,r2,3144
   2deb8:	1885883a 	add	r2,r3,r2
   2debc:	00000106 	br	2dec4 <read+0x40>
   2dec0:	0005883a 	mov	r2,zero
   2dec4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   2dec8:	e0bffb17 	ldw	r2,-20(fp)
   2decc:	10002226 	beq	r2,zero,2df58 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   2ded0:	e0bffb17 	ldw	r2,-20(fp)
   2ded4:	10800217 	ldw	r2,8(r2)
   2ded8:	108000cc 	andi	r2,r2,3
   2dedc:	10800060 	cmpeqi	r2,r2,1
   2dee0:	1000181e 	bne	r2,zero,2df44 <read+0xc0>
        (fd->dev->read))
   2dee4:	e0bffb17 	ldw	r2,-20(fp)
   2dee8:	10800017 	ldw	r2,0(r2)
   2deec:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   2def0:	10001426 	beq	r2,zero,2df44 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   2def4:	e0bffb17 	ldw	r2,-20(fp)
   2def8:	10800017 	ldw	r2,0(r2)
   2defc:	10800517 	ldw	r2,20(r2)
   2df00:	e0ffff17 	ldw	r3,-4(fp)
   2df04:	180d883a 	mov	r6,r3
   2df08:	e17ffe17 	ldw	r5,-8(fp)
   2df0c:	e13ffb17 	ldw	r4,-20(fp)
   2df10:	103ee83a 	callr	r2
   2df14:	e0bffc15 	stw	r2,-16(fp)
   2df18:	e0bffc17 	ldw	r2,-16(fp)
   2df1c:	1000070e 	bge	r2,zero,2df3c <read+0xb8>
        {
          ALT_ERRNO = -rval;
   2df20:	002de480 	call	2de48 <alt_get_errno>
   2df24:	1007883a 	mov	r3,r2
   2df28:	e0bffc17 	ldw	r2,-16(fp)
   2df2c:	0085c83a 	sub	r2,zero,r2
   2df30:	18800015 	stw	r2,0(r3)
          return -1;
   2df34:	00bfffc4 	movi	r2,-1
   2df38:	00000c06 	br	2df6c <read+0xe8>
        }
        return rval;
   2df3c:	e0bffc17 	ldw	r2,-16(fp)
   2df40:	00000a06 	br	2df6c <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   2df44:	002de480 	call	2de48 <alt_get_errno>
   2df48:	1007883a 	mov	r3,r2
   2df4c:	00800344 	movi	r2,13
   2df50:	18800015 	stw	r2,0(r3)
   2df54:	00000406 	br	2df68 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   2df58:	002de480 	call	2de48 <alt_get_errno>
   2df5c:	1007883a 	mov	r3,r2
   2df60:	00801444 	movi	r2,81
   2df64:	18800015 	stw	r2,0(r3)
  }
  return -1;
   2df68:	00bfffc4 	movi	r2,-1
}
   2df6c:	e037883a 	mov	sp,fp
   2df70:	dfc00117 	ldw	ra,4(sp)
   2df74:	df000017 	ldw	fp,0(sp)
   2df78:	dec00204 	addi	sp,sp,8
   2df7c:	f800283a 	ret

0002df80 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   2df80:	defffe04 	addi	sp,sp,-8
   2df84:	df000115 	stw	fp,4(sp)
   2df88:	df000104 	addi	fp,sp,4
   2df8c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   2df90:	e0bfff17 	ldw	r2,-4(fp)
   2df94:	108000d0 	cmplti	r2,r2,3
   2df98:	10000d1e 	bne	r2,zero,2dfd0 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   2df9c:	008000f4 	movhi	r2,3
   2dfa0:	10831204 	addi	r2,r2,3144
   2dfa4:	e0ffff17 	ldw	r3,-4(fp)
   2dfa8:	18c00324 	muli	r3,r3,12
   2dfac:	10c5883a 	add	r2,r2,r3
   2dfb0:	10800204 	addi	r2,r2,8
   2dfb4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   2dfb8:	008000f4 	movhi	r2,3
   2dfbc:	10831204 	addi	r2,r2,3144
   2dfc0:	e0ffff17 	ldw	r3,-4(fp)
   2dfc4:	18c00324 	muli	r3,r3,12
   2dfc8:	10c5883a 	add	r2,r2,r3
   2dfcc:	10000015 	stw	zero,0(r2)
  }
}
   2dfd0:	0001883a 	nop
   2dfd4:	e037883a 	mov	sp,fp
   2dfd8:	df000017 	ldw	fp,0(sp)
   2dfdc:	dec00104 	addi	sp,sp,4
   2dfe0:	f800283a 	ret

0002dfe4 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   2dfe4:	defff904 	addi	sp,sp,-28
   2dfe8:	df000615 	stw	fp,24(sp)
   2dfec:	df000604 	addi	fp,sp,24
   2dff0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2dff4:	0005303a 	rdctl	r2,status
   2dff8:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2dffc:	e0fffe17 	ldw	r3,-8(fp)
   2e000:	00bfff84 	movi	r2,-2
   2e004:	1884703a 	and	r2,r3,r2
   2e008:	1001703a 	wrctl	status,r2
  
  return context;
   2e00c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   2e010:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   2e014:	d0a00d17 	ldw	r2,-32716(gp)
   2e018:	10c000c4 	addi	r3,r2,3
   2e01c:	00bfff04 	movi	r2,-4
   2e020:	1884703a 	and	r2,r3,r2
   2e024:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   2e028:	d0e00d17 	ldw	r3,-32716(gp)
   2e02c:	e0bfff17 	ldw	r2,-4(fp)
   2e030:	1887883a 	add	r3,r3,r2
   2e034:	00800134 	movhi	r2,4
   2e038:	10800004 	addi	r2,r2,0
   2e03c:	10c0062e 	bgeu	r2,r3,2e058 <sbrk+0x74>
   2e040:	e0bffb17 	ldw	r2,-20(fp)
   2e044:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2e048:	e0bffa17 	ldw	r2,-24(fp)
   2e04c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   2e050:	00bfffc4 	movi	r2,-1
   2e054:	00000b06 	br	2e084 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   2e058:	d0a00d17 	ldw	r2,-32716(gp)
   2e05c:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   2e060:	d0e00d17 	ldw	r3,-32716(gp)
   2e064:	e0bfff17 	ldw	r2,-4(fp)
   2e068:	1885883a 	add	r2,r3,r2
   2e06c:	d0a00d15 	stw	r2,-32716(gp)
   2e070:	e0bffb17 	ldw	r2,-20(fp)
   2e074:	e0bffc15 	stw	r2,-16(fp)
   2e078:	e0bffc17 	ldw	r2,-16(fp)
   2e07c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   2e080:	e0bffd17 	ldw	r2,-12(fp)
} 
   2e084:	e037883a 	mov	sp,fp
   2e088:	df000017 	ldw	fp,0(sp)
   2e08c:	dec00104 	addi	sp,sp,4
   2e090:	f800283a 	ret

0002e094 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2e094:	defffe04 	addi	sp,sp,-8
   2e098:	dfc00115 	stw	ra,4(sp)
   2e09c:	df000015 	stw	fp,0(sp)
   2e0a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2e0a4:	d0a00b17 	ldw	r2,-32724(gp)
   2e0a8:	10000326 	beq	r2,zero,2e0b8 <alt_get_errno+0x24>
   2e0ac:	d0a00b17 	ldw	r2,-32724(gp)
   2e0b0:	103ee83a 	callr	r2
   2e0b4:	00000106 	br	2e0bc <alt_get_errno+0x28>
   2e0b8:	d0a6d404 	addi	r2,gp,-25776
}
   2e0bc:	e037883a 	mov	sp,fp
   2e0c0:	dfc00117 	ldw	ra,4(sp)
   2e0c4:	df000017 	ldw	fp,0(sp)
   2e0c8:	dec00204 	addi	sp,sp,8
   2e0cc:	f800283a 	ret

0002e0d0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   2e0d0:	defff904 	addi	sp,sp,-28
   2e0d4:	dfc00615 	stw	ra,24(sp)
   2e0d8:	df000515 	stw	fp,20(sp)
   2e0dc:	df000504 	addi	fp,sp,20
   2e0e0:	e13ffd15 	stw	r4,-12(fp)
   2e0e4:	e17ffe15 	stw	r5,-8(fp)
   2e0e8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2e0ec:	e0bffd17 	ldw	r2,-12(fp)
   2e0f0:	10000616 	blt	r2,zero,2e10c <write+0x3c>
   2e0f4:	e0bffd17 	ldw	r2,-12(fp)
   2e0f8:	10c00324 	muli	r3,r2,12
   2e0fc:	008000f4 	movhi	r2,3
   2e100:	10831204 	addi	r2,r2,3144
   2e104:	1885883a 	add	r2,r3,r2
   2e108:	00000106 	br	2e110 <write+0x40>
   2e10c:	0005883a 	mov	r2,zero
   2e110:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   2e114:	e0bffb17 	ldw	r2,-20(fp)
   2e118:	10002126 	beq	r2,zero,2e1a0 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   2e11c:	e0bffb17 	ldw	r2,-20(fp)
   2e120:	10800217 	ldw	r2,8(r2)
   2e124:	108000cc 	andi	r2,r2,3
   2e128:	10001826 	beq	r2,zero,2e18c <write+0xbc>
   2e12c:	e0bffb17 	ldw	r2,-20(fp)
   2e130:	10800017 	ldw	r2,0(r2)
   2e134:	10800617 	ldw	r2,24(r2)
   2e138:	10001426 	beq	r2,zero,2e18c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   2e13c:	e0bffb17 	ldw	r2,-20(fp)
   2e140:	10800017 	ldw	r2,0(r2)
   2e144:	10800617 	ldw	r2,24(r2)
   2e148:	e0ffff17 	ldw	r3,-4(fp)
   2e14c:	180d883a 	mov	r6,r3
   2e150:	e17ffe17 	ldw	r5,-8(fp)
   2e154:	e13ffb17 	ldw	r4,-20(fp)
   2e158:	103ee83a 	callr	r2
   2e15c:	e0bffc15 	stw	r2,-16(fp)
   2e160:	e0bffc17 	ldw	r2,-16(fp)
   2e164:	1000070e 	bge	r2,zero,2e184 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   2e168:	002e0940 	call	2e094 <alt_get_errno>
   2e16c:	1007883a 	mov	r3,r2
   2e170:	e0bffc17 	ldw	r2,-16(fp)
   2e174:	0085c83a 	sub	r2,zero,r2
   2e178:	18800015 	stw	r2,0(r3)
        return -1;
   2e17c:	00bfffc4 	movi	r2,-1
   2e180:	00000c06 	br	2e1b4 <write+0xe4>
      }
      return rval;
   2e184:	e0bffc17 	ldw	r2,-16(fp)
   2e188:	00000a06 	br	2e1b4 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   2e18c:	002e0940 	call	2e094 <alt_get_errno>
   2e190:	1007883a 	mov	r3,r2
   2e194:	00800344 	movi	r2,13
   2e198:	18800015 	stw	r2,0(r3)
   2e19c:	00000406 	br	2e1b0 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   2e1a0:	002e0940 	call	2e094 <alt_get_errno>
   2e1a4:	1007883a 	mov	r3,r2
   2e1a8:	00801444 	movi	r2,81
   2e1ac:	18800015 	stw	r2,0(r3)
  }
  return -1;
   2e1b0:	00bfffc4 	movi	r2,-1
}
   2e1b4:	e037883a 	mov	sp,fp
   2e1b8:	dfc00117 	ldw	ra,4(sp)
   2e1bc:	df000017 	ldw	fp,0(sp)
   2e1c0:	dec00204 	addi	sp,sp,8
   2e1c4:	f800283a 	ret

0002e1c8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   2e1c8:	defffd04 	addi	sp,sp,-12
   2e1cc:	dfc00215 	stw	ra,8(sp)
   2e1d0:	df000115 	stw	fp,4(sp)
   2e1d4:	df000104 	addi	fp,sp,4
   2e1d8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   2e1dc:	d1600804 	addi	r5,gp,-32736
   2e1e0:	e13fff17 	ldw	r4,-4(fp)
   2e1e4:	002ef780 	call	2ef78 <alt_dev_llist_insert>
}
   2e1e8:	e037883a 	mov	sp,fp
   2e1ec:	dfc00117 	ldw	ra,4(sp)
   2e1f0:	df000017 	ldw	fp,0(sp)
   2e1f4:	dec00204 	addi	sp,sp,8
   2e1f8:	f800283a 	ret

0002e1fc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   2e1fc:	defffd04 	addi	sp,sp,-12
   2e200:	dfc00215 	stw	ra,8(sp)
   2e204:	df000115 	stw	fp,4(sp)
   2e208:	df000104 	addi	fp,sp,4
   2e20c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   2e210:	002f6d00 	call	2f6d0 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   2e214:	00800044 	movi	r2,1
   2e218:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   2e21c:	0001883a 	nop
   2e220:	e037883a 	mov	sp,fp
   2e224:	dfc00117 	ldw	ra,4(sp)
   2e228:	df000017 	ldw	fp,0(sp)
   2e22c:	dec00204 	addi	sp,sp,8
   2e230:	f800283a 	ret

0002e234 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   2e234:	defffe04 	addi	sp,sp,-8
   2e238:	dfc00115 	stw	ra,4(sp)
   2e23c:	df000015 	stw	fp,0(sp)
   2e240:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   2e244:	01c0fa04 	movi	r7,1000
   2e248:	018000c4 	movi	r6,3
   2e24c:	000b883a 	mov	r5,zero
   2e250:	01000134 	movhi	r4,4
   2e254:	21040004 	addi	r4,r4,4096
   2e258:	002ed740 	call	2ed74 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   2e25c:	01800084 	movi	r6,2
   2e260:	000b883a 	mov	r5,zero
   2e264:	010000f4 	movhi	r4,3
   2e268:	21037c04 	addi	r4,r4,3568
   2e26c:	002e3f80 	call	2e3f8 <altera_avalon_jtag_uart_init>
   2e270:	010000f4 	movhi	r4,3
   2e274:	21037204 	addi	r4,r4,3528
   2e278:	002e1c80 	call	2e1c8 <alt_dev_reg>
}
   2e27c:	0001883a 	nop
   2e280:	e037883a 	mov	sp,fp
   2e284:	dfc00117 	ldw	ra,4(sp)
   2e288:	df000017 	ldw	fp,0(sp)
   2e28c:	dec00204 	addi	sp,sp,8
   2e290:	f800283a 	ret

0002e294 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   2e294:	defffa04 	addi	sp,sp,-24
   2e298:	dfc00515 	stw	ra,20(sp)
   2e29c:	df000415 	stw	fp,16(sp)
   2e2a0:	df000404 	addi	fp,sp,16
   2e2a4:	e13ffd15 	stw	r4,-12(fp)
   2e2a8:	e17ffe15 	stw	r5,-8(fp)
   2e2ac:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2e2b0:	e0bffd17 	ldw	r2,-12(fp)
   2e2b4:	10800017 	ldw	r2,0(r2)
   2e2b8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   2e2bc:	e0bffc17 	ldw	r2,-16(fp)
   2e2c0:	10c00a04 	addi	r3,r2,40
   2e2c4:	e0bffd17 	ldw	r2,-12(fp)
   2e2c8:	10800217 	ldw	r2,8(r2)
   2e2cc:	100f883a 	mov	r7,r2
   2e2d0:	e1bfff17 	ldw	r6,-4(fp)
   2e2d4:	e17ffe17 	ldw	r5,-8(fp)
   2e2d8:	1809883a 	mov	r4,r3
   2e2dc:	002e8bc0 	call	2e8bc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   2e2e0:	e037883a 	mov	sp,fp
   2e2e4:	dfc00117 	ldw	ra,4(sp)
   2e2e8:	df000017 	ldw	fp,0(sp)
   2e2ec:	dec00204 	addi	sp,sp,8
   2e2f0:	f800283a 	ret

0002e2f4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   2e2f4:	defffa04 	addi	sp,sp,-24
   2e2f8:	dfc00515 	stw	ra,20(sp)
   2e2fc:	df000415 	stw	fp,16(sp)
   2e300:	df000404 	addi	fp,sp,16
   2e304:	e13ffd15 	stw	r4,-12(fp)
   2e308:	e17ffe15 	stw	r5,-8(fp)
   2e30c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2e310:	e0bffd17 	ldw	r2,-12(fp)
   2e314:	10800017 	ldw	r2,0(r2)
   2e318:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   2e31c:	e0bffc17 	ldw	r2,-16(fp)
   2e320:	10c00a04 	addi	r3,r2,40
   2e324:	e0bffd17 	ldw	r2,-12(fp)
   2e328:	10800217 	ldw	r2,8(r2)
   2e32c:	100f883a 	mov	r7,r2
   2e330:	e1bfff17 	ldw	r6,-4(fp)
   2e334:	e17ffe17 	ldw	r5,-8(fp)
   2e338:	1809883a 	mov	r4,r3
   2e33c:	002ead80 	call	2ead8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   2e340:	e037883a 	mov	sp,fp
   2e344:	dfc00117 	ldw	ra,4(sp)
   2e348:	df000017 	ldw	fp,0(sp)
   2e34c:	dec00204 	addi	sp,sp,8
   2e350:	f800283a 	ret

0002e354 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   2e354:	defffc04 	addi	sp,sp,-16
   2e358:	dfc00315 	stw	ra,12(sp)
   2e35c:	df000215 	stw	fp,8(sp)
   2e360:	df000204 	addi	fp,sp,8
   2e364:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2e368:	e0bfff17 	ldw	r2,-4(fp)
   2e36c:	10800017 	ldw	r2,0(r2)
   2e370:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   2e374:	e0bffe17 	ldw	r2,-8(fp)
   2e378:	10c00a04 	addi	r3,r2,40
   2e37c:	e0bfff17 	ldw	r2,-4(fp)
   2e380:	10800217 	ldw	r2,8(r2)
   2e384:	100b883a 	mov	r5,r2
   2e388:	1809883a 	mov	r4,r3
   2e38c:	002e7640 	call	2e764 <altera_avalon_jtag_uart_close>
}
   2e390:	e037883a 	mov	sp,fp
   2e394:	dfc00117 	ldw	ra,4(sp)
   2e398:	df000017 	ldw	fp,0(sp)
   2e39c:	dec00204 	addi	sp,sp,8
   2e3a0:	f800283a 	ret

0002e3a4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   2e3a4:	defffa04 	addi	sp,sp,-24
   2e3a8:	dfc00515 	stw	ra,20(sp)
   2e3ac:	df000415 	stw	fp,16(sp)
   2e3b0:	df000404 	addi	fp,sp,16
   2e3b4:	e13ffd15 	stw	r4,-12(fp)
   2e3b8:	e17ffe15 	stw	r5,-8(fp)
   2e3bc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   2e3c0:	e0bffd17 	ldw	r2,-12(fp)
   2e3c4:	10800017 	ldw	r2,0(r2)
   2e3c8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   2e3cc:	e0bffc17 	ldw	r2,-16(fp)
   2e3d0:	10800a04 	addi	r2,r2,40
   2e3d4:	e1bfff17 	ldw	r6,-4(fp)
   2e3d8:	e17ffe17 	ldw	r5,-8(fp)
   2e3dc:	1009883a 	mov	r4,r2
   2e3e0:	002e7cc0 	call	2e7cc <altera_avalon_jtag_uart_ioctl>
}
   2e3e4:	e037883a 	mov	sp,fp
   2e3e8:	dfc00117 	ldw	ra,4(sp)
   2e3ec:	df000017 	ldw	fp,0(sp)
   2e3f0:	dec00204 	addi	sp,sp,8
   2e3f4:	f800283a 	ret

0002e3f8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   2e3f8:	defffa04 	addi	sp,sp,-24
   2e3fc:	dfc00515 	stw	ra,20(sp)
   2e400:	df000415 	stw	fp,16(sp)
   2e404:	df000404 	addi	fp,sp,16
   2e408:	e13ffd15 	stw	r4,-12(fp)
   2e40c:	e17ffe15 	stw	r5,-8(fp)
   2e410:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2e414:	e0bffd17 	ldw	r2,-12(fp)
   2e418:	00c00044 	movi	r3,1
   2e41c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   2e420:	e0bffd17 	ldw	r2,-12(fp)
   2e424:	10800017 	ldw	r2,0(r2)
   2e428:	10800104 	addi	r2,r2,4
   2e42c:	1007883a 	mov	r3,r2
   2e430:	e0bffd17 	ldw	r2,-12(fp)
   2e434:	10800817 	ldw	r2,32(r2)
   2e438:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   2e43c:	e0bffe17 	ldw	r2,-8(fp)
   2e440:	e0ffff17 	ldw	r3,-4(fp)
   2e444:	d8000015 	stw	zero,0(sp)
   2e448:	e1fffd17 	ldw	r7,-12(fp)
   2e44c:	018000f4 	movhi	r6,3
   2e450:	31b92e04 	addi	r6,r6,-6984
   2e454:	180b883a 	mov	r5,r3
   2e458:	1009883a 	mov	r4,r2
   2e45c:	002d5a00 	call	2d5a0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   2e460:	e0bffd17 	ldw	r2,-12(fp)
   2e464:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   2e468:	e0bffd17 	ldw	r2,-12(fp)
   2e46c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   2e470:	d0e6da17 	ldw	r3,-25752(gp)
   2e474:	e1fffd17 	ldw	r7,-12(fp)
   2e478:	018000f4 	movhi	r6,3
   2e47c:	31b9b104 	addi	r6,r6,-6460
   2e480:	180b883a 	mov	r5,r3
   2e484:	1009883a 	mov	r4,r2
   2e488:	002edf00 	call	2edf0 <alt_alarm_start>
   2e48c:	1000040e 	bge	r2,zero,2e4a0 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   2e490:	e0fffd17 	ldw	r3,-12(fp)
   2e494:	00a00034 	movhi	r2,32768
   2e498:	10bfffc4 	addi	r2,r2,-1
   2e49c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   2e4a0:	0001883a 	nop
   2e4a4:	e037883a 	mov	sp,fp
   2e4a8:	dfc00117 	ldw	ra,4(sp)
   2e4ac:	df000017 	ldw	fp,0(sp)
   2e4b0:	dec00204 	addi	sp,sp,8
   2e4b4:	f800283a 	ret

0002e4b8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   2e4b8:	defff804 	addi	sp,sp,-32
   2e4bc:	df000715 	stw	fp,28(sp)
   2e4c0:	df000704 	addi	fp,sp,28
   2e4c4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   2e4c8:	e0bfff17 	ldw	r2,-4(fp)
   2e4cc:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   2e4d0:	e0bffb17 	ldw	r2,-20(fp)
   2e4d4:	10800017 	ldw	r2,0(r2)
   2e4d8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2e4dc:	e0bffc17 	ldw	r2,-16(fp)
   2e4e0:	10800104 	addi	r2,r2,4
   2e4e4:	10800037 	ldwio	r2,0(r2)
   2e4e8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   2e4ec:	e0bffd17 	ldw	r2,-12(fp)
   2e4f0:	1080c00c 	andi	r2,r2,768
   2e4f4:	10006d26 	beq	r2,zero,2e6ac <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   2e4f8:	e0bffd17 	ldw	r2,-12(fp)
   2e4fc:	1080400c 	andi	r2,r2,256
   2e500:	10003526 	beq	r2,zero,2e5d8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   2e504:	00800074 	movhi	r2,1
   2e508:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2e50c:	e0bffb17 	ldw	r2,-20(fp)
   2e510:	10800a17 	ldw	r2,40(r2)
   2e514:	10800044 	addi	r2,r2,1
   2e518:	1081ffcc 	andi	r2,r2,2047
   2e51c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   2e520:	e0bffb17 	ldw	r2,-20(fp)
   2e524:	10c00b17 	ldw	r3,44(r2)
   2e528:	e0bffe17 	ldw	r2,-8(fp)
   2e52c:	18801526 	beq	r3,r2,2e584 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   2e530:	e0bffc17 	ldw	r2,-16(fp)
   2e534:	10800037 	ldwio	r2,0(r2)
   2e538:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   2e53c:	e0bff917 	ldw	r2,-28(fp)
   2e540:	10a0000c 	andi	r2,r2,32768
   2e544:	10001126 	beq	r2,zero,2e58c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   2e548:	e0bffb17 	ldw	r2,-20(fp)
   2e54c:	10800a17 	ldw	r2,40(r2)
   2e550:	e0fff917 	ldw	r3,-28(fp)
   2e554:	1809883a 	mov	r4,r3
   2e558:	e0fffb17 	ldw	r3,-20(fp)
   2e55c:	1885883a 	add	r2,r3,r2
   2e560:	10800e04 	addi	r2,r2,56
   2e564:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2e568:	e0bffb17 	ldw	r2,-20(fp)
   2e56c:	10800a17 	ldw	r2,40(r2)
   2e570:	10800044 	addi	r2,r2,1
   2e574:	10c1ffcc 	andi	r3,r2,2047
   2e578:	e0bffb17 	ldw	r2,-20(fp)
   2e57c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   2e580:	003fe206 	br	2e50c <__alt_data_end+0xfffee50c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   2e584:	0001883a 	nop
   2e588:	00000106 	br	2e590 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   2e58c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   2e590:	e0bff917 	ldw	r2,-28(fp)
   2e594:	10bfffec 	andhi	r2,r2,65535
   2e598:	10000f26 	beq	r2,zero,2e5d8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2e59c:	e0bffb17 	ldw	r2,-20(fp)
   2e5a0:	10c00817 	ldw	r3,32(r2)
   2e5a4:	00bfff84 	movi	r2,-2
   2e5a8:	1886703a 	and	r3,r3,r2
   2e5ac:	e0bffb17 	ldw	r2,-20(fp)
   2e5b0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   2e5b4:	e0bffc17 	ldw	r2,-16(fp)
   2e5b8:	10800104 	addi	r2,r2,4
   2e5bc:	1007883a 	mov	r3,r2
   2e5c0:	e0bffb17 	ldw	r2,-20(fp)
   2e5c4:	10800817 	ldw	r2,32(r2)
   2e5c8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2e5cc:	e0bffc17 	ldw	r2,-16(fp)
   2e5d0:	10800104 	addi	r2,r2,4
   2e5d4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   2e5d8:	e0bffd17 	ldw	r2,-12(fp)
   2e5dc:	1080800c 	andi	r2,r2,512
   2e5e0:	103fbe26 	beq	r2,zero,2e4dc <__alt_data_end+0xfffee4dc>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   2e5e4:	e0bffd17 	ldw	r2,-12(fp)
   2e5e8:	1004d43a 	srli	r2,r2,16
   2e5ec:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   2e5f0:	00001406 	br	2e644 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   2e5f4:	e0bffc17 	ldw	r2,-16(fp)
   2e5f8:	e0fffb17 	ldw	r3,-20(fp)
   2e5fc:	18c00d17 	ldw	r3,52(r3)
   2e600:	e13ffb17 	ldw	r4,-20(fp)
   2e604:	20c7883a 	add	r3,r4,r3
   2e608:	18c20e04 	addi	r3,r3,2104
   2e60c:	18c00003 	ldbu	r3,0(r3)
   2e610:	18c03fcc 	andi	r3,r3,255
   2e614:	18c0201c 	xori	r3,r3,128
   2e618:	18ffe004 	addi	r3,r3,-128
   2e61c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2e620:	e0bffb17 	ldw	r2,-20(fp)
   2e624:	10800d17 	ldw	r2,52(r2)
   2e628:	10800044 	addi	r2,r2,1
   2e62c:	10c1ffcc 	andi	r3,r2,2047
   2e630:	e0bffb17 	ldw	r2,-20(fp)
   2e634:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   2e638:	e0bffa17 	ldw	r2,-24(fp)
   2e63c:	10bfffc4 	addi	r2,r2,-1
   2e640:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   2e644:	e0bffa17 	ldw	r2,-24(fp)
   2e648:	10000526 	beq	r2,zero,2e660 <altera_avalon_jtag_uart_irq+0x1a8>
   2e64c:	e0bffb17 	ldw	r2,-20(fp)
   2e650:	10c00d17 	ldw	r3,52(r2)
   2e654:	e0bffb17 	ldw	r2,-20(fp)
   2e658:	10800c17 	ldw	r2,48(r2)
   2e65c:	18bfe51e 	bne	r3,r2,2e5f4 <__alt_data_end+0xfffee5f4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   2e660:	e0bffa17 	ldw	r2,-24(fp)
   2e664:	103f9d26 	beq	r2,zero,2e4dc <__alt_data_end+0xfffee4dc>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   2e668:	e0bffb17 	ldw	r2,-20(fp)
   2e66c:	10c00817 	ldw	r3,32(r2)
   2e670:	00bfff44 	movi	r2,-3
   2e674:	1886703a 	and	r3,r3,r2
   2e678:	e0bffb17 	ldw	r2,-20(fp)
   2e67c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2e680:	e0bffb17 	ldw	r2,-20(fp)
   2e684:	10800017 	ldw	r2,0(r2)
   2e688:	10800104 	addi	r2,r2,4
   2e68c:	1007883a 	mov	r3,r2
   2e690:	e0bffb17 	ldw	r2,-20(fp)
   2e694:	10800817 	ldw	r2,32(r2)
   2e698:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2e69c:	e0bffc17 	ldw	r2,-16(fp)
   2e6a0:	10800104 	addi	r2,r2,4
   2e6a4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   2e6a8:	003f8c06 	br	2e4dc <__alt_data_end+0xfffee4dc>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   2e6ac:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   2e6b0:	0001883a 	nop
   2e6b4:	e037883a 	mov	sp,fp
   2e6b8:	df000017 	ldw	fp,0(sp)
   2e6bc:	dec00104 	addi	sp,sp,4
   2e6c0:	f800283a 	ret

0002e6c4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   2e6c4:	defff804 	addi	sp,sp,-32
   2e6c8:	df000715 	stw	fp,28(sp)
   2e6cc:	df000704 	addi	fp,sp,28
   2e6d0:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   2e6d4:	e0bffb17 	ldw	r2,-20(fp)
   2e6d8:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   2e6dc:	e0bff917 	ldw	r2,-28(fp)
   2e6e0:	10800017 	ldw	r2,0(r2)
   2e6e4:	10800104 	addi	r2,r2,4
   2e6e8:	10800037 	ldwio	r2,0(r2)
   2e6ec:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   2e6f0:	e0bffa17 	ldw	r2,-24(fp)
   2e6f4:	1081000c 	andi	r2,r2,1024
   2e6f8:	10000b26 	beq	r2,zero,2e728 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   2e6fc:	e0bff917 	ldw	r2,-28(fp)
   2e700:	10800017 	ldw	r2,0(r2)
   2e704:	10800104 	addi	r2,r2,4
   2e708:	1007883a 	mov	r3,r2
   2e70c:	e0bff917 	ldw	r2,-28(fp)
   2e710:	10800817 	ldw	r2,32(r2)
   2e714:	10810014 	ori	r2,r2,1024
   2e718:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   2e71c:	e0bff917 	ldw	r2,-28(fp)
   2e720:	10000915 	stw	zero,36(r2)
   2e724:	00000a06 	br	2e750 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   2e728:	e0bff917 	ldw	r2,-28(fp)
   2e72c:	10c00917 	ldw	r3,36(r2)
   2e730:	00a00034 	movhi	r2,32768
   2e734:	10bfff04 	addi	r2,r2,-4
   2e738:	10c00536 	bltu	r2,r3,2e750 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   2e73c:	e0bff917 	ldw	r2,-28(fp)
   2e740:	10800917 	ldw	r2,36(r2)
   2e744:	10c00044 	addi	r3,r2,1
   2e748:	e0bff917 	ldw	r2,-28(fp)
   2e74c:	10c00915 	stw	r3,36(r2)
   2e750:	d0a6da17 	ldw	r2,-25752(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   2e754:	e037883a 	mov	sp,fp
   2e758:	df000017 	ldw	fp,0(sp)
   2e75c:	dec00104 	addi	sp,sp,4
   2e760:	f800283a 	ret

0002e764 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   2e764:	defffd04 	addi	sp,sp,-12
   2e768:	df000215 	stw	fp,8(sp)
   2e76c:	df000204 	addi	fp,sp,8
   2e770:	e13ffe15 	stw	r4,-8(fp)
   2e774:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   2e778:	00000506 	br	2e790 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   2e77c:	e0bfff17 	ldw	r2,-4(fp)
   2e780:	1090000c 	andi	r2,r2,16384
   2e784:	10000226 	beq	r2,zero,2e790 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   2e788:	00bffd44 	movi	r2,-11
   2e78c:	00000b06 	br	2e7bc <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   2e790:	e0bffe17 	ldw	r2,-8(fp)
   2e794:	10c00d17 	ldw	r3,52(r2)
   2e798:	e0bffe17 	ldw	r2,-8(fp)
   2e79c:	10800c17 	ldw	r2,48(r2)
   2e7a0:	18800526 	beq	r3,r2,2e7b8 <altera_avalon_jtag_uart_close+0x54>
   2e7a4:	e0bffe17 	ldw	r2,-8(fp)
   2e7a8:	10c00917 	ldw	r3,36(r2)
   2e7ac:	e0bffe17 	ldw	r2,-8(fp)
   2e7b0:	10800117 	ldw	r2,4(r2)
   2e7b4:	18bff136 	bltu	r3,r2,2e77c <__alt_data_end+0xfffee77c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   2e7b8:	0005883a 	mov	r2,zero
}
   2e7bc:	e037883a 	mov	sp,fp
   2e7c0:	df000017 	ldw	fp,0(sp)
   2e7c4:	dec00104 	addi	sp,sp,4
   2e7c8:	f800283a 	ret

0002e7cc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   2e7cc:	defffa04 	addi	sp,sp,-24
   2e7d0:	df000515 	stw	fp,20(sp)
   2e7d4:	df000504 	addi	fp,sp,20
   2e7d8:	e13ffd15 	stw	r4,-12(fp)
   2e7dc:	e17ffe15 	stw	r5,-8(fp)
   2e7e0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   2e7e4:	00bff9c4 	movi	r2,-25
   2e7e8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   2e7ec:	e0bffe17 	ldw	r2,-8(fp)
   2e7f0:	10da8060 	cmpeqi	r3,r2,27137
   2e7f4:	1800031e 	bne	r3,zero,2e804 <altera_avalon_jtag_uart_ioctl+0x38>
   2e7f8:	109a80a0 	cmpeqi	r2,r2,27138
   2e7fc:	1000181e 	bne	r2,zero,2e860 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   2e800:	00002906 	br	2e8a8 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   2e804:	e0bffd17 	ldw	r2,-12(fp)
   2e808:	10c00117 	ldw	r3,4(r2)
   2e80c:	00a00034 	movhi	r2,32768
   2e810:	10bfffc4 	addi	r2,r2,-1
   2e814:	18802126 	beq	r3,r2,2e89c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   2e818:	e0bfff17 	ldw	r2,-4(fp)
   2e81c:	10800017 	ldw	r2,0(r2)
   2e820:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   2e824:	e0bffc17 	ldw	r2,-16(fp)
   2e828:	10800090 	cmplti	r2,r2,2
   2e82c:	1000061e 	bne	r2,zero,2e848 <altera_avalon_jtag_uart_ioctl+0x7c>
   2e830:	e0fffc17 	ldw	r3,-16(fp)
   2e834:	00a00034 	movhi	r2,32768
   2e838:	10bfffc4 	addi	r2,r2,-1
   2e83c:	18800226 	beq	r3,r2,2e848 <altera_avalon_jtag_uart_ioctl+0x7c>
   2e840:	e0bffc17 	ldw	r2,-16(fp)
   2e844:	00000206 	br	2e850 <altera_avalon_jtag_uart_ioctl+0x84>
   2e848:	00a00034 	movhi	r2,32768
   2e84c:	10bfff84 	addi	r2,r2,-2
   2e850:	e0fffd17 	ldw	r3,-12(fp)
   2e854:	18800115 	stw	r2,4(r3)
      rc = 0;
   2e858:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   2e85c:	00000f06 	br	2e89c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   2e860:	e0bffd17 	ldw	r2,-12(fp)
   2e864:	10c00117 	ldw	r3,4(r2)
   2e868:	00a00034 	movhi	r2,32768
   2e86c:	10bfffc4 	addi	r2,r2,-1
   2e870:	18800c26 	beq	r3,r2,2e8a4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   2e874:	e0bffd17 	ldw	r2,-12(fp)
   2e878:	10c00917 	ldw	r3,36(r2)
   2e87c:	e0bffd17 	ldw	r2,-12(fp)
   2e880:	10800117 	ldw	r2,4(r2)
   2e884:	1885803a 	cmpltu	r2,r3,r2
   2e888:	10c03fcc 	andi	r3,r2,255
   2e88c:	e0bfff17 	ldw	r2,-4(fp)
   2e890:	10c00015 	stw	r3,0(r2)
      rc = 0;
   2e894:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   2e898:	00000206 	br	2e8a4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   2e89c:	0001883a 	nop
   2e8a0:	00000106 	br	2e8a8 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   2e8a4:	0001883a 	nop

  default:
    break;
  }

  return rc;
   2e8a8:	e0bffb17 	ldw	r2,-20(fp)
}
   2e8ac:	e037883a 	mov	sp,fp
   2e8b0:	df000017 	ldw	fp,0(sp)
   2e8b4:	dec00104 	addi	sp,sp,4
   2e8b8:	f800283a 	ret

0002e8bc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   2e8bc:	defff304 	addi	sp,sp,-52
   2e8c0:	dfc00c15 	stw	ra,48(sp)
   2e8c4:	df000b15 	stw	fp,44(sp)
   2e8c8:	df000b04 	addi	fp,sp,44
   2e8cc:	e13ffc15 	stw	r4,-16(fp)
   2e8d0:	e17ffd15 	stw	r5,-12(fp)
   2e8d4:	e1bffe15 	stw	r6,-8(fp)
   2e8d8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   2e8dc:	e0bffd17 	ldw	r2,-12(fp)
   2e8e0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   2e8e4:	00004706 	br	2ea04 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   2e8e8:	e0bffc17 	ldw	r2,-16(fp)
   2e8ec:	10800a17 	ldw	r2,40(r2)
   2e8f0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   2e8f4:	e0bffc17 	ldw	r2,-16(fp)
   2e8f8:	10800b17 	ldw	r2,44(r2)
   2e8fc:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   2e900:	e0fff717 	ldw	r3,-36(fp)
   2e904:	e0bff817 	ldw	r2,-32(fp)
   2e908:	18800536 	bltu	r3,r2,2e920 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   2e90c:	e0fff717 	ldw	r3,-36(fp)
   2e910:	e0bff817 	ldw	r2,-32(fp)
   2e914:	1885c83a 	sub	r2,r3,r2
   2e918:	e0bff615 	stw	r2,-40(fp)
   2e91c:	00000406 	br	2e930 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   2e920:	00c20004 	movi	r3,2048
   2e924:	e0bff817 	ldw	r2,-32(fp)
   2e928:	1885c83a 	sub	r2,r3,r2
   2e92c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   2e930:	e0bff617 	ldw	r2,-40(fp)
   2e934:	10001e26 	beq	r2,zero,2e9b0 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   2e938:	e0fffe17 	ldw	r3,-8(fp)
   2e93c:	e0bff617 	ldw	r2,-40(fp)
   2e940:	1880022e 	bgeu	r3,r2,2e94c <altera_avalon_jtag_uart_read+0x90>
        n = space;
   2e944:	e0bffe17 	ldw	r2,-8(fp)
   2e948:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   2e94c:	e0bffc17 	ldw	r2,-16(fp)
   2e950:	10c00e04 	addi	r3,r2,56
   2e954:	e0bff817 	ldw	r2,-32(fp)
   2e958:	1885883a 	add	r2,r3,r2
   2e95c:	e1bff617 	ldw	r6,-40(fp)
   2e960:	100b883a 	mov	r5,r2
   2e964:	e13ff517 	ldw	r4,-44(fp)
   2e968:	00261880 	call	26188 <memcpy>
      ptr   += n;
   2e96c:	e0fff517 	ldw	r3,-44(fp)
   2e970:	e0bff617 	ldw	r2,-40(fp)
   2e974:	1885883a 	add	r2,r3,r2
   2e978:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   2e97c:	e0fffe17 	ldw	r3,-8(fp)
   2e980:	e0bff617 	ldw	r2,-40(fp)
   2e984:	1885c83a 	sub	r2,r3,r2
   2e988:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2e98c:	e0fff817 	ldw	r3,-32(fp)
   2e990:	e0bff617 	ldw	r2,-40(fp)
   2e994:	1885883a 	add	r2,r3,r2
   2e998:	10c1ffcc 	andi	r3,r2,2047
   2e99c:	e0bffc17 	ldw	r2,-16(fp)
   2e9a0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   2e9a4:	e0bffe17 	ldw	r2,-8(fp)
   2e9a8:	00bfcf16 	blt	zero,r2,2e8e8 <__alt_data_end+0xfffee8e8>
   2e9ac:	00000106 	br	2e9b4 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   2e9b0:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   2e9b4:	e0fff517 	ldw	r3,-44(fp)
   2e9b8:	e0bffd17 	ldw	r2,-12(fp)
   2e9bc:	1880141e 	bne	r3,r2,2ea10 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   2e9c0:	e0bfff17 	ldw	r2,-4(fp)
   2e9c4:	1090000c 	andi	r2,r2,16384
   2e9c8:	1000131e 	bne	r2,zero,2ea18 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   2e9cc:	0001883a 	nop
   2e9d0:	e0bffc17 	ldw	r2,-16(fp)
   2e9d4:	10c00a17 	ldw	r3,40(r2)
   2e9d8:	e0bff717 	ldw	r2,-36(fp)
   2e9dc:	1880051e 	bne	r3,r2,2e9f4 <altera_avalon_jtag_uart_read+0x138>
   2e9e0:	e0bffc17 	ldw	r2,-16(fp)
   2e9e4:	10c00917 	ldw	r3,36(r2)
   2e9e8:	e0bffc17 	ldw	r2,-16(fp)
   2e9ec:	10800117 	ldw	r2,4(r2)
   2e9f0:	18bff736 	bltu	r3,r2,2e9d0 <__alt_data_end+0xfffee9d0>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   2e9f4:	e0bffc17 	ldw	r2,-16(fp)
   2e9f8:	10c00a17 	ldw	r3,40(r2)
   2e9fc:	e0bff717 	ldw	r2,-36(fp)
   2ea00:	18800726 	beq	r3,r2,2ea20 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   2ea04:	e0bffe17 	ldw	r2,-8(fp)
   2ea08:	00bfb716 	blt	zero,r2,2e8e8 <__alt_data_end+0xfffee8e8>
   2ea0c:	00000506 	br	2ea24 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   2ea10:	0001883a 	nop
   2ea14:	00000306 	br	2ea24 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   2ea18:	0001883a 	nop
   2ea1c:	00000106 	br	2ea24 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   2ea20:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   2ea24:	e0fff517 	ldw	r3,-44(fp)
   2ea28:	e0bffd17 	ldw	r2,-12(fp)
   2ea2c:	18801826 	beq	r3,r2,2ea90 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2ea30:	0005303a 	rdctl	r2,status
   2ea34:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2ea38:	e0fffb17 	ldw	r3,-20(fp)
   2ea3c:	00bfff84 	movi	r2,-2
   2ea40:	1884703a 	and	r2,r3,r2
   2ea44:	1001703a 	wrctl	status,r2
  
  return context;
   2ea48:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   2ea4c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2ea50:	e0bffc17 	ldw	r2,-16(fp)
   2ea54:	10800817 	ldw	r2,32(r2)
   2ea58:	10c00054 	ori	r3,r2,1
   2ea5c:	e0bffc17 	ldw	r2,-16(fp)
   2ea60:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2ea64:	e0bffc17 	ldw	r2,-16(fp)
   2ea68:	10800017 	ldw	r2,0(r2)
   2ea6c:	10800104 	addi	r2,r2,4
   2ea70:	1007883a 	mov	r3,r2
   2ea74:	e0bffc17 	ldw	r2,-16(fp)
   2ea78:	10800817 	ldw	r2,32(r2)
   2ea7c:	18800035 	stwio	r2,0(r3)
   2ea80:	e0bffa17 	ldw	r2,-24(fp)
   2ea84:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2ea88:	e0bff917 	ldw	r2,-28(fp)
   2ea8c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   2ea90:	e0fff517 	ldw	r3,-44(fp)
   2ea94:	e0bffd17 	ldw	r2,-12(fp)
   2ea98:	18800426 	beq	r3,r2,2eaac <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   2ea9c:	e0fff517 	ldw	r3,-44(fp)
   2eaa0:	e0bffd17 	ldw	r2,-12(fp)
   2eaa4:	1885c83a 	sub	r2,r3,r2
   2eaa8:	00000606 	br	2eac4 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   2eaac:	e0bfff17 	ldw	r2,-4(fp)
   2eab0:	1090000c 	andi	r2,r2,16384
   2eab4:	10000226 	beq	r2,zero,2eac0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   2eab8:	00bffd44 	movi	r2,-11
   2eabc:	00000106 	br	2eac4 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   2eac0:	00bffec4 	movi	r2,-5
}
   2eac4:	e037883a 	mov	sp,fp
   2eac8:	dfc00117 	ldw	ra,4(sp)
   2eacc:	df000017 	ldw	fp,0(sp)
   2ead0:	dec00204 	addi	sp,sp,8
   2ead4:	f800283a 	ret

0002ead8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   2ead8:	defff304 	addi	sp,sp,-52
   2eadc:	dfc00c15 	stw	ra,48(sp)
   2eae0:	df000b15 	stw	fp,44(sp)
   2eae4:	df000b04 	addi	fp,sp,44
   2eae8:	e13ffc15 	stw	r4,-16(fp)
   2eaec:	e17ffd15 	stw	r5,-12(fp)
   2eaf0:	e1bffe15 	stw	r6,-8(fp)
   2eaf4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   2eaf8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   2eafc:	e0bffd17 	ldw	r2,-12(fp)
   2eb00:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   2eb04:	00003706 	br	2ebe4 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   2eb08:	e0bffc17 	ldw	r2,-16(fp)
   2eb0c:	10800c17 	ldw	r2,48(r2)
   2eb10:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   2eb14:	e0bffc17 	ldw	r2,-16(fp)
   2eb18:	10800d17 	ldw	r2,52(r2)
   2eb1c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   2eb20:	e0fff917 	ldw	r3,-28(fp)
   2eb24:	e0bff517 	ldw	r2,-44(fp)
   2eb28:	1880062e 	bgeu	r3,r2,2eb44 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   2eb2c:	e0fff517 	ldw	r3,-44(fp)
   2eb30:	e0bff917 	ldw	r2,-28(fp)
   2eb34:	1885c83a 	sub	r2,r3,r2
   2eb38:	10bfffc4 	addi	r2,r2,-1
   2eb3c:	e0bff615 	stw	r2,-40(fp)
   2eb40:	00000b06 	br	2eb70 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   2eb44:	e0bff517 	ldw	r2,-44(fp)
   2eb48:	10000526 	beq	r2,zero,2eb60 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   2eb4c:	00c20004 	movi	r3,2048
   2eb50:	e0bff917 	ldw	r2,-28(fp)
   2eb54:	1885c83a 	sub	r2,r3,r2
   2eb58:	e0bff615 	stw	r2,-40(fp)
   2eb5c:	00000406 	br	2eb70 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   2eb60:	00c1ffc4 	movi	r3,2047
   2eb64:	e0bff917 	ldw	r2,-28(fp)
   2eb68:	1885c83a 	sub	r2,r3,r2
   2eb6c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   2eb70:	e0bff617 	ldw	r2,-40(fp)
   2eb74:	10001e26 	beq	r2,zero,2ebf0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   2eb78:	e0fffe17 	ldw	r3,-8(fp)
   2eb7c:	e0bff617 	ldw	r2,-40(fp)
   2eb80:	1880022e 	bgeu	r3,r2,2eb8c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   2eb84:	e0bffe17 	ldw	r2,-8(fp)
   2eb88:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   2eb8c:	e0bffc17 	ldw	r2,-16(fp)
   2eb90:	10c20e04 	addi	r3,r2,2104
   2eb94:	e0bff917 	ldw	r2,-28(fp)
   2eb98:	1885883a 	add	r2,r3,r2
   2eb9c:	e1bff617 	ldw	r6,-40(fp)
   2eba0:	e17ffd17 	ldw	r5,-12(fp)
   2eba4:	1009883a 	mov	r4,r2
   2eba8:	00261880 	call	26188 <memcpy>
      ptr   += n;
   2ebac:	e0fffd17 	ldw	r3,-12(fp)
   2ebb0:	e0bff617 	ldw	r2,-40(fp)
   2ebb4:	1885883a 	add	r2,r3,r2
   2ebb8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   2ebbc:	e0fffe17 	ldw	r3,-8(fp)
   2ebc0:	e0bff617 	ldw	r2,-40(fp)
   2ebc4:	1885c83a 	sub	r2,r3,r2
   2ebc8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2ebcc:	e0fff917 	ldw	r3,-28(fp)
   2ebd0:	e0bff617 	ldw	r2,-40(fp)
   2ebd4:	1885883a 	add	r2,r3,r2
   2ebd8:	10c1ffcc 	andi	r3,r2,2047
   2ebdc:	e0bffc17 	ldw	r2,-16(fp)
   2ebe0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   2ebe4:	e0bffe17 	ldw	r2,-8(fp)
   2ebe8:	00bfc716 	blt	zero,r2,2eb08 <__alt_data_end+0xfffeeb08>
   2ebec:	00000106 	br	2ebf4 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   2ebf0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2ebf4:	0005303a 	rdctl	r2,status
   2ebf8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2ebfc:	e0fffb17 	ldw	r3,-20(fp)
   2ec00:	00bfff84 	movi	r2,-2
   2ec04:	1884703a 	and	r2,r3,r2
   2ec08:	1001703a 	wrctl	status,r2
  
  return context;
   2ec0c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   2ec10:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   2ec14:	e0bffc17 	ldw	r2,-16(fp)
   2ec18:	10800817 	ldw	r2,32(r2)
   2ec1c:	10c00094 	ori	r3,r2,2
   2ec20:	e0bffc17 	ldw	r2,-16(fp)
   2ec24:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2ec28:	e0bffc17 	ldw	r2,-16(fp)
   2ec2c:	10800017 	ldw	r2,0(r2)
   2ec30:	10800104 	addi	r2,r2,4
   2ec34:	1007883a 	mov	r3,r2
   2ec38:	e0bffc17 	ldw	r2,-16(fp)
   2ec3c:	10800817 	ldw	r2,32(r2)
   2ec40:	18800035 	stwio	r2,0(r3)
   2ec44:	e0bffa17 	ldw	r2,-24(fp)
   2ec48:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2ec4c:	e0bff817 	ldw	r2,-32(fp)
   2ec50:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   2ec54:	e0bffe17 	ldw	r2,-8(fp)
   2ec58:	0080100e 	bge	zero,r2,2ec9c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   2ec5c:	e0bfff17 	ldw	r2,-4(fp)
   2ec60:	1090000c 	andi	r2,r2,16384
   2ec64:	1000101e 	bne	r2,zero,2eca8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   2ec68:	0001883a 	nop
   2ec6c:	e0bffc17 	ldw	r2,-16(fp)
   2ec70:	10c00d17 	ldw	r3,52(r2)
   2ec74:	e0bff517 	ldw	r2,-44(fp)
   2ec78:	1880051e 	bne	r3,r2,2ec90 <altera_avalon_jtag_uart_write+0x1b8>
   2ec7c:	e0bffc17 	ldw	r2,-16(fp)
   2ec80:	10c00917 	ldw	r3,36(r2)
   2ec84:	e0bffc17 	ldw	r2,-16(fp)
   2ec88:	10800117 	ldw	r2,4(r2)
   2ec8c:	18bff736 	bltu	r3,r2,2ec6c <__alt_data_end+0xfffeec6c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   2ec90:	e0bffc17 	ldw	r2,-16(fp)
   2ec94:	10800917 	ldw	r2,36(r2)
   2ec98:	1000051e 	bne	r2,zero,2ecb0 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   2ec9c:	e0bffe17 	ldw	r2,-8(fp)
   2eca0:	00bfd016 	blt	zero,r2,2ebe4 <__alt_data_end+0xfffeebe4>
   2eca4:	00000306 	br	2ecb4 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   2eca8:	0001883a 	nop
   2ecac:	00000106 	br	2ecb4 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   2ecb0:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   2ecb4:	e0fffd17 	ldw	r3,-12(fp)
   2ecb8:	e0bff717 	ldw	r2,-36(fp)
   2ecbc:	18800426 	beq	r3,r2,2ecd0 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   2ecc0:	e0fffd17 	ldw	r3,-12(fp)
   2ecc4:	e0bff717 	ldw	r2,-36(fp)
   2ecc8:	1885c83a 	sub	r2,r3,r2
   2eccc:	00000606 	br	2ece8 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   2ecd0:	e0bfff17 	ldw	r2,-4(fp)
   2ecd4:	1090000c 	andi	r2,r2,16384
   2ecd8:	10000226 	beq	r2,zero,2ece4 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   2ecdc:	00bffd44 	movi	r2,-11
   2ece0:	00000106 	br	2ece8 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   2ece4:	00bffec4 	movi	r2,-5
}
   2ece8:	e037883a 	mov	sp,fp
   2ecec:	dfc00117 	ldw	ra,4(sp)
   2ecf0:	df000017 	ldw	fp,0(sp)
   2ecf4:	dec00204 	addi	sp,sp,8
   2ecf8:	f800283a 	ret

0002ecfc <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   2ecfc:	defffa04 	addi	sp,sp,-24
   2ed00:	dfc00515 	stw	ra,20(sp)
   2ed04:	df000415 	stw	fp,16(sp)
   2ed08:	df000404 	addi	fp,sp,16
   2ed0c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   2ed10:	0007883a 	mov	r3,zero
   2ed14:	e0bfff17 	ldw	r2,-4(fp)
   2ed18:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   2ed1c:	e0bfff17 	ldw	r2,-4(fp)
   2ed20:	10800104 	addi	r2,r2,4
   2ed24:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2ed28:	0005303a 	rdctl	r2,status
   2ed2c:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2ed30:	e0fffd17 	ldw	r3,-12(fp)
   2ed34:	00bfff84 	movi	r2,-2
   2ed38:	1884703a 	and	r2,r3,r2
   2ed3c:	1001703a 	wrctl	status,r2
  
  return context;
   2ed40:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   2ed44:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   2ed48:	002f5c80 	call	2f5c8 <alt_tick>
   2ed4c:	e0bffc17 	ldw	r2,-16(fp)
   2ed50:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2ed54:	e0bffe17 	ldw	r2,-8(fp)
   2ed58:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   2ed5c:	0001883a 	nop
   2ed60:	e037883a 	mov	sp,fp
   2ed64:	dfc00117 	ldw	ra,4(sp)
   2ed68:	df000017 	ldw	fp,0(sp)
   2ed6c:	dec00204 	addi	sp,sp,8
   2ed70:	f800283a 	ret

0002ed74 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   2ed74:	defff804 	addi	sp,sp,-32
   2ed78:	dfc00715 	stw	ra,28(sp)
   2ed7c:	df000615 	stw	fp,24(sp)
   2ed80:	df000604 	addi	fp,sp,24
   2ed84:	e13ffc15 	stw	r4,-16(fp)
   2ed88:	e17ffd15 	stw	r5,-12(fp)
   2ed8c:	e1bffe15 	stw	r6,-8(fp)
   2ed90:	e1ffff15 	stw	r7,-4(fp)
   2ed94:	e0bfff17 	ldw	r2,-4(fp)
   2ed98:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   2ed9c:	d0a6da17 	ldw	r2,-25752(gp)
   2eda0:	1000021e 	bne	r2,zero,2edac <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   2eda4:	e0bffb17 	ldw	r2,-20(fp)
   2eda8:	d0a6da15 	stw	r2,-25752(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   2edac:	e0bffc17 	ldw	r2,-16(fp)
   2edb0:	10800104 	addi	r2,r2,4
   2edb4:	00c001c4 	movi	r3,7
   2edb8:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   2edbc:	d8000015 	stw	zero,0(sp)
   2edc0:	e1fffc17 	ldw	r7,-16(fp)
   2edc4:	018000f4 	movhi	r6,3
   2edc8:	31bb3f04 	addi	r6,r6,-4868
   2edcc:	e17ffe17 	ldw	r5,-8(fp)
   2edd0:	e13ffd17 	ldw	r4,-12(fp)
   2edd4:	002d5a00 	call	2d5a0 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   2edd8:	0001883a 	nop
   2eddc:	e037883a 	mov	sp,fp
   2ede0:	dfc00117 	ldw	ra,4(sp)
   2ede4:	df000017 	ldw	fp,0(sp)
   2ede8:	dec00204 	addi	sp,sp,8
   2edec:	f800283a 	ret

0002edf0 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   2edf0:	defff504 	addi	sp,sp,-44
   2edf4:	df000a15 	stw	fp,40(sp)
   2edf8:	df000a04 	addi	fp,sp,40
   2edfc:	e13ffc15 	stw	r4,-16(fp)
   2ee00:	e17ffd15 	stw	r5,-12(fp)
   2ee04:	e1bffe15 	stw	r6,-8(fp)
   2ee08:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   2ee0c:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   2ee10:	d0a6da17 	ldw	r2,-25752(gp)
  
  if (alt_ticks_per_second ())
   2ee14:	10003c26 	beq	r2,zero,2ef08 <alt_alarm_start+0x118>
  {
    if (alarm)
   2ee18:	e0bffc17 	ldw	r2,-16(fp)
   2ee1c:	10003826 	beq	r2,zero,2ef00 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   2ee20:	e0bffc17 	ldw	r2,-16(fp)
   2ee24:	e0fffe17 	ldw	r3,-8(fp)
   2ee28:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   2ee2c:	e0bffc17 	ldw	r2,-16(fp)
   2ee30:	e0ffff17 	ldw	r3,-4(fp)
   2ee34:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2ee38:	0005303a 	rdctl	r2,status
   2ee3c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2ee40:	e0fff917 	ldw	r3,-28(fp)
   2ee44:	00bfff84 	movi	r2,-2
   2ee48:	1884703a 	and	r2,r3,r2
   2ee4c:	1001703a 	wrctl	status,r2
  
  return context;
   2ee50:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   2ee54:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   2ee58:	d0a6db17 	ldw	r2,-25748(gp)
      
      current_nticks = alt_nticks();
   2ee5c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   2ee60:	e0fffd17 	ldw	r3,-12(fp)
   2ee64:	e0bff617 	ldw	r2,-40(fp)
   2ee68:	1885883a 	add	r2,r3,r2
   2ee6c:	10c00044 	addi	r3,r2,1
   2ee70:	e0bffc17 	ldw	r2,-16(fp)
   2ee74:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   2ee78:	e0bffc17 	ldw	r2,-16(fp)
   2ee7c:	10c00217 	ldw	r3,8(r2)
   2ee80:	e0bff617 	ldw	r2,-40(fp)
   2ee84:	1880042e 	bgeu	r3,r2,2ee98 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   2ee88:	e0bffc17 	ldw	r2,-16(fp)
   2ee8c:	00c00044 	movi	r3,1
   2ee90:	10c00405 	stb	r3,16(r2)
   2ee94:	00000206 	br	2eea0 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   2ee98:	e0bffc17 	ldw	r2,-16(fp)
   2ee9c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   2eea0:	e0bffc17 	ldw	r2,-16(fp)
   2eea4:	d0e00e04 	addi	r3,gp,-32712
   2eea8:	e0fffa15 	stw	r3,-24(fp)
   2eeac:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   2eeb0:	e0bffb17 	ldw	r2,-20(fp)
   2eeb4:	e0fffa17 	ldw	r3,-24(fp)
   2eeb8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   2eebc:	e0bffa17 	ldw	r2,-24(fp)
   2eec0:	10c00017 	ldw	r3,0(r2)
   2eec4:	e0bffb17 	ldw	r2,-20(fp)
   2eec8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   2eecc:	e0bffa17 	ldw	r2,-24(fp)
   2eed0:	10800017 	ldw	r2,0(r2)
   2eed4:	e0fffb17 	ldw	r3,-20(fp)
   2eed8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   2eedc:	e0bffa17 	ldw	r2,-24(fp)
   2eee0:	e0fffb17 	ldw	r3,-20(fp)
   2eee4:	10c00015 	stw	r3,0(r2)
   2eee8:	e0bff817 	ldw	r2,-32(fp)
   2eeec:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2eef0:	e0bff717 	ldw	r2,-36(fp)
   2eef4:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   2eef8:	0005883a 	mov	r2,zero
   2eefc:	00000306 	br	2ef0c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   2ef00:	00bffa84 	movi	r2,-22
   2ef04:	00000106 	br	2ef0c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   2ef08:	00bfde84 	movi	r2,-134
  }
}
   2ef0c:	e037883a 	mov	sp,fp
   2ef10:	df000017 	ldw	fp,0(sp)
   2ef14:	dec00104 	addi	sp,sp,4
   2ef18:	f800283a 	ret

0002ef1c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   2ef1c:	deffff04 	addi	sp,sp,-4
   2ef20:	df000015 	stw	fp,0(sp)
   2ef24:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   2ef28:	0001883a 	nop
   2ef2c:	e037883a 	mov	sp,fp
   2ef30:	df000017 	ldw	fp,0(sp)
   2ef34:	dec00104 	addi	sp,sp,4
   2ef38:	f800283a 	ret

0002ef3c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2ef3c:	defffe04 	addi	sp,sp,-8
   2ef40:	dfc00115 	stw	ra,4(sp)
   2ef44:	df000015 	stw	fp,0(sp)
   2ef48:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2ef4c:	d0a00b17 	ldw	r2,-32724(gp)
   2ef50:	10000326 	beq	r2,zero,2ef60 <alt_get_errno+0x24>
   2ef54:	d0a00b17 	ldw	r2,-32724(gp)
   2ef58:	103ee83a 	callr	r2
   2ef5c:	00000106 	br	2ef64 <alt_get_errno+0x28>
   2ef60:	d0a6d404 	addi	r2,gp,-25776
}
   2ef64:	e037883a 	mov	sp,fp
   2ef68:	dfc00117 	ldw	ra,4(sp)
   2ef6c:	df000017 	ldw	fp,0(sp)
   2ef70:	dec00204 	addi	sp,sp,8
   2ef74:	f800283a 	ret

0002ef78 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   2ef78:	defffa04 	addi	sp,sp,-24
   2ef7c:	dfc00515 	stw	ra,20(sp)
   2ef80:	df000415 	stw	fp,16(sp)
   2ef84:	df000404 	addi	fp,sp,16
   2ef88:	e13ffe15 	stw	r4,-8(fp)
   2ef8c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   2ef90:	e0bffe17 	ldw	r2,-8(fp)
   2ef94:	10000326 	beq	r2,zero,2efa4 <alt_dev_llist_insert+0x2c>
   2ef98:	e0bffe17 	ldw	r2,-8(fp)
   2ef9c:	10800217 	ldw	r2,8(r2)
   2efa0:	1000061e 	bne	r2,zero,2efbc <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   2efa4:	002ef3c0 	call	2ef3c <alt_get_errno>
   2efa8:	1007883a 	mov	r3,r2
   2efac:	00800584 	movi	r2,22
   2efb0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   2efb4:	00bffa84 	movi	r2,-22
   2efb8:	00001306 	br	2f008 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   2efbc:	e0bffe17 	ldw	r2,-8(fp)
   2efc0:	e0ffff17 	ldw	r3,-4(fp)
   2efc4:	e0fffc15 	stw	r3,-16(fp)
   2efc8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   2efcc:	e0bffd17 	ldw	r2,-12(fp)
   2efd0:	e0fffc17 	ldw	r3,-16(fp)
   2efd4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   2efd8:	e0bffc17 	ldw	r2,-16(fp)
   2efdc:	10c00017 	ldw	r3,0(r2)
   2efe0:	e0bffd17 	ldw	r2,-12(fp)
   2efe4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   2efe8:	e0bffc17 	ldw	r2,-16(fp)
   2efec:	10800017 	ldw	r2,0(r2)
   2eff0:	e0fffd17 	ldw	r3,-12(fp)
   2eff4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   2eff8:	e0bffc17 	ldw	r2,-16(fp)
   2effc:	e0fffd17 	ldw	r3,-12(fp)
   2f000:	10c00015 	stw	r3,0(r2)

  return 0;  
   2f004:	0005883a 	mov	r2,zero
}
   2f008:	e037883a 	mov	sp,fp
   2f00c:	dfc00117 	ldw	ra,4(sp)
   2f010:	df000017 	ldw	fp,0(sp)
   2f014:	dec00204 	addi	sp,sp,8
   2f018:	f800283a 	ret

0002f01c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   2f01c:	defffd04 	addi	sp,sp,-12
   2f020:	dfc00215 	stw	ra,8(sp)
   2f024:	df000115 	stw	fp,4(sp)
   2f028:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   2f02c:	008000f4 	movhi	r2,3
   2f030:	10bf8a04 	addi	r2,r2,-472
   2f034:	e0bfff15 	stw	r2,-4(fp)
   2f038:	00000606 	br	2f054 <_do_ctors+0x38>
        (*ctor) (); 
   2f03c:	e0bfff17 	ldw	r2,-4(fp)
   2f040:	10800017 	ldw	r2,0(r2)
   2f044:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   2f048:	e0bfff17 	ldw	r2,-4(fp)
   2f04c:	10bfff04 	addi	r2,r2,-4
   2f050:	e0bfff15 	stw	r2,-4(fp)
   2f054:	e0ffff17 	ldw	r3,-4(fp)
   2f058:	008000f4 	movhi	r2,3
   2f05c:	10bf8b04 	addi	r2,r2,-468
   2f060:	18bff62e 	bgeu	r3,r2,2f03c <__alt_data_end+0xfffef03c>
        (*ctor) (); 
}
   2f064:	0001883a 	nop
   2f068:	e037883a 	mov	sp,fp
   2f06c:	dfc00117 	ldw	ra,4(sp)
   2f070:	df000017 	ldw	fp,0(sp)
   2f074:	dec00204 	addi	sp,sp,8
   2f078:	f800283a 	ret

0002f07c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   2f07c:	defffd04 	addi	sp,sp,-12
   2f080:	dfc00215 	stw	ra,8(sp)
   2f084:	df000115 	stw	fp,4(sp)
   2f088:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   2f08c:	008000f4 	movhi	r2,3
   2f090:	10bf8a04 	addi	r2,r2,-472
   2f094:	e0bfff15 	stw	r2,-4(fp)
   2f098:	00000606 	br	2f0b4 <_do_dtors+0x38>
        (*dtor) (); 
   2f09c:	e0bfff17 	ldw	r2,-4(fp)
   2f0a0:	10800017 	ldw	r2,0(r2)
   2f0a4:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   2f0a8:	e0bfff17 	ldw	r2,-4(fp)
   2f0ac:	10bfff04 	addi	r2,r2,-4
   2f0b0:	e0bfff15 	stw	r2,-4(fp)
   2f0b4:	e0ffff17 	ldw	r3,-4(fp)
   2f0b8:	008000f4 	movhi	r2,3
   2f0bc:	10bf8b04 	addi	r2,r2,-468
   2f0c0:	18bff62e 	bgeu	r3,r2,2f09c <__alt_data_end+0xfffef09c>
        (*dtor) (); 
}
   2f0c4:	0001883a 	nop
   2f0c8:	e037883a 	mov	sp,fp
   2f0cc:	dfc00117 	ldw	ra,4(sp)
   2f0d0:	df000017 	ldw	fp,0(sp)
   2f0d4:	dec00204 	addi	sp,sp,8
   2f0d8:	f800283a 	ret

0002f0dc <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   2f0dc:	deffff04 	addi	sp,sp,-4
   2f0e0:	df000015 	stw	fp,0(sp)
   2f0e4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   2f0e8:	0001883a 	nop
   2f0ec:	e037883a 	mov	sp,fp
   2f0f0:	df000017 	ldw	fp,0(sp)
   2f0f4:	dec00104 	addi	sp,sp,4
   2f0f8:	f800283a 	ret

0002f0fc <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   2f0fc:	defffe04 	addi	sp,sp,-8
   2f100:	df000115 	stw	fp,4(sp)
   2f104:	df000104 	addi	fp,sp,4
   2f108:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   2f10c:	e0bfff17 	ldw	r2,-4(fp)
   2f110:	10bffe84 	addi	r2,r2,-6
   2f114:	10c00428 	cmpgeui	r3,r2,16
   2f118:	18001a1e 	bne	r3,zero,2f184 <alt_exception_cause_generated_bad_addr+0x88>
   2f11c:	100690ba 	slli	r3,r2,2
   2f120:	008000f4 	movhi	r2,3
   2f124:	10bc4d04 	addi	r2,r2,-3788
   2f128:	1885883a 	add	r2,r3,r2
   2f12c:	10800017 	ldw	r2,0(r2)
   2f130:	1000683a 	jmp	r2
   2f134:	0002f174 	movhi	zero,3013
   2f138:	0002f174 	movhi	zero,3013
   2f13c:	0002f184 	movi	zero,3014
   2f140:	0002f184 	movi	zero,3014
   2f144:	0002f184 	movi	zero,3014
   2f148:	0002f174 	movhi	zero,3013
   2f14c:	0002f17c 	xorhi	zero,zero,3013
   2f150:	0002f184 	movi	zero,3014
   2f154:	0002f174 	movhi	zero,3013
   2f158:	0002f174 	movhi	zero,3013
   2f15c:	0002f184 	movi	zero,3014
   2f160:	0002f174 	movhi	zero,3013
   2f164:	0002f17c 	xorhi	zero,zero,3013
   2f168:	0002f184 	movi	zero,3014
   2f16c:	0002f184 	movi	zero,3014
   2f170:	0002f174 	movhi	zero,3013
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   2f174:	00800044 	movi	r2,1
   2f178:	00000306 	br	2f188 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   2f17c:	0005883a 	mov	r2,zero
   2f180:	00000106 	br	2f188 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   2f184:	0005883a 	mov	r2,zero
  }
}
   2f188:	e037883a 	mov	sp,fp
   2f18c:	df000017 	ldw	fp,0(sp)
   2f190:	dec00104 	addi	sp,sp,4
   2f194:	f800283a 	ret

0002f198 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   2f198:	defff904 	addi	sp,sp,-28
   2f19c:	dfc00615 	stw	ra,24(sp)
   2f1a0:	df000515 	stw	fp,20(sp)
   2f1a4:	df000504 	addi	fp,sp,20
   2f1a8:	e13ffc15 	stw	r4,-16(fp)
   2f1ac:	e17ffd15 	stw	r5,-12(fp)
   2f1b0:	e1bffe15 	stw	r6,-8(fp)
   2f1b4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   2f1b8:	e1bfff17 	ldw	r6,-4(fp)
   2f1bc:	e17ffe17 	ldw	r5,-8(fp)
   2f1c0:	e13ffd17 	ldw	r4,-12(fp)
   2f1c4:	002f3d80 	call	2f3d8 <open>
   2f1c8:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   2f1cc:	e0bffb17 	ldw	r2,-20(fp)
   2f1d0:	10001c16 	blt	r2,zero,2f244 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   2f1d4:	008000f4 	movhi	r2,3
   2f1d8:	10831204 	addi	r2,r2,3144
   2f1dc:	e0fffb17 	ldw	r3,-20(fp)
   2f1e0:	18c00324 	muli	r3,r3,12
   2f1e4:	10c5883a 	add	r2,r2,r3
   2f1e8:	10c00017 	ldw	r3,0(r2)
   2f1ec:	e0bffc17 	ldw	r2,-16(fp)
   2f1f0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   2f1f4:	008000f4 	movhi	r2,3
   2f1f8:	10831204 	addi	r2,r2,3144
   2f1fc:	e0fffb17 	ldw	r3,-20(fp)
   2f200:	18c00324 	muli	r3,r3,12
   2f204:	10c5883a 	add	r2,r2,r3
   2f208:	10800104 	addi	r2,r2,4
   2f20c:	10c00017 	ldw	r3,0(r2)
   2f210:	e0bffc17 	ldw	r2,-16(fp)
   2f214:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   2f218:	008000f4 	movhi	r2,3
   2f21c:	10831204 	addi	r2,r2,3144
   2f220:	e0fffb17 	ldw	r3,-20(fp)
   2f224:	18c00324 	muli	r3,r3,12
   2f228:	10c5883a 	add	r2,r2,r3
   2f22c:	10800204 	addi	r2,r2,8
   2f230:	10c00017 	ldw	r3,0(r2)
   2f234:	e0bffc17 	ldw	r2,-16(fp)
   2f238:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   2f23c:	e13ffb17 	ldw	r4,-20(fp)
   2f240:	002df800 	call	2df80 <alt_release_fd>
  }
} 
   2f244:	0001883a 	nop
   2f248:	e037883a 	mov	sp,fp
   2f24c:	dfc00117 	ldw	ra,4(sp)
   2f250:	df000017 	ldw	fp,0(sp)
   2f254:	dec00204 	addi	sp,sp,8
   2f258:	f800283a 	ret

0002f25c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   2f25c:	defffb04 	addi	sp,sp,-20
   2f260:	dfc00415 	stw	ra,16(sp)
   2f264:	df000315 	stw	fp,12(sp)
   2f268:	df000304 	addi	fp,sp,12
   2f26c:	e13ffd15 	stw	r4,-12(fp)
   2f270:	e17ffe15 	stw	r5,-8(fp)
   2f274:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   2f278:	01c07fc4 	movi	r7,511
   2f27c:	01800044 	movi	r6,1
   2f280:	e17ffd17 	ldw	r5,-12(fp)
   2f284:	010000f4 	movhi	r4,3
   2f288:	21031504 	addi	r4,r4,3156
   2f28c:	002f1980 	call	2f198 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   2f290:	01c07fc4 	movi	r7,511
   2f294:	000d883a 	mov	r6,zero
   2f298:	e17ffe17 	ldw	r5,-8(fp)
   2f29c:	010000f4 	movhi	r4,3
   2f2a0:	21031204 	addi	r4,r4,3144
   2f2a4:	002f1980 	call	2f198 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   2f2a8:	01c07fc4 	movi	r7,511
   2f2ac:	01800044 	movi	r6,1
   2f2b0:	e17fff17 	ldw	r5,-4(fp)
   2f2b4:	010000f4 	movhi	r4,3
   2f2b8:	21031804 	addi	r4,r4,3168
   2f2bc:	002f1980 	call	2f198 <alt_open_fd>
}  
   2f2c0:	0001883a 	nop
   2f2c4:	e037883a 	mov	sp,fp
   2f2c8:	dfc00117 	ldw	ra,4(sp)
   2f2cc:	df000017 	ldw	fp,0(sp)
   2f2d0:	dec00204 	addi	sp,sp,8
   2f2d4:	f800283a 	ret

0002f2d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2f2d8:	defffe04 	addi	sp,sp,-8
   2f2dc:	dfc00115 	stw	ra,4(sp)
   2f2e0:	df000015 	stw	fp,0(sp)
   2f2e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2f2e8:	d0a00b17 	ldw	r2,-32724(gp)
   2f2ec:	10000326 	beq	r2,zero,2f2fc <alt_get_errno+0x24>
   2f2f0:	d0a00b17 	ldw	r2,-32724(gp)
   2f2f4:	103ee83a 	callr	r2
   2f2f8:	00000106 	br	2f300 <alt_get_errno+0x28>
   2f2fc:	d0a6d404 	addi	r2,gp,-25776
}
   2f300:	e037883a 	mov	sp,fp
   2f304:	dfc00117 	ldw	ra,4(sp)
   2f308:	df000017 	ldw	fp,0(sp)
   2f30c:	dec00204 	addi	sp,sp,8
   2f310:	f800283a 	ret

0002f314 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   2f314:	defffd04 	addi	sp,sp,-12
   2f318:	df000215 	stw	fp,8(sp)
   2f31c:	df000204 	addi	fp,sp,8
   2f320:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   2f324:	e0bfff17 	ldw	r2,-4(fp)
   2f328:	10800217 	ldw	r2,8(r2)
   2f32c:	10d00034 	orhi	r3,r2,16384
   2f330:	e0bfff17 	ldw	r2,-4(fp)
   2f334:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   2f338:	e03ffe15 	stw	zero,-8(fp)
   2f33c:	00001d06 	br	2f3b4 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   2f340:	008000f4 	movhi	r2,3
   2f344:	10831204 	addi	r2,r2,3144
   2f348:	e0fffe17 	ldw	r3,-8(fp)
   2f34c:	18c00324 	muli	r3,r3,12
   2f350:	10c5883a 	add	r2,r2,r3
   2f354:	10c00017 	ldw	r3,0(r2)
   2f358:	e0bfff17 	ldw	r2,-4(fp)
   2f35c:	10800017 	ldw	r2,0(r2)
   2f360:	1880111e 	bne	r3,r2,2f3a8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   2f364:	008000f4 	movhi	r2,3
   2f368:	10831204 	addi	r2,r2,3144
   2f36c:	e0fffe17 	ldw	r3,-8(fp)
   2f370:	18c00324 	muli	r3,r3,12
   2f374:	10c5883a 	add	r2,r2,r3
   2f378:	10800204 	addi	r2,r2,8
   2f37c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   2f380:	1000090e 	bge	r2,zero,2f3a8 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   2f384:	e0bffe17 	ldw	r2,-8(fp)
   2f388:	10c00324 	muli	r3,r2,12
   2f38c:	008000f4 	movhi	r2,3
   2f390:	10831204 	addi	r2,r2,3144
   2f394:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   2f398:	e0bfff17 	ldw	r2,-4(fp)
   2f39c:	18800226 	beq	r3,r2,2f3a8 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   2f3a0:	00bffcc4 	movi	r2,-13
   2f3a4:	00000806 	br	2f3c8 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   2f3a8:	e0bffe17 	ldw	r2,-8(fp)
   2f3ac:	10800044 	addi	r2,r2,1
   2f3b0:	e0bffe15 	stw	r2,-8(fp)
   2f3b4:	d0a00a17 	ldw	r2,-32728(gp)
   2f3b8:	1007883a 	mov	r3,r2
   2f3bc:	e0bffe17 	ldw	r2,-8(fp)
   2f3c0:	18bfdf2e 	bgeu	r3,r2,2f340 <__alt_data_end+0xfffef340>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   2f3c4:	0005883a 	mov	r2,zero
}
   2f3c8:	e037883a 	mov	sp,fp
   2f3cc:	df000017 	ldw	fp,0(sp)
   2f3d0:	dec00104 	addi	sp,sp,4
   2f3d4:	f800283a 	ret

0002f3d8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   2f3d8:	defff604 	addi	sp,sp,-40
   2f3dc:	dfc00915 	stw	ra,36(sp)
   2f3e0:	df000815 	stw	fp,32(sp)
   2f3e4:	df000804 	addi	fp,sp,32
   2f3e8:	e13ffd15 	stw	r4,-12(fp)
   2f3ec:	e17ffe15 	stw	r5,-8(fp)
   2f3f0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   2f3f4:	00bfffc4 	movi	r2,-1
   2f3f8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   2f3fc:	00bffb44 	movi	r2,-19
   2f400:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   2f404:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   2f408:	d1600804 	addi	r5,gp,-32736
   2f40c:	e13ffd17 	ldw	r4,-12(fp)
   2f410:	002f6f40 	call	2f6f4 <alt_find_dev>
   2f414:	e0bff815 	stw	r2,-32(fp)
   2f418:	e0bff817 	ldw	r2,-32(fp)
   2f41c:	1000051e 	bne	r2,zero,2f434 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   2f420:	e13ffd17 	ldw	r4,-12(fp)
   2f424:	002f7840 	call	2f784 <alt_find_file>
   2f428:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   2f42c:	00800044 	movi	r2,1
   2f430:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   2f434:	e0bff817 	ldw	r2,-32(fp)
   2f438:	10002926 	beq	r2,zero,2f4e0 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   2f43c:	e13ff817 	ldw	r4,-32(fp)
   2f440:	002f88c0 	call	2f88c <alt_get_fd>
   2f444:	e0bff915 	stw	r2,-28(fp)
   2f448:	e0bff917 	ldw	r2,-28(fp)
   2f44c:	1000030e 	bge	r2,zero,2f45c <open+0x84>
    {
      status = index;
   2f450:	e0bff917 	ldw	r2,-28(fp)
   2f454:	e0bffa15 	stw	r2,-24(fp)
   2f458:	00002306 	br	2f4e8 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   2f45c:	e0bff917 	ldw	r2,-28(fp)
   2f460:	10c00324 	muli	r3,r2,12
   2f464:	008000f4 	movhi	r2,3
   2f468:	10831204 	addi	r2,r2,3144
   2f46c:	1885883a 	add	r2,r3,r2
   2f470:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   2f474:	e0fffe17 	ldw	r3,-8(fp)
   2f478:	00900034 	movhi	r2,16384
   2f47c:	10bfffc4 	addi	r2,r2,-1
   2f480:	1886703a 	and	r3,r3,r2
   2f484:	e0bffc17 	ldw	r2,-16(fp)
   2f488:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   2f48c:	e0bffb17 	ldw	r2,-20(fp)
   2f490:	1000051e 	bne	r2,zero,2f4a8 <open+0xd0>
   2f494:	e13ffc17 	ldw	r4,-16(fp)
   2f498:	002f3140 	call	2f314 <alt_file_locked>
   2f49c:	e0bffa15 	stw	r2,-24(fp)
   2f4a0:	e0bffa17 	ldw	r2,-24(fp)
   2f4a4:	10001016 	blt	r2,zero,2f4e8 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   2f4a8:	e0bff817 	ldw	r2,-32(fp)
   2f4ac:	10800317 	ldw	r2,12(r2)
   2f4b0:	10000826 	beq	r2,zero,2f4d4 <open+0xfc>
   2f4b4:	e0bff817 	ldw	r2,-32(fp)
   2f4b8:	10800317 	ldw	r2,12(r2)
   2f4bc:	e1ffff17 	ldw	r7,-4(fp)
   2f4c0:	e1bffe17 	ldw	r6,-8(fp)
   2f4c4:	e17ffd17 	ldw	r5,-12(fp)
   2f4c8:	e13ffc17 	ldw	r4,-16(fp)
   2f4cc:	103ee83a 	callr	r2
   2f4d0:	00000106 	br	2f4d8 <open+0x100>
   2f4d4:	0005883a 	mov	r2,zero
   2f4d8:	e0bffa15 	stw	r2,-24(fp)
   2f4dc:	00000206 	br	2f4e8 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   2f4e0:	00bffb44 	movi	r2,-19
   2f4e4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   2f4e8:	e0bffa17 	ldw	r2,-24(fp)
   2f4ec:	1000090e 	bge	r2,zero,2f514 <open+0x13c>
  {
    alt_release_fd (index);  
   2f4f0:	e13ff917 	ldw	r4,-28(fp)
   2f4f4:	002df800 	call	2df80 <alt_release_fd>
    ALT_ERRNO = -status;
   2f4f8:	002f2d80 	call	2f2d8 <alt_get_errno>
   2f4fc:	1007883a 	mov	r3,r2
   2f500:	e0bffa17 	ldw	r2,-24(fp)
   2f504:	0085c83a 	sub	r2,zero,r2
   2f508:	18800015 	stw	r2,0(r3)
    return -1;
   2f50c:	00bfffc4 	movi	r2,-1
   2f510:	00000106 	br	2f518 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   2f514:	e0bff917 	ldw	r2,-28(fp)
}
   2f518:	e037883a 	mov	sp,fp
   2f51c:	dfc00117 	ldw	ra,4(sp)
   2f520:	df000017 	ldw	fp,0(sp)
   2f524:	dec00204 	addi	sp,sp,8
   2f528:	f800283a 	ret

0002f52c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   2f52c:	defffa04 	addi	sp,sp,-24
   2f530:	df000515 	stw	fp,20(sp)
   2f534:	df000504 	addi	fp,sp,20
   2f538:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2f53c:	0005303a 	rdctl	r2,status
   2f540:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2f544:	e0fffc17 	ldw	r3,-16(fp)
   2f548:	00bfff84 	movi	r2,-2
   2f54c:	1884703a 	and	r2,r3,r2
   2f550:	1001703a 	wrctl	status,r2
  
  return context;
   2f554:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   2f558:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   2f55c:	e0bfff17 	ldw	r2,-4(fp)
   2f560:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   2f564:	e0bffd17 	ldw	r2,-12(fp)
   2f568:	10800017 	ldw	r2,0(r2)
   2f56c:	e0fffd17 	ldw	r3,-12(fp)
   2f570:	18c00117 	ldw	r3,4(r3)
   2f574:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   2f578:	e0bffd17 	ldw	r2,-12(fp)
   2f57c:	10800117 	ldw	r2,4(r2)
   2f580:	e0fffd17 	ldw	r3,-12(fp)
   2f584:	18c00017 	ldw	r3,0(r3)
   2f588:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   2f58c:	e0bffd17 	ldw	r2,-12(fp)
   2f590:	e0fffd17 	ldw	r3,-12(fp)
   2f594:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   2f598:	e0bffd17 	ldw	r2,-12(fp)
   2f59c:	e0fffd17 	ldw	r3,-12(fp)
   2f5a0:	10c00015 	stw	r3,0(r2)
   2f5a4:	e0bffb17 	ldw	r2,-20(fp)
   2f5a8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2f5ac:	e0bffe17 	ldw	r2,-8(fp)
   2f5b0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   2f5b4:	0001883a 	nop
   2f5b8:	e037883a 	mov	sp,fp
   2f5bc:	df000017 	ldw	fp,0(sp)
   2f5c0:	dec00104 	addi	sp,sp,4
   2f5c4:	f800283a 	ret

0002f5c8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   2f5c8:	defffb04 	addi	sp,sp,-20
   2f5cc:	dfc00415 	stw	ra,16(sp)
   2f5d0:	df000315 	stw	fp,12(sp)
   2f5d4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   2f5d8:	d0a00e17 	ldw	r2,-32712(gp)
   2f5dc:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   2f5e0:	d0a6db17 	ldw	r2,-25748(gp)
   2f5e4:	10800044 	addi	r2,r2,1
   2f5e8:	d0a6db15 	stw	r2,-25748(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   2f5ec:	00002e06 	br	2f6a8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   2f5f0:	e0bffd17 	ldw	r2,-12(fp)
   2f5f4:	10800017 	ldw	r2,0(r2)
   2f5f8:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   2f5fc:	e0bffd17 	ldw	r2,-12(fp)
   2f600:	10800403 	ldbu	r2,16(r2)
   2f604:	10803fcc 	andi	r2,r2,255
   2f608:	10000426 	beq	r2,zero,2f61c <alt_tick+0x54>
   2f60c:	d0a6db17 	ldw	r2,-25748(gp)
   2f610:	1000021e 	bne	r2,zero,2f61c <alt_tick+0x54>
    {
      alarm->rollover = 0;
   2f614:	e0bffd17 	ldw	r2,-12(fp)
   2f618:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   2f61c:	e0bffd17 	ldw	r2,-12(fp)
   2f620:	10800217 	ldw	r2,8(r2)
   2f624:	d0e6db17 	ldw	r3,-25748(gp)
   2f628:	18801d36 	bltu	r3,r2,2f6a0 <alt_tick+0xd8>
   2f62c:	e0bffd17 	ldw	r2,-12(fp)
   2f630:	10800403 	ldbu	r2,16(r2)
   2f634:	10803fcc 	andi	r2,r2,255
   2f638:	1000191e 	bne	r2,zero,2f6a0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   2f63c:	e0bffd17 	ldw	r2,-12(fp)
   2f640:	10800317 	ldw	r2,12(r2)
   2f644:	e0fffd17 	ldw	r3,-12(fp)
   2f648:	18c00517 	ldw	r3,20(r3)
   2f64c:	1809883a 	mov	r4,r3
   2f650:	103ee83a 	callr	r2
   2f654:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   2f658:	e0bfff17 	ldw	r2,-4(fp)
   2f65c:	1000031e 	bne	r2,zero,2f66c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   2f660:	e13ffd17 	ldw	r4,-12(fp)
   2f664:	002f52c0 	call	2f52c <alt_alarm_stop>
   2f668:	00000d06 	br	2f6a0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   2f66c:	e0bffd17 	ldw	r2,-12(fp)
   2f670:	10c00217 	ldw	r3,8(r2)
   2f674:	e0bfff17 	ldw	r2,-4(fp)
   2f678:	1887883a 	add	r3,r3,r2
   2f67c:	e0bffd17 	ldw	r2,-12(fp)
   2f680:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   2f684:	e0bffd17 	ldw	r2,-12(fp)
   2f688:	10c00217 	ldw	r3,8(r2)
   2f68c:	d0a6db17 	ldw	r2,-25748(gp)
   2f690:	1880032e 	bgeu	r3,r2,2f6a0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   2f694:	e0bffd17 	ldw	r2,-12(fp)
   2f698:	00c00044 	movi	r3,1
   2f69c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   2f6a0:	e0bffe17 	ldw	r2,-8(fp)
   2f6a4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   2f6a8:	e0fffd17 	ldw	r3,-12(fp)
   2f6ac:	d0a00e04 	addi	r2,gp,-32712
   2f6b0:	18bfcf1e 	bne	r3,r2,2f5f0 <__alt_data_end+0xfffef5f0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   2f6b4:	0001883a 	nop
}
   2f6b8:	0001883a 	nop
   2f6bc:	e037883a 	mov	sp,fp
   2f6c0:	dfc00117 	ldw	ra,4(sp)
   2f6c4:	df000017 	ldw	fp,0(sp)
   2f6c8:	dec00204 	addi	sp,sp,8
   2f6cc:	f800283a 	ret

0002f6d0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   2f6d0:	deffff04 	addi	sp,sp,-4
   2f6d4:	df000015 	stw	fp,0(sp)
   2f6d8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   2f6dc:	000170fa 	wrctl	ienable,zero
}
   2f6e0:	0001883a 	nop
   2f6e4:	e037883a 	mov	sp,fp
   2f6e8:	df000017 	ldw	fp,0(sp)
   2f6ec:	dec00104 	addi	sp,sp,4
   2f6f0:	f800283a 	ret

0002f6f4 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   2f6f4:	defffa04 	addi	sp,sp,-24
   2f6f8:	dfc00515 	stw	ra,20(sp)
   2f6fc:	df000415 	stw	fp,16(sp)
   2f700:	df000404 	addi	fp,sp,16
   2f704:	e13ffe15 	stw	r4,-8(fp)
   2f708:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   2f70c:	e0bfff17 	ldw	r2,-4(fp)
   2f710:	10800017 	ldw	r2,0(r2)
   2f714:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   2f718:	e13ffe17 	ldw	r4,-8(fp)
   2f71c:	00276d40 	call	276d4 <strlen>
   2f720:	10800044 	addi	r2,r2,1
   2f724:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   2f728:	00000d06 	br	2f760 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   2f72c:	e0bffc17 	ldw	r2,-16(fp)
   2f730:	10800217 	ldw	r2,8(r2)
   2f734:	e0fffd17 	ldw	r3,-12(fp)
   2f738:	180d883a 	mov	r6,r3
   2f73c:	e17ffe17 	ldw	r5,-8(fp)
   2f740:	1009883a 	mov	r4,r2
   2f744:	002f97c0 	call	2f97c <memcmp>
   2f748:	1000021e 	bne	r2,zero,2f754 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   2f74c:	e0bffc17 	ldw	r2,-16(fp)
   2f750:	00000706 	br	2f770 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   2f754:	e0bffc17 	ldw	r2,-16(fp)
   2f758:	10800017 	ldw	r2,0(r2)
   2f75c:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   2f760:	e0fffc17 	ldw	r3,-16(fp)
   2f764:	e0bfff17 	ldw	r2,-4(fp)
   2f768:	18bff01e 	bne	r3,r2,2f72c <__alt_data_end+0xfffef72c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   2f76c:	0005883a 	mov	r2,zero
}
   2f770:	e037883a 	mov	sp,fp
   2f774:	dfc00117 	ldw	ra,4(sp)
   2f778:	df000017 	ldw	fp,0(sp)
   2f77c:	dec00204 	addi	sp,sp,8
   2f780:	f800283a 	ret

0002f784 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   2f784:	defffb04 	addi	sp,sp,-20
   2f788:	dfc00415 	stw	ra,16(sp)
   2f78c:	df000315 	stw	fp,12(sp)
   2f790:	df000304 	addi	fp,sp,12
   2f794:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   2f798:	d0a00617 	ldw	r2,-32744(gp)
   2f79c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   2f7a0:	00003106 	br	2f868 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   2f7a4:	e0bffd17 	ldw	r2,-12(fp)
   2f7a8:	10800217 	ldw	r2,8(r2)
   2f7ac:	1009883a 	mov	r4,r2
   2f7b0:	00276d40 	call	276d4 <strlen>
   2f7b4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   2f7b8:	e0bffd17 	ldw	r2,-12(fp)
   2f7bc:	10c00217 	ldw	r3,8(r2)
   2f7c0:	e0bffe17 	ldw	r2,-8(fp)
   2f7c4:	10bfffc4 	addi	r2,r2,-1
   2f7c8:	1885883a 	add	r2,r3,r2
   2f7cc:	10800003 	ldbu	r2,0(r2)
   2f7d0:	10803fcc 	andi	r2,r2,255
   2f7d4:	1080201c 	xori	r2,r2,128
   2f7d8:	10bfe004 	addi	r2,r2,-128
   2f7dc:	10800bd8 	cmpnei	r2,r2,47
   2f7e0:	1000031e 	bne	r2,zero,2f7f0 <alt_find_file+0x6c>
    {
      len -= 1;
   2f7e4:	e0bffe17 	ldw	r2,-8(fp)
   2f7e8:	10bfffc4 	addi	r2,r2,-1
   2f7ec:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   2f7f0:	e0bffe17 	ldw	r2,-8(fp)
   2f7f4:	e0ffff17 	ldw	r3,-4(fp)
   2f7f8:	1885883a 	add	r2,r3,r2
   2f7fc:	10800003 	ldbu	r2,0(r2)
   2f800:	10803fcc 	andi	r2,r2,255
   2f804:	1080201c 	xori	r2,r2,128
   2f808:	10bfe004 	addi	r2,r2,-128
   2f80c:	10800be0 	cmpeqi	r2,r2,47
   2f810:	1000081e 	bne	r2,zero,2f834 <alt_find_file+0xb0>
   2f814:	e0bffe17 	ldw	r2,-8(fp)
   2f818:	e0ffff17 	ldw	r3,-4(fp)
   2f81c:	1885883a 	add	r2,r3,r2
   2f820:	10800003 	ldbu	r2,0(r2)
   2f824:	10803fcc 	andi	r2,r2,255
   2f828:	1080201c 	xori	r2,r2,128
   2f82c:	10bfe004 	addi	r2,r2,-128
   2f830:	10000a1e 	bne	r2,zero,2f85c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   2f834:	e0bffd17 	ldw	r2,-12(fp)
   2f838:	10800217 	ldw	r2,8(r2)
   2f83c:	e0fffe17 	ldw	r3,-8(fp)
   2f840:	180d883a 	mov	r6,r3
   2f844:	e17fff17 	ldw	r5,-4(fp)
   2f848:	1009883a 	mov	r4,r2
   2f84c:	002f97c0 	call	2f97c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   2f850:	1000021e 	bne	r2,zero,2f85c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   2f854:	e0bffd17 	ldw	r2,-12(fp)
   2f858:	00000706 	br	2f878 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   2f85c:	e0bffd17 	ldw	r2,-12(fp)
   2f860:	10800017 	ldw	r2,0(r2)
   2f864:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   2f868:	e0fffd17 	ldw	r3,-12(fp)
   2f86c:	d0a00604 	addi	r2,gp,-32744
   2f870:	18bfcc1e 	bne	r3,r2,2f7a4 <__alt_data_end+0xfffef7a4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   2f874:	0005883a 	mov	r2,zero
}
   2f878:	e037883a 	mov	sp,fp
   2f87c:	dfc00117 	ldw	ra,4(sp)
   2f880:	df000017 	ldw	fp,0(sp)
   2f884:	dec00204 	addi	sp,sp,8
   2f888:	f800283a 	ret

0002f88c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   2f88c:	defffc04 	addi	sp,sp,-16
   2f890:	df000315 	stw	fp,12(sp)
   2f894:	df000304 	addi	fp,sp,12
   2f898:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   2f89c:	00bffa04 	movi	r2,-24
   2f8a0:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   2f8a4:	e03ffd15 	stw	zero,-12(fp)
   2f8a8:	00001906 	br	2f910 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   2f8ac:	008000f4 	movhi	r2,3
   2f8b0:	10831204 	addi	r2,r2,3144
   2f8b4:	e0fffd17 	ldw	r3,-12(fp)
   2f8b8:	18c00324 	muli	r3,r3,12
   2f8bc:	10c5883a 	add	r2,r2,r3
   2f8c0:	10800017 	ldw	r2,0(r2)
   2f8c4:	10000f1e 	bne	r2,zero,2f904 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   2f8c8:	008000f4 	movhi	r2,3
   2f8cc:	10831204 	addi	r2,r2,3144
   2f8d0:	e0fffd17 	ldw	r3,-12(fp)
   2f8d4:	18c00324 	muli	r3,r3,12
   2f8d8:	10c5883a 	add	r2,r2,r3
   2f8dc:	e0ffff17 	ldw	r3,-4(fp)
   2f8e0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   2f8e4:	d0e00a17 	ldw	r3,-32728(gp)
   2f8e8:	e0bffd17 	ldw	r2,-12(fp)
   2f8ec:	1880020e 	bge	r3,r2,2f8f8 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   2f8f0:	e0bffd17 	ldw	r2,-12(fp)
   2f8f4:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   2f8f8:	e0bffd17 	ldw	r2,-12(fp)
   2f8fc:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   2f900:	00000606 	br	2f91c <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   2f904:	e0bffd17 	ldw	r2,-12(fp)
   2f908:	10800044 	addi	r2,r2,1
   2f90c:	e0bffd15 	stw	r2,-12(fp)
   2f910:	e0bffd17 	ldw	r2,-12(fp)
   2f914:	10800810 	cmplti	r2,r2,32
   2f918:	103fe41e 	bne	r2,zero,2f8ac <__alt_data_end+0xfffef8ac>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   2f91c:	e0bffe17 	ldw	r2,-8(fp)
}
   2f920:	e037883a 	mov	sp,fp
   2f924:	df000017 	ldw	fp,0(sp)
   2f928:	dec00104 	addi	sp,sp,4
   2f92c:	f800283a 	ret

0002f930 <atexit>:
   2f930:	200b883a 	mov	r5,r4
   2f934:	000f883a 	mov	r7,zero
   2f938:	000d883a 	mov	r6,zero
   2f93c:	0009883a 	mov	r4,zero
   2f940:	002fb601 	jmpi	2fb60 <__register_exitproc>

0002f944 <exit>:
   2f944:	defffe04 	addi	sp,sp,-8
   2f948:	000b883a 	mov	r5,zero
   2f94c:	dc000015 	stw	r16,0(sp)
   2f950:	dfc00115 	stw	ra,4(sp)
   2f954:	2021883a 	mov	r16,r4
   2f958:	002fc780 	call	2fc78 <__call_exitprocs>
   2f95c:	008000f4 	movhi	r2,3
   2f960:	10878a04 	addi	r2,r2,7720
   2f964:	11000017 	ldw	r4,0(r2)
   2f968:	20800f17 	ldw	r2,60(r4)
   2f96c:	10000126 	beq	r2,zero,2f974 <exit+0x30>
   2f970:	103ee83a 	callr	r2
   2f974:	8009883a 	mov	r4,r16
   2f978:	002fdf80 	call	2fdf8 <_exit>

0002f97c <memcmp>:
   2f97c:	01c000c4 	movi	r7,3
   2f980:	3980192e 	bgeu	r7,r6,2f9e8 <memcmp+0x6c>
   2f984:	2144b03a 	or	r2,r4,r5
   2f988:	11c4703a 	and	r2,r2,r7
   2f98c:	10000f26 	beq	r2,zero,2f9cc <memcmp+0x50>
   2f990:	20800003 	ldbu	r2,0(r4)
   2f994:	28c00003 	ldbu	r3,0(r5)
   2f998:	10c0151e 	bne	r2,r3,2f9f0 <memcmp+0x74>
   2f99c:	31bfff84 	addi	r6,r6,-2
   2f9a0:	01ffffc4 	movi	r7,-1
   2f9a4:	00000406 	br	2f9b8 <memcmp+0x3c>
   2f9a8:	20800003 	ldbu	r2,0(r4)
   2f9ac:	28c00003 	ldbu	r3,0(r5)
   2f9b0:	31bfffc4 	addi	r6,r6,-1
   2f9b4:	10c00e1e 	bne	r2,r3,2f9f0 <memcmp+0x74>
   2f9b8:	21000044 	addi	r4,r4,1
   2f9bc:	29400044 	addi	r5,r5,1
   2f9c0:	31fff91e 	bne	r6,r7,2f9a8 <__alt_data_end+0xfffef9a8>
   2f9c4:	0005883a 	mov	r2,zero
   2f9c8:	f800283a 	ret
   2f9cc:	20c00017 	ldw	r3,0(r4)
   2f9d0:	28800017 	ldw	r2,0(r5)
   2f9d4:	18bfee1e 	bne	r3,r2,2f990 <__alt_data_end+0xfffef990>
   2f9d8:	31bfff04 	addi	r6,r6,-4
   2f9dc:	21000104 	addi	r4,r4,4
   2f9e0:	29400104 	addi	r5,r5,4
   2f9e4:	39bff936 	bltu	r7,r6,2f9cc <__alt_data_end+0xfffef9cc>
   2f9e8:	303fe91e 	bne	r6,zero,2f990 <__alt_data_end+0xfffef990>
   2f9ec:	003ff506 	br	2f9c4 <__alt_data_end+0xfffef9c4>
   2f9f0:	10c5c83a 	sub	r2,r2,r3
   2f9f4:	f800283a 	ret

0002f9f8 <_putc_r>:
   2f9f8:	defffc04 	addi	sp,sp,-16
   2f9fc:	dc000215 	stw	r16,8(sp)
   2fa00:	dfc00315 	stw	ra,12(sp)
   2fa04:	2021883a 	mov	r16,r4
   2fa08:	20000226 	beq	r4,zero,2fa14 <_putc_r+0x1c>
   2fa0c:	20800e17 	ldw	r2,56(r4)
   2fa10:	10001b26 	beq	r2,zero,2fa80 <_putc_r+0x88>
   2fa14:	30800217 	ldw	r2,8(r6)
   2fa18:	10bfffc4 	addi	r2,r2,-1
   2fa1c:	30800215 	stw	r2,8(r6)
   2fa20:	10000a16 	blt	r2,zero,2fa4c <_putc_r+0x54>
   2fa24:	30800017 	ldw	r2,0(r6)
   2fa28:	11400005 	stb	r5,0(r2)
   2fa2c:	30800017 	ldw	r2,0(r6)
   2fa30:	10c00044 	addi	r3,r2,1
   2fa34:	30c00015 	stw	r3,0(r6)
   2fa38:	10800003 	ldbu	r2,0(r2)
   2fa3c:	dfc00317 	ldw	ra,12(sp)
   2fa40:	dc000217 	ldw	r16,8(sp)
   2fa44:	dec00404 	addi	sp,sp,16
   2fa48:	f800283a 	ret
   2fa4c:	30c00617 	ldw	r3,24(r6)
   2fa50:	10c00616 	blt	r2,r3,2fa6c <_putc_r+0x74>
   2fa54:	30800017 	ldw	r2,0(r6)
   2fa58:	00c00284 	movi	r3,10
   2fa5c:	11400005 	stb	r5,0(r2)
   2fa60:	30800017 	ldw	r2,0(r6)
   2fa64:	11400003 	ldbu	r5,0(r2)
   2fa68:	28fff11e 	bne	r5,r3,2fa30 <__alt_data_end+0xfffefa30>
   2fa6c:	8009883a 	mov	r4,r16
   2fa70:	dfc00317 	ldw	ra,12(sp)
   2fa74:	dc000217 	ldw	r16,8(sp)
   2fa78:	dec00404 	addi	sp,sp,16
   2fa7c:	0029f241 	jmpi	29f24 <__swbuf_r>
   2fa80:	d9400015 	stw	r5,0(sp)
   2fa84:	d9800115 	stw	r6,4(sp)
   2fa88:	0024ff40 	call	24ff4 <__sinit>
   2fa8c:	d9800117 	ldw	r6,4(sp)
   2fa90:	d9400017 	ldw	r5,0(sp)
   2fa94:	003fdf06 	br	2fa14 <__alt_data_end+0xfffefa14>

0002fa98 <putc>:
   2fa98:	008000f4 	movhi	r2,3
   2fa9c:	defffc04 	addi	sp,sp,-16
   2faa0:	10878b04 	addi	r2,r2,7724
   2faa4:	dc000115 	stw	r16,4(sp)
   2faa8:	14000017 	ldw	r16,0(r2)
   2faac:	dc400215 	stw	r17,8(sp)
   2fab0:	dfc00315 	stw	ra,12(sp)
   2fab4:	2023883a 	mov	r17,r4
   2fab8:	80000226 	beq	r16,zero,2fac4 <putc+0x2c>
   2fabc:	80800e17 	ldw	r2,56(r16)
   2fac0:	10001a26 	beq	r2,zero,2fb2c <putc+0x94>
   2fac4:	28800217 	ldw	r2,8(r5)
   2fac8:	10bfffc4 	addi	r2,r2,-1
   2facc:	28800215 	stw	r2,8(r5)
   2fad0:	10000b16 	blt	r2,zero,2fb00 <putc+0x68>
   2fad4:	28800017 	ldw	r2,0(r5)
   2fad8:	14400005 	stb	r17,0(r2)
   2fadc:	28800017 	ldw	r2,0(r5)
   2fae0:	10c00044 	addi	r3,r2,1
   2fae4:	28c00015 	stw	r3,0(r5)
   2fae8:	10800003 	ldbu	r2,0(r2)
   2faec:	dfc00317 	ldw	ra,12(sp)
   2faf0:	dc400217 	ldw	r17,8(sp)
   2faf4:	dc000117 	ldw	r16,4(sp)
   2faf8:	dec00404 	addi	sp,sp,16
   2fafc:	f800283a 	ret
   2fb00:	28c00617 	ldw	r3,24(r5)
   2fb04:	10c00e16 	blt	r2,r3,2fb40 <putc+0xa8>
   2fb08:	28800017 	ldw	r2,0(r5)
   2fb0c:	01000284 	movi	r4,10
   2fb10:	14400005 	stb	r17,0(r2)
   2fb14:	28800017 	ldw	r2,0(r5)
   2fb18:	10c00003 	ldbu	r3,0(r2)
   2fb1c:	193ff01e 	bne	r3,r4,2fae0 <__alt_data_end+0xfffefae0>
   2fb20:	280d883a 	mov	r6,r5
   2fb24:	180b883a 	mov	r5,r3
   2fb28:	00000706 	br	2fb48 <putc+0xb0>
   2fb2c:	8009883a 	mov	r4,r16
   2fb30:	d9400015 	stw	r5,0(sp)
   2fb34:	0024ff40 	call	24ff4 <__sinit>
   2fb38:	d9400017 	ldw	r5,0(sp)
   2fb3c:	003fe106 	br	2fac4 <__alt_data_end+0xfffefac4>
   2fb40:	280d883a 	mov	r6,r5
   2fb44:	880b883a 	mov	r5,r17
   2fb48:	8009883a 	mov	r4,r16
   2fb4c:	dfc00317 	ldw	ra,12(sp)
   2fb50:	dc400217 	ldw	r17,8(sp)
   2fb54:	dc000117 	ldw	r16,4(sp)
   2fb58:	dec00404 	addi	sp,sp,16
   2fb5c:	0029f241 	jmpi	29f24 <__swbuf_r>

0002fb60 <__register_exitproc>:
   2fb60:	defffa04 	addi	sp,sp,-24
   2fb64:	dc000315 	stw	r16,12(sp)
   2fb68:	040000f4 	movhi	r16,3
   2fb6c:	84078a04 	addi	r16,r16,7720
   2fb70:	80c00017 	ldw	r3,0(r16)
   2fb74:	dc400415 	stw	r17,16(sp)
   2fb78:	dfc00515 	stw	ra,20(sp)
   2fb7c:	18805217 	ldw	r2,328(r3)
   2fb80:	2023883a 	mov	r17,r4
   2fb84:	10003726 	beq	r2,zero,2fc64 <__register_exitproc+0x104>
   2fb88:	10c00117 	ldw	r3,4(r2)
   2fb8c:	010007c4 	movi	r4,31
   2fb90:	20c00e16 	blt	r4,r3,2fbcc <__register_exitproc+0x6c>
   2fb94:	1a000044 	addi	r8,r3,1
   2fb98:	8800221e 	bne	r17,zero,2fc24 <__register_exitproc+0xc4>
   2fb9c:	18c00084 	addi	r3,r3,2
   2fba0:	18c7883a 	add	r3,r3,r3
   2fba4:	18c7883a 	add	r3,r3,r3
   2fba8:	12000115 	stw	r8,4(r2)
   2fbac:	10c7883a 	add	r3,r2,r3
   2fbb0:	19400015 	stw	r5,0(r3)
   2fbb4:	0005883a 	mov	r2,zero
   2fbb8:	dfc00517 	ldw	ra,20(sp)
   2fbbc:	dc400417 	ldw	r17,16(sp)
   2fbc0:	dc000317 	ldw	r16,12(sp)
   2fbc4:	dec00604 	addi	sp,sp,24
   2fbc8:	f800283a 	ret
   2fbcc:	00800034 	movhi	r2,0
   2fbd0:	10800004 	addi	r2,r2,0
   2fbd4:	10002626 	beq	r2,zero,2fc70 <__register_exitproc+0x110>
   2fbd8:	01006404 	movi	r4,400
   2fbdc:	d9400015 	stw	r5,0(sp)
   2fbe0:	d9800115 	stw	r6,4(sp)
   2fbe4:	d9c00215 	stw	r7,8(sp)
   2fbe8:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>
   2fbec:	d9400017 	ldw	r5,0(sp)
   2fbf0:	d9800117 	ldw	r6,4(sp)
   2fbf4:	d9c00217 	ldw	r7,8(sp)
   2fbf8:	10001d26 	beq	r2,zero,2fc70 <__register_exitproc+0x110>
   2fbfc:	81000017 	ldw	r4,0(r16)
   2fc00:	10000115 	stw	zero,4(r2)
   2fc04:	02000044 	movi	r8,1
   2fc08:	22405217 	ldw	r9,328(r4)
   2fc0c:	0007883a 	mov	r3,zero
   2fc10:	12400015 	stw	r9,0(r2)
   2fc14:	20805215 	stw	r2,328(r4)
   2fc18:	10006215 	stw	zero,392(r2)
   2fc1c:	10006315 	stw	zero,396(r2)
   2fc20:	883fde26 	beq	r17,zero,2fb9c <__alt_data_end+0xfffefb9c>
   2fc24:	18c9883a 	add	r4,r3,r3
   2fc28:	2109883a 	add	r4,r4,r4
   2fc2c:	1109883a 	add	r4,r2,r4
   2fc30:	21802215 	stw	r6,136(r4)
   2fc34:	01800044 	movi	r6,1
   2fc38:	12406217 	ldw	r9,392(r2)
   2fc3c:	30cc983a 	sll	r6,r6,r3
   2fc40:	4992b03a 	or	r9,r9,r6
   2fc44:	12406215 	stw	r9,392(r2)
   2fc48:	21c04215 	stw	r7,264(r4)
   2fc4c:	01000084 	movi	r4,2
   2fc50:	893fd21e 	bne	r17,r4,2fb9c <__alt_data_end+0xfffefb9c>
   2fc54:	11006317 	ldw	r4,396(r2)
   2fc58:	218cb03a 	or	r6,r4,r6
   2fc5c:	11806315 	stw	r6,396(r2)
   2fc60:	003fce06 	br	2fb9c <__alt_data_end+0xfffefb9c>
   2fc64:	18805304 	addi	r2,r3,332
   2fc68:	18805215 	stw	r2,328(r3)
   2fc6c:	003fc606 	br	2fb88 <__alt_data_end+0xfffefb88>
   2fc70:	00bfffc4 	movi	r2,-1
   2fc74:	003fd006 	br	2fbb8 <__alt_data_end+0xfffefbb8>

0002fc78 <__call_exitprocs>:
   2fc78:	defff504 	addi	sp,sp,-44
   2fc7c:	df000915 	stw	fp,36(sp)
   2fc80:	dd400615 	stw	r21,24(sp)
   2fc84:	dc800315 	stw	r18,12(sp)
   2fc88:	dfc00a15 	stw	ra,40(sp)
   2fc8c:	ddc00815 	stw	r23,32(sp)
   2fc90:	dd800715 	stw	r22,28(sp)
   2fc94:	dd000515 	stw	r20,20(sp)
   2fc98:	dcc00415 	stw	r19,16(sp)
   2fc9c:	dc400215 	stw	r17,8(sp)
   2fca0:	dc000115 	stw	r16,4(sp)
   2fca4:	d9000015 	stw	r4,0(sp)
   2fca8:	2839883a 	mov	fp,r5
   2fcac:	04800044 	movi	r18,1
   2fcb0:	057fffc4 	movi	r21,-1
   2fcb4:	008000f4 	movhi	r2,3
   2fcb8:	10878a04 	addi	r2,r2,7720
   2fcbc:	12000017 	ldw	r8,0(r2)
   2fcc0:	45005217 	ldw	r20,328(r8)
   2fcc4:	44c05204 	addi	r19,r8,328
   2fcc8:	a0001c26 	beq	r20,zero,2fd3c <__call_exitprocs+0xc4>
   2fccc:	a0800117 	ldw	r2,4(r20)
   2fcd0:	15ffffc4 	addi	r23,r2,-1
   2fcd4:	b8000d16 	blt	r23,zero,2fd0c <__call_exitprocs+0x94>
   2fcd8:	14000044 	addi	r16,r2,1
   2fcdc:	8421883a 	add	r16,r16,r16
   2fce0:	8421883a 	add	r16,r16,r16
   2fce4:	84402004 	addi	r17,r16,128
   2fce8:	a463883a 	add	r17,r20,r17
   2fcec:	a421883a 	add	r16,r20,r16
   2fcf0:	e0001e26 	beq	fp,zero,2fd6c <__call_exitprocs+0xf4>
   2fcf4:	80804017 	ldw	r2,256(r16)
   2fcf8:	e0801c26 	beq	fp,r2,2fd6c <__call_exitprocs+0xf4>
   2fcfc:	bdffffc4 	addi	r23,r23,-1
   2fd00:	843fff04 	addi	r16,r16,-4
   2fd04:	8c7fff04 	addi	r17,r17,-4
   2fd08:	bd7ff91e 	bne	r23,r21,2fcf0 <__alt_data_end+0xfffefcf0>
   2fd0c:	00800034 	movhi	r2,0
   2fd10:	10800004 	addi	r2,r2,0
   2fd14:	10000926 	beq	r2,zero,2fd3c <__call_exitprocs+0xc4>
   2fd18:	a0800117 	ldw	r2,4(r20)
   2fd1c:	1000301e 	bne	r2,zero,2fde0 <__call_exitprocs+0x168>
   2fd20:	a0800017 	ldw	r2,0(r20)
   2fd24:	10003226 	beq	r2,zero,2fdf0 <__call_exitprocs+0x178>
   2fd28:	a009883a 	mov	r4,r20
   2fd2c:	98800015 	stw	r2,0(r19)
   2fd30:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>
   2fd34:	9d000017 	ldw	r20,0(r19)
   2fd38:	a03fe41e 	bne	r20,zero,2fccc <__alt_data_end+0xfffefccc>
   2fd3c:	dfc00a17 	ldw	ra,40(sp)
   2fd40:	df000917 	ldw	fp,36(sp)
   2fd44:	ddc00817 	ldw	r23,32(sp)
   2fd48:	dd800717 	ldw	r22,28(sp)
   2fd4c:	dd400617 	ldw	r21,24(sp)
   2fd50:	dd000517 	ldw	r20,20(sp)
   2fd54:	dcc00417 	ldw	r19,16(sp)
   2fd58:	dc800317 	ldw	r18,12(sp)
   2fd5c:	dc400217 	ldw	r17,8(sp)
   2fd60:	dc000117 	ldw	r16,4(sp)
   2fd64:	dec00b04 	addi	sp,sp,44
   2fd68:	f800283a 	ret
   2fd6c:	a0800117 	ldw	r2,4(r20)
   2fd70:	80c00017 	ldw	r3,0(r16)
   2fd74:	10bfffc4 	addi	r2,r2,-1
   2fd78:	15c01426 	beq	r2,r23,2fdcc <__call_exitprocs+0x154>
   2fd7c:	80000015 	stw	zero,0(r16)
   2fd80:	183fde26 	beq	r3,zero,2fcfc <__alt_data_end+0xfffefcfc>
   2fd84:	95c8983a 	sll	r4,r18,r23
   2fd88:	a0806217 	ldw	r2,392(r20)
   2fd8c:	a5800117 	ldw	r22,4(r20)
   2fd90:	2084703a 	and	r2,r4,r2
   2fd94:	10000b26 	beq	r2,zero,2fdc4 <__call_exitprocs+0x14c>
   2fd98:	a0806317 	ldw	r2,396(r20)
   2fd9c:	2088703a 	and	r4,r4,r2
   2fda0:	20000c1e 	bne	r4,zero,2fdd4 <__call_exitprocs+0x15c>
   2fda4:	89400017 	ldw	r5,0(r17)
   2fda8:	d9000017 	ldw	r4,0(sp)
   2fdac:	183ee83a 	callr	r3
   2fdb0:	a0800117 	ldw	r2,4(r20)
   2fdb4:	15bfbf1e 	bne	r2,r22,2fcb4 <__alt_data_end+0xfffefcb4>
   2fdb8:	98800017 	ldw	r2,0(r19)
   2fdbc:	153fcf26 	beq	r2,r20,2fcfc <__alt_data_end+0xfffefcfc>
   2fdc0:	003fbc06 	br	2fcb4 <__alt_data_end+0xfffefcb4>
   2fdc4:	183ee83a 	callr	r3
   2fdc8:	003ff906 	br	2fdb0 <__alt_data_end+0xfffefdb0>
   2fdcc:	a5c00115 	stw	r23,4(r20)
   2fdd0:	003feb06 	br	2fd80 <__alt_data_end+0xfffefd80>
   2fdd4:	89000017 	ldw	r4,0(r17)
   2fdd8:	183ee83a 	callr	r3
   2fddc:	003ff406 	br	2fdb0 <__alt_data_end+0xfffefdb0>
   2fde0:	a0800017 	ldw	r2,0(r20)
   2fde4:	a027883a 	mov	r19,r20
   2fde8:	1029883a 	mov	r20,r2
   2fdec:	003fb606 	br	2fcc8 <__alt_data_end+0xfffefcc8>
   2fdf0:	0005883a 	mov	r2,zero
   2fdf4:	003ffb06 	br	2fde4 <__alt_data_end+0xfffefde4>

0002fdf8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   2fdf8:	defffd04 	addi	sp,sp,-12
   2fdfc:	df000215 	stw	fp,8(sp)
   2fe00:	df000204 	addi	fp,sp,8
   2fe04:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   2fe08:	0001883a 	nop
   2fe0c:	e0bfff17 	ldw	r2,-4(fp)
   2fe10:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   2fe14:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   2fe18:	10000226 	beq	r2,zero,2fe24 <_exit+0x2c>
    ALT_SIM_FAIL();
   2fe1c:	002af070 	cmpltui	zero,zero,43969
   2fe20:	00000106 	br	2fe28 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   2fe24:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   2fe28:	003fff06 	br	2fe28 <__alt_data_end+0xfffefe28>

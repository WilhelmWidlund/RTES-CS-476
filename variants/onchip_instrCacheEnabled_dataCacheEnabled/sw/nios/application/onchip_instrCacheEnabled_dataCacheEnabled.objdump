
onchip_instrCacheEnabled_dataCacheEnabled.elf:     file format elf32-littlenios2
onchip_instrCacheEnabled_dataCacheEnabled.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020254

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00010434 memsz 0x00010434 flags r-x
    LOAD off    0x00011454 vaddr 0x00030454 paddr 0x00031f40 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x00013a2c vaddr 0x00033a2c paddr 0x00033a2c align 2**12
         filesz 0x00000000 memsz 0x0000016c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000234  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000fcb0  00020254  00020254  00001254  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000550  0002ff04  0002ff04  00010f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  00030454  00031f40  00011454  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000016c  00033a2c  00033a2c  00013a2c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00033b98  00033b98  00012f40  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00012f40  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000ef8  00000000  00000000  00012f68  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00024104  00000000  00000000  00013e60  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000929a  00000000  00000000  00037f64  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000b6e5  00000000  00000000  000411fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000022d8  00000000  00000000  0004c8e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00003951  00000000  00000000  0004ebbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00017975  00000000  00000000  0005250d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00069e84  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000018d8  00000000  00000000  00069eb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006ea8a  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0006ea8d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0006ea99  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006ea9a  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0006ea9b  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  0006eaa6  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  0006eab1  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000a  00000000  00000000  0006eabc  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000045  00000000  00000000  0006eac6  2**0
                  CONTENTS, READONLY
 26 .jdi          0000597d  00000000  00000000  0006eb0b  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00043e43  00000000  00000000  00074488  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020254 l    d  .text	00000000 .text
0002ff04 l    d  .rodata	00000000 .rodata
00030454 l    d  .rwdata	00000000 .rwdata
00033a2c l    d  .bss	00000000 .bss
00033b98 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/RTES/variants/onchip_instrCacheEnabled_dataCacheEnabled/sw/nios/onchip_instrCacheEnabled_dataCacheEnabled_bsp//obj/HAL/src/crt0.o
0002029c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
0003019a l     O .rodata	00000010 zeroes.4404
00022f70 l     F .text	000000bc __sbprintf
000301aa l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00023180 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00024cb0 l     F .text	00000008 __fp_unlock
00024cc4 l     F .text	0000019c __sinit.part.1
00024e60 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00030454 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
00030898 l     O .rwdata	00000020 lc_ctype_charset
00030878 l     O .rwdata	00000020 lc_message_charset
000308b8 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
000301dc l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00027778 l     F .text	000000fc __sprint_r.part.0
00030310 l     O .rodata	00000010 blanks.4348
00030300 l     O .rodata	00000010 zeroes.4349
00028d04 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0002d388 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0002d494 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0002d4c0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0002d84c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0002d92c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0002da18 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
0002de54 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00031f34 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0002e0a0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0002e1d4 l     F .text	00000034 alt_dev_reg
00030ea0 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0002e4c4 l     F .text	0000020c altera_avalon_jtag_uart_irq
0002e6d0 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0002ed08 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0002ef70 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0002f1e0 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0002f320 l     F .text	0000003c alt_get_errno
0002f35c l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00033a64 g     O .bss	00000004 alt_instruction_exception_handler
00020a40 g     F .text	00000034 latency_isr_parport
00027288 g     F .text	00000074 _mprec_log10
00027374 g     F .text	0000008c __any_on
0002975c g     F .text	00000054 _isatty_r
000301e8 g     O .rodata	00000028 __mprec_tinytens
0002db28 g     F .text	0000007c alt_main
00033a98 g     O .bss	00000100 alt_irq
000297b0 g     F .text	00000060 _lseek_r
00031f40 g       *ABS*	00000000 __flash_rwdata_start
0002beb4 g     F .text	00000088 .hidden __eqdf2
00033b98 g       *ABS*	00000000 __alt_heap_start
00020d20 g     F .text	0000003c printf
0002a088 g     F .text	0000009c _wcrtomb_r
000275a0 g     F .text	0000005c __sseek
00025000 g     F .text	00000010 __sinit
00029f30 g     F .text	00000140 __swbuf_r
0002560c g     F .text	0000007c _setlocale_r
00024e68 g     F .text	00000068 __sfmoreglue
0002dbc8 g     F .text	00000024 __malloc_unlock
00029810 g     F .text	0000015c memmove
000202a0 g     F .text	00000058 test_parallel_port
00024fe8 g     F .text	00000018 _cleanup
00026404 g     F .text	000000a8 _Balloc
00033a2c g     O .bss	00000004 snaph
0002bf3c g     F .text	000000dc .hidden __gtdf2
0002f718 g     F .text	00000024 altera_nios2_gen2_irq_init
00020000 g     F .entry	0000001c __reset
00020020 g       *ABS*	00000000 __flash_exceptions_start
00029244 g     F .text	0000005c _fstat_r
00033a50 g     O .bss	00000004 errno
0002751c g     F .text	00000008 __seofread
00033a5c g     O .bss	00000004 alt_argv
00039f00 g       *ABS*	00000000 _gp
00030d20 g     O .rwdata	00000180 alt_fd_list
0002f73c g     F .text	00000090 alt_find_dev
00026194 g     F .text	00000148 memcpy
00024cb8 g     F .text	0000000c _cleanup_r
0002d1a0 g     F .text	000000dc .hidden __floatsidf
0002f2a4 g     F .text	0000007c alt_io_redirect
0002c018 g     F .text	000000f4 .hidden __ltdf2
0002ff04 g       *ABS*	00000000 __DTOR_END__
0002f144 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00027400 g     F .text	00000074 __fpclassifyd
000271e4 g     F .text	000000a4 __ratio
00028ce8 g     F .text	0000001c __vfiprintf_internal
0002e8c8 g     F .text	0000021c altera_avalon_jtag_uart_read
00020cf0 g     F .text	00000030 _printf_r
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00020c34 g     F .text	00000064 .hidden __udivsi3
0002d888 g     F .text	000000a4 isatty
00030238 g     O .rodata	000000c8 __mprec_tens
00025688 g     F .text	0000000c __locale_charset
0002f978 g     F .text	00000090 alt_icache_flush
00033a4c g     O .bss	00000004 __malloc_top_pad
00033a30 g     O .bss	00000004 flag
00031f08 g     O .rwdata	00000004 __mb_cur_max
000256b8 g     F .text	0000000c _localeconv_r
000292a0 g     F .text	000004bc __sfvwrite_r
00026810 g     F .text	0000003c __i2b
00027474 g     F .text	00000054 _sbrk_r
0002996c g     F .text	00000060 _read_r
00031f28 g     O .rwdata	00000004 alt_max_fd
00028f38 g     F .text	000000f0 _fclose_r
00024c80 g     F .text	00000030 fflush
00033a48 g     O .bss	00000004 __malloc_max_sbrked_mem
0002ad20 g     F .text	000008ac .hidden __adddf3
00026f8c g     F .text	0000010c __b2d
0002a7e8 g     F .text	00000538 .hidden __umoddi3
0002da54 g     F .text	000000d4 lseek
00031f00 g     O .rwdata	00000004 _global_impure_ptr
000299cc g     F .text	00000564 _realloc_r
00033b98 g       *ABS*	00000000 __bss_end
0002d75c g     F .text	000000f0 alt_iic_isr_register
0002f610 g     F .text	00000108 alt_tick
0002a270 g     F .text	00000578 .hidden __udivdi3
000291a0 g     F .text	00000024 _fputwc_r
00030210 g     O .rodata	00000028 __mprec_bigtens
000265f4 g     F .text	00000104 __s2b
0002d27c g     F .text	000000a8 .hidden __floatunsidf
00026ccc g     F .text	00000060 __mcmp
00025020 g     F .text	00000018 __fp_lock_all
0002d710 g     F .text	0000004c alt_ic_irq_enabled
0002f574 g     F .text	0000009c alt_alarm_stop
00020994 g     F .text	000000ac test_recovtime_parport
00033a54 g     O .bss	00000004 alt_irq_active
000200fc g     F .exceptions	000000e4 alt_irq_handler
00030cf8 g     O .rwdata	00000028 alt_dev_null
0002ef28 g     F .text	00000048 alt_dcache_flush_all
000266f8 g     F .text	00000068 __hi0bits
0002d120 g     F .text	00000080 .hidden __fixdfsi
00031f40 g       *ABS*	00000000 __ram_rwdata_end
00031f20 g     O .rwdata	00000008 alt_dev_list
0002e0dc g     F .text	000000f8 write
0002fad0 g     F .text	000000a0 _putc_r
00030454 g       *ABS*	00000000 __ram_rodata_end
0002d4fc g     F .text	000000b0 fstat
0002c018 g     F .text	000000f4 .hidden __ledf2
00026a44 g     F .text	00000140 __pow5mult
0002788c g     F .text	0000145c ___vfiprintf_internal_r
00033a40 g     O .bss	00000004 __nlocale_changed
00020c98 g     F .text	00000058 .hidden __umodsi3
00033b98 g       *ABS*	00000000 end
0002e404 g     F .text	000000c0 altera_avalon_jtag_uart_init
000201e0 g     F .exceptions	00000074 alt_instruction_exception_entry
0002ff04 g       *ABS*	00000000 __CTOR_LIST__
00040000 g       *ABS*	00000000 __alt_stack_pointer
0002ed80 g     F .text	0000007c alt_avalon_timer_sc_init
0002d324 g     F .text	00000064 .hidden __clzsi2
0002eae4 g     F .text	00000224 altera_avalon_jtag_uart_write
00020808 g     F .text	0000018c test_recovtime_print
00025010 g     F .text	00000004 __sfp_lock_acquire
000260b0 g     F .text	000000e4 memchr
00020d5c g     F .text	000021f8 ___vfprintf_internal_r
00025174 g     F .text	00000310 _free_r
0002dbec g     F .text	0000022c alt_printf
00025694 g     F .text	00000010 __locale_mb_cur_max
0002fd50 g     F .text	00000180 __call_exitprocs
00033a3c g     O .bss	00000004 __mlocale_changed
00031f0c g     O .rwdata	00000004 __malloc_sbrk_base
00020254 g     F .text	0000004c _start
00033a68 g     O .bss	00000004 _alt_tick_rate
00020528 g     F .text	00000044 resp_isr_parport
00026b84 g     F .text	00000148 __lshift
00033a6c g     O .bss	00000004 _alt_nticks
0002de90 g     F .text	000000fc read
0002e240 g     F .text	00000060 alt_sys_init
0002fc38 g     F .text	00000118 __register_exitproc
00020a74 g     F .text	0000009c test_latency_parport
0002684c g     F .text	000001f8 __multiply
0002e770 g     F .text	00000068 altera_avalon_jtag_uart_close
00030454 g       *ABS*	00000000 __ram_rwdata_start
0002ff04 g       *ABS*	00000000 __ram_rodata_start
00033a70 g     O .bss	00000028 __malloc_current_mallinfo
00027098 g     F .text	0000014c __d2b
0002e2a0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0002f8d4 g     F .text	000000a4 alt_get_fd
00028e20 g     F .text	00000054 _close_r
0002fa54 g     F .text	0000007c memcmp
0002e360 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00033b98 g       *ABS*	00000000 __alt_stack_base
0002e3b0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0002302c g     F .text	00000154 __swsetup_r
0002b5cc g     F .text	000008e8 .hidden __divdf3
00024ed0 g     F .text	00000118 __sfp
000272fc g     F .text	00000078 __copybits
000308f0 g     O .rwdata	00000408 __malloc_av_
0002501c g     F .text	00000004 __sinit_lock_release
0002c10c g     F .text	00000718 .hidden __muldf3
000274c8 g     F .text	00000054 __sread
0002f7cc g     F .text	00000108 alt_find_file
0002efac g     F .text	000000a4 alt_dev_llist_insert
0002dba4 g     F .text	00000024 __malloc_lock
0002dff0 g     F .text	000000b0 sbrk
00024c24 g     F .text	0000005c _fflush_r
00028e74 g     F .text	000000c4 _calloc_r
00033a2c g       *ABS*	00000000 __bss_start
000262dc g     F .text	00000128 memset
00020b10 g     F .text	0000002c main
00033a60 g     O .bss	00000004 alt_envp
000202f8 g     F .text	000001a4 test_counter
00033a44 g     O .bss	00000004 __malloc_max_total_mem
0002e300 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0002a070 g     F .text	00000018 __swbuf
00033a34 g     O .bss	00000004 snapl
000275fc g     F .text	00000008 __sclose
00040000 g       *ABS*	00000000 __alt_heap_limit
00029028 g     F .text	00000014 fclose
00023380 g     F .text	00001688 _dtoa_r
000258a4 g     F .text	0000080c _malloc_r
0002a1e4 g     F .text	00000030 __ascii_wctomb
00031f2c g     O .rwdata	00000004 alt_errno
00025484 g     F .text	000000c4 _fwalk
0002fb70 g     F .text	000000c8 putc
00020b3c g     F .text	00000084 .hidden __divsi3
00025050 g     F .text	00000124 _malloc_trim_r
0002ff04 g       *ABS*	00000000 __CTOR_END__
00027604 g     F .text	000000dc strcmp
0002ff04 g       *ABS*	00000000 __flash_rodata_start
0002ff04 g       *ABS*	00000000 __DTOR_LIST__
0002beb4 g     F .text	00000088 .hidden __nedf2
0002e208 g     F .text	00000038 alt_irq_init
0002df8c g     F .text	00000064 alt_release_fd
00030320 g     O .rodata	00000100 .hidden __clz_tab
00033a38 g     O .bss	00000004 _PathLocale
0002fa08 g     F .text	00000014 atexit
00028dc0 g     F .text	00000060 _write_r
000256c4 g     F .text	00000018 setlocale
00031f04 g     O .rwdata	00000004 _impure_ptr
00033a58 g     O .bss	00000004 alt_argc
00024a08 g     F .text	0000021c __sflush_r
0002f0b0 g     F .text	00000060 _do_dtors
000256b0 g     F .text	00000008 __locale_cjk_lang
0002056c g     F .text	00000158 test_resptime_print
00020020 g       .exceptions	00000000 alt_irq_entry
00026f28 g     F .text	00000064 __ulp
00025038 g     F .text	00000018 __fp_unlock_all
000206c4 g     F .text	0000009c test_resptime_parport
00031f18 g     O .rwdata	00000008 alt_fs_list
00020020 g       *ABS*	00000000 __ram_exceptions_start
000256dc g     F .text	0000000c localeconv
0002d5ac g     F .text	00000050 alt_ic_isr_register
00031f40 g       *ABS*	00000000 _edata
00033b98 g       *ABS*	00000000 _end
0002903c g     F .text	00000164 __fputwc
00020254 g       *ABS*	00000000 __ram_exceptions_end
0002e7d8 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0002d684 g     F .text	0000008c alt_ic_irq_disable
00027524 g     F .text	0000007c __swrite
00031f10 g     O .rwdata	00000004 __malloc_trim_threshold
000256a4 g     F .text	0000000c __locale_msgcharset
000207b4 g     F .text	00000054 recov_isr_parport
0002fa1c g     F .text	00000038 exit
00025548 g     F .text	000000c4 _fwalk_reent
00026d2c g     F .text	000001fc __mdiff
00020bc0 g     F .text	00000074 .hidden __modsi3
00040000 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
00025014 g     F .text	00000004 __sfp_lock_release
0002fed0 g     F .text	00000034 _exit
0002edfc g     F .text	0000012c alt_alarm_start
000256e8 g     F .text	000001bc __smakebuf_r
000276e0 g     F .text	00000098 strlen
0002049c g     F .text	0000008c resp_isr_print
0002f420 g     F .text	00000154 open
00020760 g     F .text	00000054 recov_isr_print
0002bf3c g     F .text	000000dc .hidden __gedf2
0002de18 g     F .text	0000003c alt_putchar
00031f14 g     O .rwdata	00000004 __wctomb
00027874 g     F .text	00000018 __sprint_r
0002f110 g     F .text	00000034 alt_icache_flush_all
00031f30 g     O .rwdata	00000004 alt_priority_mask
0002d5fc g     F .text	00000088 alt_ic_irq_enable
00022f54 g     F .text	0000001c __vfprintf_internal
0002a214 g     F .text	0000005c _wctomb_r
0002c824 g     F .text	000008fc .hidden __subdf3
00026760 g     F .text	000000b0 __lo0bits
00031f38 g     O .rwdata	00000008 alt_alarm_list
0002f050 g     F .text	00000060 _do_ctors
0002a124 g     F .text	000000c0 wcrtomb
0002d3c4 g     F .text	000000d0 close
0002d994 g     F .text	00000084 alt_load
000291c4 g     F .text	00000080 fputwc
00025018 g     F .text	00000004 __sinit_lock_acquire
000264d4 g     F .text	00000120 __multadd
000264ac g     F .text	00000028 _Bfree



Disassembly of section .entry:

00020000 <__reset>:
 */

#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
   20000:	00800074 	movhi	r2,1
#else
    movui r2, NIOS2_ICACHE_SIZE
#endif

0:
    initi r2
   20004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   20008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   2000c:	00bffd16 	blt	zero,r2,20004 <__alt_data_end+0xfffe0004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20010:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20014:	08409514 	ori	at,at,596
    jmp r1
   20018:	0800683a 	jmp	at
   2001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201e00 	call	201e0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
IOWR_32DIRECT(PARALLELPORT_0_BASE, 0, 0x0);
   2010c:	0007883a 	mov	r3,zero
   20110:	00800134 	movhi	r2,4
   20114:	10841004 	addi	r2,r2,4160
   20118:	10c00035 	stwio	r3,0(r2)
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2011c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20120:	0005313a 	rdctl	r2,ipending
   20124:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20128:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2012c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20130:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20134:	00800044 	movi	r2,1
   20138:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2013c:	e0fffb17 	ldw	r3,-20(fp)
   20140:	e0bffc17 	ldw	r2,-16(fp)
   20144:	1884703a 	and	r2,r3,r2
   20148:	10001426 	beq	r2,zero,2019c <alt_irq_handler+0xa0>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2014c:	008000f4 	movhi	r2,3
   20150:	108ea604 	addi	r2,r2,15000
   20154:	e0fffd17 	ldw	r3,-12(fp)
   20158:	180690fa 	slli	r3,r3,3
   2015c:	10c5883a 	add	r2,r2,r3
   20160:	10c00017 	ldw	r3,0(r2)
   20164:	008000f4 	movhi	r2,3
   20168:	108ea604 	addi	r2,r2,15000
   2016c:	e13ffd17 	ldw	r4,-12(fp)
   20170:	200890fa 	slli	r4,r4,3
   20174:	1105883a 	add	r2,r2,r4
   20178:	10800104 	addi	r2,r2,4
   2017c:	10800017 	ldw	r2,0(r2)
   20180:	1009883a 	mov	r4,r2
   20184:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   20188:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   2018c:	0005313a 	rdctl	r2,ipending
   20190:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20194:	e0bfff17 	ldw	r2,-4(fp)
   20198:	00000706 	br	201b8 <alt_irq_handler+0xbc>
      }
      mask <<= 1;
   2019c:	e0bffc17 	ldw	r2,-16(fp)
   201a0:	1085883a 	add	r2,r2,r2
   201a4:	e0bffc15 	stw	r2,-16(fp)
      i++;
   201a8:	e0bffd17 	ldw	r2,-12(fp)
   201ac:	10800044 	addi	r2,r2,1
   201b0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201b4:	003fe106 	br	2013c <__alt_data_end+0xfffe013c>

    active = alt_irq_pending ();
   201b8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   201bc:	e0bffb17 	ldw	r2,-20(fp)
   201c0:	103fdb1e 	bne	r2,zero,20130 <__alt_data_end+0xfffe0130>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201c4:	0001883a 	nop
}
   201c8:	0001883a 	nop
   201cc:	e037883a 	mov	sp,fp
   201d0:	dfc00117 	ldw	ra,4(sp)
   201d4:	df000017 	ldw	fp,0(sp)
   201d8:	dec00204 	addi	sp,sp,8
   201dc:	f800283a 	ret

000201e0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201e0:	defffb04 	addi	sp,sp,-20
   201e4:	dfc00415 	stw	ra,16(sp)
   201e8:	df000315 	stw	fp,12(sp)
   201ec:	df000304 	addi	fp,sp,12
   201f0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   201f4:	000531fa 	rdctl	r2,exception
   201f8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   201fc:	e0bffd17 	ldw	r2,-12(fp)
   20200:	10801f0c 	andi	r2,r2,124
   20204:	1004d0ba 	srli	r2,r2,2
   20208:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   2020c:	0005333a 	rdctl	r2,badaddr
   20210:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   20214:	d0a6d917 	ldw	r2,-25756(gp)
   20218:	10000726 	beq	r2,zero,20238 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   2021c:	d0a6d917 	ldw	r2,-25756(gp)
   20220:	e0fffd17 	ldw	r3,-12(fp)
   20224:	e1bffe17 	ldw	r6,-8(fp)
   20228:	e17fff17 	ldw	r5,-4(fp)
   2022c:	1809883a 	mov	r4,r3
   20230:	103ee83a 	callr	r2
   20234:	00000206 	br	20240 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20238:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   2023c:	0005883a 	mov	r2,zero
}
   20240:	e037883a 	mov	sp,fp
   20244:	dfc00117 	ldw	ra,4(sp)
   20248:	df000017 	ldw	fp,0(sp)
   2024c:	dec00204 	addi	sp,sp,8
   20250:	f800283a 	ret

Disassembly of section .text:

00020254 <_start>:

#if NIOS2_DCACHE_SIZE > 0 && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
   20254:	00800074 	movhi	r2,1
#else
    movui r2, NIOS2_DCACHE_SIZE
#endif

0:
    initd 0(r2)
   20258:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   2025c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   20260:	00bffd16 	blt	zero,r2,20258 <__alt_data_end+0xfffe0258>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20264:	06c00134 	movhi	sp,4
    ori sp, sp, %lo(__alt_stack_pointer)
   20268:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   2026c:	068000f4 	movhi	gp,3
    ori gp, gp, %lo(_gp)
   20270:	d6a7c014 	ori	gp,gp,40704
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20274:	008000f4 	movhi	r2,3
    ori r2, r2, %lo(__bss_start)
   20278:	108e8b14 	ori	r2,r2,14892

    movhi r3, %hi(__bss_end)
   2027c:	00c000f4 	movhi	r3,3
    ori r3, r3, %lo(__bss_end)
   20280:	18cee614 	ori	r3,r3,15256

    beq r2, r3, 1f
   20284:	10c00326 	beq	r2,r3,20294 <_start+0x40>

0:
    stw zero, (r2)
   20288:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   2028c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   20290:	10fffd36 	bltu	r2,r3,20288 <__alt_data_end+0xfffe0288>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20294:	002d9940 	call	2d994 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20298:	002db280 	call	2db28 <alt_main>

0002029c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   2029c:	003fff06 	br	2029c <__alt_data_end+0xfffe029c>

000202a0 <test_parallel_port>:
int snapl;
int snaph;
int flag;

void test_parallel_port()
{
   202a0:	defffe04 	addi	sp,sp,-8
   202a4:	dfc00115 	stw	ra,4(sp)
   202a8:	df000015 	stw	fp,0(sp)
   202ac:	d839883a 	mov	fp,sp
	IOWR_32DIRECT(PARALLELPORT_0_BASE, 0, 0x1234abcd);
   202b0:	00c48d74 	movhi	r3,4661
   202b4:	18eaf344 	addi	r3,r3,-21555
   202b8:	00800134 	movhi	r2,4
   202bc:	10841004 	addi	r2,r2,4160
   202c0:	10c00035 	stwio	r3,0(r2)
	alt_printf("ParallelPort0=%x\n", IORD_32DIRECT(PARALLELPORT_0_BASE, 0));
   202c4:	00800134 	movhi	r2,4
   202c8:	10841004 	addi	r2,r2,4160
   202cc:	10800037 	ldwio	r2,0(r2)
   202d0:	100b883a 	mov	r5,r2
   202d4:	010000f4 	movhi	r4,3
   202d8:	213fc104 	addi	r4,r4,-252
   202dc:	002dbec0 	call	2dbec <alt_printf>
}
   202e0:	0001883a 	nop
   202e4:	e037883a 	mov	sp,fp
   202e8:	dfc00117 	ldw	ra,4(sp)
   202ec:	df000017 	ldw	fp,0(sp)
   202f0:	dec00204 	addi	sp,sp,8
   202f4:	f800283a 	ret

000202f8 <test_counter>:

void test_counter()
{
   202f8:	defffe04 	addi	sp,sp,-8
   202fc:	dfc00115 	stw	ra,4(sp)
   20300:	df000015 	stw	fp,0(sp)
   20304:	d839883a 	mov	fp,sp
	IOWR_32DIRECT(COUNTER_0_BASE, COUNT_Target, Count_1sec);
   20308:	00c0bef4 	movhi	r3,763
   2030c:	18fc2004 	addi	r3,r3,-3968
   20310:	00800134 	movhi	r2,4
   20314:	10840e04 	addi	r2,r2,4152
   20318:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(COUNTER_0_BASE, COUNT_RZ, arbval);
   2031c:	00ffffd4 	movui	r3,65535
   20320:	00800134 	movhi	r2,4
   20324:	10840904 	addi	r2,r2,4132
   20328:	10c00035 	stwio	r3,0(r2)
	alt_printf("iCounter after reset=%x\n", IORD_32DIRECT(COUNTER_0_BASE,0));
   2032c:	00800134 	movhi	r2,4
   20330:	10840804 	addi	r2,r2,4128
   20334:	10800037 	ldwio	r2,0(r2)
   20338:	100b883a 	mov	r5,r2
   2033c:	010000f4 	movhi	r4,3
   20340:	213fc604 	addi	r4,r4,-232
   20344:	002dbec0 	call	2dbec <alt_printf>
	alt_printf("iEn and iEOT=%x\n", IORD_32DIRECT(COUNTER_0_BASE, 20));
   20348:	00800134 	movhi	r2,4
   2034c:	10840d04 	addi	r2,r2,4148
   20350:	10800037 	ldwio	r2,0(r2)
   20354:	100b883a 	mov	r5,r2
   20358:	010000f4 	movhi	r4,3
   2035c:	213fcd04 	addi	r4,r4,-204
   20360:	002dbec0 	call	2dbec <alt_printf>
	IOWR_32DIRECT(COUNTER_0_BASE, COUNT_Start, arbval);
   20364:	00ffffd4 	movui	r3,65535
   20368:	00800134 	movhi	r2,4
   2036c:	10840a04 	addi	r2,r2,4136
   20370:	10c00035 	stwio	r3,0(r2)
	alt_printf("iCounter while running=%x\n", IORD_32DIRECT(COUNTER_0_BASE,0));
   20374:	00800134 	movhi	r2,4
   20378:	10840804 	addi	r2,r2,4128
   2037c:	10800037 	ldwio	r2,0(r2)
   20380:	100b883a 	mov	r5,r2
   20384:	010000f4 	movhi	r4,3
   20388:	213fd204 	addi	r4,r4,-184
   2038c:	002dbec0 	call	2dbec <alt_printf>
	alt_printf("iEn and iEOT=%x\n", IORD_32DIRECT(COUNTER_0_BASE, 20));
   20390:	00800134 	movhi	r2,4
   20394:	10840d04 	addi	r2,r2,4148
   20398:	10800037 	ldwio	r2,0(r2)
   2039c:	100b883a 	mov	r5,r2
   203a0:	010000f4 	movhi	r4,3
   203a4:	213fcd04 	addi	r4,r4,-204
   203a8:	002dbec0 	call	2dbec <alt_printf>
	IOWR_32DIRECT(COUNTER_0_BASE, COUNT_Stop, arbval);
   203ac:	00ffffd4 	movui	r3,65535
   203b0:	00800134 	movhi	r2,4
   203b4:	10840b04 	addi	r2,r2,4140
   203b8:	10c00035 	stwio	r3,0(r2)
	alt_printf("iCounter, first read after stop=%x\n", IORD_32DIRECT(COUNTER_0_BASE,0));
   203bc:	00800134 	movhi	r2,4
   203c0:	10840804 	addi	r2,r2,4128
   203c4:	10800037 	ldwio	r2,0(r2)
   203c8:	100b883a 	mov	r5,r2
   203cc:	010000f4 	movhi	r4,3
   203d0:	213fd904 	addi	r4,r4,-156
   203d4:	002dbec0 	call	2dbec <alt_printf>
	alt_printf("iCounter, second read after stop=%x\n", IORD_32DIRECT(COUNTER_0_BASE,0));
   203d8:	00800134 	movhi	r2,4
   203dc:	10840804 	addi	r2,r2,4128
   203e0:	10800037 	ldwio	r2,0(r2)
   203e4:	100b883a 	mov	r5,r2
   203e8:	010000f4 	movhi	r4,3
   203ec:	213fe204 	addi	r4,r4,-120
   203f0:	002dbec0 	call	2dbec <alt_printf>
	alt_printf("iEn and iEOT=%x\n", IORD_32DIRECT(COUNTER_0_BASE, 20));
   203f4:	00800134 	movhi	r2,4
   203f8:	10840d04 	addi	r2,r2,4148
   203fc:	10800037 	ldwio	r2,0(r2)
   20400:	100b883a 	mov	r5,r2
   20404:	010000f4 	movhi	r4,3
   20408:	213fcd04 	addi	r4,r4,-204
   2040c:	002dbec0 	call	2dbec <alt_printf>
	IOWR_32DIRECT(COUNTER_0_BASE, COUNT_Start, arbval);
   20410:	00ffffd4 	movui	r3,65535
   20414:	00800134 	movhi	r2,4
   20418:	10840a04 	addi	r2,r2,4136
   2041c:	10c00035 	stwio	r3,0(r2)
	alt_printf("iCounter, first read after restarting=%x\n", IORD_32DIRECT(COUNTER_0_BASE,0));
   20420:	00800134 	movhi	r2,4
   20424:	10840804 	addi	r2,r2,4128
   20428:	10800037 	ldwio	r2,0(r2)
   2042c:	100b883a 	mov	r5,r2
   20430:	010000f4 	movhi	r4,3
   20434:	213fec04 	addi	r4,r4,-80
   20438:	002dbec0 	call	2dbec <alt_printf>
	alt_printf("iCounter, second read after restarting=%x\n", IORD_32DIRECT(COUNTER_0_BASE,0));
   2043c:	00800134 	movhi	r2,4
   20440:	10840804 	addi	r2,r2,4128
   20444:	10800037 	ldwio	r2,0(r2)
   20448:	100b883a 	mov	r5,r2
   2044c:	010000f4 	movhi	r4,3
   20450:	213ff704 	addi	r4,r4,-36
   20454:	002dbec0 	call	2dbec <alt_printf>
	alt_printf("iEn and iEOT=%x\n", IORD_32DIRECT(COUNTER_0_BASE, 20));
   20458:	00800134 	movhi	r2,4
   2045c:	10840d04 	addi	r2,r2,4148
   20460:	10800037 	ldwio	r2,0(r2)
   20464:	100b883a 	mov	r5,r2
   20468:	010000f4 	movhi	r4,3
   2046c:	213fcd04 	addi	r4,r4,-204
   20470:	002dbec0 	call	2dbec <alt_printf>
	IOWR_32DIRECT(COUNTER_0_BASE, COUNT_Stop, arbval);
   20474:	00ffffd4 	movui	r3,65535
   20478:	00800134 	movhi	r2,4
   2047c:	10840b04 	addi	r2,r2,4140
   20480:	10c00035 	stwio	r3,0(r2)
}
   20484:	0001883a 	nop
   20488:	e037883a 	mov	sp,fp
   2048c:	dfc00117 	ldw	ra,4(sp)
   20490:	df000017 	ldw	fp,0(sp)
   20494:	dec00204 	addi	sp,sp,8
   20498:	f800283a 	ret

0002049c <resp_isr_print>:

void resp_isr_print(void* context)
{
   2049c:	defffe04 	addi	sp,sp,-8
   204a0:	df000115 	stw	fp,4(sp)
   204a4:	df000104 	addi	fp,sp,4
   204a8:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_TIMER_SNAPL(TIMER_0_BASE, arbval);
   204ac:	00ffffd4 	movui	r3,65535
   204b0:	00800134 	movhi	r2,4
   204b4:	10840404 	addi	r2,r2,4112
   204b8:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_SNAPH(TIMER_0_BASE, arbval);
   204bc:	00ffffd4 	movui	r3,65535
   204c0:	00800134 	movhi	r2,4
   204c4:	10840504 	addi	r2,r2,4116
   204c8:	10c00035 	stwio	r3,0(r2)
	snapl = IORD_ALTERA_AVALON_TIMER_SNAPL(TIMER_0_BASE);
   204cc:	00800134 	movhi	r2,4
   204d0:	10840404 	addi	r2,r2,4112
   204d4:	10800037 	ldwio	r2,0(r2)
   204d8:	d0a6cd15 	stw	r2,-25804(gp)
	snaph = IORD_ALTERA_AVALON_TIMER_SNAPH(TIMER_0_BASE);
   204dc:	00800134 	movhi	r2,4
   204e0:	10840504 	addi	r2,r2,4116
   204e4:	10800037 	ldwio	r2,0(r2)
   204e8:	d0a6cb15 	stw	r2,-25812(gp)
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, 0);
   204ec:	0007883a 	mov	r3,zero
   204f0:	00800134 	movhi	r2,4
   204f4:	10840104 	addi	r2,r2,4100
   204f8:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, 0);
   204fc:	0007883a 	mov	r3,zero
   20500:	00800134 	movhi	r2,4
   20504:	10840004 	addi	r2,r2,4096
   20508:	10c00035 	stwio	r3,0(r2)
	flag = 1;
   2050c:	00800044 	movi	r2,1
   20510:	d0a6cc15 	stw	r2,-25808(gp)
}
   20514:	0001883a 	nop
   20518:	e037883a 	mov	sp,fp
   2051c:	df000017 	ldw	fp,0(sp)
   20520:	dec00104 	addi	sp,sp,4
   20524:	f800283a 	ret

00020528 <resp_isr_parport>:

void resp_isr_parport(void* context)
{
   20528:	defffe04 	addi	sp,sp,-8
   2052c:	df000115 	stw	fp,4(sp)
   20530:	df000104 	addi	fp,sp,4
   20534:	e13fff15 	stw	r4,-4(fp)
	// Record end of response time by setting channel 1 low
	IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x0);
   20538:	0007883a 	mov	r3,zero
   2053c:	00800134 	movhi	r2,4
   20540:	10841004 	addi	r2,r2,4160
   20544:	10c00035 	stwio	r3,0(r2)
	// Clear IRQ
	IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_IRQCLR, arbval);
   20548:	00ffffd4 	movui	r3,65535
   2054c:	00800134 	movhi	r2,4
   20550:	10841404 	addi	r2,r2,4176
   20554:	10c00035 	stwio	r3,0(r2)
}
   20558:	0001883a 	nop
   2055c:	e037883a 	mov	sp,fp
   20560:	df000017 	ldw	fp,0(sp)
   20564:	dec00104 	addi	sp,sp,4
   20568:	f800283a 	ret

0002056c <test_resptime_print>:

void test_resptime_print()
{
   2056c:	defff804 	addi	sp,sp,-32
   20570:	dfc00715 	stw	ra,28(sp)
   20574:	df000615 	stw	fp,24(sp)
   20578:	df000604 	addi	fp,sp,24
	// Register isr
	alt_ic_isr_register(TIMER_0_IRQ_INTERRUPT_CONTROLLER_ID, TIMER_0_IRQ, resp_isr_print, 0, 0);
   2057c:	d8000015 	stw	zero,0(sp)
   20580:	000f883a 	mov	r7,zero
   20584:	018000b4 	movhi	r6,2
   20588:	31812704 	addi	r6,r6,1180
   2058c:	014000c4 	movi	r5,3
   20590:	0009883a 	mov	r4,zero
   20594:	002d5ac0 	call	2d5ac <alt_ic_isr_register>
	// Initialize flag value
	flag = 0;
   20598:	d026cc15 	stw	zero,-25808(gp)
	// Initialize timer
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, 0);
   2059c:	0007883a 	mov	r3,zero
   205a0:	00800134 	movhi	r2,4
   205a4:	10840104 	addi	r2,r2,4100
   205a8:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_0_BASE, 0xF080);
   205ac:	00fc2014 	movui	r3,61568
   205b0:	00800134 	movhi	r2,4
   205b4:	10840204 	addi	r2,r2,4104
   205b8:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_0_BASE, 0x02FA);
   205bc:	00c0be84 	movi	r3,762
   205c0:	00800134 	movhi	r2,4
   205c4:	10840304 	addi	r2,r2,4108
   205c8:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, TIMER_settings_start);
   205cc:	00c001c4 	movi	r3,7
   205d0:	00800134 	movhi	r2,4
   205d4:	10840104 	addi	r2,r2,4100
   205d8:	10c00035 	stwio	r3,0(r2)
	// Setup loop structure
	int counter = 0;
   205dc:	e03ffb15 	stw	zero,-20(fp)
	int max_iter = 10;
   205e0:	00800284 	movi	r2,10
   205e4:	e0bffd15 	stw	r2,-12(fp)
	int accum_val = 0;
   205e8:	e03ffc15 	stw	zero,-16(fp)
	int avg_val = 0;
   205ec:	e03ffe15 	stw	zero,-8(fp)
	int snapval = 0;
   205f0:	e03fff15 	stw	zero,-4(fp)
	printf("Testing response time using stock timer and\n"
   205f4:	e17ffd17 	ldw	r5,-12(fp)
   205f8:	010000f4 	movhi	r4,3
   205fc:	21000204 	addi	r4,r4,8
   20600:	0020d200 	call	20d20 <printf>
			" counting the average over %d iterations...\n", max_iter);
	while(counter < max_iter)
   20604:	00001e06 	br	20680 <test_resptime_print+0x114>
	{
		if(flag)
   20608:	d0a6cc17 	ldw	r2,-25808(gp)
   2060c:	10001c26 	beq	r2,zero,20680 <test_resptime_print+0x114>
		{
			snapval = Count_1secH-snaph<<16|Count_1secL-snapl;
   20610:	d0a6cb17 	ldw	r2,-25812(gp)
   20614:	00c0be84 	movi	r3,762
   20618:	1885c83a 	sub	r2,r3,r2
   2061c:	1006943a 	slli	r3,r2,16
   20620:	d0a6cd17 	ldw	r2,-25804(gp)
   20624:	013c2014 	movui	r4,61568
   20628:	2085c83a 	sub	r2,r4,r2
   2062c:	1884b03a 	or	r2,r3,r2
   20630:	e0bfff15 	stw	r2,-4(fp)
			alt_printf("Value at iteration %x is 0x%x clock cycles\n", counter+1, snapval);
   20634:	e0bffb17 	ldw	r2,-20(fp)
   20638:	10800044 	addi	r2,r2,1
   2063c:	e1bfff17 	ldw	r6,-4(fp)
   20640:	100b883a 	mov	r5,r2
   20644:	010000f4 	movhi	r4,3
   20648:	21001904 	addi	r4,r4,100
   2064c:	002dbec0 	call	2dbec <alt_printf>
			flag = 0;
   20650:	d026cc15 	stw	zero,-25808(gp)
			IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, TIMER_settings_start);
   20654:	00c001c4 	movi	r3,7
   20658:	00800134 	movhi	r2,4
   2065c:	10840104 	addi	r2,r2,4100
   20660:	10c00035 	stwio	r3,0(r2)
			accum_val += snapval;
   20664:	e0fffc17 	ldw	r3,-16(fp)
   20668:	e0bfff17 	ldw	r2,-4(fp)
   2066c:	1885883a 	add	r2,r3,r2
   20670:	e0bffc15 	stw	r2,-16(fp)
			counter += 1;
   20674:	e0bffb17 	ldw	r2,-20(fp)
   20678:	10800044 	addi	r2,r2,1
   2067c:	e0bffb15 	stw	r2,-20(fp)
	int accum_val = 0;
	int avg_val = 0;
	int snapval = 0;
	printf("Testing response time using stock timer and\n"
			" counting the average over %d iterations...\n", max_iter);
	while(counter < max_iter)
   20680:	e0fffb17 	ldw	r3,-20(fp)
   20684:	e0bffd17 	ldw	r2,-12(fp)
   20688:	18bfdf16 	blt	r3,r2,20608 <__alt_data_end+0xfffe0608>
			IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, TIMER_settings_start);
			accum_val += snapval;
			counter += 1;
		}
	}
	avg_val = accum_val/max_iter;
   2068c:	e17ffd17 	ldw	r5,-12(fp)
   20690:	e13ffc17 	ldw	r4,-16(fp)
   20694:	0020b3c0 	call	20b3c <__divsi3>
   20698:	e0bffe15 	stw	r2,-8(fp)
	printf("Average value for response time is %d clock cycles", avg_val);
   2069c:	e17ffe17 	ldw	r5,-8(fp)
   206a0:	010000f4 	movhi	r4,3
   206a4:	21002404 	addi	r4,r4,144
   206a8:	0020d200 	call	20d20 <printf>
}
   206ac:	0001883a 	nop
   206b0:	e037883a 	mov	sp,fp
   206b4:	dfc00117 	ldw	ra,4(sp)
   206b8:	df000017 	ldw	fp,0(sp)
   206bc:	dec00204 	addi	sp,sp,8
   206c0:	f800283a 	ret

000206c4 <test_resptime_parport>:
void test_resptime_parport()
{
   206c4:	defffb04 	addi	sp,sp,-20
   206c8:	dfc00415 	stw	ra,16(sp)
   206cc:	df000315 	stw	fp,12(sp)
   206d0:	df000304 	addi	fp,sp,12
	// Register isr
	alt_ic_isr_register(PARALLELPORT_0_IRQ_INTERRUPT_CONTROLLER_ID, PARALLELPORT_0_IRQ, resp_isr_parport, 0, 0);
   206d4:	d8000015 	stw	zero,0(sp)
   206d8:	000f883a 	mov	r7,zero
   206dc:	018000b4 	movhi	r6,2
   206e0:	31814a04 	addi	r6,r6,1320
   206e4:	01400044 	movi	r5,1
   206e8:	0009883a 	mov	r4,zero
   206ec:	002d5ac0 	call	2d5ac <alt_ic_isr_register>
	IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x0);
   206f0:	0007883a 	mov	r3,zero
   206f4:	00800134 	movhi	r2,4
   206f8:	10841004 	addi	r2,r2,4160
   206fc:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_IRQEN, 0x2);
   20700:	00c00084 	movi	r3,2
   20704:	00800134 	movhi	r2,4
   20708:	10841304 	addi	r2,r2,4172
   2070c:	10c00035 	stwio	r3,0(r2)
	int iterations = 10;
   20710:	00800284 	movi	r2,10
   20714:	e0bfff15 	stw	r2,-4(fp)
	int counter = 0;
   20718:	e03ffe15 	stw	zero,-8(fp)
	while(counter < iterations)
   2071c:	00000706 	br	2073c <test_resptime_parport+0x78>
	{
		// Trigger interrupt by setting channel 1 high
		IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x2);
   20720:	00c00084 	movi	r3,2
   20724:	00800134 	movhi	r2,4
   20728:	10841004 	addi	r2,r2,4160
   2072c:	10c00035 	stwio	r3,0(r2)
		counter += 1;
   20730:	e0bffe17 	ldw	r2,-8(fp)
   20734:	10800044 	addi	r2,r2,1
   20738:	e0bffe15 	stw	r2,-8(fp)
	alt_ic_isr_register(PARALLELPORT_0_IRQ_INTERRUPT_CONTROLLER_ID, PARALLELPORT_0_IRQ, resp_isr_parport, 0, 0);
	IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x0);
	IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_IRQEN, 0x2);
	int iterations = 10;
	int counter = 0;
	while(counter < iterations)
   2073c:	e0fffe17 	ldw	r3,-8(fp)
   20740:	e0bfff17 	ldw	r2,-4(fp)
   20744:	18bff616 	blt	r3,r2,20720 <__alt_data_end+0xfffe0720>
	{
		// Trigger interrupt by setting channel 1 high
		IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x2);
		counter += 1;
	}
}
   20748:	0001883a 	nop
   2074c:	e037883a 	mov	sp,fp
   20750:	dfc00117 	ldw	ra,4(sp)
   20754:	df000017 	ldw	fp,0(sp)
   20758:	dec00204 	addi	sp,sp,8
   2075c:	f800283a 	ret

00020760 <recov_isr_print>:

void recov_isr_print(void* context)
{
   20760:	defffe04 	addi	sp,sp,-8
   20764:	df000115 	stw	fp,4(sp)
   20768:	df000104 	addi	fp,sp,4
   2076c:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, 0);
   20770:	0007883a 	mov	r3,zero
   20774:	00800134 	movhi	r2,4
   20778:	10840104 	addi	r2,r2,4100
   2077c:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, 0);
   20780:	0007883a 	mov	r3,zero
   20784:	00800134 	movhi	r2,4
   20788:	10840004 	addi	r2,r2,4096
   2078c:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(COUNTER_0_BASE, COUNT_Start, arbval);
   20790:	00ffffd4 	movui	r3,65535
   20794:	00800134 	movhi	r2,4
   20798:	10840a04 	addi	r2,r2,4136
   2079c:	10c00035 	stwio	r3,0(r2)
}
   207a0:	0001883a 	nop
   207a4:	e037883a 	mov	sp,fp
   207a8:	df000017 	ldw	fp,0(sp)
   207ac:	dec00104 	addi	sp,sp,4
   207b0:	f800283a 	ret

000207b4 <recov_isr_parport>:

void recov_isr_parport(void* context)
{
   207b4:	defffe04 	addi	sp,sp,-8
   207b8:	df000115 	stw	fp,4(sp)
   207bc:	df000104 	addi	fp,sp,4
   207c0:	e13fff15 	stw	r4,-4(fp)
	// Clear all parport channels
	IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x0);
   207c4:	0007883a 	mov	r3,zero
   207c8:	00800134 	movhi	r2,4
   207cc:	10841004 	addi	r2,r2,4160
   207d0:	10c00035 	stwio	r3,0(r2)
	// Clear IRQ
	IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_IRQCLR, arbval);
   207d4:	00ffffd4 	movui	r3,65535
   207d8:	00800134 	movhi	r2,4
   207dc:	10841404 	addi	r2,r2,4176
   207e0:	10c00035 	stwio	r3,0(r2)
	// Set channel 0 high to record start of recovery time
	IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x1);
   207e4:	00c00044 	movi	r3,1
   207e8:	00800134 	movhi	r2,4
   207ec:	10841004 	addi	r2,r2,4160
   207f0:	10c00035 	stwio	r3,0(r2)
}
   207f4:	0001883a 	nop
   207f8:	e037883a 	mov	sp,fp
   207fc:	df000017 	ldw	fp,0(sp)
   20800:	dec00104 	addi	sp,sp,4
   20804:	f800283a 	ret

00020808 <test_recovtime_print>:

void test_recovtime_print()
{
   20808:	defff804 	addi	sp,sp,-32
   2080c:	dfc00715 	stw	ra,28(sp)
   20810:	df000615 	stw	fp,24(sp)
   20814:	df000604 	addi	fp,sp,24
	// Register interrupt function
	alt_ic_isr_register(TIMER_0_IRQ_INTERRUPT_CONTROLLER_ID, TIMER_0_IRQ, recov_isr_print, 0, 0);
   20818:	d8000015 	stw	zero,0(sp)
   2081c:	000f883a 	mov	r7,zero
   20820:	018000b4 	movhi	r6,2
   20824:	3181d804 	addi	r6,r6,1888
   20828:	014000c4 	movi	r5,3
   2082c:	0009883a 	mov	r4,zero
   20830:	002d5ac0 	call	2d5ac <alt_ic_isr_register>
	// Initialize counter, with maximum target value
	IOWR_32DIRECT(COUNTER_0_BASE, COUNT_Target, 0xFFFFFFFF);
   20834:	00ffffc4 	movi	r3,-1
   20838:	00800134 	movhi	r2,4
   2083c:	10840e04 	addi	r2,r2,4152
   20840:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(COUNTER_0_BASE, COUNT_RZ, arbval);
   20844:	00ffffd4 	movui	r3,65535
   20848:	00800134 	movhi	r2,4
   2084c:	10840904 	addi	r2,r2,4132
   20850:	10c00035 	stwio	r3,0(r2)
	// Initialize timer
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, 0);
   20854:	0007883a 	mov	r3,zero
   20858:	00800134 	movhi	r2,4
   2085c:	10840104 	addi	r2,r2,4100
   20860:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_0_BASE, 0xF080);
   20864:	00fc2014 	movui	r3,61568
   20868:	00800134 	movhi	r2,4
   2086c:	10840204 	addi	r2,r2,4104
   20870:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_0_BASE, 0x02FA);
   20874:	00c0be84 	movi	r3,762
   20878:	00800134 	movhi	r2,4
   2087c:	10840304 	addi	r2,r2,4108
   20880:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, TIMER_settings_start);
   20884:	00c001c4 	movi	r3,7
   20888:	00800134 	movhi	r2,4
   2088c:	10840104 	addi	r2,r2,4100
   20890:	10c00035 	stwio	r3,0(r2)
	// Setup loop structure
	int counter = 0;
   20894:	e03ffb15 	stw	zero,-20(fp)
	int max_iter = 10;
   20898:	00800284 	movi	r2,10
   2089c:	e0bffe15 	stw	r2,-8(fp)
	int accum_val = 0;
   208a0:	e03ffc15 	stw	zero,-16(fp)
	int avg_val = 0;
   208a4:	e03fff15 	stw	zero,-4(fp)
	int read_val;
	printf("\n\nTesting recovery time using custom counter and\n"
   208a8:	e17ffe17 	ldw	r5,-8(fp)
   208ac:	010000f4 	movhi	r4,3
   208b0:	21003104 	addi	r4,r4,196
   208b4:	0020d200 	call	20d20 <printf>
			" counting the average over %d iterations...\n", max_iter);
	while(counter < max_iter)
   208b8:	00002506 	br	20950 <test_recovtime_print+0x148>
	{
		read_val = IORD_32DIRECT(COUNTER_0_BASE,0);
   208bc:	00800134 	movhi	r2,4
   208c0:	10840804 	addi	r2,r2,4128
   208c4:	10800037 	ldwio	r2,0(r2)
   208c8:	e0bffd15 	stw	r2,-12(fp)
		while(read_val == 0)
   208cc:	00000406 	br	208e0 <test_recovtime_print+0xd8>
		{
			read_val = IORD_32DIRECT(COUNTER_0_BASE,0);
   208d0:	00800134 	movhi	r2,4
   208d4:	10840804 	addi	r2,r2,4128
   208d8:	10800037 	ldwio	r2,0(r2)
   208dc:	e0bffd15 	stw	r2,-12(fp)
	printf("\n\nTesting recovery time using custom counter and\n"
			" counting the average over %d iterations...\n", max_iter);
	while(counter < max_iter)
	{
		read_val = IORD_32DIRECT(COUNTER_0_BASE,0);
		while(read_val == 0)
   208e0:	e0bffd17 	ldw	r2,-12(fp)
   208e4:	103ffa26 	beq	r2,zero,208d0 <__alt_data_end+0xfffe08d0>
		{
			read_val = IORD_32DIRECT(COUNTER_0_BASE,0);
		}
		alt_printf("Value at iteration %x is 0x%x clock cycles\n", counter+1, read_val);
   208e8:	e0bffb17 	ldw	r2,-20(fp)
   208ec:	10800044 	addi	r2,r2,1
   208f0:	e1bffd17 	ldw	r6,-12(fp)
   208f4:	100b883a 	mov	r5,r2
   208f8:	010000f4 	movhi	r4,3
   208fc:	21001904 	addi	r4,r4,100
   20900:	002dbec0 	call	2dbec <alt_printf>
		accum_val += read_val;
   20904:	e0fffc17 	ldw	r3,-16(fp)
   20908:	e0bffd17 	ldw	r2,-12(fp)
   2090c:	1885883a 	add	r2,r3,r2
   20910:	e0bffc15 	stw	r2,-16(fp)
		counter += 1;
   20914:	e0bffb17 	ldw	r2,-20(fp)
   20918:	10800044 	addi	r2,r2,1
   2091c:	e0bffb15 	stw	r2,-20(fp)
		IOWR_32DIRECT(COUNTER_0_BASE, COUNT_Stop, arbval);
   20920:	00ffffd4 	movui	r3,65535
   20924:	00800134 	movhi	r2,4
   20928:	10840b04 	addi	r2,r2,4140
   2092c:	10c00035 	stwio	r3,0(r2)
		IOWR_32DIRECT(COUNTER_0_BASE, COUNT_RZ, arbval);
   20930:	00ffffd4 	movui	r3,65535
   20934:	00800134 	movhi	r2,4
   20938:	10840904 	addi	r2,r2,4132
   2093c:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, TIMER_settings_start);
   20940:	00c001c4 	movi	r3,7
   20944:	00800134 	movhi	r2,4
   20948:	10840104 	addi	r2,r2,4100
   2094c:	10c00035 	stwio	r3,0(r2)
	int accum_val = 0;
	int avg_val = 0;
	int read_val;
	printf("\n\nTesting recovery time using custom counter and\n"
			" counting the average over %d iterations...\n", max_iter);
	while(counter < max_iter)
   20950:	e0fffb17 	ldw	r3,-20(fp)
   20954:	e0bffe17 	ldw	r2,-8(fp)
   20958:	18bfd816 	blt	r3,r2,208bc <__alt_data_end+0xfffe08bc>
		counter += 1;
		IOWR_32DIRECT(COUNTER_0_BASE, COUNT_Stop, arbval);
		IOWR_32DIRECT(COUNTER_0_BASE, COUNT_RZ, arbval);
		IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, TIMER_settings_start);
	}
	avg_val = accum_val/max_iter;
   2095c:	e17ffe17 	ldw	r5,-8(fp)
   20960:	e13ffc17 	ldw	r4,-16(fp)
   20964:	0020b3c0 	call	20b3c <__divsi3>
   20968:	e0bfff15 	stw	r2,-4(fp)
	printf("Average value for recovery time is %d clock cycles", avg_val);
   2096c:	e17fff17 	ldw	r5,-4(fp)
   20970:	010000f4 	movhi	r4,3
   20974:	21004904 	addi	r4,r4,292
   20978:	0020d200 	call	20d20 <printf>
}
   2097c:	0001883a 	nop
   20980:	e037883a 	mov	sp,fp
   20984:	dfc00117 	ldw	ra,4(sp)
   20988:	df000017 	ldw	fp,0(sp)
   2098c:	dec00204 	addi	sp,sp,8
   20990:	f800283a 	ret

00020994 <test_recovtime_parport>:

void test_recovtime_parport()
{
   20994:	defffb04 	addi	sp,sp,-20
   20998:	dfc00415 	stw	ra,16(sp)
   2099c:	df000315 	stw	fp,12(sp)
   209a0:	df000304 	addi	fp,sp,12
	// Register isr
		alt_ic_isr_register(PARALLELPORT_0_IRQ_INTERRUPT_CONTROLLER_ID, PARALLELPORT_0_IRQ, recov_isr_parport, 0, 0);
   209a4:	d8000015 	stw	zero,0(sp)
   209a8:	000f883a 	mov	r7,zero
   209ac:	018000b4 	movhi	r6,2
   209b0:	3181ed04 	addi	r6,r6,1972
   209b4:	01400044 	movi	r5,1
   209b8:	0009883a 	mov	r4,zero
   209bc:	002d5ac0 	call	2d5ac <alt_ic_isr_register>
		IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x0);
   209c0:	0007883a 	mov	r3,zero
   209c4:	00800134 	movhi	r2,4
   209c8:	10841004 	addi	r2,r2,4160
   209cc:	10c00035 	stwio	r3,0(r2)
		IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_IRQEN, 0x2);
   209d0:	00c00084 	movi	r3,2
   209d4:	00800134 	movhi	r2,4
   209d8:	10841304 	addi	r2,r2,4172
   209dc:	10c00035 	stwio	r3,0(r2)
		int iterations = 10;
   209e0:	00800284 	movi	r2,10
   209e4:	e0bfff15 	stw	r2,-4(fp)
		int counter = 0;
   209e8:	e03ffe15 	stw	zero,-8(fp)
		while(counter < iterations)
   209ec:	00000b06 	br	20a1c <test_recovtime_parport+0x88>
		{
			// Trigger the interrupt by setting channel 1 high
			IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x2);
   209f0:	00c00084 	movi	r3,2
   209f4:	00800134 	movhi	r2,4
   209f8:	10841004 	addi	r2,r2,4160
   209fc:	10c00035 	stwio	r3,0(r2)
			// Record end of recovery time by setting channel 0 low
			IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x0);
   20a00:	0007883a 	mov	r3,zero
   20a04:	00800134 	movhi	r2,4
   20a08:	10841004 	addi	r2,r2,4160
   20a0c:	10c00035 	stwio	r3,0(r2)
			counter += 1;
   20a10:	e0bffe17 	ldw	r2,-8(fp)
   20a14:	10800044 	addi	r2,r2,1
   20a18:	e0bffe15 	stw	r2,-8(fp)
		alt_ic_isr_register(PARALLELPORT_0_IRQ_INTERRUPT_CONTROLLER_ID, PARALLELPORT_0_IRQ, recov_isr_parport, 0, 0);
		IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x0);
		IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_IRQEN, 0x2);
		int iterations = 10;
		int counter = 0;
		while(counter < iterations)
   20a1c:	e0fffe17 	ldw	r3,-8(fp)
   20a20:	e0bfff17 	ldw	r2,-4(fp)
   20a24:	18bff216 	blt	r3,r2,209f0 <__alt_data_end+0xfffe09f0>
			IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x2);
			// Record end of recovery time by setting channel 0 low
			IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x0);
			counter += 1;
		}
}
   20a28:	0001883a 	nop
   20a2c:	e037883a 	mov	sp,fp
   20a30:	dfc00117 	ldw	ra,4(sp)
   20a34:	df000017 	ldw	fp,0(sp)
   20a38:	dec00204 	addi	sp,sp,8
   20a3c:	f800283a 	ret

00020a40 <latency_isr_parport>:

void latency_isr_parport(void* context)
{
   20a40:	defffe04 	addi	sp,sp,-8
   20a44:	df000115 	stw	fp,4(sp)
   20a48:	df000104 	addi	fp,sp,4
   20a4c:	e13fff15 	stw	r4,-4(fp)
	IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_IRQCLR, arbval);
   20a50:	00ffffd4 	movui	r3,65535
   20a54:	00800134 	movhi	r2,4
   20a58:	10841404 	addi	r2,r2,4176
   20a5c:	10c00035 	stwio	r3,0(r2)
}
   20a60:	0001883a 	nop
   20a64:	e037883a 	mov	sp,fp
   20a68:	df000017 	ldw	fp,0(sp)
   20a6c:	dec00104 	addi	sp,sp,4
   20a70:	f800283a 	ret

00020a74 <test_latency_parport>:

void test_latency_parport()
{
   20a74:	defffb04 	addi	sp,sp,-20
   20a78:	dfc00415 	stw	ra,16(sp)
   20a7c:	df000315 	stw	fp,12(sp)
   20a80:	df000304 	addi	fp,sp,12
	alt_ic_isr_register(PARALLELPORT_0_IRQ_INTERRUPT_CONTROLLER_ID, PARALLELPORT_0_IRQ, latency_isr_parport, 0, 0);
   20a84:	d8000015 	stw	zero,0(sp)
   20a88:	000f883a 	mov	r7,zero
   20a8c:	018000b4 	movhi	r6,2
   20a90:	31829004 	addi	r6,r6,2624
   20a94:	01400044 	movi	r5,1
   20a98:	0009883a 	mov	r4,zero
   20a9c:	002d5ac0 	call	2d5ac <alt_ic_isr_register>
	IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x0);
   20aa0:	0007883a 	mov	r3,zero
   20aa4:	00800134 	movhi	r2,4
   20aa8:	10841004 	addi	r2,r2,4160
   20aac:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_IRQEN, 0x1);
   20ab0:	00c00044 	movi	r3,1
   20ab4:	00800134 	movhi	r2,4
   20ab8:	10841304 	addi	r2,r2,4172
   20abc:	10c00035 	stwio	r3,0(r2)
	int iterations = 1e2;
   20ac0:	00801904 	movi	r2,100
   20ac4:	e0bfff15 	stw	r2,-4(fp)
	int counter = 0;
   20ac8:	e03ffe15 	stw	zero,-8(fp)
	while(counter < iterations)
   20acc:	00000706 	br	20aec <test_latency_parport+0x78>
	{
		// Trigger the interrupt by setting channel 0 high
		IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x1);
   20ad0:	00c00044 	movi	r3,1
   20ad4:	00800134 	movhi	r2,4
   20ad8:	10841004 	addi	r2,r2,4160
   20adc:	10c00035 	stwio	r3,0(r2)

		counter += 1;
   20ae0:	e0bffe17 	ldw	r2,-8(fp)
   20ae4:	10800044 	addi	r2,r2,1
   20ae8:	e0bffe15 	stw	r2,-8(fp)
	alt_ic_isr_register(PARALLELPORT_0_IRQ_INTERRUPT_CONTROLLER_ID, PARALLELPORT_0_IRQ, latency_isr_parport, 0, 0);
	IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x0);
	IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_IRQEN, 0x1);
	int iterations = 1e2;
	int counter = 0;
	while(counter < iterations)
   20aec:	e0fffe17 	ldw	r3,-8(fp)
   20af0:	e0bfff17 	ldw	r2,-4(fp)
   20af4:	18bff616 	blt	r3,r2,20ad0 <__alt_data_end+0xfffe0ad0>
		// Trigger the interrupt by setting channel 0 high
		IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x1);

		counter += 1;
	}
}
   20af8:	0001883a 	nop
   20afc:	e037883a 	mov	sp,fp
   20b00:	dfc00117 	ldw	ra,4(sp)
   20b04:	df000017 	ldw	fp,0(sp)
   20b08:	dec00204 	addi	sp,sp,8
   20b0c:	f800283a 	ret

00020b10 <main>:

int main()
{
   20b10:	defffe04 	addi	sp,sp,-8
   20b14:	dfc00115 	stw	ra,4(sp)
   20b18:	df000015 	stw	fp,0(sp)
   20b1c:	d839883a 	mov	fp,sp
	//test_parallel_port();
	//test_counter();

	// Latency tests
	// De-comment line 90 in alt_irq_handler.c to run this test
	test_latency_parport();
   20b20:	0020a740 	call	20a74 <test_latency_parport>
	//test_resptime_parport();

	// Recovery time tests
	//test_recovtime_print();
	//test_recovtime_parport();
	return 0;
   20b24:	0005883a 	mov	r2,zero
}
   20b28:	e037883a 	mov	sp,fp
   20b2c:	dfc00117 	ldw	ra,4(sp)
   20b30:	df000017 	ldw	fp,0(sp)
   20b34:	dec00204 	addi	sp,sp,8
   20b38:	f800283a 	ret

00020b3c <__divsi3>:
   20b3c:	20001b16 	blt	r4,zero,20bac <__divsi3+0x70>
   20b40:	000f883a 	mov	r7,zero
   20b44:	28001616 	blt	r5,zero,20ba0 <__divsi3+0x64>
   20b48:	200d883a 	mov	r6,r4
   20b4c:	29001a2e 	bgeu	r5,r4,20bb8 <__divsi3+0x7c>
   20b50:	00800804 	movi	r2,32
   20b54:	00c00044 	movi	r3,1
   20b58:	00000106 	br	20b60 <__divsi3+0x24>
   20b5c:	10000d26 	beq	r2,zero,20b94 <__divsi3+0x58>
   20b60:	294b883a 	add	r5,r5,r5
   20b64:	10bfffc4 	addi	r2,r2,-1
   20b68:	18c7883a 	add	r3,r3,r3
   20b6c:	293ffb36 	bltu	r5,r4,20b5c <__alt_data_end+0xfffe0b5c>
   20b70:	0005883a 	mov	r2,zero
   20b74:	18000726 	beq	r3,zero,20b94 <__divsi3+0x58>
   20b78:	0005883a 	mov	r2,zero
   20b7c:	31400236 	bltu	r6,r5,20b88 <__divsi3+0x4c>
   20b80:	314dc83a 	sub	r6,r6,r5
   20b84:	10c4b03a 	or	r2,r2,r3
   20b88:	1806d07a 	srli	r3,r3,1
   20b8c:	280ad07a 	srli	r5,r5,1
   20b90:	183ffa1e 	bne	r3,zero,20b7c <__alt_data_end+0xfffe0b7c>
   20b94:	38000126 	beq	r7,zero,20b9c <__divsi3+0x60>
   20b98:	0085c83a 	sub	r2,zero,r2
   20b9c:	f800283a 	ret
   20ba0:	014bc83a 	sub	r5,zero,r5
   20ba4:	39c0005c 	xori	r7,r7,1
   20ba8:	003fe706 	br	20b48 <__alt_data_end+0xfffe0b48>
   20bac:	0109c83a 	sub	r4,zero,r4
   20bb0:	01c00044 	movi	r7,1
   20bb4:	003fe306 	br	20b44 <__alt_data_end+0xfffe0b44>
   20bb8:	00c00044 	movi	r3,1
   20bbc:	003fee06 	br	20b78 <__alt_data_end+0xfffe0b78>

00020bc0 <__modsi3>:
   20bc0:	20001716 	blt	r4,zero,20c20 <__modsi3+0x60>
   20bc4:	000f883a 	mov	r7,zero
   20bc8:	2005883a 	mov	r2,r4
   20bcc:	28001216 	blt	r5,zero,20c18 <__modsi3+0x58>
   20bd0:	2900162e 	bgeu	r5,r4,20c2c <__modsi3+0x6c>
   20bd4:	01800804 	movi	r6,32
   20bd8:	00c00044 	movi	r3,1
   20bdc:	00000106 	br	20be4 <__modsi3+0x24>
   20be0:	30000a26 	beq	r6,zero,20c0c <__modsi3+0x4c>
   20be4:	294b883a 	add	r5,r5,r5
   20be8:	31bfffc4 	addi	r6,r6,-1
   20bec:	18c7883a 	add	r3,r3,r3
   20bf0:	293ffb36 	bltu	r5,r4,20be0 <__alt_data_end+0xfffe0be0>
   20bf4:	18000526 	beq	r3,zero,20c0c <__modsi3+0x4c>
   20bf8:	1806d07a 	srli	r3,r3,1
   20bfc:	11400136 	bltu	r2,r5,20c04 <__modsi3+0x44>
   20c00:	1145c83a 	sub	r2,r2,r5
   20c04:	280ad07a 	srli	r5,r5,1
   20c08:	183ffb1e 	bne	r3,zero,20bf8 <__alt_data_end+0xfffe0bf8>
   20c0c:	38000126 	beq	r7,zero,20c14 <__modsi3+0x54>
   20c10:	0085c83a 	sub	r2,zero,r2
   20c14:	f800283a 	ret
   20c18:	014bc83a 	sub	r5,zero,r5
   20c1c:	003fec06 	br	20bd0 <__alt_data_end+0xfffe0bd0>
   20c20:	0109c83a 	sub	r4,zero,r4
   20c24:	01c00044 	movi	r7,1
   20c28:	003fe706 	br	20bc8 <__alt_data_end+0xfffe0bc8>
   20c2c:	00c00044 	movi	r3,1
   20c30:	003ff106 	br	20bf8 <__alt_data_end+0xfffe0bf8>

00020c34 <__udivsi3>:
   20c34:	200d883a 	mov	r6,r4
   20c38:	2900152e 	bgeu	r5,r4,20c90 <__udivsi3+0x5c>
   20c3c:	28001416 	blt	r5,zero,20c90 <__udivsi3+0x5c>
   20c40:	00800804 	movi	r2,32
   20c44:	00c00044 	movi	r3,1
   20c48:	00000206 	br	20c54 <__udivsi3+0x20>
   20c4c:	10000e26 	beq	r2,zero,20c88 <__udivsi3+0x54>
   20c50:	28000516 	blt	r5,zero,20c68 <__udivsi3+0x34>
   20c54:	294b883a 	add	r5,r5,r5
   20c58:	10bfffc4 	addi	r2,r2,-1
   20c5c:	18c7883a 	add	r3,r3,r3
   20c60:	293ffa36 	bltu	r5,r4,20c4c <__alt_data_end+0xfffe0c4c>
   20c64:	18000826 	beq	r3,zero,20c88 <__udivsi3+0x54>
   20c68:	0005883a 	mov	r2,zero
   20c6c:	31400236 	bltu	r6,r5,20c78 <__udivsi3+0x44>
   20c70:	314dc83a 	sub	r6,r6,r5
   20c74:	10c4b03a 	or	r2,r2,r3
   20c78:	1806d07a 	srli	r3,r3,1
   20c7c:	280ad07a 	srli	r5,r5,1
   20c80:	183ffa1e 	bne	r3,zero,20c6c <__alt_data_end+0xfffe0c6c>
   20c84:	f800283a 	ret
   20c88:	0005883a 	mov	r2,zero
   20c8c:	f800283a 	ret
   20c90:	00c00044 	movi	r3,1
   20c94:	003ff406 	br	20c68 <__alt_data_end+0xfffe0c68>

00020c98 <__umodsi3>:
   20c98:	2005883a 	mov	r2,r4
   20c9c:	2900122e 	bgeu	r5,r4,20ce8 <__umodsi3+0x50>
   20ca0:	28001116 	blt	r5,zero,20ce8 <__umodsi3+0x50>
   20ca4:	01800804 	movi	r6,32
   20ca8:	00c00044 	movi	r3,1
   20cac:	00000206 	br	20cb8 <__umodsi3+0x20>
   20cb0:	30000c26 	beq	r6,zero,20ce4 <__umodsi3+0x4c>
   20cb4:	28000516 	blt	r5,zero,20ccc <__umodsi3+0x34>
   20cb8:	294b883a 	add	r5,r5,r5
   20cbc:	31bfffc4 	addi	r6,r6,-1
   20cc0:	18c7883a 	add	r3,r3,r3
   20cc4:	293ffa36 	bltu	r5,r4,20cb0 <__alt_data_end+0xfffe0cb0>
   20cc8:	18000626 	beq	r3,zero,20ce4 <__umodsi3+0x4c>
   20ccc:	1806d07a 	srli	r3,r3,1
   20cd0:	11400136 	bltu	r2,r5,20cd8 <__umodsi3+0x40>
   20cd4:	1145c83a 	sub	r2,r2,r5
   20cd8:	280ad07a 	srli	r5,r5,1
   20cdc:	183ffb1e 	bne	r3,zero,20ccc <__alt_data_end+0xfffe0ccc>
   20ce0:	f800283a 	ret
   20ce4:	f800283a 	ret
   20ce8:	00c00044 	movi	r3,1
   20cec:	003ff706 	br	20ccc <__alt_data_end+0xfffe0ccc>

00020cf0 <_printf_r>:
   20cf0:	defffd04 	addi	sp,sp,-12
   20cf4:	2805883a 	mov	r2,r5
   20cf8:	dfc00015 	stw	ra,0(sp)
   20cfc:	d9800115 	stw	r6,4(sp)
   20d00:	d9c00215 	stw	r7,8(sp)
   20d04:	21400217 	ldw	r5,8(r4)
   20d08:	d9c00104 	addi	r7,sp,4
   20d0c:	100d883a 	mov	r6,r2
   20d10:	0020d5c0 	call	20d5c <___vfprintf_internal_r>
   20d14:	dfc00017 	ldw	ra,0(sp)
   20d18:	dec00304 	addi	sp,sp,12
   20d1c:	f800283a 	ret

00020d20 <printf>:
   20d20:	defffc04 	addi	sp,sp,-16
   20d24:	dfc00015 	stw	ra,0(sp)
   20d28:	d9400115 	stw	r5,4(sp)
   20d2c:	d9800215 	stw	r6,8(sp)
   20d30:	d9c00315 	stw	r7,12(sp)
   20d34:	008000f4 	movhi	r2,3
   20d38:	1087c104 	addi	r2,r2,7940
   20d3c:	10800017 	ldw	r2,0(r2)
   20d40:	200b883a 	mov	r5,r4
   20d44:	d9800104 	addi	r6,sp,4
   20d48:	11000217 	ldw	r4,8(r2)
   20d4c:	0022f540 	call	22f54 <__vfprintf_internal>
   20d50:	dfc00017 	ldw	ra,0(sp)
   20d54:	dec00404 	addi	sp,sp,16
   20d58:	f800283a 	ret

00020d5c <___vfprintf_internal_r>:
   20d5c:	deffb804 	addi	sp,sp,-288
   20d60:	dfc04715 	stw	ra,284(sp)
   20d64:	ddc04515 	stw	r23,276(sp)
   20d68:	dd404315 	stw	r21,268(sp)
   20d6c:	d9002c15 	stw	r4,176(sp)
   20d70:	282f883a 	mov	r23,r5
   20d74:	302b883a 	mov	r21,r6
   20d78:	d9c02d15 	stw	r7,180(sp)
   20d7c:	df004615 	stw	fp,280(sp)
   20d80:	dd804415 	stw	r22,272(sp)
   20d84:	dd004215 	stw	r20,264(sp)
   20d88:	dcc04115 	stw	r19,260(sp)
   20d8c:	dc804015 	stw	r18,256(sp)
   20d90:	dc403f15 	stw	r17,252(sp)
   20d94:	dc003e15 	stw	r16,248(sp)
   20d98:	00256b80 	call	256b8 <_localeconv_r>
   20d9c:	10800017 	ldw	r2,0(r2)
   20da0:	1009883a 	mov	r4,r2
   20da4:	d8803415 	stw	r2,208(sp)
   20da8:	00276e00 	call	276e0 <strlen>
   20dac:	d8803715 	stw	r2,220(sp)
   20db0:	d8802c17 	ldw	r2,176(sp)
   20db4:	10000226 	beq	r2,zero,20dc0 <___vfprintf_internal_r+0x64>
   20db8:	10800e17 	ldw	r2,56(r2)
   20dbc:	1000f926 	beq	r2,zero,211a4 <___vfprintf_internal_r+0x448>
   20dc0:	b880030b 	ldhu	r2,12(r23)
   20dc4:	10c8000c 	andi	r3,r2,8192
   20dc8:	1800061e 	bne	r3,zero,20de4 <___vfprintf_internal_r+0x88>
   20dcc:	b9001917 	ldw	r4,100(r23)
   20dd0:	00f7ffc4 	movi	r3,-8193
   20dd4:	10880014 	ori	r2,r2,8192
   20dd8:	20c6703a 	and	r3,r4,r3
   20ddc:	b880030d 	sth	r2,12(r23)
   20de0:	b8c01915 	stw	r3,100(r23)
   20de4:	10c0020c 	andi	r3,r2,8
   20de8:	1800c126 	beq	r3,zero,210f0 <___vfprintf_internal_r+0x394>
   20dec:	b8c00417 	ldw	r3,16(r23)
   20df0:	1800bf26 	beq	r3,zero,210f0 <___vfprintf_internal_r+0x394>
   20df4:	1080068c 	andi	r2,r2,26
   20df8:	00c00284 	movi	r3,10
   20dfc:	10c0c426 	beq	r2,r3,21110 <___vfprintf_internal_r+0x3b4>
   20e00:	d8c00404 	addi	r3,sp,16
   20e04:	050000f4 	movhi	r20,3
   20e08:	d9001e04 	addi	r4,sp,120
   20e0c:	a5006684 	addi	r20,r20,410
   20e10:	d8c01e15 	stw	r3,120(sp)
   20e14:	d8002015 	stw	zero,128(sp)
   20e18:	d8001f15 	stw	zero,124(sp)
   20e1c:	d8003315 	stw	zero,204(sp)
   20e20:	d8003615 	stw	zero,216(sp)
   20e24:	d8003815 	stw	zero,224(sp)
   20e28:	1811883a 	mov	r8,r3
   20e2c:	d8003915 	stw	zero,228(sp)
   20e30:	d8003a15 	stw	zero,232(sp)
   20e34:	d8002f15 	stw	zero,188(sp)
   20e38:	d9002815 	stw	r4,160(sp)
   20e3c:	a8800007 	ldb	r2,0(r21)
   20e40:	10027b26 	beq	r2,zero,21830 <___vfprintf_internal_r+0xad4>
   20e44:	00c00944 	movi	r3,37
   20e48:	a821883a 	mov	r16,r21
   20e4c:	10c0021e 	bne	r2,r3,20e58 <___vfprintf_internal_r+0xfc>
   20e50:	00001406 	br	20ea4 <___vfprintf_internal_r+0x148>
   20e54:	10c00326 	beq	r2,r3,20e64 <___vfprintf_internal_r+0x108>
   20e58:	84000044 	addi	r16,r16,1
   20e5c:	80800007 	ldb	r2,0(r16)
   20e60:	103ffc1e 	bne	r2,zero,20e54 <__alt_data_end+0xfffe0e54>
   20e64:	8563c83a 	sub	r17,r16,r21
   20e68:	88000e26 	beq	r17,zero,20ea4 <___vfprintf_internal_r+0x148>
   20e6c:	d8c02017 	ldw	r3,128(sp)
   20e70:	d8801f17 	ldw	r2,124(sp)
   20e74:	45400015 	stw	r21,0(r8)
   20e78:	1c47883a 	add	r3,r3,r17
   20e7c:	10800044 	addi	r2,r2,1
   20e80:	d8c02015 	stw	r3,128(sp)
   20e84:	44400115 	stw	r17,4(r8)
   20e88:	d8801f15 	stw	r2,124(sp)
   20e8c:	00c001c4 	movi	r3,7
   20e90:	1880a716 	blt	r3,r2,21130 <___vfprintf_internal_r+0x3d4>
   20e94:	42000204 	addi	r8,r8,8
   20e98:	d9402f17 	ldw	r5,188(sp)
   20e9c:	2c4b883a 	add	r5,r5,r17
   20ea0:	d9402f15 	stw	r5,188(sp)
   20ea4:	80800007 	ldb	r2,0(r16)
   20ea8:	1000a826 	beq	r2,zero,2114c <___vfprintf_internal_r+0x3f0>
   20eac:	84400047 	ldb	r17,1(r16)
   20eb0:	00bfffc4 	movi	r2,-1
   20eb4:	85400044 	addi	r21,r16,1
   20eb8:	d8002785 	stb	zero,158(sp)
   20ebc:	0007883a 	mov	r3,zero
   20ec0:	000f883a 	mov	r7,zero
   20ec4:	d8802915 	stw	r2,164(sp)
   20ec8:	d8003115 	stw	zero,196(sp)
   20ecc:	0025883a 	mov	r18,zero
   20ed0:	01401604 	movi	r5,88
   20ed4:	01800244 	movi	r6,9
   20ed8:	02800a84 	movi	r10,42
   20edc:	02401b04 	movi	r9,108
   20ee0:	ad400044 	addi	r21,r21,1
   20ee4:	88bff804 	addi	r2,r17,-32
   20ee8:	28830436 	bltu	r5,r2,21afc <___vfprintf_internal_r+0xda0>
   20eec:	100490ba 	slli	r2,r2,2
   20ef0:	010000b4 	movhi	r4,2
   20ef4:	2103c104 	addi	r4,r4,3844
   20ef8:	1105883a 	add	r2,r2,r4
   20efc:	10800017 	ldw	r2,0(r2)
   20f00:	1000683a 	jmp	r2
   20f04:	00021a1c 	xori	zero,zero,2152
   20f08:	00021afc 	xorhi	zero,zero,2155
   20f0c:	00021afc 	xorhi	zero,zero,2155
   20f10:	00021a3c 	xorhi	zero,zero,2152
   20f14:	00021afc 	xorhi	zero,zero,2155
   20f18:	00021afc 	xorhi	zero,zero,2155
   20f1c:	00021afc 	xorhi	zero,zero,2155
   20f20:	00021afc 	xorhi	zero,zero,2155
   20f24:	00021afc 	xorhi	zero,zero,2155
   20f28:	00021afc 	xorhi	zero,zero,2155
   20f2c:	000211b0 	cmpltui	zero,zero,2118
   20f30:	00021958 	cmpnei	zero,zero,2149
   20f34:	00021afc 	xorhi	zero,zero,2155
   20f38:	00021078 	rdprs	zero,zero,2113
   20f3c:	000211d8 	cmpnei	zero,zero,2119
   20f40:	00021afc 	xorhi	zero,zero,2155
   20f44:	00021218 	cmpnei	zero,zero,2120
   20f48:	00021224 	muli	zero,zero,2120
   20f4c:	00021224 	muli	zero,zero,2120
   20f50:	00021224 	muli	zero,zero,2120
   20f54:	00021224 	muli	zero,zero,2120
   20f58:	00021224 	muli	zero,zero,2120
   20f5c:	00021224 	muli	zero,zero,2120
   20f60:	00021224 	muli	zero,zero,2120
   20f64:	00021224 	muli	zero,zero,2120
   20f68:	00021224 	muli	zero,zero,2120
   20f6c:	00021afc 	xorhi	zero,zero,2155
   20f70:	00021afc 	xorhi	zero,zero,2155
   20f74:	00021afc 	xorhi	zero,zero,2155
   20f78:	00021afc 	xorhi	zero,zero,2155
   20f7c:	00021afc 	xorhi	zero,zero,2155
   20f80:	00021afc 	xorhi	zero,zero,2155
   20f84:	00021afc 	xorhi	zero,zero,2155
   20f88:	00021afc 	xorhi	zero,zero,2155
   20f8c:	00021afc 	xorhi	zero,zero,2155
   20f90:	00021afc 	xorhi	zero,zero,2155
   20f94:	00021258 	cmpnei	zero,zero,2121
   20f98:	00021314 	movui	zero,2124
   20f9c:	00021afc 	xorhi	zero,zero,2155
   20fa0:	00021314 	movui	zero,2124
   20fa4:	00021afc 	xorhi	zero,zero,2155
   20fa8:	00021afc 	xorhi	zero,zero,2155
   20fac:	00021afc 	xorhi	zero,zero,2155
   20fb0:	00021afc 	xorhi	zero,zero,2155
   20fb4:	000213b4 	movhi	zero,2126
   20fb8:	00021afc 	xorhi	zero,zero,2155
   20fbc:	00021afc 	xorhi	zero,zero,2155
   20fc0:	000213c0 	call	213c <__alt_mem_onchip_memory2_0-0x1dec4>
   20fc4:	00021afc 	xorhi	zero,zero,2155
   20fc8:	00021afc 	xorhi	zero,zero,2155
   20fcc:	00021afc 	xorhi	zero,zero,2155
   20fd0:	00021afc 	xorhi	zero,zero,2155
   20fd4:	00021afc 	xorhi	zero,zero,2155
   20fd8:	00021838 	rdprs	zero,zero,2144
   20fdc:	00021afc 	xorhi	zero,zero,2155
   20fe0:	00021afc 	xorhi	zero,zero,2155
   20fe4:	00021898 	cmpnei	zero,zero,2146
   20fe8:	00021afc 	xorhi	zero,zero,2155
   20fec:	00021afc 	xorhi	zero,zero,2155
   20ff0:	00021afc 	xorhi	zero,zero,2155
   20ff4:	00021afc 	xorhi	zero,zero,2155
   20ff8:	00021afc 	xorhi	zero,zero,2155
   20ffc:	00021afc 	xorhi	zero,zero,2155
   21000:	00021afc 	xorhi	zero,zero,2155
   21004:	00021afc 	xorhi	zero,zero,2155
   21008:	00021afc 	xorhi	zero,zero,2155
   2100c:	00021afc 	xorhi	zero,zero,2155
   21010:	00021aa8 	cmpgeui	zero,zero,2154
   21014:	00021a48 	cmpgei	zero,zero,2153
   21018:	00021314 	movui	zero,2124
   2101c:	00021314 	movui	zero,2124
   21020:	00021314 	movui	zero,2124
   21024:	00021a58 	cmpnei	zero,zero,2153
   21028:	00021a48 	cmpgei	zero,zero,2153
   2102c:	00021afc 	xorhi	zero,zero,2155
   21030:	00021afc 	xorhi	zero,zero,2155
   21034:	00021a64 	muli	zero,zero,2153
   21038:	00021afc 	xorhi	zero,zero,2155
   2103c:	00021a74 	movhi	zero,2153
   21040:	00021948 	cmpgei	zero,zero,2149
   21044:	00021084 	movi	zero,2114
   21048:	00021968 	cmpgeui	zero,zero,2149
   2104c:	00021afc 	xorhi	zero,zero,2155
   21050:	00021974 	movhi	zero,2149
   21054:	00021afc 	xorhi	zero,zero,2155
   21058:	000219d0 	cmplti	zero,zero,2151
   2105c:	00021afc 	xorhi	zero,zero,2155
   21060:	00021afc 	xorhi	zero,zero,2155
   21064:	000219e0 	cmpeqi	zero,zero,2151
   21068:	d9003117 	ldw	r4,196(sp)
   2106c:	d8802d15 	stw	r2,180(sp)
   21070:	0109c83a 	sub	r4,zero,r4
   21074:	d9003115 	stw	r4,196(sp)
   21078:	94800114 	ori	r18,r18,4
   2107c:	ac400007 	ldb	r17,0(r21)
   21080:	003f9706 	br	20ee0 <__alt_data_end+0xfffe0ee0>
   21084:	00800c04 	movi	r2,48
   21088:	d9002d17 	ldw	r4,180(sp)
   2108c:	d9402917 	ldw	r5,164(sp)
   21090:	d8802705 	stb	r2,156(sp)
   21094:	00801e04 	movi	r2,120
   21098:	d8802745 	stb	r2,157(sp)
   2109c:	d8002785 	stb	zero,158(sp)
   210a0:	20c00104 	addi	r3,r4,4
   210a4:	24c00017 	ldw	r19,0(r4)
   210a8:	002d883a 	mov	r22,zero
   210ac:	90800094 	ori	r2,r18,2
   210b0:	28029a16 	blt	r5,zero,21b1c <___vfprintf_internal_r+0xdc0>
   210b4:	00bfdfc4 	movi	r2,-129
   210b8:	90a4703a 	and	r18,r18,r2
   210bc:	d8c02d15 	stw	r3,180(sp)
   210c0:	94800094 	ori	r18,r18,2
   210c4:	9802871e 	bne	r19,zero,21ae4 <___vfprintf_internal_r+0xd88>
   210c8:	008000f4 	movhi	r2,3
   210cc:	10805f04 	addi	r2,r2,380
   210d0:	d8803915 	stw	r2,228(sp)
   210d4:	04401e04 	movi	r17,120
   210d8:	d8802917 	ldw	r2,164(sp)
   210dc:	0039883a 	mov	fp,zero
   210e0:	1001e926 	beq	r2,zero,21888 <___vfprintf_internal_r+0xb2c>
   210e4:	0027883a 	mov	r19,zero
   210e8:	002d883a 	mov	r22,zero
   210ec:	00020506 	br	21904 <___vfprintf_internal_r+0xba8>
   210f0:	d9002c17 	ldw	r4,176(sp)
   210f4:	b80b883a 	mov	r5,r23
   210f8:	002302c0 	call	2302c <__swsetup_r>
   210fc:	1005ac1e 	bne	r2,zero,227b0 <___vfprintf_internal_r+0x1a54>
   21100:	b880030b 	ldhu	r2,12(r23)
   21104:	00c00284 	movi	r3,10
   21108:	1080068c 	andi	r2,r2,26
   2110c:	10ff3c1e 	bne	r2,r3,20e00 <__alt_data_end+0xfffe0e00>
   21110:	b880038f 	ldh	r2,14(r23)
   21114:	103f3a16 	blt	r2,zero,20e00 <__alt_data_end+0xfffe0e00>
   21118:	d9c02d17 	ldw	r7,180(sp)
   2111c:	d9002c17 	ldw	r4,176(sp)
   21120:	a80d883a 	mov	r6,r21
   21124:	b80b883a 	mov	r5,r23
   21128:	0022f700 	call	22f70 <__sbprintf>
   2112c:	00001106 	br	21174 <___vfprintf_internal_r+0x418>
   21130:	d9002c17 	ldw	r4,176(sp)
   21134:	d9801e04 	addi	r6,sp,120
   21138:	b80b883a 	mov	r5,r23
   2113c:	00278740 	call	27874 <__sprint_r>
   21140:	1000081e 	bne	r2,zero,21164 <___vfprintf_internal_r+0x408>
   21144:	da000404 	addi	r8,sp,16
   21148:	003f5306 	br	20e98 <__alt_data_end+0xfffe0e98>
   2114c:	d8802017 	ldw	r2,128(sp)
   21150:	10000426 	beq	r2,zero,21164 <___vfprintf_internal_r+0x408>
   21154:	d9002c17 	ldw	r4,176(sp)
   21158:	d9801e04 	addi	r6,sp,120
   2115c:	b80b883a 	mov	r5,r23
   21160:	00278740 	call	27874 <__sprint_r>
   21164:	b880030b 	ldhu	r2,12(r23)
   21168:	1080100c 	andi	r2,r2,64
   2116c:	1005901e 	bne	r2,zero,227b0 <___vfprintf_internal_r+0x1a54>
   21170:	d8802f17 	ldw	r2,188(sp)
   21174:	dfc04717 	ldw	ra,284(sp)
   21178:	df004617 	ldw	fp,280(sp)
   2117c:	ddc04517 	ldw	r23,276(sp)
   21180:	dd804417 	ldw	r22,272(sp)
   21184:	dd404317 	ldw	r21,268(sp)
   21188:	dd004217 	ldw	r20,264(sp)
   2118c:	dcc04117 	ldw	r19,260(sp)
   21190:	dc804017 	ldw	r18,256(sp)
   21194:	dc403f17 	ldw	r17,252(sp)
   21198:	dc003e17 	ldw	r16,248(sp)
   2119c:	dec04804 	addi	sp,sp,288
   211a0:	f800283a 	ret
   211a4:	d9002c17 	ldw	r4,176(sp)
   211a8:	00250000 	call	25000 <__sinit>
   211ac:	003f0406 	br	20dc0 <__alt_data_end+0xfffe0dc0>
   211b0:	d8802d17 	ldw	r2,180(sp)
   211b4:	d9002d17 	ldw	r4,180(sp)
   211b8:	10800017 	ldw	r2,0(r2)
   211bc:	d8803115 	stw	r2,196(sp)
   211c0:	20800104 	addi	r2,r4,4
   211c4:	d9003117 	ldw	r4,196(sp)
   211c8:	203fa716 	blt	r4,zero,21068 <__alt_data_end+0xfffe1068>
   211cc:	d8802d15 	stw	r2,180(sp)
   211d0:	ac400007 	ldb	r17,0(r21)
   211d4:	003f4206 	br	20ee0 <__alt_data_end+0xfffe0ee0>
   211d8:	ac400007 	ldb	r17,0(r21)
   211dc:	aac00044 	addi	r11,r21,1
   211e0:	8a872826 	beq	r17,r10,22e84 <___vfprintf_internal_r+0x2128>
   211e4:	88bff404 	addi	r2,r17,-48
   211e8:	0009883a 	mov	r4,zero
   211ec:	30867d36 	bltu	r6,r2,22be4 <___vfprintf_internal_r+0x1e88>
   211f0:	5c400007 	ldb	r17,0(r11)
   211f4:	210002a4 	muli	r4,r4,10
   211f8:	5d400044 	addi	r21,r11,1
   211fc:	a817883a 	mov	r11,r21
   21200:	2089883a 	add	r4,r4,r2
   21204:	88bff404 	addi	r2,r17,-48
   21208:	30bff92e 	bgeu	r6,r2,211f0 <__alt_data_end+0xfffe11f0>
   2120c:	2005c916 	blt	r4,zero,22934 <___vfprintf_internal_r+0x1bd8>
   21210:	d9002915 	stw	r4,164(sp)
   21214:	003f3306 	br	20ee4 <__alt_data_end+0xfffe0ee4>
   21218:	94802014 	ori	r18,r18,128
   2121c:	ac400007 	ldb	r17,0(r21)
   21220:	003f2f06 	br	20ee0 <__alt_data_end+0xfffe0ee0>
   21224:	a809883a 	mov	r4,r21
   21228:	d8003115 	stw	zero,196(sp)
   2122c:	88bff404 	addi	r2,r17,-48
   21230:	0017883a 	mov	r11,zero
   21234:	24400007 	ldb	r17,0(r4)
   21238:	5ac002a4 	muli	r11,r11,10
   2123c:	ad400044 	addi	r21,r21,1
   21240:	a809883a 	mov	r4,r21
   21244:	12d7883a 	add	r11,r2,r11
   21248:	88bff404 	addi	r2,r17,-48
   2124c:	30bff92e 	bgeu	r6,r2,21234 <__alt_data_end+0xfffe1234>
   21250:	dac03115 	stw	r11,196(sp)
   21254:	003f2306 	br	20ee4 <__alt_data_end+0xfffe0ee4>
   21258:	18c03fcc 	andi	r3,r3,255
   2125c:	18072b1e 	bne	r3,zero,22f0c <___vfprintf_internal_r+0x21b0>
   21260:	94800414 	ori	r18,r18,16
   21264:	9080080c 	andi	r2,r18,32
   21268:	10037b26 	beq	r2,zero,22058 <___vfprintf_internal_r+0x12fc>
   2126c:	d9402d17 	ldw	r5,180(sp)
   21270:	28800117 	ldw	r2,4(r5)
   21274:	2cc00017 	ldw	r19,0(r5)
   21278:	29400204 	addi	r5,r5,8
   2127c:	d9402d15 	stw	r5,180(sp)
   21280:	102d883a 	mov	r22,r2
   21284:	10044b16 	blt	r2,zero,223b4 <___vfprintf_internal_r+0x1658>
   21288:	d9402917 	ldw	r5,164(sp)
   2128c:	df002783 	ldbu	fp,158(sp)
   21290:	2803bc16 	blt	r5,zero,22184 <___vfprintf_internal_r+0x1428>
   21294:	00ffdfc4 	movi	r3,-129
   21298:	9d84b03a 	or	r2,r19,r22
   2129c:	90e4703a 	and	r18,r18,r3
   212a0:	10017726 	beq	r2,zero,21880 <___vfprintf_internal_r+0xb24>
   212a4:	b0038326 	beq	r22,zero,220b4 <___vfprintf_internal_r+0x1358>
   212a8:	dc402a15 	stw	r17,168(sp)
   212ac:	dc001e04 	addi	r16,sp,120
   212b0:	b023883a 	mov	r17,r22
   212b4:	402d883a 	mov	r22,r8
   212b8:	9809883a 	mov	r4,r19
   212bc:	880b883a 	mov	r5,r17
   212c0:	01800284 	movi	r6,10
   212c4:	000f883a 	mov	r7,zero
   212c8:	002a7e80 	call	2a7e8 <__umoddi3>
   212cc:	10800c04 	addi	r2,r2,48
   212d0:	843fffc4 	addi	r16,r16,-1
   212d4:	9809883a 	mov	r4,r19
   212d8:	880b883a 	mov	r5,r17
   212dc:	80800005 	stb	r2,0(r16)
   212e0:	01800284 	movi	r6,10
   212e4:	000f883a 	mov	r7,zero
   212e8:	002a2700 	call	2a270 <__udivdi3>
   212ec:	1027883a 	mov	r19,r2
   212f0:	10c4b03a 	or	r2,r2,r3
   212f4:	1823883a 	mov	r17,r3
   212f8:	103fef1e 	bne	r2,zero,212b8 <__alt_data_end+0xfffe12b8>
   212fc:	d8c02817 	ldw	r3,160(sp)
   21300:	dc402a17 	ldw	r17,168(sp)
   21304:	b011883a 	mov	r8,r22
   21308:	1c07c83a 	sub	r3,r3,r16
   2130c:	d8c02e15 	stw	r3,184(sp)
   21310:	00005906 	br	21478 <___vfprintf_internal_r+0x71c>
   21314:	18c03fcc 	andi	r3,r3,255
   21318:	1806fa1e 	bne	r3,zero,22f04 <___vfprintf_internal_r+0x21a8>
   2131c:	9080020c 	andi	r2,r18,8
   21320:	10048a26 	beq	r2,zero,2254c <___vfprintf_internal_r+0x17f0>
   21324:	d8c02d17 	ldw	r3,180(sp)
   21328:	d9002d17 	ldw	r4,180(sp)
   2132c:	d9402d17 	ldw	r5,180(sp)
   21330:	18c00017 	ldw	r3,0(r3)
   21334:	21000117 	ldw	r4,4(r4)
   21338:	29400204 	addi	r5,r5,8
   2133c:	d8c03615 	stw	r3,216(sp)
   21340:	d9003815 	stw	r4,224(sp)
   21344:	d9402d15 	stw	r5,180(sp)
   21348:	d9003617 	ldw	r4,216(sp)
   2134c:	d9403817 	ldw	r5,224(sp)
   21350:	da003d15 	stw	r8,244(sp)
   21354:	04000044 	movi	r16,1
   21358:	00274000 	call	27400 <__fpclassifyd>
   2135c:	da003d17 	ldw	r8,244(sp)
   21360:	14041f1e 	bne	r2,r16,223e0 <___vfprintf_internal_r+0x1684>
   21364:	d9003617 	ldw	r4,216(sp)
   21368:	d9403817 	ldw	r5,224(sp)
   2136c:	000d883a 	mov	r6,zero
   21370:	000f883a 	mov	r7,zero
   21374:	002c0180 	call	2c018 <__ledf2>
   21378:	da003d17 	ldw	r8,244(sp)
   2137c:	1005be16 	blt	r2,zero,22a78 <___vfprintf_internal_r+0x1d1c>
   21380:	df002783 	ldbu	fp,158(sp)
   21384:	008011c4 	movi	r2,71
   21388:	1445330e 	bge	r2,r17,22858 <___vfprintf_internal_r+0x1afc>
   2138c:	040000f4 	movhi	r16,3
   21390:	84005704 	addi	r16,r16,348
   21394:	00c000c4 	movi	r3,3
   21398:	00bfdfc4 	movi	r2,-129
   2139c:	d8c02a15 	stw	r3,168(sp)
   213a0:	90a4703a 	and	r18,r18,r2
   213a4:	d8c02e15 	stw	r3,184(sp)
   213a8:	d8002915 	stw	zero,164(sp)
   213ac:	d8003215 	stw	zero,200(sp)
   213b0:	00003706 	br	21490 <___vfprintf_internal_r+0x734>
   213b4:	94800214 	ori	r18,r18,8
   213b8:	ac400007 	ldb	r17,0(r21)
   213bc:	003ec806 	br	20ee0 <__alt_data_end+0xfffe0ee0>
   213c0:	18c03fcc 	andi	r3,r3,255
   213c4:	1806db1e 	bne	r3,zero,22f34 <___vfprintf_internal_r+0x21d8>
   213c8:	94800414 	ori	r18,r18,16
   213cc:	9080080c 	andi	r2,r18,32
   213d0:	1002d826 	beq	r2,zero,21f34 <___vfprintf_internal_r+0x11d8>
   213d4:	d9402d17 	ldw	r5,180(sp)
   213d8:	d8c02917 	ldw	r3,164(sp)
   213dc:	d8002785 	stb	zero,158(sp)
   213e0:	28800204 	addi	r2,r5,8
   213e4:	2cc00017 	ldw	r19,0(r5)
   213e8:	2d800117 	ldw	r22,4(r5)
   213ec:	18048f16 	blt	r3,zero,2262c <___vfprintf_internal_r+0x18d0>
   213f0:	013fdfc4 	movi	r4,-129
   213f4:	9d86b03a 	or	r3,r19,r22
   213f8:	d8802d15 	stw	r2,180(sp)
   213fc:	9124703a 	and	r18,r18,r4
   21400:	1802d91e 	bne	r3,zero,21f68 <___vfprintf_internal_r+0x120c>
   21404:	d8c02917 	ldw	r3,164(sp)
   21408:	0039883a 	mov	fp,zero
   2140c:	1805c326 	beq	r3,zero,22b1c <___vfprintf_internal_r+0x1dc0>
   21410:	0027883a 	mov	r19,zero
   21414:	002d883a 	mov	r22,zero
   21418:	dc001e04 	addi	r16,sp,120
   2141c:	9806d0fa 	srli	r3,r19,3
   21420:	b008977a 	slli	r4,r22,29
   21424:	b02cd0fa 	srli	r22,r22,3
   21428:	9cc001cc 	andi	r19,r19,7
   2142c:	98800c04 	addi	r2,r19,48
   21430:	843fffc4 	addi	r16,r16,-1
   21434:	20e6b03a 	or	r19,r4,r3
   21438:	80800005 	stb	r2,0(r16)
   2143c:	9d86b03a 	or	r3,r19,r22
   21440:	183ff61e 	bne	r3,zero,2141c <__alt_data_end+0xfffe141c>
   21444:	90c0004c 	andi	r3,r18,1
   21448:	18013b26 	beq	r3,zero,21938 <___vfprintf_internal_r+0xbdc>
   2144c:	10803fcc 	andi	r2,r2,255
   21450:	1080201c 	xori	r2,r2,128
   21454:	10bfe004 	addi	r2,r2,-128
   21458:	00c00c04 	movi	r3,48
   2145c:	10c13626 	beq	r2,r3,21938 <___vfprintf_internal_r+0xbdc>
   21460:	80ffffc5 	stb	r3,-1(r16)
   21464:	d8c02817 	ldw	r3,160(sp)
   21468:	80bfffc4 	addi	r2,r16,-1
   2146c:	1021883a 	mov	r16,r2
   21470:	1887c83a 	sub	r3,r3,r2
   21474:	d8c02e15 	stw	r3,184(sp)
   21478:	d8802e17 	ldw	r2,184(sp)
   2147c:	d9002917 	ldw	r4,164(sp)
   21480:	1100010e 	bge	r2,r4,21488 <___vfprintf_internal_r+0x72c>
   21484:	2005883a 	mov	r2,r4
   21488:	d8802a15 	stw	r2,168(sp)
   2148c:	d8003215 	stw	zero,200(sp)
   21490:	e7003fcc 	andi	fp,fp,255
   21494:	e700201c 	xori	fp,fp,128
   21498:	e73fe004 	addi	fp,fp,-128
   2149c:	e0000326 	beq	fp,zero,214ac <___vfprintf_internal_r+0x750>
   214a0:	d8c02a17 	ldw	r3,168(sp)
   214a4:	18c00044 	addi	r3,r3,1
   214a8:	d8c02a15 	stw	r3,168(sp)
   214ac:	90c0008c 	andi	r3,r18,2
   214b0:	d8c02b15 	stw	r3,172(sp)
   214b4:	18000326 	beq	r3,zero,214c4 <___vfprintf_internal_r+0x768>
   214b8:	d8c02a17 	ldw	r3,168(sp)
   214bc:	18c00084 	addi	r3,r3,2
   214c0:	d8c02a15 	stw	r3,168(sp)
   214c4:	90c0210c 	andi	r3,r18,132
   214c8:	d8c03015 	stw	r3,192(sp)
   214cc:	1801a31e 	bne	r3,zero,21b5c <___vfprintf_internal_r+0xe00>
   214d0:	d9003117 	ldw	r4,196(sp)
   214d4:	d8c02a17 	ldw	r3,168(sp)
   214d8:	20e7c83a 	sub	r19,r4,r3
   214dc:	04c19f0e 	bge	zero,r19,21b5c <___vfprintf_internal_r+0xe00>
   214e0:	02400404 	movi	r9,16
   214e4:	d8c02017 	ldw	r3,128(sp)
   214e8:	d8801f17 	ldw	r2,124(sp)
   214ec:	4cc50d0e 	bge	r9,r19,22924 <___vfprintf_internal_r+0x1bc8>
   214f0:	014000f4 	movhi	r5,3
   214f4:	29406a84 	addi	r5,r5,426
   214f8:	dc403b15 	stw	r17,236(sp)
   214fc:	d9403515 	stw	r5,212(sp)
   21500:	9823883a 	mov	r17,r19
   21504:	482d883a 	mov	r22,r9
   21508:	9027883a 	mov	r19,r18
   2150c:	070001c4 	movi	fp,7
   21510:	8025883a 	mov	r18,r16
   21514:	dc002c17 	ldw	r16,176(sp)
   21518:	00000306 	br	21528 <___vfprintf_internal_r+0x7cc>
   2151c:	8c7ffc04 	addi	r17,r17,-16
   21520:	42000204 	addi	r8,r8,8
   21524:	b440130e 	bge	r22,r17,21574 <___vfprintf_internal_r+0x818>
   21528:	010000f4 	movhi	r4,3
   2152c:	18c00404 	addi	r3,r3,16
   21530:	10800044 	addi	r2,r2,1
   21534:	21006a84 	addi	r4,r4,426
   21538:	41000015 	stw	r4,0(r8)
   2153c:	45800115 	stw	r22,4(r8)
   21540:	d8c02015 	stw	r3,128(sp)
   21544:	d8801f15 	stw	r2,124(sp)
   21548:	e0bff40e 	bge	fp,r2,2151c <__alt_data_end+0xfffe151c>
   2154c:	d9801e04 	addi	r6,sp,120
   21550:	b80b883a 	mov	r5,r23
   21554:	8009883a 	mov	r4,r16
   21558:	00278740 	call	27874 <__sprint_r>
   2155c:	103f011e 	bne	r2,zero,21164 <__alt_data_end+0xfffe1164>
   21560:	8c7ffc04 	addi	r17,r17,-16
   21564:	d8c02017 	ldw	r3,128(sp)
   21568:	d8801f17 	ldw	r2,124(sp)
   2156c:	da000404 	addi	r8,sp,16
   21570:	b47fed16 	blt	r22,r17,21528 <__alt_data_end+0xfffe1528>
   21574:	9021883a 	mov	r16,r18
   21578:	9825883a 	mov	r18,r19
   2157c:	8827883a 	mov	r19,r17
   21580:	dc403b17 	ldw	r17,236(sp)
   21584:	d9403517 	ldw	r5,212(sp)
   21588:	98c7883a 	add	r3,r19,r3
   2158c:	10800044 	addi	r2,r2,1
   21590:	41400015 	stw	r5,0(r8)
   21594:	44c00115 	stw	r19,4(r8)
   21598:	d8c02015 	stw	r3,128(sp)
   2159c:	d8801f15 	stw	r2,124(sp)
   215a0:	010001c4 	movi	r4,7
   215a4:	2082a316 	blt	r4,r2,22034 <___vfprintf_internal_r+0x12d8>
   215a8:	df002787 	ldb	fp,158(sp)
   215ac:	42000204 	addi	r8,r8,8
   215b0:	e0000c26 	beq	fp,zero,215e4 <___vfprintf_internal_r+0x888>
   215b4:	d8801f17 	ldw	r2,124(sp)
   215b8:	d9002784 	addi	r4,sp,158
   215bc:	18c00044 	addi	r3,r3,1
   215c0:	10800044 	addi	r2,r2,1
   215c4:	41000015 	stw	r4,0(r8)
   215c8:	01000044 	movi	r4,1
   215cc:	41000115 	stw	r4,4(r8)
   215d0:	d8c02015 	stw	r3,128(sp)
   215d4:	d8801f15 	stw	r2,124(sp)
   215d8:	010001c4 	movi	r4,7
   215dc:	20823c16 	blt	r4,r2,21ed0 <___vfprintf_internal_r+0x1174>
   215e0:	42000204 	addi	r8,r8,8
   215e4:	d8802b17 	ldw	r2,172(sp)
   215e8:	10000c26 	beq	r2,zero,2161c <___vfprintf_internal_r+0x8c0>
   215ec:	d8801f17 	ldw	r2,124(sp)
   215f0:	d9002704 	addi	r4,sp,156
   215f4:	18c00084 	addi	r3,r3,2
   215f8:	10800044 	addi	r2,r2,1
   215fc:	41000015 	stw	r4,0(r8)
   21600:	01000084 	movi	r4,2
   21604:	41000115 	stw	r4,4(r8)
   21608:	d8c02015 	stw	r3,128(sp)
   2160c:	d8801f15 	stw	r2,124(sp)
   21610:	010001c4 	movi	r4,7
   21614:	20823616 	blt	r4,r2,21ef0 <___vfprintf_internal_r+0x1194>
   21618:	42000204 	addi	r8,r8,8
   2161c:	d9003017 	ldw	r4,192(sp)
   21620:	00802004 	movi	r2,128
   21624:	20819926 	beq	r4,r2,21c8c <___vfprintf_internal_r+0xf30>
   21628:	d9402917 	ldw	r5,164(sp)
   2162c:	d8802e17 	ldw	r2,184(sp)
   21630:	28adc83a 	sub	r22,r5,r2
   21634:	0580310e 	bge	zero,r22,216fc <___vfprintf_internal_r+0x9a0>
   21638:	07000404 	movi	fp,16
   2163c:	d8801f17 	ldw	r2,124(sp)
   21640:	e584140e 	bge	fp,r22,22694 <___vfprintf_internal_r+0x1938>
   21644:	014000f4 	movhi	r5,3
   21648:	29406684 	addi	r5,r5,410
   2164c:	dc402915 	stw	r17,164(sp)
   21650:	d9402b15 	stw	r5,172(sp)
   21654:	b023883a 	mov	r17,r22
   21658:	04c001c4 	movi	r19,7
   2165c:	a82d883a 	mov	r22,r21
   21660:	902b883a 	mov	r21,r18
   21664:	8025883a 	mov	r18,r16
   21668:	dc002c17 	ldw	r16,176(sp)
   2166c:	00000306 	br	2167c <___vfprintf_internal_r+0x920>
   21670:	8c7ffc04 	addi	r17,r17,-16
   21674:	42000204 	addi	r8,r8,8
   21678:	e440110e 	bge	fp,r17,216c0 <___vfprintf_internal_r+0x964>
   2167c:	18c00404 	addi	r3,r3,16
   21680:	10800044 	addi	r2,r2,1
   21684:	45000015 	stw	r20,0(r8)
   21688:	47000115 	stw	fp,4(r8)
   2168c:	d8c02015 	stw	r3,128(sp)
   21690:	d8801f15 	stw	r2,124(sp)
   21694:	98bff60e 	bge	r19,r2,21670 <__alt_data_end+0xfffe1670>
   21698:	d9801e04 	addi	r6,sp,120
   2169c:	b80b883a 	mov	r5,r23
   216a0:	8009883a 	mov	r4,r16
   216a4:	00278740 	call	27874 <__sprint_r>
   216a8:	103eae1e 	bne	r2,zero,21164 <__alt_data_end+0xfffe1164>
   216ac:	8c7ffc04 	addi	r17,r17,-16
   216b0:	d8c02017 	ldw	r3,128(sp)
   216b4:	d8801f17 	ldw	r2,124(sp)
   216b8:	da000404 	addi	r8,sp,16
   216bc:	e47fef16 	blt	fp,r17,2167c <__alt_data_end+0xfffe167c>
   216c0:	9021883a 	mov	r16,r18
   216c4:	a825883a 	mov	r18,r21
   216c8:	b02b883a 	mov	r21,r22
   216cc:	882d883a 	mov	r22,r17
   216d0:	dc402917 	ldw	r17,164(sp)
   216d4:	d9002b17 	ldw	r4,172(sp)
   216d8:	1d87883a 	add	r3,r3,r22
   216dc:	10800044 	addi	r2,r2,1
   216e0:	41000015 	stw	r4,0(r8)
   216e4:	45800115 	stw	r22,4(r8)
   216e8:	d8c02015 	stw	r3,128(sp)
   216ec:	d8801f15 	stw	r2,124(sp)
   216f0:	010001c4 	movi	r4,7
   216f4:	2081ee16 	blt	r4,r2,21eb0 <___vfprintf_internal_r+0x1154>
   216f8:	42000204 	addi	r8,r8,8
   216fc:	9080400c 	andi	r2,r18,256
   21700:	1001181e 	bne	r2,zero,21b64 <___vfprintf_internal_r+0xe08>
   21704:	d9402e17 	ldw	r5,184(sp)
   21708:	d8801f17 	ldw	r2,124(sp)
   2170c:	44000015 	stw	r16,0(r8)
   21710:	1947883a 	add	r3,r3,r5
   21714:	10800044 	addi	r2,r2,1
   21718:	41400115 	stw	r5,4(r8)
   2171c:	d8c02015 	stw	r3,128(sp)
   21720:	d8801f15 	stw	r2,124(sp)
   21724:	010001c4 	movi	r4,7
   21728:	2081d316 	blt	r4,r2,21e78 <___vfprintf_internal_r+0x111c>
   2172c:	42000204 	addi	r8,r8,8
   21730:	9480010c 	andi	r18,r18,4
   21734:	90003226 	beq	r18,zero,21800 <___vfprintf_internal_r+0xaa4>
   21738:	d9403117 	ldw	r5,196(sp)
   2173c:	d8802a17 	ldw	r2,168(sp)
   21740:	28a1c83a 	sub	r16,r5,r2
   21744:	04002e0e 	bge	zero,r16,21800 <___vfprintf_internal_r+0xaa4>
   21748:	04400404 	movi	r17,16
   2174c:	d8801f17 	ldw	r2,124(sp)
   21750:	8c04a20e 	bge	r17,r16,229dc <___vfprintf_internal_r+0x1c80>
   21754:	014000f4 	movhi	r5,3
   21758:	29406a84 	addi	r5,r5,426
   2175c:	d9403515 	stw	r5,212(sp)
   21760:	048001c4 	movi	r18,7
   21764:	dcc02c17 	ldw	r19,176(sp)
   21768:	00000306 	br	21778 <___vfprintf_internal_r+0xa1c>
   2176c:	843ffc04 	addi	r16,r16,-16
   21770:	42000204 	addi	r8,r8,8
   21774:	8c00130e 	bge	r17,r16,217c4 <___vfprintf_internal_r+0xa68>
   21778:	010000f4 	movhi	r4,3
   2177c:	18c00404 	addi	r3,r3,16
   21780:	10800044 	addi	r2,r2,1
   21784:	21006a84 	addi	r4,r4,426
   21788:	41000015 	stw	r4,0(r8)
   2178c:	44400115 	stw	r17,4(r8)
   21790:	d8c02015 	stw	r3,128(sp)
   21794:	d8801f15 	stw	r2,124(sp)
   21798:	90bff40e 	bge	r18,r2,2176c <__alt_data_end+0xfffe176c>
   2179c:	d9801e04 	addi	r6,sp,120
   217a0:	b80b883a 	mov	r5,r23
   217a4:	9809883a 	mov	r4,r19
   217a8:	00278740 	call	27874 <__sprint_r>
   217ac:	103e6d1e 	bne	r2,zero,21164 <__alt_data_end+0xfffe1164>
   217b0:	843ffc04 	addi	r16,r16,-16
   217b4:	d8c02017 	ldw	r3,128(sp)
   217b8:	d8801f17 	ldw	r2,124(sp)
   217bc:	da000404 	addi	r8,sp,16
   217c0:	8c3fed16 	blt	r17,r16,21778 <__alt_data_end+0xfffe1778>
   217c4:	d9403517 	ldw	r5,212(sp)
   217c8:	1c07883a 	add	r3,r3,r16
   217cc:	10800044 	addi	r2,r2,1
   217d0:	41400015 	stw	r5,0(r8)
   217d4:	44000115 	stw	r16,4(r8)
   217d8:	d8c02015 	stw	r3,128(sp)
   217dc:	d8801f15 	stw	r2,124(sp)
   217e0:	010001c4 	movi	r4,7
   217e4:	2080060e 	bge	r4,r2,21800 <___vfprintf_internal_r+0xaa4>
   217e8:	d9002c17 	ldw	r4,176(sp)
   217ec:	d9801e04 	addi	r6,sp,120
   217f0:	b80b883a 	mov	r5,r23
   217f4:	00278740 	call	27874 <__sprint_r>
   217f8:	103e5a1e 	bne	r2,zero,21164 <__alt_data_end+0xfffe1164>
   217fc:	d8c02017 	ldw	r3,128(sp)
   21800:	d8803117 	ldw	r2,196(sp)
   21804:	d9002a17 	ldw	r4,168(sp)
   21808:	1100010e 	bge	r2,r4,21810 <___vfprintf_internal_r+0xab4>
   2180c:	2005883a 	mov	r2,r4
   21810:	d9402f17 	ldw	r5,188(sp)
   21814:	288b883a 	add	r5,r5,r2
   21818:	d9402f15 	stw	r5,188(sp)
   2181c:	18019e1e 	bne	r3,zero,21e98 <___vfprintf_internal_r+0x113c>
   21820:	a8800007 	ldb	r2,0(r21)
   21824:	d8001f15 	stw	zero,124(sp)
   21828:	da000404 	addi	r8,sp,16
   2182c:	103d851e 	bne	r2,zero,20e44 <__alt_data_end+0xfffe0e44>
   21830:	a821883a 	mov	r16,r21
   21834:	003d9b06 	br	20ea4 <__alt_data_end+0xfffe0ea4>
   21838:	18c03fcc 	andi	r3,r3,255
   2183c:	1805c11e 	bne	r3,zero,22f44 <___vfprintf_internal_r+0x21e8>
   21840:	94800414 	ori	r18,r18,16
   21844:	9080080c 	andi	r2,r18,32
   21848:	10020c26 	beq	r2,zero,2207c <___vfprintf_internal_r+0x1320>
   2184c:	d8802d17 	ldw	r2,180(sp)
   21850:	d9002917 	ldw	r4,164(sp)
   21854:	d8002785 	stb	zero,158(sp)
   21858:	10c00204 	addi	r3,r2,8
   2185c:	14c00017 	ldw	r19,0(r2)
   21860:	15800117 	ldw	r22,4(r2)
   21864:	20040f16 	blt	r4,zero,228a4 <___vfprintf_internal_r+0x1b48>
   21868:	013fdfc4 	movi	r4,-129
   2186c:	9d84b03a 	or	r2,r19,r22
   21870:	d8c02d15 	stw	r3,180(sp)
   21874:	9124703a 	and	r18,r18,r4
   21878:	0039883a 	mov	fp,zero
   2187c:	103e891e 	bne	r2,zero,212a4 <__alt_data_end+0xfffe12a4>
   21880:	d9002917 	ldw	r4,164(sp)
   21884:	2002c11e 	bne	r4,zero,2238c <___vfprintf_internal_r+0x1630>
   21888:	d8002915 	stw	zero,164(sp)
   2188c:	d8002e15 	stw	zero,184(sp)
   21890:	dc001e04 	addi	r16,sp,120
   21894:	003ef806 	br	21478 <__alt_data_end+0xfffe1478>
   21898:	18c03fcc 	andi	r3,r3,255
   2189c:	18059d1e 	bne	r3,zero,22f14 <___vfprintf_internal_r+0x21b8>
   218a0:	014000f4 	movhi	r5,3
   218a4:	29405a04 	addi	r5,r5,360
   218a8:	d9403915 	stw	r5,228(sp)
   218ac:	9080080c 	andi	r2,r18,32
   218b0:	10005226 	beq	r2,zero,219fc <___vfprintf_internal_r+0xca0>
   218b4:	d8802d17 	ldw	r2,180(sp)
   218b8:	14c00017 	ldw	r19,0(r2)
   218bc:	15800117 	ldw	r22,4(r2)
   218c0:	10800204 	addi	r2,r2,8
   218c4:	d8802d15 	stw	r2,180(sp)
   218c8:	9080004c 	andi	r2,r18,1
   218cc:	10019026 	beq	r2,zero,21f10 <___vfprintf_internal_r+0x11b4>
   218d0:	9d84b03a 	or	r2,r19,r22
   218d4:	10036926 	beq	r2,zero,2267c <___vfprintf_internal_r+0x1920>
   218d8:	d8c02917 	ldw	r3,164(sp)
   218dc:	00800c04 	movi	r2,48
   218e0:	d8802705 	stb	r2,156(sp)
   218e4:	dc402745 	stb	r17,157(sp)
   218e8:	d8002785 	stb	zero,158(sp)
   218ec:	90800094 	ori	r2,r18,2
   218f0:	18045d16 	blt	r3,zero,22a68 <___vfprintf_internal_r+0x1d0c>
   218f4:	00bfdfc4 	movi	r2,-129
   218f8:	90a4703a 	and	r18,r18,r2
   218fc:	94800094 	ori	r18,r18,2
   21900:	0039883a 	mov	fp,zero
   21904:	d9003917 	ldw	r4,228(sp)
   21908:	dc001e04 	addi	r16,sp,120
   2190c:	988003cc 	andi	r2,r19,15
   21910:	b006973a 	slli	r3,r22,28
   21914:	2085883a 	add	r2,r4,r2
   21918:	9826d13a 	srli	r19,r19,4
   2191c:	10800003 	ldbu	r2,0(r2)
   21920:	b02cd13a 	srli	r22,r22,4
   21924:	843fffc4 	addi	r16,r16,-1
   21928:	1ce6b03a 	or	r19,r3,r19
   2192c:	80800005 	stb	r2,0(r16)
   21930:	9d84b03a 	or	r2,r19,r22
   21934:	103ff51e 	bne	r2,zero,2190c <__alt_data_end+0xfffe190c>
   21938:	d8c02817 	ldw	r3,160(sp)
   2193c:	1c07c83a 	sub	r3,r3,r16
   21940:	d8c02e15 	stw	r3,184(sp)
   21944:	003ecc06 	br	21478 <__alt_data_end+0xfffe1478>
   21948:	18c03fcc 	andi	r3,r3,255
   2194c:	183e9f26 	beq	r3,zero,213cc <__alt_data_end+0xfffe13cc>
   21950:	d9c02785 	stb	r7,158(sp)
   21954:	003e9d06 	br	213cc <__alt_data_end+0xfffe13cc>
   21958:	00c00044 	movi	r3,1
   2195c:	01c00ac4 	movi	r7,43
   21960:	ac400007 	ldb	r17,0(r21)
   21964:	003d5e06 	br	20ee0 <__alt_data_end+0xfffe0ee0>
   21968:	94800814 	ori	r18,r18,32
   2196c:	ac400007 	ldb	r17,0(r21)
   21970:	003d5b06 	br	20ee0 <__alt_data_end+0xfffe0ee0>
   21974:	d8c02d17 	ldw	r3,180(sp)
   21978:	d8002785 	stb	zero,158(sp)
   2197c:	1c000017 	ldw	r16,0(r3)
   21980:	1cc00104 	addi	r19,r3,4
   21984:	80041926 	beq	r16,zero,229ec <___vfprintf_internal_r+0x1c90>
   21988:	d9002917 	ldw	r4,164(sp)
   2198c:	2003d016 	blt	r4,zero,228d0 <___vfprintf_internal_r+0x1b74>
   21990:	200d883a 	mov	r6,r4
   21994:	000b883a 	mov	r5,zero
   21998:	8009883a 	mov	r4,r16
   2199c:	da003d15 	stw	r8,244(sp)
   219a0:	00260b00 	call	260b0 <memchr>
   219a4:	da003d17 	ldw	r8,244(sp)
   219a8:	10045426 	beq	r2,zero,22afc <___vfprintf_internal_r+0x1da0>
   219ac:	1405c83a 	sub	r2,r2,r16
   219b0:	d8802e15 	stw	r2,184(sp)
   219b4:	1003cc16 	blt	r2,zero,228e8 <___vfprintf_internal_r+0x1b8c>
   219b8:	df002783 	ldbu	fp,158(sp)
   219bc:	d8802a15 	stw	r2,168(sp)
   219c0:	dcc02d15 	stw	r19,180(sp)
   219c4:	d8002915 	stw	zero,164(sp)
   219c8:	d8003215 	stw	zero,200(sp)
   219cc:	003eb006 	br	21490 <__alt_data_end+0xfffe1490>
   219d0:	18c03fcc 	andi	r3,r3,255
   219d4:	183f9b26 	beq	r3,zero,21844 <__alt_data_end+0xfffe1844>
   219d8:	d9c02785 	stb	r7,158(sp)
   219dc:	003f9906 	br	21844 <__alt_data_end+0xfffe1844>
   219e0:	18c03fcc 	andi	r3,r3,255
   219e4:	1805551e 	bne	r3,zero,22f3c <___vfprintf_internal_r+0x21e0>
   219e8:	014000f4 	movhi	r5,3
   219ec:	29405f04 	addi	r5,r5,380
   219f0:	d9403915 	stw	r5,228(sp)
   219f4:	9080080c 	andi	r2,r18,32
   219f8:	103fae1e 	bne	r2,zero,218b4 <__alt_data_end+0xfffe18b4>
   219fc:	9080040c 	andi	r2,r18,16
   21a00:	1002de26 	beq	r2,zero,2257c <___vfprintf_internal_r+0x1820>
   21a04:	d8c02d17 	ldw	r3,180(sp)
   21a08:	002d883a 	mov	r22,zero
   21a0c:	1cc00017 	ldw	r19,0(r3)
   21a10:	18c00104 	addi	r3,r3,4
   21a14:	d8c02d15 	stw	r3,180(sp)
   21a18:	003fab06 	br	218c8 <__alt_data_end+0xfffe18c8>
   21a1c:	38803fcc 	andi	r2,r7,255
   21a20:	1080201c 	xori	r2,r2,128
   21a24:	10bfe004 	addi	r2,r2,-128
   21a28:	1002d21e 	bne	r2,zero,22574 <___vfprintf_internal_r+0x1818>
   21a2c:	00c00044 	movi	r3,1
   21a30:	01c00804 	movi	r7,32
   21a34:	ac400007 	ldb	r17,0(r21)
   21a38:	003d2906 	br	20ee0 <__alt_data_end+0xfffe0ee0>
   21a3c:	94800054 	ori	r18,r18,1
   21a40:	ac400007 	ldb	r17,0(r21)
   21a44:	003d2606 	br	20ee0 <__alt_data_end+0xfffe0ee0>
   21a48:	18c03fcc 	andi	r3,r3,255
   21a4c:	183e0526 	beq	r3,zero,21264 <__alt_data_end+0xfffe1264>
   21a50:	d9c02785 	stb	r7,158(sp)
   21a54:	003e0306 	br	21264 <__alt_data_end+0xfffe1264>
   21a58:	94801014 	ori	r18,r18,64
   21a5c:	ac400007 	ldb	r17,0(r21)
   21a60:	003d1f06 	br	20ee0 <__alt_data_end+0xfffe0ee0>
   21a64:	ac400007 	ldb	r17,0(r21)
   21a68:	8a438726 	beq	r17,r9,22888 <___vfprintf_internal_r+0x1b2c>
   21a6c:	94800414 	ori	r18,r18,16
   21a70:	003d1b06 	br	20ee0 <__alt_data_end+0xfffe0ee0>
   21a74:	18c03fcc 	andi	r3,r3,255
   21a78:	1805341e 	bne	r3,zero,22f4c <___vfprintf_internal_r+0x21f0>
   21a7c:	9080080c 	andi	r2,r18,32
   21a80:	1002cd26 	beq	r2,zero,225b8 <___vfprintf_internal_r+0x185c>
   21a84:	d9402d17 	ldw	r5,180(sp)
   21a88:	d9002f17 	ldw	r4,188(sp)
   21a8c:	28800017 	ldw	r2,0(r5)
   21a90:	2007d7fa 	srai	r3,r4,31
   21a94:	29400104 	addi	r5,r5,4
   21a98:	d9402d15 	stw	r5,180(sp)
   21a9c:	11000015 	stw	r4,0(r2)
   21aa0:	10c00115 	stw	r3,4(r2)
   21aa4:	003ce506 	br	20e3c <__alt_data_end+0xfffe0e3c>
   21aa8:	d8c02d17 	ldw	r3,180(sp)
   21aac:	d9002d17 	ldw	r4,180(sp)
   21ab0:	d8002785 	stb	zero,158(sp)
   21ab4:	18800017 	ldw	r2,0(r3)
   21ab8:	21000104 	addi	r4,r4,4
   21abc:	00c00044 	movi	r3,1
   21ac0:	d8c02a15 	stw	r3,168(sp)
   21ac4:	d8801405 	stb	r2,80(sp)
   21ac8:	d9002d15 	stw	r4,180(sp)
   21acc:	d8c02e15 	stw	r3,184(sp)
   21ad0:	d8002915 	stw	zero,164(sp)
   21ad4:	d8003215 	stw	zero,200(sp)
   21ad8:	dc001404 	addi	r16,sp,80
   21adc:	0039883a 	mov	fp,zero
   21ae0:	003e7206 	br	214ac <__alt_data_end+0xfffe14ac>
   21ae4:	010000f4 	movhi	r4,3
   21ae8:	21005f04 	addi	r4,r4,380
   21aec:	0039883a 	mov	fp,zero
   21af0:	d9003915 	stw	r4,228(sp)
   21af4:	04401e04 	movi	r17,120
   21af8:	003f8206 	br	21904 <__alt_data_end+0xfffe1904>
   21afc:	18c03fcc 	andi	r3,r3,255
   21b00:	1805061e 	bne	r3,zero,22f1c <___vfprintf_internal_r+0x21c0>
   21b04:	883d9126 	beq	r17,zero,2114c <__alt_data_end+0xfffe114c>
   21b08:	00c00044 	movi	r3,1
   21b0c:	d8c02a15 	stw	r3,168(sp)
   21b10:	dc401405 	stb	r17,80(sp)
   21b14:	d8002785 	stb	zero,158(sp)
   21b18:	003fec06 	br	21acc <__alt_data_end+0xfffe1acc>
   21b1c:	014000f4 	movhi	r5,3
   21b20:	29405f04 	addi	r5,r5,380
   21b24:	d9403915 	stw	r5,228(sp)
   21b28:	d8c02d15 	stw	r3,180(sp)
   21b2c:	1025883a 	mov	r18,r2
   21b30:	04401e04 	movi	r17,120
   21b34:	9d84b03a 	or	r2,r19,r22
   21b38:	1000fc1e 	bne	r2,zero,21f2c <___vfprintf_internal_r+0x11d0>
   21b3c:	0039883a 	mov	fp,zero
   21b40:	00800084 	movi	r2,2
   21b44:	10803fcc 	andi	r2,r2,255
   21b48:	00c00044 	movi	r3,1
   21b4c:	10c20f26 	beq	r2,r3,2238c <___vfprintf_internal_r+0x1630>
   21b50:	00c00084 	movi	r3,2
   21b54:	10fd6326 	beq	r2,r3,210e4 <__alt_data_end+0xfffe10e4>
   21b58:	003e2d06 	br	21410 <__alt_data_end+0xfffe1410>
   21b5c:	d8c02017 	ldw	r3,128(sp)
   21b60:	003e9306 	br	215b0 <__alt_data_end+0xfffe15b0>
   21b64:	00801944 	movi	r2,101
   21b68:	14407e0e 	bge	r2,r17,21d64 <___vfprintf_internal_r+0x1008>
   21b6c:	d9003617 	ldw	r4,216(sp)
   21b70:	d9403817 	ldw	r5,224(sp)
   21b74:	000d883a 	mov	r6,zero
   21b78:	000f883a 	mov	r7,zero
   21b7c:	d8c03c15 	stw	r3,240(sp)
   21b80:	da003d15 	stw	r8,244(sp)
   21b84:	002beb40 	call	2beb4 <__eqdf2>
   21b88:	d8c03c17 	ldw	r3,240(sp)
   21b8c:	da003d17 	ldw	r8,244(sp)
   21b90:	1000f71e 	bne	r2,zero,21f70 <___vfprintf_internal_r+0x1214>
   21b94:	d8801f17 	ldw	r2,124(sp)
   21b98:	010000f4 	movhi	r4,3
   21b9c:	21006604 	addi	r4,r4,408
   21ba0:	18c00044 	addi	r3,r3,1
   21ba4:	10800044 	addi	r2,r2,1
   21ba8:	41000015 	stw	r4,0(r8)
   21bac:	01000044 	movi	r4,1
   21bb0:	41000115 	stw	r4,4(r8)
   21bb4:	d8c02015 	stw	r3,128(sp)
   21bb8:	d8801f15 	stw	r2,124(sp)
   21bbc:	010001c4 	movi	r4,7
   21bc0:	2082b816 	blt	r4,r2,226a4 <___vfprintf_internal_r+0x1948>
   21bc4:	42000204 	addi	r8,r8,8
   21bc8:	d8802617 	ldw	r2,152(sp)
   21bcc:	d9403317 	ldw	r5,204(sp)
   21bd0:	11400216 	blt	r2,r5,21bdc <___vfprintf_internal_r+0xe80>
   21bd4:	9080004c 	andi	r2,r18,1
   21bd8:	103ed526 	beq	r2,zero,21730 <__alt_data_end+0xfffe1730>
   21bdc:	d8803717 	ldw	r2,220(sp)
   21be0:	d9003417 	ldw	r4,208(sp)
   21be4:	d9403717 	ldw	r5,220(sp)
   21be8:	1887883a 	add	r3,r3,r2
   21bec:	d8801f17 	ldw	r2,124(sp)
   21bf0:	41000015 	stw	r4,0(r8)
   21bf4:	41400115 	stw	r5,4(r8)
   21bf8:	10800044 	addi	r2,r2,1
   21bfc:	d8c02015 	stw	r3,128(sp)
   21c00:	d8801f15 	stw	r2,124(sp)
   21c04:	010001c4 	movi	r4,7
   21c08:	20832916 	blt	r4,r2,228b0 <___vfprintf_internal_r+0x1b54>
   21c0c:	42000204 	addi	r8,r8,8
   21c10:	d8803317 	ldw	r2,204(sp)
   21c14:	143fffc4 	addi	r16,r2,-1
   21c18:	043ec50e 	bge	zero,r16,21730 <__alt_data_end+0xfffe1730>
   21c1c:	04400404 	movi	r17,16
   21c20:	d8801f17 	ldw	r2,124(sp)
   21c24:	8c00880e 	bge	r17,r16,21e48 <___vfprintf_internal_r+0x10ec>
   21c28:	014000f4 	movhi	r5,3
   21c2c:	29406684 	addi	r5,r5,410
   21c30:	d9402b15 	stw	r5,172(sp)
   21c34:	058001c4 	movi	r22,7
   21c38:	dcc02c17 	ldw	r19,176(sp)
   21c3c:	00000306 	br	21c4c <___vfprintf_internal_r+0xef0>
   21c40:	42000204 	addi	r8,r8,8
   21c44:	843ffc04 	addi	r16,r16,-16
   21c48:	8c00820e 	bge	r17,r16,21e54 <___vfprintf_internal_r+0x10f8>
   21c4c:	18c00404 	addi	r3,r3,16
   21c50:	10800044 	addi	r2,r2,1
   21c54:	45000015 	stw	r20,0(r8)
   21c58:	44400115 	stw	r17,4(r8)
   21c5c:	d8c02015 	stw	r3,128(sp)
   21c60:	d8801f15 	stw	r2,124(sp)
   21c64:	b0bff60e 	bge	r22,r2,21c40 <__alt_data_end+0xfffe1c40>
   21c68:	d9801e04 	addi	r6,sp,120
   21c6c:	b80b883a 	mov	r5,r23
   21c70:	9809883a 	mov	r4,r19
   21c74:	00278740 	call	27874 <__sprint_r>
   21c78:	103d3a1e 	bne	r2,zero,21164 <__alt_data_end+0xfffe1164>
   21c7c:	d8c02017 	ldw	r3,128(sp)
   21c80:	d8801f17 	ldw	r2,124(sp)
   21c84:	da000404 	addi	r8,sp,16
   21c88:	003fee06 	br	21c44 <__alt_data_end+0xfffe1c44>
   21c8c:	d9403117 	ldw	r5,196(sp)
   21c90:	d8802a17 	ldw	r2,168(sp)
   21c94:	28adc83a 	sub	r22,r5,r2
   21c98:	05be630e 	bge	zero,r22,21628 <__alt_data_end+0xfffe1628>
   21c9c:	07000404 	movi	fp,16
   21ca0:	d8801f17 	ldw	r2,124(sp)
   21ca4:	e5838f0e 	bge	fp,r22,22ae4 <___vfprintf_internal_r+0x1d88>
   21ca8:	014000f4 	movhi	r5,3
   21cac:	29406684 	addi	r5,r5,410
   21cb0:	dc403015 	stw	r17,192(sp)
   21cb4:	d9402b15 	stw	r5,172(sp)
   21cb8:	b023883a 	mov	r17,r22
   21cbc:	04c001c4 	movi	r19,7
   21cc0:	a82d883a 	mov	r22,r21
   21cc4:	902b883a 	mov	r21,r18
   21cc8:	8025883a 	mov	r18,r16
   21ccc:	dc002c17 	ldw	r16,176(sp)
   21cd0:	00000306 	br	21ce0 <___vfprintf_internal_r+0xf84>
   21cd4:	8c7ffc04 	addi	r17,r17,-16
   21cd8:	42000204 	addi	r8,r8,8
   21cdc:	e440110e 	bge	fp,r17,21d24 <___vfprintf_internal_r+0xfc8>
   21ce0:	18c00404 	addi	r3,r3,16
   21ce4:	10800044 	addi	r2,r2,1
   21ce8:	45000015 	stw	r20,0(r8)
   21cec:	47000115 	stw	fp,4(r8)
   21cf0:	d8c02015 	stw	r3,128(sp)
   21cf4:	d8801f15 	stw	r2,124(sp)
   21cf8:	98bff60e 	bge	r19,r2,21cd4 <__alt_data_end+0xfffe1cd4>
   21cfc:	d9801e04 	addi	r6,sp,120
   21d00:	b80b883a 	mov	r5,r23
   21d04:	8009883a 	mov	r4,r16
   21d08:	00278740 	call	27874 <__sprint_r>
   21d0c:	103d151e 	bne	r2,zero,21164 <__alt_data_end+0xfffe1164>
   21d10:	8c7ffc04 	addi	r17,r17,-16
   21d14:	d8c02017 	ldw	r3,128(sp)
   21d18:	d8801f17 	ldw	r2,124(sp)
   21d1c:	da000404 	addi	r8,sp,16
   21d20:	e47fef16 	blt	fp,r17,21ce0 <__alt_data_end+0xfffe1ce0>
   21d24:	9021883a 	mov	r16,r18
   21d28:	a825883a 	mov	r18,r21
   21d2c:	b02b883a 	mov	r21,r22
   21d30:	882d883a 	mov	r22,r17
   21d34:	dc403017 	ldw	r17,192(sp)
   21d38:	d9002b17 	ldw	r4,172(sp)
   21d3c:	1d87883a 	add	r3,r3,r22
   21d40:	10800044 	addi	r2,r2,1
   21d44:	41000015 	stw	r4,0(r8)
   21d48:	45800115 	stw	r22,4(r8)
   21d4c:	d8c02015 	stw	r3,128(sp)
   21d50:	d8801f15 	stw	r2,124(sp)
   21d54:	010001c4 	movi	r4,7
   21d58:	20818e16 	blt	r4,r2,22394 <___vfprintf_internal_r+0x1638>
   21d5c:	42000204 	addi	r8,r8,8
   21d60:	003e3106 	br	21628 <__alt_data_end+0xfffe1628>
   21d64:	d9403317 	ldw	r5,204(sp)
   21d68:	00800044 	movi	r2,1
   21d6c:	18c00044 	addi	r3,r3,1
   21d70:	1141530e 	bge	r2,r5,222c0 <___vfprintf_internal_r+0x1564>
   21d74:	dc401f17 	ldw	r17,124(sp)
   21d78:	00800044 	movi	r2,1
   21d7c:	40800115 	stw	r2,4(r8)
   21d80:	8c400044 	addi	r17,r17,1
   21d84:	44000015 	stw	r16,0(r8)
   21d88:	d8c02015 	stw	r3,128(sp)
   21d8c:	dc401f15 	stw	r17,124(sp)
   21d90:	008001c4 	movi	r2,7
   21d94:	14416b16 	blt	r2,r17,22344 <___vfprintf_internal_r+0x15e8>
   21d98:	42000204 	addi	r8,r8,8
   21d9c:	d8803717 	ldw	r2,220(sp)
   21da0:	d9003417 	ldw	r4,208(sp)
   21da4:	8c400044 	addi	r17,r17,1
   21da8:	10c7883a 	add	r3,r2,r3
   21dac:	40800115 	stw	r2,4(r8)
   21db0:	41000015 	stw	r4,0(r8)
   21db4:	d8c02015 	stw	r3,128(sp)
   21db8:	dc401f15 	stw	r17,124(sp)
   21dbc:	008001c4 	movi	r2,7
   21dc0:	14416916 	blt	r2,r17,22368 <___vfprintf_internal_r+0x160c>
   21dc4:	45800204 	addi	r22,r8,8
   21dc8:	d9003617 	ldw	r4,216(sp)
   21dcc:	d9403817 	ldw	r5,224(sp)
   21dd0:	000d883a 	mov	r6,zero
   21dd4:	000f883a 	mov	r7,zero
   21dd8:	d8c03c15 	stw	r3,240(sp)
   21ddc:	002beb40 	call	2beb4 <__eqdf2>
   21de0:	d8c03c17 	ldw	r3,240(sp)
   21de4:	1000bc26 	beq	r2,zero,220d8 <___vfprintf_internal_r+0x137c>
   21de8:	d9403317 	ldw	r5,204(sp)
   21dec:	84000044 	addi	r16,r16,1
   21df0:	8c400044 	addi	r17,r17,1
   21df4:	28bfffc4 	addi	r2,r5,-1
   21df8:	1887883a 	add	r3,r3,r2
   21dfc:	b0800115 	stw	r2,4(r22)
   21e00:	b4000015 	stw	r16,0(r22)
   21e04:	d8c02015 	stw	r3,128(sp)
   21e08:	dc401f15 	stw	r17,124(sp)
   21e0c:	008001c4 	movi	r2,7
   21e10:	14414316 	blt	r2,r17,22320 <___vfprintf_internal_r+0x15c4>
   21e14:	b5800204 	addi	r22,r22,8
   21e18:	d9003a17 	ldw	r4,232(sp)
   21e1c:	df0022c4 	addi	fp,sp,139
   21e20:	8c400044 	addi	r17,r17,1
   21e24:	20c7883a 	add	r3,r4,r3
   21e28:	b7000015 	stw	fp,0(r22)
   21e2c:	b1000115 	stw	r4,4(r22)
   21e30:	d8c02015 	stw	r3,128(sp)
   21e34:	dc401f15 	stw	r17,124(sp)
   21e38:	008001c4 	movi	r2,7
   21e3c:	14400e16 	blt	r2,r17,21e78 <___vfprintf_internal_r+0x111c>
   21e40:	b2000204 	addi	r8,r22,8
   21e44:	003e3a06 	br	21730 <__alt_data_end+0xfffe1730>
   21e48:	010000f4 	movhi	r4,3
   21e4c:	21006684 	addi	r4,r4,410
   21e50:	d9002b15 	stw	r4,172(sp)
   21e54:	d9002b17 	ldw	r4,172(sp)
   21e58:	1c07883a 	add	r3,r3,r16
   21e5c:	44000115 	stw	r16,4(r8)
   21e60:	41000015 	stw	r4,0(r8)
   21e64:	10800044 	addi	r2,r2,1
   21e68:	d8c02015 	stw	r3,128(sp)
   21e6c:	d8801f15 	stw	r2,124(sp)
   21e70:	010001c4 	movi	r4,7
   21e74:	20be2d0e 	bge	r4,r2,2172c <__alt_data_end+0xfffe172c>
   21e78:	d9002c17 	ldw	r4,176(sp)
   21e7c:	d9801e04 	addi	r6,sp,120
   21e80:	b80b883a 	mov	r5,r23
   21e84:	00278740 	call	27874 <__sprint_r>
   21e88:	103cb61e 	bne	r2,zero,21164 <__alt_data_end+0xfffe1164>
   21e8c:	d8c02017 	ldw	r3,128(sp)
   21e90:	da000404 	addi	r8,sp,16
   21e94:	003e2606 	br	21730 <__alt_data_end+0xfffe1730>
   21e98:	d9002c17 	ldw	r4,176(sp)
   21e9c:	d9801e04 	addi	r6,sp,120
   21ea0:	b80b883a 	mov	r5,r23
   21ea4:	00278740 	call	27874 <__sprint_r>
   21ea8:	103e5d26 	beq	r2,zero,21820 <__alt_data_end+0xfffe1820>
   21eac:	003cad06 	br	21164 <__alt_data_end+0xfffe1164>
   21eb0:	d9002c17 	ldw	r4,176(sp)
   21eb4:	d9801e04 	addi	r6,sp,120
   21eb8:	b80b883a 	mov	r5,r23
   21ebc:	00278740 	call	27874 <__sprint_r>
   21ec0:	103ca81e 	bne	r2,zero,21164 <__alt_data_end+0xfffe1164>
   21ec4:	d8c02017 	ldw	r3,128(sp)
   21ec8:	da000404 	addi	r8,sp,16
   21ecc:	003e0b06 	br	216fc <__alt_data_end+0xfffe16fc>
   21ed0:	d9002c17 	ldw	r4,176(sp)
   21ed4:	d9801e04 	addi	r6,sp,120
   21ed8:	b80b883a 	mov	r5,r23
   21edc:	00278740 	call	27874 <__sprint_r>
   21ee0:	103ca01e 	bne	r2,zero,21164 <__alt_data_end+0xfffe1164>
   21ee4:	d8c02017 	ldw	r3,128(sp)
   21ee8:	da000404 	addi	r8,sp,16
   21eec:	003dbd06 	br	215e4 <__alt_data_end+0xfffe15e4>
   21ef0:	d9002c17 	ldw	r4,176(sp)
   21ef4:	d9801e04 	addi	r6,sp,120
   21ef8:	b80b883a 	mov	r5,r23
   21efc:	00278740 	call	27874 <__sprint_r>
   21f00:	103c981e 	bne	r2,zero,21164 <__alt_data_end+0xfffe1164>
   21f04:	d8c02017 	ldw	r3,128(sp)
   21f08:	da000404 	addi	r8,sp,16
   21f0c:	003dc306 	br	2161c <__alt_data_end+0xfffe161c>
   21f10:	d8802917 	ldw	r2,164(sp)
   21f14:	d8002785 	stb	zero,158(sp)
   21f18:	103f0616 	blt	r2,zero,21b34 <__alt_data_end+0xfffe1b34>
   21f1c:	00ffdfc4 	movi	r3,-129
   21f20:	9d84b03a 	or	r2,r19,r22
   21f24:	90e4703a 	and	r18,r18,r3
   21f28:	103c6b26 	beq	r2,zero,210d8 <__alt_data_end+0xfffe10d8>
   21f2c:	0039883a 	mov	fp,zero
   21f30:	003e7406 	br	21904 <__alt_data_end+0xfffe1904>
   21f34:	9080040c 	andi	r2,r18,16
   21f38:	1001b326 	beq	r2,zero,22608 <___vfprintf_internal_r+0x18ac>
   21f3c:	d9002d17 	ldw	r4,180(sp)
   21f40:	d9402917 	ldw	r5,164(sp)
   21f44:	d8002785 	stb	zero,158(sp)
   21f48:	20800104 	addi	r2,r4,4
   21f4c:	24c00017 	ldw	r19,0(r4)
   21f50:	002d883a 	mov	r22,zero
   21f54:	2801b516 	blt	r5,zero,2262c <___vfprintf_internal_r+0x18d0>
   21f58:	00ffdfc4 	movi	r3,-129
   21f5c:	d8802d15 	stw	r2,180(sp)
   21f60:	90e4703a 	and	r18,r18,r3
   21f64:	983d2726 	beq	r19,zero,21404 <__alt_data_end+0xfffe1404>
   21f68:	0039883a 	mov	fp,zero
   21f6c:	003d2a06 	br	21418 <__alt_data_end+0xfffe1418>
   21f70:	dc402617 	ldw	r17,152(sp)
   21f74:	0441d30e 	bge	zero,r17,226c4 <___vfprintf_internal_r+0x1968>
   21f78:	dc403217 	ldw	r17,200(sp)
   21f7c:	d8803317 	ldw	r2,204(sp)
   21f80:	1440010e 	bge	r2,r17,21f88 <___vfprintf_internal_r+0x122c>
   21f84:	1023883a 	mov	r17,r2
   21f88:	04400a0e 	bge	zero,r17,21fb4 <___vfprintf_internal_r+0x1258>
   21f8c:	d8801f17 	ldw	r2,124(sp)
   21f90:	1c47883a 	add	r3,r3,r17
   21f94:	44000015 	stw	r16,0(r8)
   21f98:	10800044 	addi	r2,r2,1
   21f9c:	44400115 	stw	r17,4(r8)
   21fa0:	d8c02015 	stw	r3,128(sp)
   21fa4:	d8801f15 	stw	r2,124(sp)
   21fa8:	010001c4 	movi	r4,7
   21fac:	20826516 	blt	r4,r2,22944 <___vfprintf_internal_r+0x1be8>
   21fb0:	42000204 	addi	r8,r8,8
   21fb4:	88026116 	blt	r17,zero,2293c <___vfprintf_internal_r+0x1be0>
   21fb8:	d9003217 	ldw	r4,200(sp)
   21fbc:	2463c83a 	sub	r17,r4,r17
   21fc0:	04407b0e 	bge	zero,r17,221b0 <___vfprintf_internal_r+0x1454>
   21fc4:	05800404 	movi	r22,16
   21fc8:	d8801f17 	ldw	r2,124(sp)
   21fcc:	b4419d0e 	bge	r22,r17,22644 <___vfprintf_internal_r+0x18e8>
   21fd0:	010000f4 	movhi	r4,3
   21fd4:	21006684 	addi	r4,r4,410
   21fd8:	d9002b15 	stw	r4,172(sp)
   21fdc:	070001c4 	movi	fp,7
   21fe0:	dcc02c17 	ldw	r19,176(sp)
   21fe4:	00000306 	br	21ff4 <___vfprintf_internal_r+0x1298>
   21fe8:	42000204 	addi	r8,r8,8
   21fec:	8c7ffc04 	addi	r17,r17,-16
   21ff0:	b441970e 	bge	r22,r17,22650 <___vfprintf_internal_r+0x18f4>
   21ff4:	18c00404 	addi	r3,r3,16
   21ff8:	10800044 	addi	r2,r2,1
   21ffc:	45000015 	stw	r20,0(r8)
   22000:	45800115 	stw	r22,4(r8)
   22004:	d8c02015 	stw	r3,128(sp)
   22008:	d8801f15 	stw	r2,124(sp)
   2200c:	e0bff60e 	bge	fp,r2,21fe8 <__alt_data_end+0xfffe1fe8>
   22010:	d9801e04 	addi	r6,sp,120
   22014:	b80b883a 	mov	r5,r23
   22018:	9809883a 	mov	r4,r19
   2201c:	00278740 	call	27874 <__sprint_r>
   22020:	103c501e 	bne	r2,zero,21164 <__alt_data_end+0xfffe1164>
   22024:	d8c02017 	ldw	r3,128(sp)
   22028:	d8801f17 	ldw	r2,124(sp)
   2202c:	da000404 	addi	r8,sp,16
   22030:	003fee06 	br	21fec <__alt_data_end+0xfffe1fec>
   22034:	d9002c17 	ldw	r4,176(sp)
   22038:	d9801e04 	addi	r6,sp,120
   2203c:	b80b883a 	mov	r5,r23
   22040:	00278740 	call	27874 <__sprint_r>
   22044:	103c471e 	bne	r2,zero,21164 <__alt_data_end+0xfffe1164>
   22048:	d8c02017 	ldw	r3,128(sp)
   2204c:	df002787 	ldb	fp,158(sp)
   22050:	da000404 	addi	r8,sp,16
   22054:	003d5606 	br	215b0 <__alt_data_end+0xfffe15b0>
   22058:	9080040c 	andi	r2,r18,16
   2205c:	10016126 	beq	r2,zero,225e4 <___vfprintf_internal_r+0x1888>
   22060:	d8802d17 	ldw	r2,180(sp)
   22064:	14c00017 	ldw	r19,0(r2)
   22068:	10800104 	addi	r2,r2,4
   2206c:	d8802d15 	stw	r2,180(sp)
   22070:	982dd7fa 	srai	r22,r19,31
   22074:	b005883a 	mov	r2,r22
   22078:	003c8206 	br	21284 <__alt_data_end+0xfffe1284>
   2207c:	9080040c 	andi	r2,r18,16
   22080:	10003526 	beq	r2,zero,22158 <___vfprintf_internal_r+0x13fc>
   22084:	d9402d17 	ldw	r5,180(sp)
   22088:	d8c02917 	ldw	r3,164(sp)
   2208c:	d8002785 	stb	zero,158(sp)
   22090:	28800104 	addi	r2,r5,4
   22094:	2cc00017 	ldw	r19,0(r5)
   22098:	002d883a 	mov	r22,zero
   2209c:	18003716 	blt	r3,zero,2217c <___vfprintf_internal_r+0x1420>
   220a0:	00ffdfc4 	movi	r3,-129
   220a4:	d8802d15 	stw	r2,180(sp)
   220a8:	90e4703a 	and	r18,r18,r3
   220ac:	0039883a 	mov	fp,zero
   220b0:	983df326 	beq	r19,zero,21880 <__alt_data_end+0xfffe1880>
   220b4:	00800244 	movi	r2,9
   220b8:	14fc7b36 	bltu	r2,r19,212a8 <__alt_data_end+0xfffe12a8>
   220bc:	d8c02817 	ldw	r3,160(sp)
   220c0:	dc001dc4 	addi	r16,sp,119
   220c4:	9cc00c04 	addi	r19,r19,48
   220c8:	1c07c83a 	sub	r3,r3,r16
   220cc:	dcc01dc5 	stb	r19,119(sp)
   220d0:	d8c02e15 	stw	r3,184(sp)
   220d4:	003ce806 	br	21478 <__alt_data_end+0xfffe1478>
   220d8:	d8803317 	ldw	r2,204(sp)
   220dc:	143fffc4 	addi	r16,r2,-1
   220e0:	043f4d0e 	bge	zero,r16,21e18 <__alt_data_end+0xfffe1e18>
   220e4:	07000404 	movi	fp,16
   220e8:	e400810e 	bge	fp,r16,222f0 <___vfprintf_internal_r+0x1594>
   220ec:	014000f4 	movhi	r5,3
   220f0:	29406684 	addi	r5,r5,410
   220f4:	d9402b15 	stw	r5,172(sp)
   220f8:	01c001c4 	movi	r7,7
   220fc:	dcc02c17 	ldw	r19,176(sp)
   22100:	00000306 	br	22110 <___vfprintf_internal_r+0x13b4>
   22104:	b5800204 	addi	r22,r22,8
   22108:	843ffc04 	addi	r16,r16,-16
   2210c:	e4007b0e 	bge	fp,r16,222fc <___vfprintf_internal_r+0x15a0>
   22110:	18c00404 	addi	r3,r3,16
   22114:	8c400044 	addi	r17,r17,1
   22118:	b5000015 	stw	r20,0(r22)
   2211c:	b7000115 	stw	fp,4(r22)
   22120:	d8c02015 	stw	r3,128(sp)
   22124:	dc401f15 	stw	r17,124(sp)
   22128:	3c7ff60e 	bge	r7,r17,22104 <__alt_data_end+0xfffe2104>
   2212c:	d9801e04 	addi	r6,sp,120
   22130:	b80b883a 	mov	r5,r23
   22134:	9809883a 	mov	r4,r19
   22138:	d9c03c15 	stw	r7,240(sp)
   2213c:	00278740 	call	27874 <__sprint_r>
   22140:	d9c03c17 	ldw	r7,240(sp)
   22144:	103c071e 	bne	r2,zero,21164 <__alt_data_end+0xfffe1164>
   22148:	d8c02017 	ldw	r3,128(sp)
   2214c:	dc401f17 	ldw	r17,124(sp)
   22150:	dd800404 	addi	r22,sp,16
   22154:	003fec06 	br	22108 <__alt_data_end+0xfffe2108>
   22158:	9080100c 	andi	r2,r18,64
   2215c:	d8002785 	stb	zero,158(sp)
   22160:	10010e26 	beq	r2,zero,2259c <___vfprintf_internal_r+0x1840>
   22164:	d9002d17 	ldw	r4,180(sp)
   22168:	d9402917 	ldw	r5,164(sp)
   2216c:	002d883a 	mov	r22,zero
   22170:	20800104 	addi	r2,r4,4
   22174:	24c0000b 	ldhu	r19,0(r4)
   22178:	283fc90e 	bge	r5,zero,220a0 <__alt_data_end+0xfffe20a0>
   2217c:	d8802d15 	stw	r2,180(sp)
   22180:	0039883a 	mov	fp,zero
   22184:	9d84b03a 	or	r2,r19,r22
   22188:	103c461e 	bne	r2,zero,212a4 <__alt_data_end+0xfffe12a4>
   2218c:	00800044 	movi	r2,1
   22190:	003e6c06 	br	21b44 <__alt_data_end+0xfffe1b44>
   22194:	d9002c17 	ldw	r4,176(sp)
   22198:	d9801e04 	addi	r6,sp,120
   2219c:	b80b883a 	mov	r5,r23
   221a0:	00278740 	call	27874 <__sprint_r>
   221a4:	103bef1e 	bne	r2,zero,21164 <__alt_data_end+0xfffe1164>
   221a8:	d8c02017 	ldw	r3,128(sp)
   221ac:	da000404 	addi	r8,sp,16
   221b0:	d9003217 	ldw	r4,200(sp)
   221b4:	d8802617 	ldw	r2,152(sp)
   221b8:	d9403317 	ldw	r5,204(sp)
   221bc:	8123883a 	add	r17,r16,r4
   221c0:	11400216 	blt	r2,r5,221cc <___vfprintf_internal_r+0x1470>
   221c4:	9100004c 	andi	r4,r18,1
   221c8:	20000d26 	beq	r4,zero,22200 <___vfprintf_internal_r+0x14a4>
   221cc:	d9003717 	ldw	r4,220(sp)
   221d0:	d9403417 	ldw	r5,208(sp)
   221d4:	1907883a 	add	r3,r3,r4
   221d8:	d9001f17 	ldw	r4,124(sp)
   221dc:	41400015 	stw	r5,0(r8)
   221e0:	d9403717 	ldw	r5,220(sp)
   221e4:	21000044 	addi	r4,r4,1
   221e8:	d8c02015 	stw	r3,128(sp)
   221ec:	41400115 	stw	r5,4(r8)
   221f0:	d9001f15 	stw	r4,124(sp)
   221f4:	014001c4 	movi	r5,7
   221f8:	2901e816 	blt	r5,r4,2299c <___vfprintf_internal_r+0x1c40>
   221fc:	42000204 	addi	r8,r8,8
   22200:	d9003317 	ldw	r4,204(sp)
   22204:	8121883a 	add	r16,r16,r4
   22208:	2085c83a 	sub	r2,r4,r2
   2220c:	8461c83a 	sub	r16,r16,r17
   22210:	1400010e 	bge	r2,r16,22218 <___vfprintf_internal_r+0x14bc>
   22214:	1021883a 	mov	r16,r2
   22218:	04000a0e 	bge	zero,r16,22244 <___vfprintf_internal_r+0x14e8>
   2221c:	d9001f17 	ldw	r4,124(sp)
   22220:	1c07883a 	add	r3,r3,r16
   22224:	44400015 	stw	r17,0(r8)
   22228:	21000044 	addi	r4,r4,1
   2222c:	44000115 	stw	r16,4(r8)
   22230:	d8c02015 	stw	r3,128(sp)
   22234:	d9001f15 	stw	r4,124(sp)
   22238:	014001c4 	movi	r5,7
   2223c:	2901fb16 	blt	r5,r4,22a2c <___vfprintf_internal_r+0x1cd0>
   22240:	42000204 	addi	r8,r8,8
   22244:	8001f716 	blt	r16,zero,22a24 <___vfprintf_internal_r+0x1cc8>
   22248:	1421c83a 	sub	r16,r2,r16
   2224c:	043d380e 	bge	zero,r16,21730 <__alt_data_end+0xfffe1730>
   22250:	04400404 	movi	r17,16
   22254:	d8801f17 	ldw	r2,124(sp)
   22258:	8c3efb0e 	bge	r17,r16,21e48 <__alt_data_end+0xfffe1e48>
   2225c:	014000f4 	movhi	r5,3
   22260:	29406684 	addi	r5,r5,410
   22264:	d9402b15 	stw	r5,172(sp)
   22268:	058001c4 	movi	r22,7
   2226c:	dcc02c17 	ldw	r19,176(sp)
   22270:	00000306 	br	22280 <___vfprintf_internal_r+0x1524>
   22274:	42000204 	addi	r8,r8,8
   22278:	843ffc04 	addi	r16,r16,-16
   2227c:	8c3ef50e 	bge	r17,r16,21e54 <__alt_data_end+0xfffe1e54>
   22280:	18c00404 	addi	r3,r3,16
   22284:	10800044 	addi	r2,r2,1
   22288:	45000015 	stw	r20,0(r8)
   2228c:	44400115 	stw	r17,4(r8)
   22290:	d8c02015 	stw	r3,128(sp)
   22294:	d8801f15 	stw	r2,124(sp)
   22298:	b0bff60e 	bge	r22,r2,22274 <__alt_data_end+0xfffe2274>
   2229c:	d9801e04 	addi	r6,sp,120
   222a0:	b80b883a 	mov	r5,r23
   222a4:	9809883a 	mov	r4,r19
   222a8:	00278740 	call	27874 <__sprint_r>
   222ac:	103bad1e 	bne	r2,zero,21164 <__alt_data_end+0xfffe1164>
   222b0:	d8c02017 	ldw	r3,128(sp)
   222b4:	d8801f17 	ldw	r2,124(sp)
   222b8:	da000404 	addi	r8,sp,16
   222bc:	003fee06 	br	22278 <__alt_data_end+0xfffe2278>
   222c0:	9088703a 	and	r4,r18,r2
   222c4:	203eab1e 	bne	r4,zero,21d74 <__alt_data_end+0xfffe1d74>
   222c8:	dc401f17 	ldw	r17,124(sp)
   222cc:	40800115 	stw	r2,4(r8)
   222d0:	44000015 	stw	r16,0(r8)
   222d4:	8c400044 	addi	r17,r17,1
   222d8:	d8c02015 	stw	r3,128(sp)
   222dc:	dc401f15 	stw	r17,124(sp)
   222e0:	008001c4 	movi	r2,7
   222e4:	14400e16 	blt	r2,r17,22320 <___vfprintf_internal_r+0x15c4>
   222e8:	45800204 	addi	r22,r8,8
   222ec:	003eca06 	br	21e18 <__alt_data_end+0xfffe1e18>
   222f0:	010000f4 	movhi	r4,3
   222f4:	21006684 	addi	r4,r4,410
   222f8:	d9002b15 	stw	r4,172(sp)
   222fc:	d8802b17 	ldw	r2,172(sp)
   22300:	1c07883a 	add	r3,r3,r16
   22304:	8c400044 	addi	r17,r17,1
   22308:	b0800015 	stw	r2,0(r22)
   2230c:	b4000115 	stw	r16,4(r22)
   22310:	d8c02015 	stw	r3,128(sp)
   22314:	dc401f15 	stw	r17,124(sp)
   22318:	008001c4 	movi	r2,7
   2231c:	147ebd0e 	bge	r2,r17,21e14 <__alt_data_end+0xfffe1e14>
   22320:	d9002c17 	ldw	r4,176(sp)
   22324:	d9801e04 	addi	r6,sp,120
   22328:	b80b883a 	mov	r5,r23
   2232c:	00278740 	call	27874 <__sprint_r>
   22330:	103b8c1e 	bne	r2,zero,21164 <__alt_data_end+0xfffe1164>
   22334:	d8c02017 	ldw	r3,128(sp)
   22338:	dc401f17 	ldw	r17,124(sp)
   2233c:	dd800404 	addi	r22,sp,16
   22340:	003eb506 	br	21e18 <__alt_data_end+0xfffe1e18>
   22344:	d9002c17 	ldw	r4,176(sp)
   22348:	d9801e04 	addi	r6,sp,120
   2234c:	b80b883a 	mov	r5,r23
   22350:	00278740 	call	27874 <__sprint_r>
   22354:	103b831e 	bne	r2,zero,21164 <__alt_data_end+0xfffe1164>
   22358:	d8c02017 	ldw	r3,128(sp)
   2235c:	dc401f17 	ldw	r17,124(sp)
   22360:	da000404 	addi	r8,sp,16
   22364:	003e8d06 	br	21d9c <__alt_data_end+0xfffe1d9c>
   22368:	d9002c17 	ldw	r4,176(sp)
   2236c:	d9801e04 	addi	r6,sp,120
   22370:	b80b883a 	mov	r5,r23
   22374:	00278740 	call	27874 <__sprint_r>
   22378:	103b7a1e 	bne	r2,zero,21164 <__alt_data_end+0xfffe1164>
   2237c:	d8c02017 	ldw	r3,128(sp)
   22380:	dc401f17 	ldw	r17,124(sp)
   22384:	dd800404 	addi	r22,sp,16
   22388:	003e8f06 	br	21dc8 <__alt_data_end+0xfffe1dc8>
   2238c:	0027883a 	mov	r19,zero
   22390:	003f4a06 	br	220bc <__alt_data_end+0xfffe20bc>
   22394:	d9002c17 	ldw	r4,176(sp)
   22398:	d9801e04 	addi	r6,sp,120
   2239c:	b80b883a 	mov	r5,r23
   223a0:	00278740 	call	27874 <__sprint_r>
   223a4:	103b6f1e 	bne	r2,zero,21164 <__alt_data_end+0xfffe1164>
   223a8:	d8c02017 	ldw	r3,128(sp)
   223ac:	da000404 	addi	r8,sp,16
   223b0:	003c9d06 	br	21628 <__alt_data_end+0xfffe1628>
   223b4:	04e7c83a 	sub	r19,zero,r19
   223b8:	9804c03a 	cmpne	r2,r19,zero
   223bc:	05adc83a 	sub	r22,zero,r22
   223c0:	b0adc83a 	sub	r22,r22,r2
   223c4:	d8802917 	ldw	r2,164(sp)
   223c8:	07000b44 	movi	fp,45
   223cc:	df002785 	stb	fp,158(sp)
   223d0:	10017b16 	blt	r2,zero,229c0 <___vfprintf_internal_r+0x1c64>
   223d4:	00bfdfc4 	movi	r2,-129
   223d8:	90a4703a 	and	r18,r18,r2
   223dc:	003bb106 	br	212a4 <__alt_data_end+0xfffe12a4>
   223e0:	d9003617 	ldw	r4,216(sp)
   223e4:	d9403817 	ldw	r5,224(sp)
   223e8:	da003d15 	stw	r8,244(sp)
   223ec:	00274000 	call	27400 <__fpclassifyd>
   223f0:	da003d17 	ldw	r8,244(sp)
   223f4:	1000f026 	beq	r2,zero,227b8 <___vfprintf_internal_r+0x1a5c>
   223f8:	d9002917 	ldw	r4,164(sp)
   223fc:	05bff7c4 	movi	r22,-33
   22400:	00bfffc4 	movi	r2,-1
   22404:	8dac703a 	and	r22,r17,r22
   22408:	20820026 	beq	r4,r2,22c0c <___vfprintf_internal_r+0x1eb0>
   2240c:	008011c4 	movi	r2,71
   22410:	b081f726 	beq	r22,r2,22bf0 <___vfprintf_internal_r+0x1e94>
   22414:	d9003817 	ldw	r4,224(sp)
   22418:	90c04014 	ori	r3,r18,256
   2241c:	d8c02b15 	stw	r3,172(sp)
   22420:	20021516 	blt	r4,zero,22c78 <___vfprintf_internal_r+0x1f1c>
   22424:	dcc03817 	ldw	r19,224(sp)
   22428:	d8002a05 	stb	zero,168(sp)
   2242c:	00801984 	movi	r2,102
   22430:	8881f926 	beq	r17,r2,22c18 <___vfprintf_internal_r+0x1ebc>
   22434:	00801184 	movi	r2,70
   22438:	88821c26 	beq	r17,r2,22cac <___vfprintf_internal_r+0x1f50>
   2243c:	00801144 	movi	r2,69
   22440:	b081ef26 	beq	r22,r2,22c00 <___vfprintf_internal_r+0x1ea4>
   22444:	d8c02917 	ldw	r3,164(sp)
   22448:	d8802104 	addi	r2,sp,132
   2244c:	d8800315 	stw	r2,12(sp)
   22450:	d9403617 	ldw	r5,216(sp)
   22454:	d8802504 	addi	r2,sp,148
   22458:	d9002c17 	ldw	r4,176(sp)
   2245c:	d8800215 	stw	r2,8(sp)
   22460:	d8802604 	addi	r2,sp,152
   22464:	d8c00015 	stw	r3,0(sp)
   22468:	d8800115 	stw	r2,4(sp)
   2246c:	01c00084 	movi	r7,2
   22470:	980d883a 	mov	r6,r19
   22474:	d8c03c15 	stw	r3,240(sp)
   22478:	da003d15 	stw	r8,244(sp)
   2247c:	00233800 	call	23380 <_dtoa_r>
   22480:	1021883a 	mov	r16,r2
   22484:	008019c4 	movi	r2,103
   22488:	d8c03c17 	ldw	r3,240(sp)
   2248c:	da003d17 	ldw	r8,244(sp)
   22490:	88817126 	beq	r17,r2,22a58 <___vfprintf_internal_r+0x1cfc>
   22494:	008011c4 	movi	r2,71
   22498:	88829226 	beq	r17,r2,22ee4 <___vfprintf_internal_r+0x2188>
   2249c:	80f9883a 	add	fp,r16,r3
   224a0:	d9003617 	ldw	r4,216(sp)
   224a4:	000d883a 	mov	r6,zero
   224a8:	000f883a 	mov	r7,zero
   224ac:	980b883a 	mov	r5,r19
   224b0:	da003d15 	stw	r8,244(sp)
   224b4:	002beb40 	call	2beb4 <__eqdf2>
   224b8:	da003d17 	ldw	r8,244(sp)
   224bc:	10018d26 	beq	r2,zero,22af4 <___vfprintf_internal_r+0x1d98>
   224c0:	d8802117 	ldw	r2,132(sp)
   224c4:	1700062e 	bgeu	r2,fp,224e0 <___vfprintf_internal_r+0x1784>
   224c8:	01000c04 	movi	r4,48
   224cc:	10c00044 	addi	r3,r2,1
   224d0:	d8c02115 	stw	r3,132(sp)
   224d4:	11000005 	stb	r4,0(r2)
   224d8:	d8802117 	ldw	r2,132(sp)
   224dc:	173ffb36 	bltu	r2,fp,224cc <__alt_data_end+0xfffe24cc>
   224e0:	1405c83a 	sub	r2,r2,r16
   224e4:	d8803315 	stw	r2,204(sp)
   224e8:	008011c4 	movi	r2,71
   224ec:	b0817626 	beq	r22,r2,22ac8 <___vfprintf_internal_r+0x1d6c>
   224f0:	00801944 	movi	r2,101
   224f4:	1442810e 	bge	r2,r17,22efc <___vfprintf_internal_r+0x21a0>
   224f8:	d8c02617 	ldw	r3,152(sp)
   224fc:	00801984 	movi	r2,102
   22500:	d8c03215 	stw	r3,200(sp)
   22504:	8881fe26 	beq	r17,r2,22d00 <___vfprintf_internal_r+0x1fa4>
   22508:	d8c03217 	ldw	r3,200(sp)
   2250c:	d9003317 	ldw	r4,204(sp)
   22510:	1901dd16 	blt	r3,r4,22c88 <___vfprintf_internal_r+0x1f2c>
   22514:	9480004c 	andi	r18,r18,1
   22518:	90022b1e 	bne	r18,zero,22dc8 <___vfprintf_internal_r+0x206c>
   2251c:	1805883a 	mov	r2,r3
   22520:	18028016 	blt	r3,zero,22f24 <___vfprintf_internal_r+0x21c8>
   22524:	d8c03217 	ldw	r3,200(sp)
   22528:	044019c4 	movi	r17,103
   2252c:	d8c02e15 	stw	r3,184(sp)
   22530:	df002a07 	ldb	fp,168(sp)
   22534:	e001531e 	bne	fp,zero,22a84 <___vfprintf_internal_r+0x1d28>
   22538:	df002783 	ldbu	fp,158(sp)
   2253c:	d8802a15 	stw	r2,168(sp)
   22540:	dc802b17 	ldw	r18,172(sp)
   22544:	d8002915 	stw	zero,164(sp)
   22548:	003bd106 	br	21490 <__alt_data_end+0xfffe1490>
   2254c:	d8802d17 	ldw	r2,180(sp)
   22550:	d8c02d17 	ldw	r3,180(sp)
   22554:	d9002d17 	ldw	r4,180(sp)
   22558:	10800017 	ldw	r2,0(r2)
   2255c:	18c00117 	ldw	r3,4(r3)
   22560:	21000204 	addi	r4,r4,8
   22564:	d8803615 	stw	r2,216(sp)
   22568:	d8c03815 	stw	r3,224(sp)
   2256c:	d9002d15 	stw	r4,180(sp)
   22570:	003b7506 	br	21348 <__alt_data_end+0xfffe1348>
   22574:	ac400007 	ldb	r17,0(r21)
   22578:	003a5906 	br	20ee0 <__alt_data_end+0xfffe0ee0>
   2257c:	9080100c 	andi	r2,r18,64
   22580:	1000a826 	beq	r2,zero,22824 <___vfprintf_internal_r+0x1ac8>
   22584:	d9002d17 	ldw	r4,180(sp)
   22588:	002d883a 	mov	r22,zero
   2258c:	24c0000b 	ldhu	r19,0(r4)
   22590:	21000104 	addi	r4,r4,4
   22594:	d9002d15 	stw	r4,180(sp)
   22598:	003ccb06 	br	218c8 <__alt_data_end+0xfffe18c8>
   2259c:	d8c02d17 	ldw	r3,180(sp)
   225a0:	d9002917 	ldw	r4,164(sp)
   225a4:	002d883a 	mov	r22,zero
   225a8:	18800104 	addi	r2,r3,4
   225ac:	1cc00017 	ldw	r19,0(r3)
   225b0:	203ebb0e 	bge	r4,zero,220a0 <__alt_data_end+0xfffe20a0>
   225b4:	003ef106 	br	2217c <__alt_data_end+0xfffe217c>
   225b8:	9080040c 	andi	r2,r18,16
   225bc:	1000921e 	bne	r2,zero,22808 <___vfprintf_internal_r+0x1aac>
   225c0:	9480100c 	andi	r18,r18,64
   225c4:	90013926 	beq	r18,zero,22aac <___vfprintf_internal_r+0x1d50>
   225c8:	d9002d17 	ldw	r4,180(sp)
   225cc:	d9402f17 	ldw	r5,188(sp)
   225d0:	20800017 	ldw	r2,0(r4)
   225d4:	21000104 	addi	r4,r4,4
   225d8:	d9002d15 	stw	r4,180(sp)
   225dc:	1140000d 	sth	r5,0(r2)
   225e0:	003a1606 	br	20e3c <__alt_data_end+0xfffe0e3c>
   225e4:	9080100c 	andi	r2,r18,64
   225e8:	10008026 	beq	r2,zero,227ec <___vfprintf_internal_r+0x1a90>
   225ec:	d8c02d17 	ldw	r3,180(sp)
   225f0:	1cc0000f 	ldh	r19,0(r3)
   225f4:	18c00104 	addi	r3,r3,4
   225f8:	d8c02d15 	stw	r3,180(sp)
   225fc:	982dd7fa 	srai	r22,r19,31
   22600:	b005883a 	mov	r2,r22
   22604:	003b1f06 	br	21284 <__alt_data_end+0xfffe1284>
   22608:	9080100c 	andi	r2,r18,64
   2260c:	d8002785 	stb	zero,158(sp)
   22610:	10008a1e 	bne	r2,zero,2283c <___vfprintf_internal_r+0x1ae0>
   22614:	d9402d17 	ldw	r5,180(sp)
   22618:	d8c02917 	ldw	r3,164(sp)
   2261c:	002d883a 	mov	r22,zero
   22620:	28800104 	addi	r2,r5,4
   22624:	2cc00017 	ldw	r19,0(r5)
   22628:	183e4b0e 	bge	r3,zero,21f58 <__alt_data_end+0xfffe1f58>
   2262c:	9d86b03a 	or	r3,r19,r22
   22630:	d8802d15 	stw	r2,180(sp)
   22634:	183e4c1e 	bne	r3,zero,21f68 <__alt_data_end+0xfffe1f68>
   22638:	0039883a 	mov	fp,zero
   2263c:	0005883a 	mov	r2,zero
   22640:	003d4006 	br	21b44 <__alt_data_end+0xfffe1b44>
   22644:	014000f4 	movhi	r5,3
   22648:	29406684 	addi	r5,r5,410
   2264c:	d9402b15 	stw	r5,172(sp)
   22650:	d9402b17 	ldw	r5,172(sp)
   22654:	1c47883a 	add	r3,r3,r17
   22658:	10800044 	addi	r2,r2,1
   2265c:	41400015 	stw	r5,0(r8)
   22660:	44400115 	stw	r17,4(r8)
   22664:	d8c02015 	stw	r3,128(sp)
   22668:	d8801f15 	stw	r2,124(sp)
   2266c:	010001c4 	movi	r4,7
   22670:	20bec816 	blt	r4,r2,22194 <__alt_data_end+0xfffe2194>
   22674:	42000204 	addi	r8,r8,8
   22678:	003ecd06 	br	221b0 <__alt_data_end+0xfffe21b0>
   2267c:	d9002917 	ldw	r4,164(sp)
   22680:	d8002785 	stb	zero,158(sp)
   22684:	203d2d16 	blt	r4,zero,21b3c <__alt_data_end+0xfffe1b3c>
   22688:	00bfdfc4 	movi	r2,-129
   2268c:	90a4703a 	and	r18,r18,r2
   22690:	003a9106 	br	210d8 <__alt_data_end+0xfffe10d8>
   22694:	010000f4 	movhi	r4,3
   22698:	21006684 	addi	r4,r4,410
   2269c:	d9002b15 	stw	r4,172(sp)
   226a0:	003c0c06 	br	216d4 <__alt_data_end+0xfffe16d4>
   226a4:	d9002c17 	ldw	r4,176(sp)
   226a8:	d9801e04 	addi	r6,sp,120
   226ac:	b80b883a 	mov	r5,r23
   226b0:	00278740 	call	27874 <__sprint_r>
   226b4:	103aab1e 	bne	r2,zero,21164 <__alt_data_end+0xfffe1164>
   226b8:	d8c02017 	ldw	r3,128(sp)
   226bc:	da000404 	addi	r8,sp,16
   226c0:	003d4106 	br	21bc8 <__alt_data_end+0xfffe1bc8>
   226c4:	d8801f17 	ldw	r2,124(sp)
   226c8:	014000f4 	movhi	r5,3
   226cc:	01000044 	movi	r4,1
   226d0:	18c00044 	addi	r3,r3,1
   226d4:	10800044 	addi	r2,r2,1
   226d8:	29406604 	addi	r5,r5,408
   226dc:	41000115 	stw	r4,4(r8)
   226e0:	41400015 	stw	r5,0(r8)
   226e4:	d8c02015 	stw	r3,128(sp)
   226e8:	d8801f15 	stw	r2,124(sp)
   226ec:	010001c4 	movi	r4,7
   226f0:	20805c16 	blt	r4,r2,22864 <___vfprintf_internal_r+0x1b08>
   226f4:	42000204 	addi	r8,r8,8
   226f8:	8800041e 	bne	r17,zero,2270c <___vfprintf_internal_r+0x19b0>
   226fc:	d8803317 	ldw	r2,204(sp)
   22700:	1000021e 	bne	r2,zero,2270c <___vfprintf_internal_r+0x19b0>
   22704:	9080004c 	andi	r2,r18,1
   22708:	103c0926 	beq	r2,zero,21730 <__alt_data_end+0xfffe1730>
   2270c:	d9003717 	ldw	r4,220(sp)
   22710:	d8801f17 	ldw	r2,124(sp)
   22714:	d9403417 	ldw	r5,208(sp)
   22718:	20c7883a 	add	r3,r4,r3
   2271c:	10800044 	addi	r2,r2,1
   22720:	41000115 	stw	r4,4(r8)
   22724:	41400015 	stw	r5,0(r8)
   22728:	d8c02015 	stw	r3,128(sp)
   2272c:	d8801f15 	stw	r2,124(sp)
   22730:	010001c4 	movi	r4,7
   22734:	20812116 	blt	r4,r2,22bbc <___vfprintf_internal_r+0x1e60>
   22738:	42000204 	addi	r8,r8,8
   2273c:	0463c83a 	sub	r17,zero,r17
   22740:	0440730e 	bge	zero,r17,22910 <___vfprintf_internal_r+0x1bb4>
   22744:	05800404 	movi	r22,16
   22748:	b440860e 	bge	r22,r17,22964 <___vfprintf_internal_r+0x1c08>
   2274c:	014000f4 	movhi	r5,3
   22750:	29406684 	addi	r5,r5,410
   22754:	d9402b15 	stw	r5,172(sp)
   22758:	070001c4 	movi	fp,7
   2275c:	dcc02c17 	ldw	r19,176(sp)
   22760:	00000306 	br	22770 <___vfprintf_internal_r+0x1a14>
   22764:	42000204 	addi	r8,r8,8
   22768:	8c7ffc04 	addi	r17,r17,-16
   2276c:	b440800e 	bge	r22,r17,22970 <___vfprintf_internal_r+0x1c14>
   22770:	18c00404 	addi	r3,r3,16
   22774:	10800044 	addi	r2,r2,1
   22778:	45000015 	stw	r20,0(r8)
   2277c:	45800115 	stw	r22,4(r8)
   22780:	d8c02015 	stw	r3,128(sp)
   22784:	d8801f15 	stw	r2,124(sp)
   22788:	e0bff60e 	bge	fp,r2,22764 <__alt_data_end+0xfffe2764>
   2278c:	d9801e04 	addi	r6,sp,120
   22790:	b80b883a 	mov	r5,r23
   22794:	9809883a 	mov	r4,r19
   22798:	00278740 	call	27874 <__sprint_r>
   2279c:	103a711e 	bne	r2,zero,21164 <__alt_data_end+0xfffe1164>
   227a0:	d8c02017 	ldw	r3,128(sp)
   227a4:	d8801f17 	ldw	r2,124(sp)
   227a8:	da000404 	addi	r8,sp,16
   227ac:	003fee06 	br	22768 <__alt_data_end+0xfffe2768>
   227b0:	00bfffc4 	movi	r2,-1
   227b4:	003a6f06 	br	21174 <__alt_data_end+0xfffe1174>
   227b8:	008011c4 	movi	r2,71
   227bc:	1440b816 	blt	r2,r17,22aa0 <___vfprintf_internal_r+0x1d44>
   227c0:	040000f4 	movhi	r16,3
   227c4:	84005804 	addi	r16,r16,352
   227c8:	00c000c4 	movi	r3,3
   227cc:	00bfdfc4 	movi	r2,-129
   227d0:	d8c02a15 	stw	r3,168(sp)
   227d4:	90a4703a 	and	r18,r18,r2
   227d8:	df002783 	ldbu	fp,158(sp)
   227dc:	d8c02e15 	stw	r3,184(sp)
   227e0:	d8002915 	stw	zero,164(sp)
   227e4:	d8003215 	stw	zero,200(sp)
   227e8:	003b2906 	br	21490 <__alt_data_end+0xfffe1490>
   227ec:	d9002d17 	ldw	r4,180(sp)
   227f0:	24c00017 	ldw	r19,0(r4)
   227f4:	21000104 	addi	r4,r4,4
   227f8:	d9002d15 	stw	r4,180(sp)
   227fc:	982dd7fa 	srai	r22,r19,31
   22800:	b005883a 	mov	r2,r22
   22804:	003a9f06 	br	21284 <__alt_data_end+0xfffe1284>
   22808:	d9402d17 	ldw	r5,180(sp)
   2280c:	d8c02f17 	ldw	r3,188(sp)
   22810:	28800017 	ldw	r2,0(r5)
   22814:	29400104 	addi	r5,r5,4
   22818:	d9402d15 	stw	r5,180(sp)
   2281c:	10c00015 	stw	r3,0(r2)
   22820:	00398606 	br	20e3c <__alt_data_end+0xfffe0e3c>
   22824:	d9402d17 	ldw	r5,180(sp)
   22828:	002d883a 	mov	r22,zero
   2282c:	2cc00017 	ldw	r19,0(r5)
   22830:	29400104 	addi	r5,r5,4
   22834:	d9402d15 	stw	r5,180(sp)
   22838:	003c2306 	br	218c8 <__alt_data_end+0xfffe18c8>
   2283c:	d8c02d17 	ldw	r3,180(sp)
   22840:	d9002917 	ldw	r4,164(sp)
   22844:	002d883a 	mov	r22,zero
   22848:	18800104 	addi	r2,r3,4
   2284c:	1cc0000b 	ldhu	r19,0(r3)
   22850:	203dc10e 	bge	r4,zero,21f58 <__alt_data_end+0xfffe1f58>
   22854:	003f7506 	br	2262c <__alt_data_end+0xfffe262c>
   22858:	040000f4 	movhi	r16,3
   2285c:	84005604 	addi	r16,r16,344
   22860:	003acc06 	br	21394 <__alt_data_end+0xfffe1394>
   22864:	d9002c17 	ldw	r4,176(sp)
   22868:	d9801e04 	addi	r6,sp,120
   2286c:	b80b883a 	mov	r5,r23
   22870:	00278740 	call	27874 <__sprint_r>
   22874:	103a3b1e 	bne	r2,zero,21164 <__alt_data_end+0xfffe1164>
   22878:	dc402617 	ldw	r17,152(sp)
   2287c:	d8c02017 	ldw	r3,128(sp)
   22880:	da000404 	addi	r8,sp,16
   22884:	003f9c06 	br	226f8 <__alt_data_end+0xfffe26f8>
   22888:	ac400043 	ldbu	r17,1(r21)
   2288c:	94800814 	ori	r18,r18,32
   22890:	ad400044 	addi	r21,r21,1
   22894:	8c403fcc 	andi	r17,r17,255
   22898:	8c40201c 	xori	r17,r17,128
   2289c:	8c7fe004 	addi	r17,r17,-128
   228a0:	00398f06 	br	20ee0 <__alt_data_end+0xfffe0ee0>
   228a4:	d8c02d15 	stw	r3,180(sp)
   228a8:	0039883a 	mov	fp,zero
   228ac:	003e3506 	br	22184 <__alt_data_end+0xfffe2184>
   228b0:	d9002c17 	ldw	r4,176(sp)
   228b4:	d9801e04 	addi	r6,sp,120
   228b8:	b80b883a 	mov	r5,r23
   228bc:	00278740 	call	27874 <__sprint_r>
   228c0:	103a281e 	bne	r2,zero,21164 <__alt_data_end+0xfffe1164>
   228c4:	d8c02017 	ldw	r3,128(sp)
   228c8:	da000404 	addi	r8,sp,16
   228cc:	003cd006 	br	21c10 <__alt_data_end+0xfffe1c10>
   228d0:	8009883a 	mov	r4,r16
   228d4:	da003d15 	stw	r8,244(sp)
   228d8:	00276e00 	call	276e0 <strlen>
   228dc:	d8802e15 	stw	r2,184(sp)
   228e0:	da003d17 	ldw	r8,244(sp)
   228e4:	103c340e 	bge	r2,zero,219b8 <__alt_data_end+0xfffe19b8>
   228e8:	0005883a 	mov	r2,zero
   228ec:	003c3206 	br	219b8 <__alt_data_end+0xfffe19b8>
   228f0:	d9002c17 	ldw	r4,176(sp)
   228f4:	d9801e04 	addi	r6,sp,120
   228f8:	b80b883a 	mov	r5,r23
   228fc:	00278740 	call	27874 <__sprint_r>
   22900:	103a181e 	bne	r2,zero,21164 <__alt_data_end+0xfffe1164>
   22904:	d8c02017 	ldw	r3,128(sp)
   22908:	d8801f17 	ldw	r2,124(sp)
   2290c:	da000404 	addi	r8,sp,16
   22910:	d9403317 	ldw	r5,204(sp)
   22914:	10800044 	addi	r2,r2,1
   22918:	44000015 	stw	r16,0(r8)
   2291c:	28c7883a 	add	r3,r5,r3
   22920:	003b7d06 	br	21718 <__alt_data_end+0xfffe1718>
   22924:	010000f4 	movhi	r4,3
   22928:	21006a84 	addi	r4,r4,426
   2292c:	d9003515 	stw	r4,212(sp)
   22930:	003b1406 	br	21584 <__alt_data_end+0xfffe1584>
   22934:	013fffc4 	movi	r4,-1
   22938:	003a3506 	br	21210 <__alt_data_end+0xfffe1210>
   2293c:	0023883a 	mov	r17,zero
   22940:	003d9d06 	br	21fb8 <__alt_data_end+0xfffe1fb8>
   22944:	d9002c17 	ldw	r4,176(sp)
   22948:	d9801e04 	addi	r6,sp,120
   2294c:	b80b883a 	mov	r5,r23
   22950:	00278740 	call	27874 <__sprint_r>
   22954:	103a031e 	bne	r2,zero,21164 <__alt_data_end+0xfffe1164>
   22958:	d8c02017 	ldw	r3,128(sp)
   2295c:	da000404 	addi	r8,sp,16
   22960:	003d9406 	br	21fb4 <__alt_data_end+0xfffe1fb4>
   22964:	010000f4 	movhi	r4,3
   22968:	21006684 	addi	r4,r4,410
   2296c:	d9002b15 	stw	r4,172(sp)
   22970:	d9002b17 	ldw	r4,172(sp)
   22974:	1c47883a 	add	r3,r3,r17
   22978:	10800044 	addi	r2,r2,1
   2297c:	41000015 	stw	r4,0(r8)
   22980:	44400115 	stw	r17,4(r8)
   22984:	d8c02015 	stw	r3,128(sp)
   22988:	d8801f15 	stw	r2,124(sp)
   2298c:	010001c4 	movi	r4,7
   22990:	20bfd716 	blt	r4,r2,228f0 <__alt_data_end+0xfffe28f0>
   22994:	42000204 	addi	r8,r8,8
   22998:	003fdd06 	br	22910 <__alt_data_end+0xfffe2910>
   2299c:	d9002c17 	ldw	r4,176(sp)
   229a0:	d9801e04 	addi	r6,sp,120
   229a4:	b80b883a 	mov	r5,r23
   229a8:	00278740 	call	27874 <__sprint_r>
   229ac:	1039ed1e 	bne	r2,zero,21164 <__alt_data_end+0xfffe1164>
   229b0:	d8802617 	ldw	r2,152(sp)
   229b4:	d8c02017 	ldw	r3,128(sp)
   229b8:	da000404 	addi	r8,sp,16
   229bc:	003e1006 	br	22200 <__alt_data_end+0xfffe2200>
   229c0:	00800044 	movi	r2,1
   229c4:	10803fcc 	andi	r2,r2,255
   229c8:	00c00044 	movi	r3,1
   229cc:	10fa3526 	beq	r2,r3,212a4 <__alt_data_end+0xfffe12a4>
   229d0:	00c00084 	movi	r3,2
   229d4:	10fbcb26 	beq	r2,r3,21904 <__alt_data_end+0xfffe1904>
   229d8:	003a8f06 	br	21418 <__alt_data_end+0xfffe1418>
   229dc:	010000f4 	movhi	r4,3
   229e0:	21006a84 	addi	r4,r4,426
   229e4:	d9003515 	stw	r4,212(sp)
   229e8:	003b7606 	br	217c4 <__alt_data_end+0xfffe17c4>
   229ec:	d8802917 	ldw	r2,164(sp)
   229f0:	00c00184 	movi	r3,6
   229f4:	1880012e 	bgeu	r3,r2,229fc <___vfprintf_internal_r+0x1ca0>
   229f8:	1805883a 	mov	r2,r3
   229fc:	d8802e15 	stw	r2,184(sp)
   22a00:	1000ef16 	blt	r2,zero,22dc0 <___vfprintf_internal_r+0x2064>
   22a04:	040000f4 	movhi	r16,3
   22a08:	d8802a15 	stw	r2,168(sp)
   22a0c:	dcc02d15 	stw	r19,180(sp)
   22a10:	d8002915 	stw	zero,164(sp)
   22a14:	d8003215 	stw	zero,200(sp)
   22a18:	84006404 	addi	r16,r16,400
   22a1c:	0039883a 	mov	fp,zero
   22a20:	003aa206 	br	214ac <__alt_data_end+0xfffe14ac>
   22a24:	0021883a 	mov	r16,zero
   22a28:	003e0706 	br	22248 <__alt_data_end+0xfffe2248>
   22a2c:	d9002c17 	ldw	r4,176(sp)
   22a30:	d9801e04 	addi	r6,sp,120
   22a34:	b80b883a 	mov	r5,r23
   22a38:	00278740 	call	27874 <__sprint_r>
   22a3c:	1039c91e 	bne	r2,zero,21164 <__alt_data_end+0xfffe1164>
   22a40:	d8802617 	ldw	r2,152(sp)
   22a44:	d9403317 	ldw	r5,204(sp)
   22a48:	d8c02017 	ldw	r3,128(sp)
   22a4c:	da000404 	addi	r8,sp,16
   22a50:	2885c83a 	sub	r2,r5,r2
   22a54:	003dfb06 	br	22244 <__alt_data_end+0xfffe2244>
   22a58:	9080004c 	andi	r2,r18,1
   22a5c:	103e8f1e 	bne	r2,zero,2249c <__alt_data_end+0xfffe249c>
   22a60:	d8802117 	ldw	r2,132(sp)
   22a64:	003e9e06 	br	224e0 <__alt_data_end+0xfffe24e0>
   22a68:	1025883a 	mov	r18,r2
   22a6c:	0039883a 	mov	fp,zero
   22a70:	00800084 	movi	r2,2
   22a74:	003fd306 	br	229c4 <__alt_data_end+0xfffe29c4>
   22a78:	07000b44 	movi	fp,45
   22a7c:	df002785 	stb	fp,158(sp)
   22a80:	003a4006 	br	21384 <__alt_data_end+0xfffe1384>
   22a84:	00c00b44 	movi	r3,45
   22a88:	d8c02785 	stb	r3,158(sp)
   22a8c:	d8802a15 	stw	r2,168(sp)
   22a90:	dc802b17 	ldw	r18,172(sp)
   22a94:	d8002915 	stw	zero,164(sp)
   22a98:	07000b44 	movi	fp,45
   22a9c:	003a8006 	br	214a0 <__alt_data_end+0xfffe14a0>
   22aa0:	040000f4 	movhi	r16,3
   22aa4:	84005904 	addi	r16,r16,356
   22aa8:	003f4706 	br	227c8 <__alt_data_end+0xfffe27c8>
   22aac:	d8c02d17 	ldw	r3,180(sp)
   22ab0:	d9002f17 	ldw	r4,188(sp)
   22ab4:	18800017 	ldw	r2,0(r3)
   22ab8:	18c00104 	addi	r3,r3,4
   22abc:	d8c02d15 	stw	r3,180(sp)
   22ac0:	11000015 	stw	r4,0(r2)
   22ac4:	0038dd06 	br	20e3c <__alt_data_end+0xfffe0e3c>
   22ac8:	dd802617 	ldw	r22,152(sp)
   22acc:	00bfff44 	movi	r2,-3
   22ad0:	b0801c16 	blt	r22,r2,22b44 <___vfprintf_internal_r+0x1de8>
   22ad4:	d9402917 	ldw	r5,164(sp)
   22ad8:	2d801a16 	blt	r5,r22,22b44 <___vfprintf_internal_r+0x1de8>
   22adc:	dd803215 	stw	r22,200(sp)
   22ae0:	003e8906 	br	22508 <__alt_data_end+0xfffe2508>
   22ae4:	010000f4 	movhi	r4,3
   22ae8:	21006684 	addi	r4,r4,410
   22aec:	d9002b15 	stw	r4,172(sp)
   22af0:	003c9106 	br	21d38 <__alt_data_end+0xfffe1d38>
   22af4:	e005883a 	mov	r2,fp
   22af8:	003e7906 	br	224e0 <__alt_data_end+0xfffe24e0>
   22afc:	d9402917 	ldw	r5,164(sp)
   22b00:	df002783 	ldbu	fp,158(sp)
   22b04:	dcc02d15 	stw	r19,180(sp)
   22b08:	d9402a15 	stw	r5,168(sp)
   22b0c:	d9402e15 	stw	r5,184(sp)
   22b10:	d8002915 	stw	zero,164(sp)
   22b14:	d8003215 	stw	zero,200(sp)
   22b18:	003a5d06 	br	21490 <__alt_data_end+0xfffe1490>
   22b1c:	9080004c 	andi	r2,r18,1
   22b20:	0039883a 	mov	fp,zero
   22b24:	10000426 	beq	r2,zero,22b38 <___vfprintf_internal_r+0x1ddc>
   22b28:	00800c04 	movi	r2,48
   22b2c:	dc001dc4 	addi	r16,sp,119
   22b30:	d8801dc5 	stb	r2,119(sp)
   22b34:	003b8006 	br	21938 <__alt_data_end+0xfffe1938>
   22b38:	d8002e15 	stw	zero,184(sp)
   22b3c:	dc001e04 	addi	r16,sp,120
   22b40:	003a4d06 	br	21478 <__alt_data_end+0xfffe1478>
   22b44:	8c7fff84 	addi	r17,r17,-2
   22b48:	b5bfffc4 	addi	r22,r22,-1
   22b4c:	dd802615 	stw	r22,152(sp)
   22b50:	dc4022c5 	stb	r17,139(sp)
   22b54:	b000bf16 	blt	r22,zero,22e54 <___vfprintf_internal_r+0x20f8>
   22b58:	00800ac4 	movi	r2,43
   22b5c:	d8802305 	stb	r2,140(sp)
   22b60:	00800244 	movi	r2,9
   22b64:	15807016 	blt	r2,r22,22d28 <___vfprintf_internal_r+0x1fcc>
   22b68:	00800c04 	movi	r2,48
   22b6c:	b5800c04 	addi	r22,r22,48
   22b70:	d8802345 	stb	r2,141(sp)
   22b74:	dd802385 	stb	r22,142(sp)
   22b78:	d88023c4 	addi	r2,sp,143
   22b7c:	df0022c4 	addi	fp,sp,139
   22b80:	d8c03317 	ldw	r3,204(sp)
   22b84:	1739c83a 	sub	fp,r2,fp
   22b88:	d9003317 	ldw	r4,204(sp)
   22b8c:	e0c7883a 	add	r3,fp,r3
   22b90:	df003a15 	stw	fp,232(sp)
   22b94:	d8c02e15 	stw	r3,184(sp)
   22b98:	00800044 	movi	r2,1
   22b9c:	1100b30e 	bge	r2,r4,22e6c <___vfprintf_internal_r+0x2110>
   22ba0:	d8c02e17 	ldw	r3,184(sp)
   22ba4:	18c00044 	addi	r3,r3,1
   22ba8:	d8c02e15 	stw	r3,184(sp)
   22bac:	1805883a 	mov	r2,r3
   22bb0:	1800ac16 	blt	r3,zero,22e64 <___vfprintf_internal_r+0x2108>
   22bb4:	d8003215 	stw	zero,200(sp)
   22bb8:	003e5d06 	br	22530 <__alt_data_end+0xfffe2530>
   22bbc:	d9002c17 	ldw	r4,176(sp)
   22bc0:	d9801e04 	addi	r6,sp,120
   22bc4:	b80b883a 	mov	r5,r23
   22bc8:	00278740 	call	27874 <__sprint_r>
   22bcc:	1039651e 	bne	r2,zero,21164 <__alt_data_end+0xfffe1164>
   22bd0:	dc402617 	ldw	r17,152(sp)
   22bd4:	d8c02017 	ldw	r3,128(sp)
   22bd8:	d8801f17 	ldw	r2,124(sp)
   22bdc:	da000404 	addi	r8,sp,16
   22be0:	003ed606 	br	2273c <__alt_data_end+0xfffe273c>
   22be4:	582b883a 	mov	r21,r11
   22be8:	d8002915 	stw	zero,164(sp)
   22bec:	0038bd06 	br	20ee4 <__alt_data_end+0xfffe0ee4>
   22bf0:	d8802917 	ldw	r2,164(sp)
   22bf4:	103e071e 	bne	r2,zero,22414 <__alt_data_end+0xfffe2414>
   22bf8:	dc002915 	stw	r16,164(sp)
   22bfc:	003e0506 	br	22414 <__alt_data_end+0xfffe2414>
   22c00:	d9002917 	ldw	r4,164(sp)
   22c04:	20c00044 	addi	r3,r4,1
   22c08:	003e0f06 	br	22448 <__alt_data_end+0xfffe2448>
   22c0c:	01400184 	movi	r5,6
   22c10:	d9402915 	stw	r5,164(sp)
   22c14:	003dff06 	br	22414 <__alt_data_end+0xfffe2414>
   22c18:	d8802104 	addi	r2,sp,132
   22c1c:	d8800315 	stw	r2,12(sp)
   22c20:	d8802504 	addi	r2,sp,148
   22c24:	d8800215 	stw	r2,8(sp)
   22c28:	d8802604 	addi	r2,sp,152
   22c2c:	d8800115 	stw	r2,4(sp)
   22c30:	d8802917 	ldw	r2,164(sp)
   22c34:	d9403617 	ldw	r5,216(sp)
   22c38:	d9002c17 	ldw	r4,176(sp)
   22c3c:	d8800015 	stw	r2,0(sp)
   22c40:	01c000c4 	movi	r7,3
   22c44:	980d883a 	mov	r6,r19
   22c48:	da003d15 	stw	r8,244(sp)
   22c4c:	00233800 	call	23380 <_dtoa_r>
   22c50:	d8c02917 	ldw	r3,164(sp)
   22c54:	da003d17 	ldw	r8,244(sp)
   22c58:	1021883a 	mov	r16,r2
   22c5c:	10f9883a 	add	fp,r2,r3
   22c60:	81000007 	ldb	r4,0(r16)
   22c64:	00800c04 	movi	r2,48
   22c68:	20805e26 	beq	r4,r2,22de4 <___vfprintf_internal_r+0x2088>
   22c6c:	d8c02617 	ldw	r3,152(sp)
   22c70:	e0f9883a 	add	fp,fp,r3
   22c74:	003e0a06 	br	224a0 <__alt_data_end+0xfffe24a0>
   22c78:	00c00b44 	movi	r3,45
   22c7c:	24e0003c 	xorhi	r19,r4,32768
   22c80:	d8c02a05 	stb	r3,168(sp)
   22c84:	003de906 	br	2242c <__alt_data_end+0xfffe242c>
   22c88:	d8c03217 	ldw	r3,200(sp)
   22c8c:	00c07a0e 	bge	zero,r3,22e78 <___vfprintf_internal_r+0x211c>
   22c90:	00800044 	movi	r2,1
   22c94:	d9003317 	ldw	r4,204(sp)
   22c98:	1105883a 	add	r2,r2,r4
   22c9c:	d8802e15 	stw	r2,184(sp)
   22ca0:	10004e16 	blt	r2,zero,22ddc <___vfprintf_internal_r+0x2080>
   22ca4:	044019c4 	movi	r17,103
   22ca8:	003e2106 	br	22530 <__alt_data_end+0xfffe2530>
   22cac:	d9002917 	ldw	r4,164(sp)
   22cb0:	d8802104 	addi	r2,sp,132
   22cb4:	d8800315 	stw	r2,12(sp)
   22cb8:	d9000015 	stw	r4,0(sp)
   22cbc:	d8802504 	addi	r2,sp,148
   22cc0:	d9403617 	ldw	r5,216(sp)
   22cc4:	d9002c17 	ldw	r4,176(sp)
   22cc8:	d8800215 	stw	r2,8(sp)
   22ccc:	d8802604 	addi	r2,sp,152
   22cd0:	d8800115 	stw	r2,4(sp)
   22cd4:	01c000c4 	movi	r7,3
   22cd8:	980d883a 	mov	r6,r19
   22cdc:	da003d15 	stw	r8,244(sp)
   22ce0:	00233800 	call	23380 <_dtoa_r>
   22ce4:	d8c02917 	ldw	r3,164(sp)
   22ce8:	da003d17 	ldw	r8,244(sp)
   22cec:	1021883a 	mov	r16,r2
   22cf0:	00801184 	movi	r2,70
   22cf4:	80f9883a 	add	fp,r16,r3
   22cf8:	88bfd926 	beq	r17,r2,22c60 <__alt_data_end+0xfffe2c60>
   22cfc:	003de806 	br	224a0 <__alt_data_end+0xfffe24a0>
   22d00:	d9002917 	ldw	r4,164(sp)
   22d04:	00c04d0e 	bge	zero,r3,22e3c <___vfprintf_internal_r+0x20e0>
   22d08:	2000441e 	bne	r4,zero,22e1c <___vfprintf_internal_r+0x20c0>
   22d0c:	9480004c 	andi	r18,r18,1
   22d10:	9000421e 	bne	r18,zero,22e1c <___vfprintf_internal_r+0x20c0>
   22d14:	1805883a 	mov	r2,r3
   22d18:	18007016 	blt	r3,zero,22edc <___vfprintf_internal_r+0x2180>
   22d1c:	d8c03217 	ldw	r3,200(sp)
   22d20:	d8c02e15 	stw	r3,184(sp)
   22d24:	003e0206 	br	22530 <__alt_data_end+0xfffe2530>
   22d28:	df0022c4 	addi	fp,sp,139
   22d2c:	dc002915 	stw	r16,164(sp)
   22d30:	4027883a 	mov	r19,r8
   22d34:	e021883a 	mov	r16,fp
   22d38:	b009883a 	mov	r4,r22
   22d3c:	01400284 	movi	r5,10
   22d40:	0020bc00 	call	20bc0 <__modsi3>
   22d44:	10800c04 	addi	r2,r2,48
   22d48:	843fffc4 	addi	r16,r16,-1
   22d4c:	b009883a 	mov	r4,r22
   22d50:	01400284 	movi	r5,10
   22d54:	80800005 	stb	r2,0(r16)
   22d58:	0020b3c0 	call	20b3c <__divsi3>
   22d5c:	102d883a 	mov	r22,r2
   22d60:	00800244 	movi	r2,9
   22d64:	15bff416 	blt	r2,r22,22d38 <__alt_data_end+0xfffe2d38>
   22d68:	9811883a 	mov	r8,r19
   22d6c:	b0800c04 	addi	r2,r22,48
   22d70:	8027883a 	mov	r19,r16
   22d74:	997fffc4 	addi	r5,r19,-1
   22d78:	98bfffc5 	stb	r2,-1(r19)
   22d7c:	dc002917 	ldw	r16,164(sp)
   22d80:	2f006a2e 	bgeu	r5,fp,22f2c <___vfprintf_internal_r+0x21d0>
   22d84:	d9c02384 	addi	r7,sp,142
   22d88:	3ccfc83a 	sub	r7,r7,r19
   22d8c:	d9002344 	addi	r4,sp,141
   22d90:	e1cf883a 	add	r7,fp,r7
   22d94:	00000106 	br	22d9c <___vfprintf_internal_r+0x2040>
   22d98:	28800003 	ldbu	r2,0(r5)
   22d9c:	20800005 	stb	r2,0(r4)
   22da0:	21000044 	addi	r4,r4,1
   22da4:	29400044 	addi	r5,r5,1
   22da8:	393ffb1e 	bne	r7,r4,22d98 <__alt_data_end+0xfffe2d98>
   22dac:	d8802304 	addi	r2,sp,140
   22db0:	14c5c83a 	sub	r2,r2,r19
   22db4:	d8c02344 	addi	r3,sp,141
   22db8:	1885883a 	add	r2,r3,r2
   22dbc:	003f7006 	br	22b80 <__alt_data_end+0xfffe2b80>
   22dc0:	0005883a 	mov	r2,zero
   22dc4:	003f0f06 	br	22a04 <__alt_data_end+0xfffe2a04>
   22dc8:	d8c03217 	ldw	r3,200(sp)
   22dcc:	18c00044 	addi	r3,r3,1
   22dd0:	d8c02e15 	stw	r3,184(sp)
   22dd4:	1805883a 	mov	r2,r3
   22dd8:	183fb20e 	bge	r3,zero,22ca4 <__alt_data_end+0xfffe2ca4>
   22ddc:	0005883a 	mov	r2,zero
   22de0:	003fb006 	br	22ca4 <__alt_data_end+0xfffe2ca4>
   22de4:	d9003617 	ldw	r4,216(sp)
   22de8:	000d883a 	mov	r6,zero
   22dec:	000f883a 	mov	r7,zero
   22df0:	980b883a 	mov	r5,r19
   22df4:	d8c03c15 	stw	r3,240(sp)
   22df8:	da003d15 	stw	r8,244(sp)
   22dfc:	002beb40 	call	2beb4 <__eqdf2>
   22e00:	d8c03c17 	ldw	r3,240(sp)
   22e04:	da003d17 	ldw	r8,244(sp)
   22e08:	103f9826 	beq	r2,zero,22c6c <__alt_data_end+0xfffe2c6c>
   22e0c:	00800044 	movi	r2,1
   22e10:	10c7c83a 	sub	r3,r2,r3
   22e14:	d8c02615 	stw	r3,152(sp)
   22e18:	003f9506 	br	22c70 <__alt_data_end+0xfffe2c70>
   22e1c:	d9002917 	ldw	r4,164(sp)
   22e20:	d8c03217 	ldw	r3,200(sp)
   22e24:	20800044 	addi	r2,r4,1
   22e28:	1885883a 	add	r2,r3,r2
   22e2c:	d8802e15 	stw	r2,184(sp)
   22e30:	103dbf0e 	bge	r2,zero,22530 <__alt_data_end+0xfffe2530>
   22e34:	0005883a 	mov	r2,zero
   22e38:	003dbd06 	br	22530 <__alt_data_end+0xfffe2530>
   22e3c:	2000211e 	bne	r4,zero,22ec4 <___vfprintf_internal_r+0x2168>
   22e40:	9480004c 	andi	r18,r18,1
   22e44:	90001f1e 	bne	r18,zero,22ec4 <___vfprintf_internal_r+0x2168>
   22e48:	00800044 	movi	r2,1
   22e4c:	d8802e15 	stw	r2,184(sp)
   22e50:	003db706 	br	22530 <__alt_data_end+0xfffe2530>
   22e54:	00800b44 	movi	r2,45
   22e58:	05adc83a 	sub	r22,zero,r22
   22e5c:	d8802305 	stb	r2,140(sp)
   22e60:	003f3f06 	br	22b60 <__alt_data_end+0xfffe2b60>
   22e64:	0005883a 	mov	r2,zero
   22e68:	003f5206 	br	22bb4 <__alt_data_end+0xfffe2bb4>
   22e6c:	90a4703a 	and	r18,r18,r2
   22e70:	903f4e26 	beq	r18,zero,22bac <__alt_data_end+0xfffe2bac>
   22e74:	003f4a06 	br	22ba0 <__alt_data_end+0xfffe2ba0>
   22e78:	00800084 	movi	r2,2
   22e7c:	10c5c83a 	sub	r2,r2,r3
   22e80:	003f8406 	br	22c94 <__alt_data_end+0xfffe2c94>
   22e84:	d8802d17 	ldw	r2,180(sp)
   22e88:	d9002d17 	ldw	r4,180(sp)
   22e8c:	ac400043 	ldbu	r17,1(r21)
   22e90:	10800017 	ldw	r2,0(r2)
   22e94:	582b883a 	mov	r21,r11
   22e98:	d8802915 	stw	r2,164(sp)
   22e9c:	20800104 	addi	r2,r4,4
   22ea0:	d9002917 	ldw	r4,164(sp)
   22ea4:	d8802d15 	stw	r2,180(sp)
   22ea8:	203e7a0e 	bge	r4,zero,22894 <__alt_data_end+0xfffe2894>
   22eac:	8c403fcc 	andi	r17,r17,255
   22eb0:	00bfffc4 	movi	r2,-1
   22eb4:	8c40201c 	xori	r17,r17,128
   22eb8:	d8802915 	stw	r2,164(sp)
   22ebc:	8c7fe004 	addi	r17,r17,-128
   22ec0:	00380706 	br	20ee0 <__alt_data_end+0xfffe0ee0>
   22ec4:	d8c02917 	ldw	r3,164(sp)
   22ec8:	18c00084 	addi	r3,r3,2
   22ecc:	d8c02e15 	stw	r3,184(sp)
   22ed0:	1805883a 	mov	r2,r3
   22ed4:	183d960e 	bge	r3,zero,22530 <__alt_data_end+0xfffe2530>
   22ed8:	003fd606 	br	22e34 <__alt_data_end+0xfffe2e34>
   22edc:	0005883a 	mov	r2,zero
   22ee0:	003f8e06 	br	22d1c <__alt_data_end+0xfffe2d1c>
   22ee4:	9080004c 	andi	r2,r18,1
   22ee8:	103f811e 	bne	r2,zero,22cf0 <__alt_data_end+0xfffe2cf0>
   22eec:	d8802117 	ldw	r2,132(sp)
   22ef0:	1405c83a 	sub	r2,r2,r16
   22ef4:	d8803315 	stw	r2,204(sp)
   22ef8:	b47ef326 	beq	r22,r17,22ac8 <__alt_data_end+0xfffe2ac8>
   22efc:	dd802617 	ldw	r22,152(sp)
   22f00:	003f1106 	br	22b48 <__alt_data_end+0xfffe2b48>
   22f04:	d9c02785 	stb	r7,158(sp)
   22f08:	00390406 	br	2131c <__alt_data_end+0xfffe131c>
   22f0c:	d9c02785 	stb	r7,158(sp)
   22f10:	0038d306 	br	21260 <__alt_data_end+0xfffe1260>
   22f14:	d9c02785 	stb	r7,158(sp)
   22f18:	003a6106 	br	218a0 <__alt_data_end+0xfffe18a0>
   22f1c:	d9c02785 	stb	r7,158(sp)
   22f20:	003af806 	br	21b04 <__alt_data_end+0xfffe1b04>
   22f24:	0005883a 	mov	r2,zero
   22f28:	003d7e06 	br	22524 <__alt_data_end+0xfffe2524>
   22f2c:	d8802344 	addi	r2,sp,141
   22f30:	003f1306 	br	22b80 <__alt_data_end+0xfffe2b80>
   22f34:	d9c02785 	stb	r7,158(sp)
   22f38:	00392306 	br	213c8 <__alt_data_end+0xfffe13c8>
   22f3c:	d9c02785 	stb	r7,158(sp)
   22f40:	003aa906 	br	219e8 <__alt_data_end+0xfffe19e8>
   22f44:	d9c02785 	stb	r7,158(sp)
   22f48:	003a3d06 	br	21840 <__alt_data_end+0xfffe1840>
   22f4c:	d9c02785 	stb	r7,158(sp)
   22f50:	003aca06 	br	21a7c <__alt_data_end+0xfffe1a7c>

00022f54 <__vfprintf_internal>:
   22f54:	008000f4 	movhi	r2,3
   22f58:	1087c104 	addi	r2,r2,7940
   22f5c:	300f883a 	mov	r7,r6
   22f60:	280d883a 	mov	r6,r5
   22f64:	200b883a 	mov	r5,r4
   22f68:	11000017 	ldw	r4,0(r2)
   22f6c:	0020d5c1 	jmpi	20d5c <___vfprintf_internal_r>

00022f70 <__sbprintf>:
   22f70:	2880030b 	ldhu	r2,12(r5)
   22f74:	2ac01917 	ldw	r11,100(r5)
   22f78:	2a80038b 	ldhu	r10,14(r5)
   22f7c:	2a400717 	ldw	r9,28(r5)
   22f80:	2a000917 	ldw	r8,36(r5)
   22f84:	defee204 	addi	sp,sp,-1144
   22f88:	00c10004 	movi	r3,1024
   22f8c:	dc011a15 	stw	r16,1128(sp)
   22f90:	10bfff4c 	andi	r2,r2,65533
   22f94:	2821883a 	mov	r16,r5
   22f98:	d8cb883a 	add	r5,sp,r3
   22f9c:	dc811c15 	stw	r18,1136(sp)
   22fa0:	dc411b15 	stw	r17,1132(sp)
   22fa4:	dfc11d15 	stw	ra,1140(sp)
   22fa8:	2025883a 	mov	r18,r4
   22fac:	d881030d 	sth	r2,1036(sp)
   22fb0:	dac11915 	stw	r11,1124(sp)
   22fb4:	da81038d 	sth	r10,1038(sp)
   22fb8:	da410715 	stw	r9,1052(sp)
   22fbc:	da010915 	stw	r8,1060(sp)
   22fc0:	dec10015 	stw	sp,1024(sp)
   22fc4:	dec10415 	stw	sp,1040(sp)
   22fc8:	d8c10215 	stw	r3,1032(sp)
   22fcc:	d8c10515 	stw	r3,1044(sp)
   22fd0:	d8010615 	stw	zero,1048(sp)
   22fd4:	0020d5c0 	call	20d5c <___vfprintf_internal_r>
   22fd8:	1023883a 	mov	r17,r2
   22fdc:	10000416 	blt	r2,zero,22ff0 <__sbprintf+0x80>
   22fe0:	d9410004 	addi	r5,sp,1024
   22fe4:	9009883a 	mov	r4,r18
   22fe8:	0024c240 	call	24c24 <_fflush_r>
   22fec:	10000d1e 	bne	r2,zero,23024 <__sbprintf+0xb4>
   22ff0:	d881030b 	ldhu	r2,1036(sp)
   22ff4:	1080100c 	andi	r2,r2,64
   22ff8:	10000326 	beq	r2,zero,23008 <__sbprintf+0x98>
   22ffc:	8080030b 	ldhu	r2,12(r16)
   23000:	10801014 	ori	r2,r2,64
   23004:	8080030d 	sth	r2,12(r16)
   23008:	8805883a 	mov	r2,r17
   2300c:	dfc11d17 	ldw	ra,1140(sp)
   23010:	dc811c17 	ldw	r18,1136(sp)
   23014:	dc411b17 	ldw	r17,1132(sp)
   23018:	dc011a17 	ldw	r16,1128(sp)
   2301c:	dec11e04 	addi	sp,sp,1144
   23020:	f800283a 	ret
   23024:	047fffc4 	movi	r17,-1
   23028:	003ff106 	br	22ff0 <__alt_data_end+0xfffe2ff0>

0002302c <__swsetup_r>:
   2302c:	008000f4 	movhi	r2,3
   23030:	defffd04 	addi	sp,sp,-12
   23034:	1087c104 	addi	r2,r2,7940
   23038:	dc400115 	stw	r17,4(sp)
   2303c:	2023883a 	mov	r17,r4
   23040:	11000017 	ldw	r4,0(r2)
   23044:	dc000015 	stw	r16,0(sp)
   23048:	dfc00215 	stw	ra,8(sp)
   2304c:	2821883a 	mov	r16,r5
   23050:	20000226 	beq	r4,zero,2305c <__swsetup_r+0x30>
   23054:	20800e17 	ldw	r2,56(r4)
   23058:	10003126 	beq	r2,zero,23120 <__swsetup_r+0xf4>
   2305c:	8080030b 	ldhu	r2,12(r16)
   23060:	10c0020c 	andi	r3,r2,8
   23064:	1009883a 	mov	r4,r2
   23068:	18000f26 	beq	r3,zero,230a8 <__swsetup_r+0x7c>
   2306c:	80c00417 	ldw	r3,16(r16)
   23070:	18001526 	beq	r3,zero,230c8 <__swsetup_r+0x9c>
   23074:	1100004c 	andi	r4,r2,1
   23078:	20001c1e 	bne	r4,zero,230ec <__swsetup_r+0xc0>
   2307c:	1080008c 	andi	r2,r2,2
   23080:	1000291e 	bne	r2,zero,23128 <__swsetup_r+0xfc>
   23084:	80800517 	ldw	r2,20(r16)
   23088:	80800215 	stw	r2,8(r16)
   2308c:	18001c26 	beq	r3,zero,23100 <__swsetup_r+0xd4>
   23090:	0005883a 	mov	r2,zero
   23094:	dfc00217 	ldw	ra,8(sp)
   23098:	dc400117 	ldw	r17,4(sp)
   2309c:	dc000017 	ldw	r16,0(sp)
   230a0:	dec00304 	addi	sp,sp,12
   230a4:	f800283a 	ret
   230a8:	2080040c 	andi	r2,r4,16
   230ac:	10002e26 	beq	r2,zero,23168 <__swsetup_r+0x13c>
   230b0:	2080010c 	andi	r2,r4,4
   230b4:	10001e1e 	bne	r2,zero,23130 <__swsetup_r+0x104>
   230b8:	80c00417 	ldw	r3,16(r16)
   230bc:	20800214 	ori	r2,r4,8
   230c0:	8080030d 	sth	r2,12(r16)
   230c4:	183feb1e 	bne	r3,zero,23074 <__alt_data_end+0xfffe3074>
   230c8:	1100a00c 	andi	r4,r2,640
   230cc:	01408004 	movi	r5,512
   230d0:	217fe826 	beq	r4,r5,23074 <__alt_data_end+0xfffe3074>
   230d4:	800b883a 	mov	r5,r16
   230d8:	8809883a 	mov	r4,r17
   230dc:	00256e80 	call	256e8 <__smakebuf_r>
   230e0:	8080030b 	ldhu	r2,12(r16)
   230e4:	80c00417 	ldw	r3,16(r16)
   230e8:	003fe206 	br	23074 <__alt_data_end+0xfffe3074>
   230ec:	80800517 	ldw	r2,20(r16)
   230f0:	80000215 	stw	zero,8(r16)
   230f4:	0085c83a 	sub	r2,zero,r2
   230f8:	80800615 	stw	r2,24(r16)
   230fc:	183fe41e 	bne	r3,zero,23090 <__alt_data_end+0xfffe3090>
   23100:	80c0030b 	ldhu	r3,12(r16)
   23104:	0005883a 	mov	r2,zero
   23108:	1900200c 	andi	r4,r3,128
   2310c:	203fe126 	beq	r4,zero,23094 <__alt_data_end+0xfffe3094>
   23110:	18c01014 	ori	r3,r3,64
   23114:	80c0030d 	sth	r3,12(r16)
   23118:	00bfffc4 	movi	r2,-1
   2311c:	003fdd06 	br	23094 <__alt_data_end+0xfffe3094>
   23120:	00250000 	call	25000 <__sinit>
   23124:	003fcd06 	br	2305c <__alt_data_end+0xfffe305c>
   23128:	0005883a 	mov	r2,zero
   2312c:	003fd606 	br	23088 <__alt_data_end+0xfffe3088>
   23130:	81400c17 	ldw	r5,48(r16)
   23134:	28000626 	beq	r5,zero,23150 <__swsetup_r+0x124>
   23138:	80801004 	addi	r2,r16,64
   2313c:	28800326 	beq	r5,r2,2314c <__swsetup_r+0x120>
   23140:	8809883a 	mov	r4,r17
   23144:	00251740 	call	25174 <_free_r>
   23148:	8100030b 	ldhu	r4,12(r16)
   2314c:	80000c15 	stw	zero,48(r16)
   23150:	80c00417 	ldw	r3,16(r16)
   23154:	00bff6c4 	movi	r2,-37
   23158:	1108703a 	and	r4,r2,r4
   2315c:	80000115 	stw	zero,4(r16)
   23160:	80c00015 	stw	r3,0(r16)
   23164:	003fd506 	br	230bc <__alt_data_end+0xfffe30bc>
   23168:	00800244 	movi	r2,9
   2316c:	88800015 	stw	r2,0(r17)
   23170:	20801014 	ori	r2,r4,64
   23174:	8080030d 	sth	r2,12(r16)
   23178:	00bfffc4 	movi	r2,-1
   2317c:	003fc506 	br	23094 <__alt_data_end+0xfffe3094>

00023180 <quorem>:
   23180:	defff704 	addi	sp,sp,-36
   23184:	dc800215 	stw	r18,8(sp)
   23188:	20800417 	ldw	r2,16(r4)
   2318c:	2c800417 	ldw	r18,16(r5)
   23190:	dfc00815 	stw	ra,32(sp)
   23194:	ddc00715 	stw	r23,28(sp)
   23198:	dd800615 	stw	r22,24(sp)
   2319c:	dd400515 	stw	r21,20(sp)
   231a0:	dd000415 	stw	r20,16(sp)
   231a4:	dcc00315 	stw	r19,12(sp)
   231a8:	dc400115 	stw	r17,4(sp)
   231ac:	dc000015 	stw	r16,0(sp)
   231b0:	14807116 	blt	r2,r18,23378 <quorem+0x1f8>
   231b4:	94bfffc4 	addi	r18,r18,-1
   231b8:	94ad883a 	add	r22,r18,r18
   231bc:	b5ad883a 	add	r22,r22,r22
   231c0:	2c400504 	addi	r17,r5,20
   231c4:	8da9883a 	add	r20,r17,r22
   231c8:	25400504 	addi	r21,r4,20
   231cc:	282f883a 	mov	r23,r5
   231d0:	adad883a 	add	r22,r21,r22
   231d4:	a1400017 	ldw	r5,0(r20)
   231d8:	2021883a 	mov	r16,r4
   231dc:	b1000017 	ldw	r4,0(r22)
   231e0:	29400044 	addi	r5,r5,1
   231e4:	0020c340 	call	20c34 <__udivsi3>
   231e8:	1027883a 	mov	r19,r2
   231ec:	10002c26 	beq	r2,zero,232a0 <quorem+0x120>
   231f0:	a813883a 	mov	r9,r21
   231f4:	880b883a 	mov	r5,r17
   231f8:	0009883a 	mov	r4,zero
   231fc:	000d883a 	mov	r6,zero
   23200:	2a000017 	ldw	r8,0(r5)
   23204:	49c00017 	ldw	r7,0(r9)
   23208:	29400104 	addi	r5,r5,4
   2320c:	40bfffcc 	andi	r2,r8,65535
   23210:	14c5383a 	mul	r2,r2,r19
   23214:	4010d43a 	srli	r8,r8,16
   23218:	38ffffcc 	andi	r3,r7,65535
   2321c:	1105883a 	add	r2,r2,r4
   23220:	1008d43a 	srli	r4,r2,16
   23224:	44d1383a 	mul	r8,r8,r19
   23228:	198d883a 	add	r6,r3,r6
   2322c:	10ffffcc 	andi	r3,r2,65535
   23230:	30c7c83a 	sub	r3,r6,r3
   23234:	380ed43a 	srli	r7,r7,16
   23238:	4105883a 	add	r2,r8,r4
   2323c:	180dd43a 	srai	r6,r3,16
   23240:	113fffcc 	andi	r4,r2,65535
   23244:	390fc83a 	sub	r7,r7,r4
   23248:	398d883a 	add	r6,r7,r6
   2324c:	300e943a 	slli	r7,r6,16
   23250:	18ffffcc 	andi	r3,r3,65535
   23254:	1008d43a 	srli	r4,r2,16
   23258:	38ceb03a 	or	r7,r7,r3
   2325c:	49c00015 	stw	r7,0(r9)
   23260:	300dd43a 	srai	r6,r6,16
   23264:	4a400104 	addi	r9,r9,4
   23268:	a17fe52e 	bgeu	r20,r5,23200 <__alt_data_end+0xfffe3200>
   2326c:	b0800017 	ldw	r2,0(r22)
   23270:	10000b1e 	bne	r2,zero,232a0 <quorem+0x120>
   23274:	b0bfff04 	addi	r2,r22,-4
   23278:	a880082e 	bgeu	r21,r2,2329c <quorem+0x11c>
   2327c:	b0ffff17 	ldw	r3,-4(r22)
   23280:	18000326 	beq	r3,zero,23290 <quorem+0x110>
   23284:	00000506 	br	2329c <quorem+0x11c>
   23288:	10c00017 	ldw	r3,0(r2)
   2328c:	1800031e 	bne	r3,zero,2329c <quorem+0x11c>
   23290:	10bfff04 	addi	r2,r2,-4
   23294:	94bfffc4 	addi	r18,r18,-1
   23298:	a8bffb36 	bltu	r21,r2,23288 <__alt_data_end+0xfffe3288>
   2329c:	84800415 	stw	r18,16(r16)
   232a0:	b80b883a 	mov	r5,r23
   232a4:	8009883a 	mov	r4,r16
   232a8:	0026ccc0 	call	26ccc <__mcmp>
   232ac:	10002616 	blt	r2,zero,23348 <quorem+0x1c8>
   232b0:	9cc00044 	addi	r19,r19,1
   232b4:	a805883a 	mov	r2,r21
   232b8:	000b883a 	mov	r5,zero
   232bc:	11000017 	ldw	r4,0(r2)
   232c0:	89800017 	ldw	r6,0(r17)
   232c4:	10800104 	addi	r2,r2,4
   232c8:	20ffffcc 	andi	r3,r4,65535
   232cc:	194b883a 	add	r5,r3,r5
   232d0:	30ffffcc 	andi	r3,r6,65535
   232d4:	28c7c83a 	sub	r3,r5,r3
   232d8:	300cd43a 	srli	r6,r6,16
   232dc:	2008d43a 	srli	r4,r4,16
   232e0:	180bd43a 	srai	r5,r3,16
   232e4:	18ffffcc 	andi	r3,r3,65535
   232e8:	2189c83a 	sub	r4,r4,r6
   232ec:	2149883a 	add	r4,r4,r5
   232f0:	200c943a 	slli	r6,r4,16
   232f4:	8c400104 	addi	r17,r17,4
   232f8:	200bd43a 	srai	r5,r4,16
   232fc:	30c6b03a 	or	r3,r6,r3
   23300:	10ffff15 	stw	r3,-4(r2)
   23304:	a47fed2e 	bgeu	r20,r17,232bc <__alt_data_end+0xfffe32bc>
   23308:	9485883a 	add	r2,r18,r18
   2330c:	1085883a 	add	r2,r2,r2
   23310:	a887883a 	add	r3,r21,r2
   23314:	18800017 	ldw	r2,0(r3)
   23318:	10000b1e 	bne	r2,zero,23348 <quorem+0x1c8>
   2331c:	18bfff04 	addi	r2,r3,-4
   23320:	a880082e 	bgeu	r21,r2,23344 <quorem+0x1c4>
   23324:	18ffff17 	ldw	r3,-4(r3)
   23328:	18000326 	beq	r3,zero,23338 <quorem+0x1b8>
   2332c:	00000506 	br	23344 <quorem+0x1c4>
   23330:	10c00017 	ldw	r3,0(r2)
   23334:	1800031e 	bne	r3,zero,23344 <quorem+0x1c4>
   23338:	10bfff04 	addi	r2,r2,-4
   2333c:	94bfffc4 	addi	r18,r18,-1
   23340:	a8bffb36 	bltu	r21,r2,23330 <__alt_data_end+0xfffe3330>
   23344:	84800415 	stw	r18,16(r16)
   23348:	9805883a 	mov	r2,r19
   2334c:	dfc00817 	ldw	ra,32(sp)
   23350:	ddc00717 	ldw	r23,28(sp)
   23354:	dd800617 	ldw	r22,24(sp)
   23358:	dd400517 	ldw	r21,20(sp)
   2335c:	dd000417 	ldw	r20,16(sp)
   23360:	dcc00317 	ldw	r19,12(sp)
   23364:	dc800217 	ldw	r18,8(sp)
   23368:	dc400117 	ldw	r17,4(sp)
   2336c:	dc000017 	ldw	r16,0(sp)
   23370:	dec00904 	addi	sp,sp,36
   23374:	f800283a 	ret
   23378:	0005883a 	mov	r2,zero
   2337c:	003ff306 	br	2334c <__alt_data_end+0xfffe334c>

00023380 <_dtoa_r>:
   23380:	20801017 	ldw	r2,64(r4)
   23384:	deffde04 	addi	sp,sp,-136
   23388:	df002015 	stw	fp,128(sp)
   2338c:	dcc01b15 	stw	r19,108(sp)
   23390:	dc801a15 	stw	r18,104(sp)
   23394:	dc401915 	stw	r17,100(sp)
   23398:	dc001815 	stw	r16,96(sp)
   2339c:	dfc02115 	stw	ra,132(sp)
   233a0:	ddc01f15 	stw	r23,124(sp)
   233a4:	dd801e15 	stw	r22,120(sp)
   233a8:	dd401d15 	stw	r21,116(sp)
   233ac:	dd001c15 	stw	r20,112(sp)
   233b0:	d9c00315 	stw	r7,12(sp)
   233b4:	2039883a 	mov	fp,r4
   233b8:	3023883a 	mov	r17,r6
   233bc:	2825883a 	mov	r18,r5
   233c0:	dc002417 	ldw	r16,144(sp)
   233c4:	3027883a 	mov	r19,r6
   233c8:	10000826 	beq	r2,zero,233ec <_dtoa_r+0x6c>
   233cc:	21801117 	ldw	r6,68(r4)
   233d0:	00c00044 	movi	r3,1
   233d4:	100b883a 	mov	r5,r2
   233d8:	1986983a 	sll	r3,r3,r6
   233dc:	11800115 	stw	r6,4(r2)
   233e0:	10c00215 	stw	r3,8(r2)
   233e4:	00264ac0 	call	264ac <_Bfree>
   233e8:	e0001015 	stw	zero,64(fp)
   233ec:	88002e16 	blt	r17,zero,234a8 <_dtoa_r+0x128>
   233f0:	80000015 	stw	zero,0(r16)
   233f4:	889ffc2c 	andhi	r2,r17,32752
   233f8:	00dffc34 	movhi	r3,32752
   233fc:	10c01c26 	beq	r2,r3,23470 <_dtoa_r+0xf0>
   23400:	000d883a 	mov	r6,zero
   23404:	000f883a 	mov	r7,zero
   23408:	9009883a 	mov	r4,r18
   2340c:	980b883a 	mov	r5,r19
   23410:	002beb40 	call	2beb4 <__eqdf2>
   23414:	10002b1e 	bne	r2,zero,234c4 <_dtoa_r+0x144>
   23418:	d9c02317 	ldw	r7,140(sp)
   2341c:	00800044 	movi	r2,1
   23420:	38800015 	stw	r2,0(r7)
   23424:	d8802517 	ldw	r2,148(sp)
   23428:	10019e26 	beq	r2,zero,23aa4 <_dtoa_r+0x724>
   2342c:	d8c02517 	ldw	r3,148(sp)
   23430:	008000f4 	movhi	r2,3
   23434:	10806644 	addi	r2,r2,409
   23438:	18800015 	stw	r2,0(r3)
   2343c:	10bfffc4 	addi	r2,r2,-1
   23440:	dfc02117 	ldw	ra,132(sp)
   23444:	df002017 	ldw	fp,128(sp)
   23448:	ddc01f17 	ldw	r23,124(sp)
   2344c:	dd801e17 	ldw	r22,120(sp)
   23450:	dd401d17 	ldw	r21,116(sp)
   23454:	dd001c17 	ldw	r20,112(sp)
   23458:	dcc01b17 	ldw	r19,108(sp)
   2345c:	dc801a17 	ldw	r18,104(sp)
   23460:	dc401917 	ldw	r17,100(sp)
   23464:	dc001817 	ldw	r16,96(sp)
   23468:	dec02204 	addi	sp,sp,136
   2346c:	f800283a 	ret
   23470:	d8c02317 	ldw	r3,140(sp)
   23474:	0089c3c4 	movi	r2,9999
   23478:	18800015 	stw	r2,0(r3)
   2347c:	90017726 	beq	r18,zero,23a5c <_dtoa_r+0x6dc>
   23480:	008000f4 	movhi	r2,3
   23484:	10807204 	addi	r2,r2,456
   23488:	d9002517 	ldw	r4,148(sp)
   2348c:	203fec26 	beq	r4,zero,23440 <__alt_data_end+0xfffe3440>
   23490:	10c000c7 	ldb	r3,3(r2)
   23494:	1801781e 	bne	r3,zero,23a78 <_dtoa_r+0x6f8>
   23498:	10c000c4 	addi	r3,r2,3
   2349c:	d9802517 	ldw	r6,148(sp)
   234a0:	30c00015 	stw	r3,0(r6)
   234a4:	003fe606 	br	23440 <__alt_data_end+0xfffe3440>
   234a8:	04e00034 	movhi	r19,32768
   234ac:	9cffffc4 	addi	r19,r19,-1
   234b0:	00800044 	movi	r2,1
   234b4:	8ce6703a 	and	r19,r17,r19
   234b8:	80800015 	stw	r2,0(r16)
   234bc:	9823883a 	mov	r17,r19
   234c0:	003fcc06 	br	233f4 <__alt_data_end+0xfffe33f4>
   234c4:	d8800204 	addi	r2,sp,8
   234c8:	d8800015 	stw	r2,0(sp)
   234cc:	d9c00104 	addi	r7,sp,4
   234d0:	900b883a 	mov	r5,r18
   234d4:	980d883a 	mov	r6,r19
   234d8:	e009883a 	mov	r4,fp
   234dc:	8820d53a 	srli	r16,r17,20
   234e0:	00270980 	call	27098 <__d2b>
   234e4:	d8800915 	stw	r2,36(sp)
   234e8:	8001651e 	bne	r16,zero,23a80 <_dtoa_r+0x700>
   234ec:	dd800217 	ldw	r22,8(sp)
   234f0:	dc000117 	ldw	r16,4(sp)
   234f4:	00800804 	movi	r2,32
   234f8:	b421883a 	add	r16,r22,r16
   234fc:	80c10c84 	addi	r3,r16,1074
   23500:	10c2d10e 	bge	r2,r3,24048 <_dtoa_r+0xcc8>
   23504:	00801004 	movi	r2,64
   23508:	81010484 	addi	r4,r16,1042
   2350c:	10c7c83a 	sub	r3,r2,r3
   23510:	9108d83a 	srl	r4,r18,r4
   23514:	88e2983a 	sll	r17,r17,r3
   23518:	2448b03a 	or	r4,r4,r17
   2351c:	002d27c0 	call	2d27c <__floatunsidf>
   23520:	017f8434 	movhi	r5,65040
   23524:	01800044 	movi	r6,1
   23528:	1009883a 	mov	r4,r2
   2352c:	194b883a 	add	r5,r3,r5
   23530:	843fffc4 	addi	r16,r16,-1
   23534:	d9801115 	stw	r6,68(sp)
   23538:	000d883a 	mov	r6,zero
   2353c:	01cffe34 	movhi	r7,16376
   23540:	002c8240 	call	2c824 <__subdf3>
   23544:	0198dbf4 	movhi	r6,25455
   23548:	01cff4f4 	movhi	r7,16339
   2354c:	3190d844 	addi	r6,r6,17249
   23550:	39e1e9c4 	addi	r7,r7,-30809
   23554:	1009883a 	mov	r4,r2
   23558:	180b883a 	mov	r5,r3
   2355c:	002c10c0 	call	2c10c <__muldf3>
   23560:	01a2d874 	movhi	r6,35681
   23564:	01cff1f4 	movhi	r7,16327
   23568:	31b22cc4 	addi	r6,r6,-14157
   2356c:	39e28a04 	addi	r7,r7,-30168
   23570:	180b883a 	mov	r5,r3
   23574:	1009883a 	mov	r4,r2
   23578:	002ad200 	call	2ad20 <__adddf3>
   2357c:	8009883a 	mov	r4,r16
   23580:	1029883a 	mov	r20,r2
   23584:	1823883a 	mov	r17,r3
   23588:	002d1a00 	call	2d1a0 <__floatsidf>
   2358c:	019427f4 	movhi	r6,20639
   23590:	01cff4f4 	movhi	r7,16339
   23594:	319e7ec4 	addi	r6,r6,31227
   23598:	39d104c4 	addi	r7,r7,17427
   2359c:	1009883a 	mov	r4,r2
   235a0:	180b883a 	mov	r5,r3
   235a4:	002c10c0 	call	2c10c <__muldf3>
   235a8:	100d883a 	mov	r6,r2
   235ac:	180f883a 	mov	r7,r3
   235b0:	a009883a 	mov	r4,r20
   235b4:	880b883a 	mov	r5,r17
   235b8:	002ad200 	call	2ad20 <__adddf3>
   235bc:	1009883a 	mov	r4,r2
   235c0:	180b883a 	mov	r5,r3
   235c4:	1029883a 	mov	r20,r2
   235c8:	1823883a 	mov	r17,r3
   235cc:	002d1200 	call	2d120 <__fixdfsi>
   235d0:	000d883a 	mov	r6,zero
   235d4:	000f883a 	mov	r7,zero
   235d8:	a009883a 	mov	r4,r20
   235dc:	880b883a 	mov	r5,r17
   235e0:	d8800515 	stw	r2,20(sp)
   235e4:	002c0180 	call	2c018 <__ledf2>
   235e8:	10028716 	blt	r2,zero,24008 <_dtoa_r+0xc88>
   235ec:	d8c00517 	ldw	r3,20(sp)
   235f0:	00800584 	movi	r2,22
   235f4:	10c27536 	bltu	r2,r3,23fcc <_dtoa_r+0xc4c>
   235f8:	180490fa 	slli	r2,r3,3
   235fc:	00c000f4 	movhi	r3,3
   23600:	18c08e04 	addi	r3,r3,568
   23604:	1885883a 	add	r2,r3,r2
   23608:	11000017 	ldw	r4,0(r2)
   2360c:	11400117 	ldw	r5,4(r2)
   23610:	900d883a 	mov	r6,r18
   23614:	980f883a 	mov	r7,r19
   23618:	002bf3c0 	call	2bf3c <__gedf2>
   2361c:	00828d0e 	bge	zero,r2,24054 <_dtoa_r+0xcd4>
   23620:	d9000517 	ldw	r4,20(sp)
   23624:	d8000e15 	stw	zero,56(sp)
   23628:	213fffc4 	addi	r4,r4,-1
   2362c:	d9000515 	stw	r4,20(sp)
   23630:	b42dc83a 	sub	r22,r22,r16
   23634:	b5bfffc4 	addi	r22,r22,-1
   23638:	b0026f16 	blt	r22,zero,23ff8 <_dtoa_r+0xc78>
   2363c:	d8000815 	stw	zero,32(sp)
   23640:	d9c00517 	ldw	r7,20(sp)
   23644:	38026416 	blt	r7,zero,23fd8 <_dtoa_r+0xc58>
   23648:	b1ed883a 	add	r22,r22,r7
   2364c:	d9c00d15 	stw	r7,52(sp)
   23650:	d8000a15 	stw	zero,40(sp)
   23654:	d9800317 	ldw	r6,12(sp)
   23658:	00800244 	movi	r2,9
   2365c:	11811436 	bltu	r2,r6,23ab0 <_dtoa_r+0x730>
   23660:	00800144 	movi	r2,5
   23664:	1184e10e 	bge	r2,r6,249ec <_dtoa_r+0x166c>
   23668:	31bfff04 	addi	r6,r6,-4
   2366c:	d9800315 	stw	r6,12(sp)
   23670:	0023883a 	mov	r17,zero
   23674:	d9800317 	ldw	r6,12(sp)
   23678:	008000c4 	movi	r2,3
   2367c:	30836726 	beq	r6,r2,2441c <_dtoa_r+0x109c>
   23680:	1183410e 	bge	r2,r6,24388 <_dtoa_r+0x1008>
   23684:	d9c00317 	ldw	r7,12(sp)
   23688:	00800104 	movi	r2,4
   2368c:	38827c26 	beq	r7,r2,24080 <_dtoa_r+0xd00>
   23690:	00800144 	movi	r2,5
   23694:	3884c41e 	bne	r7,r2,249a8 <_dtoa_r+0x1628>
   23698:	00800044 	movi	r2,1
   2369c:	d8800b15 	stw	r2,44(sp)
   236a0:	d8c00517 	ldw	r3,20(sp)
   236a4:	d9002217 	ldw	r4,136(sp)
   236a8:	1907883a 	add	r3,r3,r4
   236ac:	19800044 	addi	r6,r3,1
   236b0:	d8c00c15 	stw	r3,48(sp)
   236b4:	d9800615 	stw	r6,24(sp)
   236b8:	0183a40e 	bge	zero,r6,2454c <_dtoa_r+0x11cc>
   236bc:	d9800617 	ldw	r6,24(sp)
   236c0:	3021883a 	mov	r16,r6
   236c4:	e0001115 	stw	zero,68(fp)
   236c8:	008005c4 	movi	r2,23
   236cc:	1184c92e 	bgeu	r2,r6,249f4 <_dtoa_r+0x1674>
   236d0:	00c00044 	movi	r3,1
   236d4:	00800104 	movi	r2,4
   236d8:	1085883a 	add	r2,r2,r2
   236dc:	11000504 	addi	r4,r2,20
   236e0:	180b883a 	mov	r5,r3
   236e4:	18c00044 	addi	r3,r3,1
   236e8:	313ffb2e 	bgeu	r6,r4,236d8 <__alt_data_end+0xfffe36d8>
   236ec:	e1401115 	stw	r5,68(fp)
   236f0:	e009883a 	mov	r4,fp
   236f4:	00264040 	call	26404 <_Balloc>
   236f8:	d8800715 	stw	r2,28(sp)
   236fc:	e0801015 	stw	r2,64(fp)
   23700:	00800384 	movi	r2,14
   23704:	1400f736 	bltu	r2,r16,23ae4 <_dtoa_r+0x764>
   23708:	8800f626 	beq	r17,zero,23ae4 <_dtoa_r+0x764>
   2370c:	d9c00517 	ldw	r7,20(sp)
   23710:	01c39a0e 	bge	zero,r7,2457c <_dtoa_r+0x11fc>
   23714:	388003cc 	andi	r2,r7,15
   23718:	100490fa 	slli	r2,r2,3
   2371c:	382bd13a 	srai	r21,r7,4
   23720:	00c000f4 	movhi	r3,3
   23724:	18c08e04 	addi	r3,r3,568
   23728:	1885883a 	add	r2,r3,r2
   2372c:	a8c0040c 	andi	r3,r21,16
   23730:	12400017 	ldw	r9,0(r2)
   23734:	12000117 	ldw	r8,4(r2)
   23738:	18037926 	beq	r3,zero,24520 <_dtoa_r+0x11a0>
   2373c:	008000f4 	movhi	r2,3
   23740:	10808404 	addi	r2,r2,528
   23744:	11800817 	ldw	r6,32(r2)
   23748:	11c00917 	ldw	r7,36(r2)
   2374c:	9009883a 	mov	r4,r18
   23750:	980b883a 	mov	r5,r19
   23754:	da001715 	stw	r8,92(sp)
   23758:	da401615 	stw	r9,88(sp)
   2375c:	002b5cc0 	call	2b5cc <__divdf3>
   23760:	da001717 	ldw	r8,92(sp)
   23764:	da401617 	ldw	r9,88(sp)
   23768:	ad4003cc 	andi	r21,r21,15
   2376c:	040000c4 	movi	r16,3
   23770:	1023883a 	mov	r17,r2
   23774:	1829883a 	mov	r20,r3
   23778:	a8001126 	beq	r21,zero,237c0 <_dtoa_r+0x440>
   2377c:	05c000f4 	movhi	r23,3
   23780:	bdc08404 	addi	r23,r23,528
   23784:	4805883a 	mov	r2,r9
   23788:	4007883a 	mov	r3,r8
   2378c:	a980004c 	andi	r6,r21,1
   23790:	1009883a 	mov	r4,r2
   23794:	a82bd07a 	srai	r21,r21,1
   23798:	180b883a 	mov	r5,r3
   2379c:	30000426 	beq	r6,zero,237b0 <_dtoa_r+0x430>
   237a0:	b9800017 	ldw	r6,0(r23)
   237a4:	b9c00117 	ldw	r7,4(r23)
   237a8:	84000044 	addi	r16,r16,1
   237ac:	002c10c0 	call	2c10c <__muldf3>
   237b0:	bdc00204 	addi	r23,r23,8
   237b4:	a83ff51e 	bne	r21,zero,2378c <__alt_data_end+0xfffe378c>
   237b8:	1013883a 	mov	r9,r2
   237bc:	1811883a 	mov	r8,r3
   237c0:	480d883a 	mov	r6,r9
   237c4:	400f883a 	mov	r7,r8
   237c8:	8809883a 	mov	r4,r17
   237cc:	a00b883a 	mov	r5,r20
   237d0:	002b5cc0 	call	2b5cc <__divdf3>
   237d4:	d8800f15 	stw	r2,60(sp)
   237d8:	d8c01015 	stw	r3,64(sp)
   237dc:	d8c00e17 	ldw	r3,56(sp)
   237e0:	18000626 	beq	r3,zero,237fc <_dtoa_r+0x47c>
   237e4:	d9000f17 	ldw	r4,60(sp)
   237e8:	d9401017 	ldw	r5,64(sp)
   237ec:	000d883a 	mov	r6,zero
   237f0:	01cffc34 	movhi	r7,16368
   237f4:	002c0180 	call	2c018 <__ledf2>
   237f8:	10040b16 	blt	r2,zero,24828 <_dtoa_r+0x14a8>
   237fc:	8009883a 	mov	r4,r16
   23800:	002d1a00 	call	2d1a0 <__floatsidf>
   23804:	d9800f17 	ldw	r6,60(sp)
   23808:	d9c01017 	ldw	r7,64(sp)
   2380c:	1009883a 	mov	r4,r2
   23810:	180b883a 	mov	r5,r3
   23814:	002c10c0 	call	2c10c <__muldf3>
   23818:	000d883a 	mov	r6,zero
   2381c:	01d00734 	movhi	r7,16412
   23820:	1009883a 	mov	r4,r2
   23824:	180b883a 	mov	r5,r3
   23828:	002ad200 	call	2ad20 <__adddf3>
   2382c:	1021883a 	mov	r16,r2
   23830:	d8800617 	ldw	r2,24(sp)
   23834:	047f3034 	movhi	r17,64704
   23838:	1c63883a 	add	r17,r3,r17
   2383c:	10031826 	beq	r2,zero,244a0 <_dtoa_r+0x1120>
   23840:	d8c00517 	ldw	r3,20(sp)
   23844:	db000617 	ldw	r12,24(sp)
   23848:	d8c01315 	stw	r3,76(sp)
   2384c:	d9000b17 	ldw	r4,44(sp)
   23850:	20038f26 	beq	r4,zero,24690 <_dtoa_r+0x1310>
   23854:	60bfffc4 	addi	r2,r12,-1
   23858:	100490fa 	slli	r2,r2,3
   2385c:	00c000f4 	movhi	r3,3
   23860:	18c08e04 	addi	r3,r3,568
   23864:	1885883a 	add	r2,r3,r2
   23868:	11800017 	ldw	r6,0(r2)
   2386c:	11c00117 	ldw	r7,4(r2)
   23870:	d8800717 	ldw	r2,28(sp)
   23874:	0009883a 	mov	r4,zero
   23878:	014ff834 	movhi	r5,16352
   2387c:	db001615 	stw	r12,88(sp)
   23880:	15c00044 	addi	r23,r2,1
   23884:	002b5cc0 	call	2b5cc <__divdf3>
   23888:	800d883a 	mov	r6,r16
   2388c:	880f883a 	mov	r7,r17
   23890:	1009883a 	mov	r4,r2
   23894:	180b883a 	mov	r5,r3
   23898:	002c8240 	call	2c824 <__subdf3>
   2389c:	d9401017 	ldw	r5,64(sp)
   238a0:	d9000f17 	ldw	r4,60(sp)
   238a4:	102b883a 	mov	r21,r2
   238a8:	d8c01215 	stw	r3,72(sp)
   238ac:	002d1200 	call	2d120 <__fixdfsi>
   238b0:	1009883a 	mov	r4,r2
   238b4:	1029883a 	mov	r20,r2
   238b8:	002d1a00 	call	2d1a0 <__floatsidf>
   238bc:	d9000f17 	ldw	r4,60(sp)
   238c0:	d9401017 	ldw	r5,64(sp)
   238c4:	100d883a 	mov	r6,r2
   238c8:	180f883a 	mov	r7,r3
   238cc:	002c8240 	call	2c824 <__subdf3>
   238d0:	1823883a 	mov	r17,r3
   238d4:	d8c00717 	ldw	r3,28(sp)
   238d8:	d9401217 	ldw	r5,72(sp)
   238dc:	a2000c04 	addi	r8,r20,48
   238e0:	1021883a 	mov	r16,r2
   238e4:	1a000005 	stb	r8,0(r3)
   238e8:	800d883a 	mov	r6,r16
   238ec:	880f883a 	mov	r7,r17
   238f0:	a809883a 	mov	r4,r21
   238f4:	4029883a 	mov	r20,r8
   238f8:	002bf3c0 	call	2bf3c <__gedf2>
   238fc:	00841d16 	blt	zero,r2,24974 <_dtoa_r+0x15f4>
   23900:	800d883a 	mov	r6,r16
   23904:	880f883a 	mov	r7,r17
   23908:	0009883a 	mov	r4,zero
   2390c:	014ffc34 	movhi	r5,16368
   23910:	002c8240 	call	2c824 <__subdf3>
   23914:	d9401217 	ldw	r5,72(sp)
   23918:	100d883a 	mov	r6,r2
   2391c:	180f883a 	mov	r7,r3
   23920:	a809883a 	mov	r4,r21
   23924:	002bf3c0 	call	2bf3c <__gedf2>
   23928:	db001617 	ldw	r12,88(sp)
   2392c:	00840e16 	blt	zero,r2,24968 <_dtoa_r+0x15e8>
   23930:	00800044 	movi	r2,1
   23934:	13006b0e 	bge	r2,r12,23ae4 <_dtoa_r+0x764>
   23938:	d9000717 	ldw	r4,28(sp)
   2393c:	dd800f15 	stw	r22,60(sp)
   23940:	dcc01015 	stw	r19,64(sp)
   23944:	2319883a 	add	r12,r4,r12
   23948:	dcc01217 	ldw	r19,72(sp)
   2394c:	602d883a 	mov	r22,r12
   23950:	dc801215 	stw	r18,72(sp)
   23954:	b825883a 	mov	r18,r23
   23958:	00000906 	br	23980 <_dtoa_r+0x600>
   2395c:	002c8240 	call	2c824 <__subdf3>
   23960:	a80d883a 	mov	r6,r21
   23964:	980f883a 	mov	r7,r19
   23968:	1009883a 	mov	r4,r2
   2396c:	180b883a 	mov	r5,r3
   23970:	002c0180 	call	2c018 <__ledf2>
   23974:	1003e816 	blt	r2,zero,24918 <_dtoa_r+0x1598>
   23978:	b825883a 	mov	r18,r23
   2397c:	bd83e926 	beq	r23,r22,24924 <_dtoa_r+0x15a4>
   23980:	a809883a 	mov	r4,r21
   23984:	980b883a 	mov	r5,r19
   23988:	000d883a 	mov	r6,zero
   2398c:	01d00934 	movhi	r7,16420
   23990:	002c10c0 	call	2c10c <__muldf3>
   23994:	000d883a 	mov	r6,zero
   23998:	01d00934 	movhi	r7,16420
   2399c:	8009883a 	mov	r4,r16
   239a0:	880b883a 	mov	r5,r17
   239a4:	102b883a 	mov	r21,r2
   239a8:	1827883a 	mov	r19,r3
   239ac:	002c10c0 	call	2c10c <__muldf3>
   239b0:	180b883a 	mov	r5,r3
   239b4:	1009883a 	mov	r4,r2
   239b8:	1821883a 	mov	r16,r3
   239bc:	1023883a 	mov	r17,r2
   239c0:	002d1200 	call	2d120 <__fixdfsi>
   239c4:	1009883a 	mov	r4,r2
   239c8:	1029883a 	mov	r20,r2
   239cc:	002d1a00 	call	2d1a0 <__floatsidf>
   239d0:	8809883a 	mov	r4,r17
   239d4:	800b883a 	mov	r5,r16
   239d8:	100d883a 	mov	r6,r2
   239dc:	180f883a 	mov	r7,r3
   239e0:	002c8240 	call	2c824 <__subdf3>
   239e4:	a5000c04 	addi	r20,r20,48
   239e8:	a80d883a 	mov	r6,r21
   239ec:	980f883a 	mov	r7,r19
   239f0:	1009883a 	mov	r4,r2
   239f4:	180b883a 	mov	r5,r3
   239f8:	95000005 	stb	r20,0(r18)
   239fc:	1021883a 	mov	r16,r2
   23a00:	1823883a 	mov	r17,r3
   23a04:	002c0180 	call	2c018 <__ledf2>
   23a08:	bdc00044 	addi	r23,r23,1
   23a0c:	800d883a 	mov	r6,r16
   23a10:	880f883a 	mov	r7,r17
   23a14:	0009883a 	mov	r4,zero
   23a18:	014ffc34 	movhi	r5,16368
   23a1c:	103fcf0e 	bge	r2,zero,2395c <__alt_data_end+0xfffe395c>
   23a20:	d8c01317 	ldw	r3,76(sp)
   23a24:	d8c00515 	stw	r3,20(sp)
   23a28:	d9400917 	ldw	r5,36(sp)
   23a2c:	e009883a 	mov	r4,fp
   23a30:	00264ac0 	call	264ac <_Bfree>
   23a34:	d9000517 	ldw	r4,20(sp)
   23a38:	d9802317 	ldw	r6,140(sp)
   23a3c:	d9c02517 	ldw	r7,148(sp)
   23a40:	b8000005 	stb	zero,0(r23)
   23a44:	20800044 	addi	r2,r4,1
   23a48:	30800015 	stw	r2,0(r6)
   23a4c:	3802aa26 	beq	r7,zero,244f8 <_dtoa_r+0x1178>
   23a50:	3dc00015 	stw	r23,0(r7)
   23a54:	d8800717 	ldw	r2,28(sp)
   23a58:	003e7906 	br	23440 <__alt_data_end+0xfffe3440>
   23a5c:	00800434 	movhi	r2,16
   23a60:	10bfffc4 	addi	r2,r2,-1
   23a64:	88a2703a 	and	r17,r17,r2
   23a68:	883e851e 	bne	r17,zero,23480 <__alt_data_end+0xfffe3480>
   23a6c:	008000f4 	movhi	r2,3
   23a70:	10806f04 	addi	r2,r2,444
   23a74:	003e8406 	br	23488 <__alt_data_end+0xfffe3488>
   23a78:	10c00204 	addi	r3,r2,8
   23a7c:	003e8706 	br	2349c <__alt_data_end+0xfffe349c>
   23a80:	01400434 	movhi	r5,16
   23a84:	297fffc4 	addi	r5,r5,-1
   23a88:	994a703a 	and	r5,r19,r5
   23a8c:	9009883a 	mov	r4,r18
   23a90:	843f0044 	addi	r16,r16,-1023
   23a94:	294ffc34 	orhi	r5,r5,16368
   23a98:	dd800217 	ldw	r22,8(sp)
   23a9c:	d8001115 	stw	zero,68(sp)
   23aa0:	003ea506 	br	23538 <__alt_data_end+0xfffe3538>
   23aa4:	008000f4 	movhi	r2,3
   23aa8:	10806604 	addi	r2,r2,408
   23aac:	003e6406 	br	23440 <__alt_data_end+0xfffe3440>
   23ab0:	e0001115 	stw	zero,68(fp)
   23ab4:	000b883a 	mov	r5,zero
   23ab8:	e009883a 	mov	r4,fp
   23abc:	00264040 	call	26404 <_Balloc>
   23ac0:	01bfffc4 	movi	r6,-1
   23ac4:	01c00044 	movi	r7,1
   23ac8:	d8800715 	stw	r2,28(sp)
   23acc:	d9800c15 	stw	r6,48(sp)
   23ad0:	e0801015 	stw	r2,64(fp)
   23ad4:	d8000315 	stw	zero,12(sp)
   23ad8:	d9c00b15 	stw	r7,44(sp)
   23adc:	d9800615 	stw	r6,24(sp)
   23ae0:	d8002215 	stw	zero,136(sp)
   23ae4:	d8800117 	ldw	r2,4(sp)
   23ae8:	10008916 	blt	r2,zero,23d10 <_dtoa_r+0x990>
   23aec:	d9000517 	ldw	r4,20(sp)
   23af0:	00c00384 	movi	r3,14
   23af4:	19008616 	blt	r3,r4,23d10 <_dtoa_r+0x990>
   23af8:	200490fa 	slli	r2,r4,3
   23afc:	00c000f4 	movhi	r3,3
   23b00:	d9802217 	ldw	r6,136(sp)
   23b04:	18c08e04 	addi	r3,r3,568
   23b08:	1885883a 	add	r2,r3,r2
   23b0c:	14000017 	ldw	r16,0(r2)
   23b10:	14400117 	ldw	r17,4(r2)
   23b14:	30016316 	blt	r6,zero,240a4 <_dtoa_r+0xd24>
   23b18:	800d883a 	mov	r6,r16
   23b1c:	880f883a 	mov	r7,r17
   23b20:	9009883a 	mov	r4,r18
   23b24:	980b883a 	mov	r5,r19
   23b28:	002b5cc0 	call	2b5cc <__divdf3>
   23b2c:	180b883a 	mov	r5,r3
   23b30:	1009883a 	mov	r4,r2
   23b34:	002d1200 	call	2d120 <__fixdfsi>
   23b38:	1009883a 	mov	r4,r2
   23b3c:	102b883a 	mov	r21,r2
   23b40:	002d1a00 	call	2d1a0 <__floatsidf>
   23b44:	800d883a 	mov	r6,r16
   23b48:	880f883a 	mov	r7,r17
   23b4c:	1009883a 	mov	r4,r2
   23b50:	180b883a 	mov	r5,r3
   23b54:	002c10c0 	call	2c10c <__muldf3>
   23b58:	100d883a 	mov	r6,r2
   23b5c:	180f883a 	mov	r7,r3
   23b60:	9009883a 	mov	r4,r18
   23b64:	980b883a 	mov	r5,r19
   23b68:	002c8240 	call	2c824 <__subdf3>
   23b6c:	d9c00717 	ldw	r7,28(sp)
   23b70:	1009883a 	mov	r4,r2
   23b74:	a8800c04 	addi	r2,r21,48
   23b78:	38800005 	stb	r2,0(r7)
   23b7c:	3dc00044 	addi	r23,r7,1
   23b80:	d9c00617 	ldw	r7,24(sp)
   23b84:	01800044 	movi	r6,1
   23b88:	180b883a 	mov	r5,r3
   23b8c:	2005883a 	mov	r2,r4
   23b90:	39803826 	beq	r7,r6,23c74 <_dtoa_r+0x8f4>
   23b94:	000d883a 	mov	r6,zero
   23b98:	01d00934 	movhi	r7,16420
   23b9c:	002c10c0 	call	2c10c <__muldf3>
   23ba0:	000d883a 	mov	r6,zero
   23ba4:	000f883a 	mov	r7,zero
   23ba8:	1009883a 	mov	r4,r2
   23bac:	180b883a 	mov	r5,r3
   23bb0:	1025883a 	mov	r18,r2
   23bb4:	1827883a 	mov	r19,r3
   23bb8:	002beb40 	call	2beb4 <__eqdf2>
   23bbc:	103f9a26 	beq	r2,zero,23a28 <__alt_data_end+0xfffe3a28>
   23bc0:	d9c00617 	ldw	r7,24(sp)
   23bc4:	d8c00717 	ldw	r3,28(sp)
   23bc8:	b829883a 	mov	r20,r23
   23bcc:	38bfffc4 	addi	r2,r7,-1
   23bd0:	18ad883a 	add	r22,r3,r2
   23bd4:	00000a06 	br	23c00 <_dtoa_r+0x880>
   23bd8:	002c10c0 	call	2c10c <__muldf3>
   23bdc:	000d883a 	mov	r6,zero
   23be0:	000f883a 	mov	r7,zero
   23be4:	1009883a 	mov	r4,r2
   23be8:	180b883a 	mov	r5,r3
   23bec:	1025883a 	mov	r18,r2
   23bf0:	1827883a 	mov	r19,r3
   23bf4:	b829883a 	mov	r20,r23
   23bf8:	002beb40 	call	2beb4 <__eqdf2>
   23bfc:	103f8a26 	beq	r2,zero,23a28 <__alt_data_end+0xfffe3a28>
   23c00:	800d883a 	mov	r6,r16
   23c04:	880f883a 	mov	r7,r17
   23c08:	9009883a 	mov	r4,r18
   23c0c:	980b883a 	mov	r5,r19
   23c10:	002b5cc0 	call	2b5cc <__divdf3>
   23c14:	180b883a 	mov	r5,r3
   23c18:	1009883a 	mov	r4,r2
   23c1c:	002d1200 	call	2d120 <__fixdfsi>
   23c20:	1009883a 	mov	r4,r2
   23c24:	102b883a 	mov	r21,r2
   23c28:	002d1a00 	call	2d1a0 <__floatsidf>
   23c2c:	800d883a 	mov	r6,r16
   23c30:	880f883a 	mov	r7,r17
   23c34:	1009883a 	mov	r4,r2
   23c38:	180b883a 	mov	r5,r3
   23c3c:	002c10c0 	call	2c10c <__muldf3>
   23c40:	100d883a 	mov	r6,r2
   23c44:	180f883a 	mov	r7,r3
   23c48:	9009883a 	mov	r4,r18
   23c4c:	980b883a 	mov	r5,r19
   23c50:	002c8240 	call	2c824 <__subdf3>
   23c54:	aa000c04 	addi	r8,r21,48
   23c58:	a2000005 	stb	r8,0(r20)
   23c5c:	000d883a 	mov	r6,zero
   23c60:	01d00934 	movhi	r7,16420
   23c64:	1009883a 	mov	r4,r2
   23c68:	180b883a 	mov	r5,r3
   23c6c:	a5c00044 	addi	r23,r20,1
   23c70:	b53fd91e 	bne	r22,r20,23bd8 <__alt_data_end+0xfffe3bd8>
   23c74:	100d883a 	mov	r6,r2
   23c78:	180f883a 	mov	r7,r3
   23c7c:	1009883a 	mov	r4,r2
   23c80:	180b883a 	mov	r5,r3
   23c84:	002ad200 	call	2ad20 <__adddf3>
   23c88:	100d883a 	mov	r6,r2
   23c8c:	180f883a 	mov	r7,r3
   23c90:	8009883a 	mov	r4,r16
   23c94:	880b883a 	mov	r5,r17
   23c98:	1027883a 	mov	r19,r2
   23c9c:	1825883a 	mov	r18,r3
   23ca0:	002c0180 	call	2c018 <__ledf2>
   23ca4:	10000816 	blt	r2,zero,23cc8 <_dtoa_r+0x948>
   23ca8:	980d883a 	mov	r6,r19
   23cac:	900f883a 	mov	r7,r18
   23cb0:	8009883a 	mov	r4,r16
   23cb4:	880b883a 	mov	r5,r17
   23cb8:	002beb40 	call	2beb4 <__eqdf2>
   23cbc:	103f5a1e 	bne	r2,zero,23a28 <__alt_data_end+0xfffe3a28>
   23cc0:	ad40004c 	andi	r21,r21,1
   23cc4:	a83f5826 	beq	r21,zero,23a28 <__alt_data_end+0xfffe3a28>
   23cc8:	bd3fffc3 	ldbu	r20,-1(r23)
   23ccc:	b8bfffc4 	addi	r2,r23,-1
   23cd0:	1007883a 	mov	r3,r2
   23cd4:	01400e44 	movi	r5,57
   23cd8:	d9800717 	ldw	r6,28(sp)
   23cdc:	00000506 	br	23cf4 <_dtoa_r+0x974>
   23ce0:	18ffffc4 	addi	r3,r3,-1
   23ce4:	11824726 	beq	r2,r6,24604 <_dtoa_r+0x1284>
   23ce8:	1d000003 	ldbu	r20,0(r3)
   23cec:	102f883a 	mov	r23,r2
   23cf0:	10bfffc4 	addi	r2,r2,-1
   23cf4:	a1003fcc 	andi	r4,r20,255
   23cf8:	2100201c 	xori	r4,r4,128
   23cfc:	213fe004 	addi	r4,r4,-128
   23d00:	217ff726 	beq	r4,r5,23ce0 <__alt_data_end+0xfffe3ce0>
   23d04:	a2000044 	addi	r8,r20,1
   23d08:	12000005 	stb	r8,0(r2)
   23d0c:	003f4606 	br	23a28 <__alt_data_end+0xfffe3a28>
   23d10:	d9000b17 	ldw	r4,44(sp)
   23d14:	2000c826 	beq	r4,zero,24038 <_dtoa_r+0xcb8>
   23d18:	d9800317 	ldw	r6,12(sp)
   23d1c:	00c00044 	movi	r3,1
   23d20:	1980f90e 	bge	r3,r6,24108 <_dtoa_r+0xd88>
   23d24:	d8800617 	ldw	r2,24(sp)
   23d28:	d8c00a17 	ldw	r3,40(sp)
   23d2c:	157fffc4 	addi	r21,r2,-1
   23d30:	1d41f316 	blt	r3,r21,24500 <_dtoa_r+0x1180>
   23d34:	1d6bc83a 	sub	r21,r3,r21
   23d38:	d9c00617 	ldw	r7,24(sp)
   23d3c:	3802aa16 	blt	r7,zero,247e8 <_dtoa_r+0x1468>
   23d40:	dd000817 	ldw	r20,32(sp)
   23d44:	d8800617 	ldw	r2,24(sp)
   23d48:	d8c00817 	ldw	r3,32(sp)
   23d4c:	01400044 	movi	r5,1
   23d50:	e009883a 	mov	r4,fp
   23d54:	1887883a 	add	r3,r3,r2
   23d58:	d8c00815 	stw	r3,32(sp)
   23d5c:	b0ad883a 	add	r22,r22,r2
   23d60:	00268100 	call	26810 <__i2b>
   23d64:	1023883a 	mov	r17,r2
   23d68:	a0000826 	beq	r20,zero,23d8c <_dtoa_r+0xa0c>
   23d6c:	0580070e 	bge	zero,r22,23d8c <_dtoa_r+0xa0c>
   23d70:	a005883a 	mov	r2,r20
   23d74:	b500b916 	blt	r22,r20,2405c <_dtoa_r+0xcdc>
   23d78:	d9000817 	ldw	r4,32(sp)
   23d7c:	a0a9c83a 	sub	r20,r20,r2
   23d80:	b0adc83a 	sub	r22,r22,r2
   23d84:	2089c83a 	sub	r4,r4,r2
   23d88:	d9000815 	stw	r4,32(sp)
   23d8c:	d9800a17 	ldw	r6,40(sp)
   23d90:	0181810e 	bge	zero,r6,24398 <_dtoa_r+0x1018>
   23d94:	d9c00b17 	ldw	r7,44(sp)
   23d98:	3800b326 	beq	r7,zero,24068 <_dtoa_r+0xce8>
   23d9c:	a800b226 	beq	r21,zero,24068 <_dtoa_r+0xce8>
   23da0:	880b883a 	mov	r5,r17
   23da4:	a80d883a 	mov	r6,r21
   23da8:	e009883a 	mov	r4,fp
   23dac:	0026a440 	call	26a44 <__pow5mult>
   23db0:	d9800917 	ldw	r6,36(sp)
   23db4:	100b883a 	mov	r5,r2
   23db8:	e009883a 	mov	r4,fp
   23dbc:	1023883a 	mov	r17,r2
   23dc0:	002684c0 	call	2684c <__multiply>
   23dc4:	1021883a 	mov	r16,r2
   23dc8:	d8800a17 	ldw	r2,40(sp)
   23dcc:	d9400917 	ldw	r5,36(sp)
   23dd0:	e009883a 	mov	r4,fp
   23dd4:	1545c83a 	sub	r2,r2,r21
   23dd8:	d8800a15 	stw	r2,40(sp)
   23ddc:	00264ac0 	call	264ac <_Bfree>
   23de0:	d8c00a17 	ldw	r3,40(sp)
   23de4:	18009f1e 	bne	r3,zero,24064 <_dtoa_r+0xce4>
   23de8:	05c00044 	movi	r23,1
   23dec:	e009883a 	mov	r4,fp
   23df0:	b80b883a 	mov	r5,r23
   23df4:	00268100 	call	26810 <__i2b>
   23df8:	d9000d17 	ldw	r4,52(sp)
   23dfc:	102b883a 	mov	r21,r2
   23e00:	2000ce26 	beq	r4,zero,2413c <_dtoa_r+0xdbc>
   23e04:	200d883a 	mov	r6,r4
   23e08:	100b883a 	mov	r5,r2
   23e0c:	e009883a 	mov	r4,fp
   23e10:	0026a440 	call	26a44 <__pow5mult>
   23e14:	d9800317 	ldw	r6,12(sp)
   23e18:	102b883a 	mov	r21,r2
   23e1c:	b981810e 	bge	r23,r6,24424 <_dtoa_r+0x10a4>
   23e20:	0027883a 	mov	r19,zero
   23e24:	a8800417 	ldw	r2,16(r21)
   23e28:	05c00804 	movi	r23,32
   23e2c:	10800104 	addi	r2,r2,4
   23e30:	1085883a 	add	r2,r2,r2
   23e34:	1085883a 	add	r2,r2,r2
   23e38:	a885883a 	add	r2,r21,r2
   23e3c:	11000017 	ldw	r4,0(r2)
   23e40:	00266f80 	call	266f8 <__hi0bits>
   23e44:	b885c83a 	sub	r2,r23,r2
   23e48:	1585883a 	add	r2,r2,r22
   23e4c:	108007cc 	andi	r2,r2,31
   23e50:	1000b326 	beq	r2,zero,24120 <_dtoa_r+0xda0>
   23e54:	00c00804 	movi	r3,32
   23e58:	1887c83a 	sub	r3,r3,r2
   23e5c:	01000104 	movi	r4,4
   23e60:	20c2cd0e 	bge	r4,r3,24998 <_dtoa_r+0x1618>
   23e64:	00c00704 	movi	r3,28
   23e68:	1885c83a 	sub	r2,r3,r2
   23e6c:	d8c00817 	ldw	r3,32(sp)
   23e70:	a0a9883a 	add	r20,r20,r2
   23e74:	b0ad883a 	add	r22,r22,r2
   23e78:	1887883a 	add	r3,r3,r2
   23e7c:	d8c00815 	stw	r3,32(sp)
   23e80:	d9800817 	ldw	r6,32(sp)
   23e84:	0180040e 	bge	zero,r6,23e98 <_dtoa_r+0xb18>
   23e88:	800b883a 	mov	r5,r16
   23e8c:	e009883a 	mov	r4,fp
   23e90:	0026b840 	call	26b84 <__lshift>
   23e94:	1021883a 	mov	r16,r2
   23e98:	0580050e 	bge	zero,r22,23eb0 <_dtoa_r+0xb30>
   23e9c:	a80b883a 	mov	r5,r21
   23ea0:	b00d883a 	mov	r6,r22
   23ea4:	e009883a 	mov	r4,fp
   23ea8:	0026b840 	call	26b84 <__lshift>
   23eac:	102b883a 	mov	r21,r2
   23eb0:	d9c00e17 	ldw	r7,56(sp)
   23eb4:	3801211e 	bne	r7,zero,2433c <_dtoa_r+0xfbc>
   23eb8:	d9800617 	ldw	r6,24(sp)
   23ebc:	0181380e 	bge	zero,r6,243a0 <_dtoa_r+0x1020>
   23ec0:	d8c00b17 	ldw	r3,44(sp)
   23ec4:	1800ab1e 	bne	r3,zero,24174 <_dtoa_r+0xdf4>
   23ec8:	dc800717 	ldw	r18,28(sp)
   23ecc:	dcc00617 	ldw	r19,24(sp)
   23ed0:	9029883a 	mov	r20,r18
   23ed4:	00000206 	br	23ee0 <_dtoa_r+0xb60>
   23ed8:	00264d40 	call	264d4 <__multadd>
   23edc:	1021883a 	mov	r16,r2
   23ee0:	a80b883a 	mov	r5,r21
   23ee4:	8009883a 	mov	r4,r16
   23ee8:	00231800 	call	23180 <quorem>
   23eec:	10800c04 	addi	r2,r2,48
   23ef0:	90800005 	stb	r2,0(r18)
   23ef4:	94800044 	addi	r18,r18,1
   23ef8:	9507c83a 	sub	r3,r18,r20
   23efc:	000f883a 	mov	r7,zero
   23f00:	01800284 	movi	r6,10
   23f04:	800b883a 	mov	r5,r16
   23f08:	e009883a 	mov	r4,fp
   23f0c:	1cfff216 	blt	r3,r19,23ed8 <__alt_data_end+0xfffe3ed8>
   23f10:	1011883a 	mov	r8,r2
   23f14:	d8800617 	ldw	r2,24(sp)
   23f18:	0082370e 	bge	zero,r2,247f8 <_dtoa_r+0x1478>
   23f1c:	d9000717 	ldw	r4,28(sp)
   23f20:	0025883a 	mov	r18,zero
   23f24:	20af883a 	add	r23,r4,r2
   23f28:	01800044 	movi	r6,1
   23f2c:	800b883a 	mov	r5,r16
   23f30:	e009883a 	mov	r4,fp
   23f34:	da001715 	stw	r8,92(sp)
   23f38:	0026b840 	call	26b84 <__lshift>
   23f3c:	a80b883a 	mov	r5,r21
   23f40:	1009883a 	mov	r4,r2
   23f44:	d8800915 	stw	r2,36(sp)
   23f48:	0026ccc0 	call	26ccc <__mcmp>
   23f4c:	da001717 	ldw	r8,92(sp)
   23f50:	0081800e 	bge	zero,r2,24554 <_dtoa_r+0x11d4>
   23f54:	b93fffc3 	ldbu	r4,-1(r23)
   23f58:	b8bfffc4 	addi	r2,r23,-1
   23f5c:	1007883a 	mov	r3,r2
   23f60:	01800e44 	movi	r6,57
   23f64:	d9c00717 	ldw	r7,28(sp)
   23f68:	00000506 	br	23f80 <_dtoa_r+0xc00>
   23f6c:	18ffffc4 	addi	r3,r3,-1
   23f70:	11c12326 	beq	r2,r7,24400 <_dtoa_r+0x1080>
   23f74:	19000003 	ldbu	r4,0(r3)
   23f78:	102f883a 	mov	r23,r2
   23f7c:	10bfffc4 	addi	r2,r2,-1
   23f80:	21403fcc 	andi	r5,r4,255
   23f84:	2940201c 	xori	r5,r5,128
   23f88:	297fe004 	addi	r5,r5,-128
   23f8c:	29bff726 	beq	r5,r6,23f6c <__alt_data_end+0xfffe3f6c>
   23f90:	21000044 	addi	r4,r4,1
   23f94:	11000005 	stb	r4,0(r2)
   23f98:	a80b883a 	mov	r5,r21
   23f9c:	e009883a 	mov	r4,fp
   23fa0:	00264ac0 	call	264ac <_Bfree>
   23fa4:	883ea026 	beq	r17,zero,23a28 <__alt_data_end+0xfffe3a28>
   23fa8:	90000426 	beq	r18,zero,23fbc <_dtoa_r+0xc3c>
   23fac:	94400326 	beq	r18,r17,23fbc <_dtoa_r+0xc3c>
   23fb0:	900b883a 	mov	r5,r18
   23fb4:	e009883a 	mov	r4,fp
   23fb8:	00264ac0 	call	264ac <_Bfree>
   23fbc:	880b883a 	mov	r5,r17
   23fc0:	e009883a 	mov	r4,fp
   23fc4:	00264ac0 	call	264ac <_Bfree>
   23fc8:	003e9706 	br	23a28 <__alt_data_end+0xfffe3a28>
   23fcc:	01800044 	movi	r6,1
   23fd0:	d9800e15 	stw	r6,56(sp)
   23fd4:	003d9606 	br	23630 <__alt_data_end+0xfffe3630>
   23fd8:	d8800817 	ldw	r2,32(sp)
   23fdc:	d8c00517 	ldw	r3,20(sp)
   23fe0:	d8000d15 	stw	zero,52(sp)
   23fe4:	10c5c83a 	sub	r2,r2,r3
   23fe8:	00c9c83a 	sub	r4,zero,r3
   23fec:	d8800815 	stw	r2,32(sp)
   23ff0:	d9000a15 	stw	r4,40(sp)
   23ff4:	003d9706 	br	23654 <__alt_data_end+0xfffe3654>
   23ff8:	05adc83a 	sub	r22,zero,r22
   23ffc:	dd800815 	stw	r22,32(sp)
   24000:	002d883a 	mov	r22,zero
   24004:	003d8e06 	br	23640 <__alt_data_end+0xfffe3640>
   24008:	d9000517 	ldw	r4,20(sp)
   2400c:	002d1a00 	call	2d1a0 <__floatsidf>
   24010:	100d883a 	mov	r6,r2
   24014:	180f883a 	mov	r7,r3
   24018:	a009883a 	mov	r4,r20
   2401c:	880b883a 	mov	r5,r17
   24020:	002beb40 	call	2beb4 <__eqdf2>
   24024:	103d7126 	beq	r2,zero,235ec <__alt_data_end+0xfffe35ec>
   24028:	d9c00517 	ldw	r7,20(sp)
   2402c:	39ffffc4 	addi	r7,r7,-1
   24030:	d9c00515 	stw	r7,20(sp)
   24034:	003d6d06 	br	235ec <__alt_data_end+0xfffe35ec>
   24038:	dd400a17 	ldw	r21,40(sp)
   2403c:	dd000817 	ldw	r20,32(sp)
   24040:	0023883a 	mov	r17,zero
   24044:	003f4806 	br	23d68 <__alt_data_end+0xfffe3d68>
   24048:	10e3c83a 	sub	r17,r2,r3
   2404c:	9448983a 	sll	r4,r18,r17
   24050:	003d3206 	br	2351c <__alt_data_end+0xfffe351c>
   24054:	d8000e15 	stw	zero,56(sp)
   24058:	003d7506 	br	23630 <__alt_data_end+0xfffe3630>
   2405c:	b005883a 	mov	r2,r22
   24060:	003f4506 	br	23d78 <__alt_data_end+0xfffe3d78>
   24064:	dc000915 	stw	r16,36(sp)
   24068:	d9800a17 	ldw	r6,40(sp)
   2406c:	d9400917 	ldw	r5,36(sp)
   24070:	e009883a 	mov	r4,fp
   24074:	0026a440 	call	26a44 <__pow5mult>
   24078:	1021883a 	mov	r16,r2
   2407c:	003f5a06 	br	23de8 <__alt_data_end+0xfffe3de8>
   24080:	01c00044 	movi	r7,1
   24084:	d9c00b15 	stw	r7,44(sp)
   24088:	d8802217 	ldw	r2,136(sp)
   2408c:	0081280e 	bge	zero,r2,24530 <_dtoa_r+0x11b0>
   24090:	100d883a 	mov	r6,r2
   24094:	1021883a 	mov	r16,r2
   24098:	d8800c15 	stw	r2,48(sp)
   2409c:	d8800615 	stw	r2,24(sp)
   240a0:	003d8806 	br	236c4 <__alt_data_end+0xfffe36c4>
   240a4:	d8800617 	ldw	r2,24(sp)
   240a8:	00be9b16 	blt	zero,r2,23b18 <__alt_data_end+0xfffe3b18>
   240ac:	10010f1e 	bne	r2,zero,244ec <_dtoa_r+0x116c>
   240b0:	880b883a 	mov	r5,r17
   240b4:	000d883a 	mov	r6,zero
   240b8:	01d00534 	movhi	r7,16404
   240bc:	8009883a 	mov	r4,r16
   240c0:	002c10c0 	call	2c10c <__muldf3>
   240c4:	900d883a 	mov	r6,r18
   240c8:	980f883a 	mov	r7,r19
   240cc:	1009883a 	mov	r4,r2
   240d0:	180b883a 	mov	r5,r3
   240d4:	002bf3c0 	call	2bf3c <__gedf2>
   240d8:	002b883a 	mov	r21,zero
   240dc:	0023883a 	mov	r17,zero
   240e0:	1000bf16 	blt	r2,zero,243e0 <_dtoa_r+0x1060>
   240e4:	d9802217 	ldw	r6,136(sp)
   240e8:	ddc00717 	ldw	r23,28(sp)
   240ec:	018c303a 	nor	r6,zero,r6
   240f0:	d9800515 	stw	r6,20(sp)
   240f4:	a80b883a 	mov	r5,r21
   240f8:	e009883a 	mov	r4,fp
   240fc:	00264ac0 	call	264ac <_Bfree>
   24100:	883e4926 	beq	r17,zero,23a28 <__alt_data_end+0xfffe3a28>
   24104:	003fad06 	br	23fbc <__alt_data_end+0xfffe3fbc>
   24108:	d9c01117 	ldw	r7,68(sp)
   2410c:	3801bc26 	beq	r7,zero,24800 <_dtoa_r+0x1480>
   24110:	10810cc4 	addi	r2,r2,1075
   24114:	dd400a17 	ldw	r21,40(sp)
   24118:	dd000817 	ldw	r20,32(sp)
   2411c:	003f0a06 	br	23d48 <__alt_data_end+0xfffe3d48>
   24120:	00800704 	movi	r2,28
   24124:	d9000817 	ldw	r4,32(sp)
   24128:	a0a9883a 	add	r20,r20,r2
   2412c:	b0ad883a 	add	r22,r22,r2
   24130:	2089883a 	add	r4,r4,r2
   24134:	d9000815 	stw	r4,32(sp)
   24138:	003f5106 	br	23e80 <__alt_data_end+0xfffe3e80>
   2413c:	d8c00317 	ldw	r3,12(sp)
   24140:	b8c1fc0e 	bge	r23,r3,24934 <_dtoa_r+0x15b4>
   24144:	0027883a 	mov	r19,zero
   24148:	b805883a 	mov	r2,r23
   2414c:	003f3e06 	br	23e48 <__alt_data_end+0xfffe3e48>
   24150:	880b883a 	mov	r5,r17
   24154:	e009883a 	mov	r4,fp
   24158:	000f883a 	mov	r7,zero
   2415c:	01800284 	movi	r6,10
   24160:	00264d40 	call	264d4 <__multadd>
   24164:	d9000c17 	ldw	r4,48(sp)
   24168:	1023883a 	mov	r17,r2
   2416c:	0102040e 	bge	zero,r4,24980 <_dtoa_r+0x1600>
   24170:	d9000615 	stw	r4,24(sp)
   24174:	0500050e 	bge	zero,r20,2418c <_dtoa_r+0xe0c>
   24178:	880b883a 	mov	r5,r17
   2417c:	a00d883a 	mov	r6,r20
   24180:	e009883a 	mov	r4,fp
   24184:	0026b840 	call	26b84 <__lshift>
   24188:	1023883a 	mov	r17,r2
   2418c:	9801241e 	bne	r19,zero,24620 <_dtoa_r+0x12a0>
   24190:	8829883a 	mov	r20,r17
   24194:	d9000617 	ldw	r4,24(sp)
   24198:	dcc00717 	ldw	r19,28(sp)
   2419c:	9480004c 	andi	r18,r18,1
   241a0:	20bfffc4 	addi	r2,r4,-1
   241a4:	9885883a 	add	r2,r19,r2
   241a8:	d8800415 	stw	r2,16(sp)
   241ac:	dc800615 	stw	r18,24(sp)
   241b0:	a80b883a 	mov	r5,r21
   241b4:	8009883a 	mov	r4,r16
   241b8:	00231800 	call	23180 <quorem>
   241bc:	880b883a 	mov	r5,r17
   241c0:	8009883a 	mov	r4,r16
   241c4:	102f883a 	mov	r23,r2
   241c8:	0026ccc0 	call	26ccc <__mcmp>
   241cc:	a80b883a 	mov	r5,r21
   241d0:	a00d883a 	mov	r6,r20
   241d4:	e009883a 	mov	r4,fp
   241d8:	102d883a 	mov	r22,r2
   241dc:	0026d2c0 	call	26d2c <__mdiff>
   241e0:	1007883a 	mov	r3,r2
   241e4:	10800317 	ldw	r2,12(r2)
   241e8:	bc800c04 	addi	r18,r23,48
   241ec:	180b883a 	mov	r5,r3
   241f0:	10004e1e 	bne	r2,zero,2432c <_dtoa_r+0xfac>
   241f4:	8009883a 	mov	r4,r16
   241f8:	d8c01615 	stw	r3,88(sp)
   241fc:	0026ccc0 	call	26ccc <__mcmp>
   24200:	d8c01617 	ldw	r3,88(sp)
   24204:	e009883a 	mov	r4,fp
   24208:	d8801615 	stw	r2,88(sp)
   2420c:	180b883a 	mov	r5,r3
   24210:	00264ac0 	call	264ac <_Bfree>
   24214:	d8801617 	ldw	r2,88(sp)
   24218:	1000041e 	bne	r2,zero,2422c <_dtoa_r+0xeac>
   2421c:	d9800317 	ldw	r6,12(sp)
   24220:	3000021e 	bne	r6,zero,2422c <_dtoa_r+0xeac>
   24224:	d8c00617 	ldw	r3,24(sp)
   24228:	18003726 	beq	r3,zero,24308 <_dtoa_r+0xf88>
   2422c:	b0002016 	blt	r22,zero,242b0 <_dtoa_r+0xf30>
   24230:	b000041e 	bne	r22,zero,24244 <_dtoa_r+0xec4>
   24234:	d9000317 	ldw	r4,12(sp)
   24238:	2000021e 	bne	r4,zero,24244 <_dtoa_r+0xec4>
   2423c:	d8c00617 	ldw	r3,24(sp)
   24240:	18001b26 	beq	r3,zero,242b0 <_dtoa_r+0xf30>
   24244:	00810716 	blt	zero,r2,24664 <_dtoa_r+0x12e4>
   24248:	d8c00417 	ldw	r3,16(sp)
   2424c:	9d800044 	addi	r22,r19,1
   24250:	9c800005 	stb	r18,0(r19)
   24254:	b02f883a 	mov	r23,r22
   24258:	98c10626 	beq	r19,r3,24674 <_dtoa_r+0x12f4>
   2425c:	800b883a 	mov	r5,r16
   24260:	000f883a 	mov	r7,zero
   24264:	01800284 	movi	r6,10
   24268:	e009883a 	mov	r4,fp
   2426c:	00264d40 	call	264d4 <__multadd>
   24270:	1021883a 	mov	r16,r2
   24274:	000f883a 	mov	r7,zero
   24278:	01800284 	movi	r6,10
   2427c:	880b883a 	mov	r5,r17
   24280:	e009883a 	mov	r4,fp
   24284:	8d002526 	beq	r17,r20,2431c <_dtoa_r+0xf9c>
   24288:	00264d40 	call	264d4 <__multadd>
   2428c:	a00b883a 	mov	r5,r20
   24290:	000f883a 	mov	r7,zero
   24294:	01800284 	movi	r6,10
   24298:	e009883a 	mov	r4,fp
   2429c:	1023883a 	mov	r17,r2
   242a0:	00264d40 	call	264d4 <__multadd>
   242a4:	1029883a 	mov	r20,r2
   242a8:	b027883a 	mov	r19,r22
   242ac:	003fc006 	br	241b0 <__alt_data_end+0xfffe41b0>
   242b0:	9011883a 	mov	r8,r18
   242b4:	00800e0e 	bge	zero,r2,242f0 <_dtoa_r+0xf70>
   242b8:	800b883a 	mov	r5,r16
   242bc:	01800044 	movi	r6,1
   242c0:	e009883a 	mov	r4,fp
   242c4:	da001715 	stw	r8,92(sp)
   242c8:	0026b840 	call	26b84 <__lshift>
   242cc:	a80b883a 	mov	r5,r21
   242d0:	1009883a 	mov	r4,r2
   242d4:	1021883a 	mov	r16,r2
   242d8:	0026ccc0 	call	26ccc <__mcmp>
   242dc:	da001717 	ldw	r8,92(sp)
   242e0:	0081960e 	bge	zero,r2,2493c <_dtoa_r+0x15bc>
   242e4:	00800e44 	movi	r2,57
   242e8:	40817026 	beq	r8,r2,248ac <_dtoa_r+0x152c>
   242ec:	ba000c44 	addi	r8,r23,49
   242f0:	8825883a 	mov	r18,r17
   242f4:	9dc00044 	addi	r23,r19,1
   242f8:	9a000005 	stb	r8,0(r19)
   242fc:	a023883a 	mov	r17,r20
   24300:	dc000915 	stw	r16,36(sp)
   24304:	003f2406 	br	23f98 <__alt_data_end+0xfffe3f98>
   24308:	00800e44 	movi	r2,57
   2430c:	9011883a 	mov	r8,r18
   24310:	90816626 	beq	r18,r2,248ac <_dtoa_r+0x152c>
   24314:	05bff516 	blt	zero,r22,242ec <__alt_data_end+0xfffe42ec>
   24318:	003ff506 	br	242f0 <__alt_data_end+0xfffe42f0>
   2431c:	00264d40 	call	264d4 <__multadd>
   24320:	1023883a 	mov	r17,r2
   24324:	1029883a 	mov	r20,r2
   24328:	003fdf06 	br	242a8 <__alt_data_end+0xfffe42a8>
   2432c:	e009883a 	mov	r4,fp
   24330:	00264ac0 	call	264ac <_Bfree>
   24334:	00800044 	movi	r2,1
   24338:	003fbc06 	br	2422c <__alt_data_end+0xfffe422c>
   2433c:	a80b883a 	mov	r5,r21
   24340:	8009883a 	mov	r4,r16
   24344:	0026ccc0 	call	26ccc <__mcmp>
   24348:	103edb0e 	bge	r2,zero,23eb8 <__alt_data_end+0xfffe3eb8>
   2434c:	800b883a 	mov	r5,r16
   24350:	000f883a 	mov	r7,zero
   24354:	01800284 	movi	r6,10
   24358:	e009883a 	mov	r4,fp
   2435c:	00264d40 	call	264d4 <__multadd>
   24360:	1021883a 	mov	r16,r2
   24364:	d8800517 	ldw	r2,20(sp)
   24368:	d8c00b17 	ldw	r3,44(sp)
   2436c:	10bfffc4 	addi	r2,r2,-1
   24370:	d8800515 	stw	r2,20(sp)
   24374:	183f761e 	bne	r3,zero,24150 <__alt_data_end+0xfffe4150>
   24378:	d9000c17 	ldw	r4,48(sp)
   2437c:	0101730e 	bge	zero,r4,2494c <_dtoa_r+0x15cc>
   24380:	d9000615 	stw	r4,24(sp)
   24384:	003ed006 	br	23ec8 <__alt_data_end+0xfffe3ec8>
   24388:	00800084 	movi	r2,2
   2438c:	3081861e 	bne	r6,r2,249a8 <_dtoa_r+0x1628>
   24390:	d8000b15 	stw	zero,44(sp)
   24394:	003f3c06 	br	24088 <__alt_data_end+0xfffe4088>
   24398:	dc000917 	ldw	r16,36(sp)
   2439c:	003e9206 	br	23de8 <__alt_data_end+0xfffe3de8>
   243a0:	d9c00317 	ldw	r7,12(sp)
   243a4:	00800084 	movi	r2,2
   243a8:	11fec50e 	bge	r2,r7,23ec0 <__alt_data_end+0xfffe3ec0>
   243ac:	d9000617 	ldw	r4,24(sp)
   243b0:	20013c1e 	bne	r4,zero,248a4 <_dtoa_r+0x1524>
   243b4:	a80b883a 	mov	r5,r21
   243b8:	000f883a 	mov	r7,zero
   243bc:	01800144 	movi	r6,5
   243c0:	e009883a 	mov	r4,fp
   243c4:	00264d40 	call	264d4 <__multadd>
   243c8:	100b883a 	mov	r5,r2
   243cc:	8009883a 	mov	r4,r16
   243d0:	102b883a 	mov	r21,r2
   243d4:	0026ccc0 	call	26ccc <__mcmp>
   243d8:	dc000915 	stw	r16,36(sp)
   243dc:	00bf410e 	bge	zero,r2,240e4 <__alt_data_end+0xfffe40e4>
   243e0:	d9c00717 	ldw	r7,28(sp)
   243e4:	00800c44 	movi	r2,49
   243e8:	38800005 	stb	r2,0(r7)
   243ec:	d8800517 	ldw	r2,20(sp)
   243f0:	3dc00044 	addi	r23,r7,1
   243f4:	10800044 	addi	r2,r2,1
   243f8:	d8800515 	stw	r2,20(sp)
   243fc:	003f3d06 	br	240f4 <__alt_data_end+0xfffe40f4>
   24400:	d9800517 	ldw	r6,20(sp)
   24404:	d9c00717 	ldw	r7,28(sp)
   24408:	00800c44 	movi	r2,49
   2440c:	31800044 	addi	r6,r6,1
   24410:	d9800515 	stw	r6,20(sp)
   24414:	38800005 	stb	r2,0(r7)
   24418:	003edf06 	br	23f98 <__alt_data_end+0xfffe3f98>
   2441c:	d8000b15 	stw	zero,44(sp)
   24420:	003c9f06 	br	236a0 <__alt_data_end+0xfffe36a0>
   24424:	903e7e1e 	bne	r18,zero,23e20 <__alt_data_end+0xfffe3e20>
   24428:	00800434 	movhi	r2,16
   2442c:	10bfffc4 	addi	r2,r2,-1
   24430:	9884703a 	and	r2,r19,r2
   24434:	1000ea1e 	bne	r2,zero,247e0 <_dtoa_r+0x1460>
   24438:	9cdffc2c 	andhi	r19,r19,32752
   2443c:	9800e826 	beq	r19,zero,247e0 <_dtoa_r+0x1460>
   24440:	d9c00817 	ldw	r7,32(sp)
   24444:	b5800044 	addi	r22,r22,1
   24448:	04c00044 	movi	r19,1
   2444c:	39c00044 	addi	r7,r7,1
   24450:	d9c00815 	stw	r7,32(sp)
   24454:	d8800d17 	ldw	r2,52(sp)
   24458:	103e721e 	bne	r2,zero,23e24 <__alt_data_end+0xfffe3e24>
   2445c:	00800044 	movi	r2,1
   24460:	003e7906 	br	23e48 <__alt_data_end+0xfffe3e48>
   24464:	8009883a 	mov	r4,r16
   24468:	002d1a00 	call	2d1a0 <__floatsidf>
   2446c:	d9800f17 	ldw	r6,60(sp)
   24470:	d9c01017 	ldw	r7,64(sp)
   24474:	1009883a 	mov	r4,r2
   24478:	180b883a 	mov	r5,r3
   2447c:	002c10c0 	call	2c10c <__muldf3>
   24480:	000d883a 	mov	r6,zero
   24484:	01d00734 	movhi	r7,16412
   24488:	1009883a 	mov	r4,r2
   2448c:	180b883a 	mov	r5,r3
   24490:	002ad200 	call	2ad20 <__adddf3>
   24494:	047f3034 	movhi	r17,64704
   24498:	1021883a 	mov	r16,r2
   2449c:	1c63883a 	add	r17,r3,r17
   244a0:	d9000f17 	ldw	r4,60(sp)
   244a4:	d9401017 	ldw	r5,64(sp)
   244a8:	000d883a 	mov	r6,zero
   244ac:	01d00534 	movhi	r7,16404
   244b0:	002c8240 	call	2c824 <__subdf3>
   244b4:	800d883a 	mov	r6,r16
   244b8:	880f883a 	mov	r7,r17
   244bc:	1009883a 	mov	r4,r2
   244c0:	180b883a 	mov	r5,r3
   244c4:	102b883a 	mov	r21,r2
   244c8:	1829883a 	mov	r20,r3
   244cc:	002bf3c0 	call	2bf3c <__gedf2>
   244d0:	00806c16 	blt	zero,r2,24684 <_dtoa_r+0x1304>
   244d4:	89e0003c 	xorhi	r7,r17,32768
   244d8:	800d883a 	mov	r6,r16
   244dc:	a809883a 	mov	r4,r21
   244e0:	a00b883a 	mov	r5,r20
   244e4:	002c0180 	call	2c018 <__ledf2>
   244e8:	103d7e0e 	bge	r2,zero,23ae4 <__alt_data_end+0xfffe3ae4>
   244ec:	002b883a 	mov	r21,zero
   244f0:	0023883a 	mov	r17,zero
   244f4:	003efb06 	br	240e4 <__alt_data_end+0xfffe40e4>
   244f8:	d8800717 	ldw	r2,28(sp)
   244fc:	003bd006 	br	23440 <__alt_data_end+0xfffe3440>
   24500:	d9000a17 	ldw	r4,40(sp)
   24504:	d9800d17 	ldw	r6,52(sp)
   24508:	dd400a15 	stw	r21,40(sp)
   2450c:	a905c83a 	sub	r2,r21,r4
   24510:	308d883a 	add	r6,r6,r2
   24514:	d9800d15 	stw	r6,52(sp)
   24518:	002b883a 	mov	r21,zero
   2451c:	003e0606 	br	23d38 <__alt_data_end+0xfffe3d38>
   24520:	9023883a 	mov	r17,r18
   24524:	9829883a 	mov	r20,r19
   24528:	04000084 	movi	r16,2
   2452c:	003c9206 	br	23778 <__alt_data_end+0xfffe3778>
   24530:	04000044 	movi	r16,1
   24534:	dc000c15 	stw	r16,48(sp)
   24538:	dc000615 	stw	r16,24(sp)
   2453c:	dc002215 	stw	r16,136(sp)
   24540:	e0001115 	stw	zero,68(fp)
   24544:	000b883a 	mov	r5,zero
   24548:	003c6906 	br	236f0 <__alt_data_end+0xfffe36f0>
   2454c:	3021883a 	mov	r16,r6
   24550:	003ffb06 	br	24540 <__alt_data_end+0xfffe4540>
   24554:	1000021e 	bne	r2,zero,24560 <_dtoa_r+0x11e0>
   24558:	4200004c 	andi	r8,r8,1
   2455c:	403e7d1e 	bne	r8,zero,23f54 <__alt_data_end+0xfffe3f54>
   24560:	01000c04 	movi	r4,48
   24564:	00000106 	br	2456c <_dtoa_r+0x11ec>
   24568:	102f883a 	mov	r23,r2
   2456c:	b8bfffc4 	addi	r2,r23,-1
   24570:	10c00007 	ldb	r3,0(r2)
   24574:	193ffc26 	beq	r3,r4,24568 <__alt_data_end+0xfffe4568>
   24578:	003e8706 	br	23f98 <__alt_data_end+0xfffe3f98>
   2457c:	d8800517 	ldw	r2,20(sp)
   24580:	00a3c83a 	sub	r17,zero,r2
   24584:	8800a426 	beq	r17,zero,24818 <_dtoa_r+0x1498>
   24588:	888003cc 	andi	r2,r17,15
   2458c:	100490fa 	slli	r2,r2,3
   24590:	00c000f4 	movhi	r3,3
   24594:	18c08e04 	addi	r3,r3,568
   24598:	1885883a 	add	r2,r3,r2
   2459c:	11800017 	ldw	r6,0(r2)
   245a0:	11c00117 	ldw	r7,4(r2)
   245a4:	9009883a 	mov	r4,r18
   245a8:	980b883a 	mov	r5,r19
   245ac:	8823d13a 	srai	r17,r17,4
   245b0:	002c10c0 	call	2c10c <__muldf3>
   245b4:	d8800f15 	stw	r2,60(sp)
   245b8:	d8c01015 	stw	r3,64(sp)
   245bc:	8800e826 	beq	r17,zero,24960 <_dtoa_r+0x15e0>
   245c0:	050000f4 	movhi	r20,3
   245c4:	a5008404 	addi	r20,r20,528
   245c8:	04000084 	movi	r16,2
   245cc:	8980004c 	andi	r6,r17,1
   245d0:	1009883a 	mov	r4,r2
   245d4:	8823d07a 	srai	r17,r17,1
   245d8:	180b883a 	mov	r5,r3
   245dc:	30000426 	beq	r6,zero,245f0 <_dtoa_r+0x1270>
   245e0:	a1800017 	ldw	r6,0(r20)
   245e4:	a1c00117 	ldw	r7,4(r20)
   245e8:	84000044 	addi	r16,r16,1
   245ec:	002c10c0 	call	2c10c <__muldf3>
   245f0:	a5000204 	addi	r20,r20,8
   245f4:	883ff51e 	bne	r17,zero,245cc <__alt_data_end+0xfffe45cc>
   245f8:	d8800f15 	stw	r2,60(sp)
   245fc:	d8c01015 	stw	r3,64(sp)
   24600:	003c7606 	br	237dc <__alt_data_end+0xfffe37dc>
   24604:	00c00c04 	movi	r3,48
   24608:	10c00005 	stb	r3,0(r2)
   2460c:	d8c00517 	ldw	r3,20(sp)
   24610:	bd3fffc3 	ldbu	r20,-1(r23)
   24614:	18c00044 	addi	r3,r3,1
   24618:	d8c00515 	stw	r3,20(sp)
   2461c:	003db906 	br	23d04 <__alt_data_end+0xfffe3d04>
   24620:	89400117 	ldw	r5,4(r17)
   24624:	e009883a 	mov	r4,fp
   24628:	00264040 	call	26404 <_Balloc>
   2462c:	89800417 	ldw	r6,16(r17)
   24630:	89400304 	addi	r5,r17,12
   24634:	11000304 	addi	r4,r2,12
   24638:	31800084 	addi	r6,r6,2
   2463c:	318d883a 	add	r6,r6,r6
   24640:	318d883a 	add	r6,r6,r6
   24644:	1027883a 	mov	r19,r2
   24648:	00261940 	call	26194 <memcpy>
   2464c:	01800044 	movi	r6,1
   24650:	980b883a 	mov	r5,r19
   24654:	e009883a 	mov	r4,fp
   24658:	0026b840 	call	26b84 <__lshift>
   2465c:	1029883a 	mov	r20,r2
   24660:	003ecc06 	br	24194 <__alt_data_end+0xfffe4194>
   24664:	00800e44 	movi	r2,57
   24668:	90809026 	beq	r18,r2,248ac <_dtoa_r+0x152c>
   2466c:	92000044 	addi	r8,r18,1
   24670:	003f1f06 	br	242f0 <__alt_data_end+0xfffe42f0>
   24674:	9011883a 	mov	r8,r18
   24678:	8825883a 	mov	r18,r17
   2467c:	a023883a 	mov	r17,r20
   24680:	003e2906 	br	23f28 <__alt_data_end+0xfffe3f28>
   24684:	002b883a 	mov	r21,zero
   24688:	0023883a 	mov	r17,zero
   2468c:	003f5406 	br	243e0 <__alt_data_end+0xfffe43e0>
   24690:	61bfffc4 	addi	r6,r12,-1
   24694:	300490fa 	slli	r2,r6,3
   24698:	00c000f4 	movhi	r3,3
   2469c:	18c08e04 	addi	r3,r3,568
   246a0:	1885883a 	add	r2,r3,r2
   246a4:	11000017 	ldw	r4,0(r2)
   246a8:	11400117 	ldw	r5,4(r2)
   246ac:	d8800717 	ldw	r2,28(sp)
   246b0:	880f883a 	mov	r7,r17
   246b4:	d9801215 	stw	r6,72(sp)
   246b8:	800d883a 	mov	r6,r16
   246bc:	db001615 	stw	r12,88(sp)
   246c0:	15c00044 	addi	r23,r2,1
   246c4:	002c10c0 	call	2c10c <__muldf3>
   246c8:	d9401017 	ldw	r5,64(sp)
   246cc:	d9000f17 	ldw	r4,60(sp)
   246d0:	d8c01515 	stw	r3,84(sp)
   246d4:	d8801415 	stw	r2,80(sp)
   246d8:	002d1200 	call	2d120 <__fixdfsi>
   246dc:	1009883a 	mov	r4,r2
   246e0:	1021883a 	mov	r16,r2
   246e4:	002d1a00 	call	2d1a0 <__floatsidf>
   246e8:	d9000f17 	ldw	r4,60(sp)
   246ec:	d9401017 	ldw	r5,64(sp)
   246f0:	100d883a 	mov	r6,r2
   246f4:	180f883a 	mov	r7,r3
   246f8:	002c8240 	call	2c824 <__subdf3>
   246fc:	1829883a 	mov	r20,r3
   24700:	d8c00717 	ldw	r3,28(sp)
   24704:	84000c04 	addi	r16,r16,48
   24708:	1023883a 	mov	r17,r2
   2470c:	1c000005 	stb	r16,0(r3)
   24710:	db001617 	ldw	r12,88(sp)
   24714:	00800044 	movi	r2,1
   24718:	60802226 	beq	r12,r2,247a4 <_dtoa_r+0x1424>
   2471c:	d9c00717 	ldw	r7,28(sp)
   24720:	8805883a 	mov	r2,r17
   24724:	b82b883a 	mov	r21,r23
   24728:	3b19883a 	add	r12,r7,r12
   2472c:	6023883a 	mov	r17,r12
   24730:	a007883a 	mov	r3,r20
   24734:	dc800f15 	stw	r18,60(sp)
   24738:	000d883a 	mov	r6,zero
   2473c:	01d00934 	movhi	r7,16420
   24740:	1009883a 	mov	r4,r2
   24744:	180b883a 	mov	r5,r3
   24748:	002c10c0 	call	2c10c <__muldf3>
   2474c:	180b883a 	mov	r5,r3
   24750:	1009883a 	mov	r4,r2
   24754:	1829883a 	mov	r20,r3
   24758:	1025883a 	mov	r18,r2
   2475c:	002d1200 	call	2d120 <__fixdfsi>
   24760:	1009883a 	mov	r4,r2
   24764:	1021883a 	mov	r16,r2
   24768:	002d1a00 	call	2d1a0 <__floatsidf>
   2476c:	100d883a 	mov	r6,r2
   24770:	180f883a 	mov	r7,r3
   24774:	9009883a 	mov	r4,r18
   24778:	a00b883a 	mov	r5,r20
   2477c:	84000c04 	addi	r16,r16,48
   24780:	002c8240 	call	2c824 <__subdf3>
   24784:	ad400044 	addi	r21,r21,1
   24788:	ac3fffc5 	stb	r16,-1(r21)
   2478c:	ac7fea1e 	bne	r21,r17,24738 <__alt_data_end+0xfffe4738>
   24790:	1023883a 	mov	r17,r2
   24794:	d8801217 	ldw	r2,72(sp)
   24798:	dc800f17 	ldw	r18,60(sp)
   2479c:	1829883a 	mov	r20,r3
   247a0:	b8af883a 	add	r23,r23,r2
   247a4:	d9001417 	ldw	r4,80(sp)
   247a8:	d9401517 	ldw	r5,84(sp)
   247ac:	000d883a 	mov	r6,zero
   247b0:	01cff834 	movhi	r7,16352
   247b4:	002ad200 	call	2ad20 <__adddf3>
   247b8:	880d883a 	mov	r6,r17
   247bc:	a00f883a 	mov	r7,r20
   247c0:	1009883a 	mov	r4,r2
   247c4:	180b883a 	mov	r5,r3
   247c8:	002c0180 	call	2c018 <__ledf2>
   247cc:	10003e0e 	bge	r2,zero,248c8 <_dtoa_r+0x1548>
   247d0:	d9001317 	ldw	r4,76(sp)
   247d4:	bd3fffc3 	ldbu	r20,-1(r23)
   247d8:	d9000515 	stw	r4,20(sp)
   247dc:	003d3b06 	br	23ccc <__alt_data_end+0xfffe3ccc>
   247e0:	0027883a 	mov	r19,zero
   247e4:	003f1b06 	br	24454 <__alt_data_end+0xfffe4454>
   247e8:	d8800817 	ldw	r2,32(sp)
   247ec:	11e9c83a 	sub	r20,r2,r7
   247f0:	0005883a 	mov	r2,zero
   247f4:	003d5406 	br	23d48 <__alt_data_end+0xfffe3d48>
   247f8:	00800044 	movi	r2,1
   247fc:	003dc706 	br	23f1c <__alt_data_end+0xfffe3f1c>
   24800:	d8c00217 	ldw	r3,8(sp)
   24804:	00800d84 	movi	r2,54
   24808:	dd400a17 	ldw	r21,40(sp)
   2480c:	10c5c83a 	sub	r2,r2,r3
   24810:	dd000817 	ldw	r20,32(sp)
   24814:	003d4c06 	br	23d48 <__alt_data_end+0xfffe3d48>
   24818:	dc800f15 	stw	r18,60(sp)
   2481c:	dcc01015 	stw	r19,64(sp)
   24820:	04000084 	movi	r16,2
   24824:	003bed06 	br	237dc <__alt_data_end+0xfffe37dc>
   24828:	d9000617 	ldw	r4,24(sp)
   2482c:	203f0d26 	beq	r4,zero,24464 <__alt_data_end+0xfffe4464>
   24830:	d9800c17 	ldw	r6,48(sp)
   24834:	01bcab0e 	bge	zero,r6,23ae4 <__alt_data_end+0xfffe3ae4>
   24838:	d9401017 	ldw	r5,64(sp)
   2483c:	d9000f17 	ldw	r4,60(sp)
   24840:	000d883a 	mov	r6,zero
   24844:	01d00934 	movhi	r7,16420
   24848:	002c10c0 	call	2c10c <__muldf3>
   2484c:	81000044 	addi	r4,r16,1
   24850:	d8800f15 	stw	r2,60(sp)
   24854:	d8c01015 	stw	r3,64(sp)
   24858:	002d1a00 	call	2d1a0 <__floatsidf>
   2485c:	d9800f17 	ldw	r6,60(sp)
   24860:	d9c01017 	ldw	r7,64(sp)
   24864:	1009883a 	mov	r4,r2
   24868:	180b883a 	mov	r5,r3
   2486c:	002c10c0 	call	2c10c <__muldf3>
   24870:	01d00734 	movhi	r7,16412
   24874:	000d883a 	mov	r6,zero
   24878:	1009883a 	mov	r4,r2
   2487c:	180b883a 	mov	r5,r3
   24880:	002ad200 	call	2ad20 <__adddf3>
   24884:	d9c00517 	ldw	r7,20(sp)
   24888:	047f3034 	movhi	r17,64704
   2488c:	1021883a 	mov	r16,r2
   24890:	39ffffc4 	addi	r7,r7,-1
   24894:	d9c01315 	stw	r7,76(sp)
   24898:	1c63883a 	add	r17,r3,r17
   2489c:	db000c17 	ldw	r12,48(sp)
   248a0:	003bea06 	br	2384c <__alt_data_end+0xfffe384c>
   248a4:	dc000915 	stw	r16,36(sp)
   248a8:	003e0e06 	br	240e4 <__alt_data_end+0xfffe40e4>
   248ac:	01000e44 	movi	r4,57
   248b0:	8825883a 	mov	r18,r17
   248b4:	9dc00044 	addi	r23,r19,1
   248b8:	99000005 	stb	r4,0(r19)
   248bc:	a023883a 	mov	r17,r20
   248c0:	dc000915 	stw	r16,36(sp)
   248c4:	003da406 	br	23f58 <__alt_data_end+0xfffe3f58>
   248c8:	d9801417 	ldw	r6,80(sp)
   248cc:	d9c01517 	ldw	r7,84(sp)
   248d0:	0009883a 	mov	r4,zero
   248d4:	014ff834 	movhi	r5,16352
   248d8:	002c8240 	call	2c824 <__subdf3>
   248dc:	880d883a 	mov	r6,r17
   248e0:	a00f883a 	mov	r7,r20
   248e4:	1009883a 	mov	r4,r2
   248e8:	180b883a 	mov	r5,r3
   248ec:	002bf3c0 	call	2bf3c <__gedf2>
   248f0:	00bc7c0e 	bge	zero,r2,23ae4 <__alt_data_end+0xfffe3ae4>
   248f4:	01000c04 	movi	r4,48
   248f8:	00000106 	br	24900 <_dtoa_r+0x1580>
   248fc:	102f883a 	mov	r23,r2
   24900:	b8bfffc4 	addi	r2,r23,-1
   24904:	10c00007 	ldb	r3,0(r2)
   24908:	193ffc26 	beq	r3,r4,248fc <__alt_data_end+0xfffe48fc>
   2490c:	d9801317 	ldw	r6,76(sp)
   24910:	d9800515 	stw	r6,20(sp)
   24914:	003c4406 	br	23a28 <__alt_data_end+0xfffe3a28>
   24918:	d9801317 	ldw	r6,76(sp)
   2491c:	d9800515 	stw	r6,20(sp)
   24920:	003cea06 	br	23ccc <__alt_data_end+0xfffe3ccc>
   24924:	dd800f17 	ldw	r22,60(sp)
   24928:	dcc01017 	ldw	r19,64(sp)
   2492c:	dc801217 	ldw	r18,72(sp)
   24930:	003c6c06 	br	23ae4 <__alt_data_end+0xfffe3ae4>
   24934:	903e031e 	bne	r18,zero,24144 <__alt_data_end+0xfffe4144>
   24938:	003ebb06 	br	24428 <__alt_data_end+0xfffe4428>
   2493c:	103e6c1e 	bne	r2,zero,242f0 <__alt_data_end+0xfffe42f0>
   24940:	4080004c 	andi	r2,r8,1
   24944:	103e6a26 	beq	r2,zero,242f0 <__alt_data_end+0xfffe42f0>
   24948:	003e6606 	br	242e4 <__alt_data_end+0xfffe42e4>
   2494c:	d8c00317 	ldw	r3,12(sp)
   24950:	00800084 	movi	r2,2
   24954:	10c02916 	blt	r2,r3,249fc <_dtoa_r+0x167c>
   24958:	d9000c17 	ldw	r4,48(sp)
   2495c:	003e8806 	br	24380 <__alt_data_end+0xfffe4380>
   24960:	04000084 	movi	r16,2
   24964:	003b9d06 	br	237dc <__alt_data_end+0xfffe37dc>
   24968:	d9001317 	ldw	r4,76(sp)
   2496c:	d9000515 	stw	r4,20(sp)
   24970:	003cd606 	br	23ccc <__alt_data_end+0xfffe3ccc>
   24974:	d8801317 	ldw	r2,76(sp)
   24978:	d8800515 	stw	r2,20(sp)
   2497c:	003c2a06 	br	23a28 <__alt_data_end+0xfffe3a28>
   24980:	d9800317 	ldw	r6,12(sp)
   24984:	00800084 	movi	r2,2
   24988:	11801516 	blt	r2,r6,249e0 <_dtoa_r+0x1660>
   2498c:	d9c00c17 	ldw	r7,48(sp)
   24990:	d9c00615 	stw	r7,24(sp)
   24994:	003df706 	br	24174 <__alt_data_end+0xfffe4174>
   24998:	193d3926 	beq	r3,r4,23e80 <__alt_data_end+0xfffe3e80>
   2499c:	00c00f04 	movi	r3,60
   249a0:	1885c83a 	sub	r2,r3,r2
   249a4:	003ddf06 	br	24124 <__alt_data_end+0xfffe4124>
   249a8:	e009883a 	mov	r4,fp
   249ac:	e0001115 	stw	zero,68(fp)
   249b0:	000b883a 	mov	r5,zero
   249b4:	00264040 	call	26404 <_Balloc>
   249b8:	d8800715 	stw	r2,28(sp)
   249bc:	d8c00717 	ldw	r3,28(sp)
   249c0:	00bfffc4 	movi	r2,-1
   249c4:	01000044 	movi	r4,1
   249c8:	d8800c15 	stw	r2,48(sp)
   249cc:	e0c01015 	stw	r3,64(fp)
   249d0:	d9000b15 	stw	r4,44(sp)
   249d4:	d8800615 	stw	r2,24(sp)
   249d8:	d8002215 	stw	zero,136(sp)
   249dc:	003c4106 	br	23ae4 <__alt_data_end+0xfffe3ae4>
   249e0:	d8c00c17 	ldw	r3,48(sp)
   249e4:	d8c00615 	stw	r3,24(sp)
   249e8:	003e7006 	br	243ac <__alt_data_end+0xfffe43ac>
   249ec:	04400044 	movi	r17,1
   249f0:	003b2006 	br	23674 <__alt_data_end+0xfffe3674>
   249f4:	000b883a 	mov	r5,zero
   249f8:	003b3d06 	br	236f0 <__alt_data_end+0xfffe36f0>
   249fc:	d8800c17 	ldw	r2,48(sp)
   24a00:	d8800615 	stw	r2,24(sp)
   24a04:	003e6906 	br	243ac <__alt_data_end+0xfffe43ac>

00024a08 <__sflush_r>:
   24a08:	2880030b 	ldhu	r2,12(r5)
   24a0c:	defffb04 	addi	sp,sp,-20
   24a10:	dcc00315 	stw	r19,12(sp)
   24a14:	dc400115 	stw	r17,4(sp)
   24a18:	dfc00415 	stw	ra,16(sp)
   24a1c:	dc800215 	stw	r18,8(sp)
   24a20:	dc000015 	stw	r16,0(sp)
   24a24:	10c0020c 	andi	r3,r2,8
   24a28:	2823883a 	mov	r17,r5
   24a2c:	2027883a 	mov	r19,r4
   24a30:	1800311e 	bne	r3,zero,24af8 <__sflush_r+0xf0>
   24a34:	28c00117 	ldw	r3,4(r5)
   24a38:	10820014 	ori	r2,r2,2048
   24a3c:	2880030d 	sth	r2,12(r5)
   24a40:	00c04b0e 	bge	zero,r3,24b70 <__sflush_r+0x168>
   24a44:	8a000a17 	ldw	r8,40(r17)
   24a48:	40002326 	beq	r8,zero,24ad8 <__sflush_r+0xd0>
   24a4c:	9c000017 	ldw	r16,0(r19)
   24a50:	10c4000c 	andi	r3,r2,4096
   24a54:	98000015 	stw	zero,0(r19)
   24a58:	18004826 	beq	r3,zero,24b7c <__sflush_r+0x174>
   24a5c:	89801417 	ldw	r6,80(r17)
   24a60:	10c0010c 	andi	r3,r2,4
   24a64:	18000626 	beq	r3,zero,24a80 <__sflush_r+0x78>
   24a68:	88c00117 	ldw	r3,4(r17)
   24a6c:	88800c17 	ldw	r2,48(r17)
   24a70:	30cdc83a 	sub	r6,r6,r3
   24a74:	10000226 	beq	r2,zero,24a80 <__sflush_r+0x78>
   24a78:	88800f17 	ldw	r2,60(r17)
   24a7c:	308dc83a 	sub	r6,r6,r2
   24a80:	89400717 	ldw	r5,28(r17)
   24a84:	000f883a 	mov	r7,zero
   24a88:	9809883a 	mov	r4,r19
   24a8c:	403ee83a 	callr	r8
   24a90:	00ffffc4 	movi	r3,-1
   24a94:	10c04426 	beq	r2,r3,24ba8 <__sflush_r+0x1a0>
   24a98:	88c0030b 	ldhu	r3,12(r17)
   24a9c:	89000417 	ldw	r4,16(r17)
   24aa0:	88000115 	stw	zero,4(r17)
   24aa4:	197dffcc 	andi	r5,r3,63487
   24aa8:	8940030d 	sth	r5,12(r17)
   24aac:	89000015 	stw	r4,0(r17)
   24ab0:	18c4000c 	andi	r3,r3,4096
   24ab4:	18002c1e 	bne	r3,zero,24b68 <__sflush_r+0x160>
   24ab8:	89400c17 	ldw	r5,48(r17)
   24abc:	9c000015 	stw	r16,0(r19)
   24ac0:	28000526 	beq	r5,zero,24ad8 <__sflush_r+0xd0>
   24ac4:	88801004 	addi	r2,r17,64
   24ac8:	28800226 	beq	r5,r2,24ad4 <__sflush_r+0xcc>
   24acc:	9809883a 	mov	r4,r19
   24ad0:	00251740 	call	25174 <_free_r>
   24ad4:	88000c15 	stw	zero,48(r17)
   24ad8:	0005883a 	mov	r2,zero
   24adc:	dfc00417 	ldw	ra,16(sp)
   24ae0:	dcc00317 	ldw	r19,12(sp)
   24ae4:	dc800217 	ldw	r18,8(sp)
   24ae8:	dc400117 	ldw	r17,4(sp)
   24aec:	dc000017 	ldw	r16,0(sp)
   24af0:	dec00504 	addi	sp,sp,20
   24af4:	f800283a 	ret
   24af8:	2c800417 	ldw	r18,16(r5)
   24afc:	903ff626 	beq	r18,zero,24ad8 <__alt_data_end+0xfffe4ad8>
   24b00:	2c000017 	ldw	r16,0(r5)
   24b04:	108000cc 	andi	r2,r2,3
   24b08:	2c800015 	stw	r18,0(r5)
   24b0c:	84a1c83a 	sub	r16,r16,r18
   24b10:	1000131e 	bne	r2,zero,24b60 <__sflush_r+0x158>
   24b14:	28800517 	ldw	r2,20(r5)
   24b18:	88800215 	stw	r2,8(r17)
   24b1c:	04000316 	blt	zero,r16,24b2c <__sflush_r+0x124>
   24b20:	003fed06 	br	24ad8 <__alt_data_end+0xfffe4ad8>
   24b24:	90a5883a 	add	r18,r18,r2
   24b28:	043feb0e 	bge	zero,r16,24ad8 <__alt_data_end+0xfffe4ad8>
   24b2c:	88800917 	ldw	r2,36(r17)
   24b30:	89400717 	ldw	r5,28(r17)
   24b34:	800f883a 	mov	r7,r16
   24b38:	900d883a 	mov	r6,r18
   24b3c:	9809883a 	mov	r4,r19
   24b40:	103ee83a 	callr	r2
   24b44:	80a1c83a 	sub	r16,r16,r2
   24b48:	00bff616 	blt	zero,r2,24b24 <__alt_data_end+0xfffe4b24>
   24b4c:	88c0030b 	ldhu	r3,12(r17)
   24b50:	00bfffc4 	movi	r2,-1
   24b54:	18c01014 	ori	r3,r3,64
   24b58:	88c0030d 	sth	r3,12(r17)
   24b5c:	003fdf06 	br	24adc <__alt_data_end+0xfffe4adc>
   24b60:	0005883a 	mov	r2,zero
   24b64:	003fec06 	br	24b18 <__alt_data_end+0xfffe4b18>
   24b68:	88801415 	stw	r2,80(r17)
   24b6c:	003fd206 	br	24ab8 <__alt_data_end+0xfffe4ab8>
   24b70:	28c00f17 	ldw	r3,60(r5)
   24b74:	00ffb316 	blt	zero,r3,24a44 <__alt_data_end+0xfffe4a44>
   24b78:	003fd706 	br	24ad8 <__alt_data_end+0xfffe4ad8>
   24b7c:	89400717 	ldw	r5,28(r17)
   24b80:	000d883a 	mov	r6,zero
   24b84:	01c00044 	movi	r7,1
   24b88:	9809883a 	mov	r4,r19
   24b8c:	403ee83a 	callr	r8
   24b90:	100d883a 	mov	r6,r2
   24b94:	00bfffc4 	movi	r2,-1
   24b98:	30801426 	beq	r6,r2,24bec <__sflush_r+0x1e4>
   24b9c:	8880030b 	ldhu	r2,12(r17)
   24ba0:	8a000a17 	ldw	r8,40(r17)
   24ba4:	003fae06 	br	24a60 <__alt_data_end+0xfffe4a60>
   24ba8:	98c00017 	ldw	r3,0(r19)
   24bac:	183fba26 	beq	r3,zero,24a98 <__alt_data_end+0xfffe4a98>
   24bb0:	01000744 	movi	r4,29
   24bb4:	19000626 	beq	r3,r4,24bd0 <__sflush_r+0x1c8>
   24bb8:	01000584 	movi	r4,22
   24bbc:	19000426 	beq	r3,r4,24bd0 <__sflush_r+0x1c8>
   24bc0:	88c0030b 	ldhu	r3,12(r17)
   24bc4:	18c01014 	ori	r3,r3,64
   24bc8:	88c0030d 	sth	r3,12(r17)
   24bcc:	003fc306 	br	24adc <__alt_data_end+0xfffe4adc>
   24bd0:	8880030b 	ldhu	r2,12(r17)
   24bd4:	88c00417 	ldw	r3,16(r17)
   24bd8:	88000115 	stw	zero,4(r17)
   24bdc:	10bdffcc 	andi	r2,r2,63487
   24be0:	8880030d 	sth	r2,12(r17)
   24be4:	88c00015 	stw	r3,0(r17)
   24be8:	003fb306 	br	24ab8 <__alt_data_end+0xfffe4ab8>
   24bec:	98800017 	ldw	r2,0(r19)
   24bf0:	103fea26 	beq	r2,zero,24b9c <__alt_data_end+0xfffe4b9c>
   24bf4:	00c00744 	movi	r3,29
   24bf8:	10c00226 	beq	r2,r3,24c04 <__sflush_r+0x1fc>
   24bfc:	00c00584 	movi	r3,22
   24c00:	10c0031e 	bne	r2,r3,24c10 <__sflush_r+0x208>
   24c04:	9c000015 	stw	r16,0(r19)
   24c08:	0005883a 	mov	r2,zero
   24c0c:	003fb306 	br	24adc <__alt_data_end+0xfffe4adc>
   24c10:	88c0030b 	ldhu	r3,12(r17)
   24c14:	3005883a 	mov	r2,r6
   24c18:	18c01014 	ori	r3,r3,64
   24c1c:	88c0030d 	sth	r3,12(r17)
   24c20:	003fae06 	br	24adc <__alt_data_end+0xfffe4adc>

00024c24 <_fflush_r>:
   24c24:	defffd04 	addi	sp,sp,-12
   24c28:	dc000115 	stw	r16,4(sp)
   24c2c:	dfc00215 	stw	ra,8(sp)
   24c30:	2021883a 	mov	r16,r4
   24c34:	20000226 	beq	r4,zero,24c40 <_fflush_r+0x1c>
   24c38:	20800e17 	ldw	r2,56(r4)
   24c3c:	10000c26 	beq	r2,zero,24c70 <_fflush_r+0x4c>
   24c40:	2880030f 	ldh	r2,12(r5)
   24c44:	1000051e 	bne	r2,zero,24c5c <_fflush_r+0x38>
   24c48:	0005883a 	mov	r2,zero
   24c4c:	dfc00217 	ldw	ra,8(sp)
   24c50:	dc000117 	ldw	r16,4(sp)
   24c54:	dec00304 	addi	sp,sp,12
   24c58:	f800283a 	ret
   24c5c:	8009883a 	mov	r4,r16
   24c60:	dfc00217 	ldw	ra,8(sp)
   24c64:	dc000117 	ldw	r16,4(sp)
   24c68:	dec00304 	addi	sp,sp,12
   24c6c:	0024a081 	jmpi	24a08 <__sflush_r>
   24c70:	d9400015 	stw	r5,0(sp)
   24c74:	00250000 	call	25000 <__sinit>
   24c78:	d9400017 	ldw	r5,0(sp)
   24c7c:	003ff006 	br	24c40 <__alt_data_end+0xfffe4c40>

00024c80 <fflush>:
   24c80:	20000526 	beq	r4,zero,24c98 <fflush+0x18>
   24c84:	008000f4 	movhi	r2,3
   24c88:	1087c104 	addi	r2,r2,7940
   24c8c:	200b883a 	mov	r5,r4
   24c90:	11000017 	ldw	r4,0(r2)
   24c94:	0024c241 	jmpi	24c24 <_fflush_r>
   24c98:	008000f4 	movhi	r2,3
   24c9c:	1087c004 	addi	r2,r2,7936
   24ca0:	11000017 	ldw	r4,0(r2)
   24ca4:	014000b4 	movhi	r5,2
   24ca8:	29530904 	addi	r5,r5,19492
   24cac:	00255481 	jmpi	25548 <_fwalk_reent>

00024cb0 <__fp_unlock>:
   24cb0:	0005883a 	mov	r2,zero
   24cb4:	f800283a 	ret

00024cb8 <_cleanup_r>:
   24cb8:	014000f4 	movhi	r5,3
   24cbc:	2963ce04 	addi	r5,r5,-28872
   24cc0:	00255481 	jmpi	25548 <_fwalk_reent>

00024cc4 <__sinit.part.1>:
   24cc4:	defff704 	addi	sp,sp,-36
   24cc8:	00c000b4 	movhi	r3,2
   24ccc:	dfc00815 	stw	ra,32(sp)
   24cd0:	ddc00715 	stw	r23,28(sp)
   24cd4:	dd800615 	stw	r22,24(sp)
   24cd8:	dd400515 	stw	r21,20(sp)
   24cdc:	dd000415 	stw	r20,16(sp)
   24ce0:	dcc00315 	stw	r19,12(sp)
   24ce4:	dc800215 	stw	r18,8(sp)
   24ce8:	dc400115 	stw	r17,4(sp)
   24cec:	dc000015 	stw	r16,0(sp)
   24cf0:	18d32e04 	addi	r3,r3,19640
   24cf4:	24000117 	ldw	r16,4(r4)
   24cf8:	20c00f15 	stw	r3,60(r4)
   24cfc:	2080bb04 	addi	r2,r4,748
   24d00:	00c000c4 	movi	r3,3
   24d04:	20c0b915 	stw	r3,740(r4)
   24d08:	2080ba15 	stw	r2,744(r4)
   24d0c:	2000b815 	stw	zero,736(r4)
   24d10:	05c00204 	movi	r23,8
   24d14:	00800104 	movi	r2,4
   24d18:	2025883a 	mov	r18,r4
   24d1c:	b80d883a 	mov	r6,r23
   24d20:	81001704 	addi	r4,r16,92
   24d24:	000b883a 	mov	r5,zero
   24d28:	80000015 	stw	zero,0(r16)
   24d2c:	80000115 	stw	zero,4(r16)
   24d30:	80000215 	stw	zero,8(r16)
   24d34:	8080030d 	sth	r2,12(r16)
   24d38:	80001915 	stw	zero,100(r16)
   24d3c:	8000038d 	sth	zero,14(r16)
   24d40:	80000415 	stw	zero,16(r16)
   24d44:	80000515 	stw	zero,20(r16)
   24d48:	80000615 	stw	zero,24(r16)
   24d4c:	00262dc0 	call	262dc <memset>
   24d50:	058000b4 	movhi	r22,2
   24d54:	94400217 	ldw	r17,8(r18)
   24d58:	054000b4 	movhi	r21,2
   24d5c:	050000b4 	movhi	r20,2
   24d60:	04c000b4 	movhi	r19,2
   24d64:	b59d3204 	addi	r22,r22,29896
   24d68:	ad5d4904 	addi	r21,r21,29988
   24d6c:	a51d6804 	addi	r20,r20,30112
   24d70:	9cdd7f04 	addi	r19,r19,30204
   24d74:	85800815 	stw	r22,32(r16)
   24d78:	85400915 	stw	r21,36(r16)
   24d7c:	85000a15 	stw	r20,40(r16)
   24d80:	84c00b15 	stw	r19,44(r16)
   24d84:	84000715 	stw	r16,28(r16)
   24d88:	00800284 	movi	r2,10
   24d8c:	8880030d 	sth	r2,12(r17)
   24d90:	00800044 	movi	r2,1
   24d94:	b80d883a 	mov	r6,r23
   24d98:	89001704 	addi	r4,r17,92
   24d9c:	000b883a 	mov	r5,zero
   24da0:	88000015 	stw	zero,0(r17)
   24da4:	88000115 	stw	zero,4(r17)
   24da8:	88000215 	stw	zero,8(r17)
   24dac:	88001915 	stw	zero,100(r17)
   24db0:	8880038d 	sth	r2,14(r17)
   24db4:	88000415 	stw	zero,16(r17)
   24db8:	88000515 	stw	zero,20(r17)
   24dbc:	88000615 	stw	zero,24(r17)
   24dc0:	00262dc0 	call	262dc <memset>
   24dc4:	94000317 	ldw	r16,12(r18)
   24dc8:	00800484 	movi	r2,18
   24dcc:	8c400715 	stw	r17,28(r17)
   24dd0:	8d800815 	stw	r22,32(r17)
   24dd4:	8d400915 	stw	r21,36(r17)
   24dd8:	8d000a15 	stw	r20,40(r17)
   24ddc:	8cc00b15 	stw	r19,44(r17)
   24de0:	8080030d 	sth	r2,12(r16)
   24de4:	00800084 	movi	r2,2
   24de8:	80000015 	stw	zero,0(r16)
   24dec:	80000115 	stw	zero,4(r16)
   24df0:	80000215 	stw	zero,8(r16)
   24df4:	80001915 	stw	zero,100(r16)
   24df8:	8080038d 	sth	r2,14(r16)
   24dfc:	80000415 	stw	zero,16(r16)
   24e00:	80000515 	stw	zero,20(r16)
   24e04:	80000615 	stw	zero,24(r16)
   24e08:	b80d883a 	mov	r6,r23
   24e0c:	000b883a 	mov	r5,zero
   24e10:	81001704 	addi	r4,r16,92
   24e14:	00262dc0 	call	262dc <memset>
   24e18:	00800044 	movi	r2,1
   24e1c:	84000715 	stw	r16,28(r16)
   24e20:	85800815 	stw	r22,32(r16)
   24e24:	85400915 	stw	r21,36(r16)
   24e28:	85000a15 	stw	r20,40(r16)
   24e2c:	84c00b15 	stw	r19,44(r16)
   24e30:	90800e15 	stw	r2,56(r18)
   24e34:	dfc00817 	ldw	ra,32(sp)
   24e38:	ddc00717 	ldw	r23,28(sp)
   24e3c:	dd800617 	ldw	r22,24(sp)
   24e40:	dd400517 	ldw	r21,20(sp)
   24e44:	dd000417 	ldw	r20,16(sp)
   24e48:	dcc00317 	ldw	r19,12(sp)
   24e4c:	dc800217 	ldw	r18,8(sp)
   24e50:	dc400117 	ldw	r17,4(sp)
   24e54:	dc000017 	ldw	r16,0(sp)
   24e58:	dec00904 	addi	sp,sp,36
   24e5c:	f800283a 	ret

00024e60 <__fp_lock>:
   24e60:	0005883a 	mov	r2,zero
   24e64:	f800283a 	ret

00024e68 <__sfmoreglue>:
   24e68:	defffc04 	addi	sp,sp,-16
   24e6c:	dc400115 	stw	r17,4(sp)
   24e70:	2c7fffc4 	addi	r17,r5,-1
   24e74:	8c401a24 	muli	r17,r17,104
   24e78:	dc800215 	stw	r18,8(sp)
   24e7c:	2825883a 	mov	r18,r5
   24e80:	89401d04 	addi	r5,r17,116
   24e84:	dc000015 	stw	r16,0(sp)
   24e88:	dfc00315 	stw	ra,12(sp)
   24e8c:	00258a40 	call	258a4 <_malloc_r>
   24e90:	1021883a 	mov	r16,r2
   24e94:	10000726 	beq	r2,zero,24eb4 <__sfmoreglue+0x4c>
   24e98:	11000304 	addi	r4,r2,12
   24e9c:	10000015 	stw	zero,0(r2)
   24ea0:	14800115 	stw	r18,4(r2)
   24ea4:	11000215 	stw	r4,8(r2)
   24ea8:	89801a04 	addi	r6,r17,104
   24eac:	000b883a 	mov	r5,zero
   24eb0:	00262dc0 	call	262dc <memset>
   24eb4:	8005883a 	mov	r2,r16
   24eb8:	dfc00317 	ldw	ra,12(sp)
   24ebc:	dc800217 	ldw	r18,8(sp)
   24ec0:	dc400117 	ldw	r17,4(sp)
   24ec4:	dc000017 	ldw	r16,0(sp)
   24ec8:	dec00404 	addi	sp,sp,16
   24ecc:	f800283a 	ret

00024ed0 <__sfp>:
   24ed0:	defffb04 	addi	sp,sp,-20
   24ed4:	dc000015 	stw	r16,0(sp)
   24ed8:	040000f4 	movhi	r16,3
   24edc:	8407c004 	addi	r16,r16,7936
   24ee0:	dcc00315 	stw	r19,12(sp)
   24ee4:	2027883a 	mov	r19,r4
   24ee8:	81000017 	ldw	r4,0(r16)
   24eec:	dfc00415 	stw	ra,16(sp)
   24ef0:	dc800215 	stw	r18,8(sp)
   24ef4:	20800e17 	ldw	r2,56(r4)
   24ef8:	dc400115 	stw	r17,4(sp)
   24efc:	1000021e 	bne	r2,zero,24f08 <__sfp+0x38>
   24f00:	0024cc40 	call	24cc4 <__sinit.part.1>
   24f04:	81000017 	ldw	r4,0(r16)
   24f08:	2480b804 	addi	r18,r4,736
   24f0c:	047fffc4 	movi	r17,-1
   24f10:	91000117 	ldw	r4,4(r18)
   24f14:	94000217 	ldw	r16,8(r18)
   24f18:	213fffc4 	addi	r4,r4,-1
   24f1c:	20000a16 	blt	r4,zero,24f48 <__sfp+0x78>
   24f20:	8080030f 	ldh	r2,12(r16)
   24f24:	10000c26 	beq	r2,zero,24f58 <__sfp+0x88>
   24f28:	80c01d04 	addi	r3,r16,116
   24f2c:	00000206 	br	24f38 <__sfp+0x68>
   24f30:	18bfe60f 	ldh	r2,-104(r3)
   24f34:	10000826 	beq	r2,zero,24f58 <__sfp+0x88>
   24f38:	213fffc4 	addi	r4,r4,-1
   24f3c:	1c3ffd04 	addi	r16,r3,-12
   24f40:	18c01a04 	addi	r3,r3,104
   24f44:	247ffa1e 	bne	r4,r17,24f30 <__alt_data_end+0xfffe4f30>
   24f48:	90800017 	ldw	r2,0(r18)
   24f4c:	10001d26 	beq	r2,zero,24fc4 <__sfp+0xf4>
   24f50:	1025883a 	mov	r18,r2
   24f54:	003fee06 	br	24f10 <__alt_data_end+0xfffe4f10>
   24f58:	00bfffc4 	movi	r2,-1
   24f5c:	8080038d 	sth	r2,14(r16)
   24f60:	00800044 	movi	r2,1
   24f64:	8080030d 	sth	r2,12(r16)
   24f68:	80001915 	stw	zero,100(r16)
   24f6c:	80000015 	stw	zero,0(r16)
   24f70:	80000215 	stw	zero,8(r16)
   24f74:	80000115 	stw	zero,4(r16)
   24f78:	80000415 	stw	zero,16(r16)
   24f7c:	80000515 	stw	zero,20(r16)
   24f80:	80000615 	stw	zero,24(r16)
   24f84:	01800204 	movi	r6,8
   24f88:	000b883a 	mov	r5,zero
   24f8c:	81001704 	addi	r4,r16,92
   24f90:	00262dc0 	call	262dc <memset>
   24f94:	8005883a 	mov	r2,r16
   24f98:	80000c15 	stw	zero,48(r16)
   24f9c:	80000d15 	stw	zero,52(r16)
   24fa0:	80001115 	stw	zero,68(r16)
   24fa4:	80001215 	stw	zero,72(r16)
   24fa8:	dfc00417 	ldw	ra,16(sp)
   24fac:	dcc00317 	ldw	r19,12(sp)
   24fb0:	dc800217 	ldw	r18,8(sp)
   24fb4:	dc400117 	ldw	r17,4(sp)
   24fb8:	dc000017 	ldw	r16,0(sp)
   24fbc:	dec00504 	addi	sp,sp,20
   24fc0:	f800283a 	ret
   24fc4:	01400104 	movi	r5,4
   24fc8:	9809883a 	mov	r4,r19
   24fcc:	0024e680 	call	24e68 <__sfmoreglue>
   24fd0:	90800015 	stw	r2,0(r18)
   24fd4:	103fde1e 	bne	r2,zero,24f50 <__alt_data_end+0xfffe4f50>
   24fd8:	00800304 	movi	r2,12
   24fdc:	98800015 	stw	r2,0(r19)
   24fe0:	0005883a 	mov	r2,zero
   24fe4:	003ff006 	br	24fa8 <__alt_data_end+0xfffe4fa8>

00024fe8 <_cleanup>:
   24fe8:	008000f4 	movhi	r2,3
   24fec:	1087c004 	addi	r2,r2,7936
   24ff0:	11000017 	ldw	r4,0(r2)
   24ff4:	014000f4 	movhi	r5,3
   24ff8:	2963ce04 	addi	r5,r5,-28872
   24ffc:	00255481 	jmpi	25548 <_fwalk_reent>

00025000 <__sinit>:
   25000:	20800e17 	ldw	r2,56(r4)
   25004:	10000126 	beq	r2,zero,2500c <__sinit+0xc>
   25008:	f800283a 	ret
   2500c:	0024cc41 	jmpi	24cc4 <__sinit.part.1>

00025010 <__sfp_lock_acquire>:
   25010:	f800283a 	ret

00025014 <__sfp_lock_release>:
   25014:	f800283a 	ret

00025018 <__sinit_lock_acquire>:
   25018:	f800283a 	ret

0002501c <__sinit_lock_release>:
   2501c:	f800283a 	ret

00025020 <__fp_lock_all>:
   25020:	008000f4 	movhi	r2,3
   25024:	1087c104 	addi	r2,r2,7940
   25028:	11000017 	ldw	r4,0(r2)
   2502c:	014000b4 	movhi	r5,2
   25030:	29539804 	addi	r5,r5,20064
   25034:	00254841 	jmpi	25484 <_fwalk>

00025038 <__fp_unlock_all>:
   25038:	008000f4 	movhi	r2,3
   2503c:	1087c104 	addi	r2,r2,7940
   25040:	11000017 	ldw	r4,0(r2)
   25044:	014000b4 	movhi	r5,2
   25048:	29532c04 	addi	r5,r5,19632
   2504c:	00254841 	jmpi	25484 <_fwalk>

00025050 <_malloc_trim_r>:
   25050:	defffb04 	addi	sp,sp,-20
   25054:	dcc00315 	stw	r19,12(sp)
   25058:	04c000f4 	movhi	r19,3
   2505c:	dc800215 	stw	r18,8(sp)
   25060:	dc400115 	stw	r17,4(sp)
   25064:	dc000015 	stw	r16,0(sp)
   25068:	dfc00415 	stw	ra,16(sp)
   2506c:	2821883a 	mov	r16,r5
   25070:	9cc23c04 	addi	r19,r19,2288
   25074:	2025883a 	mov	r18,r4
   25078:	002dba40 	call	2dba4 <__malloc_lock>
   2507c:	98800217 	ldw	r2,8(r19)
   25080:	14400117 	ldw	r17,4(r2)
   25084:	00bfff04 	movi	r2,-4
   25088:	88a2703a 	and	r17,r17,r2
   2508c:	8c21c83a 	sub	r16,r17,r16
   25090:	8403fbc4 	addi	r16,r16,4079
   25094:	8020d33a 	srli	r16,r16,12
   25098:	0083ffc4 	movi	r2,4095
   2509c:	843fffc4 	addi	r16,r16,-1
   250a0:	8020933a 	slli	r16,r16,12
   250a4:	1400060e 	bge	r2,r16,250c0 <_malloc_trim_r+0x70>
   250a8:	000b883a 	mov	r5,zero
   250ac:	9009883a 	mov	r4,r18
   250b0:	00274740 	call	27474 <_sbrk_r>
   250b4:	98c00217 	ldw	r3,8(r19)
   250b8:	1c47883a 	add	r3,r3,r17
   250bc:	10c00a26 	beq	r2,r3,250e8 <_malloc_trim_r+0x98>
   250c0:	9009883a 	mov	r4,r18
   250c4:	002dbc80 	call	2dbc8 <__malloc_unlock>
   250c8:	0005883a 	mov	r2,zero
   250cc:	dfc00417 	ldw	ra,16(sp)
   250d0:	dcc00317 	ldw	r19,12(sp)
   250d4:	dc800217 	ldw	r18,8(sp)
   250d8:	dc400117 	ldw	r17,4(sp)
   250dc:	dc000017 	ldw	r16,0(sp)
   250e0:	dec00504 	addi	sp,sp,20
   250e4:	f800283a 	ret
   250e8:	040bc83a 	sub	r5,zero,r16
   250ec:	9009883a 	mov	r4,r18
   250f0:	00274740 	call	27474 <_sbrk_r>
   250f4:	00ffffc4 	movi	r3,-1
   250f8:	10c00d26 	beq	r2,r3,25130 <_malloc_trim_r+0xe0>
   250fc:	00c000f4 	movhi	r3,3
   25100:	18ce9c04 	addi	r3,r3,14960
   25104:	18800017 	ldw	r2,0(r3)
   25108:	99000217 	ldw	r4,8(r19)
   2510c:	8c23c83a 	sub	r17,r17,r16
   25110:	8c400054 	ori	r17,r17,1
   25114:	1421c83a 	sub	r16,r2,r16
   25118:	24400115 	stw	r17,4(r4)
   2511c:	9009883a 	mov	r4,r18
   25120:	1c000015 	stw	r16,0(r3)
   25124:	002dbc80 	call	2dbc8 <__malloc_unlock>
   25128:	00800044 	movi	r2,1
   2512c:	003fe706 	br	250cc <__alt_data_end+0xfffe50cc>
   25130:	000b883a 	mov	r5,zero
   25134:	9009883a 	mov	r4,r18
   25138:	00274740 	call	27474 <_sbrk_r>
   2513c:	99000217 	ldw	r4,8(r19)
   25140:	014003c4 	movi	r5,15
   25144:	1107c83a 	sub	r3,r2,r4
   25148:	28ffdd0e 	bge	r5,r3,250c0 <__alt_data_end+0xfffe50c0>
   2514c:	014000f4 	movhi	r5,3
   25150:	2947c304 	addi	r5,r5,7948
   25154:	29400017 	ldw	r5,0(r5)
   25158:	18c00054 	ori	r3,r3,1
   2515c:	20c00115 	stw	r3,4(r4)
   25160:	00c000f4 	movhi	r3,3
   25164:	1145c83a 	sub	r2,r2,r5
   25168:	18ce9c04 	addi	r3,r3,14960
   2516c:	18800015 	stw	r2,0(r3)
   25170:	003fd306 	br	250c0 <__alt_data_end+0xfffe50c0>

00025174 <_free_r>:
   25174:	28004126 	beq	r5,zero,2527c <_free_r+0x108>
   25178:	defffd04 	addi	sp,sp,-12
   2517c:	dc400115 	stw	r17,4(sp)
   25180:	dc000015 	stw	r16,0(sp)
   25184:	2023883a 	mov	r17,r4
   25188:	2821883a 	mov	r16,r5
   2518c:	dfc00215 	stw	ra,8(sp)
   25190:	002dba40 	call	2dba4 <__malloc_lock>
   25194:	81ffff17 	ldw	r7,-4(r16)
   25198:	00bfff84 	movi	r2,-2
   2519c:	010000f4 	movhi	r4,3
   251a0:	81bffe04 	addi	r6,r16,-8
   251a4:	3884703a 	and	r2,r7,r2
   251a8:	21023c04 	addi	r4,r4,2288
   251ac:	308b883a 	add	r5,r6,r2
   251b0:	2a400117 	ldw	r9,4(r5)
   251b4:	22000217 	ldw	r8,8(r4)
   251b8:	00ffff04 	movi	r3,-4
   251bc:	48c6703a 	and	r3,r9,r3
   251c0:	2a005726 	beq	r5,r8,25320 <_free_r+0x1ac>
   251c4:	28c00115 	stw	r3,4(r5)
   251c8:	39c0004c 	andi	r7,r7,1
   251cc:	3800091e 	bne	r7,zero,251f4 <_free_r+0x80>
   251d0:	823ffe17 	ldw	r8,-8(r16)
   251d4:	22400204 	addi	r9,r4,8
   251d8:	320dc83a 	sub	r6,r6,r8
   251dc:	31c00217 	ldw	r7,8(r6)
   251e0:	1205883a 	add	r2,r2,r8
   251e4:	3a406526 	beq	r7,r9,2537c <_free_r+0x208>
   251e8:	32000317 	ldw	r8,12(r6)
   251ec:	3a000315 	stw	r8,12(r7)
   251f0:	41c00215 	stw	r7,8(r8)
   251f4:	28cf883a 	add	r7,r5,r3
   251f8:	39c00117 	ldw	r7,4(r7)
   251fc:	39c0004c 	andi	r7,r7,1
   25200:	38003a26 	beq	r7,zero,252ec <_free_r+0x178>
   25204:	10c00054 	ori	r3,r2,1
   25208:	30c00115 	stw	r3,4(r6)
   2520c:	3087883a 	add	r3,r6,r2
   25210:	18800015 	stw	r2,0(r3)
   25214:	00c07fc4 	movi	r3,511
   25218:	18801936 	bltu	r3,r2,25280 <_free_r+0x10c>
   2521c:	1004d0fa 	srli	r2,r2,3
   25220:	01c00044 	movi	r7,1
   25224:	21400117 	ldw	r5,4(r4)
   25228:	10c00044 	addi	r3,r2,1
   2522c:	18c7883a 	add	r3,r3,r3
   25230:	1005d0ba 	srai	r2,r2,2
   25234:	18c7883a 	add	r3,r3,r3
   25238:	18c7883a 	add	r3,r3,r3
   2523c:	1907883a 	add	r3,r3,r4
   25240:	3884983a 	sll	r2,r7,r2
   25244:	19c00017 	ldw	r7,0(r3)
   25248:	1a3ffe04 	addi	r8,r3,-8
   2524c:	1144b03a 	or	r2,r2,r5
   25250:	32000315 	stw	r8,12(r6)
   25254:	31c00215 	stw	r7,8(r6)
   25258:	20800115 	stw	r2,4(r4)
   2525c:	19800015 	stw	r6,0(r3)
   25260:	39800315 	stw	r6,12(r7)
   25264:	8809883a 	mov	r4,r17
   25268:	dfc00217 	ldw	ra,8(sp)
   2526c:	dc400117 	ldw	r17,4(sp)
   25270:	dc000017 	ldw	r16,0(sp)
   25274:	dec00304 	addi	sp,sp,12
   25278:	002dbc81 	jmpi	2dbc8 <__malloc_unlock>
   2527c:	f800283a 	ret
   25280:	100ad27a 	srli	r5,r2,9
   25284:	00c00104 	movi	r3,4
   25288:	19404a36 	bltu	r3,r5,253b4 <_free_r+0x240>
   2528c:	100ad1ba 	srli	r5,r2,6
   25290:	28c00e44 	addi	r3,r5,57
   25294:	18c7883a 	add	r3,r3,r3
   25298:	29400e04 	addi	r5,r5,56
   2529c:	18c7883a 	add	r3,r3,r3
   252a0:	18c7883a 	add	r3,r3,r3
   252a4:	1909883a 	add	r4,r3,r4
   252a8:	20c00017 	ldw	r3,0(r4)
   252ac:	01c000f4 	movhi	r7,3
   252b0:	213ffe04 	addi	r4,r4,-8
   252b4:	39c23c04 	addi	r7,r7,2288
   252b8:	20c04426 	beq	r4,r3,253cc <_free_r+0x258>
   252bc:	01ffff04 	movi	r7,-4
   252c0:	19400117 	ldw	r5,4(r3)
   252c4:	29ca703a 	and	r5,r5,r7
   252c8:	1140022e 	bgeu	r2,r5,252d4 <_free_r+0x160>
   252cc:	18c00217 	ldw	r3,8(r3)
   252d0:	20fffb1e 	bne	r4,r3,252c0 <__alt_data_end+0xfffe52c0>
   252d4:	19000317 	ldw	r4,12(r3)
   252d8:	31000315 	stw	r4,12(r6)
   252dc:	30c00215 	stw	r3,8(r6)
   252e0:	21800215 	stw	r6,8(r4)
   252e4:	19800315 	stw	r6,12(r3)
   252e8:	003fde06 	br	25264 <__alt_data_end+0xfffe5264>
   252ec:	29c00217 	ldw	r7,8(r5)
   252f0:	10c5883a 	add	r2,r2,r3
   252f4:	00c000f4 	movhi	r3,3
   252f8:	18c23e04 	addi	r3,r3,2296
   252fc:	38c03b26 	beq	r7,r3,253ec <_free_r+0x278>
   25300:	2a000317 	ldw	r8,12(r5)
   25304:	11400054 	ori	r5,r2,1
   25308:	3087883a 	add	r3,r6,r2
   2530c:	3a000315 	stw	r8,12(r7)
   25310:	41c00215 	stw	r7,8(r8)
   25314:	31400115 	stw	r5,4(r6)
   25318:	18800015 	stw	r2,0(r3)
   2531c:	003fbd06 	br	25214 <__alt_data_end+0xfffe5214>
   25320:	39c0004c 	andi	r7,r7,1
   25324:	10c5883a 	add	r2,r2,r3
   25328:	3800071e 	bne	r7,zero,25348 <_free_r+0x1d4>
   2532c:	81fffe17 	ldw	r7,-8(r16)
   25330:	31cdc83a 	sub	r6,r6,r7
   25334:	30c00317 	ldw	r3,12(r6)
   25338:	31400217 	ldw	r5,8(r6)
   2533c:	11c5883a 	add	r2,r2,r7
   25340:	28c00315 	stw	r3,12(r5)
   25344:	19400215 	stw	r5,8(r3)
   25348:	10c00054 	ori	r3,r2,1
   2534c:	30c00115 	stw	r3,4(r6)
   25350:	00c000f4 	movhi	r3,3
   25354:	18c7c404 	addi	r3,r3,7952
   25358:	18c00017 	ldw	r3,0(r3)
   2535c:	21800215 	stw	r6,8(r4)
   25360:	10ffc036 	bltu	r2,r3,25264 <__alt_data_end+0xfffe5264>
   25364:	008000f4 	movhi	r2,3
   25368:	108e9304 	addi	r2,r2,14924
   2536c:	11400017 	ldw	r5,0(r2)
   25370:	8809883a 	mov	r4,r17
   25374:	00250500 	call	25050 <_malloc_trim_r>
   25378:	003fba06 	br	25264 <__alt_data_end+0xfffe5264>
   2537c:	28c9883a 	add	r4,r5,r3
   25380:	21000117 	ldw	r4,4(r4)
   25384:	2100004c 	andi	r4,r4,1
   25388:	2000391e 	bne	r4,zero,25470 <_free_r+0x2fc>
   2538c:	29c00217 	ldw	r7,8(r5)
   25390:	29000317 	ldw	r4,12(r5)
   25394:	1885883a 	add	r2,r3,r2
   25398:	10c00054 	ori	r3,r2,1
   2539c:	39000315 	stw	r4,12(r7)
   253a0:	21c00215 	stw	r7,8(r4)
   253a4:	30c00115 	stw	r3,4(r6)
   253a8:	308d883a 	add	r6,r6,r2
   253ac:	30800015 	stw	r2,0(r6)
   253b0:	003fac06 	br	25264 <__alt_data_end+0xfffe5264>
   253b4:	00c00504 	movi	r3,20
   253b8:	19401536 	bltu	r3,r5,25410 <_free_r+0x29c>
   253bc:	28c01704 	addi	r3,r5,92
   253c0:	18c7883a 	add	r3,r3,r3
   253c4:	294016c4 	addi	r5,r5,91
   253c8:	003fb406 	br	2529c <__alt_data_end+0xfffe529c>
   253cc:	280bd0ba 	srai	r5,r5,2
   253d0:	00c00044 	movi	r3,1
   253d4:	38800117 	ldw	r2,4(r7)
   253d8:	194a983a 	sll	r5,r3,r5
   253dc:	2007883a 	mov	r3,r4
   253e0:	2884b03a 	or	r2,r5,r2
   253e4:	38800115 	stw	r2,4(r7)
   253e8:	003fbb06 	br	252d8 <__alt_data_end+0xfffe52d8>
   253ec:	21800515 	stw	r6,20(r4)
   253f0:	21800415 	stw	r6,16(r4)
   253f4:	10c00054 	ori	r3,r2,1
   253f8:	31c00315 	stw	r7,12(r6)
   253fc:	31c00215 	stw	r7,8(r6)
   25400:	30c00115 	stw	r3,4(r6)
   25404:	308d883a 	add	r6,r6,r2
   25408:	30800015 	stw	r2,0(r6)
   2540c:	003f9506 	br	25264 <__alt_data_end+0xfffe5264>
   25410:	00c01504 	movi	r3,84
   25414:	19400536 	bltu	r3,r5,2542c <_free_r+0x2b8>
   25418:	100ad33a 	srli	r5,r2,12
   2541c:	28c01bc4 	addi	r3,r5,111
   25420:	18c7883a 	add	r3,r3,r3
   25424:	29401b84 	addi	r5,r5,110
   25428:	003f9c06 	br	2529c <__alt_data_end+0xfffe529c>
   2542c:	00c05504 	movi	r3,340
   25430:	19400536 	bltu	r3,r5,25448 <_free_r+0x2d4>
   25434:	100ad3fa 	srli	r5,r2,15
   25438:	28c01e04 	addi	r3,r5,120
   2543c:	18c7883a 	add	r3,r3,r3
   25440:	29401dc4 	addi	r5,r5,119
   25444:	003f9506 	br	2529c <__alt_data_end+0xfffe529c>
   25448:	00c15504 	movi	r3,1364
   2544c:	19400536 	bltu	r3,r5,25464 <_free_r+0x2f0>
   25450:	100ad4ba 	srli	r5,r2,18
   25454:	28c01f44 	addi	r3,r5,125
   25458:	18c7883a 	add	r3,r3,r3
   2545c:	29401f04 	addi	r5,r5,124
   25460:	003f8e06 	br	2529c <__alt_data_end+0xfffe529c>
   25464:	00c03f84 	movi	r3,254
   25468:	01401f84 	movi	r5,126
   2546c:	003f8b06 	br	2529c <__alt_data_end+0xfffe529c>
   25470:	10c00054 	ori	r3,r2,1
   25474:	30c00115 	stw	r3,4(r6)
   25478:	308d883a 	add	r6,r6,r2
   2547c:	30800015 	stw	r2,0(r6)
   25480:	003f7806 	br	25264 <__alt_data_end+0xfffe5264>

00025484 <_fwalk>:
   25484:	defff704 	addi	sp,sp,-36
   25488:	dd000415 	stw	r20,16(sp)
   2548c:	dfc00815 	stw	ra,32(sp)
   25490:	ddc00715 	stw	r23,28(sp)
   25494:	dd800615 	stw	r22,24(sp)
   25498:	dd400515 	stw	r21,20(sp)
   2549c:	dcc00315 	stw	r19,12(sp)
   254a0:	dc800215 	stw	r18,8(sp)
   254a4:	dc400115 	stw	r17,4(sp)
   254a8:	dc000015 	stw	r16,0(sp)
   254ac:	2500b804 	addi	r20,r4,736
   254b0:	a0002326 	beq	r20,zero,25540 <_fwalk+0xbc>
   254b4:	282b883a 	mov	r21,r5
   254b8:	002f883a 	mov	r23,zero
   254bc:	05800044 	movi	r22,1
   254c0:	04ffffc4 	movi	r19,-1
   254c4:	a4400117 	ldw	r17,4(r20)
   254c8:	a4800217 	ldw	r18,8(r20)
   254cc:	8c7fffc4 	addi	r17,r17,-1
   254d0:	88000d16 	blt	r17,zero,25508 <_fwalk+0x84>
   254d4:	94000304 	addi	r16,r18,12
   254d8:	94800384 	addi	r18,r18,14
   254dc:	8080000b 	ldhu	r2,0(r16)
   254e0:	8c7fffc4 	addi	r17,r17,-1
   254e4:	813ffd04 	addi	r4,r16,-12
   254e8:	b080042e 	bgeu	r22,r2,254fc <_fwalk+0x78>
   254ec:	9080000f 	ldh	r2,0(r18)
   254f0:	14c00226 	beq	r2,r19,254fc <_fwalk+0x78>
   254f4:	a83ee83a 	callr	r21
   254f8:	b8aeb03a 	or	r23,r23,r2
   254fc:	84001a04 	addi	r16,r16,104
   25500:	94801a04 	addi	r18,r18,104
   25504:	8cfff51e 	bne	r17,r19,254dc <__alt_data_end+0xfffe54dc>
   25508:	a5000017 	ldw	r20,0(r20)
   2550c:	a03fed1e 	bne	r20,zero,254c4 <__alt_data_end+0xfffe54c4>
   25510:	b805883a 	mov	r2,r23
   25514:	dfc00817 	ldw	ra,32(sp)
   25518:	ddc00717 	ldw	r23,28(sp)
   2551c:	dd800617 	ldw	r22,24(sp)
   25520:	dd400517 	ldw	r21,20(sp)
   25524:	dd000417 	ldw	r20,16(sp)
   25528:	dcc00317 	ldw	r19,12(sp)
   2552c:	dc800217 	ldw	r18,8(sp)
   25530:	dc400117 	ldw	r17,4(sp)
   25534:	dc000017 	ldw	r16,0(sp)
   25538:	dec00904 	addi	sp,sp,36
   2553c:	f800283a 	ret
   25540:	002f883a 	mov	r23,zero
   25544:	003ff206 	br	25510 <__alt_data_end+0xfffe5510>

00025548 <_fwalk_reent>:
   25548:	defff704 	addi	sp,sp,-36
   2554c:	dd000415 	stw	r20,16(sp)
   25550:	dfc00815 	stw	ra,32(sp)
   25554:	ddc00715 	stw	r23,28(sp)
   25558:	dd800615 	stw	r22,24(sp)
   2555c:	dd400515 	stw	r21,20(sp)
   25560:	dcc00315 	stw	r19,12(sp)
   25564:	dc800215 	stw	r18,8(sp)
   25568:	dc400115 	stw	r17,4(sp)
   2556c:	dc000015 	stw	r16,0(sp)
   25570:	2500b804 	addi	r20,r4,736
   25574:	a0002326 	beq	r20,zero,25604 <_fwalk_reent+0xbc>
   25578:	282b883a 	mov	r21,r5
   2557c:	2027883a 	mov	r19,r4
   25580:	002f883a 	mov	r23,zero
   25584:	05800044 	movi	r22,1
   25588:	04bfffc4 	movi	r18,-1
   2558c:	a4400117 	ldw	r17,4(r20)
   25590:	a4000217 	ldw	r16,8(r20)
   25594:	8c7fffc4 	addi	r17,r17,-1
   25598:	88000c16 	blt	r17,zero,255cc <_fwalk_reent+0x84>
   2559c:	84000304 	addi	r16,r16,12
   255a0:	8080000b 	ldhu	r2,0(r16)
   255a4:	8c7fffc4 	addi	r17,r17,-1
   255a8:	817ffd04 	addi	r5,r16,-12
   255ac:	b080052e 	bgeu	r22,r2,255c4 <_fwalk_reent+0x7c>
   255b0:	8080008f 	ldh	r2,2(r16)
   255b4:	9809883a 	mov	r4,r19
   255b8:	14800226 	beq	r2,r18,255c4 <_fwalk_reent+0x7c>
   255bc:	a83ee83a 	callr	r21
   255c0:	b8aeb03a 	or	r23,r23,r2
   255c4:	84001a04 	addi	r16,r16,104
   255c8:	8cbff51e 	bne	r17,r18,255a0 <__alt_data_end+0xfffe55a0>
   255cc:	a5000017 	ldw	r20,0(r20)
   255d0:	a03fee1e 	bne	r20,zero,2558c <__alt_data_end+0xfffe558c>
   255d4:	b805883a 	mov	r2,r23
   255d8:	dfc00817 	ldw	ra,32(sp)
   255dc:	ddc00717 	ldw	r23,28(sp)
   255e0:	dd800617 	ldw	r22,24(sp)
   255e4:	dd400517 	ldw	r21,20(sp)
   255e8:	dd000417 	ldw	r20,16(sp)
   255ec:	dcc00317 	ldw	r19,12(sp)
   255f0:	dc800217 	ldw	r18,8(sp)
   255f4:	dc400117 	ldw	r17,4(sp)
   255f8:	dc000017 	ldw	r16,0(sp)
   255fc:	dec00904 	addi	sp,sp,36
   25600:	f800283a 	ret
   25604:	002f883a 	mov	r23,zero
   25608:	003ff206 	br	255d4 <__alt_data_end+0xfffe55d4>

0002560c <_setlocale_r>:
   2560c:	30001b26 	beq	r6,zero,2567c <_setlocale_r+0x70>
   25610:	014000f4 	movhi	r5,3
   25614:	defffe04 	addi	sp,sp,-8
   25618:	29407404 	addi	r5,r5,464
   2561c:	3009883a 	mov	r4,r6
   25620:	dc000015 	stw	r16,0(sp)
   25624:	dfc00115 	stw	ra,4(sp)
   25628:	3021883a 	mov	r16,r6
   2562c:	00276040 	call	27604 <strcmp>
   25630:	1000061e 	bne	r2,zero,2564c <_setlocale_r+0x40>
   25634:	008000f4 	movhi	r2,3
   25638:	10807304 	addi	r2,r2,460
   2563c:	dfc00117 	ldw	ra,4(sp)
   25640:	dc000017 	ldw	r16,0(sp)
   25644:	dec00204 	addi	sp,sp,8
   25648:	f800283a 	ret
   2564c:	014000f4 	movhi	r5,3
   25650:	29407304 	addi	r5,r5,460
   25654:	8009883a 	mov	r4,r16
   25658:	00276040 	call	27604 <strcmp>
   2565c:	103ff526 	beq	r2,zero,25634 <__alt_data_end+0xfffe5634>
   25660:	014000f4 	movhi	r5,3
   25664:	29405e04 	addi	r5,r5,376
   25668:	8009883a 	mov	r4,r16
   2566c:	00276040 	call	27604 <strcmp>
   25670:	103ff026 	beq	r2,zero,25634 <__alt_data_end+0xfffe5634>
   25674:	0005883a 	mov	r2,zero
   25678:	003ff006 	br	2563c <__alt_data_end+0xfffe563c>
   2567c:	008000f4 	movhi	r2,3
   25680:	10807304 	addi	r2,r2,460
   25684:	f800283a 	ret

00025688 <__locale_charset>:
   25688:	008000f4 	movhi	r2,3
   2568c:	10822604 	addi	r2,r2,2200
   25690:	f800283a 	ret

00025694 <__locale_mb_cur_max>:
   25694:	008000f4 	movhi	r2,3
   25698:	1087c204 	addi	r2,r2,7944
   2569c:	10800017 	ldw	r2,0(r2)
   256a0:	f800283a 	ret

000256a4 <__locale_msgcharset>:
   256a4:	008000f4 	movhi	r2,3
   256a8:	10821e04 	addi	r2,r2,2168
   256ac:	f800283a 	ret

000256b0 <__locale_cjk_lang>:
   256b0:	0005883a 	mov	r2,zero
   256b4:	f800283a 	ret

000256b8 <_localeconv_r>:
   256b8:	008000f4 	movhi	r2,3
   256bc:	10822e04 	addi	r2,r2,2232
   256c0:	f800283a 	ret

000256c4 <setlocale>:
   256c4:	008000f4 	movhi	r2,3
   256c8:	1087c104 	addi	r2,r2,7940
   256cc:	280d883a 	mov	r6,r5
   256d0:	200b883a 	mov	r5,r4
   256d4:	11000017 	ldw	r4,0(r2)
   256d8:	002560c1 	jmpi	2560c <_setlocale_r>

000256dc <localeconv>:
   256dc:	008000f4 	movhi	r2,3
   256e0:	10822e04 	addi	r2,r2,2232
   256e4:	f800283a 	ret

000256e8 <__smakebuf_r>:
   256e8:	2880030b 	ldhu	r2,12(r5)
   256ec:	10c0008c 	andi	r3,r2,2
   256f0:	1800411e 	bne	r3,zero,257f8 <__smakebuf_r+0x110>
   256f4:	deffec04 	addi	sp,sp,-80
   256f8:	dc000f15 	stw	r16,60(sp)
   256fc:	2821883a 	mov	r16,r5
   25700:	2940038f 	ldh	r5,14(r5)
   25704:	dc401015 	stw	r17,64(sp)
   25708:	dfc01315 	stw	ra,76(sp)
   2570c:	dcc01215 	stw	r19,72(sp)
   25710:	dc801115 	stw	r18,68(sp)
   25714:	2023883a 	mov	r17,r4
   25718:	28001c16 	blt	r5,zero,2578c <__smakebuf_r+0xa4>
   2571c:	d80d883a 	mov	r6,sp
   25720:	00292440 	call	29244 <_fstat_r>
   25724:	10001816 	blt	r2,zero,25788 <__smakebuf_r+0xa0>
   25728:	d8800117 	ldw	r2,4(sp)
   2572c:	00e00014 	movui	r3,32768
   25730:	10bc000c 	andi	r2,r2,61440
   25734:	14c80020 	cmpeqi	r19,r2,8192
   25738:	10c03726 	beq	r2,r3,25818 <__smakebuf_r+0x130>
   2573c:	80c0030b 	ldhu	r3,12(r16)
   25740:	18c20014 	ori	r3,r3,2048
   25744:	80c0030d 	sth	r3,12(r16)
   25748:	00c80004 	movi	r3,8192
   2574c:	10c0521e 	bne	r2,r3,25898 <__smakebuf_r+0x1b0>
   25750:	8140038f 	ldh	r5,14(r16)
   25754:	8809883a 	mov	r4,r17
   25758:	002975c0 	call	2975c <_isatty_r>
   2575c:	10004c26 	beq	r2,zero,25890 <__smakebuf_r+0x1a8>
   25760:	8080030b 	ldhu	r2,12(r16)
   25764:	80c010c4 	addi	r3,r16,67
   25768:	80c00015 	stw	r3,0(r16)
   2576c:	10800054 	ori	r2,r2,1
   25770:	8080030d 	sth	r2,12(r16)
   25774:	00800044 	movi	r2,1
   25778:	80c00415 	stw	r3,16(r16)
   2577c:	80800515 	stw	r2,20(r16)
   25780:	04810004 	movi	r18,1024
   25784:	00000706 	br	257a4 <__smakebuf_r+0xbc>
   25788:	8080030b 	ldhu	r2,12(r16)
   2578c:	10c0200c 	andi	r3,r2,128
   25790:	18001f1e 	bne	r3,zero,25810 <__smakebuf_r+0x128>
   25794:	04810004 	movi	r18,1024
   25798:	10820014 	ori	r2,r2,2048
   2579c:	8080030d 	sth	r2,12(r16)
   257a0:	0027883a 	mov	r19,zero
   257a4:	900b883a 	mov	r5,r18
   257a8:	8809883a 	mov	r4,r17
   257ac:	00258a40 	call	258a4 <_malloc_r>
   257b0:	10002c26 	beq	r2,zero,25864 <__smakebuf_r+0x17c>
   257b4:	80c0030b 	ldhu	r3,12(r16)
   257b8:	010000b4 	movhi	r4,2
   257bc:	21132e04 	addi	r4,r4,19640
   257c0:	89000f15 	stw	r4,60(r17)
   257c4:	18c02014 	ori	r3,r3,128
   257c8:	80c0030d 	sth	r3,12(r16)
   257cc:	80800015 	stw	r2,0(r16)
   257d0:	80800415 	stw	r2,16(r16)
   257d4:	84800515 	stw	r18,20(r16)
   257d8:	98001a1e 	bne	r19,zero,25844 <__smakebuf_r+0x15c>
   257dc:	dfc01317 	ldw	ra,76(sp)
   257e0:	dcc01217 	ldw	r19,72(sp)
   257e4:	dc801117 	ldw	r18,68(sp)
   257e8:	dc401017 	ldw	r17,64(sp)
   257ec:	dc000f17 	ldw	r16,60(sp)
   257f0:	dec01404 	addi	sp,sp,80
   257f4:	f800283a 	ret
   257f8:	288010c4 	addi	r2,r5,67
   257fc:	28800015 	stw	r2,0(r5)
   25800:	28800415 	stw	r2,16(r5)
   25804:	00800044 	movi	r2,1
   25808:	28800515 	stw	r2,20(r5)
   2580c:	f800283a 	ret
   25810:	04801004 	movi	r18,64
   25814:	003fe006 	br	25798 <__alt_data_end+0xfffe5798>
   25818:	81000a17 	ldw	r4,40(r16)
   2581c:	00c000b4 	movhi	r3,2
   25820:	18dd6804 	addi	r3,r3,30112
   25824:	20ffc51e 	bne	r4,r3,2573c <__alt_data_end+0xfffe573c>
   25828:	8080030b 	ldhu	r2,12(r16)
   2582c:	04810004 	movi	r18,1024
   25830:	84801315 	stw	r18,76(r16)
   25834:	1484b03a 	or	r2,r2,r18
   25838:	8080030d 	sth	r2,12(r16)
   2583c:	0027883a 	mov	r19,zero
   25840:	003fd806 	br	257a4 <__alt_data_end+0xfffe57a4>
   25844:	8140038f 	ldh	r5,14(r16)
   25848:	8809883a 	mov	r4,r17
   2584c:	002975c0 	call	2975c <_isatty_r>
   25850:	103fe226 	beq	r2,zero,257dc <__alt_data_end+0xfffe57dc>
   25854:	8080030b 	ldhu	r2,12(r16)
   25858:	10800054 	ori	r2,r2,1
   2585c:	8080030d 	sth	r2,12(r16)
   25860:	003fde06 	br	257dc <__alt_data_end+0xfffe57dc>
   25864:	8080030b 	ldhu	r2,12(r16)
   25868:	10c0800c 	andi	r3,r2,512
   2586c:	183fdb1e 	bne	r3,zero,257dc <__alt_data_end+0xfffe57dc>
   25870:	10800094 	ori	r2,r2,2
   25874:	80c010c4 	addi	r3,r16,67
   25878:	8080030d 	sth	r2,12(r16)
   2587c:	00800044 	movi	r2,1
   25880:	80c00015 	stw	r3,0(r16)
   25884:	80c00415 	stw	r3,16(r16)
   25888:	80800515 	stw	r2,20(r16)
   2588c:	003fd306 	br	257dc <__alt_data_end+0xfffe57dc>
   25890:	04810004 	movi	r18,1024
   25894:	003fc306 	br	257a4 <__alt_data_end+0xfffe57a4>
   25898:	0027883a 	mov	r19,zero
   2589c:	04810004 	movi	r18,1024
   258a0:	003fc006 	br	257a4 <__alt_data_end+0xfffe57a4>

000258a4 <_malloc_r>:
   258a4:	defff504 	addi	sp,sp,-44
   258a8:	dc800315 	stw	r18,12(sp)
   258ac:	dfc00a15 	stw	ra,40(sp)
   258b0:	df000915 	stw	fp,36(sp)
   258b4:	ddc00815 	stw	r23,32(sp)
   258b8:	dd800715 	stw	r22,28(sp)
   258bc:	dd400615 	stw	r21,24(sp)
   258c0:	dd000515 	stw	r20,20(sp)
   258c4:	dcc00415 	stw	r19,16(sp)
   258c8:	dc400215 	stw	r17,8(sp)
   258cc:	dc000115 	stw	r16,4(sp)
   258d0:	288002c4 	addi	r2,r5,11
   258d4:	00c00584 	movi	r3,22
   258d8:	2025883a 	mov	r18,r4
   258dc:	18807f2e 	bgeu	r3,r2,25adc <_malloc_r+0x238>
   258e0:	047ffe04 	movi	r17,-8
   258e4:	1462703a 	and	r17,r2,r17
   258e8:	8800a316 	blt	r17,zero,25b78 <_malloc_r+0x2d4>
   258ec:	8940a236 	bltu	r17,r5,25b78 <_malloc_r+0x2d4>
   258f0:	002dba40 	call	2dba4 <__malloc_lock>
   258f4:	00807dc4 	movi	r2,503
   258f8:	1441e92e 	bgeu	r2,r17,260a0 <_malloc_r+0x7fc>
   258fc:	8804d27a 	srli	r2,r17,9
   25900:	1000a126 	beq	r2,zero,25b88 <_malloc_r+0x2e4>
   25904:	00c00104 	movi	r3,4
   25908:	18811e36 	bltu	r3,r2,25d84 <_malloc_r+0x4e0>
   2590c:	8804d1ba 	srli	r2,r17,6
   25910:	12000e44 	addi	r8,r2,57
   25914:	11c00e04 	addi	r7,r2,56
   25918:	4209883a 	add	r4,r8,r8
   2591c:	04c000f4 	movhi	r19,3
   25920:	2109883a 	add	r4,r4,r4
   25924:	9cc23c04 	addi	r19,r19,2288
   25928:	2109883a 	add	r4,r4,r4
   2592c:	9909883a 	add	r4,r19,r4
   25930:	24000117 	ldw	r16,4(r4)
   25934:	213ffe04 	addi	r4,r4,-8
   25938:	24009726 	beq	r4,r16,25b98 <_malloc_r+0x2f4>
   2593c:	80800117 	ldw	r2,4(r16)
   25940:	01bfff04 	movi	r6,-4
   25944:	014003c4 	movi	r5,15
   25948:	1184703a 	and	r2,r2,r6
   2594c:	1447c83a 	sub	r3,r2,r17
   25950:	28c00716 	blt	r5,r3,25970 <_malloc_r+0xcc>
   25954:	1800920e 	bge	r3,zero,25ba0 <_malloc_r+0x2fc>
   25958:	84000317 	ldw	r16,12(r16)
   2595c:	24008e26 	beq	r4,r16,25b98 <_malloc_r+0x2f4>
   25960:	80800117 	ldw	r2,4(r16)
   25964:	1184703a 	and	r2,r2,r6
   25968:	1447c83a 	sub	r3,r2,r17
   2596c:	28fff90e 	bge	r5,r3,25954 <__alt_data_end+0xfffe5954>
   25970:	3809883a 	mov	r4,r7
   25974:	018000f4 	movhi	r6,3
   25978:	9c000417 	ldw	r16,16(r19)
   2597c:	31823c04 	addi	r6,r6,2288
   25980:	32000204 	addi	r8,r6,8
   25984:	82013426 	beq	r16,r8,25e58 <_malloc_r+0x5b4>
   25988:	80c00117 	ldw	r3,4(r16)
   2598c:	00bfff04 	movi	r2,-4
   25990:	188e703a 	and	r7,r3,r2
   25994:	3c45c83a 	sub	r2,r7,r17
   25998:	00c003c4 	movi	r3,15
   2599c:	18811f16 	blt	r3,r2,25e1c <_malloc_r+0x578>
   259a0:	32000515 	stw	r8,20(r6)
   259a4:	32000415 	stw	r8,16(r6)
   259a8:	10007f0e 	bge	r2,zero,25ba8 <_malloc_r+0x304>
   259ac:	00807fc4 	movi	r2,511
   259b0:	11c0fd36 	bltu	r2,r7,25da8 <_malloc_r+0x504>
   259b4:	3806d0fa 	srli	r3,r7,3
   259b8:	01c00044 	movi	r7,1
   259bc:	30800117 	ldw	r2,4(r6)
   259c0:	19400044 	addi	r5,r3,1
   259c4:	294b883a 	add	r5,r5,r5
   259c8:	1807d0ba 	srai	r3,r3,2
   259cc:	294b883a 	add	r5,r5,r5
   259d0:	294b883a 	add	r5,r5,r5
   259d4:	298b883a 	add	r5,r5,r6
   259d8:	38c6983a 	sll	r3,r7,r3
   259dc:	29c00017 	ldw	r7,0(r5)
   259e0:	2a7ffe04 	addi	r9,r5,-8
   259e4:	1886b03a 	or	r3,r3,r2
   259e8:	82400315 	stw	r9,12(r16)
   259ec:	81c00215 	stw	r7,8(r16)
   259f0:	30c00115 	stw	r3,4(r6)
   259f4:	2c000015 	stw	r16,0(r5)
   259f8:	3c000315 	stw	r16,12(r7)
   259fc:	2005d0ba 	srai	r2,r4,2
   25a00:	01400044 	movi	r5,1
   25a04:	288a983a 	sll	r5,r5,r2
   25a08:	19406f36 	bltu	r3,r5,25bc8 <_malloc_r+0x324>
   25a0c:	28c4703a 	and	r2,r5,r3
   25a10:	10000a1e 	bne	r2,zero,25a3c <_malloc_r+0x198>
   25a14:	00bfff04 	movi	r2,-4
   25a18:	294b883a 	add	r5,r5,r5
   25a1c:	2088703a 	and	r4,r4,r2
   25a20:	28c4703a 	and	r2,r5,r3
   25a24:	21000104 	addi	r4,r4,4
   25a28:	1000041e 	bne	r2,zero,25a3c <_malloc_r+0x198>
   25a2c:	294b883a 	add	r5,r5,r5
   25a30:	28c4703a 	and	r2,r5,r3
   25a34:	21000104 	addi	r4,r4,4
   25a38:	103ffc26 	beq	r2,zero,25a2c <__alt_data_end+0xfffe5a2c>
   25a3c:	02bfff04 	movi	r10,-4
   25a40:	024003c4 	movi	r9,15
   25a44:	21800044 	addi	r6,r4,1
   25a48:	318d883a 	add	r6,r6,r6
   25a4c:	318d883a 	add	r6,r6,r6
   25a50:	318d883a 	add	r6,r6,r6
   25a54:	998d883a 	add	r6,r19,r6
   25a58:	333ffe04 	addi	r12,r6,-8
   25a5c:	2017883a 	mov	r11,r4
   25a60:	31800104 	addi	r6,r6,4
   25a64:	34000017 	ldw	r16,0(r6)
   25a68:	31fffd04 	addi	r7,r6,-12
   25a6c:	81c0041e 	bne	r16,r7,25a80 <_malloc_r+0x1dc>
   25a70:	0000fb06 	br	25e60 <_malloc_r+0x5bc>
   25a74:	1801030e 	bge	r3,zero,25e84 <_malloc_r+0x5e0>
   25a78:	84000317 	ldw	r16,12(r16)
   25a7c:	81c0f826 	beq	r16,r7,25e60 <_malloc_r+0x5bc>
   25a80:	80800117 	ldw	r2,4(r16)
   25a84:	1284703a 	and	r2,r2,r10
   25a88:	1447c83a 	sub	r3,r2,r17
   25a8c:	48fff90e 	bge	r9,r3,25a74 <__alt_data_end+0xfffe5a74>
   25a90:	80800317 	ldw	r2,12(r16)
   25a94:	81000217 	ldw	r4,8(r16)
   25a98:	89400054 	ori	r5,r17,1
   25a9c:	81400115 	stw	r5,4(r16)
   25aa0:	20800315 	stw	r2,12(r4)
   25aa4:	11000215 	stw	r4,8(r2)
   25aa8:	8463883a 	add	r17,r16,r17
   25aac:	9c400515 	stw	r17,20(r19)
   25ab0:	9c400415 	stw	r17,16(r19)
   25ab4:	18800054 	ori	r2,r3,1
   25ab8:	88800115 	stw	r2,4(r17)
   25abc:	8a000315 	stw	r8,12(r17)
   25ac0:	8a000215 	stw	r8,8(r17)
   25ac4:	88e3883a 	add	r17,r17,r3
   25ac8:	88c00015 	stw	r3,0(r17)
   25acc:	9009883a 	mov	r4,r18
   25ad0:	002dbc80 	call	2dbc8 <__malloc_unlock>
   25ad4:	80800204 	addi	r2,r16,8
   25ad8:	00001b06 	br	25b48 <_malloc_r+0x2a4>
   25adc:	04400404 	movi	r17,16
   25ae0:	89402536 	bltu	r17,r5,25b78 <_malloc_r+0x2d4>
   25ae4:	002dba40 	call	2dba4 <__malloc_lock>
   25ae8:	00800184 	movi	r2,6
   25aec:	01000084 	movi	r4,2
   25af0:	04c000f4 	movhi	r19,3
   25af4:	1085883a 	add	r2,r2,r2
   25af8:	9cc23c04 	addi	r19,r19,2288
   25afc:	1085883a 	add	r2,r2,r2
   25b00:	9885883a 	add	r2,r19,r2
   25b04:	14000117 	ldw	r16,4(r2)
   25b08:	10fffe04 	addi	r3,r2,-8
   25b0c:	80c0d926 	beq	r16,r3,25e74 <_malloc_r+0x5d0>
   25b10:	80c00117 	ldw	r3,4(r16)
   25b14:	81000317 	ldw	r4,12(r16)
   25b18:	00bfff04 	movi	r2,-4
   25b1c:	1884703a 	and	r2,r3,r2
   25b20:	81400217 	ldw	r5,8(r16)
   25b24:	8085883a 	add	r2,r16,r2
   25b28:	10c00117 	ldw	r3,4(r2)
   25b2c:	29000315 	stw	r4,12(r5)
   25b30:	21400215 	stw	r5,8(r4)
   25b34:	18c00054 	ori	r3,r3,1
   25b38:	10c00115 	stw	r3,4(r2)
   25b3c:	9009883a 	mov	r4,r18
   25b40:	002dbc80 	call	2dbc8 <__malloc_unlock>
   25b44:	80800204 	addi	r2,r16,8
   25b48:	dfc00a17 	ldw	ra,40(sp)
   25b4c:	df000917 	ldw	fp,36(sp)
   25b50:	ddc00817 	ldw	r23,32(sp)
   25b54:	dd800717 	ldw	r22,28(sp)
   25b58:	dd400617 	ldw	r21,24(sp)
   25b5c:	dd000517 	ldw	r20,20(sp)
   25b60:	dcc00417 	ldw	r19,16(sp)
   25b64:	dc800317 	ldw	r18,12(sp)
   25b68:	dc400217 	ldw	r17,8(sp)
   25b6c:	dc000117 	ldw	r16,4(sp)
   25b70:	dec00b04 	addi	sp,sp,44
   25b74:	f800283a 	ret
   25b78:	00800304 	movi	r2,12
   25b7c:	90800015 	stw	r2,0(r18)
   25b80:	0005883a 	mov	r2,zero
   25b84:	003ff006 	br	25b48 <__alt_data_end+0xfffe5b48>
   25b88:	01002004 	movi	r4,128
   25b8c:	02001004 	movi	r8,64
   25b90:	01c00fc4 	movi	r7,63
   25b94:	003f6106 	br	2591c <__alt_data_end+0xfffe591c>
   25b98:	4009883a 	mov	r4,r8
   25b9c:	003f7506 	br	25974 <__alt_data_end+0xfffe5974>
   25ba0:	81000317 	ldw	r4,12(r16)
   25ba4:	003fde06 	br	25b20 <__alt_data_end+0xfffe5b20>
   25ba8:	81c5883a 	add	r2,r16,r7
   25bac:	11400117 	ldw	r5,4(r2)
   25bb0:	9009883a 	mov	r4,r18
   25bb4:	29400054 	ori	r5,r5,1
   25bb8:	11400115 	stw	r5,4(r2)
   25bbc:	002dbc80 	call	2dbc8 <__malloc_unlock>
   25bc0:	80800204 	addi	r2,r16,8
   25bc4:	003fe006 	br	25b48 <__alt_data_end+0xfffe5b48>
   25bc8:	9c000217 	ldw	r16,8(r19)
   25bcc:	00bfff04 	movi	r2,-4
   25bd0:	85800117 	ldw	r22,4(r16)
   25bd4:	b0ac703a 	and	r22,r22,r2
   25bd8:	b4400336 	bltu	r22,r17,25be8 <_malloc_r+0x344>
   25bdc:	b445c83a 	sub	r2,r22,r17
   25be0:	00c003c4 	movi	r3,15
   25be4:	18805d16 	blt	r3,r2,25d5c <_malloc_r+0x4b8>
   25be8:	05c000f4 	movhi	r23,3
   25bec:	008000f4 	movhi	r2,3
   25bf0:	108e9304 	addi	r2,r2,14924
   25bf4:	bdc7c304 	addi	r23,r23,7948
   25bf8:	15400017 	ldw	r21,0(r2)
   25bfc:	b8c00017 	ldw	r3,0(r23)
   25c00:	00bfffc4 	movi	r2,-1
   25c04:	858d883a 	add	r6,r16,r22
   25c08:	8d6b883a 	add	r21,r17,r21
   25c0c:	1880ea26 	beq	r3,r2,25fb8 <_malloc_r+0x714>
   25c10:	ad4403c4 	addi	r21,r21,4111
   25c14:	00bc0004 	movi	r2,-4096
   25c18:	a8aa703a 	and	r21,r21,r2
   25c1c:	a80b883a 	mov	r5,r21
   25c20:	9009883a 	mov	r4,r18
   25c24:	d9800015 	stw	r6,0(sp)
   25c28:	00274740 	call	27474 <_sbrk_r>
   25c2c:	1029883a 	mov	r20,r2
   25c30:	00bfffc4 	movi	r2,-1
   25c34:	d9800017 	ldw	r6,0(sp)
   25c38:	a080e826 	beq	r20,r2,25fdc <_malloc_r+0x738>
   25c3c:	a180a636 	bltu	r20,r6,25ed8 <_malloc_r+0x634>
   25c40:	070000f4 	movhi	fp,3
   25c44:	e70e9c04 	addi	fp,fp,14960
   25c48:	e0800017 	ldw	r2,0(fp)
   25c4c:	a887883a 	add	r3,r21,r2
   25c50:	e0c00015 	stw	r3,0(fp)
   25c54:	3500e626 	beq	r6,r20,25ff0 <_malloc_r+0x74c>
   25c58:	b9000017 	ldw	r4,0(r23)
   25c5c:	00bfffc4 	movi	r2,-1
   25c60:	2080ee26 	beq	r4,r2,2601c <_malloc_r+0x778>
   25c64:	a185c83a 	sub	r2,r20,r6
   25c68:	10c5883a 	add	r2,r2,r3
   25c6c:	e0800015 	stw	r2,0(fp)
   25c70:	a0c001cc 	andi	r3,r20,7
   25c74:	1800bc26 	beq	r3,zero,25f68 <_malloc_r+0x6c4>
   25c78:	a0e9c83a 	sub	r20,r20,r3
   25c7c:	00840204 	movi	r2,4104
   25c80:	a5000204 	addi	r20,r20,8
   25c84:	10c7c83a 	sub	r3,r2,r3
   25c88:	a545883a 	add	r2,r20,r21
   25c8c:	1083ffcc 	andi	r2,r2,4095
   25c90:	18abc83a 	sub	r21,r3,r2
   25c94:	a80b883a 	mov	r5,r21
   25c98:	9009883a 	mov	r4,r18
   25c9c:	00274740 	call	27474 <_sbrk_r>
   25ca0:	00ffffc4 	movi	r3,-1
   25ca4:	10c0e126 	beq	r2,r3,2602c <_malloc_r+0x788>
   25ca8:	1505c83a 	sub	r2,r2,r20
   25cac:	1545883a 	add	r2,r2,r21
   25cb0:	10800054 	ori	r2,r2,1
   25cb4:	e0c00017 	ldw	r3,0(fp)
   25cb8:	9d000215 	stw	r20,8(r19)
   25cbc:	a0800115 	stw	r2,4(r20)
   25cc0:	a8c7883a 	add	r3,r21,r3
   25cc4:	e0c00015 	stw	r3,0(fp)
   25cc8:	84c00e26 	beq	r16,r19,25d04 <_malloc_r+0x460>
   25ccc:	018003c4 	movi	r6,15
   25cd0:	3580a72e 	bgeu	r6,r22,25f70 <_malloc_r+0x6cc>
   25cd4:	81400117 	ldw	r5,4(r16)
   25cd8:	013ffe04 	movi	r4,-8
   25cdc:	b0bffd04 	addi	r2,r22,-12
   25ce0:	1104703a 	and	r2,r2,r4
   25ce4:	2900004c 	andi	r4,r5,1
   25ce8:	2088b03a 	or	r4,r4,r2
   25cec:	81000115 	stw	r4,4(r16)
   25cf0:	01400144 	movi	r5,5
   25cf4:	8089883a 	add	r4,r16,r2
   25cf8:	21400115 	stw	r5,4(r4)
   25cfc:	21400215 	stw	r5,8(r4)
   25d00:	3080cd36 	bltu	r6,r2,26038 <_malloc_r+0x794>
   25d04:	008000f4 	movhi	r2,3
   25d08:	108e9204 	addi	r2,r2,14920
   25d0c:	11000017 	ldw	r4,0(r2)
   25d10:	20c0012e 	bgeu	r4,r3,25d18 <_malloc_r+0x474>
   25d14:	10c00015 	stw	r3,0(r2)
   25d18:	008000f4 	movhi	r2,3
   25d1c:	108e9104 	addi	r2,r2,14916
   25d20:	11000017 	ldw	r4,0(r2)
   25d24:	9c000217 	ldw	r16,8(r19)
   25d28:	20c0012e 	bgeu	r4,r3,25d30 <_malloc_r+0x48c>
   25d2c:	10c00015 	stw	r3,0(r2)
   25d30:	80c00117 	ldw	r3,4(r16)
   25d34:	00bfff04 	movi	r2,-4
   25d38:	1886703a 	and	r3,r3,r2
   25d3c:	1c45c83a 	sub	r2,r3,r17
   25d40:	1c400236 	bltu	r3,r17,25d4c <_malloc_r+0x4a8>
   25d44:	00c003c4 	movi	r3,15
   25d48:	18800416 	blt	r3,r2,25d5c <_malloc_r+0x4b8>
   25d4c:	9009883a 	mov	r4,r18
   25d50:	002dbc80 	call	2dbc8 <__malloc_unlock>
   25d54:	0005883a 	mov	r2,zero
   25d58:	003f7b06 	br	25b48 <__alt_data_end+0xfffe5b48>
   25d5c:	88c00054 	ori	r3,r17,1
   25d60:	80c00115 	stw	r3,4(r16)
   25d64:	8463883a 	add	r17,r16,r17
   25d68:	10800054 	ori	r2,r2,1
   25d6c:	9c400215 	stw	r17,8(r19)
   25d70:	88800115 	stw	r2,4(r17)
   25d74:	9009883a 	mov	r4,r18
   25d78:	002dbc80 	call	2dbc8 <__malloc_unlock>
   25d7c:	80800204 	addi	r2,r16,8
   25d80:	003f7106 	br	25b48 <__alt_data_end+0xfffe5b48>
   25d84:	00c00504 	movi	r3,20
   25d88:	18804a2e 	bgeu	r3,r2,25eb4 <_malloc_r+0x610>
   25d8c:	00c01504 	movi	r3,84
   25d90:	18806e36 	bltu	r3,r2,25f4c <_malloc_r+0x6a8>
   25d94:	8804d33a 	srli	r2,r17,12
   25d98:	12001bc4 	addi	r8,r2,111
   25d9c:	11c01b84 	addi	r7,r2,110
   25da0:	4209883a 	add	r4,r8,r8
   25da4:	003edd06 	br	2591c <__alt_data_end+0xfffe591c>
   25da8:	3804d27a 	srli	r2,r7,9
   25dac:	00c00104 	movi	r3,4
   25db0:	1880442e 	bgeu	r3,r2,25ec4 <_malloc_r+0x620>
   25db4:	00c00504 	movi	r3,20
   25db8:	18808136 	bltu	r3,r2,25fc0 <_malloc_r+0x71c>
   25dbc:	11401704 	addi	r5,r2,92
   25dc0:	10c016c4 	addi	r3,r2,91
   25dc4:	294b883a 	add	r5,r5,r5
   25dc8:	294b883a 	add	r5,r5,r5
   25dcc:	294b883a 	add	r5,r5,r5
   25dd0:	994b883a 	add	r5,r19,r5
   25dd4:	28800017 	ldw	r2,0(r5)
   25dd8:	018000f4 	movhi	r6,3
   25ddc:	297ffe04 	addi	r5,r5,-8
   25de0:	31823c04 	addi	r6,r6,2288
   25de4:	28806526 	beq	r5,r2,25f7c <_malloc_r+0x6d8>
   25de8:	01bfff04 	movi	r6,-4
   25dec:	10c00117 	ldw	r3,4(r2)
   25df0:	1986703a 	and	r3,r3,r6
   25df4:	38c0022e 	bgeu	r7,r3,25e00 <_malloc_r+0x55c>
   25df8:	10800217 	ldw	r2,8(r2)
   25dfc:	28bffb1e 	bne	r5,r2,25dec <__alt_data_end+0xfffe5dec>
   25e00:	11400317 	ldw	r5,12(r2)
   25e04:	98c00117 	ldw	r3,4(r19)
   25e08:	81400315 	stw	r5,12(r16)
   25e0c:	80800215 	stw	r2,8(r16)
   25e10:	2c000215 	stw	r16,8(r5)
   25e14:	14000315 	stw	r16,12(r2)
   25e18:	003ef806 	br	259fc <__alt_data_end+0xfffe59fc>
   25e1c:	88c00054 	ori	r3,r17,1
   25e20:	80c00115 	stw	r3,4(r16)
   25e24:	8463883a 	add	r17,r16,r17
   25e28:	34400515 	stw	r17,20(r6)
   25e2c:	34400415 	stw	r17,16(r6)
   25e30:	10c00054 	ori	r3,r2,1
   25e34:	8a000315 	stw	r8,12(r17)
   25e38:	8a000215 	stw	r8,8(r17)
   25e3c:	88c00115 	stw	r3,4(r17)
   25e40:	88a3883a 	add	r17,r17,r2
   25e44:	88800015 	stw	r2,0(r17)
   25e48:	9009883a 	mov	r4,r18
   25e4c:	002dbc80 	call	2dbc8 <__malloc_unlock>
   25e50:	80800204 	addi	r2,r16,8
   25e54:	003f3c06 	br	25b48 <__alt_data_end+0xfffe5b48>
   25e58:	30c00117 	ldw	r3,4(r6)
   25e5c:	003ee706 	br	259fc <__alt_data_end+0xfffe59fc>
   25e60:	5ac00044 	addi	r11,r11,1
   25e64:	588000cc 	andi	r2,r11,3
   25e68:	31800204 	addi	r6,r6,8
   25e6c:	103efd1e 	bne	r2,zero,25a64 <__alt_data_end+0xfffe5a64>
   25e70:	00002406 	br	25f04 <_malloc_r+0x660>
   25e74:	14000317 	ldw	r16,12(r2)
   25e78:	143f251e 	bne	r2,r16,25b10 <__alt_data_end+0xfffe5b10>
   25e7c:	21000084 	addi	r4,r4,2
   25e80:	003ebc06 	br	25974 <__alt_data_end+0xfffe5974>
   25e84:	8085883a 	add	r2,r16,r2
   25e88:	10c00117 	ldw	r3,4(r2)
   25e8c:	81000317 	ldw	r4,12(r16)
   25e90:	81400217 	ldw	r5,8(r16)
   25e94:	18c00054 	ori	r3,r3,1
   25e98:	10c00115 	stw	r3,4(r2)
   25e9c:	29000315 	stw	r4,12(r5)
   25ea0:	21400215 	stw	r5,8(r4)
   25ea4:	9009883a 	mov	r4,r18
   25ea8:	002dbc80 	call	2dbc8 <__malloc_unlock>
   25eac:	80800204 	addi	r2,r16,8
   25eb0:	003f2506 	br	25b48 <__alt_data_end+0xfffe5b48>
   25eb4:	12001704 	addi	r8,r2,92
   25eb8:	11c016c4 	addi	r7,r2,91
   25ebc:	4209883a 	add	r4,r8,r8
   25ec0:	003e9606 	br	2591c <__alt_data_end+0xfffe591c>
   25ec4:	3804d1ba 	srli	r2,r7,6
   25ec8:	11400e44 	addi	r5,r2,57
   25ecc:	10c00e04 	addi	r3,r2,56
   25ed0:	294b883a 	add	r5,r5,r5
   25ed4:	003fbc06 	br	25dc8 <__alt_data_end+0xfffe5dc8>
   25ed8:	84ff5926 	beq	r16,r19,25c40 <__alt_data_end+0xfffe5c40>
   25edc:	008000f4 	movhi	r2,3
   25ee0:	10823c04 	addi	r2,r2,2288
   25ee4:	14000217 	ldw	r16,8(r2)
   25ee8:	00bfff04 	movi	r2,-4
   25eec:	80c00117 	ldw	r3,4(r16)
   25ef0:	1886703a 	and	r3,r3,r2
   25ef4:	003f9106 	br	25d3c <__alt_data_end+0xfffe5d3c>
   25ef8:	60800217 	ldw	r2,8(r12)
   25efc:	213fffc4 	addi	r4,r4,-1
   25f00:	1300651e 	bne	r2,r12,26098 <_malloc_r+0x7f4>
   25f04:	208000cc 	andi	r2,r4,3
   25f08:	633ffe04 	addi	r12,r12,-8
   25f0c:	103ffa1e 	bne	r2,zero,25ef8 <__alt_data_end+0xfffe5ef8>
   25f10:	98800117 	ldw	r2,4(r19)
   25f14:	0146303a 	nor	r3,zero,r5
   25f18:	1884703a 	and	r2,r3,r2
   25f1c:	98800115 	stw	r2,4(r19)
   25f20:	294b883a 	add	r5,r5,r5
   25f24:	117f2836 	bltu	r2,r5,25bc8 <__alt_data_end+0xfffe5bc8>
   25f28:	283f2726 	beq	r5,zero,25bc8 <__alt_data_end+0xfffe5bc8>
   25f2c:	2886703a 	and	r3,r5,r2
   25f30:	5809883a 	mov	r4,r11
   25f34:	183ec31e 	bne	r3,zero,25a44 <__alt_data_end+0xfffe5a44>
   25f38:	294b883a 	add	r5,r5,r5
   25f3c:	2886703a 	and	r3,r5,r2
   25f40:	21000104 	addi	r4,r4,4
   25f44:	183ffc26 	beq	r3,zero,25f38 <__alt_data_end+0xfffe5f38>
   25f48:	003ebe06 	br	25a44 <__alt_data_end+0xfffe5a44>
   25f4c:	00c05504 	movi	r3,340
   25f50:	18801236 	bltu	r3,r2,25f9c <_malloc_r+0x6f8>
   25f54:	8804d3fa 	srli	r2,r17,15
   25f58:	12001e04 	addi	r8,r2,120
   25f5c:	11c01dc4 	addi	r7,r2,119
   25f60:	4209883a 	add	r4,r8,r8
   25f64:	003e6d06 	br	2591c <__alt_data_end+0xfffe591c>
   25f68:	00c40004 	movi	r3,4096
   25f6c:	003f4606 	br	25c88 <__alt_data_end+0xfffe5c88>
   25f70:	00800044 	movi	r2,1
   25f74:	a0800115 	stw	r2,4(r20)
   25f78:	003f7406 	br	25d4c <__alt_data_end+0xfffe5d4c>
   25f7c:	1805d0ba 	srai	r2,r3,2
   25f80:	01c00044 	movi	r7,1
   25f84:	30c00117 	ldw	r3,4(r6)
   25f88:	388e983a 	sll	r7,r7,r2
   25f8c:	2805883a 	mov	r2,r5
   25f90:	38c6b03a 	or	r3,r7,r3
   25f94:	30c00115 	stw	r3,4(r6)
   25f98:	003f9b06 	br	25e08 <__alt_data_end+0xfffe5e08>
   25f9c:	00c15504 	movi	r3,1364
   25fa0:	18801a36 	bltu	r3,r2,2600c <_malloc_r+0x768>
   25fa4:	8804d4ba 	srli	r2,r17,18
   25fa8:	12001f44 	addi	r8,r2,125
   25fac:	11c01f04 	addi	r7,r2,124
   25fb0:	4209883a 	add	r4,r8,r8
   25fb4:	003e5906 	br	2591c <__alt_data_end+0xfffe591c>
   25fb8:	ad400404 	addi	r21,r21,16
   25fbc:	003f1706 	br	25c1c <__alt_data_end+0xfffe5c1c>
   25fc0:	00c01504 	movi	r3,84
   25fc4:	18802336 	bltu	r3,r2,26054 <_malloc_r+0x7b0>
   25fc8:	3804d33a 	srli	r2,r7,12
   25fcc:	11401bc4 	addi	r5,r2,111
   25fd0:	10c01b84 	addi	r3,r2,110
   25fd4:	294b883a 	add	r5,r5,r5
   25fd8:	003f7b06 	br	25dc8 <__alt_data_end+0xfffe5dc8>
   25fdc:	9c000217 	ldw	r16,8(r19)
   25fe0:	00bfff04 	movi	r2,-4
   25fe4:	80c00117 	ldw	r3,4(r16)
   25fe8:	1886703a 	and	r3,r3,r2
   25fec:	003f5306 	br	25d3c <__alt_data_end+0xfffe5d3c>
   25ff0:	3083ffcc 	andi	r2,r6,4095
   25ff4:	103f181e 	bne	r2,zero,25c58 <__alt_data_end+0xfffe5c58>
   25ff8:	99000217 	ldw	r4,8(r19)
   25ffc:	b545883a 	add	r2,r22,r21
   26000:	10800054 	ori	r2,r2,1
   26004:	20800115 	stw	r2,4(r4)
   26008:	003f3e06 	br	25d04 <__alt_data_end+0xfffe5d04>
   2600c:	01003f84 	movi	r4,254
   26010:	02001fc4 	movi	r8,127
   26014:	01c01f84 	movi	r7,126
   26018:	003e4006 	br	2591c <__alt_data_end+0xfffe591c>
   2601c:	008000f4 	movhi	r2,3
   26020:	1087c304 	addi	r2,r2,7948
   26024:	15000015 	stw	r20,0(r2)
   26028:	003f1106 	br	25c70 <__alt_data_end+0xfffe5c70>
   2602c:	00800044 	movi	r2,1
   26030:	002b883a 	mov	r21,zero
   26034:	003f1f06 	br	25cb4 <__alt_data_end+0xfffe5cb4>
   26038:	81400204 	addi	r5,r16,8
   2603c:	9009883a 	mov	r4,r18
   26040:	00251740 	call	25174 <_free_r>
   26044:	008000f4 	movhi	r2,3
   26048:	108e9c04 	addi	r2,r2,14960
   2604c:	10c00017 	ldw	r3,0(r2)
   26050:	003f2c06 	br	25d04 <__alt_data_end+0xfffe5d04>
   26054:	00c05504 	movi	r3,340
   26058:	18800536 	bltu	r3,r2,26070 <_malloc_r+0x7cc>
   2605c:	3804d3fa 	srli	r2,r7,15
   26060:	11401e04 	addi	r5,r2,120
   26064:	10c01dc4 	addi	r3,r2,119
   26068:	294b883a 	add	r5,r5,r5
   2606c:	003f5606 	br	25dc8 <__alt_data_end+0xfffe5dc8>
   26070:	00c15504 	movi	r3,1364
   26074:	18800536 	bltu	r3,r2,2608c <_malloc_r+0x7e8>
   26078:	3804d4ba 	srli	r2,r7,18
   2607c:	11401f44 	addi	r5,r2,125
   26080:	10c01f04 	addi	r3,r2,124
   26084:	294b883a 	add	r5,r5,r5
   26088:	003f4f06 	br	25dc8 <__alt_data_end+0xfffe5dc8>
   2608c:	01403f84 	movi	r5,254
   26090:	00c01f84 	movi	r3,126
   26094:	003f4c06 	br	25dc8 <__alt_data_end+0xfffe5dc8>
   26098:	98800117 	ldw	r2,4(r19)
   2609c:	003fa006 	br	25f20 <__alt_data_end+0xfffe5f20>
   260a0:	8808d0fa 	srli	r4,r17,3
   260a4:	20800044 	addi	r2,r4,1
   260a8:	1085883a 	add	r2,r2,r2
   260ac:	003e9006 	br	25af0 <__alt_data_end+0xfffe5af0>

000260b0 <memchr>:
   260b0:	208000cc 	andi	r2,r4,3
   260b4:	280f883a 	mov	r7,r5
   260b8:	10003426 	beq	r2,zero,2618c <memchr+0xdc>
   260bc:	30bfffc4 	addi	r2,r6,-1
   260c0:	30001a26 	beq	r6,zero,2612c <memchr+0x7c>
   260c4:	20c00003 	ldbu	r3,0(r4)
   260c8:	29803fcc 	andi	r6,r5,255
   260cc:	30c0051e 	bne	r6,r3,260e4 <memchr+0x34>
   260d0:	00001806 	br	26134 <memchr+0x84>
   260d4:	10001526 	beq	r2,zero,2612c <memchr+0x7c>
   260d8:	20c00003 	ldbu	r3,0(r4)
   260dc:	10bfffc4 	addi	r2,r2,-1
   260e0:	30c01426 	beq	r6,r3,26134 <memchr+0x84>
   260e4:	21000044 	addi	r4,r4,1
   260e8:	20c000cc 	andi	r3,r4,3
   260ec:	183ff91e 	bne	r3,zero,260d4 <__alt_data_end+0xfffe60d4>
   260f0:	020000c4 	movi	r8,3
   260f4:	40801136 	bltu	r8,r2,2613c <memchr+0x8c>
   260f8:	10000c26 	beq	r2,zero,2612c <memchr+0x7c>
   260fc:	20c00003 	ldbu	r3,0(r4)
   26100:	29403fcc 	andi	r5,r5,255
   26104:	28c00b26 	beq	r5,r3,26134 <memchr+0x84>
   26108:	20c00044 	addi	r3,r4,1
   2610c:	39803fcc 	andi	r6,r7,255
   26110:	2089883a 	add	r4,r4,r2
   26114:	00000306 	br	26124 <memchr+0x74>
   26118:	18c00044 	addi	r3,r3,1
   2611c:	197fffc3 	ldbu	r5,-1(r3)
   26120:	31400526 	beq	r6,r5,26138 <memchr+0x88>
   26124:	1805883a 	mov	r2,r3
   26128:	20fffb1e 	bne	r4,r3,26118 <__alt_data_end+0xfffe6118>
   2612c:	0005883a 	mov	r2,zero
   26130:	f800283a 	ret
   26134:	2005883a 	mov	r2,r4
   26138:	f800283a 	ret
   2613c:	28c03fcc 	andi	r3,r5,255
   26140:	1812923a 	slli	r9,r3,8
   26144:	02ffbff4 	movhi	r11,65279
   26148:	02a02074 	movhi	r10,32897
   2614c:	48d2b03a 	or	r9,r9,r3
   26150:	4806943a 	slli	r3,r9,16
   26154:	5affbfc4 	addi	r11,r11,-257
   26158:	52a02004 	addi	r10,r10,-32640
   2615c:	48d2b03a 	or	r9,r9,r3
   26160:	20c00017 	ldw	r3,0(r4)
   26164:	48c6f03a 	xor	r3,r9,r3
   26168:	1acd883a 	add	r6,r3,r11
   2616c:	00c6303a 	nor	r3,zero,r3
   26170:	30c6703a 	and	r3,r6,r3
   26174:	1a86703a 	and	r3,r3,r10
   26178:	183fe01e 	bne	r3,zero,260fc <__alt_data_end+0xfffe60fc>
   2617c:	10bfff04 	addi	r2,r2,-4
   26180:	21000104 	addi	r4,r4,4
   26184:	40bff636 	bltu	r8,r2,26160 <__alt_data_end+0xfffe6160>
   26188:	003fdb06 	br	260f8 <__alt_data_end+0xfffe60f8>
   2618c:	3005883a 	mov	r2,r6
   26190:	003fd706 	br	260f0 <__alt_data_end+0xfffe60f0>

00026194 <memcpy>:
   26194:	defffd04 	addi	sp,sp,-12
   26198:	dfc00215 	stw	ra,8(sp)
   2619c:	dc400115 	stw	r17,4(sp)
   261a0:	dc000015 	stw	r16,0(sp)
   261a4:	00c003c4 	movi	r3,15
   261a8:	2005883a 	mov	r2,r4
   261ac:	1980452e 	bgeu	r3,r6,262c4 <memcpy+0x130>
   261b0:	2906b03a 	or	r3,r5,r4
   261b4:	18c000cc 	andi	r3,r3,3
   261b8:	1800441e 	bne	r3,zero,262cc <memcpy+0x138>
   261bc:	347ffc04 	addi	r17,r6,-16
   261c0:	8822d13a 	srli	r17,r17,4
   261c4:	28c00104 	addi	r3,r5,4
   261c8:	23400104 	addi	r13,r4,4
   261cc:	8820913a 	slli	r16,r17,4
   261d0:	2b000204 	addi	r12,r5,8
   261d4:	22c00204 	addi	r11,r4,8
   261d8:	84000504 	addi	r16,r16,20
   261dc:	2a800304 	addi	r10,r5,12
   261e0:	22400304 	addi	r9,r4,12
   261e4:	2c21883a 	add	r16,r5,r16
   261e8:	2811883a 	mov	r8,r5
   261ec:	200f883a 	mov	r7,r4
   261f0:	41000017 	ldw	r4,0(r8)
   261f4:	1fc00017 	ldw	ra,0(r3)
   261f8:	63c00017 	ldw	r15,0(r12)
   261fc:	39000015 	stw	r4,0(r7)
   26200:	53800017 	ldw	r14,0(r10)
   26204:	6fc00015 	stw	ra,0(r13)
   26208:	5bc00015 	stw	r15,0(r11)
   2620c:	4b800015 	stw	r14,0(r9)
   26210:	18c00404 	addi	r3,r3,16
   26214:	39c00404 	addi	r7,r7,16
   26218:	42000404 	addi	r8,r8,16
   2621c:	6b400404 	addi	r13,r13,16
   26220:	63000404 	addi	r12,r12,16
   26224:	5ac00404 	addi	r11,r11,16
   26228:	52800404 	addi	r10,r10,16
   2622c:	4a400404 	addi	r9,r9,16
   26230:	1c3fef1e 	bne	r3,r16,261f0 <__alt_data_end+0xfffe61f0>
   26234:	89c00044 	addi	r7,r17,1
   26238:	380e913a 	slli	r7,r7,4
   2623c:	310003cc 	andi	r4,r6,15
   26240:	02c000c4 	movi	r11,3
   26244:	11c7883a 	add	r3,r2,r7
   26248:	29cb883a 	add	r5,r5,r7
   2624c:	5900212e 	bgeu	r11,r4,262d4 <memcpy+0x140>
   26250:	1813883a 	mov	r9,r3
   26254:	2811883a 	mov	r8,r5
   26258:	200f883a 	mov	r7,r4
   2625c:	42800017 	ldw	r10,0(r8)
   26260:	4a400104 	addi	r9,r9,4
   26264:	39ffff04 	addi	r7,r7,-4
   26268:	4abfff15 	stw	r10,-4(r9)
   2626c:	42000104 	addi	r8,r8,4
   26270:	59fffa36 	bltu	r11,r7,2625c <__alt_data_end+0xfffe625c>
   26274:	213fff04 	addi	r4,r4,-4
   26278:	2008d0ba 	srli	r4,r4,2
   2627c:	318000cc 	andi	r6,r6,3
   26280:	21000044 	addi	r4,r4,1
   26284:	2109883a 	add	r4,r4,r4
   26288:	2109883a 	add	r4,r4,r4
   2628c:	1907883a 	add	r3,r3,r4
   26290:	290b883a 	add	r5,r5,r4
   26294:	30000626 	beq	r6,zero,262b0 <memcpy+0x11c>
   26298:	198d883a 	add	r6,r3,r6
   2629c:	29c00003 	ldbu	r7,0(r5)
   262a0:	18c00044 	addi	r3,r3,1
   262a4:	29400044 	addi	r5,r5,1
   262a8:	19ffffc5 	stb	r7,-1(r3)
   262ac:	19bffb1e 	bne	r3,r6,2629c <__alt_data_end+0xfffe629c>
   262b0:	dfc00217 	ldw	ra,8(sp)
   262b4:	dc400117 	ldw	r17,4(sp)
   262b8:	dc000017 	ldw	r16,0(sp)
   262bc:	dec00304 	addi	sp,sp,12
   262c0:	f800283a 	ret
   262c4:	2007883a 	mov	r3,r4
   262c8:	003ff206 	br	26294 <__alt_data_end+0xfffe6294>
   262cc:	2007883a 	mov	r3,r4
   262d0:	003ff106 	br	26298 <__alt_data_end+0xfffe6298>
   262d4:	200d883a 	mov	r6,r4
   262d8:	003fee06 	br	26294 <__alt_data_end+0xfffe6294>

000262dc <memset>:
   262dc:	20c000cc 	andi	r3,r4,3
   262e0:	2005883a 	mov	r2,r4
   262e4:	18004426 	beq	r3,zero,263f8 <memset+0x11c>
   262e8:	31ffffc4 	addi	r7,r6,-1
   262ec:	30004026 	beq	r6,zero,263f0 <memset+0x114>
   262f0:	2813883a 	mov	r9,r5
   262f4:	200d883a 	mov	r6,r4
   262f8:	2007883a 	mov	r3,r4
   262fc:	00000406 	br	26310 <memset+0x34>
   26300:	3a3fffc4 	addi	r8,r7,-1
   26304:	31800044 	addi	r6,r6,1
   26308:	38003926 	beq	r7,zero,263f0 <memset+0x114>
   2630c:	400f883a 	mov	r7,r8
   26310:	18c00044 	addi	r3,r3,1
   26314:	32400005 	stb	r9,0(r6)
   26318:	1a0000cc 	andi	r8,r3,3
   2631c:	403ff81e 	bne	r8,zero,26300 <__alt_data_end+0xfffe6300>
   26320:	010000c4 	movi	r4,3
   26324:	21c02d2e 	bgeu	r4,r7,263dc <memset+0x100>
   26328:	29003fcc 	andi	r4,r5,255
   2632c:	200c923a 	slli	r6,r4,8
   26330:	3108b03a 	or	r4,r6,r4
   26334:	200c943a 	slli	r6,r4,16
   26338:	218cb03a 	or	r6,r4,r6
   2633c:	010003c4 	movi	r4,15
   26340:	21c0182e 	bgeu	r4,r7,263a4 <memset+0xc8>
   26344:	3b3ffc04 	addi	r12,r7,-16
   26348:	6018d13a 	srli	r12,r12,4
   2634c:	1a000104 	addi	r8,r3,4
   26350:	1ac00204 	addi	r11,r3,8
   26354:	6008913a 	slli	r4,r12,4
   26358:	1a800304 	addi	r10,r3,12
   2635c:	1813883a 	mov	r9,r3
   26360:	21000504 	addi	r4,r4,20
   26364:	1909883a 	add	r4,r3,r4
   26368:	49800015 	stw	r6,0(r9)
   2636c:	41800015 	stw	r6,0(r8)
   26370:	59800015 	stw	r6,0(r11)
   26374:	51800015 	stw	r6,0(r10)
   26378:	42000404 	addi	r8,r8,16
   2637c:	4a400404 	addi	r9,r9,16
   26380:	5ac00404 	addi	r11,r11,16
   26384:	52800404 	addi	r10,r10,16
   26388:	413ff71e 	bne	r8,r4,26368 <__alt_data_end+0xfffe6368>
   2638c:	63000044 	addi	r12,r12,1
   26390:	6018913a 	slli	r12,r12,4
   26394:	39c003cc 	andi	r7,r7,15
   26398:	010000c4 	movi	r4,3
   2639c:	1b07883a 	add	r3,r3,r12
   263a0:	21c00e2e 	bgeu	r4,r7,263dc <memset+0x100>
   263a4:	1813883a 	mov	r9,r3
   263a8:	3811883a 	mov	r8,r7
   263ac:	010000c4 	movi	r4,3
   263b0:	49800015 	stw	r6,0(r9)
   263b4:	423fff04 	addi	r8,r8,-4
   263b8:	4a400104 	addi	r9,r9,4
   263bc:	223ffc36 	bltu	r4,r8,263b0 <__alt_data_end+0xfffe63b0>
   263c0:	393fff04 	addi	r4,r7,-4
   263c4:	2008d0ba 	srli	r4,r4,2
   263c8:	39c000cc 	andi	r7,r7,3
   263cc:	21000044 	addi	r4,r4,1
   263d0:	2109883a 	add	r4,r4,r4
   263d4:	2109883a 	add	r4,r4,r4
   263d8:	1907883a 	add	r3,r3,r4
   263dc:	38000526 	beq	r7,zero,263f4 <memset+0x118>
   263e0:	19cf883a 	add	r7,r3,r7
   263e4:	19400005 	stb	r5,0(r3)
   263e8:	18c00044 	addi	r3,r3,1
   263ec:	38fffd1e 	bne	r7,r3,263e4 <__alt_data_end+0xfffe63e4>
   263f0:	f800283a 	ret
   263f4:	f800283a 	ret
   263f8:	2007883a 	mov	r3,r4
   263fc:	300f883a 	mov	r7,r6
   26400:	003fc706 	br	26320 <__alt_data_end+0xfffe6320>

00026404 <_Balloc>:
   26404:	20801317 	ldw	r2,76(r4)
   26408:	defffc04 	addi	sp,sp,-16
   2640c:	dc400115 	stw	r17,4(sp)
   26410:	dc000015 	stw	r16,0(sp)
   26414:	dfc00315 	stw	ra,12(sp)
   26418:	dc800215 	stw	r18,8(sp)
   2641c:	2023883a 	mov	r17,r4
   26420:	2821883a 	mov	r16,r5
   26424:	10000f26 	beq	r2,zero,26464 <_Balloc+0x60>
   26428:	8407883a 	add	r3,r16,r16
   2642c:	18c7883a 	add	r3,r3,r3
   26430:	10c7883a 	add	r3,r2,r3
   26434:	18800017 	ldw	r2,0(r3)
   26438:	10001126 	beq	r2,zero,26480 <_Balloc+0x7c>
   2643c:	11000017 	ldw	r4,0(r2)
   26440:	19000015 	stw	r4,0(r3)
   26444:	10000415 	stw	zero,16(r2)
   26448:	10000315 	stw	zero,12(r2)
   2644c:	dfc00317 	ldw	ra,12(sp)
   26450:	dc800217 	ldw	r18,8(sp)
   26454:	dc400117 	ldw	r17,4(sp)
   26458:	dc000017 	ldw	r16,0(sp)
   2645c:	dec00404 	addi	sp,sp,16
   26460:	f800283a 	ret
   26464:	01800844 	movi	r6,33
   26468:	01400104 	movi	r5,4
   2646c:	0028e740 	call	28e74 <_calloc_r>
   26470:	88801315 	stw	r2,76(r17)
   26474:	103fec1e 	bne	r2,zero,26428 <__alt_data_end+0xfffe6428>
   26478:	0005883a 	mov	r2,zero
   2647c:	003ff306 	br	2644c <__alt_data_end+0xfffe644c>
   26480:	01400044 	movi	r5,1
   26484:	2c24983a 	sll	r18,r5,r16
   26488:	8809883a 	mov	r4,r17
   2648c:	91800144 	addi	r6,r18,5
   26490:	318d883a 	add	r6,r6,r6
   26494:	318d883a 	add	r6,r6,r6
   26498:	0028e740 	call	28e74 <_calloc_r>
   2649c:	103ff626 	beq	r2,zero,26478 <__alt_data_end+0xfffe6478>
   264a0:	14000115 	stw	r16,4(r2)
   264a4:	14800215 	stw	r18,8(r2)
   264a8:	003fe606 	br	26444 <__alt_data_end+0xfffe6444>

000264ac <_Bfree>:
   264ac:	28000826 	beq	r5,zero,264d0 <_Bfree+0x24>
   264b0:	28c00117 	ldw	r3,4(r5)
   264b4:	20801317 	ldw	r2,76(r4)
   264b8:	18c7883a 	add	r3,r3,r3
   264bc:	18c7883a 	add	r3,r3,r3
   264c0:	10c5883a 	add	r2,r2,r3
   264c4:	10c00017 	ldw	r3,0(r2)
   264c8:	28c00015 	stw	r3,0(r5)
   264cc:	11400015 	stw	r5,0(r2)
   264d0:	f800283a 	ret

000264d4 <__multadd>:
   264d4:	defffa04 	addi	sp,sp,-24
   264d8:	dc800315 	stw	r18,12(sp)
   264dc:	dc400215 	stw	r17,8(sp)
   264e0:	dc000115 	stw	r16,4(sp)
   264e4:	2823883a 	mov	r17,r5
   264e8:	2c000417 	ldw	r16,16(r5)
   264ec:	dfc00515 	stw	ra,20(sp)
   264f0:	dcc00415 	stw	r19,16(sp)
   264f4:	2025883a 	mov	r18,r4
   264f8:	29400504 	addi	r5,r5,20
   264fc:	0011883a 	mov	r8,zero
   26500:	28c00017 	ldw	r3,0(r5)
   26504:	29400104 	addi	r5,r5,4
   26508:	42000044 	addi	r8,r8,1
   2650c:	18bfffcc 	andi	r2,r3,65535
   26510:	1185383a 	mul	r2,r2,r6
   26514:	1806d43a 	srli	r3,r3,16
   26518:	11cf883a 	add	r7,r2,r7
   2651c:	3808d43a 	srli	r4,r7,16
   26520:	1987383a 	mul	r3,r3,r6
   26524:	38bfffcc 	andi	r2,r7,65535
   26528:	1907883a 	add	r3,r3,r4
   2652c:	1808943a 	slli	r4,r3,16
   26530:	180ed43a 	srli	r7,r3,16
   26534:	2085883a 	add	r2,r4,r2
   26538:	28bfff15 	stw	r2,-4(r5)
   2653c:	443ff016 	blt	r8,r16,26500 <__alt_data_end+0xfffe6500>
   26540:	38000926 	beq	r7,zero,26568 <__multadd+0x94>
   26544:	88800217 	ldw	r2,8(r17)
   26548:	80800f0e 	bge	r16,r2,26588 <__multadd+0xb4>
   2654c:	80800144 	addi	r2,r16,5
   26550:	1085883a 	add	r2,r2,r2
   26554:	1085883a 	add	r2,r2,r2
   26558:	8885883a 	add	r2,r17,r2
   2655c:	11c00015 	stw	r7,0(r2)
   26560:	84000044 	addi	r16,r16,1
   26564:	8c000415 	stw	r16,16(r17)
   26568:	8805883a 	mov	r2,r17
   2656c:	dfc00517 	ldw	ra,20(sp)
   26570:	dcc00417 	ldw	r19,16(sp)
   26574:	dc800317 	ldw	r18,12(sp)
   26578:	dc400217 	ldw	r17,8(sp)
   2657c:	dc000117 	ldw	r16,4(sp)
   26580:	dec00604 	addi	sp,sp,24
   26584:	f800283a 	ret
   26588:	89400117 	ldw	r5,4(r17)
   2658c:	9009883a 	mov	r4,r18
   26590:	d9c00015 	stw	r7,0(sp)
   26594:	29400044 	addi	r5,r5,1
   26598:	00264040 	call	26404 <_Balloc>
   2659c:	89800417 	ldw	r6,16(r17)
   265a0:	89400304 	addi	r5,r17,12
   265a4:	11000304 	addi	r4,r2,12
   265a8:	31800084 	addi	r6,r6,2
   265ac:	318d883a 	add	r6,r6,r6
   265b0:	318d883a 	add	r6,r6,r6
   265b4:	1027883a 	mov	r19,r2
   265b8:	00261940 	call	26194 <memcpy>
   265bc:	d9c00017 	ldw	r7,0(sp)
   265c0:	88000a26 	beq	r17,zero,265ec <__multadd+0x118>
   265c4:	88c00117 	ldw	r3,4(r17)
   265c8:	90801317 	ldw	r2,76(r18)
   265cc:	18c7883a 	add	r3,r3,r3
   265d0:	18c7883a 	add	r3,r3,r3
   265d4:	10c5883a 	add	r2,r2,r3
   265d8:	10c00017 	ldw	r3,0(r2)
   265dc:	88c00015 	stw	r3,0(r17)
   265e0:	14400015 	stw	r17,0(r2)
   265e4:	9823883a 	mov	r17,r19
   265e8:	003fd806 	br	2654c <__alt_data_end+0xfffe654c>
   265ec:	9823883a 	mov	r17,r19
   265f0:	003fd606 	br	2654c <__alt_data_end+0xfffe654c>

000265f4 <__s2b>:
   265f4:	defff904 	addi	sp,sp,-28
   265f8:	dc400115 	stw	r17,4(sp)
   265fc:	dc000015 	stw	r16,0(sp)
   26600:	2023883a 	mov	r17,r4
   26604:	2821883a 	mov	r16,r5
   26608:	39000204 	addi	r4,r7,8
   2660c:	01400244 	movi	r5,9
   26610:	dcc00315 	stw	r19,12(sp)
   26614:	dc800215 	stw	r18,8(sp)
   26618:	dfc00615 	stw	ra,24(sp)
   2661c:	dd400515 	stw	r21,20(sp)
   26620:	dd000415 	stw	r20,16(sp)
   26624:	3825883a 	mov	r18,r7
   26628:	3027883a 	mov	r19,r6
   2662c:	0020b3c0 	call	20b3c <__divsi3>
   26630:	00c00044 	movi	r3,1
   26634:	000b883a 	mov	r5,zero
   26638:	1880030e 	bge	r3,r2,26648 <__s2b+0x54>
   2663c:	18c7883a 	add	r3,r3,r3
   26640:	29400044 	addi	r5,r5,1
   26644:	18bffd16 	blt	r3,r2,2663c <__alt_data_end+0xfffe663c>
   26648:	8809883a 	mov	r4,r17
   2664c:	00264040 	call	26404 <_Balloc>
   26650:	d8c00717 	ldw	r3,28(sp)
   26654:	10c00515 	stw	r3,20(r2)
   26658:	00c00044 	movi	r3,1
   2665c:	10c00415 	stw	r3,16(r2)
   26660:	00c00244 	movi	r3,9
   26664:	1cc0210e 	bge	r3,r19,266ec <__s2b+0xf8>
   26668:	80eb883a 	add	r21,r16,r3
   2666c:	a829883a 	mov	r20,r21
   26670:	84e1883a 	add	r16,r16,r19
   26674:	a1c00007 	ldb	r7,0(r20)
   26678:	01800284 	movi	r6,10
   2667c:	a5000044 	addi	r20,r20,1
   26680:	100b883a 	mov	r5,r2
   26684:	39fff404 	addi	r7,r7,-48
   26688:	8809883a 	mov	r4,r17
   2668c:	00264d40 	call	264d4 <__multadd>
   26690:	a43ff81e 	bne	r20,r16,26674 <__alt_data_end+0xfffe6674>
   26694:	ace1883a 	add	r16,r21,r19
   26698:	843ffe04 	addi	r16,r16,-8
   2669c:	9c800a0e 	bge	r19,r18,266c8 <__s2b+0xd4>
   266a0:	94e5c83a 	sub	r18,r18,r19
   266a4:	84a5883a 	add	r18,r16,r18
   266a8:	81c00007 	ldb	r7,0(r16)
   266ac:	01800284 	movi	r6,10
   266b0:	84000044 	addi	r16,r16,1
   266b4:	100b883a 	mov	r5,r2
   266b8:	39fff404 	addi	r7,r7,-48
   266bc:	8809883a 	mov	r4,r17
   266c0:	00264d40 	call	264d4 <__multadd>
   266c4:	84bff81e 	bne	r16,r18,266a8 <__alt_data_end+0xfffe66a8>
   266c8:	dfc00617 	ldw	ra,24(sp)
   266cc:	dd400517 	ldw	r21,20(sp)
   266d0:	dd000417 	ldw	r20,16(sp)
   266d4:	dcc00317 	ldw	r19,12(sp)
   266d8:	dc800217 	ldw	r18,8(sp)
   266dc:	dc400117 	ldw	r17,4(sp)
   266e0:	dc000017 	ldw	r16,0(sp)
   266e4:	dec00704 	addi	sp,sp,28
   266e8:	f800283a 	ret
   266ec:	84000284 	addi	r16,r16,10
   266f0:	1827883a 	mov	r19,r3
   266f4:	003fe906 	br	2669c <__alt_data_end+0xfffe669c>

000266f8 <__hi0bits>:
   266f8:	20bfffec 	andhi	r2,r4,65535
   266fc:	1000141e 	bne	r2,zero,26750 <__hi0bits+0x58>
   26700:	2008943a 	slli	r4,r4,16
   26704:	00800404 	movi	r2,16
   26708:	20ffc02c 	andhi	r3,r4,65280
   2670c:	1800021e 	bne	r3,zero,26718 <__hi0bits+0x20>
   26710:	2008923a 	slli	r4,r4,8
   26714:	10800204 	addi	r2,r2,8
   26718:	20fc002c 	andhi	r3,r4,61440
   2671c:	1800021e 	bne	r3,zero,26728 <__hi0bits+0x30>
   26720:	2008913a 	slli	r4,r4,4
   26724:	10800104 	addi	r2,r2,4
   26728:	20f0002c 	andhi	r3,r4,49152
   2672c:	1800031e 	bne	r3,zero,2673c <__hi0bits+0x44>
   26730:	2109883a 	add	r4,r4,r4
   26734:	10800084 	addi	r2,r2,2
   26738:	2109883a 	add	r4,r4,r4
   2673c:	20000316 	blt	r4,zero,2674c <__hi0bits+0x54>
   26740:	2110002c 	andhi	r4,r4,16384
   26744:	2000041e 	bne	r4,zero,26758 <__hi0bits+0x60>
   26748:	00800804 	movi	r2,32
   2674c:	f800283a 	ret
   26750:	0005883a 	mov	r2,zero
   26754:	003fec06 	br	26708 <__alt_data_end+0xfffe6708>
   26758:	10800044 	addi	r2,r2,1
   2675c:	f800283a 	ret

00026760 <__lo0bits>:
   26760:	20c00017 	ldw	r3,0(r4)
   26764:	188001cc 	andi	r2,r3,7
   26768:	10000826 	beq	r2,zero,2678c <__lo0bits+0x2c>
   2676c:	1880004c 	andi	r2,r3,1
   26770:	1000211e 	bne	r2,zero,267f8 <__lo0bits+0x98>
   26774:	1880008c 	andi	r2,r3,2
   26778:	1000211e 	bne	r2,zero,26800 <__lo0bits+0xa0>
   2677c:	1806d0ba 	srli	r3,r3,2
   26780:	00800084 	movi	r2,2
   26784:	20c00015 	stw	r3,0(r4)
   26788:	f800283a 	ret
   2678c:	18bfffcc 	andi	r2,r3,65535
   26790:	10001326 	beq	r2,zero,267e0 <__lo0bits+0x80>
   26794:	0005883a 	mov	r2,zero
   26798:	19403fcc 	andi	r5,r3,255
   2679c:	2800021e 	bne	r5,zero,267a8 <__lo0bits+0x48>
   267a0:	1806d23a 	srli	r3,r3,8
   267a4:	10800204 	addi	r2,r2,8
   267a8:	194003cc 	andi	r5,r3,15
   267ac:	2800021e 	bne	r5,zero,267b8 <__lo0bits+0x58>
   267b0:	1806d13a 	srli	r3,r3,4
   267b4:	10800104 	addi	r2,r2,4
   267b8:	194000cc 	andi	r5,r3,3
   267bc:	2800021e 	bne	r5,zero,267c8 <__lo0bits+0x68>
   267c0:	1806d0ba 	srli	r3,r3,2
   267c4:	10800084 	addi	r2,r2,2
   267c8:	1940004c 	andi	r5,r3,1
   267cc:	2800081e 	bne	r5,zero,267f0 <__lo0bits+0x90>
   267d0:	1806d07a 	srli	r3,r3,1
   267d4:	1800051e 	bne	r3,zero,267ec <__lo0bits+0x8c>
   267d8:	00800804 	movi	r2,32
   267dc:	f800283a 	ret
   267e0:	1806d43a 	srli	r3,r3,16
   267e4:	00800404 	movi	r2,16
   267e8:	003feb06 	br	26798 <__alt_data_end+0xfffe6798>
   267ec:	10800044 	addi	r2,r2,1
   267f0:	20c00015 	stw	r3,0(r4)
   267f4:	f800283a 	ret
   267f8:	0005883a 	mov	r2,zero
   267fc:	f800283a 	ret
   26800:	1806d07a 	srli	r3,r3,1
   26804:	00800044 	movi	r2,1
   26808:	20c00015 	stw	r3,0(r4)
   2680c:	f800283a 	ret

00026810 <__i2b>:
   26810:	defffd04 	addi	sp,sp,-12
   26814:	dc000015 	stw	r16,0(sp)
   26818:	04000044 	movi	r16,1
   2681c:	dc400115 	stw	r17,4(sp)
   26820:	2823883a 	mov	r17,r5
   26824:	800b883a 	mov	r5,r16
   26828:	dfc00215 	stw	ra,8(sp)
   2682c:	00264040 	call	26404 <_Balloc>
   26830:	14400515 	stw	r17,20(r2)
   26834:	14000415 	stw	r16,16(r2)
   26838:	dfc00217 	ldw	ra,8(sp)
   2683c:	dc400117 	ldw	r17,4(sp)
   26840:	dc000017 	ldw	r16,0(sp)
   26844:	dec00304 	addi	sp,sp,12
   26848:	f800283a 	ret

0002684c <__multiply>:
   2684c:	defffa04 	addi	sp,sp,-24
   26850:	dcc00315 	stw	r19,12(sp)
   26854:	dc800215 	stw	r18,8(sp)
   26858:	34c00417 	ldw	r19,16(r6)
   2685c:	2c800417 	ldw	r18,16(r5)
   26860:	dd000415 	stw	r20,16(sp)
   26864:	dc400115 	stw	r17,4(sp)
   26868:	dfc00515 	stw	ra,20(sp)
   2686c:	dc000015 	stw	r16,0(sp)
   26870:	2829883a 	mov	r20,r5
   26874:	3023883a 	mov	r17,r6
   26878:	94c0050e 	bge	r18,r19,26890 <__multiply+0x44>
   2687c:	9007883a 	mov	r3,r18
   26880:	3029883a 	mov	r20,r6
   26884:	9825883a 	mov	r18,r19
   26888:	2823883a 	mov	r17,r5
   2688c:	1827883a 	mov	r19,r3
   26890:	a0800217 	ldw	r2,8(r20)
   26894:	94e1883a 	add	r16,r18,r19
   26898:	a1400117 	ldw	r5,4(r20)
   2689c:	1400010e 	bge	r2,r16,268a4 <__multiply+0x58>
   268a0:	29400044 	addi	r5,r5,1
   268a4:	00264040 	call	26404 <_Balloc>
   268a8:	8415883a 	add	r10,r16,r16
   268ac:	12c00504 	addi	r11,r2,20
   268b0:	5295883a 	add	r10,r10,r10
   268b4:	5a95883a 	add	r10,r11,r10
   268b8:	5807883a 	mov	r3,r11
   268bc:	5a80032e 	bgeu	r11,r10,268cc <__multiply+0x80>
   268c0:	18000015 	stw	zero,0(r3)
   268c4:	18c00104 	addi	r3,r3,4
   268c8:	1abffd36 	bltu	r3,r10,268c0 <__alt_data_end+0xfffe68c0>
   268cc:	9ce7883a 	add	r19,r19,r19
   268d0:	94a5883a 	add	r18,r18,r18
   268d4:	89800504 	addi	r6,r17,20
   268d8:	9ce7883a 	add	r19,r19,r19
   268dc:	a3400504 	addi	r13,r20,20
   268e0:	94a5883a 	add	r18,r18,r18
   268e4:	34d9883a 	add	r12,r6,r19
   268e8:	6c93883a 	add	r9,r13,r18
   268ec:	3300422e 	bgeu	r6,r12,269f8 <__multiply+0x1ac>
   268f0:	37c00017 	ldw	ra,0(r6)
   268f4:	fbffffcc 	andi	r15,ra,65535
   268f8:	78001b26 	beq	r15,zero,26968 <__multiply+0x11c>
   268fc:	5811883a 	mov	r8,r11
   26900:	681d883a 	mov	r14,r13
   26904:	000f883a 	mov	r7,zero
   26908:	71000017 	ldw	r4,0(r14)
   2690c:	40c00017 	ldw	r3,0(r8)
   26910:	73800104 	addi	r14,r14,4
   26914:	217fffcc 	andi	r5,r4,65535
   26918:	2bcb383a 	mul	r5,r5,r15
   2691c:	2008d43a 	srli	r4,r4,16
   26920:	1c7fffcc 	andi	r17,r3,65535
   26924:	2c4b883a 	add	r5,r5,r17
   26928:	29cb883a 	add	r5,r5,r7
   2692c:	23c9383a 	mul	r4,r4,r15
   26930:	1806d43a 	srli	r3,r3,16
   26934:	280ed43a 	srli	r7,r5,16
   26938:	297fffcc 	andi	r5,r5,65535
   2693c:	20c7883a 	add	r3,r4,r3
   26940:	19c7883a 	add	r3,r3,r7
   26944:	1808943a 	slli	r4,r3,16
   26948:	4023883a 	mov	r17,r8
   2694c:	180ed43a 	srli	r7,r3,16
   26950:	214ab03a 	or	r5,r4,r5
   26954:	41400015 	stw	r5,0(r8)
   26958:	42000104 	addi	r8,r8,4
   2695c:	727fea36 	bltu	r14,r9,26908 <__alt_data_end+0xfffe6908>
   26960:	89c00115 	stw	r7,4(r17)
   26964:	37c00017 	ldw	ra,0(r6)
   26968:	f83ed43a 	srli	ra,ra,16
   2696c:	f8001f26 	beq	ra,zero,269ec <__multiply+0x1a0>
   26970:	58c00017 	ldw	r3,0(r11)
   26974:	681d883a 	mov	r14,r13
   26978:	581f883a 	mov	r15,r11
   2697c:	1811883a 	mov	r8,r3
   26980:	5825883a 	mov	r18,r11
   26984:	000f883a 	mov	r7,zero
   26988:	00000106 	br	26990 <__multiply+0x144>
   2698c:	8825883a 	mov	r18,r17
   26990:	7140000b 	ldhu	r5,0(r14)
   26994:	4010d43a 	srli	r8,r8,16
   26998:	193fffcc 	andi	r4,r3,65535
   2699c:	2fcb383a 	mul	r5,r5,ra
   269a0:	7bc00104 	addi	r15,r15,4
   269a4:	73800104 	addi	r14,r14,4
   269a8:	2a0b883a 	add	r5,r5,r8
   269ac:	29cb883a 	add	r5,r5,r7
   269b0:	2806943a 	slli	r3,r5,16
   269b4:	94400104 	addi	r17,r18,4
   269b8:	280ad43a 	srli	r5,r5,16
   269bc:	1908b03a 	or	r4,r3,r4
   269c0:	793fff15 	stw	r4,-4(r15)
   269c4:	70ffff17 	ldw	r3,-4(r14)
   269c8:	8a000017 	ldw	r8,0(r17)
   269cc:	1806d43a 	srli	r3,r3,16
   269d0:	413fffcc 	andi	r4,r8,65535
   269d4:	1fc7383a 	mul	r3,r3,ra
   269d8:	1907883a 	add	r3,r3,r4
   269dc:	1947883a 	add	r3,r3,r5
   269e0:	180ed43a 	srli	r7,r3,16
   269e4:	727fe936 	bltu	r14,r9,2698c <__alt_data_end+0xfffe698c>
   269e8:	90c00115 	stw	r3,4(r18)
   269ec:	31800104 	addi	r6,r6,4
   269f0:	5ac00104 	addi	r11,r11,4
   269f4:	333fbe36 	bltu	r6,r12,268f0 <__alt_data_end+0xfffe68f0>
   269f8:	0400090e 	bge	zero,r16,26a20 <__multiply+0x1d4>
   269fc:	50ffff17 	ldw	r3,-4(r10)
   26a00:	52bfff04 	addi	r10,r10,-4
   26a04:	18000326 	beq	r3,zero,26a14 <__multiply+0x1c8>
   26a08:	00000506 	br	26a20 <__multiply+0x1d4>
   26a0c:	50c00017 	ldw	r3,0(r10)
   26a10:	1800031e 	bne	r3,zero,26a20 <__multiply+0x1d4>
   26a14:	843fffc4 	addi	r16,r16,-1
   26a18:	52bfff04 	addi	r10,r10,-4
   26a1c:	803ffb1e 	bne	r16,zero,26a0c <__alt_data_end+0xfffe6a0c>
   26a20:	14000415 	stw	r16,16(r2)
   26a24:	dfc00517 	ldw	ra,20(sp)
   26a28:	dd000417 	ldw	r20,16(sp)
   26a2c:	dcc00317 	ldw	r19,12(sp)
   26a30:	dc800217 	ldw	r18,8(sp)
   26a34:	dc400117 	ldw	r17,4(sp)
   26a38:	dc000017 	ldw	r16,0(sp)
   26a3c:	dec00604 	addi	sp,sp,24
   26a40:	f800283a 	ret

00026a44 <__pow5mult>:
   26a44:	defffa04 	addi	sp,sp,-24
   26a48:	dcc00315 	stw	r19,12(sp)
   26a4c:	dc000015 	stw	r16,0(sp)
   26a50:	dfc00515 	stw	ra,20(sp)
   26a54:	dd000415 	stw	r20,16(sp)
   26a58:	dc800215 	stw	r18,8(sp)
   26a5c:	dc400115 	stw	r17,4(sp)
   26a60:	308000cc 	andi	r2,r6,3
   26a64:	3021883a 	mov	r16,r6
   26a68:	2027883a 	mov	r19,r4
   26a6c:	10002f1e 	bne	r2,zero,26b2c <__pow5mult+0xe8>
   26a70:	2825883a 	mov	r18,r5
   26a74:	8021d0ba 	srai	r16,r16,2
   26a78:	80001a26 	beq	r16,zero,26ae4 <__pow5mult+0xa0>
   26a7c:	9c401217 	ldw	r17,72(r19)
   26a80:	8800061e 	bne	r17,zero,26a9c <__pow5mult+0x58>
   26a84:	00003406 	br	26b58 <__pow5mult+0x114>
   26a88:	8021d07a 	srai	r16,r16,1
   26a8c:	80001526 	beq	r16,zero,26ae4 <__pow5mult+0xa0>
   26a90:	88800017 	ldw	r2,0(r17)
   26a94:	10001c26 	beq	r2,zero,26b08 <__pow5mult+0xc4>
   26a98:	1023883a 	mov	r17,r2
   26a9c:	8080004c 	andi	r2,r16,1
   26aa0:	103ff926 	beq	r2,zero,26a88 <__alt_data_end+0xfffe6a88>
   26aa4:	880d883a 	mov	r6,r17
   26aa8:	900b883a 	mov	r5,r18
   26aac:	9809883a 	mov	r4,r19
   26ab0:	002684c0 	call	2684c <__multiply>
   26ab4:	90001b26 	beq	r18,zero,26b24 <__pow5mult+0xe0>
   26ab8:	91000117 	ldw	r4,4(r18)
   26abc:	98c01317 	ldw	r3,76(r19)
   26ac0:	8021d07a 	srai	r16,r16,1
   26ac4:	2109883a 	add	r4,r4,r4
   26ac8:	2109883a 	add	r4,r4,r4
   26acc:	1907883a 	add	r3,r3,r4
   26ad0:	19000017 	ldw	r4,0(r3)
   26ad4:	91000015 	stw	r4,0(r18)
   26ad8:	1c800015 	stw	r18,0(r3)
   26adc:	1025883a 	mov	r18,r2
   26ae0:	803feb1e 	bne	r16,zero,26a90 <__alt_data_end+0xfffe6a90>
   26ae4:	9005883a 	mov	r2,r18
   26ae8:	dfc00517 	ldw	ra,20(sp)
   26aec:	dd000417 	ldw	r20,16(sp)
   26af0:	dcc00317 	ldw	r19,12(sp)
   26af4:	dc800217 	ldw	r18,8(sp)
   26af8:	dc400117 	ldw	r17,4(sp)
   26afc:	dc000017 	ldw	r16,0(sp)
   26b00:	dec00604 	addi	sp,sp,24
   26b04:	f800283a 	ret
   26b08:	880d883a 	mov	r6,r17
   26b0c:	880b883a 	mov	r5,r17
   26b10:	9809883a 	mov	r4,r19
   26b14:	002684c0 	call	2684c <__multiply>
   26b18:	88800015 	stw	r2,0(r17)
   26b1c:	10000015 	stw	zero,0(r2)
   26b20:	003fdd06 	br	26a98 <__alt_data_end+0xfffe6a98>
   26b24:	1025883a 	mov	r18,r2
   26b28:	003fd706 	br	26a88 <__alt_data_end+0xfffe6a88>
   26b2c:	10bfffc4 	addi	r2,r2,-1
   26b30:	1085883a 	add	r2,r2,r2
   26b34:	00c000f4 	movhi	r3,3
   26b38:	18c07704 	addi	r3,r3,476
   26b3c:	1085883a 	add	r2,r2,r2
   26b40:	1885883a 	add	r2,r3,r2
   26b44:	11800017 	ldw	r6,0(r2)
   26b48:	000f883a 	mov	r7,zero
   26b4c:	00264d40 	call	264d4 <__multadd>
   26b50:	1025883a 	mov	r18,r2
   26b54:	003fc706 	br	26a74 <__alt_data_end+0xfffe6a74>
   26b58:	05000044 	movi	r20,1
   26b5c:	a00b883a 	mov	r5,r20
   26b60:	9809883a 	mov	r4,r19
   26b64:	00264040 	call	26404 <_Balloc>
   26b68:	1023883a 	mov	r17,r2
   26b6c:	00809c44 	movi	r2,625
   26b70:	88800515 	stw	r2,20(r17)
   26b74:	8d000415 	stw	r20,16(r17)
   26b78:	9c401215 	stw	r17,72(r19)
   26b7c:	88000015 	stw	zero,0(r17)
   26b80:	003fc606 	br	26a9c <__alt_data_end+0xfffe6a9c>

00026b84 <__lshift>:
   26b84:	defff904 	addi	sp,sp,-28
   26b88:	dd400515 	stw	r21,20(sp)
   26b8c:	dcc00315 	stw	r19,12(sp)
   26b90:	302bd17a 	srai	r21,r6,5
   26b94:	2cc00417 	ldw	r19,16(r5)
   26b98:	28800217 	ldw	r2,8(r5)
   26b9c:	dd000415 	stw	r20,16(sp)
   26ba0:	ace7883a 	add	r19,r21,r19
   26ba4:	dc800215 	stw	r18,8(sp)
   26ba8:	dc400115 	stw	r17,4(sp)
   26bac:	dc000015 	stw	r16,0(sp)
   26bb0:	dfc00615 	stw	ra,24(sp)
   26bb4:	9c000044 	addi	r16,r19,1
   26bb8:	2823883a 	mov	r17,r5
   26bbc:	3029883a 	mov	r20,r6
   26bc0:	2025883a 	mov	r18,r4
   26bc4:	29400117 	ldw	r5,4(r5)
   26bc8:	1400030e 	bge	r2,r16,26bd8 <__lshift+0x54>
   26bcc:	1085883a 	add	r2,r2,r2
   26bd0:	29400044 	addi	r5,r5,1
   26bd4:	143ffd16 	blt	r2,r16,26bcc <__alt_data_end+0xfffe6bcc>
   26bd8:	9009883a 	mov	r4,r18
   26bdc:	00264040 	call	26404 <_Balloc>
   26be0:	10c00504 	addi	r3,r2,20
   26be4:	0540070e 	bge	zero,r21,26c04 <__lshift+0x80>
   26be8:	ad6b883a 	add	r21,r21,r21
   26bec:	ad6b883a 	add	r21,r21,r21
   26bf0:	1809883a 	mov	r4,r3
   26bf4:	1d47883a 	add	r3,r3,r21
   26bf8:	20000015 	stw	zero,0(r4)
   26bfc:	21000104 	addi	r4,r4,4
   26c00:	193ffd1e 	bne	r3,r4,26bf8 <__alt_data_end+0xfffe6bf8>
   26c04:	8a000417 	ldw	r8,16(r17)
   26c08:	89000504 	addi	r4,r17,20
   26c0c:	a18007cc 	andi	r6,r20,31
   26c10:	4211883a 	add	r8,r8,r8
   26c14:	4211883a 	add	r8,r8,r8
   26c18:	2211883a 	add	r8,r4,r8
   26c1c:	30002326 	beq	r6,zero,26cac <__lshift+0x128>
   26c20:	02400804 	movi	r9,32
   26c24:	4993c83a 	sub	r9,r9,r6
   26c28:	000b883a 	mov	r5,zero
   26c2c:	21c00017 	ldw	r7,0(r4)
   26c30:	1815883a 	mov	r10,r3
   26c34:	18c00104 	addi	r3,r3,4
   26c38:	398e983a 	sll	r7,r7,r6
   26c3c:	21000104 	addi	r4,r4,4
   26c40:	394ab03a 	or	r5,r7,r5
   26c44:	197fff15 	stw	r5,-4(r3)
   26c48:	217fff17 	ldw	r5,-4(r4)
   26c4c:	2a4ad83a 	srl	r5,r5,r9
   26c50:	223ff636 	bltu	r4,r8,26c2c <__alt_data_end+0xfffe6c2c>
   26c54:	51400115 	stw	r5,4(r10)
   26c58:	28001a1e 	bne	r5,zero,26cc4 <__lshift+0x140>
   26c5c:	843fffc4 	addi	r16,r16,-1
   26c60:	14000415 	stw	r16,16(r2)
   26c64:	88000826 	beq	r17,zero,26c88 <__lshift+0x104>
   26c68:	89000117 	ldw	r4,4(r17)
   26c6c:	90c01317 	ldw	r3,76(r18)
   26c70:	2109883a 	add	r4,r4,r4
   26c74:	2109883a 	add	r4,r4,r4
   26c78:	1907883a 	add	r3,r3,r4
   26c7c:	19000017 	ldw	r4,0(r3)
   26c80:	89000015 	stw	r4,0(r17)
   26c84:	1c400015 	stw	r17,0(r3)
   26c88:	dfc00617 	ldw	ra,24(sp)
   26c8c:	dd400517 	ldw	r21,20(sp)
   26c90:	dd000417 	ldw	r20,16(sp)
   26c94:	dcc00317 	ldw	r19,12(sp)
   26c98:	dc800217 	ldw	r18,8(sp)
   26c9c:	dc400117 	ldw	r17,4(sp)
   26ca0:	dc000017 	ldw	r16,0(sp)
   26ca4:	dec00704 	addi	sp,sp,28
   26ca8:	f800283a 	ret
   26cac:	21400017 	ldw	r5,0(r4)
   26cb0:	18c00104 	addi	r3,r3,4
   26cb4:	21000104 	addi	r4,r4,4
   26cb8:	197fff15 	stw	r5,-4(r3)
   26cbc:	223ffb36 	bltu	r4,r8,26cac <__alt_data_end+0xfffe6cac>
   26cc0:	003fe606 	br	26c5c <__alt_data_end+0xfffe6c5c>
   26cc4:	9c000084 	addi	r16,r19,2
   26cc8:	003fe406 	br	26c5c <__alt_data_end+0xfffe6c5c>

00026ccc <__mcmp>:
   26ccc:	20800417 	ldw	r2,16(r4)
   26cd0:	28c00417 	ldw	r3,16(r5)
   26cd4:	10c5c83a 	sub	r2,r2,r3
   26cd8:	1000111e 	bne	r2,zero,26d20 <__mcmp+0x54>
   26cdc:	18c7883a 	add	r3,r3,r3
   26ce0:	18c7883a 	add	r3,r3,r3
   26ce4:	21000504 	addi	r4,r4,20
   26ce8:	29400504 	addi	r5,r5,20
   26cec:	20c5883a 	add	r2,r4,r3
   26cf0:	28cb883a 	add	r5,r5,r3
   26cf4:	00000106 	br	26cfc <__mcmp+0x30>
   26cf8:	20800a2e 	bgeu	r4,r2,26d24 <__mcmp+0x58>
   26cfc:	10bfff04 	addi	r2,r2,-4
   26d00:	297fff04 	addi	r5,r5,-4
   26d04:	11800017 	ldw	r6,0(r2)
   26d08:	28c00017 	ldw	r3,0(r5)
   26d0c:	30fffa26 	beq	r6,r3,26cf8 <__alt_data_end+0xfffe6cf8>
   26d10:	30c00236 	bltu	r6,r3,26d1c <__mcmp+0x50>
   26d14:	00800044 	movi	r2,1
   26d18:	f800283a 	ret
   26d1c:	00bfffc4 	movi	r2,-1
   26d20:	f800283a 	ret
   26d24:	0005883a 	mov	r2,zero
   26d28:	f800283a 	ret

00026d2c <__mdiff>:
   26d2c:	28c00417 	ldw	r3,16(r5)
   26d30:	30800417 	ldw	r2,16(r6)
   26d34:	defffa04 	addi	sp,sp,-24
   26d38:	dcc00315 	stw	r19,12(sp)
   26d3c:	dc800215 	stw	r18,8(sp)
   26d40:	dfc00515 	stw	ra,20(sp)
   26d44:	dd000415 	stw	r20,16(sp)
   26d48:	dc400115 	stw	r17,4(sp)
   26d4c:	dc000015 	stw	r16,0(sp)
   26d50:	1887c83a 	sub	r3,r3,r2
   26d54:	2825883a 	mov	r18,r5
   26d58:	3027883a 	mov	r19,r6
   26d5c:	1800141e 	bne	r3,zero,26db0 <__mdiff+0x84>
   26d60:	1085883a 	add	r2,r2,r2
   26d64:	1085883a 	add	r2,r2,r2
   26d68:	2a000504 	addi	r8,r5,20
   26d6c:	34000504 	addi	r16,r6,20
   26d70:	4087883a 	add	r3,r8,r2
   26d74:	8085883a 	add	r2,r16,r2
   26d78:	00000106 	br	26d80 <__mdiff+0x54>
   26d7c:	40c0592e 	bgeu	r8,r3,26ee4 <__mdiff+0x1b8>
   26d80:	18ffff04 	addi	r3,r3,-4
   26d84:	10bfff04 	addi	r2,r2,-4
   26d88:	19c00017 	ldw	r7,0(r3)
   26d8c:	11400017 	ldw	r5,0(r2)
   26d90:	397ffa26 	beq	r7,r5,26d7c <__alt_data_end+0xfffe6d7c>
   26d94:	3940592e 	bgeu	r7,r5,26efc <__mdiff+0x1d0>
   26d98:	9005883a 	mov	r2,r18
   26d9c:	4023883a 	mov	r17,r8
   26da0:	9825883a 	mov	r18,r19
   26da4:	05000044 	movi	r20,1
   26da8:	1027883a 	mov	r19,r2
   26dac:	00000406 	br	26dc0 <__mdiff+0x94>
   26db0:	18005616 	blt	r3,zero,26f0c <__mdiff+0x1e0>
   26db4:	34400504 	addi	r17,r6,20
   26db8:	2c000504 	addi	r16,r5,20
   26dbc:	0029883a 	mov	r20,zero
   26dc0:	91400117 	ldw	r5,4(r18)
   26dc4:	00264040 	call	26404 <_Balloc>
   26dc8:	92400417 	ldw	r9,16(r18)
   26dcc:	9b000417 	ldw	r12,16(r19)
   26dd0:	12c00504 	addi	r11,r2,20
   26dd4:	4a51883a 	add	r8,r9,r9
   26dd8:	6319883a 	add	r12,r12,r12
   26ddc:	4211883a 	add	r8,r8,r8
   26de0:	6319883a 	add	r12,r12,r12
   26de4:	15000315 	stw	r20,12(r2)
   26de8:	8211883a 	add	r8,r16,r8
   26dec:	8b19883a 	add	r12,r17,r12
   26df0:	0007883a 	mov	r3,zero
   26df4:	81400017 	ldw	r5,0(r16)
   26df8:	89c00017 	ldw	r7,0(r17)
   26dfc:	59800104 	addi	r6,r11,4
   26e00:	293fffcc 	andi	r4,r5,65535
   26e04:	20c7883a 	add	r3,r4,r3
   26e08:	393fffcc 	andi	r4,r7,65535
   26e0c:	1909c83a 	sub	r4,r3,r4
   26e10:	280ad43a 	srli	r5,r5,16
   26e14:	380ed43a 	srli	r7,r7,16
   26e18:	2007d43a 	srai	r3,r4,16
   26e1c:	213fffcc 	andi	r4,r4,65535
   26e20:	29cbc83a 	sub	r5,r5,r7
   26e24:	28c7883a 	add	r3,r5,r3
   26e28:	180a943a 	slli	r5,r3,16
   26e2c:	8c400104 	addi	r17,r17,4
   26e30:	84000104 	addi	r16,r16,4
   26e34:	2908b03a 	or	r4,r5,r4
   26e38:	59000015 	stw	r4,0(r11)
   26e3c:	1807d43a 	srai	r3,r3,16
   26e40:	3015883a 	mov	r10,r6
   26e44:	3017883a 	mov	r11,r6
   26e48:	8b3fea36 	bltu	r17,r12,26df4 <__alt_data_end+0xfffe6df4>
   26e4c:	8200162e 	bgeu	r16,r8,26ea8 <__mdiff+0x17c>
   26e50:	8017883a 	mov	r11,r16
   26e54:	59400017 	ldw	r5,0(r11)
   26e58:	31800104 	addi	r6,r6,4
   26e5c:	5ac00104 	addi	r11,r11,4
   26e60:	293fffcc 	andi	r4,r5,65535
   26e64:	20c7883a 	add	r3,r4,r3
   26e68:	280ed43a 	srli	r7,r5,16
   26e6c:	180bd43a 	srai	r5,r3,16
   26e70:	193fffcc 	andi	r4,r3,65535
   26e74:	3947883a 	add	r3,r7,r5
   26e78:	180a943a 	slli	r5,r3,16
   26e7c:	1807d43a 	srai	r3,r3,16
   26e80:	2908b03a 	or	r4,r5,r4
   26e84:	313fff15 	stw	r4,-4(r6)
   26e88:	5a3ff236 	bltu	r11,r8,26e54 <__alt_data_end+0xfffe6e54>
   26e8c:	0406303a 	nor	r3,zero,r16
   26e90:	1a07883a 	add	r3,r3,r8
   26e94:	1806d0ba 	srli	r3,r3,2
   26e98:	18c00044 	addi	r3,r3,1
   26e9c:	18c7883a 	add	r3,r3,r3
   26ea0:	18c7883a 	add	r3,r3,r3
   26ea4:	50d5883a 	add	r10,r10,r3
   26ea8:	50ffff04 	addi	r3,r10,-4
   26eac:	2000041e 	bne	r4,zero,26ec0 <__mdiff+0x194>
   26eb0:	18ffff04 	addi	r3,r3,-4
   26eb4:	19000017 	ldw	r4,0(r3)
   26eb8:	4a7fffc4 	addi	r9,r9,-1
   26ebc:	203ffc26 	beq	r4,zero,26eb0 <__alt_data_end+0xfffe6eb0>
   26ec0:	12400415 	stw	r9,16(r2)
   26ec4:	dfc00517 	ldw	ra,20(sp)
   26ec8:	dd000417 	ldw	r20,16(sp)
   26ecc:	dcc00317 	ldw	r19,12(sp)
   26ed0:	dc800217 	ldw	r18,8(sp)
   26ed4:	dc400117 	ldw	r17,4(sp)
   26ed8:	dc000017 	ldw	r16,0(sp)
   26edc:	dec00604 	addi	sp,sp,24
   26ee0:	f800283a 	ret
   26ee4:	000b883a 	mov	r5,zero
   26ee8:	00264040 	call	26404 <_Balloc>
   26eec:	00c00044 	movi	r3,1
   26ef0:	10c00415 	stw	r3,16(r2)
   26ef4:	10000515 	stw	zero,20(r2)
   26ef8:	003ff206 	br	26ec4 <__alt_data_end+0xfffe6ec4>
   26efc:	8023883a 	mov	r17,r16
   26f00:	0029883a 	mov	r20,zero
   26f04:	4021883a 	mov	r16,r8
   26f08:	003fad06 	br	26dc0 <__alt_data_end+0xfffe6dc0>
   26f0c:	9005883a 	mov	r2,r18
   26f10:	94400504 	addi	r17,r18,20
   26f14:	9c000504 	addi	r16,r19,20
   26f18:	9825883a 	mov	r18,r19
   26f1c:	05000044 	movi	r20,1
   26f20:	1027883a 	mov	r19,r2
   26f24:	003fa606 	br	26dc0 <__alt_data_end+0xfffe6dc0>

00026f28 <__ulp>:
   26f28:	295ffc2c 	andhi	r5,r5,32752
   26f2c:	00bf3034 	movhi	r2,64704
   26f30:	2887883a 	add	r3,r5,r2
   26f34:	00c0020e 	bge	zero,r3,26f40 <__ulp+0x18>
   26f38:	0005883a 	mov	r2,zero
   26f3c:	f800283a 	ret
   26f40:	00c7c83a 	sub	r3,zero,r3
   26f44:	1807d53a 	srai	r3,r3,20
   26f48:	008004c4 	movi	r2,19
   26f4c:	10c00b0e 	bge	r2,r3,26f7c <__ulp+0x54>
   26f50:	18bffb04 	addi	r2,r3,-20
   26f54:	01000784 	movi	r4,30
   26f58:	0007883a 	mov	r3,zero
   26f5c:	20800516 	blt	r4,r2,26f74 <__ulp+0x4c>
   26f60:	010007c4 	movi	r4,31
   26f64:	2089c83a 	sub	r4,r4,r2
   26f68:	00800044 	movi	r2,1
   26f6c:	1104983a 	sll	r2,r2,r4
   26f70:	f800283a 	ret
   26f74:	00800044 	movi	r2,1
   26f78:	f800283a 	ret
   26f7c:	01400234 	movhi	r5,8
   26f80:	28c7d83a 	sra	r3,r5,r3
   26f84:	0005883a 	mov	r2,zero
   26f88:	f800283a 	ret

00026f8c <__b2d>:
   26f8c:	defffa04 	addi	sp,sp,-24
   26f90:	dc000015 	stw	r16,0(sp)
   26f94:	24000417 	ldw	r16,16(r4)
   26f98:	dc400115 	stw	r17,4(sp)
   26f9c:	24400504 	addi	r17,r4,20
   26fa0:	8421883a 	add	r16,r16,r16
   26fa4:	8421883a 	add	r16,r16,r16
   26fa8:	8c21883a 	add	r16,r17,r16
   26fac:	dc800215 	stw	r18,8(sp)
   26fb0:	84bfff17 	ldw	r18,-4(r16)
   26fb4:	dd000415 	stw	r20,16(sp)
   26fb8:	dcc00315 	stw	r19,12(sp)
   26fbc:	9009883a 	mov	r4,r18
   26fc0:	2829883a 	mov	r20,r5
   26fc4:	dfc00515 	stw	ra,20(sp)
   26fc8:	00266f80 	call	266f8 <__hi0bits>
   26fcc:	00c00804 	movi	r3,32
   26fd0:	1889c83a 	sub	r4,r3,r2
   26fd4:	a1000015 	stw	r4,0(r20)
   26fd8:	01000284 	movi	r4,10
   26fdc:	84ffff04 	addi	r19,r16,-4
   26fe0:	20801216 	blt	r4,r2,2702c <__b2d+0xa0>
   26fe4:	018002c4 	movi	r6,11
   26fe8:	308dc83a 	sub	r6,r6,r2
   26fec:	9186d83a 	srl	r3,r18,r6
   26ff0:	18cffc34 	orhi	r3,r3,16368
   26ff4:	8cc0212e 	bgeu	r17,r19,2707c <__b2d+0xf0>
   26ff8:	813ffe17 	ldw	r4,-8(r16)
   26ffc:	218cd83a 	srl	r6,r4,r6
   27000:	10800544 	addi	r2,r2,21
   27004:	9084983a 	sll	r2,r18,r2
   27008:	1184b03a 	or	r2,r2,r6
   2700c:	dfc00517 	ldw	ra,20(sp)
   27010:	dd000417 	ldw	r20,16(sp)
   27014:	dcc00317 	ldw	r19,12(sp)
   27018:	dc800217 	ldw	r18,8(sp)
   2701c:	dc400117 	ldw	r17,4(sp)
   27020:	dc000017 	ldw	r16,0(sp)
   27024:	dec00604 	addi	sp,sp,24
   27028:	f800283a 	ret
   2702c:	8cc00f2e 	bgeu	r17,r19,2706c <__b2d+0xe0>
   27030:	117ffd44 	addi	r5,r2,-11
   27034:	80bffe17 	ldw	r2,-8(r16)
   27038:	28000e26 	beq	r5,zero,27074 <__b2d+0xe8>
   2703c:	1949c83a 	sub	r4,r3,r5
   27040:	9164983a 	sll	r18,r18,r5
   27044:	1106d83a 	srl	r3,r2,r4
   27048:	81bffe04 	addi	r6,r16,-8
   2704c:	948ffc34 	orhi	r18,r18,16368
   27050:	90c6b03a 	or	r3,r18,r3
   27054:	89800e2e 	bgeu	r17,r6,27090 <__b2d+0x104>
   27058:	81bffd17 	ldw	r6,-12(r16)
   2705c:	1144983a 	sll	r2,r2,r5
   27060:	310ad83a 	srl	r5,r6,r4
   27064:	2884b03a 	or	r2,r5,r2
   27068:	003fe806 	br	2700c <__alt_data_end+0xfffe700c>
   2706c:	10bffd44 	addi	r2,r2,-11
   27070:	1000041e 	bne	r2,zero,27084 <__b2d+0xf8>
   27074:	90cffc34 	orhi	r3,r18,16368
   27078:	003fe406 	br	2700c <__alt_data_end+0xfffe700c>
   2707c:	000d883a 	mov	r6,zero
   27080:	003fdf06 	br	27000 <__alt_data_end+0xfffe7000>
   27084:	90a4983a 	sll	r18,r18,r2
   27088:	0005883a 	mov	r2,zero
   2708c:	003ff906 	br	27074 <__alt_data_end+0xfffe7074>
   27090:	1144983a 	sll	r2,r2,r5
   27094:	003fdd06 	br	2700c <__alt_data_end+0xfffe700c>

00027098 <__d2b>:
   27098:	defff804 	addi	sp,sp,-32
   2709c:	dc000215 	stw	r16,8(sp)
   270a0:	3021883a 	mov	r16,r6
   270a4:	dc400315 	stw	r17,12(sp)
   270a8:	8022907a 	slli	r17,r16,1
   270ac:	dd000615 	stw	r20,24(sp)
   270b0:	2829883a 	mov	r20,r5
   270b4:	01400044 	movi	r5,1
   270b8:	dcc00515 	stw	r19,20(sp)
   270bc:	dc800415 	stw	r18,16(sp)
   270c0:	dfc00715 	stw	ra,28(sp)
   270c4:	3825883a 	mov	r18,r7
   270c8:	8822d57a 	srli	r17,r17,21
   270cc:	00264040 	call	26404 <_Balloc>
   270d0:	1027883a 	mov	r19,r2
   270d4:	00800434 	movhi	r2,16
   270d8:	10bfffc4 	addi	r2,r2,-1
   270dc:	808c703a 	and	r6,r16,r2
   270e0:	88000126 	beq	r17,zero,270e8 <__d2b+0x50>
   270e4:	31800434 	orhi	r6,r6,16
   270e8:	d9800015 	stw	r6,0(sp)
   270ec:	a0002426 	beq	r20,zero,27180 <__d2b+0xe8>
   270f0:	d9000104 	addi	r4,sp,4
   270f4:	dd000115 	stw	r20,4(sp)
   270f8:	00267600 	call	26760 <__lo0bits>
   270fc:	d8c00017 	ldw	r3,0(sp)
   27100:	10002f1e 	bne	r2,zero,271c0 <__d2b+0x128>
   27104:	d9000117 	ldw	r4,4(sp)
   27108:	99000515 	stw	r4,20(r19)
   2710c:	1821003a 	cmpeq	r16,r3,zero
   27110:	01000084 	movi	r4,2
   27114:	2421c83a 	sub	r16,r4,r16
   27118:	98c00615 	stw	r3,24(r19)
   2711c:	9c000415 	stw	r16,16(r19)
   27120:	88001f1e 	bne	r17,zero,271a0 <__d2b+0x108>
   27124:	10bef384 	addi	r2,r2,-1074
   27128:	90800015 	stw	r2,0(r18)
   2712c:	00900034 	movhi	r2,16384
   27130:	10bfffc4 	addi	r2,r2,-1
   27134:	8085883a 	add	r2,r16,r2
   27138:	1085883a 	add	r2,r2,r2
   2713c:	1085883a 	add	r2,r2,r2
   27140:	9885883a 	add	r2,r19,r2
   27144:	11000517 	ldw	r4,20(r2)
   27148:	8020917a 	slli	r16,r16,5
   2714c:	00266f80 	call	266f8 <__hi0bits>
   27150:	d8c00817 	ldw	r3,32(sp)
   27154:	8085c83a 	sub	r2,r16,r2
   27158:	18800015 	stw	r2,0(r3)
   2715c:	9805883a 	mov	r2,r19
   27160:	dfc00717 	ldw	ra,28(sp)
   27164:	dd000617 	ldw	r20,24(sp)
   27168:	dcc00517 	ldw	r19,20(sp)
   2716c:	dc800417 	ldw	r18,16(sp)
   27170:	dc400317 	ldw	r17,12(sp)
   27174:	dc000217 	ldw	r16,8(sp)
   27178:	dec00804 	addi	sp,sp,32
   2717c:	f800283a 	ret
   27180:	d809883a 	mov	r4,sp
   27184:	00267600 	call	26760 <__lo0bits>
   27188:	d8c00017 	ldw	r3,0(sp)
   2718c:	04000044 	movi	r16,1
   27190:	9c000415 	stw	r16,16(r19)
   27194:	98c00515 	stw	r3,20(r19)
   27198:	10800804 	addi	r2,r2,32
   2719c:	883fe126 	beq	r17,zero,27124 <__alt_data_end+0xfffe7124>
   271a0:	00c00d44 	movi	r3,53
   271a4:	8c7ef344 	addi	r17,r17,-1075
   271a8:	88a3883a 	add	r17,r17,r2
   271ac:	1885c83a 	sub	r2,r3,r2
   271b0:	d8c00817 	ldw	r3,32(sp)
   271b4:	94400015 	stw	r17,0(r18)
   271b8:	18800015 	stw	r2,0(r3)
   271bc:	003fe706 	br	2715c <__alt_data_end+0xfffe715c>
   271c0:	01000804 	movi	r4,32
   271c4:	2089c83a 	sub	r4,r4,r2
   271c8:	1908983a 	sll	r4,r3,r4
   271cc:	d9400117 	ldw	r5,4(sp)
   271d0:	1886d83a 	srl	r3,r3,r2
   271d4:	2148b03a 	or	r4,r4,r5
   271d8:	99000515 	stw	r4,20(r19)
   271dc:	d8c00015 	stw	r3,0(sp)
   271e0:	003fca06 	br	2710c <__alt_data_end+0xfffe710c>

000271e4 <__ratio>:
   271e4:	defff904 	addi	sp,sp,-28
   271e8:	dc400315 	stw	r17,12(sp)
   271ec:	2823883a 	mov	r17,r5
   271f0:	d9400104 	addi	r5,sp,4
   271f4:	dfc00615 	stw	ra,24(sp)
   271f8:	dcc00515 	stw	r19,20(sp)
   271fc:	dc800415 	stw	r18,16(sp)
   27200:	2027883a 	mov	r19,r4
   27204:	dc000215 	stw	r16,8(sp)
   27208:	0026f8c0 	call	26f8c <__b2d>
   2720c:	d80b883a 	mov	r5,sp
   27210:	8809883a 	mov	r4,r17
   27214:	1025883a 	mov	r18,r2
   27218:	1821883a 	mov	r16,r3
   2721c:	0026f8c0 	call	26f8c <__b2d>
   27220:	8a000417 	ldw	r8,16(r17)
   27224:	99000417 	ldw	r4,16(r19)
   27228:	d9400117 	ldw	r5,4(sp)
   2722c:	2209c83a 	sub	r4,r4,r8
   27230:	2010917a 	slli	r8,r4,5
   27234:	d9000017 	ldw	r4,0(sp)
   27238:	2909c83a 	sub	r4,r5,r4
   2723c:	4109883a 	add	r4,r8,r4
   27240:	01000e0e 	bge	zero,r4,2727c <__ratio+0x98>
   27244:	2008953a 	slli	r4,r4,20
   27248:	2421883a 	add	r16,r4,r16
   2724c:	100d883a 	mov	r6,r2
   27250:	180f883a 	mov	r7,r3
   27254:	9009883a 	mov	r4,r18
   27258:	800b883a 	mov	r5,r16
   2725c:	002b5cc0 	call	2b5cc <__divdf3>
   27260:	dfc00617 	ldw	ra,24(sp)
   27264:	dcc00517 	ldw	r19,20(sp)
   27268:	dc800417 	ldw	r18,16(sp)
   2726c:	dc400317 	ldw	r17,12(sp)
   27270:	dc000217 	ldw	r16,8(sp)
   27274:	dec00704 	addi	sp,sp,28
   27278:	f800283a 	ret
   2727c:	2008953a 	slli	r4,r4,20
   27280:	1907c83a 	sub	r3,r3,r4
   27284:	003ff106 	br	2724c <__alt_data_end+0xfffe724c>

00027288 <_mprec_log10>:
   27288:	defffe04 	addi	sp,sp,-8
   2728c:	dc000015 	stw	r16,0(sp)
   27290:	dfc00115 	stw	ra,4(sp)
   27294:	008005c4 	movi	r2,23
   27298:	2021883a 	mov	r16,r4
   2729c:	11000d0e 	bge	r2,r4,272d4 <_mprec_log10+0x4c>
   272a0:	0005883a 	mov	r2,zero
   272a4:	00cffc34 	movhi	r3,16368
   272a8:	843fffc4 	addi	r16,r16,-1
   272ac:	000d883a 	mov	r6,zero
   272b0:	01d00934 	movhi	r7,16420
   272b4:	1009883a 	mov	r4,r2
   272b8:	180b883a 	mov	r5,r3
   272bc:	002c10c0 	call	2c10c <__muldf3>
   272c0:	803ff91e 	bne	r16,zero,272a8 <__alt_data_end+0xfffe72a8>
   272c4:	dfc00117 	ldw	ra,4(sp)
   272c8:	dc000017 	ldw	r16,0(sp)
   272cc:	dec00204 	addi	sp,sp,8
   272d0:	f800283a 	ret
   272d4:	202090fa 	slli	r16,r4,3
   272d8:	008000f4 	movhi	r2,3
   272dc:	10808e04 	addi	r2,r2,568
   272e0:	1421883a 	add	r16,r2,r16
   272e4:	80800017 	ldw	r2,0(r16)
   272e8:	80c00117 	ldw	r3,4(r16)
   272ec:	dfc00117 	ldw	ra,4(sp)
   272f0:	dc000017 	ldw	r16,0(sp)
   272f4:	dec00204 	addi	sp,sp,8
   272f8:	f800283a 	ret

000272fc <__copybits>:
   272fc:	297fffc4 	addi	r5,r5,-1
   27300:	280fd17a 	srai	r7,r5,5
   27304:	30c00417 	ldw	r3,16(r6)
   27308:	30800504 	addi	r2,r6,20
   2730c:	39c00044 	addi	r7,r7,1
   27310:	18c7883a 	add	r3,r3,r3
   27314:	39cf883a 	add	r7,r7,r7
   27318:	18c7883a 	add	r3,r3,r3
   2731c:	39cf883a 	add	r7,r7,r7
   27320:	10c7883a 	add	r3,r2,r3
   27324:	21cf883a 	add	r7,r4,r7
   27328:	10c00d2e 	bgeu	r2,r3,27360 <__copybits+0x64>
   2732c:	200b883a 	mov	r5,r4
   27330:	12000017 	ldw	r8,0(r2)
   27334:	29400104 	addi	r5,r5,4
   27338:	10800104 	addi	r2,r2,4
   2733c:	2a3fff15 	stw	r8,-4(r5)
   27340:	10fffb36 	bltu	r2,r3,27330 <__alt_data_end+0xfffe7330>
   27344:	1985c83a 	sub	r2,r3,r6
   27348:	10bffac4 	addi	r2,r2,-21
   2734c:	1004d0ba 	srli	r2,r2,2
   27350:	10800044 	addi	r2,r2,1
   27354:	1085883a 	add	r2,r2,r2
   27358:	1085883a 	add	r2,r2,r2
   2735c:	2089883a 	add	r4,r4,r2
   27360:	21c0032e 	bgeu	r4,r7,27370 <__copybits+0x74>
   27364:	20000015 	stw	zero,0(r4)
   27368:	21000104 	addi	r4,r4,4
   2736c:	21fffd36 	bltu	r4,r7,27364 <__alt_data_end+0xfffe7364>
   27370:	f800283a 	ret

00027374 <__any_on>:
   27374:	20c00417 	ldw	r3,16(r4)
   27378:	2805d17a 	srai	r2,r5,5
   2737c:	21000504 	addi	r4,r4,20
   27380:	18800d0e 	bge	r3,r2,273b8 <__any_on+0x44>
   27384:	18c7883a 	add	r3,r3,r3
   27388:	18c7883a 	add	r3,r3,r3
   2738c:	20c7883a 	add	r3,r4,r3
   27390:	20c0192e 	bgeu	r4,r3,273f8 <__any_on+0x84>
   27394:	18bfff17 	ldw	r2,-4(r3)
   27398:	18ffff04 	addi	r3,r3,-4
   2739c:	1000041e 	bne	r2,zero,273b0 <__any_on+0x3c>
   273a0:	20c0142e 	bgeu	r4,r3,273f4 <__any_on+0x80>
   273a4:	18ffff04 	addi	r3,r3,-4
   273a8:	19400017 	ldw	r5,0(r3)
   273ac:	283ffc26 	beq	r5,zero,273a0 <__alt_data_end+0xfffe73a0>
   273b0:	00800044 	movi	r2,1
   273b4:	f800283a 	ret
   273b8:	10c00a0e 	bge	r2,r3,273e4 <__any_on+0x70>
   273bc:	1085883a 	add	r2,r2,r2
   273c0:	1085883a 	add	r2,r2,r2
   273c4:	294007cc 	andi	r5,r5,31
   273c8:	2087883a 	add	r3,r4,r2
   273cc:	283ff026 	beq	r5,zero,27390 <__alt_data_end+0xfffe7390>
   273d0:	19800017 	ldw	r6,0(r3)
   273d4:	3144d83a 	srl	r2,r6,r5
   273d8:	114a983a 	sll	r5,r2,r5
   273dc:	317ff41e 	bne	r6,r5,273b0 <__alt_data_end+0xfffe73b0>
   273e0:	003feb06 	br	27390 <__alt_data_end+0xfffe7390>
   273e4:	1085883a 	add	r2,r2,r2
   273e8:	1085883a 	add	r2,r2,r2
   273ec:	2087883a 	add	r3,r4,r2
   273f0:	003fe706 	br	27390 <__alt_data_end+0xfffe7390>
   273f4:	f800283a 	ret
   273f8:	0005883a 	mov	r2,zero
   273fc:	f800283a 	ret

00027400 <__fpclassifyd>:
   27400:	00a00034 	movhi	r2,32768
   27404:	10bfffc4 	addi	r2,r2,-1
   27408:	2884703a 	and	r2,r5,r2
   2740c:	10000726 	beq	r2,zero,2742c <__fpclassifyd+0x2c>
   27410:	00fffc34 	movhi	r3,65520
   27414:	019ff834 	movhi	r6,32736
   27418:	28c7883a 	add	r3,r5,r3
   2741c:	31bfffc4 	addi	r6,r6,-1
   27420:	30c00536 	bltu	r6,r3,27438 <__fpclassifyd+0x38>
   27424:	00800104 	movi	r2,4
   27428:	f800283a 	ret
   2742c:	2000021e 	bne	r4,zero,27438 <__fpclassifyd+0x38>
   27430:	00800084 	movi	r2,2
   27434:	f800283a 	ret
   27438:	00dffc34 	movhi	r3,32752
   2743c:	019ff834 	movhi	r6,32736
   27440:	28cb883a 	add	r5,r5,r3
   27444:	31bfffc4 	addi	r6,r6,-1
   27448:	317ff62e 	bgeu	r6,r5,27424 <__alt_data_end+0xfffe7424>
   2744c:	01400434 	movhi	r5,16
   27450:	297fffc4 	addi	r5,r5,-1
   27454:	28800236 	bltu	r5,r2,27460 <__fpclassifyd+0x60>
   27458:	008000c4 	movi	r2,3
   2745c:	f800283a 	ret
   27460:	10c00226 	beq	r2,r3,2746c <__fpclassifyd+0x6c>
   27464:	0005883a 	mov	r2,zero
   27468:	f800283a 	ret
   2746c:	2005003a 	cmpeq	r2,r4,zero
   27470:	f800283a 	ret

00027474 <_sbrk_r>:
   27474:	defffd04 	addi	sp,sp,-12
   27478:	dc000015 	stw	r16,0(sp)
   2747c:	040000f4 	movhi	r16,3
   27480:	dc400115 	stw	r17,4(sp)
   27484:	840e9404 	addi	r16,r16,14928
   27488:	2023883a 	mov	r17,r4
   2748c:	2809883a 	mov	r4,r5
   27490:	dfc00215 	stw	ra,8(sp)
   27494:	80000015 	stw	zero,0(r16)
   27498:	002dff00 	call	2dff0 <sbrk>
   2749c:	00ffffc4 	movi	r3,-1
   274a0:	10c00526 	beq	r2,r3,274b8 <_sbrk_r+0x44>
   274a4:	dfc00217 	ldw	ra,8(sp)
   274a8:	dc400117 	ldw	r17,4(sp)
   274ac:	dc000017 	ldw	r16,0(sp)
   274b0:	dec00304 	addi	sp,sp,12
   274b4:	f800283a 	ret
   274b8:	80c00017 	ldw	r3,0(r16)
   274bc:	183ff926 	beq	r3,zero,274a4 <__alt_data_end+0xfffe74a4>
   274c0:	88c00015 	stw	r3,0(r17)
   274c4:	003ff706 	br	274a4 <__alt_data_end+0xfffe74a4>

000274c8 <__sread>:
   274c8:	defffe04 	addi	sp,sp,-8
   274cc:	dc000015 	stw	r16,0(sp)
   274d0:	2821883a 	mov	r16,r5
   274d4:	2940038f 	ldh	r5,14(r5)
   274d8:	dfc00115 	stw	ra,4(sp)
   274dc:	002996c0 	call	2996c <_read_r>
   274e0:	10000716 	blt	r2,zero,27500 <__sread+0x38>
   274e4:	80c01417 	ldw	r3,80(r16)
   274e8:	1887883a 	add	r3,r3,r2
   274ec:	80c01415 	stw	r3,80(r16)
   274f0:	dfc00117 	ldw	ra,4(sp)
   274f4:	dc000017 	ldw	r16,0(sp)
   274f8:	dec00204 	addi	sp,sp,8
   274fc:	f800283a 	ret
   27500:	80c0030b 	ldhu	r3,12(r16)
   27504:	18fbffcc 	andi	r3,r3,61439
   27508:	80c0030d 	sth	r3,12(r16)
   2750c:	dfc00117 	ldw	ra,4(sp)
   27510:	dc000017 	ldw	r16,0(sp)
   27514:	dec00204 	addi	sp,sp,8
   27518:	f800283a 	ret

0002751c <__seofread>:
   2751c:	0005883a 	mov	r2,zero
   27520:	f800283a 	ret

00027524 <__swrite>:
   27524:	2880030b 	ldhu	r2,12(r5)
   27528:	defffb04 	addi	sp,sp,-20
   2752c:	dcc00315 	stw	r19,12(sp)
   27530:	dc800215 	stw	r18,8(sp)
   27534:	dc400115 	stw	r17,4(sp)
   27538:	dc000015 	stw	r16,0(sp)
   2753c:	dfc00415 	stw	ra,16(sp)
   27540:	10c0400c 	andi	r3,r2,256
   27544:	2821883a 	mov	r16,r5
   27548:	2023883a 	mov	r17,r4
   2754c:	3025883a 	mov	r18,r6
   27550:	3827883a 	mov	r19,r7
   27554:	18000526 	beq	r3,zero,2756c <__swrite+0x48>
   27558:	2940038f 	ldh	r5,14(r5)
   2755c:	01c00084 	movi	r7,2
   27560:	000d883a 	mov	r6,zero
   27564:	00297b00 	call	297b0 <_lseek_r>
   27568:	8080030b 	ldhu	r2,12(r16)
   2756c:	8140038f 	ldh	r5,14(r16)
   27570:	10bbffcc 	andi	r2,r2,61439
   27574:	980f883a 	mov	r7,r19
   27578:	900d883a 	mov	r6,r18
   2757c:	8809883a 	mov	r4,r17
   27580:	8080030d 	sth	r2,12(r16)
   27584:	dfc00417 	ldw	ra,16(sp)
   27588:	dcc00317 	ldw	r19,12(sp)
   2758c:	dc800217 	ldw	r18,8(sp)
   27590:	dc400117 	ldw	r17,4(sp)
   27594:	dc000017 	ldw	r16,0(sp)
   27598:	dec00504 	addi	sp,sp,20
   2759c:	0028dc01 	jmpi	28dc0 <_write_r>

000275a0 <__sseek>:
   275a0:	defffe04 	addi	sp,sp,-8
   275a4:	dc000015 	stw	r16,0(sp)
   275a8:	2821883a 	mov	r16,r5
   275ac:	2940038f 	ldh	r5,14(r5)
   275b0:	dfc00115 	stw	ra,4(sp)
   275b4:	00297b00 	call	297b0 <_lseek_r>
   275b8:	00ffffc4 	movi	r3,-1
   275bc:	10c00826 	beq	r2,r3,275e0 <__sseek+0x40>
   275c0:	80c0030b 	ldhu	r3,12(r16)
   275c4:	80801415 	stw	r2,80(r16)
   275c8:	18c40014 	ori	r3,r3,4096
   275cc:	80c0030d 	sth	r3,12(r16)
   275d0:	dfc00117 	ldw	ra,4(sp)
   275d4:	dc000017 	ldw	r16,0(sp)
   275d8:	dec00204 	addi	sp,sp,8
   275dc:	f800283a 	ret
   275e0:	80c0030b 	ldhu	r3,12(r16)
   275e4:	18fbffcc 	andi	r3,r3,61439
   275e8:	80c0030d 	sth	r3,12(r16)
   275ec:	dfc00117 	ldw	ra,4(sp)
   275f0:	dc000017 	ldw	r16,0(sp)
   275f4:	dec00204 	addi	sp,sp,8
   275f8:	f800283a 	ret

000275fc <__sclose>:
   275fc:	2940038f 	ldh	r5,14(r5)
   27600:	0028e201 	jmpi	28e20 <_close_r>

00027604 <strcmp>:
   27604:	2144b03a 	or	r2,r4,r5
   27608:	108000cc 	andi	r2,r2,3
   2760c:	1000171e 	bne	r2,zero,2766c <strcmp+0x68>
   27610:	20800017 	ldw	r2,0(r4)
   27614:	28c00017 	ldw	r3,0(r5)
   27618:	10c0141e 	bne	r2,r3,2766c <strcmp+0x68>
   2761c:	027fbff4 	movhi	r9,65279
   27620:	4a7fbfc4 	addi	r9,r9,-257
   27624:	0086303a 	nor	r3,zero,r2
   27628:	02202074 	movhi	r8,32897
   2762c:	1245883a 	add	r2,r2,r9
   27630:	42202004 	addi	r8,r8,-32640
   27634:	10c4703a 	and	r2,r2,r3
   27638:	1204703a 	and	r2,r2,r8
   2763c:	10000226 	beq	r2,zero,27648 <strcmp+0x44>
   27640:	00002306 	br	276d0 <strcmp+0xcc>
   27644:	1000221e 	bne	r2,zero,276d0 <strcmp+0xcc>
   27648:	21000104 	addi	r4,r4,4
   2764c:	20c00017 	ldw	r3,0(r4)
   27650:	29400104 	addi	r5,r5,4
   27654:	29800017 	ldw	r6,0(r5)
   27658:	1a4f883a 	add	r7,r3,r9
   2765c:	00c4303a 	nor	r2,zero,r3
   27660:	3884703a 	and	r2,r7,r2
   27664:	1204703a 	and	r2,r2,r8
   27668:	19bff626 	beq	r3,r6,27644 <__alt_data_end+0xfffe7644>
   2766c:	20800003 	ldbu	r2,0(r4)
   27670:	10c03fcc 	andi	r3,r2,255
   27674:	18c0201c 	xori	r3,r3,128
   27678:	18ffe004 	addi	r3,r3,-128
   2767c:	18000c26 	beq	r3,zero,276b0 <strcmp+0xac>
   27680:	29800007 	ldb	r6,0(r5)
   27684:	19800326 	beq	r3,r6,27694 <strcmp+0x90>
   27688:	00001306 	br	276d8 <strcmp+0xd4>
   2768c:	29800007 	ldb	r6,0(r5)
   27690:	11800b1e 	bne	r2,r6,276c0 <strcmp+0xbc>
   27694:	21000044 	addi	r4,r4,1
   27698:	20c00003 	ldbu	r3,0(r4)
   2769c:	29400044 	addi	r5,r5,1
   276a0:	18803fcc 	andi	r2,r3,255
   276a4:	1080201c 	xori	r2,r2,128
   276a8:	10bfe004 	addi	r2,r2,-128
   276ac:	103ff71e 	bne	r2,zero,2768c <__alt_data_end+0xfffe768c>
   276b0:	0007883a 	mov	r3,zero
   276b4:	28800003 	ldbu	r2,0(r5)
   276b8:	1885c83a 	sub	r2,r3,r2
   276bc:	f800283a 	ret
   276c0:	28800003 	ldbu	r2,0(r5)
   276c4:	18c03fcc 	andi	r3,r3,255
   276c8:	1885c83a 	sub	r2,r3,r2
   276cc:	f800283a 	ret
   276d0:	0005883a 	mov	r2,zero
   276d4:	f800283a 	ret
   276d8:	10c03fcc 	andi	r3,r2,255
   276dc:	003ff506 	br	276b4 <__alt_data_end+0xfffe76b4>

000276e0 <strlen>:
   276e0:	208000cc 	andi	r2,r4,3
   276e4:	10002026 	beq	r2,zero,27768 <strlen+0x88>
   276e8:	20800007 	ldb	r2,0(r4)
   276ec:	10002026 	beq	r2,zero,27770 <strlen+0x90>
   276f0:	2005883a 	mov	r2,r4
   276f4:	00000206 	br	27700 <strlen+0x20>
   276f8:	10c00007 	ldb	r3,0(r2)
   276fc:	18001826 	beq	r3,zero,27760 <strlen+0x80>
   27700:	10800044 	addi	r2,r2,1
   27704:	10c000cc 	andi	r3,r2,3
   27708:	183ffb1e 	bne	r3,zero,276f8 <__alt_data_end+0xfffe76f8>
   2770c:	10c00017 	ldw	r3,0(r2)
   27710:	01ffbff4 	movhi	r7,65279
   27714:	39ffbfc4 	addi	r7,r7,-257
   27718:	00ca303a 	nor	r5,zero,r3
   2771c:	01a02074 	movhi	r6,32897
   27720:	19c7883a 	add	r3,r3,r7
   27724:	31a02004 	addi	r6,r6,-32640
   27728:	1946703a 	and	r3,r3,r5
   2772c:	1986703a 	and	r3,r3,r6
   27730:	1800091e 	bne	r3,zero,27758 <strlen+0x78>
   27734:	10800104 	addi	r2,r2,4
   27738:	10c00017 	ldw	r3,0(r2)
   2773c:	19cb883a 	add	r5,r3,r7
   27740:	00c6303a 	nor	r3,zero,r3
   27744:	28c6703a 	and	r3,r5,r3
   27748:	1986703a 	and	r3,r3,r6
   2774c:	183ff926 	beq	r3,zero,27734 <__alt_data_end+0xfffe7734>
   27750:	00000106 	br	27758 <strlen+0x78>
   27754:	10800044 	addi	r2,r2,1
   27758:	10c00007 	ldb	r3,0(r2)
   2775c:	183ffd1e 	bne	r3,zero,27754 <__alt_data_end+0xfffe7754>
   27760:	1105c83a 	sub	r2,r2,r4
   27764:	f800283a 	ret
   27768:	2005883a 	mov	r2,r4
   2776c:	003fe706 	br	2770c <__alt_data_end+0xfffe770c>
   27770:	0005883a 	mov	r2,zero
   27774:	f800283a 	ret

00027778 <__sprint_r.part.0>:
   27778:	28801917 	ldw	r2,100(r5)
   2777c:	defff604 	addi	sp,sp,-40
   27780:	dd400515 	stw	r21,20(sp)
   27784:	dfc00915 	stw	ra,36(sp)
   27788:	df000815 	stw	fp,32(sp)
   2778c:	ddc00715 	stw	r23,28(sp)
   27790:	dd800615 	stw	r22,24(sp)
   27794:	dd000415 	stw	r20,16(sp)
   27798:	dcc00315 	stw	r19,12(sp)
   2779c:	dc800215 	stw	r18,8(sp)
   277a0:	dc400115 	stw	r17,4(sp)
   277a4:	dc000015 	stw	r16,0(sp)
   277a8:	1088000c 	andi	r2,r2,8192
   277ac:	302b883a 	mov	r21,r6
   277b0:	10002e26 	beq	r2,zero,2786c <__sprint_r.part.0+0xf4>
   277b4:	30800217 	ldw	r2,8(r6)
   277b8:	35800017 	ldw	r22,0(r6)
   277bc:	10002926 	beq	r2,zero,27864 <__sprint_r.part.0+0xec>
   277c0:	2827883a 	mov	r19,r5
   277c4:	2029883a 	mov	r20,r4
   277c8:	b5c00104 	addi	r23,r22,4
   277cc:	04bfffc4 	movi	r18,-1
   277d0:	bc400017 	ldw	r17,0(r23)
   277d4:	b4000017 	ldw	r16,0(r22)
   277d8:	0039883a 	mov	fp,zero
   277dc:	8822d0ba 	srli	r17,r17,2
   277e0:	8800031e 	bne	r17,zero,277f0 <__sprint_r.part.0+0x78>
   277e4:	00001806 	br	27848 <__sprint_r.part.0+0xd0>
   277e8:	84000104 	addi	r16,r16,4
   277ec:	8f001526 	beq	r17,fp,27844 <__sprint_r.part.0+0xcc>
   277f0:	81400017 	ldw	r5,0(r16)
   277f4:	980d883a 	mov	r6,r19
   277f8:	a009883a 	mov	r4,r20
   277fc:	00291a00 	call	291a0 <_fputwc_r>
   27800:	e7000044 	addi	fp,fp,1
   27804:	14bff81e 	bne	r2,r18,277e8 <__alt_data_end+0xfffe77e8>
   27808:	9005883a 	mov	r2,r18
   2780c:	a8000215 	stw	zero,8(r21)
   27810:	a8000115 	stw	zero,4(r21)
   27814:	dfc00917 	ldw	ra,36(sp)
   27818:	df000817 	ldw	fp,32(sp)
   2781c:	ddc00717 	ldw	r23,28(sp)
   27820:	dd800617 	ldw	r22,24(sp)
   27824:	dd400517 	ldw	r21,20(sp)
   27828:	dd000417 	ldw	r20,16(sp)
   2782c:	dcc00317 	ldw	r19,12(sp)
   27830:	dc800217 	ldw	r18,8(sp)
   27834:	dc400117 	ldw	r17,4(sp)
   27838:	dc000017 	ldw	r16,0(sp)
   2783c:	dec00a04 	addi	sp,sp,40
   27840:	f800283a 	ret
   27844:	a8800217 	ldw	r2,8(r21)
   27848:	8c63883a 	add	r17,r17,r17
   2784c:	8c63883a 	add	r17,r17,r17
   27850:	1445c83a 	sub	r2,r2,r17
   27854:	a8800215 	stw	r2,8(r21)
   27858:	b5800204 	addi	r22,r22,8
   2785c:	bdc00204 	addi	r23,r23,8
   27860:	103fdb1e 	bne	r2,zero,277d0 <__alt_data_end+0xfffe77d0>
   27864:	0005883a 	mov	r2,zero
   27868:	003fe806 	br	2780c <__alt_data_end+0xfffe780c>
   2786c:	00292a00 	call	292a0 <__sfvwrite_r>
   27870:	003fe606 	br	2780c <__alt_data_end+0xfffe780c>

00027874 <__sprint_r>:
   27874:	30c00217 	ldw	r3,8(r6)
   27878:	18000126 	beq	r3,zero,27880 <__sprint_r+0xc>
   2787c:	00277781 	jmpi	27778 <__sprint_r.part.0>
   27880:	30000115 	stw	zero,4(r6)
   27884:	0005883a 	mov	r2,zero
   27888:	f800283a 	ret

0002788c <___vfiprintf_internal_r>:
   2788c:	deffc904 	addi	sp,sp,-220
   27890:	df003515 	stw	fp,212(sp)
   27894:	dd003115 	stw	r20,196(sp)
   27898:	dfc03615 	stw	ra,216(sp)
   2789c:	ddc03415 	stw	r23,208(sp)
   278a0:	dd803315 	stw	r22,204(sp)
   278a4:	dd403215 	stw	r21,200(sp)
   278a8:	dcc03015 	stw	r19,192(sp)
   278ac:	dc802f15 	stw	r18,188(sp)
   278b0:	dc402e15 	stw	r17,184(sp)
   278b4:	dc002d15 	stw	r16,180(sp)
   278b8:	d9002015 	stw	r4,128(sp)
   278bc:	d9c02215 	stw	r7,136(sp)
   278c0:	2829883a 	mov	r20,r5
   278c4:	3039883a 	mov	fp,r6
   278c8:	20000226 	beq	r4,zero,278d4 <___vfiprintf_internal_r+0x48>
   278cc:	20800e17 	ldw	r2,56(r4)
   278d0:	1000cf26 	beq	r2,zero,27c10 <___vfiprintf_internal_r+0x384>
   278d4:	a080030b 	ldhu	r2,12(r20)
   278d8:	10c8000c 	andi	r3,r2,8192
   278dc:	1800061e 	bne	r3,zero,278f8 <___vfiprintf_internal_r+0x6c>
   278e0:	a1001917 	ldw	r4,100(r20)
   278e4:	00f7ffc4 	movi	r3,-8193
   278e8:	10880014 	ori	r2,r2,8192
   278ec:	20c6703a 	and	r3,r4,r3
   278f0:	a080030d 	sth	r2,12(r20)
   278f4:	a0c01915 	stw	r3,100(r20)
   278f8:	10c0020c 	andi	r3,r2,8
   278fc:	1800a926 	beq	r3,zero,27ba4 <___vfiprintf_internal_r+0x318>
   27900:	a0c00417 	ldw	r3,16(r20)
   27904:	1800a726 	beq	r3,zero,27ba4 <___vfiprintf_internal_r+0x318>
   27908:	1080068c 	andi	r2,r2,26
   2790c:	00c00284 	movi	r3,10
   27910:	10c0ac26 	beq	r2,r3,27bc4 <___vfiprintf_internal_r+0x338>
   27914:	da801a04 	addi	r10,sp,104
   27918:	da801e15 	stw	r10,120(sp)
   2791c:	d8801e17 	ldw	r2,120(sp)
   27920:	da8019c4 	addi	r10,sp,103
   27924:	058000f4 	movhi	r22,3
   27928:	05c000f4 	movhi	r23,3
   2792c:	da801f15 	stw	r10,124(sp)
   27930:	1295c83a 	sub	r10,r2,r10
   27934:	b580c404 	addi	r22,r22,784
   27938:	bdc0c004 	addi	r23,r23,768
   2793c:	dec01a15 	stw	sp,104(sp)
   27940:	d8001c15 	stw	zero,112(sp)
   27944:	d8001b15 	stw	zero,108(sp)
   27948:	d8002615 	stw	zero,152(sp)
   2794c:	d8002315 	stw	zero,140(sp)
   27950:	da802715 	stw	r10,156(sp)
   27954:	d811883a 	mov	r8,sp
   27958:	dd002115 	stw	r20,132(sp)
   2795c:	e021883a 	mov	r16,fp
   27960:	80800007 	ldb	r2,0(r16)
   27964:	1003ea26 	beq	r2,zero,28910 <___vfiprintf_internal_r+0x1084>
   27968:	00c00944 	movi	r3,37
   2796c:	8025883a 	mov	r18,r16
   27970:	10c0021e 	bne	r2,r3,2797c <___vfiprintf_internal_r+0xf0>
   27974:	00001606 	br	279d0 <___vfiprintf_internal_r+0x144>
   27978:	10c00326 	beq	r2,r3,27988 <___vfiprintf_internal_r+0xfc>
   2797c:	94800044 	addi	r18,r18,1
   27980:	90800007 	ldb	r2,0(r18)
   27984:	103ffc1e 	bne	r2,zero,27978 <__alt_data_end+0xfffe7978>
   27988:	9423c83a 	sub	r17,r18,r16
   2798c:	88001026 	beq	r17,zero,279d0 <___vfiprintf_internal_r+0x144>
   27990:	d8c01c17 	ldw	r3,112(sp)
   27994:	d8801b17 	ldw	r2,108(sp)
   27998:	44000015 	stw	r16,0(r8)
   2799c:	88c7883a 	add	r3,r17,r3
   279a0:	10800044 	addi	r2,r2,1
   279a4:	44400115 	stw	r17,4(r8)
   279a8:	d8c01c15 	stw	r3,112(sp)
   279ac:	d8801b15 	stw	r2,108(sp)
   279b0:	010001c4 	movi	r4,7
   279b4:	2080760e 	bge	r4,r2,27b90 <___vfiprintf_internal_r+0x304>
   279b8:	1803821e 	bne	r3,zero,287c4 <___vfiprintf_internal_r+0xf38>
   279bc:	da802317 	ldw	r10,140(sp)
   279c0:	d8001b15 	stw	zero,108(sp)
   279c4:	d811883a 	mov	r8,sp
   279c8:	5455883a 	add	r10,r10,r17
   279cc:	da802315 	stw	r10,140(sp)
   279d0:	90800007 	ldb	r2,0(r18)
   279d4:	10044626 	beq	r2,zero,28af0 <___vfiprintf_internal_r+0x1264>
   279d8:	90c00047 	ldb	r3,1(r18)
   279dc:	94000044 	addi	r16,r18,1
   279e0:	d8001d85 	stb	zero,118(sp)
   279e4:	0009883a 	mov	r4,zero
   279e8:	000f883a 	mov	r7,zero
   279ec:	027fffc4 	movi	r9,-1
   279f0:	0023883a 	mov	r17,zero
   279f4:	0029883a 	mov	r20,zero
   279f8:	01401604 	movi	r5,88
   279fc:	01800244 	movi	r6,9
   27a00:	03400a84 	movi	r13,42
   27a04:	03001b04 	movi	r12,108
   27a08:	84000044 	addi	r16,r16,1
   27a0c:	18bff804 	addi	r2,r3,-32
   27a10:	28827336 	bltu	r5,r2,283e0 <___vfiprintf_internal_r+0xb54>
   27a14:	100490ba 	slli	r2,r2,2
   27a18:	028000b4 	movhi	r10,2
   27a1c:	529e8b04 	addi	r10,r10,31276
   27a20:	1285883a 	add	r2,r2,r10
   27a24:	10800017 	ldw	r2,0(r2)
   27a28:	1000683a 	jmp	r2
   27a2c:	00028114 	movui	zero,2564
   27a30:	000283e0 	cmpeqi	zero,zero,2575
   27a34:	000283e0 	cmpeqi	zero,zero,2575
   27a38:	00028134 	movhi	zero,2564
   27a3c:	000283e0 	cmpeqi	zero,zero,2575
   27a40:	000283e0 	cmpeqi	zero,zero,2575
   27a44:	000283e0 	cmpeqi	zero,zero,2575
   27a48:	000283e0 	cmpeqi	zero,zero,2575
   27a4c:	000283e0 	cmpeqi	zero,zero,2575
   27a50:	000283e0 	cmpeqi	zero,zero,2575
   27a54:	0002831c 	xori	zero,zero,2572
   27a58:	00028338 	rdprs	zero,zero,2572
   27a5c:	000283e0 	cmpeqi	zero,zero,2575
   27a60:	00027c20 	cmpeqi	zero,zero,2544
   27a64:	00028348 	cmpgei	zero,zero,2573
   27a68:	000283e0 	cmpeqi	zero,zero,2575
   27a6c:	00028140 	call	2814 <__alt_mem_onchip_memory2_0-0x1d7ec>
   27a70:	0002814c 	andi	zero,zero,2565
   27a74:	0002814c 	andi	zero,zero,2565
   27a78:	0002814c 	andi	zero,zero,2565
   27a7c:	0002814c 	andi	zero,zero,2565
   27a80:	0002814c 	andi	zero,zero,2565
   27a84:	0002814c 	andi	zero,zero,2565
   27a88:	0002814c 	andi	zero,zero,2565
   27a8c:	0002814c 	andi	zero,zero,2565
   27a90:	0002814c 	andi	zero,zero,2565
   27a94:	000283e0 	cmpeqi	zero,zero,2575
   27a98:	000283e0 	cmpeqi	zero,zero,2575
   27a9c:	000283e0 	cmpeqi	zero,zero,2575
   27aa0:	000283e0 	cmpeqi	zero,zero,2575
   27aa4:	000283e0 	cmpeqi	zero,zero,2575
   27aa8:	000283e0 	cmpeqi	zero,zero,2575
   27aac:	000283e0 	cmpeqi	zero,zero,2575
   27ab0:	000283e0 	cmpeqi	zero,zero,2575
   27ab4:	000283e0 	cmpeqi	zero,zero,2575
   27ab8:	000283e0 	cmpeqi	zero,zero,2575
   27abc:	00028178 	rdprs	zero,zero,2565
   27ac0:	000283e0 	cmpeqi	zero,zero,2575
   27ac4:	000283e0 	cmpeqi	zero,zero,2575
   27ac8:	000283e0 	cmpeqi	zero,zero,2575
   27acc:	000283e0 	cmpeqi	zero,zero,2575
   27ad0:	000283e0 	cmpeqi	zero,zero,2575
   27ad4:	000283e0 	cmpeqi	zero,zero,2575
   27ad8:	000283e0 	cmpeqi	zero,zero,2575
   27adc:	000283e0 	cmpeqi	zero,zero,2575
   27ae0:	000283e0 	cmpeqi	zero,zero,2575
   27ae4:	000283e0 	cmpeqi	zero,zero,2575
   27ae8:	000281b0 	cmpltui	zero,zero,2566
   27aec:	000283e0 	cmpeqi	zero,zero,2575
   27af0:	000283e0 	cmpeqi	zero,zero,2575
   27af4:	000283e0 	cmpeqi	zero,zero,2575
   27af8:	000283e0 	cmpeqi	zero,zero,2575
   27afc:	000283e0 	cmpeqi	zero,zero,2575
   27b00:	00028208 	cmpgei	zero,zero,2568
   27b04:	000283e0 	cmpeqi	zero,zero,2575
   27b08:	000283e0 	cmpeqi	zero,zero,2575
   27b0c:	00028278 	rdprs	zero,zero,2569
   27b10:	000283e0 	cmpeqi	zero,zero,2575
   27b14:	000283e0 	cmpeqi	zero,zero,2575
   27b18:	000283e0 	cmpeqi	zero,zero,2575
   27b1c:	000283e0 	cmpeqi	zero,zero,2575
   27b20:	000283e0 	cmpeqi	zero,zero,2575
   27b24:	000283e0 	cmpeqi	zero,zero,2575
   27b28:	000283e0 	cmpeqi	zero,zero,2575
   27b2c:	000283e0 	cmpeqi	zero,zero,2575
   27b30:	000283e0 	cmpeqi	zero,zero,2575
   27b34:	000283e0 	cmpeqi	zero,zero,2575
   27b38:	00028024 	muli	zero,zero,2560
   27b3c:	00028050 	cmplti	zero,zero,2561
   27b40:	000283e0 	cmpeqi	zero,zero,2575
   27b44:	000283e0 	cmpeqi	zero,zero,2575
   27b48:	000283e0 	cmpeqi	zero,zero,2575
   27b4c:	00028388 	cmpgei	zero,zero,2574
   27b50:	00028050 	cmplti	zero,zero,2561
   27b54:	000283e0 	cmpeqi	zero,zero,2575
   27b58:	000283e0 	cmpeqi	zero,zero,2575
   27b5c:	00027ee4 	muli	zero,zero,2555
   27b60:	000283e0 	cmpeqi	zero,zero,2575
   27b64:	00027ef4 	movhi	zero,2555
   27b68:	00027f30 	cmpltui	zero,zero,2556
   27b6c:	00027c2c 	andhi	zero,zero,2544
   27b70:	00027ed8 	cmpnei	zero,zero,2555
   27b74:	000283e0 	cmpeqi	zero,zero,2575
   27b78:	000282b4 	movhi	zero,2570
   27b7c:	000283e0 	cmpeqi	zero,zero,2575
   27b80:	0002830c 	andi	zero,zero,2572
   27b84:	000283e0 	cmpeqi	zero,zero,2575
   27b88:	000283e0 	cmpeqi	zero,zero,2575
   27b8c:	00027fd0 	cmplti	zero,zero,2559
   27b90:	42000204 	addi	r8,r8,8
   27b94:	da802317 	ldw	r10,140(sp)
   27b98:	5455883a 	add	r10,r10,r17
   27b9c:	da802315 	stw	r10,140(sp)
   27ba0:	003f8b06 	br	279d0 <__alt_data_end+0xfffe79d0>
   27ba4:	d9002017 	ldw	r4,128(sp)
   27ba8:	a00b883a 	mov	r5,r20
   27bac:	002302c0 	call	2302c <__swsetup_r>
   27bb0:	1003b11e 	bne	r2,zero,28a78 <___vfiprintf_internal_r+0x11ec>
   27bb4:	a080030b 	ldhu	r2,12(r20)
   27bb8:	00c00284 	movi	r3,10
   27bbc:	1080068c 	andi	r2,r2,26
   27bc0:	10ff541e 	bne	r2,r3,27914 <__alt_data_end+0xfffe7914>
   27bc4:	a080038f 	ldh	r2,14(r20)
   27bc8:	103f5216 	blt	r2,zero,27914 <__alt_data_end+0xfffe7914>
   27bcc:	d9c02217 	ldw	r7,136(sp)
   27bd0:	d9002017 	ldw	r4,128(sp)
   27bd4:	e00d883a 	mov	r6,fp
   27bd8:	a00b883a 	mov	r5,r20
   27bdc:	0028d040 	call	28d04 <__sbprintf>
   27be0:	dfc03617 	ldw	ra,216(sp)
   27be4:	df003517 	ldw	fp,212(sp)
   27be8:	ddc03417 	ldw	r23,208(sp)
   27bec:	dd803317 	ldw	r22,204(sp)
   27bf0:	dd403217 	ldw	r21,200(sp)
   27bf4:	dd003117 	ldw	r20,196(sp)
   27bf8:	dcc03017 	ldw	r19,192(sp)
   27bfc:	dc802f17 	ldw	r18,188(sp)
   27c00:	dc402e17 	ldw	r17,184(sp)
   27c04:	dc002d17 	ldw	r16,180(sp)
   27c08:	dec03704 	addi	sp,sp,220
   27c0c:	f800283a 	ret
   27c10:	00250000 	call	25000 <__sinit>
   27c14:	003f2f06 	br	278d4 <__alt_data_end+0xfffe78d4>
   27c18:	0463c83a 	sub	r17,zero,r17
   27c1c:	d8802215 	stw	r2,136(sp)
   27c20:	a5000114 	ori	r20,r20,4
   27c24:	80c00007 	ldb	r3,0(r16)
   27c28:	003f7706 	br	27a08 <__alt_data_end+0xfffe7a08>
   27c2c:	00800c04 	movi	r2,48
   27c30:	da802217 	ldw	r10,136(sp)
   27c34:	d8801d05 	stb	r2,116(sp)
   27c38:	00801e04 	movi	r2,120
   27c3c:	d8801d45 	stb	r2,117(sp)
   27c40:	d8001d85 	stb	zero,118(sp)
   27c44:	50c00104 	addi	r3,r10,4
   27c48:	54800017 	ldw	r18,0(r10)
   27c4c:	0027883a 	mov	r19,zero
   27c50:	a0800094 	ori	r2,r20,2
   27c54:	48030b16 	blt	r9,zero,28884 <___vfiprintf_internal_r+0xff8>
   27c58:	00bfdfc4 	movi	r2,-129
   27c5c:	a096703a 	and	r11,r20,r2
   27c60:	d8c02215 	stw	r3,136(sp)
   27c64:	5d000094 	ori	r20,r11,2
   27c68:	90032b1e 	bne	r18,zero,28918 <___vfiprintf_internal_r+0x108c>
   27c6c:	008000f4 	movhi	r2,3
   27c70:	10805f04 	addi	r2,r2,380
   27c74:	d8802615 	stw	r2,152(sp)
   27c78:	0039883a 	mov	fp,zero
   27c7c:	48017b1e 	bne	r9,zero,2826c <___vfiprintf_internal_r+0x9e0>
   27c80:	0013883a 	mov	r9,zero
   27c84:	0027883a 	mov	r19,zero
   27c88:	dd401a04 	addi	r21,sp,104
   27c8c:	4825883a 	mov	r18,r9
   27c90:	4cc0010e 	bge	r9,r19,27c98 <___vfiprintf_internal_r+0x40c>
   27c94:	9825883a 	mov	r18,r19
   27c98:	e7003fcc 	andi	fp,fp,255
   27c9c:	e700201c 	xori	fp,fp,128
   27ca0:	e73fe004 	addi	fp,fp,-128
   27ca4:	e0000126 	beq	fp,zero,27cac <___vfiprintf_internal_r+0x420>
   27ca8:	94800044 	addi	r18,r18,1
   27cac:	a380008c 	andi	r14,r20,2
   27cb0:	70000126 	beq	r14,zero,27cb8 <___vfiprintf_internal_r+0x42c>
   27cb4:	94800084 	addi	r18,r18,2
   27cb8:	a700210c 	andi	fp,r20,132
   27cbc:	e001df1e 	bne	fp,zero,2843c <___vfiprintf_internal_r+0xbb0>
   27cc0:	8c87c83a 	sub	r3,r17,r18
   27cc4:	00c1dd0e 	bge	zero,r3,2843c <___vfiprintf_internal_r+0xbb0>
   27cc8:	01c00404 	movi	r7,16
   27ccc:	d8801c17 	ldw	r2,112(sp)
   27cd0:	38c3ad0e 	bge	r7,r3,28b88 <___vfiprintf_internal_r+0x12fc>
   27cd4:	028000f4 	movhi	r10,3
   27cd8:	5280c404 	addi	r10,r10,784
   27cdc:	dc002915 	stw	r16,164(sp)
   27ce0:	d9801b17 	ldw	r6,108(sp)
   27ce4:	da802415 	stw	r10,144(sp)
   27ce8:	03c001c4 	movi	r15,7
   27cec:	da402515 	stw	r9,148(sp)
   27cf0:	db802815 	stw	r14,160(sp)
   27cf4:	1821883a 	mov	r16,r3
   27cf8:	00000506 	br	27d10 <___vfiprintf_internal_r+0x484>
   27cfc:	31400084 	addi	r5,r6,2
   27d00:	42000204 	addi	r8,r8,8
   27d04:	200d883a 	mov	r6,r4
   27d08:	843ffc04 	addi	r16,r16,-16
   27d0c:	3c000d0e 	bge	r7,r16,27d44 <___vfiprintf_internal_r+0x4b8>
   27d10:	10800404 	addi	r2,r2,16
   27d14:	31000044 	addi	r4,r6,1
   27d18:	45800015 	stw	r22,0(r8)
   27d1c:	41c00115 	stw	r7,4(r8)
   27d20:	d8801c15 	stw	r2,112(sp)
   27d24:	d9001b15 	stw	r4,108(sp)
   27d28:	793ff40e 	bge	r15,r4,27cfc <__alt_data_end+0xfffe7cfc>
   27d2c:	1001b51e 	bne	r2,zero,28404 <___vfiprintf_internal_r+0xb78>
   27d30:	843ffc04 	addi	r16,r16,-16
   27d34:	000d883a 	mov	r6,zero
   27d38:	01400044 	movi	r5,1
   27d3c:	d811883a 	mov	r8,sp
   27d40:	3c3ff316 	blt	r7,r16,27d10 <__alt_data_end+0xfffe7d10>
   27d44:	8007883a 	mov	r3,r16
   27d48:	da402517 	ldw	r9,148(sp)
   27d4c:	db802817 	ldw	r14,160(sp)
   27d50:	dc002917 	ldw	r16,164(sp)
   27d54:	da802417 	ldw	r10,144(sp)
   27d58:	1885883a 	add	r2,r3,r2
   27d5c:	40c00115 	stw	r3,4(r8)
   27d60:	42800015 	stw	r10,0(r8)
   27d64:	d8801c15 	stw	r2,112(sp)
   27d68:	d9401b15 	stw	r5,108(sp)
   27d6c:	00c001c4 	movi	r3,7
   27d70:	19426016 	blt	r3,r5,286f4 <___vfiprintf_internal_r+0xe68>
   27d74:	d8c01d87 	ldb	r3,118(sp)
   27d78:	42000204 	addi	r8,r8,8
   27d7c:	29000044 	addi	r4,r5,1
   27d80:	1801b31e 	bne	r3,zero,28450 <___vfiprintf_internal_r+0xbc4>
   27d84:	7001c026 	beq	r14,zero,28488 <___vfiprintf_internal_r+0xbfc>
   27d88:	d8c01d04 	addi	r3,sp,116
   27d8c:	10800084 	addi	r2,r2,2
   27d90:	40c00015 	stw	r3,0(r8)
   27d94:	00c00084 	movi	r3,2
   27d98:	40c00115 	stw	r3,4(r8)
   27d9c:	d8801c15 	stw	r2,112(sp)
   27da0:	d9001b15 	stw	r4,108(sp)
   27da4:	00c001c4 	movi	r3,7
   27da8:	1902650e 	bge	r3,r4,28740 <___vfiprintf_internal_r+0xeb4>
   27dac:	10029a1e 	bne	r2,zero,28818 <___vfiprintf_internal_r+0xf8c>
   27db0:	00c02004 	movi	r3,128
   27db4:	01000044 	movi	r4,1
   27db8:	000b883a 	mov	r5,zero
   27dbc:	d811883a 	mov	r8,sp
   27dc0:	e0c1b31e 	bne	fp,r3,28490 <___vfiprintf_internal_r+0xc04>
   27dc4:	8cb9c83a 	sub	fp,r17,r18
   27dc8:	0701b10e 	bge	zero,fp,28490 <___vfiprintf_internal_r+0xc04>
   27dcc:	01c00404 	movi	r7,16
   27dd0:	3f03890e 	bge	r7,fp,28bf8 <___vfiprintf_internal_r+0x136c>
   27dd4:	00c000f4 	movhi	r3,3
   27dd8:	18c0c004 	addi	r3,r3,768
   27ddc:	d8c02415 	stw	r3,144(sp)
   27de0:	8007883a 	mov	r3,r16
   27de4:	034001c4 	movi	r13,7
   27de8:	e021883a 	mov	r16,fp
   27dec:	da402515 	stw	r9,148(sp)
   27df0:	1839883a 	mov	fp,r3
   27df4:	00000506 	br	27e0c <___vfiprintf_internal_r+0x580>
   27df8:	29800084 	addi	r6,r5,2
   27dfc:	42000204 	addi	r8,r8,8
   27e00:	180b883a 	mov	r5,r3
   27e04:	843ffc04 	addi	r16,r16,-16
   27e08:	3c000d0e 	bge	r7,r16,27e40 <___vfiprintf_internal_r+0x5b4>
   27e0c:	10800404 	addi	r2,r2,16
   27e10:	28c00044 	addi	r3,r5,1
   27e14:	45c00015 	stw	r23,0(r8)
   27e18:	41c00115 	stw	r7,4(r8)
   27e1c:	d8801c15 	stw	r2,112(sp)
   27e20:	d8c01b15 	stw	r3,108(sp)
   27e24:	68fff40e 	bge	r13,r3,27df8 <__alt_data_end+0xfffe7df8>
   27e28:	1002241e 	bne	r2,zero,286bc <___vfiprintf_internal_r+0xe30>
   27e2c:	843ffc04 	addi	r16,r16,-16
   27e30:	01800044 	movi	r6,1
   27e34:	000b883a 	mov	r5,zero
   27e38:	d811883a 	mov	r8,sp
   27e3c:	3c3ff316 	blt	r7,r16,27e0c <__alt_data_end+0xfffe7e0c>
   27e40:	da402517 	ldw	r9,148(sp)
   27e44:	e007883a 	mov	r3,fp
   27e48:	8039883a 	mov	fp,r16
   27e4c:	1821883a 	mov	r16,r3
   27e50:	d8c02417 	ldw	r3,144(sp)
   27e54:	1705883a 	add	r2,r2,fp
   27e58:	47000115 	stw	fp,4(r8)
   27e5c:	40c00015 	stw	r3,0(r8)
   27e60:	d8801c15 	stw	r2,112(sp)
   27e64:	d9801b15 	stw	r6,108(sp)
   27e68:	00c001c4 	movi	r3,7
   27e6c:	19827616 	blt	r3,r6,28848 <___vfiprintf_internal_r+0xfbc>
   27e70:	4cf9c83a 	sub	fp,r9,r19
   27e74:	42000204 	addi	r8,r8,8
   27e78:	31000044 	addi	r4,r6,1
   27e7c:	300b883a 	mov	r5,r6
   27e80:	07018516 	blt	zero,fp,28498 <___vfiprintf_internal_r+0xc0c>
   27e84:	9885883a 	add	r2,r19,r2
   27e88:	45400015 	stw	r21,0(r8)
   27e8c:	44c00115 	stw	r19,4(r8)
   27e90:	d8801c15 	stw	r2,112(sp)
   27e94:	d9001b15 	stw	r4,108(sp)
   27e98:	00c001c4 	movi	r3,7
   27e9c:	1901dd0e 	bge	r3,r4,28614 <___vfiprintf_internal_r+0xd88>
   27ea0:	1002401e 	bne	r2,zero,287a4 <___vfiprintf_internal_r+0xf18>
   27ea4:	d8001b15 	stw	zero,108(sp)
   27ea8:	a2c0010c 	andi	r11,r20,4
   27eac:	58000226 	beq	r11,zero,27eb8 <___vfiprintf_internal_r+0x62c>
   27eb0:	8ca7c83a 	sub	r19,r17,r18
   27eb4:	04c2f216 	blt	zero,r19,28a80 <___vfiprintf_internal_r+0x11f4>
   27eb8:	8c80010e 	bge	r17,r18,27ec0 <___vfiprintf_internal_r+0x634>
   27ebc:	9023883a 	mov	r17,r18
   27ec0:	da802317 	ldw	r10,140(sp)
   27ec4:	5455883a 	add	r10,r10,r17
   27ec8:	da802315 	stw	r10,140(sp)
   27ecc:	d8001b15 	stw	zero,108(sp)
   27ed0:	d811883a 	mov	r8,sp
   27ed4:	003ea206 	br	27960 <__alt_data_end+0xfffe7960>
   27ed8:	a5000814 	ori	r20,r20,32
   27edc:	80c00007 	ldb	r3,0(r16)
   27ee0:	003ec906 	br	27a08 <__alt_data_end+0xfffe7a08>
   27ee4:	80c00007 	ldb	r3,0(r16)
   27ee8:	1b030926 	beq	r3,r12,28b10 <___vfiprintf_internal_r+0x1284>
   27eec:	a5000414 	ori	r20,r20,16
   27ef0:	003ec506 	br	27a08 <__alt_data_end+0xfffe7a08>
   27ef4:	21003fcc 	andi	r4,r4,255
   27ef8:	20035e1e 	bne	r4,zero,28c74 <___vfiprintf_internal_r+0x13e8>
   27efc:	a080080c 	andi	r2,r20,32
   27f00:	1002a526 	beq	r2,zero,28998 <___vfiprintf_internal_r+0x110c>
   27f04:	da802217 	ldw	r10,136(sp)
   27f08:	50800017 	ldw	r2,0(r10)
   27f0c:	da802317 	ldw	r10,140(sp)
   27f10:	5007d7fa 	srai	r3,r10,31
   27f14:	da802217 	ldw	r10,136(sp)
   27f18:	10c00115 	stw	r3,4(r2)
   27f1c:	52800104 	addi	r10,r10,4
   27f20:	da802215 	stw	r10,136(sp)
   27f24:	da802317 	ldw	r10,140(sp)
   27f28:	12800015 	stw	r10,0(r2)
   27f2c:	003e8c06 	br	27960 <__alt_data_end+0xfffe7960>
   27f30:	21003fcc 	andi	r4,r4,255
   27f34:	2003511e 	bne	r4,zero,28c7c <___vfiprintf_internal_r+0x13f0>
   27f38:	a080080c 	andi	r2,r20,32
   27f3c:	1000a126 	beq	r2,zero,281c4 <___vfiprintf_internal_r+0x938>
   27f40:	da802217 	ldw	r10,136(sp)
   27f44:	d8001d85 	stb	zero,118(sp)
   27f48:	50800204 	addi	r2,r10,8
   27f4c:	54800017 	ldw	r18,0(r10)
   27f50:	54c00117 	ldw	r19,4(r10)
   27f54:	4802b416 	blt	r9,zero,28a28 <___vfiprintf_internal_r+0x119c>
   27f58:	013fdfc4 	movi	r4,-129
   27f5c:	94c6b03a 	or	r3,r18,r19
   27f60:	d8802215 	stw	r2,136(sp)
   27f64:	a128703a 	and	r20,r20,r4
   27f68:	1800a226 	beq	r3,zero,281f4 <___vfiprintf_internal_r+0x968>
   27f6c:	0039883a 	mov	fp,zero
   27f70:	dd401a04 	addi	r21,sp,104
   27f74:	9006d0fa 	srli	r3,r18,3
   27f78:	9808977a 	slli	r4,r19,29
   27f7c:	9826d0fa 	srli	r19,r19,3
   27f80:	948001cc 	andi	r18,r18,7
   27f84:	90800c04 	addi	r2,r18,48
   27f88:	ad7fffc4 	addi	r21,r21,-1
   27f8c:	20e4b03a 	or	r18,r4,r3
   27f90:	a8800005 	stb	r2,0(r21)
   27f94:	94c6b03a 	or	r3,r18,r19
   27f98:	183ff61e 	bne	r3,zero,27f74 <__alt_data_end+0xfffe7f74>
   27f9c:	a0c0004c 	andi	r3,r20,1
   27fa0:	18005926 	beq	r3,zero,28108 <___vfiprintf_internal_r+0x87c>
   27fa4:	10803fcc 	andi	r2,r2,255
   27fa8:	1080201c 	xori	r2,r2,128
   27fac:	10bfe004 	addi	r2,r2,-128
   27fb0:	00c00c04 	movi	r3,48
   27fb4:	10c05426 	beq	r2,r3,28108 <___vfiprintf_internal_r+0x87c>
   27fb8:	da801e17 	ldw	r10,120(sp)
   27fbc:	a8bfffc4 	addi	r2,r21,-1
   27fc0:	a8ffffc5 	stb	r3,-1(r21)
   27fc4:	50a7c83a 	sub	r19,r10,r2
   27fc8:	102b883a 	mov	r21,r2
   27fcc:	003f2f06 	br	27c8c <__alt_data_end+0xfffe7c8c>
   27fd0:	21003fcc 	andi	r4,r4,255
   27fd4:	2003421e 	bne	r4,zero,28ce0 <___vfiprintf_internal_r+0x1454>
   27fd8:	008000f4 	movhi	r2,3
   27fdc:	10805f04 	addi	r2,r2,380
   27fe0:	d8802615 	stw	r2,152(sp)
   27fe4:	a080080c 	andi	r2,r20,32
   27fe8:	1000aa26 	beq	r2,zero,28294 <___vfiprintf_internal_r+0xa08>
   27fec:	da802217 	ldw	r10,136(sp)
   27ff0:	54800017 	ldw	r18,0(r10)
   27ff4:	54c00117 	ldw	r19,4(r10)
   27ff8:	52800204 	addi	r10,r10,8
   27ffc:	da802215 	stw	r10,136(sp)
   28000:	a080004c 	andi	r2,r20,1
   28004:	1001d226 	beq	r2,zero,28750 <___vfiprintf_internal_r+0xec4>
   28008:	94c4b03a 	or	r2,r18,r19
   2800c:	1002351e 	bne	r2,zero,288e4 <___vfiprintf_internal_r+0x1058>
   28010:	d8001d85 	stb	zero,118(sp)
   28014:	48022216 	blt	r9,zero,288a0 <___vfiprintf_internal_r+0x1014>
   28018:	00bfdfc4 	movi	r2,-129
   2801c:	a0a8703a 	and	r20,r20,r2
   28020:	003f1506 	br	27c78 <__alt_data_end+0xfffe7c78>
   28024:	da802217 	ldw	r10,136(sp)
   28028:	04800044 	movi	r18,1
   2802c:	d8001d85 	stb	zero,118(sp)
   28030:	50800017 	ldw	r2,0(r10)
   28034:	52800104 	addi	r10,r10,4
   28038:	da802215 	stw	r10,136(sp)
   2803c:	d8801005 	stb	r2,64(sp)
   28040:	9027883a 	mov	r19,r18
   28044:	dd401004 	addi	r21,sp,64
   28048:	0013883a 	mov	r9,zero
   2804c:	003f1706 	br	27cac <__alt_data_end+0xfffe7cac>
   28050:	21003fcc 	andi	r4,r4,255
   28054:	2003201e 	bne	r4,zero,28cd8 <___vfiprintf_internal_r+0x144c>
   28058:	a080080c 	andi	r2,r20,32
   2805c:	10004b26 	beq	r2,zero,2818c <___vfiprintf_internal_r+0x900>
   28060:	da802217 	ldw	r10,136(sp)
   28064:	50800117 	ldw	r2,4(r10)
   28068:	54800017 	ldw	r18,0(r10)
   2806c:	52800204 	addi	r10,r10,8
   28070:	da802215 	stw	r10,136(sp)
   28074:	1027883a 	mov	r19,r2
   28078:	10022c16 	blt	r2,zero,2892c <___vfiprintf_internal_r+0x10a0>
   2807c:	df001d83 	ldbu	fp,118(sp)
   28080:	48007216 	blt	r9,zero,2824c <___vfiprintf_internal_r+0x9c0>
   28084:	00ffdfc4 	movi	r3,-129
   28088:	94c4b03a 	or	r2,r18,r19
   2808c:	a0e8703a 	and	r20,r20,r3
   28090:	1000cc26 	beq	r2,zero,283c4 <___vfiprintf_internal_r+0xb38>
   28094:	98021026 	beq	r19,zero,288d8 <___vfiprintf_internal_r+0x104c>
   28098:	dc402415 	stw	r17,144(sp)
   2809c:	dc002515 	stw	r16,148(sp)
   280a0:	9823883a 	mov	r17,r19
   280a4:	9021883a 	mov	r16,r18
   280a8:	dd401a04 	addi	r21,sp,104
   280ac:	4825883a 	mov	r18,r9
   280b0:	4027883a 	mov	r19,r8
   280b4:	8009883a 	mov	r4,r16
   280b8:	880b883a 	mov	r5,r17
   280bc:	01800284 	movi	r6,10
   280c0:	000f883a 	mov	r7,zero
   280c4:	002a7e80 	call	2a7e8 <__umoddi3>
   280c8:	10800c04 	addi	r2,r2,48
   280cc:	ad7fffc4 	addi	r21,r21,-1
   280d0:	8009883a 	mov	r4,r16
   280d4:	880b883a 	mov	r5,r17
   280d8:	a8800005 	stb	r2,0(r21)
   280dc:	01800284 	movi	r6,10
   280e0:	000f883a 	mov	r7,zero
   280e4:	002a2700 	call	2a270 <__udivdi3>
   280e8:	1021883a 	mov	r16,r2
   280ec:	10c4b03a 	or	r2,r2,r3
   280f0:	1823883a 	mov	r17,r3
   280f4:	103fef1e 	bne	r2,zero,280b4 <__alt_data_end+0xfffe80b4>
   280f8:	dc402417 	ldw	r17,144(sp)
   280fc:	dc002517 	ldw	r16,148(sp)
   28100:	9013883a 	mov	r9,r18
   28104:	9811883a 	mov	r8,r19
   28108:	da801e17 	ldw	r10,120(sp)
   2810c:	5567c83a 	sub	r19,r10,r21
   28110:	003ede06 	br	27c8c <__alt_data_end+0xfffe7c8c>
   28114:	38803fcc 	andi	r2,r7,255
   28118:	1080201c 	xori	r2,r2,128
   2811c:	10bfe004 	addi	r2,r2,-128
   28120:	1002371e 	bne	r2,zero,28a00 <___vfiprintf_internal_r+0x1174>
   28124:	01000044 	movi	r4,1
   28128:	01c00804 	movi	r7,32
   2812c:	80c00007 	ldb	r3,0(r16)
   28130:	003e3506 	br	27a08 <__alt_data_end+0xfffe7a08>
   28134:	a5000054 	ori	r20,r20,1
   28138:	80c00007 	ldb	r3,0(r16)
   2813c:	003e3206 	br	27a08 <__alt_data_end+0xfffe7a08>
   28140:	a5002014 	ori	r20,r20,128
   28144:	80c00007 	ldb	r3,0(r16)
   28148:	003e2f06 	br	27a08 <__alt_data_end+0xfffe7a08>
   2814c:	8015883a 	mov	r10,r16
   28150:	0023883a 	mov	r17,zero
   28154:	18bff404 	addi	r2,r3,-48
   28158:	50c00007 	ldb	r3,0(r10)
   2815c:	8c4002a4 	muli	r17,r17,10
   28160:	84000044 	addi	r16,r16,1
   28164:	8015883a 	mov	r10,r16
   28168:	1463883a 	add	r17,r2,r17
   2816c:	18bff404 	addi	r2,r3,-48
   28170:	30bff92e 	bgeu	r6,r2,28158 <__alt_data_end+0xfffe8158>
   28174:	003e2506 	br	27a0c <__alt_data_end+0xfffe7a0c>
   28178:	21003fcc 	andi	r4,r4,255
   2817c:	2002d41e 	bne	r4,zero,28cd0 <___vfiprintf_internal_r+0x1444>
   28180:	a5000414 	ori	r20,r20,16
   28184:	a080080c 	andi	r2,r20,32
   28188:	103fb51e 	bne	r2,zero,28060 <__alt_data_end+0xfffe8060>
   2818c:	a080040c 	andi	r2,r20,16
   28190:	1001f826 	beq	r2,zero,28974 <___vfiprintf_internal_r+0x10e8>
   28194:	da802217 	ldw	r10,136(sp)
   28198:	54800017 	ldw	r18,0(r10)
   2819c:	52800104 	addi	r10,r10,4
   281a0:	da802215 	stw	r10,136(sp)
   281a4:	9027d7fa 	srai	r19,r18,31
   281a8:	9805883a 	mov	r2,r19
   281ac:	003fb206 	br	28078 <__alt_data_end+0xfffe8078>
   281b0:	21003fcc 	andi	r4,r4,255
   281b4:	2002c41e 	bne	r4,zero,28cc8 <___vfiprintf_internal_r+0x143c>
   281b8:	a5000414 	ori	r20,r20,16
   281bc:	a080080c 	andi	r2,r20,32
   281c0:	103f5f1e 	bne	r2,zero,27f40 <__alt_data_end+0xfffe7f40>
   281c4:	a080040c 	andi	r2,r20,16
   281c8:	10020f26 	beq	r2,zero,28a08 <___vfiprintf_internal_r+0x117c>
   281cc:	da802217 	ldw	r10,136(sp)
   281d0:	d8001d85 	stb	zero,118(sp)
   281d4:	0027883a 	mov	r19,zero
   281d8:	50800104 	addi	r2,r10,4
   281dc:	54800017 	ldw	r18,0(r10)
   281e0:	48021116 	blt	r9,zero,28a28 <___vfiprintf_internal_r+0x119c>
   281e4:	00ffdfc4 	movi	r3,-129
   281e8:	d8802215 	stw	r2,136(sp)
   281ec:	a0e8703a 	and	r20,r20,r3
   281f0:	903f5e1e 	bne	r18,zero,27f6c <__alt_data_end+0xfffe7f6c>
   281f4:	0039883a 	mov	fp,zero
   281f8:	4802a626 	beq	r9,zero,28c94 <___vfiprintf_internal_r+0x1408>
   281fc:	0025883a 	mov	r18,zero
   28200:	0027883a 	mov	r19,zero
   28204:	003f5a06 	br	27f70 <__alt_data_end+0xfffe7f70>
   28208:	21003fcc 	andi	r4,r4,255
   2820c:	20029f1e 	bne	r4,zero,28c8c <___vfiprintf_internal_r+0x1400>
   28210:	a5000414 	ori	r20,r20,16
   28214:	a080080c 	andi	r2,r20,32
   28218:	10005e1e 	bne	r2,zero,28394 <___vfiprintf_internal_r+0xb08>
   2821c:	a080040c 	andi	r2,r20,16
   28220:	1001a21e 	bne	r2,zero,288ac <___vfiprintf_internal_r+0x1020>
   28224:	a080100c 	andi	r2,r20,64
   28228:	d8001d85 	stb	zero,118(sp)
   2822c:	da802217 	ldw	r10,136(sp)
   28230:	1002231e 	bne	r2,zero,28ac0 <___vfiprintf_internal_r+0x1234>
   28234:	50800104 	addi	r2,r10,4
   28238:	54800017 	ldw	r18,0(r10)
   2823c:	0027883a 	mov	r19,zero
   28240:	4801a00e 	bge	r9,zero,288c4 <___vfiprintf_internal_r+0x1038>
   28244:	d8802215 	stw	r2,136(sp)
   28248:	0039883a 	mov	fp,zero
   2824c:	94c4b03a 	or	r2,r18,r19
   28250:	103f901e 	bne	r2,zero,28094 <__alt_data_end+0xfffe8094>
   28254:	00800044 	movi	r2,1
   28258:	10803fcc 	andi	r2,r2,255
   2825c:	00c00044 	movi	r3,1
   28260:	10c05926 	beq	r2,r3,283c8 <___vfiprintf_internal_r+0xb3c>
   28264:	00c00084 	movi	r3,2
   28268:	10ffe41e 	bne	r2,r3,281fc <__alt_data_end+0xfffe81fc>
   2826c:	0025883a 	mov	r18,zero
   28270:	0027883a 	mov	r19,zero
   28274:	00013d06 	br	2876c <___vfiprintf_internal_r+0xee0>
   28278:	21003fcc 	andi	r4,r4,255
   2827c:	2002811e 	bne	r4,zero,28c84 <___vfiprintf_internal_r+0x13f8>
   28280:	008000f4 	movhi	r2,3
   28284:	10805a04 	addi	r2,r2,360
   28288:	d8802615 	stw	r2,152(sp)
   2828c:	a080080c 	andi	r2,r20,32
   28290:	103f561e 	bne	r2,zero,27fec <__alt_data_end+0xfffe7fec>
   28294:	a080040c 	andi	r2,r20,16
   28298:	1001d126 	beq	r2,zero,289e0 <___vfiprintf_internal_r+0x1154>
   2829c:	da802217 	ldw	r10,136(sp)
   282a0:	0027883a 	mov	r19,zero
   282a4:	54800017 	ldw	r18,0(r10)
   282a8:	52800104 	addi	r10,r10,4
   282ac:	da802215 	stw	r10,136(sp)
   282b0:	003f5306 	br	28000 <__alt_data_end+0xfffe8000>
   282b4:	da802217 	ldw	r10,136(sp)
   282b8:	d8001d85 	stb	zero,118(sp)
   282bc:	55400017 	ldw	r21,0(r10)
   282c0:	50c00104 	addi	r3,r10,4
   282c4:	a8024226 	beq	r21,zero,28bd0 <___vfiprintf_internal_r+0x1344>
   282c8:	48021816 	blt	r9,zero,28b2c <___vfiprintf_internal_r+0x12a0>
   282cc:	480d883a 	mov	r6,r9
   282d0:	000b883a 	mov	r5,zero
   282d4:	a809883a 	mov	r4,r21
   282d8:	d8c02a15 	stw	r3,168(sp)
   282dc:	da002b15 	stw	r8,172(sp)
   282e0:	da402c15 	stw	r9,176(sp)
   282e4:	00260b00 	call	260b0 <memchr>
   282e8:	d8c02a17 	ldw	r3,168(sp)
   282ec:	da002b17 	ldw	r8,172(sp)
   282f0:	da402c17 	ldw	r9,176(sp)
   282f4:	10024826 	beq	r2,zero,28c18 <___vfiprintf_internal_r+0x138c>
   282f8:	1567c83a 	sub	r19,r2,r21
   282fc:	df001d83 	ldbu	fp,118(sp)
   28300:	d8c02215 	stw	r3,136(sp)
   28304:	0013883a 	mov	r9,zero
   28308:	003e6006 	br	27c8c <__alt_data_end+0xfffe7c8c>
   2830c:	21003fcc 	andi	r4,r4,255
   28310:	203fc026 	beq	r4,zero,28214 <__alt_data_end+0xfffe8214>
   28314:	d9c01d85 	stb	r7,118(sp)
   28318:	003fbe06 	br	28214 <__alt_data_end+0xfffe8214>
   2831c:	da802217 	ldw	r10,136(sp)
   28320:	54400017 	ldw	r17,0(r10)
   28324:	50800104 	addi	r2,r10,4
   28328:	883e3b16 	blt	r17,zero,27c18 <__alt_data_end+0xfffe7c18>
   2832c:	d8802215 	stw	r2,136(sp)
   28330:	80c00007 	ldb	r3,0(r16)
   28334:	003db406 	br	27a08 <__alt_data_end+0xfffe7a08>
   28338:	01000044 	movi	r4,1
   2833c:	01c00ac4 	movi	r7,43
   28340:	80c00007 	ldb	r3,0(r16)
   28344:	003db006 	br	27a08 <__alt_data_end+0xfffe7a08>
   28348:	80c00007 	ldb	r3,0(r16)
   2834c:	82800044 	addi	r10,r16,1
   28350:	1b423c26 	beq	r3,r13,28c44 <___vfiprintf_internal_r+0x13b8>
   28354:	18bff404 	addi	r2,r3,-48
   28358:	0013883a 	mov	r9,zero
   2835c:	30822b36 	bltu	r6,r2,28c0c <___vfiprintf_internal_r+0x1380>
   28360:	50c00007 	ldb	r3,0(r10)
   28364:	4a4002a4 	muli	r9,r9,10
   28368:	54000044 	addi	r16,r10,1
   2836c:	8015883a 	mov	r10,r16
   28370:	4893883a 	add	r9,r9,r2
   28374:	18bff404 	addi	r2,r3,-48
   28378:	30bff92e 	bgeu	r6,r2,28360 <__alt_data_end+0xfffe8360>
   2837c:	483da30e 	bge	r9,zero,27a0c <__alt_data_end+0xfffe7a0c>
   28380:	027fffc4 	movi	r9,-1
   28384:	003da106 	br	27a0c <__alt_data_end+0xfffe7a0c>
   28388:	a5001014 	ori	r20,r20,64
   2838c:	80c00007 	ldb	r3,0(r16)
   28390:	003d9d06 	br	27a08 <__alt_data_end+0xfffe7a08>
   28394:	da802217 	ldw	r10,136(sp)
   28398:	d8001d85 	stb	zero,118(sp)
   2839c:	50c00204 	addi	r3,r10,8
   283a0:	54800017 	ldw	r18,0(r10)
   283a4:	54c00117 	ldw	r19,4(r10)
   283a8:	4801ca16 	blt	r9,zero,28ad4 <___vfiprintf_internal_r+0x1248>
   283ac:	013fdfc4 	movi	r4,-129
   283b0:	94c4b03a 	or	r2,r18,r19
   283b4:	d8c02215 	stw	r3,136(sp)
   283b8:	a128703a 	and	r20,r20,r4
   283bc:	0039883a 	mov	fp,zero
   283c0:	103f341e 	bne	r2,zero,28094 <__alt_data_end+0xfffe8094>
   283c4:	483e2e26 	beq	r9,zero,27c80 <__alt_data_end+0xfffe7c80>
   283c8:	0025883a 	mov	r18,zero
   283cc:	94800c04 	addi	r18,r18,48
   283d0:	dc8019c5 	stb	r18,103(sp)
   283d4:	dcc02717 	ldw	r19,156(sp)
   283d8:	dd4019c4 	addi	r21,sp,103
   283dc:	003e2b06 	br	27c8c <__alt_data_end+0xfffe7c8c>
   283e0:	21003fcc 	andi	r4,r4,255
   283e4:	2002361e 	bne	r4,zero,28cc0 <___vfiprintf_internal_r+0x1434>
   283e8:	1801c126 	beq	r3,zero,28af0 <___vfiprintf_internal_r+0x1264>
   283ec:	04800044 	movi	r18,1
   283f0:	d8c01005 	stb	r3,64(sp)
   283f4:	d8001d85 	stb	zero,118(sp)
   283f8:	9027883a 	mov	r19,r18
   283fc:	dd401004 	addi	r21,sp,64
   28400:	003f1106 	br	28048 <__alt_data_end+0xfffe8048>
   28404:	d9402117 	ldw	r5,132(sp)
   28408:	d9002017 	ldw	r4,128(sp)
   2840c:	d9801a04 	addi	r6,sp,104
   28410:	d9c02b15 	stw	r7,172(sp)
   28414:	dbc02a15 	stw	r15,168(sp)
   28418:	00277780 	call	27778 <__sprint_r.part.0>
   2841c:	d9c02b17 	ldw	r7,172(sp)
   28420:	dbc02a17 	ldw	r15,168(sp)
   28424:	10006d1e 	bne	r2,zero,285dc <___vfiprintf_internal_r+0xd50>
   28428:	d9801b17 	ldw	r6,108(sp)
   2842c:	d8801c17 	ldw	r2,112(sp)
   28430:	d811883a 	mov	r8,sp
   28434:	31400044 	addi	r5,r6,1
   28438:	003e3306 	br	27d08 <__alt_data_end+0xfffe7d08>
   2843c:	d9401b17 	ldw	r5,108(sp)
   28440:	d8801c17 	ldw	r2,112(sp)
   28444:	29000044 	addi	r4,r5,1
   28448:	d8c01d87 	ldb	r3,118(sp)
   2844c:	183e4d26 	beq	r3,zero,27d84 <__alt_data_end+0xfffe7d84>
   28450:	00c00044 	movi	r3,1
   28454:	d9401d84 	addi	r5,sp,118
   28458:	10c5883a 	add	r2,r2,r3
   2845c:	41400015 	stw	r5,0(r8)
   28460:	40c00115 	stw	r3,4(r8)
   28464:	d8801c15 	stw	r2,112(sp)
   28468:	d9001b15 	stw	r4,108(sp)
   2846c:	014001c4 	movi	r5,7
   28470:	2900a90e 	bge	r5,r4,28718 <___vfiprintf_internal_r+0xe8c>
   28474:	1000da1e 	bne	r2,zero,287e0 <___vfiprintf_internal_r+0xf54>
   28478:	7000ab1e 	bne	r14,zero,28728 <___vfiprintf_internal_r+0xe9c>
   2847c:	000b883a 	mov	r5,zero
   28480:	1809883a 	mov	r4,r3
   28484:	d811883a 	mov	r8,sp
   28488:	00c02004 	movi	r3,128
   2848c:	e0fe4d26 	beq	fp,r3,27dc4 <__alt_data_end+0xfffe7dc4>
   28490:	4cf9c83a 	sub	fp,r9,r19
   28494:	073e7b0e 	bge	zero,fp,27e84 <__alt_data_end+0xfffe7e84>
   28498:	01c00404 	movi	r7,16
   2849c:	3f01900e 	bge	r7,fp,28ae0 <___vfiprintf_internal_r+0x1254>
   284a0:	00c000f4 	movhi	r3,3
   284a4:	18c0c004 	addi	r3,r3,768
   284a8:	d8c02415 	stw	r3,144(sp)
   284ac:	034001c4 	movi	r13,7
   284b0:	00000506 	br	284c8 <___vfiprintf_internal_r+0xc3c>
   284b4:	29000084 	addi	r4,r5,2
   284b8:	42000204 	addi	r8,r8,8
   284bc:	180b883a 	mov	r5,r3
   284c0:	e73ffc04 	addi	fp,fp,-16
   284c4:	3f000d0e 	bge	r7,fp,284fc <___vfiprintf_internal_r+0xc70>
   284c8:	10800404 	addi	r2,r2,16
   284cc:	28c00044 	addi	r3,r5,1
   284d0:	45c00015 	stw	r23,0(r8)
   284d4:	41c00115 	stw	r7,4(r8)
   284d8:	d8801c15 	stw	r2,112(sp)
   284dc:	d8c01b15 	stw	r3,108(sp)
   284e0:	68fff40e 	bge	r13,r3,284b4 <__alt_data_end+0xfffe84b4>
   284e4:	1000101e 	bne	r2,zero,28528 <___vfiprintf_internal_r+0xc9c>
   284e8:	e73ffc04 	addi	fp,fp,-16
   284ec:	01000044 	movi	r4,1
   284f0:	000b883a 	mov	r5,zero
   284f4:	d811883a 	mov	r8,sp
   284f8:	3f3ff316 	blt	r7,fp,284c8 <__alt_data_end+0xfffe84c8>
   284fc:	da802417 	ldw	r10,144(sp)
   28500:	1705883a 	add	r2,r2,fp
   28504:	47000115 	stw	fp,4(r8)
   28508:	42800015 	stw	r10,0(r8)
   2850c:	d8801c15 	stw	r2,112(sp)
   28510:	d9001b15 	stw	r4,108(sp)
   28514:	00c001c4 	movi	r3,7
   28518:	19003616 	blt	r3,r4,285f4 <___vfiprintf_internal_r+0xd68>
   2851c:	42000204 	addi	r8,r8,8
   28520:	21000044 	addi	r4,r4,1
   28524:	003e5706 	br	27e84 <__alt_data_end+0xfffe7e84>
   28528:	d9402117 	ldw	r5,132(sp)
   2852c:	d9002017 	ldw	r4,128(sp)
   28530:	d9801a04 	addi	r6,sp,104
   28534:	d9c02b15 	stw	r7,172(sp)
   28538:	db402a15 	stw	r13,168(sp)
   2853c:	00277780 	call	27778 <__sprint_r.part.0>
   28540:	d9c02b17 	ldw	r7,172(sp)
   28544:	db402a17 	ldw	r13,168(sp)
   28548:	1000241e 	bne	r2,zero,285dc <___vfiprintf_internal_r+0xd50>
   2854c:	d9401b17 	ldw	r5,108(sp)
   28550:	d8801c17 	ldw	r2,112(sp)
   28554:	d811883a 	mov	r8,sp
   28558:	29000044 	addi	r4,r5,1
   2855c:	003fd806 	br	284c0 <__alt_data_end+0xfffe84c0>
   28560:	d9401b17 	ldw	r5,108(sp)
   28564:	00c000f4 	movhi	r3,3
   28568:	18c0c404 	addi	r3,r3,784
   2856c:	d8c02415 	stw	r3,144(sp)
   28570:	29400044 	addi	r5,r5,1
   28574:	d8c02417 	ldw	r3,144(sp)
   28578:	14c5883a 	add	r2,r2,r19
   2857c:	44c00115 	stw	r19,4(r8)
   28580:	40c00015 	stw	r3,0(r8)
   28584:	d8801c15 	stw	r2,112(sp)
   28588:	d9401b15 	stw	r5,108(sp)
   2858c:	00c001c4 	movi	r3,7
   28590:	1940070e 	bge	r3,r5,285b0 <___vfiprintf_internal_r+0xd24>
   28594:	103e4826 	beq	r2,zero,27eb8 <__alt_data_end+0xfffe7eb8>
   28598:	d9402117 	ldw	r5,132(sp)
   2859c:	d9002017 	ldw	r4,128(sp)
   285a0:	d9801a04 	addi	r6,sp,104
   285a4:	00277780 	call	27778 <__sprint_r.part.0>
   285a8:	10000c1e 	bne	r2,zero,285dc <___vfiprintf_internal_r+0xd50>
   285ac:	d8801c17 	ldw	r2,112(sp)
   285b0:	8c80010e 	bge	r17,r18,285b8 <___vfiprintf_internal_r+0xd2c>
   285b4:	9023883a 	mov	r17,r18
   285b8:	da802317 	ldw	r10,140(sp)
   285bc:	5455883a 	add	r10,r10,r17
   285c0:	da802315 	stw	r10,140(sp)
   285c4:	103e4126 	beq	r2,zero,27ecc <__alt_data_end+0xfffe7ecc>
   285c8:	d9402117 	ldw	r5,132(sp)
   285cc:	d9002017 	ldw	r4,128(sp)
   285d0:	d9801a04 	addi	r6,sp,104
   285d4:	00277780 	call	27778 <__sprint_r.part.0>
   285d8:	103e3c26 	beq	r2,zero,27ecc <__alt_data_end+0xfffe7ecc>
   285dc:	dd002117 	ldw	r20,132(sp)
   285e0:	a080030b 	ldhu	r2,12(r20)
   285e4:	1080100c 	andi	r2,r2,64
   285e8:	1001231e 	bne	r2,zero,28a78 <___vfiprintf_internal_r+0x11ec>
   285ec:	d8802317 	ldw	r2,140(sp)
   285f0:	003d7b06 	br	27be0 <__alt_data_end+0xfffe7be0>
   285f4:	1000991e 	bne	r2,zero,2885c <___vfiprintf_internal_r+0xfd0>
   285f8:	00c00044 	movi	r3,1
   285fc:	9805883a 	mov	r2,r19
   28600:	dd400015 	stw	r21,0(sp)
   28604:	dcc00115 	stw	r19,4(sp)
   28608:	dcc01c15 	stw	r19,112(sp)
   2860c:	d8c01b15 	stw	r3,108(sp)
   28610:	d811883a 	mov	r8,sp
   28614:	42000204 	addi	r8,r8,8
   28618:	a2c0010c 	andi	r11,r20,4
   2861c:	583fe426 	beq	r11,zero,285b0 <__alt_data_end+0xfffe85b0>
   28620:	8ca7c83a 	sub	r19,r17,r18
   28624:	04ffe20e 	bge	zero,r19,285b0 <__alt_data_end+0xfffe85b0>
   28628:	01c00404 	movi	r7,16
   2862c:	3cffcc0e 	bge	r7,r19,28560 <__alt_data_end+0xfffe8560>
   28630:	028000f4 	movhi	r10,3
   28634:	5280c404 	addi	r10,r10,784
   28638:	d9001b17 	ldw	r4,108(sp)
   2863c:	da802415 	stw	r10,144(sp)
   28640:	382b883a 	mov	r21,r7
   28644:	050001c4 	movi	r20,7
   28648:	df002017 	ldw	fp,128(sp)
   2864c:	00000506 	br	28664 <___vfiprintf_internal_r+0xdd8>
   28650:	21400084 	addi	r5,r4,2
   28654:	42000204 	addi	r8,r8,8
   28658:	1809883a 	mov	r4,r3
   2865c:	9cfffc04 	addi	r19,r19,-16
   28660:	acffc40e 	bge	r21,r19,28574 <__alt_data_end+0xfffe8574>
   28664:	10800404 	addi	r2,r2,16
   28668:	20c00044 	addi	r3,r4,1
   2866c:	45800015 	stw	r22,0(r8)
   28670:	45400115 	stw	r21,4(r8)
   28674:	d8801c15 	stw	r2,112(sp)
   28678:	d8c01b15 	stw	r3,108(sp)
   2867c:	a0fff40e 	bge	r20,r3,28650 <__alt_data_end+0xfffe8650>
   28680:	1000041e 	bne	r2,zero,28694 <___vfiprintf_internal_r+0xe08>
   28684:	01400044 	movi	r5,1
   28688:	0009883a 	mov	r4,zero
   2868c:	d811883a 	mov	r8,sp
   28690:	003ff206 	br	2865c <__alt_data_end+0xfffe865c>
   28694:	d9402117 	ldw	r5,132(sp)
   28698:	d9801a04 	addi	r6,sp,104
   2869c:	e009883a 	mov	r4,fp
   286a0:	00277780 	call	27778 <__sprint_r.part.0>
   286a4:	103fcd1e 	bne	r2,zero,285dc <__alt_data_end+0xfffe85dc>
   286a8:	d9001b17 	ldw	r4,108(sp)
   286ac:	d8801c17 	ldw	r2,112(sp)
   286b0:	d811883a 	mov	r8,sp
   286b4:	21400044 	addi	r5,r4,1
   286b8:	003fe806 	br	2865c <__alt_data_end+0xfffe865c>
   286bc:	d9402117 	ldw	r5,132(sp)
   286c0:	d9002017 	ldw	r4,128(sp)
   286c4:	d9801a04 	addi	r6,sp,104
   286c8:	d9c02b15 	stw	r7,172(sp)
   286cc:	db402a15 	stw	r13,168(sp)
   286d0:	00277780 	call	27778 <__sprint_r.part.0>
   286d4:	d9c02b17 	ldw	r7,172(sp)
   286d8:	db402a17 	ldw	r13,168(sp)
   286dc:	103fbf1e 	bne	r2,zero,285dc <__alt_data_end+0xfffe85dc>
   286e0:	d9401b17 	ldw	r5,108(sp)
   286e4:	d8801c17 	ldw	r2,112(sp)
   286e8:	d811883a 	mov	r8,sp
   286ec:	29800044 	addi	r6,r5,1
   286f0:	003dc406 	br	27e04 <__alt_data_end+0xfffe7e04>
   286f4:	1000d21e 	bne	r2,zero,28a40 <___vfiprintf_internal_r+0x11b4>
   286f8:	d8c01d87 	ldb	r3,118(sp)
   286fc:	18009526 	beq	r3,zero,28954 <___vfiprintf_internal_r+0x10c8>
   28700:	00800044 	movi	r2,1
   28704:	d8c01d84 	addi	r3,sp,118
   28708:	1009883a 	mov	r4,r2
   2870c:	d8c00015 	stw	r3,0(sp)
   28710:	d8800115 	stw	r2,4(sp)
   28714:	d811883a 	mov	r8,sp
   28718:	200b883a 	mov	r5,r4
   2871c:	42000204 	addi	r8,r8,8
   28720:	21000044 	addi	r4,r4,1
   28724:	003d9706 	br	27d84 <__alt_data_end+0xfffe7d84>
   28728:	d9001d04 	addi	r4,sp,116
   2872c:	00800084 	movi	r2,2
   28730:	d9000015 	stw	r4,0(sp)
   28734:	d8800115 	stw	r2,4(sp)
   28738:	1809883a 	mov	r4,r3
   2873c:	d811883a 	mov	r8,sp
   28740:	200b883a 	mov	r5,r4
   28744:	42000204 	addi	r8,r8,8
   28748:	21000044 	addi	r4,r4,1
   2874c:	003f4e06 	br	28488 <__alt_data_end+0xfffe8488>
   28750:	d8001d85 	stb	zero,118(sp)
   28754:	48005016 	blt	r9,zero,28898 <___vfiprintf_internal_r+0x100c>
   28758:	00ffdfc4 	movi	r3,-129
   2875c:	94c4b03a 	or	r2,r18,r19
   28760:	a0e8703a 	and	r20,r20,r3
   28764:	103d4426 	beq	r2,zero,27c78 <__alt_data_end+0xfffe7c78>
   28768:	0039883a 	mov	fp,zero
   2876c:	d9002617 	ldw	r4,152(sp)
   28770:	dd401a04 	addi	r21,sp,104
   28774:	908003cc 	andi	r2,r18,15
   28778:	9806973a 	slli	r3,r19,28
   2877c:	2085883a 	add	r2,r4,r2
   28780:	9024d13a 	srli	r18,r18,4
   28784:	10800003 	ldbu	r2,0(r2)
   28788:	9826d13a 	srli	r19,r19,4
   2878c:	ad7fffc4 	addi	r21,r21,-1
   28790:	1ca4b03a 	or	r18,r3,r18
   28794:	a8800005 	stb	r2,0(r21)
   28798:	94c4b03a 	or	r2,r18,r19
   2879c:	103ff51e 	bne	r2,zero,28774 <__alt_data_end+0xfffe8774>
   287a0:	003e5906 	br	28108 <__alt_data_end+0xfffe8108>
   287a4:	d9402117 	ldw	r5,132(sp)
   287a8:	d9002017 	ldw	r4,128(sp)
   287ac:	d9801a04 	addi	r6,sp,104
   287b0:	00277780 	call	27778 <__sprint_r.part.0>
   287b4:	103f891e 	bne	r2,zero,285dc <__alt_data_end+0xfffe85dc>
   287b8:	d8801c17 	ldw	r2,112(sp)
   287bc:	d811883a 	mov	r8,sp
   287c0:	003f9506 	br	28618 <__alt_data_end+0xfffe8618>
   287c4:	d9402117 	ldw	r5,132(sp)
   287c8:	d9002017 	ldw	r4,128(sp)
   287cc:	d9801a04 	addi	r6,sp,104
   287d0:	00277780 	call	27778 <__sprint_r.part.0>
   287d4:	103f811e 	bne	r2,zero,285dc <__alt_data_end+0xfffe85dc>
   287d8:	d811883a 	mov	r8,sp
   287dc:	003ced06 	br	27b94 <__alt_data_end+0xfffe7b94>
   287e0:	d9402117 	ldw	r5,132(sp)
   287e4:	d9002017 	ldw	r4,128(sp)
   287e8:	d9801a04 	addi	r6,sp,104
   287ec:	da402c15 	stw	r9,176(sp)
   287f0:	db802a15 	stw	r14,168(sp)
   287f4:	00277780 	call	27778 <__sprint_r.part.0>
   287f8:	da402c17 	ldw	r9,176(sp)
   287fc:	db802a17 	ldw	r14,168(sp)
   28800:	103f761e 	bne	r2,zero,285dc <__alt_data_end+0xfffe85dc>
   28804:	d9401b17 	ldw	r5,108(sp)
   28808:	d8801c17 	ldw	r2,112(sp)
   2880c:	d811883a 	mov	r8,sp
   28810:	29000044 	addi	r4,r5,1
   28814:	003d5b06 	br	27d84 <__alt_data_end+0xfffe7d84>
   28818:	d9402117 	ldw	r5,132(sp)
   2881c:	d9002017 	ldw	r4,128(sp)
   28820:	d9801a04 	addi	r6,sp,104
   28824:	da402c15 	stw	r9,176(sp)
   28828:	00277780 	call	27778 <__sprint_r.part.0>
   2882c:	da402c17 	ldw	r9,176(sp)
   28830:	103f6a1e 	bne	r2,zero,285dc <__alt_data_end+0xfffe85dc>
   28834:	d9401b17 	ldw	r5,108(sp)
   28838:	d8801c17 	ldw	r2,112(sp)
   2883c:	d811883a 	mov	r8,sp
   28840:	29000044 	addi	r4,r5,1
   28844:	003f1006 	br	28488 <__alt_data_end+0xfffe8488>
   28848:	1000c31e 	bne	r2,zero,28b58 <___vfiprintf_internal_r+0x12cc>
   2884c:	01000044 	movi	r4,1
   28850:	000b883a 	mov	r5,zero
   28854:	d811883a 	mov	r8,sp
   28858:	003f0d06 	br	28490 <__alt_data_end+0xfffe8490>
   2885c:	d9402117 	ldw	r5,132(sp)
   28860:	d9002017 	ldw	r4,128(sp)
   28864:	d9801a04 	addi	r6,sp,104
   28868:	00277780 	call	27778 <__sprint_r.part.0>
   2886c:	103f5b1e 	bne	r2,zero,285dc <__alt_data_end+0xfffe85dc>
   28870:	d9001b17 	ldw	r4,108(sp)
   28874:	d8801c17 	ldw	r2,112(sp)
   28878:	d811883a 	mov	r8,sp
   2887c:	21000044 	addi	r4,r4,1
   28880:	003d8006 	br	27e84 <__alt_data_end+0xfffe7e84>
   28884:	010000f4 	movhi	r4,3
   28888:	21005f04 	addi	r4,r4,380
   2888c:	d9002615 	stw	r4,152(sp)
   28890:	d8c02215 	stw	r3,136(sp)
   28894:	1029883a 	mov	r20,r2
   28898:	94c4b03a 	or	r2,r18,r19
   2889c:	103fb21e 	bne	r2,zero,28768 <__alt_data_end+0xfffe8768>
   288a0:	0039883a 	mov	fp,zero
   288a4:	00800084 	movi	r2,2
   288a8:	003e6b06 	br	28258 <__alt_data_end+0xfffe8258>
   288ac:	da802217 	ldw	r10,136(sp)
   288b0:	d8001d85 	stb	zero,118(sp)
   288b4:	0027883a 	mov	r19,zero
   288b8:	50800104 	addi	r2,r10,4
   288bc:	54800017 	ldw	r18,0(r10)
   288c0:	483e6016 	blt	r9,zero,28244 <__alt_data_end+0xfffe8244>
   288c4:	00ffdfc4 	movi	r3,-129
   288c8:	d8802215 	stw	r2,136(sp)
   288cc:	a0e8703a 	and	r20,r20,r3
   288d0:	0039883a 	mov	fp,zero
   288d4:	903ebb26 	beq	r18,zero,283c4 <__alt_data_end+0xfffe83c4>
   288d8:	00800244 	movi	r2,9
   288dc:	14bdee36 	bltu	r2,r18,28098 <__alt_data_end+0xfffe8098>
   288e0:	003eba06 	br	283cc <__alt_data_end+0xfffe83cc>
   288e4:	00800c04 	movi	r2,48
   288e8:	d8c01d45 	stb	r3,117(sp)
   288ec:	d8801d05 	stb	r2,116(sp)
   288f0:	d8001d85 	stb	zero,118(sp)
   288f4:	a0c00094 	ori	r3,r20,2
   288f8:	4800a916 	blt	r9,zero,28ba0 <___vfiprintf_internal_r+0x1314>
   288fc:	00bfdfc4 	movi	r2,-129
   28900:	a096703a 	and	r11,r20,r2
   28904:	5d000094 	ori	r20,r11,2
   28908:	0039883a 	mov	fp,zero
   2890c:	003f9706 	br	2876c <__alt_data_end+0xfffe876c>
   28910:	8025883a 	mov	r18,r16
   28914:	003c2e06 	br	279d0 <__alt_data_end+0xfffe79d0>
   28918:	008000f4 	movhi	r2,3
   2891c:	10805f04 	addi	r2,r2,380
   28920:	0039883a 	mov	fp,zero
   28924:	d8802615 	stw	r2,152(sp)
   28928:	003f9006 	br	2876c <__alt_data_end+0xfffe876c>
   2892c:	04a5c83a 	sub	r18,zero,r18
   28930:	07000b44 	movi	fp,45
   28934:	9004c03a 	cmpne	r2,r18,zero
   28938:	04e7c83a 	sub	r19,zero,r19
   2893c:	df001d85 	stb	fp,118(sp)
   28940:	98a7c83a 	sub	r19,r19,r2
   28944:	48009f16 	blt	r9,zero,28bc4 <___vfiprintf_internal_r+0x1338>
   28948:	00bfdfc4 	movi	r2,-129
   2894c:	a0a8703a 	and	r20,r20,r2
   28950:	003dd006 	br	28094 <__alt_data_end+0xfffe8094>
   28954:	70004c26 	beq	r14,zero,28a88 <___vfiprintf_internal_r+0x11fc>
   28958:	00800084 	movi	r2,2
   2895c:	d8c01d04 	addi	r3,sp,116
   28960:	d8c00015 	stw	r3,0(sp)
   28964:	d8800115 	stw	r2,4(sp)
   28968:	01000044 	movi	r4,1
   2896c:	d811883a 	mov	r8,sp
   28970:	003f7306 	br	28740 <__alt_data_end+0xfffe8740>
   28974:	a080100c 	andi	r2,r20,64
   28978:	da802217 	ldw	r10,136(sp)
   2897c:	103e0626 	beq	r2,zero,28198 <__alt_data_end+0xfffe8198>
   28980:	5480000f 	ldh	r18,0(r10)
   28984:	52800104 	addi	r10,r10,4
   28988:	da802215 	stw	r10,136(sp)
   2898c:	9027d7fa 	srai	r19,r18,31
   28990:	9805883a 	mov	r2,r19
   28994:	003db806 	br	28078 <__alt_data_end+0xfffe8078>
   28998:	a080040c 	andi	r2,r20,16
   2899c:	1000091e 	bne	r2,zero,289c4 <___vfiprintf_internal_r+0x1138>
   289a0:	a2c0100c 	andi	r11,r20,64
   289a4:	58000726 	beq	r11,zero,289c4 <___vfiprintf_internal_r+0x1138>
   289a8:	da802217 	ldw	r10,136(sp)
   289ac:	50800017 	ldw	r2,0(r10)
   289b0:	52800104 	addi	r10,r10,4
   289b4:	da802215 	stw	r10,136(sp)
   289b8:	da802317 	ldw	r10,140(sp)
   289bc:	1280000d 	sth	r10,0(r2)
   289c0:	003be706 	br	27960 <__alt_data_end+0xfffe7960>
   289c4:	da802217 	ldw	r10,136(sp)
   289c8:	50800017 	ldw	r2,0(r10)
   289cc:	52800104 	addi	r10,r10,4
   289d0:	da802215 	stw	r10,136(sp)
   289d4:	da802317 	ldw	r10,140(sp)
   289d8:	12800015 	stw	r10,0(r2)
   289dc:	003be006 	br	27960 <__alt_data_end+0xfffe7960>
   289e0:	a080100c 	andi	r2,r20,64
   289e4:	da802217 	ldw	r10,136(sp)
   289e8:	10003026 	beq	r2,zero,28aac <___vfiprintf_internal_r+0x1220>
   289ec:	5480000b 	ldhu	r18,0(r10)
   289f0:	52800104 	addi	r10,r10,4
   289f4:	0027883a 	mov	r19,zero
   289f8:	da802215 	stw	r10,136(sp)
   289fc:	003d8006 	br	28000 <__alt_data_end+0xfffe8000>
   28a00:	80c00007 	ldb	r3,0(r16)
   28a04:	003c0006 	br	27a08 <__alt_data_end+0xfffe7a08>
   28a08:	a080100c 	andi	r2,r20,64
   28a0c:	d8001d85 	stb	zero,118(sp)
   28a10:	da802217 	ldw	r10,136(sp)
   28a14:	1000201e 	bne	r2,zero,28a98 <___vfiprintf_internal_r+0x120c>
   28a18:	50800104 	addi	r2,r10,4
   28a1c:	54800017 	ldw	r18,0(r10)
   28a20:	0027883a 	mov	r19,zero
   28a24:	483def0e 	bge	r9,zero,281e4 <__alt_data_end+0xfffe81e4>
   28a28:	94c6b03a 	or	r3,r18,r19
   28a2c:	d8802215 	stw	r2,136(sp)
   28a30:	183d4e1e 	bne	r3,zero,27f6c <__alt_data_end+0xfffe7f6c>
   28a34:	0039883a 	mov	fp,zero
   28a38:	0005883a 	mov	r2,zero
   28a3c:	003e0606 	br	28258 <__alt_data_end+0xfffe8258>
   28a40:	d9402117 	ldw	r5,132(sp)
   28a44:	d9002017 	ldw	r4,128(sp)
   28a48:	d9801a04 	addi	r6,sp,104
   28a4c:	da402c15 	stw	r9,176(sp)
   28a50:	db802a15 	stw	r14,168(sp)
   28a54:	00277780 	call	27778 <__sprint_r.part.0>
   28a58:	da402c17 	ldw	r9,176(sp)
   28a5c:	db802a17 	ldw	r14,168(sp)
   28a60:	103ede1e 	bne	r2,zero,285dc <__alt_data_end+0xfffe85dc>
   28a64:	d9401b17 	ldw	r5,108(sp)
   28a68:	d8801c17 	ldw	r2,112(sp)
   28a6c:	d811883a 	mov	r8,sp
   28a70:	29000044 	addi	r4,r5,1
   28a74:	003e7406 	br	28448 <__alt_data_end+0xfffe8448>
   28a78:	00bfffc4 	movi	r2,-1
   28a7c:	003c5806 	br	27be0 <__alt_data_end+0xfffe7be0>
   28a80:	d811883a 	mov	r8,sp
   28a84:	003ee806 	br	28628 <__alt_data_end+0xfffe8628>
   28a88:	000b883a 	mov	r5,zero
   28a8c:	01000044 	movi	r4,1
   28a90:	d811883a 	mov	r8,sp
   28a94:	003e7c06 	br	28488 <__alt_data_end+0xfffe8488>
   28a98:	50800104 	addi	r2,r10,4
   28a9c:	5480000b 	ldhu	r18,0(r10)
   28aa0:	0027883a 	mov	r19,zero
   28aa4:	483dcf0e 	bge	r9,zero,281e4 <__alt_data_end+0xfffe81e4>
   28aa8:	003fdf06 	br	28a28 <__alt_data_end+0xfffe8a28>
   28aac:	54800017 	ldw	r18,0(r10)
   28ab0:	52800104 	addi	r10,r10,4
   28ab4:	0027883a 	mov	r19,zero
   28ab8:	da802215 	stw	r10,136(sp)
   28abc:	003d5006 	br	28000 <__alt_data_end+0xfffe8000>
   28ac0:	50800104 	addi	r2,r10,4
   28ac4:	5480000b 	ldhu	r18,0(r10)
   28ac8:	0027883a 	mov	r19,zero
   28acc:	483f7d0e 	bge	r9,zero,288c4 <__alt_data_end+0xfffe88c4>
   28ad0:	003ddc06 	br	28244 <__alt_data_end+0xfffe8244>
   28ad4:	d8c02215 	stw	r3,136(sp)
   28ad8:	0039883a 	mov	fp,zero
   28adc:	003ddb06 	br	2824c <__alt_data_end+0xfffe824c>
   28ae0:	028000f4 	movhi	r10,3
   28ae4:	5280c004 	addi	r10,r10,768
   28ae8:	da802415 	stw	r10,144(sp)
   28aec:	003e8306 	br	284fc <__alt_data_end+0xfffe84fc>
   28af0:	d8801c17 	ldw	r2,112(sp)
   28af4:	dd002117 	ldw	r20,132(sp)
   28af8:	103eb926 	beq	r2,zero,285e0 <__alt_data_end+0xfffe85e0>
   28afc:	d9002017 	ldw	r4,128(sp)
   28b00:	d9801a04 	addi	r6,sp,104
   28b04:	a00b883a 	mov	r5,r20
   28b08:	00277780 	call	27778 <__sprint_r.part.0>
   28b0c:	003eb406 	br	285e0 <__alt_data_end+0xfffe85e0>
   28b10:	80c00043 	ldbu	r3,1(r16)
   28b14:	a5000814 	ori	r20,r20,32
   28b18:	84000044 	addi	r16,r16,1
   28b1c:	18c03fcc 	andi	r3,r3,255
   28b20:	18c0201c 	xori	r3,r3,128
   28b24:	18ffe004 	addi	r3,r3,-128
   28b28:	003bb706 	br	27a08 <__alt_data_end+0xfffe7a08>
   28b2c:	a809883a 	mov	r4,r21
   28b30:	d8c02a15 	stw	r3,168(sp)
   28b34:	da002b15 	stw	r8,172(sp)
   28b38:	00276e00 	call	276e0 <strlen>
   28b3c:	d8c02a17 	ldw	r3,168(sp)
   28b40:	1027883a 	mov	r19,r2
   28b44:	df001d83 	ldbu	fp,118(sp)
   28b48:	d8c02215 	stw	r3,136(sp)
   28b4c:	0013883a 	mov	r9,zero
   28b50:	da002b17 	ldw	r8,172(sp)
   28b54:	003c4d06 	br	27c8c <__alt_data_end+0xfffe7c8c>
   28b58:	d9402117 	ldw	r5,132(sp)
   28b5c:	d9002017 	ldw	r4,128(sp)
   28b60:	d9801a04 	addi	r6,sp,104
   28b64:	da402c15 	stw	r9,176(sp)
   28b68:	00277780 	call	27778 <__sprint_r.part.0>
   28b6c:	da402c17 	ldw	r9,176(sp)
   28b70:	103e9a1e 	bne	r2,zero,285dc <__alt_data_end+0xfffe85dc>
   28b74:	d9401b17 	ldw	r5,108(sp)
   28b78:	d8801c17 	ldw	r2,112(sp)
   28b7c:	d811883a 	mov	r8,sp
   28b80:	29000044 	addi	r4,r5,1
   28b84:	003e4206 	br	28490 <__alt_data_end+0xfffe8490>
   28b88:	d9401b17 	ldw	r5,108(sp)
   28b8c:	010000f4 	movhi	r4,3
   28b90:	2100c404 	addi	r4,r4,784
   28b94:	d9002415 	stw	r4,144(sp)
   28b98:	29400044 	addi	r5,r5,1
   28b9c:	003c6d06 	br	27d54 <__alt_data_end+0xfffe7d54>
   28ba0:	0039883a 	mov	fp,zero
   28ba4:	00800084 	movi	r2,2
   28ba8:	10803fcc 	andi	r2,r2,255
   28bac:	01000044 	movi	r4,1
   28bb0:	11001e26 	beq	r2,r4,28c2c <___vfiprintf_internal_r+0x13a0>
   28bb4:	01000084 	movi	r4,2
   28bb8:	11001e1e 	bne	r2,r4,28c34 <___vfiprintf_internal_r+0x13a8>
   28bbc:	1829883a 	mov	r20,r3
   28bc0:	003eea06 	br	2876c <__alt_data_end+0xfffe876c>
   28bc4:	a007883a 	mov	r3,r20
   28bc8:	00800044 	movi	r2,1
   28bcc:	003ff606 	br	28ba8 <__alt_data_end+0xfffe8ba8>
   28bd0:	00800184 	movi	r2,6
   28bd4:	1240012e 	bgeu	r2,r9,28bdc <___vfiprintf_internal_r+0x1350>
   28bd8:	1013883a 	mov	r9,r2
   28bdc:	4827883a 	mov	r19,r9
   28be0:	4825883a 	mov	r18,r9
   28be4:	48001516 	blt	r9,zero,28c3c <___vfiprintf_internal_r+0x13b0>
   28be8:	054000f4 	movhi	r21,3
   28bec:	d8c02215 	stw	r3,136(sp)
   28bf0:	ad406404 	addi	r21,r21,400
   28bf4:	003d1406 	br	28048 <__alt_data_end+0xfffe8048>
   28bf8:	028000f4 	movhi	r10,3
   28bfc:	5280c004 	addi	r10,r10,768
   28c00:	da802415 	stw	r10,144(sp)
   28c04:	200d883a 	mov	r6,r4
   28c08:	003c9106 	br	27e50 <__alt_data_end+0xfffe7e50>
   28c0c:	5021883a 	mov	r16,r10
   28c10:	0013883a 	mov	r9,zero
   28c14:	003b7d06 	br	27a0c <__alt_data_end+0xfffe7a0c>
   28c18:	4827883a 	mov	r19,r9
   28c1c:	df001d83 	ldbu	fp,118(sp)
   28c20:	d8c02215 	stw	r3,136(sp)
   28c24:	0013883a 	mov	r9,zero
   28c28:	003c1806 	br	27c8c <__alt_data_end+0xfffe7c8c>
   28c2c:	1829883a 	mov	r20,r3
   28c30:	003d1806 	br	28094 <__alt_data_end+0xfffe8094>
   28c34:	1829883a 	mov	r20,r3
   28c38:	003ccd06 	br	27f70 <__alt_data_end+0xfffe7f70>
   28c3c:	0025883a 	mov	r18,zero
   28c40:	003fe906 	br	28be8 <__alt_data_end+0xfffe8be8>
   28c44:	d8802217 	ldw	r2,136(sp)
   28c48:	80c00043 	ldbu	r3,1(r16)
   28c4c:	5021883a 	mov	r16,r10
   28c50:	12400017 	ldw	r9,0(r2)
   28c54:	10800104 	addi	r2,r2,4
   28c58:	d8802215 	stw	r2,136(sp)
   28c5c:	483faf0e 	bge	r9,zero,28b1c <__alt_data_end+0xfffe8b1c>
   28c60:	18c03fcc 	andi	r3,r3,255
   28c64:	18c0201c 	xori	r3,r3,128
   28c68:	027fffc4 	movi	r9,-1
   28c6c:	18ffe004 	addi	r3,r3,-128
   28c70:	003b6506 	br	27a08 <__alt_data_end+0xfffe7a08>
   28c74:	d9c01d85 	stb	r7,118(sp)
   28c78:	003ca006 	br	27efc <__alt_data_end+0xfffe7efc>
   28c7c:	d9c01d85 	stb	r7,118(sp)
   28c80:	003cad06 	br	27f38 <__alt_data_end+0xfffe7f38>
   28c84:	d9c01d85 	stb	r7,118(sp)
   28c88:	003d7d06 	br	28280 <__alt_data_end+0xfffe8280>
   28c8c:	d9c01d85 	stb	r7,118(sp)
   28c90:	003d5f06 	br	28210 <__alt_data_end+0xfffe8210>
   28c94:	a080004c 	andi	r2,r20,1
   28c98:	0039883a 	mov	fp,zero
   28c9c:	10000526 	beq	r2,zero,28cb4 <___vfiprintf_internal_r+0x1428>
   28ca0:	00800c04 	movi	r2,48
   28ca4:	d88019c5 	stb	r2,103(sp)
   28ca8:	dcc02717 	ldw	r19,156(sp)
   28cac:	dd4019c4 	addi	r21,sp,103
   28cb0:	003bf606 	br	27c8c <__alt_data_end+0xfffe7c8c>
   28cb4:	0027883a 	mov	r19,zero
   28cb8:	dd401a04 	addi	r21,sp,104
   28cbc:	003bf306 	br	27c8c <__alt_data_end+0xfffe7c8c>
   28cc0:	d9c01d85 	stb	r7,118(sp)
   28cc4:	003dc806 	br	283e8 <__alt_data_end+0xfffe83e8>
   28cc8:	d9c01d85 	stb	r7,118(sp)
   28ccc:	003d3a06 	br	281b8 <__alt_data_end+0xfffe81b8>
   28cd0:	d9c01d85 	stb	r7,118(sp)
   28cd4:	003d2a06 	br	28180 <__alt_data_end+0xfffe8180>
   28cd8:	d9c01d85 	stb	r7,118(sp)
   28cdc:	003cde06 	br	28058 <__alt_data_end+0xfffe8058>
   28ce0:	d9c01d85 	stb	r7,118(sp)
   28ce4:	003cbc06 	br	27fd8 <__alt_data_end+0xfffe7fd8>

00028ce8 <__vfiprintf_internal>:
   28ce8:	008000f4 	movhi	r2,3
   28cec:	1087c104 	addi	r2,r2,7940
   28cf0:	300f883a 	mov	r7,r6
   28cf4:	280d883a 	mov	r6,r5
   28cf8:	200b883a 	mov	r5,r4
   28cfc:	11000017 	ldw	r4,0(r2)
   28d00:	002788c1 	jmpi	2788c <___vfiprintf_internal_r>

00028d04 <__sbprintf>:
   28d04:	2880030b 	ldhu	r2,12(r5)
   28d08:	2ac01917 	ldw	r11,100(r5)
   28d0c:	2a80038b 	ldhu	r10,14(r5)
   28d10:	2a400717 	ldw	r9,28(r5)
   28d14:	2a000917 	ldw	r8,36(r5)
   28d18:	defee204 	addi	sp,sp,-1144
   28d1c:	00c10004 	movi	r3,1024
   28d20:	dc011a15 	stw	r16,1128(sp)
   28d24:	10bfff4c 	andi	r2,r2,65533
   28d28:	2821883a 	mov	r16,r5
   28d2c:	d8cb883a 	add	r5,sp,r3
   28d30:	dc811c15 	stw	r18,1136(sp)
   28d34:	dc411b15 	stw	r17,1132(sp)
   28d38:	dfc11d15 	stw	ra,1140(sp)
   28d3c:	2025883a 	mov	r18,r4
   28d40:	d881030d 	sth	r2,1036(sp)
   28d44:	dac11915 	stw	r11,1124(sp)
   28d48:	da81038d 	sth	r10,1038(sp)
   28d4c:	da410715 	stw	r9,1052(sp)
   28d50:	da010915 	stw	r8,1060(sp)
   28d54:	dec10015 	stw	sp,1024(sp)
   28d58:	dec10415 	stw	sp,1040(sp)
   28d5c:	d8c10215 	stw	r3,1032(sp)
   28d60:	d8c10515 	stw	r3,1044(sp)
   28d64:	d8010615 	stw	zero,1048(sp)
   28d68:	002788c0 	call	2788c <___vfiprintf_internal_r>
   28d6c:	1023883a 	mov	r17,r2
   28d70:	10000416 	blt	r2,zero,28d84 <__sbprintf+0x80>
   28d74:	d9410004 	addi	r5,sp,1024
   28d78:	9009883a 	mov	r4,r18
   28d7c:	0024c240 	call	24c24 <_fflush_r>
   28d80:	10000d1e 	bne	r2,zero,28db8 <__sbprintf+0xb4>
   28d84:	d881030b 	ldhu	r2,1036(sp)
   28d88:	1080100c 	andi	r2,r2,64
   28d8c:	10000326 	beq	r2,zero,28d9c <__sbprintf+0x98>
   28d90:	8080030b 	ldhu	r2,12(r16)
   28d94:	10801014 	ori	r2,r2,64
   28d98:	8080030d 	sth	r2,12(r16)
   28d9c:	8805883a 	mov	r2,r17
   28da0:	dfc11d17 	ldw	ra,1140(sp)
   28da4:	dc811c17 	ldw	r18,1136(sp)
   28da8:	dc411b17 	ldw	r17,1132(sp)
   28dac:	dc011a17 	ldw	r16,1128(sp)
   28db0:	dec11e04 	addi	sp,sp,1144
   28db4:	f800283a 	ret
   28db8:	047fffc4 	movi	r17,-1
   28dbc:	003ff106 	br	28d84 <__alt_data_end+0xfffe8d84>

00028dc0 <_write_r>:
   28dc0:	defffd04 	addi	sp,sp,-12
   28dc4:	2805883a 	mov	r2,r5
   28dc8:	dc000015 	stw	r16,0(sp)
   28dcc:	040000f4 	movhi	r16,3
   28dd0:	dc400115 	stw	r17,4(sp)
   28dd4:	300b883a 	mov	r5,r6
   28dd8:	840e9404 	addi	r16,r16,14928
   28ddc:	2023883a 	mov	r17,r4
   28de0:	380d883a 	mov	r6,r7
   28de4:	1009883a 	mov	r4,r2
   28de8:	dfc00215 	stw	ra,8(sp)
   28dec:	80000015 	stw	zero,0(r16)
   28df0:	002e0dc0 	call	2e0dc <write>
   28df4:	00ffffc4 	movi	r3,-1
   28df8:	10c00526 	beq	r2,r3,28e10 <_write_r+0x50>
   28dfc:	dfc00217 	ldw	ra,8(sp)
   28e00:	dc400117 	ldw	r17,4(sp)
   28e04:	dc000017 	ldw	r16,0(sp)
   28e08:	dec00304 	addi	sp,sp,12
   28e0c:	f800283a 	ret
   28e10:	80c00017 	ldw	r3,0(r16)
   28e14:	183ff926 	beq	r3,zero,28dfc <__alt_data_end+0xfffe8dfc>
   28e18:	88c00015 	stw	r3,0(r17)
   28e1c:	003ff706 	br	28dfc <__alt_data_end+0xfffe8dfc>

00028e20 <_close_r>:
   28e20:	defffd04 	addi	sp,sp,-12
   28e24:	dc000015 	stw	r16,0(sp)
   28e28:	040000f4 	movhi	r16,3
   28e2c:	dc400115 	stw	r17,4(sp)
   28e30:	840e9404 	addi	r16,r16,14928
   28e34:	2023883a 	mov	r17,r4
   28e38:	2809883a 	mov	r4,r5
   28e3c:	dfc00215 	stw	ra,8(sp)
   28e40:	80000015 	stw	zero,0(r16)
   28e44:	002d3c40 	call	2d3c4 <close>
   28e48:	00ffffc4 	movi	r3,-1
   28e4c:	10c00526 	beq	r2,r3,28e64 <_close_r+0x44>
   28e50:	dfc00217 	ldw	ra,8(sp)
   28e54:	dc400117 	ldw	r17,4(sp)
   28e58:	dc000017 	ldw	r16,0(sp)
   28e5c:	dec00304 	addi	sp,sp,12
   28e60:	f800283a 	ret
   28e64:	80c00017 	ldw	r3,0(r16)
   28e68:	183ff926 	beq	r3,zero,28e50 <__alt_data_end+0xfffe8e50>
   28e6c:	88c00015 	stw	r3,0(r17)
   28e70:	003ff706 	br	28e50 <__alt_data_end+0xfffe8e50>

00028e74 <_calloc_r>:
   28e74:	298b383a 	mul	r5,r5,r6
   28e78:	defffe04 	addi	sp,sp,-8
   28e7c:	dfc00115 	stw	ra,4(sp)
   28e80:	dc000015 	stw	r16,0(sp)
   28e84:	00258a40 	call	258a4 <_malloc_r>
   28e88:	10002926 	beq	r2,zero,28f30 <_calloc_r+0xbc>
   28e8c:	11bfff17 	ldw	r6,-4(r2)
   28e90:	1021883a 	mov	r16,r2
   28e94:	00bfff04 	movi	r2,-4
   28e98:	308c703a 	and	r6,r6,r2
   28e9c:	00c00904 	movi	r3,36
   28ea0:	308d883a 	add	r6,r6,r2
   28ea4:	19801636 	bltu	r3,r6,28f00 <_calloc_r+0x8c>
   28ea8:	008004c4 	movi	r2,19
   28eac:	11800b2e 	bgeu	r2,r6,28edc <_calloc_r+0x68>
   28eb0:	80000015 	stw	zero,0(r16)
   28eb4:	80000115 	stw	zero,4(r16)
   28eb8:	008006c4 	movi	r2,27
   28ebc:	11801a2e 	bgeu	r2,r6,28f28 <_calloc_r+0xb4>
   28ec0:	80000215 	stw	zero,8(r16)
   28ec4:	80000315 	stw	zero,12(r16)
   28ec8:	30c0151e 	bne	r6,r3,28f20 <_calloc_r+0xac>
   28ecc:	80000415 	stw	zero,16(r16)
   28ed0:	80800604 	addi	r2,r16,24
   28ed4:	80000515 	stw	zero,20(r16)
   28ed8:	00000106 	br	28ee0 <_calloc_r+0x6c>
   28edc:	8005883a 	mov	r2,r16
   28ee0:	10000015 	stw	zero,0(r2)
   28ee4:	10000115 	stw	zero,4(r2)
   28ee8:	10000215 	stw	zero,8(r2)
   28eec:	8005883a 	mov	r2,r16
   28ef0:	dfc00117 	ldw	ra,4(sp)
   28ef4:	dc000017 	ldw	r16,0(sp)
   28ef8:	dec00204 	addi	sp,sp,8
   28efc:	f800283a 	ret
   28f00:	000b883a 	mov	r5,zero
   28f04:	8009883a 	mov	r4,r16
   28f08:	00262dc0 	call	262dc <memset>
   28f0c:	8005883a 	mov	r2,r16
   28f10:	dfc00117 	ldw	ra,4(sp)
   28f14:	dc000017 	ldw	r16,0(sp)
   28f18:	dec00204 	addi	sp,sp,8
   28f1c:	f800283a 	ret
   28f20:	80800404 	addi	r2,r16,16
   28f24:	003fee06 	br	28ee0 <__alt_data_end+0xfffe8ee0>
   28f28:	80800204 	addi	r2,r16,8
   28f2c:	003fec06 	br	28ee0 <__alt_data_end+0xfffe8ee0>
   28f30:	0005883a 	mov	r2,zero
   28f34:	003fee06 	br	28ef0 <__alt_data_end+0xfffe8ef0>

00028f38 <_fclose_r>:
   28f38:	28003926 	beq	r5,zero,29020 <_fclose_r+0xe8>
   28f3c:	defffc04 	addi	sp,sp,-16
   28f40:	dc400115 	stw	r17,4(sp)
   28f44:	dc000015 	stw	r16,0(sp)
   28f48:	dfc00315 	stw	ra,12(sp)
   28f4c:	dc800215 	stw	r18,8(sp)
   28f50:	2023883a 	mov	r17,r4
   28f54:	2821883a 	mov	r16,r5
   28f58:	20000226 	beq	r4,zero,28f64 <_fclose_r+0x2c>
   28f5c:	20800e17 	ldw	r2,56(r4)
   28f60:	10002726 	beq	r2,zero,29000 <_fclose_r+0xc8>
   28f64:	8080030f 	ldh	r2,12(r16)
   28f68:	1000071e 	bne	r2,zero,28f88 <_fclose_r+0x50>
   28f6c:	0005883a 	mov	r2,zero
   28f70:	dfc00317 	ldw	ra,12(sp)
   28f74:	dc800217 	ldw	r18,8(sp)
   28f78:	dc400117 	ldw	r17,4(sp)
   28f7c:	dc000017 	ldw	r16,0(sp)
   28f80:	dec00404 	addi	sp,sp,16
   28f84:	f800283a 	ret
   28f88:	800b883a 	mov	r5,r16
   28f8c:	8809883a 	mov	r4,r17
   28f90:	0024a080 	call	24a08 <__sflush_r>
   28f94:	1025883a 	mov	r18,r2
   28f98:	80800b17 	ldw	r2,44(r16)
   28f9c:	10000426 	beq	r2,zero,28fb0 <_fclose_r+0x78>
   28fa0:	81400717 	ldw	r5,28(r16)
   28fa4:	8809883a 	mov	r4,r17
   28fa8:	103ee83a 	callr	r2
   28fac:	10001616 	blt	r2,zero,29008 <_fclose_r+0xd0>
   28fb0:	8080030b 	ldhu	r2,12(r16)
   28fb4:	1080200c 	andi	r2,r2,128
   28fb8:	1000151e 	bne	r2,zero,29010 <_fclose_r+0xd8>
   28fbc:	81400c17 	ldw	r5,48(r16)
   28fc0:	28000526 	beq	r5,zero,28fd8 <_fclose_r+0xa0>
   28fc4:	80801004 	addi	r2,r16,64
   28fc8:	28800226 	beq	r5,r2,28fd4 <_fclose_r+0x9c>
   28fcc:	8809883a 	mov	r4,r17
   28fd0:	00251740 	call	25174 <_free_r>
   28fd4:	80000c15 	stw	zero,48(r16)
   28fd8:	81401117 	ldw	r5,68(r16)
   28fdc:	28000326 	beq	r5,zero,28fec <_fclose_r+0xb4>
   28fe0:	8809883a 	mov	r4,r17
   28fe4:	00251740 	call	25174 <_free_r>
   28fe8:	80001115 	stw	zero,68(r16)
   28fec:	00250100 	call	25010 <__sfp_lock_acquire>
   28ff0:	8000030d 	sth	zero,12(r16)
   28ff4:	00250140 	call	25014 <__sfp_lock_release>
   28ff8:	9005883a 	mov	r2,r18
   28ffc:	003fdc06 	br	28f70 <__alt_data_end+0xfffe8f70>
   29000:	00250000 	call	25000 <__sinit>
   29004:	003fd706 	br	28f64 <__alt_data_end+0xfffe8f64>
   29008:	04bfffc4 	movi	r18,-1
   2900c:	003fe806 	br	28fb0 <__alt_data_end+0xfffe8fb0>
   29010:	81400417 	ldw	r5,16(r16)
   29014:	8809883a 	mov	r4,r17
   29018:	00251740 	call	25174 <_free_r>
   2901c:	003fe706 	br	28fbc <__alt_data_end+0xfffe8fbc>
   29020:	0005883a 	mov	r2,zero
   29024:	f800283a 	ret

00029028 <fclose>:
   29028:	008000f4 	movhi	r2,3
   2902c:	1087c104 	addi	r2,r2,7940
   29030:	200b883a 	mov	r5,r4
   29034:	11000017 	ldw	r4,0(r2)
   29038:	0028f381 	jmpi	28f38 <_fclose_r>

0002903c <__fputwc>:
   2903c:	defff804 	addi	sp,sp,-32
   29040:	dcc00415 	stw	r19,16(sp)
   29044:	dc800315 	stw	r18,12(sp)
   29048:	dc000115 	stw	r16,4(sp)
   2904c:	dfc00715 	stw	ra,28(sp)
   29050:	dd400615 	stw	r21,24(sp)
   29054:	dd000515 	stw	r20,20(sp)
   29058:	dc400215 	stw	r17,8(sp)
   2905c:	2027883a 	mov	r19,r4
   29060:	2825883a 	mov	r18,r5
   29064:	3021883a 	mov	r16,r6
   29068:	00256940 	call	25694 <__locale_mb_cur_max>
   2906c:	00c00044 	movi	r3,1
   29070:	10c03e26 	beq	r2,r3,2916c <__fputwc+0x130>
   29074:	81c01704 	addi	r7,r16,92
   29078:	900d883a 	mov	r6,r18
   2907c:	d80b883a 	mov	r5,sp
   29080:	9809883a 	mov	r4,r19
   29084:	002a0880 	call	2a088 <_wcrtomb_r>
   29088:	1029883a 	mov	r20,r2
   2908c:	00bfffc4 	movi	r2,-1
   29090:	a0802026 	beq	r20,r2,29114 <__fputwc+0xd8>
   29094:	d9400003 	ldbu	r5,0(sp)
   29098:	a0001c26 	beq	r20,zero,2910c <__fputwc+0xd0>
   2909c:	0023883a 	mov	r17,zero
   290a0:	05400284 	movi	r21,10
   290a4:	00000906 	br	290cc <__fputwc+0x90>
   290a8:	80800017 	ldw	r2,0(r16)
   290ac:	11400005 	stb	r5,0(r2)
   290b0:	80c00017 	ldw	r3,0(r16)
   290b4:	18c00044 	addi	r3,r3,1
   290b8:	80c00015 	stw	r3,0(r16)
   290bc:	8c400044 	addi	r17,r17,1
   290c0:	dc45883a 	add	r2,sp,r17
   290c4:	8d00112e 	bgeu	r17,r20,2910c <__fputwc+0xd0>
   290c8:	11400003 	ldbu	r5,0(r2)
   290cc:	80c00217 	ldw	r3,8(r16)
   290d0:	18ffffc4 	addi	r3,r3,-1
   290d4:	80c00215 	stw	r3,8(r16)
   290d8:	183ff30e 	bge	r3,zero,290a8 <__alt_data_end+0xfffe90a8>
   290dc:	80800617 	ldw	r2,24(r16)
   290e0:	18801916 	blt	r3,r2,29148 <__fputwc+0x10c>
   290e4:	80800017 	ldw	r2,0(r16)
   290e8:	11400005 	stb	r5,0(r2)
   290ec:	80800017 	ldw	r2,0(r16)
   290f0:	10c00003 	ldbu	r3,0(r2)
   290f4:	10800044 	addi	r2,r2,1
   290f8:	1d402326 	beq	r3,r21,29188 <__fputwc+0x14c>
   290fc:	80800015 	stw	r2,0(r16)
   29100:	8c400044 	addi	r17,r17,1
   29104:	dc45883a 	add	r2,sp,r17
   29108:	8d3fef36 	bltu	r17,r20,290c8 <__alt_data_end+0xfffe90c8>
   2910c:	9005883a 	mov	r2,r18
   29110:	00000406 	br	29124 <__fputwc+0xe8>
   29114:	80c0030b 	ldhu	r3,12(r16)
   29118:	a005883a 	mov	r2,r20
   2911c:	18c01014 	ori	r3,r3,64
   29120:	80c0030d 	sth	r3,12(r16)
   29124:	dfc00717 	ldw	ra,28(sp)
   29128:	dd400617 	ldw	r21,24(sp)
   2912c:	dd000517 	ldw	r20,20(sp)
   29130:	dcc00417 	ldw	r19,16(sp)
   29134:	dc800317 	ldw	r18,12(sp)
   29138:	dc400217 	ldw	r17,8(sp)
   2913c:	dc000117 	ldw	r16,4(sp)
   29140:	dec00804 	addi	sp,sp,32
   29144:	f800283a 	ret
   29148:	800d883a 	mov	r6,r16
   2914c:	29403fcc 	andi	r5,r5,255
   29150:	9809883a 	mov	r4,r19
   29154:	0029f300 	call	29f30 <__swbuf_r>
   29158:	10bfffe0 	cmpeqi	r2,r2,-1
   2915c:	10803fcc 	andi	r2,r2,255
   29160:	103fd626 	beq	r2,zero,290bc <__alt_data_end+0xfffe90bc>
   29164:	00bfffc4 	movi	r2,-1
   29168:	003fee06 	br	29124 <__alt_data_end+0xfffe9124>
   2916c:	90ffffc4 	addi	r3,r18,-1
   29170:	01003f84 	movi	r4,254
   29174:	20ffbf36 	bltu	r4,r3,29074 <__alt_data_end+0xfffe9074>
   29178:	900b883a 	mov	r5,r18
   2917c:	dc800005 	stb	r18,0(sp)
   29180:	1029883a 	mov	r20,r2
   29184:	003fc506 	br	2909c <__alt_data_end+0xfffe909c>
   29188:	800d883a 	mov	r6,r16
   2918c:	a80b883a 	mov	r5,r21
   29190:	9809883a 	mov	r4,r19
   29194:	0029f300 	call	29f30 <__swbuf_r>
   29198:	10bfffe0 	cmpeqi	r2,r2,-1
   2919c:	003fef06 	br	2915c <__alt_data_end+0xfffe915c>

000291a0 <_fputwc_r>:
   291a0:	3080030b 	ldhu	r2,12(r6)
   291a4:	10c8000c 	andi	r3,r2,8192
   291a8:	1800051e 	bne	r3,zero,291c0 <_fputwc_r+0x20>
   291ac:	30c01917 	ldw	r3,100(r6)
   291b0:	10880014 	ori	r2,r2,8192
   291b4:	3080030d 	sth	r2,12(r6)
   291b8:	18880014 	ori	r2,r3,8192
   291bc:	30801915 	stw	r2,100(r6)
   291c0:	002903c1 	jmpi	2903c <__fputwc>

000291c4 <fputwc>:
   291c4:	008000f4 	movhi	r2,3
   291c8:	defffc04 	addi	sp,sp,-16
   291cc:	1087c104 	addi	r2,r2,7940
   291d0:	dc000115 	stw	r16,4(sp)
   291d4:	14000017 	ldw	r16,0(r2)
   291d8:	dc400215 	stw	r17,8(sp)
   291dc:	dfc00315 	stw	ra,12(sp)
   291e0:	2023883a 	mov	r17,r4
   291e4:	80000226 	beq	r16,zero,291f0 <fputwc+0x2c>
   291e8:	80800e17 	ldw	r2,56(r16)
   291ec:	10001026 	beq	r2,zero,29230 <fputwc+0x6c>
   291f0:	2880030b 	ldhu	r2,12(r5)
   291f4:	10c8000c 	andi	r3,r2,8192
   291f8:	1800051e 	bne	r3,zero,29210 <fputwc+0x4c>
   291fc:	28c01917 	ldw	r3,100(r5)
   29200:	10880014 	ori	r2,r2,8192
   29204:	2880030d 	sth	r2,12(r5)
   29208:	18880014 	ori	r2,r3,8192
   2920c:	28801915 	stw	r2,100(r5)
   29210:	280d883a 	mov	r6,r5
   29214:	8009883a 	mov	r4,r16
   29218:	880b883a 	mov	r5,r17
   2921c:	dfc00317 	ldw	ra,12(sp)
   29220:	dc400217 	ldw	r17,8(sp)
   29224:	dc000117 	ldw	r16,4(sp)
   29228:	dec00404 	addi	sp,sp,16
   2922c:	002903c1 	jmpi	2903c <__fputwc>
   29230:	8009883a 	mov	r4,r16
   29234:	d9400015 	stw	r5,0(sp)
   29238:	00250000 	call	25000 <__sinit>
   2923c:	d9400017 	ldw	r5,0(sp)
   29240:	003feb06 	br	291f0 <__alt_data_end+0xfffe91f0>

00029244 <_fstat_r>:
   29244:	defffd04 	addi	sp,sp,-12
   29248:	2805883a 	mov	r2,r5
   2924c:	dc000015 	stw	r16,0(sp)
   29250:	040000f4 	movhi	r16,3
   29254:	dc400115 	stw	r17,4(sp)
   29258:	840e9404 	addi	r16,r16,14928
   2925c:	2023883a 	mov	r17,r4
   29260:	300b883a 	mov	r5,r6
   29264:	1009883a 	mov	r4,r2
   29268:	dfc00215 	stw	ra,8(sp)
   2926c:	80000015 	stw	zero,0(r16)
   29270:	002d4fc0 	call	2d4fc <fstat>
   29274:	00ffffc4 	movi	r3,-1
   29278:	10c00526 	beq	r2,r3,29290 <_fstat_r+0x4c>
   2927c:	dfc00217 	ldw	ra,8(sp)
   29280:	dc400117 	ldw	r17,4(sp)
   29284:	dc000017 	ldw	r16,0(sp)
   29288:	dec00304 	addi	sp,sp,12
   2928c:	f800283a 	ret
   29290:	80c00017 	ldw	r3,0(r16)
   29294:	183ff926 	beq	r3,zero,2927c <__alt_data_end+0xfffe927c>
   29298:	88c00015 	stw	r3,0(r17)
   2929c:	003ff706 	br	2927c <__alt_data_end+0xfffe927c>

000292a0 <__sfvwrite_r>:
   292a0:	30800217 	ldw	r2,8(r6)
   292a4:	10006726 	beq	r2,zero,29444 <__sfvwrite_r+0x1a4>
   292a8:	28c0030b 	ldhu	r3,12(r5)
   292ac:	defff404 	addi	sp,sp,-48
   292b0:	dd400715 	stw	r21,28(sp)
   292b4:	dd000615 	stw	r20,24(sp)
   292b8:	dc000215 	stw	r16,8(sp)
   292bc:	dfc00b15 	stw	ra,44(sp)
   292c0:	df000a15 	stw	fp,40(sp)
   292c4:	ddc00915 	stw	r23,36(sp)
   292c8:	dd800815 	stw	r22,32(sp)
   292cc:	dcc00515 	stw	r19,20(sp)
   292d0:	dc800415 	stw	r18,16(sp)
   292d4:	dc400315 	stw	r17,12(sp)
   292d8:	1880020c 	andi	r2,r3,8
   292dc:	2821883a 	mov	r16,r5
   292e0:	202b883a 	mov	r21,r4
   292e4:	3029883a 	mov	r20,r6
   292e8:	10002726 	beq	r2,zero,29388 <__sfvwrite_r+0xe8>
   292ec:	28800417 	ldw	r2,16(r5)
   292f0:	10002526 	beq	r2,zero,29388 <__sfvwrite_r+0xe8>
   292f4:	1880008c 	andi	r2,r3,2
   292f8:	a4400017 	ldw	r17,0(r20)
   292fc:	10002a26 	beq	r2,zero,293a8 <__sfvwrite_r+0x108>
   29300:	05a00034 	movhi	r22,32768
   29304:	0027883a 	mov	r19,zero
   29308:	0025883a 	mov	r18,zero
   2930c:	b5bf0004 	addi	r22,r22,-1024
   29310:	980d883a 	mov	r6,r19
   29314:	a809883a 	mov	r4,r21
   29318:	90004626 	beq	r18,zero,29434 <__sfvwrite_r+0x194>
   2931c:	900f883a 	mov	r7,r18
   29320:	b480022e 	bgeu	r22,r18,2932c <__sfvwrite_r+0x8c>
   29324:	01e00034 	movhi	r7,32768
   29328:	39ff0004 	addi	r7,r7,-1024
   2932c:	80800917 	ldw	r2,36(r16)
   29330:	81400717 	ldw	r5,28(r16)
   29334:	103ee83a 	callr	r2
   29338:	0080570e 	bge	zero,r2,29498 <__sfvwrite_r+0x1f8>
   2933c:	a0c00217 	ldw	r3,8(r20)
   29340:	98a7883a 	add	r19,r19,r2
   29344:	90a5c83a 	sub	r18,r18,r2
   29348:	1885c83a 	sub	r2,r3,r2
   2934c:	a0800215 	stw	r2,8(r20)
   29350:	103fef1e 	bne	r2,zero,29310 <__alt_data_end+0xfffe9310>
   29354:	0005883a 	mov	r2,zero
   29358:	dfc00b17 	ldw	ra,44(sp)
   2935c:	df000a17 	ldw	fp,40(sp)
   29360:	ddc00917 	ldw	r23,36(sp)
   29364:	dd800817 	ldw	r22,32(sp)
   29368:	dd400717 	ldw	r21,28(sp)
   2936c:	dd000617 	ldw	r20,24(sp)
   29370:	dcc00517 	ldw	r19,20(sp)
   29374:	dc800417 	ldw	r18,16(sp)
   29378:	dc400317 	ldw	r17,12(sp)
   2937c:	dc000217 	ldw	r16,8(sp)
   29380:	dec00c04 	addi	sp,sp,48
   29384:	f800283a 	ret
   29388:	800b883a 	mov	r5,r16
   2938c:	a809883a 	mov	r4,r21
   29390:	002302c0 	call	2302c <__swsetup_r>
   29394:	1000eb1e 	bne	r2,zero,29744 <__sfvwrite_r+0x4a4>
   29398:	80c0030b 	ldhu	r3,12(r16)
   2939c:	a4400017 	ldw	r17,0(r20)
   293a0:	1880008c 	andi	r2,r3,2
   293a4:	103fd61e 	bne	r2,zero,29300 <__alt_data_end+0xfffe9300>
   293a8:	1880004c 	andi	r2,r3,1
   293ac:	10003f1e 	bne	r2,zero,294ac <__sfvwrite_r+0x20c>
   293b0:	0039883a 	mov	fp,zero
   293b4:	0025883a 	mov	r18,zero
   293b8:	90001a26 	beq	r18,zero,29424 <__sfvwrite_r+0x184>
   293bc:	1880800c 	andi	r2,r3,512
   293c0:	84c00217 	ldw	r19,8(r16)
   293c4:	10002126 	beq	r2,zero,2944c <__sfvwrite_r+0x1ac>
   293c8:	982f883a 	mov	r23,r19
   293cc:	94c09336 	bltu	r18,r19,2961c <__sfvwrite_r+0x37c>
   293d0:	1881200c 	andi	r2,r3,1152
   293d4:	10009e1e 	bne	r2,zero,29650 <__sfvwrite_r+0x3b0>
   293d8:	81000017 	ldw	r4,0(r16)
   293dc:	b80d883a 	mov	r6,r23
   293e0:	e00b883a 	mov	r5,fp
   293e4:	00298100 	call	29810 <memmove>
   293e8:	80c00217 	ldw	r3,8(r16)
   293ec:	81000017 	ldw	r4,0(r16)
   293f0:	9005883a 	mov	r2,r18
   293f4:	1ce7c83a 	sub	r19,r3,r19
   293f8:	25cf883a 	add	r7,r4,r23
   293fc:	84c00215 	stw	r19,8(r16)
   29400:	81c00015 	stw	r7,0(r16)
   29404:	a0c00217 	ldw	r3,8(r20)
   29408:	e0b9883a 	add	fp,fp,r2
   2940c:	90a5c83a 	sub	r18,r18,r2
   29410:	18a7c83a 	sub	r19,r3,r2
   29414:	a4c00215 	stw	r19,8(r20)
   29418:	983fce26 	beq	r19,zero,29354 <__alt_data_end+0xfffe9354>
   2941c:	80c0030b 	ldhu	r3,12(r16)
   29420:	903fe61e 	bne	r18,zero,293bc <__alt_data_end+0xfffe93bc>
   29424:	8f000017 	ldw	fp,0(r17)
   29428:	8c800117 	ldw	r18,4(r17)
   2942c:	8c400204 	addi	r17,r17,8
   29430:	003fe106 	br	293b8 <__alt_data_end+0xfffe93b8>
   29434:	8cc00017 	ldw	r19,0(r17)
   29438:	8c800117 	ldw	r18,4(r17)
   2943c:	8c400204 	addi	r17,r17,8
   29440:	003fb306 	br	29310 <__alt_data_end+0xfffe9310>
   29444:	0005883a 	mov	r2,zero
   29448:	f800283a 	ret
   2944c:	81000017 	ldw	r4,0(r16)
   29450:	80800417 	ldw	r2,16(r16)
   29454:	11005736 	bltu	r2,r4,295b4 <__sfvwrite_r+0x314>
   29458:	85c00517 	ldw	r23,20(r16)
   2945c:	95c05536 	bltu	r18,r23,295b4 <__sfvwrite_r+0x314>
   29460:	00a00034 	movhi	r2,32768
   29464:	10bfffc4 	addi	r2,r2,-1
   29468:	9009883a 	mov	r4,r18
   2946c:	1480012e 	bgeu	r2,r18,29474 <__sfvwrite_r+0x1d4>
   29470:	1009883a 	mov	r4,r2
   29474:	b80b883a 	mov	r5,r23
   29478:	0020b3c0 	call	20b3c <__divsi3>
   2947c:	15cf383a 	mul	r7,r2,r23
   29480:	81400717 	ldw	r5,28(r16)
   29484:	80800917 	ldw	r2,36(r16)
   29488:	e00d883a 	mov	r6,fp
   2948c:	a809883a 	mov	r4,r21
   29490:	103ee83a 	callr	r2
   29494:	00bfdb16 	blt	zero,r2,29404 <__alt_data_end+0xfffe9404>
   29498:	8080030b 	ldhu	r2,12(r16)
   2949c:	10801014 	ori	r2,r2,64
   294a0:	8080030d 	sth	r2,12(r16)
   294a4:	00bfffc4 	movi	r2,-1
   294a8:	003fab06 	br	29358 <__alt_data_end+0xfffe9358>
   294ac:	0027883a 	mov	r19,zero
   294b0:	0011883a 	mov	r8,zero
   294b4:	0039883a 	mov	fp,zero
   294b8:	0025883a 	mov	r18,zero
   294bc:	90001f26 	beq	r18,zero,2953c <__sfvwrite_r+0x29c>
   294c0:	40005a26 	beq	r8,zero,2962c <__sfvwrite_r+0x38c>
   294c4:	982d883a 	mov	r22,r19
   294c8:	94c0012e 	bgeu	r18,r19,294d0 <__sfvwrite_r+0x230>
   294cc:	902d883a 	mov	r22,r18
   294d0:	81000017 	ldw	r4,0(r16)
   294d4:	80800417 	ldw	r2,16(r16)
   294d8:	b02f883a 	mov	r23,r22
   294dc:	81c00517 	ldw	r7,20(r16)
   294e0:	1100032e 	bgeu	r2,r4,294f0 <__sfvwrite_r+0x250>
   294e4:	80c00217 	ldw	r3,8(r16)
   294e8:	38c7883a 	add	r3,r7,r3
   294ec:	1d801816 	blt	r3,r22,29550 <__sfvwrite_r+0x2b0>
   294f0:	b1c03e16 	blt	r22,r7,295ec <__sfvwrite_r+0x34c>
   294f4:	80800917 	ldw	r2,36(r16)
   294f8:	81400717 	ldw	r5,28(r16)
   294fc:	e00d883a 	mov	r6,fp
   29500:	da000115 	stw	r8,4(sp)
   29504:	a809883a 	mov	r4,r21
   29508:	103ee83a 	callr	r2
   2950c:	102f883a 	mov	r23,r2
   29510:	da000117 	ldw	r8,4(sp)
   29514:	00bfe00e 	bge	zero,r2,29498 <__alt_data_end+0xfffe9498>
   29518:	9de7c83a 	sub	r19,r19,r23
   2951c:	98001f26 	beq	r19,zero,2959c <__sfvwrite_r+0x2fc>
   29520:	a0800217 	ldw	r2,8(r20)
   29524:	e5f9883a 	add	fp,fp,r23
   29528:	95e5c83a 	sub	r18,r18,r23
   2952c:	15efc83a 	sub	r23,r2,r23
   29530:	a5c00215 	stw	r23,8(r20)
   29534:	b83f8726 	beq	r23,zero,29354 <__alt_data_end+0xfffe9354>
   29538:	903fe11e 	bne	r18,zero,294c0 <__alt_data_end+0xfffe94c0>
   2953c:	8f000017 	ldw	fp,0(r17)
   29540:	8c800117 	ldw	r18,4(r17)
   29544:	0011883a 	mov	r8,zero
   29548:	8c400204 	addi	r17,r17,8
   2954c:	003fdb06 	br	294bc <__alt_data_end+0xfffe94bc>
   29550:	180d883a 	mov	r6,r3
   29554:	e00b883a 	mov	r5,fp
   29558:	da000115 	stw	r8,4(sp)
   2955c:	d8c00015 	stw	r3,0(sp)
   29560:	00298100 	call	29810 <memmove>
   29564:	d8c00017 	ldw	r3,0(sp)
   29568:	80800017 	ldw	r2,0(r16)
   2956c:	800b883a 	mov	r5,r16
   29570:	a809883a 	mov	r4,r21
   29574:	10c5883a 	add	r2,r2,r3
   29578:	80800015 	stw	r2,0(r16)
   2957c:	d8c00015 	stw	r3,0(sp)
   29580:	0024c240 	call	24c24 <_fflush_r>
   29584:	d8c00017 	ldw	r3,0(sp)
   29588:	da000117 	ldw	r8,4(sp)
   2958c:	103fc21e 	bne	r2,zero,29498 <__alt_data_end+0xfffe9498>
   29590:	182f883a 	mov	r23,r3
   29594:	9de7c83a 	sub	r19,r19,r23
   29598:	983fe11e 	bne	r19,zero,29520 <__alt_data_end+0xfffe9520>
   2959c:	800b883a 	mov	r5,r16
   295a0:	a809883a 	mov	r4,r21
   295a4:	0024c240 	call	24c24 <_fflush_r>
   295a8:	103fbb1e 	bne	r2,zero,29498 <__alt_data_end+0xfffe9498>
   295ac:	0011883a 	mov	r8,zero
   295b0:	003fdb06 	br	29520 <__alt_data_end+0xfffe9520>
   295b4:	94c0012e 	bgeu	r18,r19,295bc <__sfvwrite_r+0x31c>
   295b8:	9027883a 	mov	r19,r18
   295bc:	980d883a 	mov	r6,r19
   295c0:	e00b883a 	mov	r5,fp
   295c4:	00298100 	call	29810 <memmove>
   295c8:	80800217 	ldw	r2,8(r16)
   295cc:	80c00017 	ldw	r3,0(r16)
   295d0:	14c5c83a 	sub	r2,r2,r19
   295d4:	1cc7883a 	add	r3,r3,r19
   295d8:	80800215 	stw	r2,8(r16)
   295dc:	80c00015 	stw	r3,0(r16)
   295e0:	10004326 	beq	r2,zero,296f0 <__sfvwrite_r+0x450>
   295e4:	9805883a 	mov	r2,r19
   295e8:	003f8606 	br	29404 <__alt_data_end+0xfffe9404>
   295ec:	b00d883a 	mov	r6,r22
   295f0:	e00b883a 	mov	r5,fp
   295f4:	da000115 	stw	r8,4(sp)
   295f8:	00298100 	call	29810 <memmove>
   295fc:	80800217 	ldw	r2,8(r16)
   29600:	80c00017 	ldw	r3,0(r16)
   29604:	da000117 	ldw	r8,4(sp)
   29608:	1585c83a 	sub	r2,r2,r22
   2960c:	1dad883a 	add	r22,r3,r22
   29610:	80800215 	stw	r2,8(r16)
   29614:	85800015 	stw	r22,0(r16)
   29618:	003fbf06 	br	29518 <__alt_data_end+0xfffe9518>
   2961c:	81000017 	ldw	r4,0(r16)
   29620:	9027883a 	mov	r19,r18
   29624:	902f883a 	mov	r23,r18
   29628:	003f6c06 	br	293dc <__alt_data_end+0xfffe93dc>
   2962c:	900d883a 	mov	r6,r18
   29630:	01400284 	movi	r5,10
   29634:	e009883a 	mov	r4,fp
   29638:	00260b00 	call	260b0 <memchr>
   2963c:	10003e26 	beq	r2,zero,29738 <__sfvwrite_r+0x498>
   29640:	10800044 	addi	r2,r2,1
   29644:	1727c83a 	sub	r19,r2,fp
   29648:	02000044 	movi	r8,1
   2964c:	003f9d06 	br	294c4 <__alt_data_end+0xfffe94c4>
   29650:	80800517 	ldw	r2,20(r16)
   29654:	81400417 	ldw	r5,16(r16)
   29658:	81c00017 	ldw	r7,0(r16)
   2965c:	10a7883a 	add	r19,r2,r2
   29660:	9885883a 	add	r2,r19,r2
   29664:	1026d7fa 	srli	r19,r2,31
   29668:	396dc83a 	sub	r22,r7,r5
   2966c:	b1000044 	addi	r4,r22,1
   29670:	9885883a 	add	r2,r19,r2
   29674:	1027d07a 	srai	r19,r2,1
   29678:	2485883a 	add	r2,r4,r18
   2967c:	980d883a 	mov	r6,r19
   29680:	9880022e 	bgeu	r19,r2,2968c <__sfvwrite_r+0x3ec>
   29684:	1027883a 	mov	r19,r2
   29688:	100d883a 	mov	r6,r2
   2968c:	18c1000c 	andi	r3,r3,1024
   29690:	18001c26 	beq	r3,zero,29704 <__sfvwrite_r+0x464>
   29694:	300b883a 	mov	r5,r6
   29698:	a809883a 	mov	r4,r21
   2969c:	00258a40 	call	258a4 <_malloc_r>
   296a0:	102f883a 	mov	r23,r2
   296a4:	10002926 	beq	r2,zero,2974c <__sfvwrite_r+0x4ac>
   296a8:	81400417 	ldw	r5,16(r16)
   296ac:	b00d883a 	mov	r6,r22
   296b0:	1009883a 	mov	r4,r2
   296b4:	00261940 	call	26194 <memcpy>
   296b8:	8080030b 	ldhu	r2,12(r16)
   296bc:	00fedfc4 	movi	r3,-1153
   296c0:	10c4703a 	and	r2,r2,r3
   296c4:	10802014 	ori	r2,r2,128
   296c8:	8080030d 	sth	r2,12(r16)
   296cc:	bd89883a 	add	r4,r23,r22
   296d0:	9d8fc83a 	sub	r7,r19,r22
   296d4:	85c00415 	stw	r23,16(r16)
   296d8:	84c00515 	stw	r19,20(r16)
   296dc:	81000015 	stw	r4,0(r16)
   296e0:	9027883a 	mov	r19,r18
   296e4:	81c00215 	stw	r7,8(r16)
   296e8:	902f883a 	mov	r23,r18
   296ec:	003f3b06 	br	293dc <__alt_data_end+0xfffe93dc>
   296f0:	800b883a 	mov	r5,r16
   296f4:	a809883a 	mov	r4,r21
   296f8:	0024c240 	call	24c24 <_fflush_r>
   296fc:	103fb926 	beq	r2,zero,295e4 <__alt_data_end+0xfffe95e4>
   29700:	003f6506 	br	29498 <__alt_data_end+0xfffe9498>
   29704:	a809883a 	mov	r4,r21
   29708:	00299cc0 	call	299cc <_realloc_r>
   2970c:	102f883a 	mov	r23,r2
   29710:	103fee1e 	bne	r2,zero,296cc <__alt_data_end+0xfffe96cc>
   29714:	81400417 	ldw	r5,16(r16)
   29718:	a809883a 	mov	r4,r21
   2971c:	00251740 	call	25174 <_free_r>
   29720:	8080030b 	ldhu	r2,12(r16)
   29724:	00ffdfc4 	movi	r3,-129
   29728:	1884703a 	and	r2,r3,r2
   2972c:	00c00304 	movi	r3,12
   29730:	a8c00015 	stw	r3,0(r21)
   29734:	003f5906 	br	2949c <__alt_data_end+0xfffe949c>
   29738:	94c00044 	addi	r19,r18,1
   2973c:	02000044 	movi	r8,1
   29740:	003f6006 	br	294c4 <__alt_data_end+0xfffe94c4>
   29744:	00bfffc4 	movi	r2,-1
   29748:	003f0306 	br	29358 <__alt_data_end+0xfffe9358>
   2974c:	00800304 	movi	r2,12
   29750:	a8800015 	stw	r2,0(r21)
   29754:	8080030b 	ldhu	r2,12(r16)
   29758:	003f5006 	br	2949c <__alt_data_end+0xfffe949c>

0002975c <_isatty_r>:
   2975c:	defffd04 	addi	sp,sp,-12
   29760:	dc000015 	stw	r16,0(sp)
   29764:	040000f4 	movhi	r16,3
   29768:	dc400115 	stw	r17,4(sp)
   2976c:	840e9404 	addi	r16,r16,14928
   29770:	2023883a 	mov	r17,r4
   29774:	2809883a 	mov	r4,r5
   29778:	dfc00215 	stw	ra,8(sp)
   2977c:	80000015 	stw	zero,0(r16)
   29780:	002d8880 	call	2d888 <isatty>
   29784:	00ffffc4 	movi	r3,-1
   29788:	10c00526 	beq	r2,r3,297a0 <_isatty_r+0x44>
   2978c:	dfc00217 	ldw	ra,8(sp)
   29790:	dc400117 	ldw	r17,4(sp)
   29794:	dc000017 	ldw	r16,0(sp)
   29798:	dec00304 	addi	sp,sp,12
   2979c:	f800283a 	ret
   297a0:	80c00017 	ldw	r3,0(r16)
   297a4:	183ff926 	beq	r3,zero,2978c <__alt_data_end+0xfffe978c>
   297a8:	88c00015 	stw	r3,0(r17)
   297ac:	003ff706 	br	2978c <__alt_data_end+0xfffe978c>

000297b0 <_lseek_r>:
   297b0:	defffd04 	addi	sp,sp,-12
   297b4:	2805883a 	mov	r2,r5
   297b8:	dc000015 	stw	r16,0(sp)
   297bc:	040000f4 	movhi	r16,3
   297c0:	dc400115 	stw	r17,4(sp)
   297c4:	300b883a 	mov	r5,r6
   297c8:	840e9404 	addi	r16,r16,14928
   297cc:	2023883a 	mov	r17,r4
   297d0:	380d883a 	mov	r6,r7
   297d4:	1009883a 	mov	r4,r2
   297d8:	dfc00215 	stw	ra,8(sp)
   297dc:	80000015 	stw	zero,0(r16)
   297e0:	002da540 	call	2da54 <lseek>
   297e4:	00ffffc4 	movi	r3,-1
   297e8:	10c00526 	beq	r2,r3,29800 <_lseek_r+0x50>
   297ec:	dfc00217 	ldw	ra,8(sp)
   297f0:	dc400117 	ldw	r17,4(sp)
   297f4:	dc000017 	ldw	r16,0(sp)
   297f8:	dec00304 	addi	sp,sp,12
   297fc:	f800283a 	ret
   29800:	80c00017 	ldw	r3,0(r16)
   29804:	183ff926 	beq	r3,zero,297ec <__alt_data_end+0xfffe97ec>
   29808:	88c00015 	stw	r3,0(r17)
   2980c:	003ff706 	br	297ec <__alt_data_end+0xfffe97ec>

00029810 <memmove>:
   29810:	2005883a 	mov	r2,r4
   29814:	29000b2e 	bgeu	r5,r4,29844 <memmove+0x34>
   29818:	298f883a 	add	r7,r5,r6
   2981c:	21c0092e 	bgeu	r4,r7,29844 <memmove+0x34>
   29820:	2187883a 	add	r3,r4,r6
   29824:	198bc83a 	sub	r5,r3,r6
   29828:	30004826 	beq	r6,zero,2994c <memmove+0x13c>
   2982c:	39ffffc4 	addi	r7,r7,-1
   29830:	39000003 	ldbu	r4,0(r7)
   29834:	18ffffc4 	addi	r3,r3,-1
   29838:	19000005 	stb	r4,0(r3)
   2983c:	28fffb1e 	bne	r5,r3,2982c <__alt_data_end+0xfffe982c>
   29840:	f800283a 	ret
   29844:	00c003c4 	movi	r3,15
   29848:	1980412e 	bgeu	r3,r6,29950 <memmove+0x140>
   2984c:	2886b03a 	or	r3,r5,r2
   29850:	18c000cc 	andi	r3,r3,3
   29854:	1800401e 	bne	r3,zero,29958 <memmove+0x148>
   29858:	33fffc04 	addi	r15,r6,-16
   2985c:	781ed13a 	srli	r15,r15,4
   29860:	28c00104 	addi	r3,r5,4
   29864:	13400104 	addi	r13,r2,4
   29868:	781c913a 	slli	r14,r15,4
   2986c:	2b000204 	addi	r12,r5,8
   29870:	12c00204 	addi	r11,r2,8
   29874:	73800504 	addi	r14,r14,20
   29878:	2a800304 	addi	r10,r5,12
   2987c:	12400304 	addi	r9,r2,12
   29880:	2b9d883a 	add	r14,r5,r14
   29884:	2811883a 	mov	r8,r5
   29888:	100f883a 	mov	r7,r2
   2988c:	41000017 	ldw	r4,0(r8)
   29890:	39c00404 	addi	r7,r7,16
   29894:	18c00404 	addi	r3,r3,16
   29898:	393ffc15 	stw	r4,-16(r7)
   2989c:	193ffc17 	ldw	r4,-16(r3)
   298a0:	6b400404 	addi	r13,r13,16
   298a4:	5ac00404 	addi	r11,r11,16
   298a8:	693ffc15 	stw	r4,-16(r13)
   298ac:	61000017 	ldw	r4,0(r12)
   298b0:	4a400404 	addi	r9,r9,16
   298b4:	42000404 	addi	r8,r8,16
   298b8:	593ffc15 	stw	r4,-16(r11)
   298bc:	51000017 	ldw	r4,0(r10)
   298c0:	63000404 	addi	r12,r12,16
   298c4:	52800404 	addi	r10,r10,16
   298c8:	493ffc15 	stw	r4,-16(r9)
   298cc:	1bbfef1e 	bne	r3,r14,2988c <__alt_data_end+0xfffe988c>
   298d0:	79000044 	addi	r4,r15,1
   298d4:	2008913a 	slli	r4,r4,4
   298d8:	328003cc 	andi	r10,r6,15
   298dc:	02c000c4 	movi	r11,3
   298e0:	1107883a 	add	r3,r2,r4
   298e4:	290b883a 	add	r5,r5,r4
   298e8:	5a801e2e 	bgeu	r11,r10,29964 <memmove+0x154>
   298ec:	1813883a 	mov	r9,r3
   298f0:	2811883a 	mov	r8,r5
   298f4:	500f883a 	mov	r7,r10
   298f8:	41000017 	ldw	r4,0(r8)
   298fc:	4a400104 	addi	r9,r9,4
   29900:	39ffff04 	addi	r7,r7,-4
   29904:	493fff15 	stw	r4,-4(r9)
   29908:	42000104 	addi	r8,r8,4
   2990c:	59fffa36 	bltu	r11,r7,298f8 <__alt_data_end+0xfffe98f8>
   29910:	513fff04 	addi	r4,r10,-4
   29914:	2008d0ba 	srli	r4,r4,2
   29918:	318000cc 	andi	r6,r6,3
   2991c:	21000044 	addi	r4,r4,1
   29920:	2109883a 	add	r4,r4,r4
   29924:	2109883a 	add	r4,r4,r4
   29928:	1907883a 	add	r3,r3,r4
   2992c:	290b883a 	add	r5,r5,r4
   29930:	30000b26 	beq	r6,zero,29960 <memmove+0x150>
   29934:	198d883a 	add	r6,r3,r6
   29938:	29c00003 	ldbu	r7,0(r5)
   2993c:	18c00044 	addi	r3,r3,1
   29940:	29400044 	addi	r5,r5,1
   29944:	19ffffc5 	stb	r7,-1(r3)
   29948:	19bffb1e 	bne	r3,r6,29938 <__alt_data_end+0xfffe9938>
   2994c:	f800283a 	ret
   29950:	1007883a 	mov	r3,r2
   29954:	003ff606 	br	29930 <__alt_data_end+0xfffe9930>
   29958:	1007883a 	mov	r3,r2
   2995c:	003ff506 	br	29934 <__alt_data_end+0xfffe9934>
   29960:	f800283a 	ret
   29964:	500d883a 	mov	r6,r10
   29968:	003ff106 	br	29930 <__alt_data_end+0xfffe9930>

0002996c <_read_r>:
   2996c:	defffd04 	addi	sp,sp,-12
   29970:	2805883a 	mov	r2,r5
   29974:	dc000015 	stw	r16,0(sp)
   29978:	040000f4 	movhi	r16,3
   2997c:	dc400115 	stw	r17,4(sp)
   29980:	300b883a 	mov	r5,r6
   29984:	840e9404 	addi	r16,r16,14928
   29988:	2023883a 	mov	r17,r4
   2998c:	380d883a 	mov	r6,r7
   29990:	1009883a 	mov	r4,r2
   29994:	dfc00215 	stw	ra,8(sp)
   29998:	80000015 	stw	zero,0(r16)
   2999c:	002de900 	call	2de90 <read>
   299a0:	00ffffc4 	movi	r3,-1
   299a4:	10c00526 	beq	r2,r3,299bc <_read_r+0x50>
   299a8:	dfc00217 	ldw	ra,8(sp)
   299ac:	dc400117 	ldw	r17,4(sp)
   299b0:	dc000017 	ldw	r16,0(sp)
   299b4:	dec00304 	addi	sp,sp,12
   299b8:	f800283a 	ret
   299bc:	80c00017 	ldw	r3,0(r16)
   299c0:	183ff926 	beq	r3,zero,299a8 <__alt_data_end+0xfffe99a8>
   299c4:	88c00015 	stw	r3,0(r17)
   299c8:	003ff706 	br	299a8 <__alt_data_end+0xfffe99a8>

000299cc <_realloc_r>:
   299cc:	defff604 	addi	sp,sp,-40
   299d0:	dc800215 	stw	r18,8(sp)
   299d4:	dfc00915 	stw	ra,36(sp)
   299d8:	df000815 	stw	fp,32(sp)
   299dc:	ddc00715 	stw	r23,28(sp)
   299e0:	dd800615 	stw	r22,24(sp)
   299e4:	dd400515 	stw	r21,20(sp)
   299e8:	dd000415 	stw	r20,16(sp)
   299ec:	dcc00315 	stw	r19,12(sp)
   299f0:	dc400115 	stw	r17,4(sp)
   299f4:	dc000015 	stw	r16,0(sp)
   299f8:	3025883a 	mov	r18,r6
   299fc:	2800b726 	beq	r5,zero,29cdc <_realloc_r+0x310>
   29a00:	282b883a 	mov	r21,r5
   29a04:	2029883a 	mov	r20,r4
   29a08:	002dba40 	call	2dba4 <__malloc_lock>
   29a0c:	a8bfff17 	ldw	r2,-4(r21)
   29a10:	043fff04 	movi	r16,-4
   29a14:	90c002c4 	addi	r3,r18,11
   29a18:	01000584 	movi	r4,22
   29a1c:	acfffe04 	addi	r19,r21,-8
   29a20:	1420703a 	and	r16,r2,r16
   29a24:	20c0332e 	bgeu	r4,r3,29af4 <_realloc_r+0x128>
   29a28:	047ffe04 	movi	r17,-8
   29a2c:	1c62703a 	and	r17,r3,r17
   29a30:	8807883a 	mov	r3,r17
   29a34:	88005816 	blt	r17,zero,29b98 <_realloc_r+0x1cc>
   29a38:	8c805736 	bltu	r17,r18,29b98 <_realloc_r+0x1cc>
   29a3c:	80c0300e 	bge	r16,r3,29b00 <_realloc_r+0x134>
   29a40:	070000f4 	movhi	fp,3
   29a44:	e7023c04 	addi	fp,fp,2288
   29a48:	e1c00217 	ldw	r7,8(fp)
   29a4c:	9c09883a 	add	r4,r19,r16
   29a50:	22000117 	ldw	r8,4(r4)
   29a54:	21c06326 	beq	r4,r7,29be4 <_realloc_r+0x218>
   29a58:	017fff84 	movi	r5,-2
   29a5c:	414a703a 	and	r5,r8,r5
   29a60:	214b883a 	add	r5,r4,r5
   29a64:	29800117 	ldw	r6,4(r5)
   29a68:	3180004c 	andi	r6,r6,1
   29a6c:	30003f26 	beq	r6,zero,29b6c <_realloc_r+0x1a0>
   29a70:	1080004c 	andi	r2,r2,1
   29a74:	10008326 	beq	r2,zero,29c84 <_realloc_r+0x2b8>
   29a78:	900b883a 	mov	r5,r18
   29a7c:	a009883a 	mov	r4,r20
   29a80:	00258a40 	call	258a4 <_malloc_r>
   29a84:	1025883a 	mov	r18,r2
   29a88:	10011e26 	beq	r2,zero,29f04 <_realloc_r+0x538>
   29a8c:	a93fff17 	ldw	r4,-4(r21)
   29a90:	10fffe04 	addi	r3,r2,-8
   29a94:	00bfff84 	movi	r2,-2
   29a98:	2084703a 	and	r2,r4,r2
   29a9c:	9885883a 	add	r2,r19,r2
   29aa0:	1880ee26 	beq	r3,r2,29e5c <_realloc_r+0x490>
   29aa4:	81bfff04 	addi	r6,r16,-4
   29aa8:	00800904 	movi	r2,36
   29aac:	1180b836 	bltu	r2,r6,29d90 <_realloc_r+0x3c4>
   29ab0:	00c004c4 	movi	r3,19
   29ab4:	19809636 	bltu	r3,r6,29d10 <_realloc_r+0x344>
   29ab8:	9005883a 	mov	r2,r18
   29abc:	a807883a 	mov	r3,r21
   29ac0:	19000017 	ldw	r4,0(r3)
   29ac4:	11000015 	stw	r4,0(r2)
   29ac8:	19000117 	ldw	r4,4(r3)
   29acc:	11000115 	stw	r4,4(r2)
   29ad0:	18c00217 	ldw	r3,8(r3)
   29ad4:	10c00215 	stw	r3,8(r2)
   29ad8:	a80b883a 	mov	r5,r21
   29adc:	a009883a 	mov	r4,r20
   29ae0:	00251740 	call	25174 <_free_r>
   29ae4:	a009883a 	mov	r4,r20
   29ae8:	002dbc80 	call	2dbc8 <__malloc_unlock>
   29aec:	9005883a 	mov	r2,r18
   29af0:	00001206 	br	29b3c <_realloc_r+0x170>
   29af4:	00c00404 	movi	r3,16
   29af8:	1823883a 	mov	r17,r3
   29afc:	003fce06 	br	29a38 <__alt_data_end+0xfffe9a38>
   29b00:	a825883a 	mov	r18,r21
   29b04:	8445c83a 	sub	r2,r16,r17
   29b08:	00c003c4 	movi	r3,15
   29b0c:	18802636 	bltu	r3,r2,29ba8 <_realloc_r+0x1dc>
   29b10:	99800117 	ldw	r6,4(r19)
   29b14:	9c07883a 	add	r3,r19,r16
   29b18:	3180004c 	andi	r6,r6,1
   29b1c:	3420b03a 	or	r16,r6,r16
   29b20:	9c000115 	stw	r16,4(r19)
   29b24:	18800117 	ldw	r2,4(r3)
   29b28:	10800054 	ori	r2,r2,1
   29b2c:	18800115 	stw	r2,4(r3)
   29b30:	a009883a 	mov	r4,r20
   29b34:	002dbc80 	call	2dbc8 <__malloc_unlock>
   29b38:	9005883a 	mov	r2,r18
   29b3c:	dfc00917 	ldw	ra,36(sp)
   29b40:	df000817 	ldw	fp,32(sp)
   29b44:	ddc00717 	ldw	r23,28(sp)
   29b48:	dd800617 	ldw	r22,24(sp)
   29b4c:	dd400517 	ldw	r21,20(sp)
   29b50:	dd000417 	ldw	r20,16(sp)
   29b54:	dcc00317 	ldw	r19,12(sp)
   29b58:	dc800217 	ldw	r18,8(sp)
   29b5c:	dc400117 	ldw	r17,4(sp)
   29b60:	dc000017 	ldw	r16,0(sp)
   29b64:	dec00a04 	addi	sp,sp,40
   29b68:	f800283a 	ret
   29b6c:	017fff04 	movi	r5,-4
   29b70:	414a703a 	and	r5,r8,r5
   29b74:	814d883a 	add	r6,r16,r5
   29b78:	30c01f16 	blt	r6,r3,29bf8 <_realloc_r+0x22c>
   29b7c:	20800317 	ldw	r2,12(r4)
   29b80:	20c00217 	ldw	r3,8(r4)
   29b84:	a825883a 	mov	r18,r21
   29b88:	3021883a 	mov	r16,r6
   29b8c:	18800315 	stw	r2,12(r3)
   29b90:	10c00215 	stw	r3,8(r2)
   29b94:	003fdb06 	br	29b04 <__alt_data_end+0xfffe9b04>
   29b98:	00800304 	movi	r2,12
   29b9c:	a0800015 	stw	r2,0(r20)
   29ba0:	0005883a 	mov	r2,zero
   29ba4:	003fe506 	br	29b3c <__alt_data_end+0xfffe9b3c>
   29ba8:	98c00117 	ldw	r3,4(r19)
   29bac:	9c4b883a 	add	r5,r19,r17
   29bb0:	11000054 	ori	r4,r2,1
   29bb4:	18c0004c 	andi	r3,r3,1
   29bb8:	1c62b03a 	or	r17,r3,r17
   29bbc:	9c400115 	stw	r17,4(r19)
   29bc0:	29000115 	stw	r4,4(r5)
   29bc4:	2885883a 	add	r2,r5,r2
   29bc8:	10c00117 	ldw	r3,4(r2)
   29bcc:	29400204 	addi	r5,r5,8
   29bd0:	a009883a 	mov	r4,r20
   29bd4:	18c00054 	ori	r3,r3,1
   29bd8:	10c00115 	stw	r3,4(r2)
   29bdc:	00251740 	call	25174 <_free_r>
   29be0:	003fd306 	br	29b30 <__alt_data_end+0xfffe9b30>
   29be4:	017fff04 	movi	r5,-4
   29be8:	414a703a 	and	r5,r8,r5
   29bec:	89800404 	addi	r6,r17,16
   29bf0:	8151883a 	add	r8,r16,r5
   29bf4:	4180590e 	bge	r8,r6,29d5c <_realloc_r+0x390>
   29bf8:	1080004c 	andi	r2,r2,1
   29bfc:	103f9e1e 	bne	r2,zero,29a78 <__alt_data_end+0xfffe9a78>
   29c00:	adbffe17 	ldw	r22,-8(r21)
   29c04:	00bfff04 	movi	r2,-4
   29c08:	9dadc83a 	sub	r22,r19,r22
   29c0c:	b1800117 	ldw	r6,4(r22)
   29c10:	3084703a 	and	r2,r6,r2
   29c14:	20002026 	beq	r4,zero,29c98 <_realloc_r+0x2cc>
   29c18:	80af883a 	add	r23,r16,r2
   29c1c:	b96f883a 	add	r23,r23,r5
   29c20:	21c05f26 	beq	r4,r7,29da0 <_realloc_r+0x3d4>
   29c24:	b8c01c16 	blt	r23,r3,29c98 <_realloc_r+0x2cc>
   29c28:	20800317 	ldw	r2,12(r4)
   29c2c:	20c00217 	ldw	r3,8(r4)
   29c30:	81bfff04 	addi	r6,r16,-4
   29c34:	01000904 	movi	r4,36
   29c38:	18800315 	stw	r2,12(r3)
   29c3c:	10c00215 	stw	r3,8(r2)
   29c40:	b0c00217 	ldw	r3,8(r22)
   29c44:	b0800317 	ldw	r2,12(r22)
   29c48:	b4800204 	addi	r18,r22,8
   29c4c:	18800315 	stw	r2,12(r3)
   29c50:	10c00215 	stw	r3,8(r2)
   29c54:	21801b36 	bltu	r4,r6,29cc4 <_realloc_r+0x2f8>
   29c58:	008004c4 	movi	r2,19
   29c5c:	1180352e 	bgeu	r2,r6,29d34 <_realloc_r+0x368>
   29c60:	a8800017 	ldw	r2,0(r21)
   29c64:	b0800215 	stw	r2,8(r22)
   29c68:	a8800117 	ldw	r2,4(r21)
   29c6c:	b0800315 	stw	r2,12(r22)
   29c70:	008006c4 	movi	r2,27
   29c74:	11807f36 	bltu	r2,r6,29e74 <_realloc_r+0x4a8>
   29c78:	b0800404 	addi	r2,r22,16
   29c7c:	ad400204 	addi	r21,r21,8
   29c80:	00002d06 	br	29d38 <_realloc_r+0x36c>
   29c84:	adbffe17 	ldw	r22,-8(r21)
   29c88:	00bfff04 	movi	r2,-4
   29c8c:	9dadc83a 	sub	r22,r19,r22
   29c90:	b1000117 	ldw	r4,4(r22)
   29c94:	2084703a 	and	r2,r4,r2
   29c98:	b03f7726 	beq	r22,zero,29a78 <__alt_data_end+0xfffe9a78>
   29c9c:	80af883a 	add	r23,r16,r2
   29ca0:	b8ff7516 	blt	r23,r3,29a78 <__alt_data_end+0xfffe9a78>
   29ca4:	b0800317 	ldw	r2,12(r22)
   29ca8:	b0c00217 	ldw	r3,8(r22)
   29cac:	81bfff04 	addi	r6,r16,-4
   29cb0:	01000904 	movi	r4,36
   29cb4:	18800315 	stw	r2,12(r3)
   29cb8:	10c00215 	stw	r3,8(r2)
   29cbc:	b4800204 	addi	r18,r22,8
   29cc0:	21bfe52e 	bgeu	r4,r6,29c58 <__alt_data_end+0xfffe9c58>
   29cc4:	a80b883a 	mov	r5,r21
   29cc8:	9009883a 	mov	r4,r18
   29ccc:	00298100 	call	29810 <memmove>
   29cd0:	b821883a 	mov	r16,r23
   29cd4:	b027883a 	mov	r19,r22
   29cd8:	003f8a06 	br	29b04 <__alt_data_end+0xfffe9b04>
   29cdc:	300b883a 	mov	r5,r6
   29ce0:	dfc00917 	ldw	ra,36(sp)
   29ce4:	df000817 	ldw	fp,32(sp)
   29ce8:	ddc00717 	ldw	r23,28(sp)
   29cec:	dd800617 	ldw	r22,24(sp)
   29cf0:	dd400517 	ldw	r21,20(sp)
   29cf4:	dd000417 	ldw	r20,16(sp)
   29cf8:	dcc00317 	ldw	r19,12(sp)
   29cfc:	dc800217 	ldw	r18,8(sp)
   29d00:	dc400117 	ldw	r17,4(sp)
   29d04:	dc000017 	ldw	r16,0(sp)
   29d08:	dec00a04 	addi	sp,sp,40
   29d0c:	00258a41 	jmpi	258a4 <_malloc_r>
   29d10:	a8c00017 	ldw	r3,0(r21)
   29d14:	90c00015 	stw	r3,0(r18)
   29d18:	a8c00117 	ldw	r3,4(r21)
   29d1c:	90c00115 	stw	r3,4(r18)
   29d20:	00c006c4 	movi	r3,27
   29d24:	19804536 	bltu	r3,r6,29e3c <_realloc_r+0x470>
   29d28:	90800204 	addi	r2,r18,8
   29d2c:	a8c00204 	addi	r3,r21,8
   29d30:	003f6306 	br	29ac0 <__alt_data_end+0xfffe9ac0>
   29d34:	9005883a 	mov	r2,r18
   29d38:	a8c00017 	ldw	r3,0(r21)
   29d3c:	b821883a 	mov	r16,r23
   29d40:	b027883a 	mov	r19,r22
   29d44:	10c00015 	stw	r3,0(r2)
   29d48:	a8c00117 	ldw	r3,4(r21)
   29d4c:	10c00115 	stw	r3,4(r2)
   29d50:	a8c00217 	ldw	r3,8(r21)
   29d54:	10c00215 	stw	r3,8(r2)
   29d58:	003f6a06 	br	29b04 <__alt_data_end+0xfffe9b04>
   29d5c:	9c67883a 	add	r19,r19,r17
   29d60:	4445c83a 	sub	r2,r8,r17
   29d64:	e4c00215 	stw	r19,8(fp)
   29d68:	10800054 	ori	r2,r2,1
   29d6c:	98800115 	stw	r2,4(r19)
   29d70:	a8bfff17 	ldw	r2,-4(r21)
   29d74:	a009883a 	mov	r4,r20
   29d78:	1080004c 	andi	r2,r2,1
   29d7c:	1462b03a 	or	r17,r2,r17
   29d80:	ac7fff15 	stw	r17,-4(r21)
   29d84:	002dbc80 	call	2dbc8 <__malloc_unlock>
   29d88:	a805883a 	mov	r2,r21
   29d8c:	003f6b06 	br	29b3c <__alt_data_end+0xfffe9b3c>
   29d90:	a80b883a 	mov	r5,r21
   29d94:	9009883a 	mov	r4,r18
   29d98:	00298100 	call	29810 <memmove>
   29d9c:	003f4e06 	br	29ad8 <__alt_data_end+0xfffe9ad8>
   29da0:	89000404 	addi	r4,r17,16
   29da4:	b93fbc16 	blt	r23,r4,29c98 <__alt_data_end+0xfffe9c98>
   29da8:	b0800317 	ldw	r2,12(r22)
   29dac:	b0c00217 	ldw	r3,8(r22)
   29db0:	81bfff04 	addi	r6,r16,-4
   29db4:	01000904 	movi	r4,36
   29db8:	18800315 	stw	r2,12(r3)
   29dbc:	10c00215 	stw	r3,8(r2)
   29dc0:	b4800204 	addi	r18,r22,8
   29dc4:	21804336 	bltu	r4,r6,29ed4 <_realloc_r+0x508>
   29dc8:	008004c4 	movi	r2,19
   29dcc:	11803f2e 	bgeu	r2,r6,29ecc <_realloc_r+0x500>
   29dd0:	a8800017 	ldw	r2,0(r21)
   29dd4:	b0800215 	stw	r2,8(r22)
   29dd8:	a8800117 	ldw	r2,4(r21)
   29ddc:	b0800315 	stw	r2,12(r22)
   29de0:	008006c4 	movi	r2,27
   29de4:	11803f36 	bltu	r2,r6,29ee4 <_realloc_r+0x518>
   29de8:	b0800404 	addi	r2,r22,16
   29dec:	ad400204 	addi	r21,r21,8
   29df0:	a8c00017 	ldw	r3,0(r21)
   29df4:	10c00015 	stw	r3,0(r2)
   29df8:	a8c00117 	ldw	r3,4(r21)
   29dfc:	10c00115 	stw	r3,4(r2)
   29e00:	a8c00217 	ldw	r3,8(r21)
   29e04:	10c00215 	stw	r3,8(r2)
   29e08:	b447883a 	add	r3,r22,r17
   29e0c:	bc45c83a 	sub	r2,r23,r17
   29e10:	e0c00215 	stw	r3,8(fp)
   29e14:	10800054 	ori	r2,r2,1
   29e18:	18800115 	stw	r2,4(r3)
   29e1c:	b0800117 	ldw	r2,4(r22)
   29e20:	a009883a 	mov	r4,r20
   29e24:	1080004c 	andi	r2,r2,1
   29e28:	1462b03a 	or	r17,r2,r17
   29e2c:	b4400115 	stw	r17,4(r22)
   29e30:	002dbc80 	call	2dbc8 <__malloc_unlock>
   29e34:	9005883a 	mov	r2,r18
   29e38:	003f4006 	br	29b3c <__alt_data_end+0xfffe9b3c>
   29e3c:	a8c00217 	ldw	r3,8(r21)
   29e40:	90c00215 	stw	r3,8(r18)
   29e44:	a8c00317 	ldw	r3,12(r21)
   29e48:	90c00315 	stw	r3,12(r18)
   29e4c:	30801126 	beq	r6,r2,29e94 <_realloc_r+0x4c8>
   29e50:	90800404 	addi	r2,r18,16
   29e54:	a8c00404 	addi	r3,r21,16
   29e58:	003f1906 	br	29ac0 <__alt_data_end+0xfffe9ac0>
   29e5c:	90ffff17 	ldw	r3,-4(r18)
   29e60:	00bfff04 	movi	r2,-4
   29e64:	a825883a 	mov	r18,r21
   29e68:	1884703a 	and	r2,r3,r2
   29e6c:	80a1883a 	add	r16,r16,r2
   29e70:	003f2406 	br	29b04 <__alt_data_end+0xfffe9b04>
   29e74:	a8800217 	ldw	r2,8(r21)
   29e78:	b0800415 	stw	r2,16(r22)
   29e7c:	a8800317 	ldw	r2,12(r21)
   29e80:	b0800515 	stw	r2,20(r22)
   29e84:	31000a26 	beq	r6,r4,29eb0 <_realloc_r+0x4e4>
   29e88:	b0800604 	addi	r2,r22,24
   29e8c:	ad400404 	addi	r21,r21,16
   29e90:	003fa906 	br	29d38 <__alt_data_end+0xfffe9d38>
   29e94:	a9000417 	ldw	r4,16(r21)
   29e98:	90800604 	addi	r2,r18,24
   29e9c:	a8c00604 	addi	r3,r21,24
   29ea0:	91000415 	stw	r4,16(r18)
   29ea4:	a9000517 	ldw	r4,20(r21)
   29ea8:	91000515 	stw	r4,20(r18)
   29eac:	003f0406 	br	29ac0 <__alt_data_end+0xfffe9ac0>
   29eb0:	a8c00417 	ldw	r3,16(r21)
   29eb4:	ad400604 	addi	r21,r21,24
   29eb8:	b0800804 	addi	r2,r22,32
   29ebc:	b0c00615 	stw	r3,24(r22)
   29ec0:	a8ffff17 	ldw	r3,-4(r21)
   29ec4:	b0c00715 	stw	r3,28(r22)
   29ec8:	003f9b06 	br	29d38 <__alt_data_end+0xfffe9d38>
   29ecc:	9005883a 	mov	r2,r18
   29ed0:	003fc706 	br	29df0 <__alt_data_end+0xfffe9df0>
   29ed4:	a80b883a 	mov	r5,r21
   29ed8:	9009883a 	mov	r4,r18
   29edc:	00298100 	call	29810 <memmove>
   29ee0:	003fc906 	br	29e08 <__alt_data_end+0xfffe9e08>
   29ee4:	a8800217 	ldw	r2,8(r21)
   29ee8:	b0800415 	stw	r2,16(r22)
   29eec:	a8800317 	ldw	r2,12(r21)
   29ef0:	b0800515 	stw	r2,20(r22)
   29ef4:	31000726 	beq	r6,r4,29f14 <_realloc_r+0x548>
   29ef8:	b0800604 	addi	r2,r22,24
   29efc:	ad400404 	addi	r21,r21,16
   29f00:	003fbb06 	br	29df0 <__alt_data_end+0xfffe9df0>
   29f04:	a009883a 	mov	r4,r20
   29f08:	002dbc80 	call	2dbc8 <__malloc_unlock>
   29f0c:	0005883a 	mov	r2,zero
   29f10:	003f0a06 	br	29b3c <__alt_data_end+0xfffe9b3c>
   29f14:	a8c00417 	ldw	r3,16(r21)
   29f18:	ad400604 	addi	r21,r21,24
   29f1c:	b0800804 	addi	r2,r22,32
   29f20:	b0c00615 	stw	r3,24(r22)
   29f24:	a8ffff17 	ldw	r3,-4(r21)
   29f28:	b0c00715 	stw	r3,28(r22)
   29f2c:	003fb006 	br	29df0 <__alt_data_end+0xfffe9df0>

00029f30 <__swbuf_r>:
   29f30:	defffb04 	addi	sp,sp,-20
   29f34:	dcc00315 	stw	r19,12(sp)
   29f38:	dc800215 	stw	r18,8(sp)
   29f3c:	dc000015 	stw	r16,0(sp)
   29f40:	dfc00415 	stw	ra,16(sp)
   29f44:	dc400115 	stw	r17,4(sp)
   29f48:	2025883a 	mov	r18,r4
   29f4c:	2827883a 	mov	r19,r5
   29f50:	3021883a 	mov	r16,r6
   29f54:	20000226 	beq	r4,zero,29f60 <__swbuf_r+0x30>
   29f58:	20800e17 	ldw	r2,56(r4)
   29f5c:	10004226 	beq	r2,zero,2a068 <__swbuf_r+0x138>
   29f60:	80800617 	ldw	r2,24(r16)
   29f64:	8100030b 	ldhu	r4,12(r16)
   29f68:	80800215 	stw	r2,8(r16)
   29f6c:	2080020c 	andi	r2,r4,8
   29f70:	10003626 	beq	r2,zero,2a04c <__swbuf_r+0x11c>
   29f74:	80c00417 	ldw	r3,16(r16)
   29f78:	18003426 	beq	r3,zero,2a04c <__swbuf_r+0x11c>
   29f7c:	2088000c 	andi	r2,r4,8192
   29f80:	9c403fcc 	andi	r17,r19,255
   29f84:	10001a26 	beq	r2,zero,29ff0 <__swbuf_r+0xc0>
   29f88:	80800017 	ldw	r2,0(r16)
   29f8c:	81000517 	ldw	r4,20(r16)
   29f90:	10c7c83a 	sub	r3,r2,r3
   29f94:	1900200e 	bge	r3,r4,2a018 <__swbuf_r+0xe8>
   29f98:	18c00044 	addi	r3,r3,1
   29f9c:	81000217 	ldw	r4,8(r16)
   29fa0:	11400044 	addi	r5,r2,1
   29fa4:	81400015 	stw	r5,0(r16)
   29fa8:	213fffc4 	addi	r4,r4,-1
   29fac:	81000215 	stw	r4,8(r16)
   29fb0:	14c00005 	stb	r19,0(r2)
   29fb4:	80800517 	ldw	r2,20(r16)
   29fb8:	10c01e26 	beq	r2,r3,2a034 <__swbuf_r+0x104>
   29fbc:	8080030b 	ldhu	r2,12(r16)
   29fc0:	1080004c 	andi	r2,r2,1
   29fc4:	10000226 	beq	r2,zero,29fd0 <__swbuf_r+0xa0>
   29fc8:	00800284 	movi	r2,10
   29fcc:	88801926 	beq	r17,r2,2a034 <__swbuf_r+0x104>
   29fd0:	8805883a 	mov	r2,r17
   29fd4:	dfc00417 	ldw	ra,16(sp)
   29fd8:	dcc00317 	ldw	r19,12(sp)
   29fdc:	dc800217 	ldw	r18,8(sp)
   29fe0:	dc400117 	ldw	r17,4(sp)
   29fe4:	dc000017 	ldw	r16,0(sp)
   29fe8:	dec00504 	addi	sp,sp,20
   29fec:	f800283a 	ret
   29ff0:	81401917 	ldw	r5,100(r16)
   29ff4:	00b7ffc4 	movi	r2,-8193
   29ff8:	21080014 	ori	r4,r4,8192
   29ffc:	2884703a 	and	r2,r5,r2
   2a000:	80801915 	stw	r2,100(r16)
   2a004:	80800017 	ldw	r2,0(r16)
   2a008:	8100030d 	sth	r4,12(r16)
   2a00c:	81000517 	ldw	r4,20(r16)
   2a010:	10c7c83a 	sub	r3,r2,r3
   2a014:	193fe016 	blt	r3,r4,29f98 <__alt_data_end+0xfffe9f98>
   2a018:	800b883a 	mov	r5,r16
   2a01c:	9009883a 	mov	r4,r18
   2a020:	0024c240 	call	24c24 <_fflush_r>
   2a024:	1000071e 	bne	r2,zero,2a044 <__swbuf_r+0x114>
   2a028:	80800017 	ldw	r2,0(r16)
   2a02c:	00c00044 	movi	r3,1
   2a030:	003fda06 	br	29f9c <__alt_data_end+0xfffe9f9c>
   2a034:	800b883a 	mov	r5,r16
   2a038:	9009883a 	mov	r4,r18
   2a03c:	0024c240 	call	24c24 <_fflush_r>
   2a040:	103fe326 	beq	r2,zero,29fd0 <__alt_data_end+0xfffe9fd0>
   2a044:	00bfffc4 	movi	r2,-1
   2a048:	003fe206 	br	29fd4 <__alt_data_end+0xfffe9fd4>
   2a04c:	800b883a 	mov	r5,r16
   2a050:	9009883a 	mov	r4,r18
   2a054:	002302c0 	call	2302c <__swsetup_r>
   2a058:	103ffa1e 	bne	r2,zero,2a044 <__alt_data_end+0xfffea044>
   2a05c:	8100030b 	ldhu	r4,12(r16)
   2a060:	80c00417 	ldw	r3,16(r16)
   2a064:	003fc506 	br	29f7c <__alt_data_end+0xfffe9f7c>
   2a068:	00250000 	call	25000 <__sinit>
   2a06c:	003fbc06 	br	29f60 <__alt_data_end+0xfffe9f60>

0002a070 <__swbuf>:
   2a070:	008000f4 	movhi	r2,3
   2a074:	1087c104 	addi	r2,r2,7940
   2a078:	280d883a 	mov	r6,r5
   2a07c:	200b883a 	mov	r5,r4
   2a080:	11000017 	ldw	r4,0(r2)
   2a084:	0029f301 	jmpi	29f30 <__swbuf_r>

0002a088 <_wcrtomb_r>:
   2a088:	defff604 	addi	sp,sp,-40
   2a08c:	008000f4 	movhi	r2,3
   2a090:	dc800815 	stw	r18,32(sp)
   2a094:	dc400715 	stw	r17,28(sp)
   2a098:	dc000615 	stw	r16,24(sp)
   2a09c:	1087c504 	addi	r2,r2,7956
   2a0a0:	dfc00915 	stw	ra,36(sp)
   2a0a4:	2021883a 	mov	r16,r4
   2a0a8:	3823883a 	mov	r17,r7
   2a0ac:	14800017 	ldw	r18,0(r2)
   2a0b0:	28001426 	beq	r5,zero,2a104 <_wcrtomb_r+0x7c>
   2a0b4:	d9400415 	stw	r5,16(sp)
   2a0b8:	d9800515 	stw	r6,20(sp)
   2a0bc:	00256880 	call	25688 <__locale_charset>
   2a0c0:	d9800517 	ldw	r6,20(sp)
   2a0c4:	d9400417 	ldw	r5,16(sp)
   2a0c8:	100f883a 	mov	r7,r2
   2a0cc:	dc400015 	stw	r17,0(sp)
   2a0d0:	8009883a 	mov	r4,r16
   2a0d4:	903ee83a 	callr	r18
   2a0d8:	00ffffc4 	movi	r3,-1
   2a0dc:	10c0031e 	bne	r2,r3,2a0ec <_wcrtomb_r+0x64>
   2a0e0:	88000015 	stw	zero,0(r17)
   2a0e4:	00c02284 	movi	r3,138
   2a0e8:	80c00015 	stw	r3,0(r16)
   2a0ec:	dfc00917 	ldw	ra,36(sp)
   2a0f0:	dc800817 	ldw	r18,32(sp)
   2a0f4:	dc400717 	ldw	r17,28(sp)
   2a0f8:	dc000617 	ldw	r16,24(sp)
   2a0fc:	dec00a04 	addi	sp,sp,40
   2a100:	f800283a 	ret
   2a104:	00256880 	call	25688 <__locale_charset>
   2a108:	100f883a 	mov	r7,r2
   2a10c:	dc400015 	stw	r17,0(sp)
   2a110:	000d883a 	mov	r6,zero
   2a114:	d9400104 	addi	r5,sp,4
   2a118:	8009883a 	mov	r4,r16
   2a11c:	903ee83a 	callr	r18
   2a120:	003fed06 	br	2a0d8 <__alt_data_end+0xfffea0d8>

0002a124 <wcrtomb>:
   2a124:	defff604 	addi	sp,sp,-40
   2a128:	008000f4 	movhi	r2,3
   2a12c:	dc800615 	stw	r18,24(sp)
   2a130:	dc400515 	stw	r17,20(sp)
   2a134:	1087c104 	addi	r2,r2,7940
   2a138:	dfc00915 	stw	ra,36(sp)
   2a13c:	dd000815 	stw	r20,32(sp)
   2a140:	dcc00715 	stw	r19,28(sp)
   2a144:	dc000415 	stw	r16,16(sp)
   2a148:	3025883a 	mov	r18,r6
   2a14c:	14400017 	ldw	r17,0(r2)
   2a150:	20001926 	beq	r4,zero,2a1b8 <wcrtomb+0x94>
   2a154:	008000f4 	movhi	r2,3
   2a158:	1087c504 	addi	r2,r2,7956
   2a15c:	15000017 	ldw	r20,0(r2)
   2a160:	2021883a 	mov	r16,r4
   2a164:	2827883a 	mov	r19,r5
   2a168:	00256880 	call	25688 <__locale_charset>
   2a16c:	100f883a 	mov	r7,r2
   2a170:	dc800015 	stw	r18,0(sp)
   2a174:	980d883a 	mov	r6,r19
   2a178:	800b883a 	mov	r5,r16
   2a17c:	8809883a 	mov	r4,r17
   2a180:	a03ee83a 	callr	r20
   2a184:	00ffffc4 	movi	r3,-1
   2a188:	10c0031e 	bne	r2,r3,2a198 <wcrtomb+0x74>
   2a18c:	90000015 	stw	zero,0(r18)
   2a190:	00c02284 	movi	r3,138
   2a194:	88c00015 	stw	r3,0(r17)
   2a198:	dfc00917 	ldw	ra,36(sp)
   2a19c:	dd000817 	ldw	r20,32(sp)
   2a1a0:	dcc00717 	ldw	r19,28(sp)
   2a1a4:	dc800617 	ldw	r18,24(sp)
   2a1a8:	dc400517 	ldw	r17,20(sp)
   2a1ac:	dc000417 	ldw	r16,16(sp)
   2a1b0:	dec00a04 	addi	sp,sp,40
   2a1b4:	f800283a 	ret
   2a1b8:	008000f4 	movhi	r2,3
   2a1bc:	1087c504 	addi	r2,r2,7956
   2a1c0:	14000017 	ldw	r16,0(r2)
   2a1c4:	00256880 	call	25688 <__locale_charset>
   2a1c8:	100f883a 	mov	r7,r2
   2a1cc:	dc800015 	stw	r18,0(sp)
   2a1d0:	000d883a 	mov	r6,zero
   2a1d4:	d9400104 	addi	r5,sp,4
   2a1d8:	8809883a 	mov	r4,r17
   2a1dc:	803ee83a 	callr	r16
   2a1e0:	003fe806 	br	2a184 <__alt_data_end+0xfffea184>

0002a1e4 <__ascii_wctomb>:
   2a1e4:	28000526 	beq	r5,zero,2a1fc <__ascii_wctomb+0x18>
   2a1e8:	00803fc4 	movi	r2,255
   2a1ec:	11800536 	bltu	r2,r6,2a204 <__ascii_wctomb+0x20>
   2a1f0:	29800005 	stb	r6,0(r5)
   2a1f4:	00800044 	movi	r2,1
   2a1f8:	f800283a 	ret
   2a1fc:	0005883a 	mov	r2,zero
   2a200:	f800283a 	ret
   2a204:	00802284 	movi	r2,138
   2a208:	20800015 	stw	r2,0(r4)
   2a20c:	00bfffc4 	movi	r2,-1
   2a210:	f800283a 	ret

0002a214 <_wctomb_r>:
   2a214:	008000f4 	movhi	r2,3
   2a218:	defff904 	addi	sp,sp,-28
   2a21c:	1087c504 	addi	r2,r2,7956
   2a220:	dfc00615 	stw	ra,24(sp)
   2a224:	dc400515 	stw	r17,20(sp)
   2a228:	dc000415 	stw	r16,16(sp)
   2a22c:	3823883a 	mov	r17,r7
   2a230:	14000017 	ldw	r16,0(r2)
   2a234:	d9000115 	stw	r4,4(sp)
   2a238:	d9400215 	stw	r5,8(sp)
   2a23c:	d9800315 	stw	r6,12(sp)
   2a240:	00256880 	call	25688 <__locale_charset>
   2a244:	d9800317 	ldw	r6,12(sp)
   2a248:	d9400217 	ldw	r5,8(sp)
   2a24c:	d9000117 	ldw	r4,4(sp)
   2a250:	100f883a 	mov	r7,r2
   2a254:	dc400015 	stw	r17,0(sp)
   2a258:	803ee83a 	callr	r16
   2a25c:	dfc00617 	ldw	ra,24(sp)
   2a260:	dc400517 	ldw	r17,20(sp)
   2a264:	dc000417 	ldw	r16,16(sp)
   2a268:	dec00704 	addi	sp,sp,28
   2a26c:	f800283a 	ret

0002a270 <__udivdi3>:
   2a270:	defff504 	addi	sp,sp,-44
   2a274:	dcc00415 	stw	r19,16(sp)
   2a278:	dc000115 	stw	r16,4(sp)
   2a27c:	dfc00a15 	stw	ra,40(sp)
   2a280:	df000915 	stw	fp,36(sp)
   2a284:	ddc00815 	stw	r23,32(sp)
   2a288:	dd800715 	stw	r22,28(sp)
   2a28c:	dd400615 	stw	r21,24(sp)
   2a290:	dd000515 	stw	r20,20(sp)
   2a294:	dc800315 	stw	r18,12(sp)
   2a298:	dc400215 	stw	r17,8(sp)
   2a29c:	2027883a 	mov	r19,r4
   2a2a0:	2821883a 	mov	r16,r5
   2a2a4:	3800411e 	bne	r7,zero,2a3ac <__udivdi3+0x13c>
   2a2a8:	3023883a 	mov	r17,r6
   2a2ac:	2025883a 	mov	r18,r4
   2a2b0:	2980522e 	bgeu	r5,r6,2a3fc <__udivdi3+0x18c>
   2a2b4:	00bfffd4 	movui	r2,65535
   2a2b8:	282d883a 	mov	r22,r5
   2a2bc:	1180a836 	bltu	r2,r6,2a560 <__udivdi3+0x2f0>
   2a2c0:	00803fc4 	movi	r2,255
   2a2c4:	1185803a 	cmpltu	r2,r2,r6
   2a2c8:	100490fa 	slli	r2,r2,3
   2a2cc:	3086d83a 	srl	r3,r6,r2
   2a2d0:	010000f4 	movhi	r4,3
   2a2d4:	2100c804 	addi	r4,r4,800
   2a2d8:	20c7883a 	add	r3,r4,r3
   2a2dc:	18c00003 	ldbu	r3,0(r3)
   2a2e0:	1885883a 	add	r2,r3,r2
   2a2e4:	00c00804 	movi	r3,32
   2a2e8:	1887c83a 	sub	r3,r3,r2
   2a2ec:	18000526 	beq	r3,zero,2a304 <__udivdi3+0x94>
   2a2f0:	80e0983a 	sll	r16,r16,r3
   2a2f4:	9884d83a 	srl	r2,r19,r2
   2a2f8:	30e2983a 	sll	r17,r6,r3
   2a2fc:	98e4983a 	sll	r18,r19,r3
   2a300:	142cb03a 	or	r22,r2,r16
   2a304:	882ad43a 	srli	r21,r17,16
   2a308:	b009883a 	mov	r4,r22
   2a30c:	8d3fffcc 	andi	r20,r17,65535
   2a310:	a80b883a 	mov	r5,r21
   2a314:	0020c980 	call	20c98 <__umodsi3>
   2a318:	b009883a 	mov	r4,r22
   2a31c:	a80b883a 	mov	r5,r21
   2a320:	1027883a 	mov	r19,r2
   2a324:	0020c340 	call	20c34 <__udivsi3>
   2a328:	102d883a 	mov	r22,r2
   2a32c:	9826943a 	slli	r19,r19,16
   2a330:	9004d43a 	srli	r2,r18,16
   2a334:	a5a1383a 	mul	r16,r20,r22
   2a338:	14c4b03a 	or	r2,r2,r19
   2a33c:	1400052e 	bgeu	r2,r16,2a354 <__udivdi3+0xe4>
   2a340:	1445883a 	add	r2,r2,r17
   2a344:	b0ffffc4 	addi	r3,r22,-1
   2a348:	14400136 	bltu	r2,r17,2a350 <__udivdi3+0xe0>
   2a34c:	14012336 	bltu	r2,r16,2a7dc <__udivdi3+0x56c>
   2a350:	182d883a 	mov	r22,r3
   2a354:	1421c83a 	sub	r16,r2,r16
   2a358:	a80b883a 	mov	r5,r21
   2a35c:	8009883a 	mov	r4,r16
   2a360:	0020c980 	call	20c98 <__umodsi3>
   2a364:	1027883a 	mov	r19,r2
   2a368:	a80b883a 	mov	r5,r21
   2a36c:	8009883a 	mov	r4,r16
   2a370:	0020c340 	call	20c34 <__udivsi3>
   2a374:	9826943a 	slli	r19,r19,16
   2a378:	a0a9383a 	mul	r20,r20,r2
   2a37c:	94bfffcc 	andi	r18,r18,65535
   2a380:	94e4b03a 	or	r18,r18,r19
   2a384:	9500052e 	bgeu	r18,r20,2a39c <__udivdi3+0x12c>
   2a388:	8ca5883a 	add	r18,r17,r18
   2a38c:	10ffffc4 	addi	r3,r2,-1
   2a390:	9440f136 	bltu	r18,r17,2a758 <__udivdi3+0x4e8>
   2a394:	9500f02e 	bgeu	r18,r20,2a758 <__udivdi3+0x4e8>
   2a398:	10bfff84 	addi	r2,r2,-2
   2a39c:	b00c943a 	slli	r6,r22,16
   2a3a0:	0007883a 	mov	r3,zero
   2a3a4:	3084b03a 	or	r2,r6,r2
   2a3a8:	00005906 	br	2a510 <__udivdi3+0x2a0>
   2a3ac:	29c05636 	bltu	r5,r7,2a508 <__udivdi3+0x298>
   2a3b0:	00bfffd4 	movui	r2,65535
   2a3b4:	11c0622e 	bgeu	r2,r7,2a540 <__udivdi3+0x2d0>
   2a3b8:	00804034 	movhi	r2,256
   2a3bc:	10bfffc4 	addi	r2,r2,-1
   2a3c0:	11c0ee36 	bltu	r2,r7,2a77c <__udivdi3+0x50c>
   2a3c4:	00800404 	movi	r2,16
   2a3c8:	3886d83a 	srl	r3,r7,r2
   2a3cc:	010000f4 	movhi	r4,3
   2a3d0:	2100c804 	addi	r4,r4,800
   2a3d4:	20c7883a 	add	r3,r4,r3
   2a3d8:	18c00003 	ldbu	r3,0(r3)
   2a3dc:	05400804 	movi	r21,32
   2a3e0:	1885883a 	add	r2,r3,r2
   2a3e4:	a8abc83a 	sub	r21,r21,r2
   2a3e8:	a800621e 	bne	r21,zero,2a574 <__udivdi3+0x304>
   2a3ec:	3c00e936 	bltu	r7,r16,2a794 <__udivdi3+0x524>
   2a3f0:	9985403a 	cmpgeu	r2,r19,r6
   2a3f4:	0007883a 	mov	r3,zero
   2a3f8:	00004506 	br	2a510 <__udivdi3+0x2a0>
   2a3fc:	3000041e 	bne	r6,zero,2a410 <__udivdi3+0x1a0>
   2a400:	000b883a 	mov	r5,zero
   2a404:	01000044 	movi	r4,1
   2a408:	0020c340 	call	20c34 <__udivsi3>
   2a40c:	1023883a 	mov	r17,r2
   2a410:	00bfffd4 	movui	r2,65535
   2a414:	14404e2e 	bgeu	r2,r17,2a550 <__udivdi3+0x2e0>
   2a418:	00804034 	movhi	r2,256
   2a41c:	10bfffc4 	addi	r2,r2,-1
   2a420:	1440d836 	bltu	r2,r17,2a784 <__udivdi3+0x514>
   2a424:	00800404 	movi	r2,16
   2a428:	8886d83a 	srl	r3,r17,r2
   2a42c:	010000f4 	movhi	r4,3
   2a430:	2100c804 	addi	r4,r4,800
   2a434:	20c7883a 	add	r3,r4,r3
   2a438:	18c00003 	ldbu	r3,0(r3)
   2a43c:	1885883a 	add	r2,r3,r2
   2a440:	00c00804 	movi	r3,32
   2a444:	1887c83a 	sub	r3,r3,r2
   2a448:	18008f1e 	bne	r3,zero,2a688 <__udivdi3+0x418>
   2a44c:	882ad43a 	srli	r21,r17,16
   2a450:	8461c83a 	sub	r16,r16,r17
   2a454:	8d3fffcc 	andi	r20,r17,65535
   2a458:	00c00044 	movi	r3,1
   2a45c:	8009883a 	mov	r4,r16
   2a460:	a80b883a 	mov	r5,r21
   2a464:	d8c00015 	stw	r3,0(sp)
   2a468:	0020c980 	call	20c98 <__umodsi3>
   2a46c:	8009883a 	mov	r4,r16
   2a470:	a80b883a 	mov	r5,r21
   2a474:	1027883a 	mov	r19,r2
   2a478:	0020c340 	call	20c34 <__udivsi3>
   2a47c:	9826943a 	slli	r19,r19,16
   2a480:	9008d43a 	srli	r4,r18,16
   2a484:	1521383a 	mul	r16,r2,r20
   2a488:	102d883a 	mov	r22,r2
   2a48c:	24c8b03a 	or	r4,r4,r19
   2a490:	d8c00017 	ldw	r3,0(sp)
   2a494:	2400052e 	bgeu	r4,r16,2a4ac <__udivdi3+0x23c>
   2a498:	2449883a 	add	r4,r4,r17
   2a49c:	b0bfffc4 	addi	r2,r22,-1
   2a4a0:	24400136 	bltu	r4,r17,2a4a8 <__udivdi3+0x238>
   2a4a4:	2400ca36 	bltu	r4,r16,2a7d0 <__udivdi3+0x560>
   2a4a8:	102d883a 	mov	r22,r2
   2a4ac:	2421c83a 	sub	r16,r4,r16
   2a4b0:	a80b883a 	mov	r5,r21
   2a4b4:	8009883a 	mov	r4,r16
   2a4b8:	d8c00015 	stw	r3,0(sp)
   2a4bc:	0020c980 	call	20c98 <__umodsi3>
   2a4c0:	1027883a 	mov	r19,r2
   2a4c4:	a80b883a 	mov	r5,r21
   2a4c8:	8009883a 	mov	r4,r16
   2a4cc:	0020c340 	call	20c34 <__udivsi3>
   2a4d0:	9826943a 	slli	r19,r19,16
   2a4d4:	1529383a 	mul	r20,r2,r20
   2a4d8:	94bfffcc 	andi	r18,r18,65535
   2a4dc:	94e4b03a 	or	r18,r18,r19
   2a4e0:	d8c00017 	ldw	r3,0(sp)
   2a4e4:	9500052e 	bgeu	r18,r20,2a4fc <__udivdi3+0x28c>
   2a4e8:	8ca5883a 	add	r18,r17,r18
   2a4ec:	113fffc4 	addi	r4,r2,-1
   2a4f0:	94409736 	bltu	r18,r17,2a750 <__udivdi3+0x4e0>
   2a4f4:	9500962e 	bgeu	r18,r20,2a750 <__udivdi3+0x4e0>
   2a4f8:	10bfff84 	addi	r2,r2,-2
   2a4fc:	b00c943a 	slli	r6,r22,16
   2a500:	3084b03a 	or	r2,r6,r2
   2a504:	00000206 	br	2a510 <__udivdi3+0x2a0>
   2a508:	0007883a 	mov	r3,zero
   2a50c:	0005883a 	mov	r2,zero
   2a510:	dfc00a17 	ldw	ra,40(sp)
   2a514:	df000917 	ldw	fp,36(sp)
   2a518:	ddc00817 	ldw	r23,32(sp)
   2a51c:	dd800717 	ldw	r22,28(sp)
   2a520:	dd400617 	ldw	r21,24(sp)
   2a524:	dd000517 	ldw	r20,20(sp)
   2a528:	dcc00417 	ldw	r19,16(sp)
   2a52c:	dc800317 	ldw	r18,12(sp)
   2a530:	dc400217 	ldw	r17,8(sp)
   2a534:	dc000117 	ldw	r16,4(sp)
   2a538:	dec00b04 	addi	sp,sp,44
   2a53c:	f800283a 	ret
   2a540:	00803fc4 	movi	r2,255
   2a544:	11c5803a 	cmpltu	r2,r2,r7
   2a548:	100490fa 	slli	r2,r2,3
   2a54c:	003f9e06 	br	2a3c8 <__alt_data_end+0xfffea3c8>
   2a550:	00803fc4 	movi	r2,255
   2a554:	1445803a 	cmpltu	r2,r2,r17
   2a558:	100490fa 	slli	r2,r2,3
   2a55c:	003fb206 	br	2a428 <__alt_data_end+0xfffea428>
   2a560:	00804034 	movhi	r2,256
   2a564:	10bfffc4 	addi	r2,r2,-1
   2a568:	11808836 	bltu	r2,r6,2a78c <__udivdi3+0x51c>
   2a56c:	00800404 	movi	r2,16
   2a570:	003f5606 	br	2a2cc <__alt_data_end+0xfffea2cc>
   2a574:	30aed83a 	srl	r23,r6,r2
   2a578:	3d4e983a 	sll	r7,r7,r21
   2a57c:	80acd83a 	srl	r22,r16,r2
   2a580:	9884d83a 	srl	r2,r19,r2
   2a584:	3deeb03a 	or	r23,r7,r23
   2a588:	b824d43a 	srli	r18,r23,16
   2a58c:	8560983a 	sll	r16,r16,r21
   2a590:	b009883a 	mov	r4,r22
   2a594:	900b883a 	mov	r5,r18
   2a598:	3568983a 	sll	r20,r6,r21
   2a59c:	1420b03a 	or	r16,r2,r16
   2a5a0:	0020c980 	call	20c98 <__umodsi3>
   2a5a4:	b009883a 	mov	r4,r22
   2a5a8:	900b883a 	mov	r5,r18
   2a5ac:	1023883a 	mov	r17,r2
   2a5b0:	0020c340 	call	20c34 <__udivsi3>
   2a5b4:	8808943a 	slli	r4,r17,16
   2a5b8:	bf3fffcc 	andi	fp,r23,65535
   2a5bc:	8006d43a 	srli	r3,r16,16
   2a5c0:	e0a3383a 	mul	r17,fp,r2
   2a5c4:	100d883a 	mov	r6,r2
   2a5c8:	1906b03a 	or	r3,r3,r4
   2a5cc:	1c40042e 	bgeu	r3,r17,2a5e0 <__udivdi3+0x370>
   2a5d0:	1dc7883a 	add	r3,r3,r23
   2a5d4:	10bfffc4 	addi	r2,r2,-1
   2a5d8:	1dc0752e 	bgeu	r3,r23,2a7b0 <__udivdi3+0x540>
   2a5dc:	100d883a 	mov	r6,r2
   2a5e0:	1c63c83a 	sub	r17,r3,r17
   2a5e4:	900b883a 	mov	r5,r18
   2a5e8:	8809883a 	mov	r4,r17
   2a5ec:	d9800015 	stw	r6,0(sp)
   2a5f0:	0020c980 	call	20c98 <__umodsi3>
   2a5f4:	102d883a 	mov	r22,r2
   2a5f8:	8809883a 	mov	r4,r17
   2a5fc:	900b883a 	mov	r5,r18
   2a600:	0020c340 	call	20c34 <__udivsi3>
   2a604:	b02c943a 	slli	r22,r22,16
   2a608:	e089383a 	mul	r4,fp,r2
   2a60c:	843fffcc 	andi	r16,r16,65535
   2a610:	85a0b03a 	or	r16,r16,r22
   2a614:	d9800017 	ldw	r6,0(sp)
   2a618:	8100042e 	bgeu	r16,r4,2a62c <__udivdi3+0x3bc>
   2a61c:	85e1883a 	add	r16,r16,r23
   2a620:	10ffffc4 	addi	r3,r2,-1
   2a624:	85c05e2e 	bgeu	r16,r23,2a7a0 <__udivdi3+0x530>
   2a628:	1805883a 	mov	r2,r3
   2a62c:	300c943a 	slli	r6,r6,16
   2a630:	a17fffcc 	andi	r5,r20,65535
   2a634:	a028d43a 	srli	r20,r20,16
   2a638:	3084b03a 	or	r2,r6,r2
   2a63c:	10ffffcc 	andi	r3,r2,65535
   2a640:	100cd43a 	srli	r6,r2,16
   2a644:	194f383a 	mul	r7,r3,r5
   2a648:	1d07383a 	mul	r3,r3,r20
   2a64c:	314b383a 	mul	r5,r6,r5
   2a650:	3810d43a 	srli	r8,r7,16
   2a654:	8121c83a 	sub	r16,r16,r4
   2a658:	1947883a 	add	r3,r3,r5
   2a65c:	40c7883a 	add	r3,r8,r3
   2a660:	350d383a 	mul	r6,r6,r20
   2a664:	1940022e 	bgeu	r3,r5,2a670 <__udivdi3+0x400>
   2a668:	01000074 	movhi	r4,1
   2a66c:	310d883a 	add	r6,r6,r4
   2a670:	1828d43a 	srli	r20,r3,16
   2a674:	a18d883a 	add	r6,r20,r6
   2a678:	81803e36 	bltu	r16,r6,2a774 <__udivdi3+0x504>
   2a67c:	81803826 	beq	r16,r6,2a760 <__udivdi3+0x4f0>
   2a680:	0007883a 	mov	r3,zero
   2a684:	003fa206 	br	2a510 <__alt_data_end+0xfffea510>
   2a688:	88e2983a 	sll	r17,r17,r3
   2a68c:	80a8d83a 	srl	r20,r16,r2
   2a690:	80e0983a 	sll	r16,r16,r3
   2a694:	882ad43a 	srli	r21,r17,16
   2a698:	9884d83a 	srl	r2,r19,r2
   2a69c:	a009883a 	mov	r4,r20
   2a6a0:	a80b883a 	mov	r5,r21
   2a6a4:	142eb03a 	or	r23,r2,r16
   2a6a8:	98e4983a 	sll	r18,r19,r3
   2a6ac:	0020c980 	call	20c98 <__umodsi3>
   2a6b0:	a009883a 	mov	r4,r20
   2a6b4:	a80b883a 	mov	r5,r21
   2a6b8:	1021883a 	mov	r16,r2
   2a6bc:	0020c340 	call	20c34 <__udivsi3>
   2a6c0:	1039883a 	mov	fp,r2
   2a6c4:	8d3fffcc 	andi	r20,r17,65535
   2a6c8:	8020943a 	slli	r16,r16,16
   2a6cc:	b804d43a 	srli	r2,r23,16
   2a6d0:	a72d383a 	mul	r22,r20,fp
   2a6d4:	1404b03a 	or	r2,r2,r16
   2a6d8:	1580062e 	bgeu	r2,r22,2a6f4 <__udivdi3+0x484>
   2a6dc:	1445883a 	add	r2,r2,r17
   2a6e0:	e0ffffc4 	addi	r3,fp,-1
   2a6e4:	14403836 	bltu	r2,r17,2a7c8 <__udivdi3+0x558>
   2a6e8:	1580372e 	bgeu	r2,r22,2a7c8 <__udivdi3+0x558>
   2a6ec:	e73fff84 	addi	fp,fp,-2
   2a6f0:	1445883a 	add	r2,r2,r17
   2a6f4:	15adc83a 	sub	r22,r2,r22
   2a6f8:	a80b883a 	mov	r5,r21
   2a6fc:	b009883a 	mov	r4,r22
   2a700:	0020c980 	call	20c98 <__umodsi3>
   2a704:	1027883a 	mov	r19,r2
   2a708:	b009883a 	mov	r4,r22
   2a70c:	a80b883a 	mov	r5,r21
   2a710:	0020c340 	call	20c34 <__udivsi3>
   2a714:	9826943a 	slli	r19,r19,16
   2a718:	a0a1383a 	mul	r16,r20,r2
   2a71c:	b93fffcc 	andi	r4,r23,65535
   2a720:	24c8b03a 	or	r4,r4,r19
   2a724:	2400062e 	bgeu	r4,r16,2a740 <__udivdi3+0x4d0>
   2a728:	2449883a 	add	r4,r4,r17
   2a72c:	10ffffc4 	addi	r3,r2,-1
   2a730:	24402336 	bltu	r4,r17,2a7c0 <__udivdi3+0x550>
   2a734:	2400222e 	bgeu	r4,r16,2a7c0 <__udivdi3+0x550>
   2a738:	10bfff84 	addi	r2,r2,-2
   2a73c:	2449883a 	add	r4,r4,r17
   2a740:	e038943a 	slli	fp,fp,16
   2a744:	2421c83a 	sub	r16,r4,r16
   2a748:	e086b03a 	or	r3,fp,r2
   2a74c:	003f4306 	br	2a45c <__alt_data_end+0xfffea45c>
   2a750:	2005883a 	mov	r2,r4
   2a754:	003f6906 	br	2a4fc <__alt_data_end+0xfffea4fc>
   2a758:	1805883a 	mov	r2,r3
   2a75c:	003f0f06 	br	2a39c <__alt_data_end+0xfffea39c>
   2a760:	1806943a 	slli	r3,r3,16
   2a764:	9d66983a 	sll	r19,r19,r21
   2a768:	39ffffcc 	andi	r7,r7,65535
   2a76c:	19c7883a 	add	r3,r3,r7
   2a770:	98ffc32e 	bgeu	r19,r3,2a680 <__alt_data_end+0xfffea680>
   2a774:	10bfffc4 	addi	r2,r2,-1
   2a778:	003fc106 	br	2a680 <__alt_data_end+0xfffea680>
   2a77c:	00800604 	movi	r2,24
   2a780:	003f1106 	br	2a3c8 <__alt_data_end+0xfffea3c8>
   2a784:	00800604 	movi	r2,24
   2a788:	003f2706 	br	2a428 <__alt_data_end+0xfffea428>
   2a78c:	00800604 	movi	r2,24
   2a790:	003ece06 	br	2a2cc <__alt_data_end+0xfffea2cc>
   2a794:	0007883a 	mov	r3,zero
   2a798:	00800044 	movi	r2,1
   2a79c:	003f5c06 	br	2a510 <__alt_data_end+0xfffea510>
   2a7a0:	813fa12e 	bgeu	r16,r4,2a628 <__alt_data_end+0xfffea628>
   2a7a4:	10bfff84 	addi	r2,r2,-2
   2a7a8:	85e1883a 	add	r16,r16,r23
   2a7ac:	003f9f06 	br	2a62c <__alt_data_end+0xfffea62c>
   2a7b0:	1c7f8a2e 	bgeu	r3,r17,2a5dc <__alt_data_end+0xfffea5dc>
   2a7b4:	31bfff84 	addi	r6,r6,-2
   2a7b8:	1dc7883a 	add	r3,r3,r23
   2a7bc:	003f8806 	br	2a5e0 <__alt_data_end+0xfffea5e0>
   2a7c0:	1805883a 	mov	r2,r3
   2a7c4:	003fde06 	br	2a740 <__alt_data_end+0xfffea740>
   2a7c8:	1839883a 	mov	fp,r3
   2a7cc:	003fc906 	br	2a6f4 <__alt_data_end+0xfffea6f4>
   2a7d0:	b5bfff84 	addi	r22,r22,-2
   2a7d4:	2449883a 	add	r4,r4,r17
   2a7d8:	003f3406 	br	2a4ac <__alt_data_end+0xfffea4ac>
   2a7dc:	b5bfff84 	addi	r22,r22,-2
   2a7e0:	1445883a 	add	r2,r2,r17
   2a7e4:	003edb06 	br	2a354 <__alt_data_end+0xfffea354>

0002a7e8 <__umoddi3>:
   2a7e8:	defff404 	addi	sp,sp,-48
   2a7ec:	df000a15 	stw	fp,40(sp)
   2a7f0:	dc400315 	stw	r17,12(sp)
   2a7f4:	dc000215 	stw	r16,8(sp)
   2a7f8:	dfc00b15 	stw	ra,44(sp)
   2a7fc:	ddc00915 	stw	r23,36(sp)
   2a800:	dd800815 	stw	r22,32(sp)
   2a804:	dd400715 	stw	r21,28(sp)
   2a808:	dd000615 	stw	r20,24(sp)
   2a80c:	dcc00515 	stw	r19,20(sp)
   2a810:	dc800415 	stw	r18,16(sp)
   2a814:	2021883a 	mov	r16,r4
   2a818:	2823883a 	mov	r17,r5
   2a81c:	2839883a 	mov	fp,r5
   2a820:	38003c1e 	bne	r7,zero,2a914 <__umoddi3+0x12c>
   2a824:	3027883a 	mov	r19,r6
   2a828:	2029883a 	mov	r20,r4
   2a82c:	2980512e 	bgeu	r5,r6,2a974 <__umoddi3+0x18c>
   2a830:	00bfffd4 	movui	r2,65535
   2a834:	11809a36 	bltu	r2,r6,2aaa0 <__umoddi3+0x2b8>
   2a838:	01003fc4 	movi	r4,255
   2a83c:	2189803a 	cmpltu	r4,r4,r6
   2a840:	200890fa 	slli	r4,r4,3
   2a844:	3104d83a 	srl	r2,r6,r4
   2a848:	00c000f4 	movhi	r3,3
   2a84c:	18c0c804 	addi	r3,r3,800
   2a850:	1885883a 	add	r2,r3,r2
   2a854:	10c00003 	ldbu	r3,0(r2)
   2a858:	00800804 	movi	r2,32
   2a85c:	1909883a 	add	r4,r3,r4
   2a860:	1125c83a 	sub	r18,r2,r4
   2a864:	90000526 	beq	r18,zero,2a87c <__umoddi3+0x94>
   2a868:	8ca2983a 	sll	r17,r17,r18
   2a86c:	8108d83a 	srl	r4,r16,r4
   2a870:	34a6983a 	sll	r19,r6,r18
   2a874:	84a8983a 	sll	r20,r16,r18
   2a878:	2478b03a 	or	fp,r4,r17
   2a87c:	982ed43a 	srli	r23,r19,16
   2a880:	e009883a 	mov	r4,fp
   2a884:	9dbfffcc 	andi	r22,r19,65535
   2a888:	b80b883a 	mov	r5,r23
   2a88c:	0020c980 	call	20c98 <__umodsi3>
   2a890:	e009883a 	mov	r4,fp
   2a894:	b80b883a 	mov	r5,r23
   2a898:	102b883a 	mov	r21,r2
   2a89c:	0020c340 	call	20c34 <__udivsi3>
   2a8a0:	a806943a 	slli	r3,r21,16
   2a8a4:	a008d43a 	srli	r4,r20,16
   2a8a8:	b085383a 	mul	r2,r22,r2
   2a8ac:	20c8b03a 	or	r4,r4,r3
   2a8b0:	2080032e 	bgeu	r4,r2,2a8c0 <__umoddi3+0xd8>
   2a8b4:	24c9883a 	add	r4,r4,r19
   2a8b8:	24c00136 	bltu	r4,r19,2a8c0 <__umoddi3+0xd8>
   2a8bc:	20811036 	bltu	r4,r2,2ad00 <__umoddi3+0x518>
   2a8c0:	20abc83a 	sub	r21,r4,r2
   2a8c4:	b80b883a 	mov	r5,r23
   2a8c8:	a809883a 	mov	r4,r21
   2a8cc:	0020c980 	call	20c98 <__umodsi3>
   2a8d0:	1023883a 	mov	r17,r2
   2a8d4:	b80b883a 	mov	r5,r23
   2a8d8:	a809883a 	mov	r4,r21
   2a8dc:	0020c340 	call	20c34 <__udivsi3>
   2a8e0:	8822943a 	slli	r17,r17,16
   2a8e4:	b085383a 	mul	r2,r22,r2
   2a8e8:	a0ffffcc 	andi	r3,r20,65535
   2a8ec:	1c46b03a 	or	r3,r3,r17
   2a8f0:	1880042e 	bgeu	r3,r2,2a904 <__umoddi3+0x11c>
   2a8f4:	1cc7883a 	add	r3,r3,r19
   2a8f8:	1cc00236 	bltu	r3,r19,2a904 <__umoddi3+0x11c>
   2a8fc:	1880012e 	bgeu	r3,r2,2a904 <__umoddi3+0x11c>
   2a900:	1cc7883a 	add	r3,r3,r19
   2a904:	1885c83a 	sub	r2,r3,r2
   2a908:	1484d83a 	srl	r2,r2,r18
   2a90c:	0007883a 	mov	r3,zero
   2a910:	00004f06 	br	2aa50 <__umoddi3+0x268>
   2a914:	29c04c36 	bltu	r5,r7,2aa48 <__umoddi3+0x260>
   2a918:	00bfffd4 	movui	r2,65535
   2a91c:	11c0582e 	bgeu	r2,r7,2aa80 <__umoddi3+0x298>
   2a920:	00804034 	movhi	r2,256
   2a924:	10bfffc4 	addi	r2,r2,-1
   2a928:	11c0e736 	bltu	r2,r7,2acc8 <__umoddi3+0x4e0>
   2a92c:	01000404 	movi	r4,16
   2a930:	3904d83a 	srl	r2,r7,r4
   2a934:	00c000f4 	movhi	r3,3
   2a938:	18c0c804 	addi	r3,r3,800
   2a93c:	1885883a 	add	r2,r3,r2
   2a940:	14c00003 	ldbu	r19,0(r2)
   2a944:	00c00804 	movi	r3,32
   2a948:	9927883a 	add	r19,r19,r4
   2a94c:	1ce9c83a 	sub	r20,r3,r19
   2a950:	a000581e 	bne	r20,zero,2aab4 <__umoddi3+0x2cc>
   2a954:	3c400136 	bltu	r7,r17,2a95c <__umoddi3+0x174>
   2a958:	8180eb36 	bltu	r16,r6,2ad08 <__umoddi3+0x520>
   2a95c:	8185c83a 	sub	r2,r16,r6
   2a960:	89e3c83a 	sub	r17,r17,r7
   2a964:	8089803a 	cmpltu	r4,r16,r2
   2a968:	8939c83a 	sub	fp,r17,r4
   2a96c:	e007883a 	mov	r3,fp
   2a970:	00003706 	br	2aa50 <__umoddi3+0x268>
   2a974:	3000041e 	bne	r6,zero,2a988 <__umoddi3+0x1a0>
   2a978:	000b883a 	mov	r5,zero
   2a97c:	01000044 	movi	r4,1
   2a980:	0020c340 	call	20c34 <__udivsi3>
   2a984:	1027883a 	mov	r19,r2
   2a988:	00bfffd4 	movui	r2,65535
   2a98c:	14c0402e 	bgeu	r2,r19,2aa90 <__umoddi3+0x2a8>
   2a990:	00804034 	movhi	r2,256
   2a994:	10bfffc4 	addi	r2,r2,-1
   2a998:	14c0cd36 	bltu	r2,r19,2acd0 <__umoddi3+0x4e8>
   2a99c:	00800404 	movi	r2,16
   2a9a0:	9886d83a 	srl	r3,r19,r2
   2a9a4:	010000f4 	movhi	r4,3
   2a9a8:	2100c804 	addi	r4,r4,800
   2a9ac:	20c7883a 	add	r3,r4,r3
   2a9b0:	18c00003 	ldbu	r3,0(r3)
   2a9b4:	1887883a 	add	r3,r3,r2
   2a9b8:	00800804 	movi	r2,32
   2a9bc:	10e5c83a 	sub	r18,r2,r3
   2a9c0:	9000901e 	bne	r18,zero,2ac04 <__umoddi3+0x41c>
   2a9c4:	982cd43a 	srli	r22,r19,16
   2a9c8:	8ce3c83a 	sub	r17,r17,r19
   2a9cc:	9d7fffcc 	andi	r21,r19,65535
   2a9d0:	b00b883a 	mov	r5,r22
   2a9d4:	8809883a 	mov	r4,r17
   2a9d8:	0020c980 	call	20c98 <__umodsi3>
   2a9dc:	8809883a 	mov	r4,r17
   2a9e0:	b00b883a 	mov	r5,r22
   2a9e4:	1021883a 	mov	r16,r2
   2a9e8:	0020c340 	call	20c34 <__udivsi3>
   2a9ec:	8006943a 	slli	r3,r16,16
   2a9f0:	a008d43a 	srli	r4,r20,16
   2a9f4:	1545383a 	mul	r2,r2,r21
   2a9f8:	20c8b03a 	or	r4,r4,r3
   2a9fc:	2080042e 	bgeu	r4,r2,2aa10 <__umoddi3+0x228>
   2aa00:	24c9883a 	add	r4,r4,r19
   2aa04:	24c00236 	bltu	r4,r19,2aa10 <__umoddi3+0x228>
   2aa08:	2080012e 	bgeu	r4,r2,2aa10 <__umoddi3+0x228>
   2aa0c:	24c9883a 	add	r4,r4,r19
   2aa10:	20a1c83a 	sub	r16,r4,r2
   2aa14:	b00b883a 	mov	r5,r22
   2aa18:	8009883a 	mov	r4,r16
   2aa1c:	0020c980 	call	20c98 <__umodsi3>
   2aa20:	1023883a 	mov	r17,r2
   2aa24:	b00b883a 	mov	r5,r22
   2aa28:	8009883a 	mov	r4,r16
   2aa2c:	0020c340 	call	20c34 <__udivsi3>
   2aa30:	8822943a 	slli	r17,r17,16
   2aa34:	1545383a 	mul	r2,r2,r21
   2aa38:	a53fffcc 	andi	r20,r20,65535
   2aa3c:	a446b03a 	or	r3,r20,r17
   2aa40:	18bfb02e 	bgeu	r3,r2,2a904 <__alt_data_end+0xfffea904>
   2aa44:	003fab06 	br	2a8f4 <__alt_data_end+0xfffea8f4>
   2aa48:	2005883a 	mov	r2,r4
   2aa4c:	2807883a 	mov	r3,r5
   2aa50:	dfc00b17 	ldw	ra,44(sp)
   2aa54:	df000a17 	ldw	fp,40(sp)
   2aa58:	ddc00917 	ldw	r23,36(sp)
   2aa5c:	dd800817 	ldw	r22,32(sp)
   2aa60:	dd400717 	ldw	r21,28(sp)
   2aa64:	dd000617 	ldw	r20,24(sp)
   2aa68:	dcc00517 	ldw	r19,20(sp)
   2aa6c:	dc800417 	ldw	r18,16(sp)
   2aa70:	dc400317 	ldw	r17,12(sp)
   2aa74:	dc000217 	ldw	r16,8(sp)
   2aa78:	dec00c04 	addi	sp,sp,48
   2aa7c:	f800283a 	ret
   2aa80:	04c03fc4 	movi	r19,255
   2aa84:	99c9803a 	cmpltu	r4,r19,r7
   2aa88:	200890fa 	slli	r4,r4,3
   2aa8c:	003fa806 	br	2a930 <__alt_data_end+0xfffea930>
   2aa90:	00803fc4 	movi	r2,255
   2aa94:	14c5803a 	cmpltu	r2,r2,r19
   2aa98:	100490fa 	slli	r2,r2,3
   2aa9c:	003fc006 	br	2a9a0 <__alt_data_end+0xfffea9a0>
   2aaa0:	00804034 	movhi	r2,256
   2aaa4:	10bfffc4 	addi	r2,r2,-1
   2aaa8:	11808b36 	bltu	r2,r6,2acd8 <__umoddi3+0x4f0>
   2aaac:	01000404 	movi	r4,16
   2aab0:	003f6406 	br	2a844 <__alt_data_end+0xfffea844>
   2aab4:	34c4d83a 	srl	r2,r6,r19
   2aab8:	3d0e983a 	sll	r7,r7,r20
   2aabc:	8cf8d83a 	srl	fp,r17,r19
   2aac0:	8d10983a 	sll	r8,r17,r20
   2aac4:	38aab03a 	or	r21,r7,r2
   2aac8:	a82cd43a 	srli	r22,r21,16
   2aacc:	84e2d83a 	srl	r17,r16,r19
   2aad0:	e009883a 	mov	r4,fp
   2aad4:	b00b883a 	mov	r5,r22
   2aad8:	8a22b03a 	or	r17,r17,r8
   2aadc:	3524983a 	sll	r18,r6,r20
   2aae0:	0020c980 	call	20c98 <__umodsi3>
   2aae4:	e009883a 	mov	r4,fp
   2aae8:	b00b883a 	mov	r5,r22
   2aaec:	102f883a 	mov	r23,r2
   2aaf0:	0020c340 	call	20c34 <__udivsi3>
   2aaf4:	100d883a 	mov	r6,r2
   2aaf8:	b808943a 	slli	r4,r23,16
   2aafc:	aa3fffcc 	andi	r8,r21,65535
   2ab00:	8804d43a 	srli	r2,r17,16
   2ab04:	41af383a 	mul	r23,r8,r6
   2ab08:	8520983a 	sll	r16,r16,r20
   2ab0c:	1104b03a 	or	r2,r2,r4
   2ab10:	15c0042e 	bgeu	r2,r23,2ab24 <__umoddi3+0x33c>
   2ab14:	1545883a 	add	r2,r2,r21
   2ab18:	30ffffc4 	addi	r3,r6,-1
   2ab1c:	1540742e 	bgeu	r2,r21,2acf0 <__umoddi3+0x508>
   2ab20:	180d883a 	mov	r6,r3
   2ab24:	15efc83a 	sub	r23,r2,r23
   2ab28:	b00b883a 	mov	r5,r22
   2ab2c:	b809883a 	mov	r4,r23
   2ab30:	d9800115 	stw	r6,4(sp)
   2ab34:	da000015 	stw	r8,0(sp)
   2ab38:	0020c980 	call	20c98 <__umodsi3>
   2ab3c:	b00b883a 	mov	r5,r22
   2ab40:	b809883a 	mov	r4,r23
   2ab44:	1039883a 	mov	fp,r2
   2ab48:	0020c340 	call	20c34 <__udivsi3>
   2ab4c:	da000017 	ldw	r8,0(sp)
   2ab50:	e038943a 	slli	fp,fp,16
   2ab54:	100b883a 	mov	r5,r2
   2ab58:	4089383a 	mul	r4,r8,r2
   2ab5c:	8a3fffcc 	andi	r8,r17,65535
   2ab60:	4710b03a 	or	r8,r8,fp
   2ab64:	d9800117 	ldw	r6,4(sp)
   2ab68:	4100042e 	bgeu	r8,r4,2ab7c <__umoddi3+0x394>
   2ab6c:	4551883a 	add	r8,r8,r21
   2ab70:	10bfffc4 	addi	r2,r2,-1
   2ab74:	45405a2e 	bgeu	r8,r21,2ace0 <__umoddi3+0x4f8>
   2ab78:	100b883a 	mov	r5,r2
   2ab7c:	300c943a 	slli	r6,r6,16
   2ab80:	91ffffcc 	andi	r7,r18,65535
   2ab84:	9004d43a 	srli	r2,r18,16
   2ab88:	314cb03a 	or	r6,r6,r5
   2ab8c:	317fffcc 	andi	r5,r6,65535
   2ab90:	300cd43a 	srli	r6,r6,16
   2ab94:	29d3383a 	mul	r9,r5,r7
   2ab98:	288b383a 	mul	r5,r5,r2
   2ab9c:	31cf383a 	mul	r7,r6,r7
   2aba0:	4806d43a 	srli	r3,r9,16
   2aba4:	4111c83a 	sub	r8,r8,r4
   2aba8:	29cb883a 	add	r5,r5,r7
   2abac:	194b883a 	add	r5,r3,r5
   2abb0:	3085383a 	mul	r2,r6,r2
   2abb4:	29c0022e 	bgeu	r5,r7,2abc0 <__umoddi3+0x3d8>
   2abb8:	00c00074 	movhi	r3,1
   2abbc:	10c5883a 	add	r2,r2,r3
   2abc0:	2808d43a 	srli	r4,r5,16
   2abc4:	280a943a 	slli	r5,r5,16
   2abc8:	4a7fffcc 	andi	r9,r9,65535
   2abcc:	2085883a 	add	r2,r4,r2
   2abd0:	2a4b883a 	add	r5,r5,r9
   2abd4:	40803636 	bltu	r8,r2,2acb0 <__umoddi3+0x4c8>
   2abd8:	40804d26 	beq	r8,r2,2ad10 <__umoddi3+0x528>
   2abdc:	4089c83a 	sub	r4,r8,r2
   2abe0:	280f883a 	mov	r7,r5
   2abe4:	81cfc83a 	sub	r7,r16,r7
   2abe8:	81c7803a 	cmpltu	r3,r16,r7
   2abec:	20c7c83a 	sub	r3,r4,r3
   2abf0:	1cc4983a 	sll	r2,r3,r19
   2abf4:	3d0ed83a 	srl	r7,r7,r20
   2abf8:	1d06d83a 	srl	r3,r3,r20
   2abfc:	11c4b03a 	or	r2,r2,r7
   2ac00:	003f9306 	br	2aa50 <__alt_data_end+0xfffeaa50>
   2ac04:	9ca6983a 	sll	r19,r19,r18
   2ac08:	88e8d83a 	srl	r20,r17,r3
   2ac0c:	80c4d83a 	srl	r2,r16,r3
   2ac10:	982cd43a 	srli	r22,r19,16
   2ac14:	8ca2983a 	sll	r17,r17,r18
   2ac18:	a009883a 	mov	r4,r20
   2ac1c:	b00b883a 	mov	r5,r22
   2ac20:	1478b03a 	or	fp,r2,r17
   2ac24:	0020c980 	call	20c98 <__umodsi3>
   2ac28:	a009883a 	mov	r4,r20
   2ac2c:	b00b883a 	mov	r5,r22
   2ac30:	1023883a 	mov	r17,r2
   2ac34:	0020c340 	call	20c34 <__udivsi3>
   2ac38:	9d7fffcc 	andi	r21,r19,65535
   2ac3c:	880a943a 	slli	r5,r17,16
   2ac40:	e008d43a 	srli	r4,fp,16
   2ac44:	a885383a 	mul	r2,r21,r2
   2ac48:	84a8983a 	sll	r20,r16,r18
   2ac4c:	2148b03a 	or	r4,r4,r5
   2ac50:	2080042e 	bgeu	r4,r2,2ac64 <__umoddi3+0x47c>
   2ac54:	24c9883a 	add	r4,r4,r19
   2ac58:	24c00236 	bltu	r4,r19,2ac64 <__umoddi3+0x47c>
   2ac5c:	2080012e 	bgeu	r4,r2,2ac64 <__umoddi3+0x47c>
   2ac60:	24c9883a 	add	r4,r4,r19
   2ac64:	20a3c83a 	sub	r17,r4,r2
   2ac68:	b00b883a 	mov	r5,r22
   2ac6c:	8809883a 	mov	r4,r17
   2ac70:	0020c980 	call	20c98 <__umodsi3>
   2ac74:	102f883a 	mov	r23,r2
   2ac78:	8809883a 	mov	r4,r17
   2ac7c:	b00b883a 	mov	r5,r22
   2ac80:	0020c340 	call	20c34 <__udivsi3>
   2ac84:	b82e943a 	slli	r23,r23,16
   2ac88:	a885383a 	mul	r2,r21,r2
   2ac8c:	e13fffcc 	andi	r4,fp,65535
   2ac90:	25c8b03a 	or	r4,r4,r23
   2ac94:	2080042e 	bgeu	r4,r2,2aca8 <__umoddi3+0x4c0>
   2ac98:	24c9883a 	add	r4,r4,r19
   2ac9c:	24c00236 	bltu	r4,r19,2aca8 <__umoddi3+0x4c0>
   2aca0:	2080012e 	bgeu	r4,r2,2aca8 <__umoddi3+0x4c0>
   2aca4:	24c9883a 	add	r4,r4,r19
   2aca8:	20a3c83a 	sub	r17,r4,r2
   2acac:	003f4806 	br	2a9d0 <__alt_data_end+0xfffea9d0>
   2acb0:	2c8fc83a 	sub	r7,r5,r18
   2acb4:	1545c83a 	sub	r2,r2,r21
   2acb8:	29cb803a 	cmpltu	r5,r5,r7
   2acbc:	1145c83a 	sub	r2,r2,r5
   2acc0:	4089c83a 	sub	r4,r8,r2
   2acc4:	003fc706 	br	2abe4 <__alt_data_end+0xfffeabe4>
   2acc8:	01000604 	movi	r4,24
   2accc:	003f1806 	br	2a930 <__alt_data_end+0xfffea930>
   2acd0:	00800604 	movi	r2,24
   2acd4:	003f3206 	br	2a9a0 <__alt_data_end+0xfffea9a0>
   2acd8:	01000604 	movi	r4,24
   2acdc:	003ed906 	br	2a844 <__alt_data_end+0xfffea844>
   2ace0:	413fa52e 	bgeu	r8,r4,2ab78 <__alt_data_end+0xfffeab78>
   2ace4:	297fff84 	addi	r5,r5,-2
   2ace8:	4551883a 	add	r8,r8,r21
   2acec:	003fa306 	br	2ab7c <__alt_data_end+0xfffeab7c>
   2acf0:	15ff8b2e 	bgeu	r2,r23,2ab20 <__alt_data_end+0xfffeab20>
   2acf4:	31bfff84 	addi	r6,r6,-2
   2acf8:	1545883a 	add	r2,r2,r21
   2acfc:	003f8906 	br	2ab24 <__alt_data_end+0xfffeab24>
   2ad00:	24c9883a 	add	r4,r4,r19
   2ad04:	003eee06 	br	2a8c0 <__alt_data_end+0xfffea8c0>
   2ad08:	8005883a 	mov	r2,r16
   2ad0c:	003f1706 	br	2a96c <__alt_data_end+0xfffea96c>
   2ad10:	817fe736 	bltu	r16,r5,2acb0 <__alt_data_end+0xfffeacb0>
   2ad14:	280f883a 	mov	r7,r5
   2ad18:	0009883a 	mov	r4,zero
   2ad1c:	003fb106 	br	2abe4 <__alt_data_end+0xfffeabe4>

0002ad20 <__adddf3>:
   2ad20:	02c00434 	movhi	r11,16
   2ad24:	5affffc4 	addi	r11,r11,-1
   2ad28:	2806d7fa 	srli	r3,r5,31
   2ad2c:	2ad4703a 	and	r10,r5,r11
   2ad30:	3ad2703a 	and	r9,r7,r11
   2ad34:	3804d53a 	srli	r2,r7,20
   2ad38:	3018d77a 	srli	r12,r6,29
   2ad3c:	280ad53a 	srli	r5,r5,20
   2ad40:	501490fa 	slli	r10,r10,3
   2ad44:	2010d77a 	srli	r8,r4,29
   2ad48:	481290fa 	slli	r9,r9,3
   2ad4c:	380ed7fa 	srli	r7,r7,31
   2ad50:	defffb04 	addi	sp,sp,-20
   2ad54:	dc800215 	stw	r18,8(sp)
   2ad58:	dc400115 	stw	r17,4(sp)
   2ad5c:	dc000015 	stw	r16,0(sp)
   2ad60:	dfc00415 	stw	ra,16(sp)
   2ad64:	dcc00315 	stw	r19,12(sp)
   2ad68:	1c803fcc 	andi	r18,r3,255
   2ad6c:	2c01ffcc 	andi	r16,r5,2047
   2ad70:	5210b03a 	or	r8,r10,r8
   2ad74:	202290fa 	slli	r17,r4,3
   2ad78:	1081ffcc 	andi	r2,r2,2047
   2ad7c:	4b12b03a 	or	r9,r9,r12
   2ad80:	300c90fa 	slli	r6,r6,3
   2ad84:	91c07526 	beq	r18,r7,2af5c <__adddf3+0x23c>
   2ad88:	8087c83a 	sub	r3,r16,r2
   2ad8c:	00c0ab0e 	bge	zero,r3,2b03c <__adddf3+0x31c>
   2ad90:	10002a1e 	bne	r2,zero,2ae3c <__adddf3+0x11c>
   2ad94:	4984b03a 	or	r2,r9,r6
   2ad98:	1000961e 	bne	r2,zero,2aff4 <__adddf3+0x2d4>
   2ad9c:	888001cc 	andi	r2,r17,7
   2ada0:	10000726 	beq	r2,zero,2adc0 <__adddf3+0xa0>
   2ada4:	888003cc 	andi	r2,r17,15
   2ada8:	00c00104 	movi	r3,4
   2adac:	10c00426 	beq	r2,r3,2adc0 <__adddf3+0xa0>
   2adb0:	88c7883a 	add	r3,r17,r3
   2adb4:	1c63803a 	cmpltu	r17,r3,r17
   2adb8:	4451883a 	add	r8,r8,r17
   2adbc:	1823883a 	mov	r17,r3
   2adc0:	4080202c 	andhi	r2,r8,128
   2adc4:	10005926 	beq	r2,zero,2af2c <__adddf3+0x20c>
   2adc8:	84000044 	addi	r16,r16,1
   2adcc:	0081ffc4 	movi	r2,2047
   2add0:	8080ba26 	beq	r16,r2,2b0bc <__adddf3+0x39c>
   2add4:	00bfe034 	movhi	r2,65408
   2add8:	10bfffc4 	addi	r2,r2,-1
   2addc:	4090703a 	and	r8,r8,r2
   2ade0:	4004977a 	slli	r2,r8,29
   2ade4:	4010927a 	slli	r8,r8,9
   2ade8:	8822d0fa 	srli	r17,r17,3
   2adec:	8401ffcc 	andi	r16,r16,2047
   2adf0:	4010d33a 	srli	r8,r8,12
   2adf4:	9007883a 	mov	r3,r18
   2adf8:	1444b03a 	or	r2,r2,r17
   2adfc:	8401ffcc 	andi	r16,r16,2047
   2ae00:	8020953a 	slli	r16,r16,20
   2ae04:	18c03fcc 	andi	r3,r3,255
   2ae08:	01000434 	movhi	r4,16
   2ae0c:	213fffc4 	addi	r4,r4,-1
   2ae10:	180697fa 	slli	r3,r3,31
   2ae14:	4110703a 	and	r8,r8,r4
   2ae18:	4410b03a 	or	r8,r8,r16
   2ae1c:	40c6b03a 	or	r3,r8,r3
   2ae20:	dfc00417 	ldw	ra,16(sp)
   2ae24:	dcc00317 	ldw	r19,12(sp)
   2ae28:	dc800217 	ldw	r18,8(sp)
   2ae2c:	dc400117 	ldw	r17,4(sp)
   2ae30:	dc000017 	ldw	r16,0(sp)
   2ae34:	dec00504 	addi	sp,sp,20
   2ae38:	f800283a 	ret
   2ae3c:	0081ffc4 	movi	r2,2047
   2ae40:	80bfd626 	beq	r16,r2,2ad9c <__alt_data_end+0xfffead9c>
   2ae44:	4a402034 	orhi	r9,r9,128
   2ae48:	00800e04 	movi	r2,56
   2ae4c:	10c09f16 	blt	r2,r3,2b0cc <__adddf3+0x3ac>
   2ae50:	008007c4 	movi	r2,31
   2ae54:	10c0c216 	blt	r2,r3,2b160 <__adddf3+0x440>
   2ae58:	00800804 	movi	r2,32
   2ae5c:	10c5c83a 	sub	r2,r2,r3
   2ae60:	488a983a 	sll	r5,r9,r2
   2ae64:	30c8d83a 	srl	r4,r6,r3
   2ae68:	3084983a 	sll	r2,r6,r2
   2ae6c:	48c6d83a 	srl	r3,r9,r3
   2ae70:	290cb03a 	or	r6,r5,r4
   2ae74:	1004c03a 	cmpne	r2,r2,zero
   2ae78:	308cb03a 	or	r6,r6,r2
   2ae7c:	898dc83a 	sub	r6,r17,r6
   2ae80:	89a3803a 	cmpltu	r17,r17,r6
   2ae84:	40d1c83a 	sub	r8,r8,r3
   2ae88:	4451c83a 	sub	r8,r8,r17
   2ae8c:	3023883a 	mov	r17,r6
   2ae90:	4080202c 	andhi	r2,r8,128
   2ae94:	10002326 	beq	r2,zero,2af24 <__adddf3+0x204>
   2ae98:	04c02034 	movhi	r19,128
   2ae9c:	9cffffc4 	addi	r19,r19,-1
   2aea0:	44e6703a 	and	r19,r8,r19
   2aea4:	98007626 	beq	r19,zero,2b080 <__adddf3+0x360>
   2aea8:	9809883a 	mov	r4,r19
   2aeac:	002d3240 	call	2d324 <__clzsi2>
   2aeb0:	10fffe04 	addi	r3,r2,-8
   2aeb4:	010007c4 	movi	r4,31
   2aeb8:	20c07716 	blt	r4,r3,2b098 <__adddf3+0x378>
   2aebc:	00800804 	movi	r2,32
   2aec0:	10c5c83a 	sub	r2,r2,r3
   2aec4:	8884d83a 	srl	r2,r17,r2
   2aec8:	98d0983a 	sll	r8,r19,r3
   2aecc:	88e2983a 	sll	r17,r17,r3
   2aed0:	1204b03a 	or	r2,r2,r8
   2aed4:	1c007416 	blt	r3,r16,2b0a8 <__adddf3+0x388>
   2aed8:	1c21c83a 	sub	r16,r3,r16
   2aedc:	82000044 	addi	r8,r16,1
   2aee0:	00c007c4 	movi	r3,31
   2aee4:	1a009116 	blt	r3,r8,2b12c <__adddf3+0x40c>
   2aee8:	00c00804 	movi	r3,32
   2aeec:	1a07c83a 	sub	r3,r3,r8
   2aef0:	8a08d83a 	srl	r4,r17,r8
   2aef4:	88e2983a 	sll	r17,r17,r3
   2aef8:	10c6983a 	sll	r3,r2,r3
   2aefc:	1210d83a 	srl	r8,r2,r8
   2af00:	8804c03a 	cmpne	r2,r17,zero
   2af04:	1906b03a 	or	r3,r3,r4
   2af08:	18a2b03a 	or	r17,r3,r2
   2af0c:	0021883a 	mov	r16,zero
   2af10:	003fa206 	br	2ad9c <__alt_data_end+0xfffead9c>
   2af14:	1890b03a 	or	r8,r3,r2
   2af18:	40017d26 	beq	r8,zero,2b510 <__adddf3+0x7f0>
   2af1c:	1011883a 	mov	r8,r2
   2af20:	1823883a 	mov	r17,r3
   2af24:	888001cc 	andi	r2,r17,7
   2af28:	103f9e1e 	bne	r2,zero,2ada4 <__alt_data_end+0xfffeada4>
   2af2c:	4004977a 	slli	r2,r8,29
   2af30:	8822d0fa 	srli	r17,r17,3
   2af34:	4010d0fa 	srli	r8,r8,3
   2af38:	9007883a 	mov	r3,r18
   2af3c:	1444b03a 	or	r2,r2,r17
   2af40:	0101ffc4 	movi	r4,2047
   2af44:	81002426 	beq	r16,r4,2afd8 <__adddf3+0x2b8>
   2af48:	8120703a 	and	r16,r16,r4
   2af4c:	01000434 	movhi	r4,16
   2af50:	213fffc4 	addi	r4,r4,-1
   2af54:	4110703a 	and	r8,r8,r4
   2af58:	003fa806 	br	2adfc <__alt_data_end+0xfffeadfc>
   2af5c:	8089c83a 	sub	r4,r16,r2
   2af60:	01005e0e 	bge	zero,r4,2b0dc <__adddf3+0x3bc>
   2af64:	10002b26 	beq	r2,zero,2b014 <__adddf3+0x2f4>
   2af68:	0081ffc4 	movi	r2,2047
   2af6c:	80bf8b26 	beq	r16,r2,2ad9c <__alt_data_end+0xfffead9c>
   2af70:	4a402034 	orhi	r9,r9,128
   2af74:	00800e04 	movi	r2,56
   2af78:	1100a40e 	bge	r2,r4,2b20c <__adddf3+0x4ec>
   2af7c:	498cb03a 	or	r6,r9,r6
   2af80:	300ac03a 	cmpne	r5,r6,zero
   2af84:	0013883a 	mov	r9,zero
   2af88:	2c4b883a 	add	r5,r5,r17
   2af8c:	2c63803a 	cmpltu	r17,r5,r17
   2af90:	4a11883a 	add	r8,r9,r8
   2af94:	8a11883a 	add	r8,r17,r8
   2af98:	2823883a 	mov	r17,r5
   2af9c:	4080202c 	andhi	r2,r8,128
   2afa0:	103fe026 	beq	r2,zero,2af24 <__alt_data_end+0xfffeaf24>
   2afa4:	84000044 	addi	r16,r16,1
   2afa8:	0081ffc4 	movi	r2,2047
   2afac:	8080d226 	beq	r16,r2,2b2f8 <__adddf3+0x5d8>
   2afb0:	00bfe034 	movhi	r2,65408
   2afb4:	10bfffc4 	addi	r2,r2,-1
   2afb8:	4090703a 	and	r8,r8,r2
   2afbc:	880ad07a 	srli	r5,r17,1
   2afc0:	400897fa 	slli	r4,r8,31
   2afc4:	88c0004c 	andi	r3,r17,1
   2afc8:	28e2b03a 	or	r17,r5,r3
   2afcc:	4010d07a 	srli	r8,r8,1
   2afd0:	2462b03a 	or	r17,r4,r17
   2afd4:	003f7106 	br	2ad9c <__alt_data_end+0xfffead9c>
   2afd8:	4088b03a 	or	r4,r8,r2
   2afdc:	20014526 	beq	r4,zero,2b4f4 <__adddf3+0x7d4>
   2afe0:	01000434 	movhi	r4,16
   2afe4:	42000234 	orhi	r8,r8,8
   2afe8:	213fffc4 	addi	r4,r4,-1
   2afec:	4110703a 	and	r8,r8,r4
   2aff0:	003f8206 	br	2adfc <__alt_data_end+0xfffeadfc>
   2aff4:	18ffffc4 	addi	r3,r3,-1
   2aff8:	1800491e 	bne	r3,zero,2b120 <__adddf3+0x400>
   2affc:	898bc83a 	sub	r5,r17,r6
   2b000:	8963803a 	cmpltu	r17,r17,r5
   2b004:	4251c83a 	sub	r8,r8,r9
   2b008:	4451c83a 	sub	r8,r8,r17
   2b00c:	2823883a 	mov	r17,r5
   2b010:	003f9f06 	br	2ae90 <__alt_data_end+0xfffeae90>
   2b014:	4984b03a 	or	r2,r9,r6
   2b018:	103f6026 	beq	r2,zero,2ad9c <__alt_data_end+0xfffead9c>
   2b01c:	213fffc4 	addi	r4,r4,-1
   2b020:	2000931e 	bne	r4,zero,2b270 <__adddf3+0x550>
   2b024:	898d883a 	add	r6,r17,r6
   2b028:	3463803a 	cmpltu	r17,r6,r17
   2b02c:	4251883a 	add	r8,r8,r9
   2b030:	8a11883a 	add	r8,r17,r8
   2b034:	3023883a 	mov	r17,r6
   2b038:	003fd806 	br	2af9c <__alt_data_end+0xfffeaf9c>
   2b03c:	1800541e 	bne	r3,zero,2b190 <__adddf3+0x470>
   2b040:	80800044 	addi	r2,r16,1
   2b044:	1081ffcc 	andi	r2,r2,2047
   2b048:	00c00044 	movi	r3,1
   2b04c:	1880a00e 	bge	r3,r2,2b2d0 <__adddf3+0x5b0>
   2b050:	8989c83a 	sub	r4,r17,r6
   2b054:	8905803a 	cmpltu	r2,r17,r4
   2b058:	4267c83a 	sub	r19,r8,r9
   2b05c:	98a7c83a 	sub	r19,r19,r2
   2b060:	9880202c 	andhi	r2,r19,128
   2b064:	10006326 	beq	r2,zero,2b1f4 <__adddf3+0x4d4>
   2b068:	3463c83a 	sub	r17,r6,r17
   2b06c:	4a07c83a 	sub	r3,r9,r8
   2b070:	344d803a 	cmpltu	r6,r6,r17
   2b074:	19a7c83a 	sub	r19,r3,r6
   2b078:	3825883a 	mov	r18,r7
   2b07c:	983f8a1e 	bne	r19,zero,2aea8 <__alt_data_end+0xfffeaea8>
   2b080:	8809883a 	mov	r4,r17
   2b084:	002d3240 	call	2d324 <__clzsi2>
   2b088:	10800804 	addi	r2,r2,32
   2b08c:	10fffe04 	addi	r3,r2,-8
   2b090:	010007c4 	movi	r4,31
   2b094:	20ff890e 	bge	r4,r3,2aebc <__alt_data_end+0xfffeaebc>
   2b098:	10bff604 	addi	r2,r2,-40
   2b09c:	8884983a 	sll	r2,r17,r2
   2b0a0:	0023883a 	mov	r17,zero
   2b0a4:	1c3f8c0e 	bge	r3,r16,2aed8 <__alt_data_end+0xfffeaed8>
   2b0a8:	023fe034 	movhi	r8,65408
   2b0ac:	423fffc4 	addi	r8,r8,-1
   2b0b0:	80e1c83a 	sub	r16,r16,r3
   2b0b4:	1210703a 	and	r8,r2,r8
   2b0b8:	003f3806 	br	2ad9c <__alt_data_end+0xfffead9c>
   2b0bc:	9007883a 	mov	r3,r18
   2b0c0:	0011883a 	mov	r8,zero
   2b0c4:	0005883a 	mov	r2,zero
   2b0c8:	003f4c06 	br	2adfc <__alt_data_end+0xfffeadfc>
   2b0cc:	498cb03a 	or	r6,r9,r6
   2b0d0:	300cc03a 	cmpne	r6,r6,zero
   2b0d4:	0007883a 	mov	r3,zero
   2b0d8:	003f6806 	br	2ae7c <__alt_data_end+0xfffeae7c>
   2b0dc:	20009c1e 	bne	r4,zero,2b350 <__adddf3+0x630>
   2b0e0:	80800044 	addi	r2,r16,1
   2b0e4:	1141ffcc 	andi	r5,r2,2047
   2b0e8:	01000044 	movi	r4,1
   2b0ec:	2140670e 	bge	r4,r5,2b28c <__adddf3+0x56c>
   2b0f0:	0101ffc4 	movi	r4,2047
   2b0f4:	11007f26 	beq	r2,r4,2b2f4 <__adddf3+0x5d4>
   2b0f8:	898d883a 	add	r6,r17,r6
   2b0fc:	4247883a 	add	r3,r8,r9
   2b100:	3451803a 	cmpltu	r8,r6,r17
   2b104:	40d1883a 	add	r8,r8,r3
   2b108:	402297fa 	slli	r17,r8,31
   2b10c:	300cd07a 	srli	r6,r6,1
   2b110:	4010d07a 	srli	r8,r8,1
   2b114:	1021883a 	mov	r16,r2
   2b118:	89a2b03a 	or	r17,r17,r6
   2b11c:	003f1f06 	br	2ad9c <__alt_data_end+0xfffead9c>
   2b120:	0081ffc4 	movi	r2,2047
   2b124:	80bf481e 	bne	r16,r2,2ae48 <__alt_data_end+0xfffeae48>
   2b128:	003f1c06 	br	2ad9c <__alt_data_end+0xfffead9c>
   2b12c:	843ff844 	addi	r16,r16,-31
   2b130:	01000804 	movi	r4,32
   2b134:	1406d83a 	srl	r3,r2,r16
   2b138:	41005026 	beq	r8,r4,2b27c <__adddf3+0x55c>
   2b13c:	01001004 	movi	r4,64
   2b140:	2211c83a 	sub	r8,r4,r8
   2b144:	1204983a 	sll	r2,r2,r8
   2b148:	88a2b03a 	or	r17,r17,r2
   2b14c:	8822c03a 	cmpne	r17,r17,zero
   2b150:	1c62b03a 	or	r17,r3,r17
   2b154:	0011883a 	mov	r8,zero
   2b158:	0021883a 	mov	r16,zero
   2b15c:	003f7106 	br	2af24 <__alt_data_end+0xfffeaf24>
   2b160:	193ff804 	addi	r4,r3,-32
   2b164:	00800804 	movi	r2,32
   2b168:	4908d83a 	srl	r4,r9,r4
   2b16c:	18804526 	beq	r3,r2,2b284 <__adddf3+0x564>
   2b170:	00801004 	movi	r2,64
   2b174:	10c5c83a 	sub	r2,r2,r3
   2b178:	4886983a 	sll	r3,r9,r2
   2b17c:	198cb03a 	or	r6,r3,r6
   2b180:	300cc03a 	cmpne	r6,r6,zero
   2b184:	218cb03a 	or	r6,r4,r6
   2b188:	0007883a 	mov	r3,zero
   2b18c:	003f3b06 	br	2ae7c <__alt_data_end+0xfffeae7c>
   2b190:	80002a26 	beq	r16,zero,2b23c <__adddf3+0x51c>
   2b194:	0101ffc4 	movi	r4,2047
   2b198:	11006826 	beq	r2,r4,2b33c <__adddf3+0x61c>
   2b19c:	00c7c83a 	sub	r3,zero,r3
   2b1a0:	42002034 	orhi	r8,r8,128
   2b1a4:	01000e04 	movi	r4,56
   2b1a8:	20c07c16 	blt	r4,r3,2b39c <__adddf3+0x67c>
   2b1ac:	010007c4 	movi	r4,31
   2b1b0:	20c0da16 	blt	r4,r3,2b51c <__adddf3+0x7fc>
   2b1b4:	01000804 	movi	r4,32
   2b1b8:	20c9c83a 	sub	r4,r4,r3
   2b1bc:	4114983a 	sll	r10,r8,r4
   2b1c0:	88cad83a 	srl	r5,r17,r3
   2b1c4:	8908983a 	sll	r4,r17,r4
   2b1c8:	40c6d83a 	srl	r3,r8,r3
   2b1cc:	5162b03a 	or	r17,r10,r5
   2b1d0:	2008c03a 	cmpne	r4,r4,zero
   2b1d4:	8922b03a 	or	r17,r17,r4
   2b1d8:	3463c83a 	sub	r17,r6,r17
   2b1dc:	48c7c83a 	sub	r3,r9,r3
   2b1e0:	344d803a 	cmpltu	r6,r6,r17
   2b1e4:	1991c83a 	sub	r8,r3,r6
   2b1e8:	1021883a 	mov	r16,r2
   2b1ec:	3825883a 	mov	r18,r7
   2b1f0:	003f2706 	br	2ae90 <__alt_data_end+0xfffeae90>
   2b1f4:	24d0b03a 	or	r8,r4,r19
   2b1f8:	40001b1e 	bne	r8,zero,2b268 <__adddf3+0x548>
   2b1fc:	0005883a 	mov	r2,zero
   2b200:	0007883a 	mov	r3,zero
   2b204:	0021883a 	mov	r16,zero
   2b208:	003f4d06 	br	2af40 <__alt_data_end+0xfffeaf40>
   2b20c:	008007c4 	movi	r2,31
   2b210:	11003c16 	blt	r2,r4,2b304 <__adddf3+0x5e4>
   2b214:	00800804 	movi	r2,32
   2b218:	1105c83a 	sub	r2,r2,r4
   2b21c:	488e983a 	sll	r7,r9,r2
   2b220:	310ad83a 	srl	r5,r6,r4
   2b224:	3084983a 	sll	r2,r6,r2
   2b228:	4912d83a 	srl	r9,r9,r4
   2b22c:	394ab03a 	or	r5,r7,r5
   2b230:	1004c03a 	cmpne	r2,r2,zero
   2b234:	288ab03a 	or	r5,r5,r2
   2b238:	003f5306 	br	2af88 <__alt_data_end+0xfffeaf88>
   2b23c:	4448b03a 	or	r4,r8,r17
   2b240:	20003e26 	beq	r4,zero,2b33c <__adddf3+0x61c>
   2b244:	00c6303a 	nor	r3,zero,r3
   2b248:	18003a1e 	bne	r3,zero,2b334 <__adddf3+0x614>
   2b24c:	3463c83a 	sub	r17,r6,r17
   2b250:	4a07c83a 	sub	r3,r9,r8
   2b254:	344d803a 	cmpltu	r6,r6,r17
   2b258:	1991c83a 	sub	r8,r3,r6
   2b25c:	1021883a 	mov	r16,r2
   2b260:	3825883a 	mov	r18,r7
   2b264:	003f0a06 	br	2ae90 <__alt_data_end+0xfffeae90>
   2b268:	2023883a 	mov	r17,r4
   2b26c:	003f0d06 	br	2aea4 <__alt_data_end+0xfffeaea4>
   2b270:	0081ffc4 	movi	r2,2047
   2b274:	80bf3f1e 	bne	r16,r2,2af74 <__alt_data_end+0xfffeaf74>
   2b278:	003ec806 	br	2ad9c <__alt_data_end+0xfffead9c>
   2b27c:	0005883a 	mov	r2,zero
   2b280:	003fb106 	br	2b148 <__alt_data_end+0xfffeb148>
   2b284:	0007883a 	mov	r3,zero
   2b288:	003fbc06 	br	2b17c <__alt_data_end+0xfffeb17c>
   2b28c:	4444b03a 	or	r2,r8,r17
   2b290:	8000871e 	bne	r16,zero,2b4b0 <__adddf3+0x790>
   2b294:	1000ba26 	beq	r2,zero,2b580 <__adddf3+0x860>
   2b298:	4984b03a 	or	r2,r9,r6
   2b29c:	103ebf26 	beq	r2,zero,2ad9c <__alt_data_end+0xfffead9c>
   2b2a0:	8985883a 	add	r2,r17,r6
   2b2a4:	4247883a 	add	r3,r8,r9
   2b2a8:	1451803a 	cmpltu	r8,r2,r17
   2b2ac:	40d1883a 	add	r8,r8,r3
   2b2b0:	40c0202c 	andhi	r3,r8,128
   2b2b4:	1023883a 	mov	r17,r2
   2b2b8:	183f1a26 	beq	r3,zero,2af24 <__alt_data_end+0xfffeaf24>
   2b2bc:	00bfe034 	movhi	r2,65408
   2b2c0:	10bfffc4 	addi	r2,r2,-1
   2b2c4:	2021883a 	mov	r16,r4
   2b2c8:	4090703a 	and	r8,r8,r2
   2b2cc:	003eb306 	br	2ad9c <__alt_data_end+0xfffead9c>
   2b2d0:	4444b03a 	or	r2,r8,r17
   2b2d4:	8000291e 	bne	r16,zero,2b37c <__adddf3+0x65c>
   2b2d8:	10004b1e 	bne	r2,zero,2b408 <__adddf3+0x6e8>
   2b2dc:	4990b03a 	or	r8,r9,r6
   2b2e0:	40008b26 	beq	r8,zero,2b510 <__adddf3+0x7f0>
   2b2e4:	4811883a 	mov	r8,r9
   2b2e8:	3023883a 	mov	r17,r6
   2b2ec:	3825883a 	mov	r18,r7
   2b2f0:	003eaa06 	br	2ad9c <__alt_data_end+0xfffead9c>
   2b2f4:	1021883a 	mov	r16,r2
   2b2f8:	0011883a 	mov	r8,zero
   2b2fc:	0005883a 	mov	r2,zero
   2b300:	003f0f06 	br	2af40 <__alt_data_end+0xfffeaf40>
   2b304:	217ff804 	addi	r5,r4,-32
   2b308:	00800804 	movi	r2,32
   2b30c:	494ad83a 	srl	r5,r9,r5
   2b310:	20807d26 	beq	r4,r2,2b508 <__adddf3+0x7e8>
   2b314:	00801004 	movi	r2,64
   2b318:	1109c83a 	sub	r4,r2,r4
   2b31c:	4912983a 	sll	r9,r9,r4
   2b320:	498cb03a 	or	r6,r9,r6
   2b324:	300cc03a 	cmpne	r6,r6,zero
   2b328:	298ab03a 	or	r5,r5,r6
   2b32c:	0013883a 	mov	r9,zero
   2b330:	003f1506 	br	2af88 <__alt_data_end+0xfffeaf88>
   2b334:	0101ffc4 	movi	r4,2047
   2b338:	113f9a1e 	bne	r2,r4,2b1a4 <__alt_data_end+0xfffeb1a4>
   2b33c:	4811883a 	mov	r8,r9
   2b340:	3023883a 	mov	r17,r6
   2b344:	1021883a 	mov	r16,r2
   2b348:	3825883a 	mov	r18,r7
   2b34c:	003e9306 	br	2ad9c <__alt_data_end+0xfffead9c>
   2b350:	8000161e 	bne	r16,zero,2b3ac <__adddf3+0x68c>
   2b354:	444ab03a 	or	r5,r8,r17
   2b358:	28005126 	beq	r5,zero,2b4a0 <__adddf3+0x780>
   2b35c:	0108303a 	nor	r4,zero,r4
   2b360:	20004d1e 	bne	r4,zero,2b498 <__adddf3+0x778>
   2b364:	89a3883a 	add	r17,r17,r6
   2b368:	4253883a 	add	r9,r8,r9
   2b36c:	898d803a 	cmpltu	r6,r17,r6
   2b370:	3251883a 	add	r8,r6,r9
   2b374:	1021883a 	mov	r16,r2
   2b378:	003f0806 	br	2af9c <__alt_data_end+0xfffeaf9c>
   2b37c:	1000301e 	bne	r2,zero,2b440 <__adddf3+0x720>
   2b380:	4984b03a 	or	r2,r9,r6
   2b384:	10007126 	beq	r2,zero,2b54c <__adddf3+0x82c>
   2b388:	4811883a 	mov	r8,r9
   2b38c:	3023883a 	mov	r17,r6
   2b390:	3825883a 	mov	r18,r7
   2b394:	0401ffc4 	movi	r16,2047
   2b398:	003e8006 	br	2ad9c <__alt_data_end+0xfffead9c>
   2b39c:	4462b03a 	or	r17,r8,r17
   2b3a0:	8822c03a 	cmpne	r17,r17,zero
   2b3a4:	0007883a 	mov	r3,zero
   2b3a8:	003f8b06 	br	2b1d8 <__alt_data_end+0xfffeb1d8>
   2b3ac:	0141ffc4 	movi	r5,2047
   2b3b0:	11403b26 	beq	r2,r5,2b4a0 <__adddf3+0x780>
   2b3b4:	0109c83a 	sub	r4,zero,r4
   2b3b8:	42002034 	orhi	r8,r8,128
   2b3bc:	01400e04 	movi	r5,56
   2b3c0:	29006716 	blt	r5,r4,2b560 <__adddf3+0x840>
   2b3c4:	014007c4 	movi	r5,31
   2b3c8:	29007016 	blt	r5,r4,2b58c <__adddf3+0x86c>
   2b3cc:	01400804 	movi	r5,32
   2b3d0:	290bc83a 	sub	r5,r5,r4
   2b3d4:	4154983a 	sll	r10,r8,r5
   2b3d8:	890ed83a 	srl	r7,r17,r4
   2b3dc:	894a983a 	sll	r5,r17,r5
   2b3e0:	4108d83a 	srl	r4,r8,r4
   2b3e4:	51e2b03a 	or	r17,r10,r7
   2b3e8:	280ac03a 	cmpne	r5,r5,zero
   2b3ec:	8962b03a 	or	r17,r17,r5
   2b3f0:	89a3883a 	add	r17,r17,r6
   2b3f4:	2253883a 	add	r9,r4,r9
   2b3f8:	898d803a 	cmpltu	r6,r17,r6
   2b3fc:	3251883a 	add	r8,r6,r9
   2b400:	1021883a 	mov	r16,r2
   2b404:	003ee506 	br	2af9c <__alt_data_end+0xfffeaf9c>
   2b408:	4984b03a 	or	r2,r9,r6
   2b40c:	103e6326 	beq	r2,zero,2ad9c <__alt_data_end+0xfffead9c>
   2b410:	8987c83a 	sub	r3,r17,r6
   2b414:	88c9803a 	cmpltu	r4,r17,r3
   2b418:	4245c83a 	sub	r2,r8,r9
   2b41c:	1105c83a 	sub	r2,r2,r4
   2b420:	1100202c 	andhi	r4,r2,128
   2b424:	203ebb26 	beq	r4,zero,2af14 <__alt_data_end+0xfffeaf14>
   2b428:	3463c83a 	sub	r17,r6,r17
   2b42c:	4a07c83a 	sub	r3,r9,r8
   2b430:	344d803a 	cmpltu	r6,r6,r17
   2b434:	1991c83a 	sub	r8,r3,r6
   2b438:	3825883a 	mov	r18,r7
   2b43c:	003e5706 	br	2ad9c <__alt_data_end+0xfffead9c>
   2b440:	4984b03a 	or	r2,r9,r6
   2b444:	10002e26 	beq	r2,zero,2b500 <__adddf3+0x7e0>
   2b448:	4004d0fa 	srli	r2,r8,3
   2b44c:	8822d0fa 	srli	r17,r17,3
   2b450:	4010977a 	slli	r8,r8,29
   2b454:	10c0022c 	andhi	r3,r2,8
   2b458:	4462b03a 	or	r17,r8,r17
   2b45c:	18000826 	beq	r3,zero,2b480 <__adddf3+0x760>
   2b460:	4808d0fa 	srli	r4,r9,3
   2b464:	20c0022c 	andhi	r3,r4,8
   2b468:	1800051e 	bne	r3,zero,2b480 <__adddf3+0x760>
   2b46c:	300cd0fa 	srli	r6,r6,3
   2b470:	4806977a 	slli	r3,r9,29
   2b474:	2005883a 	mov	r2,r4
   2b478:	3825883a 	mov	r18,r7
   2b47c:	19a2b03a 	or	r17,r3,r6
   2b480:	8810d77a 	srli	r8,r17,29
   2b484:	100490fa 	slli	r2,r2,3
   2b488:	882290fa 	slli	r17,r17,3
   2b48c:	0401ffc4 	movi	r16,2047
   2b490:	4090b03a 	or	r8,r8,r2
   2b494:	003e4106 	br	2ad9c <__alt_data_end+0xfffead9c>
   2b498:	0141ffc4 	movi	r5,2047
   2b49c:	117fc71e 	bne	r2,r5,2b3bc <__alt_data_end+0xfffeb3bc>
   2b4a0:	4811883a 	mov	r8,r9
   2b4a4:	3023883a 	mov	r17,r6
   2b4a8:	1021883a 	mov	r16,r2
   2b4ac:	003e3b06 	br	2ad9c <__alt_data_end+0xfffead9c>
   2b4b0:	10002f26 	beq	r2,zero,2b570 <__adddf3+0x850>
   2b4b4:	4984b03a 	or	r2,r9,r6
   2b4b8:	10001126 	beq	r2,zero,2b500 <__adddf3+0x7e0>
   2b4bc:	4004d0fa 	srli	r2,r8,3
   2b4c0:	8822d0fa 	srli	r17,r17,3
   2b4c4:	4010977a 	slli	r8,r8,29
   2b4c8:	10c0022c 	andhi	r3,r2,8
   2b4cc:	4462b03a 	or	r17,r8,r17
   2b4d0:	183feb26 	beq	r3,zero,2b480 <__alt_data_end+0xfffeb480>
   2b4d4:	4808d0fa 	srli	r4,r9,3
   2b4d8:	20c0022c 	andhi	r3,r4,8
   2b4dc:	183fe81e 	bne	r3,zero,2b480 <__alt_data_end+0xfffeb480>
   2b4e0:	300cd0fa 	srli	r6,r6,3
   2b4e4:	4806977a 	slli	r3,r9,29
   2b4e8:	2005883a 	mov	r2,r4
   2b4ec:	19a2b03a 	or	r17,r3,r6
   2b4f0:	003fe306 	br	2b480 <__alt_data_end+0xfffeb480>
   2b4f4:	0011883a 	mov	r8,zero
   2b4f8:	0005883a 	mov	r2,zero
   2b4fc:	003e3f06 	br	2adfc <__alt_data_end+0xfffeadfc>
   2b500:	0401ffc4 	movi	r16,2047
   2b504:	003e2506 	br	2ad9c <__alt_data_end+0xfffead9c>
   2b508:	0013883a 	mov	r9,zero
   2b50c:	003f8406 	br	2b320 <__alt_data_end+0xfffeb320>
   2b510:	0005883a 	mov	r2,zero
   2b514:	0007883a 	mov	r3,zero
   2b518:	003e8906 	br	2af40 <__alt_data_end+0xfffeaf40>
   2b51c:	197ff804 	addi	r5,r3,-32
   2b520:	01000804 	movi	r4,32
   2b524:	414ad83a 	srl	r5,r8,r5
   2b528:	19002426 	beq	r3,r4,2b5bc <__adddf3+0x89c>
   2b52c:	01001004 	movi	r4,64
   2b530:	20c7c83a 	sub	r3,r4,r3
   2b534:	40c6983a 	sll	r3,r8,r3
   2b538:	1c46b03a 	or	r3,r3,r17
   2b53c:	1806c03a 	cmpne	r3,r3,zero
   2b540:	28e2b03a 	or	r17,r5,r3
   2b544:	0007883a 	mov	r3,zero
   2b548:	003f2306 	br	2b1d8 <__alt_data_end+0xfffeb1d8>
   2b54c:	0007883a 	mov	r3,zero
   2b550:	5811883a 	mov	r8,r11
   2b554:	00bfffc4 	movi	r2,-1
   2b558:	0401ffc4 	movi	r16,2047
   2b55c:	003e7806 	br	2af40 <__alt_data_end+0xfffeaf40>
   2b560:	4462b03a 	or	r17,r8,r17
   2b564:	8822c03a 	cmpne	r17,r17,zero
   2b568:	0009883a 	mov	r4,zero
   2b56c:	003fa006 	br	2b3f0 <__alt_data_end+0xfffeb3f0>
   2b570:	4811883a 	mov	r8,r9
   2b574:	3023883a 	mov	r17,r6
   2b578:	0401ffc4 	movi	r16,2047
   2b57c:	003e0706 	br	2ad9c <__alt_data_end+0xfffead9c>
   2b580:	4811883a 	mov	r8,r9
   2b584:	3023883a 	mov	r17,r6
   2b588:	003e0406 	br	2ad9c <__alt_data_end+0xfffead9c>
   2b58c:	21fff804 	addi	r7,r4,-32
   2b590:	01400804 	movi	r5,32
   2b594:	41ced83a 	srl	r7,r8,r7
   2b598:	21400a26 	beq	r4,r5,2b5c4 <__adddf3+0x8a4>
   2b59c:	01401004 	movi	r5,64
   2b5a0:	2909c83a 	sub	r4,r5,r4
   2b5a4:	4108983a 	sll	r4,r8,r4
   2b5a8:	2448b03a 	or	r4,r4,r17
   2b5ac:	2008c03a 	cmpne	r4,r4,zero
   2b5b0:	3922b03a 	or	r17,r7,r4
   2b5b4:	0009883a 	mov	r4,zero
   2b5b8:	003f8d06 	br	2b3f0 <__alt_data_end+0xfffeb3f0>
   2b5bc:	0007883a 	mov	r3,zero
   2b5c0:	003fdd06 	br	2b538 <__alt_data_end+0xfffeb538>
   2b5c4:	0009883a 	mov	r4,zero
   2b5c8:	003ff706 	br	2b5a8 <__alt_data_end+0xfffeb5a8>

0002b5cc <__divdf3>:
   2b5cc:	defff204 	addi	sp,sp,-56
   2b5d0:	dd400915 	stw	r21,36(sp)
   2b5d4:	282ad53a 	srli	r21,r5,20
   2b5d8:	dd000815 	stw	r20,32(sp)
   2b5dc:	2828d7fa 	srli	r20,r5,31
   2b5e0:	dc000415 	stw	r16,16(sp)
   2b5e4:	04000434 	movhi	r16,16
   2b5e8:	df000c15 	stw	fp,48(sp)
   2b5ec:	843fffc4 	addi	r16,r16,-1
   2b5f0:	dfc00d15 	stw	ra,52(sp)
   2b5f4:	ddc00b15 	stw	r23,44(sp)
   2b5f8:	dd800a15 	stw	r22,40(sp)
   2b5fc:	dcc00715 	stw	r19,28(sp)
   2b600:	dc800615 	stw	r18,24(sp)
   2b604:	dc400515 	stw	r17,20(sp)
   2b608:	ad41ffcc 	andi	r21,r21,2047
   2b60c:	2c20703a 	and	r16,r5,r16
   2b610:	a7003fcc 	andi	fp,r20,255
   2b614:	a8006126 	beq	r21,zero,2b79c <__divdf3+0x1d0>
   2b618:	0081ffc4 	movi	r2,2047
   2b61c:	2025883a 	mov	r18,r4
   2b620:	a8803726 	beq	r21,r2,2b700 <__divdf3+0x134>
   2b624:	80800434 	orhi	r2,r16,16
   2b628:	100490fa 	slli	r2,r2,3
   2b62c:	2020d77a 	srli	r16,r4,29
   2b630:	202490fa 	slli	r18,r4,3
   2b634:	ad7f0044 	addi	r21,r21,-1023
   2b638:	80a0b03a 	or	r16,r16,r2
   2b63c:	0027883a 	mov	r19,zero
   2b640:	0013883a 	mov	r9,zero
   2b644:	3804d53a 	srli	r2,r7,20
   2b648:	382cd7fa 	srli	r22,r7,31
   2b64c:	04400434 	movhi	r17,16
   2b650:	8c7fffc4 	addi	r17,r17,-1
   2b654:	1081ffcc 	andi	r2,r2,2047
   2b658:	3011883a 	mov	r8,r6
   2b65c:	3c62703a 	and	r17,r7,r17
   2b660:	b5c03fcc 	andi	r23,r22,255
   2b664:	10006c26 	beq	r2,zero,2b818 <__divdf3+0x24c>
   2b668:	00c1ffc4 	movi	r3,2047
   2b66c:	10c06426 	beq	r2,r3,2b800 <__divdf3+0x234>
   2b670:	88c00434 	orhi	r3,r17,16
   2b674:	180690fa 	slli	r3,r3,3
   2b678:	3022d77a 	srli	r17,r6,29
   2b67c:	301090fa 	slli	r8,r6,3
   2b680:	10bf0044 	addi	r2,r2,-1023
   2b684:	88e2b03a 	or	r17,r17,r3
   2b688:	000f883a 	mov	r7,zero
   2b68c:	a58cf03a 	xor	r6,r20,r22
   2b690:	3cc8b03a 	or	r4,r7,r19
   2b694:	a8abc83a 	sub	r21,r21,r2
   2b698:	008003c4 	movi	r2,15
   2b69c:	3007883a 	mov	r3,r6
   2b6a0:	34c03fcc 	andi	r19,r6,255
   2b6a4:	11009036 	bltu	r2,r4,2b8e8 <__divdf3+0x31c>
   2b6a8:	200890ba 	slli	r4,r4,2
   2b6ac:	008000f4 	movhi	r2,3
   2b6b0:	10adb004 	addi	r2,r2,-18752
   2b6b4:	2089883a 	add	r4,r4,r2
   2b6b8:	20800017 	ldw	r2,0(r4)
   2b6bc:	1000683a 	jmp	r2
   2b6c0:	0002b8e8 	cmpgeui	zero,zero,2787
   2b6c4:	0002b738 	rdprs	zero,zero,2780
   2b6c8:	0002b8d8 	cmpnei	zero,zero,2787
   2b6cc:	0002b72c 	andhi	zero,zero,2780
   2b6d0:	0002b8d8 	cmpnei	zero,zero,2787
   2b6d4:	0002b8ac 	andhi	zero,zero,2786
   2b6d8:	0002b8d8 	cmpnei	zero,zero,2787
   2b6dc:	0002b72c 	andhi	zero,zero,2780
   2b6e0:	0002b738 	rdprs	zero,zero,2780
   2b6e4:	0002b738 	rdprs	zero,zero,2780
   2b6e8:	0002b8ac 	andhi	zero,zero,2786
   2b6ec:	0002b72c 	andhi	zero,zero,2780
   2b6f0:	0002b71c 	xori	zero,zero,2780
   2b6f4:	0002b71c 	xori	zero,zero,2780
   2b6f8:	0002b71c 	xori	zero,zero,2780
   2b6fc:	0002bbcc 	andi	zero,zero,2799
   2b700:	2404b03a 	or	r2,r4,r16
   2b704:	1000661e 	bne	r2,zero,2b8a0 <__divdf3+0x2d4>
   2b708:	04c00204 	movi	r19,8
   2b70c:	0021883a 	mov	r16,zero
   2b710:	0025883a 	mov	r18,zero
   2b714:	02400084 	movi	r9,2
   2b718:	003fca06 	br	2b644 <__alt_data_end+0xfffeb644>
   2b71c:	8023883a 	mov	r17,r16
   2b720:	9011883a 	mov	r8,r18
   2b724:	e02f883a 	mov	r23,fp
   2b728:	480f883a 	mov	r7,r9
   2b72c:	00800084 	movi	r2,2
   2b730:	3881311e 	bne	r7,r2,2bbf8 <__divdf3+0x62c>
   2b734:	b827883a 	mov	r19,r23
   2b738:	98c0004c 	andi	r3,r19,1
   2b73c:	0081ffc4 	movi	r2,2047
   2b740:	000b883a 	mov	r5,zero
   2b744:	0025883a 	mov	r18,zero
   2b748:	1004953a 	slli	r2,r2,20
   2b74c:	18c03fcc 	andi	r3,r3,255
   2b750:	04400434 	movhi	r17,16
   2b754:	8c7fffc4 	addi	r17,r17,-1
   2b758:	180697fa 	slli	r3,r3,31
   2b75c:	2c4a703a 	and	r5,r5,r17
   2b760:	288ab03a 	or	r5,r5,r2
   2b764:	28c6b03a 	or	r3,r5,r3
   2b768:	9005883a 	mov	r2,r18
   2b76c:	dfc00d17 	ldw	ra,52(sp)
   2b770:	df000c17 	ldw	fp,48(sp)
   2b774:	ddc00b17 	ldw	r23,44(sp)
   2b778:	dd800a17 	ldw	r22,40(sp)
   2b77c:	dd400917 	ldw	r21,36(sp)
   2b780:	dd000817 	ldw	r20,32(sp)
   2b784:	dcc00717 	ldw	r19,28(sp)
   2b788:	dc800617 	ldw	r18,24(sp)
   2b78c:	dc400517 	ldw	r17,20(sp)
   2b790:	dc000417 	ldw	r16,16(sp)
   2b794:	dec00e04 	addi	sp,sp,56
   2b798:	f800283a 	ret
   2b79c:	2404b03a 	or	r2,r4,r16
   2b7a0:	2027883a 	mov	r19,r4
   2b7a4:	10003926 	beq	r2,zero,2b88c <__divdf3+0x2c0>
   2b7a8:	80012e26 	beq	r16,zero,2bc64 <__divdf3+0x698>
   2b7ac:	8009883a 	mov	r4,r16
   2b7b0:	d9800315 	stw	r6,12(sp)
   2b7b4:	d9c00215 	stw	r7,8(sp)
   2b7b8:	002d3240 	call	2d324 <__clzsi2>
   2b7bc:	d9800317 	ldw	r6,12(sp)
   2b7c0:	d9c00217 	ldw	r7,8(sp)
   2b7c4:	113ffd44 	addi	r4,r2,-11
   2b7c8:	00c00704 	movi	r3,28
   2b7cc:	19012116 	blt	r3,r4,2bc54 <__divdf3+0x688>
   2b7d0:	00c00744 	movi	r3,29
   2b7d4:	147ffe04 	addi	r17,r2,-8
   2b7d8:	1907c83a 	sub	r3,r3,r4
   2b7dc:	8460983a 	sll	r16,r16,r17
   2b7e0:	98c6d83a 	srl	r3,r19,r3
   2b7e4:	9c64983a 	sll	r18,r19,r17
   2b7e8:	1c20b03a 	or	r16,r3,r16
   2b7ec:	1080fcc4 	addi	r2,r2,1011
   2b7f0:	00abc83a 	sub	r21,zero,r2
   2b7f4:	0027883a 	mov	r19,zero
   2b7f8:	0013883a 	mov	r9,zero
   2b7fc:	003f9106 	br	2b644 <__alt_data_end+0xfffeb644>
   2b800:	3446b03a 	or	r3,r6,r17
   2b804:	18001f1e 	bne	r3,zero,2b884 <__divdf3+0x2b8>
   2b808:	0023883a 	mov	r17,zero
   2b80c:	0011883a 	mov	r8,zero
   2b810:	01c00084 	movi	r7,2
   2b814:	003f9d06 	br	2b68c <__alt_data_end+0xfffeb68c>
   2b818:	3446b03a 	or	r3,r6,r17
   2b81c:	18001526 	beq	r3,zero,2b874 <__divdf3+0x2a8>
   2b820:	88011b26 	beq	r17,zero,2bc90 <__divdf3+0x6c4>
   2b824:	8809883a 	mov	r4,r17
   2b828:	d9800315 	stw	r6,12(sp)
   2b82c:	da400115 	stw	r9,4(sp)
   2b830:	002d3240 	call	2d324 <__clzsi2>
   2b834:	d9800317 	ldw	r6,12(sp)
   2b838:	da400117 	ldw	r9,4(sp)
   2b83c:	113ffd44 	addi	r4,r2,-11
   2b840:	00c00704 	movi	r3,28
   2b844:	19010e16 	blt	r3,r4,2bc80 <__divdf3+0x6b4>
   2b848:	00c00744 	movi	r3,29
   2b84c:	123ffe04 	addi	r8,r2,-8
   2b850:	1907c83a 	sub	r3,r3,r4
   2b854:	8a22983a 	sll	r17,r17,r8
   2b858:	30c6d83a 	srl	r3,r6,r3
   2b85c:	3210983a 	sll	r8,r6,r8
   2b860:	1c62b03a 	or	r17,r3,r17
   2b864:	1080fcc4 	addi	r2,r2,1011
   2b868:	0085c83a 	sub	r2,zero,r2
   2b86c:	000f883a 	mov	r7,zero
   2b870:	003f8606 	br	2b68c <__alt_data_end+0xfffeb68c>
   2b874:	0023883a 	mov	r17,zero
   2b878:	0011883a 	mov	r8,zero
   2b87c:	01c00044 	movi	r7,1
   2b880:	003f8206 	br	2b68c <__alt_data_end+0xfffeb68c>
   2b884:	01c000c4 	movi	r7,3
   2b888:	003f8006 	br	2b68c <__alt_data_end+0xfffeb68c>
   2b88c:	04c00104 	movi	r19,4
   2b890:	0021883a 	mov	r16,zero
   2b894:	0025883a 	mov	r18,zero
   2b898:	02400044 	movi	r9,1
   2b89c:	003f6906 	br	2b644 <__alt_data_end+0xfffeb644>
   2b8a0:	04c00304 	movi	r19,12
   2b8a4:	024000c4 	movi	r9,3
   2b8a8:	003f6606 	br	2b644 <__alt_data_end+0xfffeb644>
   2b8ac:	01400434 	movhi	r5,16
   2b8b0:	0007883a 	mov	r3,zero
   2b8b4:	297fffc4 	addi	r5,r5,-1
   2b8b8:	04bfffc4 	movi	r18,-1
   2b8bc:	0081ffc4 	movi	r2,2047
   2b8c0:	003fa106 	br	2b748 <__alt_data_end+0xfffeb748>
   2b8c4:	00c00044 	movi	r3,1
   2b8c8:	1887c83a 	sub	r3,r3,r2
   2b8cc:	01000e04 	movi	r4,56
   2b8d0:	20c1210e 	bge	r4,r3,2bd58 <__divdf3+0x78c>
   2b8d4:	98c0004c 	andi	r3,r19,1
   2b8d8:	0005883a 	mov	r2,zero
   2b8dc:	000b883a 	mov	r5,zero
   2b8e0:	0025883a 	mov	r18,zero
   2b8e4:	003f9806 	br	2b748 <__alt_data_end+0xfffeb748>
   2b8e8:	8c00fd36 	bltu	r17,r16,2bce0 <__divdf3+0x714>
   2b8ec:	8440fb26 	beq	r16,r17,2bcdc <__divdf3+0x710>
   2b8f0:	8007883a 	mov	r3,r16
   2b8f4:	ad7fffc4 	addi	r21,r21,-1
   2b8f8:	0021883a 	mov	r16,zero
   2b8fc:	4004d63a 	srli	r2,r8,24
   2b900:	8822923a 	slli	r17,r17,8
   2b904:	1809883a 	mov	r4,r3
   2b908:	402c923a 	slli	r22,r8,8
   2b90c:	88b8b03a 	or	fp,r17,r2
   2b910:	e028d43a 	srli	r20,fp,16
   2b914:	d8c00015 	stw	r3,0(sp)
   2b918:	e5ffffcc 	andi	r23,fp,65535
   2b91c:	a00b883a 	mov	r5,r20
   2b920:	0020c340 	call	20c34 <__udivsi3>
   2b924:	d8c00017 	ldw	r3,0(sp)
   2b928:	a00b883a 	mov	r5,r20
   2b92c:	d8800315 	stw	r2,12(sp)
   2b930:	1809883a 	mov	r4,r3
   2b934:	0020c980 	call	20c98 <__umodsi3>
   2b938:	d9800317 	ldw	r6,12(sp)
   2b93c:	1006943a 	slli	r3,r2,16
   2b940:	9004d43a 	srli	r2,r18,16
   2b944:	b9a3383a 	mul	r17,r23,r6
   2b948:	10c4b03a 	or	r2,r2,r3
   2b94c:	1440062e 	bgeu	r2,r17,2b968 <__divdf3+0x39c>
   2b950:	1705883a 	add	r2,r2,fp
   2b954:	30ffffc4 	addi	r3,r6,-1
   2b958:	1700ee36 	bltu	r2,fp,2bd14 <__divdf3+0x748>
   2b95c:	1440ed2e 	bgeu	r2,r17,2bd14 <__divdf3+0x748>
   2b960:	31bfff84 	addi	r6,r6,-2
   2b964:	1705883a 	add	r2,r2,fp
   2b968:	1463c83a 	sub	r17,r2,r17
   2b96c:	a00b883a 	mov	r5,r20
   2b970:	8809883a 	mov	r4,r17
   2b974:	d9800315 	stw	r6,12(sp)
   2b978:	0020c340 	call	20c34 <__udivsi3>
   2b97c:	a00b883a 	mov	r5,r20
   2b980:	8809883a 	mov	r4,r17
   2b984:	d8800215 	stw	r2,8(sp)
   2b988:	0020c980 	call	20c98 <__umodsi3>
   2b98c:	d9c00217 	ldw	r7,8(sp)
   2b990:	1004943a 	slli	r2,r2,16
   2b994:	94bfffcc 	andi	r18,r18,65535
   2b998:	b9d1383a 	mul	r8,r23,r7
   2b99c:	90a4b03a 	or	r18,r18,r2
   2b9a0:	d9800317 	ldw	r6,12(sp)
   2b9a4:	9200062e 	bgeu	r18,r8,2b9c0 <__divdf3+0x3f4>
   2b9a8:	9725883a 	add	r18,r18,fp
   2b9ac:	38bfffc4 	addi	r2,r7,-1
   2b9b0:	9700d636 	bltu	r18,fp,2bd0c <__divdf3+0x740>
   2b9b4:	9200d52e 	bgeu	r18,r8,2bd0c <__divdf3+0x740>
   2b9b8:	39ffff84 	addi	r7,r7,-2
   2b9bc:	9725883a 	add	r18,r18,fp
   2b9c0:	3004943a 	slli	r2,r6,16
   2b9c4:	b012d43a 	srli	r9,r22,16
   2b9c8:	b1bfffcc 	andi	r6,r22,65535
   2b9cc:	11e2b03a 	or	r17,r2,r7
   2b9d0:	8806d43a 	srli	r3,r17,16
   2b9d4:	893fffcc 	andi	r4,r17,65535
   2b9d8:	218b383a 	mul	r5,r4,r6
   2b9dc:	30c5383a 	mul	r2,r6,r3
   2b9e0:	2249383a 	mul	r4,r4,r9
   2b9e4:	280ed43a 	srli	r7,r5,16
   2b9e8:	9225c83a 	sub	r18,r18,r8
   2b9ec:	2089883a 	add	r4,r4,r2
   2b9f0:	3909883a 	add	r4,r7,r4
   2b9f4:	1a47383a 	mul	r3,r3,r9
   2b9f8:	2080022e 	bgeu	r4,r2,2ba04 <__divdf3+0x438>
   2b9fc:	00800074 	movhi	r2,1
   2ba00:	1887883a 	add	r3,r3,r2
   2ba04:	2004d43a 	srli	r2,r4,16
   2ba08:	2008943a 	slli	r4,r4,16
   2ba0c:	297fffcc 	andi	r5,r5,65535
   2ba10:	10c7883a 	add	r3,r2,r3
   2ba14:	2149883a 	add	r4,r4,r5
   2ba18:	90c0a536 	bltu	r18,r3,2bcb0 <__divdf3+0x6e4>
   2ba1c:	90c0bf26 	beq	r18,r3,2bd1c <__divdf3+0x750>
   2ba20:	90c7c83a 	sub	r3,r18,r3
   2ba24:	810fc83a 	sub	r7,r16,r4
   2ba28:	81e5803a 	cmpltu	r18,r16,r7
   2ba2c:	1ca5c83a 	sub	r18,r3,r18
   2ba30:	e480c126 	beq	fp,r18,2bd38 <__divdf3+0x76c>
   2ba34:	a00b883a 	mov	r5,r20
   2ba38:	9009883a 	mov	r4,r18
   2ba3c:	d9800315 	stw	r6,12(sp)
   2ba40:	d9c00215 	stw	r7,8(sp)
   2ba44:	da400115 	stw	r9,4(sp)
   2ba48:	0020c340 	call	20c34 <__udivsi3>
   2ba4c:	a00b883a 	mov	r5,r20
   2ba50:	9009883a 	mov	r4,r18
   2ba54:	d8800015 	stw	r2,0(sp)
   2ba58:	0020c980 	call	20c98 <__umodsi3>
   2ba5c:	d9c00217 	ldw	r7,8(sp)
   2ba60:	da000017 	ldw	r8,0(sp)
   2ba64:	1006943a 	slli	r3,r2,16
   2ba68:	3804d43a 	srli	r2,r7,16
   2ba6c:	ba21383a 	mul	r16,r23,r8
   2ba70:	d9800317 	ldw	r6,12(sp)
   2ba74:	10c4b03a 	or	r2,r2,r3
   2ba78:	da400117 	ldw	r9,4(sp)
   2ba7c:	1400062e 	bgeu	r2,r16,2ba98 <__divdf3+0x4cc>
   2ba80:	1705883a 	add	r2,r2,fp
   2ba84:	40ffffc4 	addi	r3,r8,-1
   2ba88:	1700ad36 	bltu	r2,fp,2bd40 <__divdf3+0x774>
   2ba8c:	1400ac2e 	bgeu	r2,r16,2bd40 <__divdf3+0x774>
   2ba90:	423fff84 	addi	r8,r8,-2
   2ba94:	1705883a 	add	r2,r2,fp
   2ba98:	1421c83a 	sub	r16,r2,r16
   2ba9c:	a00b883a 	mov	r5,r20
   2baa0:	8009883a 	mov	r4,r16
   2baa4:	d9800315 	stw	r6,12(sp)
   2baa8:	d9c00215 	stw	r7,8(sp)
   2baac:	da000015 	stw	r8,0(sp)
   2bab0:	da400115 	stw	r9,4(sp)
   2bab4:	0020c340 	call	20c34 <__udivsi3>
   2bab8:	8009883a 	mov	r4,r16
   2babc:	a00b883a 	mov	r5,r20
   2bac0:	1025883a 	mov	r18,r2
   2bac4:	0020c980 	call	20c98 <__umodsi3>
   2bac8:	d9c00217 	ldw	r7,8(sp)
   2bacc:	1004943a 	slli	r2,r2,16
   2bad0:	bcaf383a 	mul	r23,r23,r18
   2bad4:	393fffcc 	andi	r4,r7,65535
   2bad8:	2088b03a 	or	r4,r4,r2
   2badc:	d9800317 	ldw	r6,12(sp)
   2bae0:	da000017 	ldw	r8,0(sp)
   2bae4:	da400117 	ldw	r9,4(sp)
   2bae8:	25c0062e 	bgeu	r4,r23,2bb04 <__divdf3+0x538>
   2baec:	2709883a 	add	r4,r4,fp
   2baf0:	90bfffc4 	addi	r2,r18,-1
   2baf4:	27009436 	bltu	r4,fp,2bd48 <__divdf3+0x77c>
   2baf8:	25c0932e 	bgeu	r4,r23,2bd48 <__divdf3+0x77c>
   2bafc:	94bfff84 	addi	r18,r18,-2
   2bb00:	2709883a 	add	r4,r4,fp
   2bb04:	4004943a 	slli	r2,r8,16
   2bb08:	25efc83a 	sub	r23,r4,r23
   2bb0c:	1490b03a 	or	r8,r2,r18
   2bb10:	4008d43a 	srli	r4,r8,16
   2bb14:	40ffffcc 	andi	r3,r8,65535
   2bb18:	30c5383a 	mul	r2,r6,r3
   2bb1c:	1a47383a 	mul	r3,r3,r9
   2bb20:	310d383a 	mul	r6,r6,r4
   2bb24:	100ad43a 	srli	r5,r2,16
   2bb28:	4913383a 	mul	r9,r9,r4
   2bb2c:	1987883a 	add	r3,r3,r6
   2bb30:	28c7883a 	add	r3,r5,r3
   2bb34:	1980022e 	bgeu	r3,r6,2bb40 <__divdf3+0x574>
   2bb38:	01000074 	movhi	r4,1
   2bb3c:	4913883a 	add	r9,r9,r4
   2bb40:	1808d43a 	srli	r4,r3,16
   2bb44:	1806943a 	slli	r3,r3,16
   2bb48:	10bfffcc 	andi	r2,r2,65535
   2bb4c:	2253883a 	add	r9,r4,r9
   2bb50:	1887883a 	add	r3,r3,r2
   2bb54:	ba403836 	bltu	r23,r9,2bc38 <__divdf3+0x66c>
   2bb58:	ba403626 	beq	r23,r9,2bc34 <__divdf3+0x668>
   2bb5c:	42000054 	ori	r8,r8,1
   2bb60:	a880ffc4 	addi	r2,r21,1023
   2bb64:	00bf570e 	bge	zero,r2,2b8c4 <__alt_data_end+0xfffeb8c4>
   2bb68:	40c001cc 	andi	r3,r8,7
   2bb6c:	18000726 	beq	r3,zero,2bb8c <__divdf3+0x5c0>
   2bb70:	40c003cc 	andi	r3,r8,15
   2bb74:	01000104 	movi	r4,4
   2bb78:	19000426 	beq	r3,r4,2bb8c <__divdf3+0x5c0>
   2bb7c:	4107883a 	add	r3,r8,r4
   2bb80:	1a11803a 	cmpltu	r8,r3,r8
   2bb84:	8a23883a 	add	r17,r17,r8
   2bb88:	1811883a 	mov	r8,r3
   2bb8c:	88c0402c 	andhi	r3,r17,256
   2bb90:	18000426 	beq	r3,zero,2bba4 <__divdf3+0x5d8>
   2bb94:	00ffc034 	movhi	r3,65280
   2bb98:	18ffffc4 	addi	r3,r3,-1
   2bb9c:	a8810004 	addi	r2,r21,1024
   2bba0:	88e2703a 	and	r17,r17,r3
   2bba4:	00c1ff84 	movi	r3,2046
   2bba8:	18bee316 	blt	r3,r2,2b738 <__alt_data_end+0xfffeb738>
   2bbac:	8824977a 	slli	r18,r17,29
   2bbb0:	4010d0fa 	srli	r8,r8,3
   2bbb4:	8822927a 	slli	r17,r17,9
   2bbb8:	1081ffcc 	andi	r2,r2,2047
   2bbbc:	9224b03a 	or	r18,r18,r8
   2bbc0:	880ad33a 	srli	r5,r17,12
   2bbc4:	98c0004c 	andi	r3,r19,1
   2bbc8:	003edf06 	br	2b748 <__alt_data_end+0xfffeb748>
   2bbcc:	8080022c 	andhi	r2,r16,8
   2bbd0:	10001226 	beq	r2,zero,2bc1c <__divdf3+0x650>
   2bbd4:	8880022c 	andhi	r2,r17,8
   2bbd8:	1000101e 	bne	r2,zero,2bc1c <__divdf3+0x650>
   2bbdc:	00800434 	movhi	r2,16
   2bbe0:	89400234 	orhi	r5,r17,8
   2bbe4:	10bfffc4 	addi	r2,r2,-1
   2bbe8:	b007883a 	mov	r3,r22
   2bbec:	288a703a 	and	r5,r5,r2
   2bbf0:	4025883a 	mov	r18,r8
   2bbf4:	003f3106 	br	2b8bc <__alt_data_end+0xfffeb8bc>
   2bbf8:	008000c4 	movi	r2,3
   2bbfc:	3880a626 	beq	r7,r2,2be98 <__divdf3+0x8cc>
   2bc00:	00800044 	movi	r2,1
   2bc04:	3880521e 	bne	r7,r2,2bd50 <__divdf3+0x784>
   2bc08:	b807883a 	mov	r3,r23
   2bc0c:	0005883a 	mov	r2,zero
   2bc10:	000b883a 	mov	r5,zero
   2bc14:	0025883a 	mov	r18,zero
   2bc18:	003ecb06 	br	2b748 <__alt_data_end+0xfffeb748>
   2bc1c:	00800434 	movhi	r2,16
   2bc20:	81400234 	orhi	r5,r16,8
   2bc24:	10bfffc4 	addi	r2,r2,-1
   2bc28:	a007883a 	mov	r3,r20
   2bc2c:	288a703a 	and	r5,r5,r2
   2bc30:	003f2206 	br	2b8bc <__alt_data_end+0xfffeb8bc>
   2bc34:	183fca26 	beq	r3,zero,2bb60 <__alt_data_end+0xfffebb60>
   2bc38:	e5ef883a 	add	r23,fp,r23
   2bc3c:	40bfffc4 	addi	r2,r8,-1
   2bc40:	bf00392e 	bgeu	r23,fp,2bd28 <__divdf3+0x75c>
   2bc44:	1011883a 	mov	r8,r2
   2bc48:	ba7fc41e 	bne	r23,r9,2bb5c <__alt_data_end+0xfffebb5c>
   2bc4c:	b0ffc31e 	bne	r22,r3,2bb5c <__alt_data_end+0xfffebb5c>
   2bc50:	003fc306 	br	2bb60 <__alt_data_end+0xfffebb60>
   2bc54:	143ff604 	addi	r16,r2,-40
   2bc58:	9c20983a 	sll	r16,r19,r16
   2bc5c:	0025883a 	mov	r18,zero
   2bc60:	003ee206 	br	2b7ec <__alt_data_end+0xfffeb7ec>
   2bc64:	d9800315 	stw	r6,12(sp)
   2bc68:	d9c00215 	stw	r7,8(sp)
   2bc6c:	002d3240 	call	2d324 <__clzsi2>
   2bc70:	10800804 	addi	r2,r2,32
   2bc74:	d9c00217 	ldw	r7,8(sp)
   2bc78:	d9800317 	ldw	r6,12(sp)
   2bc7c:	003ed106 	br	2b7c4 <__alt_data_end+0xfffeb7c4>
   2bc80:	147ff604 	addi	r17,r2,-40
   2bc84:	3462983a 	sll	r17,r6,r17
   2bc88:	0011883a 	mov	r8,zero
   2bc8c:	003ef506 	br	2b864 <__alt_data_end+0xfffeb864>
   2bc90:	3009883a 	mov	r4,r6
   2bc94:	d9800315 	stw	r6,12(sp)
   2bc98:	da400115 	stw	r9,4(sp)
   2bc9c:	002d3240 	call	2d324 <__clzsi2>
   2bca0:	10800804 	addi	r2,r2,32
   2bca4:	da400117 	ldw	r9,4(sp)
   2bca8:	d9800317 	ldw	r6,12(sp)
   2bcac:	003ee306 	br	2b83c <__alt_data_end+0xfffeb83c>
   2bcb0:	85a1883a 	add	r16,r16,r22
   2bcb4:	8585803a 	cmpltu	r2,r16,r22
   2bcb8:	1705883a 	add	r2,r2,fp
   2bcbc:	14a5883a 	add	r18,r2,r18
   2bcc0:	88bfffc4 	addi	r2,r17,-1
   2bcc4:	e4800c2e 	bgeu	fp,r18,2bcf8 <__divdf3+0x72c>
   2bcc8:	90c03e36 	bltu	r18,r3,2bdc4 <__divdf3+0x7f8>
   2bccc:	1c806926 	beq	r3,r18,2be74 <__divdf3+0x8a8>
   2bcd0:	90c7c83a 	sub	r3,r18,r3
   2bcd4:	1023883a 	mov	r17,r2
   2bcd8:	003f5206 	br	2ba24 <__alt_data_end+0xfffeba24>
   2bcdc:	923f0436 	bltu	r18,r8,2b8f0 <__alt_data_end+0xfffeb8f0>
   2bce0:	800897fa 	slli	r4,r16,31
   2bce4:	9004d07a 	srli	r2,r18,1
   2bce8:	8006d07a 	srli	r3,r16,1
   2bcec:	902097fa 	slli	r16,r18,31
   2bcf0:	20a4b03a 	or	r18,r4,r2
   2bcf4:	003f0106 	br	2b8fc <__alt_data_end+0xfffeb8fc>
   2bcf8:	e4bff51e 	bne	fp,r18,2bcd0 <__alt_data_end+0xfffebcd0>
   2bcfc:	85bff22e 	bgeu	r16,r22,2bcc8 <__alt_data_end+0xfffebcc8>
   2bd00:	e0c7c83a 	sub	r3,fp,r3
   2bd04:	1023883a 	mov	r17,r2
   2bd08:	003f4606 	br	2ba24 <__alt_data_end+0xfffeba24>
   2bd0c:	100f883a 	mov	r7,r2
   2bd10:	003f2b06 	br	2b9c0 <__alt_data_end+0xfffeb9c0>
   2bd14:	180d883a 	mov	r6,r3
   2bd18:	003f1306 	br	2b968 <__alt_data_end+0xfffeb968>
   2bd1c:	813fe436 	bltu	r16,r4,2bcb0 <__alt_data_end+0xfffebcb0>
   2bd20:	0007883a 	mov	r3,zero
   2bd24:	003f3f06 	br	2ba24 <__alt_data_end+0xfffeba24>
   2bd28:	ba402c36 	bltu	r23,r9,2bddc <__divdf3+0x810>
   2bd2c:	4dc05426 	beq	r9,r23,2be80 <__divdf3+0x8b4>
   2bd30:	1011883a 	mov	r8,r2
   2bd34:	003f8906 	br	2bb5c <__alt_data_end+0xfffebb5c>
   2bd38:	023fffc4 	movi	r8,-1
   2bd3c:	003f8806 	br	2bb60 <__alt_data_end+0xfffebb60>
   2bd40:	1811883a 	mov	r8,r3
   2bd44:	003f5406 	br	2ba98 <__alt_data_end+0xfffeba98>
   2bd48:	1025883a 	mov	r18,r2
   2bd4c:	003f6d06 	br	2bb04 <__alt_data_end+0xfffebb04>
   2bd50:	b827883a 	mov	r19,r23
   2bd54:	003f8206 	br	2bb60 <__alt_data_end+0xfffebb60>
   2bd58:	010007c4 	movi	r4,31
   2bd5c:	20c02616 	blt	r4,r3,2bdf8 <__divdf3+0x82c>
   2bd60:	00800804 	movi	r2,32
   2bd64:	10c5c83a 	sub	r2,r2,r3
   2bd68:	888a983a 	sll	r5,r17,r2
   2bd6c:	40c8d83a 	srl	r4,r8,r3
   2bd70:	4084983a 	sll	r2,r8,r2
   2bd74:	88e2d83a 	srl	r17,r17,r3
   2bd78:	2906b03a 	or	r3,r5,r4
   2bd7c:	1004c03a 	cmpne	r2,r2,zero
   2bd80:	1886b03a 	or	r3,r3,r2
   2bd84:	188001cc 	andi	r2,r3,7
   2bd88:	10000726 	beq	r2,zero,2bda8 <__divdf3+0x7dc>
   2bd8c:	188003cc 	andi	r2,r3,15
   2bd90:	01000104 	movi	r4,4
   2bd94:	11000426 	beq	r2,r4,2bda8 <__divdf3+0x7dc>
   2bd98:	1805883a 	mov	r2,r3
   2bd9c:	10c00104 	addi	r3,r2,4
   2bda0:	1885803a 	cmpltu	r2,r3,r2
   2bda4:	88a3883a 	add	r17,r17,r2
   2bda8:	8880202c 	andhi	r2,r17,128
   2bdac:	10002726 	beq	r2,zero,2be4c <__divdf3+0x880>
   2bdb0:	98c0004c 	andi	r3,r19,1
   2bdb4:	00800044 	movi	r2,1
   2bdb8:	000b883a 	mov	r5,zero
   2bdbc:	0025883a 	mov	r18,zero
   2bdc0:	003e6106 	br	2b748 <__alt_data_end+0xfffeb748>
   2bdc4:	85a1883a 	add	r16,r16,r22
   2bdc8:	8585803a 	cmpltu	r2,r16,r22
   2bdcc:	1705883a 	add	r2,r2,fp
   2bdd0:	14a5883a 	add	r18,r2,r18
   2bdd4:	8c7fff84 	addi	r17,r17,-2
   2bdd8:	003f1106 	br	2ba20 <__alt_data_end+0xfffeba20>
   2bddc:	b589883a 	add	r4,r22,r22
   2bde0:	25ad803a 	cmpltu	r22,r4,r22
   2bde4:	b739883a 	add	fp,r22,fp
   2bde8:	40bfff84 	addi	r2,r8,-2
   2bdec:	bf2f883a 	add	r23,r23,fp
   2bdf0:	202d883a 	mov	r22,r4
   2bdf4:	003f9306 	br	2bc44 <__alt_data_end+0xfffebc44>
   2bdf8:	013ff844 	movi	r4,-31
   2bdfc:	2085c83a 	sub	r2,r4,r2
   2be00:	8888d83a 	srl	r4,r17,r2
   2be04:	00800804 	movi	r2,32
   2be08:	18802126 	beq	r3,r2,2be90 <__divdf3+0x8c4>
   2be0c:	00801004 	movi	r2,64
   2be10:	10c5c83a 	sub	r2,r2,r3
   2be14:	8884983a 	sll	r2,r17,r2
   2be18:	1204b03a 	or	r2,r2,r8
   2be1c:	1004c03a 	cmpne	r2,r2,zero
   2be20:	2084b03a 	or	r2,r4,r2
   2be24:	144001cc 	andi	r17,r2,7
   2be28:	88000d1e 	bne	r17,zero,2be60 <__divdf3+0x894>
   2be2c:	000b883a 	mov	r5,zero
   2be30:	1024d0fa 	srli	r18,r2,3
   2be34:	98c0004c 	andi	r3,r19,1
   2be38:	0005883a 	mov	r2,zero
   2be3c:	9464b03a 	or	r18,r18,r17
   2be40:	003e4106 	br	2b748 <__alt_data_end+0xfffeb748>
   2be44:	1007883a 	mov	r3,r2
   2be48:	0023883a 	mov	r17,zero
   2be4c:	880a927a 	slli	r5,r17,9
   2be50:	1805883a 	mov	r2,r3
   2be54:	8822977a 	slli	r17,r17,29
   2be58:	280ad33a 	srli	r5,r5,12
   2be5c:	003ff406 	br	2be30 <__alt_data_end+0xfffebe30>
   2be60:	10c003cc 	andi	r3,r2,15
   2be64:	01000104 	movi	r4,4
   2be68:	193ff626 	beq	r3,r4,2be44 <__alt_data_end+0xfffebe44>
   2be6c:	0023883a 	mov	r17,zero
   2be70:	003fca06 	br	2bd9c <__alt_data_end+0xfffebd9c>
   2be74:	813fd336 	bltu	r16,r4,2bdc4 <__alt_data_end+0xfffebdc4>
   2be78:	1023883a 	mov	r17,r2
   2be7c:	003fa806 	br	2bd20 <__alt_data_end+0xfffebd20>
   2be80:	b0ffd636 	bltu	r22,r3,2bddc <__alt_data_end+0xfffebddc>
   2be84:	1011883a 	mov	r8,r2
   2be88:	b0ff341e 	bne	r22,r3,2bb5c <__alt_data_end+0xfffebb5c>
   2be8c:	003f3406 	br	2bb60 <__alt_data_end+0xfffebb60>
   2be90:	0005883a 	mov	r2,zero
   2be94:	003fe006 	br	2be18 <__alt_data_end+0xfffebe18>
   2be98:	00800434 	movhi	r2,16
   2be9c:	89400234 	orhi	r5,r17,8
   2bea0:	10bfffc4 	addi	r2,r2,-1
   2bea4:	b807883a 	mov	r3,r23
   2bea8:	288a703a 	and	r5,r5,r2
   2beac:	4025883a 	mov	r18,r8
   2beb0:	003e8206 	br	2b8bc <__alt_data_end+0xfffeb8bc>

0002beb4 <__eqdf2>:
   2beb4:	2804d53a 	srli	r2,r5,20
   2beb8:	3806d53a 	srli	r3,r7,20
   2bebc:	02000434 	movhi	r8,16
   2bec0:	423fffc4 	addi	r8,r8,-1
   2bec4:	1081ffcc 	andi	r2,r2,2047
   2bec8:	0281ffc4 	movi	r10,2047
   2becc:	2a12703a 	and	r9,r5,r8
   2bed0:	18c1ffcc 	andi	r3,r3,2047
   2bed4:	3a10703a 	and	r8,r7,r8
   2bed8:	280ad7fa 	srli	r5,r5,31
   2bedc:	380ed7fa 	srli	r7,r7,31
   2bee0:	12801026 	beq	r2,r10,2bf24 <__eqdf2+0x70>
   2bee4:	0281ffc4 	movi	r10,2047
   2bee8:	1a800a26 	beq	r3,r10,2bf14 <__eqdf2+0x60>
   2beec:	10c00226 	beq	r2,r3,2bef8 <__eqdf2+0x44>
   2bef0:	00800044 	movi	r2,1
   2bef4:	f800283a 	ret
   2bef8:	4a3ffd1e 	bne	r9,r8,2bef0 <__alt_data_end+0xfffebef0>
   2befc:	21bffc1e 	bne	r4,r6,2bef0 <__alt_data_end+0xfffebef0>
   2bf00:	29c00c26 	beq	r5,r7,2bf34 <__eqdf2+0x80>
   2bf04:	103ffa1e 	bne	r2,zero,2bef0 <__alt_data_end+0xfffebef0>
   2bf08:	2244b03a 	or	r2,r4,r9
   2bf0c:	1004c03a 	cmpne	r2,r2,zero
   2bf10:	f800283a 	ret
   2bf14:	3214b03a 	or	r10,r6,r8
   2bf18:	503ff426 	beq	r10,zero,2beec <__alt_data_end+0xfffebeec>
   2bf1c:	00800044 	movi	r2,1
   2bf20:	f800283a 	ret
   2bf24:	2254b03a 	or	r10,r4,r9
   2bf28:	503fee26 	beq	r10,zero,2bee4 <__alt_data_end+0xfffebee4>
   2bf2c:	00800044 	movi	r2,1
   2bf30:	f800283a 	ret
   2bf34:	0005883a 	mov	r2,zero
   2bf38:	f800283a 	ret

0002bf3c <__gedf2>:
   2bf3c:	2804d53a 	srli	r2,r5,20
   2bf40:	3806d53a 	srli	r3,r7,20
   2bf44:	02000434 	movhi	r8,16
   2bf48:	423fffc4 	addi	r8,r8,-1
   2bf4c:	1081ffcc 	andi	r2,r2,2047
   2bf50:	0241ffc4 	movi	r9,2047
   2bf54:	2a14703a 	and	r10,r5,r8
   2bf58:	18c1ffcc 	andi	r3,r3,2047
   2bf5c:	3a10703a 	and	r8,r7,r8
   2bf60:	280ad7fa 	srli	r5,r5,31
   2bf64:	380ed7fa 	srli	r7,r7,31
   2bf68:	12401d26 	beq	r2,r9,2bfe0 <__gedf2+0xa4>
   2bf6c:	0241ffc4 	movi	r9,2047
   2bf70:	1a401226 	beq	r3,r9,2bfbc <__gedf2+0x80>
   2bf74:	1000081e 	bne	r2,zero,2bf98 <__gedf2+0x5c>
   2bf78:	2296b03a 	or	r11,r4,r10
   2bf7c:	5813003a 	cmpeq	r9,r11,zero
   2bf80:	1800091e 	bne	r3,zero,2bfa8 <__gedf2+0x6c>
   2bf84:	3218b03a 	or	r12,r6,r8
   2bf88:	6000071e 	bne	r12,zero,2bfa8 <__gedf2+0x6c>
   2bf8c:	0005883a 	mov	r2,zero
   2bf90:	5800101e 	bne	r11,zero,2bfd4 <__gedf2+0x98>
   2bf94:	f800283a 	ret
   2bf98:	18000c1e 	bne	r3,zero,2bfcc <__gedf2+0x90>
   2bf9c:	3212b03a 	or	r9,r6,r8
   2bfa0:	48000c26 	beq	r9,zero,2bfd4 <__gedf2+0x98>
   2bfa4:	0013883a 	mov	r9,zero
   2bfa8:	39c03fcc 	andi	r7,r7,255
   2bfac:	48000826 	beq	r9,zero,2bfd0 <__gedf2+0x94>
   2bfb0:	38000926 	beq	r7,zero,2bfd8 <__gedf2+0x9c>
   2bfb4:	00800044 	movi	r2,1
   2bfb8:	f800283a 	ret
   2bfbc:	3212b03a 	or	r9,r6,r8
   2bfc0:	483fec26 	beq	r9,zero,2bf74 <__alt_data_end+0xfffebf74>
   2bfc4:	00bfff84 	movi	r2,-2
   2bfc8:	f800283a 	ret
   2bfcc:	39c03fcc 	andi	r7,r7,255
   2bfd0:	29c00626 	beq	r5,r7,2bfec <__gedf2+0xb0>
   2bfd4:	283ff726 	beq	r5,zero,2bfb4 <__alt_data_end+0xfffebfb4>
   2bfd8:	00bfffc4 	movi	r2,-1
   2bfdc:	f800283a 	ret
   2bfe0:	2292b03a 	or	r9,r4,r10
   2bfe4:	483fe126 	beq	r9,zero,2bf6c <__alt_data_end+0xfffebf6c>
   2bfe8:	003ff606 	br	2bfc4 <__alt_data_end+0xfffebfc4>
   2bfec:	18bff916 	blt	r3,r2,2bfd4 <__alt_data_end+0xfffebfd4>
   2bff0:	10c00316 	blt	r2,r3,2c000 <__gedf2+0xc4>
   2bff4:	42bff736 	bltu	r8,r10,2bfd4 <__alt_data_end+0xfffebfd4>
   2bff8:	52000326 	beq	r10,r8,2c008 <__gedf2+0xcc>
   2bffc:	5200042e 	bgeu	r10,r8,2c010 <__gedf2+0xd4>
   2c000:	283fec1e 	bne	r5,zero,2bfb4 <__alt_data_end+0xfffebfb4>
   2c004:	003ff406 	br	2bfd8 <__alt_data_end+0xfffebfd8>
   2c008:	313ff236 	bltu	r6,r4,2bfd4 <__alt_data_end+0xfffebfd4>
   2c00c:	21bffc36 	bltu	r4,r6,2c000 <__alt_data_end+0xfffec000>
   2c010:	0005883a 	mov	r2,zero
   2c014:	f800283a 	ret

0002c018 <__ledf2>:
   2c018:	2804d53a 	srli	r2,r5,20
   2c01c:	3810d53a 	srli	r8,r7,20
   2c020:	00c00434 	movhi	r3,16
   2c024:	18ffffc4 	addi	r3,r3,-1
   2c028:	1081ffcc 	andi	r2,r2,2047
   2c02c:	0241ffc4 	movi	r9,2047
   2c030:	28d4703a 	and	r10,r5,r3
   2c034:	4201ffcc 	andi	r8,r8,2047
   2c038:	38c6703a 	and	r3,r7,r3
   2c03c:	280ad7fa 	srli	r5,r5,31
   2c040:	380ed7fa 	srli	r7,r7,31
   2c044:	12401f26 	beq	r2,r9,2c0c4 <__ledf2+0xac>
   2c048:	0241ffc4 	movi	r9,2047
   2c04c:	42401426 	beq	r8,r9,2c0a0 <__ledf2+0x88>
   2c050:	1000091e 	bne	r2,zero,2c078 <__ledf2+0x60>
   2c054:	2296b03a 	or	r11,r4,r10
   2c058:	5813003a 	cmpeq	r9,r11,zero
   2c05c:	29403fcc 	andi	r5,r5,255
   2c060:	40000a1e 	bne	r8,zero,2c08c <__ledf2+0x74>
   2c064:	30d8b03a 	or	r12,r6,r3
   2c068:	6000081e 	bne	r12,zero,2c08c <__ledf2+0x74>
   2c06c:	0005883a 	mov	r2,zero
   2c070:	5800111e 	bne	r11,zero,2c0b8 <__ledf2+0xa0>
   2c074:	f800283a 	ret
   2c078:	29403fcc 	andi	r5,r5,255
   2c07c:	40000c1e 	bne	r8,zero,2c0b0 <__ledf2+0x98>
   2c080:	30d2b03a 	or	r9,r6,r3
   2c084:	48000c26 	beq	r9,zero,2c0b8 <__ledf2+0xa0>
   2c088:	0013883a 	mov	r9,zero
   2c08c:	39c03fcc 	andi	r7,r7,255
   2c090:	48000826 	beq	r9,zero,2c0b4 <__ledf2+0x9c>
   2c094:	38001126 	beq	r7,zero,2c0dc <__ledf2+0xc4>
   2c098:	00800044 	movi	r2,1
   2c09c:	f800283a 	ret
   2c0a0:	30d2b03a 	or	r9,r6,r3
   2c0a4:	483fea26 	beq	r9,zero,2c050 <__alt_data_end+0xfffec050>
   2c0a8:	00800084 	movi	r2,2
   2c0ac:	f800283a 	ret
   2c0b0:	39c03fcc 	andi	r7,r7,255
   2c0b4:	39400726 	beq	r7,r5,2c0d4 <__ledf2+0xbc>
   2c0b8:	2800081e 	bne	r5,zero,2c0dc <__ledf2+0xc4>
   2c0bc:	00800044 	movi	r2,1
   2c0c0:	f800283a 	ret
   2c0c4:	2292b03a 	or	r9,r4,r10
   2c0c8:	483fdf26 	beq	r9,zero,2c048 <__alt_data_end+0xfffec048>
   2c0cc:	00800084 	movi	r2,2
   2c0d0:	f800283a 	ret
   2c0d4:	4080030e 	bge	r8,r2,2c0e4 <__ledf2+0xcc>
   2c0d8:	383fef26 	beq	r7,zero,2c098 <__alt_data_end+0xfffec098>
   2c0dc:	00bfffc4 	movi	r2,-1
   2c0e0:	f800283a 	ret
   2c0e4:	123feb16 	blt	r2,r8,2c094 <__alt_data_end+0xfffec094>
   2c0e8:	1abff336 	bltu	r3,r10,2c0b8 <__alt_data_end+0xfffec0b8>
   2c0ec:	50c00326 	beq	r10,r3,2c0fc <__ledf2+0xe4>
   2c0f0:	50c0042e 	bgeu	r10,r3,2c104 <__ledf2+0xec>
   2c0f4:	283fe81e 	bne	r5,zero,2c098 <__alt_data_end+0xfffec098>
   2c0f8:	003ff806 	br	2c0dc <__alt_data_end+0xfffec0dc>
   2c0fc:	313fee36 	bltu	r6,r4,2c0b8 <__alt_data_end+0xfffec0b8>
   2c100:	21bffc36 	bltu	r4,r6,2c0f4 <__alt_data_end+0xfffec0f4>
   2c104:	0005883a 	mov	r2,zero
   2c108:	f800283a 	ret

0002c10c <__muldf3>:
   2c10c:	defff304 	addi	sp,sp,-52
   2c110:	2804d53a 	srli	r2,r5,20
   2c114:	dd800915 	stw	r22,36(sp)
   2c118:	282cd7fa 	srli	r22,r5,31
   2c11c:	dc000315 	stw	r16,12(sp)
   2c120:	04000434 	movhi	r16,16
   2c124:	dd400815 	stw	r21,32(sp)
   2c128:	dc800515 	stw	r18,20(sp)
   2c12c:	843fffc4 	addi	r16,r16,-1
   2c130:	dfc00c15 	stw	ra,48(sp)
   2c134:	df000b15 	stw	fp,44(sp)
   2c138:	ddc00a15 	stw	r23,40(sp)
   2c13c:	dd000715 	stw	r20,28(sp)
   2c140:	dcc00615 	stw	r19,24(sp)
   2c144:	dc400415 	stw	r17,16(sp)
   2c148:	1481ffcc 	andi	r18,r2,2047
   2c14c:	2c20703a 	and	r16,r5,r16
   2c150:	b02b883a 	mov	r21,r22
   2c154:	b2403fcc 	andi	r9,r22,255
   2c158:	90006026 	beq	r18,zero,2c2dc <__muldf3+0x1d0>
   2c15c:	0081ffc4 	movi	r2,2047
   2c160:	2029883a 	mov	r20,r4
   2c164:	90803626 	beq	r18,r2,2c240 <__muldf3+0x134>
   2c168:	80800434 	orhi	r2,r16,16
   2c16c:	100490fa 	slli	r2,r2,3
   2c170:	2020d77a 	srli	r16,r4,29
   2c174:	202890fa 	slli	r20,r4,3
   2c178:	94bf0044 	addi	r18,r18,-1023
   2c17c:	80a0b03a 	or	r16,r16,r2
   2c180:	0027883a 	mov	r19,zero
   2c184:	0039883a 	mov	fp,zero
   2c188:	3804d53a 	srli	r2,r7,20
   2c18c:	382ed7fa 	srli	r23,r7,31
   2c190:	04400434 	movhi	r17,16
   2c194:	8c7fffc4 	addi	r17,r17,-1
   2c198:	1081ffcc 	andi	r2,r2,2047
   2c19c:	3011883a 	mov	r8,r6
   2c1a0:	3c62703a 	and	r17,r7,r17
   2c1a4:	ba803fcc 	andi	r10,r23,255
   2c1a8:	10006d26 	beq	r2,zero,2c360 <__muldf3+0x254>
   2c1ac:	00c1ffc4 	movi	r3,2047
   2c1b0:	10c06526 	beq	r2,r3,2c348 <__muldf3+0x23c>
   2c1b4:	88c00434 	orhi	r3,r17,16
   2c1b8:	180690fa 	slli	r3,r3,3
   2c1bc:	3022d77a 	srli	r17,r6,29
   2c1c0:	301090fa 	slli	r8,r6,3
   2c1c4:	10bf0044 	addi	r2,r2,-1023
   2c1c8:	88e2b03a 	or	r17,r17,r3
   2c1cc:	000b883a 	mov	r5,zero
   2c1d0:	9085883a 	add	r2,r18,r2
   2c1d4:	2cc8b03a 	or	r4,r5,r19
   2c1d8:	00c003c4 	movi	r3,15
   2c1dc:	bdacf03a 	xor	r22,r23,r22
   2c1e0:	12c00044 	addi	r11,r2,1
   2c1e4:	19009936 	bltu	r3,r4,2c44c <__muldf3+0x340>
   2c1e8:	200890ba 	slli	r4,r4,2
   2c1ec:	00c000f4 	movhi	r3,3
   2c1f0:	18f08004 	addi	r3,r3,-15872
   2c1f4:	20c9883a 	add	r4,r4,r3
   2c1f8:	20c00017 	ldw	r3,0(r4)
   2c1fc:	1800683a 	jmp	r3
   2c200:	0002c44c 	andi	zero,zero,2833
   2c204:	0002c260 	cmpeqi	zero,zero,2825
   2c208:	0002c260 	cmpeqi	zero,zero,2825
   2c20c:	0002c25c 	xori	zero,zero,2825
   2c210:	0002c428 	cmpgeui	zero,zero,2832
   2c214:	0002c428 	cmpgeui	zero,zero,2832
   2c218:	0002c410 	cmplti	zero,zero,2832
   2c21c:	0002c25c 	xori	zero,zero,2825
   2c220:	0002c428 	cmpgeui	zero,zero,2832
   2c224:	0002c410 	cmplti	zero,zero,2832
   2c228:	0002c428 	cmpgeui	zero,zero,2832
   2c22c:	0002c25c 	xori	zero,zero,2825
   2c230:	0002c438 	rdprs	zero,zero,2832
   2c234:	0002c438 	rdprs	zero,zero,2832
   2c238:	0002c438 	rdprs	zero,zero,2832
   2c23c:	0002c654 	movui	zero,2841
   2c240:	2404b03a 	or	r2,r4,r16
   2c244:	10006f1e 	bne	r2,zero,2c404 <__muldf3+0x2f8>
   2c248:	04c00204 	movi	r19,8
   2c24c:	0021883a 	mov	r16,zero
   2c250:	0029883a 	mov	r20,zero
   2c254:	07000084 	movi	fp,2
   2c258:	003fcb06 	br	2c188 <__alt_data_end+0xfffec188>
   2c25c:	502d883a 	mov	r22,r10
   2c260:	00800084 	movi	r2,2
   2c264:	28805726 	beq	r5,r2,2c3c4 <__muldf3+0x2b8>
   2c268:	008000c4 	movi	r2,3
   2c26c:	28816626 	beq	r5,r2,2c808 <__muldf3+0x6fc>
   2c270:	00800044 	movi	r2,1
   2c274:	2881411e 	bne	r5,r2,2c77c <__muldf3+0x670>
   2c278:	b02b883a 	mov	r21,r22
   2c27c:	0005883a 	mov	r2,zero
   2c280:	000b883a 	mov	r5,zero
   2c284:	0029883a 	mov	r20,zero
   2c288:	1004953a 	slli	r2,r2,20
   2c28c:	a8c03fcc 	andi	r3,r21,255
   2c290:	04400434 	movhi	r17,16
   2c294:	8c7fffc4 	addi	r17,r17,-1
   2c298:	180697fa 	slli	r3,r3,31
   2c29c:	2c4a703a 	and	r5,r5,r17
   2c2a0:	288ab03a 	or	r5,r5,r2
   2c2a4:	28c6b03a 	or	r3,r5,r3
   2c2a8:	a005883a 	mov	r2,r20
   2c2ac:	dfc00c17 	ldw	ra,48(sp)
   2c2b0:	df000b17 	ldw	fp,44(sp)
   2c2b4:	ddc00a17 	ldw	r23,40(sp)
   2c2b8:	dd800917 	ldw	r22,36(sp)
   2c2bc:	dd400817 	ldw	r21,32(sp)
   2c2c0:	dd000717 	ldw	r20,28(sp)
   2c2c4:	dcc00617 	ldw	r19,24(sp)
   2c2c8:	dc800517 	ldw	r18,20(sp)
   2c2cc:	dc400417 	ldw	r17,16(sp)
   2c2d0:	dc000317 	ldw	r16,12(sp)
   2c2d4:	dec00d04 	addi	sp,sp,52
   2c2d8:	f800283a 	ret
   2c2dc:	2404b03a 	or	r2,r4,r16
   2c2e0:	2027883a 	mov	r19,r4
   2c2e4:	10004226 	beq	r2,zero,2c3f0 <__muldf3+0x2e4>
   2c2e8:	8000fc26 	beq	r16,zero,2c6dc <__muldf3+0x5d0>
   2c2ec:	8009883a 	mov	r4,r16
   2c2f0:	d9800215 	stw	r6,8(sp)
   2c2f4:	d9c00015 	stw	r7,0(sp)
   2c2f8:	da400115 	stw	r9,4(sp)
   2c2fc:	002d3240 	call	2d324 <__clzsi2>
   2c300:	d9800217 	ldw	r6,8(sp)
   2c304:	d9c00017 	ldw	r7,0(sp)
   2c308:	da400117 	ldw	r9,4(sp)
   2c30c:	113ffd44 	addi	r4,r2,-11
   2c310:	00c00704 	movi	r3,28
   2c314:	1900ed16 	blt	r3,r4,2c6cc <__muldf3+0x5c0>
   2c318:	00c00744 	movi	r3,29
   2c31c:	147ffe04 	addi	r17,r2,-8
   2c320:	1907c83a 	sub	r3,r3,r4
   2c324:	8460983a 	sll	r16,r16,r17
   2c328:	98c6d83a 	srl	r3,r19,r3
   2c32c:	9c68983a 	sll	r20,r19,r17
   2c330:	1c20b03a 	or	r16,r3,r16
   2c334:	1080fcc4 	addi	r2,r2,1011
   2c338:	00a5c83a 	sub	r18,zero,r2
   2c33c:	0027883a 	mov	r19,zero
   2c340:	0039883a 	mov	fp,zero
   2c344:	003f9006 	br	2c188 <__alt_data_end+0xfffec188>
   2c348:	3446b03a 	or	r3,r6,r17
   2c34c:	1800261e 	bne	r3,zero,2c3e8 <__muldf3+0x2dc>
   2c350:	0023883a 	mov	r17,zero
   2c354:	0011883a 	mov	r8,zero
   2c358:	01400084 	movi	r5,2
   2c35c:	003f9c06 	br	2c1d0 <__alt_data_end+0xfffec1d0>
   2c360:	3446b03a 	or	r3,r6,r17
   2c364:	18001c26 	beq	r3,zero,2c3d8 <__muldf3+0x2cc>
   2c368:	8800ce26 	beq	r17,zero,2c6a4 <__muldf3+0x598>
   2c36c:	8809883a 	mov	r4,r17
   2c370:	d9800215 	stw	r6,8(sp)
   2c374:	da400115 	stw	r9,4(sp)
   2c378:	da800015 	stw	r10,0(sp)
   2c37c:	002d3240 	call	2d324 <__clzsi2>
   2c380:	d9800217 	ldw	r6,8(sp)
   2c384:	da400117 	ldw	r9,4(sp)
   2c388:	da800017 	ldw	r10,0(sp)
   2c38c:	113ffd44 	addi	r4,r2,-11
   2c390:	00c00704 	movi	r3,28
   2c394:	1900bf16 	blt	r3,r4,2c694 <__muldf3+0x588>
   2c398:	00c00744 	movi	r3,29
   2c39c:	123ffe04 	addi	r8,r2,-8
   2c3a0:	1907c83a 	sub	r3,r3,r4
   2c3a4:	8a22983a 	sll	r17,r17,r8
   2c3a8:	30c6d83a 	srl	r3,r6,r3
   2c3ac:	3210983a 	sll	r8,r6,r8
   2c3b0:	1c62b03a 	or	r17,r3,r17
   2c3b4:	1080fcc4 	addi	r2,r2,1011
   2c3b8:	0085c83a 	sub	r2,zero,r2
   2c3bc:	000b883a 	mov	r5,zero
   2c3c0:	003f8306 	br	2c1d0 <__alt_data_end+0xfffec1d0>
   2c3c4:	b02b883a 	mov	r21,r22
   2c3c8:	0081ffc4 	movi	r2,2047
   2c3cc:	000b883a 	mov	r5,zero
   2c3d0:	0029883a 	mov	r20,zero
   2c3d4:	003fac06 	br	2c288 <__alt_data_end+0xfffec288>
   2c3d8:	0023883a 	mov	r17,zero
   2c3dc:	0011883a 	mov	r8,zero
   2c3e0:	01400044 	movi	r5,1
   2c3e4:	003f7a06 	br	2c1d0 <__alt_data_end+0xfffec1d0>
   2c3e8:	014000c4 	movi	r5,3
   2c3ec:	003f7806 	br	2c1d0 <__alt_data_end+0xfffec1d0>
   2c3f0:	04c00104 	movi	r19,4
   2c3f4:	0021883a 	mov	r16,zero
   2c3f8:	0029883a 	mov	r20,zero
   2c3fc:	07000044 	movi	fp,1
   2c400:	003f6106 	br	2c188 <__alt_data_end+0xfffec188>
   2c404:	04c00304 	movi	r19,12
   2c408:	070000c4 	movi	fp,3
   2c40c:	003f5e06 	br	2c188 <__alt_data_end+0xfffec188>
   2c410:	01400434 	movhi	r5,16
   2c414:	002b883a 	mov	r21,zero
   2c418:	297fffc4 	addi	r5,r5,-1
   2c41c:	053fffc4 	movi	r20,-1
   2c420:	0081ffc4 	movi	r2,2047
   2c424:	003f9806 	br	2c288 <__alt_data_end+0xfffec288>
   2c428:	8023883a 	mov	r17,r16
   2c42c:	a011883a 	mov	r8,r20
   2c430:	e00b883a 	mov	r5,fp
   2c434:	003f8a06 	br	2c260 <__alt_data_end+0xfffec260>
   2c438:	8023883a 	mov	r17,r16
   2c43c:	a011883a 	mov	r8,r20
   2c440:	482d883a 	mov	r22,r9
   2c444:	e00b883a 	mov	r5,fp
   2c448:	003f8506 	br	2c260 <__alt_data_end+0xfffec260>
   2c44c:	a00ad43a 	srli	r5,r20,16
   2c450:	401ad43a 	srli	r13,r8,16
   2c454:	a53fffcc 	andi	r20,r20,65535
   2c458:	423fffcc 	andi	r8,r8,65535
   2c45c:	4519383a 	mul	r12,r8,r20
   2c460:	4147383a 	mul	r3,r8,r5
   2c464:	6d09383a 	mul	r4,r13,r20
   2c468:	600cd43a 	srli	r6,r12,16
   2c46c:	2b5d383a 	mul	r14,r5,r13
   2c470:	20c9883a 	add	r4,r4,r3
   2c474:	310d883a 	add	r6,r6,r4
   2c478:	30c0022e 	bgeu	r6,r3,2c484 <__muldf3+0x378>
   2c47c:	00c00074 	movhi	r3,1
   2c480:	70dd883a 	add	r14,r14,r3
   2c484:	8826d43a 	srli	r19,r17,16
   2c488:	8bffffcc 	andi	r15,r17,65535
   2c48c:	7d23383a 	mul	r17,r15,r20
   2c490:	7949383a 	mul	r4,r15,r5
   2c494:	9d29383a 	mul	r20,r19,r20
   2c498:	8814d43a 	srli	r10,r17,16
   2c49c:	3012943a 	slli	r9,r6,16
   2c4a0:	a129883a 	add	r20,r20,r4
   2c4a4:	633fffcc 	andi	r12,r12,65535
   2c4a8:	5515883a 	add	r10,r10,r20
   2c4ac:	3006d43a 	srli	r3,r6,16
   2c4b0:	4b13883a 	add	r9,r9,r12
   2c4b4:	2ccb383a 	mul	r5,r5,r19
   2c4b8:	5100022e 	bgeu	r10,r4,2c4c4 <__muldf3+0x3b8>
   2c4bc:	01000074 	movhi	r4,1
   2c4c0:	290b883a 	add	r5,r5,r4
   2c4c4:	802ad43a 	srli	r21,r16,16
   2c4c8:	843fffcc 	andi	r16,r16,65535
   2c4cc:	440d383a 	mul	r6,r8,r16
   2c4d0:	4565383a 	mul	r18,r8,r21
   2c4d4:	8349383a 	mul	r4,r16,r13
   2c4d8:	500e943a 	slli	r7,r10,16
   2c4dc:	3010d43a 	srli	r8,r6,16
   2c4e0:	5028d43a 	srli	r20,r10,16
   2c4e4:	2489883a 	add	r4,r4,r18
   2c4e8:	8abfffcc 	andi	r10,r17,65535
   2c4ec:	3a95883a 	add	r10,r7,r10
   2c4f0:	4119883a 	add	r12,r8,r4
   2c4f4:	a169883a 	add	r20,r20,r5
   2c4f8:	1a87883a 	add	r3,r3,r10
   2c4fc:	6d5b383a 	mul	r13,r13,r21
   2c500:	6480022e 	bgeu	r12,r18,2c50c <__muldf3+0x400>
   2c504:	01000074 	movhi	r4,1
   2c508:	691b883a 	add	r13,r13,r4
   2c50c:	7c25383a 	mul	r18,r15,r16
   2c510:	7d4b383a 	mul	r5,r15,r21
   2c514:	84cf383a 	mul	r7,r16,r19
   2c518:	901ed43a 	srli	r15,r18,16
   2c51c:	6008d43a 	srli	r4,r12,16
   2c520:	6010943a 	slli	r8,r12,16
   2c524:	394f883a 	add	r7,r7,r5
   2c528:	333fffcc 	andi	r12,r6,65535
   2c52c:	79df883a 	add	r15,r15,r7
   2c530:	235b883a 	add	r13,r4,r13
   2c534:	9d63383a 	mul	r17,r19,r21
   2c538:	4309883a 	add	r4,r8,r12
   2c53c:	7940022e 	bgeu	r15,r5,2c548 <__muldf3+0x43c>
   2c540:	01400074 	movhi	r5,1
   2c544:	8963883a 	add	r17,r17,r5
   2c548:	780a943a 	slli	r5,r15,16
   2c54c:	91bfffcc 	andi	r6,r18,65535
   2c550:	70c7883a 	add	r3,r14,r3
   2c554:	298d883a 	add	r6,r5,r6
   2c558:	1a8f803a 	cmpltu	r7,r3,r10
   2c55c:	350b883a 	add	r5,r6,r20
   2c560:	20c7883a 	add	r3,r4,r3
   2c564:	3955883a 	add	r10,r7,r5
   2c568:	1909803a 	cmpltu	r4,r3,r4
   2c56c:	6a91883a 	add	r8,r13,r10
   2c570:	780cd43a 	srli	r6,r15,16
   2c574:	2219883a 	add	r12,r4,r8
   2c578:	2d0b803a 	cmpltu	r5,r5,r20
   2c57c:	51cf803a 	cmpltu	r7,r10,r7
   2c580:	29ceb03a 	or	r7,r5,r7
   2c584:	4351803a 	cmpltu	r8,r8,r13
   2c588:	610b803a 	cmpltu	r5,r12,r4
   2c58c:	4148b03a 	or	r4,r8,r5
   2c590:	398f883a 	add	r7,r7,r6
   2c594:	3909883a 	add	r4,r7,r4
   2c598:	1810927a 	slli	r8,r3,9
   2c59c:	2449883a 	add	r4,r4,r17
   2c5a0:	2008927a 	slli	r4,r4,9
   2c5a4:	6022d5fa 	srli	r17,r12,23
   2c5a8:	1806d5fa 	srli	r3,r3,23
   2c5ac:	4252b03a 	or	r9,r8,r9
   2c5b0:	600a927a 	slli	r5,r12,9
   2c5b4:	4810c03a 	cmpne	r8,r9,zero
   2c5b8:	2462b03a 	or	r17,r4,r17
   2c5bc:	40c6b03a 	or	r3,r8,r3
   2c5c0:	8900402c 	andhi	r4,r17,256
   2c5c4:	1950b03a 	or	r8,r3,r5
   2c5c8:	20000726 	beq	r4,zero,2c5e8 <__muldf3+0x4dc>
   2c5cc:	4006d07a 	srli	r3,r8,1
   2c5d0:	880497fa 	slli	r2,r17,31
   2c5d4:	4200004c 	andi	r8,r8,1
   2c5d8:	8822d07a 	srli	r17,r17,1
   2c5dc:	1a10b03a 	or	r8,r3,r8
   2c5e0:	1210b03a 	or	r8,r2,r8
   2c5e4:	5805883a 	mov	r2,r11
   2c5e8:	1140ffc4 	addi	r5,r2,1023
   2c5ec:	0140440e 	bge	zero,r5,2c700 <__muldf3+0x5f4>
   2c5f0:	40c001cc 	andi	r3,r8,7
   2c5f4:	18000726 	beq	r3,zero,2c614 <__muldf3+0x508>
   2c5f8:	40c003cc 	andi	r3,r8,15
   2c5fc:	01000104 	movi	r4,4
   2c600:	19000426 	beq	r3,r4,2c614 <__muldf3+0x508>
   2c604:	4107883a 	add	r3,r8,r4
   2c608:	1a11803a 	cmpltu	r8,r3,r8
   2c60c:	8a23883a 	add	r17,r17,r8
   2c610:	1811883a 	mov	r8,r3
   2c614:	88c0402c 	andhi	r3,r17,256
   2c618:	18000426 	beq	r3,zero,2c62c <__muldf3+0x520>
   2c61c:	11410004 	addi	r5,r2,1024
   2c620:	00bfc034 	movhi	r2,65280
   2c624:	10bfffc4 	addi	r2,r2,-1
   2c628:	88a2703a 	and	r17,r17,r2
   2c62c:	0081ff84 	movi	r2,2046
   2c630:	117f6416 	blt	r2,r5,2c3c4 <__alt_data_end+0xfffec3c4>
   2c634:	8828977a 	slli	r20,r17,29
   2c638:	4010d0fa 	srli	r8,r8,3
   2c63c:	8822927a 	slli	r17,r17,9
   2c640:	2881ffcc 	andi	r2,r5,2047
   2c644:	a228b03a 	or	r20,r20,r8
   2c648:	880ad33a 	srli	r5,r17,12
   2c64c:	b02b883a 	mov	r21,r22
   2c650:	003f0d06 	br	2c288 <__alt_data_end+0xfffec288>
   2c654:	8080022c 	andhi	r2,r16,8
   2c658:	10000926 	beq	r2,zero,2c680 <__muldf3+0x574>
   2c65c:	8880022c 	andhi	r2,r17,8
   2c660:	1000071e 	bne	r2,zero,2c680 <__muldf3+0x574>
   2c664:	00800434 	movhi	r2,16
   2c668:	89400234 	orhi	r5,r17,8
   2c66c:	10bfffc4 	addi	r2,r2,-1
   2c670:	b82b883a 	mov	r21,r23
   2c674:	288a703a 	and	r5,r5,r2
   2c678:	4029883a 	mov	r20,r8
   2c67c:	003f6806 	br	2c420 <__alt_data_end+0xfffec420>
   2c680:	00800434 	movhi	r2,16
   2c684:	81400234 	orhi	r5,r16,8
   2c688:	10bfffc4 	addi	r2,r2,-1
   2c68c:	288a703a 	and	r5,r5,r2
   2c690:	003f6306 	br	2c420 <__alt_data_end+0xfffec420>
   2c694:	147ff604 	addi	r17,r2,-40
   2c698:	3462983a 	sll	r17,r6,r17
   2c69c:	0011883a 	mov	r8,zero
   2c6a0:	003f4406 	br	2c3b4 <__alt_data_end+0xfffec3b4>
   2c6a4:	3009883a 	mov	r4,r6
   2c6a8:	d9800215 	stw	r6,8(sp)
   2c6ac:	da400115 	stw	r9,4(sp)
   2c6b0:	da800015 	stw	r10,0(sp)
   2c6b4:	002d3240 	call	2d324 <__clzsi2>
   2c6b8:	10800804 	addi	r2,r2,32
   2c6bc:	da800017 	ldw	r10,0(sp)
   2c6c0:	da400117 	ldw	r9,4(sp)
   2c6c4:	d9800217 	ldw	r6,8(sp)
   2c6c8:	003f3006 	br	2c38c <__alt_data_end+0xfffec38c>
   2c6cc:	143ff604 	addi	r16,r2,-40
   2c6d0:	9c20983a 	sll	r16,r19,r16
   2c6d4:	0029883a 	mov	r20,zero
   2c6d8:	003f1606 	br	2c334 <__alt_data_end+0xfffec334>
   2c6dc:	d9800215 	stw	r6,8(sp)
   2c6e0:	d9c00015 	stw	r7,0(sp)
   2c6e4:	da400115 	stw	r9,4(sp)
   2c6e8:	002d3240 	call	2d324 <__clzsi2>
   2c6ec:	10800804 	addi	r2,r2,32
   2c6f0:	da400117 	ldw	r9,4(sp)
   2c6f4:	d9c00017 	ldw	r7,0(sp)
   2c6f8:	d9800217 	ldw	r6,8(sp)
   2c6fc:	003f0306 	br	2c30c <__alt_data_end+0xfffec30c>
   2c700:	00c00044 	movi	r3,1
   2c704:	1947c83a 	sub	r3,r3,r5
   2c708:	00800e04 	movi	r2,56
   2c70c:	10feda16 	blt	r2,r3,2c278 <__alt_data_end+0xfffec278>
   2c710:	008007c4 	movi	r2,31
   2c714:	10c01b16 	blt	r2,r3,2c784 <__muldf3+0x678>
   2c718:	00800804 	movi	r2,32
   2c71c:	10c5c83a 	sub	r2,r2,r3
   2c720:	888a983a 	sll	r5,r17,r2
   2c724:	40c8d83a 	srl	r4,r8,r3
   2c728:	4084983a 	sll	r2,r8,r2
   2c72c:	88e2d83a 	srl	r17,r17,r3
   2c730:	2906b03a 	or	r3,r5,r4
   2c734:	1004c03a 	cmpne	r2,r2,zero
   2c738:	1886b03a 	or	r3,r3,r2
   2c73c:	188001cc 	andi	r2,r3,7
   2c740:	10000726 	beq	r2,zero,2c760 <__muldf3+0x654>
   2c744:	188003cc 	andi	r2,r3,15
   2c748:	01000104 	movi	r4,4
   2c74c:	11000426 	beq	r2,r4,2c760 <__muldf3+0x654>
   2c750:	1805883a 	mov	r2,r3
   2c754:	10c00104 	addi	r3,r2,4
   2c758:	1885803a 	cmpltu	r2,r3,r2
   2c75c:	88a3883a 	add	r17,r17,r2
   2c760:	8880202c 	andhi	r2,r17,128
   2c764:	10001c26 	beq	r2,zero,2c7d8 <__muldf3+0x6cc>
   2c768:	b02b883a 	mov	r21,r22
   2c76c:	00800044 	movi	r2,1
   2c770:	000b883a 	mov	r5,zero
   2c774:	0029883a 	mov	r20,zero
   2c778:	003ec306 	br	2c288 <__alt_data_end+0xfffec288>
   2c77c:	5805883a 	mov	r2,r11
   2c780:	003f9906 	br	2c5e8 <__alt_data_end+0xfffec5e8>
   2c784:	00bff844 	movi	r2,-31
   2c788:	1145c83a 	sub	r2,r2,r5
   2c78c:	8888d83a 	srl	r4,r17,r2
   2c790:	00800804 	movi	r2,32
   2c794:	18801a26 	beq	r3,r2,2c800 <__muldf3+0x6f4>
   2c798:	00801004 	movi	r2,64
   2c79c:	10c5c83a 	sub	r2,r2,r3
   2c7a0:	8884983a 	sll	r2,r17,r2
   2c7a4:	1204b03a 	or	r2,r2,r8
   2c7a8:	1004c03a 	cmpne	r2,r2,zero
   2c7ac:	2084b03a 	or	r2,r4,r2
   2c7b0:	144001cc 	andi	r17,r2,7
   2c7b4:	88000d1e 	bne	r17,zero,2c7ec <__muldf3+0x6e0>
   2c7b8:	000b883a 	mov	r5,zero
   2c7bc:	1028d0fa 	srli	r20,r2,3
   2c7c0:	b02b883a 	mov	r21,r22
   2c7c4:	0005883a 	mov	r2,zero
   2c7c8:	a468b03a 	or	r20,r20,r17
   2c7cc:	003eae06 	br	2c288 <__alt_data_end+0xfffec288>
   2c7d0:	1007883a 	mov	r3,r2
   2c7d4:	0023883a 	mov	r17,zero
   2c7d8:	880a927a 	slli	r5,r17,9
   2c7dc:	1805883a 	mov	r2,r3
   2c7e0:	8822977a 	slli	r17,r17,29
   2c7e4:	280ad33a 	srli	r5,r5,12
   2c7e8:	003ff406 	br	2c7bc <__alt_data_end+0xfffec7bc>
   2c7ec:	10c003cc 	andi	r3,r2,15
   2c7f0:	01000104 	movi	r4,4
   2c7f4:	193ff626 	beq	r3,r4,2c7d0 <__alt_data_end+0xfffec7d0>
   2c7f8:	0023883a 	mov	r17,zero
   2c7fc:	003fd506 	br	2c754 <__alt_data_end+0xfffec754>
   2c800:	0005883a 	mov	r2,zero
   2c804:	003fe706 	br	2c7a4 <__alt_data_end+0xfffec7a4>
   2c808:	00800434 	movhi	r2,16
   2c80c:	89400234 	orhi	r5,r17,8
   2c810:	10bfffc4 	addi	r2,r2,-1
   2c814:	b02b883a 	mov	r21,r22
   2c818:	288a703a 	and	r5,r5,r2
   2c81c:	4029883a 	mov	r20,r8
   2c820:	003eff06 	br	2c420 <__alt_data_end+0xfffec420>

0002c824 <__subdf3>:
   2c824:	02000434 	movhi	r8,16
   2c828:	423fffc4 	addi	r8,r8,-1
   2c82c:	defffb04 	addi	sp,sp,-20
   2c830:	2a14703a 	and	r10,r5,r8
   2c834:	3812d53a 	srli	r9,r7,20
   2c838:	3a10703a 	and	r8,r7,r8
   2c83c:	2006d77a 	srli	r3,r4,29
   2c840:	3004d77a 	srli	r2,r6,29
   2c844:	dc000015 	stw	r16,0(sp)
   2c848:	501490fa 	slli	r10,r10,3
   2c84c:	2820d53a 	srli	r16,r5,20
   2c850:	401090fa 	slli	r8,r8,3
   2c854:	dc800215 	stw	r18,8(sp)
   2c858:	dc400115 	stw	r17,4(sp)
   2c85c:	dfc00415 	stw	ra,16(sp)
   2c860:	202290fa 	slli	r17,r4,3
   2c864:	dcc00315 	stw	r19,12(sp)
   2c868:	4a41ffcc 	andi	r9,r9,2047
   2c86c:	0101ffc4 	movi	r4,2047
   2c870:	2824d7fa 	srli	r18,r5,31
   2c874:	8401ffcc 	andi	r16,r16,2047
   2c878:	50c6b03a 	or	r3,r10,r3
   2c87c:	380ed7fa 	srli	r7,r7,31
   2c880:	408ab03a 	or	r5,r8,r2
   2c884:	300c90fa 	slli	r6,r6,3
   2c888:	49009626 	beq	r9,r4,2cae4 <__subdf3+0x2c0>
   2c88c:	39c0005c 	xori	r7,r7,1
   2c890:	8245c83a 	sub	r2,r16,r9
   2c894:	3c807426 	beq	r7,r18,2ca68 <__subdf3+0x244>
   2c898:	0080af0e 	bge	zero,r2,2cb58 <__subdf3+0x334>
   2c89c:	48002a1e 	bne	r9,zero,2c948 <__subdf3+0x124>
   2c8a0:	2988b03a 	or	r4,r5,r6
   2c8a4:	20009a1e 	bne	r4,zero,2cb10 <__subdf3+0x2ec>
   2c8a8:	888001cc 	andi	r2,r17,7
   2c8ac:	10000726 	beq	r2,zero,2c8cc <__subdf3+0xa8>
   2c8b0:	888003cc 	andi	r2,r17,15
   2c8b4:	01000104 	movi	r4,4
   2c8b8:	11000426 	beq	r2,r4,2c8cc <__subdf3+0xa8>
   2c8bc:	890b883a 	add	r5,r17,r4
   2c8c0:	2c63803a 	cmpltu	r17,r5,r17
   2c8c4:	1c47883a 	add	r3,r3,r17
   2c8c8:	2823883a 	mov	r17,r5
   2c8cc:	1880202c 	andhi	r2,r3,128
   2c8d0:	10005926 	beq	r2,zero,2ca38 <__subdf3+0x214>
   2c8d4:	84000044 	addi	r16,r16,1
   2c8d8:	0081ffc4 	movi	r2,2047
   2c8dc:	8080be26 	beq	r16,r2,2cbd8 <__subdf3+0x3b4>
   2c8e0:	017fe034 	movhi	r5,65408
   2c8e4:	297fffc4 	addi	r5,r5,-1
   2c8e8:	1946703a 	and	r3,r3,r5
   2c8ec:	1804977a 	slli	r2,r3,29
   2c8f0:	1806927a 	slli	r3,r3,9
   2c8f4:	8822d0fa 	srli	r17,r17,3
   2c8f8:	8401ffcc 	andi	r16,r16,2047
   2c8fc:	180ad33a 	srli	r5,r3,12
   2c900:	9100004c 	andi	r4,r18,1
   2c904:	1444b03a 	or	r2,r2,r17
   2c908:	80c1ffcc 	andi	r3,r16,2047
   2c90c:	1820953a 	slli	r16,r3,20
   2c910:	20c03fcc 	andi	r3,r4,255
   2c914:	180897fa 	slli	r4,r3,31
   2c918:	00c00434 	movhi	r3,16
   2c91c:	18ffffc4 	addi	r3,r3,-1
   2c920:	28c6703a 	and	r3,r5,r3
   2c924:	1c06b03a 	or	r3,r3,r16
   2c928:	1906b03a 	or	r3,r3,r4
   2c92c:	dfc00417 	ldw	ra,16(sp)
   2c930:	dcc00317 	ldw	r19,12(sp)
   2c934:	dc800217 	ldw	r18,8(sp)
   2c938:	dc400117 	ldw	r17,4(sp)
   2c93c:	dc000017 	ldw	r16,0(sp)
   2c940:	dec00504 	addi	sp,sp,20
   2c944:	f800283a 	ret
   2c948:	0101ffc4 	movi	r4,2047
   2c94c:	813fd626 	beq	r16,r4,2c8a8 <__alt_data_end+0xfffec8a8>
   2c950:	29402034 	orhi	r5,r5,128
   2c954:	01000e04 	movi	r4,56
   2c958:	2080a316 	blt	r4,r2,2cbe8 <__subdf3+0x3c4>
   2c95c:	010007c4 	movi	r4,31
   2c960:	2080c616 	blt	r4,r2,2cc7c <__subdf3+0x458>
   2c964:	01000804 	movi	r4,32
   2c968:	2089c83a 	sub	r4,r4,r2
   2c96c:	2910983a 	sll	r8,r5,r4
   2c970:	308ed83a 	srl	r7,r6,r2
   2c974:	3108983a 	sll	r4,r6,r4
   2c978:	2884d83a 	srl	r2,r5,r2
   2c97c:	41ccb03a 	or	r6,r8,r7
   2c980:	2008c03a 	cmpne	r4,r4,zero
   2c984:	310cb03a 	or	r6,r6,r4
   2c988:	898dc83a 	sub	r6,r17,r6
   2c98c:	89a3803a 	cmpltu	r17,r17,r6
   2c990:	1887c83a 	sub	r3,r3,r2
   2c994:	1c47c83a 	sub	r3,r3,r17
   2c998:	3023883a 	mov	r17,r6
   2c99c:	1880202c 	andhi	r2,r3,128
   2c9a0:	10002326 	beq	r2,zero,2ca30 <__subdf3+0x20c>
   2c9a4:	04c02034 	movhi	r19,128
   2c9a8:	9cffffc4 	addi	r19,r19,-1
   2c9ac:	1ce6703a 	and	r19,r3,r19
   2c9b0:	98007a26 	beq	r19,zero,2cb9c <__subdf3+0x378>
   2c9b4:	9809883a 	mov	r4,r19
   2c9b8:	002d3240 	call	2d324 <__clzsi2>
   2c9bc:	113ffe04 	addi	r4,r2,-8
   2c9c0:	00c007c4 	movi	r3,31
   2c9c4:	19007b16 	blt	r3,r4,2cbb4 <__subdf3+0x390>
   2c9c8:	00800804 	movi	r2,32
   2c9cc:	1105c83a 	sub	r2,r2,r4
   2c9d0:	8884d83a 	srl	r2,r17,r2
   2c9d4:	9906983a 	sll	r3,r19,r4
   2c9d8:	8922983a 	sll	r17,r17,r4
   2c9dc:	10c4b03a 	or	r2,r2,r3
   2c9e0:	24007816 	blt	r4,r16,2cbc4 <__subdf3+0x3a0>
   2c9e4:	2421c83a 	sub	r16,r4,r16
   2c9e8:	80c00044 	addi	r3,r16,1
   2c9ec:	010007c4 	movi	r4,31
   2c9f0:	20c09516 	blt	r4,r3,2cc48 <__subdf3+0x424>
   2c9f4:	01400804 	movi	r5,32
   2c9f8:	28cbc83a 	sub	r5,r5,r3
   2c9fc:	88c8d83a 	srl	r4,r17,r3
   2ca00:	8962983a 	sll	r17,r17,r5
   2ca04:	114a983a 	sll	r5,r2,r5
   2ca08:	10c6d83a 	srl	r3,r2,r3
   2ca0c:	8804c03a 	cmpne	r2,r17,zero
   2ca10:	290ab03a 	or	r5,r5,r4
   2ca14:	28a2b03a 	or	r17,r5,r2
   2ca18:	0021883a 	mov	r16,zero
   2ca1c:	003fa206 	br	2c8a8 <__alt_data_end+0xfffec8a8>
   2ca20:	2090b03a 	or	r8,r4,r2
   2ca24:	40018e26 	beq	r8,zero,2d060 <__subdf3+0x83c>
   2ca28:	1007883a 	mov	r3,r2
   2ca2c:	2023883a 	mov	r17,r4
   2ca30:	888001cc 	andi	r2,r17,7
   2ca34:	103f9e1e 	bne	r2,zero,2c8b0 <__alt_data_end+0xfffec8b0>
   2ca38:	1804977a 	slli	r2,r3,29
   2ca3c:	8822d0fa 	srli	r17,r17,3
   2ca40:	1810d0fa 	srli	r8,r3,3
   2ca44:	9100004c 	andi	r4,r18,1
   2ca48:	1444b03a 	or	r2,r2,r17
   2ca4c:	00c1ffc4 	movi	r3,2047
   2ca50:	80c02826 	beq	r16,r3,2caf4 <__subdf3+0x2d0>
   2ca54:	01400434 	movhi	r5,16
   2ca58:	297fffc4 	addi	r5,r5,-1
   2ca5c:	80e0703a 	and	r16,r16,r3
   2ca60:	414a703a 	and	r5,r8,r5
   2ca64:	003fa806 	br	2c908 <__alt_data_end+0xfffec908>
   2ca68:	0080630e 	bge	zero,r2,2cbf8 <__subdf3+0x3d4>
   2ca6c:	48003026 	beq	r9,zero,2cb30 <__subdf3+0x30c>
   2ca70:	0101ffc4 	movi	r4,2047
   2ca74:	813f8c26 	beq	r16,r4,2c8a8 <__alt_data_end+0xfffec8a8>
   2ca78:	29402034 	orhi	r5,r5,128
   2ca7c:	01000e04 	movi	r4,56
   2ca80:	2080a90e 	bge	r4,r2,2cd28 <__subdf3+0x504>
   2ca84:	298cb03a 	or	r6,r5,r6
   2ca88:	3012c03a 	cmpne	r9,r6,zero
   2ca8c:	0005883a 	mov	r2,zero
   2ca90:	4c53883a 	add	r9,r9,r17
   2ca94:	4c63803a 	cmpltu	r17,r9,r17
   2ca98:	10c7883a 	add	r3,r2,r3
   2ca9c:	88c7883a 	add	r3,r17,r3
   2caa0:	4823883a 	mov	r17,r9
   2caa4:	1880202c 	andhi	r2,r3,128
   2caa8:	1000d026 	beq	r2,zero,2cdec <__subdf3+0x5c8>
   2caac:	84000044 	addi	r16,r16,1
   2cab0:	0081ffc4 	movi	r2,2047
   2cab4:	8080fe26 	beq	r16,r2,2ceb0 <__subdf3+0x68c>
   2cab8:	00bfe034 	movhi	r2,65408
   2cabc:	10bfffc4 	addi	r2,r2,-1
   2cac0:	1886703a 	and	r3,r3,r2
   2cac4:	880ad07a 	srli	r5,r17,1
   2cac8:	180497fa 	slli	r2,r3,31
   2cacc:	8900004c 	andi	r4,r17,1
   2cad0:	2922b03a 	or	r17,r5,r4
   2cad4:	1806d07a 	srli	r3,r3,1
   2cad8:	1462b03a 	or	r17,r2,r17
   2cadc:	3825883a 	mov	r18,r7
   2cae0:	003f7106 	br	2c8a8 <__alt_data_end+0xfffec8a8>
   2cae4:	2984b03a 	or	r2,r5,r6
   2cae8:	103f6826 	beq	r2,zero,2c88c <__alt_data_end+0xfffec88c>
   2caec:	39c03fcc 	andi	r7,r7,255
   2caf0:	003f6706 	br	2c890 <__alt_data_end+0xfffec890>
   2caf4:	4086b03a 	or	r3,r8,r2
   2caf8:	18015226 	beq	r3,zero,2d044 <__subdf3+0x820>
   2cafc:	00c00434 	movhi	r3,16
   2cb00:	41400234 	orhi	r5,r8,8
   2cb04:	18ffffc4 	addi	r3,r3,-1
   2cb08:	28ca703a 	and	r5,r5,r3
   2cb0c:	003f7e06 	br	2c908 <__alt_data_end+0xfffec908>
   2cb10:	10bfffc4 	addi	r2,r2,-1
   2cb14:	1000491e 	bne	r2,zero,2cc3c <__subdf3+0x418>
   2cb18:	898fc83a 	sub	r7,r17,r6
   2cb1c:	89e3803a 	cmpltu	r17,r17,r7
   2cb20:	1947c83a 	sub	r3,r3,r5
   2cb24:	1c47c83a 	sub	r3,r3,r17
   2cb28:	3823883a 	mov	r17,r7
   2cb2c:	003f9b06 	br	2c99c <__alt_data_end+0xfffec99c>
   2cb30:	2988b03a 	or	r4,r5,r6
   2cb34:	203f5c26 	beq	r4,zero,2c8a8 <__alt_data_end+0xfffec8a8>
   2cb38:	10bfffc4 	addi	r2,r2,-1
   2cb3c:	1000931e 	bne	r2,zero,2cd8c <__subdf3+0x568>
   2cb40:	898d883a 	add	r6,r17,r6
   2cb44:	3463803a 	cmpltu	r17,r6,r17
   2cb48:	1947883a 	add	r3,r3,r5
   2cb4c:	88c7883a 	add	r3,r17,r3
   2cb50:	3023883a 	mov	r17,r6
   2cb54:	003fd306 	br	2caa4 <__alt_data_end+0xfffecaa4>
   2cb58:	1000541e 	bne	r2,zero,2ccac <__subdf3+0x488>
   2cb5c:	80800044 	addi	r2,r16,1
   2cb60:	1081ffcc 	andi	r2,r2,2047
   2cb64:	01000044 	movi	r4,1
   2cb68:	2080a20e 	bge	r4,r2,2cdf4 <__subdf3+0x5d0>
   2cb6c:	8989c83a 	sub	r4,r17,r6
   2cb70:	8905803a 	cmpltu	r2,r17,r4
   2cb74:	1967c83a 	sub	r19,r3,r5
   2cb78:	98a7c83a 	sub	r19,r19,r2
   2cb7c:	9880202c 	andhi	r2,r19,128
   2cb80:	10006326 	beq	r2,zero,2cd10 <__subdf3+0x4ec>
   2cb84:	3463c83a 	sub	r17,r6,r17
   2cb88:	28c7c83a 	sub	r3,r5,r3
   2cb8c:	344d803a 	cmpltu	r6,r6,r17
   2cb90:	19a7c83a 	sub	r19,r3,r6
   2cb94:	3825883a 	mov	r18,r7
   2cb98:	983f861e 	bne	r19,zero,2c9b4 <__alt_data_end+0xfffec9b4>
   2cb9c:	8809883a 	mov	r4,r17
   2cba0:	002d3240 	call	2d324 <__clzsi2>
   2cba4:	10800804 	addi	r2,r2,32
   2cba8:	113ffe04 	addi	r4,r2,-8
   2cbac:	00c007c4 	movi	r3,31
   2cbb0:	193f850e 	bge	r3,r4,2c9c8 <__alt_data_end+0xfffec9c8>
   2cbb4:	10bff604 	addi	r2,r2,-40
   2cbb8:	8884983a 	sll	r2,r17,r2
   2cbbc:	0023883a 	mov	r17,zero
   2cbc0:	243f880e 	bge	r4,r16,2c9e4 <__alt_data_end+0xfffec9e4>
   2cbc4:	00ffe034 	movhi	r3,65408
   2cbc8:	18ffffc4 	addi	r3,r3,-1
   2cbcc:	8121c83a 	sub	r16,r16,r4
   2cbd0:	10c6703a 	and	r3,r2,r3
   2cbd4:	003f3406 	br	2c8a8 <__alt_data_end+0xfffec8a8>
   2cbd8:	9100004c 	andi	r4,r18,1
   2cbdc:	000b883a 	mov	r5,zero
   2cbe0:	0005883a 	mov	r2,zero
   2cbe4:	003f4806 	br	2c908 <__alt_data_end+0xfffec908>
   2cbe8:	298cb03a 	or	r6,r5,r6
   2cbec:	300cc03a 	cmpne	r6,r6,zero
   2cbf0:	0005883a 	mov	r2,zero
   2cbf4:	003f6406 	br	2c988 <__alt_data_end+0xfffec988>
   2cbf8:	10009a1e 	bne	r2,zero,2ce64 <__subdf3+0x640>
   2cbfc:	82400044 	addi	r9,r16,1
   2cc00:	4881ffcc 	andi	r2,r9,2047
   2cc04:	02800044 	movi	r10,1
   2cc08:	5080670e 	bge	r10,r2,2cda8 <__subdf3+0x584>
   2cc0c:	0081ffc4 	movi	r2,2047
   2cc10:	4880af26 	beq	r9,r2,2ced0 <__subdf3+0x6ac>
   2cc14:	898d883a 	add	r6,r17,r6
   2cc18:	1945883a 	add	r2,r3,r5
   2cc1c:	3447803a 	cmpltu	r3,r6,r17
   2cc20:	1887883a 	add	r3,r3,r2
   2cc24:	182297fa 	slli	r17,r3,31
   2cc28:	300cd07a 	srli	r6,r6,1
   2cc2c:	1806d07a 	srli	r3,r3,1
   2cc30:	4821883a 	mov	r16,r9
   2cc34:	89a2b03a 	or	r17,r17,r6
   2cc38:	003f1b06 	br	2c8a8 <__alt_data_end+0xfffec8a8>
   2cc3c:	0101ffc4 	movi	r4,2047
   2cc40:	813f441e 	bne	r16,r4,2c954 <__alt_data_end+0xfffec954>
   2cc44:	003f1806 	br	2c8a8 <__alt_data_end+0xfffec8a8>
   2cc48:	843ff844 	addi	r16,r16,-31
   2cc4c:	01400804 	movi	r5,32
   2cc50:	1408d83a 	srl	r4,r2,r16
   2cc54:	19405026 	beq	r3,r5,2cd98 <__subdf3+0x574>
   2cc58:	01401004 	movi	r5,64
   2cc5c:	28c7c83a 	sub	r3,r5,r3
   2cc60:	10c4983a 	sll	r2,r2,r3
   2cc64:	88a2b03a 	or	r17,r17,r2
   2cc68:	8822c03a 	cmpne	r17,r17,zero
   2cc6c:	2462b03a 	or	r17,r4,r17
   2cc70:	0007883a 	mov	r3,zero
   2cc74:	0021883a 	mov	r16,zero
   2cc78:	003f6d06 	br	2ca30 <__alt_data_end+0xfffeca30>
   2cc7c:	11fff804 	addi	r7,r2,-32
   2cc80:	01000804 	movi	r4,32
   2cc84:	29ced83a 	srl	r7,r5,r7
   2cc88:	11004526 	beq	r2,r4,2cda0 <__subdf3+0x57c>
   2cc8c:	01001004 	movi	r4,64
   2cc90:	2089c83a 	sub	r4,r4,r2
   2cc94:	2904983a 	sll	r2,r5,r4
   2cc98:	118cb03a 	or	r6,r2,r6
   2cc9c:	300cc03a 	cmpne	r6,r6,zero
   2cca0:	398cb03a 	or	r6,r7,r6
   2cca4:	0005883a 	mov	r2,zero
   2cca8:	003f3706 	br	2c988 <__alt_data_end+0xfffec988>
   2ccac:	80002a26 	beq	r16,zero,2cd58 <__subdf3+0x534>
   2ccb0:	0101ffc4 	movi	r4,2047
   2ccb4:	49006626 	beq	r9,r4,2ce50 <__subdf3+0x62c>
   2ccb8:	0085c83a 	sub	r2,zero,r2
   2ccbc:	18c02034 	orhi	r3,r3,128
   2ccc0:	01000e04 	movi	r4,56
   2ccc4:	20807e16 	blt	r4,r2,2cec0 <__subdf3+0x69c>
   2ccc8:	010007c4 	movi	r4,31
   2cccc:	2080e716 	blt	r4,r2,2d06c <__subdf3+0x848>
   2ccd0:	01000804 	movi	r4,32
   2ccd4:	2089c83a 	sub	r4,r4,r2
   2ccd8:	1914983a 	sll	r10,r3,r4
   2ccdc:	8890d83a 	srl	r8,r17,r2
   2cce0:	8908983a 	sll	r4,r17,r4
   2cce4:	1884d83a 	srl	r2,r3,r2
   2cce8:	5222b03a 	or	r17,r10,r8
   2ccec:	2006c03a 	cmpne	r3,r4,zero
   2ccf0:	88e2b03a 	or	r17,r17,r3
   2ccf4:	3463c83a 	sub	r17,r6,r17
   2ccf8:	2885c83a 	sub	r2,r5,r2
   2ccfc:	344d803a 	cmpltu	r6,r6,r17
   2cd00:	1187c83a 	sub	r3,r2,r6
   2cd04:	4821883a 	mov	r16,r9
   2cd08:	3825883a 	mov	r18,r7
   2cd0c:	003f2306 	br	2c99c <__alt_data_end+0xfffec99c>
   2cd10:	24d0b03a 	or	r8,r4,r19
   2cd14:	40001b1e 	bne	r8,zero,2cd84 <__subdf3+0x560>
   2cd18:	0005883a 	mov	r2,zero
   2cd1c:	0009883a 	mov	r4,zero
   2cd20:	0021883a 	mov	r16,zero
   2cd24:	003f4906 	br	2ca4c <__alt_data_end+0xfffeca4c>
   2cd28:	010007c4 	movi	r4,31
   2cd2c:	20803a16 	blt	r4,r2,2ce18 <__subdf3+0x5f4>
   2cd30:	01000804 	movi	r4,32
   2cd34:	2089c83a 	sub	r4,r4,r2
   2cd38:	2912983a 	sll	r9,r5,r4
   2cd3c:	3090d83a 	srl	r8,r6,r2
   2cd40:	3108983a 	sll	r4,r6,r4
   2cd44:	2884d83a 	srl	r2,r5,r2
   2cd48:	4a12b03a 	or	r9,r9,r8
   2cd4c:	2008c03a 	cmpne	r4,r4,zero
   2cd50:	4912b03a 	or	r9,r9,r4
   2cd54:	003f4e06 	br	2ca90 <__alt_data_end+0xfffeca90>
   2cd58:	1c48b03a 	or	r4,r3,r17
   2cd5c:	20003c26 	beq	r4,zero,2ce50 <__subdf3+0x62c>
   2cd60:	0084303a 	nor	r2,zero,r2
   2cd64:	1000381e 	bne	r2,zero,2ce48 <__subdf3+0x624>
   2cd68:	3463c83a 	sub	r17,r6,r17
   2cd6c:	28c5c83a 	sub	r2,r5,r3
   2cd70:	344d803a 	cmpltu	r6,r6,r17
   2cd74:	1187c83a 	sub	r3,r2,r6
   2cd78:	4821883a 	mov	r16,r9
   2cd7c:	3825883a 	mov	r18,r7
   2cd80:	003f0606 	br	2c99c <__alt_data_end+0xfffec99c>
   2cd84:	2023883a 	mov	r17,r4
   2cd88:	003f0906 	br	2c9b0 <__alt_data_end+0xfffec9b0>
   2cd8c:	0101ffc4 	movi	r4,2047
   2cd90:	813f3a1e 	bne	r16,r4,2ca7c <__alt_data_end+0xfffeca7c>
   2cd94:	003ec406 	br	2c8a8 <__alt_data_end+0xfffec8a8>
   2cd98:	0005883a 	mov	r2,zero
   2cd9c:	003fb106 	br	2cc64 <__alt_data_end+0xfffecc64>
   2cda0:	0005883a 	mov	r2,zero
   2cda4:	003fbc06 	br	2cc98 <__alt_data_end+0xfffecc98>
   2cda8:	1c44b03a 	or	r2,r3,r17
   2cdac:	80008e1e 	bne	r16,zero,2cfe8 <__subdf3+0x7c4>
   2cdb0:	1000c826 	beq	r2,zero,2d0d4 <__subdf3+0x8b0>
   2cdb4:	2984b03a 	or	r2,r5,r6
   2cdb8:	103ebb26 	beq	r2,zero,2c8a8 <__alt_data_end+0xfffec8a8>
   2cdbc:	8989883a 	add	r4,r17,r6
   2cdc0:	1945883a 	add	r2,r3,r5
   2cdc4:	2447803a 	cmpltu	r3,r4,r17
   2cdc8:	1887883a 	add	r3,r3,r2
   2cdcc:	1880202c 	andhi	r2,r3,128
   2cdd0:	2023883a 	mov	r17,r4
   2cdd4:	103f1626 	beq	r2,zero,2ca30 <__alt_data_end+0xfffeca30>
   2cdd8:	00bfe034 	movhi	r2,65408
   2cddc:	10bfffc4 	addi	r2,r2,-1
   2cde0:	5021883a 	mov	r16,r10
   2cde4:	1886703a 	and	r3,r3,r2
   2cde8:	003eaf06 	br	2c8a8 <__alt_data_end+0xfffec8a8>
   2cdec:	3825883a 	mov	r18,r7
   2cdf0:	003f0f06 	br	2ca30 <__alt_data_end+0xfffeca30>
   2cdf4:	1c44b03a 	or	r2,r3,r17
   2cdf8:	8000251e 	bne	r16,zero,2ce90 <__subdf3+0x66c>
   2cdfc:	1000661e 	bne	r2,zero,2cf98 <__subdf3+0x774>
   2ce00:	2990b03a 	or	r8,r5,r6
   2ce04:	40009626 	beq	r8,zero,2d060 <__subdf3+0x83c>
   2ce08:	2807883a 	mov	r3,r5
   2ce0c:	3023883a 	mov	r17,r6
   2ce10:	3825883a 	mov	r18,r7
   2ce14:	003ea406 	br	2c8a8 <__alt_data_end+0xfffec8a8>
   2ce18:	127ff804 	addi	r9,r2,-32
   2ce1c:	01000804 	movi	r4,32
   2ce20:	2a52d83a 	srl	r9,r5,r9
   2ce24:	11008c26 	beq	r2,r4,2d058 <__subdf3+0x834>
   2ce28:	01001004 	movi	r4,64
   2ce2c:	2085c83a 	sub	r2,r4,r2
   2ce30:	2884983a 	sll	r2,r5,r2
   2ce34:	118cb03a 	or	r6,r2,r6
   2ce38:	300cc03a 	cmpne	r6,r6,zero
   2ce3c:	4992b03a 	or	r9,r9,r6
   2ce40:	0005883a 	mov	r2,zero
   2ce44:	003f1206 	br	2ca90 <__alt_data_end+0xfffeca90>
   2ce48:	0101ffc4 	movi	r4,2047
   2ce4c:	493f9c1e 	bne	r9,r4,2ccc0 <__alt_data_end+0xfffeccc0>
   2ce50:	2807883a 	mov	r3,r5
   2ce54:	3023883a 	mov	r17,r6
   2ce58:	4821883a 	mov	r16,r9
   2ce5c:	3825883a 	mov	r18,r7
   2ce60:	003e9106 	br	2c8a8 <__alt_data_end+0xfffec8a8>
   2ce64:	80001f1e 	bne	r16,zero,2cee4 <__subdf3+0x6c0>
   2ce68:	1c48b03a 	or	r4,r3,r17
   2ce6c:	20005a26 	beq	r4,zero,2cfd8 <__subdf3+0x7b4>
   2ce70:	0084303a 	nor	r2,zero,r2
   2ce74:	1000561e 	bne	r2,zero,2cfd0 <__subdf3+0x7ac>
   2ce78:	89a3883a 	add	r17,r17,r6
   2ce7c:	1945883a 	add	r2,r3,r5
   2ce80:	898d803a 	cmpltu	r6,r17,r6
   2ce84:	3087883a 	add	r3,r6,r2
   2ce88:	4821883a 	mov	r16,r9
   2ce8c:	003f0506 	br	2caa4 <__alt_data_end+0xfffecaa4>
   2ce90:	10002b1e 	bne	r2,zero,2cf40 <__subdf3+0x71c>
   2ce94:	2984b03a 	or	r2,r5,r6
   2ce98:	10008026 	beq	r2,zero,2d09c <__subdf3+0x878>
   2ce9c:	2807883a 	mov	r3,r5
   2cea0:	3023883a 	mov	r17,r6
   2cea4:	3825883a 	mov	r18,r7
   2cea8:	0401ffc4 	movi	r16,2047
   2ceac:	003e7e06 	br	2c8a8 <__alt_data_end+0xfffec8a8>
   2ceb0:	3809883a 	mov	r4,r7
   2ceb4:	0011883a 	mov	r8,zero
   2ceb8:	0005883a 	mov	r2,zero
   2cebc:	003ee306 	br	2ca4c <__alt_data_end+0xfffeca4c>
   2cec0:	1c62b03a 	or	r17,r3,r17
   2cec4:	8822c03a 	cmpne	r17,r17,zero
   2cec8:	0005883a 	mov	r2,zero
   2cecc:	003f8906 	br	2ccf4 <__alt_data_end+0xfffeccf4>
   2ced0:	3809883a 	mov	r4,r7
   2ced4:	4821883a 	mov	r16,r9
   2ced8:	0011883a 	mov	r8,zero
   2cedc:	0005883a 	mov	r2,zero
   2cee0:	003eda06 	br	2ca4c <__alt_data_end+0xfffeca4c>
   2cee4:	0101ffc4 	movi	r4,2047
   2cee8:	49003b26 	beq	r9,r4,2cfd8 <__subdf3+0x7b4>
   2ceec:	0085c83a 	sub	r2,zero,r2
   2cef0:	18c02034 	orhi	r3,r3,128
   2cef4:	01000e04 	movi	r4,56
   2cef8:	20806e16 	blt	r4,r2,2d0b4 <__subdf3+0x890>
   2cefc:	010007c4 	movi	r4,31
   2cf00:	20807716 	blt	r4,r2,2d0e0 <__subdf3+0x8bc>
   2cf04:	01000804 	movi	r4,32
   2cf08:	2089c83a 	sub	r4,r4,r2
   2cf0c:	1914983a 	sll	r10,r3,r4
   2cf10:	8890d83a 	srl	r8,r17,r2
   2cf14:	8908983a 	sll	r4,r17,r4
   2cf18:	1884d83a 	srl	r2,r3,r2
   2cf1c:	5222b03a 	or	r17,r10,r8
   2cf20:	2006c03a 	cmpne	r3,r4,zero
   2cf24:	88e2b03a 	or	r17,r17,r3
   2cf28:	89a3883a 	add	r17,r17,r6
   2cf2c:	1145883a 	add	r2,r2,r5
   2cf30:	898d803a 	cmpltu	r6,r17,r6
   2cf34:	3087883a 	add	r3,r6,r2
   2cf38:	4821883a 	mov	r16,r9
   2cf3c:	003ed906 	br	2caa4 <__alt_data_end+0xfffecaa4>
   2cf40:	2984b03a 	or	r2,r5,r6
   2cf44:	10004226 	beq	r2,zero,2d050 <__subdf3+0x82c>
   2cf48:	1808d0fa 	srli	r4,r3,3
   2cf4c:	8822d0fa 	srli	r17,r17,3
   2cf50:	1806977a 	slli	r3,r3,29
   2cf54:	2080022c 	andhi	r2,r4,8
   2cf58:	1c62b03a 	or	r17,r3,r17
   2cf5c:	10000826 	beq	r2,zero,2cf80 <__subdf3+0x75c>
   2cf60:	2812d0fa 	srli	r9,r5,3
   2cf64:	4880022c 	andhi	r2,r9,8
   2cf68:	1000051e 	bne	r2,zero,2cf80 <__subdf3+0x75c>
   2cf6c:	300cd0fa 	srli	r6,r6,3
   2cf70:	2804977a 	slli	r2,r5,29
   2cf74:	4809883a 	mov	r4,r9
   2cf78:	3825883a 	mov	r18,r7
   2cf7c:	11a2b03a 	or	r17,r2,r6
   2cf80:	8806d77a 	srli	r3,r17,29
   2cf84:	200890fa 	slli	r4,r4,3
   2cf88:	882290fa 	slli	r17,r17,3
   2cf8c:	0401ffc4 	movi	r16,2047
   2cf90:	1906b03a 	or	r3,r3,r4
   2cf94:	003e4406 	br	2c8a8 <__alt_data_end+0xfffec8a8>
   2cf98:	2984b03a 	or	r2,r5,r6
   2cf9c:	103e4226 	beq	r2,zero,2c8a8 <__alt_data_end+0xfffec8a8>
   2cfa0:	8989c83a 	sub	r4,r17,r6
   2cfa4:	8911803a 	cmpltu	r8,r17,r4
   2cfa8:	1945c83a 	sub	r2,r3,r5
   2cfac:	1205c83a 	sub	r2,r2,r8
   2cfb0:	1200202c 	andhi	r8,r2,128
   2cfb4:	403e9a26 	beq	r8,zero,2ca20 <__alt_data_end+0xfffeca20>
   2cfb8:	3463c83a 	sub	r17,r6,r17
   2cfbc:	28c5c83a 	sub	r2,r5,r3
   2cfc0:	344d803a 	cmpltu	r6,r6,r17
   2cfc4:	1187c83a 	sub	r3,r2,r6
   2cfc8:	3825883a 	mov	r18,r7
   2cfcc:	003e3606 	br	2c8a8 <__alt_data_end+0xfffec8a8>
   2cfd0:	0101ffc4 	movi	r4,2047
   2cfd4:	493fc71e 	bne	r9,r4,2cef4 <__alt_data_end+0xfffecef4>
   2cfd8:	2807883a 	mov	r3,r5
   2cfdc:	3023883a 	mov	r17,r6
   2cfe0:	4821883a 	mov	r16,r9
   2cfe4:	003e3006 	br	2c8a8 <__alt_data_end+0xfffec8a8>
   2cfe8:	10003626 	beq	r2,zero,2d0c4 <__subdf3+0x8a0>
   2cfec:	2984b03a 	or	r2,r5,r6
   2cff0:	10001726 	beq	r2,zero,2d050 <__subdf3+0x82c>
   2cff4:	1808d0fa 	srli	r4,r3,3
   2cff8:	8822d0fa 	srli	r17,r17,3
   2cffc:	1806977a 	slli	r3,r3,29
   2d000:	2080022c 	andhi	r2,r4,8
   2d004:	1c62b03a 	or	r17,r3,r17
   2d008:	10000726 	beq	r2,zero,2d028 <__subdf3+0x804>
   2d00c:	2812d0fa 	srli	r9,r5,3
   2d010:	4880022c 	andhi	r2,r9,8
   2d014:	1000041e 	bne	r2,zero,2d028 <__subdf3+0x804>
   2d018:	300cd0fa 	srli	r6,r6,3
   2d01c:	2804977a 	slli	r2,r5,29
   2d020:	4809883a 	mov	r4,r9
   2d024:	11a2b03a 	or	r17,r2,r6
   2d028:	8806d77a 	srli	r3,r17,29
   2d02c:	200890fa 	slli	r4,r4,3
   2d030:	882290fa 	slli	r17,r17,3
   2d034:	3825883a 	mov	r18,r7
   2d038:	1906b03a 	or	r3,r3,r4
   2d03c:	0401ffc4 	movi	r16,2047
   2d040:	003e1906 	br	2c8a8 <__alt_data_end+0xfffec8a8>
   2d044:	000b883a 	mov	r5,zero
   2d048:	0005883a 	mov	r2,zero
   2d04c:	003e2e06 	br	2c908 <__alt_data_end+0xfffec908>
   2d050:	0401ffc4 	movi	r16,2047
   2d054:	003e1406 	br	2c8a8 <__alt_data_end+0xfffec8a8>
   2d058:	0005883a 	mov	r2,zero
   2d05c:	003f7506 	br	2ce34 <__alt_data_end+0xfffece34>
   2d060:	0005883a 	mov	r2,zero
   2d064:	0009883a 	mov	r4,zero
   2d068:	003e7806 	br	2ca4c <__alt_data_end+0xfffeca4c>
   2d06c:	123ff804 	addi	r8,r2,-32
   2d070:	01000804 	movi	r4,32
   2d074:	1a10d83a 	srl	r8,r3,r8
   2d078:	11002526 	beq	r2,r4,2d110 <__subdf3+0x8ec>
   2d07c:	01001004 	movi	r4,64
   2d080:	2085c83a 	sub	r2,r4,r2
   2d084:	1884983a 	sll	r2,r3,r2
   2d088:	1444b03a 	or	r2,r2,r17
   2d08c:	1004c03a 	cmpne	r2,r2,zero
   2d090:	40a2b03a 	or	r17,r8,r2
   2d094:	0005883a 	mov	r2,zero
   2d098:	003f1606 	br	2ccf4 <__alt_data_end+0xfffeccf4>
   2d09c:	02000434 	movhi	r8,16
   2d0a0:	0009883a 	mov	r4,zero
   2d0a4:	423fffc4 	addi	r8,r8,-1
   2d0a8:	00bfffc4 	movi	r2,-1
   2d0ac:	0401ffc4 	movi	r16,2047
   2d0b0:	003e6606 	br	2ca4c <__alt_data_end+0xfffeca4c>
   2d0b4:	1c62b03a 	or	r17,r3,r17
   2d0b8:	8822c03a 	cmpne	r17,r17,zero
   2d0bc:	0005883a 	mov	r2,zero
   2d0c0:	003f9906 	br	2cf28 <__alt_data_end+0xfffecf28>
   2d0c4:	2807883a 	mov	r3,r5
   2d0c8:	3023883a 	mov	r17,r6
   2d0cc:	0401ffc4 	movi	r16,2047
   2d0d0:	003df506 	br	2c8a8 <__alt_data_end+0xfffec8a8>
   2d0d4:	2807883a 	mov	r3,r5
   2d0d8:	3023883a 	mov	r17,r6
   2d0dc:	003df206 	br	2c8a8 <__alt_data_end+0xfffec8a8>
   2d0e0:	123ff804 	addi	r8,r2,-32
   2d0e4:	01000804 	movi	r4,32
   2d0e8:	1a10d83a 	srl	r8,r3,r8
   2d0ec:	11000a26 	beq	r2,r4,2d118 <__subdf3+0x8f4>
   2d0f0:	01001004 	movi	r4,64
   2d0f4:	2085c83a 	sub	r2,r4,r2
   2d0f8:	1884983a 	sll	r2,r3,r2
   2d0fc:	1444b03a 	or	r2,r2,r17
   2d100:	1004c03a 	cmpne	r2,r2,zero
   2d104:	40a2b03a 	or	r17,r8,r2
   2d108:	0005883a 	mov	r2,zero
   2d10c:	003f8606 	br	2cf28 <__alt_data_end+0xfffecf28>
   2d110:	0005883a 	mov	r2,zero
   2d114:	003fdc06 	br	2d088 <__alt_data_end+0xfffed088>
   2d118:	0005883a 	mov	r2,zero
   2d11c:	003ff706 	br	2d0fc <__alt_data_end+0xfffed0fc>

0002d120 <__fixdfsi>:
   2d120:	280cd53a 	srli	r6,r5,20
   2d124:	00c00434 	movhi	r3,16
   2d128:	18ffffc4 	addi	r3,r3,-1
   2d12c:	3181ffcc 	andi	r6,r6,2047
   2d130:	01c0ff84 	movi	r7,1022
   2d134:	28c6703a 	and	r3,r5,r3
   2d138:	280ad7fa 	srli	r5,r5,31
   2d13c:	3980120e 	bge	r7,r6,2d188 <__fixdfsi+0x68>
   2d140:	00810744 	movi	r2,1053
   2d144:	11800c16 	blt	r2,r6,2d178 <__fixdfsi+0x58>
   2d148:	00810cc4 	movi	r2,1075
   2d14c:	1185c83a 	sub	r2,r2,r6
   2d150:	01c007c4 	movi	r7,31
   2d154:	18c00434 	orhi	r3,r3,16
   2d158:	38800d16 	blt	r7,r2,2d190 <__fixdfsi+0x70>
   2d15c:	31befb44 	addi	r6,r6,-1043
   2d160:	2084d83a 	srl	r2,r4,r2
   2d164:	1986983a 	sll	r3,r3,r6
   2d168:	1884b03a 	or	r2,r3,r2
   2d16c:	28000726 	beq	r5,zero,2d18c <__fixdfsi+0x6c>
   2d170:	0085c83a 	sub	r2,zero,r2
   2d174:	f800283a 	ret
   2d178:	00a00034 	movhi	r2,32768
   2d17c:	10bfffc4 	addi	r2,r2,-1
   2d180:	2885883a 	add	r2,r5,r2
   2d184:	f800283a 	ret
   2d188:	0005883a 	mov	r2,zero
   2d18c:	f800283a 	ret
   2d190:	008104c4 	movi	r2,1043
   2d194:	1185c83a 	sub	r2,r2,r6
   2d198:	1884d83a 	srl	r2,r3,r2
   2d19c:	003ff306 	br	2d16c <__alt_data_end+0xfffed16c>

0002d1a0 <__floatsidf>:
   2d1a0:	defffd04 	addi	sp,sp,-12
   2d1a4:	dfc00215 	stw	ra,8(sp)
   2d1a8:	dc400115 	stw	r17,4(sp)
   2d1ac:	dc000015 	stw	r16,0(sp)
   2d1b0:	20002b26 	beq	r4,zero,2d260 <__floatsidf+0xc0>
   2d1b4:	2023883a 	mov	r17,r4
   2d1b8:	2020d7fa 	srli	r16,r4,31
   2d1bc:	20002d16 	blt	r4,zero,2d274 <__floatsidf+0xd4>
   2d1c0:	8809883a 	mov	r4,r17
   2d1c4:	002d3240 	call	2d324 <__clzsi2>
   2d1c8:	01410784 	movi	r5,1054
   2d1cc:	288bc83a 	sub	r5,r5,r2
   2d1d0:	01010cc4 	movi	r4,1075
   2d1d4:	2149c83a 	sub	r4,r4,r5
   2d1d8:	00c007c4 	movi	r3,31
   2d1dc:	1900160e 	bge	r3,r4,2d238 <__floatsidf+0x98>
   2d1e0:	00c104c4 	movi	r3,1043
   2d1e4:	1947c83a 	sub	r3,r3,r5
   2d1e8:	88c6983a 	sll	r3,r17,r3
   2d1ec:	00800434 	movhi	r2,16
   2d1f0:	10bfffc4 	addi	r2,r2,-1
   2d1f4:	1886703a 	and	r3,r3,r2
   2d1f8:	2941ffcc 	andi	r5,r5,2047
   2d1fc:	800d883a 	mov	r6,r16
   2d200:	0005883a 	mov	r2,zero
   2d204:	280a953a 	slli	r5,r5,20
   2d208:	31803fcc 	andi	r6,r6,255
   2d20c:	01000434 	movhi	r4,16
   2d210:	300c97fa 	slli	r6,r6,31
   2d214:	213fffc4 	addi	r4,r4,-1
   2d218:	1906703a 	and	r3,r3,r4
   2d21c:	1946b03a 	or	r3,r3,r5
   2d220:	1986b03a 	or	r3,r3,r6
   2d224:	dfc00217 	ldw	ra,8(sp)
   2d228:	dc400117 	ldw	r17,4(sp)
   2d22c:	dc000017 	ldw	r16,0(sp)
   2d230:	dec00304 	addi	sp,sp,12
   2d234:	f800283a 	ret
   2d238:	00c002c4 	movi	r3,11
   2d23c:	1887c83a 	sub	r3,r3,r2
   2d240:	88c6d83a 	srl	r3,r17,r3
   2d244:	8904983a 	sll	r2,r17,r4
   2d248:	01000434 	movhi	r4,16
   2d24c:	213fffc4 	addi	r4,r4,-1
   2d250:	2941ffcc 	andi	r5,r5,2047
   2d254:	1906703a 	and	r3,r3,r4
   2d258:	800d883a 	mov	r6,r16
   2d25c:	003fe906 	br	2d204 <__alt_data_end+0xfffed204>
   2d260:	000d883a 	mov	r6,zero
   2d264:	000b883a 	mov	r5,zero
   2d268:	0007883a 	mov	r3,zero
   2d26c:	0005883a 	mov	r2,zero
   2d270:	003fe406 	br	2d204 <__alt_data_end+0xfffed204>
   2d274:	0123c83a 	sub	r17,zero,r4
   2d278:	003fd106 	br	2d1c0 <__alt_data_end+0xfffed1c0>

0002d27c <__floatunsidf>:
   2d27c:	defffe04 	addi	sp,sp,-8
   2d280:	dc000015 	stw	r16,0(sp)
   2d284:	dfc00115 	stw	ra,4(sp)
   2d288:	2021883a 	mov	r16,r4
   2d28c:	20002226 	beq	r4,zero,2d318 <__floatunsidf+0x9c>
   2d290:	002d3240 	call	2d324 <__clzsi2>
   2d294:	01010784 	movi	r4,1054
   2d298:	2089c83a 	sub	r4,r4,r2
   2d29c:	01810cc4 	movi	r6,1075
   2d2a0:	310dc83a 	sub	r6,r6,r4
   2d2a4:	00c007c4 	movi	r3,31
   2d2a8:	1980120e 	bge	r3,r6,2d2f4 <__floatunsidf+0x78>
   2d2ac:	00c104c4 	movi	r3,1043
   2d2b0:	1907c83a 	sub	r3,r3,r4
   2d2b4:	80ca983a 	sll	r5,r16,r3
   2d2b8:	00800434 	movhi	r2,16
   2d2bc:	10bfffc4 	addi	r2,r2,-1
   2d2c0:	2101ffcc 	andi	r4,r4,2047
   2d2c4:	0021883a 	mov	r16,zero
   2d2c8:	288a703a 	and	r5,r5,r2
   2d2cc:	2008953a 	slli	r4,r4,20
   2d2d0:	00c00434 	movhi	r3,16
   2d2d4:	18ffffc4 	addi	r3,r3,-1
   2d2d8:	28c6703a 	and	r3,r5,r3
   2d2dc:	8005883a 	mov	r2,r16
   2d2e0:	1906b03a 	or	r3,r3,r4
   2d2e4:	dfc00117 	ldw	ra,4(sp)
   2d2e8:	dc000017 	ldw	r16,0(sp)
   2d2ec:	dec00204 	addi	sp,sp,8
   2d2f0:	f800283a 	ret
   2d2f4:	00c002c4 	movi	r3,11
   2d2f8:	188bc83a 	sub	r5,r3,r2
   2d2fc:	814ad83a 	srl	r5,r16,r5
   2d300:	00c00434 	movhi	r3,16
   2d304:	18ffffc4 	addi	r3,r3,-1
   2d308:	81a0983a 	sll	r16,r16,r6
   2d30c:	2101ffcc 	andi	r4,r4,2047
   2d310:	28ca703a 	and	r5,r5,r3
   2d314:	003fed06 	br	2d2cc <__alt_data_end+0xfffed2cc>
   2d318:	0009883a 	mov	r4,zero
   2d31c:	000b883a 	mov	r5,zero
   2d320:	003fea06 	br	2d2cc <__alt_data_end+0xfffed2cc>

0002d324 <__clzsi2>:
   2d324:	00bfffd4 	movui	r2,65535
   2d328:	11000536 	bltu	r2,r4,2d340 <__clzsi2+0x1c>
   2d32c:	00803fc4 	movi	r2,255
   2d330:	11000f36 	bltu	r2,r4,2d370 <__clzsi2+0x4c>
   2d334:	00800804 	movi	r2,32
   2d338:	0007883a 	mov	r3,zero
   2d33c:	00000506 	br	2d354 <__clzsi2+0x30>
   2d340:	00804034 	movhi	r2,256
   2d344:	10bfffc4 	addi	r2,r2,-1
   2d348:	11000c2e 	bgeu	r2,r4,2d37c <__clzsi2+0x58>
   2d34c:	00800204 	movi	r2,8
   2d350:	00c00604 	movi	r3,24
   2d354:	20c8d83a 	srl	r4,r4,r3
   2d358:	00c000f4 	movhi	r3,3
   2d35c:	18c0c804 	addi	r3,r3,800
   2d360:	1909883a 	add	r4,r3,r4
   2d364:	20c00003 	ldbu	r3,0(r4)
   2d368:	10c5c83a 	sub	r2,r2,r3
   2d36c:	f800283a 	ret
   2d370:	00800604 	movi	r2,24
   2d374:	00c00204 	movi	r3,8
   2d378:	003ff606 	br	2d354 <__alt_data_end+0xfffed354>
   2d37c:	00800404 	movi	r2,16
   2d380:	1007883a 	mov	r3,r2
   2d384:	003ff306 	br	2d354 <__alt_data_end+0xfffed354>

0002d388 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2d388:	defffe04 	addi	sp,sp,-8
   2d38c:	dfc00115 	stw	ra,4(sp)
   2d390:	df000015 	stw	fp,0(sp)
   2d394:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2d398:	d0a00b17 	ldw	r2,-32724(gp)
   2d39c:	10000326 	beq	r2,zero,2d3ac <alt_get_errno+0x24>
   2d3a0:	d0a00b17 	ldw	r2,-32724(gp)
   2d3a4:	103ee83a 	callr	r2
   2d3a8:	00000106 	br	2d3b0 <alt_get_errno+0x28>
   2d3ac:	d0a6d404 	addi	r2,gp,-25776
}
   2d3b0:	e037883a 	mov	sp,fp
   2d3b4:	dfc00117 	ldw	ra,4(sp)
   2d3b8:	df000017 	ldw	fp,0(sp)
   2d3bc:	dec00204 	addi	sp,sp,8
   2d3c0:	f800283a 	ret

0002d3c4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   2d3c4:	defffb04 	addi	sp,sp,-20
   2d3c8:	dfc00415 	stw	ra,16(sp)
   2d3cc:	df000315 	stw	fp,12(sp)
   2d3d0:	df000304 	addi	fp,sp,12
   2d3d4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   2d3d8:	e0bfff17 	ldw	r2,-4(fp)
   2d3dc:	10000616 	blt	r2,zero,2d3f8 <close+0x34>
   2d3e0:	e0bfff17 	ldw	r2,-4(fp)
   2d3e4:	10c00324 	muli	r3,r2,12
   2d3e8:	008000f4 	movhi	r2,3
   2d3ec:	10834804 	addi	r2,r2,3360
   2d3f0:	1885883a 	add	r2,r3,r2
   2d3f4:	00000106 	br	2d3fc <close+0x38>
   2d3f8:	0005883a 	mov	r2,zero
   2d3fc:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   2d400:	e0bffd17 	ldw	r2,-12(fp)
   2d404:	10001926 	beq	r2,zero,2d46c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   2d408:	e0bffd17 	ldw	r2,-12(fp)
   2d40c:	10800017 	ldw	r2,0(r2)
   2d410:	10800417 	ldw	r2,16(r2)
   2d414:	10000626 	beq	r2,zero,2d430 <close+0x6c>
   2d418:	e0bffd17 	ldw	r2,-12(fp)
   2d41c:	10800017 	ldw	r2,0(r2)
   2d420:	10800417 	ldw	r2,16(r2)
   2d424:	e13ffd17 	ldw	r4,-12(fp)
   2d428:	103ee83a 	callr	r2
   2d42c:	00000106 	br	2d434 <close+0x70>
   2d430:	0005883a 	mov	r2,zero
   2d434:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   2d438:	e13fff17 	ldw	r4,-4(fp)
   2d43c:	002df8c0 	call	2df8c <alt_release_fd>
    if (rval < 0)
   2d440:	e0bffe17 	ldw	r2,-8(fp)
   2d444:	1000070e 	bge	r2,zero,2d464 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   2d448:	002d3880 	call	2d388 <alt_get_errno>
   2d44c:	1007883a 	mov	r3,r2
   2d450:	e0bffe17 	ldw	r2,-8(fp)
   2d454:	0085c83a 	sub	r2,zero,r2
   2d458:	18800015 	stw	r2,0(r3)
      return -1;
   2d45c:	00bfffc4 	movi	r2,-1
   2d460:	00000706 	br	2d480 <close+0xbc>
    }
    return 0;
   2d464:	0005883a 	mov	r2,zero
   2d468:	00000506 	br	2d480 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2d46c:	002d3880 	call	2d388 <alt_get_errno>
   2d470:	1007883a 	mov	r3,r2
   2d474:	00801444 	movi	r2,81
   2d478:	18800015 	stw	r2,0(r3)
    return -1;
   2d47c:	00bfffc4 	movi	r2,-1
  }
}
   2d480:	e037883a 	mov	sp,fp
   2d484:	dfc00117 	ldw	ra,4(sp)
   2d488:	df000017 	ldw	fp,0(sp)
   2d48c:	dec00204 	addi	sp,sp,8
   2d490:	f800283a 	ret

0002d494 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   2d494:	defffc04 	addi	sp,sp,-16
   2d498:	df000315 	stw	fp,12(sp)
   2d49c:	df000304 	addi	fp,sp,12
   2d4a0:	e13ffd15 	stw	r4,-12(fp)
   2d4a4:	e17ffe15 	stw	r5,-8(fp)
   2d4a8:	e1bfff15 	stw	r6,-4(fp)
  return len;
   2d4ac:	e0bfff17 	ldw	r2,-4(fp)
}
   2d4b0:	e037883a 	mov	sp,fp
   2d4b4:	df000017 	ldw	fp,0(sp)
   2d4b8:	dec00104 	addi	sp,sp,4
   2d4bc:	f800283a 	ret

0002d4c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2d4c0:	defffe04 	addi	sp,sp,-8
   2d4c4:	dfc00115 	stw	ra,4(sp)
   2d4c8:	df000015 	stw	fp,0(sp)
   2d4cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2d4d0:	d0a00b17 	ldw	r2,-32724(gp)
   2d4d4:	10000326 	beq	r2,zero,2d4e4 <alt_get_errno+0x24>
   2d4d8:	d0a00b17 	ldw	r2,-32724(gp)
   2d4dc:	103ee83a 	callr	r2
   2d4e0:	00000106 	br	2d4e8 <alt_get_errno+0x28>
   2d4e4:	d0a6d404 	addi	r2,gp,-25776
}
   2d4e8:	e037883a 	mov	sp,fp
   2d4ec:	dfc00117 	ldw	ra,4(sp)
   2d4f0:	df000017 	ldw	fp,0(sp)
   2d4f4:	dec00204 	addi	sp,sp,8
   2d4f8:	f800283a 	ret

0002d4fc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
   2d4fc:	defffb04 	addi	sp,sp,-20
   2d500:	dfc00415 	stw	ra,16(sp)
   2d504:	df000315 	stw	fp,12(sp)
   2d508:	df000304 	addi	fp,sp,12
   2d50c:	e13ffe15 	stw	r4,-8(fp)
   2d510:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2d514:	e0bffe17 	ldw	r2,-8(fp)
   2d518:	10000616 	blt	r2,zero,2d534 <fstat+0x38>
   2d51c:	e0bffe17 	ldw	r2,-8(fp)
   2d520:	10c00324 	muli	r3,r2,12
   2d524:	008000f4 	movhi	r2,3
   2d528:	10834804 	addi	r2,r2,3360
   2d52c:	1885883a 	add	r2,r3,r2
   2d530:	00000106 	br	2d538 <fstat+0x3c>
   2d534:	0005883a 	mov	r2,zero
   2d538:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
   2d53c:	e0bffd17 	ldw	r2,-12(fp)
   2d540:	10001026 	beq	r2,zero,2d584 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
   2d544:	e0bffd17 	ldw	r2,-12(fp)
   2d548:	10800017 	ldw	r2,0(r2)
   2d54c:	10800817 	ldw	r2,32(r2)
   2d550:	10000726 	beq	r2,zero,2d570 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
   2d554:	e0bffd17 	ldw	r2,-12(fp)
   2d558:	10800017 	ldw	r2,0(r2)
   2d55c:	10800817 	ldw	r2,32(r2)
   2d560:	e17fff17 	ldw	r5,-4(fp)
   2d564:	e13ffd17 	ldw	r4,-12(fp)
   2d568:	103ee83a 	callr	r2
   2d56c:	00000a06 	br	2d598 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
   2d570:	e0bfff17 	ldw	r2,-4(fp)
   2d574:	00c80004 	movi	r3,8192
   2d578:	10c00115 	stw	r3,4(r2)
      return 0;
   2d57c:	0005883a 	mov	r2,zero
   2d580:	00000506 	br	2d598 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2d584:	002d4c00 	call	2d4c0 <alt_get_errno>
   2d588:	1007883a 	mov	r3,r2
   2d58c:	00801444 	movi	r2,81
   2d590:	18800015 	stw	r2,0(r3)
    return -1;
   2d594:	00bfffc4 	movi	r2,-1
  }
}
   2d598:	e037883a 	mov	sp,fp
   2d59c:	dfc00117 	ldw	ra,4(sp)
   2d5a0:	df000017 	ldw	fp,0(sp)
   2d5a4:	dec00204 	addi	sp,sp,8
   2d5a8:	f800283a 	ret

0002d5ac <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   2d5ac:	defff904 	addi	sp,sp,-28
   2d5b0:	dfc00615 	stw	ra,24(sp)
   2d5b4:	df000515 	stw	fp,20(sp)
   2d5b8:	df000504 	addi	fp,sp,20
   2d5bc:	e13ffc15 	stw	r4,-16(fp)
   2d5c0:	e17ffd15 	stw	r5,-12(fp)
   2d5c4:	e1bffe15 	stw	r6,-8(fp)
   2d5c8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   2d5cc:	e0800217 	ldw	r2,8(fp)
   2d5d0:	d8800015 	stw	r2,0(sp)
   2d5d4:	e1ffff17 	ldw	r7,-4(fp)
   2d5d8:	e1bffe17 	ldw	r6,-8(fp)
   2d5dc:	e17ffd17 	ldw	r5,-12(fp)
   2d5e0:	e13ffc17 	ldw	r4,-16(fp)
   2d5e4:	002d75c0 	call	2d75c <alt_iic_isr_register>
}  
   2d5e8:	e037883a 	mov	sp,fp
   2d5ec:	dfc00117 	ldw	ra,4(sp)
   2d5f0:	df000017 	ldw	fp,0(sp)
   2d5f4:	dec00204 	addi	sp,sp,8
   2d5f8:	f800283a 	ret

0002d5fc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   2d5fc:	defff904 	addi	sp,sp,-28
   2d600:	df000615 	stw	fp,24(sp)
   2d604:	df000604 	addi	fp,sp,24
   2d608:	e13ffe15 	stw	r4,-8(fp)
   2d60c:	e17fff15 	stw	r5,-4(fp)
   2d610:	e0bfff17 	ldw	r2,-4(fp)
   2d614:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2d618:	0005303a 	rdctl	r2,status
   2d61c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2d620:	e0fffb17 	ldw	r3,-20(fp)
   2d624:	00bfff84 	movi	r2,-2
   2d628:	1884703a 	and	r2,r3,r2
   2d62c:	1001703a 	wrctl	status,r2
  
  return context;
   2d630:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   2d634:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   2d638:	00c00044 	movi	r3,1
   2d63c:	e0bffa17 	ldw	r2,-24(fp)
   2d640:	1884983a 	sll	r2,r3,r2
   2d644:	1007883a 	mov	r3,r2
   2d648:	d0a6d517 	ldw	r2,-25772(gp)
   2d64c:	1884b03a 	or	r2,r3,r2
   2d650:	d0a6d515 	stw	r2,-25772(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   2d654:	d0a6d517 	ldw	r2,-25772(gp)
   2d658:	100170fa 	wrctl	ienable,r2
   2d65c:	e0bffc17 	ldw	r2,-16(fp)
   2d660:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2d664:	e0bffd17 	ldw	r2,-12(fp)
   2d668:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   2d66c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   2d670:	0001883a 	nop
}
   2d674:	e037883a 	mov	sp,fp
   2d678:	df000017 	ldw	fp,0(sp)
   2d67c:	dec00104 	addi	sp,sp,4
   2d680:	f800283a 	ret

0002d684 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   2d684:	defff904 	addi	sp,sp,-28
   2d688:	df000615 	stw	fp,24(sp)
   2d68c:	df000604 	addi	fp,sp,24
   2d690:	e13ffe15 	stw	r4,-8(fp)
   2d694:	e17fff15 	stw	r5,-4(fp)
   2d698:	e0bfff17 	ldw	r2,-4(fp)
   2d69c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2d6a0:	0005303a 	rdctl	r2,status
   2d6a4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2d6a8:	e0fffb17 	ldw	r3,-20(fp)
   2d6ac:	00bfff84 	movi	r2,-2
   2d6b0:	1884703a 	and	r2,r3,r2
   2d6b4:	1001703a 	wrctl	status,r2
  
  return context;
   2d6b8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   2d6bc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   2d6c0:	00c00044 	movi	r3,1
   2d6c4:	e0bffa17 	ldw	r2,-24(fp)
   2d6c8:	1884983a 	sll	r2,r3,r2
   2d6cc:	0084303a 	nor	r2,zero,r2
   2d6d0:	1007883a 	mov	r3,r2
   2d6d4:	d0a6d517 	ldw	r2,-25772(gp)
   2d6d8:	1884703a 	and	r2,r3,r2
   2d6dc:	d0a6d515 	stw	r2,-25772(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   2d6e0:	d0a6d517 	ldw	r2,-25772(gp)
   2d6e4:	100170fa 	wrctl	ienable,r2
   2d6e8:	e0bffc17 	ldw	r2,-16(fp)
   2d6ec:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2d6f0:	e0bffd17 	ldw	r2,-12(fp)
   2d6f4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   2d6f8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   2d6fc:	0001883a 	nop
}
   2d700:	e037883a 	mov	sp,fp
   2d704:	df000017 	ldw	fp,0(sp)
   2d708:	dec00104 	addi	sp,sp,4
   2d70c:	f800283a 	ret

0002d710 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   2d710:	defffc04 	addi	sp,sp,-16
   2d714:	df000315 	stw	fp,12(sp)
   2d718:	df000304 	addi	fp,sp,12
   2d71c:	e13ffe15 	stw	r4,-8(fp)
   2d720:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   2d724:	000530fa 	rdctl	r2,ienable
   2d728:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   2d72c:	00c00044 	movi	r3,1
   2d730:	e0bfff17 	ldw	r2,-4(fp)
   2d734:	1884983a 	sll	r2,r3,r2
   2d738:	1007883a 	mov	r3,r2
   2d73c:	e0bffd17 	ldw	r2,-12(fp)
   2d740:	1884703a 	and	r2,r3,r2
   2d744:	1004c03a 	cmpne	r2,r2,zero
   2d748:	10803fcc 	andi	r2,r2,255
}
   2d74c:	e037883a 	mov	sp,fp
   2d750:	df000017 	ldw	fp,0(sp)
   2d754:	dec00104 	addi	sp,sp,4
   2d758:	f800283a 	ret

0002d75c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   2d75c:	defff504 	addi	sp,sp,-44
   2d760:	dfc00a15 	stw	ra,40(sp)
   2d764:	df000915 	stw	fp,36(sp)
   2d768:	df000904 	addi	fp,sp,36
   2d76c:	e13ffc15 	stw	r4,-16(fp)
   2d770:	e17ffd15 	stw	r5,-12(fp)
   2d774:	e1bffe15 	stw	r6,-8(fp)
   2d778:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   2d77c:	00bffa84 	movi	r2,-22
   2d780:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   2d784:	e0bffd17 	ldw	r2,-12(fp)
   2d788:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   2d78c:	e0bff817 	ldw	r2,-32(fp)
   2d790:	10800808 	cmpgei	r2,r2,32
   2d794:	1000271e 	bne	r2,zero,2d834 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2d798:	0005303a 	rdctl	r2,status
   2d79c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2d7a0:	e0fffb17 	ldw	r3,-20(fp)
   2d7a4:	00bfff84 	movi	r2,-2
   2d7a8:	1884703a 	and	r2,r3,r2
   2d7ac:	1001703a 	wrctl	status,r2
  
  return context;
   2d7b0:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   2d7b4:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   2d7b8:	008000f4 	movhi	r2,3
   2d7bc:	108ea604 	addi	r2,r2,15000
   2d7c0:	e0fff817 	ldw	r3,-32(fp)
   2d7c4:	180690fa 	slli	r3,r3,3
   2d7c8:	10c5883a 	add	r2,r2,r3
   2d7cc:	e0fffe17 	ldw	r3,-8(fp)
   2d7d0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   2d7d4:	008000f4 	movhi	r2,3
   2d7d8:	108ea604 	addi	r2,r2,15000
   2d7dc:	e0fff817 	ldw	r3,-32(fp)
   2d7e0:	180690fa 	slli	r3,r3,3
   2d7e4:	10c5883a 	add	r2,r2,r3
   2d7e8:	10800104 	addi	r2,r2,4
   2d7ec:	e0ffff17 	ldw	r3,-4(fp)
   2d7f0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   2d7f4:	e0bffe17 	ldw	r2,-8(fp)
   2d7f8:	10000526 	beq	r2,zero,2d810 <alt_iic_isr_register+0xb4>
   2d7fc:	e0bff817 	ldw	r2,-32(fp)
   2d800:	100b883a 	mov	r5,r2
   2d804:	e13ffc17 	ldw	r4,-16(fp)
   2d808:	002d5fc0 	call	2d5fc <alt_ic_irq_enable>
   2d80c:	00000406 	br	2d820 <alt_iic_isr_register+0xc4>
   2d810:	e0bff817 	ldw	r2,-32(fp)
   2d814:	100b883a 	mov	r5,r2
   2d818:	e13ffc17 	ldw	r4,-16(fp)
   2d81c:	002d6840 	call	2d684 <alt_ic_irq_disable>
   2d820:	e0bff715 	stw	r2,-36(fp)
   2d824:	e0bffa17 	ldw	r2,-24(fp)
   2d828:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2d82c:	e0bff917 	ldw	r2,-28(fp)
   2d830:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   2d834:	e0bff717 	ldw	r2,-36(fp)
}
   2d838:	e037883a 	mov	sp,fp
   2d83c:	dfc00117 	ldw	ra,4(sp)
   2d840:	df000017 	ldw	fp,0(sp)
   2d844:	dec00204 	addi	sp,sp,8
   2d848:	f800283a 	ret

0002d84c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2d84c:	defffe04 	addi	sp,sp,-8
   2d850:	dfc00115 	stw	ra,4(sp)
   2d854:	df000015 	stw	fp,0(sp)
   2d858:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2d85c:	d0a00b17 	ldw	r2,-32724(gp)
   2d860:	10000326 	beq	r2,zero,2d870 <alt_get_errno+0x24>
   2d864:	d0a00b17 	ldw	r2,-32724(gp)
   2d868:	103ee83a 	callr	r2
   2d86c:	00000106 	br	2d874 <alt_get_errno+0x28>
   2d870:	d0a6d404 	addi	r2,gp,-25776
}
   2d874:	e037883a 	mov	sp,fp
   2d878:	dfc00117 	ldw	ra,4(sp)
   2d87c:	df000017 	ldw	fp,0(sp)
   2d880:	dec00204 	addi	sp,sp,8
   2d884:	f800283a 	ret

0002d888 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
   2d888:	deffed04 	addi	sp,sp,-76
   2d88c:	dfc01215 	stw	ra,72(sp)
   2d890:	df001115 	stw	fp,68(sp)
   2d894:	df001104 	addi	fp,sp,68
   2d898:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2d89c:	e0bfff17 	ldw	r2,-4(fp)
   2d8a0:	10000616 	blt	r2,zero,2d8bc <isatty+0x34>
   2d8a4:	e0bfff17 	ldw	r2,-4(fp)
   2d8a8:	10c00324 	muli	r3,r2,12
   2d8ac:	008000f4 	movhi	r2,3
   2d8b0:	10834804 	addi	r2,r2,3360
   2d8b4:	1885883a 	add	r2,r3,r2
   2d8b8:	00000106 	br	2d8c0 <isatty+0x38>
   2d8bc:	0005883a 	mov	r2,zero
   2d8c0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
   2d8c4:	e0bfef17 	ldw	r2,-68(fp)
   2d8c8:	10000e26 	beq	r2,zero,2d904 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
   2d8cc:	e0bfef17 	ldw	r2,-68(fp)
   2d8d0:	10800017 	ldw	r2,0(r2)
   2d8d4:	10800817 	ldw	r2,32(r2)
   2d8d8:	1000021e 	bne	r2,zero,2d8e4 <isatty+0x5c>
    {
      return 1;
   2d8dc:	00800044 	movi	r2,1
   2d8e0:	00000d06 	br	2d918 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
   2d8e4:	e0bff004 	addi	r2,fp,-64
   2d8e8:	100b883a 	mov	r5,r2
   2d8ec:	e13fff17 	ldw	r4,-4(fp)
   2d8f0:	002d4fc0 	call	2d4fc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
   2d8f4:	e0bff117 	ldw	r2,-60(fp)
   2d8f8:	10880020 	cmpeqi	r2,r2,8192
   2d8fc:	10803fcc 	andi	r2,r2,255
   2d900:	00000506 	br	2d918 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
   2d904:	002d84c0 	call	2d84c <alt_get_errno>
   2d908:	1007883a 	mov	r3,r2
   2d90c:	00801444 	movi	r2,81
   2d910:	18800015 	stw	r2,0(r3)
    return 0;
   2d914:	0005883a 	mov	r2,zero
  }
}
   2d918:	e037883a 	mov	sp,fp
   2d91c:	dfc00117 	ldw	ra,4(sp)
   2d920:	df000017 	ldw	fp,0(sp)
   2d924:	dec00204 	addi	sp,sp,8
   2d928:	f800283a 	ret

0002d92c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   2d92c:	defffc04 	addi	sp,sp,-16
   2d930:	df000315 	stw	fp,12(sp)
   2d934:	df000304 	addi	fp,sp,12
   2d938:	e13ffd15 	stw	r4,-12(fp)
   2d93c:	e17ffe15 	stw	r5,-8(fp)
   2d940:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   2d944:	e0fffe17 	ldw	r3,-8(fp)
   2d948:	e0bffd17 	ldw	r2,-12(fp)
   2d94c:	18800c26 	beq	r3,r2,2d980 <alt_load_section+0x54>
  {
    while( to != end )
   2d950:	00000806 	br	2d974 <alt_load_section+0x48>
    {
      *to++ = *from++;
   2d954:	e0bffe17 	ldw	r2,-8(fp)
   2d958:	10c00104 	addi	r3,r2,4
   2d95c:	e0fffe15 	stw	r3,-8(fp)
   2d960:	e0fffd17 	ldw	r3,-12(fp)
   2d964:	19000104 	addi	r4,r3,4
   2d968:	e13ffd15 	stw	r4,-12(fp)
   2d96c:	18c00017 	ldw	r3,0(r3)
   2d970:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   2d974:	e0fffe17 	ldw	r3,-8(fp)
   2d978:	e0bfff17 	ldw	r2,-4(fp)
   2d97c:	18bff51e 	bne	r3,r2,2d954 <__alt_data_end+0xfffed954>
    {
      *to++ = *from++;
    }
  }
}
   2d980:	0001883a 	nop
   2d984:	e037883a 	mov	sp,fp
   2d988:	df000017 	ldw	fp,0(sp)
   2d98c:	dec00104 	addi	sp,sp,4
   2d990:	f800283a 	ret

0002d994 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   2d994:	defffe04 	addi	sp,sp,-8
   2d998:	dfc00115 	stw	ra,4(sp)
   2d99c:	df000015 	stw	fp,0(sp)
   2d9a0:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   2d9a4:	018000f4 	movhi	r6,3
   2d9a8:	3187d004 	addi	r6,r6,8000
   2d9ac:	014000f4 	movhi	r5,3
   2d9b0:	29411504 	addi	r5,r5,1108
   2d9b4:	010000f4 	movhi	r4,3
   2d9b8:	2107d004 	addi	r4,r4,8000
   2d9bc:	002d92c0 	call	2d92c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   2d9c0:	018000b4 	movhi	r6,2
   2d9c4:	31809504 	addi	r6,r6,596
   2d9c8:	014000b4 	movhi	r5,2
   2d9cc:	29400804 	addi	r5,r5,32
   2d9d0:	010000b4 	movhi	r4,2
   2d9d4:	21000804 	addi	r4,r4,32
   2d9d8:	002d92c0 	call	2d92c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   2d9dc:	018000f4 	movhi	r6,3
   2d9e0:	31811504 	addi	r6,r6,1108
   2d9e4:	014000f4 	movhi	r5,3
   2d9e8:	297fc104 	addi	r5,r5,-252
   2d9ec:	010000f4 	movhi	r4,3
   2d9f0:	213fc104 	addi	r4,r4,-252
   2d9f4:	002d92c0 	call	2d92c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   2d9f8:	002ef280 	call	2ef28 <alt_dcache_flush_all>
  alt_icache_flush_all();
   2d9fc:	002f1100 	call	2f110 <alt_icache_flush_all>
}
   2da00:	0001883a 	nop
   2da04:	e037883a 	mov	sp,fp
   2da08:	dfc00117 	ldw	ra,4(sp)
   2da0c:	df000017 	ldw	fp,0(sp)
   2da10:	dec00204 	addi	sp,sp,8
   2da14:	f800283a 	ret

0002da18 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2da18:	defffe04 	addi	sp,sp,-8
   2da1c:	dfc00115 	stw	ra,4(sp)
   2da20:	df000015 	stw	fp,0(sp)
   2da24:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2da28:	d0a00b17 	ldw	r2,-32724(gp)
   2da2c:	10000326 	beq	r2,zero,2da3c <alt_get_errno+0x24>
   2da30:	d0a00b17 	ldw	r2,-32724(gp)
   2da34:	103ee83a 	callr	r2
   2da38:	00000106 	br	2da40 <alt_get_errno+0x28>
   2da3c:	d0a6d404 	addi	r2,gp,-25776
}
   2da40:	e037883a 	mov	sp,fp
   2da44:	dfc00117 	ldw	ra,4(sp)
   2da48:	df000017 	ldw	fp,0(sp)
   2da4c:	dec00204 	addi	sp,sp,8
   2da50:	f800283a 	ret

0002da54 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
   2da54:	defff904 	addi	sp,sp,-28
   2da58:	dfc00615 	stw	ra,24(sp)
   2da5c:	df000515 	stw	fp,20(sp)
   2da60:	df000504 	addi	fp,sp,20
   2da64:	e13ffd15 	stw	r4,-12(fp)
   2da68:	e17ffe15 	stw	r5,-8(fp)
   2da6c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
   2da70:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2da74:	e0bffd17 	ldw	r2,-12(fp)
   2da78:	10000616 	blt	r2,zero,2da94 <lseek+0x40>
   2da7c:	e0bffd17 	ldw	r2,-12(fp)
   2da80:	10c00324 	muli	r3,r2,12
   2da84:	008000f4 	movhi	r2,3
   2da88:	10834804 	addi	r2,r2,3360
   2da8c:	1885883a 	add	r2,r3,r2
   2da90:	00000106 	br	2da98 <lseek+0x44>
   2da94:	0005883a 	mov	r2,zero
   2da98:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
   2da9c:	e0bffc17 	ldw	r2,-16(fp)
   2daa0:	10001026 	beq	r2,zero,2dae4 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
   2daa4:	e0bffc17 	ldw	r2,-16(fp)
   2daa8:	10800017 	ldw	r2,0(r2)
   2daac:	10800717 	ldw	r2,28(r2)
   2dab0:	10000926 	beq	r2,zero,2dad8 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
   2dab4:	e0bffc17 	ldw	r2,-16(fp)
   2dab8:	10800017 	ldw	r2,0(r2)
   2dabc:	10800717 	ldw	r2,28(r2)
   2dac0:	e1bfff17 	ldw	r6,-4(fp)
   2dac4:	e17ffe17 	ldw	r5,-8(fp)
   2dac8:	e13ffc17 	ldw	r4,-16(fp)
   2dacc:	103ee83a 	callr	r2
   2dad0:	e0bffb15 	stw	r2,-20(fp)
   2dad4:	00000506 	br	2daec <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
   2dad8:	00bfde84 	movi	r2,-134
   2dadc:	e0bffb15 	stw	r2,-20(fp)
   2dae0:	00000206 	br	2daec <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
   2dae4:	00bfebc4 	movi	r2,-81
   2dae8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
   2daec:	e0bffb17 	ldw	r2,-20(fp)
   2daf0:	1000070e 	bge	r2,zero,2db10 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
   2daf4:	002da180 	call	2da18 <alt_get_errno>
   2daf8:	1007883a 	mov	r3,r2
   2dafc:	e0bffb17 	ldw	r2,-20(fp)
   2db00:	0085c83a 	sub	r2,zero,r2
   2db04:	18800015 	stw	r2,0(r3)
    rc = -1;
   2db08:	00bfffc4 	movi	r2,-1
   2db0c:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
   2db10:	e0bffb17 	ldw	r2,-20(fp)
}
   2db14:	e037883a 	mov	sp,fp
   2db18:	dfc00117 	ldw	ra,4(sp)
   2db1c:	df000017 	ldw	fp,0(sp)
   2db20:	dec00204 	addi	sp,sp,8
   2db24:	f800283a 	ret

0002db28 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   2db28:	defffd04 	addi	sp,sp,-12
   2db2c:	dfc00215 	stw	ra,8(sp)
   2db30:	df000115 	stw	fp,4(sp)
   2db34:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   2db38:	0009883a 	mov	r4,zero
   2db3c:	002e2080 	call	2e208 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   2db40:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   2db44:	002e2400 	call	2e240 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   2db48:	018000f4 	movhi	r6,3
   2db4c:	31810b04 	addi	r6,r6,1068
   2db50:	014000f4 	movhi	r5,3
   2db54:	29410b04 	addi	r5,r5,1068
   2db58:	010000f4 	movhi	r4,3
   2db5c:	21010b04 	addi	r4,r4,1068
   2db60:	002f2a40 	call	2f2a4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   2db64:	002f0500 	call	2f050 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   2db68:	010000f4 	movhi	r4,3
   2db6c:	213c2c04 	addi	r4,r4,-3920
   2db70:	002fa080 	call	2fa08 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   2db74:	d0a6d617 	ldw	r2,-25768(gp)
   2db78:	d0e6d717 	ldw	r3,-25764(gp)
   2db7c:	d126d817 	ldw	r4,-25760(gp)
   2db80:	200d883a 	mov	r6,r4
   2db84:	180b883a 	mov	r5,r3
   2db88:	1009883a 	mov	r4,r2
   2db8c:	0020b100 	call	20b10 <main>
   2db90:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   2db94:	01000044 	movi	r4,1
   2db98:	002d3c40 	call	2d3c4 <close>
  exit (result);
   2db9c:	e13fff17 	ldw	r4,-4(fp)
   2dba0:	002fa1c0 	call	2fa1c <exit>

0002dba4 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
   2dba4:	defffe04 	addi	sp,sp,-8
   2dba8:	df000115 	stw	fp,4(sp)
   2dbac:	df000104 	addi	fp,sp,4
   2dbb0:	e13fff15 	stw	r4,-4(fp)
}
   2dbb4:	0001883a 	nop
   2dbb8:	e037883a 	mov	sp,fp
   2dbbc:	df000017 	ldw	fp,0(sp)
   2dbc0:	dec00104 	addi	sp,sp,4
   2dbc4:	f800283a 	ret

0002dbc8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
   2dbc8:	defffe04 	addi	sp,sp,-8
   2dbcc:	df000115 	stw	fp,4(sp)
   2dbd0:	df000104 	addi	fp,sp,4
   2dbd4:	e13fff15 	stw	r4,-4(fp)
}
   2dbd8:	0001883a 	nop
   2dbdc:	e037883a 	mov	sp,fp
   2dbe0:	df000017 	ldw	fp,0(sp)
   2dbe4:	dec00104 	addi	sp,sp,4
   2dbe8:	f800283a 	ret

0002dbec <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
   2dbec:	defff204 	addi	sp,sp,-56
   2dbf0:	dfc00a15 	stw	ra,40(sp)
   2dbf4:	df000915 	stw	fp,36(sp)
   2dbf8:	df000904 	addi	fp,sp,36
   2dbfc:	e13fff15 	stw	r4,-4(fp)
   2dc00:	e1400215 	stw	r5,8(fp)
   2dc04:	e1800315 	stw	r6,12(fp)
   2dc08:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
   2dc0c:	e0800204 	addi	r2,fp,8
   2dc10:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
   2dc14:	e0bfff17 	ldw	r2,-4(fp)
   2dc18:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
   2dc1c:	00006f06 	br	2dddc <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
   2dc20:	e0bff807 	ldb	r2,-32(fp)
   2dc24:	10800960 	cmpeqi	r2,r2,37
   2dc28:	1000041e 	bne	r2,zero,2dc3c <alt_printf+0x50>
        {
            alt_putchar(c);
   2dc2c:	e0bff807 	ldb	r2,-32(fp)
   2dc30:	1009883a 	mov	r4,r2
   2dc34:	002de180 	call	2de18 <alt_putchar>
   2dc38:	00006806 	br	2dddc <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
   2dc3c:	e0bff717 	ldw	r2,-36(fp)
   2dc40:	10c00044 	addi	r3,r2,1
   2dc44:	e0fff715 	stw	r3,-36(fp)
   2dc48:	10800003 	ldbu	r2,0(r2)
   2dc4c:	e0bff805 	stb	r2,-32(fp)
   2dc50:	e0bff807 	ldb	r2,-32(fp)
   2dc54:	10006926 	beq	r2,zero,2ddfc <alt_printf+0x210>
            {
                if (c == '%')
   2dc58:	e0bff807 	ldb	r2,-32(fp)
   2dc5c:	10800958 	cmpnei	r2,r2,37
   2dc60:	1000041e 	bne	r2,zero,2dc74 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
   2dc64:	e0bff807 	ldb	r2,-32(fp)
   2dc68:	1009883a 	mov	r4,r2
   2dc6c:	002de180 	call	2de18 <alt_putchar>
   2dc70:	00005a06 	br	2dddc <alt_printf+0x1f0>
                } 
                else if (c == 'c')
   2dc74:	e0bff807 	ldb	r2,-32(fp)
   2dc78:	108018d8 	cmpnei	r2,r2,99
   2dc7c:	1000081e 	bne	r2,zero,2dca0 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
   2dc80:	e0bffe17 	ldw	r2,-8(fp)
   2dc84:	10c00104 	addi	r3,r2,4
   2dc88:	e0fffe15 	stw	r3,-8(fp)
   2dc8c:	10800017 	ldw	r2,0(r2)
   2dc90:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
   2dc94:	e13ffd17 	ldw	r4,-12(fp)
   2dc98:	002de180 	call	2de18 <alt_putchar>
   2dc9c:	00004f06 	br	2dddc <alt_printf+0x1f0>
                }
                else if (c == 'x')
   2dca0:	e0bff807 	ldb	r2,-32(fp)
   2dca4:	10801e18 	cmpnei	r2,r2,120
   2dca8:	1000341e 	bne	r2,zero,2dd7c <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
   2dcac:	e0bffe17 	ldw	r2,-8(fp)
   2dcb0:	10c00104 	addi	r3,r2,4
   2dcb4:	e0fffe15 	stw	r3,-8(fp)
   2dcb8:	10800017 	ldw	r2,0(r2)
   2dcbc:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
   2dcc0:	e0bffb17 	ldw	r2,-20(fp)
   2dcc4:	1000031e 	bne	r2,zero,2dcd4 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
   2dcc8:	01000c04 	movi	r4,48
   2dccc:	002de180 	call	2de18 <alt_putchar>
                        continue;
   2dcd0:	00004206 	br	2dddc <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
   2dcd4:	00800704 	movi	r2,28
   2dcd8:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
   2dcdc:	00000306 	br	2dcec <alt_printf+0x100>
                        digit_shift -= 4;
   2dce0:	e0bff917 	ldw	r2,-28(fp)
   2dce4:	10bfff04 	addi	r2,r2,-4
   2dce8:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
   2dcec:	00c003c4 	movi	r3,15
   2dcf0:	e0bff917 	ldw	r2,-28(fp)
   2dcf4:	1884983a 	sll	r2,r3,r2
   2dcf8:	1007883a 	mov	r3,r2
   2dcfc:	e0bffb17 	ldw	r2,-20(fp)
   2dd00:	1884703a 	and	r2,r3,r2
   2dd04:	103ff626 	beq	r2,zero,2dce0 <__alt_data_end+0xfffedce0>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   2dd08:	00001906 	br	2dd70 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
   2dd0c:	00c003c4 	movi	r3,15
   2dd10:	e0bff917 	ldw	r2,-28(fp)
   2dd14:	1884983a 	sll	r2,r3,r2
   2dd18:	1007883a 	mov	r3,r2
   2dd1c:	e0bffb17 	ldw	r2,-20(fp)
   2dd20:	1886703a 	and	r3,r3,r2
   2dd24:	e0bff917 	ldw	r2,-28(fp)
   2dd28:	1884d83a 	srl	r2,r3,r2
   2dd2c:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
   2dd30:	e0bffc17 	ldw	r2,-16(fp)
   2dd34:	108002a8 	cmpgeui	r2,r2,10
   2dd38:	1000041e 	bne	r2,zero,2dd4c <alt_printf+0x160>
                            c = '0' + digit;
   2dd3c:	e0bffc17 	ldw	r2,-16(fp)
   2dd40:	10800c04 	addi	r2,r2,48
   2dd44:	e0bff805 	stb	r2,-32(fp)
   2dd48:	00000306 	br	2dd58 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
   2dd4c:	e0bffc17 	ldw	r2,-16(fp)
   2dd50:	108015c4 	addi	r2,r2,87
   2dd54:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
   2dd58:	e0bff807 	ldb	r2,-32(fp)
   2dd5c:	1009883a 	mov	r4,r2
   2dd60:	002de180 	call	2de18 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
   2dd64:	e0bff917 	ldw	r2,-28(fp)
   2dd68:	10bfff04 	addi	r2,r2,-4
   2dd6c:	e0bff915 	stw	r2,-28(fp)
   2dd70:	e0bff917 	ldw	r2,-28(fp)
   2dd74:	103fe50e 	bge	r2,zero,2dd0c <__alt_data_end+0xfffedd0c>
   2dd78:	00001806 	br	2dddc <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
   2dd7c:	e0bff807 	ldb	r2,-32(fp)
   2dd80:	10801cd8 	cmpnei	r2,r2,115
   2dd84:	1000151e 	bne	r2,zero,2dddc <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
   2dd88:	e0bffe17 	ldw	r2,-8(fp)
   2dd8c:	10c00104 	addi	r3,r2,4
   2dd90:	e0fffe15 	stw	r3,-8(fp)
   2dd94:	10800017 	ldw	r2,0(r2)
   2dd98:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
   2dd9c:	00000906 	br	2ddc4 <alt_printf+0x1d8>
                      alt_putchar(*s++);
   2dda0:	e0bffa17 	ldw	r2,-24(fp)
   2dda4:	10c00044 	addi	r3,r2,1
   2dda8:	e0fffa15 	stw	r3,-24(fp)
   2ddac:	10800003 	ldbu	r2,0(r2)
   2ddb0:	10803fcc 	andi	r2,r2,255
   2ddb4:	1080201c 	xori	r2,r2,128
   2ddb8:	10bfe004 	addi	r2,r2,-128
   2ddbc:	1009883a 	mov	r4,r2
   2ddc0:	002de180 	call	2de18 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
   2ddc4:	e0bffa17 	ldw	r2,-24(fp)
   2ddc8:	10800003 	ldbu	r2,0(r2)
   2ddcc:	10803fcc 	andi	r2,r2,255
   2ddd0:	1080201c 	xori	r2,r2,128
   2ddd4:	10bfe004 	addi	r2,r2,-128
   2ddd8:	103ff11e 	bne	r2,zero,2dda0 <__alt_data_end+0xfffedda0>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
   2dddc:	e0bff717 	ldw	r2,-36(fp)
   2dde0:	10c00044 	addi	r3,r2,1
   2dde4:	e0fff715 	stw	r3,-36(fp)
   2dde8:	10800003 	ldbu	r2,0(r2)
   2ddec:	e0bff805 	stb	r2,-32(fp)
   2ddf0:	e0bff807 	ldb	r2,-32(fp)
   2ddf4:	103f8a1e 	bne	r2,zero,2dc20 <__alt_data_end+0xfffedc20>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   2ddf8:	00000106 	br	2de00 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
   2ddfc:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
   2de00:	0001883a 	nop
   2de04:	e037883a 	mov	sp,fp
   2de08:	dfc00117 	ldw	ra,4(sp)
   2de0c:	df000017 	ldw	fp,0(sp)
   2de10:	dec00504 	addi	sp,sp,20
   2de14:	f800283a 	ret

0002de18 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
   2de18:	defffd04 	addi	sp,sp,-12
   2de1c:	dfc00215 	stw	ra,8(sp)
   2de20:	df000115 	stw	fp,4(sp)
   2de24:	df000104 	addi	fp,sp,4
   2de28:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
   2de2c:	d0a00117 	ldw	r2,-32764(gp)
   2de30:	10800217 	ldw	r2,8(r2)
   2de34:	100b883a 	mov	r5,r2
   2de38:	e13fff17 	ldw	r4,-4(fp)
   2de3c:	002fb700 	call	2fb70 <putc>
#endif
#endif
}
   2de40:	e037883a 	mov	sp,fp
   2de44:	dfc00117 	ldw	ra,4(sp)
   2de48:	df000017 	ldw	fp,0(sp)
   2de4c:	dec00204 	addi	sp,sp,8
   2de50:	f800283a 	ret

0002de54 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2de54:	defffe04 	addi	sp,sp,-8
   2de58:	dfc00115 	stw	ra,4(sp)
   2de5c:	df000015 	stw	fp,0(sp)
   2de60:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2de64:	d0a00b17 	ldw	r2,-32724(gp)
   2de68:	10000326 	beq	r2,zero,2de78 <alt_get_errno+0x24>
   2de6c:	d0a00b17 	ldw	r2,-32724(gp)
   2de70:	103ee83a 	callr	r2
   2de74:	00000106 	br	2de7c <alt_get_errno+0x28>
   2de78:	d0a6d404 	addi	r2,gp,-25776
}
   2de7c:	e037883a 	mov	sp,fp
   2de80:	dfc00117 	ldw	ra,4(sp)
   2de84:	df000017 	ldw	fp,0(sp)
   2de88:	dec00204 	addi	sp,sp,8
   2de8c:	f800283a 	ret

0002de90 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
   2de90:	defff904 	addi	sp,sp,-28
   2de94:	dfc00615 	stw	ra,24(sp)
   2de98:	df000515 	stw	fp,20(sp)
   2de9c:	df000504 	addi	fp,sp,20
   2dea0:	e13ffd15 	stw	r4,-12(fp)
   2dea4:	e17ffe15 	stw	r5,-8(fp)
   2dea8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2deac:	e0bffd17 	ldw	r2,-12(fp)
   2deb0:	10000616 	blt	r2,zero,2decc <read+0x3c>
   2deb4:	e0bffd17 	ldw	r2,-12(fp)
   2deb8:	10c00324 	muli	r3,r2,12
   2debc:	008000f4 	movhi	r2,3
   2dec0:	10834804 	addi	r2,r2,3360
   2dec4:	1885883a 	add	r2,r3,r2
   2dec8:	00000106 	br	2ded0 <read+0x40>
   2decc:	0005883a 	mov	r2,zero
   2ded0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   2ded4:	e0bffb17 	ldw	r2,-20(fp)
   2ded8:	10002226 	beq	r2,zero,2df64 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   2dedc:	e0bffb17 	ldw	r2,-20(fp)
   2dee0:	10800217 	ldw	r2,8(r2)
   2dee4:	108000cc 	andi	r2,r2,3
   2dee8:	10800060 	cmpeqi	r2,r2,1
   2deec:	1000181e 	bne	r2,zero,2df50 <read+0xc0>
        (fd->dev->read))
   2def0:	e0bffb17 	ldw	r2,-20(fp)
   2def4:	10800017 	ldw	r2,0(r2)
   2def8:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
   2defc:	10001426 	beq	r2,zero,2df50 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
   2df00:	e0bffb17 	ldw	r2,-20(fp)
   2df04:	10800017 	ldw	r2,0(r2)
   2df08:	10800517 	ldw	r2,20(r2)
   2df0c:	e0ffff17 	ldw	r3,-4(fp)
   2df10:	180d883a 	mov	r6,r3
   2df14:	e17ffe17 	ldw	r5,-8(fp)
   2df18:	e13ffb17 	ldw	r4,-20(fp)
   2df1c:	103ee83a 	callr	r2
   2df20:	e0bffc15 	stw	r2,-16(fp)
   2df24:	e0bffc17 	ldw	r2,-16(fp)
   2df28:	1000070e 	bge	r2,zero,2df48 <read+0xb8>
        {
          ALT_ERRNO = -rval;
   2df2c:	002de540 	call	2de54 <alt_get_errno>
   2df30:	1007883a 	mov	r3,r2
   2df34:	e0bffc17 	ldw	r2,-16(fp)
   2df38:	0085c83a 	sub	r2,zero,r2
   2df3c:	18800015 	stw	r2,0(r3)
          return -1;
   2df40:	00bfffc4 	movi	r2,-1
   2df44:	00000c06 	br	2df78 <read+0xe8>
        }
        return rval;
   2df48:	e0bffc17 	ldw	r2,-16(fp)
   2df4c:	00000a06 	br	2df78 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
   2df50:	002de540 	call	2de54 <alt_get_errno>
   2df54:	1007883a 	mov	r3,r2
   2df58:	00800344 	movi	r2,13
   2df5c:	18800015 	stw	r2,0(r3)
   2df60:	00000406 	br	2df74 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
   2df64:	002de540 	call	2de54 <alt_get_errno>
   2df68:	1007883a 	mov	r3,r2
   2df6c:	00801444 	movi	r2,81
   2df70:	18800015 	stw	r2,0(r3)
  }
  return -1;
   2df74:	00bfffc4 	movi	r2,-1
}
   2df78:	e037883a 	mov	sp,fp
   2df7c:	dfc00117 	ldw	ra,4(sp)
   2df80:	df000017 	ldw	fp,0(sp)
   2df84:	dec00204 	addi	sp,sp,8
   2df88:	f800283a 	ret

0002df8c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   2df8c:	defffe04 	addi	sp,sp,-8
   2df90:	df000115 	stw	fp,4(sp)
   2df94:	df000104 	addi	fp,sp,4
   2df98:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   2df9c:	e0bfff17 	ldw	r2,-4(fp)
   2dfa0:	108000d0 	cmplti	r2,r2,3
   2dfa4:	10000d1e 	bne	r2,zero,2dfdc <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   2dfa8:	008000f4 	movhi	r2,3
   2dfac:	10834804 	addi	r2,r2,3360
   2dfb0:	e0ffff17 	ldw	r3,-4(fp)
   2dfb4:	18c00324 	muli	r3,r3,12
   2dfb8:	10c5883a 	add	r2,r2,r3
   2dfbc:	10800204 	addi	r2,r2,8
   2dfc0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   2dfc4:	008000f4 	movhi	r2,3
   2dfc8:	10834804 	addi	r2,r2,3360
   2dfcc:	e0ffff17 	ldw	r3,-4(fp)
   2dfd0:	18c00324 	muli	r3,r3,12
   2dfd4:	10c5883a 	add	r2,r2,r3
   2dfd8:	10000015 	stw	zero,0(r2)
  }
}
   2dfdc:	0001883a 	nop
   2dfe0:	e037883a 	mov	sp,fp
   2dfe4:	df000017 	ldw	fp,0(sp)
   2dfe8:	dec00104 	addi	sp,sp,4
   2dfec:	f800283a 	ret

0002dff0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
   2dff0:	defff904 	addi	sp,sp,-28
   2dff4:	df000615 	stw	fp,24(sp)
   2dff8:	df000604 	addi	fp,sp,24
   2dffc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2e000:	0005303a 	rdctl	r2,status
   2e004:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2e008:	e0fffe17 	ldw	r3,-8(fp)
   2e00c:	00bfff84 	movi	r2,-2
   2e010:	1884703a 	and	r2,r3,r2
   2e014:	1001703a 	wrctl	status,r2
  
  return context;
   2e018:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
   2e01c:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
   2e020:	d0a00d17 	ldw	r2,-32716(gp)
   2e024:	10c000c4 	addi	r3,r2,3
   2e028:	00bfff04 	movi	r2,-4
   2e02c:	1884703a 	and	r2,r3,r2
   2e030:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
   2e034:	d0e00d17 	ldw	r3,-32716(gp)
   2e038:	e0bfff17 	ldw	r2,-4(fp)
   2e03c:	1887883a 	add	r3,r3,r2
   2e040:	00800134 	movhi	r2,4
   2e044:	10800004 	addi	r2,r2,0
   2e048:	10c0062e 	bgeu	r2,r3,2e064 <sbrk+0x74>
   2e04c:	e0bffb17 	ldw	r2,-20(fp)
   2e050:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2e054:	e0bffa17 	ldw	r2,-24(fp)
   2e058:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
   2e05c:	00bfffc4 	movi	r2,-1
   2e060:	00000b06 	br	2e090 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
   2e064:	d0a00d17 	ldw	r2,-32716(gp)
   2e068:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
   2e06c:	d0e00d17 	ldw	r3,-32716(gp)
   2e070:	e0bfff17 	ldw	r2,-4(fp)
   2e074:	1885883a 	add	r2,r3,r2
   2e078:	d0a00d15 	stw	r2,-32716(gp)
   2e07c:	e0bffb17 	ldw	r2,-20(fp)
   2e080:	e0bffc15 	stw	r2,-16(fp)
   2e084:	e0bffc17 	ldw	r2,-16(fp)
   2e088:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
   2e08c:	e0bffd17 	ldw	r2,-12(fp)
} 
   2e090:	e037883a 	mov	sp,fp
   2e094:	df000017 	ldw	fp,0(sp)
   2e098:	dec00104 	addi	sp,sp,4
   2e09c:	f800283a 	ret

0002e0a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2e0a0:	defffe04 	addi	sp,sp,-8
   2e0a4:	dfc00115 	stw	ra,4(sp)
   2e0a8:	df000015 	stw	fp,0(sp)
   2e0ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2e0b0:	d0a00b17 	ldw	r2,-32724(gp)
   2e0b4:	10000326 	beq	r2,zero,2e0c4 <alt_get_errno+0x24>
   2e0b8:	d0a00b17 	ldw	r2,-32724(gp)
   2e0bc:	103ee83a 	callr	r2
   2e0c0:	00000106 	br	2e0c8 <alt_get_errno+0x28>
   2e0c4:	d0a6d404 	addi	r2,gp,-25776
}
   2e0c8:	e037883a 	mov	sp,fp
   2e0cc:	dfc00117 	ldw	ra,4(sp)
   2e0d0:	df000017 	ldw	fp,0(sp)
   2e0d4:	dec00204 	addi	sp,sp,8
   2e0d8:	f800283a 	ret

0002e0dc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   2e0dc:	defff904 	addi	sp,sp,-28
   2e0e0:	dfc00615 	stw	ra,24(sp)
   2e0e4:	df000515 	stw	fp,20(sp)
   2e0e8:	df000504 	addi	fp,sp,20
   2e0ec:	e13ffd15 	stw	r4,-12(fp)
   2e0f0:	e17ffe15 	stw	r5,-8(fp)
   2e0f4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   2e0f8:	e0bffd17 	ldw	r2,-12(fp)
   2e0fc:	10000616 	blt	r2,zero,2e118 <write+0x3c>
   2e100:	e0bffd17 	ldw	r2,-12(fp)
   2e104:	10c00324 	muli	r3,r2,12
   2e108:	008000f4 	movhi	r2,3
   2e10c:	10834804 	addi	r2,r2,3360
   2e110:	1885883a 	add	r2,r3,r2
   2e114:	00000106 	br	2e11c <write+0x40>
   2e118:	0005883a 	mov	r2,zero
   2e11c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   2e120:	e0bffb17 	ldw	r2,-20(fp)
   2e124:	10002126 	beq	r2,zero,2e1ac <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   2e128:	e0bffb17 	ldw	r2,-20(fp)
   2e12c:	10800217 	ldw	r2,8(r2)
   2e130:	108000cc 	andi	r2,r2,3
   2e134:	10001826 	beq	r2,zero,2e198 <write+0xbc>
   2e138:	e0bffb17 	ldw	r2,-20(fp)
   2e13c:	10800017 	ldw	r2,0(r2)
   2e140:	10800617 	ldw	r2,24(r2)
   2e144:	10001426 	beq	r2,zero,2e198 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   2e148:	e0bffb17 	ldw	r2,-20(fp)
   2e14c:	10800017 	ldw	r2,0(r2)
   2e150:	10800617 	ldw	r2,24(r2)
   2e154:	e0ffff17 	ldw	r3,-4(fp)
   2e158:	180d883a 	mov	r6,r3
   2e15c:	e17ffe17 	ldw	r5,-8(fp)
   2e160:	e13ffb17 	ldw	r4,-20(fp)
   2e164:	103ee83a 	callr	r2
   2e168:	e0bffc15 	stw	r2,-16(fp)
   2e16c:	e0bffc17 	ldw	r2,-16(fp)
   2e170:	1000070e 	bge	r2,zero,2e190 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   2e174:	002e0a00 	call	2e0a0 <alt_get_errno>
   2e178:	1007883a 	mov	r3,r2
   2e17c:	e0bffc17 	ldw	r2,-16(fp)
   2e180:	0085c83a 	sub	r2,zero,r2
   2e184:	18800015 	stw	r2,0(r3)
        return -1;
   2e188:	00bfffc4 	movi	r2,-1
   2e18c:	00000c06 	br	2e1c0 <write+0xe4>
      }
      return rval;
   2e190:	e0bffc17 	ldw	r2,-16(fp)
   2e194:	00000a06 	br	2e1c0 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   2e198:	002e0a00 	call	2e0a0 <alt_get_errno>
   2e19c:	1007883a 	mov	r3,r2
   2e1a0:	00800344 	movi	r2,13
   2e1a4:	18800015 	stw	r2,0(r3)
   2e1a8:	00000406 	br	2e1bc <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   2e1ac:	002e0a00 	call	2e0a0 <alt_get_errno>
   2e1b0:	1007883a 	mov	r3,r2
   2e1b4:	00801444 	movi	r2,81
   2e1b8:	18800015 	stw	r2,0(r3)
  }
  return -1;
   2e1bc:	00bfffc4 	movi	r2,-1
}
   2e1c0:	e037883a 	mov	sp,fp
   2e1c4:	dfc00117 	ldw	ra,4(sp)
   2e1c8:	df000017 	ldw	fp,0(sp)
   2e1cc:	dec00204 	addi	sp,sp,8
   2e1d0:	f800283a 	ret

0002e1d4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   2e1d4:	defffd04 	addi	sp,sp,-12
   2e1d8:	dfc00215 	stw	ra,8(sp)
   2e1dc:	df000115 	stw	fp,4(sp)
   2e1e0:	df000104 	addi	fp,sp,4
   2e1e4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   2e1e8:	d1600804 	addi	r5,gp,-32736
   2e1ec:	e13fff17 	ldw	r4,-4(fp)
   2e1f0:	002efac0 	call	2efac <alt_dev_llist_insert>
}
   2e1f4:	e037883a 	mov	sp,fp
   2e1f8:	dfc00117 	ldw	ra,4(sp)
   2e1fc:	df000017 	ldw	fp,0(sp)
   2e200:	dec00204 	addi	sp,sp,8
   2e204:	f800283a 	ret

0002e208 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   2e208:	defffd04 	addi	sp,sp,-12
   2e20c:	dfc00215 	stw	ra,8(sp)
   2e210:	df000115 	stw	fp,4(sp)
   2e214:	df000104 	addi	fp,sp,4
   2e218:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   2e21c:	002f7180 	call	2f718 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   2e220:	00800044 	movi	r2,1
   2e224:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   2e228:	0001883a 	nop
   2e22c:	e037883a 	mov	sp,fp
   2e230:	dfc00117 	ldw	ra,4(sp)
   2e234:	df000017 	ldw	fp,0(sp)
   2e238:	dec00204 	addi	sp,sp,8
   2e23c:	f800283a 	ret

0002e240 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   2e240:	defffe04 	addi	sp,sp,-8
   2e244:	dfc00115 	stw	ra,4(sp)
   2e248:	df000015 	stw	fp,0(sp)
   2e24c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   2e250:	01c0fa04 	movi	r7,1000
   2e254:	018000c4 	movi	r6,3
   2e258:	000b883a 	mov	r5,zero
   2e25c:	01000134 	movhi	r4,4
   2e260:	21040004 	addi	r4,r4,4096
   2e264:	002ed800 	call	2ed80 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   2e268:	01800084 	movi	r6,2
   2e26c:	000b883a 	mov	r5,zero
   2e270:	010000f4 	movhi	r4,3
   2e274:	2103b204 	addi	r4,r4,3784
   2e278:	002e4040 	call	2e404 <altera_avalon_jtag_uart_init>
   2e27c:	010000f4 	movhi	r4,3
   2e280:	2103a804 	addi	r4,r4,3744
   2e284:	002e1d40 	call	2e1d4 <alt_dev_reg>
}
   2e288:	0001883a 	nop
   2e28c:	e037883a 	mov	sp,fp
   2e290:	dfc00117 	ldw	ra,4(sp)
   2e294:	df000017 	ldw	fp,0(sp)
   2e298:	dec00204 	addi	sp,sp,8
   2e29c:	f800283a 	ret

0002e2a0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   2e2a0:	defffa04 	addi	sp,sp,-24
   2e2a4:	dfc00515 	stw	ra,20(sp)
   2e2a8:	df000415 	stw	fp,16(sp)
   2e2ac:	df000404 	addi	fp,sp,16
   2e2b0:	e13ffd15 	stw	r4,-12(fp)
   2e2b4:	e17ffe15 	stw	r5,-8(fp)
   2e2b8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2e2bc:	e0bffd17 	ldw	r2,-12(fp)
   2e2c0:	10800017 	ldw	r2,0(r2)
   2e2c4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   2e2c8:	e0bffc17 	ldw	r2,-16(fp)
   2e2cc:	10c00a04 	addi	r3,r2,40
   2e2d0:	e0bffd17 	ldw	r2,-12(fp)
   2e2d4:	10800217 	ldw	r2,8(r2)
   2e2d8:	100f883a 	mov	r7,r2
   2e2dc:	e1bfff17 	ldw	r6,-4(fp)
   2e2e0:	e17ffe17 	ldw	r5,-8(fp)
   2e2e4:	1809883a 	mov	r4,r3
   2e2e8:	002e8c80 	call	2e8c8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   2e2ec:	e037883a 	mov	sp,fp
   2e2f0:	dfc00117 	ldw	ra,4(sp)
   2e2f4:	df000017 	ldw	fp,0(sp)
   2e2f8:	dec00204 	addi	sp,sp,8
   2e2fc:	f800283a 	ret

0002e300 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   2e300:	defffa04 	addi	sp,sp,-24
   2e304:	dfc00515 	stw	ra,20(sp)
   2e308:	df000415 	stw	fp,16(sp)
   2e30c:	df000404 	addi	fp,sp,16
   2e310:	e13ffd15 	stw	r4,-12(fp)
   2e314:	e17ffe15 	stw	r5,-8(fp)
   2e318:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2e31c:	e0bffd17 	ldw	r2,-12(fp)
   2e320:	10800017 	ldw	r2,0(r2)
   2e324:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   2e328:	e0bffc17 	ldw	r2,-16(fp)
   2e32c:	10c00a04 	addi	r3,r2,40
   2e330:	e0bffd17 	ldw	r2,-12(fp)
   2e334:	10800217 	ldw	r2,8(r2)
   2e338:	100f883a 	mov	r7,r2
   2e33c:	e1bfff17 	ldw	r6,-4(fp)
   2e340:	e17ffe17 	ldw	r5,-8(fp)
   2e344:	1809883a 	mov	r4,r3
   2e348:	002eae40 	call	2eae4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   2e34c:	e037883a 	mov	sp,fp
   2e350:	dfc00117 	ldw	ra,4(sp)
   2e354:	df000017 	ldw	fp,0(sp)
   2e358:	dec00204 	addi	sp,sp,8
   2e35c:	f800283a 	ret

0002e360 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
   2e360:	defffc04 	addi	sp,sp,-16
   2e364:	dfc00315 	stw	ra,12(sp)
   2e368:	df000215 	stw	fp,8(sp)
   2e36c:	df000204 	addi	fp,sp,8
   2e370:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   2e374:	e0bfff17 	ldw	r2,-4(fp)
   2e378:	10800017 	ldw	r2,0(r2)
   2e37c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
   2e380:	e0bffe17 	ldw	r2,-8(fp)
   2e384:	10c00a04 	addi	r3,r2,40
   2e388:	e0bfff17 	ldw	r2,-4(fp)
   2e38c:	10800217 	ldw	r2,8(r2)
   2e390:	100b883a 	mov	r5,r2
   2e394:	1809883a 	mov	r4,r3
   2e398:	002e7700 	call	2e770 <altera_avalon_jtag_uart_close>
}
   2e39c:	e037883a 	mov	sp,fp
   2e3a0:	dfc00117 	ldw	ra,4(sp)
   2e3a4:	df000017 	ldw	fp,0(sp)
   2e3a8:	dec00204 	addi	sp,sp,8
   2e3ac:	f800283a 	ret

0002e3b0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
   2e3b0:	defffa04 	addi	sp,sp,-24
   2e3b4:	dfc00515 	stw	ra,20(sp)
   2e3b8:	df000415 	stw	fp,16(sp)
   2e3bc:	df000404 	addi	fp,sp,16
   2e3c0:	e13ffd15 	stw	r4,-12(fp)
   2e3c4:	e17ffe15 	stw	r5,-8(fp)
   2e3c8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
   2e3cc:	e0bffd17 	ldw	r2,-12(fp)
   2e3d0:	10800017 	ldw	r2,0(r2)
   2e3d4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
   2e3d8:	e0bffc17 	ldw	r2,-16(fp)
   2e3dc:	10800a04 	addi	r2,r2,40
   2e3e0:	e1bfff17 	ldw	r6,-4(fp)
   2e3e4:	e17ffe17 	ldw	r5,-8(fp)
   2e3e8:	1009883a 	mov	r4,r2
   2e3ec:	002e7d80 	call	2e7d8 <altera_avalon_jtag_uart_ioctl>
}
   2e3f0:	e037883a 	mov	sp,fp
   2e3f4:	dfc00117 	ldw	ra,4(sp)
   2e3f8:	df000017 	ldw	fp,0(sp)
   2e3fc:	dec00204 	addi	sp,sp,8
   2e400:	f800283a 	ret

0002e404 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
   2e404:	defffa04 	addi	sp,sp,-24
   2e408:	dfc00515 	stw	ra,20(sp)
   2e40c:	df000415 	stw	fp,16(sp)
   2e410:	df000404 	addi	fp,sp,16
   2e414:	e13ffd15 	stw	r4,-12(fp)
   2e418:	e17ffe15 	stw	r5,-8(fp)
   2e41c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2e420:	e0bffd17 	ldw	r2,-12(fp)
   2e424:	00c00044 	movi	r3,1
   2e428:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
   2e42c:	e0bffd17 	ldw	r2,-12(fp)
   2e430:	10800017 	ldw	r2,0(r2)
   2e434:	10800104 	addi	r2,r2,4
   2e438:	1007883a 	mov	r3,r2
   2e43c:	e0bffd17 	ldw	r2,-12(fp)
   2e440:	10800817 	ldw	r2,32(r2)
   2e444:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
   2e448:	e0bffe17 	ldw	r2,-8(fp)
   2e44c:	e0ffff17 	ldw	r3,-4(fp)
   2e450:	d8000015 	stw	zero,0(sp)
   2e454:	e1fffd17 	ldw	r7,-12(fp)
   2e458:	018000f4 	movhi	r6,3
   2e45c:	31b93104 	addi	r6,r6,-6972
   2e460:	180b883a 	mov	r5,r3
   2e464:	1009883a 	mov	r4,r2
   2e468:	002d5ac0 	call	2d5ac <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
   2e46c:	e0bffd17 	ldw	r2,-12(fp)
   2e470:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
   2e474:	e0bffd17 	ldw	r2,-12(fp)
   2e478:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   2e47c:	d0e6da17 	ldw	r3,-25752(gp)
   2e480:	e1fffd17 	ldw	r7,-12(fp)
   2e484:	018000f4 	movhi	r6,3
   2e488:	31b9b404 	addi	r6,r6,-6448
   2e48c:	180b883a 	mov	r5,r3
   2e490:	1009883a 	mov	r4,r2
   2e494:	002edfc0 	call	2edfc <alt_alarm_start>
   2e498:	1000040e 	bge	r2,zero,2e4ac <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
   2e49c:	e0fffd17 	ldw	r3,-12(fp)
   2e4a0:	00a00034 	movhi	r2,32768
   2e4a4:	10bfffc4 	addi	r2,r2,-1
   2e4a8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
   2e4ac:	0001883a 	nop
   2e4b0:	e037883a 	mov	sp,fp
   2e4b4:	dfc00117 	ldw	ra,4(sp)
   2e4b8:	df000017 	ldw	fp,0(sp)
   2e4bc:	dec00204 	addi	sp,sp,8
   2e4c0:	f800283a 	ret

0002e4c4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
   2e4c4:	defff804 	addi	sp,sp,-32
   2e4c8:	df000715 	stw	fp,28(sp)
   2e4cc:	df000704 	addi	fp,sp,28
   2e4d0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
   2e4d4:	e0bfff17 	ldw	r2,-4(fp)
   2e4d8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
   2e4dc:	e0bffb17 	ldw	r2,-20(fp)
   2e4e0:	10800017 	ldw	r2,0(r2)
   2e4e4:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2e4e8:	e0bffc17 	ldw	r2,-16(fp)
   2e4ec:	10800104 	addi	r2,r2,4
   2e4f0:	10800037 	ldwio	r2,0(r2)
   2e4f4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
   2e4f8:	e0bffd17 	ldw	r2,-12(fp)
   2e4fc:	1080c00c 	andi	r2,r2,768
   2e500:	10006d26 	beq	r2,zero,2e6b8 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
   2e504:	e0bffd17 	ldw	r2,-12(fp)
   2e508:	1080400c 	andi	r2,r2,256
   2e50c:	10003526 	beq	r2,zero,2e5e4 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
   2e510:	00800074 	movhi	r2,1
   2e514:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2e518:	e0bffb17 	ldw	r2,-20(fp)
   2e51c:	10800a17 	ldw	r2,40(r2)
   2e520:	10800044 	addi	r2,r2,1
   2e524:	1081ffcc 	andi	r2,r2,2047
   2e528:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
   2e52c:	e0bffb17 	ldw	r2,-20(fp)
   2e530:	10c00b17 	ldw	r3,44(r2)
   2e534:	e0bffe17 	ldw	r2,-8(fp)
   2e538:	18801526 	beq	r3,r2,2e590 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   2e53c:	e0bffc17 	ldw	r2,-16(fp)
   2e540:	10800037 	ldwio	r2,0(r2)
   2e544:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
   2e548:	e0bff917 	ldw	r2,-28(fp)
   2e54c:	10a0000c 	andi	r2,r2,32768
   2e550:	10001126 	beq	r2,zero,2e598 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   2e554:	e0bffb17 	ldw	r2,-20(fp)
   2e558:	10800a17 	ldw	r2,40(r2)
   2e55c:	e0fff917 	ldw	r3,-28(fp)
   2e560:	1809883a 	mov	r4,r3
   2e564:	e0fffb17 	ldw	r3,-20(fp)
   2e568:	1885883a 	add	r2,r3,r2
   2e56c:	10800e04 	addi	r2,r2,56
   2e570:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2e574:	e0bffb17 	ldw	r2,-20(fp)
   2e578:	10800a17 	ldw	r2,40(r2)
   2e57c:	10800044 	addi	r2,r2,1
   2e580:	10c1ffcc 	andi	r3,r2,2047
   2e584:	e0bffb17 	ldw	r2,-20(fp)
   2e588:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
   2e58c:	003fe206 	br	2e518 <__alt_data_end+0xfffee518>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
   2e590:	0001883a 	nop
   2e594:	00000106 	br	2e59c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
   2e598:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
   2e59c:	e0bff917 	ldw	r2,-28(fp)
   2e5a0:	10bfffec 	andhi	r2,r2,65535
   2e5a4:	10000f26 	beq	r2,zero,2e5e4 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2e5a8:	e0bffb17 	ldw	r2,-20(fp)
   2e5ac:	10c00817 	ldw	r3,32(r2)
   2e5b0:	00bfff84 	movi	r2,-2
   2e5b4:	1886703a 	and	r3,r3,r2
   2e5b8:	e0bffb17 	ldw	r2,-20(fp)
   2e5bc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
   2e5c0:	e0bffc17 	ldw	r2,-16(fp)
   2e5c4:	10800104 	addi	r2,r2,4
   2e5c8:	1007883a 	mov	r3,r2
   2e5cc:	e0bffb17 	ldw	r2,-20(fp)
   2e5d0:	10800817 	ldw	r2,32(r2)
   2e5d4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2e5d8:	e0bffc17 	ldw	r2,-16(fp)
   2e5dc:	10800104 	addi	r2,r2,4
   2e5e0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
   2e5e4:	e0bffd17 	ldw	r2,-12(fp)
   2e5e8:	1080800c 	andi	r2,r2,512
   2e5ec:	103fbe26 	beq	r2,zero,2e4e8 <__alt_data_end+0xfffee4e8>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
   2e5f0:	e0bffd17 	ldw	r2,-12(fp)
   2e5f4:	1004d43a 	srli	r2,r2,16
   2e5f8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
   2e5fc:	00001406 	br	2e650 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
   2e600:	e0bffc17 	ldw	r2,-16(fp)
   2e604:	e0fffb17 	ldw	r3,-20(fp)
   2e608:	18c00d17 	ldw	r3,52(r3)
   2e60c:	e13ffb17 	ldw	r4,-20(fp)
   2e610:	20c7883a 	add	r3,r4,r3
   2e614:	18c20e04 	addi	r3,r3,2104
   2e618:	18c00003 	ldbu	r3,0(r3)
   2e61c:	18c03fcc 	andi	r3,r3,255
   2e620:	18c0201c 	xori	r3,r3,128
   2e624:	18ffe004 	addi	r3,r3,-128
   2e628:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2e62c:	e0bffb17 	ldw	r2,-20(fp)
   2e630:	10800d17 	ldw	r2,52(r2)
   2e634:	10800044 	addi	r2,r2,1
   2e638:	10c1ffcc 	andi	r3,r2,2047
   2e63c:	e0bffb17 	ldw	r2,-20(fp)
   2e640:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
   2e644:	e0bffa17 	ldw	r2,-24(fp)
   2e648:	10bfffc4 	addi	r2,r2,-1
   2e64c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
   2e650:	e0bffa17 	ldw	r2,-24(fp)
   2e654:	10000526 	beq	r2,zero,2e66c <altera_avalon_jtag_uart_irq+0x1a8>
   2e658:	e0bffb17 	ldw	r2,-20(fp)
   2e65c:	10c00d17 	ldw	r3,52(r2)
   2e660:	e0bffb17 	ldw	r2,-20(fp)
   2e664:	10800c17 	ldw	r2,48(r2)
   2e668:	18bfe51e 	bne	r3,r2,2e600 <__alt_data_end+0xfffee600>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
   2e66c:	e0bffa17 	ldw	r2,-24(fp)
   2e670:	103f9d26 	beq	r2,zero,2e4e8 <__alt_data_end+0xfffee4e8>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   2e674:	e0bffb17 	ldw	r2,-20(fp)
   2e678:	10c00817 	ldw	r3,32(r2)
   2e67c:	00bfff44 	movi	r2,-3
   2e680:	1886703a 	and	r3,r3,r2
   2e684:	e0bffb17 	ldw	r2,-20(fp)
   2e688:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2e68c:	e0bffb17 	ldw	r2,-20(fp)
   2e690:	10800017 	ldw	r2,0(r2)
   2e694:	10800104 	addi	r2,r2,4
   2e698:	1007883a 	mov	r3,r2
   2e69c:	e0bffb17 	ldw	r2,-20(fp)
   2e6a0:	10800817 	ldw	r2,32(r2)
   2e6a4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
   2e6a8:	e0bffc17 	ldw	r2,-16(fp)
   2e6ac:	10800104 	addi	r2,r2,4
   2e6b0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
   2e6b4:	003f8c06 	br	2e4e8 <__alt_data_end+0xfffee4e8>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
   2e6b8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
   2e6bc:	0001883a 	nop
   2e6c0:	e037883a 	mov	sp,fp
   2e6c4:	df000017 	ldw	fp,0(sp)
   2e6c8:	dec00104 	addi	sp,sp,4
   2e6cc:	f800283a 	ret

0002e6d0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
   2e6d0:	defff804 	addi	sp,sp,-32
   2e6d4:	df000715 	stw	fp,28(sp)
   2e6d8:	df000704 	addi	fp,sp,28
   2e6dc:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
   2e6e0:	e0bffb17 	ldw	r2,-20(fp)
   2e6e4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
   2e6e8:	e0bff917 	ldw	r2,-28(fp)
   2e6ec:	10800017 	ldw	r2,0(r2)
   2e6f0:	10800104 	addi	r2,r2,4
   2e6f4:	10800037 	ldwio	r2,0(r2)
   2e6f8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
   2e6fc:	e0bffa17 	ldw	r2,-24(fp)
   2e700:	1081000c 	andi	r2,r2,1024
   2e704:	10000b26 	beq	r2,zero,2e734 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
   2e708:	e0bff917 	ldw	r2,-28(fp)
   2e70c:	10800017 	ldw	r2,0(r2)
   2e710:	10800104 	addi	r2,r2,4
   2e714:	1007883a 	mov	r3,r2
   2e718:	e0bff917 	ldw	r2,-28(fp)
   2e71c:	10800817 	ldw	r2,32(r2)
   2e720:	10810014 	ori	r2,r2,1024
   2e724:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
   2e728:	e0bff917 	ldw	r2,-28(fp)
   2e72c:	10000915 	stw	zero,36(r2)
   2e730:	00000a06 	br	2e75c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
   2e734:	e0bff917 	ldw	r2,-28(fp)
   2e738:	10c00917 	ldw	r3,36(r2)
   2e73c:	00a00034 	movhi	r2,32768
   2e740:	10bfff04 	addi	r2,r2,-4
   2e744:	10c00536 	bltu	r2,r3,2e75c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
   2e748:	e0bff917 	ldw	r2,-28(fp)
   2e74c:	10800917 	ldw	r2,36(r2)
   2e750:	10c00044 	addi	r3,r2,1
   2e754:	e0bff917 	ldw	r2,-28(fp)
   2e758:	10c00915 	stw	r3,36(r2)
   2e75c:	d0a6da17 	ldw	r2,-25752(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
   2e760:	e037883a 	mov	sp,fp
   2e764:	df000017 	ldw	fp,0(sp)
   2e768:	dec00104 	addi	sp,sp,4
   2e76c:	f800283a 	ret

0002e770 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
   2e770:	defffd04 	addi	sp,sp,-12
   2e774:	df000215 	stw	fp,8(sp)
   2e778:	df000204 	addi	fp,sp,8
   2e77c:	e13ffe15 	stw	r4,-8(fp)
   2e780:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   2e784:	00000506 	br	2e79c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
   2e788:	e0bfff17 	ldw	r2,-4(fp)
   2e78c:	1090000c 	andi	r2,r2,16384
   2e790:	10000226 	beq	r2,zero,2e79c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
   2e794:	00bffd44 	movi	r2,-11
   2e798:	00000b06 	br	2e7c8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
   2e79c:	e0bffe17 	ldw	r2,-8(fp)
   2e7a0:	10c00d17 	ldw	r3,52(r2)
   2e7a4:	e0bffe17 	ldw	r2,-8(fp)
   2e7a8:	10800c17 	ldw	r2,48(r2)
   2e7ac:	18800526 	beq	r3,r2,2e7c4 <altera_avalon_jtag_uart_close+0x54>
   2e7b0:	e0bffe17 	ldw	r2,-8(fp)
   2e7b4:	10c00917 	ldw	r3,36(r2)
   2e7b8:	e0bffe17 	ldw	r2,-8(fp)
   2e7bc:	10800117 	ldw	r2,4(r2)
   2e7c0:	18bff136 	bltu	r3,r2,2e788 <__alt_data_end+0xfffee788>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
   2e7c4:	0005883a 	mov	r2,zero
}
   2e7c8:	e037883a 	mov	sp,fp
   2e7cc:	df000017 	ldw	fp,0(sp)
   2e7d0:	dec00104 	addi	sp,sp,4
   2e7d4:	f800283a 	ret

0002e7d8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
   2e7d8:	defffa04 	addi	sp,sp,-24
   2e7dc:	df000515 	stw	fp,20(sp)
   2e7e0:	df000504 	addi	fp,sp,20
   2e7e4:	e13ffd15 	stw	r4,-12(fp)
   2e7e8:	e17ffe15 	stw	r5,-8(fp)
   2e7ec:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
   2e7f0:	00bff9c4 	movi	r2,-25
   2e7f4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
   2e7f8:	e0bffe17 	ldw	r2,-8(fp)
   2e7fc:	10da8060 	cmpeqi	r3,r2,27137
   2e800:	1800031e 	bne	r3,zero,2e810 <altera_avalon_jtag_uart_ioctl+0x38>
   2e804:	109a80a0 	cmpeqi	r2,r2,27138
   2e808:	1000181e 	bne	r2,zero,2e86c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
   2e80c:	00002906 	br	2e8b4 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
   2e810:	e0bffd17 	ldw	r2,-12(fp)
   2e814:	10c00117 	ldw	r3,4(r2)
   2e818:	00a00034 	movhi	r2,32768
   2e81c:	10bfffc4 	addi	r2,r2,-1
   2e820:	18802126 	beq	r3,r2,2e8a8 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
   2e824:	e0bfff17 	ldw	r2,-4(fp)
   2e828:	10800017 	ldw	r2,0(r2)
   2e82c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
   2e830:	e0bffc17 	ldw	r2,-16(fp)
   2e834:	10800090 	cmplti	r2,r2,2
   2e838:	1000061e 	bne	r2,zero,2e854 <altera_avalon_jtag_uart_ioctl+0x7c>
   2e83c:	e0fffc17 	ldw	r3,-16(fp)
   2e840:	00a00034 	movhi	r2,32768
   2e844:	10bfffc4 	addi	r2,r2,-1
   2e848:	18800226 	beq	r3,r2,2e854 <altera_avalon_jtag_uart_ioctl+0x7c>
   2e84c:	e0bffc17 	ldw	r2,-16(fp)
   2e850:	00000206 	br	2e85c <altera_avalon_jtag_uart_ioctl+0x84>
   2e854:	00a00034 	movhi	r2,32768
   2e858:	10bfff84 	addi	r2,r2,-2
   2e85c:	e0fffd17 	ldw	r3,-12(fp)
   2e860:	18800115 	stw	r2,4(r3)
      rc = 0;
   2e864:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   2e868:	00000f06 	br	2e8a8 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
   2e86c:	e0bffd17 	ldw	r2,-12(fp)
   2e870:	10c00117 	ldw	r3,4(r2)
   2e874:	00a00034 	movhi	r2,32768
   2e878:	10bfffc4 	addi	r2,r2,-1
   2e87c:	18800c26 	beq	r3,r2,2e8b0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
   2e880:	e0bffd17 	ldw	r2,-12(fp)
   2e884:	10c00917 	ldw	r3,36(r2)
   2e888:	e0bffd17 	ldw	r2,-12(fp)
   2e88c:	10800117 	ldw	r2,4(r2)
   2e890:	1885803a 	cmpltu	r2,r3,r2
   2e894:	10c03fcc 	andi	r3,r2,255
   2e898:	e0bfff17 	ldw	r2,-4(fp)
   2e89c:	10c00015 	stw	r3,0(r2)
      rc = 0;
   2e8a0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
   2e8a4:	00000206 	br	2e8b0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
   2e8a8:	0001883a 	nop
   2e8ac:	00000106 	br	2e8b4 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
   2e8b0:	0001883a 	nop

  default:
    break;
  }

  return rc;
   2e8b4:	e0bffb17 	ldw	r2,-20(fp)
}
   2e8b8:	e037883a 	mov	sp,fp
   2e8bc:	df000017 	ldw	fp,0(sp)
   2e8c0:	dec00104 	addi	sp,sp,4
   2e8c4:	f800283a 	ret

0002e8c8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
   2e8c8:	defff304 	addi	sp,sp,-52
   2e8cc:	dfc00c15 	stw	ra,48(sp)
   2e8d0:	df000b15 	stw	fp,44(sp)
   2e8d4:	df000b04 	addi	fp,sp,44
   2e8d8:	e13ffc15 	stw	r4,-16(fp)
   2e8dc:	e17ffd15 	stw	r5,-12(fp)
   2e8e0:	e1bffe15 	stw	r6,-8(fp)
   2e8e4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
   2e8e8:	e0bffd17 	ldw	r2,-12(fp)
   2e8ec:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   2e8f0:	00004706 	br	2ea10 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
   2e8f4:	e0bffc17 	ldw	r2,-16(fp)
   2e8f8:	10800a17 	ldw	r2,40(r2)
   2e8fc:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
   2e900:	e0bffc17 	ldw	r2,-16(fp)
   2e904:	10800b17 	ldw	r2,44(r2)
   2e908:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
   2e90c:	e0fff717 	ldw	r3,-36(fp)
   2e910:	e0bff817 	ldw	r2,-32(fp)
   2e914:	18800536 	bltu	r3,r2,2e92c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
   2e918:	e0fff717 	ldw	r3,-36(fp)
   2e91c:	e0bff817 	ldw	r2,-32(fp)
   2e920:	1885c83a 	sub	r2,r3,r2
   2e924:	e0bff615 	stw	r2,-40(fp)
   2e928:	00000406 	br	2e93c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
   2e92c:	00c20004 	movi	r3,2048
   2e930:	e0bff817 	ldw	r2,-32(fp)
   2e934:	1885c83a 	sub	r2,r3,r2
   2e938:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   2e93c:	e0bff617 	ldw	r2,-40(fp)
   2e940:	10001e26 	beq	r2,zero,2e9bc <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
   2e944:	e0fffe17 	ldw	r3,-8(fp)
   2e948:	e0bff617 	ldw	r2,-40(fp)
   2e94c:	1880022e 	bgeu	r3,r2,2e958 <altera_avalon_jtag_uart_read+0x90>
        n = space;
   2e950:	e0bffe17 	ldw	r2,-8(fp)
   2e954:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
   2e958:	e0bffc17 	ldw	r2,-16(fp)
   2e95c:	10c00e04 	addi	r3,r2,56
   2e960:	e0bff817 	ldw	r2,-32(fp)
   2e964:	1885883a 	add	r2,r3,r2
   2e968:	e1bff617 	ldw	r6,-40(fp)
   2e96c:	100b883a 	mov	r5,r2
   2e970:	e13ff517 	ldw	r4,-44(fp)
   2e974:	00261940 	call	26194 <memcpy>
      ptr   += n;
   2e978:	e0fff517 	ldw	r3,-44(fp)
   2e97c:	e0bff617 	ldw	r2,-40(fp)
   2e980:	1885883a 	add	r2,r3,r2
   2e984:	e0bff515 	stw	r2,-44(fp)
      space -= n;
   2e988:	e0fffe17 	ldw	r3,-8(fp)
   2e98c:	e0bff617 	ldw	r2,-40(fp)
   2e990:	1885c83a 	sub	r2,r3,r2
   2e994:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2e998:	e0fff817 	ldw	r3,-32(fp)
   2e99c:	e0bff617 	ldw	r2,-40(fp)
   2e9a0:	1885883a 	add	r2,r3,r2
   2e9a4:	10c1ffcc 	andi	r3,r2,2047
   2e9a8:	e0bffc17 	ldw	r2,-16(fp)
   2e9ac:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
   2e9b0:	e0bffe17 	ldw	r2,-8(fp)
   2e9b4:	00bfcf16 	blt	zero,r2,2e8f4 <__alt_data_end+0xfffee8f4>
   2e9b8:	00000106 	br	2e9c0 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
   2e9bc:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
   2e9c0:	e0fff517 	ldw	r3,-44(fp)
   2e9c4:	e0bffd17 	ldw	r2,-12(fp)
   2e9c8:	1880141e 	bne	r3,r2,2ea1c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
   2e9cc:	e0bfff17 	ldw	r2,-4(fp)
   2e9d0:	1090000c 	andi	r2,r2,16384
   2e9d4:	1000131e 	bne	r2,zero,2ea24 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
   2e9d8:	0001883a 	nop
   2e9dc:	e0bffc17 	ldw	r2,-16(fp)
   2e9e0:	10c00a17 	ldw	r3,40(r2)
   2e9e4:	e0bff717 	ldw	r2,-36(fp)
   2e9e8:	1880051e 	bne	r3,r2,2ea00 <altera_avalon_jtag_uart_read+0x138>
   2e9ec:	e0bffc17 	ldw	r2,-16(fp)
   2e9f0:	10c00917 	ldw	r3,36(r2)
   2e9f4:	e0bffc17 	ldw	r2,-16(fp)
   2e9f8:	10800117 	ldw	r2,4(r2)
   2e9fc:	18bff736 	bltu	r3,r2,2e9dc <__alt_data_end+0xfffee9dc>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
   2ea00:	e0bffc17 	ldw	r2,-16(fp)
   2ea04:	10c00a17 	ldw	r3,40(r2)
   2ea08:	e0bff717 	ldw	r2,-36(fp)
   2ea0c:	18800726 	beq	r3,r2,2ea2c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
   2ea10:	e0bffe17 	ldw	r2,-8(fp)
   2ea14:	00bfb716 	blt	zero,r2,2e8f4 <__alt_data_end+0xfffee8f4>
   2ea18:	00000506 	br	2ea30 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
   2ea1c:	0001883a 	nop
   2ea20:	00000306 	br	2ea30 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
   2ea24:	0001883a 	nop
   2ea28:	00000106 	br	2ea30 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
   2ea2c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
   2ea30:	e0fff517 	ldw	r3,-44(fp)
   2ea34:	e0bffd17 	ldw	r2,-12(fp)
   2ea38:	18801826 	beq	r3,r2,2ea9c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2ea3c:	0005303a 	rdctl	r2,status
   2ea40:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2ea44:	e0fffb17 	ldw	r3,-20(fp)
   2ea48:	00bfff84 	movi	r2,-2
   2ea4c:	1884703a 	and	r2,r3,r2
   2ea50:	1001703a 	wrctl	status,r2
  
  return context;
   2ea54:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
   2ea58:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
   2ea5c:	e0bffc17 	ldw	r2,-16(fp)
   2ea60:	10800817 	ldw	r2,32(r2)
   2ea64:	10c00054 	ori	r3,r2,1
   2ea68:	e0bffc17 	ldw	r2,-16(fp)
   2ea6c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2ea70:	e0bffc17 	ldw	r2,-16(fp)
   2ea74:	10800017 	ldw	r2,0(r2)
   2ea78:	10800104 	addi	r2,r2,4
   2ea7c:	1007883a 	mov	r3,r2
   2ea80:	e0bffc17 	ldw	r2,-16(fp)
   2ea84:	10800817 	ldw	r2,32(r2)
   2ea88:	18800035 	stwio	r2,0(r3)
   2ea8c:	e0bffa17 	ldw	r2,-24(fp)
   2ea90:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2ea94:	e0bff917 	ldw	r2,-28(fp)
   2ea98:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
   2ea9c:	e0fff517 	ldw	r3,-44(fp)
   2eaa0:	e0bffd17 	ldw	r2,-12(fp)
   2eaa4:	18800426 	beq	r3,r2,2eab8 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
   2eaa8:	e0fff517 	ldw	r3,-44(fp)
   2eaac:	e0bffd17 	ldw	r2,-12(fp)
   2eab0:	1885c83a 	sub	r2,r3,r2
   2eab4:	00000606 	br	2ead0 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
   2eab8:	e0bfff17 	ldw	r2,-4(fp)
   2eabc:	1090000c 	andi	r2,r2,16384
   2eac0:	10000226 	beq	r2,zero,2eacc <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
   2eac4:	00bffd44 	movi	r2,-11
   2eac8:	00000106 	br	2ead0 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
   2eacc:	00bffec4 	movi	r2,-5
}
   2ead0:	e037883a 	mov	sp,fp
   2ead4:	dfc00117 	ldw	ra,4(sp)
   2ead8:	df000017 	ldw	fp,0(sp)
   2eadc:	dec00204 	addi	sp,sp,8
   2eae0:	f800283a 	ret

0002eae4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   2eae4:	defff304 	addi	sp,sp,-52
   2eae8:	dfc00c15 	stw	ra,48(sp)
   2eaec:	df000b15 	stw	fp,44(sp)
   2eaf0:	df000b04 	addi	fp,sp,44
   2eaf4:	e13ffc15 	stw	r4,-16(fp)
   2eaf8:	e17ffd15 	stw	r5,-12(fp)
   2eafc:	e1bffe15 	stw	r6,-8(fp)
   2eb00:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
   2eb04:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
   2eb08:	e0bffd17 	ldw	r2,-12(fp)
   2eb0c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   2eb10:	00003706 	br	2ebf0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
   2eb14:	e0bffc17 	ldw	r2,-16(fp)
   2eb18:	10800c17 	ldw	r2,48(r2)
   2eb1c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
   2eb20:	e0bffc17 	ldw	r2,-16(fp)
   2eb24:	10800d17 	ldw	r2,52(r2)
   2eb28:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
   2eb2c:	e0fff917 	ldw	r3,-28(fp)
   2eb30:	e0bff517 	ldw	r2,-44(fp)
   2eb34:	1880062e 	bgeu	r3,r2,2eb50 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
   2eb38:	e0fff517 	ldw	r3,-44(fp)
   2eb3c:	e0bff917 	ldw	r2,-28(fp)
   2eb40:	1885c83a 	sub	r2,r3,r2
   2eb44:	10bfffc4 	addi	r2,r2,-1
   2eb48:	e0bff615 	stw	r2,-40(fp)
   2eb4c:	00000b06 	br	2eb7c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
   2eb50:	e0bff517 	ldw	r2,-44(fp)
   2eb54:	10000526 	beq	r2,zero,2eb6c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
   2eb58:	00c20004 	movi	r3,2048
   2eb5c:	e0bff917 	ldw	r2,-28(fp)
   2eb60:	1885c83a 	sub	r2,r3,r2
   2eb64:	e0bff615 	stw	r2,-40(fp)
   2eb68:	00000406 	br	2eb7c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
   2eb6c:	00c1ffc4 	movi	r3,2047
   2eb70:	e0bff917 	ldw	r2,-28(fp)
   2eb74:	1885c83a 	sub	r2,r3,r2
   2eb78:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
   2eb7c:	e0bff617 	ldw	r2,-40(fp)
   2eb80:	10001e26 	beq	r2,zero,2ebfc <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
   2eb84:	e0fffe17 	ldw	r3,-8(fp)
   2eb88:	e0bff617 	ldw	r2,-40(fp)
   2eb8c:	1880022e 	bgeu	r3,r2,2eb98 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
   2eb90:	e0bffe17 	ldw	r2,-8(fp)
   2eb94:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
   2eb98:	e0bffc17 	ldw	r2,-16(fp)
   2eb9c:	10c20e04 	addi	r3,r2,2104
   2eba0:	e0bff917 	ldw	r2,-28(fp)
   2eba4:	1885883a 	add	r2,r3,r2
   2eba8:	e1bff617 	ldw	r6,-40(fp)
   2ebac:	e17ffd17 	ldw	r5,-12(fp)
   2ebb0:	1009883a 	mov	r4,r2
   2ebb4:	00261940 	call	26194 <memcpy>
      ptr   += n;
   2ebb8:	e0fffd17 	ldw	r3,-12(fp)
   2ebbc:	e0bff617 	ldw	r2,-40(fp)
   2ebc0:	1885883a 	add	r2,r3,r2
   2ebc4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
   2ebc8:	e0fffe17 	ldw	r3,-8(fp)
   2ebcc:	e0bff617 	ldw	r2,-40(fp)
   2ebd0:	1885c83a 	sub	r2,r3,r2
   2ebd4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
   2ebd8:	e0fff917 	ldw	r3,-28(fp)
   2ebdc:	e0bff617 	ldw	r2,-40(fp)
   2ebe0:	1885883a 	add	r2,r3,r2
   2ebe4:	10c1ffcc 	andi	r3,r2,2047
   2ebe8:	e0bffc17 	ldw	r2,-16(fp)
   2ebec:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
   2ebf0:	e0bffe17 	ldw	r2,-8(fp)
   2ebf4:	00bfc716 	blt	zero,r2,2eb14 <__alt_data_end+0xfffeeb14>
   2ebf8:	00000106 	br	2ec00 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
   2ebfc:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2ec00:	0005303a 	rdctl	r2,status
   2ec04:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2ec08:	e0fffb17 	ldw	r3,-20(fp)
   2ec0c:	00bfff84 	movi	r2,-2
   2ec10:	1884703a 	and	r2,r3,r2
   2ec14:	1001703a 	wrctl	status,r2
  
  return context;
   2ec18:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
   2ec1c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
   2ec20:	e0bffc17 	ldw	r2,-16(fp)
   2ec24:	10800817 	ldw	r2,32(r2)
   2ec28:	10c00094 	ori	r3,r2,2
   2ec2c:	e0bffc17 	ldw	r2,-16(fp)
   2ec30:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
   2ec34:	e0bffc17 	ldw	r2,-16(fp)
   2ec38:	10800017 	ldw	r2,0(r2)
   2ec3c:	10800104 	addi	r2,r2,4
   2ec40:	1007883a 	mov	r3,r2
   2ec44:	e0bffc17 	ldw	r2,-16(fp)
   2ec48:	10800817 	ldw	r2,32(r2)
   2ec4c:	18800035 	stwio	r2,0(r3)
   2ec50:	e0bffa17 	ldw	r2,-24(fp)
   2ec54:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2ec58:	e0bff817 	ldw	r2,-32(fp)
   2ec5c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
   2ec60:	e0bffe17 	ldw	r2,-8(fp)
   2ec64:	0080100e 	bge	zero,r2,2eca8 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
   2ec68:	e0bfff17 	ldw	r2,-4(fp)
   2ec6c:	1090000c 	andi	r2,r2,16384
   2ec70:	1000101e 	bne	r2,zero,2ecb4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
   2ec74:	0001883a 	nop
   2ec78:	e0bffc17 	ldw	r2,-16(fp)
   2ec7c:	10c00d17 	ldw	r3,52(r2)
   2ec80:	e0bff517 	ldw	r2,-44(fp)
   2ec84:	1880051e 	bne	r3,r2,2ec9c <altera_avalon_jtag_uart_write+0x1b8>
   2ec88:	e0bffc17 	ldw	r2,-16(fp)
   2ec8c:	10c00917 	ldw	r3,36(r2)
   2ec90:	e0bffc17 	ldw	r2,-16(fp)
   2ec94:	10800117 	ldw	r2,4(r2)
   2ec98:	18bff736 	bltu	r3,r2,2ec78 <__alt_data_end+0xfffeec78>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
   2ec9c:	e0bffc17 	ldw	r2,-16(fp)
   2eca0:	10800917 	ldw	r2,36(r2)
   2eca4:	1000051e 	bne	r2,zero,2ecbc <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
   2eca8:	e0bffe17 	ldw	r2,-8(fp)
   2ecac:	00bfd016 	blt	zero,r2,2ebf0 <__alt_data_end+0xfffeebf0>
   2ecb0:	00000306 	br	2ecc0 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
   2ecb4:	0001883a 	nop
   2ecb8:	00000106 	br	2ecc0 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
   2ecbc:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
   2ecc0:	e0fffd17 	ldw	r3,-12(fp)
   2ecc4:	e0bff717 	ldw	r2,-36(fp)
   2ecc8:	18800426 	beq	r3,r2,2ecdc <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
   2eccc:	e0fffd17 	ldw	r3,-12(fp)
   2ecd0:	e0bff717 	ldw	r2,-36(fp)
   2ecd4:	1885c83a 	sub	r2,r3,r2
   2ecd8:	00000606 	br	2ecf4 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
   2ecdc:	e0bfff17 	ldw	r2,-4(fp)
   2ece0:	1090000c 	andi	r2,r2,16384
   2ece4:	10000226 	beq	r2,zero,2ecf0 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
   2ece8:	00bffd44 	movi	r2,-11
   2ecec:	00000106 	br	2ecf4 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
   2ecf0:	00bffec4 	movi	r2,-5
}
   2ecf4:	e037883a 	mov	sp,fp
   2ecf8:	dfc00117 	ldw	ra,4(sp)
   2ecfc:	df000017 	ldw	fp,0(sp)
   2ed00:	dec00204 	addi	sp,sp,8
   2ed04:	f800283a 	ret

0002ed08 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   2ed08:	defffa04 	addi	sp,sp,-24
   2ed0c:	dfc00515 	stw	ra,20(sp)
   2ed10:	df000415 	stw	fp,16(sp)
   2ed14:	df000404 	addi	fp,sp,16
   2ed18:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   2ed1c:	0007883a 	mov	r3,zero
   2ed20:	e0bfff17 	ldw	r2,-4(fp)
   2ed24:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   2ed28:	e0bfff17 	ldw	r2,-4(fp)
   2ed2c:	10800104 	addi	r2,r2,4
   2ed30:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2ed34:	0005303a 	rdctl	r2,status
   2ed38:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2ed3c:	e0fffd17 	ldw	r3,-12(fp)
   2ed40:	00bfff84 	movi	r2,-2
   2ed44:	1884703a 	and	r2,r3,r2
   2ed48:	1001703a 	wrctl	status,r2
  
  return context;
   2ed4c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   2ed50:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   2ed54:	002f6100 	call	2f610 <alt_tick>
   2ed58:	e0bffc17 	ldw	r2,-16(fp)
   2ed5c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2ed60:	e0bffe17 	ldw	r2,-8(fp)
   2ed64:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   2ed68:	0001883a 	nop
   2ed6c:	e037883a 	mov	sp,fp
   2ed70:	dfc00117 	ldw	ra,4(sp)
   2ed74:	df000017 	ldw	fp,0(sp)
   2ed78:	dec00204 	addi	sp,sp,8
   2ed7c:	f800283a 	ret

0002ed80 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   2ed80:	defff804 	addi	sp,sp,-32
   2ed84:	dfc00715 	stw	ra,28(sp)
   2ed88:	df000615 	stw	fp,24(sp)
   2ed8c:	df000604 	addi	fp,sp,24
   2ed90:	e13ffc15 	stw	r4,-16(fp)
   2ed94:	e17ffd15 	stw	r5,-12(fp)
   2ed98:	e1bffe15 	stw	r6,-8(fp)
   2ed9c:	e1ffff15 	stw	r7,-4(fp)
   2eda0:	e0bfff17 	ldw	r2,-4(fp)
   2eda4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   2eda8:	d0a6da17 	ldw	r2,-25752(gp)
   2edac:	1000021e 	bne	r2,zero,2edb8 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   2edb0:	e0bffb17 	ldw	r2,-20(fp)
   2edb4:	d0a6da15 	stw	r2,-25752(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   2edb8:	e0bffc17 	ldw	r2,-16(fp)
   2edbc:	10800104 	addi	r2,r2,4
   2edc0:	00c001c4 	movi	r3,7
   2edc4:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   2edc8:	d8000015 	stw	zero,0(sp)
   2edcc:	e1fffc17 	ldw	r7,-16(fp)
   2edd0:	018000f4 	movhi	r6,3
   2edd4:	31bb4204 	addi	r6,r6,-4856
   2edd8:	e17ffe17 	ldw	r5,-8(fp)
   2eddc:	e13ffd17 	ldw	r4,-12(fp)
   2ede0:	002d5ac0 	call	2d5ac <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   2ede4:	0001883a 	nop
   2ede8:	e037883a 	mov	sp,fp
   2edec:	dfc00117 	ldw	ra,4(sp)
   2edf0:	df000017 	ldw	fp,0(sp)
   2edf4:	dec00204 	addi	sp,sp,8
   2edf8:	f800283a 	ret

0002edfc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
   2edfc:	defff504 	addi	sp,sp,-44
   2ee00:	df000a15 	stw	fp,40(sp)
   2ee04:	df000a04 	addi	fp,sp,40
   2ee08:	e13ffc15 	stw	r4,-16(fp)
   2ee0c:	e17ffd15 	stw	r5,-12(fp)
   2ee10:	e1bffe15 	stw	r6,-8(fp)
   2ee14:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
   2ee18:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
   2ee1c:	d0a6da17 	ldw	r2,-25752(gp)
  
  if (alt_ticks_per_second ())
   2ee20:	10003c26 	beq	r2,zero,2ef14 <alt_alarm_start+0x118>
  {
    if (alarm)
   2ee24:	e0bffc17 	ldw	r2,-16(fp)
   2ee28:	10003826 	beq	r2,zero,2ef0c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
   2ee2c:	e0bffc17 	ldw	r2,-16(fp)
   2ee30:	e0fffe17 	ldw	r3,-8(fp)
   2ee34:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
   2ee38:	e0bffc17 	ldw	r2,-16(fp)
   2ee3c:	e0ffff17 	ldw	r3,-4(fp)
   2ee40:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2ee44:	0005303a 	rdctl	r2,status
   2ee48:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2ee4c:	e0fff917 	ldw	r3,-28(fp)
   2ee50:	00bfff84 	movi	r2,-2
   2ee54:	1884703a 	and	r2,r3,r2
   2ee58:	1001703a 	wrctl	status,r2
  
  return context;
   2ee5c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
   2ee60:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
   2ee64:	d0a6db17 	ldw	r2,-25748(gp)
      
      current_nticks = alt_nticks();
   2ee68:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
   2ee6c:	e0fffd17 	ldw	r3,-12(fp)
   2ee70:	e0bff617 	ldw	r2,-40(fp)
   2ee74:	1885883a 	add	r2,r3,r2
   2ee78:	10c00044 	addi	r3,r2,1
   2ee7c:	e0bffc17 	ldw	r2,-16(fp)
   2ee80:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
   2ee84:	e0bffc17 	ldw	r2,-16(fp)
   2ee88:	10c00217 	ldw	r3,8(r2)
   2ee8c:	e0bff617 	ldw	r2,-40(fp)
   2ee90:	1880042e 	bgeu	r3,r2,2eea4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
   2ee94:	e0bffc17 	ldw	r2,-16(fp)
   2ee98:	00c00044 	movi	r3,1
   2ee9c:	10c00405 	stb	r3,16(r2)
   2eea0:	00000206 	br	2eeac <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
   2eea4:	e0bffc17 	ldw	r2,-16(fp)
   2eea8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
   2eeac:	e0bffc17 	ldw	r2,-16(fp)
   2eeb0:	d0e00e04 	addi	r3,gp,-32712
   2eeb4:	e0fffa15 	stw	r3,-24(fp)
   2eeb8:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   2eebc:	e0bffb17 	ldw	r2,-20(fp)
   2eec0:	e0fffa17 	ldw	r3,-24(fp)
   2eec4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   2eec8:	e0bffa17 	ldw	r2,-24(fp)
   2eecc:	10c00017 	ldw	r3,0(r2)
   2eed0:	e0bffb17 	ldw	r2,-20(fp)
   2eed4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   2eed8:	e0bffa17 	ldw	r2,-24(fp)
   2eedc:	10800017 	ldw	r2,0(r2)
   2eee0:	e0fffb17 	ldw	r3,-20(fp)
   2eee4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   2eee8:	e0bffa17 	ldw	r2,-24(fp)
   2eeec:	e0fffb17 	ldw	r3,-20(fp)
   2eef0:	10c00015 	stw	r3,0(r2)
   2eef4:	e0bff817 	ldw	r2,-32(fp)
   2eef8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2eefc:	e0bff717 	ldw	r2,-36(fp)
   2ef00:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
   2ef04:	0005883a 	mov	r2,zero
   2ef08:	00000306 	br	2ef18 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
   2ef0c:	00bffa84 	movi	r2,-22
   2ef10:	00000106 	br	2ef18 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
   2ef14:	00bfde84 	movi	r2,-134
  }
}
   2ef18:	e037883a 	mov	sp,fp
   2ef1c:	df000017 	ldw	fp,0(sp)
   2ef20:	dec00104 	addi	sp,sp,4
   2ef24:	f800283a 	ret

0002ef28 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   2ef28:	defffe04 	addi	sp,sp,-8
   2ef2c:	df000115 	stw	fp,4(sp)
   2ef30:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   2ef34:	e03fff15 	stw	zero,-4(fp)
   2ef38:	00000506 	br	2ef50 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   2ef3c:	e0bfff17 	ldw	r2,-4(fp)
   2ef40:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   2ef44:	e0bfff17 	ldw	r2,-4(fp)
   2ef48:	10800804 	addi	r2,r2,32
   2ef4c:	e0bfff15 	stw	r2,-4(fp)
   2ef50:	e0bfff17 	ldw	r2,-4(fp)
   2ef54:	00ffffd4 	movui	r3,65535
   2ef58:	18bff82e 	bgeu	r3,r2,2ef3c <__alt_data_end+0xfffeef3c>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   2ef5c:	0001883a 	nop
   2ef60:	e037883a 	mov	sp,fp
   2ef64:	df000017 	ldw	fp,0(sp)
   2ef68:	dec00104 	addi	sp,sp,4
   2ef6c:	f800283a 	ret

0002ef70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2ef70:	defffe04 	addi	sp,sp,-8
   2ef74:	dfc00115 	stw	ra,4(sp)
   2ef78:	df000015 	stw	fp,0(sp)
   2ef7c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2ef80:	d0a00b17 	ldw	r2,-32724(gp)
   2ef84:	10000326 	beq	r2,zero,2ef94 <alt_get_errno+0x24>
   2ef88:	d0a00b17 	ldw	r2,-32724(gp)
   2ef8c:	103ee83a 	callr	r2
   2ef90:	00000106 	br	2ef98 <alt_get_errno+0x28>
   2ef94:	d0a6d404 	addi	r2,gp,-25776
}
   2ef98:	e037883a 	mov	sp,fp
   2ef9c:	dfc00117 	ldw	ra,4(sp)
   2efa0:	df000017 	ldw	fp,0(sp)
   2efa4:	dec00204 	addi	sp,sp,8
   2efa8:	f800283a 	ret

0002efac <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   2efac:	defffa04 	addi	sp,sp,-24
   2efb0:	dfc00515 	stw	ra,20(sp)
   2efb4:	df000415 	stw	fp,16(sp)
   2efb8:	df000404 	addi	fp,sp,16
   2efbc:	e13ffe15 	stw	r4,-8(fp)
   2efc0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   2efc4:	e0bffe17 	ldw	r2,-8(fp)
   2efc8:	10000326 	beq	r2,zero,2efd8 <alt_dev_llist_insert+0x2c>
   2efcc:	e0bffe17 	ldw	r2,-8(fp)
   2efd0:	10800217 	ldw	r2,8(r2)
   2efd4:	1000061e 	bne	r2,zero,2eff0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   2efd8:	002ef700 	call	2ef70 <alt_get_errno>
   2efdc:	1007883a 	mov	r3,r2
   2efe0:	00800584 	movi	r2,22
   2efe4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   2efe8:	00bffa84 	movi	r2,-22
   2efec:	00001306 	br	2f03c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   2eff0:	e0bffe17 	ldw	r2,-8(fp)
   2eff4:	e0ffff17 	ldw	r3,-4(fp)
   2eff8:	e0fffc15 	stw	r3,-16(fp)
   2effc:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   2f000:	e0bffd17 	ldw	r2,-12(fp)
   2f004:	e0fffc17 	ldw	r3,-16(fp)
   2f008:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   2f00c:	e0bffc17 	ldw	r2,-16(fp)
   2f010:	10c00017 	ldw	r3,0(r2)
   2f014:	e0bffd17 	ldw	r2,-12(fp)
   2f018:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   2f01c:	e0bffc17 	ldw	r2,-16(fp)
   2f020:	10800017 	ldw	r2,0(r2)
   2f024:	e0fffd17 	ldw	r3,-12(fp)
   2f028:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   2f02c:	e0bffc17 	ldw	r2,-16(fp)
   2f030:	e0fffd17 	ldw	r3,-12(fp)
   2f034:	10c00015 	stw	r3,0(r2)

  return 0;  
   2f038:	0005883a 	mov	r2,zero
}
   2f03c:	e037883a 	mov	sp,fp
   2f040:	dfc00117 	ldw	ra,4(sp)
   2f044:	df000017 	ldw	fp,0(sp)
   2f048:	dec00204 	addi	sp,sp,8
   2f04c:	f800283a 	ret

0002f050 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   2f050:	defffd04 	addi	sp,sp,-12
   2f054:	dfc00215 	stw	ra,8(sp)
   2f058:	df000115 	stw	fp,4(sp)
   2f05c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   2f060:	008000f4 	movhi	r2,3
   2f064:	10bfc004 	addi	r2,r2,-256
   2f068:	e0bfff15 	stw	r2,-4(fp)
   2f06c:	00000606 	br	2f088 <_do_ctors+0x38>
        (*ctor) (); 
   2f070:	e0bfff17 	ldw	r2,-4(fp)
   2f074:	10800017 	ldw	r2,0(r2)
   2f078:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   2f07c:	e0bfff17 	ldw	r2,-4(fp)
   2f080:	10bfff04 	addi	r2,r2,-4
   2f084:	e0bfff15 	stw	r2,-4(fp)
   2f088:	e0ffff17 	ldw	r3,-4(fp)
   2f08c:	008000f4 	movhi	r2,3
   2f090:	10bfc104 	addi	r2,r2,-252
   2f094:	18bff62e 	bgeu	r3,r2,2f070 <__alt_data_end+0xfffef070>
        (*ctor) (); 
}
   2f098:	0001883a 	nop
   2f09c:	e037883a 	mov	sp,fp
   2f0a0:	dfc00117 	ldw	ra,4(sp)
   2f0a4:	df000017 	ldw	fp,0(sp)
   2f0a8:	dec00204 	addi	sp,sp,8
   2f0ac:	f800283a 	ret

0002f0b0 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   2f0b0:	defffd04 	addi	sp,sp,-12
   2f0b4:	dfc00215 	stw	ra,8(sp)
   2f0b8:	df000115 	stw	fp,4(sp)
   2f0bc:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   2f0c0:	008000f4 	movhi	r2,3
   2f0c4:	10bfc004 	addi	r2,r2,-256
   2f0c8:	e0bfff15 	stw	r2,-4(fp)
   2f0cc:	00000606 	br	2f0e8 <_do_dtors+0x38>
        (*dtor) (); 
   2f0d0:	e0bfff17 	ldw	r2,-4(fp)
   2f0d4:	10800017 	ldw	r2,0(r2)
   2f0d8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   2f0dc:	e0bfff17 	ldw	r2,-4(fp)
   2f0e0:	10bfff04 	addi	r2,r2,-4
   2f0e4:	e0bfff15 	stw	r2,-4(fp)
   2f0e8:	e0ffff17 	ldw	r3,-4(fp)
   2f0ec:	008000f4 	movhi	r2,3
   2f0f0:	10bfc104 	addi	r2,r2,-252
   2f0f4:	18bff62e 	bgeu	r3,r2,2f0d0 <__alt_data_end+0xfffef0d0>
        (*dtor) (); 
}
   2f0f8:	0001883a 	nop
   2f0fc:	e037883a 	mov	sp,fp
   2f100:	dfc00117 	ldw	ra,4(sp)
   2f104:	df000017 	ldw	fp,0(sp)
   2f108:	dec00204 	addi	sp,sp,8
   2f10c:	f800283a 	ret

0002f110 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   2f110:	defffe04 	addi	sp,sp,-8
   2f114:	dfc00115 	stw	ra,4(sp)
   2f118:	df000015 	stw	fp,0(sp)
   2f11c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   2f120:	01400074 	movhi	r5,1
   2f124:	0009883a 	mov	r4,zero
   2f128:	002f9780 	call	2f978 <alt_icache_flush>
#endif
}
   2f12c:	0001883a 	nop
   2f130:	e037883a 	mov	sp,fp
   2f134:	dfc00117 	ldw	ra,4(sp)
   2f138:	df000017 	ldw	fp,0(sp)
   2f13c:	dec00204 	addi	sp,sp,8
   2f140:	f800283a 	ret

0002f144 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   2f144:	defffe04 	addi	sp,sp,-8
   2f148:	df000115 	stw	fp,4(sp)
   2f14c:	df000104 	addi	fp,sp,4
   2f150:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   2f154:	e0bfff17 	ldw	r2,-4(fp)
   2f158:	10bffe84 	addi	r2,r2,-6
   2f15c:	10c00428 	cmpgeui	r3,r2,16
   2f160:	18001a1e 	bne	r3,zero,2f1cc <alt_exception_cause_generated_bad_addr+0x88>
   2f164:	100690ba 	slli	r3,r2,2
   2f168:	008000f4 	movhi	r2,3
   2f16c:	10bc5f04 	addi	r2,r2,-3716
   2f170:	1885883a 	add	r2,r3,r2
   2f174:	10800017 	ldw	r2,0(r2)
   2f178:	1000683a 	jmp	r2
   2f17c:	0002f1bc 	xorhi	zero,zero,3014
   2f180:	0002f1bc 	xorhi	zero,zero,3014
   2f184:	0002f1cc 	andi	zero,zero,3015
   2f188:	0002f1cc 	andi	zero,zero,3015
   2f18c:	0002f1cc 	andi	zero,zero,3015
   2f190:	0002f1bc 	xorhi	zero,zero,3014
   2f194:	0002f1c4 	movi	zero,3015
   2f198:	0002f1cc 	andi	zero,zero,3015
   2f19c:	0002f1bc 	xorhi	zero,zero,3014
   2f1a0:	0002f1bc 	xorhi	zero,zero,3014
   2f1a4:	0002f1cc 	andi	zero,zero,3015
   2f1a8:	0002f1bc 	xorhi	zero,zero,3014
   2f1ac:	0002f1c4 	movi	zero,3015
   2f1b0:	0002f1cc 	andi	zero,zero,3015
   2f1b4:	0002f1cc 	andi	zero,zero,3015
   2f1b8:	0002f1bc 	xorhi	zero,zero,3014
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   2f1bc:	00800044 	movi	r2,1
   2f1c0:	00000306 	br	2f1d0 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   2f1c4:	0005883a 	mov	r2,zero
   2f1c8:	00000106 	br	2f1d0 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   2f1cc:	0005883a 	mov	r2,zero
  }
}
   2f1d0:	e037883a 	mov	sp,fp
   2f1d4:	df000017 	ldw	fp,0(sp)
   2f1d8:	dec00104 	addi	sp,sp,4
   2f1dc:	f800283a 	ret

0002f1e0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   2f1e0:	defff904 	addi	sp,sp,-28
   2f1e4:	dfc00615 	stw	ra,24(sp)
   2f1e8:	df000515 	stw	fp,20(sp)
   2f1ec:	df000504 	addi	fp,sp,20
   2f1f0:	e13ffc15 	stw	r4,-16(fp)
   2f1f4:	e17ffd15 	stw	r5,-12(fp)
   2f1f8:	e1bffe15 	stw	r6,-8(fp)
   2f1fc:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   2f200:	e1bfff17 	ldw	r6,-4(fp)
   2f204:	e17ffe17 	ldw	r5,-8(fp)
   2f208:	e13ffd17 	ldw	r4,-12(fp)
   2f20c:	002f4200 	call	2f420 <open>
   2f210:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   2f214:	e0bffb17 	ldw	r2,-20(fp)
   2f218:	10001c16 	blt	r2,zero,2f28c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   2f21c:	008000f4 	movhi	r2,3
   2f220:	10834804 	addi	r2,r2,3360
   2f224:	e0fffb17 	ldw	r3,-20(fp)
   2f228:	18c00324 	muli	r3,r3,12
   2f22c:	10c5883a 	add	r2,r2,r3
   2f230:	10c00017 	ldw	r3,0(r2)
   2f234:	e0bffc17 	ldw	r2,-16(fp)
   2f238:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   2f23c:	008000f4 	movhi	r2,3
   2f240:	10834804 	addi	r2,r2,3360
   2f244:	e0fffb17 	ldw	r3,-20(fp)
   2f248:	18c00324 	muli	r3,r3,12
   2f24c:	10c5883a 	add	r2,r2,r3
   2f250:	10800104 	addi	r2,r2,4
   2f254:	10c00017 	ldw	r3,0(r2)
   2f258:	e0bffc17 	ldw	r2,-16(fp)
   2f25c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   2f260:	008000f4 	movhi	r2,3
   2f264:	10834804 	addi	r2,r2,3360
   2f268:	e0fffb17 	ldw	r3,-20(fp)
   2f26c:	18c00324 	muli	r3,r3,12
   2f270:	10c5883a 	add	r2,r2,r3
   2f274:	10800204 	addi	r2,r2,8
   2f278:	10c00017 	ldw	r3,0(r2)
   2f27c:	e0bffc17 	ldw	r2,-16(fp)
   2f280:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   2f284:	e13ffb17 	ldw	r4,-20(fp)
   2f288:	002df8c0 	call	2df8c <alt_release_fd>
  }
} 
   2f28c:	0001883a 	nop
   2f290:	e037883a 	mov	sp,fp
   2f294:	dfc00117 	ldw	ra,4(sp)
   2f298:	df000017 	ldw	fp,0(sp)
   2f29c:	dec00204 	addi	sp,sp,8
   2f2a0:	f800283a 	ret

0002f2a4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   2f2a4:	defffb04 	addi	sp,sp,-20
   2f2a8:	dfc00415 	stw	ra,16(sp)
   2f2ac:	df000315 	stw	fp,12(sp)
   2f2b0:	df000304 	addi	fp,sp,12
   2f2b4:	e13ffd15 	stw	r4,-12(fp)
   2f2b8:	e17ffe15 	stw	r5,-8(fp)
   2f2bc:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   2f2c0:	01c07fc4 	movi	r7,511
   2f2c4:	01800044 	movi	r6,1
   2f2c8:	e17ffd17 	ldw	r5,-12(fp)
   2f2cc:	010000f4 	movhi	r4,3
   2f2d0:	21034b04 	addi	r4,r4,3372
   2f2d4:	002f1e00 	call	2f1e0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   2f2d8:	01c07fc4 	movi	r7,511
   2f2dc:	000d883a 	mov	r6,zero
   2f2e0:	e17ffe17 	ldw	r5,-8(fp)
   2f2e4:	010000f4 	movhi	r4,3
   2f2e8:	21034804 	addi	r4,r4,3360
   2f2ec:	002f1e00 	call	2f1e0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   2f2f0:	01c07fc4 	movi	r7,511
   2f2f4:	01800044 	movi	r6,1
   2f2f8:	e17fff17 	ldw	r5,-4(fp)
   2f2fc:	010000f4 	movhi	r4,3
   2f300:	21034e04 	addi	r4,r4,3384
   2f304:	002f1e00 	call	2f1e0 <alt_open_fd>
}  
   2f308:	0001883a 	nop
   2f30c:	e037883a 	mov	sp,fp
   2f310:	dfc00117 	ldw	ra,4(sp)
   2f314:	df000017 	ldw	fp,0(sp)
   2f318:	dec00204 	addi	sp,sp,8
   2f31c:	f800283a 	ret

0002f320 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   2f320:	defffe04 	addi	sp,sp,-8
   2f324:	dfc00115 	stw	ra,4(sp)
   2f328:	df000015 	stw	fp,0(sp)
   2f32c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   2f330:	d0a00b17 	ldw	r2,-32724(gp)
   2f334:	10000326 	beq	r2,zero,2f344 <alt_get_errno+0x24>
   2f338:	d0a00b17 	ldw	r2,-32724(gp)
   2f33c:	103ee83a 	callr	r2
   2f340:	00000106 	br	2f348 <alt_get_errno+0x28>
   2f344:	d0a6d404 	addi	r2,gp,-25776
}
   2f348:	e037883a 	mov	sp,fp
   2f34c:	dfc00117 	ldw	ra,4(sp)
   2f350:	df000017 	ldw	fp,0(sp)
   2f354:	dec00204 	addi	sp,sp,8
   2f358:	f800283a 	ret

0002f35c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   2f35c:	defffd04 	addi	sp,sp,-12
   2f360:	df000215 	stw	fp,8(sp)
   2f364:	df000204 	addi	fp,sp,8
   2f368:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   2f36c:	e0bfff17 	ldw	r2,-4(fp)
   2f370:	10800217 	ldw	r2,8(r2)
   2f374:	10d00034 	orhi	r3,r2,16384
   2f378:	e0bfff17 	ldw	r2,-4(fp)
   2f37c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   2f380:	e03ffe15 	stw	zero,-8(fp)
   2f384:	00001d06 	br	2f3fc <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   2f388:	008000f4 	movhi	r2,3
   2f38c:	10834804 	addi	r2,r2,3360
   2f390:	e0fffe17 	ldw	r3,-8(fp)
   2f394:	18c00324 	muli	r3,r3,12
   2f398:	10c5883a 	add	r2,r2,r3
   2f39c:	10c00017 	ldw	r3,0(r2)
   2f3a0:	e0bfff17 	ldw	r2,-4(fp)
   2f3a4:	10800017 	ldw	r2,0(r2)
   2f3a8:	1880111e 	bne	r3,r2,2f3f0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   2f3ac:	008000f4 	movhi	r2,3
   2f3b0:	10834804 	addi	r2,r2,3360
   2f3b4:	e0fffe17 	ldw	r3,-8(fp)
   2f3b8:	18c00324 	muli	r3,r3,12
   2f3bc:	10c5883a 	add	r2,r2,r3
   2f3c0:	10800204 	addi	r2,r2,8
   2f3c4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   2f3c8:	1000090e 	bge	r2,zero,2f3f0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   2f3cc:	e0bffe17 	ldw	r2,-8(fp)
   2f3d0:	10c00324 	muli	r3,r2,12
   2f3d4:	008000f4 	movhi	r2,3
   2f3d8:	10834804 	addi	r2,r2,3360
   2f3dc:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   2f3e0:	e0bfff17 	ldw	r2,-4(fp)
   2f3e4:	18800226 	beq	r3,r2,2f3f0 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   2f3e8:	00bffcc4 	movi	r2,-13
   2f3ec:	00000806 	br	2f410 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   2f3f0:	e0bffe17 	ldw	r2,-8(fp)
   2f3f4:	10800044 	addi	r2,r2,1
   2f3f8:	e0bffe15 	stw	r2,-8(fp)
   2f3fc:	d0a00a17 	ldw	r2,-32728(gp)
   2f400:	1007883a 	mov	r3,r2
   2f404:	e0bffe17 	ldw	r2,-8(fp)
   2f408:	18bfdf2e 	bgeu	r3,r2,2f388 <__alt_data_end+0xfffef388>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   2f40c:	0005883a 	mov	r2,zero
}
   2f410:	e037883a 	mov	sp,fp
   2f414:	df000017 	ldw	fp,0(sp)
   2f418:	dec00104 	addi	sp,sp,4
   2f41c:	f800283a 	ret

0002f420 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   2f420:	defff604 	addi	sp,sp,-40
   2f424:	dfc00915 	stw	ra,36(sp)
   2f428:	df000815 	stw	fp,32(sp)
   2f42c:	df000804 	addi	fp,sp,32
   2f430:	e13ffd15 	stw	r4,-12(fp)
   2f434:	e17ffe15 	stw	r5,-8(fp)
   2f438:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   2f43c:	00bfffc4 	movi	r2,-1
   2f440:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   2f444:	00bffb44 	movi	r2,-19
   2f448:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   2f44c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   2f450:	d1600804 	addi	r5,gp,-32736
   2f454:	e13ffd17 	ldw	r4,-12(fp)
   2f458:	002f73c0 	call	2f73c <alt_find_dev>
   2f45c:	e0bff815 	stw	r2,-32(fp)
   2f460:	e0bff817 	ldw	r2,-32(fp)
   2f464:	1000051e 	bne	r2,zero,2f47c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   2f468:	e13ffd17 	ldw	r4,-12(fp)
   2f46c:	002f7cc0 	call	2f7cc <alt_find_file>
   2f470:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   2f474:	00800044 	movi	r2,1
   2f478:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   2f47c:	e0bff817 	ldw	r2,-32(fp)
   2f480:	10002926 	beq	r2,zero,2f528 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   2f484:	e13ff817 	ldw	r4,-32(fp)
   2f488:	002f8d40 	call	2f8d4 <alt_get_fd>
   2f48c:	e0bff915 	stw	r2,-28(fp)
   2f490:	e0bff917 	ldw	r2,-28(fp)
   2f494:	1000030e 	bge	r2,zero,2f4a4 <open+0x84>
    {
      status = index;
   2f498:	e0bff917 	ldw	r2,-28(fp)
   2f49c:	e0bffa15 	stw	r2,-24(fp)
   2f4a0:	00002306 	br	2f530 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   2f4a4:	e0bff917 	ldw	r2,-28(fp)
   2f4a8:	10c00324 	muli	r3,r2,12
   2f4ac:	008000f4 	movhi	r2,3
   2f4b0:	10834804 	addi	r2,r2,3360
   2f4b4:	1885883a 	add	r2,r3,r2
   2f4b8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   2f4bc:	e0fffe17 	ldw	r3,-8(fp)
   2f4c0:	00900034 	movhi	r2,16384
   2f4c4:	10bfffc4 	addi	r2,r2,-1
   2f4c8:	1886703a 	and	r3,r3,r2
   2f4cc:	e0bffc17 	ldw	r2,-16(fp)
   2f4d0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   2f4d4:	e0bffb17 	ldw	r2,-20(fp)
   2f4d8:	1000051e 	bne	r2,zero,2f4f0 <open+0xd0>
   2f4dc:	e13ffc17 	ldw	r4,-16(fp)
   2f4e0:	002f35c0 	call	2f35c <alt_file_locked>
   2f4e4:	e0bffa15 	stw	r2,-24(fp)
   2f4e8:	e0bffa17 	ldw	r2,-24(fp)
   2f4ec:	10001016 	blt	r2,zero,2f530 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   2f4f0:	e0bff817 	ldw	r2,-32(fp)
   2f4f4:	10800317 	ldw	r2,12(r2)
   2f4f8:	10000826 	beq	r2,zero,2f51c <open+0xfc>
   2f4fc:	e0bff817 	ldw	r2,-32(fp)
   2f500:	10800317 	ldw	r2,12(r2)
   2f504:	e1ffff17 	ldw	r7,-4(fp)
   2f508:	e1bffe17 	ldw	r6,-8(fp)
   2f50c:	e17ffd17 	ldw	r5,-12(fp)
   2f510:	e13ffc17 	ldw	r4,-16(fp)
   2f514:	103ee83a 	callr	r2
   2f518:	00000106 	br	2f520 <open+0x100>
   2f51c:	0005883a 	mov	r2,zero
   2f520:	e0bffa15 	stw	r2,-24(fp)
   2f524:	00000206 	br	2f530 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   2f528:	00bffb44 	movi	r2,-19
   2f52c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   2f530:	e0bffa17 	ldw	r2,-24(fp)
   2f534:	1000090e 	bge	r2,zero,2f55c <open+0x13c>
  {
    alt_release_fd (index);  
   2f538:	e13ff917 	ldw	r4,-28(fp)
   2f53c:	002df8c0 	call	2df8c <alt_release_fd>
    ALT_ERRNO = -status;
   2f540:	002f3200 	call	2f320 <alt_get_errno>
   2f544:	1007883a 	mov	r3,r2
   2f548:	e0bffa17 	ldw	r2,-24(fp)
   2f54c:	0085c83a 	sub	r2,zero,r2
   2f550:	18800015 	stw	r2,0(r3)
    return -1;
   2f554:	00bfffc4 	movi	r2,-1
   2f558:	00000106 	br	2f560 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   2f55c:	e0bff917 	ldw	r2,-28(fp)
}
   2f560:	e037883a 	mov	sp,fp
   2f564:	dfc00117 	ldw	ra,4(sp)
   2f568:	df000017 	ldw	fp,0(sp)
   2f56c:	dec00204 	addi	sp,sp,8
   2f570:	f800283a 	ret

0002f574 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   2f574:	defffa04 	addi	sp,sp,-24
   2f578:	df000515 	stw	fp,20(sp)
   2f57c:	df000504 	addi	fp,sp,20
   2f580:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2f584:	0005303a 	rdctl	r2,status
   2f588:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2f58c:	e0fffc17 	ldw	r3,-16(fp)
   2f590:	00bfff84 	movi	r2,-2
   2f594:	1884703a 	and	r2,r3,r2
   2f598:	1001703a 	wrctl	status,r2
  
  return context;
   2f59c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   2f5a0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   2f5a4:	e0bfff17 	ldw	r2,-4(fp)
   2f5a8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   2f5ac:	e0bffd17 	ldw	r2,-12(fp)
   2f5b0:	10800017 	ldw	r2,0(r2)
   2f5b4:	e0fffd17 	ldw	r3,-12(fp)
   2f5b8:	18c00117 	ldw	r3,4(r3)
   2f5bc:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   2f5c0:	e0bffd17 	ldw	r2,-12(fp)
   2f5c4:	10800117 	ldw	r2,4(r2)
   2f5c8:	e0fffd17 	ldw	r3,-12(fp)
   2f5cc:	18c00017 	ldw	r3,0(r3)
   2f5d0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   2f5d4:	e0bffd17 	ldw	r2,-12(fp)
   2f5d8:	e0fffd17 	ldw	r3,-12(fp)
   2f5dc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   2f5e0:	e0bffd17 	ldw	r2,-12(fp)
   2f5e4:	e0fffd17 	ldw	r3,-12(fp)
   2f5e8:	10c00015 	stw	r3,0(r2)
   2f5ec:	e0bffb17 	ldw	r2,-20(fp)
   2f5f0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   2f5f4:	e0bffe17 	ldw	r2,-8(fp)
   2f5f8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   2f5fc:	0001883a 	nop
   2f600:	e037883a 	mov	sp,fp
   2f604:	df000017 	ldw	fp,0(sp)
   2f608:	dec00104 	addi	sp,sp,4
   2f60c:	f800283a 	ret

0002f610 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   2f610:	defffb04 	addi	sp,sp,-20
   2f614:	dfc00415 	stw	ra,16(sp)
   2f618:	df000315 	stw	fp,12(sp)
   2f61c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   2f620:	d0a00e17 	ldw	r2,-32712(gp)
   2f624:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   2f628:	d0a6db17 	ldw	r2,-25748(gp)
   2f62c:	10800044 	addi	r2,r2,1
   2f630:	d0a6db15 	stw	r2,-25748(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   2f634:	00002e06 	br	2f6f0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   2f638:	e0bffd17 	ldw	r2,-12(fp)
   2f63c:	10800017 	ldw	r2,0(r2)
   2f640:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   2f644:	e0bffd17 	ldw	r2,-12(fp)
   2f648:	10800403 	ldbu	r2,16(r2)
   2f64c:	10803fcc 	andi	r2,r2,255
   2f650:	10000426 	beq	r2,zero,2f664 <alt_tick+0x54>
   2f654:	d0a6db17 	ldw	r2,-25748(gp)
   2f658:	1000021e 	bne	r2,zero,2f664 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   2f65c:	e0bffd17 	ldw	r2,-12(fp)
   2f660:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   2f664:	e0bffd17 	ldw	r2,-12(fp)
   2f668:	10800217 	ldw	r2,8(r2)
   2f66c:	d0e6db17 	ldw	r3,-25748(gp)
   2f670:	18801d36 	bltu	r3,r2,2f6e8 <alt_tick+0xd8>
   2f674:	e0bffd17 	ldw	r2,-12(fp)
   2f678:	10800403 	ldbu	r2,16(r2)
   2f67c:	10803fcc 	andi	r2,r2,255
   2f680:	1000191e 	bne	r2,zero,2f6e8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   2f684:	e0bffd17 	ldw	r2,-12(fp)
   2f688:	10800317 	ldw	r2,12(r2)
   2f68c:	e0fffd17 	ldw	r3,-12(fp)
   2f690:	18c00517 	ldw	r3,20(r3)
   2f694:	1809883a 	mov	r4,r3
   2f698:	103ee83a 	callr	r2
   2f69c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   2f6a0:	e0bfff17 	ldw	r2,-4(fp)
   2f6a4:	1000031e 	bne	r2,zero,2f6b4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   2f6a8:	e13ffd17 	ldw	r4,-12(fp)
   2f6ac:	002f5740 	call	2f574 <alt_alarm_stop>
   2f6b0:	00000d06 	br	2f6e8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   2f6b4:	e0bffd17 	ldw	r2,-12(fp)
   2f6b8:	10c00217 	ldw	r3,8(r2)
   2f6bc:	e0bfff17 	ldw	r2,-4(fp)
   2f6c0:	1887883a 	add	r3,r3,r2
   2f6c4:	e0bffd17 	ldw	r2,-12(fp)
   2f6c8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   2f6cc:	e0bffd17 	ldw	r2,-12(fp)
   2f6d0:	10c00217 	ldw	r3,8(r2)
   2f6d4:	d0a6db17 	ldw	r2,-25748(gp)
   2f6d8:	1880032e 	bgeu	r3,r2,2f6e8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   2f6dc:	e0bffd17 	ldw	r2,-12(fp)
   2f6e0:	00c00044 	movi	r3,1
   2f6e4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   2f6e8:	e0bffe17 	ldw	r2,-8(fp)
   2f6ec:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   2f6f0:	e0fffd17 	ldw	r3,-12(fp)
   2f6f4:	d0a00e04 	addi	r2,gp,-32712
   2f6f8:	18bfcf1e 	bne	r3,r2,2f638 <__alt_data_end+0xfffef638>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   2f6fc:	0001883a 	nop
}
   2f700:	0001883a 	nop
   2f704:	e037883a 	mov	sp,fp
   2f708:	dfc00117 	ldw	ra,4(sp)
   2f70c:	df000017 	ldw	fp,0(sp)
   2f710:	dec00204 	addi	sp,sp,8
   2f714:	f800283a 	ret

0002f718 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   2f718:	deffff04 	addi	sp,sp,-4
   2f71c:	df000015 	stw	fp,0(sp)
   2f720:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   2f724:	000170fa 	wrctl	ienable,zero
}
   2f728:	0001883a 	nop
   2f72c:	e037883a 	mov	sp,fp
   2f730:	df000017 	ldw	fp,0(sp)
   2f734:	dec00104 	addi	sp,sp,4
   2f738:	f800283a 	ret

0002f73c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   2f73c:	defffa04 	addi	sp,sp,-24
   2f740:	dfc00515 	stw	ra,20(sp)
   2f744:	df000415 	stw	fp,16(sp)
   2f748:	df000404 	addi	fp,sp,16
   2f74c:	e13ffe15 	stw	r4,-8(fp)
   2f750:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   2f754:	e0bfff17 	ldw	r2,-4(fp)
   2f758:	10800017 	ldw	r2,0(r2)
   2f75c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   2f760:	e13ffe17 	ldw	r4,-8(fp)
   2f764:	00276e00 	call	276e0 <strlen>
   2f768:	10800044 	addi	r2,r2,1
   2f76c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   2f770:	00000d06 	br	2f7a8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   2f774:	e0bffc17 	ldw	r2,-16(fp)
   2f778:	10800217 	ldw	r2,8(r2)
   2f77c:	e0fffd17 	ldw	r3,-12(fp)
   2f780:	180d883a 	mov	r6,r3
   2f784:	e17ffe17 	ldw	r5,-8(fp)
   2f788:	1009883a 	mov	r4,r2
   2f78c:	002fa540 	call	2fa54 <memcmp>
   2f790:	1000021e 	bne	r2,zero,2f79c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   2f794:	e0bffc17 	ldw	r2,-16(fp)
   2f798:	00000706 	br	2f7b8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   2f79c:	e0bffc17 	ldw	r2,-16(fp)
   2f7a0:	10800017 	ldw	r2,0(r2)
   2f7a4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   2f7a8:	e0fffc17 	ldw	r3,-16(fp)
   2f7ac:	e0bfff17 	ldw	r2,-4(fp)
   2f7b0:	18bff01e 	bne	r3,r2,2f774 <__alt_data_end+0xfffef774>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   2f7b4:	0005883a 	mov	r2,zero
}
   2f7b8:	e037883a 	mov	sp,fp
   2f7bc:	dfc00117 	ldw	ra,4(sp)
   2f7c0:	df000017 	ldw	fp,0(sp)
   2f7c4:	dec00204 	addi	sp,sp,8
   2f7c8:	f800283a 	ret

0002f7cc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   2f7cc:	defffb04 	addi	sp,sp,-20
   2f7d0:	dfc00415 	stw	ra,16(sp)
   2f7d4:	df000315 	stw	fp,12(sp)
   2f7d8:	df000304 	addi	fp,sp,12
   2f7dc:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   2f7e0:	d0a00617 	ldw	r2,-32744(gp)
   2f7e4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   2f7e8:	00003106 	br	2f8b0 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   2f7ec:	e0bffd17 	ldw	r2,-12(fp)
   2f7f0:	10800217 	ldw	r2,8(r2)
   2f7f4:	1009883a 	mov	r4,r2
   2f7f8:	00276e00 	call	276e0 <strlen>
   2f7fc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   2f800:	e0bffd17 	ldw	r2,-12(fp)
   2f804:	10c00217 	ldw	r3,8(r2)
   2f808:	e0bffe17 	ldw	r2,-8(fp)
   2f80c:	10bfffc4 	addi	r2,r2,-1
   2f810:	1885883a 	add	r2,r3,r2
   2f814:	10800003 	ldbu	r2,0(r2)
   2f818:	10803fcc 	andi	r2,r2,255
   2f81c:	1080201c 	xori	r2,r2,128
   2f820:	10bfe004 	addi	r2,r2,-128
   2f824:	10800bd8 	cmpnei	r2,r2,47
   2f828:	1000031e 	bne	r2,zero,2f838 <alt_find_file+0x6c>
    {
      len -= 1;
   2f82c:	e0bffe17 	ldw	r2,-8(fp)
   2f830:	10bfffc4 	addi	r2,r2,-1
   2f834:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   2f838:	e0bffe17 	ldw	r2,-8(fp)
   2f83c:	e0ffff17 	ldw	r3,-4(fp)
   2f840:	1885883a 	add	r2,r3,r2
   2f844:	10800003 	ldbu	r2,0(r2)
   2f848:	10803fcc 	andi	r2,r2,255
   2f84c:	1080201c 	xori	r2,r2,128
   2f850:	10bfe004 	addi	r2,r2,-128
   2f854:	10800be0 	cmpeqi	r2,r2,47
   2f858:	1000081e 	bne	r2,zero,2f87c <alt_find_file+0xb0>
   2f85c:	e0bffe17 	ldw	r2,-8(fp)
   2f860:	e0ffff17 	ldw	r3,-4(fp)
   2f864:	1885883a 	add	r2,r3,r2
   2f868:	10800003 	ldbu	r2,0(r2)
   2f86c:	10803fcc 	andi	r2,r2,255
   2f870:	1080201c 	xori	r2,r2,128
   2f874:	10bfe004 	addi	r2,r2,-128
   2f878:	10000a1e 	bne	r2,zero,2f8a4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   2f87c:	e0bffd17 	ldw	r2,-12(fp)
   2f880:	10800217 	ldw	r2,8(r2)
   2f884:	e0fffe17 	ldw	r3,-8(fp)
   2f888:	180d883a 	mov	r6,r3
   2f88c:	e17fff17 	ldw	r5,-4(fp)
   2f890:	1009883a 	mov	r4,r2
   2f894:	002fa540 	call	2fa54 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   2f898:	1000021e 	bne	r2,zero,2f8a4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   2f89c:	e0bffd17 	ldw	r2,-12(fp)
   2f8a0:	00000706 	br	2f8c0 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   2f8a4:	e0bffd17 	ldw	r2,-12(fp)
   2f8a8:	10800017 	ldw	r2,0(r2)
   2f8ac:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   2f8b0:	e0fffd17 	ldw	r3,-12(fp)
   2f8b4:	d0a00604 	addi	r2,gp,-32744
   2f8b8:	18bfcc1e 	bne	r3,r2,2f7ec <__alt_data_end+0xfffef7ec>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   2f8bc:	0005883a 	mov	r2,zero
}
   2f8c0:	e037883a 	mov	sp,fp
   2f8c4:	dfc00117 	ldw	ra,4(sp)
   2f8c8:	df000017 	ldw	fp,0(sp)
   2f8cc:	dec00204 	addi	sp,sp,8
   2f8d0:	f800283a 	ret

0002f8d4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   2f8d4:	defffc04 	addi	sp,sp,-16
   2f8d8:	df000315 	stw	fp,12(sp)
   2f8dc:	df000304 	addi	fp,sp,12
   2f8e0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   2f8e4:	00bffa04 	movi	r2,-24
   2f8e8:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   2f8ec:	e03ffd15 	stw	zero,-12(fp)
   2f8f0:	00001906 	br	2f958 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   2f8f4:	008000f4 	movhi	r2,3
   2f8f8:	10834804 	addi	r2,r2,3360
   2f8fc:	e0fffd17 	ldw	r3,-12(fp)
   2f900:	18c00324 	muli	r3,r3,12
   2f904:	10c5883a 	add	r2,r2,r3
   2f908:	10800017 	ldw	r2,0(r2)
   2f90c:	10000f1e 	bne	r2,zero,2f94c <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   2f910:	008000f4 	movhi	r2,3
   2f914:	10834804 	addi	r2,r2,3360
   2f918:	e0fffd17 	ldw	r3,-12(fp)
   2f91c:	18c00324 	muli	r3,r3,12
   2f920:	10c5883a 	add	r2,r2,r3
   2f924:	e0ffff17 	ldw	r3,-4(fp)
   2f928:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   2f92c:	d0e00a17 	ldw	r3,-32728(gp)
   2f930:	e0bffd17 	ldw	r2,-12(fp)
   2f934:	1880020e 	bge	r3,r2,2f940 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   2f938:	e0bffd17 	ldw	r2,-12(fp)
   2f93c:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
   2f940:	e0bffd17 	ldw	r2,-12(fp)
   2f944:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   2f948:	00000606 	br	2f964 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   2f94c:	e0bffd17 	ldw	r2,-12(fp)
   2f950:	10800044 	addi	r2,r2,1
   2f954:	e0bffd15 	stw	r2,-12(fp)
   2f958:	e0bffd17 	ldw	r2,-12(fp)
   2f95c:	10800810 	cmplti	r2,r2,32
   2f960:	103fe41e 	bne	r2,zero,2f8f4 <__alt_data_end+0xfffef8f4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   2f964:	e0bffe17 	ldw	r2,-8(fp)
}
   2f968:	e037883a 	mov	sp,fp
   2f96c:	df000017 	ldw	fp,0(sp)
   2f970:	dec00104 	addi	sp,sp,4
   2f974:	f800283a 	ret

0002f978 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   2f978:	defffb04 	addi	sp,sp,-20
   2f97c:	df000415 	stw	fp,16(sp)
   2f980:	df000404 	addi	fp,sp,16
   2f984:	e13ffe15 	stw	r4,-8(fp)
   2f988:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   2f98c:	e0bfff17 	ldw	r2,-4(fp)
   2f990:	00c00074 	movhi	r3,1
   2f994:	1880022e 	bgeu	r3,r2,2f9a0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   2f998:	00800074 	movhi	r2,1
   2f99c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   2f9a0:	e0fffe17 	ldw	r3,-8(fp)
   2f9a4:	e0bfff17 	ldw	r2,-4(fp)
   2f9a8:	1885883a 	add	r2,r3,r2
   2f9ac:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   2f9b0:	e0bffe17 	ldw	r2,-8(fp)
   2f9b4:	e0bffc15 	stw	r2,-16(fp)
   2f9b8:	00000506 	br	2f9d0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   2f9bc:	e0bffc17 	ldw	r2,-16(fp)
   2f9c0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   2f9c4:	e0bffc17 	ldw	r2,-16(fp)
   2f9c8:	10800804 	addi	r2,r2,32
   2f9cc:	e0bffc15 	stw	r2,-16(fp)
   2f9d0:	e0fffc17 	ldw	r3,-16(fp)
   2f9d4:	e0bffd17 	ldw	r2,-12(fp)
   2f9d8:	18bff836 	bltu	r3,r2,2f9bc <__alt_data_end+0xfffef9bc>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   2f9dc:	e0bffe17 	ldw	r2,-8(fp)
   2f9e0:	108007cc 	andi	r2,r2,31
   2f9e4:	10000226 	beq	r2,zero,2f9f0 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   2f9e8:	e0bffc17 	ldw	r2,-16(fp)
   2f9ec:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   2f9f0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   2f9f4:	0001883a 	nop
   2f9f8:	e037883a 	mov	sp,fp
   2f9fc:	df000017 	ldw	fp,0(sp)
   2fa00:	dec00104 	addi	sp,sp,4
   2fa04:	f800283a 	ret

0002fa08 <atexit>:
   2fa08:	200b883a 	mov	r5,r4
   2fa0c:	000f883a 	mov	r7,zero
   2fa10:	000d883a 	mov	r6,zero
   2fa14:	0009883a 	mov	r4,zero
   2fa18:	002fc381 	jmpi	2fc38 <__register_exitproc>

0002fa1c <exit>:
   2fa1c:	defffe04 	addi	sp,sp,-8
   2fa20:	000b883a 	mov	r5,zero
   2fa24:	dc000015 	stw	r16,0(sp)
   2fa28:	dfc00115 	stw	ra,4(sp)
   2fa2c:	2021883a 	mov	r16,r4
   2fa30:	002fd500 	call	2fd50 <__call_exitprocs>
   2fa34:	008000f4 	movhi	r2,3
   2fa38:	1087c004 	addi	r2,r2,7936
   2fa3c:	11000017 	ldw	r4,0(r2)
   2fa40:	20800f17 	ldw	r2,60(r4)
   2fa44:	10000126 	beq	r2,zero,2fa4c <exit+0x30>
   2fa48:	103ee83a 	callr	r2
   2fa4c:	8009883a 	mov	r4,r16
   2fa50:	002fed00 	call	2fed0 <_exit>

0002fa54 <memcmp>:
   2fa54:	01c000c4 	movi	r7,3
   2fa58:	3980192e 	bgeu	r7,r6,2fac0 <memcmp+0x6c>
   2fa5c:	2144b03a 	or	r2,r4,r5
   2fa60:	11c4703a 	and	r2,r2,r7
   2fa64:	10000f26 	beq	r2,zero,2faa4 <memcmp+0x50>
   2fa68:	20800003 	ldbu	r2,0(r4)
   2fa6c:	28c00003 	ldbu	r3,0(r5)
   2fa70:	10c0151e 	bne	r2,r3,2fac8 <memcmp+0x74>
   2fa74:	31bfff84 	addi	r6,r6,-2
   2fa78:	01ffffc4 	movi	r7,-1
   2fa7c:	00000406 	br	2fa90 <memcmp+0x3c>
   2fa80:	20800003 	ldbu	r2,0(r4)
   2fa84:	28c00003 	ldbu	r3,0(r5)
   2fa88:	31bfffc4 	addi	r6,r6,-1
   2fa8c:	10c00e1e 	bne	r2,r3,2fac8 <memcmp+0x74>
   2fa90:	21000044 	addi	r4,r4,1
   2fa94:	29400044 	addi	r5,r5,1
   2fa98:	31fff91e 	bne	r6,r7,2fa80 <__alt_data_end+0xfffefa80>
   2fa9c:	0005883a 	mov	r2,zero
   2faa0:	f800283a 	ret
   2faa4:	20c00017 	ldw	r3,0(r4)
   2faa8:	28800017 	ldw	r2,0(r5)
   2faac:	18bfee1e 	bne	r3,r2,2fa68 <__alt_data_end+0xfffefa68>
   2fab0:	31bfff04 	addi	r6,r6,-4
   2fab4:	21000104 	addi	r4,r4,4
   2fab8:	29400104 	addi	r5,r5,4
   2fabc:	39bff936 	bltu	r7,r6,2faa4 <__alt_data_end+0xfffefaa4>
   2fac0:	303fe91e 	bne	r6,zero,2fa68 <__alt_data_end+0xfffefa68>
   2fac4:	003ff506 	br	2fa9c <__alt_data_end+0xfffefa9c>
   2fac8:	10c5c83a 	sub	r2,r2,r3
   2facc:	f800283a 	ret

0002fad0 <_putc_r>:
   2fad0:	defffc04 	addi	sp,sp,-16
   2fad4:	dc000215 	stw	r16,8(sp)
   2fad8:	dfc00315 	stw	ra,12(sp)
   2fadc:	2021883a 	mov	r16,r4
   2fae0:	20000226 	beq	r4,zero,2faec <_putc_r+0x1c>
   2fae4:	20800e17 	ldw	r2,56(r4)
   2fae8:	10001b26 	beq	r2,zero,2fb58 <_putc_r+0x88>
   2faec:	30800217 	ldw	r2,8(r6)
   2faf0:	10bfffc4 	addi	r2,r2,-1
   2faf4:	30800215 	stw	r2,8(r6)
   2faf8:	10000a16 	blt	r2,zero,2fb24 <_putc_r+0x54>
   2fafc:	30800017 	ldw	r2,0(r6)
   2fb00:	11400005 	stb	r5,0(r2)
   2fb04:	30800017 	ldw	r2,0(r6)
   2fb08:	10c00044 	addi	r3,r2,1
   2fb0c:	30c00015 	stw	r3,0(r6)
   2fb10:	10800003 	ldbu	r2,0(r2)
   2fb14:	dfc00317 	ldw	ra,12(sp)
   2fb18:	dc000217 	ldw	r16,8(sp)
   2fb1c:	dec00404 	addi	sp,sp,16
   2fb20:	f800283a 	ret
   2fb24:	30c00617 	ldw	r3,24(r6)
   2fb28:	10c00616 	blt	r2,r3,2fb44 <_putc_r+0x74>
   2fb2c:	30800017 	ldw	r2,0(r6)
   2fb30:	00c00284 	movi	r3,10
   2fb34:	11400005 	stb	r5,0(r2)
   2fb38:	30800017 	ldw	r2,0(r6)
   2fb3c:	11400003 	ldbu	r5,0(r2)
   2fb40:	28fff11e 	bne	r5,r3,2fb08 <__alt_data_end+0xfffefb08>
   2fb44:	8009883a 	mov	r4,r16
   2fb48:	dfc00317 	ldw	ra,12(sp)
   2fb4c:	dc000217 	ldw	r16,8(sp)
   2fb50:	dec00404 	addi	sp,sp,16
   2fb54:	0029f301 	jmpi	29f30 <__swbuf_r>
   2fb58:	d9400015 	stw	r5,0(sp)
   2fb5c:	d9800115 	stw	r6,4(sp)
   2fb60:	00250000 	call	25000 <__sinit>
   2fb64:	d9800117 	ldw	r6,4(sp)
   2fb68:	d9400017 	ldw	r5,0(sp)
   2fb6c:	003fdf06 	br	2faec <__alt_data_end+0xfffefaec>

0002fb70 <putc>:
   2fb70:	008000f4 	movhi	r2,3
   2fb74:	defffc04 	addi	sp,sp,-16
   2fb78:	1087c104 	addi	r2,r2,7940
   2fb7c:	dc000115 	stw	r16,4(sp)
   2fb80:	14000017 	ldw	r16,0(r2)
   2fb84:	dc400215 	stw	r17,8(sp)
   2fb88:	dfc00315 	stw	ra,12(sp)
   2fb8c:	2023883a 	mov	r17,r4
   2fb90:	80000226 	beq	r16,zero,2fb9c <putc+0x2c>
   2fb94:	80800e17 	ldw	r2,56(r16)
   2fb98:	10001a26 	beq	r2,zero,2fc04 <putc+0x94>
   2fb9c:	28800217 	ldw	r2,8(r5)
   2fba0:	10bfffc4 	addi	r2,r2,-1
   2fba4:	28800215 	stw	r2,8(r5)
   2fba8:	10000b16 	blt	r2,zero,2fbd8 <putc+0x68>
   2fbac:	28800017 	ldw	r2,0(r5)
   2fbb0:	14400005 	stb	r17,0(r2)
   2fbb4:	28800017 	ldw	r2,0(r5)
   2fbb8:	10c00044 	addi	r3,r2,1
   2fbbc:	28c00015 	stw	r3,0(r5)
   2fbc0:	10800003 	ldbu	r2,0(r2)
   2fbc4:	dfc00317 	ldw	ra,12(sp)
   2fbc8:	dc400217 	ldw	r17,8(sp)
   2fbcc:	dc000117 	ldw	r16,4(sp)
   2fbd0:	dec00404 	addi	sp,sp,16
   2fbd4:	f800283a 	ret
   2fbd8:	28c00617 	ldw	r3,24(r5)
   2fbdc:	10c00e16 	blt	r2,r3,2fc18 <putc+0xa8>
   2fbe0:	28800017 	ldw	r2,0(r5)
   2fbe4:	01000284 	movi	r4,10
   2fbe8:	14400005 	stb	r17,0(r2)
   2fbec:	28800017 	ldw	r2,0(r5)
   2fbf0:	10c00003 	ldbu	r3,0(r2)
   2fbf4:	193ff01e 	bne	r3,r4,2fbb8 <__alt_data_end+0xfffefbb8>
   2fbf8:	280d883a 	mov	r6,r5
   2fbfc:	180b883a 	mov	r5,r3
   2fc00:	00000706 	br	2fc20 <putc+0xb0>
   2fc04:	8009883a 	mov	r4,r16
   2fc08:	d9400015 	stw	r5,0(sp)
   2fc0c:	00250000 	call	25000 <__sinit>
   2fc10:	d9400017 	ldw	r5,0(sp)
   2fc14:	003fe106 	br	2fb9c <__alt_data_end+0xfffefb9c>
   2fc18:	280d883a 	mov	r6,r5
   2fc1c:	880b883a 	mov	r5,r17
   2fc20:	8009883a 	mov	r4,r16
   2fc24:	dfc00317 	ldw	ra,12(sp)
   2fc28:	dc400217 	ldw	r17,8(sp)
   2fc2c:	dc000117 	ldw	r16,4(sp)
   2fc30:	dec00404 	addi	sp,sp,16
   2fc34:	0029f301 	jmpi	29f30 <__swbuf_r>

0002fc38 <__register_exitproc>:
   2fc38:	defffa04 	addi	sp,sp,-24
   2fc3c:	dc000315 	stw	r16,12(sp)
   2fc40:	040000f4 	movhi	r16,3
   2fc44:	8407c004 	addi	r16,r16,7936
   2fc48:	80c00017 	ldw	r3,0(r16)
   2fc4c:	dc400415 	stw	r17,16(sp)
   2fc50:	dfc00515 	stw	ra,20(sp)
   2fc54:	18805217 	ldw	r2,328(r3)
   2fc58:	2023883a 	mov	r17,r4
   2fc5c:	10003726 	beq	r2,zero,2fd3c <__register_exitproc+0x104>
   2fc60:	10c00117 	ldw	r3,4(r2)
   2fc64:	010007c4 	movi	r4,31
   2fc68:	20c00e16 	blt	r4,r3,2fca4 <__register_exitproc+0x6c>
   2fc6c:	1a000044 	addi	r8,r3,1
   2fc70:	8800221e 	bne	r17,zero,2fcfc <__register_exitproc+0xc4>
   2fc74:	18c00084 	addi	r3,r3,2
   2fc78:	18c7883a 	add	r3,r3,r3
   2fc7c:	18c7883a 	add	r3,r3,r3
   2fc80:	12000115 	stw	r8,4(r2)
   2fc84:	10c7883a 	add	r3,r2,r3
   2fc88:	19400015 	stw	r5,0(r3)
   2fc8c:	0005883a 	mov	r2,zero
   2fc90:	dfc00517 	ldw	ra,20(sp)
   2fc94:	dc400417 	ldw	r17,16(sp)
   2fc98:	dc000317 	ldw	r16,12(sp)
   2fc9c:	dec00604 	addi	sp,sp,24
   2fca0:	f800283a 	ret
   2fca4:	00800034 	movhi	r2,0
   2fca8:	10800004 	addi	r2,r2,0
   2fcac:	10002626 	beq	r2,zero,2fd48 <__register_exitproc+0x110>
   2fcb0:	01006404 	movi	r4,400
   2fcb4:	d9400015 	stw	r5,0(sp)
   2fcb8:	d9800115 	stw	r6,4(sp)
   2fcbc:	d9c00215 	stw	r7,8(sp)
   2fcc0:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>
   2fcc4:	d9400017 	ldw	r5,0(sp)
   2fcc8:	d9800117 	ldw	r6,4(sp)
   2fccc:	d9c00217 	ldw	r7,8(sp)
   2fcd0:	10001d26 	beq	r2,zero,2fd48 <__register_exitproc+0x110>
   2fcd4:	81000017 	ldw	r4,0(r16)
   2fcd8:	10000115 	stw	zero,4(r2)
   2fcdc:	02000044 	movi	r8,1
   2fce0:	22405217 	ldw	r9,328(r4)
   2fce4:	0007883a 	mov	r3,zero
   2fce8:	12400015 	stw	r9,0(r2)
   2fcec:	20805215 	stw	r2,328(r4)
   2fcf0:	10006215 	stw	zero,392(r2)
   2fcf4:	10006315 	stw	zero,396(r2)
   2fcf8:	883fde26 	beq	r17,zero,2fc74 <__alt_data_end+0xfffefc74>
   2fcfc:	18c9883a 	add	r4,r3,r3
   2fd00:	2109883a 	add	r4,r4,r4
   2fd04:	1109883a 	add	r4,r2,r4
   2fd08:	21802215 	stw	r6,136(r4)
   2fd0c:	01800044 	movi	r6,1
   2fd10:	12406217 	ldw	r9,392(r2)
   2fd14:	30cc983a 	sll	r6,r6,r3
   2fd18:	4992b03a 	or	r9,r9,r6
   2fd1c:	12406215 	stw	r9,392(r2)
   2fd20:	21c04215 	stw	r7,264(r4)
   2fd24:	01000084 	movi	r4,2
   2fd28:	893fd21e 	bne	r17,r4,2fc74 <__alt_data_end+0xfffefc74>
   2fd2c:	11006317 	ldw	r4,396(r2)
   2fd30:	218cb03a 	or	r6,r4,r6
   2fd34:	11806315 	stw	r6,396(r2)
   2fd38:	003fce06 	br	2fc74 <__alt_data_end+0xfffefc74>
   2fd3c:	18805304 	addi	r2,r3,332
   2fd40:	18805215 	stw	r2,328(r3)
   2fd44:	003fc606 	br	2fc60 <__alt_data_end+0xfffefc60>
   2fd48:	00bfffc4 	movi	r2,-1
   2fd4c:	003fd006 	br	2fc90 <__alt_data_end+0xfffefc90>

0002fd50 <__call_exitprocs>:
   2fd50:	defff504 	addi	sp,sp,-44
   2fd54:	df000915 	stw	fp,36(sp)
   2fd58:	dd400615 	stw	r21,24(sp)
   2fd5c:	dc800315 	stw	r18,12(sp)
   2fd60:	dfc00a15 	stw	ra,40(sp)
   2fd64:	ddc00815 	stw	r23,32(sp)
   2fd68:	dd800715 	stw	r22,28(sp)
   2fd6c:	dd000515 	stw	r20,20(sp)
   2fd70:	dcc00415 	stw	r19,16(sp)
   2fd74:	dc400215 	stw	r17,8(sp)
   2fd78:	dc000115 	stw	r16,4(sp)
   2fd7c:	d9000015 	stw	r4,0(sp)
   2fd80:	2839883a 	mov	fp,r5
   2fd84:	04800044 	movi	r18,1
   2fd88:	057fffc4 	movi	r21,-1
   2fd8c:	008000f4 	movhi	r2,3
   2fd90:	1087c004 	addi	r2,r2,7936
   2fd94:	12000017 	ldw	r8,0(r2)
   2fd98:	45005217 	ldw	r20,328(r8)
   2fd9c:	44c05204 	addi	r19,r8,328
   2fda0:	a0001c26 	beq	r20,zero,2fe14 <__call_exitprocs+0xc4>
   2fda4:	a0800117 	ldw	r2,4(r20)
   2fda8:	15ffffc4 	addi	r23,r2,-1
   2fdac:	b8000d16 	blt	r23,zero,2fde4 <__call_exitprocs+0x94>
   2fdb0:	14000044 	addi	r16,r2,1
   2fdb4:	8421883a 	add	r16,r16,r16
   2fdb8:	8421883a 	add	r16,r16,r16
   2fdbc:	84402004 	addi	r17,r16,128
   2fdc0:	a463883a 	add	r17,r20,r17
   2fdc4:	a421883a 	add	r16,r20,r16
   2fdc8:	e0001e26 	beq	fp,zero,2fe44 <__call_exitprocs+0xf4>
   2fdcc:	80804017 	ldw	r2,256(r16)
   2fdd0:	e0801c26 	beq	fp,r2,2fe44 <__call_exitprocs+0xf4>
   2fdd4:	bdffffc4 	addi	r23,r23,-1
   2fdd8:	843fff04 	addi	r16,r16,-4
   2fddc:	8c7fff04 	addi	r17,r17,-4
   2fde0:	bd7ff91e 	bne	r23,r21,2fdc8 <__alt_data_end+0xfffefdc8>
   2fde4:	00800034 	movhi	r2,0
   2fde8:	10800004 	addi	r2,r2,0
   2fdec:	10000926 	beq	r2,zero,2fe14 <__call_exitprocs+0xc4>
   2fdf0:	a0800117 	ldw	r2,4(r20)
   2fdf4:	1000301e 	bne	r2,zero,2feb8 <__call_exitprocs+0x168>
   2fdf8:	a0800017 	ldw	r2,0(r20)
   2fdfc:	10003226 	beq	r2,zero,2fec8 <__call_exitprocs+0x178>
   2fe00:	a009883a 	mov	r4,r20
   2fe04:	98800015 	stw	r2,0(r19)
   2fe08:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>
   2fe0c:	9d000017 	ldw	r20,0(r19)
   2fe10:	a03fe41e 	bne	r20,zero,2fda4 <__alt_data_end+0xfffefda4>
   2fe14:	dfc00a17 	ldw	ra,40(sp)
   2fe18:	df000917 	ldw	fp,36(sp)
   2fe1c:	ddc00817 	ldw	r23,32(sp)
   2fe20:	dd800717 	ldw	r22,28(sp)
   2fe24:	dd400617 	ldw	r21,24(sp)
   2fe28:	dd000517 	ldw	r20,20(sp)
   2fe2c:	dcc00417 	ldw	r19,16(sp)
   2fe30:	dc800317 	ldw	r18,12(sp)
   2fe34:	dc400217 	ldw	r17,8(sp)
   2fe38:	dc000117 	ldw	r16,4(sp)
   2fe3c:	dec00b04 	addi	sp,sp,44
   2fe40:	f800283a 	ret
   2fe44:	a0800117 	ldw	r2,4(r20)
   2fe48:	80c00017 	ldw	r3,0(r16)
   2fe4c:	10bfffc4 	addi	r2,r2,-1
   2fe50:	15c01426 	beq	r2,r23,2fea4 <__call_exitprocs+0x154>
   2fe54:	80000015 	stw	zero,0(r16)
   2fe58:	183fde26 	beq	r3,zero,2fdd4 <__alt_data_end+0xfffefdd4>
   2fe5c:	95c8983a 	sll	r4,r18,r23
   2fe60:	a0806217 	ldw	r2,392(r20)
   2fe64:	a5800117 	ldw	r22,4(r20)
   2fe68:	2084703a 	and	r2,r4,r2
   2fe6c:	10000b26 	beq	r2,zero,2fe9c <__call_exitprocs+0x14c>
   2fe70:	a0806317 	ldw	r2,396(r20)
   2fe74:	2088703a 	and	r4,r4,r2
   2fe78:	20000c1e 	bne	r4,zero,2feac <__call_exitprocs+0x15c>
   2fe7c:	89400017 	ldw	r5,0(r17)
   2fe80:	d9000017 	ldw	r4,0(sp)
   2fe84:	183ee83a 	callr	r3
   2fe88:	a0800117 	ldw	r2,4(r20)
   2fe8c:	15bfbf1e 	bne	r2,r22,2fd8c <__alt_data_end+0xfffefd8c>
   2fe90:	98800017 	ldw	r2,0(r19)
   2fe94:	153fcf26 	beq	r2,r20,2fdd4 <__alt_data_end+0xfffefdd4>
   2fe98:	003fbc06 	br	2fd8c <__alt_data_end+0xfffefd8c>
   2fe9c:	183ee83a 	callr	r3
   2fea0:	003ff906 	br	2fe88 <__alt_data_end+0xfffefe88>
   2fea4:	a5c00115 	stw	r23,4(r20)
   2fea8:	003feb06 	br	2fe58 <__alt_data_end+0xfffefe58>
   2feac:	89000017 	ldw	r4,0(r17)
   2feb0:	183ee83a 	callr	r3
   2feb4:	003ff406 	br	2fe88 <__alt_data_end+0xfffefe88>
   2feb8:	a0800017 	ldw	r2,0(r20)
   2febc:	a027883a 	mov	r19,r20
   2fec0:	1029883a 	mov	r20,r2
   2fec4:	003fb606 	br	2fda0 <__alt_data_end+0xfffefda0>
   2fec8:	0005883a 	mov	r2,zero
   2fecc:	003ffb06 	br	2febc <__alt_data_end+0xfffefebc>

0002fed0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   2fed0:	defffd04 	addi	sp,sp,-12
   2fed4:	df000215 	stw	fp,8(sp)
   2fed8:	df000204 	addi	fp,sp,8
   2fedc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   2fee0:	0001883a 	nop
   2fee4:	e0bfff17 	ldw	r2,-4(fp)
   2fee8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   2feec:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   2fef0:	10000226 	beq	r2,zero,2fefc <_exit+0x2c>
    ALT_SIM_FAIL();
   2fef4:	002af070 	cmpltui	zero,zero,43969
   2fef8:	00000106 	br	2ff00 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   2fefc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   2ff00:	003fff06 	br	2ff00 <__alt_data_end+0xfffeff00>

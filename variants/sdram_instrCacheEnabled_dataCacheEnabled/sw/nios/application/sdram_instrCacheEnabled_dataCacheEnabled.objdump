
sdram_instrCacheEnabled_dataCacheEnabled.elf:     file format elf32-littlenios2
sdram_instrCacheEnabled_dataCacheEnabled.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000234

Program Header:
    LOAD off    0x00001020 vaddr 0x04020020 paddr 0x00000000 align 2**12
         filesz 0x00000234 memsz 0x00000234 flags r-x
    LOAD off    0x00002234 vaddr 0x00000234 paddr 0x00000234 align 2**12
         filesz 0x00010200 memsz 0x00010200 flags r-x
    LOAD off    0x00012434 vaddr 0x00010434 paddr 0x00011f20 align 2**12
         filesz 0x00001aec memsz 0x00001aec flags rw-
    LOAD off    0x00014a0c vaddr 0x00013a0c paddr 0x00013a0c align 2**12
         filesz 0x00000000 memsz 0x0000016c flags rw-
    LOAD off    0x00014000 vaddr 0x04020000 paddr 0x04020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04020000  04020000  00014000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000234  04020020  00000000  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000fcb0  00000234  00000234  00002234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000550  0000fee4  0000fee4  00011ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001aec  00010434  00011f20  00012434  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000016c  00013a0c  00013a0c  00014a0c  2**2
                  ALLOC, SMALL_DATA
  6 .new_sdram_controller_0 00000000  00013b78  00013b78  00014020  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  04020254  04020254  00014020  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00014020  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000ef8  00000000  00000000  00014048  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   000240fe  00000000  00000000  00014f40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000929a  00000000  00000000  0003903e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b6e3  00000000  00000000  000422d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000022d8  00000000  00000000  0004d9bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000394e  00000000  00000000  0004fc94  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00017975  00000000  00000000  000535e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000030  00000000  00000000  0006af58  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000018d8  00000000  00000000  0006af88  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0006fbda  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0006fbdd  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0006fbe9  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0006fbea  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   0000000b  00000000  00000000  0006fbeb  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    0000000b  00000000  00000000  0006fbf6  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   0000000b  00000000  00000000  0006fc01  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000a  00000000  00000000  0006fc0c  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000044  00000000  00000000  0006fc16  2**0
                  CONTENTS, READONLY
 27 .jdi          0000597d  00000000  00000000  0006fc5a  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00066bed  00000000  00000000  000755d7  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04020000 l    d  .entry	00000000 .entry
04020020 l    d  .exceptions	00000000 .exceptions
00000234 l    d  .text	00000000 .text
0000fee4 l    d  .rodata	00000000 .rodata
00010434 l    d  .rwdata	00000000 .rwdata
00013a0c l    d  .bss	00000000 .bss
00013b78 l    d  .new_sdram_controller_0	00000000 .new_sdram_controller_0
04020254 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/RTES/variants/sdram_instrCacheEnabled_dataCacheEnabled/sw/nios/sdram_instrCacheEnabled_dataCacheEnabled_bsp//obj/HAL/src/crt0.o
0000027c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
0001017a l     O .rodata	00000010 zeroes.4404
00002f50 l     F .text	000000bc __sbprintf
0001018a l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
00003160 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
00004c90 l     F .text	00000008 __fp_unlock
00004ca4 l     F .text	0000019c __sinit.part.1
00004e40 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
00010434 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
00010878 l     O .rwdata	00000020 lc_ctype_charset
00010858 l     O .rwdata	00000020 lc_message_charset
00010898 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
000101bc l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00007758 l     F .text	000000fc __sprint_r.part.0
000102f0 l     O .rodata	00000010 blanks.4348
000102e0 l     O .rodata	00000010 zeroes.4349
00008ce4 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0000d368 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0000d474 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0000d4a0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0000d82c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0000d90c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0000d9f8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_read.c
0000de34 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00011f14 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
0000e080 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0000e1b4 l     F .text	00000034 alt_dev_reg
00010e80 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0000e4a4 l     F .text	0000020c altera_avalon_jtag_uart_irq
0000e6b0 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000ece8 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0000ef50 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0000f1c0 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0000f300 l     F .text	0000003c alt_get_errno
0000f33c l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00013a44 g     O .bss	00000004 alt_instruction_exception_handler
00000a20 g     F .text	00000034 latency_isr_parport
00007268 g     F .text	00000074 _mprec_log10
00007354 g     F .text	0000008c __any_on
0000973c g     F .text	00000054 _isatty_r
000101c8 g     O .rodata	00000028 __mprec_tinytens
0000db08 g     F .text	0000007c alt_main
00013a78 g     O .bss	00000100 alt_irq
00009790 g     F .text	00000060 _lseek_r
00011f20 g       *ABS*	00000000 __flash_rwdata_start
0000be94 g     F .text	00000088 .hidden __eqdf2
00013b78 g       *ABS*	00000000 __alt_heap_start
00000d00 g     F .text	0000003c printf
0000a068 g     F .text	0000009c _wcrtomb_r
00007580 g     F .text	0000005c __sseek
00004fe0 g     F .text	00000010 __sinit
00009f10 g     F .text	00000140 __swbuf_r
000055ec g     F .text	0000007c _setlocale_r
00004e48 g     F .text	00000068 __sfmoreglue
0000dba8 g     F .text	00000024 __malloc_unlock
000097f0 g     F .text	0000015c memmove
00000280 g     F .text	00000058 test_parallel_port
00004fc8 g     F .text	00000018 _cleanup
000063e4 g     F .text	000000a8 _Balloc
00013a0c g     O .bss	00000004 snaph
0000bf1c g     F .text	000000dc .hidden __gtdf2
0000f6f8 g     F .text	00000024 altera_nios2_gen2_irq_init
04020000 g     F .entry	0000001c __reset
00000000 g       *ABS*	00000000 __flash_exceptions_start
00009224 g     F .text	0000005c _fstat_r
00013a30 g     O .bss	00000004 errno
000074fc g     F .text	00000008 __seofread
00013a3c g     O .bss	00000004 alt_argv
00019ee0 g       *ABS*	00000000 _gp
00010d00 g     O .rwdata	00000180 alt_fd_list
0000f71c g     F .text	00000090 alt_find_dev
00006174 g     F .text	00000148 memcpy
00004c98 g     F .text	0000000c _cleanup_r
0000d180 g     F .text	000000dc .hidden __floatsidf
0000f284 g     F .text	0000007c alt_io_redirect
0000bff8 g     F .text	000000f4 .hidden __ltdf2
0000fee4 g       *ABS*	00000000 __DTOR_END__
0000f124 g     F .text	0000009c alt_exception_cause_generated_bad_addr
000073e0 g     F .text	00000074 __fpclassifyd
000071c4 g     F .text	000000a4 __ratio
00008cc8 g     F .text	0000001c __vfiprintf_internal
0000e8a8 g     F .text	0000021c altera_avalon_jtag_uart_read
00000cd0 g     F .text	00000030 _printf_r
04020000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00000c14 g     F .text	00000064 .hidden __udivsi3
0000d868 g     F .text	000000a4 isatty
00010218 g     O .rodata	000000c8 __mprec_tens
00005668 g     F .text	0000000c __locale_charset
0000f958 g     F .text	00000090 alt_icache_flush
00013a2c g     O .bss	00000004 __malloc_top_pad
00013a10 g     O .bss	00000004 flag
00011ee8 g     O .rwdata	00000004 __mb_cur_max
00005698 g     F .text	0000000c _localeconv_r
00009280 g     F .text	000004bc __sfvwrite_r
000067f0 g     F .text	0000003c __i2b
00007454 g     F .text	00000054 _sbrk_r
0000994c g     F .text	00000060 _read_r
00011f08 g     O .rwdata	00000004 alt_max_fd
00008f18 g     F .text	000000f0 _fclose_r
00004c60 g     F .text	00000030 fflush
00013a28 g     O .bss	00000004 __malloc_max_sbrked_mem
0000ad00 g     F .text	000008ac .hidden __adddf3
00006f6c g     F .text	0000010c __b2d
0000a7c8 g     F .text	00000538 .hidden __umoddi3
0000da34 g     F .text	000000d4 lseek
00011ee0 g     O .rwdata	00000004 _global_impure_ptr
000099ac g     F .text	00000564 _realloc_r
00013b78 g       *ABS*	00000000 __bss_end
0000d73c g     F .text	000000f0 alt_iic_isr_register
0000f5f0 g     F .text	00000108 alt_tick
0000a250 g     F .text	00000578 .hidden __udivdi3
00009180 g     F .text	00000024 _fputwc_r
000101f0 g     O .rodata	00000028 __mprec_bigtens
000065d4 g     F .text	00000104 __s2b
0000d25c g     F .text	000000a8 .hidden __floatunsidf
00006cac g     F .text	00000060 __mcmp
00005000 g     F .text	00000018 __fp_lock_all
0000d6f0 g     F .text	0000004c alt_ic_irq_enabled
0000f554 g     F .text	0000009c alt_alarm_stop
00000974 g     F .text	000000ac test_recovtime_parport
00013a34 g     O .bss	00000004 alt_irq_active
040200fc g     F .exceptions	000000e4 alt_irq_handler
00010cd8 g     O .rwdata	00000028 alt_dev_null
0000ef08 g     F .text	00000048 alt_dcache_flush_all
000066d8 g     F .text	00000068 __hi0bits
0000d100 g     F .text	00000080 .hidden __fixdfsi
00011f20 g       *ABS*	00000000 __ram_rwdata_end
00011f00 g     O .rwdata	00000008 alt_dev_list
0000e0bc g     F .text	000000f8 write
0000fab0 g     F .text	000000a0 _putc_r
00010434 g       *ABS*	00000000 __ram_rodata_end
0000d4dc g     F .text	000000b0 fstat
0000bff8 g     F .text	000000f4 .hidden __ledf2
00006a24 g     F .text	00000140 __pow5mult
0000786c g     F .text	0000145c ___vfiprintf_internal_r
00013a20 g     O .bss	00000004 __nlocale_changed
00000c78 g     F .text	00000058 .hidden __umodsi3
00013b78 g       *ABS*	00000000 end
0000e3e4 g     F .text	000000c0 altera_avalon_jtag_uart_init
040201e0 g     F .exceptions	00000074 alt_instruction_exception_entry
0000fee4 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
0000ed60 g     F .text	0000007c alt_avalon_timer_sc_init
0000d304 g     F .text	00000064 .hidden __clzsi2
0000eac4 g     F .text	00000224 altera_avalon_jtag_uart_write
000007e8 g     F .text	0000018c test_recovtime_print
00004ff0 g     F .text	00000004 __sfp_lock_acquire
00006090 g     F .text	000000e4 memchr
00000d3c g     F .text	000021f8 ___vfprintf_internal_r
00005154 g     F .text	00000310 _free_r
0000dbcc g     F .text	0000022c alt_printf
00005674 g     F .text	00000010 __locale_mb_cur_max
0000fd30 g     F .text	00000180 __call_exitprocs
00013a1c g     O .bss	00000004 __mlocale_changed
00011eec g     O .rwdata	00000004 __malloc_sbrk_base
00000234 g     F .text	0000004c _start
00013a48 g     O .bss	00000004 _alt_tick_rate
00000508 g     F .text	00000044 resp_isr_parport
00006b64 g     F .text	00000148 __lshift
00013a4c g     O .bss	00000004 _alt_nticks
0000de70 g     F .text	000000fc read
0000e220 g     F .text	00000060 alt_sys_init
0000fc18 g     F .text	00000118 __register_exitproc
00000a54 g     F .text	0000009c test_latency_parport
0000682c g     F .text	000001f8 __multiply
0000e750 g     F .text	00000068 altera_avalon_jtag_uart_close
00010434 g       *ABS*	00000000 __ram_rwdata_start
0000fee4 g       *ABS*	00000000 __ram_rodata_start
00013a50 g     O .bss	00000028 __malloc_current_mallinfo
00007078 g     F .text	0000014c __d2b
0000e280 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000f8b4 g     F .text	000000a4 alt_get_fd
00008e00 g     F .text	00000054 _close_r
0000fa34 g     F .text	0000007c memcmp
0000e340 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
00013b78 g       *ABS*	00000000 __alt_stack_base
0000e390 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0000300c g     F .text	00000154 __swsetup_r
0000b5ac g     F .text	000008e8 .hidden __divdf3
00004eb0 g     F .text	00000118 __sfp
000072dc g     F .text	00000078 __copybits
000108d0 g     O .rwdata	00000408 __malloc_av_
00004ffc g     F .text	00000004 __sinit_lock_release
0000c0ec g     F .text	00000718 .hidden __muldf3
000074a8 g     F .text	00000054 __sread
0000f7ac g     F .text	00000108 alt_find_file
0000ef8c g     F .text	000000a4 alt_dev_llist_insert
0000db84 g     F .text	00000024 __malloc_lock
0000dfd0 g     F .text	000000b0 sbrk
00004c04 g     F .text	0000005c _fflush_r
00008e54 g     F .text	000000c4 _calloc_r
00013a0c g       *ABS*	00000000 __bss_start
000062bc g     F .text	00000128 memset
00000af0 g     F .text	0000002c main
00013a40 g     O .bss	00000004 alt_envp
000002d8 g     F .text	000001a4 test_counter
00013a24 g     O .bss	00000004 __malloc_max_total_mem
0000e2e0 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000a050 g     F .text	00000018 __swbuf
00013a14 g     O .bss	00000004 snapl
000075dc g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
00009008 g     F .text	00000014 fclose
00003360 g     F .text	00001688 _dtoa_r
00005884 g     F .text	0000080c _malloc_r
0000a1c4 g     F .text	00000030 __ascii_wctomb
00011f0c g     O .rwdata	00000004 alt_errno
00005464 g     F .text	000000c4 _fwalk
0000fb50 g     F .text	000000c8 putc
00000b1c g     F .text	00000084 .hidden __divsi3
00005030 g     F .text	00000124 _malloc_trim_r
0000fee4 g       *ABS*	00000000 __CTOR_END__
000075e4 g     F .text	000000dc strcmp
0000fee4 g       *ABS*	00000000 __flash_rodata_start
0000fee4 g       *ABS*	00000000 __DTOR_LIST__
0000be94 g     F .text	00000088 .hidden __nedf2
0000e1e8 g     F .text	00000038 alt_irq_init
0000df6c g     F .text	00000064 alt_release_fd
00010300 g     O .rodata	00000100 .hidden __clz_tab
00013a18 g     O .bss	00000004 _PathLocale
0000f9e8 g     F .text	00000014 atexit
00008da0 g     F .text	00000060 _write_r
000056a4 g     F .text	00000018 setlocale
00011ee4 g     O .rwdata	00000004 _impure_ptr
00013a38 g     O .bss	00000004 alt_argc
000049e8 g     F .text	0000021c __sflush_r
0000f090 g     F .text	00000060 _do_dtors
00005690 g     F .text	00000008 __locale_cjk_lang
0000054c g     F .text	00000158 test_resptime_print
04020020 g       .exceptions	00000000 alt_irq_entry
00006f08 g     F .text	00000064 __ulp
00005018 g     F .text	00000018 __fp_unlock_all
000006a4 g     F .text	0000009c test_resptime_parport
00011ef8 g     O .rwdata	00000008 alt_fs_list
04020020 g       *ABS*	00000000 __ram_exceptions_start
000056bc g     F .text	0000000c localeconv
00000000 g       *ABS*	00000000 __alt_mem_new_sdram_controller_0
0000d58c g     F .text	00000050 alt_ic_isr_register
00011f20 g       *ABS*	00000000 _edata
00013b78 g       *ABS*	00000000 _end
0000901c g     F .text	00000164 __fputwc
04020254 g       *ABS*	00000000 __ram_exceptions_end
0000e7b8 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0000d664 g     F .text	0000008c alt_ic_irq_disable
00007504 g     F .text	0000007c __swrite
00011ef0 g     O .rwdata	00000004 __malloc_trim_threshold
00005684 g     F .text	0000000c __locale_msgcharset
00000794 g     F .text	00000054 recov_isr_parport
0000f9fc g     F .text	00000038 exit
00005528 g     F .text	000000c4 _fwalk_reent
00006d0c g     F .text	000001fc __mdiff
00000ba0 g     F .text	00000074 .hidden __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
04020020 g     F .exceptions	00000000 alt_exception
00004ff4 g     F .text	00000004 __sfp_lock_release
0000feb0 g     F .text	00000034 _exit
0000eddc g     F .text	0000012c alt_alarm_start
000056c8 g     F .text	000001bc __smakebuf_r
000076c0 g     F .text	00000098 strlen
0000047c g     F .text	0000008c resp_isr_print
0000f400 g     F .text	00000154 open
00000740 g     F .text	00000054 recov_isr_print
0000bf1c g     F .text	000000dc .hidden __gedf2
0000ddf8 g     F .text	0000003c alt_putchar
00011ef4 g     O .rwdata	00000004 __wctomb
00007854 g     F .text	00000018 __sprint_r
0000f0f0 g     F .text	00000034 alt_icache_flush_all
00011f10 g     O .rwdata	00000004 alt_priority_mask
0000d5dc g     F .text	00000088 alt_ic_irq_enable
00002f34 g     F .text	0000001c __vfprintf_internal
0000a1f4 g     F .text	0000005c _wctomb_r
0000c804 g     F .text	000008fc .hidden __subdf3
00006740 g     F .text	000000b0 __lo0bits
00011f18 g     O .rwdata	00000008 alt_alarm_list
0000f030 g     F .text	00000060 _do_ctors
0000a104 g     F .text	000000c0 wcrtomb
0000d3a4 g     F .text	000000d0 close
0000d974 g     F .text	00000084 alt_load
000091a4 g     F .text	00000080 fputwc
00004ff8 g     F .text	00000004 __sinit_lock_acquire
000064b4 g     F .text	00000120 __multadd
0000648c g     F .text	00000028 _Bfree



Disassembly of section .entry:

04020000 <__reset>:
 */

#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
 4020000:	00800074 	movhi	r2,1
#else
    movui r2, NIOS2_ICACHE_SIZE
#endif

0:
    initi r2
 4020004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 4020008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 402000c:	00bffd16 	blt	zero,r2,4020004 <__ram_exceptions_end+0xfffffdb0>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4020010:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
 4020014:	08408d14 	ori	at,at,564
    jmp r1
 4020018:	0800683a 	jmp	at
 402001c:	00000000 	call	0 <__alt_mem_new_sdram_controller_0>

Disassembly of section .exceptions:

04020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4020020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4020024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4020028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 402002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4020030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4020034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4020038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 402003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4020040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4020044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4020048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 402004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4020050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4020054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4020058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 402005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4020060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4020064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4020068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 402006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4020070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4020074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4020078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 402007c:	10000326 	beq	r2,zero,402008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4020080:	20000226 	beq	r4,zero,402008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4020084:	40200fc0 	call	40200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4020088:	00000706 	br	40200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 402008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4020090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4020094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4020098:	40201e00 	call	40201e0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 402009c:	1000021e 	bne	r2,zero,40200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40200f8:	ef80083a 	eret

040200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40200fc:	defff904 	addi	sp,sp,-28
 4020100:	dfc00615 	stw	ra,24(sp)
 4020104:	df000515 	stw	fp,20(sp)
 4020108:	df000504 	addi	fp,sp,20
IOWR_32DIRECT(PARALLELPORT_0_BASE, 0, 0x0);
 402010c:	0007883a 	mov	r3,zero
 4020110:	00810134 	movhi	r2,1028
 4020114:	10841004 	addi	r2,r2,4160
 4020118:	10c00035 	stwio	r3,0(r2)
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 402011c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4020120:	0005313a 	rdctl	r2,ipending
 4020124:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4020128:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 402012c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4020130:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4020134:	00800044 	movi	r2,1
 4020138:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 402013c:	e0fffb17 	ldw	r3,-20(fp)
 4020140:	e0bffc17 	ldw	r2,-16(fp)
 4020144:	1884703a 	and	r2,r3,r2
 4020148:	10001426 	beq	r2,zero,402019c <alt_irq_handler+0xa0>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 402014c:	00800074 	movhi	r2,1
 4020150:	108e9e04 	addi	r2,r2,14968
 4020154:	e0fffd17 	ldw	r3,-12(fp)
 4020158:	180690fa 	slli	r3,r3,3
 402015c:	10c5883a 	add	r2,r2,r3
 4020160:	10c00017 	ldw	r3,0(r2)
 4020164:	00800074 	movhi	r2,1
 4020168:	108e9e04 	addi	r2,r2,14968
 402016c:	e13ffd17 	ldw	r4,-12(fp)
 4020170:	200890fa 	slli	r4,r4,3
 4020174:	1105883a 	add	r2,r2,r4
 4020178:	10800104 	addi	r2,r2,4
 402017c:	10800017 	ldw	r2,0(r2)
 4020180:	1009883a 	mov	r4,r2
 4020184:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4020188:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 402018c:	0005313a 	rdctl	r2,ipending
 4020190:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4020194:	e0bfff17 	ldw	r2,-4(fp)
 4020198:	00000706 	br	40201b8 <alt_irq_handler+0xbc>
      }
      mask <<= 1;
 402019c:	e0bffc17 	ldw	r2,-16(fp)
 40201a0:	1085883a 	add	r2,r2,r2
 40201a4:	e0bffc15 	stw	r2,-16(fp)
      i++;
 40201a8:	e0bffd17 	ldw	r2,-12(fp)
 40201ac:	10800044 	addi	r2,r2,1
 40201b0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40201b4:	003fe106 	br	402013c <__ram_exceptions_end+0xfffffee8>

    active = alt_irq_pending ();
 40201b8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 40201bc:	e0bffb17 	ldw	r2,-20(fp)
 40201c0:	103fdb1e 	bne	r2,zero,4020130 <__ram_exceptions_end+0xfffffedc>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40201c4:	0001883a 	nop
}
 40201c8:	0001883a 	nop
 40201cc:	e037883a 	mov	sp,fp
 40201d0:	dfc00117 	ldw	ra,4(sp)
 40201d4:	df000017 	ldw	fp,0(sp)
 40201d8:	dec00204 	addi	sp,sp,8
 40201dc:	f800283a 	ret

040201e0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 40201e0:	defffb04 	addi	sp,sp,-20
 40201e4:	dfc00415 	stw	ra,16(sp)
 40201e8:	df000315 	stw	fp,12(sp)
 40201ec:	df000304 	addi	fp,sp,12
 40201f0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 40201f4:	000531fa 	rdctl	r2,exception
 40201f8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 40201fc:	e0bffd17 	ldw	r2,-12(fp)
 4020200:	10801f0c 	andi	r2,r2,124
 4020204:	1004d0ba 	srli	r2,r2,2
 4020208:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 402020c:	0005333a 	rdctl	r2,badaddr
 4020210:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 4020214:	d0a6d917 	ldw	r2,-25756(gp)
 4020218:	10000726 	beq	r2,zero,4020238 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 402021c:	d0a6d917 	ldw	r2,-25756(gp)
 4020220:	e0fffd17 	ldw	r3,-12(fp)
 4020224:	e1bffe17 	ldw	r6,-8(fp)
 4020228:	e17fff17 	ldw	r5,-4(fp)
 402022c:	1809883a 	mov	r4,r3
 4020230:	103ee83a 	callr	r2
 4020234:	00000206 	br	4020240 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4020238:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 402023c:	0005883a 	mov	r2,zero
}
 4020240:	e037883a 	mov	sp,fp
 4020244:	dfc00117 	ldw	ra,4(sp)
 4020248:	df000017 	ldw	fp,0(sp)
 402024c:	dec00204 	addi	sp,sp,8
 4020250:	f800283a 	ret

Disassembly of section .text:

00000234 <_start>:

#if NIOS2_DCACHE_SIZE > 0 && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
     234:	00800074 	movhi	r2,1
#else
    movui r2, NIOS2_DCACHE_SIZE
#endif

0:
    initd 0(r2)
     238:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
     23c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
     240:	00bffd16 	blt	zero,r2,238 <__ram_exceptions_end+0xfbfdffe4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
     244:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
     248:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
     24c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
     250:	d6a7b814 	ori	gp,gp,40672
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
     254:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
     258:	108e8314 	ori	r2,r2,14860

    movhi r3, %hi(__bss_end)
     25c:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
     260:	18cede14 	ori	r3,r3,15224

    beq r2, r3, 1f
     264:	10c00326 	beq	r2,r3,274 <_start+0x40>

0:
    stw zero, (r2)
     268:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
     26c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
     270:	10fffd36 	bltu	r2,r3,268 <__ram_exceptions_end+0xfbfe0014>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
     274:	000d9740 	call	d974 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
     278:	000db080 	call	db08 <alt_main>

0000027c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
     27c:	003fff06 	br	27c <__ram_exceptions_end+0xfbfe0028>

00000280 <test_parallel_port>:
int snapl;
int snaph;
int flag;

void test_parallel_port()
{
     280:	defffe04 	addi	sp,sp,-8
     284:	dfc00115 	stw	ra,4(sp)
     288:	df000015 	stw	fp,0(sp)
     28c:	d839883a 	mov	fp,sp
	IOWR_32DIRECT(PARALLELPORT_0_BASE, 0, 0x1234abcd);
     290:	00c48d74 	movhi	r3,4661
     294:	18eaf344 	addi	r3,r3,-21555
     298:	00810134 	movhi	r2,1028
     29c:	10841004 	addi	r2,r2,4160
     2a0:	10c00035 	stwio	r3,0(r2)
	alt_printf("ParallelPort0=%x\n", IORD_32DIRECT(PARALLELPORT_0_BASE, 0));
     2a4:	00810134 	movhi	r2,1028
     2a8:	10841004 	addi	r2,r2,4160
     2ac:	10800037 	ldwio	r2,0(r2)
     2b0:	100b883a 	mov	r5,r2
     2b4:	01000074 	movhi	r4,1
     2b8:	213fb904 	addi	r4,r4,-284
     2bc:	000dbcc0 	call	dbcc <alt_printf>
}
     2c0:	0001883a 	nop
     2c4:	e037883a 	mov	sp,fp
     2c8:	dfc00117 	ldw	ra,4(sp)
     2cc:	df000017 	ldw	fp,0(sp)
     2d0:	dec00204 	addi	sp,sp,8
     2d4:	f800283a 	ret

000002d8 <test_counter>:

void test_counter()
{
     2d8:	defffe04 	addi	sp,sp,-8
     2dc:	dfc00115 	stw	ra,4(sp)
     2e0:	df000015 	stw	fp,0(sp)
     2e4:	d839883a 	mov	fp,sp
	IOWR_32DIRECT(COUNTER_0_BASE, COUNT_Target, Count_1sec);
     2e8:	00c0bef4 	movhi	r3,763
     2ec:	18fc2004 	addi	r3,r3,-3968
     2f0:	00810134 	movhi	r2,1028
     2f4:	10840e04 	addi	r2,r2,4152
     2f8:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(COUNTER_0_BASE, COUNT_RZ, arbval);
     2fc:	00ffffd4 	movui	r3,65535
     300:	00810134 	movhi	r2,1028
     304:	10840904 	addi	r2,r2,4132
     308:	10c00035 	stwio	r3,0(r2)
	alt_printf("iCounter after reset=%x\n", IORD_32DIRECT(COUNTER_0_BASE,0));
     30c:	00810134 	movhi	r2,1028
     310:	10840804 	addi	r2,r2,4128
     314:	10800037 	ldwio	r2,0(r2)
     318:	100b883a 	mov	r5,r2
     31c:	01000074 	movhi	r4,1
     320:	213fbe04 	addi	r4,r4,-264
     324:	000dbcc0 	call	dbcc <alt_printf>
	alt_printf("iEn and iEOT=%x\n", IORD_32DIRECT(COUNTER_0_BASE, 20));
     328:	00810134 	movhi	r2,1028
     32c:	10840d04 	addi	r2,r2,4148
     330:	10800037 	ldwio	r2,0(r2)
     334:	100b883a 	mov	r5,r2
     338:	01000074 	movhi	r4,1
     33c:	213fc504 	addi	r4,r4,-236
     340:	000dbcc0 	call	dbcc <alt_printf>
	IOWR_32DIRECT(COUNTER_0_BASE, COUNT_Start, arbval);
     344:	00ffffd4 	movui	r3,65535
     348:	00810134 	movhi	r2,1028
     34c:	10840a04 	addi	r2,r2,4136
     350:	10c00035 	stwio	r3,0(r2)
	alt_printf("iCounter while running=%x\n", IORD_32DIRECT(COUNTER_0_BASE,0));
     354:	00810134 	movhi	r2,1028
     358:	10840804 	addi	r2,r2,4128
     35c:	10800037 	ldwio	r2,0(r2)
     360:	100b883a 	mov	r5,r2
     364:	01000074 	movhi	r4,1
     368:	213fca04 	addi	r4,r4,-216
     36c:	000dbcc0 	call	dbcc <alt_printf>
	alt_printf("iEn and iEOT=%x\n", IORD_32DIRECT(COUNTER_0_BASE, 20));
     370:	00810134 	movhi	r2,1028
     374:	10840d04 	addi	r2,r2,4148
     378:	10800037 	ldwio	r2,0(r2)
     37c:	100b883a 	mov	r5,r2
     380:	01000074 	movhi	r4,1
     384:	213fc504 	addi	r4,r4,-236
     388:	000dbcc0 	call	dbcc <alt_printf>
	IOWR_32DIRECT(COUNTER_0_BASE, COUNT_Stop, arbval);
     38c:	00ffffd4 	movui	r3,65535
     390:	00810134 	movhi	r2,1028
     394:	10840b04 	addi	r2,r2,4140
     398:	10c00035 	stwio	r3,0(r2)
	alt_printf("iCounter, first read after stop=%x\n", IORD_32DIRECT(COUNTER_0_BASE,0));
     39c:	00810134 	movhi	r2,1028
     3a0:	10840804 	addi	r2,r2,4128
     3a4:	10800037 	ldwio	r2,0(r2)
     3a8:	100b883a 	mov	r5,r2
     3ac:	01000074 	movhi	r4,1
     3b0:	213fd104 	addi	r4,r4,-188
     3b4:	000dbcc0 	call	dbcc <alt_printf>
	alt_printf("iCounter, second read after stop=%x\n", IORD_32DIRECT(COUNTER_0_BASE,0));
     3b8:	00810134 	movhi	r2,1028
     3bc:	10840804 	addi	r2,r2,4128
     3c0:	10800037 	ldwio	r2,0(r2)
     3c4:	100b883a 	mov	r5,r2
     3c8:	01000074 	movhi	r4,1
     3cc:	213fda04 	addi	r4,r4,-152
     3d0:	000dbcc0 	call	dbcc <alt_printf>
	alt_printf("iEn and iEOT=%x\n", IORD_32DIRECT(COUNTER_0_BASE, 20));
     3d4:	00810134 	movhi	r2,1028
     3d8:	10840d04 	addi	r2,r2,4148
     3dc:	10800037 	ldwio	r2,0(r2)
     3e0:	100b883a 	mov	r5,r2
     3e4:	01000074 	movhi	r4,1
     3e8:	213fc504 	addi	r4,r4,-236
     3ec:	000dbcc0 	call	dbcc <alt_printf>
	IOWR_32DIRECT(COUNTER_0_BASE, COUNT_Start, arbval);
     3f0:	00ffffd4 	movui	r3,65535
     3f4:	00810134 	movhi	r2,1028
     3f8:	10840a04 	addi	r2,r2,4136
     3fc:	10c00035 	stwio	r3,0(r2)
	alt_printf("iCounter, first read after restarting=%x\n", IORD_32DIRECT(COUNTER_0_BASE,0));
     400:	00810134 	movhi	r2,1028
     404:	10840804 	addi	r2,r2,4128
     408:	10800037 	ldwio	r2,0(r2)
     40c:	100b883a 	mov	r5,r2
     410:	01000074 	movhi	r4,1
     414:	213fe404 	addi	r4,r4,-112
     418:	000dbcc0 	call	dbcc <alt_printf>
	alt_printf("iCounter, second read after restarting=%x\n", IORD_32DIRECT(COUNTER_0_BASE,0));
     41c:	00810134 	movhi	r2,1028
     420:	10840804 	addi	r2,r2,4128
     424:	10800037 	ldwio	r2,0(r2)
     428:	100b883a 	mov	r5,r2
     42c:	01000074 	movhi	r4,1
     430:	213fef04 	addi	r4,r4,-68
     434:	000dbcc0 	call	dbcc <alt_printf>
	alt_printf("iEn and iEOT=%x\n", IORD_32DIRECT(COUNTER_0_BASE, 20));
     438:	00810134 	movhi	r2,1028
     43c:	10840d04 	addi	r2,r2,4148
     440:	10800037 	ldwio	r2,0(r2)
     444:	100b883a 	mov	r5,r2
     448:	01000074 	movhi	r4,1
     44c:	213fc504 	addi	r4,r4,-236
     450:	000dbcc0 	call	dbcc <alt_printf>
	IOWR_32DIRECT(COUNTER_0_BASE, COUNT_Stop, arbval);
     454:	00ffffd4 	movui	r3,65535
     458:	00810134 	movhi	r2,1028
     45c:	10840b04 	addi	r2,r2,4140
     460:	10c00035 	stwio	r3,0(r2)
}
     464:	0001883a 	nop
     468:	e037883a 	mov	sp,fp
     46c:	dfc00117 	ldw	ra,4(sp)
     470:	df000017 	ldw	fp,0(sp)
     474:	dec00204 	addi	sp,sp,8
     478:	f800283a 	ret

0000047c <resp_isr_print>:

void resp_isr_print(void* context)
{
     47c:	defffe04 	addi	sp,sp,-8
     480:	df000115 	stw	fp,4(sp)
     484:	df000104 	addi	fp,sp,4
     488:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_TIMER_SNAPL(TIMER_0_BASE, arbval);
     48c:	00ffffd4 	movui	r3,65535
     490:	00810134 	movhi	r2,1028
     494:	10840404 	addi	r2,r2,4112
     498:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_SNAPH(TIMER_0_BASE, arbval);
     49c:	00ffffd4 	movui	r3,65535
     4a0:	00810134 	movhi	r2,1028
     4a4:	10840504 	addi	r2,r2,4116
     4a8:	10c00035 	stwio	r3,0(r2)
	snapl = IORD_ALTERA_AVALON_TIMER_SNAPL(TIMER_0_BASE);
     4ac:	00810134 	movhi	r2,1028
     4b0:	10840404 	addi	r2,r2,4112
     4b4:	10800037 	ldwio	r2,0(r2)
     4b8:	d0a6cd15 	stw	r2,-25804(gp)
	snaph = IORD_ALTERA_AVALON_TIMER_SNAPH(TIMER_0_BASE);
     4bc:	00810134 	movhi	r2,1028
     4c0:	10840504 	addi	r2,r2,4116
     4c4:	10800037 	ldwio	r2,0(r2)
     4c8:	d0a6cb15 	stw	r2,-25812(gp)
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, 0);
     4cc:	0007883a 	mov	r3,zero
     4d0:	00810134 	movhi	r2,1028
     4d4:	10840104 	addi	r2,r2,4100
     4d8:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, 0);
     4dc:	0007883a 	mov	r3,zero
     4e0:	00810134 	movhi	r2,1028
     4e4:	10840004 	addi	r2,r2,4096
     4e8:	10c00035 	stwio	r3,0(r2)
	flag = 1;
     4ec:	00800044 	movi	r2,1
     4f0:	d0a6cc15 	stw	r2,-25808(gp)
}
     4f4:	0001883a 	nop
     4f8:	e037883a 	mov	sp,fp
     4fc:	df000017 	ldw	fp,0(sp)
     500:	dec00104 	addi	sp,sp,4
     504:	f800283a 	ret

00000508 <resp_isr_parport>:

void resp_isr_parport(void* context)
{
     508:	defffe04 	addi	sp,sp,-8
     50c:	df000115 	stw	fp,4(sp)
     510:	df000104 	addi	fp,sp,4
     514:	e13fff15 	stw	r4,-4(fp)
	// Record end of response time by setting channel 1 low
	IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x0);
     518:	0007883a 	mov	r3,zero
     51c:	00810134 	movhi	r2,1028
     520:	10841004 	addi	r2,r2,4160
     524:	10c00035 	stwio	r3,0(r2)
	// Clear IRQ
	IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_IRQCLR, arbval);
     528:	00ffffd4 	movui	r3,65535
     52c:	00810134 	movhi	r2,1028
     530:	10841404 	addi	r2,r2,4176
     534:	10c00035 	stwio	r3,0(r2)
}
     538:	0001883a 	nop
     53c:	e037883a 	mov	sp,fp
     540:	df000017 	ldw	fp,0(sp)
     544:	dec00104 	addi	sp,sp,4
     548:	f800283a 	ret

0000054c <test_resptime_print>:

void test_resptime_print()
{
     54c:	defff804 	addi	sp,sp,-32
     550:	dfc00715 	stw	ra,28(sp)
     554:	df000615 	stw	fp,24(sp)
     558:	df000604 	addi	fp,sp,24
	// Register isr
	alt_ic_isr_register(TIMER_0_IRQ_INTERRUPT_CONTROLLER_ID, TIMER_0_IRQ, resp_isr_print, 0, 0);
     55c:	d8000015 	stw	zero,0(sp)
     560:	000f883a 	mov	r7,zero
     564:	01800034 	movhi	r6,0
     568:	31811f04 	addi	r6,r6,1148
     56c:	014000c4 	movi	r5,3
     570:	0009883a 	mov	r4,zero
     574:	000d58c0 	call	d58c <alt_ic_isr_register>
	// Initialize flag value
	flag = 0;
     578:	d026cc15 	stw	zero,-25808(gp)
	// Initialize timer
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, 0);
     57c:	0007883a 	mov	r3,zero
     580:	00810134 	movhi	r2,1028
     584:	10840104 	addi	r2,r2,4100
     588:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_0_BASE, 0xF080);
     58c:	00fc2014 	movui	r3,61568
     590:	00810134 	movhi	r2,1028
     594:	10840204 	addi	r2,r2,4104
     598:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_0_BASE, 0x02FA);
     59c:	00c0be84 	movi	r3,762
     5a0:	00810134 	movhi	r2,1028
     5a4:	10840304 	addi	r2,r2,4108
     5a8:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, TIMER_settings_start);
     5ac:	00c001c4 	movi	r3,7
     5b0:	00810134 	movhi	r2,1028
     5b4:	10840104 	addi	r2,r2,4100
     5b8:	10c00035 	stwio	r3,0(r2)
	// Setup loop structure
	int counter = 0;
     5bc:	e03ffb15 	stw	zero,-20(fp)
	int max_iter = 10;
     5c0:	00800284 	movi	r2,10
     5c4:	e0bffd15 	stw	r2,-12(fp)
	int accum_val = 0;
     5c8:	e03ffc15 	stw	zero,-16(fp)
	int avg_val = 0;
     5cc:	e03ffe15 	stw	zero,-8(fp)
	int snapval = 0;
     5d0:	e03fff15 	stw	zero,-4(fp)
	printf("Testing response time using stock timer and\n"
     5d4:	e17ffd17 	ldw	r5,-12(fp)
     5d8:	01000074 	movhi	r4,1
     5dc:	213ffa04 	addi	r4,r4,-24
     5e0:	0000d000 	call	d00 <printf>
			" counting the average over %d iterations...\n", max_iter);
	while(counter < max_iter)
     5e4:	00001e06 	br	660 <test_resptime_print+0x114>
	{
		if(flag)
     5e8:	d0a6cc17 	ldw	r2,-25808(gp)
     5ec:	10001c26 	beq	r2,zero,660 <test_resptime_print+0x114>
		{
			snapval = Count_1secH-snaph<<16|Count_1secL-snapl;
     5f0:	d0a6cb17 	ldw	r2,-25812(gp)
     5f4:	00c0be84 	movi	r3,762
     5f8:	1885c83a 	sub	r2,r3,r2
     5fc:	1006943a 	slli	r3,r2,16
     600:	d0a6cd17 	ldw	r2,-25804(gp)
     604:	013c2014 	movui	r4,61568
     608:	2085c83a 	sub	r2,r4,r2
     60c:	1884b03a 	or	r2,r3,r2
     610:	e0bfff15 	stw	r2,-4(fp)
			alt_printf("Value at iteration %x is 0x%x clock cycles\n", counter+1, snapval);
     614:	e0bffb17 	ldw	r2,-20(fp)
     618:	10800044 	addi	r2,r2,1
     61c:	e1bfff17 	ldw	r6,-4(fp)
     620:	100b883a 	mov	r5,r2
     624:	01000074 	movhi	r4,1
     628:	21001104 	addi	r4,r4,68
     62c:	000dbcc0 	call	dbcc <alt_printf>
			flag = 0;
     630:	d026cc15 	stw	zero,-25808(gp)
			IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, TIMER_settings_start);
     634:	00c001c4 	movi	r3,7
     638:	00810134 	movhi	r2,1028
     63c:	10840104 	addi	r2,r2,4100
     640:	10c00035 	stwio	r3,0(r2)
			accum_val += snapval;
     644:	e0fffc17 	ldw	r3,-16(fp)
     648:	e0bfff17 	ldw	r2,-4(fp)
     64c:	1885883a 	add	r2,r3,r2
     650:	e0bffc15 	stw	r2,-16(fp)
			counter += 1;
     654:	e0bffb17 	ldw	r2,-20(fp)
     658:	10800044 	addi	r2,r2,1
     65c:	e0bffb15 	stw	r2,-20(fp)
	int accum_val = 0;
	int avg_val = 0;
	int snapval = 0;
	printf("Testing response time using stock timer and\n"
			" counting the average over %d iterations...\n", max_iter);
	while(counter < max_iter)
     660:	e0fffb17 	ldw	r3,-20(fp)
     664:	e0bffd17 	ldw	r2,-12(fp)
     668:	18bfdf16 	blt	r3,r2,5e8 <__ram_exceptions_end+0xfbfe0394>
			IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, TIMER_settings_start);
			accum_val += snapval;
			counter += 1;
		}
	}
	avg_val = accum_val/max_iter;
     66c:	e17ffd17 	ldw	r5,-12(fp)
     670:	e13ffc17 	ldw	r4,-16(fp)
     674:	0000b1c0 	call	b1c <__divsi3>
     678:	e0bffe15 	stw	r2,-8(fp)
	printf("Average value for response time is %d clock cycles", avg_val);
     67c:	e17ffe17 	ldw	r5,-8(fp)
     680:	01000074 	movhi	r4,1
     684:	21001c04 	addi	r4,r4,112
     688:	0000d000 	call	d00 <printf>
}
     68c:	0001883a 	nop
     690:	e037883a 	mov	sp,fp
     694:	dfc00117 	ldw	ra,4(sp)
     698:	df000017 	ldw	fp,0(sp)
     69c:	dec00204 	addi	sp,sp,8
     6a0:	f800283a 	ret

000006a4 <test_resptime_parport>:
void test_resptime_parport()
{
     6a4:	defffb04 	addi	sp,sp,-20
     6a8:	dfc00415 	stw	ra,16(sp)
     6ac:	df000315 	stw	fp,12(sp)
     6b0:	df000304 	addi	fp,sp,12
	// Register isr
	alt_ic_isr_register(PARALLELPORT_0_IRQ_INTERRUPT_CONTROLLER_ID, PARALLELPORT_0_IRQ, resp_isr_parport, 0, 0);
     6b4:	d8000015 	stw	zero,0(sp)
     6b8:	000f883a 	mov	r7,zero
     6bc:	01800034 	movhi	r6,0
     6c0:	31814204 	addi	r6,r6,1288
     6c4:	01400044 	movi	r5,1
     6c8:	0009883a 	mov	r4,zero
     6cc:	000d58c0 	call	d58c <alt_ic_isr_register>
	IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x0);
     6d0:	0007883a 	mov	r3,zero
     6d4:	00810134 	movhi	r2,1028
     6d8:	10841004 	addi	r2,r2,4160
     6dc:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_IRQEN, 0x2);
     6e0:	00c00084 	movi	r3,2
     6e4:	00810134 	movhi	r2,1028
     6e8:	10841304 	addi	r2,r2,4172
     6ec:	10c00035 	stwio	r3,0(r2)
	int iterations = 10;
     6f0:	00800284 	movi	r2,10
     6f4:	e0bfff15 	stw	r2,-4(fp)
	int counter = 0;
     6f8:	e03ffe15 	stw	zero,-8(fp)
	while(counter < iterations)
     6fc:	00000706 	br	71c <test_resptime_parport+0x78>
	{
		// Trigger interrupt by setting channel 1 high
		IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x2);
     700:	00c00084 	movi	r3,2
     704:	00810134 	movhi	r2,1028
     708:	10841004 	addi	r2,r2,4160
     70c:	10c00035 	stwio	r3,0(r2)
		counter += 1;
     710:	e0bffe17 	ldw	r2,-8(fp)
     714:	10800044 	addi	r2,r2,1
     718:	e0bffe15 	stw	r2,-8(fp)
	alt_ic_isr_register(PARALLELPORT_0_IRQ_INTERRUPT_CONTROLLER_ID, PARALLELPORT_0_IRQ, resp_isr_parport, 0, 0);
	IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x0);
	IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_IRQEN, 0x2);
	int iterations = 10;
	int counter = 0;
	while(counter < iterations)
     71c:	e0fffe17 	ldw	r3,-8(fp)
     720:	e0bfff17 	ldw	r2,-4(fp)
     724:	18bff616 	blt	r3,r2,700 <__ram_exceptions_end+0xfbfe04ac>
	{
		// Trigger interrupt by setting channel 1 high
		IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x2);
		counter += 1;
	}
}
     728:	0001883a 	nop
     72c:	e037883a 	mov	sp,fp
     730:	dfc00117 	ldw	ra,4(sp)
     734:	df000017 	ldw	fp,0(sp)
     738:	dec00204 	addi	sp,sp,8
     73c:	f800283a 	ret

00000740 <recov_isr_print>:

void recov_isr_print(void* context)
{
     740:	defffe04 	addi	sp,sp,-8
     744:	df000115 	stw	fp,4(sp)
     748:	df000104 	addi	fp,sp,4
     74c:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, 0);
     750:	0007883a 	mov	r3,zero
     754:	00810134 	movhi	r2,1028
     758:	10840104 	addi	r2,r2,4100
     75c:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, 0);
     760:	0007883a 	mov	r3,zero
     764:	00810134 	movhi	r2,1028
     768:	10840004 	addi	r2,r2,4096
     76c:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(COUNTER_0_BASE, COUNT_Start, arbval);
     770:	00ffffd4 	movui	r3,65535
     774:	00810134 	movhi	r2,1028
     778:	10840a04 	addi	r2,r2,4136
     77c:	10c00035 	stwio	r3,0(r2)
}
     780:	0001883a 	nop
     784:	e037883a 	mov	sp,fp
     788:	df000017 	ldw	fp,0(sp)
     78c:	dec00104 	addi	sp,sp,4
     790:	f800283a 	ret

00000794 <recov_isr_parport>:

void recov_isr_parport(void* context)
{
     794:	defffe04 	addi	sp,sp,-8
     798:	df000115 	stw	fp,4(sp)
     79c:	df000104 	addi	fp,sp,4
     7a0:	e13fff15 	stw	r4,-4(fp)
	// Clear all parport channels
	IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x0);
     7a4:	0007883a 	mov	r3,zero
     7a8:	00810134 	movhi	r2,1028
     7ac:	10841004 	addi	r2,r2,4160
     7b0:	10c00035 	stwio	r3,0(r2)
	// Clear IRQ
	IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_IRQCLR, arbval);
     7b4:	00ffffd4 	movui	r3,65535
     7b8:	00810134 	movhi	r2,1028
     7bc:	10841404 	addi	r2,r2,4176
     7c0:	10c00035 	stwio	r3,0(r2)
	// Set channel 0 high to record start of recovery time
	IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x1);
     7c4:	00c00044 	movi	r3,1
     7c8:	00810134 	movhi	r2,1028
     7cc:	10841004 	addi	r2,r2,4160
     7d0:	10c00035 	stwio	r3,0(r2)
}
     7d4:	0001883a 	nop
     7d8:	e037883a 	mov	sp,fp
     7dc:	df000017 	ldw	fp,0(sp)
     7e0:	dec00104 	addi	sp,sp,4
     7e4:	f800283a 	ret

000007e8 <test_recovtime_print>:

void test_recovtime_print()
{
     7e8:	defff804 	addi	sp,sp,-32
     7ec:	dfc00715 	stw	ra,28(sp)
     7f0:	df000615 	stw	fp,24(sp)
     7f4:	df000604 	addi	fp,sp,24
	// Register interrupt function
	alt_ic_isr_register(TIMER_0_IRQ_INTERRUPT_CONTROLLER_ID, TIMER_0_IRQ, recov_isr_print, 0, 0);
     7f8:	d8000015 	stw	zero,0(sp)
     7fc:	000f883a 	mov	r7,zero
     800:	01800034 	movhi	r6,0
     804:	3181d004 	addi	r6,r6,1856
     808:	014000c4 	movi	r5,3
     80c:	0009883a 	mov	r4,zero
     810:	000d58c0 	call	d58c <alt_ic_isr_register>
	// Initialize counter, with maximum target value
	IOWR_32DIRECT(COUNTER_0_BASE, COUNT_Target, 0xFFFFFFFF);
     814:	00ffffc4 	movi	r3,-1
     818:	00810134 	movhi	r2,1028
     81c:	10840e04 	addi	r2,r2,4152
     820:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(COUNTER_0_BASE, COUNT_RZ, arbval);
     824:	00ffffd4 	movui	r3,65535
     828:	00810134 	movhi	r2,1028
     82c:	10840904 	addi	r2,r2,4132
     830:	10c00035 	stwio	r3,0(r2)
	// Initialize timer
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, 0);
     834:	0007883a 	mov	r3,zero
     838:	00810134 	movhi	r2,1028
     83c:	10840104 	addi	r2,r2,4100
     840:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_0_BASE, 0xF080);
     844:	00fc2014 	movui	r3,61568
     848:	00810134 	movhi	r2,1028
     84c:	10840204 	addi	r2,r2,4104
     850:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_0_BASE, 0x02FA);
     854:	00c0be84 	movi	r3,762
     858:	00810134 	movhi	r2,1028
     85c:	10840304 	addi	r2,r2,4108
     860:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, TIMER_settings_start);
     864:	00c001c4 	movi	r3,7
     868:	00810134 	movhi	r2,1028
     86c:	10840104 	addi	r2,r2,4100
     870:	10c00035 	stwio	r3,0(r2)
	// Setup loop structure
	int counter = 0;
     874:	e03ffb15 	stw	zero,-20(fp)
	int max_iter = 10;
     878:	00800284 	movi	r2,10
     87c:	e0bffe15 	stw	r2,-8(fp)
	int accum_val = 0;
     880:	e03ffc15 	stw	zero,-16(fp)
	int avg_val = 0;
     884:	e03fff15 	stw	zero,-4(fp)
	int read_val;
	printf("\n\nTesting recovery time using custom counter and\n"
     888:	e17ffe17 	ldw	r5,-8(fp)
     88c:	01000074 	movhi	r4,1
     890:	21002904 	addi	r4,r4,164
     894:	0000d000 	call	d00 <printf>
			" counting the average over %d iterations...\n", max_iter);
	while(counter < max_iter)
     898:	00002506 	br	930 <test_recovtime_print+0x148>
	{
		read_val = IORD_32DIRECT(COUNTER_0_BASE,0);
     89c:	00810134 	movhi	r2,1028
     8a0:	10840804 	addi	r2,r2,4128
     8a4:	10800037 	ldwio	r2,0(r2)
     8a8:	e0bffd15 	stw	r2,-12(fp)
		while(read_val == 0)
     8ac:	00000406 	br	8c0 <test_recovtime_print+0xd8>
		{
			read_val = IORD_32DIRECT(COUNTER_0_BASE,0);
     8b0:	00810134 	movhi	r2,1028
     8b4:	10840804 	addi	r2,r2,4128
     8b8:	10800037 	ldwio	r2,0(r2)
     8bc:	e0bffd15 	stw	r2,-12(fp)
	printf("\n\nTesting recovery time using custom counter and\n"
			" counting the average over %d iterations...\n", max_iter);
	while(counter < max_iter)
	{
		read_val = IORD_32DIRECT(COUNTER_0_BASE,0);
		while(read_val == 0)
     8c0:	e0bffd17 	ldw	r2,-12(fp)
     8c4:	103ffa26 	beq	r2,zero,8b0 <__ram_exceptions_end+0xfbfe065c>
		{
			read_val = IORD_32DIRECT(COUNTER_0_BASE,0);
		}
		alt_printf("Value at iteration %x is 0x%x clock cycles\n", counter+1, read_val);
     8c8:	e0bffb17 	ldw	r2,-20(fp)
     8cc:	10800044 	addi	r2,r2,1
     8d0:	e1bffd17 	ldw	r6,-12(fp)
     8d4:	100b883a 	mov	r5,r2
     8d8:	01000074 	movhi	r4,1
     8dc:	21001104 	addi	r4,r4,68
     8e0:	000dbcc0 	call	dbcc <alt_printf>
		accum_val += read_val;
     8e4:	e0fffc17 	ldw	r3,-16(fp)
     8e8:	e0bffd17 	ldw	r2,-12(fp)
     8ec:	1885883a 	add	r2,r3,r2
     8f0:	e0bffc15 	stw	r2,-16(fp)
		counter += 1;
     8f4:	e0bffb17 	ldw	r2,-20(fp)
     8f8:	10800044 	addi	r2,r2,1
     8fc:	e0bffb15 	stw	r2,-20(fp)
		IOWR_32DIRECT(COUNTER_0_BASE, COUNT_Stop, arbval);
     900:	00ffffd4 	movui	r3,65535
     904:	00810134 	movhi	r2,1028
     908:	10840b04 	addi	r2,r2,4140
     90c:	10c00035 	stwio	r3,0(r2)
		IOWR_32DIRECT(COUNTER_0_BASE, COUNT_RZ, arbval);
     910:	00ffffd4 	movui	r3,65535
     914:	00810134 	movhi	r2,1028
     918:	10840904 	addi	r2,r2,4132
     91c:	10c00035 	stwio	r3,0(r2)
		IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, TIMER_settings_start);
     920:	00c001c4 	movi	r3,7
     924:	00810134 	movhi	r2,1028
     928:	10840104 	addi	r2,r2,4100
     92c:	10c00035 	stwio	r3,0(r2)
	int accum_val = 0;
	int avg_val = 0;
	int read_val;
	printf("\n\nTesting recovery time using custom counter and\n"
			" counting the average over %d iterations...\n", max_iter);
	while(counter < max_iter)
     930:	e0fffb17 	ldw	r3,-20(fp)
     934:	e0bffe17 	ldw	r2,-8(fp)
     938:	18bfd816 	blt	r3,r2,89c <__ram_exceptions_end+0xfbfe0648>
		counter += 1;
		IOWR_32DIRECT(COUNTER_0_BASE, COUNT_Stop, arbval);
		IOWR_32DIRECT(COUNTER_0_BASE, COUNT_RZ, arbval);
		IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, TIMER_settings_start);
	}
	avg_val = accum_val/max_iter;
     93c:	e17ffe17 	ldw	r5,-8(fp)
     940:	e13ffc17 	ldw	r4,-16(fp)
     944:	0000b1c0 	call	b1c <__divsi3>
     948:	e0bfff15 	stw	r2,-4(fp)
	printf("Average value for recovery time is %d clock cycles", avg_val);
     94c:	e17fff17 	ldw	r5,-4(fp)
     950:	01000074 	movhi	r4,1
     954:	21004104 	addi	r4,r4,260
     958:	0000d000 	call	d00 <printf>
}
     95c:	0001883a 	nop
     960:	e037883a 	mov	sp,fp
     964:	dfc00117 	ldw	ra,4(sp)
     968:	df000017 	ldw	fp,0(sp)
     96c:	dec00204 	addi	sp,sp,8
     970:	f800283a 	ret

00000974 <test_recovtime_parport>:

void test_recovtime_parport()
{
     974:	defffb04 	addi	sp,sp,-20
     978:	dfc00415 	stw	ra,16(sp)
     97c:	df000315 	stw	fp,12(sp)
     980:	df000304 	addi	fp,sp,12
	// Register isr
		alt_ic_isr_register(PARALLELPORT_0_IRQ_INTERRUPT_CONTROLLER_ID, PARALLELPORT_0_IRQ, recov_isr_parport, 0, 0);
     984:	d8000015 	stw	zero,0(sp)
     988:	000f883a 	mov	r7,zero
     98c:	01800034 	movhi	r6,0
     990:	3181e504 	addi	r6,r6,1940
     994:	01400044 	movi	r5,1
     998:	0009883a 	mov	r4,zero
     99c:	000d58c0 	call	d58c <alt_ic_isr_register>
		IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x0);
     9a0:	0007883a 	mov	r3,zero
     9a4:	00810134 	movhi	r2,1028
     9a8:	10841004 	addi	r2,r2,4160
     9ac:	10c00035 	stwio	r3,0(r2)
		IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_IRQEN, 0x2);
     9b0:	00c00084 	movi	r3,2
     9b4:	00810134 	movhi	r2,1028
     9b8:	10841304 	addi	r2,r2,4172
     9bc:	10c00035 	stwio	r3,0(r2)
		int iterations = 10;
     9c0:	00800284 	movi	r2,10
     9c4:	e0bfff15 	stw	r2,-4(fp)
		int counter = 0;
     9c8:	e03ffe15 	stw	zero,-8(fp)
		while(counter < iterations)
     9cc:	00000b06 	br	9fc <test_recovtime_parport+0x88>
		{
			// Trigger the interrupt by setting channel 1 high
			IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x2);
     9d0:	00c00084 	movi	r3,2
     9d4:	00810134 	movhi	r2,1028
     9d8:	10841004 	addi	r2,r2,4160
     9dc:	10c00035 	stwio	r3,0(r2)
			// Record end of recovery time by setting channel 0 low
			IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x0);
     9e0:	0007883a 	mov	r3,zero
     9e4:	00810134 	movhi	r2,1028
     9e8:	10841004 	addi	r2,r2,4160
     9ec:	10c00035 	stwio	r3,0(r2)
			counter += 1;
     9f0:	e0bffe17 	ldw	r2,-8(fp)
     9f4:	10800044 	addi	r2,r2,1
     9f8:	e0bffe15 	stw	r2,-8(fp)
		alt_ic_isr_register(PARALLELPORT_0_IRQ_INTERRUPT_CONTROLLER_ID, PARALLELPORT_0_IRQ, recov_isr_parport, 0, 0);
		IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x0);
		IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_IRQEN, 0x2);
		int iterations = 10;
		int counter = 0;
		while(counter < iterations)
     9fc:	e0fffe17 	ldw	r3,-8(fp)
     a00:	e0bfff17 	ldw	r2,-4(fp)
     a04:	18bff216 	blt	r3,r2,9d0 <__ram_exceptions_end+0xfbfe077c>
			IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x2);
			// Record end of recovery time by setting channel 0 low
			IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x0);
			counter += 1;
		}
}
     a08:	0001883a 	nop
     a0c:	e037883a 	mov	sp,fp
     a10:	dfc00117 	ldw	ra,4(sp)
     a14:	df000017 	ldw	fp,0(sp)
     a18:	dec00204 	addi	sp,sp,8
     a1c:	f800283a 	ret

00000a20 <latency_isr_parport>:

void latency_isr_parport(void* context)
{
     a20:	defffe04 	addi	sp,sp,-8
     a24:	df000115 	stw	fp,4(sp)
     a28:	df000104 	addi	fp,sp,4
     a2c:	e13fff15 	stw	r4,-4(fp)
	IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_IRQCLR, arbval);
     a30:	00ffffd4 	movui	r3,65535
     a34:	00810134 	movhi	r2,1028
     a38:	10841404 	addi	r2,r2,4176
     a3c:	10c00035 	stwio	r3,0(r2)
}
     a40:	0001883a 	nop
     a44:	e037883a 	mov	sp,fp
     a48:	df000017 	ldw	fp,0(sp)
     a4c:	dec00104 	addi	sp,sp,4
     a50:	f800283a 	ret

00000a54 <test_latency_parport>:

void test_latency_parport()
{
     a54:	defffb04 	addi	sp,sp,-20
     a58:	dfc00415 	stw	ra,16(sp)
     a5c:	df000315 	stw	fp,12(sp)
     a60:	df000304 	addi	fp,sp,12
	alt_ic_isr_register(PARALLELPORT_0_IRQ_INTERRUPT_CONTROLLER_ID, PARALLELPORT_0_IRQ, latency_isr_parport, 0, 0);
     a64:	d8000015 	stw	zero,0(sp)
     a68:	000f883a 	mov	r7,zero
     a6c:	01800034 	movhi	r6,0
     a70:	31828804 	addi	r6,r6,2592
     a74:	01400044 	movi	r5,1
     a78:	0009883a 	mov	r4,zero
     a7c:	000d58c0 	call	d58c <alt_ic_isr_register>
	IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x0);
     a80:	0007883a 	mov	r3,zero
     a84:	00810134 	movhi	r2,1028
     a88:	10841004 	addi	r2,r2,4160
     a8c:	10c00035 	stwio	r3,0(r2)
	IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_IRQEN, 0x1);
     a90:	00c00044 	movi	r3,1
     a94:	00810134 	movhi	r2,1028
     a98:	10841304 	addi	r2,r2,4172
     a9c:	10c00035 	stwio	r3,0(r2)
	int iterations = 1e2;
     aa0:	00801904 	movi	r2,100
     aa4:	e0bfff15 	stw	r2,-4(fp)
	int counter = 0;
     aa8:	e03ffe15 	stw	zero,-8(fp)
	while(counter < iterations)
     aac:	00000706 	br	acc <test_latency_parport+0x78>
	{
		// Trigger the interrupt by setting channel 0 high
		IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x1);
     ab0:	00c00044 	movi	r3,1
     ab4:	00810134 	movhi	r2,1028
     ab8:	10841004 	addi	r2,r2,4160
     abc:	10c00035 	stwio	r3,0(r2)

		counter += 1;
     ac0:	e0bffe17 	ldw	r2,-8(fp)
     ac4:	10800044 	addi	r2,r2,1
     ac8:	e0bffe15 	stw	r2,-8(fp)
	alt_ic_isr_register(PARALLELPORT_0_IRQ_INTERRUPT_CONTROLLER_ID, PARALLELPORT_0_IRQ, latency_isr_parport, 0, 0);
	IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x0);
	IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_IRQEN, 0x1);
	int iterations = 1e2;
	int counter = 0;
	while(counter < iterations)
     acc:	e0fffe17 	ldw	r3,-8(fp)
     ad0:	e0bfff17 	ldw	r2,-4(fp)
     ad4:	18bff616 	blt	r3,r2,ab0 <__ram_exceptions_end+0xfbfe085c>
		// Trigger the interrupt by setting channel 0 high
		IOWR_32DIRECT(PARALLELPORT_0_BASE, PARPORT_Data, 0x1);

		counter += 1;
	}
}
     ad8:	0001883a 	nop
     adc:	e037883a 	mov	sp,fp
     ae0:	dfc00117 	ldw	ra,4(sp)
     ae4:	df000017 	ldw	fp,0(sp)
     ae8:	dec00204 	addi	sp,sp,8
     aec:	f800283a 	ret

00000af0 <main>:

int main()
{
     af0:	defffe04 	addi	sp,sp,-8
     af4:	dfc00115 	stw	ra,4(sp)
     af8:	df000015 	stw	fp,0(sp)
     afc:	d839883a 	mov	fp,sp
	//test_parallel_port();
	//test_counter();

	// Latency tests
	// De-comment line 90 in alt_irq_handler.c to run this test
	test_latency_parport();
     b00:	0000a540 	call	a54 <test_latency_parport>
	//test_resptime_parport();

	// Recovery time tests
	//test_recovtime_print();
	//test_recovtime_parport();
	return 0;
     b04:	0005883a 	mov	r2,zero
}
     b08:	e037883a 	mov	sp,fp
     b0c:	dfc00117 	ldw	ra,4(sp)
     b10:	df000017 	ldw	fp,0(sp)
     b14:	dec00204 	addi	sp,sp,8
     b18:	f800283a 	ret

00000b1c <__divsi3>:
     b1c:	20001b16 	blt	r4,zero,b8c <__divsi3+0x70>
     b20:	000f883a 	mov	r7,zero
     b24:	28001616 	blt	r5,zero,b80 <__divsi3+0x64>
     b28:	200d883a 	mov	r6,r4
     b2c:	29001a2e 	bgeu	r5,r4,b98 <__divsi3+0x7c>
     b30:	00800804 	movi	r2,32
     b34:	00c00044 	movi	r3,1
     b38:	00000106 	br	b40 <__divsi3+0x24>
     b3c:	10000d26 	beq	r2,zero,b74 <__divsi3+0x58>
     b40:	294b883a 	add	r5,r5,r5
     b44:	10bfffc4 	addi	r2,r2,-1
     b48:	18c7883a 	add	r3,r3,r3
     b4c:	293ffb36 	bltu	r5,r4,b3c <__ram_exceptions_end+0xfbfe08e8>
     b50:	0005883a 	mov	r2,zero
     b54:	18000726 	beq	r3,zero,b74 <__divsi3+0x58>
     b58:	0005883a 	mov	r2,zero
     b5c:	31400236 	bltu	r6,r5,b68 <__divsi3+0x4c>
     b60:	314dc83a 	sub	r6,r6,r5
     b64:	10c4b03a 	or	r2,r2,r3
     b68:	1806d07a 	srli	r3,r3,1
     b6c:	280ad07a 	srli	r5,r5,1
     b70:	183ffa1e 	bne	r3,zero,b5c <__ram_exceptions_end+0xfbfe0908>
     b74:	38000126 	beq	r7,zero,b7c <__divsi3+0x60>
     b78:	0085c83a 	sub	r2,zero,r2
     b7c:	f800283a 	ret
     b80:	014bc83a 	sub	r5,zero,r5
     b84:	39c0005c 	xori	r7,r7,1
     b88:	003fe706 	br	b28 <__ram_exceptions_end+0xfbfe08d4>
     b8c:	0109c83a 	sub	r4,zero,r4
     b90:	01c00044 	movi	r7,1
     b94:	003fe306 	br	b24 <__ram_exceptions_end+0xfbfe08d0>
     b98:	00c00044 	movi	r3,1
     b9c:	003fee06 	br	b58 <__ram_exceptions_end+0xfbfe0904>

00000ba0 <__modsi3>:
     ba0:	20001716 	blt	r4,zero,c00 <__modsi3+0x60>
     ba4:	000f883a 	mov	r7,zero
     ba8:	2005883a 	mov	r2,r4
     bac:	28001216 	blt	r5,zero,bf8 <__modsi3+0x58>
     bb0:	2900162e 	bgeu	r5,r4,c0c <__modsi3+0x6c>
     bb4:	01800804 	movi	r6,32
     bb8:	00c00044 	movi	r3,1
     bbc:	00000106 	br	bc4 <__modsi3+0x24>
     bc0:	30000a26 	beq	r6,zero,bec <__modsi3+0x4c>
     bc4:	294b883a 	add	r5,r5,r5
     bc8:	31bfffc4 	addi	r6,r6,-1
     bcc:	18c7883a 	add	r3,r3,r3
     bd0:	293ffb36 	bltu	r5,r4,bc0 <__ram_exceptions_end+0xfbfe096c>
     bd4:	18000526 	beq	r3,zero,bec <__modsi3+0x4c>
     bd8:	1806d07a 	srli	r3,r3,1
     bdc:	11400136 	bltu	r2,r5,be4 <__modsi3+0x44>
     be0:	1145c83a 	sub	r2,r2,r5
     be4:	280ad07a 	srli	r5,r5,1
     be8:	183ffb1e 	bne	r3,zero,bd8 <__ram_exceptions_end+0xfbfe0984>
     bec:	38000126 	beq	r7,zero,bf4 <__modsi3+0x54>
     bf0:	0085c83a 	sub	r2,zero,r2
     bf4:	f800283a 	ret
     bf8:	014bc83a 	sub	r5,zero,r5
     bfc:	003fec06 	br	bb0 <__ram_exceptions_end+0xfbfe095c>
     c00:	0109c83a 	sub	r4,zero,r4
     c04:	01c00044 	movi	r7,1
     c08:	003fe706 	br	ba8 <__ram_exceptions_end+0xfbfe0954>
     c0c:	00c00044 	movi	r3,1
     c10:	003ff106 	br	bd8 <__ram_exceptions_end+0xfbfe0984>

00000c14 <__udivsi3>:
     c14:	200d883a 	mov	r6,r4
     c18:	2900152e 	bgeu	r5,r4,c70 <__udivsi3+0x5c>
     c1c:	28001416 	blt	r5,zero,c70 <__udivsi3+0x5c>
     c20:	00800804 	movi	r2,32
     c24:	00c00044 	movi	r3,1
     c28:	00000206 	br	c34 <__udivsi3+0x20>
     c2c:	10000e26 	beq	r2,zero,c68 <__udivsi3+0x54>
     c30:	28000516 	blt	r5,zero,c48 <__udivsi3+0x34>
     c34:	294b883a 	add	r5,r5,r5
     c38:	10bfffc4 	addi	r2,r2,-1
     c3c:	18c7883a 	add	r3,r3,r3
     c40:	293ffa36 	bltu	r5,r4,c2c <__ram_exceptions_end+0xfbfe09d8>
     c44:	18000826 	beq	r3,zero,c68 <__udivsi3+0x54>
     c48:	0005883a 	mov	r2,zero
     c4c:	31400236 	bltu	r6,r5,c58 <__udivsi3+0x44>
     c50:	314dc83a 	sub	r6,r6,r5
     c54:	10c4b03a 	or	r2,r2,r3
     c58:	1806d07a 	srli	r3,r3,1
     c5c:	280ad07a 	srli	r5,r5,1
     c60:	183ffa1e 	bne	r3,zero,c4c <__ram_exceptions_end+0xfbfe09f8>
     c64:	f800283a 	ret
     c68:	0005883a 	mov	r2,zero
     c6c:	f800283a 	ret
     c70:	00c00044 	movi	r3,1
     c74:	003ff406 	br	c48 <__ram_exceptions_end+0xfbfe09f4>

00000c78 <__umodsi3>:
     c78:	2005883a 	mov	r2,r4
     c7c:	2900122e 	bgeu	r5,r4,cc8 <__umodsi3+0x50>
     c80:	28001116 	blt	r5,zero,cc8 <__umodsi3+0x50>
     c84:	01800804 	movi	r6,32
     c88:	00c00044 	movi	r3,1
     c8c:	00000206 	br	c98 <__umodsi3+0x20>
     c90:	30000c26 	beq	r6,zero,cc4 <__umodsi3+0x4c>
     c94:	28000516 	blt	r5,zero,cac <__umodsi3+0x34>
     c98:	294b883a 	add	r5,r5,r5
     c9c:	31bfffc4 	addi	r6,r6,-1
     ca0:	18c7883a 	add	r3,r3,r3
     ca4:	293ffa36 	bltu	r5,r4,c90 <__ram_exceptions_end+0xfbfe0a3c>
     ca8:	18000626 	beq	r3,zero,cc4 <__umodsi3+0x4c>
     cac:	1806d07a 	srli	r3,r3,1
     cb0:	11400136 	bltu	r2,r5,cb8 <__umodsi3+0x40>
     cb4:	1145c83a 	sub	r2,r2,r5
     cb8:	280ad07a 	srli	r5,r5,1
     cbc:	183ffb1e 	bne	r3,zero,cac <__ram_exceptions_end+0xfbfe0a58>
     cc0:	f800283a 	ret
     cc4:	f800283a 	ret
     cc8:	00c00044 	movi	r3,1
     ccc:	003ff706 	br	cac <__ram_exceptions_end+0xfbfe0a58>

00000cd0 <_printf_r>:
     cd0:	defffd04 	addi	sp,sp,-12
     cd4:	2805883a 	mov	r2,r5
     cd8:	dfc00015 	stw	ra,0(sp)
     cdc:	d9800115 	stw	r6,4(sp)
     ce0:	d9c00215 	stw	r7,8(sp)
     ce4:	21400217 	ldw	r5,8(r4)
     ce8:	d9c00104 	addi	r7,sp,4
     cec:	100d883a 	mov	r6,r2
     cf0:	0000d3c0 	call	d3c <___vfprintf_internal_r>
     cf4:	dfc00017 	ldw	ra,0(sp)
     cf8:	dec00304 	addi	sp,sp,12
     cfc:	f800283a 	ret

00000d00 <printf>:
     d00:	defffc04 	addi	sp,sp,-16
     d04:	dfc00015 	stw	ra,0(sp)
     d08:	d9400115 	stw	r5,4(sp)
     d0c:	d9800215 	stw	r6,8(sp)
     d10:	d9c00315 	stw	r7,12(sp)
     d14:	00800074 	movhi	r2,1
     d18:	1087b904 	addi	r2,r2,7908
     d1c:	10800017 	ldw	r2,0(r2)
     d20:	200b883a 	mov	r5,r4
     d24:	d9800104 	addi	r6,sp,4
     d28:	11000217 	ldw	r4,8(r2)
     d2c:	0002f340 	call	2f34 <__vfprintf_internal>
     d30:	dfc00017 	ldw	ra,0(sp)
     d34:	dec00404 	addi	sp,sp,16
     d38:	f800283a 	ret

00000d3c <___vfprintf_internal_r>:
     d3c:	deffb804 	addi	sp,sp,-288
     d40:	dfc04715 	stw	ra,284(sp)
     d44:	ddc04515 	stw	r23,276(sp)
     d48:	dd404315 	stw	r21,268(sp)
     d4c:	d9002c15 	stw	r4,176(sp)
     d50:	282f883a 	mov	r23,r5
     d54:	302b883a 	mov	r21,r6
     d58:	d9c02d15 	stw	r7,180(sp)
     d5c:	df004615 	stw	fp,280(sp)
     d60:	dd804415 	stw	r22,272(sp)
     d64:	dd004215 	stw	r20,264(sp)
     d68:	dcc04115 	stw	r19,260(sp)
     d6c:	dc804015 	stw	r18,256(sp)
     d70:	dc403f15 	stw	r17,252(sp)
     d74:	dc003e15 	stw	r16,248(sp)
     d78:	00056980 	call	5698 <_localeconv_r>
     d7c:	10800017 	ldw	r2,0(r2)
     d80:	1009883a 	mov	r4,r2
     d84:	d8803415 	stw	r2,208(sp)
     d88:	00076c00 	call	76c0 <strlen>
     d8c:	d8803715 	stw	r2,220(sp)
     d90:	d8802c17 	ldw	r2,176(sp)
     d94:	10000226 	beq	r2,zero,da0 <___vfprintf_internal_r+0x64>
     d98:	10800e17 	ldw	r2,56(r2)
     d9c:	1000f926 	beq	r2,zero,1184 <___vfprintf_internal_r+0x448>
     da0:	b880030b 	ldhu	r2,12(r23)
     da4:	10c8000c 	andi	r3,r2,8192
     da8:	1800061e 	bne	r3,zero,dc4 <___vfprintf_internal_r+0x88>
     dac:	b9001917 	ldw	r4,100(r23)
     db0:	00f7ffc4 	movi	r3,-8193
     db4:	10880014 	ori	r2,r2,8192
     db8:	20c6703a 	and	r3,r4,r3
     dbc:	b880030d 	sth	r2,12(r23)
     dc0:	b8c01915 	stw	r3,100(r23)
     dc4:	10c0020c 	andi	r3,r2,8
     dc8:	1800c126 	beq	r3,zero,10d0 <___vfprintf_internal_r+0x394>
     dcc:	b8c00417 	ldw	r3,16(r23)
     dd0:	1800bf26 	beq	r3,zero,10d0 <___vfprintf_internal_r+0x394>
     dd4:	1080068c 	andi	r2,r2,26
     dd8:	00c00284 	movi	r3,10
     ddc:	10c0c426 	beq	r2,r3,10f0 <___vfprintf_internal_r+0x3b4>
     de0:	d8c00404 	addi	r3,sp,16
     de4:	05000074 	movhi	r20,1
     de8:	d9001e04 	addi	r4,sp,120
     dec:	a5005e84 	addi	r20,r20,378
     df0:	d8c01e15 	stw	r3,120(sp)
     df4:	d8002015 	stw	zero,128(sp)
     df8:	d8001f15 	stw	zero,124(sp)
     dfc:	d8003315 	stw	zero,204(sp)
     e00:	d8003615 	stw	zero,216(sp)
     e04:	d8003815 	stw	zero,224(sp)
     e08:	1811883a 	mov	r8,r3
     e0c:	d8003915 	stw	zero,228(sp)
     e10:	d8003a15 	stw	zero,232(sp)
     e14:	d8002f15 	stw	zero,188(sp)
     e18:	d9002815 	stw	r4,160(sp)
     e1c:	a8800007 	ldb	r2,0(r21)
     e20:	10027b26 	beq	r2,zero,1810 <___vfprintf_internal_r+0xad4>
     e24:	00c00944 	movi	r3,37
     e28:	a821883a 	mov	r16,r21
     e2c:	10c0021e 	bne	r2,r3,e38 <___vfprintf_internal_r+0xfc>
     e30:	00001406 	br	e84 <___vfprintf_internal_r+0x148>
     e34:	10c00326 	beq	r2,r3,e44 <___vfprintf_internal_r+0x108>
     e38:	84000044 	addi	r16,r16,1
     e3c:	80800007 	ldb	r2,0(r16)
     e40:	103ffc1e 	bne	r2,zero,e34 <__ram_exceptions_end+0xfbfe0be0>
     e44:	8563c83a 	sub	r17,r16,r21
     e48:	88000e26 	beq	r17,zero,e84 <___vfprintf_internal_r+0x148>
     e4c:	d8c02017 	ldw	r3,128(sp)
     e50:	d8801f17 	ldw	r2,124(sp)
     e54:	45400015 	stw	r21,0(r8)
     e58:	1c47883a 	add	r3,r3,r17
     e5c:	10800044 	addi	r2,r2,1
     e60:	d8c02015 	stw	r3,128(sp)
     e64:	44400115 	stw	r17,4(r8)
     e68:	d8801f15 	stw	r2,124(sp)
     e6c:	00c001c4 	movi	r3,7
     e70:	1880a716 	blt	r3,r2,1110 <___vfprintf_internal_r+0x3d4>
     e74:	42000204 	addi	r8,r8,8
     e78:	d9402f17 	ldw	r5,188(sp)
     e7c:	2c4b883a 	add	r5,r5,r17
     e80:	d9402f15 	stw	r5,188(sp)
     e84:	80800007 	ldb	r2,0(r16)
     e88:	1000a826 	beq	r2,zero,112c <___vfprintf_internal_r+0x3f0>
     e8c:	84400047 	ldb	r17,1(r16)
     e90:	00bfffc4 	movi	r2,-1
     e94:	85400044 	addi	r21,r16,1
     e98:	d8002785 	stb	zero,158(sp)
     e9c:	0007883a 	mov	r3,zero
     ea0:	000f883a 	mov	r7,zero
     ea4:	d8802915 	stw	r2,164(sp)
     ea8:	d8003115 	stw	zero,196(sp)
     eac:	0025883a 	mov	r18,zero
     eb0:	01401604 	movi	r5,88
     eb4:	01800244 	movi	r6,9
     eb8:	02800a84 	movi	r10,42
     ebc:	02401b04 	movi	r9,108
     ec0:	ad400044 	addi	r21,r21,1
     ec4:	88bff804 	addi	r2,r17,-32
     ec8:	28830436 	bltu	r5,r2,1adc <___vfprintf_internal_r+0xda0>
     ecc:	100490ba 	slli	r2,r2,2
     ed0:	01000034 	movhi	r4,0
     ed4:	2103b904 	addi	r4,r4,3812
     ed8:	1105883a 	add	r2,r2,r4
     edc:	10800017 	ldw	r2,0(r2)
     ee0:	1000683a 	jmp	r2
     ee4:	000019fc 	xorhi	zero,zero,103
     ee8:	00001adc 	xori	zero,zero,107
     eec:	00001adc 	xori	zero,zero,107
     ef0:	00001a1c 	xori	zero,zero,104
     ef4:	00001adc 	xori	zero,zero,107
     ef8:	00001adc 	xori	zero,zero,107
     efc:	00001adc 	xori	zero,zero,107
     f00:	00001adc 	xori	zero,zero,107
     f04:	00001adc 	xori	zero,zero,107
     f08:	00001adc 	xori	zero,zero,107
     f0c:	00001190 	cmplti	zero,zero,70
     f10:	00001938 	rdprs	zero,zero,100
     f14:	00001adc 	xori	zero,zero,107
     f18:	00001058 	cmpnei	zero,zero,65
     f1c:	000011b8 	rdprs	zero,zero,70
     f20:	00001adc 	xori	zero,zero,107
     f24:	000011f8 	rdprs	zero,zero,71
     f28:	00001204 	movi	zero,72
     f2c:	00001204 	movi	zero,72
     f30:	00001204 	movi	zero,72
     f34:	00001204 	movi	zero,72
     f38:	00001204 	movi	zero,72
     f3c:	00001204 	movi	zero,72
     f40:	00001204 	movi	zero,72
     f44:	00001204 	movi	zero,72
     f48:	00001204 	movi	zero,72
     f4c:	00001adc 	xori	zero,zero,107
     f50:	00001adc 	xori	zero,zero,107
     f54:	00001adc 	xori	zero,zero,107
     f58:	00001adc 	xori	zero,zero,107
     f5c:	00001adc 	xori	zero,zero,107
     f60:	00001adc 	xori	zero,zero,107
     f64:	00001adc 	xori	zero,zero,107
     f68:	00001adc 	xori	zero,zero,107
     f6c:	00001adc 	xori	zero,zero,107
     f70:	00001adc 	xori	zero,zero,107
     f74:	00001238 	rdprs	zero,zero,72
     f78:	000012f4 	movhi	zero,75
     f7c:	00001adc 	xori	zero,zero,107
     f80:	000012f4 	movhi	zero,75
     f84:	00001adc 	xori	zero,zero,107
     f88:	00001adc 	xori	zero,zero,107
     f8c:	00001adc 	xori	zero,zero,107
     f90:	00001adc 	xori	zero,zero,107
     f94:	00001394 	movui	zero,78
     f98:	00001adc 	xori	zero,zero,107
     f9c:	00001adc 	xori	zero,zero,107
     fa0:	000013a0 	cmpeqi	zero,zero,78
     fa4:	00001adc 	xori	zero,zero,107
     fa8:	00001adc 	xori	zero,zero,107
     fac:	00001adc 	xori	zero,zero,107
     fb0:	00001adc 	xori	zero,zero,107
     fb4:	00001adc 	xori	zero,zero,107
     fb8:	00001818 	cmpnei	zero,zero,96
     fbc:	00001adc 	xori	zero,zero,107
     fc0:	00001adc 	xori	zero,zero,107
     fc4:	00001878 	rdprs	zero,zero,97
     fc8:	00001adc 	xori	zero,zero,107
     fcc:	00001adc 	xori	zero,zero,107
     fd0:	00001adc 	xori	zero,zero,107
     fd4:	00001adc 	xori	zero,zero,107
     fd8:	00001adc 	xori	zero,zero,107
     fdc:	00001adc 	xori	zero,zero,107
     fe0:	00001adc 	xori	zero,zero,107
     fe4:	00001adc 	xori	zero,zero,107
     fe8:	00001adc 	xori	zero,zero,107
     fec:	00001adc 	xori	zero,zero,107
     ff0:	00001a88 	cmpgei	zero,zero,106
     ff4:	00001a28 	cmpgeui	zero,zero,104
     ff8:	000012f4 	movhi	zero,75
     ffc:	000012f4 	movhi	zero,75
    1000:	000012f4 	movhi	zero,75
    1004:	00001a38 	rdprs	zero,zero,104
    1008:	00001a28 	cmpgeui	zero,zero,104
    100c:	00001adc 	xori	zero,zero,107
    1010:	00001adc 	xori	zero,zero,107
    1014:	00001a44 	movi	zero,105
    1018:	00001adc 	xori	zero,zero,107
    101c:	00001a54 	movui	zero,105
    1020:	00001928 	cmpgeui	zero,zero,100
    1024:	00001064 	muli	zero,zero,65
    1028:	00001948 	cmpgei	zero,zero,101
    102c:	00001adc 	xori	zero,zero,107
    1030:	00001954 	movui	zero,101
    1034:	00001adc 	xori	zero,zero,107
    1038:	000019b0 	cmpltui	zero,zero,102
    103c:	00001adc 	xori	zero,zero,107
    1040:	00001adc 	xori	zero,zero,107
    1044:	000019c0 	call	19c <__alt_mem_new_sdram_controller_0+0x19c>
    1048:	d9003117 	ldw	r4,196(sp)
    104c:	d8802d15 	stw	r2,180(sp)
    1050:	0109c83a 	sub	r4,zero,r4
    1054:	d9003115 	stw	r4,196(sp)
    1058:	94800114 	ori	r18,r18,4
    105c:	ac400007 	ldb	r17,0(r21)
    1060:	003f9706 	br	ec0 <__ram_exceptions_end+0xfbfe0c6c>
    1064:	00800c04 	movi	r2,48
    1068:	d9002d17 	ldw	r4,180(sp)
    106c:	d9402917 	ldw	r5,164(sp)
    1070:	d8802705 	stb	r2,156(sp)
    1074:	00801e04 	movi	r2,120
    1078:	d8802745 	stb	r2,157(sp)
    107c:	d8002785 	stb	zero,158(sp)
    1080:	20c00104 	addi	r3,r4,4
    1084:	24c00017 	ldw	r19,0(r4)
    1088:	002d883a 	mov	r22,zero
    108c:	90800094 	ori	r2,r18,2
    1090:	28029a16 	blt	r5,zero,1afc <___vfprintf_internal_r+0xdc0>
    1094:	00bfdfc4 	movi	r2,-129
    1098:	90a4703a 	and	r18,r18,r2
    109c:	d8c02d15 	stw	r3,180(sp)
    10a0:	94800094 	ori	r18,r18,2
    10a4:	9802871e 	bne	r19,zero,1ac4 <___vfprintf_internal_r+0xd88>
    10a8:	00800074 	movhi	r2,1
    10ac:	10805704 	addi	r2,r2,348
    10b0:	d8803915 	stw	r2,228(sp)
    10b4:	04401e04 	movi	r17,120
    10b8:	d8802917 	ldw	r2,164(sp)
    10bc:	0039883a 	mov	fp,zero
    10c0:	1001e926 	beq	r2,zero,1868 <___vfprintf_internal_r+0xb2c>
    10c4:	0027883a 	mov	r19,zero
    10c8:	002d883a 	mov	r22,zero
    10cc:	00020506 	br	18e4 <___vfprintf_internal_r+0xba8>
    10d0:	d9002c17 	ldw	r4,176(sp)
    10d4:	b80b883a 	mov	r5,r23
    10d8:	000300c0 	call	300c <__swsetup_r>
    10dc:	1005ac1e 	bne	r2,zero,2790 <___vfprintf_internal_r+0x1a54>
    10e0:	b880030b 	ldhu	r2,12(r23)
    10e4:	00c00284 	movi	r3,10
    10e8:	1080068c 	andi	r2,r2,26
    10ec:	10ff3c1e 	bne	r2,r3,de0 <__ram_exceptions_end+0xfbfe0b8c>
    10f0:	b880038f 	ldh	r2,14(r23)
    10f4:	103f3a16 	blt	r2,zero,de0 <__ram_exceptions_end+0xfbfe0b8c>
    10f8:	d9c02d17 	ldw	r7,180(sp)
    10fc:	d9002c17 	ldw	r4,176(sp)
    1100:	a80d883a 	mov	r6,r21
    1104:	b80b883a 	mov	r5,r23
    1108:	0002f500 	call	2f50 <__sbprintf>
    110c:	00001106 	br	1154 <___vfprintf_internal_r+0x418>
    1110:	d9002c17 	ldw	r4,176(sp)
    1114:	d9801e04 	addi	r6,sp,120
    1118:	b80b883a 	mov	r5,r23
    111c:	00078540 	call	7854 <__sprint_r>
    1120:	1000081e 	bne	r2,zero,1144 <___vfprintf_internal_r+0x408>
    1124:	da000404 	addi	r8,sp,16
    1128:	003f5306 	br	e78 <__ram_exceptions_end+0xfbfe0c24>
    112c:	d8802017 	ldw	r2,128(sp)
    1130:	10000426 	beq	r2,zero,1144 <___vfprintf_internal_r+0x408>
    1134:	d9002c17 	ldw	r4,176(sp)
    1138:	d9801e04 	addi	r6,sp,120
    113c:	b80b883a 	mov	r5,r23
    1140:	00078540 	call	7854 <__sprint_r>
    1144:	b880030b 	ldhu	r2,12(r23)
    1148:	1080100c 	andi	r2,r2,64
    114c:	1005901e 	bne	r2,zero,2790 <___vfprintf_internal_r+0x1a54>
    1150:	d8802f17 	ldw	r2,188(sp)
    1154:	dfc04717 	ldw	ra,284(sp)
    1158:	df004617 	ldw	fp,280(sp)
    115c:	ddc04517 	ldw	r23,276(sp)
    1160:	dd804417 	ldw	r22,272(sp)
    1164:	dd404317 	ldw	r21,268(sp)
    1168:	dd004217 	ldw	r20,264(sp)
    116c:	dcc04117 	ldw	r19,260(sp)
    1170:	dc804017 	ldw	r18,256(sp)
    1174:	dc403f17 	ldw	r17,252(sp)
    1178:	dc003e17 	ldw	r16,248(sp)
    117c:	dec04804 	addi	sp,sp,288
    1180:	f800283a 	ret
    1184:	d9002c17 	ldw	r4,176(sp)
    1188:	0004fe00 	call	4fe0 <__sinit>
    118c:	003f0406 	br	da0 <__ram_exceptions_end+0xfbfe0b4c>
    1190:	d8802d17 	ldw	r2,180(sp)
    1194:	d9002d17 	ldw	r4,180(sp)
    1198:	10800017 	ldw	r2,0(r2)
    119c:	d8803115 	stw	r2,196(sp)
    11a0:	20800104 	addi	r2,r4,4
    11a4:	d9003117 	ldw	r4,196(sp)
    11a8:	203fa716 	blt	r4,zero,1048 <__ram_exceptions_end+0xfbfe0df4>
    11ac:	d8802d15 	stw	r2,180(sp)
    11b0:	ac400007 	ldb	r17,0(r21)
    11b4:	003f4206 	br	ec0 <__ram_exceptions_end+0xfbfe0c6c>
    11b8:	ac400007 	ldb	r17,0(r21)
    11bc:	aac00044 	addi	r11,r21,1
    11c0:	8a872826 	beq	r17,r10,2e64 <___vfprintf_internal_r+0x2128>
    11c4:	88bff404 	addi	r2,r17,-48
    11c8:	0009883a 	mov	r4,zero
    11cc:	30867d36 	bltu	r6,r2,2bc4 <___vfprintf_internal_r+0x1e88>
    11d0:	5c400007 	ldb	r17,0(r11)
    11d4:	210002a4 	muli	r4,r4,10
    11d8:	5d400044 	addi	r21,r11,1
    11dc:	a817883a 	mov	r11,r21
    11e0:	2089883a 	add	r4,r4,r2
    11e4:	88bff404 	addi	r2,r17,-48
    11e8:	30bff92e 	bgeu	r6,r2,11d0 <__ram_exceptions_end+0xfbfe0f7c>
    11ec:	2005c916 	blt	r4,zero,2914 <___vfprintf_internal_r+0x1bd8>
    11f0:	d9002915 	stw	r4,164(sp)
    11f4:	003f3306 	br	ec4 <__ram_exceptions_end+0xfbfe0c70>
    11f8:	94802014 	ori	r18,r18,128
    11fc:	ac400007 	ldb	r17,0(r21)
    1200:	003f2f06 	br	ec0 <__ram_exceptions_end+0xfbfe0c6c>
    1204:	a809883a 	mov	r4,r21
    1208:	d8003115 	stw	zero,196(sp)
    120c:	88bff404 	addi	r2,r17,-48
    1210:	0017883a 	mov	r11,zero
    1214:	24400007 	ldb	r17,0(r4)
    1218:	5ac002a4 	muli	r11,r11,10
    121c:	ad400044 	addi	r21,r21,1
    1220:	a809883a 	mov	r4,r21
    1224:	12d7883a 	add	r11,r2,r11
    1228:	88bff404 	addi	r2,r17,-48
    122c:	30bff92e 	bgeu	r6,r2,1214 <__ram_exceptions_end+0xfbfe0fc0>
    1230:	dac03115 	stw	r11,196(sp)
    1234:	003f2306 	br	ec4 <__ram_exceptions_end+0xfbfe0c70>
    1238:	18c03fcc 	andi	r3,r3,255
    123c:	18072b1e 	bne	r3,zero,2eec <___vfprintf_internal_r+0x21b0>
    1240:	94800414 	ori	r18,r18,16
    1244:	9080080c 	andi	r2,r18,32
    1248:	10037b26 	beq	r2,zero,2038 <___vfprintf_internal_r+0x12fc>
    124c:	d9402d17 	ldw	r5,180(sp)
    1250:	28800117 	ldw	r2,4(r5)
    1254:	2cc00017 	ldw	r19,0(r5)
    1258:	29400204 	addi	r5,r5,8
    125c:	d9402d15 	stw	r5,180(sp)
    1260:	102d883a 	mov	r22,r2
    1264:	10044b16 	blt	r2,zero,2394 <___vfprintf_internal_r+0x1658>
    1268:	d9402917 	ldw	r5,164(sp)
    126c:	df002783 	ldbu	fp,158(sp)
    1270:	2803bc16 	blt	r5,zero,2164 <___vfprintf_internal_r+0x1428>
    1274:	00ffdfc4 	movi	r3,-129
    1278:	9d84b03a 	or	r2,r19,r22
    127c:	90e4703a 	and	r18,r18,r3
    1280:	10017726 	beq	r2,zero,1860 <___vfprintf_internal_r+0xb24>
    1284:	b0038326 	beq	r22,zero,2094 <___vfprintf_internal_r+0x1358>
    1288:	dc402a15 	stw	r17,168(sp)
    128c:	dc001e04 	addi	r16,sp,120
    1290:	b023883a 	mov	r17,r22
    1294:	402d883a 	mov	r22,r8
    1298:	9809883a 	mov	r4,r19
    129c:	880b883a 	mov	r5,r17
    12a0:	01800284 	movi	r6,10
    12a4:	000f883a 	mov	r7,zero
    12a8:	000a7c80 	call	a7c8 <__umoddi3>
    12ac:	10800c04 	addi	r2,r2,48
    12b0:	843fffc4 	addi	r16,r16,-1
    12b4:	9809883a 	mov	r4,r19
    12b8:	880b883a 	mov	r5,r17
    12bc:	80800005 	stb	r2,0(r16)
    12c0:	01800284 	movi	r6,10
    12c4:	000f883a 	mov	r7,zero
    12c8:	000a2500 	call	a250 <__udivdi3>
    12cc:	1027883a 	mov	r19,r2
    12d0:	10c4b03a 	or	r2,r2,r3
    12d4:	1823883a 	mov	r17,r3
    12d8:	103fef1e 	bne	r2,zero,1298 <__ram_exceptions_end+0xfbfe1044>
    12dc:	d8c02817 	ldw	r3,160(sp)
    12e0:	dc402a17 	ldw	r17,168(sp)
    12e4:	b011883a 	mov	r8,r22
    12e8:	1c07c83a 	sub	r3,r3,r16
    12ec:	d8c02e15 	stw	r3,184(sp)
    12f0:	00005906 	br	1458 <___vfprintf_internal_r+0x71c>
    12f4:	18c03fcc 	andi	r3,r3,255
    12f8:	1806fa1e 	bne	r3,zero,2ee4 <___vfprintf_internal_r+0x21a8>
    12fc:	9080020c 	andi	r2,r18,8
    1300:	10048a26 	beq	r2,zero,252c <___vfprintf_internal_r+0x17f0>
    1304:	d8c02d17 	ldw	r3,180(sp)
    1308:	d9002d17 	ldw	r4,180(sp)
    130c:	d9402d17 	ldw	r5,180(sp)
    1310:	18c00017 	ldw	r3,0(r3)
    1314:	21000117 	ldw	r4,4(r4)
    1318:	29400204 	addi	r5,r5,8
    131c:	d8c03615 	stw	r3,216(sp)
    1320:	d9003815 	stw	r4,224(sp)
    1324:	d9402d15 	stw	r5,180(sp)
    1328:	d9003617 	ldw	r4,216(sp)
    132c:	d9403817 	ldw	r5,224(sp)
    1330:	da003d15 	stw	r8,244(sp)
    1334:	04000044 	movi	r16,1
    1338:	00073e00 	call	73e0 <__fpclassifyd>
    133c:	da003d17 	ldw	r8,244(sp)
    1340:	14041f1e 	bne	r2,r16,23c0 <___vfprintf_internal_r+0x1684>
    1344:	d9003617 	ldw	r4,216(sp)
    1348:	d9403817 	ldw	r5,224(sp)
    134c:	000d883a 	mov	r6,zero
    1350:	000f883a 	mov	r7,zero
    1354:	000bff80 	call	bff8 <__ledf2>
    1358:	da003d17 	ldw	r8,244(sp)
    135c:	1005be16 	blt	r2,zero,2a58 <___vfprintf_internal_r+0x1d1c>
    1360:	df002783 	ldbu	fp,158(sp)
    1364:	008011c4 	movi	r2,71
    1368:	1445330e 	bge	r2,r17,2838 <___vfprintf_internal_r+0x1afc>
    136c:	04000074 	movhi	r16,1
    1370:	84004f04 	addi	r16,r16,316
    1374:	00c000c4 	movi	r3,3
    1378:	00bfdfc4 	movi	r2,-129
    137c:	d8c02a15 	stw	r3,168(sp)
    1380:	90a4703a 	and	r18,r18,r2
    1384:	d8c02e15 	stw	r3,184(sp)
    1388:	d8002915 	stw	zero,164(sp)
    138c:	d8003215 	stw	zero,200(sp)
    1390:	00003706 	br	1470 <___vfprintf_internal_r+0x734>
    1394:	94800214 	ori	r18,r18,8
    1398:	ac400007 	ldb	r17,0(r21)
    139c:	003ec806 	br	ec0 <__ram_exceptions_end+0xfbfe0c6c>
    13a0:	18c03fcc 	andi	r3,r3,255
    13a4:	1806db1e 	bne	r3,zero,2f14 <___vfprintf_internal_r+0x21d8>
    13a8:	94800414 	ori	r18,r18,16
    13ac:	9080080c 	andi	r2,r18,32
    13b0:	1002d826 	beq	r2,zero,1f14 <___vfprintf_internal_r+0x11d8>
    13b4:	d9402d17 	ldw	r5,180(sp)
    13b8:	d8c02917 	ldw	r3,164(sp)
    13bc:	d8002785 	stb	zero,158(sp)
    13c0:	28800204 	addi	r2,r5,8
    13c4:	2cc00017 	ldw	r19,0(r5)
    13c8:	2d800117 	ldw	r22,4(r5)
    13cc:	18048f16 	blt	r3,zero,260c <___vfprintf_internal_r+0x18d0>
    13d0:	013fdfc4 	movi	r4,-129
    13d4:	9d86b03a 	or	r3,r19,r22
    13d8:	d8802d15 	stw	r2,180(sp)
    13dc:	9124703a 	and	r18,r18,r4
    13e0:	1802d91e 	bne	r3,zero,1f48 <___vfprintf_internal_r+0x120c>
    13e4:	d8c02917 	ldw	r3,164(sp)
    13e8:	0039883a 	mov	fp,zero
    13ec:	1805c326 	beq	r3,zero,2afc <___vfprintf_internal_r+0x1dc0>
    13f0:	0027883a 	mov	r19,zero
    13f4:	002d883a 	mov	r22,zero
    13f8:	dc001e04 	addi	r16,sp,120
    13fc:	9806d0fa 	srli	r3,r19,3
    1400:	b008977a 	slli	r4,r22,29
    1404:	b02cd0fa 	srli	r22,r22,3
    1408:	9cc001cc 	andi	r19,r19,7
    140c:	98800c04 	addi	r2,r19,48
    1410:	843fffc4 	addi	r16,r16,-1
    1414:	20e6b03a 	or	r19,r4,r3
    1418:	80800005 	stb	r2,0(r16)
    141c:	9d86b03a 	or	r3,r19,r22
    1420:	183ff61e 	bne	r3,zero,13fc <__ram_exceptions_end+0xfbfe11a8>
    1424:	90c0004c 	andi	r3,r18,1
    1428:	18013b26 	beq	r3,zero,1918 <___vfprintf_internal_r+0xbdc>
    142c:	10803fcc 	andi	r2,r2,255
    1430:	1080201c 	xori	r2,r2,128
    1434:	10bfe004 	addi	r2,r2,-128
    1438:	00c00c04 	movi	r3,48
    143c:	10c13626 	beq	r2,r3,1918 <___vfprintf_internal_r+0xbdc>
    1440:	80ffffc5 	stb	r3,-1(r16)
    1444:	d8c02817 	ldw	r3,160(sp)
    1448:	80bfffc4 	addi	r2,r16,-1
    144c:	1021883a 	mov	r16,r2
    1450:	1887c83a 	sub	r3,r3,r2
    1454:	d8c02e15 	stw	r3,184(sp)
    1458:	d8802e17 	ldw	r2,184(sp)
    145c:	d9002917 	ldw	r4,164(sp)
    1460:	1100010e 	bge	r2,r4,1468 <___vfprintf_internal_r+0x72c>
    1464:	2005883a 	mov	r2,r4
    1468:	d8802a15 	stw	r2,168(sp)
    146c:	d8003215 	stw	zero,200(sp)
    1470:	e7003fcc 	andi	fp,fp,255
    1474:	e700201c 	xori	fp,fp,128
    1478:	e73fe004 	addi	fp,fp,-128
    147c:	e0000326 	beq	fp,zero,148c <___vfprintf_internal_r+0x750>
    1480:	d8c02a17 	ldw	r3,168(sp)
    1484:	18c00044 	addi	r3,r3,1
    1488:	d8c02a15 	stw	r3,168(sp)
    148c:	90c0008c 	andi	r3,r18,2
    1490:	d8c02b15 	stw	r3,172(sp)
    1494:	18000326 	beq	r3,zero,14a4 <___vfprintf_internal_r+0x768>
    1498:	d8c02a17 	ldw	r3,168(sp)
    149c:	18c00084 	addi	r3,r3,2
    14a0:	d8c02a15 	stw	r3,168(sp)
    14a4:	90c0210c 	andi	r3,r18,132
    14a8:	d8c03015 	stw	r3,192(sp)
    14ac:	1801a31e 	bne	r3,zero,1b3c <___vfprintf_internal_r+0xe00>
    14b0:	d9003117 	ldw	r4,196(sp)
    14b4:	d8c02a17 	ldw	r3,168(sp)
    14b8:	20e7c83a 	sub	r19,r4,r3
    14bc:	04c19f0e 	bge	zero,r19,1b3c <___vfprintf_internal_r+0xe00>
    14c0:	02400404 	movi	r9,16
    14c4:	d8c02017 	ldw	r3,128(sp)
    14c8:	d8801f17 	ldw	r2,124(sp)
    14cc:	4cc50d0e 	bge	r9,r19,2904 <___vfprintf_internal_r+0x1bc8>
    14d0:	01400074 	movhi	r5,1
    14d4:	29406284 	addi	r5,r5,394
    14d8:	dc403b15 	stw	r17,236(sp)
    14dc:	d9403515 	stw	r5,212(sp)
    14e0:	9823883a 	mov	r17,r19
    14e4:	482d883a 	mov	r22,r9
    14e8:	9027883a 	mov	r19,r18
    14ec:	070001c4 	movi	fp,7
    14f0:	8025883a 	mov	r18,r16
    14f4:	dc002c17 	ldw	r16,176(sp)
    14f8:	00000306 	br	1508 <___vfprintf_internal_r+0x7cc>
    14fc:	8c7ffc04 	addi	r17,r17,-16
    1500:	42000204 	addi	r8,r8,8
    1504:	b440130e 	bge	r22,r17,1554 <___vfprintf_internal_r+0x818>
    1508:	01000074 	movhi	r4,1
    150c:	18c00404 	addi	r3,r3,16
    1510:	10800044 	addi	r2,r2,1
    1514:	21006284 	addi	r4,r4,394
    1518:	41000015 	stw	r4,0(r8)
    151c:	45800115 	stw	r22,4(r8)
    1520:	d8c02015 	stw	r3,128(sp)
    1524:	d8801f15 	stw	r2,124(sp)
    1528:	e0bff40e 	bge	fp,r2,14fc <__ram_exceptions_end+0xfbfe12a8>
    152c:	d9801e04 	addi	r6,sp,120
    1530:	b80b883a 	mov	r5,r23
    1534:	8009883a 	mov	r4,r16
    1538:	00078540 	call	7854 <__sprint_r>
    153c:	103f011e 	bne	r2,zero,1144 <__ram_exceptions_end+0xfbfe0ef0>
    1540:	8c7ffc04 	addi	r17,r17,-16
    1544:	d8c02017 	ldw	r3,128(sp)
    1548:	d8801f17 	ldw	r2,124(sp)
    154c:	da000404 	addi	r8,sp,16
    1550:	b47fed16 	blt	r22,r17,1508 <__ram_exceptions_end+0xfbfe12b4>
    1554:	9021883a 	mov	r16,r18
    1558:	9825883a 	mov	r18,r19
    155c:	8827883a 	mov	r19,r17
    1560:	dc403b17 	ldw	r17,236(sp)
    1564:	d9403517 	ldw	r5,212(sp)
    1568:	98c7883a 	add	r3,r19,r3
    156c:	10800044 	addi	r2,r2,1
    1570:	41400015 	stw	r5,0(r8)
    1574:	44c00115 	stw	r19,4(r8)
    1578:	d8c02015 	stw	r3,128(sp)
    157c:	d8801f15 	stw	r2,124(sp)
    1580:	010001c4 	movi	r4,7
    1584:	2082a316 	blt	r4,r2,2014 <___vfprintf_internal_r+0x12d8>
    1588:	df002787 	ldb	fp,158(sp)
    158c:	42000204 	addi	r8,r8,8
    1590:	e0000c26 	beq	fp,zero,15c4 <___vfprintf_internal_r+0x888>
    1594:	d8801f17 	ldw	r2,124(sp)
    1598:	d9002784 	addi	r4,sp,158
    159c:	18c00044 	addi	r3,r3,1
    15a0:	10800044 	addi	r2,r2,1
    15a4:	41000015 	stw	r4,0(r8)
    15a8:	01000044 	movi	r4,1
    15ac:	41000115 	stw	r4,4(r8)
    15b0:	d8c02015 	stw	r3,128(sp)
    15b4:	d8801f15 	stw	r2,124(sp)
    15b8:	010001c4 	movi	r4,7
    15bc:	20823c16 	blt	r4,r2,1eb0 <___vfprintf_internal_r+0x1174>
    15c0:	42000204 	addi	r8,r8,8
    15c4:	d8802b17 	ldw	r2,172(sp)
    15c8:	10000c26 	beq	r2,zero,15fc <___vfprintf_internal_r+0x8c0>
    15cc:	d8801f17 	ldw	r2,124(sp)
    15d0:	d9002704 	addi	r4,sp,156
    15d4:	18c00084 	addi	r3,r3,2
    15d8:	10800044 	addi	r2,r2,1
    15dc:	41000015 	stw	r4,0(r8)
    15e0:	01000084 	movi	r4,2
    15e4:	41000115 	stw	r4,4(r8)
    15e8:	d8c02015 	stw	r3,128(sp)
    15ec:	d8801f15 	stw	r2,124(sp)
    15f0:	010001c4 	movi	r4,7
    15f4:	20823616 	blt	r4,r2,1ed0 <___vfprintf_internal_r+0x1194>
    15f8:	42000204 	addi	r8,r8,8
    15fc:	d9003017 	ldw	r4,192(sp)
    1600:	00802004 	movi	r2,128
    1604:	20819926 	beq	r4,r2,1c6c <___vfprintf_internal_r+0xf30>
    1608:	d9402917 	ldw	r5,164(sp)
    160c:	d8802e17 	ldw	r2,184(sp)
    1610:	28adc83a 	sub	r22,r5,r2
    1614:	0580310e 	bge	zero,r22,16dc <___vfprintf_internal_r+0x9a0>
    1618:	07000404 	movi	fp,16
    161c:	d8801f17 	ldw	r2,124(sp)
    1620:	e584140e 	bge	fp,r22,2674 <___vfprintf_internal_r+0x1938>
    1624:	01400074 	movhi	r5,1
    1628:	29405e84 	addi	r5,r5,378
    162c:	dc402915 	stw	r17,164(sp)
    1630:	d9402b15 	stw	r5,172(sp)
    1634:	b023883a 	mov	r17,r22
    1638:	04c001c4 	movi	r19,7
    163c:	a82d883a 	mov	r22,r21
    1640:	902b883a 	mov	r21,r18
    1644:	8025883a 	mov	r18,r16
    1648:	dc002c17 	ldw	r16,176(sp)
    164c:	00000306 	br	165c <___vfprintf_internal_r+0x920>
    1650:	8c7ffc04 	addi	r17,r17,-16
    1654:	42000204 	addi	r8,r8,8
    1658:	e440110e 	bge	fp,r17,16a0 <___vfprintf_internal_r+0x964>
    165c:	18c00404 	addi	r3,r3,16
    1660:	10800044 	addi	r2,r2,1
    1664:	45000015 	stw	r20,0(r8)
    1668:	47000115 	stw	fp,4(r8)
    166c:	d8c02015 	stw	r3,128(sp)
    1670:	d8801f15 	stw	r2,124(sp)
    1674:	98bff60e 	bge	r19,r2,1650 <__ram_exceptions_end+0xfbfe13fc>
    1678:	d9801e04 	addi	r6,sp,120
    167c:	b80b883a 	mov	r5,r23
    1680:	8009883a 	mov	r4,r16
    1684:	00078540 	call	7854 <__sprint_r>
    1688:	103eae1e 	bne	r2,zero,1144 <__ram_exceptions_end+0xfbfe0ef0>
    168c:	8c7ffc04 	addi	r17,r17,-16
    1690:	d8c02017 	ldw	r3,128(sp)
    1694:	d8801f17 	ldw	r2,124(sp)
    1698:	da000404 	addi	r8,sp,16
    169c:	e47fef16 	blt	fp,r17,165c <__ram_exceptions_end+0xfbfe1408>
    16a0:	9021883a 	mov	r16,r18
    16a4:	a825883a 	mov	r18,r21
    16a8:	b02b883a 	mov	r21,r22
    16ac:	882d883a 	mov	r22,r17
    16b0:	dc402917 	ldw	r17,164(sp)
    16b4:	d9002b17 	ldw	r4,172(sp)
    16b8:	1d87883a 	add	r3,r3,r22
    16bc:	10800044 	addi	r2,r2,1
    16c0:	41000015 	stw	r4,0(r8)
    16c4:	45800115 	stw	r22,4(r8)
    16c8:	d8c02015 	stw	r3,128(sp)
    16cc:	d8801f15 	stw	r2,124(sp)
    16d0:	010001c4 	movi	r4,7
    16d4:	2081ee16 	blt	r4,r2,1e90 <___vfprintf_internal_r+0x1154>
    16d8:	42000204 	addi	r8,r8,8
    16dc:	9080400c 	andi	r2,r18,256
    16e0:	1001181e 	bne	r2,zero,1b44 <___vfprintf_internal_r+0xe08>
    16e4:	d9402e17 	ldw	r5,184(sp)
    16e8:	d8801f17 	ldw	r2,124(sp)
    16ec:	44000015 	stw	r16,0(r8)
    16f0:	1947883a 	add	r3,r3,r5
    16f4:	10800044 	addi	r2,r2,1
    16f8:	41400115 	stw	r5,4(r8)
    16fc:	d8c02015 	stw	r3,128(sp)
    1700:	d8801f15 	stw	r2,124(sp)
    1704:	010001c4 	movi	r4,7
    1708:	2081d316 	blt	r4,r2,1e58 <___vfprintf_internal_r+0x111c>
    170c:	42000204 	addi	r8,r8,8
    1710:	9480010c 	andi	r18,r18,4
    1714:	90003226 	beq	r18,zero,17e0 <___vfprintf_internal_r+0xaa4>
    1718:	d9403117 	ldw	r5,196(sp)
    171c:	d8802a17 	ldw	r2,168(sp)
    1720:	28a1c83a 	sub	r16,r5,r2
    1724:	04002e0e 	bge	zero,r16,17e0 <___vfprintf_internal_r+0xaa4>
    1728:	04400404 	movi	r17,16
    172c:	d8801f17 	ldw	r2,124(sp)
    1730:	8c04a20e 	bge	r17,r16,29bc <___vfprintf_internal_r+0x1c80>
    1734:	01400074 	movhi	r5,1
    1738:	29406284 	addi	r5,r5,394
    173c:	d9403515 	stw	r5,212(sp)
    1740:	048001c4 	movi	r18,7
    1744:	dcc02c17 	ldw	r19,176(sp)
    1748:	00000306 	br	1758 <___vfprintf_internal_r+0xa1c>
    174c:	843ffc04 	addi	r16,r16,-16
    1750:	42000204 	addi	r8,r8,8
    1754:	8c00130e 	bge	r17,r16,17a4 <___vfprintf_internal_r+0xa68>
    1758:	01000074 	movhi	r4,1
    175c:	18c00404 	addi	r3,r3,16
    1760:	10800044 	addi	r2,r2,1
    1764:	21006284 	addi	r4,r4,394
    1768:	41000015 	stw	r4,0(r8)
    176c:	44400115 	stw	r17,4(r8)
    1770:	d8c02015 	stw	r3,128(sp)
    1774:	d8801f15 	stw	r2,124(sp)
    1778:	90bff40e 	bge	r18,r2,174c <__ram_exceptions_end+0xfbfe14f8>
    177c:	d9801e04 	addi	r6,sp,120
    1780:	b80b883a 	mov	r5,r23
    1784:	9809883a 	mov	r4,r19
    1788:	00078540 	call	7854 <__sprint_r>
    178c:	103e6d1e 	bne	r2,zero,1144 <__ram_exceptions_end+0xfbfe0ef0>
    1790:	843ffc04 	addi	r16,r16,-16
    1794:	d8c02017 	ldw	r3,128(sp)
    1798:	d8801f17 	ldw	r2,124(sp)
    179c:	da000404 	addi	r8,sp,16
    17a0:	8c3fed16 	blt	r17,r16,1758 <__ram_exceptions_end+0xfbfe1504>
    17a4:	d9403517 	ldw	r5,212(sp)
    17a8:	1c07883a 	add	r3,r3,r16
    17ac:	10800044 	addi	r2,r2,1
    17b0:	41400015 	stw	r5,0(r8)
    17b4:	44000115 	stw	r16,4(r8)
    17b8:	d8c02015 	stw	r3,128(sp)
    17bc:	d8801f15 	stw	r2,124(sp)
    17c0:	010001c4 	movi	r4,7
    17c4:	2080060e 	bge	r4,r2,17e0 <___vfprintf_internal_r+0xaa4>
    17c8:	d9002c17 	ldw	r4,176(sp)
    17cc:	d9801e04 	addi	r6,sp,120
    17d0:	b80b883a 	mov	r5,r23
    17d4:	00078540 	call	7854 <__sprint_r>
    17d8:	103e5a1e 	bne	r2,zero,1144 <__ram_exceptions_end+0xfbfe0ef0>
    17dc:	d8c02017 	ldw	r3,128(sp)
    17e0:	d8803117 	ldw	r2,196(sp)
    17e4:	d9002a17 	ldw	r4,168(sp)
    17e8:	1100010e 	bge	r2,r4,17f0 <___vfprintf_internal_r+0xab4>
    17ec:	2005883a 	mov	r2,r4
    17f0:	d9402f17 	ldw	r5,188(sp)
    17f4:	288b883a 	add	r5,r5,r2
    17f8:	d9402f15 	stw	r5,188(sp)
    17fc:	18019e1e 	bne	r3,zero,1e78 <___vfprintf_internal_r+0x113c>
    1800:	a8800007 	ldb	r2,0(r21)
    1804:	d8001f15 	stw	zero,124(sp)
    1808:	da000404 	addi	r8,sp,16
    180c:	103d851e 	bne	r2,zero,e24 <__ram_exceptions_end+0xfbfe0bd0>
    1810:	a821883a 	mov	r16,r21
    1814:	003d9b06 	br	e84 <__ram_exceptions_end+0xfbfe0c30>
    1818:	18c03fcc 	andi	r3,r3,255
    181c:	1805c11e 	bne	r3,zero,2f24 <___vfprintf_internal_r+0x21e8>
    1820:	94800414 	ori	r18,r18,16
    1824:	9080080c 	andi	r2,r18,32
    1828:	10020c26 	beq	r2,zero,205c <___vfprintf_internal_r+0x1320>
    182c:	d8802d17 	ldw	r2,180(sp)
    1830:	d9002917 	ldw	r4,164(sp)
    1834:	d8002785 	stb	zero,158(sp)
    1838:	10c00204 	addi	r3,r2,8
    183c:	14c00017 	ldw	r19,0(r2)
    1840:	15800117 	ldw	r22,4(r2)
    1844:	20040f16 	blt	r4,zero,2884 <___vfprintf_internal_r+0x1b48>
    1848:	013fdfc4 	movi	r4,-129
    184c:	9d84b03a 	or	r2,r19,r22
    1850:	d8c02d15 	stw	r3,180(sp)
    1854:	9124703a 	and	r18,r18,r4
    1858:	0039883a 	mov	fp,zero
    185c:	103e891e 	bne	r2,zero,1284 <__ram_exceptions_end+0xfbfe1030>
    1860:	d9002917 	ldw	r4,164(sp)
    1864:	2002c11e 	bne	r4,zero,236c <___vfprintf_internal_r+0x1630>
    1868:	d8002915 	stw	zero,164(sp)
    186c:	d8002e15 	stw	zero,184(sp)
    1870:	dc001e04 	addi	r16,sp,120
    1874:	003ef806 	br	1458 <__ram_exceptions_end+0xfbfe1204>
    1878:	18c03fcc 	andi	r3,r3,255
    187c:	18059d1e 	bne	r3,zero,2ef4 <___vfprintf_internal_r+0x21b8>
    1880:	01400074 	movhi	r5,1
    1884:	29405204 	addi	r5,r5,328
    1888:	d9403915 	stw	r5,228(sp)
    188c:	9080080c 	andi	r2,r18,32
    1890:	10005226 	beq	r2,zero,19dc <___vfprintf_internal_r+0xca0>
    1894:	d8802d17 	ldw	r2,180(sp)
    1898:	14c00017 	ldw	r19,0(r2)
    189c:	15800117 	ldw	r22,4(r2)
    18a0:	10800204 	addi	r2,r2,8
    18a4:	d8802d15 	stw	r2,180(sp)
    18a8:	9080004c 	andi	r2,r18,1
    18ac:	10019026 	beq	r2,zero,1ef0 <___vfprintf_internal_r+0x11b4>
    18b0:	9d84b03a 	or	r2,r19,r22
    18b4:	10036926 	beq	r2,zero,265c <___vfprintf_internal_r+0x1920>
    18b8:	d8c02917 	ldw	r3,164(sp)
    18bc:	00800c04 	movi	r2,48
    18c0:	d8802705 	stb	r2,156(sp)
    18c4:	dc402745 	stb	r17,157(sp)
    18c8:	d8002785 	stb	zero,158(sp)
    18cc:	90800094 	ori	r2,r18,2
    18d0:	18045d16 	blt	r3,zero,2a48 <___vfprintf_internal_r+0x1d0c>
    18d4:	00bfdfc4 	movi	r2,-129
    18d8:	90a4703a 	and	r18,r18,r2
    18dc:	94800094 	ori	r18,r18,2
    18e0:	0039883a 	mov	fp,zero
    18e4:	d9003917 	ldw	r4,228(sp)
    18e8:	dc001e04 	addi	r16,sp,120
    18ec:	988003cc 	andi	r2,r19,15
    18f0:	b006973a 	slli	r3,r22,28
    18f4:	2085883a 	add	r2,r4,r2
    18f8:	9826d13a 	srli	r19,r19,4
    18fc:	10800003 	ldbu	r2,0(r2)
    1900:	b02cd13a 	srli	r22,r22,4
    1904:	843fffc4 	addi	r16,r16,-1
    1908:	1ce6b03a 	or	r19,r3,r19
    190c:	80800005 	stb	r2,0(r16)
    1910:	9d84b03a 	or	r2,r19,r22
    1914:	103ff51e 	bne	r2,zero,18ec <__ram_exceptions_end+0xfbfe1698>
    1918:	d8c02817 	ldw	r3,160(sp)
    191c:	1c07c83a 	sub	r3,r3,r16
    1920:	d8c02e15 	stw	r3,184(sp)
    1924:	003ecc06 	br	1458 <__ram_exceptions_end+0xfbfe1204>
    1928:	18c03fcc 	andi	r3,r3,255
    192c:	183e9f26 	beq	r3,zero,13ac <__ram_exceptions_end+0xfbfe1158>
    1930:	d9c02785 	stb	r7,158(sp)
    1934:	003e9d06 	br	13ac <__ram_exceptions_end+0xfbfe1158>
    1938:	00c00044 	movi	r3,1
    193c:	01c00ac4 	movi	r7,43
    1940:	ac400007 	ldb	r17,0(r21)
    1944:	003d5e06 	br	ec0 <__ram_exceptions_end+0xfbfe0c6c>
    1948:	94800814 	ori	r18,r18,32
    194c:	ac400007 	ldb	r17,0(r21)
    1950:	003d5b06 	br	ec0 <__ram_exceptions_end+0xfbfe0c6c>
    1954:	d8c02d17 	ldw	r3,180(sp)
    1958:	d8002785 	stb	zero,158(sp)
    195c:	1c000017 	ldw	r16,0(r3)
    1960:	1cc00104 	addi	r19,r3,4
    1964:	80041926 	beq	r16,zero,29cc <___vfprintf_internal_r+0x1c90>
    1968:	d9002917 	ldw	r4,164(sp)
    196c:	2003d016 	blt	r4,zero,28b0 <___vfprintf_internal_r+0x1b74>
    1970:	200d883a 	mov	r6,r4
    1974:	000b883a 	mov	r5,zero
    1978:	8009883a 	mov	r4,r16
    197c:	da003d15 	stw	r8,244(sp)
    1980:	00060900 	call	6090 <memchr>
    1984:	da003d17 	ldw	r8,244(sp)
    1988:	10045426 	beq	r2,zero,2adc <___vfprintf_internal_r+0x1da0>
    198c:	1405c83a 	sub	r2,r2,r16
    1990:	d8802e15 	stw	r2,184(sp)
    1994:	1003cc16 	blt	r2,zero,28c8 <___vfprintf_internal_r+0x1b8c>
    1998:	df002783 	ldbu	fp,158(sp)
    199c:	d8802a15 	stw	r2,168(sp)
    19a0:	dcc02d15 	stw	r19,180(sp)
    19a4:	d8002915 	stw	zero,164(sp)
    19a8:	d8003215 	stw	zero,200(sp)
    19ac:	003eb006 	br	1470 <__ram_exceptions_end+0xfbfe121c>
    19b0:	18c03fcc 	andi	r3,r3,255
    19b4:	183f9b26 	beq	r3,zero,1824 <__ram_exceptions_end+0xfbfe15d0>
    19b8:	d9c02785 	stb	r7,158(sp)
    19bc:	003f9906 	br	1824 <__ram_exceptions_end+0xfbfe15d0>
    19c0:	18c03fcc 	andi	r3,r3,255
    19c4:	1805551e 	bne	r3,zero,2f1c <___vfprintf_internal_r+0x21e0>
    19c8:	01400074 	movhi	r5,1
    19cc:	29405704 	addi	r5,r5,348
    19d0:	d9403915 	stw	r5,228(sp)
    19d4:	9080080c 	andi	r2,r18,32
    19d8:	103fae1e 	bne	r2,zero,1894 <__ram_exceptions_end+0xfbfe1640>
    19dc:	9080040c 	andi	r2,r18,16
    19e0:	1002de26 	beq	r2,zero,255c <___vfprintf_internal_r+0x1820>
    19e4:	d8c02d17 	ldw	r3,180(sp)
    19e8:	002d883a 	mov	r22,zero
    19ec:	1cc00017 	ldw	r19,0(r3)
    19f0:	18c00104 	addi	r3,r3,4
    19f4:	d8c02d15 	stw	r3,180(sp)
    19f8:	003fab06 	br	18a8 <__ram_exceptions_end+0xfbfe1654>
    19fc:	38803fcc 	andi	r2,r7,255
    1a00:	1080201c 	xori	r2,r2,128
    1a04:	10bfe004 	addi	r2,r2,-128
    1a08:	1002d21e 	bne	r2,zero,2554 <___vfprintf_internal_r+0x1818>
    1a0c:	00c00044 	movi	r3,1
    1a10:	01c00804 	movi	r7,32
    1a14:	ac400007 	ldb	r17,0(r21)
    1a18:	003d2906 	br	ec0 <__ram_exceptions_end+0xfbfe0c6c>
    1a1c:	94800054 	ori	r18,r18,1
    1a20:	ac400007 	ldb	r17,0(r21)
    1a24:	003d2606 	br	ec0 <__ram_exceptions_end+0xfbfe0c6c>
    1a28:	18c03fcc 	andi	r3,r3,255
    1a2c:	183e0526 	beq	r3,zero,1244 <__ram_exceptions_end+0xfbfe0ff0>
    1a30:	d9c02785 	stb	r7,158(sp)
    1a34:	003e0306 	br	1244 <__ram_exceptions_end+0xfbfe0ff0>
    1a38:	94801014 	ori	r18,r18,64
    1a3c:	ac400007 	ldb	r17,0(r21)
    1a40:	003d1f06 	br	ec0 <__ram_exceptions_end+0xfbfe0c6c>
    1a44:	ac400007 	ldb	r17,0(r21)
    1a48:	8a438726 	beq	r17,r9,2868 <___vfprintf_internal_r+0x1b2c>
    1a4c:	94800414 	ori	r18,r18,16
    1a50:	003d1b06 	br	ec0 <__ram_exceptions_end+0xfbfe0c6c>
    1a54:	18c03fcc 	andi	r3,r3,255
    1a58:	1805341e 	bne	r3,zero,2f2c <___vfprintf_internal_r+0x21f0>
    1a5c:	9080080c 	andi	r2,r18,32
    1a60:	1002cd26 	beq	r2,zero,2598 <___vfprintf_internal_r+0x185c>
    1a64:	d9402d17 	ldw	r5,180(sp)
    1a68:	d9002f17 	ldw	r4,188(sp)
    1a6c:	28800017 	ldw	r2,0(r5)
    1a70:	2007d7fa 	srai	r3,r4,31
    1a74:	29400104 	addi	r5,r5,4
    1a78:	d9402d15 	stw	r5,180(sp)
    1a7c:	11000015 	stw	r4,0(r2)
    1a80:	10c00115 	stw	r3,4(r2)
    1a84:	003ce506 	br	e1c <__ram_exceptions_end+0xfbfe0bc8>
    1a88:	d8c02d17 	ldw	r3,180(sp)
    1a8c:	d9002d17 	ldw	r4,180(sp)
    1a90:	d8002785 	stb	zero,158(sp)
    1a94:	18800017 	ldw	r2,0(r3)
    1a98:	21000104 	addi	r4,r4,4
    1a9c:	00c00044 	movi	r3,1
    1aa0:	d8c02a15 	stw	r3,168(sp)
    1aa4:	d8801405 	stb	r2,80(sp)
    1aa8:	d9002d15 	stw	r4,180(sp)
    1aac:	d8c02e15 	stw	r3,184(sp)
    1ab0:	d8002915 	stw	zero,164(sp)
    1ab4:	d8003215 	stw	zero,200(sp)
    1ab8:	dc001404 	addi	r16,sp,80
    1abc:	0039883a 	mov	fp,zero
    1ac0:	003e7206 	br	148c <__ram_exceptions_end+0xfbfe1238>
    1ac4:	01000074 	movhi	r4,1
    1ac8:	21005704 	addi	r4,r4,348
    1acc:	0039883a 	mov	fp,zero
    1ad0:	d9003915 	stw	r4,228(sp)
    1ad4:	04401e04 	movi	r17,120
    1ad8:	003f8206 	br	18e4 <__ram_exceptions_end+0xfbfe1690>
    1adc:	18c03fcc 	andi	r3,r3,255
    1ae0:	1805061e 	bne	r3,zero,2efc <___vfprintf_internal_r+0x21c0>
    1ae4:	883d9126 	beq	r17,zero,112c <__ram_exceptions_end+0xfbfe0ed8>
    1ae8:	00c00044 	movi	r3,1
    1aec:	d8c02a15 	stw	r3,168(sp)
    1af0:	dc401405 	stb	r17,80(sp)
    1af4:	d8002785 	stb	zero,158(sp)
    1af8:	003fec06 	br	1aac <__ram_exceptions_end+0xfbfe1858>
    1afc:	01400074 	movhi	r5,1
    1b00:	29405704 	addi	r5,r5,348
    1b04:	d9403915 	stw	r5,228(sp)
    1b08:	d8c02d15 	stw	r3,180(sp)
    1b0c:	1025883a 	mov	r18,r2
    1b10:	04401e04 	movi	r17,120
    1b14:	9d84b03a 	or	r2,r19,r22
    1b18:	1000fc1e 	bne	r2,zero,1f0c <___vfprintf_internal_r+0x11d0>
    1b1c:	0039883a 	mov	fp,zero
    1b20:	00800084 	movi	r2,2
    1b24:	10803fcc 	andi	r2,r2,255
    1b28:	00c00044 	movi	r3,1
    1b2c:	10c20f26 	beq	r2,r3,236c <___vfprintf_internal_r+0x1630>
    1b30:	00c00084 	movi	r3,2
    1b34:	10fd6326 	beq	r2,r3,10c4 <__ram_exceptions_end+0xfbfe0e70>
    1b38:	003e2d06 	br	13f0 <__ram_exceptions_end+0xfbfe119c>
    1b3c:	d8c02017 	ldw	r3,128(sp)
    1b40:	003e9306 	br	1590 <__ram_exceptions_end+0xfbfe133c>
    1b44:	00801944 	movi	r2,101
    1b48:	14407e0e 	bge	r2,r17,1d44 <___vfprintf_internal_r+0x1008>
    1b4c:	d9003617 	ldw	r4,216(sp)
    1b50:	d9403817 	ldw	r5,224(sp)
    1b54:	000d883a 	mov	r6,zero
    1b58:	000f883a 	mov	r7,zero
    1b5c:	d8c03c15 	stw	r3,240(sp)
    1b60:	da003d15 	stw	r8,244(sp)
    1b64:	000be940 	call	be94 <__eqdf2>
    1b68:	d8c03c17 	ldw	r3,240(sp)
    1b6c:	da003d17 	ldw	r8,244(sp)
    1b70:	1000f71e 	bne	r2,zero,1f50 <___vfprintf_internal_r+0x1214>
    1b74:	d8801f17 	ldw	r2,124(sp)
    1b78:	01000074 	movhi	r4,1
    1b7c:	21005e04 	addi	r4,r4,376
    1b80:	18c00044 	addi	r3,r3,1
    1b84:	10800044 	addi	r2,r2,1
    1b88:	41000015 	stw	r4,0(r8)
    1b8c:	01000044 	movi	r4,1
    1b90:	41000115 	stw	r4,4(r8)
    1b94:	d8c02015 	stw	r3,128(sp)
    1b98:	d8801f15 	stw	r2,124(sp)
    1b9c:	010001c4 	movi	r4,7
    1ba0:	2082b816 	blt	r4,r2,2684 <___vfprintf_internal_r+0x1948>
    1ba4:	42000204 	addi	r8,r8,8
    1ba8:	d8802617 	ldw	r2,152(sp)
    1bac:	d9403317 	ldw	r5,204(sp)
    1bb0:	11400216 	blt	r2,r5,1bbc <___vfprintf_internal_r+0xe80>
    1bb4:	9080004c 	andi	r2,r18,1
    1bb8:	103ed526 	beq	r2,zero,1710 <__ram_exceptions_end+0xfbfe14bc>
    1bbc:	d8803717 	ldw	r2,220(sp)
    1bc0:	d9003417 	ldw	r4,208(sp)
    1bc4:	d9403717 	ldw	r5,220(sp)
    1bc8:	1887883a 	add	r3,r3,r2
    1bcc:	d8801f17 	ldw	r2,124(sp)
    1bd0:	41000015 	stw	r4,0(r8)
    1bd4:	41400115 	stw	r5,4(r8)
    1bd8:	10800044 	addi	r2,r2,1
    1bdc:	d8c02015 	stw	r3,128(sp)
    1be0:	d8801f15 	stw	r2,124(sp)
    1be4:	010001c4 	movi	r4,7
    1be8:	20832916 	blt	r4,r2,2890 <___vfprintf_internal_r+0x1b54>
    1bec:	42000204 	addi	r8,r8,8
    1bf0:	d8803317 	ldw	r2,204(sp)
    1bf4:	143fffc4 	addi	r16,r2,-1
    1bf8:	043ec50e 	bge	zero,r16,1710 <__ram_exceptions_end+0xfbfe14bc>
    1bfc:	04400404 	movi	r17,16
    1c00:	d8801f17 	ldw	r2,124(sp)
    1c04:	8c00880e 	bge	r17,r16,1e28 <___vfprintf_internal_r+0x10ec>
    1c08:	01400074 	movhi	r5,1
    1c0c:	29405e84 	addi	r5,r5,378
    1c10:	d9402b15 	stw	r5,172(sp)
    1c14:	058001c4 	movi	r22,7
    1c18:	dcc02c17 	ldw	r19,176(sp)
    1c1c:	00000306 	br	1c2c <___vfprintf_internal_r+0xef0>
    1c20:	42000204 	addi	r8,r8,8
    1c24:	843ffc04 	addi	r16,r16,-16
    1c28:	8c00820e 	bge	r17,r16,1e34 <___vfprintf_internal_r+0x10f8>
    1c2c:	18c00404 	addi	r3,r3,16
    1c30:	10800044 	addi	r2,r2,1
    1c34:	45000015 	stw	r20,0(r8)
    1c38:	44400115 	stw	r17,4(r8)
    1c3c:	d8c02015 	stw	r3,128(sp)
    1c40:	d8801f15 	stw	r2,124(sp)
    1c44:	b0bff60e 	bge	r22,r2,1c20 <__ram_exceptions_end+0xfbfe19cc>
    1c48:	d9801e04 	addi	r6,sp,120
    1c4c:	b80b883a 	mov	r5,r23
    1c50:	9809883a 	mov	r4,r19
    1c54:	00078540 	call	7854 <__sprint_r>
    1c58:	103d3a1e 	bne	r2,zero,1144 <__ram_exceptions_end+0xfbfe0ef0>
    1c5c:	d8c02017 	ldw	r3,128(sp)
    1c60:	d8801f17 	ldw	r2,124(sp)
    1c64:	da000404 	addi	r8,sp,16
    1c68:	003fee06 	br	1c24 <__ram_exceptions_end+0xfbfe19d0>
    1c6c:	d9403117 	ldw	r5,196(sp)
    1c70:	d8802a17 	ldw	r2,168(sp)
    1c74:	28adc83a 	sub	r22,r5,r2
    1c78:	05be630e 	bge	zero,r22,1608 <__ram_exceptions_end+0xfbfe13b4>
    1c7c:	07000404 	movi	fp,16
    1c80:	d8801f17 	ldw	r2,124(sp)
    1c84:	e5838f0e 	bge	fp,r22,2ac4 <___vfprintf_internal_r+0x1d88>
    1c88:	01400074 	movhi	r5,1
    1c8c:	29405e84 	addi	r5,r5,378
    1c90:	dc403015 	stw	r17,192(sp)
    1c94:	d9402b15 	stw	r5,172(sp)
    1c98:	b023883a 	mov	r17,r22
    1c9c:	04c001c4 	movi	r19,7
    1ca0:	a82d883a 	mov	r22,r21
    1ca4:	902b883a 	mov	r21,r18
    1ca8:	8025883a 	mov	r18,r16
    1cac:	dc002c17 	ldw	r16,176(sp)
    1cb0:	00000306 	br	1cc0 <___vfprintf_internal_r+0xf84>
    1cb4:	8c7ffc04 	addi	r17,r17,-16
    1cb8:	42000204 	addi	r8,r8,8
    1cbc:	e440110e 	bge	fp,r17,1d04 <___vfprintf_internal_r+0xfc8>
    1cc0:	18c00404 	addi	r3,r3,16
    1cc4:	10800044 	addi	r2,r2,1
    1cc8:	45000015 	stw	r20,0(r8)
    1ccc:	47000115 	stw	fp,4(r8)
    1cd0:	d8c02015 	stw	r3,128(sp)
    1cd4:	d8801f15 	stw	r2,124(sp)
    1cd8:	98bff60e 	bge	r19,r2,1cb4 <__ram_exceptions_end+0xfbfe1a60>
    1cdc:	d9801e04 	addi	r6,sp,120
    1ce0:	b80b883a 	mov	r5,r23
    1ce4:	8009883a 	mov	r4,r16
    1ce8:	00078540 	call	7854 <__sprint_r>
    1cec:	103d151e 	bne	r2,zero,1144 <__ram_exceptions_end+0xfbfe0ef0>
    1cf0:	8c7ffc04 	addi	r17,r17,-16
    1cf4:	d8c02017 	ldw	r3,128(sp)
    1cf8:	d8801f17 	ldw	r2,124(sp)
    1cfc:	da000404 	addi	r8,sp,16
    1d00:	e47fef16 	blt	fp,r17,1cc0 <__ram_exceptions_end+0xfbfe1a6c>
    1d04:	9021883a 	mov	r16,r18
    1d08:	a825883a 	mov	r18,r21
    1d0c:	b02b883a 	mov	r21,r22
    1d10:	882d883a 	mov	r22,r17
    1d14:	dc403017 	ldw	r17,192(sp)
    1d18:	d9002b17 	ldw	r4,172(sp)
    1d1c:	1d87883a 	add	r3,r3,r22
    1d20:	10800044 	addi	r2,r2,1
    1d24:	41000015 	stw	r4,0(r8)
    1d28:	45800115 	stw	r22,4(r8)
    1d2c:	d8c02015 	stw	r3,128(sp)
    1d30:	d8801f15 	stw	r2,124(sp)
    1d34:	010001c4 	movi	r4,7
    1d38:	20818e16 	blt	r4,r2,2374 <___vfprintf_internal_r+0x1638>
    1d3c:	42000204 	addi	r8,r8,8
    1d40:	003e3106 	br	1608 <__ram_exceptions_end+0xfbfe13b4>
    1d44:	d9403317 	ldw	r5,204(sp)
    1d48:	00800044 	movi	r2,1
    1d4c:	18c00044 	addi	r3,r3,1
    1d50:	1141530e 	bge	r2,r5,22a0 <___vfprintf_internal_r+0x1564>
    1d54:	dc401f17 	ldw	r17,124(sp)
    1d58:	00800044 	movi	r2,1
    1d5c:	40800115 	stw	r2,4(r8)
    1d60:	8c400044 	addi	r17,r17,1
    1d64:	44000015 	stw	r16,0(r8)
    1d68:	d8c02015 	stw	r3,128(sp)
    1d6c:	dc401f15 	stw	r17,124(sp)
    1d70:	008001c4 	movi	r2,7
    1d74:	14416b16 	blt	r2,r17,2324 <___vfprintf_internal_r+0x15e8>
    1d78:	42000204 	addi	r8,r8,8
    1d7c:	d8803717 	ldw	r2,220(sp)
    1d80:	d9003417 	ldw	r4,208(sp)
    1d84:	8c400044 	addi	r17,r17,1
    1d88:	10c7883a 	add	r3,r2,r3
    1d8c:	40800115 	stw	r2,4(r8)
    1d90:	41000015 	stw	r4,0(r8)
    1d94:	d8c02015 	stw	r3,128(sp)
    1d98:	dc401f15 	stw	r17,124(sp)
    1d9c:	008001c4 	movi	r2,7
    1da0:	14416916 	blt	r2,r17,2348 <___vfprintf_internal_r+0x160c>
    1da4:	45800204 	addi	r22,r8,8
    1da8:	d9003617 	ldw	r4,216(sp)
    1dac:	d9403817 	ldw	r5,224(sp)
    1db0:	000d883a 	mov	r6,zero
    1db4:	000f883a 	mov	r7,zero
    1db8:	d8c03c15 	stw	r3,240(sp)
    1dbc:	000be940 	call	be94 <__eqdf2>
    1dc0:	d8c03c17 	ldw	r3,240(sp)
    1dc4:	1000bc26 	beq	r2,zero,20b8 <___vfprintf_internal_r+0x137c>
    1dc8:	d9403317 	ldw	r5,204(sp)
    1dcc:	84000044 	addi	r16,r16,1
    1dd0:	8c400044 	addi	r17,r17,1
    1dd4:	28bfffc4 	addi	r2,r5,-1
    1dd8:	1887883a 	add	r3,r3,r2
    1ddc:	b0800115 	stw	r2,4(r22)
    1de0:	b4000015 	stw	r16,0(r22)
    1de4:	d8c02015 	stw	r3,128(sp)
    1de8:	dc401f15 	stw	r17,124(sp)
    1dec:	008001c4 	movi	r2,7
    1df0:	14414316 	blt	r2,r17,2300 <___vfprintf_internal_r+0x15c4>
    1df4:	b5800204 	addi	r22,r22,8
    1df8:	d9003a17 	ldw	r4,232(sp)
    1dfc:	df0022c4 	addi	fp,sp,139
    1e00:	8c400044 	addi	r17,r17,1
    1e04:	20c7883a 	add	r3,r4,r3
    1e08:	b7000015 	stw	fp,0(r22)
    1e0c:	b1000115 	stw	r4,4(r22)
    1e10:	d8c02015 	stw	r3,128(sp)
    1e14:	dc401f15 	stw	r17,124(sp)
    1e18:	008001c4 	movi	r2,7
    1e1c:	14400e16 	blt	r2,r17,1e58 <___vfprintf_internal_r+0x111c>
    1e20:	b2000204 	addi	r8,r22,8
    1e24:	003e3a06 	br	1710 <__ram_exceptions_end+0xfbfe14bc>
    1e28:	01000074 	movhi	r4,1
    1e2c:	21005e84 	addi	r4,r4,378
    1e30:	d9002b15 	stw	r4,172(sp)
    1e34:	d9002b17 	ldw	r4,172(sp)
    1e38:	1c07883a 	add	r3,r3,r16
    1e3c:	44000115 	stw	r16,4(r8)
    1e40:	41000015 	stw	r4,0(r8)
    1e44:	10800044 	addi	r2,r2,1
    1e48:	d8c02015 	stw	r3,128(sp)
    1e4c:	d8801f15 	stw	r2,124(sp)
    1e50:	010001c4 	movi	r4,7
    1e54:	20be2d0e 	bge	r4,r2,170c <__ram_exceptions_end+0xfbfe14b8>
    1e58:	d9002c17 	ldw	r4,176(sp)
    1e5c:	d9801e04 	addi	r6,sp,120
    1e60:	b80b883a 	mov	r5,r23
    1e64:	00078540 	call	7854 <__sprint_r>
    1e68:	103cb61e 	bne	r2,zero,1144 <__ram_exceptions_end+0xfbfe0ef0>
    1e6c:	d8c02017 	ldw	r3,128(sp)
    1e70:	da000404 	addi	r8,sp,16
    1e74:	003e2606 	br	1710 <__ram_exceptions_end+0xfbfe14bc>
    1e78:	d9002c17 	ldw	r4,176(sp)
    1e7c:	d9801e04 	addi	r6,sp,120
    1e80:	b80b883a 	mov	r5,r23
    1e84:	00078540 	call	7854 <__sprint_r>
    1e88:	103e5d26 	beq	r2,zero,1800 <__ram_exceptions_end+0xfbfe15ac>
    1e8c:	003cad06 	br	1144 <__ram_exceptions_end+0xfbfe0ef0>
    1e90:	d9002c17 	ldw	r4,176(sp)
    1e94:	d9801e04 	addi	r6,sp,120
    1e98:	b80b883a 	mov	r5,r23
    1e9c:	00078540 	call	7854 <__sprint_r>
    1ea0:	103ca81e 	bne	r2,zero,1144 <__ram_exceptions_end+0xfbfe0ef0>
    1ea4:	d8c02017 	ldw	r3,128(sp)
    1ea8:	da000404 	addi	r8,sp,16
    1eac:	003e0b06 	br	16dc <__ram_exceptions_end+0xfbfe1488>
    1eb0:	d9002c17 	ldw	r4,176(sp)
    1eb4:	d9801e04 	addi	r6,sp,120
    1eb8:	b80b883a 	mov	r5,r23
    1ebc:	00078540 	call	7854 <__sprint_r>
    1ec0:	103ca01e 	bne	r2,zero,1144 <__ram_exceptions_end+0xfbfe0ef0>
    1ec4:	d8c02017 	ldw	r3,128(sp)
    1ec8:	da000404 	addi	r8,sp,16
    1ecc:	003dbd06 	br	15c4 <__ram_exceptions_end+0xfbfe1370>
    1ed0:	d9002c17 	ldw	r4,176(sp)
    1ed4:	d9801e04 	addi	r6,sp,120
    1ed8:	b80b883a 	mov	r5,r23
    1edc:	00078540 	call	7854 <__sprint_r>
    1ee0:	103c981e 	bne	r2,zero,1144 <__ram_exceptions_end+0xfbfe0ef0>
    1ee4:	d8c02017 	ldw	r3,128(sp)
    1ee8:	da000404 	addi	r8,sp,16
    1eec:	003dc306 	br	15fc <__ram_exceptions_end+0xfbfe13a8>
    1ef0:	d8802917 	ldw	r2,164(sp)
    1ef4:	d8002785 	stb	zero,158(sp)
    1ef8:	103f0616 	blt	r2,zero,1b14 <__ram_exceptions_end+0xfbfe18c0>
    1efc:	00ffdfc4 	movi	r3,-129
    1f00:	9d84b03a 	or	r2,r19,r22
    1f04:	90e4703a 	and	r18,r18,r3
    1f08:	103c6b26 	beq	r2,zero,10b8 <__ram_exceptions_end+0xfbfe0e64>
    1f0c:	0039883a 	mov	fp,zero
    1f10:	003e7406 	br	18e4 <__ram_exceptions_end+0xfbfe1690>
    1f14:	9080040c 	andi	r2,r18,16
    1f18:	1001b326 	beq	r2,zero,25e8 <___vfprintf_internal_r+0x18ac>
    1f1c:	d9002d17 	ldw	r4,180(sp)
    1f20:	d9402917 	ldw	r5,164(sp)
    1f24:	d8002785 	stb	zero,158(sp)
    1f28:	20800104 	addi	r2,r4,4
    1f2c:	24c00017 	ldw	r19,0(r4)
    1f30:	002d883a 	mov	r22,zero
    1f34:	2801b516 	blt	r5,zero,260c <___vfprintf_internal_r+0x18d0>
    1f38:	00ffdfc4 	movi	r3,-129
    1f3c:	d8802d15 	stw	r2,180(sp)
    1f40:	90e4703a 	and	r18,r18,r3
    1f44:	983d2726 	beq	r19,zero,13e4 <__ram_exceptions_end+0xfbfe1190>
    1f48:	0039883a 	mov	fp,zero
    1f4c:	003d2a06 	br	13f8 <__ram_exceptions_end+0xfbfe11a4>
    1f50:	dc402617 	ldw	r17,152(sp)
    1f54:	0441d30e 	bge	zero,r17,26a4 <___vfprintf_internal_r+0x1968>
    1f58:	dc403217 	ldw	r17,200(sp)
    1f5c:	d8803317 	ldw	r2,204(sp)
    1f60:	1440010e 	bge	r2,r17,1f68 <___vfprintf_internal_r+0x122c>
    1f64:	1023883a 	mov	r17,r2
    1f68:	04400a0e 	bge	zero,r17,1f94 <___vfprintf_internal_r+0x1258>
    1f6c:	d8801f17 	ldw	r2,124(sp)
    1f70:	1c47883a 	add	r3,r3,r17
    1f74:	44000015 	stw	r16,0(r8)
    1f78:	10800044 	addi	r2,r2,1
    1f7c:	44400115 	stw	r17,4(r8)
    1f80:	d8c02015 	stw	r3,128(sp)
    1f84:	d8801f15 	stw	r2,124(sp)
    1f88:	010001c4 	movi	r4,7
    1f8c:	20826516 	blt	r4,r2,2924 <___vfprintf_internal_r+0x1be8>
    1f90:	42000204 	addi	r8,r8,8
    1f94:	88026116 	blt	r17,zero,291c <___vfprintf_internal_r+0x1be0>
    1f98:	d9003217 	ldw	r4,200(sp)
    1f9c:	2463c83a 	sub	r17,r4,r17
    1fa0:	04407b0e 	bge	zero,r17,2190 <___vfprintf_internal_r+0x1454>
    1fa4:	05800404 	movi	r22,16
    1fa8:	d8801f17 	ldw	r2,124(sp)
    1fac:	b4419d0e 	bge	r22,r17,2624 <___vfprintf_internal_r+0x18e8>
    1fb0:	01000074 	movhi	r4,1
    1fb4:	21005e84 	addi	r4,r4,378
    1fb8:	d9002b15 	stw	r4,172(sp)
    1fbc:	070001c4 	movi	fp,7
    1fc0:	dcc02c17 	ldw	r19,176(sp)
    1fc4:	00000306 	br	1fd4 <___vfprintf_internal_r+0x1298>
    1fc8:	42000204 	addi	r8,r8,8
    1fcc:	8c7ffc04 	addi	r17,r17,-16
    1fd0:	b441970e 	bge	r22,r17,2630 <___vfprintf_internal_r+0x18f4>
    1fd4:	18c00404 	addi	r3,r3,16
    1fd8:	10800044 	addi	r2,r2,1
    1fdc:	45000015 	stw	r20,0(r8)
    1fe0:	45800115 	stw	r22,4(r8)
    1fe4:	d8c02015 	stw	r3,128(sp)
    1fe8:	d8801f15 	stw	r2,124(sp)
    1fec:	e0bff60e 	bge	fp,r2,1fc8 <__ram_exceptions_end+0xfbfe1d74>
    1ff0:	d9801e04 	addi	r6,sp,120
    1ff4:	b80b883a 	mov	r5,r23
    1ff8:	9809883a 	mov	r4,r19
    1ffc:	00078540 	call	7854 <__sprint_r>
    2000:	103c501e 	bne	r2,zero,1144 <__ram_exceptions_end+0xfbfe0ef0>
    2004:	d8c02017 	ldw	r3,128(sp)
    2008:	d8801f17 	ldw	r2,124(sp)
    200c:	da000404 	addi	r8,sp,16
    2010:	003fee06 	br	1fcc <__ram_exceptions_end+0xfbfe1d78>
    2014:	d9002c17 	ldw	r4,176(sp)
    2018:	d9801e04 	addi	r6,sp,120
    201c:	b80b883a 	mov	r5,r23
    2020:	00078540 	call	7854 <__sprint_r>
    2024:	103c471e 	bne	r2,zero,1144 <__ram_exceptions_end+0xfbfe0ef0>
    2028:	d8c02017 	ldw	r3,128(sp)
    202c:	df002787 	ldb	fp,158(sp)
    2030:	da000404 	addi	r8,sp,16
    2034:	003d5606 	br	1590 <__ram_exceptions_end+0xfbfe133c>
    2038:	9080040c 	andi	r2,r18,16
    203c:	10016126 	beq	r2,zero,25c4 <___vfprintf_internal_r+0x1888>
    2040:	d8802d17 	ldw	r2,180(sp)
    2044:	14c00017 	ldw	r19,0(r2)
    2048:	10800104 	addi	r2,r2,4
    204c:	d8802d15 	stw	r2,180(sp)
    2050:	982dd7fa 	srai	r22,r19,31
    2054:	b005883a 	mov	r2,r22
    2058:	003c8206 	br	1264 <__ram_exceptions_end+0xfbfe1010>
    205c:	9080040c 	andi	r2,r18,16
    2060:	10003526 	beq	r2,zero,2138 <___vfprintf_internal_r+0x13fc>
    2064:	d9402d17 	ldw	r5,180(sp)
    2068:	d8c02917 	ldw	r3,164(sp)
    206c:	d8002785 	stb	zero,158(sp)
    2070:	28800104 	addi	r2,r5,4
    2074:	2cc00017 	ldw	r19,0(r5)
    2078:	002d883a 	mov	r22,zero
    207c:	18003716 	blt	r3,zero,215c <___vfprintf_internal_r+0x1420>
    2080:	00ffdfc4 	movi	r3,-129
    2084:	d8802d15 	stw	r2,180(sp)
    2088:	90e4703a 	and	r18,r18,r3
    208c:	0039883a 	mov	fp,zero
    2090:	983df326 	beq	r19,zero,1860 <__ram_exceptions_end+0xfbfe160c>
    2094:	00800244 	movi	r2,9
    2098:	14fc7b36 	bltu	r2,r19,1288 <__ram_exceptions_end+0xfbfe1034>
    209c:	d8c02817 	ldw	r3,160(sp)
    20a0:	dc001dc4 	addi	r16,sp,119
    20a4:	9cc00c04 	addi	r19,r19,48
    20a8:	1c07c83a 	sub	r3,r3,r16
    20ac:	dcc01dc5 	stb	r19,119(sp)
    20b0:	d8c02e15 	stw	r3,184(sp)
    20b4:	003ce806 	br	1458 <__ram_exceptions_end+0xfbfe1204>
    20b8:	d8803317 	ldw	r2,204(sp)
    20bc:	143fffc4 	addi	r16,r2,-1
    20c0:	043f4d0e 	bge	zero,r16,1df8 <__ram_exceptions_end+0xfbfe1ba4>
    20c4:	07000404 	movi	fp,16
    20c8:	e400810e 	bge	fp,r16,22d0 <___vfprintf_internal_r+0x1594>
    20cc:	01400074 	movhi	r5,1
    20d0:	29405e84 	addi	r5,r5,378
    20d4:	d9402b15 	stw	r5,172(sp)
    20d8:	01c001c4 	movi	r7,7
    20dc:	dcc02c17 	ldw	r19,176(sp)
    20e0:	00000306 	br	20f0 <___vfprintf_internal_r+0x13b4>
    20e4:	b5800204 	addi	r22,r22,8
    20e8:	843ffc04 	addi	r16,r16,-16
    20ec:	e4007b0e 	bge	fp,r16,22dc <___vfprintf_internal_r+0x15a0>
    20f0:	18c00404 	addi	r3,r3,16
    20f4:	8c400044 	addi	r17,r17,1
    20f8:	b5000015 	stw	r20,0(r22)
    20fc:	b7000115 	stw	fp,4(r22)
    2100:	d8c02015 	stw	r3,128(sp)
    2104:	dc401f15 	stw	r17,124(sp)
    2108:	3c7ff60e 	bge	r7,r17,20e4 <__ram_exceptions_end+0xfbfe1e90>
    210c:	d9801e04 	addi	r6,sp,120
    2110:	b80b883a 	mov	r5,r23
    2114:	9809883a 	mov	r4,r19
    2118:	d9c03c15 	stw	r7,240(sp)
    211c:	00078540 	call	7854 <__sprint_r>
    2120:	d9c03c17 	ldw	r7,240(sp)
    2124:	103c071e 	bne	r2,zero,1144 <__ram_exceptions_end+0xfbfe0ef0>
    2128:	d8c02017 	ldw	r3,128(sp)
    212c:	dc401f17 	ldw	r17,124(sp)
    2130:	dd800404 	addi	r22,sp,16
    2134:	003fec06 	br	20e8 <__ram_exceptions_end+0xfbfe1e94>
    2138:	9080100c 	andi	r2,r18,64
    213c:	d8002785 	stb	zero,158(sp)
    2140:	10010e26 	beq	r2,zero,257c <___vfprintf_internal_r+0x1840>
    2144:	d9002d17 	ldw	r4,180(sp)
    2148:	d9402917 	ldw	r5,164(sp)
    214c:	002d883a 	mov	r22,zero
    2150:	20800104 	addi	r2,r4,4
    2154:	24c0000b 	ldhu	r19,0(r4)
    2158:	283fc90e 	bge	r5,zero,2080 <__ram_exceptions_end+0xfbfe1e2c>
    215c:	d8802d15 	stw	r2,180(sp)
    2160:	0039883a 	mov	fp,zero
    2164:	9d84b03a 	or	r2,r19,r22
    2168:	103c461e 	bne	r2,zero,1284 <__ram_exceptions_end+0xfbfe1030>
    216c:	00800044 	movi	r2,1
    2170:	003e6c06 	br	1b24 <__ram_exceptions_end+0xfbfe18d0>
    2174:	d9002c17 	ldw	r4,176(sp)
    2178:	d9801e04 	addi	r6,sp,120
    217c:	b80b883a 	mov	r5,r23
    2180:	00078540 	call	7854 <__sprint_r>
    2184:	103bef1e 	bne	r2,zero,1144 <__ram_exceptions_end+0xfbfe0ef0>
    2188:	d8c02017 	ldw	r3,128(sp)
    218c:	da000404 	addi	r8,sp,16
    2190:	d9003217 	ldw	r4,200(sp)
    2194:	d8802617 	ldw	r2,152(sp)
    2198:	d9403317 	ldw	r5,204(sp)
    219c:	8123883a 	add	r17,r16,r4
    21a0:	11400216 	blt	r2,r5,21ac <___vfprintf_internal_r+0x1470>
    21a4:	9100004c 	andi	r4,r18,1
    21a8:	20000d26 	beq	r4,zero,21e0 <___vfprintf_internal_r+0x14a4>
    21ac:	d9003717 	ldw	r4,220(sp)
    21b0:	d9403417 	ldw	r5,208(sp)
    21b4:	1907883a 	add	r3,r3,r4
    21b8:	d9001f17 	ldw	r4,124(sp)
    21bc:	41400015 	stw	r5,0(r8)
    21c0:	d9403717 	ldw	r5,220(sp)
    21c4:	21000044 	addi	r4,r4,1
    21c8:	d8c02015 	stw	r3,128(sp)
    21cc:	41400115 	stw	r5,4(r8)
    21d0:	d9001f15 	stw	r4,124(sp)
    21d4:	014001c4 	movi	r5,7
    21d8:	2901e816 	blt	r5,r4,297c <___vfprintf_internal_r+0x1c40>
    21dc:	42000204 	addi	r8,r8,8
    21e0:	d9003317 	ldw	r4,204(sp)
    21e4:	8121883a 	add	r16,r16,r4
    21e8:	2085c83a 	sub	r2,r4,r2
    21ec:	8461c83a 	sub	r16,r16,r17
    21f0:	1400010e 	bge	r2,r16,21f8 <___vfprintf_internal_r+0x14bc>
    21f4:	1021883a 	mov	r16,r2
    21f8:	04000a0e 	bge	zero,r16,2224 <___vfprintf_internal_r+0x14e8>
    21fc:	d9001f17 	ldw	r4,124(sp)
    2200:	1c07883a 	add	r3,r3,r16
    2204:	44400015 	stw	r17,0(r8)
    2208:	21000044 	addi	r4,r4,1
    220c:	44000115 	stw	r16,4(r8)
    2210:	d8c02015 	stw	r3,128(sp)
    2214:	d9001f15 	stw	r4,124(sp)
    2218:	014001c4 	movi	r5,7
    221c:	2901fb16 	blt	r5,r4,2a0c <___vfprintf_internal_r+0x1cd0>
    2220:	42000204 	addi	r8,r8,8
    2224:	8001f716 	blt	r16,zero,2a04 <___vfprintf_internal_r+0x1cc8>
    2228:	1421c83a 	sub	r16,r2,r16
    222c:	043d380e 	bge	zero,r16,1710 <__ram_exceptions_end+0xfbfe14bc>
    2230:	04400404 	movi	r17,16
    2234:	d8801f17 	ldw	r2,124(sp)
    2238:	8c3efb0e 	bge	r17,r16,1e28 <__ram_exceptions_end+0xfbfe1bd4>
    223c:	01400074 	movhi	r5,1
    2240:	29405e84 	addi	r5,r5,378
    2244:	d9402b15 	stw	r5,172(sp)
    2248:	058001c4 	movi	r22,7
    224c:	dcc02c17 	ldw	r19,176(sp)
    2250:	00000306 	br	2260 <___vfprintf_internal_r+0x1524>
    2254:	42000204 	addi	r8,r8,8
    2258:	843ffc04 	addi	r16,r16,-16
    225c:	8c3ef50e 	bge	r17,r16,1e34 <__ram_exceptions_end+0xfbfe1be0>
    2260:	18c00404 	addi	r3,r3,16
    2264:	10800044 	addi	r2,r2,1
    2268:	45000015 	stw	r20,0(r8)
    226c:	44400115 	stw	r17,4(r8)
    2270:	d8c02015 	stw	r3,128(sp)
    2274:	d8801f15 	stw	r2,124(sp)
    2278:	b0bff60e 	bge	r22,r2,2254 <__ram_exceptions_end+0xfbfe2000>
    227c:	d9801e04 	addi	r6,sp,120
    2280:	b80b883a 	mov	r5,r23
    2284:	9809883a 	mov	r4,r19
    2288:	00078540 	call	7854 <__sprint_r>
    228c:	103bad1e 	bne	r2,zero,1144 <__ram_exceptions_end+0xfbfe0ef0>
    2290:	d8c02017 	ldw	r3,128(sp)
    2294:	d8801f17 	ldw	r2,124(sp)
    2298:	da000404 	addi	r8,sp,16
    229c:	003fee06 	br	2258 <__ram_exceptions_end+0xfbfe2004>
    22a0:	9088703a 	and	r4,r18,r2
    22a4:	203eab1e 	bne	r4,zero,1d54 <__ram_exceptions_end+0xfbfe1b00>
    22a8:	dc401f17 	ldw	r17,124(sp)
    22ac:	40800115 	stw	r2,4(r8)
    22b0:	44000015 	stw	r16,0(r8)
    22b4:	8c400044 	addi	r17,r17,1
    22b8:	d8c02015 	stw	r3,128(sp)
    22bc:	dc401f15 	stw	r17,124(sp)
    22c0:	008001c4 	movi	r2,7
    22c4:	14400e16 	blt	r2,r17,2300 <___vfprintf_internal_r+0x15c4>
    22c8:	45800204 	addi	r22,r8,8
    22cc:	003eca06 	br	1df8 <__ram_exceptions_end+0xfbfe1ba4>
    22d0:	01000074 	movhi	r4,1
    22d4:	21005e84 	addi	r4,r4,378
    22d8:	d9002b15 	stw	r4,172(sp)
    22dc:	d8802b17 	ldw	r2,172(sp)
    22e0:	1c07883a 	add	r3,r3,r16
    22e4:	8c400044 	addi	r17,r17,1
    22e8:	b0800015 	stw	r2,0(r22)
    22ec:	b4000115 	stw	r16,4(r22)
    22f0:	d8c02015 	stw	r3,128(sp)
    22f4:	dc401f15 	stw	r17,124(sp)
    22f8:	008001c4 	movi	r2,7
    22fc:	147ebd0e 	bge	r2,r17,1df4 <__ram_exceptions_end+0xfbfe1ba0>
    2300:	d9002c17 	ldw	r4,176(sp)
    2304:	d9801e04 	addi	r6,sp,120
    2308:	b80b883a 	mov	r5,r23
    230c:	00078540 	call	7854 <__sprint_r>
    2310:	103b8c1e 	bne	r2,zero,1144 <__ram_exceptions_end+0xfbfe0ef0>
    2314:	d8c02017 	ldw	r3,128(sp)
    2318:	dc401f17 	ldw	r17,124(sp)
    231c:	dd800404 	addi	r22,sp,16
    2320:	003eb506 	br	1df8 <__ram_exceptions_end+0xfbfe1ba4>
    2324:	d9002c17 	ldw	r4,176(sp)
    2328:	d9801e04 	addi	r6,sp,120
    232c:	b80b883a 	mov	r5,r23
    2330:	00078540 	call	7854 <__sprint_r>
    2334:	103b831e 	bne	r2,zero,1144 <__ram_exceptions_end+0xfbfe0ef0>
    2338:	d8c02017 	ldw	r3,128(sp)
    233c:	dc401f17 	ldw	r17,124(sp)
    2340:	da000404 	addi	r8,sp,16
    2344:	003e8d06 	br	1d7c <__ram_exceptions_end+0xfbfe1b28>
    2348:	d9002c17 	ldw	r4,176(sp)
    234c:	d9801e04 	addi	r6,sp,120
    2350:	b80b883a 	mov	r5,r23
    2354:	00078540 	call	7854 <__sprint_r>
    2358:	103b7a1e 	bne	r2,zero,1144 <__ram_exceptions_end+0xfbfe0ef0>
    235c:	d8c02017 	ldw	r3,128(sp)
    2360:	dc401f17 	ldw	r17,124(sp)
    2364:	dd800404 	addi	r22,sp,16
    2368:	003e8f06 	br	1da8 <__ram_exceptions_end+0xfbfe1b54>
    236c:	0027883a 	mov	r19,zero
    2370:	003f4a06 	br	209c <__ram_exceptions_end+0xfbfe1e48>
    2374:	d9002c17 	ldw	r4,176(sp)
    2378:	d9801e04 	addi	r6,sp,120
    237c:	b80b883a 	mov	r5,r23
    2380:	00078540 	call	7854 <__sprint_r>
    2384:	103b6f1e 	bne	r2,zero,1144 <__ram_exceptions_end+0xfbfe0ef0>
    2388:	d8c02017 	ldw	r3,128(sp)
    238c:	da000404 	addi	r8,sp,16
    2390:	003c9d06 	br	1608 <__ram_exceptions_end+0xfbfe13b4>
    2394:	04e7c83a 	sub	r19,zero,r19
    2398:	9804c03a 	cmpne	r2,r19,zero
    239c:	05adc83a 	sub	r22,zero,r22
    23a0:	b0adc83a 	sub	r22,r22,r2
    23a4:	d8802917 	ldw	r2,164(sp)
    23a8:	07000b44 	movi	fp,45
    23ac:	df002785 	stb	fp,158(sp)
    23b0:	10017b16 	blt	r2,zero,29a0 <___vfprintf_internal_r+0x1c64>
    23b4:	00bfdfc4 	movi	r2,-129
    23b8:	90a4703a 	and	r18,r18,r2
    23bc:	003bb106 	br	1284 <__ram_exceptions_end+0xfbfe1030>
    23c0:	d9003617 	ldw	r4,216(sp)
    23c4:	d9403817 	ldw	r5,224(sp)
    23c8:	da003d15 	stw	r8,244(sp)
    23cc:	00073e00 	call	73e0 <__fpclassifyd>
    23d0:	da003d17 	ldw	r8,244(sp)
    23d4:	1000f026 	beq	r2,zero,2798 <___vfprintf_internal_r+0x1a5c>
    23d8:	d9002917 	ldw	r4,164(sp)
    23dc:	05bff7c4 	movi	r22,-33
    23e0:	00bfffc4 	movi	r2,-1
    23e4:	8dac703a 	and	r22,r17,r22
    23e8:	20820026 	beq	r4,r2,2bec <___vfprintf_internal_r+0x1eb0>
    23ec:	008011c4 	movi	r2,71
    23f0:	b081f726 	beq	r22,r2,2bd0 <___vfprintf_internal_r+0x1e94>
    23f4:	d9003817 	ldw	r4,224(sp)
    23f8:	90c04014 	ori	r3,r18,256
    23fc:	d8c02b15 	stw	r3,172(sp)
    2400:	20021516 	blt	r4,zero,2c58 <___vfprintf_internal_r+0x1f1c>
    2404:	dcc03817 	ldw	r19,224(sp)
    2408:	d8002a05 	stb	zero,168(sp)
    240c:	00801984 	movi	r2,102
    2410:	8881f926 	beq	r17,r2,2bf8 <___vfprintf_internal_r+0x1ebc>
    2414:	00801184 	movi	r2,70
    2418:	88821c26 	beq	r17,r2,2c8c <___vfprintf_internal_r+0x1f50>
    241c:	00801144 	movi	r2,69
    2420:	b081ef26 	beq	r22,r2,2be0 <___vfprintf_internal_r+0x1ea4>
    2424:	d8c02917 	ldw	r3,164(sp)
    2428:	d8802104 	addi	r2,sp,132
    242c:	d8800315 	stw	r2,12(sp)
    2430:	d9403617 	ldw	r5,216(sp)
    2434:	d8802504 	addi	r2,sp,148
    2438:	d9002c17 	ldw	r4,176(sp)
    243c:	d8800215 	stw	r2,8(sp)
    2440:	d8802604 	addi	r2,sp,152
    2444:	d8c00015 	stw	r3,0(sp)
    2448:	d8800115 	stw	r2,4(sp)
    244c:	01c00084 	movi	r7,2
    2450:	980d883a 	mov	r6,r19
    2454:	d8c03c15 	stw	r3,240(sp)
    2458:	da003d15 	stw	r8,244(sp)
    245c:	00033600 	call	3360 <_dtoa_r>
    2460:	1021883a 	mov	r16,r2
    2464:	008019c4 	movi	r2,103
    2468:	d8c03c17 	ldw	r3,240(sp)
    246c:	da003d17 	ldw	r8,244(sp)
    2470:	88817126 	beq	r17,r2,2a38 <___vfprintf_internal_r+0x1cfc>
    2474:	008011c4 	movi	r2,71
    2478:	88829226 	beq	r17,r2,2ec4 <___vfprintf_internal_r+0x2188>
    247c:	80f9883a 	add	fp,r16,r3
    2480:	d9003617 	ldw	r4,216(sp)
    2484:	000d883a 	mov	r6,zero
    2488:	000f883a 	mov	r7,zero
    248c:	980b883a 	mov	r5,r19
    2490:	da003d15 	stw	r8,244(sp)
    2494:	000be940 	call	be94 <__eqdf2>
    2498:	da003d17 	ldw	r8,244(sp)
    249c:	10018d26 	beq	r2,zero,2ad4 <___vfprintf_internal_r+0x1d98>
    24a0:	d8802117 	ldw	r2,132(sp)
    24a4:	1700062e 	bgeu	r2,fp,24c0 <___vfprintf_internal_r+0x1784>
    24a8:	01000c04 	movi	r4,48
    24ac:	10c00044 	addi	r3,r2,1
    24b0:	d8c02115 	stw	r3,132(sp)
    24b4:	11000005 	stb	r4,0(r2)
    24b8:	d8802117 	ldw	r2,132(sp)
    24bc:	173ffb36 	bltu	r2,fp,24ac <__ram_exceptions_end+0xfbfe2258>
    24c0:	1405c83a 	sub	r2,r2,r16
    24c4:	d8803315 	stw	r2,204(sp)
    24c8:	008011c4 	movi	r2,71
    24cc:	b0817626 	beq	r22,r2,2aa8 <___vfprintf_internal_r+0x1d6c>
    24d0:	00801944 	movi	r2,101
    24d4:	1442810e 	bge	r2,r17,2edc <___vfprintf_internal_r+0x21a0>
    24d8:	d8c02617 	ldw	r3,152(sp)
    24dc:	00801984 	movi	r2,102
    24e0:	d8c03215 	stw	r3,200(sp)
    24e4:	8881fe26 	beq	r17,r2,2ce0 <___vfprintf_internal_r+0x1fa4>
    24e8:	d8c03217 	ldw	r3,200(sp)
    24ec:	d9003317 	ldw	r4,204(sp)
    24f0:	1901dd16 	blt	r3,r4,2c68 <___vfprintf_internal_r+0x1f2c>
    24f4:	9480004c 	andi	r18,r18,1
    24f8:	90022b1e 	bne	r18,zero,2da8 <___vfprintf_internal_r+0x206c>
    24fc:	1805883a 	mov	r2,r3
    2500:	18028016 	blt	r3,zero,2f04 <___vfprintf_internal_r+0x21c8>
    2504:	d8c03217 	ldw	r3,200(sp)
    2508:	044019c4 	movi	r17,103
    250c:	d8c02e15 	stw	r3,184(sp)
    2510:	df002a07 	ldb	fp,168(sp)
    2514:	e001531e 	bne	fp,zero,2a64 <___vfprintf_internal_r+0x1d28>
    2518:	df002783 	ldbu	fp,158(sp)
    251c:	d8802a15 	stw	r2,168(sp)
    2520:	dc802b17 	ldw	r18,172(sp)
    2524:	d8002915 	stw	zero,164(sp)
    2528:	003bd106 	br	1470 <__ram_exceptions_end+0xfbfe121c>
    252c:	d8802d17 	ldw	r2,180(sp)
    2530:	d8c02d17 	ldw	r3,180(sp)
    2534:	d9002d17 	ldw	r4,180(sp)
    2538:	10800017 	ldw	r2,0(r2)
    253c:	18c00117 	ldw	r3,4(r3)
    2540:	21000204 	addi	r4,r4,8
    2544:	d8803615 	stw	r2,216(sp)
    2548:	d8c03815 	stw	r3,224(sp)
    254c:	d9002d15 	stw	r4,180(sp)
    2550:	003b7506 	br	1328 <__ram_exceptions_end+0xfbfe10d4>
    2554:	ac400007 	ldb	r17,0(r21)
    2558:	003a5906 	br	ec0 <__ram_exceptions_end+0xfbfe0c6c>
    255c:	9080100c 	andi	r2,r18,64
    2560:	1000a826 	beq	r2,zero,2804 <___vfprintf_internal_r+0x1ac8>
    2564:	d9002d17 	ldw	r4,180(sp)
    2568:	002d883a 	mov	r22,zero
    256c:	24c0000b 	ldhu	r19,0(r4)
    2570:	21000104 	addi	r4,r4,4
    2574:	d9002d15 	stw	r4,180(sp)
    2578:	003ccb06 	br	18a8 <__ram_exceptions_end+0xfbfe1654>
    257c:	d8c02d17 	ldw	r3,180(sp)
    2580:	d9002917 	ldw	r4,164(sp)
    2584:	002d883a 	mov	r22,zero
    2588:	18800104 	addi	r2,r3,4
    258c:	1cc00017 	ldw	r19,0(r3)
    2590:	203ebb0e 	bge	r4,zero,2080 <__ram_exceptions_end+0xfbfe1e2c>
    2594:	003ef106 	br	215c <__ram_exceptions_end+0xfbfe1f08>
    2598:	9080040c 	andi	r2,r18,16
    259c:	1000921e 	bne	r2,zero,27e8 <___vfprintf_internal_r+0x1aac>
    25a0:	9480100c 	andi	r18,r18,64
    25a4:	90013926 	beq	r18,zero,2a8c <___vfprintf_internal_r+0x1d50>
    25a8:	d9002d17 	ldw	r4,180(sp)
    25ac:	d9402f17 	ldw	r5,188(sp)
    25b0:	20800017 	ldw	r2,0(r4)
    25b4:	21000104 	addi	r4,r4,4
    25b8:	d9002d15 	stw	r4,180(sp)
    25bc:	1140000d 	sth	r5,0(r2)
    25c0:	003a1606 	br	e1c <__ram_exceptions_end+0xfbfe0bc8>
    25c4:	9080100c 	andi	r2,r18,64
    25c8:	10008026 	beq	r2,zero,27cc <___vfprintf_internal_r+0x1a90>
    25cc:	d8c02d17 	ldw	r3,180(sp)
    25d0:	1cc0000f 	ldh	r19,0(r3)
    25d4:	18c00104 	addi	r3,r3,4
    25d8:	d8c02d15 	stw	r3,180(sp)
    25dc:	982dd7fa 	srai	r22,r19,31
    25e0:	b005883a 	mov	r2,r22
    25e4:	003b1f06 	br	1264 <__ram_exceptions_end+0xfbfe1010>
    25e8:	9080100c 	andi	r2,r18,64
    25ec:	d8002785 	stb	zero,158(sp)
    25f0:	10008a1e 	bne	r2,zero,281c <___vfprintf_internal_r+0x1ae0>
    25f4:	d9402d17 	ldw	r5,180(sp)
    25f8:	d8c02917 	ldw	r3,164(sp)
    25fc:	002d883a 	mov	r22,zero
    2600:	28800104 	addi	r2,r5,4
    2604:	2cc00017 	ldw	r19,0(r5)
    2608:	183e4b0e 	bge	r3,zero,1f38 <__ram_exceptions_end+0xfbfe1ce4>
    260c:	9d86b03a 	or	r3,r19,r22
    2610:	d8802d15 	stw	r2,180(sp)
    2614:	183e4c1e 	bne	r3,zero,1f48 <__ram_exceptions_end+0xfbfe1cf4>
    2618:	0039883a 	mov	fp,zero
    261c:	0005883a 	mov	r2,zero
    2620:	003d4006 	br	1b24 <__ram_exceptions_end+0xfbfe18d0>
    2624:	01400074 	movhi	r5,1
    2628:	29405e84 	addi	r5,r5,378
    262c:	d9402b15 	stw	r5,172(sp)
    2630:	d9402b17 	ldw	r5,172(sp)
    2634:	1c47883a 	add	r3,r3,r17
    2638:	10800044 	addi	r2,r2,1
    263c:	41400015 	stw	r5,0(r8)
    2640:	44400115 	stw	r17,4(r8)
    2644:	d8c02015 	stw	r3,128(sp)
    2648:	d8801f15 	stw	r2,124(sp)
    264c:	010001c4 	movi	r4,7
    2650:	20bec816 	blt	r4,r2,2174 <__ram_exceptions_end+0xfbfe1f20>
    2654:	42000204 	addi	r8,r8,8
    2658:	003ecd06 	br	2190 <__ram_exceptions_end+0xfbfe1f3c>
    265c:	d9002917 	ldw	r4,164(sp)
    2660:	d8002785 	stb	zero,158(sp)
    2664:	203d2d16 	blt	r4,zero,1b1c <__ram_exceptions_end+0xfbfe18c8>
    2668:	00bfdfc4 	movi	r2,-129
    266c:	90a4703a 	and	r18,r18,r2
    2670:	003a9106 	br	10b8 <__ram_exceptions_end+0xfbfe0e64>
    2674:	01000074 	movhi	r4,1
    2678:	21005e84 	addi	r4,r4,378
    267c:	d9002b15 	stw	r4,172(sp)
    2680:	003c0c06 	br	16b4 <__ram_exceptions_end+0xfbfe1460>
    2684:	d9002c17 	ldw	r4,176(sp)
    2688:	d9801e04 	addi	r6,sp,120
    268c:	b80b883a 	mov	r5,r23
    2690:	00078540 	call	7854 <__sprint_r>
    2694:	103aab1e 	bne	r2,zero,1144 <__ram_exceptions_end+0xfbfe0ef0>
    2698:	d8c02017 	ldw	r3,128(sp)
    269c:	da000404 	addi	r8,sp,16
    26a0:	003d4106 	br	1ba8 <__ram_exceptions_end+0xfbfe1954>
    26a4:	d8801f17 	ldw	r2,124(sp)
    26a8:	01400074 	movhi	r5,1
    26ac:	01000044 	movi	r4,1
    26b0:	18c00044 	addi	r3,r3,1
    26b4:	10800044 	addi	r2,r2,1
    26b8:	29405e04 	addi	r5,r5,376
    26bc:	41000115 	stw	r4,4(r8)
    26c0:	41400015 	stw	r5,0(r8)
    26c4:	d8c02015 	stw	r3,128(sp)
    26c8:	d8801f15 	stw	r2,124(sp)
    26cc:	010001c4 	movi	r4,7
    26d0:	20805c16 	blt	r4,r2,2844 <___vfprintf_internal_r+0x1b08>
    26d4:	42000204 	addi	r8,r8,8
    26d8:	8800041e 	bne	r17,zero,26ec <___vfprintf_internal_r+0x19b0>
    26dc:	d8803317 	ldw	r2,204(sp)
    26e0:	1000021e 	bne	r2,zero,26ec <___vfprintf_internal_r+0x19b0>
    26e4:	9080004c 	andi	r2,r18,1
    26e8:	103c0926 	beq	r2,zero,1710 <__ram_exceptions_end+0xfbfe14bc>
    26ec:	d9003717 	ldw	r4,220(sp)
    26f0:	d8801f17 	ldw	r2,124(sp)
    26f4:	d9403417 	ldw	r5,208(sp)
    26f8:	20c7883a 	add	r3,r4,r3
    26fc:	10800044 	addi	r2,r2,1
    2700:	41000115 	stw	r4,4(r8)
    2704:	41400015 	stw	r5,0(r8)
    2708:	d8c02015 	stw	r3,128(sp)
    270c:	d8801f15 	stw	r2,124(sp)
    2710:	010001c4 	movi	r4,7
    2714:	20812116 	blt	r4,r2,2b9c <___vfprintf_internal_r+0x1e60>
    2718:	42000204 	addi	r8,r8,8
    271c:	0463c83a 	sub	r17,zero,r17
    2720:	0440730e 	bge	zero,r17,28f0 <___vfprintf_internal_r+0x1bb4>
    2724:	05800404 	movi	r22,16
    2728:	b440860e 	bge	r22,r17,2944 <___vfprintf_internal_r+0x1c08>
    272c:	01400074 	movhi	r5,1
    2730:	29405e84 	addi	r5,r5,378
    2734:	d9402b15 	stw	r5,172(sp)
    2738:	070001c4 	movi	fp,7
    273c:	dcc02c17 	ldw	r19,176(sp)
    2740:	00000306 	br	2750 <___vfprintf_internal_r+0x1a14>
    2744:	42000204 	addi	r8,r8,8
    2748:	8c7ffc04 	addi	r17,r17,-16
    274c:	b440800e 	bge	r22,r17,2950 <___vfprintf_internal_r+0x1c14>
    2750:	18c00404 	addi	r3,r3,16
    2754:	10800044 	addi	r2,r2,1
    2758:	45000015 	stw	r20,0(r8)
    275c:	45800115 	stw	r22,4(r8)
    2760:	d8c02015 	stw	r3,128(sp)
    2764:	d8801f15 	stw	r2,124(sp)
    2768:	e0bff60e 	bge	fp,r2,2744 <__ram_exceptions_end+0xfbfe24f0>
    276c:	d9801e04 	addi	r6,sp,120
    2770:	b80b883a 	mov	r5,r23
    2774:	9809883a 	mov	r4,r19
    2778:	00078540 	call	7854 <__sprint_r>
    277c:	103a711e 	bne	r2,zero,1144 <__ram_exceptions_end+0xfbfe0ef0>
    2780:	d8c02017 	ldw	r3,128(sp)
    2784:	d8801f17 	ldw	r2,124(sp)
    2788:	da000404 	addi	r8,sp,16
    278c:	003fee06 	br	2748 <__ram_exceptions_end+0xfbfe24f4>
    2790:	00bfffc4 	movi	r2,-1
    2794:	003a6f06 	br	1154 <__ram_exceptions_end+0xfbfe0f00>
    2798:	008011c4 	movi	r2,71
    279c:	1440b816 	blt	r2,r17,2a80 <___vfprintf_internal_r+0x1d44>
    27a0:	04000074 	movhi	r16,1
    27a4:	84005004 	addi	r16,r16,320
    27a8:	00c000c4 	movi	r3,3
    27ac:	00bfdfc4 	movi	r2,-129
    27b0:	d8c02a15 	stw	r3,168(sp)
    27b4:	90a4703a 	and	r18,r18,r2
    27b8:	df002783 	ldbu	fp,158(sp)
    27bc:	d8c02e15 	stw	r3,184(sp)
    27c0:	d8002915 	stw	zero,164(sp)
    27c4:	d8003215 	stw	zero,200(sp)
    27c8:	003b2906 	br	1470 <__ram_exceptions_end+0xfbfe121c>
    27cc:	d9002d17 	ldw	r4,180(sp)
    27d0:	24c00017 	ldw	r19,0(r4)
    27d4:	21000104 	addi	r4,r4,4
    27d8:	d9002d15 	stw	r4,180(sp)
    27dc:	982dd7fa 	srai	r22,r19,31
    27e0:	b005883a 	mov	r2,r22
    27e4:	003a9f06 	br	1264 <__ram_exceptions_end+0xfbfe1010>
    27e8:	d9402d17 	ldw	r5,180(sp)
    27ec:	d8c02f17 	ldw	r3,188(sp)
    27f0:	28800017 	ldw	r2,0(r5)
    27f4:	29400104 	addi	r5,r5,4
    27f8:	d9402d15 	stw	r5,180(sp)
    27fc:	10c00015 	stw	r3,0(r2)
    2800:	00398606 	br	e1c <__ram_exceptions_end+0xfbfe0bc8>
    2804:	d9402d17 	ldw	r5,180(sp)
    2808:	002d883a 	mov	r22,zero
    280c:	2cc00017 	ldw	r19,0(r5)
    2810:	29400104 	addi	r5,r5,4
    2814:	d9402d15 	stw	r5,180(sp)
    2818:	003c2306 	br	18a8 <__ram_exceptions_end+0xfbfe1654>
    281c:	d8c02d17 	ldw	r3,180(sp)
    2820:	d9002917 	ldw	r4,164(sp)
    2824:	002d883a 	mov	r22,zero
    2828:	18800104 	addi	r2,r3,4
    282c:	1cc0000b 	ldhu	r19,0(r3)
    2830:	203dc10e 	bge	r4,zero,1f38 <__ram_exceptions_end+0xfbfe1ce4>
    2834:	003f7506 	br	260c <__ram_exceptions_end+0xfbfe23b8>
    2838:	04000074 	movhi	r16,1
    283c:	84004e04 	addi	r16,r16,312
    2840:	003acc06 	br	1374 <__ram_exceptions_end+0xfbfe1120>
    2844:	d9002c17 	ldw	r4,176(sp)
    2848:	d9801e04 	addi	r6,sp,120
    284c:	b80b883a 	mov	r5,r23
    2850:	00078540 	call	7854 <__sprint_r>
    2854:	103a3b1e 	bne	r2,zero,1144 <__ram_exceptions_end+0xfbfe0ef0>
    2858:	dc402617 	ldw	r17,152(sp)
    285c:	d8c02017 	ldw	r3,128(sp)
    2860:	da000404 	addi	r8,sp,16
    2864:	003f9c06 	br	26d8 <__ram_exceptions_end+0xfbfe2484>
    2868:	ac400043 	ldbu	r17,1(r21)
    286c:	94800814 	ori	r18,r18,32
    2870:	ad400044 	addi	r21,r21,1
    2874:	8c403fcc 	andi	r17,r17,255
    2878:	8c40201c 	xori	r17,r17,128
    287c:	8c7fe004 	addi	r17,r17,-128
    2880:	00398f06 	br	ec0 <__ram_exceptions_end+0xfbfe0c6c>
    2884:	d8c02d15 	stw	r3,180(sp)
    2888:	0039883a 	mov	fp,zero
    288c:	003e3506 	br	2164 <__ram_exceptions_end+0xfbfe1f10>
    2890:	d9002c17 	ldw	r4,176(sp)
    2894:	d9801e04 	addi	r6,sp,120
    2898:	b80b883a 	mov	r5,r23
    289c:	00078540 	call	7854 <__sprint_r>
    28a0:	103a281e 	bne	r2,zero,1144 <__ram_exceptions_end+0xfbfe0ef0>
    28a4:	d8c02017 	ldw	r3,128(sp)
    28a8:	da000404 	addi	r8,sp,16
    28ac:	003cd006 	br	1bf0 <__ram_exceptions_end+0xfbfe199c>
    28b0:	8009883a 	mov	r4,r16
    28b4:	da003d15 	stw	r8,244(sp)
    28b8:	00076c00 	call	76c0 <strlen>
    28bc:	d8802e15 	stw	r2,184(sp)
    28c0:	da003d17 	ldw	r8,244(sp)
    28c4:	103c340e 	bge	r2,zero,1998 <__ram_exceptions_end+0xfbfe1744>
    28c8:	0005883a 	mov	r2,zero
    28cc:	003c3206 	br	1998 <__ram_exceptions_end+0xfbfe1744>
    28d0:	d9002c17 	ldw	r4,176(sp)
    28d4:	d9801e04 	addi	r6,sp,120
    28d8:	b80b883a 	mov	r5,r23
    28dc:	00078540 	call	7854 <__sprint_r>
    28e0:	103a181e 	bne	r2,zero,1144 <__ram_exceptions_end+0xfbfe0ef0>
    28e4:	d8c02017 	ldw	r3,128(sp)
    28e8:	d8801f17 	ldw	r2,124(sp)
    28ec:	da000404 	addi	r8,sp,16
    28f0:	d9403317 	ldw	r5,204(sp)
    28f4:	10800044 	addi	r2,r2,1
    28f8:	44000015 	stw	r16,0(r8)
    28fc:	28c7883a 	add	r3,r5,r3
    2900:	003b7d06 	br	16f8 <__ram_exceptions_end+0xfbfe14a4>
    2904:	01000074 	movhi	r4,1
    2908:	21006284 	addi	r4,r4,394
    290c:	d9003515 	stw	r4,212(sp)
    2910:	003b1406 	br	1564 <__ram_exceptions_end+0xfbfe1310>
    2914:	013fffc4 	movi	r4,-1
    2918:	003a3506 	br	11f0 <__ram_exceptions_end+0xfbfe0f9c>
    291c:	0023883a 	mov	r17,zero
    2920:	003d9d06 	br	1f98 <__ram_exceptions_end+0xfbfe1d44>
    2924:	d9002c17 	ldw	r4,176(sp)
    2928:	d9801e04 	addi	r6,sp,120
    292c:	b80b883a 	mov	r5,r23
    2930:	00078540 	call	7854 <__sprint_r>
    2934:	103a031e 	bne	r2,zero,1144 <__ram_exceptions_end+0xfbfe0ef0>
    2938:	d8c02017 	ldw	r3,128(sp)
    293c:	da000404 	addi	r8,sp,16
    2940:	003d9406 	br	1f94 <__ram_exceptions_end+0xfbfe1d40>
    2944:	01000074 	movhi	r4,1
    2948:	21005e84 	addi	r4,r4,378
    294c:	d9002b15 	stw	r4,172(sp)
    2950:	d9002b17 	ldw	r4,172(sp)
    2954:	1c47883a 	add	r3,r3,r17
    2958:	10800044 	addi	r2,r2,1
    295c:	41000015 	stw	r4,0(r8)
    2960:	44400115 	stw	r17,4(r8)
    2964:	d8c02015 	stw	r3,128(sp)
    2968:	d8801f15 	stw	r2,124(sp)
    296c:	010001c4 	movi	r4,7
    2970:	20bfd716 	blt	r4,r2,28d0 <__ram_exceptions_end+0xfbfe267c>
    2974:	42000204 	addi	r8,r8,8
    2978:	003fdd06 	br	28f0 <__ram_exceptions_end+0xfbfe269c>
    297c:	d9002c17 	ldw	r4,176(sp)
    2980:	d9801e04 	addi	r6,sp,120
    2984:	b80b883a 	mov	r5,r23
    2988:	00078540 	call	7854 <__sprint_r>
    298c:	1039ed1e 	bne	r2,zero,1144 <__ram_exceptions_end+0xfbfe0ef0>
    2990:	d8802617 	ldw	r2,152(sp)
    2994:	d8c02017 	ldw	r3,128(sp)
    2998:	da000404 	addi	r8,sp,16
    299c:	003e1006 	br	21e0 <__ram_exceptions_end+0xfbfe1f8c>
    29a0:	00800044 	movi	r2,1
    29a4:	10803fcc 	andi	r2,r2,255
    29a8:	00c00044 	movi	r3,1
    29ac:	10fa3526 	beq	r2,r3,1284 <__ram_exceptions_end+0xfbfe1030>
    29b0:	00c00084 	movi	r3,2
    29b4:	10fbcb26 	beq	r2,r3,18e4 <__ram_exceptions_end+0xfbfe1690>
    29b8:	003a8f06 	br	13f8 <__ram_exceptions_end+0xfbfe11a4>
    29bc:	01000074 	movhi	r4,1
    29c0:	21006284 	addi	r4,r4,394
    29c4:	d9003515 	stw	r4,212(sp)
    29c8:	003b7606 	br	17a4 <__ram_exceptions_end+0xfbfe1550>
    29cc:	d8802917 	ldw	r2,164(sp)
    29d0:	00c00184 	movi	r3,6
    29d4:	1880012e 	bgeu	r3,r2,29dc <___vfprintf_internal_r+0x1ca0>
    29d8:	1805883a 	mov	r2,r3
    29dc:	d8802e15 	stw	r2,184(sp)
    29e0:	1000ef16 	blt	r2,zero,2da0 <___vfprintf_internal_r+0x2064>
    29e4:	04000074 	movhi	r16,1
    29e8:	d8802a15 	stw	r2,168(sp)
    29ec:	dcc02d15 	stw	r19,180(sp)
    29f0:	d8002915 	stw	zero,164(sp)
    29f4:	d8003215 	stw	zero,200(sp)
    29f8:	84005c04 	addi	r16,r16,368
    29fc:	0039883a 	mov	fp,zero
    2a00:	003aa206 	br	148c <__ram_exceptions_end+0xfbfe1238>
    2a04:	0021883a 	mov	r16,zero
    2a08:	003e0706 	br	2228 <__ram_exceptions_end+0xfbfe1fd4>
    2a0c:	d9002c17 	ldw	r4,176(sp)
    2a10:	d9801e04 	addi	r6,sp,120
    2a14:	b80b883a 	mov	r5,r23
    2a18:	00078540 	call	7854 <__sprint_r>
    2a1c:	1039c91e 	bne	r2,zero,1144 <__ram_exceptions_end+0xfbfe0ef0>
    2a20:	d8802617 	ldw	r2,152(sp)
    2a24:	d9403317 	ldw	r5,204(sp)
    2a28:	d8c02017 	ldw	r3,128(sp)
    2a2c:	da000404 	addi	r8,sp,16
    2a30:	2885c83a 	sub	r2,r5,r2
    2a34:	003dfb06 	br	2224 <__ram_exceptions_end+0xfbfe1fd0>
    2a38:	9080004c 	andi	r2,r18,1
    2a3c:	103e8f1e 	bne	r2,zero,247c <__ram_exceptions_end+0xfbfe2228>
    2a40:	d8802117 	ldw	r2,132(sp)
    2a44:	003e9e06 	br	24c0 <__ram_exceptions_end+0xfbfe226c>
    2a48:	1025883a 	mov	r18,r2
    2a4c:	0039883a 	mov	fp,zero
    2a50:	00800084 	movi	r2,2
    2a54:	003fd306 	br	29a4 <__ram_exceptions_end+0xfbfe2750>
    2a58:	07000b44 	movi	fp,45
    2a5c:	df002785 	stb	fp,158(sp)
    2a60:	003a4006 	br	1364 <__ram_exceptions_end+0xfbfe1110>
    2a64:	00c00b44 	movi	r3,45
    2a68:	d8c02785 	stb	r3,158(sp)
    2a6c:	d8802a15 	stw	r2,168(sp)
    2a70:	dc802b17 	ldw	r18,172(sp)
    2a74:	d8002915 	stw	zero,164(sp)
    2a78:	07000b44 	movi	fp,45
    2a7c:	003a8006 	br	1480 <__ram_exceptions_end+0xfbfe122c>
    2a80:	04000074 	movhi	r16,1
    2a84:	84005104 	addi	r16,r16,324
    2a88:	003f4706 	br	27a8 <__ram_exceptions_end+0xfbfe2554>
    2a8c:	d8c02d17 	ldw	r3,180(sp)
    2a90:	d9002f17 	ldw	r4,188(sp)
    2a94:	18800017 	ldw	r2,0(r3)
    2a98:	18c00104 	addi	r3,r3,4
    2a9c:	d8c02d15 	stw	r3,180(sp)
    2aa0:	11000015 	stw	r4,0(r2)
    2aa4:	0038dd06 	br	e1c <__ram_exceptions_end+0xfbfe0bc8>
    2aa8:	dd802617 	ldw	r22,152(sp)
    2aac:	00bfff44 	movi	r2,-3
    2ab0:	b0801c16 	blt	r22,r2,2b24 <___vfprintf_internal_r+0x1de8>
    2ab4:	d9402917 	ldw	r5,164(sp)
    2ab8:	2d801a16 	blt	r5,r22,2b24 <___vfprintf_internal_r+0x1de8>
    2abc:	dd803215 	stw	r22,200(sp)
    2ac0:	003e8906 	br	24e8 <__ram_exceptions_end+0xfbfe2294>
    2ac4:	01000074 	movhi	r4,1
    2ac8:	21005e84 	addi	r4,r4,378
    2acc:	d9002b15 	stw	r4,172(sp)
    2ad0:	003c9106 	br	1d18 <__ram_exceptions_end+0xfbfe1ac4>
    2ad4:	e005883a 	mov	r2,fp
    2ad8:	003e7906 	br	24c0 <__ram_exceptions_end+0xfbfe226c>
    2adc:	d9402917 	ldw	r5,164(sp)
    2ae0:	df002783 	ldbu	fp,158(sp)
    2ae4:	dcc02d15 	stw	r19,180(sp)
    2ae8:	d9402a15 	stw	r5,168(sp)
    2aec:	d9402e15 	stw	r5,184(sp)
    2af0:	d8002915 	stw	zero,164(sp)
    2af4:	d8003215 	stw	zero,200(sp)
    2af8:	003a5d06 	br	1470 <__ram_exceptions_end+0xfbfe121c>
    2afc:	9080004c 	andi	r2,r18,1
    2b00:	0039883a 	mov	fp,zero
    2b04:	10000426 	beq	r2,zero,2b18 <___vfprintf_internal_r+0x1ddc>
    2b08:	00800c04 	movi	r2,48
    2b0c:	dc001dc4 	addi	r16,sp,119
    2b10:	d8801dc5 	stb	r2,119(sp)
    2b14:	003b8006 	br	1918 <__ram_exceptions_end+0xfbfe16c4>
    2b18:	d8002e15 	stw	zero,184(sp)
    2b1c:	dc001e04 	addi	r16,sp,120
    2b20:	003a4d06 	br	1458 <__ram_exceptions_end+0xfbfe1204>
    2b24:	8c7fff84 	addi	r17,r17,-2
    2b28:	b5bfffc4 	addi	r22,r22,-1
    2b2c:	dd802615 	stw	r22,152(sp)
    2b30:	dc4022c5 	stb	r17,139(sp)
    2b34:	b000bf16 	blt	r22,zero,2e34 <___vfprintf_internal_r+0x20f8>
    2b38:	00800ac4 	movi	r2,43
    2b3c:	d8802305 	stb	r2,140(sp)
    2b40:	00800244 	movi	r2,9
    2b44:	15807016 	blt	r2,r22,2d08 <___vfprintf_internal_r+0x1fcc>
    2b48:	00800c04 	movi	r2,48
    2b4c:	b5800c04 	addi	r22,r22,48
    2b50:	d8802345 	stb	r2,141(sp)
    2b54:	dd802385 	stb	r22,142(sp)
    2b58:	d88023c4 	addi	r2,sp,143
    2b5c:	df0022c4 	addi	fp,sp,139
    2b60:	d8c03317 	ldw	r3,204(sp)
    2b64:	1739c83a 	sub	fp,r2,fp
    2b68:	d9003317 	ldw	r4,204(sp)
    2b6c:	e0c7883a 	add	r3,fp,r3
    2b70:	df003a15 	stw	fp,232(sp)
    2b74:	d8c02e15 	stw	r3,184(sp)
    2b78:	00800044 	movi	r2,1
    2b7c:	1100b30e 	bge	r2,r4,2e4c <___vfprintf_internal_r+0x2110>
    2b80:	d8c02e17 	ldw	r3,184(sp)
    2b84:	18c00044 	addi	r3,r3,1
    2b88:	d8c02e15 	stw	r3,184(sp)
    2b8c:	1805883a 	mov	r2,r3
    2b90:	1800ac16 	blt	r3,zero,2e44 <___vfprintf_internal_r+0x2108>
    2b94:	d8003215 	stw	zero,200(sp)
    2b98:	003e5d06 	br	2510 <__ram_exceptions_end+0xfbfe22bc>
    2b9c:	d9002c17 	ldw	r4,176(sp)
    2ba0:	d9801e04 	addi	r6,sp,120
    2ba4:	b80b883a 	mov	r5,r23
    2ba8:	00078540 	call	7854 <__sprint_r>
    2bac:	1039651e 	bne	r2,zero,1144 <__ram_exceptions_end+0xfbfe0ef0>
    2bb0:	dc402617 	ldw	r17,152(sp)
    2bb4:	d8c02017 	ldw	r3,128(sp)
    2bb8:	d8801f17 	ldw	r2,124(sp)
    2bbc:	da000404 	addi	r8,sp,16
    2bc0:	003ed606 	br	271c <__ram_exceptions_end+0xfbfe24c8>
    2bc4:	582b883a 	mov	r21,r11
    2bc8:	d8002915 	stw	zero,164(sp)
    2bcc:	0038bd06 	br	ec4 <__ram_exceptions_end+0xfbfe0c70>
    2bd0:	d8802917 	ldw	r2,164(sp)
    2bd4:	103e071e 	bne	r2,zero,23f4 <__ram_exceptions_end+0xfbfe21a0>
    2bd8:	dc002915 	stw	r16,164(sp)
    2bdc:	003e0506 	br	23f4 <__ram_exceptions_end+0xfbfe21a0>
    2be0:	d9002917 	ldw	r4,164(sp)
    2be4:	20c00044 	addi	r3,r4,1
    2be8:	003e0f06 	br	2428 <__ram_exceptions_end+0xfbfe21d4>
    2bec:	01400184 	movi	r5,6
    2bf0:	d9402915 	stw	r5,164(sp)
    2bf4:	003dff06 	br	23f4 <__ram_exceptions_end+0xfbfe21a0>
    2bf8:	d8802104 	addi	r2,sp,132
    2bfc:	d8800315 	stw	r2,12(sp)
    2c00:	d8802504 	addi	r2,sp,148
    2c04:	d8800215 	stw	r2,8(sp)
    2c08:	d8802604 	addi	r2,sp,152
    2c0c:	d8800115 	stw	r2,4(sp)
    2c10:	d8802917 	ldw	r2,164(sp)
    2c14:	d9403617 	ldw	r5,216(sp)
    2c18:	d9002c17 	ldw	r4,176(sp)
    2c1c:	d8800015 	stw	r2,0(sp)
    2c20:	01c000c4 	movi	r7,3
    2c24:	980d883a 	mov	r6,r19
    2c28:	da003d15 	stw	r8,244(sp)
    2c2c:	00033600 	call	3360 <_dtoa_r>
    2c30:	d8c02917 	ldw	r3,164(sp)
    2c34:	da003d17 	ldw	r8,244(sp)
    2c38:	1021883a 	mov	r16,r2
    2c3c:	10f9883a 	add	fp,r2,r3
    2c40:	81000007 	ldb	r4,0(r16)
    2c44:	00800c04 	movi	r2,48
    2c48:	20805e26 	beq	r4,r2,2dc4 <___vfprintf_internal_r+0x2088>
    2c4c:	d8c02617 	ldw	r3,152(sp)
    2c50:	e0f9883a 	add	fp,fp,r3
    2c54:	003e0a06 	br	2480 <__ram_exceptions_end+0xfbfe222c>
    2c58:	00c00b44 	movi	r3,45
    2c5c:	24e0003c 	xorhi	r19,r4,32768
    2c60:	d8c02a05 	stb	r3,168(sp)
    2c64:	003de906 	br	240c <__ram_exceptions_end+0xfbfe21b8>
    2c68:	d8c03217 	ldw	r3,200(sp)
    2c6c:	00c07a0e 	bge	zero,r3,2e58 <___vfprintf_internal_r+0x211c>
    2c70:	00800044 	movi	r2,1
    2c74:	d9003317 	ldw	r4,204(sp)
    2c78:	1105883a 	add	r2,r2,r4
    2c7c:	d8802e15 	stw	r2,184(sp)
    2c80:	10004e16 	blt	r2,zero,2dbc <___vfprintf_internal_r+0x2080>
    2c84:	044019c4 	movi	r17,103
    2c88:	003e2106 	br	2510 <__ram_exceptions_end+0xfbfe22bc>
    2c8c:	d9002917 	ldw	r4,164(sp)
    2c90:	d8802104 	addi	r2,sp,132
    2c94:	d8800315 	stw	r2,12(sp)
    2c98:	d9000015 	stw	r4,0(sp)
    2c9c:	d8802504 	addi	r2,sp,148
    2ca0:	d9403617 	ldw	r5,216(sp)
    2ca4:	d9002c17 	ldw	r4,176(sp)
    2ca8:	d8800215 	stw	r2,8(sp)
    2cac:	d8802604 	addi	r2,sp,152
    2cb0:	d8800115 	stw	r2,4(sp)
    2cb4:	01c000c4 	movi	r7,3
    2cb8:	980d883a 	mov	r6,r19
    2cbc:	da003d15 	stw	r8,244(sp)
    2cc0:	00033600 	call	3360 <_dtoa_r>
    2cc4:	d8c02917 	ldw	r3,164(sp)
    2cc8:	da003d17 	ldw	r8,244(sp)
    2ccc:	1021883a 	mov	r16,r2
    2cd0:	00801184 	movi	r2,70
    2cd4:	80f9883a 	add	fp,r16,r3
    2cd8:	88bfd926 	beq	r17,r2,2c40 <__ram_exceptions_end+0xfbfe29ec>
    2cdc:	003de806 	br	2480 <__ram_exceptions_end+0xfbfe222c>
    2ce0:	d9002917 	ldw	r4,164(sp)
    2ce4:	00c04d0e 	bge	zero,r3,2e1c <___vfprintf_internal_r+0x20e0>
    2ce8:	2000441e 	bne	r4,zero,2dfc <___vfprintf_internal_r+0x20c0>
    2cec:	9480004c 	andi	r18,r18,1
    2cf0:	9000421e 	bne	r18,zero,2dfc <___vfprintf_internal_r+0x20c0>
    2cf4:	1805883a 	mov	r2,r3
    2cf8:	18007016 	blt	r3,zero,2ebc <___vfprintf_internal_r+0x2180>
    2cfc:	d8c03217 	ldw	r3,200(sp)
    2d00:	d8c02e15 	stw	r3,184(sp)
    2d04:	003e0206 	br	2510 <__ram_exceptions_end+0xfbfe22bc>
    2d08:	df0022c4 	addi	fp,sp,139
    2d0c:	dc002915 	stw	r16,164(sp)
    2d10:	4027883a 	mov	r19,r8
    2d14:	e021883a 	mov	r16,fp
    2d18:	b009883a 	mov	r4,r22
    2d1c:	01400284 	movi	r5,10
    2d20:	0000ba00 	call	ba0 <__modsi3>
    2d24:	10800c04 	addi	r2,r2,48
    2d28:	843fffc4 	addi	r16,r16,-1
    2d2c:	b009883a 	mov	r4,r22
    2d30:	01400284 	movi	r5,10
    2d34:	80800005 	stb	r2,0(r16)
    2d38:	0000b1c0 	call	b1c <__divsi3>
    2d3c:	102d883a 	mov	r22,r2
    2d40:	00800244 	movi	r2,9
    2d44:	15bff416 	blt	r2,r22,2d18 <__ram_exceptions_end+0xfbfe2ac4>
    2d48:	9811883a 	mov	r8,r19
    2d4c:	b0800c04 	addi	r2,r22,48
    2d50:	8027883a 	mov	r19,r16
    2d54:	997fffc4 	addi	r5,r19,-1
    2d58:	98bfffc5 	stb	r2,-1(r19)
    2d5c:	dc002917 	ldw	r16,164(sp)
    2d60:	2f006a2e 	bgeu	r5,fp,2f0c <___vfprintf_internal_r+0x21d0>
    2d64:	d9c02384 	addi	r7,sp,142
    2d68:	3ccfc83a 	sub	r7,r7,r19
    2d6c:	d9002344 	addi	r4,sp,141
    2d70:	e1cf883a 	add	r7,fp,r7
    2d74:	00000106 	br	2d7c <___vfprintf_internal_r+0x2040>
    2d78:	28800003 	ldbu	r2,0(r5)
    2d7c:	20800005 	stb	r2,0(r4)
    2d80:	21000044 	addi	r4,r4,1
    2d84:	29400044 	addi	r5,r5,1
    2d88:	393ffb1e 	bne	r7,r4,2d78 <__ram_exceptions_end+0xfbfe2b24>
    2d8c:	d8802304 	addi	r2,sp,140
    2d90:	14c5c83a 	sub	r2,r2,r19
    2d94:	d8c02344 	addi	r3,sp,141
    2d98:	1885883a 	add	r2,r3,r2
    2d9c:	003f7006 	br	2b60 <__ram_exceptions_end+0xfbfe290c>
    2da0:	0005883a 	mov	r2,zero
    2da4:	003f0f06 	br	29e4 <__ram_exceptions_end+0xfbfe2790>
    2da8:	d8c03217 	ldw	r3,200(sp)
    2dac:	18c00044 	addi	r3,r3,1
    2db0:	d8c02e15 	stw	r3,184(sp)
    2db4:	1805883a 	mov	r2,r3
    2db8:	183fb20e 	bge	r3,zero,2c84 <__ram_exceptions_end+0xfbfe2a30>
    2dbc:	0005883a 	mov	r2,zero
    2dc0:	003fb006 	br	2c84 <__ram_exceptions_end+0xfbfe2a30>
    2dc4:	d9003617 	ldw	r4,216(sp)
    2dc8:	000d883a 	mov	r6,zero
    2dcc:	000f883a 	mov	r7,zero
    2dd0:	980b883a 	mov	r5,r19
    2dd4:	d8c03c15 	stw	r3,240(sp)
    2dd8:	da003d15 	stw	r8,244(sp)
    2ddc:	000be940 	call	be94 <__eqdf2>
    2de0:	d8c03c17 	ldw	r3,240(sp)
    2de4:	da003d17 	ldw	r8,244(sp)
    2de8:	103f9826 	beq	r2,zero,2c4c <__ram_exceptions_end+0xfbfe29f8>
    2dec:	00800044 	movi	r2,1
    2df0:	10c7c83a 	sub	r3,r2,r3
    2df4:	d8c02615 	stw	r3,152(sp)
    2df8:	003f9506 	br	2c50 <__ram_exceptions_end+0xfbfe29fc>
    2dfc:	d9002917 	ldw	r4,164(sp)
    2e00:	d8c03217 	ldw	r3,200(sp)
    2e04:	20800044 	addi	r2,r4,1
    2e08:	1885883a 	add	r2,r3,r2
    2e0c:	d8802e15 	stw	r2,184(sp)
    2e10:	103dbf0e 	bge	r2,zero,2510 <__ram_exceptions_end+0xfbfe22bc>
    2e14:	0005883a 	mov	r2,zero
    2e18:	003dbd06 	br	2510 <__ram_exceptions_end+0xfbfe22bc>
    2e1c:	2000211e 	bne	r4,zero,2ea4 <___vfprintf_internal_r+0x2168>
    2e20:	9480004c 	andi	r18,r18,1
    2e24:	90001f1e 	bne	r18,zero,2ea4 <___vfprintf_internal_r+0x2168>
    2e28:	00800044 	movi	r2,1
    2e2c:	d8802e15 	stw	r2,184(sp)
    2e30:	003db706 	br	2510 <__ram_exceptions_end+0xfbfe22bc>
    2e34:	00800b44 	movi	r2,45
    2e38:	05adc83a 	sub	r22,zero,r22
    2e3c:	d8802305 	stb	r2,140(sp)
    2e40:	003f3f06 	br	2b40 <__ram_exceptions_end+0xfbfe28ec>
    2e44:	0005883a 	mov	r2,zero
    2e48:	003f5206 	br	2b94 <__ram_exceptions_end+0xfbfe2940>
    2e4c:	90a4703a 	and	r18,r18,r2
    2e50:	903f4e26 	beq	r18,zero,2b8c <__ram_exceptions_end+0xfbfe2938>
    2e54:	003f4a06 	br	2b80 <__ram_exceptions_end+0xfbfe292c>
    2e58:	00800084 	movi	r2,2
    2e5c:	10c5c83a 	sub	r2,r2,r3
    2e60:	003f8406 	br	2c74 <__ram_exceptions_end+0xfbfe2a20>
    2e64:	d8802d17 	ldw	r2,180(sp)
    2e68:	d9002d17 	ldw	r4,180(sp)
    2e6c:	ac400043 	ldbu	r17,1(r21)
    2e70:	10800017 	ldw	r2,0(r2)
    2e74:	582b883a 	mov	r21,r11
    2e78:	d8802915 	stw	r2,164(sp)
    2e7c:	20800104 	addi	r2,r4,4
    2e80:	d9002917 	ldw	r4,164(sp)
    2e84:	d8802d15 	stw	r2,180(sp)
    2e88:	203e7a0e 	bge	r4,zero,2874 <__ram_exceptions_end+0xfbfe2620>
    2e8c:	8c403fcc 	andi	r17,r17,255
    2e90:	00bfffc4 	movi	r2,-1
    2e94:	8c40201c 	xori	r17,r17,128
    2e98:	d8802915 	stw	r2,164(sp)
    2e9c:	8c7fe004 	addi	r17,r17,-128
    2ea0:	00380706 	br	ec0 <__ram_exceptions_end+0xfbfe0c6c>
    2ea4:	d8c02917 	ldw	r3,164(sp)
    2ea8:	18c00084 	addi	r3,r3,2
    2eac:	d8c02e15 	stw	r3,184(sp)
    2eb0:	1805883a 	mov	r2,r3
    2eb4:	183d960e 	bge	r3,zero,2510 <__ram_exceptions_end+0xfbfe22bc>
    2eb8:	003fd606 	br	2e14 <__ram_exceptions_end+0xfbfe2bc0>
    2ebc:	0005883a 	mov	r2,zero
    2ec0:	003f8e06 	br	2cfc <__ram_exceptions_end+0xfbfe2aa8>
    2ec4:	9080004c 	andi	r2,r18,1
    2ec8:	103f811e 	bne	r2,zero,2cd0 <__ram_exceptions_end+0xfbfe2a7c>
    2ecc:	d8802117 	ldw	r2,132(sp)
    2ed0:	1405c83a 	sub	r2,r2,r16
    2ed4:	d8803315 	stw	r2,204(sp)
    2ed8:	b47ef326 	beq	r22,r17,2aa8 <__ram_exceptions_end+0xfbfe2854>
    2edc:	dd802617 	ldw	r22,152(sp)
    2ee0:	003f1106 	br	2b28 <__ram_exceptions_end+0xfbfe28d4>
    2ee4:	d9c02785 	stb	r7,158(sp)
    2ee8:	00390406 	br	12fc <__ram_exceptions_end+0xfbfe10a8>
    2eec:	d9c02785 	stb	r7,158(sp)
    2ef0:	0038d306 	br	1240 <__ram_exceptions_end+0xfbfe0fec>
    2ef4:	d9c02785 	stb	r7,158(sp)
    2ef8:	003a6106 	br	1880 <__ram_exceptions_end+0xfbfe162c>
    2efc:	d9c02785 	stb	r7,158(sp)
    2f00:	003af806 	br	1ae4 <__ram_exceptions_end+0xfbfe1890>
    2f04:	0005883a 	mov	r2,zero
    2f08:	003d7e06 	br	2504 <__ram_exceptions_end+0xfbfe22b0>
    2f0c:	d8802344 	addi	r2,sp,141
    2f10:	003f1306 	br	2b60 <__ram_exceptions_end+0xfbfe290c>
    2f14:	d9c02785 	stb	r7,158(sp)
    2f18:	00392306 	br	13a8 <__ram_exceptions_end+0xfbfe1154>
    2f1c:	d9c02785 	stb	r7,158(sp)
    2f20:	003aa906 	br	19c8 <__ram_exceptions_end+0xfbfe1774>
    2f24:	d9c02785 	stb	r7,158(sp)
    2f28:	003a3d06 	br	1820 <__ram_exceptions_end+0xfbfe15cc>
    2f2c:	d9c02785 	stb	r7,158(sp)
    2f30:	003aca06 	br	1a5c <__ram_exceptions_end+0xfbfe1808>

00002f34 <__vfprintf_internal>:
    2f34:	00800074 	movhi	r2,1
    2f38:	1087b904 	addi	r2,r2,7908
    2f3c:	300f883a 	mov	r7,r6
    2f40:	280d883a 	mov	r6,r5
    2f44:	200b883a 	mov	r5,r4
    2f48:	11000017 	ldw	r4,0(r2)
    2f4c:	0000d3c1 	jmpi	d3c <___vfprintf_internal_r>

00002f50 <__sbprintf>:
    2f50:	2880030b 	ldhu	r2,12(r5)
    2f54:	2ac01917 	ldw	r11,100(r5)
    2f58:	2a80038b 	ldhu	r10,14(r5)
    2f5c:	2a400717 	ldw	r9,28(r5)
    2f60:	2a000917 	ldw	r8,36(r5)
    2f64:	defee204 	addi	sp,sp,-1144
    2f68:	00c10004 	movi	r3,1024
    2f6c:	dc011a15 	stw	r16,1128(sp)
    2f70:	10bfff4c 	andi	r2,r2,65533
    2f74:	2821883a 	mov	r16,r5
    2f78:	d8cb883a 	add	r5,sp,r3
    2f7c:	dc811c15 	stw	r18,1136(sp)
    2f80:	dc411b15 	stw	r17,1132(sp)
    2f84:	dfc11d15 	stw	ra,1140(sp)
    2f88:	2025883a 	mov	r18,r4
    2f8c:	d881030d 	sth	r2,1036(sp)
    2f90:	dac11915 	stw	r11,1124(sp)
    2f94:	da81038d 	sth	r10,1038(sp)
    2f98:	da410715 	stw	r9,1052(sp)
    2f9c:	da010915 	stw	r8,1060(sp)
    2fa0:	dec10015 	stw	sp,1024(sp)
    2fa4:	dec10415 	stw	sp,1040(sp)
    2fa8:	d8c10215 	stw	r3,1032(sp)
    2fac:	d8c10515 	stw	r3,1044(sp)
    2fb0:	d8010615 	stw	zero,1048(sp)
    2fb4:	0000d3c0 	call	d3c <___vfprintf_internal_r>
    2fb8:	1023883a 	mov	r17,r2
    2fbc:	10000416 	blt	r2,zero,2fd0 <__sbprintf+0x80>
    2fc0:	d9410004 	addi	r5,sp,1024
    2fc4:	9009883a 	mov	r4,r18
    2fc8:	0004c040 	call	4c04 <_fflush_r>
    2fcc:	10000d1e 	bne	r2,zero,3004 <__sbprintf+0xb4>
    2fd0:	d881030b 	ldhu	r2,1036(sp)
    2fd4:	1080100c 	andi	r2,r2,64
    2fd8:	10000326 	beq	r2,zero,2fe8 <__sbprintf+0x98>
    2fdc:	8080030b 	ldhu	r2,12(r16)
    2fe0:	10801014 	ori	r2,r2,64
    2fe4:	8080030d 	sth	r2,12(r16)
    2fe8:	8805883a 	mov	r2,r17
    2fec:	dfc11d17 	ldw	ra,1140(sp)
    2ff0:	dc811c17 	ldw	r18,1136(sp)
    2ff4:	dc411b17 	ldw	r17,1132(sp)
    2ff8:	dc011a17 	ldw	r16,1128(sp)
    2ffc:	dec11e04 	addi	sp,sp,1144
    3000:	f800283a 	ret
    3004:	047fffc4 	movi	r17,-1
    3008:	003ff106 	br	2fd0 <__ram_exceptions_end+0xfbfe2d7c>

0000300c <__swsetup_r>:
    300c:	00800074 	movhi	r2,1
    3010:	defffd04 	addi	sp,sp,-12
    3014:	1087b904 	addi	r2,r2,7908
    3018:	dc400115 	stw	r17,4(sp)
    301c:	2023883a 	mov	r17,r4
    3020:	11000017 	ldw	r4,0(r2)
    3024:	dc000015 	stw	r16,0(sp)
    3028:	dfc00215 	stw	ra,8(sp)
    302c:	2821883a 	mov	r16,r5
    3030:	20000226 	beq	r4,zero,303c <__swsetup_r+0x30>
    3034:	20800e17 	ldw	r2,56(r4)
    3038:	10003126 	beq	r2,zero,3100 <__swsetup_r+0xf4>
    303c:	8080030b 	ldhu	r2,12(r16)
    3040:	10c0020c 	andi	r3,r2,8
    3044:	1009883a 	mov	r4,r2
    3048:	18000f26 	beq	r3,zero,3088 <__swsetup_r+0x7c>
    304c:	80c00417 	ldw	r3,16(r16)
    3050:	18001526 	beq	r3,zero,30a8 <__swsetup_r+0x9c>
    3054:	1100004c 	andi	r4,r2,1
    3058:	20001c1e 	bne	r4,zero,30cc <__swsetup_r+0xc0>
    305c:	1080008c 	andi	r2,r2,2
    3060:	1000291e 	bne	r2,zero,3108 <__swsetup_r+0xfc>
    3064:	80800517 	ldw	r2,20(r16)
    3068:	80800215 	stw	r2,8(r16)
    306c:	18001c26 	beq	r3,zero,30e0 <__swsetup_r+0xd4>
    3070:	0005883a 	mov	r2,zero
    3074:	dfc00217 	ldw	ra,8(sp)
    3078:	dc400117 	ldw	r17,4(sp)
    307c:	dc000017 	ldw	r16,0(sp)
    3080:	dec00304 	addi	sp,sp,12
    3084:	f800283a 	ret
    3088:	2080040c 	andi	r2,r4,16
    308c:	10002e26 	beq	r2,zero,3148 <__swsetup_r+0x13c>
    3090:	2080010c 	andi	r2,r4,4
    3094:	10001e1e 	bne	r2,zero,3110 <__swsetup_r+0x104>
    3098:	80c00417 	ldw	r3,16(r16)
    309c:	20800214 	ori	r2,r4,8
    30a0:	8080030d 	sth	r2,12(r16)
    30a4:	183feb1e 	bne	r3,zero,3054 <__ram_exceptions_end+0xfbfe2e00>
    30a8:	1100a00c 	andi	r4,r2,640
    30ac:	01408004 	movi	r5,512
    30b0:	217fe826 	beq	r4,r5,3054 <__ram_exceptions_end+0xfbfe2e00>
    30b4:	800b883a 	mov	r5,r16
    30b8:	8809883a 	mov	r4,r17
    30bc:	00056c80 	call	56c8 <__smakebuf_r>
    30c0:	8080030b 	ldhu	r2,12(r16)
    30c4:	80c00417 	ldw	r3,16(r16)
    30c8:	003fe206 	br	3054 <__ram_exceptions_end+0xfbfe2e00>
    30cc:	80800517 	ldw	r2,20(r16)
    30d0:	80000215 	stw	zero,8(r16)
    30d4:	0085c83a 	sub	r2,zero,r2
    30d8:	80800615 	stw	r2,24(r16)
    30dc:	183fe41e 	bne	r3,zero,3070 <__ram_exceptions_end+0xfbfe2e1c>
    30e0:	80c0030b 	ldhu	r3,12(r16)
    30e4:	0005883a 	mov	r2,zero
    30e8:	1900200c 	andi	r4,r3,128
    30ec:	203fe126 	beq	r4,zero,3074 <__ram_exceptions_end+0xfbfe2e20>
    30f0:	18c01014 	ori	r3,r3,64
    30f4:	80c0030d 	sth	r3,12(r16)
    30f8:	00bfffc4 	movi	r2,-1
    30fc:	003fdd06 	br	3074 <__ram_exceptions_end+0xfbfe2e20>
    3100:	0004fe00 	call	4fe0 <__sinit>
    3104:	003fcd06 	br	303c <__ram_exceptions_end+0xfbfe2de8>
    3108:	0005883a 	mov	r2,zero
    310c:	003fd606 	br	3068 <__ram_exceptions_end+0xfbfe2e14>
    3110:	81400c17 	ldw	r5,48(r16)
    3114:	28000626 	beq	r5,zero,3130 <__swsetup_r+0x124>
    3118:	80801004 	addi	r2,r16,64
    311c:	28800326 	beq	r5,r2,312c <__swsetup_r+0x120>
    3120:	8809883a 	mov	r4,r17
    3124:	00051540 	call	5154 <_free_r>
    3128:	8100030b 	ldhu	r4,12(r16)
    312c:	80000c15 	stw	zero,48(r16)
    3130:	80c00417 	ldw	r3,16(r16)
    3134:	00bff6c4 	movi	r2,-37
    3138:	1108703a 	and	r4,r2,r4
    313c:	80000115 	stw	zero,4(r16)
    3140:	80c00015 	stw	r3,0(r16)
    3144:	003fd506 	br	309c <__ram_exceptions_end+0xfbfe2e48>
    3148:	00800244 	movi	r2,9
    314c:	88800015 	stw	r2,0(r17)
    3150:	20801014 	ori	r2,r4,64
    3154:	8080030d 	sth	r2,12(r16)
    3158:	00bfffc4 	movi	r2,-1
    315c:	003fc506 	br	3074 <__ram_exceptions_end+0xfbfe2e20>

00003160 <quorem>:
    3160:	defff704 	addi	sp,sp,-36
    3164:	dc800215 	stw	r18,8(sp)
    3168:	20800417 	ldw	r2,16(r4)
    316c:	2c800417 	ldw	r18,16(r5)
    3170:	dfc00815 	stw	ra,32(sp)
    3174:	ddc00715 	stw	r23,28(sp)
    3178:	dd800615 	stw	r22,24(sp)
    317c:	dd400515 	stw	r21,20(sp)
    3180:	dd000415 	stw	r20,16(sp)
    3184:	dcc00315 	stw	r19,12(sp)
    3188:	dc400115 	stw	r17,4(sp)
    318c:	dc000015 	stw	r16,0(sp)
    3190:	14807116 	blt	r2,r18,3358 <quorem+0x1f8>
    3194:	94bfffc4 	addi	r18,r18,-1
    3198:	94ad883a 	add	r22,r18,r18
    319c:	b5ad883a 	add	r22,r22,r22
    31a0:	2c400504 	addi	r17,r5,20
    31a4:	8da9883a 	add	r20,r17,r22
    31a8:	25400504 	addi	r21,r4,20
    31ac:	282f883a 	mov	r23,r5
    31b0:	adad883a 	add	r22,r21,r22
    31b4:	a1400017 	ldw	r5,0(r20)
    31b8:	2021883a 	mov	r16,r4
    31bc:	b1000017 	ldw	r4,0(r22)
    31c0:	29400044 	addi	r5,r5,1
    31c4:	0000c140 	call	c14 <__udivsi3>
    31c8:	1027883a 	mov	r19,r2
    31cc:	10002c26 	beq	r2,zero,3280 <quorem+0x120>
    31d0:	a813883a 	mov	r9,r21
    31d4:	880b883a 	mov	r5,r17
    31d8:	0009883a 	mov	r4,zero
    31dc:	000d883a 	mov	r6,zero
    31e0:	2a000017 	ldw	r8,0(r5)
    31e4:	49c00017 	ldw	r7,0(r9)
    31e8:	29400104 	addi	r5,r5,4
    31ec:	40bfffcc 	andi	r2,r8,65535
    31f0:	14c5383a 	mul	r2,r2,r19
    31f4:	4010d43a 	srli	r8,r8,16
    31f8:	38ffffcc 	andi	r3,r7,65535
    31fc:	1105883a 	add	r2,r2,r4
    3200:	1008d43a 	srli	r4,r2,16
    3204:	44d1383a 	mul	r8,r8,r19
    3208:	198d883a 	add	r6,r3,r6
    320c:	10ffffcc 	andi	r3,r2,65535
    3210:	30c7c83a 	sub	r3,r6,r3
    3214:	380ed43a 	srli	r7,r7,16
    3218:	4105883a 	add	r2,r8,r4
    321c:	180dd43a 	srai	r6,r3,16
    3220:	113fffcc 	andi	r4,r2,65535
    3224:	390fc83a 	sub	r7,r7,r4
    3228:	398d883a 	add	r6,r7,r6
    322c:	300e943a 	slli	r7,r6,16
    3230:	18ffffcc 	andi	r3,r3,65535
    3234:	1008d43a 	srli	r4,r2,16
    3238:	38ceb03a 	or	r7,r7,r3
    323c:	49c00015 	stw	r7,0(r9)
    3240:	300dd43a 	srai	r6,r6,16
    3244:	4a400104 	addi	r9,r9,4
    3248:	a17fe52e 	bgeu	r20,r5,31e0 <__ram_exceptions_end+0xfbfe2f8c>
    324c:	b0800017 	ldw	r2,0(r22)
    3250:	10000b1e 	bne	r2,zero,3280 <quorem+0x120>
    3254:	b0bfff04 	addi	r2,r22,-4
    3258:	a880082e 	bgeu	r21,r2,327c <quorem+0x11c>
    325c:	b0ffff17 	ldw	r3,-4(r22)
    3260:	18000326 	beq	r3,zero,3270 <quorem+0x110>
    3264:	00000506 	br	327c <quorem+0x11c>
    3268:	10c00017 	ldw	r3,0(r2)
    326c:	1800031e 	bne	r3,zero,327c <quorem+0x11c>
    3270:	10bfff04 	addi	r2,r2,-4
    3274:	94bfffc4 	addi	r18,r18,-1
    3278:	a8bffb36 	bltu	r21,r2,3268 <__ram_exceptions_end+0xfbfe3014>
    327c:	84800415 	stw	r18,16(r16)
    3280:	b80b883a 	mov	r5,r23
    3284:	8009883a 	mov	r4,r16
    3288:	0006cac0 	call	6cac <__mcmp>
    328c:	10002616 	blt	r2,zero,3328 <quorem+0x1c8>
    3290:	9cc00044 	addi	r19,r19,1
    3294:	a805883a 	mov	r2,r21
    3298:	000b883a 	mov	r5,zero
    329c:	11000017 	ldw	r4,0(r2)
    32a0:	89800017 	ldw	r6,0(r17)
    32a4:	10800104 	addi	r2,r2,4
    32a8:	20ffffcc 	andi	r3,r4,65535
    32ac:	194b883a 	add	r5,r3,r5
    32b0:	30ffffcc 	andi	r3,r6,65535
    32b4:	28c7c83a 	sub	r3,r5,r3
    32b8:	300cd43a 	srli	r6,r6,16
    32bc:	2008d43a 	srli	r4,r4,16
    32c0:	180bd43a 	srai	r5,r3,16
    32c4:	18ffffcc 	andi	r3,r3,65535
    32c8:	2189c83a 	sub	r4,r4,r6
    32cc:	2149883a 	add	r4,r4,r5
    32d0:	200c943a 	slli	r6,r4,16
    32d4:	8c400104 	addi	r17,r17,4
    32d8:	200bd43a 	srai	r5,r4,16
    32dc:	30c6b03a 	or	r3,r6,r3
    32e0:	10ffff15 	stw	r3,-4(r2)
    32e4:	a47fed2e 	bgeu	r20,r17,329c <__ram_exceptions_end+0xfbfe3048>
    32e8:	9485883a 	add	r2,r18,r18
    32ec:	1085883a 	add	r2,r2,r2
    32f0:	a887883a 	add	r3,r21,r2
    32f4:	18800017 	ldw	r2,0(r3)
    32f8:	10000b1e 	bne	r2,zero,3328 <quorem+0x1c8>
    32fc:	18bfff04 	addi	r2,r3,-4
    3300:	a880082e 	bgeu	r21,r2,3324 <quorem+0x1c4>
    3304:	18ffff17 	ldw	r3,-4(r3)
    3308:	18000326 	beq	r3,zero,3318 <quorem+0x1b8>
    330c:	00000506 	br	3324 <quorem+0x1c4>
    3310:	10c00017 	ldw	r3,0(r2)
    3314:	1800031e 	bne	r3,zero,3324 <quorem+0x1c4>
    3318:	10bfff04 	addi	r2,r2,-4
    331c:	94bfffc4 	addi	r18,r18,-1
    3320:	a8bffb36 	bltu	r21,r2,3310 <__ram_exceptions_end+0xfbfe30bc>
    3324:	84800415 	stw	r18,16(r16)
    3328:	9805883a 	mov	r2,r19
    332c:	dfc00817 	ldw	ra,32(sp)
    3330:	ddc00717 	ldw	r23,28(sp)
    3334:	dd800617 	ldw	r22,24(sp)
    3338:	dd400517 	ldw	r21,20(sp)
    333c:	dd000417 	ldw	r20,16(sp)
    3340:	dcc00317 	ldw	r19,12(sp)
    3344:	dc800217 	ldw	r18,8(sp)
    3348:	dc400117 	ldw	r17,4(sp)
    334c:	dc000017 	ldw	r16,0(sp)
    3350:	dec00904 	addi	sp,sp,36
    3354:	f800283a 	ret
    3358:	0005883a 	mov	r2,zero
    335c:	003ff306 	br	332c <__ram_exceptions_end+0xfbfe30d8>

00003360 <_dtoa_r>:
    3360:	20801017 	ldw	r2,64(r4)
    3364:	deffde04 	addi	sp,sp,-136
    3368:	df002015 	stw	fp,128(sp)
    336c:	dcc01b15 	stw	r19,108(sp)
    3370:	dc801a15 	stw	r18,104(sp)
    3374:	dc401915 	stw	r17,100(sp)
    3378:	dc001815 	stw	r16,96(sp)
    337c:	dfc02115 	stw	ra,132(sp)
    3380:	ddc01f15 	stw	r23,124(sp)
    3384:	dd801e15 	stw	r22,120(sp)
    3388:	dd401d15 	stw	r21,116(sp)
    338c:	dd001c15 	stw	r20,112(sp)
    3390:	d9c00315 	stw	r7,12(sp)
    3394:	2039883a 	mov	fp,r4
    3398:	3023883a 	mov	r17,r6
    339c:	2825883a 	mov	r18,r5
    33a0:	dc002417 	ldw	r16,144(sp)
    33a4:	3027883a 	mov	r19,r6
    33a8:	10000826 	beq	r2,zero,33cc <_dtoa_r+0x6c>
    33ac:	21801117 	ldw	r6,68(r4)
    33b0:	00c00044 	movi	r3,1
    33b4:	100b883a 	mov	r5,r2
    33b8:	1986983a 	sll	r3,r3,r6
    33bc:	11800115 	stw	r6,4(r2)
    33c0:	10c00215 	stw	r3,8(r2)
    33c4:	000648c0 	call	648c <_Bfree>
    33c8:	e0001015 	stw	zero,64(fp)
    33cc:	88002e16 	blt	r17,zero,3488 <_dtoa_r+0x128>
    33d0:	80000015 	stw	zero,0(r16)
    33d4:	889ffc2c 	andhi	r2,r17,32752
    33d8:	00dffc34 	movhi	r3,32752
    33dc:	10c01c26 	beq	r2,r3,3450 <_dtoa_r+0xf0>
    33e0:	000d883a 	mov	r6,zero
    33e4:	000f883a 	mov	r7,zero
    33e8:	9009883a 	mov	r4,r18
    33ec:	980b883a 	mov	r5,r19
    33f0:	000be940 	call	be94 <__eqdf2>
    33f4:	10002b1e 	bne	r2,zero,34a4 <_dtoa_r+0x144>
    33f8:	d9c02317 	ldw	r7,140(sp)
    33fc:	00800044 	movi	r2,1
    3400:	38800015 	stw	r2,0(r7)
    3404:	d8802517 	ldw	r2,148(sp)
    3408:	10019e26 	beq	r2,zero,3a84 <_dtoa_r+0x724>
    340c:	d8c02517 	ldw	r3,148(sp)
    3410:	00800074 	movhi	r2,1
    3414:	10805e44 	addi	r2,r2,377
    3418:	18800015 	stw	r2,0(r3)
    341c:	10bfffc4 	addi	r2,r2,-1
    3420:	dfc02117 	ldw	ra,132(sp)
    3424:	df002017 	ldw	fp,128(sp)
    3428:	ddc01f17 	ldw	r23,124(sp)
    342c:	dd801e17 	ldw	r22,120(sp)
    3430:	dd401d17 	ldw	r21,116(sp)
    3434:	dd001c17 	ldw	r20,112(sp)
    3438:	dcc01b17 	ldw	r19,108(sp)
    343c:	dc801a17 	ldw	r18,104(sp)
    3440:	dc401917 	ldw	r17,100(sp)
    3444:	dc001817 	ldw	r16,96(sp)
    3448:	dec02204 	addi	sp,sp,136
    344c:	f800283a 	ret
    3450:	d8c02317 	ldw	r3,140(sp)
    3454:	0089c3c4 	movi	r2,9999
    3458:	18800015 	stw	r2,0(r3)
    345c:	90017726 	beq	r18,zero,3a3c <_dtoa_r+0x6dc>
    3460:	00800074 	movhi	r2,1
    3464:	10806a04 	addi	r2,r2,424
    3468:	d9002517 	ldw	r4,148(sp)
    346c:	203fec26 	beq	r4,zero,3420 <__ram_exceptions_end+0xfbfe31cc>
    3470:	10c000c7 	ldb	r3,3(r2)
    3474:	1801781e 	bne	r3,zero,3a58 <_dtoa_r+0x6f8>
    3478:	10c000c4 	addi	r3,r2,3
    347c:	d9802517 	ldw	r6,148(sp)
    3480:	30c00015 	stw	r3,0(r6)
    3484:	003fe606 	br	3420 <__ram_exceptions_end+0xfbfe31cc>
    3488:	04e00034 	movhi	r19,32768
    348c:	9cffffc4 	addi	r19,r19,-1
    3490:	00800044 	movi	r2,1
    3494:	8ce6703a 	and	r19,r17,r19
    3498:	80800015 	stw	r2,0(r16)
    349c:	9823883a 	mov	r17,r19
    34a0:	003fcc06 	br	33d4 <__ram_exceptions_end+0xfbfe3180>
    34a4:	d8800204 	addi	r2,sp,8
    34a8:	d8800015 	stw	r2,0(sp)
    34ac:	d9c00104 	addi	r7,sp,4
    34b0:	900b883a 	mov	r5,r18
    34b4:	980d883a 	mov	r6,r19
    34b8:	e009883a 	mov	r4,fp
    34bc:	8820d53a 	srli	r16,r17,20
    34c0:	00070780 	call	7078 <__d2b>
    34c4:	d8800915 	stw	r2,36(sp)
    34c8:	8001651e 	bne	r16,zero,3a60 <_dtoa_r+0x700>
    34cc:	dd800217 	ldw	r22,8(sp)
    34d0:	dc000117 	ldw	r16,4(sp)
    34d4:	00800804 	movi	r2,32
    34d8:	b421883a 	add	r16,r22,r16
    34dc:	80c10c84 	addi	r3,r16,1074
    34e0:	10c2d10e 	bge	r2,r3,4028 <_dtoa_r+0xcc8>
    34e4:	00801004 	movi	r2,64
    34e8:	81010484 	addi	r4,r16,1042
    34ec:	10c7c83a 	sub	r3,r2,r3
    34f0:	9108d83a 	srl	r4,r18,r4
    34f4:	88e2983a 	sll	r17,r17,r3
    34f8:	2448b03a 	or	r4,r4,r17
    34fc:	000d25c0 	call	d25c <__floatunsidf>
    3500:	017f8434 	movhi	r5,65040
    3504:	01800044 	movi	r6,1
    3508:	1009883a 	mov	r4,r2
    350c:	194b883a 	add	r5,r3,r5
    3510:	843fffc4 	addi	r16,r16,-1
    3514:	d9801115 	stw	r6,68(sp)
    3518:	000d883a 	mov	r6,zero
    351c:	01cffe34 	movhi	r7,16376
    3520:	000c8040 	call	c804 <__subdf3>
    3524:	0198dbf4 	movhi	r6,25455
    3528:	01cff4f4 	movhi	r7,16339
    352c:	3190d844 	addi	r6,r6,17249
    3530:	39e1e9c4 	addi	r7,r7,-30809
    3534:	1009883a 	mov	r4,r2
    3538:	180b883a 	mov	r5,r3
    353c:	000c0ec0 	call	c0ec <__muldf3>
    3540:	01a2d874 	movhi	r6,35681
    3544:	01cff1f4 	movhi	r7,16327
    3548:	31b22cc4 	addi	r6,r6,-14157
    354c:	39e28a04 	addi	r7,r7,-30168
    3550:	180b883a 	mov	r5,r3
    3554:	1009883a 	mov	r4,r2
    3558:	000ad000 	call	ad00 <__adddf3>
    355c:	8009883a 	mov	r4,r16
    3560:	1029883a 	mov	r20,r2
    3564:	1823883a 	mov	r17,r3
    3568:	000d1800 	call	d180 <__floatsidf>
    356c:	019427f4 	movhi	r6,20639
    3570:	01cff4f4 	movhi	r7,16339
    3574:	319e7ec4 	addi	r6,r6,31227
    3578:	39d104c4 	addi	r7,r7,17427
    357c:	1009883a 	mov	r4,r2
    3580:	180b883a 	mov	r5,r3
    3584:	000c0ec0 	call	c0ec <__muldf3>
    3588:	100d883a 	mov	r6,r2
    358c:	180f883a 	mov	r7,r3
    3590:	a009883a 	mov	r4,r20
    3594:	880b883a 	mov	r5,r17
    3598:	000ad000 	call	ad00 <__adddf3>
    359c:	1009883a 	mov	r4,r2
    35a0:	180b883a 	mov	r5,r3
    35a4:	1029883a 	mov	r20,r2
    35a8:	1823883a 	mov	r17,r3
    35ac:	000d1000 	call	d100 <__fixdfsi>
    35b0:	000d883a 	mov	r6,zero
    35b4:	000f883a 	mov	r7,zero
    35b8:	a009883a 	mov	r4,r20
    35bc:	880b883a 	mov	r5,r17
    35c0:	d8800515 	stw	r2,20(sp)
    35c4:	000bff80 	call	bff8 <__ledf2>
    35c8:	10028716 	blt	r2,zero,3fe8 <_dtoa_r+0xc88>
    35cc:	d8c00517 	ldw	r3,20(sp)
    35d0:	00800584 	movi	r2,22
    35d4:	10c27536 	bltu	r2,r3,3fac <_dtoa_r+0xc4c>
    35d8:	180490fa 	slli	r2,r3,3
    35dc:	00c00074 	movhi	r3,1
    35e0:	18c08604 	addi	r3,r3,536
    35e4:	1885883a 	add	r2,r3,r2
    35e8:	11000017 	ldw	r4,0(r2)
    35ec:	11400117 	ldw	r5,4(r2)
    35f0:	900d883a 	mov	r6,r18
    35f4:	980f883a 	mov	r7,r19
    35f8:	000bf1c0 	call	bf1c <__gedf2>
    35fc:	00828d0e 	bge	zero,r2,4034 <_dtoa_r+0xcd4>
    3600:	d9000517 	ldw	r4,20(sp)
    3604:	d8000e15 	stw	zero,56(sp)
    3608:	213fffc4 	addi	r4,r4,-1
    360c:	d9000515 	stw	r4,20(sp)
    3610:	b42dc83a 	sub	r22,r22,r16
    3614:	b5bfffc4 	addi	r22,r22,-1
    3618:	b0026f16 	blt	r22,zero,3fd8 <_dtoa_r+0xc78>
    361c:	d8000815 	stw	zero,32(sp)
    3620:	d9c00517 	ldw	r7,20(sp)
    3624:	38026416 	blt	r7,zero,3fb8 <_dtoa_r+0xc58>
    3628:	b1ed883a 	add	r22,r22,r7
    362c:	d9c00d15 	stw	r7,52(sp)
    3630:	d8000a15 	stw	zero,40(sp)
    3634:	d9800317 	ldw	r6,12(sp)
    3638:	00800244 	movi	r2,9
    363c:	11811436 	bltu	r2,r6,3a90 <_dtoa_r+0x730>
    3640:	00800144 	movi	r2,5
    3644:	1184e10e 	bge	r2,r6,49cc <_dtoa_r+0x166c>
    3648:	31bfff04 	addi	r6,r6,-4
    364c:	d9800315 	stw	r6,12(sp)
    3650:	0023883a 	mov	r17,zero
    3654:	d9800317 	ldw	r6,12(sp)
    3658:	008000c4 	movi	r2,3
    365c:	30836726 	beq	r6,r2,43fc <_dtoa_r+0x109c>
    3660:	1183410e 	bge	r2,r6,4368 <_dtoa_r+0x1008>
    3664:	d9c00317 	ldw	r7,12(sp)
    3668:	00800104 	movi	r2,4
    366c:	38827c26 	beq	r7,r2,4060 <_dtoa_r+0xd00>
    3670:	00800144 	movi	r2,5
    3674:	3884c41e 	bne	r7,r2,4988 <_dtoa_r+0x1628>
    3678:	00800044 	movi	r2,1
    367c:	d8800b15 	stw	r2,44(sp)
    3680:	d8c00517 	ldw	r3,20(sp)
    3684:	d9002217 	ldw	r4,136(sp)
    3688:	1907883a 	add	r3,r3,r4
    368c:	19800044 	addi	r6,r3,1
    3690:	d8c00c15 	stw	r3,48(sp)
    3694:	d9800615 	stw	r6,24(sp)
    3698:	0183a40e 	bge	zero,r6,452c <_dtoa_r+0x11cc>
    369c:	d9800617 	ldw	r6,24(sp)
    36a0:	3021883a 	mov	r16,r6
    36a4:	e0001115 	stw	zero,68(fp)
    36a8:	008005c4 	movi	r2,23
    36ac:	1184c92e 	bgeu	r2,r6,49d4 <_dtoa_r+0x1674>
    36b0:	00c00044 	movi	r3,1
    36b4:	00800104 	movi	r2,4
    36b8:	1085883a 	add	r2,r2,r2
    36bc:	11000504 	addi	r4,r2,20
    36c0:	180b883a 	mov	r5,r3
    36c4:	18c00044 	addi	r3,r3,1
    36c8:	313ffb2e 	bgeu	r6,r4,36b8 <__ram_exceptions_end+0xfbfe3464>
    36cc:	e1401115 	stw	r5,68(fp)
    36d0:	e009883a 	mov	r4,fp
    36d4:	00063e40 	call	63e4 <_Balloc>
    36d8:	d8800715 	stw	r2,28(sp)
    36dc:	e0801015 	stw	r2,64(fp)
    36e0:	00800384 	movi	r2,14
    36e4:	1400f736 	bltu	r2,r16,3ac4 <_dtoa_r+0x764>
    36e8:	8800f626 	beq	r17,zero,3ac4 <_dtoa_r+0x764>
    36ec:	d9c00517 	ldw	r7,20(sp)
    36f0:	01c39a0e 	bge	zero,r7,455c <_dtoa_r+0x11fc>
    36f4:	388003cc 	andi	r2,r7,15
    36f8:	100490fa 	slli	r2,r2,3
    36fc:	382bd13a 	srai	r21,r7,4
    3700:	00c00074 	movhi	r3,1
    3704:	18c08604 	addi	r3,r3,536
    3708:	1885883a 	add	r2,r3,r2
    370c:	a8c0040c 	andi	r3,r21,16
    3710:	12400017 	ldw	r9,0(r2)
    3714:	12000117 	ldw	r8,4(r2)
    3718:	18037926 	beq	r3,zero,4500 <_dtoa_r+0x11a0>
    371c:	00800074 	movhi	r2,1
    3720:	10807c04 	addi	r2,r2,496
    3724:	11800817 	ldw	r6,32(r2)
    3728:	11c00917 	ldw	r7,36(r2)
    372c:	9009883a 	mov	r4,r18
    3730:	980b883a 	mov	r5,r19
    3734:	da001715 	stw	r8,92(sp)
    3738:	da401615 	stw	r9,88(sp)
    373c:	000b5ac0 	call	b5ac <__divdf3>
    3740:	da001717 	ldw	r8,92(sp)
    3744:	da401617 	ldw	r9,88(sp)
    3748:	ad4003cc 	andi	r21,r21,15
    374c:	040000c4 	movi	r16,3
    3750:	1023883a 	mov	r17,r2
    3754:	1829883a 	mov	r20,r3
    3758:	a8001126 	beq	r21,zero,37a0 <_dtoa_r+0x440>
    375c:	05c00074 	movhi	r23,1
    3760:	bdc07c04 	addi	r23,r23,496
    3764:	4805883a 	mov	r2,r9
    3768:	4007883a 	mov	r3,r8
    376c:	a980004c 	andi	r6,r21,1
    3770:	1009883a 	mov	r4,r2
    3774:	a82bd07a 	srai	r21,r21,1
    3778:	180b883a 	mov	r5,r3
    377c:	30000426 	beq	r6,zero,3790 <_dtoa_r+0x430>
    3780:	b9800017 	ldw	r6,0(r23)
    3784:	b9c00117 	ldw	r7,4(r23)
    3788:	84000044 	addi	r16,r16,1
    378c:	000c0ec0 	call	c0ec <__muldf3>
    3790:	bdc00204 	addi	r23,r23,8
    3794:	a83ff51e 	bne	r21,zero,376c <__ram_exceptions_end+0xfbfe3518>
    3798:	1013883a 	mov	r9,r2
    379c:	1811883a 	mov	r8,r3
    37a0:	480d883a 	mov	r6,r9
    37a4:	400f883a 	mov	r7,r8
    37a8:	8809883a 	mov	r4,r17
    37ac:	a00b883a 	mov	r5,r20
    37b0:	000b5ac0 	call	b5ac <__divdf3>
    37b4:	d8800f15 	stw	r2,60(sp)
    37b8:	d8c01015 	stw	r3,64(sp)
    37bc:	d8c00e17 	ldw	r3,56(sp)
    37c0:	18000626 	beq	r3,zero,37dc <_dtoa_r+0x47c>
    37c4:	d9000f17 	ldw	r4,60(sp)
    37c8:	d9401017 	ldw	r5,64(sp)
    37cc:	000d883a 	mov	r6,zero
    37d0:	01cffc34 	movhi	r7,16368
    37d4:	000bff80 	call	bff8 <__ledf2>
    37d8:	10040b16 	blt	r2,zero,4808 <_dtoa_r+0x14a8>
    37dc:	8009883a 	mov	r4,r16
    37e0:	000d1800 	call	d180 <__floatsidf>
    37e4:	d9800f17 	ldw	r6,60(sp)
    37e8:	d9c01017 	ldw	r7,64(sp)
    37ec:	1009883a 	mov	r4,r2
    37f0:	180b883a 	mov	r5,r3
    37f4:	000c0ec0 	call	c0ec <__muldf3>
    37f8:	000d883a 	mov	r6,zero
    37fc:	01d00734 	movhi	r7,16412
    3800:	1009883a 	mov	r4,r2
    3804:	180b883a 	mov	r5,r3
    3808:	000ad000 	call	ad00 <__adddf3>
    380c:	1021883a 	mov	r16,r2
    3810:	d8800617 	ldw	r2,24(sp)
    3814:	047f3034 	movhi	r17,64704
    3818:	1c63883a 	add	r17,r3,r17
    381c:	10031826 	beq	r2,zero,4480 <_dtoa_r+0x1120>
    3820:	d8c00517 	ldw	r3,20(sp)
    3824:	db000617 	ldw	r12,24(sp)
    3828:	d8c01315 	stw	r3,76(sp)
    382c:	d9000b17 	ldw	r4,44(sp)
    3830:	20038f26 	beq	r4,zero,4670 <_dtoa_r+0x1310>
    3834:	60bfffc4 	addi	r2,r12,-1
    3838:	100490fa 	slli	r2,r2,3
    383c:	00c00074 	movhi	r3,1
    3840:	18c08604 	addi	r3,r3,536
    3844:	1885883a 	add	r2,r3,r2
    3848:	11800017 	ldw	r6,0(r2)
    384c:	11c00117 	ldw	r7,4(r2)
    3850:	d8800717 	ldw	r2,28(sp)
    3854:	0009883a 	mov	r4,zero
    3858:	014ff834 	movhi	r5,16352
    385c:	db001615 	stw	r12,88(sp)
    3860:	15c00044 	addi	r23,r2,1
    3864:	000b5ac0 	call	b5ac <__divdf3>
    3868:	800d883a 	mov	r6,r16
    386c:	880f883a 	mov	r7,r17
    3870:	1009883a 	mov	r4,r2
    3874:	180b883a 	mov	r5,r3
    3878:	000c8040 	call	c804 <__subdf3>
    387c:	d9401017 	ldw	r5,64(sp)
    3880:	d9000f17 	ldw	r4,60(sp)
    3884:	102b883a 	mov	r21,r2
    3888:	d8c01215 	stw	r3,72(sp)
    388c:	000d1000 	call	d100 <__fixdfsi>
    3890:	1009883a 	mov	r4,r2
    3894:	1029883a 	mov	r20,r2
    3898:	000d1800 	call	d180 <__floatsidf>
    389c:	d9000f17 	ldw	r4,60(sp)
    38a0:	d9401017 	ldw	r5,64(sp)
    38a4:	100d883a 	mov	r6,r2
    38a8:	180f883a 	mov	r7,r3
    38ac:	000c8040 	call	c804 <__subdf3>
    38b0:	1823883a 	mov	r17,r3
    38b4:	d8c00717 	ldw	r3,28(sp)
    38b8:	d9401217 	ldw	r5,72(sp)
    38bc:	a2000c04 	addi	r8,r20,48
    38c0:	1021883a 	mov	r16,r2
    38c4:	1a000005 	stb	r8,0(r3)
    38c8:	800d883a 	mov	r6,r16
    38cc:	880f883a 	mov	r7,r17
    38d0:	a809883a 	mov	r4,r21
    38d4:	4029883a 	mov	r20,r8
    38d8:	000bf1c0 	call	bf1c <__gedf2>
    38dc:	00841d16 	blt	zero,r2,4954 <_dtoa_r+0x15f4>
    38e0:	800d883a 	mov	r6,r16
    38e4:	880f883a 	mov	r7,r17
    38e8:	0009883a 	mov	r4,zero
    38ec:	014ffc34 	movhi	r5,16368
    38f0:	000c8040 	call	c804 <__subdf3>
    38f4:	d9401217 	ldw	r5,72(sp)
    38f8:	100d883a 	mov	r6,r2
    38fc:	180f883a 	mov	r7,r3
    3900:	a809883a 	mov	r4,r21
    3904:	000bf1c0 	call	bf1c <__gedf2>
    3908:	db001617 	ldw	r12,88(sp)
    390c:	00840e16 	blt	zero,r2,4948 <_dtoa_r+0x15e8>
    3910:	00800044 	movi	r2,1
    3914:	13006b0e 	bge	r2,r12,3ac4 <_dtoa_r+0x764>
    3918:	d9000717 	ldw	r4,28(sp)
    391c:	dd800f15 	stw	r22,60(sp)
    3920:	dcc01015 	stw	r19,64(sp)
    3924:	2319883a 	add	r12,r4,r12
    3928:	dcc01217 	ldw	r19,72(sp)
    392c:	602d883a 	mov	r22,r12
    3930:	dc801215 	stw	r18,72(sp)
    3934:	b825883a 	mov	r18,r23
    3938:	00000906 	br	3960 <_dtoa_r+0x600>
    393c:	000c8040 	call	c804 <__subdf3>
    3940:	a80d883a 	mov	r6,r21
    3944:	980f883a 	mov	r7,r19
    3948:	1009883a 	mov	r4,r2
    394c:	180b883a 	mov	r5,r3
    3950:	000bff80 	call	bff8 <__ledf2>
    3954:	1003e816 	blt	r2,zero,48f8 <_dtoa_r+0x1598>
    3958:	b825883a 	mov	r18,r23
    395c:	bd83e926 	beq	r23,r22,4904 <_dtoa_r+0x15a4>
    3960:	a809883a 	mov	r4,r21
    3964:	980b883a 	mov	r5,r19
    3968:	000d883a 	mov	r6,zero
    396c:	01d00934 	movhi	r7,16420
    3970:	000c0ec0 	call	c0ec <__muldf3>
    3974:	000d883a 	mov	r6,zero
    3978:	01d00934 	movhi	r7,16420
    397c:	8009883a 	mov	r4,r16
    3980:	880b883a 	mov	r5,r17
    3984:	102b883a 	mov	r21,r2
    3988:	1827883a 	mov	r19,r3
    398c:	000c0ec0 	call	c0ec <__muldf3>
    3990:	180b883a 	mov	r5,r3
    3994:	1009883a 	mov	r4,r2
    3998:	1821883a 	mov	r16,r3
    399c:	1023883a 	mov	r17,r2
    39a0:	000d1000 	call	d100 <__fixdfsi>
    39a4:	1009883a 	mov	r4,r2
    39a8:	1029883a 	mov	r20,r2
    39ac:	000d1800 	call	d180 <__floatsidf>
    39b0:	8809883a 	mov	r4,r17
    39b4:	800b883a 	mov	r5,r16
    39b8:	100d883a 	mov	r6,r2
    39bc:	180f883a 	mov	r7,r3
    39c0:	000c8040 	call	c804 <__subdf3>
    39c4:	a5000c04 	addi	r20,r20,48
    39c8:	a80d883a 	mov	r6,r21
    39cc:	980f883a 	mov	r7,r19
    39d0:	1009883a 	mov	r4,r2
    39d4:	180b883a 	mov	r5,r3
    39d8:	95000005 	stb	r20,0(r18)
    39dc:	1021883a 	mov	r16,r2
    39e0:	1823883a 	mov	r17,r3
    39e4:	000bff80 	call	bff8 <__ledf2>
    39e8:	bdc00044 	addi	r23,r23,1
    39ec:	800d883a 	mov	r6,r16
    39f0:	880f883a 	mov	r7,r17
    39f4:	0009883a 	mov	r4,zero
    39f8:	014ffc34 	movhi	r5,16368
    39fc:	103fcf0e 	bge	r2,zero,393c <__ram_exceptions_end+0xfbfe36e8>
    3a00:	d8c01317 	ldw	r3,76(sp)
    3a04:	d8c00515 	stw	r3,20(sp)
    3a08:	d9400917 	ldw	r5,36(sp)
    3a0c:	e009883a 	mov	r4,fp
    3a10:	000648c0 	call	648c <_Bfree>
    3a14:	d9000517 	ldw	r4,20(sp)
    3a18:	d9802317 	ldw	r6,140(sp)
    3a1c:	d9c02517 	ldw	r7,148(sp)
    3a20:	b8000005 	stb	zero,0(r23)
    3a24:	20800044 	addi	r2,r4,1
    3a28:	30800015 	stw	r2,0(r6)
    3a2c:	3802aa26 	beq	r7,zero,44d8 <_dtoa_r+0x1178>
    3a30:	3dc00015 	stw	r23,0(r7)
    3a34:	d8800717 	ldw	r2,28(sp)
    3a38:	003e7906 	br	3420 <__ram_exceptions_end+0xfbfe31cc>
    3a3c:	00800434 	movhi	r2,16
    3a40:	10bfffc4 	addi	r2,r2,-1
    3a44:	88a2703a 	and	r17,r17,r2
    3a48:	883e851e 	bne	r17,zero,3460 <__ram_exceptions_end+0xfbfe320c>
    3a4c:	00800074 	movhi	r2,1
    3a50:	10806704 	addi	r2,r2,412
    3a54:	003e8406 	br	3468 <__ram_exceptions_end+0xfbfe3214>
    3a58:	10c00204 	addi	r3,r2,8
    3a5c:	003e8706 	br	347c <__ram_exceptions_end+0xfbfe3228>
    3a60:	01400434 	movhi	r5,16
    3a64:	297fffc4 	addi	r5,r5,-1
    3a68:	994a703a 	and	r5,r19,r5
    3a6c:	9009883a 	mov	r4,r18
    3a70:	843f0044 	addi	r16,r16,-1023
    3a74:	294ffc34 	orhi	r5,r5,16368
    3a78:	dd800217 	ldw	r22,8(sp)
    3a7c:	d8001115 	stw	zero,68(sp)
    3a80:	003ea506 	br	3518 <__ram_exceptions_end+0xfbfe32c4>
    3a84:	00800074 	movhi	r2,1
    3a88:	10805e04 	addi	r2,r2,376
    3a8c:	003e6406 	br	3420 <__ram_exceptions_end+0xfbfe31cc>
    3a90:	e0001115 	stw	zero,68(fp)
    3a94:	000b883a 	mov	r5,zero
    3a98:	e009883a 	mov	r4,fp
    3a9c:	00063e40 	call	63e4 <_Balloc>
    3aa0:	01bfffc4 	movi	r6,-1
    3aa4:	01c00044 	movi	r7,1
    3aa8:	d8800715 	stw	r2,28(sp)
    3aac:	d9800c15 	stw	r6,48(sp)
    3ab0:	e0801015 	stw	r2,64(fp)
    3ab4:	d8000315 	stw	zero,12(sp)
    3ab8:	d9c00b15 	stw	r7,44(sp)
    3abc:	d9800615 	stw	r6,24(sp)
    3ac0:	d8002215 	stw	zero,136(sp)
    3ac4:	d8800117 	ldw	r2,4(sp)
    3ac8:	10008916 	blt	r2,zero,3cf0 <_dtoa_r+0x990>
    3acc:	d9000517 	ldw	r4,20(sp)
    3ad0:	00c00384 	movi	r3,14
    3ad4:	19008616 	blt	r3,r4,3cf0 <_dtoa_r+0x990>
    3ad8:	200490fa 	slli	r2,r4,3
    3adc:	00c00074 	movhi	r3,1
    3ae0:	d9802217 	ldw	r6,136(sp)
    3ae4:	18c08604 	addi	r3,r3,536
    3ae8:	1885883a 	add	r2,r3,r2
    3aec:	14000017 	ldw	r16,0(r2)
    3af0:	14400117 	ldw	r17,4(r2)
    3af4:	30016316 	blt	r6,zero,4084 <_dtoa_r+0xd24>
    3af8:	800d883a 	mov	r6,r16
    3afc:	880f883a 	mov	r7,r17
    3b00:	9009883a 	mov	r4,r18
    3b04:	980b883a 	mov	r5,r19
    3b08:	000b5ac0 	call	b5ac <__divdf3>
    3b0c:	180b883a 	mov	r5,r3
    3b10:	1009883a 	mov	r4,r2
    3b14:	000d1000 	call	d100 <__fixdfsi>
    3b18:	1009883a 	mov	r4,r2
    3b1c:	102b883a 	mov	r21,r2
    3b20:	000d1800 	call	d180 <__floatsidf>
    3b24:	800d883a 	mov	r6,r16
    3b28:	880f883a 	mov	r7,r17
    3b2c:	1009883a 	mov	r4,r2
    3b30:	180b883a 	mov	r5,r3
    3b34:	000c0ec0 	call	c0ec <__muldf3>
    3b38:	100d883a 	mov	r6,r2
    3b3c:	180f883a 	mov	r7,r3
    3b40:	9009883a 	mov	r4,r18
    3b44:	980b883a 	mov	r5,r19
    3b48:	000c8040 	call	c804 <__subdf3>
    3b4c:	d9c00717 	ldw	r7,28(sp)
    3b50:	1009883a 	mov	r4,r2
    3b54:	a8800c04 	addi	r2,r21,48
    3b58:	38800005 	stb	r2,0(r7)
    3b5c:	3dc00044 	addi	r23,r7,1
    3b60:	d9c00617 	ldw	r7,24(sp)
    3b64:	01800044 	movi	r6,1
    3b68:	180b883a 	mov	r5,r3
    3b6c:	2005883a 	mov	r2,r4
    3b70:	39803826 	beq	r7,r6,3c54 <_dtoa_r+0x8f4>
    3b74:	000d883a 	mov	r6,zero
    3b78:	01d00934 	movhi	r7,16420
    3b7c:	000c0ec0 	call	c0ec <__muldf3>
    3b80:	000d883a 	mov	r6,zero
    3b84:	000f883a 	mov	r7,zero
    3b88:	1009883a 	mov	r4,r2
    3b8c:	180b883a 	mov	r5,r3
    3b90:	1025883a 	mov	r18,r2
    3b94:	1827883a 	mov	r19,r3
    3b98:	000be940 	call	be94 <__eqdf2>
    3b9c:	103f9a26 	beq	r2,zero,3a08 <__ram_exceptions_end+0xfbfe37b4>
    3ba0:	d9c00617 	ldw	r7,24(sp)
    3ba4:	d8c00717 	ldw	r3,28(sp)
    3ba8:	b829883a 	mov	r20,r23
    3bac:	38bfffc4 	addi	r2,r7,-1
    3bb0:	18ad883a 	add	r22,r3,r2
    3bb4:	00000a06 	br	3be0 <_dtoa_r+0x880>
    3bb8:	000c0ec0 	call	c0ec <__muldf3>
    3bbc:	000d883a 	mov	r6,zero
    3bc0:	000f883a 	mov	r7,zero
    3bc4:	1009883a 	mov	r4,r2
    3bc8:	180b883a 	mov	r5,r3
    3bcc:	1025883a 	mov	r18,r2
    3bd0:	1827883a 	mov	r19,r3
    3bd4:	b829883a 	mov	r20,r23
    3bd8:	000be940 	call	be94 <__eqdf2>
    3bdc:	103f8a26 	beq	r2,zero,3a08 <__ram_exceptions_end+0xfbfe37b4>
    3be0:	800d883a 	mov	r6,r16
    3be4:	880f883a 	mov	r7,r17
    3be8:	9009883a 	mov	r4,r18
    3bec:	980b883a 	mov	r5,r19
    3bf0:	000b5ac0 	call	b5ac <__divdf3>
    3bf4:	180b883a 	mov	r5,r3
    3bf8:	1009883a 	mov	r4,r2
    3bfc:	000d1000 	call	d100 <__fixdfsi>
    3c00:	1009883a 	mov	r4,r2
    3c04:	102b883a 	mov	r21,r2
    3c08:	000d1800 	call	d180 <__floatsidf>
    3c0c:	800d883a 	mov	r6,r16
    3c10:	880f883a 	mov	r7,r17
    3c14:	1009883a 	mov	r4,r2
    3c18:	180b883a 	mov	r5,r3
    3c1c:	000c0ec0 	call	c0ec <__muldf3>
    3c20:	100d883a 	mov	r6,r2
    3c24:	180f883a 	mov	r7,r3
    3c28:	9009883a 	mov	r4,r18
    3c2c:	980b883a 	mov	r5,r19
    3c30:	000c8040 	call	c804 <__subdf3>
    3c34:	aa000c04 	addi	r8,r21,48
    3c38:	a2000005 	stb	r8,0(r20)
    3c3c:	000d883a 	mov	r6,zero
    3c40:	01d00934 	movhi	r7,16420
    3c44:	1009883a 	mov	r4,r2
    3c48:	180b883a 	mov	r5,r3
    3c4c:	a5c00044 	addi	r23,r20,1
    3c50:	b53fd91e 	bne	r22,r20,3bb8 <__ram_exceptions_end+0xfbfe3964>
    3c54:	100d883a 	mov	r6,r2
    3c58:	180f883a 	mov	r7,r3
    3c5c:	1009883a 	mov	r4,r2
    3c60:	180b883a 	mov	r5,r3
    3c64:	000ad000 	call	ad00 <__adddf3>
    3c68:	100d883a 	mov	r6,r2
    3c6c:	180f883a 	mov	r7,r3
    3c70:	8009883a 	mov	r4,r16
    3c74:	880b883a 	mov	r5,r17
    3c78:	1027883a 	mov	r19,r2
    3c7c:	1825883a 	mov	r18,r3
    3c80:	000bff80 	call	bff8 <__ledf2>
    3c84:	10000816 	blt	r2,zero,3ca8 <_dtoa_r+0x948>
    3c88:	980d883a 	mov	r6,r19
    3c8c:	900f883a 	mov	r7,r18
    3c90:	8009883a 	mov	r4,r16
    3c94:	880b883a 	mov	r5,r17
    3c98:	000be940 	call	be94 <__eqdf2>
    3c9c:	103f5a1e 	bne	r2,zero,3a08 <__ram_exceptions_end+0xfbfe37b4>
    3ca0:	ad40004c 	andi	r21,r21,1
    3ca4:	a83f5826 	beq	r21,zero,3a08 <__ram_exceptions_end+0xfbfe37b4>
    3ca8:	bd3fffc3 	ldbu	r20,-1(r23)
    3cac:	b8bfffc4 	addi	r2,r23,-1
    3cb0:	1007883a 	mov	r3,r2
    3cb4:	01400e44 	movi	r5,57
    3cb8:	d9800717 	ldw	r6,28(sp)
    3cbc:	00000506 	br	3cd4 <_dtoa_r+0x974>
    3cc0:	18ffffc4 	addi	r3,r3,-1
    3cc4:	11824726 	beq	r2,r6,45e4 <_dtoa_r+0x1284>
    3cc8:	1d000003 	ldbu	r20,0(r3)
    3ccc:	102f883a 	mov	r23,r2
    3cd0:	10bfffc4 	addi	r2,r2,-1
    3cd4:	a1003fcc 	andi	r4,r20,255
    3cd8:	2100201c 	xori	r4,r4,128
    3cdc:	213fe004 	addi	r4,r4,-128
    3ce0:	217ff726 	beq	r4,r5,3cc0 <__ram_exceptions_end+0xfbfe3a6c>
    3ce4:	a2000044 	addi	r8,r20,1
    3ce8:	12000005 	stb	r8,0(r2)
    3cec:	003f4606 	br	3a08 <__ram_exceptions_end+0xfbfe37b4>
    3cf0:	d9000b17 	ldw	r4,44(sp)
    3cf4:	2000c826 	beq	r4,zero,4018 <_dtoa_r+0xcb8>
    3cf8:	d9800317 	ldw	r6,12(sp)
    3cfc:	00c00044 	movi	r3,1
    3d00:	1980f90e 	bge	r3,r6,40e8 <_dtoa_r+0xd88>
    3d04:	d8800617 	ldw	r2,24(sp)
    3d08:	d8c00a17 	ldw	r3,40(sp)
    3d0c:	157fffc4 	addi	r21,r2,-1
    3d10:	1d41f316 	blt	r3,r21,44e0 <_dtoa_r+0x1180>
    3d14:	1d6bc83a 	sub	r21,r3,r21
    3d18:	d9c00617 	ldw	r7,24(sp)
    3d1c:	3802aa16 	blt	r7,zero,47c8 <_dtoa_r+0x1468>
    3d20:	dd000817 	ldw	r20,32(sp)
    3d24:	d8800617 	ldw	r2,24(sp)
    3d28:	d8c00817 	ldw	r3,32(sp)
    3d2c:	01400044 	movi	r5,1
    3d30:	e009883a 	mov	r4,fp
    3d34:	1887883a 	add	r3,r3,r2
    3d38:	d8c00815 	stw	r3,32(sp)
    3d3c:	b0ad883a 	add	r22,r22,r2
    3d40:	00067f00 	call	67f0 <__i2b>
    3d44:	1023883a 	mov	r17,r2
    3d48:	a0000826 	beq	r20,zero,3d6c <_dtoa_r+0xa0c>
    3d4c:	0580070e 	bge	zero,r22,3d6c <_dtoa_r+0xa0c>
    3d50:	a005883a 	mov	r2,r20
    3d54:	b500b916 	blt	r22,r20,403c <_dtoa_r+0xcdc>
    3d58:	d9000817 	ldw	r4,32(sp)
    3d5c:	a0a9c83a 	sub	r20,r20,r2
    3d60:	b0adc83a 	sub	r22,r22,r2
    3d64:	2089c83a 	sub	r4,r4,r2
    3d68:	d9000815 	stw	r4,32(sp)
    3d6c:	d9800a17 	ldw	r6,40(sp)
    3d70:	0181810e 	bge	zero,r6,4378 <_dtoa_r+0x1018>
    3d74:	d9c00b17 	ldw	r7,44(sp)
    3d78:	3800b326 	beq	r7,zero,4048 <_dtoa_r+0xce8>
    3d7c:	a800b226 	beq	r21,zero,4048 <_dtoa_r+0xce8>
    3d80:	880b883a 	mov	r5,r17
    3d84:	a80d883a 	mov	r6,r21
    3d88:	e009883a 	mov	r4,fp
    3d8c:	0006a240 	call	6a24 <__pow5mult>
    3d90:	d9800917 	ldw	r6,36(sp)
    3d94:	100b883a 	mov	r5,r2
    3d98:	e009883a 	mov	r4,fp
    3d9c:	1023883a 	mov	r17,r2
    3da0:	000682c0 	call	682c <__multiply>
    3da4:	1021883a 	mov	r16,r2
    3da8:	d8800a17 	ldw	r2,40(sp)
    3dac:	d9400917 	ldw	r5,36(sp)
    3db0:	e009883a 	mov	r4,fp
    3db4:	1545c83a 	sub	r2,r2,r21
    3db8:	d8800a15 	stw	r2,40(sp)
    3dbc:	000648c0 	call	648c <_Bfree>
    3dc0:	d8c00a17 	ldw	r3,40(sp)
    3dc4:	18009f1e 	bne	r3,zero,4044 <_dtoa_r+0xce4>
    3dc8:	05c00044 	movi	r23,1
    3dcc:	e009883a 	mov	r4,fp
    3dd0:	b80b883a 	mov	r5,r23
    3dd4:	00067f00 	call	67f0 <__i2b>
    3dd8:	d9000d17 	ldw	r4,52(sp)
    3ddc:	102b883a 	mov	r21,r2
    3de0:	2000ce26 	beq	r4,zero,411c <_dtoa_r+0xdbc>
    3de4:	200d883a 	mov	r6,r4
    3de8:	100b883a 	mov	r5,r2
    3dec:	e009883a 	mov	r4,fp
    3df0:	0006a240 	call	6a24 <__pow5mult>
    3df4:	d9800317 	ldw	r6,12(sp)
    3df8:	102b883a 	mov	r21,r2
    3dfc:	b981810e 	bge	r23,r6,4404 <_dtoa_r+0x10a4>
    3e00:	0027883a 	mov	r19,zero
    3e04:	a8800417 	ldw	r2,16(r21)
    3e08:	05c00804 	movi	r23,32
    3e0c:	10800104 	addi	r2,r2,4
    3e10:	1085883a 	add	r2,r2,r2
    3e14:	1085883a 	add	r2,r2,r2
    3e18:	a885883a 	add	r2,r21,r2
    3e1c:	11000017 	ldw	r4,0(r2)
    3e20:	00066d80 	call	66d8 <__hi0bits>
    3e24:	b885c83a 	sub	r2,r23,r2
    3e28:	1585883a 	add	r2,r2,r22
    3e2c:	108007cc 	andi	r2,r2,31
    3e30:	1000b326 	beq	r2,zero,4100 <_dtoa_r+0xda0>
    3e34:	00c00804 	movi	r3,32
    3e38:	1887c83a 	sub	r3,r3,r2
    3e3c:	01000104 	movi	r4,4
    3e40:	20c2cd0e 	bge	r4,r3,4978 <_dtoa_r+0x1618>
    3e44:	00c00704 	movi	r3,28
    3e48:	1885c83a 	sub	r2,r3,r2
    3e4c:	d8c00817 	ldw	r3,32(sp)
    3e50:	a0a9883a 	add	r20,r20,r2
    3e54:	b0ad883a 	add	r22,r22,r2
    3e58:	1887883a 	add	r3,r3,r2
    3e5c:	d8c00815 	stw	r3,32(sp)
    3e60:	d9800817 	ldw	r6,32(sp)
    3e64:	0180040e 	bge	zero,r6,3e78 <_dtoa_r+0xb18>
    3e68:	800b883a 	mov	r5,r16
    3e6c:	e009883a 	mov	r4,fp
    3e70:	0006b640 	call	6b64 <__lshift>
    3e74:	1021883a 	mov	r16,r2
    3e78:	0580050e 	bge	zero,r22,3e90 <_dtoa_r+0xb30>
    3e7c:	a80b883a 	mov	r5,r21
    3e80:	b00d883a 	mov	r6,r22
    3e84:	e009883a 	mov	r4,fp
    3e88:	0006b640 	call	6b64 <__lshift>
    3e8c:	102b883a 	mov	r21,r2
    3e90:	d9c00e17 	ldw	r7,56(sp)
    3e94:	3801211e 	bne	r7,zero,431c <_dtoa_r+0xfbc>
    3e98:	d9800617 	ldw	r6,24(sp)
    3e9c:	0181380e 	bge	zero,r6,4380 <_dtoa_r+0x1020>
    3ea0:	d8c00b17 	ldw	r3,44(sp)
    3ea4:	1800ab1e 	bne	r3,zero,4154 <_dtoa_r+0xdf4>
    3ea8:	dc800717 	ldw	r18,28(sp)
    3eac:	dcc00617 	ldw	r19,24(sp)
    3eb0:	9029883a 	mov	r20,r18
    3eb4:	00000206 	br	3ec0 <_dtoa_r+0xb60>
    3eb8:	00064b40 	call	64b4 <__multadd>
    3ebc:	1021883a 	mov	r16,r2
    3ec0:	a80b883a 	mov	r5,r21
    3ec4:	8009883a 	mov	r4,r16
    3ec8:	00031600 	call	3160 <quorem>
    3ecc:	10800c04 	addi	r2,r2,48
    3ed0:	90800005 	stb	r2,0(r18)
    3ed4:	94800044 	addi	r18,r18,1
    3ed8:	9507c83a 	sub	r3,r18,r20
    3edc:	000f883a 	mov	r7,zero
    3ee0:	01800284 	movi	r6,10
    3ee4:	800b883a 	mov	r5,r16
    3ee8:	e009883a 	mov	r4,fp
    3eec:	1cfff216 	blt	r3,r19,3eb8 <__ram_exceptions_end+0xfbfe3c64>
    3ef0:	1011883a 	mov	r8,r2
    3ef4:	d8800617 	ldw	r2,24(sp)
    3ef8:	0082370e 	bge	zero,r2,47d8 <_dtoa_r+0x1478>
    3efc:	d9000717 	ldw	r4,28(sp)
    3f00:	0025883a 	mov	r18,zero
    3f04:	20af883a 	add	r23,r4,r2
    3f08:	01800044 	movi	r6,1
    3f0c:	800b883a 	mov	r5,r16
    3f10:	e009883a 	mov	r4,fp
    3f14:	da001715 	stw	r8,92(sp)
    3f18:	0006b640 	call	6b64 <__lshift>
    3f1c:	a80b883a 	mov	r5,r21
    3f20:	1009883a 	mov	r4,r2
    3f24:	d8800915 	stw	r2,36(sp)
    3f28:	0006cac0 	call	6cac <__mcmp>
    3f2c:	da001717 	ldw	r8,92(sp)
    3f30:	0081800e 	bge	zero,r2,4534 <_dtoa_r+0x11d4>
    3f34:	b93fffc3 	ldbu	r4,-1(r23)
    3f38:	b8bfffc4 	addi	r2,r23,-1
    3f3c:	1007883a 	mov	r3,r2
    3f40:	01800e44 	movi	r6,57
    3f44:	d9c00717 	ldw	r7,28(sp)
    3f48:	00000506 	br	3f60 <_dtoa_r+0xc00>
    3f4c:	18ffffc4 	addi	r3,r3,-1
    3f50:	11c12326 	beq	r2,r7,43e0 <_dtoa_r+0x1080>
    3f54:	19000003 	ldbu	r4,0(r3)
    3f58:	102f883a 	mov	r23,r2
    3f5c:	10bfffc4 	addi	r2,r2,-1
    3f60:	21403fcc 	andi	r5,r4,255
    3f64:	2940201c 	xori	r5,r5,128
    3f68:	297fe004 	addi	r5,r5,-128
    3f6c:	29bff726 	beq	r5,r6,3f4c <__ram_exceptions_end+0xfbfe3cf8>
    3f70:	21000044 	addi	r4,r4,1
    3f74:	11000005 	stb	r4,0(r2)
    3f78:	a80b883a 	mov	r5,r21
    3f7c:	e009883a 	mov	r4,fp
    3f80:	000648c0 	call	648c <_Bfree>
    3f84:	883ea026 	beq	r17,zero,3a08 <__ram_exceptions_end+0xfbfe37b4>
    3f88:	90000426 	beq	r18,zero,3f9c <_dtoa_r+0xc3c>
    3f8c:	94400326 	beq	r18,r17,3f9c <_dtoa_r+0xc3c>
    3f90:	900b883a 	mov	r5,r18
    3f94:	e009883a 	mov	r4,fp
    3f98:	000648c0 	call	648c <_Bfree>
    3f9c:	880b883a 	mov	r5,r17
    3fa0:	e009883a 	mov	r4,fp
    3fa4:	000648c0 	call	648c <_Bfree>
    3fa8:	003e9706 	br	3a08 <__ram_exceptions_end+0xfbfe37b4>
    3fac:	01800044 	movi	r6,1
    3fb0:	d9800e15 	stw	r6,56(sp)
    3fb4:	003d9606 	br	3610 <__ram_exceptions_end+0xfbfe33bc>
    3fb8:	d8800817 	ldw	r2,32(sp)
    3fbc:	d8c00517 	ldw	r3,20(sp)
    3fc0:	d8000d15 	stw	zero,52(sp)
    3fc4:	10c5c83a 	sub	r2,r2,r3
    3fc8:	00c9c83a 	sub	r4,zero,r3
    3fcc:	d8800815 	stw	r2,32(sp)
    3fd0:	d9000a15 	stw	r4,40(sp)
    3fd4:	003d9706 	br	3634 <__ram_exceptions_end+0xfbfe33e0>
    3fd8:	05adc83a 	sub	r22,zero,r22
    3fdc:	dd800815 	stw	r22,32(sp)
    3fe0:	002d883a 	mov	r22,zero
    3fe4:	003d8e06 	br	3620 <__ram_exceptions_end+0xfbfe33cc>
    3fe8:	d9000517 	ldw	r4,20(sp)
    3fec:	000d1800 	call	d180 <__floatsidf>
    3ff0:	100d883a 	mov	r6,r2
    3ff4:	180f883a 	mov	r7,r3
    3ff8:	a009883a 	mov	r4,r20
    3ffc:	880b883a 	mov	r5,r17
    4000:	000be940 	call	be94 <__eqdf2>
    4004:	103d7126 	beq	r2,zero,35cc <__ram_exceptions_end+0xfbfe3378>
    4008:	d9c00517 	ldw	r7,20(sp)
    400c:	39ffffc4 	addi	r7,r7,-1
    4010:	d9c00515 	stw	r7,20(sp)
    4014:	003d6d06 	br	35cc <__ram_exceptions_end+0xfbfe3378>
    4018:	dd400a17 	ldw	r21,40(sp)
    401c:	dd000817 	ldw	r20,32(sp)
    4020:	0023883a 	mov	r17,zero
    4024:	003f4806 	br	3d48 <__ram_exceptions_end+0xfbfe3af4>
    4028:	10e3c83a 	sub	r17,r2,r3
    402c:	9448983a 	sll	r4,r18,r17
    4030:	003d3206 	br	34fc <__ram_exceptions_end+0xfbfe32a8>
    4034:	d8000e15 	stw	zero,56(sp)
    4038:	003d7506 	br	3610 <__ram_exceptions_end+0xfbfe33bc>
    403c:	b005883a 	mov	r2,r22
    4040:	003f4506 	br	3d58 <__ram_exceptions_end+0xfbfe3b04>
    4044:	dc000915 	stw	r16,36(sp)
    4048:	d9800a17 	ldw	r6,40(sp)
    404c:	d9400917 	ldw	r5,36(sp)
    4050:	e009883a 	mov	r4,fp
    4054:	0006a240 	call	6a24 <__pow5mult>
    4058:	1021883a 	mov	r16,r2
    405c:	003f5a06 	br	3dc8 <__ram_exceptions_end+0xfbfe3b74>
    4060:	01c00044 	movi	r7,1
    4064:	d9c00b15 	stw	r7,44(sp)
    4068:	d8802217 	ldw	r2,136(sp)
    406c:	0081280e 	bge	zero,r2,4510 <_dtoa_r+0x11b0>
    4070:	100d883a 	mov	r6,r2
    4074:	1021883a 	mov	r16,r2
    4078:	d8800c15 	stw	r2,48(sp)
    407c:	d8800615 	stw	r2,24(sp)
    4080:	003d8806 	br	36a4 <__ram_exceptions_end+0xfbfe3450>
    4084:	d8800617 	ldw	r2,24(sp)
    4088:	00be9b16 	blt	zero,r2,3af8 <__ram_exceptions_end+0xfbfe38a4>
    408c:	10010f1e 	bne	r2,zero,44cc <_dtoa_r+0x116c>
    4090:	880b883a 	mov	r5,r17
    4094:	000d883a 	mov	r6,zero
    4098:	01d00534 	movhi	r7,16404
    409c:	8009883a 	mov	r4,r16
    40a0:	000c0ec0 	call	c0ec <__muldf3>
    40a4:	900d883a 	mov	r6,r18
    40a8:	980f883a 	mov	r7,r19
    40ac:	1009883a 	mov	r4,r2
    40b0:	180b883a 	mov	r5,r3
    40b4:	000bf1c0 	call	bf1c <__gedf2>
    40b8:	002b883a 	mov	r21,zero
    40bc:	0023883a 	mov	r17,zero
    40c0:	1000bf16 	blt	r2,zero,43c0 <_dtoa_r+0x1060>
    40c4:	d9802217 	ldw	r6,136(sp)
    40c8:	ddc00717 	ldw	r23,28(sp)
    40cc:	018c303a 	nor	r6,zero,r6
    40d0:	d9800515 	stw	r6,20(sp)
    40d4:	a80b883a 	mov	r5,r21
    40d8:	e009883a 	mov	r4,fp
    40dc:	000648c0 	call	648c <_Bfree>
    40e0:	883e4926 	beq	r17,zero,3a08 <__ram_exceptions_end+0xfbfe37b4>
    40e4:	003fad06 	br	3f9c <__ram_exceptions_end+0xfbfe3d48>
    40e8:	d9c01117 	ldw	r7,68(sp)
    40ec:	3801bc26 	beq	r7,zero,47e0 <_dtoa_r+0x1480>
    40f0:	10810cc4 	addi	r2,r2,1075
    40f4:	dd400a17 	ldw	r21,40(sp)
    40f8:	dd000817 	ldw	r20,32(sp)
    40fc:	003f0a06 	br	3d28 <__ram_exceptions_end+0xfbfe3ad4>
    4100:	00800704 	movi	r2,28
    4104:	d9000817 	ldw	r4,32(sp)
    4108:	a0a9883a 	add	r20,r20,r2
    410c:	b0ad883a 	add	r22,r22,r2
    4110:	2089883a 	add	r4,r4,r2
    4114:	d9000815 	stw	r4,32(sp)
    4118:	003f5106 	br	3e60 <__ram_exceptions_end+0xfbfe3c0c>
    411c:	d8c00317 	ldw	r3,12(sp)
    4120:	b8c1fc0e 	bge	r23,r3,4914 <_dtoa_r+0x15b4>
    4124:	0027883a 	mov	r19,zero
    4128:	b805883a 	mov	r2,r23
    412c:	003f3e06 	br	3e28 <__ram_exceptions_end+0xfbfe3bd4>
    4130:	880b883a 	mov	r5,r17
    4134:	e009883a 	mov	r4,fp
    4138:	000f883a 	mov	r7,zero
    413c:	01800284 	movi	r6,10
    4140:	00064b40 	call	64b4 <__multadd>
    4144:	d9000c17 	ldw	r4,48(sp)
    4148:	1023883a 	mov	r17,r2
    414c:	0102040e 	bge	zero,r4,4960 <_dtoa_r+0x1600>
    4150:	d9000615 	stw	r4,24(sp)
    4154:	0500050e 	bge	zero,r20,416c <_dtoa_r+0xe0c>
    4158:	880b883a 	mov	r5,r17
    415c:	a00d883a 	mov	r6,r20
    4160:	e009883a 	mov	r4,fp
    4164:	0006b640 	call	6b64 <__lshift>
    4168:	1023883a 	mov	r17,r2
    416c:	9801241e 	bne	r19,zero,4600 <_dtoa_r+0x12a0>
    4170:	8829883a 	mov	r20,r17
    4174:	d9000617 	ldw	r4,24(sp)
    4178:	dcc00717 	ldw	r19,28(sp)
    417c:	9480004c 	andi	r18,r18,1
    4180:	20bfffc4 	addi	r2,r4,-1
    4184:	9885883a 	add	r2,r19,r2
    4188:	d8800415 	stw	r2,16(sp)
    418c:	dc800615 	stw	r18,24(sp)
    4190:	a80b883a 	mov	r5,r21
    4194:	8009883a 	mov	r4,r16
    4198:	00031600 	call	3160 <quorem>
    419c:	880b883a 	mov	r5,r17
    41a0:	8009883a 	mov	r4,r16
    41a4:	102f883a 	mov	r23,r2
    41a8:	0006cac0 	call	6cac <__mcmp>
    41ac:	a80b883a 	mov	r5,r21
    41b0:	a00d883a 	mov	r6,r20
    41b4:	e009883a 	mov	r4,fp
    41b8:	102d883a 	mov	r22,r2
    41bc:	0006d0c0 	call	6d0c <__mdiff>
    41c0:	1007883a 	mov	r3,r2
    41c4:	10800317 	ldw	r2,12(r2)
    41c8:	bc800c04 	addi	r18,r23,48
    41cc:	180b883a 	mov	r5,r3
    41d0:	10004e1e 	bne	r2,zero,430c <_dtoa_r+0xfac>
    41d4:	8009883a 	mov	r4,r16
    41d8:	d8c01615 	stw	r3,88(sp)
    41dc:	0006cac0 	call	6cac <__mcmp>
    41e0:	d8c01617 	ldw	r3,88(sp)
    41e4:	e009883a 	mov	r4,fp
    41e8:	d8801615 	stw	r2,88(sp)
    41ec:	180b883a 	mov	r5,r3
    41f0:	000648c0 	call	648c <_Bfree>
    41f4:	d8801617 	ldw	r2,88(sp)
    41f8:	1000041e 	bne	r2,zero,420c <_dtoa_r+0xeac>
    41fc:	d9800317 	ldw	r6,12(sp)
    4200:	3000021e 	bne	r6,zero,420c <_dtoa_r+0xeac>
    4204:	d8c00617 	ldw	r3,24(sp)
    4208:	18003726 	beq	r3,zero,42e8 <_dtoa_r+0xf88>
    420c:	b0002016 	blt	r22,zero,4290 <_dtoa_r+0xf30>
    4210:	b000041e 	bne	r22,zero,4224 <_dtoa_r+0xec4>
    4214:	d9000317 	ldw	r4,12(sp)
    4218:	2000021e 	bne	r4,zero,4224 <_dtoa_r+0xec4>
    421c:	d8c00617 	ldw	r3,24(sp)
    4220:	18001b26 	beq	r3,zero,4290 <_dtoa_r+0xf30>
    4224:	00810716 	blt	zero,r2,4644 <_dtoa_r+0x12e4>
    4228:	d8c00417 	ldw	r3,16(sp)
    422c:	9d800044 	addi	r22,r19,1
    4230:	9c800005 	stb	r18,0(r19)
    4234:	b02f883a 	mov	r23,r22
    4238:	98c10626 	beq	r19,r3,4654 <_dtoa_r+0x12f4>
    423c:	800b883a 	mov	r5,r16
    4240:	000f883a 	mov	r7,zero
    4244:	01800284 	movi	r6,10
    4248:	e009883a 	mov	r4,fp
    424c:	00064b40 	call	64b4 <__multadd>
    4250:	1021883a 	mov	r16,r2
    4254:	000f883a 	mov	r7,zero
    4258:	01800284 	movi	r6,10
    425c:	880b883a 	mov	r5,r17
    4260:	e009883a 	mov	r4,fp
    4264:	8d002526 	beq	r17,r20,42fc <_dtoa_r+0xf9c>
    4268:	00064b40 	call	64b4 <__multadd>
    426c:	a00b883a 	mov	r5,r20
    4270:	000f883a 	mov	r7,zero
    4274:	01800284 	movi	r6,10
    4278:	e009883a 	mov	r4,fp
    427c:	1023883a 	mov	r17,r2
    4280:	00064b40 	call	64b4 <__multadd>
    4284:	1029883a 	mov	r20,r2
    4288:	b027883a 	mov	r19,r22
    428c:	003fc006 	br	4190 <__ram_exceptions_end+0xfbfe3f3c>
    4290:	9011883a 	mov	r8,r18
    4294:	00800e0e 	bge	zero,r2,42d0 <_dtoa_r+0xf70>
    4298:	800b883a 	mov	r5,r16
    429c:	01800044 	movi	r6,1
    42a0:	e009883a 	mov	r4,fp
    42a4:	da001715 	stw	r8,92(sp)
    42a8:	0006b640 	call	6b64 <__lshift>
    42ac:	a80b883a 	mov	r5,r21
    42b0:	1009883a 	mov	r4,r2
    42b4:	1021883a 	mov	r16,r2
    42b8:	0006cac0 	call	6cac <__mcmp>
    42bc:	da001717 	ldw	r8,92(sp)
    42c0:	0081960e 	bge	zero,r2,491c <_dtoa_r+0x15bc>
    42c4:	00800e44 	movi	r2,57
    42c8:	40817026 	beq	r8,r2,488c <_dtoa_r+0x152c>
    42cc:	ba000c44 	addi	r8,r23,49
    42d0:	8825883a 	mov	r18,r17
    42d4:	9dc00044 	addi	r23,r19,1
    42d8:	9a000005 	stb	r8,0(r19)
    42dc:	a023883a 	mov	r17,r20
    42e0:	dc000915 	stw	r16,36(sp)
    42e4:	003f2406 	br	3f78 <__ram_exceptions_end+0xfbfe3d24>
    42e8:	00800e44 	movi	r2,57
    42ec:	9011883a 	mov	r8,r18
    42f0:	90816626 	beq	r18,r2,488c <_dtoa_r+0x152c>
    42f4:	05bff516 	blt	zero,r22,42cc <__ram_exceptions_end+0xfbfe4078>
    42f8:	003ff506 	br	42d0 <__ram_exceptions_end+0xfbfe407c>
    42fc:	00064b40 	call	64b4 <__multadd>
    4300:	1023883a 	mov	r17,r2
    4304:	1029883a 	mov	r20,r2
    4308:	003fdf06 	br	4288 <__ram_exceptions_end+0xfbfe4034>
    430c:	e009883a 	mov	r4,fp
    4310:	000648c0 	call	648c <_Bfree>
    4314:	00800044 	movi	r2,1
    4318:	003fbc06 	br	420c <__ram_exceptions_end+0xfbfe3fb8>
    431c:	a80b883a 	mov	r5,r21
    4320:	8009883a 	mov	r4,r16
    4324:	0006cac0 	call	6cac <__mcmp>
    4328:	103edb0e 	bge	r2,zero,3e98 <__ram_exceptions_end+0xfbfe3c44>
    432c:	800b883a 	mov	r5,r16
    4330:	000f883a 	mov	r7,zero
    4334:	01800284 	movi	r6,10
    4338:	e009883a 	mov	r4,fp
    433c:	00064b40 	call	64b4 <__multadd>
    4340:	1021883a 	mov	r16,r2
    4344:	d8800517 	ldw	r2,20(sp)
    4348:	d8c00b17 	ldw	r3,44(sp)
    434c:	10bfffc4 	addi	r2,r2,-1
    4350:	d8800515 	stw	r2,20(sp)
    4354:	183f761e 	bne	r3,zero,4130 <__ram_exceptions_end+0xfbfe3edc>
    4358:	d9000c17 	ldw	r4,48(sp)
    435c:	0101730e 	bge	zero,r4,492c <_dtoa_r+0x15cc>
    4360:	d9000615 	stw	r4,24(sp)
    4364:	003ed006 	br	3ea8 <__ram_exceptions_end+0xfbfe3c54>
    4368:	00800084 	movi	r2,2
    436c:	3081861e 	bne	r6,r2,4988 <_dtoa_r+0x1628>
    4370:	d8000b15 	stw	zero,44(sp)
    4374:	003f3c06 	br	4068 <__ram_exceptions_end+0xfbfe3e14>
    4378:	dc000917 	ldw	r16,36(sp)
    437c:	003e9206 	br	3dc8 <__ram_exceptions_end+0xfbfe3b74>
    4380:	d9c00317 	ldw	r7,12(sp)
    4384:	00800084 	movi	r2,2
    4388:	11fec50e 	bge	r2,r7,3ea0 <__ram_exceptions_end+0xfbfe3c4c>
    438c:	d9000617 	ldw	r4,24(sp)
    4390:	20013c1e 	bne	r4,zero,4884 <_dtoa_r+0x1524>
    4394:	a80b883a 	mov	r5,r21
    4398:	000f883a 	mov	r7,zero
    439c:	01800144 	movi	r6,5
    43a0:	e009883a 	mov	r4,fp
    43a4:	00064b40 	call	64b4 <__multadd>
    43a8:	100b883a 	mov	r5,r2
    43ac:	8009883a 	mov	r4,r16
    43b0:	102b883a 	mov	r21,r2
    43b4:	0006cac0 	call	6cac <__mcmp>
    43b8:	dc000915 	stw	r16,36(sp)
    43bc:	00bf410e 	bge	zero,r2,40c4 <__ram_exceptions_end+0xfbfe3e70>
    43c0:	d9c00717 	ldw	r7,28(sp)
    43c4:	00800c44 	movi	r2,49
    43c8:	38800005 	stb	r2,0(r7)
    43cc:	d8800517 	ldw	r2,20(sp)
    43d0:	3dc00044 	addi	r23,r7,1
    43d4:	10800044 	addi	r2,r2,1
    43d8:	d8800515 	stw	r2,20(sp)
    43dc:	003f3d06 	br	40d4 <__ram_exceptions_end+0xfbfe3e80>
    43e0:	d9800517 	ldw	r6,20(sp)
    43e4:	d9c00717 	ldw	r7,28(sp)
    43e8:	00800c44 	movi	r2,49
    43ec:	31800044 	addi	r6,r6,1
    43f0:	d9800515 	stw	r6,20(sp)
    43f4:	38800005 	stb	r2,0(r7)
    43f8:	003edf06 	br	3f78 <__ram_exceptions_end+0xfbfe3d24>
    43fc:	d8000b15 	stw	zero,44(sp)
    4400:	003c9f06 	br	3680 <__ram_exceptions_end+0xfbfe342c>
    4404:	903e7e1e 	bne	r18,zero,3e00 <__ram_exceptions_end+0xfbfe3bac>
    4408:	00800434 	movhi	r2,16
    440c:	10bfffc4 	addi	r2,r2,-1
    4410:	9884703a 	and	r2,r19,r2
    4414:	1000ea1e 	bne	r2,zero,47c0 <_dtoa_r+0x1460>
    4418:	9cdffc2c 	andhi	r19,r19,32752
    441c:	9800e826 	beq	r19,zero,47c0 <_dtoa_r+0x1460>
    4420:	d9c00817 	ldw	r7,32(sp)
    4424:	b5800044 	addi	r22,r22,1
    4428:	04c00044 	movi	r19,1
    442c:	39c00044 	addi	r7,r7,1
    4430:	d9c00815 	stw	r7,32(sp)
    4434:	d8800d17 	ldw	r2,52(sp)
    4438:	103e721e 	bne	r2,zero,3e04 <__ram_exceptions_end+0xfbfe3bb0>
    443c:	00800044 	movi	r2,1
    4440:	003e7906 	br	3e28 <__ram_exceptions_end+0xfbfe3bd4>
    4444:	8009883a 	mov	r4,r16
    4448:	000d1800 	call	d180 <__floatsidf>
    444c:	d9800f17 	ldw	r6,60(sp)
    4450:	d9c01017 	ldw	r7,64(sp)
    4454:	1009883a 	mov	r4,r2
    4458:	180b883a 	mov	r5,r3
    445c:	000c0ec0 	call	c0ec <__muldf3>
    4460:	000d883a 	mov	r6,zero
    4464:	01d00734 	movhi	r7,16412
    4468:	1009883a 	mov	r4,r2
    446c:	180b883a 	mov	r5,r3
    4470:	000ad000 	call	ad00 <__adddf3>
    4474:	047f3034 	movhi	r17,64704
    4478:	1021883a 	mov	r16,r2
    447c:	1c63883a 	add	r17,r3,r17
    4480:	d9000f17 	ldw	r4,60(sp)
    4484:	d9401017 	ldw	r5,64(sp)
    4488:	000d883a 	mov	r6,zero
    448c:	01d00534 	movhi	r7,16404
    4490:	000c8040 	call	c804 <__subdf3>
    4494:	800d883a 	mov	r6,r16
    4498:	880f883a 	mov	r7,r17
    449c:	1009883a 	mov	r4,r2
    44a0:	180b883a 	mov	r5,r3
    44a4:	102b883a 	mov	r21,r2
    44a8:	1829883a 	mov	r20,r3
    44ac:	000bf1c0 	call	bf1c <__gedf2>
    44b0:	00806c16 	blt	zero,r2,4664 <_dtoa_r+0x1304>
    44b4:	89e0003c 	xorhi	r7,r17,32768
    44b8:	800d883a 	mov	r6,r16
    44bc:	a809883a 	mov	r4,r21
    44c0:	a00b883a 	mov	r5,r20
    44c4:	000bff80 	call	bff8 <__ledf2>
    44c8:	103d7e0e 	bge	r2,zero,3ac4 <__ram_exceptions_end+0xfbfe3870>
    44cc:	002b883a 	mov	r21,zero
    44d0:	0023883a 	mov	r17,zero
    44d4:	003efb06 	br	40c4 <__ram_exceptions_end+0xfbfe3e70>
    44d8:	d8800717 	ldw	r2,28(sp)
    44dc:	003bd006 	br	3420 <__ram_exceptions_end+0xfbfe31cc>
    44e0:	d9000a17 	ldw	r4,40(sp)
    44e4:	d9800d17 	ldw	r6,52(sp)
    44e8:	dd400a15 	stw	r21,40(sp)
    44ec:	a905c83a 	sub	r2,r21,r4
    44f0:	308d883a 	add	r6,r6,r2
    44f4:	d9800d15 	stw	r6,52(sp)
    44f8:	002b883a 	mov	r21,zero
    44fc:	003e0606 	br	3d18 <__ram_exceptions_end+0xfbfe3ac4>
    4500:	9023883a 	mov	r17,r18
    4504:	9829883a 	mov	r20,r19
    4508:	04000084 	movi	r16,2
    450c:	003c9206 	br	3758 <__ram_exceptions_end+0xfbfe3504>
    4510:	04000044 	movi	r16,1
    4514:	dc000c15 	stw	r16,48(sp)
    4518:	dc000615 	stw	r16,24(sp)
    451c:	dc002215 	stw	r16,136(sp)
    4520:	e0001115 	stw	zero,68(fp)
    4524:	000b883a 	mov	r5,zero
    4528:	003c6906 	br	36d0 <__ram_exceptions_end+0xfbfe347c>
    452c:	3021883a 	mov	r16,r6
    4530:	003ffb06 	br	4520 <__ram_exceptions_end+0xfbfe42cc>
    4534:	1000021e 	bne	r2,zero,4540 <_dtoa_r+0x11e0>
    4538:	4200004c 	andi	r8,r8,1
    453c:	403e7d1e 	bne	r8,zero,3f34 <__ram_exceptions_end+0xfbfe3ce0>
    4540:	01000c04 	movi	r4,48
    4544:	00000106 	br	454c <_dtoa_r+0x11ec>
    4548:	102f883a 	mov	r23,r2
    454c:	b8bfffc4 	addi	r2,r23,-1
    4550:	10c00007 	ldb	r3,0(r2)
    4554:	193ffc26 	beq	r3,r4,4548 <__ram_exceptions_end+0xfbfe42f4>
    4558:	003e8706 	br	3f78 <__ram_exceptions_end+0xfbfe3d24>
    455c:	d8800517 	ldw	r2,20(sp)
    4560:	00a3c83a 	sub	r17,zero,r2
    4564:	8800a426 	beq	r17,zero,47f8 <_dtoa_r+0x1498>
    4568:	888003cc 	andi	r2,r17,15
    456c:	100490fa 	slli	r2,r2,3
    4570:	00c00074 	movhi	r3,1
    4574:	18c08604 	addi	r3,r3,536
    4578:	1885883a 	add	r2,r3,r2
    457c:	11800017 	ldw	r6,0(r2)
    4580:	11c00117 	ldw	r7,4(r2)
    4584:	9009883a 	mov	r4,r18
    4588:	980b883a 	mov	r5,r19
    458c:	8823d13a 	srai	r17,r17,4
    4590:	000c0ec0 	call	c0ec <__muldf3>
    4594:	d8800f15 	stw	r2,60(sp)
    4598:	d8c01015 	stw	r3,64(sp)
    459c:	8800e826 	beq	r17,zero,4940 <_dtoa_r+0x15e0>
    45a0:	05000074 	movhi	r20,1
    45a4:	a5007c04 	addi	r20,r20,496
    45a8:	04000084 	movi	r16,2
    45ac:	8980004c 	andi	r6,r17,1
    45b0:	1009883a 	mov	r4,r2
    45b4:	8823d07a 	srai	r17,r17,1
    45b8:	180b883a 	mov	r5,r3
    45bc:	30000426 	beq	r6,zero,45d0 <_dtoa_r+0x1270>
    45c0:	a1800017 	ldw	r6,0(r20)
    45c4:	a1c00117 	ldw	r7,4(r20)
    45c8:	84000044 	addi	r16,r16,1
    45cc:	000c0ec0 	call	c0ec <__muldf3>
    45d0:	a5000204 	addi	r20,r20,8
    45d4:	883ff51e 	bne	r17,zero,45ac <__ram_exceptions_end+0xfbfe4358>
    45d8:	d8800f15 	stw	r2,60(sp)
    45dc:	d8c01015 	stw	r3,64(sp)
    45e0:	003c7606 	br	37bc <__ram_exceptions_end+0xfbfe3568>
    45e4:	00c00c04 	movi	r3,48
    45e8:	10c00005 	stb	r3,0(r2)
    45ec:	d8c00517 	ldw	r3,20(sp)
    45f0:	bd3fffc3 	ldbu	r20,-1(r23)
    45f4:	18c00044 	addi	r3,r3,1
    45f8:	d8c00515 	stw	r3,20(sp)
    45fc:	003db906 	br	3ce4 <__ram_exceptions_end+0xfbfe3a90>
    4600:	89400117 	ldw	r5,4(r17)
    4604:	e009883a 	mov	r4,fp
    4608:	00063e40 	call	63e4 <_Balloc>
    460c:	89800417 	ldw	r6,16(r17)
    4610:	89400304 	addi	r5,r17,12
    4614:	11000304 	addi	r4,r2,12
    4618:	31800084 	addi	r6,r6,2
    461c:	318d883a 	add	r6,r6,r6
    4620:	318d883a 	add	r6,r6,r6
    4624:	1027883a 	mov	r19,r2
    4628:	00061740 	call	6174 <memcpy>
    462c:	01800044 	movi	r6,1
    4630:	980b883a 	mov	r5,r19
    4634:	e009883a 	mov	r4,fp
    4638:	0006b640 	call	6b64 <__lshift>
    463c:	1029883a 	mov	r20,r2
    4640:	003ecc06 	br	4174 <__ram_exceptions_end+0xfbfe3f20>
    4644:	00800e44 	movi	r2,57
    4648:	90809026 	beq	r18,r2,488c <_dtoa_r+0x152c>
    464c:	92000044 	addi	r8,r18,1
    4650:	003f1f06 	br	42d0 <__ram_exceptions_end+0xfbfe407c>
    4654:	9011883a 	mov	r8,r18
    4658:	8825883a 	mov	r18,r17
    465c:	a023883a 	mov	r17,r20
    4660:	003e2906 	br	3f08 <__ram_exceptions_end+0xfbfe3cb4>
    4664:	002b883a 	mov	r21,zero
    4668:	0023883a 	mov	r17,zero
    466c:	003f5406 	br	43c0 <__ram_exceptions_end+0xfbfe416c>
    4670:	61bfffc4 	addi	r6,r12,-1
    4674:	300490fa 	slli	r2,r6,3
    4678:	00c00074 	movhi	r3,1
    467c:	18c08604 	addi	r3,r3,536
    4680:	1885883a 	add	r2,r3,r2
    4684:	11000017 	ldw	r4,0(r2)
    4688:	11400117 	ldw	r5,4(r2)
    468c:	d8800717 	ldw	r2,28(sp)
    4690:	880f883a 	mov	r7,r17
    4694:	d9801215 	stw	r6,72(sp)
    4698:	800d883a 	mov	r6,r16
    469c:	db001615 	stw	r12,88(sp)
    46a0:	15c00044 	addi	r23,r2,1
    46a4:	000c0ec0 	call	c0ec <__muldf3>
    46a8:	d9401017 	ldw	r5,64(sp)
    46ac:	d9000f17 	ldw	r4,60(sp)
    46b0:	d8c01515 	stw	r3,84(sp)
    46b4:	d8801415 	stw	r2,80(sp)
    46b8:	000d1000 	call	d100 <__fixdfsi>
    46bc:	1009883a 	mov	r4,r2
    46c0:	1021883a 	mov	r16,r2
    46c4:	000d1800 	call	d180 <__floatsidf>
    46c8:	d9000f17 	ldw	r4,60(sp)
    46cc:	d9401017 	ldw	r5,64(sp)
    46d0:	100d883a 	mov	r6,r2
    46d4:	180f883a 	mov	r7,r3
    46d8:	000c8040 	call	c804 <__subdf3>
    46dc:	1829883a 	mov	r20,r3
    46e0:	d8c00717 	ldw	r3,28(sp)
    46e4:	84000c04 	addi	r16,r16,48
    46e8:	1023883a 	mov	r17,r2
    46ec:	1c000005 	stb	r16,0(r3)
    46f0:	db001617 	ldw	r12,88(sp)
    46f4:	00800044 	movi	r2,1
    46f8:	60802226 	beq	r12,r2,4784 <_dtoa_r+0x1424>
    46fc:	d9c00717 	ldw	r7,28(sp)
    4700:	8805883a 	mov	r2,r17
    4704:	b82b883a 	mov	r21,r23
    4708:	3b19883a 	add	r12,r7,r12
    470c:	6023883a 	mov	r17,r12
    4710:	a007883a 	mov	r3,r20
    4714:	dc800f15 	stw	r18,60(sp)
    4718:	000d883a 	mov	r6,zero
    471c:	01d00934 	movhi	r7,16420
    4720:	1009883a 	mov	r4,r2
    4724:	180b883a 	mov	r5,r3
    4728:	000c0ec0 	call	c0ec <__muldf3>
    472c:	180b883a 	mov	r5,r3
    4730:	1009883a 	mov	r4,r2
    4734:	1829883a 	mov	r20,r3
    4738:	1025883a 	mov	r18,r2
    473c:	000d1000 	call	d100 <__fixdfsi>
    4740:	1009883a 	mov	r4,r2
    4744:	1021883a 	mov	r16,r2
    4748:	000d1800 	call	d180 <__floatsidf>
    474c:	100d883a 	mov	r6,r2
    4750:	180f883a 	mov	r7,r3
    4754:	9009883a 	mov	r4,r18
    4758:	a00b883a 	mov	r5,r20
    475c:	84000c04 	addi	r16,r16,48
    4760:	000c8040 	call	c804 <__subdf3>
    4764:	ad400044 	addi	r21,r21,1
    4768:	ac3fffc5 	stb	r16,-1(r21)
    476c:	ac7fea1e 	bne	r21,r17,4718 <__ram_exceptions_end+0xfbfe44c4>
    4770:	1023883a 	mov	r17,r2
    4774:	d8801217 	ldw	r2,72(sp)
    4778:	dc800f17 	ldw	r18,60(sp)
    477c:	1829883a 	mov	r20,r3
    4780:	b8af883a 	add	r23,r23,r2
    4784:	d9001417 	ldw	r4,80(sp)
    4788:	d9401517 	ldw	r5,84(sp)
    478c:	000d883a 	mov	r6,zero
    4790:	01cff834 	movhi	r7,16352
    4794:	000ad000 	call	ad00 <__adddf3>
    4798:	880d883a 	mov	r6,r17
    479c:	a00f883a 	mov	r7,r20
    47a0:	1009883a 	mov	r4,r2
    47a4:	180b883a 	mov	r5,r3
    47a8:	000bff80 	call	bff8 <__ledf2>
    47ac:	10003e0e 	bge	r2,zero,48a8 <_dtoa_r+0x1548>
    47b0:	d9001317 	ldw	r4,76(sp)
    47b4:	bd3fffc3 	ldbu	r20,-1(r23)
    47b8:	d9000515 	stw	r4,20(sp)
    47bc:	003d3b06 	br	3cac <__ram_exceptions_end+0xfbfe3a58>
    47c0:	0027883a 	mov	r19,zero
    47c4:	003f1b06 	br	4434 <__ram_exceptions_end+0xfbfe41e0>
    47c8:	d8800817 	ldw	r2,32(sp)
    47cc:	11e9c83a 	sub	r20,r2,r7
    47d0:	0005883a 	mov	r2,zero
    47d4:	003d5406 	br	3d28 <__ram_exceptions_end+0xfbfe3ad4>
    47d8:	00800044 	movi	r2,1
    47dc:	003dc706 	br	3efc <__ram_exceptions_end+0xfbfe3ca8>
    47e0:	d8c00217 	ldw	r3,8(sp)
    47e4:	00800d84 	movi	r2,54
    47e8:	dd400a17 	ldw	r21,40(sp)
    47ec:	10c5c83a 	sub	r2,r2,r3
    47f0:	dd000817 	ldw	r20,32(sp)
    47f4:	003d4c06 	br	3d28 <__ram_exceptions_end+0xfbfe3ad4>
    47f8:	dc800f15 	stw	r18,60(sp)
    47fc:	dcc01015 	stw	r19,64(sp)
    4800:	04000084 	movi	r16,2
    4804:	003bed06 	br	37bc <__ram_exceptions_end+0xfbfe3568>
    4808:	d9000617 	ldw	r4,24(sp)
    480c:	203f0d26 	beq	r4,zero,4444 <__ram_exceptions_end+0xfbfe41f0>
    4810:	d9800c17 	ldw	r6,48(sp)
    4814:	01bcab0e 	bge	zero,r6,3ac4 <__ram_exceptions_end+0xfbfe3870>
    4818:	d9401017 	ldw	r5,64(sp)
    481c:	d9000f17 	ldw	r4,60(sp)
    4820:	000d883a 	mov	r6,zero
    4824:	01d00934 	movhi	r7,16420
    4828:	000c0ec0 	call	c0ec <__muldf3>
    482c:	81000044 	addi	r4,r16,1
    4830:	d8800f15 	stw	r2,60(sp)
    4834:	d8c01015 	stw	r3,64(sp)
    4838:	000d1800 	call	d180 <__floatsidf>
    483c:	d9800f17 	ldw	r6,60(sp)
    4840:	d9c01017 	ldw	r7,64(sp)
    4844:	1009883a 	mov	r4,r2
    4848:	180b883a 	mov	r5,r3
    484c:	000c0ec0 	call	c0ec <__muldf3>
    4850:	01d00734 	movhi	r7,16412
    4854:	000d883a 	mov	r6,zero
    4858:	1009883a 	mov	r4,r2
    485c:	180b883a 	mov	r5,r3
    4860:	000ad000 	call	ad00 <__adddf3>
    4864:	d9c00517 	ldw	r7,20(sp)
    4868:	047f3034 	movhi	r17,64704
    486c:	1021883a 	mov	r16,r2
    4870:	39ffffc4 	addi	r7,r7,-1
    4874:	d9c01315 	stw	r7,76(sp)
    4878:	1c63883a 	add	r17,r3,r17
    487c:	db000c17 	ldw	r12,48(sp)
    4880:	003bea06 	br	382c <__ram_exceptions_end+0xfbfe35d8>
    4884:	dc000915 	stw	r16,36(sp)
    4888:	003e0e06 	br	40c4 <__ram_exceptions_end+0xfbfe3e70>
    488c:	01000e44 	movi	r4,57
    4890:	8825883a 	mov	r18,r17
    4894:	9dc00044 	addi	r23,r19,1
    4898:	99000005 	stb	r4,0(r19)
    489c:	a023883a 	mov	r17,r20
    48a0:	dc000915 	stw	r16,36(sp)
    48a4:	003da406 	br	3f38 <__ram_exceptions_end+0xfbfe3ce4>
    48a8:	d9801417 	ldw	r6,80(sp)
    48ac:	d9c01517 	ldw	r7,84(sp)
    48b0:	0009883a 	mov	r4,zero
    48b4:	014ff834 	movhi	r5,16352
    48b8:	000c8040 	call	c804 <__subdf3>
    48bc:	880d883a 	mov	r6,r17
    48c0:	a00f883a 	mov	r7,r20
    48c4:	1009883a 	mov	r4,r2
    48c8:	180b883a 	mov	r5,r3
    48cc:	000bf1c0 	call	bf1c <__gedf2>
    48d0:	00bc7c0e 	bge	zero,r2,3ac4 <__ram_exceptions_end+0xfbfe3870>
    48d4:	01000c04 	movi	r4,48
    48d8:	00000106 	br	48e0 <_dtoa_r+0x1580>
    48dc:	102f883a 	mov	r23,r2
    48e0:	b8bfffc4 	addi	r2,r23,-1
    48e4:	10c00007 	ldb	r3,0(r2)
    48e8:	193ffc26 	beq	r3,r4,48dc <__ram_exceptions_end+0xfbfe4688>
    48ec:	d9801317 	ldw	r6,76(sp)
    48f0:	d9800515 	stw	r6,20(sp)
    48f4:	003c4406 	br	3a08 <__ram_exceptions_end+0xfbfe37b4>
    48f8:	d9801317 	ldw	r6,76(sp)
    48fc:	d9800515 	stw	r6,20(sp)
    4900:	003cea06 	br	3cac <__ram_exceptions_end+0xfbfe3a58>
    4904:	dd800f17 	ldw	r22,60(sp)
    4908:	dcc01017 	ldw	r19,64(sp)
    490c:	dc801217 	ldw	r18,72(sp)
    4910:	003c6c06 	br	3ac4 <__ram_exceptions_end+0xfbfe3870>
    4914:	903e031e 	bne	r18,zero,4124 <__ram_exceptions_end+0xfbfe3ed0>
    4918:	003ebb06 	br	4408 <__ram_exceptions_end+0xfbfe41b4>
    491c:	103e6c1e 	bne	r2,zero,42d0 <__ram_exceptions_end+0xfbfe407c>
    4920:	4080004c 	andi	r2,r8,1
    4924:	103e6a26 	beq	r2,zero,42d0 <__ram_exceptions_end+0xfbfe407c>
    4928:	003e6606 	br	42c4 <__ram_exceptions_end+0xfbfe4070>
    492c:	d8c00317 	ldw	r3,12(sp)
    4930:	00800084 	movi	r2,2
    4934:	10c02916 	blt	r2,r3,49dc <_dtoa_r+0x167c>
    4938:	d9000c17 	ldw	r4,48(sp)
    493c:	003e8806 	br	4360 <__ram_exceptions_end+0xfbfe410c>
    4940:	04000084 	movi	r16,2
    4944:	003b9d06 	br	37bc <__ram_exceptions_end+0xfbfe3568>
    4948:	d9001317 	ldw	r4,76(sp)
    494c:	d9000515 	stw	r4,20(sp)
    4950:	003cd606 	br	3cac <__ram_exceptions_end+0xfbfe3a58>
    4954:	d8801317 	ldw	r2,76(sp)
    4958:	d8800515 	stw	r2,20(sp)
    495c:	003c2a06 	br	3a08 <__ram_exceptions_end+0xfbfe37b4>
    4960:	d9800317 	ldw	r6,12(sp)
    4964:	00800084 	movi	r2,2
    4968:	11801516 	blt	r2,r6,49c0 <_dtoa_r+0x1660>
    496c:	d9c00c17 	ldw	r7,48(sp)
    4970:	d9c00615 	stw	r7,24(sp)
    4974:	003df706 	br	4154 <__ram_exceptions_end+0xfbfe3f00>
    4978:	193d3926 	beq	r3,r4,3e60 <__ram_exceptions_end+0xfbfe3c0c>
    497c:	00c00f04 	movi	r3,60
    4980:	1885c83a 	sub	r2,r3,r2
    4984:	003ddf06 	br	4104 <__ram_exceptions_end+0xfbfe3eb0>
    4988:	e009883a 	mov	r4,fp
    498c:	e0001115 	stw	zero,68(fp)
    4990:	000b883a 	mov	r5,zero
    4994:	00063e40 	call	63e4 <_Balloc>
    4998:	d8800715 	stw	r2,28(sp)
    499c:	d8c00717 	ldw	r3,28(sp)
    49a0:	00bfffc4 	movi	r2,-1
    49a4:	01000044 	movi	r4,1
    49a8:	d8800c15 	stw	r2,48(sp)
    49ac:	e0c01015 	stw	r3,64(fp)
    49b0:	d9000b15 	stw	r4,44(sp)
    49b4:	d8800615 	stw	r2,24(sp)
    49b8:	d8002215 	stw	zero,136(sp)
    49bc:	003c4106 	br	3ac4 <__ram_exceptions_end+0xfbfe3870>
    49c0:	d8c00c17 	ldw	r3,48(sp)
    49c4:	d8c00615 	stw	r3,24(sp)
    49c8:	003e7006 	br	438c <__ram_exceptions_end+0xfbfe4138>
    49cc:	04400044 	movi	r17,1
    49d0:	003b2006 	br	3654 <__ram_exceptions_end+0xfbfe3400>
    49d4:	000b883a 	mov	r5,zero
    49d8:	003b3d06 	br	36d0 <__ram_exceptions_end+0xfbfe347c>
    49dc:	d8800c17 	ldw	r2,48(sp)
    49e0:	d8800615 	stw	r2,24(sp)
    49e4:	003e6906 	br	438c <__ram_exceptions_end+0xfbfe4138>

000049e8 <__sflush_r>:
    49e8:	2880030b 	ldhu	r2,12(r5)
    49ec:	defffb04 	addi	sp,sp,-20
    49f0:	dcc00315 	stw	r19,12(sp)
    49f4:	dc400115 	stw	r17,4(sp)
    49f8:	dfc00415 	stw	ra,16(sp)
    49fc:	dc800215 	stw	r18,8(sp)
    4a00:	dc000015 	stw	r16,0(sp)
    4a04:	10c0020c 	andi	r3,r2,8
    4a08:	2823883a 	mov	r17,r5
    4a0c:	2027883a 	mov	r19,r4
    4a10:	1800311e 	bne	r3,zero,4ad8 <__sflush_r+0xf0>
    4a14:	28c00117 	ldw	r3,4(r5)
    4a18:	10820014 	ori	r2,r2,2048
    4a1c:	2880030d 	sth	r2,12(r5)
    4a20:	00c04b0e 	bge	zero,r3,4b50 <__sflush_r+0x168>
    4a24:	8a000a17 	ldw	r8,40(r17)
    4a28:	40002326 	beq	r8,zero,4ab8 <__sflush_r+0xd0>
    4a2c:	9c000017 	ldw	r16,0(r19)
    4a30:	10c4000c 	andi	r3,r2,4096
    4a34:	98000015 	stw	zero,0(r19)
    4a38:	18004826 	beq	r3,zero,4b5c <__sflush_r+0x174>
    4a3c:	89801417 	ldw	r6,80(r17)
    4a40:	10c0010c 	andi	r3,r2,4
    4a44:	18000626 	beq	r3,zero,4a60 <__sflush_r+0x78>
    4a48:	88c00117 	ldw	r3,4(r17)
    4a4c:	88800c17 	ldw	r2,48(r17)
    4a50:	30cdc83a 	sub	r6,r6,r3
    4a54:	10000226 	beq	r2,zero,4a60 <__sflush_r+0x78>
    4a58:	88800f17 	ldw	r2,60(r17)
    4a5c:	308dc83a 	sub	r6,r6,r2
    4a60:	89400717 	ldw	r5,28(r17)
    4a64:	000f883a 	mov	r7,zero
    4a68:	9809883a 	mov	r4,r19
    4a6c:	403ee83a 	callr	r8
    4a70:	00ffffc4 	movi	r3,-1
    4a74:	10c04426 	beq	r2,r3,4b88 <__sflush_r+0x1a0>
    4a78:	88c0030b 	ldhu	r3,12(r17)
    4a7c:	89000417 	ldw	r4,16(r17)
    4a80:	88000115 	stw	zero,4(r17)
    4a84:	197dffcc 	andi	r5,r3,63487
    4a88:	8940030d 	sth	r5,12(r17)
    4a8c:	89000015 	stw	r4,0(r17)
    4a90:	18c4000c 	andi	r3,r3,4096
    4a94:	18002c1e 	bne	r3,zero,4b48 <__sflush_r+0x160>
    4a98:	89400c17 	ldw	r5,48(r17)
    4a9c:	9c000015 	stw	r16,0(r19)
    4aa0:	28000526 	beq	r5,zero,4ab8 <__sflush_r+0xd0>
    4aa4:	88801004 	addi	r2,r17,64
    4aa8:	28800226 	beq	r5,r2,4ab4 <__sflush_r+0xcc>
    4aac:	9809883a 	mov	r4,r19
    4ab0:	00051540 	call	5154 <_free_r>
    4ab4:	88000c15 	stw	zero,48(r17)
    4ab8:	0005883a 	mov	r2,zero
    4abc:	dfc00417 	ldw	ra,16(sp)
    4ac0:	dcc00317 	ldw	r19,12(sp)
    4ac4:	dc800217 	ldw	r18,8(sp)
    4ac8:	dc400117 	ldw	r17,4(sp)
    4acc:	dc000017 	ldw	r16,0(sp)
    4ad0:	dec00504 	addi	sp,sp,20
    4ad4:	f800283a 	ret
    4ad8:	2c800417 	ldw	r18,16(r5)
    4adc:	903ff626 	beq	r18,zero,4ab8 <__ram_exceptions_end+0xfbfe4864>
    4ae0:	2c000017 	ldw	r16,0(r5)
    4ae4:	108000cc 	andi	r2,r2,3
    4ae8:	2c800015 	stw	r18,0(r5)
    4aec:	84a1c83a 	sub	r16,r16,r18
    4af0:	1000131e 	bne	r2,zero,4b40 <__sflush_r+0x158>
    4af4:	28800517 	ldw	r2,20(r5)
    4af8:	88800215 	stw	r2,8(r17)
    4afc:	04000316 	blt	zero,r16,4b0c <__sflush_r+0x124>
    4b00:	003fed06 	br	4ab8 <__ram_exceptions_end+0xfbfe4864>
    4b04:	90a5883a 	add	r18,r18,r2
    4b08:	043feb0e 	bge	zero,r16,4ab8 <__ram_exceptions_end+0xfbfe4864>
    4b0c:	88800917 	ldw	r2,36(r17)
    4b10:	89400717 	ldw	r5,28(r17)
    4b14:	800f883a 	mov	r7,r16
    4b18:	900d883a 	mov	r6,r18
    4b1c:	9809883a 	mov	r4,r19
    4b20:	103ee83a 	callr	r2
    4b24:	80a1c83a 	sub	r16,r16,r2
    4b28:	00bff616 	blt	zero,r2,4b04 <__ram_exceptions_end+0xfbfe48b0>
    4b2c:	88c0030b 	ldhu	r3,12(r17)
    4b30:	00bfffc4 	movi	r2,-1
    4b34:	18c01014 	ori	r3,r3,64
    4b38:	88c0030d 	sth	r3,12(r17)
    4b3c:	003fdf06 	br	4abc <__ram_exceptions_end+0xfbfe4868>
    4b40:	0005883a 	mov	r2,zero
    4b44:	003fec06 	br	4af8 <__ram_exceptions_end+0xfbfe48a4>
    4b48:	88801415 	stw	r2,80(r17)
    4b4c:	003fd206 	br	4a98 <__ram_exceptions_end+0xfbfe4844>
    4b50:	28c00f17 	ldw	r3,60(r5)
    4b54:	00ffb316 	blt	zero,r3,4a24 <__ram_exceptions_end+0xfbfe47d0>
    4b58:	003fd706 	br	4ab8 <__ram_exceptions_end+0xfbfe4864>
    4b5c:	89400717 	ldw	r5,28(r17)
    4b60:	000d883a 	mov	r6,zero
    4b64:	01c00044 	movi	r7,1
    4b68:	9809883a 	mov	r4,r19
    4b6c:	403ee83a 	callr	r8
    4b70:	100d883a 	mov	r6,r2
    4b74:	00bfffc4 	movi	r2,-1
    4b78:	30801426 	beq	r6,r2,4bcc <__sflush_r+0x1e4>
    4b7c:	8880030b 	ldhu	r2,12(r17)
    4b80:	8a000a17 	ldw	r8,40(r17)
    4b84:	003fae06 	br	4a40 <__ram_exceptions_end+0xfbfe47ec>
    4b88:	98c00017 	ldw	r3,0(r19)
    4b8c:	183fba26 	beq	r3,zero,4a78 <__ram_exceptions_end+0xfbfe4824>
    4b90:	01000744 	movi	r4,29
    4b94:	19000626 	beq	r3,r4,4bb0 <__sflush_r+0x1c8>
    4b98:	01000584 	movi	r4,22
    4b9c:	19000426 	beq	r3,r4,4bb0 <__sflush_r+0x1c8>
    4ba0:	88c0030b 	ldhu	r3,12(r17)
    4ba4:	18c01014 	ori	r3,r3,64
    4ba8:	88c0030d 	sth	r3,12(r17)
    4bac:	003fc306 	br	4abc <__ram_exceptions_end+0xfbfe4868>
    4bb0:	8880030b 	ldhu	r2,12(r17)
    4bb4:	88c00417 	ldw	r3,16(r17)
    4bb8:	88000115 	stw	zero,4(r17)
    4bbc:	10bdffcc 	andi	r2,r2,63487
    4bc0:	8880030d 	sth	r2,12(r17)
    4bc4:	88c00015 	stw	r3,0(r17)
    4bc8:	003fb306 	br	4a98 <__ram_exceptions_end+0xfbfe4844>
    4bcc:	98800017 	ldw	r2,0(r19)
    4bd0:	103fea26 	beq	r2,zero,4b7c <__ram_exceptions_end+0xfbfe4928>
    4bd4:	00c00744 	movi	r3,29
    4bd8:	10c00226 	beq	r2,r3,4be4 <__sflush_r+0x1fc>
    4bdc:	00c00584 	movi	r3,22
    4be0:	10c0031e 	bne	r2,r3,4bf0 <__sflush_r+0x208>
    4be4:	9c000015 	stw	r16,0(r19)
    4be8:	0005883a 	mov	r2,zero
    4bec:	003fb306 	br	4abc <__ram_exceptions_end+0xfbfe4868>
    4bf0:	88c0030b 	ldhu	r3,12(r17)
    4bf4:	3005883a 	mov	r2,r6
    4bf8:	18c01014 	ori	r3,r3,64
    4bfc:	88c0030d 	sth	r3,12(r17)
    4c00:	003fae06 	br	4abc <__ram_exceptions_end+0xfbfe4868>

00004c04 <_fflush_r>:
    4c04:	defffd04 	addi	sp,sp,-12
    4c08:	dc000115 	stw	r16,4(sp)
    4c0c:	dfc00215 	stw	ra,8(sp)
    4c10:	2021883a 	mov	r16,r4
    4c14:	20000226 	beq	r4,zero,4c20 <_fflush_r+0x1c>
    4c18:	20800e17 	ldw	r2,56(r4)
    4c1c:	10000c26 	beq	r2,zero,4c50 <_fflush_r+0x4c>
    4c20:	2880030f 	ldh	r2,12(r5)
    4c24:	1000051e 	bne	r2,zero,4c3c <_fflush_r+0x38>
    4c28:	0005883a 	mov	r2,zero
    4c2c:	dfc00217 	ldw	ra,8(sp)
    4c30:	dc000117 	ldw	r16,4(sp)
    4c34:	dec00304 	addi	sp,sp,12
    4c38:	f800283a 	ret
    4c3c:	8009883a 	mov	r4,r16
    4c40:	dfc00217 	ldw	ra,8(sp)
    4c44:	dc000117 	ldw	r16,4(sp)
    4c48:	dec00304 	addi	sp,sp,12
    4c4c:	00049e81 	jmpi	49e8 <__sflush_r>
    4c50:	d9400015 	stw	r5,0(sp)
    4c54:	0004fe00 	call	4fe0 <__sinit>
    4c58:	d9400017 	ldw	r5,0(sp)
    4c5c:	003ff006 	br	4c20 <__ram_exceptions_end+0xfbfe49cc>

00004c60 <fflush>:
    4c60:	20000526 	beq	r4,zero,4c78 <fflush+0x18>
    4c64:	00800074 	movhi	r2,1
    4c68:	1087b904 	addi	r2,r2,7908
    4c6c:	200b883a 	mov	r5,r4
    4c70:	11000017 	ldw	r4,0(r2)
    4c74:	0004c041 	jmpi	4c04 <_fflush_r>
    4c78:	00800074 	movhi	r2,1
    4c7c:	1087b804 	addi	r2,r2,7904
    4c80:	11000017 	ldw	r4,0(r2)
    4c84:	01400034 	movhi	r5,0
    4c88:	29530104 	addi	r5,r5,19460
    4c8c:	00055281 	jmpi	5528 <_fwalk_reent>

00004c90 <__fp_unlock>:
    4c90:	0005883a 	mov	r2,zero
    4c94:	f800283a 	ret

00004c98 <_cleanup_r>:
    4c98:	01400074 	movhi	r5,1
    4c9c:	2963c604 	addi	r5,r5,-28904
    4ca0:	00055281 	jmpi	5528 <_fwalk_reent>

00004ca4 <__sinit.part.1>:
    4ca4:	defff704 	addi	sp,sp,-36
    4ca8:	00c00034 	movhi	r3,0
    4cac:	dfc00815 	stw	ra,32(sp)
    4cb0:	ddc00715 	stw	r23,28(sp)
    4cb4:	dd800615 	stw	r22,24(sp)
    4cb8:	dd400515 	stw	r21,20(sp)
    4cbc:	dd000415 	stw	r20,16(sp)
    4cc0:	dcc00315 	stw	r19,12(sp)
    4cc4:	dc800215 	stw	r18,8(sp)
    4cc8:	dc400115 	stw	r17,4(sp)
    4ccc:	dc000015 	stw	r16,0(sp)
    4cd0:	18d32604 	addi	r3,r3,19608
    4cd4:	24000117 	ldw	r16,4(r4)
    4cd8:	20c00f15 	stw	r3,60(r4)
    4cdc:	2080bb04 	addi	r2,r4,748
    4ce0:	00c000c4 	movi	r3,3
    4ce4:	20c0b915 	stw	r3,740(r4)
    4ce8:	2080ba15 	stw	r2,744(r4)
    4cec:	2000b815 	stw	zero,736(r4)
    4cf0:	05c00204 	movi	r23,8
    4cf4:	00800104 	movi	r2,4
    4cf8:	2025883a 	mov	r18,r4
    4cfc:	b80d883a 	mov	r6,r23
    4d00:	81001704 	addi	r4,r16,92
    4d04:	000b883a 	mov	r5,zero
    4d08:	80000015 	stw	zero,0(r16)
    4d0c:	80000115 	stw	zero,4(r16)
    4d10:	80000215 	stw	zero,8(r16)
    4d14:	8080030d 	sth	r2,12(r16)
    4d18:	80001915 	stw	zero,100(r16)
    4d1c:	8000038d 	sth	zero,14(r16)
    4d20:	80000415 	stw	zero,16(r16)
    4d24:	80000515 	stw	zero,20(r16)
    4d28:	80000615 	stw	zero,24(r16)
    4d2c:	00062bc0 	call	62bc <memset>
    4d30:	05800034 	movhi	r22,0
    4d34:	94400217 	ldw	r17,8(r18)
    4d38:	05400034 	movhi	r21,0
    4d3c:	05000034 	movhi	r20,0
    4d40:	04c00034 	movhi	r19,0
    4d44:	b59d2a04 	addi	r22,r22,29864
    4d48:	ad5d4104 	addi	r21,r21,29956
    4d4c:	a51d6004 	addi	r20,r20,30080
    4d50:	9cdd7704 	addi	r19,r19,30172
    4d54:	85800815 	stw	r22,32(r16)
    4d58:	85400915 	stw	r21,36(r16)
    4d5c:	85000a15 	stw	r20,40(r16)
    4d60:	84c00b15 	stw	r19,44(r16)
    4d64:	84000715 	stw	r16,28(r16)
    4d68:	00800284 	movi	r2,10
    4d6c:	8880030d 	sth	r2,12(r17)
    4d70:	00800044 	movi	r2,1
    4d74:	b80d883a 	mov	r6,r23
    4d78:	89001704 	addi	r4,r17,92
    4d7c:	000b883a 	mov	r5,zero
    4d80:	88000015 	stw	zero,0(r17)
    4d84:	88000115 	stw	zero,4(r17)
    4d88:	88000215 	stw	zero,8(r17)
    4d8c:	88001915 	stw	zero,100(r17)
    4d90:	8880038d 	sth	r2,14(r17)
    4d94:	88000415 	stw	zero,16(r17)
    4d98:	88000515 	stw	zero,20(r17)
    4d9c:	88000615 	stw	zero,24(r17)
    4da0:	00062bc0 	call	62bc <memset>
    4da4:	94000317 	ldw	r16,12(r18)
    4da8:	00800484 	movi	r2,18
    4dac:	8c400715 	stw	r17,28(r17)
    4db0:	8d800815 	stw	r22,32(r17)
    4db4:	8d400915 	stw	r21,36(r17)
    4db8:	8d000a15 	stw	r20,40(r17)
    4dbc:	8cc00b15 	stw	r19,44(r17)
    4dc0:	8080030d 	sth	r2,12(r16)
    4dc4:	00800084 	movi	r2,2
    4dc8:	80000015 	stw	zero,0(r16)
    4dcc:	80000115 	stw	zero,4(r16)
    4dd0:	80000215 	stw	zero,8(r16)
    4dd4:	80001915 	stw	zero,100(r16)
    4dd8:	8080038d 	sth	r2,14(r16)
    4ddc:	80000415 	stw	zero,16(r16)
    4de0:	80000515 	stw	zero,20(r16)
    4de4:	80000615 	stw	zero,24(r16)
    4de8:	b80d883a 	mov	r6,r23
    4dec:	000b883a 	mov	r5,zero
    4df0:	81001704 	addi	r4,r16,92
    4df4:	00062bc0 	call	62bc <memset>
    4df8:	00800044 	movi	r2,1
    4dfc:	84000715 	stw	r16,28(r16)
    4e00:	85800815 	stw	r22,32(r16)
    4e04:	85400915 	stw	r21,36(r16)
    4e08:	85000a15 	stw	r20,40(r16)
    4e0c:	84c00b15 	stw	r19,44(r16)
    4e10:	90800e15 	stw	r2,56(r18)
    4e14:	dfc00817 	ldw	ra,32(sp)
    4e18:	ddc00717 	ldw	r23,28(sp)
    4e1c:	dd800617 	ldw	r22,24(sp)
    4e20:	dd400517 	ldw	r21,20(sp)
    4e24:	dd000417 	ldw	r20,16(sp)
    4e28:	dcc00317 	ldw	r19,12(sp)
    4e2c:	dc800217 	ldw	r18,8(sp)
    4e30:	dc400117 	ldw	r17,4(sp)
    4e34:	dc000017 	ldw	r16,0(sp)
    4e38:	dec00904 	addi	sp,sp,36
    4e3c:	f800283a 	ret

00004e40 <__fp_lock>:
    4e40:	0005883a 	mov	r2,zero
    4e44:	f800283a 	ret

00004e48 <__sfmoreglue>:
    4e48:	defffc04 	addi	sp,sp,-16
    4e4c:	dc400115 	stw	r17,4(sp)
    4e50:	2c7fffc4 	addi	r17,r5,-1
    4e54:	8c401a24 	muli	r17,r17,104
    4e58:	dc800215 	stw	r18,8(sp)
    4e5c:	2825883a 	mov	r18,r5
    4e60:	89401d04 	addi	r5,r17,116
    4e64:	dc000015 	stw	r16,0(sp)
    4e68:	dfc00315 	stw	ra,12(sp)
    4e6c:	00058840 	call	5884 <_malloc_r>
    4e70:	1021883a 	mov	r16,r2
    4e74:	10000726 	beq	r2,zero,4e94 <__sfmoreglue+0x4c>
    4e78:	11000304 	addi	r4,r2,12
    4e7c:	10000015 	stw	zero,0(r2)
    4e80:	14800115 	stw	r18,4(r2)
    4e84:	11000215 	stw	r4,8(r2)
    4e88:	89801a04 	addi	r6,r17,104
    4e8c:	000b883a 	mov	r5,zero
    4e90:	00062bc0 	call	62bc <memset>
    4e94:	8005883a 	mov	r2,r16
    4e98:	dfc00317 	ldw	ra,12(sp)
    4e9c:	dc800217 	ldw	r18,8(sp)
    4ea0:	dc400117 	ldw	r17,4(sp)
    4ea4:	dc000017 	ldw	r16,0(sp)
    4ea8:	dec00404 	addi	sp,sp,16
    4eac:	f800283a 	ret

00004eb0 <__sfp>:
    4eb0:	defffb04 	addi	sp,sp,-20
    4eb4:	dc000015 	stw	r16,0(sp)
    4eb8:	04000074 	movhi	r16,1
    4ebc:	8407b804 	addi	r16,r16,7904
    4ec0:	dcc00315 	stw	r19,12(sp)
    4ec4:	2027883a 	mov	r19,r4
    4ec8:	81000017 	ldw	r4,0(r16)
    4ecc:	dfc00415 	stw	ra,16(sp)
    4ed0:	dc800215 	stw	r18,8(sp)
    4ed4:	20800e17 	ldw	r2,56(r4)
    4ed8:	dc400115 	stw	r17,4(sp)
    4edc:	1000021e 	bne	r2,zero,4ee8 <__sfp+0x38>
    4ee0:	0004ca40 	call	4ca4 <__sinit.part.1>
    4ee4:	81000017 	ldw	r4,0(r16)
    4ee8:	2480b804 	addi	r18,r4,736
    4eec:	047fffc4 	movi	r17,-1
    4ef0:	91000117 	ldw	r4,4(r18)
    4ef4:	94000217 	ldw	r16,8(r18)
    4ef8:	213fffc4 	addi	r4,r4,-1
    4efc:	20000a16 	blt	r4,zero,4f28 <__sfp+0x78>
    4f00:	8080030f 	ldh	r2,12(r16)
    4f04:	10000c26 	beq	r2,zero,4f38 <__sfp+0x88>
    4f08:	80c01d04 	addi	r3,r16,116
    4f0c:	00000206 	br	4f18 <__sfp+0x68>
    4f10:	18bfe60f 	ldh	r2,-104(r3)
    4f14:	10000826 	beq	r2,zero,4f38 <__sfp+0x88>
    4f18:	213fffc4 	addi	r4,r4,-1
    4f1c:	1c3ffd04 	addi	r16,r3,-12
    4f20:	18c01a04 	addi	r3,r3,104
    4f24:	247ffa1e 	bne	r4,r17,4f10 <__ram_exceptions_end+0xfbfe4cbc>
    4f28:	90800017 	ldw	r2,0(r18)
    4f2c:	10001d26 	beq	r2,zero,4fa4 <__sfp+0xf4>
    4f30:	1025883a 	mov	r18,r2
    4f34:	003fee06 	br	4ef0 <__ram_exceptions_end+0xfbfe4c9c>
    4f38:	00bfffc4 	movi	r2,-1
    4f3c:	8080038d 	sth	r2,14(r16)
    4f40:	00800044 	movi	r2,1
    4f44:	8080030d 	sth	r2,12(r16)
    4f48:	80001915 	stw	zero,100(r16)
    4f4c:	80000015 	stw	zero,0(r16)
    4f50:	80000215 	stw	zero,8(r16)
    4f54:	80000115 	stw	zero,4(r16)
    4f58:	80000415 	stw	zero,16(r16)
    4f5c:	80000515 	stw	zero,20(r16)
    4f60:	80000615 	stw	zero,24(r16)
    4f64:	01800204 	movi	r6,8
    4f68:	000b883a 	mov	r5,zero
    4f6c:	81001704 	addi	r4,r16,92
    4f70:	00062bc0 	call	62bc <memset>
    4f74:	8005883a 	mov	r2,r16
    4f78:	80000c15 	stw	zero,48(r16)
    4f7c:	80000d15 	stw	zero,52(r16)
    4f80:	80001115 	stw	zero,68(r16)
    4f84:	80001215 	stw	zero,72(r16)
    4f88:	dfc00417 	ldw	ra,16(sp)
    4f8c:	dcc00317 	ldw	r19,12(sp)
    4f90:	dc800217 	ldw	r18,8(sp)
    4f94:	dc400117 	ldw	r17,4(sp)
    4f98:	dc000017 	ldw	r16,0(sp)
    4f9c:	dec00504 	addi	sp,sp,20
    4fa0:	f800283a 	ret
    4fa4:	01400104 	movi	r5,4
    4fa8:	9809883a 	mov	r4,r19
    4fac:	0004e480 	call	4e48 <__sfmoreglue>
    4fb0:	90800015 	stw	r2,0(r18)
    4fb4:	103fde1e 	bne	r2,zero,4f30 <__ram_exceptions_end+0xfbfe4cdc>
    4fb8:	00800304 	movi	r2,12
    4fbc:	98800015 	stw	r2,0(r19)
    4fc0:	0005883a 	mov	r2,zero
    4fc4:	003ff006 	br	4f88 <__ram_exceptions_end+0xfbfe4d34>

00004fc8 <_cleanup>:
    4fc8:	00800074 	movhi	r2,1
    4fcc:	1087b804 	addi	r2,r2,7904
    4fd0:	11000017 	ldw	r4,0(r2)
    4fd4:	01400074 	movhi	r5,1
    4fd8:	2963c604 	addi	r5,r5,-28904
    4fdc:	00055281 	jmpi	5528 <_fwalk_reent>

00004fe0 <__sinit>:
    4fe0:	20800e17 	ldw	r2,56(r4)
    4fe4:	10000126 	beq	r2,zero,4fec <__sinit+0xc>
    4fe8:	f800283a 	ret
    4fec:	0004ca41 	jmpi	4ca4 <__sinit.part.1>

00004ff0 <__sfp_lock_acquire>:
    4ff0:	f800283a 	ret

00004ff4 <__sfp_lock_release>:
    4ff4:	f800283a 	ret

00004ff8 <__sinit_lock_acquire>:
    4ff8:	f800283a 	ret

00004ffc <__sinit_lock_release>:
    4ffc:	f800283a 	ret

00005000 <__fp_lock_all>:
    5000:	00800074 	movhi	r2,1
    5004:	1087b904 	addi	r2,r2,7908
    5008:	11000017 	ldw	r4,0(r2)
    500c:	01400034 	movhi	r5,0
    5010:	29539004 	addi	r5,r5,20032
    5014:	00054641 	jmpi	5464 <_fwalk>

00005018 <__fp_unlock_all>:
    5018:	00800074 	movhi	r2,1
    501c:	1087b904 	addi	r2,r2,7908
    5020:	11000017 	ldw	r4,0(r2)
    5024:	01400034 	movhi	r5,0
    5028:	29532404 	addi	r5,r5,19600
    502c:	00054641 	jmpi	5464 <_fwalk>

00005030 <_malloc_trim_r>:
    5030:	defffb04 	addi	sp,sp,-20
    5034:	dcc00315 	stw	r19,12(sp)
    5038:	04c00074 	movhi	r19,1
    503c:	dc800215 	stw	r18,8(sp)
    5040:	dc400115 	stw	r17,4(sp)
    5044:	dc000015 	stw	r16,0(sp)
    5048:	dfc00415 	stw	ra,16(sp)
    504c:	2821883a 	mov	r16,r5
    5050:	9cc23404 	addi	r19,r19,2256
    5054:	2025883a 	mov	r18,r4
    5058:	000db840 	call	db84 <__malloc_lock>
    505c:	98800217 	ldw	r2,8(r19)
    5060:	14400117 	ldw	r17,4(r2)
    5064:	00bfff04 	movi	r2,-4
    5068:	88a2703a 	and	r17,r17,r2
    506c:	8c21c83a 	sub	r16,r17,r16
    5070:	8403fbc4 	addi	r16,r16,4079
    5074:	8020d33a 	srli	r16,r16,12
    5078:	0083ffc4 	movi	r2,4095
    507c:	843fffc4 	addi	r16,r16,-1
    5080:	8020933a 	slli	r16,r16,12
    5084:	1400060e 	bge	r2,r16,50a0 <_malloc_trim_r+0x70>
    5088:	000b883a 	mov	r5,zero
    508c:	9009883a 	mov	r4,r18
    5090:	00074540 	call	7454 <_sbrk_r>
    5094:	98c00217 	ldw	r3,8(r19)
    5098:	1c47883a 	add	r3,r3,r17
    509c:	10c00a26 	beq	r2,r3,50c8 <_malloc_trim_r+0x98>
    50a0:	9009883a 	mov	r4,r18
    50a4:	000dba80 	call	dba8 <__malloc_unlock>
    50a8:	0005883a 	mov	r2,zero
    50ac:	dfc00417 	ldw	ra,16(sp)
    50b0:	dcc00317 	ldw	r19,12(sp)
    50b4:	dc800217 	ldw	r18,8(sp)
    50b8:	dc400117 	ldw	r17,4(sp)
    50bc:	dc000017 	ldw	r16,0(sp)
    50c0:	dec00504 	addi	sp,sp,20
    50c4:	f800283a 	ret
    50c8:	040bc83a 	sub	r5,zero,r16
    50cc:	9009883a 	mov	r4,r18
    50d0:	00074540 	call	7454 <_sbrk_r>
    50d4:	00ffffc4 	movi	r3,-1
    50d8:	10c00d26 	beq	r2,r3,5110 <_malloc_trim_r+0xe0>
    50dc:	00c00074 	movhi	r3,1
    50e0:	18ce9404 	addi	r3,r3,14928
    50e4:	18800017 	ldw	r2,0(r3)
    50e8:	99000217 	ldw	r4,8(r19)
    50ec:	8c23c83a 	sub	r17,r17,r16
    50f0:	8c400054 	ori	r17,r17,1
    50f4:	1421c83a 	sub	r16,r2,r16
    50f8:	24400115 	stw	r17,4(r4)
    50fc:	9009883a 	mov	r4,r18
    5100:	1c000015 	stw	r16,0(r3)
    5104:	000dba80 	call	dba8 <__malloc_unlock>
    5108:	00800044 	movi	r2,1
    510c:	003fe706 	br	50ac <__ram_exceptions_end+0xfbfe4e58>
    5110:	000b883a 	mov	r5,zero
    5114:	9009883a 	mov	r4,r18
    5118:	00074540 	call	7454 <_sbrk_r>
    511c:	99000217 	ldw	r4,8(r19)
    5120:	014003c4 	movi	r5,15
    5124:	1107c83a 	sub	r3,r2,r4
    5128:	28ffdd0e 	bge	r5,r3,50a0 <__ram_exceptions_end+0xfbfe4e4c>
    512c:	01400074 	movhi	r5,1
    5130:	2947bb04 	addi	r5,r5,7916
    5134:	29400017 	ldw	r5,0(r5)
    5138:	18c00054 	ori	r3,r3,1
    513c:	20c00115 	stw	r3,4(r4)
    5140:	00c00074 	movhi	r3,1
    5144:	1145c83a 	sub	r2,r2,r5
    5148:	18ce9404 	addi	r3,r3,14928
    514c:	18800015 	stw	r2,0(r3)
    5150:	003fd306 	br	50a0 <__ram_exceptions_end+0xfbfe4e4c>

00005154 <_free_r>:
    5154:	28004126 	beq	r5,zero,525c <_free_r+0x108>
    5158:	defffd04 	addi	sp,sp,-12
    515c:	dc400115 	stw	r17,4(sp)
    5160:	dc000015 	stw	r16,0(sp)
    5164:	2023883a 	mov	r17,r4
    5168:	2821883a 	mov	r16,r5
    516c:	dfc00215 	stw	ra,8(sp)
    5170:	000db840 	call	db84 <__malloc_lock>
    5174:	81ffff17 	ldw	r7,-4(r16)
    5178:	00bfff84 	movi	r2,-2
    517c:	01000074 	movhi	r4,1
    5180:	81bffe04 	addi	r6,r16,-8
    5184:	3884703a 	and	r2,r7,r2
    5188:	21023404 	addi	r4,r4,2256
    518c:	308b883a 	add	r5,r6,r2
    5190:	2a400117 	ldw	r9,4(r5)
    5194:	22000217 	ldw	r8,8(r4)
    5198:	00ffff04 	movi	r3,-4
    519c:	48c6703a 	and	r3,r9,r3
    51a0:	2a005726 	beq	r5,r8,5300 <_free_r+0x1ac>
    51a4:	28c00115 	stw	r3,4(r5)
    51a8:	39c0004c 	andi	r7,r7,1
    51ac:	3800091e 	bne	r7,zero,51d4 <_free_r+0x80>
    51b0:	823ffe17 	ldw	r8,-8(r16)
    51b4:	22400204 	addi	r9,r4,8
    51b8:	320dc83a 	sub	r6,r6,r8
    51bc:	31c00217 	ldw	r7,8(r6)
    51c0:	1205883a 	add	r2,r2,r8
    51c4:	3a406526 	beq	r7,r9,535c <_free_r+0x208>
    51c8:	32000317 	ldw	r8,12(r6)
    51cc:	3a000315 	stw	r8,12(r7)
    51d0:	41c00215 	stw	r7,8(r8)
    51d4:	28cf883a 	add	r7,r5,r3
    51d8:	39c00117 	ldw	r7,4(r7)
    51dc:	39c0004c 	andi	r7,r7,1
    51e0:	38003a26 	beq	r7,zero,52cc <_free_r+0x178>
    51e4:	10c00054 	ori	r3,r2,1
    51e8:	30c00115 	stw	r3,4(r6)
    51ec:	3087883a 	add	r3,r6,r2
    51f0:	18800015 	stw	r2,0(r3)
    51f4:	00c07fc4 	movi	r3,511
    51f8:	18801936 	bltu	r3,r2,5260 <_free_r+0x10c>
    51fc:	1004d0fa 	srli	r2,r2,3
    5200:	01c00044 	movi	r7,1
    5204:	21400117 	ldw	r5,4(r4)
    5208:	10c00044 	addi	r3,r2,1
    520c:	18c7883a 	add	r3,r3,r3
    5210:	1005d0ba 	srai	r2,r2,2
    5214:	18c7883a 	add	r3,r3,r3
    5218:	18c7883a 	add	r3,r3,r3
    521c:	1907883a 	add	r3,r3,r4
    5220:	3884983a 	sll	r2,r7,r2
    5224:	19c00017 	ldw	r7,0(r3)
    5228:	1a3ffe04 	addi	r8,r3,-8
    522c:	1144b03a 	or	r2,r2,r5
    5230:	32000315 	stw	r8,12(r6)
    5234:	31c00215 	stw	r7,8(r6)
    5238:	20800115 	stw	r2,4(r4)
    523c:	19800015 	stw	r6,0(r3)
    5240:	39800315 	stw	r6,12(r7)
    5244:	8809883a 	mov	r4,r17
    5248:	dfc00217 	ldw	ra,8(sp)
    524c:	dc400117 	ldw	r17,4(sp)
    5250:	dc000017 	ldw	r16,0(sp)
    5254:	dec00304 	addi	sp,sp,12
    5258:	000dba81 	jmpi	dba8 <__malloc_unlock>
    525c:	f800283a 	ret
    5260:	100ad27a 	srli	r5,r2,9
    5264:	00c00104 	movi	r3,4
    5268:	19404a36 	bltu	r3,r5,5394 <_free_r+0x240>
    526c:	100ad1ba 	srli	r5,r2,6
    5270:	28c00e44 	addi	r3,r5,57
    5274:	18c7883a 	add	r3,r3,r3
    5278:	29400e04 	addi	r5,r5,56
    527c:	18c7883a 	add	r3,r3,r3
    5280:	18c7883a 	add	r3,r3,r3
    5284:	1909883a 	add	r4,r3,r4
    5288:	20c00017 	ldw	r3,0(r4)
    528c:	01c00074 	movhi	r7,1
    5290:	213ffe04 	addi	r4,r4,-8
    5294:	39c23404 	addi	r7,r7,2256
    5298:	20c04426 	beq	r4,r3,53ac <_free_r+0x258>
    529c:	01ffff04 	movi	r7,-4
    52a0:	19400117 	ldw	r5,4(r3)
    52a4:	29ca703a 	and	r5,r5,r7
    52a8:	1140022e 	bgeu	r2,r5,52b4 <_free_r+0x160>
    52ac:	18c00217 	ldw	r3,8(r3)
    52b0:	20fffb1e 	bne	r4,r3,52a0 <__ram_exceptions_end+0xfbfe504c>
    52b4:	19000317 	ldw	r4,12(r3)
    52b8:	31000315 	stw	r4,12(r6)
    52bc:	30c00215 	stw	r3,8(r6)
    52c0:	21800215 	stw	r6,8(r4)
    52c4:	19800315 	stw	r6,12(r3)
    52c8:	003fde06 	br	5244 <__ram_exceptions_end+0xfbfe4ff0>
    52cc:	29c00217 	ldw	r7,8(r5)
    52d0:	10c5883a 	add	r2,r2,r3
    52d4:	00c00074 	movhi	r3,1
    52d8:	18c23604 	addi	r3,r3,2264
    52dc:	38c03b26 	beq	r7,r3,53cc <_free_r+0x278>
    52e0:	2a000317 	ldw	r8,12(r5)
    52e4:	11400054 	ori	r5,r2,1
    52e8:	3087883a 	add	r3,r6,r2
    52ec:	3a000315 	stw	r8,12(r7)
    52f0:	41c00215 	stw	r7,8(r8)
    52f4:	31400115 	stw	r5,4(r6)
    52f8:	18800015 	stw	r2,0(r3)
    52fc:	003fbd06 	br	51f4 <__ram_exceptions_end+0xfbfe4fa0>
    5300:	39c0004c 	andi	r7,r7,1
    5304:	10c5883a 	add	r2,r2,r3
    5308:	3800071e 	bne	r7,zero,5328 <_free_r+0x1d4>
    530c:	81fffe17 	ldw	r7,-8(r16)
    5310:	31cdc83a 	sub	r6,r6,r7
    5314:	30c00317 	ldw	r3,12(r6)
    5318:	31400217 	ldw	r5,8(r6)
    531c:	11c5883a 	add	r2,r2,r7
    5320:	28c00315 	stw	r3,12(r5)
    5324:	19400215 	stw	r5,8(r3)
    5328:	10c00054 	ori	r3,r2,1
    532c:	30c00115 	stw	r3,4(r6)
    5330:	00c00074 	movhi	r3,1
    5334:	18c7bc04 	addi	r3,r3,7920
    5338:	18c00017 	ldw	r3,0(r3)
    533c:	21800215 	stw	r6,8(r4)
    5340:	10ffc036 	bltu	r2,r3,5244 <__ram_exceptions_end+0xfbfe4ff0>
    5344:	00800074 	movhi	r2,1
    5348:	108e8b04 	addi	r2,r2,14892
    534c:	11400017 	ldw	r5,0(r2)
    5350:	8809883a 	mov	r4,r17
    5354:	00050300 	call	5030 <_malloc_trim_r>
    5358:	003fba06 	br	5244 <__ram_exceptions_end+0xfbfe4ff0>
    535c:	28c9883a 	add	r4,r5,r3
    5360:	21000117 	ldw	r4,4(r4)
    5364:	2100004c 	andi	r4,r4,1
    5368:	2000391e 	bne	r4,zero,5450 <_free_r+0x2fc>
    536c:	29c00217 	ldw	r7,8(r5)
    5370:	29000317 	ldw	r4,12(r5)
    5374:	1885883a 	add	r2,r3,r2
    5378:	10c00054 	ori	r3,r2,1
    537c:	39000315 	stw	r4,12(r7)
    5380:	21c00215 	stw	r7,8(r4)
    5384:	30c00115 	stw	r3,4(r6)
    5388:	308d883a 	add	r6,r6,r2
    538c:	30800015 	stw	r2,0(r6)
    5390:	003fac06 	br	5244 <__ram_exceptions_end+0xfbfe4ff0>
    5394:	00c00504 	movi	r3,20
    5398:	19401536 	bltu	r3,r5,53f0 <_free_r+0x29c>
    539c:	28c01704 	addi	r3,r5,92
    53a0:	18c7883a 	add	r3,r3,r3
    53a4:	294016c4 	addi	r5,r5,91
    53a8:	003fb406 	br	527c <__ram_exceptions_end+0xfbfe5028>
    53ac:	280bd0ba 	srai	r5,r5,2
    53b0:	00c00044 	movi	r3,1
    53b4:	38800117 	ldw	r2,4(r7)
    53b8:	194a983a 	sll	r5,r3,r5
    53bc:	2007883a 	mov	r3,r4
    53c0:	2884b03a 	or	r2,r5,r2
    53c4:	38800115 	stw	r2,4(r7)
    53c8:	003fbb06 	br	52b8 <__ram_exceptions_end+0xfbfe5064>
    53cc:	21800515 	stw	r6,20(r4)
    53d0:	21800415 	stw	r6,16(r4)
    53d4:	10c00054 	ori	r3,r2,1
    53d8:	31c00315 	stw	r7,12(r6)
    53dc:	31c00215 	stw	r7,8(r6)
    53e0:	30c00115 	stw	r3,4(r6)
    53e4:	308d883a 	add	r6,r6,r2
    53e8:	30800015 	stw	r2,0(r6)
    53ec:	003f9506 	br	5244 <__ram_exceptions_end+0xfbfe4ff0>
    53f0:	00c01504 	movi	r3,84
    53f4:	19400536 	bltu	r3,r5,540c <_free_r+0x2b8>
    53f8:	100ad33a 	srli	r5,r2,12
    53fc:	28c01bc4 	addi	r3,r5,111
    5400:	18c7883a 	add	r3,r3,r3
    5404:	29401b84 	addi	r5,r5,110
    5408:	003f9c06 	br	527c <__ram_exceptions_end+0xfbfe5028>
    540c:	00c05504 	movi	r3,340
    5410:	19400536 	bltu	r3,r5,5428 <_free_r+0x2d4>
    5414:	100ad3fa 	srli	r5,r2,15
    5418:	28c01e04 	addi	r3,r5,120
    541c:	18c7883a 	add	r3,r3,r3
    5420:	29401dc4 	addi	r5,r5,119
    5424:	003f9506 	br	527c <__ram_exceptions_end+0xfbfe5028>
    5428:	00c15504 	movi	r3,1364
    542c:	19400536 	bltu	r3,r5,5444 <_free_r+0x2f0>
    5430:	100ad4ba 	srli	r5,r2,18
    5434:	28c01f44 	addi	r3,r5,125
    5438:	18c7883a 	add	r3,r3,r3
    543c:	29401f04 	addi	r5,r5,124
    5440:	003f8e06 	br	527c <__ram_exceptions_end+0xfbfe5028>
    5444:	00c03f84 	movi	r3,254
    5448:	01401f84 	movi	r5,126
    544c:	003f8b06 	br	527c <__ram_exceptions_end+0xfbfe5028>
    5450:	10c00054 	ori	r3,r2,1
    5454:	30c00115 	stw	r3,4(r6)
    5458:	308d883a 	add	r6,r6,r2
    545c:	30800015 	stw	r2,0(r6)
    5460:	003f7806 	br	5244 <__ram_exceptions_end+0xfbfe4ff0>

00005464 <_fwalk>:
    5464:	defff704 	addi	sp,sp,-36
    5468:	dd000415 	stw	r20,16(sp)
    546c:	dfc00815 	stw	ra,32(sp)
    5470:	ddc00715 	stw	r23,28(sp)
    5474:	dd800615 	stw	r22,24(sp)
    5478:	dd400515 	stw	r21,20(sp)
    547c:	dcc00315 	stw	r19,12(sp)
    5480:	dc800215 	stw	r18,8(sp)
    5484:	dc400115 	stw	r17,4(sp)
    5488:	dc000015 	stw	r16,0(sp)
    548c:	2500b804 	addi	r20,r4,736
    5490:	a0002326 	beq	r20,zero,5520 <_fwalk+0xbc>
    5494:	282b883a 	mov	r21,r5
    5498:	002f883a 	mov	r23,zero
    549c:	05800044 	movi	r22,1
    54a0:	04ffffc4 	movi	r19,-1
    54a4:	a4400117 	ldw	r17,4(r20)
    54a8:	a4800217 	ldw	r18,8(r20)
    54ac:	8c7fffc4 	addi	r17,r17,-1
    54b0:	88000d16 	blt	r17,zero,54e8 <_fwalk+0x84>
    54b4:	94000304 	addi	r16,r18,12
    54b8:	94800384 	addi	r18,r18,14
    54bc:	8080000b 	ldhu	r2,0(r16)
    54c0:	8c7fffc4 	addi	r17,r17,-1
    54c4:	813ffd04 	addi	r4,r16,-12
    54c8:	b080042e 	bgeu	r22,r2,54dc <_fwalk+0x78>
    54cc:	9080000f 	ldh	r2,0(r18)
    54d0:	14c00226 	beq	r2,r19,54dc <_fwalk+0x78>
    54d4:	a83ee83a 	callr	r21
    54d8:	b8aeb03a 	or	r23,r23,r2
    54dc:	84001a04 	addi	r16,r16,104
    54e0:	94801a04 	addi	r18,r18,104
    54e4:	8cfff51e 	bne	r17,r19,54bc <__ram_exceptions_end+0xfbfe5268>
    54e8:	a5000017 	ldw	r20,0(r20)
    54ec:	a03fed1e 	bne	r20,zero,54a4 <__ram_exceptions_end+0xfbfe5250>
    54f0:	b805883a 	mov	r2,r23
    54f4:	dfc00817 	ldw	ra,32(sp)
    54f8:	ddc00717 	ldw	r23,28(sp)
    54fc:	dd800617 	ldw	r22,24(sp)
    5500:	dd400517 	ldw	r21,20(sp)
    5504:	dd000417 	ldw	r20,16(sp)
    5508:	dcc00317 	ldw	r19,12(sp)
    550c:	dc800217 	ldw	r18,8(sp)
    5510:	dc400117 	ldw	r17,4(sp)
    5514:	dc000017 	ldw	r16,0(sp)
    5518:	dec00904 	addi	sp,sp,36
    551c:	f800283a 	ret
    5520:	002f883a 	mov	r23,zero
    5524:	003ff206 	br	54f0 <__ram_exceptions_end+0xfbfe529c>

00005528 <_fwalk_reent>:
    5528:	defff704 	addi	sp,sp,-36
    552c:	dd000415 	stw	r20,16(sp)
    5530:	dfc00815 	stw	ra,32(sp)
    5534:	ddc00715 	stw	r23,28(sp)
    5538:	dd800615 	stw	r22,24(sp)
    553c:	dd400515 	stw	r21,20(sp)
    5540:	dcc00315 	stw	r19,12(sp)
    5544:	dc800215 	stw	r18,8(sp)
    5548:	dc400115 	stw	r17,4(sp)
    554c:	dc000015 	stw	r16,0(sp)
    5550:	2500b804 	addi	r20,r4,736
    5554:	a0002326 	beq	r20,zero,55e4 <_fwalk_reent+0xbc>
    5558:	282b883a 	mov	r21,r5
    555c:	2027883a 	mov	r19,r4
    5560:	002f883a 	mov	r23,zero
    5564:	05800044 	movi	r22,1
    5568:	04bfffc4 	movi	r18,-1
    556c:	a4400117 	ldw	r17,4(r20)
    5570:	a4000217 	ldw	r16,8(r20)
    5574:	8c7fffc4 	addi	r17,r17,-1
    5578:	88000c16 	blt	r17,zero,55ac <_fwalk_reent+0x84>
    557c:	84000304 	addi	r16,r16,12
    5580:	8080000b 	ldhu	r2,0(r16)
    5584:	8c7fffc4 	addi	r17,r17,-1
    5588:	817ffd04 	addi	r5,r16,-12
    558c:	b080052e 	bgeu	r22,r2,55a4 <_fwalk_reent+0x7c>
    5590:	8080008f 	ldh	r2,2(r16)
    5594:	9809883a 	mov	r4,r19
    5598:	14800226 	beq	r2,r18,55a4 <_fwalk_reent+0x7c>
    559c:	a83ee83a 	callr	r21
    55a0:	b8aeb03a 	or	r23,r23,r2
    55a4:	84001a04 	addi	r16,r16,104
    55a8:	8cbff51e 	bne	r17,r18,5580 <__ram_exceptions_end+0xfbfe532c>
    55ac:	a5000017 	ldw	r20,0(r20)
    55b0:	a03fee1e 	bne	r20,zero,556c <__ram_exceptions_end+0xfbfe5318>
    55b4:	b805883a 	mov	r2,r23
    55b8:	dfc00817 	ldw	ra,32(sp)
    55bc:	ddc00717 	ldw	r23,28(sp)
    55c0:	dd800617 	ldw	r22,24(sp)
    55c4:	dd400517 	ldw	r21,20(sp)
    55c8:	dd000417 	ldw	r20,16(sp)
    55cc:	dcc00317 	ldw	r19,12(sp)
    55d0:	dc800217 	ldw	r18,8(sp)
    55d4:	dc400117 	ldw	r17,4(sp)
    55d8:	dc000017 	ldw	r16,0(sp)
    55dc:	dec00904 	addi	sp,sp,36
    55e0:	f800283a 	ret
    55e4:	002f883a 	mov	r23,zero
    55e8:	003ff206 	br	55b4 <__ram_exceptions_end+0xfbfe5360>

000055ec <_setlocale_r>:
    55ec:	30001b26 	beq	r6,zero,565c <_setlocale_r+0x70>
    55f0:	01400074 	movhi	r5,1
    55f4:	defffe04 	addi	sp,sp,-8
    55f8:	29406c04 	addi	r5,r5,432
    55fc:	3009883a 	mov	r4,r6
    5600:	dc000015 	stw	r16,0(sp)
    5604:	dfc00115 	stw	ra,4(sp)
    5608:	3021883a 	mov	r16,r6
    560c:	00075e40 	call	75e4 <strcmp>
    5610:	1000061e 	bne	r2,zero,562c <_setlocale_r+0x40>
    5614:	00800074 	movhi	r2,1
    5618:	10806b04 	addi	r2,r2,428
    561c:	dfc00117 	ldw	ra,4(sp)
    5620:	dc000017 	ldw	r16,0(sp)
    5624:	dec00204 	addi	sp,sp,8
    5628:	f800283a 	ret
    562c:	01400074 	movhi	r5,1
    5630:	29406b04 	addi	r5,r5,428
    5634:	8009883a 	mov	r4,r16
    5638:	00075e40 	call	75e4 <strcmp>
    563c:	103ff526 	beq	r2,zero,5614 <__ram_exceptions_end+0xfbfe53c0>
    5640:	01400074 	movhi	r5,1
    5644:	29405604 	addi	r5,r5,344
    5648:	8009883a 	mov	r4,r16
    564c:	00075e40 	call	75e4 <strcmp>
    5650:	103ff026 	beq	r2,zero,5614 <__ram_exceptions_end+0xfbfe53c0>
    5654:	0005883a 	mov	r2,zero
    5658:	003ff006 	br	561c <__ram_exceptions_end+0xfbfe53c8>
    565c:	00800074 	movhi	r2,1
    5660:	10806b04 	addi	r2,r2,428
    5664:	f800283a 	ret

00005668 <__locale_charset>:
    5668:	00800074 	movhi	r2,1
    566c:	10821e04 	addi	r2,r2,2168
    5670:	f800283a 	ret

00005674 <__locale_mb_cur_max>:
    5674:	00800074 	movhi	r2,1
    5678:	1087ba04 	addi	r2,r2,7912
    567c:	10800017 	ldw	r2,0(r2)
    5680:	f800283a 	ret

00005684 <__locale_msgcharset>:
    5684:	00800074 	movhi	r2,1
    5688:	10821604 	addi	r2,r2,2136
    568c:	f800283a 	ret

00005690 <__locale_cjk_lang>:
    5690:	0005883a 	mov	r2,zero
    5694:	f800283a 	ret

00005698 <_localeconv_r>:
    5698:	00800074 	movhi	r2,1
    569c:	10822604 	addi	r2,r2,2200
    56a0:	f800283a 	ret

000056a4 <setlocale>:
    56a4:	00800074 	movhi	r2,1
    56a8:	1087b904 	addi	r2,r2,7908
    56ac:	280d883a 	mov	r6,r5
    56b0:	200b883a 	mov	r5,r4
    56b4:	11000017 	ldw	r4,0(r2)
    56b8:	00055ec1 	jmpi	55ec <_setlocale_r>

000056bc <localeconv>:
    56bc:	00800074 	movhi	r2,1
    56c0:	10822604 	addi	r2,r2,2200
    56c4:	f800283a 	ret

000056c8 <__smakebuf_r>:
    56c8:	2880030b 	ldhu	r2,12(r5)
    56cc:	10c0008c 	andi	r3,r2,2
    56d0:	1800411e 	bne	r3,zero,57d8 <__smakebuf_r+0x110>
    56d4:	deffec04 	addi	sp,sp,-80
    56d8:	dc000f15 	stw	r16,60(sp)
    56dc:	2821883a 	mov	r16,r5
    56e0:	2940038f 	ldh	r5,14(r5)
    56e4:	dc401015 	stw	r17,64(sp)
    56e8:	dfc01315 	stw	ra,76(sp)
    56ec:	dcc01215 	stw	r19,72(sp)
    56f0:	dc801115 	stw	r18,68(sp)
    56f4:	2023883a 	mov	r17,r4
    56f8:	28001c16 	blt	r5,zero,576c <__smakebuf_r+0xa4>
    56fc:	d80d883a 	mov	r6,sp
    5700:	00092240 	call	9224 <_fstat_r>
    5704:	10001816 	blt	r2,zero,5768 <__smakebuf_r+0xa0>
    5708:	d8800117 	ldw	r2,4(sp)
    570c:	00e00014 	movui	r3,32768
    5710:	10bc000c 	andi	r2,r2,61440
    5714:	14c80020 	cmpeqi	r19,r2,8192
    5718:	10c03726 	beq	r2,r3,57f8 <__smakebuf_r+0x130>
    571c:	80c0030b 	ldhu	r3,12(r16)
    5720:	18c20014 	ori	r3,r3,2048
    5724:	80c0030d 	sth	r3,12(r16)
    5728:	00c80004 	movi	r3,8192
    572c:	10c0521e 	bne	r2,r3,5878 <__smakebuf_r+0x1b0>
    5730:	8140038f 	ldh	r5,14(r16)
    5734:	8809883a 	mov	r4,r17
    5738:	000973c0 	call	973c <_isatty_r>
    573c:	10004c26 	beq	r2,zero,5870 <__smakebuf_r+0x1a8>
    5740:	8080030b 	ldhu	r2,12(r16)
    5744:	80c010c4 	addi	r3,r16,67
    5748:	80c00015 	stw	r3,0(r16)
    574c:	10800054 	ori	r2,r2,1
    5750:	8080030d 	sth	r2,12(r16)
    5754:	00800044 	movi	r2,1
    5758:	80c00415 	stw	r3,16(r16)
    575c:	80800515 	stw	r2,20(r16)
    5760:	04810004 	movi	r18,1024
    5764:	00000706 	br	5784 <__smakebuf_r+0xbc>
    5768:	8080030b 	ldhu	r2,12(r16)
    576c:	10c0200c 	andi	r3,r2,128
    5770:	18001f1e 	bne	r3,zero,57f0 <__smakebuf_r+0x128>
    5774:	04810004 	movi	r18,1024
    5778:	10820014 	ori	r2,r2,2048
    577c:	8080030d 	sth	r2,12(r16)
    5780:	0027883a 	mov	r19,zero
    5784:	900b883a 	mov	r5,r18
    5788:	8809883a 	mov	r4,r17
    578c:	00058840 	call	5884 <_malloc_r>
    5790:	10002c26 	beq	r2,zero,5844 <__smakebuf_r+0x17c>
    5794:	80c0030b 	ldhu	r3,12(r16)
    5798:	01000034 	movhi	r4,0
    579c:	21132604 	addi	r4,r4,19608
    57a0:	89000f15 	stw	r4,60(r17)
    57a4:	18c02014 	ori	r3,r3,128
    57a8:	80c0030d 	sth	r3,12(r16)
    57ac:	80800015 	stw	r2,0(r16)
    57b0:	80800415 	stw	r2,16(r16)
    57b4:	84800515 	stw	r18,20(r16)
    57b8:	98001a1e 	bne	r19,zero,5824 <__smakebuf_r+0x15c>
    57bc:	dfc01317 	ldw	ra,76(sp)
    57c0:	dcc01217 	ldw	r19,72(sp)
    57c4:	dc801117 	ldw	r18,68(sp)
    57c8:	dc401017 	ldw	r17,64(sp)
    57cc:	dc000f17 	ldw	r16,60(sp)
    57d0:	dec01404 	addi	sp,sp,80
    57d4:	f800283a 	ret
    57d8:	288010c4 	addi	r2,r5,67
    57dc:	28800015 	stw	r2,0(r5)
    57e0:	28800415 	stw	r2,16(r5)
    57e4:	00800044 	movi	r2,1
    57e8:	28800515 	stw	r2,20(r5)
    57ec:	f800283a 	ret
    57f0:	04801004 	movi	r18,64
    57f4:	003fe006 	br	5778 <__ram_exceptions_end+0xfbfe5524>
    57f8:	81000a17 	ldw	r4,40(r16)
    57fc:	00c00034 	movhi	r3,0
    5800:	18dd6004 	addi	r3,r3,30080
    5804:	20ffc51e 	bne	r4,r3,571c <__ram_exceptions_end+0xfbfe54c8>
    5808:	8080030b 	ldhu	r2,12(r16)
    580c:	04810004 	movi	r18,1024
    5810:	84801315 	stw	r18,76(r16)
    5814:	1484b03a 	or	r2,r2,r18
    5818:	8080030d 	sth	r2,12(r16)
    581c:	0027883a 	mov	r19,zero
    5820:	003fd806 	br	5784 <__ram_exceptions_end+0xfbfe5530>
    5824:	8140038f 	ldh	r5,14(r16)
    5828:	8809883a 	mov	r4,r17
    582c:	000973c0 	call	973c <_isatty_r>
    5830:	103fe226 	beq	r2,zero,57bc <__ram_exceptions_end+0xfbfe5568>
    5834:	8080030b 	ldhu	r2,12(r16)
    5838:	10800054 	ori	r2,r2,1
    583c:	8080030d 	sth	r2,12(r16)
    5840:	003fde06 	br	57bc <__ram_exceptions_end+0xfbfe5568>
    5844:	8080030b 	ldhu	r2,12(r16)
    5848:	10c0800c 	andi	r3,r2,512
    584c:	183fdb1e 	bne	r3,zero,57bc <__ram_exceptions_end+0xfbfe5568>
    5850:	10800094 	ori	r2,r2,2
    5854:	80c010c4 	addi	r3,r16,67
    5858:	8080030d 	sth	r2,12(r16)
    585c:	00800044 	movi	r2,1
    5860:	80c00015 	stw	r3,0(r16)
    5864:	80c00415 	stw	r3,16(r16)
    5868:	80800515 	stw	r2,20(r16)
    586c:	003fd306 	br	57bc <__ram_exceptions_end+0xfbfe5568>
    5870:	04810004 	movi	r18,1024
    5874:	003fc306 	br	5784 <__ram_exceptions_end+0xfbfe5530>
    5878:	0027883a 	mov	r19,zero
    587c:	04810004 	movi	r18,1024
    5880:	003fc006 	br	5784 <__ram_exceptions_end+0xfbfe5530>

00005884 <_malloc_r>:
    5884:	defff504 	addi	sp,sp,-44
    5888:	dc800315 	stw	r18,12(sp)
    588c:	dfc00a15 	stw	ra,40(sp)
    5890:	df000915 	stw	fp,36(sp)
    5894:	ddc00815 	stw	r23,32(sp)
    5898:	dd800715 	stw	r22,28(sp)
    589c:	dd400615 	stw	r21,24(sp)
    58a0:	dd000515 	stw	r20,20(sp)
    58a4:	dcc00415 	stw	r19,16(sp)
    58a8:	dc400215 	stw	r17,8(sp)
    58ac:	dc000115 	stw	r16,4(sp)
    58b0:	288002c4 	addi	r2,r5,11
    58b4:	00c00584 	movi	r3,22
    58b8:	2025883a 	mov	r18,r4
    58bc:	18807f2e 	bgeu	r3,r2,5abc <_malloc_r+0x238>
    58c0:	047ffe04 	movi	r17,-8
    58c4:	1462703a 	and	r17,r2,r17
    58c8:	8800a316 	blt	r17,zero,5b58 <_malloc_r+0x2d4>
    58cc:	8940a236 	bltu	r17,r5,5b58 <_malloc_r+0x2d4>
    58d0:	000db840 	call	db84 <__malloc_lock>
    58d4:	00807dc4 	movi	r2,503
    58d8:	1441e92e 	bgeu	r2,r17,6080 <_malloc_r+0x7fc>
    58dc:	8804d27a 	srli	r2,r17,9
    58e0:	1000a126 	beq	r2,zero,5b68 <_malloc_r+0x2e4>
    58e4:	00c00104 	movi	r3,4
    58e8:	18811e36 	bltu	r3,r2,5d64 <_malloc_r+0x4e0>
    58ec:	8804d1ba 	srli	r2,r17,6
    58f0:	12000e44 	addi	r8,r2,57
    58f4:	11c00e04 	addi	r7,r2,56
    58f8:	4209883a 	add	r4,r8,r8
    58fc:	04c00074 	movhi	r19,1
    5900:	2109883a 	add	r4,r4,r4
    5904:	9cc23404 	addi	r19,r19,2256
    5908:	2109883a 	add	r4,r4,r4
    590c:	9909883a 	add	r4,r19,r4
    5910:	24000117 	ldw	r16,4(r4)
    5914:	213ffe04 	addi	r4,r4,-8
    5918:	24009726 	beq	r4,r16,5b78 <_malloc_r+0x2f4>
    591c:	80800117 	ldw	r2,4(r16)
    5920:	01bfff04 	movi	r6,-4
    5924:	014003c4 	movi	r5,15
    5928:	1184703a 	and	r2,r2,r6
    592c:	1447c83a 	sub	r3,r2,r17
    5930:	28c00716 	blt	r5,r3,5950 <_malloc_r+0xcc>
    5934:	1800920e 	bge	r3,zero,5b80 <_malloc_r+0x2fc>
    5938:	84000317 	ldw	r16,12(r16)
    593c:	24008e26 	beq	r4,r16,5b78 <_malloc_r+0x2f4>
    5940:	80800117 	ldw	r2,4(r16)
    5944:	1184703a 	and	r2,r2,r6
    5948:	1447c83a 	sub	r3,r2,r17
    594c:	28fff90e 	bge	r5,r3,5934 <__ram_exceptions_end+0xfbfe56e0>
    5950:	3809883a 	mov	r4,r7
    5954:	01800074 	movhi	r6,1
    5958:	9c000417 	ldw	r16,16(r19)
    595c:	31823404 	addi	r6,r6,2256
    5960:	32000204 	addi	r8,r6,8
    5964:	82013426 	beq	r16,r8,5e38 <_malloc_r+0x5b4>
    5968:	80c00117 	ldw	r3,4(r16)
    596c:	00bfff04 	movi	r2,-4
    5970:	188e703a 	and	r7,r3,r2
    5974:	3c45c83a 	sub	r2,r7,r17
    5978:	00c003c4 	movi	r3,15
    597c:	18811f16 	blt	r3,r2,5dfc <_malloc_r+0x578>
    5980:	32000515 	stw	r8,20(r6)
    5984:	32000415 	stw	r8,16(r6)
    5988:	10007f0e 	bge	r2,zero,5b88 <_malloc_r+0x304>
    598c:	00807fc4 	movi	r2,511
    5990:	11c0fd36 	bltu	r2,r7,5d88 <_malloc_r+0x504>
    5994:	3806d0fa 	srli	r3,r7,3
    5998:	01c00044 	movi	r7,1
    599c:	30800117 	ldw	r2,4(r6)
    59a0:	19400044 	addi	r5,r3,1
    59a4:	294b883a 	add	r5,r5,r5
    59a8:	1807d0ba 	srai	r3,r3,2
    59ac:	294b883a 	add	r5,r5,r5
    59b0:	294b883a 	add	r5,r5,r5
    59b4:	298b883a 	add	r5,r5,r6
    59b8:	38c6983a 	sll	r3,r7,r3
    59bc:	29c00017 	ldw	r7,0(r5)
    59c0:	2a7ffe04 	addi	r9,r5,-8
    59c4:	1886b03a 	or	r3,r3,r2
    59c8:	82400315 	stw	r9,12(r16)
    59cc:	81c00215 	stw	r7,8(r16)
    59d0:	30c00115 	stw	r3,4(r6)
    59d4:	2c000015 	stw	r16,0(r5)
    59d8:	3c000315 	stw	r16,12(r7)
    59dc:	2005d0ba 	srai	r2,r4,2
    59e0:	01400044 	movi	r5,1
    59e4:	288a983a 	sll	r5,r5,r2
    59e8:	19406f36 	bltu	r3,r5,5ba8 <_malloc_r+0x324>
    59ec:	28c4703a 	and	r2,r5,r3
    59f0:	10000a1e 	bne	r2,zero,5a1c <_malloc_r+0x198>
    59f4:	00bfff04 	movi	r2,-4
    59f8:	294b883a 	add	r5,r5,r5
    59fc:	2088703a 	and	r4,r4,r2
    5a00:	28c4703a 	and	r2,r5,r3
    5a04:	21000104 	addi	r4,r4,4
    5a08:	1000041e 	bne	r2,zero,5a1c <_malloc_r+0x198>
    5a0c:	294b883a 	add	r5,r5,r5
    5a10:	28c4703a 	and	r2,r5,r3
    5a14:	21000104 	addi	r4,r4,4
    5a18:	103ffc26 	beq	r2,zero,5a0c <__ram_exceptions_end+0xfbfe57b8>
    5a1c:	02bfff04 	movi	r10,-4
    5a20:	024003c4 	movi	r9,15
    5a24:	21800044 	addi	r6,r4,1
    5a28:	318d883a 	add	r6,r6,r6
    5a2c:	318d883a 	add	r6,r6,r6
    5a30:	318d883a 	add	r6,r6,r6
    5a34:	998d883a 	add	r6,r19,r6
    5a38:	333ffe04 	addi	r12,r6,-8
    5a3c:	2017883a 	mov	r11,r4
    5a40:	31800104 	addi	r6,r6,4
    5a44:	34000017 	ldw	r16,0(r6)
    5a48:	31fffd04 	addi	r7,r6,-12
    5a4c:	81c0041e 	bne	r16,r7,5a60 <_malloc_r+0x1dc>
    5a50:	0000fb06 	br	5e40 <_malloc_r+0x5bc>
    5a54:	1801030e 	bge	r3,zero,5e64 <_malloc_r+0x5e0>
    5a58:	84000317 	ldw	r16,12(r16)
    5a5c:	81c0f826 	beq	r16,r7,5e40 <_malloc_r+0x5bc>
    5a60:	80800117 	ldw	r2,4(r16)
    5a64:	1284703a 	and	r2,r2,r10
    5a68:	1447c83a 	sub	r3,r2,r17
    5a6c:	48fff90e 	bge	r9,r3,5a54 <__ram_exceptions_end+0xfbfe5800>
    5a70:	80800317 	ldw	r2,12(r16)
    5a74:	81000217 	ldw	r4,8(r16)
    5a78:	89400054 	ori	r5,r17,1
    5a7c:	81400115 	stw	r5,4(r16)
    5a80:	20800315 	stw	r2,12(r4)
    5a84:	11000215 	stw	r4,8(r2)
    5a88:	8463883a 	add	r17,r16,r17
    5a8c:	9c400515 	stw	r17,20(r19)
    5a90:	9c400415 	stw	r17,16(r19)
    5a94:	18800054 	ori	r2,r3,1
    5a98:	88800115 	stw	r2,4(r17)
    5a9c:	8a000315 	stw	r8,12(r17)
    5aa0:	8a000215 	stw	r8,8(r17)
    5aa4:	88e3883a 	add	r17,r17,r3
    5aa8:	88c00015 	stw	r3,0(r17)
    5aac:	9009883a 	mov	r4,r18
    5ab0:	000dba80 	call	dba8 <__malloc_unlock>
    5ab4:	80800204 	addi	r2,r16,8
    5ab8:	00001b06 	br	5b28 <_malloc_r+0x2a4>
    5abc:	04400404 	movi	r17,16
    5ac0:	89402536 	bltu	r17,r5,5b58 <_malloc_r+0x2d4>
    5ac4:	000db840 	call	db84 <__malloc_lock>
    5ac8:	00800184 	movi	r2,6
    5acc:	01000084 	movi	r4,2
    5ad0:	04c00074 	movhi	r19,1
    5ad4:	1085883a 	add	r2,r2,r2
    5ad8:	9cc23404 	addi	r19,r19,2256
    5adc:	1085883a 	add	r2,r2,r2
    5ae0:	9885883a 	add	r2,r19,r2
    5ae4:	14000117 	ldw	r16,4(r2)
    5ae8:	10fffe04 	addi	r3,r2,-8
    5aec:	80c0d926 	beq	r16,r3,5e54 <_malloc_r+0x5d0>
    5af0:	80c00117 	ldw	r3,4(r16)
    5af4:	81000317 	ldw	r4,12(r16)
    5af8:	00bfff04 	movi	r2,-4
    5afc:	1884703a 	and	r2,r3,r2
    5b00:	81400217 	ldw	r5,8(r16)
    5b04:	8085883a 	add	r2,r16,r2
    5b08:	10c00117 	ldw	r3,4(r2)
    5b0c:	29000315 	stw	r4,12(r5)
    5b10:	21400215 	stw	r5,8(r4)
    5b14:	18c00054 	ori	r3,r3,1
    5b18:	10c00115 	stw	r3,4(r2)
    5b1c:	9009883a 	mov	r4,r18
    5b20:	000dba80 	call	dba8 <__malloc_unlock>
    5b24:	80800204 	addi	r2,r16,8
    5b28:	dfc00a17 	ldw	ra,40(sp)
    5b2c:	df000917 	ldw	fp,36(sp)
    5b30:	ddc00817 	ldw	r23,32(sp)
    5b34:	dd800717 	ldw	r22,28(sp)
    5b38:	dd400617 	ldw	r21,24(sp)
    5b3c:	dd000517 	ldw	r20,20(sp)
    5b40:	dcc00417 	ldw	r19,16(sp)
    5b44:	dc800317 	ldw	r18,12(sp)
    5b48:	dc400217 	ldw	r17,8(sp)
    5b4c:	dc000117 	ldw	r16,4(sp)
    5b50:	dec00b04 	addi	sp,sp,44
    5b54:	f800283a 	ret
    5b58:	00800304 	movi	r2,12
    5b5c:	90800015 	stw	r2,0(r18)
    5b60:	0005883a 	mov	r2,zero
    5b64:	003ff006 	br	5b28 <__ram_exceptions_end+0xfbfe58d4>
    5b68:	01002004 	movi	r4,128
    5b6c:	02001004 	movi	r8,64
    5b70:	01c00fc4 	movi	r7,63
    5b74:	003f6106 	br	58fc <__ram_exceptions_end+0xfbfe56a8>
    5b78:	4009883a 	mov	r4,r8
    5b7c:	003f7506 	br	5954 <__ram_exceptions_end+0xfbfe5700>
    5b80:	81000317 	ldw	r4,12(r16)
    5b84:	003fde06 	br	5b00 <__ram_exceptions_end+0xfbfe58ac>
    5b88:	81c5883a 	add	r2,r16,r7
    5b8c:	11400117 	ldw	r5,4(r2)
    5b90:	9009883a 	mov	r4,r18
    5b94:	29400054 	ori	r5,r5,1
    5b98:	11400115 	stw	r5,4(r2)
    5b9c:	000dba80 	call	dba8 <__malloc_unlock>
    5ba0:	80800204 	addi	r2,r16,8
    5ba4:	003fe006 	br	5b28 <__ram_exceptions_end+0xfbfe58d4>
    5ba8:	9c000217 	ldw	r16,8(r19)
    5bac:	00bfff04 	movi	r2,-4
    5bb0:	85800117 	ldw	r22,4(r16)
    5bb4:	b0ac703a 	and	r22,r22,r2
    5bb8:	b4400336 	bltu	r22,r17,5bc8 <_malloc_r+0x344>
    5bbc:	b445c83a 	sub	r2,r22,r17
    5bc0:	00c003c4 	movi	r3,15
    5bc4:	18805d16 	blt	r3,r2,5d3c <_malloc_r+0x4b8>
    5bc8:	05c00074 	movhi	r23,1
    5bcc:	00800074 	movhi	r2,1
    5bd0:	108e8b04 	addi	r2,r2,14892
    5bd4:	bdc7bb04 	addi	r23,r23,7916
    5bd8:	15400017 	ldw	r21,0(r2)
    5bdc:	b8c00017 	ldw	r3,0(r23)
    5be0:	00bfffc4 	movi	r2,-1
    5be4:	858d883a 	add	r6,r16,r22
    5be8:	8d6b883a 	add	r21,r17,r21
    5bec:	1880ea26 	beq	r3,r2,5f98 <_malloc_r+0x714>
    5bf0:	ad4403c4 	addi	r21,r21,4111
    5bf4:	00bc0004 	movi	r2,-4096
    5bf8:	a8aa703a 	and	r21,r21,r2
    5bfc:	a80b883a 	mov	r5,r21
    5c00:	9009883a 	mov	r4,r18
    5c04:	d9800015 	stw	r6,0(sp)
    5c08:	00074540 	call	7454 <_sbrk_r>
    5c0c:	1029883a 	mov	r20,r2
    5c10:	00bfffc4 	movi	r2,-1
    5c14:	d9800017 	ldw	r6,0(sp)
    5c18:	a080e826 	beq	r20,r2,5fbc <_malloc_r+0x738>
    5c1c:	a180a636 	bltu	r20,r6,5eb8 <_malloc_r+0x634>
    5c20:	07000074 	movhi	fp,1
    5c24:	e70e9404 	addi	fp,fp,14928
    5c28:	e0800017 	ldw	r2,0(fp)
    5c2c:	a887883a 	add	r3,r21,r2
    5c30:	e0c00015 	stw	r3,0(fp)
    5c34:	3500e626 	beq	r6,r20,5fd0 <_malloc_r+0x74c>
    5c38:	b9000017 	ldw	r4,0(r23)
    5c3c:	00bfffc4 	movi	r2,-1
    5c40:	2080ee26 	beq	r4,r2,5ffc <_malloc_r+0x778>
    5c44:	a185c83a 	sub	r2,r20,r6
    5c48:	10c5883a 	add	r2,r2,r3
    5c4c:	e0800015 	stw	r2,0(fp)
    5c50:	a0c001cc 	andi	r3,r20,7
    5c54:	1800bc26 	beq	r3,zero,5f48 <_malloc_r+0x6c4>
    5c58:	a0e9c83a 	sub	r20,r20,r3
    5c5c:	00840204 	movi	r2,4104
    5c60:	a5000204 	addi	r20,r20,8
    5c64:	10c7c83a 	sub	r3,r2,r3
    5c68:	a545883a 	add	r2,r20,r21
    5c6c:	1083ffcc 	andi	r2,r2,4095
    5c70:	18abc83a 	sub	r21,r3,r2
    5c74:	a80b883a 	mov	r5,r21
    5c78:	9009883a 	mov	r4,r18
    5c7c:	00074540 	call	7454 <_sbrk_r>
    5c80:	00ffffc4 	movi	r3,-1
    5c84:	10c0e126 	beq	r2,r3,600c <_malloc_r+0x788>
    5c88:	1505c83a 	sub	r2,r2,r20
    5c8c:	1545883a 	add	r2,r2,r21
    5c90:	10800054 	ori	r2,r2,1
    5c94:	e0c00017 	ldw	r3,0(fp)
    5c98:	9d000215 	stw	r20,8(r19)
    5c9c:	a0800115 	stw	r2,4(r20)
    5ca0:	a8c7883a 	add	r3,r21,r3
    5ca4:	e0c00015 	stw	r3,0(fp)
    5ca8:	84c00e26 	beq	r16,r19,5ce4 <_malloc_r+0x460>
    5cac:	018003c4 	movi	r6,15
    5cb0:	3580a72e 	bgeu	r6,r22,5f50 <_malloc_r+0x6cc>
    5cb4:	81400117 	ldw	r5,4(r16)
    5cb8:	013ffe04 	movi	r4,-8
    5cbc:	b0bffd04 	addi	r2,r22,-12
    5cc0:	1104703a 	and	r2,r2,r4
    5cc4:	2900004c 	andi	r4,r5,1
    5cc8:	2088b03a 	or	r4,r4,r2
    5ccc:	81000115 	stw	r4,4(r16)
    5cd0:	01400144 	movi	r5,5
    5cd4:	8089883a 	add	r4,r16,r2
    5cd8:	21400115 	stw	r5,4(r4)
    5cdc:	21400215 	stw	r5,8(r4)
    5ce0:	3080cd36 	bltu	r6,r2,6018 <_malloc_r+0x794>
    5ce4:	00800074 	movhi	r2,1
    5ce8:	108e8a04 	addi	r2,r2,14888
    5cec:	11000017 	ldw	r4,0(r2)
    5cf0:	20c0012e 	bgeu	r4,r3,5cf8 <_malloc_r+0x474>
    5cf4:	10c00015 	stw	r3,0(r2)
    5cf8:	00800074 	movhi	r2,1
    5cfc:	108e8904 	addi	r2,r2,14884
    5d00:	11000017 	ldw	r4,0(r2)
    5d04:	9c000217 	ldw	r16,8(r19)
    5d08:	20c0012e 	bgeu	r4,r3,5d10 <_malloc_r+0x48c>
    5d0c:	10c00015 	stw	r3,0(r2)
    5d10:	80c00117 	ldw	r3,4(r16)
    5d14:	00bfff04 	movi	r2,-4
    5d18:	1886703a 	and	r3,r3,r2
    5d1c:	1c45c83a 	sub	r2,r3,r17
    5d20:	1c400236 	bltu	r3,r17,5d2c <_malloc_r+0x4a8>
    5d24:	00c003c4 	movi	r3,15
    5d28:	18800416 	blt	r3,r2,5d3c <_malloc_r+0x4b8>
    5d2c:	9009883a 	mov	r4,r18
    5d30:	000dba80 	call	dba8 <__malloc_unlock>
    5d34:	0005883a 	mov	r2,zero
    5d38:	003f7b06 	br	5b28 <__ram_exceptions_end+0xfbfe58d4>
    5d3c:	88c00054 	ori	r3,r17,1
    5d40:	80c00115 	stw	r3,4(r16)
    5d44:	8463883a 	add	r17,r16,r17
    5d48:	10800054 	ori	r2,r2,1
    5d4c:	9c400215 	stw	r17,8(r19)
    5d50:	88800115 	stw	r2,4(r17)
    5d54:	9009883a 	mov	r4,r18
    5d58:	000dba80 	call	dba8 <__malloc_unlock>
    5d5c:	80800204 	addi	r2,r16,8
    5d60:	003f7106 	br	5b28 <__ram_exceptions_end+0xfbfe58d4>
    5d64:	00c00504 	movi	r3,20
    5d68:	18804a2e 	bgeu	r3,r2,5e94 <_malloc_r+0x610>
    5d6c:	00c01504 	movi	r3,84
    5d70:	18806e36 	bltu	r3,r2,5f2c <_malloc_r+0x6a8>
    5d74:	8804d33a 	srli	r2,r17,12
    5d78:	12001bc4 	addi	r8,r2,111
    5d7c:	11c01b84 	addi	r7,r2,110
    5d80:	4209883a 	add	r4,r8,r8
    5d84:	003edd06 	br	58fc <__ram_exceptions_end+0xfbfe56a8>
    5d88:	3804d27a 	srli	r2,r7,9
    5d8c:	00c00104 	movi	r3,4
    5d90:	1880442e 	bgeu	r3,r2,5ea4 <_malloc_r+0x620>
    5d94:	00c00504 	movi	r3,20
    5d98:	18808136 	bltu	r3,r2,5fa0 <_malloc_r+0x71c>
    5d9c:	11401704 	addi	r5,r2,92
    5da0:	10c016c4 	addi	r3,r2,91
    5da4:	294b883a 	add	r5,r5,r5
    5da8:	294b883a 	add	r5,r5,r5
    5dac:	294b883a 	add	r5,r5,r5
    5db0:	994b883a 	add	r5,r19,r5
    5db4:	28800017 	ldw	r2,0(r5)
    5db8:	01800074 	movhi	r6,1
    5dbc:	297ffe04 	addi	r5,r5,-8
    5dc0:	31823404 	addi	r6,r6,2256
    5dc4:	28806526 	beq	r5,r2,5f5c <_malloc_r+0x6d8>
    5dc8:	01bfff04 	movi	r6,-4
    5dcc:	10c00117 	ldw	r3,4(r2)
    5dd0:	1986703a 	and	r3,r3,r6
    5dd4:	38c0022e 	bgeu	r7,r3,5de0 <_malloc_r+0x55c>
    5dd8:	10800217 	ldw	r2,8(r2)
    5ddc:	28bffb1e 	bne	r5,r2,5dcc <__ram_exceptions_end+0xfbfe5b78>
    5de0:	11400317 	ldw	r5,12(r2)
    5de4:	98c00117 	ldw	r3,4(r19)
    5de8:	81400315 	stw	r5,12(r16)
    5dec:	80800215 	stw	r2,8(r16)
    5df0:	2c000215 	stw	r16,8(r5)
    5df4:	14000315 	stw	r16,12(r2)
    5df8:	003ef806 	br	59dc <__ram_exceptions_end+0xfbfe5788>
    5dfc:	88c00054 	ori	r3,r17,1
    5e00:	80c00115 	stw	r3,4(r16)
    5e04:	8463883a 	add	r17,r16,r17
    5e08:	34400515 	stw	r17,20(r6)
    5e0c:	34400415 	stw	r17,16(r6)
    5e10:	10c00054 	ori	r3,r2,1
    5e14:	8a000315 	stw	r8,12(r17)
    5e18:	8a000215 	stw	r8,8(r17)
    5e1c:	88c00115 	stw	r3,4(r17)
    5e20:	88a3883a 	add	r17,r17,r2
    5e24:	88800015 	stw	r2,0(r17)
    5e28:	9009883a 	mov	r4,r18
    5e2c:	000dba80 	call	dba8 <__malloc_unlock>
    5e30:	80800204 	addi	r2,r16,8
    5e34:	003f3c06 	br	5b28 <__ram_exceptions_end+0xfbfe58d4>
    5e38:	30c00117 	ldw	r3,4(r6)
    5e3c:	003ee706 	br	59dc <__ram_exceptions_end+0xfbfe5788>
    5e40:	5ac00044 	addi	r11,r11,1
    5e44:	588000cc 	andi	r2,r11,3
    5e48:	31800204 	addi	r6,r6,8
    5e4c:	103efd1e 	bne	r2,zero,5a44 <__ram_exceptions_end+0xfbfe57f0>
    5e50:	00002406 	br	5ee4 <_malloc_r+0x660>
    5e54:	14000317 	ldw	r16,12(r2)
    5e58:	143f251e 	bne	r2,r16,5af0 <__ram_exceptions_end+0xfbfe589c>
    5e5c:	21000084 	addi	r4,r4,2
    5e60:	003ebc06 	br	5954 <__ram_exceptions_end+0xfbfe5700>
    5e64:	8085883a 	add	r2,r16,r2
    5e68:	10c00117 	ldw	r3,4(r2)
    5e6c:	81000317 	ldw	r4,12(r16)
    5e70:	81400217 	ldw	r5,8(r16)
    5e74:	18c00054 	ori	r3,r3,1
    5e78:	10c00115 	stw	r3,4(r2)
    5e7c:	29000315 	stw	r4,12(r5)
    5e80:	21400215 	stw	r5,8(r4)
    5e84:	9009883a 	mov	r4,r18
    5e88:	000dba80 	call	dba8 <__malloc_unlock>
    5e8c:	80800204 	addi	r2,r16,8
    5e90:	003f2506 	br	5b28 <__ram_exceptions_end+0xfbfe58d4>
    5e94:	12001704 	addi	r8,r2,92
    5e98:	11c016c4 	addi	r7,r2,91
    5e9c:	4209883a 	add	r4,r8,r8
    5ea0:	003e9606 	br	58fc <__ram_exceptions_end+0xfbfe56a8>
    5ea4:	3804d1ba 	srli	r2,r7,6
    5ea8:	11400e44 	addi	r5,r2,57
    5eac:	10c00e04 	addi	r3,r2,56
    5eb0:	294b883a 	add	r5,r5,r5
    5eb4:	003fbc06 	br	5da8 <__ram_exceptions_end+0xfbfe5b54>
    5eb8:	84ff5926 	beq	r16,r19,5c20 <__ram_exceptions_end+0xfbfe59cc>
    5ebc:	00800074 	movhi	r2,1
    5ec0:	10823404 	addi	r2,r2,2256
    5ec4:	14000217 	ldw	r16,8(r2)
    5ec8:	00bfff04 	movi	r2,-4
    5ecc:	80c00117 	ldw	r3,4(r16)
    5ed0:	1886703a 	and	r3,r3,r2
    5ed4:	003f9106 	br	5d1c <__ram_exceptions_end+0xfbfe5ac8>
    5ed8:	60800217 	ldw	r2,8(r12)
    5edc:	213fffc4 	addi	r4,r4,-1
    5ee0:	1300651e 	bne	r2,r12,6078 <_malloc_r+0x7f4>
    5ee4:	208000cc 	andi	r2,r4,3
    5ee8:	633ffe04 	addi	r12,r12,-8
    5eec:	103ffa1e 	bne	r2,zero,5ed8 <__ram_exceptions_end+0xfbfe5c84>
    5ef0:	98800117 	ldw	r2,4(r19)
    5ef4:	0146303a 	nor	r3,zero,r5
    5ef8:	1884703a 	and	r2,r3,r2
    5efc:	98800115 	stw	r2,4(r19)
    5f00:	294b883a 	add	r5,r5,r5
    5f04:	117f2836 	bltu	r2,r5,5ba8 <__ram_exceptions_end+0xfbfe5954>
    5f08:	283f2726 	beq	r5,zero,5ba8 <__ram_exceptions_end+0xfbfe5954>
    5f0c:	2886703a 	and	r3,r5,r2
    5f10:	5809883a 	mov	r4,r11
    5f14:	183ec31e 	bne	r3,zero,5a24 <__ram_exceptions_end+0xfbfe57d0>
    5f18:	294b883a 	add	r5,r5,r5
    5f1c:	2886703a 	and	r3,r5,r2
    5f20:	21000104 	addi	r4,r4,4
    5f24:	183ffc26 	beq	r3,zero,5f18 <__ram_exceptions_end+0xfbfe5cc4>
    5f28:	003ebe06 	br	5a24 <__ram_exceptions_end+0xfbfe57d0>
    5f2c:	00c05504 	movi	r3,340
    5f30:	18801236 	bltu	r3,r2,5f7c <_malloc_r+0x6f8>
    5f34:	8804d3fa 	srli	r2,r17,15
    5f38:	12001e04 	addi	r8,r2,120
    5f3c:	11c01dc4 	addi	r7,r2,119
    5f40:	4209883a 	add	r4,r8,r8
    5f44:	003e6d06 	br	58fc <__ram_exceptions_end+0xfbfe56a8>
    5f48:	00c40004 	movi	r3,4096
    5f4c:	003f4606 	br	5c68 <__ram_exceptions_end+0xfbfe5a14>
    5f50:	00800044 	movi	r2,1
    5f54:	a0800115 	stw	r2,4(r20)
    5f58:	003f7406 	br	5d2c <__ram_exceptions_end+0xfbfe5ad8>
    5f5c:	1805d0ba 	srai	r2,r3,2
    5f60:	01c00044 	movi	r7,1
    5f64:	30c00117 	ldw	r3,4(r6)
    5f68:	388e983a 	sll	r7,r7,r2
    5f6c:	2805883a 	mov	r2,r5
    5f70:	38c6b03a 	or	r3,r7,r3
    5f74:	30c00115 	stw	r3,4(r6)
    5f78:	003f9b06 	br	5de8 <__ram_exceptions_end+0xfbfe5b94>
    5f7c:	00c15504 	movi	r3,1364
    5f80:	18801a36 	bltu	r3,r2,5fec <_malloc_r+0x768>
    5f84:	8804d4ba 	srli	r2,r17,18
    5f88:	12001f44 	addi	r8,r2,125
    5f8c:	11c01f04 	addi	r7,r2,124
    5f90:	4209883a 	add	r4,r8,r8
    5f94:	003e5906 	br	58fc <__ram_exceptions_end+0xfbfe56a8>
    5f98:	ad400404 	addi	r21,r21,16
    5f9c:	003f1706 	br	5bfc <__ram_exceptions_end+0xfbfe59a8>
    5fa0:	00c01504 	movi	r3,84
    5fa4:	18802336 	bltu	r3,r2,6034 <_malloc_r+0x7b0>
    5fa8:	3804d33a 	srli	r2,r7,12
    5fac:	11401bc4 	addi	r5,r2,111
    5fb0:	10c01b84 	addi	r3,r2,110
    5fb4:	294b883a 	add	r5,r5,r5
    5fb8:	003f7b06 	br	5da8 <__ram_exceptions_end+0xfbfe5b54>
    5fbc:	9c000217 	ldw	r16,8(r19)
    5fc0:	00bfff04 	movi	r2,-4
    5fc4:	80c00117 	ldw	r3,4(r16)
    5fc8:	1886703a 	and	r3,r3,r2
    5fcc:	003f5306 	br	5d1c <__ram_exceptions_end+0xfbfe5ac8>
    5fd0:	3083ffcc 	andi	r2,r6,4095
    5fd4:	103f181e 	bne	r2,zero,5c38 <__ram_exceptions_end+0xfbfe59e4>
    5fd8:	99000217 	ldw	r4,8(r19)
    5fdc:	b545883a 	add	r2,r22,r21
    5fe0:	10800054 	ori	r2,r2,1
    5fe4:	20800115 	stw	r2,4(r4)
    5fe8:	003f3e06 	br	5ce4 <__ram_exceptions_end+0xfbfe5a90>
    5fec:	01003f84 	movi	r4,254
    5ff0:	02001fc4 	movi	r8,127
    5ff4:	01c01f84 	movi	r7,126
    5ff8:	003e4006 	br	58fc <__ram_exceptions_end+0xfbfe56a8>
    5ffc:	00800074 	movhi	r2,1
    6000:	1087bb04 	addi	r2,r2,7916
    6004:	15000015 	stw	r20,0(r2)
    6008:	003f1106 	br	5c50 <__ram_exceptions_end+0xfbfe59fc>
    600c:	00800044 	movi	r2,1
    6010:	002b883a 	mov	r21,zero
    6014:	003f1f06 	br	5c94 <__ram_exceptions_end+0xfbfe5a40>
    6018:	81400204 	addi	r5,r16,8
    601c:	9009883a 	mov	r4,r18
    6020:	00051540 	call	5154 <_free_r>
    6024:	00800074 	movhi	r2,1
    6028:	108e9404 	addi	r2,r2,14928
    602c:	10c00017 	ldw	r3,0(r2)
    6030:	003f2c06 	br	5ce4 <__ram_exceptions_end+0xfbfe5a90>
    6034:	00c05504 	movi	r3,340
    6038:	18800536 	bltu	r3,r2,6050 <_malloc_r+0x7cc>
    603c:	3804d3fa 	srli	r2,r7,15
    6040:	11401e04 	addi	r5,r2,120
    6044:	10c01dc4 	addi	r3,r2,119
    6048:	294b883a 	add	r5,r5,r5
    604c:	003f5606 	br	5da8 <__ram_exceptions_end+0xfbfe5b54>
    6050:	00c15504 	movi	r3,1364
    6054:	18800536 	bltu	r3,r2,606c <_malloc_r+0x7e8>
    6058:	3804d4ba 	srli	r2,r7,18
    605c:	11401f44 	addi	r5,r2,125
    6060:	10c01f04 	addi	r3,r2,124
    6064:	294b883a 	add	r5,r5,r5
    6068:	003f4f06 	br	5da8 <__ram_exceptions_end+0xfbfe5b54>
    606c:	01403f84 	movi	r5,254
    6070:	00c01f84 	movi	r3,126
    6074:	003f4c06 	br	5da8 <__ram_exceptions_end+0xfbfe5b54>
    6078:	98800117 	ldw	r2,4(r19)
    607c:	003fa006 	br	5f00 <__ram_exceptions_end+0xfbfe5cac>
    6080:	8808d0fa 	srli	r4,r17,3
    6084:	20800044 	addi	r2,r4,1
    6088:	1085883a 	add	r2,r2,r2
    608c:	003e9006 	br	5ad0 <__ram_exceptions_end+0xfbfe587c>

00006090 <memchr>:
    6090:	208000cc 	andi	r2,r4,3
    6094:	280f883a 	mov	r7,r5
    6098:	10003426 	beq	r2,zero,616c <memchr+0xdc>
    609c:	30bfffc4 	addi	r2,r6,-1
    60a0:	30001a26 	beq	r6,zero,610c <memchr+0x7c>
    60a4:	20c00003 	ldbu	r3,0(r4)
    60a8:	29803fcc 	andi	r6,r5,255
    60ac:	30c0051e 	bne	r6,r3,60c4 <memchr+0x34>
    60b0:	00001806 	br	6114 <memchr+0x84>
    60b4:	10001526 	beq	r2,zero,610c <memchr+0x7c>
    60b8:	20c00003 	ldbu	r3,0(r4)
    60bc:	10bfffc4 	addi	r2,r2,-1
    60c0:	30c01426 	beq	r6,r3,6114 <memchr+0x84>
    60c4:	21000044 	addi	r4,r4,1
    60c8:	20c000cc 	andi	r3,r4,3
    60cc:	183ff91e 	bne	r3,zero,60b4 <__ram_exceptions_end+0xfbfe5e60>
    60d0:	020000c4 	movi	r8,3
    60d4:	40801136 	bltu	r8,r2,611c <memchr+0x8c>
    60d8:	10000c26 	beq	r2,zero,610c <memchr+0x7c>
    60dc:	20c00003 	ldbu	r3,0(r4)
    60e0:	29403fcc 	andi	r5,r5,255
    60e4:	28c00b26 	beq	r5,r3,6114 <memchr+0x84>
    60e8:	20c00044 	addi	r3,r4,1
    60ec:	39803fcc 	andi	r6,r7,255
    60f0:	2089883a 	add	r4,r4,r2
    60f4:	00000306 	br	6104 <memchr+0x74>
    60f8:	18c00044 	addi	r3,r3,1
    60fc:	197fffc3 	ldbu	r5,-1(r3)
    6100:	31400526 	beq	r6,r5,6118 <memchr+0x88>
    6104:	1805883a 	mov	r2,r3
    6108:	20fffb1e 	bne	r4,r3,60f8 <__ram_exceptions_end+0xfbfe5ea4>
    610c:	0005883a 	mov	r2,zero
    6110:	f800283a 	ret
    6114:	2005883a 	mov	r2,r4
    6118:	f800283a 	ret
    611c:	28c03fcc 	andi	r3,r5,255
    6120:	1812923a 	slli	r9,r3,8
    6124:	02ffbff4 	movhi	r11,65279
    6128:	02a02074 	movhi	r10,32897
    612c:	48d2b03a 	or	r9,r9,r3
    6130:	4806943a 	slli	r3,r9,16
    6134:	5affbfc4 	addi	r11,r11,-257
    6138:	52a02004 	addi	r10,r10,-32640
    613c:	48d2b03a 	or	r9,r9,r3
    6140:	20c00017 	ldw	r3,0(r4)
    6144:	48c6f03a 	xor	r3,r9,r3
    6148:	1acd883a 	add	r6,r3,r11
    614c:	00c6303a 	nor	r3,zero,r3
    6150:	30c6703a 	and	r3,r6,r3
    6154:	1a86703a 	and	r3,r3,r10
    6158:	183fe01e 	bne	r3,zero,60dc <__ram_exceptions_end+0xfbfe5e88>
    615c:	10bfff04 	addi	r2,r2,-4
    6160:	21000104 	addi	r4,r4,4
    6164:	40bff636 	bltu	r8,r2,6140 <__ram_exceptions_end+0xfbfe5eec>
    6168:	003fdb06 	br	60d8 <__ram_exceptions_end+0xfbfe5e84>
    616c:	3005883a 	mov	r2,r6
    6170:	003fd706 	br	60d0 <__ram_exceptions_end+0xfbfe5e7c>

00006174 <memcpy>:
    6174:	defffd04 	addi	sp,sp,-12
    6178:	dfc00215 	stw	ra,8(sp)
    617c:	dc400115 	stw	r17,4(sp)
    6180:	dc000015 	stw	r16,0(sp)
    6184:	00c003c4 	movi	r3,15
    6188:	2005883a 	mov	r2,r4
    618c:	1980452e 	bgeu	r3,r6,62a4 <memcpy+0x130>
    6190:	2906b03a 	or	r3,r5,r4
    6194:	18c000cc 	andi	r3,r3,3
    6198:	1800441e 	bne	r3,zero,62ac <memcpy+0x138>
    619c:	347ffc04 	addi	r17,r6,-16
    61a0:	8822d13a 	srli	r17,r17,4
    61a4:	28c00104 	addi	r3,r5,4
    61a8:	23400104 	addi	r13,r4,4
    61ac:	8820913a 	slli	r16,r17,4
    61b0:	2b000204 	addi	r12,r5,8
    61b4:	22c00204 	addi	r11,r4,8
    61b8:	84000504 	addi	r16,r16,20
    61bc:	2a800304 	addi	r10,r5,12
    61c0:	22400304 	addi	r9,r4,12
    61c4:	2c21883a 	add	r16,r5,r16
    61c8:	2811883a 	mov	r8,r5
    61cc:	200f883a 	mov	r7,r4
    61d0:	41000017 	ldw	r4,0(r8)
    61d4:	1fc00017 	ldw	ra,0(r3)
    61d8:	63c00017 	ldw	r15,0(r12)
    61dc:	39000015 	stw	r4,0(r7)
    61e0:	53800017 	ldw	r14,0(r10)
    61e4:	6fc00015 	stw	ra,0(r13)
    61e8:	5bc00015 	stw	r15,0(r11)
    61ec:	4b800015 	stw	r14,0(r9)
    61f0:	18c00404 	addi	r3,r3,16
    61f4:	39c00404 	addi	r7,r7,16
    61f8:	42000404 	addi	r8,r8,16
    61fc:	6b400404 	addi	r13,r13,16
    6200:	63000404 	addi	r12,r12,16
    6204:	5ac00404 	addi	r11,r11,16
    6208:	52800404 	addi	r10,r10,16
    620c:	4a400404 	addi	r9,r9,16
    6210:	1c3fef1e 	bne	r3,r16,61d0 <__ram_exceptions_end+0xfbfe5f7c>
    6214:	89c00044 	addi	r7,r17,1
    6218:	380e913a 	slli	r7,r7,4
    621c:	310003cc 	andi	r4,r6,15
    6220:	02c000c4 	movi	r11,3
    6224:	11c7883a 	add	r3,r2,r7
    6228:	29cb883a 	add	r5,r5,r7
    622c:	5900212e 	bgeu	r11,r4,62b4 <memcpy+0x140>
    6230:	1813883a 	mov	r9,r3
    6234:	2811883a 	mov	r8,r5
    6238:	200f883a 	mov	r7,r4
    623c:	42800017 	ldw	r10,0(r8)
    6240:	4a400104 	addi	r9,r9,4
    6244:	39ffff04 	addi	r7,r7,-4
    6248:	4abfff15 	stw	r10,-4(r9)
    624c:	42000104 	addi	r8,r8,4
    6250:	59fffa36 	bltu	r11,r7,623c <__ram_exceptions_end+0xfbfe5fe8>
    6254:	213fff04 	addi	r4,r4,-4
    6258:	2008d0ba 	srli	r4,r4,2
    625c:	318000cc 	andi	r6,r6,3
    6260:	21000044 	addi	r4,r4,1
    6264:	2109883a 	add	r4,r4,r4
    6268:	2109883a 	add	r4,r4,r4
    626c:	1907883a 	add	r3,r3,r4
    6270:	290b883a 	add	r5,r5,r4
    6274:	30000626 	beq	r6,zero,6290 <memcpy+0x11c>
    6278:	198d883a 	add	r6,r3,r6
    627c:	29c00003 	ldbu	r7,0(r5)
    6280:	18c00044 	addi	r3,r3,1
    6284:	29400044 	addi	r5,r5,1
    6288:	19ffffc5 	stb	r7,-1(r3)
    628c:	19bffb1e 	bne	r3,r6,627c <__ram_exceptions_end+0xfbfe6028>
    6290:	dfc00217 	ldw	ra,8(sp)
    6294:	dc400117 	ldw	r17,4(sp)
    6298:	dc000017 	ldw	r16,0(sp)
    629c:	dec00304 	addi	sp,sp,12
    62a0:	f800283a 	ret
    62a4:	2007883a 	mov	r3,r4
    62a8:	003ff206 	br	6274 <__ram_exceptions_end+0xfbfe6020>
    62ac:	2007883a 	mov	r3,r4
    62b0:	003ff106 	br	6278 <__ram_exceptions_end+0xfbfe6024>
    62b4:	200d883a 	mov	r6,r4
    62b8:	003fee06 	br	6274 <__ram_exceptions_end+0xfbfe6020>

000062bc <memset>:
    62bc:	20c000cc 	andi	r3,r4,3
    62c0:	2005883a 	mov	r2,r4
    62c4:	18004426 	beq	r3,zero,63d8 <memset+0x11c>
    62c8:	31ffffc4 	addi	r7,r6,-1
    62cc:	30004026 	beq	r6,zero,63d0 <memset+0x114>
    62d0:	2813883a 	mov	r9,r5
    62d4:	200d883a 	mov	r6,r4
    62d8:	2007883a 	mov	r3,r4
    62dc:	00000406 	br	62f0 <memset+0x34>
    62e0:	3a3fffc4 	addi	r8,r7,-1
    62e4:	31800044 	addi	r6,r6,1
    62e8:	38003926 	beq	r7,zero,63d0 <memset+0x114>
    62ec:	400f883a 	mov	r7,r8
    62f0:	18c00044 	addi	r3,r3,1
    62f4:	32400005 	stb	r9,0(r6)
    62f8:	1a0000cc 	andi	r8,r3,3
    62fc:	403ff81e 	bne	r8,zero,62e0 <__ram_exceptions_end+0xfbfe608c>
    6300:	010000c4 	movi	r4,3
    6304:	21c02d2e 	bgeu	r4,r7,63bc <memset+0x100>
    6308:	29003fcc 	andi	r4,r5,255
    630c:	200c923a 	slli	r6,r4,8
    6310:	3108b03a 	or	r4,r6,r4
    6314:	200c943a 	slli	r6,r4,16
    6318:	218cb03a 	or	r6,r4,r6
    631c:	010003c4 	movi	r4,15
    6320:	21c0182e 	bgeu	r4,r7,6384 <memset+0xc8>
    6324:	3b3ffc04 	addi	r12,r7,-16
    6328:	6018d13a 	srli	r12,r12,4
    632c:	1a000104 	addi	r8,r3,4
    6330:	1ac00204 	addi	r11,r3,8
    6334:	6008913a 	slli	r4,r12,4
    6338:	1a800304 	addi	r10,r3,12
    633c:	1813883a 	mov	r9,r3
    6340:	21000504 	addi	r4,r4,20
    6344:	1909883a 	add	r4,r3,r4
    6348:	49800015 	stw	r6,0(r9)
    634c:	41800015 	stw	r6,0(r8)
    6350:	59800015 	stw	r6,0(r11)
    6354:	51800015 	stw	r6,0(r10)
    6358:	42000404 	addi	r8,r8,16
    635c:	4a400404 	addi	r9,r9,16
    6360:	5ac00404 	addi	r11,r11,16
    6364:	52800404 	addi	r10,r10,16
    6368:	413ff71e 	bne	r8,r4,6348 <__ram_exceptions_end+0xfbfe60f4>
    636c:	63000044 	addi	r12,r12,1
    6370:	6018913a 	slli	r12,r12,4
    6374:	39c003cc 	andi	r7,r7,15
    6378:	010000c4 	movi	r4,3
    637c:	1b07883a 	add	r3,r3,r12
    6380:	21c00e2e 	bgeu	r4,r7,63bc <memset+0x100>
    6384:	1813883a 	mov	r9,r3
    6388:	3811883a 	mov	r8,r7
    638c:	010000c4 	movi	r4,3
    6390:	49800015 	stw	r6,0(r9)
    6394:	423fff04 	addi	r8,r8,-4
    6398:	4a400104 	addi	r9,r9,4
    639c:	223ffc36 	bltu	r4,r8,6390 <__ram_exceptions_end+0xfbfe613c>
    63a0:	393fff04 	addi	r4,r7,-4
    63a4:	2008d0ba 	srli	r4,r4,2
    63a8:	39c000cc 	andi	r7,r7,3
    63ac:	21000044 	addi	r4,r4,1
    63b0:	2109883a 	add	r4,r4,r4
    63b4:	2109883a 	add	r4,r4,r4
    63b8:	1907883a 	add	r3,r3,r4
    63bc:	38000526 	beq	r7,zero,63d4 <memset+0x118>
    63c0:	19cf883a 	add	r7,r3,r7
    63c4:	19400005 	stb	r5,0(r3)
    63c8:	18c00044 	addi	r3,r3,1
    63cc:	38fffd1e 	bne	r7,r3,63c4 <__ram_exceptions_end+0xfbfe6170>
    63d0:	f800283a 	ret
    63d4:	f800283a 	ret
    63d8:	2007883a 	mov	r3,r4
    63dc:	300f883a 	mov	r7,r6
    63e0:	003fc706 	br	6300 <__ram_exceptions_end+0xfbfe60ac>

000063e4 <_Balloc>:
    63e4:	20801317 	ldw	r2,76(r4)
    63e8:	defffc04 	addi	sp,sp,-16
    63ec:	dc400115 	stw	r17,4(sp)
    63f0:	dc000015 	stw	r16,0(sp)
    63f4:	dfc00315 	stw	ra,12(sp)
    63f8:	dc800215 	stw	r18,8(sp)
    63fc:	2023883a 	mov	r17,r4
    6400:	2821883a 	mov	r16,r5
    6404:	10000f26 	beq	r2,zero,6444 <_Balloc+0x60>
    6408:	8407883a 	add	r3,r16,r16
    640c:	18c7883a 	add	r3,r3,r3
    6410:	10c7883a 	add	r3,r2,r3
    6414:	18800017 	ldw	r2,0(r3)
    6418:	10001126 	beq	r2,zero,6460 <_Balloc+0x7c>
    641c:	11000017 	ldw	r4,0(r2)
    6420:	19000015 	stw	r4,0(r3)
    6424:	10000415 	stw	zero,16(r2)
    6428:	10000315 	stw	zero,12(r2)
    642c:	dfc00317 	ldw	ra,12(sp)
    6430:	dc800217 	ldw	r18,8(sp)
    6434:	dc400117 	ldw	r17,4(sp)
    6438:	dc000017 	ldw	r16,0(sp)
    643c:	dec00404 	addi	sp,sp,16
    6440:	f800283a 	ret
    6444:	01800844 	movi	r6,33
    6448:	01400104 	movi	r5,4
    644c:	0008e540 	call	8e54 <_calloc_r>
    6450:	88801315 	stw	r2,76(r17)
    6454:	103fec1e 	bne	r2,zero,6408 <__ram_exceptions_end+0xfbfe61b4>
    6458:	0005883a 	mov	r2,zero
    645c:	003ff306 	br	642c <__ram_exceptions_end+0xfbfe61d8>
    6460:	01400044 	movi	r5,1
    6464:	2c24983a 	sll	r18,r5,r16
    6468:	8809883a 	mov	r4,r17
    646c:	91800144 	addi	r6,r18,5
    6470:	318d883a 	add	r6,r6,r6
    6474:	318d883a 	add	r6,r6,r6
    6478:	0008e540 	call	8e54 <_calloc_r>
    647c:	103ff626 	beq	r2,zero,6458 <__ram_exceptions_end+0xfbfe6204>
    6480:	14000115 	stw	r16,4(r2)
    6484:	14800215 	stw	r18,8(r2)
    6488:	003fe606 	br	6424 <__ram_exceptions_end+0xfbfe61d0>

0000648c <_Bfree>:
    648c:	28000826 	beq	r5,zero,64b0 <_Bfree+0x24>
    6490:	28c00117 	ldw	r3,4(r5)
    6494:	20801317 	ldw	r2,76(r4)
    6498:	18c7883a 	add	r3,r3,r3
    649c:	18c7883a 	add	r3,r3,r3
    64a0:	10c5883a 	add	r2,r2,r3
    64a4:	10c00017 	ldw	r3,0(r2)
    64a8:	28c00015 	stw	r3,0(r5)
    64ac:	11400015 	stw	r5,0(r2)
    64b0:	f800283a 	ret

000064b4 <__multadd>:
    64b4:	defffa04 	addi	sp,sp,-24
    64b8:	dc800315 	stw	r18,12(sp)
    64bc:	dc400215 	stw	r17,8(sp)
    64c0:	dc000115 	stw	r16,4(sp)
    64c4:	2823883a 	mov	r17,r5
    64c8:	2c000417 	ldw	r16,16(r5)
    64cc:	dfc00515 	stw	ra,20(sp)
    64d0:	dcc00415 	stw	r19,16(sp)
    64d4:	2025883a 	mov	r18,r4
    64d8:	29400504 	addi	r5,r5,20
    64dc:	0011883a 	mov	r8,zero
    64e0:	28c00017 	ldw	r3,0(r5)
    64e4:	29400104 	addi	r5,r5,4
    64e8:	42000044 	addi	r8,r8,1
    64ec:	18bfffcc 	andi	r2,r3,65535
    64f0:	1185383a 	mul	r2,r2,r6
    64f4:	1806d43a 	srli	r3,r3,16
    64f8:	11cf883a 	add	r7,r2,r7
    64fc:	3808d43a 	srli	r4,r7,16
    6500:	1987383a 	mul	r3,r3,r6
    6504:	38bfffcc 	andi	r2,r7,65535
    6508:	1907883a 	add	r3,r3,r4
    650c:	1808943a 	slli	r4,r3,16
    6510:	180ed43a 	srli	r7,r3,16
    6514:	2085883a 	add	r2,r4,r2
    6518:	28bfff15 	stw	r2,-4(r5)
    651c:	443ff016 	blt	r8,r16,64e0 <__ram_exceptions_end+0xfbfe628c>
    6520:	38000926 	beq	r7,zero,6548 <__multadd+0x94>
    6524:	88800217 	ldw	r2,8(r17)
    6528:	80800f0e 	bge	r16,r2,6568 <__multadd+0xb4>
    652c:	80800144 	addi	r2,r16,5
    6530:	1085883a 	add	r2,r2,r2
    6534:	1085883a 	add	r2,r2,r2
    6538:	8885883a 	add	r2,r17,r2
    653c:	11c00015 	stw	r7,0(r2)
    6540:	84000044 	addi	r16,r16,1
    6544:	8c000415 	stw	r16,16(r17)
    6548:	8805883a 	mov	r2,r17
    654c:	dfc00517 	ldw	ra,20(sp)
    6550:	dcc00417 	ldw	r19,16(sp)
    6554:	dc800317 	ldw	r18,12(sp)
    6558:	dc400217 	ldw	r17,8(sp)
    655c:	dc000117 	ldw	r16,4(sp)
    6560:	dec00604 	addi	sp,sp,24
    6564:	f800283a 	ret
    6568:	89400117 	ldw	r5,4(r17)
    656c:	9009883a 	mov	r4,r18
    6570:	d9c00015 	stw	r7,0(sp)
    6574:	29400044 	addi	r5,r5,1
    6578:	00063e40 	call	63e4 <_Balloc>
    657c:	89800417 	ldw	r6,16(r17)
    6580:	89400304 	addi	r5,r17,12
    6584:	11000304 	addi	r4,r2,12
    6588:	31800084 	addi	r6,r6,2
    658c:	318d883a 	add	r6,r6,r6
    6590:	318d883a 	add	r6,r6,r6
    6594:	1027883a 	mov	r19,r2
    6598:	00061740 	call	6174 <memcpy>
    659c:	d9c00017 	ldw	r7,0(sp)
    65a0:	88000a26 	beq	r17,zero,65cc <__multadd+0x118>
    65a4:	88c00117 	ldw	r3,4(r17)
    65a8:	90801317 	ldw	r2,76(r18)
    65ac:	18c7883a 	add	r3,r3,r3
    65b0:	18c7883a 	add	r3,r3,r3
    65b4:	10c5883a 	add	r2,r2,r3
    65b8:	10c00017 	ldw	r3,0(r2)
    65bc:	88c00015 	stw	r3,0(r17)
    65c0:	14400015 	stw	r17,0(r2)
    65c4:	9823883a 	mov	r17,r19
    65c8:	003fd806 	br	652c <__ram_exceptions_end+0xfbfe62d8>
    65cc:	9823883a 	mov	r17,r19
    65d0:	003fd606 	br	652c <__ram_exceptions_end+0xfbfe62d8>

000065d4 <__s2b>:
    65d4:	defff904 	addi	sp,sp,-28
    65d8:	dc400115 	stw	r17,4(sp)
    65dc:	dc000015 	stw	r16,0(sp)
    65e0:	2023883a 	mov	r17,r4
    65e4:	2821883a 	mov	r16,r5
    65e8:	39000204 	addi	r4,r7,8
    65ec:	01400244 	movi	r5,9
    65f0:	dcc00315 	stw	r19,12(sp)
    65f4:	dc800215 	stw	r18,8(sp)
    65f8:	dfc00615 	stw	ra,24(sp)
    65fc:	dd400515 	stw	r21,20(sp)
    6600:	dd000415 	stw	r20,16(sp)
    6604:	3825883a 	mov	r18,r7
    6608:	3027883a 	mov	r19,r6
    660c:	0000b1c0 	call	b1c <__divsi3>
    6610:	00c00044 	movi	r3,1
    6614:	000b883a 	mov	r5,zero
    6618:	1880030e 	bge	r3,r2,6628 <__s2b+0x54>
    661c:	18c7883a 	add	r3,r3,r3
    6620:	29400044 	addi	r5,r5,1
    6624:	18bffd16 	blt	r3,r2,661c <__ram_exceptions_end+0xfbfe63c8>
    6628:	8809883a 	mov	r4,r17
    662c:	00063e40 	call	63e4 <_Balloc>
    6630:	d8c00717 	ldw	r3,28(sp)
    6634:	10c00515 	stw	r3,20(r2)
    6638:	00c00044 	movi	r3,1
    663c:	10c00415 	stw	r3,16(r2)
    6640:	00c00244 	movi	r3,9
    6644:	1cc0210e 	bge	r3,r19,66cc <__s2b+0xf8>
    6648:	80eb883a 	add	r21,r16,r3
    664c:	a829883a 	mov	r20,r21
    6650:	84e1883a 	add	r16,r16,r19
    6654:	a1c00007 	ldb	r7,0(r20)
    6658:	01800284 	movi	r6,10
    665c:	a5000044 	addi	r20,r20,1
    6660:	100b883a 	mov	r5,r2
    6664:	39fff404 	addi	r7,r7,-48
    6668:	8809883a 	mov	r4,r17
    666c:	00064b40 	call	64b4 <__multadd>
    6670:	a43ff81e 	bne	r20,r16,6654 <__ram_exceptions_end+0xfbfe6400>
    6674:	ace1883a 	add	r16,r21,r19
    6678:	843ffe04 	addi	r16,r16,-8
    667c:	9c800a0e 	bge	r19,r18,66a8 <__s2b+0xd4>
    6680:	94e5c83a 	sub	r18,r18,r19
    6684:	84a5883a 	add	r18,r16,r18
    6688:	81c00007 	ldb	r7,0(r16)
    668c:	01800284 	movi	r6,10
    6690:	84000044 	addi	r16,r16,1
    6694:	100b883a 	mov	r5,r2
    6698:	39fff404 	addi	r7,r7,-48
    669c:	8809883a 	mov	r4,r17
    66a0:	00064b40 	call	64b4 <__multadd>
    66a4:	84bff81e 	bne	r16,r18,6688 <__ram_exceptions_end+0xfbfe6434>
    66a8:	dfc00617 	ldw	ra,24(sp)
    66ac:	dd400517 	ldw	r21,20(sp)
    66b0:	dd000417 	ldw	r20,16(sp)
    66b4:	dcc00317 	ldw	r19,12(sp)
    66b8:	dc800217 	ldw	r18,8(sp)
    66bc:	dc400117 	ldw	r17,4(sp)
    66c0:	dc000017 	ldw	r16,0(sp)
    66c4:	dec00704 	addi	sp,sp,28
    66c8:	f800283a 	ret
    66cc:	84000284 	addi	r16,r16,10
    66d0:	1827883a 	mov	r19,r3
    66d4:	003fe906 	br	667c <__ram_exceptions_end+0xfbfe6428>

000066d8 <__hi0bits>:
    66d8:	20bfffec 	andhi	r2,r4,65535
    66dc:	1000141e 	bne	r2,zero,6730 <__hi0bits+0x58>
    66e0:	2008943a 	slli	r4,r4,16
    66e4:	00800404 	movi	r2,16
    66e8:	20ffc02c 	andhi	r3,r4,65280
    66ec:	1800021e 	bne	r3,zero,66f8 <__hi0bits+0x20>
    66f0:	2008923a 	slli	r4,r4,8
    66f4:	10800204 	addi	r2,r2,8
    66f8:	20fc002c 	andhi	r3,r4,61440
    66fc:	1800021e 	bne	r3,zero,6708 <__hi0bits+0x30>
    6700:	2008913a 	slli	r4,r4,4
    6704:	10800104 	addi	r2,r2,4
    6708:	20f0002c 	andhi	r3,r4,49152
    670c:	1800031e 	bne	r3,zero,671c <__hi0bits+0x44>
    6710:	2109883a 	add	r4,r4,r4
    6714:	10800084 	addi	r2,r2,2
    6718:	2109883a 	add	r4,r4,r4
    671c:	20000316 	blt	r4,zero,672c <__hi0bits+0x54>
    6720:	2110002c 	andhi	r4,r4,16384
    6724:	2000041e 	bne	r4,zero,6738 <__hi0bits+0x60>
    6728:	00800804 	movi	r2,32
    672c:	f800283a 	ret
    6730:	0005883a 	mov	r2,zero
    6734:	003fec06 	br	66e8 <__ram_exceptions_end+0xfbfe6494>
    6738:	10800044 	addi	r2,r2,1
    673c:	f800283a 	ret

00006740 <__lo0bits>:
    6740:	20c00017 	ldw	r3,0(r4)
    6744:	188001cc 	andi	r2,r3,7
    6748:	10000826 	beq	r2,zero,676c <__lo0bits+0x2c>
    674c:	1880004c 	andi	r2,r3,1
    6750:	1000211e 	bne	r2,zero,67d8 <__lo0bits+0x98>
    6754:	1880008c 	andi	r2,r3,2
    6758:	1000211e 	bne	r2,zero,67e0 <__lo0bits+0xa0>
    675c:	1806d0ba 	srli	r3,r3,2
    6760:	00800084 	movi	r2,2
    6764:	20c00015 	stw	r3,0(r4)
    6768:	f800283a 	ret
    676c:	18bfffcc 	andi	r2,r3,65535
    6770:	10001326 	beq	r2,zero,67c0 <__lo0bits+0x80>
    6774:	0005883a 	mov	r2,zero
    6778:	19403fcc 	andi	r5,r3,255
    677c:	2800021e 	bne	r5,zero,6788 <__lo0bits+0x48>
    6780:	1806d23a 	srli	r3,r3,8
    6784:	10800204 	addi	r2,r2,8
    6788:	194003cc 	andi	r5,r3,15
    678c:	2800021e 	bne	r5,zero,6798 <__lo0bits+0x58>
    6790:	1806d13a 	srli	r3,r3,4
    6794:	10800104 	addi	r2,r2,4
    6798:	194000cc 	andi	r5,r3,3
    679c:	2800021e 	bne	r5,zero,67a8 <__lo0bits+0x68>
    67a0:	1806d0ba 	srli	r3,r3,2
    67a4:	10800084 	addi	r2,r2,2
    67a8:	1940004c 	andi	r5,r3,1
    67ac:	2800081e 	bne	r5,zero,67d0 <__lo0bits+0x90>
    67b0:	1806d07a 	srli	r3,r3,1
    67b4:	1800051e 	bne	r3,zero,67cc <__lo0bits+0x8c>
    67b8:	00800804 	movi	r2,32
    67bc:	f800283a 	ret
    67c0:	1806d43a 	srli	r3,r3,16
    67c4:	00800404 	movi	r2,16
    67c8:	003feb06 	br	6778 <__ram_exceptions_end+0xfbfe6524>
    67cc:	10800044 	addi	r2,r2,1
    67d0:	20c00015 	stw	r3,0(r4)
    67d4:	f800283a 	ret
    67d8:	0005883a 	mov	r2,zero
    67dc:	f800283a 	ret
    67e0:	1806d07a 	srli	r3,r3,1
    67e4:	00800044 	movi	r2,1
    67e8:	20c00015 	stw	r3,0(r4)
    67ec:	f800283a 	ret

000067f0 <__i2b>:
    67f0:	defffd04 	addi	sp,sp,-12
    67f4:	dc000015 	stw	r16,0(sp)
    67f8:	04000044 	movi	r16,1
    67fc:	dc400115 	stw	r17,4(sp)
    6800:	2823883a 	mov	r17,r5
    6804:	800b883a 	mov	r5,r16
    6808:	dfc00215 	stw	ra,8(sp)
    680c:	00063e40 	call	63e4 <_Balloc>
    6810:	14400515 	stw	r17,20(r2)
    6814:	14000415 	stw	r16,16(r2)
    6818:	dfc00217 	ldw	ra,8(sp)
    681c:	dc400117 	ldw	r17,4(sp)
    6820:	dc000017 	ldw	r16,0(sp)
    6824:	dec00304 	addi	sp,sp,12
    6828:	f800283a 	ret

0000682c <__multiply>:
    682c:	defffa04 	addi	sp,sp,-24
    6830:	dcc00315 	stw	r19,12(sp)
    6834:	dc800215 	stw	r18,8(sp)
    6838:	34c00417 	ldw	r19,16(r6)
    683c:	2c800417 	ldw	r18,16(r5)
    6840:	dd000415 	stw	r20,16(sp)
    6844:	dc400115 	stw	r17,4(sp)
    6848:	dfc00515 	stw	ra,20(sp)
    684c:	dc000015 	stw	r16,0(sp)
    6850:	2829883a 	mov	r20,r5
    6854:	3023883a 	mov	r17,r6
    6858:	94c0050e 	bge	r18,r19,6870 <__multiply+0x44>
    685c:	9007883a 	mov	r3,r18
    6860:	3029883a 	mov	r20,r6
    6864:	9825883a 	mov	r18,r19
    6868:	2823883a 	mov	r17,r5
    686c:	1827883a 	mov	r19,r3
    6870:	a0800217 	ldw	r2,8(r20)
    6874:	94e1883a 	add	r16,r18,r19
    6878:	a1400117 	ldw	r5,4(r20)
    687c:	1400010e 	bge	r2,r16,6884 <__multiply+0x58>
    6880:	29400044 	addi	r5,r5,1
    6884:	00063e40 	call	63e4 <_Balloc>
    6888:	8415883a 	add	r10,r16,r16
    688c:	12c00504 	addi	r11,r2,20
    6890:	5295883a 	add	r10,r10,r10
    6894:	5a95883a 	add	r10,r11,r10
    6898:	5807883a 	mov	r3,r11
    689c:	5a80032e 	bgeu	r11,r10,68ac <__multiply+0x80>
    68a0:	18000015 	stw	zero,0(r3)
    68a4:	18c00104 	addi	r3,r3,4
    68a8:	1abffd36 	bltu	r3,r10,68a0 <__ram_exceptions_end+0xfbfe664c>
    68ac:	9ce7883a 	add	r19,r19,r19
    68b0:	94a5883a 	add	r18,r18,r18
    68b4:	89800504 	addi	r6,r17,20
    68b8:	9ce7883a 	add	r19,r19,r19
    68bc:	a3400504 	addi	r13,r20,20
    68c0:	94a5883a 	add	r18,r18,r18
    68c4:	34d9883a 	add	r12,r6,r19
    68c8:	6c93883a 	add	r9,r13,r18
    68cc:	3300422e 	bgeu	r6,r12,69d8 <__multiply+0x1ac>
    68d0:	37c00017 	ldw	ra,0(r6)
    68d4:	fbffffcc 	andi	r15,ra,65535
    68d8:	78001b26 	beq	r15,zero,6948 <__multiply+0x11c>
    68dc:	5811883a 	mov	r8,r11
    68e0:	681d883a 	mov	r14,r13
    68e4:	000f883a 	mov	r7,zero
    68e8:	71000017 	ldw	r4,0(r14)
    68ec:	40c00017 	ldw	r3,0(r8)
    68f0:	73800104 	addi	r14,r14,4
    68f4:	217fffcc 	andi	r5,r4,65535
    68f8:	2bcb383a 	mul	r5,r5,r15
    68fc:	2008d43a 	srli	r4,r4,16
    6900:	1c7fffcc 	andi	r17,r3,65535
    6904:	2c4b883a 	add	r5,r5,r17
    6908:	29cb883a 	add	r5,r5,r7
    690c:	23c9383a 	mul	r4,r4,r15
    6910:	1806d43a 	srli	r3,r3,16
    6914:	280ed43a 	srli	r7,r5,16
    6918:	297fffcc 	andi	r5,r5,65535
    691c:	20c7883a 	add	r3,r4,r3
    6920:	19c7883a 	add	r3,r3,r7
    6924:	1808943a 	slli	r4,r3,16
    6928:	4023883a 	mov	r17,r8
    692c:	180ed43a 	srli	r7,r3,16
    6930:	214ab03a 	or	r5,r4,r5
    6934:	41400015 	stw	r5,0(r8)
    6938:	42000104 	addi	r8,r8,4
    693c:	727fea36 	bltu	r14,r9,68e8 <__ram_exceptions_end+0xfbfe6694>
    6940:	89c00115 	stw	r7,4(r17)
    6944:	37c00017 	ldw	ra,0(r6)
    6948:	f83ed43a 	srli	ra,ra,16
    694c:	f8001f26 	beq	ra,zero,69cc <__multiply+0x1a0>
    6950:	58c00017 	ldw	r3,0(r11)
    6954:	681d883a 	mov	r14,r13
    6958:	581f883a 	mov	r15,r11
    695c:	1811883a 	mov	r8,r3
    6960:	5825883a 	mov	r18,r11
    6964:	000f883a 	mov	r7,zero
    6968:	00000106 	br	6970 <__multiply+0x144>
    696c:	8825883a 	mov	r18,r17
    6970:	7140000b 	ldhu	r5,0(r14)
    6974:	4010d43a 	srli	r8,r8,16
    6978:	193fffcc 	andi	r4,r3,65535
    697c:	2fcb383a 	mul	r5,r5,ra
    6980:	7bc00104 	addi	r15,r15,4
    6984:	73800104 	addi	r14,r14,4
    6988:	2a0b883a 	add	r5,r5,r8
    698c:	29cb883a 	add	r5,r5,r7
    6990:	2806943a 	slli	r3,r5,16
    6994:	94400104 	addi	r17,r18,4
    6998:	280ad43a 	srli	r5,r5,16
    699c:	1908b03a 	or	r4,r3,r4
    69a0:	793fff15 	stw	r4,-4(r15)
    69a4:	70ffff17 	ldw	r3,-4(r14)
    69a8:	8a000017 	ldw	r8,0(r17)
    69ac:	1806d43a 	srli	r3,r3,16
    69b0:	413fffcc 	andi	r4,r8,65535
    69b4:	1fc7383a 	mul	r3,r3,ra
    69b8:	1907883a 	add	r3,r3,r4
    69bc:	1947883a 	add	r3,r3,r5
    69c0:	180ed43a 	srli	r7,r3,16
    69c4:	727fe936 	bltu	r14,r9,696c <__ram_exceptions_end+0xfbfe6718>
    69c8:	90c00115 	stw	r3,4(r18)
    69cc:	31800104 	addi	r6,r6,4
    69d0:	5ac00104 	addi	r11,r11,4
    69d4:	333fbe36 	bltu	r6,r12,68d0 <__ram_exceptions_end+0xfbfe667c>
    69d8:	0400090e 	bge	zero,r16,6a00 <__multiply+0x1d4>
    69dc:	50ffff17 	ldw	r3,-4(r10)
    69e0:	52bfff04 	addi	r10,r10,-4
    69e4:	18000326 	beq	r3,zero,69f4 <__multiply+0x1c8>
    69e8:	00000506 	br	6a00 <__multiply+0x1d4>
    69ec:	50c00017 	ldw	r3,0(r10)
    69f0:	1800031e 	bne	r3,zero,6a00 <__multiply+0x1d4>
    69f4:	843fffc4 	addi	r16,r16,-1
    69f8:	52bfff04 	addi	r10,r10,-4
    69fc:	803ffb1e 	bne	r16,zero,69ec <__ram_exceptions_end+0xfbfe6798>
    6a00:	14000415 	stw	r16,16(r2)
    6a04:	dfc00517 	ldw	ra,20(sp)
    6a08:	dd000417 	ldw	r20,16(sp)
    6a0c:	dcc00317 	ldw	r19,12(sp)
    6a10:	dc800217 	ldw	r18,8(sp)
    6a14:	dc400117 	ldw	r17,4(sp)
    6a18:	dc000017 	ldw	r16,0(sp)
    6a1c:	dec00604 	addi	sp,sp,24
    6a20:	f800283a 	ret

00006a24 <__pow5mult>:
    6a24:	defffa04 	addi	sp,sp,-24
    6a28:	dcc00315 	stw	r19,12(sp)
    6a2c:	dc000015 	stw	r16,0(sp)
    6a30:	dfc00515 	stw	ra,20(sp)
    6a34:	dd000415 	stw	r20,16(sp)
    6a38:	dc800215 	stw	r18,8(sp)
    6a3c:	dc400115 	stw	r17,4(sp)
    6a40:	308000cc 	andi	r2,r6,3
    6a44:	3021883a 	mov	r16,r6
    6a48:	2027883a 	mov	r19,r4
    6a4c:	10002f1e 	bne	r2,zero,6b0c <__pow5mult+0xe8>
    6a50:	2825883a 	mov	r18,r5
    6a54:	8021d0ba 	srai	r16,r16,2
    6a58:	80001a26 	beq	r16,zero,6ac4 <__pow5mult+0xa0>
    6a5c:	9c401217 	ldw	r17,72(r19)
    6a60:	8800061e 	bne	r17,zero,6a7c <__pow5mult+0x58>
    6a64:	00003406 	br	6b38 <__pow5mult+0x114>
    6a68:	8021d07a 	srai	r16,r16,1
    6a6c:	80001526 	beq	r16,zero,6ac4 <__pow5mult+0xa0>
    6a70:	88800017 	ldw	r2,0(r17)
    6a74:	10001c26 	beq	r2,zero,6ae8 <__pow5mult+0xc4>
    6a78:	1023883a 	mov	r17,r2
    6a7c:	8080004c 	andi	r2,r16,1
    6a80:	103ff926 	beq	r2,zero,6a68 <__ram_exceptions_end+0xfbfe6814>
    6a84:	880d883a 	mov	r6,r17
    6a88:	900b883a 	mov	r5,r18
    6a8c:	9809883a 	mov	r4,r19
    6a90:	000682c0 	call	682c <__multiply>
    6a94:	90001b26 	beq	r18,zero,6b04 <__pow5mult+0xe0>
    6a98:	91000117 	ldw	r4,4(r18)
    6a9c:	98c01317 	ldw	r3,76(r19)
    6aa0:	8021d07a 	srai	r16,r16,1
    6aa4:	2109883a 	add	r4,r4,r4
    6aa8:	2109883a 	add	r4,r4,r4
    6aac:	1907883a 	add	r3,r3,r4
    6ab0:	19000017 	ldw	r4,0(r3)
    6ab4:	91000015 	stw	r4,0(r18)
    6ab8:	1c800015 	stw	r18,0(r3)
    6abc:	1025883a 	mov	r18,r2
    6ac0:	803feb1e 	bne	r16,zero,6a70 <__ram_exceptions_end+0xfbfe681c>
    6ac4:	9005883a 	mov	r2,r18
    6ac8:	dfc00517 	ldw	ra,20(sp)
    6acc:	dd000417 	ldw	r20,16(sp)
    6ad0:	dcc00317 	ldw	r19,12(sp)
    6ad4:	dc800217 	ldw	r18,8(sp)
    6ad8:	dc400117 	ldw	r17,4(sp)
    6adc:	dc000017 	ldw	r16,0(sp)
    6ae0:	dec00604 	addi	sp,sp,24
    6ae4:	f800283a 	ret
    6ae8:	880d883a 	mov	r6,r17
    6aec:	880b883a 	mov	r5,r17
    6af0:	9809883a 	mov	r4,r19
    6af4:	000682c0 	call	682c <__multiply>
    6af8:	88800015 	stw	r2,0(r17)
    6afc:	10000015 	stw	zero,0(r2)
    6b00:	003fdd06 	br	6a78 <__ram_exceptions_end+0xfbfe6824>
    6b04:	1025883a 	mov	r18,r2
    6b08:	003fd706 	br	6a68 <__ram_exceptions_end+0xfbfe6814>
    6b0c:	10bfffc4 	addi	r2,r2,-1
    6b10:	1085883a 	add	r2,r2,r2
    6b14:	00c00074 	movhi	r3,1
    6b18:	18c06f04 	addi	r3,r3,444
    6b1c:	1085883a 	add	r2,r2,r2
    6b20:	1885883a 	add	r2,r3,r2
    6b24:	11800017 	ldw	r6,0(r2)
    6b28:	000f883a 	mov	r7,zero
    6b2c:	00064b40 	call	64b4 <__multadd>
    6b30:	1025883a 	mov	r18,r2
    6b34:	003fc706 	br	6a54 <__ram_exceptions_end+0xfbfe6800>
    6b38:	05000044 	movi	r20,1
    6b3c:	a00b883a 	mov	r5,r20
    6b40:	9809883a 	mov	r4,r19
    6b44:	00063e40 	call	63e4 <_Balloc>
    6b48:	1023883a 	mov	r17,r2
    6b4c:	00809c44 	movi	r2,625
    6b50:	88800515 	stw	r2,20(r17)
    6b54:	8d000415 	stw	r20,16(r17)
    6b58:	9c401215 	stw	r17,72(r19)
    6b5c:	88000015 	stw	zero,0(r17)
    6b60:	003fc606 	br	6a7c <__ram_exceptions_end+0xfbfe6828>

00006b64 <__lshift>:
    6b64:	defff904 	addi	sp,sp,-28
    6b68:	dd400515 	stw	r21,20(sp)
    6b6c:	dcc00315 	stw	r19,12(sp)
    6b70:	302bd17a 	srai	r21,r6,5
    6b74:	2cc00417 	ldw	r19,16(r5)
    6b78:	28800217 	ldw	r2,8(r5)
    6b7c:	dd000415 	stw	r20,16(sp)
    6b80:	ace7883a 	add	r19,r21,r19
    6b84:	dc800215 	stw	r18,8(sp)
    6b88:	dc400115 	stw	r17,4(sp)
    6b8c:	dc000015 	stw	r16,0(sp)
    6b90:	dfc00615 	stw	ra,24(sp)
    6b94:	9c000044 	addi	r16,r19,1
    6b98:	2823883a 	mov	r17,r5
    6b9c:	3029883a 	mov	r20,r6
    6ba0:	2025883a 	mov	r18,r4
    6ba4:	29400117 	ldw	r5,4(r5)
    6ba8:	1400030e 	bge	r2,r16,6bb8 <__lshift+0x54>
    6bac:	1085883a 	add	r2,r2,r2
    6bb0:	29400044 	addi	r5,r5,1
    6bb4:	143ffd16 	blt	r2,r16,6bac <__ram_exceptions_end+0xfbfe6958>
    6bb8:	9009883a 	mov	r4,r18
    6bbc:	00063e40 	call	63e4 <_Balloc>
    6bc0:	10c00504 	addi	r3,r2,20
    6bc4:	0540070e 	bge	zero,r21,6be4 <__lshift+0x80>
    6bc8:	ad6b883a 	add	r21,r21,r21
    6bcc:	ad6b883a 	add	r21,r21,r21
    6bd0:	1809883a 	mov	r4,r3
    6bd4:	1d47883a 	add	r3,r3,r21
    6bd8:	20000015 	stw	zero,0(r4)
    6bdc:	21000104 	addi	r4,r4,4
    6be0:	193ffd1e 	bne	r3,r4,6bd8 <__ram_exceptions_end+0xfbfe6984>
    6be4:	8a000417 	ldw	r8,16(r17)
    6be8:	89000504 	addi	r4,r17,20
    6bec:	a18007cc 	andi	r6,r20,31
    6bf0:	4211883a 	add	r8,r8,r8
    6bf4:	4211883a 	add	r8,r8,r8
    6bf8:	2211883a 	add	r8,r4,r8
    6bfc:	30002326 	beq	r6,zero,6c8c <__lshift+0x128>
    6c00:	02400804 	movi	r9,32
    6c04:	4993c83a 	sub	r9,r9,r6
    6c08:	000b883a 	mov	r5,zero
    6c0c:	21c00017 	ldw	r7,0(r4)
    6c10:	1815883a 	mov	r10,r3
    6c14:	18c00104 	addi	r3,r3,4
    6c18:	398e983a 	sll	r7,r7,r6
    6c1c:	21000104 	addi	r4,r4,4
    6c20:	394ab03a 	or	r5,r7,r5
    6c24:	197fff15 	stw	r5,-4(r3)
    6c28:	217fff17 	ldw	r5,-4(r4)
    6c2c:	2a4ad83a 	srl	r5,r5,r9
    6c30:	223ff636 	bltu	r4,r8,6c0c <__ram_exceptions_end+0xfbfe69b8>
    6c34:	51400115 	stw	r5,4(r10)
    6c38:	28001a1e 	bne	r5,zero,6ca4 <__lshift+0x140>
    6c3c:	843fffc4 	addi	r16,r16,-1
    6c40:	14000415 	stw	r16,16(r2)
    6c44:	88000826 	beq	r17,zero,6c68 <__lshift+0x104>
    6c48:	89000117 	ldw	r4,4(r17)
    6c4c:	90c01317 	ldw	r3,76(r18)
    6c50:	2109883a 	add	r4,r4,r4
    6c54:	2109883a 	add	r4,r4,r4
    6c58:	1907883a 	add	r3,r3,r4
    6c5c:	19000017 	ldw	r4,0(r3)
    6c60:	89000015 	stw	r4,0(r17)
    6c64:	1c400015 	stw	r17,0(r3)
    6c68:	dfc00617 	ldw	ra,24(sp)
    6c6c:	dd400517 	ldw	r21,20(sp)
    6c70:	dd000417 	ldw	r20,16(sp)
    6c74:	dcc00317 	ldw	r19,12(sp)
    6c78:	dc800217 	ldw	r18,8(sp)
    6c7c:	dc400117 	ldw	r17,4(sp)
    6c80:	dc000017 	ldw	r16,0(sp)
    6c84:	dec00704 	addi	sp,sp,28
    6c88:	f800283a 	ret
    6c8c:	21400017 	ldw	r5,0(r4)
    6c90:	18c00104 	addi	r3,r3,4
    6c94:	21000104 	addi	r4,r4,4
    6c98:	197fff15 	stw	r5,-4(r3)
    6c9c:	223ffb36 	bltu	r4,r8,6c8c <__ram_exceptions_end+0xfbfe6a38>
    6ca0:	003fe606 	br	6c3c <__ram_exceptions_end+0xfbfe69e8>
    6ca4:	9c000084 	addi	r16,r19,2
    6ca8:	003fe406 	br	6c3c <__ram_exceptions_end+0xfbfe69e8>

00006cac <__mcmp>:
    6cac:	20800417 	ldw	r2,16(r4)
    6cb0:	28c00417 	ldw	r3,16(r5)
    6cb4:	10c5c83a 	sub	r2,r2,r3
    6cb8:	1000111e 	bne	r2,zero,6d00 <__mcmp+0x54>
    6cbc:	18c7883a 	add	r3,r3,r3
    6cc0:	18c7883a 	add	r3,r3,r3
    6cc4:	21000504 	addi	r4,r4,20
    6cc8:	29400504 	addi	r5,r5,20
    6ccc:	20c5883a 	add	r2,r4,r3
    6cd0:	28cb883a 	add	r5,r5,r3
    6cd4:	00000106 	br	6cdc <__mcmp+0x30>
    6cd8:	20800a2e 	bgeu	r4,r2,6d04 <__mcmp+0x58>
    6cdc:	10bfff04 	addi	r2,r2,-4
    6ce0:	297fff04 	addi	r5,r5,-4
    6ce4:	11800017 	ldw	r6,0(r2)
    6ce8:	28c00017 	ldw	r3,0(r5)
    6cec:	30fffa26 	beq	r6,r3,6cd8 <__ram_exceptions_end+0xfbfe6a84>
    6cf0:	30c00236 	bltu	r6,r3,6cfc <__mcmp+0x50>
    6cf4:	00800044 	movi	r2,1
    6cf8:	f800283a 	ret
    6cfc:	00bfffc4 	movi	r2,-1
    6d00:	f800283a 	ret
    6d04:	0005883a 	mov	r2,zero
    6d08:	f800283a 	ret

00006d0c <__mdiff>:
    6d0c:	28c00417 	ldw	r3,16(r5)
    6d10:	30800417 	ldw	r2,16(r6)
    6d14:	defffa04 	addi	sp,sp,-24
    6d18:	dcc00315 	stw	r19,12(sp)
    6d1c:	dc800215 	stw	r18,8(sp)
    6d20:	dfc00515 	stw	ra,20(sp)
    6d24:	dd000415 	stw	r20,16(sp)
    6d28:	dc400115 	stw	r17,4(sp)
    6d2c:	dc000015 	stw	r16,0(sp)
    6d30:	1887c83a 	sub	r3,r3,r2
    6d34:	2825883a 	mov	r18,r5
    6d38:	3027883a 	mov	r19,r6
    6d3c:	1800141e 	bne	r3,zero,6d90 <__mdiff+0x84>
    6d40:	1085883a 	add	r2,r2,r2
    6d44:	1085883a 	add	r2,r2,r2
    6d48:	2a000504 	addi	r8,r5,20
    6d4c:	34000504 	addi	r16,r6,20
    6d50:	4087883a 	add	r3,r8,r2
    6d54:	8085883a 	add	r2,r16,r2
    6d58:	00000106 	br	6d60 <__mdiff+0x54>
    6d5c:	40c0592e 	bgeu	r8,r3,6ec4 <__mdiff+0x1b8>
    6d60:	18ffff04 	addi	r3,r3,-4
    6d64:	10bfff04 	addi	r2,r2,-4
    6d68:	19c00017 	ldw	r7,0(r3)
    6d6c:	11400017 	ldw	r5,0(r2)
    6d70:	397ffa26 	beq	r7,r5,6d5c <__ram_exceptions_end+0xfbfe6b08>
    6d74:	3940592e 	bgeu	r7,r5,6edc <__mdiff+0x1d0>
    6d78:	9005883a 	mov	r2,r18
    6d7c:	4023883a 	mov	r17,r8
    6d80:	9825883a 	mov	r18,r19
    6d84:	05000044 	movi	r20,1
    6d88:	1027883a 	mov	r19,r2
    6d8c:	00000406 	br	6da0 <__mdiff+0x94>
    6d90:	18005616 	blt	r3,zero,6eec <__mdiff+0x1e0>
    6d94:	34400504 	addi	r17,r6,20
    6d98:	2c000504 	addi	r16,r5,20
    6d9c:	0029883a 	mov	r20,zero
    6da0:	91400117 	ldw	r5,4(r18)
    6da4:	00063e40 	call	63e4 <_Balloc>
    6da8:	92400417 	ldw	r9,16(r18)
    6dac:	9b000417 	ldw	r12,16(r19)
    6db0:	12c00504 	addi	r11,r2,20
    6db4:	4a51883a 	add	r8,r9,r9
    6db8:	6319883a 	add	r12,r12,r12
    6dbc:	4211883a 	add	r8,r8,r8
    6dc0:	6319883a 	add	r12,r12,r12
    6dc4:	15000315 	stw	r20,12(r2)
    6dc8:	8211883a 	add	r8,r16,r8
    6dcc:	8b19883a 	add	r12,r17,r12
    6dd0:	0007883a 	mov	r3,zero
    6dd4:	81400017 	ldw	r5,0(r16)
    6dd8:	89c00017 	ldw	r7,0(r17)
    6ddc:	59800104 	addi	r6,r11,4
    6de0:	293fffcc 	andi	r4,r5,65535
    6de4:	20c7883a 	add	r3,r4,r3
    6de8:	393fffcc 	andi	r4,r7,65535
    6dec:	1909c83a 	sub	r4,r3,r4
    6df0:	280ad43a 	srli	r5,r5,16
    6df4:	380ed43a 	srli	r7,r7,16
    6df8:	2007d43a 	srai	r3,r4,16
    6dfc:	213fffcc 	andi	r4,r4,65535
    6e00:	29cbc83a 	sub	r5,r5,r7
    6e04:	28c7883a 	add	r3,r5,r3
    6e08:	180a943a 	slli	r5,r3,16
    6e0c:	8c400104 	addi	r17,r17,4
    6e10:	84000104 	addi	r16,r16,4
    6e14:	2908b03a 	or	r4,r5,r4
    6e18:	59000015 	stw	r4,0(r11)
    6e1c:	1807d43a 	srai	r3,r3,16
    6e20:	3015883a 	mov	r10,r6
    6e24:	3017883a 	mov	r11,r6
    6e28:	8b3fea36 	bltu	r17,r12,6dd4 <__ram_exceptions_end+0xfbfe6b80>
    6e2c:	8200162e 	bgeu	r16,r8,6e88 <__mdiff+0x17c>
    6e30:	8017883a 	mov	r11,r16
    6e34:	59400017 	ldw	r5,0(r11)
    6e38:	31800104 	addi	r6,r6,4
    6e3c:	5ac00104 	addi	r11,r11,4
    6e40:	293fffcc 	andi	r4,r5,65535
    6e44:	20c7883a 	add	r3,r4,r3
    6e48:	280ed43a 	srli	r7,r5,16
    6e4c:	180bd43a 	srai	r5,r3,16
    6e50:	193fffcc 	andi	r4,r3,65535
    6e54:	3947883a 	add	r3,r7,r5
    6e58:	180a943a 	slli	r5,r3,16
    6e5c:	1807d43a 	srai	r3,r3,16
    6e60:	2908b03a 	or	r4,r5,r4
    6e64:	313fff15 	stw	r4,-4(r6)
    6e68:	5a3ff236 	bltu	r11,r8,6e34 <__ram_exceptions_end+0xfbfe6be0>
    6e6c:	0406303a 	nor	r3,zero,r16
    6e70:	1a07883a 	add	r3,r3,r8
    6e74:	1806d0ba 	srli	r3,r3,2
    6e78:	18c00044 	addi	r3,r3,1
    6e7c:	18c7883a 	add	r3,r3,r3
    6e80:	18c7883a 	add	r3,r3,r3
    6e84:	50d5883a 	add	r10,r10,r3
    6e88:	50ffff04 	addi	r3,r10,-4
    6e8c:	2000041e 	bne	r4,zero,6ea0 <__mdiff+0x194>
    6e90:	18ffff04 	addi	r3,r3,-4
    6e94:	19000017 	ldw	r4,0(r3)
    6e98:	4a7fffc4 	addi	r9,r9,-1
    6e9c:	203ffc26 	beq	r4,zero,6e90 <__ram_exceptions_end+0xfbfe6c3c>
    6ea0:	12400415 	stw	r9,16(r2)
    6ea4:	dfc00517 	ldw	ra,20(sp)
    6ea8:	dd000417 	ldw	r20,16(sp)
    6eac:	dcc00317 	ldw	r19,12(sp)
    6eb0:	dc800217 	ldw	r18,8(sp)
    6eb4:	dc400117 	ldw	r17,4(sp)
    6eb8:	dc000017 	ldw	r16,0(sp)
    6ebc:	dec00604 	addi	sp,sp,24
    6ec0:	f800283a 	ret
    6ec4:	000b883a 	mov	r5,zero
    6ec8:	00063e40 	call	63e4 <_Balloc>
    6ecc:	00c00044 	movi	r3,1
    6ed0:	10c00415 	stw	r3,16(r2)
    6ed4:	10000515 	stw	zero,20(r2)
    6ed8:	003ff206 	br	6ea4 <__ram_exceptions_end+0xfbfe6c50>
    6edc:	8023883a 	mov	r17,r16
    6ee0:	0029883a 	mov	r20,zero
    6ee4:	4021883a 	mov	r16,r8
    6ee8:	003fad06 	br	6da0 <__ram_exceptions_end+0xfbfe6b4c>
    6eec:	9005883a 	mov	r2,r18
    6ef0:	94400504 	addi	r17,r18,20
    6ef4:	9c000504 	addi	r16,r19,20
    6ef8:	9825883a 	mov	r18,r19
    6efc:	05000044 	movi	r20,1
    6f00:	1027883a 	mov	r19,r2
    6f04:	003fa606 	br	6da0 <__ram_exceptions_end+0xfbfe6b4c>

00006f08 <__ulp>:
    6f08:	295ffc2c 	andhi	r5,r5,32752
    6f0c:	00bf3034 	movhi	r2,64704
    6f10:	2887883a 	add	r3,r5,r2
    6f14:	00c0020e 	bge	zero,r3,6f20 <__ulp+0x18>
    6f18:	0005883a 	mov	r2,zero
    6f1c:	f800283a 	ret
    6f20:	00c7c83a 	sub	r3,zero,r3
    6f24:	1807d53a 	srai	r3,r3,20
    6f28:	008004c4 	movi	r2,19
    6f2c:	10c00b0e 	bge	r2,r3,6f5c <__ulp+0x54>
    6f30:	18bffb04 	addi	r2,r3,-20
    6f34:	01000784 	movi	r4,30
    6f38:	0007883a 	mov	r3,zero
    6f3c:	20800516 	blt	r4,r2,6f54 <__ulp+0x4c>
    6f40:	010007c4 	movi	r4,31
    6f44:	2089c83a 	sub	r4,r4,r2
    6f48:	00800044 	movi	r2,1
    6f4c:	1104983a 	sll	r2,r2,r4
    6f50:	f800283a 	ret
    6f54:	00800044 	movi	r2,1
    6f58:	f800283a 	ret
    6f5c:	01400234 	movhi	r5,8
    6f60:	28c7d83a 	sra	r3,r5,r3
    6f64:	0005883a 	mov	r2,zero
    6f68:	f800283a 	ret

00006f6c <__b2d>:
    6f6c:	defffa04 	addi	sp,sp,-24
    6f70:	dc000015 	stw	r16,0(sp)
    6f74:	24000417 	ldw	r16,16(r4)
    6f78:	dc400115 	stw	r17,4(sp)
    6f7c:	24400504 	addi	r17,r4,20
    6f80:	8421883a 	add	r16,r16,r16
    6f84:	8421883a 	add	r16,r16,r16
    6f88:	8c21883a 	add	r16,r17,r16
    6f8c:	dc800215 	stw	r18,8(sp)
    6f90:	84bfff17 	ldw	r18,-4(r16)
    6f94:	dd000415 	stw	r20,16(sp)
    6f98:	dcc00315 	stw	r19,12(sp)
    6f9c:	9009883a 	mov	r4,r18
    6fa0:	2829883a 	mov	r20,r5
    6fa4:	dfc00515 	stw	ra,20(sp)
    6fa8:	00066d80 	call	66d8 <__hi0bits>
    6fac:	00c00804 	movi	r3,32
    6fb0:	1889c83a 	sub	r4,r3,r2
    6fb4:	a1000015 	stw	r4,0(r20)
    6fb8:	01000284 	movi	r4,10
    6fbc:	84ffff04 	addi	r19,r16,-4
    6fc0:	20801216 	blt	r4,r2,700c <__b2d+0xa0>
    6fc4:	018002c4 	movi	r6,11
    6fc8:	308dc83a 	sub	r6,r6,r2
    6fcc:	9186d83a 	srl	r3,r18,r6
    6fd0:	18cffc34 	orhi	r3,r3,16368
    6fd4:	8cc0212e 	bgeu	r17,r19,705c <__b2d+0xf0>
    6fd8:	813ffe17 	ldw	r4,-8(r16)
    6fdc:	218cd83a 	srl	r6,r4,r6
    6fe0:	10800544 	addi	r2,r2,21
    6fe4:	9084983a 	sll	r2,r18,r2
    6fe8:	1184b03a 	or	r2,r2,r6
    6fec:	dfc00517 	ldw	ra,20(sp)
    6ff0:	dd000417 	ldw	r20,16(sp)
    6ff4:	dcc00317 	ldw	r19,12(sp)
    6ff8:	dc800217 	ldw	r18,8(sp)
    6ffc:	dc400117 	ldw	r17,4(sp)
    7000:	dc000017 	ldw	r16,0(sp)
    7004:	dec00604 	addi	sp,sp,24
    7008:	f800283a 	ret
    700c:	8cc00f2e 	bgeu	r17,r19,704c <__b2d+0xe0>
    7010:	117ffd44 	addi	r5,r2,-11
    7014:	80bffe17 	ldw	r2,-8(r16)
    7018:	28000e26 	beq	r5,zero,7054 <__b2d+0xe8>
    701c:	1949c83a 	sub	r4,r3,r5
    7020:	9164983a 	sll	r18,r18,r5
    7024:	1106d83a 	srl	r3,r2,r4
    7028:	81bffe04 	addi	r6,r16,-8
    702c:	948ffc34 	orhi	r18,r18,16368
    7030:	90c6b03a 	or	r3,r18,r3
    7034:	89800e2e 	bgeu	r17,r6,7070 <__b2d+0x104>
    7038:	81bffd17 	ldw	r6,-12(r16)
    703c:	1144983a 	sll	r2,r2,r5
    7040:	310ad83a 	srl	r5,r6,r4
    7044:	2884b03a 	or	r2,r5,r2
    7048:	003fe806 	br	6fec <__ram_exceptions_end+0xfbfe6d98>
    704c:	10bffd44 	addi	r2,r2,-11
    7050:	1000041e 	bne	r2,zero,7064 <__b2d+0xf8>
    7054:	90cffc34 	orhi	r3,r18,16368
    7058:	003fe406 	br	6fec <__ram_exceptions_end+0xfbfe6d98>
    705c:	000d883a 	mov	r6,zero
    7060:	003fdf06 	br	6fe0 <__ram_exceptions_end+0xfbfe6d8c>
    7064:	90a4983a 	sll	r18,r18,r2
    7068:	0005883a 	mov	r2,zero
    706c:	003ff906 	br	7054 <__ram_exceptions_end+0xfbfe6e00>
    7070:	1144983a 	sll	r2,r2,r5
    7074:	003fdd06 	br	6fec <__ram_exceptions_end+0xfbfe6d98>

00007078 <__d2b>:
    7078:	defff804 	addi	sp,sp,-32
    707c:	dc000215 	stw	r16,8(sp)
    7080:	3021883a 	mov	r16,r6
    7084:	dc400315 	stw	r17,12(sp)
    7088:	8022907a 	slli	r17,r16,1
    708c:	dd000615 	stw	r20,24(sp)
    7090:	2829883a 	mov	r20,r5
    7094:	01400044 	movi	r5,1
    7098:	dcc00515 	stw	r19,20(sp)
    709c:	dc800415 	stw	r18,16(sp)
    70a0:	dfc00715 	stw	ra,28(sp)
    70a4:	3825883a 	mov	r18,r7
    70a8:	8822d57a 	srli	r17,r17,21
    70ac:	00063e40 	call	63e4 <_Balloc>
    70b0:	1027883a 	mov	r19,r2
    70b4:	00800434 	movhi	r2,16
    70b8:	10bfffc4 	addi	r2,r2,-1
    70bc:	808c703a 	and	r6,r16,r2
    70c0:	88000126 	beq	r17,zero,70c8 <__d2b+0x50>
    70c4:	31800434 	orhi	r6,r6,16
    70c8:	d9800015 	stw	r6,0(sp)
    70cc:	a0002426 	beq	r20,zero,7160 <__d2b+0xe8>
    70d0:	d9000104 	addi	r4,sp,4
    70d4:	dd000115 	stw	r20,4(sp)
    70d8:	00067400 	call	6740 <__lo0bits>
    70dc:	d8c00017 	ldw	r3,0(sp)
    70e0:	10002f1e 	bne	r2,zero,71a0 <__d2b+0x128>
    70e4:	d9000117 	ldw	r4,4(sp)
    70e8:	99000515 	stw	r4,20(r19)
    70ec:	1821003a 	cmpeq	r16,r3,zero
    70f0:	01000084 	movi	r4,2
    70f4:	2421c83a 	sub	r16,r4,r16
    70f8:	98c00615 	stw	r3,24(r19)
    70fc:	9c000415 	stw	r16,16(r19)
    7100:	88001f1e 	bne	r17,zero,7180 <__d2b+0x108>
    7104:	10bef384 	addi	r2,r2,-1074
    7108:	90800015 	stw	r2,0(r18)
    710c:	00900034 	movhi	r2,16384
    7110:	10bfffc4 	addi	r2,r2,-1
    7114:	8085883a 	add	r2,r16,r2
    7118:	1085883a 	add	r2,r2,r2
    711c:	1085883a 	add	r2,r2,r2
    7120:	9885883a 	add	r2,r19,r2
    7124:	11000517 	ldw	r4,20(r2)
    7128:	8020917a 	slli	r16,r16,5
    712c:	00066d80 	call	66d8 <__hi0bits>
    7130:	d8c00817 	ldw	r3,32(sp)
    7134:	8085c83a 	sub	r2,r16,r2
    7138:	18800015 	stw	r2,0(r3)
    713c:	9805883a 	mov	r2,r19
    7140:	dfc00717 	ldw	ra,28(sp)
    7144:	dd000617 	ldw	r20,24(sp)
    7148:	dcc00517 	ldw	r19,20(sp)
    714c:	dc800417 	ldw	r18,16(sp)
    7150:	dc400317 	ldw	r17,12(sp)
    7154:	dc000217 	ldw	r16,8(sp)
    7158:	dec00804 	addi	sp,sp,32
    715c:	f800283a 	ret
    7160:	d809883a 	mov	r4,sp
    7164:	00067400 	call	6740 <__lo0bits>
    7168:	d8c00017 	ldw	r3,0(sp)
    716c:	04000044 	movi	r16,1
    7170:	9c000415 	stw	r16,16(r19)
    7174:	98c00515 	stw	r3,20(r19)
    7178:	10800804 	addi	r2,r2,32
    717c:	883fe126 	beq	r17,zero,7104 <__ram_exceptions_end+0xfbfe6eb0>
    7180:	00c00d44 	movi	r3,53
    7184:	8c7ef344 	addi	r17,r17,-1075
    7188:	88a3883a 	add	r17,r17,r2
    718c:	1885c83a 	sub	r2,r3,r2
    7190:	d8c00817 	ldw	r3,32(sp)
    7194:	94400015 	stw	r17,0(r18)
    7198:	18800015 	stw	r2,0(r3)
    719c:	003fe706 	br	713c <__ram_exceptions_end+0xfbfe6ee8>
    71a0:	01000804 	movi	r4,32
    71a4:	2089c83a 	sub	r4,r4,r2
    71a8:	1908983a 	sll	r4,r3,r4
    71ac:	d9400117 	ldw	r5,4(sp)
    71b0:	1886d83a 	srl	r3,r3,r2
    71b4:	2148b03a 	or	r4,r4,r5
    71b8:	99000515 	stw	r4,20(r19)
    71bc:	d8c00015 	stw	r3,0(sp)
    71c0:	003fca06 	br	70ec <__ram_exceptions_end+0xfbfe6e98>

000071c4 <__ratio>:
    71c4:	defff904 	addi	sp,sp,-28
    71c8:	dc400315 	stw	r17,12(sp)
    71cc:	2823883a 	mov	r17,r5
    71d0:	d9400104 	addi	r5,sp,4
    71d4:	dfc00615 	stw	ra,24(sp)
    71d8:	dcc00515 	stw	r19,20(sp)
    71dc:	dc800415 	stw	r18,16(sp)
    71e0:	2027883a 	mov	r19,r4
    71e4:	dc000215 	stw	r16,8(sp)
    71e8:	0006f6c0 	call	6f6c <__b2d>
    71ec:	d80b883a 	mov	r5,sp
    71f0:	8809883a 	mov	r4,r17
    71f4:	1025883a 	mov	r18,r2
    71f8:	1821883a 	mov	r16,r3
    71fc:	0006f6c0 	call	6f6c <__b2d>
    7200:	8a000417 	ldw	r8,16(r17)
    7204:	99000417 	ldw	r4,16(r19)
    7208:	d9400117 	ldw	r5,4(sp)
    720c:	2209c83a 	sub	r4,r4,r8
    7210:	2010917a 	slli	r8,r4,5
    7214:	d9000017 	ldw	r4,0(sp)
    7218:	2909c83a 	sub	r4,r5,r4
    721c:	4109883a 	add	r4,r8,r4
    7220:	01000e0e 	bge	zero,r4,725c <__ratio+0x98>
    7224:	2008953a 	slli	r4,r4,20
    7228:	2421883a 	add	r16,r4,r16
    722c:	100d883a 	mov	r6,r2
    7230:	180f883a 	mov	r7,r3
    7234:	9009883a 	mov	r4,r18
    7238:	800b883a 	mov	r5,r16
    723c:	000b5ac0 	call	b5ac <__divdf3>
    7240:	dfc00617 	ldw	ra,24(sp)
    7244:	dcc00517 	ldw	r19,20(sp)
    7248:	dc800417 	ldw	r18,16(sp)
    724c:	dc400317 	ldw	r17,12(sp)
    7250:	dc000217 	ldw	r16,8(sp)
    7254:	dec00704 	addi	sp,sp,28
    7258:	f800283a 	ret
    725c:	2008953a 	slli	r4,r4,20
    7260:	1907c83a 	sub	r3,r3,r4
    7264:	003ff106 	br	722c <__ram_exceptions_end+0xfbfe6fd8>

00007268 <_mprec_log10>:
    7268:	defffe04 	addi	sp,sp,-8
    726c:	dc000015 	stw	r16,0(sp)
    7270:	dfc00115 	stw	ra,4(sp)
    7274:	008005c4 	movi	r2,23
    7278:	2021883a 	mov	r16,r4
    727c:	11000d0e 	bge	r2,r4,72b4 <_mprec_log10+0x4c>
    7280:	0005883a 	mov	r2,zero
    7284:	00cffc34 	movhi	r3,16368
    7288:	843fffc4 	addi	r16,r16,-1
    728c:	000d883a 	mov	r6,zero
    7290:	01d00934 	movhi	r7,16420
    7294:	1009883a 	mov	r4,r2
    7298:	180b883a 	mov	r5,r3
    729c:	000c0ec0 	call	c0ec <__muldf3>
    72a0:	803ff91e 	bne	r16,zero,7288 <__ram_exceptions_end+0xfbfe7034>
    72a4:	dfc00117 	ldw	ra,4(sp)
    72a8:	dc000017 	ldw	r16,0(sp)
    72ac:	dec00204 	addi	sp,sp,8
    72b0:	f800283a 	ret
    72b4:	202090fa 	slli	r16,r4,3
    72b8:	00800074 	movhi	r2,1
    72bc:	10808604 	addi	r2,r2,536
    72c0:	1421883a 	add	r16,r2,r16
    72c4:	80800017 	ldw	r2,0(r16)
    72c8:	80c00117 	ldw	r3,4(r16)
    72cc:	dfc00117 	ldw	ra,4(sp)
    72d0:	dc000017 	ldw	r16,0(sp)
    72d4:	dec00204 	addi	sp,sp,8
    72d8:	f800283a 	ret

000072dc <__copybits>:
    72dc:	297fffc4 	addi	r5,r5,-1
    72e0:	280fd17a 	srai	r7,r5,5
    72e4:	30c00417 	ldw	r3,16(r6)
    72e8:	30800504 	addi	r2,r6,20
    72ec:	39c00044 	addi	r7,r7,1
    72f0:	18c7883a 	add	r3,r3,r3
    72f4:	39cf883a 	add	r7,r7,r7
    72f8:	18c7883a 	add	r3,r3,r3
    72fc:	39cf883a 	add	r7,r7,r7
    7300:	10c7883a 	add	r3,r2,r3
    7304:	21cf883a 	add	r7,r4,r7
    7308:	10c00d2e 	bgeu	r2,r3,7340 <__copybits+0x64>
    730c:	200b883a 	mov	r5,r4
    7310:	12000017 	ldw	r8,0(r2)
    7314:	29400104 	addi	r5,r5,4
    7318:	10800104 	addi	r2,r2,4
    731c:	2a3fff15 	stw	r8,-4(r5)
    7320:	10fffb36 	bltu	r2,r3,7310 <__ram_exceptions_end+0xfbfe70bc>
    7324:	1985c83a 	sub	r2,r3,r6
    7328:	10bffac4 	addi	r2,r2,-21
    732c:	1004d0ba 	srli	r2,r2,2
    7330:	10800044 	addi	r2,r2,1
    7334:	1085883a 	add	r2,r2,r2
    7338:	1085883a 	add	r2,r2,r2
    733c:	2089883a 	add	r4,r4,r2
    7340:	21c0032e 	bgeu	r4,r7,7350 <__copybits+0x74>
    7344:	20000015 	stw	zero,0(r4)
    7348:	21000104 	addi	r4,r4,4
    734c:	21fffd36 	bltu	r4,r7,7344 <__ram_exceptions_end+0xfbfe70f0>
    7350:	f800283a 	ret

00007354 <__any_on>:
    7354:	20c00417 	ldw	r3,16(r4)
    7358:	2805d17a 	srai	r2,r5,5
    735c:	21000504 	addi	r4,r4,20
    7360:	18800d0e 	bge	r3,r2,7398 <__any_on+0x44>
    7364:	18c7883a 	add	r3,r3,r3
    7368:	18c7883a 	add	r3,r3,r3
    736c:	20c7883a 	add	r3,r4,r3
    7370:	20c0192e 	bgeu	r4,r3,73d8 <__any_on+0x84>
    7374:	18bfff17 	ldw	r2,-4(r3)
    7378:	18ffff04 	addi	r3,r3,-4
    737c:	1000041e 	bne	r2,zero,7390 <__any_on+0x3c>
    7380:	20c0142e 	bgeu	r4,r3,73d4 <__any_on+0x80>
    7384:	18ffff04 	addi	r3,r3,-4
    7388:	19400017 	ldw	r5,0(r3)
    738c:	283ffc26 	beq	r5,zero,7380 <__ram_exceptions_end+0xfbfe712c>
    7390:	00800044 	movi	r2,1
    7394:	f800283a 	ret
    7398:	10c00a0e 	bge	r2,r3,73c4 <__any_on+0x70>
    739c:	1085883a 	add	r2,r2,r2
    73a0:	1085883a 	add	r2,r2,r2
    73a4:	294007cc 	andi	r5,r5,31
    73a8:	2087883a 	add	r3,r4,r2
    73ac:	283ff026 	beq	r5,zero,7370 <__ram_exceptions_end+0xfbfe711c>
    73b0:	19800017 	ldw	r6,0(r3)
    73b4:	3144d83a 	srl	r2,r6,r5
    73b8:	114a983a 	sll	r5,r2,r5
    73bc:	317ff41e 	bne	r6,r5,7390 <__ram_exceptions_end+0xfbfe713c>
    73c0:	003feb06 	br	7370 <__ram_exceptions_end+0xfbfe711c>
    73c4:	1085883a 	add	r2,r2,r2
    73c8:	1085883a 	add	r2,r2,r2
    73cc:	2087883a 	add	r3,r4,r2
    73d0:	003fe706 	br	7370 <__ram_exceptions_end+0xfbfe711c>
    73d4:	f800283a 	ret
    73d8:	0005883a 	mov	r2,zero
    73dc:	f800283a 	ret

000073e0 <__fpclassifyd>:
    73e0:	00a00034 	movhi	r2,32768
    73e4:	10bfffc4 	addi	r2,r2,-1
    73e8:	2884703a 	and	r2,r5,r2
    73ec:	10000726 	beq	r2,zero,740c <__fpclassifyd+0x2c>
    73f0:	00fffc34 	movhi	r3,65520
    73f4:	019ff834 	movhi	r6,32736
    73f8:	28c7883a 	add	r3,r5,r3
    73fc:	31bfffc4 	addi	r6,r6,-1
    7400:	30c00536 	bltu	r6,r3,7418 <__fpclassifyd+0x38>
    7404:	00800104 	movi	r2,4
    7408:	f800283a 	ret
    740c:	2000021e 	bne	r4,zero,7418 <__fpclassifyd+0x38>
    7410:	00800084 	movi	r2,2
    7414:	f800283a 	ret
    7418:	00dffc34 	movhi	r3,32752
    741c:	019ff834 	movhi	r6,32736
    7420:	28cb883a 	add	r5,r5,r3
    7424:	31bfffc4 	addi	r6,r6,-1
    7428:	317ff62e 	bgeu	r6,r5,7404 <__ram_exceptions_end+0xfbfe71b0>
    742c:	01400434 	movhi	r5,16
    7430:	297fffc4 	addi	r5,r5,-1
    7434:	28800236 	bltu	r5,r2,7440 <__fpclassifyd+0x60>
    7438:	008000c4 	movi	r2,3
    743c:	f800283a 	ret
    7440:	10c00226 	beq	r2,r3,744c <__fpclassifyd+0x6c>
    7444:	0005883a 	mov	r2,zero
    7448:	f800283a 	ret
    744c:	2005003a 	cmpeq	r2,r4,zero
    7450:	f800283a 	ret

00007454 <_sbrk_r>:
    7454:	defffd04 	addi	sp,sp,-12
    7458:	dc000015 	stw	r16,0(sp)
    745c:	04000074 	movhi	r16,1
    7460:	dc400115 	stw	r17,4(sp)
    7464:	840e8c04 	addi	r16,r16,14896
    7468:	2023883a 	mov	r17,r4
    746c:	2809883a 	mov	r4,r5
    7470:	dfc00215 	stw	ra,8(sp)
    7474:	80000015 	stw	zero,0(r16)
    7478:	000dfd00 	call	dfd0 <sbrk>
    747c:	00ffffc4 	movi	r3,-1
    7480:	10c00526 	beq	r2,r3,7498 <_sbrk_r+0x44>
    7484:	dfc00217 	ldw	ra,8(sp)
    7488:	dc400117 	ldw	r17,4(sp)
    748c:	dc000017 	ldw	r16,0(sp)
    7490:	dec00304 	addi	sp,sp,12
    7494:	f800283a 	ret
    7498:	80c00017 	ldw	r3,0(r16)
    749c:	183ff926 	beq	r3,zero,7484 <__ram_exceptions_end+0xfbfe7230>
    74a0:	88c00015 	stw	r3,0(r17)
    74a4:	003ff706 	br	7484 <__ram_exceptions_end+0xfbfe7230>

000074a8 <__sread>:
    74a8:	defffe04 	addi	sp,sp,-8
    74ac:	dc000015 	stw	r16,0(sp)
    74b0:	2821883a 	mov	r16,r5
    74b4:	2940038f 	ldh	r5,14(r5)
    74b8:	dfc00115 	stw	ra,4(sp)
    74bc:	000994c0 	call	994c <_read_r>
    74c0:	10000716 	blt	r2,zero,74e0 <__sread+0x38>
    74c4:	80c01417 	ldw	r3,80(r16)
    74c8:	1887883a 	add	r3,r3,r2
    74cc:	80c01415 	stw	r3,80(r16)
    74d0:	dfc00117 	ldw	ra,4(sp)
    74d4:	dc000017 	ldw	r16,0(sp)
    74d8:	dec00204 	addi	sp,sp,8
    74dc:	f800283a 	ret
    74e0:	80c0030b 	ldhu	r3,12(r16)
    74e4:	18fbffcc 	andi	r3,r3,61439
    74e8:	80c0030d 	sth	r3,12(r16)
    74ec:	dfc00117 	ldw	ra,4(sp)
    74f0:	dc000017 	ldw	r16,0(sp)
    74f4:	dec00204 	addi	sp,sp,8
    74f8:	f800283a 	ret

000074fc <__seofread>:
    74fc:	0005883a 	mov	r2,zero
    7500:	f800283a 	ret

00007504 <__swrite>:
    7504:	2880030b 	ldhu	r2,12(r5)
    7508:	defffb04 	addi	sp,sp,-20
    750c:	dcc00315 	stw	r19,12(sp)
    7510:	dc800215 	stw	r18,8(sp)
    7514:	dc400115 	stw	r17,4(sp)
    7518:	dc000015 	stw	r16,0(sp)
    751c:	dfc00415 	stw	ra,16(sp)
    7520:	10c0400c 	andi	r3,r2,256
    7524:	2821883a 	mov	r16,r5
    7528:	2023883a 	mov	r17,r4
    752c:	3025883a 	mov	r18,r6
    7530:	3827883a 	mov	r19,r7
    7534:	18000526 	beq	r3,zero,754c <__swrite+0x48>
    7538:	2940038f 	ldh	r5,14(r5)
    753c:	01c00084 	movi	r7,2
    7540:	000d883a 	mov	r6,zero
    7544:	00097900 	call	9790 <_lseek_r>
    7548:	8080030b 	ldhu	r2,12(r16)
    754c:	8140038f 	ldh	r5,14(r16)
    7550:	10bbffcc 	andi	r2,r2,61439
    7554:	980f883a 	mov	r7,r19
    7558:	900d883a 	mov	r6,r18
    755c:	8809883a 	mov	r4,r17
    7560:	8080030d 	sth	r2,12(r16)
    7564:	dfc00417 	ldw	ra,16(sp)
    7568:	dcc00317 	ldw	r19,12(sp)
    756c:	dc800217 	ldw	r18,8(sp)
    7570:	dc400117 	ldw	r17,4(sp)
    7574:	dc000017 	ldw	r16,0(sp)
    7578:	dec00504 	addi	sp,sp,20
    757c:	0008da01 	jmpi	8da0 <_write_r>

00007580 <__sseek>:
    7580:	defffe04 	addi	sp,sp,-8
    7584:	dc000015 	stw	r16,0(sp)
    7588:	2821883a 	mov	r16,r5
    758c:	2940038f 	ldh	r5,14(r5)
    7590:	dfc00115 	stw	ra,4(sp)
    7594:	00097900 	call	9790 <_lseek_r>
    7598:	00ffffc4 	movi	r3,-1
    759c:	10c00826 	beq	r2,r3,75c0 <__sseek+0x40>
    75a0:	80c0030b 	ldhu	r3,12(r16)
    75a4:	80801415 	stw	r2,80(r16)
    75a8:	18c40014 	ori	r3,r3,4096
    75ac:	80c0030d 	sth	r3,12(r16)
    75b0:	dfc00117 	ldw	ra,4(sp)
    75b4:	dc000017 	ldw	r16,0(sp)
    75b8:	dec00204 	addi	sp,sp,8
    75bc:	f800283a 	ret
    75c0:	80c0030b 	ldhu	r3,12(r16)
    75c4:	18fbffcc 	andi	r3,r3,61439
    75c8:	80c0030d 	sth	r3,12(r16)
    75cc:	dfc00117 	ldw	ra,4(sp)
    75d0:	dc000017 	ldw	r16,0(sp)
    75d4:	dec00204 	addi	sp,sp,8
    75d8:	f800283a 	ret

000075dc <__sclose>:
    75dc:	2940038f 	ldh	r5,14(r5)
    75e0:	0008e001 	jmpi	8e00 <_close_r>

000075e4 <strcmp>:
    75e4:	2144b03a 	or	r2,r4,r5
    75e8:	108000cc 	andi	r2,r2,3
    75ec:	1000171e 	bne	r2,zero,764c <strcmp+0x68>
    75f0:	20800017 	ldw	r2,0(r4)
    75f4:	28c00017 	ldw	r3,0(r5)
    75f8:	10c0141e 	bne	r2,r3,764c <strcmp+0x68>
    75fc:	027fbff4 	movhi	r9,65279
    7600:	4a7fbfc4 	addi	r9,r9,-257
    7604:	0086303a 	nor	r3,zero,r2
    7608:	02202074 	movhi	r8,32897
    760c:	1245883a 	add	r2,r2,r9
    7610:	42202004 	addi	r8,r8,-32640
    7614:	10c4703a 	and	r2,r2,r3
    7618:	1204703a 	and	r2,r2,r8
    761c:	10000226 	beq	r2,zero,7628 <strcmp+0x44>
    7620:	00002306 	br	76b0 <strcmp+0xcc>
    7624:	1000221e 	bne	r2,zero,76b0 <strcmp+0xcc>
    7628:	21000104 	addi	r4,r4,4
    762c:	20c00017 	ldw	r3,0(r4)
    7630:	29400104 	addi	r5,r5,4
    7634:	29800017 	ldw	r6,0(r5)
    7638:	1a4f883a 	add	r7,r3,r9
    763c:	00c4303a 	nor	r2,zero,r3
    7640:	3884703a 	and	r2,r7,r2
    7644:	1204703a 	and	r2,r2,r8
    7648:	19bff626 	beq	r3,r6,7624 <__ram_exceptions_end+0xfbfe73d0>
    764c:	20800003 	ldbu	r2,0(r4)
    7650:	10c03fcc 	andi	r3,r2,255
    7654:	18c0201c 	xori	r3,r3,128
    7658:	18ffe004 	addi	r3,r3,-128
    765c:	18000c26 	beq	r3,zero,7690 <strcmp+0xac>
    7660:	29800007 	ldb	r6,0(r5)
    7664:	19800326 	beq	r3,r6,7674 <strcmp+0x90>
    7668:	00001306 	br	76b8 <strcmp+0xd4>
    766c:	29800007 	ldb	r6,0(r5)
    7670:	11800b1e 	bne	r2,r6,76a0 <strcmp+0xbc>
    7674:	21000044 	addi	r4,r4,1
    7678:	20c00003 	ldbu	r3,0(r4)
    767c:	29400044 	addi	r5,r5,1
    7680:	18803fcc 	andi	r2,r3,255
    7684:	1080201c 	xori	r2,r2,128
    7688:	10bfe004 	addi	r2,r2,-128
    768c:	103ff71e 	bne	r2,zero,766c <__ram_exceptions_end+0xfbfe7418>
    7690:	0007883a 	mov	r3,zero
    7694:	28800003 	ldbu	r2,0(r5)
    7698:	1885c83a 	sub	r2,r3,r2
    769c:	f800283a 	ret
    76a0:	28800003 	ldbu	r2,0(r5)
    76a4:	18c03fcc 	andi	r3,r3,255
    76a8:	1885c83a 	sub	r2,r3,r2
    76ac:	f800283a 	ret
    76b0:	0005883a 	mov	r2,zero
    76b4:	f800283a 	ret
    76b8:	10c03fcc 	andi	r3,r2,255
    76bc:	003ff506 	br	7694 <__ram_exceptions_end+0xfbfe7440>

000076c0 <strlen>:
    76c0:	208000cc 	andi	r2,r4,3
    76c4:	10002026 	beq	r2,zero,7748 <strlen+0x88>
    76c8:	20800007 	ldb	r2,0(r4)
    76cc:	10002026 	beq	r2,zero,7750 <strlen+0x90>
    76d0:	2005883a 	mov	r2,r4
    76d4:	00000206 	br	76e0 <strlen+0x20>
    76d8:	10c00007 	ldb	r3,0(r2)
    76dc:	18001826 	beq	r3,zero,7740 <strlen+0x80>
    76e0:	10800044 	addi	r2,r2,1
    76e4:	10c000cc 	andi	r3,r2,3
    76e8:	183ffb1e 	bne	r3,zero,76d8 <__ram_exceptions_end+0xfbfe7484>
    76ec:	10c00017 	ldw	r3,0(r2)
    76f0:	01ffbff4 	movhi	r7,65279
    76f4:	39ffbfc4 	addi	r7,r7,-257
    76f8:	00ca303a 	nor	r5,zero,r3
    76fc:	01a02074 	movhi	r6,32897
    7700:	19c7883a 	add	r3,r3,r7
    7704:	31a02004 	addi	r6,r6,-32640
    7708:	1946703a 	and	r3,r3,r5
    770c:	1986703a 	and	r3,r3,r6
    7710:	1800091e 	bne	r3,zero,7738 <strlen+0x78>
    7714:	10800104 	addi	r2,r2,4
    7718:	10c00017 	ldw	r3,0(r2)
    771c:	19cb883a 	add	r5,r3,r7
    7720:	00c6303a 	nor	r3,zero,r3
    7724:	28c6703a 	and	r3,r5,r3
    7728:	1986703a 	and	r3,r3,r6
    772c:	183ff926 	beq	r3,zero,7714 <__ram_exceptions_end+0xfbfe74c0>
    7730:	00000106 	br	7738 <strlen+0x78>
    7734:	10800044 	addi	r2,r2,1
    7738:	10c00007 	ldb	r3,0(r2)
    773c:	183ffd1e 	bne	r3,zero,7734 <__ram_exceptions_end+0xfbfe74e0>
    7740:	1105c83a 	sub	r2,r2,r4
    7744:	f800283a 	ret
    7748:	2005883a 	mov	r2,r4
    774c:	003fe706 	br	76ec <__ram_exceptions_end+0xfbfe7498>
    7750:	0005883a 	mov	r2,zero
    7754:	f800283a 	ret

00007758 <__sprint_r.part.0>:
    7758:	28801917 	ldw	r2,100(r5)
    775c:	defff604 	addi	sp,sp,-40
    7760:	dd400515 	stw	r21,20(sp)
    7764:	dfc00915 	stw	ra,36(sp)
    7768:	df000815 	stw	fp,32(sp)
    776c:	ddc00715 	stw	r23,28(sp)
    7770:	dd800615 	stw	r22,24(sp)
    7774:	dd000415 	stw	r20,16(sp)
    7778:	dcc00315 	stw	r19,12(sp)
    777c:	dc800215 	stw	r18,8(sp)
    7780:	dc400115 	stw	r17,4(sp)
    7784:	dc000015 	stw	r16,0(sp)
    7788:	1088000c 	andi	r2,r2,8192
    778c:	302b883a 	mov	r21,r6
    7790:	10002e26 	beq	r2,zero,784c <__sprint_r.part.0+0xf4>
    7794:	30800217 	ldw	r2,8(r6)
    7798:	35800017 	ldw	r22,0(r6)
    779c:	10002926 	beq	r2,zero,7844 <__sprint_r.part.0+0xec>
    77a0:	2827883a 	mov	r19,r5
    77a4:	2029883a 	mov	r20,r4
    77a8:	b5c00104 	addi	r23,r22,4
    77ac:	04bfffc4 	movi	r18,-1
    77b0:	bc400017 	ldw	r17,0(r23)
    77b4:	b4000017 	ldw	r16,0(r22)
    77b8:	0039883a 	mov	fp,zero
    77bc:	8822d0ba 	srli	r17,r17,2
    77c0:	8800031e 	bne	r17,zero,77d0 <__sprint_r.part.0+0x78>
    77c4:	00001806 	br	7828 <__sprint_r.part.0+0xd0>
    77c8:	84000104 	addi	r16,r16,4
    77cc:	8f001526 	beq	r17,fp,7824 <__sprint_r.part.0+0xcc>
    77d0:	81400017 	ldw	r5,0(r16)
    77d4:	980d883a 	mov	r6,r19
    77d8:	a009883a 	mov	r4,r20
    77dc:	00091800 	call	9180 <_fputwc_r>
    77e0:	e7000044 	addi	fp,fp,1
    77e4:	14bff81e 	bne	r2,r18,77c8 <__ram_exceptions_end+0xfbfe7574>
    77e8:	9005883a 	mov	r2,r18
    77ec:	a8000215 	stw	zero,8(r21)
    77f0:	a8000115 	stw	zero,4(r21)
    77f4:	dfc00917 	ldw	ra,36(sp)
    77f8:	df000817 	ldw	fp,32(sp)
    77fc:	ddc00717 	ldw	r23,28(sp)
    7800:	dd800617 	ldw	r22,24(sp)
    7804:	dd400517 	ldw	r21,20(sp)
    7808:	dd000417 	ldw	r20,16(sp)
    780c:	dcc00317 	ldw	r19,12(sp)
    7810:	dc800217 	ldw	r18,8(sp)
    7814:	dc400117 	ldw	r17,4(sp)
    7818:	dc000017 	ldw	r16,0(sp)
    781c:	dec00a04 	addi	sp,sp,40
    7820:	f800283a 	ret
    7824:	a8800217 	ldw	r2,8(r21)
    7828:	8c63883a 	add	r17,r17,r17
    782c:	8c63883a 	add	r17,r17,r17
    7830:	1445c83a 	sub	r2,r2,r17
    7834:	a8800215 	stw	r2,8(r21)
    7838:	b5800204 	addi	r22,r22,8
    783c:	bdc00204 	addi	r23,r23,8
    7840:	103fdb1e 	bne	r2,zero,77b0 <__ram_exceptions_end+0xfbfe755c>
    7844:	0005883a 	mov	r2,zero
    7848:	003fe806 	br	77ec <__ram_exceptions_end+0xfbfe7598>
    784c:	00092800 	call	9280 <__sfvwrite_r>
    7850:	003fe606 	br	77ec <__ram_exceptions_end+0xfbfe7598>

00007854 <__sprint_r>:
    7854:	30c00217 	ldw	r3,8(r6)
    7858:	18000126 	beq	r3,zero,7860 <__sprint_r+0xc>
    785c:	00077581 	jmpi	7758 <__sprint_r.part.0>
    7860:	30000115 	stw	zero,4(r6)
    7864:	0005883a 	mov	r2,zero
    7868:	f800283a 	ret

0000786c <___vfiprintf_internal_r>:
    786c:	deffc904 	addi	sp,sp,-220
    7870:	df003515 	stw	fp,212(sp)
    7874:	dd003115 	stw	r20,196(sp)
    7878:	dfc03615 	stw	ra,216(sp)
    787c:	ddc03415 	stw	r23,208(sp)
    7880:	dd803315 	stw	r22,204(sp)
    7884:	dd403215 	stw	r21,200(sp)
    7888:	dcc03015 	stw	r19,192(sp)
    788c:	dc802f15 	stw	r18,188(sp)
    7890:	dc402e15 	stw	r17,184(sp)
    7894:	dc002d15 	stw	r16,180(sp)
    7898:	d9002015 	stw	r4,128(sp)
    789c:	d9c02215 	stw	r7,136(sp)
    78a0:	2829883a 	mov	r20,r5
    78a4:	3039883a 	mov	fp,r6
    78a8:	20000226 	beq	r4,zero,78b4 <___vfiprintf_internal_r+0x48>
    78ac:	20800e17 	ldw	r2,56(r4)
    78b0:	1000cf26 	beq	r2,zero,7bf0 <___vfiprintf_internal_r+0x384>
    78b4:	a080030b 	ldhu	r2,12(r20)
    78b8:	10c8000c 	andi	r3,r2,8192
    78bc:	1800061e 	bne	r3,zero,78d8 <___vfiprintf_internal_r+0x6c>
    78c0:	a1001917 	ldw	r4,100(r20)
    78c4:	00f7ffc4 	movi	r3,-8193
    78c8:	10880014 	ori	r2,r2,8192
    78cc:	20c6703a 	and	r3,r4,r3
    78d0:	a080030d 	sth	r2,12(r20)
    78d4:	a0c01915 	stw	r3,100(r20)
    78d8:	10c0020c 	andi	r3,r2,8
    78dc:	1800a926 	beq	r3,zero,7b84 <___vfiprintf_internal_r+0x318>
    78e0:	a0c00417 	ldw	r3,16(r20)
    78e4:	1800a726 	beq	r3,zero,7b84 <___vfiprintf_internal_r+0x318>
    78e8:	1080068c 	andi	r2,r2,26
    78ec:	00c00284 	movi	r3,10
    78f0:	10c0ac26 	beq	r2,r3,7ba4 <___vfiprintf_internal_r+0x338>
    78f4:	da801a04 	addi	r10,sp,104
    78f8:	da801e15 	stw	r10,120(sp)
    78fc:	d8801e17 	ldw	r2,120(sp)
    7900:	da8019c4 	addi	r10,sp,103
    7904:	05800074 	movhi	r22,1
    7908:	05c00074 	movhi	r23,1
    790c:	da801f15 	stw	r10,124(sp)
    7910:	1295c83a 	sub	r10,r2,r10
    7914:	b580bc04 	addi	r22,r22,752
    7918:	bdc0b804 	addi	r23,r23,736
    791c:	dec01a15 	stw	sp,104(sp)
    7920:	d8001c15 	stw	zero,112(sp)
    7924:	d8001b15 	stw	zero,108(sp)
    7928:	d8002615 	stw	zero,152(sp)
    792c:	d8002315 	stw	zero,140(sp)
    7930:	da802715 	stw	r10,156(sp)
    7934:	d811883a 	mov	r8,sp
    7938:	dd002115 	stw	r20,132(sp)
    793c:	e021883a 	mov	r16,fp
    7940:	80800007 	ldb	r2,0(r16)
    7944:	1003ea26 	beq	r2,zero,88f0 <___vfiprintf_internal_r+0x1084>
    7948:	00c00944 	movi	r3,37
    794c:	8025883a 	mov	r18,r16
    7950:	10c0021e 	bne	r2,r3,795c <___vfiprintf_internal_r+0xf0>
    7954:	00001606 	br	79b0 <___vfiprintf_internal_r+0x144>
    7958:	10c00326 	beq	r2,r3,7968 <___vfiprintf_internal_r+0xfc>
    795c:	94800044 	addi	r18,r18,1
    7960:	90800007 	ldb	r2,0(r18)
    7964:	103ffc1e 	bne	r2,zero,7958 <__ram_exceptions_end+0xfbfe7704>
    7968:	9423c83a 	sub	r17,r18,r16
    796c:	88001026 	beq	r17,zero,79b0 <___vfiprintf_internal_r+0x144>
    7970:	d8c01c17 	ldw	r3,112(sp)
    7974:	d8801b17 	ldw	r2,108(sp)
    7978:	44000015 	stw	r16,0(r8)
    797c:	88c7883a 	add	r3,r17,r3
    7980:	10800044 	addi	r2,r2,1
    7984:	44400115 	stw	r17,4(r8)
    7988:	d8c01c15 	stw	r3,112(sp)
    798c:	d8801b15 	stw	r2,108(sp)
    7990:	010001c4 	movi	r4,7
    7994:	2080760e 	bge	r4,r2,7b70 <___vfiprintf_internal_r+0x304>
    7998:	1803821e 	bne	r3,zero,87a4 <___vfiprintf_internal_r+0xf38>
    799c:	da802317 	ldw	r10,140(sp)
    79a0:	d8001b15 	stw	zero,108(sp)
    79a4:	d811883a 	mov	r8,sp
    79a8:	5455883a 	add	r10,r10,r17
    79ac:	da802315 	stw	r10,140(sp)
    79b0:	90800007 	ldb	r2,0(r18)
    79b4:	10044626 	beq	r2,zero,8ad0 <___vfiprintf_internal_r+0x1264>
    79b8:	90c00047 	ldb	r3,1(r18)
    79bc:	94000044 	addi	r16,r18,1
    79c0:	d8001d85 	stb	zero,118(sp)
    79c4:	0009883a 	mov	r4,zero
    79c8:	000f883a 	mov	r7,zero
    79cc:	027fffc4 	movi	r9,-1
    79d0:	0023883a 	mov	r17,zero
    79d4:	0029883a 	mov	r20,zero
    79d8:	01401604 	movi	r5,88
    79dc:	01800244 	movi	r6,9
    79e0:	03400a84 	movi	r13,42
    79e4:	03001b04 	movi	r12,108
    79e8:	84000044 	addi	r16,r16,1
    79ec:	18bff804 	addi	r2,r3,-32
    79f0:	28827336 	bltu	r5,r2,83c0 <___vfiprintf_internal_r+0xb54>
    79f4:	100490ba 	slli	r2,r2,2
    79f8:	02800034 	movhi	r10,0
    79fc:	529e8304 	addi	r10,r10,31244
    7a00:	1285883a 	add	r2,r2,r10
    7a04:	10800017 	ldw	r2,0(r2)
    7a08:	1000683a 	jmp	r2
    7a0c:	000080f4 	movhi	zero,515
    7a10:	000083c0 	call	83c <test_recovtime_print+0x54>
    7a14:	000083c0 	call	83c <test_recovtime_print+0x54>
    7a18:	00008114 	movui	zero,516
    7a1c:	000083c0 	call	83c <test_recovtime_print+0x54>
    7a20:	000083c0 	call	83c <test_recovtime_print+0x54>
    7a24:	000083c0 	call	83c <test_recovtime_print+0x54>
    7a28:	000083c0 	call	83c <test_recovtime_print+0x54>
    7a2c:	000083c0 	call	83c <test_recovtime_print+0x54>
    7a30:	000083c0 	call	83c <test_recovtime_print+0x54>
    7a34:	000082fc 	xorhi	zero,zero,523
    7a38:	00008318 	cmpnei	zero,zero,524
    7a3c:	000083c0 	call	83c <test_recovtime_print+0x54>
    7a40:	00007c00 	call	7c0 <recov_isr_parport+0x2c>
    7a44:	00008328 	cmpgeui	zero,zero,524
    7a48:	000083c0 	call	83c <test_recovtime_print+0x54>
    7a4c:	00008120 	cmpeqi	zero,zero,516
    7a50:	0000812c 	andhi	zero,zero,516
    7a54:	0000812c 	andhi	zero,zero,516
    7a58:	0000812c 	andhi	zero,zero,516
    7a5c:	0000812c 	andhi	zero,zero,516
    7a60:	0000812c 	andhi	zero,zero,516
    7a64:	0000812c 	andhi	zero,zero,516
    7a68:	0000812c 	andhi	zero,zero,516
    7a6c:	0000812c 	andhi	zero,zero,516
    7a70:	0000812c 	andhi	zero,zero,516
    7a74:	000083c0 	call	83c <test_recovtime_print+0x54>
    7a78:	000083c0 	call	83c <test_recovtime_print+0x54>
    7a7c:	000083c0 	call	83c <test_recovtime_print+0x54>
    7a80:	000083c0 	call	83c <test_recovtime_print+0x54>
    7a84:	000083c0 	call	83c <test_recovtime_print+0x54>
    7a88:	000083c0 	call	83c <test_recovtime_print+0x54>
    7a8c:	000083c0 	call	83c <test_recovtime_print+0x54>
    7a90:	000083c0 	call	83c <test_recovtime_print+0x54>
    7a94:	000083c0 	call	83c <test_recovtime_print+0x54>
    7a98:	000083c0 	call	83c <test_recovtime_print+0x54>
    7a9c:	00008158 	cmpnei	zero,zero,517
    7aa0:	000083c0 	call	83c <test_recovtime_print+0x54>
    7aa4:	000083c0 	call	83c <test_recovtime_print+0x54>
    7aa8:	000083c0 	call	83c <test_recovtime_print+0x54>
    7aac:	000083c0 	call	83c <test_recovtime_print+0x54>
    7ab0:	000083c0 	call	83c <test_recovtime_print+0x54>
    7ab4:	000083c0 	call	83c <test_recovtime_print+0x54>
    7ab8:	000083c0 	call	83c <test_recovtime_print+0x54>
    7abc:	000083c0 	call	83c <test_recovtime_print+0x54>
    7ac0:	000083c0 	call	83c <test_recovtime_print+0x54>
    7ac4:	000083c0 	call	83c <test_recovtime_print+0x54>
    7ac8:	00008190 	cmplti	zero,zero,518
    7acc:	000083c0 	call	83c <test_recovtime_print+0x54>
    7ad0:	000083c0 	call	83c <test_recovtime_print+0x54>
    7ad4:	000083c0 	call	83c <test_recovtime_print+0x54>
    7ad8:	000083c0 	call	83c <test_recovtime_print+0x54>
    7adc:	000083c0 	call	83c <test_recovtime_print+0x54>
    7ae0:	000081e8 	cmpgeui	zero,zero,519
    7ae4:	000083c0 	call	83c <test_recovtime_print+0x54>
    7ae8:	000083c0 	call	83c <test_recovtime_print+0x54>
    7aec:	00008258 	cmpnei	zero,zero,521
    7af0:	000083c0 	call	83c <test_recovtime_print+0x54>
    7af4:	000083c0 	call	83c <test_recovtime_print+0x54>
    7af8:	000083c0 	call	83c <test_recovtime_print+0x54>
    7afc:	000083c0 	call	83c <test_recovtime_print+0x54>
    7b00:	000083c0 	call	83c <test_recovtime_print+0x54>
    7b04:	000083c0 	call	83c <test_recovtime_print+0x54>
    7b08:	000083c0 	call	83c <test_recovtime_print+0x54>
    7b0c:	000083c0 	call	83c <test_recovtime_print+0x54>
    7b10:	000083c0 	call	83c <test_recovtime_print+0x54>
    7b14:	000083c0 	call	83c <test_recovtime_print+0x54>
    7b18:	00008004 	movi	zero,512
    7b1c:	00008030 	cmpltui	zero,zero,512
    7b20:	000083c0 	call	83c <test_recovtime_print+0x54>
    7b24:	000083c0 	call	83c <test_recovtime_print+0x54>
    7b28:	000083c0 	call	83c <test_recovtime_print+0x54>
    7b2c:	00008368 	cmpgeui	zero,zero,525
    7b30:	00008030 	cmpltui	zero,zero,512
    7b34:	000083c0 	call	83c <test_recovtime_print+0x54>
    7b38:	000083c0 	call	83c <test_recovtime_print+0x54>
    7b3c:	00007ec4 	movi	zero,507
    7b40:	000083c0 	call	83c <test_recovtime_print+0x54>
    7b44:	00007ed4 	movui	zero,507
    7b48:	00007f10 	cmplti	zero,zero,508
    7b4c:	00007c0c 	andi	zero,zero,496
    7b50:	00007eb8 	rdprs	zero,zero,506
    7b54:	000083c0 	call	83c <test_recovtime_print+0x54>
    7b58:	00008294 	movui	zero,522
    7b5c:	000083c0 	call	83c <test_recovtime_print+0x54>
    7b60:	000082ec 	andhi	zero,zero,523
    7b64:	000083c0 	call	83c <test_recovtime_print+0x54>
    7b68:	000083c0 	call	83c <test_recovtime_print+0x54>
    7b6c:	00007fb0 	cmpltui	zero,zero,510
    7b70:	42000204 	addi	r8,r8,8
    7b74:	da802317 	ldw	r10,140(sp)
    7b78:	5455883a 	add	r10,r10,r17
    7b7c:	da802315 	stw	r10,140(sp)
    7b80:	003f8b06 	br	79b0 <__ram_exceptions_end+0xfbfe775c>
    7b84:	d9002017 	ldw	r4,128(sp)
    7b88:	a00b883a 	mov	r5,r20
    7b8c:	000300c0 	call	300c <__swsetup_r>
    7b90:	1003b11e 	bne	r2,zero,8a58 <___vfiprintf_internal_r+0x11ec>
    7b94:	a080030b 	ldhu	r2,12(r20)
    7b98:	00c00284 	movi	r3,10
    7b9c:	1080068c 	andi	r2,r2,26
    7ba0:	10ff541e 	bne	r2,r3,78f4 <__ram_exceptions_end+0xfbfe76a0>
    7ba4:	a080038f 	ldh	r2,14(r20)
    7ba8:	103f5216 	blt	r2,zero,78f4 <__ram_exceptions_end+0xfbfe76a0>
    7bac:	d9c02217 	ldw	r7,136(sp)
    7bb0:	d9002017 	ldw	r4,128(sp)
    7bb4:	e00d883a 	mov	r6,fp
    7bb8:	a00b883a 	mov	r5,r20
    7bbc:	0008ce40 	call	8ce4 <__sbprintf>
    7bc0:	dfc03617 	ldw	ra,216(sp)
    7bc4:	df003517 	ldw	fp,212(sp)
    7bc8:	ddc03417 	ldw	r23,208(sp)
    7bcc:	dd803317 	ldw	r22,204(sp)
    7bd0:	dd403217 	ldw	r21,200(sp)
    7bd4:	dd003117 	ldw	r20,196(sp)
    7bd8:	dcc03017 	ldw	r19,192(sp)
    7bdc:	dc802f17 	ldw	r18,188(sp)
    7be0:	dc402e17 	ldw	r17,184(sp)
    7be4:	dc002d17 	ldw	r16,180(sp)
    7be8:	dec03704 	addi	sp,sp,220
    7bec:	f800283a 	ret
    7bf0:	0004fe00 	call	4fe0 <__sinit>
    7bf4:	003f2f06 	br	78b4 <__ram_exceptions_end+0xfbfe7660>
    7bf8:	0463c83a 	sub	r17,zero,r17
    7bfc:	d8802215 	stw	r2,136(sp)
    7c00:	a5000114 	ori	r20,r20,4
    7c04:	80c00007 	ldb	r3,0(r16)
    7c08:	003f7706 	br	79e8 <__ram_exceptions_end+0xfbfe7794>
    7c0c:	00800c04 	movi	r2,48
    7c10:	da802217 	ldw	r10,136(sp)
    7c14:	d8801d05 	stb	r2,116(sp)
    7c18:	00801e04 	movi	r2,120
    7c1c:	d8801d45 	stb	r2,117(sp)
    7c20:	d8001d85 	stb	zero,118(sp)
    7c24:	50c00104 	addi	r3,r10,4
    7c28:	54800017 	ldw	r18,0(r10)
    7c2c:	0027883a 	mov	r19,zero
    7c30:	a0800094 	ori	r2,r20,2
    7c34:	48030b16 	blt	r9,zero,8864 <___vfiprintf_internal_r+0xff8>
    7c38:	00bfdfc4 	movi	r2,-129
    7c3c:	a096703a 	and	r11,r20,r2
    7c40:	d8c02215 	stw	r3,136(sp)
    7c44:	5d000094 	ori	r20,r11,2
    7c48:	90032b1e 	bne	r18,zero,88f8 <___vfiprintf_internal_r+0x108c>
    7c4c:	00800074 	movhi	r2,1
    7c50:	10805704 	addi	r2,r2,348
    7c54:	d8802615 	stw	r2,152(sp)
    7c58:	0039883a 	mov	fp,zero
    7c5c:	48017b1e 	bne	r9,zero,824c <___vfiprintf_internal_r+0x9e0>
    7c60:	0013883a 	mov	r9,zero
    7c64:	0027883a 	mov	r19,zero
    7c68:	dd401a04 	addi	r21,sp,104
    7c6c:	4825883a 	mov	r18,r9
    7c70:	4cc0010e 	bge	r9,r19,7c78 <___vfiprintf_internal_r+0x40c>
    7c74:	9825883a 	mov	r18,r19
    7c78:	e7003fcc 	andi	fp,fp,255
    7c7c:	e700201c 	xori	fp,fp,128
    7c80:	e73fe004 	addi	fp,fp,-128
    7c84:	e0000126 	beq	fp,zero,7c8c <___vfiprintf_internal_r+0x420>
    7c88:	94800044 	addi	r18,r18,1
    7c8c:	a380008c 	andi	r14,r20,2
    7c90:	70000126 	beq	r14,zero,7c98 <___vfiprintf_internal_r+0x42c>
    7c94:	94800084 	addi	r18,r18,2
    7c98:	a700210c 	andi	fp,r20,132
    7c9c:	e001df1e 	bne	fp,zero,841c <___vfiprintf_internal_r+0xbb0>
    7ca0:	8c87c83a 	sub	r3,r17,r18
    7ca4:	00c1dd0e 	bge	zero,r3,841c <___vfiprintf_internal_r+0xbb0>
    7ca8:	01c00404 	movi	r7,16
    7cac:	d8801c17 	ldw	r2,112(sp)
    7cb0:	38c3ad0e 	bge	r7,r3,8b68 <___vfiprintf_internal_r+0x12fc>
    7cb4:	02800074 	movhi	r10,1
    7cb8:	5280bc04 	addi	r10,r10,752
    7cbc:	dc002915 	stw	r16,164(sp)
    7cc0:	d9801b17 	ldw	r6,108(sp)
    7cc4:	da802415 	stw	r10,144(sp)
    7cc8:	03c001c4 	movi	r15,7
    7ccc:	da402515 	stw	r9,148(sp)
    7cd0:	db802815 	stw	r14,160(sp)
    7cd4:	1821883a 	mov	r16,r3
    7cd8:	00000506 	br	7cf0 <___vfiprintf_internal_r+0x484>
    7cdc:	31400084 	addi	r5,r6,2
    7ce0:	42000204 	addi	r8,r8,8
    7ce4:	200d883a 	mov	r6,r4
    7ce8:	843ffc04 	addi	r16,r16,-16
    7cec:	3c000d0e 	bge	r7,r16,7d24 <___vfiprintf_internal_r+0x4b8>
    7cf0:	10800404 	addi	r2,r2,16
    7cf4:	31000044 	addi	r4,r6,1
    7cf8:	45800015 	stw	r22,0(r8)
    7cfc:	41c00115 	stw	r7,4(r8)
    7d00:	d8801c15 	stw	r2,112(sp)
    7d04:	d9001b15 	stw	r4,108(sp)
    7d08:	793ff40e 	bge	r15,r4,7cdc <__ram_exceptions_end+0xfbfe7a88>
    7d0c:	1001b51e 	bne	r2,zero,83e4 <___vfiprintf_internal_r+0xb78>
    7d10:	843ffc04 	addi	r16,r16,-16
    7d14:	000d883a 	mov	r6,zero
    7d18:	01400044 	movi	r5,1
    7d1c:	d811883a 	mov	r8,sp
    7d20:	3c3ff316 	blt	r7,r16,7cf0 <__ram_exceptions_end+0xfbfe7a9c>
    7d24:	8007883a 	mov	r3,r16
    7d28:	da402517 	ldw	r9,148(sp)
    7d2c:	db802817 	ldw	r14,160(sp)
    7d30:	dc002917 	ldw	r16,164(sp)
    7d34:	da802417 	ldw	r10,144(sp)
    7d38:	1885883a 	add	r2,r3,r2
    7d3c:	40c00115 	stw	r3,4(r8)
    7d40:	42800015 	stw	r10,0(r8)
    7d44:	d8801c15 	stw	r2,112(sp)
    7d48:	d9401b15 	stw	r5,108(sp)
    7d4c:	00c001c4 	movi	r3,7
    7d50:	19426016 	blt	r3,r5,86d4 <___vfiprintf_internal_r+0xe68>
    7d54:	d8c01d87 	ldb	r3,118(sp)
    7d58:	42000204 	addi	r8,r8,8
    7d5c:	29000044 	addi	r4,r5,1
    7d60:	1801b31e 	bne	r3,zero,8430 <___vfiprintf_internal_r+0xbc4>
    7d64:	7001c026 	beq	r14,zero,8468 <___vfiprintf_internal_r+0xbfc>
    7d68:	d8c01d04 	addi	r3,sp,116
    7d6c:	10800084 	addi	r2,r2,2
    7d70:	40c00015 	stw	r3,0(r8)
    7d74:	00c00084 	movi	r3,2
    7d78:	40c00115 	stw	r3,4(r8)
    7d7c:	d8801c15 	stw	r2,112(sp)
    7d80:	d9001b15 	stw	r4,108(sp)
    7d84:	00c001c4 	movi	r3,7
    7d88:	1902650e 	bge	r3,r4,8720 <___vfiprintf_internal_r+0xeb4>
    7d8c:	10029a1e 	bne	r2,zero,87f8 <___vfiprintf_internal_r+0xf8c>
    7d90:	00c02004 	movi	r3,128
    7d94:	01000044 	movi	r4,1
    7d98:	000b883a 	mov	r5,zero
    7d9c:	d811883a 	mov	r8,sp
    7da0:	e0c1b31e 	bne	fp,r3,8470 <___vfiprintf_internal_r+0xc04>
    7da4:	8cb9c83a 	sub	fp,r17,r18
    7da8:	0701b10e 	bge	zero,fp,8470 <___vfiprintf_internal_r+0xc04>
    7dac:	01c00404 	movi	r7,16
    7db0:	3f03890e 	bge	r7,fp,8bd8 <___vfiprintf_internal_r+0x136c>
    7db4:	00c00074 	movhi	r3,1
    7db8:	18c0b804 	addi	r3,r3,736
    7dbc:	d8c02415 	stw	r3,144(sp)
    7dc0:	8007883a 	mov	r3,r16
    7dc4:	034001c4 	movi	r13,7
    7dc8:	e021883a 	mov	r16,fp
    7dcc:	da402515 	stw	r9,148(sp)
    7dd0:	1839883a 	mov	fp,r3
    7dd4:	00000506 	br	7dec <___vfiprintf_internal_r+0x580>
    7dd8:	29800084 	addi	r6,r5,2
    7ddc:	42000204 	addi	r8,r8,8
    7de0:	180b883a 	mov	r5,r3
    7de4:	843ffc04 	addi	r16,r16,-16
    7de8:	3c000d0e 	bge	r7,r16,7e20 <___vfiprintf_internal_r+0x5b4>
    7dec:	10800404 	addi	r2,r2,16
    7df0:	28c00044 	addi	r3,r5,1
    7df4:	45c00015 	stw	r23,0(r8)
    7df8:	41c00115 	stw	r7,4(r8)
    7dfc:	d8801c15 	stw	r2,112(sp)
    7e00:	d8c01b15 	stw	r3,108(sp)
    7e04:	68fff40e 	bge	r13,r3,7dd8 <__ram_exceptions_end+0xfbfe7b84>
    7e08:	1002241e 	bne	r2,zero,869c <___vfiprintf_internal_r+0xe30>
    7e0c:	843ffc04 	addi	r16,r16,-16
    7e10:	01800044 	movi	r6,1
    7e14:	000b883a 	mov	r5,zero
    7e18:	d811883a 	mov	r8,sp
    7e1c:	3c3ff316 	blt	r7,r16,7dec <__ram_exceptions_end+0xfbfe7b98>
    7e20:	da402517 	ldw	r9,148(sp)
    7e24:	e007883a 	mov	r3,fp
    7e28:	8039883a 	mov	fp,r16
    7e2c:	1821883a 	mov	r16,r3
    7e30:	d8c02417 	ldw	r3,144(sp)
    7e34:	1705883a 	add	r2,r2,fp
    7e38:	47000115 	stw	fp,4(r8)
    7e3c:	40c00015 	stw	r3,0(r8)
    7e40:	d8801c15 	stw	r2,112(sp)
    7e44:	d9801b15 	stw	r6,108(sp)
    7e48:	00c001c4 	movi	r3,7
    7e4c:	19827616 	blt	r3,r6,8828 <___vfiprintf_internal_r+0xfbc>
    7e50:	4cf9c83a 	sub	fp,r9,r19
    7e54:	42000204 	addi	r8,r8,8
    7e58:	31000044 	addi	r4,r6,1
    7e5c:	300b883a 	mov	r5,r6
    7e60:	07018516 	blt	zero,fp,8478 <___vfiprintf_internal_r+0xc0c>
    7e64:	9885883a 	add	r2,r19,r2
    7e68:	45400015 	stw	r21,0(r8)
    7e6c:	44c00115 	stw	r19,4(r8)
    7e70:	d8801c15 	stw	r2,112(sp)
    7e74:	d9001b15 	stw	r4,108(sp)
    7e78:	00c001c4 	movi	r3,7
    7e7c:	1901dd0e 	bge	r3,r4,85f4 <___vfiprintf_internal_r+0xd88>
    7e80:	1002401e 	bne	r2,zero,8784 <___vfiprintf_internal_r+0xf18>
    7e84:	d8001b15 	stw	zero,108(sp)
    7e88:	a2c0010c 	andi	r11,r20,4
    7e8c:	58000226 	beq	r11,zero,7e98 <___vfiprintf_internal_r+0x62c>
    7e90:	8ca7c83a 	sub	r19,r17,r18
    7e94:	04c2f216 	blt	zero,r19,8a60 <___vfiprintf_internal_r+0x11f4>
    7e98:	8c80010e 	bge	r17,r18,7ea0 <___vfiprintf_internal_r+0x634>
    7e9c:	9023883a 	mov	r17,r18
    7ea0:	da802317 	ldw	r10,140(sp)
    7ea4:	5455883a 	add	r10,r10,r17
    7ea8:	da802315 	stw	r10,140(sp)
    7eac:	d8001b15 	stw	zero,108(sp)
    7eb0:	d811883a 	mov	r8,sp
    7eb4:	003ea206 	br	7940 <__ram_exceptions_end+0xfbfe76ec>
    7eb8:	a5000814 	ori	r20,r20,32
    7ebc:	80c00007 	ldb	r3,0(r16)
    7ec0:	003ec906 	br	79e8 <__ram_exceptions_end+0xfbfe7794>
    7ec4:	80c00007 	ldb	r3,0(r16)
    7ec8:	1b030926 	beq	r3,r12,8af0 <___vfiprintf_internal_r+0x1284>
    7ecc:	a5000414 	ori	r20,r20,16
    7ed0:	003ec506 	br	79e8 <__ram_exceptions_end+0xfbfe7794>
    7ed4:	21003fcc 	andi	r4,r4,255
    7ed8:	20035e1e 	bne	r4,zero,8c54 <___vfiprintf_internal_r+0x13e8>
    7edc:	a080080c 	andi	r2,r20,32
    7ee0:	1002a526 	beq	r2,zero,8978 <___vfiprintf_internal_r+0x110c>
    7ee4:	da802217 	ldw	r10,136(sp)
    7ee8:	50800017 	ldw	r2,0(r10)
    7eec:	da802317 	ldw	r10,140(sp)
    7ef0:	5007d7fa 	srai	r3,r10,31
    7ef4:	da802217 	ldw	r10,136(sp)
    7ef8:	10c00115 	stw	r3,4(r2)
    7efc:	52800104 	addi	r10,r10,4
    7f00:	da802215 	stw	r10,136(sp)
    7f04:	da802317 	ldw	r10,140(sp)
    7f08:	12800015 	stw	r10,0(r2)
    7f0c:	003e8c06 	br	7940 <__ram_exceptions_end+0xfbfe76ec>
    7f10:	21003fcc 	andi	r4,r4,255
    7f14:	2003511e 	bne	r4,zero,8c5c <___vfiprintf_internal_r+0x13f0>
    7f18:	a080080c 	andi	r2,r20,32
    7f1c:	1000a126 	beq	r2,zero,81a4 <___vfiprintf_internal_r+0x938>
    7f20:	da802217 	ldw	r10,136(sp)
    7f24:	d8001d85 	stb	zero,118(sp)
    7f28:	50800204 	addi	r2,r10,8
    7f2c:	54800017 	ldw	r18,0(r10)
    7f30:	54c00117 	ldw	r19,4(r10)
    7f34:	4802b416 	blt	r9,zero,8a08 <___vfiprintf_internal_r+0x119c>
    7f38:	013fdfc4 	movi	r4,-129
    7f3c:	94c6b03a 	or	r3,r18,r19
    7f40:	d8802215 	stw	r2,136(sp)
    7f44:	a128703a 	and	r20,r20,r4
    7f48:	1800a226 	beq	r3,zero,81d4 <___vfiprintf_internal_r+0x968>
    7f4c:	0039883a 	mov	fp,zero
    7f50:	dd401a04 	addi	r21,sp,104
    7f54:	9006d0fa 	srli	r3,r18,3
    7f58:	9808977a 	slli	r4,r19,29
    7f5c:	9826d0fa 	srli	r19,r19,3
    7f60:	948001cc 	andi	r18,r18,7
    7f64:	90800c04 	addi	r2,r18,48
    7f68:	ad7fffc4 	addi	r21,r21,-1
    7f6c:	20e4b03a 	or	r18,r4,r3
    7f70:	a8800005 	stb	r2,0(r21)
    7f74:	94c6b03a 	or	r3,r18,r19
    7f78:	183ff61e 	bne	r3,zero,7f54 <__ram_exceptions_end+0xfbfe7d00>
    7f7c:	a0c0004c 	andi	r3,r20,1
    7f80:	18005926 	beq	r3,zero,80e8 <___vfiprintf_internal_r+0x87c>
    7f84:	10803fcc 	andi	r2,r2,255
    7f88:	1080201c 	xori	r2,r2,128
    7f8c:	10bfe004 	addi	r2,r2,-128
    7f90:	00c00c04 	movi	r3,48
    7f94:	10c05426 	beq	r2,r3,80e8 <___vfiprintf_internal_r+0x87c>
    7f98:	da801e17 	ldw	r10,120(sp)
    7f9c:	a8bfffc4 	addi	r2,r21,-1
    7fa0:	a8ffffc5 	stb	r3,-1(r21)
    7fa4:	50a7c83a 	sub	r19,r10,r2
    7fa8:	102b883a 	mov	r21,r2
    7fac:	003f2f06 	br	7c6c <__ram_exceptions_end+0xfbfe7a18>
    7fb0:	21003fcc 	andi	r4,r4,255
    7fb4:	2003421e 	bne	r4,zero,8cc0 <___vfiprintf_internal_r+0x1454>
    7fb8:	00800074 	movhi	r2,1
    7fbc:	10805704 	addi	r2,r2,348
    7fc0:	d8802615 	stw	r2,152(sp)
    7fc4:	a080080c 	andi	r2,r20,32
    7fc8:	1000aa26 	beq	r2,zero,8274 <___vfiprintf_internal_r+0xa08>
    7fcc:	da802217 	ldw	r10,136(sp)
    7fd0:	54800017 	ldw	r18,0(r10)
    7fd4:	54c00117 	ldw	r19,4(r10)
    7fd8:	52800204 	addi	r10,r10,8
    7fdc:	da802215 	stw	r10,136(sp)
    7fe0:	a080004c 	andi	r2,r20,1
    7fe4:	1001d226 	beq	r2,zero,8730 <___vfiprintf_internal_r+0xec4>
    7fe8:	94c4b03a 	or	r2,r18,r19
    7fec:	1002351e 	bne	r2,zero,88c4 <___vfiprintf_internal_r+0x1058>
    7ff0:	d8001d85 	stb	zero,118(sp)
    7ff4:	48022216 	blt	r9,zero,8880 <___vfiprintf_internal_r+0x1014>
    7ff8:	00bfdfc4 	movi	r2,-129
    7ffc:	a0a8703a 	and	r20,r20,r2
    8000:	003f1506 	br	7c58 <__ram_exceptions_end+0xfbfe7a04>
    8004:	da802217 	ldw	r10,136(sp)
    8008:	04800044 	movi	r18,1
    800c:	d8001d85 	stb	zero,118(sp)
    8010:	50800017 	ldw	r2,0(r10)
    8014:	52800104 	addi	r10,r10,4
    8018:	da802215 	stw	r10,136(sp)
    801c:	d8801005 	stb	r2,64(sp)
    8020:	9027883a 	mov	r19,r18
    8024:	dd401004 	addi	r21,sp,64
    8028:	0013883a 	mov	r9,zero
    802c:	003f1706 	br	7c8c <__ram_exceptions_end+0xfbfe7a38>
    8030:	21003fcc 	andi	r4,r4,255
    8034:	2003201e 	bne	r4,zero,8cb8 <___vfiprintf_internal_r+0x144c>
    8038:	a080080c 	andi	r2,r20,32
    803c:	10004b26 	beq	r2,zero,816c <___vfiprintf_internal_r+0x900>
    8040:	da802217 	ldw	r10,136(sp)
    8044:	50800117 	ldw	r2,4(r10)
    8048:	54800017 	ldw	r18,0(r10)
    804c:	52800204 	addi	r10,r10,8
    8050:	da802215 	stw	r10,136(sp)
    8054:	1027883a 	mov	r19,r2
    8058:	10022c16 	blt	r2,zero,890c <___vfiprintf_internal_r+0x10a0>
    805c:	df001d83 	ldbu	fp,118(sp)
    8060:	48007216 	blt	r9,zero,822c <___vfiprintf_internal_r+0x9c0>
    8064:	00ffdfc4 	movi	r3,-129
    8068:	94c4b03a 	or	r2,r18,r19
    806c:	a0e8703a 	and	r20,r20,r3
    8070:	1000cc26 	beq	r2,zero,83a4 <___vfiprintf_internal_r+0xb38>
    8074:	98021026 	beq	r19,zero,88b8 <___vfiprintf_internal_r+0x104c>
    8078:	dc402415 	stw	r17,144(sp)
    807c:	dc002515 	stw	r16,148(sp)
    8080:	9823883a 	mov	r17,r19
    8084:	9021883a 	mov	r16,r18
    8088:	dd401a04 	addi	r21,sp,104
    808c:	4825883a 	mov	r18,r9
    8090:	4027883a 	mov	r19,r8
    8094:	8009883a 	mov	r4,r16
    8098:	880b883a 	mov	r5,r17
    809c:	01800284 	movi	r6,10
    80a0:	000f883a 	mov	r7,zero
    80a4:	000a7c80 	call	a7c8 <__umoddi3>
    80a8:	10800c04 	addi	r2,r2,48
    80ac:	ad7fffc4 	addi	r21,r21,-1
    80b0:	8009883a 	mov	r4,r16
    80b4:	880b883a 	mov	r5,r17
    80b8:	a8800005 	stb	r2,0(r21)
    80bc:	01800284 	movi	r6,10
    80c0:	000f883a 	mov	r7,zero
    80c4:	000a2500 	call	a250 <__udivdi3>
    80c8:	1021883a 	mov	r16,r2
    80cc:	10c4b03a 	or	r2,r2,r3
    80d0:	1823883a 	mov	r17,r3
    80d4:	103fef1e 	bne	r2,zero,8094 <__ram_exceptions_end+0xfbfe7e40>
    80d8:	dc402417 	ldw	r17,144(sp)
    80dc:	dc002517 	ldw	r16,148(sp)
    80e0:	9013883a 	mov	r9,r18
    80e4:	9811883a 	mov	r8,r19
    80e8:	da801e17 	ldw	r10,120(sp)
    80ec:	5567c83a 	sub	r19,r10,r21
    80f0:	003ede06 	br	7c6c <__ram_exceptions_end+0xfbfe7a18>
    80f4:	38803fcc 	andi	r2,r7,255
    80f8:	1080201c 	xori	r2,r2,128
    80fc:	10bfe004 	addi	r2,r2,-128
    8100:	1002371e 	bne	r2,zero,89e0 <___vfiprintf_internal_r+0x1174>
    8104:	01000044 	movi	r4,1
    8108:	01c00804 	movi	r7,32
    810c:	80c00007 	ldb	r3,0(r16)
    8110:	003e3506 	br	79e8 <__ram_exceptions_end+0xfbfe7794>
    8114:	a5000054 	ori	r20,r20,1
    8118:	80c00007 	ldb	r3,0(r16)
    811c:	003e3206 	br	79e8 <__ram_exceptions_end+0xfbfe7794>
    8120:	a5002014 	ori	r20,r20,128
    8124:	80c00007 	ldb	r3,0(r16)
    8128:	003e2f06 	br	79e8 <__ram_exceptions_end+0xfbfe7794>
    812c:	8015883a 	mov	r10,r16
    8130:	0023883a 	mov	r17,zero
    8134:	18bff404 	addi	r2,r3,-48
    8138:	50c00007 	ldb	r3,0(r10)
    813c:	8c4002a4 	muli	r17,r17,10
    8140:	84000044 	addi	r16,r16,1
    8144:	8015883a 	mov	r10,r16
    8148:	1463883a 	add	r17,r2,r17
    814c:	18bff404 	addi	r2,r3,-48
    8150:	30bff92e 	bgeu	r6,r2,8138 <__ram_exceptions_end+0xfbfe7ee4>
    8154:	003e2506 	br	79ec <__ram_exceptions_end+0xfbfe7798>
    8158:	21003fcc 	andi	r4,r4,255
    815c:	2002d41e 	bne	r4,zero,8cb0 <___vfiprintf_internal_r+0x1444>
    8160:	a5000414 	ori	r20,r20,16
    8164:	a080080c 	andi	r2,r20,32
    8168:	103fb51e 	bne	r2,zero,8040 <__ram_exceptions_end+0xfbfe7dec>
    816c:	a080040c 	andi	r2,r20,16
    8170:	1001f826 	beq	r2,zero,8954 <___vfiprintf_internal_r+0x10e8>
    8174:	da802217 	ldw	r10,136(sp)
    8178:	54800017 	ldw	r18,0(r10)
    817c:	52800104 	addi	r10,r10,4
    8180:	da802215 	stw	r10,136(sp)
    8184:	9027d7fa 	srai	r19,r18,31
    8188:	9805883a 	mov	r2,r19
    818c:	003fb206 	br	8058 <__ram_exceptions_end+0xfbfe7e04>
    8190:	21003fcc 	andi	r4,r4,255
    8194:	2002c41e 	bne	r4,zero,8ca8 <___vfiprintf_internal_r+0x143c>
    8198:	a5000414 	ori	r20,r20,16
    819c:	a080080c 	andi	r2,r20,32
    81a0:	103f5f1e 	bne	r2,zero,7f20 <__ram_exceptions_end+0xfbfe7ccc>
    81a4:	a080040c 	andi	r2,r20,16
    81a8:	10020f26 	beq	r2,zero,89e8 <___vfiprintf_internal_r+0x117c>
    81ac:	da802217 	ldw	r10,136(sp)
    81b0:	d8001d85 	stb	zero,118(sp)
    81b4:	0027883a 	mov	r19,zero
    81b8:	50800104 	addi	r2,r10,4
    81bc:	54800017 	ldw	r18,0(r10)
    81c0:	48021116 	blt	r9,zero,8a08 <___vfiprintf_internal_r+0x119c>
    81c4:	00ffdfc4 	movi	r3,-129
    81c8:	d8802215 	stw	r2,136(sp)
    81cc:	a0e8703a 	and	r20,r20,r3
    81d0:	903f5e1e 	bne	r18,zero,7f4c <__ram_exceptions_end+0xfbfe7cf8>
    81d4:	0039883a 	mov	fp,zero
    81d8:	4802a626 	beq	r9,zero,8c74 <___vfiprintf_internal_r+0x1408>
    81dc:	0025883a 	mov	r18,zero
    81e0:	0027883a 	mov	r19,zero
    81e4:	003f5a06 	br	7f50 <__ram_exceptions_end+0xfbfe7cfc>
    81e8:	21003fcc 	andi	r4,r4,255
    81ec:	20029f1e 	bne	r4,zero,8c6c <___vfiprintf_internal_r+0x1400>
    81f0:	a5000414 	ori	r20,r20,16
    81f4:	a080080c 	andi	r2,r20,32
    81f8:	10005e1e 	bne	r2,zero,8374 <___vfiprintf_internal_r+0xb08>
    81fc:	a080040c 	andi	r2,r20,16
    8200:	1001a21e 	bne	r2,zero,888c <___vfiprintf_internal_r+0x1020>
    8204:	a080100c 	andi	r2,r20,64
    8208:	d8001d85 	stb	zero,118(sp)
    820c:	da802217 	ldw	r10,136(sp)
    8210:	1002231e 	bne	r2,zero,8aa0 <___vfiprintf_internal_r+0x1234>
    8214:	50800104 	addi	r2,r10,4
    8218:	54800017 	ldw	r18,0(r10)
    821c:	0027883a 	mov	r19,zero
    8220:	4801a00e 	bge	r9,zero,88a4 <___vfiprintf_internal_r+0x1038>
    8224:	d8802215 	stw	r2,136(sp)
    8228:	0039883a 	mov	fp,zero
    822c:	94c4b03a 	or	r2,r18,r19
    8230:	103f901e 	bne	r2,zero,8074 <__ram_exceptions_end+0xfbfe7e20>
    8234:	00800044 	movi	r2,1
    8238:	10803fcc 	andi	r2,r2,255
    823c:	00c00044 	movi	r3,1
    8240:	10c05926 	beq	r2,r3,83a8 <___vfiprintf_internal_r+0xb3c>
    8244:	00c00084 	movi	r3,2
    8248:	10ffe41e 	bne	r2,r3,81dc <__ram_exceptions_end+0xfbfe7f88>
    824c:	0025883a 	mov	r18,zero
    8250:	0027883a 	mov	r19,zero
    8254:	00013d06 	br	874c <___vfiprintf_internal_r+0xee0>
    8258:	21003fcc 	andi	r4,r4,255
    825c:	2002811e 	bne	r4,zero,8c64 <___vfiprintf_internal_r+0x13f8>
    8260:	00800074 	movhi	r2,1
    8264:	10805204 	addi	r2,r2,328
    8268:	d8802615 	stw	r2,152(sp)
    826c:	a080080c 	andi	r2,r20,32
    8270:	103f561e 	bne	r2,zero,7fcc <__ram_exceptions_end+0xfbfe7d78>
    8274:	a080040c 	andi	r2,r20,16
    8278:	1001d126 	beq	r2,zero,89c0 <___vfiprintf_internal_r+0x1154>
    827c:	da802217 	ldw	r10,136(sp)
    8280:	0027883a 	mov	r19,zero
    8284:	54800017 	ldw	r18,0(r10)
    8288:	52800104 	addi	r10,r10,4
    828c:	da802215 	stw	r10,136(sp)
    8290:	003f5306 	br	7fe0 <__ram_exceptions_end+0xfbfe7d8c>
    8294:	da802217 	ldw	r10,136(sp)
    8298:	d8001d85 	stb	zero,118(sp)
    829c:	55400017 	ldw	r21,0(r10)
    82a0:	50c00104 	addi	r3,r10,4
    82a4:	a8024226 	beq	r21,zero,8bb0 <___vfiprintf_internal_r+0x1344>
    82a8:	48021816 	blt	r9,zero,8b0c <___vfiprintf_internal_r+0x12a0>
    82ac:	480d883a 	mov	r6,r9
    82b0:	000b883a 	mov	r5,zero
    82b4:	a809883a 	mov	r4,r21
    82b8:	d8c02a15 	stw	r3,168(sp)
    82bc:	da002b15 	stw	r8,172(sp)
    82c0:	da402c15 	stw	r9,176(sp)
    82c4:	00060900 	call	6090 <memchr>
    82c8:	d8c02a17 	ldw	r3,168(sp)
    82cc:	da002b17 	ldw	r8,172(sp)
    82d0:	da402c17 	ldw	r9,176(sp)
    82d4:	10024826 	beq	r2,zero,8bf8 <___vfiprintf_internal_r+0x138c>
    82d8:	1567c83a 	sub	r19,r2,r21
    82dc:	df001d83 	ldbu	fp,118(sp)
    82e0:	d8c02215 	stw	r3,136(sp)
    82e4:	0013883a 	mov	r9,zero
    82e8:	003e6006 	br	7c6c <__ram_exceptions_end+0xfbfe7a18>
    82ec:	21003fcc 	andi	r4,r4,255
    82f0:	203fc026 	beq	r4,zero,81f4 <__ram_exceptions_end+0xfbfe7fa0>
    82f4:	d9c01d85 	stb	r7,118(sp)
    82f8:	003fbe06 	br	81f4 <__ram_exceptions_end+0xfbfe7fa0>
    82fc:	da802217 	ldw	r10,136(sp)
    8300:	54400017 	ldw	r17,0(r10)
    8304:	50800104 	addi	r2,r10,4
    8308:	883e3b16 	blt	r17,zero,7bf8 <__ram_exceptions_end+0xfbfe79a4>
    830c:	d8802215 	stw	r2,136(sp)
    8310:	80c00007 	ldb	r3,0(r16)
    8314:	003db406 	br	79e8 <__ram_exceptions_end+0xfbfe7794>
    8318:	01000044 	movi	r4,1
    831c:	01c00ac4 	movi	r7,43
    8320:	80c00007 	ldb	r3,0(r16)
    8324:	003db006 	br	79e8 <__ram_exceptions_end+0xfbfe7794>
    8328:	80c00007 	ldb	r3,0(r16)
    832c:	82800044 	addi	r10,r16,1
    8330:	1b423c26 	beq	r3,r13,8c24 <___vfiprintf_internal_r+0x13b8>
    8334:	18bff404 	addi	r2,r3,-48
    8338:	0013883a 	mov	r9,zero
    833c:	30822b36 	bltu	r6,r2,8bec <___vfiprintf_internal_r+0x1380>
    8340:	50c00007 	ldb	r3,0(r10)
    8344:	4a4002a4 	muli	r9,r9,10
    8348:	54000044 	addi	r16,r10,1
    834c:	8015883a 	mov	r10,r16
    8350:	4893883a 	add	r9,r9,r2
    8354:	18bff404 	addi	r2,r3,-48
    8358:	30bff92e 	bgeu	r6,r2,8340 <__ram_exceptions_end+0xfbfe80ec>
    835c:	483da30e 	bge	r9,zero,79ec <__ram_exceptions_end+0xfbfe7798>
    8360:	027fffc4 	movi	r9,-1
    8364:	003da106 	br	79ec <__ram_exceptions_end+0xfbfe7798>
    8368:	a5001014 	ori	r20,r20,64
    836c:	80c00007 	ldb	r3,0(r16)
    8370:	003d9d06 	br	79e8 <__ram_exceptions_end+0xfbfe7794>
    8374:	da802217 	ldw	r10,136(sp)
    8378:	d8001d85 	stb	zero,118(sp)
    837c:	50c00204 	addi	r3,r10,8
    8380:	54800017 	ldw	r18,0(r10)
    8384:	54c00117 	ldw	r19,4(r10)
    8388:	4801ca16 	blt	r9,zero,8ab4 <___vfiprintf_internal_r+0x1248>
    838c:	013fdfc4 	movi	r4,-129
    8390:	94c4b03a 	or	r2,r18,r19
    8394:	d8c02215 	stw	r3,136(sp)
    8398:	a128703a 	and	r20,r20,r4
    839c:	0039883a 	mov	fp,zero
    83a0:	103f341e 	bne	r2,zero,8074 <__ram_exceptions_end+0xfbfe7e20>
    83a4:	483e2e26 	beq	r9,zero,7c60 <__ram_exceptions_end+0xfbfe7a0c>
    83a8:	0025883a 	mov	r18,zero
    83ac:	94800c04 	addi	r18,r18,48
    83b0:	dc8019c5 	stb	r18,103(sp)
    83b4:	dcc02717 	ldw	r19,156(sp)
    83b8:	dd4019c4 	addi	r21,sp,103
    83bc:	003e2b06 	br	7c6c <__ram_exceptions_end+0xfbfe7a18>
    83c0:	21003fcc 	andi	r4,r4,255
    83c4:	2002361e 	bne	r4,zero,8ca0 <___vfiprintf_internal_r+0x1434>
    83c8:	1801c126 	beq	r3,zero,8ad0 <___vfiprintf_internal_r+0x1264>
    83cc:	04800044 	movi	r18,1
    83d0:	d8c01005 	stb	r3,64(sp)
    83d4:	d8001d85 	stb	zero,118(sp)
    83d8:	9027883a 	mov	r19,r18
    83dc:	dd401004 	addi	r21,sp,64
    83e0:	003f1106 	br	8028 <__ram_exceptions_end+0xfbfe7dd4>
    83e4:	d9402117 	ldw	r5,132(sp)
    83e8:	d9002017 	ldw	r4,128(sp)
    83ec:	d9801a04 	addi	r6,sp,104
    83f0:	d9c02b15 	stw	r7,172(sp)
    83f4:	dbc02a15 	stw	r15,168(sp)
    83f8:	00077580 	call	7758 <__sprint_r.part.0>
    83fc:	d9c02b17 	ldw	r7,172(sp)
    8400:	dbc02a17 	ldw	r15,168(sp)
    8404:	10006d1e 	bne	r2,zero,85bc <___vfiprintf_internal_r+0xd50>
    8408:	d9801b17 	ldw	r6,108(sp)
    840c:	d8801c17 	ldw	r2,112(sp)
    8410:	d811883a 	mov	r8,sp
    8414:	31400044 	addi	r5,r6,1
    8418:	003e3306 	br	7ce8 <__ram_exceptions_end+0xfbfe7a94>
    841c:	d9401b17 	ldw	r5,108(sp)
    8420:	d8801c17 	ldw	r2,112(sp)
    8424:	29000044 	addi	r4,r5,1
    8428:	d8c01d87 	ldb	r3,118(sp)
    842c:	183e4d26 	beq	r3,zero,7d64 <__ram_exceptions_end+0xfbfe7b10>
    8430:	00c00044 	movi	r3,1
    8434:	d9401d84 	addi	r5,sp,118
    8438:	10c5883a 	add	r2,r2,r3
    843c:	41400015 	stw	r5,0(r8)
    8440:	40c00115 	stw	r3,4(r8)
    8444:	d8801c15 	stw	r2,112(sp)
    8448:	d9001b15 	stw	r4,108(sp)
    844c:	014001c4 	movi	r5,7
    8450:	2900a90e 	bge	r5,r4,86f8 <___vfiprintf_internal_r+0xe8c>
    8454:	1000da1e 	bne	r2,zero,87c0 <___vfiprintf_internal_r+0xf54>
    8458:	7000ab1e 	bne	r14,zero,8708 <___vfiprintf_internal_r+0xe9c>
    845c:	000b883a 	mov	r5,zero
    8460:	1809883a 	mov	r4,r3
    8464:	d811883a 	mov	r8,sp
    8468:	00c02004 	movi	r3,128
    846c:	e0fe4d26 	beq	fp,r3,7da4 <__ram_exceptions_end+0xfbfe7b50>
    8470:	4cf9c83a 	sub	fp,r9,r19
    8474:	073e7b0e 	bge	zero,fp,7e64 <__ram_exceptions_end+0xfbfe7c10>
    8478:	01c00404 	movi	r7,16
    847c:	3f01900e 	bge	r7,fp,8ac0 <___vfiprintf_internal_r+0x1254>
    8480:	00c00074 	movhi	r3,1
    8484:	18c0b804 	addi	r3,r3,736
    8488:	d8c02415 	stw	r3,144(sp)
    848c:	034001c4 	movi	r13,7
    8490:	00000506 	br	84a8 <___vfiprintf_internal_r+0xc3c>
    8494:	29000084 	addi	r4,r5,2
    8498:	42000204 	addi	r8,r8,8
    849c:	180b883a 	mov	r5,r3
    84a0:	e73ffc04 	addi	fp,fp,-16
    84a4:	3f000d0e 	bge	r7,fp,84dc <___vfiprintf_internal_r+0xc70>
    84a8:	10800404 	addi	r2,r2,16
    84ac:	28c00044 	addi	r3,r5,1
    84b0:	45c00015 	stw	r23,0(r8)
    84b4:	41c00115 	stw	r7,4(r8)
    84b8:	d8801c15 	stw	r2,112(sp)
    84bc:	d8c01b15 	stw	r3,108(sp)
    84c0:	68fff40e 	bge	r13,r3,8494 <__ram_exceptions_end+0xfbfe8240>
    84c4:	1000101e 	bne	r2,zero,8508 <___vfiprintf_internal_r+0xc9c>
    84c8:	e73ffc04 	addi	fp,fp,-16
    84cc:	01000044 	movi	r4,1
    84d0:	000b883a 	mov	r5,zero
    84d4:	d811883a 	mov	r8,sp
    84d8:	3f3ff316 	blt	r7,fp,84a8 <__ram_exceptions_end+0xfbfe8254>
    84dc:	da802417 	ldw	r10,144(sp)
    84e0:	1705883a 	add	r2,r2,fp
    84e4:	47000115 	stw	fp,4(r8)
    84e8:	42800015 	stw	r10,0(r8)
    84ec:	d8801c15 	stw	r2,112(sp)
    84f0:	d9001b15 	stw	r4,108(sp)
    84f4:	00c001c4 	movi	r3,7
    84f8:	19003616 	blt	r3,r4,85d4 <___vfiprintf_internal_r+0xd68>
    84fc:	42000204 	addi	r8,r8,8
    8500:	21000044 	addi	r4,r4,1
    8504:	003e5706 	br	7e64 <__ram_exceptions_end+0xfbfe7c10>
    8508:	d9402117 	ldw	r5,132(sp)
    850c:	d9002017 	ldw	r4,128(sp)
    8510:	d9801a04 	addi	r6,sp,104
    8514:	d9c02b15 	stw	r7,172(sp)
    8518:	db402a15 	stw	r13,168(sp)
    851c:	00077580 	call	7758 <__sprint_r.part.0>
    8520:	d9c02b17 	ldw	r7,172(sp)
    8524:	db402a17 	ldw	r13,168(sp)
    8528:	1000241e 	bne	r2,zero,85bc <___vfiprintf_internal_r+0xd50>
    852c:	d9401b17 	ldw	r5,108(sp)
    8530:	d8801c17 	ldw	r2,112(sp)
    8534:	d811883a 	mov	r8,sp
    8538:	29000044 	addi	r4,r5,1
    853c:	003fd806 	br	84a0 <__ram_exceptions_end+0xfbfe824c>
    8540:	d9401b17 	ldw	r5,108(sp)
    8544:	00c00074 	movhi	r3,1
    8548:	18c0bc04 	addi	r3,r3,752
    854c:	d8c02415 	stw	r3,144(sp)
    8550:	29400044 	addi	r5,r5,1
    8554:	d8c02417 	ldw	r3,144(sp)
    8558:	14c5883a 	add	r2,r2,r19
    855c:	44c00115 	stw	r19,4(r8)
    8560:	40c00015 	stw	r3,0(r8)
    8564:	d8801c15 	stw	r2,112(sp)
    8568:	d9401b15 	stw	r5,108(sp)
    856c:	00c001c4 	movi	r3,7
    8570:	1940070e 	bge	r3,r5,8590 <___vfiprintf_internal_r+0xd24>
    8574:	103e4826 	beq	r2,zero,7e98 <__ram_exceptions_end+0xfbfe7c44>
    8578:	d9402117 	ldw	r5,132(sp)
    857c:	d9002017 	ldw	r4,128(sp)
    8580:	d9801a04 	addi	r6,sp,104
    8584:	00077580 	call	7758 <__sprint_r.part.0>
    8588:	10000c1e 	bne	r2,zero,85bc <___vfiprintf_internal_r+0xd50>
    858c:	d8801c17 	ldw	r2,112(sp)
    8590:	8c80010e 	bge	r17,r18,8598 <___vfiprintf_internal_r+0xd2c>
    8594:	9023883a 	mov	r17,r18
    8598:	da802317 	ldw	r10,140(sp)
    859c:	5455883a 	add	r10,r10,r17
    85a0:	da802315 	stw	r10,140(sp)
    85a4:	103e4126 	beq	r2,zero,7eac <__ram_exceptions_end+0xfbfe7c58>
    85a8:	d9402117 	ldw	r5,132(sp)
    85ac:	d9002017 	ldw	r4,128(sp)
    85b0:	d9801a04 	addi	r6,sp,104
    85b4:	00077580 	call	7758 <__sprint_r.part.0>
    85b8:	103e3c26 	beq	r2,zero,7eac <__ram_exceptions_end+0xfbfe7c58>
    85bc:	dd002117 	ldw	r20,132(sp)
    85c0:	a080030b 	ldhu	r2,12(r20)
    85c4:	1080100c 	andi	r2,r2,64
    85c8:	1001231e 	bne	r2,zero,8a58 <___vfiprintf_internal_r+0x11ec>
    85cc:	d8802317 	ldw	r2,140(sp)
    85d0:	003d7b06 	br	7bc0 <__ram_exceptions_end+0xfbfe796c>
    85d4:	1000991e 	bne	r2,zero,883c <___vfiprintf_internal_r+0xfd0>
    85d8:	00c00044 	movi	r3,1
    85dc:	9805883a 	mov	r2,r19
    85e0:	dd400015 	stw	r21,0(sp)
    85e4:	dcc00115 	stw	r19,4(sp)
    85e8:	dcc01c15 	stw	r19,112(sp)
    85ec:	d8c01b15 	stw	r3,108(sp)
    85f0:	d811883a 	mov	r8,sp
    85f4:	42000204 	addi	r8,r8,8
    85f8:	a2c0010c 	andi	r11,r20,4
    85fc:	583fe426 	beq	r11,zero,8590 <__ram_exceptions_end+0xfbfe833c>
    8600:	8ca7c83a 	sub	r19,r17,r18
    8604:	04ffe20e 	bge	zero,r19,8590 <__ram_exceptions_end+0xfbfe833c>
    8608:	01c00404 	movi	r7,16
    860c:	3cffcc0e 	bge	r7,r19,8540 <__ram_exceptions_end+0xfbfe82ec>
    8610:	02800074 	movhi	r10,1
    8614:	5280bc04 	addi	r10,r10,752
    8618:	d9001b17 	ldw	r4,108(sp)
    861c:	da802415 	stw	r10,144(sp)
    8620:	382b883a 	mov	r21,r7
    8624:	050001c4 	movi	r20,7
    8628:	df002017 	ldw	fp,128(sp)
    862c:	00000506 	br	8644 <___vfiprintf_internal_r+0xdd8>
    8630:	21400084 	addi	r5,r4,2
    8634:	42000204 	addi	r8,r8,8
    8638:	1809883a 	mov	r4,r3
    863c:	9cfffc04 	addi	r19,r19,-16
    8640:	acffc40e 	bge	r21,r19,8554 <__ram_exceptions_end+0xfbfe8300>
    8644:	10800404 	addi	r2,r2,16
    8648:	20c00044 	addi	r3,r4,1
    864c:	45800015 	stw	r22,0(r8)
    8650:	45400115 	stw	r21,4(r8)
    8654:	d8801c15 	stw	r2,112(sp)
    8658:	d8c01b15 	stw	r3,108(sp)
    865c:	a0fff40e 	bge	r20,r3,8630 <__ram_exceptions_end+0xfbfe83dc>
    8660:	1000041e 	bne	r2,zero,8674 <___vfiprintf_internal_r+0xe08>
    8664:	01400044 	movi	r5,1
    8668:	0009883a 	mov	r4,zero
    866c:	d811883a 	mov	r8,sp
    8670:	003ff206 	br	863c <__ram_exceptions_end+0xfbfe83e8>
    8674:	d9402117 	ldw	r5,132(sp)
    8678:	d9801a04 	addi	r6,sp,104
    867c:	e009883a 	mov	r4,fp
    8680:	00077580 	call	7758 <__sprint_r.part.0>
    8684:	103fcd1e 	bne	r2,zero,85bc <__ram_exceptions_end+0xfbfe8368>
    8688:	d9001b17 	ldw	r4,108(sp)
    868c:	d8801c17 	ldw	r2,112(sp)
    8690:	d811883a 	mov	r8,sp
    8694:	21400044 	addi	r5,r4,1
    8698:	003fe806 	br	863c <__ram_exceptions_end+0xfbfe83e8>
    869c:	d9402117 	ldw	r5,132(sp)
    86a0:	d9002017 	ldw	r4,128(sp)
    86a4:	d9801a04 	addi	r6,sp,104
    86a8:	d9c02b15 	stw	r7,172(sp)
    86ac:	db402a15 	stw	r13,168(sp)
    86b0:	00077580 	call	7758 <__sprint_r.part.0>
    86b4:	d9c02b17 	ldw	r7,172(sp)
    86b8:	db402a17 	ldw	r13,168(sp)
    86bc:	103fbf1e 	bne	r2,zero,85bc <__ram_exceptions_end+0xfbfe8368>
    86c0:	d9401b17 	ldw	r5,108(sp)
    86c4:	d8801c17 	ldw	r2,112(sp)
    86c8:	d811883a 	mov	r8,sp
    86cc:	29800044 	addi	r6,r5,1
    86d0:	003dc406 	br	7de4 <__ram_exceptions_end+0xfbfe7b90>
    86d4:	1000d21e 	bne	r2,zero,8a20 <___vfiprintf_internal_r+0x11b4>
    86d8:	d8c01d87 	ldb	r3,118(sp)
    86dc:	18009526 	beq	r3,zero,8934 <___vfiprintf_internal_r+0x10c8>
    86e0:	00800044 	movi	r2,1
    86e4:	d8c01d84 	addi	r3,sp,118
    86e8:	1009883a 	mov	r4,r2
    86ec:	d8c00015 	stw	r3,0(sp)
    86f0:	d8800115 	stw	r2,4(sp)
    86f4:	d811883a 	mov	r8,sp
    86f8:	200b883a 	mov	r5,r4
    86fc:	42000204 	addi	r8,r8,8
    8700:	21000044 	addi	r4,r4,1
    8704:	003d9706 	br	7d64 <__ram_exceptions_end+0xfbfe7b10>
    8708:	d9001d04 	addi	r4,sp,116
    870c:	00800084 	movi	r2,2
    8710:	d9000015 	stw	r4,0(sp)
    8714:	d8800115 	stw	r2,4(sp)
    8718:	1809883a 	mov	r4,r3
    871c:	d811883a 	mov	r8,sp
    8720:	200b883a 	mov	r5,r4
    8724:	42000204 	addi	r8,r8,8
    8728:	21000044 	addi	r4,r4,1
    872c:	003f4e06 	br	8468 <__ram_exceptions_end+0xfbfe8214>
    8730:	d8001d85 	stb	zero,118(sp)
    8734:	48005016 	blt	r9,zero,8878 <___vfiprintf_internal_r+0x100c>
    8738:	00ffdfc4 	movi	r3,-129
    873c:	94c4b03a 	or	r2,r18,r19
    8740:	a0e8703a 	and	r20,r20,r3
    8744:	103d4426 	beq	r2,zero,7c58 <__ram_exceptions_end+0xfbfe7a04>
    8748:	0039883a 	mov	fp,zero
    874c:	d9002617 	ldw	r4,152(sp)
    8750:	dd401a04 	addi	r21,sp,104
    8754:	908003cc 	andi	r2,r18,15
    8758:	9806973a 	slli	r3,r19,28
    875c:	2085883a 	add	r2,r4,r2
    8760:	9024d13a 	srli	r18,r18,4
    8764:	10800003 	ldbu	r2,0(r2)
    8768:	9826d13a 	srli	r19,r19,4
    876c:	ad7fffc4 	addi	r21,r21,-1
    8770:	1ca4b03a 	or	r18,r3,r18
    8774:	a8800005 	stb	r2,0(r21)
    8778:	94c4b03a 	or	r2,r18,r19
    877c:	103ff51e 	bne	r2,zero,8754 <__ram_exceptions_end+0xfbfe8500>
    8780:	003e5906 	br	80e8 <__ram_exceptions_end+0xfbfe7e94>
    8784:	d9402117 	ldw	r5,132(sp)
    8788:	d9002017 	ldw	r4,128(sp)
    878c:	d9801a04 	addi	r6,sp,104
    8790:	00077580 	call	7758 <__sprint_r.part.0>
    8794:	103f891e 	bne	r2,zero,85bc <__ram_exceptions_end+0xfbfe8368>
    8798:	d8801c17 	ldw	r2,112(sp)
    879c:	d811883a 	mov	r8,sp
    87a0:	003f9506 	br	85f8 <__ram_exceptions_end+0xfbfe83a4>
    87a4:	d9402117 	ldw	r5,132(sp)
    87a8:	d9002017 	ldw	r4,128(sp)
    87ac:	d9801a04 	addi	r6,sp,104
    87b0:	00077580 	call	7758 <__sprint_r.part.0>
    87b4:	103f811e 	bne	r2,zero,85bc <__ram_exceptions_end+0xfbfe8368>
    87b8:	d811883a 	mov	r8,sp
    87bc:	003ced06 	br	7b74 <__ram_exceptions_end+0xfbfe7920>
    87c0:	d9402117 	ldw	r5,132(sp)
    87c4:	d9002017 	ldw	r4,128(sp)
    87c8:	d9801a04 	addi	r6,sp,104
    87cc:	da402c15 	stw	r9,176(sp)
    87d0:	db802a15 	stw	r14,168(sp)
    87d4:	00077580 	call	7758 <__sprint_r.part.0>
    87d8:	da402c17 	ldw	r9,176(sp)
    87dc:	db802a17 	ldw	r14,168(sp)
    87e0:	103f761e 	bne	r2,zero,85bc <__ram_exceptions_end+0xfbfe8368>
    87e4:	d9401b17 	ldw	r5,108(sp)
    87e8:	d8801c17 	ldw	r2,112(sp)
    87ec:	d811883a 	mov	r8,sp
    87f0:	29000044 	addi	r4,r5,1
    87f4:	003d5b06 	br	7d64 <__ram_exceptions_end+0xfbfe7b10>
    87f8:	d9402117 	ldw	r5,132(sp)
    87fc:	d9002017 	ldw	r4,128(sp)
    8800:	d9801a04 	addi	r6,sp,104
    8804:	da402c15 	stw	r9,176(sp)
    8808:	00077580 	call	7758 <__sprint_r.part.0>
    880c:	da402c17 	ldw	r9,176(sp)
    8810:	103f6a1e 	bne	r2,zero,85bc <__ram_exceptions_end+0xfbfe8368>
    8814:	d9401b17 	ldw	r5,108(sp)
    8818:	d8801c17 	ldw	r2,112(sp)
    881c:	d811883a 	mov	r8,sp
    8820:	29000044 	addi	r4,r5,1
    8824:	003f1006 	br	8468 <__ram_exceptions_end+0xfbfe8214>
    8828:	1000c31e 	bne	r2,zero,8b38 <___vfiprintf_internal_r+0x12cc>
    882c:	01000044 	movi	r4,1
    8830:	000b883a 	mov	r5,zero
    8834:	d811883a 	mov	r8,sp
    8838:	003f0d06 	br	8470 <__ram_exceptions_end+0xfbfe821c>
    883c:	d9402117 	ldw	r5,132(sp)
    8840:	d9002017 	ldw	r4,128(sp)
    8844:	d9801a04 	addi	r6,sp,104
    8848:	00077580 	call	7758 <__sprint_r.part.0>
    884c:	103f5b1e 	bne	r2,zero,85bc <__ram_exceptions_end+0xfbfe8368>
    8850:	d9001b17 	ldw	r4,108(sp)
    8854:	d8801c17 	ldw	r2,112(sp)
    8858:	d811883a 	mov	r8,sp
    885c:	21000044 	addi	r4,r4,1
    8860:	003d8006 	br	7e64 <__ram_exceptions_end+0xfbfe7c10>
    8864:	01000074 	movhi	r4,1
    8868:	21005704 	addi	r4,r4,348
    886c:	d9002615 	stw	r4,152(sp)
    8870:	d8c02215 	stw	r3,136(sp)
    8874:	1029883a 	mov	r20,r2
    8878:	94c4b03a 	or	r2,r18,r19
    887c:	103fb21e 	bne	r2,zero,8748 <__ram_exceptions_end+0xfbfe84f4>
    8880:	0039883a 	mov	fp,zero
    8884:	00800084 	movi	r2,2
    8888:	003e6b06 	br	8238 <__ram_exceptions_end+0xfbfe7fe4>
    888c:	da802217 	ldw	r10,136(sp)
    8890:	d8001d85 	stb	zero,118(sp)
    8894:	0027883a 	mov	r19,zero
    8898:	50800104 	addi	r2,r10,4
    889c:	54800017 	ldw	r18,0(r10)
    88a0:	483e6016 	blt	r9,zero,8224 <__ram_exceptions_end+0xfbfe7fd0>
    88a4:	00ffdfc4 	movi	r3,-129
    88a8:	d8802215 	stw	r2,136(sp)
    88ac:	a0e8703a 	and	r20,r20,r3
    88b0:	0039883a 	mov	fp,zero
    88b4:	903ebb26 	beq	r18,zero,83a4 <__ram_exceptions_end+0xfbfe8150>
    88b8:	00800244 	movi	r2,9
    88bc:	14bdee36 	bltu	r2,r18,8078 <__ram_exceptions_end+0xfbfe7e24>
    88c0:	003eba06 	br	83ac <__ram_exceptions_end+0xfbfe8158>
    88c4:	00800c04 	movi	r2,48
    88c8:	d8c01d45 	stb	r3,117(sp)
    88cc:	d8801d05 	stb	r2,116(sp)
    88d0:	d8001d85 	stb	zero,118(sp)
    88d4:	a0c00094 	ori	r3,r20,2
    88d8:	4800a916 	blt	r9,zero,8b80 <___vfiprintf_internal_r+0x1314>
    88dc:	00bfdfc4 	movi	r2,-129
    88e0:	a096703a 	and	r11,r20,r2
    88e4:	5d000094 	ori	r20,r11,2
    88e8:	0039883a 	mov	fp,zero
    88ec:	003f9706 	br	874c <__ram_exceptions_end+0xfbfe84f8>
    88f0:	8025883a 	mov	r18,r16
    88f4:	003c2e06 	br	79b0 <__ram_exceptions_end+0xfbfe775c>
    88f8:	00800074 	movhi	r2,1
    88fc:	10805704 	addi	r2,r2,348
    8900:	0039883a 	mov	fp,zero
    8904:	d8802615 	stw	r2,152(sp)
    8908:	003f9006 	br	874c <__ram_exceptions_end+0xfbfe84f8>
    890c:	04a5c83a 	sub	r18,zero,r18
    8910:	07000b44 	movi	fp,45
    8914:	9004c03a 	cmpne	r2,r18,zero
    8918:	04e7c83a 	sub	r19,zero,r19
    891c:	df001d85 	stb	fp,118(sp)
    8920:	98a7c83a 	sub	r19,r19,r2
    8924:	48009f16 	blt	r9,zero,8ba4 <___vfiprintf_internal_r+0x1338>
    8928:	00bfdfc4 	movi	r2,-129
    892c:	a0a8703a 	and	r20,r20,r2
    8930:	003dd006 	br	8074 <__ram_exceptions_end+0xfbfe7e20>
    8934:	70004c26 	beq	r14,zero,8a68 <___vfiprintf_internal_r+0x11fc>
    8938:	00800084 	movi	r2,2
    893c:	d8c01d04 	addi	r3,sp,116
    8940:	d8c00015 	stw	r3,0(sp)
    8944:	d8800115 	stw	r2,4(sp)
    8948:	01000044 	movi	r4,1
    894c:	d811883a 	mov	r8,sp
    8950:	003f7306 	br	8720 <__ram_exceptions_end+0xfbfe84cc>
    8954:	a080100c 	andi	r2,r20,64
    8958:	da802217 	ldw	r10,136(sp)
    895c:	103e0626 	beq	r2,zero,8178 <__ram_exceptions_end+0xfbfe7f24>
    8960:	5480000f 	ldh	r18,0(r10)
    8964:	52800104 	addi	r10,r10,4
    8968:	da802215 	stw	r10,136(sp)
    896c:	9027d7fa 	srai	r19,r18,31
    8970:	9805883a 	mov	r2,r19
    8974:	003db806 	br	8058 <__ram_exceptions_end+0xfbfe7e04>
    8978:	a080040c 	andi	r2,r20,16
    897c:	1000091e 	bne	r2,zero,89a4 <___vfiprintf_internal_r+0x1138>
    8980:	a2c0100c 	andi	r11,r20,64
    8984:	58000726 	beq	r11,zero,89a4 <___vfiprintf_internal_r+0x1138>
    8988:	da802217 	ldw	r10,136(sp)
    898c:	50800017 	ldw	r2,0(r10)
    8990:	52800104 	addi	r10,r10,4
    8994:	da802215 	stw	r10,136(sp)
    8998:	da802317 	ldw	r10,140(sp)
    899c:	1280000d 	sth	r10,0(r2)
    89a0:	003be706 	br	7940 <__ram_exceptions_end+0xfbfe76ec>
    89a4:	da802217 	ldw	r10,136(sp)
    89a8:	50800017 	ldw	r2,0(r10)
    89ac:	52800104 	addi	r10,r10,4
    89b0:	da802215 	stw	r10,136(sp)
    89b4:	da802317 	ldw	r10,140(sp)
    89b8:	12800015 	stw	r10,0(r2)
    89bc:	003be006 	br	7940 <__ram_exceptions_end+0xfbfe76ec>
    89c0:	a080100c 	andi	r2,r20,64
    89c4:	da802217 	ldw	r10,136(sp)
    89c8:	10003026 	beq	r2,zero,8a8c <___vfiprintf_internal_r+0x1220>
    89cc:	5480000b 	ldhu	r18,0(r10)
    89d0:	52800104 	addi	r10,r10,4
    89d4:	0027883a 	mov	r19,zero
    89d8:	da802215 	stw	r10,136(sp)
    89dc:	003d8006 	br	7fe0 <__ram_exceptions_end+0xfbfe7d8c>
    89e0:	80c00007 	ldb	r3,0(r16)
    89e4:	003c0006 	br	79e8 <__ram_exceptions_end+0xfbfe7794>
    89e8:	a080100c 	andi	r2,r20,64
    89ec:	d8001d85 	stb	zero,118(sp)
    89f0:	da802217 	ldw	r10,136(sp)
    89f4:	1000201e 	bne	r2,zero,8a78 <___vfiprintf_internal_r+0x120c>
    89f8:	50800104 	addi	r2,r10,4
    89fc:	54800017 	ldw	r18,0(r10)
    8a00:	0027883a 	mov	r19,zero
    8a04:	483def0e 	bge	r9,zero,81c4 <__ram_exceptions_end+0xfbfe7f70>
    8a08:	94c6b03a 	or	r3,r18,r19
    8a0c:	d8802215 	stw	r2,136(sp)
    8a10:	183d4e1e 	bne	r3,zero,7f4c <__ram_exceptions_end+0xfbfe7cf8>
    8a14:	0039883a 	mov	fp,zero
    8a18:	0005883a 	mov	r2,zero
    8a1c:	003e0606 	br	8238 <__ram_exceptions_end+0xfbfe7fe4>
    8a20:	d9402117 	ldw	r5,132(sp)
    8a24:	d9002017 	ldw	r4,128(sp)
    8a28:	d9801a04 	addi	r6,sp,104
    8a2c:	da402c15 	stw	r9,176(sp)
    8a30:	db802a15 	stw	r14,168(sp)
    8a34:	00077580 	call	7758 <__sprint_r.part.0>
    8a38:	da402c17 	ldw	r9,176(sp)
    8a3c:	db802a17 	ldw	r14,168(sp)
    8a40:	103ede1e 	bne	r2,zero,85bc <__ram_exceptions_end+0xfbfe8368>
    8a44:	d9401b17 	ldw	r5,108(sp)
    8a48:	d8801c17 	ldw	r2,112(sp)
    8a4c:	d811883a 	mov	r8,sp
    8a50:	29000044 	addi	r4,r5,1
    8a54:	003e7406 	br	8428 <__ram_exceptions_end+0xfbfe81d4>
    8a58:	00bfffc4 	movi	r2,-1
    8a5c:	003c5806 	br	7bc0 <__ram_exceptions_end+0xfbfe796c>
    8a60:	d811883a 	mov	r8,sp
    8a64:	003ee806 	br	8608 <__ram_exceptions_end+0xfbfe83b4>
    8a68:	000b883a 	mov	r5,zero
    8a6c:	01000044 	movi	r4,1
    8a70:	d811883a 	mov	r8,sp
    8a74:	003e7c06 	br	8468 <__ram_exceptions_end+0xfbfe8214>
    8a78:	50800104 	addi	r2,r10,4
    8a7c:	5480000b 	ldhu	r18,0(r10)
    8a80:	0027883a 	mov	r19,zero
    8a84:	483dcf0e 	bge	r9,zero,81c4 <__ram_exceptions_end+0xfbfe7f70>
    8a88:	003fdf06 	br	8a08 <__ram_exceptions_end+0xfbfe87b4>
    8a8c:	54800017 	ldw	r18,0(r10)
    8a90:	52800104 	addi	r10,r10,4
    8a94:	0027883a 	mov	r19,zero
    8a98:	da802215 	stw	r10,136(sp)
    8a9c:	003d5006 	br	7fe0 <__ram_exceptions_end+0xfbfe7d8c>
    8aa0:	50800104 	addi	r2,r10,4
    8aa4:	5480000b 	ldhu	r18,0(r10)
    8aa8:	0027883a 	mov	r19,zero
    8aac:	483f7d0e 	bge	r9,zero,88a4 <__ram_exceptions_end+0xfbfe8650>
    8ab0:	003ddc06 	br	8224 <__ram_exceptions_end+0xfbfe7fd0>
    8ab4:	d8c02215 	stw	r3,136(sp)
    8ab8:	0039883a 	mov	fp,zero
    8abc:	003ddb06 	br	822c <__ram_exceptions_end+0xfbfe7fd8>
    8ac0:	02800074 	movhi	r10,1
    8ac4:	5280b804 	addi	r10,r10,736
    8ac8:	da802415 	stw	r10,144(sp)
    8acc:	003e8306 	br	84dc <__ram_exceptions_end+0xfbfe8288>
    8ad0:	d8801c17 	ldw	r2,112(sp)
    8ad4:	dd002117 	ldw	r20,132(sp)
    8ad8:	103eb926 	beq	r2,zero,85c0 <__ram_exceptions_end+0xfbfe836c>
    8adc:	d9002017 	ldw	r4,128(sp)
    8ae0:	d9801a04 	addi	r6,sp,104
    8ae4:	a00b883a 	mov	r5,r20
    8ae8:	00077580 	call	7758 <__sprint_r.part.0>
    8aec:	003eb406 	br	85c0 <__ram_exceptions_end+0xfbfe836c>
    8af0:	80c00043 	ldbu	r3,1(r16)
    8af4:	a5000814 	ori	r20,r20,32
    8af8:	84000044 	addi	r16,r16,1
    8afc:	18c03fcc 	andi	r3,r3,255
    8b00:	18c0201c 	xori	r3,r3,128
    8b04:	18ffe004 	addi	r3,r3,-128
    8b08:	003bb706 	br	79e8 <__ram_exceptions_end+0xfbfe7794>
    8b0c:	a809883a 	mov	r4,r21
    8b10:	d8c02a15 	stw	r3,168(sp)
    8b14:	da002b15 	stw	r8,172(sp)
    8b18:	00076c00 	call	76c0 <strlen>
    8b1c:	d8c02a17 	ldw	r3,168(sp)
    8b20:	1027883a 	mov	r19,r2
    8b24:	df001d83 	ldbu	fp,118(sp)
    8b28:	d8c02215 	stw	r3,136(sp)
    8b2c:	0013883a 	mov	r9,zero
    8b30:	da002b17 	ldw	r8,172(sp)
    8b34:	003c4d06 	br	7c6c <__ram_exceptions_end+0xfbfe7a18>
    8b38:	d9402117 	ldw	r5,132(sp)
    8b3c:	d9002017 	ldw	r4,128(sp)
    8b40:	d9801a04 	addi	r6,sp,104
    8b44:	da402c15 	stw	r9,176(sp)
    8b48:	00077580 	call	7758 <__sprint_r.part.0>
    8b4c:	da402c17 	ldw	r9,176(sp)
    8b50:	103e9a1e 	bne	r2,zero,85bc <__ram_exceptions_end+0xfbfe8368>
    8b54:	d9401b17 	ldw	r5,108(sp)
    8b58:	d8801c17 	ldw	r2,112(sp)
    8b5c:	d811883a 	mov	r8,sp
    8b60:	29000044 	addi	r4,r5,1
    8b64:	003e4206 	br	8470 <__ram_exceptions_end+0xfbfe821c>
    8b68:	d9401b17 	ldw	r5,108(sp)
    8b6c:	01000074 	movhi	r4,1
    8b70:	2100bc04 	addi	r4,r4,752
    8b74:	d9002415 	stw	r4,144(sp)
    8b78:	29400044 	addi	r5,r5,1
    8b7c:	003c6d06 	br	7d34 <__ram_exceptions_end+0xfbfe7ae0>
    8b80:	0039883a 	mov	fp,zero
    8b84:	00800084 	movi	r2,2
    8b88:	10803fcc 	andi	r2,r2,255
    8b8c:	01000044 	movi	r4,1
    8b90:	11001e26 	beq	r2,r4,8c0c <___vfiprintf_internal_r+0x13a0>
    8b94:	01000084 	movi	r4,2
    8b98:	11001e1e 	bne	r2,r4,8c14 <___vfiprintf_internal_r+0x13a8>
    8b9c:	1829883a 	mov	r20,r3
    8ba0:	003eea06 	br	874c <__ram_exceptions_end+0xfbfe84f8>
    8ba4:	a007883a 	mov	r3,r20
    8ba8:	00800044 	movi	r2,1
    8bac:	003ff606 	br	8b88 <__ram_exceptions_end+0xfbfe8934>
    8bb0:	00800184 	movi	r2,6
    8bb4:	1240012e 	bgeu	r2,r9,8bbc <___vfiprintf_internal_r+0x1350>
    8bb8:	1013883a 	mov	r9,r2
    8bbc:	4827883a 	mov	r19,r9
    8bc0:	4825883a 	mov	r18,r9
    8bc4:	48001516 	blt	r9,zero,8c1c <___vfiprintf_internal_r+0x13b0>
    8bc8:	05400074 	movhi	r21,1
    8bcc:	d8c02215 	stw	r3,136(sp)
    8bd0:	ad405c04 	addi	r21,r21,368
    8bd4:	003d1406 	br	8028 <__ram_exceptions_end+0xfbfe7dd4>
    8bd8:	02800074 	movhi	r10,1
    8bdc:	5280b804 	addi	r10,r10,736
    8be0:	da802415 	stw	r10,144(sp)
    8be4:	200d883a 	mov	r6,r4
    8be8:	003c9106 	br	7e30 <__ram_exceptions_end+0xfbfe7bdc>
    8bec:	5021883a 	mov	r16,r10
    8bf0:	0013883a 	mov	r9,zero
    8bf4:	003b7d06 	br	79ec <__ram_exceptions_end+0xfbfe7798>
    8bf8:	4827883a 	mov	r19,r9
    8bfc:	df001d83 	ldbu	fp,118(sp)
    8c00:	d8c02215 	stw	r3,136(sp)
    8c04:	0013883a 	mov	r9,zero
    8c08:	003c1806 	br	7c6c <__ram_exceptions_end+0xfbfe7a18>
    8c0c:	1829883a 	mov	r20,r3
    8c10:	003d1806 	br	8074 <__ram_exceptions_end+0xfbfe7e20>
    8c14:	1829883a 	mov	r20,r3
    8c18:	003ccd06 	br	7f50 <__ram_exceptions_end+0xfbfe7cfc>
    8c1c:	0025883a 	mov	r18,zero
    8c20:	003fe906 	br	8bc8 <__ram_exceptions_end+0xfbfe8974>
    8c24:	d8802217 	ldw	r2,136(sp)
    8c28:	80c00043 	ldbu	r3,1(r16)
    8c2c:	5021883a 	mov	r16,r10
    8c30:	12400017 	ldw	r9,0(r2)
    8c34:	10800104 	addi	r2,r2,4
    8c38:	d8802215 	stw	r2,136(sp)
    8c3c:	483faf0e 	bge	r9,zero,8afc <__ram_exceptions_end+0xfbfe88a8>
    8c40:	18c03fcc 	andi	r3,r3,255
    8c44:	18c0201c 	xori	r3,r3,128
    8c48:	027fffc4 	movi	r9,-1
    8c4c:	18ffe004 	addi	r3,r3,-128
    8c50:	003b6506 	br	79e8 <__ram_exceptions_end+0xfbfe7794>
    8c54:	d9c01d85 	stb	r7,118(sp)
    8c58:	003ca006 	br	7edc <__ram_exceptions_end+0xfbfe7c88>
    8c5c:	d9c01d85 	stb	r7,118(sp)
    8c60:	003cad06 	br	7f18 <__ram_exceptions_end+0xfbfe7cc4>
    8c64:	d9c01d85 	stb	r7,118(sp)
    8c68:	003d7d06 	br	8260 <__ram_exceptions_end+0xfbfe800c>
    8c6c:	d9c01d85 	stb	r7,118(sp)
    8c70:	003d5f06 	br	81f0 <__ram_exceptions_end+0xfbfe7f9c>
    8c74:	a080004c 	andi	r2,r20,1
    8c78:	0039883a 	mov	fp,zero
    8c7c:	10000526 	beq	r2,zero,8c94 <___vfiprintf_internal_r+0x1428>
    8c80:	00800c04 	movi	r2,48
    8c84:	d88019c5 	stb	r2,103(sp)
    8c88:	dcc02717 	ldw	r19,156(sp)
    8c8c:	dd4019c4 	addi	r21,sp,103
    8c90:	003bf606 	br	7c6c <__ram_exceptions_end+0xfbfe7a18>
    8c94:	0027883a 	mov	r19,zero
    8c98:	dd401a04 	addi	r21,sp,104
    8c9c:	003bf306 	br	7c6c <__ram_exceptions_end+0xfbfe7a18>
    8ca0:	d9c01d85 	stb	r7,118(sp)
    8ca4:	003dc806 	br	83c8 <__ram_exceptions_end+0xfbfe8174>
    8ca8:	d9c01d85 	stb	r7,118(sp)
    8cac:	003d3a06 	br	8198 <__ram_exceptions_end+0xfbfe7f44>
    8cb0:	d9c01d85 	stb	r7,118(sp)
    8cb4:	003d2a06 	br	8160 <__ram_exceptions_end+0xfbfe7f0c>
    8cb8:	d9c01d85 	stb	r7,118(sp)
    8cbc:	003cde06 	br	8038 <__ram_exceptions_end+0xfbfe7de4>
    8cc0:	d9c01d85 	stb	r7,118(sp)
    8cc4:	003cbc06 	br	7fb8 <__ram_exceptions_end+0xfbfe7d64>

00008cc8 <__vfiprintf_internal>:
    8cc8:	00800074 	movhi	r2,1
    8ccc:	1087b904 	addi	r2,r2,7908
    8cd0:	300f883a 	mov	r7,r6
    8cd4:	280d883a 	mov	r6,r5
    8cd8:	200b883a 	mov	r5,r4
    8cdc:	11000017 	ldw	r4,0(r2)
    8ce0:	000786c1 	jmpi	786c <___vfiprintf_internal_r>

00008ce4 <__sbprintf>:
    8ce4:	2880030b 	ldhu	r2,12(r5)
    8ce8:	2ac01917 	ldw	r11,100(r5)
    8cec:	2a80038b 	ldhu	r10,14(r5)
    8cf0:	2a400717 	ldw	r9,28(r5)
    8cf4:	2a000917 	ldw	r8,36(r5)
    8cf8:	defee204 	addi	sp,sp,-1144
    8cfc:	00c10004 	movi	r3,1024
    8d00:	dc011a15 	stw	r16,1128(sp)
    8d04:	10bfff4c 	andi	r2,r2,65533
    8d08:	2821883a 	mov	r16,r5
    8d0c:	d8cb883a 	add	r5,sp,r3
    8d10:	dc811c15 	stw	r18,1136(sp)
    8d14:	dc411b15 	stw	r17,1132(sp)
    8d18:	dfc11d15 	stw	ra,1140(sp)
    8d1c:	2025883a 	mov	r18,r4
    8d20:	d881030d 	sth	r2,1036(sp)
    8d24:	dac11915 	stw	r11,1124(sp)
    8d28:	da81038d 	sth	r10,1038(sp)
    8d2c:	da410715 	stw	r9,1052(sp)
    8d30:	da010915 	stw	r8,1060(sp)
    8d34:	dec10015 	stw	sp,1024(sp)
    8d38:	dec10415 	stw	sp,1040(sp)
    8d3c:	d8c10215 	stw	r3,1032(sp)
    8d40:	d8c10515 	stw	r3,1044(sp)
    8d44:	d8010615 	stw	zero,1048(sp)
    8d48:	000786c0 	call	786c <___vfiprintf_internal_r>
    8d4c:	1023883a 	mov	r17,r2
    8d50:	10000416 	blt	r2,zero,8d64 <__sbprintf+0x80>
    8d54:	d9410004 	addi	r5,sp,1024
    8d58:	9009883a 	mov	r4,r18
    8d5c:	0004c040 	call	4c04 <_fflush_r>
    8d60:	10000d1e 	bne	r2,zero,8d98 <__sbprintf+0xb4>
    8d64:	d881030b 	ldhu	r2,1036(sp)
    8d68:	1080100c 	andi	r2,r2,64
    8d6c:	10000326 	beq	r2,zero,8d7c <__sbprintf+0x98>
    8d70:	8080030b 	ldhu	r2,12(r16)
    8d74:	10801014 	ori	r2,r2,64
    8d78:	8080030d 	sth	r2,12(r16)
    8d7c:	8805883a 	mov	r2,r17
    8d80:	dfc11d17 	ldw	ra,1140(sp)
    8d84:	dc811c17 	ldw	r18,1136(sp)
    8d88:	dc411b17 	ldw	r17,1132(sp)
    8d8c:	dc011a17 	ldw	r16,1128(sp)
    8d90:	dec11e04 	addi	sp,sp,1144
    8d94:	f800283a 	ret
    8d98:	047fffc4 	movi	r17,-1
    8d9c:	003ff106 	br	8d64 <__ram_exceptions_end+0xfbfe8b10>

00008da0 <_write_r>:
    8da0:	defffd04 	addi	sp,sp,-12
    8da4:	2805883a 	mov	r2,r5
    8da8:	dc000015 	stw	r16,0(sp)
    8dac:	04000074 	movhi	r16,1
    8db0:	dc400115 	stw	r17,4(sp)
    8db4:	300b883a 	mov	r5,r6
    8db8:	840e8c04 	addi	r16,r16,14896
    8dbc:	2023883a 	mov	r17,r4
    8dc0:	380d883a 	mov	r6,r7
    8dc4:	1009883a 	mov	r4,r2
    8dc8:	dfc00215 	stw	ra,8(sp)
    8dcc:	80000015 	stw	zero,0(r16)
    8dd0:	000e0bc0 	call	e0bc <write>
    8dd4:	00ffffc4 	movi	r3,-1
    8dd8:	10c00526 	beq	r2,r3,8df0 <_write_r+0x50>
    8ddc:	dfc00217 	ldw	ra,8(sp)
    8de0:	dc400117 	ldw	r17,4(sp)
    8de4:	dc000017 	ldw	r16,0(sp)
    8de8:	dec00304 	addi	sp,sp,12
    8dec:	f800283a 	ret
    8df0:	80c00017 	ldw	r3,0(r16)
    8df4:	183ff926 	beq	r3,zero,8ddc <__ram_exceptions_end+0xfbfe8b88>
    8df8:	88c00015 	stw	r3,0(r17)
    8dfc:	003ff706 	br	8ddc <__ram_exceptions_end+0xfbfe8b88>

00008e00 <_close_r>:
    8e00:	defffd04 	addi	sp,sp,-12
    8e04:	dc000015 	stw	r16,0(sp)
    8e08:	04000074 	movhi	r16,1
    8e0c:	dc400115 	stw	r17,4(sp)
    8e10:	840e8c04 	addi	r16,r16,14896
    8e14:	2023883a 	mov	r17,r4
    8e18:	2809883a 	mov	r4,r5
    8e1c:	dfc00215 	stw	ra,8(sp)
    8e20:	80000015 	stw	zero,0(r16)
    8e24:	000d3a40 	call	d3a4 <close>
    8e28:	00ffffc4 	movi	r3,-1
    8e2c:	10c00526 	beq	r2,r3,8e44 <_close_r+0x44>
    8e30:	dfc00217 	ldw	ra,8(sp)
    8e34:	dc400117 	ldw	r17,4(sp)
    8e38:	dc000017 	ldw	r16,0(sp)
    8e3c:	dec00304 	addi	sp,sp,12
    8e40:	f800283a 	ret
    8e44:	80c00017 	ldw	r3,0(r16)
    8e48:	183ff926 	beq	r3,zero,8e30 <__ram_exceptions_end+0xfbfe8bdc>
    8e4c:	88c00015 	stw	r3,0(r17)
    8e50:	003ff706 	br	8e30 <__ram_exceptions_end+0xfbfe8bdc>

00008e54 <_calloc_r>:
    8e54:	298b383a 	mul	r5,r5,r6
    8e58:	defffe04 	addi	sp,sp,-8
    8e5c:	dfc00115 	stw	ra,4(sp)
    8e60:	dc000015 	stw	r16,0(sp)
    8e64:	00058840 	call	5884 <_malloc_r>
    8e68:	10002926 	beq	r2,zero,8f10 <_calloc_r+0xbc>
    8e6c:	11bfff17 	ldw	r6,-4(r2)
    8e70:	1021883a 	mov	r16,r2
    8e74:	00bfff04 	movi	r2,-4
    8e78:	308c703a 	and	r6,r6,r2
    8e7c:	00c00904 	movi	r3,36
    8e80:	308d883a 	add	r6,r6,r2
    8e84:	19801636 	bltu	r3,r6,8ee0 <_calloc_r+0x8c>
    8e88:	008004c4 	movi	r2,19
    8e8c:	11800b2e 	bgeu	r2,r6,8ebc <_calloc_r+0x68>
    8e90:	80000015 	stw	zero,0(r16)
    8e94:	80000115 	stw	zero,4(r16)
    8e98:	008006c4 	movi	r2,27
    8e9c:	11801a2e 	bgeu	r2,r6,8f08 <_calloc_r+0xb4>
    8ea0:	80000215 	stw	zero,8(r16)
    8ea4:	80000315 	stw	zero,12(r16)
    8ea8:	30c0151e 	bne	r6,r3,8f00 <_calloc_r+0xac>
    8eac:	80000415 	stw	zero,16(r16)
    8eb0:	80800604 	addi	r2,r16,24
    8eb4:	80000515 	stw	zero,20(r16)
    8eb8:	00000106 	br	8ec0 <_calloc_r+0x6c>
    8ebc:	8005883a 	mov	r2,r16
    8ec0:	10000015 	stw	zero,0(r2)
    8ec4:	10000115 	stw	zero,4(r2)
    8ec8:	10000215 	stw	zero,8(r2)
    8ecc:	8005883a 	mov	r2,r16
    8ed0:	dfc00117 	ldw	ra,4(sp)
    8ed4:	dc000017 	ldw	r16,0(sp)
    8ed8:	dec00204 	addi	sp,sp,8
    8edc:	f800283a 	ret
    8ee0:	000b883a 	mov	r5,zero
    8ee4:	8009883a 	mov	r4,r16
    8ee8:	00062bc0 	call	62bc <memset>
    8eec:	8005883a 	mov	r2,r16
    8ef0:	dfc00117 	ldw	ra,4(sp)
    8ef4:	dc000017 	ldw	r16,0(sp)
    8ef8:	dec00204 	addi	sp,sp,8
    8efc:	f800283a 	ret
    8f00:	80800404 	addi	r2,r16,16
    8f04:	003fee06 	br	8ec0 <__ram_exceptions_end+0xfbfe8c6c>
    8f08:	80800204 	addi	r2,r16,8
    8f0c:	003fec06 	br	8ec0 <__ram_exceptions_end+0xfbfe8c6c>
    8f10:	0005883a 	mov	r2,zero
    8f14:	003fee06 	br	8ed0 <__ram_exceptions_end+0xfbfe8c7c>

00008f18 <_fclose_r>:
    8f18:	28003926 	beq	r5,zero,9000 <_fclose_r+0xe8>
    8f1c:	defffc04 	addi	sp,sp,-16
    8f20:	dc400115 	stw	r17,4(sp)
    8f24:	dc000015 	stw	r16,0(sp)
    8f28:	dfc00315 	stw	ra,12(sp)
    8f2c:	dc800215 	stw	r18,8(sp)
    8f30:	2023883a 	mov	r17,r4
    8f34:	2821883a 	mov	r16,r5
    8f38:	20000226 	beq	r4,zero,8f44 <_fclose_r+0x2c>
    8f3c:	20800e17 	ldw	r2,56(r4)
    8f40:	10002726 	beq	r2,zero,8fe0 <_fclose_r+0xc8>
    8f44:	8080030f 	ldh	r2,12(r16)
    8f48:	1000071e 	bne	r2,zero,8f68 <_fclose_r+0x50>
    8f4c:	0005883a 	mov	r2,zero
    8f50:	dfc00317 	ldw	ra,12(sp)
    8f54:	dc800217 	ldw	r18,8(sp)
    8f58:	dc400117 	ldw	r17,4(sp)
    8f5c:	dc000017 	ldw	r16,0(sp)
    8f60:	dec00404 	addi	sp,sp,16
    8f64:	f800283a 	ret
    8f68:	800b883a 	mov	r5,r16
    8f6c:	8809883a 	mov	r4,r17
    8f70:	00049e80 	call	49e8 <__sflush_r>
    8f74:	1025883a 	mov	r18,r2
    8f78:	80800b17 	ldw	r2,44(r16)
    8f7c:	10000426 	beq	r2,zero,8f90 <_fclose_r+0x78>
    8f80:	81400717 	ldw	r5,28(r16)
    8f84:	8809883a 	mov	r4,r17
    8f88:	103ee83a 	callr	r2
    8f8c:	10001616 	blt	r2,zero,8fe8 <_fclose_r+0xd0>
    8f90:	8080030b 	ldhu	r2,12(r16)
    8f94:	1080200c 	andi	r2,r2,128
    8f98:	1000151e 	bne	r2,zero,8ff0 <_fclose_r+0xd8>
    8f9c:	81400c17 	ldw	r5,48(r16)
    8fa0:	28000526 	beq	r5,zero,8fb8 <_fclose_r+0xa0>
    8fa4:	80801004 	addi	r2,r16,64
    8fa8:	28800226 	beq	r5,r2,8fb4 <_fclose_r+0x9c>
    8fac:	8809883a 	mov	r4,r17
    8fb0:	00051540 	call	5154 <_free_r>
    8fb4:	80000c15 	stw	zero,48(r16)
    8fb8:	81401117 	ldw	r5,68(r16)
    8fbc:	28000326 	beq	r5,zero,8fcc <_fclose_r+0xb4>
    8fc0:	8809883a 	mov	r4,r17
    8fc4:	00051540 	call	5154 <_free_r>
    8fc8:	80001115 	stw	zero,68(r16)
    8fcc:	0004ff00 	call	4ff0 <__sfp_lock_acquire>
    8fd0:	8000030d 	sth	zero,12(r16)
    8fd4:	0004ff40 	call	4ff4 <__sfp_lock_release>
    8fd8:	9005883a 	mov	r2,r18
    8fdc:	003fdc06 	br	8f50 <__ram_exceptions_end+0xfbfe8cfc>
    8fe0:	0004fe00 	call	4fe0 <__sinit>
    8fe4:	003fd706 	br	8f44 <__ram_exceptions_end+0xfbfe8cf0>
    8fe8:	04bfffc4 	movi	r18,-1
    8fec:	003fe806 	br	8f90 <__ram_exceptions_end+0xfbfe8d3c>
    8ff0:	81400417 	ldw	r5,16(r16)
    8ff4:	8809883a 	mov	r4,r17
    8ff8:	00051540 	call	5154 <_free_r>
    8ffc:	003fe706 	br	8f9c <__ram_exceptions_end+0xfbfe8d48>
    9000:	0005883a 	mov	r2,zero
    9004:	f800283a 	ret

00009008 <fclose>:
    9008:	00800074 	movhi	r2,1
    900c:	1087b904 	addi	r2,r2,7908
    9010:	200b883a 	mov	r5,r4
    9014:	11000017 	ldw	r4,0(r2)
    9018:	0008f181 	jmpi	8f18 <_fclose_r>

0000901c <__fputwc>:
    901c:	defff804 	addi	sp,sp,-32
    9020:	dcc00415 	stw	r19,16(sp)
    9024:	dc800315 	stw	r18,12(sp)
    9028:	dc000115 	stw	r16,4(sp)
    902c:	dfc00715 	stw	ra,28(sp)
    9030:	dd400615 	stw	r21,24(sp)
    9034:	dd000515 	stw	r20,20(sp)
    9038:	dc400215 	stw	r17,8(sp)
    903c:	2027883a 	mov	r19,r4
    9040:	2825883a 	mov	r18,r5
    9044:	3021883a 	mov	r16,r6
    9048:	00056740 	call	5674 <__locale_mb_cur_max>
    904c:	00c00044 	movi	r3,1
    9050:	10c03e26 	beq	r2,r3,914c <__fputwc+0x130>
    9054:	81c01704 	addi	r7,r16,92
    9058:	900d883a 	mov	r6,r18
    905c:	d80b883a 	mov	r5,sp
    9060:	9809883a 	mov	r4,r19
    9064:	000a0680 	call	a068 <_wcrtomb_r>
    9068:	1029883a 	mov	r20,r2
    906c:	00bfffc4 	movi	r2,-1
    9070:	a0802026 	beq	r20,r2,90f4 <__fputwc+0xd8>
    9074:	d9400003 	ldbu	r5,0(sp)
    9078:	a0001c26 	beq	r20,zero,90ec <__fputwc+0xd0>
    907c:	0023883a 	mov	r17,zero
    9080:	05400284 	movi	r21,10
    9084:	00000906 	br	90ac <__fputwc+0x90>
    9088:	80800017 	ldw	r2,0(r16)
    908c:	11400005 	stb	r5,0(r2)
    9090:	80c00017 	ldw	r3,0(r16)
    9094:	18c00044 	addi	r3,r3,1
    9098:	80c00015 	stw	r3,0(r16)
    909c:	8c400044 	addi	r17,r17,1
    90a0:	dc45883a 	add	r2,sp,r17
    90a4:	8d00112e 	bgeu	r17,r20,90ec <__fputwc+0xd0>
    90a8:	11400003 	ldbu	r5,0(r2)
    90ac:	80c00217 	ldw	r3,8(r16)
    90b0:	18ffffc4 	addi	r3,r3,-1
    90b4:	80c00215 	stw	r3,8(r16)
    90b8:	183ff30e 	bge	r3,zero,9088 <__ram_exceptions_end+0xfbfe8e34>
    90bc:	80800617 	ldw	r2,24(r16)
    90c0:	18801916 	blt	r3,r2,9128 <__fputwc+0x10c>
    90c4:	80800017 	ldw	r2,0(r16)
    90c8:	11400005 	stb	r5,0(r2)
    90cc:	80800017 	ldw	r2,0(r16)
    90d0:	10c00003 	ldbu	r3,0(r2)
    90d4:	10800044 	addi	r2,r2,1
    90d8:	1d402326 	beq	r3,r21,9168 <__fputwc+0x14c>
    90dc:	80800015 	stw	r2,0(r16)
    90e0:	8c400044 	addi	r17,r17,1
    90e4:	dc45883a 	add	r2,sp,r17
    90e8:	8d3fef36 	bltu	r17,r20,90a8 <__ram_exceptions_end+0xfbfe8e54>
    90ec:	9005883a 	mov	r2,r18
    90f0:	00000406 	br	9104 <__fputwc+0xe8>
    90f4:	80c0030b 	ldhu	r3,12(r16)
    90f8:	a005883a 	mov	r2,r20
    90fc:	18c01014 	ori	r3,r3,64
    9100:	80c0030d 	sth	r3,12(r16)
    9104:	dfc00717 	ldw	ra,28(sp)
    9108:	dd400617 	ldw	r21,24(sp)
    910c:	dd000517 	ldw	r20,20(sp)
    9110:	dcc00417 	ldw	r19,16(sp)
    9114:	dc800317 	ldw	r18,12(sp)
    9118:	dc400217 	ldw	r17,8(sp)
    911c:	dc000117 	ldw	r16,4(sp)
    9120:	dec00804 	addi	sp,sp,32
    9124:	f800283a 	ret
    9128:	800d883a 	mov	r6,r16
    912c:	29403fcc 	andi	r5,r5,255
    9130:	9809883a 	mov	r4,r19
    9134:	0009f100 	call	9f10 <__swbuf_r>
    9138:	10bfffe0 	cmpeqi	r2,r2,-1
    913c:	10803fcc 	andi	r2,r2,255
    9140:	103fd626 	beq	r2,zero,909c <__ram_exceptions_end+0xfbfe8e48>
    9144:	00bfffc4 	movi	r2,-1
    9148:	003fee06 	br	9104 <__ram_exceptions_end+0xfbfe8eb0>
    914c:	90ffffc4 	addi	r3,r18,-1
    9150:	01003f84 	movi	r4,254
    9154:	20ffbf36 	bltu	r4,r3,9054 <__ram_exceptions_end+0xfbfe8e00>
    9158:	900b883a 	mov	r5,r18
    915c:	dc800005 	stb	r18,0(sp)
    9160:	1029883a 	mov	r20,r2
    9164:	003fc506 	br	907c <__ram_exceptions_end+0xfbfe8e28>
    9168:	800d883a 	mov	r6,r16
    916c:	a80b883a 	mov	r5,r21
    9170:	9809883a 	mov	r4,r19
    9174:	0009f100 	call	9f10 <__swbuf_r>
    9178:	10bfffe0 	cmpeqi	r2,r2,-1
    917c:	003fef06 	br	913c <__ram_exceptions_end+0xfbfe8ee8>

00009180 <_fputwc_r>:
    9180:	3080030b 	ldhu	r2,12(r6)
    9184:	10c8000c 	andi	r3,r2,8192
    9188:	1800051e 	bne	r3,zero,91a0 <_fputwc_r+0x20>
    918c:	30c01917 	ldw	r3,100(r6)
    9190:	10880014 	ori	r2,r2,8192
    9194:	3080030d 	sth	r2,12(r6)
    9198:	18880014 	ori	r2,r3,8192
    919c:	30801915 	stw	r2,100(r6)
    91a0:	000901c1 	jmpi	901c <__fputwc>

000091a4 <fputwc>:
    91a4:	00800074 	movhi	r2,1
    91a8:	defffc04 	addi	sp,sp,-16
    91ac:	1087b904 	addi	r2,r2,7908
    91b0:	dc000115 	stw	r16,4(sp)
    91b4:	14000017 	ldw	r16,0(r2)
    91b8:	dc400215 	stw	r17,8(sp)
    91bc:	dfc00315 	stw	ra,12(sp)
    91c0:	2023883a 	mov	r17,r4
    91c4:	80000226 	beq	r16,zero,91d0 <fputwc+0x2c>
    91c8:	80800e17 	ldw	r2,56(r16)
    91cc:	10001026 	beq	r2,zero,9210 <fputwc+0x6c>
    91d0:	2880030b 	ldhu	r2,12(r5)
    91d4:	10c8000c 	andi	r3,r2,8192
    91d8:	1800051e 	bne	r3,zero,91f0 <fputwc+0x4c>
    91dc:	28c01917 	ldw	r3,100(r5)
    91e0:	10880014 	ori	r2,r2,8192
    91e4:	2880030d 	sth	r2,12(r5)
    91e8:	18880014 	ori	r2,r3,8192
    91ec:	28801915 	stw	r2,100(r5)
    91f0:	280d883a 	mov	r6,r5
    91f4:	8009883a 	mov	r4,r16
    91f8:	880b883a 	mov	r5,r17
    91fc:	dfc00317 	ldw	ra,12(sp)
    9200:	dc400217 	ldw	r17,8(sp)
    9204:	dc000117 	ldw	r16,4(sp)
    9208:	dec00404 	addi	sp,sp,16
    920c:	000901c1 	jmpi	901c <__fputwc>
    9210:	8009883a 	mov	r4,r16
    9214:	d9400015 	stw	r5,0(sp)
    9218:	0004fe00 	call	4fe0 <__sinit>
    921c:	d9400017 	ldw	r5,0(sp)
    9220:	003feb06 	br	91d0 <__ram_exceptions_end+0xfbfe8f7c>

00009224 <_fstat_r>:
    9224:	defffd04 	addi	sp,sp,-12
    9228:	2805883a 	mov	r2,r5
    922c:	dc000015 	stw	r16,0(sp)
    9230:	04000074 	movhi	r16,1
    9234:	dc400115 	stw	r17,4(sp)
    9238:	840e8c04 	addi	r16,r16,14896
    923c:	2023883a 	mov	r17,r4
    9240:	300b883a 	mov	r5,r6
    9244:	1009883a 	mov	r4,r2
    9248:	dfc00215 	stw	ra,8(sp)
    924c:	80000015 	stw	zero,0(r16)
    9250:	000d4dc0 	call	d4dc <fstat>
    9254:	00ffffc4 	movi	r3,-1
    9258:	10c00526 	beq	r2,r3,9270 <_fstat_r+0x4c>
    925c:	dfc00217 	ldw	ra,8(sp)
    9260:	dc400117 	ldw	r17,4(sp)
    9264:	dc000017 	ldw	r16,0(sp)
    9268:	dec00304 	addi	sp,sp,12
    926c:	f800283a 	ret
    9270:	80c00017 	ldw	r3,0(r16)
    9274:	183ff926 	beq	r3,zero,925c <__ram_exceptions_end+0xfbfe9008>
    9278:	88c00015 	stw	r3,0(r17)
    927c:	003ff706 	br	925c <__ram_exceptions_end+0xfbfe9008>

00009280 <__sfvwrite_r>:
    9280:	30800217 	ldw	r2,8(r6)
    9284:	10006726 	beq	r2,zero,9424 <__sfvwrite_r+0x1a4>
    9288:	28c0030b 	ldhu	r3,12(r5)
    928c:	defff404 	addi	sp,sp,-48
    9290:	dd400715 	stw	r21,28(sp)
    9294:	dd000615 	stw	r20,24(sp)
    9298:	dc000215 	stw	r16,8(sp)
    929c:	dfc00b15 	stw	ra,44(sp)
    92a0:	df000a15 	stw	fp,40(sp)
    92a4:	ddc00915 	stw	r23,36(sp)
    92a8:	dd800815 	stw	r22,32(sp)
    92ac:	dcc00515 	stw	r19,20(sp)
    92b0:	dc800415 	stw	r18,16(sp)
    92b4:	dc400315 	stw	r17,12(sp)
    92b8:	1880020c 	andi	r2,r3,8
    92bc:	2821883a 	mov	r16,r5
    92c0:	202b883a 	mov	r21,r4
    92c4:	3029883a 	mov	r20,r6
    92c8:	10002726 	beq	r2,zero,9368 <__sfvwrite_r+0xe8>
    92cc:	28800417 	ldw	r2,16(r5)
    92d0:	10002526 	beq	r2,zero,9368 <__sfvwrite_r+0xe8>
    92d4:	1880008c 	andi	r2,r3,2
    92d8:	a4400017 	ldw	r17,0(r20)
    92dc:	10002a26 	beq	r2,zero,9388 <__sfvwrite_r+0x108>
    92e0:	05a00034 	movhi	r22,32768
    92e4:	0027883a 	mov	r19,zero
    92e8:	0025883a 	mov	r18,zero
    92ec:	b5bf0004 	addi	r22,r22,-1024
    92f0:	980d883a 	mov	r6,r19
    92f4:	a809883a 	mov	r4,r21
    92f8:	90004626 	beq	r18,zero,9414 <__sfvwrite_r+0x194>
    92fc:	900f883a 	mov	r7,r18
    9300:	b480022e 	bgeu	r22,r18,930c <__sfvwrite_r+0x8c>
    9304:	01e00034 	movhi	r7,32768
    9308:	39ff0004 	addi	r7,r7,-1024
    930c:	80800917 	ldw	r2,36(r16)
    9310:	81400717 	ldw	r5,28(r16)
    9314:	103ee83a 	callr	r2
    9318:	0080570e 	bge	zero,r2,9478 <__sfvwrite_r+0x1f8>
    931c:	a0c00217 	ldw	r3,8(r20)
    9320:	98a7883a 	add	r19,r19,r2
    9324:	90a5c83a 	sub	r18,r18,r2
    9328:	1885c83a 	sub	r2,r3,r2
    932c:	a0800215 	stw	r2,8(r20)
    9330:	103fef1e 	bne	r2,zero,92f0 <__ram_exceptions_end+0xfbfe909c>
    9334:	0005883a 	mov	r2,zero
    9338:	dfc00b17 	ldw	ra,44(sp)
    933c:	df000a17 	ldw	fp,40(sp)
    9340:	ddc00917 	ldw	r23,36(sp)
    9344:	dd800817 	ldw	r22,32(sp)
    9348:	dd400717 	ldw	r21,28(sp)
    934c:	dd000617 	ldw	r20,24(sp)
    9350:	dcc00517 	ldw	r19,20(sp)
    9354:	dc800417 	ldw	r18,16(sp)
    9358:	dc400317 	ldw	r17,12(sp)
    935c:	dc000217 	ldw	r16,8(sp)
    9360:	dec00c04 	addi	sp,sp,48
    9364:	f800283a 	ret
    9368:	800b883a 	mov	r5,r16
    936c:	a809883a 	mov	r4,r21
    9370:	000300c0 	call	300c <__swsetup_r>
    9374:	1000eb1e 	bne	r2,zero,9724 <__sfvwrite_r+0x4a4>
    9378:	80c0030b 	ldhu	r3,12(r16)
    937c:	a4400017 	ldw	r17,0(r20)
    9380:	1880008c 	andi	r2,r3,2
    9384:	103fd61e 	bne	r2,zero,92e0 <__ram_exceptions_end+0xfbfe908c>
    9388:	1880004c 	andi	r2,r3,1
    938c:	10003f1e 	bne	r2,zero,948c <__sfvwrite_r+0x20c>
    9390:	0039883a 	mov	fp,zero
    9394:	0025883a 	mov	r18,zero
    9398:	90001a26 	beq	r18,zero,9404 <__sfvwrite_r+0x184>
    939c:	1880800c 	andi	r2,r3,512
    93a0:	84c00217 	ldw	r19,8(r16)
    93a4:	10002126 	beq	r2,zero,942c <__sfvwrite_r+0x1ac>
    93a8:	982f883a 	mov	r23,r19
    93ac:	94c09336 	bltu	r18,r19,95fc <__sfvwrite_r+0x37c>
    93b0:	1881200c 	andi	r2,r3,1152
    93b4:	10009e1e 	bne	r2,zero,9630 <__sfvwrite_r+0x3b0>
    93b8:	81000017 	ldw	r4,0(r16)
    93bc:	b80d883a 	mov	r6,r23
    93c0:	e00b883a 	mov	r5,fp
    93c4:	00097f00 	call	97f0 <memmove>
    93c8:	80c00217 	ldw	r3,8(r16)
    93cc:	81000017 	ldw	r4,0(r16)
    93d0:	9005883a 	mov	r2,r18
    93d4:	1ce7c83a 	sub	r19,r3,r19
    93d8:	25cf883a 	add	r7,r4,r23
    93dc:	84c00215 	stw	r19,8(r16)
    93e0:	81c00015 	stw	r7,0(r16)
    93e4:	a0c00217 	ldw	r3,8(r20)
    93e8:	e0b9883a 	add	fp,fp,r2
    93ec:	90a5c83a 	sub	r18,r18,r2
    93f0:	18a7c83a 	sub	r19,r3,r2
    93f4:	a4c00215 	stw	r19,8(r20)
    93f8:	983fce26 	beq	r19,zero,9334 <__ram_exceptions_end+0xfbfe90e0>
    93fc:	80c0030b 	ldhu	r3,12(r16)
    9400:	903fe61e 	bne	r18,zero,939c <__ram_exceptions_end+0xfbfe9148>
    9404:	8f000017 	ldw	fp,0(r17)
    9408:	8c800117 	ldw	r18,4(r17)
    940c:	8c400204 	addi	r17,r17,8
    9410:	003fe106 	br	9398 <__ram_exceptions_end+0xfbfe9144>
    9414:	8cc00017 	ldw	r19,0(r17)
    9418:	8c800117 	ldw	r18,4(r17)
    941c:	8c400204 	addi	r17,r17,8
    9420:	003fb306 	br	92f0 <__ram_exceptions_end+0xfbfe909c>
    9424:	0005883a 	mov	r2,zero
    9428:	f800283a 	ret
    942c:	81000017 	ldw	r4,0(r16)
    9430:	80800417 	ldw	r2,16(r16)
    9434:	11005736 	bltu	r2,r4,9594 <__sfvwrite_r+0x314>
    9438:	85c00517 	ldw	r23,20(r16)
    943c:	95c05536 	bltu	r18,r23,9594 <__sfvwrite_r+0x314>
    9440:	00a00034 	movhi	r2,32768
    9444:	10bfffc4 	addi	r2,r2,-1
    9448:	9009883a 	mov	r4,r18
    944c:	1480012e 	bgeu	r2,r18,9454 <__sfvwrite_r+0x1d4>
    9450:	1009883a 	mov	r4,r2
    9454:	b80b883a 	mov	r5,r23
    9458:	0000b1c0 	call	b1c <__divsi3>
    945c:	15cf383a 	mul	r7,r2,r23
    9460:	81400717 	ldw	r5,28(r16)
    9464:	80800917 	ldw	r2,36(r16)
    9468:	e00d883a 	mov	r6,fp
    946c:	a809883a 	mov	r4,r21
    9470:	103ee83a 	callr	r2
    9474:	00bfdb16 	blt	zero,r2,93e4 <__ram_exceptions_end+0xfbfe9190>
    9478:	8080030b 	ldhu	r2,12(r16)
    947c:	10801014 	ori	r2,r2,64
    9480:	8080030d 	sth	r2,12(r16)
    9484:	00bfffc4 	movi	r2,-1
    9488:	003fab06 	br	9338 <__ram_exceptions_end+0xfbfe90e4>
    948c:	0027883a 	mov	r19,zero
    9490:	0011883a 	mov	r8,zero
    9494:	0039883a 	mov	fp,zero
    9498:	0025883a 	mov	r18,zero
    949c:	90001f26 	beq	r18,zero,951c <__sfvwrite_r+0x29c>
    94a0:	40005a26 	beq	r8,zero,960c <__sfvwrite_r+0x38c>
    94a4:	982d883a 	mov	r22,r19
    94a8:	94c0012e 	bgeu	r18,r19,94b0 <__sfvwrite_r+0x230>
    94ac:	902d883a 	mov	r22,r18
    94b0:	81000017 	ldw	r4,0(r16)
    94b4:	80800417 	ldw	r2,16(r16)
    94b8:	b02f883a 	mov	r23,r22
    94bc:	81c00517 	ldw	r7,20(r16)
    94c0:	1100032e 	bgeu	r2,r4,94d0 <__sfvwrite_r+0x250>
    94c4:	80c00217 	ldw	r3,8(r16)
    94c8:	38c7883a 	add	r3,r7,r3
    94cc:	1d801816 	blt	r3,r22,9530 <__sfvwrite_r+0x2b0>
    94d0:	b1c03e16 	blt	r22,r7,95cc <__sfvwrite_r+0x34c>
    94d4:	80800917 	ldw	r2,36(r16)
    94d8:	81400717 	ldw	r5,28(r16)
    94dc:	e00d883a 	mov	r6,fp
    94e0:	da000115 	stw	r8,4(sp)
    94e4:	a809883a 	mov	r4,r21
    94e8:	103ee83a 	callr	r2
    94ec:	102f883a 	mov	r23,r2
    94f0:	da000117 	ldw	r8,4(sp)
    94f4:	00bfe00e 	bge	zero,r2,9478 <__ram_exceptions_end+0xfbfe9224>
    94f8:	9de7c83a 	sub	r19,r19,r23
    94fc:	98001f26 	beq	r19,zero,957c <__sfvwrite_r+0x2fc>
    9500:	a0800217 	ldw	r2,8(r20)
    9504:	e5f9883a 	add	fp,fp,r23
    9508:	95e5c83a 	sub	r18,r18,r23
    950c:	15efc83a 	sub	r23,r2,r23
    9510:	a5c00215 	stw	r23,8(r20)
    9514:	b83f8726 	beq	r23,zero,9334 <__ram_exceptions_end+0xfbfe90e0>
    9518:	903fe11e 	bne	r18,zero,94a0 <__ram_exceptions_end+0xfbfe924c>
    951c:	8f000017 	ldw	fp,0(r17)
    9520:	8c800117 	ldw	r18,4(r17)
    9524:	0011883a 	mov	r8,zero
    9528:	8c400204 	addi	r17,r17,8
    952c:	003fdb06 	br	949c <__ram_exceptions_end+0xfbfe9248>
    9530:	180d883a 	mov	r6,r3
    9534:	e00b883a 	mov	r5,fp
    9538:	da000115 	stw	r8,4(sp)
    953c:	d8c00015 	stw	r3,0(sp)
    9540:	00097f00 	call	97f0 <memmove>
    9544:	d8c00017 	ldw	r3,0(sp)
    9548:	80800017 	ldw	r2,0(r16)
    954c:	800b883a 	mov	r5,r16
    9550:	a809883a 	mov	r4,r21
    9554:	10c5883a 	add	r2,r2,r3
    9558:	80800015 	stw	r2,0(r16)
    955c:	d8c00015 	stw	r3,0(sp)
    9560:	0004c040 	call	4c04 <_fflush_r>
    9564:	d8c00017 	ldw	r3,0(sp)
    9568:	da000117 	ldw	r8,4(sp)
    956c:	103fc21e 	bne	r2,zero,9478 <__ram_exceptions_end+0xfbfe9224>
    9570:	182f883a 	mov	r23,r3
    9574:	9de7c83a 	sub	r19,r19,r23
    9578:	983fe11e 	bne	r19,zero,9500 <__ram_exceptions_end+0xfbfe92ac>
    957c:	800b883a 	mov	r5,r16
    9580:	a809883a 	mov	r4,r21
    9584:	0004c040 	call	4c04 <_fflush_r>
    9588:	103fbb1e 	bne	r2,zero,9478 <__ram_exceptions_end+0xfbfe9224>
    958c:	0011883a 	mov	r8,zero
    9590:	003fdb06 	br	9500 <__ram_exceptions_end+0xfbfe92ac>
    9594:	94c0012e 	bgeu	r18,r19,959c <__sfvwrite_r+0x31c>
    9598:	9027883a 	mov	r19,r18
    959c:	980d883a 	mov	r6,r19
    95a0:	e00b883a 	mov	r5,fp
    95a4:	00097f00 	call	97f0 <memmove>
    95a8:	80800217 	ldw	r2,8(r16)
    95ac:	80c00017 	ldw	r3,0(r16)
    95b0:	14c5c83a 	sub	r2,r2,r19
    95b4:	1cc7883a 	add	r3,r3,r19
    95b8:	80800215 	stw	r2,8(r16)
    95bc:	80c00015 	stw	r3,0(r16)
    95c0:	10004326 	beq	r2,zero,96d0 <__sfvwrite_r+0x450>
    95c4:	9805883a 	mov	r2,r19
    95c8:	003f8606 	br	93e4 <__ram_exceptions_end+0xfbfe9190>
    95cc:	b00d883a 	mov	r6,r22
    95d0:	e00b883a 	mov	r5,fp
    95d4:	da000115 	stw	r8,4(sp)
    95d8:	00097f00 	call	97f0 <memmove>
    95dc:	80800217 	ldw	r2,8(r16)
    95e0:	80c00017 	ldw	r3,0(r16)
    95e4:	da000117 	ldw	r8,4(sp)
    95e8:	1585c83a 	sub	r2,r2,r22
    95ec:	1dad883a 	add	r22,r3,r22
    95f0:	80800215 	stw	r2,8(r16)
    95f4:	85800015 	stw	r22,0(r16)
    95f8:	003fbf06 	br	94f8 <__ram_exceptions_end+0xfbfe92a4>
    95fc:	81000017 	ldw	r4,0(r16)
    9600:	9027883a 	mov	r19,r18
    9604:	902f883a 	mov	r23,r18
    9608:	003f6c06 	br	93bc <__ram_exceptions_end+0xfbfe9168>
    960c:	900d883a 	mov	r6,r18
    9610:	01400284 	movi	r5,10
    9614:	e009883a 	mov	r4,fp
    9618:	00060900 	call	6090 <memchr>
    961c:	10003e26 	beq	r2,zero,9718 <__sfvwrite_r+0x498>
    9620:	10800044 	addi	r2,r2,1
    9624:	1727c83a 	sub	r19,r2,fp
    9628:	02000044 	movi	r8,1
    962c:	003f9d06 	br	94a4 <__ram_exceptions_end+0xfbfe9250>
    9630:	80800517 	ldw	r2,20(r16)
    9634:	81400417 	ldw	r5,16(r16)
    9638:	81c00017 	ldw	r7,0(r16)
    963c:	10a7883a 	add	r19,r2,r2
    9640:	9885883a 	add	r2,r19,r2
    9644:	1026d7fa 	srli	r19,r2,31
    9648:	396dc83a 	sub	r22,r7,r5
    964c:	b1000044 	addi	r4,r22,1
    9650:	9885883a 	add	r2,r19,r2
    9654:	1027d07a 	srai	r19,r2,1
    9658:	2485883a 	add	r2,r4,r18
    965c:	980d883a 	mov	r6,r19
    9660:	9880022e 	bgeu	r19,r2,966c <__sfvwrite_r+0x3ec>
    9664:	1027883a 	mov	r19,r2
    9668:	100d883a 	mov	r6,r2
    966c:	18c1000c 	andi	r3,r3,1024
    9670:	18001c26 	beq	r3,zero,96e4 <__sfvwrite_r+0x464>
    9674:	300b883a 	mov	r5,r6
    9678:	a809883a 	mov	r4,r21
    967c:	00058840 	call	5884 <_malloc_r>
    9680:	102f883a 	mov	r23,r2
    9684:	10002926 	beq	r2,zero,972c <__sfvwrite_r+0x4ac>
    9688:	81400417 	ldw	r5,16(r16)
    968c:	b00d883a 	mov	r6,r22
    9690:	1009883a 	mov	r4,r2
    9694:	00061740 	call	6174 <memcpy>
    9698:	8080030b 	ldhu	r2,12(r16)
    969c:	00fedfc4 	movi	r3,-1153
    96a0:	10c4703a 	and	r2,r2,r3
    96a4:	10802014 	ori	r2,r2,128
    96a8:	8080030d 	sth	r2,12(r16)
    96ac:	bd89883a 	add	r4,r23,r22
    96b0:	9d8fc83a 	sub	r7,r19,r22
    96b4:	85c00415 	stw	r23,16(r16)
    96b8:	84c00515 	stw	r19,20(r16)
    96bc:	81000015 	stw	r4,0(r16)
    96c0:	9027883a 	mov	r19,r18
    96c4:	81c00215 	stw	r7,8(r16)
    96c8:	902f883a 	mov	r23,r18
    96cc:	003f3b06 	br	93bc <__ram_exceptions_end+0xfbfe9168>
    96d0:	800b883a 	mov	r5,r16
    96d4:	a809883a 	mov	r4,r21
    96d8:	0004c040 	call	4c04 <_fflush_r>
    96dc:	103fb926 	beq	r2,zero,95c4 <__ram_exceptions_end+0xfbfe9370>
    96e0:	003f6506 	br	9478 <__ram_exceptions_end+0xfbfe9224>
    96e4:	a809883a 	mov	r4,r21
    96e8:	00099ac0 	call	99ac <_realloc_r>
    96ec:	102f883a 	mov	r23,r2
    96f0:	103fee1e 	bne	r2,zero,96ac <__ram_exceptions_end+0xfbfe9458>
    96f4:	81400417 	ldw	r5,16(r16)
    96f8:	a809883a 	mov	r4,r21
    96fc:	00051540 	call	5154 <_free_r>
    9700:	8080030b 	ldhu	r2,12(r16)
    9704:	00ffdfc4 	movi	r3,-129
    9708:	1884703a 	and	r2,r3,r2
    970c:	00c00304 	movi	r3,12
    9710:	a8c00015 	stw	r3,0(r21)
    9714:	003f5906 	br	947c <__ram_exceptions_end+0xfbfe9228>
    9718:	94c00044 	addi	r19,r18,1
    971c:	02000044 	movi	r8,1
    9720:	003f6006 	br	94a4 <__ram_exceptions_end+0xfbfe9250>
    9724:	00bfffc4 	movi	r2,-1
    9728:	003f0306 	br	9338 <__ram_exceptions_end+0xfbfe90e4>
    972c:	00800304 	movi	r2,12
    9730:	a8800015 	stw	r2,0(r21)
    9734:	8080030b 	ldhu	r2,12(r16)
    9738:	003f5006 	br	947c <__ram_exceptions_end+0xfbfe9228>

0000973c <_isatty_r>:
    973c:	defffd04 	addi	sp,sp,-12
    9740:	dc000015 	stw	r16,0(sp)
    9744:	04000074 	movhi	r16,1
    9748:	dc400115 	stw	r17,4(sp)
    974c:	840e8c04 	addi	r16,r16,14896
    9750:	2023883a 	mov	r17,r4
    9754:	2809883a 	mov	r4,r5
    9758:	dfc00215 	stw	ra,8(sp)
    975c:	80000015 	stw	zero,0(r16)
    9760:	000d8680 	call	d868 <isatty>
    9764:	00ffffc4 	movi	r3,-1
    9768:	10c00526 	beq	r2,r3,9780 <_isatty_r+0x44>
    976c:	dfc00217 	ldw	ra,8(sp)
    9770:	dc400117 	ldw	r17,4(sp)
    9774:	dc000017 	ldw	r16,0(sp)
    9778:	dec00304 	addi	sp,sp,12
    977c:	f800283a 	ret
    9780:	80c00017 	ldw	r3,0(r16)
    9784:	183ff926 	beq	r3,zero,976c <__ram_exceptions_end+0xfbfe9518>
    9788:	88c00015 	stw	r3,0(r17)
    978c:	003ff706 	br	976c <__ram_exceptions_end+0xfbfe9518>

00009790 <_lseek_r>:
    9790:	defffd04 	addi	sp,sp,-12
    9794:	2805883a 	mov	r2,r5
    9798:	dc000015 	stw	r16,0(sp)
    979c:	04000074 	movhi	r16,1
    97a0:	dc400115 	stw	r17,4(sp)
    97a4:	300b883a 	mov	r5,r6
    97a8:	840e8c04 	addi	r16,r16,14896
    97ac:	2023883a 	mov	r17,r4
    97b0:	380d883a 	mov	r6,r7
    97b4:	1009883a 	mov	r4,r2
    97b8:	dfc00215 	stw	ra,8(sp)
    97bc:	80000015 	stw	zero,0(r16)
    97c0:	000da340 	call	da34 <lseek>
    97c4:	00ffffc4 	movi	r3,-1
    97c8:	10c00526 	beq	r2,r3,97e0 <_lseek_r+0x50>
    97cc:	dfc00217 	ldw	ra,8(sp)
    97d0:	dc400117 	ldw	r17,4(sp)
    97d4:	dc000017 	ldw	r16,0(sp)
    97d8:	dec00304 	addi	sp,sp,12
    97dc:	f800283a 	ret
    97e0:	80c00017 	ldw	r3,0(r16)
    97e4:	183ff926 	beq	r3,zero,97cc <__ram_exceptions_end+0xfbfe9578>
    97e8:	88c00015 	stw	r3,0(r17)
    97ec:	003ff706 	br	97cc <__ram_exceptions_end+0xfbfe9578>

000097f0 <memmove>:
    97f0:	2005883a 	mov	r2,r4
    97f4:	29000b2e 	bgeu	r5,r4,9824 <memmove+0x34>
    97f8:	298f883a 	add	r7,r5,r6
    97fc:	21c0092e 	bgeu	r4,r7,9824 <memmove+0x34>
    9800:	2187883a 	add	r3,r4,r6
    9804:	198bc83a 	sub	r5,r3,r6
    9808:	30004826 	beq	r6,zero,992c <memmove+0x13c>
    980c:	39ffffc4 	addi	r7,r7,-1
    9810:	39000003 	ldbu	r4,0(r7)
    9814:	18ffffc4 	addi	r3,r3,-1
    9818:	19000005 	stb	r4,0(r3)
    981c:	28fffb1e 	bne	r5,r3,980c <__ram_exceptions_end+0xfbfe95b8>
    9820:	f800283a 	ret
    9824:	00c003c4 	movi	r3,15
    9828:	1980412e 	bgeu	r3,r6,9930 <memmove+0x140>
    982c:	2886b03a 	or	r3,r5,r2
    9830:	18c000cc 	andi	r3,r3,3
    9834:	1800401e 	bne	r3,zero,9938 <memmove+0x148>
    9838:	33fffc04 	addi	r15,r6,-16
    983c:	781ed13a 	srli	r15,r15,4
    9840:	28c00104 	addi	r3,r5,4
    9844:	13400104 	addi	r13,r2,4
    9848:	781c913a 	slli	r14,r15,4
    984c:	2b000204 	addi	r12,r5,8
    9850:	12c00204 	addi	r11,r2,8
    9854:	73800504 	addi	r14,r14,20
    9858:	2a800304 	addi	r10,r5,12
    985c:	12400304 	addi	r9,r2,12
    9860:	2b9d883a 	add	r14,r5,r14
    9864:	2811883a 	mov	r8,r5
    9868:	100f883a 	mov	r7,r2
    986c:	41000017 	ldw	r4,0(r8)
    9870:	39c00404 	addi	r7,r7,16
    9874:	18c00404 	addi	r3,r3,16
    9878:	393ffc15 	stw	r4,-16(r7)
    987c:	193ffc17 	ldw	r4,-16(r3)
    9880:	6b400404 	addi	r13,r13,16
    9884:	5ac00404 	addi	r11,r11,16
    9888:	693ffc15 	stw	r4,-16(r13)
    988c:	61000017 	ldw	r4,0(r12)
    9890:	4a400404 	addi	r9,r9,16
    9894:	42000404 	addi	r8,r8,16
    9898:	593ffc15 	stw	r4,-16(r11)
    989c:	51000017 	ldw	r4,0(r10)
    98a0:	63000404 	addi	r12,r12,16
    98a4:	52800404 	addi	r10,r10,16
    98a8:	493ffc15 	stw	r4,-16(r9)
    98ac:	1bbfef1e 	bne	r3,r14,986c <__ram_exceptions_end+0xfbfe9618>
    98b0:	79000044 	addi	r4,r15,1
    98b4:	2008913a 	slli	r4,r4,4
    98b8:	328003cc 	andi	r10,r6,15
    98bc:	02c000c4 	movi	r11,3
    98c0:	1107883a 	add	r3,r2,r4
    98c4:	290b883a 	add	r5,r5,r4
    98c8:	5a801e2e 	bgeu	r11,r10,9944 <memmove+0x154>
    98cc:	1813883a 	mov	r9,r3
    98d0:	2811883a 	mov	r8,r5
    98d4:	500f883a 	mov	r7,r10
    98d8:	41000017 	ldw	r4,0(r8)
    98dc:	4a400104 	addi	r9,r9,4
    98e0:	39ffff04 	addi	r7,r7,-4
    98e4:	493fff15 	stw	r4,-4(r9)
    98e8:	42000104 	addi	r8,r8,4
    98ec:	59fffa36 	bltu	r11,r7,98d8 <__ram_exceptions_end+0xfbfe9684>
    98f0:	513fff04 	addi	r4,r10,-4
    98f4:	2008d0ba 	srli	r4,r4,2
    98f8:	318000cc 	andi	r6,r6,3
    98fc:	21000044 	addi	r4,r4,1
    9900:	2109883a 	add	r4,r4,r4
    9904:	2109883a 	add	r4,r4,r4
    9908:	1907883a 	add	r3,r3,r4
    990c:	290b883a 	add	r5,r5,r4
    9910:	30000b26 	beq	r6,zero,9940 <memmove+0x150>
    9914:	198d883a 	add	r6,r3,r6
    9918:	29c00003 	ldbu	r7,0(r5)
    991c:	18c00044 	addi	r3,r3,1
    9920:	29400044 	addi	r5,r5,1
    9924:	19ffffc5 	stb	r7,-1(r3)
    9928:	19bffb1e 	bne	r3,r6,9918 <__ram_exceptions_end+0xfbfe96c4>
    992c:	f800283a 	ret
    9930:	1007883a 	mov	r3,r2
    9934:	003ff606 	br	9910 <__ram_exceptions_end+0xfbfe96bc>
    9938:	1007883a 	mov	r3,r2
    993c:	003ff506 	br	9914 <__ram_exceptions_end+0xfbfe96c0>
    9940:	f800283a 	ret
    9944:	500d883a 	mov	r6,r10
    9948:	003ff106 	br	9910 <__ram_exceptions_end+0xfbfe96bc>

0000994c <_read_r>:
    994c:	defffd04 	addi	sp,sp,-12
    9950:	2805883a 	mov	r2,r5
    9954:	dc000015 	stw	r16,0(sp)
    9958:	04000074 	movhi	r16,1
    995c:	dc400115 	stw	r17,4(sp)
    9960:	300b883a 	mov	r5,r6
    9964:	840e8c04 	addi	r16,r16,14896
    9968:	2023883a 	mov	r17,r4
    996c:	380d883a 	mov	r6,r7
    9970:	1009883a 	mov	r4,r2
    9974:	dfc00215 	stw	ra,8(sp)
    9978:	80000015 	stw	zero,0(r16)
    997c:	000de700 	call	de70 <read>
    9980:	00ffffc4 	movi	r3,-1
    9984:	10c00526 	beq	r2,r3,999c <_read_r+0x50>
    9988:	dfc00217 	ldw	ra,8(sp)
    998c:	dc400117 	ldw	r17,4(sp)
    9990:	dc000017 	ldw	r16,0(sp)
    9994:	dec00304 	addi	sp,sp,12
    9998:	f800283a 	ret
    999c:	80c00017 	ldw	r3,0(r16)
    99a0:	183ff926 	beq	r3,zero,9988 <__ram_exceptions_end+0xfbfe9734>
    99a4:	88c00015 	stw	r3,0(r17)
    99a8:	003ff706 	br	9988 <__ram_exceptions_end+0xfbfe9734>

000099ac <_realloc_r>:
    99ac:	defff604 	addi	sp,sp,-40
    99b0:	dc800215 	stw	r18,8(sp)
    99b4:	dfc00915 	stw	ra,36(sp)
    99b8:	df000815 	stw	fp,32(sp)
    99bc:	ddc00715 	stw	r23,28(sp)
    99c0:	dd800615 	stw	r22,24(sp)
    99c4:	dd400515 	stw	r21,20(sp)
    99c8:	dd000415 	stw	r20,16(sp)
    99cc:	dcc00315 	stw	r19,12(sp)
    99d0:	dc400115 	stw	r17,4(sp)
    99d4:	dc000015 	stw	r16,0(sp)
    99d8:	3025883a 	mov	r18,r6
    99dc:	2800b726 	beq	r5,zero,9cbc <_realloc_r+0x310>
    99e0:	282b883a 	mov	r21,r5
    99e4:	2029883a 	mov	r20,r4
    99e8:	000db840 	call	db84 <__malloc_lock>
    99ec:	a8bfff17 	ldw	r2,-4(r21)
    99f0:	043fff04 	movi	r16,-4
    99f4:	90c002c4 	addi	r3,r18,11
    99f8:	01000584 	movi	r4,22
    99fc:	acfffe04 	addi	r19,r21,-8
    9a00:	1420703a 	and	r16,r2,r16
    9a04:	20c0332e 	bgeu	r4,r3,9ad4 <_realloc_r+0x128>
    9a08:	047ffe04 	movi	r17,-8
    9a0c:	1c62703a 	and	r17,r3,r17
    9a10:	8807883a 	mov	r3,r17
    9a14:	88005816 	blt	r17,zero,9b78 <_realloc_r+0x1cc>
    9a18:	8c805736 	bltu	r17,r18,9b78 <_realloc_r+0x1cc>
    9a1c:	80c0300e 	bge	r16,r3,9ae0 <_realloc_r+0x134>
    9a20:	07000074 	movhi	fp,1
    9a24:	e7023404 	addi	fp,fp,2256
    9a28:	e1c00217 	ldw	r7,8(fp)
    9a2c:	9c09883a 	add	r4,r19,r16
    9a30:	22000117 	ldw	r8,4(r4)
    9a34:	21c06326 	beq	r4,r7,9bc4 <_realloc_r+0x218>
    9a38:	017fff84 	movi	r5,-2
    9a3c:	414a703a 	and	r5,r8,r5
    9a40:	214b883a 	add	r5,r4,r5
    9a44:	29800117 	ldw	r6,4(r5)
    9a48:	3180004c 	andi	r6,r6,1
    9a4c:	30003f26 	beq	r6,zero,9b4c <_realloc_r+0x1a0>
    9a50:	1080004c 	andi	r2,r2,1
    9a54:	10008326 	beq	r2,zero,9c64 <_realloc_r+0x2b8>
    9a58:	900b883a 	mov	r5,r18
    9a5c:	a009883a 	mov	r4,r20
    9a60:	00058840 	call	5884 <_malloc_r>
    9a64:	1025883a 	mov	r18,r2
    9a68:	10011e26 	beq	r2,zero,9ee4 <_realloc_r+0x538>
    9a6c:	a93fff17 	ldw	r4,-4(r21)
    9a70:	10fffe04 	addi	r3,r2,-8
    9a74:	00bfff84 	movi	r2,-2
    9a78:	2084703a 	and	r2,r4,r2
    9a7c:	9885883a 	add	r2,r19,r2
    9a80:	1880ee26 	beq	r3,r2,9e3c <_realloc_r+0x490>
    9a84:	81bfff04 	addi	r6,r16,-4
    9a88:	00800904 	movi	r2,36
    9a8c:	1180b836 	bltu	r2,r6,9d70 <_realloc_r+0x3c4>
    9a90:	00c004c4 	movi	r3,19
    9a94:	19809636 	bltu	r3,r6,9cf0 <_realloc_r+0x344>
    9a98:	9005883a 	mov	r2,r18
    9a9c:	a807883a 	mov	r3,r21
    9aa0:	19000017 	ldw	r4,0(r3)
    9aa4:	11000015 	stw	r4,0(r2)
    9aa8:	19000117 	ldw	r4,4(r3)
    9aac:	11000115 	stw	r4,4(r2)
    9ab0:	18c00217 	ldw	r3,8(r3)
    9ab4:	10c00215 	stw	r3,8(r2)
    9ab8:	a80b883a 	mov	r5,r21
    9abc:	a009883a 	mov	r4,r20
    9ac0:	00051540 	call	5154 <_free_r>
    9ac4:	a009883a 	mov	r4,r20
    9ac8:	000dba80 	call	dba8 <__malloc_unlock>
    9acc:	9005883a 	mov	r2,r18
    9ad0:	00001206 	br	9b1c <_realloc_r+0x170>
    9ad4:	00c00404 	movi	r3,16
    9ad8:	1823883a 	mov	r17,r3
    9adc:	003fce06 	br	9a18 <__ram_exceptions_end+0xfbfe97c4>
    9ae0:	a825883a 	mov	r18,r21
    9ae4:	8445c83a 	sub	r2,r16,r17
    9ae8:	00c003c4 	movi	r3,15
    9aec:	18802636 	bltu	r3,r2,9b88 <_realloc_r+0x1dc>
    9af0:	99800117 	ldw	r6,4(r19)
    9af4:	9c07883a 	add	r3,r19,r16
    9af8:	3180004c 	andi	r6,r6,1
    9afc:	3420b03a 	or	r16,r6,r16
    9b00:	9c000115 	stw	r16,4(r19)
    9b04:	18800117 	ldw	r2,4(r3)
    9b08:	10800054 	ori	r2,r2,1
    9b0c:	18800115 	stw	r2,4(r3)
    9b10:	a009883a 	mov	r4,r20
    9b14:	000dba80 	call	dba8 <__malloc_unlock>
    9b18:	9005883a 	mov	r2,r18
    9b1c:	dfc00917 	ldw	ra,36(sp)
    9b20:	df000817 	ldw	fp,32(sp)
    9b24:	ddc00717 	ldw	r23,28(sp)
    9b28:	dd800617 	ldw	r22,24(sp)
    9b2c:	dd400517 	ldw	r21,20(sp)
    9b30:	dd000417 	ldw	r20,16(sp)
    9b34:	dcc00317 	ldw	r19,12(sp)
    9b38:	dc800217 	ldw	r18,8(sp)
    9b3c:	dc400117 	ldw	r17,4(sp)
    9b40:	dc000017 	ldw	r16,0(sp)
    9b44:	dec00a04 	addi	sp,sp,40
    9b48:	f800283a 	ret
    9b4c:	017fff04 	movi	r5,-4
    9b50:	414a703a 	and	r5,r8,r5
    9b54:	814d883a 	add	r6,r16,r5
    9b58:	30c01f16 	blt	r6,r3,9bd8 <_realloc_r+0x22c>
    9b5c:	20800317 	ldw	r2,12(r4)
    9b60:	20c00217 	ldw	r3,8(r4)
    9b64:	a825883a 	mov	r18,r21
    9b68:	3021883a 	mov	r16,r6
    9b6c:	18800315 	stw	r2,12(r3)
    9b70:	10c00215 	stw	r3,8(r2)
    9b74:	003fdb06 	br	9ae4 <__ram_exceptions_end+0xfbfe9890>
    9b78:	00800304 	movi	r2,12
    9b7c:	a0800015 	stw	r2,0(r20)
    9b80:	0005883a 	mov	r2,zero
    9b84:	003fe506 	br	9b1c <__ram_exceptions_end+0xfbfe98c8>
    9b88:	98c00117 	ldw	r3,4(r19)
    9b8c:	9c4b883a 	add	r5,r19,r17
    9b90:	11000054 	ori	r4,r2,1
    9b94:	18c0004c 	andi	r3,r3,1
    9b98:	1c62b03a 	or	r17,r3,r17
    9b9c:	9c400115 	stw	r17,4(r19)
    9ba0:	29000115 	stw	r4,4(r5)
    9ba4:	2885883a 	add	r2,r5,r2
    9ba8:	10c00117 	ldw	r3,4(r2)
    9bac:	29400204 	addi	r5,r5,8
    9bb0:	a009883a 	mov	r4,r20
    9bb4:	18c00054 	ori	r3,r3,1
    9bb8:	10c00115 	stw	r3,4(r2)
    9bbc:	00051540 	call	5154 <_free_r>
    9bc0:	003fd306 	br	9b10 <__ram_exceptions_end+0xfbfe98bc>
    9bc4:	017fff04 	movi	r5,-4
    9bc8:	414a703a 	and	r5,r8,r5
    9bcc:	89800404 	addi	r6,r17,16
    9bd0:	8151883a 	add	r8,r16,r5
    9bd4:	4180590e 	bge	r8,r6,9d3c <_realloc_r+0x390>
    9bd8:	1080004c 	andi	r2,r2,1
    9bdc:	103f9e1e 	bne	r2,zero,9a58 <__ram_exceptions_end+0xfbfe9804>
    9be0:	adbffe17 	ldw	r22,-8(r21)
    9be4:	00bfff04 	movi	r2,-4
    9be8:	9dadc83a 	sub	r22,r19,r22
    9bec:	b1800117 	ldw	r6,4(r22)
    9bf0:	3084703a 	and	r2,r6,r2
    9bf4:	20002026 	beq	r4,zero,9c78 <_realloc_r+0x2cc>
    9bf8:	80af883a 	add	r23,r16,r2
    9bfc:	b96f883a 	add	r23,r23,r5
    9c00:	21c05f26 	beq	r4,r7,9d80 <_realloc_r+0x3d4>
    9c04:	b8c01c16 	blt	r23,r3,9c78 <_realloc_r+0x2cc>
    9c08:	20800317 	ldw	r2,12(r4)
    9c0c:	20c00217 	ldw	r3,8(r4)
    9c10:	81bfff04 	addi	r6,r16,-4
    9c14:	01000904 	movi	r4,36
    9c18:	18800315 	stw	r2,12(r3)
    9c1c:	10c00215 	stw	r3,8(r2)
    9c20:	b0c00217 	ldw	r3,8(r22)
    9c24:	b0800317 	ldw	r2,12(r22)
    9c28:	b4800204 	addi	r18,r22,8
    9c2c:	18800315 	stw	r2,12(r3)
    9c30:	10c00215 	stw	r3,8(r2)
    9c34:	21801b36 	bltu	r4,r6,9ca4 <_realloc_r+0x2f8>
    9c38:	008004c4 	movi	r2,19
    9c3c:	1180352e 	bgeu	r2,r6,9d14 <_realloc_r+0x368>
    9c40:	a8800017 	ldw	r2,0(r21)
    9c44:	b0800215 	stw	r2,8(r22)
    9c48:	a8800117 	ldw	r2,4(r21)
    9c4c:	b0800315 	stw	r2,12(r22)
    9c50:	008006c4 	movi	r2,27
    9c54:	11807f36 	bltu	r2,r6,9e54 <_realloc_r+0x4a8>
    9c58:	b0800404 	addi	r2,r22,16
    9c5c:	ad400204 	addi	r21,r21,8
    9c60:	00002d06 	br	9d18 <_realloc_r+0x36c>
    9c64:	adbffe17 	ldw	r22,-8(r21)
    9c68:	00bfff04 	movi	r2,-4
    9c6c:	9dadc83a 	sub	r22,r19,r22
    9c70:	b1000117 	ldw	r4,4(r22)
    9c74:	2084703a 	and	r2,r4,r2
    9c78:	b03f7726 	beq	r22,zero,9a58 <__ram_exceptions_end+0xfbfe9804>
    9c7c:	80af883a 	add	r23,r16,r2
    9c80:	b8ff7516 	blt	r23,r3,9a58 <__ram_exceptions_end+0xfbfe9804>
    9c84:	b0800317 	ldw	r2,12(r22)
    9c88:	b0c00217 	ldw	r3,8(r22)
    9c8c:	81bfff04 	addi	r6,r16,-4
    9c90:	01000904 	movi	r4,36
    9c94:	18800315 	stw	r2,12(r3)
    9c98:	10c00215 	stw	r3,8(r2)
    9c9c:	b4800204 	addi	r18,r22,8
    9ca0:	21bfe52e 	bgeu	r4,r6,9c38 <__ram_exceptions_end+0xfbfe99e4>
    9ca4:	a80b883a 	mov	r5,r21
    9ca8:	9009883a 	mov	r4,r18
    9cac:	00097f00 	call	97f0 <memmove>
    9cb0:	b821883a 	mov	r16,r23
    9cb4:	b027883a 	mov	r19,r22
    9cb8:	003f8a06 	br	9ae4 <__ram_exceptions_end+0xfbfe9890>
    9cbc:	300b883a 	mov	r5,r6
    9cc0:	dfc00917 	ldw	ra,36(sp)
    9cc4:	df000817 	ldw	fp,32(sp)
    9cc8:	ddc00717 	ldw	r23,28(sp)
    9ccc:	dd800617 	ldw	r22,24(sp)
    9cd0:	dd400517 	ldw	r21,20(sp)
    9cd4:	dd000417 	ldw	r20,16(sp)
    9cd8:	dcc00317 	ldw	r19,12(sp)
    9cdc:	dc800217 	ldw	r18,8(sp)
    9ce0:	dc400117 	ldw	r17,4(sp)
    9ce4:	dc000017 	ldw	r16,0(sp)
    9ce8:	dec00a04 	addi	sp,sp,40
    9cec:	00058841 	jmpi	5884 <_malloc_r>
    9cf0:	a8c00017 	ldw	r3,0(r21)
    9cf4:	90c00015 	stw	r3,0(r18)
    9cf8:	a8c00117 	ldw	r3,4(r21)
    9cfc:	90c00115 	stw	r3,4(r18)
    9d00:	00c006c4 	movi	r3,27
    9d04:	19804536 	bltu	r3,r6,9e1c <_realloc_r+0x470>
    9d08:	90800204 	addi	r2,r18,8
    9d0c:	a8c00204 	addi	r3,r21,8
    9d10:	003f6306 	br	9aa0 <__ram_exceptions_end+0xfbfe984c>
    9d14:	9005883a 	mov	r2,r18
    9d18:	a8c00017 	ldw	r3,0(r21)
    9d1c:	b821883a 	mov	r16,r23
    9d20:	b027883a 	mov	r19,r22
    9d24:	10c00015 	stw	r3,0(r2)
    9d28:	a8c00117 	ldw	r3,4(r21)
    9d2c:	10c00115 	stw	r3,4(r2)
    9d30:	a8c00217 	ldw	r3,8(r21)
    9d34:	10c00215 	stw	r3,8(r2)
    9d38:	003f6a06 	br	9ae4 <__ram_exceptions_end+0xfbfe9890>
    9d3c:	9c67883a 	add	r19,r19,r17
    9d40:	4445c83a 	sub	r2,r8,r17
    9d44:	e4c00215 	stw	r19,8(fp)
    9d48:	10800054 	ori	r2,r2,1
    9d4c:	98800115 	stw	r2,4(r19)
    9d50:	a8bfff17 	ldw	r2,-4(r21)
    9d54:	a009883a 	mov	r4,r20
    9d58:	1080004c 	andi	r2,r2,1
    9d5c:	1462b03a 	or	r17,r2,r17
    9d60:	ac7fff15 	stw	r17,-4(r21)
    9d64:	000dba80 	call	dba8 <__malloc_unlock>
    9d68:	a805883a 	mov	r2,r21
    9d6c:	003f6b06 	br	9b1c <__ram_exceptions_end+0xfbfe98c8>
    9d70:	a80b883a 	mov	r5,r21
    9d74:	9009883a 	mov	r4,r18
    9d78:	00097f00 	call	97f0 <memmove>
    9d7c:	003f4e06 	br	9ab8 <__ram_exceptions_end+0xfbfe9864>
    9d80:	89000404 	addi	r4,r17,16
    9d84:	b93fbc16 	blt	r23,r4,9c78 <__ram_exceptions_end+0xfbfe9a24>
    9d88:	b0800317 	ldw	r2,12(r22)
    9d8c:	b0c00217 	ldw	r3,8(r22)
    9d90:	81bfff04 	addi	r6,r16,-4
    9d94:	01000904 	movi	r4,36
    9d98:	18800315 	stw	r2,12(r3)
    9d9c:	10c00215 	stw	r3,8(r2)
    9da0:	b4800204 	addi	r18,r22,8
    9da4:	21804336 	bltu	r4,r6,9eb4 <_realloc_r+0x508>
    9da8:	008004c4 	movi	r2,19
    9dac:	11803f2e 	bgeu	r2,r6,9eac <_realloc_r+0x500>
    9db0:	a8800017 	ldw	r2,0(r21)
    9db4:	b0800215 	stw	r2,8(r22)
    9db8:	a8800117 	ldw	r2,4(r21)
    9dbc:	b0800315 	stw	r2,12(r22)
    9dc0:	008006c4 	movi	r2,27
    9dc4:	11803f36 	bltu	r2,r6,9ec4 <_realloc_r+0x518>
    9dc8:	b0800404 	addi	r2,r22,16
    9dcc:	ad400204 	addi	r21,r21,8
    9dd0:	a8c00017 	ldw	r3,0(r21)
    9dd4:	10c00015 	stw	r3,0(r2)
    9dd8:	a8c00117 	ldw	r3,4(r21)
    9ddc:	10c00115 	stw	r3,4(r2)
    9de0:	a8c00217 	ldw	r3,8(r21)
    9de4:	10c00215 	stw	r3,8(r2)
    9de8:	b447883a 	add	r3,r22,r17
    9dec:	bc45c83a 	sub	r2,r23,r17
    9df0:	e0c00215 	stw	r3,8(fp)
    9df4:	10800054 	ori	r2,r2,1
    9df8:	18800115 	stw	r2,4(r3)
    9dfc:	b0800117 	ldw	r2,4(r22)
    9e00:	a009883a 	mov	r4,r20
    9e04:	1080004c 	andi	r2,r2,1
    9e08:	1462b03a 	or	r17,r2,r17
    9e0c:	b4400115 	stw	r17,4(r22)
    9e10:	000dba80 	call	dba8 <__malloc_unlock>
    9e14:	9005883a 	mov	r2,r18
    9e18:	003f4006 	br	9b1c <__ram_exceptions_end+0xfbfe98c8>
    9e1c:	a8c00217 	ldw	r3,8(r21)
    9e20:	90c00215 	stw	r3,8(r18)
    9e24:	a8c00317 	ldw	r3,12(r21)
    9e28:	90c00315 	stw	r3,12(r18)
    9e2c:	30801126 	beq	r6,r2,9e74 <_realloc_r+0x4c8>
    9e30:	90800404 	addi	r2,r18,16
    9e34:	a8c00404 	addi	r3,r21,16
    9e38:	003f1906 	br	9aa0 <__ram_exceptions_end+0xfbfe984c>
    9e3c:	90ffff17 	ldw	r3,-4(r18)
    9e40:	00bfff04 	movi	r2,-4
    9e44:	a825883a 	mov	r18,r21
    9e48:	1884703a 	and	r2,r3,r2
    9e4c:	80a1883a 	add	r16,r16,r2
    9e50:	003f2406 	br	9ae4 <__ram_exceptions_end+0xfbfe9890>
    9e54:	a8800217 	ldw	r2,8(r21)
    9e58:	b0800415 	stw	r2,16(r22)
    9e5c:	a8800317 	ldw	r2,12(r21)
    9e60:	b0800515 	stw	r2,20(r22)
    9e64:	31000a26 	beq	r6,r4,9e90 <_realloc_r+0x4e4>
    9e68:	b0800604 	addi	r2,r22,24
    9e6c:	ad400404 	addi	r21,r21,16
    9e70:	003fa906 	br	9d18 <__ram_exceptions_end+0xfbfe9ac4>
    9e74:	a9000417 	ldw	r4,16(r21)
    9e78:	90800604 	addi	r2,r18,24
    9e7c:	a8c00604 	addi	r3,r21,24
    9e80:	91000415 	stw	r4,16(r18)
    9e84:	a9000517 	ldw	r4,20(r21)
    9e88:	91000515 	stw	r4,20(r18)
    9e8c:	003f0406 	br	9aa0 <__ram_exceptions_end+0xfbfe984c>
    9e90:	a8c00417 	ldw	r3,16(r21)
    9e94:	ad400604 	addi	r21,r21,24
    9e98:	b0800804 	addi	r2,r22,32
    9e9c:	b0c00615 	stw	r3,24(r22)
    9ea0:	a8ffff17 	ldw	r3,-4(r21)
    9ea4:	b0c00715 	stw	r3,28(r22)
    9ea8:	003f9b06 	br	9d18 <__ram_exceptions_end+0xfbfe9ac4>
    9eac:	9005883a 	mov	r2,r18
    9eb0:	003fc706 	br	9dd0 <__ram_exceptions_end+0xfbfe9b7c>
    9eb4:	a80b883a 	mov	r5,r21
    9eb8:	9009883a 	mov	r4,r18
    9ebc:	00097f00 	call	97f0 <memmove>
    9ec0:	003fc906 	br	9de8 <__ram_exceptions_end+0xfbfe9b94>
    9ec4:	a8800217 	ldw	r2,8(r21)
    9ec8:	b0800415 	stw	r2,16(r22)
    9ecc:	a8800317 	ldw	r2,12(r21)
    9ed0:	b0800515 	stw	r2,20(r22)
    9ed4:	31000726 	beq	r6,r4,9ef4 <_realloc_r+0x548>
    9ed8:	b0800604 	addi	r2,r22,24
    9edc:	ad400404 	addi	r21,r21,16
    9ee0:	003fbb06 	br	9dd0 <__ram_exceptions_end+0xfbfe9b7c>
    9ee4:	a009883a 	mov	r4,r20
    9ee8:	000dba80 	call	dba8 <__malloc_unlock>
    9eec:	0005883a 	mov	r2,zero
    9ef0:	003f0a06 	br	9b1c <__ram_exceptions_end+0xfbfe98c8>
    9ef4:	a8c00417 	ldw	r3,16(r21)
    9ef8:	ad400604 	addi	r21,r21,24
    9efc:	b0800804 	addi	r2,r22,32
    9f00:	b0c00615 	stw	r3,24(r22)
    9f04:	a8ffff17 	ldw	r3,-4(r21)
    9f08:	b0c00715 	stw	r3,28(r22)
    9f0c:	003fb006 	br	9dd0 <__ram_exceptions_end+0xfbfe9b7c>

00009f10 <__swbuf_r>:
    9f10:	defffb04 	addi	sp,sp,-20
    9f14:	dcc00315 	stw	r19,12(sp)
    9f18:	dc800215 	stw	r18,8(sp)
    9f1c:	dc000015 	stw	r16,0(sp)
    9f20:	dfc00415 	stw	ra,16(sp)
    9f24:	dc400115 	stw	r17,4(sp)
    9f28:	2025883a 	mov	r18,r4
    9f2c:	2827883a 	mov	r19,r5
    9f30:	3021883a 	mov	r16,r6
    9f34:	20000226 	beq	r4,zero,9f40 <__swbuf_r+0x30>
    9f38:	20800e17 	ldw	r2,56(r4)
    9f3c:	10004226 	beq	r2,zero,a048 <__swbuf_r+0x138>
    9f40:	80800617 	ldw	r2,24(r16)
    9f44:	8100030b 	ldhu	r4,12(r16)
    9f48:	80800215 	stw	r2,8(r16)
    9f4c:	2080020c 	andi	r2,r4,8
    9f50:	10003626 	beq	r2,zero,a02c <__swbuf_r+0x11c>
    9f54:	80c00417 	ldw	r3,16(r16)
    9f58:	18003426 	beq	r3,zero,a02c <__swbuf_r+0x11c>
    9f5c:	2088000c 	andi	r2,r4,8192
    9f60:	9c403fcc 	andi	r17,r19,255
    9f64:	10001a26 	beq	r2,zero,9fd0 <__swbuf_r+0xc0>
    9f68:	80800017 	ldw	r2,0(r16)
    9f6c:	81000517 	ldw	r4,20(r16)
    9f70:	10c7c83a 	sub	r3,r2,r3
    9f74:	1900200e 	bge	r3,r4,9ff8 <__swbuf_r+0xe8>
    9f78:	18c00044 	addi	r3,r3,1
    9f7c:	81000217 	ldw	r4,8(r16)
    9f80:	11400044 	addi	r5,r2,1
    9f84:	81400015 	stw	r5,0(r16)
    9f88:	213fffc4 	addi	r4,r4,-1
    9f8c:	81000215 	stw	r4,8(r16)
    9f90:	14c00005 	stb	r19,0(r2)
    9f94:	80800517 	ldw	r2,20(r16)
    9f98:	10c01e26 	beq	r2,r3,a014 <__swbuf_r+0x104>
    9f9c:	8080030b 	ldhu	r2,12(r16)
    9fa0:	1080004c 	andi	r2,r2,1
    9fa4:	10000226 	beq	r2,zero,9fb0 <__swbuf_r+0xa0>
    9fa8:	00800284 	movi	r2,10
    9fac:	88801926 	beq	r17,r2,a014 <__swbuf_r+0x104>
    9fb0:	8805883a 	mov	r2,r17
    9fb4:	dfc00417 	ldw	ra,16(sp)
    9fb8:	dcc00317 	ldw	r19,12(sp)
    9fbc:	dc800217 	ldw	r18,8(sp)
    9fc0:	dc400117 	ldw	r17,4(sp)
    9fc4:	dc000017 	ldw	r16,0(sp)
    9fc8:	dec00504 	addi	sp,sp,20
    9fcc:	f800283a 	ret
    9fd0:	81401917 	ldw	r5,100(r16)
    9fd4:	00b7ffc4 	movi	r2,-8193
    9fd8:	21080014 	ori	r4,r4,8192
    9fdc:	2884703a 	and	r2,r5,r2
    9fe0:	80801915 	stw	r2,100(r16)
    9fe4:	80800017 	ldw	r2,0(r16)
    9fe8:	8100030d 	sth	r4,12(r16)
    9fec:	81000517 	ldw	r4,20(r16)
    9ff0:	10c7c83a 	sub	r3,r2,r3
    9ff4:	193fe016 	blt	r3,r4,9f78 <__ram_exceptions_end+0xfbfe9d24>
    9ff8:	800b883a 	mov	r5,r16
    9ffc:	9009883a 	mov	r4,r18
    a000:	0004c040 	call	4c04 <_fflush_r>
    a004:	1000071e 	bne	r2,zero,a024 <__swbuf_r+0x114>
    a008:	80800017 	ldw	r2,0(r16)
    a00c:	00c00044 	movi	r3,1
    a010:	003fda06 	br	9f7c <__ram_exceptions_end+0xfbfe9d28>
    a014:	800b883a 	mov	r5,r16
    a018:	9009883a 	mov	r4,r18
    a01c:	0004c040 	call	4c04 <_fflush_r>
    a020:	103fe326 	beq	r2,zero,9fb0 <__ram_exceptions_end+0xfbfe9d5c>
    a024:	00bfffc4 	movi	r2,-1
    a028:	003fe206 	br	9fb4 <__ram_exceptions_end+0xfbfe9d60>
    a02c:	800b883a 	mov	r5,r16
    a030:	9009883a 	mov	r4,r18
    a034:	000300c0 	call	300c <__swsetup_r>
    a038:	103ffa1e 	bne	r2,zero,a024 <__ram_exceptions_end+0xfbfe9dd0>
    a03c:	8100030b 	ldhu	r4,12(r16)
    a040:	80c00417 	ldw	r3,16(r16)
    a044:	003fc506 	br	9f5c <__ram_exceptions_end+0xfbfe9d08>
    a048:	0004fe00 	call	4fe0 <__sinit>
    a04c:	003fbc06 	br	9f40 <__ram_exceptions_end+0xfbfe9cec>

0000a050 <__swbuf>:
    a050:	00800074 	movhi	r2,1
    a054:	1087b904 	addi	r2,r2,7908
    a058:	280d883a 	mov	r6,r5
    a05c:	200b883a 	mov	r5,r4
    a060:	11000017 	ldw	r4,0(r2)
    a064:	0009f101 	jmpi	9f10 <__swbuf_r>

0000a068 <_wcrtomb_r>:
    a068:	defff604 	addi	sp,sp,-40
    a06c:	00800074 	movhi	r2,1
    a070:	dc800815 	stw	r18,32(sp)
    a074:	dc400715 	stw	r17,28(sp)
    a078:	dc000615 	stw	r16,24(sp)
    a07c:	1087bd04 	addi	r2,r2,7924
    a080:	dfc00915 	stw	ra,36(sp)
    a084:	2021883a 	mov	r16,r4
    a088:	3823883a 	mov	r17,r7
    a08c:	14800017 	ldw	r18,0(r2)
    a090:	28001426 	beq	r5,zero,a0e4 <_wcrtomb_r+0x7c>
    a094:	d9400415 	stw	r5,16(sp)
    a098:	d9800515 	stw	r6,20(sp)
    a09c:	00056680 	call	5668 <__locale_charset>
    a0a0:	d9800517 	ldw	r6,20(sp)
    a0a4:	d9400417 	ldw	r5,16(sp)
    a0a8:	100f883a 	mov	r7,r2
    a0ac:	dc400015 	stw	r17,0(sp)
    a0b0:	8009883a 	mov	r4,r16
    a0b4:	903ee83a 	callr	r18
    a0b8:	00ffffc4 	movi	r3,-1
    a0bc:	10c0031e 	bne	r2,r3,a0cc <_wcrtomb_r+0x64>
    a0c0:	88000015 	stw	zero,0(r17)
    a0c4:	00c02284 	movi	r3,138
    a0c8:	80c00015 	stw	r3,0(r16)
    a0cc:	dfc00917 	ldw	ra,36(sp)
    a0d0:	dc800817 	ldw	r18,32(sp)
    a0d4:	dc400717 	ldw	r17,28(sp)
    a0d8:	dc000617 	ldw	r16,24(sp)
    a0dc:	dec00a04 	addi	sp,sp,40
    a0e0:	f800283a 	ret
    a0e4:	00056680 	call	5668 <__locale_charset>
    a0e8:	100f883a 	mov	r7,r2
    a0ec:	dc400015 	stw	r17,0(sp)
    a0f0:	000d883a 	mov	r6,zero
    a0f4:	d9400104 	addi	r5,sp,4
    a0f8:	8009883a 	mov	r4,r16
    a0fc:	903ee83a 	callr	r18
    a100:	003fed06 	br	a0b8 <__ram_exceptions_end+0xfbfe9e64>

0000a104 <wcrtomb>:
    a104:	defff604 	addi	sp,sp,-40
    a108:	00800074 	movhi	r2,1
    a10c:	dc800615 	stw	r18,24(sp)
    a110:	dc400515 	stw	r17,20(sp)
    a114:	1087b904 	addi	r2,r2,7908
    a118:	dfc00915 	stw	ra,36(sp)
    a11c:	dd000815 	stw	r20,32(sp)
    a120:	dcc00715 	stw	r19,28(sp)
    a124:	dc000415 	stw	r16,16(sp)
    a128:	3025883a 	mov	r18,r6
    a12c:	14400017 	ldw	r17,0(r2)
    a130:	20001926 	beq	r4,zero,a198 <wcrtomb+0x94>
    a134:	00800074 	movhi	r2,1
    a138:	1087bd04 	addi	r2,r2,7924
    a13c:	15000017 	ldw	r20,0(r2)
    a140:	2021883a 	mov	r16,r4
    a144:	2827883a 	mov	r19,r5
    a148:	00056680 	call	5668 <__locale_charset>
    a14c:	100f883a 	mov	r7,r2
    a150:	dc800015 	stw	r18,0(sp)
    a154:	980d883a 	mov	r6,r19
    a158:	800b883a 	mov	r5,r16
    a15c:	8809883a 	mov	r4,r17
    a160:	a03ee83a 	callr	r20
    a164:	00ffffc4 	movi	r3,-1
    a168:	10c0031e 	bne	r2,r3,a178 <wcrtomb+0x74>
    a16c:	90000015 	stw	zero,0(r18)
    a170:	00c02284 	movi	r3,138
    a174:	88c00015 	stw	r3,0(r17)
    a178:	dfc00917 	ldw	ra,36(sp)
    a17c:	dd000817 	ldw	r20,32(sp)
    a180:	dcc00717 	ldw	r19,28(sp)
    a184:	dc800617 	ldw	r18,24(sp)
    a188:	dc400517 	ldw	r17,20(sp)
    a18c:	dc000417 	ldw	r16,16(sp)
    a190:	dec00a04 	addi	sp,sp,40
    a194:	f800283a 	ret
    a198:	00800074 	movhi	r2,1
    a19c:	1087bd04 	addi	r2,r2,7924
    a1a0:	14000017 	ldw	r16,0(r2)
    a1a4:	00056680 	call	5668 <__locale_charset>
    a1a8:	100f883a 	mov	r7,r2
    a1ac:	dc800015 	stw	r18,0(sp)
    a1b0:	000d883a 	mov	r6,zero
    a1b4:	d9400104 	addi	r5,sp,4
    a1b8:	8809883a 	mov	r4,r17
    a1bc:	803ee83a 	callr	r16
    a1c0:	003fe806 	br	a164 <__ram_exceptions_end+0xfbfe9f10>

0000a1c4 <__ascii_wctomb>:
    a1c4:	28000526 	beq	r5,zero,a1dc <__ascii_wctomb+0x18>
    a1c8:	00803fc4 	movi	r2,255
    a1cc:	11800536 	bltu	r2,r6,a1e4 <__ascii_wctomb+0x20>
    a1d0:	29800005 	stb	r6,0(r5)
    a1d4:	00800044 	movi	r2,1
    a1d8:	f800283a 	ret
    a1dc:	0005883a 	mov	r2,zero
    a1e0:	f800283a 	ret
    a1e4:	00802284 	movi	r2,138
    a1e8:	20800015 	stw	r2,0(r4)
    a1ec:	00bfffc4 	movi	r2,-1
    a1f0:	f800283a 	ret

0000a1f4 <_wctomb_r>:
    a1f4:	00800074 	movhi	r2,1
    a1f8:	defff904 	addi	sp,sp,-28
    a1fc:	1087bd04 	addi	r2,r2,7924
    a200:	dfc00615 	stw	ra,24(sp)
    a204:	dc400515 	stw	r17,20(sp)
    a208:	dc000415 	stw	r16,16(sp)
    a20c:	3823883a 	mov	r17,r7
    a210:	14000017 	ldw	r16,0(r2)
    a214:	d9000115 	stw	r4,4(sp)
    a218:	d9400215 	stw	r5,8(sp)
    a21c:	d9800315 	stw	r6,12(sp)
    a220:	00056680 	call	5668 <__locale_charset>
    a224:	d9800317 	ldw	r6,12(sp)
    a228:	d9400217 	ldw	r5,8(sp)
    a22c:	d9000117 	ldw	r4,4(sp)
    a230:	100f883a 	mov	r7,r2
    a234:	dc400015 	stw	r17,0(sp)
    a238:	803ee83a 	callr	r16
    a23c:	dfc00617 	ldw	ra,24(sp)
    a240:	dc400517 	ldw	r17,20(sp)
    a244:	dc000417 	ldw	r16,16(sp)
    a248:	dec00704 	addi	sp,sp,28
    a24c:	f800283a 	ret

0000a250 <__udivdi3>:
    a250:	defff504 	addi	sp,sp,-44
    a254:	dcc00415 	stw	r19,16(sp)
    a258:	dc000115 	stw	r16,4(sp)
    a25c:	dfc00a15 	stw	ra,40(sp)
    a260:	df000915 	stw	fp,36(sp)
    a264:	ddc00815 	stw	r23,32(sp)
    a268:	dd800715 	stw	r22,28(sp)
    a26c:	dd400615 	stw	r21,24(sp)
    a270:	dd000515 	stw	r20,20(sp)
    a274:	dc800315 	stw	r18,12(sp)
    a278:	dc400215 	stw	r17,8(sp)
    a27c:	2027883a 	mov	r19,r4
    a280:	2821883a 	mov	r16,r5
    a284:	3800411e 	bne	r7,zero,a38c <__udivdi3+0x13c>
    a288:	3023883a 	mov	r17,r6
    a28c:	2025883a 	mov	r18,r4
    a290:	2980522e 	bgeu	r5,r6,a3dc <__udivdi3+0x18c>
    a294:	00bfffd4 	movui	r2,65535
    a298:	282d883a 	mov	r22,r5
    a29c:	1180a836 	bltu	r2,r6,a540 <__udivdi3+0x2f0>
    a2a0:	00803fc4 	movi	r2,255
    a2a4:	1185803a 	cmpltu	r2,r2,r6
    a2a8:	100490fa 	slli	r2,r2,3
    a2ac:	3086d83a 	srl	r3,r6,r2
    a2b0:	01000074 	movhi	r4,1
    a2b4:	2100c004 	addi	r4,r4,768
    a2b8:	20c7883a 	add	r3,r4,r3
    a2bc:	18c00003 	ldbu	r3,0(r3)
    a2c0:	1885883a 	add	r2,r3,r2
    a2c4:	00c00804 	movi	r3,32
    a2c8:	1887c83a 	sub	r3,r3,r2
    a2cc:	18000526 	beq	r3,zero,a2e4 <__udivdi3+0x94>
    a2d0:	80e0983a 	sll	r16,r16,r3
    a2d4:	9884d83a 	srl	r2,r19,r2
    a2d8:	30e2983a 	sll	r17,r6,r3
    a2dc:	98e4983a 	sll	r18,r19,r3
    a2e0:	142cb03a 	or	r22,r2,r16
    a2e4:	882ad43a 	srli	r21,r17,16
    a2e8:	b009883a 	mov	r4,r22
    a2ec:	8d3fffcc 	andi	r20,r17,65535
    a2f0:	a80b883a 	mov	r5,r21
    a2f4:	0000c780 	call	c78 <__umodsi3>
    a2f8:	b009883a 	mov	r4,r22
    a2fc:	a80b883a 	mov	r5,r21
    a300:	1027883a 	mov	r19,r2
    a304:	0000c140 	call	c14 <__udivsi3>
    a308:	102d883a 	mov	r22,r2
    a30c:	9826943a 	slli	r19,r19,16
    a310:	9004d43a 	srli	r2,r18,16
    a314:	a5a1383a 	mul	r16,r20,r22
    a318:	14c4b03a 	or	r2,r2,r19
    a31c:	1400052e 	bgeu	r2,r16,a334 <__udivdi3+0xe4>
    a320:	1445883a 	add	r2,r2,r17
    a324:	b0ffffc4 	addi	r3,r22,-1
    a328:	14400136 	bltu	r2,r17,a330 <__udivdi3+0xe0>
    a32c:	14012336 	bltu	r2,r16,a7bc <__udivdi3+0x56c>
    a330:	182d883a 	mov	r22,r3
    a334:	1421c83a 	sub	r16,r2,r16
    a338:	a80b883a 	mov	r5,r21
    a33c:	8009883a 	mov	r4,r16
    a340:	0000c780 	call	c78 <__umodsi3>
    a344:	1027883a 	mov	r19,r2
    a348:	a80b883a 	mov	r5,r21
    a34c:	8009883a 	mov	r4,r16
    a350:	0000c140 	call	c14 <__udivsi3>
    a354:	9826943a 	slli	r19,r19,16
    a358:	a0a9383a 	mul	r20,r20,r2
    a35c:	94bfffcc 	andi	r18,r18,65535
    a360:	94e4b03a 	or	r18,r18,r19
    a364:	9500052e 	bgeu	r18,r20,a37c <__udivdi3+0x12c>
    a368:	8ca5883a 	add	r18,r17,r18
    a36c:	10ffffc4 	addi	r3,r2,-1
    a370:	9440f136 	bltu	r18,r17,a738 <__udivdi3+0x4e8>
    a374:	9500f02e 	bgeu	r18,r20,a738 <__udivdi3+0x4e8>
    a378:	10bfff84 	addi	r2,r2,-2
    a37c:	b00c943a 	slli	r6,r22,16
    a380:	0007883a 	mov	r3,zero
    a384:	3084b03a 	or	r2,r6,r2
    a388:	00005906 	br	a4f0 <__udivdi3+0x2a0>
    a38c:	29c05636 	bltu	r5,r7,a4e8 <__udivdi3+0x298>
    a390:	00bfffd4 	movui	r2,65535
    a394:	11c0622e 	bgeu	r2,r7,a520 <__udivdi3+0x2d0>
    a398:	00804034 	movhi	r2,256
    a39c:	10bfffc4 	addi	r2,r2,-1
    a3a0:	11c0ee36 	bltu	r2,r7,a75c <__udivdi3+0x50c>
    a3a4:	00800404 	movi	r2,16
    a3a8:	3886d83a 	srl	r3,r7,r2
    a3ac:	01000074 	movhi	r4,1
    a3b0:	2100c004 	addi	r4,r4,768
    a3b4:	20c7883a 	add	r3,r4,r3
    a3b8:	18c00003 	ldbu	r3,0(r3)
    a3bc:	05400804 	movi	r21,32
    a3c0:	1885883a 	add	r2,r3,r2
    a3c4:	a8abc83a 	sub	r21,r21,r2
    a3c8:	a800621e 	bne	r21,zero,a554 <__udivdi3+0x304>
    a3cc:	3c00e936 	bltu	r7,r16,a774 <__udivdi3+0x524>
    a3d0:	9985403a 	cmpgeu	r2,r19,r6
    a3d4:	0007883a 	mov	r3,zero
    a3d8:	00004506 	br	a4f0 <__udivdi3+0x2a0>
    a3dc:	3000041e 	bne	r6,zero,a3f0 <__udivdi3+0x1a0>
    a3e0:	000b883a 	mov	r5,zero
    a3e4:	01000044 	movi	r4,1
    a3e8:	0000c140 	call	c14 <__udivsi3>
    a3ec:	1023883a 	mov	r17,r2
    a3f0:	00bfffd4 	movui	r2,65535
    a3f4:	14404e2e 	bgeu	r2,r17,a530 <__udivdi3+0x2e0>
    a3f8:	00804034 	movhi	r2,256
    a3fc:	10bfffc4 	addi	r2,r2,-1
    a400:	1440d836 	bltu	r2,r17,a764 <__udivdi3+0x514>
    a404:	00800404 	movi	r2,16
    a408:	8886d83a 	srl	r3,r17,r2
    a40c:	01000074 	movhi	r4,1
    a410:	2100c004 	addi	r4,r4,768
    a414:	20c7883a 	add	r3,r4,r3
    a418:	18c00003 	ldbu	r3,0(r3)
    a41c:	1885883a 	add	r2,r3,r2
    a420:	00c00804 	movi	r3,32
    a424:	1887c83a 	sub	r3,r3,r2
    a428:	18008f1e 	bne	r3,zero,a668 <__udivdi3+0x418>
    a42c:	882ad43a 	srli	r21,r17,16
    a430:	8461c83a 	sub	r16,r16,r17
    a434:	8d3fffcc 	andi	r20,r17,65535
    a438:	00c00044 	movi	r3,1
    a43c:	8009883a 	mov	r4,r16
    a440:	a80b883a 	mov	r5,r21
    a444:	d8c00015 	stw	r3,0(sp)
    a448:	0000c780 	call	c78 <__umodsi3>
    a44c:	8009883a 	mov	r4,r16
    a450:	a80b883a 	mov	r5,r21
    a454:	1027883a 	mov	r19,r2
    a458:	0000c140 	call	c14 <__udivsi3>
    a45c:	9826943a 	slli	r19,r19,16
    a460:	9008d43a 	srli	r4,r18,16
    a464:	1521383a 	mul	r16,r2,r20
    a468:	102d883a 	mov	r22,r2
    a46c:	24c8b03a 	or	r4,r4,r19
    a470:	d8c00017 	ldw	r3,0(sp)
    a474:	2400052e 	bgeu	r4,r16,a48c <__udivdi3+0x23c>
    a478:	2449883a 	add	r4,r4,r17
    a47c:	b0bfffc4 	addi	r2,r22,-1
    a480:	24400136 	bltu	r4,r17,a488 <__udivdi3+0x238>
    a484:	2400ca36 	bltu	r4,r16,a7b0 <__udivdi3+0x560>
    a488:	102d883a 	mov	r22,r2
    a48c:	2421c83a 	sub	r16,r4,r16
    a490:	a80b883a 	mov	r5,r21
    a494:	8009883a 	mov	r4,r16
    a498:	d8c00015 	stw	r3,0(sp)
    a49c:	0000c780 	call	c78 <__umodsi3>
    a4a0:	1027883a 	mov	r19,r2
    a4a4:	a80b883a 	mov	r5,r21
    a4a8:	8009883a 	mov	r4,r16
    a4ac:	0000c140 	call	c14 <__udivsi3>
    a4b0:	9826943a 	slli	r19,r19,16
    a4b4:	1529383a 	mul	r20,r2,r20
    a4b8:	94bfffcc 	andi	r18,r18,65535
    a4bc:	94e4b03a 	or	r18,r18,r19
    a4c0:	d8c00017 	ldw	r3,0(sp)
    a4c4:	9500052e 	bgeu	r18,r20,a4dc <__udivdi3+0x28c>
    a4c8:	8ca5883a 	add	r18,r17,r18
    a4cc:	113fffc4 	addi	r4,r2,-1
    a4d0:	94409736 	bltu	r18,r17,a730 <__udivdi3+0x4e0>
    a4d4:	9500962e 	bgeu	r18,r20,a730 <__udivdi3+0x4e0>
    a4d8:	10bfff84 	addi	r2,r2,-2
    a4dc:	b00c943a 	slli	r6,r22,16
    a4e0:	3084b03a 	or	r2,r6,r2
    a4e4:	00000206 	br	a4f0 <__udivdi3+0x2a0>
    a4e8:	0007883a 	mov	r3,zero
    a4ec:	0005883a 	mov	r2,zero
    a4f0:	dfc00a17 	ldw	ra,40(sp)
    a4f4:	df000917 	ldw	fp,36(sp)
    a4f8:	ddc00817 	ldw	r23,32(sp)
    a4fc:	dd800717 	ldw	r22,28(sp)
    a500:	dd400617 	ldw	r21,24(sp)
    a504:	dd000517 	ldw	r20,20(sp)
    a508:	dcc00417 	ldw	r19,16(sp)
    a50c:	dc800317 	ldw	r18,12(sp)
    a510:	dc400217 	ldw	r17,8(sp)
    a514:	dc000117 	ldw	r16,4(sp)
    a518:	dec00b04 	addi	sp,sp,44
    a51c:	f800283a 	ret
    a520:	00803fc4 	movi	r2,255
    a524:	11c5803a 	cmpltu	r2,r2,r7
    a528:	100490fa 	slli	r2,r2,3
    a52c:	003f9e06 	br	a3a8 <__ram_exceptions_end+0xfbfea154>
    a530:	00803fc4 	movi	r2,255
    a534:	1445803a 	cmpltu	r2,r2,r17
    a538:	100490fa 	slli	r2,r2,3
    a53c:	003fb206 	br	a408 <__ram_exceptions_end+0xfbfea1b4>
    a540:	00804034 	movhi	r2,256
    a544:	10bfffc4 	addi	r2,r2,-1
    a548:	11808836 	bltu	r2,r6,a76c <__udivdi3+0x51c>
    a54c:	00800404 	movi	r2,16
    a550:	003f5606 	br	a2ac <__ram_exceptions_end+0xfbfea058>
    a554:	30aed83a 	srl	r23,r6,r2
    a558:	3d4e983a 	sll	r7,r7,r21
    a55c:	80acd83a 	srl	r22,r16,r2
    a560:	9884d83a 	srl	r2,r19,r2
    a564:	3deeb03a 	or	r23,r7,r23
    a568:	b824d43a 	srli	r18,r23,16
    a56c:	8560983a 	sll	r16,r16,r21
    a570:	b009883a 	mov	r4,r22
    a574:	900b883a 	mov	r5,r18
    a578:	3568983a 	sll	r20,r6,r21
    a57c:	1420b03a 	or	r16,r2,r16
    a580:	0000c780 	call	c78 <__umodsi3>
    a584:	b009883a 	mov	r4,r22
    a588:	900b883a 	mov	r5,r18
    a58c:	1023883a 	mov	r17,r2
    a590:	0000c140 	call	c14 <__udivsi3>
    a594:	8808943a 	slli	r4,r17,16
    a598:	bf3fffcc 	andi	fp,r23,65535
    a59c:	8006d43a 	srli	r3,r16,16
    a5a0:	e0a3383a 	mul	r17,fp,r2
    a5a4:	100d883a 	mov	r6,r2
    a5a8:	1906b03a 	or	r3,r3,r4
    a5ac:	1c40042e 	bgeu	r3,r17,a5c0 <__udivdi3+0x370>
    a5b0:	1dc7883a 	add	r3,r3,r23
    a5b4:	10bfffc4 	addi	r2,r2,-1
    a5b8:	1dc0752e 	bgeu	r3,r23,a790 <__udivdi3+0x540>
    a5bc:	100d883a 	mov	r6,r2
    a5c0:	1c63c83a 	sub	r17,r3,r17
    a5c4:	900b883a 	mov	r5,r18
    a5c8:	8809883a 	mov	r4,r17
    a5cc:	d9800015 	stw	r6,0(sp)
    a5d0:	0000c780 	call	c78 <__umodsi3>
    a5d4:	102d883a 	mov	r22,r2
    a5d8:	8809883a 	mov	r4,r17
    a5dc:	900b883a 	mov	r5,r18
    a5e0:	0000c140 	call	c14 <__udivsi3>
    a5e4:	b02c943a 	slli	r22,r22,16
    a5e8:	e089383a 	mul	r4,fp,r2
    a5ec:	843fffcc 	andi	r16,r16,65535
    a5f0:	85a0b03a 	or	r16,r16,r22
    a5f4:	d9800017 	ldw	r6,0(sp)
    a5f8:	8100042e 	bgeu	r16,r4,a60c <__udivdi3+0x3bc>
    a5fc:	85e1883a 	add	r16,r16,r23
    a600:	10ffffc4 	addi	r3,r2,-1
    a604:	85c05e2e 	bgeu	r16,r23,a780 <__udivdi3+0x530>
    a608:	1805883a 	mov	r2,r3
    a60c:	300c943a 	slli	r6,r6,16
    a610:	a17fffcc 	andi	r5,r20,65535
    a614:	a028d43a 	srli	r20,r20,16
    a618:	3084b03a 	or	r2,r6,r2
    a61c:	10ffffcc 	andi	r3,r2,65535
    a620:	100cd43a 	srli	r6,r2,16
    a624:	194f383a 	mul	r7,r3,r5
    a628:	1d07383a 	mul	r3,r3,r20
    a62c:	314b383a 	mul	r5,r6,r5
    a630:	3810d43a 	srli	r8,r7,16
    a634:	8121c83a 	sub	r16,r16,r4
    a638:	1947883a 	add	r3,r3,r5
    a63c:	40c7883a 	add	r3,r8,r3
    a640:	350d383a 	mul	r6,r6,r20
    a644:	1940022e 	bgeu	r3,r5,a650 <__udivdi3+0x400>
    a648:	01000074 	movhi	r4,1
    a64c:	310d883a 	add	r6,r6,r4
    a650:	1828d43a 	srli	r20,r3,16
    a654:	a18d883a 	add	r6,r20,r6
    a658:	81803e36 	bltu	r16,r6,a754 <__udivdi3+0x504>
    a65c:	81803826 	beq	r16,r6,a740 <__udivdi3+0x4f0>
    a660:	0007883a 	mov	r3,zero
    a664:	003fa206 	br	a4f0 <__ram_exceptions_end+0xfbfea29c>
    a668:	88e2983a 	sll	r17,r17,r3
    a66c:	80a8d83a 	srl	r20,r16,r2
    a670:	80e0983a 	sll	r16,r16,r3
    a674:	882ad43a 	srli	r21,r17,16
    a678:	9884d83a 	srl	r2,r19,r2
    a67c:	a009883a 	mov	r4,r20
    a680:	a80b883a 	mov	r5,r21
    a684:	142eb03a 	or	r23,r2,r16
    a688:	98e4983a 	sll	r18,r19,r3
    a68c:	0000c780 	call	c78 <__umodsi3>
    a690:	a009883a 	mov	r4,r20
    a694:	a80b883a 	mov	r5,r21
    a698:	1021883a 	mov	r16,r2
    a69c:	0000c140 	call	c14 <__udivsi3>
    a6a0:	1039883a 	mov	fp,r2
    a6a4:	8d3fffcc 	andi	r20,r17,65535
    a6a8:	8020943a 	slli	r16,r16,16
    a6ac:	b804d43a 	srli	r2,r23,16
    a6b0:	a72d383a 	mul	r22,r20,fp
    a6b4:	1404b03a 	or	r2,r2,r16
    a6b8:	1580062e 	bgeu	r2,r22,a6d4 <__udivdi3+0x484>
    a6bc:	1445883a 	add	r2,r2,r17
    a6c0:	e0ffffc4 	addi	r3,fp,-1
    a6c4:	14403836 	bltu	r2,r17,a7a8 <__udivdi3+0x558>
    a6c8:	1580372e 	bgeu	r2,r22,a7a8 <__udivdi3+0x558>
    a6cc:	e73fff84 	addi	fp,fp,-2
    a6d0:	1445883a 	add	r2,r2,r17
    a6d4:	15adc83a 	sub	r22,r2,r22
    a6d8:	a80b883a 	mov	r5,r21
    a6dc:	b009883a 	mov	r4,r22
    a6e0:	0000c780 	call	c78 <__umodsi3>
    a6e4:	1027883a 	mov	r19,r2
    a6e8:	b009883a 	mov	r4,r22
    a6ec:	a80b883a 	mov	r5,r21
    a6f0:	0000c140 	call	c14 <__udivsi3>
    a6f4:	9826943a 	slli	r19,r19,16
    a6f8:	a0a1383a 	mul	r16,r20,r2
    a6fc:	b93fffcc 	andi	r4,r23,65535
    a700:	24c8b03a 	or	r4,r4,r19
    a704:	2400062e 	bgeu	r4,r16,a720 <__udivdi3+0x4d0>
    a708:	2449883a 	add	r4,r4,r17
    a70c:	10ffffc4 	addi	r3,r2,-1
    a710:	24402336 	bltu	r4,r17,a7a0 <__udivdi3+0x550>
    a714:	2400222e 	bgeu	r4,r16,a7a0 <__udivdi3+0x550>
    a718:	10bfff84 	addi	r2,r2,-2
    a71c:	2449883a 	add	r4,r4,r17
    a720:	e038943a 	slli	fp,fp,16
    a724:	2421c83a 	sub	r16,r4,r16
    a728:	e086b03a 	or	r3,fp,r2
    a72c:	003f4306 	br	a43c <__ram_exceptions_end+0xfbfea1e8>
    a730:	2005883a 	mov	r2,r4
    a734:	003f6906 	br	a4dc <__ram_exceptions_end+0xfbfea288>
    a738:	1805883a 	mov	r2,r3
    a73c:	003f0f06 	br	a37c <__ram_exceptions_end+0xfbfea128>
    a740:	1806943a 	slli	r3,r3,16
    a744:	9d66983a 	sll	r19,r19,r21
    a748:	39ffffcc 	andi	r7,r7,65535
    a74c:	19c7883a 	add	r3,r3,r7
    a750:	98ffc32e 	bgeu	r19,r3,a660 <__ram_exceptions_end+0xfbfea40c>
    a754:	10bfffc4 	addi	r2,r2,-1
    a758:	003fc106 	br	a660 <__ram_exceptions_end+0xfbfea40c>
    a75c:	00800604 	movi	r2,24
    a760:	003f1106 	br	a3a8 <__ram_exceptions_end+0xfbfea154>
    a764:	00800604 	movi	r2,24
    a768:	003f2706 	br	a408 <__ram_exceptions_end+0xfbfea1b4>
    a76c:	00800604 	movi	r2,24
    a770:	003ece06 	br	a2ac <__ram_exceptions_end+0xfbfea058>
    a774:	0007883a 	mov	r3,zero
    a778:	00800044 	movi	r2,1
    a77c:	003f5c06 	br	a4f0 <__ram_exceptions_end+0xfbfea29c>
    a780:	813fa12e 	bgeu	r16,r4,a608 <__ram_exceptions_end+0xfbfea3b4>
    a784:	10bfff84 	addi	r2,r2,-2
    a788:	85e1883a 	add	r16,r16,r23
    a78c:	003f9f06 	br	a60c <__ram_exceptions_end+0xfbfea3b8>
    a790:	1c7f8a2e 	bgeu	r3,r17,a5bc <__ram_exceptions_end+0xfbfea368>
    a794:	31bfff84 	addi	r6,r6,-2
    a798:	1dc7883a 	add	r3,r3,r23
    a79c:	003f8806 	br	a5c0 <__ram_exceptions_end+0xfbfea36c>
    a7a0:	1805883a 	mov	r2,r3
    a7a4:	003fde06 	br	a720 <__ram_exceptions_end+0xfbfea4cc>
    a7a8:	1839883a 	mov	fp,r3
    a7ac:	003fc906 	br	a6d4 <__ram_exceptions_end+0xfbfea480>
    a7b0:	b5bfff84 	addi	r22,r22,-2
    a7b4:	2449883a 	add	r4,r4,r17
    a7b8:	003f3406 	br	a48c <__ram_exceptions_end+0xfbfea238>
    a7bc:	b5bfff84 	addi	r22,r22,-2
    a7c0:	1445883a 	add	r2,r2,r17
    a7c4:	003edb06 	br	a334 <__ram_exceptions_end+0xfbfea0e0>

0000a7c8 <__umoddi3>:
    a7c8:	defff404 	addi	sp,sp,-48
    a7cc:	df000a15 	stw	fp,40(sp)
    a7d0:	dc400315 	stw	r17,12(sp)
    a7d4:	dc000215 	stw	r16,8(sp)
    a7d8:	dfc00b15 	stw	ra,44(sp)
    a7dc:	ddc00915 	stw	r23,36(sp)
    a7e0:	dd800815 	stw	r22,32(sp)
    a7e4:	dd400715 	stw	r21,28(sp)
    a7e8:	dd000615 	stw	r20,24(sp)
    a7ec:	dcc00515 	stw	r19,20(sp)
    a7f0:	dc800415 	stw	r18,16(sp)
    a7f4:	2021883a 	mov	r16,r4
    a7f8:	2823883a 	mov	r17,r5
    a7fc:	2839883a 	mov	fp,r5
    a800:	38003c1e 	bne	r7,zero,a8f4 <__umoddi3+0x12c>
    a804:	3027883a 	mov	r19,r6
    a808:	2029883a 	mov	r20,r4
    a80c:	2980512e 	bgeu	r5,r6,a954 <__umoddi3+0x18c>
    a810:	00bfffd4 	movui	r2,65535
    a814:	11809a36 	bltu	r2,r6,aa80 <__umoddi3+0x2b8>
    a818:	01003fc4 	movi	r4,255
    a81c:	2189803a 	cmpltu	r4,r4,r6
    a820:	200890fa 	slli	r4,r4,3
    a824:	3104d83a 	srl	r2,r6,r4
    a828:	00c00074 	movhi	r3,1
    a82c:	18c0c004 	addi	r3,r3,768
    a830:	1885883a 	add	r2,r3,r2
    a834:	10c00003 	ldbu	r3,0(r2)
    a838:	00800804 	movi	r2,32
    a83c:	1909883a 	add	r4,r3,r4
    a840:	1125c83a 	sub	r18,r2,r4
    a844:	90000526 	beq	r18,zero,a85c <__umoddi3+0x94>
    a848:	8ca2983a 	sll	r17,r17,r18
    a84c:	8108d83a 	srl	r4,r16,r4
    a850:	34a6983a 	sll	r19,r6,r18
    a854:	84a8983a 	sll	r20,r16,r18
    a858:	2478b03a 	or	fp,r4,r17
    a85c:	982ed43a 	srli	r23,r19,16
    a860:	e009883a 	mov	r4,fp
    a864:	9dbfffcc 	andi	r22,r19,65535
    a868:	b80b883a 	mov	r5,r23
    a86c:	0000c780 	call	c78 <__umodsi3>
    a870:	e009883a 	mov	r4,fp
    a874:	b80b883a 	mov	r5,r23
    a878:	102b883a 	mov	r21,r2
    a87c:	0000c140 	call	c14 <__udivsi3>
    a880:	a806943a 	slli	r3,r21,16
    a884:	a008d43a 	srli	r4,r20,16
    a888:	b085383a 	mul	r2,r22,r2
    a88c:	20c8b03a 	or	r4,r4,r3
    a890:	2080032e 	bgeu	r4,r2,a8a0 <__umoddi3+0xd8>
    a894:	24c9883a 	add	r4,r4,r19
    a898:	24c00136 	bltu	r4,r19,a8a0 <__umoddi3+0xd8>
    a89c:	20811036 	bltu	r4,r2,ace0 <__umoddi3+0x518>
    a8a0:	20abc83a 	sub	r21,r4,r2
    a8a4:	b80b883a 	mov	r5,r23
    a8a8:	a809883a 	mov	r4,r21
    a8ac:	0000c780 	call	c78 <__umodsi3>
    a8b0:	1023883a 	mov	r17,r2
    a8b4:	b80b883a 	mov	r5,r23
    a8b8:	a809883a 	mov	r4,r21
    a8bc:	0000c140 	call	c14 <__udivsi3>
    a8c0:	8822943a 	slli	r17,r17,16
    a8c4:	b085383a 	mul	r2,r22,r2
    a8c8:	a0ffffcc 	andi	r3,r20,65535
    a8cc:	1c46b03a 	or	r3,r3,r17
    a8d0:	1880042e 	bgeu	r3,r2,a8e4 <__umoddi3+0x11c>
    a8d4:	1cc7883a 	add	r3,r3,r19
    a8d8:	1cc00236 	bltu	r3,r19,a8e4 <__umoddi3+0x11c>
    a8dc:	1880012e 	bgeu	r3,r2,a8e4 <__umoddi3+0x11c>
    a8e0:	1cc7883a 	add	r3,r3,r19
    a8e4:	1885c83a 	sub	r2,r3,r2
    a8e8:	1484d83a 	srl	r2,r2,r18
    a8ec:	0007883a 	mov	r3,zero
    a8f0:	00004f06 	br	aa30 <__umoddi3+0x268>
    a8f4:	29c04c36 	bltu	r5,r7,aa28 <__umoddi3+0x260>
    a8f8:	00bfffd4 	movui	r2,65535
    a8fc:	11c0582e 	bgeu	r2,r7,aa60 <__umoddi3+0x298>
    a900:	00804034 	movhi	r2,256
    a904:	10bfffc4 	addi	r2,r2,-1
    a908:	11c0e736 	bltu	r2,r7,aca8 <__umoddi3+0x4e0>
    a90c:	01000404 	movi	r4,16
    a910:	3904d83a 	srl	r2,r7,r4
    a914:	00c00074 	movhi	r3,1
    a918:	18c0c004 	addi	r3,r3,768
    a91c:	1885883a 	add	r2,r3,r2
    a920:	14c00003 	ldbu	r19,0(r2)
    a924:	00c00804 	movi	r3,32
    a928:	9927883a 	add	r19,r19,r4
    a92c:	1ce9c83a 	sub	r20,r3,r19
    a930:	a000581e 	bne	r20,zero,aa94 <__umoddi3+0x2cc>
    a934:	3c400136 	bltu	r7,r17,a93c <__umoddi3+0x174>
    a938:	8180eb36 	bltu	r16,r6,ace8 <__umoddi3+0x520>
    a93c:	8185c83a 	sub	r2,r16,r6
    a940:	89e3c83a 	sub	r17,r17,r7
    a944:	8089803a 	cmpltu	r4,r16,r2
    a948:	8939c83a 	sub	fp,r17,r4
    a94c:	e007883a 	mov	r3,fp
    a950:	00003706 	br	aa30 <__umoddi3+0x268>
    a954:	3000041e 	bne	r6,zero,a968 <__umoddi3+0x1a0>
    a958:	000b883a 	mov	r5,zero
    a95c:	01000044 	movi	r4,1
    a960:	0000c140 	call	c14 <__udivsi3>
    a964:	1027883a 	mov	r19,r2
    a968:	00bfffd4 	movui	r2,65535
    a96c:	14c0402e 	bgeu	r2,r19,aa70 <__umoddi3+0x2a8>
    a970:	00804034 	movhi	r2,256
    a974:	10bfffc4 	addi	r2,r2,-1
    a978:	14c0cd36 	bltu	r2,r19,acb0 <__umoddi3+0x4e8>
    a97c:	00800404 	movi	r2,16
    a980:	9886d83a 	srl	r3,r19,r2
    a984:	01000074 	movhi	r4,1
    a988:	2100c004 	addi	r4,r4,768
    a98c:	20c7883a 	add	r3,r4,r3
    a990:	18c00003 	ldbu	r3,0(r3)
    a994:	1887883a 	add	r3,r3,r2
    a998:	00800804 	movi	r2,32
    a99c:	10e5c83a 	sub	r18,r2,r3
    a9a0:	9000901e 	bne	r18,zero,abe4 <__umoddi3+0x41c>
    a9a4:	982cd43a 	srli	r22,r19,16
    a9a8:	8ce3c83a 	sub	r17,r17,r19
    a9ac:	9d7fffcc 	andi	r21,r19,65535
    a9b0:	b00b883a 	mov	r5,r22
    a9b4:	8809883a 	mov	r4,r17
    a9b8:	0000c780 	call	c78 <__umodsi3>
    a9bc:	8809883a 	mov	r4,r17
    a9c0:	b00b883a 	mov	r5,r22
    a9c4:	1021883a 	mov	r16,r2
    a9c8:	0000c140 	call	c14 <__udivsi3>
    a9cc:	8006943a 	slli	r3,r16,16
    a9d0:	a008d43a 	srli	r4,r20,16
    a9d4:	1545383a 	mul	r2,r2,r21
    a9d8:	20c8b03a 	or	r4,r4,r3
    a9dc:	2080042e 	bgeu	r4,r2,a9f0 <__umoddi3+0x228>
    a9e0:	24c9883a 	add	r4,r4,r19
    a9e4:	24c00236 	bltu	r4,r19,a9f0 <__umoddi3+0x228>
    a9e8:	2080012e 	bgeu	r4,r2,a9f0 <__umoddi3+0x228>
    a9ec:	24c9883a 	add	r4,r4,r19
    a9f0:	20a1c83a 	sub	r16,r4,r2
    a9f4:	b00b883a 	mov	r5,r22
    a9f8:	8009883a 	mov	r4,r16
    a9fc:	0000c780 	call	c78 <__umodsi3>
    aa00:	1023883a 	mov	r17,r2
    aa04:	b00b883a 	mov	r5,r22
    aa08:	8009883a 	mov	r4,r16
    aa0c:	0000c140 	call	c14 <__udivsi3>
    aa10:	8822943a 	slli	r17,r17,16
    aa14:	1545383a 	mul	r2,r2,r21
    aa18:	a53fffcc 	andi	r20,r20,65535
    aa1c:	a446b03a 	or	r3,r20,r17
    aa20:	18bfb02e 	bgeu	r3,r2,a8e4 <__ram_exceptions_end+0xfbfea690>
    aa24:	003fab06 	br	a8d4 <__ram_exceptions_end+0xfbfea680>
    aa28:	2005883a 	mov	r2,r4
    aa2c:	2807883a 	mov	r3,r5
    aa30:	dfc00b17 	ldw	ra,44(sp)
    aa34:	df000a17 	ldw	fp,40(sp)
    aa38:	ddc00917 	ldw	r23,36(sp)
    aa3c:	dd800817 	ldw	r22,32(sp)
    aa40:	dd400717 	ldw	r21,28(sp)
    aa44:	dd000617 	ldw	r20,24(sp)
    aa48:	dcc00517 	ldw	r19,20(sp)
    aa4c:	dc800417 	ldw	r18,16(sp)
    aa50:	dc400317 	ldw	r17,12(sp)
    aa54:	dc000217 	ldw	r16,8(sp)
    aa58:	dec00c04 	addi	sp,sp,48
    aa5c:	f800283a 	ret
    aa60:	04c03fc4 	movi	r19,255
    aa64:	99c9803a 	cmpltu	r4,r19,r7
    aa68:	200890fa 	slli	r4,r4,3
    aa6c:	003fa806 	br	a910 <__ram_exceptions_end+0xfbfea6bc>
    aa70:	00803fc4 	movi	r2,255
    aa74:	14c5803a 	cmpltu	r2,r2,r19
    aa78:	100490fa 	slli	r2,r2,3
    aa7c:	003fc006 	br	a980 <__ram_exceptions_end+0xfbfea72c>
    aa80:	00804034 	movhi	r2,256
    aa84:	10bfffc4 	addi	r2,r2,-1
    aa88:	11808b36 	bltu	r2,r6,acb8 <__umoddi3+0x4f0>
    aa8c:	01000404 	movi	r4,16
    aa90:	003f6406 	br	a824 <__ram_exceptions_end+0xfbfea5d0>
    aa94:	34c4d83a 	srl	r2,r6,r19
    aa98:	3d0e983a 	sll	r7,r7,r20
    aa9c:	8cf8d83a 	srl	fp,r17,r19
    aaa0:	8d10983a 	sll	r8,r17,r20
    aaa4:	38aab03a 	or	r21,r7,r2
    aaa8:	a82cd43a 	srli	r22,r21,16
    aaac:	84e2d83a 	srl	r17,r16,r19
    aab0:	e009883a 	mov	r4,fp
    aab4:	b00b883a 	mov	r5,r22
    aab8:	8a22b03a 	or	r17,r17,r8
    aabc:	3524983a 	sll	r18,r6,r20
    aac0:	0000c780 	call	c78 <__umodsi3>
    aac4:	e009883a 	mov	r4,fp
    aac8:	b00b883a 	mov	r5,r22
    aacc:	102f883a 	mov	r23,r2
    aad0:	0000c140 	call	c14 <__udivsi3>
    aad4:	100d883a 	mov	r6,r2
    aad8:	b808943a 	slli	r4,r23,16
    aadc:	aa3fffcc 	andi	r8,r21,65535
    aae0:	8804d43a 	srli	r2,r17,16
    aae4:	41af383a 	mul	r23,r8,r6
    aae8:	8520983a 	sll	r16,r16,r20
    aaec:	1104b03a 	or	r2,r2,r4
    aaf0:	15c0042e 	bgeu	r2,r23,ab04 <__umoddi3+0x33c>
    aaf4:	1545883a 	add	r2,r2,r21
    aaf8:	30ffffc4 	addi	r3,r6,-1
    aafc:	1540742e 	bgeu	r2,r21,acd0 <__umoddi3+0x508>
    ab00:	180d883a 	mov	r6,r3
    ab04:	15efc83a 	sub	r23,r2,r23
    ab08:	b00b883a 	mov	r5,r22
    ab0c:	b809883a 	mov	r4,r23
    ab10:	d9800115 	stw	r6,4(sp)
    ab14:	da000015 	stw	r8,0(sp)
    ab18:	0000c780 	call	c78 <__umodsi3>
    ab1c:	b00b883a 	mov	r5,r22
    ab20:	b809883a 	mov	r4,r23
    ab24:	1039883a 	mov	fp,r2
    ab28:	0000c140 	call	c14 <__udivsi3>
    ab2c:	da000017 	ldw	r8,0(sp)
    ab30:	e038943a 	slli	fp,fp,16
    ab34:	100b883a 	mov	r5,r2
    ab38:	4089383a 	mul	r4,r8,r2
    ab3c:	8a3fffcc 	andi	r8,r17,65535
    ab40:	4710b03a 	or	r8,r8,fp
    ab44:	d9800117 	ldw	r6,4(sp)
    ab48:	4100042e 	bgeu	r8,r4,ab5c <__umoddi3+0x394>
    ab4c:	4551883a 	add	r8,r8,r21
    ab50:	10bfffc4 	addi	r2,r2,-1
    ab54:	45405a2e 	bgeu	r8,r21,acc0 <__umoddi3+0x4f8>
    ab58:	100b883a 	mov	r5,r2
    ab5c:	300c943a 	slli	r6,r6,16
    ab60:	91ffffcc 	andi	r7,r18,65535
    ab64:	9004d43a 	srli	r2,r18,16
    ab68:	314cb03a 	or	r6,r6,r5
    ab6c:	317fffcc 	andi	r5,r6,65535
    ab70:	300cd43a 	srli	r6,r6,16
    ab74:	29d3383a 	mul	r9,r5,r7
    ab78:	288b383a 	mul	r5,r5,r2
    ab7c:	31cf383a 	mul	r7,r6,r7
    ab80:	4806d43a 	srli	r3,r9,16
    ab84:	4111c83a 	sub	r8,r8,r4
    ab88:	29cb883a 	add	r5,r5,r7
    ab8c:	194b883a 	add	r5,r3,r5
    ab90:	3085383a 	mul	r2,r6,r2
    ab94:	29c0022e 	bgeu	r5,r7,aba0 <__umoddi3+0x3d8>
    ab98:	00c00074 	movhi	r3,1
    ab9c:	10c5883a 	add	r2,r2,r3
    aba0:	2808d43a 	srli	r4,r5,16
    aba4:	280a943a 	slli	r5,r5,16
    aba8:	4a7fffcc 	andi	r9,r9,65535
    abac:	2085883a 	add	r2,r4,r2
    abb0:	2a4b883a 	add	r5,r5,r9
    abb4:	40803636 	bltu	r8,r2,ac90 <__umoddi3+0x4c8>
    abb8:	40804d26 	beq	r8,r2,acf0 <__umoddi3+0x528>
    abbc:	4089c83a 	sub	r4,r8,r2
    abc0:	280f883a 	mov	r7,r5
    abc4:	81cfc83a 	sub	r7,r16,r7
    abc8:	81c7803a 	cmpltu	r3,r16,r7
    abcc:	20c7c83a 	sub	r3,r4,r3
    abd0:	1cc4983a 	sll	r2,r3,r19
    abd4:	3d0ed83a 	srl	r7,r7,r20
    abd8:	1d06d83a 	srl	r3,r3,r20
    abdc:	11c4b03a 	or	r2,r2,r7
    abe0:	003f9306 	br	aa30 <__ram_exceptions_end+0xfbfea7dc>
    abe4:	9ca6983a 	sll	r19,r19,r18
    abe8:	88e8d83a 	srl	r20,r17,r3
    abec:	80c4d83a 	srl	r2,r16,r3
    abf0:	982cd43a 	srli	r22,r19,16
    abf4:	8ca2983a 	sll	r17,r17,r18
    abf8:	a009883a 	mov	r4,r20
    abfc:	b00b883a 	mov	r5,r22
    ac00:	1478b03a 	or	fp,r2,r17
    ac04:	0000c780 	call	c78 <__umodsi3>
    ac08:	a009883a 	mov	r4,r20
    ac0c:	b00b883a 	mov	r5,r22
    ac10:	1023883a 	mov	r17,r2
    ac14:	0000c140 	call	c14 <__udivsi3>
    ac18:	9d7fffcc 	andi	r21,r19,65535
    ac1c:	880a943a 	slli	r5,r17,16
    ac20:	e008d43a 	srli	r4,fp,16
    ac24:	a885383a 	mul	r2,r21,r2
    ac28:	84a8983a 	sll	r20,r16,r18
    ac2c:	2148b03a 	or	r4,r4,r5
    ac30:	2080042e 	bgeu	r4,r2,ac44 <__umoddi3+0x47c>
    ac34:	24c9883a 	add	r4,r4,r19
    ac38:	24c00236 	bltu	r4,r19,ac44 <__umoddi3+0x47c>
    ac3c:	2080012e 	bgeu	r4,r2,ac44 <__umoddi3+0x47c>
    ac40:	24c9883a 	add	r4,r4,r19
    ac44:	20a3c83a 	sub	r17,r4,r2
    ac48:	b00b883a 	mov	r5,r22
    ac4c:	8809883a 	mov	r4,r17
    ac50:	0000c780 	call	c78 <__umodsi3>
    ac54:	102f883a 	mov	r23,r2
    ac58:	8809883a 	mov	r4,r17
    ac5c:	b00b883a 	mov	r5,r22
    ac60:	0000c140 	call	c14 <__udivsi3>
    ac64:	b82e943a 	slli	r23,r23,16
    ac68:	a885383a 	mul	r2,r21,r2
    ac6c:	e13fffcc 	andi	r4,fp,65535
    ac70:	25c8b03a 	or	r4,r4,r23
    ac74:	2080042e 	bgeu	r4,r2,ac88 <__umoddi3+0x4c0>
    ac78:	24c9883a 	add	r4,r4,r19
    ac7c:	24c00236 	bltu	r4,r19,ac88 <__umoddi3+0x4c0>
    ac80:	2080012e 	bgeu	r4,r2,ac88 <__umoddi3+0x4c0>
    ac84:	24c9883a 	add	r4,r4,r19
    ac88:	20a3c83a 	sub	r17,r4,r2
    ac8c:	003f4806 	br	a9b0 <__ram_exceptions_end+0xfbfea75c>
    ac90:	2c8fc83a 	sub	r7,r5,r18
    ac94:	1545c83a 	sub	r2,r2,r21
    ac98:	29cb803a 	cmpltu	r5,r5,r7
    ac9c:	1145c83a 	sub	r2,r2,r5
    aca0:	4089c83a 	sub	r4,r8,r2
    aca4:	003fc706 	br	abc4 <__ram_exceptions_end+0xfbfea970>
    aca8:	01000604 	movi	r4,24
    acac:	003f1806 	br	a910 <__ram_exceptions_end+0xfbfea6bc>
    acb0:	00800604 	movi	r2,24
    acb4:	003f3206 	br	a980 <__ram_exceptions_end+0xfbfea72c>
    acb8:	01000604 	movi	r4,24
    acbc:	003ed906 	br	a824 <__ram_exceptions_end+0xfbfea5d0>
    acc0:	413fa52e 	bgeu	r8,r4,ab58 <__ram_exceptions_end+0xfbfea904>
    acc4:	297fff84 	addi	r5,r5,-2
    acc8:	4551883a 	add	r8,r8,r21
    accc:	003fa306 	br	ab5c <__ram_exceptions_end+0xfbfea908>
    acd0:	15ff8b2e 	bgeu	r2,r23,ab00 <__ram_exceptions_end+0xfbfea8ac>
    acd4:	31bfff84 	addi	r6,r6,-2
    acd8:	1545883a 	add	r2,r2,r21
    acdc:	003f8906 	br	ab04 <__ram_exceptions_end+0xfbfea8b0>
    ace0:	24c9883a 	add	r4,r4,r19
    ace4:	003eee06 	br	a8a0 <__ram_exceptions_end+0xfbfea64c>
    ace8:	8005883a 	mov	r2,r16
    acec:	003f1706 	br	a94c <__ram_exceptions_end+0xfbfea6f8>
    acf0:	817fe736 	bltu	r16,r5,ac90 <__ram_exceptions_end+0xfbfeaa3c>
    acf4:	280f883a 	mov	r7,r5
    acf8:	0009883a 	mov	r4,zero
    acfc:	003fb106 	br	abc4 <__ram_exceptions_end+0xfbfea970>

0000ad00 <__adddf3>:
    ad00:	02c00434 	movhi	r11,16
    ad04:	5affffc4 	addi	r11,r11,-1
    ad08:	2806d7fa 	srli	r3,r5,31
    ad0c:	2ad4703a 	and	r10,r5,r11
    ad10:	3ad2703a 	and	r9,r7,r11
    ad14:	3804d53a 	srli	r2,r7,20
    ad18:	3018d77a 	srli	r12,r6,29
    ad1c:	280ad53a 	srli	r5,r5,20
    ad20:	501490fa 	slli	r10,r10,3
    ad24:	2010d77a 	srli	r8,r4,29
    ad28:	481290fa 	slli	r9,r9,3
    ad2c:	380ed7fa 	srli	r7,r7,31
    ad30:	defffb04 	addi	sp,sp,-20
    ad34:	dc800215 	stw	r18,8(sp)
    ad38:	dc400115 	stw	r17,4(sp)
    ad3c:	dc000015 	stw	r16,0(sp)
    ad40:	dfc00415 	stw	ra,16(sp)
    ad44:	dcc00315 	stw	r19,12(sp)
    ad48:	1c803fcc 	andi	r18,r3,255
    ad4c:	2c01ffcc 	andi	r16,r5,2047
    ad50:	5210b03a 	or	r8,r10,r8
    ad54:	202290fa 	slli	r17,r4,3
    ad58:	1081ffcc 	andi	r2,r2,2047
    ad5c:	4b12b03a 	or	r9,r9,r12
    ad60:	300c90fa 	slli	r6,r6,3
    ad64:	91c07526 	beq	r18,r7,af3c <__adddf3+0x23c>
    ad68:	8087c83a 	sub	r3,r16,r2
    ad6c:	00c0ab0e 	bge	zero,r3,b01c <__adddf3+0x31c>
    ad70:	10002a1e 	bne	r2,zero,ae1c <__adddf3+0x11c>
    ad74:	4984b03a 	or	r2,r9,r6
    ad78:	1000961e 	bne	r2,zero,afd4 <__adddf3+0x2d4>
    ad7c:	888001cc 	andi	r2,r17,7
    ad80:	10000726 	beq	r2,zero,ada0 <__adddf3+0xa0>
    ad84:	888003cc 	andi	r2,r17,15
    ad88:	00c00104 	movi	r3,4
    ad8c:	10c00426 	beq	r2,r3,ada0 <__adddf3+0xa0>
    ad90:	88c7883a 	add	r3,r17,r3
    ad94:	1c63803a 	cmpltu	r17,r3,r17
    ad98:	4451883a 	add	r8,r8,r17
    ad9c:	1823883a 	mov	r17,r3
    ada0:	4080202c 	andhi	r2,r8,128
    ada4:	10005926 	beq	r2,zero,af0c <__adddf3+0x20c>
    ada8:	84000044 	addi	r16,r16,1
    adac:	0081ffc4 	movi	r2,2047
    adb0:	8080ba26 	beq	r16,r2,b09c <__adddf3+0x39c>
    adb4:	00bfe034 	movhi	r2,65408
    adb8:	10bfffc4 	addi	r2,r2,-1
    adbc:	4090703a 	and	r8,r8,r2
    adc0:	4004977a 	slli	r2,r8,29
    adc4:	4010927a 	slli	r8,r8,9
    adc8:	8822d0fa 	srli	r17,r17,3
    adcc:	8401ffcc 	andi	r16,r16,2047
    add0:	4010d33a 	srli	r8,r8,12
    add4:	9007883a 	mov	r3,r18
    add8:	1444b03a 	or	r2,r2,r17
    addc:	8401ffcc 	andi	r16,r16,2047
    ade0:	8020953a 	slli	r16,r16,20
    ade4:	18c03fcc 	andi	r3,r3,255
    ade8:	01000434 	movhi	r4,16
    adec:	213fffc4 	addi	r4,r4,-1
    adf0:	180697fa 	slli	r3,r3,31
    adf4:	4110703a 	and	r8,r8,r4
    adf8:	4410b03a 	or	r8,r8,r16
    adfc:	40c6b03a 	or	r3,r8,r3
    ae00:	dfc00417 	ldw	ra,16(sp)
    ae04:	dcc00317 	ldw	r19,12(sp)
    ae08:	dc800217 	ldw	r18,8(sp)
    ae0c:	dc400117 	ldw	r17,4(sp)
    ae10:	dc000017 	ldw	r16,0(sp)
    ae14:	dec00504 	addi	sp,sp,20
    ae18:	f800283a 	ret
    ae1c:	0081ffc4 	movi	r2,2047
    ae20:	80bfd626 	beq	r16,r2,ad7c <__ram_exceptions_end+0xfbfeab28>
    ae24:	4a402034 	orhi	r9,r9,128
    ae28:	00800e04 	movi	r2,56
    ae2c:	10c09f16 	blt	r2,r3,b0ac <__adddf3+0x3ac>
    ae30:	008007c4 	movi	r2,31
    ae34:	10c0c216 	blt	r2,r3,b140 <__adddf3+0x440>
    ae38:	00800804 	movi	r2,32
    ae3c:	10c5c83a 	sub	r2,r2,r3
    ae40:	488a983a 	sll	r5,r9,r2
    ae44:	30c8d83a 	srl	r4,r6,r3
    ae48:	3084983a 	sll	r2,r6,r2
    ae4c:	48c6d83a 	srl	r3,r9,r3
    ae50:	290cb03a 	or	r6,r5,r4
    ae54:	1004c03a 	cmpne	r2,r2,zero
    ae58:	308cb03a 	or	r6,r6,r2
    ae5c:	898dc83a 	sub	r6,r17,r6
    ae60:	89a3803a 	cmpltu	r17,r17,r6
    ae64:	40d1c83a 	sub	r8,r8,r3
    ae68:	4451c83a 	sub	r8,r8,r17
    ae6c:	3023883a 	mov	r17,r6
    ae70:	4080202c 	andhi	r2,r8,128
    ae74:	10002326 	beq	r2,zero,af04 <__adddf3+0x204>
    ae78:	04c02034 	movhi	r19,128
    ae7c:	9cffffc4 	addi	r19,r19,-1
    ae80:	44e6703a 	and	r19,r8,r19
    ae84:	98007626 	beq	r19,zero,b060 <__adddf3+0x360>
    ae88:	9809883a 	mov	r4,r19
    ae8c:	000d3040 	call	d304 <__clzsi2>
    ae90:	10fffe04 	addi	r3,r2,-8
    ae94:	010007c4 	movi	r4,31
    ae98:	20c07716 	blt	r4,r3,b078 <__adddf3+0x378>
    ae9c:	00800804 	movi	r2,32
    aea0:	10c5c83a 	sub	r2,r2,r3
    aea4:	8884d83a 	srl	r2,r17,r2
    aea8:	98d0983a 	sll	r8,r19,r3
    aeac:	88e2983a 	sll	r17,r17,r3
    aeb0:	1204b03a 	or	r2,r2,r8
    aeb4:	1c007416 	blt	r3,r16,b088 <__adddf3+0x388>
    aeb8:	1c21c83a 	sub	r16,r3,r16
    aebc:	82000044 	addi	r8,r16,1
    aec0:	00c007c4 	movi	r3,31
    aec4:	1a009116 	blt	r3,r8,b10c <__adddf3+0x40c>
    aec8:	00c00804 	movi	r3,32
    aecc:	1a07c83a 	sub	r3,r3,r8
    aed0:	8a08d83a 	srl	r4,r17,r8
    aed4:	88e2983a 	sll	r17,r17,r3
    aed8:	10c6983a 	sll	r3,r2,r3
    aedc:	1210d83a 	srl	r8,r2,r8
    aee0:	8804c03a 	cmpne	r2,r17,zero
    aee4:	1906b03a 	or	r3,r3,r4
    aee8:	18a2b03a 	or	r17,r3,r2
    aeec:	0021883a 	mov	r16,zero
    aef0:	003fa206 	br	ad7c <__ram_exceptions_end+0xfbfeab28>
    aef4:	1890b03a 	or	r8,r3,r2
    aef8:	40017d26 	beq	r8,zero,b4f0 <__adddf3+0x7f0>
    aefc:	1011883a 	mov	r8,r2
    af00:	1823883a 	mov	r17,r3
    af04:	888001cc 	andi	r2,r17,7
    af08:	103f9e1e 	bne	r2,zero,ad84 <__ram_exceptions_end+0xfbfeab30>
    af0c:	4004977a 	slli	r2,r8,29
    af10:	8822d0fa 	srli	r17,r17,3
    af14:	4010d0fa 	srli	r8,r8,3
    af18:	9007883a 	mov	r3,r18
    af1c:	1444b03a 	or	r2,r2,r17
    af20:	0101ffc4 	movi	r4,2047
    af24:	81002426 	beq	r16,r4,afb8 <__adddf3+0x2b8>
    af28:	8120703a 	and	r16,r16,r4
    af2c:	01000434 	movhi	r4,16
    af30:	213fffc4 	addi	r4,r4,-1
    af34:	4110703a 	and	r8,r8,r4
    af38:	003fa806 	br	addc <__ram_exceptions_end+0xfbfeab88>
    af3c:	8089c83a 	sub	r4,r16,r2
    af40:	01005e0e 	bge	zero,r4,b0bc <__adddf3+0x3bc>
    af44:	10002b26 	beq	r2,zero,aff4 <__adddf3+0x2f4>
    af48:	0081ffc4 	movi	r2,2047
    af4c:	80bf8b26 	beq	r16,r2,ad7c <__ram_exceptions_end+0xfbfeab28>
    af50:	4a402034 	orhi	r9,r9,128
    af54:	00800e04 	movi	r2,56
    af58:	1100a40e 	bge	r2,r4,b1ec <__adddf3+0x4ec>
    af5c:	498cb03a 	or	r6,r9,r6
    af60:	300ac03a 	cmpne	r5,r6,zero
    af64:	0013883a 	mov	r9,zero
    af68:	2c4b883a 	add	r5,r5,r17
    af6c:	2c63803a 	cmpltu	r17,r5,r17
    af70:	4a11883a 	add	r8,r9,r8
    af74:	8a11883a 	add	r8,r17,r8
    af78:	2823883a 	mov	r17,r5
    af7c:	4080202c 	andhi	r2,r8,128
    af80:	103fe026 	beq	r2,zero,af04 <__ram_exceptions_end+0xfbfeacb0>
    af84:	84000044 	addi	r16,r16,1
    af88:	0081ffc4 	movi	r2,2047
    af8c:	8080d226 	beq	r16,r2,b2d8 <__adddf3+0x5d8>
    af90:	00bfe034 	movhi	r2,65408
    af94:	10bfffc4 	addi	r2,r2,-1
    af98:	4090703a 	and	r8,r8,r2
    af9c:	880ad07a 	srli	r5,r17,1
    afa0:	400897fa 	slli	r4,r8,31
    afa4:	88c0004c 	andi	r3,r17,1
    afa8:	28e2b03a 	or	r17,r5,r3
    afac:	4010d07a 	srli	r8,r8,1
    afb0:	2462b03a 	or	r17,r4,r17
    afb4:	003f7106 	br	ad7c <__ram_exceptions_end+0xfbfeab28>
    afb8:	4088b03a 	or	r4,r8,r2
    afbc:	20014526 	beq	r4,zero,b4d4 <__adddf3+0x7d4>
    afc0:	01000434 	movhi	r4,16
    afc4:	42000234 	orhi	r8,r8,8
    afc8:	213fffc4 	addi	r4,r4,-1
    afcc:	4110703a 	and	r8,r8,r4
    afd0:	003f8206 	br	addc <__ram_exceptions_end+0xfbfeab88>
    afd4:	18ffffc4 	addi	r3,r3,-1
    afd8:	1800491e 	bne	r3,zero,b100 <__adddf3+0x400>
    afdc:	898bc83a 	sub	r5,r17,r6
    afe0:	8963803a 	cmpltu	r17,r17,r5
    afe4:	4251c83a 	sub	r8,r8,r9
    afe8:	4451c83a 	sub	r8,r8,r17
    afec:	2823883a 	mov	r17,r5
    aff0:	003f9f06 	br	ae70 <__ram_exceptions_end+0xfbfeac1c>
    aff4:	4984b03a 	or	r2,r9,r6
    aff8:	103f6026 	beq	r2,zero,ad7c <__ram_exceptions_end+0xfbfeab28>
    affc:	213fffc4 	addi	r4,r4,-1
    b000:	2000931e 	bne	r4,zero,b250 <__adddf3+0x550>
    b004:	898d883a 	add	r6,r17,r6
    b008:	3463803a 	cmpltu	r17,r6,r17
    b00c:	4251883a 	add	r8,r8,r9
    b010:	8a11883a 	add	r8,r17,r8
    b014:	3023883a 	mov	r17,r6
    b018:	003fd806 	br	af7c <__ram_exceptions_end+0xfbfead28>
    b01c:	1800541e 	bne	r3,zero,b170 <__adddf3+0x470>
    b020:	80800044 	addi	r2,r16,1
    b024:	1081ffcc 	andi	r2,r2,2047
    b028:	00c00044 	movi	r3,1
    b02c:	1880a00e 	bge	r3,r2,b2b0 <__adddf3+0x5b0>
    b030:	8989c83a 	sub	r4,r17,r6
    b034:	8905803a 	cmpltu	r2,r17,r4
    b038:	4267c83a 	sub	r19,r8,r9
    b03c:	98a7c83a 	sub	r19,r19,r2
    b040:	9880202c 	andhi	r2,r19,128
    b044:	10006326 	beq	r2,zero,b1d4 <__adddf3+0x4d4>
    b048:	3463c83a 	sub	r17,r6,r17
    b04c:	4a07c83a 	sub	r3,r9,r8
    b050:	344d803a 	cmpltu	r6,r6,r17
    b054:	19a7c83a 	sub	r19,r3,r6
    b058:	3825883a 	mov	r18,r7
    b05c:	983f8a1e 	bne	r19,zero,ae88 <__ram_exceptions_end+0xfbfeac34>
    b060:	8809883a 	mov	r4,r17
    b064:	000d3040 	call	d304 <__clzsi2>
    b068:	10800804 	addi	r2,r2,32
    b06c:	10fffe04 	addi	r3,r2,-8
    b070:	010007c4 	movi	r4,31
    b074:	20ff890e 	bge	r4,r3,ae9c <__ram_exceptions_end+0xfbfeac48>
    b078:	10bff604 	addi	r2,r2,-40
    b07c:	8884983a 	sll	r2,r17,r2
    b080:	0023883a 	mov	r17,zero
    b084:	1c3f8c0e 	bge	r3,r16,aeb8 <__ram_exceptions_end+0xfbfeac64>
    b088:	023fe034 	movhi	r8,65408
    b08c:	423fffc4 	addi	r8,r8,-1
    b090:	80e1c83a 	sub	r16,r16,r3
    b094:	1210703a 	and	r8,r2,r8
    b098:	003f3806 	br	ad7c <__ram_exceptions_end+0xfbfeab28>
    b09c:	9007883a 	mov	r3,r18
    b0a0:	0011883a 	mov	r8,zero
    b0a4:	0005883a 	mov	r2,zero
    b0a8:	003f4c06 	br	addc <__ram_exceptions_end+0xfbfeab88>
    b0ac:	498cb03a 	or	r6,r9,r6
    b0b0:	300cc03a 	cmpne	r6,r6,zero
    b0b4:	0007883a 	mov	r3,zero
    b0b8:	003f6806 	br	ae5c <__ram_exceptions_end+0xfbfeac08>
    b0bc:	20009c1e 	bne	r4,zero,b330 <__adddf3+0x630>
    b0c0:	80800044 	addi	r2,r16,1
    b0c4:	1141ffcc 	andi	r5,r2,2047
    b0c8:	01000044 	movi	r4,1
    b0cc:	2140670e 	bge	r4,r5,b26c <__adddf3+0x56c>
    b0d0:	0101ffc4 	movi	r4,2047
    b0d4:	11007f26 	beq	r2,r4,b2d4 <__adddf3+0x5d4>
    b0d8:	898d883a 	add	r6,r17,r6
    b0dc:	4247883a 	add	r3,r8,r9
    b0e0:	3451803a 	cmpltu	r8,r6,r17
    b0e4:	40d1883a 	add	r8,r8,r3
    b0e8:	402297fa 	slli	r17,r8,31
    b0ec:	300cd07a 	srli	r6,r6,1
    b0f0:	4010d07a 	srli	r8,r8,1
    b0f4:	1021883a 	mov	r16,r2
    b0f8:	89a2b03a 	or	r17,r17,r6
    b0fc:	003f1f06 	br	ad7c <__ram_exceptions_end+0xfbfeab28>
    b100:	0081ffc4 	movi	r2,2047
    b104:	80bf481e 	bne	r16,r2,ae28 <__ram_exceptions_end+0xfbfeabd4>
    b108:	003f1c06 	br	ad7c <__ram_exceptions_end+0xfbfeab28>
    b10c:	843ff844 	addi	r16,r16,-31
    b110:	01000804 	movi	r4,32
    b114:	1406d83a 	srl	r3,r2,r16
    b118:	41005026 	beq	r8,r4,b25c <__adddf3+0x55c>
    b11c:	01001004 	movi	r4,64
    b120:	2211c83a 	sub	r8,r4,r8
    b124:	1204983a 	sll	r2,r2,r8
    b128:	88a2b03a 	or	r17,r17,r2
    b12c:	8822c03a 	cmpne	r17,r17,zero
    b130:	1c62b03a 	or	r17,r3,r17
    b134:	0011883a 	mov	r8,zero
    b138:	0021883a 	mov	r16,zero
    b13c:	003f7106 	br	af04 <__ram_exceptions_end+0xfbfeacb0>
    b140:	193ff804 	addi	r4,r3,-32
    b144:	00800804 	movi	r2,32
    b148:	4908d83a 	srl	r4,r9,r4
    b14c:	18804526 	beq	r3,r2,b264 <__adddf3+0x564>
    b150:	00801004 	movi	r2,64
    b154:	10c5c83a 	sub	r2,r2,r3
    b158:	4886983a 	sll	r3,r9,r2
    b15c:	198cb03a 	or	r6,r3,r6
    b160:	300cc03a 	cmpne	r6,r6,zero
    b164:	218cb03a 	or	r6,r4,r6
    b168:	0007883a 	mov	r3,zero
    b16c:	003f3b06 	br	ae5c <__ram_exceptions_end+0xfbfeac08>
    b170:	80002a26 	beq	r16,zero,b21c <__adddf3+0x51c>
    b174:	0101ffc4 	movi	r4,2047
    b178:	11006826 	beq	r2,r4,b31c <__adddf3+0x61c>
    b17c:	00c7c83a 	sub	r3,zero,r3
    b180:	42002034 	orhi	r8,r8,128
    b184:	01000e04 	movi	r4,56
    b188:	20c07c16 	blt	r4,r3,b37c <__adddf3+0x67c>
    b18c:	010007c4 	movi	r4,31
    b190:	20c0da16 	blt	r4,r3,b4fc <__adddf3+0x7fc>
    b194:	01000804 	movi	r4,32
    b198:	20c9c83a 	sub	r4,r4,r3
    b19c:	4114983a 	sll	r10,r8,r4
    b1a0:	88cad83a 	srl	r5,r17,r3
    b1a4:	8908983a 	sll	r4,r17,r4
    b1a8:	40c6d83a 	srl	r3,r8,r3
    b1ac:	5162b03a 	or	r17,r10,r5
    b1b0:	2008c03a 	cmpne	r4,r4,zero
    b1b4:	8922b03a 	or	r17,r17,r4
    b1b8:	3463c83a 	sub	r17,r6,r17
    b1bc:	48c7c83a 	sub	r3,r9,r3
    b1c0:	344d803a 	cmpltu	r6,r6,r17
    b1c4:	1991c83a 	sub	r8,r3,r6
    b1c8:	1021883a 	mov	r16,r2
    b1cc:	3825883a 	mov	r18,r7
    b1d0:	003f2706 	br	ae70 <__ram_exceptions_end+0xfbfeac1c>
    b1d4:	24d0b03a 	or	r8,r4,r19
    b1d8:	40001b1e 	bne	r8,zero,b248 <__adddf3+0x548>
    b1dc:	0005883a 	mov	r2,zero
    b1e0:	0007883a 	mov	r3,zero
    b1e4:	0021883a 	mov	r16,zero
    b1e8:	003f4d06 	br	af20 <__ram_exceptions_end+0xfbfeaccc>
    b1ec:	008007c4 	movi	r2,31
    b1f0:	11003c16 	blt	r2,r4,b2e4 <__adddf3+0x5e4>
    b1f4:	00800804 	movi	r2,32
    b1f8:	1105c83a 	sub	r2,r2,r4
    b1fc:	488e983a 	sll	r7,r9,r2
    b200:	310ad83a 	srl	r5,r6,r4
    b204:	3084983a 	sll	r2,r6,r2
    b208:	4912d83a 	srl	r9,r9,r4
    b20c:	394ab03a 	or	r5,r7,r5
    b210:	1004c03a 	cmpne	r2,r2,zero
    b214:	288ab03a 	or	r5,r5,r2
    b218:	003f5306 	br	af68 <__ram_exceptions_end+0xfbfead14>
    b21c:	4448b03a 	or	r4,r8,r17
    b220:	20003e26 	beq	r4,zero,b31c <__adddf3+0x61c>
    b224:	00c6303a 	nor	r3,zero,r3
    b228:	18003a1e 	bne	r3,zero,b314 <__adddf3+0x614>
    b22c:	3463c83a 	sub	r17,r6,r17
    b230:	4a07c83a 	sub	r3,r9,r8
    b234:	344d803a 	cmpltu	r6,r6,r17
    b238:	1991c83a 	sub	r8,r3,r6
    b23c:	1021883a 	mov	r16,r2
    b240:	3825883a 	mov	r18,r7
    b244:	003f0a06 	br	ae70 <__ram_exceptions_end+0xfbfeac1c>
    b248:	2023883a 	mov	r17,r4
    b24c:	003f0d06 	br	ae84 <__ram_exceptions_end+0xfbfeac30>
    b250:	0081ffc4 	movi	r2,2047
    b254:	80bf3f1e 	bne	r16,r2,af54 <__ram_exceptions_end+0xfbfead00>
    b258:	003ec806 	br	ad7c <__ram_exceptions_end+0xfbfeab28>
    b25c:	0005883a 	mov	r2,zero
    b260:	003fb106 	br	b128 <__ram_exceptions_end+0xfbfeaed4>
    b264:	0007883a 	mov	r3,zero
    b268:	003fbc06 	br	b15c <__ram_exceptions_end+0xfbfeaf08>
    b26c:	4444b03a 	or	r2,r8,r17
    b270:	8000871e 	bne	r16,zero,b490 <__adddf3+0x790>
    b274:	1000ba26 	beq	r2,zero,b560 <__adddf3+0x860>
    b278:	4984b03a 	or	r2,r9,r6
    b27c:	103ebf26 	beq	r2,zero,ad7c <__ram_exceptions_end+0xfbfeab28>
    b280:	8985883a 	add	r2,r17,r6
    b284:	4247883a 	add	r3,r8,r9
    b288:	1451803a 	cmpltu	r8,r2,r17
    b28c:	40d1883a 	add	r8,r8,r3
    b290:	40c0202c 	andhi	r3,r8,128
    b294:	1023883a 	mov	r17,r2
    b298:	183f1a26 	beq	r3,zero,af04 <__ram_exceptions_end+0xfbfeacb0>
    b29c:	00bfe034 	movhi	r2,65408
    b2a0:	10bfffc4 	addi	r2,r2,-1
    b2a4:	2021883a 	mov	r16,r4
    b2a8:	4090703a 	and	r8,r8,r2
    b2ac:	003eb306 	br	ad7c <__ram_exceptions_end+0xfbfeab28>
    b2b0:	4444b03a 	or	r2,r8,r17
    b2b4:	8000291e 	bne	r16,zero,b35c <__adddf3+0x65c>
    b2b8:	10004b1e 	bne	r2,zero,b3e8 <__adddf3+0x6e8>
    b2bc:	4990b03a 	or	r8,r9,r6
    b2c0:	40008b26 	beq	r8,zero,b4f0 <__adddf3+0x7f0>
    b2c4:	4811883a 	mov	r8,r9
    b2c8:	3023883a 	mov	r17,r6
    b2cc:	3825883a 	mov	r18,r7
    b2d0:	003eaa06 	br	ad7c <__ram_exceptions_end+0xfbfeab28>
    b2d4:	1021883a 	mov	r16,r2
    b2d8:	0011883a 	mov	r8,zero
    b2dc:	0005883a 	mov	r2,zero
    b2e0:	003f0f06 	br	af20 <__ram_exceptions_end+0xfbfeaccc>
    b2e4:	217ff804 	addi	r5,r4,-32
    b2e8:	00800804 	movi	r2,32
    b2ec:	494ad83a 	srl	r5,r9,r5
    b2f0:	20807d26 	beq	r4,r2,b4e8 <__adddf3+0x7e8>
    b2f4:	00801004 	movi	r2,64
    b2f8:	1109c83a 	sub	r4,r2,r4
    b2fc:	4912983a 	sll	r9,r9,r4
    b300:	498cb03a 	or	r6,r9,r6
    b304:	300cc03a 	cmpne	r6,r6,zero
    b308:	298ab03a 	or	r5,r5,r6
    b30c:	0013883a 	mov	r9,zero
    b310:	003f1506 	br	af68 <__ram_exceptions_end+0xfbfead14>
    b314:	0101ffc4 	movi	r4,2047
    b318:	113f9a1e 	bne	r2,r4,b184 <__ram_exceptions_end+0xfbfeaf30>
    b31c:	4811883a 	mov	r8,r9
    b320:	3023883a 	mov	r17,r6
    b324:	1021883a 	mov	r16,r2
    b328:	3825883a 	mov	r18,r7
    b32c:	003e9306 	br	ad7c <__ram_exceptions_end+0xfbfeab28>
    b330:	8000161e 	bne	r16,zero,b38c <__adddf3+0x68c>
    b334:	444ab03a 	or	r5,r8,r17
    b338:	28005126 	beq	r5,zero,b480 <__adddf3+0x780>
    b33c:	0108303a 	nor	r4,zero,r4
    b340:	20004d1e 	bne	r4,zero,b478 <__adddf3+0x778>
    b344:	89a3883a 	add	r17,r17,r6
    b348:	4253883a 	add	r9,r8,r9
    b34c:	898d803a 	cmpltu	r6,r17,r6
    b350:	3251883a 	add	r8,r6,r9
    b354:	1021883a 	mov	r16,r2
    b358:	003f0806 	br	af7c <__ram_exceptions_end+0xfbfead28>
    b35c:	1000301e 	bne	r2,zero,b420 <__adddf3+0x720>
    b360:	4984b03a 	or	r2,r9,r6
    b364:	10007126 	beq	r2,zero,b52c <__adddf3+0x82c>
    b368:	4811883a 	mov	r8,r9
    b36c:	3023883a 	mov	r17,r6
    b370:	3825883a 	mov	r18,r7
    b374:	0401ffc4 	movi	r16,2047
    b378:	003e8006 	br	ad7c <__ram_exceptions_end+0xfbfeab28>
    b37c:	4462b03a 	or	r17,r8,r17
    b380:	8822c03a 	cmpne	r17,r17,zero
    b384:	0007883a 	mov	r3,zero
    b388:	003f8b06 	br	b1b8 <__ram_exceptions_end+0xfbfeaf64>
    b38c:	0141ffc4 	movi	r5,2047
    b390:	11403b26 	beq	r2,r5,b480 <__adddf3+0x780>
    b394:	0109c83a 	sub	r4,zero,r4
    b398:	42002034 	orhi	r8,r8,128
    b39c:	01400e04 	movi	r5,56
    b3a0:	29006716 	blt	r5,r4,b540 <__adddf3+0x840>
    b3a4:	014007c4 	movi	r5,31
    b3a8:	29007016 	blt	r5,r4,b56c <__adddf3+0x86c>
    b3ac:	01400804 	movi	r5,32
    b3b0:	290bc83a 	sub	r5,r5,r4
    b3b4:	4154983a 	sll	r10,r8,r5
    b3b8:	890ed83a 	srl	r7,r17,r4
    b3bc:	894a983a 	sll	r5,r17,r5
    b3c0:	4108d83a 	srl	r4,r8,r4
    b3c4:	51e2b03a 	or	r17,r10,r7
    b3c8:	280ac03a 	cmpne	r5,r5,zero
    b3cc:	8962b03a 	or	r17,r17,r5
    b3d0:	89a3883a 	add	r17,r17,r6
    b3d4:	2253883a 	add	r9,r4,r9
    b3d8:	898d803a 	cmpltu	r6,r17,r6
    b3dc:	3251883a 	add	r8,r6,r9
    b3e0:	1021883a 	mov	r16,r2
    b3e4:	003ee506 	br	af7c <__ram_exceptions_end+0xfbfead28>
    b3e8:	4984b03a 	or	r2,r9,r6
    b3ec:	103e6326 	beq	r2,zero,ad7c <__ram_exceptions_end+0xfbfeab28>
    b3f0:	8987c83a 	sub	r3,r17,r6
    b3f4:	88c9803a 	cmpltu	r4,r17,r3
    b3f8:	4245c83a 	sub	r2,r8,r9
    b3fc:	1105c83a 	sub	r2,r2,r4
    b400:	1100202c 	andhi	r4,r2,128
    b404:	203ebb26 	beq	r4,zero,aef4 <__ram_exceptions_end+0xfbfeaca0>
    b408:	3463c83a 	sub	r17,r6,r17
    b40c:	4a07c83a 	sub	r3,r9,r8
    b410:	344d803a 	cmpltu	r6,r6,r17
    b414:	1991c83a 	sub	r8,r3,r6
    b418:	3825883a 	mov	r18,r7
    b41c:	003e5706 	br	ad7c <__ram_exceptions_end+0xfbfeab28>
    b420:	4984b03a 	or	r2,r9,r6
    b424:	10002e26 	beq	r2,zero,b4e0 <__adddf3+0x7e0>
    b428:	4004d0fa 	srli	r2,r8,3
    b42c:	8822d0fa 	srli	r17,r17,3
    b430:	4010977a 	slli	r8,r8,29
    b434:	10c0022c 	andhi	r3,r2,8
    b438:	4462b03a 	or	r17,r8,r17
    b43c:	18000826 	beq	r3,zero,b460 <__adddf3+0x760>
    b440:	4808d0fa 	srli	r4,r9,3
    b444:	20c0022c 	andhi	r3,r4,8
    b448:	1800051e 	bne	r3,zero,b460 <__adddf3+0x760>
    b44c:	300cd0fa 	srli	r6,r6,3
    b450:	4806977a 	slli	r3,r9,29
    b454:	2005883a 	mov	r2,r4
    b458:	3825883a 	mov	r18,r7
    b45c:	19a2b03a 	or	r17,r3,r6
    b460:	8810d77a 	srli	r8,r17,29
    b464:	100490fa 	slli	r2,r2,3
    b468:	882290fa 	slli	r17,r17,3
    b46c:	0401ffc4 	movi	r16,2047
    b470:	4090b03a 	or	r8,r8,r2
    b474:	003e4106 	br	ad7c <__ram_exceptions_end+0xfbfeab28>
    b478:	0141ffc4 	movi	r5,2047
    b47c:	117fc71e 	bne	r2,r5,b39c <__ram_exceptions_end+0xfbfeb148>
    b480:	4811883a 	mov	r8,r9
    b484:	3023883a 	mov	r17,r6
    b488:	1021883a 	mov	r16,r2
    b48c:	003e3b06 	br	ad7c <__ram_exceptions_end+0xfbfeab28>
    b490:	10002f26 	beq	r2,zero,b550 <__adddf3+0x850>
    b494:	4984b03a 	or	r2,r9,r6
    b498:	10001126 	beq	r2,zero,b4e0 <__adddf3+0x7e0>
    b49c:	4004d0fa 	srli	r2,r8,3
    b4a0:	8822d0fa 	srli	r17,r17,3
    b4a4:	4010977a 	slli	r8,r8,29
    b4a8:	10c0022c 	andhi	r3,r2,8
    b4ac:	4462b03a 	or	r17,r8,r17
    b4b0:	183feb26 	beq	r3,zero,b460 <__ram_exceptions_end+0xfbfeb20c>
    b4b4:	4808d0fa 	srli	r4,r9,3
    b4b8:	20c0022c 	andhi	r3,r4,8
    b4bc:	183fe81e 	bne	r3,zero,b460 <__ram_exceptions_end+0xfbfeb20c>
    b4c0:	300cd0fa 	srli	r6,r6,3
    b4c4:	4806977a 	slli	r3,r9,29
    b4c8:	2005883a 	mov	r2,r4
    b4cc:	19a2b03a 	or	r17,r3,r6
    b4d0:	003fe306 	br	b460 <__ram_exceptions_end+0xfbfeb20c>
    b4d4:	0011883a 	mov	r8,zero
    b4d8:	0005883a 	mov	r2,zero
    b4dc:	003e3f06 	br	addc <__ram_exceptions_end+0xfbfeab88>
    b4e0:	0401ffc4 	movi	r16,2047
    b4e4:	003e2506 	br	ad7c <__ram_exceptions_end+0xfbfeab28>
    b4e8:	0013883a 	mov	r9,zero
    b4ec:	003f8406 	br	b300 <__ram_exceptions_end+0xfbfeb0ac>
    b4f0:	0005883a 	mov	r2,zero
    b4f4:	0007883a 	mov	r3,zero
    b4f8:	003e8906 	br	af20 <__ram_exceptions_end+0xfbfeaccc>
    b4fc:	197ff804 	addi	r5,r3,-32
    b500:	01000804 	movi	r4,32
    b504:	414ad83a 	srl	r5,r8,r5
    b508:	19002426 	beq	r3,r4,b59c <__adddf3+0x89c>
    b50c:	01001004 	movi	r4,64
    b510:	20c7c83a 	sub	r3,r4,r3
    b514:	40c6983a 	sll	r3,r8,r3
    b518:	1c46b03a 	or	r3,r3,r17
    b51c:	1806c03a 	cmpne	r3,r3,zero
    b520:	28e2b03a 	or	r17,r5,r3
    b524:	0007883a 	mov	r3,zero
    b528:	003f2306 	br	b1b8 <__ram_exceptions_end+0xfbfeaf64>
    b52c:	0007883a 	mov	r3,zero
    b530:	5811883a 	mov	r8,r11
    b534:	00bfffc4 	movi	r2,-1
    b538:	0401ffc4 	movi	r16,2047
    b53c:	003e7806 	br	af20 <__ram_exceptions_end+0xfbfeaccc>
    b540:	4462b03a 	or	r17,r8,r17
    b544:	8822c03a 	cmpne	r17,r17,zero
    b548:	0009883a 	mov	r4,zero
    b54c:	003fa006 	br	b3d0 <__ram_exceptions_end+0xfbfeb17c>
    b550:	4811883a 	mov	r8,r9
    b554:	3023883a 	mov	r17,r6
    b558:	0401ffc4 	movi	r16,2047
    b55c:	003e0706 	br	ad7c <__ram_exceptions_end+0xfbfeab28>
    b560:	4811883a 	mov	r8,r9
    b564:	3023883a 	mov	r17,r6
    b568:	003e0406 	br	ad7c <__ram_exceptions_end+0xfbfeab28>
    b56c:	21fff804 	addi	r7,r4,-32
    b570:	01400804 	movi	r5,32
    b574:	41ced83a 	srl	r7,r8,r7
    b578:	21400a26 	beq	r4,r5,b5a4 <__adddf3+0x8a4>
    b57c:	01401004 	movi	r5,64
    b580:	2909c83a 	sub	r4,r5,r4
    b584:	4108983a 	sll	r4,r8,r4
    b588:	2448b03a 	or	r4,r4,r17
    b58c:	2008c03a 	cmpne	r4,r4,zero
    b590:	3922b03a 	or	r17,r7,r4
    b594:	0009883a 	mov	r4,zero
    b598:	003f8d06 	br	b3d0 <__ram_exceptions_end+0xfbfeb17c>
    b59c:	0007883a 	mov	r3,zero
    b5a0:	003fdd06 	br	b518 <__ram_exceptions_end+0xfbfeb2c4>
    b5a4:	0009883a 	mov	r4,zero
    b5a8:	003ff706 	br	b588 <__ram_exceptions_end+0xfbfeb334>

0000b5ac <__divdf3>:
    b5ac:	defff204 	addi	sp,sp,-56
    b5b0:	dd400915 	stw	r21,36(sp)
    b5b4:	282ad53a 	srli	r21,r5,20
    b5b8:	dd000815 	stw	r20,32(sp)
    b5bc:	2828d7fa 	srli	r20,r5,31
    b5c0:	dc000415 	stw	r16,16(sp)
    b5c4:	04000434 	movhi	r16,16
    b5c8:	df000c15 	stw	fp,48(sp)
    b5cc:	843fffc4 	addi	r16,r16,-1
    b5d0:	dfc00d15 	stw	ra,52(sp)
    b5d4:	ddc00b15 	stw	r23,44(sp)
    b5d8:	dd800a15 	stw	r22,40(sp)
    b5dc:	dcc00715 	stw	r19,28(sp)
    b5e0:	dc800615 	stw	r18,24(sp)
    b5e4:	dc400515 	stw	r17,20(sp)
    b5e8:	ad41ffcc 	andi	r21,r21,2047
    b5ec:	2c20703a 	and	r16,r5,r16
    b5f0:	a7003fcc 	andi	fp,r20,255
    b5f4:	a8006126 	beq	r21,zero,b77c <__divdf3+0x1d0>
    b5f8:	0081ffc4 	movi	r2,2047
    b5fc:	2025883a 	mov	r18,r4
    b600:	a8803726 	beq	r21,r2,b6e0 <__divdf3+0x134>
    b604:	80800434 	orhi	r2,r16,16
    b608:	100490fa 	slli	r2,r2,3
    b60c:	2020d77a 	srli	r16,r4,29
    b610:	202490fa 	slli	r18,r4,3
    b614:	ad7f0044 	addi	r21,r21,-1023
    b618:	80a0b03a 	or	r16,r16,r2
    b61c:	0027883a 	mov	r19,zero
    b620:	0013883a 	mov	r9,zero
    b624:	3804d53a 	srli	r2,r7,20
    b628:	382cd7fa 	srli	r22,r7,31
    b62c:	04400434 	movhi	r17,16
    b630:	8c7fffc4 	addi	r17,r17,-1
    b634:	1081ffcc 	andi	r2,r2,2047
    b638:	3011883a 	mov	r8,r6
    b63c:	3c62703a 	and	r17,r7,r17
    b640:	b5c03fcc 	andi	r23,r22,255
    b644:	10006c26 	beq	r2,zero,b7f8 <__divdf3+0x24c>
    b648:	00c1ffc4 	movi	r3,2047
    b64c:	10c06426 	beq	r2,r3,b7e0 <__divdf3+0x234>
    b650:	88c00434 	orhi	r3,r17,16
    b654:	180690fa 	slli	r3,r3,3
    b658:	3022d77a 	srli	r17,r6,29
    b65c:	301090fa 	slli	r8,r6,3
    b660:	10bf0044 	addi	r2,r2,-1023
    b664:	88e2b03a 	or	r17,r17,r3
    b668:	000f883a 	mov	r7,zero
    b66c:	a58cf03a 	xor	r6,r20,r22
    b670:	3cc8b03a 	or	r4,r7,r19
    b674:	a8abc83a 	sub	r21,r21,r2
    b678:	008003c4 	movi	r2,15
    b67c:	3007883a 	mov	r3,r6
    b680:	34c03fcc 	andi	r19,r6,255
    b684:	11009036 	bltu	r2,r4,b8c8 <__divdf3+0x31c>
    b688:	200890ba 	slli	r4,r4,2
    b68c:	00800074 	movhi	r2,1
    b690:	10ada804 	addi	r2,r2,-18784
    b694:	2089883a 	add	r4,r4,r2
    b698:	20800017 	ldw	r2,0(r4)
    b69c:	1000683a 	jmp	r2
    b6a0:	0000b8c8 	cmpgei	zero,zero,739
    b6a4:	0000b718 	cmpnei	zero,zero,732
    b6a8:	0000b8b8 	rdprs	zero,zero,738
    b6ac:	0000b70c 	andi	zero,zero,732
    b6b0:	0000b8b8 	rdprs	zero,zero,738
    b6b4:	0000b88c 	andi	zero,zero,738
    b6b8:	0000b8b8 	rdprs	zero,zero,738
    b6bc:	0000b70c 	andi	zero,zero,732
    b6c0:	0000b718 	cmpnei	zero,zero,732
    b6c4:	0000b718 	cmpnei	zero,zero,732
    b6c8:	0000b88c 	andi	zero,zero,738
    b6cc:	0000b70c 	andi	zero,zero,732
    b6d0:	0000b6fc 	xorhi	zero,zero,731
    b6d4:	0000b6fc 	xorhi	zero,zero,731
    b6d8:	0000b6fc 	xorhi	zero,zero,731
    b6dc:	0000bbac 	andhi	zero,zero,750
    b6e0:	2404b03a 	or	r2,r4,r16
    b6e4:	1000661e 	bne	r2,zero,b880 <__divdf3+0x2d4>
    b6e8:	04c00204 	movi	r19,8
    b6ec:	0021883a 	mov	r16,zero
    b6f0:	0025883a 	mov	r18,zero
    b6f4:	02400084 	movi	r9,2
    b6f8:	003fca06 	br	b624 <__ram_exceptions_end+0xfbfeb3d0>
    b6fc:	8023883a 	mov	r17,r16
    b700:	9011883a 	mov	r8,r18
    b704:	e02f883a 	mov	r23,fp
    b708:	480f883a 	mov	r7,r9
    b70c:	00800084 	movi	r2,2
    b710:	3881311e 	bne	r7,r2,bbd8 <__divdf3+0x62c>
    b714:	b827883a 	mov	r19,r23
    b718:	98c0004c 	andi	r3,r19,1
    b71c:	0081ffc4 	movi	r2,2047
    b720:	000b883a 	mov	r5,zero
    b724:	0025883a 	mov	r18,zero
    b728:	1004953a 	slli	r2,r2,20
    b72c:	18c03fcc 	andi	r3,r3,255
    b730:	04400434 	movhi	r17,16
    b734:	8c7fffc4 	addi	r17,r17,-1
    b738:	180697fa 	slli	r3,r3,31
    b73c:	2c4a703a 	and	r5,r5,r17
    b740:	288ab03a 	or	r5,r5,r2
    b744:	28c6b03a 	or	r3,r5,r3
    b748:	9005883a 	mov	r2,r18
    b74c:	dfc00d17 	ldw	ra,52(sp)
    b750:	df000c17 	ldw	fp,48(sp)
    b754:	ddc00b17 	ldw	r23,44(sp)
    b758:	dd800a17 	ldw	r22,40(sp)
    b75c:	dd400917 	ldw	r21,36(sp)
    b760:	dd000817 	ldw	r20,32(sp)
    b764:	dcc00717 	ldw	r19,28(sp)
    b768:	dc800617 	ldw	r18,24(sp)
    b76c:	dc400517 	ldw	r17,20(sp)
    b770:	dc000417 	ldw	r16,16(sp)
    b774:	dec00e04 	addi	sp,sp,56
    b778:	f800283a 	ret
    b77c:	2404b03a 	or	r2,r4,r16
    b780:	2027883a 	mov	r19,r4
    b784:	10003926 	beq	r2,zero,b86c <__divdf3+0x2c0>
    b788:	80012e26 	beq	r16,zero,bc44 <__divdf3+0x698>
    b78c:	8009883a 	mov	r4,r16
    b790:	d9800315 	stw	r6,12(sp)
    b794:	d9c00215 	stw	r7,8(sp)
    b798:	000d3040 	call	d304 <__clzsi2>
    b79c:	d9800317 	ldw	r6,12(sp)
    b7a0:	d9c00217 	ldw	r7,8(sp)
    b7a4:	113ffd44 	addi	r4,r2,-11
    b7a8:	00c00704 	movi	r3,28
    b7ac:	19012116 	blt	r3,r4,bc34 <__divdf3+0x688>
    b7b0:	00c00744 	movi	r3,29
    b7b4:	147ffe04 	addi	r17,r2,-8
    b7b8:	1907c83a 	sub	r3,r3,r4
    b7bc:	8460983a 	sll	r16,r16,r17
    b7c0:	98c6d83a 	srl	r3,r19,r3
    b7c4:	9c64983a 	sll	r18,r19,r17
    b7c8:	1c20b03a 	or	r16,r3,r16
    b7cc:	1080fcc4 	addi	r2,r2,1011
    b7d0:	00abc83a 	sub	r21,zero,r2
    b7d4:	0027883a 	mov	r19,zero
    b7d8:	0013883a 	mov	r9,zero
    b7dc:	003f9106 	br	b624 <__ram_exceptions_end+0xfbfeb3d0>
    b7e0:	3446b03a 	or	r3,r6,r17
    b7e4:	18001f1e 	bne	r3,zero,b864 <__divdf3+0x2b8>
    b7e8:	0023883a 	mov	r17,zero
    b7ec:	0011883a 	mov	r8,zero
    b7f0:	01c00084 	movi	r7,2
    b7f4:	003f9d06 	br	b66c <__ram_exceptions_end+0xfbfeb418>
    b7f8:	3446b03a 	or	r3,r6,r17
    b7fc:	18001526 	beq	r3,zero,b854 <__divdf3+0x2a8>
    b800:	88011b26 	beq	r17,zero,bc70 <__divdf3+0x6c4>
    b804:	8809883a 	mov	r4,r17
    b808:	d9800315 	stw	r6,12(sp)
    b80c:	da400115 	stw	r9,4(sp)
    b810:	000d3040 	call	d304 <__clzsi2>
    b814:	d9800317 	ldw	r6,12(sp)
    b818:	da400117 	ldw	r9,4(sp)
    b81c:	113ffd44 	addi	r4,r2,-11
    b820:	00c00704 	movi	r3,28
    b824:	19010e16 	blt	r3,r4,bc60 <__divdf3+0x6b4>
    b828:	00c00744 	movi	r3,29
    b82c:	123ffe04 	addi	r8,r2,-8
    b830:	1907c83a 	sub	r3,r3,r4
    b834:	8a22983a 	sll	r17,r17,r8
    b838:	30c6d83a 	srl	r3,r6,r3
    b83c:	3210983a 	sll	r8,r6,r8
    b840:	1c62b03a 	or	r17,r3,r17
    b844:	1080fcc4 	addi	r2,r2,1011
    b848:	0085c83a 	sub	r2,zero,r2
    b84c:	000f883a 	mov	r7,zero
    b850:	003f8606 	br	b66c <__ram_exceptions_end+0xfbfeb418>
    b854:	0023883a 	mov	r17,zero
    b858:	0011883a 	mov	r8,zero
    b85c:	01c00044 	movi	r7,1
    b860:	003f8206 	br	b66c <__ram_exceptions_end+0xfbfeb418>
    b864:	01c000c4 	movi	r7,3
    b868:	003f8006 	br	b66c <__ram_exceptions_end+0xfbfeb418>
    b86c:	04c00104 	movi	r19,4
    b870:	0021883a 	mov	r16,zero
    b874:	0025883a 	mov	r18,zero
    b878:	02400044 	movi	r9,1
    b87c:	003f6906 	br	b624 <__ram_exceptions_end+0xfbfeb3d0>
    b880:	04c00304 	movi	r19,12
    b884:	024000c4 	movi	r9,3
    b888:	003f6606 	br	b624 <__ram_exceptions_end+0xfbfeb3d0>
    b88c:	01400434 	movhi	r5,16
    b890:	0007883a 	mov	r3,zero
    b894:	297fffc4 	addi	r5,r5,-1
    b898:	04bfffc4 	movi	r18,-1
    b89c:	0081ffc4 	movi	r2,2047
    b8a0:	003fa106 	br	b728 <__ram_exceptions_end+0xfbfeb4d4>
    b8a4:	00c00044 	movi	r3,1
    b8a8:	1887c83a 	sub	r3,r3,r2
    b8ac:	01000e04 	movi	r4,56
    b8b0:	20c1210e 	bge	r4,r3,bd38 <__divdf3+0x78c>
    b8b4:	98c0004c 	andi	r3,r19,1
    b8b8:	0005883a 	mov	r2,zero
    b8bc:	000b883a 	mov	r5,zero
    b8c0:	0025883a 	mov	r18,zero
    b8c4:	003f9806 	br	b728 <__ram_exceptions_end+0xfbfeb4d4>
    b8c8:	8c00fd36 	bltu	r17,r16,bcc0 <__divdf3+0x714>
    b8cc:	8440fb26 	beq	r16,r17,bcbc <__divdf3+0x710>
    b8d0:	8007883a 	mov	r3,r16
    b8d4:	ad7fffc4 	addi	r21,r21,-1
    b8d8:	0021883a 	mov	r16,zero
    b8dc:	4004d63a 	srli	r2,r8,24
    b8e0:	8822923a 	slli	r17,r17,8
    b8e4:	1809883a 	mov	r4,r3
    b8e8:	402c923a 	slli	r22,r8,8
    b8ec:	88b8b03a 	or	fp,r17,r2
    b8f0:	e028d43a 	srli	r20,fp,16
    b8f4:	d8c00015 	stw	r3,0(sp)
    b8f8:	e5ffffcc 	andi	r23,fp,65535
    b8fc:	a00b883a 	mov	r5,r20
    b900:	0000c140 	call	c14 <__udivsi3>
    b904:	d8c00017 	ldw	r3,0(sp)
    b908:	a00b883a 	mov	r5,r20
    b90c:	d8800315 	stw	r2,12(sp)
    b910:	1809883a 	mov	r4,r3
    b914:	0000c780 	call	c78 <__umodsi3>
    b918:	d9800317 	ldw	r6,12(sp)
    b91c:	1006943a 	slli	r3,r2,16
    b920:	9004d43a 	srli	r2,r18,16
    b924:	b9a3383a 	mul	r17,r23,r6
    b928:	10c4b03a 	or	r2,r2,r3
    b92c:	1440062e 	bgeu	r2,r17,b948 <__divdf3+0x39c>
    b930:	1705883a 	add	r2,r2,fp
    b934:	30ffffc4 	addi	r3,r6,-1
    b938:	1700ee36 	bltu	r2,fp,bcf4 <__divdf3+0x748>
    b93c:	1440ed2e 	bgeu	r2,r17,bcf4 <__divdf3+0x748>
    b940:	31bfff84 	addi	r6,r6,-2
    b944:	1705883a 	add	r2,r2,fp
    b948:	1463c83a 	sub	r17,r2,r17
    b94c:	a00b883a 	mov	r5,r20
    b950:	8809883a 	mov	r4,r17
    b954:	d9800315 	stw	r6,12(sp)
    b958:	0000c140 	call	c14 <__udivsi3>
    b95c:	a00b883a 	mov	r5,r20
    b960:	8809883a 	mov	r4,r17
    b964:	d8800215 	stw	r2,8(sp)
    b968:	0000c780 	call	c78 <__umodsi3>
    b96c:	d9c00217 	ldw	r7,8(sp)
    b970:	1004943a 	slli	r2,r2,16
    b974:	94bfffcc 	andi	r18,r18,65535
    b978:	b9d1383a 	mul	r8,r23,r7
    b97c:	90a4b03a 	or	r18,r18,r2
    b980:	d9800317 	ldw	r6,12(sp)
    b984:	9200062e 	bgeu	r18,r8,b9a0 <__divdf3+0x3f4>
    b988:	9725883a 	add	r18,r18,fp
    b98c:	38bfffc4 	addi	r2,r7,-1
    b990:	9700d636 	bltu	r18,fp,bcec <__divdf3+0x740>
    b994:	9200d52e 	bgeu	r18,r8,bcec <__divdf3+0x740>
    b998:	39ffff84 	addi	r7,r7,-2
    b99c:	9725883a 	add	r18,r18,fp
    b9a0:	3004943a 	slli	r2,r6,16
    b9a4:	b012d43a 	srli	r9,r22,16
    b9a8:	b1bfffcc 	andi	r6,r22,65535
    b9ac:	11e2b03a 	or	r17,r2,r7
    b9b0:	8806d43a 	srli	r3,r17,16
    b9b4:	893fffcc 	andi	r4,r17,65535
    b9b8:	218b383a 	mul	r5,r4,r6
    b9bc:	30c5383a 	mul	r2,r6,r3
    b9c0:	2249383a 	mul	r4,r4,r9
    b9c4:	280ed43a 	srli	r7,r5,16
    b9c8:	9225c83a 	sub	r18,r18,r8
    b9cc:	2089883a 	add	r4,r4,r2
    b9d0:	3909883a 	add	r4,r7,r4
    b9d4:	1a47383a 	mul	r3,r3,r9
    b9d8:	2080022e 	bgeu	r4,r2,b9e4 <__divdf3+0x438>
    b9dc:	00800074 	movhi	r2,1
    b9e0:	1887883a 	add	r3,r3,r2
    b9e4:	2004d43a 	srli	r2,r4,16
    b9e8:	2008943a 	slli	r4,r4,16
    b9ec:	297fffcc 	andi	r5,r5,65535
    b9f0:	10c7883a 	add	r3,r2,r3
    b9f4:	2149883a 	add	r4,r4,r5
    b9f8:	90c0a536 	bltu	r18,r3,bc90 <__divdf3+0x6e4>
    b9fc:	90c0bf26 	beq	r18,r3,bcfc <__divdf3+0x750>
    ba00:	90c7c83a 	sub	r3,r18,r3
    ba04:	810fc83a 	sub	r7,r16,r4
    ba08:	81e5803a 	cmpltu	r18,r16,r7
    ba0c:	1ca5c83a 	sub	r18,r3,r18
    ba10:	e480c126 	beq	fp,r18,bd18 <__divdf3+0x76c>
    ba14:	a00b883a 	mov	r5,r20
    ba18:	9009883a 	mov	r4,r18
    ba1c:	d9800315 	stw	r6,12(sp)
    ba20:	d9c00215 	stw	r7,8(sp)
    ba24:	da400115 	stw	r9,4(sp)
    ba28:	0000c140 	call	c14 <__udivsi3>
    ba2c:	a00b883a 	mov	r5,r20
    ba30:	9009883a 	mov	r4,r18
    ba34:	d8800015 	stw	r2,0(sp)
    ba38:	0000c780 	call	c78 <__umodsi3>
    ba3c:	d9c00217 	ldw	r7,8(sp)
    ba40:	da000017 	ldw	r8,0(sp)
    ba44:	1006943a 	slli	r3,r2,16
    ba48:	3804d43a 	srli	r2,r7,16
    ba4c:	ba21383a 	mul	r16,r23,r8
    ba50:	d9800317 	ldw	r6,12(sp)
    ba54:	10c4b03a 	or	r2,r2,r3
    ba58:	da400117 	ldw	r9,4(sp)
    ba5c:	1400062e 	bgeu	r2,r16,ba78 <__divdf3+0x4cc>
    ba60:	1705883a 	add	r2,r2,fp
    ba64:	40ffffc4 	addi	r3,r8,-1
    ba68:	1700ad36 	bltu	r2,fp,bd20 <__divdf3+0x774>
    ba6c:	1400ac2e 	bgeu	r2,r16,bd20 <__divdf3+0x774>
    ba70:	423fff84 	addi	r8,r8,-2
    ba74:	1705883a 	add	r2,r2,fp
    ba78:	1421c83a 	sub	r16,r2,r16
    ba7c:	a00b883a 	mov	r5,r20
    ba80:	8009883a 	mov	r4,r16
    ba84:	d9800315 	stw	r6,12(sp)
    ba88:	d9c00215 	stw	r7,8(sp)
    ba8c:	da000015 	stw	r8,0(sp)
    ba90:	da400115 	stw	r9,4(sp)
    ba94:	0000c140 	call	c14 <__udivsi3>
    ba98:	8009883a 	mov	r4,r16
    ba9c:	a00b883a 	mov	r5,r20
    baa0:	1025883a 	mov	r18,r2
    baa4:	0000c780 	call	c78 <__umodsi3>
    baa8:	d9c00217 	ldw	r7,8(sp)
    baac:	1004943a 	slli	r2,r2,16
    bab0:	bcaf383a 	mul	r23,r23,r18
    bab4:	393fffcc 	andi	r4,r7,65535
    bab8:	2088b03a 	or	r4,r4,r2
    babc:	d9800317 	ldw	r6,12(sp)
    bac0:	da000017 	ldw	r8,0(sp)
    bac4:	da400117 	ldw	r9,4(sp)
    bac8:	25c0062e 	bgeu	r4,r23,bae4 <__divdf3+0x538>
    bacc:	2709883a 	add	r4,r4,fp
    bad0:	90bfffc4 	addi	r2,r18,-1
    bad4:	27009436 	bltu	r4,fp,bd28 <__divdf3+0x77c>
    bad8:	25c0932e 	bgeu	r4,r23,bd28 <__divdf3+0x77c>
    badc:	94bfff84 	addi	r18,r18,-2
    bae0:	2709883a 	add	r4,r4,fp
    bae4:	4004943a 	slli	r2,r8,16
    bae8:	25efc83a 	sub	r23,r4,r23
    baec:	1490b03a 	or	r8,r2,r18
    baf0:	4008d43a 	srli	r4,r8,16
    baf4:	40ffffcc 	andi	r3,r8,65535
    baf8:	30c5383a 	mul	r2,r6,r3
    bafc:	1a47383a 	mul	r3,r3,r9
    bb00:	310d383a 	mul	r6,r6,r4
    bb04:	100ad43a 	srli	r5,r2,16
    bb08:	4913383a 	mul	r9,r9,r4
    bb0c:	1987883a 	add	r3,r3,r6
    bb10:	28c7883a 	add	r3,r5,r3
    bb14:	1980022e 	bgeu	r3,r6,bb20 <__divdf3+0x574>
    bb18:	01000074 	movhi	r4,1
    bb1c:	4913883a 	add	r9,r9,r4
    bb20:	1808d43a 	srli	r4,r3,16
    bb24:	1806943a 	slli	r3,r3,16
    bb28:	10bfffcc 	andi	r2,r2,65535
    bb2c:	2253883a 	add	r9,r4,r9
    bb30:	1887883a 	add	r3,r3,r2
    bb34:	ba403836 	bltu	r23,r9,bc18 <__divdf3+0x66c>
    bb38:	ba403626 	beq	r23,r9,bc14 <__divdf3+0x668>
    bb3c:	42000054 	ori	r8,r8,1
    bb40:	a880ffc4 	addi	r2,r21,1023
    bb44:	00bf570e 	bge	zero,r2,b8a4 <__ram_exceptions_end+0xfbfeb650>
    bb48:	40c001cc 	andi	r3,r8,7
    bb4c:	18000726 	beq	r3,zero,bb6c <__divdf3+0x5c0>
    bb50:	40c003cc 	andi	r3,r8,15
    bb54:	01000104 	movi	r4,4
    bb58:	19000426 	beq	r3,r4,bb6c <__divdf3+0x5c0>
    bb5c:	4107883a 	add	r3,r8,r4
    bb60:	1a11803a 	cmpltu	r8,r3,r8
    bb64:	8a23883a 	add	r17,r17,r8
    bb68:	1811883a 	mov	r8,r3
    bb6c:	88c0402c 	andhi	r3,r17,256
    bb70:	18000426 	beq	r3,zero,bb84 <__divdf3+0x5d8>
    bb74:	00ffc034 	movhi	r3,65280
    bb78:	18ffffc4 	addi	r3,r3,-1
    bb7c:	a8810004 	addi	r2,r21,1024
    bb80:	88e2703a 	and	r17,r17,r3
    bb84:	00c1ff84 	movi	r3,2046
    bb88:	18bee316 	blt	r3,r2,b718 <__ram_exceptions_end+0xfbfeb4c4>
    bb8c:	8824977a 	slli	r18,r17,29
    bb90:	4010d0fa 	srli	r8,r8,3
    bb94:	8822927a 	slli	r17,r17,9
    bb98:	1081ffcc 	andi	r2,r2,2047
    bb9c:	9224b03a 	or	r18,r18,r8
    bba0:	880ad33a 	srli	r5,r17,12
    bba4:	98c0004c 	andi	r3,r19,1
    bba8:	003edf06 	br	b728 <__ram_exceptions_end+0xfbfeb4d4>
    bbac:	8080022c 	andhi	r2,r16,8
    bbb0:	10001226 	beq	r2,zero,bbfc <__divdf3+0x650>
    bbb4:	8880022c 	andhi	r2,r17,8
    bbb8:	1000101e 	bne	r2,zero,bbfc <__divdf3+0x650>
    bbbc:	00800434 	movhi	r2,16
    bbc0:	89400234 	orhi	r5,r17,8
    bbc4:	10bfffc4 	addi	r2,r2,-1
    bbc8:	b007883a 	mov	r3,r22
    bbcc:	288a703a 	and	r5,r5,r2
    bbd0:	4025883a 	mov	r18,r8
    bbd4:	003f3106 	br	b89c <__ram_exceptions_end+0xfbfeb648>
    bbd8:	008000c4 	movi	r2,3
    bbdc:	3880a626 	beq	r7,r2,be78 <__divdf3+0x8cc>
    bbe0:	00800044 	movi	r2,1
    bbe4:	3880521e 	bne	r7,r2,bd30 <__divdf3+0x784>
    bbe8:	b807883a 	mov	r3,r23
    bbec:	0005883a 	mov	r2,zero
    bbf0:	000b883a 	mov	r5,zero
    bbf4:	0025883a 	mov	r18,zero
    bbf8:	003ecb06 	br	b728 <__ram_exceptions_end+0xfbfeb4d4>
    bbfc:	00800434 	movhi	r2,16
    bc00:	81400234 	orhi	r5,r16,8
    bc04:	10bfffc4 	addi	r2,r2,-1
    bc08:	a007883a 	mov	r3,r20
    bc0c:	288a703a 	and	r5,r5,r2
    bc10:	003f2206 	br	b89c <__ram_exceptions_end+0xfbfeb648>
    bc14:	183fca26 	beq	r3,zero,bb40 <__ram_exceptions_end+0xfbfeb8ec>
    bc18:	e5ef883a 	add	r23,fp,r23
    bc1c:	40bfffc4 	addi	r2,r8,-1
    bc20:	bf00392e 	bgeu	r23,fp,bd08 <__divdf3+0x75c>
    bc24:	1011883a 	mov	r8,r2
    bc28:	ba7fc41e 	bne	r23,r9,bb3c <__ram_exceptions_end+0xfbfeb8e8>
    bc2c:	b0ffc31e 	bne	r22,r3,bb3c <__ram_exceptions_end+0xfbfeb8e8>
    bc30:	003fc306 	br	bb40 <__ram_exceptions_end+0xfbfeb8ec>
    bc34:	143ff604 	addi	r16,r2,-40
    bc38:	9c20983a 	sll	r16,r19,r16
    bc3c:	0025883a 	mov	r18,zero
    bc40:	003ee206 	br	b7cc <__ram_exceptions_end+0xfbfeb578>
    bc44:	d9800315 	stw	r6,12(sp)
    bc48:	d9c00215 	stw	r7,8(sp)
    bc4c:	000d3040 	call	d304 <__clzsi2>
    bc50:	10800804 	addi	r2,r2,32
    bc54:	d9c00217 	ldw	r7,8(sp)
    bc58:	d9800317 	ldw	r6,12(sp)
    bc5c:	003ed106 	br	b7a4 <__ram_exceptions_end+0xfbfeb550>
    bc60:	147ff604 	addi	r17,r2,-40
    bc64:	3462983a 	sll	r17,r6,r17
    bc68:	0011883a 	mov	r8,zero
    bc6c:	003ef506 	br	b844 <__ram_exceptions_end+0xfbfeb5f0>
    bc70:	3009883a 	mov	r4,r6
    bc74:	d9800315 	stw	r6,12(sp)
    bc78:	da400115 	stw	r9,4(sp)
    bc7c:	000d3040 	call	d304 <__clzsi2>
    bc80:	10800804 	addi	r2,r2,32
    bc84:	da400117 	ldw	r9,4(sp)
    bc88:	d9800317 	ldw	r6,12(sp)
    bc8c:	003ee306 	br	b81c <__ram_exceptions_end+0xfbfeb5c8>
    bc90:	85a1883a 	add	r16,r16,r22
    bc94:	8585803a 	cmpltu	r2,r16,r22
    bc98:	1705883a 	add	r2,r2,fp
    bc9c:	14a5883a 	add	r18,r2,r18
    bca0:	88bfffc4 	addi	r2,r17,-1
    bca4:	e4800c2e 	bgeu	fp,r18,bcd8 <__divdf3+0x72c>
    bca8:	90c03e36 	bltu	r18,r3,bda4 <__divdf3+0x7f8>
    bcac:	1c806926 	beq	r3,r18,be54 <__divdf3+0x8a8>
    bcb0:	90c7c83a 	sub	r3,r18,r3
    bcb4:	1023883a 	mov	r17,r2
    bcb8:	003f5206 	br	ba04 <__ram_exceptions_end+0xfbfeb7b0>
    bcbc:	923f0436 	bltu	r18,r8,b8d0 <__ram_exceptions_end+0xfbfeb67c>
    bcc0:	800897fa 	slli	r4,r16,31
    bcc4:	9004d07a 	srli	r2,r18,1
    bcc8:	8006d07a 	srli	r3,r16,1
    bccc:	902097fa 	slli	r16,r18,31
    bcd0:	20a4b03a 	or	r18,r4,r2
    bcd4:	003f0106 	br	b8dc <__ram_exceptions_end+0xfbfeb688>
    bcd8:	e4bff51e 	bne	fp,r18,bcb0 <__ram_exceptions_end+0xfbfeba5c>
    bcdc:	85bff22e 	bgeu	r16,r22,bca8 <__ram_exceptions_end+0xfbfeba54>
    bce0:	e0c7c83a 	sub	r3,fp,r3
    bce4:	1023883a 	mov	r17,r2
    bce8:	003f4606 	br	ba04 <__ram_exceptions_end+0xfbfeb7b0>
    bcec:	100f883a 	mov	r7,r2
    bcf0:	003f2b06 	br	b9a0 <__ram_exceptions_end+0xfbfeb74c>
    bcf4:	180d883a 	mov	r6,r3
    bcf8:	003f1306 	br	b948 <__ram_exceptions_end+0xfbfeb6f4>
    bcfc:	813fe436 	bltu	r16,r4,bc90 <__ram_exceptions_end+0xfbfeba3c>
    bd00:	0007883a 	mov	r3,zero
    bd04:	003f3f06 	br	ba04 <__ram_exceptions_end+0xfbfeb7b0>
    bd08:	ba402c36 	bltu	r23,r9,bdbc <__divdf3+0x810>
    bd0c:	4dc05426 	beq	r9,r23,be60 <__divdf3+0x8b4>
    bd10:	1011883a 	mov	r8,r2
    bd14:	003f8906 	br	bb3c <__ram_exceptions_end+0xfbfeb8e8>
    bd18:	023fffc4 	movi	r8,-1
    bd1c:	003f8806 	br	bb40 <__ram_exceptions_end+0xfbfeb8ec>
    bd20:	1811883a 	mov	r8,r3
    bd24:	003f5406 	br	ba78 <__ram_exceptions_end+0xfbfeb824>
    bd28:	1025883a 	mov	r18,r2
    bd2c:	003f6d06 	br	bae4 <__ram_exceptions_end+0xfbfeb890>
    bd30:	b827883a 	mov	r19,r23
    bd34:	003f8206 	br	bb40 <__ram_exceptions_end+0xfbfeb8ec>
    bd38:	010007c4 	movi	r4,31
    bd3c:	20c02616 	blt	r4,r3,bdd8 <__divdf3+0x82c>
    bd40:	00800804 	movi	r2,32
    bd44:	10c5c83a 	sub	r2,r2,r3
    bd48:	888a983a 	sll	r5,r17,r2
    bd4c:	40c8d83a 	srl	r4,r8,r3
    bd50:	4084983a 	sll	r2,r8,r2
    bd54:	88e2d83a 	srl	r17,r17,r3
    bd58:	2906b03a 	or	r3,r5,r4
    bd5c:	1004c03a 	cmpne	r2,r2,zero
    bd60:	1886b03a 	or	r3,r3,r2
    bd64:	188001cc 	andi	r2,r3,7
    bd68:	10000726 	beq	r2,zero,bd88 <__divdf3+0x7dc>
    bd6c:	188003cc 	andi	r2,r3,15
    bd70:	01000104 	movi	r4,4
    bd74:	11000426 	beq	r2,r4,bd88 <__divdf3+0x7dc>
    bd78:	1805883a 	mov	r2,r3
    bd7c:	10c00104 	addi	r3,r2,4
    bd80:	1885803a 	cmpltu	r2,r3,r2
    bd84:	88a3883a 	add	r17,r17,r2
    bd88:	8880202c 	andhi	r2,r17,128
    bd8c:	10002726 	beq	r2,zero,be2c <__divdf3+0x880>
    bd90:	98c0004c 	andi	r3,r19,1
    bd94:	00800044 	movi	r2,1
    bd98:	000b883a 	mov	r5,zero
    bd9c:	0025883a 	mov	r18,zero
    bda0:	003e6106 	br	b728 <__ram_exceptions_end+0xfbfeb4d4>
    bda4:	85a1883a 	add	r16,r16,r22
    bda8:	8585803a 	cmpltu	r2,r16,r22
    bdac:	1705883a 	add	r2,r2,fp
    bdb0:	14a5883a 	add	r18,r2,r18
    bdb4:	8c7fff84 	addi	r17,r17,-2
    bdb8:	003f1106 	br	ba00 <__ram_exceptions_end+0xfbfeb7ac>
    bdbc:	b589883a 	add	r4,r22,r22
    bdc0:	25ad803a 	cmpltu	r22,r4,r22
    bdc4:	b739883a 	add	fp,r22,fp
    bdc8:	40bfff84 	addi	r2,r8,-2
    bdcc:	bf2f883a 	add	r23,r23,fp
    bdd0:	202d883a 	mov	r22,r4
    bdd4:	003f9306 	br	bc24 <__ram_exceptions_end+0xfbfeb9d0>
    bdd8:	013ff844 	movi	r4,-31
    bddc:	2085c83a 	sub	r2,r4,r2
    bde0:	8888d83a 	srl	r4,r17,r2
    bde4:	00800804 	movi	r2,32
    bde8:	18802126 	beq	r3,r2,be70 <__divdf3+0x8c4>
    bdec:	00801004 	movi	r2,64
    bdf0:	10c5c83a 	sub	r2,r2,r3
    bdf4:	8884983a 	sll	r2,r17,r2
    bdf8:	1204b03a 	or	r2,r2,r8
    bdfc:	1004c03a 	cmpne	r2,r2,zero
    be00:	2084b03a 	or	r2,r4,r2
    be04:	144001cc 	andi	r17,r2,7
    be08:	88000d1e 	bne	r17,zero,be40 <__divdf3+0x894>
    be0c:	000b883a 	mov	r5,zero
    be10:	1024d0fa 	srli	r18,r2,3
    be14:	98c0004c 	andi	r3,r19,1
    be18:	0005883a 	mov	r2,zero
    be1c:	9464b03a 	or	r18,r18,r17
    be20:	003e4106 	br	b728 <__ram_exceptions_end+0xfbfeb4d4>
    be24:	1007883a 	mov	r3,r2
    be28:	0023883a 	mov	r17,zero
    be2c:	880a927a 	slli	r5,r17,9
    be30:	1805883a 	mov	r2,r3
    be34:	8822977a 	slli	r17,r17,29
    be38:	280ad33a 	srli	r5,r5,12
    be3c:	003ff406 	br	be10 <__ram_exceptions_end+0xfbfebbbc>
    be40:	10c003cc 	andi	r3,r2,15
    be44:	01000104 	movi	r4,4
    be48:	193ff626 	beq	r3,r4,be24 <__ram_exceptions_end+0xfbfebbd0>
    be4c:	0023883a 	mov	r17,zero
    be50:	003fca06 	br	bd7c <__ram_exceptions_end+0xfbfebb28>
    be54:	813fd336 	bltu	r16,r4,bda4 <__ram_exceptions_end+0xfbfebb50>
    be58:	1023883a 	mov	r17,r2
    be5c:	003fa806 	br	bd00 <__ram_exceptions_end+0xfbfebaac>
    be60:	b0ffd636 	bltu	r22,r3,bdbc <__ram_exceptions_end+0xfbfebb68>
    be64:	1011883a 	mov	r8,r2
    be68:	b0ff341e 	bne	r22,r3,bb3c <__ram_exceptions_end+0xfbfeb8e8>
    be6c:	003f3406 	br	bb40 <__ram_exceptions_end+0xfbfeb8ec>
    be70:	0005883a 	mov	r2,zero
    be74:	003fe006 	br	bdf8 <__ram_exceptions_end+0xfbfebba4>
    be78:	00800434 	movhi	r2,16
    be7c:	89400234 	orhi	r5,r17,8
    be80:	10bfffc4 	addi	r2,r2,-1
    be84:	b807883a 	mov	r3,r23
    be88:	288a703a 	and	r5,r5,r2
    be8c:	4025883a 	mov	r18,r8
    be90:	003e8206 	br	b89c <__ram_exceptions_end+0xfbfeb648>

0000be94 <__eqdf2>:
    be94:	2804d53a 	srli	r2,r5,20
    be98:	3806d53a 	srli	r3,r7,20
    be9c:	02000434 	movhi	r8,16
    bea0:	423fffc4 	addi	r8,r8,-1
    bea4:	1081ffcc 	andi	r2,r2,2047
    bea8:	0281ffc4 	movi	r10,2047
    beac:	2a12703a 	and	r9,r5,r8
    beb0:	18c1ffcc 	andi	r3,r3,2047
    beb4:	3a10703a 	and	r8,r7,r8
    beb8:	280ad7fa 	srli	r5,r5,31
    bebc:	380ed7fa 	srli	r7,r7,31
    bec0:	12801026 	beq	r2,r10,bf04 <__eqdf2+0x70>
    bec4:	0281ffc4 	movi	r10,2047
    bec8:	1a800a26 	beq	r3,r10,bef4 <__eqdf2+0x60>
    becc:	10c00226 	beq	r2,r3,bed8 <__eqdf2+0x44>
    bed0:	00800044 	movi	r2,1
    bed4:	f800283a 	ret
    bed8:	4a3ffd1e 	bne	r9,r8,bed0 <__ram_exceptions_end+0xfbfebc7c>
    bedc:	21bffc1e 	bne	r4,r6,bed0 <__ram_exceptions_end+0xfbfebc7c>
    bee0:	29c00c26 	beq	r5,r7,bf14 <__eqdf2+0x80>
    bee4:	103ffa1e 	bne	r2,zero,bed0 <__ram_exceptions_end+0xfbfebc7c>
    bee8:	2244b03a 	or	r2,r4,r9
    beec:	1004c03a 	cmpne	r2,r2,zero
    bef0:	f800283a 	ret
    bef4:	3214b03a 	or	r10,r6,r8
    bef8:	503ff426 	beq	r10,zero,becc <__ram_exceptions_end+0xfbfebc78>
    befc:	00800044 	movi	r2,1
    bf00:	f800283a 	ret
    bf04:	2254b03a 	or	r10,r4,r9
    bf08:	503fee26 	beq	r10,zero,bec4 <__ram_exceptions_end+0xfbfebc70>
    bf0c:	00800044 	movi	r2,1
    bf10:	f800283a 	ret
    bf14:	0005883a 	mov	r2,zero
    bf18:	f800283a 	ret

0000bf1c <__gedf2>:
    bf1c:	2804d53a 	srli	r2,r5,20
    bf20:	3806d53a 	srli	r3,r7,20
    bf24:	02000434 	movhi	r8,16
    bf28:	423fffc4 	addi	r8,r8,-1
    bf2c:	1081ffcc 	andi	r2,r2,2047
    bf30:	0241ffc4 	movi	r9,2047
    bf34:	2a14703a 	and	r10,r5,r8
    bf38:	18c1ffcc 	andi	r3,r3,2047
    bf3c:	3a10703a 	and	r8,r7,r8
    bf40:	280ad7fa 	srli	r5,r5,31
    bf44:	380ed7fa 	srli	r7,r7,31
    bf48:	12401d26 	beq	r2,r9,bfc0 <__gedf2+0xa4>
    bf4c:	0241ffc4 	movi	r9,2047
    bf50:	1a401226 	beq	r3,r9,bf9c <__gedf2+0x80>
    bf54:	1000081e 	bne	r2,zero,bf78 <__gedf2+0x5c>
    bf58:	2296b03a 	or	r11,r4,r10
    bf5c:	5813003a 	cmpeq	r9,r11,zero
    bf60:	1800091e 	bne	r3,zero,bf88 <__gedf2+0x6c>
    bf64:	3218b03a 	or	r12,r6,r8
    bf68:	6000071e 	bne	r12,zero,bf88 <__gedf2+0x6c>
    bf6c:	0005883a 	mov	r2,zero
    bf70:	5800101e 	bne	r11,zero,bfb4 <__gedf2+0x98>
    bf74:	f800283a 	ret
    bf78:	18000c1e 	bne	r3,zero,bfac <__gedf2+0x90>
    bf7c:	3212b03a 	or	r9,r6,r8
    bf80:	48000c26 	beq	r9,zero,bfb4 <__gedf2+0x98>
    bf84:	0013883a 	mov	r9,zero
    bf88:	39c03fcc 	andi	r7,r7,255
    bf8c:	48000826 	beq	r9,zero,bfb0 <__gedf2+0x94>
    bf90:	38000926 	beq	r7,zero,bfb8 <__gedf2+0x9c>
    bf94:	00800044 	movi	r2,1
    bf98:	f800283a 	ret
    bf9c:	3212b03a 	or	r9,r6,r8
    bfa0:	483fec26 	beq	r9,zero,bf54 <__ram_exceptions_end+0xfbfebd00>
    bfa4:	00bfff84 	movi	r2,-2
    bfa8:	f800283a 	ret
    bfac:	39c03fcc 	andi	r7,r7,255
    bfb0:	29c00626 	beq	r5,r7,bfcc <__gedf2+0xb0>
    bfb4:	283ff726 	beq	r5,zero,bf94 <__ram_exceptions_end+0xfbfebd40>
    bfb8:	00bfffc4 	movi	r2,-1
    bfbc:	f800283a 	ret
    bfc0:	2292b03a 	or	r9,r4,r10
    bfc4:	483fe126 	beq	r9,zero,bf4c <__ram_exceptions_end+0xfbfebcf8>
    bfc8:	003ff606 	br	bfa4 <__ram_exceptions_end+0xfbfebd50>
    bfcc:	18bff916 	blt	r3,r2,bfb4 <__ram_exceptions_end+0xfbfebd60>
    bfd0:	10c00316 	blt	r2,r3,bfe0 <__gedf2+0xc4>
    bfd4:	42bff736 	bltu	r8,r10,bfb4 <__ram_exceptions_end+0xfbfebd60>
    bfd8:	52000326 	beq	r10,r8,bfe8 <__gedf2+0xcc>
    bfdc:	5200042e 	bgeu	r10,r8,bff0 <__gedf2+0xd4>
    bfe0:	283fec1e 	bne	r5,zero,bf94 <__ram_exceptions_end+0xfbfebd40>
    bfe4:	003ff406 	br	bfb8 <__ram_exceptions_end+0xfbfebd64>
    bfe8:	313ff236 	bltu	r6,r4,bfb4 <__ram_exceptions_end+0xfbfebd60>
    bfec:	21bffc36 	bltu	r4,r6,bfe0 <__ram_exceptions_end+0xfbfebd8c>
    bff0:	0005883a 	mov	r2,zero
    bff4:	f800283a 	ret

0000bff8 <__ledf2>:
    bff8:	2804d53a 	srli	r2,r5,20
    bffc:	3810d53a 	srli	r8,r7,20
    c000:	00c00434 	movhi	r3,16
    c004:	18ffffc4 	addi	r3,r3,-1
    c008:	1081ffcc 	andi	r2,r2,2047
    c00c:	0241ffc4 	movi	r9,2047
    c010:	28d4703a 	and	r10,r5,r3
    c014:	4201ffcc 	andi	r8,r8,2047
    c018:	38c6703a 	and	r3,r7,r3
    c01c:	280ad7fa 	srli	r5,r5,31
    c020:	380ed7fa 	srli	r7,r7,31
    c024:	12401f26 	beq	r2,r9,c0a4 <__ledf2+0xac>
    c028:	0241ffc4 	movi	r9,2047
    c02c:	42401426 	beq	r8,r9,c080 <__ledf2+0x88>
    c030:	1000091e 	bne	r2,zero,c058 <__ledf2+0x60>
    c034:	2296b03a 	or	r11,r4,r10
    c038:	5813003a 	cmpeq	r9,r11,zero
    c03c:	29403fcc 	andi	r5,r5,255
    c040:	40000a1e 	bne	r8,zero,c06c <__ledf2+0x74>
    c044:	30d8b03a 	or	r12,r6,r3
    c048:	6000081e 	bne	r12,zero,c06c <__ledf2+0x74>
    c04c:	0005883a 	mov	r2,zero
    c050:	5800111e 	bne	r11,zero,c098 <__ledf2+0xa0>
    c054:	f800283a 	ret
    c058:	29403fcc 	andi	r5,r5,255
    c05c:	40000c1e 	bne	r8,zero,c090 <__ledf2+0x98>
    c060:	30d2b03a 	or	r9,r6,r3
    c064:	48000c26 	beq	r9,zero,c098 <__ledf2+0xa0>
    c068:	0013883a 	mov	r9,zero
    c06c:	39c03fcc 	andi	r7,r7,255
    c070:	48000826 	beq	r9,zero,c094 <__ledf2+0x9c>
    c074:	38001126 	beq	r7,zero,c0bc <__ledf2+0xc4>
    c078:	00800044 	movi	r2,1
    c07c:	f800283a 	ret
    c080:	30d2b03a 	or	r9,r6,r3
    c084:	483fea26 	beq	r9,zero,c030 <__ram_exceptions_end+0xfbfebddc>
    c088:	00800084 	movi	r2,2
    c08c:	f800283a 	ret
    c090:	39c03fcc 	andi	r7,r7,255
    c094:	39400726 	beq	r7,r5,c0b4 <__ledf2+0xbc>
    c098:	2800081e 	bne	r5,zero,c0bc <__ledf2+0xc4>
    c09c:	00800044 	movi	r2,1
    c0a0:	f800283a 	ret
    c0a4:	2292b03a 	or	r9,r4,r10
    c0a8:	483fdf26 	beq	r9,zero,c028 <__ram_exceptions_end+0xfbfebdd4>
    c0ac:	00800084 	movi	r2,2
    c0b0:	f800283a 	ret
    c0b4:	4080030e 	bge	r8,r2,c0c4 <__ledf2+0xcc>
    c0b8:	383fef26 	beq	r7,zero,c078 <__ram_exceptions_end+0xfbfebe24>
    c0bc:	00bfffc4 	movi	r2,-1
    c0c0:	f800283a 	ret
    c0c4:	123feb16 	blt	r2,r8,c074 <__ram_exceptions_end+0xfbfebe20>
    c0c8:	1abff336 	bltu	r3,r10,c098 <__ram_exceptions_end+0xfbfebe44>
    c0cc:	50c00326 	beq	r10,r3,c0dc <__ledf2+0xe4>
    c0d0:	50c0042e 	bgeu	r10,r3,c0e4 <__ledf2+0xec>
    c0d4:	283fe81e 	bne	r5,zero,c078 <__ram_exceptions_end+0xfbfebe24>
    c0d8:	003ff806 	br	c0bc <__ram_exceptions_end+0xfbfebe68>
    c0dc:	313fee36 	bltu	r6,r4,c098 <__ram_exceptions_end+0xfbfebe44>
    c0e0:	21bffc36 	bltu	r4,r6,c0d4 <__ram_exceptions_end+0xfbfebe80>
    c0e4:	0005883a 	mov	r2,zero
    c0e8:	f800283a 	ret

0000c0ec <__muldf3>:
    c0ec:	defff304 	addi	sp,sp,-52
    c0f0:	2804d53a 	srli	r2,r5,20
    c0f4:	dd800915 	stw	r22,36(sp)
    c0f8:	282cd7fa 	srli	r22,r5,31
    c0fc:	dc000315 	stw	r16,12(sp)
    c100:	04000434 	movhi	r16,16
    c104:	dd400815 	stw	r21,32(sp)
    c108:	dc800515 	stw	r18,20(sp)
    c10c:	843fffc4 	addi	r16,r16,-1
    c110:	dfc00c15 	stw	ra,48(sp)
    c114:	df000b15 	stw	fp,44(sp)
    c118:	ddc00a15 	stw	r23,40(sp)
    c11c:	dd000715 	stw	r20,28(sp)
    c120:	dcc00615 	stw	r19,24(sp)
    c124:	dc400415 	stw	r17,16(sp)
    c128:	1481ffcc 	andi	r18,r2,2047
    c12c:	2c20703a 	and	r16,r5,r16
    c130:	b02b883a 	mov	r21,r22
    c134:	b2403fcc 	andi	r9,r22,255
    c138:	90006026 	beq	r18,zero,c2bc <__muldf3+0x1d0>
    c13c:	0081ffc4 	movi	r2,2047
    c140:	2029883a 	mov	r20,r4
    c144:	90803626 	beq	r18,r2,c220 <__muldf3+0x134>
    c148:	80800434 	orhi	r2,r16,16
    c14c:	100490fa 	slli	r2,r2,3
    c150:	2020d77a 	srli	r16,r4,29
    c154:	202890fa 	slli	r20,r4,3
    c158:	94bf0044 	addi	r18,r18,-1023
    c15c:	80a0b03a 	or	r16,r16,r2
    c160:	0027883a 	mov	r19,zero
    c164:	0039883a 	mov	fp,zero
    c168:	3804d53a 	srli	r2,r7,20
    c16c:	382ed7fa 	srli	r23,r7,31
    c170:	04400434 	movhi	r17,16
    c174:	8c7fffc4 	addi	r17,r17,-1
    c178:	1081ffcc 	andi	r2,r2,2047
    c17c:	3011883a 	mov	r8,r6
    c180:	3c62703a 	and	r17,r7,r17
    c184:	ba803fcc 	andi	r10,r23,255
    c188:	10006d26 	beq	r2,zero,c340 <__muldf3+0x254>
    c18c:	00c1ffc4 	movi	r3,2047
    c190:	10c06526 	beq	r2,r3,c328 <__muldf3+0x23c>
    c194:	88c00434 	orhi	r3,r17,16
    c198:	180690fa 	slli	r3,r3,3
    c19c:	3022d77a 	srli	r17,r6,29
    c1a0:	301090fa 	slli	r8,r6,3
    c1a4:	10bf0044 	addi	r2,r2,-1023
    c1a8:	88e2b03a 	or	r17,r17,r3
    c1ac:	000b883a 	mov	r5,zero
    c1b0:	9085883a 	add	r2,r18,r2
    c1b4:	2cc8b03a 	or	r4,r5,r19
    c1b8:	00c003c4 	movi	r3,15
    c1bc:	bdacf03a 	xor	r22,r23,r22
    c1c0:	12c00044 	addi	r11,r2,1
    c1c4:	19009936 	bltu	r3,r4,c42c <__muldf3+0x340>
    c1c8:	200890ba 	slli	r4,r4,2
    c1cc:	00c00074 	movhi	r3,1
    c1d0:	18f07804 	addi	r3,r3,-15904
    c1d4:	20c9883a 	add	r4,r4,r3
    c1d8:	20c00017 	ldw	r3,0(r4)
    c1dc:	1800683a 	jmp	r3
    c1e0:	0000c42c 	andhi	zero,zero,784
    c1e4:	0000c240 	call	c24 <__udivsi3+0x10>
    c1e8:	0000c240 	call	c24 <__udivsi3+0x10>
    c1ec:	0000c23c 	xorhi	zero,zero,776
    c1f0:	0000c408 	cmpgei	zero,zero,784
    c1f4:	0000c408 	cmpgei	zero,zero,784
    c1f8:	0000c3f0 	cmpltui	zero,zero,783
    c1fc:	0000c23c 	xorhi	zero,zero,776
    c200:	0000c408 	cmpgei	zero,zero,784
    c204:	0000c3f0 	cmpltui	zero,zero,783
    c208:	0000c408 	cmpgei	zero,zero,784
    c20c:	0000c23c 	xorhi	zero,zero,776
    c210:	0000c418 	cmpnei	zero,zero,784
    c214:	0000c418 	cmpnei	zero,zero,784
    c218:	0000c418 	cmpnei	zero,zero,784
    c21c:	0000c634 	movhi	zero,792
    c220:	2404b03a 	or	r2,r4,r16
    c224:	10006f1e 	bne	r2,zero,c3e4 <__muldf3+0x2f8>
    c228:	04c00204 	movi	r19,8
    c22c:	0021883a 	mov	r16,zero
    c230:	0029883a 	mov	r20,zero
    c234:	07000084 	movi	fp,2
    c238:	003fcb06 	br	c168 <__ram_exceptions_end+0xfbfebf14>
    c23c:	502d883a 	mov	r22,r10
    c240:	00800084 	movi	r2,2
    c244:	28805726 	beq	r5,r2,c3a4 <__muldf3+0x2b8>
    c248:	008000c4 	movi	r2,3
    c24c:	28816626 	beq	r5,r2,c7e8 <__muldf3+0x6fc>
    c250:	00800044 	movi	r2,1
    c254:	2881411e 	bne	r5,r2,c75c <__muldf3+0x670>
    c258:	b02b883a 	mov	r21,r22
    c25c:	0005883a 	mov	r2,zero
    c260:	000b883a 	mov	r5,zero
    c264:	0029883a 	mov	r20,zero
    c268:	1004953a 	slli	r2,r2,20
    c26c:	a8c03fcc 	andi	r3,r21,255
    c270:	04400434 	movhi	r17,16
    c274:	8c7fffc4 	addi	r17,r17,-1
    c278:	180697fa 	slli	r3,r3,31
    c27c:	2c4a703a 	and	r5,r5,r17
    c280:	288ab03a 	or	r5,r5,r2
    c284:	28c6b03a 	or	r3,r5,r3
    c288:	a005883a 	mov	r2,r20
    c28c:	dfc00c17 	ldw	ra,48(sp)
    c290:	df000b17 	ldw	fp,44(sp)
    c294:	ddc00a17 	ldw	r23,40(sp)
    c298:	dd800917 	ldw	r22,36(sp)
    c29c:	dd400817 	ldw	r21,32(sp)
    c2a0:	dd000717 	ldw	r20,28(sp)
    c2a4:	dcc00617 	ldw	r19,24(sp)
    c2a8:	dc800517 	ldw	r18,20(sp)
    c2ac:	dc400417 	ldw	r17,16(sp)
    c2b0:	dc000317 	ldw	r16,12(sp)
    c2b4:	dec00d04 	addi	sp,sp,52
    c2b8:	f800283a 	ret
    c2bc:	2404b03a 	or	r2,r4,r16
    c2c0:	2027883a 	mov	r19,r4
    c2c4:	10004226 	beq	r2,zero,c3d0 <__muldf3+0x2e4>
    c2c8:	8000fc26 	beq	r16,zero,c6bc <__muldf3+0x5d0>
    c2cc:	8009883a 	mov	r4,r16
    c2d0:	d9800215 	stw	r6,8(sp)
    c2d4:	d9c00015 	stw	r7,0(sp)
    c2d8:	da400115 	stw	r9,4(sp)
    c2dc:	000d3040 	call	d304 <__clzsi2>
    c2e0:	d9800217 	ldw	r6,8(sp)
    c2e4:	d9c00017 	ldw	r7,0(sp)
    c2e8:	da400117 	ldw	r9,4(sp)
    c2ec:	113ffd44 	addi	r4,r2,-11
    c2f0:	00c00704 	movi	r3,28
    c2f4:	1900ed16 	blt	r3,r4,c6ac <__muldf3+0x5c0>
    c2f8:	00c00744 	movi	r3,29
    c2fc:	147ffe04 	addi	r17,r2,-8
    c300:	1907c83a 	sub	r3,r3,r4
    c304:	8460983a 	sll	r16,r16,r17
    c308:	98c6d83a 	srl	r3,r19,r3
    c30c:	9c68983a 	sll	r20,r19,r17
    c310:	1c20b03a 	or	r16,r3,r16
    c314:	1080fcc4 	addi	r2,r2,1011
    c318:	00a5c83a 	sub	r18,zero,r2
    c31c:	0027883a 	mov	r19,zero
    c320:	0039883a 	mov	fp,zero
    c324:	003f9006 	br	c168 <__ram_exceptions_end+0xfbfebf14>
    c328:	3446b03a 	or	r3,r6,r17
    c32c:	1800261e 	bne	r3,zero,c3c8 <__muldf3+0x2dc>
    c330:	0023883a 	mov	r17,zero
    c334:	0011883a 	mov	r8,zero
    c338:	01400084 	movi	r5,2
    c33c:	003f9c06 	br	c1b0 <__ram_exceptions_end+0xfbfebf5c>
    c340:	3446b03a 	or	r3,r6,r17
    c344:	18001c26 	beq	r3,zero,c3b8 <__muldf3+0x2cc>
    c348:	8800ce26 	beq	r17,zero,c684 <__muldf3+0x598>
    c34c:	8809883a 	mov	r4,r17
    c350:	d9800215 	stw	r6,8(sp)
    c354:	da400115 	stw	r9,4(sp)
    c358:	da800015 	stw	r10,0(sp)
    c35c:	000d3040 	call	d304 <__clzsi2>
    c360:	d9800217 	ldw	r6,8(sp)
    c364:	da400117 	ldw	r9,4(sp)
    c368:	da800017 	ldw	r10,0(sp)
    c36c:	113ffd44 	addi	r4,r2,-11
    c370:	00c00704 	movi	r3,28
    c374:	1900bf16 	blt	r3,r4,c674 <__muldf3+0x588>
    c378:	00c00744 	movi	r3,29
    c37c:	123ffe04 	addi	r8,r2,-8
    c380:	1907c83a 	sub	r3,r3,r4
    c384:	8a22983a 	sll	r17,r17,r8
    c388:	30c6d83a 	srl	r3,r6,r3
    c38c:	3210983a 	sll	r8,r6,r8
    c390:	1c62b03a 	or	r17,r3,r17
    c394:	1080fcc4 	addi	r2,r2,1011
    c398:	0085c83a 	sub	r2,zero,r2
    c39c:	000b883a 	mov	r5,zero
    c3a0:	003f8306 	br	c1b0 <__ram_exceptions_end+0xfbfebf5c>
    c3a4:	b02b883a 	mov	r21,r22
    c3a8:	0081ffc4 	movi	r2,2047
    c3ac:	000b883a 	mov	r5,zero
    c3b0:	0029883a 	mov	r20,zero
    c3b4:	003fac06 	br	c268 <__ram_exceptions_end+0xfbfec014>
    c3b8:	0023883a 	mov	r17,zero
    c3bc:	0011883a 	mov	r8,zero
    c3c0:	01400044 	movi	r5,1
    c3c4:	003f7a06 	br	c1b0 <__ram_exceptions_end+0xfbfebf5c>
    c3c8:	014000c4 	movi	r5,3
    c3cc:	003f7806 	br	c1b0 <__ram_exceptions_end+0xfbfebf5c>
    c3d0:	04c00104 	movi	r19,4
    c3d4:	0021883a 	mov	r16,zero
    c3d8:	0029883a 	mov	r20,zero
    c3dc:	07000044 	movi	fp,1
    c3e0:	003f6106 	br	c168 <__ram_exceptions_end+0xfbfebf14>
    c3e4:	04c00304 	movi	r19,12
    c3e8:	070000c4 	movi	fp,3
    c3ec:	003f5e06 	br	c168 <__ram_exceptions_end+0xfbfebf14>
    c3f0:	01400434 	movhi	r5,16
    c3f4:	002b883a 	mov	r21,zero
    c3f8:	297fffc4 	addi	r5,r5,-1
    c3fc:	053fffc4 	movi	r20,-1
    c400:	0081ffc4 	movi	r2,2047
    c404:	003f9806 	br	c268 <__ram_exceptions_end+0xfbfec014>
    c408:	8023883a 	mov	r17,r16
    c40c:	a011883a 	mov	r8,r20
    c410:	e00b883a 	mov	r5,fp
    c414:	003f8a06 	br	c240 <__ram_exceptions_end+0xfbfebfec>
    c418:	8023883a 	mov	r17,r16
    c41c:	a011883a 	mov	r8,r20
    c420:	482d883a 	mov	r22,r9
    c424:	e00b883a 	mov	r5,fp
    c428:	003f8506 	br	c240 <__ram_exceptions_end+0xfbfebfec>
    c42c:	a00ad43a 	srli	r5,r20,16
    c430:	401ad43a 	srli	r13,r8,16
    c434:	a53fffcc 	andi	r20,r20,65535
    c438:	423fffcc 	andi	r8,r8,65535
    c43c:	4519383a 	mul	r12,r8,r20
    c440:	4147383a 	mul	r3,r8,r5
    c444:	6d09383a 	mul	r4,r13,r20
    c448:	600cd43a 	srli	r6,r12,16
    c44c:	2b5d383a 	mul	r14,r5,r13
    c450:	20c9883a 	add	r4,r4,r3
    c454:	310d883a 	add	r6,r6,r4
    c458:	30c0022e 	bgeu	r6,r3,c464 <__muldf3+0x378>
    c45c:	00c00074 	movhi	r3,1
    c460:	70dd883a 	add	r14,r14,r3
    c464:	8826d43a 	srli	r19,r17,16
    c468:	8bffffcc 	andi	r15,r17,65535
    c46c:	7d23383a 	mul	r17,r15,r20
    c470:	7949383a 	mul	r4,r15,r5
    c474:	9d29383a 	mul	r20,r19,r20
    c478:	8814d43a 	srli	r10,r17,16
    c47c:	3012943a 	slli	r9,r6,16
    c480:	a129883a 	add	r20,r20,r4
    c484:	633fffcc 	andi	r12,r12,65535
    c488:	5515883a 	add	r10,r10,r20
    c48c:	3006d43a 	srli	r3,r6,16
    c490:	4b13883a 	add	r9,r9,r12
    c494:	2ccb383a 	mul	r5,r5,r19
    c498:	5100022e 	bgeu	r10,r4,c4a4 <__muldf3+0x3b8>
    c49c:	01000074 	movhi	r4,1
    c4a0:	290b883a 	add	r5,r5,r4
    c4a4:	802ad43a 	srli	r21,r16,16
    c4a8:	843fffcc 	andi	r16,r16,65535
    c4ac:	440d383a 	mul	r6,r8,r16
    c4b0:	4565383a 	mul	r18,r8,r21
    c4b4:	8349383a 	mul	r4,r16,r13
    c4b8:	500e943a 	slli	r7,r10,16
    c4bc:	3010d43a 	srli	r8,r6,16
    c4c0:	5028d43a 	srli	r20,r10,16
    c4c4:	2489883a 	add	r4,r4,r18
    c4c8:	8abfffcc 	andi	r10,r17,65535
    c4cc:	3a95883a 	add	r10,r7,r10
    c4d0:	4119883a 	add	r12,r8,r4
    c4d4:	a169883a 	add	r20,r20,r5
    c4d8:	1a87883a 	add	r3,r3,r10
    c4dc:	6d5b383a 	mul	r13,r13,r21
    c4e0:	6480022e 	bgeu	r12,r18,c4ec <__muldf3+0x400>
    c4e4:	01000074 	movhi	r4,1
    c4e8:	691b883a 	add	r13,r13,r4
    c4ec:	7c25383a 	mul	r18,r15,r16
    c4f0:	7d4b383a 	mul	r5,r15,r21
    c4f4:	84cf383a 	mul	r7,r16,r19
    c4f8:	901ed43a 	srli	r15,r18,16
    c4fc:	6008d43a 	srli	r4,r12,16
    c500:	6010943a 	slli	r8,r12,16
    c504:	394f883a 	add	r7,r7,r5
    c508:	333fffcc 	andi	r12,r6,65535
    c50c:	79df883a 	add	r15,r15,r7
    c510:	235b883a 	add	r13,r4,r13
    c514:	9d63383a 	mul	r17,r19,r21
    c518:	4309883a 	add	r4,r8,r12
    c51c:	7940022e 	bgeu	r15,r5,c528 <__muldf3+0x43c>
    c520:	01400074 	movhi	r5,1
    c524:	8963883a 	add	r17,r17,r5
    c528:	780a943a 	slli	r5,r15,16
    c52c:	91bfffcc 	andi	r6,r18,65535
    c530:	70c7883a 	add	r3,r14,r3
    c534:	298d883a 	add	r6,r5,r6
    c538:	1a8f803a 	cmpltu	r7,r3,r10
    c53c:	350b883a 	add	r5,r6,r20
    c540:	20c7883a 	add	r3,r4,r3
    c544:	3955883a 	add	r10,r7,r5
    c548:	1909803a 	cmpltu	r4,r3,r4
    c54c:	6a91883a 	add	r8,r13,r10
    c550:	780cd43a 	srli	r6,r15,16
    c554:	2219883a 	add	r12,r4,r8
    c558:	2d0b803a 	cmpltu	r5,r5,r20
    c55c:	51cf803a 	cmpltu	r7,r10,r7
    c560:	29ceb03a 	or	r7,r5,r7
    c564:	4351803a 	cmpltu	r8,r8,r13
    c568:	610b803a 	cmpltu	r5,r12,r4
    c56c:	4148b03a 	or	r4,r8,r5
    c570:	398f883a 	add	r7,r7,r6
    c574:	3909883a 	add	r4,r7,r4
    c578:	1810927a 	slli	r8,r3,9
    c57c:	2449883a 	add	r4,r4,r17
    c580:	2008927a 	slli	r4,r4,9
    c584:	6022d5fa 	srli	r17,r12,23
    c588:	1806d5fa 	srli	r3,r3,23
    c58c:	4252b03a 	or	r9,r8,r9
    c590:	600a927a 	slli	r5,r12,9
    c594:	4810c03a 	cmpne	r8,r9,zero
    c598:	2462b03a 	or	r17,r4,r17
    c59c:	40c6b03a 	or	r3,r8,r3
    c5a0:	8900402c 	andhi	r4,r17,256
    c5a4:	1950b03a 	or	r8,r3,r5
    c5a8:	20000726 	beq	r4,zero,c5c8 <__muldf3+0x4dc>
    c5ac:	4006d07a 	srli	r3,r8,1
    c5b0:	880497fa 	slli	r2,r17,31
    c5b4:	4200004c 	andi	r8,r8,1
    c5b8:	8822d07a 	srli	r17,r17,1
    c5bc:	1a10b03a 	or	r8,r3,r8
    c5c0:	1210b03a 	or	r8,r2,r8
    c5c4:	5805883a 	mov	r2,r11
    c5c8:	1140ffc4 	addi	r5,r2,1023
    c5cc:	0140440e 	bge	zero,r5,c6e0 <__muldf3+0x5f4>
    c5d0:	40c001cc 	andi	r3,r8,7
    c5d4:	18000726 	beq	r3,zero,c5f4 <__muldf3+0x508>
    c5d8:	40c003cc 	andi	r3,r8,15
    c5dc:	01000104 	movi	r4,4
    c5e0:	19000426 	beq	r3,r4,c5f4 <__muldf3+0x508>
    c5e4:	4107883a 	add	r3,r8,r4
    c5e8:	1a11803a 	cmpltu	r8,r3,r8
    c5ec:	8a23883a 	add	r17,r17,r8
    c5f0:	1811883a 	mov	r8,r3
    c5f4:	88c0402c 	andhi	r3,r17,256
    c5f8:	18000426 	beq	r3,zero,c60c <__muldf3+0x520>
    c5fc:	11410004 	addi	r5,r2,1024
    c600:	00bfc034 	movhi	r2,65280
    c604:	10bfffc4 	addi	r2,r2,-1
    c608:	88a2703a 	and	r17,r17,r2
    c60c:	0081ff84 	movi	r2,2046
    c610:	117f6416 	blt	r2,r5,c3a4 <__ram_exceptions_end+0xfbfec150>
    c614:	8828977a 	slli	r20,r17,29
    c618:	4010d0fa 	srli	r8,r8,3
    c61c:	8822927a 	slli	r17,r17,9
    c620:	2881ffcc 	andi	r2,r5,2047
    c624:	a228b03a 	or	r20,r20,r8
    c628:	880ad33a 	srli	r5,r17,12
    c62c:	b02b883a 	mov	r21,r22
    c630:	003f0d06 	br	c268 <__ram_exceptions_end+0xfbfec014>
    c634:	8080022c 	andhi	r2,r16,8
    c638:	10000926 	beq	r2,zero,c660 <__muldf3+0x574>
    c63c:	8880022c 	andhi	r2,r17,8
    c640:	1000071e 	bne	r2,zero,c660 <__muldf3+0x574>
    c644:	00800434 	movhi	r2,16
    c648:	89400234 	orhi	r5,r17,8
    c64c:	10bfffc4 	addi	r2,r2,-1
    c650:	b82b883a 	mov	r21,r23
    c654:	288a703a 	and	r5,r5,r2
    c658:	4029883a 	mov	r20,r8
    c65c:	003f6806 	br	c400 <__ram_exceptions_end+0xfbfec1ac>
    c660:	00800434 	movhi	r2,16
    c664:	81400234 	orhi	r5,r16,8
    c668:	10bfffc4 	addi	r2,r2,-1
    c66c:	288a703a 	and	r5,r5,r2
    c670:	003f6306 	br	c400 <__ram_exceptions_end+0xfbfec1ac>
    c674:	147ff604 	addi	r17,r2,-40
    c678:	3462983a 	sll	r17,r6,r17
    c67c:	0011883a 	mov	r8,zero
    c680:	003f4406 	br	c394 <__ram_exceptions_end+0xfbfec140>
    c684:	3009883a 	mov	r4,r6
    c688:	d9800215 	stw	r6,8(sp)
    c68c:	da400115 	stw	r9,4(sp)
    c690:	da800015 	stw	r10,0(sp)
    c694:	000d3040 	call	d304 <__clzsi2>
    c698:	10800804 	addi	r2,r2,32
    c69c:	da800017 	ldw	r10,0(sp)
    c6a0:	da400117 	ldw	r9,4(sp)
    c6a4:	d9800217 	ldw	r6,8(sp)
    c6a8:	003f3006 	br	c36c <__ram_exceptions_end+0xfbfec118>
    c6ac:	143ff604 	addi	r16,r2,-40
    c6b0:	9c20983a 	sll	r16,r19,r16
    c6b4:	0029883a 	mov	r20,zero
    c6b8:	003f1606 	br	c314 <__ram_exceptions_end+0xfbfec0c0>
    c6bc:	d9800215 	stw	r6,8(sp)
    c6c0:	d9c00015 	stw	r7,0(sp)
    c6c4:	da400115 	stw	r9,4(sp)
    c6c8:	000d3040 	call	d304 <__clzsi2>
    c6cc:	10800804 	addi	r2,r2,32
    c6d0:	da400117 	ldw	r9,4(sp)
    c6d4:	d9c00017 	ldw	r7,0(sp)
    c6d8:	d9800217 	ldw	r6,8(sp)
    c6dc:	003f0306 	br	c2ec <__ram_exceptions_end+0xfbfec098>
    c6e0:	00c00044 	movi	r3,1
    c6e4:	1947c83a 	sub	r3,r3,r5
    c6e8:	00800e04 	movi	r2,56
    c6ec:	10feda16 	blt	r2,r3,c258 <__ram_exceptions_end+0xfbfec004>
    c6f0:	008007c4 	movi	r2,31
    c6f4:	10c01b16 	blt	r2,r3,c764 <__muldf3+0x678>
    c6f8:	00800804 	movi	r2,32
    c6fc:	10c5c83a 	sub	r2,r2,r3
    c700:	888a983a 	sll	r5,r17,r2
    c704:	40c8d83a 	srl	r4,r8,r3
    c708:	4084983a 	sll	r2,r8,r2
    c70c:	88e2d83a 	srl	r17,r17,r3
    c710:	2906b03a 	or	r3,r5,r4
    c714:	1004c03a 	cmpne	r2,r2,zero
    c718:	1886b03a 	or	r3,r3,r2
    c71c:	188001cc 	andi	r2,r3,7
    c720:	10000726 	beq	r2,zero,c740 <__muldf3+0x654>
    c724:	188003cc 	andi	r2,r3,15
    c728:	01000104 	movi	r4,4
    c72c:	11000426 	beq	r2,r4,c740 <__muldf3+0x654>
    c730:	1805883a 	mov	r2,r3
    c734:	10c00104 	addi	r3,r2,4
    c738:	1885803a 	cmpltu	r2,r3,r2
    c73c:	88a3883a 	add	r17,r17,r2
    c740:	8880202c 	andhi	r2,r17,128
    c744:	10001c26 	beq	r2,zero,c7b8 <__muldf3+0x6cc>
    c748:	b02b883a 	mov	r21,r22
    c74c:	00800044 	movi	r2,1
    c750:	000b883a 	mov	r5,zero
    c754:	0029883a 	mov	r20,zero
    c758:	003ec306 	br	c268 <__ram_exceptions_end+0xfbfec014>
    c75c:	5805883a 	mov	r2,r11
    c760:	003f9906 	br	c5c8 <__ram_exceptions_end+0xfbfec374>
    c764:	00bff844 	movi	r2,-31
    c768:	1145c83a 	sub	r2,r2,r5
    c76c:	8888d83a 	srl	r4,r17,r2
    c770:	00800804 	movi	r2,32
    c774:	18801a26 	beq	r3,r2,c7e0 <__muldf3+0x6f4>
    c778:	00801004 	movi	r2,64
    c77c:	10c5c83a 	sub	r2,r2,r3
    c780:	8884983a 	sll	r2,r17,r2
    c784:	1204b03a 	or	r2,r2,r8
    c788:	1004c03a 	cmpne	r2,r2,zero
    c78c:	2084b03a 	or	r2,r4,r2
    c790:	144001cc 	andi	r17,r2,7
    c794:	88000d1e 	bne	r17,zero,c7cc <__muldf3+0x6e0>
    c798:	000b883a 	mov	r5,zero
    c79c:	1028d0fa 	srli	r20,r2,3
    c7a0:	b02b883a 	mov	r21,r22
    c7a4:	0005883a 	mov	r2,zero
    c7a8:	a468b03a 	or	r20,r20,r17
    c7ac:	003eae06 	br	c268 <__ram_exceptions_end+0xfbfec014>
    c7b0:	1007883a 	mov	r3,r2
    c7b4:	0023883a 	mov	r17,zero
    c7b8:	880a927a 	slli	r5,r17,9
    c7bc:	1805883a 	mov	r2,r3
    c7c0:	8822977a 	slli	r17,r17,29
    c7c4:	280ad33a 	srli	r5,r5,12
    c7c8:	003ff406 	br	c79c <__ram_exceptions_end+0xfbfec548>
    c7cc:	10c003cc 	andi	r3,r2,15
    c7d0:	01000104 	movi	r4,4
    c7d4:	193ff626 	beq	r3,r4,c7b0 <__ram_exceptions_end+0xfbfec55c>
    c7d8:	0023883a 	mov	r17,zero
    c7dc:	003fd506 	br	c734 <__ram_exceptions_end+0xfbfec4e0>
    c7e0:	0005883a 	mov	r2,zero
    c7e4:	003fe706 	br	c784 <__ram_exceptions_end+0xfbfec530>
    c7e8:	00800434 	movhi	r2,16
    c7ec:	89400234 	orhi	r5,r17,8
    c7f0:	10bfffc4 	addi	r2,r2,-1
    c7f4:	b02b883a 	mov	r21,r22
    c7f8:	288a703a 	and	r5,r5,r2
    c7fc:	4029883a 	mov	r20,r8
    c800:	003eff06 	br	c400 <__ram_exceptions_end+0xfbfec1ac>

0000c804 <__subdf3>:
    c804:	02000434 	movhi	r8,16
    c808:	423fffc4 	addi	r8,r8,-1
    c80c:	defffb04 	addi	sp,sp,-20
    c810:	2a14703a 	and	r10,r5,r8
    c814:	3812d53a 	srli	r9,r7,20
    c818:	3a10703a 	and	r8,r7,r8
    c81c:	2006d77a 	srli	r3,r4,29
    c820:	3004d77a 	srli	r2,r6,29
    c824:	dc000015 	stw	r16,0(sp)
    c828:	501490fa 	slli	r10,r10,3
    c82c:	2820d53a 	srli	r16,r5,20
    c830:	401090fa 	slli	r8,r8,3
    c834:	dc800215 	stw	r18,8(sp)
    c838:	dc400115 	stw	r17,4(sp)
    c83c:	dfc00415 	stw	ra,16(sp)
    c840:	202290fa 	slli	r17,r4,3
    c844:	dcc00315 	stw	r19,12(sp)
    c848:	4a41ffcc 	andi	r9,r9,2047
    c84c:	0101ffc4 	movi	r4,2047
    c850:	2824d7fa 	srli	r18,r5,31
    c854:	8401ffcc 	andi	r16,r16,2047
    c858:	50c6b03a 	or	r3,r10,r3
    c85c:	380ed7fa 	srli	r7,r7,31
    c860:	408ab03a 	or	r5,r8,r2
    c864:	300c90fa 	slli	r6,r6,3
    c868:	49009626 	beq	r9,r4,cac4 <__subdf3+0x2c0>
    c86c:	39c0005c 	xori	r7,r7,1
    c870:	8245c83a 	sub	r2,r16,r9
    c874:	3c807426 	beq	r7,r18,ca48 <__subdf3+0x244>
    c878:	0080af0e 	bge	zero,r2,cb38 <__subdf3+0x334>
    c87c:	48002a1e 	bne	r9,zero,c928 <__subdf3+0x124>
    c880:	2988b03a 	or	r4,r5,r6
    c884:	20009a1e 	bne	r4,zero,caf0 <__subdf3+0x2ec>
    c888:	888001cc 	andi	r2,r17,7
    c88c:	10000726 	beq	r2,zero,c8ac <__subdf3+0xa8>
    c890:	888003cc 	andi	r2,r17,15
    c894:	01000104 	movi	r4,4
    c898:	11000426 	beq	r2,r4,c8ac <__subdf3+0xa8>
    c89c:	890b883a 	add	r5,r17,r4
    c8a0:	2c63803a 	cmpltu	r17,r5,r17
    c8a4:	1c47883a 	add	r3,r3,r17
    c8a8:	2823883a 	mov	r17,r5
    c8ac:	1880202c 	andhi	r2,r3,128
    c8b0:	10005926 	beq	r2,zero,ca18 <__subdf3+0x214>
    c8b4:	84000044 	addi	r16,r16,1
    c8b8:	0081ffc4 	movi	r2,2047
    c8bc:	8080be26 	beq	r16,r2,cbb8 <__subdf3+0x3b4>
    c8c0:	017fe034 	movhi	r5,65408
    c8c4:	297fffc4 	addi	r5,r5,-1
    c8c8:	1946703a 	and	r3,r3,r5
    c8cc:	1804977a 	slli	r2,r3,29
    c8d0:	1806927a 	slli	r3,r3,9
    c8d4:	8822d0fa 	srli	r17,r17,3
    c8d8:	8401ffcc 	andi	r16,r16,2047
    c8dc:	180ad33a 	srli	r5,r3,12
    c8e0:	9100004c 	andi	r4,r18,1
    c8e4:	1444b03a 	or	r2,r2,r17
    c8e8:	80c1ffcc 	andi	r3,r16,2047
    c8ec:	1820953a 	slli	r16,r3,20
    c8f0:	20c03fcc 	andi	r3,r4,255
    c8f4:	180897fa 	slli	r4,r3,31
    c8f8:	00c00434 	movhi	r3,16
    c8fc:	18ffffc4 	addi	r3,r3,-1
    c900:	28c6703a 	and	r3,r5,r3
    c904:	1c06b03a 	or	r3,r3,r16
    c908:	1906b03a 	or	r3,r3,r4
    c90c:	dfc00417 	ldw	ra,16(sp)
    c910:	dcc00317 	ldw	r19,12(sp)
    c914:	dc800217 	ldw	r18,8(sp)
    c918:	dc400117 	ldw	r17,4(sp)
    c91c:	dc000017 	ldw	r16,0(sp)
    c920:	dec00504 	addi	sp,sp,20
    c924:	f800283a 	ret
    c928:	0101ffc4 	movi	r4,2047
    c92c:	813fd626 	beq	r16,r4,c888 <__ram_exceptions_end+0xfbfec634>
    c930:	29402034 	orhi	r5,r5,128
    c934:	01000e04 	movi	r4,56
    c938:	2080a316 	blt	r4,r2,cbc8 <__subdf3+0x3c4>
    c93c:	010007c4 	movi	r4,31
    c940:	2080c616 	blt	r4,r2,cc5c <__subdf3+0x458>
    c944:	01000804 	movi	r4,32
    c948:	2089c83a 	sub	r4,r4,r2
    c94c:	2910983a 	sll	r8,r5,r4
    c950:	308ed83a 	srl	r7,r6,r2
    c954:	3108983a 	sll	r4,r6,r4
    c958:	2884d83a 	srl	r2,r5,r2
    c95c:	41ccb03a 	or	r6,r8,r7
    c960:	2008c03a 	cmpne	r4,r4,zero
    c964:	310cb03a 	or	r6,r6,r4
    c968:	898dc83a 	sub	r6,r17,r6
    c96c:	89a3803a 	cmpltu	r17,r17,r6
    c970:	1887c83a 	sub	r3,r3,r2
    c974:	1c47c83a 	sub	r3,r3,r17
    c978:	3023883a 	mov	r17,r6
    c97c:	1880202c 	andhi	r2,r3,128
    c980:	10002326 	beq	r2,zero,ca10 <__subdf3+0x20c>
    c984:	04c02034 	movhi	r19,128
    c988:	9cffffc4 	addi	r19,r19,-1
    c98c:	1ce6703a 	and	r19,r3,r19
    c990:	98007a26 	beq	r19,zero,cb7c <__subdf3+0x378>
    c994:	9809883a 	mov	r4,r19
    c998:	000d3040 	call	d304 <__clzsi2>
    c99c:	113ffe04 	addi	r4,r2,-8
    c9a0:	00c007c4 	movi	r3,31
    c9a4:	19007b16 	blt	r3,r4,cb94 <__subdf3+0x390>
    c9a8:	00800804 	movi	r2,32
    c9ac:	1105c83a 	sub	r2,r2,r4
    c9b0:	8884d83a 	srl	r2,r17,r2
    c9b4:	9906983a 	sll	r3,r19,r4
    c9b8:	8922983a 	sll	r17,r17,r4
    c9bc:	10c4b03a 	or	r2,r2,r3
    c9c0:	24007816 	blt	r4,r16,cba4 <__subdf3+0x3a0>
    c9c4:	2421c83a 	sub	r16,r4,r16
    c9c8:	80c00044 	addi	r3,r16,1
    c9cc:	010007c4 	movi	r4,31
    c9d0:	20c09516 	blt	r4,r3,cc28 <__subdf3+0x424>
    c9d4:	01400804 	movi	r5,32
    c9d8:	28cbc83a 	sub	r5,r5,r3
    c9dc:	88c8d83a 	srl	r4,r17,r3
    c9e0:	8962983a 	sll	r17,r17,r5
    c9e4:	114a983a 	sll	r5,r2,r5
    c9e8:	10c6d83a 	srl	r3,r2,r3
    c9ec:	8804c03a 	cmpne	r2,r17,zero
    c9f0:	290ab03a 	or	r5,r5,r4
    c9f4:	28a2b03a 	or	r17,r5,r2
    c9f8:	0021883a 	mov	r16,zero
    c9fc:	003fa206 	br	c888 <__ram_exceptions_end+0xfbfec634>
    ca00:	2090b03a 	or	r8,r4,r2
    ca04:	40018e26 	beq	r8,zero,d040 <__subdf3+0x83c>
    ca08:	1007883a 	mov	r3,r2
    ca0c:	2023883a 	mov	r17,r4
    ca10:	888001cc 	andi	r2,r17,7
    ca14:	103f9e1e 	bne	r2,zero,c890 <__ram_exceptions_end+0xfbfec63c>
    ca18:	1804977a 	slli	r2,r3,29
    ca1c:	8822d0fa 	srli	r17,r17,3
    ca20:	1810d0fa 	srli	r8,r3,3
    ca24:	9100004c 	andi	r4,r18,1
    ca28:	1444b03a 	or	r2,r2,r17
    ca2c:	00c1ffc4 	movi	r3,2047
    ca30:	80c02826 	beq	r16,r3,cad4 <__subdf3+0x2d0>
    ca34:	01400434 	movhi	r5,16
    ca38:	297fffc4 	addi	r5,r5,-1
    ca3c:	80e0703a 	and	r16,r16,r3
    ca40:	414a703a 	and	r5,r8,r5
    ca44:	003fa806 	br	c8e8 <__ram_exceptions_end+0xfbfec694>
    ca48:	0080630e 	bge	zero,r2,cbd8 <__subdf3+0x3d4>
    ca4c:	48003026 	beq	r9,zero,cb10 <__subdf3+0x30c>
    ca50:	0101ffc4 	movi	r4,2047
    ca54:	813f8c26 	beq	r16,r4,c888 <__ram_exceptions_end+0xfbfec634>
    ca58:	29402034 	orhi	r5,r5,128
    ca5c:	01000e04 	movi	r4,56
    ca60:	2080a90e 	bge	r4,r2,cd08 <__subdf3+0x504>
    ca64:	298cb03a 	or	r6,r5,r6
    ca68:	3012c03a 	cmpne	r9,r6,zero
    ca6c:	0005883a 	mov	r2,zero
    ca70:	4c53883a 	add	r9,r9,r17
    ca74:	4c63803a 	cmpltu	r17,r9,r17
    ca78:	10c7883a 	add	r3,r2,r3
    ca7c:	88c7883a 	add	r3,r17,r3
    ca80:	4823883a 	mov	r17,r9
    ca84:	1880202c 	andhi	r2,r3,128
    ca88:	1000d026 	beq	r2,zero,cdcc <__subdf3+0x5c8>
    ca8c:	84000044 	addi	r16,r16,1
    ca90:	0081ffc4 	movi	r2,2047
    ca94:	8080fe26 	beq	r16,r2,ce90 <__subdf3+0x68c>
    ca98:	00bfe034 	movhi	r2,65408
    ca9c:	10bfffc4 	addi	r2,r2,-1
    caa0:	1886703a 	and	r3,r3,r2
    caa4:	880ad07a 	srli	r5,r17,1
    caa8:	180497fa 	slli	r2,r3,31
    caac:	8900004c 	andi	r4,r17,1
    cab0:	2922b03a 	or	r17,r5,r4
    cab4:	1806d07a 	srli	r3,r3,1
    cab8:	1462b03a 	or	r17,r2,r17
    cabc:	3825883a 	mov	r18,r7
    cac0:	003f7106 	br	c888 <__ram_exceptions_end+0xfbfec634>
    cac4:	2984b03a 	or	r2,r5,r6
    cac8:	103f6826 	beq	r2,zero,c86c <__ram_exceptions_end+0xfbfec618>
    cacc:	39c03fcc 	andi	r7,r7,255
    cad0:	003f6706 	br	c870 <__ram_exceptions_end+0xfbfec61c>
    cad4:	4086b03a 	or	r3,r8,r2
    cad8:	18015226 	beq	r3,zero,d024 <__subdf3+0x820>
    cadc:	00c00434 	movhi	r3,16
    cae0:	41400234 	orhi	r5,r8,8
    cae4:	18ffffc4 	addi	r3,r3,-1
    cae8:	28ca703a 	and	r5,r5,r3
    caec:	003f7e06 	br	c8e8 <__ram_exceptions_end+0xfbfec694>
    caf0:	10bfffc4 	addi	r2,r2,-1
    caf4:	1000491e 	bne	r2,zero,cc1c <__subdf3+0x418>
    caf8:	898fc83a 	sub	r7,r17,r6
    cafc:	89e3803a 	cmpltu	r17,r17,r7
    cb00:	1947c83a 	sub	r3,r3,r5
    cb04:	1c47c83a 	sub	r3,r3,r17
    cb08:	3823883a 	mov	r17,r7
    cb0c:	003f9b06 	br	c97c <__ram_exceptions_end+0xfbfec728>
    cb10:	2988b03a 	or	r4,r5,r6
    cb14:	203f5c26 	beq	r4,zero,c888 <__ram_exceptions_end+0xfbfec634>
    cb18:	10bfffc4 	addi	r2,r2,-1
    cb1c:	1000931e 	bne	r2,zero,cd6c <__subdf3+0x568>
    cb20:	898d883a 	add	r6,r17,r6
    cb24:	3463803a 	cmpltu	r17,r6,r17
    cb28:	1947883a 	add	r3,r3,r5
    cb2c:	88c7883a 	add	r3,r17,r3
    cb30:	3023883a 	mov	r17,r6
    cb34:	003fd306 	br	ca84 <__ram_exceptions_end+0xfbfec830>
    cb38:	1000541e 	bne	r2,zero,cc8c <__subdf3+0x488>
    cb3c:	80800044 	addi	r2,r16,1
    cb40:	1081ffcc 	andi	r2,r2,2047
    cb44:	01000044 	movi	r4,1
    cb48:	2080a20e 	bge	r4,r2,cdd4 <__subdf3+0x5d0>
    cb4c:	8989c83a 	sub	r4,r17,r6
    cb50:	8905803a 	cmpltu	r2,r17,r4
    cb54:	1967c83a 	sub	r19,r3,r5
    cb58:	98a7c83a 	sub	r19,r19,r2
    cb5c:	9880202c 	andhi	r2,r19,128
    cb60:	10006326 	beq	r2,zero,ccf0 <__subdf3+0x4ec>
    cb64:	3463c83a 	sub	r17,r6,r17
    cb68:	28c7c83a 	sub	r3,r5,r3
    cb6c:	344d803a 	cmpltu	r6,r6,r17
    cb70:	19a7c83a 	sub	r19,r3,r6
    cb74:	3825883a 	mov	r18,r7
    cb78:	983f861e 	bne	r19,zero,c994 <__ram_exceptions_end+0xfbfec740>
    cb7c:	8809883a 	mov	r4,r17
    cb80:	000d3040 	call	d304 <__clzsi2>
    cb84:	10800804 	addi	r2,r2,32
    cb88:	113ffe04 	addi	r4,r2,-8
    cb8c:	00c007c4 	movi	r3,31
    cb90:	193f850e 	bge	r3,r4,c9a8 <__ram_exceptions_end+0xfbfec754>
    cb94:	10bff604 	addi	r2,r2,-40
    cb98:	8884983a 	sll	r2,r17,r2
    cb9c:	0023883a 	mov	r17,zero
    cba0:	243f880e 	bge	r4,r16,c9c4 <__ram_exceptions_end+0xfbfec770>
    cba4:	00ffe034 	movhi	r3,65408
    cba8:	18ffffc4 	addi	r3,r3,-1
    cbac:	8121c83a 	sub	r16,r16,r4
    cbb0:	10c6703a 	and	r3,r2,r3
    cbb4:	003f3406 	br	c888 <__ram_exceptions_end+0xfbfec634>
    cbb8:	9100004c 	andi	r4,r18,1
    cbbc:	000b883a 	mov	r5,zero
    cbc0:	0005883a 	mov	r2,zero
    cbc4:	003f4806 	br	c8e8 <__ram_exceptions_end+0xfbfec694>
    cbc8:	298cb03a 	or	r6,r5,r6
    cbcc:	300cc03a 	cmpne	r6,r6,zero
    cbd0:	0005883a 	mov	r2,zero
    cbd4:	003f6406 	br	c968 <__ram_exceptions_end+0xfbfec714>
    cbd8:	10009a1e 	bne	r2,zero,ce44 <__subdf3+0x640>
    cbdc:	82400044 	addi	r9,r16,1
    cbe0:	4881ffcc 	andi	r2,r9,2047
    cbe4:	02800044 	movi	r10,1
    cbe8:	5080670e 	bge	r10,r2,cd88 <__subdf3+0x584>
    cbec:	0081ffc4 	movi	r2,2047
    cbf0:	4880af26 	beq	r9,r2,ceb0 <__subdf3+0x6ac>
    cbf4:	898d883a 	add	r6,r17,r6
    cbf8:	1945883a 	add	r2,r3,r5
    cbfc:	3447803a 	cmpltu	r3,r6,r17
    cc00:	1887883a 	add	r3,r3,r2
    cc04:	182297fa 	slli	r17,r3,31
    cc08:	300cd07a 	srli	r6,r6,1
    cc0c:	1806d07a 	srli	r3,r3,1
    cc10:	4821883a 	mov	r16,r9
    cc14:	89a2b03a 	or	r17,r17,r6
    cc18:	003f1b06 	br	c888 <__ram_exceptions_end+0xfbfec634>
    cc1c:	0101ffc4 	movi	r4,2047
    cc20:	813f441e 	bne	r16,r4,c934 <__ram_exceptions_end+0xfbfec6e0>
    cc24:	003f1806 	br	c888 <__ram_exceptions_end+0xfbfec634>
    cc28:	843ff844 	addi	r16,r16,-31
    cc2c:	01400804 	movi	r5,32
    cc30:	1408d83a 	srl	r4,r2,r16
    cc34:	19405026 	beq	r3,r5,cd78 <__subdf3+0x574>
    cc38:	01401004 	movi	r5,64
    cc3c:	28c7c83a 	sub	r3,r5,r3
    cc40:	10c4983a 	sll	r2,r2,r3
    cc44:	88a2b03a 	or	r17,r17,r2
    cc48:	8822c03a 	cmpne	r17,r17,zero
    cc4c:	2462b03a 	or	r17,r4,r17
    cc50:	0007883a 	mov	r3,zero
    cc54:	0021883a 	mov	r16,zero
    cc58:	003f6d06 	br	ca10 <__ram_exceptions_end+0xfbfec7bc>
    cc5c:	11fff804 	addi	r7,r2,-32
    cc60:	01000804 	movi	r4,32
    cc64:	29ced83a 	srl	r7,r5,r7
    cc68:	11004526 	beq	r2,r4,cd80 <__subdf3+0x57c>
    cc6c:	01001004 	movi	r4,64
    cc70:	2089c83a 	sub	r4,r4,r2
    cc74:	2904983a 	sll	r2,r5,r4
    cc78:	118cb03a 	or	r6,r2,r6
    cc7c:	300cc03a 	cmpne	r6,r6,zero
    cc80:	398cb03a 	or	r6,r7,r6
    cc84:	0005883a 	mov	r2,zero
    cc88:	003f3706 	br	c968 <__ram_exceptions_end+0xfbfec714>
    cc8c:	80002a26 	beq	r16,zero,cd38 <__subdf3+0x534>
    cc90:	0101ffc4 	movi	r4,2047
    cc94:	49006626 	beq	r9,r4,ce30 <__subdf3+0x62c>
    cc98:	0085c83a 	sub	r2,zero,r2
    cc9c:	18c02034 	orhi	r3,r3,128
    cca0:	01000e04 	movi	r4,56
    cca4:	20807e16 	blt	r4,r2,cea0 <__subdf3+0x69c>
    cca8:	010007c4 	movi	r4,31
    ccac:	2080e716 	blt	r4,r2,d04c <__subdf3+0x848>
    ccb0:	01000804 	movi	r4,32
    ccb4:	2089c83a 	sub	r4,r4,r2
    ccb8:	1914983a 	sll	r10,r3,r4
    ccbc:	8890d83a 	srl	r8,r17,r2
    ccc0:	8908983a 	sll	r4,r17,r4
    ccc4:	1884d83a 	srl	r2,r3,r2
    ccc8:	5222b03a 	or	r17,r10,r8
    cccc:	2006c03a 	cmpne	r3,r4,zero
    ccd0:	88e2b03a 	or	r17,r17,r3
    ccd4:	3463c83a 	sub	r17,r6,r17
    ccd8:	2885c83a 	sub	r2,r5,r2
    ccdc:	344d803a 	cmpltu	r6,r6,r17
    cce0:	1187c83a 	sub	r3,r2,r6
    cce4:	4821883a 	mov	r16,r9
    cce8:	3825883a 	mov	r18,r7
    ccec:	003f2306 	br	c97c <__ram_exceptions_end+0xfbfec728>
    ccf0:	24d0b03a 	or	r8,r4,r19
    ccf4:	40001b1e 	bne	r8,zero,cd64 <__subdf3+0x560>
    ccf8:	0005883a 	mov	r2,zero
    ccfc:	0009883a 	mov	r4,zero
    cd00:	0021883a 	mov	r16,zero
    cd04:	003f4906 	br	ca2c <__ram_exceptions_end+0xfbfec7d8>
    cd08:	010007c4 	movi	r4,31
    cd0c:	20803a16 	blt	r4,r2,cdf8 <__subdf3+0x5f4>
    cd10:	01000804 	movi	r4,32
    cd14:	2089c83a 	sub	r4,r4,r2
    cd18:	2912983a 	sll	r9,r5,r4
    cd1c:	3090d83a 	srl	r8,r6,r2
    cd20:	3108983a 	sll	r4,r6,r4
    cd24:	2884d83a 	srl	r2,r5,r2
    cd28:	4a12b03a 	or	r9,r9,r8
    cd2c:	2008c03a 	cmpne	r4,r4,zero
    cd30:	4912b03a 	or	r9,r9,r4
    cd34:	003f4e06 	br	ca70 <__ram_exceptions_end+0xfbfec81c>
    cd38:	1c48b03a 	or	r4,r3,r17
    cd3c:	20003c26 	beq	r4,zero,ce30 <__subdf3+0x62c>
    cd40:	0084303a 	nor	r2,zero,r2
    cd44:	1000381e 	bne	r2,zero,ce28 <__subdf3+0x624>
    cd48:	3463c83a 	sub	r17,r6,r17
    cd4c:	28c5c83a 	sub	r2,r5,r3
    cd50:	344d803a 	cmpltu	r6,r6,r17
    cd54:	1187c83a 	sub	r3,r2,r6
    cd58:	4821883a 	mov	r16,r9
    cd5c:	3825883a 	mov	r18,r7
    cd60:	003f0606 	br	c97c <__ram_exceptions_end+0xfbfec728>
    cd64:	2023883a 	mov	r17,r4
    cd68:	003f0906 	br	c990 <__ram_exceptions_end+0xfbfec73c>
    cd6c:	0101ffc4 	movi	r4,2047
    cd70:	813f3a1e 	bne	r16,r4,ca5c <__ram_exceptions_end+0xfbfec808>
    cd74:	003ec406 	br	c888 <__ram_exceptions_end+0xfbfec634>
    cd78:	0005883a 	mov	r2,zero
    cd7c:	003fb106 	br	cc44 <__ram_exceptions_end+0xfbfec9f0>
    cd80:	0005883a 	mov	r2,zero
    cd84:	003fbc06 	br	cc78 <__ram_exceptions_end+0xfbfeca24>
    cd88:	1c44b03a 	or	r2,r3,r17
    cd8c:	80008e1e 	bne	r16,zero,cfc8 <__subdf3+0x7c4>
    cd90:	1000c826 	beq	r2,zero,d0b4 <__subdf3+0x8b0>
    cd94:	2984b03a 	or	r2,r5,r6
    cd98:	103ebb26 	beq	r2,zero,c888 <__ram_exceptions_end+0xfbfec634>
    cd9c:	8989883a 	add	r4,r17,r6
    cda0:	1945883a 	add	r2,r3,r5
    cda4:	2447803a 	cmpltu	r3,r4,r17
    cda8:	1887883a 	add	r3,r3,r2
    cdac:	1880202c 	andhi	r2,r3,128
    cdb0:	2023883a 	mov	r17,r4
    cdb4:	103f1626 	beq	r2,zero,ca10 <__ram_exceptions_end+0xfbfec7bc>
    cdb8:	00bfe034 	movhi	r2,65408
    cdbc:	10bfffc4 	addi	r2,r2,-1
    cdc0:	5021883a 	mov	r16,r10
    cdc4:	1886703a 	and	r3,r3,r2
    cdc8:	003eaf06 	br	c888 <__ram_exceptions_end+0xfbfec634>
    cdcc:	3825883a 	mov	r18,r7
    cdd0:	003f0f06 	br	ca10 <__ram_exceptions_end+0xfbfec7bc>
    cdd4:	1c44b03a 	or	r2,r3,r17
    cdd8:	8000251e 	bne	r16,zero,ce70 <__subdf3+0x66c>
    cddc:	1000661e 	bne	r2,zero,cf78 <__subdf3+0x774>
    cde0:	2990b03a 	or	r8,r5,r6
    cde4:	40009626 	beq	r8,zero,d040 <__subdf3+0x83c>
    cde8:	2807883a 	mov	r3,r5
    cdec:	3023883a 	mov	r17,r6
    cdf0:	3825883a 	mov	r18,r7
    cdf4:	003ea406 	br	c888 <__ram_exceptions_end+0xfbfec634>
    cdf8:	127ff804 	addi	r9,r2,-32
    cdfc:	01000804 	movi	r4,32
    ce00:	2a52d83a 	srl	r9,r5,r9
    ce04:	11008c26 	beq	r2,r4,d038 <__subdf3+0x834>
    ce08:	01001004 	movi	r4,64
    ce0c:	2085c83a 	sub	r2,r4,r2
    ce10:	2884983a 	sll	r2,r5,r2
    ce14:	118cb03a 	or	r6,r2,r6
    ce18:	300cc03a 	cmpne	r6,r6,zero
    ce1c:	4992b03a 	or	r9,r9,r6
    ce20:	0005883a 	mov	r2,zero
    ce24:	003f1206 	br	ca70 <__ram_exceptions_end+0xfbfec81c>
    ce28:	0101ffc4 	movi	r4,2047
    ce2c:	493f9c1e 	bne	r9,r4,cca0 <__ram_exceptions_end+0xfbfeca4c>
    ce30:	2807883a 	mov	r3,r5
    ce34:	3023883a 	mov	r17,r6
    ce38:	4821883a 	mov	r16,r9
    ce3c:	3825883a 	mov	r18,r7
    ce40:	003e9106 	br	c888 <__ram_exceptions_end+0xfbfec634>
    ce44:	80001f1e 	bne	r16,zero,cec4 <__subdf3+0x6c0>
    ce48:	1c48b03a 	or	r4,r3,r17
    ce4c:	20005a26 	beq	r4,zero,cfb8 <__subdf3+0x7b4>
    ce50:	0084303a 	nor	r2,zero,r2
    ce54:	1000561e 	bne	r2,zero,cfb0 <__subdf3+0x7ac>
    ce58:	89a3883a 	add	r17,r17,r6
    ce5c:	1945883a 	add	r2,r3,r5
    ce60:	898d803a 	cmpltu	r6,r17,r6
    ce64:	3087883a 	add	r3,r6,r2
    ce68:	4821883a 	mov	r16,r9
    ce6c:	003f0506 	br	ca84 <__ram_exceptions_end+0xfbfec830>
    ce70:	10002b1e 	bne	r2,zero,cf20 <__subdf3+0x71c>
    ce74:	2984b03a 	or	r2,r5,r6
    ce78:	10008026 	beq	r2,zero,d07c <__subdf3+0x878>
    ce7c:	2807883a 	mov	r3,r5
    ce80:	3023883a 	mov	r17,r6
    ce84:	3825883a 	mov	r18,r7
    ce88:	0401ffc4 	movi	r16,2047
    ce8c:	003e7e06 	br	c888 <__ram_exceptions_end+0xfbfec634>
    ce90:	3809883a 	mov	r4,r7
    ce94:	0011883a 	mov	r8,zero
    ce98:	0005883a 	mov	r2,zero
    ce9c:	003ee306 	br	ca2c <__ram_exceptions_end+0xfbfec7d8>
    cea0:	1c62b03a 	or	r17,r3,r17
    cea4:	8822c03a 	cmpne	r17,r17,zero
    cea8:	0005883a 	mov	r2,zero
    ceac:	003f8906 	br	ccd4 <__ram_exceptions_end+0xfbfeca80>
    ceb0:	3809883a 	mov	r4,r7
    ceb4:	4821883a 	mov	r16,r9
    ceb8:	0011883a 	mov	r8,zero
    cebc:	0005883a 	mov	r2,zero
    cec0:	003eda06 	br	ca2c <__ram_exceptions_end+0xfbfec7d8>
    cec4:	0101ffc4 	movi	r4,2047
    cec8:	49003b26 	beq	r9,r4,cfb8 <__subdf3+0x7b4>
    cecc:	0085c83a 	sub	r2,zero,r2
    ced0:	18c02034 	orhi	r3,r3,128
    ced4:	01000e04 	movi	r4,56
    ced8:	20806e16 	blt	r4,r2,d094 <__subdf3+0x890>
    cedc:	010007c4 	movi	r4,31
    cee0:	20807716 	blt	r4,r2,d0c0 <__subdf3+0x8bc>
    cee4:	01000804 	movi	r4,32
    cee8:	2089c83a 	sub	r4,r4,r2
    ceec:	1914983a 	sll	r10,r3,r4
    cef0:	8890d83a 	srl	r8,r17,r2
    cef4:	8908983a 	sll	r4,r17,r4
    cef8:	1884d83a 	srl	r2,r3,r2
    cefc:	5222b03a 	or	r17,r10,r8
    cf00:	2006c03a 	cmpne	r3,r4,zero
    cf04:	88e2b03a 	or	r17,r17,r3
    cf08:	89a3883a 	add	r17,r17,r6
    cf0c:	1145883a 	add	r2,r2,r5
    cf10:	898d803a 	cmpltu	r6,r17,r6
    cf14:	3087883a 	add	r3,r6,r2
    cf18:	4821883a 	mov	r16,r9
    cf1c:	003ed906 	br	ca84 <__ram_exceptions_end+0xfbfec830>
    cf20:	2984b03a 	or	r2,r5,r6
    cf24:	10004226 	beq	r2,zero,d030 <__subdf3+0x82c>
    cf28:	1808d0fa 	srli	r4,r3,3
    cf2c:	8822d0fa 	srli	r17,r17,3
    cf30:	1806977a 	slli	r3,r3,29
    cf34:	2080022c 	andhi	r2,r4,8
    cf38:	1c62b03a 	or	r17,r3,r17
    cf3c:	10000826 	beq	r2,zero,cf60 <__subdf3+0x75c>
    cf40:	2812d0fa 	srli	r9,r5,3
    cf44:	4880022c 	andhi	r2,r9,8
    cf48:	1000051e 	bne	r2,zero,cf60 <__subdf3+0x75c>
    cf4c:	300cd0fa 	srli	r6,r6,3
    cf50:	2804977a 	slli	r2,r5,29
    cf54:	4809883a 	mov	r4,r9
    cf58:	3825883a 	mov	r18,r7
    cf5c:	11a2b03a 	or	r17,r2,r6
    cf60:	8806d77a 	srli	r3,r17,29
    cf64:	200890fa 	slli	r4,r4,3
    cf68:	882290fa 	slli	r17,r17,3
    cf6c:	0401ffc4 	movi	r16,2047
    cf70:	1906b03a 	or	r3,r3,r4
    cf74:	003e4406 	br	c888 <__ram_exceptions_end+0xfbfec634>
    cf78:	2984b03a 	or	r2,r5,r6
    cf7c:	103e4226 	beq	r2,zero,c888 <__ram_exceptions_end+0xfbfec634>
    cf80:	8989c83a 	sub	r4,r17,r6
    cf84:	8911803a 	cmpltu	r8,r17,r4
    cf88:	1945c83a 	sub	r2,r3,r5
    cf8c:	1205c83a 	sub	r2,r2,r8
    cf90:	1200202c 	andhi	r8,r2,128
    cf94:	403e9a26 	beq	r8,zero,ca00 <__ram_exceptions_end+0xfbfec7ac>
    cf98:	3463c83a 	sub	r17,r6,r17
    cf9c:	28c5c83a 	sub	r2,r5,r3
    cfa0:	344d803a 	cmpltu	r6,r6,r17
    cfa4:	1187c83a 	sub	r3,r2,r6
    cfa8:	3825883a 	mov	r18,r7
    cfac:	003e3606 	br	c888 <__ram_exceptions_end+0xfbfec634>
    cfb0:	0101ffc4 	movi	r4,2047
    cfb4:	493fc71e 	bne	r9,r4,ced4 <__ram_exceptions_end+0xfbfecc80>
    cfb8:	2807883a 	mov	r3,r5
    cfbc:	3023883a 	mov	r17,r6
    cfc0:	4821883a 	mov	r16,r9
    cfc4:	003e3006 	br	c888 <__ram_exceptions_end+0xfbfec634>
    cfc8:	10003626 	beq	r2,zero,d0a4 <__subdf3+0x8a0>
    cfcc:	2984b03a 	or	r2,r5,r6
    cfd0:	10001726 	beq	r2,zero,d030 <__subdf3+0x82c>
    cfd4:	1808d0fa 	srli	r4,r3,3
    cfd8:	8822d0fa 	srli	r17,r17,3
    cfdc:	1806977a 	slli	r3,r3,29
    cfe0:	2080022c 	andhi	r2,r4,8
    cfe4:	1c62b03a 	or	r17,r3,r17
    cfe8:	10000726 	beq	r2,zero,d008 <__subdf3+0x804>
    cfec:	2812d0fa 	srli	r9,r5,3
    cff0:	4880022c 	andhi	r2,r9,8
    cff4:	1000041e 	bne	r2,zero,d008 <__subdf3+0x804>
    cff8:	300cd0fa 	srli	r6,r6,3
    cffc:	2804977a 	slli	r2,r5,29
    d000:	4809883a 	mov	r4,r9
    d004:	11a2b03a 	or	r17,r2,r6
    d008:	8806d77a 	srli	r3,r17,29
    d00c:	200890fa 	slli	r4,r4,3
    d010:	882290fa 	slli	r17,r17,3
    d014:	3825883a 	mov	r18,r7
    d018:	1906b03a 	or	r3,r3,r4
    d01c:	0401ffc4 	movi	r16,2047
    d020:	003e1906 	br	c888 <__ram_exceptions_end+0xfbfec634>
    d024:	000b883a 	mov	r5,zero
    d028:	0005883a 	mov	r2,zero
    d02c:	003e2e06 	br	c8e8 <__ram_exceptions_end+0xfbfec694>
    d030:	0401ffc4 	movi	r16,2047
    d034:	003e1406 	br	c888 <__ram_exceptions_end+0xfbfec634>
    d038:	0005883a 	mov	r2,zero
    d03c:	003f7506 	br	ce14 <__ram_exceptions_end+0xfbfecbc0>
    d040:	0005883a 	mov	r2,zero
    d044:	0009883a 	mov	r4,zero
    d048:	003e7806 	br	ca2c <__ram_exceptions_end+0xfbfec7d8>
    d04c:	123ff804 	addi	r8,r2,-32
    d050:	01000804 	movi	r4,32
    d054:	1a10d83a 	srl	r8,r3,r8
    d058:	11002526 	beq	r2,r4,d0f0 <__subdf3+0x8ec>
    d05c:	01001004 	movi	r4,64
    d060:	2085c83a 	sub	r2,r4,r2
    d064:	1884983a 	sll	r2,r3,r2
    d068:	1444b03a 	or	r2,r2,r17
    d06c:	1004c03a 	cmpne	r2,r2,zero
    d070:	40a2b03a 	or	r17,r8,r2
    d074:	0005883a 	mov	r2,zero
    d078:	003f1606 	br	ccd4 <__ram_exceptions_end+0xfbfeca80>
    d07c:	02000434 	movhi	r8,16
    d080:	0009883a 	mov	r4,zero
    d084:	423fffc4 	addi	r8,r8,-1
    d088:	00bfffc4 	movi	r2,-1
    d08c:	0401ffc4 	movi	r16,2047
    d090:	003e6606 	br	ca2c <__ram_exceptions_end+0xfbfec7d8>
    d094:	1c62b03a 	or	r17,r3,r17
    d098:	8822c03a 	cmpne	r17,r17,zero
    d09c:	0005883a 	mov	r2,zero
    d0a0:	003f9906 	br	cf08 <__ram_exceptions_end+0xfbfeccb4>
    d0a4:	2807883a 	mov	r3,r5
    d0a8:	3023883a 	mov	r17,r6
    d0ac:	0401ffc4 	movi	r16,2047
    d0b0:	003df506 	br	c888 <__ram_exceptions_end+0xfbfec634>
    d0b4:	2807883a 	mov	r3,r5
    d0b8:	3023883a 	mov	r17,r6
    d0bc:	003df206 	br	c888 <__ram_exceptions_end+0xfbfec634>
    d0c0:	123ff804 	addi	r8,r2,-32
    d0c4:	01000804 	movi	r4,32
    d0c8:	1a10d83a 	srl	r8,r3,r8
    d0cc:	11000a26 	beq	r2,r4,d0f8 <__subdf3+0x8f4>
    d0d0:	01001004 	movi	r4,64
    d0d4:	2085c83a 	sub	r2,r4,r2
    d0d8:	1884983a 	sll	r2,r3,r2
    d0dc:	1444b03a 	or	r2,r2,r17
    d0e0:	1004c03a 	cmpne	r2,r2,zero
    d0e4:	40a2b03a 	or	r17,r8,r2
    d0e8:	0005883a 	mov	r2,zero
    d0ec:	003f8606 	br	cf08 <__ram_exceptions_end+0xfbfeccb4>
    d0f0:	0005883a 	mov	r2,zero
    d0f4:	003fdc06 	br	d068 <__ram_exceptions_end+0xfbfece14>
    d0f8:	0005883a 	mov	r2,zero
    d0fc:	003ff706 	br	d0dc <__ram_exceptions_end+0xfbfece88>

0000d100 <__fixdfsi>:
    d100:	280cd53a 	srli	r6,r5,20
    d104:	00c00434 	movhi	r3,16
    d108:	18ffffc4 	addi	r3,r3,-1
    d10c:	3181ffcc 	andi	r6,r6,2047
    d110:	01c0ff84 	movi	r7,1022
    d114:	28c6703a 	and	r3,r5,r3
    d118:	280ad7fa 	srli	r5,r5,31
    d11c:	3980120e 	bge	r7,r6,d168 <__fixdfsi+0x68>
    d120:	00810744 	movi	r2,1053
    d124:	11800c16 	blt	r2,r6,d158 <__fixdfsi+0x58>
    d128:	00810cc4 	movi	r2,1075
    d12c:	1185c83a 	sub	r2,r2,r6
    d130:	01c007c4 	movi	r7,31
    d134:	18c00434 	orhi	r3,r3,16
    d138:	38800d16 	blt	r7,r2,d170 <__fixdfsi+0x70>
    d13c:	31befb44 	addi	r6,r6,-1043
    d140:	2084d83a 	srl	r2,r4,r2
    d144:	1986983a 	sll	r3,r3,r6
    d148:	1884b03a 	or	r2,r3,r2
    d14c:	28000726 	beq	r5,zero,d16c <__fixdfsi+0x6c>
    d150:	0085c83a 	sub	r2,zero,r2
    d154:	f800283a 	ret
    d158:	00a00034 	movhi	r2,32768
    d15c:	10bfffc4 	addi	r2,r2,-1
    d160:	2885883a 	add	r2,r5,r2
    d164:	f800283a 	ret
    d168:	0005883a 	mov	r2,zero
    d16c:	f800283a 	ret
    d170:	008104c4 	movi	r2,1043
    d174:	1185c83a 	sub	r2,r2,r6
    d178:	1884d83a 	srl	r2,r3,r2
    d17c:	003ff306 	br	d14c <__ram_exceptions_end+0xfbfecef8>

0000d180 <__floatsidf>:
    d180:	defffd04 	addi	sp,sp,-12
    d184:	dfc00215 	stw	ra,8(sp)
    d188:	dc400115 	stw	r17,4(sp)
    d18c:	dc000015 	stw	r16,0(sp)
    d190:	20002b26 	beq	r4,zero,d240 <__floatsidf+0xc0>
    d194:	2023883a 	mov	r17,r4
    d198:	2020d7fa 	srli	r16,r4,31
    d19c:	20002d16 	blt	r4,zero,d254 <__floatsidf+0xd4>
    d1a0:	8809883a 	mov	r4,r17
    d1a4:	000d3040 	call	d304 <__clzsi2>
    d1a8:	01410784 	movi	r5,1054
    d1ac:	288bc83a 	sub	r5,r5,r2
    d1b0:	01010cc4 	movi	r4,1075
    d1b4:	2149c83a 	sub	r4,r4,r5
    d1b8:	00c007c4 	movi	r3,31
    d1bc:	1900160e 	bge	r3,r4,d218 <__floatsidf+0x98>
    d1c0:	00c104c4 	movi	r3,1043
    d1c4:	1947c83a 	sub	r3,r3,r5
    d1c8:	88c6983a 	sll	r3,r17,r3
    d1cc:	00800434 	movhi	r2,16
    d1d0:	10bfffc4 	addi	r2,r2,-1
    d1d4:	1886703a 	and	r3,r3,r2
    d1d8:	2941ffcc 	andi	r5,r5,2047
    d1dc:	800d883a 	mov	r6,r16
    d1e0:	0005883a 	mov	r2,zero
    d1e4:	280a953a 	slli	r5,r5,20
    d1e8:	31803fcc 	andi	r6,r6,255
    d1ec:	01000434 	movhi	r4,16
    d1f0:	300c97fa 	slli	r6,r6,31
    d1f4:	213fffc4 	addi	r4,r4,-1
    d1f8:	1906703a 	and	r3,r3,r4
    d1fc:	1946b03a 	or	r3,r3,r5
    d200:	1986b03a 	or	r3,r3,r6
    d204:	dfc00217 	ldw	ra,8(sp)
    d208:	dc400117 	ldw	r17,4(sp)
    d20c:	dc000017 	ldw	r16,0(sp)
    d210:	dec00304 	addi	sp,sp,12
    d214:	f800283a 	ret
    d218:	00c002c4 	movi	r3,11
    d21c:	1887c83a 	sub	r3,r3,r2
    d220:	88c6d83a 	srl	r3,r17,r3
    d224:	8904983a 	sll	r2,r17,r4
    d228:	01000434 	movhi	r4,16
    d22c:	213fffc4 	addi	r4,r4,-1
    d230:	2941ffcc 	andi	r5,r5,2047
    d234:	1906703a 	and	r3,r3,r4
    d238:	800d883a 	mov	r6,r16
    d23c:	003fe906 	br	d1e4 <__ram_exceptions_end+0xfbfecf90>
    d240:	000d883a 	mov	r6,zero
    d244:	000b883a 	mov	r5,zero
    d248:	0007883a 	mov	r3,zero
    d24c:	0005883a 	mov	r2,zero
    d250:	003fe406 	br	d1e4 <__ram_exceptions_end+0xfbfecf90>
    d254:	0123c83a 	sub	r17,zero,r4
    d258:	003fd106 	br	d1a0 <__ram_exceptions_end+0xfbfecf4c>

0000d25c <__floatunsidf>:
    d25c:	defffe04 	addi	sp,sp,-8
    d260:	dc000015 	stw	r16,0(sp)
    d264:	dfc00115 	stw	ra,4(sp)
    d268:	2021883a 	mov	r16,r4
    d26c:	20002226 	beq	r4,zero,d2f8 <__floatunsidf+0x9c>
    d270:	000d3040 	call	d304 <__clzsi2>
    d274:	01010784 	movi	r4,1054
    d278:	2089c83a 	sub	r4,r4,r2
    d27c:	01810cc4 	movi	r6,1075
    d280:	310dc83a 	sub	r6,r6,r4
    d284:	00c007c4 	movi	r3,31
    d288:	1980120e 	bge	r3,r6,d2d4 <__floatunsidf+0x78>
    d28c:	00c104c4 	movi	r3,1043
    d290:	1907c83a 	sub	r3,r3,r4
    d294:	80ca983a 	sll	r5,r16,r3
    d298:	00800434 	movhi	r2,16
    d29c:	10bfffc4 	addi	r2,r2,-1
    d2a0:	2101ffcc 	andi	r4,r4,2047
    d2a4:	0021883a 	mov	r16,zero
    d2a8:	288a703a 	and	r5,r5,r2
    d2ac:	2008953a 	slli	r4,r4,20
    d2b0:	00c00434 	movhi	r3,16
    d2b4:	18ffffc4 	addi	r3,r3,-1
    d2b8:	28c6703a 	and	r3,r5,r3
    d2bc:	8005883a 	mov	r2,r16
    d2c0:	1906b03a 	or	r3,r3,r4
    d2c4:	dfc00117 	ldw	ra,4(sp)
    d2c8:	dc000017 	ldw	r16,0(sp)
    d2cc:	dec00204 	addi	sp,sp,8
    d2d0:	f800283a 	ret
    d2d4:	00c002c4 	movi	r3,11
    d2d8:	188bc83a 	sub	r5,r3,r2
    d2dc:	814ad83a 	srl	r5,r16,r5
    d2e0:	00c00434 	movhi	r3,16
    d2e4:	18ffffc4 	addi	r3,r3,-1
    d2e8:	81a0983a 	sll	r16,r16,r6
    d2ec:	2101ffcc 	andi	r4,r4,2047
    d2f0:	28ca703a 	and	r5,r5,r3
    d2f4:	003fed06 	br	d2ac <__ram_exceptions_end+0xfbfed058>
    d2f8:	0009883a 	mov	r4,zero
    d2fc:	000b883a 	mov	r5,zero
    d300:	003fea06 	br	d2ac <__ram_exceptions_end+0xfbfed058>

0000d304 <__clzsi2>:
    d304:	00bfffd4 	movui	r2,65535
    d308:	11000536 	bltu	r2,r4,d320 <__clzsi2+0x1c>
    d30c:	00803fc4 	movi	r2,255
    d310:	11000f36 	bltu	r2,r4,d350 <__clzsi2+0x4c>
    d314:	00800804 	movi	r2,32
    d318:	0007883a 	mov	r3,zero
    d31c:	00000506 	br	d334 <__clzsi2+0x30>
    d320:	00804034 	movhi	r2,256
    d324:	10bfffc4 	addi	r2,r2,-1
    d328:	11000c2e 	bgeu	r2,r4,d35c <__clzsi2+0x58>
    d32c:	00800204 	movi	r2,8
    d330:	00c00604 	movi	r3,24
    d334:	20c8d83a 	srl	r4,r4,r3
    d338:	00c00074 	movhi	r3,1
    d33c:	18c0c004 	addi	r3,r3,768
    d340:	1909883a 	add	r4,r3,r4
    d344:	20c00003 	ldbu	r3,0(r4)
    d348:	10c5c83a 	sub	r2,r2,r3
    d34c:	f800283a 	ret
    d350:	00800604 	movi	r2,24
    d354:	00c00204 	movi	r3,8
    d358:	003ff606 	br	d334 <__ram_exceptions_end+0xfbfed0e0>
    d35c:	00800404 	movi	r2,16
    d360:	1007883a 	mov	r3,r2
    d364:	003ff306 	br	d334 <__ram_exceptions_end+0xfbfed0e0>

0000d368 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d368:	defffe04 	addi	sp,sp,-8
    d36c:	dfc00115 	stw	ra,4(sp)
    d370:	df000015 	stw	fp,0(sp)
    d374:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d378:	d0a00b17 	ldw	r2,-32724(gp)
    d37c:	10000326 	beq	r2,zero,d38c <alt_get_errno+0x24>
    d380:	d0a00b17 	ldw	r2,-32724(gp)
    d384:	103ee83a 	callr	r2
    d388:	00000106 	br	d390 <alt_get_errno+0x28>
    d38c:	d0a6d404 	addi	r2,gp,-25776
}
    d390:	e037883a 	mov	sp,fp
    d394:	dfc00117 	ldw	ra,4(sp)
    d398:	df000017 	ldw	fp,0(sp)
    d39c:	dec00204 	addi	sp,sp,8
    d3a0:	f800283a 	ret

0000d3a4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    d3a4:	defffb04 	addi	sp,sp,-20
    d3a8:	dfc00415 	stw	ra,16(sp)
    d3ac:	df000315 	stw	fp,12(sp)
    d3b0:	df000304 	addi	fp,sp,12
    d3b4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    d3b8:	e0bfff17 	ldw	r2,-4(fp)
    d3bc:	10000616 	blt	r2,zero,d3d8 <close+0x34>
    d3c0:	e0bfff17 	ldw	r2,-4(fp)
    d3c4:	10c00324 	muli	r3,r2,12
    d3c8:	00800074 	movhi	r2,1
    d3cc:	10834004 	addi	r2,r2,3328
    d3d0:	1885883a 	add	r2,r3,r2
    d3d4:	00000106 	br	d3dc <close+0x38>
    d3d8:	0005883a 	mov	r2,zero
    d3dc:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    d3e0:	e0bffd17 	ldw	r2,-12(fp)
    d3e4:	10001926 	beq	r2,zero,d44c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    d3e8:	e0bffd17 	ldw	r2,-12(fp)
    d3ec:	10800017 	ldw	r2,0(r2)
    d3f0:	10800417 	ldw	r2,16(r2)
    d3f4:	10000626 	beq	r2,zero,d410 <close+0x6c>
    d3f8:	e0bffd17 	ldw	r2,-12(fp)
    d3fc:	10800017 	ldw	r2,0(r2)
    d400:	10800417 	ldw	r2,16(r2)
    d404:	e13ffd17 	ldw	r4,-12(fp)
    d408:	103ee83a 	callr	r2
    d40c:	00000106 	br	d414 <close+0x70>
    d410:	0005883a 	mov	r2,zero
    d414:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    d418:	e13fff17 	ldw	r4,-4(fp)
    d41c:	000df6c0 	call	df6c <alt_release_fd>
    if (rval < 0)
    d420:	e0bffe17 	ldw	r2,-8(fp)
    d424:	1000070e 	bge	r2,zero,d444 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    d428:	000d3680 	call	d368 <alt_get_errno>
    d42c:	1007883a 	mov	r3,r2
    d430:	e0bffe17 	ldw	r2,-8(fp)
    d434:	0085c83a 	sub	r2,zero,r2
    d438:	18800015 	stw	r2,0(r3)
      return -1;
    d43c:	00bfffc4 	movi	r2,-1
    d440:	00000706 	br	d460 <close+0xbc>
    }
    return 0;
    d444:	0005883a 	mov	r2,zero
    d448:	00000506 	br	d460 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d44c:	000d3680 	call	d368 <alt_get_errno>
    d450:	1007883a 	mov	r3,r2
    d454:	00801444 	movi	r2,81
    d458:	18800015 	stw	r2,0(r3)
    return -1;
    d45c:	00bfffc4 	movi	r2,-1
  }
}
    d460:	e037883a 	mov	sp,fp
    d464:	dfc00117 	ldw	ra,4(sp)
    d468:	df000017 	ldw	fp,0(sp)
    d46c:	dec00204 	addi	sp,sp,8
    d470:	f800283a 	ret

0000d474 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    d474:	defffc04 	addi	sp,sp,-16
    d478:	df000315 	stw	fp,12(sp)
    d47c:	df000304 	addi	fp,sp,12
    d480:	e13ffd15 	stw	r4,-12(fp)
    d484:	e17ffe15 	stw	r5,-8(fp)
    d488:	e1bfff15 	stw	r6,-4(fp)
  return len;
    d48c:	e0bfff17 	ldw	r2,-4(fp)
}
    d490:	e037883a 	mov	sp,fp
    d494:	df000017 	ldw	fp,0(sp)
    d498:	dec00104 	addi	sp,sp,4
    d49c:	f800283a 	ret

0000d4a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d4a0:	defffe04 	addi	sp,sp,-8
    d4a4:	dfc00115 	stw	ra,4(sp)
    d4a8:	df000015 	stw	fp,0(sp)
    d4ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d4b0:	d0a00b17 	ldw	r2,-32724(gp)
    d4b4:	10000326 	beq	r2,zero,d4c4 <alt_get_errno+0x24>
    d4b8:	d0a00b17 	ldw	r2,-32724(gp)
    d4bc:	103ee83a 	callr	r2
    d4c0:	00000106 	br	d4c8 <alt_get_errno+0x28>
    d4c4:	d0a6d404 	addi	r2,gp,-25776
}
    d4c8:	e037883a 	mov	sp,fp
    d4cc:	dfc00117 	ldw	ra,4(sp)
    d4d0:	df000017 	ldw	fp,0(sp)
    d4d4:	dec00204 	addi	sp,sp,8
    d4d8:	f800283a 	ret

0000d4dc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
    d4dc:	defffb04 	addi	sp,sp,-20
    d4e0:	dfc00415 	stw	ra,16(sp)
    d4e4:	df000315 	stw	fp,12(sp)
    d4e8:	df000304 	addi	fp,sp,12
    d4ec:	e13ffe15 	stw	r4,-8(fp)
    d4f0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d4f4:	e0bffe17 	ldw	r2,-8(fp)
    d4f8:	10000616 	blt	r2,zero,d514 <fstat+0x38>
    d4fc:	e0bffe17 	ldw	r2,-8(fp)
    d500:	10c00324 	muli	r3,r2,12
    d504:	00800074 	movhi	r2,1
    d508:	10834004 	addi	r2,r2,3328
    d50c:	1885883a 	add	r2,r3,r2
    d510:	00000106 	br	d518 <fstat+0x3c>
    d514:	0005883a 	mov	r2,zero
    d518:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
    d51c:	e0bffd17 	ldw	r2,-12(fp)
    d520:	10001026 	beq	r2,zero,d564 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
    d524:	e0bffd17 	ldw	r2,-12(fp)
    d528:	10800017 	ldw	r2,0(r2)
    d52c:	10800817 	ldw	r2,32(r2)
    d530:	10000726 	beq	r2,zero,d550 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
    d534:	e0bffd17 	ldw	r2,-12(fp)
    d538:	10800017 	ldw	r2,0(r2)
    d53c:	10800817 	ldw	r2,32(r2)
    d540:	e17fff17 	ldw	r5,-4(fp)
    d544:	e13ffd17 	ldw	r4,-12(fp)
    d548:	103ee83a 	callr	r2
    d54c:	00000a06 	br	d578 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
    d550:	e0bfff17 	ldw	r2,-4(fp)
    d554:	00c80004 	movi	r3,8192
    d558:	10c00115 	stw	r3,4(r2)
      return 0;
    d55c:	0005883a 	mov	r2,zero
    d560:	00000506 	br	d578 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d564:	000d4a00 	call	d4a0 <alt_get_errno>
    d568:	1007883a 	mov	r3,r2
    d56c:	00801444 	movi	r2,81
    d570:	18800015 	stw	r2,0(r3)
    return -1;
    d574:	00bfffc4 	movi	r2,-1
  }
}
    d578:	e037883a 	mov	sp,fp
    d57c:	dfc00117 	ldw	ra,4(sp)
    d580:	df000017 	ldw	fp,0(sp)
    d584:	dec00204 	addi	sp,sp,8
    d588:	f800283a 	ret

0000d58c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    d58c:	defff904 	addi	sp,sp,-28
    d590:	dfc00615 	stw	ra,24(sp)
    d594:	df000515 	stw	fp,20(sp)
    d598:	df000504 	addi	fp,sp,20
    d59c:	e13ffc15 	stw	r4,-16(fp)
    d5a0:	e17ffd15 	stw	r5,-12(fp)
    d5a4:	e1bffe15 	stw	r6,-8(fp)
    d5a8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    d5ac:	e0800217 	ldw	r2,8(fp)
    d5b0:	d8800015 	stw	r2,0(sp)
    d5b4:	e1ffff17 	ldw	r7,-4(fp)
    d5b8:	e1bffe17 	ldw	r6,-8(fp)
    d5bc:	e17ffd17 	ldw	r5,-12(fp)
    d5c0:	e13ffc17 	ldw	r4,-16(fp)
    d5c4:	000d73c0 	call	d73c <alt_iic_isr_register>
}  
    d5c8:	e037883a 	mov	sp,fp
    d5cc:	dfc00117 	ldw	ra,4(sp)
    d5d0:	df000017 	ldw	fp,0(sp)
    d5d4:	dec00204 	addi	sp,sp,8
    d5d8:	f800283a 	ret

0000d5dc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    d5dc:	defff904 	addi	sp,sp,-28
    d5e0:	df000615 	stw	fp,24(sp)
    d5e4:	df000604 	addi	fp,sp,24
    d5e8:	e13ffe15 	stw	r4,-8(fp)
    d5ec:	e17fff15 	stw	r5,-4(fp)
    d5f0:	e0bfff17 	ldw	r2,-4(fp)
    d5f4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d5f8:	0005303a 	rdctl	r2,status
    d5fc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d600:	e0fffb17 	ldw	r3,-20(fp)
    d604:	00bfff84 	movi	r2,-2
    d608:	1884703a 	and	r2,r3,r2
    d60c:	1001703a 	wrctl	status,r2
  
  return context;
    d610:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    d614:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    d618:	00c00044 	movi	r3,1
    d61c:	e0bffa17 	ldw	r2,-24(fp)
    d620:	1884983a 	sll	r2,r3,r2
    d624:	1007883a 	mov	r3,r2
    d628:	d0a6d517 	ldw	r2,-25772(gp)
    d62c:	1884b03a 	or	r2,r3,r2
    d630:	d0a6d515 	stw	r2,-25772(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    d634:	d0a6d517 	ldw	r2,-25772(gp)
    d638:	100170fa 	wrctl	ienable,r2
    d63c:	e0bffc17 	ldw	r2,-16(fp)
    d640:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d644:	e0bffd17 	ldw	r2,-12(fp)
    d648:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    d64c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    d650:	0001883a 	nop
}
    d654:	e037883a 	mov	sp,fp
    d658:	df000017 	ldw	fp,0(sp)
    d65c:	dec00104 	addi	sp,sp,4
    d660:	f800283a 	ret

0000d664 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    d664:	defff904 	addi	sp,sp,-28
    d668:	df000615 	stw	fp,24(sp)
    d66c:	df000604 	addi	fp,sp,24
    d670:	e13ffe15 	stw	r4,-8(fp)
    d674:	e17fff15 	stw	r5,-4(fp)
    d678:	e0bfff17 	ldw	r2,-4(fp)
    d67c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d680:	0005303a 	rdctl	r2,status
    d684:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d688:	e0fffb17 	ldw	r3,-20(fp)
    d68c:	00bfff84 	movi	r2,-2
    d690:	1884703a 	and	r2,r3,r2
    d694:	1001703a 	wrctl	status,r2
  
  return context;
    d698:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    d69c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    d6a0:	00c00044 	movi	r3,1
    d6a4:	e0bffa17 	ldw	r2,-24(fp)
    d6a8:	1884983a 	sll	r2,r3,r2
    d6ac:	0084303a 	nor	r2,zero,r2
    d6b0:	1007883a 	mov	r3,r2
    d6b4:	d0a6d517 	ldw	r2,-25772(gp)
    d6b8:	1884703a 	and	r2,r3,r2
    d6bc:	d0a6d515 	stw	r2,-25772(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    d6c0:	d0a6d517 	ldw	r2,-25772(gp)
    d6c4:	100170fa 	wrctl	ienable,r2
    d6c8:	e0bffc17 	ldw	r2,-16(fp)
    d6cc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d6d0:	e0bffd17 	ldw	r2,-12(fp)
    d6d4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    d6d8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    d6dc:	0001883a 	nop
}
    d6e0:	e037883a 	mov	sp,fp
    d6e4:	df000017 	ldw	fp,0(sp)
    d6e8:	dec00104 	addi	sp,sp,4
    d6ec:	f800283a 	ret

0000d6f0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    d6f0:	defffc04 	addi	sp,sp,-16
    d6f4:	df000315 	stw	fp,12(sp)
    d6f8:	df000304 	addi	fp,sp,12
    d6fc:	e13ffe15 	stw	r4,-8(fp)
    d700:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    d704:	000530fa 	rdctl	r2,ienable
    d708:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    d70c:	00c00044 	movi	r3,1
    d710:	e0bfff17 	ldw	r2,-4(fp)
    d714:	1884983a 	sll	r2,r3,r2
    d718:	1007883a 	mov	r3,r2
    d71c:	e0bffd17 	ldw	r2,-12(fp)
    d720:	1884703a 	and	r2,r3,r2
    d724:	1004c03a 	cmpne	r2,r2,zero
    d728:	10803fcc 	andi	r2,r2,255
}
    d72c:	e037883a 	mov	sp,fp
    d730:	df000017 	ldw	fp,0(sp)
    d734:	dec00104 	addi	sp,sp,4
    d738:	f800283a 	ret

0000d73c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    d73c:	defff504 	addi	sp,sp,-44
    d740:	dfc00a15 	stw	ra,40(sp)
    d744:	df000915 	stw	fp,36(sp)
    d748:	df000904 	addi	fp,sp,36
    d74c:	e13ffc15 	stw	r4,-16(fp)
    d750:	e17ffd15 	stw	r5,-12(fp)
    d754:	e1bffe15 	stw	r6,-8(fp)
    d758:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    d75c:	00bffa84 	movi	r2,-22
    d760:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    d764:	e0bffd17 	ldw	r2,-12(fp)
    d768:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    d76c:	e0bff817 	ldw	r2,-32(fp)
    d770:	10800808 	cmpgei	r2,r2,32
    d774:	1000271e 	bne	r2,zero,d814 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    d778:	0005303a 	rdctl	r2,status
    d77c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    d780:	e0fffb17 	ldw	r3,-20(fp)
    d784:	00bfff84 	movi	r2,-2
    d788:	1884703a 	and	r2,r3,r2
    d78c:	1001703a 	wrctl	status,r2
  
  return context;
    d790:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    d794:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    d798:	00800074 	movhi	r2,1
    d79c:	108e9e04 	addi	r2,r2,14968
    d7a0:	e0fff817 	ldw	r3,-32(fp)
    d7a4:	180690fa 	slli	r3,r3,3
    d7a8:	10c5883a 	add	r2,r2,r3
    d7ac:	e0fffe17 	ldw	r3,-8(fp)
    d7b0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    d7b4:	00800074 	movhi	r2,1
    d7b8:	108e9e04 	addi	r2,r2,14968
    d7bc:	e0fff817 	ldw	r3,-32(fp)
    d7c0:	180690fa 	slli	r3,r3,3
    d7c4:	10c5883a 	add	r2,r2,r3
    d7c8:	10800104 	addi	r2,r2,4
    d7cc:	e0ffff17 	ldw	r3,-4(fp)
    d7d0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    d7d4:	e0bffe17 	ldw	r2,-8(fp)
    d7d8:	10000526 	beq	r2,zero,d7f0 <alt_iic_isr_register+0xb4>
    d7dc:	e0bff817 	ldw	r2,-32(fp)
    d7e0:	100b883a 	mov	r5,r2
    d7e4:	e13ffc17 	ldw	r4,-16(fp)
    d7e8:	000d5dc0 	call	d5dc <alt_ic_irq_enable>
    d7ec:	00000406 	br	d800 <alt_iic_isr_register+0xc4>
    d7f0:	e0bff817 	ldw	r2,-32(fp)
    d7f4:	100b883a 	mov	r5,r2
    d7f8:	e13ffc17 	ldw	r4,-16(fp)
    d7fc:	000d6640 	call	d664 <alt_ic_irq_disable>
    d800:	e0bff715 	stw	r2,-36(fp)
    d804:	e0bffa17 	ldw	r2,-24(fp)
    d808:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    d80c:	e0bff917 	ldw	r2,-28(fp)
    d810:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    d814:	e0bff717 	ldw	r2,-36(fp)
}
    d818:	e037883a 	mov	sp,fp
    d81c:	dfc00117 	ldw	ra,4(sp)
    d820:	df000017 	ldw	fp,0(sp)
    d824:	dec00204 	addi	sp,sp,8
    d828:	f800283a 	ret

0000d82c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d82c:	defffe04 	addi	sp,sp,-8
    d830:	dfc00115 	stw	ra,4(sp)
    d834:	df000015 	stw	fp,0(sp)
    d838:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    d83c:	d0a00b17 	ldw	r2,-32724(gp)
    d840:	10000326 	beq	r2,zero,d850 <alt_get_errno+0x24>
    d844:	d0a00b17 	ldw	r2,-32724(gp)
    d848:	103ee83a 	callr	r2
    d84c:	00000106 	br	d854 <alt_get_errno+0x28>
    d850:	d0a6d404 	addi	r2,gp,-25776
}
    d854:	e037883a 	mov	sp,fp
    d858:	dfc00117 	ldw	ra,4(sp)
    d85c:	df000017 	ldw	fp,0(sp)
    d860:	dec00204 	addi	sp,sp,8
    d864:	f800283a 	ret

0000d868 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
    d868:	deffed04 	addi	sp,sp,-76
    d86c:	dfc01215 	stw	ra,72(sp)
    d870:	df001115 	stw	fp,68(sp)
    d874:	df001104 	addi	fp,sp,68
    d878:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    d87c:	e0bfff17 	ldw	r2,-4(fp)
    d880:	10000616 	blt	r2,zero,d89c <isatty+0x34>
    d884:	e0bfff17 	ldw	r2,-4(fp)
    d888:	10c00324 	muli	r3,r2,12
    d88c:	00800074 	movhi	r2,1
    d890:	10834004 	addi	r2,r2,3328
    d894:	1885883a 	add	r2,r3,r2
    d898:	00000106 	br	d8a0 <isatty+0x38>
    d89c:	0005883a 	mov	r2,zero
    d8a0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
    d8a4:	e0bfef17 	ldw	r2,-68(fp)
    d8a8:	10000e26 	beq	r2,zero,d8e4 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
    d8ac:	e0bfef17 	ldw	r2,-68(fp)
    d8b0:	10800017 	ldw	r2,0(r2)
    d8b4:	10800817 	ldw	r2,32(r2)
    d8b8:	1000021e 	bne	r2,zero,d8c4 <isatty+0x5c>
    {
      return 1;
    d8bc:	00800044 	movi	r2,1
    d8c0:	00000d06 	br	d8f8 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
    d8c4:	e0bff004 	addi	r2,fp,-64
    d8c8:	100b883a 	mov	r5,r2
    d8cc:	e13fff17 	ldw	r4,-4(fp)
    d8d0:	000d4dc0 	call	d4dc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
    d8d4:	e0bff117 	ldw	r2,-60(fp)
    d8d8:	10880020 	cmpeqi	r2,r2,8192
    d8dc:	10803fcc 	andi	r2,r2,255
    d8e0:	00000506 	br	d8f8 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
    d8e4:	000d82c0 	call	d82c <alt_get_errno>
    d8e8:	1007883a 	mov	r3,r2
    d8ec:	00801444 	movi	r2,81
    d8f0:	18800015 	stw	r2,0(r3)
    return 0;
    d8f4:	0005883a 	mov	r2,zero
  }
}
    d8f8:	e037883a 	mov	sp,fp
    d8fc:	dfc00117 	ldw	ra,4(sp)
    d900:	df000017 	ldw	fp,0(sp)
    d904:	dec00204 	addi	sp,sp,8
    d908:	f800283a 	ret

0000d90c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    d90c:	defffc04 	addi	sp,sp,-16
    d910:	df000315 	stw	fp,12(sp)
    d914:	df000304 	addi	fp,sp,12
    d918:	e13ffd15 	stw	r4,-12(fp)
    d91c:	e17ffe15 	stw	r5,-8(fp)
    d920:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    d924:	e0fffe17 	ldw	r3,-8(fp)
    d928:	e0bffd17 	ldw	r2,-12(fp)
    d92c:	18800c26 	beq	r3,r2,d960 <alt_load_section+0x54>
  {
    while( to != end )
    d930:	00000806 	br	d954 <alt_load_section+0x48>
    {
      *to++ = *from++;
    d934:	e0bffe17 	ldw	r2,-8(fp)
    d938:	10c00104 	addi	r3,r2,4
    d93c:	e0fffe15 	stw	r3,-8(fp)
    d940:	e0fffd17 	ldw	r3,-12(fp)
    d944:	19000104 	addi	r4,r3,4
    d948:	e13ffd15 	stw	r4,-12(fp)
    d94c:	18c00017 	ldw	r3,0(r3)
    d950:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    d954:	e0fffe17 	ldw	r3,-8(fp)
    d958:	e0bfff17 	ldw	r2,-4(fp)
    d95c:	18bff51e 	bne	r3,r2,d934 <__ram_exceptions_end+0xfbfed6e0>
    {
      *to++ = *from++;
    }
  }
}
    d960:	0001883a 	nop
    d964:	e037883a 	mov	sp,fp
    d968:	df000017 	ldw	fp,0(sp)
    d96c:	dec00104 	addi	sp,sp,4
    d970:	f800283a 	ret

0000d974 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    d974:	defffe04 	addi	sp,sp,-8
    d978:	dfc00115 	stw	ra,4(sp)
    d97c:	df000015 	stw	fp,0(sp)
    d980:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    d984:	01800074 	movhi	r6,1
    d988:	3187c804 	addi	r6,r6,7968
    d98c:	01400074 	movhi	r5,1
    d990:	29410d04 	addi	r5,r5,1076
    d994:	01000074 	movhi	r4,1
    d998:	2107c804 	addi	r4,r4,7968
    d99c:	000d90c0 	call	d90c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    d9a0:	018100b4 	movhi	r6,1026
    d9a4:	31809504 	addi	r6,r6,596
    d9a8:	014100b4 	movhi	r5,1026
    d9ac:	29400804 	addi	r5,r5,32
    d9b0:	01000034 	movhi	r4,0
    d9b4:	21000004 	addi	r4,r4,0
    d9b8:	000d90c0 	call	d90c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    d9bc:	01800074 	movhi	r6,1
    d9c0:	31810d04 	addi	r6,r6,1076
    d9c4:	01400074 	movhi	r5,1
    d9c8:	297fb904 	addi	r5,r5,-284
    d9cc:	01000074 	movhi	r4,1
    d9d0:	213fb904 	addi	r4,r4,-284
    d9d4:	000d90c0 	call	d90c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    d9d8:	000ef080 	call	ef08 <alt_dcache_flush_all>
  alt_icache_flush_all();
    d9dc:	000f0f00 	call	f0f0 <alt_icache_flush_all>
}
    d9e0:	0001883a 	nop
    d9e4:	e037883a 	mov	sp,fp
    d9e8:	dfc00117 	ldw	ra,4(sp)
    d9ec:	df000017 	ldw	fp,0(sp)
    d9f0:	dec00204 	addi	sp,sp,8
    d9f4:	f800283a 	ret

0000d9f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    d9f8:	defffe04 	addi	sp,sp,-8
    d9fc:	dfc00115 	stw	ra,4(sp)
    da00:	df000015 	stw	fp,0(sp)
    da04:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    da08:	d0a00b17 	ldw	r2,-32724(gp)
    da0c:	10000326 	beq	r2,zero,da1c <alt_get_errno+0x24>
    da10:	d0a00b17 	ldw	r2,-32724(gp)
    da14:	103ee83a 	callr	r2
    da18:	00000106 	br	da20 <alt_get_errno+0x28>
    da1c:	d0a6d404 	addi	r2,gp,-25776
}
    da20:	e037883a 	mov	sp,fp
    da24:	dfc00117 	ldw	ra,4(sp)
    da28:	df000017 	ldw	fp,0(sp)
    da2c:	dec00204 	addi	sp,sp,8
    da30:	f800283a 	ret

0000da34 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
    da34:	defff904 	addi	sp,sp,-28
    da38:	dfc00615 	stw	ra,24(sp)
    da3c:	df000515 	stw	fp,20(sp)
    da40:	df000504 	addi	fp,sp,20
    da44:	e13ffd15 	stw	r4,-12(fp)
    da48:	e17ffe15 	stw	r5,-8(fp)
    da4c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
    da50:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    da54:	e0bffd17 	ldw	r2,-12(fp)
    da58:	10000616 	blt	r2,zero,da74 <lseek+0x40>
    da5c:	e0bffd17 	ldw	r2,-12(fp)
    da60:	10c00324 	muli	r3,r2,12
    da64:	00800074 	movhi	r2,1
    da68:	10834004 	addi	r2,r2,3328
    da6c:	1885883a 	add	r2,r3,r2
    da70:	00000106 	br	da78 <lseek+0x44>
    da74:	0005883a 	mov	r2,zero
    da78:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
    da7c:	e0bffc17 	ldw	r2,-16(fp)
    da80:	10001026 	beq	r2,zero,dac4 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
    da84:	e0bffc17 	ldw	r2,-16(fp)
    da88:	10800017 	ldw	r2,0(r2)
    da8c:	10800717 	ldw	r2,28(r2)
    da90:	10000926 	beq	r2,zero,dab8 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
    da94:	e0bffc17 	ldw	r2,-16(fp)
    da98:	10800017 	ldw	r2,0(r2)
    da9c:	10800717 	ldw	r2,28(r2)
    daa0:	e1bfff17 	ldw	r6,-4(fp)
    daa4:	e17ffe17 	ldw	r5,-8(fp)
    daa8:	e13ffc17 	ldw	r4,-16(fp)
    daac:	103ee83a 	callr	r2
    dab0:	e0bffb15 	stw	r2,-20(fp)
    dab4:	00000506 	br	dacc <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
    dab8:	00bfde84 	movi	r2,-134
    dabc:	e0bffb15 	stw	r2,-20(fp)
    dac0:	00000206 	br	dacc <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
    dac4:	00bfebc4 	movi	r2,-81
    dac8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
    dacc:	e0bffb17 	ldw	r2,-20(fp)
    dad0:	1000070e 	bge	r2,zero,daf0 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
    dad4:	000d9f80 	call	d9f8 <alt_get_errno>
    dad8:	1007883a 	mov	r3,r2
    dadc:	e0bffb17 	ldw	r2,-20(fp)
    dae0:	0085c83a 	sub	r2,zero,r2
    dae4:	18800015 	stw	r2,0(r3)
    rc = -1;
    dae8:	00bfffc4 	movi	r2,-1
    daec:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
    daf0:	e0bffb17 	ldw	r2,-20(fp)
}
    daf4:	e037883a 	mov	sp,fp
    daf8:	dfc00117 	ldw	ra,4(sp)
    dafc:	df000017 	ldw	fp,0(sp)
    db00:	dec00204 	addi	sp,sp,8
    db04:	f800283a 	ret

0000db08 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    db08:	defffd04 	addi	sp,sp,-12
    db0c:	dfc00215 	stw	ra,8(sp)
    db10:	df000115 	stw	fp,4(sp)
    db14:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    db18:	0009883a 	mov	r4,zero
    db1c:	000e1e80 	call	e1e8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    db20:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    db24:	000e2200 	call	e220 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    db28:	01800074 	movhi	r6,1
    db2c:	31810304 	addi	r6,r6,1036
    db30:	01400074 	movhi	r5,1
    db34:	29410304 	addi	r5,r5,1036
    db38:	01000074 	movhi	r4,1
    db3c:	21010304 	addi	r4,r4,1036
    db40:	000f2840 	call	f284 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    db44:	000f0300 	call	f030 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    db48:	01000074 	movhi	r4,1
    db4c:	213c2404 	addi	r4,r4,-3952
    db50:	000f9e80 	call	f9e8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    db54:	d0a6d617 	ldw	r2,-25768(gp)
    db58:	d0e6d717 	ldw	r3,-25764(gp)
    db5c:	d126d817 	ldw	r4,-25760(gp)
    db60:	200d883a 	mov	r6,r4
    db64:	180b883a 	mov	r5,r3
    db68:	1009883a 	mov	r4,r2
    db6c:	0000af00 	call	af0 <main>
    db70:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    db74:	01000044 	movi	r4,1
    db78:	000d3a40 	call	d3a4 <close>
  exit (result);
    db7c:	e13fff17 	ldw	r4,-4(fp)
    db80:	000f9fc0 	call	f9fc <exit>

0000db84 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
    db84:	defffe04 	addi	sp,sp,-8
    db88:	df000115 	stw	fp,4(sp)
    db8c:	df000104 	addi	fp,sp,4
    db90:	e13fff15 	stw	r4,-4(fp)
}
    db94:	0001883a 	nop
    db98:	e037883a 	mov	sp,fp
    db9c:	df000017 	ldw	fp,0(sp)
    dba0:	dec00104 	addi	sp,sp,4
    dba4:	f800283a 	ret

0000dba8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
    dba8:	defffe04 	addi	sp,sp,-8
    dbac:	df000115 	stw	fp,4(sp)
    dbb0:	df000104 	addi	fp,sp,4
    dbb4:	e13fff15 	stw	r4,-4(fp)
}
    dbb8:	0001883a 	nop
    dbbc:	e037883a 	mov	sp,fp
    dbc0:	df000017 	ldw	fp,0(sp)
    dbc4:	dec00104 	addi	sp,sp,4
    dbc8:	f800283a 	ret

0000dbcc <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
    dbcc:	defff204 	addi	sp,sp,-56
    dbd0:	dfc00a15 	stw	ra,40(sp)
    dbd4:	df000915 	stw	fp,36(sp)
    dbd8:	df000904 	addi	fp,sp,36
    dbdc:	e13fff15 	stw	r4,-4(fp)
    dbe0:	e1400215 	stw	r5,8(fp)
    dbe4:	e1800315 	stw	r6,12(fp)
    dbe8:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
    dbec:	e0800204 	addi	r2,fp,8
    dbf0:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    dbf4:	e0bfff17 	ldw	r2,-4(fp)
    dbf8:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
    dbfc:	00006f06 	br	ddbc <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
    dc00:	e0bff807 	ldb	r2,-32(fp)
    dc04:	10800960 	cmpeqi	r2,r2,37
    dc08:	1000041e 	bne	r2,zero,dc1c <alt_printf+0x50>
        {
            alt_putchar(c);
    dc0c:	e0bff807 	ldb	r2,-32(fp)
    dc10:	1009883a 	mov	r4,r2
    dc14:	000ddf80 	call	ddf8 <alt_putchar>
    dc18:	00006806 	br	ddbc <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
    dc1c:	e0bff717 	ldw	r2,-36(fp)
    dc20:	10c00044 	addi	r3,r2,1
    dc24:	e0fff715 	stw	r3,-36(fp)
    dc28:	10800003 	ldbu	r2,0(r2)
    dc2c:	e0bff805 	stb	r2,-32(fp)
    dc30:	e0bff807 	ldb	r2,-32(fp)
    dc34:	10006926 	beq	r2,zero,dddc <alt_printf+0x210>
            {
                if (c == '%')
    dc38:	e0bff807 	ldb	r2,-32(fp)
    dc3c:	10800958 	cmpnei	r2,r2,37
    dc40:	1000041e 	bne	r2,zero,dc54 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
    dc44:	e0bff807 	ldb	r2,-32(fp)
    dc48:	1009883a 	mov	r4,r2
    dc4c:	000ddf80 	call	ddf8 <alt_putchar>
    dc50:	00005a06 	br	ddbc <alt_printf+0x1f0>
                } 
                else if (c == 'c')
    dc54:	e0bff807 	ldb	r2,-32(fp)
    dc58:	108018d8 	cmpnei	r2,r2,99
    dc5c:	1000081e 	bne	r2,zero,dc80 <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
    dc60:	e0bffe17 	ldw	r2,-8(fp)
    dc64:	10c00104 	addi	r3,r2,4
    dc68:	e0fffe15 	stw	r3,-8(fp)
    dc6c:	10800017 	ldw	r2,0(r2)
    dc70:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
    dc74:	e13ffd17 	ldw	r4,-12(fp)
    dc78:	000ddf80 	call	ddf8 <alt_putchar>
    dc7c:	00004f06 	br	ddbc <alt_printf+0x1f0>
                }
                else if (c == 'x')
    dc80:	e0bff807 	ldb	r2,-32(fp)
    dc84:	10801e18 	cmpnei	r2,r2,120
    dc88:	1000341e 	bne	r2,zero,dd5c <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
    dc8c:	e0bffe17 	ldw	r2,-8(fp)
    dc90:	10c00104 	addi	r3,r2,4
    dc94:	e0fffe15 	stw	r3,-8(fp)
    dc98:	10800017 	ldw	r2,0(r2)
    dc9c:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
    dca0:	e0bffb17 	ldw	r2,-20(fp)
    dca4:	1000031e 	bne	r2,zero,dcb4 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
    dca8:	01000c04 	movi	r4,48
    dcac:	000ddf80 	call	ddf8 <alt_putchar>
                        continue;
    dcb0:	00004206 	br	ddbc <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
    dcb4:	00800704 	movi	r2,28
    dcb8:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
    dcbc:	00000306 	br	dccc <alt_printf+0x100>
                        digit_shift -= 4;
    dcc0:	e0bff917 	ldw	r2,-28(fp)
    dcc4:	10bfff04 	addi	r2,r2,-4
    dcc8:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
    dccc:	00c003c4 	movi	r3,15
    dcd0:	e0bff917 	ldw	r2,-28(fp)
    dcd4:	1884983a 	sll	r2,r3,r2
    dcd8:	1007883a 	mov	r3,r2
    dcdc:	e0bffb17 	ldw	r2,-20(fp)
    dce0:	1884703a 	and	r2,r3,r2
    dce4:	103ff626 	beq	r2,zero,dcc0 <__ram_exceptions_end+0xfbfeda6c>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    dce8:	00001906 	br	dd50 <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
    dcec:	00c003c4 	movi	r3,15
    dcf0:	e0bff917 	ldw	r2,-28(fp)
    dcf4:	1884983a 	sll	r2,r3,r2
    dcf8:	1007883a 	mov	r3,r2
    dcfc:	e0bffb17 	ldw	r2,-20(fp)
    dd00:	1886703a 	and	r3,r3,r2
    dd04:	e0bff917 	ldw	r2,-28(fp)
    dd08:	1884d83a 	srl	r2,r3,r2
    dd0c:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
    dd10:	e0bffc17 	ldw	r2,-16(fp)
    dd14:	108002a8 	cmpgeui	r2,r2,10
    dd18:	1000041e 	bne	r2,zero,dd2c <alt_printf+0x160>
                            c = '0' + digit;
    dd1c:	e0bffc17 	ldw	r2,-16(fp)
    dd20:	10800c04 	addi	r2,r2,48
    dd24:	e0bff805 	stb	r2,-32(fp)
    dd28:	00000306 	br	dd38 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
    dd2c:	e0bffc17 	ldw	r2,-16(fp)
    dd30:	108015c4 	addi	r2,r2,87
    dd34:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
    dd38:	e0bff807 	ldb	r2,-32(fp)
    dd3c:	1009883a 	mov	r4,r2
    dd40:	000ddf80 	call	ddf8 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
    dd44:	e0bff917 	ldw	r2,-28(fp)
    dd48:	10bfff04 	addi	r2,r2,-4
    dd4c:	e0bff915 	stw	r2,-28(fp)
    dd50:	e0bff917 	ldw	r2,-28(fp)
    dd54:	103fe50e 	bge	r2,zero,dcec <__ram_exceptions_end+0xfbfeda98>
    dd58:	00001806 	br	ddbc <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
    dd5c:	e0bff807 	ldb	r2,-32(fp)
    dd60:	10801cd8 	cmpnei	r2,r2,115
    dd64:	1000151e 	bne	r2,zero,ddbc <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
    dd68:	e0bffe17 	ldw	r2,-8(fp)
    dd6c:	10c00104 	addi	r3,r2,4
    dd70:	e0fffe15 	stw	r3,-8(fp)
    dd74:	10800017 	ldw	r2,0(r2)
    dd78:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
    dd7c:	00000906 	br	dda4 <alt_printf+0x1d8>
                      alt_putchar(*s++);
    dd80:	e0bffa17 	ldw	r2,-24(fp)
    dd84:	10c00044 	addi	r3,r2,1
    dd88:	e0fffa15 	stw	r3,-24(fp)
    dd8c:	10800003 	ldbu	r2,0(r2)
    dd90:	10803fcc 	andi	r2,r2,255
    dd94:	1080201c 	xori	r2,r2,128
    dd98:	10bfe004 	addi	r2,r2,-128
    dd9c:	1009883a 	mov	r4,r2
    dda0:	000ddf80 	call	ddf8 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
    dda4:	e0bffa17 	ldw	r2,-24(fp)
    dda8:	10800003 	ldbu	r2,0(r2)
    ddac:	10803fcc 	andi	r2,r2,255
    ddb0:	1080201c 	xori	r2,r2,128
    ddb4:	10bfe004 	addi	r2,r2,-128
    ddb8:	103ff11e 	bne	r2,zero,dd80 <__ram_exceptions_end+0xfbfedb2c>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
    ddbc:	e0bff717 	ldw	r2,-36(fp)
    ddc0:	10c00044 	addi	r3,r2,1
    ddc4:	e0fff715 	stw	r3,-36(fp)
    ddc8:	10800003 	ldbu	r2,0(r2)
    ddcc:	e0bff805 	stb	r2,-32(fp)
    ddd0:	e0bff807 	ldb	r2,-32(fp)
    ddd4:	103f8a1e 	bne	r2,zero,dc00 <__ram_exceptions_end+0xfbfed9ac>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
    ddd8:	00000106 	br	dde0 <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
    dddc:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
    dde0:	0001883a 	nop
    dde4:	e037883a 	mov	sp,fp
    dde8:	dfc00117 	ldw	ra,4(sp)
    ddec:	df000017 	ldw	fp,0(sp)
    ddf0:	dec00504 	addi	sp,sp,20
    ddf4:	f800283a 	ret

0000ddf8 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
    ddf8:	defffd04 	addi	sp,sp,-12
    ddfc:	dfc00215 	stw	ra,8(sp)
    de00:	df000115 	stw	fp,4(sp)
    de04:	df000104 	addi	fp,sp,4
    de08:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
    de0c:	d0a00117 	ldw	r2,-32764(gp)
    de10:	10800217 	ldw	r2,8(r2)
    de14:	100b883a 	mov	r5,r2
    de18:	e13fff17 	ldw	r4,-4(fp)
    de1c:	000fb500 	call	fb50 <putc>
#endif
#endif
}
    de20:	e037883a 	mov	sp,fp
    de24:	dfc00117 	ldw	ra,4(sp)
    de28:	df000017 	ldw	fp,0(sp)
    de2c:	dec00204 	addi	sp,sp,8
    de30:	f800283a 	ret

0000de34 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    de34:	defffe04 	addi	sp,sp,-8
    de38:	dfc00115 	stw	ra,4(sp)
    de3c:	df000015 	stw	fp,0(sp)
    de40:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    de44:	d0a00b17 	ldw	r2,-32724(gp)
    de48:	10000326 	beq	r2,zero,de58 <alt_get_errno+0x24>
    de4c:	d0a00b17 	ldw	r2,-32724(gp)
    de50:	103ee83a 	callr	r2
    de54:	00000106 	br	de5c <alt_get_errno+0x28>
    de58:	d0a6d404 	addi	r2,gp,-25776
}
    de5c:	e037883a 	mov	sp,fp
    de60:	dfc00117 	ldw	ra,4(sp)
    de64:	df000017 	ldw	fp,0(sp)
    de68:	dec00204 	addi	sp,sp,8
    de6c:	f800283a 	ret

0000de70 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
    de70:	defff904 	addi	sp,sp,-28
    de74:	dfc00615 	stw	ra,24(sp)
    de78:	df000515 	stw	fp,20(sp)
    de7c:	df000504 	addi	fp,sp,20
    de80:	e13ffd15 	stw	r4,-12(fp)
    de84:	e17ffe15 	stw	r5,-8(fp)
    de88:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    de8c:	e0bffd17 	ldw	r2,-12(fp)
    de90:	10000616 	blt	r2,zero,deac <read+0x3c>
    de94:	e0bffd17 	ldw	r2,-12(fp)
    de98:	10c00324 	muli	r3,r2,12
    de9c:	00800074 	movhi	r2,1
    dea0:	10834004 	addi	r2,r2,3328
    dea4:	1885883a 	add	r2,r3,r2
    dea8:	00000106 	br	deb0 <read+0x40>
    deac:	0005883a 	mov	r2,zero
    deb0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    deb4:	e0bffb17 	ldw	r2,-20(fp)
    deb8:	10002226 	beq	r2,zero,df44 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    debc:	e0bffb17 	ldw	r2,-20(fp)
    dec0:	10800217 	ldw	r2,8(r2)
    dec4:	108000cc 	andi	r2,r2,3
    dec8:	10800060 	cmpeqi	r2,r2,1
    decc:	1000181e 	bne	r2,zero,df30 <read+0xc0>
        (fd->dev->read))
    ded0:	e0bffb17 	ldw	r2,-20(fp)
    ded4:	10800017 	ldw	r2,0(r2)
    ded8:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
    dedc:	10001426 	beq	r2,zero,df30 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
    dee0:	e0bffb17 	ldw	r2,-20(fp)
    dee4:	10800017 	ldw	r2,0(r2)
    dee8:	10800517 	ldw	r2,20(r2)
    deec:	e0ffff17 	ldw	r3,-4(fp)
    def0:	180d883a 	mov	r6,r3
    def4:	e17ffe17 	ldw	r5,-8(fp)
    def8:	e13ffb17 	ldw	r4,-20(fp)
    defc:	103ee83a 	callr	r2
    df00:	e0bffc15 	stw	r2,-16(fp)
    df04:	e0bffc17 	ldw	r2,-16(fp)
    df08:	1000070e 	bge	r2,zero,df28 <read+0xb8>
        {
          ALT_ERRNO = -rval;
    df0c:	000de340 	call	de34 <alt_get_errno>
    df10:	1007883a 	mov	r3,r2
    df14:	e0bffc17 	ldw	r2,-16(fp)
    df18:	0085c83a 	sub	r2,zero,r2
    df1c:	18800015 	stw	r2,0(r3)
          return -1;
    df20:	00bfffc4 	movi	r2,-1
    df24:	00000c06 	br	df58 <read+0xe8>
        }
        return rval;
    df28:	e0bffc17 	ldw	r2,-16(fp)
    df2c:	00000a06 	br	df58 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
    df30:	000de340 	call	de34 <alt_get_errno>
    df34:	1007883a 	mov	r3,r2
    df38:	00800344 	movi	r2,13
    df3c:	18800015 	stw	r2,0(r3)
    df40:	00000406 	br	df54 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
    df44:	000de340 	call	de34 <alt_get_errno>
    df48:	1007883a 	mov	r3,r2
    df4c:	00801444 	movi	r2,81
    df50:	18800015 	stw	r2,0(r3)
  }
  return -1;
    df54:	00bfffc4 	movi	r2,-1
}
    df58:	e037883a 	mov	sp,fp
    df5c:	dfc00117 	ldw	ra,4(sp)
    df60:	df000017 	ldw	fp,0(sp)
    df64:	dec00204 	addi	sp,sp,8
    df68:	f800283a 	ret

0000df6c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    df6c:	defffe04 	addi	sp,sp,-8
    df70:	df000115 	stw	fp,4(sp)
    df74:	df000104 	addi	fp,sp,4
    df78:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    df7c:	e0bfff17 	ldw	r2,-4(fp)
    df80:	108000d0 	cmplti	r2,r2,3
    df84:	10000d1e 	bne	r2,zero,dfbc <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    df88:	00800074 	movhi	r2,1
    df8c:	10834004 	addi	r2,r2,3328
    df90:	e0ffff17 	ldw	r3,-4(fp)
    df94:	18c00324 	muli	r3,r3,12
    df98:	10c5883a 	add	r2,r2,r3
    df9c:	10800204 	addi	r2,r2,8
    dfa0:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    dfa4:	00800074 	movhi	r2,1
    dfa8:	10834004 	addi	r2,r2,3328
    dfac:	e0ffff17 	ldw	r3,-4(fp)
    dfb0:	18c00324 	muli	r3,r3,12
    dfb4:	10c5883a 	add	r2,r2,r3
    dfb8:	10000015 	stw	zero,0(r2)
  }
}
    dfbc:	0001883a 	nop
    dfc0:	e037883a 	mov	sp,fp
    dfc4:	df000017 	ldw	fp,0(sp)
    dfc8:	dec00104 	addi	sp,sp,4
    dfcc:	f800283a 	ret

0000dfd0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
    dfd0:	defff904 	addi	sp,sp,-28
    dfd4:	df000615 	stw	fp,24(sp)
    dfd8:	df000604 	addi	fp,sp,24
    dfdc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    dfe0:	0005303a 	rdctl	r2,status
    dfe4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    dfe8:	e0fffe17 	ldw	r3,-8(fp)
    dfec:	00bfff84 	movi	r2,-2
    dff0:	1884703a 	and	r2,r3,r2
    dff4:	1001703a 	wrctl	status,r2
  
  return context;
    dff8:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
    dffc:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
    e000:	d0a00d17 	ldw	r2,-32716(gp)
    e004:	10c000c4 	addi	r3,r2,3
    e008:	00bfff04 	movi	r2,-4
    e00c:	1884703a 	and	r2,r3,r2
    e010:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
    e014:	d0e00d17 	ldw	r3,-32716(gp)
    e018:	e0bfff17 	ldw	r2,-4(fp)
    e01c:	1887883a 	add	r3,r3,r2
    e020:	00810034 	movhi	r2,1024
    e024:	10800004 	addi	r2,r2,0
    e028:	10c0062e 	bgeu	r2,r3,e044 <sbrk+0x74>
    e02c:	e0bffb17 	ldw	r2,-20(fp)
    e030:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    e034:	e0bffa17 	ldw	r2,-24(fp)
    e038:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
    e03c:	00bfffc4 	movi	r2,-1
    e040:	00000b06 	br	e070 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
    e044:	d0a00d17 	ldw	r2,-32716(gp)
    e048:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
    e04c:	d0e00d17 	ldw	r3,-32716(gp)
    e050:	e0bfff17 	ldw	r2,-4(fp)
    e054:	1885883a 	add	r2,r3,r2
    e058:	d0a00d15 	stw	r2,-32716(gp)
    e05c:	e0bffb17 	ldw	r2,-20(fp)
    e060:	e0bffc15 	stw	r2,-16(fp)
    e064:	e0bffc17 	ldw	r2,-16(fp)
    e068:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
    e06c:	e0bffd17 	ldw	r2,-12(fp)
} 
    e070:	e037883a 	mov	sp,fp
    e074:	df000017 	ldw	fp,0(sp)
    e078:	dec00104 	addi	sp,sp,4
    e07c:	f800283a 	ret

0000e080 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    e080:	defffe04 	addi	sp,sp,-8
    e084:	dfc00115 	stw	ra,4(sp)
    e088:	df000015 	stw	fp,0(sp)
    e08c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    e090:	d0a00b17 	ldw	r2,-32724(gp)
    e094:	10000326 	beq	r2,zero,e0a4 <alt_get_errno+0x24>
    e098:	d0a00b17 	ldw	r2,-32724(gp)
    e09c:	103ee83a 	callr	r2
    e0a0:	00000106 	br	e0a8 <alt_get_errno+0x28>
    e0a4:	d0a6d404 	addi	r2,gp,-25776
}
    e0a8:	e037883a 	mov	sp,fp
    e0ac:	dfc00117 	ldw	ra,4(sp)
    e0b0:	df000017 	ldw	fp,0(sp)
    e0b4:	dec00204 	addi	sp,sp,8
    e0b8:	f800283a 	ret

0000e0bc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    e0bc:	defff904 	addi	sp,sp,-28
    e0c0:	dfc00615 	stw	ra,24(sp)
    e0c4:	df000515 	stw	fp,20(sp)
    e0c8:	df000504 	addi	fp,sp,20
    e0cc:	e13ffd15 	stw	r4,-12(fp)
    e0d0:	e17ffe15 	stw	r5,-8(fp)
    e0d4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    e0d8:	e0bffd17 	ldw	r2,-12(fp)
    e0dc:	10000616 	blt	r2,zero,e0f8 <write+0x3c>
    e0e0:	e0bffd17 	ldw	r2,-12(fp)
    e0e4:	10c00324 	muli	r3,r2,12
    e0e8:	00800074 	movhi	r2,1
    e0ec:	10834004 	addi	r2,r2,3328
    e0f0:	1885883a 	add	r2,r3,r2
    e0f4:	00000106 	br	e0fc <write+0x40>
    e0f8:	0005883a 	mov	r2,zero
    e0fc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    e100:	e0bffb17 	ldw	r2,-20(fp)
    e104:	10002126 	beq	r2,zero,e18c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    e108:	e0bffb17 	ldw	r2,-20(fp)
    e10c:	10800217 	ldw	r2,8(r2)
    e110:	108000cc 	andi	r2,r2,3
    e114:	10001826 	beq	r2,zero,e178 <write+0xbc>
    e118:	e0bffb17 	ldw	r2,-20(fp)
    e11c:	10800017 	ldw	r2,0(r2)
    e120:	10800617 	ldw	r2,24(r2)
    e124:	10001426 	beq	r2,zero,e178 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    e128:	e0bffb17 	ldw	r2,-20(fp)
    e12c:	10800017 	ldw	r2,0(r2)
    e130:	10800617 	ldw	r2,24(r2)
    e134:	e0ffff17 	ldw	r3,-4(fp)
    e138:	180d883a 	mov	r6,r3
    e13c:	e17ffe17 	ldw	r5,-8(fp)
    e140:	e13ffb17 	ldw	r4,-20(fp)
    e144:	103ee83a 	callr	r2
    e148:	e0bffc15 	stw	r2,-16(fp)
    e14c:	e0bffc17 	ldw	r2,-16(fp)
    e150:	1000070e 	bge	r2,zero,e170 <write+0xb4>
      {
        ALT_ERRNO = -rval;
    e154:	000e0800 	call	e080 <alt_get_errno>
    e158:	1007883a 	mov	r3,r2
    e15c:	e0bffc17 	ldw	r2,-16(fp)
    e160:	0085c83a 	sub	r2,zero,r2
    e164:	18800015 	stw	r2,0(r3)
        return -1;
    e168:	00bfffc4 	movi	r2,-1
    e16c:	00000c06 	br	e1a0 <write+0xe4>
      }
      return rval;
    e170:	e0bffc17 	ldw	r2,-16(fp)
    e174:	00000a06 	br	e1a0 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    e178:	000e0800 	call	e080 <alt_get_errno>
    e17c:	1007883a 	mov	r3,r2
    e180:	00800344 	movi	r2,13
    e184:	18800015 	stw	r2,0(r3)
    e188:	00000406 	br	e19c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    e18c:	000e0800 	call	e080 <alt_get_errno>
    e190:	1007883a 	mov	r3,r2
    e194:	00801444 	movi	r2,81
    e198:	18800015 	stw	r2,0(r3)
  }
  return -1;
    e19c:	00bfffc4 	movi	r2,-1
}
    e1a0:	e037883a 	mov	sp,fp
    e1a4:	dfc00117 	ldw	ra,4(sp)
    e1a8:	df000017 	ldw	fp,0(sp)
    e1ac:	dec00204 	addi	sp,sp,8
    e1b0:	f800283a 	ret

0000e1b4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    e1b4:	defffd04 	addi	sp,sp,-12
    e1b8:	dfc00215 	stw	ra,8(sp)
    e1bc:	df000115 	stw	fp,4(sp)
    e1c0:	df000104 	addi	fp,sp,4
    e1c4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    e1c8:	d1600804 	addi	r5,gp,-32736
    e1cc:	e13fff17 	ldw	r4,-4(fp)
    e1d0:	000ef8c0 	call	ef8c <alt_dev_llist_insert>
}
    e1d4:	e037883a 	mov	sp,fp
    e1d8:	dfc00117 	ldw	ra,4(sp)
    e1dc:	df000017 	ldw	fp,0(sp)
    e1e0:	dec00204 	addi	sp,sp,8
    e1e4:	f800283a 	ret

0000e1e8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    e1e8:	defffd04 	addi	sp,sp,-12
    e1ec:	dfc00215 	stw	ra,8(sp)
    e1f0:	df000115 	stw	fp,4(sp)
    e1f4:	df000104 	addi	fp,sp,4
    e1f8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    e1fc:	000f6f80 	call	f6f8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    e200:	00800044 	movi	r2,1
    e204:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    e208:	0001883a 	nop
    e20c:	e037883a 	mov	sp,fp
    e210:	dfc00117 	ldw	ra,4(sp)
    e214:	df000017 	ldw	fp,0(sp)
    e218:	dec00204 	addi	sp,sp,8
    e21c:	f800283a 	ret

0000e220 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    e220:	defffe04 	addi	sp,sp,-8
    e224:	dfc00115 	stw	ra,4(sp)
    e228:	df000015 	stw	fp,0(sp)
    e22c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    e230:	01c0fa04 	movi	r7,1000
    e234:	018000c4 	movi	r6,3
    e238:	000b883a 	mov	r5,zero
    e23c:	01010134 	movhi	r4,1028
    e240:	21040004 	addi	r4,r4,4096
    e244:	000ed600 	call	ed60 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    e248:	01800084 	movi	r6,2
    e24c:	000b883a 	mov	r5,zero
    e250:	01000074 	movhi	r4,1
    e254:	2103aa04 	addi	r4,r4,3752
    e258:	000e3e40 	call	e3e4 <altera_avalon_jtag_uart_init>
    e25c:	01000074 	movhi	r4,1
    e260:	2103a004 	addi	r4,r4,3712
    e264:	000e1b40 	call	e1b4 <alt_dev_reg>
}
    e268:	0001883a 	nop
    e26c:	e037883a 	mov	sp,fp
    e270:	dfc00117 	ldw	ra,4(sp)
    e274:	df000017 	ldw	fp,0(sp)
    e278:	dec00204 	addi	sp,sp,8
    e27c:	f800283a 	ret

0000e280 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    e280:	defffa04 	addi	sp,sp,-24
    e284:	dfc00515 	stw	ra,20(sp)
    e288:	df000415 	stw	fp,16(sp)
    e28c:	df000404 	addi	fp,sp,16
    e290:	e13ffd15 	stw	r4,-12(fp)
    e294:	e17ffe15 	stw	r5,-8(fp)
    e298:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    e29c:	e0bffd17 	ldw	r2,-12(fp)
    e2a0:	10800017 	ldw	r2,0(r2)
    e2a4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    e2a8:	e0bffc17 	ldw	r2,-16(fp)
    e2ac:	10c00a04 	addi	r3,r2,40
    e2b0:	e0bffd17 	ldw	r2,-12(fp)
    e2b4:	10800217 	ldw	r2,8(r2)
    e2b8:	100f883a 	mov	r7,r2
    e2bc:	e1bfff17 	ldw	r6,-4(fp)
    e2c0:	e17ffe17 	ldw	r5,-8(fp)
    e2c4:	1809883a 	mov	r4,r3
    e2c8:	000e8a80 	call	e8a8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    e2cc:	e037883a 	mov	sp,fp
    e2d0:	dfc00117 	ldw	ra,4(sp)
    e2d4:	df000017 	ldw	fp,0(sp)
    e2d8:	dec00204 	addi	sp,sp,8
    e2dc:	f800283a 	ret

0000e2e0 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    e2e0:	defffa04 	addi	sp,sp,-24
    e2e4:	dfc00515 	stw	ra,20(sp)
    e2e8:	df000415 	stw	fp,16(sp)
    e2ec:	df000404 	addi	fp,sp,16
    e2f0:	e13ffd15 	stw	r4,-12(fp)
    e2f4:	e17ffe15 	stw	r5,-8(fp)
    e2f8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    e2fc:	e0bffd17 	ldw	r2,-12(fp)
    e300:	10800017 	ldw	r2,0(r2)
    e304:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    e308:	e0bffc17 	ldw	r2,-16(fp)
    e30c:	10c00a04 	addi	r3,r2,40
    e310:	e0bffd17 	ldw	r2,-12(fp)
    e314:	10800217 	ldw	r2,8(r2)
    e318:	100f883a 	mov	r7,r2
    e31c:	e1bfff17 	ldw	r6,-4(fp)
    e320:	e17ffe17 	ldw	r5,-8(fp)
    e324:	1809883a 	mov	r4,r3
    e328:	000eac40 	call	eac4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    e32c:	e037883a 	mov	sp,fp
    e330:	dfc00117 	ldw	ra,4(sp)
    e334:	df000017 	ldw	fp,0(sp)
    e338:	dec00204 	addi	sp,sp,8
    e33c:	f800283a 	ret

0000e340 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
    e340:	defffc04 	addi	sp,sp,-16
    e344:	dfc00315 	stw	ra,12(sp)
    e348:	df000215 	stw	fp,8(sp)
    e34c:	df000204 	addi	fp,sp,8
    e350:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    e354:	e0bfff17 	ldw	r2,-4(fp)
    e358:	10800017 	ldw	r2,0(r2)
    e35c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
    e360:	e0bffe17 	ldw	r2,-8(fp)
    e364:	10c00a04 	addi	r3,r2,40
    e368:	e0bfff17 	ldw	r2,-4(fp)
    e36c:	10800217 	ldw	r2,8(r2)
    e370:	100b883a 	mov	r5,r2
    e374:	1809883a 	mov	r4,r3
    e378:	000e7500 	call	e750 <altera_avalon_jtag_uart_close>
}
    e37c:	e037883a 	mov	sp,fp
    e380:	dfc00117 	ldw	ra,4(sp)
    e384:	df000017 	ldw	fp,0(sp)
    e388:	dec00204 	addi	sp,sp,8
    e38c:	f800283a 	ret

0000e390 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
    e390:	defffa04 	addi	sp,sp,-24
    e394:	dfc00515 	stw	ra,20(sp)
    e398:	df000415 	stw	fp,16(sp)
    e39c:	df000404 	addi	fp,sp,16
    e3a0:	e13ffd15 	stw	r4,-12(fp)
    e3a4:	e17ffe15 	stw	r5,-8(fp)
    e3a8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
    e3ac:	e0bffd17 	ldw	r2,-12(fp)
    e3b0:	10800017 	ldw	r2,0(r2)
    e3b4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
    e3b8:	e0bffc17 	ldw	r2,-16(fp)
    e3bc:	10800a04 	addi	r2,r2,40
    e3c0:	e1bfff17 	ldw	r6,-4(fp)
    e3c4:	e17ffe17 	ldw	r5,-8(fp)
    e3c8:	1009883a 	mov	r4,r2
    e3cc:	000e7b80 	call	e7b8 <altera_avalon_jtag_uart_ioctl>
}
    e3d0:	e037883a 	mov	sp,fp
    e3d4:	dfc00117 	ldw	ra,4(sp)
    e3d8:	df000017 	ldw	fp,0(sp)
    e3dc:	dec00204 	addi	sp,sp,8
    e3e0:	f800283a 	ret

0000e3e4 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
    e3e4:	defffa04 	addi	sp,sp,-24
    e3e8:	dfc00515 	stw	ra,20(sp)
    e3ec:	df000415 	stw	fp,16(sp)
    e3f0:	df000404 	addi	fp,sp,16
    e3f4:	e13ffd15 	stw	r4,-12(fp)
    e3f8:	e17ffe15 	stw	r5,-8(fp)
    e3fc:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    e400:	e0bffd17 	ldw	r2,-12(fp)
    e404:	00c00044 	movi	r3,1
    e408:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
    e40c:	e0bffd17 	ldw	r2,-12(fp)
    e410:	10800017 	ldw	r2,0(r2)
    e414:	10800104 	addi	r2,r2,4
    e418:	1007883a 	mov	r3,r2
    e41c:	e0bffd17 	ldw	r2,-12(fp)
    e420:	10800817 	ldw	r2,32(r2)
    e424:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
    e428:	e0bffe17 	ldw	r2,-8(fp)
    e42c:	e0ffff17 	ldw	r3,-4(fp)
    e430:	d8000015 	stw	zero,0(sp)
    e434:	e1fffd17 	ldw	r7,-12(fp)
    e438:	01800074 	movhi	r6,1
    e43c:	31b92904 	addi	r6,r6,-7004
    e440:	180b883a 	mov	r5,r3
    e444:	1009883a 	mov	r4,r2
    e448:	000d58c0 	call	d58c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
    e44c:	e0bffd17 	ldw	r2,-12(fp)
    e450:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
    e454:	e0bffd17 	ldw	r2,-12(fp)
    e458:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    e45c:	d0e6da17 	ldw	r3,-25752(gp)
    e460:	e1fffd17 	ldw	r7,-12(fp)
    e464:	01800074 	movhi	r6,1
    e468:	31b9ac04 	addi	r6,r6,-6480
    e46c:	180b883a 	mov	r5,r3
    e470:	1009883a 	mov	r4,r2
    e474:	000eddc0 	call	eddc <alt_alarm_start>
    e478:	1000040e 	bge	r2,zero,e48c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
    e47c:	e0fffd17 	ldw	r3,-12(fp)
    e480:	00a00034 	movhi	r2,32768
    e484:	10bfffc4 	addi	r2,r2,-1
    e488:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
    e48c:	0001883a 	nop
    e490:	e037883a 	mov	sp,fp
    e494:	dfc00117 	ldw	ra,4(sp)
    e498:	df000017 	ldw	fp,0(sp)
    e49c:	dec00204 	addi	sp,sp,8
    e4a0:	f800283a 	ret

0000e4a4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
    e4a4:	defff804 	addi	sp,sp,-32
    e4a8:	df000715 	stw	fp,28(sp)
    e4ac:	df000704 	addi	fp,sp,28
    e4b0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
    e4b4:	e0bfff17 	ldw	r2,-4(fp)
    e4b8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
    e4bc:	e0bffb17 	ldw	r2,-20(fp)
    e4c0:	10800017 	ldw	r2,0(r2)
    e4c4:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    e4c8:	e0bffc17 	ldw	r2,-16(fp)
    e4cc:	10800104 	addi	r2,r2,4
    e4d0:	10800037 	ldwio	r2,0(r2)
    e4d4:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
    e4d8:	e0bffd17 	ldw	r2,-12(fp)
    e4dc:	1080c00c 	andi	r2,r2,768
    e4e0:	10006d26 	beq	r2,zero,e698 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
    e4e4:	e0bffd17 	ldw	r2,-12(fp)
    e4e8:	1080400c 	andi	r2,r2,256
    e4ec:	10003526 	beq	r2,zero,e5c4 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
    e4f0:	00800074 	movhi	r2,1
    e4f4:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e4f8:	e0bffb17 	ldw	r2,-20(fp)
    e4fc:	10800a17 	ldw	r2,40(r2)
    e500:	10800044 	addi	r2,r2,1
    e504:	1081ffcc 	andi	r2,r2,2047
    e508:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
    e50c:	e0bffb17 	ldw	r2,-20(fp)
    e510:	10c00b17 	ldw	r3,44(r2)
    e514:	e0bffe17 	ldw	r2,-8(fp)
    e518:	18801526 	beq	r3,r2,e570 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    e51c:	e0bffc17 	ldw	r2,-16(fp)
    e520:	10800037 	ldwio	r2,0(r2)
    e524:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
    e528:	e0bff917 	ldw	r2,-28(fp)
    e52c:	10a0000c 	andi	r2,r2,32768
    e530:	10001126 	beq	r2,zero,e578 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    e534:	e0bffb17 	ldw	r2,-20(fp)
    e538:	10800a17 	ldw	r2,40(r2)
    e53c:	e0fff917 	ldw	r3,-28(fp)
    e540:	1809883a 	mov	r4,r3
    e544:	e0fffb17 	ldw	r3,-20(fp)
    e548:	1885883a 	add	r2,r3,r2
    e54c:	10800e04 	addi	r2,r2,56
    e550:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e554:	e0bffb17 	ldw	r2,-20(fp)
    e558:	10800a17 	ldw	r2,40(r2)
    e55c:	10800044 	addi	r2,r2,1
    e560:	10c1ffcc 	andi	r3,r2,2047
    e564:	e0bffb17 	ldw	r2,-20(fp)
    e568:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
    e56c:	003fe206 	br	e4f8 <__ram_exceptions_end+0xfbfee2a4>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
    e570:	0001883a 	nop
    e574:	00000106 	br	e57c <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
    e578:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
    e57c:	e0bff917 	ldw	r2,-28(fp)
    e580:	10bfffec 	andhi	r2,r2,65535
    e584:	10000f26 	beq	r2,zero,e5c4 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    e588:	e0bffb17 	ldw	r2,-20(fp)
    e58c:	10c00817 	ldw	r3,32(r2)
    e590:	00bfff84 	movi	r2,-2
    e594:	1886703a 	and	r3,r3,r2
    e598:	e0bffb17 	ldw	r2,-20(fp)
    e59c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
    e5a0:	e0bffc17 	ldw	r2,-16(fp)
    e5a4:	10800104 	addi	r2,r2,4
    e5a8:	1007883a 	mov	r3,r2
    e5ac:	e0bffb17 	ldw	r2,-20(fp)
    e5b0:	10800817 	ldw	r2,32(r2)
    e5b4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    e5b8:	e0bffc17 	ldw	r2,-16(fp)
    e5bc:	10800104 	addi	r2,r2,4
    e5c0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    e5c4:	e0bffd17 	ldw	r2,-12(fp)
    e5c8:	1080800c 	andi	r2,r2,512
    e5cc:	103fbe26 	beq	r2,zero,e4c8 <__ram_exceptions_end+0xfbfee274>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
    e5d0:	e0bffd17 	ldw	r2,-12(fp)
    e5d4:	1004d43a 	srli	r2,r2,16
    e5d8:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
    e5dc:	00001406 	br	e630 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
    e5e0:	e0bffc17 	ldw	r2,-16(fp)
    e5e4:	e0fffb17 	ldw	r3,-20(fp)
    e5e8:	18c00d17 	ldw	r3,52(r3)
    e5ec:	e13ffb17 	ldw	r4,-20(fp)
    e5f0:	20c7883a 	add	r3,r4,r3
    e5f4:	18c20e04 	addi	r3,r3,2104
    e5f8:	18c00003 	ldbu	r3,0(r3)
    e5fc:	18c03fcc 	andi	r3,r3,255
    e600:	18c0201c 	xori	r3,r3,128
    e604:	18ffe004 	addi	r3,r3,-128
    e608:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e60c:	e0bffb17 	ldw	r2,-20(fp)
    e610:	10800d17 	ldw	r2,52(r2)
    e614:	10800044 	addi	r2,r2,1
    e618:	10c1ffcc 	andi	r3,r2,2047
    e61c:	e0bffb17 	ldw	r2,-20(fp)
    e620:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
    e624:	e0bffa17 	ldw	r2,-24(fp)
    e628:	10bfffc4 	addi	r2,r2,-1
    e62c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
    e630:	e0bffa17 	ldw	r2,-24(fp)
    e634:	10000526 	beq	r2,zero,e64c <altera_avalon_jtag_uart_irq+0x1a8>
    e638:	e0bffb17 	ldw	r2,-20(fp)
    e63c:	10c00d17 	ldw	r3,52(r2)
    e640:	e0bffb17 	ldw	r2,-20(fp)
    e644:	10800c17 	ldw	r2,48(r2)
    e648:	18bfe51e 	bne	r3,r2,e5e0 <__ram_exceptions_end+0xfbfee38c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
    e64c:	e0bffa17 	ldw	r2,-24(fp)
    e650:	103f9d26 	beq	r2,zero,e4c8 <__ram_exceptions_end+0xfbfee274>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    e654:	e0bffb17 	ldw	r2,-20(fp)
    e658:	10c00817 	ldw	r3,32(r2)
    e65c:	00bfff44 	movi	r2,-3
    e660:	1886703a 	and	r3,r3,r2
    e664:	e0bffb17 	ldw	r2,-20(fp)
    e668:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    e66c:	e0bffb17 	ldw	r2,-20(fp)
    e670:	10800017 	ldw	r2,0(r2)
    e674:	10800104 	addi	r2,r2,4
    e678:	1007883a 	mov	r3,r2
    e67c:	e0bffb17 	ldw	r2,-20(fp)
    e680:	10800817 	ldw	r2,32(r2)
    e684:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
    e688:	e0bffc17 	ldw	r2,-16(fp)
    e68c:	10800104 	addi	r2,r2,4
    e690:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
    e694:	003f8c06 	br	e4c8 <__ram_exceptions_end+0xfbfee274>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
    e698:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
    e69c:	0001883a 	nop
    e6a0:	e037883a 	mov	sp,fp
    e6a4:	df000017 	ldw	fp,0(sp)
    e6a8:	dec00104 	addi	sp,sp,4
    e6ac:	f800283a 	ret

0000e6b0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
    e6b0:	defff804 	addi	sp,sp,-32
    e6b4:	df000715 	stw	fp,28(sp)
    e6b8:	df000704 	addi	fp,sp,28
    e6bc:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
    e6c0:	e0bffb17 	ldw	r2,-20(fp)
    e6c4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
    e6c8:	e0bff917 	ldw	r2,-28(fp)
    e6cc:	10800017 	ldw	r2,0(r2)
    e6d0:	10800104 	addi	r2,r2,4
    e6d4:	10800037 	ldwio	r2,0(r2)
    e6d8:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
    e6dc:	e0bffa17 	ldw	r2,-24(fp)
    e6e0:	1081000c 	andi	r2,r2,1024
    e6e4:	10000b26 	beq	r2,zero,e714 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
    e6e8:	e0bff917 	ldw	r2,-28(fp)
    e6ec:	10800017 	ldw	r2,0(r2)
    e6f0:	10800104 	addi	r2,r2,4
    e6f4:	1007883a 	mov	r3,r2
    e6f8:	e0bff917 	ldw	r2,-28(fp)
    e6fc:	10800817 	ldw	r2,32(r2)
    e700:	10810014 	ori	r2,r2,1024
    e704:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
    e708:	e0bff917 	ldw	r2,-28(fp)
    e70c:	10000915 	stw	zero,36(r2)
    e710:	00000a06 	br	e73c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
    e714:	e0bff917 	ldw	r2,-28(fp)
    e718:	10c00917 	ldw	r3,36(r2)
    e71c:	00a00034 	movhi	r2,32768
    e720:	10bfff04 	addi	r2,r2,-4
    e724:	10c00536 	bltu	r2,r3,e73c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
    e728:	e0bff917 	ldw	r2,-28(fp)
    e72c:	10800917 	ldw	r2,36(r2)
    e730:	10c00044 	addi	r3,r2,1
    e734:	e0bff917 	ldw	r2,-28(fp)
    e738:	10c00915 	stw	r3,36(r2)
    e73c:	d0a6da17 	ldw	r2,-25752(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
    e740:	e037883a 	mov	sp,fp
    e744:	df000017 	ldw	fp,0(sp)
    e748:	dec00104 	addi	sp,sp,4
    e74c:	f800283a 	ret

0000e750 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
    e750:	defffd04 	addi	sp,sp,-12
    e754:	df000215 	stw	fp,8(sp)
    e758:	df000204 	addi	fp,sp,8
    e75c:	e13ffe15 	stw	r4,-8(fp)
    e760:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    e764:	00000506 	br	e77c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
    e768:	e0bfff17 	ldw	r2,-4(fp)
    e76c:	1090000c 	andi	r2,r2,16384
    e770:	10000226 	beq	r2,zero,e77c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
    e774:	00bffd44 	movi	r2,-11
    e778:	00000b06 	br	e7a8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
    e77c:	e0bffe17 	ldw	r2,-8(fp)
    e780:	10c00d17 	ldw	r3,52(r2)
    e784:	e0bffe17 	ldw	r2,-8(fp)
    e788:	10800c17 	ldw	r2,48(r2)
    e78c:	18800526 	beq	r3,r2,e7a4 <altera_avalon_jtag_uart_close+0x54>
    e790:	e0bffe17 	ldw	r2,-8(fp)
    e794:	10c00917 	ldw	r3,36(r2)
    e798:	e0bffe17 	ldw	r2,-8(fp)
    e79c:	10800117 	ldw	r2,4(r2)
    e7a0:	18bff136 	bltu	r3,r2,e768 <__ram_exceptions_end+0xfbfee514>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
    e7a4:	0005883a 	mov	r2,zero
}
    e7a8:	e037883a 	mov	sp,fp
    e7ac:	df000017 	ldw	fp,0(sp)
    e7b0:	dec00104 	addi	sp,sp,4
    e7b4:	f800283a 	ret

0000e7b8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
    e7b8:	defffa04 	addi	sp,sp,-24
    e7bc:	df000515 	stw	fp,20(sp)
    e7c0:	df000504 	addi	fp,sp,20
    e7c4:	e13ffd15 	stw	r4,-12(fp)
    e7c8:	e17ffe15 	stw	r5,-8(fp)
    e7cc:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
    e7d0:	00bff9c4 	movi	r2,-25
    e7d4:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
    e7d8:	e0bffe17 	ldw	r2,-8(fp)
    e7dc:	10da8060 	cmpeqi	r3,r2,27137
    e7e0:	1800031e 	bne	r3,zero,e7f0 <altera_avalon_jtag_uart_ioctl+0x38>
    e7e4:	109a80a0 	cmpeqi	r2,r2,27138
    e7e8:	1000181e 	bne	r2,zero,e84c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
    e7ec:	00002906 	br	e894 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
    e7f0:	e0bffd17 	ldw	r2,-12(fp)
    e7f4:	10c00117 	ldw	r3,4(r2)
    e7f8:	00a00034 	movhi	r2,32768
    e7fc:	10bfffc4 	addi	r2,r2,-1
    e800:	18802126 	beq	r3,r2,e888 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
    e804:	e0bfff17 	ldw	r2,-4(fp)
    e808:	10800017 	ldw	r2,0(r2)
    e80c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
    e810:	e0bffc17 	ldw	r2,-16(fp)
    e814:	10800090 	cmplti	r2,r2,2
    e818:	1000061e 	bne	r2,zero,e834 <altera_avalon_jtag_uart_ioctl+0x7c>
    e81c:	e0fffc17 	ldw	r3,-16(fp)
    e820:	00a00034 	movhi	r2,32768
    e824:	10bfffc4 	addi	r2,r2,-1
    e828:	18800226 	beq	r3,r2,e834 <altera_avalon_jtag_uart_ioctl+0x7c>
    e82c:	e0bffc17 	ldw	r2,-16(fp)
    e830:	00000206 	br	e83c <altera_avalon_jtag_uart_ioctl+0x84>
    e834:	00a00034 	movhi	r2,32768
    e838:	10bfff84 	addi	r2,r2,-2
    e83c:	e0fffd17 	ldw	r3,-12(fp)
    e840:	18800115 	stw	r2,4(r3)
      rc = 0;
    e844:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    e848:	00000f06 	br	e888 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
    e84c:	e0bffd17 	ldw	r2,-12(fp)
    e850:	10c00117 	ldw	r3,4(r2)
    e854:	00a00034 	movhi	r2,32768
    e858:	10bfffc4 	addi	r2,r2,-1
    e85c:	18800c26 	beq	r3,r2,e890 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
    e860:	e0bffd17 	ldw	r2,-12(fp)
    e864:	10c00917 	ldw	r3,36(r2)
    e868:	e0bffd17 	ldw	r2,-12(fp)
    e86c:	10800117 	ldw	r2,4(r2)
    e870:	1885803a 	cmpltu	r2,r3,r2
    e874:	10c03fcc 	andi	r3,r2,255
    e878:	e0bfff17 	ldw	r2,-4(fp)
    e87c:	10c00015 	stw	r3,0(r2)
      rc = 0;
    e880:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
    e884:	00000206 	br	e890 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
    e888:	0001883a 	nop
    e88c:	00000106 	br	e894 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
    e890:	0001883a 	nop

  default:
    break;
  }

  return rc;
    e894:	e0bffb17 	ldw	r2,-20(fp)
}
    e898:	e037883a 	mov	sp,fp
    e89c:	df000017 	ldw	fp,0(sp)
    e8a0:	dec00104 	addi	sp,sp,4
    e8a4:	f800283a 	ret

0000e8a8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
    e8a8:	defff304 	addi	sp,sp,-52
    e8ac:	dfc00c15 	stw	ra,48(sp)
    e8b0:	df000b15 	stw	fp,44(sp)
    e8b4:	df000b04 	addi	fp,sp,44
    e8b8:	e13ffc15 	stw	r4,-16(fp)
    e8bc:	e17ffd15 	stw	r5,-12(fp)
    e8c0:	e1bffe15 	stw	r6,-8(fp)
    e8c4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
    e8c8:	e0bffd17 	ldw	r2,-12(fp)
    e8cc:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    e8d0:	00004706 	br	e9f0 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
    e8d4:	e0bffc17 	ldw	r2,-16(fp)
    e8d8:	10800a17 	ldw	r2,40(r2)
    e8dc:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
    e8e0:	e0bffc17 	ldw	r2,-16(fp)
    e8e4:	10800b17 	ldw	r2,44(r2)
    e8e8:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
    e8ec:	e0fff717 	ldw	r3,-36(fp)
    e8f0:	e0bff817 	ldw	r2,-32(fp)
    e8f4:	18800536 	bltu	r3,r2,e90c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
    e8f8:	e0fff717 	ldw	r3,-36(fp)
    e8fc:	e0bff817 	ldw	r2,-32(fp)
    e900:	1885c83a 	sub	r2,r3,r2
    e904:	e0bff615 	stw	r2,-40(fp)
    e908:	00000406 	br	e91c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
    e90c:	00c20004 	movi	r3,2048
    e910:	e0bff817 	ldw	r2,-32(fp)
    e914:	1885c83a 	sub	r2,r3,r2
    e918:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    e91c:	e0bff617 	ldw	r2,-40(fp)
    e920:	10001e26 	beq	r2,zero,e99c <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
    e924:	e0fffe17 	ldw	r3,-8(fp)
    e928:	e0bff617 	ldw	r2,-40(fp)
    e92c:	1880022e 	bgeu	r3,r2,e938 <altera_avalon_jtag_uart_read+0x90>
        n = space;
    e930:	e0bffe17 	ldw	r2,-8(fp)
    e934:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
    e938:	e0bffc17 	ldw	r2,-16(fp)
    e93c:	10c00e04 	addi	r3,r2,56
    e940:	e0bff817 	ldw	r2,-32(fp)
    e944:	1885883a 	add	r2,r3,r2
    e948:	e1bff617 	ldw	r6,-40(fp)
    e94c:	100b883a 	mov	r5,r2
    e950:	e13ff517 	ldw	r4,-44(fp)
    e954:	00061740 	call	6174 <memcpy>
      ptr   += n;
    e958:	e0fff517 	ldw	r3,-44(fp)
    e95c:	e0bff617 	ldw	r2,-40(fp)
    e960:	1885883a 	add	r2,r3,r2
    e964:	e0bff515 	stw	r2,-44(fp)
      space -= n;
    e968:	e0fffe17 	ldw	r3,-8(fp)
    e96c:	e0bff617 	ldw	r2,-40(fp)
    e970:	1885c83a 	sub	r2,r3,r2
    e974:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    e978:	e0fff817 	ldw	r3,-32(fp)
    e97c:	e0bff617 	ldw	r2,-40(fp)
    e980:	1885883a 	add	r2,r3,r2
    e984:	10c1ffcc 	andi	r3,r2,2047
    e988:	e0bffc17 	ldw	r2,-16(fp)
    e98c:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
    e990:	e0bffe17 	ldw	r2,-8(fp)
    e994:	00bfcf16 	blt	zero,r2,e8d4 <__ram_exceptions_end+0xfbfee680>
    e998:	00000106 	br	e9a0 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
    e99c:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
    e9a0:	e0fff517 	ldw	r3,-44(fp)
    e9a4:	e0bffd17 	ldw	r2,-12(fp)
    e9a8:	1880141e 	bne	r3,r2,e9fc <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
    e9ac:	e0bfff17 	ldw	r2,-4(fp)
    e9b0:	1090000c 	andi	r2,r2,16384
    e9b4:	1000131e 	bne	r2,zero,ea04 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
    e9b8:	0001883a 	nop
    e9bc:	e0bffc17 	ldw	r2,-16(fp)
    e9c0:	10c00a17 	ldw	r3,40(r2)
    e9c4:	e0bff717 	ldw	r2,-36(fp)
    e9c8:	1880051e 	bne	r3,r2,e9e0 <altera_avalon_jtag_uart_read+0x138>
    e9cc:	e0bffc17 	ldw	r2,-16(fp)
    e9d0:	10c00917 	ldw	r3,36(r2)
    e9d4:	e0bffc17 	ldw	r2,-16(fp)
    e9d8:	10800117 	ldw	r2,4(r2)
    e9dc:	18bff736 	bltu	r3,r2,e9bc <__ram_exceptions_end+0xfbfee768>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
    e9e0:	e0bffc17 	ldw	r2,-16(fp)
    e9e4:	10c00a17 	ldw	r3,40(r2)
    e9e8:	e0bff717 	ldw	r2,-36(fp)
    e9ec:	18800726 	beq	r3,r2,ea0c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
    e9f0:	e0bffe17 	ldw	r2,-8(fp)
    e9f4:	00bfb716 	blt	zero,r2,e8d4 <__ram_exceptions_end+0xfbfee680>
    e9f8:	00000506 	br	ea10 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
    e9fc:	0001883a 	nop
    ea00:	00000306 	br	ea10 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
    ea04:	0001883a 	nop
    ea08:	00000106 	br	ea10 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
    ea0c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
    ea10:	e0fff517 	ldw	r3,-44(fp)
    ea14:	e0bffd17 	ldw	r2,-12(fp)
    ea18:	18801826 	beq	r3,r2,ea7c <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ea1c:	0005303a 	rdctl	r2,status
    ea20:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ea24:	e0fffb17 	ldw	r3,-20(fp)
    ea28:	00bfff84 	movi	r2,-2
    ea2c:	1884703a 	and	r2,r3,r2
    ea30:	1001703a 	wrctl	status,r2
  
  return context;
    ea34:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
    ea38:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
    ea3c:	e0bffc17 	ldw	r2,-16(fp)
    ea40:	10800817 	ldw	r2,32(r2)
    ea44:	10c00054 	ori	r3,r2,1
    ea48:	e0bffc17 	ldw	r2,-16(fp)
    ea4c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    ea50:	e0bffc17 	ldw	r2,-16(fp)
    ea54:	10800017 	ldw	r2,0(r2)
    ea58:	10800104 	addi	r2,r2,4
    ea5c:	1007883a 	mov	r3,r2
    ea60:	e0bffc17 	ldw	r2,-16(fp)
    ea64:	10800817 	ldw	r2,32(r2)
    ea68:	18800035 	stwio	r2,0(r3)
    ea6c:	e0bffa17 	ldw	r2,-24(fp)
    ea70:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ea74:	e0bff917 	ldw	r2,-28(fp)
    ea78:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
    ea7c:	e0fff517 	ldw	r3,-44(fp)
    ea80:	e0bffd17 	ldw	r2,-12(fp)
    ea84:	18800426 	beq	r3,r2,ea98 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
    ea88:	e0fff517 	ldw	r3,-44(fp)
    ea8c:	e0bffd17 	ldw	r2,-12(fp)
    ea90:	1885c83a 	sub	r2,r3,r2
    ea94:	00000606 	br	eab0 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
    ea98:	e0bfff17 	ldw	r2,-4(fp)
    ea9c:	1090000c 	andi	r2,r2,16384
    eaa0:	10000226 	beq	r2,zero,eaac <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
    eaa4:	00bffd44 	movi	r2,-11
    eaa8:	00000106 	br	eab0 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
    eaac:	00bffec4 	movi	r2,-5
}
    eab0:	e037883a 	mov	sp,fp
    eab4:	dfc00117 	ldw	ra,4(sp)
    eab8:	df000017 	ldw	fp,0(sp)
    eabc:	dec00204 	addi	sp,sp,8
    eac0:	f800283a 	ret

0000eac4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    eac4:	defff304 	addi	sp,sp,-52
    eac8:	dfc00c15 	stw	ra,48(sp)
    eacc:	df000b15 	stw	fp,44(sp)
    ead0:	df000b04 	addi	fp,sp,44
    ead4:	e13ffc15 	stw	r4,-16(fp)
    ead8:	e17ffd15 	stw	r5,-12(fp)
    eadc:	e1bffe15 	stw	r6,-8(fp)
    eae0:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
    eae4:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
    eae8:	e0bffd17 	ldw	r2,-12(fp)
    eaec:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    eaf0:	00003706 	br	ebd0 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
    eaf4:	e0bffc17 	ldw	r2,-16(fp)
    eaf8:	10800c17 	ldw	r2,48(r2)
    eafc:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
    eb00:	e0bffc17 	ldw	r2,-16(fp)
    eb04:	10800d17 	ldw	r2,52(r2)
    eb08:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
    eb0c:	e0fff917 	ldw	r3,-28(fp)
    eb10:	e0bff517 	ldw	r2,-44(fp)
    eb14:	1880062e 	bgeu	r3,r2,eb30 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
    eb18:	e0fff517 	ldw	r3,-44(fp)
    eb1c:	e0bff917 	ldw	r2,-28(fp)
    eb20:	1885c83a 	sub	r2,r3,r2
    eb24:	10bfffc4 	addi	r2,r2,-1
    eb28:	e0bff615 	stw	r2,-40(fp)
    eb2c:	00000b06 	br	eb5c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
    eb30:	e0bff517 	ldw	r2,-44(fp)
    eb34:	10000526 	beq	r2,zero,eb4c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
    eb38:	00c20004 	movi	r3,2048
    eb3c:	e0bff917 	ldw	r2,-28(fp)
    eb40:	1885c83a 	sub	r2,r3,r2
    eb44:	e0bff615 	stw	r2,-40(fp)
    eb48:	00000406 	br	eb5c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
    eb4c:	00c1ffc4 	movi	r3,2047
    eb50:	e0bff917 	ldw	r2,-28(fp)
    eb54:	1885c83a 	sub	r2,r3,r2
    eb58:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
    eb5c:	e0bff617 	ldw	r2,-40(fp)
    eb60:	10001e26 	beq	r2,zero,ebdc <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
    eb64:	e0fffe17 	ldw	r3,-8(fp)
    eb68:	e0bff617 	ldw	r2,-40(fp)
    eb6c:	1880022e 	bgeu	r3,r2,eb78 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
    eb70:	e0bffe17 	ldw	r2,-8(fp)
    eb74:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
    eb78:	e0bffc17 	ldw	r2,-16(fp)
    eb7c:	10c20e04 	addi	r3,r2,2104
    eb80:	e0bff917 	ldw	r2,-28(fp)
    eb84:	1885883a 	add	r2,r3,r2
    eb88:	e1bff617 	ldw	r6,-40(fp)
    eb8c:	e17ffd17 	ldw	r5,-12(fp)
    eb90:	1009883a 	mov	r4,r2
    eb94:	00061740 	call	6174 <memcpy>
      ptr   += n;
    eb98:	e0fffd17 	ldw	r3,-12(fp)
    eb9c:	e0bff617 	ldw	r2,-40(fp)
    eba0:	1885883a 	add	r2,r3,r2
    eba4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
    eba8:	e0fffe17 	ldw	r3,-8(fp)
    ebac:	e0bff617 	ldw	r2,-40(fp)
    ebb0:	1885c83a 	sub	r2,r3,r2
    ebb4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    ebb8:	e0fff917 	ldw	r3,-28(fp)
    ebbc:	e0bff617 	ldw	r2,-40(fp)
    ebc0:	1885883a 	add	r2,r3,r2
    ebc4:	10c1ffcc 	andi	r3,r2,2047
    ebc8:	e0bffc17 	ldw	r2,-16(fp)
    ebcc:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
    ebd0:	e0bffe17 	ldw	r2,-8(fp)
    ebd4:	00bfc716 	blt	zero,r2,eaf4 <__ram_exceptions_end+0xfbfee8a0>
    ebd8:	00000106 	br	ebe0 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
    ebdc:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ebe0:	0005303a 	rdctl	r2,status
    ebe4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ebe8:	e0fffb17 	ldw	r3,-20(fp)
    ebec:	00bfff84 	movi	r2,-2
    ebf0:	1884703a 	and	r2,r3,r2
    ebf4:	1001703a 	wrctl	status,r2
  
  return context;
    ebf8:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
    ebfc:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
    ec00:	e0bffc17 	ldw	r2,-16(fp)
    ec04:	10800817 	ldw	r2,32(r2)
    ec08:	10c00094 	ori	r3,r2,2
    ec0c:	e0bffc17 	ldw	r2,-16(fp)
    ec10:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
    ec14:	e0bffc17 	ldw	r2,-16(fp)
    ec18:	10800017 	ldw	r2,0(r2)
    ec1c:	10800104 	addi	r2,r2,4
    ec20:	1007883a 	mov	r3,r2
    ec24:	e0bffc17 	ldw	r2,-16(fp)
    ec28:	10800817 	ldw	r2,32(r2)
    ec2c:	18800035 	stwio	r2,0(r3)
    ec30:	e0bffa17 	ldw	r2,-24(fp)
    ec34:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ec38:	e0bff817 	ldw	r2,-32(fp)
    ec3c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    ec40:	e0bffe17 	ldw	r2,-8(fp)
    ec44:	0080100e 	bge	zero,r2,ec88 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
    ec48:	e0bfff17 	ldw	r2,-4(fp)
    ec4c:	1090000c 	andi	r2,r2,16384
    ec50:	1000101e 	bne	r2,zero,ec94 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
    ec54:	0001883a 	nop
    ec58:	e0bffc17 	ldw	r2,-16(fp)
    ec5c:	10c00d17 	ldw	r3,52(r2)
    ec60:	e0bff517 	ldw	r2,-44(fp)
    ec64:	1880051e 	bne	r3,r2,ec7c <altera_avalon_jtag_uart_write+0x1b8>
    ec68:	e0bffc17 	ldw	r2,-16(fp)
    ec6c:	10c00917 	ldw	r3,36(r2)
    ec70:	e0bffc17 	ldw	r2,-16(fp)
    ec74:	10800117 	ldw	r2,4(r2)
    ec78:	18bff736 	bltu	r3,r2,ec58 <__ram_exceptions_end+0xfbfeea04>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
    ec7c:	e0bffc17 	ldw	r2,-16(fp)
    ec80:	10800917 	ldw	r2,36(r2)
    ec84:	1000051e 	bne	r2,zero,ec9c <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
    ec88:	e0bffe17 	ldw	r2,-8(fp)
    ec8c:	00bfd016 	blt	zero,r2,ebd0 <__ram_exceptions_end+0xfbfee97c>
    ec90:	00000306 	br	eca0 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
    ec94:	0001883a 	nop
    ec98:	00000106 	br	eca0 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
    ec9c:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
    eca0:	e0fffd17 	ldw	r3,-12(fp)
    eca4:	e0bff717 	ldw	r2,-36(fp)
    eca8:	18800426 	beq	r3,r2,ecbc <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
    ecac:	e0fffd17 	ldw	r3,-12(fp)
    ecb0:	e0bff717 	ldw	r2,-36(fp)
    ecb4:	1885c83a 	sub	r2,r3,r2
    ecb8:	00000606 	br	ecd4 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
    ecbc:	e0bfff17 	ldw	r2,-4(fp)
    ecc0:	1090000c 	andi	r2,r2,16384
    ecc4:	10000226 	beq	r2,zero,ecd0 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
    ecc8:	00bffd44 	movi	r2,-11
    eccc:	00000106 	br	ecd4 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
    ecd0:	00bffec4 	movi	r2,-5
}
    ecd4:	e037883a 	mov	sp,fp
    ecd8:	dfc00117 	ldw	ra,4(sp)
    ecdc:	df000017 	ldw	fp,0(sp)
    ece0:	dec00204 	addi	sp,sp,8
    ece4:	f800283a 	ret

0000ece8 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    ece8:	defffa04 	addi	sp,sp,-24
    ecec:	dfc00515 	stw	ra,20(sp)
    ecf0:	df000415 	stw	fp,16(sp)
    ecf4:	df000404 	addi	fp,sp,16
    ecf8:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    ecfc:	0007883a 	mov	r3,zero
    ed00:	e0bfff17 	ldw	r2,-4(fp)
    ed04:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    ed08:	e0bfff17 	ldw	r2,-4(fp)
    ed0c:	10800104 	addi	r2,r2,4
    ed10:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ed14:	0005303a 	rdctl	r2,status
    ed18:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ed1c:	e0fffd17 	ldw	r3,-12(fp)
    ed20:	00bfff84 	movi	r2,-2
    ed24:	1884703a 	and	r2,r3,r2
    ed28:	1001703a 	wrctl	status,r2
  
  return context;
    ed2c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    ed30:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    ed34:	000f5f00 	call	f5f0 <alt_tick>
    ed38:	e0bffc17 	ldw	r2,-16(fp)
    ed3c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    ed40:	e0bffe17 	ldw	r2,-8(fp)
    ed44:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    ed48:	0001883a 	nop
    ed4c:	e037883a 	mov	sp,fp
    ed50:	dfc00117 	ldw	ra,4(sp)
    ed54:	df000017 	ldw	fp,0(sp)
    ed58:	dec00204 	addi	sp,sp,8
    ed5c:	f800283a 	ret

0000ed60 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    ed60:	defff804 	addi	sp,sp,-32
    ed64:	dfc00715 	stw	ra,28(sp)
    ed68:	df000615 	stw	fp,24(sp)
    ed6c:	df000604 	addi	fp,sp,24
    ed70:	e13ffc15 	stw	r4,-16(fp)
    ed74:	e17ffd15 	stw	r5,-12(fp)
    ed78:	e1bffe15 	stw	r6,-8(fp)
    ed7c:	e1ffff15 	stw	r7,-4(fp)
    ed80:	e0bfff17 	ldw	r2,-4(fp)
    ed84:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    ed88:	d0a6da17 	ldw	r2,-25752(gp)
    ed8c:	1000021e 	bne	r2,zero,ed98 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
    ed90:	e0bffb17 	ldw	r2,-20(fp)
    ed94:	d0a6da15 	stw	r2,-25752(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    ed98:	e0bffc17 	ldw	r2,-16(fp)
    ed9c:	10800104 	addi	r2,r2,4
    eda0:	00c001c4 	movi	r3,7
    eda4:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    eda8:	d8000015 	stw	zero,0(sp)
    edac:	e1fffc17 	ldw	r7,-16(fp)
    edb0:	01800074 	movhi	r6,1
    edb4:	31bb3a04 	addi	r6,r6,-4888
    edb8:	e17ffe17 	ldw	r5,-8(fp)
    edbc:	e13ffd17 	ldw	r4,-12(fp)
    edc0:	000d58c0 	call	d58c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    edc4:	0001883a 	nop
    edc8:	e037883a 	mov	sp,fp
    edcc:	dfc00117 	ldw	ra,4(sp)
    edd0:	df000017 	ldw	fp,0(sp)
    edd4:	dec00204 	addi	sp,sp,8
    edd8:	f800283a 	ret

0000eddc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
    eddc:	defff504 	addi	sp,sp,-44
    ede0:	df000a15 	stw	fp,40(sp)
    ede4:	df000a04 	addi	fp,sp,40
    ede8:	e13ffc15 	stw	r4,-16(fp)
    edec:	e17ffd15 	stw	r5,-12(fp)
    edf0:	e1bffe15 	stw	r6,-8(fp)
    edf4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
    edf8:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
    edfc:	d0a6da17 	ldw	r2,-25752(gp)
  
  if (alt_ticks_per_second ())
    ee00:	10003c26 	beq	r2,zero,eef4 <alt_alarm_start+0x118>
  {
    if (alarm)
    ee04:	e0bffc17 	ldw	r2,-16(fp)
    ee08:	10003826 	beq	r2,zero,eeec <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
    ee0c:	e0bffc17 	ldw	r2,-16(fp)
    ee10:	e0fffe17 	ldw	r3,-8(fp)
    ee14:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
    ee18:	e0bffc17 	ldw	r2,-16(fp)
    ee1c:	e0ffff17 	ldw	r3,-4(fp)
    ee20:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    ee24:	0005303a 	rdctl	r2,status
    ee28:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    ee2c:	e0fff917 	ldw	r3,-28(fp)
    ee30:	00bfff84 	movi	r2,-2
    ee34:	1884703a 	and	r2,r3,r2
    ee38:	1001703a 	wrctl	status,r2
  
  return context;
    ee3c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
    ee40:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
    ee44:	d0a6db17 	ldw	r2,-25748(gp)
      
      current_nticks = alt_nticks();
    ee48:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
    ee4c:	e0fffd17 	ldw	r3,-12(fp)
    ee50:	e0bff617 	ldw	r2,-40(fp)
    ee54:	1885883a 	add	r2,r3,r2
    ee58:	10c00044 	addi	r3,r2,1
    ee5c:	e0bffc17 	ldw	r2,-16(fp)
    ee60:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
    ee64:	e0bffc17 	ldw	r2,-16(fp)
    ee68:	10c00217 	ldw	r3,8(r2)
    ee6c:	e0bff617 	ldw	r2,-40(fp)
    ee70:	1880042e 	bgeu	r3,r2,ee84 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
    ee74:	e0bffc17 	ldw	r2,-16(fp)
    ee78:	00c00044 	movi	r3,1
    ee7c:	10c00405 	stb	r3,16(r2)
    ee80:	00000206 	br	ee8c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
    ee84:	e0bffc17 	ldw	r2,-16(fp)
    ee88:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
    ee8c:	e0bffc17 	ldw	r2,-16(fp)
    ee90:	d0e00e04 	addi	r3,gp,-32712
    ee94:	e0fffa15 	stw	r3,-24(fp)
    ee98:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    ee9c:	e0bffb17 	ldw	r2,-20(fp)
    eea0:	e0fffa17 	ldw	r3,-24(fp)
    eea4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    eea8:	e0bffa17 	ldw	r2,-24(fp)
    eeac:	10c00017 	ldw	r3,0(r2)
    eeb0:	e0bffb17 	ldw	r2,-20(fp)
    eeb4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    eeb8:	e0bffa17 	ldw	r2,-24(fp)
    eebc:	10800017 	ldw	r2,0(r2)
    eec0:	e0fffb17 	ldw	r3,-20(fp)
    eec4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    eec8:	e0bffa17 	ldw	r2,-24(fp)
    eecc:	e0fffb17 	ldw	r3,-20(fp)
    eed0:	10c00015 	stw	r3,0(r2)
    eed4:	e0bff817 	ldw	r2,-32(fp)
    eed8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    eedc:	e0bff717 	ldw	r2,-36(fp)
    eee0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
    eee4:	0005883a 	mov	r2,zero
    eee8:	00000306 	br	eef8 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
    eeec:	00bffa84 	movi	r2,-22
    eef0:	00000106 	br	eef8 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
    eef4:	00bfde84 	movi	r2,-134
  }
}
    eef8:	e037883a 	mov	sp,fp
    eefc:	df000017 	ldw	fp,0(sp)
    ef00:	dec00104 	addi	sp,sp,4
    ef04:	f800283a 	ret

0000ef08 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    ef08:	defffe04 	addi	sp,sp,-8
    ef0c:	df000115 	stw	fp,4(sp)
    ef10:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    ef14:	e03fff15 	stw	zero,-4(fp)
    ef18:	00000506 	br	ef30 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    ef1c:	e0bfff17 	ldw	r2,-4(fp)
    ef20:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    ef24:	e0bfff17 	ldw	r2,-4(fp)
    ef28:	10800804 	addi	r2,r2,32
    ef2c:	e0bfff15 	stw	r2,-4(fp)
    ef30:	e0bfff17 	ldw	r2,-4(fp)
    ef34:	00ffffd4 	movui	r3,65535
    ef38:	18bff82e 	bgeu	r3,r2,ef1c <__ram_exceptions_end+0xfbfeecc8>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    ef3c:	0001883a 	nop
    ef40:	e037883a 	mov	sp,fp
    ef44:	df000017 	ldw	fp,0(sp)
    ef48:	dec00104 	addi	sp,sp,4
    ef4c:	f800283a 	ret

0000ef50 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    ef50:	defffe04 	addi	sp,sp,-8
    ef54:	dfc00115 	stw	ra,4(sp)
    ef58:	df000015 	stw	fp,0(sp)
    ef5c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    ef60:	d0a00b17 	ldw	r2,-32724(gp)
    ef64:	10000326 	beq	r2,zero,ef74 <alt_get_errno+0x24>
    ef68:	d0a00b17 	ldw	r2,-32724(gp)
    ef6c:	103ee83a 	callr	r2
    ef70:	00000106 	br	ef78 <alt_get_errno+0x28>
    ef74:	d0a6d404 	addi	r2,gp,-25776
}
    ef78:	e037883a 	mov	sp,fp
    ef7c:	dfc00117 	ldw	ra,4(sp)
    ef80:	df000017 	ldw	fp,0(sp)
    ef84:	dec00204 	addi	sp,sp,8
    ef88:	f800283a 	ret

0000ef8c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    ef8c:	defffa04 	addi	sp,sp,-24
    ef90:	dfc00515 	stw	ra,20(sp)
    ef94:	df000415 	stw	fp,16(sp)
    ef98:	df000404 	addi	fp,sp,16
    ef9c:	e13ffe15 	stw	r4,-8(fp)
    efa0:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    efa4:	e0bffe17 	ldw	r2,-8(fp)
    efa8:	10000326 	beq	r2,zero,efb8 <alt_dev_llist_insert+0x2c>
    efac:	e0bffe17 	ldw	r2,-8(fp)
    efb0:	10800217 	ldw	r2,8(r2)
    efb4:	1000061e 	bne	r2,zero,efd0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    efb8:	000ef500 	call	ef50 <alt_get_errno>
    efbc:	1007883a 	mov	r3,r2
    efc0:	00800584 	movi	r2,22
    efc4:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    efc8:	00bffa84 	movi	r2,-22
    efcc:	00001306 	br	f01c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    efd0:	e0bffe17 	ldw	r2,-8(fp)
    efd4:	e0ffff17 	ldw	r3,-4(fp)
    efd8:	e0fffc15 	stw	r3,-16(fp)
    efdc:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    efe0:	e0bffd17 	ldw	r2,-12(fp)
    efe4:	e0fffc17 	ldw	r3,-16(fp)
    efe8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    efec:	e0bffc17 	ldw	r2,-16(fp)
    eff0:	10c00017 	ldw	r3,0(r2)
    eff4:	e0bffd17 	ldw	r2,-12(fp)
    eff8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    effc:	e0bffc17 	ldw	r2,-16(fp)
    f000:	10800017 	ldw	r2,0(r2)
    f004:	e0fffd17 	ldw	r3,-12(fp)
    f008:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    f00c:	e0bffc17 	ldw	r2,-16(fp)
    f010:	e0fffd17 	ldw	r3,-12(fp)
    f014:	10c00015 	stw	r3,0(r2)

  return 0;  
    f018:	0005883a 	mov	r2,zero
}
    f01c:	e037883a 	mov	sp,fp
    f020:	dfc00117 	ldw	ra,4(sp)
    f024:	df000017 	ldw	fp,0(sp)
    f028:	dec00204 	addi	sp,sp,8
    f02c:	f800283a 	ret

0000f030 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    f030:	defffd04 	addi	sp,sp,-12
    f034:	dfc00215 	stw	ra,8(sp)
    f038:	df000115 	stw	fp,4(sp)
    f03c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    f040:	00800074 	movhi	r2,1
    f044:	10bfb804 	addi	r2,r2,-288
    f048:	e0bfff15 	stw	r2,-4(fp)
    f04c:	00000606 	br	f068 <_do_ctors+0x38>
        (*ctor) (); 
    f050:	e0bfff17 	ldw	r2,-4(fp)
    f054:	10800017 	ldw	r2,0(r2)
    f058:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    f05c:	e0bfff17 	ldw	r2,-4(fp)
    f060:	10bfff04 	addi	r2,r2,-4
    f064:	e0bfff15 	stw	r2,-4(fp)
    f068:	e0ffff17 	ldw	r3,-4(fp)
    f06c:	00800074 	movhi	r2,1
    f070:	10bfb904 	addi	r2,r2,-284
    f074:	18bff62e 	bgeu	r3,r2,f050 <__ram_exceptions_end+0xfbfeedfc>
        (*ctor) (); 
}
    f078:	0001883a 	nop
    f07c:	e037883a 	mov	sp,fp
    f080:	dfc00117 	ldw	ra,4(sp)
    f084:	df000017 	ldw	fp,0(sp)
    f088:	dec00204 	addi	sp,sp,8
    f08c:	f800283a 	ret

0000f090 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    f090:	defffd04 	addi	sp,sp,-12
    f094:	dfc00215 	stw	ra,8(sp)
    f098:	df000115 	stw	fp,4(sp)
    f09c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    f0a0:	00800074 	movhi	r2,1
    f0a4:	10bfb804 	addi	r2,r2,-288
    f0a8:	e0bfff15 	stw	r2,-4(fp)
    f0ac:	00000606 	br	f0c8 <_do_dtors+0x38>
        (*dtor) (); 
    f0b0:	e0bfff17 	ldw	r2,-4(fp)
    f0b4:	10800017 	ldw	r2,0(r2)
    f0b8:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    f0bc:	e0bfff17 	ldw	r2,-4(fp)
    f0c0:	10bfff04 	addi	r2,r2,-4
    f0c4:	e0bfff15 	stw	r2,-4(fp)
    f0c8:	e0ffff17 	ldw	r3,-4(fp)
    f0cc:	00800074 	movhi	r2,1
    f0d0:	10bfb904 	addi	r2,r2,-284
    f0d4:	18bff62e 	bgeu	r3,r2,f0b0 <__ram_exceptions_end+0xfbfeee5c>
        (*dtor) (); 
}
    f0d8:	0001883a 	nop
    f0dc:	e037883a 	mov	sp,fp
    f0e0:	dfc00117 	ldw	ra,4(sp)
    f0e4:	df000017 	ldw	fp,0(sp)
    f0e8:	dec00204 	addi	sp,sp,8
    f0ec:	f800283a 	ret

0000f0f0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    f0f0:	defffe04 	addi	sp,sp,-8
    f0f4:	dfc00115 	stw	ra,4(sp)
    f0f8:	df000015 	stw	fp,0(sp)
    f0fc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    f100:	01400074 	movhi	r5,1
    f104:	0009883a 	mov	r4,zero
    f108:	000f9580 	call	f958 <alt_icache_flush>
#endif
}
    f10c:	0001883a 	nop
    f110:	e037883a 	mov	sp,fp
    f114:	dfc00117 	ldw	ra,4(sp)
    f118:	df000017 	ldw	fp,0(sp)
    f11c:	dec00204 	addi	sp,sp,8
    f120:	f800283a 	ret

0000f124 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    f124:	defffe04 	addi	sp,sp,-8
    f128:	df000115 	stw	fp,4(sp)
    f12c:	df000104 	addi	fp,sp,4
    f130:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    f134:	e0bfff17 	ldw	r2,-4(fp)
    f138:	10bffe84 	addi	r2,r2,-6
    f13c:	10c00428 	cmpgeui	r3,r2,16
    f140:	18001a1e 	bne	r3,zero,f1ac <alt_exception_cause_generated_bad_addr+0x88>
    f144:	100690ba 	slli	r3,r2,2
    f148:	00800074 	movhi	r2,1
    f14c:	10bc5704 	addi	r2,r2,-3748
    f150:	1885883a 	add	r2,r3,r2
    f154:	10800017 	ldw	r2,0(r2)
    f158:	1000683a 	jmp	r2
    f15c:	0000f19c 	xori	zero,zero,966
    f160:	0000f19c 	xori	zero,zero,966
    f164:	0000f1ac 	andhi	zero,zero,966
    f168:	0000f1ac 	andhi	zero,zero,966
    f16c:	0000f1ac 	andhi	zero,zero,966
    f170:	0000f19c 	xori	zero,zero,966
    f174:	0000f1a4 	muli	zero,zero,966
    f178:	0000f1ac 	andhi	zero,zero,966
    f17c:	0000f19c 	xori	zero,zero,966
    f180:	0000f19c 	xori	zero,zero,966
    f184:	0000f1ac 	andhi	zero,zero,966
    f188:	0000f19c 	xori	zero,zero,966
    f18c:	0000f1a4 	muli	zero,zero,966
    f190:	0000f1ac 	andhi	zero,zero,966
    f194:	0000f1ac 	andhi	zero,zero,966
    f198:	0000f19c 	xori	zero,zero,966
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    f19c:	00800044 	movi	r2,1
    f1a0:	00000306 	br	f1b0 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    f1a4:	0005883a 	mov	r2,zero
    f1a8:	00000106 	br	f1b0 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    f1ac:	0005883a 	mov	r2,zero
  }
}
    f1b0:	e037883a 	mov	sp,fp
    f1b4:	df000017 	ldw	fp,0(sp)
    f1b8:	dec00104 	addi	sp,sp,4
    f1bc:	f800283a 	ret

0000f1c0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    f1c0:	defff904 	addi	sp,sp,-28
    f1c4:	dfc00615 	stw	ra,24(sp)
    f1c8:	df000515 	stw	fp,20(sp)
    f1cc:	df000504 	addi	fp,sp,20
    f1d0:	e13ffc15 	stw	r4,-16(fp)
    f1d4:	e17ffd15 	stw	r5,-12(fp)
    f1d8:	e1bffe15 	stw	r6,-8(fp)
    f1dc:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    f1e0:	e1bfff17 	ldw	r6,-4(fp)
    f1e4:	e17ffe17 	ldw	r5,-8(fp)
    f1e8:	e13ffd17 	ldw	r4,-12(fp)
    f1ec:	000f4000 	call	f400 <open>
    f1f0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    f1f4:	e0bffb17 	ldw	r2,-20(fp)
    f1f8:	10001c16 	blt	r2,zero,f26c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
    f1fc:	00800074 	movhi	r2,1
    f200:	10834004 	addi	r2,r2,3328
    f204:	e0fffb17 	ldw	r3,-20(fp)
    f208:	18c00324 	muli	r3,r3,12
    f20c:	10c5883a 	add	r2,r2,r3
    f210:	10c00017 	ldw	r3,0(r2)
    f214:	e0bffc17 	ldw	r2,-16(fp)
    f218:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    f21c:	00800074 	movhi	r2,1
    f220:	10834004 	addi	r2,r2,3328
    f224:	e0fffb17 	ldw	r3,-20(fp)
    f228:	18c00324 	muli	r3,r3,12
    f22c:	10c5883a 	add	r2,r2,r3
    f230:	10800104 	addi	r2,r2,4
    f234:	10c00017 	ldw	r3,0(r2)
    f238:	e0bffc17 	ldw	r2,-16(fp)
    f23c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    f240:	00800074 	movhi	r2,1
    f244:	10834004 	addi	r2,r2,3328
    f248:	e0fffb17 	ldw	r3,-20(fp)
    f24c:	18c00324 	muli	r3,r3,12
    f250:	10c5883a 	add	r2,r2,r3
    f254:	10800204 	addi	r2,r2,8
    f258:	10c00017 	ldw	r3,0(r2)
    f25c:	e0bffc17 	ldw	r2,-16(fp)
    f260:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    f264:	e13ffb17 	ldw	r4,-20(fp)
    f268:	000df6c0 	call	df6c <alt_release_fd>
  }
} 
    f26c:	0001883a 	nop
    f270:	e037883a 	mov	sp,fp
    f274:	dfc00117 	ldw	ra,4(sp)
    f278:	df000017 	ldw	fp,0(sp)
    f27c:	dec00204 	addi	sp,sp,8
    f280:	f800283a 	ret

0000f284 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    f284:	defffb04 	addi	sp,sp,-20
    f288:	dfc00415 	stw	ra,16(sp)
    f28c:	df000315 	stw	fp,12(sp)
    f290:	df000304 	addi	fp,sp,12
    f294:	e13ffd15 	stw	r4,-12(fp)
    f298:	e17ffe15 	stw	r5,-8(fp)
    f29c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    f2a0:	01c07fc4 	movi	r7,511
    f2a4:	01800044 	movi	r6,1
    f2a8:	e17ffd17 	ldw	r5,-12(fp)
    f2ac:	01000074 	movhi	r4,1
    f2b0:	21034304 	addi	r4,r4,3340
    f2b4:	000f1c00 	call	f1c0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    f2b8:	01c07fc4 	movi	r7,511
    f2bc:	000d883a 	mov	r6,zero
    f2c0:	e17ffe17 	ldw	r5,-8(fp)
    f2c4:	01000074 	movhi	r4,1
    f2c8:	21034004 	addi	r4,r4,3328
    f2cc:	000f1c00 	call	f1c0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    f2d0:	01c07fc4 	movi	r7,511
    f2d4:	01800044 	movi	r6,1
    f2d8:	e17fff17 	ldw	r5,-4(fp)
    f2dc:	01000074 	movhi	r4,1
    f2e0:	21034604 	addi	r4,r4,3352
    f2e4:	000f1c00 	call	f1c0 <alt_open_fd>
}  
    f2e8:	0001883a 	nop
    f2ec:	e037883a 	mov	sp,fp
    f2f0:	dfc00117 	ldw	ra,4(sp)
    f2f4:	df000017 	ldw	fp,0(sp)
    f2f8:	dec00204 	addi	sp,sp,8
    f2fc:	f800283a 	ret

0000f300 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    f300:	defffe04 	addi	sp,sp,-8
    f304:	dfc00115 	stw	ra,4(sp)
    f308:	df000015 	stw	fp,0(sp)
    f30c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    f310:	d0a00b17 	ldw	r2,-32724(gp)
    f314:	10000326 	beq	r2,zero,f324 <alt_get_errno+0x24>
    f318:	d0a00b17 	ldw	r2,-32724(gp)
    f31c:	103ee83a 	callr	r2
    f320:	00000106 	br	f328 <alt_get_errno+0x28>
    f324:	d0a6d404 	addi	r2,gp,-25776
}
    f328:	e037883a 	mov	sp,fp
    f32c:	dfc00117 	ldw	ra,4(sp)
    f330:	df000017 	ldw	fp,0(sp)
    f334:	dec00204 	addi	sp,sp,8
    f338:	f800283a 	ret

0000f33c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    f33c:	defffd04 	addi	sp,sp,-12
    f340:	df000215 	stw	fp,8(sp)
    f344:	df000204 	addi	fp,sp,8
    f348:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    f34c:	e0bfff17 	ldw	r2,-4(fp)
    f350:	10800217 	ldw	r2,8(r2)
    f354:	10d00034 	orhi	r3,r2,16384
    f358:	e0bfff17 	ldw	r2,-4(fp)
    f35c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    f360:	e03ffe15 	stw	zero,-8(fp)
    f364:	00001d06 	br	f3dc <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    f368:	00800074 	movhi	r2,1
    f36c:	10834004 	addi	r2,r2,3328
    f370:	e0fffe17 	ldw	r3,-8(fp)
    f374:	18c00324 	muli	r3,r3,12
    f378:	10c5883a 	add	r2,r2,r3
    f37c:	10c00017 	ldw	r3,0(r2)
    f380:	e0bfff17 	ldw	r2,-4(fp)
    f384:	10800017 	ldw	r2,0(r2)
    f388:	1880111e 	bne	r3,r2,f3d0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    f38c:	00800074 	movhi	r2,1
    f390:	10834004 	addi	r2,r2,3328
    f394:	e0fffe17 	ldw	r3,-8(fp)
    f398:	18c00324 	muli	r3,r3,12
    f39c:	10c5883a 	add	r2,r2,r3
    f3a0:	10800204 	addi	r2,r2,8
    f3a4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    f3a8:	1000090e 	bge	r2,zero,f3d0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    f3ac:	e0bffe17 	ldw	r2,-8(fp)
    f3b0:	10c00324 	muli	r3,r2,12
    f3b4:	00800074 	movhi	r2,1
    f3b8:	10834004 	addi	r2,r2,3328
    f3bc:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    f3c0:	e0bfff17 	ldw	r2,-4(fp)
    f3c4:	18800226 	beq	r3,r2,f3d0 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    f3c8:	00bffcc4 	movi	r2,-13
    f3cc:	00000806 	br	f3f0 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    f3d0:	e0bffe17 	ldw	r2,-8(fp)
    f3d4:	10800044 	addi	r2,r2,1
    f3d8:	e0bffe15 	stw	r2,-8(fp)
    f3dc:	d0a00a17 	ldw	r2,-32728(gp)
    f3e0:	1007883a 	mov	r3,r2
    f3e4:	e0bffe17 	ldw	r2,-8(fp)
    f3e8:	18bfdf2e 	bgeu	r3,r2,f368 <__ram_exceptions_end+0xfbfef114>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    f3ec:	0005883a 	mov	r2,zero
}
    f3f0:	e037883a 	mov	sp,fp
    f3f4:	df000017 	ldw	fp,0(sp)
    f3f8:	dec00104 	addi	sp,sp,4
    f3fc:	f800283a 	ret

0000f400 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    f400:	defff604 	addi	sp,sp,-40
    f404:	dfc00915 	stw	ra,36(sp)
    f408:	df000815 	stw	fp,32(sp)
    f40c:	df000804 	addi	fp,sp,32
    f410:	e13ffd15 	stw	r4,-12(fp)
    f414:	e17ffe15 	stw	r5,-8(fp)
    f418:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    f41c:	00bfffc4 	movi	r2,-1
    f420:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    f424:	00bffb44 	movi	r2,-19
    f428:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    f42c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    f430:	d1600804 	addi	r5,gp,-32736
    f434:	e13ffd17 	ldw	r4,-12(fp)
    f438:	000f71c0 	call	f71c <alt_find_dev>
    f43c:	e0bff815 	stw	r2,-32(fp)
    f440:	e0bff817 	ldw	r2,-32(fp)
    f444:	1000051e 	bne	r2,zero,f45c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    f448:	e13ffd17 	ldw	r4,-12(fp)
    f44c:	000f7ac0 	call	f7ac <alt_find_file>
    f450:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    f454:	00800044 	movi	r2,1
    f458:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    f45c:	e0bff817 	ldw	r2,-32(fp)
    f460:	10002926 	beq	r2,zero,f508 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
    f464:	e13ff817 	ldw	r4,-32(fp)
    f468:	000f8b40 	call	f8b4 <alt_get_fd>
    f46c:	e0bff915 	stw	r2,-28(fp)
    f470:	e0bff917 	ldw	r2,-28(fp)
    f474:	1000030e 	bge	r2,zero,f484 <open+0x84>
    {
      status = index;
    f478:	e0bff917 	ldw	r2,-28(fp)
    f47c:	e0bffa15 	stw	r2,-24(fp)
    f480:	00002306 	br	f510 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
    f484:	e0bff917 	ldw	r2,-28(fp)
    f488:	10c00324 	muli	r3,r2,12
    f48c:	00800074 	movhi	r2,1
    f490:	10834004 	addi	r2,r2,3328
    f494:	1885883a 	add	r2,r3,r2
    f498:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    f49c:	e0fffe17 	ldw	r3,-8(fp)
    f4a0:	00900034 	movhi	r2,16384
    f4a4:	10bfffc4 	addi	r2,r2,-1
    f4a8:	1886703a 	and	r3,r3,r2
    f4ac:	e0bffc17 	ldw	r2,-16(fp)
    f4b0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    f4b4:	e0bffb17 	ldw	r2,-20(fp)
    f4b8:	1000051e 	bne	r2,zero,f4d0 <open+0xd0>
    f4bc:	e13ffc17 	ldw	r4,-16(fp)
    f4c0:	000f33c0 	call	f33c <alt_file_locked>
    f4c4:	e0bffa15 	stw	r2,-24(fp)
    f4c8:	e0bffa17 	ldw	r2,-24(fp)
    f4cc:	10001016 	blt	r2,zero,f510 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    f4d0:	e0bff817 	ldw	r2,-32(fp)
    f4d4:	10800317 	ldw	r2,12(r2)
    f4d8:	10000826 	beq	r2,zero,f4fc <open+0xfc>
    f4dc:	e0bff817 	ldw	r2,-32(fp)
    f4e0:	10800317 	ldw	r2,12(r2)
    f4e4:	e1ffff17 	ldw	r7,-4(fp)
    f4e8:	e1bffe17 	ldw	r6,-8(fp)
    f4ec:	e17ffd17 	ldw	r5,-12(fp)
    f4f0:	e13ffc17 	ldw	r4,-16(fp)
    f4f4:	103ee83a 	callr	r2
    f4f8:	00000106 	br	f500 <open+0x100>
    f4fc:	0005883a 	mov	r2,zero
    f500:	e0bffa15 	stw	r2,-24(fp)
    f504:	00000206 	br	f510 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
    f508:	00bffb44 	movi	r2,-19
    f50c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    f510:	e0bffa17 	ldw	r2,-24(fp)
    f514:	1000090e 	bge	r2,zero,f53c <open+0x13c>
  {
    alt_release_fd (index);  
    f518:	e13ff917 	ldw	r4,-28(fp)
    f51c:	000df6c0 	call	df6c <alt_release_fd>
    ALT_ERRNO = -status;
    f520:	000f3000 	call	f300 <alt_get_errno>
    f524:	1007883a 	mov	r3,r2
    f528:	e0bffa17 	ldw	r2,-24(fp)
    f52c:	0085c83a 	sub	r2,zero,r2
    f530:	18800015 	stw	r2,0(r3)
    return -1;
    f534:	00bfffc4 	movi	r2,-1
    f538:	00000106 	br	f540 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
    f53c:	e0bff917 	ldw	r2,-28(fp)
}
    f540:	e037883a 	mov	sp,fp
    f544:	dfc00117 	ldw	ra,4(sp)
    f548:	df000017 	ldw	fp,0(sp)
    f54c:	dec00204 	addi	sp,sp,8
    f550:	f800283a 	ret

0000f554 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    f554:	defffa04 	addi	sp,sp,-24
    f558:	df000515 	stw	fp,20(sp)
    f55c:	df000504 	addi	fp,sp,20
    f560:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    f564:	0005303a 	rdctl	r2,status
    f568:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    f56c:	e0fffc17 	ldw	r3,-16(fp)
    f570:	00bfff84 	movi	r2,-2
    f574:	1884703a 	and	r2,r3,r2
    f578:	1001703a 	wrctl	status,r2
  
  return context;
    f57c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    f580:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    f584:	e0bfff17 	ldw	r2,-4(fp)
    f588:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    f58c:	e0bffd17 	ldw	r2,-12(fp)
    f590:	10800017 	ldw	r2,0(r2)
    f594:	e0fffd17 	ldw	r3,-12(fp)
    f598:	18c00117 	ldw	r3,4(r3)
    f59c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    f5a0:	e0bffd17 	ldw	r2,-12(fp)
    f5a4:	10800117 	ldw	r2,4(r2)
    f5a8:	e0fffd17 	ldw	r3,-12(fp)
    f5ac:	18c00017 	ldw	r3,0(r3)
    f5b0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    f5b4:	e0bffd17 	ldw	r2,-12(fp)
    f5b8:	e0fffd17 	ldw	r3,-12(fp)
    f5bc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    f5c0:	e0bffd17 	ldw	r2,-12(fp)
    f5c4:	e0fffd17 	ldw	r3,-12(fp)
    f5c8:	10c00015 	stw	r3,0(r2)
    f5cc:	e0bffb17 	ldw	r2,-20(fp)
    f5d0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    f5d4:	e0bffe17 	ldw	r2,-8(fp)
    f5d8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    f5dc:	0001883a 	nop
    f5e0:	e037883a 	mov	sp,fp
    f5e4:	df000017 	ldw	fp,0(sp)
    f5e8:	dec00104 	addi	sp,sp,4
    f5ec:	f800283a 	ret

0000f5f0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    f5f0:	defffb04 	addi	sp,sp,-20
    f5f4:	dfc00415 	stw	ra,16(sp)
    f5f8:	df000315 	stw	fp,12(sp)
    f5fc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    f600:	d0a00e17 	ldw	r2,-32712(gp)
    f604:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    f608:	d0a6db17 	ldw	r2,-25748(gp)
    f60c:	10800044 	addi	r2,r2,1
    f610:	d0a6db15 	stw	r2,-25748(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    f614:	00002e06 	br	f6d0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    f618:	e0bffd17 	ldw	r2,-12(fp)
    f61c:	10800017 	ldw	r2,0(r2)
    f620:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    f624:	e0bffd17 	ldw	r2,-12(fp)
    f628:	10800403 	ldbu	r2,16(r2)
    f62c:	10803fcc 	andi	r2,r2,255
    f630:	10000426 	beq	r2,zero,f644 <alt_tick+0x54>
    f634:	d0a6db17 	ldw	r2,-25748(gp)
    f638:	1000021e 	bne	r2,zero,f644 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    f63c:	e0bffd17 	ldw	r2,-12(fp)
    f640:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    f644:	e0bffd17 	ldw	r2,-12(fp)
    f648:	10800217 	ldw	r2,8(r2)
    f64c:	d0e6db17 	ldw	r3,-25748(gp)
    f650:	18801d36 	bltu	r3,r2,f6c8 <alt_tick+0xd8>
    f654:	e0bffd17 	ldw	r2,-12(fp)
    f658:	10800403 	ldbu	r2,16(r2)
    f65c:	10803fcc 	andi	r2,r2,255
    f660:	1000191e 	bne	r2,zero,f6c8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    f664:	e0bffd17 	ldw	r2,-12(fp)
    f668:	10800317 	ldw	r2,12(r2)
    f66c:	e0fffd17 	ldw	r3,-12(fp)
    f670:	18c00517 	ldw	r3,20(r3)
    f674:	1809883a 	mov	r4,r3
    f678:	103ee83a 	callr	r2
    f67c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    f680:	e0bfff17 	ldw	r2,-4(fp)
    f684:	1000031e 	bne	r2,zero,f694 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    f688:	e13ffd17 	ldw	r4,-12(fp)
    f68c:	000f5540 	call	f554 <alt_alarm_stop>
    f690:	00000d06 	br	f6c8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    f694:	e0bffd17 	ldw	r2,-12(fp)
    f698:	10c00217 	ldw	r3,8(r2)
    f69c:	e0bfff17 	ldw	r2,-4(fp)
    f6a0:	1887883a 	add	r3,r3,r2
    f6a4:	e0bffd17 	ldw	r2,-12(fp)
    f6a8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    f6ac:	e0bffd17 	ldw	r2,-12(fp)
    f6b0:	10c00217 	ldw	r3,8(r2)
    f6b4:	d0a6db17 	ldw	r2,-25748(gp)
    f6b8:	1880032e 	bgeu	r3,r2,f6c8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    f6bc:	e0bffd17 	ldw	r2,-12(fp)
    f6c0:	00c00044 	movi	r3,1
    f6c4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    f6c8:	e0bffe17 	ldw	r2,-8(fp)
    f6cc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    f6d0:	e0fffd17 	ldw	r3,-12(fp)
    f6d4:	d0a00e04 	addi	r2,gp,-32712
    f6d8:	18bfcf1e 	bne	r3,r2,f618 <__ram_exceptions_end+0xfbfef3c4>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    f6dc:	0001883a 	nop
}
    f6e0:	0001883a 	nop
    f6e4:	e037883a 	mov	sp,fp
    f6e8:	dfc00117 	ldw	ra,4(sp)
    f6ec:	df000017 	ldw	fp,0(sp)
    f6f0:	dec00204 	addi	sp,sp,8
    f6f4:	f800283a 	ret

0000f6f8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    f6f8:	deffff04 	addi	sp,sp,-4
    f6fc:	df000015 	stw	fp,0(sp)
    f700:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    f704:	000170fa 	wrctl	ienable,zero
}
    f708:	0001883a 	nop
    f70c:	e037883a 	mov	sp,fp
    f710:	df000017 	ldw	fp,0(sp)
    f714:	dec00104 	addi	sp,sp,4
    f718:	f800283a 	ret

0000f71c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    f71c:	defffa04 	addi	sp,sp,-24
    f720:	dfc00515 	stw	ra,20(sp)
    f724:	df000415 	stw	fp,16(sp)
    f728:	df000404 	addi	fp,sp,16
    f72c:	e13ffe15 	stw	r4,-8(fp)
    f730:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    f734:	e0bfff17 	ldw	r2,-4(fp)
    f738:	10800017 	ldw	r2,0(r2)
    f73c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    f740:	e13ffe17 	ldw	r4,-8(fp)
    f744:	00076c00 	call	76c0 <strlen>
    f748:	10800044 	addi	r2,r2,1
    f74c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    f750:	00000d06 	br	f788 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    f754:	e0bffc17 	ldw	r2,-16(fp)
    f758:	10800217 	ldw	r2,8(r2)
    f75c:	e0fffd17 	ldw	r3,-12(fp)
    f760:	180d883a 	mov	r6,r3
    f764:	e17ffe17 	ldw	r5,-8(fp)
    f768:	1009883a 	mov	r4,r2
    f76c:	000fa340 	call	fa34 <memcmp>
    f770:	1000021e 	bne	r2,zero,f77c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    f774:	e0bffc17 	ldw	r2,-16(fp)
    f778:	00000706 	br	f798 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    f77c:	e0bffc17 	ldw	r2,-16(fp)
    f780:	10800017 	ldw	r2,0(r2)
    f784:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    f788:	e0fffc17 	ldw	r3,-16(fp)
    f78c:	e0bfff17 	ldw	r2,-4(fp)
    f790:	18bff01e 	bne	r3,r2,f754 <__ram_exceptions_end+0xfbfef500>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    f794:	0005883a 	mov	r2,zero
}
    f798:	e037883a 	mov	sp,fp
    f79c:	dfc00117 	ldw	ra,4(sp)
    f7a0:	df000017 	ldw	fp,0(sp)
    f7a4:	dec00204 	addi	sp,sp,8
    f7a8:	f800283a 	ret

0000f7ac <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    f7ac:	defffb04 	addi	sp,sp,-20
    f7b0:	dfc00415 	stw	ra,16(sp)
    f7b4:	df000315 	stw	fp,12(sp)
    f7b8:	df000304 	addi	fp,sp,12
    f7bc:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    f7c0:	d0a00617 	ldw	r2,-32744(gp)
    f7c4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    f7c8:	00003106 	br	f890 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    f7cc:	e0bffd17 	ldw	r2,-12(fp)
    f7d0:	10800217 	ldw	r2,8(r2)
    f7d4:	1009883a 	mov	r4,r2
    f7d8:	00076c00 	call	76c0 <strlen>
    f7dc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    f7e0:	e0bffd17 	ldw	r2,-12(fp)
    f7e4:	10c00217 	ldw	r3,8(r2)
    f7e8:	e0bffe17 	ldw	r2,-8(fp)
    f7ec:	10bfffc4 	addi	r2,r2,-1
    f7f0:	1885883a 	add	r2,r3,r2
    f7f4:	10800003 	ldbu	r2,0(r2)
    f7f8:	10803fcc 	andi	r2,r2,255
    f7fc:	1080201c 	xori	r2,r2,128
    f800:	10bfe004 	addi	r2,r2,-128
    f804:	10800bd8 	cmpnei	r2,r2,47
    f808:	1000031e 	bne	r2,zero,f818 <alt_find_file+0x6c>
    {
      len -= 1;
    f80c:	e0bffe17 	ldw	r2,-8(fp)
    f810:	10bfffc4 	addi	r2,r2,-1
    f814:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    f818:	e0bffe17 	ldw	r2,-8(fp)
    f81c:	e0ffff17 	ldw	r3,-4(fp)
    f820:	1885883a 	add	r2,r3,r2
    f824:	10800003 	ldbu	r2,0(r2)
    f828:	10803fcc 	andi	r2,r2,255
    f82c:	1080201c 	xori	r2,r2,128
    f830:	10bfe004 	addi	r2,r2,-128
    f834:	10800be0 	cmpeqi	r2,r2,47
    f838:	1000081e 	bne	r2,zero,f85c <alt_find_file+0xb0>
    f83c:	e0bffe17 	ldw	r2,-8(fp)
    f840:	e0ffff17 	ldw	r3,-4(fp)
    f844:	1885883a 	add	r2,r3,r2
    f848:	10800003 	ldbu	r2,0(r2)
    f84c:	10803fcc 	andi	r2,r2,255
    f850:	1080201c 	xori	r2,r2,128
    f854:	10bfe004 	addi	r2,r2,-128
    f858:	10000a1e 	bne	r2,zero,f884 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    f85c:	e0bffd17 	ldw	r2,-12(fp)
    f860:	10800217 	ldw	r2,8(r2)
    f864:	e0fffe17 	ldw	r3,-8(fp)
    f868:	180d883a 	mov	r6,r3
    f86c:	e17fff17 	ldw	r5,-4(fp)
    f870:	1009883a 	mov	r4,r2
    f874:	000fa340 	call	fa34 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    f878:	1000021e 	bne	r2,zero,f884 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    f87c:	e0bffd17 	ldw	r2,-12(fp)
    f880:	00000706 	br	f8a0 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    f884:	e0bffd17 	ldw	r2,-12(fp)
    f888:	10800017 	ldw	r2,0(r2)
    f88c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    f890:	e0fffd17 	ldw	r3,-12(fp)
    f894:	d0a00604 	addi	r2,gp,-32744
    f898:	18bfcc1e 	bne	r3,r2,f7cc <__ram_exceptions_end+0xfbfef578>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    f89c:	0005883a 	mov	r2,zero
}
    f8a0:	e037883a 	mov	sp,fp
    f8a4:	dfc00117 	ldw	ra,4(sp)
    f8a8:	df000017 	ldw	fp,0(sp)
    f8ac:	dec00204 	addi	sp,sp,8
    f8b0:	f800283a 	ret

0000f8b4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    f8b4:	defffc04 	addi	sp,sp,-16
    f8b8:	df000315 	stw	fp,12(sp)
    f8bc:	df000304 	addi	fp,sp,12
    f8c0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    f8c4:	00bffa04 	movi	r2,-24
    f8c8:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    f8cc:	e03ffd15 	stw	zero,-12(fp)
    f8d0:	00001906 	br	f938 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
    f8d4:	00800074 	movhi	r2,1
    f8d8:	10834004 	addi	r2,r2,3328
    f8dc:	e0fffd17 	ldw	r3,-12(fp)
    f8e0:	18c00324 	muli	r3,r3,12
    f8e4:	10c5883a 	add	r2,r2,r3
    f8e8:	10800017 	ldw	r2,0(r2)
    f8ec:	10000f1e 	bne	r2,zero,f92c <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
    f8f0:	00800074 	movhi	r2,1
    f8f4:	10834004 	addi	r2,r2,3328
    f8f8:	e0fffd17 	ldw	r3,-12(fp)
    f8fc:	18c00324 	muli	r3,r3,12
    f900:	10c5883a 	add	r2,r2,r3
    f904:	e0ffff17 	ldw	r3,-4(fp)
    f908:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    f90c:	d0e00a17 	ldw	r3,-32728(gp)
    f910:	e0bffd17 	ldw	r2,-12(fp)
    f914:	1880020e 	bge	r3,r2,f920 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
    f918:	e0bffd17 	ldw	r2,-12(fp)
    f91c:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
    f920:	e0bffd17 	ldw	r2,-12(fp)
    f924:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    f928:	00000606 	br	f944 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    f92c:	e0bffd17 	ldw	r2,-12(fp)
    f930:	10800044 	addi	r2,r2,1
    f934:	e0bffd15 	stw	r2,-12(fp)
    f938:	e0bffd17 	ldw	r2,-12(fp)
    f93c:	10800810 	cmplti	r2,r2,32
    f940:	103fe41e 	bne	r2,zero,f8d4 <__ram_exceptions_end+0xfbfef680>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    f944:	e0bffe17 	ldw	r2,-8(fp)
}
    f948:	e037883a 	mov	sp,fp
    f94c:	df000017 	ldw	fp,0(sp)
    f950:	dec00104 	addi	sp,sp,4
    f954:	f800283a 	ret

0000f958 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    f958:	defffb04 	addi	sp,sp,-20
    f95c:	df000415 	stw	fp,16(sp)
    f960:	df000404 	addi	fp,sp,16
    f964:	e13ffe15 	stw	r4,-8(fp)
    f968:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    f96c:	e0bfff17 	ldw	r2,-4(fp)
    f970:	00c00074 	movhi	r3,1
    f974:	1880022e 	bgeu	r3,r2,f980 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    f978:	00800074 	movhi	r2,1
    f97c:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    f980:	e0fffe17 	ldw	r3,-8(fp)
    f984:	e0bfff17 	ldw	r2,-4(fp)
    f988:	1885883a 	add	r2,r3,r2
    f98c:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    f990:	e0bffe17 	ldw	r2,-8(fp)
    f994:	e0bffc15 	stw	r2,-16(fp)
    f998:	00000506 	br	f9b0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    f99c:	e0bffc17 	ldw	r2,-16(fp)
    f9a0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    f9a4:	e0bffc17 	ldw	r2,-16(fp)
    f9a8:	10800804 	addi	r2,r2,32
    f9ac:	e0bffc15 	stw	r2,-16(fp)
    f9b0:	e0fffc17 	ldw	r3,-16(fp)
    f9b4:	e0bffd17 	ldw	r2,-12(fp)
    f9b8:	18bff836 	bltu	r3,r2,f99c <__ram_exceptions_end+0xfbfef748>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    f9bc:	e0bffe17 	ldw	r2,-8(fp)
    f9c0:	108007cc 	andi	r2,r2,31
    f9c4:	10000226 	beq	r2,zero,f9d0 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    f9c8:	e0bffc17 	ldw	r2,-16(fp)
    f9cc:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    f9d0:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    f9d4:	0001883a 	nop
    f9d8:	e037883a 	mov	sp,fp
    f9dc:	df000017 	ldw	fp,0(sp)
    f9e0:	dec00104 	addi	sp,sp,4
    f9e4:	f800283a 	ret

0000f9e8 <atexit>:
    f9e8:	200b883a 	mov	r5,r4
    f9ec:	000f883a 	mov	r7,zero
    f9f0:	000d883a 	mov	r6,zero
    f9f4:	0009883a 	mov	r4,zero
    f9f8:	000fc181 	jmpi	fc18 <__register_exitproc>

0000f9fc <exit>:
    f9fc:	defffe04 	addi	sp,sp,-8
    fa00:	000b883a 	mov	r5,zero
    fa04:	dc000015 	stw	r16,0(sp)
    fa08:	dfc00115 	stw	ra,4(sp)
    fa0c:	2021883a 	mov	r16,r4
    fa10:	000fd300 	call	fd30 <__call_exitprocs>
    fa14:	00800074 	movhi	r2,1
    fa18:	1087b804 	addi	r2,r2,7904
    fa1c:	11000017 	ldw	r4,0(r2)
    fa20:	20800f17 	ldw	r2,60(r4)
    fa24:	10000126 	beq	r2,zero,fa2c <exit+0x30>
    fa28:	103ee83a 	callr	r2
    fa2c:	8009883a 	mov	r4,r16
    fa30:	000feb00 	call	feb0 <_exit>

0000fa34 <memcmp>:
    fa34:	01c000c4 	movi	r7,3
    fa38:	3980192e 	bgeu	r7,r6,faa0 <memcmp+0x6c>
    fa3c:	2144b03a 	or	r2,r4,r5
    fa40:	11c4703a 	and	r2,r2,r7
    fa44:	10000f26 	beq	r2,zero,fa84 <memcmp+0x50>
    fa48:	20800003 	ldbu	r2,0(r4)
    fa4c:	28c00003 	ldbu	r3,0(r5)
    fa50:	10c0151e 	bne	r2,r3,faa8 <memcmp+0x74>
    fa54:	31bfff84 	addi	r6,r6,-2
    fa58:	01ffffc4 	movi	r7,-1
    fa5c:	00000406 	br	fa70 <memcmp+0x3c>
    fa60:	20800003 	ldbu	r2,0(r4)
    fa64:	28c00003 	ldbu	r3,0(r5)
    fa68:	31bfffc4 	addi	r6,r6,-1
    fa6c:	10c00e1e 	bne	r2,r3,faa8 <memcmp+0x74>
    fa70:	21000044 	addi	r4,r4,1
    fa74:	29400044 	addi	r5,r5,1
    fa78:	31fff91e 	bne	r6,r7,fa60 <__ram_exceptions_end+0xfbfef80c>
    fa7c:	0005883a 	mov	r2,zero
    fa80:	f800283a 	ret
    fa84:	20c00017 	ldw	r3,0(r4)
    fa88:	28800017 	ldw	r2,0(r5)
    fa8c:	18bfee1e 	bne	r3,r2,fa48 <__ram_exceptions_end+0xfbfef7f4>
    fa90:	31bfff04 	addi	r6,r6,-4
    fa94:	21000104 	addi	r4,r4,4
    fa98:	29400104 	addi	r5,r5,4
    fa9c:	39bff936 	bltu	r7,r6,fa84 <__ram_exceptions_end+0xfbfef830>
    faa0:	303fe91e 	bne	r6,zero,fa48 <__ram_exceptions_end+0xfbfef7f4>
    faa4:	003ff506 	br	fa7c <__ram_exceptions_end+0xfbfef828>
    faa8:	10c5c83a 	sub	r2,r2,r3
    faac:	f800283a 	ret

0000fab0 <_putc_r>:
    fab0:	defffc04 	addi	sp,sp,-16
    fab4:	dc000215 	stw	r16,8(sp)
    fab8:	dfc00315 	stw	ra,12(sp)
    fabc:	2021883a 	mov	r16,r4
    fac0:	20000226 	beq	r4,zero,facc <_putc_r+0x1c>
    fac4:	20800e17 	ldw	r2,56(r4)
    fac8:	10001b26 	beq	r2,zero,fb38 <_putc_r+0x88>
    facc:	30800217 	ldw	r2,8(r6)
    fad0:	10bfffc4 	addi	r2,r2,-1
    fad4:	30800215 	stw	r2,8(r6)
    fad8:	10000a16 	blt	r2,zero,fb04 <_putc_r+0x54>
    fadc:	30800017 	ldw	r2,0(r6)
    fae0:	11400005 	stb	r5,0(r2)
    fae4:	30800017 	ldw	r2,0(r6)
    fae8:	10c00044 	addi	r3,r2,1
    faec:	30c00015 	stw	r3,0(r6)
    faf0:	10800003 	ldbu	r2,0(r2)
    faf4:	dfc00317 	ldw	ra,12(sp)
    faf8:	dc000217 	ldw	r16,8(sp)
    fafc:	dec00404 	addi	sp,sp,16
    fb00:	f800283a 	ret
    fb04:	30c00617 	ldw	r3,24(r6)
    fb08:	10c00616 	blt	r2,r3,fb24 <_putc_r+0x74>
    fb0c:	30800017 	ldw	r2,0(r6)
    fb10:	00c00284 	movi	r3,10
    fb14:	11400005 	stb	r5,0(r2)
    fb18:	30800017 	ldw	r2,0(r6)
    fb1c:	11400003 	ldbu	r5,0(r2)
    fb20:	28fff11e 	bne	r5,r3,fae8 <__ram_exceptions_end+0xfbfef894>
    fb24:	8009883a 	mov	r4,r16
    fb28:	dfc00317 	ldw	ra,12(sp)
    fb2c:	dc000217 	ldw	r16,8(sp)
    fb30:	dec00404 	addi	sp,sp,16
    fb34:	0009f101 	jmpi	9f10 <__swbuf_r>
    fb38:	d9400015 	stw	r5,0(sp)
    fb3c:	d9800115 	stw	r6,4(sp)
    fb40:	0004fe00 	call	4fe0 <__sinit>
    fb44:	d9800117 	ldw	r6,4(sp)
    fb48:	d9400017 	ldw	r5,0(sp)
    fb4c:	003fdf06 	br	facc <__ram_exceptions_end+0xfbfef878>

0000fb50 <putc>:
    fb50:	00800074 	movhi	r2,1
    fb54:	defffc04 	addi	sp,sp,-16
    fb58:	1087b904 	addi	r2,r2,7908
    fb5c:	dc000115 	stw	r16,4(sp)
    fb60:	14000017 	ldw	r16,0(r2)
    fb64:	dc400215 	stw	r17,8(sp)
    fb68:	dfc00315 	stw	ra,12(sp)
    fb6c:	2023883a 	mov	r17,r4
    fb70:	80000226 	beq	r16,zero,fb7c <putc+0x2c>
    fb74:	80800e17 	ldw	r2,56(r16)
    fb78:	10001a26 	beq	r2,zero,fbe4 <putc+0x94>
    fb7c:	28800217 	ldw	r2,8(r5)
    fb80:	10bfffc4 	addi	r2,r2,-1
    fb84:	28800215 	stw	r2,8(r5)
    fb88:	10000b16 	blt	r2,zero,fbb8 <putc+0x68>
    fb8c:	28800017 	ldw	r2,0(r5)
    fb90:	14400005 	stb	r17,0(r2)
    fb94:	28800017 	ldw	r2,0(r5)
    fb98:	10c00044 	addi	r3,r2,1
    fb9c:	28c00015 	stw	r3,0(r5)
    fba0:	10800003 	ldbu	r2,0(r2)
    fba4:	dfc00317 	ldw	ra,12(sp)
    fba8:	dc400217 	ldw	r17,8(sp)
    fbac:	dc000117 	ldw	r16,4(sp)
    fbb0:	dec00404 	addi	sp,sp,16
    fbb4:	f800283a 	ret
    fbb8:	28c00617 	ldw	r3,24(r5)
    fbbc:	10c00e16 	blt	r2,r3,fbf8 <putc+0xa8>
    fbc0:	28800017 	ldw	r2,0(r5)
    fbc4:	01000284 	movi	r4,10
    fbc8:	14400005 	stb	r17,0(r2)
    fbcc:	28800017 	ldw	r2,0(r5)
    fbd0:	10c00003 	ldbu	r3,0(r2)
    fbd4:	193ff01e 	bne	r3,r4,fb98 <__ram_exceptions_end+0xfbfef944>
    fbd8:	280d883a 	mov	r6,r5
    fbdc:	180b883a 	mov	r5,r3
    fbe0:	00000706 	br	fc00 <putc+0xb0>
    fbe4:	8009883a 	mov	r4,r16
    fbe8:	d9400015 	stw	r5,0(sp)
    fbec:	0004fe00 	call	4fe0 <__sinit>
    fbf0:	d9400017 	ldw	r5,0(sp)
    fbf4:	003fe106 	br	fb7c <__ram_exceptions_end+0xfbfef928>
    fbf8:	280d883a 	mov	r6,r5
    fbfc:	880b883a 	mov	r5,r17
    fc00:	8009883a 	mov	r4,r16
    fc04:	dfc00317 	ldw	ra,12(sp)
    fc08:	dc400217 	ldw	r17,8(sp)
    fc0c:	dc000117 	ldw	r16,4(sp)
    fc10:	dec00404 	addi	sp,sp,16
    fc14:	0009f101 	jmpi	9f10 <__swbuf_r>

0000fc18 <__register_exitproc>:
    fc18:	defffa04 	addi	sp,sp,-24
    fc1c:	dc000315 	stw	r16,12(sp)
    fc20:	04000074 	movhi	r16,1
    fc24:	8407b804 	addi	r16,r16,7904
    fc28:	80c00017 	ldw	r3,0(r16)
    fc2c:	dc400415 	stw	r17,16(sp)
    fc30:	dfc00515 	stw	ra,20(sp)
    fc34:	18805217 	ldw	r2,328(r3)
    fc38:	2023883a 	mov	r17,r4
    fc3c:	10003726 	beq	r2,zero,fd1c <__register_exitproc+0x104>
    fc40:	10c00117 	ldw	r3,4(r2)
    fc44:	010007c4 	movi	r4,31
    fc48:	20c00e16 	blt	r4,r3,fc84 <__register_exitproc+0x6c>
    fc4c:	1a000044 	addi	r8,r3,1
    fc50:	8800221e 	bne	r17,zero,fcdc <__register_exitproc+0xc4>
    fc54:	18c00084 	addi	r3,r3,2
    fc58:	18c7883a 	add	r3,r3,r3
    fc5c:	18c7883a 	add	r3,r3,r3
    fc60:	12000115 	stw	r8,4(r2)
    fc64:	10c7883a 	add	r3,r2,r3
    fc68:	19400015 	stw	r5,0(r3)
    fc6c:	0005883a 	mov	r2,zero
    fc70:	dfc00517 	ldw	ra,20(sp)
    fc74:	dc400417 	ldw	r17,16(sp)
    fc78:	dc000317 	ldw	r16,12(sp)
    fc7c:	dec00604 	addi	sp,sp,24
    fc80:	f800283a 	ret
    fc84:	00800034 	movhi	r2,0
    fc88:	10800004 	addi	r2,r2,0
    fc8c:	10002626 	beq	r2,zero,fd28 <__register_exitproc+0x110>
    fc90:	01006404 	movi	r4,400
    fc94:	d9400015 	stw	r5,0(sp)
    fc98:	d9800115 	stw	r6,4(sp)
    fc9c:	d9c00215 	stw	r7,8(sp)
    fca0:	00000000 	call	0 <__alt_mem_new_sdram_controller_0>
    fca4:	d9400017 	ldw	r5,0(sp)
    fca8:	d9800117 	ldw	r6,4(sp)
    fcac:	d9c00217 	ldw	r7,8(sp)
    fcb0:	10001d26 	beq	r2,zero,fd28 <__register_exitproc+0x110>
    fcb4:	81000017 	ldw	r4,0(r16)
    fcb8:	10000115 	stw	zero,4(r2)
    fcbc:	02000044 	movi	r8,1
    fcc0:	22405217 	ldw	r9,328(r4)
    fcc4:	0007883a 	mov	r3,zero
    fcc8:	12400015 	stw	r9,0(r2)
    fccc:	20805215 	stw	r2,328(r4)
    fcd0:	10006215 	stw	zero,392(r2)
    fcd4:	10006315 	stw	zero,396(r2)
    fcd8:	883fde26 	beq	r17,zero,fc54 <__ram_exceptions_end+0xfbfefa00>
    fcdc:	18c9883a 	add	r4,r3,r3
    fce0:	2109883a 	add	r4,r4,r4
    fce4:	1109883a 	add	r4,r2,r4
    fce8:	21802215 	stw	r6,136(r4)
    fcec:	01800044 	movi	r6,1
    fcf0:	12406217 	ldw	r9,392(r2)
    fcf4:	30cc983a 	sll	r6,r6,r3
    fcf8:	4992b03a 	or	r9,r9,r6
    fcfc:	12406215 	stw	r9,392(r2)
    fd00:	21c04215 	stw	r7,264(r4)
    fd04:	01000084 	movi	r4,2
    fd08:	893fd21e 	bne	r17,r4,fc54 <__ram_exceptions_end+0xfbfefa00>
    fd0c:	11006317 	ldw	r4,396(r2)
    fd10:	218cb03a 	or	r6,r4,r6
    fd14:	11806315 	stw	r6,396(r2)
    fd18:	003fce06 	br	fc54 <__ram_exceptions_end+0xfbfefa00>
    fd1c:	18805304 	addi	r2,r3,332
    fd20:	18805215 	stw	r2,328(r3)
    fd24:	003fc606 	br	fc40 <__ram_exceptions_end+0xfbfef9ec>
    fd28:	00bfffc4 	movi	r2,-1
    fd2c:	003fd006 	br	fc70 <__ram_exceptions_end+0xfbfefa1c>

0000fd30 <__call_exitprocs>:
    fd30:	defff504 	addi	sp,sp,-44
    fd34:	df000915 	stw	fp,36(sp)
    fd38:	dd400615 	stw	r21,24(sp)
    fd3c:	dc800315 	stw	r18,12(sp)
    fd40:	dfc00a15 	stw	ra,40(sp)
    fd44:	ddc00815 	stw	r23,32(sp)
    fd48:	dd800715 	stw	r22,28(sp)
    fd4c:	dd000515 	stw	r20,20(sp)
    fd50:	dcc00415 	stw	r19,16(sp)
    fd54:	dc400215 	stw	r17,8(sp)
    fd58:	dc000115 	stw	r16,4(sp)
    fd5c:	d9000015 	stw	r4,0(sp)
    fd60:	2839883a 	mov	fp,r5
    fd64:	04800044 	movi	r18,1
    fd68:	057fffc4 	movi	r21,-1
    fd6c:	00800074 	movhi	r2,1
    fd70:	1087b804 	addi	r2,r2,7904
    fd74:	12000017 	ldw	r8,0(r2)
    fd78:	45005217 	ldw	r20,328(r8)
    fd7c:	44c05204 	addi	r19,r8,328
    fd80:	a0001c26 	beq	r20,zero,fdf4 <__call_exitprocs+0xc4>
    fd84:	a0800117 	ldw	r2,4(r20)
    fd88:	15ffffc4 	addi	r23,r2,-1
    fd8c:	b8000d16 	blt	r23,zero,fdc4 <__call_exitprocs+0x94>
    fd90:	14000044 	addi	r16,r2,1
    fd94:	8421883a 	add	r16,r16,r16
    fd98:	8421883a 	add	r16,r16,r16
    fd9c:	84402004 	addi	r17,r16,128
    fda0:	a463883a 	add	r17,r20,r17
    fda4:	a421883a 	add	r16,r20,r16
    fda8:	e0001e26 	beq	fp,zero,fe24 <__call_exitprocs+0xf4>
    fdac:	80804017 	ldw	r2,256(r16)
    fdb0:	e0801c26 	beq	fp,r2,fe24 <__call_exitprocs+0xf4>
    fdb4:	bdffffc4 	addi	r23,r23,-1
    fdb8:	843fff04 	addi	r16,r16,-4
    fdbc:	8c7fff04 	addi	r17,r17,-4
    fdc0:	bd7ff91e 	bne	r23,r21,fda8 <__ram_exceptions_end+0xfbfefb54>
    fdc4:	00800034 	movhi	r2,0
    fdc8:	10800004 	addi	r2,r2,0
    fdcc:	10000926 	beq	r2,zero,fdf4 <__call_exitprocs+0xc4>
    fdd0:	a0800117 	ldw	r2,4(r20)
    fdd4:	1000301e 	bne	r2,zero,fe98 <__call_exitprocs+0x168>
    fdd8:	a0800017 	ldw	r2,0(r20)
    fddc:	10003226 	beq	r2,zero,fea8 <__call_exitprocs+0x178>
    fde0:	a009883a 	mov	r4,r20
    fde4:	98800015 	stw	r2,0(r19)
    fde8:	00000000 	call	0 <__alt_mem_new_sdram_controller_0>
    fdec:	9d000017 	ldw	r20,0(r19)
    fdf0:	a03fe41e 	bne	r20,zero,fd84 <__ram_exceptions_end+0xfbfefb30>
    fdf4:	dfc00a17 	ldw	ra,40(sp)
    fdf8:	df000917 	ldw	fp,36(sp)
    fdfc:	ddc00817 	ldw	r23,32(sp)
    fe00:	dd800717 	ldw	r22,28(sp)
    fe04:	dd400617 	ldw	r21,24(sp)
    fe08:	dd000517 	ldw	r20,20(sp)
    fe0c:	dcc00417 	ldw	r19,16(sp)
    fe10:	dc800317 	ldw	r18,12(sp)
    fe14:	dc400217 	ldw	r17,8(sp)
    fe18:	dc000117 	ldw	r16,4(sp)
    fe1c:	dec00b04 	addi	sp,sp,44
    fe20:	f800283a 	ret
    fe24:	a0800117 	ldw	r2,4(r20)
    fe28:	80c00017 	ldw	r3,0(r16)
    fe2c:	10bfffc4 	addi	r2,r2,-1
    fe30:	15c01426 	beq	r2,r23,fe84 <__call_exitprocs+0x154>
    fe34:	80000015 	stw	zero,0(r16)
    fe38:	183fde26 	beq	r3,zero,fdb4 <__ram_exceptions_end+0xfbfefb60>
    fe3c:	95c8983a 	sll	r4,r18,r23
    fe40:	a0806217 	ldw	r2,392(r20)
    fe44:	a5800117 	ldw	r22,4(r20)
    fe48:	2084703a 	and	r2,r4,r2
    fe4c:	10000b26 	beq	r2,zero,fe7c <__call_exitprocs+0x14c>
    fe50:	a0806317 	ldw	r2,396(r20)
    fe54:	2088703a 	and	r4,r4,r2
    fe58:	20000c1e 	bne	r4,zero,fe8c <__call_exitprocs+0x15c>
    fe5c:	89400017 	ldw	r5,0(r17)
    fe60:	d9000017 	ldw	r4,0(sp)
    fe64:	183ee83a 	callr	r3
    fe68:	a0800117 	ldw	r2,4(r20)
    fe6c:	15bfbf1e 	bne	r2,r22,fd6c <__ram_exceptions_end+0xfbfefb18>
    fe70:	98800017 	ldw	r2,0(r19)
    fe74:	153fcf26 	beq	r2,r20,fdb4 <__ram_exceptions_end+0xfbfefb60>
    fe78:	003fbc06 	br	fd6c <__ram_exceptions_end+0xfbfefb18>
    fe7c:	183ee83a 	callr	r3
    fe80:	003ff906 	br	fe68 <__ram_exceptions_end+0xfbfefc14>
    fe84:	a5c00115 	stw	r23,4(r20)
    fe88:	003feb06 	br	fe38 <__ram_exceptions_end+0xfbfefbe4>
    fe8c:	89000017 	ldw	r4,0(r17)
    fe90:	183ee83a 	callr	r3
    fe94:	003ff406 	br	fe68 <__ram_exceptions_end+0xfbfefc14>
    fe98:	a0800017 	ldw	r2,0(r20)
    fe9c:	a027883a 	mov	r19,r20
    fea0:	1029883a 	mov	r20,r2
    fea4:	003fb606 	br	fd80 <__ram_exceptions_end+0xfbfefb2c>
    fea8:	0005883a 	mov	r2,zero
    feac:	003ffb06 	br	fe9c <__ram_exceptions_end+0xfbfefc48>

0000feb0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    feb0:	defffd04 	addi	sp,sp,-12
    feb4:	df000215 	stw	fp,8(sp)
    feb8:	df000204 	addi	fp,sp,8
    febc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    fec0:	0001883a 	nop
    fec4:	e0bfff17 	ldw	r2,-4(fp)
    fec8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    fecc:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    fed0:	10000226 	beq	r2,zero,fedc <_exit+0x2c>
    ALT_SIM_FAIL();
    fed4:	002af070 	cmpltui	zero,zero,43969
    fed8:	00000106 	br	fee0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    fedc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    fee0:	003fff06 	br	fee0 <__ram_exceptions_end+0xfbfefc8c>


SysSigProc.elf:     file format elf32-littlenios2
SysSigProc.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04040244

Program Header:
    LOAD off    0x00001000 vaddr 0x04040000 paddr 0x04040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04040020 paddr 0x04040020 align 2**12
         filesz 0x000105e4 memsz 0x000105e4 flags r-x
    LOAD off    0x00011604 vaddr 0x04050604 paddr 0x04052188 align 2**12
         filesz 0x00001b84 memsz 0x00001b84 flags rw-
    LOAD off    0x00013d0c vaddr 0x04053d0c paddr 0x04053d0c align 2**12
         filesz 0x00000000 memsz 0x0000016c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04040000  04040000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  04040020  04040020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000ffa8  04040244  04040244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000418  040501ec  040501ec  000111ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b84  04050604  04052188  00011604  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000016c  04053d0c  04053d0c  00013d0c  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM_Controller_Shared 00000000  00000000  00000000  00013188  2**0
                  CONTENTS
  7 .SysSigProc_Onchip_Memory 00000000  04053e78  04053e78  00013188  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00013188  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000ef8  00000000  00000000  000131b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0002424b  00000000  00000000  000140a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00009373  00000000  00000000  000382f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b8c7  00000000  00000000  00041666  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  0000236c  00000000  00000000  0004cf30  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003b98  00000000  00000000  0004f29c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00017868  00000000  00000000  00052e34  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  0006a69c  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000018c0  00000000  00000000  0006a700  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0006f46e  2**0
                  CONTENTS, READONLY
 19 .cpu          00000012  00000000  00000000  0006f471  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0006f483  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0006f484  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000014  00000000  00000000  0006f485  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000014  00000000  00000000  0006f499  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000014  00000000  00000000  0006f4ad  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000a  00000000  00000000  0006f4c1  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 0000001e  00000000  00000000  0006f4cb  2**0
                  CONTENTS, READONLY
 27 .jdi          0000bf9f  00000000  00000000  0006f4e9  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     000c21ed  00000000  00000000  0007b488  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04040000 l    d  .entry	00000000 .entry
04040020 l    d  .exceptions	00000000 .exceptions
04040244 l    d  .text	00000000 .text
040501ec l    d  .rodata	00000000 .rodata
04050604 l    d  .rwdata	00000000 .rwdata
04053d0c l    d  .bss	00000000 .bss
00000000 l    d  .SDRAM_Controller_Shared	00000000 .SDRAM_Controller_Shared
04053e78 l    d  .SysSigProc_Onchip_Memory	00000000 .SysSigProc_Onchip_Memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/RTES/miniproject/sw/nios/SysSigProc_bsp//obj/HAL/src/crt0.o
0404028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 sigproc_main.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
04050302 l     O .rodata	00000010 zeroes.4404
04042af8 l     F .text	000000bc __sbprintf
04050312 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
04042d08 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
04044838 l     F .text	00000008 __fp_unlock
0404484c l     F .text	0000019c __sinit.part.1
040449e8 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
04050604 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
04050a48 l     O .rwdata	00000020 lc_ctype_charset
04050a28 l     O .rwdata	00000020 lc_message_charset
04050a68 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
04050344 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
04047de4 l     F .text	000000fc __sprint_r.part.0
04050478 l     O .rodata	00000010 blanks.4348
04050468 l     O .rodata	00000010 zeroes.4349
04049370 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0404d02c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0404d180 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0404d1ac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0404d538 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0404d618 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0404d704 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0404d8d8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
04052174 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0404db54 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0404dc88 l     F .text	00000034 alt_dev_reg
04051050 l     O .rwdata	00001060 SysSigProc_JTAG_UART
040520b0 l     O .rwdata	00000048 Mailbox_AudioToSigProc
040520f8 l     O .rwdata	00000048 Mailbox_SigProcToAudio
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0404df98 l     F .text	0000020c altera_avalon_jtag_uart_irq
0404e1a4 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mailbox_simple.c
0404e7dc l     F .text	00000090 altera_avalon_mailbox_identify
0404e86c l     F .text	00000078 altera_avalon_mailbox_post
0404e8e4 l     F .text	00000138 altera_avalon_mailbox_simple_tx_isr
0404ea1c l     F .text	000000a8 altera_avalon_mailbox_simple_rx_isr
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0404f3c0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0404f6c0 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0404f800 l     F .text	0000003c alt_get_errno
0404f83c l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
04053d44 g     O .bss	00000004 alt_instruction_exception_handler
04047428 g     F .text	00000074 _mprec_log10
0404eeb0 g     F .text	00000150 altera_avalon_mailbox_send
04047514 g     F .text	0000008c __any_on
0404990c g     F .text	00000054 _isatty_r
04050350 g     O .rodata	00000028 __mprec_tinytens
0404d814 g     F .text	0000007c alt_main
04040778 g     F .text	000000c0 _puts_r
04053d78 g     O .bss	00000100 alt_irq
04049960 g     F .text	00000060 _lseek_r
04052188 g       *ABS*	00000000 __flash_rwdata_start
0404bb58 g     F .text	00000088 .hidden __eqdf2
04053e78 g       *ABS*	00000000 __alt_heap_start
0404073c g     F .text	0000003c printf
040404a0 g     F .text	0000005c setup_switch_interrupts
04049b78 g     F .text	0000009c _wcrtomb_r
04047ca4 g     F .text	0000005c __sseek
04044b88 g     F .text	00000010 __sinit
04049a20 g     F .text	00000140 __swbuf_r
04045650 g     F .text	0000007c _setlocale_r
040449f0 g     F .text	00000068 __sfmoreglue
0404d8b4 g     F .text	00000024 __malloc_unlock
04046320 g     F .text	0000015c memmove
04044b70 g     F .text	00000018 _cleanup
040465a4 g     F .text	000000a8 _Balloc
0404bbe0 g     F .text	000000dc .hidden __gtdf2
0404fbf8 g     F .text	00000024 altera_nios2_gen2_irq_init
04040000 g     F .entry	0000001c __reset
04040020 g       *ABS*	00000000 __flash_exceptions_start
040498b0 g     F .text	0000005c _fstat_r
04053d30 g     O .bss	00000004 errno
04047c20 g     F .text	00000008 __seofread
04040360 g     F .text	00000050 receive_callback
04053d3c g     O .bss	00000004 alt_argv
0405a140 g       *ABS*	00000000 _gp
0404db24 g     F .text	00000030 usleep
0404f000 g     F .text	0000013c altera_avalon_mailbox_retrieve_poll
04050ed0 g     O .rwdata	00000180 alt_fd_list
0404f560 g     F .text	00000090 alt_find_dev
040461d8 g     F .text	00000148 memcpy
00000000 g       *ABS*	00000000 __alt_mem_SDRAM_Controller_Shared
04044840 g     F .text	0000000c _cleanup_r
0404ce44 g     F .text	000000dc .hidden __floatsidf
0404f784 g     F .text	0000007c alt_io_redirect
0404bcbc g     F .text	000000f4 .hidden __ltdf2
040501ec g       *ABS*	00000000 __DTOR_END__
04040838 g     F .text	00000014 puts
0404f624 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0404eac4 g     F .text	00000078 altera_avalon_mailbox_simple_init
04047b04 g     F .text	00000074 __fpclassifyd
04047384 g     F .text	000000a4 __ratio
04049354 g     F .text	0000001c __vfiprintf_internal
0404e39c g     F .text	0000021c altera_avalon_jtag_uart_read
0404070c g     F .text	00000030 _printf_r
0404a908 g     F .text	00000064 .hidden __udivsi3
0404d574 g     F .text	000000a4 isatty
040503a0 g     O .rodata	000000c8 __mprec_tens
0404ee38 g     F .text	00000078 altera_avalon_mailbox_status
0404ed20 g     F .text	00000118 altera_avalon_mailbox_close
040456cc g     F .text	0000000c __locale_charset
0404fdc8 g     F .text	00000090 alt_icache_flush
04053d2c g     O .bss	00000004 __malloc_top_pad
04052148 g     O .rwdata	00000004 __mb_cur_max
040456fc g     F .text	0000000c _localeconv_r
040469b0 g     F .text	0000003c __i2b
0404500c g     F .text	000004bc __sfvwrite_r
04047b78 g     F .text	00000054 _sbrk_r
040499c0 g     F .text	00000060 _read_r
04052168 g     O .rwdata	00000004 alt_max_fd
040495a4 g     F .text	000000f0 _fclose_r
04044808 g     F .text	00000030 fflush
04053d28 g     O .bss	00000004 __malloc_max_sbrked_mem
0404a9c4 g     F .text	000008ac .hidden __adddf3
04040450 g     F .text	00000050 isr_switches
0404712c g     F .text	0000010c __b2d
0404a2d8 g     F .text	00000538 .hidden __umoddi3
0404d740 g     F .text	000000d4 lseek
04052140 g     O .rwdata	00000004 _global_impure_ptr
040475a0 g     F .text	00000564 _realloc_r
04053e78 g       *ABS*	00000000 __bss_end
0404d448 g     F .text	000000f0 alt_iic_isr_register
0404faf0 g     F .text	00000108 alt_tick
04049d60 g     F .text	00000578 .hidden __udivdi3
0404980c g     F .text	00000024 _fputwc_r
04050378 g     O .rodata	00000028 __mprec_bigtens
04046794 g     F .text	00000104 __s2b
0404cf20 g     F .text	000000a8 .hidden __floatunsidf
04046e6c g     F .text	00000060 __mcmp
04044ba8 g     F .text	00000018 __fp_lock_all
0404d3fc g     F .text	0000004c alt_ic_irq_enabled
0404fa54 g     F .text	0000009c alt_alarm_stop
04053d34 g     O .bss	00000004 alt_irq_active
040400fc g     F .exceptions	000000d4 alt_irq_handler
04050ea8 g     O .rwdata	00000028 alt_dev_null
0404d138 g     F .text	00000048 alt_dcache_flush_all
04046898 g     F .text	00000068 __hi0bits
04053d10 g     O .bss	00000008 mail
0404cdc4 g     F .text	00000080 .hidden __fixdfsi
04052188 g       *ABS*	00000000 __ram_rwdata_end
04052160 g     O .rwdata	00000008 alt_dev_list
0404db90 g     F .text	000000f8 write
04050604 g       *ABS*	00000000 __ram_rodata_end
0404d1e8 g     F .text	000000b0 fstat
0404bcbc g     F .text	000000f4 .hidden __ledf2
04046be4 g     F .text	00000140 __pow5mult
04047ef8 g     F .text	0000145c ___vfiprintf_internal_r
04053d20 g     O .bss	00000004 __nlocale_changed
0404a96c g     F .text	00000058 .hidden __umodsi3
04040000 g       *ABS*	00000000 __alt_mem_SysSigProc_Onchip_Memory
04053e78 g       *ABS*	00000000 end
0404ded8 g     F .text	000000c0 altera_avalon_jtag_uart_init
040401d0 g     F .exceptions	00000074 alt_instruction_exception_entry
040501ec g       *ABS*	00000000 __CTOR_LIST__
0406a800 g       *ABS*	00000000 __alt_stack_pointer
0404cfc8 g     F .text	00000064 .hidden __clzsi2
0404e5b8 g     F .text	00000224 altera_avalon_jtag_uart_write
04044b98 g     F .text	00000004 __sfp_lock_acquire
040460f4 g     F .text	000000e4 memchr
040408e4 g     F .text	000021f8 ___vfprintf_internal_r
04040408 g     F .text	00000048 choose_task
04044cfc g     F .text	00000310 _free_r
040456d8 g     F .text	00000010 __locale_mb_cur_max
04050038 g     F .text	00000180 __call_exitprocs
04053d1c g     O .bss	00000004 __mlocale_changed
0405214c g     O .rwdata	00000004 __malloc_sbrk_base
04040244 g     F .text	0000004c _start
04053d48 g     O .bss	00000004 _alt_tick_rate
04046d24 g     F .text	00000148 __lshift
04053d4c g     O .bss	00000004 _alt_nticks
0404d914 g     F .text	000000fc read
0404dcf4 g     F .text	00000080 alt_sys_init
0404ff20 g     F .text	00000118 __register_exitproc
040403b0 g     F .text	00000058 receive_mail
040469ec g     F .text	000001f8 __multiply
0404e244 g     F .text	00000068 altera_avalon_jtag_uart_close
04050604 g       *ABS*	00000000 __ram_rwdata_start
040501ec g       *ABS*	00000000 __ram_rodata_start
04053d50 g     O .bss	00000028 __malloc_current_mallinfo
04047238 g     F .text	0000014c __d2b
0404dd74 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0404fd24 g     F .text	000000a4 alt_get_fd
0404f268 g     F .text	00000158 alt_busy_sleep
0404948c g     F .text	00000054 _close_r
0404fea4 g     F .text	0000007c memcmp
0404de34 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
04053e78 g       *ABS*	00000000 __alt_stack_base
0404de84 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
04042bb4 g     F .text	00000154 __swsetup_r
0404b270 g     F .text	000008e8 .hidden __divdf3
04044a58 g     F .text	00000118 __sfp
0404749c g     F .text	00000078 __copybits
04050aa0 g     O .rwdata	00000408 __malloc_av_
04044ba4 g     F .text	00000004 __sinit_lock_release
0404bdb0 g     F .text	00000718 .hidden __muldf3
040404fc g     F .text	00000138 overall_function
04047bcc g     F .text	00000054 __sread
0404fc1c g     F .text	00000108 alt_find_file
0404f3fc g     F .text	000000a4 alt_dev_llist_insert
0404d890 g     F .text	00000024 __malloc_lock
0404da74 g     F .text	000000b0 sbrk
040447ac g     F .text	0000005c _fflush_r
040494e0 g     F .text	000000c4 _calloc_r
04053d0c g     O .bss	00000004 choice
04053d0c g       *ABS*	00000000 __bss_start
0404647c g     F .text	00000128 memset
040406d0 g     F .text	0000003c main
04053d40 g     O .bss	00000004 alt_envp
04053d24 g     O .bss	00000004 __malloc_max_total_mem
0404ddd4 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
04049b60 g     F .text	00000018 __swbuf
04040290 g     F .text	00000054 send_callback
04047d00 g     F .text	00000008 __sclose
0406a800 g       *ABS*	00000000 __alt_heap_limit
04049694 g     F .text	00000014 fclose
04042f08 g     F .text	00001688 _dtoa_r
040458e8 g     F .text	0000080c _malloc_r
04049cd4 g     F .text	00000030 __ascii_wctomb
0405216c g     O .rwdata	00000004 alt_errno
040454c8 g     F .text	000000c4 _fwalk
0404a810 g     F .text	00000084 .hidden __divsi3
04044bd8 g     F .text	00000124 _malloc_trim_r
040501ec g       *ABS*	00000000 __CTOR_END__
04047d08 g     F .text	000000dc strcmp
040501ec g       *ABS*	00000000 __flash_rodata_start
040501ec g       *ABS*	00000000 __DTOR_LIST__
0404bb58 g     F .text	00000088 .hidden __nedf2
0404dcbc g     F .text	00000038 alt_irq_init
0404da10 g     F .text	00000064 alt_release_fd
04050488 g     O .rodata	00000100 .hidden __clz_tab
04053d18 g     O .bss	00000004 _PathLocale
0404fe58 g     F .text	00000014 atexit
0404942c g     F .text	00000060 _write_r
04045708 g     F .text	00000018 setlocale
04052144 g     O .rwdata	00000004 _impure_ptr
04053d38 g     O .bss	00000004 alt_argc
04044590 g     F .text	0000021c __sflush_r
0404f500 g     F .text	00000060 _do_dtors
040456f4 g     F .text	00000008 __locale_cjk_lang
04040020 g       .exceptions	00000000 alt_irq_entry
040470c8 g     F .text	00000064 __ulp
04044bc0 g     F .text	00000018 __fp_unlock_all
04052158 g     O .rwdata	00000008 alt_fs_list
04040020 g       *ABS*	00000000 __ram_exceptions_start
04045720 g     F .text	0000000c localeconv
040402e4 g     F .text	0000007c send_mail
0404d298 g     F .text	00000050 alt_ic_isr_register
04052188 g       *ABS*	00000000 _edata
04053e78 g       *ABS*	00000000 _end
040496a8 g     F .text	00000164 __fputwc
04040244 g       *ABS*	00000000 __ram_exceptions_end
0404e2ac g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0404d370 g     F .text	0000008c alt_ic_irq_disable
04052178 g     O .rwdata	00000008 alt_mailbox_simple_list
04047c28 g     F .text	0000007c __swrite
04052150 g     O .rwdata	00000004 __malloc_trim_threshold
040456e8 g     F .text	0000000c __locale_msgcharset
0404fe6c g     F .text	00000038 exit
0404558c g     F .text	000000c4 _fwalk_reent
04046ecc g     F .text	000001fc __mdiff
0404a894 g     F .text	00000074 .hidden __modsi3
0406a800 g       *ABS*	00000000 __alt_data_end
04040020 g     F .exceptions	00000000 alt_exception
04044b9c g     F .text	00000004 __sfp_lock_release
04040634 g     F .text	0000009c c_comp_function
0404eb3c g     F .text	000001e4 altera_avalon_mailbox_open
040501b8 g     F .text	00000034 _exit
0404f13c g     F .text	0000012c alt_alarm_start
0404572c g     F .text	000001bc __smakebuf_r
0404084c g     F .text	00000098 strlen
0404f900 g     F .text	00000154 open
0404bbe0 g     F .text	000000dc .hidden __gedf2
04052154 g     O .rwdata	00000004 __wctomb
04047ee0 g     F .text	00000018 __sprint_r
0404f5f0 g     F .text	00000034 alt_icache_flush_all
04052170 g     O .rwdata	00000004 alt_priority_mask
0404d2e8 g     F .text	00000088 alt_ic_irq_enable
04042adc g     F .text	0000001c __vfprintf_internal
04049d04 g     F .text	0000005c _wctomb_r
0404c4c8 g     F .text	000008fc .hidden __subdf3
04046900 g     F .text	000000b0 __lo0bits
04052180 g     O .rwdata	00000008 alt_alarm_list
0404f4a0 g     F .text	00000060 _do_ctors
04049c14 g     F .text	000000c0 wcrtomb
0404d068 g     F .text	000000d0 close
0404d680 g     F .text	00000084 alt_load
04049830 g     F .text	00000080 fputwc
04044ba0 g     F .text	00000004 __sinit_lock_acquire
04046674 g     F .text	00000120 __multadd
0404664c g     F .text	00000028 _Bfree



Disassembly of section .entry:

04040000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 4040000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 4040004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 4040008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 404000c:	00bffd16 	blt	zero,r2,4040004 <__alt_data_end+0xfffd5804>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4040010:	00410134 	movhi	at,1028
    ori r1, r1, %lo(_start)
 4040014:	08409114 	ori	at,at,580
    jmp r1
 4040018:	0800683a 	jmp	at
 404001c:	00000000 	call	0 <__alt_mem_SDRAM_Controller_Shared>

Disassembly of section .exceptions:

04040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4040020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4040024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4040028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 404002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4040030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4040034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4040038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 404003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4040040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4040044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4040048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 404004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4040050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4040054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4040058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 404005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4040060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4040064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4040068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 404006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4040070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4040074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4040078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 404007c:	10000326 	beq	r2,zero,404008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4040080:	20000226 	beq	r4,zero,404008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4040084:	40400fc0 	call	40400fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4040088:	00000706 	br	40400a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 404008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4040090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4040094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4040098:	40401d00 	call	40401d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 404009c:	1000021e 	bne	r2,zero,40400a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40400a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40400a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40400a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40400ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40400b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40400b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40400b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40400bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40400c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40400c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40400c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40400cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40400d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40400d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40400d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40400dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40400e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40400e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40400e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40400ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40400f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40400f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40400f8:	ef80083a 	eret

040400fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40400fc:	defff904 	addi	sp,sp,-28
 4040100:	dfc00615 	stw	ra,24(sp)
 4040104:	df000515 	stw	fp,20(sp)
 4040108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 404010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4040110:	0005313a 	rdctl	r2,ipending
 4040114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4040118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 404011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4040120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4040124:	00800044 	movi	r2,1
 4040128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 404012c:	e0fffb17 	ldw	r3,-20(fp)
 4040130:	e0bffc17 	ldw	r2,-16(fp)
 4040134:	1884703a 	and	r2,r3,r2
 4040138:	10001426 	beq	r2,zero,404018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 404013c:	00810174 	movhi	r2,1029
 4040140:	108f5e04 	addi	r2,r2,15736
 4040144:	e0fffd17 	ldw	r3,-12(fp)
 4040148:	180690fa 	slli	r3,r3,3
 404014c:	10c5883a 	add	r2,r2,r3
 4040150:	10c00017 	ldw	r3,0(r2)
 4040154:	00810174 	movhi	r2,1029
 4040158:	108f5e04 	addi	r2,r2,15736
 404015c:	e13ffd17 	ldw	r4,-12(fp)
 4040160:	200890fa 	slli	r4,r4,3
 4040164:	1105883a 	add	r2,r2,r4
 4040168:	10800104 	addi	r2,r2,4
 404016c:	10800017 	ldw	r2,0(r2)
 4040170:	1009883a 	mov	r4,r2
 4040174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4040178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 404017c:	0005313a 	rdctl	r2,ipending
 4040180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4040184:	e0bfff17 	ldw	r2,-4(fp)
 4040188:	00000706 	br	40401a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 404018c:	e0bffc17 	ldw	r2,-16(fp)
 4040190:	1085883a 	add	r2,r2,r2
 4040194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4040198:	e0bffd17 	ldw	r2,-12(fp)
 404019c:	10800044 	addi	r2,r2,1
 40401a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40401a4:	003fe106 	br	404012c <__alt_data_end+0xfffd592c>

    active = alt_irq_pending ();
 40401a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 40401ac:	e0bffb17 	ldw	r2,-20(fp)
 40401b0:	103fdb1e 	bne	r2,zero,4040120 <__alt_data_end+0xfffd5920>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40401b4:	0001883a 	nop
}
 40401b8:	0001883a 	nop
 40401bc:	e037883a 	mov	sp,fp
 40401c0:	dfc00117 	ldw	ra,4(sp)
 40401c4:	df000017 	ldw	fp,0(sp)
 40401c8:	dec00204 	addi	sp,sp,8
 40401cc:	f800283a 	ret

040401d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 40401d0:	defffb04 	addi	sp,sp,-20
 40401d4:	dfc00415 	stw	ra,16(sp)
 40401d8:	df000315 	stw	fp,12(sp)
 40401dc:	df000304 	addi	fp,sp,12
 40401e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 40401e4:	000531fa 	rdctl	r2,exception
 40401e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 40401ec:	e0bffd17 	ldw	r2,-12(fp)
 40401f0:	10801f0c 	andi	r2,r2,124
 40401f4:	1004d0ba 	srli	r2,r2,2
 40401f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 40401fc:	0005333a 	rdctl	r2,badaddr
 4040200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 4040204:	d0a70117 	ldw	r2,-25596(gp)
 4040208:	10000726 	beq	r2,zero,4040228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 404020c:	d0a70117 	ldw	r2,-25596(gp)
 4040210:	e0fffd17 	ldw	r3,-12(fp)
 4040214:	e1bffe17 	ldw	r6,-8(fp)
 4040218:	e17fff17 	ldw	r5,-4(fp)
 404021c:	1809883a 	mov	r4,r3
 4040220:	103ee83a 	callr	r2
 4040224:	00000206 	br	4040230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4040228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 404022c:	0005883a 	mov	r2,zero
}
 4040230:	e037883a 	mov	sp,fp
 4040234:	dfc00117 	ldw	ra,4(sp)
 4040238:	df000017 	ldw	fp,0(sp)
 404023c:	dec00204 	addi	sp,sp,8
 4040240:	f800283a 	ret

Disassembly of section .text:

04040244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 4040244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 4040248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 404024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 4040250:	00bffd16 	blt	zero,r2,4040248 <__alt_data_end+0xfffd5a48>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4040254:	06c101b4 	movhi	sp,1030
    ori sp, sp, %lo(__alt_stack_pointer)
 4040258:	deea0014 	ori	sp,sp,43008
    movhi gp, %hi(_gp)
 404025c:	06810174 	movhi	gp,1029
    ori gp, gp, %lo(_gp)
 4040260:	d6a85014 	ori	gp,gp,41280
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4040264:	00810174 	movhi	r2,1029
    ori r2, r2, %lo(__bss_start)
 4040268:	108f4314 	ori	r2,r2,15628

    movhi r3, %hi(__bss_end)
 404026c:	00c10174 	movhi	r3,1029
    ori r3, r3, %lo(__bss_end)
 4040270:	18cf9e14 	ori	r3,r3,15992

    beq r2, r3, 1f
 4040274:	10c00326 	beq	r2,r3,4040284 <_start+0x40>

0:
    stw zero, (r2)
 4040278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 404027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 4040280:	10fffd36 	bltu	r2,r3,4040278 <__alt_data_end+0xfffd5a78>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4040284:	404d6800 	call	404d680 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4040288:	404d8140 	call	404d814 <alt_main>

0404028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 404028c:	003fff06 	br	404028c <__alt_data_end+0xfffd5a8c>

04040290 <send_callback>:
// ----------------- Function definitions -------------------------------------

// ----------------- Mailbox functions ----------------------------------------

void send_callback(void* report, int status)
{
 4040290:	defffc04 	addi	sp,sp,-16
 4040294:	dfc00315 	stw	ra,12(sp)
 4040298:	df000215 	stw	fp,8(sp)
 404029c:	df000204 	addi	fp,sp,8
 40402a0:	e13ffe15 	stw	r4,-8(fp)
 40402a4:	e17fff15 	stw	r5,-4(fp)
	if(!status)
 40402a8:	e0bfff17 	ldw	r2,-4(fp)
 40402ac:	1000041e 	bne	r2,zero,40402c0 <send_callback+0x30>
	{
		printf("Sending completed.\n");
 40402b0:	01010174 	movhi	r4,1029
 40402b4:	21007b04 	addi	r4,r4,492
 40402b8:	40408380 	call	4040838 <puts>
	}
	else
	{
		printf("Sending error.\n");
	}
}
 40402bc:	00000306 	br	40402cc <send_callback+0x3c>
	{
		printf("Sending completed.\n");
	}
	else
	{
		printf("Sending error.\n");
 40402c0:	01010174 	movhi	r4,1029
 40402c4:	21008004 	addi	r4,r4,512
 40402c8:	40408380 	call	4040838 <puts>
	}
}
 40402cc:	0001883a 	nop
 40402d0:	e037883a 	mov	sp,fp
 40402d4:	dfc00117 	ldw	ra,4(sp)
 40402d8:	df000017 	ldw	fp,0(sp)
 40402dc:	dec00204 	addi	sp,sp,8
 40402e0:	f800283a 	ret

040402e4 <send_mail>:

void send_mail(alt_u32 start_addr, alt_u32 storage_length)
{
 40402e4:	defff904 	addi	sp,sp,-28
 40402e8:	dfc00615 	stw	ra,24(sp)
 40402ec:	df000515 	stw	fp,20(sp)
 40402f0:	df000504 	addi	fp,sp,20
 40402f4:	e13ffe15 	stw	r4,-8(fp)
 40402f8:	e17fff15 	stw	r5,-4(fp)
	// Load mailbox
	altera_avalon_mailbox_dev* mailbox_SigProcToAudio = altera_avalon_mailbox_open("/dev/Mailbox_SigProcToAudio", send_callback, NULL);
 40402fc:	000d883a 	mov	r6,zero
 4040300:	01410134 	movhi	r5,1028
 4040304:	2940a404 	addi	r5,r5,656
 4040308:	01010174 	movhi	r4,1029
 404030c:	21008404 	addi	r4,r4,528
 4040310:	404eb3c0 	call	404eb3c <altera_avalon_mailbox_open>
 4040314:	e0bffb15 	stw	r2,-20(fp)
	// Create mail "envelope"
	alt_u32 mail[2] = {start_addr, storage_length};
 4040318:	e0bffe17 	ldw	r2,-8(fp)
 404031c:	e0bffc15 	stw	r2,-16(fp)
 4040320:	e0bfff17 	ldw	r2,-4(fp)
 4040324:	e0bffd15 	stw	r2,-12(fp)
	// Send message
	altera_avalon_mailbox_send(mailbox_SigProcToAudio, mail, 0, POLL);
 4040328:	e0bffc04 	addi	r2,fp,-16
 404032c:	01c00044 	movi	r7,1
 4040330:	000d883a 	mov	r6,zero
 4040334:	100b883a 	mov	r5,r2
 4040338:	e13ffb17 	ldw	r4,-20(fp)
 404033c:	404eeb00 	call	404eeb0 <altera_avalon_mailbox_send>
	// Close mailbox
	altera_avalon_mailbox_close(mailbox_SigProcToAudio);
 4040340:	e13ffb17 	ldw	r4,-20(fp)
 4040344:	404ed200 	call	404ed20 <altera_avalon_mailbox_close>
}
 4040348:	0001883a 	nop
 404034c:	e037883a 	mov	sp,fp
 4040350:	dfc00117 	ldw	ra,4(sp)
 4040354:	df000017 	ldw	fp,0(sp)
 4040358:	dec00204 	addi	sp,sp,8
 404035c:	f800283a 	ret

04040360 <receive_callback>:

void receive_callback(void* message)
{
 4040360:	defffd04 	addi	sp,sp,-12
 4040364:	dfc00215 	stw	ra,8(sp)
 4040368:	df000115 	stw	fp,4(sp)
 404036c:	df000104 	addi	fp,sp,4
 4040370:	e13fff15 	stw	r4,-4(fp)
	if(message != NULL)
 4040374:	e0bfff17 	ldw	r2,-4(fp)
 4040378:	10000426 	beq	r2,zero,404038c <receive_callback+0x2c>
	{
		printf("Receiving completed.\n");
 404037c:	01010174 	movhi	r4,1029
 4040380:	21008b04 	addi	r4,r4,556
 4040384:	40408380 	call	4040838 <puts>
	}
	else
	{
		printf("Receiving error.\n");
	}
}
 4040388:	00000306 	br	4040398 <receive_callback+0x38>
	{
		printf("Receiving completed.\n");
	}
	else
	{
		printf("Receiving error.\n");
 404038c:	01010174 	movhi	r4,1029
 4040390:	21009104 	addi	r4,r4,580
 4040394:	40408380 	call	4040838 <puts>
	}
}
 4040398:	0001883a 	nop
 404039c:	e037883a 	mov	sp,fp
 40403a0:	dfc00117 	ldw	ra,4(sp)
 40403a4:	df000017 	ldw	fp,0(sp)
 40403a8:	dec00204 	addi	sp,sp,8
 40403ac:	f800283a 	ret

040403b0 <receive_mail>:

void receive_mail()
{
 40403b0:	defffd04 	addi	sp,sp,-12
 40403b4:	dfc00215 	stw	ra,8(sp)
 40403b8:	df000115 	stw	fp,4(sp)
 40403bc:	df000104 	addi	fp,sp,4
	// Load mailbox
	altera_avalon_mailbox_dev* mailbox_AudioToSigProc = altera_avalon_mailbox_open("/dev/Mailbox_AudioToSigProc", NULL, receive_callback);
 40403c0:	01810134 	movhi	r6,1028
 40403c4:	3180d804 	addi	r6,r6,864
 40403c8:	000b883a 	mov	r5,zero
 40403cc:	01010174 	movhi	r4,1029
 40403d0:	21009604 	addi	r4,r4,600
 40403d4:	404eb3c0 	call	404eb3c <altera_avalon_mailbox_open>
 40403d8:	e0bfff15 	stw	r2,-4(fp)

	altera_avalon_mailbox_retrieve_poll(mailbox_AudioToSigProc, mail, 0);
 40403dc:	000d883a 	mov	r6,zero
 40403e0:	d166f404 	addi	r5,gp,-25648
 40403e4:	e13fff17 	ldw	r4,-4(fp)
 40403e8:	404f0000 	call	404f000 <altera_avalon_mailbox_retrieve_poll>
	alt_dcache_flush_all();
 40403ec:	404d1380 	call	404d138 <alt_dcache_flush_all>
}
 40403f0:	0001883a 	nop
 40403f4:	e037883a 	mov	sp,fp
 40403f8:	dfc00117 	ldw	ra,4(sp)
 40403fc:	df000017 	ldw	fp,0(sp)
 4040400:	dec00204 	addi	sp,sp,8
 4040404:	f800283a 	ret

04040408 <choose_task>:

// ----------------- Interrupt and task choosing functions -------------------------


void choose_task(int task)
{
 4040408:	defffd04 	addi	sp,sp,-12
 404040c:	dfc00215 	stw	ra,8(sp)
 4040410:	df000115 	stw	fp,4(sp)
 4040414:	df000104 	addi	fp,sp,4
 4040418:	e13fff15 	stw	r4,-4(fp)
	if(task == 1)
 404041c:	e0bfff17 	ldw	r2,-4(fp)
 4040420:	10800058 	cmpnei	r2,r2,1
 4040424:	1000041e 	bne	r2,zero,4040438 <choose_task+0x30>
	{
		// First switch (SW0)
		//overall_function(1);
		printf("Interrupt test on CPU %d\n", NIOS2_CPU_ID_VALUE);
 4040428:	01400044 	movi	r5,1
 404042c:	01010174 	movhi	r4,1029
 4040430:	21009d04 	addi	r4,r4,628
 4040434:	404073c0 	call	404073c <printf>
	else if(task == 4)
	{
		// Third switch (SW2)
		// Etc. add as needed...
	}
}
 4040438:	0001883a 	nop
 404043c:	e037883a 	mov	sp,fp
 4040440:	dfc00117 	ldw	ra,4(sp)
 4040444:	df000017 	ldw	fp,0(sp)
 4040448:	dec00204 	addi	sp,sp,8
 404044c:	f800283a 	ret

04040450 <isr_switches>:

void isr_switches(void* context)
{
 4040450:	defffd04 	addi	sp,sp,-12
 4040454:	df000215 	stw	fp,8(sp)
 4040458:	df000204 	addi	fp,sp,8
 404045c:	e13fff15 	stw	r4,-4(fp)
	// Read interrupt source
	uint8_t pinvals = IORD_8DIRECT(PIO_SWITCHES_BASE, PIO_IntrSwitch_IRQFLAG);
 4040460:	00810234 	movhi	r2,1032
 4040464:	10842304 	addi	r2,r2,4236
 4040468:	10800023 	ldbuio	r2,0(r2)
 404046c:	10803fcc 	andi	r2,r2,255
 4040470:	e0bffe05 	stb	r2,-8(fp)
	// Save choice
	choice = (int)pinvals;
 4040474:	e0bffe03 	ldbu	r2,-8(fp)
 4040478:	d0a6f315 	stw	r2,-25652(gp)
	// Clear the interrupt flag
	IOWR_8DIRECT(PIO_SWITCHES_BASE, PIO_IntrSwitch_IRQFLAG, pinvals);
 404047c:	e0fffe03 	ldbu	r3,-8(fp)
 4040480:	00810234 	movhi	r2,1032
 4040484:	10842304 	addi	r2,r2,4236
 4040488:	10c00025 	stbio	r3,0(r2)
}
 404048c:	0001883a 	nop
 4040490:	e037883a 	mov	sp,fp
 4040494:	df000017 	ldw	fp,0(sp)
 4040498:	dec00104 	addi	sp,sp,4
 404049c:	f800283a 	ret

040404a0 <setup_switch_interrupts>:

void setup_switch_interrupts(uint8_t chosen_switches)
{
 40404a0:	defffc04 	addi	sp,sp,-16
 40404a4:	dfc00315 	stw	ra,12(sp)
 40404a8:	df000215 	stw	fp,8(sp)
 40404ac:	df000204 	addi	fp,sp,8
 40404b0:	2005883a 	mov	r2,r4
 40404b4:	e0bfff05 	stb	r2,-4(fp)
	// Setup interrupts on the chosen switches
	IOWR_8DIRECT(PIO_SWITCHES_BASE, PIO_IntrSwitch_IRQEN, chosen_switches);
 40404b8:	e0ffff03 	ldbu	r3,-4(fp)
 40404bc:	00810234 	movhi	r2,1032
 40404c0:	10842204 	addi	r2,r2,4232
 40404c4:	10c00025 	stbio	r3,0(r2)
	alt_ic_isr_register(PIO_SWITCHES_IRQ_INTERRUPT_CONTROLLER_ID, PIO_SWITCHES_IRQ, isr_switches, NULL, NULL);
 40404c8:	d8000015 	stw	zero,0(sp)
 40404cc:	000f883a 	mov	r7,zero
 40404d0:	01810134 	movhi	r6,1028
 40404d4:	31811404 	addi	r6,r6,1104
 40404d8:	01400084 	movi	r5,2
 40404dc:	0009883a 	mov	r4,zero
 40404e0:	404d2980 	call	404d298 <alt_ic_isr_register>
	return;
 40404e4:	0001883a 	nop
}
 40404e8:	e037883a 	mov	sp,fp
 40404ec:	dfc00117 	ldw	ra,4(sp)
 40404f0:	df000017 	ldw	fp,0(sp)
 40404f4:	dec00204 	addi	sp,sp,8
 40404f8:	f800283a 	ret

040404fc <overall_function>:

// --------------------- DMA/Custom Instruction function -----------------------

void overall_function(int choice)
{
 40404fc:	defff404 	addi	sp,sp,-48
 4040500:	dfc00b15 	stw	ra,44(sp)
 4040504:	df000a15 	stw	fp,40(sp)
 4040508:	df000a04 	addi	fp,sp,40
 404050c:	e13fff15 	stw	r4,-4(fp)
	int op_type;
	receive_mail();
 4040510:	40403b00 	call	40403b0 <receive_mail>
	if(IORD_32DIRECT(PIO_SWITCHES_BASE, 0)&0x100 == 0)
 4040514:	00810234 	movhi	r2,1032
 4040518:	10842004 	addi	r2,r2,4224
 404051c:	10800037 	ldwio	r2,0(r2)
	{
		op_type = 0;
	}
	else
	{
		op_type = 1;
 4040520:	00800044 	movi	r2,1
 4040524:	e0bff615 	stw	r2,-40(fp)
	}
	int total_snippets = mail[1];
 4040528:	d0a6f517 	ldw	r2,-25644(gp)
 404052c:	e0bff715 	stw	r2,-36(fp)
	// 48 kHz sampling frequency => 12k samples per snippet
	int words_per_snippet = 12000;
 4040530:	008bb804 	movi	r2,12000
 4040534:	e0bff815 	stw	r2,-32(fp)
	int handled_snippets = 0;
 4040538:	e03ff915 	stw	zero,-28(fp)
	int memory_size = total_snippets*words_per_snippet*4;
 404053c:	e0fff717 	ldw	r3,-36(fp)
 4040540:	e0bff817 	ldw	r2,-32(fp)
 4040544:	1885383a 	mul	r2,r3,r2
 4040548:	1085883a 	add	r2,r2,r2
 404054c:	1085883a 	add	r2,r2,r2
 4040550:	e0bffa15 	stw	r2,-24(fp)
	int *start_storage_address = mail[0] + memory_size;
 4040554:	d0e6f417 	ldw	r3,-25648(gp)
 4040558:	e0bffa17 	ldw	r2,-24(fp)
 404055c:	1885883a 	add	r2,r3,r2
 4040560:	e0bffb15 	stw	r2,-20(fp)
	while(handled_snippets < total_snippets)
 4040564:	00002506 	br	40405fc <overall_function+0x100>
	{
		receive_mail();
 4040568:	40403b00 	call	40403b0 <receive_mail>
		// Prepare parameters
		int *snippet_starting_address = mail[0];
 404056c:	d0a6f417 	ldw	r2,-25648(gp)
 4040570:	e0bffc15 	stw	r2,-16(fp)
		int *snippet_storage_address = start_storage_address + handled_snippets*words_per_snippet*4;
 4040574:	e0fff917 	ldw	r3,-28(fp)
 4040578:	e0bff817 	ldw	r2,-32(fp)
 404057c:	1885383a 	mul	r2,r3,r2
 4040580:	1004913a 	slli	r2,r2,4
 4040584:	1007883a 	mov	r3,r2
 4040588:	e0bffb17 	ldw	r2,-20(fp)
 404058c:	10c5883a 	add	r2,r2,r3
 4040590:	e0bffd15 	stw	r2,-12(fp)
		int snippet_word_count = mail[1];
 4040594:	d0a6f517 	ldw	r2,-25644(gp)
 4040598:	e0bffe15 	stw	r2,-8(fp)
		// Turn on LED 9, signifying that signal processing is in progress
		IOWR_32DIRECT(PIO_LEDS_SHARED_BASE, 0, 512);
 404059c:	00c08004 	movi	r3,512
 40405a0:	00810234 	movhi	r2,1032
 40405a4:	10842404 	addi	r2,r2,4240
 40405a8:	10c00035 	stwio	r3,0(r2)
		if(choice == 1)
 40405ac:	e0bfff17 	ldw	r2,-4(fp)
 40405b0:	10800058 	cmpnei	r2,r2,1
 40405b4:	1000051e 	bne	r2,zero,40405cc <overall_function+0xd0>
		{
			// TODO: call accelerator
			printf("At call accelerator: handled_snippets = %i\n", handled_snippets);
 40405b8:	e17ff917 	ldw	r5,-28(fp)
 40405bc:	01010174 	movhi	r4,1029
 40405c0:	2100a404 	addi	r4,r4,656
 40405c4:	404073c0 	call	404073c <printf>
 40405c8:	00000806 	br	40405ec <overall_function+0xf0>

		}
		else if(choice == 2)
 40405cc:	e0bfff17 	ldw	r2,-4(fp)
 40405d0:	108000a0 	cmpeqi	r2,r2,2
 40405d4:	1000051e 	bne	r2,zero,40405ec <overall_function+0xf0>
			// Call custom instruction
		}
		else
		{
			// call C comparison function
			c_comp_function(snippet_starting_address, snippet_storage_address, snippet_word_count, op_type);
 40405d8:	e1fff617 	ldw	r7,-40(fp)
 40405dc:	e1bffe17 	ldw	r6,-8(fp)
 40405e0:	e17ffd17 	ldw	r5,-12(fp)
 40405e4:	e13ffc17 	ldw	r4,-16(fp)
 40405e8:	40406340 	call	4040634 <c_comp_function>
		}
		// Turn off LED 9, signifying that signal processing is done
		IOWR_32DIRECT(PIO_LEDS_SHARED_BASE, 0, 0);
 40405ec:	0007883a 	mov	r3,zero
 40405f0:	00810234 	movhi	r2,1032
 40405f4:	10842404 	addi	r2,r2,4240
 40405f8:	10c00035 	stwio	r3,0(r2)
	// 48 kHz sampling frequency => 12k samples per snippet
	int words_per_snippet = 12000;
	int handled_snippets = 0;
	int memory_size = total_snippets*words_per_snippet*4;
	int *start_storage_address = mail[0] + memory_size;
	while(handled_snippets < total_snippets)
 40405fc:	e0fff917 	ldw	r3,-28(fp)
 4040600:	e0bff717 	ldw	r2,-36(fp)
 4040604:	18bfd816 	blt	r3,r2,4040568 <__alt_data_end+0xfffd5d68>
			c_comp_function(snippet_starting_address, snippet_storage_address, snippet_word_count, op_type);
		}
		// Turn off LED 9, signifying that signal processing is done
		IOWR_32DIRECT(PIO_LEDS_SHARED_BASE, 0, 0);
	}
	send_mail((alt_u32)start_storage_address, (alt_u32)memory_size);
 4040608:	e0bffb17 	ldw	r2,-20(fp)
 404060c:	e0fffa17 	ldw	r3,-24(fp)
 4040610:	180b883a 	mov	r5,r3
 4040614:	1009883a 	mov	r4,r2
 4040618:	40402e40 	call	40402e4 <send_mail>
}
 404061c:	0001883a 	nop
 4040620:	e037883a 	mov	sp,fp
 4040624:	dfc00117 	ldw	ra,4(sp)
 4040628:	df000017 	ldw	fp,0(sp)
 404062c:	dec00204 	addi	sp,sp,8
 4040630:	f800283a 	ret

04040634 <c_comp_function>:

void c_comp_function(alt_u32 *start_addr, alt_u32 *store_addr, alt_u32 word_count, int op_type)
{
 4040634:	defffa04 	addi	sp,sp,-24
 4040638:	df000515 	stw	fp,20(sp)
 404063c:	df000504 	addi	fp,sp,20
 4040640:	e13ffc15 	stw	r4,-16(fp)
 4040644:	e17ffd15 	stw	r5,-12(fp)
 4040648:	e1bffe15 	stw	r6,-8(fp)
 404064c:	e1ffff15 	stw	r7,-4(fp)
	alt_u32 data;
	while(word_count > 0)
 4040650:	00001806 	br	40406b4 <c_comp_function+0x80>
	{
		// Load data
		data = IORD_32DIRECT(start_addr, 0);
 4040654:	e0bffc17 	ldw	r2,-16(fp)
 4040658:	10800037 	ldwio	r2,0(r2)
 404065c:	e0bffb15 	stw	r2,-20(fp)
		// Perform operation
		data = (signed)data;
		if(op_type == 0)
 4040660:	e0bfff17 	ldw	r2,-4(fp)
 4040664:	1000041e 	bne	r2,zero,4040678 <c_comp_function+0x44>
		{
			data = (data >> 1);
 4040668:	e0bffb17 	ldw	r2,-20(fp)
 404066c:	1004d07a 	srli	r2,r2,1
 4040670:	e0bffb15 	stw	r2,-20(fp)
 4040674:	00000306 	br	4040684 <c_comp_function+0x50>
		}
		else
		{
			data = (data << 1);
 4040678:	e0bffb17 	ldw	r2,-20(fp)
 404067c:	1085883a 	add	r2,r2,r2
 4040680:	e0bffb15 	stw	r2,-20(fp)
		}
		// Store data
		IOWR_32DIRECT(store_addr, 0, (alt_u32)data);
 4040684:	e0fffb17 	ldw	r3,-20(fp)
 4040688:	e0bffd17 	ldw	r2,-12(fp)
 404068c:	10c00035 	stwio	r3,0(r2)
		// Update variables
		start_addr += 4;
 4040690:	e0bffc17 	ldw	r2,-16(fp)
 4040694:	10800404 	addi	r2,r2,16
 4040698:	e0bffc15 	stw	r2,-16(fp)
		store_addr += 4;
 404069c:	e0bffd17 	ldw	r2,-12(fp)
 40406a0:	10800404 	addi	r2,r2,16
 40406a4:	e0bffd15 	stw	r2,-12(fp)
		word_count --;
 40406a8:	e0bffe17 	ldw	r2,-8(fp)
 40406ac:	10bfffc4 	addi	r2,r2,-1
 40406b0:	e0bffe15 	stw	r2,-8(fp)
}

void c_comp_function(alt_u32 *start_addr, alt_u32 *store_addr, alt_u32 word_count, int op_type)
{
	alt_u32 data;
	while(word_count > 0)
 40406b4:	e0bffe17 	ldw	r2,-8(fp)
 40406b8:	103fe61e 	bne	r2,zero,4040654 <__alt_data_end+0xfffd5e54>
		// Update variables
		start_addr += 4;
		store_addr += 4;
		word_count --;
	}
}
 40406bc:	0001883a 	nop
 40406c0:	e037883a 	mov	sp,fp
 40406c4:	df000017 	ldw	fp,0(sp)
 40406c8:	dec00104 	addi	sp,sp,4
 40406cc:	f800283a 	ret

040406d0 <main>:

// ----------------------- Main function ----------------------------------

int main()
{
 40406d0:	defffe04 	addi	sp,sp,-8
 40406d4:	dfc00115 	stw	ra,4(sp)
 40406d8:	df000015 	stw	fp,0(sp)
 40406dc:	d839883a 	mov	fp,sp
	// Setup interrupts on the first 4 switches
	setup_switch_interrupts(0x7);
 40406e0:	010001c4 	movi	r4,7
 40406e4:	40404a00 	call	40404a0 <setup_switch_interrupts>

	// Wait for switches
	while(1)
	{
		// Poll choice once every millisecond
		usleep(1000);
 40406e8:	0100fa04 	movi	r4,1000
 40406ec:	404db240 	call	404db24 <usleep>
		if(choice != 0)
 40406f0:	d0a6f317 	ldw	r2,-25652(gp)
 40406f4:	103ffc26 	beq	r2,zero,40406e8 <__alt_data_end+0xfffd5ee8>
		{
			choose_task(choice);
 40406f8:	d0a6f317 	ldw	r2,-25652(gp)
 40406fc:	1009883a 	mov	r4,r2
 4040700:	40404080 	call	4040408 <choose_task>
			choice = 0x0;
 4040704:	d026f315 	stw	zero,-25652(gp)
		}
	};
 4040708:	003ff706 	br	40406e8 <__alt_data_end+0xfffd5ee8>

0404070c <_printf_r>:
 404070c:	defffd04 	addi	sp,sp,-12
 4040710:	2805883a 	mov	r2,r5
 4040714:	dfc00015 	stw	ra,0(sp)
 4040718:	d9800115 	stw	r6,4(sp)
 404071c:	d9c00215 	stw	r7,8(sp)
 4040720:	21400217 	ldw	r5,8(r4)
 4040724:	d9c00104 	addi	r7,sp,4
 4040728:	100d883a 	mov	r6,r2
 404072c:	40408e40 	call	40408e4 <___vfprintf_internal_r>
 4040730:	dfc00017 	ldw	ra,0(sp)
 4040734:	dec00304 	addi	sp,sp,12
 4040738:	f800283a 	ret

0404073c <printf>:
 404073c:	defffc04 	addi	sp,sp,-16
 4040740:	dfc00015 	stw	ra,0(sp)
 4040744:	d9400115 	stw	r5,4(sp)
 4040748:	d9800215 	stw	r6,8(sp)
 404074c:	d9c00315 	stw	r7,12(sp)
 4040750:	00810174 	movhi	r2,1029
 4040754:	10885104 	addi	r2,r2,8516
 4040758:	10800017 	ldw	r2,0(r2)
 404075c:	200b883a 	mov	r5,r4
 4040760:	d9800104 	addi	r6,sp,4
 4040764:	11000217 	ldw	r4,8(r2)
 4040768:	4042adc0 	call	4042adc <__vfprintf_internal>
 404076c:	dfc00017 	ldw	ra,0(sp)
 4040770:	dec00404 	addi	sp,sp,16
 4040774:	f800283a 	ret

04040778 <_puts_r>:
 4040778:	defff604 	addi	sp,sp,-40
 404077c:	dc000715 	stw	r16,28(sp)
 4040780:	2021883a 	mov	r16,r4
 4040784:	2809883a 	mov	r4,r5
 4040788:	dc400815 	stw	r17,32(sp)
 404078c:	dfc00915 	stw	ra,36(sp)
 4040790:	2823883a 	mov	r17,r5
 4040794:	404084c0 	call	404084c <strlen>
 4040798:	10c00044 	addi	r3,r2,1
 404079c:	d8800115 	stw	r2,4(sp)
 40407a0:	00810174 	movhi	r2,1029
 40407a4:	1080af04 	addi	r2,r2,700
 40407a8:	d8800215 	stw	r2,8(sp)
 40407ac:	00800044 	movi	r2,1
 40407b0:	d8800315 	stw	r2,12(sp)
 40407b4:	00800084 	movi	r2,2
 40407b8:	dc400015 	stw	r17,0(sp)
 40407bc:	d8c00615 	stw	r3,24(sp)
 40407c0:	dec00415 	stw	sp,16(sp)
 40407c4:	d8800515 	stw	r2,20(sp)
 40407c8:	80000226 	beq	r16,zero,40407d4 <_puts_r+0x5c>
 40407cc:	80800e17 	ldw	r2,56(r16)
 40407d0:	10001426 	beq	r2,zero,4040824 <_puts_r+0xac>
 40407d4:	81400217 	ldw	r5,8(r16)
 40407d8:	2880030b 	ldhu	r2,12(r5)
 40407dc:	10c8000c 	andi	r3,r2,8192
 40407e0:	1800061e 	bne	r3,zero,40407fc <_puts_r+0x84>
 40407e4:	29001917 	ldw	r4,100(r5)
 40407e8:	00f7ffc4 	movi	r3,-8193
 40407ec:	10880014 	ori	r2,r2,8192
 40407f0:	20c6703a 	and	r3,r4,r3
 40407f4:	2880030d 	sth	r2,12(r5)
 40407f8:	28c01915 	stw	r3,100(r5)
 40407fc:	d9800404 	addi	r6,sp,16
 4040800:	8009883a 	mov	r4,r16
 4040804:	404500c0 	call	404500c <__sfvwrite_r>
 4040808:	1000091e 	bne	r2,zero,4040830 <_puts_r+0xb8>
 404080c:	00800284 	movi	r2,10
 4040810:	dfc00917 	ldw	ra,36(sp)
 4040814:	dc400817 	ldw	r17,32(sp)
 4040818:	dc000717 	ldw	r16,28(sp)
 404081c:	dec00a04 	addi	sp,sp,40
 4040820:	f800283a 	ret
 4040824:	8009883a 	mov	r4,r16
 4040828:	4044b880 	call	4044b88 <__sinit>
 404082c:	003fe906 	br	40407d4 <__alt_data_end+0xfffd5fd4>
 4040830:	00bfffc4 	movi	r2,-1
 4040834:	003ff606 	br	4040810 <__alt_data_end+0xfffd6010>

04040838 <puts>:
 4040838:	00810174 	movhi	r2,1029
 404083c:	10885104 	addi	r2,r2,8516
 4040840:	200b883a 	mov	r5,r4
 4040844:	11000017 	ldw	r4,0(r2)
 4040848:	40407781 	jmpi	4040778 <_puts_r>

0404084c <strlen>:
 404084c:	208000cc 	andi	r2,r4,3
 4040850:	10002026 	beq	r2,zero,40408d4 <strlen+0x88>
 4040854:	20800007 	ldb	r2,0(r4)
 4040858:	10002026 	beq	r2,zero,40408dc <strlen+0x90>
 404085c:	2005883a 	mov	r2,r4
 4040860:	00000206 	br	404086c <strlen+0x20>
 4040864:	10c00007 	ldb	r3,0(r2)
 4040868:	18001826 	beq	r3,zero,40408cc <strlen+0x80>
 404086c:	10800044 	addi	r2,r2,1
 4040870:	10c000cc 	andi	r3,r2,3
 4040874:	183ffb1e 	bne	r3,zero,4040864 <__alt_data_end+0xfffd6064>
 4040878:	10c00017 	ldw	r3,0(r2)
 404087c:	01ffbff4 	movhi	r7,65279
 4040880:	39ffbfc4 	addi	r7,r7,-257
 4040884:	00ca303a 	nor	r5,zero,r3
 4040888:	01a02074 	movhi	r6,32897
 404088c:	19c7883a 	add	r3,r3,r7
 4040890:	31a02004 	addi	r6,r6,-32640
 4040894:	1946703a 	and	r3,r3,r5
 4040898:	1986703a 	and	r3,r3,r6
 404089c:	1800091e 	bne	r3,zero,40408c4 <strlen+0x78>
 40408a0:	10800104 	addi	r2,r2,4
 40408a4:	10c00017 	ldw	r3,0(r2)
 40408a8:	19cb883a 	add	r5,r3,r7
 40408ac:	00c6303a 	nor	r3,zero,r3
 40408b0:	28c6703a 	and	r3,r5,r3
 40408b4:	1986703a 	and	r3,r3,r6
 40408b8:	183ff926 	beq	r3,zero,40408a0 <__alt_data_end+0xfffd60a0>
 40408bc:	00000106 	br	40408c4 <strlen+0x78>
 40408c0:	10800044 	addi	r2,r2,1
 40408c4:	10c00007 	ldb	r3,0(r2)
 40408c8:	183ffd1e 	bne	r3,zero,40408c0 <__alt_data_end+0xfffd60c0>
 40408cc:	1105c83a 	sub	r2,r2,r4
 40408d0:	f800283a 	ret
 40408d4:	2005883a 	mov	r2,r4
 40408d8:	003fe706 	br	4040878 <__alt_data_end+0xfffd6078>
 40408dc:	0005883a 	mov	r2,zero
 40408e0:	f800283a 	ret

040408e4 <___vfprintf_internal_r>:
 40408e4:	deffb804 	addi	sp,sp,-288
 40408e8:	dfc04715 	stw	ra,284(sp)
 40408ec:	ddc04515 	stw	r23,276(sp)
 40408f0:	dd404315 	stw	r21,268(sp)
 40408f4:	d9002c15 	stw	r4,176(sp)
 40408f8:	282f883a 	mov	r23,r5
 40408fc:	302b883a 	mov	r21,r6
 4040900:	d9c02d15 	stw	r7,180(sp)
 4040904:	df004615 	stw	fp,280(sp)
 4040908:	dd804415 	stw	r22,272(sp)
 404090c:	dd004215 	stw	r20,264(sp)
 4040910:	dcc04115 	stw	r19,260(sp)
 4040914:	dc804015 	stw	r18,256(sp)
 4040918:	dc403f15 	stw	r17,252(sp)
 404091c:	dc003e15 	stw	r16,248(sp)
 4040920:	40456fc0 	call	40456fc <_localeconv_r>
 4040924:	10800017 	ldw	r2,0(r2)
 4040928:	1009883a 	mov	r4,r2
 404092c:	d8803415 	stw	r2,208(sp)
 4040930:	404084c0 	call	404084c <strlen>
 4040934:	d8803715 	stw	r2,220(sp)
 4040938:	d8802c17 	ldw	r2,176(sp)
 404093c:	10000226 	beq	r2,zero,4040948 <___vfprintf_internal_r+0x64>
 4040940:	10800e17 	ldw	r2,56(r2)
 4040944:	1000f926 	beq	r2,zero,4040d2c <___vfprintf_internal_r+0x448>
 4040948:	b880030b 	ldhu	r2,12(r23)
 404094c:	10c8000c 	andi	r3,r2,8192
 4040950:	1800061e 	bne	r3,zero,404096c <___vfprintf_internal_r+0x88>
 4040954:	b9001917 	ldw	r4,100(r23)
 4040958:	00f7ffc4 	movi	r3,-8193
 404095c:	10880014 	ori	r2,r2,8192
 4040960:	20c6703a 	and	r3,r4,r3
 4040964:	b880030d 	sth	r2,12(r23)
 4040968:	b8c01915 	stw	r3,100(r23)
 404096c:	10c0020c 	andi	r3,r2,8
 4040970:	1800c126 	beq	r3,zero,4040c78 <___vfprintf_internal_r+0x394>
 4040974:	b8c00417 	ldw	r3,16(r23)
 4040978:	1800bf26 	beq	r3,zero,4040c78 <___vfprintf_internal_r+0x394>
 404097c:	1080068c 	andi	r2,r2,26
 4040980:	00c00284 	movi	r3,10
 4040984:	10c0c426 	beq	r2,r3,4040c98 <___vfprintf_internal_r+0x3b4>
 4040988:	d8c00404 	addi	r3,sp,16
 404098c:	05010174 	movhi	r20,1029
 4040990:	d9001e04 	addi	r4,sp,120
 4040994:	a500c084 	addi	r20,r20,770
 4040998:	d8c01e15 	stw	r3,120(sp)
 404099c:	d8002015 	stw	zero,128(sp)
 40409a0:	d8001f15 	stw	zero,124(sp)
 40409a4:	d8003315 	stw	zero,204(sp)
 40409a8:	d8003615 	stw	zero,216(sp)
 40409ac:	d8003815 	stw	zero,224(sp)
 40409b0:	1811883a 	mov	r8,r3
 40409b4:	d8003915 	stw	zero,228(sp)
 40409b8:	d8003a15 	stw	zero,232(sp)
 40409bc:	d8002f15 	stw	zero,188(sp)
 40409c0:	d9002815 	stw	r4,160(sp)
 40409c4:	a8800007 	ldb	r2,0(r21)
 40409c8:	10027b26 	beq	r2,zero,40413b8 <___vfprintf_internal_r+0xad4>
 40409cc:	00c00944 	movi	r3,37
 40409d0:	a821883a 	mov	r16,r21
 40409d4:	10c0021e 	bne	r2,r3,40409e0 <___vfprintf_internal_r+0xfc>
 40409d8:	00001406 	br	4040a2c <___vfprintf_internal_r+0x148>
 40409dc:	10c00326 	beq	r2,r3,40409ec <___vfprintf_internal_r+0x108>
 40409e0:	84000044 	addi	r16,r16,1
 40409e4:	80800007 	ldb	r2,0(r16)
 40409e8:	103ffc1e 	bne	r2,zero,40409dc <__alt_data_end+0xfffd61dc>
 40409ec:	8563c83a 	sub	r17,r16,r21
 40409f0:	88000e26 	beq	r17,zero,4040a2c <___vfprintf_internal_r+0x148>
 40409f4:	d8c02017 	ldw	r3,128(sp)
 40409f8:	d8801f17 	ldw	r2,124(sp)
 40409fc:	45400015 	stw	r21,0(r8)
 4040a00:	1c47883a 	add	r3,r3,r17
 4040a04:	10800044 	addi	r2,r2,1
 4040a08:	d8c02015 	stw	r3,128(sp)
 4040a0c:	44400115 	stw	r17,4(r8)
 4040a10:	d8801f15 	stw	r2,124(sp)
 4040a14:	00c001c4 	movi	r3,7
 4040a18:	1880a716 	blt	r3,r2,4040cb8 <___vfprintf_internal_r+0x3d4>
 4040a1c:	42000204 	addi	r8,r8,8
 4040a20:	d9402f17 	ldw	r5,188(sp)
 4040a24:	2c4b883a 	add	r5,r5,r17
 4040a28:	d9402f15 	stw	r5,188(sp)
 4040a2c:	80800007 	ldb	r2,0(r16)
 4040a30:	1000a826 	beq	r2,zero,4040cd4 <___vfprintf_internal_r+0x3f0>
 4040a34:	84400047 	ldb	r17,1(r16)
 4040a38:	00bfffc4 	movi	r2,-1
 4040a3c:	85400044 	addi	r21,r16,1
 4040a40:	d8002785 	stb	zero,158(sp)
 4040a44:	0007883a 	mov	r3,zero
 4040a48:	000f883a 	mov	r7,zero
 4040a4c:	d8802915 	stw	r2,164(sp)
 4040a50:	d8003115 	stw	zero,196(sp)
 4040a54:	0025883a 	mov	r18,zero
 4040a58:	01401604 	movi	r5,88
 4040a5c:	01800244 	movi	r6,9
 4040a60:	02800a84 	movi	r10,42
 4040a64:	02401b04 	movi	r9,108
 4040a68:	ad400044 	addi	r21,r21,1
 4040a6c:	88bff804 	addi	r2,r17,-32
 4040a70:	28830436 	bltu	r5,r2,4041684 <___vfprintf_internal_r+0xda0>
 4040a74:	100490ba 	slli	r2,r2,2
 4040a78:	01010134 	movhi	r4,1028
 4040a7c:	2102a304 	addi	r4,r4,2700
 4040a80:	1105883a 	add	r2,r2,r4
 4040a84:	10800017 	ldw	r2,0(r2)
 4040a88:	1000683a 	jmp	r2
 4040a8c:	040415a4 	muli	r16,zero,4182
 4040a90:	04041684 	movi	r16,4186
 4040a94:	04041684 	movi	r16,4186
 4040a98:	040415c4 	movi	r16,4183
 4040a9c:	04041684 	movi	r16,4186
 4040aa0:	04041684 	movi	r16,4186
 4040aa4:	04041684 	movi	r16,4186
 4040aa8:	04041684 	movi	r16,4186
 4040aac:	04041684 	movi	r16,4186
 4040ab0:	04041684 	movi	r16,4186
 4040ab4:	04040d38 	rdprs	r16,zero,4148
 4040ab8:	040414e0 	cmpeqi	r16,zero,4179
 4040abc:	04041684 	movi	r16,4186
 4040ac0:	04040c00 	call	4040c0 <__alt_mem_SDRAM_Controller_Shared+0x4040c0>
 4040ac4:	04040d60 	cmpeqi	r16,zero,4149
 4040ac8:	04041684 	movi	r16,4186
 4040acc:	04040da0 	cmpeqi	r16,zero,4150
 4040ad0:	04040dac 	andhi	r16,zero,4150
 4040ad4:	04040dac 	andhi	r16,zero,4150
 4040ad8:	04040dac 	andhi	r16,zero,4150
 4040adc:	04040dac 	andhi	r16,zero,4150
 4040ae0:	04040dac 	andhi	r16,zero,4150
 4040ae4:	04040dac 	andhi	r16,zero,4150
 4040ae8:	04040dac 	andhi	r16,zero,4150
 4040aec:	04040dac 	andhi	r16,zero,4150
 4040af0:	04040dac 	andhi	r16,zero,4150
 4040af4:	04041684 	movi	r16,4186
 4040af8:	04041684 	movi	r16,4186
 4040afc:	04041684 	movi	r16,4186
 4040b00:	04041684 	movi	r16,4186
 4040b04:	04041684 	movi	r16,4186
 4040b08:	04041684 	movi	r16,4186
 4040b0c:	04041684 	movi	r16,4186
 4040b10:	04041684 	movi	r16,4186
 4040b14:	04041684 	movi	r16,4186
 4040b18:	04041684 	movi	r16,4186
 4040b1c:	04040de0 	cmpeqi	r16,zero,4151
 4040b20:	04040e9c 	xori	r16,zero,4154
 4040b24:	04041684 	movi	r16,4186
 4040b28:	04040e9c 	xori	r16,zero,4154
 4040b2c:	04041684 	movi	r16,4186
 4040b30:	04041684 	movi	r16,4186
 4040b34:	04041684 	movi	r16,4186
 4040b38:	04041684 	movi	r16,4186
 4040b3c:	04040f3c 	xorhi	r16,zero,4156
 4040b40:	04041684 	movi	r16,4186
 4040b44:	04041684 	movi	r16,4186
 4040b48:	04040f48 	cmpgei	r16,zero,4157
 4040b4c:	04041684 	movi	r16,4186
 4040b50:	04041684 	movi	r16,4186
 4040b54:	04041684 	movi	r16,4186
 4040b58:	04041684 	movi	r16,4186
 4040b5c:	04041684 	movi	r16,4186
 4040b60:	040413c0 	call	40413c <__alt_mem_SDRAM_Controller_Shared+0x40413c>
 4040b64:	04041684 	movi	r16,4186
 4040b68:	04041684 	movi	r16,4186
 4040b6c:	04041420 	cmpeqi	r16,zero,4176
 4040b70:	04041684 	movi	r16,4186
 4040b74:	04041684 	movi	r16,4186
 4040b78:	04041684 	movi	r16,4186
 4040b7c:	04041684 	movi	r16,4186
 4040b80:	04041684 	movi	r16,4186
 4040b84:	04041684 	movi	r16,4186
 4040b88:	04041684 	movi	r16,4186
 4040b8c:	04041684 	movi	r16,4186
 4040b90:	04041684 	movi	r16,4186
 4040b94:	04041684 	movi	r16,4186
 4040b98:	04041630 	cmpltui	r16,zero,4184
 4040b9c:	040415d0 	cmplti	r16,zero,4183
 4040ba0:	04040e9c 	xori	r16,zero,4154
 4040ba4:	04040e9c 	xori	r16,zero,4154
 4040ba8:	04040e9c 	xori	r16,zero,4154
 4040bac:	040415e0 	cmpeqi	r16,zero,4183
 4040bb0:	040415d0 	cmplti	r16,zero,4183
 4040bb4:	04041684 	movi	r16,4186
 4040bb8:	04041684 	movi	r16,4186
 4040bbc:	040415ec 	andhi	r16,zero,4183
 4040bc0:	04041684 	movi	r16,4186
 4040bc4:	040415fc 	xorhi	r16,zero,4183
 4040bc8:	040414d0 	cmplti	r16,zero,4179
 4040bcc:	04040c0c 	andi	r16,zero,4144
 4040bd0:	040414f0 	cmpltui	r16,zero,4179
 4040bd4:	04041684 	movi	r16,4186
 4040bd8:	040414fc 	xorhi	r16,zero,4179
 4040bdc:	04041684 	movi	r16,4186
 4040be0:	04041558 	cmpnei	r16,zero,4181
 4040be4:	04041684 	movi	r16,4186
 4040be8:	04041684 	movi	r16,4186
 4040bec:	04041568 	cmpgeui	r16,zero,4181
 4040bf0:	d9003117 	ldw	r4,196(sp)
 4040bf4:	d8802d15 	stw	r2,180(sp)
 4040bf8:	0109c83a 	sub	r4,zero,r4
 4040bfc:	d9003115 	stw	r4,196(sp)
 4040c00:	94800114 	ori	r18,r18,4
 4040c04:	ac400007 	ldb	r17,0(r21)
 4040c08:	003f9706 	br	4040a68 <__alt_data_end+0xfffd6268>
 4040c0c:	00800c04 	movi	r2,48
 4040c10:	d9002d17 	ldw	r4,180(sp)
 4040c14:	d9402917 	ldw	r5,164(sp)
 4040c18:	d8802705 	stb	r2,156(sp)
 4040c1c:	00801e04 	movi	r2,120
 4040c20:	d8802745 	stb	r2,157(sp)
 4040c24:	d8002785 	stb	zero,158(sp)
 4040c28:	20c00104 	addi	r3,r4,4
 4040c2c:	24c00017 	ldw	r19,0(r4)
 4040c30:	002d883a 	mov	r22,zero
 4040c34:	90800094 	ori	r2,r18,2
 4040c38:	28029a16 	blt	r5,zero,40416a4 <___vfprintf_internal_r+0xdc0>
 4040c3c:	00bfdfc4 	movi	r2,-129
 4040c40:	90a4703a 	and	r18,r18,r2
 4040c44:	d8c02d15 	stw	r3,180(sp)
 4040c48:	94800094 	ori	r18,r18,2
 4040c4c:	9802871e 	bne	r19,zero,404166c <___vfprintf_internal_r+0xd88>
 4040c50:	00810174 	movhi	r2,1029
 4040c54:	1080b904 	addi	r2,r2,740
 4040c58:	d8803915 	stw	r2,228(sp)
 4040c5c:	04401e04 	movi	r17,120
 4040c60:	d8802917 	ldw	r2,164(sp)
 4040c64:	0039883a 	mov	fp,zero
 4040c68:	1001e926 	beq	r2,zero,4041410 <___vfprintf_internal_r+0xb2c>
 4040c6c:	0027883a 	mov	r19,zero
 4040c70:	002d883a 	mov	r22,zero
 4040c74:	00020506 	br	404148c <___vfprintf_internal_r+0xba8>
 4040c78:	d9002c17 	ldw	r4,176(sp)
 4040c7c:	b80b883a 	mov	r5,r23
 4040c80:	4042bb40 	call	4042bb4 <__swsetup_r>
 4040c84:	1005ac1e 	bne	r2,zero,4042338 <___vfprintf_internal_r+0x1a54>
 4040c88:	b880030b 	ldhu	r2,12(r23)
 4040c8c:	00c00284 	movi	r3,10
 4040c90:	1080068c 	andi	r2,r2,26
 4040c94:	10ff3c1e 	bne	r2,r3,4040988 <__alt_data_end+0xfffd6188>
 4040c98:	b880038f 	ldh	r2,14(r23)
 4040c9c:	103f3a16 	blt	r2,zero,4040988 <__alt_data_end+0xfffd6188>
 4040ca0:	d9c02d17 	ldw	r7,180(sp)
 4040ca4:	d9002c17 	ldw	r4,176(sp)
 4040ca8:	a80d883a 	mov	r6,r21
 4040cac:	b80b883a 	mov	r5,r23
 4040cb0:	4042af80 	call	4042af8 <__sbprintf>
 4040cb4:	00001106 	br	4040cfc <___vfprintf_internal_r+0x418>
 4040cb8:	d9002c17 	ldw	r4,176(sp)
 4040cbc:	d9801e04 	addi	r6,sp,120
 4040cc0:	b80b883a 	mov	r5,r23
 4040cc4:	4047ee00 	call	4047ee0 <__sprint_r>
 4040cc8:	1000081e 	bne	r2,zero,4040cec <___vfprintf_internal_r+0x408>
 4040ccc:	da000404 	addi	r8,sp,16
 4040cd0:	003f5306 	br	4040a20 <__alt_data_end+0xfffd6220>
 4040cd4:	d8802017 	ldw	r2,128(sp)
 4040cd8:	10000426 	beq	r2,zero,4040cec <___vfprintf_internal_r+0x408>
 4040cdc:	d9002c17 	ldw	r4,176(sp)
 4040ce0:	d9801e04 	addi	r6,sp,120
 4040ce4:	b80b883a 	mov	r5,r23
 4040ce8:	4047ee00 	call	4047ee0 <__sprint_r>
 4040cec:	b880030b 	ldhu	r2,12(r23)
 4040cf0:	1080100c 	andi	r2,r2,64
 4040cf4:	1005901e 	bne	r2,zero,4042338 <___vfprintf_internal_r+0x1a54>
 4040cf8:	d8802f17 	ldw	r2,188(sp)
 4040cfc:	dfc04717 	ldw	ra,284(sp)
 4040d00:	df004617 	ldw	fp,280(sp)
 4040d04:	ddc04517 	ldw	r23,276(sp)
 4040d08:	dd804417 	ldw	r22,272(sp)
 4040d0c:	dd404317 	ldw	r21,268(sp)
 4040d10:	dd004217 	ldw	r20,264(sp)
 4040d14:	dcc04117 	ldw	r19,260(sp)
 4040d18:	dc804017 	ldw	r18,256(sp)
 4040d1c:	dc403f17 	ldw	r17,252(sp)
 4040d20:	dc003e17 	ldw	r16,248(sp)
 4040d24:	dec04804 	addi	sp,sp,288
 4040d28:	f800283a 	ret
 4040d2c:	d9002c17 	ldw	r4,176(sp)
 4040d30:	4044b880 	call	4044b88 <__sinit>
 4040d34:	003f0406 	br	4040948 <__alt_data_end+0xfffd6148>
 4040d38:	d8802d17 	ldw	r2,180(sp)
 4040d3c:	d9002d17 	ldw	r4,180(sp)
 4040d40:	10800017 	ldw	r2,0(r2)
 4040d44:	d8803115 	stw	r2,196(sp)
 4040d48:	20800104 	addi	r2,r4,4
 4040d4c:	d9003117 	ldw	r4,196(sp)
 4040d50:	203fa716 	blt	r4,zero,4040bf0 <__alt_data_end+0xfffd63f0>
 4040d54:	d8802d15 	stw	r2,180(sp)
 4040d58:	ac400007 	ldb	r17,0(r21)
 4040d5c:	003f4206 	br	4040a68 <__alt_data_end+0xfffd6268>
 4040d60:	ac400007 	ldb	r17,0(r21)
 4040d64:	aac00044 	addi	r11,r21,1
 4040d68:	8a872826 	beq	r17,r10,4042a0c <___vfprintf_internal_r+0x2128>
 4040d6c:	88bff404 	addi	r2,r17,-48
 4040d70:	0009883a 	mov	r4,zero
 4040d74:	30867d36 	bltu	r6,r2,404276c <___vfprintf_internal_r+0x1e88>
 4040d78:	5c400007 	ldb	r17,0(r11)
 4040d7c:	210002a4 	muli	r4,r4,10
 4040d80:	5d400044 	addi	r21,r11,1
 4040d84:	a817883a 	mov	r11,r21
 4040d88:	2089883a 	add	r4,r4,r2
 4040d8c:	88bff404 	addi	r2,r17,-48
 4040d90:	30bff92e 	bgeu	r6,r2,4040d78 <__alt_data_end+0xfffd6578>
 4040d94:	2005c916 	blt	r4,zero,40424bc <___vfprintf_internal_r+0x1bd8>
 4040d98:	d9002915 	stw	r4,164(sp)
 4040d9c:	003f3306 	br	4040a6c <__alt_data_end+0xfffd626c>
 4040da0:	94802014 	ori	r18,r18,128
 4040da4:	ac400007 	ldb	r17,0(r21)
 4040da8:	003f2f06 	br	4040a68 <__alt_data_end+0xfffd6268>
 4040dac:	a809883a 	mov	r4,r21
 4040db0:	d8003115 	stw	zero,196(sp)
 4040db4:	88bff404 	addi	r2,r17,-48
 4040db8:	0017883a 	mov	r11,zero
 4040dbc:	24400007 	ldb	r17,0(r4)
 4040dc0:	5ac002a4 	muli	r11,r11,10
 4040dc4:	ad400044 	addi	r21,r21,1
 4040dc8:	a809883a 	mov	r4,r21
 4040dcc:	12d7883a 	add	r11,r2,r11
 4040dd0:	88bff404 	addi	r2,r17,-48
 4040dd4:	30bff92e 	bgeu	r6,r2,4040dbc <__alt_data_end+0xfffd65bc>
 4040dd8:	dac03115 	stw	r11,196(sp)
 4040ddc:	003f2306 	br	4040a6c <__alt_data_end+0xfffd626c>
 4040de0:	18c03fcc 	andi	r3,r3,255
 4040de4:	18072b1e 	bne	r3,zero,4042a94 <___vfprintf_internal_r+0x21b0>
 4040de8:	94800414 	ori	r18,r18,16
 4040dec:	9080080c 	andi	r2,r18,32
 4040df0:	10037b26 	beq	r2,zero,4041be0 <___vfprintf_internal_r+0x12fc>
 4040df4:	d9402d17 	ldw	r5,180(sp)
 4040df8:	28800117 	ldw	r2,4(r5)
 4040dfc:	2cc00017 	ldw	r19,0(r5)
 4040e00:	29400204 	addi	r5,r5,8
 4040e04:	d9402d15 	stw	r5,180(sp)
 4040e08:	102d883a 	mov	r22,r2
 4040e0c:	10044b16 	blt	r2,zero,4041f3c <___vfprintf_internal_r+0x1658>
 4040e10:	d9402917 	ldw	r5,164(sp)
 4040e14:	df002783 	ldbu	fp,158(sp)
 4040e18:	2803bc16 	blt	r5,zero,4041d0c <___vfprintf_internal_r+0x1428>
 4040e1c:	00ffdfc4 	movi	r3,-129
 4040e20:	9d84b03a 	or	r2,r19,r22
 4040e24:	90e4703a 	and	r18,r18,r3
 4040e28:	10017726 	beq	r2,zero,4041408 <___vfprintf_internal_r+0xb24>
 4040e2c:	b0038326 	beq	r22,zero,4041c3c <___vfprintf_internal_r+0x1358>
 4040e30:	dc402a15 	stw	r17,168(sp)
 4040e34:	dc001e04 	addi	r16,sp,120
 4040e38:	b023883a 	mov	r17,r22
 4040e3c:	402d883a 	mov	r22,r8
 4040e40:	9809883a 	mov	r4,r19
 4040e44:	880b883a 	mov	r5,r17
 4040e48:	01800284 	movi	r6,10
 4040e4c:	000f883a 	mov	r7,zero
 4040e50:	404a2d80 	call	404a2d8 <__umoddi3>
 4040e54:	10800c04 	addi	r2,r2,48
 4040e58:	843fffc4 	addi	r16,r16,-1
 4040e5c:	9809883a 	mov	r4,r19
 4040e60:	880b883a 	mov	r5,r17
 4040e64:	80800005 	stb	r2,0(r16)
 4040e68:	01800284 	movi	r6,10
 4040e6c:	000f883a 	mov	r7,zero
 4040e70:	4049d600 	call	4049d60 <__udivdi3>
 4040e74:	1027883a 	mov	r19,r2
 4040e78:	10c4b03a 	or	r2,r2,r3
 4040e7c:	1823883a 	mov	r17,r3
 4040e80:	103fef1e 	bne	r2,zero,4040e40 <__alt_data_end+0xfffd6640>
 4040e84:	d8c02817 	ldw	r3,160(sp)
 4040e88:	dc402a17 	ldw	r17,168(sp)
 4040e8c:	b011883a 	mov	r8,r22
 4040e90:	1c07c83a 	sub	r3,r3,r16
 4040e94:	d8c02e15 	stw	r3,184(sp)
 4040e98:	00005906 	br	4041000 <___vfprintf_internal_r+0x71c>
 4040e9c:	18c03fcc 	andi	r3,r3,255
 4040ea0:	1806fa1e 	bne	r3,zero,4042a8c <___vfprintf_internal_r+0x21a8>
 4040ea4:	9080020c 	andi	r2,r18,8
 4040ea8:	10048a26 	beq	r2,zero,40420d4 <___vfprintf_internal_r+0x17f0>
 4040eac:	d8c02d17 	ldw	r3,180(sp)
 4040eb0:	d9002d17 	ldw	r4,180(sp)
 4040eb4:	d9402d17 	ldw	r5,180(sp)
 4040eb8:	18c00017 	ldw	r3,0(r3)
 4040ebc:	21000117 	ldw	r4,4(r4)
 4040ec0:	29400204 	addi	r5,r5,8
 4040ec4:	d8c03615 	stw	r3,216(sp)
 4040ec8:	d9003815 	stw	r4,224(sp)
 4040ecc:	d9402d15 	stw	r5,180(sp)
 4040ed0:	d9003617 	ldw	r4,216(sp)
 4040ed4:	d9403817 	ldw	r5,224(sp)
 4040ed8:	da003d15 	stw	r8,244(sp)
 4040edc:	04000044 	movi	r16,1
 4040ee0:	4047b040 	call	4047b04 <__fpclassifyd>
 4040ee4:	da003d17 	ldw	r8,244(sp)
 4040ee8:	14041f1e 	bne	r2,r16,4041f68 <___vfprintf_internal_r+0x1684>
 4040eec:	d9003617 	ldw	r4,216(sp)
 4040ef0:	d9403817 	ldw	r5,224(sp)
 4040ef4:	000d883a 	mov	r6,zero
 4040ef8:	000f883a 	mov	r7,zero
 4040efc:	404bcbc0 	call	404bcbc <__ledf2>
 4040f00:	da003d17 	ldw	r8,244(sp)
 4040f04:	1005be16 	blt	r2,zero,4042600 <___vfprintf_internal_r+0x1d1c>
 4040f08:	df002783 	ldbu	fp,158(sp)
 4040f0c:	008011c4 	movi	r2,71
 4040f10:	1445330e 	bge	r2,r17,40423e0 <___vfprintf_internal_r+0x1afc>
 4040f14:	04010174 	movhi	r16,1029
 4040f18:	8400b104 	addi	r16,r16,708
 4040f1c:	00c000c4 	movi	r3,3
 4040f20:	00bfdfc4 	movi	r2,-129
 4040f24:	d8c02a15 	stw	r3,168(sp)
 4040f28:	90a4703a 	and	r18,r18,r2
 4040f2c:	d8c02e15 	stw	r3,184(sp)
 4040f30:	d8002915 	stw	zero,164(sp)
 4040f34:	d8003215 	stw	zero,200(sp)
 4040f38:	00003706 	br	4041018 <___vfprintf_internal_r+0x734>
 4040f3c:	94800214 	ori	r18,r18,8
 4040f40:	ac400007 	ldb	r17,0(r21)
 4040f44:	003ec806 	br	4040a68 <__alt_data_end+0xfffd6268>
 4040f48:	18c03fcc 	andi	r3,r3,255
 4040f4c:	1806db1e 	bne	r3,zero,4042abc <___vfprintf_internal_r+0x21d8>
 4040f50:	94800414 	ori	r18,r18,16
 4040f54:	9080080c 	andi	r2,r18,32
 4040f58:	1002d826 	beq	r2,zero,4041abc <___vfprintf_internal_r+0x11d8>
 4040f5c:	d9402d17 	ldw	r5,180(sp)
 4040f60:	d8c02917 	ldw	r3,164(sp)
 4040f64:	d8002785 	stb	zero,158(sp)
 4040f68:	28800204 	addi	r2,r5,8
 4040f6c:	2cc00017 	ldw	r19,0(r5)
 4040f70:	2d800117 	ldw	r22,4(r5)
 4040f74:	18048f16 	blt	r3,zero,40421b4 <___vfprintf_internal_r+0x18d0>
 4040f78:	013fdfc4 	movi	r4,-129
 4040f7c:	9d86b03a 	or	r3,r19,r22
 4040f80:	d8802d15 	stw	r2,180(sp)
 4040f84:	9124703a 	and	r18,r18,r4
 4040f88:	1802d91e 	bne	r3,zero,4041af0 <___vfprintf_internal_r+0x120c>
 4040f8c:	d8c02917 	ldw	r3,164(sp)
 4040f90:	0039883a 	mov	fp,zero
 4040f94:	1805c326 	beq	r3,zero,40426a4 <___vfprintf_internal_r+0x1dc0>
 4040f98:	0027883a 	mov	r19,zero
 4040f9c:	002d883a 	mov	r22,zero
 4040fa0:	dc001e04 	addi	r16,sp,120
 4040fa4:	9806d0fa 	srli	r3,r19,3
 4040fa8:	b008977a 	slli	r4,r22,29
 4040fac:	b02cd0fa 	srli	r22,r22,3
 4040fb0:	9cc001cc 	andi	r19,r19,7
 4040fb4:	98800c04 	addi	r2,r19,48
 4040fb8:	843fffc4 	addi	r16,r16,-1
 4040fbc:	20e6b03a 	or	r19,r4,r3
 4040fc0:	80800005 	stb	r2,0(r16)
 4040fc4:	9d86b03a 	or	r3,r19,r22
 4040fc8:	183ff61e 	bne	r3,zero,4040fa4 <__alt_data_end+0xfffd67a4>
 4040fcc:	90c0004c 	andi	r3,r18,1
 4040fd0:	18013b26 	beq	r3,zero,40414c0 <___vfprintf_internal_r+0xbdc>
 4040fd4:	10803fcc 	andi	r2,r2,255
 4040fd8:	1080201c 	xori	r2,r2,128
 4040fdc:	10bfe004 	addi	r2,r2,-128
 4040fe0:	00c00c04 	movi	r3,48
 4040fe4:	10c13626 	beq	r2,r3,40414c0 <___vfprintf_internal_r+0xbdc>
 4040fe8:	80ffffc5 	stb	r3,-1(r16)
 4040fec:	d8c02817 	ldw	r3,160(sp)
 4040ff0:	80bfffc4 	addi	r2,r16,-1
 4040ff4:	1021883a 	mov	r16,r2
 4040ff8:	1887c83a 	sub	r3,r3,r2
 4040ffc:	d8c02e15 	stw	r3,184(sp)
 4041000:	d8802e17 	ldw	r2,184(sp)
 4041004:	d9002917 	ldw	r4,164(sp)
 4041008:	1100010e 	bge	r2,r4,4041010 <___vfprintf_internal_r+0x72c>
 404100c:	2005883a 	mov	r2,r4
 4041010:	d8802a15 	stw	r2,168(sp)
 4041014:	d8003215 	stw	zero,200(sp)
 4041018:	e7003fcc 	andi	fp,fp,255
 404101c:	e700201c 	xori	fp,fp,128
 4041020:	e73fe004 	addi	fp,fp,-128
 4041024:	e0000326 	beq	fp,zero,4041034 <___vfprintf_internal_r+0x750>
 4041028:	d8c02a17 	ldw	r3,168(sp)
 404102c:	18c00044 	addi	r3,r3,1
 4041030:	d8c02a15 	stw	r3,168(sp)
 4041034:	90c0008c 	andi	r3,r18,2
 4041038:	d8c02b15 	stw	r3,172(sp)
 404103c:	18000326 	beq	r3,zero,404104c <___vfprintf_internal_r+0x768>
 4041040:	d8c02a17 	ldw	r3,168(sp)
 4041044:	18c00084 	addi	r3,r3,2
 4041048:	d8c02a15 	stw	r3,168(sp)
 404104c:	90c0210c 	andi	r3,r18,132
 4041050:	d8c03015 	stw	r3,192(sp)
 4041054:	1801a31e 	bne	r3,zero,40416e4 <___vfprintf_internal_r+0xe00>
 4041058:	d9003117 	ldw	r4,196(sp)
 404105c:	d8c02a17 	ldw	r3,168(sp)
 4041060:	20e7c83a 	sub	r19,r4,r3
 4041064:	04c19f0e 	bge	zero,r19,40416e4 <___vfprintf_internal_r+0xe00>
 4041068:	02400404 	movi	r9,16
 404106c:	d8c02017 	ldw	r3,128(sp)
 4041070:	d8801f17 	ldw	r2,124(sp)
 4041074:	4cc50d0e 	bge	r9,r19,40424ac <___vfprintf_internal_r+0x1bc8>
 4041078:	01410174 	movhi	r5,1029
 404107c:	2940c484 	addi	r5,r5,786
 4041080:	dc403b15 	stw	r17,236(sp)
 4041084:	d9403515 	stw	r5,212(sp)
 4041088:	9823883a 	mov	r17,r19
 404108c:	482d883a 	mov	r22,r9
 4041090:	9027883a 	mov	r19,r18
 4041094:	070001c4 	movi	fp,7
 4041098:	8025883a 	mov	r18,r16
 404109c:	dc002c17 	ldw	r16,176(sp)
 40410a0:	00000306 	br	40410b0 <___vfprintf_internal_r+0x7cc>
 40410a4:	8c7ffc04 	addi	r17,r17,-16
 40410a8:	42000204 	addi	r8,r8,8
 40410ac:	b440130e 	bge	r22,r17,40410fc <___vfprintf_internal_r+0x818>
 40410b0:	01010174 	movhi	r4,1029
 40410b4:	18c00404 	addi	r3,r3,16
 40410b8:	10800044 	addi	r2,r2,1
 40410bc:	2100c484 	addi	r4,r4,786
 40410c0:	41000015 	stw	r4,0(r8)
 40410c4:	45800115 	stw	r22,4(r8)
 40410c8:	d8c02015 	stw	r3,128(sp)
 40410cc:	d8801f15 	stw	r2,124(sp)
 40410d0:	e0bff40e 	bge	fp,r2,40410a4 <__alt_data_end+0xfffd68a4>
 40410d4:	d9801e04 	addi	r6,sp,120
 40410d8:	b80b883a 	mov	r5,r23
 40410dc:	8009883a 	mov	r4,r16
 40410e0:	4047ee00 	call	4047ee0 <__sprint_r>
 40410e4:	103f011e 	bne	r2,zero,4040cec <__alt_data_end+0xfffd64ec>
 40410e8:	8c7ffc04 	addi	r17,r17,-16
 40410ec:	d8c02017 	ldw	r3,128(sp)
 40410f0:	d8801f17 	ldw	r2,124(sp)
 40410f4:	da000404 	addi	r8,sp,16
 40410f8:	b47fed16 	blt	r22,r17,40410b0 <__alt_data_end+0xfffd68b0>
 40410fc:	9021883a 	mov	r16,r18
 4041100:	9825883a 	mov	r18,r19
 4041104:	8827883a 	mov	r19,r17
 4041108:	dc403b17 	ldw	r17,236(sp)
 404110c:	d9403517 	ldw	r5,212(sp)
 4041110:	98c7883a 	add	r3,r19,r3
 4041114:	10800044 	addi	r2,r2,1
 4041118:	41400015 	stw	r5,0(r8)
 404111c:	44c00115 	stw	r19,4(r8)
 4041120:	d8c02015 	stw	r3,128(sp)
 4041124:	d8801f15 	stw	r2,124(sp)
 4041128:	010001c4 	movi	r4,7
 404112c:	2082a316 	blt	r4,r2,4041bbc <___vfprintf_internal_r+0x12d8>
 4041130:	df002787 	ldb	fp,158(sp)
 4041134:	42000204 	addi	r8,r8,8
 4041138:	e0000c26 	beq	fp,zero,404116c <___vfprintf_internal_r+0x888>
 404113c:	d8801f17 	ldw	r2,124(sp)
 4041140:	d9002784 	addi	r4,sp,158
 4041144:	18c00044 	addi	r3,r3,1
 4041148:	10800044 	addi	r2,r2,1
 404114c:	41000015 	stw	r4,0(r8)
 4041150:	01000044 	movi	r4,1
 4041154:	41000115 	stw	r4,4(r8)
 4041158:	d8c02015 	stw	r3,128(sp)
 404115c:	d8801f15 	stw	r2,124(sp)
 4041160:	010001c4 	movi	r4,7
 4041164:	20823c16 	blt	r4,r2,4041a58 <___vfprintf_internal_r+0x1174>
 4041168:	42000204 	addi	r8,r8,8
 404116c:	d8802b17 	ldw	r2,172(sp)
 4041170:	10000c26 	beq	r2,zero,40411a4 <___vfprintf_internal_r+0x8c0>
 4041174:	d8801f17 	ldw	r2,124(sp)
 4041178:	d9002704 	addi	r4,sp,156
 404117c:	18c00084 	addi	r3,r3,2
 4041180:	10800044 	addi	r2,r2,1
 4041184:	41000015 	stw	r4,0(r8)
 4041188:	01000084 	movi	r4,2
 404118c:	41000115 	stw	r4,4(r8)
 4041190:	d8c02015 	stw	r3,128(sp)
 4041194:	d8801f15 	stw	r2,124(sp)
 4041198:	010001c4 	movi	r4,7
 404119c:	20823616 	blt	r4,r2,4041a78 <___vfprintf_internal_r+0x1194>
 40411a0:	42000204 	addi	r8,r8,8
 40411a4:	d9003017 	ldw	r4,192(sp)
 40411a8:	00802004 	movi	r2,128
 40411ac:	20819926 	beq	r4,r2,4041814 <___vfprintf_internal_r+0xf30>
 40411b0:	d9402917 	ldw	r5,164(sp)
 40411b4:	d8802e17 	ldw	r2,184(sp)
 40411b8:	28adc83a 	sub	r22,r5,r2
 40411bc:	0580310e 	bge	zero,r22,4041284 <___vfprintf_internal_r+0x9a0>
 40411c0:	07000404 	movi	fp,16
 40411c4:	d8801f17 	ldw	r2,124(sp)
 40411c8:	e584140e 	bge	fp,r22,404221c <___vfprintf_internal_r+0x1938>
 40411cc:	01410174 	movhi	r5,1029
 40411d0:	2940c084 	addi	r5,r5,770
 40411d4:	dc402915 	stw	r17,164(sp)
 40411d8:	d9402b15 	stw	r5,172(sp)
 40411dc:	b023883a 	mov	r17,r22
 40411e0:	04c001c4 	movi	r19,7
 40411e4:	a82d883a 	mov	r22,r21
 40411e8:	902b883a 	mov	r21,r18
 40411ec:	8025883a 	mov	r18,r16
 40411f0:	dc002c17 	ldw	r16,176(sp)
 40411f4:	00000306 	br	4041204 <___vfprintf_internal_r+0x920>
 40411f8:	8c7ffc04 	addi	r17,r17,-16
 40411fc:	42000204 	addi	r8,r8,8
 4041200:	e440110e 	bge	fp,r17,4041248 <___vfprintf_internal_r+0x964>
 4041204:	18c00404 	addi	r3,r3,16
 4041208:	10800044 	addi	r2,r2,1
 404120c:	45000015 	stw	r20,0(r8)
 4041210:	47000115 	stw	fp,4(r8)
 4041214:	d8c02015 	stw	r3,128(sp)
 4041218:	d8801f15 	stw	r2,124(sp)
 404121c:	98bff60e 	bge	r19,r2,40411f8 <__alt_data_end+0xfffd69f8>
 4041220:	d9801e04 	addi	r6,sp,120
 4041224:	b80b883a 	mov	r5,r23
 4041228:	8009883a 	mov	r4,r16
 404122c:	4047ee00 	call	4047ee0 <__sprint_r>
 4041230:	103eae1e 	bne	r2,zero,4040cec <__alt_data_end+0xfffd64ec>
 4041234:	8c7ffc04 	addi	r17,r17,-16
 4041238:	d8c02017 	ldw	r3,128(sp)
 404123c:	d8801f17 	ldw	r2,124(sp)
 4041240:	da000404 	addi	r8,sp,16
 4041244:	e47fef16 	blt	fp,r17,4041204 <__alt_data_end+0xfffd6a04>
 4041248:	9021883a 	mov	r16,r18
 404124c:	a825883a 	mov	r18,r21
 4041250:	b02b883a 	mov	r21,r22
 4041254:	882d883a 	mov	r22,r17
 4041258:	dc402917 	ldw	r17,164(sp)
 404125c:	d9002b17 	ldw	r4,172(sp)
 4041260:	1d87883a 	add	r3,r3,r22
 4041264:	10800044 	addi	r2,r2,1
 4041268:	41000015 	stw	r4,0(r8)
 404126c:	45800115 	stw	r22,4(r8)
 4041270:	d8c02015 	stw	r3,128(sp)
 4041274:	d8801f15 	stw	r2,124(sp)
 4041278:	010001c4 	movi	r4,7
 404127c:	2081ee16 	blt	r4,r2,4041a38 <___vfprintf_internal_r+0x1154>
 4041280:	42000204 	addi	r8,r8,8
 4041284:	9080400c 	andi	r2,r18,256
 4041288:	1001181e 	bne	r2,zero,40416ec <___vfprintf_internal_r+0xe08>
 404128c:	d9402e17 	ldw	r5,184(sp)
 4041290:	d8801f17 	ldw	r2,124(sp)
 4041294:	44000015 	stw	r16,0(r8)
 4041298:	1947883a 	add	r3,r3,r5
 404129c:	10800044 	addi	r2,r2,1
 40412a0:	41400115 	stw	r5,4(r8)
 40412a4:	d8c02015 	stw	r3,128(sp)
 40412a8:	d8801f15 	stw	r2,124(sp)
 40412ac:	010001c4 	movi	r4,7
 40412b0:	2081d316 	blt	r4,r2,4041a00 <___vfprintf_internal_r+0x111c>
 40412b4:	42000204 	addi	r8,r8,8
 40412b8:	9480010c 	andi	r18,r18,4
 40412bc:	90003226 	beq	r18,zero,4041388 <___vfprintf_internal_r+0xaa4>
 40412c0:	d9403117 	ldw	r5,196(sp)
 40412c4:	d8802a17 	ldw	r2,168(sp)
 40412c8:	28a1c83a 	sub	r16,r5,r2
 40412cc:	04002e0e 	bge	zero,r16,4041388 <___vfprintf_internal_r+0xaa4>
 40412d0:	04400404 	movi	r17,16
 40412d4:	d8801f17 	ldw	r2,124(sp)
 40412d8:	8c04a20e 	bge	r17,r16,4042564 <___vfprintf_internal_r+0x1c80>
 40412dc:	01410174 	movhi	r5,1029
 40412e0:	2940c484 	addi	r5,r5,786
 40412e4:	d9403515 	stw	r5,212(sp)
 40412e8:	048001c4 	movi	r18,7
 40412ec:	dcc02c17 	ldw	r19,176(sp)
 40412f0:	00000306 	br	4041300 <___vfprintf_internal_r+0xa1c>
 40412f4:	843ffc04 	addi	r16,r16,-16
 40412f8:	42000204 	addi	r8,r8,8
 40412fc:	8c00130e 	bge	r17,r16,404134c <___vfprintf_internal_r+0xa68>
 4041300:	01010174 	movhi	r4,1029
 4041304:	18c00404 	addi	r3,r3,16
 4041308:	10800044 	addi	r2,r2,1
 404130c:	2100c484 	addi	r4,r4,786
 4041310:	41000015 	stw	r4,0(r8)
 4041314:	44400115 	stw	r17,4(r8)
 4041318:	d8c02015 	stw	r3,128(sp)
 404131c:	d8801f15 	stw	r2,124(sp)
 4041320:	90bff40e 	bge	r18,r2,40412f4 <__alt_data_end+0xfffd6af4>
 4041324:	d9801e04 	addi	r6,sp,120
 4041328:	b80b883a 	mov	r5,r23
 404132c:	9809883a 	mov	r4,r19
 4041330:	4047ee00 	call	4047ee0 <__sprint_r>
 4041334:	103e6d1e 	bne	r2,zero,4040cec <__alt_data_end+0xfffd64ec>
 4041338:	843ffc04 	addi	r16,r16,-16
 404133c:	d8c02017 	ldw	r3,128(sp)
 4041340:	d8801f17 	ldw	r2,124(sp)
 4041344:	da000404 	addi	r8,sp,16
 4041348:	8c3fed16 	blt	r17,r16,4041300 <__alt_data_end+0xfffd6b00>
 404134c:	d9403517 	ldw	r5,212(sp)
 4041350:	1c07883a 	add	r3,r3,r16
 4041354:	10800044 	addi	r2,r2,1
 4041358:	41400015 	stw	r5,0(r8)
 404135c:	44000115 	stw	r16,4(r8)
 4041360:	d8c02015 	stw	r3,128(sp)
 4041364:	d8801f15 	stw	r2,124(sp)
 4041368:	010001c4 	movi	r4,7
 404136c:	2080060e 	bge	r4,r2,4041388 <___vfprintf_internal_r+0xaa4>
 4041370:	d9002c17 	ldw	r4,176(sp)
 4041374:	d9801e04 	addi	r6,sp,120
 4041378:	b80b883a 	mov	r5,r23
 404137c:	4047ee00 	call	4047ee0 <__sprint_r>
 4041380:	103e5a1e 	bne	r2,zero,4040cec <__alt_data_end+0xfffd64ec>
 4041384:	d8c02017 	ldw	r3,128(sp)
 4041388:	d8803117 	ldw	r2,196(sp)
 404138c:	d9002a17 	ldw	r4,168(sp)
 4041390:	1100010e 	bge	r2,r4,4041398 <___vfprintf_internal_r+0xab4>
 4041394:	2005883a 	mov	r2,r4
 4041398:	d9402f17 	ldw	r5,188(sp)
 404139c:	288b883a 	add	r5,r5,r2
 40413a0:	d9402f15 	stw	r5,188(sp)
 40413a4:	18019e1e 	bne	r3,zero,4041a20 <___vfprintf_internal_r+0x113c>
 40413a8:	a8800007 	ldb	r2,0(r21)
 40413ac:	d8001f15 	stw	zero,124(sp)
 40413b0:	da000404 	addi	r8,sp,16
 40413b4:	103d851e 	bne	r2,zero,40409cc <__alt_data_end+0xfffd61cc>
 40413b8:	a821883a 	mov	r16,r21
 40413bc:	003d9b06 	br	4040a2c <__alt_data_end+0xfffd622c>
 40413c0:	18c03fcc 	andi	r3,r3,255
 40413c4:	1805c11e 	bne	r3,zero,4042acc <___vfprintf_internal_r+0x21e8>
 40413c8:	94800414 	ori	r18,r18,16
 40413cc:	9080080c 	andi	r2,r18,32
 40413d0:	10020c26 	beq	r2,zero,4041c04 <___vfprintf_internal_r+0x1320>
 40413d4:	d8802d17 	ldw	r2,180(sp)
 40413d8:	d9002917 	ldw	r4,164(sp)
 40413dc:	d8002785 	stb	zero,158(sp)
 40413e0:	10c00204 	addi	r3,r2,8
 40413e4:	14c00017 	ldw	r19,0(r2)
 40413e8:	15800117 	ldw	r22,4(r2)
 40413ec:	20040f16 	blt	r4,zero,404242c <___vfprintf_internal_r+0x1b48>
 40413f0:	013fdfc4 	movi	r4,-129
 40413f4:	9d84b03a 	or	r2,r19,r22
 40413f8:	d8c02d15 	stw	r3,180(sp)
 40413fc:	9124703a 	and	r18,r18,r4
 4041400:	0039883a 	mov	fp,zero
 4041404:	103e891e 	bne	r2,zero,4040e2c <__alt_data_end+0xfffd662c>
 4041408:	d9002917 	ldw	r4,164(sp)
 404140c:	2002c11e 	bne	r4,zero,4041f14 <___vfprintf_internal_r+0x1630>
 4041410:	d8002915 	stw	zero,164(sp)
 4041414:	d8002e15 	stw	zero,184(sp)
 4041418:	dc001e04 	addi	r16,sp,120
 404141c:	003ef806 	br	4041000 <__alt_data_end+0xfffd6800>
 4041420:	18c03fcc 	andi	r3,r3,255
 4041424:	18059d1e 	bne	r3,zero,4042a9c <___vfprintf_internal_r+0x21b8>
 4041428:	01410174 	movhi	r5,1029
 404142c:	2940b404 	addi	r5,r5,720
 4041430:	d9403915 	stw	r5,228(sp)
 4041434:	9080080c 	andi	r2,r18,32
 4041438:	10005226 	beq	r2,zero,4041584 <___vfprintf_internal_r+0xca0>
 404143c:	d8802d17 	ldw	r2,180(sp)
 4041440:	14c00017 	ldw	r19,0(r2)
 4041444:	15800117 	ldw	r22,4(r2)
 4041448:	10800204 	addi	r2,r2,8
 404144c:	d8802d15 	stw	r2,180(sp)
 4041450:	9080004c 	andi	r2,r18,1
 4041454:	10019026 	beq	r2,zero,4041a98 <___vfprintf_internal_r+0x11b4>
 4041458:	9d84b03a 	or	r2,r19,r22
 404145c:	10036926 	beq	r2,zero,4042204 <___vfprintf_internal_r+0x1920>
 4041460:	d8c02917 	ldw	r3,164(sp)
 4041464:	00800c04 	movi	r2,48
 4041468:	d8802705 	stb	r2,156(sp)
 404146c:	dc402745 	stb	r17,157(sp)
 4041470:	d8002785 	stb	zero,158(sp)
 4041474:	90800094 	ori	r2,r18,2
 4041478:	18045d16 	blt	r3,zero,40425f0 <___vfprintf_internal_r+0x1d0c>
 404147c:	00bfdfc4 	movi	r2,-129
 4041480:	90a4703a 	and	r18,r18,r2
 4041484:	94800094 	ori	r18,r18,2
 4041488:	0039883a 	mov	fp,zero
 404148c:	d9003917 	ldw	r4,228(sp)
 4041490:	dc001e04 	addi	r16,sp,120
 4041494:	988003cc 	andi	r2,r19,15
 4041498:	b006973a 	slli	r3,r22,28
 404149c:	2085883a 	add	r2,r4,r2
 40414a0:	9826d13a 	srli	r19,r19,4
 40414a4:	10800003 	ldbu	r2,0(r2)
 40414a8:	b02cd13a 	srli	r22,r22,4
 40414ac:	843fffc4 	addi	r16,r16,-1
 40414b0:	1ce6b03a 	or	r19,r3,r19
 40414b4:	80800005 	stb	r2,0(r16)
 40414b8:	9d84b03a 	or	r2,r19,r22
 40414bc:	103ff51e 	bne	r2,zero,4041494 <__alt_data_end+0xfffd6c94>
 40414c0:	d8c02817 	ldw	r3,160(sp)
 40414c4:	1c07c83a 	sub	r3,r3,r16
 40414c8:	d8c02e15 	stw	r3,184(sp)
 40414cc:	003ecc06 	br	4041000 <__alt_data_end+0xfffd6800>
 40414d0:	18c03fcc 	andi	r3,r3,255
 40414d4:	183e9f26 	beq	r3,zero,4040f54 <__alt_data_end+0xfffd6754>
 40414d8:	d9c02785 	stb	r7,158(sp)
 40414dc:	003e9d06 	br	4040f54 <__alt_data_end+0xfffd6754>
 40414e0:	00c00044 	movi	r3,1
 40414e4:	01c00ac4 	movi	r7,43
 40414e8:	ac400007 	ldb	r17,0(r21)
 40414ec:	003d5e06 	br	4040a68 <__alt_data_end+0xfffd6268>
 40414f0:	94800814 	ori	r18,r18,32
 40414f4:	ac400007 	ldb	r17,0(r21)
 40414f8:	003d5b06 	br	4040a68 <__alt_data_end+0xfffd6268>
 40414fc:	d8c02d17 	ldw	r3,180(sp)
 4041500:	d8002785 	stb	zero,158(sp)
 4041504:	1c000017 	ldw	r16,0(r3)
 4041508:	1cc00104 	addi	r19,r3,4
 404150c:	80041926 	beq	r16,zero,4042574 <___vfprintf_internal_r+0x1c90>
 4041510:	d9002917 	ldw	r4,164(sp)
 4041514:	2003d016 	blt	r4,zero,4042458 <___vfprintf_internal_r+0x1b74>
 4041518:	200d883a 	mov	r6,r4
 404151c:	000b883a 	mov	r5,zero
 4041520:	8009883a 	mov	r4,r16
 4041524:	da003d15 	stw	r8,244(sp)
 4041528:	40460f40 	call	40460f4 <memchr>
 404152c:	da003d17 	ldw	r8,244(sp)
 4041530:	10045426 	beq	r2,zero,4042684 <___vfprintf_internal_r+0x1da0>
 4041534:	1405c83a 	sub	r2,r2,r16
 4041538:	d8802e15 	stw	r2,184(sp)
 404153c:	1003cc16 	blt	r2,zero,4042470 <___vfprintf_internal_r+0x1b8c>
 4041540:	df002783 	ldbu	fp,158(sp)
 4041544:	d8802a15 	stw	r2,168(sp)
 4041548:	dcc02d15 	stw	r19,180(sp)
 404154c:	d8002915 	stw	zero,164(sp)
 4041550:	d8003215 	stw	zero,200(sp)
 4041554:	003eb006 	br	4041018 <__alt_data_end+0xfffd6818>
 4041558:	18c03fcc 	andi	r3,r3,255
 404155c:	183f9b26 	beq	r3,zero,40413cc <__alt_data_end+0xfffd6bcc>
 4041560:	d9c02785 	stb	r7,158(sp)
 4041564:	003f9906 	br	40413cc <__alt_data_end+0xfffd6bcc>
 4041568:	18c03fcc 	andi	r3,r3,255
 404156c:	1805551e 	bne	r3,zero,4042ac4 <___vfprintf_internal_r+0x21e0>
 4041570:	01410174 	movhi	r5,1029
 4041574:	2940b904 	addi	r5,r5,740
 4041578:	d9403915 	stw	r5,228(sp)
 404157c:	9080080c 	andi	r2,r18,32
 4041580:	103fae1e 	bne	r2,zero,404143c <__alt_data_end+0xfffd6c3c>
 4041584:	9080040c 	andi	r2,r18,16
 4041588:	1002de26 	beq	r2,zero,4042104 <___vfprintf_internal_r+0x1820>
 404158c:	d8c02d17 	ldw	r3,180(sp)
 4041590:	002d883a 	mov	r22,zero
 4041594:	1cc00017 	ldw	r19,0(r3)
 4041598:	18c00104 	addi	r3,r3,4
 404159c:	d8c02d15 	stw	r3,180(sp)
 40415a0:	003fab06 	br	4041450 <__alt_data_end+0xfffd6c50>
 40415a4:	38803fcc 	andi	r2,r7,255
 40415a8:	1080201c 	xori	r2,r2,128
 40415ac:	10bfe004 	addi	r2,r2,-128
 40415b0:	1002d21e 	bne	r2,zero,40420fc <___vfprintf_internal_r+0x1818>
 40415b4:	00c00044 	movi	r3,1
 40415b8:	01c00804 	movi	r7,32
 40415bc:	ac400007 	ldb	r17,0(r21)
 40415c0:	003d2906 	br	4040a68 <__alt_data_end+0xfffd6268>
 40415c4:	94800054 	ori	r18,r18,1
 40415c8:	ac400007 	ldb	r17,0(r21)
 40415cc:	003d2606 	br	4040a68 <__alt_data_end+0xfffd6268>
 40415d0:	18c03fcc 	andi	r3,r3,255
 40415d4:	183e0526 	beq	r3,zero,4040dec <__alt_data_end+0xfffd65ec>
 40415d8:	d9c02785 	stb	r7,158(sp)
 40415dc:	003e0306 	br	4040dec <__alt_data_end+0xfffd65ec>
 40415e0:	94801014 	ori	r18,r18,64
 40415e4:	ac400007 	ldb	r17,0(r21)
 40415e8:	003d1f06 	br	4040a68 <__alt_data_end+0xfffd6268>
 40415ec:	ac400007 	ldb	r17,0(r21)
 40415f0:	8a438726 	beq	r17,r9,4042410 <___vfprintf_internal_r+0x1b2c>
 40415f4:	94800414 	ori	r18,r18,16
 40415f8:	003d1b06 	br	4040a68 <__alt_data_end+0xfffd6268>
 40415fc:	18c03fcc 	andi	r3,r3,255
 4041600:	1805341e 	bne	r3,zero,4042ad4 <___vfprintf_internal_r+0x21f0>
 4041604:	9080080c 	andi	r2,r18,32
 4041608:	1002cd26 	beq	r2,zero,4042140 <___vfprintf_internal_r+0x185c>
 404160c:	d9402d17 	ldw	r5,180(sp)
 4041610:	d9002f17 	ldw	r4,188(sp)
 4041614:	28800017 	ldw	r2,0(r5)
 4041618:	2007d7fa 	srai	r3,r4,31
 404161c:	29400104 	addi	r5,r5,4
 4041620:	d9402d15 	stw	r5,180(sp)
 4041624:	11000015 	stw	r4,0(r2)
 4041628:	10c00115 	stw	r3,4(r2)
 404162c:	003ce506 	br	40409c4 <__alt_data_end+0xfffd61c4>
 4041630:	d8c02d17 	ldw	r3,180(sp)
 4041634:	d9002d17 	ldw	r4,180(sp)
 4041638:	d8002785 	stb	zero,158(sp)
 404163c:	18800017 	ldw	r2,0(r3)
 4041640:	21000104 	addi	r4,r4,4
 4041644:	00c00044 	movi	r3,1
 4041648:	d8c02a15 	stw	r3,168(sp)
 404164c:	d8801405 	stb	r2,80(sp)
 4041650:	d9002d15 	stw	r4,180(sp)
 4041654:	d8c02e15 	stw	r3,184(sp)
 4041658:	d8002915 	stw	zero,164(sp)
 404165c:	d8003215 	stw	zero,200(sp)
 4041660:	dc001404 	addi	r16,sp,80
 4041664:	0039883a 	mov	fp,zero
 4041668:	003e7206 	br	4041034 <__alt_data_end+0xfffd6834>
 404166c:	01010174 	movhi	r4,1029
 4041670:	2100b904 	addi	r4,r4,740
 4041674:	0039883a 	mov	fp,zero
 4041678:	d9003915 	stw	r4,228(sp)
 404167c:	04401e04 	movi	r17,120
 4041680:	003f8206 	br	404148c <__alt_data_end+0xfffd6c8c>
 4041684:	18c03fcc 	andi	r3,r3,255
 4041688:	1805061e 	bne	r3,zero,4042aa4 <___vfprintf_internal_r+0x21c0>
 404168c:	883d9126 	beq	r17,zero,4040cd4 <__alt_data_end+0xfffd64d4>
 4041690:	00c00044 	movi	r3,1
 4041694:	d8c02a15 	stw	r3,168(sp)
 4041698:	dc401405 	stb	r17,80(sp)
 404169c:	d8002785 	stb	zero,158(sp)
 40416a0:	003fec06 	br	4041654 <__alt_data_end+0xfffd6e54>
 40416a4:	01410174 	movhi	r5,1029
 40416a8:	2940b904 	addi	r5,r5,740
 40416ac:	d9403915 	stw	r5,228(sp)
 40416b0:	d8c02d15 	stw	r3,180(sp)
 40416b4:	1025883a 	mov	r18,r2
 40416b8:	04401e04 	movi	r17,120
 40416bc:	9d84b03a 	or	r2,r19,r22
 40416c0:	1000fc1e 	bne	r2,zero,4041ab4 <___vfprintf_internal_r+0x11d0>
 40416c4:	0039883a 	mov	fp,zero
 40416c8:	00800084 	movi	r2,2
 40416cc:	10803fcc 	andi	r2,r2,255
 40416d0:	00c00044 	movi	r3,1
 40416d4:	10c20f26 	beq	r2,r3,4041f14 <___vfprintf_internal_r+0x1630>
 40416d8:	00c00084 	movi	r3,2
 40416dc:	10fd6326 	beq	r2,r3,4040c6c <__alt_data_end+0xfffd646c>
 40416e0:	003e2d06 	br	4040f98 <__alt_data_end+0xfffd6798>
 40416e4:	d8c02017 	ldw	r3,128(sp)
 40416e8:	003e9306 	br	4041138 <__alt_data_end+0xfffd6938>
 40416ec:	00801944 	movi	r2,101
 40416f0:	14407e0e 	bge	r2,r17,40418ec <___vfprintf_internal_r+0x1008>
 40416f4:	d9003617 	ldw	r4,216(sp)
 40416f8:	d9403817 	ldw	r5,224(sp)
 40416fc:	000d883a 	mov	r6,zero
 4041700:	000f883a 	mov	r7,zero
 4041704:	d8c03c15 	stw	r3,240(sp)
 4041708:	da003d15 	stw	r8,244(sp)
 404170c:	404bb580 	call	404bb58 <__eqdf2>
 4041710:	d8c03c17 	ldw	r3,240(sp)
 4041714:	da003d17 	ldw	r8,244(sp)
 4041718:	1000f71e 	bne	r2,zero,4041af8 <___vfprintf_internal_r+0x1214>
 404171c:	d8801f17 	ldw	r2,124(sp)
 4041720:	01010174 	movhi	r4,1029
 4041724:	2100c004 	addi	r4,r4,768
 4041728:	18c00044 	addi	r3,r3,1
 404172c:	10800044 	addi	r2,r2,1
 4041730:	41000015 	stw	r4,0(r8)
 4041734:	01000044 	movi	r4,1
 4041738:	41000115 	stw	r4,4(r8)
 404173c:	d8c02015 	stw	r3,128(sp)
 4041740:	d8801f15 	stw	r2,124(sp)
 4041744:	010001c4 	movi	r4,7
 4041748:	2082b816 	blt	r4,r2,404222c <___vfprintf_internal_r+0x1948>
 404174c:	42000204 	addi	r8,r8,8
 4041750:	d8802617 	ldw	r2,152(sp)
 4041754:	d9403317 	ldw	r5,204(sp)
 4041758:	11400216 	blt	r2,r5,4041764 <___vfprintf_internal_r+0xe80>
 404175c:	9080004c 	andi	r2,r18,1
 4041760:	103ed526 	beq	r2,zero,40412b8 <__alt_data_end+0xfffd6ab8>
 4041764:	d8803717 	ldw	r2,220(sp)
 4041768:	d9003417 	ldw	r4,208(sp)
 404176c:	d9403717 	ldw	r5,220(sp)
 4041770:	1887883a 	add	r3,r3,r2
 4041774:	d8801f17 	ldw	r2,124(sp)
 4041778:	41000015 	stw	r4,0(r8)
 404177c:	41400115 	stw	r5,4(r8)
 4041780:	10800044 	addi	r2,r2,1
 4041784:	d8c02015 	stw	r3,128(sp)
 4041788:	d8801f15 	stw	r2,124(sp)
 404178c:	010001c4 	movi	r4,7
 4041790:	20832916 	blt	r4,r2,4042438 <___vfprintf_internal_r+0x1b54>
 4041794:	42000204 	addi	r8,r8,8
 4041798:	d8803317 	ldw	r2,204(sp)
 404179c:	143fffc4 	addi	r16,r2,-1
 40417a0:	043ec50e 	bge	zero,r16,40412b8 <__alt_data_end+0xfffd6ab8>
 40417a4:	04400404 	movi	r17,16
 40417a8:	d8801f17 	ldw	r2,124(sp)
 40417ac:	8c00880e 	bge	r17,r16,40419d0 <___vfprintf_internal_r+0x10ec>
 40417b0:	01410174 	movhi	r5,1029
 40417b4:	2940c084 	addi	r5,r5,770
 40417b8:	d9402b15 	stw	r5,172(sp)
 40417bc:	058001c4 	movi	r22,7
 40417c0:	dcc02c17 	ldw	r19,176(sp)
 40417c4:	00000306 	br	40417d4 <___vfprintf_internal_r+0xef0>
 40417c8:	42000204 	addi	r8,r8,8
 40417cc:	843ffc04 	addi	r16,r16,-16
 40417d0:	8c00820e 	bge	r17,r16,40419dc <___vfprintf_internal_r+0x10f8>
 40417d4:	18c00404 	addi	r3,r3,16
 40417d8:	10800044 	addi	r2,r2,1
 40417dc:	45000015 	stw	r20,0(r8)
 40417e0:	44400115 	stw	r17,4(r8)
 40417e4:	d8c02015 	stw	r3,128(sp)
 40417e8:	d8801f15 	stw	r2,124(sp)
 40417ec:	b0bff60e 	bge	r22,r2,40417c8 <__alt_data_end+0xfffd6fc8>
 40417f0:	d9801e04 	addi	r6,sp,120
 40417f4:	b80b883a 	mov	r5,r23
 40417f8:	9809883a 	mov	r4,r19
 40417fc:	4047ee00 	call	4047ee0 <__sprint_r>
 4041800:	103d3a1e 	bne	r2,zero,4040cec <__alt_data_end+0xfffd64ec>
 4041804:	d8c02017 	ldw	r3,128(sp)
 4041808:	d8801f17 	ldw	r2,124(sp)
 404180c:	da000404 	addi	r8,sp,16
 4041810:	003fee06 	br	40417cc <__alt_data_end+0xfffd6fcc>
 4041814:	d9403117 	ldw	r5,196(sp)
 4041818:	d8802a17 	ldw	r2,168(sp)
 404181c:	28adc83a 	sub	r22,r5,r2
 4041820:	05be630e 	bge	zero,r22,40411b0 <__alt_data_end+0xfffd69b0>
 4041824:	07000404 	movi	fp,16
 4041828:	d8801f17 	ldw	r2,124(sp)
 404182c:	e5838f0e 	bge	fp,r22,404266c <___vfprintf_internal_r+0x1d88>
 4041830:	01410174 	movhi	r5,1029
 4041834:	2940c084 	addi	r5,r5,770
 4041838:	dc403015 	stw	r17,192(sp)
 404183c:	d9402b15 	stw	r5,172(sp)
 4041840:	b023883a 	mov	r17,r22
 4041844:	04c001c4 	movi	r19,7
 4041848:	a82d883a 	mov	r22,r21
 404184c:	902b883a 	mov	r21,r18
 4041850:	8025883a 	mov	r18,r16
 4041854:	dc002c17 	ldw	r16,176(sp)
 4041858:	00000306 	br	4041868 <___vfprintf_internal_r+0xf84>
 404185c:	8c7ffc04 	addi	r17,r17,-16
 4041860:	42000204 	addi	r8,r8,8
 4041864:	e440110e 	bge	fp,r17,40418ac <___vfprintf_internal_r+0xfc8>
 4041868:	18c00404 	addi	r3,r3,16
 404186c:	10800044 	addi	r2,r2,1
 4041870:	45000015 	stw	r20,0(r8)
 4041874:	47000115 	stw	fp,4(r8)
 4041878:	d8c02015 	stw	r3,128(sp)
 404187c:	d8801f15 	stw	r2,124(sp)
 4041880:	98bff60e 	bge	r19,r2,404185c <__alt_data_end+0xfffd705c>
 4041884:	d9801e04 	addi	r6,sp,120
 4041888:	b80b883a 	mov	r5,r23
 404188c:	8009883a 	mov	r4,r16
 4041890:	4047ee00 	call	4047ee0 <__sprint_r>
 4041894:	103d151e 	bne	r2,zero,4040cec <__alt_data_end+0xfffd64ec>
 4041898:	8c7ffc04 	addi	r17,r17,-16
 404189c:	d8c02017 	ldw	r3,128(sp)
 40418a0:	d8801f17 	ldw	r2,124(sp)
 40418a4:	da000404 	addi	r8,sp,16
 40418a8:	e47fef16 	blt	fp,r17,4041868 <__alt_data_end+0xfffd7068>
 40418ac:	9021883a 	mov	r16,r18
 40418b0:	a825883a 	mov	r18,r21
 40418b4:	b02b883a 	mov	r21,r22
 40418b8:	882d883a 	mov	r22,r17
 40418bc:	dc403017 	ldw	r17,192(sp)
 40418c0:	d9002b17 	ldw	r4,172(sp)
 40418c4:	1d87883a 	add	r3,r3,r22
 40418c8:	10800044 	addi	r2,r2,1
 40418cc:	41000015 	stw	r4,0(r8)
 40418d0:	45800115 	stw	r22,4(r8)
 40418d4:	d8c02015 	stw	r3,128(sp)
 40418d8:	d8801f15 	stw	r2,124(sp)
 40418dc:	010001c4 	movi	r4,7
 40418e0:	20818e16 	blt	r4,r2,4041f1c <___vfprintf_internal_r+0x1638>
 40418e4:	42000204 	addi	r8,r8,8
 40418e8:	003e3106 	br	40411b0 <__alt_data_end+0xfffd69b0>
 40418ec:	d9403317 	ldw	r5,204(sp)
 40418f0:	00800044 	movi	r2,1
 40418f4:	18c00044 	addi	r3,r3,1
 40418f8:	1141530e 	bge	r2,r5,4041e48 <___vfprintf_internal_r+0x1564>
 40418fc:	dc401f17 	ldw	r17,124(sp)
 4041900:	00800044 	movi	r2,1
 4041904:	40800115 	stw	r2,4(r8)
 4041908:	8c400044 	addi	r17,r17,1
 404190c:	44000015 	stw	r16,0(r8)
 4041910:	d8c02015 	stw	r3,128(sp)
 4041914:	dc401f15 	stw	r17,124(sp)
 4041918:	008001c4 	movi	r2,7
 404191c:	14416b16 	blt	r2,r17,4041ecc <___vfprintf_internal_r+0x15e8>
 4041920:	42000204 	addi	r8,r8,8
 4041924:	d8803717 	ldw	r2,220(sp)
 4041928:	d9003417 	ldw	r4,208(sp)
 404192c:	8c400044 	addi	r17,r17,1
 4041930:	10c7883a 	add	r3,r2,r3
 4041934:	40800115 	stw	r2,4(r8)
 4041938:	41000015 	stw	r4,0(r8)
 404193c:	d8c02015 	stw	r3,128(sp)
 4041940:	dc401f15 	stw	r17,124(sp)
 4041944:	008001c4 	movi	r2,7
 4041948:	14416916 	blt	r2,r17,4041ef0 <___vfprintf_internal_r+0x160c>
 404194c:	45800204 	addi	r22,r8,8
 4041950:	d9003617 	ldw	r4,216(sp)
 4041954:	d9403817 	ldw	r5,224(sp)
 4041958:	000d883a 	mov	r6,zero
 404195c:	000f883a 	mov	r7,zero
 4041960:	d8c03c15 	stw	r3,240(sp)
 4041964:	404bb580 	call	404bb58 <__eqdf2>
 4041968:	d8c03c17 	ldw	r3,240(sp)
 404196c:	1000bc26 	beq	r2,zero,4041c60 <___vfprintf_internal_r+0x137c>
 4041970:	d9403317 	ldw	r5,204(sp)
 4041974:	84000044 	addi	r16,r16,1
 4041978:	8c400044 	addi	r17,r17,1
 404197c:	28bfffc4 	addi	r2,r5,-1
 4041980:	1887883a 	add	r3,r3,r2
 4041984:	b0800115 	stw	r2,4(r22)
 4041988:	b4000015 	stw	r16,0(r22)
 404198c:	d8c02015 	stw	r3,128(sp)
 4041990:	dc401f15 	stw	r17,124(sp)
 4041994:	008001c4 	movi	r2,7
 4041998:	14414316 	blt	r2,r17,4041ea8 <___vfprintf_internal_r+0x15c4>
 404199c:	b5800204 	addi	r22,r22,8
 40419a0:	d9003a17 	ldw	r4,232(sp)
 40419a4:	df0022c4 	addi	fp,sp,139
 40419a8:	8c400044 	addi	r17,r17,1
 40419ac:	20c7883a 	add	r3,r4,r3
 40419b0:	b7000015 	stw	fp,0(r22)
 40419b4:	b1000115 	stw	r4,4(r22)
 40419b8:	d8c02015 	stw	r3,128(sp)
 40419bc:	dc401f15 	stw	r17,124(sp)
 40419c0:	008001c4 	movi	r2,7
 40419c4:	14400e16 	blt	r2,r17,4041a00 <___vfprintf_internal_r+0x111c>
 40419c8:	b2000204 	addi	r8,r22,8
 40419cc:	003e3a06 	br	40412b8 <__alt_data_end+0xfffd6ab8>
 40419d0:	01010174 	movhi	r4,1029
 40419d4:	2100c084 	addi	r4,r4,770
 40419d8:	d9002b15 	stw	r4,172(sp)
 40419dc:	d9002b17 	ldw	r4,172(sp)
 40419e0:	1c07883a 	add	r3,r3,r16
 40419e4:	44000115 	stw	r16,4(r8)
 40419e8:	41000015 	stw	r4,0(r8)
 40419ec:	10800044 	addi	r2,r2,1
 40419f0:	d8c02015 	stw	r3,128(sp)
 40419f4:	d8801f15 	stw	r2,124(sp)
 40419f8:	010001c4 	movi	r4,7
 40419fc:	20be2d0e 	bge	r4,r2,40412b4 <__alt_data_end+0xfffd6ab4>
 4041a00:	d9002c17 	ldw	r4,176(sp)
 4041a04:	d9801e04 	addi	r6,sp,120
 4041a08:	b80b883a 	mov	r5,r23
 4041a0c:	4047ee00 	call	4047ee0 <__sprint_r>
 4041a10:	103cb61e 	bne	r2,zero,4040cec <__alt_data_end+0xfffd64ec>
 4041a14:	d8c02017 	ldw	r3,128(sp)
 4041a18:	da000404 	addi	r8,sp,16
 4041a1c:	003e2606 	br	40412b8 <__alt_data_end+0xfffd6ab8>
 4041a20:	d9002c17 	ldw	r4,176(sp)
 4041a24:	d9801e04 	addi	r6,sp,120
 4041a28:	b80b883a 	mov	r5,r23
 4041a2c:	4047ee00 	call	4047ee0 <__sprint_r>
 4041a30:	103e5d26 	beq	r2,zero,40413a8 <__alt_data_end+0xfffd6ba8>
 4041a34:	003cad06 	br	4040cec <__alt_data_end+0xfffd64ec>
 4041a38:	d9002c17 	ldw	r4,176(sp)
 4041a3c:	d9801e04 	addi	r6,sp,120
 4041a40:	b80b883a 	mov	r5,r23
 4041a44:	4047ee00 	call	4047ee0 <__sprint_r>
 4041a48:	103ca81e 	bne	r2,zero,4040cec <__alt_data_end+0xfffd64ec>
 4041a4c:	d8c02017 	ldw	r3,128(sp)
 4041a50:	da000404 	addi	r8,sp,16
 4041a54:	003e0b06 	br	4041284 <__alt_data_end+0xfffd6a84>
 4041a58:	d9002c17 	ldw	r4,176(sp)
 4041a5c:	d9801e04 	addi	r6,sp,120
 4041a60:	b80b883a 	mov	r5,r23
 4041a64:	4047ee00 	call	4047ee0 <__sprint_r>
 4041a68:	103ca01e 	bne	r2,zero,4040cec <__alt_data_end+0xfffd64ec>
 4041a6c:	d8c02017 	ldw	r3,128(sp)
 4041a70:	da000404 	addi	r8,sp,16
 4041a74:	003dbd06 	br	404116c <__alt_data_end+0xfffd696c>
 4041a78:	d9002c17 	ldw	r4,176(sp)
 4041a7c:	d9801e04 	addi	r6,sp,120
 4041a80:	b80b883a 	mov	r5,r23
 4041a84:	4047ee00 	call	4047ee0 <__sprint_r>
 4041a88:	103c981e 	bne	r2,zero,4040cec <__alt_data_end+0xfffd64ec>
 4041a8c:	d8c02017 	ldw	r3,128(sp)
 4041a90:	da000404 	addi	r8,sp,16
 4041a94:	003dc306 	br	40411a4 <__alt_data_end+0xfffd69a4>
 4041a98:	d8802917 	ldw	r2,164(sp)
 4041a9c:	d8002785 	stb	zero,158(sp)
 4041aa0:	103f0616 	blt	r2,zero,40416bc <__alt_data_end+0xfffd6ebc>
 4041aa4:	00ffdfc4 	movi	r3,-129
 4041aa8:	9d84b03a 	or	r2,r19,r22
 4041aac:	90e4703a 	and	r18,r18,r3
 4041ab0:	103c6b26 	beq	r2,zero,4040c60 <__alt_data_end+0xfffd6460>
 4041ab4:	0039883a 	mov	fp,zero
 4041ab8:	003e7406 	br	404148c <__alt_data_end+0xfffd6c8c>
 4041abc:	9080040c 	andi	r2,r18,16
 4041ac0:	1001b326 	beq	r2,zero,4042190 <___vfprintf_internal_r+0x18ac>
 4041ac4:	d9002d17 	ldw	r4,180(sp)
 4041ac8:	d9402917 	ldw	r5,164(sp)
 4041acc:	d8002785 	stb	zero,158(sp)
 4041ad0:	20800104 	addi	r2,r4,4
 4041ad4:	24c00017 	ldw	r19,0(r4)
 4041ad8:	002d883a 	mov	r22,zero
 4041adc:	2801b516 	blt	r5,zero,40421b4 <___vfprintf_internal_r+0x18d0>
 4041ae0:	00ffdfc4 	movi	r3,-129
 4041ae4:	d8802d15 	stw	r2,180(sp)
 4041ae8:	90e4703a 	and	r18,r18,r3
 4041aec:	983d2726 	beq	r19,zero,4040f8c <__alt_data_end+0xfffd678c>
 4041af0:	0039883a 	mov	fp,zero
 4041af4:	003d2a06 	br	4040fa0 <__alt_data_end+0xfffd67a0>
 4041af8:	dc402617 	ldw	r17,152(sp)
 4041afc:	0441d30e 	bge	zero,r17,404224c <___vfprintf_internal_r+0x1968>
 4041b00:	dc403217 	ldw	r17,200(sp)
 4041b04:	d8803317 	ldw	r2,204(sp)
 4041b08:	1440010e 	bge	r2,r17,4041b10 <___vfprintf_internal_r+0x122c>
 4041b0c:	1023883a 	mov	r17,r2
 4041b10:	04400a0e 	bge	zero,r17,4041b3c <___vfprintf_internal_r+0x1258>
 4041b14:	d8801f17 	ldw	r2,124(sp)
 4041b18:	1c47883a 	add	r3,r3,r17
 4041b1c:	44000015 	stw	r16,0(r8)
 4041b20:	10800044 	addi	r2,r2,1
 4041b24:	44400115 	stw	r17,4(r8)
 4041b28:	d8c02015 	stw	r3,128(sp)
 4041b2c:	d8801f15 	stw	r2,124(sp)
 4041b30:	010001c4 	movi	r4,7
 4041b34:	20826516 	blt	r4,r2,40424cc <___vfprintf_internal_r+0x1be8>
 4041b38:	42000204 	addi	r8,r8,8
 4041b3c:	88026116 	blt	r17,zero,40424c4 <___vfprintf_internal_r+0x1be0>
 4041b40:	d9003217 	ldw	r4,200(sp)
 4041b44:	2463c83a 	sub	r17,r4,r17
 4041b48:	04407b0e 	bge	zero,r17,4041d38 <___vfprintf_internal_r+0x1454>
 4041b4c:	05800404 	movi	r22,16
 4041b50:	d8801f17 	ldw	r2,124(sp)
 4041b54:	b4419d0e 	bge	r22,r17,40421cc <___vfprintf_internal_r+0x18e8>
 4041b58:	01010174 	movhi	r4,1029
 4041b5c:	2100c084 	addi	r4,r4,770
 4041b60:	d9002b15 	stw	r4,172(sp)
 4041b64:	070001c4 	movi	fp,7
 4041b68:	dcc02c17 	ldw	r19,176(sp)
 4041b6c:	00000306 	br	4041b7c <___vfprintf_internal_r+0x1298>
 4041b70:	42000204 	addi	r8,r8,8
 4041b74:	8c7ffc04 	addi	r17,r17,-16
 4041b78:	b441970e 	bge	r22,r17,40421d8 <___vfprintf_internal_r+0x18f4>
 4041b7c:	18c00404 	addi	r3,r3,16
 4041b80:	10800044 	addi	r2,r2,1
 4041b84:	45000015 	stw	r20,0(r8)
 4041b88:	45800115 	stw	r22,4(r8)
 4041b8c:	d8c02015 	stw	r3,128(sp)
 4041b90:	d8801f15 	stw	r2,124(sp)
 4041b94:	e0bff60e 	bge	fp,r2,4041b70 <__alt_data_end+0xfffd7370>
 4041b98:	d9801e04 	addi	r6,sp,120
 4041b9c:	b80b883a 	mov	r5,r23
 4041ba0:	9809883a 	mov	r4,r19
 4041ba4:	4047ee00 	call	4047ee0 <__sprint_r>
 4041ba8:	103c501e 	bne	r2,zero,4040cec <__alt_data_end+0xfffd64ec>
 4041bac:	d8c02017 	ldw	r3,128(sp)
 4041bb0:	d8801f17 	ldw	r2,124(sp)
 4041bb4:	da000404 	addi	r8,sp,16
 4041bb8:	003fee06 	br	4041b74 <__alt_data_end+0xfffd7374>
 4041bbc:	d9002c17 	ldw	r4,176(sp)
 4041bc0:	d9801e04 	addi	r6,sp,120
 4041bc4:	b80b883a 	mov	r5,r23
 4041bc8:	4047ee00 	call	4047ee0 <__sprint_r>
 4041bcc:	103c471e 	bne	r2,zero,4040cec <__alt_data_end+0xfffd64ec>
 4041bd0:	d8c02017 	ldw	r3,128(sp)
 4041bd4:	df002787 	ldb	fp,158(sp)
 4041bd8:	da000404 	addi	r8,sp,16
 4041bdc:	003d5606 	br	4041138 <__alt_data_end+0xfffd6938>
 4041be0:	9080040c 	andi	r2,r18,16
 4041be4:	10016126 	beq	r2,zero,404216c <___vfprintf_internal_r+0x1888>
 4041be8:	d8802d17 	ldw	r2,180(sp)
 4041bec:	14c00017 	ldw	r19,0(r2)
 4041bf0:	10800104 	addi	r2,r2,4
 4041bf4:	d8802d15 	stw	r2,180(sp)
 4041bf8:	982dd7fa 	srai	r22,r19,31
 4041bfc:	b005883a 	mov	r2,r22
 4041c00:	003c8206 	br	4040e0c <__alt_data_end+0xfffd660c>
 4041c04:	9080040c 	andi	r2,r18,16
 4041c08:	10003526 	beq	r2,zero,4041ce0 <___vfprintf_internal_r+0x13fc>
 4041c0c:	d9402d17 	ldw	r5,180(sp)
 4041c10:	d8c02917 	ldw	r3,164(sp)
 4041c14:	d8002785 	stb	zero,158(sp)
 4041c18:	28800104 	addi	r2,r5,4
 4041c1c:	2cc00017 	ldw	r19,0(r5)
 4041c20:	002d883a 	mov	r22,zero
 4041c24:	18003716 	blt	r3,zero,4041d04 <___vfprintf_internal_r+0x1420>
 4041c28:	00ffdfc4 	movi	r3,-129
 4041c2c:	d8802d15 	stw	r2,180(sp)
 4041c30:	90e4703a 	and	r18,r18,r3
 4041c34:	0039883a 	mov	fp,zero
 4041c38:	983df326 	beq	r19,zero,4041408 <__alt_data_end+0xfffd6c08>
 4041c3c:	00800244 	movi	r2,9
 4041c40:	14fc7b36 	bltu	r2,r19,4040e30 <__alt_data_end+0xfffd6630>
 4041c44:	d8c02817 	ldw	r3,160(sp)
 4041c48:	dc001dc4 	addi	r16,sp,119
 4041c4c:	9cc00c04 	addi	r19,r19,48
 4041c50:	1c07c83a 	sub	r3,r3,r16
 4041c54:	dcc01dc5 	stb	r19,119(sp)
 4041c58:	d8c02e15 	stw	r3,184(sp)
 4041c5c:	003ce806 	br	4041000 <__alt_data_end+0xfffd6800>
 4041c60:	d8803317 	ldw	r2,204(sp)
 4041c64:	143fffc4 	addi	r16,r2,-1
 4041c68:	043f4d0e 	bge	zero,r16,40419a0 <__alt_data_end+0xfffd71a0>
 4041c6c:	07000404 	movi	fp,16
 4041c70:	e400810e 	bge	fp,r16,4041e78 <___vfprintf_internal_r+0x1594>
 4041c74:	01410174 	movhi	r5,1029
 4041c78:	2940c084 	addi	r5,r5,770
 4041c7c:	d9402b15 	stw	r5,172(sp)
 4041c80:	01c001c4 	movi	r7,7
 4041c84:	dcc02c17 	ldw	r19,176(sp)
 4041c88:	00000306 	br	4041c98 <___vfprintf_internal_r+0x13b4>
 4041c8c:	b5800204 	addi	r22,r22,8
 4041c90:	843ffc04 	addi	r16,r16,-16
 4041c94:	e4007b0e 	bge	fp,r16,4041e84 <___vfprintf_internal_r+0x15a0>
 4041c98:	18c00404 	addi	r3,r3,16
 4041c9c:	8c400044 	addi	r17,r17,1
 4041ca0:	b5000015 	stw	r20,0(r22)
 4041ca4:	b7000115 	stw	fp,4(r22)
 4041ca8:	d8c02015 	stw	r3,128(sp)
 4041cac:	dc401f15 	stw	r17,124(sp)
 4041cb0:	3c7ff60e 	bge	r7,r17,4041c8c <__alt_data_end+0xfffd748c>
 4041cb4:	d9801e04 	addi	r6,sp,120
 4041cb8:	b80b883a 	mov	r5,r23
 4041cbc:	9809883a 	mov	r4,r19
 4041cc0:	d9c03c15 	stw	r7,240(sp)
 4041cc4:	4047ee00 	call	4047ee0 <__sprint_r>
 4041cc8:	d9c03c17 	ldw	r7,240(sp)
 4041ccc:	103c071e 	bne	r2,zero,4040cec <__alt_data_end+0xfffd64ec>
 4041cd0:	d8c02017 	ldw	r3,128(sp)
 4041cd4:	dc401f17 	ldw	r17,124(sp)
 4041cd8:	dd800404 	addi	r22,sp,16
 4041cdc:	003fec06 	br	4041c90 <__alt_data_end+0xfffd7490>
 4041ce0:	9080100c 	andi	r2,r18,64
 4041ce4:	d8002785 	stb	zero,158(sp)
 4041ce8:	10010e26 	beq	r2,zero,4042124 <___vfprintf_internal_r+0x1840>
 4041cec:	d9002d17 	ldw	r4,180(sp)
 4041cf0:	d9402917 	ldw	r5,164(sp)
 4041cf4:	002d883a 	mov	r22,zero
 4041cf8:	20800104 	addi	r2,r4,4
 4041cfc:	24c0000b 	ldhu	r19,0(r4)
 4041d00:	283fc90e 	bge	r5,zero,4041c28 <__alt_data_end+0xfffd7428>
 4041d04:	d8802d15 	stw	r2,180(sp)
 4041d08:	0039883a 	mov	fp,zero
 4041d0c:	9d84b03a 	or	r2,r19,r22
 4041d10:	103c461e 	bne	r2,zero,4040e2c <__alt_data_end+0xfffd662c>
 4041d14:	00800044 	movi	r2,1
 4041d18:	003e6c06 	br	40416cc <__alt_data_end+0xfffd6ecc>
 4041d1c:	d9002c17 	ldw	r4,176(sp)
 4041d20:	d9801e04 	addi	r6,sp,120
 4041d24:	b80b883a 	mov	r5,r23
 4041d28:	4047ee00 	call	4047ee0 <__sprint_r>
 4041d2c:	103bef1e 	bne	r2,zero,4040cec <__alt_data_end+0xfffd64ec>
 4041d30:	d8c02017 	ldw	r3,128(sp)
 4041d34:	da000404 	addi	r8,sp,16
 4041d38:	d9003217 	ldw	r4,200(sp)
 4041d3c:	d8802617 	ldw	r2,152(sp)
 4041d40:	d9403317 	ldw	r5,204(sp)
 4041d44:	8123883a 	add	r17,r16,r4
 4041d48:	11400216 	blt	r2,r5,4041d54 <___vfprintf_internal_r+0x1470>
 4041d4c:	9100004c 	andi	r4,r18,1
 4041d50:	20000d26 	beq	r4,zero,4041d88 <___vfprintf_internal_r+0x14a4>
 4041d54:	d9003717 	ldw	r4,220(sp)
 4041d58:	d9403417 	ldw	r5,208(sp)
 4041d5c:	1907883a 	add	r3,r3,r4
 4041d60:	d9001f17 	ldw	r4,124(sp)
 4041d64:	41400015 	stw	r5,0(r8)
 4041d68:	d9403717 	ldw	r5,220(sp)
 4041d6c:	21000044 	addi	r4,r4,1
 4041d70:	d8c02015 	stw	r3,128(sp)
 4041d74:	41400115 	stw	r5,4(r8)
 4041d78:	d9001f15 	stw	r4,124(sp)
 4041d7c:	014001c4 	movi	r5,7
 4041d80:	2901e816 	blt	r5,r4,4042524 <___vfprintf_internal_r+0x1c40>
 4041d84:	42000204 	addi	r8,r8,8
 4041d88:	d9003317 	ldw	r4,204(sp)
 4041d8c:	8121883a 	add	r16,r16,r4
 4041d90:	2085c83a 	sub	r2,r4,r2
 4041d94:	8461c83a 	sub	r16,r16,r17
 4041d98:	1400010e 	bge	r2,r16,4041da0 <___vfprintf_internal_r+0x14bc>
 4041d9c:	1021883a 	mov	r16,r2
 4041da0:	04000a0e 	bge	zero,r16,4041dcc <___vfprintf_internal_r+0x14e8>
 4041da4:	d9001f17 	ldw	r4,124(sp)
 4041da8:	1c07883a 	add	r3,r3,r16
 4041dac:	44400015 	stw	r17,0(r8)
 4041db0:	21000044 	addi	r4,r4,1
 4041db4:	44000115 	stw	r16,4(r8)
 4041db8:	d8c02015 	stw	r3,128(sp)
 4041dbc:	d9001f15 	stw	r4,124(sp)
 4041dc0:	014001c4 	movi	r5,7
 4041dc4:	2901fb16 	blt	r5,r4,40425b4 <___vfprintf_internal_r+0x1cd0>
 4041dc8:	42000204 	addi	r8,r8,8
 4041dcc:	8001f716 	blt	r16,zero,40425ac <___vfprintf_internal_r+0x1cc8>
 4041dd0:	1421c83a 	sub	r16,r2,r16
 4041dd4:	043d380e 	bge	zero,r16,40412b8 <__alt_data_end+0xfffd6ab8>
 4041dd8:	04400404 	movi	r17,16
 4041ddc:	d8801f17 	ldw	r2,124(sp)
 4041de0:	8c3efb0e 	bge	r17,r16,40419d0 <__alt_data_end+0xfffd71d0>
 4041de4:	01410174 	movhi	r5,1029
 4041de8:	2940c084 	addi	r5,r5,770
 4041dec:	d9402b15 	stw	r5,172(sp)
 4041df0:	058001c4 	movi	r22,7
 4041df4:	dcc02c17 	ldw	r19,176(sp)
 4041df8:	00000306 	br	4041e08 <___vfprintf_internal_r+0x1524>
 4041dfc:	42000204 	addi	r8,r8,8
 4041e00:	843ffc04 	addi	r16,r16,-16
 4041e04:	8c3ef50e 	bge	r17,r16,40419dc <__alt_data_end+0xfffd71dc>
 4041e08:	18c00404 	addi	r3,r3,16
 4041e0c:	10800044 	addi	r2,r2,1
 4041e10:	45000015 	stw	r20,0(r8)
 4041e14:	44400115 	stw	r17,4(r8)
 4041e18:	d8c02015 	stw	r3,128(sp)
 4041e1c:	d8801f15 	stw	r2,124(sp)
 4041e20:	b0bff60e 	bge	r22,r2,4041dfc <__alt_data_end+0xfffd75fc>
 4041e24:	d9801e04 	addi	r6,sp,120
 4041e28:	b80b883a 	mov	r5,r23
 4041e2c:	9809883a 	mov	r4,r19
 4041e30:	4047ee00 	call	4047ee0 <__sprint_r>
 4041e34:	103bad1e 	bne	r2,zero,4040cec <__alt_data_end+0xfffd64ec>
 4041e38:	d8c02017 	ldw	r3,128(sp)
 4041e3c:	d8801f17 	ldw	r2,124(sp)
 4041e40:	da000404 	addi	r8,sp,16
 4041e44:	003fee06 	br	4041e00 <__alt_data_end+0xfffd7600>
 4041e48:	9088703a 	and	r4,r18,r2
 4041e4c:	203eab1e 	bne	r4,zero,40418fc <__alt_data_end+0xfffd70fc>
 4041e50:	dc401f17 	ldw	r17,124(sp)
 4041e54:	40800115 	stw	r2,4(r8)
 4041e58:	44000015 	stw	r16,0(r8)
 4041e5c:	8c400044 	addi	r17,r17,1
 4041e60:	d8c02015 	stw	r3,128(sp)
 4041e64:	dc401f15 	stw	r17,124(sp)
 4041e68:	008001c4 	movi	r2,7
 4041e6c:	14400e16 	blt	r2,r17,4041ea8 <___vfprintf_internal_r+0x15c4>
 4041e70:	45800204 	addi	r22,r8,8
 4041e74:	003eca06 	br	40419a0 <__alt_data_end+0xfffd71a0>
 4041e78:	01010174 	movhi	r4,1029
 4041e7c:	2100c084 	addi	r4,r4,770
 4041e80:	d9002b15 	stw	r4,172(sp)
 4041e84:	d8802b17 	ldw	r2,172(sp)
 4041e88:	1c07883a 	add	r3,r3,r16
 4041e8c:	8c400044 	addi	r17,r17,1
 4041e90:	b0800015 	stw	r2,0(r22)
 4041e94:	b4000115 	stw	r16,4(r22)
 4041e98:	d8c02015 	stw	r3,128(sp)
 4041e9c:	dc401f15 	stw	r17,124(sp)
 4041ea0:	008001c4 	movi	r2,7
 4041ea4:	147ebd0e 	bge	r2,r17,404199c <__alt_data_end+0xfffd719c>
 4041ea8:	d9002c17 	ldw	r4,176(sp)
 4041eac:	d9801e04 	addi	r6,sp,120
 4041eb0:	b80b883a 	mov	r5,r23
 4041eb4:	4047ee00 	call	4047ee0 <__sprint_r>
 4041eb8:	103b8c1e 	bne	r2,zero,4040cec <__alt_data_end+0xfffd64ec>
 4041ebc:	d8c02017 	ldw	r3,128(sp)
 4041ec0:	dc401f17 	ldw	r17,124(sp)
 4041ec4:	dd800404 	addi	r22,sp,16
 4041ec8:	003eb506 	br	40419a0 <__alt_data_end+0xfffd71a0>
 4041ecc:	d9002c17 	ldw	r4,176(sp)
 4041ed0:	d9801e04 	addi	r6,sp,120
 4041ed4:	b80b883a 	mov	r5,r23
 4041ed8:	4047ee00 	call	4047ee0 <__sprint_r>
 4041edc:	103b831e 	bne	r2,zero,4040cec <__alt_data_end+0xfffd64ec>
 4041ee0:	d8c02017 	ldw	r3,128(sp)
 4041ee4:	dc401f17 	ldw	r17,124(sp)
 4041ee8:	da000404 	addi	r8,sp,16
 4041eec:	003e8d06 	br	4041924 <__alt_data_end+0xfffd7124>
 4041ef0:	d9002c17 	ldw	r4,176(sp)
 4041ef4:	d9801e04 	addi	r6,sp,120
 4041ef8:	b80b883a 	mov	r5,r23
 4041efc:	4047ee00 	call	4047ee0 <__sprint_r>
 4041f00:	103b7a1e 	bne	r2,zero,4040cec <__alt_data_end+0xfffd64ec>
 4041f04:	d8c02017 	ldw	r3,128(sp)
 4041f08:	dc401f17 	ldw	r17,124(sp)
 4041f0c:	dd800404 	addi	r22,sp,16
 4041f10:	003e8f06 	br	4041950 <__alt_data_end+0xfffd7150>
 4041f14:	0027883a 	mov	r19,zero
 4041f18:	003f4a06 	br	4041c44 <__alt_data_end+0xfffd7444>
 4041f1c:	d9002c17 	ldw	r4,176(sp)
 4041f20:	d9801e04 	addi	r6,sp,120
 4041f24:	b80b883a 	mov	r5,r23
 4041f28:	4047ee00 	call	4047ee0 <__sprint_r>
 4041f2c:	103b6f1e 	bne	r2,zero,4040cec <__alt_data_end+0xfffd64ec>
 4041f30:	d8c02017 	ldw	r3,128(sp)
 4041f34:	da000404 	addi	r8,sp,16
 4041f38:	003c9d06 	br	40411b0 <__alt_data_end+0xfffd69b0>
 4041f3c:	04e7c83a 	sub	r19,zero,r19
 4041f40:	9804c03a 	cmpne	r2,r19,zero
 4041f44:	05adc83a 	sub	r22,zero,r22
 4041f48:	b0adc83a 	sub	r22,r22,r2
 4041f4c:	d8802917 	ldw	r2,164(sp)
 4041f50:	07000b44 	movi	fp,45
 4041f54:	df002785 	stb	fp,158(sp)
 4041f58:	10017b16 	blt	r2,zero,4042548 <___vfprintf_internal_r+0x1c64>
 4041f5c:	00bfdfc4 	movi	r2,-129
 4041f60:	90a4703a 	and	r18,r18,r2
 4041f64:	003bb106 	br	4040e2c <__alt_data_end+0xfffd662c>
 4041f68:	d9003617 	ldw	r4,216(sp)
 4041f6c:	d9403817 	ldw	r5,224(sp)
 4041f70:	da003d15 	stw	r8,244(sp)
 4041f74:	4047b040 	call	4047b04 <__fpclassifyd>
 4041f78:	da003d17 	ldw	r8,244(sp)
 4041f7c:	1000f026 	beq	r2,zero,4042340 <___vfprintf_internal_r+0x1a5c>
 4041f80:	d9002917 	ldw	r4,164(sp)
 4041f84:	05bff7c4 	movi	r22,-33
 4041f88:	00bfffc4 	movi	r2,-1
 4041f8c:	8dac703a 	and	r22,r17,r22
 4041f90:	20820026 	beq	r4,r2,4042794 <___vfprintf_internal_r+0x1eb0>
 4041f94:	008011c4 	movi	r2,71
 4041f98:	b081f726 	beq	r22,r2,4042778 <___vfprintf_internal_r+0x1e94>
 4041f9c:	d9003817 	ldw	r4,224(sp)
 4041fa0:	90c04014 	ori	r3,r18,256
 4041fa4:	d8c02b15 	stw	r3,172(sp)
 4041fa8:	20021516 	blt	r4,zero,4042800 <___vfprintf_internal_r+0x1f1c>
 4041fac:	dcc03817 	ldw	r19,224(sp)
 4041fb0:	d8002a05 	stb	zero,168(sp)
 4041fb4:	00801984 	movi	r2,102
 4041fb8:	8881f926 	beq	r17,r2,40427a0 <___vfprintf_internal_r+0x1ebc>
 4041fbc:	00801184 	movi	r2,70
 4041fc0:	88821c26 	beq	r17,r2,4042834 <___vfprintf_internal_r+0x1f50>
 4041fc4:	00801144 	movi	r2,69
 4041fc8:	b081ef26 	beq	r22,r2,4042788 <___vfprintf_internal_r+0x1ea4>
 4041fcc:	d8c02917 	ldw	r3,164(sp)
 4041fd0:	d8802104 	addi	r2,sp,132
 4041fd4:	d8800315 	stw	r2,12(sp)
 4041fd8:	d9403617 	ldw	r5,216(sp)
 4041fdc:	d8802504 	addi	r2,sp,148
 4041fe0:	d9002c17 	ldw	r4,176(sp)
 4041fe4:	d8800215 	stw	r2,8(sp)
 4041fe8:	d8802604 	addi	r2,sp,152
 4041fec:	d8c00015 	stw	r3,0(sp)
 4041ff0:	d8800115 	stw	r2,4(sp)
 4041ff4:	01c00084 	movi	r7,2
 4041ff8:	980d883a 	mov	r6,r19
 4041ffc:	d8c03c15 	stw	r3,240(sp)
 4042000:	da003d15 	stw	r8,244(sp)
 4042004:	4042f080 	call	4042f08 <_dtoa_r>
 4042008:	1021883a 	mov	r16,r2
 404200c:	008019c4 	movi	r2,103
 4042010:	d8c03c17 	ldw	r3,240(sp)
 4042014:	da003d17 	ldw	r8,244(sp)
 4042018:	88817126 	beq	r17,r2,40425e0 <___vfprintf_internal_r+0x1cfc>
 404201c:	008011c4 	movi	r2,71
 4042020:	88829226 	beq	r17,r2,4042a6c <___vfprintf_internal_r+0x2188>
 4042024:	80f9883a 	add	fp,r16,r3
 4042028:	d9003617 	ldw	r4,216(sp)
 404202c:	000d883a 	mov	r6,zero
 4042030:	000f883a 	mov	r7,zero
 4042034:	980b883a 	mov	r5,r19
 4042038:	da003d15 	stw	r8,244(sp)
 404203c:	404bb580 	call	404bb58 <__eqdf2>
 4042040:	da003d17 	ldw	r8,244(sp)
 4042044:	10018d26 	beq	r2,zero,404267c <___vfprintf_internal_r+0x1d98>
 4042048:	d8802117 	ldw	r2,132(sp)
 404204c:	1700062e 	bgeu	r2,fp,4042068 <___vfprintf_internal_r+0x1784>
 4042050:	01000c04 	movi	r4,48
 4042054:	10c00044 	addi	r3,r2,1
 4042058:	d8c02115 	stw	r3,132(sp)
 404205c:	11000005 	stb	r4,0(r2)
 4042060:	d8802117 	ldw	r2,132(sp)
 4042064:	173ffb36 	bltu	r2,fp,4042054 <__alt_data_end+0xfffd7854>
 4042068:	1405c83a 	sub	r2,r2,r16
 404206c:	d8803315 	stw	r2,204(sp)
 4042070:	008011c4 	movi	r2,71
 4042074:	b0817626 	beq	r22,r2,4042650 <___vfprintf_internal_r+0x1d6c>
 4042078:	00801944 	movi	r2,101
 404207c:	1442810e 	bge	r2,r17,4042a84 <___vfprintf_internal_r+0x21a0>
 4042080:	d8c02617 	ldw	r3,152(sp)
 4042084:	00801984 	movi	r2,102
 4042088:	d8c03215 	stw	r3,200(sp)
 404208c:	8881fe26 	beq	r17,r2,4042888 <___vfprintf_internal_r+0x1fa4>
 4042090:	d8c03217 	ldw	r3,200(sp)
 4042094:	d9003317 	ldw	r4,204(sp)
 4042098:	1901dd16 	blt	r3,r4,4042810 <___vfprintf_internal_r+0x1f2c>
 404209c:	9480004c 	andi	r18,r18,1
 40420a0:	90022b1e 	bne	r18,zero,4042950 <___vfprintf_internal_r+0x206c>
 40420a4:	1805883a 	mov	r2,r3
 40420a8:	18028016 	blt	r3,zero,4042aac <___vfprintf_internal_r+0x21c8>
 40420ac:	d8c03217 	ldw	r3,200(sp)
 40420b0:	044019c4 	movi	r17,103
 40420b4:	d8c02e15 	stw	r3,184(sp)
 40420b8:	df002a07 	ldb	fp,168(sp)
 40420bc:	e001531e 	bne	fp,zero,404260c <___vfprintf_internal_r+0x1d28>
 40420c0:	df002783 	ldbu	fp,158(sp)
 40420c4:	d8802a15 	stw	r2,168(sp)
 40420c8:	dc802b17 	ldw	r18,172(sp)
 40420cc:	d8002915 	stw	zero,164(sp)
 40420d0:	003bd106 	br	4041018 <__alt_data_end+0xfffd6818>
 40420d4:	d8802d17 	ldw	r2,180(sp)
 40420d8:	d8c02d17 	ldw	r3,180(sp)
 40420dc:	d9002d17 	ldw	r4,180(sp)
 40420e0:	10800017 	ldw	r2,0(r2)
 40420e4:	18c00117 	ldw	r3,4(r3)
 40420e8:	21000204 	addi	r4,r4,8
 40420ec:	d8803615 	stw	r2,216(sp)
 40420f0:	d8c03815 	stw	r3,224(sp)
 40420f4:	d9002d15 	stw	r4,180(sp)
 40420f8:	003b7506 	br	4040ed0 <__alt_data_end+0xfffd66d0>
 40420fc:	ac400007 	ldb	r17,0(r21)
 4042100:	003a5906 	br	4040a68 <__alt_data_end+0xfffd6268>
 4042104:	9080100c 	andi	r2,r18,64
 4042108:	1000a826 	beq	r2,zero,40423ac <___vfprintf_internal_r+0x1ac8>
 404210c:	d9002d17 	ldw	r4,180(sp)
 4042110:	002d883a 	mov	r22,zero
 4042114:	24c0000b 	ldhu	r19,0(r4)
 4042118:	21000104 	addi	r4,r4,4
 404211c:	d9002d15 	stw	r4,180(sp)
 4042120:	003ccb06 	br	4041450 <__alt_data_end+0xfffd6c50>
 4042124:	d8c02d17 	ldw	r3,180(sp)
 4042128:	d9002917 	ldw	r4,164(sp)
 404212c:	002d883a 	mov	r22,zero
 4042130:	18800104 	addi	r2,r3,4
 4042134:	1cc00017 	ldw	r19,0(r3)
 4042138:	203ebb0e 	bge	r4,zero,4041c28 <__alt_data_end+0xfffd7428>
 404213c:	003ef106 	br	4041d04 <__alt_data_end+0xfffd7504>
 4042140:	9080040c 	andi	r2,r18,16
 4042144:	1000921e 	bne	r2,zero,4042390 <___vfprintf_internal_r+0x1aac>
 4042148:	9480100c 	andi	r18,r18,64
 404214c:	90013926 	beq	r18,zero,4042634 <___vfprintf_internal_r+0x1d50>
 4042150:	d9002d17 	ldw	r4,180(sp)
 4042154:	d9402f17 	ldw	r5,188(sp)
 4042158:	20800017 	ldw	r2,0(r4)
 404215c:	21000104 	addi	r4,r4,4
 4042160:	d9002d15 	stw	r4,180(sp)
 4042164:	1140000d 	sth	r5,0(r2)
 4042168:	003a1606 	br	40409c4 <__alt_data_end+0xfffd61c4>
 404216c:	9080100c 	andi	r2,r18,64
 4042170:	10008026 	beq	r2,zero,4042374 <___vfprintf_internal_r+0x1a90>
 4042174:	d8c02d17 	ldw	r3,180(sp)
 4042178:	1cc0000f 	ldh	r19,0(r3)
 404217c:	18c00104 	addi	r3,r3,4
 4042180:	d8c02d15 	stw	r3,180(sp)
 4042184:	982dd7fa 	srai	r22,r19,31
 4042188:	b005883a 	mov	r2,r22
 404218c:	003b1f06 	br	4040e0c <__alt_data_end+0xfffd660c>
 4042190:	9080100c 	andi	r2,r18,64
 4042194:	d8002785 	stb	zero,158(sp)
 4042198:	10008a1e 	bne	r2,zero,40423c4 <___vfprintf_internal_r+0x1ae0>
 404219c:	d9402d17 	ldw	r5,180(sp)
 40421a0:	d8c02917 	ldw	r3,164(sp)
 40421a4:	002d883a 	mov	r22,zero
 40421a8:	28800104 	addi	r2,r5,4
 40421ac:	2cc00017 	ldw	r19,0(r5)
 40421b0:	183e4b0e 	bge	r3,zero,4041ae0 <__alt_data_end+0xfffd72e0>
 40421b4:	9d86b03a 	or	r3,r19,r22
 40421b8:	d8802d15 	stw	r2,180(sp)
 40421bc:	183e4c1e 	bne	r3,zero,4041af0 <__alt_data_end+0xfffd72f0>
 40421c0:	0039883a 	mov	fp,zero
 40421c4:	0005883a 	mov	r2,zero
 40421c8:	003d4006 	br	40416cc <__alt_data_end+0xfffd6ecc>
 40421cc:	01410174 	movhi	r5,1029
 40421d0:	2940c084 	addi	r5,r5,770
 40421d4:	d9402b15 	stw	r5,172(sp)
 40421d8:	d9402b17 	ldw	r5,172(sp)
 40421dc:	1c47883a 	add	r3,r3,r17
 40421e0:	10800044 	addi	r2,r2,1
 40421e4:	41400015 	stw	r5,0(r8)
 40421e8:	44400115 	stw	r17,4(r8)
 40421ec:	d8c02015 	stw	r3,128(sp)
 40421f0:	d8801f15 	stw	r2,124(sp)
 40421f4:	010001c4 	movi	r4,7
 40421f8:	20bec816 	blt	r4,r2,4041d1c <__alt_data_end+0xfffd751c>
 40421fc:	42000204 	addi	r8,r8,8
 4042200:	003ecd06 	br	4041d38 <__alt_data_end+0xfffd7538>
 4042204:	d9002917 	ldw	r4,164(sp)
 4042208:	d8002785 	stb	zero,158(sp)
 404220c:	203d2d16 	blt	r4,zero,40416c4 <__alt_data_end+0xfffd6ec4>
 4042210:	00bfdfc4 	movi	r2,-129
 4042214:	90a4703a 	and	r18,r18,r2
 4042218:	003a9106 	br	4040c60 <__alt_data_end+0xfffd6460>
 404221c:	01010174 	movhi	r4,1029
 4042220:	2100c084 	addi	r4,r4,770
 4042224:	d9002b15 	stw	r4,172(sp)
 4042228:	003c0c06 	br	404125c <__alt_data_end+0xfffd6a5c>
 404222c:	d9002c17 	ldw	r4,176(sp)
 4042230:	d9801e04 	addi	r6,sp,120
 4042234:	b80b883a 	mov	r5,r23
 4042238:	4047ee00 	call	4047ee0 <__sprint_r>
 404223c:	103aab1e 	bne	r2,zero,4040cec <__alt_data_end+0xfffd64ec>
 4042240:	d8c02017 	ldw	r3,128(sp)
 4042244:	da000404 	addi	r8,sp,16
 4042248:	003d4106 	br	4041750 <__alt_data_end+0xfffd6f50>
 404224c:	d8801f17 	ldw	r2,124(sp)
 4042250:	01410174 	movhi	r5,1029
 4042254:	01000044 	movi	r4,1
 4042258:	18c00044 	addi	r3,r3,1
 404225c:	10800044 	addi	r2,r2,1
 4042260:	2940c004 	addi	r5,r5,768
 4042264:	41000115 	stw	r4,4(r8)
 4042268:	41400015 	stw	r5,0(r8)
 404226c:	d8c02015 	stw	r3,128(sp)
 4042270:	d8801f15 	stw	r2,124(sp)
 4042274:	010001c4 	movi	r4,7
 4042278:	20805c16 	blt	r4,r2,40423ec <___vfprintf_internal_r+0x1b08>
 404227c:	42000204 	addi	r8,r8,8
 4042280:	8800041e 	bne	r17,zero,4042294 <___vfprintf_internal_r+0x19b0>
 4042284:	d8803317 	ldw	r2,204(sp)
 4042288:	1000021e 	bne	r2,zero,4042294 <___vfprintf_internal_r+0x19b0>
 404228c:	9080004c 	andi	r2,r18,1
 4042290:	103c0926 	beq	r2,zero,40412b8 <__alt_data_end+0xfffd6ab8>
 4042294:	d9003717 	ldw	r4,220(sp)
 4042298:	d8801f17 	ldw	r2,124(sp)
 404229c:	d9403417 	ldw	r5,208(sp)
 40422a0:	20c7883a 	add	r3,r4,r3
 40422a4:	10800044 	addi	r2,r2,1
 40422a8:	41000115 	stw	r4,4(r8)
 40422ac:	41400015 	stw	r5,0(r8)
 40422b0:	d8c02015 	stw	r3,128(sp)
 40422b4:	d8801f15 	stw	r2,124(sp)
 40422b8:	010001c4 	movi	r4,7
 40422bc:	20812116 	blt	r4,r2,4042744 <___vfprintf_internal_r+0x1e60>
 40422c0:	42000204 	addi	r8,r8,8
 40422c4:	0463c83a 	sub	r17,zero,r17
 40422c8:	0440730e 	bge	zero,r17,4042498 <___vfprintf_internal_r+0x1bb4>
 40422cc:	05800404 	movi	r22,16
 40422d0:	b440860e 	bge	r22,r17,40424ec <___vfprintf_internal_r+0x1c08>
 40422d4:	01410174 	movhi	r5,1029
 40422d8:	2940c084 	addi	r5,r5,770
 40422dc:	d9402b15 	stw	r5,172(sp)
 40422e0:	070001c4 	movi	fp,7
 40422e4:	dcc02c17 	ldw	r19,176(sp)
 40422e8:	00000306 	br	40422f8 <___vfprintf_internal_r+0x1a14>
 40422ec:	42000204 	addi	r8,r8,8
 40422f0:	8c7ffc04 	addi	r17,r17,-16
 40422f4:	b440800e 	bge	r22,r17,40424f8 <___vfprintf_internal_r+0x1c14>
 40422f8:	18c00404 	addi	r3,r3,16
 40422fc:	10800044 	addi	r2,r2,1
 4042300:	45000015 	stw	r20,0(r8)
 4042304:	45800115 	stw	r22,4(r8)
 4042308:	d8c02015 	stw	r3,128(sp)
 404230c:	d8801f15 	stw	r2,124(sp)
 4042310:	e0bff60e 	bge	fp,r2,40422ec <__alt_data_end+0xfffd7aec>
 4042314:	d9801e04 	addi	r6,sp,120
 4042318:	b80b883a 	mov	r5,r23
 404231c:	9809883a 	mov	r4,r19
 4042320:	4047ee00 	call	4047ee0 <__sprint_r>
 4042324:	103a711e 	bne	r2,zero,4040cec <__alt_data_end+0xfffd64ec>
 4042328:	d8c02017 	ldw	r3,128(sp)
 404232c:	d8801f17 	ldw	r2,124(sp)
 4042330:	da000404 	addi	r8,sp,16
 4042334:	003fee06 	br	40422f0 <__alt_data_end+0xfffd7af0>
 4042338:	00bfffc4 	movi	r2,-1
 404233c:	003a6f06 	br	4040cfc <__alt_data_end+0xfffd64fc>
 4042340:	008011c4 	movi	r2,71
 4042344:	1440b816 	blt	r2,r17,4042628 <___vfprintf_internal_r+0x1d44>
 4042348:	04010174 	movhi	r16,1029
 404234c:	8400b204 	addi	r16,r16,712
 4042350:	00c000c4 	movi	r3,3
 4042354:	00bfdfc4 	movi	r2,-129
 4042358:	d8c02a15 	stw	r3,168(sp)
 404235c:	90a4703a 	and	r18,r18,r2
 4042360:	df002783 	ldbu	fp,158(sp)
 4042364:	d8c02e15 	stw	r3,184(sp)
 4042368:	d8002915 	stw	zero,164(sp)
 404236c:	d8003215 	stw	zero,200(sp)
 4042370:	003b2906 	br	4041018 <__alt_data_end+0xfffd6818>
 4042374:	d9002d17 	ldw	r4,180(sp)
 4042378:	24c00017 	ldw	r19,0(r4)
 404237c:	21000104 	addi	r4,r4,4
 4042380:	d9002d15 	stw	r4,180(sp)
 4042384:	982dd7fa 	srai	r22,r19,31
 4042388:	b005883a 	mov	r2,r22
 404238c:	003a9f06 	br	4040e0c <__alt_data_end+0xfffd660c>
 4042390:	d9402d17 	ldw	r5,180(sp)
 4042394:	d8c02f17 	ldw	r3,188(sp)
 4042398:	28800017 	ldw	r2,0(r5)
 404239c:	29400104 	addi	r5,r5,4
 40423a0:	d9402d15 	stw	r5,180(sp)
 40423a4:	10c00015 	stw	r3,0(r2)
 40423a8:	00398606 	br	40409c4 <__alt_data_end+0xfffd61c4>
 40423ac:	d9402d17 	ldw	r5,180(sp)
 40423b0:	002d883a 	mov	r22,zero
 40423b4:	2cc00017 	ldw	r19,0(r5)
 40423b8:	29400104 	addi	r5,r5,4
 40423bc:	d9402d15 	stw	r5,180(sp)
 40423c0:	003c2306 	br	4041450 <__alt_data_end+0xfffd6c50>
 40423c4:	d8c02d17 	ldw	r3,180(sp)
 40423c8:	d9002917 	ldw	r4,164(sp)
 40423cc:	002d883a 	mov	r22,zero
 40423d0:	18800104 	addi	r2,r3,4
 40423d4:	1cc0000b 	ldhu	r19,0(r3)
 40423d8:	203dc10e 	bge	r4,zero,4041ae0 <__alt_data_end+0xfffd72e0>
 40423dc:	003f7506 	br	40421b4 <__alt_data_end+0xfffd79b4>
 40423e0:	04010174 	movhi	r16,1029
 40423e4:	8400b004 	addi	r16,r16,704
 40423e8:	003acc06 	br	4040f1c <__alt_data_end+0xfffd671c>
 40423ec:	d9002c17 	ldw	r4,176(sp)
 40423f0:	d9801e04 	addi	r6,sp,120
 40423f4:	b80b883a 	mov	r5,r23
 40423f8:	4047ee00 	call	4047ee0 <__sprint_r>
 40423fc:	103a3b1e 	bne	r2,zero,4040cec <__alt_data_end+0xfffd64ec>
 4042400:	dc402617 	ldw	r17,152(sp)
 4042404:	d8c02017 	ldw	r3,128(sp)
 4042408:	da000404 	addi	r8,sp,16
 404240c:	003f9c06 	br	4042280 <__alt_data_end+0xfffd7a80>
 4042410:	ac400043 	ldbu	r17,1(r21)
 4042414:	94800814 	ori	r18,r18,32
 4042418:	ad400044 	addi	r21,r21,1
 404241c:	8c403fcc 	andi	r17,r17,255
 4042420:	8c40201c 	xori	r17,r17,128
 4042424:	8c7fe004 	addi	r17,r17,-128
 4042428:	00398f06 	br	4040a68 <__alt_data_end+0xfffd6268>
 404242c:	d8c02d15 	stw	r3,180(sp)
 4042430:	0039883a 	mov	fp,zero
 4042434:	003e3506 	br	4041d0c <__alt_data_end+0xfffd750c>
 4042438:	d9002c17 	ldw	r4,176(sp)
 404243c:	d9801e04 	addi	r6,sp,120
 4042440:	b80b883a 	mov	r5,r23
 4042444:	4047ee00 	call	4047ee0 <__sprint_r>
 4042448:	103a281e 	bne	r2,zero,4040cec <__alt_data_end+0xfffd64ec>
 404244c:	d8c02017 	ldw	r3,128(sp)
 4042450:	da000404 	addi	r8,sp,16
 4042454:	003cd006 	br	4041798 <__alt_data_end+0xfffd6f98>
 4042458:	8009883a 	mov	r4,r16
 404245c:	da003d15 	stw	r8,244(sp)
 4042460:	404084c0 	call	404084c <strlen>
 4042464:	d8802e15 	stw	r2,184(sp)
 4042468:	da003d17 	ldw	r8,244(sp)
 404246c:	103c340e 	bge	r2,zero,4041540 <__alt_data_end+0xfffd6d40>
 4042470:	0005883a 	mov	r2,zero
 4042474:	003c3206 	br	4041540 <__alt_data_end+0xfffd6d40>
 4042478:	d9002c17 	ldw	r4,176(sp)
 404247c:	d9801e04 	addi	r6,sp,120
 4042480:	b80b883a 	mov	r5,r23
 4042484:	4047ee00 	call	4047ee0 <__sprint_r>
 4042488:	103a181e 	bne	r2,zero,4040cec <__alt_data_end+0xfffd64ec>
 404248c:	d8c02017 	ldw	r3,128(sp)
 4042490:	d8801f17 	ldw	r2,124(sp)
 4042494:	da000404 	addi	r8,sp,16
 4042498:	d9403317 	ldw	r5,204(sp)
 404249c:	10800044 	addi	r2,r2,1
 40424a0:	44000015 	stw	r16,0(r8)
 40424a4:	28c7883a 	add	r3,r5,r3
 40424a8:	003b7d06 	br	40412a0 <__alt_data_end+0xfffd6aa0>
 40424ac:	01010174 	movhi	r4,1029
 40424b0:	2100c484 	addi	r4,r4,786
 40424b4:	d9003515 	stw	r4,212(sp)
 40424b8:	003b1406 	br	404110c <__alt_data_end+0xfffd690c>
 40424bc:	013fffc4 	movi	r4,-1
 40424c0:	003a3506 	br	4040d98 <__alt_data_end+0xfffd6598>
 40424c4:	0023883a 	mov	r17,zero
 40424c8:	003d9d06 	br	4041b40 <__alt_data_end+0xfffd7340>
 40424cc:	d9002c17 	ldw	r4,176(sp)
 40424d0:	d9801e04 	addi	r6,sp,120
 40424d4:	b80b883a 	mov	r5,r23
 40424d8:	4047ee00 	call	4047ee0 <__sprint_r>
 40424dc:	103a031e 	bne	r2,zero,4040cec <__alt_data_end+0xfffd64ec>
 40424e0:	d8c02017 	ldw	r3,128(sp)
 40424e4:	da000404 	addi	r8,sp,16
 40424e8:	003d9406 	br	4041b3c <__alt_data_end+0xfffd733c>
 40424ec:	01010174 	movhi	r4,1029
 40424f0:	2100c084 	addi	r4,r4,770
 40424f4:	d9002b15 	stw	r4,172(sp)
 40424f8:	d9002b17 	ldw	r4,172(sp)
 40424fc:	1c47883a 	add	r3,r3,r17
 4042500:	10800044 	addi	r2,r2,1
 4042504:	41000015 	stw	r4,0(r8)
 4042508:	44400115 	stw	r17,4(r8)
 404250c:	d8c02015 	stw	r3,128(sp)
 4042510:	d8801f15 	stw	r2,124(sp)
 4042514:	010001c4 	movi	r4,7
 4042518:	20bfd716 	blt	r4,r2,4042478 <__alt_data_end+0xfffd7c78>
 404251c:	42000204 	addi	r8,r8,8
 4042520:	003fdd06 	br	4042498 <__alt_data_end+0xfffd7c98>
 4042524:	d9002c17 	ldw	r4,176(sp)
 4042528:	d9801e04 	addi	r6,sp,120
 404252c:	b80b883a 	mov	r5,r23
 4042530:	4047ee00 	call	4047ee0 <__sprint_r>
 4042534:	1039ed1e 	bne	r2,zero,4040cec <__alt_data_end+0xfffd64ec>
 4042538:	d8802617 	ldw	r2,152(sp)
 404253c:	d8c02017 	ldw	r3,128(sp)
 4042540:	da000404 	addi	r8,sp,16
 4042544:	003e1006 	br	4041d88 <__alt_data_end+0xfffd7588>
 4042548:	00800044 	movi	r2,1
 404254c:	10803fcc 	andi	r2,r2,255
 4042550:	00c00044 	movi	r3,1
 4042554:	10fa3526 	beq	r2,r3,4040e2c <__alt_data_end+0xfffd662c>
 4042558:	00c00084 	movi	r3,2
 404255c:	10fbcb26 	beq	r2,r3,404148c <__alt_data_end+0xfffd6c8c>
 4042560:	003a8f06 	br	4040fa0 <__alt_data_end+0xfffd67a0>
 4042564:	01010174 	movhi	r4,1029
 4042568:	2100c484 	addi	r4,r4,786
 404256c:	d9003515 	stw	r4,212(sp)
 4042570:	003b7606 	br	404134c <__alt_data_end+0xfffd6b4c>
 4042574:	d8802917 	ldw	r2,164(sp)
 4042578:	00c00184 	movi	r3,6
 404257c:	1880012e 	bgeu	r3,r2,4042584 <___vfprintf_internal_r+0x1ca0>
 4042580:	1805883a 	mov	r2,r3
 4042584:	d8802e15 	stw	r2,184(sp)
 4042588:	1000ef16 	blt	r2,zero,4042948 <___vfprintf_internal_r+0x2064>
 404258c:	04010174 	movhi	r16,1029
 4042590:	d8802a15 	stw	r2,168(sp)
 4042594:	dcc02d15 	stw	r19,180(sp)
 4042598:	d8002915 	stw	zero,164(sp)
 404259c:	d8003215 	stw	zero,200(sp)
 40425a0:	8400be04 	addi	r16,r16,760
 40425a4:	0039883a 	mov	fp,zero
 40425a8:	003aa206 	br	4041034 <__alt_data_end+0xfffd6834>
 40425ac:	0021883a 	mov	r16,zero
 40425b0:	003e0706 	br	4041dd0 <__alt_data_end+0xfffd75d0>
 40425b4:	d9002c17 	ldw	r4,176(sp)
 40425b8:	d9801e04 	addi	r6,sp,120
 40425bc:	b80b883a 	mov	r5,r23
 40425c0:	4047ee00 	call	4047ee0 <__sprint_r>
 40425c4:	1039c91e 	bne	r2,zero,4040cec <__alt_data_end+0xfffd64ec>
 40425c8:	d8802617 	ldw	r2,152(sp)
 40425cc:	d9403317 	ldw	r5,204(sp)
 40425d0:	d8c02017 	ldw	r3,128(sp)
 40425d4:	da000404 	addi	r8,sp,16
 40425d8:	2885c83a 	sub	r2,r5,r2
 40425dc:	003dfb06 	br	4041dcc <__alt_data_end+0xfffd75cc>
 40425e0:	9080004c 	andi	r2,r18,1
 40425e4:	103e8f1e 	bne	r2,zero,4042024 <__alt_data_end+0xfffd7824>
 40425e8:	d8802117 	ldw	r2,132(sp)
 40425ec:	003e9e06 	br	4042068 <__alt_data_end+0xfffd7868>
 40425f0:	1025883a 	mov	r18,r2
 40425f4:	0039883a 	mov	fp,zero
 40425f8:	00800084 	movi	r2,2
 40425fc:	003fd306 	br	404254c <__alt_data_end+0xfffd7d4c>
 4042600:	07000b44 	movi	fp,45
 4042604:	df002785 	stb	fp,158(sp)
 4042608:	003a4006 	br	4040f0c <__alt_data_end+0xfffd670c>
 404260c:	00c00b44 	movi	r3,45
 4042610:	d8c02785 	stb	r3,158(sp)
 4042614:	d8802a15 	stw	r2,168(sp)
 4042618:	dc802b17 	ldw	r18,172(sp)
 404261c:	d8002915 	stw	zero,164(sp)
 4042620:	07000b44 	movi	fp,45
 4042624:	003a8006 	br	4041028 <__alt_data_end+0xfffd6828>
 4042628:	04010174 	movhi	r16,1029
 404262c:	8400b304 	addi	r16,r16,716
 4042630:	003f4706 	br	4042350 <__alt_data_end+0xfffd7b50>
 4042634:	d8c02d17 	ldw	r3,180(sp)
 4042638:	d9002f17 	ldw	r4,188(sp)
 404263c:	18800017 	ldw	r2,0(r3)
 4042640:	18c00104 	addi	r3,r3,4
 4042644:	d8c02d15 	stw	r3,180(sp)
 4042648:	11000015 	stw	r4,0(r2)
 404264c:	0038dd06 	br	40409c4 <__alt_data_end+0xfffd61c4>
 4042650:	dd802617 	ldw	r22,152(sp)
 4042654:	00bfff44 	movi	r2,-3
 4042658:	b0801c16 	blt	r22,r2,40426cc <___vfprintf_internal_r+0x1de8>
 404265c:	d9402917 	ldw	r5,164(sp)
 4042660:	2d801a16 	blt	r5,r22,40426cc <___vfprintf_internal_r+0x1de8>
 4042664:	dd803215 	stw	r22,200(sp)
 4042668:	003e8906 	br	4042090 <__alt_data_end+0xfffd7890>
 404266c:	01010174 	movhi	r4,1029
 4042670:	2100c084 	addi	r4,r4,770
 4042674:	d9002b15 	stw	r4,172(sp)
 4042678:	003c9106 	br	40418c0 <__alt_data_end+0xfffd70c0>
 404267c:	e005883a 	mov	r2,fp
 4042680:	003e7906 	br	4042068 <__alt_data_end+0xfffd7868>
 4042684:	d9402917 	ldw	r5,164(sp)
 4042688:	df002783 	ldbu	fp,158(sp)
 404268c:	dcc02d15 	stw	r19,180(sp)
 4042690:	d9402a15 	stw	r5,168(sp)
 4042694:	d9402e15 	stw	r5,184(sp)
 4042698:	d8002915 	stw	zero,164(sp)
 404269c:	d8003215 	stw	zero,200(sp)
 40426a0:	003a5d06 	br	4041018 <__alt_data_end+0xfffd6818>
 40426a4:	9080004c 	andi	r2,r18,1
 40426a8:	0039883a 	mov	fp,zero
 40426ac:	10000426 	beq	r2,zero,40426c0 <___vfprintf_internal_r+0x1ddc>
 40426b0:	00800c04 	movi	r2,48
 40426b4:	dc001dc4 	addi	r16,sp,119
 40426b8:	d8801dc5 	stb	r2,119(sp)
 40426bc:	003b8006 	br	40414c0 <__alt_data_end+0xfffd6cc0>
 40426c0:	d8002e15 	stw	zero,184(sp)
 40426c4:	dc001e04 	addi	r16,sp,120
 40426c8:	003a4d06 	br	4041000 <__alt_data_end+0xfffd6800>
 40426cc:	8c7fff84 	addi	r17,r17,-2
 40426d0:	b5bfffc4 	addi	r22,r22,-1
 40426d4:	dd802615 	stw	r22,152(sp)
 40426d8:	dc4022c5 	stb	r17,139(sp)
 40426dc:	b000bf16 	blt	r22,zero,40429dc <___vfprintf_internal_r+0x20f8>
 40426e0:	00800ac4 	movi	r2,43
 40426e4:	d8802305 	stb	r2,140(sp)
 40426e8:	00800244 	movi	r2,9
 40426ec:	15807016 	blt	r2,r22,40428b0 <___vfprintf_internal_r+0x1fcc>
 40426f0:	00800c04 	movi	r2,48
 40426f4:	b5800c04 	addi	r22,r22,48
 40426f8:	d8802345 	stb	r2,141(sp)
 40426fc:	dd802385 	stb	r22,142(sp)
 4042700:	d88023c4 	addi	r2,sp,143
 4042704:	df0022c4 	addi	fp,sp,139
 4042708:	d8c03317 	ldw	r3,204(sp)
 404270c:	1739c83a 	sub	fp,r2,fp
 4042710:	d9003317 	ldw	r4,204(sp)
 4042714:	e0c7883a 	add	r3,fp,r3
 4042718:	df003a15 	stw	fp,232(sp)
 404271c:	d8c02e15 	stw	r3,184(sp)
 4042720:	00800044 	movi	r2,1
 4042724:	1100b30e 	bge	r2,r4,40429f4 <___vfprintf_internal_r+0x2110>
 4042728:	d8c02e17 	ldw	r3,184(sp)
 404272c:	18c00044 	addi	r3,r3,1
 4042730:	d8c02e15 	stw	r3,184(sp)
 4042734:	1805883a 	mov	r2,r3
 4042738:	1800ac16 	blt	r3,zero,40429ec <___vfprintf_internal_r+0x2108>
 404273c:	d8003215 	stw	zero,200(sp)
 4042740:	003e5d06 	br	40420b8 <__alt_data_end+0xfffd78b8>
 4042744:	d9002c17 	ldw	r4,176(sp)
 4042748:	d9801e04 	addi	r6,sp,120
 404274c:	b80b883a 	mov	r5,r23
 4042750:	4047ee00 	call	4047ee0 <__sprint_r>
 4042754:	1039651e 	bne	r2,zero,4040cec <__alt_data_end+0xfffd64ec>
 4042758:	dc402617 	ldw	r17,152(sp)
 404275c:	d8c02017 	ldw	r3,128(sp)
 4042760:	d8801f17 	ldw	r2,124(sp)
 4042764:	da000404 	addi	r8,sp,16
 4042768:	003ed606 	br	40422c4 <__alt_data_end+0xfffd7ac4>
 404276c:	582b883a 	mov	r21,r11
 4042770:	d8002915 	stw	zero,164(sp)
 4042774:	0038bd06 	br	4040a6c <__alt_data_end+0xfffd626c>
 4042778:	d8802917 	ldw	r2,164(sp)
 404277c:	103e071e 	bne	r2,zero,4041f9c <__alt_data_end+0xfffd779c>
 4042780:	dc002915 	stw	r16,164(sp)
 4042784:	003e0506 	br	4041f9c <__alt_data_end+0xfffd779c>
 4042788:	d9002917 	ldw	r4,164(sp)
 404278c:	20c00044 	addi	r3,r4,1
 4042790:	003e0f06 	br	4041fd0 <__alt_data_end+0xfffd77d0>
 4042794:	01400184 	movi	r5,6
 4042798:	d9402915 	stw	r5,164(sp)
 404279c:	003dff06 	br	4041f9c <__alt_data_end+0xfffd779c>
 40427a0:	d8802104 	addi	r2,sp,132
 40427a4:	d8800315 	stw	r2,12(sp)
 40427a8:	d8802504 	addi	r2,sp,148
 40427ac:	d8800215 	stw	r2,8(sp)
 40427b0:	d8802604 	addi	r2,sp,152
 40427b4:	d8800115 	stw	r2,4(sp)
 40427b8:	d8802917 	ldw	r2,164(sp)
 40427bc:	d9403617 	ldw	r5,216(sp)
 40427c0:	d9002c17 	ldw	r4,176(sp)
 40427c4:	d8800015 	stw	r2,0(sp)
 40427c8:	01c000c4 	movi	r7,3
 40427cc:	980d883a 	mov	r6,r19
 40427d0:	da003d15 	stw	r8,244(sp)
 40427d4:	4042f080 	call	4042f08 <_dtoa_r>
 40427d8:	d8c02917 	ldw	r3,164(sp)
 40427dc:	da003d17 	ldw	r8,244(sp)
 40427e0:	1021883a 	mov	r16,r2
 40427e4:	10f9883a 	add	fp,r2,r3
 40427e8:	81000007 	ldb	r4,0(r16)
 40427ec:	00800c04 	movi	r2,48
 40427f0:	20805e26 	beq	r4,r2,404296c <___vfprintf_internal_r+0x2088>
 40427f4:	d8c02617 	ldw	r3,152(sp)
 40427f8:	e0f9883a 	add	fp,fp,r3
 40427fc:	003e0a06 	br	4042028 <__alt_data_end+0xfffd7828>
 4042800:	00c00b44 	movi	r3,45
 4042804:	24e0003c 	xorhi	r19,r4,32768
 4042808:	d8c02a05 	stb	r3,168(sp)
 404280c:	003de906 	br	4041fb4 <__alt_data_end+0xfffd77b4>
 4042810:	d8c03217 	ldw	r3,200(sp)
 4042814:	00c07a0e 	bge	zero,r3,4042a00 <___vfprintf_internal_r+0x211c>
 4042818:	00800044 	movi	r2,1
 404281c:	d9003317 	ldw	r4,204(sp)
 4042820:	1105883a 	add	r2,r2,r4
 4042824:	d8802e15 	stw	r2,184(sp)
 4042828:	10004e16 	blt	r2,zero,4042964 <___vfprintf_internal_r+0x2080>
 404282c:	044019c4 	movi	r17,103
 4042830:	003e2106 	br	40420b8 <__alt_data_end+0xfffd78b8>
 4042834:	d9002917 	ldw	r4,164(sp)
 4042838:	d8802104 	addi	r2,sp,132
 404283c:	d8800315 	stw	r2,12(sp)
 4042840:	d9000015 	stw	r4,0(sp)
 4042844:	d8802504 	addi	r2,sp,148
 4042848:	d9403617 	ldw	r5,216(sp)
 404284c:	d9002c17 	ldw	r4,176(sp)
 4042850:	d8800215 	stw	r2,8(sp)
 4042854:	d8802604 	addi	r2,sp,152
 4042858:	d8800115 	stw	r2,4(sp)
 404285c:	01c000c4 	movi	r7,3
 4042860:	980d883a 	mov	r6,r19
 4042864:	da003d15 	stw	r8,244(sp)
 4042868:	4042f080 	call	4042f08 <_dtoa_r>
 404286c:	d8c02917 	ldw	r3,164(sp)
 4042870:	da003d17 	ldw	r8,244(sp)
 4042874:	1021883a 	mov	r16,r2
 4042878:	00801184 	movi	r2,70
 404287c:	80f9883a 	add	fp,r16,r3
 4042880:	88bfd926 	beq	r17,r2,40427e8 <__alt_data_end+0xfffd7fe8>
 4042884:	003de806 	br	4042028 <__alt_data_end+0xfffd7828>
 4042888:	d9002917 	ldw	r4,164(sp)
 404288c:	00c04d0e 	bge	zero,r3,40429c4 <___vfprintf_internal_r+0x20e0>
 4042890:	2000441e 	bne	r4,zero,40429a4 <___vfprintf_internal_r+0x20c0>
 4042894:	9480004c 	andi	r18,r18,1
 4042898:	9000421e 	bne	r18,zero,40429a4 <___vfprintf_internal_r+0x20c0>
 404289c:	1805883a 	mov	r2,r3
 40428a0:	18007016 	blt	r3,zero,4042a64 <___vfprintf_internal_r+0x2180>
 40428a4:	d8c03217 	ldw	r3,200(sp)
 40428a8:	d8c02e15 	stw	r3,184(sp)
 40428ac:	003e0206 	br	40420b8 <__alt_data_end+0xfffd78b8>
 40428b0:	df0022c4 	addi	fp,sp,139
 40428b4:	dc002915 	stw	r16,164(sp)
 40428b8:	4027883a 	mov	r19,r8
 40428bc:	e021883a 	mov	r16,fp
 40428c0:	b009883a 	mov	r4,r22
 40428c4:	01400284 	movi	r5,10
 40428c8:	404a8940 	call	404a894 <__modsi3>
 40428cc:	10800c04 	addi	r2,r2,48
 40428d0:	843fffc4 	addi	r16,r16,-1
 40428d4:	b009883a 	mov	r4,r22
 40428d8:	01400284 	movi	r5,10
 40428dc:	80800005 	stb	r2,0(r16)
 40428e0:	404a8100 	call	404a810 <__divsi3>
 40428e4:	102d883a 	mov	r22,r2
 40428e8:	00800244 	movi	r2,9
 40428ec:	15bff416 	blt	r2,r22,40428c0 <__alt_data_end+0xfffd80c0>
 40428f0:	9811883a 	mov	r8,r19
 40428f4:	b0800c04 	addi	r2,r22,48
 40428f8:	8027883a 	mov	r19,r16
 40428fc:	997fffc4 	addi	r5,r19,-1
 4042900:	98bfffc5 	stb	r2,-1(r19)
 4042904:	dc002917 	ldw	r16,164(sp)
 4042908:	2f006a2e 	bgeu	r5,fp,4042ab4 <___vfprintf_internal_r+0x21d0>
 404290c:	d9c02384 	addi	r7,sp,142
 4042910:	3ccfc83a 	sub	r7,r7,r19
 4042914:	d9002344 	addi	r4,sp,141
 4042918:	e1cf883a 	add	r7,fp,r7
 404291c:	00000106 	br	4042924 <___vfprintf_internal_r+0x2040>
 4042920:	28800003 	ldbu	r2,0(r5)
 4042924:	20800005 	stb	r2,0(r4)
 4042928:	21000044 	addi	r4,r4,1
 404292c:	29400044 	addi	r5,r5,1
 4042930:	393ffb1e 	bne	r7,r4,4042920 <__alt_data_end+0xfffd8120>
 4042934:	d8802304 	addi	r2,sp,140
 4042938:	14c5c83a 	sub	r2,r2,r19
 404293c:	d8c02344 	addi	r3,sp,141
 4042940:	1885883a 	add	r2,r3,r2
 4042944:	003f7006 	br	4042708 <__alt_data_end+0xfffd7f08>
 4042948:	0005883a 	mov	r2,zero
 404294c:	003f0f06 	br	404258c <__alt_data_end+0xfffd7d8c>
 4042950:	d8c03217 	ldw	r3,200(sp)
 4042954:	18c00044 	addi	r3,r3,1
 4042958:	d8c02e15 	stw	r3,184(sp)
 404295c:	1805883a 	mov	r2,r3
 4042960:	183fb20e 	bge	r3,zero,404282c <__alt_data_end+0xfffd802c>
 4042964:	0005883a 	mov	r2,zero
 4042968:	003fb006 	br	404282c <__alt_data_end+0xfffd802c>
 404296c:	d9003617 	ldw	r4,216(sp)
 4042970:	000d883a 	mov	r6,zero
 4042974:	000f883a 	mov	r7,zero
 4042978:	980b883a 	mov	r5,r19
 404297c:	d8c03c15 	stw	r3,240(sp)
 4042980:	da003d15 	stw	r8,244(sp)
 4042984:	404bb580 	call	404bb58 <__eqdf2>
 4042988:	d8c03c17 	ldw	r3,240(sp)
 404298c:	da003d17 	ldw	r8,244(sp)
 4042990:	103f9826 	beq	r2,zero,40427f4 <__alt_data_end+0xfffd7ff4>
 4042994:	00800044 	movi	r2,1
 4042998:	10c7c83a 	sub	r3,r2,r3
 404299c:	d8c02615 	stw	r3,152(sp)
 40429a0:	003f9506 	br	40427f8 <__alt_data_end+0xfffd7ff8>
 40429a4:	d9002917 	ldw	r4,164(sp)
 40429a8:	d8c03217 	ldw	r3,200(sp)
 40429ac:	20800044 	addi	r2,r4,1
 40429b0:	1885883a 	add	r2,r3,r2
 40429b4:	d8802e15 	stw	r2,184(sp)
 40429b8:	103dbf0e 	bge	r2,zero,40420b8 <__alt_data_end+0xfffd78b8>
 40429bc:	0005883a 	mov	r2,zero
 40429c0:	003dbd06 	br	40420b8 <__alt_data_end+0xfffd78b8>
 40429c4:	2000211e 	bne	r4,zero,4042a4c <___vfprintf_internal_r+0x2168>
 40429c8:	9480004c 	andi	r18,r18,1
 40429cc:	90001f1e 	bne	r18,zero,4042a4c <___vfprintf_internal_r+0x2168>
 40429d0:	00800044 	movi	r2,1
 40429d4:	d8802e15 	stw	r2,184(sp)
 40429d8:	003db706 	br	40420b8 <__alt_data_end+0xfffd78b8>
 40429dc:	00800b44 	movi	r2,45
 40429e0:	05adc83a 	sub	r22,zero,r22
 40429e4:	d8802305 	stb	r2,140(sp)
 40429e8:	003f3f06 	br	40426e8 <__alt_data_end+0xfffd7ee8>
 40429ec:	0005883a 	mov	r2,zero
 40429f0:	003f5206 	br	404273c <__alt_data_end+0xfffd7f3c>
 40429f4:	90a4703a 	and	r18,r18,r2
 40429f8:	903f4e26 	beq	r18,zero,4042734 <__alt_data_end+0xfffd7f34>
 40429fc:	003f4a06 	br	4042728 <__alt_data_end+0xfffd7f28>
 4042a00:	00800084 	movi	r2,2
 4042a04:	10c5c83a 	sub	r2,r2,r3
 4042a08:	003f8406 	br	404281c <__alt_data_end+0xfffd801c>
 4042a0c:	d8802d17 	ldw	r2,180(sp)
 4042a10:	d9002d17 	ldw	r4,180(sp)
 4042a14:	ac400043 	ldbu	r17,1(r21)
 4042a18:	10800017 	ldw	r2,0(r2)
 4042a1c:	582b883a 	mov	r21,r11
 4042a20:	d8802915 	stw	r2,164(sp)
 4042a24:	20800104 	addi	r2,r4,4
 4042a28:	d9002917 	ldw	r4,164(sp)
 4042a2c:	d8802d15 	stw	r2,180(sp)
 4042a30:	203e7a0e 	bge	r4,zero,404241c <__alt_data_end+0xfffd7c1c>
 4042a34:	8c403fcc 	andi	r17,r17,255
 4042a38:	00bfffc4 	movi	r2,-1
 4042a3c:	8c40201c 	xori	r17,r17,128
 4042a40:	d8802915 	stw	r2,164(sp)
 4042a44:	8c7fe004 	addi	r17,r17,-128
 4042a48:	00380706 	br	4040a68 <__alt_data_end+0xfffd6268>
 4042a4c:	d8c02917 	ldw	r3,164(sp)
 4042a50:	18c00084 	addi	r3,r3,2
 4042a54:	d8c02e15 	stw	r3,184(sp)
 4042a58:	1805883a 	mov	r2,r3
 4042a5c:	183d960e 	bge	r3,zero,40420b8 <__alt_data_end+0xfffd78b8>
 4042a60:	003fd606 	br	40429bc <__alt_data_end+0xfffd81bc>
 4042a64:	0005883a 	mov	r2,zero
 4042a68:	003f8e06 	br	40428a4 <__alt_data_end+0xfffd80a4>
 4042a6c:	9080004c 	andi	r2,r18,1
 4042a70:	103f811e 	bne	r2,zero,4042878 <__alt_data_end+0xfffd8078>
 4042a74:	d8802117 	ldw	r2,132(sp)
 4042a78:	1405c83a 	sub	r2,r2,r16
 4042a7c:	d8803315 	stw	r2,204(sp)
 4042a80:	b47ef326 	beq	r22,r17,4042650 <__alt_data_end+0xfffd7e50>
 4042a84:	dd802617 	ldw	r22,152(sp)
 4042a88:	003f1106 	br	40426d0 <__alt_data_end+0xfffd7ed0>
 4042a8c:	d9c02785 	stb	r7,158(sp)
 4042a90:	00390406 	br	4040ea4 <__alt_data_end+0xfffd66a4>
 4042a94:	d9c02785 	stb	r7,158(sp)
 4042a98:	0038d306 	br	4040de8 <__alt_data_end+0xfffd65e8>
 4042a9c:	d9c02785 	stb	r7,158(sp)
 4042aa0:	003a6106 	br	4041428 <__alt_data_end+0xfffd6c28>
 4042aa4:	d9c02785 	stb	r7,158(sp)
 4042aa8:	003af806 	br	404168c <__alt_data_end+0xfffd6e8c>
 4042aac:	0005883a 	mov	r2,zero
 4042ab0:	003d7e06 	br	40420ac <__alt_data_end+0xfffd78ac>
 4042ab4:	d8802344 	addi	r2,sp,141
 4042ab8:	003f1306 	br	4042708 <__alt_data_end+0xfffd7f08>
 4042abc:	d9c02785 	stb	r7,158(sp)
 4042ac0:	00392306 	br	4040f50 <__alt_data_end+0xfffd6750>
 4042ac4:	d9c02785 	stb	r7,158(sp)
 4042ac8:	003aa906 	br	4041570 <__alt_data_end+0xfffd6d70>
 4042acc:	d9c02785 	stb	r7,158(sp)
 4042ad0:	003a3d06 	br	40413c8 <__alt_data_end+0xfffd6bc8>
 4042ad4:	d9c02785 	stb	r7,158(sp)
 4042ad8:	003aca06 	br	4041604 <__alt_data_end+0xfffd6e04>

04042adc <__vfprintf_internal>:
 4042adc:	00810174 	movhi	r2,1029
 4042ae0:	10885104 	addi	r2,r2,8516
 4042ae4:	300f883a 	mov	r7,r6
 4042ae8:	280d883a 	mov	r6,r5
 4042aec:	200b883a 	mov	r5,r4
 4042af0:	11000017 	ldw	r4,0(r2)
 4042af4:	40408e41 	jmpi	40408e4 <___vfprintf_internal_r>

04042af8 <__sbprintf>:
 4042af8:	2880030b 	ldhu	r2,12(r5)
 4042afc:	2ac01917 	ldw	r11,100(r5)
 4042b00:	2a80038b 	ldhu	r10,14(r5)
 4042b04:	2a400717 	ldw	r9,28(r5)
 4042b08:	2a000917 	ldw	r8,36(r5)
 4042b0c:	defee204 	addi	sp,sp,-1144
 4042b10:	00c10004 	movi	r3,1024
 4042b14:	dc011a15 	stw	r16,1128(sp)
 4042b18:	10bfff4c 	andi	r2,r2,65533
 4042b1c:	2821883a 	mov	r16,r5
 4042b20:	d8cb883a 	add	r5,sp,r3
 4042b24:	dc811c15 	stw	r18,1136(sp)
 4042b28:	dc411b15 	stw	r17,1132(sp)
 4042b2c:	dfc11d15 	stw	ra,1140(sp)
 4042b30:	2025883a 	mov	r18,r4
 4042b34:	d881030d 	sth	r2,1036(sp)
 4042b38:	dac11915 	stw	r11,1124(sp)
 4042b3c:	da81038d 	sth	r10,1038(sp)
 4042b40:	da410715 	stw	r9,1052(sp)
 4042b44:	da010915 	stw	r8,1060(sp)
 4042b48:	dec10015 	stw	sp,1024(sp)
 4042b4c:	dec10415 	stw	sp,1040(sp)
 4042b50:	d8c10215 	stw	r3,1032(sp)
 4042b54:	d8c10515 	stw	r3,1044(sp)
 4042b58:	d8010615 	stw	zero,1048(sp)
 4042b5c:	40408e40 	call	40408e4 <___vfprintf_internal_r>
 4042b60:	1023883a 	mov	r17,r2
 4042b64:	10000416 	blt	r2,zero,4042b78 <__sbprintf+0x80>
 4042b68:	d9410004 	addi	r5,sp,1024
 4042b6c:	9009883a 	mov	r4,r18
 4042b70:	40447ac0 	call	40447ac <_fflush_r>
 4042b74:	10000d1e 	bne	r2,zero,4042bac <__sbprintf+0xb4>
 4042b78:	d881030b 	ldhu	r2,1036(sp)
 4042b7c:	1080100c 	andi	r2,r2,64
 4042b80:	10000326 	beq	r2,zero,4042b90 <__sbprintf+0x98>
 4042b84:	8080030b 	ldhu	r2,12(r16)
 4042b88:	10801014 	ori	r2,r2,64
 4042b8c:	8080030d 	sth	r2,12(r16)
 4042b90:	8805883a 	mov	r2,r17
 4042b94:	dfc11d17 	ldw	ra,1140(sp)
 4042b98:	dc811c17 	ldw	r18,1136(sp)
 4042b9c:	dc411b17 	ldw	r17,1132(sp)
 4042ba0:	dc011a17 	ldw	r16,1128(sp)
 4042ba4:	dec11e04 	addi	sp,sp,1144
 4042ba8:	f800283a 	ret
 4042bac:	047fffc4 	movi	r17,-1
 4042bb0:	003ff106 	br	4042b78 <__alt_data_end+0xfffd8378>

04042bb4 <__swsetup_r>:
 4042bb4:	00810174 	movhi	r2,1029
 4042bb8:	defffd04 	addi	sp,sp,-12
 4042bbc:	10885104 	addi	r2,r2,8516
 4042bc0:	dc400115 	stw	r17,4(sp)
 4042bc4:	2023883a 	mov	r17,r4
 4042bc8:	11000017 	ldw	r4,0(r2)
 4042bcc:	dc000015 	stw	r16,0(sp)
 4042bd0:	dfc00215 	stw	ra,8(sp)
 4042bd4:	2821883a 	mov	r16,r5
 4042bd8:	20000226 	beq	r4,zero,4042be4 <__swsetup_r+0x30>
 4042bdc:	20800e17 	ldw	r2,56(r4)
 4042be0:	10003126 	beq	r2,zero,4042ca8 <__swsetup_r+0xf4>
 4042be4:	8080030b 	ldhu	r2,12(r16)
 4042be8:	10c0020c 	andi	r3,r2,8
 4042bec:	1009883a 	mov	r4,r2
 4042bf0:	18000f26 	beq	r3,zero,4042c30 <__swsetup_r+0x7c>
 4042bf4:	80c00417 	ldw	r3,16(r16)
 4042bf8:	18001526 	beq	r3,zero,4042c50 <__swsetup_r+0x9c>
 4042bfc:	1100004c 	andi	r4,r2,1
 4042c00:	20001c1e 	bne	r4,zero,4042c74 <__swsetup_r+0xc0>
 4042c04:	1080008c 	andi	r2,r2,2
 4042c08:	1000291e 	bne	r2,zero,4042cb0 <__swsetup_r+0xfc>
 4042c0c:	80800517 	ldw	r2,20(r16)
 4042c10:	80800215 	stw	r2,8(r16)
 4042c14:	18001c26 	beq	r3,zero,4042c88 <__swsetup_r+0xd4>
 4042c18:	0005883a 	mov	r2,zero
 4042c1c:	dfc00217 	ldw	ra,8(sp)
 4042c20:	dc400117 	ldw	r17,4(sp)
 4042c24:	dc000017 	ldw	r16,0(sp)
 4042c28:	dec00304 	addi	sp,sp,12
 4042c2c:	f800283a 	ret
 4042c30:	2080040c 	andi	r2,r4,16
 4042c34:	10002e26 	beq	r2,zero,4042cf0 <__swsetup_r+0x13c>
 4042c38:	2080010c 	andi	r2,r4,4
 4042c3c:	10001e1e 	bne	r2,zero,4042cb8 <__swsetup_r+0x104>
 4042c40:	80c00417 	ldw	r3,16(r16)
 4042c44:	20800214 	ori	r2,r4,8
 4042c48:	8080030d 	sth	r2,12(r16)
 4042c4c:	183feb1e 	bne	r3,zero,4042bfc <__alt_data_end+0xfffd83fc>
 4042c50:	1100a00c 	andi	r4,r2,640
 4042c54:	01408004 	movi	r5,512
 4042c58:	217fe826 	beq	r4,r5,4042bfc <__alt_data_end+0xfffd83fc>
 4042c5c:	800b883a 	mov	r5,r16
 4042c60:	8809883a 	mov	r4,r17
 4042c64:	404572c0 	call	404572c <__smakebuf_r>
 4042c68:	8080030b 	ldhu	r2,12(r16)
 4042c6c:	80c00417 	ldw	r3,16(r16)
 4042c70:	003fe206 	br	4042bfc <__alt_data_end+0xfffd83fc>
 4042c74:	80800517 	ldw	r2,20(r16)
 4042c78:	80000215 	stw	zero,8(r16)
 4042c7c:	0085c83a 	sub	r2,zero,r2
 4042c80:	80800615 	stw	r2,24(r16)
 4042c84:	183fe41e 	bne	r3,zero,4042c18 <__alt_data_end+0xfffd8418>
 4042c88:	80c0030b 	ldhu	r3,12(r16)
 4042c8c:	0005883a 	mov	r2,zero
 4042c90:	1900200c 	andi	r4,r3,128
 4042c94:	203fe126 	beq	r4,zero,4042c1c <__alt_data_end+0xfffd841c>
 4042c98:	18c01014 	ori	r3,r3,64
 4042c9c:	80c0030d 	sth	r3,12(r16)
 4042ca0:	00bfffc4 	movi	r2,-1
 4042ca4:	003fdd06 	br	4042c1c <__alt_data_end+0xfffd841c>
 4042ca8:	4044b880 	call	4044b88 <__sinit>
 4042cac:	003fcd06 	br	4042be4 <__alt_data_end+0xfffd83e4>
 4042cb0:	0005883a 	mov	r2,zero
 4042cb4:	003fd606 	br	4042c10 <__alt_data_end+0xfffd8410>
 4042cb8:	81400c17 	ldw	r5,48(r16)
 4042cbc:	28000626 	beq	r5,zero,4042cd8 <__swsetup_r+0x124>
 4042cc0:	80801004 	addi	r2,r16,64
 4042cc4:	28800326 	beq	r5,r2,4042cd4 <__swsetup_r+0x120>
 4042cc8:	8809883a 	mov	r4,r17
 4042ccc:	4044cfc0 	call	4044cfc <_free_r>
 4042cd0:	8100030b 	ldhu	r4,12(r16)
 4042cd4:	80000c15 	stw	zero,48(r16)
 4042cd8:	80c00417 	ldw	r3,16(r16)
 4042cdc:	00bff6c4 	movi	r2,-37
 4042ce0:	1108703a 	and	r4,r2,r4
 4042ce4:	80000115 	stw	zero,4(r16)
 4042ce8:	80c00015 	stw	r3,0(r16)
 4042cec:	003fd506 	br	4042c44 <__alt_data_end+0xfffd8444>
 4042cf0:	00800244 	movi	r2,9
 4042cf4:	88800015 	stw	r2,0(r17)
 4042cf8:	20801014 	ori	r2,r4,64
 4042cfc:	8080030d 	sth	r2,12(r16)
 4042d00:	00bfffc4 	movi	r2,-1
 4042d04:	003fc506 	br	4042c1c <__alt_data_end+0xfffd841c>

04042d08 <quorem>:
 4042d08:	defff704 	addi	sp,sp,-36
 4042d0c:	dc800215 	stw	r18,8(sp)
 4042d10:	20800417 	ldw	r2,16(r4)
 4042d14:	2c800417 	ldw	r18,16(r5)
 4042d18:	dfc00815 	stw	ra,32(sp)
 4042d1c:	ddc00715 	stw	r23,28(sp)
 4042d20:	dd800615 	stw	r22,24(sp)
 4042d24:	dd400515 	stw	r21,20(sp)
 4042d28:	dd000415 	stw	r20,16(sp)
 4042d2c:	dcc00315 	stw	r19,12(sp)
 4042d30:	dc400115 	stw	r17,4(sp)
 4042d34:	dc000015 	stw	r16,0(sp)
 4042d38:	14807116 	blt	r2,r18,4042f00 <quorem+0x1f8>
 4042d3c:	94bfffc4 	addi	r18,r18,-1
 4042d40:	94ad883a 	add	r22,r18,r18
 4042d44:	b5ad883a 	add	r22,r22,r22
 4042d48:	2c400504 	addi	r17,r5,20
 4042d4c:	8da9883a 	add	r20,r17,r22
 4042d50:	25400504 	addi	r21,r4,20
 4042d54:	282f883a 	mov	r23,r5
 4042d58:	adad883a 	add	r22,r21,r22
 4042d5c:	a1400017 	ldw	r5,0(r20)
 4042d60:	2021883a 	mov	r16,r4
 4042d64:	b1000017 	ldw	r4,0(r22)
 4042d68:	29400044 	addi	r5,r5,1
 4042d6c:	404a9080 	call	404a908 <__udivsi3>
 4042d70:	1027883a 	mov	r19,r2
 4042d74:	10002c26 	beq	r2,zero,4042e28 <quorem+0x120>
 4042d78:	a813883a 	mov	r9,r21
 4042d7c:	880b883a 	mov	r5,r17
 4042d80:	0009883a 	mov	r4,zero
 4042d84:	000d883a 	mov	r6,zero
 4042d88:	2a000017 	ldw	r8,0(r5)
 4042d8c:	49c00017 	ldw	r7,0(r9)
 4042d90:	29400104 	addi	r5,r5,4
 4042d94:	40bfffcc 	andi	r2,r8,65535
 4042d98:	14c5383a 	mul	r2,r2,r19
 4042d9c:	4010d43a 	srli	r8,r8,16
 4042da0:	38ffffcc 	andi	r3,r7,65535
 4042da4:	1105883a 	add	r2,r2,r4
 4042da8:	1008d43a 	srli	r4,r2,16
 4042dac:	44d1383a 	mul	r8,r8,r19
 4042db0:	198d883a 	add	r6,r3,r6
 4042db4:	10ffffcc 	andi	r3,r2,65535
 4042db8:	30c7c83a 	sub	r3,r6,r3
 4042dbc:	380ed43a 	srli	r7,r7,16
 4042dc0:	4105883a 	add	r2,r8,r4
 4042dc4:	180dd43a 	srai	r6,r3,16
 4042dc8:	113fffcc 	andi	r4,r2,65535
 4042dcc:	390fc83a 	sub	r7,r7,r4
 4042dd0:	398d883a 	add	r6,r7,r6
 4042dd4:	300e943a 	slli	r7,r6,16
 4042dd8:	18ffffcc 	andi	r3,r3,65535
 4042ddc:	1008d43a 	srli	r4,r2,16
 4042de0:	38ceb03a 	or	r7,r7,r3
 4042de4:	49c00015 	stw	r7,0(r9)
 4042de8:	300dd43a 	srai	r6,r6,16
 4042dec:	4a400104 	addi	r9,r9,4
 4042df0:	a17fe52e 	bgeu	r20,r5,4042d88 <__alt_data_end+0xfffd8588>
 4042df4:	b0800017 	ldw	r2,0(r22)
 4042df8:	10000b1e 	bne	r2,zero,4042e28 <quorem+0x120>
 4042dfc:	b0bfff04 	addi	r2,r22,-4
 4042e00:	a880082e 	bgeu	r21,r2,4042e24 <quorem+0x11c>
 4042e04:	b0ffff17 	ldw	r3,-4(r22)
 4042e08:	18000326 	beq	r3,zero,4042e18 <quorem+0x110>
 4042e0c:	00000506 	br	4042e24 <quorem+0x11c>
 4042e10:	10c00017 	ldw	r3,0(r2)
 4042e14:	1800031e 	bne	r3,zero,4042e24 <quorem+0x11c>
 4042e18:	10bfff04 	addi	r2,r2,-4
 4042e1c:	94bfffc4 	addi	r18,r18,-1
 4042e20:	a8bffb36 	bltu	r21,r2,4042e10 <__alt_data_end+0xfffd8610>
 4042e24:	84800415 	stw	r18,16(r16)
 4042e28:	b80b883a 	mov	r5,r23
 4042e2c:	8009883a 	mov	r4,r16
 4042e30:	4046e6c0 	call	4046e6c <__mcmp>
 4042e34:	10002616 	blt	r2,zero,4042ed0 <quorem+0x1c8>
 4042e38:	9cc00044 	addi	r19,r19,1
 4042e3c:	a805883a 	mov	r2,r21
 4042e40:	000b883a 	mov	r5,zero
 4042e44:	11000017 	ldw	r4,0(r2)
 4042e48:	89800017 	ldw	r6,0(r17)
 4042e4c:	10800104 	addi	r2,r2,4
 4042e50:	20ffffcc 	andi	r3,r4,65535
 4042e54:	194b883a 	add	r5,r3,r5
 4042e58:	30ffffcc 	andi	r3,r6,65535
 4042e5c:	28c7c83a 	sub	r3,r5,r3
 4042e60:	300cd43a 	srli	r6,r6,16
 4042e64:	2008d43a 	srli	r4,r4,16
 4042e68:	180bd43a 	srai	r5,r3,16
 4042e6c:	18ffffcc 	andi	r3,r3,65535
 4042e70:	2189c83a 	sub	r4,r4,r6
 4042e74:	2149883a 	add	r4,r4,r5
 4042e78:	200c943a 	slli	r6,r4,16
 4042e7c:	8c400104 	addi	r17,r17,4
 4042e80:	200bd43a 	srai	r5,r4,16
 4042e84:	30c6b03a 	or	r3,r6,r3
 4042e88:	10ffff15 	stw	r3,-4(r2)
 4042e8c:	a47fed2e 	bgeu	r20,r17,4042e44 <__alt_data_end+0xfffd8644>
 4042e90:	9485883a 	add	r2,r18,r18
 4042e94:	1085883a 	add	r2,r2,r2
 4042e98:	a887883a 	add	r3,r21,r2
 4042e9c:	18800017 	ldw	r2,0(r3)
 4042ea0:	10000b1e 	bne	r2,zero,4042ed0 <quorem+0x1c8>
 4042ea4:	18bfff04 	addi	r2,r3,-4
 4042ea8:	a880082e 	bgeu	r21,r2,4042ecc <quorem+0x1c4>
 4042eac:	18ffff17 	ldw	r3,-4(r3)
 4042eb0:	18000326 	beq	r3,zero,4042ec0 <quorem+0x1b8>
 4042eb4:	00000506 	br	4042ecc <quorem+0x1c4>
 4042eb8:	10c00017 	ldw	r3,0(r2)
 4042ebc:	1800031e 	bne	r3,zero,4042ecc <quorem+0x1c4>
 4042ec0:	10bfff04 	addi	r2,r2,-4
 4042ec4:	94bfffc4 	addi	r18,r18,-1
 4042ec8:	a8bffb36 	bltu	r21,r2,4042eb8 <__alt_data_end+0xfffd86b8>
 4042ecc:	84800415 	stw	r18,16(r16)
 4042ed0:	9805883a 	mov	r2,r19
 4042ed4:	dfc00817 	ldw	ra,32(sp)
 4042ed8:	ddc00717 	ldw	r23,28(sp)
 4042edc:	dd800617 	ldw	r22,24(sp)
 4042ee0:	dd400517 	ldw	r21,20(sp)
 4042ee4:	dd000417 	ldw	r20,16(sp)
 4042ee8:	dcc00317 	ldw	r19,12(sp)
 4042eec:	dc800217 	ldw	r18,8(sp)
 4042ef0:	dc400117 	ldw	r17,4(sp)
 4042ef4:	dc000017 	ldw	r16,0(sp)
 4042ef8:	dec00904 	addi	sp,sp,36
 4042efc:	f800283a 	ret
 4042f00:	0005883a 	mov	r2,zero
 4042f04:	003ff306 	br	4042ed4 <__alt_data_end+0xfffd86d4>

04042f08 <_dtoa_r>:
 4042f08:	20801017 	ldw	r2,64(r4)
 4042f0c:	deffde04 	addi	sp,sp,-136
 4042f10:	df002015 	stw	fp,128(sp)
 4042f14:	dcc01b15 	stw	r19,108(sp)
 4042f18:	dc801a15 	stw	r18,104(sp)
 4042f1c:	dc401915 	stw	r17,100(sp)
 4042f20:	dc001815 	stw	r16,96(sp)
 4042f24:	dfc02115 	stw	ra,132(sp)
 4042f28:	ddc01f15 	stw	r23,124(sp)
 4042f2c:	dd801e15 	stw	r22,120(sp)
 4042f30:	dd401d15 	stw	r21,116(sp)
 4042f34:	dd001c15 	stw	r20,112(sp)
 4042f38:	d9c00315 	stw	r7,12(sp)
 4042f3c:	2039883a 	mov	fp,r4
 4042f40:	3023883a 	mov	r17,r6
 4042f44:	2825883a 	mov	r18,r5
 4042f48:	dc002417 	ldw	r16,144(sp)
 4042f4c:	3027883a 	mov	r19,r6
 4042f50:	10000826 	beq	r2,zero,4042f74 <_dtoa_r+0x6c>
 4042f54:	21801117 	ldw	r6,68(r4)
 4042f58:	00c00044 	movi	r3,1
 4042f5c:	100b883a 	mov	r5,r2
 4042f60:	1986983a 	sll	r3,r3,r6
 4042f64:	11800115 	stw	r6,4(r2)
 4042f68:	10c00215 	stw	r3,8(r2)
 4042f6c:	404664c0 	call	404664c <_Bfree>
 4042f70:	e0001015 	stw	zero,64(fp)
 4042f74:	88002e16 	blt	r17,zero,4043030 <_dtoa_r+0x128>
 4042f78:	80000015 	stw	zero,0(r16)
 4042f7c:	889ffc2c 	andhi	r2,r17,32752
 4042f80:	00dffc34 	movhi	r3,32752
 4042f84:	10c01c26 	beq	r2,r3,4042ff8 <_dtoa_r+0xf0>
 4042f88:	000d883a 	mov	r6,zero
 4042f8c:	000f883a 	mov	r7,zero
 4042f90:	9009883a 	mov	r4,r18
 4042f94:	980b883a 	mov	r5,r19
 4042f98:	404bb580 	call	404bb58 <__eqdf2>
 4042f9c:	10002b1e 	bne	r2,zero,404304c <_dtoa_r+0x144>
 4042fa0:	d9c02317 	ldw	r7,140(sp)
 4042fa4:	00800044 	movi	r2,1
 4042fa8:	38800015 	stw	r2,0(r7)
 4042fac:	d8802517 	ldw	r2,148(sp)
 4042fb0:	10019e26 	beq	r2,zero,404362c <_dtoa_r+0x724>
 4042fb4:	d8c02517 	ldw	r3,148(sp)
 4042fb8:	00810174 	movhi	r2,1029
 4042fbc:	1080c044 	addi	r2,r2,769
 4042fc0:	18800015 	stw	r2,0(r3)
 4042fc4:	10bfffc4 	addi	r2,r2,-1
 4042fc8:	dfc02117 	ldw	ra,132(sp)
 4042fcc:	df002017 	ldw	fp,128(sp)
 4042fd0:	ddc01f17 	ldw	r23,124(sp)
 4042fd4:	dd801e17 	ldw	r22,120(sp)
 4042fd8:	dd401d17 	ldw	r21,116(sp)
 4042fdc:	dd001c17 	ldw	r20,112(sp)
 4042fe0:	dcc01b17 	ldw	r19,108(sp)
 4042fe4:	dc801a17 	ldw	r18,104(sp)
 4042fe8:	dc401917 	ldw	r17,100(sp)
 4042fec:	dc001817 	ldw	r16,96(sp)
 4042ff0:	dec02204 	addi	sp,sp,136
 4042ff4:	f800283a 	ret
 4042ff8:	d8c02317 	ldw	r3,140(sp)
 4042ffc:	0089c3c4 	movi	r2,9999
 4043000:	18800015 	stw	r2,0(r3)
 4043004:	90017726 	beq	r18,zero,40435e4 <_dtoa_r+0x6dc>
 4043008:	00810174 	movhi	r2,1029
 404300c:	1080cc04 	addi	r2,r2,816
 4043010:	d9002517 	ldw	r4,148(sp)
 4043014:	203fec26 	beq	r4,zero,4042fc8 <__alt_data_end+0xfffd87c8>
 4043018:	10c000c7 	ldb	r3,3(r2)
 404301c:	1801781e 	bne	r3,zero,4043600 <_dtoa_r+0x6f8>
 4043020:	10c000c4 	addi	r3,r2,3
 4043024:	d9802517 	ldw	r6,148(sp)
 4043028:	30c00015 	stw	r3,0(r6)
 404302c:	003fe606 	br	4042fc8 <__alt_data_end+0xfffd87c8>
 4043030:	04e00034 	movhi	r19,32768
 4043034:	9cffffc4 	addi	r19,r19,-1
 4043038:	00800044 	movi	r2,1
 404303c:	8ce6703a 	and	r19,r17,r19
 4043040:	80800015 	stw	r2,0(r16)
 4043044:	9823883a 	mov	r17,r19
 4043048:	003fcc06 	br	4042f7c <__alt_data_end+0xfffd877c>
 404304c:	d8800204 	addi	r2,sp,8
 4043050:	d8800015 	stw	r2,0(sp)
 4043054:	d9c00104 	addi	r7,sp,4
 4043058:	900b883a 	mov	r5,r18
 404305c:	980d883a 	mov	r6,r19
 4043060:	e009883a 	mov	r4,fp
 4043064:	8820d53a 	srli	r16,r17,20
 4043068:	40472380 	call	4047238 <__d2b>
 404306c:	d8800915 	stw	r2,36(sp)
 4043070:	8001651e 	bne	r16,zero,4043608 <_dtoa_r+0x700>
 4043074:	dd800217 	ldw	r22,8(sp)
 4043078:	dc000117 	ldw	r16,4(sp)
 404307c:	00800804 	movi	r2,32
 4043080:	b421883a 	add	r16,r22,r16
 4043084:	80c10c84 	addi	r3,r16,1074
 4043088:	10c2d10e 	bge	r2,r3,4043bd0 <_dtoa_r+0xcc8>
 404308c:	00801004 	movi	r2,64
 4043090:	81010484 	addi	r4,r16,1042
 4043094:	10c7c83a 	sub	r3,r2,r3
 4043098:	9108d83a 	srl	r4,r18,r4
 404309c:	88e2983a 	sll	r17,r17,r3
 40430a0:	2448b03a 	or	r4,r4,r17
 40430a4:	404cf200 	call	404cf20 <__floatunsidf>
 40430a8:	017f8434 	movhi	r5,65040
 40430ac:	01800044 	movi	r6,1
 40430b0:	1009883a 	mov	r4,r2
 40430b4:	194b883a 	add	r5,r3,r5
 40430b8:	843fffc4 	addi	r16,r16,-1
 40430bc:	d9801115 	stw	r6,68(sp)
 40430c0:	000d883a 	mov	r6,zero
 40430c4:	01cffe34 	movhi	r7,16376
 40430c8:	404c4c80 	call	404c4c8 <__subdf3>
 40430cc:	0198dbf4 	movhi	r6,25455
 40430d0:	01cff4f4 	movhi	r7,16339
 40430d4:	3190d844 	addi	r6,r6,17249
 40430d8:	39e1e9c4 	addi	r7,r7,-30809
 40430dc:	1009883a 	mov	r4,r2
 40430e0:	180b883a 	mov	r5,r3
 40430e4:	404bdb00 	call	404bdb0 <__muldf3>
 40430e8:	01a2d874 	movhi	r6,35681
 40430ec:	01cff1f4 	movhi	r7,16327
 40430f0:	31b22cc4 	addi	r6,r6,-14157
 40430f4:	39e28a04 	addi	r7,r7,-30168
 40430f8:	180b883a 	mov	r5,r3
 40430fc:	1009883a 	mov	r4,r2
 4043100:	404a9c40 	call	404a9c4 <__adddf3>
 4043104:	8009883a 	mov	r4,r16
 4043108:	1029883a 	mov	r20,r2
 404310c:	1823883a 	mov	r17,r3
 4043110:	404ce440 	call	404ce44 <__floatsidf>
 4043114:	019427f4 	movhi	r6,20639
 4043118:	01cff4f4 	movhi	r7,16339
 404311c:	319e7ec4 	addi	r6,r6,31227
 4043120:	39d104c4 	addi	r7,r7,17427
 4043124:	1009883a 	mov	r4,r2
 4043128:	180b883a 	mov	r5,r3
 404312c:	404bdb00 	call	404bdb0 <__muldf3>
 4043130:	100d883a 	mov	r6,r2
 4043134:	180f883a 	mov	r7,r3
 4043138:	a009883a 	mov	r4,r20
 404313c:	880b883a 	mov	r5,r17
 4043140:	404a9c40 	call	404a9c4 <__adddf3>
 4043144:	1009883a 	mov	r4,r2
 4043148:	180b883a 	mov	r5,r3
 404314c:	1029883a 	mov	r20,r2
 4043150:	1823883a 	mov	r17,r3
 4043154:	404cdc40 	call	404cdc4 <__fixdfsi>
 4043158:	000d883a 	mov	r6,zero
 404315c:	000f883a 	mov	r7,zero
 4043160:	a009883a 	mov	r4,r20
 4043164:	880b883a 	mov	r5,r17
 4043168:	d8800515 	stw	r2,20(sp)
 404316c:	404bcbc0 	call	404bcbc <__ledf2>
 4043170:	10028716 	blt	r2,zero,4043b90 <_dtoa_r+0xc88>
 4043174:	d8c00517 	ldw	r3,20(sp)
 4043178:	00800584 	movi	r2,22
 404317c:	10c27536 	bltu	r2,r3,4043b54 <_dtoa_r+0xc4c>
 4043180:	180490fa 	slli	r2,r3,3
 4043184:	00c10174 	movhi	r3,1029
 4043188:	18c0e804 	addi	r3,r3,928
 404318c:	1885883a 	add	r2,r3,r2
 4043190:	11000017 	ldw	r4,0(r2)
 4043194:	11400117 	ldw	r5,4(r2)
 4043198:	900d883a 	mov	r6,r18
 404319c:	980f883a 	mov	r7,r19
 40431a0:	404bbe00 	call	404bbe0 <__gedf2>
 40431a4:	00828d0e 	bge	zero,r2,4043bdc <_dtoa_r+0xcd4>
 40431a8:	d9000517 	ldw	r4,20(sp)
 40431ac:	d8000e15 	stw	zero,56(sp)
 40431b0:	213fffc4 	addi	r4,r4,-1
 40431b4:	d9000515 	stw	r4,20(sp)
 40431b8:	b42dc83a 	sub	r22,r22,r16
 40431bc:	b5bfffc4 	addi	r22,r22,-1
 40431c0:	b0026f16 	blt	r22,zero,4043b80 <_dtoa_r+0xc78>
 40431c4:	d8000815 	stw	zero,32(sp)
 40431c8:	d9c00517 	ldw	r7,20(sp)
 40431cc:	38026416 	blt	r7,zero,4043b60 <_dtoa_r+0xc58>
 40431d0:	b1ed883a 	add	r22,r22,r7
 40431d4:	d9c00d15 	stw	r7,52(sp)
 40431d8:	d8000a15 	stw	zero,40(sp)
 40431dc:	d9800317 	ldw	r6,12(sp)
 40431e0:	00800244 	movi	r2,9
 40431e4:	11811436 	bltu	r2,r6,4043638 <_dtoa_r+0x730>
 40431e8:	00800144 	movi	r2,5
 40431ec:	1184e10e 	bge	r2,r6,4044574 <_dtoa_r+0x166c>
 40431f0:	31bfff04 	addi	r6,r6,-4
 40431f4:	d9800315 	stw	r6,12(sp)
 40431f8:	0023883a 	mov	r17,zero
 40431fc:	d9800317 	ldw	r6,12(sp)
 4043200:	008000c4 	movi	r2,3
 4043204:	30836726 	beq	r6,r2,4043fa4 <_dtoa_r+0x109c>
 4043208:	1183410e 	bge	r2,r6,4043f10 <_dtoa_r+0x1008>
 404320c:	d9c00317 	ldw	r7,12(sp)
 4043210:	00800104 	movi	r2,4
 4043214:	38827c26 	beq	r7,r2,4043c08 <_dtoa_r+0xd00>
 4043218:	00800144 	movi	r2,5
 404321c:	3884c41e 	bne	r7,r2,4044530 <_dtoa_r+0x1628>
 4043220:	00800044 	movi	r2,1
 4043224:	d8800b15 	stw	r2,44(sp)
 4043228:	d8c00517 	ldw	r3,20(sp)
 404322c:	d9002217 	ldw	r4,136(sp)
 4043230:	1907883a 	add	r3,r3,r4
 4043234:	19800044 	addi	r6,r3,1
 4043238:	d8c00c15 	stw	r3,48(sp)
 404323c:	d9800615 	stw	r6,24(sp)
 4043240:	0183a40e 	bge	zero,r6,40440d4 <_dtoa_r+0x11cc>
 4043244:	d9800617 	ldw	r6,24(sp)
 4043248:	3021883a 	mov	r16,r6
 404324c:	e0001115 	stw	zero,68(fp)
 4043250:	008005c4 	movi	r2,23
 4043254:	1184c92e 	bgeu	r2,r6,404457c <_dtoa_r+0x1674>
 4043258:	00c00044 	movi	r3,1
 404325c:	00800104 	movi	r2,4
 4043260:	1085883a 	add	r2,r2,r2
 4043264:	11000504 	addi	r4,r2,20
 4043268:	180b883a 	mov	r5,r3
 404326c:	18c00044 	addi	r3,r3,1
 4043270:	313ffb2e 	bgeu	r6,r4,4043260 <__alt_data_end+0xfffd8a60>
 4043274:	e1401115 	stw	r5,68(fp)
 4043278:	e009883a 	mov	r4,fp
 404327c:	40465a40 	call	40465a4 <_Balloc>
 4043280:	d8800715 	stw	r2,28(sp)
 4043284:	e0801015 	stw	r2,64(fp)
 4043288:	00800384 	movi	r2,14
 404328c:	1400f736 	bltu	r2,r16,404366c <_dtoa_r+0x764>
 4043290:	8800f626 	beq	r17,zero,404366c <_dtoa_r+0x764>
 4043294:	d9c00517 	ldw	r7,20(sp)
 4043298:	01c39a0e 	bge	zero,r7,4044104 <_dtoa_r+0x11fc>
 404329c:	388003cc 	andi	r2,r7,15
 40432a0:	100490fa 	slli	r2,r2,3
 40432a4:	382bd13a 	srai	r21,r7,4
 40432a8:	00c10174 	movhi	r3,1029
 40432ac:	18c0e804 	addi	r3,r3,928
 40432b0:	1885883a 	add	r2,r3,r2
 40432b4:	a8c0040c 	andi	r3,r21,16
 40432b8:	12400017 	ldw	r9,0(r2)
 40432bc:	12000117 	ldw	r8,4(r2)
 40432c0:	18037926 	beq	r3,zero,40440a8 <_dtoa_r+0x11a0>
 40432c4:	00810174 	movhi	r2,1029
 40432c8:	1080de04 	addi	r2,r2,888
 40432cc:	11800817 	ldw	r6,32(r2)
 40432d0:	11c00917 	ldw	r7,36(r2)
 40432d4:	9009883a 	mov	r4,r18
 40432d8:	980b883a 	mov	r5,r19
 40432dc:	da001715 	stw	r8,92(sp)
 40432e0:	da401615 	stw	r9,88(sp)
 40432e4:	404b2700 	call	404b270 <__divdf3>
 40432e8:	da001717 	ldw	r8,92(sp)
 40432ec:	da401617 	ldw	r9,88(sp)
 40432f0:	ad4003cc 	andi	r21,r21,15
 40432f4:	040000c4 	movi	r16,3
 40432f8:	1023883a 	mov	r17,r2
 40432fc:	1829883a 	mov	r20,r3
 4043300:	a8001126 	beq	r21,zero,4043348 <_dtoa_r+0x440>
 4043304:	05c10174 	movhi	r23,1029
 4043308:	bdc0de04 	addi	r23,r23,888
 404330c:	4805883a 	mov	r2,r9
 4043310:	4007883a 	mov	r3,r8
 4043314:	a980004c 	andi	r6,r21,1
 4043318:	1009883a 	mov	r4,r2
 404331c:	a82bd07a 	srai	r21,r21,1
 4043320:	180b883a 	mov	r5,r3
 4043324:	30000426 	beq	r6,zero,4043338 <_dtoa_r+0x430>
 4043328:	b9800017 	ldw	r6,0(r23)
 404332c:	b9c00117 	ldw	r7,4(r23)
 4043330:	84000044 	addi	r16,r16,1
 4043334:	404bdb00 	call	404bdb0 <__muldf3>
 4043338:	bdc00204 	addi	r23,r23,8
 404333c:	a83ff51e 	bne	r21,zero,4043314 <__alt_data_end+0xfffd8b14>
 4043340:	1013883a 	mov	r9,r2
 4043344:	1811883a 	mov	r8,r3
 4043348:	480d883a 	mov	r6,r9
 404334c:	400f883a 	mov	r7,r8
 4043350:	8809883a 	mov	r4,r17
 4043354:	a00b883a 	mov	r5,r20
 4043358:	404b2700 	call	404b270 <__divdf3>
 404335c:	d8800f15 	stw	r2,60(sp)
 4043360:	d8c01015 	stw	r3,64(sp)
 4043364:	d8c00e17 	ldw	r3,56(sp)
 4043368:	18000626 	beq	r3,zero,4043384 <_dtoa_r+0x47c>
 404336c:	d9000f17 	ldw	r4,60(sp)
 4043370:	d9401017 	ldw	r5,64(sp)
 4043374:	000d883a 	mov	r6,zero
 4043378:	01cffc34 	movhi	r7,16368
 404337c:	404bcbc0 	call	404bcbc <__ledf2>
 4043380:	10040b16 	blt	r2,zero,40443b0 <_dtoa_r+0x14a8>
 4043384:	8009883a 	mov	r4,r16
 4043388:	404ce440 	call	404ce44 <__floatsidf>
 404338c:	d9800f17 	ldw	r6,60(sp)
 4043390:	d9c01017 	ldw	r7,64(sp)
 4043394:	1009883a 	mov	r4,r2
 4043398:	180b883a 	mov	r5,r3
 404339c:	404bdb00 	call	404bdb0 <__muldf3>
 40433a0:	000d883a 	mov	r6,zero
 40433a4:	01d00734 	movhi	r7,16412
 40433a8:	1009883a 	mov	r4,r2
 40433ac:	180b883a 	mov	r5,r3
 40433b0:	404a9c40 	call	404a9c4 <__adddf3>
 40433b4:	1021883a 	mov	r16,r2
 40433b8:	d8800617 	ldw	r2,24(sp)
 40433bc:	047f3034 	movhi	r17,64704
 40433c0:	1c63883a 	add	r17,r3,r17
 40433c4:	10031826 	beq	r2,zero,4044028 <_dtoa_r+0x1120>
 40433c8:	d8c00517 	ldw	r3,20(sp)
 40433cc:	db000617 	ldw	r12,24(sp)
 40433d0:	d8c01315 	stw	r3,76(sp)
 40433d4:	d9000b17 	ldw	r4,44(sp)
 40433d8:	20038f26 	beq	r4,zero,4044218 <_dtoa_r+0x1310>
 40433dc:	60bfffc4 	addi	r2,r12,-1
 40433e0:	100490fa 	slli	r2,r2,3
 40433e4:	00c10174 	movhi	r3,1029
 40433e8:	18c0e804 	addi	r3,r3,928
 40433ec:	1885883a 	add	r2,r3,r2
 40433f0:	11800017 	ldw	r6,0(r2)
 40433f4:	11c00117 	ldw	r7,4(r2)
 40433f8:	d8800717 	ldw	r2,28(sp)
 40433fc:	0009883a 	mov	r4,zero
 4043400:	014ff834 	movhi	r5,16352
 4043404:	db001615 	stw	r12,88(sp)
 4043408:	15c00044 	addi	r23,r2,1
 404340c:	404b2700 	call	404b270 <__divdf3>
 4043410:	800d883a 	mov	r6,r16
 4043414:	880f883a 	mov	r7,r17
 4043418:	1009883a 	mov	r4,r2
 404341c:	180b883a 	mov	r5,r3
 4043420:	404c4c80 	call	404c4c8 <__subdf3>
 4043424:	d9401017 	ldw	r5,64(sp)
 4043428:	d9000f17 	ldw	r4,60(sp)
 404342c:	102b883a 	mov	r21,r2
 4043430:	d8c01215 	stw	r3,72(sp)
 4043434:	404cdc40 	call	404cdc4 <__fixdfsi>
 4043438:	1009883a 	mov	r4,r2
 404343c:	1029883a 	mov	r20,r2
 4043440:	404ce440 	call	404ce44 <__floatsidf>
 4043444:	d9000f17 	ldw	r4,60(sp)
 4043448:	d9401017 	ldw	r5,64(sp)
 404344c:	100d883a 	mov	r6,r2
 4043450:	180f883a 	mov	r7,r3
 4043454:	404c4c80 	call	404c4c8 <__subdf3>
 4043458:	1823883a 	mov	r17,r3
 404345c:	d8c00717 	ldw	r3,28(sp)
 4043460:	d9401217 	ldw	r5,72(sp)
 4043464:	a2000c04 	addi	r8,r20,48
 4043468:	1021883a 	mov	r16,r2
 404346c:	1a000005 	stb	r8,0(r3)
 4043470:	800d883a 	mov	r6,r16
 4043474:	880f883a 	mov	r7,r17
 4043478:	a809883a 	mov	r4,r21
 404347c:	4029883a 	mov	r20,r8
 4043480:	404bbe00 	call	404bbe0 <__gedf2>
 4043484:	00841d16 	blt	zero,r2,40444fc <_dtoa_r+0x15f4>
 4043488:	800d883a 	mov	r6,r16
 404348c:	880f883a 	mov	r7,r17
 4043490:	0009883a 	mov	r4,zero
 4043494:	014ffc34 	movhi	r5,16368
 4043498:	404c4c80 	call	404c4c8 <__subdf3>
 404349c:	d9401217 	ldw	r5,72(sp)
 40434a0:	100d883a 	mov	r6,r2
 40434a4:	180f883a 	mov	r7,r3
 40434a8:	a809883a 	mov	r4,r21
 40434ac:	404bbe00 	call	404bbe0 <__gedf2>
 40434b0:	db001617 	ldw	r12,88(sp)
 40434b4:	00840e16 	blt	zero,r2,40444f0 <_dtoa_r+0x15e8>
 40434b8:	00800044 	movi	r2,1
 40434bc:	13006b0e 	bge	r2,r12,404366c <_dtoa_r+0x764>
 40434c0:	d9000717 	ldw	r4,28(sp)
 40434c4:	dd800f15 	stw	r22,60(sp)
 40434c8:	dcc01015 	stw	r19,64(sp)
 40434cc:	2319883a 	add	r12,r4,r12
 40434d0:	dcc01217 	ldw	r19,72(sp)
 40434d4:	602d883a 	mov	r22,r12
 40434d8:	dc801215 	stw	r18,72(sp)
 40434dc:	b825883a 	mov	r18,r23
 40434e0:	00000906 	br	4043508 <_dtoa_r+0x600>
 40434e4:	404c4c80 	call	404c4c8 <__subdf3>
 40434e8:	a80d883a 	mov	r6,r21
 40434ec:	980f883a 	mov	r7,r19
 40434f0:	1009883a 	mov	r4,r2
 40434f4:	180b883a 	mov	r5,r3
 40434f8:	404bcbc0 	call	404bcbc <__ledf2>
 40434fc:	1003e816 	blt	r2,zero,40444a0 <_dtoa_r+0x1598>
 4043500:	b825883a 	mov	r18,r23
 4043504:	bd83e926 	beq	r23,r22,40444ac <_dtoa_r+0x15a4>
 4043508:	a809883a 	mov	r4,r21
 404350c:	980b883a 	mov	r5,r19
 4043510:	000d883a 	mov	r6,zero
 4043514:	01d00934 	movhi	r7,16420
 4043518:	404bdb00 	call	404bdb0 <__muldf3>
 404351c:	000d883a 	mov	r6,zero
 4043520:	01d00934 	movhi	r7,16420
 4043524:	8009883a 	mov	r4,r16
 4043528:	880b883a 	mov	r5,r17
 404352c:	102b883a 	mov	r21,r2
 4043530:	1827883a 	mov	r19,r3
 4043534:	404bdb00 	call	404bdb0 <__muldf3>
 4043538:	180b883a 	mov	r5,r3
 404353c:	1009883a 	mov	r4,r2
 4043540:	1821883a 	mov	r16,r3
 4043544:	1023883a 	mov	r17,r2
 4043548:	404cdc40 	call	404cdc4 <__fixdfsi>
 404354c:	1009883a 	mov	r4,r2
 4043550:	1029883a 	mov	r20,r2
 4043554:	404ce440 	call	404ce44 <__floatsidf>
 4043558:	8809883a 	mov	r4,r17
 404355c:	800b883a 	mov	r5,r16
 4043560:	100d883a 	mov	r6,r2
 4043564:	180f883a 	mov	r7,r3
 4043568:	404c4c80 	call	404c4c8 <__subdf3>
 404356c:	a5000c04 	addi	r20,r20,48
 4043570:	a80d883a 	mov	r6,r21
 4043574:	980f883a 	mov	r7,r19
 4043578:	1009883a 	mov	r4,r2
 404357c:	180b883a 	mov	r5,r3
 4043580:	95000005 	stb	r20,0(r18)
 4043584:	1021883a 	mov	r16,r2
 4043588:	1823883a 	mov	r17,r3
 404358c:	404bcbc0 	call	404bcbc <__ledf2>
 4043590:	bdc00044 	addi	r23,r23,1
 4043594:	800d883a 	mov	r6,r16
 4043598:	880f883a 	mov	r7,r17
 404359c:	0009883a 	mov	r4,zero
 40435a0:	014ffc34 	movhi	r5,16368
 40435a4:	103fcf0e 	bge	r2,zero,40434e4 <__alt_data_end+0xfffd8ce4>
 40435a8:	d8c01317 	ldw	r3,76(sp)
 40435ac:	d8c00515 	stw	r3,20(sp)
 40435b0:	d9400917 	ldw	r5,36(sp)
 40435b4:	e009883a 	mov	r4,fp
 40435b8:	404664c0 	call	404664c <_Bfree>
 40435bc:	d9000517 	ldw	r4,20(sp)
 40435c0:	d9802317 	ldw	r6,140(sp)
 40435c4:	d9c02517 	ldw	r7,148(sp)
 40435c8:	b8000005 	stb	zero,0(r23)
 40435cc:	20800044 	addi	r2,r4,1
 40435d0:	30800015 	stw	r2,0(r6)
 40435d4:	3802aa26 	beq	r7,zero,4044080 <_dtoa_r+0x1178>
 40435d8:	3dc00015 	stw	r23,0(r7)
 40435dc:	d8800717 	ldw	r2,28(sp)
 40435e0:	003e7906 	br	4042fc8 <__alt_data_end+0xfffd87c8>
 40435e4:	00800434 	movhi	r2,16
 40435e8:	10bfffc4 	addi	r2,r2,-1
 40435ec:	88a2703a 	and	r17,r17,r2
 40435f0:	883e851e 	bne	r17,zero,4043008 <__alt_data_end+0xfffd8808>
 40435f4:	00810174 	movhi	r2,1029
 40435f8:	1080c904 	addi	r2,r2,804
 40435fc:	003e8406 	br	4043010 <__alt_data_end+0xfffd8810>
 4043600:	10c00204 	addi	r3,r2,8
 4043604:	003e8706 	br	4043024 <__alt_data_end+0xfffd8824>
 4043608:	01400434 	movhi	r5,16
 404360c:	297fffc4 	addi	r5,r5,-1
 4043610:	994a703a 	and	r5,r19,r5
 4043614:	9009883a 	mov	r4,r18
 4043618:	843f0044 	addi	r16,r16,-1023
 404361c:	294ffc34 	orhi	r5,r5,16368
 4043620:	dd800217 	ldw	r22,8(sp)
 4043624:	d8001115 	stw	zero,68(sp)
 4043628:	003ea506 	br	40430c0 <__alt_data_end+0xfffd88c0>
 404362c:	00810174 	movhi	r2,1029
 4043630:	1080c004 	addi	r2,r2,768
 4043634:	003e6406 	br	4042fc8 <__alt_data_end+0xfffd87c8>
 4043638:	e0001115 	stw	zero,68(fp)
 404363c:	000b883a 	mov	r5,zero
 4043640:	e009883a 	mov	r4,fp
 4043644:	40465a40 	call	40465a4 <_Balloc>
 4043648:	01bfffc4 	movi	r6,-1
 404364c:	01c00044 	movi	r7,1
 4043650:	d8800715 	stw	r2,28(sp)
 4043654:	d9800c15 	stw	r6,48(sp)
 4043658:	e0801015 	stw	r2,64(fp)
 404365c:	d8000315 	stw	zero,12(sp)
 4043660:	d9c00b15 	stw	r7,44(sp)
 4043664:	d9800615 	stw	r6,24(sp)
 4043668:	d8002215 	stw	zero,136(sp)
 404366c:	d8800117 	ldw	r2,4(sp)
 4043670:	10008916 	blt	r2,zero,4043898 <_dtoa_r+0x990>
 4043674:	d9000517 	ldw	r4,20(sp)
 4043678:	00c00384 	movi	r3,14
 404367c:	19008616 	blt	r3,r4,4043898 <_dtoa_r+0x990>
 4043680:	200490fa 	slli	r2,r4,3
 4043684:	00c10174 	movhi	r3,1029
 4043688:	d9802217 	ldw	r6,136(sp)
 404368c:	18c0e804 	addi	r3,r3,928
 4043690:	1885883a 	add	r2,r3,r2
 4043694:	14000017 	ldw	r16,0(r2)
 4043698:	14400117 	ldw	r17,4(r2)
 404369c:	30016316 	blt	r6,zero,4043c2c <_dtoa_r+0xd24>
 40436a0:	800d883a 	mov	r6,r16
 40436a4:	880f883a 	mov	r7,r17
 40436a8:	9009883a 	mov	r4,r18
 40436ac:	980b883a 	mov	r5,r19
 40436b0:	404b2700 	call	404b270 <__divdf3>
 40436b4:	180b883a 	mov	r5,r3
 40436b8:	1009883a 	mov	r4,r2
 40436bc:	404cdc40 	call	404cdc4 <__fixdfsi>
 40436c0:	1009883a 	mov	r4,r2
 40436c4:	102b883a 	mov	r21,r2
 40436c8:	404ce440 	call	404ce44 <__floatsidf>
 40436cc:	800d883a 	mov	r6,r16
 40436d0:	880f883a 	mov	r7,r17
 40436d4:	1009883a 	mov	r4,r2
 40436d8:	180b883a 	mov	r5,r3
 40436dc:	404bdb00 	call	404bdb0 <__muldf3>
 40436e0:	100d883a 	mov	r6,r2
 40436e4:	180f883a 	mov	r7,r3
 40436e8:	9009883a 	mov	r4,r18
 40436ec:	980b883a 	mov	r5,r19
 40436f0:	404c4c80 	call	404c4c8 <__subdf3>
 40436f4:	d9c00717 	ldw	r7,28(sp)
 40436f8:	1009883a 	mov	r4,r2
 40436fc:	a8800c04 	addi	r2,r21,48
 4043700:	38800005 	stb	r2,0(r7)
 4043704:	3dc00044 	addi	r23,r7,1
 4043708:	d9c00617 	ldw	r7,24(sp)
 404370c:	01800044 	movi	r6,1
 4043710:	180b883a 	mov	r5,r3
 4043714:	2005883a 	mov	r2,r4
 4043718:	39803826 	beq	r7,r6,40437fc <_dtoa_r+0x8f4>
 404371c:	000d883a 	mov	r6,zero
 4043720:	01d00934 	movhi	r7,16420
 4043724:	404bdb00 	call	404bdb0 <__muldf3>
 4043728:	000d883a 	mov	r6,zero
 404372c:	000f883a 	mov	r7,zero
 4043730:	1009883a 	mov	r4,r2
 4043734:	180b883a 	mov	r5,r3
 4043738:	1025883a 	mov	r18,r2
 404373c:	1827883a 	mov	r19,r3
 4043740:	404bb580 	call	404bb58 <__eqdf2>
 4043744:	103f9a26 	beq	r2,zero,40435b0 <__alt_data_end+0xfffd8db0>
 4043748:	d9c00617 	ldw	r7,24(sp)
 404374c:	d8c00717 	ldw	r3,28(sp)
 4043750:	b829883a 	mov	r20,r23
 4043754:	38bfffc4 	addi	r2,r7,-1
 4043758:	18ad883a 	add	r22,r3,r2
 404375c:	00000a06 	br	4043788 <_dtoa_r+0x880>
 4043760:	404bdb00 	call	404bdb0 <__muldf3>
 4043764:	000d883a 	mov	r6,zero
 4043768:	000f883a 	mov	r7,zero
 404376c:	1009883a 	mov	r4,r2
 4043770:	180b883a 	mov	r5,r3
 4043774:	1025883a 	mov	r18,r2
 4043778:	1827883a 	mov	r19,r3
 404377c:	b829883a 	mov	r20,r23
 4043780:	404bb580 	call	404bb58 <__eqdf2>
 4043784:	103f8a26 	beq	r2,zero,40435b0 <__alt_data_end+0xfffd8db0>
 4043788:	800d883a 	mov	r6,r16
 404378c:	880f883a 	mov	r7,r17
 4043790:	9009883a 	mov	r4,r18
 4043794:	980b883a 	mov	r5,r19
 4043798:	404b2700 	call	404b270 <__divdf3>
 404379c:	180b883a 	mov	r5,r3
 40437a0:	1009883a 	mov	r4,r2
 40437a4:	404cdc40 	call	404cdc4 <__fixdfsi>
 40437a8:	1009883a 	mov	r4,r2
 40437ac:	102b883a 	mov	r21,r2
 40437b0:	404ce440 	call	404ce44 <__floatsidf>
 40437b4:	800d883a 	mov	r6,r16
 40437b8:	880f883a 	mov	r7,r17
 40437bc:	1009883a 	mov	r4,r2
 40437c0:	180b883a 	mov	r5,r3
 40437c4:	404bdb00 	call	404bdb0 <__muldf3>
 40437c8:	100d883a 	mov	r6,r2
 40437cc:	180f883a 	mov	r7,r3
 40437d0:	9009883a 	mov	r4,r18
 40437d4:	980b883a 	mov	r5,r19
 40437d8:	404c4c80 	call	404c4c8 <__subdf3>
 40437dc:	aa000c04 	addi	r8,r21,48
 40437e0:	a2000005 	stb	r8,0(r20)
 40437e4:	000d883a 	mov	r6,zero
 40437e8:	01d00934 	movhi	r7,16420
 40437ec:	1009883a 	mov	r4,r2
 40437f0:	180b883a 	mov	r5,r3
 40437f4:	a5c00044 	addi	r23,r20,1
 40437f8:	b53fd91e 	bne	r22,r20,4043760 <__alt_data_end+0xfffd8f60>
 40437fc:	100d883a 	mov	r6,r2
 4043800:	180f883a 	mov	r7,r3
 4043804:	1009883a 	mov	r4,r2
 4043808:	180b883a 	mov	r5,r3
 404380c:	404a9c40 	call	404a9c4 <__adddf3>
 4043810:	100d883a 	mov	r6,r2
 4043814:	180f883a 	mov	r7,r3
 4043818:	8009883a 	mov	r4,r16
 404381c:	880b883a 	mov	r5,r17
 4043820:	1027883a 	mov	r19,r2
 4043824:	1825883a 	mov	r18,r3
 4043828:	404bcbc0 	call	404bcbc <__ledf2>
 404382c:	10000816 	blt	r2,zero,4043850 <_dtoa_r+0x948>
 4043830:	980d883a 	mov	r6,r19
 4043834:	900f883a 	mov	r7,r18
 4043838:	8009883a 	mov	r4,r16
 404383c:	880b883a 	mov	r5,r17
 4043840:	404bb580 	call	404bb58 <__eqdf2>
 4043844:	103f5a1e 	bne	r2,zero,40435b0 <__alt_data_end+0xfffd8db0>
 4043848:	ad40004c 	andi	r21,r21,1
 404384c:	a83f5826 	beq	r21,zero,40435b0 <__alt_data_end+0xfffd8db0>
 4043850:	bd3fffc3 	ldbu	r20,-1(r23)
 4043854:	b8bfffc4 	addi	r2,r23,-1
 4043858:	1007883a 	mov	r3,r2
 404385c:	01400e44 	movi	r5,57
 4043860:	d9800717 	ldw	r6,28(sp)
 4043864:	00000506 	br	404387c <_dtoa_r+0x974>
 4043868:	18ffffc4 	addi	r3,r3,-1
 404386c:	11824726 	beq	r2,r6,404418c <_dtoa_r+0x1284>
 4043870:	1d000003 	ldbu	r20,0(r3)
 4043874:	102f883a 	mov	r23,r2
 4043878:	10bfffc4 	addi	r2,r2,-1
 404387c:	a1003fcc 	andi	r4,r20,255
 4043880:	2100201c 	xori	r4,r4,128
 4043884:	213fe004 	addi	r4,r4,-128
 4043888:	217ff726 	beq	r4,r5,4043868 <__alt_data_end+0xfffd9068>
 404388c:	a2000044 	addi	r8,r20,1
 4043890:	12000005 	stb	r8,0(r2)
 4043894:	003f4606 	br	40435b0 <__alt_data_end+0xfffd8db0>
 4043898:	d9000b17 	ldw	r4,44(sp)
 404389c:	2000c826 	beq	r4,zero,4043bc0 <_dtoa_r+0xcb8>
 40438a0:	d9800317 	ldw	r6,12(sp)
 40438a4:	00c00044 	movi	r3,1
 40438a8:	1980f90e 	bge	r3,r6,4043c90 <_dtoa_r+0xd88>
 40438ac:	d8800617 	ldw	r2,24(sp)
 40438b0:	d8c00a17 	ldw	r3,40(sp)
 40438b4:	157fffc4 	addi	r21,r2,-1
 40438b8:	1d41f316 	blt	r3,r21,4044088 <_dtoa_r+0x1180>
 40438bc:	1d6bc83a 	sub	r21,r3,r21
 40438c0:	d9c00617 	ldw	r7,24(sp)
 40438c4:	3802aa16 	blt	r7,zero,4044370 <_dtoa_r+0x1468>
 40438c8:	dd000817 	ldw	r20,32(sp)
 40438cc:	d8800617 	ldw	r2,24(sp)
 40438d0:	d8c00817 	ldw	r3,32(sp)
 40438d4:	01400044 	movi	r5,1
 40438d8:	e009883a 	mov	r4,fp
 40438dc:	1887883a 	add	r3,r3,r2
 40438e0:	d8c00815 	stw	r3,32(sp)
 40438e4:	b0ad883a 	add	r22,r22,r2
 40438e8:	40469b00 	call	40469b0 <__i2b>
 40438ec:	1023883a 	mov	r17,r2
 40438f0:	a0000826 	beq	r20,zero,4043914 <_dtoa_r+0xa0c>
 40438f4:	0580070e 	bge	zero,r22,4043914 <_dtoa_r+0xa0c>
 40438f8:	a005883a 	mov	r2,r20
 40438fc:	b500b916 	blt	r22,r20,4043be4 <_dtoa_r+0xcdc>
 4043900:	d9000817 	ldw	r4,32(sp)
 4043904:	a0a9c83a 	sub	r20,r20,r2
 4043908:	b0adc83a 	sub	r22,r22,r2
 404390c:	2089c83a 	sub	r4,r4,r2
 4043910:	d9000815 	stw	r4,32(sp)
 4043914:	d9800a17 	ldw	r6,40(sp)
 4043918:	0181810e 	bge	zero,r6,4043f20 <_dtoa_r+0x1018>
 404391c:	d9c00b17 	ldw	r7,44(sp)
 4043920:	3800b326 	beq	r7,zero,4043bf0 <_dtoa_r+0xce8>
 4043924:	a800b226 	beq	r21,zero,4043bf0 <_dtoa_r+0xce8>
 4043928:	880b883a 	mov	r5,r17
 404392c:	a80d883a 	mov	r6,r21
 4043930:	e009883a 	mov	r4,fp
 4043934:	4046be40 	call	4046be4 <__pow5mult>
 4043938:	d9800917 	ldw	r6,36(sp)
 404393c:	100b883a 	mov	r5,r2
 4043940:	e009883a 	mov	r4,fp
 4043944:	1023883a 	mov	r17,r2
 4043948:	40469ec0 	call	40469ec <__multiply>
 404394c:	1021883a 	mov	r16,r2
 4043950:	d8800a17 	ldw	r2,40(sp)
 4043954:	d9400917 	ldw	r5,36(sp)
 4043958:	e009883a 	mov	r4,fp
 404395c:	1545c83a 	sub	r2,r2,r21
 4043960:	d8800a15 	stw	r2,40(sp)
 4043964:	404664c0 	call	404664c <_Bfree>
 4043968:	d8c00a17 	ldw	r3,40(sp)
 404396c:	18009f1e 	bne	r3,zero,4043bec <_dtoa_r+0xce4>
 4043970:	05c00044 	movi	r23,1
 4043974:	e009883a 	mov	r4,fp
 4043978:	b80b883a 	mov	r5,r23
 404397c:	40469b00 	call	40469b0 <__i2b>
 4043980:	d9000d17 	ldw	r4,52(sp)
 4043984:	102b883a 	mov	r21,r2
 4043988:	2000ce26 	beq	r4,zero,4043cc4 <_dtoa_r+0xdbc>
 404398c:	200d883a 	mov	r6,r4
 4043990:	100b883a 	mov	r5,r2
 4043994:	e009883a 	mov	r4,fp
 4043998:	4046be40 	call	4046be4 <__pow5mult>
 404399c:	d9800317 	ldw	r6,12(sp)
 40439a0:	102b883a 	mov	r21,r2
 40439a4:	b981810e 	bge	r23,r6,4043fac <_dtoa_r+0x10a4>
 40439a8:	0027883a 	mov	r19,zero
 40439ac:	a8800417 	ldw	r2,16(r21)
 40439b0:	05c00804 	movi	r23,32
 40439b4:	10800104 	addi	r2,r2,4
 40439b8:	1085883a 	add	r2,r2,r2
 40439bc:	1085883a 	add	r2,r2,r2
 40439c0:	a885883a 	add	r2,r21,r2
 40439c4:	11000017 	ldw	r4,0(r2)
 40439c8:	40468980 	call	4046898 <__hi0bits>
 40439cc:	b885c83a 	sub	r2,r23,r2
 40439d0:	1585883a 	add	r2,r2,r22
 40439d4:	108007cc 	andi	r2,r2,31
 40439d8:	1000b326 	beq	r2,zero,4043ca8 <_dtoa_r+0xda0>
 40439dc:	00c00804 	movi	r3,32
 40439e0:	1887c83a 	sub	r3,r3,r2
 40439e4:	01000104 	movi	r4,4
 40439e8:	20c2cd0e 	bge	r4,r3,4044520 <_dtoa_r+0x1618>
 40439ec:	00c00704 	movi	r3,28
 40439f0:	1885c83a 	sub	r2,r3,r2
 40439f4:	d8c00817 	ldw	r3,32(sp)
 40439f8:	a0a9883a 	add	r20,r20,r2
 40439fc:	b0ad883a 	add	r22,r22,r2
 4043a00:	1887883a 	add	r3,r3,r2
 4043a04:	d8c00815 	stw	r3,32(sp)
 4043a08:	d9800817 	ldw	r6,32(sp)
 4043a0c:	0180040e 	bge	zero,r6,4043a20 <_dtoa_r+0xb18>
 4043a10:	800b883a 	mov	r5,r16
 4043a14:	e009883a 	mov	r4,fp
 4043a18:	4046d240 	call	4046d24 <__lshift>
 4043a1c:	1021883a 	mov	r16,r2
 4043a20:	0580050e 	bge	zero,r22,4043a38 <_dtoa_r+0xb30>
 4043a24:	a80b883a 	mov	r5,r21
 4043a28:	b00d883a 	mov	r6,r22
 4043a2c:	e009883a 	mov	r4,fp
 4043a30:	4046d240 	call	4046d24 <__lshift>
 4043a34:	102b883a 	mov	r21,r2
 4043a38:	d9c00e17 	ldw	r7,56(sp)
 4043a3c:	3801211e 	bne	r7,zero,4043ec4 <_dtoa_r+0xfbc>
 4043a40:	d9800617 	ldw	r6,24(sp)
 4043a44:	0181380e 	bge	zero,r6,4043f28 <_dtoa_r+0x1020>
 4043a48:	d8c00b17 	ldw	r3,44(sp)
 4043a4c:	1800ab1e 	bne	r3,zero,4043cfc <_dtoa_r+0xdf4>
 4043a50:	dc800717 	ldw	r18,28(sp)
 4043a54:	dcc00617 	ldw	r19,24(sp)
 4043a58:	9029883a 	mov	r20,r18
 4043a5c:	00000206 	br	4043a68 <_dtoa_r+0xb60>
 4043a60:	40466740 	call	4046674 <__multadd>
 4043a64:	1021883a 	mov	r16,r2
 4043a68:	a80b883a 	mov	r5,r21
 4043a6c:	8009883a 	mov	r4,r16
 4043a70:	4042d080 	call	4042d08 <quorem>
 4043a74:	10800c04 	addi	r2,r2,48
 4043a78:	90800005 	stb	r2,0(r18)
 4043a7c:	94800044 	addi	r18,r18,1
 4043a80:	9507c83a 	sub	r3,r18,r20
 4043a84:	000f883a 	mov	r7,zero
 4043a88:	01800284 	movi	r6,10
 4043a8c:	800b883a 	mov	r5,r16
 4043a90:	e009883a 	mov	r4,fp
 4043a94:	1cfff216 	blt	r3,r19,4043a60 <__alt_data_end+0xfffd9260>
 4043a98:	1011883a 	mov	r8,r2
 4043a9c:	d8800617 	ldw	r2,24(sp)
 4043aa0:	0082370e 	bge	zero,r2,4044380 <_dtoa_r+0x1478>
 4043aa4:	d9000717 	ldw	r4,28(sp)
 4043aa8:	0025883a 	mov	r18,zero
 4043aac:	20af883a 	add	r23,r4,r2
 4043ab0:	01800044 	movi	r6,1
 4043ab4:	800b883a 	mov	r5,r16
 4043ab8:	e009883a 	mov	r4,fp
 4043abc:	da001715 	stw	r8,92(sp)
 4043ac0:	4046d240 	call	4046d24 <__lshift>
 4043ac4:	a80b883a 	mov	r5,r21
 4043ac8:	1009883a 	mov	r4,r2
 4043acc:	d8800915 	stw	r2,36(sp)
 4043ad0:	4046e6c0 	call	4046e6c <__mcmp>
 4043ad4:	da001717 	ldw	r8,92(sp)
 4043ad8:	0081800e 	bge	zero,r2,40440dc <_dtoa_r+0x11d4>
 4043adc:	b93fffc3 	ldbu	r4,-1(r23)
 4043ae0:	b8bfffc4 	addi	r2,r23,-1
 4043ae4:	1007883a 	mov	r3,r2
 4043ae8:	01800e44 	movi	r6,57
 4043aec:	d9c00717 	ldw	r7,28(sp)
 4043af0:	00000506 	br	4043b08 <_dtoa_r+0xc00>
 4043af4:	18ffffc4 	addi	r3,r3,-1
 4043af8:	11c12326 	beq	r2,r7,4043f88 <_dtoa_r+0x1080>
 4043afc:	19000003 	ldbu	r4,0(r3)
 4043b00:	102f883a 	mov	r23,r2
 4043b04:	10bfffc4 	addi	r2,r2,-1
 4043b08:	21403fcc 	andi	r5,r4,255
 4043b0c:	2940201c 	xori	r5,r5,128
 4043b10:	297fe004 	addi	r5,r5,-128
 4043b14:	29bff726 	beq	r5,r6,4043af4 <__alt_data_end+0xfffd92f4>
 4043b18:	21000044 	addi	r4,r4,1
 4043b1c:	11000005 	stb	r4,0(r2)
 4043b20:	a80b883a 	mov	r5,r21
 4043b24:	e009883a 	mov	r4,fp
 4043b28:	404664c0 	call	404664c <_Bfree>
 4043b2c:	883ea026 	beq	r17,zero,40435b0 <__alt_data_end+0xfffd8db0>
 4043b30:	90000426 	beq	r18,zero,4043b44 <_dtoa_r+0xc3c>
 4043b34:	94400326 	beq	r18,r17,4043b44 <_dtoa_r+0xc3c>
 4043b38:	900b883a 	mov	r5,r18
 4043b3c:	e009883a 	mov	r4,fp
 4043b40:	404664c0 	call	404664c <_Bfree>
 4043b44:	880b883a 	mov	r5,r17
 4043b48:	e009883a 	mov	r4,fp
 4043b4c:	404664c0 	call	404664c <_Bfree>
 4043b50:	003e9706 	br	40435b0 <__alt_data_end+0xfffd8db0>
 4043b54:	01800044 	movi	r6,1
 4043b58:	d9800e15 	stw	r6,56(sp)
 4043b5c:	003d9606 	br	40431b8 <__alt_data_end+0xfffd89b8>
 4043b60:	d8800817 	ldw	r2,32(sp)
 4043b64:	d8c00517 	ldw	r3,20(sp)
 4043b68:	d8000d15 	stw	zero,52(sp)
 4043b6c:	10c5c83a 	sub	r2,r2,r3
 4043b70:	00c9c83a 	sub	r4,zero,r3
 4043b74:	d8800815 	stw	r2,32(sp)
 4043b78:	d9000a15 	stw	r4,40(sp)
 4043b7c:	003d9706 	br	40431dc <__alt_data_end+0xfffd89dc>
 4043b80:	05adc83a 	sub	r22,zero,r22
 4043b84:	dd800815 	stw	r22,32(sp)
 4043b88:	002d883a 	mov	r22,zero
 4043b8c:	003d8e06 	br	40431c8 <__alt_data_end+0xfffd89c8>
 4043b90:	d9000517 	ldw	r4,20(sp)
 4043b94:	404ce440 	call	404ce44 <__floatsidf>
 4043b98:	100d883a 	mov	r6,r2
 4043b9c:	180f883a 	mov	r7,r3
 4043ba0:	a009883a 	mov	r4,r20
 4043ba4:	880b883a 	mov	r5,r17
 4043ba8:	404bb580 	call	404bb58 <__eqdf2>
 4043bac:	103d7126 	beq	r2,zero,4043174 <__alt_data_end+0xfffd8974>
 4043bb0:	d9c00517 	ldw	r7,20(sp)
 4043bb4:	39ffffc4 	addi	r7,r7,-1
 4043bb8:	d9c00515 	stw	r7,20(sp)
 4043bbc:	003d6d06 	br	4043174 <__alt_data_end+0xfffd8974>
 4043bc0:	dd400a17 	ldw	r21,40(sp)
 4043bc4:	dd000817 	ldw	r20,32(sp)
 4043bc8:	0023883a 	mov	r17,zero
 4043bcc:	003f4806 	br	40438f0 <__alt_data_end+0xfffd90f0>
 4043bd0:	10e3c83a 	sub	r17,r2,r3
 4043bd4:	9448983a 	sll	r4,r18,r17
 4043bd8:	003d3206 	br	40430a4 <__alt_data_end+0xfffd88a4>
 4043bdc:	d8000e15 	stw	zero,56(sp)
 4043be0:	003d7506 	br	40431b8 <__alt_data_end+0xfffd89b8>
 4043be4:	b005883a 	mov	r2,r22
 4043be8:	003f4506 	br	4043900 <__alt_data_end+0xfffd9100>
 4043bec:	dc000915 	stw	r16,36(sp)
 4043bf0:	d9800a17 	ldw	r6,40(sp)
 4043bf4:	d9400917 	ldw	r5,36(sp)
 4043bf8:	e009883a 	mov	r4,fp
 4043bfc:	4046be40 	call	4046be4 <__pow5mult>
 4043c00:	1021883a 	mov	r16,r2
 4043c04:	003f5a06 	br	4043970 <__alt_data_end+0xfffd9170>
 4043c08:	01c00044 	movi	r7,1
 4043c0c:	d9c00b15 	stw	r7,44(sp)
 4043c10:	d8802217 	ldw	r2,136(sp)
 4043c14:	0081280e 	bge	zero,r2,40440b8 <_dtoa_r+0x11b0>
 4043c18:	100d883a 	mov	r6,r2
 4043c1c:	1021883a 	mov	r16,r2
 4043c20:	d8800c15 	stw	r2,48(sp)
 4043c24:	d8800615 	stw	r2,24(sp)
 4043c28:	003d8806 	br	404324c <__alt_data_end+0xfffd8a4c>
 4043c2c:	d8800617 	ldw	r2,24(sp)
 4043c30:	00be9b16 	blt	zero,r2,40436a0 <__alt_data_end+0xfffd8ea0>
 4043c34:	10010f1e 	bne	r2,zero,4044074 <_dtoa_r+0x116c>
 4043c38:	880b883a 	mov	r5,r17
 4043c3c:	000d883a 	mov	r6,zero
 4043c40:	01d00534 	movhi	r7,16404
 4043c44:	8009883a 	mov	r4,r16
 4043c48:	404bdb00 	call	404bdb0 <__muldf3>
 4043c4c:	900d883a 	mov	r6,r18
 4043c50:	980f883a 	mov	r7,r19
 4043c54:	1009883a 	mov	r4,r2
 4043c58:	180b883a 	mov	r5,r3
 4043c5c:	404bbe00 	call	404bbe0 <__gedf2>
 4043c60:	002b883a 	mov	r21,zero
 4043c64:	0023883a 	mov	r17,zero
 4043c68:	1000bf16 	blt	r2,zero,4043f68 <_dtoa_r+0x1060>
 4043c6c:	d9802217 	ldw	r6,136(sp)
 4043c70:	ddc00717 	ldw	r23,28(sp)
 4043c74:	018c303a 	nor	r6,zero,r6
 4043c78:	d9800515 	stw	r6,20(sp)
 4043c7c:	a80b883a 	mov	r5,r21
 4043c80:	e009883a 	mov	r4,fp
 4043c84:	404664c0 	call	404664c <_Bfree>
 4043c88:	883e4926 	beq	r17,zero,40435b0 <__alt_data_end+0xfffd8db0>
 4043c8c:	003fad06 	br	4043b44 <__alt_data_end+0xfffd9344>
 4043c90:	d9c01117 	ldw	r7,68(sp)
 4043c94:	3801bc26 	beq	r7,zero,4044388 <_dtoa_r+0x1480>
 4043c98:	10810cc4 	addi	r2,r2,1075
 4043c9c:	dd400a17 	ldw	r21,40(sp)
 4043ca0:	dd000817 	ldw	r20,32(sp)
 4043ca4:	003f0a06 	br	40438d0 <__alt_data_end+0xfffd90d0>
 4043ca8:	00800704 	movi	r2,28
 4043cac:	d9000817 	ldw	r4,32(sp)
 4043cb0:	a0a9883a 	add	r20,r20,r2
 4043cb4:	b0ad883a 	add	r22,r22,r2
 4043cb8:	2089883a 	add	r4,r4,r2
 4043cbc:	d9000815 	stw	r4,32(sp)
 4043cc0:	003f5106 	br	4043a08 <__alt_data_end+0xfffd9208>
 4043cc4:	d8c00317 	ldw	r3,12(sp)
 4043cc8:	b8c1fc0e 	bge	r23,r3,40444bc <_dtoa_r+0x15b4>
 4043ccc:	0027883a 	mov	r19,zero
 4043cd0:	b805883a 	mov	r2,r23
 4043cd4:	003f3e06 	br	40439d0 <__alt_data_end+0xfffd91d0>
 4043cd8:	880b883a 	mov	r5,r17
 4043cdc:	e009883a 	mov	r4,fp
 4043ce0:	000f883a 	mov	r7,zero
 4043ce4:	01800284 	movi	r6,10
 4043ce8:	40466740 	call	4046674 <__multadd>
 4043cec:	d9000c17 	ldw	r4,48(sp)
 4043cf0:	1023883a 	mov	r17,r2
 4043cf4:	0102040e 	bge	zero,r4,4044508 <_dtoa_r+0x1600>
 4043cf8:	d9000615 	stw	r4,24(sp)
 4043cfc:	0500050e 	bge	zero,r20,4043d14 <_dtoa_r+0xe0c>
 4043d00:	880b883a 	mov	r5,r17
 4043d04:	a00d883a 	mov	r6,r20
 4043d08:	e009883a 	mov	r4,fp
 4043d0c:	4046d240 	call	4046d24 <__lshift>
 4043d10:	1023883a 	mov	r17,r2
 4043d14:	9801241e 	bne	r19,zero,40441a8 <_dtoa_r+0x12a0>
 4043d18:	8829883a 	mov	r20,r17
 4043d1c:	d9000617 	ldw	r4,24(sp)
 4043d20:	dcc00717 	ldw	r19,28(sp)
 4043d24:	9480004c 	andi	r18,r18,1
 4043d28:	20bfffc4 	addi	r2,r4,-1
 4043d2c:	9885883a 	add	r2,r19,r2
 4043d30:	d8800415 	stw	r2,16(sp)
 4043d34:	dc800615 	stw	r18,24(sp)
 4043d38:	a80b883a 	mov	r5,r21
 4043d3c:	8009883a 	mov	r4,r16
 4043d40:	4042d080 	call	4042d08 <quorem>
 4043d44:	880b883a 	mov	r5,r17
 4043d48:	8009883a 	mov	r4,r16
 4043d4c:	102f883a 	mov	r23,r2
 4043d50:	4046e6c0 	call	4046e6c <__mcmp>
 4043d54:	a80b883a 	mov	r5,r21
 4043d58:	a00d883a 	mov	r6,r20
 4043d5c:	e009883a 	mov	r4,fp
 4043d60:	102d883a 	mov	r22,r2
 4043d64:	4046ecc0 	call	4046ecc <__mdiff>
 4043d68:	1007883a 	mov	r3,r2
 4043d6c:	10800317 	ldw	r2,12(r2)
 4043d70:	bc800c04 	addi	r18,r23,48
 4043d74:	180b883a 	mov	r5,r3
 4043d78:	10004e1e 	bne	r2,zero,4043eb4 <_dtoa_r+0xfac>
 4043d7c:	8009883a 	mov	r4,r16
 4043d80:	d8c01615 	stw	r3,88(sp)
 4043d84:	4046e6c0 	call	4046e6c <__mcmp>
 4043d88:	d8c01617 	ldw	r3,88(sp)
 4043d8c:	e009883a 	mov	r4,fp
 4043d90:	d8801615 	stw	r2,88(sp)
 4043d94:	180b883a 	mov	r5,r3
 4043d98:	404664c0 	call	404664c <_Bfree>
 4043d9c:	d8801617 	ldw	r2,88(sp)
 4043da0:	1000041e 	bne	r2,zero,4043db4 <_dtoa_r+0xeac>
 4043da4:	d9800317 	ldw	r6,12(sp)
 4043da8:	3000021e 	bne	r6,zero,4043db4 <_dtoa_r+0xeac>
 4043dac:	d8c00617 	ldw	r3,24(sp)
 4043db0:	18003726 	beq	r3,zero,4043e90 <_dtoa_r+0xf88>
 4043db4:	b0002016 	blt	r22,zero,4043e38 <_dtoa_r+0xf30>
 4043db8:	b000041e 	bne	r22,zero,4043dcc <_dtoa_r+0xec4>
 4043dbc:	d9000317 	ldw	r4,12(sp)
 4043dc0:	2000021e 	bne	r4,zero,4043dcc <_dtoa_r+0xec4>
 4043dc4:	d8c00617 	ldw	r3,24(sp)
 4043dc8:	18001b26 	beq	r3,zero,4043e38 <_dtoa_r+0xf30>
 4043dcc:	00810716 	blt	zero,r2,40441ec <_dtoa_r+0x12e4>
 4043dd0:	d8c00417 	ldw	r3,16(sp)
 4043dd4:	9d800044 	addi	r22,r19,1
 4043dd8:	9c800005 	stb	r18,0(r19)
 4043ddc:	b02f883a 	mov	r23,r22
 4043de0:	98c10626 	beq	r19,r3,40441fc <_dtoa_r+0x12f4>
 4043de4:	800b883a 	mov	r5,r16
 4043de8:	000f883a 	mov	r7,zero
 4043dec:	01800284 	movi	r6,10
 4043df0:	e009883a 	mov	r4,fp
 4043df4:	40466740 	call	4046674 <__multadd>
 4043df8:	1021883a 	mov	r16,r2
 4043dfc:	000f883a 	mov	r7,zero
 4043e00:	01800284 	movi	r6,10
 4043e04:	880b883a 	mov	r5,r17
 4043e08:	e009883a 	mov	r4,fp
 4043e0c:	8d002526 	beq	r17,r20,4043ea4 <_dtoa_r+0xf9c>
 4043e10:	40466740 	call	4046674 <__multadd>
 4043e14:	a00b883a 	mov	r5,r20
 4043e18:	000f883a 	mov	r7,zero
 4043e1c:	01800284 	movi	r6,10
 4043e20:	e009883a 	mov	r4,fp
 4043e24:	1023883a 	mov	r17,r2
 4043e28:	40466740 	call	4046674 <__multadd>
 4043e2c:	1029883a 	mov	r20,r2
 4043e30:	b027883a 	mov	r19,r22
 4043e34:	003fc006 	br	4043d38 <__alt_data_end+0xfffd9538>
 4043e38:	9011883a 	mov	r8,r18
 4043e3c:	00800e0e 	bge	zero,r2,4043e78 <_dtoa_r+0xf70>
 4043e40:	800b883a 	mov	r5,r16
 4043e44:	01800044 	movi	r6,1
 4043e48:	e009883a 	mov	r4,fp
 4043e4c:	da001715 	stw	r8,92(sp)
 4043e50:	4046d240 	call	4046d24 <__lshift>
 4043e54:	a80b883a 	mov	r5,r21
 4043e58:	1009883a 	mov	r4,r2
 4043e5c:	1021883a 	mov	r16,r2
 4043e60:	4046e6c0 	call	4046e6c <__mcmp>
 4043e64:	da001717 	ldw	r8,92(sp)
 4043e68:	0081960e 	bge	zero,r2,40444c4 <_dtoa_r+0x15bc>
 4043e6c:	00800e44 	movi	r2,57
 4043e70:	40817026 	beq	r8,r2,4044434 <_dtoa_r+0x152c>
 4043e74:	ba000c44 	addi	r8,r23,49
 4043e78:	8825883a 	mov	r18,r17
 4043e7c:	9dc00044 	addi	r23,r19,1
 4043e80:	9a000005 	stb	r8,0(r19)
 4043e84:	a023883a 	mov	r17,r20
 4043e88:	dc000915 	stw	r16,36(sp)
 4043e8c:	003f2406 	br	4043b20 <__alt_data_end+0xfffd9320>
 4043e90:	00800e44 	movi	r2,57
 4043e94:	9011883a 	mov	r8,r18
 4043e98:	90816626 	beq	r18,r2,4044434 <_dtoa_r+0x152c>
 4043e9c:	05bff516 	blt	zero,r22,4043e74 <__alt_data_end+0xfffd9674>
 4043ea0:	003ff506 	br	4043e78 <__alt_data_end+0xfffd9678>
 4043ea4:	40466740 	call	4046674 <__multadd>
 4043ea8:	1023883a 	mov	r17,r2
 4043eac:	1029883a 	mov	r20,r2
 4043eb0:	003fdf06 	br	4043e30 <__alt_data_end+0xfffd9630>
 4043eb4:	e009883a 	mov	r4,fp
 4043eb8:	404664c0 	call	404664c <_Bfree>
 4043ebc:	00800044 	movi	r2,1
 4043ec0:	003fbc06 	br	4043db4 <__alt_data_end+0xfffd95b4>
 4043ec4:	a80b883a 	mov	r5,r21
 4043ec8:	8009883a 	mov	r4,r16
 4043ecc:	4046e6c0 	call	4046e6c <__mcmp>
 4043ed0:	103edb0e 	bge	r2,zero,4043a40 <__alt_data_end+0xfffd9240>
 4043ed4:	800b883a 	mov	r5,r16
 4043ed8:	000f883a 	mov	r7,zero
 4043edc:	01800284 	movi	r6,10
 4043ee0:	e009883a 	mov	r4,fp
 4043ee4:	40466740 	call	4046674 <__multadd>
 4043ee8:	1021883a 	mov	r16,r2
 4043eec:	d8800517 	ldw	r2,20(sp)
 4043ef0:	d8c00b17 	ldw	r3,44(sp)
 4043ef4:	10bfffc4 	addi	r2,r2,-1
 4043ef8:	d8800515 	stw	r2,20(sp)
 4043efc:	183f761e 	bne	r3,zero,4043cd8 <__alt_data_end+0xfffd94d8>
 4043f00:	d9000c17 	ldw	r4,48(sp)
 4043f04:	0101730e 	bge	zero,r4,40444d4 <_dtoa_r+0x15cc>
 4043f08:	d9000615 	stw	r4,24(sp)
 4043f0c:	003ed006 	br	4043a50 <__alt_data_end+0xfffd9250>
 4043f10:	00800084 	movi	r2,2
 4043f14:	3081861e 	bne	r6,r2,4044530 <_dtoa_r+0x1628>
 4043f18:	d8000b15 	stw	zero,44(sp)
 4043f1c:	003f3c06 	br	4043c10 <__alt_data_end+0xfffd9410>
 4043f20:	dc000917 	ldw	r16,36(sp)
 4043f24:	003e9206 	br	4043970 <__alt_data_end+0xfffd9170>
 4043f28:	d9c00317 	ldw	r7,12(sp)
 4043f2c:	00800084 	movi	r2,2
 4043f30:	11fec50e 	bge	r2,r7,4043a48 <__alt_data_end+0xfffd9248>
 4043f34:	d9000617 	ldw	r4,24(sp)
 4043f38:	20013c1e 	bne	r4,zero,404442c <_dtoa_r+0x1524>
 4043f3c:	a80b883a 	mov	r5,r21
 4043f40:	000f883a 	mov	r7,zero
 4043f44:	01800144 	movi	r6,5
 4043f48:	e009883a 	mov	r4,fp
 4043f4c:	40466740 	call	4046674 <__multadd>
 4043f50:	100b883a 	mov	r5,r2
 4043f54:	8009883a 	mov	r4,r16
 4043f58:	102b883a 	mov	r21,r2
 4043f5c:	4046e6c0 	call	4046e6c <__mcmp>
 4043f60:	dc000915 	stw	r16,36(sp)
 4043f64:	00bf410e 	bge	zero,r2,4043c6c <__alt_data_end+0xfffd946c>
 4043f68:	d9c00717 	ldw	r7,28(sp)
 4043f6c:	00800c44 	movi	r2,49
 4043f70:	38800005 	stb	r2,0(r7)
 4043f74:	d8800517 	ldw	r2,20(sp)
 4043f78:	3dc00044 	addi	r23,r7,1
 4043f7c:	10800044 	addi	r2,r2,1
 4043f80:	d8800515 	stw	r2,20(sp)
 4043f84:	003f3d06 	br	4043c7c <__alt_data_end+0xfffd947c>
 4043f88:	d9800517 	ldw	r6,20(sp)
 4043f8c:	d9c00717 	ldw	r7,28(sp)
 4043f90:	00800c44 	movi	r2,49
 4043f94:	31800044 	addi	r6,r6,1
 4043f98:	d9800515 	stw	r6,20(sp)
 4043f9c:	38800005 	stb	r2,0(r7)
 4043fa0:	003edf06 	br	4043b20 <__alt_data_end+0xfffd9320>
 4043fa4:	d8000b15 	stw	zero,44(sp)
 4043fa8:	003c9f06 	br	4043228 <__alt_data_end+0xfffd8a28>
 4043fac:	903e7e1e 	bne	r18,zero,40439a8 <__alt_data_end+0xfffd91a8>
 4043fb0:	00800434 	movhi	r2,16
 4043fb4:	10bfffc4 	addi	r2,r2,-1
 4043fb8:	9884703a 	and	r2,r19,r2
 4043fbc:	1000ea1e 	bne	r2,zero,4044368 <_dtoa_r+0x1460>
 4043fc0:	9cdffc2c 	andhi	r19,r19,32752
 4043fc4:	9800e826 	beq	r19,zero,4044368 <_dtoa_r+0x1460>
 4043fc8:	d9c00817 	ldw	r7,32(sp)
 4043fcc:	b5800044 	addi	r22,r22,1
 4043fd0:	04c00044 	movi	r19,1
 4043fd4:	39c00044 	addi	r7,r7,1
 4043fd8:	d9c00815 	stw	r7,32(sp)
 4043fdc:	d8800d17 	ldw	r2,52(sp)
 4043fe0:	103e721e 	bne	r2,zero,40439ac <__alt_data_end+0xfffd91ac>
 4043fe4:	00800044 	movi	r2,1
 4043fe8:	003e7906 	br	40439d0 <__alt_data_end+0xfffd91d0>
 4043fec:	8009883a 	mov	r4,r16
 4043ff0:	404ce440 	call	404ce44 <__floatsidf>
 4043ff4:	d9800f17 	ldw	r6,60(sp)
 4043ff8:	d9c01017 	ldw	r7,64(sp)
 4043ffc:	1009883a 	mov	r4,r2
 4044000:	180b883a 	mov	r5,r3
 4044004:	404bdb00 	call	404bdb0 <__muldf3>
 4044008:	000d883a 	mov	r6,zero
 404400c:	01d00734 	movhi	r7,16412
 4044010:	1009883a 	mov	r4,r2
 4044014:	180b883a 	mov	r5,r3
 4044018:	404a9c40 	call	404a9c4 <__adddf3>
 404401c:	047f3034 	movhi	r17,64704
 4044020:	1021883a 	mov	r16,r2
 4044024:	1c63883a 	add	r17,r3,r17
 4044028:	d9000f17 	ldw	r4,60(sp)
 404402c:	d9401017 	ldw	r5,64(sp)
 4044030:	000d883a 	mov	r6,zero
 4044034:	01d00534 	movhi	r7,16404
 4044038:	404c4c80 	call	404c4c8 <__subdf3>
 404403c:	800d883a 	mov	r6,r16
 4044040:	880f883a 	mov	r7,r17
 4044044:	1009883a 	mov	r4,r2
 4044048:	180b883a 	mov	r5,r3
 404404c:	102b883a 	mov	r21,r2
 4044050:	1829883a 	mov	r20,r3
 4044054:	404bbe00 	call	404bbe0 <__gedf2>
 4044058:	00806c16 	blt	zero,r2,404420c <_dtoa_r+0x1304>
 404405c:	89e0003c 	xorhi	r7,r17,32768
 4044060:	800d883a 	mov	r6,r16
 4044064:	a809883a 	mov	r4,r21
 4044068:	a00b883a 	mov	r5,r20
 404406c:	404bcbc0 	call	404bcbc <__ledf2>
 4044070:	103d7e0e 	bge	r2,zero,404366c <__alt_data_end+0xfffd8e6c>
 4044074:	002b883a 	mov	r21,zero
 4044078:	0023883a 	mov	r17,zero
 404407c:	003efb06 	br	4043c6c <__alt_data_end+0xfffd946c>
 4044080:	d8800717 	ldw	r2,28(sp)
 4044084:	003bd006 	br	4042fc8 <__alt_data_end+0xfffd87c8>
 4044088:	d9000a17 	ldw	r4,40(sp)
 404408c:	d9800d17 	ldw	r6,52(sp)
 4044090:	dd400a15 	stw	r21,40(sp)
 4044094:	a905c83a 	sub	r2,r21,r4
 4044098:	308d883a 	add	r6,r6,r2
 404409c:	d9800d15 	stw	r6,52(sp)
 40440a0:	002b883a 	mov	r21,zero
 40440a4:	003e0606 	br	40438c0 <__alt_data_end+0xfffd90c0>
 40440a8:	9023883a 	mov	r17,r18
 40440ac:	9829883a 	mov	r20,r19
 40440b0:	04000084 	movi	r16,2
 40440b4:	003c9206 	br	4043300 <__alt_data_end+0xfffd8b00>
 40440b8:	04000044 	movi	r16,1
 40440bc:	dc000c15 	stw	r16,48(sp)
 40440c0:	dc000615 	stw	r16,24(sp)
 40440c4:	dc002215 	stw	r16,136(sp)
 40440c8:	e0001115 	stw	zero,68(fp)
 40440cc:	000b883a 	mov	r5,zero
 40440d0:	003c6906 	br	4043278 <__alt_data_end+0xfffd8a78>
 40440d4:	3021883a 	mov	r16,r6
 40440d8:	003ffb06 	br	40440c8 <__alt_data_end+0xfffd98c8>
 40440dc:	1000021e 	bne	r2,zero,40440e8 <_dtoa_r+0x11e0>
 40440e0:	4200004c 	andi	r8,r8,1
 40440e4:	403e7d1e 	bne	r8,zero,4043adc <__alt_data_end+0xfffd92dc>
 40440e8:	01000c04 	movi	r4,48
 40440ec:	00000106 	br	40440f4 <_dtoa_r+0x11ec>
 40440f0:	102f883a 	mov	r23,r2
 40440f4:	b8bfffc4 	addi	r2,r23,-1
 40440f8:	10c00007 	ldb	r3,0(r2)
 40440fc:	193ffc26 	beq	r3,r4,40440f0 <__alt_data_end+0xfffd98f0>
 4044100:	003e8706 	br	4043b20 <__alt_data_end+0xfffd9320>
 4044104:	d8800517 	ldw	r2,20(sp)
 4044108:	00a3c83a 	sub	r17,zero,r2
 404410c:	8800a426 	beq	r17,zero,40443a0 <_dtoa_r+0x1498>
 4044110:	888003cc 	andi	r2,r17,15
 4044114:	100490fa 	slli	r2,r2,3
 4044118:	00c10174 	movhi	r3,1029
 404411c:	18c0e804 	addi	r3,r3,928
 4044120:	1885883a 	add	r2,r3,r2
 4044124:	11800017 	ldw	r6,0(r2)
 4044128:	11c00117 	ldw	r7,4(r2)
 404412c:	9009883a 	mov	r4,r18
 4044130:	980b883a 	mov	r5,r19
 4044134:	8823d13a 	srai	r17,r17,4
 4044138:	404bdb00 	call	404bdb0 <__muldf3>
 404413c:	d8800f15 	stw	r2,60(sp)
 4044140:	d8c01015 	stw	r3,64(sp)
 4044144:	8800e826 	beq	r17,zero,40444e8 <_dtoa_r+0x15e0>
 4044148:	05010174 	movhi	r20,1029
 404414c:	a500de04 	addi	r20,r20,888
 4044150:	04000084 	movi	r16,2
 4044154:	8980004c 	andi	r6,r17,1
 4044158:	1009883a 	mov	r4,r2
 404415c:	8823d07a 	srai	r17,r17,1
 4044160:	180b883a 	mov	r5,r3
 4044164:	30000426 	beq	r6,zero,4044178 <_dtoa_r+0x1270>
 4044168:	a1800017 	ldw	r6,0(r20)
 404416c:	a1c00117 	ldw	r7,4(r20)
 4044170:	84000044 	addi	r16,r16,1
 4044174:	404bdb00 	call	404bdb0 <__muldf3>
 4044178:	a5000204 	addi	r20,r20,8
 404417c:	883ff51e 	bne	r17,zero,4044154 <__alt_data_end+0xfffd9954>
 4044180:	d8800f15 	stw	r2,60(sp)
 4044184:	d8c01015 	stw	r3,64(sp)
 4044188:	003c7606 	br	4043364 <__alt_data_end+0xfffd8b64>
 404418c:	00c00c04 	movi	r3,48
 4044190:	10c00005 	stb	r3,0(r2)
 4044194:	d8c00517 	ldw	r3,20(sp)
 4044198:	bd3fffc3 	ldbu	r20,-1(r23)
 404419c:	18c00044 	addi	r3,r3,1
 40441a0:	d8c00515 	stw	r3,20(sp)
 40441a4:	003db906 	br	404388c <__alt_data_end+0xfffd908c>
 40441a8:	89400117 	ldw	r5,4(r17)
 40441ac:	e009883a 	mov	r4,fp
 40441b0:	40465a40 	call	40465a4 <_Balloc>
 40441b4:	89800417 	ldw	r6,16(r17)
 40441b8:	89400304 	addi	r5,r17,12
 40441bc:	11000304 	addi	r4,r2,12
 40441c0:	31800084 	addi	r6,r6,2
 40441c4:	318d883a 	add	r6,r6,r6
 40441c8:	318d883a 	add	r6,r6,r6
 40441cc:	1027883a 	mov	r19,r2
 40441d0:	40461d80 	call	40461d8 <memcpy>
 40441d4:	01800044 	movi	r6,1
 40441d8:	980b883a 	mov	r5,r19
 40441dc:	e009883a 	mov	r4,fp
 40441e0:	4046d240 	call	4046d24 <__lshift>
 40441e4:	1029883a 	mov	r20,r2
 40441e8:	003ecc06 	br	4043d1c <__alt_data_end+0xfffd951c>
 40441ec:	00800e44 	movi	r2,57
 40441f0:	90809026 	beq	r18,r2,4044434 <_dtoa_r+0x152c>
 40441f4:	92000044 	addi	r8,r18,1
 40441f8:	003f1f06 	br	4043e78 <__alt_data_end+0xfffd9678>
 40441fc:	9011883a 	mov	r8,r18
 4044200:	8825883a 	mov	r18,r17
 4044204:	a023883a 	mov	r17,r20
 4044208:	003e2906 	br	4043ab0 <__alt_data_end+0xfffd92b0>
 404420c:	002b883a 	mov	r21,zero
 4044210:	0023883a 	mov	r17,zero
 4044214:	003f5406 	br	4043f68 <__alt_data_end+0xfffd9768>
 4044218:	61bfffc4 	addi	r6,r12,-1
 404421c:	300490fa 	slli	r2,r6,3
 4044220:	00c10174 	movhi	r3,1029
 4044224:	18c0e804 	addi	r3,r3,928
 4044228:	1885883a 	add	r2,r3,r2
 404422c:	11000017 	ldw	r4,0(r2)
 4044230:	11400117 	ldw	r5,4(r2)
 4044234:	d8800717 	ldw	r2,28(sp)
 4044238:	880f883a 	mov	r7,r17
 404423c:	d9801215 	stw	r6,72(sp)
 4044240:	800d883a 	mov	r6,r16
 4044244:	db001615 	stw	r12,88(sp)
 4044248:	15c00044 	addi	r23,r2,1
 404424c:	404bdb00 	call	404bdb0 <__muldf3>
 4044250:	d9401017 	ldw	r5,64(sp)
 4044254:	d9000f17 	ldw	r4,60(sp)
 4044258:	d8c01515 	stw	r3,84(sp)
 404425c:	d8801415 	stw	r2,80(sp)
 4044260:	404cdc40 	call	404cdc4 <__fixdfsi>
 4044264:	1009883a 	mov	r4,r2
 4044268:	1021883a 	mov	r16,r2
 404426c:	404ce440 	call	404ce44 <__floatsidf>
 4044270:	d9000f17 	ldw	r4,60(sp)
 4044274:	d9401017 	ldw	r5,64(sp)
 4044278:	100d883a 	mov	r6,r2
 404427c:	180f883a 	mov	r7,r3
 4044280:	404c4c80 	call	404c4c8 <__subdf3>
 4044284:	1829883a 	mov	r20,r3
 4044288:	d8c00717 	ldw	r3,28(sp)
 404428c:	84000c04 	addi	r16,r16,48
 4044290:	1023883a 	mov	r17,r2
 4044294:	1c000005 	stb	r16,0(r3)
 4044298:	db001617 	ldw	r12,88(sp)
 404429c:	00800044 	movi	r2,1
 40442a0:	60802226 	beq	r12,r2,404432c <_dtoa_r+0x1424>
 40442a4:	d9c00717 	ldw	r7,28(sp)
 40442a8:	8805883a 	mov	r2,r17
 40442ac:	b82b883a 	mov	r21,r23
 40442b0:	3b19883a 	add	r12,r7,r12
 40442b4:	6023883a 	mov	r17,r12
 40442b8:	a007883a 	mov	r3,r20
 40442bc:	dc800f15 	stw	r18,60(sp)
 40442c0:	000d883a 	mov	r6,zero
 40442c4:	01d00934 	movhi	r7,16420
 40442c8:	1009883a 	mov	r4,r2
 40442cc:	180b883a 	mov	r5,r3
 40442d0:	404bdb00 	call	404bdb0 <__muldf3>
 40442d4:	180b883a 	mov	r5,r3
 40442d8:	1009883a 	mov	r4,r2
 40442dc:	1829883a 	mov	r20,r3
 40442e0:	1025883a 	mov	r18,r2
 40442e4:	404cdc40 	call	404cdc4 <__fixdfsi>
 40442e8:	1009883a 	mov	r4,r2
 40442ec:	1021883a 	mov	r16,r2
 40442f0:	404ce440 	call	404ce44 <__floatsidf>
 40442f4:	100d883a 	mov	r6,r2
 40442f8:	180f883a 	mov	r7,r3
 40442fc:	9009883a 	mov	r4,r18
 4044300:	a00b883a 	mov	r5,r20
 4044304:	84000c04 	addi	r16,r16,48
 4044308:	404c4c80 	call	404c4c8 <__subdf3>
 404430c:	ad400044 	addi	r21,r21,1
 4044310:	ac3fffc5 	stb	r16,-1(r21)
 4044314:	ac7fea1e 	bne	r21,r17,40442c0 <__alt_data_end+0xfffd9ac0>
 4044318:	1023883a 	mov	r17,r2
 404431c:	d8801217 	ldw	r2,72(sp)
 4044320:	dc800f17 	ldw	r18,60(sp)
 4044324:	1829883a 	mov	r20,r3
 4044328:	b8af883a 	add	r23,r23,r2
 404432c:	d9001417 	ldw	r4,80(sp)
 4044330:	d9401517 	ldw	r5,84(sp)
 4044334:	000d883a 	mov	r6,zero
 4044338:	01cff834 	movhi	r7,16352
 404433c:	404a9c40 	call	404a9c4 <__adddf3>
 4044340:	880d883a 	mov	r6,r17
 4044344:	a00f883a 	mov	r7,r20
 4044348:	1009883a 	mov	r4,r2
 404434c:	180b883a 	mov	r5,r3
 4044350:	404bcbc0 	call	404bcbc <__ledf2>
 4044354:	10003e0e 	bge	r2,zero,4044450 <_dtoa_r+0x1548>
 4044358:	d9001317 	ldw	r4,76(sp)
 404435c:	bd3fffc3 	ldbu	r20,-1(r23)
 4044360:	d9000515 	stw	r4,20(sp)
 4044364:	003d3b06 	br	4043854 <__alt_data_end+0xfffd9054>
 4044368:	0027883a 	mov	r19,zero
 404436c:	003f1b06 	br	4043fdc <__alt_data_end+0xfffd97dc>
 4044370:	d8800817 	ldw	r2,32(sp)
 4044374:	11e9c83a 	sub	r20,r2,r7
 4044378:	0005883a 	mov	r2,zero
 404437c:	003d5406 	br	40438d0 <__alt_data_end+0xfffd90d0>
 4044380:	00800044 	movi	r2,1
 4044384:	003dc706 	br	4043aa4 <__alt_data_end+0xfffd92a4>
 4044388:	d8c00217 	ldw	r3,8(sp)
 404438c:	00800d84 	movi	r2,54
 4044390:	dd400a17 	ldw	r21,40(sp)
 4044394:	10c5c83a 	sub	r2,r2,r3
 4044398:	dd000817 	ldw	r20,32(sp)
 404439c:	003d4c06 	br	40438d0 <__alt_data_end+0xfffd90d0>
 40443a0:	dc800f15 	stw	r18,60(sp)
 40443a4:	dcc01015 	stw	r19,64(sp)
 40443a8:	04000084 	movi	r16,2
 40443ac:	003bed06 	br	4043364 <__alt_data_end+0xfffd8b64>
 40443b0:	d9000617 	ldw	r4,24(sp)
 40443b4:	203f0d26 	beq	r4,zero,4043fec <__alt_data_end+0xfffd97ec>
 40443b8:	d9800c17 	ldw	r6,48(sp)
 40443bc:	01bcab0e 	bge	zero,r6,404366c <__alt_data_end+0xfffd8e6c>
 40443c0:	d9401017 	ldw	r5,64(sp)
 40443c4:	d9000f17 	ldw	r4,60(sp)
 40443c8:	000d883a 	mov	r6,zero
 40443cc:	01d00934 	movhi	r7,16420
 40443d0:	404bdb00 	call	404bdb0 <__muldf3>
 40443d4:	81000044 	addi	r4,r16,1
 40443d8:	d8800f15 	stw	r2,60(sp)
 40443dc:	d8c01015 	stw	r3,64(sp)
 40443e0:	404ce440 	call	404ce44 <__floatsidf>
 40443e4:	d9800f17 	ldw	r6,60(sp)
 40443e8:	d9c01017 	ldw	r7,64(sp)
 40443ec:	1009883a 	mov	r4,r2
 40443f0:	180b883a 	mov	r5,r3
 40443f4:	404bdb00 	call	404bdb0 <__muldf3>
 40443f8:	01d00734 	movhi	r7,16412
 40443fc:	000d883a 	mov	r6,zero
 4044400:	1009883a 	mov	r4,r2
 4044404:	180b883a 	mov	r5,r3
 4044408:	404a9c40 	call	404a9c4 <__adddf3>
 404440c:	d9c00517 	ldw	r7,20(sp)
 4044410:	047f3034 	movhi	r17,64704
 4044414:	1021883a 	mov	r16,r2
 4044418:	39ffffc4 	addi	r7,r7,-1
 404441c:	d9c01315 	stw	r7,76(sp)
 4044420:	1c63883a 	add	r17,r3,r17
 4044424:	db000c17 	ldw	r12,48(sp)
 4044428:	003bea06 	br	40433d4 <__alt_data_end+0xfffd8bd4>
 404442c:	dc000915 	stw	r16,36(sp)
 4044430:	003e0e06 	br	4043c6c <__alt_data_end+0xfffd946c>
 4044434:	01000e44 	movi	r4,57
 4044438:	8825883a 	mov	r18,r17
 404443c:	9dc00044 	addi	r23,r19,1
 4044440:	99000005 	stb	r4,0(r19)
 4044444:	a023883a 	mov	r17,r20
 4044448:	dc000915 	stw	r16,36(sp)
 404444c:	003da406 	br	4043ae0 <__alt_data_end+0xfffd92e0>
 4044450:	d9801417 	ldw	r6,80(sp)
 4044454:	d9c01517 	ldw	r7,84(sp)
 4044458:	0009883a 	mov	r4,zero
 404445c:	014ff834 	movhi	r5,16352
 4044460:	404c4c80 	call	404c4c8 <__subdf3>
 4044464:	880d883a 	mov	r6,r17
 4044468:	a00f883a 	mov	r7,r20
 404446c:	1009883a 	mov	r4,r2
 4044470:	180b883a 	mov	r5,r3
 4044474:	404bbe00 	call	404bbe0 <__gedf2>
 4044478:	00bc7c0e 	bge	zero,r2,404366c <__alt_data_end+0xfffd8e6c>
 404447c:	01000c04 	movi	r4,48
 4044480:	00000106 	br	4044488 <_dtoa_r+0x1580>
 4044484:	102f883a 	mov	r23,r2
 4044488:	b8bfffc4 	addi	r2,r23,-1
 404448c:	10c00007 	ldb	r3,0(r2)
 4044490:	193ffc26 	beq	r3,r4,4044484 <__alt_data_end+0xfffd9c84>
 4044494:	d9801317 	ldw	r6,76(sp)
 4044498:	d9800515 	stw	r6,20(sp)
 404449c:	003c4406 	br	40435b0 <__alt_data_end+0xfffd8db0>
 40444a0:	d9801317 	ldw	r6,76(sp)
 40444a4:	d9800515 	stw	r6,20(sp)
 40444a8:	003cea06 	br	4043854 <__alt_data_end+0xfffd9054>
 40444ac:	dd800f17 	ldw	r22,60(sp)
 40444b0:	dcc01017 	ldw	r19,64(sp)
 40444b4:	dc801217 	ldw	r18,72(sp)
 40444b8:	003c6c06 	br	404366c <__alt_data_end+0xfffd8e6c>
 40444bc:	903e031e 	bne	r18,zero,4043ccc <__alt_data_end+0xfffd94cc>
 40444c0:	003ebb06 	br	4043fb0 <__alt_data_end+0xfffd97b0>
 40444c4:	103e6c1e 	bne	r2,zero,4043e78 <__alt_data_end+0xfffd9678>
 40444c8:	4080004c 	andi	r2,r8,1
 40444cc:	103e6a26 	beq	r2,zero,4043e78 <__alt_data_end+0xfffd9678>
 40444d0:	003e6606 	br	4043e6c <__alt_data_end+0xfffd966c>
 40444d4:	d8c00317 	ldw	r3,12(sp)
 40444d8:	00800084 	movi	r2,2
 40444dc:	10c02916 	blt	r2,r3,4044584 <_dtoa_r+0x167c>
 40444e0:	d9000c17 	ldw	r4,48(sp)
 40444e4:	003e8806 	br	4043f08 <__alt_data_end+0xfffd9708>
 40444e8:	04000084 	movi	r16,2
 40444ec:	003b9d06 	br	4043364 <__alt_data_end+0xfffd8b64>
 40444f0:	d9001317 	ldw	r4,76(sp)
 40444f4:	d9000515 	stw	r4,20(sp)
 40444f8:	003cd606 	br	4043854 <__alt_data_end+0xfffd9054>
 40444fc:	d8801317 	ldw	r2,76(sp)
 4044500:	d8800515 	stw	r2,20(sp)
 4044504:	003c2a06 	br	40435b0 <__alt_data_end+0xfffd8db0>
 4044508:	d9800317 	ldw	r6,12(sp)
 404450c:	00800084 	movi	r2,2
 4044510:	11801516 	blt	r2,r6,4044568 <_dtoa_r+0x1660>
 4044514:	d9c00c17 	ldw	r7,48(sp)
 4044518:	d9c00615 	stw	r7,24(sp)
 404451c:	003df706 	br	4043cfc <__alt_data_end+0xfffd94fc>
 4044520:	193d3926 	beq	r3,r4,4043a08 <__alt_data_end+0xfffd9208>
 4044524:	00c00f04 	movi	r3,60
 4044528:	1885c83a 	sub	r2,r3,r2
 404452c:	003ddf06 	br	4043cac <__alt_data_end+0xfffd94ac>
 4044530:	e009883a 	mov	r4,fp
 4044534:	e0001115 	stw	zero,68(fp)
 4044538:	000b883a 	mov	r5,zero
 404453c:	40465a40 	call	40465a4 <_Balloc>
 4044540:	d8800715 	stw	r2,28(sp)
 4044544:	d8c00717 	ldw	r3,28(sp)
 4044548:	00bfffc4 	movi	r2,-1
 404454c:	01000044 	movi	r4,1
 4044550:	d8800c15 	stw	r2,48(sp)
 4044554:	e0c01015 	stw	r3,64(fp)
 4044558:	d9000b15 	stw	r4,44(sp)
 404455c:	d8800615 	stw	r2,24(sp)
 4044560:	d8002215 	stw	zero,136(sp)
 4044564:	003c4106 	br	404366c <__alt_data_end+0xfffd8e6c>
 4044568:	d8c00c17 	ldw	r3,48(sp)
 404456c:	d8c00615 	stw	r3,24(sp)
 4044570:	003e7006 	br	4043f34 <__alt_data_end+0xfffd9734>
 4044574:	04400044 	movi	r17,1
 4044578:	003b2006 	br	40431fc <__alt_data_end+0xfffd89fc>
 404457c:	000b883a 	mov	r5,zero
 4044580:	003b3d06 	br	4043278 <__alt_data_end+0xfffd8a78>
 4044584:	d8800c17 	ldw	r2,48(sp)
 4044588:	d8800615 	stw	r2,24(sp)
 404458c:	003e6906 	br	4043f34 <__alt_data_end+0xfffd9734>

04044590 <__sflush_r>:
 4044590:	2880030b 	ldhu	r2,12(r5)
 4044594:	defffb04 	addi	sp,sp,-20
 4044598:	dcc00315 	stw	r19,12(sp)
 404459c:	dc400115 	stw	r17,4(sp)
 40445a0:	dfc00415 	stw	ra,16(sp)
 40445a4:	dc800215 	stw	r18,8(sp)
 40445a8:	dc000015 	stw	r16,0(sp)
 40445ac:	10c0020c 	andi	r3,r2,8
 40445b0:	2823883a 	mov	r17,r5
 40445b4:	2027883a 	mov	r19,r4
 40445b8:	1800311e 	bne	r3,zero,4044680 <__sflush_r+0xf0>
 40445bc:	28c00117 	ldw	r3,4(r5)
 40445c0:	10820014 	ori	r2,r2,2048
 40445c4:	2880030d 	sth	r2,12(r5)
 40445c8:	00c04b0e 	bge	zero,r3,40446f8 <__sflush_r+0x168>
 40445cc:	8a000a17 	ldw	r8,40(r17)
 40445d0:	40002326 	beq	r8,zero,4044660 <__sflush_r+0xd0>
 40445d4:	9c000017 	ldw	r16,0(r19)
 40445d8:	10c4000c 	andi	r3,r2,4096
 40445dc:	98000015 	stw	zero,0(r19)
 40445e0:	18004826 	beq	r3,zero,4044704 <__sflush_r+0x174>
 40445e4:	89801417 	ldw	r6,80(r17)
 40445e8:	10c0010c 	andi	r3,r2,4
 40445ec:	18000626 	beq	r3,zero,4044608 <__sflush_r+0x78>
 40445f0:	88c00117 	ldw	r3,4(r17)
 40445f4:	88800c17 	ldw	r2,48(r17)
 40445f8:	30cdc83a 	sub	r6,r6,r3
 40445fc:	10000226 	beq	r2,zero,4044608 <__sflush_r+0x78>
 4044600:	88800f17 	ldw	r2,60(r17)
 4044604:	308dc83a 	sub	r6,r6,r2
 4044608:	89400717 	ldw	r5,28(r17)
 404460c:	000f883a 	mov	r7,zero
 4044610:	9809883a 	mov	r4,r19
 4044614:	403ee83a 	callr	r8
 4044618:	00ffffc4 	movi	r3,-1
 404461c:	10c04426 	beq	r2,r3,4044730 <__sflush_r+0x1a0>
 4044620:	88c0030b 	ldhu	r3,12(r17)
 4044624:	89000417 	ldw	r4,16(r17)
 4044628:	88000115 	stw	zero,4(r17)
 404462c:	197dffcc 	andi	r5,r3,63487
 4044630:	8940030d 	sth	r5,12(r17)
 4044634:	89000015 	stw	r4,0(r17)
 4044638:	18c4000c 	andi	r3,r3,4096
 404463c:	18002c1e 	bne	r3,zero,40446f0 <__sflush_r+0x160>
 4044640:	89400c17 	ldw	r5,48(r17)
 4044644:	9c000015 	stw	r16,0(r19)
 4044648:	28000526 	beq	r5,zero,4044660 <__sflush_r+0xd0>
 404464c:	88801004 	addi	r2,r17,64
 4044650:	28800226 	beq	r5,r2,404465c <__sflush_r+0xcc>
 4044654:	9809883a 	mov	r4,r19
 4044658:	4044cfc0 	call	4044cfc <_free_r>
 404465c:	88000c15 	stw	zero,48(r17)
 4044660:	0005883a 	mov	r2,zero
 4044664:	dfc00417 	ldw	ra,16(sp)
 4044668:	dcc00317 	ldw	r19,12(sp)
 404466c:	dc800217 	ldw	r18,8(sp)
 4044670:	dc400117 	ldw	r17,4(sp)
 4044674:	dc000017 	ldw	r16,0(sp)
 4044678:	dec00504 	addi	sp,sp,20
 404467c:	f800283a 	ret
 4044680:	2c800417 	ldw	r18,16(r5)
 4044684:	903ff626 	beq	r18,zero,4044660 <__alt_data_end+0xfffd9e60>
 4044688:	2c000017 	ldw	r16,0(r5)
 404468c:	108000cc 	andi	r2,r2,3
 4044690:	2c800015 	stw	r18,0(r5)
 4044694:	84a1c83a 	sub	r16,r16,r18
 4044698:	1000131e 	bne	r2,zero,40446e8 <__sflush_r+0x158>
 404469c:	28800517 	ldw	r2,20(r5)
 40446a0:	88800215 	stw	r2,8(r17)
 40446a4:	04000316 	blt	zero,r16,40446b4 <__sflush_r+0x124>
 40446a8:	003fed06 	br	4044660 <__alt_data_end+0xfffd9e60>
 40446ac:	90a5883a 	add	r18,r18,r2
 40446b0:	043feb0e 	bge	zero,r16,4044660 <__alt_data_end+0xfffd9e60>
 40446b4:	88800917 	ldw	r2,36(r17)
 40446b8:	89400717 	ldw	r5,28(r17)
 40446bc:	800f883a 	mov	r7,r16
 40446c0:	900d883a 	mov	r6,r18
 40446c4:	9809883a 	mov	r4,r19
 40446c8:	103ee83a 	callr	r2
 40446cc:	80a1c83a 	sub	r16,r16,r2
 40446d0:	00bff616 	blt	zero,r2,40446ac <__alt_data_end+0xfffd9eac>
 40446d4:	88c0030b 	ldhu	r3,12(r17)
 40446d8:	00bfffc4 	movi	r2,-1
 40446dc:	18c01014 	ori	r3,r3,64
 40446e0:	88c0030d 	sth	r3,12(r17)
 40446e4:	003fdf06 	br	4044664 <__alt_data_end+0xfffd9e64>
 40446e8:	0005883a 	mov	r2,zero
 40446ec:	003fec06 	br	40446a0 <__alt_data_end+0xfffd9ea0>
 40446f0:	88801415 	stw	r2,80(r17)
 40446f4:	003fd206 	br	4044640 <__alt_data_end+0xfffd9e40>
 40446f8:	28c00f17 	ldw	r3,60(r5)
 40446fc:	00ffb316 	blt	zero,r3,40445cc <__alt_data_end+0xfffd9dcc>
 4044700:	003fd706 	br	4044660 <__alt_data_end+0xfffd9e60>
 4044704:	89400717 	ldw	r5,28(r17)
 4044708:	000d883a 	mov	r6,zero
 404470c:	01c00044 	movi	r7,1
 4044710:	9809883a 	mov	r4,r19
 4044714:	403ee83a 	callr	r8
 4044718:	100d883a 	mov	r6,r2
 404471c:	00bfffc4 	movi	r2,-1
 4044720:	30801426 	beq	r6,r2,4044774 <__sflush_r+0x1e4>
 4044724:	8880030b 	ldhu	r2,12(r17)
 4044728:	8a000a17 	ldw	r8,40(r17)
 404472c:	003fae06 	br	40445e8 <__alt_data_end+0xfffd9de8>
 4044730:	98c00017 	ldw	r3,0(r19)
 4044734:	183fba26 	beq	r3,zero,4044620 <__alt_data_end+0xfffd9e20>
 4044738:	01000744 	movi	r4,29
 404473c:	19000626 	beq	r3,r4,4044758 <__sflush_r+0x1c8>
 4044740:	01000584 	movi	r4,22
 4044744:	19000426 	beq	r3,r4,4044758 <__sflush_r+0x1c8>
 4044748:	88c0030b 	ldhu	r3,12(r17)
 404474c:	18c01014 	ori	r3,r3,64
 4044750:	88c0030d 	sth	r3,12(r17)
 4044754:	003fc306 	br	4044664 <__alt_data_end+0xfffd9e64>
 4044758:	8880030b 	ldhu	r2,12(r17)
 404475c:	88c00417 	ldw	r3,16(r17)
 4044760:	88000115 	stw	zero,4(r17)
 4044764:	10bdffcc 	andi	r2,r2,63487
 4044768:	8880030d 	sth	r2,12(r17)
 404476c:	88c00015 	stw	r3,0(r17)
 4044770:	003fb306 	br	4044640 <__alt_data_end+0xfffd9e40>
 4044774:	98800017 	ldw	r2,0(r19)
 4044778:	103fea26 	beq	r2,zero,4044724 <__alt_data_end+0xfffd9f24>
 404477c:	00c00744 	movi	r3,29
 4044780:	10c00226 	beq	r2,r3,404478c <__sflush_r+0x1fc>
 4044784:	00c00584 	movi	r3,22
 4044788:	10c0031e 	bne	r2,r3,4044798 <__sflush_r+0x208>
 404478c:	9c000015 	stw	r16,0(r19)
 4044790:	0005883a 	mov	r2,zero
 4044794:	003fb306 	br	4044664 <__alt_data_end+0xfffd9e64>
 4044798:	88c0030b 	ldhu	r3,12(r17)
 404479c:	3005883a 	mov	r2,r6
 40447a0:	18c01014 	ori	r3,r3,64
 40447a4:	88c0030d 	sth	r3,12(r17)
 40447a8:	003fae06 	br	4044664 <__alt_data_end+0xfffd9e64>

040447ac <_fflush_r>:
 40447ac:	defffd04 	addi	sp,sp,-12
 40447b0:	dc000115 	stw	r16,4(sp)
 40447b4:	dfc00215 	stw	ra,8(sp)
 40447b8:	2021883a 	mov	r16,r4
 40447bc:	20000226 	beq	r4,zero,40447c8 <_fflush_r+0x1c>
 40447c0:	20800e17 	ldw	r2,56(r4)
 40447c4:	10000c26 	beq	r2,zero,40447f8 <_fflush_r+0x4c>
 40447c8:	2880030f 	ldh	r2,12(r5)
 40447cc:	1000051e 	bne	r2,zero,40447e4 <_fflush_r+0x38>
 40447d0:	0005883a 	mov	r2,zero
 40447d4:	dfc00217 	ldw	ra,8(sp)
 40447d8:	dc000117 	ldw	r16,4(sp)
 40447dc:	dec00304 	addi	sp,sp,12
 40447e0:	f800283a 	ret
 40447e4:	8009883a 	mov	r4,r16
 40447e8:	dfc00217 	ldw	ra,8(sp)
 40447ec:	dc000117 	ldw	r16,4(sp)
 40447f0:	dec00304 	addi	sp,sp,12
 40447f4:	40445901 	jmpi	4044590 <__sflush_r>
 40447f8:	d9400015 	stw	r5,0(sp)
 40447fc:	4044b880 	call	4044b88 <__sinit>
 4044800:	d9400017 	ldw	r5,0(sp)
 4044804:	003ff006 	br	40447c8 <__alt_data_end+0xfffd9fc8>

04044808 <fflush>:
 4044808:	20000526 	beq	r4,zero,4044820 <fflush+0x18>
 404480c:	00810174 	movhi	r2,1029
 4044810:	10885104 	addi	r2,r2,8516
 4044814:	200b883a 	mov	r5,r4
 4044818:	11000017 	ldw	r4,0(r2)
 404481c:	40447ac1 	jmpi	40447ac <_fflush_r>
 4044820:	00810174 	movhi	r2,1029
 4044824:	10885004 	addi	r2,r2,8512
 4044828:	11000017 	ldw	r4,0(r2)
 404482c:	01410134 	movhi	r5,1028
 4044830:	2951eb04 	addi	r5,r5,18348
 4044834:	404558c1 	jmpi	404558c <_fwalk_reent>

04044838 <__fp_unlock>:
 4044838:	0005883a 	mov	r2,zero
 404483c:	f800283a 	ret

04044840 <_cleanup_r>:
 4044840:	01410174 	movhi	r5,1029
 4044844:	29656904 	addi	r5,r5,-27228
 4044848:	404558c1 	jmpi	404558c <_fwalk_reent>

0404484c <__sinit.part.1>:
 404484c:	defff704 	addi	sp,sp,-36
 4044850:	00c10134 	movhi	r3,1028
 4044854:	dfc00815 	stw	ra,32(sp)
 4044858:	ddc00715 	stw	r23,28(sp)
 404485c:	dd800615 	stw	r22,24(sp)
 4044860:	dd400515 	stw	r21,20(sp)
 4044864:	dd000415 	stw	r20,16(sp)
 4044868:	dcc00315 	stw	r19,12(sp)
 404486c:	dc800215 	stw	r18,8(sp)
 4044870:	dc400115 	stw	r17,4(sp)
 4044874:	dc000015 	stw	r16,0(sp)
 4044878:	18d21004 	addi	r3,r3,18496
 404487c:	24000117 	ldw	r16,4(r4)
 4044880:	20c00f15 	stw	r3,60(r4)
 4044884:	2080bb04 	addi	r2,r4,748
 4044888:	00c000c4 	movi	r3,3
 404488c:	20c0b915 	stw	r3,740(r4)
 4044890:	2080ba15 	stw	r2,744(r4)
 4044894:	2000b815 	stw	zero,736(r4)
 4044898:	05c00204 	movi	r23,8
 404489c:	00800104 	movi	r2,4
 40448a0:	2025883a 	mov	r18,r4
 40448a4:	b80d883a 	mov	r6,r23
 40448a8:	81001704 	addi	r4,r16,92
 40448ac:	000b883a 	mov	r5,zero
 40448b0:	80000015 	stw	zero,0(r16)
 40448b4:	80000115 	stw	zero,4(r16)
 40448b8:	80000215 	stw	zero,8(r16)
 40448bc:	8080030d 	sth	r2,12(r16)
 40448c0:	80001915 	stw	zero,100(r16)
 40448c4:	8000038d 	sth	zero,14(r16)
 40448c8:	80000415 	stw	zero,16(r16)
 40448cc:	80000515 	stw	zero,20(r16)
 40448d0:	80000615 	stw	zero,24(r16)
 40448d4:	404647c0 	call	404647c <memset>
 40448d8:	05810134 	movhi	r22,1028
 40448dc:	94400217 	ldw	r17,8(r18)
 40448e0:	05410134 	movhi	r21,1028
 40448e4:	05010134 	movhi	r20,1028
 40448e8:	04c10134 	movhi	r19,1028
 40448ec:	b59ef304 	addi	r22,r22,31692
 40448f0:	ad5f0a04 	addi	r21,r21,31784
 40448f4:	a51f2904 	addi	r20,r20,31908
 40448f8:	9cdf4004 	addi	r19,r19,32000
 40448fc:	85800815 	stw	r22,32(r16)
 4044900:	85400915 	stw	r21,36(r16)
 4044904:	85000a15 	stw	r20,40(r16)
 4044908:	84c00b15 	stw	r19,44(r16)
 404490c:	84000715 	stw	r16,28(r16)
 4044910:	00800284 	movi	r2,10
 4044914:	8880030d 	sth	r2,12(r17)
 4044918:	00800044 	movi	r2,1
 404491c:	b80d883a 	mov	r6,r23
 4044920:	89001704 	addi	r4,r17,92
 4044924:	000b883a 	mov	r5,zero
 4044928:	88000015 	stw	zero,0(r17)
 404492c:	88000115 	stw	zero,4(r17)
 4044930:	88000215 	stw	zero,8(r17)
 4044934:	88001915 	stw	zero,100(r17)
 4044938:	8880038d 	sth	r2,14(r17)
 404493c:	88000415 	stw	zero,16(r17)
 4044940:	88000515 	stw	zero,20(r17)
 4044944:	88000615 	stw	zero,24(r17)
 4044948:	404647c0 	call	404647c <memset>
 404494c:	94000317 	ldw	r16,12(r18)
 4044950:	00800484 	movi	r2,18
 4044954:	8c400715 	stw	r17,28(r17)
 4044958:	8d800815 	stw	r22,32(r17)
 404495c:	8d400915 	stw	r21,36(r17)
 4044960:	8d000a15 	stw	r20,40(r17)
 4044964:	8cc00b15 	stw	r19,44(r17)
 4044968:	8080030d 	sth	r2,12(r16)
 404496c:	00800084 	movi	r2,2
 4044970:	80000015 	stw	zero,0(r16)
 4044974:	80000115 	stw	zero,4(r16)
 4044978:	80000215 	stw	zero,8(r16)
 404497c:	80001915 	stw	zero,100(r16)
 4044980:	8080038d 	sth	r2,14(r16)
 4044984:	80000415 	stw	zero,16(r16)
 4044988:	80000515 	stw	zero,20(r16)
 404498c:	80000615 	stw	zero,24(r16)
 4044990:	b80d883a 	mov	r6,r23
 4044994:	000b883a 	mov	r5,zero
 4044998:	81001704 	addi	r4,r16,92
 404499c:	404647c0 	call	404647c <memset>
 40449a0:	00800044 	movi	r2,1
 40449a4:	84000715 	stw	r16,28(r16)
 40449a8:	85800815 	stw	r22,32(r16)
 40449ac:	85400915 	stw	r21,36(r16)
 40449b0:	85000a15 	stw	r20,40(r16)
 40449b4:	84c00b15 	stw	r19,44(r16)
 40449b8:	90800e15 	stw	r2,56(r18)
 40449bc:	dfc00817 	ldw	ra,32(sp)
 40449c0:	ddc00717 	ldw	r23,28(sp)
 40449c4:	dd800617 	ldw	r22,24(sp)
 40449c8:	dd400517 	ldw	r21,20(sp)
 40449cc:	dd000417 	ldw	r20,16(sp)
 40449d0:	dcc00317 	ldw	r19,12(sp)
 40449d4:	dc800217 	ldw	r18,8(sp)
 40449d8:	dc400117 	ldw	r17,4(sp)
 40449dc:	dc000017 	ldw	r16,0(sp)
 40449e0:	dec00904 	addi	sp,sp,36
 40449e4:	f800283a 	ret

040449e8 <__fp_lock>:
 40449e8:	0005883a 	mov	r2,zero
 40449ec:	f800283a 	ret

040449f0 <__sfmoreglue>:
 40449f0:	defffc04 	addi	sp,sp,-16
 40449f4:	dc400115 	stw	r17,4(sp)
 40449f8:	2c7fffc4 	addi	r17,r5,-1
 40449fc:	8c401a24 	muli	r17,r17,104
 4044a00:	dc800215 	stw	r18,8(sp)
 4044a04:	2825883a 	mov	r18,r5
 4044a08:	89401d04 	addi	r5,r17,116
 4044a0c:	dc000015 	stw	r16,0(sp)
 4044a10:	dfc00315 	stw	ra,12(sp)
 4044a14:	40458e80 	call	40458e8 <_malloc_r>
 4044a18:	1021883a 	mov	r16,r2
 4044a1c:	10000726 	beq	r2,zero,4044a3c <__sfmoreglue+0x4c>
 4044a20:	11000304 	addi	r4,r2,12
 4044a24:	10000015 	stw	zero,0(r2)
 4044a28:	14800115 	stw	r18,4(r2)
 4044a2c:	11000215 	stw	r4,8(r2)
 4044a30:	89801a04 	addi	r6,r17,104
 4044a34:	000b883a 	mov	r5,zero
 4044a38:	404647c0 	call	404647c <memset>
 4044a3c:	8005883a 	mov	r2,r16
 4044a40:	dfc00317 	ldw	ra,12(sp)
 4044a44:	dc800217 	ldw	r18,8(sp)
 4044a48:	dc400117 	ldw	r17,4(sp)
 4044a4c:	dc000017 	ldw	r16,0(sp)
 4044a50:	dec00404 	addi	sp,sp,16
 4044a54:	f800283a 	ret

04044a58 <__sfp>:
 4044a58:	defffb04 	addi	sp,sp,-20
 4044a5c:	dc000015 	stw	r16,0(sp)
 4044a60:	04010174 	movhi	r16,1029
 4044a64:	84085004 	addi	r16,r16,8512
 4044a68:	dcc00315 	stw	r19,12(sp)
 4044a6c:	2027883a 	mov	r19,r4
 4044a70:	81000017 	ldw	r4,0(r16)
 4044a74:	dfc00415 	stw	ra,16(sp)
 4044a78:	dc800215 	stw	r18,8(sp)
 4044a7c:	20800e17 	ldw	r2,56(r4)
 4044a80:	dc400115 	stw	r17,4(sp)
 4044a84:	1000021e 	bne	r2,zero,4044a90 <__sfp+0x38>
 4044a88:	404484c0 	call	404484c <__sinit.part.1>
 4044a8c:	81000017 	ldw	r4,0(r16)
 4044a90:	2480b804 	addi	r18,r4,736
 4044a94:	047fffc4 	movi	r17,-1
 4044a98:	91000117 	ldw	r4,4(r18)
 4044a9c:	94000217 	ldw	r16,8(r18)
 4044aa0:	213fffc4 	addi	r4,r4,-1
 4044aa4:	20000a16 	blt	r4,zero,4044ad0 <__sfp+0x78>
 4044aa8:	8080030f 	ldh	r2,12(r16)
 4044aac:	10000c26 	beq	r2,zero,4044ae0 <__sfp+0x88>
 4044ab0:	80c01d04 	addi	r3,r16,116
 4044ab4:	00000206 	br	4044ac0 <__sfp+0x68>
 4044ab8:	18bfe60f 	ldh	r2,-104(r3)
 4044abc:	10000826 	beq	r2,zero,4044ae0 <__sfp+0x88>
 4044ac0:	213fffc4 	addi	r4,r4,-1
 4044ac4:	1c3ffd04 	addi	r16,r3,-12
 4044ac8:	18c01a04 	addi	r3,r3,104
 4044acc:	247ffa1e 	bne	r4,r17,4044ab8 <__alt_data_end+0xfffda2b8>
 4044ad0:	90800017 	ldw	r2,0(r18)
 4044ad4:	10001d26 	beq	r2,zero,4044b4c <__sfp+0xf4>
 4044ad8:	1025883a 	mov	r18,r2
 4044adc:	003fee06 	br	4044a98 <__alt_data_end+0xfffda298>
 4044ae0:	00bfffc4 	movi	r2,-1
 4044ae4:	8080038d 	sth	r2,14(r16)
 4044ae8:	00800044 	movi	r2,1
 4044aec:	8080030d 	sth	r2,12(r16)
 4044af0:	80001915 	stw	zero,100(r16)
 4044af4:	80000015 	stw	zero,0(r16)
 4044af8:	80000215 	stw	zero,8(r16)
 4044afc:	80000115 	stw	zero,4(r16)
 4044b00:	80000415 	stw	zero,16(r16)
 4044b04:	80000515 	stw	zero,20(r16)
 4044b08:	80000615 	stw	zero,24(r16)
 4044b0c:	01800204 	movi	r6,8
 4044b10:	000b883a 	mov	r5,zero
 4044b14:	81001704 	addi	r4,r16,92
 4044b18:	404647c0 	call	404647c <memset>
 4044b1c:	8005883a 	mov	r2,r16
 4044b20:	80000c15 	stw	zero,48(r16)
 4044b24:	80000d15 	stw	zero,52(r16)
 4044b28:	80001115 	stw	zero,68(r16)
 4044b2c:	80001215 	stw	zero,72(r16)
 4044b30:	dfc00417 	ldw	ra,16(sp)
 4044b34:	dcc00317 	ldw	r19,12(sp)
 4044b38:	dc800217 	ldw	r18,8(sp)
 4044b3c:	dc400117 	ldw	r17,4(sp)
 4044b40:	dc000017 	ldw	r16,0(sp)
 4044b44:	dec00504 	addi	sp,sp,20
 4044b48:	f800283a 	ret
 4044b4c:	01400104 	movi	r5,4
 4044b50:	9809883a 	mov	r4,r19
 4044b54:	40449f00 	call	40449f0 <__sfmoreglue>
 4044b58:	90800015 	stw	r2,0(r18)
 4044b5c:	103fde1e 	bne	r2,zero,4044ad8 <__alt_data_end+0xfffda2d8>
 4044b60:	00800304 	movi	r2,12
 4044b64:	98800015 	stw	r2,0(r19)
 4044b68:	0005883a 	mov	r2,zero
 4044b6c:	003ff006 	br	4044b30 <__alt_data_end+0xfffda330>

04044b70 <_cleanup>:
 4044b70:	00810174 	movhi	r2,1029
 4044b74:	10885004 	addi	r2,r2,8512
 4044b78:	11000017 	ldw	r4,0(r2)
 4044b7c:	01410174 	movhi	r5,1029
 4044b80:	29656904 	addi	r5,r5,-27228
 4044b84:	404558c1 	jmpi	404558c <_fwalk_reent>

04044b88 <__sinit>:
 4044b88:	20800e17 	ldw	r2,56(r4)
 4044b8c:	10000126 	beq	r2,zero,4044b94 <__sinit+0xc>
 4044b90:	f800283a 	ret
 4044b94:	404484c1 	jmpi	404484c <__sinit.part.1>

04044b98 <__sfp_lock_acquire>:
 4044b98:	f800283a 	ret

04044b9c <__sfp_lock_release>:
 4044b9c:	f800283a 	ret

04044ba0 <__sinit_lock_acquire>:
 4044ba0:	f800283a 	ret

04044ba4 <__sinit_lock_release>:
 4044ba4:	f800283a 	ret

04044ba8 <__fp_lock_all>:
 4044ba8:	00810174 	movhi	r2,1029
 4044bac:	10885104 	addi	r2,r2,8516
 4044bb0:	11000017 	ldw	r4,0(r2)
 4044bb4:	01410134 	movhi	r5,1028
 4044bb8:	29527a04 	addi	r5,r5,18920
 4044bbc:	40454c81 	jmpi	40454c8 <_fwalk>

04044bc0 <__fp_unlock_all>:
 4044bc0:	00810174 	movhi	r2,1029
 4044bc4:	10885104 	addi	r2,r2,8516
 4044bc8:	11000017 	ldw	r4,0(r2)
 4044bcc:	01410134 	movhi	r5,1028
 4044bd0:	29520e04 	addi	r5,r5,18488
 4044bd4:	40454c81 	jmpi	40454c8 <_fwalk>

04044bd8 <_malloc_trim_r>:
 4044bd8:	defffb04 	addi	sp,sp,-20
 4044bdc:	dcc00315 	stw	r19,12(sp)
 4044be0:	04c10174 	movhi	r19,1029
 4044be4:	dc800215 	stw	r18,8(sp)
 4044be8:	dc400115 	stw	r17,4(sp)
 4044bec:	dc000015 	stw	r16,0(sp)
 4044bf0:	dfc00415 	stw	ra,16(sp)
 4044bf4:	2821883a 	mov	r16,r5
 4044bf8:	9cc2a804 	addi	r19,r19,2720
 4044bfc:	2025883a 	mov	r18,r4
 4044c00:	404d8900 	call	404d890 <__malloc_lock>
 4044c04:	98800217 	ldw	r2,8(r19)
 4044c08:	14400117 	ldw	r17,4(r2)
 4044c0c:	00bfff04 	movi	r2,-4
 4044c10:	88a2703a 	and	r17,r17,r2
 4044c14:	8c21c83a 	sub	r16,r17,r16
 4044c18:	8403fbc4 	addi	r16,r16,4079
 4044c1c:	8020d33a 	srli	r16,r16,12
 4044c20:	0083ffc4 	movi	r2,4095
 4044c24:	843fffc4 	addi	r16,r16,-1
 4044c28:	8020933a 	slli	r16,r16,12
 4044c2c:	1400060e 	bge	r2,r16,4044c48 <_malloc_trim_r+0x70>
 4044c30:	000b883a 	mov	r5,zero
 4044c34:	9009883a 	mov	r4,r18
 4044c38:	4047b780 	call	4047b78 <_sbrk_r>
 4044c3c:	98c00217 	ldw	r3,8(r19)
 4044c40:	1c47883a 	add	r3,r3,r17
 4044c44:	10c00a26 	beq	r2,r3,4044c70 <_malloc_trim_r+0x98>
 4044c48:	9009883a 	mov	r4,r18
 4044c4c:	404d8b40 	call	404d8b4 <__malloc_unlock>
 4044c50:	0005883a 	mov	r2,zero
 4044c54:	dfc00417 	ldw	ra,16(sp)
 4044c58:	dcc00317 	ldw	r19,12(sp)
 4044c5c:	dc800217 	ldw	r18,8(sp)
 4044c60:	dc400117 	ldw	r17,4(sp)
 4044c64:	dc000017 	ldw	r16,0(sp)
 4044c68:	dec00504 	addi	sp,sp,20
 4044c6c:	f800283a 	ret
 4044c70:	040bc83a 	sub	r5,zero,r16
 4044c74:	9009883a 	mov	r4,r18
 4044c78:	4047b780 	call	4047b78 <_sbrk_r>
 4044c7c:	00ffffc4 	movi	r3,-1
 4044c80:	10c00d26 	beq	r2,r3,4044cb8 <_malloc_trim_r+0xe0>
 4044c84:	00c10174 	movhi	r3,1029
 4044c88:	18cf5404 	addi	r3,r3,15696
 4044c8c:	18800017 	ldw	r2,0(r3)
 4044c90:	99000217 	ldw	r4,8(r19)
 4044c94:	8c23c83a 	sub	r17,r17,r16
 4044c98:	8c400054 	ori	r17,r17,1
 4044c9c:	1421c83a 	sub	r16,r2,r16
 4044ca0:	24400115 	stw	r17,4(r4)
 4044ca4:	9009883a 	mov	r4,r18
 4044ca8:	1c000015 	stw	r16,0(r3)
 4044cac:	404d8b40 	call	404d8b4 <__malloc_unlock>
 4044cb0:	00800044 	movi	r2,1
 4044cb4:	003fe706 	br	4044c54 <__alt_data_end+0xfffda454>
 4044cb8:	000b883a 	mov	r5,zero
 4044cbc:	9009883a 	mov	r4,r18
 4044cc0:	4047b780 	call	4047b78 <_sbrk_r>
 4044cc4:	99000217 	ldw	r4,8(r19)
 4044cc8:	014003c4 	movi	r5,15
 4044ccc:	1107c83a 	sub	r3,r2,r4
 4044cd0:	28ffdd0e 	bge	r5,r3,4044c48 <__alt_data_end+0xfffda448>
 4044cd4:	01410174 	movhi	r5,1029
 4044cd8:	29485304 	addi	r5,r5,8524
 4044cdc:	29400017 	ldw	r5,0(r5)
 4044ce0:	18c00054 	ori	r3,r3,1
 4044ce4:	20c00115 	stw	r3,4(r4)
 4044ce8:	00c10174 	movhi	r3,1029
 4044cec:	1145c83a 	sub	r2,r2,r5
 4044cf0:	18cf5404 	addi	r3,r3,15696
 4044cf4:	18800015 	stw	r2,0(r3)
 4044cf8:	003fd306 	br	4044c48 <__alt_data_end+0xfffda448>

04044cfc <_free_r>:
 4044cfc:	28004126 	beq	r5,zero,4044e04 <_free_r+0x108>
 4044d00:	defffd04 	addi	sp,sp,-12
 4044d04:	dc400115 	stw	r17,4(sp)
 4044d08:	dc000015 	stw	r16,0(sp)
 4044d0c:	2023883a 	mov	r17,r4
 4044d10:	2821883a 	mov	r16,r5
 4044d14:	dfc00215 	stw	ra,8(sp)
 4044d18:	404d8900 	call	404d890 <__malloc_lock>
 4044d1c:	81ffff17 	ldw	r7,-4(r16)
 4044d20:	00bfff84 	movi	r2,-2
 4044d24:	01010174 	movhi	r4,1029
 4044d28:	81bffe04 	addi	r6,r16,-8
 4044d2c:	3884703a 	and	r2,r7,r2
 4044d30:	2102a804 	addi	r4,r4,2720
 4044d34:	308b883a 	add	r5,r6,r2
 4044d38:	2a400117 	ldw	r9,4(r5)
 4044d3c:	22000217 	ldw	r8,8(r4)
 4044d40:	00ffff04 	movi	r3,-4
 4044d44:	48c6703a 	and	r3,r9,r3
 4044d48:	2a005726 	beq	r5,r8,4044ea8 <_free_r+0x1ac>
 4044d4c:	28c00115 	stw	r3,4(r5)
 4044d50:	39c0004c 	andi	r7,r7,1
 4044d54:	3800091e 	bne	r7,zero,4044d7c <_free_r+0x80>
 4044d58:	823ffe17 	ldw	r8,-8(r16)
 4044d5c:	22400204 	addi	r9,r4,8
 4044d60:	320dc83a 	sub	r6,r6,r8
 4044d64:	31c00217 	ldw	r7,8(r6)
 4044d68:	1205883a 	add	r2,r2,r8
 4044d6c:	3a406526 	beq	r7,r9,4044f04 <_free_r+0x208>
 4044d70:	32000317 	ldw	r8,12(r6)
 4044d74:	3a000315 	stw	r8,12(r7)
 4044d78:	41c00215 	stw	r7,8(r8)
 4044d7c:	28cf883a 	add	r7,r5,r3
 4044d80:	39c00117 	ldw	r7,4(r7)
 4044d84:	39c0004c 	andi	r7,r7,1
 4044d88:	38003a26 	beq	r7,zero,4044e74 <_free_r+0x178>
 4044d8c:	10c00054 	ori	r3,r2,1
 4044d90:	30c00115 	stw	r3,4(r6)
 4044d94:	3087883a 	add	r3,r6,r2
 4044d98:	18800015 	stw	r2,0(r3)
 4044d9c:	00c07fc4 	movi	r3,511
 4044da0:	18801936 	bltu	r3,r2,4044e08 <_free_r+0x10c>
 4044da4:	1004d0fa 	srli	r2,r2,3
 4044da8:	01c00044 	movi	r7,1
 4044dac:	21400117 	ldw	r5,4(r4)
 4044db0:	10c00044 	addi	r3,r2,1
 4044db4:	18c7883a 	add	r3,r3,r3
 4044db8:	1005d0ba 	srai	r2,r2,2
 4044dbc:	18c7883a 	add	r3,r3,r3
 4044dc0:	18c7883a 	add	r3,r3,r3
 4044dc4:	1907883a 	add	r3,r3,r4
 4044dc8:	3884983a 	sll	r2,r7,r2
 4044dcc:	19c00017 	ldw	r7,0(r3)
 4044dd0:	1a3ffe04 	addi	r8,r3,-8
 4044dd4:	1144b03a 	or	r2,r2,r5
 4044dd8:	32000315 	stw	r8,12(r6)
 4044ddc:	31c00215 	stw	r7,8(r6)
 4044de0:	20800115 	stw	r2,4(r4)
 4044de4:	19800015 	stw	r6,0(r3)
 4044de8:	39800315 	stw	r6,12(r7)
 4044dec:	8809883a 	mov	r4,r17
 4044df0:	dfc00217 	ldw	ra,8(sp)
 4044df4:	dc400117 	ldw	r17,4(sp)
 4044df8:	dc000017 	ldw	r16,0(sp)
 4044dfc:	dec00304 	addi	sp,sp,12
 4044e00:	404d8b41 	jmpi	404d8b4 <__malloc_unlock>
 4044e04:	f800283a 	ret
 4044e08:	100ad27a 	srli	r5,r2,9
 4044e0c:	00c00104 	movi	r3,4
 4044e10:	19404a36 	bltu	r3,r5,4044f3c <_free_r+0x240>
 4044e14:	100ad1ba 	srli	r5,r2,6
 4044e18:	28c00e44 	addi	r3,r5,57
 4044e1c:	18c7883a 	add	r3,r3,r3
 4044e20:	29400e04 	addi	r5,r5,56
 4044e24:	18c7883a 	add	r3,r3,r3
 4044e28:	18c7883a 	add	r3,r3,r3
 4044e2c:	1909883a 	add	r4,r3,r4
 4044e30:	20c00017 	ldw	r3,0(r4)
 4044e34:	01c10174 	movhi	r7,1029
 4044e38:	213ffe04 	addi	r4,r4,-8
 4044e3c:	39c2a804 	addi	r7,r7,2720
 4044e40:	20c04426 	beq	r4,r3,4044f54 <_free_r+0x258>
 4044e44:	01ffff04 	movi	r7,-4
 4044e48:	19400117 	ldw	r5,4(r3)
 4044e4c:	29ca703a 	and	r5,r5,r7
 4044e50:	1140022e 	bgeu	r2,r5,4044e5c <_free_r+0x160>
 4044e54:	18c00217 	ldw	r3,8(r3)
 4044e58:	20fffb1e 	bne	r4,r3,4044e48 <__alt_data_end+0xfffda648>
 4044e5c:	19000317 	ldw	r4,12(r3)
 4044e60:	31000315 	stw	r4,12(r6)
 4044e64:	30c00215 	stw	r3,8(r6)
 4044e68:	21800215 	stw	r6,8(r4)
 4044e6c:	19800315 	stw	r6,12(r3)
 4044e70:	003fde06 	br	4044dec <__alt_data_end+0xfffda5ec>
 4044e74:	29c00217 	ldw	r7,8(r5)
 4044e78:	10c5883a 	add	r2,r2,r3
 4044e7c:	00c10174 	movhi	r3,1029
 4044e80:	18c2aa04 	addi	r3,r3,2728
 4044e84:	38c03b26 	beq	r7,r3,4044f74 <_free_r+0x278>
 4044e88:	2a000317 	ldw	r8,12(r5)
 4044e8c:	11400054 	ori	r5,r2,1
 4044e90:	3087883a 	add	r3,r6,r2
 4044e94:	3a000315 	stw	r8,12(r7)
 4044e98:	41c00215 	stw	r7,8(r8)
 4044e9c:	31400115 	stw	r5,4(r6)
 4044ea0:	18800015 	stw	r2,0(r3)
 4044ea4:	003fbd06 	br	4044d9c <__alt_data_end+0xfffda59c>
 4044ea8:	39c0004c 	andi	r7,r7,1
 4044eac:	10c5883a 	add	r2,r2,r3
 4044eb0:	3800071e 	bne	r7,zero,4044ed0 <_free_r+0x1d4>
 4044eb4:	81fffe17 	ldw	r7,-8(r16)
 4044eb8:	31cdc83a 	sub	r6,r6,r7
 4044ebc:	30c00317 	ldw	r3,12(r6)
 4044ec0:	31400217 	ldw	r5,8(r6)
 4044ec4:	11c5883a 	add	r2,r2,r7
 4044ec8:	28c00315 	stw	r3,12(r5)
 4044ecc:	19400215 	stw	r5,8(r3)
 4044ed0:	10c00054 	ori	r3,r2,1
 4044ed4:	30c00115 	stw	r3,4(r6)
 4044ed8:	00c10174 	movhi	r3,1029
 4044edc:	18c85404 	addi	r3,r3,8528
 4044ee0:	18c00017 	ldw	r3,0(r3)
 4044ee4:	21800215 	stw	r6,8(r4)
 4044ee8:	10ffc036 	bltu	r2,r3,4044dec <__alt_data_end+0xfffda5ec>
 4044eec:	00810174 	movhi	r2,1029
 4044ef0:	108f4b04 	addi	r2,r2,15660
 4044ef4:	11400017 	ldw	r5,0(r2)
 4044ef8:	8809883a 	mov	r4,r17
 4044efc:	4044bd80 	call	4044bd8 <_malloc_trim_r>
 4044f00:	003fba06 	br	4044dec <__alt_data_end+0xfffda5ec>
 4044f04:	28c9883a 	add	r4,r5,r3
 4044f08:	21000117 	ldw	r4,4(r4)
 4044f0c:	2100004c 	andi	r4,r4,1
 4044f10:	2000391e 	bne	r4,zero,4044ff8 <_free_r+0x2fc>
 4044f14:	29c00217 	ldw	r7,8(r5)
 4044f18:	29000317 	ldw	r4,12(r5)
 4044f1c:	1885883a 	add	r2,r3,r2
 4044f20:	10c00054 	ori	r3,r2,1
 4044f24:	39000315 	stw	r4,12(r7)
 4044f28:	21c00215 	stw	r7,8(r4)
 4044f2c:	30c00115 	stw	r3,4(r6)
 4044f30:	308d883a 	add	r6,r6,r2
 4044f34:	30800015 	stw	r2,0(r6)
 4044f38:	003fac06 	br	4044dec <__alt_data_end+0xfffda5ec>
 4044f3c:	00c00504 	movi	r3,20
 4044f40:	19401536 	bltu	r3,r5,4044f98 <_free_r+0x29c>
 4044f44:	28c01704 	addi	r3,r5,92
 4044f48:	18c7883a 	add	r3,r3,r3
 4044f4c:	294016c4 	addi	r5,r5,91
 4044f50:	003fb406 	br	4044e24 <__alt_data_end+0xfffda624>
 4044f54:	280bd0ba 	srai	r5,r5,2
 4044f58:	00c00044 	movi	r3,1
 4044f5c:	38800117 	ldw	r2,4(r7)
 4044f60:	194a983a 	sll	r5,r3,r5
 4044f64:	2007883a 	mov	r3,r4
 4044f68:	2884b03a 	or	r2,r5,r2
 4044f6c:	38800115 	stw	r2,4(r7)
 4044f70:	003fbb06 	br	4044e60 <__alt_data_end+0xfffda660>
 4044f74:	21800515 	stw	r6,20(r4)
 4044f78:	21800415 	stw	r6,16(r4)
 4044f7c:	10c00054 	ori	r3,r2,1
 4044f80:	31c00315 	stw	r7,12(r6)
 4044f84:	31c00215 	stw	r7,8(r6)
 4044f88:	30c00115 	stw	r3,4(r6)
 4044f8c:	308d883a 	add	r6,r6,r2
 4044f90:	30800015 	stw	r2,0(r6)
 4044f94:	003f9506 	br	4044dec <__alt_data_end+0xfffda5ec>
 4044f98:	00c01504 	movi	r3,84
 4044f9c:	19400536 	bltu	r3,r5,4044fb4 <_free_r+0x2b8>
 4044fa0:	100ad33a 	srli	r5,r2,12
 4044fa4:	28c01bc4 	addi	r3,r5,111
 4044fa8:	18c7883a 	add	r3,r3,r3
 4044fac:	29401b84 	addi	r5,r5,110
 4044fb0:	003f9c06 	br	4044e24 <__alt_data_end+0xfffda624>
 4044fb4:	00c05504 	movi	r3,340
 4044fb8:	19400536 	bltu	r3,r5,4044fd0 <_free_r+0x2d4>
 4044fbc:	100ad3fa 	srli	r5,r2,15
 4044fc0:	28c01e04 	addi	r3,r5,120
 4044fc4:	18c7883a 	add	r3,r3,r3
 4044fc8:	29401dc4 	addi	r5,r5,119
 4044fcc:	003f9506 	br	4044e24 <__alt_data_end+0xfffda624>
 4044fd0:	00c15504 	movi	r3,1364
 4044fd4:	19400536 	bltu	r3,r5,4044fec <_free_r+0x2f0>
 4044fd8:	100ad4ba 	srli	r5,r2,18
 4044fdc:	28c01f44 	addi	r3,r5,125
 4044fe0:	18c7883a 	add	r3,r3,r3
 4044fe4:	29401f04 	addi	r5,r5,124
 4044fe8:	003f8e06 	br	4044e24 <__alt_data_end+0xfffda624>
 4044fec:	00c03f84 	movi	r3,254
 4044ff0:	01401f84 	movi	r5,126
 4044ff4:	003f8b06 	br	4044e24 <__alt_data_end+0xfffda624>
 4044ff8:	10c00054 	ori	r3,r2,1
 4044ffc:	30c00115 	stw	r3,4(r6)
 4045000:	308d883a 	add	r6,r6,r2
 4045004:	30800015 	stw	r2,0(r6)
 4045008:	003f7806 	br	4044dec <__alt_data_end+0xfffda5ec>

0404500c <__sfvwrite_r>:
 404500c:	30800217 	ldw	r2,8(r6)
 4045010:	10006726 	beq	r2,zero,40451b0 <__sfvwrite_r+0x1a4>
 4045014:	28c0030b 	ldhu	r3,12(r5)
 4045018:	defff404 	addi	sp,sp,-48
 404501c:	dd400715 	stw	r21,28(sp)
 4045020:	dd000615 	stw	r20,24(sp)
 4045024:	dc000215 	stw	r16,8(sp)
 4045028:	dfc00b15 	stw	ra,44(sp)
 404502c:	df000a15 	stw	fp,40(sp)
 4045030:	ddc00915 	stw	r23,36(sp)
 4045034:	dd800815 	stw	r22,32(sp)
 4045038:	dcc00515 	stw	r19,20(sp)
 404503c:	dc800415 	stw	r18,16(sp)
 4045040:	dc400315 	stw	r17,12(sp)
 4045044:	1880020c 	andi	r2,r3,8
 4045048:	2821883a 	mov	r16,r5
 404504c:	202b883a 	mov	r21,r4
 4045050:	3029883a 	mov	r20,r6
 4045054:	10002726 	beq	r2,zero,40450f4 <__sfvwrite_r+0xe8>
 4045058:	28800417 	ldw	r2,16(r5)
 404505c:	10002526 	beq	r2,zero,40450f4 <__sfvwrite_r+0xe8>
 4045060:	1880008c 	andi	r2,r3,2
 4045064:	a4400017 	ldw	r17,0(r20)
 4045068:	10002a26 	beq	r2,zero,4045114 <__sfvwrite_r+0x108>
 404506c:	05a00034 	movhi	r22,32768
 4045070:	0027883a 	mov	r19,zero
 4045074:	0025883a 	mov	r18,zero
 4045078:	b5bf0004 	addi	r22,r22,-1024
 404507c:	980d883a 	mov	r6,r19
 4045080:	a809883a 	mov	r4,r21
 4045084:	90004626 	beq	r18,zero,40451a0 <__sfvwrite_r+0x194>
 4045088:	900f883a 	mov	r7,r18
 404508c:	b480022e 	bgeu	r22,r18,4045098 <__sfvwrite_r+0x8c>
 4045090:	01e00034 	movhi	r7,32768
 4045094:	39ff0004 	addi	r7,r7,-1024
 4045098:	80800917 	ldw	r2,36(r16)
 404509c:	81400717 	ldw	r5,28(r16)
 40450a0:	103ee83a 	callr	r2
 40450a4:	0080570e 	bge	zero,r2,4045204 <__sfvwrite_r+0x1f8>
 40450a8:	a0c00217 	ldw	r3,8(r20)
 40450ac:	98a7883a 	add	r19,r19,r2
 40450b0:	90a5c83a 	sub	r18,r18,r2
 40450b4:	1885c83a 	sub	r2,r3,r2
 40450b8:	a0800215 	stw	r2,8(r20)
 40450bc:	103fef1e 	bne	r2,zero,404507c <__alt_data_end+0xfffda87c>
 40450c0:	0005883a 	mov	r2,zero
 40450c4:	dfc00b17 	ldw	ra,44(sp)
 40450c8:	df000a17 	ldw	fp,40(sp)
 40450cc:	ddc00917 	ldw	r23,36(sp)
 40450d0:	dd800817 	ldw	r22,32(sp)
 40450d4:	dd400717 	ldw	r21,28(sp)
 40450d8:	dd000617 	ldw	r20,24(sp)
 40450dc:	dcc00517 	ldw	r19,20(sp)
 40450e0:	dc800417 	ldw	r18,16(sp)
 40450e4:	dc400317 	ldw	r17,12(sp)
 40450e8:	dc000217 	ldw	r16,8(sp)
 40450ec:	dec00c04 	addi	sp,sp,48
 40450f0:	f800283a 	ret
 40450f4:	800b883a 	mov	r5,r16
 40450f8:	a809883a 	mov	r4,r21
 40450fc:	4042bb40 	call	4042bb4 <__swsetup_r>
 4045100:	1000eb1e 	bne	r2,zero,40454b0 <__sfvwrite_r+0x4a4>
 4045104:	80c0030b 	ldhu	r3,12(r16)
 4045108:	a4400017 	ldw	r17,0(r20)
 404510c:	1880008c 	andi	r2,r3,2
 4045110:	103fd61e 	bne	r2,zero,404506c <__alt_data_end+0xfffda86c>
 4045114:	1880004c 	andi	r2,r3,1
 4045118:	10003f1e 	bne	r2,zero,4045218 <__sfvwrite_r+0x20c>
 404511c:	0039883a 	mov	fp,zero
 4045120:	0025883a 	mov	r18,zero
 4045124:	90001a26 	beq	r18,zero,4045190 <__sfvwrite_r+0x184>
 4045128:	1880800c 	andi	r2,r3,512
 404512c:	84c00217 	ldw	r19,8(r16)
 4045130:	10002126 	beq	r2,zero,40451b8 <__sfvwrite_r+0x1ac>
 4045134:	982f883a 	mov	r23,r19
 4045138:	94c09336 	bltu	r18,r19,4045388 <__sfvwrite_r+0x37c>
 404513c:	1881200c 	andi	r2,r3,1152
 4045140:	10009e1e 	bne	r2,zero,40453bc <__sfvwrite_r+0x3b0>
 4045144:	81000017 	ldw	r4,0(r16)
 4045148:	b80d883a 	mov	r6,r23
 404514c:	e00b883a 	mov	r5,fp
 4045150:	40463200 	call	4046320 <memmove>
 4045154:	80c00217 	ldw	r3,8(r16)
 4045158:	81000017 	ldw	r4,0(r16)
 404515c:	9005883a 	mov	r2,r18
 4045160:	1ce7c83a 	sub	r19,r3,r19
 4045164:	25cf883a 	add	r7,r4,r23
 4045168:	84c00215 	stw	r19,8(r16)
 404516c:	81c00015 	stw	r7,0(r16)
 4045170:	a0c00217 	ldw	r3,8(r20)
 4045174:	e0b9883a 	add	fp,fp,r2
 4045178:	90a5c83a 	sub	r18,r18,r2
 404517c:	18a7c83a 	sub	r19,r3,r2
 4045180:	a4c00215 	stw	r19,8(r20)
 4045184:	983fce26 	beq	r19,zero,40450c0 <__alt_data_end+0xfffda8c0>
 4045188:	80c0030b 	ldhu	r3,12(r16)
 404518c:	903fe61e 	bne	r18,zero,4045128 <__alt_data_end+0xfffda928>
 4045190:	8f000017 	ldw	fp,0(r17)
 4045194:	8c800117 	ldw	r18,4(r17)
 4045198:	8c400204 	addi	r17,r17,8
 404519c:	003fe106 	br	4045124 <__alt_data_end+0xfffda924>
 40451a0:	8cc00017 	ldw	r19,0(r17)
 40451a4:	8c800117 	ldw	r18,4(r17)
 40451a8:	8c400204 	addi	r17,r17,8
 40451ac:	003fb306 	br	404507c <__alt_data_end+0xfffda87c>
 40451b0:	0005883a 	mov	r2,zero
 40451b4:	f800283a 	ret
 40451b8:	81000017 	ldw	r4,0(r16)
 40451bc:	80800417 	ldw	r2,16(r16)
 40451c0:	11005736 	bltu	r2,r4,4045320 <__sfvwrite_r+0x314>
 40451c4:	85c00517 	ldw	r23,20(r16)
 40451c8:	95c05536 	bltu	r18,r23,4045320 <__sfvwrite_r+0x314>
 40451cc:	00a00034 	movhi	r2,32768
 40451d0:	10bfffc4 	addi	r2,r2,-1
 40451d4:	9009883a 	mov	r4,r18
 40451d8:	1480012e 	bgeu	r2,r18,40451e0 <__sfvwrite_r+0x1d4>
 40451dc:	1009883a 	mov	r4,r2
 40451e0:	b80b883a 	mov	r5,r23
 40451e4:	404a8100 	call	404a810 <__divsi3>
 40451e8:	15cf383a 	mul	r7,r2,r23
 40451ec:	81400717 	ldw	r5,28(r16)
 40451f0:	80800917 	ldw	r2,36(r16)
 40451f4:	e00d883a 	mov	r6,fp
 40451f8:	a809883a 	mov	r4,r21
 40451fc:	103ee83a 	callr	r2
 4045200:	00bfdb16 	blt	zero,r2,4045170 <__alt_data_end+0xfffda970>
 4045204:	8080030b 	ldhu	r2,12(r16)
 4045208:	10801014 	ori	r2,r2,64
 404520c:	8080030d 	sth	r2,12(r16)
 4045210:	00bfffc4 	movi	r2,-1
 4045214:	003fab06 	br	40450c4 <__alt_data_end+0xfffda8c4>
 4045218:	0027883a 	mov	r19,zero
 404521c:	0011883a 	mov	r8,zero
 4045220:	0039883a 	mov	fp,zero
 4045224:	0025883a 	mov	r18,zero
 4045228:	90001f26 	beq	r18,zero,40452a8 <__sfvwrite_r+0x29c>
 404522c:	40005a26 	beq	r8,zero,4045398 <__sfvwrite_r+0x38c>
 4045230:	982d883a 	mov	r22,r19
 4045234:	94c0012e 	bgeu	r18,r19,404523c <__sfvwrite_r+0x230>
 4045238:	902d883a 	mov	r22,r18
 404523c:	81000017 	ldw	r4,0(r16)
 4045240:	80800417 	ldw	r2,16(r16)
 4045244:	b02f883a 	mov	r23,r22
 4045248:	81c00517 	ldw	r7,20(r16)
 404524c:	1100032e 	bgeu	r2,r4,404525c <__sfvwrite_r+0x250>
 4045250:	80c00217 	ldw	r3,8(r16)
 4045254:	38c7883a 	add	r3,r7,r3
 4045258:	1d801816 	blt	r3,r22,40452bc <__sfvwrite_r+0x2b0>
 404525c:	b1c03e16 	blt	r22,r7,4045358 <__sfvwrite_r+0x34c>
 4045260:	80800917 	ldw	r2,36(r16)
 4045264:	81400717 	ldw	r5,28(r16)
 4045268:	e00d883a 	mov	r6,fp
 404526c:	da000115 	stw	r8,4(sp)
 4045270:	a809883a 	mov	r4,r21
 4045274:	103ee83a 	callr	r2
 4045278:	102f883a 	mov	r23,r2
 404527c:	da000117 	ldw	r8,4(sp)
 4045280:	00bfe00e 	bge	zero,r2,4045204 <__alt_data_end+0xfffdaa04>
 4045284:	9de7c83a 	sub	r19,r19,r23
 4045288:	98001f26 	beq	r19,zero,4045308 <__sfvwrite_r+0x2fc>
 404528c:	a0800217 	ldw	r2,8(r20)
 4045290:	e5f9883a 	add	fp,fp,r23
 4045294:	95e5c83a 	sub	r18,r18,r23
 4045298:	15efc83a 	sub	r23,r2,r23
 404529c:	a5c00215 	stw	r23,8(r20)
 40452a0:	b83f8726 	beq	r23,zero,40450c0 <__alt_data_end+0xfffda8c0>
 40452a4:	903fe11e 	bne	r18,zero,404522c <__alt_data_end+0xfffdaa2c>
 40452a8:	8f000017 	ldw	fp,0(r17)
 40452ac:	8c800117 	ldw	r18,4(r17)
 40452b0:	0011883a 	mov	r8,zero
 40452b4:	8c400204 	addi	r17,r17,8
 40452b8:	003fdb06 	br	4045228 <__alt_data_end+0xfffdaa28>
 40452bc:	180d883a 	mov	r6,r3
 40452c0:	e00b883a 	mov	r5,fp
 40452c4:	da000115 	stw	r8,4(sp)
 40452c8:	d8c00015 	stw	r3,0(sp)
 40452cc:	40463200 	call	4046320 <memmove>
 40452d0:	d8c00017 	ldw	r3,0(sp)
 40452d4:	80800017 	ldw	r2,0(r16)
 40452d8:	800b883a 	mov	r5,r16
 40452dc:	a809883a 	mov	r4,r21
 40452e0:	10c5883a 	add	r2,r2,r3
 40452e4:	80800015 	stw	r2,0(r16)
 40452e8:	d8c00015 	stw	r3,0(sp)
 40452ec:	40447ac0 	call	40447ac <_fflush_r>
 40452f0:	d8c00017 	ldw	r3,0(sp)
 40452f4:	da000117 	ldw	r8,4(sp)
 40452f8:	103fc21e 	bne	r2,zero,4045204 <__alt_data_end+0xfffdaa04>
 40452fc:	182f883a 	mov	r23,r3
 4045300:	9de7c83a 	sub	r19,r19,r23
 4045304:	983fe11e 	bne	r19,zero,404528c <__alt_data_end+0xfffdaa8c>
 4045308:	800b883a 	mov	r5,r16
 404530c:	a809883a 	mov	r4,r21
 4045310:	40447ac0 	call	40447ac <_fflush_r>
 4045314:	103fbb1e 	bne	r2,zero,4045204 <__alt_data_end+0xfffdaa04>
 4045318:	0011883a 	mov	r8,zero
 404531c:	003fdb06 	br	404528c <__alt_data_end+0xfffdaa8c>
 4045320:	94c0012e 	bgeu	r18,r19,4045328 <__sfvwrite_r+0x31c>
 4045324:	9027883a 	mov	r19,r18
 4045328:	980d883a 	mov	r6,r19
 404532c:	e00b883a 	mov	r5,fp
 4045330:	40463200 	call	4046320 <memmove>
 4045334:	80800217 	ldw	r2,8(r16)
 4045338:	80c00017 	ldw	r3,0(r16)
 404533c:	14c5c83a 	sub	r2,r2,r19
 4045340:	1cc7883a 	add	r3,r3,r19
 4045344:	80800215 	stw	r2,8(r16)
 4045348:	80c00015 	stw	r3,0(r16)
 404534c:	10004326 	beq	r2,zero,404545c <__sfvwrite_r+0x450>
 4045350:	9805883a 	mov	r2,r19
 4045354:	003f8606 	br	4045170 <__alt_data_end+0xfffda970>
 4045358:	b00d883a 	mov	r6,r22
 404535c:	e00b883a 	mov	r5,fp
 4045360:	da000115 	stw	r8,4(sp)
 4045364:	40463200 	call	4046320 <memmove>
 4045368:	80800217 	ldw	r2,8(r16)
 404536c:	80c00017 	ldw	r3,0(r16)
 4045370:	da000117 	ldw	r8,4(sp)
 4045374:	1585c83a 	sub	r2,r2,r22
 4045378:	1dad883a 	add	r22,r3,r22
 404537c:	80800215 	stw	r2,8(r16)
 4045380:	85800015 	stw	r22,0(r16)
 4045384:	003fbf06 	br	4045284 <__alt_data_end+0xfffdaa84>
 4045388:	81000017 	ldw	r4,0(r16)
 404538c:	9027883a 	mov	r19,r18
 4045390:	902f883a 	mov	r23,r18
 4045394:	003f6c06 	br	4045148 <__alt_data_end+0xfffda948>
 4045398:	900d883a 	mov	r6,r18
 404539c:	01400284 	movi	r5,10
 40453a0:	e009883a 	mov	r4,fp
 40453a4:	40460f40 	call	40460f4 <memchr>
 40453a8:	10003e26 	beq	r2,zero,40454a4 <__sfvwrite_r+0x498>
 40453ac:	10800044 	addi	r2,r2,1
 40453b0:	1727c83a 	sub	r19,r2,fp
 40453b4:	02000044 	movi	r8,1
 40453b8:	003f9d06 	br	4045230 <__alt_data_end+0xfffdaa30>
 40453bc:	80800517 	ldw	r2,20(r16)
 40453c0:	81400417 	ldw	r5,16(r16)
 40453c4:	81c00017 	ldw	r7,0(r16)
 40453c8:	10a7883a 	add	r19,r2,r2
 40453cc:	9885883a 	add	r2,r19,r2
 40453d0:	1026d7fa 	srli	r19,r2,31
 40453d4:	396dc83a 	sub	r22,r7,r5
 40453d8:	b1000044 	addi	r4,r22,1
 40453dc:	9885883a 	add	r2,r19,r2
 40453e0:	1027d07a 	srai	r19,r2,1
 40453e4:	2485883a 	add	r2,r4,r18
 40453e8:	980d883a 	mov	r6,r19
 40453ec:	9880022e 	bgeu	r19,r2,40453f8 <__sfvwrite_r+0x3ec>
 40453f0:	1027883a 	mov	r19,r2
 40453f4:	100d883a 	mov	r6,r2
 40453f8:	18c1000c 	andi	r3,r3,1024
 40453fc:	18001c26 	beq	r3,zero,4045470 <__sfvwrite_r+0x464>
 4045400:	300b883a 	mov	r5,r6
 4045404:	a809883a 	mov	r4,r21
 4045408:	40458e80 	call	40458e8 <_malloc_r>
 404540c:	102f883a 	mov	r23,r2
 4045410:	10002926 	beq	r2,zero,40454b8 <__sfvwrite_r+0x4ac>
 4045414:	81400417 	ldw	r5,16(r16)
 4045418:	b00d883a 	mov	r6,r22
 404541c:	1009883a 	mov	r4,r2
 4045420:	40461d80 	call	40461d8 <memcpy>
 4045424:	8080030b 	ldhu	r2,12(r16)
 4045428:	00fedfc4 	movi	r3,-1153
 404542c:	10c4703a 	and	r2,r2,r3
 4045430:	10802014 	ori	r2,r2,128
 4045434:	8080030d 	sth	r2,12(r16)
 4045438:	bd89883a 	add	r4,r23,r22
 404543c:	9d8fc83a 	sub	r7,r19,r22
 4045440:	85c00415 	stw	r23,16(r16)
 4045444:	84c00515 	stw	r19,20(r16)
 4045448:	81000015 	stw	r4,0(r16)
 404544c:	9027883a 	mov	r19,r18
 4045450:	81c00215 	stw	r7,8(r16)
 4045454:	902f883a 	mov	r23,r18
 4045458:	003f3b06 	br	4045148 <__alt_data_end+0xfffda948>
 404545c:	800b883a 	mov	r5,r16
 4045460:	a809883a 	mov	r4,r21
 4045464:	40447ac0 	call	40447ac <_fflush_r>
 4045468:	103fb926 	beq	r2,zero,4045350 <__alt_data_end+0xfffdab50>
 404546c:	003f6506 	br	4045204 <__alt_data_end+0xfffdaa04>
 4045470:	a809883a 	mov	r4,r21
 4045474:	40475a00 	call	40475a0 <_realloc_r>
 4045478:	102f883a 	mov	r23,r2
 404547c:	103fee1e 	bne	r2,zero,4045438 <__alt_data_end+0xfffdac38>
 4045480:	81400417 	ldw	r5,16(r16)
 4045484:	a809883a 	mov	r4,r21
 4045488:	4044cfc0 	call	4044cfc <_free_r>
 404548c:	8080030b 	ldhu	r2,12(r16)
 4045490:	00ffdfc4 	movi	r3,-129
 4045494:	1884703a 	and	r2,r3,r2
 4045498:	00c00304 	movi	r3,12
 404549c:	a8c00015 	stw	r3,0(r21)
 40454a0:	003f5906 	br	4045208 <__alt_data_end+0xfffdaa08>
 40454a4:	94c00044 	addi	r19,r18,1
 40454a8:	02000044 	movi	r8,1
 40454ac:	003f6006 	br	4045230 <__alt_data_end+0xfffdaa30>
 40454b0:	00bfffc4 	movi	r2,-1
 40454b4:	003f0306 	br	40450c4 <__alt_data_end+0xfffda8c4>
 40454b8:	00800304 	movi	r2,12
 40454bc:	a8800015 	stw	r2,0(r21)
 40454c0:	8080030b 	ldhu	r2,12(r16)
 40454c4:	003f5006 	br	4045208 <__alt_data_end+0xfffdaa08>

040454c8 <_fwalk>:
 40454c8:	defff704 	addi	sp,sp,-36
 40454cc:	dd000415 	stw	r20,16(sp)
 40454d0:	dfc00815 	stw	ra,32(sp)
 40454d4:	ddc00715 	stw	r23,28(sp)
 40454d8:	dd800615 	stw	r22,24(sp)
 40454dc:	dd400515 	stw	r21,20(sp)
 40454e0:	dcc00315 	stw	r19,12(sp)
 40454e4:	dc800215 	stw	r18,8(sp)
 40454e8:	dc400115 	stw	r17,4(sp)
 40454ec:	dc000015 	stw	r16,0(sp)
 40454f0:	2500b804 	addi	r20,r4,736
 40454f4:	a0002326 	beq	r20,zero,4045584 <_fwalk+0xbc>
 40454f8:	282b883a 	mov	r21,r5
 40454fc:	002f883a 	mov	r23,zero
 4045500:	05800044 	movi	r22,1
 4045504:	04ffffc4 	movi	r19,-1
 4045508:	a4400117 	ldw	r17,4(r20)
 404550c:	a4800217 	ldw	r18,8(r20)
 4045510:	8c7fffc4 	addi	r17,r17,-1
 4045514:	88000d16 	blt	r17,zero,404554c <_fwalk+0x84>
 4045518:	94000304 	addi	r16,r18,12
 404551c:	94800384 	addi	r18,r18,14
 4045520:	8080000b 	ldhu	r2,0(r16)
 4045524:	8c7fffc4 	addi	r17,r17,-1
 4045528:	813ffd04 	addi	r4,r16,-12
 404552c:	b080042e 	bgeu	r22,r2,4045540 <_fwalk+0x78>
 4045530:	9080000f 	ldh	r2,0(r18)
 4045534:	14c00226 	beq	r2,r19,4045540 <_fwalk+0x78>
 4045538:	a83ee83a 	callr	r21
 404553c:	b8aeb03a 	or	r23,r23,r2
 4045540:	84001a04 	addi	r16,r16,104
 4045544:	94801a04 	addi	r18,r18,104
 4045548:	8cfff51e 	bne	r17,r19,4045520 <__alt_data_end+0xfffdad20>
 404554c:	a5000017 	ldw	r20,0(r20)
 4045550:	a03fed1e 	bne	r20,zero,4045508 <__alt_data_end+0xfffdad08>
 4045554:	b805883a 	mov	r2,r23
 4045558:	dfc00817 	ldw	ra,32(sp)
 404555c:	ddc00717 	ldw	r23,28(sp)
 4045560:	dd800617 	ldw	r22,24(sp)
 4045564:	dd400517 	ldw	r21,20(sp)
 4045568:	dd000417 	ldw	r20,16(sp)
 404556c:	dcc00317 	ldw	r19,12(sp)
 4045570:	dc800217 	ldw	r18,8(sp)
 4045574:	dc400117 	ldw	r17,4(sp)
 4045578:	dc000017 	ldw	r16,0(sp)
 404557c:	dec00904 	addi	sp,sp,36
 4045580:	f800283a 	ret
 4045584:	002f883a 	mov	r23,zero
 4045588:	003ff206 	br	4045554 <__alt_data_end+0xfffdad54>

0404558c <_fwalk_reent>:
 404558c:	defff704 	addi	sp,sp,-36
 4045590:	dd000415 	stw	r20,16(sp)
 4045594:	dfc00815 	stw	ra,32(sp)
 4045598:	ddc00715 	stw	r23,28(sp)
 404559c:	dd800615 	stw	r22,24(sp)
 40455a0:	dd400515 	stw	r21,20(sp)
 40455a4:	dcc00315 	stw	r19,12(sp)
 40455a8:	dc800215 	stw	r18,8(sp)
 40455ac:	dc400115 	stw	r17,4(sp)
 40455b0:	dc000015 	stw	r16,0(sp)
 40455b4:	2500b804 	addi	r20,r4,736
 40455b8:	a0002326 	beq	r20,zero,4045648 <_fwalk_reent+0xbc>
 40455bc:	282b883a 	mov	r21,r5
 40455c0:	2027883a 	mov	r19,r4
 40455c4:	002f883a 	mov	r23,zero
 40455c8:	05800044 	movi	r22,1
 40455cc:	04bfffc4 	movi	r18,-1
 40455d0:	a4400117 	ldw	r17,4(r20)
 40455d4:	a4000217 	ldw	r16,8(r20)
 40455d8:	8c7fffc4 	addi	r17,r17,-1
 40455dc:	88000c16 	blt	r17,zero,4045610 <_fwalk_reent+0x84>
 40455e0:	84000304 	addi	r16,r16,12
 40455e4:	8080000b 	ldhu	r2,0(r16)
 40455e8:	8c7fffc4 	addi	r17,r17,-1
 40455ec:	817ffd04 	addi	r5,r16,-12
 40455f0:	b080052e 	bgeu	r22,r2,4045608 <_fwalk_reent+0x7c>
 40455f4:	8080008f 	ldh	r2,2(r16)
 40455f8:	9809883a 	mov	r4,r19
 40455fc:	14800226 	beq	r2,r18,4045608 <_fwalk_reent+0x7c>
 4045600:	a83ee83a 	callr	r21
 4045604:	b8aeb03a 	or	r23,r23,r2
 4045608:	84001a04 	addi	r16,r16,104
 404560c:	8cbff51e 	bne	r17,r18,40455e4 <__alt_data_end+0xfffdade4>
 4045610:	a5000017 	ldw	r20,0(r20)
 4045614:	a03fee1e 	bne	r20,zero,40455d0 <__alt_data_end+0xfffdadd0>
 4045618:	b805883a 	mov	r2,r23
 404561c:	dfc00817 	ldw	ra,32(sp)
 4045620:	ddc00717 	ldw	r23,28(sp)
 4045624:	dd800617 	ldw	r22,24(sp)
 4045628:	dd400517 	ldw	r21,20(sp)
 404562c:	dd000417 	ldw	r20,16(sp)
 4045630:	dcc00317 	ldw	r19,12(sp)
 4045634:	dc800217 	ldw	r18,8(sp)
 4045638:	dc400117 	ldw	r17,4(sp)
 404563c:	dc000017 	ldw	r16,0(sp)
 4045640:	dec00904 	addi	sp,sp,36
 4045644:	f800283a 	ret
 4045648:	002f883a 	mov	r23,zero
 404564c:	003ff206 	br	4045618 <__alt_data_end+0xfffdae18>

04045650 <_setlocale_r>:
 4045650:	30001b26 	beq	r6,zero,40456c0 <_setlocale_r+0x70>
 4045654:	01410174 	movhi	r5,1029
 4045658:	defffe04 	addi	sp,sp,-8
 404565c:	2940ce04 	addi	r5,r5,824
 4045660:	3009883a 	mov	r4,r6
 4045664:	dc000015 	stw	r16,0(sp)
 4045668:	dfc00115 	stw	ra,4(sp)
 404566c:	3021883a 	mov	r16,r6
 4045670:	4047d080 	call	4047d08 <strcmp>
 4045674:	1000061e 	bne	r2,zero,4045690 <_setlocale_r+0x40>
 4045678:	00810174 	movhi	r2,1029
 404567c:	1080cd04 	addi	r2,r2,820
 4045680:	dfc00117 	ldw	ra,4(sp)
 4045684:	dc000017 	ldw	r16,0(sp)
 4045688:	dec00204 	addi	sp,sp,8
 404568c:	f800283a 	ret
 4045690:	01410174 	movhi	r5,1029
 4045694:	2940cd04 	addi	r5,r5,820
 4045698:	8009883a 	mov	r4,r16
 404569c:	4047d080 	call	4047d08 <strcmp>
 40456a0:	103ff526 	beq	r2,zero,4045678 <__alt_data_end+0xfffdae78>
 40456a4:	01410174 	movhi	r5,1029
 40456a8:	2940b804 	addi	r5,r5,736
 40456ac:	8009883a 	mov	r4,r16
 40456b0:	4047d080 	call	4047d08 <strcmp>
 40456b4:	103ff026 	beq	r2,zero,4045678 <__alt_data_end+0xfffdae78>
 40456b8:	0005883a 	mov	r2,zero
 40456bc:	003ff006 	br	4045680 <__alt_data_end+0xfffdae80>
 40456c0:	00810174 	movhi	r2,1029
 40456c4:	1080cd04 	addi	r2,r2,820
 40456c8:	f800283a 	ret

040456cc <__locale_charset>:
 40456cc:	00810174 	movhi	r2,1029
 40456d0:	10829204 	addi	r2,r2,2632
 40456d4:	f800283a 	ret

040456d8 <__locale_mb_cur_max>:
 40456d8:	00810174 	movhi	r2,1029
 40456dc:	10885204 	addi	r2,r2,8520
 40456e0:	10800017 	ldw	r2,0(r2)
 40456e4:	f800283a 	ret

040456e8 <__locale_msgcharset>:
 40456e8:	00810174 	movhi	r2,1029
 40456ec:	10828a04 	addi	r2,r2,2600
 40456f0:	f800283a 	ret

040456f4 <__locale_cjk_lang>:
 40456f4:	0005883a 	mov	r2,zero
 40456f8:	f800283a 	ret

040456fc <_localeconv_r>:
 40456fc:	00810174 	movhi	r2,1029
 4045700:	10829a04 	addi	r2,r2,2664
 4045704:	f800283a 	ret

04045708 <setlocale>:
 4045708:	00810174 	movhi	r2,1029
 404570c:	10885104 	addi	r2,r2,8516
 4045710:	280d883a 	mov	r6,r5
 4045714:	200b883a 	mov	r5,r4
 4045718:	11000017 	ldw	r4,0(r2)
 404571c:	40456501 	jmpi	4045650 <_setlocale_r>

04045720 <localeconv>:
 4045720:	00810174 	movhi	r2,1029
 4045724:	10829a04 	addi	r2,r2,2664
 4045728:	f800283a 	ret

0404572c <__smakebuf_r>:
 404572c:	2880030b 	ldhu	r2,12(r5)
 4045730:	10c0008c 	andi	r3,r2,2
 4045734:	1800411e 	bne	r3,zero,404583c <__smakebuf_r+0x110>
 4045738:	deffec04 	addi	sp,sp,-80
 404573c:	dc000f15 	stw	r16,60(sp)
 4045740:	2821883a 	mov	r16,r5
 4045744:	2940038f 	ldh	r5,14(r5)
 4045748:	dc401015 	stw	r17,64(sp)
 404574c:	dfc01315 	stw	ra,76(sp)
 4045750:	dcc01215 	stw	r19,72(sp)
 4045754:	dc801115 	stw	r18,68(sp)
 4045758:	2023883a 	mov	r17,r4
 404575c:	28001c16 	blt	r5,zero,40457d0 <__smakebuf_r+0xa4>
 4045760:	d80d883a 	mov	r6,sp
 4045764:	40498b00 	call	40498b0 <_fstat_r>
 4045768:	10001816 	blt	r2,zero,40457cc <__smakebuf_r+0xa0>
 404576c:	d8800117 	ldw	r2,4(sp)
 4045770:	00e00014 	movui	r3,32768
 4045774:	10bc000c 	andi	r2,r2,61440
 4045778:	14c80020 	cmpeqi	r19,r2,8192
 404577c:	10c03726 	beq	r2,r3,404585c <__smakebuf_r+0x130>
 4045780:	80c0030b 	ldhu	r3,12(r16)
 4045784:	18c20014 	ori	r3,r3,2048
 4045788:	80c0030d 	sth	r3,12(r16)
 404578c:	00c80004 	movi	r3,8192
 4045790:	10c0521e 	bne	r2,r3,40458dc <__smakebuf_r+0x1b0>
 4045794:	8140038f 	ldh	r5,14(r16)
 4045798:	8809883a 	mov	r4,r17
 404579c:	404990c0 	call	404990c <_isatty_r>
 40457a0:	10004c26 	beq	r2,zero,40458d4 <__smakebuf_r+0x1a8>
 40457a4:	8080030b 	ldhu	r2,12(r16)
 40457a8:	80c010c4 	addi	r3,r16,67
 40457ac:	80c00015 	stw	r3,0(r16)
 40457b0:	10800054 	ori	r2,r2,1
 40457b4:	8080030d 	sth	r2,12(r16)
 40457b8:	00800044 	movi	r2,1
 40457bc:	80c00415 	stw	r3,16(r16)
 40457c0:	80800515 	stw	r2,20(r16)
 40457c4:	04810004 	movi	r18,1024
 40457c8:	00000706 	br	40457e8 <__smakebuf_r+0xbc>
 40457cc:	8080030b 	ldhu	r2,12(r16)
 40457d0:	10c0200c 	andi	r3,r2,128
 40457d4:	18001f1e 	bne	r3,zero,4045854 <__smakebuf_r+0x128>
 40457d8:	04810004 	movi	r18,1024
 40457dc:	10820014 	ori	r2,r2,2048
 40457e0:	8080030d 	sth	r2,12(r16)
 40457e4:	0027883a 	mov	r19,zero
 40457e8:	900b883a 	mov	r5,r18
 40457ec:	8809883a 	mov	r4,r17
 40457f0:	40458e80 	call	40458e8 <_malloc_r>
 40457f4:	10002c26 	beq	r2,zero,40458a8 <__smakebuf_r+0x17c>
 40457f8:	80c0030b 	ldhu	r3,12(r16)
 40457fc:	01010134 	movhi	r4,1028
 4045800:	21121004 	addi	r4,r4,18496
 4045804:	89000f15 	stw	r4,60(r17)
 4045808:	18c02014 	ori	r3,r3,128
 404580c:	80c0030d 	sth	r3,12(r16)
 4045810:	80800015 	stw	r2,0(r16)
 4045814:	80800415 	stw	r2,16(r16)
 4045818:	84800515 	stw	r18,20(r16)
 404581c:	98001a1e 	bne	r19,zero,4045888 <__smakebuf_r+0x15c>
 4045820:	dfc01317 	ldw	ra,76(sp)
 4045824:	dcc01217 	ldw	r19,72(sp)
 4045828:	dc801117 	ldw	r18,68(sp)
 404582c:	dc401017 	ldw	r17,64(sp)
 4045830:	dc000f17 	ldw	r16,60(sp)
 4045834:	dec01404 	addi	sp,sp,80
 4045838:	f800283a 	ret
 404583c:	288010c4 	addi	r2,r5,67
 4045840:	28800015 	stw	r2,0(r5)
 4045844:	28800415 	stw	r2,16(r5)
 4045848:	00800044 	movi	r2,1
 404584c:	28800515 	stw	r2,20(r5)
 4045850:	f800283a 	ret
 4045854:	04801004 	movi	r18,64
 4045858:	003fe006 	br	40457dc <__alt_data_end+0xfffdafdc>
 404585c:	81000a17 	ldw	r4,40(r16)
 4045860:	00c10134 	movhi	r3,1028
 4045864:	18df2904 	addi	r3,r3,31908
 4045868:	20ffc51e 	bne	r4,r3,4045780 <__alt_data_end+0xfffdaf80>
 404586c:	8080030b 	ldhu	r2,12(r16)
 4045870:	04810004 	movi	r18,1024
 4045874:	84801315 	stw	r18,76(r16)
 4045878:	1484b03a 	or	r2,r2,r18
 404587c:	8080030d 	sth	r2,12(r16)
 4045880:	0027883a 	mov	r19,zero
 4045884:	003fd806 	br	40457e8 <__alt_data_end+0xfffdafe8>
 4045888:	8140038f 	ldh	r5,14(r16)
 404588c:	8809883a 	mov	r4,r17
 4045890:	404990c0 	call	404990c <_isatty_r>
 4045894:	103fe226 	beq	r2,zero,4045820 <__alt_data_end+0xfffdb020>
 4045898:	8080030b 	ldhu	r2,12(r16)
 404589c:	10800054 	ori	r2,r2,1
 40458a0:	8080030d 	sth	r2,12(r16)
 40458a4:	003fde06 	br	4045820 <__alt_data_end+0xfffdb020>
 40458a8:	8080030b 	ldhu	r2,12(r16)
 40458ac:	10c0800c 	andi	r3,r2,512
 40458b0:	183fdb1e 	bne	r3,zero,4045820 <__alt_data_end+0xfffdb020>
 40458b4:	10800094 	ori	r2,r2,2
 40458b8:	80c010c4 	addi	r3,r16,67
 40458bc:	8080030d 	sth	r2,12(r16)
 40458c0:	00800044 	movi	r2,1
 40458c4:	80c00015 	stw	r3,0(r16)
 40458c8:	80c00415 	stw	r3,16(r16)
 40458cc:	80800515 	stw	r2,20(r16)
 40458d0:	003fd306 	br	4045820 <__alt_data_end+0xfffdb020>
 40458d4:	04810004 	movi	r18,1024
 40458d8:	003fc306 	br	40457e8 <__alt_data_end+0xfffdafe8>
 40458dc:	0027883a 	mov	r19,zero
 40458e0:	04810004 	movi	r18,1024
 40458e4:	003fc006 	br	40457e8 <__alt_data_end+0xfffdafe8>

040458e8 <_malloc_r>:
 40458e8:	defff504 	addi	sp,sp,-44
 40458ec:	dc800315 	stw	r18,12(sp)
 40458f0:	dfc00a15 	stw	ra,40(sp)
 40458f4:	df000915 	stw	fp,36(sp)
 40458f8:	ddc00815 	stw	r23,32(sp)
 40458fc:	dd800715 	stw	r22,28(sp)
 4045900:	dd400615 	stw	r21,24(sp)
 4045904:	dd000515 	stw	r20,20(sp)
 4045908:	dcc00415 	stw	r19,16(sp)
 404590c:	dc400215 	stw	r17,8(sp)
 4045910:	dc000115 	stw	r16,4(sp)
 4045914:	288002c4 	addi	r2,r5,11
 4045918:	00c00584 	movi	r3,22
 404591c:	2025883a 	mov	r18,r4
 4045920:	18807f2e 	bgeu	r3,r2,4045b20 <_malloc_r+0x238>
 4045924:	047ffe04 	movi	r17,-8
 4045928:	1462703a 	and	r17,r2,r17
 404592c:	8800a316 	blt	r17,zero,4045bbc <_malloc_r+0x2d4>
 4045930:	8940a236 	bltu	r17,r5,4045bbc <_malloc_r+0x2d4>
 4045934:	404d8900 	call	404d890 <__malloc_lock>
 4045938:	00807dc4 	movi	r2,503
 404593c:	1441e92e 	bgeu	r2,r17,40460e4 <_malloc_r+0x7fc>
 4045940:	8804d27a 	srli	r2,r17,9
 4045944:	1000a126 	beq	r2,zero,4045bcc <_malloc_r+0x2e4>
 4045948:	00c00104 	movi	r3,4
 404594c:	18811e36 	bltu	r3,r2,4045dc8 <_malloc_r+0x4e0>
 4045950:	8804d1ba 	srli	r2,r17,6
 4045954:	12000e44 	addi	r8,r2,57
 4045958:	11c00e04 	addi	r7,r2,56
 404595c:	4209883a 	add	r4,r8,r8
 4045960:	04c10174 	movhi	r19,1029
 4045964:	2109883a 	add	r4,r4,r4
 4045968:	9cc2a804 	addi	r19,r19,2720
 404596c:	2109883a 	add	r4,r4,r4
 4045970:	9909883a 	add	r4,r19,r4
 4045974:	24000117 	ldw	r16,4(r4)
 4045978:	213ffe04 	addi	r4,r4,-8
 404597c:	24009726 	beq	r4,r16,4045bdc <_malloc_r+0x2f4>
 4045980:	80800117 	ldw	r2,4(r16)
 4045984:	01bfff04 	movi	r6,-4
 4045988:	014003c4 	movi	r5,15
 404598c:	1184703a 	and	r2,r2,r6
 4045990:	1447c83a 	sub	r3,r2,r17
 4045994:	28c00716 	blt	r5,r3,40459b4 <_malloc_r+0xcc>
 4045998:	1800920e 	bge	r3,zero,4045be4 <_malloc_r+0x2fc>
 404599c:	84000317 	ldw	r16,12(r16)
 40459a0:	24008e26 	beq	r4,r16,4045bdc <_malloc_r+0x2f4>
 40459a4:	80800117 	ldw	r2,4(r16)
 40459a8:	1184703a 	and	r2,r2,r6
 40459ac:	1447c83a 	sub	r3,r2,r17
 40459b0:	28fff90e 	bge	r5,r3,4045998 <__alt_data_end+0xfffdb198>
 40459b4:	3809883a 	mov	r4,r7
 40459b8:	01810174 	movhi	r6,1029
 40459bc:	9c000417 	ldw	r16,16(r19)
 40459c0:	3182a804 	addi	r6,r6,2720
 40459c4:	32000204 	addi	r8,r6,8
 40459c8:	82013426 	beq	r16,r8,4045e9c <_malloc_r+0x5b4>
 40459cc:	80c00117 	ldw	r3,4(r16)
 40459d0:	00bfff04 	movi	r2,-4
 40459d4:	188e703a 	and	r7,r3,r2
 40459d8:	3c45c83a 	sub	r2,r7,r17
 40459dc:	00c003c4 	movi	r3,15
 40459e0:	18811f16 	blt	r3,r2,4045e60 <_malloc_r+0x578>
 40459e4:	32000515 	stw	r8,20(r6)
 40459e8:	32000415 	stw	r8,16(r6)
 40459ec:	10007f0e 	bge	r2,zero,4045bec <_malloc_r+0x304>
 40459f0:	00807fc4 	movi	r2,511
 40459f4:	11c0fd36 	bltu	r2,r7,4045dec <_malloc_r+0x504>
 40459f8:	3806d0fa 	srli	r3,r7,3
 40459fc:	01c00044 	movi	r7,1
 4045a00:	30800117 	ldw	r2,4(r6)
 4045a04:	19400044 	addi	r5,r3,1
 4045a08:	294b883a 	add	r5,r5,r5
 4045a0c:	1807d0ba 	srai	r3,r3,2
 4045a10:	294b883a 	add	r5,r5,r5
 4045a14:	294b883a 	add	r5,r5,r5
 4045a18:	298b883a 	add	r5,r5,r6
 4045a1c:	38c6983a 	sll	r3,r7,r3
 4045a20:	29c00017 	ldw	r7,0(r5)
 4045a24:	2a7ffe04 	addi	r9,r5,-8
 4045a28:	1886b03a 	or	r3,r3,r2
 4045a2c:	82400315 	stw	r9,12(r16)
 4045a30:	81c00215 	stw	r7,8(r16)
 4045a34:	30c00115 	stw	r3,4(r6)
 4045a38:	2c000015 	stw	r16,0(r5)
 4045a3c:	3c000315 	stw	r16,12(r7)
 4045a40:	2005d0ba 	srai	r2,r4,2
 4045a44:	01400044 	movi	r5,1
 4045a48:	288a983a 	sll	r5,r5,r2
 4045a4c:	19406f36 	bltu	r3,r5,4045c0c <_malloc_r+0x324>
 4045a50:	28c4703a 	and	r2,r5,r3
 4045a54:	10000a1e 	bne	r2,zero,4045a80 <_malloc_r+0x198>
 4045a58:	00bfff04 	movi	r2,-4
 4045a5c:	294b883a 	add	r5,r5,r5
 4045a60:	2088703a 	and	r4,r4,r2
 4045a64:	28c4703a 	and	r2,r5,r3
 4045a68:	21000104 	addi	r4,r4,4
 4045a6c:	1000041e 	bne	r2,zero,4045a80 <_malloc_r+0x198>
 4045a70:	294b883a 	add	r5,r5,r5
 4045a74:	28c4703a 	and	r2,r5,r3
 4045a78:	21000104 	addi	r4,r4,4
 4045a7c:	103ffc26 	beq	r2,zero,4045a70 <__alt_data_end+0xfffdb270>
 4045a80:	02bfff04 	movi	r10,-4
 4045a84:	024003c4 	movi	r9,15
 4045a88:	21800044 	addi	r6,r4,1
 4045a8c:	318d883a 	add	r6,r6,r6
 4045a90:	318d883a 	add	r6,r6,r6
 4045a94:	318d883a 	add	r6,r6,r6
 4045a98:	998d883a 	add	r6,r19,r6
 4045a9c:	333ffe04 	addi	r12,r6,-8
 4045aa0:	2017883a 	mov	r11,r4
 4045aa4:	31800104 	addi	r6,r6,4
 4045aa8:	34000017 	ldw	r16,0(r6)
 4045aac:	31fffd04 	addi	r7,r6,-12
 4045ab0:	81c0041e 	bne	r16,r7,4045ac4 <_malloc_r+0x1dc>
 4045ab4:	0000fb06 	br	4045ea4 <_malloc_r+0x5bc>
 4045ab8:	1801030e 	bge	r3,zero,4045ec8 <_malloc_r+0x5e0>
 4045abc:	84000317 	ldw	r16,12(r16)
 4045ac0:	81c0f826 	beq	r16,r7,4045ea4 <_malloc_r+0x5bc>
 4045ac4:	80800117 	ldw	r2,4(r16)
 4045ac8:	1284703a 	and	r2,r2,r10
 4045acc:	1447c83a 	sub	r3,r2,r17
 4045ad0:	48fff90e 	bge	r9,r3,4045ab8 <__alt_data_end+0xfffdb2b8>
 4045ad4:	80800317 	ldw	r2,12(r16)
 4045ad8:	81000217 	ldw	r4,8(r16)
 4045adc:	89400054 	ori	r5,r17,1
 4045ae0:	81400115 	stw	r5,4(r16)
 4045ae4:	20800315 	stw	r2,12(r4)
 4045ae8:	11000215 	stw	r4,8(r2)
 4045aec:	8463883a 	add	r17,r16,r17
 4045af0:	9c400515 	stw	r17,20(r19)
 4045af4:	9c400415 	stw	r17,16(r19)
 4045af8:	18800054 	ori	r2,r3,1
 4045afc:	88800115 	stw	r2,4(r17)
 4045b00:	8a000315 	stw	r8,12(r17)
 4045b04:	8a000215 	stw	r8,8(r17)
 4045b08:	88e3883a 	add	r17,r17,r3
 4045b0c:	88c00015 	stw	r3,0(r17)
 4045b10:	9009883a 	mov	r4,r18
 4045b14:	404d8b40 	call	404d8b4 <__malloc_unlock>
 4045b18:	80800204 	addi	r2,r16,8
 4045b1c:	00001b06 	br	4045b8c <_malloc_r+0x2a4>
 4045b20:	04400404 	movi	r17,16
 4045b24:	89402536 	bltu	r17,r5,4045bbc <_malloc_r+0x2d4>
 4045b28:	404d8900 	call	404d890 <__malloc_lock>
 4045b2c:	00800184 	movi	r2,6
 4045b30:	01000084 	movi	r4,2
 4045b34:	04c10174 	movhi	r19,1029
 4045b38:	1085883a 	add	r2,r2,r2
 4045b3c:	9cc2a804 	addi	r19,r19,2720
 4045b40:	1085883a 	add	r2,r2,r2
 4045b44:	9885883a 	add	r2,r19,r2
 4045b48:	14000117 	ldw	r16,4(r2)
 4045b4c:	10fffe04 	addi	r3,r2,-8
 4045b50:	80c0d926 	beq	r16,r3,4045eb8 <_malloc_r+0x5d0>
 4045b54:	80c00117 	ldw	r3,4(r16)
 4045b58:	81000317 	ldw	r4,12(r16)
 4045b5c:	00bfff04 	movi	r2,-4
 4045b60:	1884703a 	and	r2,r3,r2
 4045b64:	81400217 	ldw	r5,8(r16)
 4045b68:	8085883a 	add	r2,r16,r2
 4045b6c:	10c00117 	ldw	r3,4(r2)
 4045b70:	29000315 	stw	r4,12(r5)
 4045b74:	21400215 	stw	r5,8(r4)
 4045b78:	18c00054 	ori	r3,r3,1
 4045b7c:	10c00115 	stw	r3,4(r2)
 4045b80:	9009883a 	mov	r4,r18
 4045b84:	404d8b40 	call	404d8b4 <__malloc_unlock>
 4045b88:	80800204 	addi	r2,r16,8
 4045b8c:	dfc00a17 	ldw	ra,40(sp)
 4045b90:	df000917 	ldw	fp,36(sp)
 4045b94:	ddc00817 	ldw	r23,32(sp)
 4045b98:	dd800717 	ldw	r22,28(sp)
 4045b9c:	dd400617 	ldw	r21,24(sp)
 4045ba0:	dd000517 	ldw	r20,20(sp)
 4045ba4:	dcc00417 	ldw	r19,16(sp)
 4045ba8:	dc800317 	ldw	r18,12(sp)
 4045bac:	dc400217 	ldw	r17,8(sp)
 4045bb0:	dc000117 	ldw	r16,4(sp)
 4045bb4:	dec00b04 	addi	sp,sp,44
 4045bb8:	f800283a 	ret
 4045bbc:	00800304 	movi	r2,12
 4045bc0:	90800015 	stw	r2,0(r18)
 4045bc4:	0005883a 	mov	r2,zero
 4045bc8:	003ff006 	br	4045b8c <__alt_data_end+0xfffdb38c>
 4045bcc:	01002004 	movi	r4,128
 4045bd0:	02001004 	movi	r8,64
 4045bd4:	01c00fc4 	movi	r7,63
 4045bd8:	003f6106 	br	4045960 <__alt_data_end+0xfffdb160>
 4045bdc:	4009883a 	mov	r4,r8
 4045be0:	003f7506 	br	40459b8 <__alt_data_end+0xfffdb1b8>
 4045be4:	81000317 	ldw	r4,12(r16)
 4045be8:	003fde06 	br	4045b64 <__alt_data_end+0xfffdb364>
 4045bec:	81c5883a 	add	r2,r16,r7
 4045bf0:	11400117 	ldw	r5,4(r2)
 4045bf4:	9009883a 	mov	r4,r18
 4045bf8:	29400054 	ori	r5,r5,1
 4045bfc:	11400115 	stw	r5,4(r2)
 4045c00:	404d8b40 	call	404d8b4 <__malloc_unlock>
 4045c04:	80800204 	addi	r2,r16,8
 4045c08:	003fe006 	br	4045b8c <__alt_data_end+0xfffdb38c>
 4045c0c:	9c000217 	ldw	r16,8(r19)
 4045c10:	00bfff04 	movi	r2,-4
 4045c14:	85800117 	ldw	r22,4(r16)
 4045c18:	b0ac703a 	and	r22,r22,r2
 4045c1c:	b4400336 	bltu	r22,r17,4045c2c <_malloc_r+0x344>
 4045c20:	b445c83a 	sub	r2,r22,r17
 4045c24:	00c003c4 	movi	r3,15
 4045c28:	18805d16 	blt	r3,r2,4045da0 <_malloc_r+0x4b8>
 4045c2c:	05c10174 	movhi	r23,1029
 4045c30:	00810174 	movhi	r2,1029
 4045c34:	108f4b04 	addi	r2,r2,15660
 4045c38:	bdc85304 	addi	r23,r23,8524
 4045c3c:	15400017 	ldw	r21,0(r2)
 4045c40:	b8c00017 	ldw	r3,0(r23)
 4045c44:	00bfffc4 	movi	r2,-1
 4045c48:	858d883a 	add	r6,r16,r22
 4045c4c:	8d6b883a 	add	r21,r17,r21
 4045c50:	1880ea26 	beq	r3,r2,4045ffc <_malloc_r+0x714>
 4045c54:	ad4403c4 	addi	r21,r21,4111
 4045c58:	00bc0004 	movi	r2,-4096
 4045c5c:	a8aa703a 	and	r21,r21,r2
 4045c60:	a80b883a 	mov	r5,r21
 4045c64:	9009883a 	mov	r4,r18
 4045c68:	d9800015 	stw	r6,0(sp)
 4045c6c:	4047b780 	call	4047b78 <_sbrk_r>
 4045c70:	1029883a 	mov	r20,r2
 4045c74:	00bfffc4 	movi	r2,-1
 4045c78:	d9800017 	ldw	r6,0(sp)
 4045c7c:	a080e826 	beq	r20,r2,4046020 <_malloc_r+0x738>
 4045c80:	a180a636 	bltu	r20,r6,4045f1c <_malloc_r+0x634>
 4045c84:	07010174 	movhi	fp,1029
 4045c88:	e70f5404 	addi	fp,fp,15696
 4045c8c:	e0800017 	ldw	r2,0(fp)
 4045c90:	a887883a 	add	r3,r21,r2
 4045c94:	e0c00015 	stw	r3,0(fp)
 4045c98:	3500e626 	beq	r6,r20,4046034 <_malloc_r+0x74c>
 4045c9c:	b9000017 	ldw	r4,0(r23)
 4045ca0:	00bfffc4 	movi	r2,-1
 4045ca4:	2080ee26 	beq	r4,r2,4046060 <_malloc_r+0x778>
 4045ca8:	a185c83a 	sub	r2,r20,r6
 4045cac:	10c5883a 	add	r2,r2,r3
 4045cb0:	e0800015 	stw	r2,0(fp)
 4045cb4:	a0c001cc 	andi	r3,r20,7
 4045cb8:	1800bc26 	beq	r3,zero,4045fac <_malloc_r+0x6c4>
 4045cbc:	a0e9c83a 	sub	r20,r20,r3
 4045cc0:	00840204 	movi	r2,4104
 4045cc4:	a5000204 	addi	r20,r20,8
 4045cc8:	10c7c83a 	sub	r3,r2,r3
 4045ccc:	a545883a 	add	r2,r20,r21
 4045cd0:	1083ffcc 	andi	r2,r2,4095
 4045cd4:	18abc83a 	sub	r21,r3,r2
 4045cd8:	a80b883a 	mov	r5,r21
 4045cdc:	9009883a 	mov	r4,r18
 4045ce0:	4047b780 	call	4047b78 <_sbrk_r>
 4045ce4:	00ffffc4 	movi	r3,-1
 4045ce8:	10c0e126 	beq	r2,r3,4046070 <_malloc_r+0x788>
 4045cec:	1505c83a 	sub	r2,r2,r20
 4045cf0:	1545883a 	add	r2,r2,r21
 4045cf4:	10800054 	ori	r2,r2,1
 4045cf8:	e0c00017 	ldw	r3,0(fp)
 4045cfc:	9d000215 	stw	r20,8(r19)
 4045d00:	a0800115 	stw	r2,4(r20)
 4045d04:	a8c7883a 	add	r3,r21,r3
 4045d08:	e0c00015 	stw	r3,0(fp)
 4045d0c:	84c00e26 	beq	r16,r19,4045d48 <_malloc_r+0x460>
 4045d10:	018003c4 	movi	r6,15
 4045d14:	3580a72e 	bgeu	r6,r22,4045fb4 <_malloc_r+0x6cc>
 4045d18:	81400117 	ldw	r5,4(r16)
 4045d1c:	013ffe04 	movi	r4,-8
 4045d20:	b0bffd04 	addi	r2,r22,-12
 4045d24:	1104703a 	and	r2,r2,r4
 4045d28:	2900004c 	andi	r4,r5,1
 4045d2c:	2088b03a 	or	r4,r4,r2
 4045d30:	81000115 	stw	r4,4(r16)
 4045d34:	01400144 	movi	r5,5
 4045d38:	8089883a 	add	r4,r16,r2
 4045d3c:	21400115 	stw	r5,4(r4)
 4045d40:	21400215 	stw	r5,8(r4)
 4045d44:	3080cd36 	bltu	r6,r2,404607c <_malloc_r+0x794>
 4045d48:	00810174 	movhi	r2,1029
 4045d4c:	108f4a04 	addi	r2,r2,15656
 4045d50:	11000017 	ldw	r4,0(r2)
 4045d54:	20c0012e 	bgeu	r4,r3,4045d5c <_malloc_r+0x474>
 4045d58:	10c00015 	stw	r3,0(r2)
 4045d5c:	00810174 	movhi	r2,1029
 4045d60:	108f4904 	addi	r2,r2,15652
 4045d64:	11000017 	ldw	r4,0(r2)
 4045d68:	9c000217 	ldw	r16,8(r19)
 4045d6c:	20c0012e 	bgeu	r4,r3,4045d74 <_malloc_r+0x48c>
 4045d70:	10c00015 	stw	r3,0(r2)
 4045d74:	80c00117 	ldw	r3,4(r16)
 4045d78:	00bfff04 	movi	r2,-4
 4045d7c:	1886703a 	and	r3,r3,r2
 4045d80:	1c45c83a 	sub	r2,r3,r17
 4045d84:	1c400236 	bltu	r3,r17,4045d90 <_malloc_r+0x4a8>
 4045d88:	00c003c4 	movi	r3,15
 4045d8c:	18800416 	blt	r3,r2,4045da0 <_malloc_r+0x4b8>
 4045d90:	9009883a 	mov	r4,r18
 4045d94:	404d8b40 	call	404d8b4 <__malloc_unlock>
 4045d98:	0005883a 	mov	r2,zero
 4045d9c:	003f7b06 	br	4045b8c <__alt_data_end+0xfffdb38c>
 4045da0:	88c00054 	ori	r3,r17,1
 4045da4:	80c00115 	stw	r3,4(r16)
 4045da8:	8463883a 	add	r17,r16,r17
 4045dac:	10800054 	ori	r2,r2,1
 4045db0:	9c400215 	stw	r17,8(r19)
 4045db4:	88800115 	stw	r2,4(r17)
 4045db8:	9009883a 	mov	r4,r18
 4045dbc:	404d8b40 	call	404d8b4 <__malloc_unlock>
 4045dc0:	80800204 	addi	r2,r16,8
 4045dc4:	003f7106 	br	4045b8c <__alt_data_end+0xfffdb38c>
 4045dc8:	00c00504 	movi	r3,20
 4045dcc:	18804a2e 	bgeu	r3,r2,4045ef8 <_malloc_r+0x610>
 4045dd0:	00c01504 	movi	r3,84
 4045dd4:	18806e36 	bltu	r3,r2,4045f90 <_malloc_r+0x6a8>
 4045dd8:	8804d33a 	srli	r2,r17,12
 4045ddc:	12001bc4 	addi	r8,r2,111
 4045de0:	11c01b84 	addi	r7,r2,110
 4045de4:	4209883a 	add	r4,r8,r8
 4045de8:	003edd06 	br	4045960 <__alt_data_end+0xfffdb160>
 4045dec:	3804d27a 	srli	r2,r7,9
 4045df0:	00c00104 	movi	r3,4
 4045df4:	1880442e 	bgeu	r3,r2,4045f08 <_malloc_r+0x620>
 4045df8:	00c00504 	movi	r3,20
 4045dfc:	18808136 	bltu	r3,r2,4046004 <_malloc_r+0x71c>
 4045e00:	11401704 	addi	r5,r2,92
 4045e04:	10c016c4 	addi	r3,r2,91
 4045e08:	294b883a 	add	r5,r5,r5
 4045e0c:	294b883a 	add	r5,r5,r5
 4045e10:	294b883a 	add	r5,r5,r5
 4045e14:	994b883a 	add	r5,r19,r5
 4045e18:	28800017 	ldw	r2,0(r5)
 4045e1c:	01810174 	movhi	r6,1029
 4045e20:	297ffe04 	addi	r5,r5,-8
 4045e24:	3182a804 	addi	r6,r6,2720
 4045e28:	28806526 	beq	r5,r2,4045fc0 <_malloc_r+0x6d8>
 4045e2c:	01bfff04 	movi	r6,-4
 4045e30:	10c00117 	ldw	r3,4(r2)
 4045e34:	1986703a 	and	r3,r3,r6
 4045e38:	38c0022e 	bgeu	r7,r3,4045e44 <_malloc_r+0x55c>
 4045e3c:	10800217 	ldw	r2,8(r2)
 4045e40:	28bffb1e 	bne	r5,r2,4045e30 <__alt_data_end+0xfffdb630>
 4045e44:	11400317 	ldw	r5,12(r2)
 4045e48:	98c00117 	ldw	r3,4(r19)
 4045e4c:	81400315 	stw	r5,12(r16)
 4045e50:	80800215 	stw	r2,8(r16)
 4045e54:	2c000215 	stw	r16,8(r5)
 4045e58:	14000315 	stw	r16,12(r2)
 4045e5c:	003ef806 	br	4045a40 <__alt_data_end+0xfffdb240>
 4045e60:	88c00054 	ori	r3,r17,1
 4045e64:	80c00115 	stw	r3,4(r16)
 4045e68:	8463883a 	add	r17,r16,r17
 4045e6c:	34400515 	stw	r17,20(r6)
 4045e70:	34400415 	stw	r17,16(r6)
 4045e74:	10c00054 	ori	r3,r2,1
 4045e78:	8a000315 	stw	r8,12(r17)
 4045e7c:	8a000215 	stw	r8,8(r17)
 4045e80:	88c00115 	stw	r3,4(r17)
 4045e84:	88a3883a 	add	r17,r17,r2
 4045e88:	88800015 	stw	r2,0(r17)
 4045e8c:	9009883a 	mov	r4,r18
 4045e90:	404d8b40 	call	404d8b4 <__malloc_unlock>
 4045e94:	80800204 	addi	r2,r16,8
 4045e98:	003f3c06 	br	4045b8c <__alt_data_end+0xfffdb38c>
 4045e9c:	30c00117 	ldw	r3,4(r6)
 4045ea0:	003ee706 	br	4045a40 <__alt_data_end+0xfffdb240>
 4045ea4:	5ac00044 	addi	r11,r11,1
 4045ea8:	588000cc 	andi	r2,r11,3
 4045eac:	31800204 	addi	r6,r6,8
 4045eb0:	103efd1e 	bne	r2,zero,4045aa8 <__alt_data_end+0xfffdb2a8>
 4045eb4:	00002406 	br	4045f48 <_malloc_r+0x660>
 4045eb8:	14000317 	ldw	r16,12(r2)
 4045ebc:	143f251e 	bne	r2,r16,4045b54 <__alt_data_end+0xfffdb354>
 4045ec0:	21000084 	addi	r4,r4,2
 4045ec4:	003ebc06 	br	40459b8 <__alt_data_end+0xfffdb1b8>
 4045ec8:	8085883a 	add	r2,r16,r2
 4045ecc:	10c00117 	ldw	r3,4(r2)
 4045ed0:	81000317 	ldw	r4,12(r16)
 4045ed4:	81400217 	ldw	r5,8(r16)
 4045ed8:	18c00054 	ori	r3,r3,1
 4045edc:	10c00115 	stw	r3,4(r2)
 4045ee0:	29000315 	stw	r4,12(r5)
 4045ee4:	21400215 	stw	r5,8(r4)
 4045ee8:	9009883a 	mov	r4,r18
 4045eec:	404d8b40 	call	404d8b4 <__malloc_unlock>
 4045ef0:	80800204 	addi	r2,r16,8
 4045ef4:	003f2506 	br	4045b8c <__alt_data_end+0xfffdb38c>
 4045ef8:	12001704 	addi	r8,r2,92
 4045efc:	11c016c4 	addi	r7,r2,91
 4045f00:	4209883a 	add	r4,r8,r8
 4045f04:	003e9606 	br	4045960 <__alt_data_end+0xfffdb160>
 4045f08:	3804d1ba 	srli	r2,r7,6
 4045f0c:	11400e44 	addi	r5,r2,57
 4045f10:	10c00e04 	addi	r3,r2,56
 4045f14:	294b883a 	add	r5,r5,r5
 4045f18:	003fbc06 	br	4045e0c <__alt_data_end+0xfffdb60c>
 4045f1c:	84ff5926 	beq	r16,r19,4045c84 <__alt_data_end+0xfffdb484>
 4045f20:	00810174 	movhi	r2,1029
 4045f24:	1082a804 	addi	r2,r2,2720
 4045f28:	14000217 	ldw	r16,8(r2)
 4045f2c:	00bfff04 	movi	r2,-4
 4045f30:	80c00117 	ldw	r3,4(r16)
 4045f34:	1886703a 	and	r3,r3,r2
 4045f38:	003f9106 	br	4045d80 <__alt_data_end+0xfffdb580>
 4045f3c:	60800217 	ldw	r2,8(r12)
 4045f40:	213fffc4 	addi	r4,r4,-1
 4045f44:	1300651e 	bne	r2,r12,40460dc <_malloc_r+0x7f4>
 4045f48:	208000cc 	andi	r2,r4,3
 4045f4c:	633ffe04 	addi	r12,r12,-8
 4045f50:	103ffa1e 	bne	r2,zero,4045f3c <__alt_data_end+0xfffdb73c>
 4045f54:	98800117 	ldw	r2,4(r19)
 4045f58:	0146303a 	nor	r3,zero,r5
 4045f5c:	1884703a 	and	r2,r3,r2
 4045f60:	98800115 	stw	r2,4(r19)
 4045f64:	294b883a 	add	r5,r5,r5
 4045f68:	117f2836 	bltu	r2,r5,4045c0c <__alt_data_end+0xfffdb40c>
 4045f6c:	283f2726 	beq	r5,zero,4045c0c <__alt_data_end+0xfffdb40c>
 4045f70:	2886703a 	and	r3,r5,r2
 4045f74:	5809883a 	mov	r4,r11
 4045f78:	183ec31e 	bne	r3,zero,4045a88 <__alt_data_end+0xfffdb288>
 4045f7c:	294b883a 	add	r5,r5,r5
 4045f80:	2886703a 	and	r3,r5,r2
 4045f84:	21000104 	addi	r4,r4,4
 4045f88:	183ffc26 	beq	r3,zero,4045f7c <__alt_data_end+0xfffdb77c>
 4045f8c:	003ebe06 	br	4045a88 <__alt_data_end+0xfffdb288>
 4045f90:	00c05504 	movi	r3,340
 4045f94:	18801236 	bltu	r3,r2,4045fe0 <_malloc_r+0x6f8>
 4045f98:	8804d3fa 	srli	r2,r17,15
 4045f9c:	12001e04 	addi	r8,r2,120
 4045fa0:	11c01dc4 	addi	r7,r2,119
 4045fa4:	4209883a 	add	r4,r8,r8
 4045fa8:	003e6d06 	br	4045960 <__alt_data_end+0xfffdb160>
 4045fac:	00c40004 	movi	r3,4096
 4045fb0:	003f4606 	br	4045ccc <__alt_data_end+0xfffdb4cc>
 4045fb4:	00800044 	movi	r2,1
 4045fb8:	a0800115 	stw	r2,4(r20)
 4045fbc:	003f7406 	br	4045d90 <__alt_data_end+0xfffdb590>
 4045fc0:	1805d0ba 	srai	r2,r3,2
 4045fc4:	01c00044 	movi	r7,1
 4045fc8:	30c00117 	ldw	r3,4(r6)
 4045fcc:	388e983a 	sll	r7,r7,r2
 4045fd0:	2805883a 	mov	r2,r5
 4045fd4:	38c6b03a 	or	r3,r7,r3
 4045fd8:	30c00115 	stw	r3,4(r6)
 4045fdc:	003f9b06 	br	4045e4c <__alt_data_end+0xfffdb64c>
 4045fe0:	00c15504 	movi	r3,1364
 4045fe4:	18801a36 	bltu	r3,r2,4046050 <_malloc_r+0x768>
 4045fe8:	8804d4ba 	srli	r2,r17,18
 4045fec:	12001f44 	addi	r8,r2,125
 4045ff0:	11c01f04 	addi	r7,r2,124
 4045ff4:	4209883a 	add	r4,r8,r8
 4045ff8:	003e5906 	br	4045960 <__alt_data_end+0xfffdb160>
 4045ffc:	ad400404 	addi	r21,r21,16
 4046000:	003f1706 	br	4045c60 <__alt_data_end+0xfffdb460>
 4046004:	00c01504 	movi	r3,84
 4046008:	18802336 	bltu	r3,r2,4046098 <_malloc_r+0x7b0>
 404600c:	3804d33a 	srli	r2,r7,12
 4046010:	11401bc4 	addi	r5,r2,111
 4046014:	10c01b84 	addi	r3,r2,110
 4046018:	294b883a 	add	r5,r5,r5
 404601c:	003f7b06 	br	4045e0c <__alt_data_end+0xfffdb60c>
 4046020:	9c000217 	ldw	r16,8(r19)
 4046024:	00bfff04 	movi	r2,-4
 4046028:	80c00117 	ldw	r3,4(r16)
 404602c:	1886703a 	and	r3,r3,r2
 4046030:	003f5306 	br	4045d80 <__alt_data_end+0xfffdb580>
 4046034:	3083ffcc 	andi	r2,r6,4095
 4046038:	103f181e 	bne	r2,zero,4045c9c <__alt_data_end+0xfffdb49c>
 404603c:	99000217 	ldw	r4,8(r19)
 4046040:	b545883a 	add	r2,r22,r21
 4046044:	10800054 	ori	r2,r2,1
 4046048:	20800115 	stw	r2,4(r4)
 404604c:	003f3e06 	br	4045d48 <__alt_data_end+0xfffdb548>
 4046050:	01003f84 	movi	r4,254
 4046054:	02001fc4 	movi	r8,127
 4046058:	01c01f84 	movi	r7,126
 404605c:	003e4006 	br	4045960 <__alt_data_end+0xfffdb160>
 4046060:	00810174 	movhi	r2,1029
 4046064:	10885304 	addi	r2,r2,8524
 4046068:	15000015 	stw	r20,0(r2)
 404606c:	003f1106 	br	4045cb4 <__alt_data_end+0xfffdb4b4>
 4046070:	00800044 	movi	r2,1
 4046074:	002b883a 	mov	r21,zero
 4046078:	003f1f06 	br	4045cf8 <__alt_data_end+0xfffdb4f8>
 404607c:	81400204 	addi	r5,r16,8
 4046080:	9009883a 	mov	r4,r18
 4046084:	4044cfc0 	call	4044cfc <_free_r>
 4046088:	00810174 	movhi	r2,1029
 404608c:	108f5404 	addi	r2,r2,15696
 4046090:	10c00017 	ldw	r3,0(r2)
 4046094:	003f2c06 	br	4045d48 <__alt_data_end+0xfffdb548>
 4046098:	00c05504 	movi	r3,340
 404609c:	18800536 	bltu	r3,r2,40460b4 <_malloc_r+0x7cc>
 40460a0:	3804d3fa 	srli	r2,r7,15
 40460a4:	11401e04 	addi	r5,r2,120
 40460a8:	10c01dc4 	addi	r3,r2,119
 40460ac:	294b883a 	add	r5,r5,r5
 40460b0:	003f5606 	br	4045e0c <__alt_data_end+0xfffdb60c>
 40460b4:	00c15504 	movi	r3,1364
 40460b8:	18800536 	bltu	r3,r2,40460d0 <_malloc_r+0x7e8>
 40460bc:	3804d4ba 	srli	r2,r7,18
 40460c0:	11401f44 	addi	r5,r2,125
 40460c4:	10c01f04 	addi	r3,r2,124
 40460c8:	294b883a 	add	r5,r5,r5
 40460cc:	003f4f06 	br	4045e0c <__alt_data_end+0xfffdb60c>
 40460d0:	01403f84 	movi	r5,254
 40460d4:	00c01f84 	movi	r3,126
 40460d8:	003f4c06 	br	4045e0c <__alt_data_end+0xfffdb60c>
 40460dc:	98800117 	ldw	r2,4(r19)
 40460e0:	003fa006 	br	4045f64 <__alt_data_end+0xfffdb764>
 40460e4:	8808d0fa 	srli	r4,r17,3
 40460e8:	20800044 	addi	r2,r4,1
 40460ec:	1085883a 	add	r2,r2,r2
 40460f0:	003e9006 	br	4045b34 <__alt_data_end+0xfffdb334>

040460f4 <memchr>:
 40460f4:	208000cc 	andi	r2,r4,3
 40460f8:	280f883a 	mov	r7,r5
 40460fc:	10003426 	beq	r2,zero,40461d0 <memchr+0xdc>
 4046100:	30bfffc4 	addi	r2,r6,-1
 4046104:	30001a26 	beq	r6,zero,4046170 <memchr+0x7c>
 4046108:	20c00003 	ldbu	r3,0(r4)
 404610c:	29803fcc 	andi	r6,r5,255
 4046110:	30c0051e 	bne	r6,r3,4046128 <memchr+0x34>
 4046114:	00001806 	br	4046178 <memchr+0x84>
 4046118:	10001526 	beq	r2,zero,4046170 <memchr+0x7c>
 404611c:	20c00003 	ldbu	r3,0(r4)
 4046120:	10bfffc4 	addi	r2,r2,-1
 4046124:	30c01426 	beq	r6,r3,4046178 <memchr+0x84>
 4046128:	21000044 	addi	r4,r4,1
 404612c:	20c000cc 	andi	r3,r4,3
 4046130:	183ff91e 	bne	r3,zero,4046118 <__alt_data_end+0xfffdb918>
 4046134:	020000c4 	movi	r8,3
 4046138:	40801136 	bltu	r8,r2,4046180 <memchr+0x8c>
 404613c:	10000c26 	beq	r2,zero,4046170 <memchr+0x7c>
 4046140:	20c00003 	ldbu	r3,0(r4)
 4046144:	29403fcc 	andi	r5,r5,255
 4046148:	28c00b26 	beq	r5,r3,4046178 <memchr+0x84>
 404614c:	20c00044 	addi	r3,r4,1
 4046150:	39803fcc 	andi	r6,r7,255
 4046154:	2089883a 	add	r4,r4,r2
 4046158:	00000306 	br	4046168 <memchr+0x74>
 404615c:	18c00044 	addi	r3,r3,1
 4046160:	197fffc3 	ldbu	r5,-1(r3)
 4046164:	31400526 	beq	r6,r5,404617c <memchr+0x88>
 4046168:	1805883a 	mov	r2,r3
 404616c:	20fffb1e 	bne	r4,r3,404615c <__alt_data_end+0xfffdb95c>
 4046170:	0005883a 	mov	r2,zero
 4046174:	f800283a 	ret
 4046178:	2005883a 	mov	r2,r4
 404617c:	f800283a 	ret
 4046180:	28c03fcc 	andi	r3,r5,255
 4046184:	1812923a 	slli	r9,r3,8
 4046188:	02ffbff4 	movhi	r11,65279
 404618c:	02a02074 	movhi	r10,32897
 4046190:	48d2b03a 	or	r9,r9,r3
 4046194:	4806943a 	slli	r3,r9,16
 4046198:	5affbfc4 	addi	r11,r11,-257
 404619c:	52a02004 	addi	r10,r10,-32640
 40461a0:	48d2b03a 	or	r9,r9,r3
 40461a4:	20c00017 	ldw	r3,0(r4)
 40461a8:	48c6f03a 	xor	r3,r9,r3
 40461ac:	1acd883a 	add	r6,r3,r11
 40461b0:	00c6303a 	nor	r3,zero,r3
 40461b4:	30c6703a 	and	r3,r6,r3
 40461b8:	1a86703a 	and	r3,r3,r10
 40461bc:	183fe01e 	bne	r3,zero,4046140 <__alt_data_end+0xfffdb940>
 40461c0:	10bfff04 	addi	r2,r2,-4
 40461c4:	21000104 	addi	r4,r4,4
 40461c8:	40bff636 	bltu	r8,r2,40461a4 <__alt_data_end+0xfffdb9a4>
 40461cc:	003fdb06 	br	404613c <__alt_data_end+0xfffdb93c>
 40461d0:	3005883a 	mov	r2,r6
 40461d4:	003fd706 	br	4046134 <__alt_data_end+0xfffdb934>

040461d8 <memcpy>:
 40461d8:	defffd04 	addi	sp,sp,-12
 40461dc:	dfc00215 	stw	ra,8(sp)
 40461e0:	dc400115 	stw	r17,4(sp)
 40461e4:	dc000015 	stw	r16,0(sp)
 40461e8:	00c003c4 	movi	r3,15
 40461ec:	2005883a 	mov	r2,r4
 40461f0:	1980452e 	bgeu	r3,r6,4046308 <memcpy+0x130>
 40461f4:	2906b03a 	or	r3,r5,r4
 40461f8:	18c000cc 	andi	r3,r3,3
 40461fc:	1800441e 	bne	r3,zero,4046310 <memcpy+0x138>
 4046200:	347ffc04 	addi	r17,r6,-16
 4046204:	8822d13a 	srli	r17,r17,4
 4046208:	28c00104 	addi	r3,r5,4
 404620c:	23400104 	addi	r13,r4,4
 4046210:	8820913a 	slli	r16,r17,4
 4046214:	2b000204 	addi	r12,r5,8
 4046218:	22c00204 	addi	r11,r4,8
 404621c:	84000504 	addi	r16,r16,20
 4046220:	2a800304 	addi	r10,r5,12
 4046224:	22400304 	addi	r9,r4,12
 4046228:	2c21883a 	add	r16,r5,r16
 404622c:	2811883a 	mov	r8,r5
 4046230:	200f883a 	mov	r7,r4
 4046234:	41000017 	ldw	r4,0(r8)
 4046238:	1fc00017 	ldw	ra,0(r3)
 404623c:	63c00017 	ldw	r15,0(r12)
 4046240:	39000015 	stw	r4,0(r7)
 4046244:	53800017 	ldw	r14,0(r10)
 4046248:	6fc00015 	stw	ra,0(r13)
 404624c:	5bc00015 	stw	r15,0(r11)
 4046250:	4b800015 	stw	r14,0(r9)
 4046254:	18c00404 	addi	r3,r3,16
 4046258:	39c00404 	addi	r7,r7,16
 404625c:	42000404 	addi	r8,r8,16
 4046260:	6b400404 	addi	r13,r13,16
 4046264:	63000404 	addi	r12,r12,16
 4046268:	5ac00404 	addi	r11,r11,16
 404626c:	52800404 	addi	r10,r10,16
 4046270:	4a400404 	addi	r9,r9,16
 4046274:	1c3fef1e 	bne	r3,r16,4046234 <__alt_data_end+0xfffdba34>
 4046278:	89c00044 	addi	r7,r17,1
 404627c:	380e913a 	slli	r7,r7,4
 4046280:	310003cc 	andi	r4,r6,15
 4046284:	02c000c4 	movi	r11,3
 4046288:	11c7883a 	add	r3,r2,r7
 404628c:	29cb883a 	add	r5,r5,r7
 4046290:	5900212e 	bgeu	r11,r4,4046318 <memcpy+0x140>
 4046294:	1813883a 	mov	r9,r3
 4046298:	2811883a 	mov	r8,r5
 404629c:	200f883a 	mov	r7,r4
 40462a0:	42800017 	ldw	r10,0(r8)
 40462a4:	4a400104 	addi	r9,r9,4
 40462a8:	39ffff04 	addi	r7,r7,-4
 40462ac:	4abfff15 	stw	r10,-4(r9)
 40462b0:	42000104 	addi	r8,r8,4
 40462b4:	59fffa36 	bltu	r11,r7,40462a0 <__alt_data_end+0xfffdbaa0>
 40462b8:	213fff04 	addi	r4,r4,-4
 40462bc:	2008d0ba 	srli	r4,r4,2
 40462c0:	318000cc 	andi	r6,r6,3
 40462c4:	21000044 	addi	r4,r4,1
 40462c8:	2109883a 	add	r4,r4,r4
 40462cc:	2109883a 	add	r4,r4,r4
 40462d0:	1907883a 	add	r3,r3,r4
 40462d4:	290b883a 	add	r5,r5,r4
 40462d8:	30000626 	beq	r6,zero,40462f4 <memcpy+0x11c>
 40462dc:	198d883a 	add	r6,r3,r6
 40462e0:	29c00003 	ldbu	r7,0(r5)
 40462e4:	18c00044 	addi	r3,r3,1
 40462e8:	29400044 	addi	r5,r5,1
 40462ec:	19ffffc5 	stb	r7,-1(r3)
 40462f0:	19bffb1e 	bne	r3,r6,40462e0 <__alt_data_end+0xfffdbae0>
 40462f4:	dfc00217 	ldw	ra,8(sp)
 40462f8:	dc400117 	ldw	r17,4(sp)
 40462fc:	dc000017 	ldw	r16,0(sp)
 4046300:	dec00304 	addi	sp,sp,12
 4046304:	f800283a 	ret
 4046308:	2007883a 	mov	r3,r4
 404630c:	003ff206 	br	40462d8 <__alt_data_end+0xfffdbad8>
 4046310:	2007883a 	mov	r3,r4
 4046314:	003ff106 	br	40462dc <__alt_data_end+0xfffdbadc>
 4046318:	200d883a 	mov	r6,r4
 404631c:	003fee06 	br	40462d8 <__alt_data_end+0xfffdbad8>

04046320 <memmove>:
 4046320:	2005883a 	mov	r2,r4
 4046324:	29000b2e 	bgeu	r5,r4,4046354 <memmove+0x34>
 4046328:	298f883a 	add	r7,r5,r6
 404632c:	21c0092e 	bgeu	r4,r7,4046354 <memmove+0x34>
 4046330:	2187883a 	add	r3,r4,r6
 4046334:	198bc83a 	sub	r5,r3,r6
 4046338:	30004826 	beq	r6,zero,404645c <memmove+0x13c>
 404633c:	39ffffc4 	addi	r7,r7,-1
 4046340:	39000003 	ldbu	r4,0(r7)
 4046344:	18ffffc4 	addi	r3,r3,-1
 4046348:	19000005 	stb	r4,0(r3)
 404634c:	28fffb1e 	bne	r5,r3,404633c <__alt_data_end+0xfffdbb3c>
 4046350:	f800283a 	ret
 4046354:	00c003c4 	movi	r3,15
 4046358:	1980412e 	bgeu	r3,r6,4046460 <memmove+0x140>
 404635c:	2886b03a 	or	r3,r5,r2
 4046360:	18c000cc 	andi	r3,r3,3
 4046364:	1800401e 	bne	r3,zero,4046468 <memmove+0x148>
 4046368:	33fffc04 	addi	r15,r6,-16
 404636c:	781ed13a 	srli	r15,r15,4
 4046370:	28c00104 	addi	r3,r5,4
 4046374:	13400104 	addi	r13,r2,4
 4046378:	781c913a 	slli	r14,r15,4
 404637c:	2b000204 	addi	r12,r5,8
 4046380:	12c00204 	addi	r11,r2,8
 4046384:	73800504 	addi	r14,r14,20
 4046388:	2a800304 	addi	r10,r5,12
 404638c:	12400304 	addi	r9,r2,12
 4046390:	2b9d883a 	add	r14,r5,r14
 4046394:	2811883a 	mov	r8,r5
 4046398:	100f883a 	mov	r7,r2
 404639c:	41000017 	ldw	r4,0(r8)
 40463a0:	39c00404 	addi	r7,r7,16
 40463a4:	18c00404 	addi	r3,r3,16
 40463a8:	393ffc15 	stw	r4,-16(r7)
 40463ac:	193ffc17 	ldw	r4,-16(r3)
 40463b0:	6b400404 	addi	r13,r13,16
 40463b4:	5ac00404 	addi	r11,r11,16
 40463b8:	693ffc15 	stw	r4,-16(r13)
 40463bc:	61000017 	ldw	r4,0(r12)
 40463c0:	4a400404 	addi	r9,r9,16
 40463c4:	42000404 	addi	r8,r8,16
 40463c8:	593ffc15 	stw	r4,-16(r11)
 40463cc:	51000017 	ldw	r4,0(r10)
 40463d0:	63000404 	addi	r12,r12,16
 40463d4:	52800404 	addi	r10,r10,16
 40463d8:	493ffc15 	stw	r4,-16(r9)
 40463dc:	1bbfef1e 	bne	r3,r14,404639c <__alt_data_end+0xfffdbb9c>
 40463e0:	79000044 	addi	r4,r15,1
 40463e4:	2008913a 	slli	r4,r4,4
 40463e8:	328003cc 	andi	r10,r6,15
 40463ec:	02c000c4 	movi	r11,3
 40463f0:	1107883a 	add	r3,r2,r4
 40463f4:	290b883a 	add	r5,r5,r4
 40463f8:	5a801e2e 	bgeu	r11,r10,4046474 <memmove+0x154>
 40463fc:	1813883a 	mov	r9,r3
 4046400:	2811883a 	mov	r8,r5
 4046404:	500f883a 	mov	r7,r10
 4046408:	41000017 	ldw	r4,0(r8)
 404640c:	4a400104 	addi	r9,r9,4
 4046410:	39ffff04 	addi	r7,r7,-4
 4046414:	493fff15 	stw	r4,-4(r9)
 4046418:	42000104 	addi	r8,r8,4
 404641c:	59fffa36 	bltu	r11,r7,4046408 <__alt_data_end+0xfffdbc08>
 4046420:	513fff04 	addi	r4,r10,-4
 4046424:	2008d0ba 	srli	r4,r4,2
 4046428:	318000cc 	andi	r6,r6,3
 404642c:	21000044 	addi	r4,r4,1
 4046430:	2109883a 	add	r4,r4,r4
 4046434:	2109883a 	add	r4,r4,r4
 4046438:	1907883a 	add	r3,r3,r4
 404643c:	290b883a 	add	r5,r5,r4
 4046440:	30000b26 	beq	r6,zero,4046470 <memmove+0x150>
 4046444:	198d883a 	add	r6,r3,r6
 4046448:	29c00003 	ldbu	r7,0(r5)
 404644c:	18c00044 	addi	r3,r3,1
 4046450:	29400044 	addi	r5,r5,1
 4046454:	19ffffc5 	stb	r7,-1(r3)
 4046458:	19bffb1e 	bne	r3,r6,4046448 <__alt_data_end+0xfffdbc48>
 404645c:	f800283a 	ret
 4046460:	1007883a 	mov	r3,r2
 4046464:	003ff606 	br	4046440 <__alt_data_end+0xfffdbc40>
 4046468:	1007883a 	mov	r3,r2
 404646c:	003ff506 	br	4046444 <__alt_data_end+0xfffdbc44>
 4046470:	f800283a 	ret
 4046474:	500d883a 	mov	r6,r10
 4046478:	003ff106 	br	4046440 <__alt_data_end+0xfffdbc40>

0404647c <memset>:
 404647c:	20c000cc 	andi	r3,r4,3
 4046480:	2005883a 	mov	r2,r4
 4046484:	18004426 	beq	r3,zero,4046598 <memset+0x11c>
 4046488:	31ffffc4 	addi	r7,r6,-1
 404648c:	30004026 	beq	r6,zero,4046590 <memset+0x114>
 4046490:	2813883a 	mov	r9,r5
 4046494:	200d883a 	mov	r6,r4
 4046498:	2007883a 	mov	r3,r4
 404649c:	00000406 	br	40464b0 <memset+0x34>
 40464a0:	3a3fffc4 	addi	r8,r7,-1
 40464a4:	31800044 	addi	r6,r6,1
 40464a8:	38003926 	beq	r7,zero,4046590 <memset+0x114>
 40464ac:	400f883a 	mov	r7,r8
 40464b0:	18c00044 	addi	r3,r3,1
 40464b4:	32400005 	stb	r9,0(r6)
 40464b8:	1a0000cc 	andi	r8,r3,3
 40464bc:	403ff81e 	bne	r8,zero,40464a0 <__alt_data_end+0xfffdbca0>
 40464c0:	010000c4 	movi	r4,3
 40464c4:	21c02d2e 	bgeu	r4,r7,404657c <memset+0x100>
 40464c8:	29003fcc 	andi	r4,r5,255
 40464cc:	200c923a 	slli	r6,r4,8
 40464d0:	3108b03a 	or	r4,r6,r4
 40464d4:	200c943a 	slli	r6,r4,16
 40464d8:	218cb03a 	or	r6,r4,r6
 40464dc:	010003c4 	movi	r4,15
 40464e0:	21c0182e 	bgeu	r4,r7,4046544 <memset+0xc8>
 40464e4:	3b3ffc04 	addi	r12,r7,-16
 40464e8:	6018d13a 	srli	r12,r12,4
 40464ec:	1a000104 	addi	r8,r3,4
 40464f0:	1ac00204 	addi	r11,r3,8
 40464f4:	6008913a 	slli	r4,r12,4
 40464f8:	1a800304 	addi	r10,r3,12
 40464fc:	1813883a 	mov	r9,r3
 4046500:	21000504 	addi	r4,r4,20
 4046504:	1909883a 	add	r4,r3,r4
 4046508:	49800015 	stw	r6,0(r9)
 404650c:	41800015 	stw	r6,0(r8)
 4046510:	59800015 	stw	r6,0(r11)
 4046514:	51800015 	stw	r6,0(r10)
 4046518:	42000404 	addi	r8,r8,16
 404651c:	4a400404 	addi	r9,r9,16
 4046520:	5ac00404 	addi	r11,r11,16
 4046524:	52800404 	addi	r10,r10,16
 4046528:	413ff71e 	bne	r8,r4,4046508 <__alt_data_end+0xfffdbd08>
 404652c:	63000044 	addi	r12,r12,1
 4046530:	6018913a 	slli	r12,r12,4
 4046534:	39c003cc 	andi	r7,r7,15
 4046538:	010000c4 	movi	r4,3
 404653c:	1b07883a 	add	r3,r3,r12
 4046540:	21c00e2e 	bgeu	r4,r7,404657c <memset+0x100>
 4046544:	1813883a 	mov	r9,r3
 4046548:	3811883a 	mov	r8,r7
 404654c:	010000c4 	movi	r4,3
 4046550:	49800015 	stw	r6,0(r9)
 4046554:	423fff04 	addi	r8,r8,-4
 4046558:	4a400104 	addi	r9,r9,4
 404655c:	223ffc36 	bltu	r4,r8,4046550 <__alt_data_end+0xfffdbd50>
 4046560:	393fff04 	addi	r4,r7,-4
 4046564:	2008d0ba 	srli	r4,r4,2
 4046568:	39c000cc 	andi	r7,r7,3
 404656c:	21000044 	addi	r4,r4,1
 4046570:	2109883a 	add	r4,r4,r4
 4046574:	2109883a 	add	r4,r4,r4
 4046578:	1907883a 	add	r3,r3,r4
 404657c:	38000526 	beq	r7,zero,4046594 <memset+0x118>
 4046580:	19cf883a 	add	r7,r3,r7
 4046584:	19400005 	stb	r5,0(r3)
 4046588:	18c00044 	addi	r3,r3,1
 404658c:	38fffd1e 	bne	r7,r3,4046584 <__alt_data_end+0xfffdbd84>
 4046590:	f800283a 	ret
 4046594:	f800283a 	ret
 4046598:	2007883a 	mov	r3,r4
 404659c:	300f883a 	mov	r7,r6
 40465a0:	003fc706 	br	40464c0 <__alt_data_end+0xfffdbcc0>

040465a4 <_Balloc>:
 40465a4:	20801317 	ldw	r2,76(r4)
 40465a8:	defffc04 	addi	sp,sp,-16
 40465ac:	dc400115 	stw	r17,4(sp)
 40465b0:	dc000015 	stw	r16,0(sp)
 40465b4:	dfc00315 	stw	ra,12(sp)
 40465b8:	dc800215 	stw	r18,8(sp)
 40465bc:	2023883a 	mov	r17,r4
 40465c0:	2821883a 	mov	r16,r5
 40465c4:	10000f26 	beq	r2,zero,4046604 <_Balloc+0x60>
 40465c8:	8407883a 	add	r3,r16,r16
 40465cc:	18c7883a 	add	r3,r3,r3
 40465d0:	10c7883a 	add	r3,r2,r3
 40465d4:	18800017 	ldw	r2,0(r3)
 40465d8:	10001126 	beq	r2,zero,4046620 <_Balloc+0x7c>
 40465dc:	11000017 	ldw	r4,0(r2)
 40465e0:	19000015 	stw	r4,0(r3)
 40465e4:	10000415 	stw	zero,16(r2)
 40465e8:	10000315 	stw	zero,12(r2)
 40465ec:	dfc00317 	ldw	ra,12(sp)
 40465f0:	dc800217 	ldw	r18,8(sp)
 40465f4:	dc400117 	ldw	r17,4(sp)
 40465f8:	dc000017 	ldw	r16,0(sp)
 40465fc:	dec00404 	addi	sp,sp,16
 4046600:	f800283a 	ret
 4046604:	01800844 	movi	r6,33
 4046608:	01400104 	movi	r5,4
 404660c:	40494e00 	call	40494e0 <_calloc_r>
 4046610:	88801315 	stw	r2,76(r17)
 4046614:	103fec1e 	bne	r2,zero,40465c8 <__alt_data_end+0xfffdbdc8>
 4046618:	0005883a 	mov	r2,zero
 404661c:	003ff306 	br	40465ec <__alt_data_end+0xfffdbdec>
 4046620:	01400044 	movi	r5,1
 4046624:	2c24983a 	sll	r18,r5,r16
 4046628:	8809883a 	mov	r4,r17
 404662c:	91800144 	addi	r6,r18,5
 4046630:	318d883a 	add	r6,r6,r6
 4046634:	318d883a 	add	r6,r6,r6
 4046638:	40494e00 	call	40494e0 <_calloc_r>
 404663c:	103ff626 	beq	r2,zero,4046618 <__alt_data_end+0xfffdbe18>
 4046640:	14000115 	stw	r16,4(r2)
 4046644:	14800215 	stw	r18,8(r2)
 4046648:	003fe606 	br	40465e4 <__alt_data_end+0xfffdbde4>

0404664c <_Bfree>:
 404664c:	28000826 	beq	r5,zero,4046670 <_Bfree+0x24>
 4046650:	28c00117 	ldw	r3,4(r5)
 4046654:	20801317 	ldw	r2,76(r4)
 4046658:	18c7883a 	add	r3,r3,r3
 404665c:	18c7883a 	add	r3,r3,r3
 4046660:	10c5883a 	add	r2,r2,r3
 4046664:	10c00017 	ldw	r3,0(r2)
 4046668:	28c00015 	stw	r3,0(r5)
 404666c:	11400015 	stw	r5,0(r2)
 4046670:	f800283a 	ret

04046674 <__multadd>:
 4046674:	defffa04 	addi	sp,sp,-24
 4046678:	dc800315 	stw	r18,12(sp)
 404667c:	dc400215 	stw	r17,8(sp)
 4046680:	dc000115 	stw	r16,4(sp)
 4046684:	2823883a 	mov	r17,r5
 4046688:	2c000417 	ldw	r16,16(r5)
 404668c:	dfc00515 	stw	ra,20(sp)
 4046690:	dcc00415 	stw	r19,16(sp)
 4046694:	2025883a 	mov	r18,r4
 4046698:	29400504 	addi	r5,r5,20
 404669c:	0011883a 	mov	r8,zero
 40466a0:	28c00017 	ldw	r3,0(r5)
 40466a4:	29400104 	addi	r5,r5,4
 40466a8:	42000044 	addi	r8,r8,1
 40466ac:	18bfffcc 	andi	r2,r3,65535
 40466b0:	1185383a 	mul	r2,r2,r6
 40466b4:	1806d43a 	srli	r3,r3,16
 40466b8:	11cf883a 	add	r7,r2,r7
 40466bc:	3808d43a 	srli	r4,r7,16
 40466c0:	1987383a 	mul	r3,r3,r6
 40466c4:	38bfffcc 	andi	r2,r7,65535
 40466c8:	1907883a 	add	r3,r3,r4
 40466cc:	1808943a 	slli	r4,r3,16
 40466d0:	180ed43a 	srli	r7,r3,16
 40466d4:	2085883a 	add	r2,r4,r2
 40466d8:	28bfff15 	stw	r2,-4(r5)
 40466dc:	443ff016 	blt	r8,r16,40466a0 <__alt_data_end+0xfffdbea0>
 40466e0:	38000926 	beq	r7,zero,4046708 <__multadd+0x94>
 40466e4:	88800217 	ldw	r2,8(r17)
 40466e8:	80800f0e 	bge	r16,r2,4046728 <__multadd+0xb4>
 40466ec:	80800144 	addi	r2,r16,5
 40466f0:	1085883a 	add	r2,r2,r2
 40466f4:	1085883a 	add	r2,r2,r2
 40466f8:	8885883a 	add	r2,r17,r2
 40466fc:	11c00015 	stw	r7,0(r2)
 4046700:	84000044 	addi	r16,r16,1
 4046704:	8c000415 	stw	r16,16(r17)
 4046708:	8805883a 	mov	r2,r17
 404670c:	dfc00517 	ldw	ra,20(sp)
 4046710:	dcc00417 	ldw	r19,16(sp)
 4046714:	dc800317 	ldw	r18,12(sp)
 4046718:	dc400217 	ldw	r17,8(sp)
 404671c:	dc000117 	ldw	r16,4(sp)
 4046720:	dec00604 	addi	sp,sp,24
 4046724:	f800283a 	ret
 4046728:	89400117 	ldw	r5,4(r17)
 404672c:	9009883a 	mov	r4,r18
 4046730:	d9c00015 	stw	r7,0(sp)
 4046734:	29400044 	addi	r5,r5,1
 4046738:	40465a40 	call	40465a4 <_Balloc>
 404673c:	89800417 	ldw	r6,16(r17)
 4046740:	89400304 	addi	r5,r17,12
 4046744:	11000304 	addi	r4,r2,12
 4046748:	31800084 	addi	r6,r6,2
 404674c:	318d883a 	add	r6,r6,r6
 4046750:	318d883a 	add	r6,r6,r6
 4046754:	1027883a 	mov	r19,r2
 4046758:	40461d80 	call	40461d8 <memcpy>
 404675c:	d9c00017 	ldw	r7,0(sp)
 4046760:	88000a26 	beq	r17,zero,404678c <__multadd+0x118>
 4046764:	88c00117 	ldw	r3,4(r17)
 4046768:	90801317 	ldw	r2,76(r18)
 404676c:	18c7883a 	add	r3,r3,r3
 4046770:	18c7883a 	add	r3,r3,r3
 4046774:	10c5883a 	add	r2,r2,r3
 4046778:	10c00017 	ldw	r3,0(r2)
 404677c:	88c00015 	stw	r3,0(r17)
 4046780:	14400015 	stw	r17,0(r2)
 4046784:	9823883a 	mov	r17,r19
 4046788:	003fd806 	br	40466ec <__alt_data_end+0xfffdbeec>
 404678c:	9823883a 	mov	r17,r19
 4046790:	003fd606 	br	40466ec <__alt_data_end+0xfffdbeec>

04046794 <__s2b>:
 4046794:	defff904 	addi	sp,sp,-28
 4046798:	dc400115 	stw	r17,4(sp)
 404679c:	dc000015 	stw	r16,0(sp)
 40467a0:	2023883a 	mov	r17,r4
 40467a4:	2821883a 	mov	r16,r5
 40467a8:	39000204 	addi	r4,r7,8
 40467ac:	01400244 	movi	r5,9
 40467b0:	dcc00315 	stw	r19,12(sp)
 40467b4:	dc800215 	stw	r18,8(sp)
 40467b8:	dfc00615 	stw	ra,24(sp)
 40467bc:	dd400515 	stw	r21,20(sp)
 40467c0:	dd000415 	stw	r20,16(sp)
 40467c4:	3825883a 	mov	r18,r7
 40467c8:	3027883a 	mov	r19,r6
 40467cc:	404a8100 	call	404a810 <__divsi3>
 40467d0:	00c00044 	movi	r3,1
 40467d4:	000b883a 	mov	r5,zero
 40467d8:	1880030e 	bge	r3,r2,40467e8 <__s2b+0x54>
 40467dc:	18c7883a 	add	r3,r3,r3
 40467e0:	29400044 	addi	r5,r5,1
 40467e4:	18bffd16 	blt	r3,r2,40467dc <__alt_data_end+0xfffdbfdc>
 40467e8:	8809883a 	mov	r4,r17
 40467ec:	40465a40 	call	40465a4 <_Balloc>
 40467f0:	d8c00717 	ldw	r3,28(sp)
 40467f4:	10c00515 	stw	r3,20(r2)
 40467f8:	00c00044 	movi	r3,1
 40467fc:	10c00415 	stw	r3,16(r2)
 4046800:	00c00244 	movi	r3,9
 4046804:	1cc0210e 	bge	r3,r19,404688c <__s2b+0xf8>
 4046808:	80eb883a 	add	r21,r16,r3
 404680c:	a829883a 	mov	r20,r21
 4046810:	84e1883a 	add	r16,r16,r19
 4046814:	a1c00007 	ldb	r7,0(r20)
 4046818:	01800284 	movi	r6,10
 404681c:	a5000044 	addi	r20,r20,1
 4046820:	100b883a 	mov	r5,r2
 4046824:	39fff404 	addi	r7,r7,-48
 4046828:	8809883a 	mov	r4,r17
 404682c:	40466740 	call	4046674 <__multadd>
 4046830:	a43ff81e 	bne	r20,r16,4046814 <__alt_data_end+0xfffdc014>
 4046834:	ace1883a 	add	r16,r21,r19
 4046838:	843ffe04 	addi	r16,r16,-8
 404683c:	9c800a0e 	bge	r19,r18,4046868 <__s2b+0xd4>
 4046840:	94e5c83a 	sub	r18,r18,r19
 4046844:	84a5883a 	add	r18,r16,r18
 4046848:	81c00007 	ldb	r7,0(r16)
 404684c:	01800284 	movi	r6,10
 4046850:	84000044 	addi	r16,r16,1
 4046854:	100b883a 	mov	r5,r2
 4046858:	39fff404 	addi	r7,r7,-48
 404685c:	8809883a 	mov	r4,r17
 4046860:	40466740 	call	4046674 <__multadd>
 4046864:	84bff81e 	bne	r16,r18,4046848 <__alt_data_end+0xfffdc048>
 4046868:	dfc00617 	ldw	ra,24(sp)
 404686c:	dd400517 	ldw	r21,20(sp)
 4046870:	dd000417 	ldw	r20,16(sp)
 4046874:	dcc00317 	ldw	r19,12(sp)
 4046878:	dc800217 	ldw	r18,8(sp)
 404687c:	dc400117 	ldw	r17,4(sp)
 4046880:	dc000017 	ldw	r16,0(sp)
 4046884:	dec00704 	addi	sp,sp,28
 4046888:	f800283a 	ret
 404688c:	84000284 	addi	r16,r16,10
 4046890:	1827883a 	mov	r19,r3
 4046894:	003fe906 	br	404683c <__alt_data_end+0xfffdc03c>

04046898 <__hi0bits>:
 4046898:	20bfffec 	andhi	r2,r4,65535
 404689c:	1000141e 	bne	r2,zero,40468f0 <__hi0bits+0x58>
 40468a0:	2008943a 	slli	r4,r4,16
 40468a4:	00800404 	movi	r2,16
 40468a8:	20ffc02c 	andhi	r3,r4,65280
 40468ac:	1800021e 	bne	r3,zero,40468b8 <__hi0bits+0x20>
 40468b0:	2008923a 	slli	r4,r4,8
 40468b4:	10800204 	addi	r2,r2,8
 40468b8:	20fc002c 	andhi	r3,r4,61440
 40468bc:	1800021e 	bne	r3,zero,40468c8 <__hi0bits+0x30>
 40468c0:	2008913a 	slli	r4,r4,4
 40468c4:	10800104 	addi	r2,r2,4
 40468c8:	20f0002c 	andhi	r3,r4,49152
 40468cc:	1800031e 	bne	r3,zero,40468dc <__hi0bits+0x44>
 40468d0:	2109883a 	add	r4,r4,r4
 40468d4:	10800084 	addi	r2,r2,2
 40468d8:	2109883a 	add	r4,r4,r4
 40468dc:	20000316 	blt	r4,zero,40468ec <__hi0bits+0x54>
 40468e0:	2110002c 	andhi	r4,r4,16384
 40468e4:	2000041e 	bne	r4,zero,40468f8 <__hi0bits+0x60>
 40468e8:	00800804 	movi	r2,32
 40468ec:	f800283a 	ret
 40468f0:	0005883a 	mov	r2,zero
 40468f4:	003fec06 	br	40468a8 <__alt_data_end+0xfffdc0a8>
 40468f8:	10800044 	addi	r2,r2,1
 40468fc:	f800283a 	ret

04046900 <__lo0bits>:
 4046900:	20c00017 	ldw	r3,0(r4)
 4046904:	188001cc 	andi	r2,r3,7
 4046908:	10000826 	beq	r2,zero,404692c <__lo0bits+0x2c>
 404690c:	1880004c 	andi	r2,r3,1
 4046910:	1000211e 	bne	r2,zero,4046998 <__lo0bits+0x98>
 4046914:	1880008c 	andi	r2,r3,2
 4046918:	1000211e 	bne	r2,zero,40469a0 <__lo0bits+0xa0>
 404691c:	1806d0ba 	srli	r3,r3,2
 4046920:	00800084 	movi	r2,2
 4046924:	20c00015 	stw	r3,0(r4)
 4046928:	f800283a 	ret
 404692c:	18bfffcc 	andi	r2,r3,65535
 4046930:	10001326 	beq	r2,zero,4046980 <__lo0bits+0x80>
 4046934:	0005883a 	mov	r2,zero
 4046938:	19403fcc 	andi	r5,r3,255
 404693c:	2800021e 	bne	r5,zero,4046948 <__lo0bits+0x48>
 4046940:	1806d23a 	srli	r3,r3,8
 4046944:	10800204 	addi	r2,r2,8
 4046948:	194003cc 	andi	r5,r3,15
 404694c:	2800021e 	bne	r5,zero,4046958 <__lo0bits+0x58>
 4046950:	1806d13a 	srli	r3,r3,4
 4046954:	10800104 	addi	r2,r2,4
 4046958:	194000cc 	andi	r5,r3,3
 404695c:	2800021e 	bne	r5,zero,4046968 <__lo0bits+0x68>
 4046960:	1806d0ba 	srli	r3,r3,2
 4046964:	10800084 	addi	r2,r2,2
 4046968:	1940004c 	andi	r5,r3,1
 404696c:	2800081e 	bne	r5,zero,4046990 <__lo0bits+0x90>
 4046970:	1806d07a 	srli	r3,r3,1
 4046974:	1800051e 	bne	r3,zero,404698c <__lo0bits+0x8c>
 4046978:	00800804 	movi	r2,32
 404697c:	f800283a 	ret
 4046980:	1806d43a 	srli	r3,r3,16
 4046984:	00800404 	movi	r2,16
 4046988:	003feb06 	br	4046938 <__alt_data_end+0xfffdc138>
 404698c:	10800044 	addi	r2,r2,1
 4046990:	20c00015 	stw	r3,0(r4)
 4046994:	f800283a 	ret
 4046998:	0005883a 	mov	r2,zero
 404699c:	f800283a 	ret
 40469a0:	1806d07a 	srli	r3,r3,1
 40469a4:	00800044 	movi	r2,1
 40469a8:	20c00015 	stw	r3,0(r4)
 40469ac:	f800283a 	ret

040469b0 <__i2b>:
 40469b0:	defffd04 	addi	sp,sp,-12
 40469b4:	dc000015 	stw	r16,0(sp)
 40469b8:	04000044 	movi	r16,1
 40469bc:	dc400115 	stw	r17,4(sp)
 40469c0:	2823883a 	mov	r17,r5
 40469c4:	800b883a 	mov	r5,r16
 40469c8:	dfc00215 	stw	ra,8(sp)
 40469cc:	40465a40 	call	40465a4 <_Balloc>
 40469d0:	14400515 	stw	r17,20(r2)
 40469d4:	14000415 	stw	r16,16(r2)
 40469d8:	dfc00217 	ldw	ra,8(sp)
 40469dc:	dc400117 	ldw	r17,4(sp)
 40469e0:	dc000017 	ldw	r16,0(sp)
 40469e4:	dec00304 	addi	sp,sp,12
 40469e8:	f800283a 	ret

040469ec <__multiply>:
 40469ec:	defffa04 	addi	sp,sp,-24
 40469f0:	dcc00315 	stw	r19,12(sp)
 40469f4:	dc800215 	stw	r18,8(sp)
 40469f8:	34c00417 	ldw	r19,16(r6)
 40469fc:	2c800417 	ldw	r18,16(r5)
 4046a00:	dd000415 	stw	r20,16(sp)
 4046a04:	dc400115 	stw	r17,4(sp)
 4046a08:	dfc00515 	stw	ra,20(sp)
 4046a0c:	dc000015 	stw	r16,0(sp)
 4046a10:	2829883a 	mov	r20,r5
 4046a14:	3023883a 	mov	r17,r6
 4046a18:	94c0050e 	bge	r18,r19,4046a30 <__multiply+0x44>
 4046a1c:	9007883a 	mov	r3,r18
 4046a20:	3029883a 	mov	r20,r6
 4046a24:	9825883a 	mov	r18,r19
 4046a28:	2823883a 	mov	r17,r5
 4046a2c:	1827883a 	mov	r19,r3
 4046a30:	a0800217 	ldw	r2,8(r20)
 4046a34:	94e1883a 	add	r16,r18,r19
 4046a38:	a1400117 	ldw	r5,4(r20)
 4046a3c:	1400010e 	bge	r2,r16,4046a44 <__multiply+0x58>
 4046a40:	29400044 	addi	r5,r5,1
 4046a44:	40465a40 	call	40465a4 <_Balloc>
 4046a48:	8415883a 	add	r10,r16,r16
 4046a4c:	12c00504 	addi	r11,r2,20
 4046a50:	5295883a 	add	r10,r10,r10
 4046a54:	5a95883a 	add	r10,r11,r10
 4046a58:	5807883a 	mov	r3,r11
 4046a5c:	5a80032e 	bgeu	r11,r10,4046a6c <__multiply+0x80>
 4046a60:	18000015 	stw	zero,0(r3)
 4046a64:	18c00104 	addi	r3,r3,4
 4046a68:	1abffd36 	bltu	r3,r10,4046a60 <__alt_data_end+0xfffdc260>
 4046a6c:	9ce7883a 	add	r19,r19,r19
 4046a70:	94a5883a 	add	r18,r18,r18
 4046a74:	89800504 	addi	r6,r17,20
 4046a78:	9ce7883a 	add	r19,r19,r19
 4046a7c:	a3400504 	addi	r13,r20,20
 4046a80:	94a5883a 	add	r18,r18,r18
 4046a84:	34d9883a 	add	r12,r6,r19
 4046a88:	6c93883a 	add	r9,r13,r18
 4046a8c:	3300422e 	bgeu	r6,r12,4046b98 <__multiply+0x1ac>
 4046a90:	37c00017 	ldw	ra,0(r6)
 4046a94:	fbffffcc 	andi	r15,ra,65535
 4046a98:	78001b26 	beq	r15,zero,4046b08 <__multiply+0x11c>
 4046a9c:	5811883a 	mov	r8,r11
 4046aa0:	681d883a 	mov	r14,r13
 4046aa4:	000f883a 	mov	r7,zero
 4046aa8:	71000017 	ldw	r4,0(r14)
 4046aac:	40c00017 	ldw	r3,0(r8)
 4046ab0:	73800104 	addi	r14,r14,4
 4046ab4:	217fffcc 	andi	r5,r4,65535
 4046ab8:	2bcb383a 	mul	r5,r5,r15
 4046abc:	2008d43a 	srli	r4,r4,16
 4046ac0:	1c7fffcc 	andi	r17,r3,65535
 4046ac4:	2c4b883a 	add	r5,r5,r17
 4046ac8:	29cb883a 	add	r5,r5,r7
 4046acc:	23c9383a 	mul	r4,r4,r15
 4046ad0:	1806d43a 	srli	r3,r3,16
 4046ad4:	280ed43a 	srli	r7,r5,16
 4046ad8:	297fffcc 	andi	r5,r5,65535
 4046adc:	20c7883a 	add	r3,r4,r3
 4046ae0:	19c7883a 	add	r3,r3,r7
 4046ae4:	1808943a 	slli	r4,r3,16
 4046ae8:	4023883a 	mov	r17,r8
 4046aec:	180ed43a 	srli	r7,r3,16
 4046af0:	214ab03a 	or	r5,r4,r5
 4046af4:	41400015 	stw	r5,0(r8)
 4046af8:	42000104 	addi	r8,r8,4
 4046afc:	727fea36 	bltu	r14,r9,4046aa8 <__alt_data_end+0xfffdc2a8>
 4046b00:	89c00115 	stw	r7,4(r17)
 4046b04:	37c00017 	ldw	ra,0(r6)
 4046b08:	f83ed43a 	srli	ra,ra,16
 4046b0c:	f8001f26 	beq	ra,zero,4046b8c <__multiply+0x1a0>
 4046b10:	58c00017 	ldw	r3,0(r11)
 4046b14:	681d883a 	mov	r14,r13
 4046b18:	581f883a 	mov	r15,r11
 4046b1c:	1811883a 	mov	r8,r3
 4046b20:	5825883a 	mov	r18,r11
 4046b24:	000f883a 	mov	r7,zero
 4046b28:	00000106 	br	4046b30 <__multiply+0x144>
 4046b2c:	8825883a 	mov	r18,r17
 4046b30:	7140000b 	ldhu	r5,0(r14)
 4046b34:	4010d43a 	srli	r8,r8,16
 4046b38:	193fffcc 	andi	r4,r3,65535
 4046b3c:	2fcb383a 	mul	r5,r5,ra
 4046b40:	7bc00104 	addi	r15,r15,4
 4046b44:	73800104 	addi	r14,r14,4
 4046b48:	2a0b883a 	add	r5,r5,r8
 4046b4c:	29cb883a 	add	r5,r5,r7
 4046b50:	2806943a 	slli	r3,r5,16
 4046b54:	94400104 	addi	r17,r18,4
 4046b58:	280ad43a 	srli	r5,r5,16
 4046b5c:	1908b03a 	or	r4,r3,r4
 4046b60:	793fff15 	stw	r4,-4(r15)
 4046b64:	70ffff17 	ldw	r3,-4(r14)
 4046b68:	8a000017 	ldw	r8,0(r17)
 4046b6c:	1806d43a 	srli	r3,r3,16
 4046b70:	413fffcc 	andi	r4,r8,65535
 4046b74:	1fc7383a 	mul	r3,r3,ra
 4046b78:	1907883a 	add	r3,r3,r4
 4046b7c:	1947883a 	add	r3,r3,r5
 4046b80:	180ed43a 	srli	r7,r3,16
 4046b84:	727fe936 	bltu	r14,r9,4046b2c <__alt_data_end+0xfffdc32c>
 4046b88:	90c00115 	stw	r3,4(r18)
 4046b8c:	31800104 	addi	r6,r6,4
 4046b90:	5ac00104 	addi	r11,r11,4
 4046b94:	333fbe36 	bltu	r6,r12,4046a90 <__alt_data_end+0xfffdc290>
 4046b98:	0400090e 	bge	zero,r16,4046bc0 <__multiply+0x1d4>
 4046b9c:	50ffff17 	ldw	r3,-4(r10)
 4046ba0:	52bfff04 	addi	r10,r10,-4
 4046ba4:	18000326 	beq	r3,zero,4046bb4 <__multiply+0x1c8>
 4046ba8:	00000506 	br	4046bc0 <__multiply+0x1d4>
 4046bac:	50c00017 	ldw	r3,0(r10)
 4046bb0:	1800031e 	bne	r3,zero,4046bc0 <__multiply+0x1d4>
 4046bb4:	843fffc4 	addi	r16,r16,-1
 4046bb8:	52bfff04 	addi	r10,r10,-4
 4046bbc:	803ffb1e 	bne	r16,zero,4046bac <__alt_data_end+0xfffdc3ac>
 4046bc0:	14000415 	stw	r16,16(r2)
 4046bc4:	dfc00517 	ldw	ra,20(sp)
 4046bc8:	dd000417 	ldw	r20,16(sp)
 4046bcc:	dcc00317 	ldw	r19,12(sp)
 4046bd0:	dc800217 	ldw	r18,8(sp)
 4046bd4:	dc400117 	ldw	r17,4(sp)
 4046bd8:	dc000017 	ldw	r16,0(sp)
 4046bdc:	dec00604 	addi	sp,sp,24
 4046be0:	f800283a 	ret

04046be4 <__pow5mult>:
 4046be4:	defffa04 	addi	sp,sp,-24
 4046be8:	dcc00315 	stw	r19,12(sp)
 4046bec:	dc000015 	stw	r16,0(sp)
 4046bf0:	dfc00515 	stw	ra,20(sp)
 4046bf4:	dd000415 	stw	r20,16(sp)
 4046bf8:	dc800215 	stw	r18,8(sp)
 4046bfc:	dc400115 	stw	r17,4(sp)
 4046c00:	308000cc 	andi	r2,r6,3
 4046c04:	3021883a 	mov	r16,r6
 4046c08:	2027883a 	mov	r19,r4
 4046c0c:	10002f1e 	bne	r2,zero,4046ccc <__pow5mult+0xe8>
 4046c10:	2825883a 	mov	r18,r5
 4046c14:	8021d0ba 	srai	r16,r16,2
 4046c18:	80001a26 	beq	r16,zero,4046c84 <__pow5mult+0xa0>
 4046c1c:	9c401217 	ldw	r17,72(r19)
 4046c20:	8800061e 	bne	r17,zero,4046c3c <__pow5mult+0x58>
 4046c24:	00003406 	br	4046cf8 <__pow5mult+0x114>
 4046c28:	8021d07a 	srai	r16,r16,1
 4046c2c:	80001526 	beq	r16,zero,4046c84 <__pow5mult+0xa0>
 4046c30:	88800017 	ldw	r2,0(r17)
 4046c34:	10001c26 	beq	r2,zero,4046ca8 <__pow5mult+0xc4>
 4046c38:	1023883a 	mov	r17,r2
 4046c3c:	8080004c 	andi	r2,r16,1
 4046c40:	103ff926 	beq	r2,zero,4046c28 <__alt_data_end+0xfffdc428>
 4046c44:	880d883a 	mov	r6,r17
 4046c48:	900b883a 	mov	r5,r18
 4046c4c:	9809883a 	mov	r4,r19
 4046c50:	40469ec0 	call	40469ec <__multiply>
 4046c54:	90001b26 	beq	r18,zero,4046cc4 <__pow5mult+0xe0>
 4046c58:	91000117 	ldw	r4,4(r18)
 4046c5c:	98c01317 	ldw	r3,76(r19)
 4046c60:	8021d07a 	srai	r16,r16,1
 4046c64:	2109883a 	add	r4,r4,r4
 4046c68:	2109883a 	add	r4,r4,r4
 4046c6c:	1907883a 	add	r3,r3,r4
 4046c70:	19000017 	ldw	r4,0(r3)
 4046c74:	91000015 	stw	r4,0(r18)
 4046c78:	1c800015 	stw	r18,0(r3)
 4046c7c:	1025883a 	mov	r18,r2
 4046c80:	803feb1e 	bne	r16,zero,4046c30 <__alt_data_end+0xfffdc430>
 4046c84:	9005883a 	mov	r2,r18
 4046c88:	dfc00517 	ldw	ra,20(sp)
 4046c8c:	dd000417 	ldw	r20,16(sp)
 4046c90:	dcc00317 	ldw	r19,12(sp)
 4046c94:	dc800217 	ldw	r18,8(sp)
 4046c98:	dc400117 	ldw	r17,4(sp)
 4046c9c:	dc000017 	ldw	r16,0(sp)
 4046ca0:	dec00604 	addi	sp,sp,24
 4046ca4:	f800283a 	ret
 4046ca8:	880d883a 	mov	r6,r17
 4046cac:	880b883a 	mov	r5,r17
 4046cb0:	9809883a 	mov	r4,r19
 4046cb4:	40469ec0 	call	40469ec <__multiply>
 4046cb8:	88800015 	stw	r2,0(r17)
 4046cbc:	10000015 	stw	zero,0(r2)
 4046cc0:	003fdd06 	br	4046c38 <__alt_data_end+0xfffdc438>
 4046cc4:	1025883a 	mov	r18,r2
 4046cc8:	003fd706 	br	4046c28 <__alt_data_end+0xfffdc428>
 4046ccc:	10bfffc4 	addi	r2,r2,-1
 4046cd0:	1085883a 	add	r2,r2,r2
 4046cd4:	00c10174 	movhi	r3,1029
 4046cd8:	18c0d104 	addi	r3,r3,836
 4046cdc:	1085883a 	add	r2,r2,r2
 4046ce0:	1885883a 	add	r2,r3,r2
 4046ce4:	11800017 	ldw	r6,0(r2)
 4046ce8:	000f883a 	mov	r7,zero
 4046cec:	40466740 	call	4046674 <__multadd>
 4046cf0:	1025883a 	mov	r18,r2
 4046cf4:	003fc706 	br	4046c14 <__alt_data_end+0xfffdc414>
 4046cf8:	05000044 	movi	r20,1
 4046cfc:	a00b883a 	mov	r5,r20
 4046d00:	9809883a 	mov	r4,r19
 4046d04:	40465a40 	call	40465a4 <_Balloc>
 4046d08:	1023883a 	mov	r17,r2
 4046d0c:	00809c44 	movi	r2,625
 4046d10:	88800515 	stw	r2,20(r17)
 4046d14:	8d000415 	stw	r20,16(r17)
 4046d18:	9c401215 	stw	r17,72(r19)
 4046d1c:	88000015 	stw	zero,0(r17)
 4046d20:	003fc606 	br	4046c3c <__alt_data_end+0xfffdc43c>

04046d24 <__lshift>:
 4046d24:	defff904 	addi	sp,sp,-28
 4046d28:	dd400515 	stw	r21,20(sp)
 4046d2c:	dcc00315 	stw	r19,12(sp)
 4046d30:	302bd17a 	srai	r21,r6,5
 4046d34:	2cc00417 	ldw	r19,16(r5)
 4046d38:	28800217 	ldw	r2,8(r5)
 4046d3c:	dd000415 	stw	r20,16(sp)
 4046d40:	ace7883a 	add	r19,r21,r19
 4046d44:	dc800215 	stw	r18,8(sp)
 4046d48:	dc400115 	stw	r17,4(sp)
 4046d4c:	dc000015 	stw	r16,0(sp)
 4046d50:	dfc00615 	stw	ra,24(sp)
 4046d54:	9c000044 	addi	r16,r19,1
 4046d58:	2823883a 	mov	r17,r5
 4046d5c:	3029883a 	mov	r20,r6
 4046d60:	2025883a 	mov	r18,r4
 4046d64:	29400117 	ldw	r5,4(r5)
 4046d68:	1400030e 	bge	r2,r16,4046d78 <__lshift+0x54>
 4046d6c:	1085883a 	add	r2,r2,r2
 4046d70:	29400044 	addi	r5,r5,1
 4046d74:	143ffd16 	blt	r2,r16,4046d6c <__alt_data_end+0xfffdc56c>
 4046d78:	9009883a 	mov	r4,r18
 4046d7c:	40465a40 	call	40465a4 <_Balloc>
 4046d80:	10c00504 	addi	r3,r2,20
 4046d84:	0540070e 	bge	zero,r21,4046da4 <__lshift+0x80>
 4046d88:	ad6b883a 	add	r21,r21,r21
 4046d8c:	ad6b883a 	add	r21,r21,r21
 4046d90:	1809883a 	mov	r4,r3
 4046d94:	1d47883a 	add	r3,r3,r21
 4046d98:	20000015 	stw	zero,0(r4)
 4046d9c:	21000104 	addi	r4,r4,4
 4046da0:	193ffd1e 	bne	r3,r4,4046d98 <__alt_data_end+0xfffdc598>
 4046da4:	8a000417 	ldw	r8,16(r17)
 4046da8:	89000504 	addi	r4,r17,20
 4046dac:	a18007cc 	andi	r6,r20,31
 4046db0:	4211883a 	add	r8,r8,r8
 4046db4:	4211883a 	add	r8,r8,r8
 4046db8:	2211883a 	add	r8,r4,r8
 4046dbc:	30002326 	beq	r6,zero,4046e4c <__lshift+0x128>
 4046dc0:	02400804 	movi	r9,32
 4046dc4:	4993c83a 	sub	r9,r9,r6
 4046dc8:	000b883a 	mov	r5,zero
 4046dcc:	21c00017 	ldw	r7,0(r4)
 4046dd0:	1815883a 	mov	r10,r3
 4046dd4:	18c00104 	addi	r3,r3,4
 4046dd8:	398e983a 	sll	r7,r7,r6
 4046ddc:	21000104 	addi	r4,r4,4
 4046de0:	394ab03a 	or	r5,r7,r5
 4046de4:	197fff15 	stw	r5,-4(r3)
 4046de8:	217fff17 	ldw	r5,-4(r4)
 4046dec:	2a4ad83a 	srl	r5,r5,r9
 4046df0:	223ff636 	bltu	r4,r8,4046dcc <__alt_data_end+0xfffdc5cc>
 4046df4:	51400115 	stw	r5,4(r10)
 4046df8:	28001a1e 	bne	r5,zero,4046e64 <__lshift+0x140>
 4046dfc:	843fffc4 	addi	r16,r16,-1
 4046e00:	14000415 	stw	r16,16(r2)
 4046e04:	88000826 	beq	r17,zero,4046e28 <__lshift+0x104>
 4046e08:	89000117 	ldw	r4,4(r17)
 4046e0c:	90c01317 	ldw	r3,76(r18)
 4046e10:	2109883a 	add	r4,r4,r4
 4046e14:	2109883a 	add	r4,r4,r4
 4046e18:	1907883a 	add	r3,r3,r4
 4046e1c:	19000017 	ldw	r4,0(r3)
 4046e20:	89000015 	stw	r4,0(r17)
 4046e24:	1c400015 	stw	r17,0(r3)
 4046e28:	dfc00617 	ldw	ra,24(sp)
 4046e2c:	dd400517 	ldw	r21,20(sp)
 4046e30:	dd000417 	ldw	r20,16(sp)
 4046e34:	dcc00317 	ldw	r19,12(sp)
 4046e38:	dc800217 	ldw	r18,8(sp)
 4046e3c:	dc400117 	ldw	r17,4(sp)
 4046e40:	dc000017 	ldw	r16,0(sp)
 4046e44:	dec00704 	addi	sp,sp,28
 4046e48:	f800283a 	ret
 4046e4c:	21400017 	ldw	r5,0(r4)
 4046e50:	18c00104 	addi	r3,r3,4
 4046e54:	21000104 	addi	r4,r4,4
 4046e58:	197fff15 	stw	r5,-4(r3)
 4046e5c:	223ffb36 	bltu	r4,r8,4046e4c <__alt_data_end+0xfffdc64c>
 4046e60:	003fe606 	br	4046dfc <__alt_data_end+0xfffdc5fc>
 4046e64:	9c000084 	addi	r16,r19,2
 4046e68:	003fe406 	br	4046dfc <__alt_data_end+0xfffdc5fc>

04046e6c <__mcmp>:
 4046e6c:	20800417 	ldw	r2,16(r4)
 4046e70:	28c00417 	ldw	r3,16(r5)
 4046e74:	10c5c83a 	sub	r2,r2,r3
 4046e78:	1000111e 	bne	r2,zero,4046ec0 <__mcmp+0x54>
 4046e7c:	18c7883a 	add	r3,r3,r3
 4046e80:	18c7883a 	add	r3,r3,r3
 4046e84:	21000504 	addi	r4,r4,20
 4046e88:	29400504 	addi	r5,r5,20
 4046e8c:	20c5883a 	add	r2,r4,r3
 4046e90:	28cb883a 	add	r5,r5,r3
 4046e94:	00000106 	br	4046e9c <__mcmp+0x30>
 4046e98:	20800a2e 	bgeu	r4,r2,4046ec4 <__mcmp+0x58>
 4046e9c:	10bfff04 	addi	r2,r2,-4
 4046ea0:	297fff04 	addi	r5,r5,-4
 4046ea4:	11800017 	ldw	r6,0(r2)
 4046ea8:	28c00017 	ldw	r3,0(r5)
 4046eac:	30fffa26 	beq	r6,r3,4046e98 <__alt_data_end+0xfffdc698>
 4046eb0:	30c00236 	bltu	r6,r3,4046ebc <__mcmp+0x50>
 4046eb4:	00800044 	movi	r2,1
 4046eb8:	f800283a 	ret
 4046ebc:	00bfffc4 	movi	r2,-1
 4046ec0:	f800283a 	ret
 4046ec4:	0005883a 	mov	r2,zero
 4046ec8:	f800283a 	ret

04046ecc <__mdiff>:
 4046ecc:	28c00417 	ldw	r3,16(r5)
 4046ed0:	30800417 	ldw	r2,16(r6)
 4046ed4:	defffa04 	addi	sp,sp,-24
 4046ed8:	dcc00315 	stw	r19,12(sp)
 4046edc:	dc800215 	stw	r18,8(sp)
 4046ee0:	dfc00515 	stw	ra,20(sp)
 4046ee4:	dd000415 	stw	r20,16(sp)
 4046ee8:	dc400115 	stw	r17,4(sp)
 4046eec:	dc000015 	stw	r16,0(sp)
 4046ef0:	1887c83a 	sub	r3,r3,r2
 4046ef4:	2825883a 	mov	r18,r5
 4046ef8:	3027883a 	mov	r19,r6
 4046efc:	1800141e 	bne	r3,zero,4046f50 <__mdiff+0x84>
 4046f00:	1085883a 	add	r2,r2,r2
 4046f04:	1085883a 	add	r2,r2,r2
 4046f08:	2a000504 	addi	r8,r5,20
 4046f0c:	34000504 	addi	r16,r6,20
 4046f10:	4087883a 	add	r3,r8,r2
 4046f14:	8085883a 	add	r2,r16,r2
 4046f18:	00000106 	br	4046f20 <__mdiff+0x54>
 4046f1c:	40c0592e 	bgeu	r8,r3,4047084 <__mdiff+0x1b8>
 4046f20:	18ffff04 	addi	r3,r3,-4
 4046f24:	10bfff04 	addi	r2,r2,-4
 4046f28:	19c00017 	ldw	r7,0(r3)
 4046f2c:	11400017 	ldw	r5,0(r2)
 4046f30:	397ffa26 	beq	r7,r5,4046f1c <__alt_data_end+0xfffdc71c>
 4046f34:	3940592e 	bgeu	r7,r5,404709c <__mdiff+0x1d0>
 4046f38:	9005883a 	mov	r2,r18
 4046f3c:	4023883a 	mov	r17,r8
 4046f40:	9825883a 	mov	r18,r19
 4046f44:	05000044 	movi	r20,1
 4046f48:	1027883a 	mov	r19,r2
 4046f4c:	00000406 	br	4046f60 <__mdiff+0x94>
 4046f50:	18005616 	blt	r3,zero,40470ac <__mdiff+0x1e0>
 4046f54:	34400504 	addi	r17,r6,20
 4046f58:	2c000504 	addi	r16,r5,20
 4046f5c:	0029883a 	mov	r20,zero
 4046f60:	91400117 	ldw	r5,4(r18)
 4046f64:	40465a40 	call	40465a4 <_Balloc>
 4046f68:	92400417 	ldw	r9,16(r18)
 4046f6c:	9b000417 	ldw	r12,16(r19)
 4046f70:	12c00504 	addi	r11,r2,20
 4046f74:	4a51883a 	add	r8,r9,r9
 4046f78:	6319883a 	add	r12,r12,r12
 4046f7c:	4211883a 	add	r8,r8,r8
 4046f80:	6319883a 	add	r12,r12,r12
 4046f84:	15000315 	stw	r20,12(r2)
 4046f88:	8211883a 	add	r8,r16,r8
 4046f8c:	8b19883a 	add	r12,r17,r12
 4046f90:	0007883a 	mov	r3,zero
 4046f94:	81400017 	ldw	r5,0(r16)
 4046f98:	89c00017 	ldw	r7,0(r17)
 4046f9c:	59800104 	addi	r6,r11,4
 4046fa0:	293fffcc 	andi	r4,r5,65535
 4046fa4:	20c7883a 	add	r3,r4,r3
 4046fa8:	393fffcc 	andi	r4,r7,65535
 4046fac:	1909c83a 	sub	r4,r3,r4
 4046fb0:	280ad43a 	srli	r5,r5,16
 4046fb4:	380ed43a 	srli	r7,r7,16
 4046fb8:	2007d43a 	srai	r3,r4,16
 4046fbc:	213fffcc 	andi	r4,r4,65535
 4046fc0:	29cbc83a 	sub	r5,r5,r7
 4046fc4:	28c7883a 	add	r3,r5,r3
 4046fc8:	180a943a 	slli	r5,r3,16
 4046fcc:	8c400104 	addi	r17,r17,4
 4046fd0:	84000104 	addi	r16,r16,4
 4046fd4:	2908b03a 	or	r4,r5,r4
 4046fd8:	59000015 	stw	r4,0(r11)
 4046fdc:	1807d43a 	srai	r3,r3,16
 4046fe0:	3015883a 	mov	r10,r6
 4046fe4:	3017883a 	mov	r11,r6
 4046fe8:	8b3fea36 	bltu	r17,r12,4046f94 <__alt_data_end+0xfffdc794>
 4046fec:	8200162e 	bgeu	r16,r8,4047048 <__mdiff+0x17c>
 4046ff0:	8017883a 	mov	r11,r16
 4046ff4:	59400017 	ldw	r5,0(r11)
 4046ff8:	31800104 	addi	r6,r6,4
 4046ffc:	5ac00104 	addi	r11,r11,4
 4047000:	293fffcc 	andi	r4,r5,65535
 4047004:	20c7883a 	add	r3,r4,r3
 4047008:	280ed43a 	srli	r7,r5,16
 404700c:	180bd43a 	srai	r5,r3,16
 4047010:	193fffcc 	andi	r4,r3,65535
 4047014:	3947883a 	add	r3,r7,r5
 4047018:	180a943a 	slli	r5,r3,16
 404701c:	1807d43a 	srai	r3,r3,16
 4047020:	2908b03a 	or	r4,r5,r4
 4047024:	313fff15 	stw	r4,-4(r6)
 4047028:	5a3ff236 	bltu	r11,r8,4046ff4 <__alt_data_end+0xfffdc7f4>
 404702c:	0406303a 	nor	r3,zero,r16
 4047030:	1a07883a 	add	r3,r3,r8
 4047034:	1806d0ba 	srli	r3,r3,2
 4047038:	18c00044 	addi	r3,r3,1
 404703c:	18c7883a 	add	r3,r3,r3
 4047040:	18c7883a 	add	r3,r3,r3
 4047044:	50d5883a 	add	r10,r10,r3
 4047048:	50ffff04 	addi	r3,r10,-4
 404704c:	2000041e 	bne	r4,zero,4047060 <__mdiff+0x194>
 4047050:	18ffff04 	addi	r3,r3,-4
 4047054:	19000017 	ldw	r4,0(r3)
 4047058:	4a7fffc4 	addi	r9,r9,-1
 404705c:	203ffc26 	beq	r4,zero,4047050 <__alt_data_end+0xfffdc850>
 4047060:	12400415 	stw	r9,16(r2)
 4047064:	dfc00517 	ldw	ra,20(sp)
 4047068:	dd000417 	ldw	r20,16(sp)
 404706c:	dcc00317 	ldw	r19,12(sp)
 4047070:	dc800217 	ldw	r18,8(sp)
 4047074:	dc400117 	ldw	r17,4(sp)
 4047078:	dc000017 	ldw	r16,0(sp)
 404707c:	dec00604 	addi	sp,sp,24
 4047080:	f800283a 	ret
 4047084:	000b883a 	mov	r5,zero
 4047088:	40465a40 	call	40465a4 <_Balloc>
 404708c:	00c00044 	movi	r3,1
 4047090:	10c00415 	stw	r3,16(r2)
 4047094:	10000515 	stw	zero,20(r2)
 4047098:	003ff206 	br	4047064 <__alt_data_end+0xfffdc864>
 404709c:	8023883a 	mov	r17,r16
 40470a0:	0029883a 	mov	r20,zero
 40470a4:	4021883a 	mov	r16,r8
 40470a8:	003fad06 	br	4046f60 <__alt_data_end+0xfffdc760>
 40470ac:	9005883a 	mov	r2,r18
 40470b0:	94400504 	addi	r17,r18,20
 40470b4:	9c000504 	addi	r16,r19,20
 40470b8:	9825883a 	mov	r18,r19
 40470bc:	05000044 	movi	r20,1
 40470c0:	1027883a 	mov	r19,r2
 40470c4:	003fa606 	br	4046f60 <__alt_data_end+0xfffdc760>

040470c8 <__ulp>:
 40470c8:	295ffc2c 	andhi	r5,r5,32752
 40470cc:	00bf3034 	movhi	r2,64704
 40470d0:	2887883a 	add	r3,r5,r2
 40470d4:	00c0020e 	bge	zero,r3,40470e0 <__ulp+0x18>
 40470d8:	0005883a 	mov	r2,zero
 40470dc:	f800283a 	ret
 40470e0:	00c7c83a 	sub	r3,zero,r3
 40470e4:	1807d53a 	srai	r3,r3,20
 40470e8:	008004c4 	movi	r2,19
 40470ec:	10c00b0e 	bge	r2,r3,404711c <__ulp+0x54>
 40470f0:	18bffb04 	addi	r2,r3,-20
 40470f4:	01000784 	movi	r4,30
 40470f8:	0007883a 	mov	r3,zero
 40470fc:	20800516 	blt	r4,r2,4047114 <__ulp+0x4c>
 4047100:	010007c4 	movi	r4,31
 4047104:	2089c83a 	sub	r4,r4,r2
 4047108:	00800044 	movi	r2,1
 404710c:	1104983a 	sll	r2,r2,r4
 4047110:	f800283a 	ret
 4047114:	00800044 	movi	r2,1
 4047118:	f800283a 	ret
 404711c:	01400234 	movhi	r5,8
 4047120:	28c7d83a 	sra	r3,r5,r3
 4047124:	0005883a 	mov	r2,zero
 4047128:	f800283a 	ret

0404712c <__b2d>:
 404712c:	defffa04 	addi	sp,sp,-24
 4047130:	dc000015 	stw	r16,0(sp)
 4047134:	24000417 	ldw	r16,16(r4)
 4047138:	dc400115 	stw	r17,4(sp)
 404713c:	24400504 	addi	r17,r4,20
 4047140:	8421883a 	add	r16,r16,r16
 4047144:	8421883a 	add	r16,r16,r16
 4047148:	8c21883a 	add	r16,r17,r16
 404714c:	dc800215 	stw	r18,8(sp)
 4047150:	84bfff17 	ldw	r18,-4(r16)
 4047154:	dd000415 	stw	r20,16(sp)
 4047158:	dcc00315 	stw	r19,12(sp)
 404715c:	9009883a 	mov	r4,r18
 4047160:	2829883a 	mov	r20,r5
 4047164:	dfc00515 	stw	ra,20(sp)
 4047168:	40468980 	call	4046898 <__hi0bits>
 404716c:	00c00804 	movi	r3,32
 4047170:	1889c83a 	sub	r4,r3,r2
 4047174:	a1000015 	stw	r4,0(r20)
 4047178:	01000284 	movi	r4,10
 404717c:	84ffff04 	addi	r19,r16,-4
 4047180:	20801216 	blt	r4,r2,40471cc <__b2d+0xa0>
 4047184:	018002c4 	movi	r6,11
 4047188:	308dc83a 	sub	r6,r6,r2
 404718c:	9186d83a 	srl	r3,r18,r6
 4047190:	18cffc34 	orhi	r3,r3,16368
 4047194:	8cc0212e 	bgeu	r17,r19,404721c <__b2d+0xf0>
 4047198:	813ffe17 	ldw	r4,-8(r16)
 404719c:	218cd83a 	srl	r6,r4,r6
 40471a0:	10800544 	addi	r2,r2,21
 40471a4:	9084983a 	sll	r2,r18,r2
 40471a8:	1184b03a 	or	r2,r2,r6
 40471ac:	dfc00517 	ldw	ra,20(sp)
 40471b0:	dd000417 	ldw	r20,16(sp)
 40471b4:	dcc00317 	ldw	r19,12(sp)
 40471b8:	dc800217 	ldw	r18,8(sp)
 40471bc:	dc400117 	ldw	r17,4(sp)
 40471c0:	dc000017 	ldw	r16,0(sp)
 40471c4:	dec00604 	addi	sp,sp,24
 40471c8:	f800283a 	ret
 40471cc:	8cc00f2e 	bgeu	r17,r19,404720c <__b2d+0xe0>
 40471d0:	117ffd44 	addi	r5,r2,-11
 40471d4:	80bffe17 	ldw	r2,-8(r16)
 40471d8:	28000e26 	beq	r5,zero,4047214 <__b2d+0xe8>
 40471dc:	1949c83a 	sub	r4,r3,r5
 40471e0:	9164983a 	sll	r18,r18,r5
 40471e4:	1106d83a 	srl	r3,r2,r4
 40471e8:	81bffe04 	addi	r6,r16,-8
 40471ec:	948ffc34 	orhi	r18,r18,16368
 40471f0:	90c6b03a 	or	r3,r18,r3
 40471f4:	89800e2e 	bgeu	r17,r6,4047230 <__b2d+0x104>
 40471f8:	81bffd17 	ldw	r6,-12(r16)
 40471fc:	1144983a 	sll	r2,r2,r5
 4047200:	310ad83a 	srl	r5,r6,r4
 4047204:	2884b03a 	or	r2,r5,r2
 4047208:	003fe806 	br	40471ac <__alt_data_end+0xfffdc9ac>
 404720c:	10bffd44 	addi	r2,r2,-11
 4047210:	1000041e 	bne	r2,zero,4047224 <__b2d+0xf8>
 4047214:	90cffc34 	orhi	r3,r18,16368
 4047218:	003fe406 	br	40471ac <__alt_data_end+0xfffdc9ac>
 404721c:	000d883a 	mov	r6,zero
 4047220:	003fdf06 	br	40471a0 <__alt_data_end+0xfffdc9a0>
 4047224:	90a4983a 	sll	r18,r18,r2
 4047228:	0005883a 	mov	r2,zero
 404722c:	003ff906 	br	4047214 <__alt_data_end+0xfffdca14>
 4047230:	1144983a 	sll	r2,r2,r5
 4047234:	003fdd06 	br	40471ac <__alt_data_end+0xfffdc9ac>

04047238 <__d2b>:
 4047238:	defff804 	addi	sp,sp,-32
 404723c:	dc000215 	stw	r16,8(sp)
 4047240:	3021883a 	mov	r16,r6
 4047244:	dc400315 	stw	r17,12(sp)
 4047248:	8022907a 	slli	r17,r16,1
 404724c:	dd000615 	stw	r20,24(sp)
 4047250:	2829883a 	mov	r20,r5
 4047254:	01400044 	movi	r5,1
 4047258:	dcc00515 	stw	r19,20(sp)
 404725c:	dc800415 	stw	r18,16(sp)
 4047260:	dfc00715 	stw	ra,28(sp)
 4047264:	3825883a 	mov	r18,r7
 4047268:	8822d57a 	srli	r17,r17,21
 404726c:	40465a40 	call	40465a4 <_Balloc>
 4047270:	1027883a 	mov	r19,r2
 4047274:	00800434 	movhi	r2,16
 4047278:	10bfffc4 	addi	r2,r2,-1
 404727c:	808c703a 	and	r6,r16,r2
 4047280:	88000126 	beq	r17,zero,4047288 <__d2b+0x50>
 4047284:	31800434 	orhi	r6,r6,16
 4047288:	d9800015 	stw	r6,0(sp)
 404728c:	a0002426 	beq	r20,zero,4047320 <__d2b+0xe8>
 4047290:	d9000104 	addi	r4,sp,4
 4047294:	dd000115 	stw	r20,4(sp)
 4047298:	40469000 	call	4046900 <__lo0bits>
 404729c:	d8c00017 	ldw	r3,0(sp)
 40472a0:	10002f1e 	bne	r2,zero,4047360 <__d2b+0x128>
 40472a4:	d9000117 	ldw	r4,4(sp)
 40472a8:	99000515 	stw	r4,20(r19)
 40472ac:	1821003a 	cmpeq	r16,r3,zero
 40472b0:	01000084 	movi	r4,2
 40472b4:	2421c83a 	sub	r16,r4,r16
 40472b8:	98c00615 	stw	r3,24(r19)
 40472bc:	9c000415 	stw	r16,16(r19)
 40472c0:	88001f1e 	bne	r17,zero,4047340 <__d2b+0x108>
 40472c4:	10bef384 	addi	r2,r2,-1074
 40472c8:	90800015 	stw	r2,0(r18)
 40472cc:	00900034 	movhi	r2,16384
 40472d0:	10bfffc4 	addi	r2,r2,-1
 40472d4:	8085883a 	add	r2,r16,r2
 40472d8:	1085883a 	add	r2,r2,r2
 40472dc:	1085883a 	add	r2,r2,r2
 40472e0:	9885883a 	add	r2,r19,r2
 40472e4:	11000517 	ldw	r4,20(r2)
 40472e8:	8020917a 	slli	r16,r16,5
 40472ec:	40468980 	call	4046898 <__hi0bits>
 40472f0:	d8c00817 	ldw	r3,32(sp)
 40472f4:	8085c83a 	sub	r2,r16,r2
 40472f8:	18800015 	stw	r2,0(r3)
 40472fc:	9805883a 	mov	r2,r19
 4047300:	dfc00717 	ldw	ra,28(sp)
 4047304:	dd000617 	ldw	r20,24(sp)
 4047308:	dcc00517 	ldw	r19,20(sp)
 404730c:	dc800417 	ldw	r18,16(sp)
 4047310:	dc400317 	ldw	r17,12(sp)
 4047314:	dc000217 	ldw	r16,8(sp)
 4047318:	dec00804 	addi	sp,sp,32
 404731c:	f800283a 	ret
 4047320:	d809883a 	mov	r4,sp
 4047324:	40469000 	call	4046900 <__lo0bits>
 4047328:	d8c00017 	ldw	r3,0(sp)
 404732c:	04000044 	movi	r16,1
 4047330:	9c000415 	stw	r16,16(r19)
 4047334:	98c00515 	stw	r3,20(r19)
 4047338:	10800804 	addi	r2,r2,32
 404733c:	883fe126 	beq	r17,zero,40472c4 <__alt_data_end+0xfffdcac4>
 4047340:	00c00d44 	movi	r3,53
 4047344:	8c7ef344 	addi	r17,r17,-1075
 4047348:	88a3883a 	add	r17,r17,r2
 404734c:	1885c83a 	sub	r2,r3,r2
 4047350:	d8c00817 	ldw	r3,32(sp)
 4047354:	94400015 	stw	r17,0(r18)
 4047358:	18800015 	stw	r2,0(r3)
 404735c:	003fe706 	br	40472fc <__alt_data_end+0xfffdcafc>
 4047360:	01000804 	movi	r4,32
 4047364:	2089c83a 	sub	r4,r4,r2
 4047368:	1908983a 	sll	r4,r3,r4
 404736c:	d9400117 	ldw	r5,4(sp)
 4047370:	1886d83a 	srl	r3,r3,r2
 4047374:	2148b03a 	or	r4,r4,r5
 4047378:	99000515 	stw	r4,20(r19)
 404737c:	d8c00015 	stw	r3,0(sp)
 4047380:	003fca06 	br	40472ac <__alt_data_end+0xfffdcaac>

04047384 <__ratio>:
 4047384:	defff904 	addi	sp,sp,-28
 4047388:	dc400315 	stw	r17,12(sp)
 404738c:	2823883a 	mov	r17,r5
 4047390:	d9400104 	addi	r5,sp,4
 4047394:	dfc00615 	stw	ra,24(sp)
 4047398:	dcc00515 	stw	r19,20(sp)
 404739c:	dc800415 	stw	r18,16(sp)
 40473a0:	2027883a 	mov	r19,r4
 40473a4:	dc000215 	stw	r16,8(sp)
 40473a8:	404712c0 	call	404712c <__b2d>
 40473ac:	d80b883a 	mov	r5,sp
 40473b0:	8809883a 	mov	r4,r17
 40473b4:	1025883a 	mov	r18,r2
 40473b8:	1821883a 	mov	r16,r3
 40473bc:	404712c0 	call	404712c <__b2d>
 40473c0:	8a000417 	ldw	r8,16(r17)
 40473c4:	99000417 	ldw	r4,16(r19)
 40473c8:	d9400117 	ldw	r5,4(sp)
 40473cc:	2209c83a 	sub	r4,r4,r8
 40473d0:	2010917a 	slli	r8,r4,5
 40473d4:	d9000017 	ldw	r4,0(sp)
 40473d8:	2909c83a 	sub	r4,r5,r4
 40473dc:	4109883a 	add	r4,r8,r4
 40473e0:	01000e0e 	bge	zero,r4,404741c <__ratio+0x98>
 40473e4:	2008953a 	slli	r4,r4,20
 40473e8:	2421883a 	add	r16,r4,r16
 40473ec:	100d883a 	mov	r6,r2
 40473f0:	180f883a 	mov	r7,r3
 40473f4:	9009883a 	mov	r4,r18
 40473f8:	800b883a 	mov	r5,r16
 40473fc:	404b2700 	call	404b270 <__divdf3>
 4047400:	dfc00617 	ldw	ra,24(sp)
 4047404:	dcc00517 	ldw	r19,20(sp)
 4047408:	dc800417 	ldw	r18,16(sp)
 404740c:	dc400317 	ldw	r17,12(sp)
 4047410:	dc000217 	ldw	r16,8(sp)
 4047414:	dec00704 	addi	sp,sp,28
 4047418:	f800283a 	ret
 404741c:	2008953a 	slli	r4,r4,20
 4047420:	1907c83a 	sub	r3,r3,r4
 4047424:	003ff106 	br	40473ec <__alt_data_end+0xfffdcbec>

04047428 <_mprec_log10>:
 4047428:	defffe04 	addi	sp,sp,-8
 404742c:	dc000015 	stw	r16,0(sp)
 4047430:	dfc00115 	stw	ra,4(sp)
 4047434:	008005c4 	movi	r2,23
 4047438:	2021883a 	mov	r16,r4
 404743c:	11000d0e 	bge	r2,r4,4047474 <_mprec_log10+0x4c>
 4047440:	0005883a 	mov	r2,zero
 4047444:	00cffc34 	movhi	r3,16368
 4047448:	843fffc4 	addi	r16,r16,-1
 404744c:	000d883a 	mov	r6,zero
 4047450:	01d00934 	movhi	r7,16420
 4047454:	1009883a 	mov	r4,r2
 4047458:	180b883a 	mov	r5,r3
 404745c:	404bdb00 	call	404bdb0 <__muldf3>
 4047460:	803ff91e 	bne	r16,zero,4047448 <__alt_data_end+0xfffdcc48>
 4047464:	dfc00117 	ldw	ra,4(sp)
 4047468:	dc000017 	ldw	r16,0(sp)
 404746c:	dec00204 	addi	sp,sp,8
 4047470:	f800283a 	ret
 4047474:	202090fa 	slli	r16,r4,3
 4047478:	00810174 	movhi	r2,1029
 404747c:	1080e804 	addi	r2,r2,928
 4047480:	1421883a 	add	r16,r2,r16
 4047484:	80800017 	ldw	r2,0(r16)
 4047488:	80c00117 	ldw	r3,4(r16)
 404748c:	dfc00117 	ldw	ra,4(sp)
 4047490:	dc000017 	ldw	r16,0(sp)
 4047494:	dec00204 	addi	sp,sp,8
 4047498:	f800283a 	ret

0404749c <__copybits>:
 404749c:	297fffc4 	addi	r5,r5,-1
 40474a0:	280fd17a 	srai	r7,r5,5
 40474a4:	30c00417 	ldw	r3,16(r6)
 40474a8:	30800504 	addi	r2,r6,20
 40474ac:	39c00044 	addi	r7,r7,1
 40474b0:	18c7883a 	add	r3,r3,r3
 40474b4:	39cf883a 	add	r7,r7,r7
 40474b8:	18c7883a 	add	r3,r3,r3
 40474bc:	39cf883a 	add	r7,r7,r7
 40474c0:	10c7883a 	add	r3,r2,r3
 40474c4:	21cf883a 	add	r7,r4,r7
 40474c8:	10c00d2e 	bgeu	r2,r3,4047500 <__copybits+0x64>
 40474cc:	200b883a 	mov	r5,r4
 40474d0:	12000017 	ldw	r8,0(r2)
 40474d4:	29400104 	addi	r5,r5,4
 40474d8:	10800104 	addi	r2,r2,4
 40474dc:	2a3fff15 	stw	r8,-4(r5)
 40474e0:	10fffb36 	bltu	r2,r3,40474d0 <__alt_data_end+0xfffdccd0>
 40474e4:	1985c83a 	sub	r2,r3,r6
 40474e8:	10bffac4 	addi	r2,r2,-21
 40474ec:	1004d0ba 	srli	r2,r2,2
 40474f0:	10800044 	addi	r2,r2,1
 40474f4:	1085883a 	add	r2,r2,r2
 40474f8:	1085883a 	add	r2,r2,r2
 40474fc:	2089883a 	add	r4,r4,r2
 4047500:	21c0032e 	bgeu	r4,r7,4047510 <__copybits+0x74>
 4047504:	20000015 	stw	zero,0(r4)
 4047508:	21000104 	addi	r4,r4,4
 404750c:	21fffd36 	bltu	r4,r7,4047504 <__alt_data_end+0xfffdcd04>
 4047510:	f800283a 	ret

04047514 <__any_on>:
 4047514:	20c00417 	ldw	r3,16(r4)
 4047518:	2805d17a 	srai	r2,r5,5
 404751c:	21000504 	addi	r4,r4,20
 4047520:	18800d0e 	bge	r3,r2,4047558 <__any_on+0x44>
 4047524:	18c7883a 	add	r3,r3,r3
 4047528:	18c7883a 	add	r3,r3,r3
 404752c:	20c7883a 	add	r3,r4,r3
 4047530:	20c0192e 	bgeu	r4,r3,4047598 <__any_on+0x84>
 4047534:	18bfff17 	ldw	r2,-4(r3)
 4047538:	18ffff04 	addi	r3,r3,-4
 404753c:	1000041e 	bne	r2,zero,4047550 <__any_on+0x3c>
 4047540:	20c0142e 	bgeu	r4,r3,4047594 <__any_on+0x80>
 4047544:	18ffff04 	addi	r3,r3,-4
 4047548:	19400017 	ldw	r5,0(r3)
 404754c:	283ffc26 	beq	r5,zero,4047540 <__alt_data_end+0xfffdcd40>
 4047550:	00800044 	movi	r2,1
 4047554:	f800283a 	ret
 4047558:	10c00a0e 	bge	r2,r3,4047584 <__any_on+0x70>
 404755c:	1085883a 	add	r2,r2,r2
 4047560:	1085883a 	add	r2,r2,r2
 4047564:	294007cc 	andi	r5,r5,31
 4047568:	2087883a 	add	r3,r4,r2
 404756c:	283ff026 	beq	r5,zero,4047530 <__alt_data_end+0xfffdcd30>
 4047570:	19800017 	ldw	r6,0(r3)
 4047574:	3144d83a 	srl	r2,r6,r5
 4047578:	114a983a 	sll	r5,r2,r5
 404757c:	317ff41e 	bne	r6,r5,4047550 <__alt_data_end+0xfffdcd50>
 4047580:	003feb06 	br	4047530 <__alt_data_end+0xfffdcd30>
 4047584:	1085883a 	add	r2,r2,r2
 4047588:	1085883a 	add	r2,r2,r2
 404758c:	2087883a 	add	r3,r4,r2
 4047590:	003fe706 	br	4047530 <__alt_data_end+0xfffdcd30>
 4047594:	f800283a 	ret
 4047598:	0005883a 	mov	r2,zero
 404759c:	f800283a 	ret

040475a0 <_realloc_r>:
 40475a0:	defff604 	addi	sp,sp,-40
 40475a4:	dc800215 	stw	r18,8(sp)
 40475a8:	dfc00915 	stw	ra,36(sp)
 40475ac:	df000815 	stw	fp,32(sp)
 40475b0:	ddc00715 	stw	r23,28(sp)
 40475b4:	dd800615 	stw	r22,24(sp)
 40475b8:	dd400515 	stw	r21,20(sp)
 40475bc:	dd000415 	stw	r20,16(sp)
 40475c0:	dcc00315 	stw	r19,12(sp)
 40475c4:	dc400115 	stw	r17,4(sp)
 40475c8:	dc000015 	stw	r16,0(sp)
 40475cc:	3025883a 	mov	r18,r6
 40475d0:	2800b726 	beq	r5,zero,40478b0 <_realloc_r+0x310>
 40475d4:	282b883a 	mov	r21,r5
 40475d8:	2029883a 	mov	r20,r4
 40475dc:	404d8900 	call	404d890 <__malloc_lock>
 40475e0:	a8bfff17 	ldw	r2,-4(r21)
 40475e4:	043fff04 	movi	r16,-4
 40475e8:	90c002c4 	addi	r3,r18,11
 40475ec:	01000584 	movi	r4,22
 40475f0:	acfffe04 	addi	r19,r21,-8
 40475f4:	1420703a 	and	r16,r2,r16
 40475f8:	20c0332e 	bgeu	r4,r3,40476c8 <_realloc_r+0x128>
 40475fc:	047ffe04 	movi	r17,-8
 4047600:	1c62703a 	and	r17,r3,r17
 4047604:	8807883a 	mov	r3,r17
 4047608:	88005816 	blt	r17,zero,404776c <_realloc_r+0x1cc>
 404760c:	8c805736 	bltu	r17,r18,404776c <_realloc_r+0x1cc>
 4047610:	80c0300e 	bge	r16,r3,40476d4 <_realloc_r+0x134>
 4047614:	07010174 	movhi	fp,1029
 4047618:	e702a804 	addi	fp,fp,2720
 404761c:	e1c00217 	ldw	r7,8(fp)
 4047620:	9c09883a 	add	r4,r19,r16
 4047624:	22000117 	ldw	r8,4(r4)
 4047628:	21c06326 	beq	r4,r7,40477b8 <_realloc_r+0x218>
 404762c:	017fff84 	movi	r5,-2
 4047630:	414a703a 	and	r5,r8,r5
 4047634:	214b883a 	add	r5,r4,r5
 4047638:	29800117 	ldw	r6,4(r5)
 404763c:	3180004c 	andi	r6,r6,1
 4047640:	30003f26 	beq	r6,zero,4047740 <_realloc_r+0x1a0>
 4047644:	1080004c 	andi	r2,r2,1
 4047648:	10008326 	beq	r2,zero,4047858 <_realloc_r+0x2b8>
 404764c:	900b883a 	mov	r5,r18
 4047650:	a009883a 	mov	r4,r20
 4047654:	40458e80 	call	40458e8 <_malloc_r>
 4047658:	1025883a 	mov	r18,r2
 404765c:	10011e26 	beq	r2,zero,4047ad8 <_realloc_r+0x538>
 4047660:	a93fff17 	ldw	r4,-4(r21)
 4047664:	10fffe04 	addi	r3,r2,-8
 4047668:	00bfff84 	movi	r2,-2
 404766c:	2084703a 	and	r2,r4,r2
 4047670:	9885883a 	add	r2,r19,r2
 4047674:	1880ee26 	beq	r3,r2,4047a30 <_realloc_r+0x490>
 4047678:	81bfff04 	addi	r6,r16,-4
 404767c:	00800904 	movi	r2,36
 4047680:	1180b836 	bltu	r2,r6,4047964 <_realloc_r+0x3c4>
 4047684:	00c004c4 	movi	r3,19
 4047688:	19809636 	bltu	r3,r6,40478e4 <_realloc_r+0x344>
 404768c:	9005883a 	mov	r2,r18
 4047690:	a807883a 	mov	r3,r21
 4047694:	19000017 	ldw	r4,0(r3)
 4047698:	11000015 	stw	r4,0(r2)
 404769c:	19000117 	ldw	r4,4(r3)
 40476a0:	11000115 	stw	r4,4(r2)
 40476a4:	18c00217 	ldw	r3,8(r3)
 40476a8:	10c00215 	stw	r3,8(r2)
 40476ac:	a80b883a 	mov	r5,r21
 40476b0:	a009883a 	mov	r4,r20
 40476b4:	4044cfc0 	call	4044cfc <_free_r>
 40476b8:	a009883a 	mov	r4,r20
 40476bc:	404d8b40 	call	404d8b4 <__malloc_unlock>
 40476c0:	9005883a 	mov	r2,r18
 40476c4:	00001206 	br	4047710 <_realloc_r+0x170>
 40476c8:	00c00404 	movi	r3,16
 40476cc:	1823883a 	mov	r17,r3
 40476d0:	003fce06 	br	404760c <__alt_data_end+0xfffdce0c>
 40476d4:	a825883a 	mov	r18,r21
 40476d8:	8445c83a 	sub	r2,r16,r17
 40476dc:	00c003c4 	movi	r3,15
 40476e0:	18802636 	bltu	r3,r2,404777c <_realloc_r+0x1dc>
 40476e4:	99800117 	ldw	r6,4(r19)
 40476e8:	9c07883a 	add	r3,r19,r16
 40476ec:	3180004c 	andi	r6,r6,1
 40476f0:	3420b03a 	or	r16,r6,r16
 40476f4:	9c000115 	stw	r16,4(r19)
 40476f8:	18800117 	ldw	r2,4(r3)
 40476fc:	10800054 	ori	r2,r2,1
 4047700:	18800115 	stw	r2,4(r3)
 4047704:	a009883a 	mov	r4,r20
 4047708:	404d8b40 	call	404d8b4 <__malloc_unlock>
 404770c:	9005883a 	mov	r2,r18
 4047710:	dfc00917 	ldw	ra,36(sp)
 4047714:	df000817 	ldw	fp,32(sp)
 4047718:	ddc00717 	ldw	r23,28(sp)
 404771c:	dd800617 	ldw	r22,24(sp)
 4047720:	dd400517 	ldw	r21,20(sp)
 4047724:	dd000417 	ldw	r20,16(sp)
 4047728:	dcc00317 	ldw	r19,12(sp)
 404772c:	dc800217 	ldw	r18,8(sp)
 4047730:	dc400117 	ldw	r17,4(sp)
 4047734:	dc000017 	ldw	r16,0(sp)
 4047738:	dec00a04 	addi	sp,sp,40
 404773c:	f800283a 	ret
 4047740:	017fff04 	movi	r5,-4
 4047744:	414a703a 	and	r5,r8,r5
 4047748:	814d883a 	add	r6,r16,r5
 404774c:	30c01f16 	blt	r6,r3,40477cc <_realloc_r+0x22c>
 4047750:	20800317 	ldw	r2,12(r4)
 4047754:	20c00217 	ldw	r3,8(r4)
 4047758:	a825883a 	mov	r18,r21
 404775c:	3021883a 	mov	r16,r6
 4047760:	18800315 	stw	r2,12(r3)
 4047764:	10c00215 	stw	r3,8(r2)
 4047768:	003fdb06 	br	40476d8 <__alt_data_end+0xfffdced8>
 404776c:	00800304 	movi	r2,12
 4047770:	a0800015 	stw	r2,0(r20)
 4047774:	0005883a 	mov	r2,zero
 4047778:	003fe506 	br	4047710 <__alt_data_end+0xfffdcf10>
 404777c:	98c00117 	ldw	r3,4(r19)
 4047780:	9c4b883a 	add	r5,r19,r17
 4047784:	11000054 	ori	r4,r2,1
 4047788:	18c0004c 	andi	r3,r3,1
 404778c:	1c62b03a 	or	r17,r3,r17
 4047790:	9c400115 	stw	r17,4(r19)
 4047794:	29000115 	stw	r4,4(r5)
 4047798:	2885883a 	add	r2,r5,r2
 404779c:	10c00117 	ldw	r3,4(r2)
 40477a0:	29400204 	addi	r5,r5,8
 40477a4:	a009883a 	mov	r4,r20
 40477a8:	18c00054 	ori	r3,r3,1
 40477ac:	10c00115 	stw	r3,4(r2)
 40477b0:	4044cfc0 	call	4044cfc <_free_r>
 40477b4:	003fd306 	br	4047704 <__alt_data_end+0xfffdcf04>
 40477b8:	017fff04 	movi	r5,-4
 40477bc:	414a703a 	and	r5,r8,r5
 40477c0:	89800404 	addi	r6,r17,16
 40477c4:	8151883a 	add	r8,r16,r5
 40477c8:	4180590e 	bge	r8,r6,4047930 <_realloc_r+0x390>
 40477cc:	1080004c 	andi	r2,r2,1
 40477d0:	103f9e1e 	bne	r2,zero,404764c <__alt_data_end+0xfffdce4c>
 40477d4:	adbffe17 	ldw	r22,-8(r21)
 40477d8:	00bfff04 	movi	r2,-4
 40477dc:	9dadc83a 	sub	r22,r19,r22
 40477e0:	b1800117 	ldw	r6,4(r22)
 40477e4:	3084703a 	and	r2,r6,r2
 40477e8:	20002026 	beq	r4,zero,404786c <_realloc_r+0x2cc>
 40477ec:	80af883a 	add	r23,r16,r2
 40477f0:	b96f883a 	add	r23,r23,r5
 40477f4:	21c05f26 	beq	r4,r7,4047974 <_realloc_r+0x3d4>
 40477f8:	b8c01c16 	blt	r23,r3,404786c <_realloc_r+0x2cc>
 40477fc:	20800317 	ldw	r2,12(r4)
 4047800:	20c00217 	ldw	r3,8(r4)
 4047804:	81bfff04 	addi	r6,r16,-4
 4047808:	01000904 	movi	r4,36
 404780c:	18800315 	stw	r2,12(r3)
 4047810:	10c00215 	stw	r3,8(r2)
 4047814:	b0c00217 	ldw	r3,8(r22)
 4047818:	b0800317 	ldw	r2,12(r22)
 404781c:	b4800204 	addi	r18,r22,8
 4047820:	18800315 	stw	r2,12(r3)
 4047824:	10c00215 	stw	r3,8(r2)
 4047828:	21801b36 	bltu	r4,r6,4047898 <_realloc_r+0x2f8>
 404782c:	008004c4 	movi	r2,19
 4047830:	1180352e 	bgeu	r2,r6,4047908 <_realloc_r+0x368>
 4047834:	a8800017 	ldw	r2,0(r21)
 4047838:	b0800215 	stw	r2,8(r22)
 404783c:	a8800117 	ldw	r2,4(r21)
 4047840:	b0800315 	stw	r2,12(r22)
 4047844:	008006c4 	movi	r2,27
 4047848:	11807f36 	bltu	r2,r6,4047a48 <_realloc_r+0x4a8>
 404784c:	b0800404 	addi	r2,r22,16
 4047850:	ad400204 	addi	r21,r21,8
 4047854:	00002d06 	br	404790c <_realloc_r+0x36c>
 4047858:	adbffe17 	ldw	r22,-8(r21)
 404785c:	00bfff04 	movi	r2,-4
 4047860:	9dadc83a 	sub	r22,r19,r22
 4047864:	b1000117 	ldw	r4,4(r22)
 4047868:	2084703a 	and	r2,r4,r2
 404786c:	b03f7726 	beq	r22,zero,404764c <__alt_data_end+0xfffdce4c>
 4047870:	80af883a 	add	r23,r16,r2
 4047874:	b8ff7516 	blt	r23,r3,404764c <__alt_data_end+0xfffdce4c>
 4047878:	b0800317 	ldw	r2,12(r22)
 404787c:	b0c00217 	ldw	r3,8(r22)
 4047880:	81bfff04 	addi	r6,r16,-4
 4047884:	01000904 	movi	r4,36
 4047888:	18800315 	stw	r2,12(r3)
 404788c:	10c00215 	stw	r3,8(r2)
 4047890:	b4800204 	addi	r18,r22,8
 4047894:	21bfe52e 	bgeu	r4,r6,404782c <__alt_data_end+0xfffdd02c>
 4047898:	a80b883a 	mov	r5,r21
 404789c:	9009883a 	mov	r4,r18
 40478a0:	40463200 	call	4046320 <memmove>
 40478a4:	b821883a 	mov	r16,r23
 40478a8:	b027883a 	mov	r19,r22
 40478ac:	003f8a06 	br	40476d8 <__alt_data_end+0xfffdced8>
 40478b0:	300b883a 	mov	r5,r6
 40478b4:	dfc00917 	ldw	ra,36(sp)
 40478b8:	df000817 	ldw	fp,32(sp)
 40478bc:	ddc00717 	ldw	r23,28(sp)
 40478c0:	dd800617 	ldw	r22,24(sp)
 40478c4:	dd400517 	ldw	r21,20(sp)
 40478c8:	dd000417 	ldw	r20,16(sp)
 40478cc:	dcc00317 	ldw	r19,12(sp)
 40478d0:	dc800217 	ldw	r18,8(sp)
 40478d4:	dc400117 	ldw	r17,4(sp)
 40478d8:	dc000017 	ldw	r16,0(sp)
 40478dc:	dec00a04 	addi	sp,sp,40
 40478e0:	40458e81 	jmpi	40458e8 <_malloc_r>
 40478e4:	a8c00017 	ldw	r3,0(r21)
 40478e8:	90c00015 	stw	r3,0(r18)
 40478ec:	a8c00117 	ldw	r3,4(r21)
 40478f0:	90c00115 	stw	r3,4(r18)
 40478f4:	00c006c4 	movi	r3,27
 40478f8:	19804536 	bltu	r3,r6,4047a10 <_realloc_r+0x470>
 40478fc:	90800204 	addi	r2,r18,8
 4047900:	a8c00204 	addi	r3,r21,8
 4047904:	003f6306 	br	4047694 <__alt_data_end+0xfffdce94>
 4047908:	9005883a 	mov	r2,r18
 404790c:	a8c00017 	ldw	r3,0(r21)
 4047910:	b821883a 	mov	r16,r23
 4047914:	b027883a 	mov	r19,r22
 4047918:	10c00015 	stw	r3,0(r2)
 404791c:	a8c00117 	ldw	r3,4(r21)
 4047920:	10c00115 	stw	r3,4(r2)
 4047924:	a8c00217 	ldw	r3,8(r21)
 4047928:	10c00215 	stw	r3,8(r2)
 404792c:	003f6a06 	br	40476d8 <__alt_data_end+0xfffdced8>
 4047930:	9c67883a 	add	r19,r19,r17
 4047934:	4445c83a 	sub	r2,r8,r17
 4047938:	e4c00215 	stw	r19,8(fp)
 404793c:	10800054 	ori	r2,r2,1
 4047940:	98800115 	stw	r2,4(r19)
 4047944:	a8bfff17 	ldw	r2,-4(r21)
 4047948:	a009883a 	mov	r4,r20
 404794c:	1080004c 	andi	r2,r2,1
 4047950:	1462b03a 	or	r17,r2,r17
 4047954:	ac7fff15 	stw	r17,-4(r21)
 4047958:	404d8b40 	call	404d8b4 <__malloc_unlock>
 404795c:	a805883a 	mov	r2,r21
 4047960:	003f6b06 	br	4047710 <__alt_data_end+0xfffdcf10>
 4047964:	a80b883a 	mov	r5,r21
 4047968:	9009883a 	mov	r4,r18
 404796c:	40463200 	call	4046320 <memmove>
 4047970:	003f4e06 	br	40476ac <__alt_data_end+0xfffdceac>
 4047974:	89000404 	addi	r4,r17,16
 4047978:	b93fbc16 	blt	r23,r4,404786c <__alt_data_end+0xfffdd06c>
 404797c:	b0800317 	ldw	r2,12(r22)
 4047980:	b0c00217 	ldw	r3,8(r22)
 4047984:	81bfff04 	addi	r6,r16,-4
 4047988:	01000904 	movi	r4,36
 404798c:	18800315 	stw	r2,12(r3)
 4047990:	10c00215 	stw	r3,8(r2)
 4047994:	b4800204 	addi	r18,r22,8
 4047998:	21804336 	bltu	r4,r6,4047aa8 <_realloc_r+0x508>
 404799c:	008004c4 	movi	r2,19
 40479a0:	11803f2e 	bgeu	r2,r6,4047aa0 <_realloc_r+0x500>
 40479a4:	a8800017 	ldw	r2,0(r21)
 40479a8:	b0800215 	stw	r2,8(r22)
 40479ac:	a8800117 	ldw	r2,4(r21)
 40479b0:	b0800315 	stw	r2,12(r22)
 40479b4:	008006c4 	movi	r2,27
 40479b8:	11803f36 	bltu	r2,r6,4047ab8 <_realloc_r+0x518>
 40479bc:	b0800404 	addi	r2,r22,16
 40479c0:	ad400204 	addi	r21,r21,8
 40479c4:	a8c00017 	ldw	r3,0(r21)
 40479c8:	10c00015 	stw	r3,0(r2)
 40479cc:	a8c00117 	ldw	r3,4(r21)
 40479d0:	10c00115 	stw	r3,4(r2)
 40479d4:	a8c00217 	ldw	r3,8(r21)
 40479d8:	10c00215 	stw	r3,8(r2)
 40479dc:	b447883a 	add	r3,r22,r17
 40479e0:	bc45c83a 	sub	r2,r23,r17
 40479e4:	e0c00215 	stw	r3,8(fp)
 40479e8:	10800054 	ori	r2,r2,1
 40479ec:	18800115 	stw	r2,4(r3)
 40479f0:	b0800117 	ldw	r2,4(r22)
 40479f4:	a009883a 	mov	r4,r20
 40479f8:	1080004c 	andi	r2,r2,1
 40479fc:	1462b03a 	or	r17,r2,r17
 4047a00:	b4400115 	stw	r17,4(r22)
 4047a04:	404d8b40 	call	404d8b4 <__malloc_unlock>
 4047a08:	9005883a 	mov	r2,r18
 4047a0c:	003f4006 	br	4047710 <__alt_data_end+0xfffdcf10>
 4047a10:	a8c00217 	ldw	r3,8(r21)
 4047a14:	90c00215 	stw	r3,8(r18)
 4047a18:	a8c00317 	ldw	r3,12(r21)
 4047a1c:	90c00315 	stw	r3,12(r18)
 4047a20:	30801126 	beq	r6,r2,4047a68 <_realloc_r+0x4c8>
 4047a24:	90800404 	addi	r2,r18,16
 4047a28:	a8c00404 	addi	r3,r21,16
 4047a2c:	003f1906 	br	4047694 <__alt_data_end+0xfffdce94>
 4047a30:	90ffff17 	ldw	r3,-4(r18)
 4047a34:	00bfff04 	movi	r2,-4
 4047a38:	a825883a 	mov	r18,r21
 4047a3c:	1884703a 	and	r2,r3,r2
 4047a40:	80a1883a 	add	r16,r16,r2
 4047a44:	003f2406 	br	40476d8 <__alt_data_end+0xfffdced8>
 4047a48:	a8800217 	ldw	r2,8(r21)
 4047a4c:	b0800415 	stw	r2,16(r22)
 4047a50:	a8800317 	ldw	r2,12(r21)
 4047a54:	b0800515 	stw	r2,20(r22)
 4047a58:	31000a26 	beq	r6,r4,4047a84 <_realloc_r+0x4e4>
 4047a5c:	b0800604 	addi	r2,r22,24
 4047a60:	ad400404 	addi	r21,r21,16
 4047a64:	003fa906 	br	404790c <__alt_data_end+0xfffdd10c>
 4047a68:	a9000417 	ldw	r4,16(r21)
 4047a6c:	90800604 	addi	r2,r18,24
 4047a70:	a8c00604 	addi	r3,r21,24
 4047a74:	91000415 	stw	r4,16(r18)
 4047a78:	a9000517 	ldw	r4,20(r21)
 4047a7c:	91000515 	stw	r4,20(r18)
 4047a80:	003f0406 	br	4047694 <__alt_data_end+0xfffdce94>
 4047a84:	a8c00417 	ldw	r3,16(r21)
 4047a88:	ad400604 	addi	r21,r21,24
 4047a8c:	b0800804 	addi	r2,r22,32
 4047a90:	b0c00615 	stw	r3,24(r22)
 4047a94:	a8ffff17 	ldw	r3,-4(r21)
 4047a98:	b0c00715 	stw	r3,28(r22)
 4047a9c:	003f9b06 	br	404790c <__alt_data_end+0xfffdd10c>
 4047aa0:	9005883a 	mov	r2,r18
 4047aa4:	003fc706 	br	40479c4 <__alt_data_end+0xfffdd1c4>
 4047aa8:	a80b883a 	mov	r5,r21
 4047aac:	9009883a 	mov	r4,r18
 4047ab0:	40463200 	call	4046320 <memmove>
 4047ab4:	003fc906 	br	40479dc <__alt_data_end+0xfffdd1dc>
 4047ab8:	a8800217 	ldw	r2,8(r21)
 4047abc:	b0800415 	stw	r2,16(r22)
 4047ac0:	a8800317 	ldw	r2,12(r21)
 4047ac4:	b0800515 	stw	r2,20(r22)
 4047ac8:	31000726 	beq	r6,r4,4047ae8 <_realloc_r+0x548>
 4047acc:	b0800604 	addi	r2,r22,24
 4047ad0:	ad400404 	addi	r21,r21,16
 4047ad4:	003fbb06 	br	40479c4 <__alt_data_end+0xfffdd1c4>
 4047ad8:	a009883a 	mov	r4,r20
 4047adc:	404d8b40 	call	404d8b4 <__malloc_unlock>
 4047ae0:	0005883a 	mov	r2,zero
 4047ae4:	003f0a06 	br	4047710 <__alt_data_end+0xfffdcf10>
 4047ae8:	a8c00417 	ldw	r3,16(r21)
 4047aec:	ad400604 	addi	r21,r21,24
 4047af0:	b0800804 	addi	r2,r22,32
 4047af4:	b0c00615 	stw	r3,24(r22)
 4047af8:	a8ffff17 	ldw	r3,-4(r21)
 4047afc:	b0c00715 	stw	r3,28(r22)
 4047b00:	003fb006 	br	40479c4 <__alt_data_end+0xfffdd1c4>

04047b04 <__fpclassifyd>:
 4047b04:	00a00034 	movhi	r2,32768
 4047b08:	10bfffc4 	addi	r2,r2,-1
 4047b0c:	2884703a 	and	r2,r5,r2
 4047b10:	10000726 	beq	r2,zero,4047b30 <__fpclassifyd+0x2c>
 4047b14:	00fffc34 	movhi	r3,65520
 4047b18:	019ff834 	movhi	r6,32736
 4047b1c:	28c7883a 	add	r3,r5,r3
 4047b20:	31bfffc4 	addi	r6,r6,-1
 4047b24:	30c00536 	bltu	r6,r3,4047b3c <__fpclassifyd+0x38>
 4047b28:	00800104 	movi	r2,4
 4047b2c:	f800283a 	ret
 4047b30:	2000021e 	bne	r4,zero,4047b3c <__fpclassifyd+0x38>
 4047b34:	00800084 	movi	r2,2
 4047b38:	f800283a 	ret
 4047b3c:	00dffc34 	movhi	r3,32752
 4047b40:	019ff834 	movhi	r6,32736
 4047b44:	28cb883a 	add	r5,r5,r3
 4047b48:	31bfffc4 	addi	r6,r6,-1
 4047b4c:	317ff62e 	bgeu	r6,r5,4047b28 <__alt_data_end+0xfffdd328>
 4047b50:	01400434 	movhi	r5,16
 4047b54:	297fffc4 	addi	r5,r5,-1
 4047b58:	28800236 	bltu	r5,r2,4047b64 <__fpclassifyd+0x60>
 4047b5c:	008000c4 	movi	r2,3
 4047b60:	f800283a 	ret
 4047b64:	10c00226 	beq	r2,r3,4047b70 <__fpclassifyd+0x6c>
 4047b68:	0005883a 	mov	r2,zero
 4047b6c:	f800283a 	ret
 4047b70:	2005003a 	cmpeq	r2,r4,zero
 4047b74:	f800283a 	ret

04047b78 <_sbrk_r>:
 4047b78:	defffd04 	addi	sp,sp,-12
 4047b7c:	dc000015 	stw	r16,0(sp)
 4047b80:	04010174 	movhi	r16,1029
 4047b84:	dc400115 	stw	r17,4(sp)
 4047b88:	840f4c04 	addi	r16,r16,15664
 4047b8c:	2023883a 	mov	r17,r4
 4047b90:	2809883a 	mov	r4,r5
 4047b94:	dfc00215 	stw	ra,8(sp)
 4047b98:	80000015 	stw	zero,0(r16)
 4047b9c:	404da740 	call	404da74 <sbrk>
 4047ba0:	00ffffc4 	movi	r3,-1
 4047ba4:	10c00526 	beq	r2,r3,4047bbc <_sbrk_r+0x44>
 4047ba8:	dfc00217 	ldw	ra,8(sp)
 4047bac:	dc400117 	ldw	r17,4(sp)
 4047bb0:	dc000017 	ldw	r16,0(sp)
 4047bb4:	dec00304 	addi	sp,sp,12
 4047bb8:	f800283a 	ret
 4047bbc:	80c00017 	ldw	r3,0(r16)
 4047bc0:	183ff926 	beq	r3,zero,4047ba8 <__alt_data_end+0xfffdd3a8>
 4047bc4:	88c00015 	stw	r3,0(r17)
 4047bc8:	003ff706 	br	4047ba8 <__alt_data_end+0xfffdd3a8>

04047bcc <__sread>:
 4047bcc:	defffe04 	addi	sp,sp,-8
 4047bd0:	dc000015 	stw	r16,0(sp)
 4047bd4:	2821883a 	mov	r16,r5
 4047bd8:	2940038f 	ldh	r5,14(r5)
 4047bdc:	dfc00115 	stw	ra,4(sp)
 4047be0:	40499c00 	call	40499c0 <_read_r>
 4047be4:	10000716 	blt	r2,zero,4047c04 <__sread+0x38>
 4047be8:	80c01417 	ldw	r3,80(r16)
 4047bec:	1887883a 	add	r3,r3,r2
 4047bf0:	80c01415 	stw	r3,80(r16)
 4047bf4:	dfc00117 	ldw	ra,4(sp)
 4047bf8:	dc000017 	ldw	r16,0(sp)
 4047bfc:	dec00204 	addi	sp,sp,8
 4047c00:	f800283a 	ret
 4047c04:	80c0030b 	ldhu	r3,12(r16)
 4047c08:	18fbffcc 	andi	r3,r3,61439
 4047c0c:	80c0030d 	sth	r3,12(r16)
 4047c10:	dfc00117 	ldw	ra,4(sp)
 4047c14:	dc000017 	ldw	r16,0(sp)
 4047c18:	dec00204 	addi	sp,sp,8
 4047c1c:	f800283a 	ret

04047c20 <__seofread>:
 4047c20:	0005883a 	mov	r2,zero
 4047c24:	f800283a 	ret

04047c28 <__swrite>:
 4047c28:	2880030b 	ldhu	r2,12(r5)
 4047c2c:	defffb04 	addi	sp,sp,-20
 4047c30:	dcc00315 	stw	r19,12(sp)
 4047c34:	dc800215 	stw	r18,8(sp)
 4047c38:	dc400115 	stw	r17,4(sp)
 4047c3c:	dc000015 	stw	r16,0(sp)
 4047c40:	dfc00415 	stw	ra,16(sp)
 4047c44:	10c0400c 	andi	r3,r2,256
 4047c48:	2821883a 	mov	r16,r5
 4047c4c:	2023883a 	mov	r17,r4
 4047c50:	3025883a 	mov	r18,r6
 4047c54:	3827883a 	mov	r19,r7
 4047c58:	18000526 	beq	r3,zero,4047c70 <__swrite+0x48>
 4047c5c:	2940038f 	ldh	r5,14(r5)
 4047c60:	01c00084 	movi	r7,2
 4047c64:	000d883a 	mov	r6,zero
 4047c68:	40499600 	call	4049960 <_lseek_r>
 4047c6c:	8080030b 	ldhu	r2,12(r16)
 4047c70:	8140038f 	ldh	r5,14(r16)
 4047c74:	10bbffcc 	andi	r2,r2,61439
 4047c78:	980f883a 	mov	r7,r19
 4047c7c:	900d883a 	mov	r6,r18
 4047c80:	8809883a 	mov	r4,r17
 4047c84:	8080030d 	sth	r2,12(r16)
 4047c88:	dfc00417 	ldw	ra,16(sp)
 4047c8c:	dcc00317 	ldw	r19,12(sp)
 4047c90:	dc800217 	ldw	r18,8(sp)
 4047c94:	dc400117 	ldw	r17,4(sp)
 4047c98:	dc000017 	ldw	r16,0(sp)
 4047c9c:	dec00504 	addi	sp,sp,20
 4047ca0:	404942c1 	jmpi	404942c <_write_r>

04047ca4 <__sseek>:
 4047ca4:	defffe04 	addi	sp,sp,-8
 4047ca8:	dc000015 	stw	r16,0(sp)
 4047cac:	2821883a 	mov	r16,r5
 4047cb0:	2940038f 	ldh	r5,14(r5)
 4047cb4:	dfc00115 	stw	ra,4(sp)
 4047cb8:	40499600 	call	4049960 <_lseek_r>
 4047cbc:	00ffffc4 	movi	r3,-1
 4047cc0:	10c00826 	beq	r2,r3,4047ce4 <__sseek+0x40>
 4047cc4:	80c0030b 	ldhu	r3,12(r16)
 4047cc8:	80801415 	stw	r2,80(r16)
 4047ccc:	18c40014 	ori	r3,r3,4096
 4047cd0:	80c0030d 	sth	r3,12(r16)
 4047cd4:	dfc00117 	ldw	ra,4(sp)
 4047cd8:	dc000017 	ldw	r16,0(sp)
 4047cdc:	dec00204 	addi	sp,sp,8
 4047ce0:	f800283a 	ret
 4047ce4:	80c0030b 	ldhu	r3,12(r16)
 4047ce8:	18fbffcc 	andi	r3,r3,61439
 4047cec:	80c0030d 	sth	r3,12(r16)
 4047cf0:	dfc00117 	ldw	ra,4(sp)
 4047cf4:	dc000017 	ldw	r16,0(sp)
 4047cf8:	dec00204 	addi	sp,sp,8
 4047cfc:	f800283a 	ret

04047d00 <__sclose>:
 4047d00:	2940038f 	ldh	r5,14(r5)
 4047d04:	404948c1 	jmpi	404948c <_close_r>

04047d08 <strcmp>:
 4047d08:	2144b03a 	or	r2,r4,r5
 4047d0c:	108000cc 	andi	r2,r2,3
 4047d10:	1000171e 	bne	r2,zero,4047d70 <strcmp+0x68>
 4047d14:	20800017 	ldw	r2,0(r4)
 4047d18:	28c00017 	ldw	r3,0(r5)
 4047d1c:	10c0141e 	bne	r2,r3,4047d70 <strcmp+0x68>
 4047d20:	027fbff4 	movhi	r9,65279
 4047d24:	4a7fbfc4 	addi	r9,r9,-257
 4047d28:	0086303a 	nor	r3,zero,r2
 4047d2c:	02202074 	movhi	r8,32897
 4047d30:	1245883a 	add	r2,r2,r9
 4047d34:	42202004 	addi	r8,r8,-32640
 4047d38:	10c4703a 	and	r2,r2,r3
 4047d3c:	1204703a 	and	r2,r2,r8
 4047d40:	10000226 	beq	r2,zero,4047d4c <strcmp+0x44>
 4047d44:	00002306 	br	4047dd4 <strcmp+0xcc>
 4047d48:	1000221e 	bne	r2,zero,4047dd4 <strcmp+0xcc>
 4047d4c:	21000104 	addi	r4,r4,4
 4047d50:	20c00017 	ldw	r3,0(r4)
 4047d54:	29400104 	addi	r5,r5,4
 4047d58:	29800017 	ldw	r6,0(r5)
 4047d5c:	1a4f883a 	add	r7,r3,r9
 4047d60:	00c4303a 	nor	r2,zero,r3
 4047d64:	3884703a 	and	r2,r7,r2
 4047d68:	1204703a 	and	r2,r2,r8
 4047d6c:	19bff626 	beq	r3,r6,4047d48 <__alt_data_end+0xfffdd548>
 4047d70:	20800003 	ldbu	r2,0(r4)
 4047d74:	10c03fcc 	andi	r3,r2,255
 4047d78:	18c0201c 	xori	r3,r3,128
 4047d7c:	18ffe004 	addi	r3,r3,-128
 4047d80:	18000c26 	beq	r3,zero,4047db4 <strcmp+0xac>
 4047d84:	29800007 	ldb	r6,0(r5)
 4047d88:	19800326 	beq	r3,r6,4047d98 <strcmp+0x90>
 4047d8c:	00001306 	br	4047ddc <strcmp+0xd4>
 4047d90:	29800007 	ldb	r6,0(r5)
 4047d94:	11800b1e 	bne	r2,r6,4047dc4 <strcmp+0xbc>
 4047d98:	21000044 	addi	r4,r4,1
 4047d9c:	20c00003 	ldbu	r3,0(r4)
 4047da0:	29400044 	addi	r5,r5,1
 4047da4:	18803fcc 	andi	r2,r3,255
 4047da8:	1080201c 	xori	r2,r2,128
 4047dac:	10bfe004 	addi	r2,r2,-128
 4047db0:	103ff71e 	bne	r2,zero,4047d90 <__alt_data_end+0xfffdd590>
 4047db4:	0007883a 	mov	r3,zero
 4047db8:	28800003 	ldbu	r2,0(r5)
 4047dbc:	1885c83a 	sub	r2,r3,r2
 4047dc0:	f800283a 	ret
 4047dc4:	28800003 	ldbu	r2,0(r5)
 4047dc8:	18c03fcc 	andi	r3,r3,255
 4047dcc:	1885c83a 	sub	r2,r3,r2
 4047dd0:	f800283a 	ret
 4047dd4:	0005883a 	mov	r2,zero
 4047dd8:	f800283a 	ret
 4047ddc:	10c03fcc 	andi	r3,r2,255
 4047de0:	003ff506 	br	4047db8 <__alt_data_end+0xfffdd5b8>

04047de4 <__sprint_r.part.0>:
 4047de4:	28801917 	ldw	r2,100(r5)
 4047de8:	defff604 	addi	sp,sp,-40
 4047dec:	dd400515 	stw	r21,20(sp)
 4047df0:	dfc00915 	stw	ra,36(sp)
 4047df4:	df000815 	stw	fp,32(sp)
 4047df8:	ddc00715 	stw	r23,28(sp)
 4047dfc:	dd800615 	stw	r22,24(sp)
 4047e00:	dd000415 	stw	r20,16(sp)
 4047e04:	dcc00315 	stw	r19,12(sp)
 4047e08:	dc800215 	stw	r18,8(sp)
 4047e0c:	dc400115 	stw	r17,4(sp)
 4047e10:	dc000015 	stw	r16,0(sp)
 4047e14:	1088000c 	andi	r2,r2,8192
 4047e18:	302b883a 	mov	r21,r6
 4047e1c:	10002e26 	beq	r2,zero,4047ed8 <__sprint_r.part.0+0xf4>
 4047e20:	30800217 	ldw	r2,8(r6)
 4047e24:	35800017 	ldw	r22,0(r6)
 4047e28:	10002926 	beq	r2,zero,4047ed0 <__sprint_r.part.0+0xec>
 4047e2c:	2827883a 	mov	r19,r5
 4047e30:	2029883a 	mov	r20,r4
 4047e34:	b5c00104 	addi	r23,r22,4
 4047e38:	04bfffc4 	movi	r18,-1
 4047e3c:	bc400017 	ldw	r17,0(r23)
 4047e40:	b4000017 	ldw	r16,0(r22)
 4047e44:	0039883a 	mov	fp,zero
 4047e48:	8822d0ba 	srli	r17,r17,2
 4047e4c:	8800031e 	bne	r17,zero,4047e5c <__sprint_r.part.0+0x78>
 4047e50:	00001806 	br	4047eb4 <__sprint_r.part.0+0xd0>
 4047e54:	84000104 	addi	r16,r16,4
 4047e58:	8f001526 	beq	r17,fp,4047eb0 <__sprint_r.part.0+0xcc>
 4047e5c:	81400017 	ldw	r5,0(r16)
 4047e60:	980d883a 	mov	r6,r19
 4047e64:	a009883a 	mov	r4,r20
 4047e68:	404980c0 	call	404980c <_fputwc_r>
 4047e6c:	e7000044 	addi	fp,fp,1
 4047e70:	14bff81e 	bne	r2,r18,4047e54 <__alt_data_end+0xfffdd654>
 4047e74:	9005883a 	mov	r2,r18
 4047e78:	a8000215 	stw	zero,8(r21)
 4047e7c:	a8000115 	stw	zero,4(r21)
 4047e80:	dfc00917 	ldw	ra,36(sp)
 4047e84:	df000817 	ldw	fp,32(sp)
 4047e88:	ddc00717 	ldw	r23,28(sp)
 4047e8c:	dd800617 	ldw	r22,24(sp)
 4047e90:	dd400517 	ldw	r21,20(sp)
 4047e94:	dd000417 	ldw	r20,16(sp)
 4047e98:	dcc00317 	ldw	r19,12(sp)
 4047e9c:	dc800217 	ldw	r18,8(sp)
 4047ea0:	dc400117 	ldw	r17,4(sp)
 4047ea4:	dc000017 	ldw	r16,0(sp)
 4047ea8:	dec00a04 	addi	sp,sp,40
 4047eac:	f800283a 	ret
 4047eb0:	a8800217 	ldw	r2,8(r21)
 4047eb4:	8c63883a 	add	r17,r17,r17
 4047eb8:	8c63883a 	add	r17,r17,r17
 4047ebc:	1445c83a 	sub	r2,r2,r17
 4047ec0:	a8800215 	stw	r2,8(r21)
 4047ec4:	b5800204 	addi	r22,r22,8
 4047ec8:	bdc00204 	addi	r23,r23,8
 4047ecc:	103fdb1e 	bne	r2,zero,4047e3c <__alt_data_end+0xfffdd63c>
 4047ed0:	0005883a 	mov	r2,zero
 4047ed4:	003fe806 	br	4047e78 <__alt_data_end+0xfffdd678>
 4047ed8:	404500c0 	call	404500c <__sfvwrite_r>
 4047edc:	003fe606 	br	4047e78 <__alt_data_end+0xfffdd678>

04047ee0 <__sprint_r>:
 4047ee0:	30c00217 	ldw	r3,8(r6)
 4047ee4:	18000126 	beq	r3,zero,4047eec <__sprint_r+0xc>
 4047ee8:	4047de41 	jmpi	4047de4 <__sprint_r.part.0>
 4047eec:	30000115 	stw	zero,4(r6)
 4047ef0:	0005883a 	mov	r2,zero
 4047ef4:	f800283a 	ret

04047ef8 <___vfiprintf_internal_r>:
 4047ef8:	deffc904 	addi	sp,sp,-220
 4047efc:	df003515 	stw	fp,212(sp)
 4047f00:	dd003115 	stw	r20,196(sp)
 4047f04:	dfc03615 	stw	ra,216(sp)
 4047f08:	ddc03415 	stw	r23,208(sp)
 4047f0c:	dd803315 	stw	r22,204(sp)
 4047f10:	dd403215 	stw	r21,200(sp)
 4047f14:	dcc03015 	stw	r19,192(sp)
 4047f18:	dc802f15 	stw	r18,188(sp)
 4047f1c:	dc402e15 	stw	r17,184(sp)
 4047f20:	dc002d15 	stw	r16,180(sp)
 4047f24:	d9002015 	stw	r4,128(sp)
 4047f28:	d9c02215 	stw	r7,136(sp)
 4047f2c:	2829883a 	mov	r20,r5
 4047f30:	3039883a 	mov	fp,r6
 4047f34:	20000226 	beq	r4,zero,4047f40 <___vfiprintf_internal_r+0x48>
 4047f38:	20800e17 	ldw	r2,56(r4)
 4047f3c:	1000cf26 	beq	r2,zero,404827c <___vfiprintf_internal_r+0x384>
 4047f40:	a080030b 	ldhu	r2,12(r20)
 4047f44:	10c8000c 	andi	r3,r2,8192
 4047f48:	1800061e 	bne	r3,zero,4047f64 <___vfiprintf_internal_r+0x6c>
 4047f4c:	a1001917 	ldw	r4,100(r20)
 4047f50:	00f7ffc4 	movi	r3,-8193
 4047f54:	10880014 	ori	r2,r2,8192
 4047f58:	20c6703a 	and	r3,r4,r3
 4047f5c:	a080030d 	sth	r2,12(r20)
 4047f60:	a0c01915 	stw	r3,100(r20)
 4047f64:	10c0020c 	andi	r3,r2,8
 4047f68:	1800a926 	beq	r3,zero,4048210 <___vfiprintf_internal_r+0x318>
 4047f6c:	a0c00417 	ldw	r3,16(r20)
 4047f70:	1800a726 	beq	r3,zero,4048210 <___vfiprintf_internal_r+0x318>
 4047f74:	1080068c 	andi	r2,r2,26
 4047f78:	00c00284 	movi	r3,10
 4047f7c:	10c0ac26 	beq	r2,r3,4048230 <___vfiprintf_internal_r+0x338>
 4047f80:	da801a04 	addi	r10,sp,104
 4047f84:	da801e15 	stw	r10,120(sp)
 4047f88:	d8801e17 	ldw	r2,120(sp)
 4047f8c:	da8019c4 	addi	r10,sp,103
 4047f90:	05810174 	movhi	r22,1029
 4047f94:	05c10174 	movhi	r23,1029
 4047f98:	da801f15 	stw	r10,124(sp)
 4047f9c:	1295c83a 	sub	r10,r2,r10
 4047fa0:	b5811e04 	addi	r22,r22,1144
 4047fa4:	bdc11a04 	addi	r23,r23,1128
 4047fa8:	dec01a15 	stw	sp,104(sp)
 4047fac:	d8001c15 	stw	zero,112(sp)
 4047fb0:	d8001b15 	stw	zero,108(sp)
 4047fb4:	d8002615 	stw	zero,152(sp)
 4047fb8:	d8002315 	stw	zero,140(sp)
 4047fbc:	da802715 	stw	r10,156(sp)
 4047fc0:	d811883a 	mov	r8,sp
 4047fc4:	dd002115 	stw	r20,132(sp)
 4047fc8:	e021883a 	mov	r16,fp
 4047fcc:	80800007 	ldb	r2,0(r16)
 4047fd0:	1003ea26 	beq	r2,zero,4048f7c <___vfiprintf_internal_r+0x1084>
 4047fd4:	00c00944 	movi	r3,37
 4047fd8:	8025883a 	mov	r18,r16
 4047fdc:	10c0021e 	bne	r2,r3,4047fe8 <___vfiprintf_internal_r+0xf0>
 4047fe0:	00001606 	br	404803c <___vfiprintf_internal_r+0x144>
 4047fe4:	10c00326 	beq	r2,r3,4047ff4 <___vfiprintf_internal_r+0xfc>
 4047fe8:	94800044 	addi	r18,r18,1
 4047fec:	90800007 	ldb	r2,0(r18)
 4047ff0:	103ffc1e 	bne	r2,zero,4047fe4 <__alt_data_end+0xfffdd7e4>
 4047ff4:	9423c83a 	sub	r17,r18,r16
 4047ff8:	88001026 	beq	r17,zero,404803c <___vfiprintf_internal_r+0x144>
 4047ffc:	d8c01c17 	ldw	r3,112(sp)
 4048000:	d8801b17 	ldw	r2,108(sp)
 4048004:	44000015 	stw	r16,0(r8)
 4048008:	88c7883a 	add	r3,r17,r3
 404800c:	10800044 	addi	r2,r2,1
 4048010:	44400115 	stw	r17,4(r8)
 4048014:	d8c01c15 	stw	r3,112(sp)
 4048018:	d8801b15 	stw	r2,108(sp)
 404801c:	010001c4 	movi	r4,7
 4048020:	2080760e 	bge	r4,r2,40481fc <___vfiprintf_internal_r+0x304>
 4048024:	1803821e 	bne	r3,zero,4048e30 <___vfiprintf_internal_r+0xf38>
 4048028:	da802317 	ldw	r10,140(sp)
 404802c:	d8001b15 	stw	zero,108(sp)
 4048030:	d811883a 	mov	r8,sp
 4048034:	5455883a 	add	r10,r10,r17
 4048038:	da802315 	stw	r10,140(sp)
 404803c:	90800007 	ldb	r2,0(r18)
 4048040:	10044626 	beq	r2,zero,404915c <___vfiprintf_internal_r+0x1264>
 4048044:	90c00047 	ldb	r3,1(r18)
 4048048:	94000044 	addi	r16,r18,1
 404804c:	d8001d85 	stb	zero,118(sp)
 4048050:	0009883a 	mov	r4,zero
 4048054:	000f883a 	mov	r7,zero
 4048058:	027fffc4 	movi	r9,-1
 404805c:	0023883a 	mov	r17,zero
 4048060:	0029883a 	mov	r20,zero
 4048064:	01401604 	movi	r5,88
 4048068:	01800244 	movi	r6,9
 404806c:	03400a84 	movi	r13,42
 4048070:	03001b04 	movi	r12,108
 4048074:	84000044 	addi	r16,r16,1
 4048078:	18bff804 	addi	r2,r3,-32
 404807c:	28827336 	bltu	r5,r2,4048a4c <___vfiprintf_internal_r+0xb54>
 4048080:	100490ba 	slli	r2,r2,2
 4048084:	02810174 	movhi	r10,1029
 4048088:	52a02604 	addi	r10,r10,-32616
 404808c:	1285883a 	add	r2,r2,r10
 4048090:	10800017 	ldw	r2,0(r2)
 4048094:	1000683a 	jmp	r2
 4048098:	04048780 	call	404878 <__alt_mem_SDRAM_Controller_Shared+0x404878>
 404809c:	04048a4c 	andi	r16,zero,4649
 40480a0:	04048a4c 	andi	r16,zero,4649
 40480a4:	040487a0 	cmpeqi	r16,zero,4638
 40480a8:	04048a4c 	andi	r16,zero,4649
 40480ac:	04048a4c 	andi	r16,zero,4649
 40480b0:	04048a4c 	andi	r16,zero,4649
 40480b4:	04048a4c 	andi	r16,zero,4649
 40480b8:	04048a4c 	andi	r16,zero,4649
 40480bc:	04048a4c 	andi	r16,zero,4649
 40480c0:	04048988 	cmpgei	r16,zero,4646
 40480c4:	040489a4 	muli	r16,zero,4646
 40480c8:	04048a4c 	andi	r16,zero,4649
 40480cc:	0404828c 	andi	r16,zero,4618
 40480d0:	040489b4 	movhi	r16,4646
 40480d4:	04048a4c 	andi	r16,zero,4649
 40480d8:	040487ac 	andhi	r16,zero,4638
 40480dc:	040487b8 	rdprs	r16,zero,4638
 40480e0:	040487b8 	rdprs	r16,zero,4638
 40480e4:	040487b8 	rdprs	r16,zero,4638
 40480e8:	040487b8 	rdprs	r16,zero,4638
 40480ec:	040487b8 	rdprs	r16,zero,4638
 40480f0:	040487b8 	rdprs	r16,zero,4638
 40480f4:	040487b8 	rdprs	r16,zero,4638
 40480f8:	040487b8 	rdprs	r16,zero,4638
 40480fc:	040487b8 	rdprs	r16,zero,4638
 4048100:	04048a4c 	andi	r16,zero,4649
 4048104:	04048a4c 	andi	r16,zero,4649
 4048108:	04048a4c 	andi	r16,zero,4649
 404810c:	04048a4c 	andi	r16,zero,4649
 4048110:	04048a4c 	andi	r16,zero,4649
 4048114:	04048a4c 	andi	r16,zero,4649
 4048118:	04048a4c 	andi	r16,zero,4649
 404811c:	04048a4c 	andi	r16,zero,4649
 4048120:	04048a4c 	andi	r16,zero,4649
 4048124:	04048a4c 	andi	r16,zero,4649
 4048128:	040487e4 	muli	r16,zero,4639
 404812c:	04048a4c 	andi	r16,zero,4649
 4048130:	04048a4c 	andi	r16,zero,4649
 4048134:	04048a4c 	andi	r16,zero,4649
 4048138:	04048a4c 	andi	r16,zero,4649
 404813c:	04048a4c 	andi	r16,zero,4649
 4048140:	04048a4c 	andi	r16,zero,4649
 4048144:	04048a4c 	andi	r16,zero,4649
 4048148:	04048a4c 	andi	r16,zero,4649
 404814c:	04048a4c 	andi	r16,zero,4649
 4048150:	04048a4c 	andi	r16,zero,4649
 4048154:	0404881c 	xori	r16,zero,4640
 4048158:	04048a4c 	andi	r16,zero,4649
 404815c:	04048a4c 	andi	r16,zero,4649
 4048160:	04048a4c 	andi	r16,zero,4649
 4048164:	04048a4c 	andi	r16,zero,4649
 4048168:	04048a4c 	andi	r16,zero,4649
 404816c:	04048874 	movhi	r16,4641
 4048170:	04048a4c 	andi	r16,zero,4649
 4048174:	04048a4c 	andi	r16,zero,4649
 4048178:	040488e4 	muli	r16,zero,4643
 404817c:	04048a4c 	andi	r16,zero,4649
 4048180:	04048a4c 	andi	r16,zero,4649
 4048184:	04048a4c 	andi	r16,zero,4649
 4048188:	04048a4c 	andi	r16,zero,4649
 404818c:	04048a4c 	andi	r16,zero,4649
 4048190:	04048a4c 	andi	r16,zero,4649
 4048194:	04048a4c 	andi	r16,zero,4649
 4048198:	04048a4c 	andi	r16,zero,4649
 404819c:	04048a4c 	andi	r16,zero,4649
 40481a0:	04048a4c 	andi	r16,zero,4649
 40481a4:	04048690 	cmplti	r16,zero,4634
 40481a8:	040486bc 	xorhi	r16,zero,4634
 40481ac:	04048a4c 	andi	r16,zero,4649
 40481b0:	04048a4c 	andi	r16,zero,4649
 40481b4:	04048a4c 	andi	r16,zero,4649
 40481b8:	040489f4 	movhi	r16,4647
 40481bc:	040486bc 	xorhi	r16,zero,4634
 40481c0:	04048a4c 	andi	r16,zero,4649
 40481c4:	04048a4c 	andi	r16,zero,4649
 40481c8:	04048550 	cmplti	r16,zero,4629
 40481cc:	04048a4c 	andi	r16,zero,4649
 40481d0:	04048560 	cmpeqi	r16,zero,4629
 40481d4:	0404859c 	xori	r16,zero,4630
 40481d8:	04048298 	cmpnei	r16,zero,4618
 40481dc:	04048544 	movi	r16,4629
 40481e0:	04048a4c 	andi	r16,zero,4649
 40481e4:	04048920 	cmpeqi	r16,zero,4644
 40481e8:	04048a4c 	andi	r16,zero,4649
 40481ec:	04048978 	rdprs	r16,zero,4645
 40481f0:	04048a4c 	andi	r16,zero,4649
 40481f4:	04048a4c 	andi	r16,zero,4649
 40481f8:	0404863c 	xorhi	r16,zero,4632
 40481fc:	42000204 	addi	r8,r8,8
 4048200:	da802317 	ldw	r10,140(sp)
 4048204:	5455883a 	add	r10,r10,r17
 4048208:	da802315 	stw	r10,140(sp)
 404820c:	003f8b06 	br	404803c <__alt_data_end+0xfffdd83c>
 4048210:	d9002017 	ldw	r4,128(sp)
 4048214:	a00b883a 	mov	r5,r20
 4048218:	4042bb40 	call	4042bb4 <__swsetup_r>
 404821c:	1003b11e 	bne	r2,zero,40490e4 <___vfiprintf_internal_r+0x11ec>
 4048220:	a080030b 	ldhu	r2,12(r20)
 4048224:	00c00284 	movi	r3,10
 4048228:	1080068c 	andi	r2,r2,26
 404822c:	10ff541e 	bne	r2,r3,4047f80 <__alt_data_end+0xfffdd780>
 4048230:	a080038f 	ldh	r2,14(r20)
 4048234:	103f5216 	blt	r2,zero,4047f80 <__alt_data_end+0xfffdd780>
 4048238:	d9c02217 	ldw	r7,136(sp)
 404823c:	d9002017 	ldw	r4,128(sp)
 4048240:	e00d883a 	mov	r6,fp
 4048244:	a00b883a 	mov	r5,r20
 4048248:	40493700 	call	4049370 <__sbprintf>
 404824c:	dfc03617 	ldw	ra,216(sp)
 4048250:	df003517 	ldw	fp,212(sp)
 4048254:	ddc03417 	ldw	r23,208(sp)
 4048258:	dd803317 	ldw	r22,204(sp)
 404825c:	dd403217 	ldw	r21,200(sp)
 4048260:	dd003117 	ldw	r20,196(sp)
 4048264:	dcc03017 	ldw	r19,192(sp)
 4048268:	dc802f17 	ldw	r18,188(sp)
 404826c:	dc402e17 	ldw	r17,184(sp)
 4048270:	dc002d17 	ldw	r16,180(sp)
 4048274:	dec03704 	addi	sp,sp,220
 4048278:	f800283a 	ret
 404827c:	4044b880 	call	4044b88 <__sinit>
 4048280:	003f2f06 	br	4047f40 <__alt_data_end+0xfffdd740>
 4048284:	0463c83a 	sub	r17,zero,r17
 4048288:	d8802215 	stw	r2,136(sp)
 404828c:	a5000114 	ori	r20,r20,4
 4048290:	80c00007 	ldb	r3,0(r16)
 4048294:	003f7706 	br	4048074 <__alt_data_end+0xfffdd874>
 4048298:	00800c04 	movi	r2,48
 404829c:	da802217 	ldw	r10,136(sp)
 40482a0:	d8801d05 	stb	r2,116(sp)
 40482a4:	00801e04 	movi	r2,120
 40482a8:	d8801d45 	stb	r2,117(sp)
 40482ac:	d8001d85 	stb	zero,118(sp)
 40482b0:	50c00104 	addi	r3,r10,4
 40482b4:	54800017 	ldw	r18,0(r10)
 40482b8:	0027883a 	mov	r19,zero
 40482bc:	a0800094 	ori	r2,r20,2
 40482c0:	48030b16 	blt	r9,zero,4048ef0 <___vfiprintf_internal_r+0xff8>
 40482c4:	00bfdfc4 	movi	r2,-129
 40482c8:	a096703a 	and	r11,r20,r2
 40482cc:	d8c02215 	stw	r3,136(sp)
 40482d0:	5d000094 	ori	r20,r11,2
 40482d4:	90032b1e 	bne	r18,zero,4048f84 <___vfiprintf_internal_r+0x108c>
 40482d8:	00810174 	movhi	r2,1029
 40482dc:	1080b904 	addi	r2,r2,740
 40482e0:	d8802615 	stw	r2,152(sp)
 40482e4:	0039883a 	mov	fp,zero
 40482e8:	48017b1e 	bne	r9,zero,40488d8 <___vfiprintf_internal_r+0x9e0>
 40482ec:	0013883a 	mov	r9,zero
 40482f0:	0027883a 	mov	r19,zero
 40482f4:	dd401a04 	addi	r21,sp,104
 40482f8:	4825883a 	mov	r18,r9
 40482fc:	4cc0010e 	bge	r9,r19,4048304 <___vfiprintf_internal_r+0x40c>
 4048300:	9825883a 	mov	r18,r19
 4048304:	e7003fcc 	andi	fp,fp,255
 4048308:	e700201c 	xori	fp,fp,128
 404830c:	e73fe004 	addi	fp,fp,-128
 4048310:	e0000126 	beq	fp,zero,4048318 <___vfiprintf_internal_r+0x420>
 4048314:	94800044 	addi	r18,r18,1
 4048318:	a380008c 	andi	r14,r20,2
 404831c:	70000126 	beq	r14,zero,4048324 <___vfiprintf_internal_r+0x42c>
 4048320:	94800084 	addi	r18,r18,2
 4048324:	a700210c 	andi	fp,r20,132
 4048328:	e001df1e 	bne	fp,zero,4048aa8 <___vfiprintf_internal_r+0xbb0>
 404832c:	8c87c83a 	sub	r3,r17,r18
 4048330:	00c1dd0e 	bge	zero,r3,4048aa8 <___vfiprintf_internal_r+0xbb0>
 4048334:	01c00404 	movi	r7,16
 4048338:	d8801c17 	ldw	r2,112(sp)
 404833c:	38c3ad0e 	bge	r7,r3,40491f4 <___vfiprintf_internal_r+0x12fc>
 4048340:	02810174 	movhi	r10,1029
 4048344:	52811e04 	addi	r10,r10,1144
 4048348:	dc002915 	stw	r16,164(sp)
 404834c:	d9801b17 	ldw	r6,108(sp)
 4048350:	da802415 	stw	r10,144(sp)
 4048354:	03c001c4 	movi	r15,7
 4048358:	da402515 	stw	r9,148(sp)
 404835c:	db802815 	stw	r14,160(sp)
 4048360:	1821883a 	mov	r16,r3
 4048364:	00000506 	br	404837c <___vfiprintf_internal_r+0x484>
 4048368:	31400084 	addi	r5,r6,2
 404836c:	42000204 	addi	r8,r8,8
 4048370:	200d883a 	mov	r6,r4
 4048374:	843ffc04 	addi	r16,r16,-16
 4048378:	3c000d0e 	bge	r7,r16,40483b0 <___vfiprintf_internal_r+0x4b8>
 404837c:	10800404 	addi	r2,r2,16
 4048380:	31000044 	addi	r4,r6,1
 4048384:	45800015 	stw	r22,0(r8)
 4048388:	41c00115 	stw	r7,4(r8)
 404838c:	d8801c15 	stw	r2,112(sp)
 4048390:	d9001b15 	stw	r4,108(sp)
 4048394:	793ff40e 	bge	r15,r4,4048368 <__alt_data_end+0xfffddb68>
 4048398:	1001b51e 	bne	r2,zero,4048a70 <___vfiprintf_internal_r+0xb78>
 404839c:	843ffc04 	addi	r16,r16,-16
 40483a0:	000d883a 	mov	r6,zero
 40483a4:	01400044 	movi	r5,1
 40483a8:	d811883a 	mov	r8,sp
 40483ac:	3c3ff316 	blt	r7,r16,404837c <__alt_data_end+0xfffddb7c>
 40483b0:	8007883a 	mov	r3,r16
 40483b4:	da402517 	ldw	r9,148(sp)
 40483b8:	db802817 	ldw	r14,160(sp)
 40483bc:	dc002917 	ldw	r16,164(sp)
 40483c0:	da802417 	ldw	r10,144(sp)
 40483c4:	1885883a 	add	r2,r3,r2
 40483c8:	40c00115 	stw	r3,4(r8)
 40483cc:	42800015 	stw	r10,0(r8)
 40483d0:	d8801c15 	stw	r2,112(sp)
 40483d4:	d9401b15 	stw	r5,108(sp)
 40483d8:	00c001c4 	movi	r3,7
 40483dc:	19426016 	blt	r3,r5,4048d60 <___vfiprintf_internal_r+0xe68>
 40483e0:	d8c01d87 	ldb	r3,118(sp)
 40483e4:	42000204 	addi	r8,r8,8
 40483e8:	29000044 	addi	r4,r5,1
 40483ec:	1801b31e 	bne	r3,zero,4048abc <___vfiprintf_internal_r+0xbc4>
 40483f0:	7001c026 	beq	r14,zero,4048af4 <___vfiprintf_internal_r+0xbfc>
 40483f4:	d8c01d04 	addi	r3,sp,116
 40483f8:	10800084 	addi	r2,r2,2
 40483fc:	40c00015 	stw	r3,0(r8)
 4048400:	00c00084 	movi	r3,2
 4048404:	40c00115 	stw	r3,4(r8)
 4048408:	d8801c15 	stw	r2,112(sp)
 404840c:	d9001b15 	stw	r4,108(sp)
 4048410:	00c001c4 	movi	r3,7
 4048414:	1902650e 	bge	r3,r4,4048dac <___vfiprintf_internal_r+0xeb4>
 4048418:	10029a1e 	bne	r2,zero,4048e84 <___vfiprintf_internal_r+0xf8c>
 404841c:	00c02004 	movi	r3,128
 4048420:	01000044 	movi	r4,1
 4048424:	000b883a 	mov	r5,zero
 4048428:	d811883a 	mov	r8,sp
 404842c:	e0c1b31e 	bne	fp,r3,4048afc <___vfiprintf_internal_r+0xc04>
 4048430:	8cb9c83a 	sub	fp,r17,r18
 4048434:	0701b10e 	bge	zero,fp,4048afc <___vfiprintf_internal_r+0xc04>
 4048438:	01c00404 	movi	r7,16
 404843c:	3f03890e 	bge	r7,fp,4049264 <___vfiprintf_internal_r+0x136c>
 4048440:	00c10174 	movhi	r3,1029
 4048444:	18c11a04 	addi	r3,r3,1128
 4048448:	d8c02415 	stw	r3,144(sp)
 404844c:	8007883a 	mov	r3,r16
 4048450:	034001c4 	movi	r13,7
 4048454:	e021883a 	mov	r16,fp
 4048458:	da402515 	stw	r9,148(sp)
 404845c:	1839883a 	mov	fp,r3
 4048460:	00000506 	br	4048478 <___vfiprintf_internal_r+0x580>
 4048464:	29800084 	addi	r6,r5,2
 4048468:	42000204 	addi	r8,r8,8
 404846c:	180b883a 	mov	r5,r3
 4048470:	843ffc04 	addi	r16,r16,-16
 4048474:	3c000d0e 	bge	r7,r16,40484ac <___vfiprintf_internal_r+0x5b4>
 4048478:	10800404 	addi	r2,r2,16
 404847c:	28c00044 	addi	r3,r5,1
 4048480:	45c00015 	stw	r23,0(r8)
 4048484:	41c00115 	stw	r7,4(r8)
 4048488:	d8801c15 	stw	r2,112(sp)
 404848c:	d8c01b15 	stw	r3,108(sp)
 4048490:	68fff40e 	bge	r13,r3,4048464 <__alt_data_end+0xfffddc64>
 4048494:	1002241e 	bne	r2,zero,4048d28 <___vfiprintf_internal_r+0xe30>
 4048498:	843ffc04 	addi	r16,r16,-16
 404849c:	01800044 	movi	r6,1
 40484a0:	000b883a 	mov	r5,zero
 40484a4:	d811883a 	mov	r8,sp
 40484a8:	3c3ff316 	blt	r7,r16,4048478 <__alt_data_end+0xfffddc78>
 40484ac:	da402517 	ldw	r9,148(sp)
 40484b0:	e007883a 	mov	r3,fp
 40484b4:	8039883a 	mov	fp,r16
 40484b8:	1821883a 	mov	r16,r3
 40484bc:	d8c02417 	ldw	r3,144(sp)
 40484c0:	1705883a 	add	r2,r2,fp
 40484c4:	47000115 	stw	fp,4(r8)
 40484c8:	40c00015 	stw	r3,0(r8)
 40484cc:	d8801c15 	stw	r2,112(sp)
 40484d0:	d9801b15 	stw	r6,108(sp)
 40484d4:	00c001c4 	movi	r3,7
 40484d8:	19827616 	blt	r3,r6,4048eb4 <___vfiprintf_internal_r+0xfbc>
 40484dc:	4cf9c83a 	sub	fp,r9,r19
 40484e0:	42000204 	addi	r8,r8,8
 40484e4:	31000044 	addi	r4,r6,1
 40484e8:	300b883a 	mov	r5,r6
 40484ec:	07018516 	blt	zero,fp,4048b04 <___vfiprintf_internal_r+0xc0c>
 40484f0:	9885883a 	add	r2,r19,r2
 40484f4:	45400015 	stw	r21,0(r8)
 40484f8:	44c00115 	stw	r19,4(r8)
 40484fc:	d8801c15 	stw	r2,112(sp)
 4048500:	d9001b15 	stw	r4,108(sp)
 4048504:	00c001c4 	movi	r3,7
 4048508:	1901dd0e 	bge	r3,r4,4048c80 <___vfiprintf_internal_r+0xd88>
 404850c:	1002401e 	bne	r2,zero,4048e10 <___vfiprintf_internal_r+0xf18>
 4048510:	d8001b15 	stw	zero,108(sp)
 4048514:	a2c0010c 	andi	r11,r20,4
 4048518:	58000226 	beq	r11,zero,4048524 <___vfiprintf_internal_r+0x62c>
 404851c:	8ca7c83a 	sub	r19,r17,r18
 4048520:	04c2f216 	blt	zero,r19,40490ec <___vfiprintf_internal_r+0x11f4>
 4048524:	8c80010e 	bge	r17,r18,404852c <___vfiprintf_internal_r+0x634>
 4048528:	9023883a 	mov	r17,r18
 404852c:	da802317 	ldw	r10,140(sp)
 4048530:	5455883a 	add	r10,r10,r17
 4048534:	da802315 	stw	r10,140(sp)
 4048538:	d8001b15 	stw	zero,108(sp)
 404853c:	d811883a 	mov	r8,sp
 4048540:	003ea206 	br	4047fcc <__alt_data_end+0xfffdd7cc>
 4048544:	a5000814 	ori	r20,r20,32
 4048548:	80c00007 	ldb	r3,0(r16)
 404854c:	003ec906 	br	4048074 <__alt_data_end+0xfffdd874>
 4048550:	80c00007 	ldb	r3,0(r16)
 4048554:	1b030926 	beq	r3,r12,404917c <___vfiprintf_internal_r+0x1284>
 4048558:	a5000414 	ori	r20,r20,16
 404855c:	003ec506 	br	4048074 <__alt_data_end+0xfffdd874>
 4048560:	21003fcc 	andi	r4,r4,255
 4048564:	20035e1e 	bne	r4,zero,40492e0 <___vfiprintf_internal_r+0x13e8>
 4048568:	a080080c 	andi	r2,r20,32
 404856c:	1002a526 	beq	r2,zero,4049004 <___vfiprintf_internal_r+0x110c>
 4048570:	da802217 	ldw	r10,136(sp)
 4048574:	50800017 	ldw	r2,0(r10)
 4048578:	da802317 	ldw	r10,140(sp)
 404857c:	5007d7fa 	srai	r3,r10,31
 4048580:	da802217 	ldw	r10,136(sp)
 4048584:	10c00115 	stw	r3,4(r2)
 4048588:	52800104 	addi	r10,r10,4
 404858c:	da802215 	stw	r10,136(sp)
 4048590:	da802317 	ldw	r10,140(sp)
 4048594:	12800015 	stw	r10,0(r2)
 4048598:	003e8c06 	br	4047fcc <__alt_data_end+0xfffdd7cc>
 404859c:	21003fcc 	andi	r4,r4,255
 40485a0:	2003511e 	bne	r4,zero,40492e8 <___vfiprintf_internal_r+0x13f0>
 40485a4:	a080080c 	andi	r2,r20,32
 40485a8:	1000a126 	beq	r2,zero,4048830 <___vfiprintf_internal_r+0x938>
 40485ac:	da802217 	ldw	r10,136(sp)
 40485b0:	d8001d85 	stb	zero,118(sp)
 40485b4:	50800204 	addi	r2,r10,8
 40485b8:	54800017 	ldw	r18,0(r10)
 40485bc:	54c00117 	ldw	r19,4(r10)
 40485c0:	4802b416 	blt	r9,zero,4049094 <___vfiprintf_internal_r+0x119c>
 40485c4:	013fdfc4 	movi	r4,-129
 40485c8:	94c6b03a 	or	r3,r18,r19
 40485cc:	d8802215 	stw	r2,136(sp)
 40485d0:	a128703a 	and	r20,r20,r4
 40485d4:	1800a226 	beq	r3,zero,4048860 <___vfiprintf_internal_r+0x968>
 40485d8:	0039883a 	mov	fp,zero
 40485dc:	dd401a04 	addi	r21,sp,104
 40485e0:	9006d0fa 	srli	r3,r18,3
 40485e4:	9808977a 	slli	r4,r19,29
 40485e8:	9826d0fa 	srli	r19,r19,3
 40485ec:	948001cc 	andi	r18,r18,7
 40485f0:	90800c04 	addi	r2,r18,48
 40485f4:	ad7fffc4 	addi	r21,r21,-1
 40485f8:	20e4b03a 	or	r18,r4,r3
 40485fc:	a8800005 	stb	r2,0(r21)
 4048600:	94c6b03a 	or	r3,r18,r19
 4048604:	183ff61e 	bne	r3,zero,40485e0 <__alt_data_end+0xfffddde0>
 4048608:	a0c0004c 	andi	r3,r20,1
 404860c:	18005926 	beq	r3,zero,4048774 <___vfiprintf_internal_r+0x87c>
 4048610:	10803fcc 	andi	r2,r2,255
 4048614:	1080201c 	xori	r2,r2,128
 4048618:	10bfe004 	addi	r2,r2,-128
 404861c:	00c00c04 	movi	r3,48
 4048620:	10c05426 	beq	r2,r3,4048774 <___vfiprintf_internal_r+0x87c>
 4048624:	da801e17 	ldw	r10,120(sp)
 4048628:	a8bfffc4 	addi	r2,r21,-1
 404862c:	a8ffffc5 	stb	r3,-1(r21)
 4048630:	50a7c83a 	sub	r19,r10,r2
 4048634:	102b883a 	mov	r21,r2
 4048638:	003f2f06 	br	40482f8 <__alt_data_end+0xfffddaf8>
 404863c:	21003fcc 	andi	r4,r4,255
 4048640:	2003421e 	bne	r4,zero,404934c <___vfiprintf_internal_r+0x1454>
 4048644:	00810174 	movhi	r2,1029
 4048648:	1080b904 	addi	r2,r2,740
 404864c:	d8802615 	stw	r2,152(sp)
 4048650:	a080080c 	andi	r2,r20,32
 4048654:	1000aa26 	beq	r2,zero,4048900 <___vfiprintf_internal_r+0xa08>
 4048658:	da802217 	ldw	r10,136(sp)
 404865c:	54800017 	ldw	r18,0(r10)
 4048660:	54c00117 	ldw	r19,4(r10)
 4048664:	52800204 	addi	r10,r10,8
 4048668:	da802215 	stw	r10,136(sp)
 404866c:	a080004c 	andi	r2,r20,1
 4048670:	1001d226 	beq	r2,zero,4048dbc <___vfiprintf_internal_r+0xec4>
 4048674:	94c4b03a 	or	r2,r18,r19
 4048678:	1002351e 	bne	r2,zero,4048f50 <___vfiprintf_internal_r+0x1058>
 404867c:	d8001d85 	stb	zero,118(sp)
 4048680:	48022216 	blt	r9,zero,4048f0c <___vfiprintf_internal_r+0x1014>
 4048684:	00bfdfc4 	movi	r2,-129
 4048688:	a0a8703a 	and	r20,r20,r2
 404868c:	003f1506 	br	40482e4 <__alt_data_end+0xfffddae4>
 4048690:	da802217 	ldw	r10,136(sp)
 4048694:	04800044 	movi	r18,1
 4048698:	d8001d85 	stb	zero,118(sp)
 404869c:	50800017 	ldw	r2,0(r10)
 40486a0:	52800104 	addi	r10,r10,4
 40486a4:	da802215 	stw	r10,136(sp)
 40486a8:	d8801005 	stb	r2,64(sp)
 40486ac:	9027883a 	mov	r19,r18
 40486b0:	dd401004 	addi	r21,sp,64
 40486b4:	0013883a 	mov	r9,zero
 40486b8:	003f1706 	br	4048318 <__alt_data_end+0xfffddb18>
 40486bc:	21003fcc 	andi	r4,r4,255
 40486c0:	2003201e 	bne	r4,zero,4049344 <___vfiprintf_internal_r+0x144c>
 40486c4:	a080080c 	andi	r2,r20,32
 40486c8:	10004b26 	beq	r2,zero,40487f8 <___vfiprintf_internal_r+0x900>
 40486cc:	da802217 	ldw	r10,136(sp)
 40486d0:	50800117 	ldw	r2,4(r10)
 40486d4:	54800017 	ldw	r18,0(r10)
 40486d8:	52800204 	addi	r10,r10,8
 40486dc:	da802215 	stw	r10,136(sp)
 40486e0:	1027883a 	mov	r19,r2
 40486e4:	10022c16 	blt	r2,zero,4048f98 <___vfiprintf_internal_r+0x10a0>
 40486e8:	df001d83 	ldbu	fp,118(sp)
 40486ec:	48007216 	blt	r9,zero,40488b8 <___vfiprintf_internal_r+0x9c0>
 40486f0:	00ffdfc4 	movi	r3,-129
 40486f4:	94c4b03a 	or	r2,r18,r19
 40486f8:	a0e8703a 	and	r20,r20,r3
 40486fc:	1000cc26 	beq	r2,zero,4048a30 <___vfiprintf_internal_r+0xb38>
 4048700:	98021026 	beq	r19,zero,4048f44 <___vfiprintf_internal_r+0x104c>
 4048704:	dc402415 	stw	r17,144(sp)
 4048708:	dc002515 	stw	r16,148(sp)
 404870c:	9823883a 	mov	r17,r19
 4048710:	9021883a 	mov	r16,r18
 4048714:	dd401a04 	addi	r21,sp,104
 4048718:	4825883a 	mov	r18,r9
 404871c:	4027883a 	mov	r19,r8
 4048720:	8009883a 	mov	r4,r16
 4048724:	880b883a 	mov	r5,r17
 4048728:	01800284 	movi	r6,10
 404872c:	000f883a 	mov	r7,zero
 4048730:	404a2d80 	call	404a2d8 <__umoddi3>
 4048734:	10800c04 	addi	r2,r2,48
 4048738:	ad7fffc4 	addi	r21,r21,-1
 404873c:	8009883a 	mov	r4,r16
 4048740:	880b883a 	mov	r5,r17
 4048744:	a8800005 	stb	r2,0(r21)
 4048748:	01800284 	movi	r6,10
 404874c:	000f883a 	mov	r7,zero
 4048750:	4049d600 	call	4049d60 <__udivdi3>
 4048754:	1021883a 	mov	r16,r2
 4048758:	10c4b03a 	or	r2,r2,r3
 404875c:	1823883a 	mov	r17,r3
 4048760:	103fef1e 	bne	r2,zero,4048720 <__alt_data_end+0xfffddf20>
 4048764:	dc402417 	ldw	r17,144(sp)
 4048768:	dc002517 	ldw	r16,148(sp)
 404876c:	9013883a 	mov	r9,r18
 4048770:	9811883a 	mov	r8,r19
 4048774:	da801e17 	ldw	r10,120(sp)
 4048778:	5567c83a 	sub	r19,r10,r21
 404877c:	003ede06 	br	40482f8 <__alt_data_end+0xfffddaf8>
 4048780:	38803fcc 	andi	r2,r7,255
 4048784:	1080201c 	xori	r2,r2,128
 4048788:	10bfe004 	addi	r2,r2,-128
 404878c:	1002371e 	bne	r2,zero,404906c <___vfiprintf_internal_r+0x1174>
 4048790:	01000044 	movi	r4,1
 4048794:	01c00804 	movi	r7,32
 4048798:	80c00007 	ldb	r3,0(r16)
 404879c:	003e3506 	br	4048074 <__alt_data_end+0xfffdd874>
 40487a0:	a5000054 	ori	r20,r20,1
 40487a4:	80c00007 	ldb	r3,0(r16)
 40487a8:	003e3206 	br	4048074 <__alt_data_end+0xfffdd874>
 40487ac:	a5002014 	ori	r20,r20,128
 40487b0:	80c00007 	ldb	r3,0(r16)
 40487b4:	003e2f06 	br	4048074 <__alt_data_end+0xfffdd874>
 40487b8:	8015883a 	mov	r10,r16
 40487bc:	0023883a 	mov	r17,zero
 40487c0:	18bff404 	addi	r2,r3,-48
 40487c4:	50c00007 	ldb	r3,0(r10)
 40487c8:	8c4002a4 	muli	r17,r17,10
 40487cc:	84000044 	addi	r16,r16,1
 40487d0:	8015883a 	mov	r10,r16
 40487d4:	1463883a 	add	r17,r2,r17
 40487d8:	18bff404 	addi	r2,r3,-48
 40487dc:	30bff92e 	bgeu	r6,r2,40487c4 <__alt_data_end+0xfffddfc4>
 40487e0:	003e2506 	br	4048078 <__alt_data_end+0xfffdd878>
 40487e4:	21003fcc 	andi	r4,r4,255
 40487e8:	2002d41e 	bne	r4,zero,404933c <___vfiprintf_internal_r+0x1444>
 40487ec:	a5000414 	ori	r20,r20,16
 40487f0:	a080080c 	andi	r2,r20,32
 40487f4:	103fb51e 	bne	r2,zero,40486cc <__alt_data_end+0xfffddecc>
 40487f8:	a080040c 	andi	r2,r20,16
 40487fc:	1001f826 	beq	r2,zero,4048fe0 <___vfiprintf_internal_r+0x10e8>
 4048800:	da802217 	ldw	r10,136(sp)
 4048804:	54800017 	ldw	r18,0(r10)
 4048808:	52800104 	addi	r10,r10,4
 404880c:	da802215 	stw	r10,136(sp)
 4048810:	9027d7fa 	srai	r19,r18,31
 4048814:	9805883a 	mov	r2,r19
 4048818:	003fb206 	br	40486e4 <__alt_data_end+0xfffddee4>
 404881c:	21003fcc 	andi	r4,r4,255
 4048820:	2002c41e 	bne	r4,zero,4049334 <___vfiprintf_internal_r+0x143c>
 4048824:	a5000414 	ori	r20,r20,16
 4048828:	a080080c 	andi	r2,r20,32
 404882c:	103f5f1e 	bne	r2,zero,40485ac <__alt_data_end+0xfffdddac>
 4048830:	a080040c 	andi	r2,r20,16
 4048834:	10020f26 	beq	r2,zero,4049074 <___vfiprintf_internal_r+0x117c>
 4048838:	da802217 	ldw	r10,136(sp)
 404883c:	d8001d85 	stb	zero,118(sp)
 4048840:	0027883a 	mov	r19,zero
 4048844:	50800104 	addi	r2,r10,4
 4048848:	54800017 	ldw	r18,0(r10)
 404884c:	48021116 	blt	r9,zero,4049094 <___vfiprintf_internal_r+0x119c>
 4048850:	00ffdfc4 	movi	r3,-129
 4048854:	d8802215 	stw	r2,136(sp)
 4048858:	a0e8703a 	and	r20,r20,r3
 404885c:	903f5e1e 	bne	r18,zero,40485d8 <__alt_data_end+0xfffdddd8>
 4048860:	0039883a 	mov	fp,zero
 4048864:	4802a626 	beq	r9,zero,4049300 <___vfiprintf_internal_r+0x1408>
 4048868:	0025883a 	mov	r18,zero
 404886c:	0027883a 	mov	r19,zero
 4048870:	003f5a06 	br	40485dc <__alt_data_end+0xfffddddc>
 4048874:	21003fcc 	andi	r4,r4,255
 4048878:	20029f1e 	bne	r4,zero,40492f8 <___vfiprintf_internal_r+0x1400>
 404887c:	a5000414 	ori	r20,r20,16
 4048880:	a080080c 	andi	r2,r20,32
 4048884:	10005e1e 	bne	r2,zero,4048a00 <___vfiprintf_internal_r+0xb08>
 4048888:	a080040c 	andi	r2,r20,16
 404888c:	1001a21e 	bne	r2,zero,4048f18 <___vfiprintf_internal_r+0x1020>
 4048890:	a080100c 	andi	r2,r20,64
 4048894:	d8001d85 	stb	zero,118(sp)
 4048898:	da802217 	ldw	r10,136(sp)
 404889c:	1002231e 	bne	r2,zero,404912c <___vfiprintf_internal_r+0x1234>
 40488a0:	50800104 	addi	r2,r10,4
 40488a4:	54800017 	ldw	r18,0(r10)
 40488a8:	0027883a 	mov	r19,zero
 40488ac:	4801a00e 	bge	r9,zero,4048f30 <___vfiprintf_internal_r+0x1038>
 40488b0:	d8802215 	stw	r2,136(sp)
 40488b4:	0039883a 	mov	fp,zero
 40488b8:	94c4b03a 	or	r2,r18,r19
 40488bc:	103f901e 	bne	r2,zero,4048700 <__alt_data_end+0xfffddf00>
 40488c0:	00800044 	movi	r2,1
 40488c4:	10803fcc 	andi	r2,r2,255
 40488c8:	00c00044 	movi	r3,1
 40488cc:	10c05926 	beq	r2,r3,4048a34 <___vfiprintf_internal_r+0xb3c>
 40488d0:	00c00084 	movi	r3,2
 40488d4:	10ffe41e 	bne	r2,r3,4048868 <__alt_data_end+0xfffde068>
 40488d8:	0025883a 	mov	r18,zero
 40488dc:	0027883a 	mov	r19,zero
 40488e0:	00013d06 	br	4048dd8 <___vfiprintf_internal_r+0xee0>
 40488e4:	21003fcc 	andi	r4,r4,255
 40488e8:	2002811e 	bne	r4,zero,40492f0 <___vfiprintf_internal_r+0x13f8>
 40488ec:	00810174 	movhi	r2,1029
 40488f0:	1080b404 	addi	r2,r2,720
 40488f4:	d8802615 	stw	r2,152(sp)
 40488f8:	a080080c 	andi	r2,r20,32
 40488fc:	103f561e 	bne	r2,zero,4048658 <__alt_data_end+0xfffdde58>
 4048900:	a080040c 	andi	r2,r20,16
 4048904:	1001d126 	beq	r2,zero,404904c <___vfiprintf_internal_r+0x1154>
 4048908:	da802217 	ldw	r10,136(sp)
 404890c:	0027883a 	mov	r19,zero
 4048910:	54800017 	ldw	r18,0(r10)
 4048914:	52800104 	addi	r10,r10,4
 4048918:	da802215 	stw	r10,136(sp)
 404891c:	003f5306 	br	404866c <__alt_data_end+0xfffdde6c>
 4048920:	da802217 	ldw	r10,136(sp)
 4048924:	d8001d85 	stb	zero,118(sp)
 4048928:	55400017 	ldw	r21,0(r10)
 404892c:	50c00104 	addi	r3,r10,4
 4048930:	a8024226 	beq	r21,zero,404923c <___vfiprintf_internal_r+0x1344>
 4048934:	48021816 	blt	r9,zero,4049198 <___vfiprintf_internal_r+0x12a0>
 4048938:	480d883a 	mov	r6,r9
 404893c:	000b883a 	mov	r5,zero
 4048940:	a809883a 	mov	r4,r21
 4048944:	d8c02a15 	stw	r3,168(sp)
 4048948:	da002b15 	stw	r8,172(sp)
 404894c:	da402c15 	stw	r9,176(sp)
 4048950:	40460f40 	call	40460f4 <memchr>
 4048954:	d8c02a17 	ldw	r3,168(sp)
 4048958:	da002b17 	ldw	r8,172(sp)
 404895c:	da402c17 	ldw	r9,176(sp)
 4048960:	10024826 	beq	r2,zero,4049284 <___vfiprintf_internal_r+0x138c>
 4048964:	1567c83a 	sub	r19,r2,r21
 4048968:	df001d83 	ldbu	fp,118(sp)
 404896c:	d8c02215 	stw	r3,136(sp)
 4048970:	0013883a 	mov	r9,zero
 4048974:	003e6006 	br	40482f8 <__alt_data_end+0xfffddaf8>
 4048978:	21003fcc 	andi	r4,r4,255
 404897c:	203fc026 	beq	r4,zero,4048880 <__alt_data_end+0xfffde080>
 4048980:	d9c01d85 	stb	r7,118(sp)
 4048984:	003fbe06 	br	4048880 <__alt_data_end+0xfffde080>
 4048988:	da802217 	ldw	r10,136(sp)
 404898c:	54400017 	ldw	r17,0(r10)
 4048990:	50800104 	addi	r2,r10,4
 4048994:	883e3b16 	blt	r17,zero,4048284 <__alt_data_end+0xfffdda84>
 4048998:	d8802215 	stw	r2,136(sp)
 404899c:	80c00007 	ldb	r3,0(r16)
 40489a0:	003db406 	br	4048074 <__alt_data_end+0xfffdd874>
 40489a4:	01000044 	movi	r4,1
 40489a8:	01c00ac4 	movi	r7,43
 40489ac:	80c00007 	ldb	r3,0(r16)
 40489b0:	003db006 	br	4048074 <__alt_data_end+0xfffdd874>
 40489b4:	80c00007 	ldb	r3,0(r16)
 40489b8:	82800044 	addi	r10,r16,1
 40489bc:	1b423c26 	beq	r3,r13,40492b0 <___vfiprintf_internal_r+0x13b8>
 40489c0:	18bff404 	addi	r2,r3,-48
 40489c4:	0013883a 	mov	r9,zero
 40489c8:	30822b36 	bltu	r6,r2,4049278 <___vfiprintf_internal_r+0x1380>
 40489cc:	50c00007 	ldb	r3,0(r10)
 40489d0:	4a4002a4 	muli	r9,r9,10
 40489d4:	54000044 	addi	r16,r10,1
 40489d8:	8015883a 	mov	r10,r16
 40489dc:	4893883a 	add	r9,r9,r2
 40489e0:	18bff404 	addi	r2,r3,-48
 40489e4:	30bff92e 	bgeu	r6,r2,40489cc <__alt_data_end+0xfffde1cc>
 40489e8:	483da30e 	bge	r9,zero,4048078 <__alt_data_end+0xfffdd878>
 40489ec:	027fffc4 	movi	r9,-1
 40489f0:	003da106 	br	4048078 <__alt_data_end+0xfffdd878>
 40489f4:	a5001014 	ori	r20,r20,64
 40489f8:	80c00007 	ldb	r3,0(r16)
 40489fc:	003d9d06 	br	4048074 <__alt_data_end+0xfffdd874>
 4048a00:	da802217 	ldw	r10,136(sp)
 4048a04:	d8001d85 	stb	zero,118(sp)
 4048a08:	50c00204 	addi	r3,r10,8
 4048a0c:	54800017 	ldw	r18,0(r10)
 4048a10:	54c00117 	ldw	r19,4(r10)
 4048a14:	4801ca16 	blt	r9,zero,4049140 <___vfiprintf_internal_r+0x1248>
 4048a18:	013fdfc4 	movi	r4,-129
 4048a1c:	94c4b03a 	or	r2,r18,r19
 4048a20:	d8c02215 	stw	r3,136(sp)
 4048a24:	a128703a 	and	r20,r20,r4
 4048a28:	0039883a 	mov	fp,zero
 4048a2c:	103f341e 	bne	r2,zero,4048700 <__alt_data_end+0xfffddf00>
 4048a30:	483e2e26 	beq	r9,zero,40482ec <__alt_data_end+0xfffddaec>
 4048a34:	0025883a 	mov	r18,zero
 4048a38:	94800c04 	addi	r18,r18,48
 4048a3c:	dc8019c5 	stb	r18,103(sp)
 4048a40:	dcc02717 	ldw	r19,156(sp)
 4048a44:	dd4019c4 	addi	r21,sp,103
 4048a48:	003e2b06 	br	40482f8 <__alt_data_end+0xfffddaf8>
 4048a4c:	21003fcc 	andi	r4,r4,255
 4048a50:	2002361e 	bne	r4,zero,404932c <___vfiprintf_internal_r+0x1434>
 4048a54:	1801c126 	beq	r3,zero,404915c <___vfiprintf_internal_r+0x1264>
 4048a58:	04800044 	movi	r18,1
 4048a5c:	d8c01005 	stb	r3,64(sp)
 4048a60:	d8001d85 	stb	zero,118(sp)
 4048a64:	9027883a 	mov	r19,r18
 4048a68:	dd401004 	addi	r21,sp,64
 4048a6c:	003f1106 	br	40486b4 <__alt_data_end+0xfffddeb4>
 4048a70:	d9402117 	ldw	r5,132(sp)
 4048a74:	d9002017 	ldw	r4,128(sp)
 4048a78:	d9801a04 	addi	r6,sp,104
 4048a7c:	d9c02b15 	stw	r7,172(sp)
 4048a80:	dbc02a15 	stw	r15,168(sp)
 4048a84:	4047de40 	call	4047de4 <__sprint_r.part.0>
 4048a88:	d9c02b17 	ldw	r7,172(sp)
 4048a8c:	dbc02a17 	ldw	r15,168(sp)
 4048a90:	10006d1e 	bne	r2,zero,4048c48 <___vfiprintf_internal_r+0xd50>
 4048a94:	d9801b17 	ldw	r6,108(sp)
 4048a98:	d8801c17 	ldw	r2,112(sp)
 4048a9c:	d811883a 	mov	r8,sp
 4048aa0:	31400044 	addi	r5,r6,1
 4048aa4:	003e3306 	br	4048374 <__alt_data_end+0xfffddb74>
 4048aa8:	d9401b17 	ldw	r5,108(sp)
 4048aac:	d8801c17 	ldw	r2,112(sp)
 4048ab0:	29000044 	addi	r4,r5,1
 4048ab4:	d8c01d87 	ldb	r3,118(sp)
 4048ab8:	183e4d26 	beq	r3,zero,40483f0 <__alt_data_end+0xfffddbf0>
 4048abc:	00c00044 	movi	r3,1
 4048ac0:	d9401d84 	addi	r5,sp,118
 4048ac4:	10c5883a 	add	r2,r2,r3
 4048ac8:	41400015 	stw	r5,0(r8)
 4048acc:	40c00115 	stw	r3,4(r8)
 4048ad0:	d8801c15 	stw	r2,112(sp)
 4048ad4:	d9001b15 	stw	r4,108(sp)
 4048ad8:	014001c4 	movi	r5,7
 4048adc:	2900a90e 	bge	r5,r4,4048d84 <___vfiprintf_internal_r+0xe8c>
 4048ae0:	1000da1e 	bne	r2,zero,4048e4c <___vfiprintf_internal_r+0xf54>
 4048ae4:	7000ab1e 	bne	r14,zero,4048d94 <___vfiprintf_internal_r+0xe9c>
 4048ae8:	000b883a 	mov	r5,zero
 4048aec:	1809883a 	mov	r4,r3
 4048af0:	d811883a 	mov	r8,sp
 4048af4:	00c02004 	movi	r3,128
 4048af8:	e0fe4d26 	beq	fp,r3,4048430 <__alt_data_end+0xfffddc30>
 4048afc:	4cf9c83a 	sub	fp,r9,r19
 4048b00:	073e7b0e 	bge	zero,fp,40484f0 <__alt_data_end+0xfffddcf0>
 4048b04:	01c00404 	movi	r7,16
 4048b08:	3f01900e 	bge	r7,fp,404914c <___vfiprintf_internal_r+0x1254>
 4048b0c:	00c10174 	movhi	r3,1029
 4048b10:	18c11a04 	addi	r3,r3,1128
 4048b14:	d8c02415 	stw	r3,144(sp)
 4048b18:	034001c4 	movi	r13,7
 4048b1c:	00000506 	br	4048b34 <___vfiprintf_internal_r+0xc3c>
 4048b20:	29000084 	addi	r4,r5,2
 4048b24:	42000204 	addi	r8,r8,8
 4048b28:	180b883a 	mov	r5,r3
 4048b2c:	e73ffc04 	addi	fp,fp,-16
 4048b30:	3f000d0e 	bge	r7,fp,4048b68 <___vfiprintf_internal_r+0xc70>
 4048b34:	10800404 	addi	r2,r2,16
 4048b38:	28c00044 	addi	r3,r5,1
 4048b3c:	45c00015 	stw	r23,0(r8)
 4048b40:	41c00115 	stw	r7,4(r8)
 4048b44:	d8801c15 	stw	r2,112(sp)
 4048b48:	d8c01b15 	stw	r3,108(sp)
 4048b4c:	68fff40e 	bge	r13,r3,4048b20 <__alt_data_end+0xfffde320>
 4048b50:	1000101e 	bne	r2,zero,4048b94 <___vfiprintf_internal_r+0xc9c>
 4048b54:	e73ffc04 	addi	fp,fp,-16
 4048b58:	01000044 	movi	r4,1
 4048b5c:	000b883a 	mov	r5,zero
 4048b60:	d811883a 	mov	r8,sp
 4048b64:	3f3ff316 	blt	r7,fp,4048b34 <__alt_data_end+0xfffde334>
 4048b68:	da802417 	ldw	r10,144(sp)
 4048b6c:	1705883a 	add	r2,r2,fp
 4048b70:	47000115 	stw	fp,4(r8)
 4048b74:	42800015 	stw	r10,0(r8)
 4048b78:	d8801c15 	stw	r2,112(sp)
 4048b7c:	d9001b15 	stw	r4,108(sp)
 4048b80:	00c001c4 	movi	r3,7
 4048b84:	19003616 	blt	r3,r4,4048c60 <___vfiprintf_internal_r+0xd68>
 4048b88:	42000204 	addi	r8,r8,8
 4048b8c:	21000044 	addi	r4,r4,1
 4048b90:	003e5706 	br	40484f0 <__alt_data_end+0xfffddcf0>
 4048b94:	d9402117 	ldw	r5,132(sp)
 4048b98:	d9002017 	ldw	r4,128(sp)
 4048b9c:	d9801a04 	addi	r6,sp,104
 4048ba0:	d9c02b15 	stw	r7,172(sp)
 4048ba4:	db402a15 	stw	r13,168(sp)
 4048ba8:	4047de40 	call	4047de4 <__sprint_r.part.0>
 4048bac:	d9c02b17 	ldw	r7,172(sp)
 4048bb0:	db402a17 	ldw	r13,168(sp)
 4048bb4:	1000241e 	bne	r2,zero,4048c48 <___vfiprintf_internal_r+0xd50>
 4048bb8:	d9401b17 	ldw	r5,108(sp)
 4048bbc:	d8801c17 	ldw	r2,112(sp)
 4048bc0:	d811883a 	mov	r8,sp
 4048bc4:	29000044 	addi	r4,r5,1
 4048bc8:	003fd806 	br	4048b2c <__alt_data_end+0xfffde32c>
 4048bcc:	d9401b17 	ldw	r5,108(sp)
 4048bd0:	00c10174 	movhi	r3,1029
 4048bd4:	18c11e04 	addi	r3,r3,1144
 4048bd8:	d8c02415 	stw	r3,144(sp)
 4048bdc:	29400044 	addi	r5,r5,1
 4048be0:	d8c02417 	ldw	r3,144(sp)
 4048be4:	14c5883a 	add	r2,r2,r19
 4048be8:	44c00115 	stw	r19,4(r8)
 4048bec:	40c00015 	stw	r3,0(r8)
 4048bf0:	d8801c15 	stw	r2,112(sp)
 4048bf4:	d9401b15 	stw	r5,108(sp)
 4048bf8:	00c001c4 	movi	r3,7
 4048bfc:	1940070e 	bge	r3,r5,4048c1c <___vfiprintf_internal_r+0xd24>
 4048c00:	103e4826 	beq	r2,zero,4048524 <__alt_data_end+0xfffddd24>
 4048c04:	d9402117 	ldw	r5,132(sp)
 4048c08:	d9002017 	ldw	r4,128(sp)
 4048c0c:	d9801a04 	addi	r6,sp,104
 4048c10:	4047de40 	call	4047de4 <__sprint_r.part.0>
 4048c14:	10000c1e 	bne	r2,zero,4048c48 <___vfiprintf_internal_r+0xd50>
 4048c18:	d8801c17 	ldw	r2,112(sp)
 4048c1c:	8c80010e 	bge	r17,r18,4048c24 <___vfiprintf_internal_r+0xd2c>
 4048c20:	9023883a 	mov	r17,r18
 4048c24:	da802317 	ldw	r10,140(sp)
 4048c28:	5455883a 	add	r10,r10,r17
 4048c2c:	da802315 	stw	r10,140(sp)
 4048c30:	103e4126 	beq	r2,zero,4048538 <__alt_data_end+0xfffddd38>
 4048c34:	d9402117 	ldw	r5,132(sp)
 4048c38:	d9002017 	ldw	r4,128(sp)
 4048c3c:	d9801a04 	addi	r6,sp,104
 4048c40:	4047de40 	call	4047de4 <__sprint_r.part.0>
 4048c44:	103e3c26 	beq	r2,zero,4048538 <__alt_data_end+0xfffddd38>
 4048c48:	dd002117 	ldw	r20,132(sp)
 4048c4c:	a080030b 	ldhu	r2,12(r20)
 4048c50:	1080100c 	andi	r2,r2,64
 4048c54:	1001231e 	bne	r2,zero,40490e4 <___vfiprintf_internal_r+0x11ec>
 4048c58:	d8802317 	ldw	r2,140(sp)
 4048c5c:	003d7b06 	br	404824c <__alt_data_end+0xfffdda4c>
 4048c60:	1000991e 	bne	r2,zero,4048ec8 <___vfiprintf_internal_r+0xfd0>
 4048c64:	00c00044 	movi	r3,1
 4048c68:	9805883a 	mov	r2,r19
 4048c6c:	dd400015 	stw	r21,0(sp)
 4048c70:	dcc00115 	stw	r19,4(sp)
 4048c74:	dcc01c15 	stw	r19,112(sp)
 4048c78:	d8c01b15 	stw	r3,108(sp)
 4048c7c:	d811883a 	mov	r8,sp
 4048c80:	42000204 	addi	r8,r8,8
 4048c84:	a2c0010c 	andi	r11,r20,4
 4048c88:	583fe426 	beq	r11,zero,4048c1c <__alt_data_end+0xfffde41c>
 4048c8c:	8ca7c83a 	sub	r19,r17,r18
 4048c90:	04ffe20e 	bge	zero,r19,4048c1c <__alt_data_end+0xfffde41c>
 4048c94:	01c00404 	movi	r7,16
 4048c98:	3cffcc0e 	bge	r7,r19,4048bcc <__alt_data_end+0xfffde3cc>
 4048c9c:	02810174 	movhi	r10,1029
 4048ca0:	52811e04 	addi	r10,r10,1144
 4048ca4:	d9001b17 	ldw	r4,108(sp)
 4048ca8:	da802415 	stw	r10,144(sp)
 4048cac:	382b883a 	mov	r21,r7
 4048cb0:	050001c4 	movi	r20,7
 4048cb4:	df002017 	ldw	fp,128(sp)
 4048cb8:	00000506 	br	4048cd0 <___vfiprintf_internal_r+0xdd8>
 4048cbc:	21400084 	addi	r5,r4,2
 4048cc0:	42000204 	addi	r8,r8,8
 4048cc4:	1809883a 	mov	r4,r3
 4048cc8:	9cfffc04 	addi	r19,r19,-16
 4048ccc:	acffc40e 	bge	r21,r19,4048be0 <__alt_data_end+0xfffde3e0>
 4048cd0:	10800404 	addi	r2,r2,16
 4048cd4:	20c00044 	addi	r3,r4,1
 4048cd8:	45800015 	stw	r22,0(r8)
 4048cdc:	45400115 	stw	r21,4(r8)
 4048ce0:	d8801c15 	stw	r2,112(sp)
 4048ce4:	d8c01b15 	stw	r3,108(sp)
 4048ce8:	a0fff40e 	bge	r20,r3,4048cbc <__alt_data_end+0xfffde4bc>
 4048cec:	1000041e 	bne	r2,zero,4048d00 <___vfiprintf_internal_r+0xe08>
 4048cf0:	01400044 	movi	r5,1
 4048cf4:	0009883a 	mov	r4,zero
 4048cf8:	d811883a 	mov	r8,sp
 4048cfc:	003ff206 	br	4048cc8 <__alt_data_end+0xfffde4c8>
 4048d00:	d9402117 	ldw	r5,132(sp)
 4048d04:	d9801a04 	addi	r6,sp,104
 4048d08:	e009883a 	mov	r4,fp
 4048d0c:	4047de40 	call	4047de4 <__sprint_r.part.0>
 4048d10:	103fcd1e 	bne	r2,zero,4048c48 <__alt_data_end+0xfffde448>
 4048d14:	d9001b17 	ldw	r4,108(sp)
 4048d18:	d8801c17 	ldw	r2,112(sp)
 4048d1c:	d811883a 	mov	r8,sp
 4048d20:	21400044 	addi	r5,r4,1
 4048d24:	003fe806 	br	4048cc8 <__alt_data_end+0xfffde4c8>
 4048d28:	d9402117 	ldw	r5,132(sp)
 4048d2c:	d9002017 	ldw	r4,128(sp)
 4048d30:	d9801a04 	addi	r6,sp,104
 4048d34:	d9c02b15 	stw	r7,172(sp)
 4048d38:	db402a15 	stw	r13,168(sp)
 4048d3c:	4047de40 	call	4047de4 <__sprint_r.part.0>
 4048d40:	d9c02b17 	ldw	r7,172(sp)
 4048d44:	db402a17 	ldw	r13,168(sp)
 4048d48:	103fbf1e 	bne	r2,zero,4048c48 <__alt_data_end+0xfffde448>
 4048d4c:	d9401b17 	ldw	r5,108(sp)
 4048d50:	d8801c17 	ldw	r2,112(sp)
 4048d54:	d811883a 	mov	r8,sp
 4048d58:	29800044 	addi	r6,r5,1
 4048d5c:	003dc406 	br	4048470 <__alt_data_end+0xfffddc70>
 4048d60:	1000d21e 	bne	r2,zero,40490ac <___vfiprintf_internal_r+0x11b4>
 4048d64:	d8c01d87 	ldb	r3,118(sp)
 4048d68:	18009526 	beq	r3,zero,4048fc0 <___vfiprintf_internal_r+0x10c8>
 4048d6c:	00800044 	movi	r2,1
 4048d70:	d8c01d84 	addi	r3,sp,118
 4048d74:	1009883a 	mov	r4,r2
 4048d78:	d8c00015 	stw	r3,0(sp)
 4048d7c:	d8800115 	stw	r2,4(sp)
 4048d80:	d811883a 	mov	r8,sp
 4048d84:	200b883a 	mov	r5,r4
 4048d88:	42000204 	addi	r8,r8,8
 4048d8c:	21000044 	addi	r4,r4,1
 4048d90:	003d9706 	br	40483f0 <__alt_data_end+0xfffddbf0>
 4048d94:	d9001d04 	addi	r4,sp,116
 4048d98:	00800084 	movi	r2,2
 4048d9c:	d9000015 	stw	r4,0(sp)
 4048da0:	d8800115 	stw	r2,4(sp)
 4048da4:	1809883a 	mov	r4,r3
 4048da8:	d811883a 	mov	r8,sp
 4048dac:	200b883a 	mov	r5,r4
 4048db0:	42000204 	addi	r8,r8,8
 4048db4:	21000044 	addi	r4,r4,1
 4048db8:	003f4e06 	br	4048af4 <__alt_data_end+0xfffde2f4>
 4048dbc:	d8001d85 	stb	zero,118(sp)
 4048dc0:	48005016 	blt	r9,zero,4048f04 <___vfiprintf_internal_r+0x100c>
 4048dc4:	00ffdfc4 	movi	r3,-129
 4048dc8:	94c4b03a 	or	r2,r18,r19
 4048dcc:	a0e8703a 	and	r20,r20,r3
 4048dd0:	103d4426 	beq	r2,zero,40482e4 <__alt_data_end+0xfffddae4>
 4048dd4:	0039883a 	mov	fp,zero
 4048dd8:	d9002617 	ldw	r4,152(sp)
 4048ddc:	dd401a04 	addi	r21,sp,104
 4048de0:	908003cc 	andi	r2,r18,15
 4048de4:	9806973a 	slli	r3,r19,28
 4048de8:	2085883a 	add	r2,r4,r2
 4048dec:	9024d13a 	srli	r18,r18,4
 4048df0:	10800003 	ldbu	r2,0(r2)
 4048df4:	9826d13a 	srli	r19,r19,4
 4048df8:	ad7fffc4 	addi	r21,r21,-1
 4048dfc:	1ca4b03a 	or	r18,r3,r18
 4048e00:	a8800005 	stb	r2,0(r21)
 4048e04:	94c4b03a 	or	r2,r18,r19
 4048e08:	103ff51e 	bne	r2,zero,4048de0 <__alt_data_end+0xfffde5e0>
 4048e0c:	003e5906 	br	4048774 <__alt_data_end+0xfffddf74>
 4048e10:	d9402117 	ldw	r5,132(sp)
 4048e14:	d9002017 	ldw	r4,128(sp)
 4048e18:	d9801a04 	addi	r6,sp,104
 4048e1c:	4047de40 	call	4047de4 <__sprint_r.part.0>
 4048e20:	103f891e 	bne	r2,zero,4048c48 <__alt_data_end+0xfffde448>
 4048e24:	d8801c17 	ldw	r2,112(sp)
 4048e28:	d811883a 	mov	r8,sp
 4048e2c:	003f9506 	br	4048c84 <__alt_data_end+0xfffde484>
 4048e30:	d9402117 	ldw	r5,132(sp)
 4048e34:	d9002017 	ldw	r4,128(sp)
 4048e38:	d9801a04 	addi	r6,sp,104
 4048e3c:	4047de40 	call	4047de4 <__sprint_r.part.0>
 4048e40:	103f811e 	bne	r2,zero,4048c48 <__alt_data_end+0xfffde448>
 4048e44:	d811883a 	mov	r8,sp
 4048e48:	003ced06 	br	4048200 <__alt_data_end+0xfffdda00>
 4048e4c:	d9402117 	ldw	r5,132(sp)
 4048e50:	d9002017 	ldw	r4,128(sp)
 4048e54:	d9801a04 	addi	r6,sp,104
 4048e58:	da402c15 	stw	r9,176(sp)
 4048e5c:	db802a15 	stw	r14,168(sp)
 4048e60:	4047de40 	call	4047de4 <__sprint_r.part.0>
 4048e64:	da402c17 	ldw	r9,176(sp)
 4048e68:	db802a17 	ldw	r14,168(sp)
 4048e6c:	103f761e 	bne	r2,zero,4048c48 <__alt_data_end+0xfffde448>
 4048e70:	d9401b17 	ldw	r5,108(sp)
 4048e74:	d8801c17 	ldw	r2,112(sp)
 4048e78:	d811883a 	mov	r8,sp
 4048e7c:	29000044 	addi	r4,r5,1
 4048e80:	003d5b06 	br	40483f0 <__alt_data_end+0xfffddbf0>
 4048e84:	d9402117 	ldw	r5,132(sp)
 4048e88:	d9002017 	ldw	r4,128(sp)
 4048e8c:	d9801a04 	addi	r6,sp,104
 4048e90:	da402c15 	stw	r9,176(sp)
 4048e94:	4047de40 	call	4047de4 <__sprint_r.part.0>
 4048e98:	da402c17 	ldw	r9,176(sp)
 4048e9c:	103f6a1e 	bne	r2,zero,4048c48 <__alt_data_end+0xfffde448>
 4048ea0:	d9401b17 	ldw	r5,108(sp)
 4048ea4:	d8801c17 	ldw	r2,112(sp)
 4048ea8:	d811883a 	mov	r8,sp
 4048eac:	29000044 	addi	r4,r5,1
 4048eb0:	003f1006 	br	4048af4 <__alt_data_end+0xfffde2f4>
 4048eb4:	1000c31e 	bne	r2,zero,40491c4 <___vfiprintf_internal_r+0x12cc>
 4048eb8:	01000044 	movi	r4,1
 4048ebc:	000b883a 	mov	r5,zero
 4048ec0:	d811883a 	mov	r8,sp
 4048ec4:	003f0d06 	br	4048afc <__alt_data_end+0xfffde2fc>
 4048ec8:	d9402117 	ldw	r5,132(sp)
 4048ecc:	d9002017 	ldw	r4,128(sp)
 4048ed0:	d9801a04 	addi	r6,sp,104
 4048ed4:	4047de40 	call	4047de4 <__sprint_r.part.0>
 4048ed8:	103f5b1e 	bne	r2,zero,4048c48 <__alt_data_end+0xfffde448>
 4048edc:	d9001b17 	ldw	r4,108(sp)
 4048ee0:	d8801c17 	ldw	r2,112(sp)
 4048ee4:	d811883a 	mov	r8,sp
 4048ee8:	21000044 	addi	r4,r4,1
 4048eec:	003d8006 	br	40484f0 <__alt_data_end+0xfffddcf0>
 4048ef0:	01010174 	movhi	r4,1029
 4048ef4:	2100b904 	addi	r4,r4,740
 4048ef8:	d9002615 	stw	r4,152(sp)
 4048efc:	d8c02215 	stw	r3,136(sp)
 4048f00:	1029883a 	mov	r20,r2
 4048f04:	94c4b03a 	or	r2,r18,r19
 4048f08:	103fb21e 	bne	r2,zero,4048dd4 <__alt_data_end+0xfffde5d4>
 4048f0c:	0039883a 	mov	fp,zero
 4048f10:	00800084 	movi	r2,2
 4048f14:	003e6b06 	br	40488c4 <__alt_data_end+0xfffde0c4>
 4048f18:	da802217 	ldw	r10,136(sp)
 4048f1c:	d8001d85 	stb	zero,118(sp)
 4048f20:	0027883a 	mov	r19,zero
 4048f24:	50800104 	addi	r2,r10,4
 4048f28:	54800017 	ldw	r18,0(r10)
 4048f2c:	483e6016 	blt	r9,zero,40488b0 <__alt_data_end+0xfffde0b0>
 4048f30:	00ffdfc4 	movi	r3,-129
 4048f34:	d8802215 	stw	r2,136(sp)
 4048f38:	a0e8703a 	and	r20,r20,r3
 4048f3c:	0039883a 	mov	fp,zero
 4048f40:	903ebb26 	beq	r18,zero,4048a30 <__alt_data_end+0xfffde230>
 4048f44:	00800244 	movi	r2,9
 4048f48:	14bdee36 	bltu	r2,r18,4048704 <__alt_data_end+0xfffddf04>
 4048f4c:	003eba06 	br	4048a38 <__alt_data_end+0xfffde238>
 4048f50:	00800c04 	movi	r2,48
 4048f54:	d8c01d45 	stb	r3,117(sp)
 4048f58:	d8801d05 	stb	r2,116(sp)
 4048f5c:	d8001d85 	stb	zero,118(sp)
 4048f60:	a0c00094 	ori	r3,r20,2
 4048f64:	4800a916 	blt	r9,zero,404920c <___vfiprintf_internal_r+0x1314>
 4048f68:	00bfdfc4 	movi	r2,-129
 4048f6c:	a096703a 	and	r11,r20,r2
 4048f70:	5d000094 	ori	r20,r11,2
 4048f74:	0039883a 	mov	fp,zero
 4048f78:	003f9706 	br	4048dd8 <__alt_data_end+0xfffde5d8>
 4048f7c:	8025883a 	mov	r18,r16
 4048f80:	003c2e06 	br	404803c <__alt_data_end+0xfffdd83c>
 4048f84:	00810174 	movhi	r2,1029
 4048f88:	1080b904 	addi	r2,r2,740
 4048f8c:	0039883a 	mov	fp,zero
 4048f90:	d8802615 	stw	r2,152(sp)
 4048f94:	003f9006 	br	4048dd8 <__alt_data_end+0xfffde5d8>
 4048f98:	04a5c83a 	sub	r18,zero,r18
 4048f9c:	07000b44 	movi	fp,45
 4048fa0:	9004c03a 	cmpne	r2,r18,zero
 4048fa4:	04e7c83a 	sub	r19,zero,r19
 4048fa8:	df001d85 	stb	fp,118(sp)
 4048fac:	98a7c83a 	sub	r19,r19,r2
 4048fb0:	48009f16 	blt	r9,zero,4049230 <___vfiprintf_internal_r+0x1338>
 4048fb4:	00bfdfc4 	movi	r2,-129
 4048fb8:	a0a8703a 	and	r20,r20,r2
 4048fbc:	003dd006 	br	4048700 <__alt_data_end+0xfffddf00>
 4048fc0:	70004c26 	beq	r14,zero,40490f4 <___vfiprintf_internal_r+0x11fc>
 4048fc4:	00800084 	movi	r2,2
 4048fc8:	d8c01d04 	addi	r3,sp,116
 4048fcc:	d8c00015 	stw	r3,0(sp)
 4048fd0:	d8800115 	stw	r2,4(sp)
 4048fd4:	01000044 	movi	r4,1
 4048fd8:	d811883a 	mov	r8,sp
 4048fdc:	003f7306 	br	4048dac <__alt_data_end+0xfffde5ac>
 4048fe0:	a080100c 	andi	r2,r20,64
 4048fe4:	da802217 	ldw	r10,136(sp)
 4048fe8:	103e0626 	beq	r2,zero,4048804 <__alt_data_end+0xfffde004>
 4048fec:	5480000f 	ldh	r18,0(r10)
 4048ff0:	52800104 	addi	r10,r10,4
 4048ff4:	da802215 	stw	r10,136(sp)
 4048ff8:	9027d7fa 	srai	r19,r18,31
 4048ffc:	9805883a 	mov	r2,r19
 4049000:	003db806 	br	40486e4 <__alt_data_end+0xfffddee4>
 4049004:	a080040c 	andi	r2,r20,16
 4049008:	1000091e 	bne	r2,zero,4049030 <___vfiprintf_internal_r+0x1138>
 404900c:	a2c0100c 	andi	r11,r20,64
 4049010:	58000726 	beq	r11,zero,4049030 <___vfiprintf_internal_r+0x1138>
 4049014:	da802217 	ldw	r10,136(sp)
 4049018:	50800017 	ldw	r2,0(r10)
 404901c:	52800104 	addi	r10,r10,4
 4049020:	da802215 	stw	r10,136(sp)
 4049024:	da802317 	ldw	r10,140(sp)
 4049028:	1280000d 	sth	r10,0(r2)
 404902c:	003be706 	br	4047fcc <__alt_data_end+0xfffdd7cc>
 4049030:	da802217 	ldw	r10,136(sp)
 4049034:	50800017 	ldw	r2,0(r10)
 4049038:	52800104 	addi	r10,r10,4
 404903c:	da802215 	stw	r10,136(sp)
 4049040:	da802317 	ldw	r10,140(sp)
 4049044:	12800015 	stw	r10,0(r2)
 4049048:	003be006 	br	4047fcc <__alt_data_end+0xfffdd7cc>
 404904c:	a080100c 	andi	r2,r20,64
 4049050:	da802217 	ldw	r10,136(sp)
 4049054:	10003026 	beq	r2,zero,4049118 <___vfiprintf_internal_r+0x1220>
 4049058:	5480000b 	ldhu	r18,0(r10)
 404905c:	52800104 	addi	r10,r10,4
 4049060:	0027883a 	mov	r19,zero
 4049064:	da802215 	stw	r10,136(sp)
 4049068:	003d8006 	br	404866c <__alt_data_end+0xfffdde6c>
 404906c:	80c00007 	ldb	r3,0(r16)
 4049070:	003c0006 	br	4048074 <__alt_data_end+0xfffdd874>
 4049074:	a080100c 	andi	r2,r20,64
 4049078:	d8001d85 	stb	zero,118(sp)
 404907c:	da802217 	ldw	r10,136(sp)
 4049080:	1000201e 	bne	r2,zero,4049104 <___vfiprintf_internal_r+0x120c>
 4049084:	50800104 	addi	r2,r10,4
 4049088:	54800017 	ldw	r18,0(r10)
 404908c:	0027883a 	mov	r19,zero
 4049090:	483def0e 	bge	r9,zero,4048850 <__alt_data_end+0xfffde050>
 4049094:	94c6b03a 	or	r3,r18,r19
 4049098:	d8802215 	stw	r2,136(sp)
 404909c:	183d4e1e 	bne	r3,zero,40485d8 <__alt_data_end+0xfffdddd8>
 40490a0:	0039883a 	mov	fp,zero
 40490a4:	0005883a 	mov	r2,zero
 40490a8:	003e0606 	br	40488c4 <__alt_data_end+0xfffde0c4>
 40490ac:	d9402117 	ldw	r5,132(sp)
 40490b0:	d9002017 	ldw	r4,128(sp)
 40490b4:	d9801a04 	addi	r6,sp,104
 40490b8:	da402c15 	stw	r9,176(sp)
 40490bc:	db802a15 	stw	r14,168(sp)
 40490c0:	4047de40 	call	4047de4 <__sprint_r.part.0>
 40490c4:	da402c17 	ldw	r9,176(sp)
 40490c8:	db802a17 	ldw	r14,168(sp)
 40490cc:	103ede1e 	bne	r2,zero,4048c48 <__alt_data_end+0xfffde448>
 40490d0:	d9401b17 	ldw	r5,108(sp)
 40490d4:	d8801c17 	ldw	r2,112(sp)
 40490d8:	d811883a 	mov	r8,sp
 40490dc:	29000044 	addi	r4,r5,1
 40490e0:	003e7406 	br	4048ab4 <__alt_data_end+0xfffde2b4>
 40490e4:	00bfffc4 	movi	r2,-1
 40490e8:	003c5806 	br	404824c <__alt_data_end+0xfffdda4c>
 40490ec:	d811883a 	mov	r8,sp
 40490f0:	003ee806 	br	4048c94 <__alt_data_end+0xfffde494>
 40490f4:	000b883a 	mov	r5,zero
 40490f8:	01000044 	movi	r4,1
 40490fc:	d811883a 	mov	r8,sp
 4049100:	003e7c06 	br	4048af4 <__alt_data_end+0xfffde2f4>
 4049104:	50800104 	addi	r2,r10,4
 4049108:	5480000b 	ldhu	r18,0(r10)
 404910c:	0027883a 	mov	r19,zero
 4049110:	483dcf0e 	bge	r9,zero,4048850 <__alt_data_end+0xfffde050>
 4049114:	003fdf06 	br	4049094 <__alt_data_end+0xfffde894>
 4049118:	54800017 	ldw	r18,0(r10)
 404911c:	52800104 	addi	r10,r10,4
 4049120:	0027883a 	mov	r19,zero
 4049124:	da802215 	stw	r10,136(sp)
 4049128:	003d5006 	br	404866c <__alt_data_end+0xfffdde6c>
 404912c:	50800104 	addi	r2,r10,4
 4049130:	5480000b 	ldhu	r18,0(r10)
 4049134:	0027883a 	mov	r19,zero
 4049138:	483f7d0e 	bge	r9,zero,4048f30 <__alt_data_end+0xfffde730>
 404913c:	003ddc06 	br	40488b0 <__alt_data_end+0xfffde0b0>
 4049140:	d8c02215 	stw	r3,136(sp)
 4049144:	0039883a 	mov	fp,zero
 4049148:	003ddb06 	br	40488b8 <__alt_data_end+0xfffde0b8>
 404914c:	02810174 	movhi	r10,1029
 4049150:	52811a04 	addi	r10,r10,1128
 4049154:	da802415 	stw	r10,144(sp)
 4049158:	003e8306 	br	4048b68 <__alt_data_end+0xfffde368>
 404915c:	d8801c17 	ldw	r2,112(sp)
 4049160:	dd002117 	ldw	r20,132(sp)
 4049164:	103eb926 	beq	r2,zero,4048c4c <__alt_data_end+0xfffde44c>
 4049168:	d9002017 	ldw	r4,128(sp)
 404916c:	d9801a04 	addi	r6,sp,104
 4049170:	a00b883a 	mov	r5,r20
 4049174:	4047de40 	call	4047de4 <__sprint_r.part.0>
 4049178:	003eb406 	br	4048c4c <__alt_data_end+0xfffde44c>
 404917c:	80c00043 	ldbu	r3,1(r16)
 4049180:	a5000814 	ori	r20,r20,32
 4049184:	84000044 	addi	r16,r16,1
 4049188:	18c03fcc 	andi	r3,r3,255
 404918c:	18c0201c 	xori	r3,r3,128
 4049190:	18ffe004 	addi	r3,r3,-128
 4049194:	003bb706 	br	4048074 <__alt_data_end+0xfffdd874>
 4049198:	a809883a 	mov	r4,r21
 404919c:	d8c02a15 	stw	r3,168(sp)
 40491a0:	da002b15 	stw	r8,172(sp)
 40491a4:	404084c0 	call	404084c <strlen>
 40491a8:	d8c02a17 	ldw	r3,168(sp)
 40491ac:	1027883a 	mov	r19,r2
 40491b0:	df001d83 	ldbu	fp,118(sp)
 40491b4:	d8c02215 	stw	r3,136(sp)
 40491b8:	0013883a 	mov	r9,zero
 40491bc:	da002b17 	ldw	r8,172(sp)
 40491c0:	003c4d06 	br	40482f8 <__alt_data_end+0xfffddaf8>
 40491c4:	d9402117 	ldw	r5,132(sp)
 40491c8:	d9002017 	ldw	r4,128(sp)
 40491cc:	d9801a04 	addi	r6,sp,104
 40491d0:	da402c15 	stw	r9,176(sp)
 40491d4:	4047de40 	call	4047de4 <__sprint_r.part.0>
 40491d8:	da402c17 	ldw	r9,176(sp)
 40491dc:	103e9a1e 	bne	r2,zero,4048c48 <__alt_data_end+0xfffde448>
 40491e0:	d9401b17 	ldw	r5,108(sp)
 40491e4:	d8801c17 	ldw	r2,112(sp)
 40491e8:	d811883a 	mov	r8,sp
 40491ec:	29000044 	addi	r4,r5,1
 40491f0:	003e4206 	br	4048afc <__alt_data_end+0xfffde2fc>
 40491f4:	d9401b17 	ldw	r5,108(sp)
 40491f8:	01010174 	movhi	r4,1029
 40491fc:	21011e04 	addi	r4,r4,1144
 4049200:	d9002415 	stw	r4,144(sp)
 4049204:	29400044 	addi	r5,r5,1
 4049208:	003c6d06 	br	40483c0 <__alt_data_end+0xfffddbc0>
 404920c:	0039883a 	mov	fp,zero
 4049210:	00800084 	movi	r2,2
 4049214:	10803fcc 	andi	r2,r2,255
 4049218:	01000044 	movi	r4,1
 404921c:	11001e26 	beq	r2,r4,4049298 <___vfiprintf_internal_r+0x13a0>
 4049220:	01000084 	movi	r4,2
 4049224:	11001e1e 	bne	r2,r4,40492a0 <___vfiprintf_internal_r+0x13a8>
 4049228:	1829883a 	mov	r20,r3
 404922c:	003eea06 	br	4048dd8 <__alt_data_end+0xfffde5d8>
 4049230:	a007883a 	mov	r3,r20
 4049234:	00800044 	movi	r2,1
 4049238:	003ff606 	br	4049214 <__alt_data_end+0xfffdea14>
 404923c:	00800184 	movi	r2,6
 4049240:	1240012e 	bgeu	r2,r9,4049248 <___vfiprintf_internal_r+0x1350>
 4049244:	1013883a 	mov	r9,r2
 4049248:	4827883a 	mov	r19,r9
 404924c:	4825883a 	mov	r18,r9
 4049250:	48001516 	blt	r9,zero,40492a8 <___vfiprintf_internal_r+0x13b0>
 4049254:	05410174 	movhi	r21,1029
 4049258:	d8c02215 	stw	r3,136(sp)
 404925c:	ad40be04 	addi	r21,r21,760
 4049260:	003d1406 	br	40486b4 <__alt_data_end+0xfffddeb4>
 4049264:	02810174 	movhi	r10,1029
 4049268:	52811a04 	addi	r10,r10,1128
 404926c:	da802415 	stw	r10,144(sp)
 4049270:	200d883a 	mov	r6,r4
 4049274:	003c9106 	br	40484bc <__alt_data_end+0xfffddcbc>
 4049278:	5021883a 	mov	r16,r10
 404927c:	0013883a 	mov	r9,zero
 4049280:	003b7d06 	br	4048078 <__alt_data_end+0xfffdd878>
 4049284:	4827883a 	mov	r19,r9
 4049288:	df001d83 	ldbu	fp,118(sp)
 404928c:	d8c02215 	stw	r3,136(sp)
 4049290:	0013883a 	mov	r9,zero
 4049294:	003c1806 	br	40482f8 <__alt_data_end+0xfffddaf8>
 4049298:	1829883a 	mov	r20,r3
 404929c:	003d1806 	br	4048700 <__alt_data_end+0xfffddf00>
 40492a0:	1829883a 	mov	r20,r3
 40492a4:	003ccd06 	br	40485dc <__alt_data_end+0xfffddddc>
 40492a8:	0025883a 	mov	r18,zero
 40492ac:	003fe906 	br	4049254 <__alt_data_end+0xfffdea54>
 40492b0:	d8802217 	ldw	r2,136(sp)
 40492b4:	80c00043 	ldbu	r3,1(r16)
 40492b8:	5021883a 	mov	r16,r10
 40492bc:	12400017 	ldw	r9,0(r2)
 40492c0:	10800104 	addi	r2,r2,4
 40492c4:	d8802215 	stw	r2,136(sp)
 40492c8:	483faf0e 	bge	r9,zero,4049188 <__alt_data_end+0xfffde988>
 40492cc:	18c03fcc 	andi	r3,r3,255
 40492d0:	18c0201c 	xori	r3,r3,128
 40492d4:	027fffc4 	movi	r9,-1
 40492d8:	18ffe004 	addi	r3,r3,-128
 40492dc:	003b6506 	br	4048074 <__alt_data_end+0xfffdd874>
 40492e0:	d9c01d85 	stb	r7,118(sp)
 40492e4:	003ca006 	br	4048568 <__alt_data_end+0xfffddd68>
 40492e8:	d9c01d85 	stb	r7,118(sp)
 40492ec:	003cad06 	br	40485a4 <__alt_data_end+0xfffddda4>
 40492f0:	d9c01d85 	stb	r7,118(sp)
 40492f4:	003d7d06 	br	40488ec <__alt_data_end+0xfffde0ec>
 40492f8:	d9c01d85 	stb	r7,118(sp)
 40492fc:	003d5f06 	br	404887c <__alt_data_end+0xfffde07c>
 4049300:	a080004c 	andi	r2,r20,1
 4049304:	0039883a 	mov	fp,zero
 4049308:	10000526 	beq	r2,zero,4049320 <___vfiprintf_internal_r+0x1428>
 404930c:	00800c04 	movi	r2,48
 4049310:	d88019c5 	stb	r2,103(sp)
 4049314:	dcc02717 	ldw	r19,156(sp)
 4049318:	dd4019c4 	addi	r21,sp,103
 404931c:	003bf606 	br	40482f8 <__alt_data_end+0xfffddaf8>
 4049320:	0027883a 	mov	r19,zero
 4049324:	dd401a04 	addi	r21,sp,104
 4049328:	003bf306 	br	40482f8 <__alt_data_end+0xfffddaf8>
 404932c:	d9c01d85 	stb	r7,118(sp)
 4049330:	003dc806 	br	4048a54 <__alt_data_end+0xfffde254>
 4049334:	d9c01d85 	stb	r7,118(sp)
 4049338:	003d3a06 	br	4048824 <__alt_data_end+0xfffde024>
 404933c:	d9c01d85 	stb	r7,118(sp)
 4049340:	003d2a06 	br	40487ec <__alt_data_end+0xfffddfec>
 4049344:	d9c01d85 	stb	r7,118(sp)
 4049348:	003cde06 	br	40486c4 <__alt_data_end+0xfffddec4>
 404934c:	d9c01d85 	stb	r7,118(sp)
 4049350:	003cbc06 	br	4048644 <__alt_data_end+0xfffdde44>

04049354 <__vfiprintf_internal>:
 4049354:	00810174 	movhi	r2,1029
 4049358:	10885104 	addi	r2,r2,8516
 404935c:	300f883a 	mov	r7,r6
 4049360:	280d883a 	mov	r6,r5
 4049364:	200b883a 	mov	r5,r4
 4049368:	11000017 	ldw	r4,0(r2)
 404936c:	4047ef81 	jmpi	4047ef8 <___vfiprintf_internal_r>

04049370 <__sbprintf>:
 4049370:	2880030b 	ldhu	r2,12(r5)
 4049374:	2ac01917 	ldw	r11,100(r5)
 4049378:	2a80038b 	ldhu	r10,14(r5)
 404937c:	2a400717 	ldw	r9,28(r5)
 4049380:	2a000917 	ldw	r8,36(r5)
 4049384:	defee204 	addi	sp,sp,-1144
 4049388:	00c10004 	movi	r3,1024
 404938c:	dc011a15 	stw	r16,1128(sp)
 4049390:	10bfff4c 	andi	r2,r2,65533
 4049394:	2821883a 	mov	r16,r5
 4049398:	d8cb883a 	add	r5,sp,r3
 404939c:	dc811c15 	stw	r18,1136(sp)
 40493a0:	dc411b15 	stw	r17,1132(sp)
 40493a4:	dfc11d15 	stw	ra,1140(sp)
 40493a8:	2025883a 	mov	r18,r4
 40493ac:	d881030d 	sth	r2,1036(sp)
 40493b0:	dac11915 	stw	r11,1124(sp)
 40493b4:	da81038d 	sth	r10,1038(sp)
 40493b8:	da410715 	stw	r9,1052(sp)
 40493bc:	da010915 	stw	r8,1060(sp)
 40493c0:	dec10015 	stw	sp,1024(sp)
 40493c4:	dec10415 	stw	sp,1040(sp)
 40493c8:	d8c10215 	stw	r3,1032(sp)
 40493cc:	d8c10515 	stw	r3,1044(sp)
 40493d0:	d8010615 	stw	zero,1048(sp)
 40493d4:	4047ef80 	call	4047ef8 <___vfiprintf_internal_r>
 40493d8:	1023883a 	mov	r17,r2
 40493dc:	10000416 	blt	r2,zero,40493f0 <__sbprintf+0x80>
 40493e0:	d9410004 	addi	r5,sp,1024
 40493e4:	9009883a 	mov	r4,r18
 40493e8:	40447ac0 	call	40447ac <_fflush_r>
 40493ec:	10000d1e 	bne	r2,zero,4049424 <__sbprintf+0xb4>
 40493f0:	d881030b 	ldhu	r2,1036(sp)
 40493f4:	1080100c 	andi	r2,r2,64
 40493f8:	10000326 	beq	r2,zero,4049408 <__sbprintf+0x98>
 40493fc:	8080030b 	ldhu	r2,12(r16)
 4049400:	10801014 	ori	r2,r2,64
 4049404:	8080030d 	sth	r2,12(r16)
 4049408:	8805883a 	mov	r2,r17
 404940c:	dfc11d17 	ldw	ra,1140(sp)
 4049410:	dc811c17 	ldw	r18,1136(sp)
 4049414:	dc411b17 	ldw	r17,1132(sp)
 4049418:	dc011a17 	ldw	r16,1128(sp)
 404941c:	dec11e04 	addi	sp,sp,1144
 4049420:	f800283a 	ret
 4049424:	047fffc4 	movi	r17,-1
 4049428:	003ff106 	br	40493f0 <__alt_data_end+0xfffdebf0>

0404942c <_write_r>:
 404942c:	defffd04 	addi	sp,sp,-12
 4049430:	2805883a 	mov	r2,r5
 4049434:	dc000015 	stw	r16,0(sp)
 4049438:	04010174 	movhi	r16,1029
 404943c:	dc400115 	stw	r17,4(sp)
 4049440:	300b883a 	mov	r5,r6
 4049444:	840f4c04 	addi	r16,r16,15664
 4049448:	2023883a 	mov	r17,r4
 404944c:	380d883a 	mov	r6,r7
 4049450:	1009883a 	mov	r4,r2
 4049454:	dfc00215 	stw	ra,8(sp)
 4049458:	80000015 	stw	zero,0(r16)
 404945c:	404db900 	call	404db90 <write>
 4049460:	00ffffc4 	movi	r3,-1
 4049464:	10c00526 	beq	r2,r3,404947c <_write_r+0x50>
 4049468:	dfc00217 	ldw	ra,8(sp)
 404946c:	dc400117 	ldw	r17,4(sp)
 4049470:	dc000017 	ldw	r16,0(sp)
 4049474:	dec00304 	addi	sp,sp,12
 4049478:	f800283a 	ret
 404947c:	80c00017 	ldw	r3,0(r16)
 4049480:	183ff926 	beq	r3,zero,4049468 <__alt_data_end+0xfffdec68>
 4049484:	88c00015 	stw	r3,0(r17)
 4049488:	003ff706 	br	4049468 <__alt_data_end+0xfffdec68>

0404948c <_close_r>:
 404948c:	defffd04 	addi	sp,sp,-12
 4049490:	dc000015 	stw	r16,0(sp)
 4049494:	04010174 	movhi	r16,1029
 4049498:	dc400115 	stw	r17,4(sp)
 404949c:	840f4c04 	addi	r16,r16,15664
 40494a0:	2023883a 	mov	r17,r4
 40494a4:	2809883a 	mov	r4,r5
 40494a8:	dfc00215 	stw	ra,8(sp)
 40494ac:	80000015 	stw	zero,0(r16)
 40494b0:	404d0680 	call	404d068 <close>
 40494b4:	00ffffc4 	movi	r3,-1
 40494b8:	10c00526 	beq	r2,r3,40494d0 <_close_r+0x44>
 40494bc:	dfc00217 	ldw	ra,8(sp)
 40494c0:	dc400117 	ldw	r17,4(sp)
 40494c4:	dc000017 	ldw	r16,0(sp)
 40494c8:	dec00304 	addi	sp,sp,12
 40494cc:	f800283a 	ret
 40494d0:	80c00017 	ldw	r3,0(r16)
 40494d4:	183ff926 	beq	r3,zero,40494bc <__alt_data_end+0xfffdecbc>
 40494d8:	88c00015 	stw	r3,0(r17)
 40494dc:	003ff706 	br	40494bc <__alt_data_end+0xfffdecbc>

040494e0 <_calloc_r>:
 40494e0:	298b383a 	mul	r5,r5,r6
 40494e4:	defffe04 	addi	sp,sp,-8
 40494e8:	dfc00115 	stw	ra,4(sp)
 40494ec:	dc000015 	stw	r16,0(sp)
 40494f0:	40458e80 	call	40458e8 <_malloc_r>
 40494f4:	10002926 	beq	r2,zero,404959c <_calloc_r+0xbc>
 40494f8:	11bfff17 	ldw	r6,-4(r2)
 40494fc:	1021883a 	mov	r16,r2
 4049500:	00bfff04 	movi	r2,-4
 4049504:	308c703a 	and	r6,r6,r2
 4049508:	00c00904 	movi	r3,36
 404950c:	308d883a 	add	r6,r6,r2
 4049510:	19801636 	bltu	r3,r6,404956c <_calloc_r+0x8c>
 4049514:	008004c4 	movi	r2,19
 4049518:	11800b2e 	bgeu	r2,r6,4049548 <_calloc_r+0x68>
 404951c:	80000015 	stw	zero,0(r16)
 4049520:	80000115 	stw	zero,4(r16)
 4049524:	008006c4 	movi	r2,27
 4049528:	11801a2e 	bgeu	r2,r6,4049594 <_calloc_r+0xb4>
 404952c:	80000215 	stw	zero,8(r16)
 4049530:	80000315 	stw	zero,12(r16)
 4049534:	30c0151e 	bne	r6,r3,404958c <_calloc_r+0xac>
 4049538:	80000415 	stw	zero,16(r16)
 404953c:	80800604 	addi	r2,r16,24
 4049540:	80000515 	stw	zero,20(r16)
 4049544:	00000106 	br	404954c <_calloc_r+0x6c>
 4049548:	8005883a 	mov	r2,r16
 404954c:	10000015 	stw	zero,0(r2)
 4049550:	10000115 	stw	zero,4(r2)
 4049554:	10000215 	stw	zero,8(r2)
 4049558:	8005883a 	mov	r2,r16
 404955c:	dfc00117 	ldw	ra,4(sp)
 4049560:	dc000017 	ldw	r16,0(sp)
 4049564:	dec00204 	addi	sp,sp,8
 4049568:	f800283a 	ret
 404956c:	000b883a 	mov	r5,zero
 4049570:	8009883a 	mov	r4,r16
 4049574:	404647c0 	call	404647c <memset>
 4049578:	8005883a 	mov	r2,r16
 404957c:	dfc00117 	ldw	ra,4(sp)
 4049580:	dc000017 	ldw	r16,0(sp)
 4049584:	dec00204 	addi	sp,sp,8
 4049588:	f800283a 	ret
 404958c:	80800404 	addi	r2,r16,16
 4049590:	003fee06 	br	404954c <__alt_data_end+0xfffded4c>
 4049594:	80800204 	addi	r2,r16,8
 4049598:	003fec06 	br	404954c <__alt_data_end+0xfffded4c>
 404959c:	0005883a 	mov	r2,zero
 40495a0:	003fee06 	br	404955c <__alt_data_end+0xfffded5c>

040495a4 <_fclose_r>:
 40495a4:	28003926 	beq	r5,zero,404968c <_fclose_r+0xe8>
 40495a8:	defffc04 	addi	sp,sp,-16
 40495ac:	dc400115 	stw	r17,4(sp)
 40495b0:	dc000015 	stw	r16,0(sp)
 40495b4:	dfc00315 	stw	ra,12(sp)
 40495b8:	dc800215 	stw	r18,8(sp)
 40495bc:	2023883a 	mov	r17,r4
 40495c0:	2821883a 	mov	r16,r5
 40495c4:	20000226 	beq	r4,zero,40495d0 <_fclose_r+0x2c>
 40495c8:	20800e17 	ldw	r2,56(r4)
 40495cc:	10002726 	beq	r2,zero,404966c <_fclose_r+0xc8>
 40495d0:	8080030f 	ldh	r2,12(r16)
 40495d4:	1000071e 	bne	r2,zero,40495f4 <_fclose_r+0x50>
 40495d8:	0005883a 	mov	r2,zero
 40495dc:	dfc00317 	ldw	ra,12(sp)
 40495e0:	dc800217 	ldw	r18,8(sp)
 40495e4:	dc400117 	ldw	r17,4(sp)
 40495e8:	dc000017 	ldw	r16,0(sp)
 40495ec:	dec00404 	addi	sp,sp,16
 40495f0:	f800283a 	ret
 40495f4:	800b883a 	mov	r5,r16
 40495f8:	8809883a 	mov	r4,r17
 40495fc:	40445900 	call	4044590 <__sflush_r>
 4049600:	1025883a 	mov	r18,r2
 4049604:	80800b17 	ldw	r2,44(r16)
 4049608:	10000426 	beq	r2,zero,404961c <_fclose_r+0x78>
 404960c:	81400717 	ldw	r5,28(r16)
 4049610:	8809883a 	mov	r4,r17
 4049614:	103ee83a 	callr	r2
 4049618:	10001616 	blt	r2,zero,4049674 <_fclose_r+0xd0>
 404961c:	8080030b 	ldhu	r2,12(r16)
 4049620:	1080200c 	andi	r2,r2,128
 4049624:	1000151e 	bne	r2,zero,404967c <_fclose_r+0xd8>
 4049628:	81400c17 	ldw	r5,48(r16)
 404962c:	28000526 	beq	r5,zero,4049644 <_fclose_r+0xa0>
 4049630:	80801004 	addi	r2,r16,64
 4049634:	28800226 	beq	r5,r2,4049640 <_fclose_r+0x9c>
 4049638:	8809883a 	mov	r4,r17
 404963c:	4044cfc0 	call	4044cfc <_free_r>
 4049640:	80000c15 	stw	zero,48(r16)
 4049644:	81401117 	ldw	r5,68(r16)
 4049648:	28000326 	beq	r5,zero,4049658 <_fclose_r+0xb4>
 404964c:	8809883a 	mov	r4,r17
 4049650:	4044cfc0 	call	4044cfc <_free_r>
 4049654:	80001115 	stw	zero,68(r16)
 4049658:	4044b980 	call	4044b98 <__sfp_lock_acquire>
 404965c:	8000030d 	sth	zero,12(r16)
 4049660:	4044b9c0 	call	4044b9c <__sfp_lock_release>
 4049664:	9005883a 	mov	r2,r18
 4049668:	003fdc06 	br	40495dc <__alt_data_end+0xfffdeddc>
 404966c:	4044b880 	call	4044b88 <__sinit>
 4049670:	003fd706 	br	40495d0 <__alt_data_end+0xfffdedd0>
 4049674:	04bfffc4 	movi	r18,-1
 4049678:	003fe806 	br	404961c <__alt_data_end+0xfffdee1c>
 404967c:	81400417 	ldw	r5,16(r16)
 4049680:	8809883a 	mov	r4,r17
 4049684:	4044cfc0 	call	4044cfc <_free_r>
 4049688:	003fe706 	br	4049628 <__alt_data_end+0xfffdee28>
 404968c:	0005883a 	mov	r2,zero
 4049690:	f800283a 	ret

04049694 <fclose>:
 4049694:	00810174 	movhi	r2,1029
 4049698:	10885104 	addi	r2,r2,8516
 404969c:	200b883a 	mov	r5,r4
 40496a0:	11000017 	ldw	r4,0(r2)
 40496a4:	40495a41 	jmpi	40495a4 <_fclose_r>

040496a8 <__fputwc>:
 40496a8:	defff804 	addi	sp,sp,-32
 40496ac:	dcc00415 	stw	r19,16(sp)
 40496b0:	dc800315 	stw	r18,12(sp)
 40496b4:	dc000115 	stw	r16,4(sp)
 40496b8:	dfc00715 	stw	ra,28(sp)
 40496bc:	dd400615 	stw	r21,24(sp)
 40496c0:	dd000515 	stw	r20,20(sp)
 40496c4:	dc400215 	stw	r17,8(sp)
 40496c8:	2027883a 	mov	r19,r4
 40496cc:	2825883a 	mov	r18,r5
 40496d0:	3021883a 	mov	r16,r6
 40496d4:	40456d80 	call	40456d8 <__locale_mb_cur_max>
 40496d8:	00c00044 	movi	r3,1
 40496dc:	10c03e26 	beq	r2,r3,40497d8 <__fputwc+0x130>
 40496e0:	81c01704 	addi	r7,r16,92
 40496e4:	900d883a 	mov	r6,r18
 40496e8:	d80b883a 	mov	r5,sp
 40496ec:	9809883a 	mov	r4,r19
 40496f0:	4049b780 	call	4049b78 <_wcrtomb_r>
 40496f4:	1029883a 	mov	r20,r2
 40496f8:	00bfffc4 	movi	r2,-1
 40496fc:	a0802026 	beq	r20,r2,4049780 <__fputwc+0xd8>
 4049700:	d9400003 	ldbu	r5,0(sp)
 4049704:	a0001c26 	beq	r20,zero,4049778 <__fputwc+0xd0>
 4049708:	0023883a 	mov	r17,zero
 404970c:	05400284 	movi	r21,10
 4049710:	00000906 	br	4049738 <__fputwc+0x90>
 4049714:	80800017 	ldw	r2,0(r16)
 4049718:	11400005 	stb	r5,0(r2)
 404971c:	80c00017 	ldw	r3,0(r16)
 4049720:	18c00044 	addi	r3,r3,1
 4049724:	80c00015 	stw	r3,0(r16)
 4049728:	8c400044 	addi	r17,r17,1
 404972c:	dc45883a 	add	r2,sp,r17
 4049730:	8d00112e 	bgeu	r17,r20,4049778 <__fputwc+0xd0>
 4049734:	11400003 	ldbu	r5,0(r2)
 4049738:	80c00217 	ldw	r3,8(r16)
 404973c:	18ffffc4 	addi	r3,r3,-1
 4049740:	80c00215 	stw	r3,8(r16)
 4049744:	183ff30e 	bge	r3,zero,4049714 <__alt_data_end+0xfffdef14>
 4049748:	80800617 	ldw	r2,24(r16)
 404974c:	18801916 	blt	r3,r2,40497b4 <__fputwc+0x10c>
 4049750:	80800017 	ldw	r2,0(r16)
 4049754:	11400005 	stb	r5,0(r2)
 4049758:	80800017 	ldw	r2,0(r16)
 404975c:	10c00003 	ldbu	r3,0(r2)
 4049760:	10800044 	addi	r2,r2,1
 4049764:	1d402326 	beq	r3,r21,40497f4 <__fputwc+0x14c>
 4049768:	80800015 	stw	r2,0(r16)
 404976c:	8c400044 	addi	r17,r17,1
 4049770:	dc45883a 	add	r2,sp,r17
 4049774:	8d3fef36 	bltu	r17,r20,4049734 <__alt_data_end+0xfffdef34>
 4049778:	9005883a 	mov	r2,r18
 404977c:	00000406 	br	4049790 <__fputwc+0xe8>
 4049780:	80c0030b 	ldhu	r3,12(r16)
 4049784:	a005883a 	mov	r2,r20
 4049788:	18c01014 	ori	r3,r3,64
 404978c:	80c0030d 	sth	r3,12(r16)
 4049790:	dfc00717 	ldw	ra,28(sp)
 4049794:	dd400617 	ldw	r21,24(sp)
 4049798:	dd000517 	ldw	r20,20(sp)
 404979c:	dcc00417 	ldw	r19,16(sp)
 40497a0:	dc800317 	ldw	r18,12(sp)
 40497a4:	dc400217 	ldw	r17,8(sp)
 40497a8:	dc000117 	ldw	r16,4(sp)
 40497ac:	dec00804 	addi	sp,sp,32
 40497b0:	f800283a 	ret
 40497b4:	800d883a 	mov	r6,r16
 40497b8:	29403fcc 	andi	r5,r5,255
 40497bc:	9809883a 	mov	r4,r19
 40497c0:	4049a200 	call	4049a20 <__swbuf_r>
 40497c4:	10bfffe0 	cmpeqi	r2,r2,-1
 40497c8:	10803fcc 	andi	r2,r2,255
 40497cc:	103fd626 	beq	r2,zero,4049728 <__alt_data_end+0xfffdef28>
 40497d0:	00bfffc4 	movi	r2,-1
 40497d4:	003fee06 	br	4049790 <__alt_data_end+0xfffdef90>
 40497d8:	90ffffc4 	addi	r3,r18,-1
 40497dc:	01003f84 	movi	r4,254
 40497e0:	20ffbf36 	bltu	r4,r3,40496e0 <__alt_data_end+0xfffdeee0>
 40497e4:	900b883a 	mov	r5,r18
 40497e8:	dc800005 	stb	r18,0(sp)
 40497ec:	1029883a 	mov	r20,r2
 40497f0:	003fc506 	br	4049708 <__alt_data_end+0xfffdef08>
 40497f4:	800d883a 	mov	r6,r16
 40497f8:	a80b883a 	mov	r5,r21
 40497fc:	9809883a 	mov	r4,r19
 4049800:	4049a200 	call	4049a20 <__swbuf_r>
 4049804:	10bfffe0 	cmpeqi	r2,r2,-1
 4049808:	003fef06 	br	40497c8 <__alt_data_end+0xfffdefc8>

0404980c <_fputwc_r>:
 404980c:	3080030b 	ldhu	r2,12(r6)
 4049810:	10c8000c 	andi	r3,r2,8192
 4049814:	1800051e 	bne	r3,zero,404982c <_fputwc_r+0x20>
 4049818:	30c01917 	ldw	r3,100(r6)
 404981c:	10880014 	ori	r2,r2,8192
 4049820:	3080030d 	sth	r2,12(r6)
 4049824:	18880014 	ori	r2,r3,8192
 4049828:	30801915 	stw	r2,100(r6)
 404982c:	40496a81 	jmpi	40496a8 <__fputwc>

04049830 <fputwc>:
 4049830:	00810174 	movhi	r2,1029
 4049834:	defffc04 	addi	sp,sp,-16
 4049838:	10885104 	addi	r2,r2,8516
 404983c:	dc000115 	stw	r16,4(sp)
 4049840:	14000017 	ldw	r16,0(r2)
 4049844:	dc400215 	stw	r17,8(sp)
 4049848:	dfc00315 	stw	ra,12(sp)
 404984c:	2023883a 	mov	r17,r4
 4049850:	80000226 	beq	r16,zero,404985c <fputwc+0x2c>
 4049854:	80800e17 	ldw	r2,56(r16)
 4049858:	10001026 	beq	r2,zero,404989c <fputwc+0x6c>
 404985c:	2880030b 	ldhu	r2,12(r5)
 4049860:	10c8000c 	andi	r3,r2,8192
 4049864:	1800051e 	bne	r3,zero,404987c <fputwc+0x4c>
 4049868:	28c01917 	ldw	r3,100(r5)
 404986c:	10880014 	ori	r2,r2,8192
 4049870:	2880030d 	sth	r2,12(r5)
 4049874:	18880014 	ori	r2,r3,8192
 4049878:	28801915 	stw	r2,100(r5)
 404987c:	280d883a 	mov	r6,r5
 4049880:	8009883a 	mov	r4,r16
 4049884:	880b883a 	mov	r5,r17
 4049888:	dfc00317 	ldw	ra,12(sp)
 404988c:	dc400217 	ldw	r17,8(sp)
 4049890:	dc000117 	ldw	r16,4(sp)
 4049894:	dec00404 	addi	sp,sp,16
 4049898:	40496a81 	jmpi	40496a8 <__fputwc>
 404989c:	8009883a 	mov	r4,r16
 40498a0:	d9400015 	stw	r5,0(sp)
 40498a4:	4044b880 	call	4044b88 <__sinit>
 40498a8:	d9400017 	ldw	r5,0(sp)
 40498ac:	003feb06 	br	404985c <__alt_data_end+0xfffdf05c>

040498b0 <_fstat_r>:
 40498b0:	defffd04 	addi	sp,sp,-12
 40498b4:	2805883a 	mov	r2,r5
 40498b8:	dc000015 	stw	r16,0(sp)
 40498bc:	04010174 	movhi	r16,1029
 40498c0:	dc400115 	stw	r17,4(sp)
 40498c4:	840f4c04 	addi	r16,r16,15664
 40498c8:	2023883a 	mov	r17,r4
 40498cc:	300b883a 	mov	r5,r6
 40498d0:	1009883a 	mov	r4,r2
 40498d4:	dfc00215 	stw	ra,8(sp)
 40498d8:	80000015 	stw	zero,0(r16)
 40498dc:	404d1e80 	call	404d1e8 <fstat>
 40498e0:	00ffffc4 	movi	r3,-1
 40498e4:	10c00526 	beq	r2,r3,40498fc <_fstat_r+0x4c>
 40498e8:	dfc00217 	ldw	ra,8(sp)
 40498ec:	dc400117 	ldw	r17,4(sp)
 40498f0:	dc000017 	ldw	r16,0(sp)
 40498f4:	dec00304 	addi	sp,sp,12
 40498f8:	f800283a 	ret
 40498fc:	80c00017 	ldw	r3,0(r16)
 4049900:	183ff926 	beq	r3,zero,40498e8 <__alt_data_end+0xfffdf0e8>
 4049904:	88c00015 	stw	r3,0(r17)
 4049908:	003ff706 	br	40498e8 <__alt_data_end+0xfffdf0e8>

0404990c <_isatty_r>:
 404990c:	defffd04 	addi	sp,sp,-12
 4049910:	dc000015 	stw	r16,0(sp)
 4049914:	04010174 	movhi	r16,1029
 4049918:	dc400115 	stw	r17,4(sp)
 404991c:	840f4c04 	addi	r16,r16,15664
 4049920:	2023883a 	mov	r17,r4
 4049924:	2809883a 	mov	r4,r5
 4049928:	dfc00215 	stw	ra,8(sp)
 404992c:	80000015 	stw	zero,0(r16)
 4049930:	404d5740 	call	404d574 <isatty>
 4049934:	00ffffc4 	movi	r3,-1
 4049938:	10c00526 	beq	r2,r3,4049950 <_isatty_r+0x44>
 404993c:	dfc00217 	ldw	ra,8(sp)
 4049940:	dc400117 	ldw	r17,4(sp)
 4049944:	dc000017 	ldw	r16,0(sp)
 4049948:	dec00304 	addi	sp,sp,12
 404994c:	f800283a 	ret
 4049950:	80c00017 	ldw	r3,0(r16)
 4049954:	183ff926 	beq	r3,zero,404993c <__alt_data_end+0xfffdf13c>
 4049958:	88c00015 	stw	r3,0(r17)
 404995c:	003ff706 	br	404993c <__alt_data_end+0xfffdf13c>

04049960 <_lseek_r>:
 4049960:	defffd04 	addi	sp,sp,-12
 4049964:	2805883a 	mov	r2,r5
 4049968:	dc000015 	stw	r16,0(sp)
 404996c:	04010174 	movhi	r16,1029
 4049970:	dc400115 	stw	r17,4(sp)
 4049974:	300b883a 	mov	r5,r6
 4049978:	840f4c04 	addi	r16,r16,15664
 404997c:	2023883a 	mov	r17,r4
 4049980:	380d883a 	mov	r6,r7
 4049984:	1009883a 	mov	r4,r2
 4049988:	dfc00215 	stw	ra,8(sp)
 404998c:	80000015 	stw	zero,0(r16)
 4049990:	404d7400 	call	404d740 <lseek>
 4049994:	00ffffc4 	movi	r3,-1
 4049998:	10c00526 	beq	r2,r3,40499b0 <_lseek_r+0x50>
 404999c:	dfc00217 	ldw	ra,8(sp)
 40499a0:	dc400117 	ldw	r17,4(sp)
 40499a4:	dc000017 	ldw	r16,0(sp)
 40499a8:	dec00304 	addi	sp,sp,12
 40499ac:	f800283a 	ret
 40499b0:	80c00017 	ldw	r3,0(r16)
 40499b4:	183ff926 	beq	r3,zero,404999c <__alt_data_end+0xfffdf19c>
 40499b8:	88c00015 	stw	r3,0(r17)
 40499bc:	003ff706 	br	404999c <__alt_data_end+0xfffdf19c>

040499c0 <_read_r>:
 40499c0:	defffd04 	addi	sp,sp,-12
 40499c4:	2805883a 	mov	r2,r5
 40499c8:	dc000015 	stw	r16,0(sp)
 40499cc:	04010174 	movhi	r16,1029
 40499d0:	dc400115 	stw	r17,4(sp)
 40499d4:	300b883a 	mov	r5,r6
 40499d8:	840f4c04 	addi	r16,r16,15664
 40499dc:	2023883a 	mov	r17,r4
 40499e0:	380d883a 	mov	r6,r7
 40499e4:	1009883a 	mov	r4,r2
 40499e8:	dfc00215 	stw	ra,8(sp)
 40499ec:	80000015 	stw	zero,0(r16)
 40499f0:	404d9140 	call	404d914 <read>
 40499f4:	00ffffc4 	movi	r3,-1
 40499f8:	10c00526 	beq	r2,r3,4049a10 <_read_r+0x50>
 40499fc:	dfc00217 	ldw	ra,8(sp)
 4049a00:	dc400117 	ldw	r17,4(sp)
 4049a04:	dc000017 	ldw	r16,0(sp)
 4049a08:	dec00304 	addi	sp,sp,12
 4049a0c:	f800283a 	ret
 4049a10:	80c00017 	ldw	r3,0(r16)
 4049a14:	183ff926 	beq	r3,zero,40499fc <__alt_data_end+0xfffdf1fc>
 4049a18:	88c00015 	stw	r3,0(r17)
 4049a1c:	003ff706 	br	40499fc <__alt_data_end+0xfffdf1fc>

04049a20 <__swbuf_r>:
 4049a20:	defffb04 	addi	sp,sp,-20
 4049a24:	dcc00315 	stw	r19,12(sp)
 4049a28:	dc800215 	stw	r18,8(sp)
 4049a2c:	dc000015 	stw	r16,0(sp)
 4049a30:	dfc00415 	stw	ra,16(sp)
 4049a34:	dc400115 	stw	r17,4(sp)
 4049a38:	2025883a 	mov	r18,r4
 4049a3c:	2827883a 	mov	r19,r5
 4049a40:	3021883a 	mov	r16,r6
 4049a44:	20000226 	beq	r4,zero,4049a50 <__swbuf_r+0x30>
 4049a48:	20800e17 	ldw	r2,56(r4)
 4049a4c:	10004226 	beq	r2,zero,4049b58 <__swbuf_r+0x138>
 4049a50:	80800617 	ldw	r2,24(r16)
 4049a54:	8100030b 	ldhu	r4,12(r16)
 4049a58:	80800215 	stw	r2,8(r16)
 4049a5c:	2080020c 	andi	r2,r4,8
 4049a60:	10003626 	beq	r2,zero,4049b3c <__swbuf_r+0x11c>
 4049a64:	80c00417 	ldw	r3,16(r16)
 4049a68:	18003426 	beq	r3,zero,4049b3c <__swbuf_r+0x11c>
 4049a6c:	2088000c 	andi	r2,r4,8192
 4049a70:	9c403fcc 	andi	r17,r19,255
 4049a74:	10001a26 	beq	r2,zero,4049ae0 <__swbuf_r+0xc0>
 4049a78:	80800017 	ldw	r2,0(r16)
 4049a7c:	81000517 	ldw	r4,20(r16)
 4049a80:	10c7c83a 	sub	r3,r2,r3
 4049a84:	1900200e 	bge	r3,r4,4049b08 <__swbuf_r+0xe8>
 4049a88:	18c00044 	addi	r3,r3,1
 4049a8c:	81000217 	ldw	r4,8(r16)
 4049a90:	11400044 	addi	r5,r2,1
 4049a94:	81400015 	stw	r5,0(r16)
 4049a98:	213fffc4 	addi	r4,r4,-1
 4049a9c:	81000215 	stw	r4,8(r16)
 4049aa0:	14c00005 	stb	r19,0(r2)
 4049aa4:	80800517 	ldw	r2,20(r16)
 4049aa8:	10c01e26 	beq	r2,r3,4049b24 <__swbuf_r+0x104>
 4049aac:	8080030b 	ldhu	r2,12(r16)
 4049ab0:	1080004c 	andi	r2,r2,1
 4049ab4:	10000226 	beq	r2,zero,4049ac0 <__swbuf_r+0xa0>
 4049ab8:	00800284 	movi	r2,10
 4049abc:	88801926 	beq	r17,r2,4049b24 <__swbuf_r+0x104>
 4049ac0:	8805883a 	mov	r2,r17
 4049ac4:	dfc00417 	ldw	ra,16(sp)
 4049ac8:	dcc00317 	ldw	r19,12(sp)
 4049acc:	dc800217 	ldw	r18,8(sp)
 4049ad0:	dc400117 	ldw	r17,4(sp)
 4049ad4:	dc000017 	ldw	r16,0(sp)
 4049ad8:	dec00504 	addi	sp,sp,20
 4049adc:	f800283a 	ret
 4049ae0:	81401917 	ldw	r5,100(r16)
 4049ae4:	00b7ffc4 	movi	r2,-8193
 4049ae8:	21080014 	ori	r4,r4,8192
 4049aec:	2884703a 	and	r2,r5,r2
 4049af0:	80801915 	stw	r2,100(r16)
 4049af4:	80800017 	ldw	r2,0(r16)
 4049af8:	8100030d 	sth	r4,12(r16)
 4049afc:	81000517 	ldw	r4,20(r16)
 4049b00:	10c7c83a 	sub	r3,r2,r3
 4049b04:	193fe016 	blt	r3,r4,4049a88 <__alt_data_end+0xfffdf288>
 4049b08:	800b883a 	mov	r5,r16
 4049b0c:	9009883a 	mov	r4,r18
 4049b10:	40447ac0 	call	40447ac <_fflush_r>
 4049b14:	1000071e 	bne	r2,zero,4049b34 <__swbuf_r+0x114>
 4049b18:	80800017 	ldw	r2,0(r16)
 4049b1c:	00c00044 	movi	r3,1
 4049b20:	003fda06 	br	4049a8c <__alt_data_end+0xfffdf28c>
 4049b24:	800b883a 	mov	r5,r16
 4049b28:	9009883a 	mov	r4,r18
 4049b2c:	40447ac0 	call	40447ac <_fflush_r>
 4049b30:	103fe326 	beq	r2,zero,4049ac0 <__alt_data_end+0xfffdf2c0>
 4049b34:	00bfffc4 	movi	r2,-1
 4049b38:	003fe206 	br	4049ac4 <__alt_data_end+0xfffdf2c4>
 4049b3c:	800b883a 	mov	r5,r16
 4049b40:	9009883a 	mov	r4,r18
 4049b44:	4042bb40 	call	4042bb4 <__swsetup_r>
 4049b48:	103ffa1e 	bne	r2,zero,4049b34 <__alt_data_end+0xfffdf334>
 4049b4c:	8100030b 	ldhu	r4,12(r16)
 4049b50:	80c00417 	ldw	r3,16(r16)
 4049b54:	003fc506 	br	4049a6c <__alt_data_end+0xfffdf26c>
 4049b58:	4044b880 	call	4044b88 <__sinit>
 4049b5c:	003fbc06 	br	4049a50 <__alt_data_end+0xfffdf250>

04049b60 <__swbuf>:
 4049b60:	00810174 	movhi	r2,1029
 4049b64:	10885104 	addi	r2,r2,8516
 4049b68:	280d883a 	mov	r6,r5
 4049b6c:	200b883a 	mov	r5,r4
 4049b70:	11000017 	ldw	r4,0(r2)
 4049b74:	4049a201 	jmpi	4049a20 <__swbuf_r>

04049b78 <_wcrtomb_r>:
 4049b78:	defff604 	addi	sp,sp,-40
 4049b7c:	00810174 	movhi	r2,1029
 4049b80:	dc800815 	stw	r18,32(sp)
 4049b84:	dc400715 	stw	r17,28(sp)
 4049b88:	dc000615 	stw	r16,24(sp)
 4049b8c:	10885504 	addi	r2,r2,8532
 4049b90:	dfc00915 	stw	ra,36(sp)
 4049b94:	2021883a 	mov	r16,r4
 4049b98:	3823883a 	mov	r17,r7
 4049b9c:	14800017 	ldw	r18,0(r2)
 4049ba0:	28001426 	beq	r5,zero,4049bf4 <_wcrtomb_r+0x7c>
 4049ba4:	d9400415 	stw	r5,16(sp)
 4049ba8:	d9800515 	stw	r6,20(sp)
 4049bac:	40456cc0 	call	40456cc <__locale_charset>
 4049bb0:	d9800517 	ldw	r6,20(sp)
 4049bb4:	d9400417 	ldw	r5,16(sp)
 4049bb8:	100f883a 	mov	r7,r2
 4049bbc:	dc400015 	stw	r17,0(sp)
 4049bc0:	8009883a 	mov	r4,r16
 4049bc4:	903ee83a 	callr	r18
 4049bc8:	00ffffc4 	movi	r3,-1
 4049bcc:	10c0031e 	bne	r2,r3,4049bdc <_wcrtomb_r+0x64>
 4049bd0:	88000015 	stw	zero,0(r17)
 4049bd4:	00c02284 	movi	r3,138
 4049bd8:	80c00015 	stw	r3,0(r16)
 4049bdc:	dfc00917 	ldw	ra,36(sp)
 4049be0:	dc800817 	ldw	r18,32(sp)
 4049be4:	dc400717 	ldw	r17,28(sp)
 4049be8:	dc000617 	ldw	r16,24(sp)
 4049bec:	dec00a04 	addi	sp,sp,40
 4049bf0:	f800283a 	ret
 4049bf4:	40456cc0 	call	40456cc <__locale_charset>
 4049bf8:	100f883a 	mov	r7,r2
 4049bfc:	dc400015 	stw	r17,0(sp)
 4049c00:	000d883a 	mov	r6,zero
 4049c04:	d9400104 	addi	r5,sp,4
 4049c08:	8009883a 	mov	r4,r16
 4049c0c:	903ee83a 	callr	r18
 4049c10:	003fed06 	br	4049bc8 <__alt_data_end+0xfffdf3c8>

04049c14 <wcrtomb>:
 4049c14:	defff604 	addi	sp,sp,-40
 4049c18:	00810174 	movhi	r2,1029
 4049c1c:	dc800615 	stw	r18,24(sp)
 4049c20:	dc400515 	stw	r17,20(sp)
 4049c24:	10885104 	addi	r2,r2,8516
 4049c28:	dfc00915 	stw	ra,36(sp)
 4049c2c:	dd000815 	stw	r20,32(sp)
 4049c30:	dcc00715 	stw	r19,28(sp)
 4049c34:	dc000415 	stw	r16,16(sp)
 4049c38:	3025883a 	mov	r18,r6
 4049c3c:	14400017 	ldw	r17,0(r2)
 4049c40:	20001926 	beq	r4,zero,4049ca8 <wcrtomb+0x94>
 4049c44:	00810174 	movhi	r2,1029
 4049c48:	10885504 	addi	r2,r2,8532
 4049c4c:	15000017 	ldw	r20,0(r2)
 4049c50:	2021883a 	mov	r16,r4
 4049c54:	2827883a 	mov	r19,r5
 4049c58:	40456cc0 	call	40456cc <__locale_charset>
 4049c5c:	100f883a 	mov	r7,r2
 4049c60:	dc800015 	stw	r18,0(sp)
 4049c64:	980d883a 	mov	r6,r19
 4049c68:	800b883a 	mov	r5,r16
 4049c6c:	8809883a 	mov	r4,r17
 4049c70:	a03ee83a 	callr	r20
 4049c74:	00ffffc4 	movi	r3,-1
 4049c78:	10c0031e 	bne	r2,r3,4049c88 <wcrtomb+0x74>
 4049c7c:	90000015 	stw	zero,0(r18)
 4049c80:	00c02284 	movi	r3,138
 4049c84:	88c00015 	stw	r3,0(r17)
 4049c88:	dfc00917 	ldw	ra,36(sp)
 4049c8c:	dd000817 	ldw	r20,32(sp)
 4049c90:	dcc00717 	ldw	r19,28(sp)
 4049c94:	dc800617 	ldw	r18,24(sp)
 4049c98:	dc400517 	ldw	r17,20(sp)
 4049c9c:	dc000417 	ldw	r16,16(sp)
 4049ca0:	dec00a04 	addi	sp,sp,40
 4049ca4:	f800283a 	ret
 4049ca8:	00810174 	movhi	r2,1029
 4049cac:	10885504 	addi	r2,r2,8532
 4049cb0:	14000017 	ldw	r16,0(r2)
 4049cb4:	40456cc0 	call	40456cc <__locale_charset>
 4049cb8:	100f883a 	mov	r7,r2
 4049cbc:	dc800015 	stw	r18,0(sp)
 4049cc0:	000d883a 	mov	r6,zero
 4049cc4:	d9400104 	addi	r5,sp,4
 4049cc8:	8809883a 	mov	r4,r17
 4049ccc:	803ee83a 	callr	r16
 4049cd0:	003fe806 	br	4049c74 <__alt_data_end+0xfffdf474>

04049cd4 <__ascii_wctomb>:
 4049cd4:	28000526 	beq	r5,zero,4049cec <__ascii_wctomb+0x18>
 4049cd8:	00803fc4 	movi	r2,255
 4049cdc:	11800536 	bltu	r2,r6,4049cf4 <__ascii_wctomb+0x20>
 4049ce0:	29800005 	stb	r6,0(r5)
 4049ce4:	00800044 	movi	r2,1
 4049ce8:	f800283a 	ret
 4049cec:	0005883a 	mov	r2,zero
 4049cf0:	f800283a 	ret
 4049cf4:	00802284 	movi	r2,138
 4049cf8:	20800015 	stw	r2,0(r4)
 4049cfc:	00bfffc4 	movi	r2,-1
 4049d00:	f800283a 	ret

04049d04 <_wctomb_r>:
 4049d04:	00810174 	movhi	r2,1029
 4049d08:	defff904 	addi	sp,sp,-28
 4049d0c:	10885504 	addi	r2,r2,8532
 4049d10:	dfc00615 	stw	ra,24(sp)
 4049d14:	dc400515 	stw	r17,20(sp)
 4049d18:	dc000415 	stw	r16,16(sp)
 4049d1c:	3823883a 	mov	r17,r7
 4049d20:	14000017 	ldw	r16,0(r2)
 4049d24:	d9000115 	stw	r4,4(sp)
 4049d28:	d9400215 	stw	r5,8(sp)
 4049d2c:	d9800315 	stw	r6,12(sp)
 4049d30:	40456cc0 	call	40456cc <__locale_charset>
 4049d34:	d9800317 	ldw	r6,12(sp)
 4049d38:	d9400217 	ldw	r5,8(sp)
 4049d3c:	d9000117 	ldw	r4,4(sp)
 4049d40:	100f883a 	mov	r7,r2
 4049d44:	dc400015 	stw	r17,0(sp)
 4049d48:	803ee83a 	callr	r16
 4049d4c:	dfc00617 	ldw	ra,24(sp)
 4049d50:	dc400517 	ldw	r17,20(sp)
 4049d54:	dc000417 	ldw	r16,16(sp)
 4049d58:	dec00704 	addi	sp,sp,28
 4049d5c:	f800283a 	ret

04049d60 <__udivdi3>:
 4049d60:	defff504 	addi	sp,sp,-44
 4049d64:	dcc00415 	stw	r19,16(sp)
 4049d68:	dc000115 	stw	r16,4(sp)
 4049d6c:	dfc00a15 	stw	ra,40(sp)
 4049d70:	df000915 	stw	fp,36(sp)
 4049d74:	ddc00815 	stw	r23,32(sp)
 4049d78:	dd800715 	stw	r22,28(sp)
 4049d7c:	dd400615 	stw	r21,24(sp)
 4049d80:	dd000515 	stw	r20,20(sp)
 4049d84:	dc800315 	stw	r18,12(sp)
 4049d88:	dc400215 	stw	r17,8(sp)
 4049d8c:	2027883a 	mov	r19,r4
 4049d90:	2821883a 	mov	r16,r5
 4049d94:	3800411e 	bne	r7,zero,4049e9c <__udivdi3+0x13c>
 4049d98:	3023883a 	mov	r17,r6
 4049d9c:	2025883a 	mov	r18,r4
 4049da0:	2980522e 	bgeu	r5,r6,4049eec <__udivdi3+0x18c>
 4049da4:	00bfffd4 	movui	r2,65535
 4049da8:	282d883a 	mov	r22,r5
 4049dac:	1180a836 	bltu	r2,r6,404a050 <__udivdi3+0x2f0>
 4049db0:	00803fc4 	movi	r2,255
 4049db4:	1185803a 	cmpltu	r2,r2,r6
 4049db8:	100490fa 	slli	r2,r2,3
 4049dbc:	3086d83a 	srl	r3,r6,r2
 4049dc0:	01010174 	movhi	r4,1029
 4049dc4:	21012204 	addi	r4,r4,1160
 4049dc8:	20c7883a 	add	r3,r4,r3
 4049dcc:	18c00003 	ldbu	r3,0(r3)
 4049dd0:	1885883a 	add	r2,r3,r2
 4049dd4:	00c00804 	movi	r3,32
 4049dd8:	1887c83a 	sub	r3,r3,r2
 4049ddc:	18000526 	beq	r3,zero,4049df4 <__udivdi3+0x94>
 4049de0:	80e0983a 	sll	r16,r16,r3
 4049de4:	9884d83a 	srl	r2,r19,r2
 4049de8:	30e2983a 	sll	r17,r6,r3
 4049dec:	98e4983a 	sll	r18,r19,r3
 4049df0:	142cb03a 	or	r22,r2,r16
 4049df4:	882ad43a 	srli	r21,r17,16
 4049df8:	b009883a 	mov	r4,r22
 4049dfc:	8d3fffcc 	andi	r20,r17,65535
 4049e00:	a80b883a 	mov	r5,r21
 4049e04:	404a96c0 	call	404a96c <__umodsi3>
 4049e08:	b009883a 	mov	r4,r22
 4049e0c:	a80b883a 	mov	r5,r21
 4049e10:	1027883a 	mov	r19,r2
 4049e14:	404a9080 	call	404a908 <__udivsi3>
 4049e18:	102d883a 	mov	r22,r2
 4049e1c:	9826943a 	slli	r19,r19,16
 4049e20:	9004d43a 	srli	r2,r18,16
 4049e24:	a5a1383a 	mul	r16,r20,r22
 4049e28:	14c4b03a 	or	r2,r2,r19
 4049e2c:	1400052e 	bgeu	r2,r16,4049e44 <__udivdi3+0xe4>
 4049e30:	1445883a 	add	r2,r2,r17
 4049e34:	b0ffffc4 	addi	r3,r22,-1
 4049e38:	14400136 	bltu	r2,r17,4049e40 <__udivdi3+0xe0>
 4049e3c:	14012336 	bltu	r2,r16,404a2cc <__udivdi3+0x56c>
 4049e40:	182d883a 	mov	r22,r3
 4049e44:	1421c83a 	sub	r16,r2,r16
 4049e48:	a80b883a 	mov	r5,r21
 4049e4c:	8009883a 	mov	r4,r16
 4049e50:	404a96c0 	call	404a96c <__umodsi3>
 4049e54:	1027883a 	mov	r19,r2
 4049e58:	a80b883a 	mov	r5,r21
 4049e5c:	8009883a 	mov	r4,r16
 4049e60:	404a9080 	call	404a908 <__udivsi3>
 4049e64:	9826943a 	slli	r19,r19,16
 4049e68:	a0a9383a 	mul	r20,r20,r2
 4049e6c:	94bfffcc 	andi	r18,r18,65535
 4049e70:	94e4b03a 	or	r18,r18,r19
 4049e74:	9500052e 	bgeu	r18,r20,4049e8c <__udivdi3+0x12c>
 4049e78:	8ca5883a 	add	r18,r17,r18
 4049e7c:	10ffffc4 	addi	r3,r2,-1
 4049e80:	9440f136 	bltu	r18,r17,404a248 <__udivdi3+0x4e8>
 4049e84:	9500f02e 	bgeu	r18,r20,404a248 <__udivdi3+0x4e8>
 4049e88:	10bfff84 	addi	r2,r2,-2
 4049e8c:	b00c943a 	slli	r6,r22,16
 4049e90:	0007883a 	mov	r3,zero
 4049e94:	3084b03a 	or	r2,r6,r2
 4049e98:	00005906 	br	404a000 <__udivdi3+0x2a0>
 4049e9c:	29c05636 	bltu	r5,r7,4049ff8 <__udivdi3+0x298>
 4049ea0:	00bfffd4 	movui	r2,65535
 4049ea4:	11c0622e 	bgeu	r2,r7,404a030 <__udivdi3+0x2d0>
 4049ea8:	00804034 	movhi	r2,256
 4049eac:	10bfffc4 	addi	r2,r2,-1
 4049eb0:	11c0ee36 	bltu	r2,r7,404a26c <__udivdi3+0x50c>
 4049eb4:	00800404 	movi	r2,16
 4049eb8:	3886d83a 	srl	r3,r7,r2
 4049ebc:	01010174 	movhi	r4,1029
 4049ec0:	21012204 	addi	r4,r4,1160
 4049ec4:	20c7883a 	add	r3,r4,r3
 4049ec8:	18c00003 	ldbu	r3,0(r3)
 4049ecc:	05400804 	movi	r21,32
 4049ed0:	1885883a 	add	r2,r3,r2
 4049ed4:	a8abc83a 	sub	r21,r21,r2
 4049ed8:	a800621e 	bne	r21,zero,404a064 <__udivdi3+0x304>
 4049edc:	3c00e936 	bltu	r7,r16,404a284 <__udivdi3+0x524>
 4049ee0:	9985403a 	cmpgeu	r2,r19,r6
 4049ee4:	0007883a 	mov	r3,zero
 4049ee8:	00004506 	br	404a000 <__udivdi3+0x2a0>
 4049eec:	3000041e 	bne	r6,zero,4049f00 <__udivdi3+0x1a0>
 4049ef0:	000b883a 	mov	r5,zero
 4049ef4:	01000044 	movi	r4,1
 4049ef8:	404a9080 	call	404a908 <__udivsi3>
 4049efc:	1023883a 	mov	r17,r2
 4049f00:	00bfffd4 	movui	r2,65535
 4049f04:	14404e2e 	bgeu	r2,r17,404a040 <__udivdi3+0x2e0>
 4049f08:	00804034 	movhi	r2,256
 4049f0c:	10bfffc4 	addi	r2,r2,-1
 4049f10:	1440d836 	bltu	r2,r17,404a274 <__udivdi3+0x514>
 4049f14:	00800404 	movi	r2,16
 4049f18:	8886d83a 	srl	r3,r17,r2
 4049f1c:	01010174 	movhi	r4,1029
 4049f20:	21012204 	addi	r4,r4,1160
 4049f24:	20c7883a 	add	r3,r4,r3
 4049f28:	18c00003 	ldbu	r3,0(r3)
 4049f2c:	1885883a 	add	r2,r3,r2
 4049f30:	00c00804 	movi	r3,32
 4049f34:	1887c83a 	sub	r3,r3,r2
 4049f38:	18008f1e 	bne	r3,zero,404a178 <__udivdi3+0x418>
 4049f3c:	882ad43a 	srli	r21,r17,16
 4049f40:	8461c83a 	sub	r16,r16,r17
 4049f44:	8d3fffcc 	andi	r20,r17,65535
 4049f48:	00c00044 	movi	r3,1
 4049f4c:	8009883a 	mov	r4,r16
 4049f50:	a80b883a 	mov	r5,r21
 4049f54:	d8c00015 	stw	r3,0(sp)
 4049f58:	404a96c0 	call	404a96c <__umodsi3>
 4049f5c:	8009883a 	mov	r4,r16
 4049f60:	a80b883a 	mov	r5,r21
 4049f64:	1027883a 	mov	r19,r2
 4049f68:	404a9080 	call	404a908 <__udivsi3>
 4049f6c:	9826943a 	slli	r19,r19,16
 4049f70:	9008d43a 	srli	r4,r18,16
 4049f74:	1521383a 	mul	r16,r2,r20
 4049f78:	102d883a 	mov	r22,r2
 4049f7c:	24c8b03a 	or	r4,r4,r19
 4049f80:	d8c00017 	ldw	r3,0(sp)
 4049f84:	2400052e 	bgeu	r4,r16,4049f9c <__udivdi3+0x23c>
 4049f88:	2449883a 	add	r4,r4,r17
 4049f8c:	b0bfffc4 	addi	r2,r22,-1
 4049f90:	24400136 	bltu	r4,r17,4049f98 <__udivdi3+0x238>
 4049f94:	2400ca36 	bltu	r4,r16,404a2c0 <__udivdi3+0x560>
 4049f98:	102d883a 	mov	r22,r2
 4049f9c:	2421c83a 	sub	r16,r4,r16
 4049fa0:	a80b883a 	mov	r5,r21
 4049fa4:	8009883a 	mov	r4,r16
 4049fa8:	d8c00015 	stw	r3,0(sp)
 4049fac:	404a96c0 	call	404a96c <__umodsi3>
 4049fb0:	1027883a 	mov	r19,r2
 4049fb4:	a80b883a 	mov	r5,r21
 4049fb8:	8009883a 	mov	r4,r16
 4049fbc:	404a9080 	call	404a908 <__udivsi3>
 4049fc0:	9826943a 	slli	r19,r19,16
 4049fc4:	1529383a 	mul	r20,r2,r20
 4049fc8:	94bfffcc 	andi	r18,r18,65535
 4049fcc:	94e4b03a 	or	r18,r18,r19
 4049fd0:	d8c00017 	ldw	r3,0(sp)
 4049fd4:	9500052e 	bgeu	r18,r20,4049fec <__udivdi3+0x28c>
 4049fd8:	8ca5883a 	add	r18,r17,r18
 4049fdc:	113fffc4 	addi	r4,r2,-1
 4049fe0:	94409736 	bltu	r18,r17,404a240 <__udivdi3+0x4e0>
 4049fe4:	9500962e 	bgeu	r18,r20,404a240 <__udivdi3+0x4e0>
 4049fe8:	10bfff84 	addi	r2,r2,-2
 4049fec:	b00c943a 	slli	r6,r22,16
 4049ff0:	3084b03a 	or	r2,r6,r2
 4049ff4:	00000206 	br	404a000 <__udivdi3+0x2a0>
 4049ff8:	0007883a 	mov	r3,zero
 4049ffc:	0005883a 	mov	r2,zero
 404a000:	dfc00a17 	ldw	ra,40(sp)
 404a004:	df000917 	ldw	fp,36(sp)
 404a008:	ddc00817 	ldw	r23,32(sp)
 404a00c:	dd800717 	ldw	r22,28(sp)
 404a010:	dd400617 	ldw	r21,24(sp)
 404a014:	dd000517 	ldw	r20,20(sp)
 404a018:	dcc00417 	ldw	r19,16(sp)
 404a01c:	dc800317 	ldw	r18,12(sp)
 404a020:	dc400217 	ldw	r17,8(sp)
 404a024:	dc000117 	ldw	r16,4(sp)
 404a028:	dec00b04 	addi	sp,sp,44
 404a02c:	f800283a 	ret
 404a030:	00803fc4 	movi	r2,255
 404a034:	11c5803a 	cmpltu	r2,r2,r7
 404a038:	100490fa 	slli	r2,r2,3
 404a03c:	003f9e06 	br	4049eb8 <__alt_data_end+0xfffdf6b8>
 404a040:	00803fc4 	movi	r2,255
 404a044:	1445803a 	cmpltu	r2,r2,r17
 404a048:	100490fa 	slli	r2,r2,3
 404a04c:	003fb206 	br	4049f18 <__alt_data_end+0xfffdf718>
 404a050:	00804034 	movhi	r2,256
 404a054:	10bfffc4 	addi	r2,r2,-1
 404a058:	11808836 	bltu	r2,r6,404a27c <__udivdi3+0x51c>
 404a05c:	00800404 	movi	r2,16
 404a060:	003f5606 	br	4049dbc <__alt_data_end+0xfffdf5bc>
 404a064:	30aed83a 	srl	r23,r6,r2
 404a068:	3d4e983a 	sll	r7,r7,r21
 404a06c:	80acd83a 	srl	r22,r16,r2
 404a070:	9884d83a 	srl	r2,r19,r2
 404a074:	3deeb03a 	or	r23,r7,r23
 404a078:	b824d43a 	srli	r18,r23,16
 404a07c:	8560983a 	sll	r16,r16,r21
 404a080:	b009883a 	mov	r4,r22
 404a084:	900b883a 	mov	r5,r18
 404a088:	3568983a 	sll	r20,r6,r21
 404a08c:	1420b03a 	or	r16,r2,r16
 404a090:	404a96c0 	call	404a96c <__umodsi3>
 404a094:	b009883a 	mov	r4,r22
 404a098:	900b883a 	mov	r5,r18
 404a09c:	1023883a 	mov	r17,r2
 404a0a0:	404a9080 	call	404a908 <__udivsi3>
 404a0a4:	8808943a 	slli	r4,r17,16
 404a0a8:	bf3fffcc 	andi	fp,r23,65535
 404a0ac:	8006d43a 	srli	r3,r16,16
 404a0b0:	e0a3383a 	mul	r17,fp,r2
 404a0b4:	100d883a 	mov	r6,r2
 404a0b8:	1906b03a 	or	r3,r3,r4
 404a0bc:	1c40042e 	bgeu	r3,r17,404a0d0 <__udivdi3+0x370>
 404a0c0:	1dc7883a 	add	r3,r3,r23
 404a0c4:	10bfffc4 	addi	r2,r2,-1
 404a0c8:	1dc0752e 	bgeu	r3,r23,404a2a0 <__udivdi3+0x540>
 404a0cc:	100d883a 	mov	r6,r2
 404a0d0:	1c63c83a 	sub	r17,r3,r17
 404a0d4:	900b883a 	mov	r5,r18
 404a0d8:	8809883a 	mov	r4,r17
 404a0dc:	d9800015 	stw	r6,0(sp)
 404a0e0:	404a96c0 	call	404a96c <__umodsi3>
 404a0e4:	102d883a 	mov	r22,r2
 404a0e8:	8809883a 	mov	r4,r17
 404a0ec:	900b883a 	mov	r5,r18
 404a0f0:	404a9080 	call	404a908 <__udivsi3>
 404a0f4:	b02c943a 	slli	r22,r22,16
 404a0f8:	e089383a 	mul	r4,fp,r2
 404a0fc:	843fffcc 	andi	r16,r16,65535
 404a100:	85a0b03a 	or	r16,r16,r22
 404a104:	d9800017 	ldw	r6,0(sp)
 404a108:	8100042e 	bgeu	r16,r4,404a11c <__udivdi3+0x3bc>
 404a10c:	85e1883a 	add	r16,r16,r23
 404a110:	10ffffc4 	addi	r3,r2,-1
 404a114:	85c05e2e 	bgeu	r16,r23,404a290 <__udivdi3+0x530>
 404a118:	1805883a 	mov	r2,r3
 404a11c:	300c943a 	slli	r6,r6,16
 404a120:	a17fffcc 	andi	r5,r20,65535
 404a124:	a028d43a 	srli	r20,r20,16
 404a128:	3084b03a 	or	r2,r6,r2
 404a12c:	10ffffcc 	andi	r3,r2,65535
 404a130:	100cd43a 	srli	r6,r2,16
 404a134:	194f383a 	mul	r7,r3,r5
 404a138:	1d07383a 	mul	r3,r3,r20
 404a13c:	314b383a 	mul	r5,r6,r5
 404a140:	3810d43a 	srli	r8,r7,16
 404a144:	8121c83a 	sub	r16,r16,r4
 404a148:	1947883a 	add	r3,r3,r5
 404a14c:	40c7883a 	add	r3,r8,r3
 404a150:	350d383a 	mul	r6,r6,r20
 404a154:	1940022e 	bgeu	r3,r5,404a160 <__udivdi3+0x400>
 404a158:	01000074 	movhi	r4,1
 404a15c:	310d883a 	add	r6,r6,r4
 404a160:	1828d43a 	srli	r20,r3,16
 404a164:	a18d883a 	add	r6,r20,r6
 404a168:	81803e36 	bltu	r16,r6,404a264 <__udivdi3+0x504>
 404a16c:	81803826 	beq	r16,r6,404a250 <__udivdi3+0x4f0>
 404a170:	0007883a 	mov	r3,zero
 404a174:	003fa206 	br	404a000 <__alt_data_end+0xfffdf800>
 404a178:	88e2983a 	sll	r17,r17,r3
 404a17c:	80a8d83a 	srl	r20,r16,r2
 404a180:	80e0983a 	sll	r16,r16,r3
 404a184:	882ad43a 	srli	r21,r17,16
 404a188:	9884d83a 	srl	r2,r19,r2
 404a18c:	a009883a 	mov	r4,r20
 404a190:	a80b883a 	mov	r5,r21
 404a194:	142eb03a 	or	r23,r2,r16
 404a198:	98e4983a 	sll	r18,r19,r3
 404a19c:	404a96c0 	call	404a96c <__umodsi3>
 404a1a0:	a009883a 	mov	r4,r20
 404a1a4:	a80b883a 	mov	r5,r21
 404a1a8:	1021883a 	mov	r16,r2
 404a1ac:	404a9080 	call	404a908 <__udivsi3>
 404a1b0:	1039883a 	mov	fp,r2
 404a1b4:	8d3fffcc 	andi	r20,r17,65535
 404a1b8:	8020943a 	slli	r16,r16,16
 404a1bc:	b804d43a 	srli	r2,r23,16
 404a1c0:	a72d383a 	mul	r22,r20,fp
 404a1c4:	1404b03a 	or	r2,r2,r16
 404a1c8:	1580062e 	bgeu	r2,r22,404a1e4 <__udivdi3+0x484>
 404a1cc:	1445883a 	add	r2,r2,r17
 404a1d0:	e0ffffc4 	addi	r3,fp,-1
 404a1d4:	14403836 	bltu	r2,r17,404a2b8 <__udivdi3+0x558>
 404a1d8:	1580372e 	bgeu	r2,r22,404a2b8 <__udivdi3+0x558>
 404a1dc:	e73fff84 	addi	fp,fp,-2
 404a1e0:	1445883a 	add	r2,r2,r17
 404a1e4:	15adc83a 	sub	r22,r2,r22
 404a1e8:	a80b883a 	mov	r5,r21
 404a1ec:	b009883a 	mov	r4,r22
 404a1f0:	404a96c0 	call	404a96c <__umodsi3>
 404a1f4:	1027883a 	mov	r19,r2
 404a1f8:	b009883a 	mov	r4,r22
 404a1fc:	a80b883a 	mov	r5,r21
 404a200:	404a9080 	call	404a908 <__udivsi3>
 404a204:	9826943a 	slli	r19,r19,16
 404a208:	a0a1383a 	mul	r16,r20,r2
 404a20c:	b93fffcc 	andi	r4,r23,65535
 404a210:	24c8b03a 	or	r4,r4,r19
 404a214:	2400062e 	bgeu	r4,r16,404a230 <__udivdi3+0x4d0>
 404a218:	2449883a 	add	r4,r4,r17
 404a21c:	10ffffc4 	addi	r3,r2,-1
 404a220:	24402336 	bltu	r4,r17,404a2b0 <__udivdi3+0x550>
 404a224:	2400222e 	bgeu	r4,r16,404a2b0 <__udivdi3+0x550>
 404a228:	10bfff84 	addi	r2,r2,-2
 404a22c:	2449883a 	add	r4,r4,r17
 404a230:	e038943a 	slli	fp,fp,16
 404a234:	2421c83a 	sub	r16,r4,r16
 404a238:	e086b03a 	or	r3,fp,r2
 404a23c:	003f4306 	br	4049f4c <__alt_data_end+0xfffdf74c>
 404a240:	2005883a 	mov	r2,r4
 404a244:	003f6906 	br	4049fec <__alt_data_end+0xfffdf7ec>
 404a248:	1805883a 	mov	r2,r3
 404a24c:	003f0f06 	br	4049e8c <__alt_data_end+0xfffdf68c>
 404a250:	1806943a 	slli	r3,r3,16
 404a254:	9d66983a 	sll	r19,r19,r21
 404a258:	39ffffcc 	andi	r7,r7,65535
 404a25c:	19c7883a 	add	r3,r3,r7
 404a260:	98ffc32e 	bgeu	r19,r3,404a170 <__alt_data_end+0xfffdf970>
 404a264:	10bfffc4 	addi	r2,r2,-1
 404a268:	003fc106 	br	404a170 <__alt_data_end+0xfffdf970>
 404a26c:	00800604 	movi	r2,24
 404a270:	003f1106 	br	4049eb8 <__alt_data_end+0xfffdf6b8>
 404a274:	00800604 	movi	r2,24
 404a278:	003f2706 	br	4049f18 <__alt_data_end+0xfffdf718>
 404a27c:	00800604 	movi	r2,24
 404a280:	003ece06 	br	4049dbc <__alt_data_end+0xfffdf5bc>
 404a284:	0007883a 	mov	r3,zero
 404a288:	00800044 	movi	r2,1
 404a28c:	003f5c06 	br	404a000 <__alt_data_end+0xfffdf800>
 404a290:	813fa12e 	bgeu	r16,r4,404a118 <__alt_data_end+0xfffdf918>
 404a294:	10bfff84 	addi	r2,r2,-2
 404a298:	85e1883a 	add	r16,r16,r23
 404a29c:	003f9f06 	br	404a11c <__alt_data_end+0xfffdf91c>
 404a2a0:	1c7f8a2e 	bgeu	r3,r17,404a0cc <__alt_data_end+0xfffdf8cc>
 404a2a4:	31bfff84 	addi	r6,r6,-2
 404a2a8:	1dc7883a 	add	r3,r3,r23
 404a2ac:	003f8806 	br	404a0d0 <__alt_data_end+0xfffdf8d0>
 404a2b0:	1805883a 	mov	r2,r3
 404a2b4:	003fde06 	br	404a230 <__alt_data_end+0xfffdfa30>
 404a2b8:	1839883a 	mov	fp,r3
 404a2bc:	003fc906 	br	404a1e4 <__alt_data_end+0xfffdf9e4>
 404a2c0:	b5bfff84 	addi	r22,r22,-2
 404a2c4:	2449883a 	add	r4,r4,r17
 404a2c8:	003f3406 	br	4049f9c <__alt_data_end+0xfffdf79c>
 404a2cc:	b5bfff84 	addi	r22,r22,-2
 404a2d0:	1445883a 	add	r2,r2,r17
 404a2d4:	003edb06 	br	4049e44 <__alt_data_end+0xfffdf644>

0404a2d8 <__umoddi3>:
 404a2d8:	defff404 	addi	sp,sp,-48
 404a2dc:	df000a15 	stw	fp,40(sp)
 404a2e0:	dc400315 	stw	r17,12(sp)
 404a2e4:	dc000215 	stw	r16,8(sp)
 404a2e8:	dfc00b15 	stw	ra,44(sp)
 404a2ec:	ddc00915 	stw	r23,36(sp)
 404a2f0:	dd800815 	stw	r22,32(sp)
 404a2f4:	dd400715 	stw	r21,28(sp)
 404a2f8:	dd000615 	stw	r20,24(sp)
 404a2fc:	dcc00515 	stw	r19,20(sp)
 404a300:	dc800415 	stw	r18,16(sp)
 404a304:	2021883a 	mov	r16,r4
 404a308:	2823883a 	mov	r17,r5
 404a30c:	2839883a 	mov	fp,r5
 404a310:	38003c1e 	bne	r7,zero,404a404 <__umoddi3+0x12c>
 404a314:	3027883a 	mov	r19,r6
 404a318:	2029883a 	mov	r20,r4
 404a31c:	2980512e 	bgeu	r5,r6,404a464 <__umoddi3+0x18c>
 404a320:	00bfffd4 	movui	r2,65535
 404a324:	11809a36 	bltu	r2,r6,404a590 <__umoddi3+0x2b8>
 404a328:	01003fc4 	movi	r4,255
 404a32c:	2189803a 	cmpltu	r4,r4,r6
 404a330:	200890fa 	slli	r4,r4,3
 404a334:	3104d83a 	srl	r2,r6,r4
 404a338:	00c10174 	movhi	r3,1029
 404a33c:	18c12204 	addi	r3,r3,1160
 404a340:	1885883a 	add	r2,r3,r2
 404a344:	10c00003 	ldbu	r3,0(r2)
 404a348:	00800804 	movi	r2,32
 404a34c:	1909883a 	add	r4,r3,r4
 404a350:	1125c83a 	sub	r18,r2,r4
 404a354:	90000526 	beq	r18,zero,404a36c <__umoddi3+0x94>
 404a358:	8ca2983a 	sll	r17,r17,r18
 404a35c:	8108d83a 	srl	r4,r16,r4
 404a360:	34a6983a 	sll	r19,r6,r18
 404a364:	84a8983a 	sll	r20,r16,r18
 404a368:	2478b03a 	or	fp,r4,r17
 404a36c:	982ed43a 	srli	r23,r19,16
 404a370:	e009883a 	mov	r4,fp
 404a374:	9dbfffcc 	andi	r22,r19,65535
 404a378:	b80b883a 	mov	r5,r23
 404a37c:	404a96c0 	call	404a96c <__umodsi3>
 404a380:	e009883a 	mov	r4,fp
 404a384:	b80b883a 	mov	r5,r23
 404a388:	102b883a 	mov	r21,r2
 404a38c:	404a9080 	call	404a908 <__udivsi3>
 404a390:	a806943a 	slli	r3,r21,16
 404a394:	a008d43a 	srli	r4,r20,16
 404a398:	b085383a 	mul	r2,r22,r2
 404a39c:	20c8b03a 	or	r4,r4,r3
 404a3a0:	2080032e 	bgeu	r4,r2,404a3b0 <__umoddi3+0xd8>
 404a3a4:	24c9883a 	add	r4,r4,r19
 404a3a8:	24c00136 	bltu	r4,r19,404a3b0 <__umoddi3+0xd8>
 404a3ac:	20811036 	bltu	r4,r2,404a7f0 <__umoddi3+0x518>
 404a3b0:	20abc83a 	sub	r21,r4,r2
 404a3b4:	b80b883a 	mov	r5,r23
 404a3b8:	a809883a 	mov	r4,r21
 404a3bc:	404a96c0 	call	404a96c <__umodsi3>
 404a3c0:	1023883a 	mov	r17,r2
 404a3c4:	b80b883a 	mov	r5,r23
 404a3c8:	a809883a 	mov	r4,r21
 404a3cc:	404a9080 	call	404a908 <__udivsi3>
 404a3d0:	8822943a 	slli	r17,r17,16
 404a3d4:	b085383a 	mul	r2,r22,r2
 404a3d8:	a0ffffcc 	andi	r3,r20,65535
 404a3dc:	1c46b03a 	or	r3,r3,r17
 404a3e0:	1880042e 	bgeu	r3,r2,404a3f4 <__umoddi3+0x11c>
 404a3e4:	1cc7883a 	add	r3,r3,r19
 404a3e8:	1cc00236 	bltu	r3,r19,404a3f4 <__umoddi3+0x11c>
 404a3ec:	1880012e 	bgeu	r3,r2,404a3f4 <__umoddi3+0x11c>
 404a3f0:	1cc7883a 	add	r3,r3,r19
 404a3f4:	1885c83a 	sub	r2,r3,r2
 404a3f8:	1484d83a 	srl	r2,r2,r18
 404a3fc:	0007883a 	mov	r3,zero
 404a400:	00004f06 	br	404a540 <__umoddi3+0x268>
 404a404:	29c04c36 	bltu	r5,r7,404a538 <__umoddi3+0x260>
 404a408:	00bfffd4 	movui	r2,65535
 404a40c:	11c0582e 	bgeu	r2,r7,404a570 <__umoddi3+0x298>
 404a410:	00804034 	movhi	r2,256
 404a414:	10bfffc4 	addi	r2,r2,-1
 404a418:	11c0e736 	bltu	r2,r7,404a7b8 <__umoddi3+0x4e0>
 404a41c:	01000404 	movi	r4,16
 404a420:	3904d83a 	srl	r2,r7,r4
 404a424:	00c10174 	movhi	r3,1029
 404a428:	18c12204 	addi	r3,r3,1160
 404a42c:	1885883a 	add	r2,r3,r2
 404a430:	14c00003 	ldbu	r19,0(r2)
 404a434:	00c00804 	movi	r3,32
 404a438:	9927883a 	add	r19,r19,r4
 404a43c:	1ce9c83a 	sub	r20,r3,r19
 404a440:	a000581e 	bne	r20,zero,404a5a4 <__umoddi3+0x2cc>
 404a444:	3c400136 	bltu	r7,r17,404a44c <__umoddi3+0x174>
 404a448:	8180eb36 	bltu	r16,r6,404a7f8 <__umoddi3+0x520>
 404a44c:	8185c83a 	sub	r2,r16,r6
 404a450:	89e3c83a 	sub	r17,r17,r7
 404a454:	8089803a 	cmpltu	r4,r16,r2
 404a458:	8939c83a 	sub	fp,r17,r4
 404a45c:	e007883a 	mov	r3,fp
 404a460:	00003706 	br	404a540 <__umoddi3+0x268>
 404a464:	3000041e 	bne	r6,zero,404a478 <__umoddi3+0x1a0>
 404a468:	000b883a 	mov	r5,zero
 404a46c:	01000044 	movi	r4,1
 404a470:	404a9080 	call	404a908 <__udivsi3>
 404a474:	1027883a 	mov	r19,r2
 404a478:	00bfffd4 	movui	r2,65535
 404a47c:	14c0402e 	bgeu	r2,r19,404a580 <__umoddi3+0x2a8>
 404a480:	00804034 	movhi	r2,256
 404a484:	10bfffc4 	addi	r2,r2,-1
 404a488:	14c0cd36 	bltu	r2,r19,404a7c0 <__umoddi3+0x4e8>
 404a48c:	00800404 	movi	r2,16
 404a490:	9886d83a 	srl	r3,r19,r2
 404a494:	01010174 	movhi	r4,1029
 404a498:	21012204 	addi	r4,r4,1160
 404a49c:	20c7883a 	add	r3,r4,r3
 404a4a0:	18c00003 	ldbu	r3,0(r3)
 404a4a4:	1887883a 	add	r3,r3,r2
 404a4a8:	00800804 	movi	r2,32
 404a4ac:	10e5c83a 	sub	r18,r2,r3
 404a4b0:	9000901e 	bne	r18,zero,404a6f4 <__umoddi3+0x41c>
 404a4b4:	982cd43a 	srli	r22,r19,16
 404a4b8:	8ce3c83a 	sub	r17,r17,r19
 404a4bc:	9d7fffcc 	andi	r21,r19,65535
 404a4c0:	b00b883a 	mov	r5,r22
 404a4c4:	8809883a 	mov	r4,r17
 404a4c8:	404a96c0 	call	404a96c <__umodsi3>
 404a4cc:	8809883a 	mov	r4,r17
 404a4d0:	b00b883a 	mov	r5,r22
 404a4d4:	1021883a 	mov	r16,r2
 404a4d8:	404a9080 	call	404a908 <__udivsi3>
 404a4dc:	8006943a 	slli	r3,r16,16
 404a4e0:	a008d43a 	srli	r4,r20,16
 404a4e4:	1545383a 	mul	r2,r2,r21
 404a4e8:	20c8b03a 	or	r4,r4,r3
 404a4ec:	2080042e 	bgeu	r4,r2,404a500 <__umoddi3+0x228>
 404a4f0:	24c9883a 	add	r4,r4,r19
 404a4f4:	24c00236 	bltu	r4,r19,404a500 <__umoddi3+0x228>
 404a4f8:	2080012e 	bgeu	r4,r2,404a500 <__umoddi3+0x228>
 404a4fc:	24c9883a 	add	r4,r4,r19
 404a500:	20a1c83a 	sub	r16,r4,r2
 404a504:	b00b883a 	mov	r5,r22
 404a508:	8009883a 	mov	r4,r16
 404a50c:	404a96c0 	call	404a96c <__umodsi3>
 404a510:	1023883a 	mov	r17,r2
 404a514:	b00b883a 	mov	r5,r22
 404a518:	8009883a 	mov	r4,r16
 404a51c:	404a9080 	call	404a908 <__udivsi3>
 404a520:	8822943a 	slli	r17,r17,16
 404a524:	1545383a 	mul	r2,r2,r21
 404a528:	a53fffcc 	andi	r20,r20,65535
 404a52c:	a446b03a 	or	r3,r20,r17
 404a530:	18bfb02e 	bgeu	r3,r2,404a3f4 <__alt_data_end+0xfffdfbf4>
 404a534:	003fab06 	br	404a3e4 <__alt_data_end+0xfffdfbe4>
 404a538:	2005883a 	mov	r2,r4
 404a53c:	2807883a 	mov	r3,r5
 404a540:	dfc00b17 	ldw	ra,44(sp)
 404a544:	df000a17 	ldw	fp,40(sp)
 404a548:	ddc00917 	ldw	r23,36(sp)
 404a54c:	dd800817 	ldw	r22,32(sp)
 404a550:	dd400717 	ldw	r21,28(sp)
 404a554:	dd000617 	ldw	r20,24(sp)
 404a558:	dcc00517 	ldw	r19,20(sp)
 404a55c:	dc800417 	ldw	r18,16(sp)
 404a560:	dc400317 	ldw	r17,12(sp)
 404a564:	dc000217 	ldw	r16,8(sp)
 404a568:	dec00c04 	addi	sp,sp,48
 404a56c:	f800283a 	ret
 404a570:	04c03fc4 	movi	r19,255
 404a574:	99c9803a 	cmpltu	r4,r19,r7
 404a578:	200890fa 	slli	r4,r4,3
 404a57c:	003fa806 	br	404a420 <__alt_data_end+0xfffdfc20>
 404a580:	00803fc4 	movi	r2,255
 404a584:	14c5803a 	cmpltu	r2,r2,r19
 404a588:	100490fa 	slli	r2,r2,3
 404a58c:	003fc006 	br	404a490 <__alt_data_end+0xfffdfc90>
 404a590:	00804034 	movhi	r2,256
 404a594:	10bfffc4 	addi	r2,r2,-1
 404a598:	11808b36 	bltu	r2,r6,404a7c8 <__umoddi3+0x4f0>
 404a59c:	01000404 	movi	r4,16
 404a5a0:	003f6406 	br	404a334 <__alt_data_end+0xfffdfb34>
 404a5a4:	34c4d83a 	srl	r2,r6,r19
 404a5a8:	3d0e983a 	sll	r7,r7,r20
 404a5ac:	8cf8d83a 	srl	fp,r17,r19
 404a5b0:	8d10983a 	sll	r8,r17,r20
 404a5b4:	38aab03a 	or	r21,r7,r2
 404a5b8:	a82cd43a 	srli	r22,r21,16
 404a5bc:	84e2d83a 	srl	r17,r16,r19
 404a5c0:	e009883a 	mov	r4,fp
 404a5c4:	b00b883a 	mov	r5,r22
 404a5c8:	8a22b03a 	or	r17,r17,r8
 404a5cc:	3524983a 	sll	r18,r6,r20
 404a5d0:	404a96c0 	call	404a96c <__umodsi3>
 404a5d4:	e009883a 	mov	r4,fp
 404a5d8:	b00b883a 	mov	r5,r22
 404a5dc:	102f883a 	mov	r23,r2
 404a5e0:	404a9080 	call	404a908 <__udivsi3>
 404a5e4:	100d883a 	mov	r6,r2
 404a5e8:	b808943a 	slli	r4,r23,16
 404a5ec:	aa3fffcc 	andi	r8,r21,65535
 404a5f0:	8804d43a 	srli	r2,r17,16
 404a5f4:	41af383a 	mul	r23,r8,r6
 404a5f8:	8520983a 	sll	r16,r16,r20
 404a5fc:	1104b03a 	or	r2,r2,r4
 404a600:	15c0042e 	bgeu	r2,r23,404a614 <__umoddi3+0x33c>
 404a604:	1545883a 	add	r2,r2,r21
 404a608:	30ffffc4 	addi	r3,r6,-1
 404a60c:	1540742e 	bgeu	r2,r21,404a7e0 <__umoddi3+0x508>
 404a610:	180d883a 	mov	r6,r3
 404a614:	15efc83a 	sub	r23,r2,r23
 404a618:	b00b883a 	mov	r5,r22
 404a61c:	b809883a 	mov	r4,r23
 404a620:	d9800115 	stw	r6,4(sp)
 404a624:	da000015 	stw	r8,0(sp)
 404a628:	404a96c0 	call	404a96c <__umodsi3>
 404a62c:	b00b883a 	mov	r5,r22
 404a630:	b809883a 	mov	r4,r23
 404a634:	1039883a 	mov	fp,r2
 404a638:	404a9080 	call	404a908 <__udivsi3>
 404a63c:	da000017 	ldw	r8,0(sp)
 404a640:	e038943a 	slli	fp,fp,16
 404a644:	100b883a 	mov	r5,r2
 404a648:	4089383a 	mul	r4,r8,r2
 404a64c:	8a3fffcc 	andi	r8,r17,65535
 404a650:	4710b03a 	or	r8,r8,fp
 404a654:	d9800117 	ldw	r6,4(sp)
 404a658:	4100042e 	bgeu	r8,r4,404a66c <__umoddi3+0x394>
 404a65c:	4551883a 	add	r8,r8,r21
 404a660:	10bfffc4 	addi	r2,r2,-1
 404a664:	45405a2e 	bgeu	r8,r21,404a7d0 <__umoddi3+0x4f8>
 404a668:	100b883a 	mov	r5,r2
 404a66c:	300c943a 	slli	r6,r6,16
 404a670:	91ffffcc 	andi	r7,r18,65535
 404a674:	9004d43a 	srli	r2,r18,16
 404a678:	314cb03a 	or	r6,r6,r5
 404a67c:	317fffcc 	andi	r5,r6,65535
 404a680:	300cd43a 	srli	r6,r6,16
 404a684:	29d3383a 	mul	r9,r5,r7
 404a688:	288b383a 	mul	r5,r5,r2
 404a68c:	31cf383a 	mul	r7,r6,r7
 404a690:	4806d43a 	srli	r3,r9,16
 404a694:	4111c83a 	sub	r8,r8,r4
 404a698:	29cb883a 	add	r5,r5,r7
 404a69c:	194b883a 	add	r5,r3,r5
 404a6a0:	3085383a 	mul	r2,r6,r2
 404a6a4:	29c0022e 	bgeu	r5,r7,404a6b0 <__umoddi3+0x3d8>
 404a6a8:	00c00074 	movhi	r3,1
 404a6ac:	10c5883a 	add	r2,r2,r3
 404a6b0:	2808d43a 	srli	r4,r5,16
 404a6b4:	280a943a 	slli	r5,r5,16
 404a6b8:	4a7fffcc 	andi	r9,r9,65535
 404a6bc:	2085883a 	add	r2,r4,r2
 404a6c0:	2a4b883a 	add	r5,r5,r9
 404a6c4:	40803636 	bltu	r8,r2,404a7a0 <__umoddi3+0x4c8>
 404a6c8:	40804d26 	beq	r8,r2,404a800 <__umoddi3+0x528>
 404a6cc:	4089c83a 	sub	r4,r8,r2
 404a6d0:	280f883a 	mov	r7,r5
 404a6d4:	81cfc83a 	sub	r7,r16,r7
 404a6d8:	81c7803a 	cmpltu	r3,r16,r7
 404a6dc:	20c7c83a 	sub	r3,r4,r3
 404a6e0:	1cc4983a 	sll	r2,r3,r19
 404a6e4:	3d0ed83a 	srl	r7,r7,r20
 404a6e8:	1d06d83a 	srl	r3,r3,r20
 404a6ec:	11c4b03a 	or	r2,r2,r7
 404a6f0:	003f9306 	br	404a540 <__alt_data_end+0xfffdfd40>
 404a6f4:	9ca6983a 	sll	r19,r19,r18
 404a6f8:	88e8d83a 	srl	r20,r17,r3
 404a6fc:	80c4d83a 	srl	r2,r16,r3
 404a700:	982cd43a 	srli	r22,r19,16
 404a704:	8ca2983a 	sll	r17,r17,r18
 404a708:	a009883a 	mov	r4,r20
 404a70c:	b00b883a 	mov	r5,r22
 404a710:	1478b03a 	or	fp,r2,r17
 404a714:	404a96c0 	call	404a96c <__umodsi3>
 404a718:	a009883a 	mov	r4,r20
 404a71c:	b00b883a 	mov	r5,r22
 404a720:	1023883a 	mov	r17,r2
 404a724:	404a9080 	call	404a908 <__udivsi3>
 404a728:	9d7fffcc 	andi	r21,r19,65535
 404a72c:	880a943a 	slli	r5,r17,16
 404a730:	e008d43a 	srli	r4,fp,16
 404a734:	a885383a 	mul	r2,r21,r2
 404a738:	84a8983a 	sll	r20,r16,r18
 404a73c:	2148b03a 	or	r4,r4,r5
 404a740:	2080042e 	bgeu	r4,r2,404a754 <__umoddi3+0x47c>
 404a744:	24c9883a 	add	r4,r4,r19
 404a748:	24c00236 	bltu	r4,r19,404a754 <__umoddi3+0x47c>
 404a74c:	2080012e 	bgeu	r4,r2,404a754 <__umoddi3+0x47c>
 404a750:	24c9883a 	add	r4,r4,r19
 404a754:	20a3c83a 	sub	r17,r4,r2
 404a758:	b00b883a 	mov	r5,r22
 404a75c:	8809883a 	mov	r4,r17
 404a760:	404a96c0 	call	404a96c <__umodsi3>
 404a764:	102f883a 	mov	r23,r2
 404a768:	8809883a 	mov	r4,r17
 404a76c:	b00b883a 	mov	r5,r22
 404a770:	404a9080 	call	404a908 <__udivsi3>
 404a774:	b82e943a 	slli	r23,r23,16
 404a778:	a885383a 	mul	r2,r21,r2
 404a77c:	e13fffcc 	andi	r4,fp,65535
 404a780:	25c8b03a 	or	r4,r4,r23
 404a784:	2080042e 	bgeu	r4,r2,404a798 <__umoddi3+0x4c0>
 404a788:	24c9883a 	add	r4,r4,r19
 404a78c:	24c00236 	bltu	r4,r19,404a798 <__umoddi3+0x4c0>
 404a790:	2080012e 	bgeu	r4,r2,404a798 <__umoddi3+0x4c0>
 404a794:	24c9883a 	add	r4,r4,r19
 404a798:	20a3c83a 	sub	r17,r4,r2
 404a79c:	003f4806 	br	404a4c0 <__alt_data_end+0xfffdfcc0>
 404a7a0:	2c8fc83a 	sub	r7,r5,r18
 404a7a4:	1545c83a 	sub	r2,r2,r21
 404a7a8:	29cb803a 	cmpltu	r5,r5,r7
 404a7ac:	1145c83a 	sub	r2,r2,r5
 404a7b0:	4089c83a 	sub	r4,r8,r2
 404a7b4:	003fc706 	br	404a6d4 <__alt_data_end+0xfffdfed4>
 404a7b8:	01000604 	movi	r4,24
 404a7bc:	003f1806 	br	404a420 <__alt_data_end+0xfffdfc20>
 404a7c0:	00800604 	movi	r2,24
 404a7c4:	003f3206 	br	404a490 <__alt_data_end+0xfffdfc90>
 404a7c8:	01000604 	movi	r4,24
 404a7cc:	003ed906 	br	404a334 <__alt_data_end+0xfffdfb34>
 404a7d0:	413fa52e 	bgeu	r8,r4,404a668 <__alt_data_end+0xfffdfe68>
 404a7d4:	297fff84 	addi	r5,r5,-2
 404a7d8:	4551883a 	add	r8,r8,r21
 404a7dc:	003fa306 	br	404a66c <__alt_data_end+0xfffdfe6c>
 404a7e0:	15ff8b2e 	bgeu	r2,r23,404a610 <__alt_data_end+0xfffdfe10>
 404a7e4:	31bfff84 	addi	r6,r6,-2
 404a7e8:	1545883a 	add	r2,r2,r21
 404a7ec:	003f8906 	br	404a614 <__alt_data_end+0xfffdfe14>
 404a7f0:	24c9883a 	add	r4,r4,r19
 404a7f4:	003eee06 	br	404a3b0 <__alt_data_end+0xfffdfbb0>
 404a7f8:	8005883a 	mov	r2,r16
 404a7fc:	003f1706 	br	404a45c <__alt_data_end+0xfffdfc5c>
 404a800:	817fe736 	bltu	r16,r5,404a7a0 <__alt_data_end+0xfffdffa0>
 404a804:	280f883a 	mov	r7,r5
 404a808:	0009883a 	mov	r4,zero
 404a80c:	003fb106 	br	404a6d4 <__alt_data_end+0xfffdfed4>

0404a810 <__divsi3>:
 404a810:	20001b16 	blt	r4,zero,404a880 <__divsi3+0x70>
 404a814:	000f883a 	mov	r7,zero
 404a818:	28001616 	blt	r5,zero,404a874 <__divsi3+0x64>
 404a81c:	200d883a 	mov	r6,r4
 404a820:	29001a2e 	bgeu	r5,r4,404a88c <__divsi3+0x7c>
 404a824:	00800804 	movi	r2,32
 404a828:	00c00044 	movi	r3,1
 404a82c:	00000106 	br	404a834 <__divsi3+0x24>
 404a830:	10000d26 	beq	r2,zero,404a868 <__divsi3+0x58>
 404a834:	294b883a 	add	r5,r5,r5
 404a838:	10bfffc4 	addi	r2,r2,-1
 404a83c:	18c7883a 	add	r3,r3,r3
 404a840:	293ffb36 	bltu	r5,r4,404a830 <__alt_data_end+0xfffe0030>
 404a844:	0005883a 	mov	r2,zero
 404a848:	18000726 	beq	r3,zero,404a868 <__divsi3+0x58>
 404a84c:	0005883a 	mov	r2,zero
 404a850:	31400236 	bltu	r6,r5,404a85c <__divsi3+0x4c>
 404a854:	314dc83a 	sub	r6,r6,r5
 404a858:	10c4b03a 	or	r2,r2,r3
 404a85c:	1806d07a 	srli	r3,r3,1
 404a860:	280ad07a 	srli	r5,r5,1
 404a864:	183ffa1e 	bne	r3,zero,404a850 <__alt_data_end+0xfffe0050>
 404a868:	38000126 	beq	r7,zero,404a870 <__divsi3+0x60>
 404a86c:	0085c83a 	sub	r2,zero,r2
 404a870:	f800283a 	ret
 404a874:	014bc83a 	sub	r5,zero,r5
 404a878:	39c0005c 	xori	r7,r7,1
 404a87c:	003fe706 	br	404a81c <__alt_data_end+0xfffe001c>
 404a880:	0109c83a 	sub	r4,zero,r4
 404a884:	01c00044 	movi	r7,1
 404a888:	003fe306 	br	404a818 <__alt_data_end+0xfffe0018>
 404a88c:	00c00044 	movi	r3,1
 404a890:	003fee06 	br	404a84c <__alt_data_end+0xfffe004c>

0404a894 <__modsi3>:
 404a894:	20001716 	blt	r4,zero,404a8f4 <__modsi3+0x60>
 404a898:	000f883a 	mov	r7,zero
 404a89c:	2005883a 	mov	r2,r4
 404a8a0:	28001216 	blt	r5,zero,404a8ec <__modsi3+0x58>
 404a8a4:	2900162e 	bgeu	r5,r4,404a900 <__modsi3+0x6c>
 404a8a8:	01800804 	movi	r6,32
 404a8ac:	00c00044 	movi	r3,1
 404a8b0:	00000106 	br	404a8b8 <__modsi3+0x24>
 404a8b4:	30000a26 	beq	r6,zero,404a8e0 <__modsi3+0x4c>
 404a8b8:	294b883a 	add	r5,r5,r5
 404a8bc:	31bfffc4 	addi	r6,r6,-1
 404a8c0:	18c7883a 	add	r3,r3,r3
 404a8c4:	293ffb36 	bltu	r5,r4,404a8b4 <__alt_data_end+0xfffe00b4>
 404a8c8:	18000526 	beq	r3,zero,404a8e0 <__modsi3+0x4c>
 404a8cc:	1806d07a 	srli	r3,r3,1
 404a8d0:	11400136 	bltu	r2,r5,404a8d8 <__modsi3+0x44>
 404a8d4:	1145c83a 	sub	r2,r2,r5
 404a8d8:	280ad07a 	srli	r5,r5,1
 404a8dc:	183ffb1e 	bne	r3,zero,404a8cc <__alt_data_end+0xfffe00cc>
 404a8e0:	38000126 	beq	r7,zero,404a8e8 <__modsi3+0x54>
 404a8e4:	0085c83a 	sub	r2,zero,r2
 404a8e8:	f800283a 	ret
 404a8ec:	014bc83a 	sub	r5,zero,r5
 404a8f0:	003fec06 	br	404a8a4 <__alt_data_end+0xfffe00a4>
 404a8f4:	0109c83a 	sub	r4,zero,r4
 404a8f8:	01c00044 	movi	r7,1
 404a8fc:	003fe706 	br	404a89c <__alt_data_end+0xfffe009c>
 404a900:	00c00044 	movi	r3,1
 404a904:	003ff106 	br	404a8cc <__alt_data_end+0xfffe00cc>

0404a908 <__udivsi3>:
 404a908:	200d883a 	mov	r6,r4
 404a90c:	2900152e 	bgeu	r5,r4,404a964 <__udivsi3+0x5c>
 404a910:	28001416 	blt	r5,zero,404a964 <__udivsi3+0x5c>
 404a914:	00800804 	movi	r2,32
 404a918:	00c00044 	movi	r3,1
 404a91c:	00000206 	br	404a928 <__udivsi3+0x20>
 404a920:	10000e26 	beq	r2,zero,404a95c <__udivsi3+0x54>
 404a924:	28000516 	blt	r5,zero,404a93c <__udivsi3+0x34>
 404a928:	294b883a 	add	r5,r5,r5
 404a92c:	10bfffc4 	addi	r2,r2,-1
 404a930:	18c7883a 	add	r3,r3,r3
 404a934:	293ffa36 	bltu	r5,r4,404a920 <__alt_data_end+0xfffe0120>
 404a938:	18000826 	beq	r3,zero,404a95c <__udivsi3+0x54>
 404a93c:	0005883a 	mov	r2,zero
 404a940:	31400236 	bltu	r6,r5,404a94c <__udivsi3+0x44>
 404a944:	314dc83a 	sub	r6,r6,r5
 404a948:	10c4b03a 	or	r2,r2,r3
 404a94c:	1806d07a 	srli	r3,r3,1
 404a950:	280ad07a 	srli	r5,r5,1
 404a954:	183ffa1e 	bne	r3,zero,404a940 <__alt_data_end+0xfffe0140>
 404a958:	f800283a 	ret
 404a95c:	0005883a 	mov	r2,zero
 404a960:	f800283a 	ret
 404a964:	00c00044 	movi	r3,1
 404a968:	003ff406 	br	404a93c <__alt_data_end+0xfffe013c>

0404a96c <__umodsi3>:
 404a96c:	2005883a 	mov	r2,r4
 404a970:	2900122e 	bgeu	r5,r4,404a9bc <__umodsi3+0x50>
 404a974:	28001116 	blt	r5,zero,404a9bc <__umodsi3+0x50>
 404a978:	01800804 	movi	r6,32
 404a97c:	00c00044 	movi	r3,1
 404a980:	00000206 	br	404a98c <__umodsi3+0x20>
 404a984:	30000c26 	beq	r6,zero,404a9b8 <__umodsi3+0x4c>
 404a988:	28000516 	blt	r5,zero,404a9a0 <__umodsi3+0x34>
 404a98c:	294b883a 	add	r5,r5,r5
 404a990:	31bfffc4 	addi	r6,r6,-1
 404a994:	18c7883a 	add	r3,r3,r3
 404a998:	293ffa36 	bltu	r5,r4,404a984 <__alt_data_end+0xfffe0184>
 404a99c:	18000626 	beq	r3,zero,404a9b8 <__umodsi3+0x4c>
 404a9a0:	1806d07a 	srli	r3,r3,1
 404a9a4:	11400136 	bltu	r2,r5,404a9ac <__umodsi3+0x40>
 404a9a8:	1145c83a 	sub	r2,r2,r5
 404a9ac:	280ad07a 	srli	r5,r5,1
 404a9b0:	183ffb1e 	bne	r3,zero,404a9a0 <__alt_data_end+0xfffe01a0>
 404a9b4:	f800283a 	ret
 404a9b8:	f800283a 	ret
 404a9bc:	00c00044 	movi	r3,1
 404a9c0:	003ff706 	br	404a9a0 <__alt_data_end+0xfffe01a0>

0404a9c4 <__adddf3>:
 404a9c4:	02c00434 	movhi	r11,16
 404a9c8:	5affffc4 	addi	r11,r11,-1
 404a9cc:	2806d7fa 	srli	r3,r5,31
 404a9d0:	2ad4703a 	and	r10,r5,r11
 404a9d4:	3ad2703a 	and	r9,r7,r11
 404a9d8:	3804d53a 	srli	r2,r7,20
 404a9dc:	3018d77a 	srli	r12,r6,29
 404a9e0:	280ad53a 	srli	r5,r5,20
 404a9e4:	501490fa 	slli	r10,r10,3
 404a9e8:	2010d77a 	srli	r8,r4,29
 404a9ec:	481290fa 	slli	r9,r9,3
 404a9f0:	380ed7fa 	srli	r7,r7,31
 404a9f4:	defffb04 	addi	sp,sp,-20
 404a9f8:	dc800215 	stw	r18,8(sp)
 404a9fc:	dc400115 	stw	r17,4(sp)
 404aa00:	dc000015 	stw	r16,0(sp)
 404aa04:	dfc00415 	stw	ra,16(sp)
 404aa08:	dcc00315 	stw	r19,12(sp)
 404aa0c:	1c803fcc 	andi	r18,r3,255
 404aa10:	2c01ffcc 	andi	r16,r5,2047
 404aa14:	5210b03a 	or	r8,r10,r8
 404aa18:	202290fa 	slli	r17,r4,3
 404aa1c:	1081ffcc 	andi	r2,r2,2047
 404aa20:	4b12b03a 	or	r9,r9,r12
 404aa24:	300c90fa 	slli	r6,r6,3
 404aa28:	91c07526 	beq	r18,r7,404ac00 <__adddf3+0x23c>
 404aa2c:	8087c83a 	sub	r3,r16,r2
 404aa30:	00c0ab0e 	bge	zero,r3,404ace0 <__adddf3+0x31c>
 404aa34:	10002a1e 	bne	r2,zero,404aae0 <__adddf3+0x11c>
 404aa38:	4984b03a 	or	r2,r9,r6
 404aa3c:	1000961e 	bne	r2,zero,404ac98 <__adddf3+0x2d4>
 404aa40:	888001cc 	andi	r2,r17,7
 404aa44:	10000726 	beq	r2,zero,404aa64 <__adddf3+0xa0>
 404aa48:	888003cc 	andi	r2,r17,15
 404aa4c:	00c00104 	movi	r3,4
 404aa50:	10c00426 	beq	r2,r3,404aa64 <__adddf3+0xa0>
 404aa54:	88c7883a 	add	r3,r17,r3
 404aa58:	1c63803a 	cmpltu	r17,r3,r17
 404aa5c:	4451883a 	add	r8,r8,r17
 404aa60:	1823883a 	mov	r17,r3
 404aa64:	4080202c 	andhi	r2,r8,128
 404aa68:	10005926 	beq	r2,zero,404abd0 <__adddf3+0x20c>
 404aa6c:	84000044 	addi	r16,r16,1
 404aa70:	0081ffc4 	movi	r2,2047
 404aa74:	8080ba26 	beq	r16,r2,404ad60 <__adddf3+0x39c>
 404aa78:	00bfe034 	movhi	r2,65408
 404aa7c:	10bfffc4 	addi	r2,r2,-1
 404aa80:	4090703a 	and	r8,r8,r2
 404aa84:	4004977a 	slli	r2,r8,29
 404aa88:	4010927a 	slli	r8,r8,9
 404aa8c:	8822d0fa 	srli	r17,r17,3
 404aa90:	8401ffcc 	andi	r16,r16,2047
 404aa94:	4010d33a 	srli	r8,r8,12
 404aa98:	9007883a 	mov	r3,r18
 404aa9c:	1444b03a 	or	r2,r2,r17
 404aaa0:	8401ffcc 	andi	r16,r16,2047
 404aaa4:	8020953a 	slli	r16,r16,20
 404aaa8:	18c03fcc 	andi	r3,r3,255
 404aaac:	01000434 	movhi	r4,16
 404aab0:	213fffc4 	addi	r4,r4,-1
 404aab4:	180697fa 	slli	r3,r3,31
 404aab8:	4110703a 	and	r8,r8,r4
 404aabc:	4410b03a 	or	r8,r8,r16
 404aac0:	40c6b03a 	or	r3,r8,r3
 404aac4:	dfc00417 	ldw	ra,16(sp)
 404aac8:	dcc00317 	ldw	r19,12(sp)
 404aacc:	dc800217 	ldw	r18,8(sp)
 404aad0:	dc400117 	ldw	r17,4(sp)
 404aad4:	dc000017 	ldw	r16,0(sp)
 404aad8:	dec00504 	addi	sp,sp,20
 404aadc:	f800283a 	ret
 404aae0:	0081ffc4 	movi	r2,2047
 404aae4:	80bfd626 	beq	r16,r2,404aa40 <__alt_data_end+0xfffe0240>
 404aae8:	4a402034 	orhi	r9,r9,128
 404aaec:	00800e04 	movi	r2,56
 404aaf0:	10c09f16 	blt	r2,r3,404ad70 <__adddf3+0x3ac>
 404aaf4:	008007c4 	movi	r2,31
 404aaf8:	10c0c216 	blt	r2,r3,404ae04 <__adddf3+0x440>
 404aafc:	00800804 	movi	r2,32
 404ab00:	10c5c83a 	sub	r2,r2,r3
 404ab04:	488a983a 	sll	r5,r9,r2
 404ab08:	30c8d83a 	srl	r4,r6,r3
 404ab0c:	3084983a 	sll	r2,r6,r2
 404ab10:	48c6d83a 	srl	r3,r9,r3
 404ab14:	290cb03a 	or	r6,r5,r4
 404ab18:	1004c03a 	cmpne	r2,r2,zero
 404ab1c:	308cb03a 	or	r6,r6,r2
 404ab20:	898dc83a 	sub	r6,r17,r6
 404ab24:	89a3803a 	cmpltu	r17,r17,r6
 404ab28:	40d1c83a 	sub	r8,r8,r3
 404ab2c:	4451c83a 	sub	r8,r8,r17
 404ab30:	3023883a 	mov	r17,r6
 404ab34:	4080202c 	andhi	r2,r8,128
 404ab38:	10002326 	beq	r2,zero,404abc8 <__adddf3+0x204>
 404ab3c:	04c02034 	movhi	r19,128
 404ab40:	9cffffc4 	addi	r19,r19,-1
 404ab44:	44e6703a 	and	r19,r8,r19
 404ab48:	98007626 	beq	r19,zero,404ad24 <__adddf3+0x360>
 404ab4c:	9809883a 	mov	r4,r19
 404ab50:	404cfc80 	call	404cfc8 <__clzsi2>
 404ab54:	10fffe04 	addi	r3,r2,-8
 404ab58:	010007c4 	movi	r4,31
 404ab5c:	20c07716 	blt	r4,r3,404ad3c <__adddf3+0x378>
 404ab60:	00800804 	movi	r2,32
 404ab64:	10c5c83a 	sub	r2,r2,r3
 404ab68:	8884d83a 	srl	r2,r17,r2
 404ab6c:	98d0983a 	sll	r8,r19,r3
 404ab70:	88e2983a 	sll	r17,r17,r3
 404ab74:	1204b03a 	or	r2,r2,r8
 404ab78:	1c007416 	blt	r3,r16,404ad4c <__adddf3+0x388>
 404ab7c:	1c21c83a 	sub	r16,r3,r16
 404ab80:	82000044 	addi	r8,r16,1
 404ab84:	00c007c4 	movi	r3,31
 404ab88:	1a009116 	blt	r3,r8,404add0 <__adddf3+0x40c>
 404ab8c:	00c00804 	movi	r3,32
 404ab90:	1a07c83a 	sub	r3,r3,r8
 404ab94:	8a08d83a 	srl	r4,r17,r8
 404ab98:	88e2983a 	sll	r17,r17,r3
 404ab9c:	10c6983a 	sll	r3,r2,r3
 404aba0:	1210d83a 	srl	r8,r2,r8
 404aba4:	8804c03a 	cmpne	r2,r17,zero
 404aba8:	1906b03a 	or	r3,r3,r4
 404abac:	18a2b03a 	or	r17,r3,r2
 404abb0:	0021883a 	mov	r16,zero
 404abb4:	003fa206 	br	404aa40 <__alt_data_end+0xfffe0240>
 404abb8:	1890b03a 	or	r8,r3,r2
 404abbc:	40017d26 	beq	r8,zero,404b1b4 <__adddf3+0x7f0>
 404abc0:	1011883a 	mov	r8,r2
 404abc4:	1823883a 	mov	r17,r3
 404abc8:	888001cc 	andi	r2,r17,7
 404abcc:	103f9e1e 	bne	r2,zero,404aa48 <__alt_data_end+0xfffe0248>
 404abd0:	4004977a 	slli	r2,r8,29
 404abd4:	8822d0fa 	srli	r17,r17,3
 404abd8:	4010d0fa 	srli	r8,r8,3
 404abdc:	9007883a 	mov	r3,r18
 404abe0:	1444b03a 	or	r2,r2,r17
 404abe4:	0101ffc4 	movi	r4,2047
 404abe8:	81002426 	beq	r16,r4,404ac7c <__adddf3+0x2b8>
 404abec:	8120703a 	and	r16,r16,r4
 404abf0:	01000434 	movhi	r4,16
 404abf4:	213fffc4 	addi	r4,r4,-1
 404abf8:	4110703a 	and	r8,r8,r4
 404abfc:	003fa806 	br	404aaa0 <__alt_data_end+0xfffe02a0>
 404ac00:	8089c83a 	sub	r4,r16,r2
 404ac04:	01005e0e 	bge	zero,r4,404ad80 <__adddf3+0x3bc>
 404ac08:	10002b26 	beq	r2,zero,404acb8 <__adddf3+0x2f4>
 404ac0c:	0081ffc4 	movi	r2,2047
 404ac10:	80bf8b26 	beq	r16,r2,404aa40 <__alt_data_end+0xfffe0240>
 404ac14:	4a402034 	orhi	r9,r9,128
 404ac18:	00800e04 	movi	r2,56
 404ac1c:	1100a40e 	bge	r2,r4,404aeb0 <__adddf3+0x4ec>
 404ac20:	498cb03a 	or	r6,r9,r6
 404ac24:	300ac03a 	cmpne	r5,r6,zero
 404ac28:	0013883a 	mov	r9,zero
 404ac2c:	2c4b883a 	add	r5,r5,r17
 404ac30:	2c63803a 	cmpltu	r17,r5,r17
 404ac34:	4a11883a 	add	r8,r9,r8
 404ac38:	8a11883a 	add	r8,r17,r8
 404ac3c:	2823883a 	mov	r17,r5
 404ac40:	4080202c 	andhi	r2,r8,128
 404ac44:	103fe026 	beq	r2,zero,404abc8 <__alt_data_end+0xfffe03c8>
 404ac48:	84000044 	addi	r16,r16,1
 404ac4c:	0081ffc4 	movi	r2,2047
 404ac50:	8080d226 	beq	r16,r2,404af9c <__adddf3+0x5d8>
 404ac54:	00bfe034 	movhi	r2,65408
 404ac58:	10bfffc4 	addi	r2,r2,-1
 404ac5c:	4090703a 	and	r8,r8,r2
 404ac60:	880ad07a 	srli	r5,r17,1
 404ac64:	400897fa 	slli	r4,r8,31
 404ac68:	88c0004c 	andi	r3,r17,1
 404ac6c:	28e2b03a 	or	r17,r5,r3
 404ac70:	4010d07a 	srli	r8,r8,1
 404ac74:	2462b03a 	or	r17,r4,r17
 404ac78:	003f7106 	br	404aa40 <__alt_data_end+0xfffe0240>
 404ac7c:	4088b03a 	or	r4,r8,r2
 404ac80:	20014526 	beq	r4,zero,404b198 <__adddf3+0x7d4>
 404ac84:	01000434 	movhi	r4,16
 404ac88:	42000234 	orhi	r8,r8,8
 404ac8c:	213fffc4 	addi	r4,r4,-1
 404ac90:	4110703a 	and	r8,r8,r4
 404ac94:	003f8206 	br	404aaa0 <__alt_data_end+0xfffe02a0>
 404ac98:	18ffffc4 	addi	r3,r3,-1
 404ac9c:	1800491e 	bne	r3,zero,404adc4 <__adddf3+0x400>
 404aca0:	898bc83a 	sub	r5,r17,r6
 404aca4:	8963803a 	cmpltu	r17,r17,r5
 404aca8:	4251c83a 	sub	r8,r8,r9
 404acac:	4451c83a 	sub	r8,r8,r17
 404acb0:	2823883a 	mov	r17,r5
 404acb4:	003f9f06 	br	404ab34 <__alt_data_end+0xfffe0334>
 404acb8:	4984b03a 	or	r2,r9,r6
 404acbc:	103f6026 	beq	r2,zero,404aa40 <__alt_data_end+0xfffe0240>
 404acc0:	213fffc4 	addi	r4,r4,-1
 404acc4:	2000931e 	bne	r4,zero,404af14 <__adddf3+0x550>
 404acc8:	898d883a 	add	r6,r17,r6
 404accc:	3463803a 	cmpltu	r17,r6,r17
 404acd0:	4251883a 	add	r8,r8,r9
 404acd4:	8a11883a 	add	r8,r17,r8
 404acd8:	3023883a 	mov	r17,r6
 404acdc:	003fd806 	br	404ac40 <__alt_data_end+0xfffe0440>
 404ace0:	1800541e 	bne	r3,zero,404ae34 <__adddf3+0x470>
 404ace4:	80800044 	addi	r2,r16,1
 404ace8:	1081ffcc 	andi	r2,r2,2047
 404acec:	00c00044 	movi	r3,1
 404acf0:	1880a00e 	bge	r3,r2,404af74 <__adddf3+0x5b0>
 404acf4:	8989c83a 	sub	r4,r17,r6
 404acf8:	8905803a 	cmpltu	r2,r17,r4
 404acfc:	4267c83a 	sub	r19,r8,r9
 404ad00:	98a7c83a 	sub	r19,r19,r2
 404ad04:	9880202c 	andhi	r2,r19,128
 404ad08:	10006326 	beq	r2,zero,404ae98 <__adddf3+0x4d4>
 404ad0c:	3463c83a 	sub	r17,r6,r17
 404ad10:	4a07c83a 	sub	r3,r9,r8
 404ad14:	344d803a 	cmpltu	r6,r6,r17
 404ad18:	19a7c83a 	sub	r19,r3,r6
 404ad1c:	3825883a 	mov	r18,r7
 404ad20:	983f8a1e 	bne	r19,zero,404ab4c <__alt_data_end+0xfffe034c>
 404ad24:	8809883a 	mov	r4,r17
 404ad28:	404cfc80 	call	404cfc8 <__clzsi2>
 404ad2c:	10800804 	addi	r2,r2,32
 404ad30:	10fffe04 	addi	r3,r2,-8
 404ad34:	010007c4 	movi	r4,31
 404ad38:	20ff890e 	bge	r4,r3,404ab60 <__alt_data_end+0xfffe0360>
 404ad3c:	10bff604 	addi	r2,r2,-40
 404ad40:	8884983a 	sll	r2,r17,r2
 404ad44:	0023883a 	mov	r17,zero
 404ad48:	1c3f8c0e 	bge	r3,r16,404ab7c <__alt_data_end+0xfffe037c>
 404ad4c:	023fe034 	movhi	r8,65408
 404ad50:	423fffc4 	addi	r8,r8,-1
 404ad54:	80e1c83a 	sub	r16,r16,r3
 404ad58:	1210703a 	and	r8,r2,r8
 404ad5c:	003f3806 	br	404aa40 <__alt_data_end+0xfffe0240>
 404ad60:	9007883a 	mov	r3,r18
 404ad64:	0011883a 	mov	r8,zero
 404ad68:	0005883a 	mov	r2,zero
 404ad6c:	003f4c06 	br	404aaa0 <__alt_data_end+0xfffe02a0>
 404ad70:	498cb03a 	or	r6,r9,r6
 404ad74:	300cc03a 	cmpne	r6,r6,zero
 404ad78:	0007883a 	mov	r3,zero
 404ad7c:	003f6806 	br	404ab20 <__alt_data_end+0xfffe0320>
 404ad80:	20009c1e 	bne	r4,zero,404aff4 <__adddf3+0x630>
 404ad84:	80800044 	addi	r2,r16,1
 404ad88:	1141ffcc 	andi	r5,r2,2047
 404ad8c:	01000044 	movi	r4,1
 404ad90:	2140670e 	bge	r4,r5,404af30 <__adddf3+0x56c>
 404ad94:	0101ffc4 	movi	r4,2047
 404ad98:	11007f26 	beq	r2,r4,404af98 <__adddf3+0x5d4>
 404ad9c:	898d883a 	add	r6,r17,r6
 404ada0:	4247883a 	add	r3,r8,r9
 404ada4:	3451803a 	cmpltu	r8,r6,r17
 404ada8:	40d1883a 	add	r8,r8,r3
 404adac:	402297fa 	slli	r17,r8,31
 404adb0:	300cd07a 	srli	r6,r6,1
 404adb4:	4010d07a 	srli	r8,r8,1
 404adb8:	1021883a 	mov	r16,r2
 404adbc:	89a2b03a 	or	r17,r17,r6
 404adc0:	003f1f06 	br	404aa40 <__alt_data_end+0xfffe0240>
 404adc4:	0081ffc4 	movi	r2,2047
 404adc8:	80bf481e 	bne	r16,r2,404aaec <__alt_data_end+0xfffe02ec>
 404adcc:	003f1c06 	br	404aa40 <__alt_data_end+0xfffe0240>
 404add0:	843ff844 	addi	r16,r16,-31
 404add4:	01000804 	movi	r4,32
 404add8:	1406d83a 	srl	r3,r2,r16
 404addc:	41005026 	beq	r8,r4,404af20 <__adddf3+0x55c>
 404ade0:	01001004 	movi	r4,64
 404ade4:	2211c83a 	sub	r8,r4,r8
 404ade8:	1204983a 	sll	r2,r2,r8
 404adec:	88a2b03a 	or	r17,r17,r2
 404adf0:	8822c03a 	cmpne	r17,r17,zero
 404adf4:	1c62b03a 	or	r17,r3,r17
 404adf8:	0011883a 	mov	r8,zero
 404adfc:	0021883a 	mov	r16,zero
 404ae00:	003f7106 	br	404abc8 <__alt_data_end+0xfffe03c8>
 404ae04:	193ff804 	addi	r4,r3,-32
 404ae08:	00800804 	movi	r2,32
 404ae0c:	4908d83a 	srl	r4,r9,r4
 404ae10:	18804526 	beq	r3,r2,404af28 <__adddf3+0x564>
 404ae14:	00801004 	movi	r2,64
 404ae18:	10c5c83a 	sub	r2,r2,r3
 404ae1c:	4886983a 	sll	r3,r9,r2
 404ae20:	198cb03a 	or	r6,r3,r6
 404ae24:	300cc03a 	cmpne	r6,r6,zero
 404ae28:	218cb03a 	or	r6,r4,r6
 404ae2c:	0007883a 	mov	r3,zero
 404ae30:	003f3b06 	br	404ab20 <__alt_data_end+0xfffe0320>
 404ae34:	80002a26 	beq	r16,zero,404aee0 <__adddf3+0x51c>
 404ae38:	0101ffc4 	movi	r4,2047
 404ae3c:	11006826 	beq	r2,r4,404afe0 <__adddf3+0x61c>
 404ae40:	00c7c83a 	sub	r3,zero,r3
 404ae44:	42002034 	orhi	r8,r8,128
 404ae48:	01000e04 	movi	r4,56
 404ae4c:	20c07c16 	blt	r4,r3,404b040 <__adddf3+0x67c>
 404ae50:	010007c4 	movi	r4,31
 404ae54:	20c0da16 	blt	r4,r3,404b1c0 <__adddf3+0x7fc>
 404ae58:	01000804 	movi	r4,32
 404ae5c:	20c9c83a 	sub	r4,r4,r3
 404ae60:	4114983a 	sll	r10,r8,r4
 404ae64:	88cad83a 	srl	r5,r17,r3
 404ae68:	8908983a 	sll	r4,r17,r4
 404ae6c:	40c6d83a 	srl	r3,r8,r3
 404ae70:	5162b03a 	or	r17,r10,r5
 404ae74:	2008c03a 	cmpne	r4,r4,zero
 404ae78:	8922b03a 	or	r17,r17,r4
 404ae7c:	3463c83a 	sub	r17,r6,r17
 404ae80:	48c7c83a 	sub	r3,r9,r3
 404ae84:	344d803a 	cmpltu	r6,r6,r17
 404ae88:	1991c83a 	sub	r8,r3,r6
 404ae8c:	1021883a 	mov	r16,r2
 404ae90:	3825883a 	mov	r18,r7
 404ae94:	003f2706 	br	404ab34 <__alt_data_end+0xfffe0334>
 404ae98:	24d0b03a 	or	r8,r4,r19
 404ae9c:	40001b1e 	bne	r8,zero,404af0c <__adddf3+0x548>
 404aea0:	0005883a 	mov	r2,zero
 404aea4:	0007883a 	mov	r3,zero
 404aea8:	0021883a 	mov	r16,zero
 404aeac:	003f4d06 	br	404abe4 <__alt_data_end+0xfffe03e4>
 404aeb0:	008007c4 	movi	r2,31
 404aeb4:	11003c16 	blt	r2,r4,404afa8 <__adddf3+0x5e4>
 404aeb8:	00800804 	movi	r2,32
 404aebc:	1105c83a 	sub	r2,r2,r4
 404aec0:	488e983a 	sll	r7,r9,r2
 404aec4:	310ad83a 	srl	r5,r6,r4
 404aec8:	3084983a 	sll	r2,r6,r2
 404aecc:	4912d83a 	srl	r9,r9,r4
 404aed0:	394ab03a 	or	r5,r7,r5
 404aed4:	1004c03a 	cmpne	r2,r2,zero
 404aed8:	288ab03a 	or	r5,r5,r2
 404aedc:	003f5306 	br	404ac2c <__alt_data_end+0xfffe042c>
 404aee0:	4448b03a 	or	r4,r8,r17
 404aee4:	20003e26 	beq	r4,zero,404afe0 <__adddf3+0x61c>
 404aee8:	00c6303a 	nor	r3,zero,r3
 404aeec:	18003a1e 	bne	r3,zero,404afd8 <__adddf3+0x614>
 404aef0:	3463c83a 	sub	r17,r6,r17
 404aef4:	4a07c83a 	sub	r3,r9,r8
 404aef8:	344d803a 	cmpltu	r6,r6,r17
 404aefc:	1991c83a 	sub	r8,r3,r6
 404af00:	1021883a 	mov	r16,r2
 404af04:	3825883a 	mov	r18,r7
 404af08:	003f0a06 	br	404ab34 <__alt_data_end+0xfffe0334>
 404af0c:	2023883a 	mov	r17,r4
 404af10:	003f0d06 	br	404ab48 <__alt_data_end+0xfffe0348>
 404af14:	0081ffc4 	movi	r2,2047
 404af18:	80bf3f1e 	bne	r16,r2,404ac18 <__alt_data_end+0xfffe0418>
 404af1c:	003ec806 	br	404aa40 <__alt_data_end+0xfffe0240>
 404af20:	0005883a 	mov	r2,zero
 404af24:	003fb106 	br	404adec <__alt_data_end+0xfffe05ec>
 404af28:	0007883a 	mov	r3,zero
 404af2c:	003fbc06 	br	404ae20 <__alt_data_end+0xfffe0620>
 404af30:	4444b03a 	or	r2,r8,r17
 404af34:	8000871e 	bne	r16,zero,404b154 <__adddf3+0x790>
 404af38:	1000ba26 	beq	r2,zero,404b224 <__adddf3+0x860>
 404af3c:	4984b03a 	or	r2,r9,r6
 404af40:	103ebf26 	beq	r2,zero,404aa40 <__alt_data_end+0xfffe0240>
 404af44:	8985883a 	add	r2,r17,r6
 404af48:	4247883a 	add	r3,r8,r9
 404af4c:	1451803a 	cmpltu	r8,r2,r17
 404af50:	40d1883a 	add	r8,r8,r3
 404af54:	40c0202c 	andhi	r3,r8,128
 404af58:	1023883a 	mov	r17,r2
 404af5c:	183f1a26 	beq	r3,zero,404abc8 <__alt_data_end+0xfffe03c8>
 404af60:	00bfe034 	movhi	r2,65408
 404af64:	10bfffc4 	addi	r2,r2,-1
 404af68:	2021883a 	mov	r16,r4
 404af6c:	4090703a 	and	r8,r8,r2
 404af70:	003eb306 	br	404aa40 <__alt_data_end+0xfffe0240>
 404af74:	4444b03a 	or	r2,r8,r17
 404af78:	8000291e 	bne	r16,zero,404b020 <__adddf3+0x65c>
 404af7c:	10004b1e 	bne	r2,zero,404b0ac <__adddf3+0x6e8>
 404af80:	4990b03a 	or	r8,r9,r6
 404af84:	40008b26 	beq	r8,zero,404b1b4 <__adddf3+0x7f0>
 404af88:	4811883a 	mov	r8,r9
 404af8c:	3023883a 	mov	r17,r6
 404af90:	3825883a 	mov	r18,r7
 404af94:	003eaa06 	br	404aa40 <__alt_data_end+0xfffe0240>
 404af98:	1021883a 	mov	r16,r2
 404af9c:	0011883a 	mov	r8,zero
 404afa0:	0005883a 	mov	r2,zero
 404afa4:	003f0f06 	br	404abe4 <__alt_data_end+0xfffe03e4>
 404afa8:	217ff804 	addi	r5,r4,-32
 404afac:	00800804 	movi	r2,32
 404afb0:	494ad83a 	srl	r5,r9,r5
 404afb4:	20807d26 	beq	r4,r2,404b1ac <__adddf3+0x7e8>
 404afb8:	00801004 	movi	r2,64
 404afbc:	1109c83a 	sub	r4,r2,r4
 404afc0:	4912983a 	sll	r9,r9,r4
 404afc4:	498cb03a 	or	r6,r9,r6
 404afc8:	300cc03a 	cmpne	r6,r6,zero
 404afcc:	298ab03a 	or	r5,r5,r6
 404afd0:	0013883a 	mov	r9,zero
 404afd4:	003f1506 	br	404ac2c <__alt_data_end+0xfffe042c>
 404afd8:	0101ffc4 	movi	r4,2047
 404afdc:	113f9a1e 	bne	r2,r4,404ae48 <__alt_data_end+0xfffe0648>
 404afe0:	4811883a 	mov	r8,r9
 404afe4:	3023883a 	mov	r17,r6
 404afe8:	1021883a 	mov	r16,r2
 404afec:	3825883a 	mov	r18,r7
 404aff0:	003e9306 	br	404aa40 <__alt_data_end+0xfffe0240>
 404aff4:	8000161e 	bne	r16,zero,404b050 <__adddf3+0x68c>
 404aff8:	444ab03a 	or	r5,r8,r17
 404affc:	28005126 	beq	r5,zero,404b144 <__adddf3+0x780>
 404b000:	0108303a 	nor	r4,zero,r4
 404b004:	20004d1e 	bne	r4,zero,404b13c <__adddf3+0x778>
 404b008:	89a3883a 	add	r17,r17,r6
 404b00c:	4253883a 	add	r9,r8,r9
 404b010:	898d803a 	cmpltu	r6,r17,r6
 404b014:	3251883a 	add	r8,r6,r9
 404b018:	1021883a 	mov	r16,r2
 404b01c:	003f0806 	br	404ac40 <__alt_data_end+0xfffe0440>
 404b020:	1000301e 	bne	r2,zero,404b0e4 <__adddf3+0x720>
 404b024:	4984b03a 	or	r2,r9,r6
 404b028:	10007126 	beq	r2,zero,404b1f0 <__adddf3+0x82c>
 404b02c:	4811883a 	mov	r8,r9
 404b030:	3023883a 	mov	r17,r6
 404b034:	3825883a 	mov	r18,r7
 404b038:	0401ffc4 	movi	r16,2047
 404b03c:	003e8006 	br	404aa40 <__alt_data_end+0xfffe0240>
 404b040:	4462b03a 	or	r17,r8,r17
 404b044:	8822c03a 	cmpne	r17,r17,zero
 404b048:	0007883a 	mov	r3,zero
 404b04c:	003f8b06 	br	404ae7c <__alt_data_end+0xfffe067c>
 404b050:	0141ffc4 	movi	r5,2047
 404b054:	11403b26 	beq	r2,r5,404b144 <__adddf3+0x780>
 404b058:	0109c83a 	sub	r4,zero,r4
 404b05c:	42002034 	orhi	r8,r8,128
 404b060:	01400e04 	movi	r5,56
 404b064:	29006716 	blt	r5,r4,404b204 <__adddf3+0x840>
 404b068:	014007c4 	movi	r5,31
 404b06c:	29007016 	blt	r5,r4,404b230 <__adddf3+0x86c>
 404b070:	01400804 	movi	r5,32
 404b074:	290bc83a 	sub	r5,r5,r4
 404b078:	4154983a 	sll	r10,r8,r5
 404b07c:	890ed83a 	srl	r7,r17,r4
 404b080:	894a983a 	sll	r5,r17,r5
 404b084:	4108d83a 	srl	r4,r8,r4
 404b088:	51e2b03a 	or	r17,r10,r7
 404b08c:	280ac03a 	cmpne	r5,r5,zero
 404b090:	8962b03a 	or	r17,r17,r5
 404b094:	89a3883a 	add	r17,r17,r6
 404b098:	2253883a 	add	r9,r4,r9
 404b09c:	898d803a 	cmpltu	r6,r17,r6
 404b0a0:	3251883a 	add	r8,r6,r9
 404b0a4:	1021883a 	mov	r16,r2
 404b0a8:	003ee506 	br	404ac40 <__alt_data_end+0xfffe0440>
 404b0ac:	4984b03a 	or	r2,r9,r6
 404b0b0:	103e6326 	beq	r2,zero,404aa40 <__alt_data_end+0xfffe0240>
 404b0b4:	8987c83a 	sub	r3,r17,r6
 404b0b8:	88c9803a 	cmpltu	r4,r17,r3
 404b0bc:	4245c83a 	sub	r2,r8,r9
 404b0c0:	1105c83a 	sub	r2,r2,r4
 404b0c4:	1100202c 	andhi	r4,r2,128
 404b0c8:	203ebb26 	beq	r4,zero,404abb8 <__alt_data_end+0xfffe03b8>
 404b0cc:	3463c83a 	sub	r17,r6,r17
 404b0d0:	4a07c83a 	sub	r3,r9,r8
 404b0d4:	344d803a 	cmpltu	r6,r6,r17
 404b0d8:	1991c83a 	sub	r8,r3,r6
 404b0dc:	3825883a 	mov	r18,r7
 404b0e0:	003e5706 	br	404aa40 <__alt_data_end+0xfffe0240>
 404b0e4:	4984b03a 	or	r2,r9,r6
 404b0e8:	10002e26 	beq	r2,zero,404b1a4 <__adddf3+0x7e0>
 404b0ec:	4004d0fa 	srli	r2,r8,3
 404b0f0:	8822d0fa 	srli	r17,r17,3
 404b0f4:	4010977a 	slli	r8,r8,29
 404b0f8:	10c0022c 	andhi	r3,r2,8
 404b0fc:	4462b03a 	or	r17,r8,r17
 404b100:	18000826 	beq	r3,zero,404b124 <__adddf3+0x760>
 404b104:	4808d0fa 	srli	r4,r9,3
 404b108:	20c0022c 	andhi	r3,r4,8
 404b10c:	1800051e 	bne	r3,zero,404b124 <__adddf3+0x760>
 404b110:	300cd0fa 	srli	r6,r6,3
 404b114:	4806977a 	slli	r3,r9,29
 404b118:	2005883a 	mov	r2,r4
 404b11c:	3825883a 	mov	r18,r7
 404b120:	19a2b03a 	or	r17,r3,r6
 404b124:	8810d77a 	srli	r8,r17,29
 404b128:	100490fa 	slli	r2,r2,3
 404b12c:	882290fa 	slli	r17,r17,3
 404b130:	0401ffc4 	movi	r16,2047
 404b134:	4090b03a 	or	r8,r8,r2
 404b138:	003e4106 	br	404aa40 <__alt_data_end+0xfffe0240>
 404b13c:	0141ffc4 	movi	r5,2047
 404b140:	117fc71e 	bne	r2,r5,404b060 <__alt_data_end+0xfffe0860>
 404b144:	4811883a 	mov	r8,r9
 404b148:	3023883a 	mov	r17,r6
 404b14c:	1021883a 	mov	r16,r2
 404b150:	003e3b06 	br	404aa40 <__alt_data_end+0xfffe0240>
 404b154:	10002f26 	beq	r2,zero,404b214 <__adddf3+0x850>
 404b158:	4984b03a 	or	r2,r9,r6
 404b15c:	10001126 	beq	r2,zero,404b1a4 <__adddf3+0x7e0>
 404b160:	4004d0fa 	srli	r2,r8,3
 404b164:	8822d0fa 	srli	r17,r17,3
 404b168:	4010977a 	slli	r8,r8,29
 404b16c:	10c0022c 	andhi	r3,r2,8
 404b170:	4462b03a 	or	r17,r8,r17
 404b174:	183feb26 	beq	r3,zero,404b124 <__alt_data_end+0xfffe0924>
 404b178:	4808d0fa 	srli	r4,r9,3
 404b17c:	20c0022c 	andhi	r3,r4,8
 404b180:	183fe81e 	bne	r3,zero,404b124 <__alt_data_end+0xfffe0924>
 404b184:	300cd0fa 	srli	r6,r6,3
 404b188:	4806977a 	slli	r3,r9,29
 404b18c:	2005883a 	mov	r2,r4
 404b190:	19a2b03a 	or	r17,r3,r6
 404b194:	003fe306 	br	404b124 <__alt_data_end+0xfffe0924>
 404b198:	0011883a 	mov	r8,zero
 404b19c:	0005883a 	mov	r2,zero
 404b1a0:	003e3f06 	br	404aaa0 <__alt_data_end+0xfffe02a0>
 404b1a4:	0401ffc4 	movi	r16,2047
 404b1a8:	003e2506 	br	404aa40 <__alt_data_end+0xfffe0240>
 404b1ac:	0013883a 	mov	r9,zero
 404b1b0:	003f8406 	br	404afc4 <__alt_data_end+0xfffe07c4>
 404b1b4:	0005883a 	mov	r2,zero
 404b1b8:	0007883a 	mov	r3,zero
 404b1bc:	003e8906 	br	404abe4 <__alt_data_end+0xfffe03e4>
 404b1c0:	197ff804 	addi	r5,r3,-32
 404b1c4:	01000804 	movi	r4,32
 404b1c8:	414ad83a 	srl	r5,r8,r5
 404b1cc:	19002426 	beq	r3,r4,404b260 <__adddf3+0x89c>
 404b1d0:	01001004 	movi	r4,64
 404b1d4:	20c7c83a 	sub	r3,r4,r3
 404b1d8:	40c6983a 	sll	r3,r8,r3
 404b1dc:	1c46b03a 	or	r3,r3,r17
 404b1e0:	1806c03a 	cmpne	r3,r3,zero
 404b1e4:	28e2b03a 	or	r17,r5,r3
 404b1e8:	0007883a 	mov	r3,zero
 404b1ec:	003f2306 	br	404ae7c <__alt_data_end+0xfffe067c>
 404b1f0:	0007883a 	mov	r3,zero
 404b1f4:	5811883a 	mov	r8,r11
 404b1f8:	00bfffc4 	movi	r2,-1
 404b1fc:	0401ffc4 	movi	r16,2047
 404b200:	003e7806 	br	404abe4 <__alt_data_end+0xfffe03e4>
 404b204:	4462b03a 	or	r17,r8,r17
 404b208:	8822c03a 	cmpne	r17,r17,zero
 404b20c:	0009883a 	mov	r4,zero
 404b210:	003fa006 	br	404b094 <__alt_data_end+0xfffe0894>
 404b214:	4811883a 	mov	r8,r9
 404b218:	3023883a 	mov	r17,r6
 404b21c:	0401ffc4 	movi	r16,2047
 404b220:	003e0706 	br	404aa40 <__alt_data_end+0xfffe0240>
 404b224:	4811883a 	mov	r8,r9
 404b228:	3023883a 	mov	r17,r6
 404b22c:	003e0406 	br	404aa40 <__alt_data_end+0xfffe0240>
 404b230:	21fff804 	addi	r7,r4,-32
 404b234:	01400804 	movi	r5,32
 404b238:	41ced83a 	srl	r7,r8,r7
 404b23c:	21400a26 	beq	r4,r5,404b268 <__adddf3+0x8a4>
 404b240:	01401004 	movi	r5,64
 404b244:	2909c83a 	sub	r4,r5,r4
 404b248:	4108983a 	sll	r4,r8,r4
 404b24c:	2448b03a 	or	r4,r4,r17
 404b250:	2008c03a 	cmpne	r4,r4,zero
 404b254:	3922b03a 	or	r17,r7,r4
 404b258:	0009883a 	mov	r4,zero
 404b25c:	003f8d06 	br	404b094 <__alt_data_end+0xfffe0894>
 404b260:	0007883a 	mov	r3,zero
 404b264:	003fdd06 	br	404b1dc <__alt_data_end+0xfffe09dc>
 404b268:	0009883a 	mov	r4,zero
 404b26c:	003ff706 	br	404b24c <__alt_data_end+0xfffe0a4c>

0404b270 <__divdf3>:
 404b270:	defff204 	addi	sp,sp,-56
 404b274:	dd400915 	stw	r21,36(sp)
 404b278:	282ad53a 	srli	r21,r5,20
 404b27c:	dd000815 	stw	r20,32(sp)
 404b280:	2828d7fa 	srli	r20,r5,31
 404b284:	dc000415 	stw	r16,16(sp)
 404b288:	04000434 	movhi	r16,16
 404b28c:	df000c15 	stw	fp,48(sp)
 404b290:	843fffc4 	addi	r16,r16,-1
 404b294:	dfc00d15 	stw	ra,52(sp)
 404b298:	ddc00b15 	stw	r23,44(sp)
 404b29c:	dd800a15 	stw	r22,40(sp)
 404b2a0:	dcc00715 	stw	r19,28(sp)
 404b2a4:	dc800615 	stw	r18,24(sp)
 404b2a8:	dc400515 	stw	r17,20(sp)
 404b2ac:	ad41ffcc 	andi	r21,r21,2047
 404b2b0:	2c20703a 	and	r16,r5,r16
 404b2b4:	a7003fcc 	andi	fp,r20,255
 404b2b8:	a8006126 	beq	r21,zero,404b440 <__divdf3+0x1d0>
 404b2bc:	0081ffc4 	movi	r2,2047
 404b2c0:	2025883a 	mov	r18,r4
 404b2c4:	a8803726 	beq	r21,r2,404b3a4 <__divdf3+0x134>
 404b2c8:	80800434 	orhi	r2,r16,16
 404b2cc:	100490fa 	slli	r2,r2,3
 404b2d0:	2020d77a 	srli	r16,r4,29
 404b2d4:	202490fa 	slli	r18,r4,3
 404b2d8:	ad7f0044 	addi	r21,r21,-1023
 404b2dc:	80a0b03a 	or	r16,r16,r2
 404b2e0:	0027883a 	mov	r19,zero
 404b2e4:	0013883a 	mov	r9,zero
 404b2e8:	3804d53a 	srli	r2,r7,20
 404b2ec:	382cd7fa 	srli	r22,r7,31
 404b2f0:	04400434 	movhi	r17,16
 404b2f4:	8c7fffc4 	addi	r17,r17,-1
 404b2f8:	1081ffcc 	andi	r2,r2,2047
 404b2fc:	3011883a 	mov	r8,r6
 404b300:	3c62703a 	and	r17,r7,r17
 404b304:	b5c03fcc 	andi	r23,r22,255
 404b308:	10006c26 	beq	r2,zero,404b4bc <__divdf3+0x24c>
 404b30c:	00c1ffc4 	movi	r3,2047
 404b310:	10c06426 	beq	r2,r3,404b4a4 <__divdf3+0x234>
 404b314:	88c00434 	orhi	r3,r17,16
 404b318:	180690fa 	slli	r3,r3,3
 404b31c:	3022d77a 	srli	r17,r6,29
 404b320:	301090fa 	slli	r8,r6,3
 404b324:	10bf0044 	addi	r2,r2,-1023
 404b328:	88e2b03a 	or	r17,r17,r3
 404b32c:	000f883a 	mov	r7,zero
 404b330:	a58cf03a 	xor	r6,r20,r22
 404b334:	3cc8b03a 	or	r4,r7,r19
 404b338:	a8abc83a 	sub	r21,r21,r2
 404b33c:	008003c4 	movi	r2,15
 404b340:	3007883a 	mov	r3,r6
 404b344:	34c03fcc 	andi	r19,r6,255
 404b348:	11009036 	bltu	r2,r4,404b58c <__divdf3+0x31c>
 404b34c:	200890ba 	slli	r4,r4,2
 404b350:	00810174 	movhi	r2,1029
 404b354:	10acd904 	addi	r2,r2,-19612
 404b358:	2089883a 	add	r4,r4,r2
 404b35c:	20800017 	ldw	r2,0(r4)
 404b360:	1000683a 	jmp	r2
 404b364:	0404b58c 	andi	r16,zero,4822
 404b368:	0404b3dc 	xori	r16,zero,4815
 404b36c:	0404b57c 	xorhi	r16,zero,4821
 404b370:	0404b3d0 	cmplti	r16,zero,4815
 404b374:	0404b57c 	xorhi	r16,zero,4821
 404b378:	0404b550 	cmplti	r16,zero,4821
 404b37c:	0404b57c 	xorhi	r16,zero,4821
 404b380:	0404b3d0 	cmplti	r16,zero,4815
 404b384:	0404b3dc 	xori	r16,zero,4815
 404b388:	0404b3dc 	xori	r16,zero,4815
 404b38c:	0404b550 	cmplti	r16,zero,4821
 404b390:	0404b3d0 	cmplti	r16,zero,4815
 404b394:	0404b3c0 	call	404b3c <__alt_mem_SDRAM_Controller_Shared+0x404b3c>
 404b398:	0404b3c0 	call	404b3c <__alt_mem_SDRAM_Controller_Shared+0x404b3c>
 404b39c:	0404b3c0 	call	404b3c <__alt_mem_SDRAM_Controller_Shared+0x404b3c>
 404b3a0:	0404b870 	cmpltui	r16,zero,4833
 404b3a4:	2404b03a 	or	r2,r4,r16
 404b3a8:	1000661e 	bne	r2,zero,404b544 <__divdf3+0x2d4>
 404b3ac:	04c00204 	movi	r19,8
 404b3b0:	0021883a 	mov	r16,zero
 404b3b4:	0025883a 	mov	r18,zero
 404b3b8:	02400084 	movi	r9,2
 404b3bc:	003fca06 	br	404b2e8 <__alt_data_end+0xfffe0ae8>
 404b3c0:	8023883a 	mov	r17,r16
 404b3c4:	9011883a 	mov	r8,r18
 404b3c8:	e02f883a 	mov	r23,fp
 404b3cc:	480f883a 	mov	r7,r9
 404b3d0:	00800084 	movi	r2,2
 404b3d4:	3881311e 	bne	r7,r2,404b89c <__divdf3+0x62c>
 404b3d8:	b827883a 	mov	r19,r23
 404b3dc:	98c0004c 	andi	r3,r19,1
 404b3e0:	0081ffc4 	movi	r2,2047
 404b3e4:	000b883a 	mov	r5,zero
 404b3e8:	0025883a 	mov	r18,zero
 404b3ec:	1004953a 	slli	r2,r2,20
 404b3f0:	18c03fcc 	andi	r3,r3,255
 404b3f4:	04400434 	movhi	r17,16
 404b3f8:	8c7fffc4 	addi	r17,r17,-1
 404b3fc:	180697fa 	slli	r3,r3,31
 404b400:	2c4a703a 	and	r5,r5,r17
 404b404:	288ab03a 	or	r5,r5,r2
 404b408:	28c6b03a 	or	r3,r5,r3
 404b40c:	9005883a 	mov	r2,r18
 404b410:	dfc00d17 	ldw	ra,52(sp)
 404b414:	df000c17 	ldw	fp,48(sp)
 404b418:	ddc00b17 	ldw	r23,44(sp)
 404b41c:	dd800a17 	ldw	r22,40(sp)
 404b420:	dd400917 	ldw	r21,36(sp)
 404b424:	dd000817 	ldw	r20,32(sp)
 404b428:	dcc00717 	ldw	r19,28(sp)
 404b42c:	dc800617 	ldw	r18,24(sp)
 404b430:	dc400517 	ldw	r17,20(sp)
 404b434:	dc000417 	ldw	r16,16(sp)
 404b438:	dec00e04 	addi	sp,sp,56
 404b43c:	f800283a 	ret
 404b440:	2404b03a 	or	r2,r4,r16
 404b444:	2027883a 	mov	r19,r4
 404b448:	10003926 	beq	r2,zero,404b530 <__divdf3+0x2c0>
 404b44c:	80012e26 	beq	r16,zero,404b908 <__divdf3+0x698>
 404b450:	8009883a 	mov	r4,r16
 404b454:	d9800315 	stw	r6,12(sp)
 404b458:	d9c00215 	stw	r7,8(sp)
 404b45c:	404cfc80 	call	404cfc8 <__clzsi2>
 404b460:	d9800317 	ldw	r6,12(sp)
 404b464:	d9c00217 	ldw	r7,8(sp)
 404b468:	113ffd44 	addi	r4,r2,-11
 404b46c:	00c00704 	movi	r3,28
 404b470:	19012116 	blt	r3,r4,404b8f8 <__divdf3+0x688>
 404b474:	00c00744 	movi	r3,29
 404b478:	147ffe04 	addi	r17,r2,-8
 404b47c:	1907c83a 	sub	r3,r3,r4
 404b480:	8460983a 	sll	r16,r16,r17
 404b484:	98c6d83a 	srl	r3,r19,r3
 404b488:	9c64983a 	sll	r18,r19,r17
 404b48c:	1c20b03a 	or	r16,r3,r16
 404b490:	1080fcc4 	addi	r2,r2,1011
 404b494:	00abc83a 	sub	r21,zero,r2
 404b498:	0027883a 	mov	r19,zero
 404b49c:	0013883a 	mov	r9,zero
 404b4a0:	003f9106 	br	404b2e8 <__alt_data_end+0xfffe0ae8>
 404b4a4:	3446b03a 	or	r3,r6,r17
 404b4a8:	18001f1e 	bne	r3,zero,404b528 <__divdf3+0x2b8>
 404b4ac:	0023883a 	mov	r17,zero
 404b4b0:	0011883a 	mov	r8,zero
 404b4b4:	01c00084 	movi	r7,2
 404b4b8:	003f9d06 	br	404b330 <__alt_data_end+0xfffe0b30>
 404b4bc:	3446b03a 	or	r3,r6,r17
 404b4c0:	18001526 	beq	r3,zero,404b518 <__divdf3+0x2a8>
 404b4c4:	88011b26 	beq	r17,zero,404b934 <__divdf3+0x6c4>
 404b4c8:	8809883a 	mov	r4,r17
 404b4cc:	d9800315 	stw	r6,12(sp)
 404b4d0:	da400115 	stw	r9,4(sp)
 404b4d4:	404cfc80 	call	404cfc8 <__clzsi2>
 404b4d8:	d9800317 	ldw	r6,12(sp)
 404b4dc:	da400117 	ldw	r9,4(sp)
 404b4e0:	113ffd44 	addi	r4,r2,-11
 404b4e4:	00c00704 	movi	r3,28
 404b4e8:	19010e16 	blt	r3,r4,404b924 <__divdf3+0x6b4>
 404b4ec:	00c00744 	movi	r3,29
 404b4f0:	123ffe04 	addi	r8,r2,-8
 404b4f4:	1907c83a 	sub	r3,r3,r4
 404b4f8:	8a22983a 	sll	r17,r17,r8
 404b4fc:	30c6d83a 	srl	r3,r6,r3
 404b500:	3210983a 	sll	r8,r6,r8
 404b504:	1c62b03a 	or	r17,r3,r17
 404b508:	1080fcc4 	addi	r2,r2,1011
 404b50c:	0085c83a 	sub	r2,zero,r2
 404b510:	000f883a 	mov	r7,zero
 404b514:	003f8606 	br	404b330 <__alt_data_end+0xfffe0b30>
 404b518:	0023883a 	mov	r17,zero
 404b51c:	0011883a 	mov	r8,zero
 404b520:	01c00044 	movi	r7,1
 404b524:	003f8206 	br	404b330 <__alt_data_end+0xfffe0b30>
 404b528:	01c000c4 	movi	r7,3
 404b52c:	003f8006 	br	404b330 <__alt_data_end+0xfffe0b30>
 404b530:	04c00104 	movi	r19,4
 404b534:	0021883a 	mov	r16,zero
 404b538:	0025883a 	mov	r18,zero
 404b53c:	02400044 	movi	r9,1
 404b540:	003f6906 	br	404b2e8 <__alt_data_end+0xfffe0ae8>
 404b544:	04c00304 	movi	r19,12
 404b548:	024000c4 	movi	r9,3
 404b54c:	003f6606 	br	404b2e8 <__alt_data_end+0xfffe0ae8>
 404b550:	01400434 	movhi	r5,16
 404b554:	0007883a 	mov	r3,zero
 404b558:	297fffc4 	addi	r5,r5,-1
 404b55c:	04bfffc4 	movi	r18,-1
 404b560:	0081ffc4 	movi	r2,2047
 404b564:	003fa106 	br	404b3ec <__alt_data_end+0xfffe0bec>
 404b568:	00c00044 	movi	r3,1
 404b56c:	1887c83a 	sub	r3,r3,r2
 404b570:	01000e04 	movi	r4,56
 404b574:	20c1210e 	bge	r4,r3,404b9fc <__divdf3+0x78c>
 404b578:	98c0004c 	andi	r3,r19,1
 404b57c:	0005883a 	mov	r2,zero
 404b580:	000b883a 	mov	r5,zero
 404b584:	0025883a 	mov	r18,zero
 404b588:	003f9806 	br	404b3ec <__alt_data_end+0xfffe0bec>
 404b58c:	8c00fd36 	bltu	r17,r16,404b984 <__divdf3+0x714>
 404b590:	8440fb26 	beq	r16,r17,404b980 <__divdf3+0x710>
 404b594:	8007883a 	mov	r3,r16
 404b598:	ad7fffc4 	addi	r21,r21,-1
 404b59c:	0021883a 	mov	r16,zero
 404b5a0:	4004d63a 	srli	r2,r8,24
 404b5a4:	8822923a 	slli	r17,r17,8
 404b5a8:	1809883a 	mov	r4,r3
 404b5ac:	402c923a 	slli	r22,r8,8
 404b5b0:	88b8b03a 	or	fp,r17,r2
 404b5b4:	e028d43a 	srli	r20,fp,16
 404b5b8:	d8c00015 	stw	r3,0(sp)
 404b5bc:	e5ffffcc 	andi	r23,fp,65535
 404b5c0:	a00b883a 	mov	r5,r20
 404b5c4:	404a9080 	call	404a908 <__udivsi3>
 404b5c8:	d8c00017 	ldw	r3,0(sp)
 404b5cc:	a00b883a 	mov	r5,r20
 404b5d0:	d8800315 	stw	r2,12(sp)
 404b5d4:	1809883a 	mov	r4,r3
 404b5d8:	404a96c0 	call	404a96c <__umodsi3>
 404b5dc:	d9800317 	ldw	r6,12(sp)
 404b5e0:	1006943a 	slli	r3,r2,16
 404b5e4:	9004d43a 	srli	r2,r18,16
 404b5e8:	b9a3383a 	mul	r17,r23,r6
 404b5ec:	10c4b03a 	or	r2,r2,r3
 404b5f0:	1440062e 	bgeu	r2,r17,404b60c <__divdf3+0x39c>
 404b5f4:	1705883a 	add	r2,r2,fp
 404b5f8:	30ffffc4 	addi	r3,r6,-1
 404b5fc:	1700ee36 	bltu	r2,fp,404b9b8 <__divdf3+0x748>
 404b600:	1440ed2e 	bgeu	r2,r17,404b9b8 <__divdf3+0x748>
 404b604:	31bfff84 	addi	r6,r6,-2
 404b608:	1705883a 	add	r2,r2,fp
 404b60c:	1463c83a 	sub	r17,r2,r17
 404b610:	a00b883a 	mov	r5,r20
 404b614:	8809883a 	mov	r4,r17
 404b618:	d9800315 	stw	r6,12(sp)
 404b61c:	404a9080 	call	404a908 <__udivsi3>
 404b620:	a00b883a 	mov	r5,r20
 404b624:	8809883a 	mov	r4,r17
 404b628:	d8800215 	stw	r2,8(sp)
 404b62c:	404a96c0 	call	404a96c <__umodsi3>
 404b630:	d9c00217 	ldw	r7,8(sp)
 404b634:	1004943a 	slli	r2,r2,16
 404b638:	94bfffcc 	andi	r18,r18,65535
 404b63c:	b9d1383a 	mul	r8,r23,r7
 404b640:	90a4b03a 	or	r18,r18,r2
 404b644:	d9800317 	ldw	r6,12(sp)
 404b648:	9200062e 	bgeu	r18,r8,404b664 <__divdf3+0x3f4>
 404b64c:	9725883a 	add	r18,r18,fp
 404b650:	38bfffc4 	addi	r2,r7,-1
 404b654:	9700d636 	bltu	r18,fp,404b9b0 <__divdf3+0x740>
 404b658:	9200d52e 	bgeu	r18,r8,404b9b0 <__divdf3+0x740>
 404b65c:	39ffff84 	addi	r7,r7,-2
 404b660:	9725883a 	add	r18,r18,fp
 404b664:	3004943a 	slli	r2,r6,16
 404b668:	b012d43a 	srli	r9,r22,16
 404b66c:	b1bfffcc 	andi	r6,r22,65535
 404b670:	11e2b03a 	or	r17,r2,r7
 404b674:	8806d43a 	srli	r3,r17,16
 404b678:	893fffcc 	andi	r4,r17,65535
 404b67c:	218b383a 	mul	r5,r4,r6
 404b680:	30c5383a 	mul	r2,r6,r3
 404b684:	2249383a 	mul	r4,r4,r9
 404b688:	280ed43a 	srli	r7,r5,16
 404b68c:	9225c83a 	sub	r18,r18,r8
 404b690:	2089883a 	add	r4,r4,r2
 404b694:	3909883a 	add	r4,r7,r4
 404b698:	1a47383a 	mul	r3,r3,r9
 404b69c:	2080022e 	bgeu	r4,r2,404b6a8 <__divdf3+0x438>
 404b6a0:	00800074 	movhi	r2,1
 404b6a4:	1887883a 	add	r3,r3,r2
 404b6a8:	2004d43a 	srli	r2,r4,16
 404b6ac:	2008943a 	slli	r4,r4,16
 404b6b0:	297fffcc 	andi	r5,r5,65535
 404b6b4:	10c7883a 	add	r3,r2,r3
 404b6b8:	2149883a 	add	r4,r4,r5
 404b6bc:	90c0a536 	bltu	r18,r3,404b954 <__divdf3+0x6e4>
 404b6c0:	90c0bf26 	beq	r18,r3,404b9c0 <__divdf3+0x750>
 404b6c4:	90c7c83a 	sub	r3,r18,r3
 404b6c8:	810fc83a 	sub	r7,r16,r4
 404b6cc:	81e5803a 	cmpltu	r18,r16,r7
 404b6d0:	1ca5c83a 	sub	r18,r3,r18
 404b6d4:	e480c126 	beq	fp,r18,404b9dc <__divdf3+0x76c>
 404b6d8:	a00b883a 	mov	r5,r20
 404b6dc:	9009883a 	mov	r4,r18
 404b6e0:	d9800315 	stw	r6,12(sp)
 404b6e4:	d9c00215 	stw	r7,8(sp)
 404b6e8:	da400115 	stw	r9,4(sp)
 404b6ec:	404a9080 	call	404a908 <__udivsi3>
 404b6f0:	a00b883a 	mov	r5,r20
 404b6f4:	9009883a 	mov	r4,r18
 404b6f8:	d8800015 	stw	r2,0(sp)
 404b6fc:	404a96c0 	call	404a96c <__umodsi3>
 404b700:	d9c00217 	ldw	r7,8(sp)
 404b704:	da000017 	ldw	r8,0(sp)
 404b708:	1006943a 	slli	r3,r2,16
 404b70c:	3804d43a 	srli	r2,r7,16
 404b710:	ba21383a 	mul	r16,r23,r8
 404b714:	d9800317 	ldw	r6,12(sp)
 404b718:	10c4b03a 	or	r2,r2,r3
 404b71c:	da400117 	ldw	r9,4(sp)
 404b720:	1400062e 	bgeu	r2,r16,404b73c <__divdf3+0x4cc>
 404b724:	1705883a 	add	r2,r2,fp
 404b728:	40ffffc4 	addi	r3,r8,-1
 404b72c:	1700ad36 	bltu	r2,fp,404b9e4 <__divdf3+0x774>
 404b730:	1400ac2e 	bgeu	r2,r16,404b9e4 <__divdf3+0x774>
 404b734:	423fff84 	addi	r8,r8,-2
 404b738:	1705883a 	add	r2,r2,fp
 404b73c:	1421c83a 	sub	r16,r2,r16
 404b740:	a00b883a 	mov	r5,r20
 404b744:	8009883a 	mov	r4,r16
 404b748:	d9800315 	stw	r6,12(sp)
 404b74c:	d9c00215 	stw	r7,8(sp)
 404b750:	da000015 	stw	r8,0(sp)
 404b754:	da400115 	stw	r9,4(sp)
 404b758:	404a9080 	call	404a908 <__udivsi3>
 404b75c:	8009883a 	mov	r4,r16
 404b760:	a00b883a 	mov	r5,r20
 404b764:	1025883a 	mov	r18,r2
 404b768:	404a96c0 	call	404a96c <__umodsi3>
 404b76c:	d9c00217 	ldw	r7,8(sp)
 404b770:	1004943a 	slli	r2,r2,16
 404b774:	bcaf383a 	mul	r23,r23,r18
 404b778:	393fffcc 	andi	r4,r7,65535
 404b77c:	2088b03a 	or	r4,r4,r2
 404b780:	d9800317 	ldw	r6,12(sp)
 404b784:	da000017 	ldw	r8,0(sp)
 404b788:	da400117 	ldw	r9,4(sp)
 404b78c:	25c0062e 	bgeu	r4,r23,404b7a8 <__divdf3+0x538>
 404b790:	2709883a 	add	r4,r4,fp
 404b794:	90bfffc4 	addi	r2,r18,-1
 404b798:	27009436 	bltu	r4,fp,404b9ec <__divdf3+0x77c>
 404b79c:	25c0932e 	bgeu	r4,r23,404b9ec <__divdf3+0x77c>
 404b7a0:	94bfff84 	addi	r18,r18,-2
 404b7a4:	2709883a 	add	r4,r4,fp
 404b7a8:	4004943a 	slli	r2,r8,16
 404b7ac:	25efc83a 	sub	r23,r4,r23
 404b7b0:	1490b03a 	or	r8,r2,r18
 404b7b4:	4008d43a 	srli	r4,r8,16
 404b7b8:	40ffffcc 	andi	r3,r8,65535
 404b7bc:	30c5383a 	mul	r2,r6,r3
 404b7c0:	1a47383a 	mul	r3,r3,r9
 404b7c4:	310d383a 	mul	r6,r6,r4
 404b7c8:	100ad43a 	srli	r5,r2,16
 404b7cc:	4913383a 	mul	r9,r9,r4
 404b7d0:	1987883a 	add	r3,r3,r6
 404b7d4:	28c7883a 	add	r3,r5,r3
 404b7d8:	1980022e 	bgeu	r3,r6,404b7e4 <__divdf3+0x574>
 404b7dc:	01000074 	movhi	r4,1
 404b7e0:	4913883a 	add	r9,r9,r4
 404b7e4:	1808d43a 	srli	r4,r3,16
 404b7e8:	1806943a 	slli	r3,r3,16
 404b7ec:	10bfffcc 	andi	r2,r2,65535
 404b7f0:	2253883a 	add	r9,r4,r9
 404b7f4:	1887883a 	add	r3,r3,r2
 404b7f8:	ba403836 	bltu	r23,r9,404b8dc <__divdf3+0x66c>
 404b7fc:	ba403626 	beq	r23,r9,404b8d8 <__divdf3+0x668>
 404b800:	42000054 	ori	r8,r8,1
 404b804:	a880ffc4 	addi	r2,r21,1023
 404b808:	00bf570e 	bge	zero,r2,404b568 <__alt_data_end+0xfffe0d68>
 404b80c:	40c001cc 	andi	r3,r8,7
 404b810:	18000726 	beq	r3,zero,404b830 <__divdf3+0x5c0>
 404b814:	40c003cc 	andi	r3,r8,15
 404b818:	01000104 	movi	r4,4
 404b81c:	19000426 	beq	r3,r4,404b830 <__divdf3+0x5c0>
 404b820:	4107883a 	add	r3,r8,r4
 404b824:	1a11803a 	cmpltu	r8,r3,r8
 404b828:	8a23883a 	add	r17,r17,r8
 404b82c:	1811883a 	mov	r8,r3
 404b830:	88c0402c 	andhi	r3,r17,256
 404b834:	18000426 	beq	r3,zero,404b848 <__divdf3+0x5d8>
 404b838:	00ffc034 	movhi	r3,65280
 404b83c:	18ffffc4 	addi	r3,r3,-1
 404b840:	a8810004 	addi	r2,r21,1024
 404b844:	88e2703a 	and	r17,r17,r3
 404b848:	00c1ff84 	movi	r3,2046
 404b84c:	18bee316 	blt	r3,r2,404b3dc <__alt_data_end+0xfffe0bdc>
 404b850:	8824977a 	slli	r18,r17,29
 404b854:	4010d0fa 	srli	r8,r8,3
 404b858:	8822927a 	slli	r17,r17,9
 404b85c:	1081ffcc 	andi	r2,r2,2047
 404b860:	9224b03a 	or	r18,r18,r8
 404b864:	880ad33a 	srli	r5,r17,12
 404b868:	98c0004c 	andi	r3,r19,1
 404b86c:	003edf06 	br	404b3ec <__alt_data_end+0xfffe0bec>
 404b870:	8080022c 	andhi	r2,r16,8
 404b874:	10001226 	beq	r2,zero,404b8c0 <__divdf3+0x650>
 404b878:	8880022c 	andhi	r2,r17,8
 404b87c:	1000101e 	bne	r2,zero,404b8c0 <__divdf3+0x650>
 404b880:	00800434 	movhi	r2,16
 404b884:	89400234 	orhi	r5,r17,8
 404b888:	10bfffc4 	addi	r2,r2,-1
 404b88c:	b007883a 	mov	r3,r22
 404b890:	288a703a 	and	r5,r5,r2
 404b894:	4025883a 	mov	r18,r8
 404b898:	003f3106 	br	404b560 <__alt_data_end+0xfffe0d60>
 404b89c:	008000c4 	movi	r2,3
 404b8a0:	3880a626 	beq	r7,r2,404bb3c <__divdf3+0x8cc>
 404b8a4:	00800044 	movi	r2,1
 404b8a8:	3880521e 	bne	r7,r2,404b9f4 <__divdf3+0x784>
 404b8ac:	b807883a 	mov	r3,r23
 404b8b0:	0005883a 	mov	r2,zero
 404b8b4:	000b883a 	mov	r5,zero
 404b8b8:	0025883a 	mov	r18,zero
 404b8bc:	003ecb06 	br	404b3ec <__alt_data_end+0xfffe0bec>
 404b8c0:	00800434 	movhi	r2,16
 404b8c4:	81400234 	orhi	r5,r16,8
 404b8c8:	10bfffc4 	addi	r2,r2,-1
 404b8cc:	a007883a 	mov	r3,r20
 404b8d0:	288a703a 	and	r5,r5,r2
 404b8d4:	003f2206 	br	404b560 <__alt_data_end+0xfffe0d60>
 404b8d8:	183fca26 	beq	r3,zero,404b804 <__alt_data_end+0xfffe1004>
 404b8dc:	e5ef883a 	add	r23,fp,r23
 404b8e0:	40bfffc4 	addi	r2,r8,-1
 404b8e4:	bf00392e 	bgeu	r23,fp,404b9cc <__divdf3+0x75c>
 404b8e8:	1011883a 	mov	r8,r2
 404b8ec:	ba7fc41e 	bne	r23,r9,404b800 <__alt_data_end+0xfffe1000>
 404b8f0:	b0ffc31e 	bne	r22,r3,404b800 <__alt_data_end+0xfffe1000>
 404b8f4:	003fc306 	br	404b804 <__alt_data_end+0xfffe1004>
 404b8f8:	143ff604 	addi	r16,r2,-40
 404b8fc:	9c20983a 	sll	r16,r19,r16
 404b900:	0025883a 	mov	r18,zero
 404b904:	003ee206 	br	404b490 <__alt_data_end+0xfffe0c90>
 404b908:	d9800315 	stw	r6,12(sp)
 404b90c:	d9c00215 	stw	r7,8(sp)
 404b910:	404cfc80 	call	404cfc8 <__clzsi2>
 404b914:	10800804 	addi	r2,r2,32
 404b918:	d9c00217 	ldw	r7,8(sp)
 404b91c:	d9800317 	ldw	r6,12(sp)
 404b920:	003ed106 	br	404b468 <__alt_data_end+0xfffe0c68>
 404b924:	147ff604 	addi	r17,r2,-40
 404b928:	3462983a 	sll	r17,r6,r17
 404b92c:	0011883a 	mov	r8,zero
 404b930:	003ef506 	br	404b508 <__alt_data_end+0xfffe0d08>
 404b934:	3009883a 	mov	r4,r6
 404b938:	d9800315 	stw	r6,12(sp)
 404b93c:	da400115 	stw	r9,4(sp)
 404b940:	404cfc80 	call	404cfc8 <__clzsi2>
 404b944:	10800804 	addi	r2,r2,32
 404b948:	da400117 	ldw	r9,4(sp)
 404b94c:	d9800317 	ldw	r6,12(sp)
 404b950:	003ee306 	br	404b4e0 <__alt_data_end+0xfffe0ce0>
 404b954:	85a1883a 	add	r16,r16,r22
 404b958:	8585803a 	cmpltu	r2,r16,r22
 404b95c:	1705883a 	add	r2,r2,fp
 404b960:	14a5883a 	add	r18,r2,r18
 404b964:	88bfffc4 	addi	r2,r17,-1
 404b968:	e4800c2e 	bgeu	fp,r18,404b99c <__divdf3+0x72c>
 404b96c:	90c03e36 	bltu	r18,r3,404ba68 <__divdf3+0x7f8>
 404b970:	1c806926 	beq	r3,r18,404bb18 <__divdf3+0x8a8>
 404b974:	90c7c83a 	sub	r3,r18,r3
 404b978:	1023883a 	mov	r17,r2
 404b97c:	003f5206 	br	404b6c8 <__alt_data_end+0xfffe0ec8>
 404b980:	923f0436 	bltu	r18,r8,404b594 <__alt_data_end+0xfffe0d94>
 404b984:	800897fa 	slli	r4,r16,31
 404b988:	9004d07a 	srli	r2,r18,1
 404b98c:	8006d07a 	srli	r3,r16,1
 404b990:	902097fa 	slli	r16,r18,31
 404b994:	20a4b03a 	or	r18,r4,r2
 404b998:	003f0106 	br	404b5a0 <__alt_data_end+0xfffe0da0>
 404b99c:	e4bff51e 	bne	fp,r18,404b974 <__alt_data_end+0xfffe1174>
 404b9a0:	85bff22e 	bgeu	r16,r22,404b96c <__alt_data_end+0xfffe116c>
 404b9a4:	e0c7c83a 	sub	r3,fp,r3
 404b9a8:	1023883a 	mov	r17,r2
 404b9ac:	003f4606 	br	404b6c8 <__alt_data_end+0xfffe0ec8>
 404b9b0:	100f883a 	mov	r7,r2
 404b9b4:	003f2b06 	br	404b664 <__alt_data_end+0xfffe0e64>
 404b9b8:	180d883a 	mov	r6,r3
 404b9bc:	003f1306 	br	404b60c <__alt_data_end+0xfffe0e0c>
 404b9c0:	813fe436 	bltu	r16,r4,404b954 <__alt_data_end+0xfffe1154>
 404b9c4:	0007883a 	mov	r3,zero
 404b9c8:	003f3f06 	br	404b6c8 <__alt_data_end+0xfffe0ec8>
 404b9cc:	ba402c36 	bltu	r23,r9,404ba80 <__divdf3+0x810>
 404b9d0:	4dc05426 	beq	r9,r23,404bb24 <__divdf3+0x8b4>
 404b9d4:	1011883a 	mov	r8,r2
 404b9d8:	003f8906 	br	404b800 <__alt_data_end+0xfffe1000>
 404b9dc:	023fffc4 	movi	r8,-1
 404b9e0:	003f8806 	br	404b804 <__alt_data_end+0xfffe1004>
 404b9e4:	1811883a 	mov	r8,r3
 404b9e8:	003f5406 	br	404b73c <__alt_data_end+0xfffe0f3c>
 404b9ec:	1025883a 	mov	r18,r2
 404b9f0:	003f6d06 	br	404b7a8 <__alt_data_end+0xfffe0fa8>
 404b9f4:	b827883a 	mov	r19,r23
 404b9f8:	003f8206 	br	404b804 <__alt_data_end+0xfffe1004>
 404b9fc:	010007c4 	movi	r4,31
 404ba00:	20c02616 	blt	r4,r3,404ba9c <__divdf3+0x82c>
 404ba04:	00800804 	movi	r2,32
 404ba08:	10c5c83a 	sub	r2,r2,r3
 404ba0c:	888a983a 	sll	r5,r17,r2
 404ba10:	40c8d83a 	srl	r4,r8,r3
 404ba14:	4084983a 	sll	r2,r8,r2
 404ba18:	88e2d83a 	srl	r17,r17,r3
 404ba1c:	2906b03a 	or	r3,r5,r4
 404ba20:	1004c03a 	cmpne	r2,r2,zero
 404ba24:	1886b03a 	or	r3,r3,r2
 404ba28:	188001cc 	andi	r2,r3,7
 404ba2c:	10000726 	beq	r2,zero,404ba4c <__divdf3+0x7dc>
 404ba30:	188003cc 	andi	r2,r3,15
 404ba34:	01000104 	movi	r4,4
 404ba38:	11000426 	beq	r2,r4,404ba4c <__divdf3+0x7dc>
 404ba3c:	1805883a 	mov	r2,r3
 404ba40:	10c00104 	addi	r3,r2,4
 404ba44:	1885803a 	cmpltu	r2,r3,r2
 404ba48:	88a3883a 	add	r17,r17,r2
 404ba4c:	8880202c 	andhi	r2,r17,128
 404ba50:	10002726 	beq	r2,zero,404baf0 <__divdf3+0x880>
 404ba54:	98c0004c 	andi	r3,r19,1
 404ba58:	00800044 	movi	r2,1
 404ba5c:	000b883a 	mov	r5,zero
 404ba60:	0025883a 	mov	r18,zero
 404ba64:	003e6106 	br	404b3ec <__alt_data_end+0xfffe0bec>
 404ba68:	85a1883a 	add	r16,r16,r22
 404ba6c:	8585803a 	cmpltu	r2,r16,r22
 404ba70:	1705883a 	add	r2,r2,fp
 404ba74:	14a5883a 	add	r18,r2,r18
 404ba78:	8c7fff84 	addi	r17,r17,-2
 404ba7c:	003f1106 	br	404b6c4 <__alt_data_end+0xfffe0ec4>
 404ba80:	b589883a 	add	r4,r22,r22
 404ba84:	25ad803a 	cmpltu	r22,r4,r22
 404ba88:	b739883a 	add	fp,r22,fp
 404ba8c:	40bfff84 	addi	r2,r8,-2
 404ba90:	bf2f883a 	add	r23,r23,fp
 404ba94:	202d883a 	mov	r22,r4
 404ba98:	003f9306 	br	404b8e8 <__alt_data_end+0xfffe10e8>
 404ba9c:	013ff844 	movi	r4,-31
 404baa0:	2085c83a 	sub	r2,r4,r2
 404baa4:	8888d83a 	srl	r4,r17,r2
 404baa8:	00800804 	movi	r2,32
 404baac:	18802126 	beq	r3,r2,404bb34 <__divdf3+0x8c4>
 404bab0:	00801004 	movi	r2,64
 404bab4:	10c5c83a 	sub	r2,r2,r3
 404bab8:	8884983a 	sll	r2,r17,r2
 404babc:	1204b03a 	or	r2,r2,r8
 404bac0:	1004c03a 	cmpne	r2,r2,zero
 404bac4:	2084b03a 	or	r2,r4,r2
 404bac8:	144001cc 	andi	r17,r2,7
 404bacc:	88000d1e 	bne	r17,zero,404bb04 <__divdf3+0x894>
 404bad0:	000b883a 	mov	r5,zero
 404bad4:	1024d0fa 	srli	r18,r2,3
 404bad8:	98c0004c 	andi	r3,r19,1
 404badc:	0005883a 	mov	r2,zero
 404bae0:	9464b03a 	or	r18,r18,r17
 404bae4:	003e4106 	br	404b3ec <__alt_data_end+0xfffe0bec>
 404bae8:	1007883a 	mov	r3,r2
 404baec:	0023883a 	mov	r17,zero
 404baf0:	880a927a 	slli	r5,r17,9
 404baf4:	1805883a 	mov	r2,r3
 404baf8:	8822977a 	slli	r17,r17,29
 404bafc:	280ad33a 	srli	r5,r5,12
 404bb00:	003ff406 	br	404bad4 <__alt_data_end+0xfffe12d4>
 404bb04:	10c003cc 	andi	r3,r2,15
 404bb08:	01000104 	movi	r4,4
 404bb0c:	193ff626 	beq	r3,r4,404bae8 <__alt_data_end+0xfffe12e8>
 404bb10:	0023883a 	mov	r17,zero
 404bb14:	003fca06 	br	404ba40 <__alt_data_end+0xfffe1240>
 404bb18:	813fd336 	bltu	r16,r4,404ba68 <__alt_data_end+0xfffe1268>
 404bb1c:	1023883a 	mov	r17,r2
 404bb20:	003fa806 	br	404b9c4 <__alt_data_end+0xfffe11c4>
 404bb24:	b0ffd636 	bltu	r22,r3,404ba80 <__alt_data_end+0xfffe1280>
 404bb28:	1011883a 	mov	r8,r2
 404bb2c:	b0ff341e 	bne	r22,r3,404b800 <__alt_data_end+0xfffe1000>
 404bb30:	003f3406 	br	404b804 <__alt_data_end+0xfffe1004>
 404bb34:	0005883a 	mov	r2,zero
 404bb38:	003fe006 	br	404babc <__alt_data_end+0xfffe12bc>
 404bb3c:	00800434 	movhi	r2,16
 404bb40:	89400234 	orhi	r5,r17,8
 404bb44:	10bfffc4 	addi	r2,r2,-1
 404bb48:	b807883a 	mov	r3,r23
 404bb4c:	288a703a 	and	r5,r5,r2
 404bb50:	4025883a 	mov	r18,r8
 404bb54:	003e8206 	br	404b560 <__alt_data_end+0xfffe0d60>

0404bb58 <__eqdf2>:
 404bb58:	2804d53a 	srli	r2,r5,20
 404bb5c:	3806d53a 	srli	r3,r7,20
 404bb60:	02000434 	movhi	r8,16
 404bb64:	423fffc4 	addi	r8,r8,-1
 404bb68:	1081ffcc 	andi	r2,r2,2047
 404bb6c:	0281ffc4 	movi	r10,2047
 404bb70:	2a12703a 	and	r9,r5,r8
 404bb74:	18c1ffcc 	andi	r3,r3,2047
 404bb78:	3a10703a 	and	r8,r7,r8
 404bb7c:	280ad7fa 	srli	r5,r5,31
 404bb80:	380ed7fa 	srli	r7,r7,31
 404bb84:	12801026 	beq	r2,r10,404bbc8 <__eqdf2+0x70>
 404bb88:	0281ffc4 	movi	r10,2047
 404bb8c:	1a800a26 	beq	r3,r10,404bbb8 <__eqdf2+0x60>
 404bb90:	10c00226 	beq	r2,r3,404bb9c <__eqdf2+0x44>
 404bb94:	00800044 	movi	r2,1
 404bb98:	f800283a 	ret
 404bb9c:	4a3ffd1e 	bne	r9,r8,404bb94 <__alt_data_end+0xfffe1394>
 404bba0:	21bffc1e 	bne	r4,r6,404bb94 <__alt_data_end+0xfffe1394>
 404bba4:	29c00c26 	beq	r5,r7,404bbd8 <__eqdf2+0x80>
 404bba8:	103ffa1e 	bne	r2,zero,404bb94 <__alt_data_end+0xfffe1394>
 404bbac:	2244b03a 	or	r2,r4,r9
 404bbb0:	1004c03a 	cmpne	r2,r2,zero
 404bbb4:	f800283a 	ret
 404bbb8:	3214b03a 	or	r10,r6,r8
 404bbbc:	503ff426 	beq	r10,zero,404bb90 <__alt_data_end+0xfffe1390>
 404bbc0:	00800044 	movi	r2,1
 404bbc4:	f800283a 	ret
 404bbc8:	2254b03a 	or	r10,r4,r9
 404bbcc:	503fee26 	beq	r10,zero,404bb88 <__alt_data_end+0xfffe1388>
 404bbd0:	00800044 	movi	r2,1
 404bbd4:	f800283a 	ret
 404bbd8:	0005883a 	mov	r2,zero
 404bbdc:	f800283a 	ret

0404bbe0 <__gedf2>:
 404bbe0:	2804d53a 	srli	r2,r5,20
 404bbe4:	3806d53a 	srli	r3,r7,20
 404bbe8:	02000434 	movhi	r8,16
 404bbec:	423fffc4 	addi	r8,r8,-1
 404bbf0:	1081ffcc 	andi	r2,r2,2047
 404bbf4:	0241ffc4 	movi	r9,2047
 404bbf8:	2a14703a 	and	r10,r5,r8
 404bbfc:	18c1ffcc 	andi	r3,r3,2047
 404bc00:	3a10703a 	and	r8,r7,r8
 404bc04:	280ad7fa 	srli	r5,r5,31
 404bc08:	380ed7fa 	srli	r7,r7,31
 404bc0c:	12401d26 	beq	r2,r9,404bc84 <__gedf2+0xa4>
 404bc10:	0241ffc4 	movi	r9,2047
 404bc14:	1a401226 	beq	r3,r9,404bc60 <__gedf2+0x80>
 404bc18:	1000081e 	bne	r2,zero,404bc3c <__gedf2+0x5c>
 404bc1c:	2296b03a 	or	r11,r4,r10
 404bc20:	5813003a 	cmpeq	r9,r11,zero
 404bc24:	1800091e 	bne	r3,zero,404bc4c <__gedf2+0x6c>
 404bc28:	3218b03a 	or	r12,r6,r8
 404bc2c:	6000071e 	bne	r12,zero,404bc4c <__gedf2+0x6c>
 404bc30:	0005883a 	mov	r2,zero
 404bc34:	5800101e 	bne	r11,zero,404bc78 <__gedf2+0x98>
 404bc38:	f800283a 	ret
 404bc3c:	18000c1e 	bne	r3,zero,404bc70 <__gedf2+0x90>
 404bc40:	3212b03a 	or	r9,r6,r8
 404bc44:	48000c26 	beq	r9,zero,404bc78 <__gedf2+0x98>
 404bc48:	0013883a 	mov	r9,zero
 404bc4c:	39c03fcc 	andi	r7,r7,255
 404bc50:	48000826 	beq	r9,zero,404bc74 <__gedf2+0x94>
 404bc54:	38000926 	beq	r7,zero,404bc7c <__gedf2+0x9c>
 404bc58:	00800044 	movi	r2,1
 404bc5c:	f800283a 	ret
 404bc60:	3212b03a 	or	r9,r6,r8
 404bc64:	483fec26 	beq	r9,zero,404bc18 <__alt_data_end+0xfffe1418>
 404bc68:	00bfff84 	movi	r2,-2
 404bc6c:	f800283a 	ret
 404bc70:	39c03fcc 	andi	r7,r7,255
 404bc74:	29c00626 	beq	r5,r7,404bc90 <__gedf2+0xb0>
 404bc78:	283ff726 	beq	r5,zero,404bc58 <__alt_data_end+0xfffe1458>
 404bc7c:	00bfffc4 	movi	r2,-1
 404bc80:	f800283a 	ret
 404bc84:	2292b03a 	or	r9,r4,r10
 404bc88:	483fe126 	beq	r9,zero,404bc10 <__alt_data_end+0xfffe1410>
 404bc8c:	003ff606 	br	404bc68 <__alt_data_end+0xfffe1468>
 404bc90:	18bff916 	blt	r3,r2,404bc78 <__alt_data_end+0xfffe1478>
 404bc94:	10c00316 	blt	r2,r3,404bca4 <__gedf2+0xc4>
 404bc98:	42bff736 	bltu	r8,r10,404bc78 <__alt_data_end+0xfffe1478>
 404bc9c:	52000326 	beq	r10,r8,404bcac <__gedf2+0xcc>
 404bca0:	5200042e 	bgeu	r10,r8,404bcb4 <__gedf2+0xd4>
 404bca4:	283fec1e 	bne	r5,zero,404bc58 <__alt_data_end+0xfffe1458>
 404bca8:	003ff406 	br	404bc7c <__alt_data_end+0xfffe147c>
 404bcac:	313ff236 	bltu	r6,r4,404bc78 <__alt_data_end+0xfffe1478>
 404bcb0:	21bffc36 	bltu	r4,r6,404bca4 <__alt_data_end+0xfffe14a4>
 404bcb4:	0005883a 	mov	r2,zero
 404bcb8:	f800283a 	ret

0404bcbc <__ledf2>:
 404bcbc:	2804d53a 	srli	r2,r5,20
 404bcc0:	3810d53a 	srli	r8,r7,20
 404bcc4:	00c00434 	movhi	r3,16
 404bcc8:	18ffffc4 	addi	r3,r3,-1
 404bccc:	1081ffcc 	andi	r2,r2,2047
 404bcd0:	0241ffc4 	movi	r9,2047
 404bcd4:	28d4703a 	and	r10,r5,r3
 404bcd8:	4201ffcc 	andi	r8,r8,2047
 404bcdc:	38c6703a 	and	r3,r7,r3
 404bce0:	280ad7fa 	srli	r5,r5,31
 404bce4:	380ed7fa 	srli	r7,r7,31
 404bce8:	12401f26 	beq	r2,r9,404bd68 <__ledf2+0xac>
 404bcec:	0241ffc4 	movi	r9,2047
 404bcf0:	42401426 	beq	r8,r9,404bd44 <__ledf2+0x88>
 404bcf4:	1000091e 	bne	r2,zero,404bd1c <__ledf2+0x60>
 404bcf8:	2296b03a 	or	r11,r4,r10
 404bcfc:	5813003a 	cmpeq	r9,r11,zero
 404bd00:	29403fcc 	andi	r5,r5,255
 404bd04:	40000a1e 	bne	r8,zero,404bd30 <__ledf2+0x74>
 404bd08:	30d8b03a 	or	r12,r6,r3
 404bd0c:	6000081e 	bne	r12,zero,404bd30 <__ledf2+0x74>
 404bd10:	0005883a 	mov	r2,zero
 404bd14:	5800111e 	bne	r11,zero,404bd5c <__ledf2+0xa0>
 404bd18:	f800283a 	ret
 404bd1c:	29403fcc 	andi	r5,r5,255
 404bd20:	40000c1e 	bne	r8,zero,404bd54 <__ledf2+0x98>
 404bd24:	30d2b03a 	or	r9,r6,r3
 404bd28:	48000c26 	beq	r9,zero,404bd5c <__ledf2+0xa0>
 404bd2c:	0013883a 	mov	r9,zero
 404bd30:	39c03fcc 	andi	r7,r7,255
 404bd34:	48000826 	beq	r9,zero,404bd58 <__ledf2+0x9c>
 404bd38:	38001126 	beq	r7,zero,404bd80 <__ledf2+0xc4>
 404bd3c:	00800044 	movi	r2,1
 404bd40:	f800283a 	ret
 404bd44:	30d2b03a 	or	r9,r6,r3
 404bd48:	483fea26 	beq	r9,zero,404bcf4 <__alt_data_end+0xfffe14f4>
 404bd4c:	00800084 	movi	r2,2
 404bd50:	f800283a 	ret
 404bd54:	39c03fcc 	andi	r7,r7,255
 404bd58:	39400726 	beq	r7,r5,404bd78 <__ledf2+0xbc>
 404bd5c:	2800081e 	bne	r5,zero,404bd80 <__ledf2+0xc4>
 404bd60:	00800044 	movi	r2,1
 404bd64:	f800283a 	ret
 404bd68:	2292b03a 	or	r9,r4,r10
 404bd6c:	483fdf26 	beq	r9,zero,404bcec <__alt_data_end+0xfffe14ec>
 404bd70:	00800084 	movi	r2,2
 404bd74:	f800283a 	ret
 404bd78:	4080030e 	bge	r8,r2,404bd88 <__ledf2+0xcc>
 404bd7c:	383fef26 	beq	r7,zero,404bd3c <__alt_data_end+0xfffe153c>
 404bd80:	00bfffc4 	movi	r2,-1
 404bd84:	f800283a 	ret
 404bd88:	123feb16 	blt	r2,r8,404bd38 <__alt_data_end+0xfffe1538>
 404bd8c:	1abff336 	bltu	r3,r10,404bd5c <__alt_data_end+0xfffe155c>
 404bd90:	50c00326 	beq	r10,r3,404bda0 <__ledf2+0xe4>
 404bd94:	50c0042e 	bgeu	r10,r3,404bda8 <__ledf2+0xec>
 404bd98:	283fe81e 	bne	r5,zero,404bd3c <__alt_data_end+0xfffe153c>
 404bd9c:	003ff806 	br	404bd80 <__alt_data_end+0xfffe1580>
 404bda0:	313fee36 	bltu	r6,r4,404bd5c <__alt_data_end+0xfffe155c>
 404bda4:	21bffc36 	bltu	r4,r6,404bd98 <__alt_data_end+0xfffe1598>
 404bda8:	0005883a 	mov	r2,zero
 404bdac:	f800283a 	ret

0404bdb0 <__muldf3>:
 404bdb0:	defff304 	addi	sp,sp,-52
 404bdb4:	2804d53a 	srli	r2,r5,20
 404bdb8:	dd800915 	stw	r22,36(sp)
 404bdbc:	282cd7fa 	srli	r22,r5,31
 404bdc0:	dc000315 	stw	r16,12(sp)
 404bdc4:	04000434 	movhi	r16,16
 404bdc8:	dd400815 	stw	r21,32(sp)
 404bdcc:	dc800515 	stw	r18,20(sp)
 404bdd0:	843fffc4 	addi	r16,r16,-1
 404bdd4:	dfc00c15 	stw	ra,48(sp)
 404bdd8:	df000b15 	stw	fp,44(sp)
 404bddc:	ddc00a15 	stw	r23,40(sp)
 404bde0:	dd000715 	stw	r20,28(sp)
 404bde4:	dcc00615 	stw	r19,24(sp)
 404bde8:	dc400415 	stw	r17,16(sp)
 404bdec:	1481ffcc 	andi	r18,r2,2047
 404bdf0:	2c20703a 	and	r16,r5,r16
 404bdf4:	b02b883a 	mov	r21,r22
 404bdf8:	b2403fcc 	andi	r9,r22,255
 404bdfc:	90006026 	beq	r18,zero,404bf80 <__muldf3+0x1d0>
 404be00:	0081ffc4 	movi	r2,2047
 404be04:	2029883a 	mov	r20,r4
 404be08:	90803626 	beq	r18,r2,404bee4 <__muldf3+0x134>
 404be0c:	80800434 	orhi	r2,r16,16
 404be10:	100490fa 	slli	r2,r2,3
 404be14:	2020d77a 	srli	r16,r4,29
 404be18:	202890fa 	slli	r20,r4,3
 404be1c:	94bf0044 	addi	r18,r18,-1023
 404be20:	80a0b03a 	or	r16,r16,r2
 404be24:	0027883a 	mov	r19,zero
 404be28:	0039883a 	mov	fp,zero
 404be2c:	3804d53a 	srli	r2,r7,20
 404be30:	382ed7fa 	srli	r23,r7,31
 404be34:	04400434 	movhi	r17,16
 404be38:	8c7fffc4 	addi	r17,r17,-1
 404be3c:	1081ffcc 	andi	r2,r2,2047
 404be40:	3011883a 	mov	r8,r6
 404be44:	3c62703a 	and	r17,r7,r17
 404be48:	ba803fcc 	andi	r10,r23,255
 404be4c:	10006d26 	beq	r2,zero,404c004 <__muldf3+0x254>
 404be50:	00c1ffc4 	movi	r3,2047
 404be54:	10c06526 	beq	r2,r3,404bfec <__muldf3+0x23c>
 404be58:	88c00434 	orhi	r3,r17,16
 404be5c:	180690fa 	slli	r3,r3,3
 404be60:	3022d77a 	srli	r17,r6,29
 404be64:	301090fa 	slli	r8,r6,3
 404be68:	10bf0044 	addi	r2,r2,-1023
 404be6c:	88e2b03a 	or	r17,r17,r3
 404be70:	000b883a 	mov	r5,zero
 404be74:	9085883a 	add	r2,r18,r2
 404be78:	2cc8b03a 	or	r4,r5,r19
 404be7c:	00c003c4 	movi	r3,15
 404be80:	bdacf03a 	xor	r22,r23,r22
 404be84:	12c00044 	addi	r11,r2,1
 404be88:	19009936 	bltu	r3,r4,404c0f0 <__muldf3+0x340>
 404be8c:	200890ba 	slli	r4,r4,2
 404be90:	00c10174 	movhi	r3,1029
 404be94:	18efa904 	addi	r3,r3,-16732
 404be98:	20c9883a 	add	r4,r4,r3
 404be9c:	20c00017 	ldw	r3,0(r4)
 404bea0:	1800683a 	jmp	r3
 404bea4:	0404c0f0 	cmpltui	r16,zero,4867
 404bea8:	0404bf04 	movi	r16,4860
 404beac:	0404bf04 	movi	r16,4860
 404beb0:	0404bf00 	call	404bf0 <__alt_mem_SDRAM_Controller_Shared+0x404bf0>
 404beb4:	0404c0cc 	andi	r16,zero,4867
 404beb8:	0404c0cc 	andi	r16,zero,4867
 404bebc:	0404c0b4 	movhi	r16,4866
 404bec0:	0404bf00 	call	404bf0 <__alt_mem_SDRAM_Controller_Shared+0x404bf0>
 404bec4:	0404c0cc 	andi	r16,zero,4867
 404bec8:	0404c0b4 	movhi	r16,4866
 404becc:	0404c0cc 	andi	r16,zero,4867
 404bed0:	0404bf00 	call	404bf0 <__alt_mem_SDRAM_Controller_Shared+0x404bf0>
 404bed4:	0404c0dc 	xori	r16,zero,4867
 404bed8:	0404c0dc 	xori	r16,zero,4867
 404bedc:	0404c0dc 	xori	r16,zero,4867
 404bee0:	0404c2f8 	rdprs	r16,zero,4875
 404bee4:	2404b03a 	or	r2,r4,r16
 404bee8:	10006f1e 	bne	r2,zero,404c0a8 <__muldf3+0x2f8>
 404beec:	04c00204 	movi	r19,8
 404bef0:	0021883a 	mov	r16,zero
 404bef4:	0029883a 	mov	r20,zero
 404bef8:	07000084 	movi	fp,2
 404befc:	003fcb06 	br	404be2c <__alt_data_end+0xfffe162c>
 404bf00:	502d883a 	mov	r22,r10
 404bf04:	00800084 	movi	r2,2
 404bf08:	28805726 	beq	r5,r2,404c068 <__muldf3+0x2b8>
 404bf0c:	008000c4 	movi	r2,3
 404bf10:	28816626 	beq	r5,r2,404c4ac <__muldf3+0x6fc>
 404bf14:	00800044 	movi	r2,1
 404bf18:	2881411e 	bne	r5,r2,404c420 <__muldf3+0x670>
 404bf1c:	b02b883a 	mov	r21,r22
 404bf20:	0005883a 	mov	r2,zero
 404bf24:	000b883a 	mov	r5,zero
 404bf28:	0029883a 	mov	r20,zero
 404bf2c:	1004953a 	slli	r2,r2,20
 404bf30:	a8c03fcc 	andi	r3,r21,255
 404bf34:	04400434 	movhi	r17,16
 404bf38:	8c7fffc4 	addi	r17,r17,-1
 404bf3c:	180697fa 	slli	r3,r3,31
 404bf40:	2c4a703a 	and	r5,r5,r17
 404bf44:	288ab03a 	or	r5,r5,r2
 404bf48:	28c6b03a 	or	r3,r5,r3
 404bf4c:	a005883a 	mov	r2,r20
 404bf50:	dfc00c17 	ldw	ra,48(sp)
 404bf54:	df000b17 	ldw	fp,44(sp)
 404bf58:	ddc00a17 	ldw	r23,40(sp)
 404bf5c:	dd800917 	ldw	r22,36(sp)
 404bf60:	dd400817 	ldw	r21,32(sp)
 404bf64:	dd000717 	ldw	r20,28(sp)
 404bf68:	dcc00617 	ldw	r19,24(sp)
 404bf6c:	dc800517 	ldw	r18,20(sp)
 404bf70:	dc400417 	ldw	r17,16(sp)
 404bf74:	dc000317 	ldw	r16,12(sp)
 404bf78:	dec00d04 	addi	sp,sp,52
 404bf7c:	f800283a 	ret
 404bf80:	2404b03a 	or	r2,r4,r16
 404bf84:	2027883a 	mov	r19,r4
 404bf88:	10004226 	beq	r2,zero,404c094 <__muldf3+0x2e4>
 404bf8c:	8000fc26 	beq	r16,zero,404c380 <__muldf3+0x5d0>
 404bf90:	8009883a 	mov	r4,r16
 404bf94:	d9800215 	stw	r6,8(sp)
 404bf98:	d9c00015 	stw	r7,0(sp)
 404bf9c:	da400115 	stw	r9,4(sp)
 404bfa0:	404cfc80 	call	404cfc8 <__clzsi2>
 404bfa4:	d9800217 	ldw	r6,8(sp)
 404bfa8:	d9c00017 	ldw	r7,0(sp)
 404bfac:	da400117 	ldw	r9,4(sp)
 404bfb0:	113ffd44 	addi	r4,r2,-11
 404bfb4:	00c00704 	movi	r3,28
 404bfb8:	1900ed16 	blt	r3,r4,404c370 <__muldf3+0x5c0>
 404bfbc:	00c00744 	movi	r3,29
 404bfc0:	147ffe04 	addi	r17,r2,-8
 404bfc4:	1907c83a 	sub	r3,r3,r4
 404bfc8:	8460983a 	sll	r16,r16,r17
 404bfcc:	98c6d83a 	srl	r3,r19,r3
 404bfd0:	9c68983a 	sll	r20,r19,r17
 404bfd4:	1c20b03a 	or	r16,r3,r16
 404bfd8:	1080fcc4 	addi	r2,r2,1011
 404bfdc:	00a5c83a 	sub	r18,zero,r2
 404bfe0:	0027883a 	mov	r19,zero
 404bfe4:	0039883a 	mov	fp,zero
 404bfe8:	003f9006 	br	404be2c <__alt_data_end+0xfffe162c>
 404bfec:	3446b03a 	or	r3,r6,r17
 404bff0:	1800261e 	bne	r3,zero,404c08c <__muldf3+0x2dc>
 404bff4:	0023883a 	mov	r17,zero
 404bff8:	0011883a 	mov	r8,zero
 404bffc:	01400084 	movi	r5,2
 404c000:	003f9c06 	br	404be74 <__alt_data_end+0xfffe1674>
 404c004:	3446b03a 	or	r3,r6,r17
 404c008:	18001c26 	beq	r3,zero,404c07c <__muldf3+0x2cc>
 404c00c:	8800ce26 	beq	r17,zero,404c348 <__muldf3+0x598>
 404c010:	8809883a 	mov	r4,r17
 404c014:	d9800215 	stw	r6,8(sp)
 404c018:	da400115 	stw	r9,4(sp)
 404c01c:	da800015 	stw	r10,0(sp)
 404c020:	404cfc80 	call	404cfc8 <__clzsi2>
 404c024:	d9800217 	ldw	r6,8(sp)
 404c028:	da400117 	ldw	r9,4(sp)
 404c02c:	da800017 	ldw	r10,0(sp)
 404c030:	113ffd44 	addi	r4,r2,-11
 404c034:	00c00704 	movi	r3,28
 404c038:	1900bf16 	blt	r3,r4,404c338 <__muldf3+0x588>
 404c03c:	00c00744 	movi	r3,29
 404c040:	123ffe04 	addi	r8,r2,-8
 404c044:	1907c83a 	sub	r3,r3,r4
 404c048:	8a22983a 	sll	r17,r17,r8
 404c04c:	30c6d83a 	srl	r3,r6,r3
 404c050:	3210983a 	sll	r8,r6,r8
 404c054:	1c62b03a 	or	r17,r3,r17
 404c058:	1080fcc4 	addi	r2,r2,1011
 404c05c:	0085c83a 	sub	r2,zero,r2
 404c060:	000b883a 	mov	r5,zero
 404c064:	003f8306 	br	404be74 <__alt_data_end+0xfffe1674>
 404c068:	b02b883a 	mov	r21,r22
 404c06c:	0081ffc4 	movi	r2,2047
 404c070:	000b883a 	mov	r5,zero
 404c074:	0029883a 	mov	r20,zero
 404c078:	003fac06 	br	404bf2c <__alt_data_end+0xfffe172c>
 404c07c:	0023883a 	mov	r17,zero
 404c080:	0011883a 	mov	r8,zero
 404c084:	01400044 	movi	r5,1
 404c088:	003f7a06 	br	404be74 <__alt_data_end+0xfffe1674>
 404c08c:	014000c4 	movi	r5,3
 404c090:	003f7806 	br	404be74 <__alt_data_end+0xfffe1674>
 404c094:	04c00104 	movi	r19,4
 404c098:	0021883a 	mov	r16,zero
 404c09c:	0029883a 	mov	r20,zero
 404c0a0:	07000044 	movi	fp,1
 404c0a4:	003f6106 	br	404be2c <__alt_data_end+0xfffe162c>
 404c0a8:	04c00304 	movi	r19,12
 404c0ac:	070000c4 	movi	fp,3
 404c0b0:	003f5e06 	br	404be2c <__alt_data_end+0xfffe162c>
 404c0b4:	01400434 	movhi	r5,16
 404c0b8:	002b883a 	mov	r21,zero
 404c0bc:	297fffc4 	addi	r5,r5,-1
 404c0c0:	053fffc4 	movi	r20,-1
 404c0c4:	0081ffc4 	movi	r2,2047
 404c0c8:	003f9806 	br	404bf2c <__alt_data_end+0xfffe172c>
 404c0cc:	8023883a 	mov	r17,r16
 404c0d0:	a011883a 	mov	r8,r20
 404c0d4:	e00b883a 	mov	r5,fp
 404c0d8:	003f8a06 	br	404bf04 <__alt_data_end+0xfffe1704>
 404c0dc:	8023883a 	mov	r17,r16
 404c0e0:	a011883a 	mov	r8,r20
 404c0e4:	482d883a 	mov	r22,r9
 404c0e8:	e00b883a 	mov	r5,fp
 404c0ec:	003f8506 	br	404bf04 <__alt_data_end+0xfffe1704>
 404c0f0:	a00ad43a 	srli	r5,r20,16
 404c0f4:	401ad43a 	srli	r13,r8,16
 404c0f8:	a53fffcc 	andi	r20,r20,65535
 404c0fc:	423fffcc 	andi	r8,r8,65535
 404c100:	4519383a 	mul	r12,r8,r20
 404c104:	4147383a 	mul	r3,r8,r5
 404c108:	6d09383a 	mul	r4,r13,r20
 404c10c:	600cd43a 	srli	r6,r12,16
 404c110:	2b5d383a 	mul	r14,r5,r13
 404c114:	20c9883a 	add	r4,r4,r3
 404c118:	310d883a 	add	r6,r6,r4
 404c11c:	30c0022e 	bgeu	r6,r3,404c128 <__muldf3+0x378>
 404c120:	00c00074 	movhi	r3,1
 404c124:	70dd883a 	add	r14,r14,r3
 404c128:	8826d43a 	srli	r19,r17,16
 404c12c:	8bffffcc 	andi	r15,r17,65535
 404c130:	7d23383a 	mul	r17,r15,r20
 404c134:	7949383a 	mul	r4,r15,r5
 404c138:	9d29383a 	mul	r20,r19,r20
 404c13c:	8814d43a 	srli	r10,r17,16
 404c140:	3012943a 	slli	r9,r6,16
 404c144:	a129883a 	add	r20,r20,r4
 404c148:	633fffcc 	andi	r12,r12,65535
 404c14c:	5515883a 	add	r10,r10,r20
 404c150:	3006d43a 	srli	r3,r6,16
 404c154:	4b13883a 	add	r9,r9,r12
 404c158:	2ccb383a 	mul	r5,r5,r19
 404c15c:	5100022e 	bgeu	r10,r4,404c168 <__muldf3+0x3b8>
 404c160:	01000074 	movhi	r4,1
 404c164:	290b883a 	add	r5,r5,r4
 404c168:	802ad43a 	srli	r21,r16,16
 404c16c:	843fffcc 	andi	r16,r16,65535
 404c170:	440d383a 	mul	r6,r8,r16
 404c174:	4565383a 	mul	r18,r8,r21
 404c178:	8349383a 	mul	r4,r16,r13
 404c17c:	500e943a 	slli	r7,r10,16
 404c180:	3010d43a 	srli	r8,r6,16
 404c184:	5028d43a 	srli	r20,r10,16
 404c188:	2489883a 	add	r4,r4,r18
 404c18c:	8abfffcc 	andi	r10,r17,65535
 404c190:	3a95883a 	add	r10,r7,r10
 404c194:	4119883a 	add	r12,r8,r4
 404c198:	a169883a 	add	r20,r20,r5
 404c19c:	1a87883a 	add	r3,r3,r10
 404c1a0:	6d5b383a 	mul	r13,r13,r21
 404c1a4:	6480022e 	bgeu	r12,r18,404c1b0 <__muldf3+0x400>
 404c1a8:	01000074 	movhi	r4,1
 404c1ac:	691b883a 	add	r13,r13,r4
 404c1b0:	7c25383a 	mul	r18,r15,r16
 404c1b4:	7d4b383a 	mul	r5,r15,r21
 404c1b8:	84cf383a 	mul	r7,r16,r19
 404c1bc:	901ed43a 	srli	r15,r18,16
 404c1c0:	6008d43a 	srli	r4,r12,16
 404c1c4:	6010943a 	slli	r8,r12,16
 404c1c8:	394f883a 	add	r7,r7,r5
 404c1cc:	333fffcc 	andi	r12,r6,65535
 404c1d0:	79df883a 	add	r15,r15,r7
 404c1d4:	235b883a 	add	r13,r4,r13
 404c1d8:	9d63383a 	mul	r17,r19,r21
 404c1dc:	4309883a 	add	r4,r8,r12
 404c1e0:	7940022e 	bgeu	r15,r5,404c1ec <__muldf3+0x43c>
 404c1e4:	01400074 	movhi	r5,1
 404c1e8:	8963883a 	add	r17,r17,r5
 404c1ec:	780a943a 	slli	r5,r15,16
 404c1f0:	91bfffcc 	andi	r6,r18,65535
 404c1f4:	70c7883a 	add	r3,r14,r3
 404c1f8:	298d883a 	add	r6,r5,r6
 404c1fc:	1a8f803a 	cmpltu	r7,r3,r10
 404c200:	350b883a 	add	r5,r6,r20
 404c204:	20c7883a 	add	r3,r4,r3
 404c208:	3955883a 	add	r10,r7,r5
 404c20c:	1909803a 	cmpltu	r4,r3,r4
 404c210:	6a91883a 	add	r8,r13,r10
 404c214:	780cd43a 	srli	r6,r15,16
 404c218:	2219883a 	add	r12,r4,r8
 404c21c:	2d0b803a 	cmpltu	r5,r5,r20
 404c220:	51cf803a 	cmpltu	r7,r10,r7
 404c224:	29ceb03a 	or	r7,r5,r7
 404c228:	4351803a 	cmpltu	r8,r8,r13
 404c22c:	610b803a 	cmpltu	r5,r12,r4
 404c230:	4148b03a 	or	r4,r8,r5
 404c234:	398f883a 	add	r7,r7,r6
 404c238:	3909883a 	add	r4,r7,r4
 404c23c:	1810927a 	slli	r8,r3,9
 404c240:	2449883a 	add	r4,r4,r17
 404c244:	2008927a 	slli	r4,r4,9
 404c248:	6022d5fa 	srli	r17,r12,23
 404c24c:	1806d5fa 	srli	r3,r3,23
 404c250:	4252b03a 	or	r9,r8,r9
 404c254:	600a927a 	slli	r5,r12,9
 404c258:	4810c03a 	cmpne	r8,r9,zero
 404c25c:	2462b03a 	or	r17,r4,r17
 404c260:	40c6b03a 	or	r3,r8,r3
 404c264:	8900402c 	andhi	r4,r17,256
 404c268:	1950b03a 	or	r8,r3,r5
 404c26c:	20000726 	beq	r4,zero,404c28c <__muldf3+0x4dc>
 404c270:	4006d07a 	srli	r3,r8,1
 404c274:	880497fa 	slli	r2,r17,31
 404c278:	4200004c 	andi	r8,r8,1
 404c27c:	8822d07a 	srli	r17,r17,1
 404c280:	1a10b03a 	or	r8,r3,r8
 404c284:	1210b03a 	or	r8,r2,r8
 404c288:	5805883a 	mov	r2,r11
 404c28c:	1140ffc4 	addi	r5,r2,1023
 404c290:	0140440e 	bge	zero,r5,404c3a4 <__muldf3+0x5f4>
 404c294:	40c001cc 	andi	r3,r8,7
 404c298:	18000726 	beq	r3,zero,404c2b8 <__muldf3+0x508>
 404c29c:	40c003cc 	andi	r3,r8,15
 404c2a0:	01000104 	movi	r4,4
 404c2a4:	19000426 	beq	r3,r4,404c2b8 <__muldf3+0x508>
 404c2a8:	4107883a 	add	r3,r8,r4
 404c2ac:	1a11803a 	cmpltu	r8,r3,r8
 404c2b0:	8a23883a 	add	r17,r17,r8
 404c2b4:	1811883a 	mov	r8,r3
 404c2b8:	88c0402c 	andhi	r3,r17,256
 404c2bc:	18000426 	beq	r3,zero,404c2d0 <__muldf3+0x520>
 404c2c0:	11410004 	addi	r5,r2,1024
 404c2c4:	00bfc034 	movhi	r2,65280
 404c2c8:	10bfffc4 	addi	r2,r2,-1
 404c2cc:	88a2703a 	and	r17,r17,r2
 404c2d0:	0081ff84 	movi	r2,2046
 404c2d4:	117f6416 	blt	r2,r5,404c068 <__alt_data_end+0xfffe1868>
 404c2d8:	8828977a 	slli	r20,r17,29
 404c2dc:	4010d0fa 	srli	r8,r8,3
 404c2e0:	8822927a 	slli	r17,r17,9
 404c2e4:	2881ffcc 	andi	r2,r5,2047
 404c2e8:	a228b03a 	or	r20,r20,r8
 404c2ec:	880ad33a 	srli	r5,r17,12
 404c2f0:	b02b883a 	mov	r21,r22
 404c2f4:	003f0d06 	br	404bf2c <__alt_data_end+0xfffe172c>
 404c2f8:	8080022c 	andhi	r2,r16,8
 404c2fc:	10000926 	beq	r2,zero,404c324 <__muldf3+0x574>
 404c300:	8880022c 	andhi	r2,r17,8
 404c304:	1000071e 	bne	r2,zero,404c324 <__muldf3+0x574>
 404c308:	00800434 	movhi	r2,16
 404c30c:	89400234 	orhi	r5,r17,8
 404c310:	10bfffc4 	addi	r2,r2,-1
 404c314:	b82b883a 	mov	r21,r23
 404c318:	288a703a 	and	r5,r5,r2
 404c31c:	4029883a 	mov	r20,r8
 404c320:	003f6806 	br	404c0c4 <__alt_data_end+0xfffe18c4>
 404c324:	00800434 	movhi	r2,16
 404c328:	81400234 	orhi	r5,r16,8
 404c32c:	10bfffc4 	addi	r2,r2,-1
 404c330:	288a703a 	and	r5,r5,r2
 404c334:	003f6306 	br	404c0c4 <__alt_data_end+0xfffe18c4>
 404c338:	147ff604 	addi	r17,r2,-40
 404c33c:	3462983a 	sll	r17,r6,r17
 404c340:	0011883a 	mov	r8,zero
 404c344:	003f4406 	br	404c058 <__alt_data_end+0xfffe1858>
 404c348:	3009883a 	mov	r4,r6
 404c34c:	d9800215 	stw	r6,8(sp)
 404c350:	da400115 	stw	r9,4(sp)
 404c354:	da800015 	stw	r10,0(sp)
 404c358:	404cfc80 	call	404cfc8 <__clzsi2>
 404c35c:	10800804 	addi	r2,r2,32
 404c360:	da800017 	ldw	r10,0(sp)
 404c364:	da400117 	ldw	r9,4(sp)
 404c368:	d9800217 	ldw	r6,8(sp)
 404c36c:	003f3006 	br	404c030 <__alt_data_end+0xfffe1830>
 404c370:	143ff604 	addi	r16,r2,-40
 404c374:	9c20983a 	sll	r16,r19,r16
 404c378:	0029883a 	mov	r20,zero
 404c37c:	003f1606 	br	404bfd8 <__alt_data_end+0xfffe17d8>
 404c380:	d9800215 	stw	r6,8(sp)
 404c384:	d9c00015 	stw	r7,0(sp)
 404c388:	da400115 	stw	r9,4(sp)
 404c38c:	404cfc80 	call	404cfc8 <__clzsi2>
 404c390:	10800804 	addi	r2,r2,32
 404c394:	da400117 	ldw	r9,4(sp)
 404c398:	d9c00017 	ldw	r7,0(sp)
 404c39c:	d9800217 	ldw	r6,8(sp)
 404c3a0:	003f0306 	br	404bfb0 <__alt_data_end+0xfffe17b0>
 404c3a4:	00c00044 	movi	r3,1
 404c3a8:	1947c83a 	sub	r3,r3,r5
 404c3ac:	00800e04 	movi	r2,56
 404c3b0:	10feda16 	blt	r2,r3,404bf1c <__alt_data_end+0xfffe171c>
 404c3b4:	008007c4 	movi	r2,31
 404c3b8:	10c01b16 	blt	r2,r3,404c428 <__muldf3+0x678>
 404c3bc:	00800804 	movi	r2,32
 404c3c0:	10c5c83a 	sub	r2,r2,r3
 404c3c4:	888a983a 	sll	r5,r17,r2
 404c3c8:	40c8d83a 	srl	r4,r8,r3
 404c3cc:	4084983a 	sll	r2,r8,r2
 404c3d0:	88e2d83a 	srl	r17,r17,r3
 404c3d4:	2906b03a 	or	r3,r5,r4
 404c3d8:	1004c03a 	cmpne	r2,r2,zero
 404c3dc:	1886b03a 	or	r3,r3,r2
 404c3e0:	188001cc 	andi	r2,r3,7
 404c3e4:	10000726 	beq	r2,zero,404c404 <__muldf3+0x654>
 404c3e8:	188003cc 	andi	r2,r3,15
 404c3ec:	01000104 	movi	r4,4
 404c3f0:	11000426 	beq	r2,r4,404c404 <__muldf3+0x654>
 404c3f4:	1805883a 	mov	r2,r3
 404c3f8:	10c00104 	addi	r3,r2,4
 404c3fc:	1885803a 	cmpltu	r2,r3,r2
 404c400:	88a3883a 	add	r17,r17,r2
 404c404:	8880202c 	andhi	r2,r17,128
 404c408:	10001c26 	beq	r2,zero,404c47c <__muldf3+0x6cc>
 404c40c:	b02b883a 	mov	r21,r22
 404c410:	00800044 	movi	r2,1
 404c414:	000b883a 	mov	r5,zero
 404c418:	0029883a 	mov	r20,zero
 404c41c:	003ec306 	br	404bf2c <__alt_data_end+0xfffe172c>
 404c420:	5805883a 	mov	r2,r11
 404c424:	003f9906 	br	404c28c <__alt_data_end+0xfffe1a8c>
 404c428:	00bff844 	movi	r2,-31
 404c42c:	1145c83a 	sub	r2,r2,r5
 404c430:	8888d83a 	srl	r4,r17,r2
 404c434:	00800804 	movi	r2,32
 404c438:	18801a26 	beq	r3,r2,404c4a4 <__muldf3+0x6f4>
 404c43c:	00801004 	movi	r2,64
 404c440:	10c5c83a 	sub	r2,r2,r3
 404c444:	8884983a 	sll	r2,r17,r2
 404c448:	1204b03a 	or	r2,r2,r8
 404c44c:	1004c03a 	cmpne	r2,r2,zero
 404c450:	2084b03a 	or	r2,r4,r2
 404c454:	144001cc 	andi	r17,r2,7
 404c458:	88000d1e 	bne	r17,zero,404c490 <__muldf3+0x6e0>
 404c45c:	000b883a 	mov	r5,zero
 404c460:	1028d0fa 	srli	r20,r2,3
 404c464:	b02b883a 	mov	r21,r22
 404c468:	0005883a 	mov	r2,zero
 404c46c:	a468b03a 	or	r20,r20,r17
 404c470:	003eae06 	br	404bf2c <__alt_data_end+0xfffe172c>
 404c474:	1007883a 	mov	r3,r2
 404c478:	0023883a 	mov	r17,zero
 404c47c:	880a927a 	slli	r5,r17,9
 404c480:	1805883a 	mov	r2,r3
 404c484:	8822977a 	slli	r17,r17,29
 404c488:	280ad33a 	srli	r5,r5,12
 404c48c:	003ff406 	br	404c460 <__alt_data_end+0xfffe1c60>
 404c490:	10c003cc 	andi	r3,r2,15
 404c494:	01000104 	movi	r4,4
 404c498:	193ff626 	beq	r3,r4,404c474 <__alt_data_end+0xfffe1c74>
 404c49c:	0023883a 	mov	r17,zero
 404c4a0:	003fd506 	br	404c3f8 <__alt_data_end+0xfffe1bf8>
 404c4a4:	0005883a 	mov	r2,zero
 404c4a8:	003fe706 	br	404c448 <__alt_data_end+0xfffe1c48>
 404c4ac:	00800434 	movhi	r2,16
 404c4b0:	89400234 	orhi	r5,r17,8
 404c4b4:	10bfffc4 	addi	r2,r2,-1
 404c4b8:	b02b883a 	mov	r21,r22
 404c4bc:	288a703a 	and	r5,r5,r2
 404c4c0:	4029883a 	mov	r20,r8
 404c4c4:	003eff06 	br	404c0c4 <__alt_data_end+0xfffe18c4>

0404c4c8 <__subdf3>:
 404c4c8:	02000434 	movhi	r8,16
 404c4cc:	423fffc4 	addi	r8,r8,-1
 404c4d0:	defffb04 	addi	sp,sp,-20
 404c4d4:	2a14703a 	and	r10,r5,r8
 404c4d8:	3812d53a 	srli	r9,r7,20
 404c4dc:	3a10703a 	and	r8,r7,r8
 404c4e0:	2006d77a 	srli	r3,r4,29
 404c4e4:	3004d77a 	srli	r2,r6,29
 404c4e8:	dc000015 	stw	r16,0(sp)
 404c4ec:	501490fa 	slli	r10,r10,3
 404c4f0:	2820d53a 	srli	r16,r5,20
 404c4f4:	401090fa 	slli	r8,r8,3
 404c4f8:	dc800215 	stw	r18,8(sp)
 404c4fc:	dc400115 	stw	r17,4(sp)
 404c500:	dfc00415 	stw	ra,16(sp)
 404c504:	202290fa 	slli	r17,r4,3
 404c508:	dcc00315 	stw	r19,12(sp)
 404c50c:	4a41ffcc 	andi	r9,r9,2047
 404c510:	0101ffc4 	movi	r4,2047
 404c514:	2824d7fa 	srli	r18,r5,31
 404c518:	8401ffcc 	andi	r16,r16,2047
 404c51c:	50c6b03a 	or	r3,r10,r3
 404c520:	380ed7fa 	srli	r7,r7,31
 404c524:	408ab03a 	or	r5,r8,r2
 404c528:	300c90fa 	slli	r6,r6,3
 404c52c:	49009626 	beq	r9,r4,404c788 <__subdf3+0x2c0>
 404c530:	39c0005c 	xori	r7,r7,1
 404c534:	8245c83a 	sub	r2,r16,r9
 404c538:	3c807426 	beq	r7,r18,404c70c <__subdf3+0x244>
 404c53c:	0080af0e 	bge	zero,r2,404c7fc <__subdf3+0x334>
 404c540:	48002a1e 	bne	r9,zero,404c5ec <__subdf3+0x124>
 404c544:	2988b03a 	or	r4,r5,r6
 404c548:	20009a1e 	bne	r4,zero,404c7b4 <__subdf3+0x2ec>
 404c54c:	888001cc 	andi	r2,r17,7
 404c550:	10000726 	beq	r2,zero,404c570 <__subdf3+0xa8>
 404c554:	888003cc 	andi	r2,r17,15
 404c558:	01000104 	movi	r4,4
 404c55c:	11000426 	beq	r2,r4,404c570 <__subdf3+0xa8>
 404c560:	890b883a 	add	r5,r17,r4
 404c564:	2c63803a 	cmpltu	r17,r5,r17
 404c568:	1c47883a 	add	r3,r3,r17
 404c56c:	2823883a 	mov	r17,r5
 404c570:	1880202c 	andhi	r2,r3,128
 404c574:	10005926 	beq	r2,zero,404c6dc <__subdf3+0x214>
 404c578:	84000044 	addi	r16,r16,1
 404c57c:	0081ffc4 	movi	r2,2047
 404c580:	8080be26 	beq	r16,r2,404c87c <__subdf3+0x3b4>
 404c584:	017fe034 	movhi	r5,65408
 404c588:	297fffc4 	addi	r5,r5,-1
 404c58c:	1946703a 	and	r3,r3,r5
 404c590:	1804977a 	slli	r2,r3,29
 404c594:	1806927a 	slli	r3,r3,9
 404c598:	8822d0fa 	srli	r17,r17,3
 404c59c:	8401ffcc 	andi	r16,r16,2047
 404c5a0:	180ad33a 	srli	r5,r3,12
 404c5a4:	9100004c 	andi	r4,r18,1
 404c5a8:	1444b03a 	or	r2,r2,r17
 404c5ac:	80c1ffcc 	andi	r3,r16,2047
 404c5b0:	1820953a 	slli	r16,r3,20
 404c5b4:	20c03fcc 	andi	r3,r4,255
 404c5b8:	180897fa 	slli	r4,r3,31
 404c5bc:	00c00434 	movhi	r3,16
 404c5c0:	18ffffc4 	addi	r3,r3,-1
 404c5c4:	28c6703a 	and	r3,r5,r3
 404c5c8:	1c06b03a 	or	r3,r3,r16
 404c5cc:	1906b03a 	or	r3,r3,r4
 404c5d0:	dfc00417 	ldw	ra,16(sp)
 404c5d4:	dcc00317 	ldw	r19,12(sp)
 404c5d8:	dc800217 	ldw	r18,8(sp)
 404c5dc:	dc400117 	ldw	r17,4(sp)
 404c5e0:	dc000017 	ldw	r16,0(sp)
 404c5e4:	dec00504 	addi	sp,sp,20
 404c5e8:	f800283a 	ret
 404c5ec:	0101ffc4 	movi	r4,2047
 404c5f0:	813fd626 	beq	r16,r4,404c54c <__alt_data_end+0xfffe1d4c>
 404c5f4:	29402034 	orhi	r5,r5,128
 404c5f8:	01000e04 	movi	r4,56
 404c5fc:	2080a316 	blt	r4,r2,404c88c <__subdf3+0x3c4>
 404c600:	010007c4 	movi	r4,31
 404c604:	2080c616 	blt	r4,r2,404c920 <__subdf3+0x458>
 404c608:	01000804 	movi	r4,32
 404c60c:	2089c83a 	sub	r4,r4,r2
 404c610:	2910983a 	sll	r8,r5,r4
 404c614:	308ed83a 	srl	r7,r6,r2
 404c618:	3108983a 	sll	r4,r6,r4
 404c61c:	2884d83a 	srl	r2,r5,r2
 404c620:	41ccb03a 	or	r6,r8,r7
 404c624:	2008c03a 	cmpne	r4,r4,zero
 404c628:	310cb03a 	or	r6,r6,r4
 404c62c:	898dc83a 	sub	r6,r17,r6
 404c630:	89a3803a 	cmpltu	r17,r17,r6
 404c634:	1887c83a 	sub	r3,r3,r2
 404c638:	1c47c83a 	sub	r3,r3,r17
 404c63c:	3023883a 	mov	r17,r6
 404c640:	1880202c 	andhi	r2,r3,128
 404c644:	10002326 	beq	r2,zero,404c6d4 <__subdf3+0x20c>
 404c648:	04c02034 	movhi	r19,128
 404c64c:	9cffffc4 	addi	r19,r19,-1
 404c650:	1ce6703a 	and	r19,r3,r19
 404c654:	98007a26 	beq	r19,zero,404c840 <__subdf3+0x378>
 404c658:	9809883a 	mov	r4,r19
 404c65c:	404cfc80 	call	404cfc8 <__clzsi2>
 404c660:	113ffe04 	addi	r4,r2,-8
 404c664:	00c007c4 	movi	r3,31
 404c668:	19007b16 	blt	r3,r4,404c858 <__subdf3+0x390>
 404c66c:	00800804 	movi	r2,32
 404c670:	1105c83a 	sub	r2,r2,r4
 404c674:	8884d83a 	srl	r2,r17,r2
 404c678:	9906983a 	sll	r3,r19,r4
 404c67c:	8922983a 	sll	r17,r17,r4
 404c680:	10c4b03a 	or	r2,r2,r3
 404c684:	24007816 	blt	r4,r16,404c868 <__subdf3+0x3a0>
 404c688:	2421c83a 	sub	r16,r4,r16
 404c68c:	80c00044 	addi	r3,r16,1
 404c690:	010007c4 	movi	r4,31
 404c694:	20c09516 	blt	r4,r3,404c8ec <__subdf3+0x424>
 404c698:	01400804 	movi	r5,32
 404c69c:	28cbc83a 	sub	r5,r5,r3
 404c6a0:	88c8d83a 	srl	r4,r17,r3
 404c6a4:	8962983a 	sll	r17,r17,r5
 404c6a8:	114a983a 	sll	r5,r2,r5
 404c6ac:	10c6d83a 	srl	r3,r2,r3
 404c6b0:	8804c03a 	cmpne	r2,r17,zero
 404c6b4:	290ab03a 	or	r5,r5,r4
 404c6b8:	28a2b03a 	or	r17,r5,r2
 404c6bc:	0021883a 	mov	r16,zero
 404c6c0:	003fa206 	br	404c54c <__alt_data_end+0xfffe1d4c>
 404c6c4:	2090b03a 	or	r8,r4,r2
 404c6c8:	40018e26 	beq	r8,zero,404cd04 <__subdf3+0x83c>
 404c6cc:	1007883a 	mov	r3,r2
 404c6d0:	2023883a 	mov	r17,r4
 404c6d4:	888001cc 	andi	r2,r17,7
 404c6d8:	103f9e1e 	bne	r2,zero,404c554 <__alt_data_end+0xfffe1d54>
 404c6dc:	1804977a 	slli	r2,r3,29
 404c6e0:	8822d0fa 	srli	r17,r17,3
 404c6e4:	1810d0fa 	srli	r8,r3,3
 404c6e8:	9100004c 	andi	r4,r18,1
 404c6ec:	1444b03a 	or	r2,r2,r17
 404c6f0:	00c1ffc4 	movi	r3,2047
 404c6f4:	80c02826 	beq	r16,r3,404c798 <__subdf3+0x2d0>
 404c6f8:	01400434 	movhi	r5,16
 404c6fc:	297fffc4 	addi	r5,r5,-1
 404c700:	80e0703a 	and	r16,r16,r3
 404c704:	414a703a 	and	r5,r8,r5
 404c708:	003fa806 	br	404c5ac <__alt_data_end+0xfffe1dac>
 404c70c:	0080630e 	bge	zero,r2,404c89c <__subdf3+0x3d4>
 404c710:	48003026 	beq	r9,zero,404c7d4 <__subdf3+0x30c>
 404c714:	0101ffc4 	movi	r4,2047
 404c718:	813f8c26 	beq	r16,r4,404c54c <__alt_data_end+0xfffe1d4c>
 404c71c:	29402034 	orhi	r5,r5,128
 404c720:	01000e04 	movi	r4,56
 404c724:	2080a90e 	bge	r4,r2,404c9cc <__subdf3+0x504>
 404c728:	298cb03a 	or	r6,r5,r6
 404c72c:	3012c03a 	cmpne	r9,r6,zero
 404c730:	0005883a 	mov	r2,zero
 404c734:	4c53883a 	add	r9,r9,r17
 404c738:	4c63803a 	cmpltu	r17,r9,r17
 404c73c:	10c7883a 	add	r3,r2,r3
 404c740:	88c7883a 	add	r3,r17,r3
 404c744:	4823883a 	mov	r17,r9
 404c748:	1880202c 	andhi	r2,r3,128
 404c74c:	1000d026 	beq	r2,zero,404ca90 <__subdf3+0x5c8>
 404c750:	84000044 	addi	r16,r16,1
 404c754:	0081ffc4 	movi	r2,2047
 404c758:	8080fe26 	beq	r16,r2,404cb54 <__subdf3+0x68c>
 404c75c:	00bfe034 	movhi	r2,65408
 404c760:	10bfffc4 	addi	r2,r2,-1
 404c764:	1886703a 	and	r3,r3,r2
 404c768:	880ad07a 	srli	r5,r17,1
 404c76c:	180497fa 	slli	r2,r3,31
 404c770:	8900004c 	andi	r4,r17,1
 404c774:	2922b03a 	or	r17,r5,r4
 404c778:	1806d07a 	srli	r3,r3,1
 404c77c:	1462b03a 	or	r17,r2,r17
 404c780:	3825883a 	mov	r18,r7
 404c784:	003f7106 	br	404c54c <__alt_data_end+0xfffe1d4c>
 404c788:	2984b03a 	or	r2,r5,r6
 404c78c:	103f6826 	beq	r2,zero,404c530 <__alt_data_end+0xfffe1d30>
 404c790:	39c03fcc 	andi	r7,r7,255
 404c794:	003f6706 	br	404c534 <__alt_data_end+0xfffe1d34>
 404c798:	4086b03a 	or	r3,r8,r2
 404c79c:	18015226 	beq	r3,zero,404cce8 <__subdf3+0x820>
 404c7a0:	00c00434 	movhi	r3,16
 404c7a4:	41400234 	orhi	r5,r8,8
 404c7a8:	18ffffc4 	addi	r3,r3,-1
 404c7ac:	28ca703a 	and	r5,r5,r3
 404c7b0:	003f7e06 	br	404c5ac <__alt_data_end+0xfffe1dac>
 404c7b4:	10bfffc4 	addi	r2,r2,-1
 404c7b8:	1000491e 	bne	r2,zero,404c8e0 <__subdf3+0x418>
 404c7bc:	898fc83a 	sub	r7,r17,r6
 404c7c0:	89e3803a 	cmpltu	r17,r17,r7
 404c7c4:	1947c83a 	sub	r3,r3,r5
 404c7c8:	1c47c83a 	sub	r3,r3,r17
 404c7cc:	3823883a 	mov	r17,r7
 404c7d0:	003f9b06 	br	404c640 <__alt_data_end+0xfffe1e40>
 404c7d4:	2988b03a 	or	r4,r5,r6
 404c7d8:	203f5c26 	beq	r4,zero,404c54c <__alt_data_end+0xfffe1d4c>
 404c7dc:	10bfffc4 	addi	r2,r2,-1
 404c7e0:	1000931e 	bne	r2,zero,404ca30 <__subdf3+0x568>
 404c7e4:	898d883a 	add	r6,r17,r6
 404c7e8:	3463803a 	cmpltu	r17,r6,r17
 404c7ec:	1947883a 	add	r3,r3,r5
 404c7f0:	88c7883a 	add	r3,r17,r3
 404c7f4:	3023883a 	mov	r17,r6
 404c7f8:	003fd306 	br	404c748 <__alt_data_end+0xfffe1f48>
 404c7fc:	1000541e 	bne	r2,zero,404c950 <__subdf3+0x488>
 404c800:	80800044 	addi	r2,r16,1
 404c804:	1081ffcc 	andi	r2,r2,2047
 404c808:	01000044 	movi	r4,1
 404c80c:	2080a20e 	bge	r4,r2,404ca98 <__subdf3+0x5d0>
 404c810:	8989c83a 	sub	r4,r17,r6
 404c814:	8905803a 	cmpltu	r2,r17,r4
 404c818:	1967c83a 	sub	r19,r3,r5
 404c81c:	98a7c83a 	sub	r19,r19,r2
 404c820:	9880202c 	andhi	r2,r19,128
 404c824:	10006326 	beq	r2,zero,404c9b4 <__subdf3+0x4ec>
 404c828:	3463c83a 	sub	r17,r6,r17
 404c82c:	28c7c83a 	sub	r3,r5,r3
 404c830:	344d803a 	cmpltu	r6,r6,r17
 404c834:	19a7c83a 	sub	r19,r3,r6
 404c838:	3825883a 	mov	r18,r7
 404c83c:	983f861e 	bne	r19,zero,404c658 <__alt_data_end+0xfffe1e58>
 404c840:	8809883a 	mov	r4,r17
 404c844:	404cfc80 	call	404cfc8 <__clzsi2>
 404c848:	10800804 	addi	r2,r2,32
 404c84c:	113ffe04 	addi	r4,r2,-8
 404c850:	00c007c4 	movi	r3,31
 404c854:	193f850e 	bge	r3,r4,404c66c <__alt_data_end+0xfffe1e6c>
 404c858:	10bff604 	addi	r2,r2,-40
 404c85c:	8884983a 	sll	r2,r17,r2
 404c860:	0023883a 	mov	r17,zero
 404c864:	243f880e 	bge	r4,r16,404c688 <__alt_data_end+0xfffe1e88>
 404c868:	00ffe034 	movhi	r3,65408
 404c86c:	18ffffc4 	addi	r3,r3,-1
 404c870:	8121c83a 	sub	r16,r16,r4
 404c874:	10c6703a 	and	r3,r2,r3
 404c878:	003f3406 	br	404c54c <__alt_data_end+0xfffe1d4c>
 404c87c:	9100004c 	andi	r4,r18,1
 404c880:	000b883a 	mov	r5,zero
 404c884:	0005883a 	mov	r2,zero
 404c888:	003f4806 	br	404c5ac <__alt_data_end+0xfffe1dac>
 404c88c:	298cb03a 	or	r6,r5,r6
 404c890:	300cc03a 	cmpne	r6,r6,zero
 404c894:	0005883a 	mov	r2,zero
 404c898:	003f6406 	br	404c62c <__alt_data_end+0xfffe1e2c>
 404c89c:	10009a1e 	bne	r2,zero,404cb08 <__subdf3+0x640>
 404c8a0:	82400044 	addi	r9,r16,1
 404c8a4:	4881ffcc 	andi	r2,r9,2047
 404c8a8:	02800044 	movi	r10,1
 404c8ac:	5080670e 	bge	r10,r2,404ca4c <__subdf3+0x584>
 404c8b0:	0081ffc4 	movi	r2,2047
 404c8b4:	4880af26 	beq	r9,r2,404cb74 <__subdf3+0x6ac>
 404c8b8:	898d883a 	add	r6,r17,r6
 404c8bc:	1945883a 	add	r2,r3,r5
 404c8c0:	3447803a 	cmpltu	r3,r6,r17
 404c8c4:	1887883a 	add	r3,r3,r2
 404c8c8:	182297fa 	slli	r17,r3,31
 404c8cc:	300cd07a 	srli	r6,r6,1
 404c8d0:	1806d07a 	srli	r3,r3,1
 404c8d4:	4821883a 	mov	r16,r9
 404c8d8:	89a2b03a 	or	r17,r17,r6
 404c8dc:	003f1b06 	br	404c54c <__alt_data_end+0xfffe1d4c>
 404c8e0:	0101ffc4 	movi	r4,2047
 404c8e4:	813f441e 	bne	r16,r4,404c5f8 <__alt_data_end+0xfffe1df8>
 404c8e8:	003f1806 	br	404c54c <__alt_data_end+0xfffe1d4c>
 404c8ec:	843ff844 	addi	r16,r16,-31
 404c8f0:	01400804 	movi	r5,32
 404c8f4:	1408d83a 	srl	r4,r2,r16
 404c8f8:	19405026 	beq	r3,r5,404ca3c <__subdf3+0x574>
 404c8fc:	01401004 	movi	r5,64
 404c900:	28c7c83a 	sub	r3,r5,r3
 404c904:	10c4983a 	sll	r2,r2,r3
 404c908:	88a2b03a 	or	r17,r17,r2
 404c90c:	8822c03a 	cmpne	r17,r17,zero
 404c910:	2462b03a 	or	r17,r4,r17
 404c914:	0007883a 	mov	r3,zero
 404c918:	0021883a 	mov	r16,zero
 404c91c:	003f6d06 	br	404c6d4 <__alt_data_end+0xfffe1ed4>
 404c920:	11fff804 	addi	r7,r2,-32
 404c924:	01000804 	movi	r4,32
 404c928:	29ced83a 	srl	r7,r5,r7
 404c92c:	11004526 	beq	r2,r4,404ca44 <__subdf3+0x57c>
 404c930:	01001004 	movi	r4,64
 404c934:	2089c83a 	sub	r4,r4,r2
 404c938:	2904983a 	sll	r2,r5,r4
 404c93c:	118cb03a 	or	r6,r2,r6
 404c940:	300cc03a 	cmpne	r6,r6,zero
 404c944:	398cb03a 	or	r6,r7,r6
 404c948:	0005883a 	mov	r2,zero
 404c94c:	003f3706 	br	404c62c <__alt_data_end+0xfffe1e2c>
 404c950:	80002a26 	beq	r16,zero,404c9fc <__subdf3+0x534>
 404c954:	0101ffc4 	movi	r4,2047
 404c958:	49006626 	beq	r9,r4,404caf4 <__subdf3+0x62c>
 404c95c:	0085c83a 	sub	r2,zero,r2
 404c960:	18c02034 	orhi	r3,r3,128
 404c964:	01000e04 	movi	r4,56
 404c968:	20807e16 	blt	r4,r2,404cb64 <__subdf3+0x69c>
 404c96c:	010007c4 	movi	r4,31
 404c970:	2080e716 	blt	r4,r2,404cd10 <__subdf3+0x848>
 404c974:	01000804 	movi	r4,32
 404c978:	2089c83a 	sub	r4,r4,r2
 404c97c:	1914983a 	sll	r10,r3,r4
 404c980:	8890d83a 	srl	r8,r17,r2
 404c984:	8908983a 	sll	r4,r17,r4
 404c988:	1884d83a 	srl	r2,r3,r2
 404c98c:	5222b03a 	or	r17,r10,r8
 404c990:	2006c03a 	cmpne	r3,r4,zero
 404c994:	88e2b03a 	or	r17,r17,r3
 404c998:	3463c83a 	sub	r17,r6,r17
 404c99c:	2885c83a 	sub	r2,r5,r2
 404c9a0:	344d803a 	cmpltu	r6,r6,r17
 404c9a4:	1187c83a 	sub	r3,r2,r6
 404c9a8:	4821883a 	mov	r16,r9
 404c9ac:	3825883a 	mov	r18,r7
 404c9b0:	003f2306 	br	404c640 <__alt_data_end+0xfffe1e40>
 404c9b4:	24d0b03a 	or	r8,r4,r19
 404c9b8:	40001b1e 	bne	r8,zero,404ca28 <__subdf3+0x560>
 404c9bc:	0005883a 	mov	r2,zero
 404c9c0:	0009883a 	mov	r4,zero
 404c9c4:	0021883a 	mov	r16,zero
 404c9c8:	003f4906 	br	404c6f0 <__alt_data_end+0xfffe1ef0>
 404c9cc:	010007c4 	movi	r4,31
 404c9d0:	20803a16 	blt	r4,r2,404cabc <__subdf3+0x5f4>
 404c9d4:	01000804 	movi	r4,32
 404c9d8:	2089c83a 	sub	r4,r4,r2
 404c9dc:	2912983a 	sll	r9,r5,r4
 404c9e0:	3090d83a 	srl	r8,r6,r2
 404c9e4:	3108983a 	sll	r4,r6,r4
 404c9e8:	2884d83a 	srl	r2,r5,r2
 404c9ec:	4a12b03a 	or	r9,r9,r8
 404c9f0:	2008c03a 	cmpne	r4,r4,zero
 404c9f4:	4912b03a 	or	r9,r9,r4
 404c9f8:	003f4e06 	br	404c734 <__alt_data_end+0xfffe1f34>
 404c9fc:	1c48b03a 	or	r4,r3,r17
 404ca00:	20003c26 	beq	r4,zero,404caf4 <__subdf3+0x62c>
 404ca04:	0084303a 	nor	r2,zero,r2
 404ca08:	1000381e 	bne	r2,zero,404caec <__subdf3+0x624>
 404ca0c:	3463c83a 	sub	r17,r6,r17
 404ca10:	28c5c83a 	sub	r2,r5,r3
 404ca14:	344d803a 	cmpltu	r6,r6,r17
 404ca18:	1187c83a 	sub	r3,r2,r6
 404ca1c:	4821883a 	mov	r16,r9
 404ca20:	3825883a 	mov	r18,r7
 404ca24:	003f0606 	br	404c640 <__alt_data_end+0xfffe1e40>
 404ca28:	2023883a 	mov	r17,r4
 404ca2c:	003f0906 	br	404c654 <__alt_data_end+0xfffe1e54>
 404ca30:	0101ffc4 	movi	r4,2047
 404ca34:	813f3a1e 	bne	r16,r4,404c720 <__alt_data_end+0xfffe1f20>
 404ca38:	003ec406 	br	404c54c <__alt_data_end+0xfffe1d4c>
 404ca3c:	0005883a 	mov	r2,zero
 404ca40:	003fb106 	br	404c908 <__alt_data_end+0xfffe2108>
 404ca44:	0005883a 	mov	r2,zero
 404ca48:	003fbc06 	br	404c93c <__alt_data_end+0xfffe213c>
 404ca4c:	1c44b03a 	or	r2,r3,r17
 404ca50:	80008e1e 	bne	r16,zero,404cc8c <__subdf3+0x7c4>
 404ca54:	1000c826 	beq	r2,zero,404cd78 <__subdf3+0x8b0>
 404ca58:	2984b03a 	or	r2,r5,r6
 404ca5c:	103ebb26 	beq	r2,zero,404c54c <__alt_data_end+0xfffe1d4c>
 404ca60:	8989883a 	add	r4,r17,r6
 404ca64:	1945883a 	add	r2,r3,r5
 404ca68:	2447803a 	cmpltu	r3,r4,r17
 404ca6c:	1887883a 	add	r3,r3,r2
 404ca70:	1880202c 	andhi	r2,r3,128
 404ca74:	2023883a 	mov	r17,r4
 404ca78:	103f1626 	beq	r2,zero,404c6d4 <__alt_data_end+0xfffe1ed4>
 404ca7c:	00bfe034 	movhi	r2,65408
 404ca80:	10bfffc4 	addi	r2,r2,-1
 404ca84:	5021883a 	mov	r16,r10
 404ca88:	1886703a 	and	r3,r3,r2
 404ca8c:	003eaf06 	br	404c54c <__alt_data_end+0xfffe1d4c>
 404ca90:	3825883a 	mov	r18,r7
 404ca94:	003f0f06 	br	404c6d4 <__alt_data_end+0xfffe1ed4>
 404ca98:	1c44b03a 	or	r2,r3,r17
 404ca9c:	8000251e 	bne	r16,zero,404cb34 <__subdf3+0x66c>
 404caa0:	1000661e 	bne	r2,zero,404cc3c <__subdf3+0x774>
 404caa4:	2990b03a 	or	r8,r5,r6
 404caa8:	40009626 	beq	r8,zero,404cd04 <__subdf3+0x83c>
 404caac:	2807883a 	mov	r3,r5
 404cab0:	3023883a 	mov	r17,r6
 404cab4:	3825883a 	mov	r18,r7
 404cab8:	003ea406 	br	404c54c <__alt_data_end+0xfffe1d4c>
 404cabc:	127ff804 	addi	r9,r2,-32
 404cac0:	01000804 	movi	r4,32
 404cac4:	2a52d83a 	srl	r9,r5,r9
 404cac8:	11008c26 	beq	r2,r4,404ccfc <__subdf3+0x834>
 404cacc:	01001004 	movi	r4,64
 404cad0:	2085c83a 	sub	r2,r4,r2
 404cad4:	2884983a 	sll	r2,r5,r2
 404cad8:	118cb03a 	or	r6,r2,r6
 404cadc:	300cc03a 	cmpne	r6,r6,zero
 404cae0:	4992b03a 	or	r9,r9,r6
 404cae4:	0005883a 	mov	r2,zero
 404cae8:	003f1206 	br	404c734 <__alt_data_end+0xfffe1f34>
 404caec:	0101ffc4 	movi	r4,2047
 404caf0:	493f9c1e 	bne	r9,r4,404c964 <__alt_data_end+0xfffe2164>
 404caf4:	2807883a 	mov	r3,r5
 404caf8:	3023883a 	mov	r17,r6
 404cafc:	4821883a 	mov	r16,r9
 404cb00:	3825883a 	mov	r18,r7
 404cb04:	003e9106 	br	404c54c <__alt_data_end+0xfffe1d4c>
 404cb08:	80001f1e 	bne	r16,zero,404cb88 <__subdf3+0x6c0>
 404cb0c:	1c48b03a 	or	r4,r3,r17
 404cb10:	20005a26 	beq	r4,zero,404cc7c <__subdf3+0x7b4>
 404cb14:	0084303a 	nor	r2,zero,r2
 404cb18:	1000561e 	bne	r2,zero,404cc74 <__subdf3+0x7ac>
 404cb1c:	89a3883a 	add	r17,r17,r6
 404cb20:	1945883a 	add	r2,r3,r5
 404cb24:	898d803a 	cmpltu	r6,r17,r6
 404cb28:	3087883a 	add	r3,r6,r2
 404cb2c:	4821883a 	mov	r16,r9
 404cb30:	003f0506 	br	404c748 <__alt_data_end+0xfffe1f48>
 404cb34:	10002b1e 	bne	r2,zero,404cbe4 <__subdf3+0x71c>
 404cb38:	2984b03a 	or	r2,r5,r6
 404cb3c:	10008026 	beq	r2,zero,404cd40 <__subdf3+0x878>
 404cb40:	2807883a 	mov	r3,r5
 404cb44:	3023883a 	mov	r17,r6
 404cb48:	3825883a 	mov	r18,r7
 404cb4c:	0401ffc4 	movi	r16,2047
 404cb50:	003e7e06 	br	404c54c <__alt_data_end+0xfffe1d4c>
 404cb54:	3809883a 	mov	r4,r7
 404cb58:	0011883a 	mov	r8,zero
 404cb5c:	0005883a 	mov	r2,zero
 404cb60:	003ee306 	br	404c6f0 <__alt_data_end+0xfffe1ef0>
 404cb64:	1c62b03a 	or	r17,r3,r17
 404cb68:	8822c03a 	cmpne	r17,r17,zero
 404cb6c:	0005883a 	mov	r2,zero
 404cb70:	003f8906 	br	404c998 <__alt_data_end+0xfffe2198>
 404cb74:	3809883a 	mov	r4,r7
 404cb78:	4821883a 	mov	r16,r9
 404cb7c:	0011883a 	mov	r8,zero
 404cb80:	0005883a 	mov	r2,zero
 404cb84:	003eda06 	br	404c6f0 <__alt_data_end+0xfffe1ef0>
 404cb88:	0101ffc4 	movi	r4,2047
 404cb8c:	49003b26 	beq	r9,r4,404cc7c <__subdf3+0x7b4>
 404cb90:	0085c83a 	sub	r2,zero,r2
 404cb94:	18c02034 	orhi	r3,r3,128
 404cb98:	01000e04 	movi	r4,56
 404cb9c:	20806e16 	blt	r4,r2,404cd58 <__subdf3+0x890>
 404cba0:	010007c4 	movi	r4,31
 404cba4:	20807716 	blt	r4,r2,404cd84 <__subdf3+0x8bc>
 404cba8:	01000804 	movi	r4,32
 404cbac:	2089c83a 	sub	r4,r4,r2
 404cbb0:	1914983a 	sll	r10,r3,r4
 404cbb4:	8890d83a 	srl	r8,r17,r2
 404cbb8:	8908983a 	sll	r4,r17,r4
 404cbbc:	1884d83a 	srl	r2,r3,r2
 404cbc0:	5222b03a 	or	r17,r10,r8
 404cbc4:	2006c03a 	cmpne	r3,r4,zero
 404cbc8:	88e2b03a 	or	r17,r17,r3
 404cbcc:	89a3883a 	add	r17,r17,r6
 404cbd0:	1145883a 	add	r2,r2,r5
 404cbd4:	898d803a 	cmpltu	r6,r17,r6
 404cbd8:	3087883a 	add	r3,r6,r2
 404cbdc:	4821883a 	mov	r16,r9
 404cbe0:	003ed906 	br	404c748 <__alt_data_end+0xfffe1f48>
 404cbe4:	2984b03a 	or	r2,r5,r6
 404cbe8:	10004226 	beq	r2,zero,404ccf4 <__subdf3+0x82c>
 404cbec:	1808d0fa 	srli	r4,r3,3
 404cbf0:	8822d0fa 	srli	r17,r17,3
 404cbf4:	1806977a 	slli	r3,r3,29
 404cbf8:	2080022c 	andhi	r2,r4,8
 404cbfc:	1c62b03a 	or	r17,r3,r17
 404cc00:	10000826 	beq	r2,zero,404cc24 <__subdf3+0x75c>
 404cc04:	2812d0fa 	srli	r9,r5,3
 404cc08:	4880022c 	andhi	r2,r9,8
 404cc0c:	1000051e 	bne	r2,zero,404cc24 <__subdf3+0x75c>
 404cc10:	300cd0fa 	srli	r6,r6,3
 404cc14:	2804977a 	slli	r2,r5,29
 404cc18:	4809883a 	mov	r4,r9
 404cc1c:	3825883a 	mov	r18,r7
 404cc20:	11a2b03a 	or	r17,r2,r6
 404cc24:	8806d77a 	srli	r3,r17,29
 404cc28:	200890fa 	slli	r4,r4,3
 404cc2c:	882290fa 	slli	r17,r17,3
 404cc30:	0401ffc4 	movi	r16,2047
 404cc34:	1906b03a 	or	r3,r3,r4
 404cc38:	003e4406 	br	404c54c <__alt_data_end+0xfffe1d4c>
 404cc3c:	2984b03a 	or	r2,r5,r6
 404cc40:	103e4226 	beq	r2,zero,404c54c <__alt_data_end+0xfffe1d4c>
 404cc44:	8989c83a 	sub	r4,r17,r6
 404cc48:	8911803a 	cmpltu	r8,r17,r4
 404cc4c:	1945c83a 	sub	r2,r3,r5
 404cc50:	1205c83a 	sub	r2,r2,r8
 404cc54:	1200202c 	andhi	r8,r2,128
 404cc58:	403e9a26 	beq	r8,zero,404c6c4 <__alt_data_end+0xfffe1ec4>
 404cc5c:	3463c83a 	sub	r17,r6,r17
 404cc60:	28c5c83a 	sub	r2,r5,r3
 404cc64:	344d803a 	cmpltu	r6,r6,r17
 404cc68:	1187c83a 	sub	r3,r2,r6
 404cc6c:	3825883a 	mov	r18,r7
 404cc70:	003e3606 	br	404c54c <__alt_data_end+0xfffe1d4c>
 404cc74:	0101ffc4 	movi	r4,2047
 404cc78:	493fc71e 	bne	r9,r4,404cb98 <__alt_data_end+0xfffe2398>
 404cc7c:	2807883a 	mov	r3,r5
 404cc80:	3023883a 	mov	r17,r6
 404cc84:	4821883a 	mov	r16,r9
 404cc88:	003e3006 	br	404c54c <__alt_data_end+0xfffe1d4c>
 404cc8c:	10003626 	beq	r2,zero,404cd68 <__subdf3+0x8a0>
 404cc90:	2984b03a 	or	r2,r5,r6
 404cc94:	10001726 	beq	r2,zero,404ccf4 <__subdf3+0x82c>
 404cc98:	1808d0fa 	srli	r4,r3,3
 404cc9c:	8822d0fa 	srli	r17,r17,3
 404cca0:	1806977a 	slli	r3,r3,29
 404cca4:	2080022c 	andhi	r2,r4,8
 404cca8:	1c62b03a 	or	r17,r3,r17
 404ccac:	10000726 	beq	r2,zero,404cccc <__subdf3+0x804>
 404ccb0:	2812d0fa 	srli	r9,r5,3
 404ccb4:	4880022c 	andhi	r2,r9,8
 404ccb8:	1000041e 	bne	r2,zero,404cccc <__subdf3+0x804>
 404ccbc:	300cd0fa 	srli	r6,r6,3
 404ccc0:	2804977a 	slli	r2,r5,29
 404ccc4:	4809883a 	mov	r4,r9
 404ccc8:	11a2b03a 	or	r17,r2,r6
 404cccc:	8806d77a 	srli	r3,r17,29
 404ccd0:	200890fa 	slli	r4,r4,3
 404ccd4:	882290fa 	slli	r17,r17,3
 404ccd8:	3825883a 	mov	r18,r7
 404ccdc:	1906b03a 	or	r3,r3,r4
 404cce0:	0401ffc4 	movi	r16,2047
 404cce4:	003e1906 	br	404c54c <__alt_data_end+0xfffe1d4c>
 404cce8:	000b883a 	mov	r5,zero
 404ccec:	0005883a 	mov	r2,zero
 404ccf0:	003e2e06 	br	404c5ac <__alt_data_end+0xfffe1dac>
 404ccf4:	0401ffc4 	movi	r16,2047
 404ccf8:	003e1406 	br	404c54c <__alt_data_end+0xfffe1d4c>
 404ccfc:	0005883a 	mov	r2,zero
 404cd00:	003f7506 	br	404cad8 <__alt_data_end+0xfffe22d8>
 404cd04:	0005883a 	mov	r2,zero
 404cd08:	0009883a 	mov	r4,zero
 404cd0c:	003e7806 	br	404c6f0 <__alt_data_end+0xfffe1ef0>
 404cd10:	123ff804 	addi	r8,r2,-32
 404cd14:	01000804 	movi	r4,32
 404cd18:	1a10d83a 	srl	r8,r3,r8
 404cd1c:	11002526 	beq	r2,r4,404cdb4 <__subdf3+0x8ec>
 404cd20:	01001004 	movi	r4,64
 404cd24:	2085c83a 	sub	r2,r4,r2
 404cd28:	1884983a 	sll	r2,r3,r2
 404cd2c:	1444b03a 	or	r2,r2,r17
 404cd30:	1004c03a 	cmpne	r2,r2,zero
 404cd34:	40a2b03a 	or	r17,r8,r2
 404cd38:	0005883a 	mov	r2,zero
 404cd3c:	003f1606 	br	404c998 <__alt_data_end+0xfffe2198>
 404cd40:	02000434 	movhi	r8,16
 404cd44:	0009883a 	mov	r4,zero
 404cd48:	423fffc4 	addi	r8,r8,-1
 404cd4c:	00bfffc4 	movi	r2,-1
 404cd50:	0401ffc4 	movi	r16,2047
 404cd54:	003e6606 	br	404c6f0 <__alt_data_end+0xfffe1ef0>
 404cd58:	1c62b03a 	or	r17,r3,r17
 404cd5c:	8822c03a 	cmpne	r17,r17,zero
 404cd60:	0005883a 	mov	r2,zero
 404cd64:	003f9906 	br	404cbcc <__alt_data_end+0xfffe23cc>
 404cd68:	2807883a 	mov	r3,r5
 404cd6c:	3023883a 	mov	r17,r6
 404cd70:	0401ffc4 	movi	r16,2047
 404cd74:	003df506 	br	404c54c <__alt_data_end+0xfffe1d4c>
 404cd78:	2807883a 	mov	r3,r5
 404cd7c:	3023883a 	mov	r17,r6
 404cd80:	003df206 	br	404c54c <__alt_data_end+0xfffe1d4c>
 404cd84:	123ff804 	addi	r8,r2,-32
 404cd88:	01000804 	movi	r4,32
 404cd8c:	1a10d83a 	srl	r8,r3,r8
 404cd90:	11000a26 	beq	r2,r4,404cdbc <__subdf3+0x8f4>
 404cd94:	01001004 	movi	r4,64
 404cd98:	2085c83a 	sub	r2,r4,r2
 404cd9c:	1884983a 	sll	r2,r3,r2
 404cda0:	1444b03a 	or	r2,r2,r17
 404cda4:	1004c03a 	cmpne	r2,r2,zero
 404cda8:	40a2b03a 	or	r17,r8,r2
 404cdac:	0005883a 	mov	r2,zero
 404cdb0:	003f8606 	br	404cbcc <__alt_data_end+0xfffe23cc>
 404cdb4:	0005883a 	mov	r2,zero
 404cdb8:	003fdc06 	br	404cd2c <__alt_data_end+0xfffe252c>
 404cdbc:	0005883a 	mov	r2,zero
 404cdc0:	003ff706 	br	404cda0 <__alt_data_end+0xfffe25a0>

0404cdc4 <__fixdfsi>:
 404cdc4:	280cd53a 	srli	r6,r5,20
 404cdc8:	00c00434 	movhi	r3,16
 404cdcc:	18ffffc4 	addi	r3,r3,-1
 404cdd0:	3181ffcc 	andi	r6,r6,2047
 404cdd4:	01c0ff84 	movi	r7,1022
 404cdd8:	28c6703a 	and	r3,r5,r3
 404cddc:	280ad7fa 	srli	r5,r5,31
 404cde0:	3980120e 	bge	r7,r6,404ce2c <__fixdfsi+0x68>
 404cde4:	00810744 	movi	r2,1053
 404cde8:	11800c16 	blt	r2,r6,404ce1c <__fixdfsi+0x58>
 404cdec:	00810cc4 	movi	r2,1075
 404cdf0:	1185c83a 	sub	r2,r2,r6
 404cdf4:	01c007c4 	movi	r7,31
 404cdf8:	18c00434 	orhi	r3,r3,16
 404cdfc:	38800d16 	blt	r7,r2,404ce34 <__fixdfsi+0x70>
 404ce00:	31befb44 	addi	r6,r6,-1043
 404ce04:	2084d83a 	srl	r2,r4,r2
 404ce08:	1986983a 	sll	r3,r3,r6
 404ce0c:	1884b03a 	or	r2,r3,r2
 404ce10:	28000726 	beq	r5,zero,404ce30 <__fixdfsi+0x6c>
 404ce14:	0085c83a 	sub	r2,zero,r2
 404ce18:	f800283a 	ret
 404ce1c:	00a00034 	movhi	r2,32768
 404ce20:	10bfffc4 	addi	r2,r2,-1
 404ce24:	2885883a 	add	r2,r5,r2
 404ce28:	f800283a 	ret
 404ce2c:	0005883a 	mov	r2,zero
 404ce30:	f800283a 	ret
 404ce34:	008104c4 	movi	r2,1043
 404ce38:	1185c83a 	sub	r2,r2,r6
 404ce3c:	1884d83a 	srl	r2,r3,r2
 404ce40:	003ff306 	br	404ce10 <__alt_data_end+0xfffe2610>

0404ce44 <__floatsidf>:
 404ce44:	defffd04 	addi	sp,sp,-12
 404ce48:	dfc00215 	stw	ra,8(sp)
 404ce4c:	dc400115 	stw	r17,4(sp)
 404ce50:	dc000015 	stw	r16,0(sp)
 404ce54:	20002b26 	beq	r4,zero,404cf04 <__floatsidf+0xc0>
 404ce58:	2023883a 	mov	r17,r4
 404ce5c:	2020d7fa 	srli	r16,r4,31
 404ce60:	20002d16 	blt	r4,zero,404cf18 <__floatsidf+0xd4>
 404ce64:	8809883a 	mov	r4,r17
 404ce68:	404cfc80 	call	404cfc8 <__clzsi2>
 404ce6c:	01410784 	movi	r5,1054
 404ce70:	288bc83a 	sub	r5,r5,r2
 404ce74:	01010cc4 	movi	r4,1075
 404ce78:	2149c83a 	sub	r4,r4,r5
 404ce7c:	00c007c4 	movi	r3,31
 404ce80:	1900160e 	bge	r3,r4,404cedc <__floatsidf+0x98>
 404ce84:	00c104c4 	movi	r3,1043
 404ce88:	1947c83a 	sub	r3,r3,r5
 404ce8c:	88c6983a 	sll	r3,r17,r3
 404ce90:	00800434 	movhi	r2,16
 404ce94:	10bfffc4 	addi	r2,r2,-1
 404ce98:	1886703a 	and	r3,r3,r2
 404ce9c:	2941ffcc 	andi	r5,r5,2047
 404cea0:	800d883a 	mov	r6,r16
 404cea4:	0005883a 	mov	r2,zero
 404cea8:	280a953a 	slli	r5,r5,20
 404ceac:	31803fcc 	andi	r6,r6,255
 404ceb0:	01000434 	movhi	r4,16
 404ceb4:	300c97fa 	slli	r6,r6,31
 404ceb8:	213fffc4 	addi	r4,r4,-1
 404cebc:	1906703a 	and	r3,r3,r4
 404cec0:	1946b03a 	or	r3,r3,r5
 404cec4:	1986b03a 	or	r3,r3,r6
 404cec8:	dfc00217 	ldw	ra,8(sp)
 404cecc:	dc400117 	ldw	r17,4(sp)
 404ced0:	dc000017 	ldw	r16,0(sp)
 404ced4:	dec00304 	addi	sp,sp,12
 404ced8:	f800283a 	ret
 404cedc:	00c002c4 	movi	r3,11
 404cee0:	1887c83a 	sub	r3,r3,r2
 404cee4:	88c6d83a 	srl	r3,r17,r3
 404cee8:	8904983a 	sll	r2,r17,r4
 404ceec:	01000434 	movhi	r4,16
 404cef0:	213fffc4 	addi	r4,r4,-1
 404cef4:	2941ffcc 	andi	r5,r5,2047
 404cef8:	1906703a 	and	r3,r3,r4
 404cefc:	800d883a 	mov	r6,r16
 404cf00:	003fe906 	br	404cea8 <__alt_data_end+0xfffe26a8>
 404cf04:	000d883a 	mov	r6,zero
 404cf08:	000b883a 	mov	r5,zero
 404cf0c:	0007883a 	mov	r3,zero
 404cf10:	0005883a 	mov	r2,zero
 404cf14:	003fe406 	br	404cea8 <__alt_data_end+0xfffe26a8>
 404cf18:	0123c83a 	sub	r17,zero,r4
 404cf1c:	003fd106 	br	404ce64 <__alt_data_end+0xfffe2664>

0404cf20 <__floatunsidf>:
 404cf20:	defffe04 	addi	sp,sp,-8
 404cf24:	dc000015 	stw	r16,0(sp)
 404cf28:	dfc00115 	stw	ra,4(sp)
 404cf2c:	2021883a 	mov	r16,r4
 404cf30:	20002226 	beq	r4,zero,404cfbc <__floatunsidf+0x9c>
 404cf34:	404cfc80 	call	404cfc8 <__clzsi2>
 404cf38:	01010784 	movi	r4,1054
 404cf3c:	2089c83a 	sub	r4,r4,r2
 404cf40:	01810cc4 	movi	r6,1075
 404cf44:	310dc83a 	sub	r6,r6,r4
 404cf48:	00c007c4 	movi	r3,31
 404cf4c:	1980120e 	bge	r3,r6,404cf98 <__floatunsidf+0x78>
 404cf50:	00c104c4 	movi	r3,1043
 404cf54:	1907c83a 	sub	r3,r3,r4
 404cf58:	80ca983a 	sll	r5,r16,r3
 404cf5c:	00800434 	movhi	r2,16
 404cf60:	10bfffc4 	addi	r2,r2,-1
 404cf64:	2101ffcc 	andi	r4,r4,2047
 404cf68:	0021883a 	mov	r16,zero
 404cf6c:	288a703a 	and	r5,r5,r2
 404cf70:	2008953a 	slli	r4,r4,20
 404cf74:	00c00434 	movhi	r3,16
 404cf78:	18ffffc4 	addi	r3,r3,-1
 404cf7c:	28c6703a 	and	r3,r5,r3
 404cf80:	8005883a 	mov	r2,r16
 404cf84:	1906b03a 	or	r3,r3,r4
 404cf88:	dfc00117 	ldw	ra,4(sp)
 404cf8c:	dc000017 	ldw	r16,0(sp)
 404cf90:	dec00204 	addi	sp,sp,8
 404cf94:	f800283a 	ret
 404cf98:	00c002c4 	movi	r3,11
 404cf9c:	188bc83a 	sub	r5,r3,r2
 404cfa0:	814ad83a 	srl	r5,r16,r5
 404cfa4:	00c00434 	movhi	r3,16
 404cfa8:	18ffffc4 	addi	r3,r3,-1
 404cfac:	81a0983a 	sll	r16,r16,r6
 404cfb0:	2101ffcc 	andi	r4,r4,2047
 404cfb4:	28ca703a 	and	r5,r5,r3
 404cfb8:	003fed06 	br	404cf70 <__alt_data_end+0xfffe2770>
 404cfbc:	0009883a 	mov	r4,zero
 404cfc0:	000b883a 	mov	r5,zero
 404cfc4:	003fea06 	br	404cf70 <__alt_data_end+0xfffe2770>

0404cfc8 <__clzsi2>:
 404cfc8:	00bfffd4 	movui	r2,65535
 404cfcc:	11000536 	bltu	r2,r4,404cfe4 <__clzsi2+0x1c>
 404cfd0:	00803fc4 	movi	r2,255
 404cfd4:	11000f36 	bltu	r2,r4,404d014 <__clzsi2+0x4c>
 404cfd8:	00800804 	movi	r2,32
 404cfdc:	0007883a 	mov	r3,zero
 404cfe0:	00000506 	br	404cff8 <__clzsi2+0x30>
 404cfe4:	00804034 	movhi	r2,256
 404cfe8:	10bfffc4 	addi	r2,r2,-1
 404cfec:	11000c2e 	bgeu	r2,r4,404d020 <__clzsi2+0x58>
 404cff0:	00800204 	movi	r2,8
 404cff4:	00c00604 	movi	r3,24
 404cff8:	20c8d83a 	srl	r4,r4,r3
 404cffc:	00c10174 	movhi	r3,1029
 404d000:	18c12204 	addi	r3,r3,1160
 404d004:	1909883a 	add	r4,r3,r4
 404d008:	20c00003 	ldbu	r3,0(r4)
 404d00c:	10c5c83a 	sub	r2,r2,r3
 404d010:	f800283a 	ret
 404d014:	00800604 	movi	r2,24
 404d018:	00c00204 	movi	r3,8
 404d01c:	003ff606 	br	404cff8 <__alt_data_end+0xfffe27f8>
 404d020:	00800404 	movi	r2,16
 404d024:	1007883a 	mov	r3,r2
 404d028:	003ff306 	br	404cff8 <__alt_data_end+0xfffe27f8>

0404d02c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 404d02c:	defffe04 	addi	sp,sp,-8
 404d030:	dfc00115 	stw	ra,4(sp)
 404d034:	df000015 	stw	fp,0(sp)
 404d038:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 404d03c:	d0a00b17 	ldw	r2,-32724(gp)
 404d040:	10000326 	beq	r2,zero,404d050 <alt_get_errno+0x24>
 404d044:	d0a00b17 	ldw	r2,-32724(gp)
 404d048:	103ee83a 	callr	r2
 404d04c:	00000106 	br	404d054 <alt_get_errno+0x28>
 404d050:	d0a6fc04 	addi	r2,gp,-25616
}
 404d054:	e037883a 	mov	sp,fp
 404d058:	dfc00117 	ldw	ra,4(sp)
 404d05c:	df000017 	ldw	fp,0(sp)
 404d060:	dec00204 	addi	sp,sp,8
 404d064:	f800283a 	ret

0404d068 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 404d068:	defffb04 	addi	sp,sp,-20
 404d06c:	dfc00415 	stw	ra,16(sp)
 404d070:	df000315 	stw	fp,12(sp)
 404d074:	df000304 	addi	fp,sp,12
 404d078:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 404d07c:	e0bfff17 	ldw	r2,-4(fp)
 404d080:	10000616 	blt	r2,zero,404d09c <close+0x34>
 404d084:	e0bfff17 	ldw	r2,-4(fp)
 404d088:	10c00324 	muli	r3,r2,12
 404d08c:	00810174 	movhi	r2,1029
 404d090:	1083b404 	addi	r2,r2,3792
 404d094:	1885883a 	add	r2,r3,r2
 404d098:	00000106 	br	404d0a0 <close+0x38>
 404d09c:	0005883a 	mov	r2,zero
 404d0a0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 404d0a4:	e0bffd17 	ldw	r2,-12(fp)
 404d0a8:	10001926 	beq	r2,zero,404d110 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 404d0ac:	e0bffd17 	ldw	r2,-12(fp)
 404d0b0:	10800017 	ldw	r2,0(r2)
 404d0b4:	10800417 	ldw	r2,16(r2)
 404d0b8:	10000626 	beq	r2,zero,404d0d4 <close+0x6c>
 404d0bc:	e0bffd17 	ldw	r2,-12(fp)
 404d0c0:	10800017 	ldw	r2,0(r2)
 404d0c4:	10800417 	ldw	r2,16(r2)
 404d0c8:	e13ffd17 	ldw	r4,-12(fp)
 404d0cc:	103ee83a 	callr	r2
 404d0d0:	00000106 	br	404d0d8 <close+0x70>
 404d0d4:	0005883a 	mov	r2,zero
 404d0d8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 404d0dc:	e13fff17 	ldw	r4,-4(fp)
 404d0e0:	404da100 	call	404da10 <alt_release_fd>
    if (rval < 0)
 404d0e4:	e0bffe17 	ldw	r2,-8(fp)
 404d0e8:	1000070e 	bge	r2,zero,404d108 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 404d0ec:	404d02c0 	call	404d02c <alt_get_errno>
 404d0f0:	1007883a 	mov	r3,r2
 404d0f4:	e0bffe17 	ldw	r2,-8(fp)
 404d0f8:	0085c83a 	sub	r2,zero,r2
 404d0fc:	18800015 	stw	r2,0(r3)
      return -1;
 404d100:	00bfffc4 	movi	r2,-1
 404d104:	00000706 	br	404d124 <close+0xbc>
    }
    return 0;
 404d108:	0005883a 	mov	r2,zero
 404d10c:	00000506 	br	404d124 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 404d110:	404d02c0 	call	404d02c <alt_get_errno>
 404d114:	1007883a 	mov	r3,r2
 404d118:	00801444 	movi	r2,81
 404d11c:	18800015 	stw	r2,0(r3)
    return -1;
 404d120:	00bfffc4 	movi	r2,-1
  }
}
 404d124:	e037883a 	mov	sp,fp
 404d128:	dfc00117 	ldw	ra,4(sp)
 404d12c:	df000017 	ldw	fp,0(sp)
 404d130:	dec00204 	addi	sp,sp,8
 404d134:	f800283a 	ret

0404d138 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 404d138:	defffe04 	addi	sp,sp,-8
 404d13c:	df000115 	stw	fp,4(sp)
 404d140:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 404d144:	e03fff15 	stw	zero,-4(fp)
 404d148:	00000506 	br	404d160 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 404d14c:	e0bfff17 	ldw	r2,-4(fp)
 404d150:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 404d154:	e0bfff17 	ldw	r2,-4(fp)
 404d158:	10800804 	addi	r2,r2,32
 404d15c:	e0bfff15 	stw	r2,-4(fp)
 404d160:	e0bfff17 	ldw	r2,-4(fp)
 404d164:	10820030 	cmpltui	r2,r2,2048
 404d168:	103ff81e 	bne	r2,zero,404d14c <__alt_data_end+0xfffe294c>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 404d16c:	0001883a 	nop
 404d170:	e037883a 	mov	sp,fp
 404d174:	df000017 	ldw	fp,0(sp)
 404d178:	dec00104 	addi	sp,sp,4
 404d17c:	f800283a 	ret

0404d180 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 404d180:	defffc04 	addi	sp,sp,-16
 404d184:	df000315 	stw	fp,12(sp)
 404d188:	df000304 	addi	fp,sp,12
 404d18c:	e13ffd15 	stw	r4,-12(fp)
 404d190:	e17ffe15 	stw	r5,-8(fp)
 404d194:	e1bfff15 	stw	r6,-4(fp)
  return len;
 404d198:	e0bfff17 	ldw	r2,-4(fp)
}
 404d19c:	e037883a 	mov	sp,fp
 404d1a0:	df000017 	ldw	fp,0(sp)
 404d1a4:	dec00104 	addi	sp,sp,4
 404d1a8:	f800283a 	ret

0404d1ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 404d1ac:	defffe04 	addi	sp,sp,-8
 404d1b0:	dfc00115 	stw	ra,4(sp)
 404d1b4:	df000015 	stw	fp,0(sp)
 404d1b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 404d1bc:	d0a00b17 	ldw	r2,-32724(gp)
 404d1c0:	10000326 	beq	r2,zero,404d1d0 <alt_get_errno+0x24>
 404d1c4:	d0a00b17 	ldw	r2,-32724(gp)
 404d1c8:	103ee83a 	callr	r2
 404d1cc:	00000106 	br	404d1d4 <alt_get_errno+0x28>
 404d1d0:	d0a6fc04 	addi	r2,gp,-25616
}
 404d1d4:	e037883a 	mov	sp,fp
 404d1d8:	dfc00117 	ldw	ra,4(sp)
 404d1dc:	df000017 	ldw	fp,0(sp)
 404d1e0:	dec00204 	addi	sp,sp,8
 404d1e4:	f800283a 	ret

0404d1e8 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 404d1e8:	defffb04 	addi	sp,sp,-20
 404d1ec:	dfc00415 	stw	ra,16(sp)
 404d1f0:	df000315 	stw	fp,12(sp)
 404d1f4:	df000304 	addi	fp,sp,12
 404d1f8:	e13ffe15 	stw	r4,-8(fp)
 404d1fc:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 404d200:	e0bffe17 	ldw	r2,-8(fp)
 404d204:	10000616 	blt	r2,zero,404d220 <fstat+0x38>
 404d208:	e0bffe17 	ldw	r2,-8(fp)
 404d20c:	10c00324 	muli	r3,r2,12
 404d210:	00810174 	movhi	r2,1029
 404d214:	1083b404 	addi	r2,r2,3792
 404d218:	1885883a 	add	r2,r3,r2
 404d21c:	00000106 	br	404d224 <fstat+0x3c>
 404d220:	0005883a 	mov	r2,zero
 404d224:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 404d228:	e0bffd17 	ldw	r2,-12(fp)
 404d22c:	10001026 	beq	r2,zero,404d270 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 404d230:	e0bffd17 	ldw	r2,-12(fp)
 404d234:	10800017 	ldw	r2,0(r2)
 404d238:	10800817 	ldw	r2,32(r2)
 404d23c:	10000726 	beq	r2,zero,404d25c <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 404d240:	e0bffd17 	ldw	r2,-12(fp)
 404d244:	10800017 	ldw	r2,0(r2)
 404d248:	10800817 	ldw	r2,32(r2)
 404d24c:	e17fff17 	ldw	r5,-4(fp)
 404d250:	e13ffd17 	ldw	r4,-12(fp)
 404d254:	103ee83a 	callr	r2
 404d258:	00000a06 	br	404d284 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 404d25c:	e0bfff17 	ldw	r2,-4(fp)
 404d260:	00c80004 	movi	r3,8192
 404d264:	10c00115 	stw	r3,4(r2)
      return 0;
 404d268:	0005883a 	mov	r2,zero
 404d26c:	00000506 	br	404d284 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 404d270:	404d1ac0 	call	404d1ac <alt_get_errno>
 404d274:	1007883a 	mov	r3,r2
 404d278:	00801444 	movi	r2,81
 404d27c:	18800015 	stw	r2,0(r3)
    return -1;
 404d280:	00bfffc4 	movi	r2,-1
  }
}
 404d284:	e037883a 	mov	sp,fp
 404d288:	dfc00117 	ldw	ra,4(sp)
 404d28c:	df000017 	ldw	fp,0(sp)
 404d290:	dec00204 	addi	sp,sp,8
 404d294:	f800283a 	ret

0404d298 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 404d298:	defff904 	addi	sp,sp,-28
 404d29c:	dfc00615 	stw	ra,24(sp)
 404d2a0:	df000515 	stw	fp,20(sp)
 404d2a4:	df000504 	addi	fp,sp,20
 404d2a8:	e13ffc15 	stw	r4,-16(fp)
 404d2ac:	e17ffd15 	stw	r5,-12(fp)
 404d2b0:	e1bffe15 	stw	r6,-8(fp)
 404d2b4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 404d2b8:	e0800217 	ldw	r2,8(fp)
 404d2bc:	d8800015 	stw	r2,0(sp)
 404d2c0:	e1ffff17 	ldw	r7,-4(fp)
 404d2c4:	e1bffe17 	ldw	r6,-8(fp)
 404d2c8:	e17ffd17 	ldw	r5,-12(fp)
 404d2cc:	e13ffc17 	ldw	r4,-16(fp)
 404d2d0:	404d4480 	call	404d448 <alt_iic_isr_register>
}  
 404d2d4:	e037883a 	mov	sp,fp
 404d2d8:	dfc00117 	ldw	ra,4(sp)
 404d2dc:	df000017 	ldw	fp,0(sp)
 404d2e0:	dec00204 	addi	sp,sp,8
 404d2e4:	f800283a 	ret

0404d2e8 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 404d2e8:	defff904 	addi	sp,sp,-28
 404d2ec:	df000615 	stw	fp,24(sp)
 404d2f0:	df000604 	addi	fp,sp,24
 404d2f4:	e13ffe15 	stw	r4,-8(fp)
 404d2f8:	e17fff15 	stw	r5,-4(fp)
 404d2fc:	e0bfff17 	ldw	r2,-4(fp)
 404d300:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 404d304:	0005303a 	rdctl	r2,status
 404d308:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 404d30c:	e0fffb17 	ldw	r3,-20(fp)
 404d310:	00bfff84 	movi	r2,-2
 404d314:	1884703a 	and	r2,r3,r2
 404d318:	1001703a 	wrctl	status,r2
  
  return context;
 404d31c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 404d320:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 404d324:	00c00044 	movi	r3,1
 404d328:	e0bffa17 	ldw	r2,-24(fp)
 404d32c:	1884983a 	sll	r2,r3,r2
 404d330:	1007883a 	mov	r3,r2
 404d334:	d0a6fd17 	ldw	r2,-25612(gp)
 404d338:	1884b03a 	or	r2,r3,r2
 404d33c:	d0a6fd15 	stw	r2,-25612(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 404d340:	d0a6fd17 	ldw	r2,-25612(gp)
 404d344:	100170fa 	wrctl	ienable,r2
 404d348:	e0bffc17 	ldw	r2,-16(fp)
 404d34c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 404d350:	e0bffd17 	ldw	r2,-12(fp)
 404d354:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 404d358:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 404d35c:	0001883a 	nop
}
 404d360:	e037883a 	mov	sp,fp
 404d364:	df000017 	ldw	fp,0(sp)
 404d368:	dec00104 	addi	sp,sp,4
 404d36c:	f800283a 	ret

0404d370 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 404d370:	defff904 	addi	sp,sp,-28
 404d374:	df000615 	stw	fp,24(sp)
 404d378:	df000604 	addi	fp,sp,24
 404d37c:	e13ffe15 	stw	r4,-8(fp)
 404d380:	e17fff15 	stw	r5,-4(fp)
 404d384:	e0bfff17 	ldw	r2,-4(fp)
 404d388:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 404d38c:	0005303a 	rdctl	r2,status
 404d390:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 404d394:	e0fffb17 	ldw	r3,-20(fp)
 404d398:	00bfff84 	movi	r2,-2
 404d39c:	1884703a 	and	r2,r3,r2
 404d3a0:	1001703a 	wrctl	status,r2
  
  return context;
 404d3a4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 404d3a8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 404d3ac:	00c00044 	movi	r3,1
 404d3b0:	e0bffa17 	ldw	r2,-24(fp)
 404d3b4:	1884983a 	sll	r2,r3,r2
 404d3b8:	0084303a 	nor	r2,zero,r2
 404d3bc:	1007883a 	mov	r3,r2
 404d3c0:	d0a6fd17 	ldw	r2,-25612(gp)
 404d3c4:	1884703a 	and	r2,r3,r2
 404d3c8:	d0a6fd15 	stw	r2,-25612(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 404d3cc:	d0a6fd17 	ldw	r2,-25612(gp)
 404d3d0:	100170fa 	wrctl	ienable,r2
 404d3d4:	e0bffc17 	ldw	r2,-16(fp)
 404d3d8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 404d3dc:	e0bffd17 	ldw	r2,-12(fp)
 404d3e0:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 404d3e4:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 404d3e8:	0001883a 	nop
}
 404d3ec:	e037883a 	mov	sp,fp
 404d3f0:	df000017 	ldw	fp,0(sp)
 404d3f4:	dec00104 	addi	sp,sp,4
 404d3f8:	f800283a 	ret

0404d3fc <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 404d3fc:	defffc04 	addi	sp,sp,-16
 404d400:	df000315 	stw	fp,12(sp)
 404d404:	df000304 	addi	fp,sp,12
 404d408:	e13ffe15 	stw	r4,-8(fp)
 404d40c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 404d410:	000530fa 	rdctl	r2,ienable
 404d414:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 404d418:	00c00044 	movi	r3,1
 404d41c:	e0bfff17 	ldw	r2,-4(fp)
 404d420:	1884983a 	sll	r2,r3,r2
 404d424:	1007883a 	mov	r3,r2
 404d428:	e0bffd17 	ldw	r2,-12(fp)
 404d42c:	1884703a 	and	r2,r3,r2
 404d430:	1004c03a 	cmpne	r2,r2,zero
 404d434:	10803fcc 	andi	r2,r2,255
}
 404d438:	e037883a 	mov	sp,fp
 404d43c:	df000017 	ldw	fp,0(sp)
 404d440:	dec00104 	addi	sp,sp,4
 404d444:	f800283a 	ret

0404d448 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 404d448:	defff504 	addi	sp,sp,-44
 404d44c:	dfc00a15 	stw	ra,40(sp)
 404d450:	df000915 	stw	fp,36(sp)
 404d454:	df000904 	addi	fp,sp,36
 404d458:	e13ffc15 	stw	r4,-16(fp)
 404d45c:	e17ffd15 	stw	r5,-12(fp)
 404d460:	e1bffe15 	stw	r6,-8(fp)
 404d464:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 404d468:	00bffa84 	movi	r2,-22
 404d46c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 404d470:	e0bffd17 	ldw	r2,-12(fp)
 404d474:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 404d478:	e0bff817 	ldw	r2,-32(fp)
 404d47c:	10800808 	cmpgei	r2,r2,32
 404d480:	1000271e 	bne	r2,zero,404d520 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 404d484:	0005303a 	rdctl	r2,status
 404d488:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 404d48c:	e0fffb17 	ldw	r3,-20(fp)
 404d490:	00bfff84 	movi	r2,-2
 404d494:	1884703a 	and	r2,r3,r2
 404d498:	1001703a 	wrctl	status,r2
  
  return context;
 404d49c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 404d4a0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 404d4a4:	00810174 	movhi	r2,1029
 404d4a8:	108f5e04 	addi	r2,r2,15736
 404d4ac:	e0fff817 	ldw	r3,-32(fp)
 404d4b0:	180690fa 	slli	r3,r3,3
 404d4b4:	10c5883a 	add	r2,r2,r3
 404d4b8:	e0fffe17 	ldw	r3,-8(fp)
 404d4bc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 404d4c0:	00810174 	movhi	r2,1029
 404d4c4:	108f5e04 	addi	r2,r2,15736
 404d4c8:	e0fff817 	ldw	r3,-32(fp)
 404d4cc:	180690fa 	slli	r3,r3,3
 404d4d0:	10c5883a 	add	r2,r2,r3
 404d4d4:	10800104 	addi	r2,r2,4
 404d4d8:	e0ffff17 	ldw	r3,-4(fp)
 404d4dc:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 404d4e0:	e0bffe17 	ldw	r2,-8(fp)
 404d4e4:	10000526 	beq	r2,zero,404d4fc <alt_iic_isr_register+0xb4>
 404d4e8:	e0bff817 	ldw	r2,-32(fp)
 404d4ec:	100b883a 	mov	r5,r2
 404d4f0:	e13ffc17 	ldw	r4,-16(fp)
 404d4f4:	404d2e80 	call	404d2e8 <alt_ic_irq_enable>
 404d4f8:	00000406 	br	404d50c <alt_iic_isr_register+0xc4>
 404d4fc:	e0bff817 	ldw	r2,-32(fp)
 404d500:	100b883a 	mov	r5,r2
 404d504:	e13ffc17 	ldw	r4,-16(fp)
 404d508:	404d3700 	call	404d370 <alt_ic_irq_disable>
 404d50c:	e0bff715 	stw	r2,-36(fp)
 404d510:	e0bffa17 	ldw	r2,-24(fp)
 404d514:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 404d518:	e0bff917 	ldw	r2,-28(fp)
 404d51c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 404d520:	e0bff717 	ldw	r2,-36(fp)
}
 404d524:	e037883a 	mov	sp,fp
 404d528:	dfc00117 	ldw	ra,4(sp)
 404d52c:	df000017 	ldw	fp,0(sp)
 404d530:	dec00204 	addi	sp,sp,8
 404d534:	f800283a 	ret

0404d538 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 404d538:	defffe04 	addi	sp,sp,-8
 404d53c:	dfc00115 	stw	ra,4(sp)
 404d540:	df000015 	stw	fp,0(sp)
 404d544:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 404d548:	d0a00b17 	ldw	r2,-32724(gp)
 404d54c:	10000326 	beq	r2,zero,404d55c <alt_get_errno+0x24>
 404d550:	d0a00b17 	ldw	r2,-32724(gp)
 404d554:	103ee83a 	callr	r2
 404d558:	00000106 	br	404d560 <alt_get_errno+0x28>
 404d55c:	d0a6fc04 	addi	r2,gp,-25616
}
 404d560:	e037883a 	mov	sp,fp
 404d564:	dfc00117 	ldw	ra,4(sp)
 404d568:	df000017 	ldw	fp,0(sp)
 404d56c:	dec00204 	addi	sp,sp,8
 404d570:	f800283a 	ret

0404d574 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 404d574:	deffed04 	addi	sp,sp,-76
 404d578:	dfc01215 	stw	ra,72(sp)
 404d57c:	df001115 	stw	fp,68(sp)
 404d580:	df001104 	addi	fp,sp,68
 404d584:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 404d588:	e0bfff17 	ldw	r2,-4(fp)
 404d58c:	10000616 	blt	r2,zero,404d5a8 <isatty+0x34>
 404d590:	e0bfff17 	ldw	r2,-4(fp)
 404d594:	10c00324 	muli	r3,r2,12
 404d598:	00810174 	movhi	r2,1029
 404d59c:	1083b404 	addi	r2,r2,3792
 404d5a0:	1885883a 	add	r2,r3,r2
 404d5a4:	00000106 	br	404d5ac <isatty+0x38>
 404d5a8:	0005883a 	mov	r2,zero
 404d5ac:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 404d5b0:	e0bfef17 	ldw	r2,-68(fp)
 404d5b4:	10000e26 	beq	r2,zero,404d5f0 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 404d5b8:	e0bfef17 	ldw	r2,-68(fp)
 404d5bc:	10800017 	ldw	r2,0(r2)
 404d5c0:	10800817 	ldw	r2,32(r2)
 404d5c4:	1000021e 	bne	r2,zero,404d5d0 <isatty+0x5c>
    {
      return 1;
 404d5c8:	00800044 	movi	r2,1
 404d5cc:	00000d06 	br	404d604 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 404d5d0:	e0bff004 	addi	r2,fp,-64
 404d5d4:	100b883a 	mov	r5,r2
 404d5d8:	e13fff17 	ldw	r4,-4(fp)
 404d5dc:	404d1e80 	call	404d1e8 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 404d5e0:	e0bff117 	ldw	r2,-60(fp)
 404d5e4:	10880020 	cmpeqi	r2,r2,8192
 404d5e8:	10803fcc 	andi	r2,r2,255
 404d5ec:	00000506 	br	404d604 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 404d5f0:	404d5380 	call	404d538 <alt_get_errno>
 404d5f4:	1007883a 	mov	r3,r2
 404d5f8:	00801444 	movi	r2,81
 404d5fc:	18800015 	stw	r2,0(r3)
    return 0;
 404d600:	0005883a 	mov	r2,zero
  }
}
 404d604:	e037883a 	mov	sp,fp
 404d608:	dfc00117 	ldw	ra,4(sp)
 404d60c:	df000017 	ldw	fp,0(sp)
 404d610:	dec00204 	addi	sp,sp,8
 404d614:	f800283a 	ret

0404d618 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 404d618:	defffc04 	addi	sp,sp,-16
 404d61c:	df000315 	stw	fp,12(sp)
 404d620:	df000304 	addi	fp,sp,12
 404d624:	e13ffd15 	stw	r4,-12(fp)
 404d628:	e17ffe15 	stw	r5,-8(fp)
 404d62c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 404d630:	e0fffe17 	ldw	r3,-8(fp)
 404d634:	e0bffd17 	ldw	r2,-12(fp)
 404d638:	18800c26 	beq	r3,r2,404d66c <alt_load_section+0x54>
  {
    while( to != end )
 404d63c:	00000806 	br	404d660 <alt_load_section+0x48>
    {
      *to++ = *from++;
 404d640:	e0bffe17 	ldw	r2,-8(fp)
 404d644:	10c00104 	addi	r3,r2,4
 404d648:	e0fffe15 	stw	r3,-8(fp)
 404d64c:	e0fffd17 	ldw	r3,-12(fp)
 404d650:	19000104 	addi	r4,r3,4
 404d654:	e13ffd15 	stw	r4,-12(fp)
 404d658:	18c00017 	ldw	r3,0(r3)
 404d65c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 404d660:	e0fffe17 	ldw	r3,-8(fp)
 404d664:	e0bfff17 	ldw	r2,-4(fp)
 404d668:	18bff51e 	bne	r3,r2,404d640 <__alt_data_end+0xfffe2e40>
    {
      *to++ = *from++;
    }
  }
}
 404d66c:	0001883a 	nop
 404d670:	e037883a 	mov	sp,fp
 404d674:	df000017 	ldw	fp,0(sp)
 404d678:	dec00104 	addi	sp,sp,4
 404d67c:	f800283a 	ret

0404d680 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 404d680:	defffe04 	addi	sp,sp,-8
 404d684:	dfc00115 	stw	ra,4(sp)
 404d688:	df000015 	stw	fp,0(sp)
 404d68c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 404d690:	01810174 	movhi	r6,1029
 404d694:	31886204 	addi	r6,r6,8584
 404d698:	01410174 	movhi	r5,1029
 404d69c:	29418104 	addi	r5,r5,1540
 404d6a0:	01010174 	movhi	r4,1029
 404d6a4:	21086204 	addi	r4,r4,8584
 404d6a8:	404d6180 	call	404d618 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 404d6ac:	01810134 	movhi	r6,1028
 404d6b0:	31809104 	addi	r6,r6,580
 404d6b4:	01410134 	movhi	r5,1028
 404d6b8:	29400804 	addi	r5,r5,32
 404d6bc:	01010134 	movhi	r4,1028
 404d6c0:	21000804 	addi	r4,r4,32
 404d6c4:	404d6180 	call	404d618 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 404d6c8:	01810174 	movhi	r6,1029
 404d6cc:	31818104 	addi	r6,r6,1540
 404d6d0:	01410174 	movhi	r5,1029
 404d6d4:	29407b04 	addi	r5,r5,492
 404d6d8:	01010174 	movhi	r4,1029
 404d6dc:	21007b04 	addi	r4,r4,492
 404d6e0:	404d6180 	call	404d618 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 404d6e4:	404d1380 	call	404d138 <alt_dcache_flush_all>
  alt_icache_flush_all();
 404d6e8:	404f5f00 	call	404f5f0 <alt_icache_flush_all>
}
 404d6ec:	0001883a 	nop
 404d6f0:	e037883a 	mov	sp,fp
 404d6f4:	dfc00117 	ldw	ra,4(sp)
 404d6f8:	df000017 	ldw	fp,0(sp)
 404d6fc:	dec00204 	addi	sp,sp,8
 404d700:	f800283a 	ret

0404d704 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 404d704:	defffe04 	addi	sp,sp,-8
 404d708:	dfc00115 	stw	ra,4(sp)
 404d70c:	df000015 	stw	fp,0(sp)
 404d710:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 404d714:	d0a00b17 	ldw	r2,-32724(gp)
 404d718:	10000326 	beq	r2,zero,404d728 <alt_get_errno+0x24>
 404d71c:	d0a00b17 	ldw	r2,-32724(gp)
 404d720:	103ee83a 	callr	r2
 404d724:	00000106 	br	404d72c <alt_get_errno+0x28>
 404d728:	d0a6fc04 	addi	r2,gp,-25616
}
 404d72c:	e037883a 	mov	sp,fp
 404d730:	dfc00117 	ldw	ra,4(sp)
 404d734:	df000017 	ldw	fp,0(sp)
 404d738:	dec00204 	addi	sp,sp,8
 404d73c:	f800283a 	ret

0404d740 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 404d740:	defff904 	addi	sp,sp,-28
 404d744:	dfc00615 	stw	ra,24(sp)
 404d748:	df000515 	stw	fp,20(sp)
 404d74c:	df000504 	addi	fp,sp,20
 404d750:	e13ffd15 	stw	r4,-12(fp)
 404d754:	e17ffe15 	stw	r5,-8(fp)
 404d758:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 404d75c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 404d760:	e0bffd17 	ldw	r2,-12(fp)
 404d764:	10000616 	blt	r2,zero,404d780 <lseek+0x40>
 404d768:	e0bffd17 	ldw	r2,-12(fp)
 404d76c:	10c00324 	muli	r3,r2,12
 404d770:	00810174 	movhi	r2,1029
 404d774:	1083b404 	addi	r2,r2,3792
 404d778:	1885883a 	add	r2,r3,r2
 404d77c:	00000106 	br	404d784 <lseek+0x44>
 404d780:	0005883a 	mov	r2,zero
 404d784:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 404d788:	e0bffc17 	ldw	r2,-16(fp)
 404d78c:	10001026 	beq	r2,zero,404d7d0 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 404d790:	e0bffc17 	ldw	r2,-16(fp)
 404d794:	10800017 	ldw	r2,0(r2)
 404d798:	10800717 	ldw	r2,28(r2)
 404d79c:	10000926 	beq	r2,zero,404d7c4 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 404d7a0:	e0bffc17 	ldw	r2,-16(fp)
 404d7a4:	10800017 	ldw	r2,0(r2)
 404d7a8:	10800717 	ldw	r2,28(r2)
 404d7ac:	e1bfff17 	ldw	r6,-4(fp)
 404d7b0:	e17ffe17 	ldw	r5,-8(fp)
 404d7b4:	e13ffc17 	ldw	r4,-16(fp)
 404d7b8:	103ee83a 	callr	r2
 404d7bc:	e0bffb15 	stw	r2,-20(fp)
 404d7c0:	00000506 	br	404d7d8 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 404d7c4:	00bfde84 	movi	r2,-134
 404d7c8:	e0bffb15 	stw	r2,-20(fp)
 404d7cc:	00000206 	br	404d7d8 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 404d7d0:	00bfebc4 	movi	r2,-81
 404d7d4:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 404d7d8:	e0bffb17 	ldw	r2,-20(fp)
 404d7dc:	1000070e 	bge	r2,zero,404d7fc <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 404d7e0:	404d7040 	call	404d704 <alt_get_errno>
 404d7e4:	1007883a 	mov	r3,r2
 404d7e8:	e0bffb17 	ldw	r2,-20(fp)
 404d7ec:	0085c83a 	sub	r2,zero,r2
 404d7f0:	18800015 	stw	r2,0(r3)
    rc = -1;
 404d7f4:	00bfffc4 	movi	r2,-1
 404d7f8:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 404d7fc:	e0bffb17 	ldw	r2,-20(fp)
}
 404d800:	e037883a 	mov	sp,fp
 404d804:	dfc00117 	ldw	ra,4(sp)
 404d808:	df000017 	ldw	fp,0(sp)
 404d80c:	dec00204 	addi	sp,sp,8
 404d810:	f800283a 	ret

0404d814 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 404d814:	defffd04 	addi	sp,sp,-12
 404d818:	dfc00215 	stw	ra,8(sp)
 404d81c:	df000115 	stw	fp,4(sp)
 404d820:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 404d824:	0009883a 	mov	r4,zero
 404d828:	404dcbc0 	call	404dcbc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 404d82c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 404d830:	404dcf40 	call	404dcf4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 404d834:	01810174 	movhi	r6,1029
 404d838:	31816504 	addi	r6,r6,1428
 404d83c:	01410174 	movhi	r5,1029
 404d840:	29416504 	addi	r5,r5,1428
 404d844:	01010174 	movhi	r4,1029
 404d848:	21016504 	addi	r4,r4,1428
 404d84c:	404f7840 	call	404f784 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 404d850:	404f4a00 	call	404f4a0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 404d854:	01010174 	movhi	r4,1029
 404d858:	213d4004 	addi	r4,r4,-2816
 404d85c:	404fe580 	call	404fe58 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 404d860:	d0a6fe17 	ldw	r2,-25608(gp)
 404d864:	d0e6ff17 	ldw	r3,-25604(gp)
 404d868:	d1270017 	ldw	r4,-25600(gp)
 404d86c:	200d883a 	mov	r6,r4
 404d870:	180b883a 	mov	r5,r3
 404d874:	1009883a 	mov	r4,r2
 404d878:	40406d00 	call	40406d0 <main>
 404d87c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 404d880:	01000044 	movi	r4,1
 404d884:	404d0680 	call	404d068 <close>
  exit (result);
 404d888:	e13fff17 	ldw	r4,-4(fp)
 404d88c:	404fe6c0 	call	404fe6c <exit>

0404d890 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 404d890:	defffe04 	addi	sp,sp,-8
 404d894:	df000115 	stw	fp,4(sp)
 404d898:	df000104 	addi	fp,sp,4
 404d89c:	e13fff15 	stw	r4,-4(fp)
}
 404d8a0:	0001883a 	nop
 404d8a4:	e037883a 	mov	sp,fp
 404d8a8:	df000017 	ldw	fp,0(sp)
 404d8ac:	dec00104 	addi	sp,sp,4
 404d8b0:	f800283a 	ret

0404d8b4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 404d8b4:	defffe04 	addi	sp,sp,-8
 404d8b8:	df000115 	stw	fp,4(sp)
 404d8bc:	df000104 	addi	fp,sp,4
 404d8c0:	e13fff15 	stw	r4,-4(fp)
}
 404d8c4:	0001883a 	nop
 404d8c8:	e037883a 	mov	sp,fp
 404d8cc:	df000017 	ldw	fp,0(sp)
 404d8d0:	dec00104 	addi	sp,sp,4
 404d8d4:	f800283a 	ret

0404d8d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 404d8d8:	defffe04 	addi	sp,sp,-8
 404d8dc:	dfc00115 	stw	ra,4(sp)
 404d8e0:	df000015 	stw	fp,0(sp)
 404d8e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 404d8e8:	d0a00b17 	ldw	r2,-32724(gp)
 404d8ec:	10000326 	beq	r2,zero,404d8fc <alt_get_errno+0x24>
 404d8f0:	d0a00b17 	ldw	r2,-32724(gp)
 404d8f4:	103ee83a 	callr	r2
 404d8f8:	00000106 	br	404d900 <alt_get_errno+0x28>
 404d8fc:	d0a6fc04 	addi	r2,gp,-25616
}
 404d900:	e037883a 	mov	sp,fp
 404d904:	dfc00117 	ldw	ra,4(sp)
 404d908:	df000017 	ldw	fp,0(sp)
 404d90c:	dec00204 	addi	sp,sp,8
 404d910:	f800283a 	ret

0404d914 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 404d914:	defff904 	addi	sp,sp,-28
 404d918:	dfc00615 	stw	ra,24(sp)
 404d91c:	df000515 	stw	fp,20(sp)
 404d920:	df000504 	addi	fp,sp,20
 404d924:	e13ffd15 	stw	r4,-12(fp)
 404d928:	e17ffe15 	stw	r5,-8(fp)
 404d92c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 404d930:	e0bffd17 	ldw	r2,-12(fp)
 404d934:	10000616 	blt	r2,zero,404d950 <read+0x3c>
 404d938:	e0bffd17 	ldw	r2,-12(fp)
 404d93c:	10c00324 	muli	r3,r2,12
 404d940:	00810174 	movhi	r2,1029
 404d944:	1083b404 	addi	r2,r2,3792
 404d948:	1885883a 	add	r2,r3,r2
 404d94c:	00000106 	br	404d954 <read+0x40>
 404d950:	0005883a 	mov	r2,zero
 404d954:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 404d958:	e0bffb17 	ldw	r2,-20(fp)
 404d95c:	10002226 	beq	r2,zero,404d9e8 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 404d960:	e0bffb17 	ldw	r2,-20(fp)
 404d964:	10800217 	ldw	r2,8(r2)
 404d968:	108000cc 	andi	r2,r2,3
 404d96c:	10800060 	cmpeqi	r2,r2,1
 404d970:	1000181e 	bne	r2,zero,404d9d4 <read+0xc0>
        (fd->dev->read))
 404d974:	e0bffb17 	ldw	r2,-20(fp)
 404d978:	10800017 	ldw	r2,0(r2)
 404d97c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 404d980:	10001426 	beq	r2,zero,404d9d4 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 404d984:	e0bffb17 	ldw	r2,-20(fp)
 404d988:	10800017 	ldw	r2,0(r2)
 404d98c:	10800517 	ldw	r2,20(r2)
 404d990:	e0ffff17 	ldw	r3,-4(fp)
 404d994:	180d883a 	mov	r6,r3
 404d998:	e17ffe17 	ldw	r5,-8(fp)
 404d99c:	e13ffb17 	ldw	r4,-20(fp)
 404d9a0:	103ee83a 	callr	r2
 404d9a4:	e0bffc15 	stw	r2,-16(fp)
 404d9a8:	e0bffc17 	ldw	r2,-16(fp)
 404d9ac:	1000070e 	bge	r2,zero,404d9cc <read+0xb8>
        {
          ALT_ERRNO = -rval;
 404d9b0:	404d8d80 	call	404d8d8 <alt_get_errno>
 404d9b4:	1007883a 	mov	r3,r2
 404d9b8:	e0bffc17 	ldw	r2,-16(fp)
 404d9bc:	0085c83a 	sub	r2,zero,r2
 404d9c0:	18800015 	stw	r2,0(r3)
          return -1;
 404d9c4:	00bfffc4 	movi	r2,-1
 404d9c8:	00000c06 	br	404d9fc <read+0xe8>
        }
        return rval;
 404d9cc:	e0bffc17 	ldw	r2,-16(fp)
 404d9d0:	00000a06 	br	404d9fc <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 404d9d4:	404d8d80 	call	404d8d8 <alt_get_errno>
 404d9d8:	1007883a 	mov	r3,r2
 404d9dc:	00800344 	movi	r2,13
 404d9e0:	18800015 	stw	r2,0(r3)
 404d9e4:	00000406 	br	404d9f8 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 404d9e8:	404d8d80 	call	404d8d8 <alt_get_errno>
 404d9ec:	1007883a 	mov	r3,r2
 404d9f0:	00801444 	movi	r2,81
 404d9f4:	18800015 	stw	r2,0(r3)
  }
  return -1;
 404d9f8:	00bfffc4 	movi	r2,-1
}
 404d9fc:	e037883a 	mov	sp,fp
 404da00:	dfc00117 	ldw	ra,4(sp)
 404da04:	df000017 	ldw	fp,0(sp)
 404da08:	dec00204 	addi	sp,sp,8
 404da0c:	f800283a 	ret

0404da10 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 404da10:	defffe04 	addi	sp,sp,-8
 404da14:	df000115 	stw	fp,4(sp)
 404da18:	df000104 	addi	fp,sp,4
 404da1c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 404da20:	e0bfff17 	ldw	r2,-4(fp)
 404da24:	108000d0 	cmplti	r2,r2,3
 404da28:	10000d1e 	bne	r2,zero,404da60 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 404da2c:	00810174 	movhi	r2,1029
 404da30:	1083b404 	addi	r2,r2,3792
 404da34:	e0ffff17 	ldw	r3,-4(fp)
 404da38:	18c00324 	muli	r3,r3,12
 404da3c:	10c5883a 	add	r2,r2,r3
 404da40:	10800204 	addi	r2,r2,8
 404da44:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 404da48:	00810174 	movhi	r2,1029
 404da4c:	1083b404 	addi	r2,r2,3792
 404da50:	e0ffff17 	ldw	r3,-4(fp)
 404da54:	18c00324 	muli	r3,r3,12
 404da58:	10c5883a 	add	r2,r2,r3
 404da5c:	10000015 	stw	zero,0(r2)
  }
}
 404da60:	0001883a 	nop
 404da64:	e037883a 	mov	sp,fp
 404da68:	df000017 	ldw	fp,0(sp)
 404da6c:	dec00104 	addi	sp,sp,4
 404da70:	f800283a 	ret

0404da74 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 404da74:	defff904 	addi	sp,sp,-28
 404da78:	df000615 	stw	fp,24(sp)
 404da7c:	df000604 	addi	fp,sp,24
 404da80:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 404da84:	0005303a 	rdctl	r2,status
 404da88:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 404da8c:	e0fffe17 	ldw	r3,-8(fp)
 404da90:	00bfff84 	movi	r2,-2
 404da94:	1884703a 	and	r2,r3,r2
 404da98:	1001703a 	wrctl	status,r2
  
  return context;
 404da9c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 404daa0:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 404daa4:	d0a00d17 	ldw	r2,-32716(gp)
 404daa8:	10c000c4 	addi	r3,r2,3
 404daac:	00bfff04 	movi	r2,-4
 404dab0:	1884703a 	and	r2,r3,r2
 404dab4:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 404dab8:	d0e00d17 	ldw	r3,-32716(gp)
 404dabc:	e0bfff17 	ldw	r2,-4(fp)
 404dac0:	1887883a 	add	r3,r3,r2
 404dac4:	008101f4 	movhi	r2,1031
 404dac8:	10aa0004 	addi	r2,r2,-22528
 404dacc:	10c0062e 	bgeu	r2,r3,404dae8 <sbrk+0x74>
 404dad0:	e0bffb17 	ldw	r2,-20(fp)
 404dad4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 404dad8:	e0bffa17 	ldw	r2,-24(fp)
 404dadc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 404dae0:	00bfffc4 	movi	r2,-1
 404dae4:	00000b06 	br	404db14 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 404dae8:	d0a00d17 	ldw	r2,-32716(gp)
 404daec:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 404daf0:	d0e00d17 	ldw	r3,-32716(gp)
 404daf4:	e0bfff17 	ldw	r2,-4(fp)
 404daf8:	1885883a 	add	r2,r3,r2
 404dafc:	d0a00d15 	stw	r2,-32716(gp)
 404db00:	e0bffb17 	ldw	r2,-20(fp)
 404db04:	e0bffc15 	stw	r2,-16(fp)
 404db08:	e0bffc17 	ldw	r2,-16(fp)
 404db0c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 404db10:	e0bffd17 	ldw	r2,-12(fp)
} 
 404db14:	e037883a 	mov	sp,fp
 404db18:	df000017 	ldw	fp,0(sp)
 404db1c:	dec00104 	addi	sp,sp,4
 404db20:	f800283a 	ret

0404db24 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 404db24:	defffd04 	addi	sp,sp,-12
 404db28:	dfc00215 	stw	ra,8(sp)
 404db2c:	df000115 	stw	fp,4(sp)
 404db30:	df000104 	addi	fp,sp,4
 404db34:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 404db38:	e13fff17 	ldw	r4,-4(fp)
 404db3c:	404f2680 	call	404f268 <alt_busy_sleep>
}
 404db40:	e037883a 	mov	sp,fp
 404db44:	dfc00117 	ldw	ra,4(sp)
 404db48:	df000017 	ldw	fp,0(sp)
 404db4c:	dec00204 	addi	sp,sp,8
 404db50:	f800283a 	ret

0404db54 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 404db54:	defffe04 	addi	sp,sp,-8
 404db58:	dfc00115 	stw	ra,4(sp)
 404db5c:	df000015 	stw	fp,0(sp)
 404db60:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 404db64:	d0a00b17 	ldw	r2,-32724(gp)
 404db68:	10000326 	beq	r2,zero,404db78 <alt_get_errno+0x24>
 404db6c:	d0a00b17 	ldw	r2,-32724(gp)
 404db70:	103ee83a 	callr	r2
 404db74:	00000106 	br	404db7c <alt_get_errno+0x28>
 404db78:	d0a6fc04 	addi	r2,gp,-25616
}
 404db7c:	e037883a 	mov	sp,fp
 404db80:	dfc00117 	ldw	ra,4(sp)
 404db84:	df000017 	ldw	fp,0(sp)
 404db88:	dec00204 	addi	sp,sp,8
 404db8c:	f800283a 	ret

0404db90 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 404db90:	defff904 	addi	sp,sp,-28
 404db94:	dfc00615 	stw	ra,24(sp)
 404db98:	df000515 	stw	fp,20(sp)
 404db9c:	df000504 	addi	fp,sp,20
 404dba0:	e13ffd15 	stw	r4,-12(fp)
 404dba4:	e17ffe15 	stw	r5,-8(fp)
 404dba8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 404dbac:	e0bffd17 	ldw	r2,-12(fp)
 404dbb0:	10000616 	blt	r2,zero,404dbcc <write+0x3c>
 404dbb4:	e0bffd17 	ldw	r2,-12(fp)
 404dbb8:	10c00324 	muli	r3,r2,12
 404dbbc:	00810174 	movhi	r2,1029
 404dbc0:	1083b404 	addi	r2,r2,3792
 404dbc4:	1885883a 	add	r2,r3,r2
 404dbc8:	00000106 	br	404dbd0 <write+0x40>
 404dbcc:	0005883a 	mov	r2,zero
 404dbd0:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 404dbd4:	e0bffb17 	ldw	r2,-20(fp)
 404dbd8:	10002126 	beq	r2,zero,404dc60 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 404dbdc:	e0bffb17 	ldw	r2,-20(fp)
 404dbe0:	10800217 	ldw	r2,8(r2)
 404dbe4:	108000cc 	andi	r2,r2,3
 404dbe8:	10001826 	beq	r2,zero,404dc4c <write+0xbc>
 404dbec:	e0bffb17 	ldw	r2,-20(fp)
 404dbf0:	10800017 	ldw	r2,0(r2)
 404dbf4:	10800617 	ldw	r2,24(r2)
 404dbf8:	10001426 	beq	r2,zero,404dc4c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 404dbfc:	e0bffb17 	ldw	r2,-20(fp)
 404dc00:	10800017 	ldw	r2,0(r2)
 404dc04:	10800617 	ldw	r2,24(r2)
 404dc08:	e0ffff17 	ldw	r3,-4(fp)
 404dc0c:	180d883a 	mov	r6,r3
 404dc10:	e17ffe17 	ldw	r5,-8(fp)
 404dc14:	e13ffb17 	ldw	r4,-20(fp)
 404dc18:	103ee83a 	callr	r2
 404dc1c:	e0bffc15 	stw	r2,-16(fp)
 404dc20:	e0bffc17 	ldw	r2,-16(fp)
 404dc24:	1000070e 	bge	r2,zero,404dc44 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 404dc28:	404db540 	call	404db54 <alt_get_errno>
 404dc2c:	1007883a 	mov	r3,r2
 404dc30:	e0bffc17 	ldw	r2,-16(fp)
 404dc34:	0085c83a 	sub	r2,zero,r2
 404dc38:	18800015 	stw	r2,0(r3)
        return -1;
 404dc3c:	00bfffc4 	movi	r2,-1
 404dc40:	00000c06 	br	404dc74 <write+0xe4>
      }
      return rval;
 404dc44:	e0bffc17 	ldw	r2,-16(fp)
 404dc48:	00000a06 	br	404dc74 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 404dc4c:	404db540 	call	404db54 <alt_get_errno>
 404dc50:	1007883a 	mov	r3,r2
 404dc54:	00800344 	movi	r2,13
 404dc58:	18800015 	stw	r2,0(r3)
 404dc5c:	00000406 	br	404dc70 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 404dc60:	404db540 	call	404db54 <alt_get_errno>
 404dc64:	1007883a 	mov	r3,r2
 404dc68:	00801444 	movi	r2,81
 404dc6c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 404dc70:	00bfffc4 	movi	r2,-1
}
 404dc74:	e037883a 	mov	sp,fp
 404dc78:	dfc00117 	ldw	ra,4(sp)
 404dc7c:	df000017 	ldw	fp,0(sp)
 404dc80:	dec00204 	addi	sp,sp,8
 404dc84:	f800283a 	ret

0404dc88 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 404dc88:	defffd04 	addi	sp,sp,-12
 404dc8c:	dfc00215 	stw	ra,8(sp)
 404dc90:	df000115 	stw	fp,4(sp)
 404dc94:	df000104 	addi	fp,sp,4
 404dc98:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 404dc9c:	d1600804 	addi	r5,gp,-32736
 404dca0:	e13fff17 	ldw	r4,-4(fp)
 404dca4:	404f3fc0 	call	404f3fc <alt_dev_llist_insert>
}
 404dca8:	e037883a 	mov	sp,fp
 404dcac:	dfc00117 	ldw	ra,4(sp)
 404dcb0:	df000017 	ldw	fp,0(sp)
 404dcb4:	dec00204 	addi	sp,sp,8
 404dcb8:	f800283a 	ret

0404dcbc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 404dcbc:	defffd04 	addi	sp,sp,-12
 404dcc0:	dfc00215 	stw	ra,8(sp)
 404dcc4:	df000115 	stw	fp,4(sp)
 404dcc8:	df000104 	addi	fp,sp,4
 404dccc:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( SYSSIGPROC_NIOS_II, SysSigProc_NIOS_II);
 404dcd0:	404fbf80 	call	404fbf8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 404dcd4:	00800044 	movi	r2,1
 404dcd8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 404dcdc:	0001883a 	nop
 404dce0:	e037883a 	mov	sp,fp
 404dce4:	dfc00117 	ldw	ra,4(sp)
 404dce8:	df000017 	ldw	fp,0(sp)
 404dcec:	dec00204 	addi	sp,sp,8
 404dcf0:	f800283a 	ret

0404dcf4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 404dcf4:	defffe04 	addi	sp,sp,-8
 404dcf8:	dfc00115 	stw	ra,4(sp)
 404dcfc:	df000015 	stw	fp,0(sp)
 404dd00:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( SYSSIGPROC_JTAG_UART, SysSigProc_JTAG_UART);
 404dd04:	018000c4 	movi	r6,3
 404dd08:	000b883a 	mov	r5,zero
 404dd0c:	01010174 	movhi	r4,1029
 404dd10:	21041e04 	addi	r4,r4,4216
 404dd14:	404ded80 	call	404ded8 <altera_avalon_jtag_uart_init>
 404dd18:	01010174 	movhi	r4,1029
 404dd1c:	21041404 	addi	r4,r4,4176
 404dd20:	404dc880 	call	404dc88 <alt_dev_reg>
    ALTERA_AVALON_MAILBOX_SIMPLE_INIT ( MAILBOX_AUDIOTOSIGPROC, Mailbox_AudioToSigProc);
 404dd24:	000d883a 	mov	r6,zero
 404dd28:	000b883a 	mov	r5,zero
 404dd2c:	01010174 	movhi	r4,1029
 404dd30:	21082c04 	addi	r4,r4,8368
 404dd34:	404eac40 	call	404eac4 <altera_avalon_mailbox_simple_init>
    ALTERA_AVALON_MAILBOX_SIMPLE_INIT ( MAILBOX_SIGPROCTOAUDIO, Mailbox_SigProcToAudio);
 404dd38:	01bfffc4 	movi	r6,-1
 404dd3c:	000b883a 	mov	r5,zero
 404dd40:	01010174 	movhi	r4,1029
 404dd44:	21083e04 	addi	r4,r4,8440
 404dd48:	404eac40 	call	404eac4 <altera_avalon_mailbox_simple_init>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( SYSSIGPROC_PERFORMANCE_COUNTER, SysSigProc_Performance_Counter);
 404dd4c:	00c00044 	movi	r3,1
 404dd50:	00810234 	movhi	r2,1032
 404dd54:	10840004 	addi	r2,r2,4096
 404dd58:	10c00035 	stwio	r3,0(r2)
}
 404dd5c:	0001883a 	nop
 404dd60:	e037883a 	mov	sp,fp
 404dd64:	dfc00117 	ldw	ra,4(sp)
 404dd68:	df000017 	ldw	fp,0(sp)
 404dd6c:	dec00204 	addi	sp,sp,8
 404dd70:	f800283a 	ret

0404dd74 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 404dd74:	defffa04 	addi	sp,sp,-24
 404dd78:	dfc00515 	stw	ra,20(sp)
 404dd7c:	df000415 	stw	fp,16(sp)
 404dd80:	df000404 	addi	fp,sp,16
 404dd84:	e13ffd15 	stw	r4,-12(fp)
 404dd88:	e17ffe15 	stw	r5,-8(fp)
 404dd8c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 404dd90:	e0bffd17 	ldw	r2,-12(fp)
 404dd94:	10800017 	ldw	r2,0(r2)
 404dd98:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 404dd9c:	e0bffc17 	ldw	r2,-16(fp)
 404dda0:	10c00a04 	addi	r3,r2,40
 404dda4:	e0bffd17 	ldw	r2,-12(fp)
 404dda8:	10800217 	ldw	r2,8(r2)
 404ddac:	100f883a 	mov	r7,r2
 404ddb0:	e1bfff17 	ldw	r6,-4(fp)
 404ddb4:	e17ffe17 	ldw	r5,-8(fp)
 404ddb8:	1809883a 	mov	r4,r3
 404ddbc:	404e39c0 	call	404e39c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 404ddc0:	e037883a 	mov	sp,fp
 404ddc4:	dfc00117 	ldw	ra,4(sp)
 404ddc8:	df000017 	ldw	fp,0(sp)
 404ddcc:	dec00204 	addi	sp,sp,8
 404ddd0:	f800283a 	ret

0404ddd4 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 404ddd4:	defffa04 	addi	sp,sp,-24
 404ddd8:	dfc00515 	stw	ra,20(sp)
 404dddc:	df000415 	stw	fp,16(sp)
 404dde0:	df000404 	addi	fp,sp,16
 404dde4:	e13ffd15 	stw	r4,-12(fp)
 404dde8:	e17ffe15 	stw	r5,-8(fp)
 404ddec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 404ddf0:	e0bffd17 	ldw	r2,-12(fp)
 404ddf4:	10800017 	ldw	r2,0(r2)
 404ddf8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 404ddfc:	e0bffc17 	ldw	r2,-16(fp)
 404de00:	10c00a04 	addi	r3,r2,40
 404de04:	e0bffd17 	ldw	r2,-12(fp)
 404de08:	10800217 	ldw	r2,8(r2)
 404de0c:	100f883a 	mov	r7,r2
 404de10:	e1bfff17 	ldw	r6,-4(fp)
 404de14:	e17ffe17 	ldw	r5,-8(fp)
 404de18:	1809883a 	mov	r4,r3
 404de1c:	404e5b80 	call	404e5b8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 404de20:	e037883a 	mov	sp,fp
 404de24:	dfc00117 	ldw	ra,4(sp)
 404de28:	df000017 	ldw	fp,0(sp)
 404de2c:	dec00204 	addi	sp,sp,8
 404de30:	f800283a 	ret

0404de34 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 404de34:	defffc04 	addi	sp,sp,-16
 404de38:	dfc00315 	stw	ra,12(sp)
 404de3c:	df000215 	stw	fp,8(sp)
 404de40:	df000204 	addi	fp,sp,8
 404de44:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 404de48:	e0bfff17 	ldw	r2,-4(fp)
 404de4c:	10800017 	ldw	r2,0(r2)
 404de50:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 404de54:	e0bffe17 	ldw	r2,-8(fp)
 404de58:	10c00a04 	addi	r3,r2,40
 404de5c:	e0bfff17 	ldw	r2,-4(fp)
 404de60:	10800217 	ldw	r2,8(r2)
 404de64:	100b883a 	mov	r5,r2
 404de68:	1809883a 	mov	r4,r3
 404de6c:	404e2440 	call	404e244 <altera_avalon_jtag_uart_close>
}
 404de70:	e037883a 	mov	sp,fp
 404de74:	dfc00117 	ldw	ra,4(sp)
 404de78:	df000017 	ldw	fp,0(sp)
 404de7c:	dec00204 	addi	sp,sp,8
 404de80:	f800283a 	ret

0404de84 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 404de84:	defffa04 	addi	sp,sp,-24
 404de88:	dfc00515 	stw	ra,20(sp)
 404de8c:	df000415 	stw	fp,16(sp)
 404de90:	df000404 	addi	fp,sp,16
 404de94:	e13ffd15 	stw	r4,-12(fp)
 404de98:	e17ffe15 	stw	r5,-8(fp)
 404de9c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 404dea0:	e0bffd17 	ldw	r2,-12(fp)
 404dea4:	10800017 	ldw	r2,0(r2)
 404dea8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 404deac:	e0bffc17 	ldw	r2,-16(fp)
 404deb0:	10800a04 	addi	r2,r2,40
 404deb4:	e1bfff17 	ldw	r6,-4(fp)
 404deb8:	e17ffe17 	ldw	r5,-8(fp)
 404debc:	1009883a 	mov	r4,r2
 404dec0:	404e2ac0 	call	404e2ac <altera_avalon_jtag_uart_ioctl>
}
 404dec4:	e037883a 	mov	sp,fp
 404dec8:	dfc00117 	ldw	ra,4(sp)
 404decc:	df000017 	ldw	fp,0(sp)
 404ded0:	dec00204 	addi	sp,sp,8
 404ded4:	f800283a 	ret

0404ded8 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 404ded8:	defffa04 	addi	sp,sp,-24
 404dedc:	dfc00515 	stw	ra,20(sp)
 404dee0:	df000415 	stw	fp,16(sp)
 404dee4:	df000404 	addi	fp,sp,16
 404dee8:	e13ffd15 	stw	r4,-12(fp)
 404deec:	e17ffe15 	stw	r5,-8(fp)
 404def0:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 404def4:	e0bffd17 	ldw	r2,-12(fp)
 404def8:	00c00044 	movi	r3,1
 404defc:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 404df00:	e0bffd17 	ldw	r2,-12(fp)
 404df04:	10800017 	ldw	r2,0(r2)
 404df08:	10800104 	addi	r2,r2,4
 404df0c:	1007883a 	mov	r3,r2
 404df10:	e0bffd17 	ldw	r2,-12(fp)
 404df14:	10800817 	ldw	r2,32(r2)
 404df18:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 404df1c:	e0bffe17 	ldw	r2,-8(fp)
 404df20:	e0ffff17 	ldw	r3,-4(fp)
 404df24:	d8000015 	stw	zero,0(sp)
 404df28:	e1fffd17 	ldw	r7,-12(fp)
 404df2c:	01810174 	movhi	r6,1029
 404df30:	31b7e604 	addi	r6,r6,-8296
 404df34:	180b883a 	mov	r5,r3
 404df38:	1009883a 	mov	r4,r2
 404df3c:	404d2980 	call	404d298 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 404df40:	e0bffd17 	ldw	r2,-12(fp)
 404df44:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 404df48:	e0bffd17 	ldw	r2,-12(fp)
 404df4c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 404df50:	d0e70217 	ldw	r3,-25592(gp)
 404df54:	e1fffd17 	ldw	r7,-12(fp)
 404df58:	01810174 	movhi	r6,1029
 404df5c:	31b86904 	addi	r6,r6,-7772
 404df60:	180b883a 	mov	r5,r3
 404df64:	1009883a 	mov	r4,r2
 404df68:	404f13c0 	call	404f13c <alt_alarm_start>
 404df6c:	1000040e 	bge	r2,zero,404df80 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 404df70:	e0fffd17 	ldw	r3,-12(fp)
 404df74:	00a00034 	movhi	r2,32768
 404df78:	10bfffc4 	addi	r2,r2,-1
 404df7c:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 404df80:	0001883a 	nop
 404df84:	e037883a 	mov	sp,fp
 404df88:	dfc00117 	ldw	ra,4(sp)
 404df8c:	df000017 	ldw	fp,0(sp)
 404df90:	dec00204 	addi	sp,sp,8
 404df94:	f800283a 	ret

0404df98 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 404df98:	defff804 	addi	sp,sp,-32
 404df9c:	df000715 	stw	fp,28(sp)
 404dfa0:	df000704 	addi	fp,sp,28
 404dfa4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 404dfa8:	e0bfff17 	ldw	r2,-4(fp)
 404dfac:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 404dfb0:	e0bffb17 	ldw	r2,-20(fp)
 404dfb4:	10800017 	ldw	r2,0(r2)
 404dfb8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 404dfbc:	e0bffc17 	ldw	r2,-16(fp)
 404dfc0:	10800104 	addi	r2,r2,4
 404dfc4:	10800037 	ldwio	r2,0(r2)
 404dfc8:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 404dfcc:	e0bffd17 	ldw	r2,-12(fp)
 404dfd0:	1080c00c 	andi	r2,r2,768
 404dfd4:	10006d26 	beq	r2,zero,404e18c <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 404dfd8:	e0bffd17 	ldw	r2,-12(fp)
 404dfdc:	1080400c 	andi	r2,r2,256
 404dfe0:	10003526 	beq	r2,zero,404e0b8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 404dfe4:	00800074 	movhi	r2,1
 404dfe8:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 404dfec:	e0bffb17 	ldw	r2,-20(fp)
 404dff0:	10800a17 	ldw	r2,40(r2)
 404dff4:	10800044 	addi	r2,r2,1
 404dff8:	1081ffcc 	andi	r2,r2,2047
 404dffc:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 404e000:	e0bffb17 	ldw	r2,-20(fp)
 404e004:	10c00b17 	ldw	r3,44(r2)
 404e008:	e0bffe17 	ldw	r2,-8(fp)
 404e00c:	18801526 	beq	r3,r2,404e064 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 404e010:	e0bffc17 	ldw	r2,-16(fp)
 404e014:	10800037 	ldwio	r2,0(r2)
 404e018:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 404e01c:	e0bff917 	ldw	r2,-28(fp)
 404e020:	10a0000c 	andi	r2,r2,32768
 404e024:	10001126 	beq	r2,zero,404e06c <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 404e028:	e0bffb17 	ldw	r2,-20(fp)
 404e02c:	10800a17 	ldw	r2,40(r2)
 404e030:	e0fff917 	ldw	r3,-28(fp)
 404e034:	1809883a 	mov	r4,r3
 404e038:	e0fffb17 	ldw	r3,-20(fp)
 404e03c:	1885883a 	add	r2,r3,r2
 404e040:	10800e04 	addi	r2,r2,56
 404e044:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 404e048:	e0bffb17 	ldw	r2,-20(fp)
 404e04c:	10800a17 	ldw	r2,40(r2)
 404e050:	10800044 	addi	r2,r2,1
 404e054:	10c1ffcc 	andi	r3,r2,2047
 404e058:	e0bffb17 	ldw	r2,-20(fp)
 404e05c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 404e060:	003fe206 	br	404dfec <__alt_data_end+0xfffe37ec>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 404e064:	0001883a 	nop
 404e068:	00000106 	br	404e070 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 404e06c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 404e070:	e0bff917 	ldw	r2,-28(fp)
 404e074:	10bfffec 	andhi	r2,r2,65535
 404e078:	10000f26 	beq	r2,zero,404e0b8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 404e07c:	e0bffb17 	ldw	r2,-20(fp)
 404e080:	10c00817 	ldw	r3,32(r2)
 404e084:	00bfff84 	movi	r2,-2
 404e088:	1886703a 	and	r3,r3,r2
 404e08c:	e0bffb17 	ldw	r2,-20(fp)
 404e090:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 404e094:	e0bffc17 	ldw	r2,-16(fp)
 404e098:	10800104 	addi	r2,r2,4
 404e09c:	1007883a 	mov	r3,r2
 404e0a0:	e0bffb17 	ldw	r2,-20(fp)
 404e0a4:	10800817 	ldw	r2,32(r2)
 404e0a8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 404e0ac:	e0bffc17 	ldw	r2,-16(fp)
 404e0b0:	10800104 	addi	r2,r2,4
 404e0b4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 404e0b8:	e0bffd17 	ldw	r2,-12(fp)
 404e0bc:	1080800c 	andi	r2,r2,512
 404e0c0:	103fbe26 	beq	r2,zero,404dfbc <__alt_data_end+0xfffe37bc>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 404e0c4:	e0bffd17 	ldw	r2,-12(fp)
 404e0c8:	1004d43a 	srli	r2,r2,16
 404e0cc:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 404e0d0:	00001406 	br	404e124 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 404e0d4:	e0bffc17 	ldw	r2,-16(fp)
 404e0d8:	e0fffb17 	ldw	r3,-20(fp)
 404e0dc:	18c00d17 	ldw	r3,52(r3)
 404e0e0:	e13ffb17 	ldw	r4,-20(fp)
 404e0e4:	20c7883a 	add	r3,r4,r3
 404e0e8:	18c20e04 	addi	r3,r3,2104
 404e0ec:	18c00003 	ldbu	r3,0(r3)
 404e0f0:	18c03fcc 	andi	r3,r3,255
 404e0f4:	18c0201c 	xori	r3,r3,128
 404e0f8:	18ffe004 	addi	r3,r3,-128
 404e0fc:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 404e100:	e0bffb17 	ldw	r2,-20(fp)
 404e104:	10800d17 	ldw	r2,52(r2)
 404e108:	10800044 	addi	r2,r2,1
 404e10c:	10c1ffcc 	andi	r3,r2,2047
 404e110:	e0bffb17 	ldw	r2,-20(fp)
 404e114:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 404e118:	e0bffa17 	ldw	r2,-24(fp)
 404e11c:	10bfffc4 	addi	r2,r2,-1
 404e120:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 404e124:	e0bffa17 	ldw	r2,-24(fp)
 404e128:	10000526 	beq	r2,zero,404e140 <altera_avalon_jtag_uart_irq+0x1a8>
 404e12c:	e0bffb17 	ldw	r2,-20(fp)
 404e130:	10c00d17 	ldw	r3,52(r2)
 404e134:	e0bffb17 	ldw	r2,-20(fp)
 404e138:	10800c17 	ldw	r2,48(r2)
 404e13c:	18bfe51e 	bne	r3,r2,404e0d4 <__alt_data_end+0xfffe38d4>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 404e140:	e0bffa17 	ldw	r2,-24(fp)
 404e144:	103f9d26 	beq	r2,zero,404dfbc <__alt_data_end+0xfffe37bc>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 404e148:	e0bffb17 	ldw	r2,-20(fp)
 404e14c:	10c00817 	ldw	r3,32(r2)
 404e150:	00bfff44 	movi	r2,-3
 404e154:	1886703a 	and	r3,r3,r2
 404e158:	e0bffb17 	ldw	r2,-20(fp)
 404e15c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 404e160:	e0bffb17 	ldw	r2,-20(fp)
 404e164:	10800017 	ldw	r2,0(r2)
 404e168:	10800104 	addi	r2,r2,4
 404e16c:	1007883a 	mov	r3,r2
 404e170:	e0bffb17 	ldw	r2,-20(fp)
 404e174:	10800817 	ldw	r2,32(r2)
 404e178:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 404e17c:	e0bffc17 	ldw	r2,-16(fp)
 404e180:	10800104 	addi	r2,r2,4
 404e184:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 404e188:	003f8c06 	br	404dfbc <__alt_data_end+0xfffe37bc>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 404e18c:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 404e190:	0001883a 	nop
 404e194:	e037883a 	mov	sp,fp
 404e198:	df000017 	ldw	fp,0(sp)
 404e19c:	dec00104 	addi	sp,sp,4
 404e1a0:	f800283a 	ret

0404e1a4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 404e1a4:	defff804 	addi	sp,sp,-32
 404e1a8:	df000715 	stw	fp,28(sp)
 404e1ac:	df000704 	addi	fp,sp,28
 404e1b0:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 404e1b4:	e0bffb17 	ldw	r2,-20(fp)
 404e1b8:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 404e1bc:	e0bff917 	ldw	r2,-28(fp)
 404e1c0:	10800017 	ldw	r2,0(r2)
 404e1c4:	10800104 	addi	r2,r2,4
 404e1c8:	10800037 	ldwio	r2,0(r2)
 404e1cc:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 404e1d0:	e0bffa17 	ldw	r2,-24(fp)
 404e1d4:	1081000c 	andi	r2,r2,1024
 404e1d8:	10000b26 	beq	r2,zero,404e208 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 404e1dc:	e0bff917 	ldw	r2,-28(fp)
 404e1e0:	10800017 	ldw	r2,0(r2)
 404e1e4:	10800104 	addi	r2,r2,4
 404e1e8:	1007883a 	mov	r3,r2
 404e1ec:	e0bff917 	ldw	r2,-28(fp)
 404e1f0:	10800817 	ldw	r2,32(r2)
 404e1f4:	10810014 	ori	r2,r2,1024
 404e1f8:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 404e1fc:	e0bff917 	ldw	r2,-28(fp)
 404e200:	10000915 	stw	zero,36(r2)
 404e204:	00000a06 	br	404e230 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 404e208:	e0bff917 	ldw	r2,-28(fp)
 404e20c:	10c00917 	ldw	r3,36(r2)
 404e210:	00a00034 	movhi	r2,32768
 404e214:	10bfff04 	addi	r2,r2,-4
 404e218:	10c00536 	bltu	r2,r3,404e230 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 404e21c:	e0bff917 	ldw	r2,-28(fp)
 404e220:	10800917 	ldw	r2,36(r2)
 404e224:	10c00044 	addi	r3,r2,1
 404e228:	e0bff917 	ldw	r2,-28(fp)
 404e22c:	10c00915 	stw	r3,36(r2)
 404e230:	d0a70217 	ldw	r2,-25592(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 404e234:	e037883a 	mov	sp,fp
 404e238:	df000017 	ldw	fp,0(sp)
 404e23c:	dec00104 	addi	sp,sp,4
 404e240:	f800283a 	ret

0404e244 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 404e244:	defffd04 	addi	sp,sp,-12
 404e248:	df000215 	stw	fp,8(sp)
 404e24c:	df000204 	addi	fp,sp,8
 404e250:	e13ffe15 	stw	r4,-8(fp)
 404e254:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 404e258:	00000506 	br	404e270 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 404e25c:	e0bfff17 	ldw	r2,-4(fp)
 404e260:	1090000c 	andi	r2,r2,16384
 404e264:	10000226 	beq	r2,zero,404e270 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 404e268:	00bffd44 	movi	r2,-11
 404e26c:	00000b06 	br	404e29c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 404e270:	e0bffe17 	ldw	r2,-8(fp)
 404e274:	10c00d17 	ldw	r3,52(r2)
 404e278:	e0bffe17 	ldw	r2,-8(fp)
 404e27c:	10800c17 	ldw	r2,48(r2)
 404e280:	18800526 	beq	r3,r2,404e298 <altera_avalon_jtag_uart_close+0x54>
 404e284:	e0bffe17 	ldw	r2,-8(fp)
 404e288:	10c00917 	ldw	r3,36(r2)
 404e28c:	e0bffe17 	ldw	r2,-8(fp)
 404e290:	10800117 	ldw	r2,4(r2)
 404e294:	18bff136 	bltu	r3,r2,404e25c <__alt_data_end+0xfffe3a5c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 404e298:	0005883a 	mov	r2,zero
}
 404e29c:	e037883a 	mov	sp,fp
 404e2a0:	df000017 	ldw	fp,0(sp)
 404e2a4:	dec00104 	addi	sp,sp,4
 404e2a8:	f800283a 	ret

0404e2ac <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 404e2ac:	defffa04 	addi	sp,sp,-24
 404e2b0:	df000515 	stw	fp,20(sp)
 404e2b4:	df000504 	addi	fp,sp,20
 404e2b8:	e13ffd15 	stw	r4,-12(fp)
 404e2bc:	e17ffe15 	stw	r5,-8(fp)
 404e2c0:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 404e2c4:	00bff9c4 	movi	r2,-25
 404e2c8:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 404e2cc:	e0bffe17 	ldw	r2,-8(fp)
 404e2d0:	10da8060 	cmpeqi	r3,r2,27137
 404e2d4:	1800031e 	bne	r3,zero,404e2e4 <altera_avalon_jtag_uart_ioctl+0x38>
 404e2d8:	109a80a0 	cmpeqi	r2,r2,27138
 404e2dc:	1000181e 	bne	r2,zero,404e340 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 404e2e0:	00002906 	br	404e388 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 404e2e4:	e0bffd17 	ldw	r2,-12(fp)
 404e2e8:	10c00117 	ldw	r3,4(r2)
 404e2ec:	00a00034 	movhi	r2,32768
 404e2f0:	10bfffc4 	addi	r2,r2,-1
 404e2f4:	18802126 	beq	r3,r2,404e37c <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 404e2f8:	e0bfff17 	ldw	r2,-4(fp)
 404e2fc:	10800017 	ldw	r2,0(r2)
 404e300:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 404e304:	e0bffc17 	ldw	r2,-16(fp)
 404e308:	10800090 	cmplti	r2,r2,2
 404e30c:	1000061e 	bne	r2,zero,404e328 <altera_avalon_jtag_uart_ioctl+0x7c>
 404e310:	e0fffc17 	ldw	r3,-16(fp)
 404e314:	00a00034 	movhi	r2,32768
 404e318:	10bfffc4 	addi	r2,r2,-1
 404e31c:	18800226 	beq	r3,r2,404e328 <altera_avalon_jtag_uart_ioctl+0x7c>
 404e320:	e0bffc17 	ldw	r2,-16(fp)
 404e324:	00000206 	br	404e330 <altera_avalon_jtag_uart_ioctl+0x84>
 404e328:	00a00034 	movhi	r2,32768
 404e32c:	10bfff84 	addi	r2,r2,-2
 404e330:	e0fffd17 	ldw	r3,-12(fp)
 404e334:	18800115 	stw	r2,4(r3)
      rc = 0;
 404e338:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 404e33c:	00000f06 	br	404e37c <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 404e340:	e0bffd17 	ldw	r2,-12(fp)
 404e344:	10c00117 	ldw	r3,4(r2)
 404e348:	00a00034 	movhi	r2,32768
 404e34c:	10bfffc4 	addi	r2,r2,-1
 404e350:	18800c26 	beq	r3,r2,404e384 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 404e354:	e0bffd17 	ldw	r2,-12(fp)
 404e358:	10c00917 	ldw	r3,36(r2)
 404e35c:	e0bffd17 	ldw	r2,-12(fp)
 404e360:	10800117 	ldw	r2,4(r2)
 404e364:	1885803a 	cmpltu	r2,r3,r2
 404e368:	10c03fcc 	andi	r3,r2,255
 404e36c:	e0bfff17 	ldw	r2,-4(fp)
 404e370:	10c00015 	stw	r3,0(r2)
      rc = 0;
 404e374:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 404e378:	00000206 	br	404e384 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 404e37c:	0001883a 	nop
 404e380:	00000106 	br	404e388 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 404e384:	0001883a 	nop

  default:
    break;
  }

  return rc;
 404e388:	e0bffb17 	ldw	r2,-20(fp)
}
 404e38c:	e037883a 	mov	sp,fp
 404e390:	df000017 	ldw	fp,0(sp)
 404e394:	dec00104 	addi	sp,sp,4
 404e398:	f800283a 	ret

0404e39c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 404e39c:	defff304 	addi	sp,sp,-52
 404e3a0:	dfc00c15 	stw	ra,48(sp)
 404e3a4:	df000b15 	stw	fp,44(sp)
 404e3a8:	df000b04 	addi	fp,sp,44
 404e3ac:	e13ffc15 	stw	r4,-16(fp)
 404e3b0:	e17ffd15 	stw	r5,-12(fp)
 404e3b4:	e1bffe15 	stw	r6,-8(fp)
 404e3b8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 404e3bc:	e0bffd17 	ldw	r2,-12(fp)
 404e3c0:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 404e3c4:	00004706 	br	404e4e4 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 404e3c8:	e0bffc17 	ldw	r2,-16(fp)
 404e3cc:	10800a17 	ldw	r2,40(r2)
 404e3d0:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 404e3d4:	e0bffc17 	ldw	r2,-16(fp)
 404e3d8:	10800b17 	ldw	r2,44(r2)
 404e3dc:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 404e3e0:	e0fff717 	ldw	r3,-36(fp)
 404e3e4:	e0bff817 	ldw	r2,-32(fp)
 404e3e8:	18800536 	bltu	r3,r2,404e400 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 404e3ec:	e0fff717 	ldw	r3,-36(fp)
 404e3f0:	e0bff817 	ldw	r2,-32(fp)
 404e3f4:	1885c83a 	sub	r2,r3,r2
 404e3f8:	e0bff615 	stw	r2,-40(fp)
 404e3fc:	00000406 	br	404e410 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 404e400:	00c20004 	movi	r3,2048
 404e404:	e0bff817 	ldw	r2,-32(fp)
 404e408:	1885c83a 	sub	r2,r3,r2
 404e40c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 404e410:	e0bff617 	ldw	r2,-40(fp)
 404e414:	10001e26 	beq	r2,zero,404e490 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 404e418:	e0fffe17 	ldw	r3,-8(fp)
 404e41c:	e0bff617 	ldw	r2,-40(fp)
 404e420:	1880022e 	bgeu	r3,r2,404e42c <altera_avalon_jtag_uart_read+0x90>
        n = space;
 404e424:	e0bffe17 	ldw	r2,-8(fp)
 404e428:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 404e42c:	e0bffc17 	ldw	r2,-16(fp)
 404e430:	10c00e04 	addi	r3,r2,56
 404e434:	e0bff817 	ldw	r2,-32(fp)
 404e438:	1885883a 	add	r2,r3,r2
 404e43c:	e1bff617 	ldw	r6,-40(fp)
 404e440:	100b883a 	mov	r5,r2
 404e444:	e13ff517 	ldw	r4,-44(fp)
 404e448:	40461d80 	call	40461d8 <memcpy>
      ptr   += n;
 404e44c:	e0fff517 	ldw	r3,-44(fp)
 404e450:	e0bff617 	ldw	r2,-40(fp)
 404e454:	1885883a 	add	r2,r3,r2
 404e458:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 404e45c:	e0fffe17 	ldw	r3,-8(fp)
 404e460:	e0bff617 	ldw	r2,-40(fp)
 404e464:	1885c83a 	sub	r2,r3,r2
 404e468:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 404e46c:	e0fff817 	ldw	r3,-32(fp)
 404e470:	e0bff617 	ldw	r2,-40(fp)
 404e474:	1885883a 	add	r2,r3,r2
 404e478:	10c1ffcc 	andi	r3,r2,2047
 404e47c:	e0bffc17 	ldw	r2,-16(fp)
 404e480:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 404e484:	e0bffe17 	ldw	r2,-8(fp)
 404e488:	00bfcf16 	blt	zero,r2,404e3c8 <__alt_data_end+0xfffe3bc8>
 404e48c:	00000106 	br	404e494 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 404e490:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 404e494:	e0fff517 	ldw	r3,-44(fp)
 404e498:	e0bffd17 	ldw	r2,-12(fp)
 404e49c:	1880141e 	bne	r3,r2,404e4f0 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 404e4a0:	e0bfff17 	ldw	r2,-4(fp)
 404e4a4:	1090000c 	andi	r2,r2,16384
 404e4a8:	1000131e 	bne	r2,zero,404e4f8 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 404e4ac:	0001883a 	nop
 404e4b0:	e0bffc17 	ldw	r2,-16(fp)
 404e4b4:	10c00a17 	ldw	r3,40(r2)
 404e4b8:	e0bff717 	ldw	r2,-36(fp)
 404e4bc:	1880051e 	bne	r3,r2,404e4d4 <altera_avalon_jtag_uart_read+0x138>
 404e4c0:	e0bffc17 	ldw	r2,-16(fp)
 404e4c4:	10c00917 	ldw	r3,36(r2)
 404e4c8:	e0bffc17 	ldw	r2,-16(fp)
 404e4cc:	10800117 	ldw	r2,4(r2)
 404e4d0:	18bff736 	bltu	r3,r2,404e4b0 <__alt_data_end+0xfffe3cb0>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 404e4d4:	e0bffc17 	ldw	r2,-16(fp)
 404e4d8:	10c00a17 	ldw	r3,40(r2)
 404e4dc:	e0bff717 	ldw	r2,-36(fp)
 404e4e0:	18800726 	beq	r3,r2,404e500 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 404e4e4:	e0bffe17 	ldw	r2,-8(fp)
 404e4e8:	00bfb716 	blt	zero,r2,404e3c8 <__alt_data_end+0xfffe3bc8>
 404e4ec:	00000506 	br	404e504 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 404e4f0:	0001883a 	nop
 404e4f4:	00000306 	br	404e504 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 404e4f8:	0001883a 	nop
 404e4fc:	00000106 	br	404e504 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 404e500:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 404e504:	e0fff517 	ldw	r3,-44(fp)
 404e508:	e0bffd17 	ldw	r2,-12(fp)
 404e50c:	18801826 	beq	r3,r2,404e570 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 404e510:	0005303a 	rdctl	r2,status
 404e514:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 404e518:	e0fffb17 	ldw	r3,-20(fp)
 404e51c:	00bfff84 	movi	r2,-2
 404e520:	1884703a 	and	r2,r3,r2
 404e524:	1001703a 	wrctl	status,r2
  
  return context;
 404e528:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 404e52c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 404e530:	e0bffc17 	ldw	r2,-16(fp)
 404e534:	10800817 	ldw	r2,32(r2)
 404e538:	10c00054 	ori	r3,r2,1
 404e53c:	e0bffc17 	ldw	r2,-16(fp)
 404e540:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 404e544:	e0bffc17 	ldw	r2,-16(fp)
 404e548:	10800017 	ldw	r2,0(r2)
 404e54c:	10800104 	addi	r2,r2,4
 404e550:	1007883a 	mov	r3,r2
 404e554:	e0bffc17 	ldw	r2,-16(fp)
 404e558:	10800817 	ldw	r2,32(r2)
 404e55c:	18800035 	stwio	r2,0(r3)
 404e560:	e0bffa17 	ldw	r2,-24(fp)
 404e564:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 404e568:	e0bff917 	ldw	r2,-28(fp)
 404e56c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 404e570:	e0fff517 	ldw	r3,-44(fp)
 404e574:	e0bffd17 	ldw	r2,-12(fp)
 404e578:	18800426 	beq	r3,r2,404e58c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 404e57c:	e0fff517 	ldw	r3,-44(fp)
 404e580:	e0bffd17 	ldw	r2,-12(fp)
 404e584:	1885c83a 	sub	r2,r3,r2
 404e588:	00000606 	br	404e5a4 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 404e58c:	e0bfff17 	ldw	r2,-4(fp)
 404e590:	1090000c 	andi	r2,r2,16384
 404e594:	10000226 	beq	r2,zero,404e5a0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 404e598:	00bffd44 	movi	r2,-11
 404e59c:	00000106 	br	404e5a4 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 404e5a0:	00bffec4 	movi	r2,-5
}
 404e5a4:	e037883a 	mov	sp,fp
 404e5a8:	dfc00117 	ldw	ra,4(sp)
 404e5ac:	df000017 	ldw	fp,0(sp)
 404e5b0:	dec00204 	addi	sp,sp,8
 404e5b4:	f800283a 	ret

0404e5b8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 404e5b8:	defff304 	addi	sp,sp,-52
 404e5bc:	dfc00c15 	stw	ra,48(sp)
 404e5c0:	df000b15 	stw	fp,44(sp)
 404e5c4:	df000b04 	addi	fp,sp,44
 404e5c8:	e13ffc15 	stw	r4,-16(fp)
 404e5cc:	e17ffd15 	stw	r5,-12(fp)
 404e5d0:	e1bffe15 	stw	r6,-8(fp)
 404e5d4:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 404e5d8:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 404e5dc:	e0bffd17 	ldw	r2,-12(fp)
 404e5e0:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 404e5e4:	00003706 	br	404e6c4 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 404e5e8:	e0bffc17 	ldw	r2,-16(fp)
 404e5ec:	10800c17 	ldw	r2,48(r2)
 404e5f0:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 404e5f4:	e0bffc17 	ldw	r2,-16(fp)
 404e5f8:	10800d17 	ldw	r2,52(r2)
 404e5fc:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 404e600:	e0fff917 	ldw	r3,-28(fp)
 404e604:	e0bff517 	ldw	r2,-44(fp)
 404e608:	1880062e 	bgeu	r3,r2,404e624 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 404e60c:	e0fff517 	ldw	r3,-44(fp)
 404e610:	e0bff917 	ldw	r2,-28(fp)
 404e614:	1885c83a 	sub	r2,r3,r2
 404e618:	10bfffc4 	addi	r2,r2,-1
 404e61c:	e0bff615 	stw	r2,-40(fp)
 404e620:	00000b06 	br	404e650 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 404e624:	e0bff517 	ldw	r2,-44(fp)
 404e628:	10000526 	beq	r2,zero,404e640 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 404e62c:	00c20004 	movi	r3,2048
 404e630:	e0bff917 	ldw	r2,-28(fp)
 404e634:	1885c83a 	sub	r2,r3,r2
 404e638:	e0bff615 	stw	r2,-40(fp)
 404e63c:	00000406 	br	404e650 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 404e640:	00c1ffc4 	movi	r3,2047
 404e644:	e0bff917 	ldw	r2,-28(fp)
 404e648:	1885c83a 	sub	r2,r3,r2
 404e64c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 404e650:	e0bff617 	ldw	r2,-40(fp)
 404e654:	10001e26 	beq	r2,zero,404e6d0 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 404e658:	e0fffe17 	ldw	r3,-8(fp)
 404e65c:	e0bff617 	ldw	r2,-40(fp)
 404e660:	1880022e 	bgeu	r3,r2,404e66c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 404e664:	e0bffe17 	ldw	r2,-8(fp)
 404e668:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 404e66c:	e0bffc17 	ldw	r2,-16(fp)
 404e670:	10c20e04 	addi	r3,r2,2104
 404e674:	e0bff917 	ldw	r2,-28(fp)
 404e678:	1885883a 	add	r2,r3,r2
 404e67c:	e1bff617 	ldw	r6,-40(fp)
 404e680:	e17ffd17 	ldw	r5,-12(fp)
 404e684:	1009883a 	mov	r4,r2
 404e688:	40461d80 	call	40461d8 <memcpy>
      ptr   += n;
 404e68c:	e0fffd17 	ldw	r3,-12(fp)
 404e690:	e0bff617 	ldw	r2,-40(fp)
 404e694:	1885883a 	add	r2,r3,r2
 404e698:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 404e69c:	e0fffe17 	ldw	r3,-8(fp)
 404e6a0:	e0bff617 	ldw	r2,-40(fp)
 404e6a4:	1885c83a 	sub	r2,r3,r2
 404e6a8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 404e6ac:	e0fff917 	ldw	r3,-28(fp)
 404e6b0:	e0bff617 	ldw	r2,-40(fp)
 404e6b4:	1885883a 	add	r2,r3,r2
 404e6b8:	10c1ffcc 	andi	r3,r2,2047
 404e6bc:	e0bffc17 	ldw	r2,-16(fp)
 404e6c0:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 404e6c4:	e0bffe17 	ldw	r2,-8(fp)
 404e6c8:	00bfc716 	blt	zero,r2,404e5e8 <__alt_data_end+0xfffe3de8>
 404e6cc:	00000106 	br	404e6d4 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 404e6d0:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 404e6d4:	0005303a 	rdctl	r2,status
 404e6d8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 404e6dc:	e0fffb17 	ldw	r3,-20(fp)
 404e6e0:	00bfff84 	movi	r2,-2
 404e6e4:	1884703a 	and	r2,r3,r2
 404e6e8:	1001703a 	wrctl	status,r2
  
  return context;
 404e6ec:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 404e6f0:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 404e6f4:	e0bffc17 	ldw	r2,-16(fp)
 404e6f8:	10800817 	ldw	r2,32(r2)
 404e6fc:	10c00094 	ori	r3,r2,2
 404e700:	e0bffc17 	ldw	r2,-16(fp)
 404e704:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 404e708:	e0bffc17 	ldw	r2,-16(fp)
 404e70c:	10800017 	ldw	r2,0(r2)
 404e710:	10800104 	addi	r2,r2,4
 404e714:	1007883a 	mov	r3,r2
 404e718:	e0bffc17 	ldw	r2,-16(fp)
 404e71c:	10800817 	ldw	r2,32(r2)
 404e720:	18800035 	stwio	r2,0(r3)
 404e724:	e0bffa17 	ldw	r2,-24(fp)
 404e728:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 404e72c:	e0bff817 	ldw	r2,-32(fp)
 404e730:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 404e734:	e0bffe17 	ldw	r2,-8(fp)
 404e738:	0080100e 	bge	zero,r2,404e77c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 404e73c:	e0bfff17 	ldw	r2,-4(fp)
 404e740:	1090000c 	andi	r2,r2,16384
 404e744:	1000101e 	bne	r2,zero,404e788 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 404e748:	0001883a 	nop
 404e74c:	e0bffc17 	ldw	r2,-16(fp)
 404e750:	10c00d17 	ldw	r3,52(r2)
 404e754:	e0bff517 	ldw	r2,-44(fp)
 404e758:	1880051e 	bne	r3,r2,404e770 <altera_avalon_jtag_uart_write+0x1b8>
 404e75c:	e0bffc17 	ldw	r2,-16(fp)
 404e760:	10c00917 	ldw	r3,36(r2)
 404e764:	e0bffc17 	ldw	r2,-16(fp)
 404e768:	10800117 	ldw	r2,4(r2)
 404e76c:	18bff736 	bltu	r3,r2,404e74c <__alt_data_end+0xfffe3f4c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 404e770:	e0bffc17 	ldw	r2,-16(fp)
 404e774:	10800917 	ldw	r2,36(r2)
 404e778:	1000051e 	bne	r2,zero,404e790 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 404e77c:	e0bffe17 	ldw	r2,-8(fp)
 404e780:	00bfd016 	blt	zero,r2,404e6c4 <__alt_data_end+0xfffe3ec4>
 404e784:	00000306 	br	404e794 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 404e788:	0001883a 	nop
 404e78c:	00000106 	br	404e794 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 404e790:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 404e794:	e0fffd17 	ldw	r3,-12(fp)
 404e798:	e0bff717 	ldw	r2,-36(fp)
 404e79c:	18800426 	beq	r3,r2,404e7b0 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 404e7a0:	e0fffd17 	ldw	r3,-12(fp)
 404e7a4:	e0bff717 	ldw	r2,-36(fp)
 404e7a8:	1885c83a 	sub	r2,r3,r2
 404e7ac:	00000606 	br	404e7c8 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 404e7b0:	e0bfff17 	ldw	r2,-4(fp)
 404e7b4:	1090000c 	andi	r2,r2,16384
 404e7b8:	10000226 	beq	r2,zero,404e7c4 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 404e7bc:	00bffd44 	movi	r2,-11
 404e7c0:	00000106 	br	404e7c8 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 404e7c4:	00bffec4 	movi	r2,-5
}
 404e7c8:	e037883a 	mov	sp,fp
 404e7cc:	dfc00117 	ldw	ra,4(sp)
 404e7d0:	df000017 	ldw	fp,0(sp)
 404e7d4:	dec00204 	addi	sp,sp,8
 404e7d8:	f800283a 	ret

0404e7dc <altera_avalon_mailbox_identify>:
 * Check an instance open match
 * with the callback register
 */

static void altera_avalon_mailbox_identify (altera_avalon_mailbox_dev *dev)
{
 404e7dc:	defffd04 	addi	sp,sp,-12
 404e7e0:	df000215 	stw	fp,8(sp)
 404e7e4:	df000204 	addi	fp,sp,8
 404e7e8:	e13fff15 	stw	r4,-4(fp)
    /* Random signature to test mailbox ownership */
    alt_u32 magic_num = 0x3A11B045;
 404e7ec:	008e84b4 	movhi	r2,14866
 404e7f0:	10ac1144 	addi	r2,r2,-20411
 404e7f4:	e0bffe15 	stw	r2,-8(fp)

    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, magic_num);
 404e7f8:	e0bfff17 	ldw	r2,-4(fp)
 404e7fc:	10800a17 	ldw	r2,40(r2)
 404e800:	10800104 	addi	r2,r2,4
 404e804:	1007883a 	mov	r3,r2
 404e808:	e0bffe17 	ldw	r2,-8(fp)
 404e80c:	18800035 	stwio	r2,0(r3)
    if((IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST)) == magic_num)
 404e810:	e0bfff17 	ldw	r2,-4(fp)
 404e814:	10800a17 	ldw	r2,40(r2)
 404e818:	10800104 	addi	r2,r2,4
 404e81c:	10800037 	ldwio	r2,0(r2)
 404e820:	1007883a 	mov	r3,r2
 404e824:	e0bffe17 	ldw	r2,-8(fp)
 404e828:	1880081e 	bne	r3,r2,404e84c <altera_avalon_mailbox_identify+0x70>
    {
        dev-> mbox_type = MBOX_TX;
 404e82c:	e0bfff17 	ldw	r2,-4(fp)
 404e830:	10000f15 	stw	zero,60(r2)
        /* Clear message_ptr to default */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, 0x0);
 404e834:	e0bfff17 	ldw	r2,-4(fp)
 404e838:	10800a17 	ldw	r2,40(r2)
 404e83c:	10800104 	addi	r2,r2,4
 404e840:	0007883a 	mov	r3,zero
 404e844:	10c00035 	stwio	r3,0(r2)
    } else
    {
	    dev->mbox_type = MBOX_RX;
    }
}
 404e848:	00000306 	br	404e858 <altera_avalon_mailbox_identify+0x7c>
        dev-> mbox_type = MBOX_TX;
        /* Clear message_ptr to default */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, 0x0);
    } else
    {
	    dev->mbox_type = MBOX_RX;
 404e84c:	e0bfff17 	ldw	r2,-4(fp)
 404e850:	00c00044 	movi	r3,1
 404e854:	10c00f15 	stw	r3,60(r2)
    }
}
 404e858:	0001883a 	nop
 404e85c:	e037883a 	mov	sp,fp
 404e860:	df000017 	ldw	fp,0(sp)
 404e864:	dec00104 	addi	sp,sp,4
 404e868:	f800283a 	ret

0404e86c <altera_avalon_mailbox_post>:
/*
 *   altera_avalon_mailbox_post
 *   This function post message out through sender mailbox
 */
static alt_32 altera_avalon_mailbox_post (altera_avalon_mailbox_dev *dev,  void *message)
{
 404e86c:	defffc04 	addi	sp,sp,-16
 404e870:	df000315 	stw	fp,12(sp)
 404e874:	df000304 	addi	fp,sp,12
 404e878:	e13ffe15 	stw	r4,-8(fp)
 404e87c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 *mbox_msg = (alt_u32*) message ;
 404e880:	e0bfff17 	ldw	r2,-4(fp)
 404e884:	e0bffd15 	stw	r2,-12(fp)

    if (mbox_msg != NULL) {
 404e888:	e0bffd17 	ldw	r2,-12(fp)
 404e88c:	10001026 	beq	r2,zero,404e8d0 <altera_avalon_mailbox_post+0x64>
        /* When message space available, post the message out */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, mbox_msg[1]);
 404e890:	e0bffe17 	ldw	r2,-8(fp)
 404e894:	10800a17 	ldw	r2,40(r2)
 404e898:	10800104 	addi	r2,r2,4
 404e89c:	1007883a 	mov	r3,r2
 404e8a0:	e0bffd17 	ldw	r2,-12(fp)
 404e8a4:	10800104 	addi	r2,r2,4
 404e8a8:	10800017 	ldw	r2,0(r2)
 404e8ac:	18800035 	stwio	r2,0(r3)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, mbox_msg[0]);
 404e8b0:	e0bffe17 	ldw	r2,-8(fp)
 404e8b4:	10800a17 	ldw	r2,40(r2)
 404e8b8:	1007883a 	mov	r3,r2
 404e8bc:	e0bffd17 	ldw	r2,-12(fp)
 404e8c0:	10800017 	ldw	r2,0(r2)
 404e8c4:	18800035 	stwio	r2,0(r3)
        return 0;
 404e8c8:	0005883a 	mov	r2,zero
 404e8cc:	00000106 	br	404e8d4 <altera_avalon_mailbox_post+0x68>
    }
    /* Invalid NULL message received */
    return -EINVAL;
 404e8d0:	00bffa84 	movi	r2,-22
}
 404e8d4:	e037883a 	mov	sp,fp
 404e8d8:	df000017 	ldw	fp,0(sp)
 404e8dc:	dec00104 	addi	sp,sp,4
 404e8e0:	f800283a 	ret

0404e8e4 <altera_avalon_mailbox_simple_tx_isr>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_tx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_tx_isr(void *context, alt_u32 id)
#endif
{
 404e8e4:	defff604 	addi	sp,sp,-40
 404e8e8:	dfc00915 	stw	ra,36(sp)
 404e8ec:	df000815 	stw	fp,32(sp)
 404e8f0:	df000804 	addi	fp,sp,32
 404e8f4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
 404e8f8:	e0bfff17 	ldw	r2,-4(fp)
 404e8fc:	e0bff815 	stw	r2,-32(fp)
    int status = 0;
 404e900:	e03ff915 	stw	zero,-28(fp)
    alt_u32 data;
    alt_irq_context cpu_sr;
    alt_u32 *message = dev->mbox_msg;
 404e904:	e0bff817 	ldw	r2,-32(fp)
 404e908:	10801017 	ldw	r2,64(r2)
 404e90c:	e0bffa15 	stw	r2,-24(fp)

    /* Mask mailbox interrupt */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 404e910:	e0bff817 	ldw	r2,-32(fp)
 404e914:	10800a17 	ldw	r2,40(r2)
 404e918:	10800304 	addi	r2,r2,12
 404e91c:	10800037 	ldwio	r2,0(r2)
 404e920:	1007883a 	mov	r3,r2
 404e924:	00bfff44 	movi	r2,-3
 404e928:	1884703a 	and	r2,r3,r2
 404e92c:	e0bffb15 	stw	r2,-20(fp)
               (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 404e930:	e0bff817 	ldw	r2,-32(fp)
 404e934:	10800a17 	ldw	r2,40(r2)
 404e938:	10800304 	addi	r2,r2,12
 404e93c:	1007883a 	mov	r3,r2
 404e940:	e0bffb17 	ldw	r2,-20(fp)
 404e944:	18800035 	stwio	r2,0(r3)

    if (message != NULL)
 404e948:	e0bffa17 	ldw	r2,-24(fp)
 404e94c:	10002d26 	beq	r2,zero,404ea04 <altera_avalon_mailbox_simple_tx_isr+0x120>
    {
        /* Post out message requested */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, message[1]);
 404e950:	e0bff817 	ldw	r2,-32(fp)
 404e954:	10800a17 	ldw	r2,40(r2)
 404e958:	10800104 	addi	r2,r2,4
 404e95c:	1007883a 	mov	r3,r2
 404e960:	e0bffa17 	ldw	r2,-24(fp)
 404e964:	10800104 	addi	r2,r2,4
 404e968:	10800017 	ldw	r2,0(r2)
 404e96c:	18800035 	stwio	r2,0(r3)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, message[0]);
 404e970:	e0bff817 	ldw	r2,-32(fp)
 404e974:	10800a17 	ldw	r2,40(r2)
 404e978:	1007883a 	mov	r3,r2
 404e97c:	e0bffa17 	ldw	r2,-24(fp)
 404e980:	10800017 	ldw	r2,0(r2)
 404e984:	18800035 	stwio	r2,0(r3)
    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 404e988:	e0bff817 	ldw	r2,-32(fp)
 404e98c:	10800a17 	ldw	r2,40(r2)
 404e990:	10800204 	addi	r2,r2,8
 404e994:	10800037 	ldwio	r2,0(r2)
        		  & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
 404e998:	1080008c 	andi	r2,r2,2
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, message[0]);
    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 404e99c:	1005d07a 	srai	r2,r2,1
 404e9a0:	e0bff915 	stw	r2,-28(fp)
        		  & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
        if (dev->tx_cb)
 404e9a4:	e0bff817 	ldw	r2,-32(fp)
 404e9a8:	10800d17 	ldw	r2,52(r2)
 404e9ac:	10001126 	beq	r2,zero,404e9f4 <altera_avalon_mailbox_simple_tx_isr+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 404e9b0:	0005303a 	rdctl	r2,status
 404e9b4:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 404e9b8:	e0fffd17 	ldw	r3,-12(fp)
 404e9bc:	00bfff84 	movi	r2,-2
 404e9c0:	1884703a 	and	r2,r3,r2
 404e9c4:	1001703a 	wrctl	status,r2
  
  return context;
 404e9c8:	e0bffd17 	ldw	r2,-12(fp)
        {
            cpu_sr = alt_irq_disable_all();
 404e9cc:	e0bffc15 	stw	r2,-16(fp)
  	        (dev->tx_cb)(message, status);
 404e9d0:	e0bff817 	ldw	r2,-32(fp)
 404e9d4:	10800d17 	ldw	r2,52(r2)
 404e9d8:	e17ff917 	ldw	r5,-28(fp)
 404e9dc:	e13ffa17 	ldw	r4,-24(fp)
 404e9e0:	103ee83a 	callr	r2
 404e9e4:	e0bffc17 	ldw	r2,-16(fp)
 404e9e8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 404e9ec:	e0bffe17 	ldw	r2,-8(fp)
 404e9f0:	1001703a 	wrctl	status,r2
            alt_irq_enable_all(cpu_sr);
        }
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
 404e9f4:	e0bff817 	ldw	r2,-32(fp)
 404e9f8:	10001015 	stw	zero,64(r2)
        dev->lock = 0;
 404e9fc:	e0bff817 	ldw	r2,-32(fp)
 404ea00:	10001105 	stb	zero,68(r2)
    }
}
 404ea04:	0001883a 	nop
 404ea08:	e037883a 	mov	sp,fp
 404ea0c:	dfc00117 	ldw	ra,4(sp)
 404ea10:	df000017 	ldw	fp,0(sp)
 404ea14:	dec00204 	addi	sp,sp,8
 404ea18:	f800283a 	ret

0404ea1c <altera_avalon_mailbox_simple_rx_isr>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_rx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_rx_isr(void *context, alt_u32 id)
#endif
{
 404ea1c:	defff704 	addi	sp,sp,-36
 404ea20:	dfc00815 	stw	ra,32(sp)
 404ea24:	df000715 	stw	fp,28(sp)
 404ea28:	df000704 	addi	fp,sp,28
 404ea2c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
 404ea30:	e0bfff17 	ldw	r2,-4(fp)
 404ea34:	e0bff915 	stw	r2,-28(fp)
    alt_irq_context cpu_sr;
    alt_u32 inbox[2];

    inbox[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
 404ea38:	e0bff917 	ldw	r2,-28(fp)
 404ea3c:	10800a17 	ldw	r2,40(r2)
 404ea40:	10800104 	addi	r2,r2,4
 404ea44:	10800037 	ldwio	r2,0(r2)
 404ea48:	e0bffe15 	stw	r2,-8(fp)
    inbox[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
 404ea4c:	e0bff917 	ldw	r2,-28(fp)
 404ea50:	10800a17 	ldw	r2,40(r2)
 404ea54:	10800037 	ldwio	r2,0(r2)
 404ea58:	e0bffd15 	stw	r2,-12(fp)

    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
    if (dev->rx_cb)
 404ea5c:	e0bff917 	ldw	r2,-28(fp)
 404ea60:	10800e17 	ldw	r2,56(r2)
 404ea64:	10001126 	beq	r2,zero,404eaac <altera_avalon_mailbox_simple_rx_isr+0x90>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 404ea68:	0005303a 	rdctl	r2,status
 404ea6c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 404ea70:	e0fffb17 	ldw	r3,-20(fp)
 404ea74:	00bfff84 	movi	r2,-2
 404ea78:	1884703a 	and	r2,r3,r2
 404ea7c:	1001703a 	wrctl	status,r2
  
  return context;
 404ea80:	e0bffb17 	ldw	r2,-20(fp)
    {
        cpu_sr = alt_irq_disable_all();
 404ea84:	e0bffa15 	stw	r2,-24(fp)
        (dev->rx_cb)(inbox);
 404ea88:	e0bff917 	ldw	r2,-28(fp)
 404ea8c:	10800e17 	ldw	r2,56(r2)
 404ea90:	e0fffd04 	addi	r3,fp,-12
 404ea94:	1809883a 	mov	r4,r3
 404ea98:	103ee83a 	callr	r2
 404ea9c:	e0bffa17 	ldw	r2,-24(fp)
 404eaa0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 404eaa4:	e0bffc17 	ldw	r2,-16(fp)
 404eaa8:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }
}
 404eaac:	0001883a 	nop
 404eab0:	e037883a 	mov	sp,fp
 404eab4:	dfc00117 	ldw	ra,4(sp)
 404eab8:	df000017 	ldw	fp,0(sp)
 404eabc:	dec00204 	addi	sp,sp,8
 404eac0:	f800283a 	ret

0404eac4 <altera_avalon_mailbox_simple_init>:
 * Altera avalon mailbox init
 * Initialize mailbox device and identify sender/receiver mailbox
 */
void altera_avalon_mailbox_simple_init (altera_avalon_mailbox_dev *dev,
		                               int intr_id, int irq)
{
 404eac4:	defffb04 	addi	sp,sp,-20
 404eac8:	dfc00415 	stw	ra,16(sp)
 404eacc:	df000315 	stw	fp,12(sp)
 404ead0:	df000304 	addi	fp,sp,12
 404ead4:	e13ffd15 	stw	r4,-12(fp)
 404ead8:	e17ffe15 	stw	r5,-8(fp)
 404eadc:	e1bfff15 	stw	r6,-4(fp)
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mailbox_simple_list);
 404eae0:	d1600e04 	addi	r5,gp,-32712
 404eae4:	e13ffd17 	ldw	r4,-12(fp)
 404eae8:	404f3fc0 	call	404f3fc <alt_dev_llist_insert>
    
    dev->mailbox_irq    = irq;
 404eaec:	e0ffff17 	ldw	r3,-4(fp)
 404eaf0:	e0bffd17 	ldw	r2,-12(fp)
 404eaf4:	10c00b15 	stw	r3,44(r2)
    dev->mailbox_intr_ctrl_id = intr_id;
 404eaf8:	e0fffe17 	ldw	r3,-8(fp)
 404eafc:	e0bffd17 	ldw	r2,-12(fp)
 404eb00:	10c00c15 	stw	r3,48(r2)
    dev->rx_cb = NULL;
 404eb04:	e0bffd17 	ldw	r2,-12(fp)
 404eb08:	10000e15 	stw	zero,56(r2)
    dev->tx_cb = NULL;
 404eb0c:	e0bffd17 	ldw	r2,-12(fp)
 404eb10:	10000d15 	stw	zero,52(r2)
    dev->mbox_msg = NULL;
 404eb14:	e0bffd17 	ldw	r2,-12(fp)
 404eb18:	10001015 	stw	zero,64(r2)
    
    ALT_SEM_CREATE (&dev->write_lock, 1);

    altera_avalon_mailbox_identify(dev);
 404eb1c:	e13ffd17 	ldw	r4,-12(fp)
 404eb20:	404e7dc0 	call	404e7dc <altera_avalon_mailbox_identify>
}
 404eb24:	0001883a 	nop
 404eb28:	e037883a 	mov	sp,fp
 404eb2c:	dfc00117 	ldw	ra,4(sp)
 404eb30:	df000017 	ldw	fp,0(sp)
 404eb34:	dec00204 	addi	sp,sp,8
 404eb38:	f800283a 	ret

0404eb3c <altera_avalon_mailbox_open>:
 * Search the list of registered mailboxes for one with the supplied name.
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
altera_avalon_mailbox_dev* altera_avalon_mailbox_open (const char *name,
		altera_mailbox_tx_cb tx_callback, altera_mailbox_rx_cb rx_callback)
{
 404eb3c:	defff804 	addi	sp,sp,-32
 404eb40:	dfc00715 	stw	ra,28(sp)
 404eb44:	df000615 	stw	fp,24(sp)
 404eb48:	df000604 	addi	fp,sp,24
 404eb4c:	e13ffd15 	stw	r4,-12(fp)
 404eb50:	e17ffe15 	stw	r5,-8(fp)
 404eb54:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_mailbox_dev *dev;
    alt_u32 data;

    /* Find requested device */
    dev = (altera_avalon_mailbox_dev*) alt_find_dev (name, &alt_mailbox_simple_list);
 404eb58:	d1600e04 	addi	r5,gp,-32712
 404eb5c:	e13ffd17 	ldw	r4,-12(fp)
 404eb60:	404f5600 	call	404f560 <alt_find_dev>
 404eb64:	e0bffb15 	stw	r2,-20(fp)
    if (dev == NULL)
 404eb68:	e0bffb17 	ldw	r2,-20(fp)
 404eb6c:	1000021e 	bne	r2,zero,404eb78 <altera_avalon_mailbox_open+0x3c>
    {
        return NULL;
 404eb70:	0005883a 	mov	r2,zero
 404eb74:	00006506 	br	404ed0c <altera_avalon_mailbox_open+0x1d0>
    }

    /* Mask mailbox interrupt before ISR is being registered. */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
 404eb78:	e0bffb17 	ldw	r2,-20(fp)
 404eb7c:	10800a17 	ldw	r2,40(r2)
 404eb80:	10800304 	addi	r2,r2,12
 404eb84:	10800037 	ldwio	r2,0(r2)
 404eb88:	e0bffc15 	stw	r2,-16(fp)
    if (dev->mbox_type == MBOX_TX) {
 404eb8c:	e0bffb17 	ldw	r2,-20(fp)
 404eb90:	10800f17 	ldw	r2,60(r2)
 404eb94:	1000081e 	bne	r2,zero,404ebb8 <altera_avalon_mailbox_open+0x7c>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
 404eb98:	e0bffb17 	ldw	r2,-20(fp)
 404eb9c:	10800a17 	ldw	r2,40(r2)
 404eba0:	10800304 	addi	r2,r2,12
 404eba4:	1009883a 	mov	r4,r2
 404eba8:	e0fffc17 	ldw	r3,-16(fp)
 404ebac:	00bfff44 	movi	r2,-3
 404ebb0:	1884703a 	and	r2,r3,r2
 404ebb4:	20800035 	stwio	r2,0(r4)
            (data & ~(ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK)));
    }
    if (dev->mbox_type == MBOX_RX) {
 404ebb8:	e0bffb17 	ldw	r2,-20(fp)
 404ebbc:	10800f17 	ldw	r2,60(r2)
 404ebc0:	10800058 	cmpnei	r2,r2,1
 404ebc4:	1000081e 	bne	r2,zero,404ebe8 <altera_avalon_mailbox_open+0xac>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
 404ebc8:	e0bffb17 	ldw	r2,-20(fp)
 404ebcc:	10800a17 	ldw	r2,40(r2)
 404ebd0:	10800304 	addi	r2,r2,12
 404ebd4:	1009883a 	mov	r4,r2
 404ebd8:	e0fffc17 	ldw	r3,-16(fp)
 404ebdc:	00bfff84 	movi	r2,-2
 404ebe0:	1884703a 	and	r2,r3,r2
 404ebe4:	20800035 	stwio	r2,0(r4)
    }

    /* If IRQ not connected, return device pointer without ISR register,
     * in polling mode.
     */
    if (dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED)
 404ebe8:	e0bffb17 	ldw	r2,-20(fp)
 404ebec:	10800b17 	ldw	r2,44(r2)
 404ebf0:	10bfffd8 	cmpnei	r2,r2,-1
 404ebf4:	1000021e 	bne	r2,zero,404ec00 <altera_avalon_mailbox_open+0xc4>
        return dev;
 404ebf8:	e0bffb17 	ldw	r2,-20(fp)
 404ebfc:	00004306 	br	404ed0c <altera_avalon_mailbox_open+0x1d0>

    /* For IRQ connected case */

    if ((tx_callback == NULL) && (rx_callback == NULL))
 404ec00:	e0bffe17 	ldw	r2,-8(fp)
 404ec04:	1000041e 	bne	r2,zero,404ec18 <altera_avalon_mailbox_open+0xdc>
 404ec08:	e0bfff17 	ldw	r2,-4(fp)
 404ec0c:	1000021e 	bne	r2,zero,404ec18 <altera_avalon_mailbox_open+0xdc>
    {
    /* No callback, polling mode */
        return dev;
 404ec10:	e0bffb17 	ldw	r2,-20(fp)
 404ec14:	00003d06 	br	404ed0c <altera_avalon_mailbox_open+0x1d0>
    }

    /* Ensure user correctly use the mailbox
     * Return - Null if wrong direction set
     */
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
 404ec18:	e0bffb17 	ldw	r2,-20(fp)
 404ec1c:	10800f17 	ldw	r2,60(r2)
 404ec20:	1000021e 	bne	r2,zero,404ec2c <altera_avalon_mailbox_open+0xf0>
 404ec24:	e0bfff17 	ldw	r2,-4(fp)
 404ec28:	1000061e 	bne	r2,zero,404ec44 <altera_avalon_mailbox_open+0x108>
	    ((dev->mbox_type == MBOX_RX) && (tx_callback != NULL)))
 404ec2c:	e0bffb17 	ldw	r2,-20(fp)
 404ec30:	10800f17 	ldw	r2,60(r2)
    }

    /* Ensure user correctly use the mailbox
     * Return - Null if wrong direction set
     */
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
 404ec34:	10800058 	cmpnei	r2,r2,1
 404ec38:	1000041e 	bne	r2,zero,404ec4c <altera_avalon_mailbox_open+0x110>
	    ((dev->mbox_type == MBOX_RX) && (tx_callback != NULL)))
 404ec3c:	e0bffe17 	ldw	r2,-8(fp)
 404ec40:	10000226 	beq	r2,zero,404ec4c <altera_avalon_mailbox_open+0x110>
  	  /* Invalid callback  */
        return NULL;
 404ec44:	0005883a 	mov	r2,zero
 404ec48:	00003006 	br	404ed0c <altera_avalon_mailbox_open+0x1d0>

    /* IRQ is valid register callback
     * to current mailbox device
     */
    dev->tx_cb  = tx_callback;
 404ec4c:	e0bffb17 	ldw	r2,-20(fp)
 404ec50:	e0fffe17 	ldw	r3,-8(fp)
 404ec54:	10c00d15 	stw	r3,52(r2)
    dev->rx_cb  = rx_callback;
 404ec58:	e0bffb17 	ldw	r2,-20(fp)
 404ec5c:	e0ffff17 	ldw	r3,-4(fp)
 404ec60:	10c00e15 	stw	r3,56(r2)

    /* Register Mailbox's ISR */
    if (dev->mbox_type == MBOX_TX)
 404ec64:	e0bffb17 	ldw	r2,-20(fp)
 404ec68:	10800f17 	ldw	r2,60(r2)
 404ec6c:	10000b1e 	bne	r2,zero,404ec9c <altera_avalon_mailbox_open+0x160>
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_tx_isr,
 404ec70:	e0bffb17 	ldw	r2,-20(fp)
 404ec74:	10c00c17 	ldw	r3,48(r2)
 404ec78:	e0bffb17 	ldw	r2,-20(fp)
 404ec7c:	10800b17 	ldw	r2,44(r2)
 404ec80:	d8000015 	stw	zero,0(sp)
 404ec84:	e1fffb17 	ldw	r7,-20(fp)
 404ec88:	01810174 	movhi	r6,1029
 404ec8c:	31ba3904 	addi	r6,r6,-5916
 404ec90:	100b883a 	mov	r5,r2
 404ec94:	1809883a 	mov	r4,r3
 404ec98:	404d2980 	call	404d298 <alt_ic_isr_register>
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_tx_isr);
    #endif
    }
  
    if (dev->mbox_type == MBOX_RX)
 404ec9c:	e0bffb17 	ldw	r2,-20(fp)
 404eca0:	10800f17 	ldw	r2,60(r2)
 404eca4:	10800058 	cmpnei	r2,r2,1
 404eca8:	1000171e 	bne	r2,zero,404ed08 <altera_avalon_mailbox_open+0x1cc>
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_rx_isr,
 404ecac:	e0bffb17 	ldw	r2,-20(fp)
 404ecb0:	10c00c17 	ldw	r3,48(r2)
 404ecb4:	e0bffb17 	ldw	r2,-20(fp)
 404ecb8:	10800b17 	ldw	r2,44(r2)
 404ecbc:	d8000015 	stw	zero,0(sp)
 404ecc0:	e1fffb17 	ldw	r7,-20(fp)
 404ecc4:	01810174 	movhi	r6,1029
 404ecc8:	31ba8704 	addi	r6,r6,-5604
 404eccc:	100b883a 	mov	r5,r2
 404ecd0:	1809883a 	mov	r4,r3
 404ecd4:	404d2980 	call	404d298 <alt_ic_isr_register>
                            dev, NULL);
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_rx_isr);
    #endif
        /* Enable Receiver interrupt to listen mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
 404ecd8:	e0bffb17 	ldw	r2,-20(fp)
 404ecdc:	10800a17 	ldw	r2,40(r2)
 404ece0:	10800304 	addi	r2,r2,12
 404ece4:	10800037 	ldwio	r2,0(r2)
 404ece8:	10800054 	ori	r2,r2,1
 404ecec:	e0bffc15 	stw	r2,-16(fp)
  	             (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 404ecf0:	e0bffb17 	ldw	r2,-20(fp)
 404ecf4:	10800a17 	ldw	r2,40(r2)
 404ecf8:	10800304 	addi	r2,r2,12
 404ecfc:	1007883a 	mov	r3,r2
 404ed00:	e0bffc17 	ldw	r2,-16(fp)
 404ed04:	18800035 	stwio	r2,0(r3)
    }
    return dev;
 404ed08:	e0bffb17 	ldw	r2,-20(fp)
}
 404ed0c:	e037883a 	mov	sp,fp
 404ed10:	dfc00117 	ldw	ra,4(sp)
 404ed14:	df000017 	ldw	fp,0(sp)
 404ed18:	dec00204 	addi	sp,sp,8
 404ed1c:	f800283a 	ret

0404ed20 <altera_avalon_mailbox_close>:
/*
 * altera_avalon_mailbox_close
 * Disable mailbox interrupt and irq
 */
void altera_avalon_mailbox_close (altera_avalon_mailbox_dev *dev)
{
 404ed20:	defffb04 	addi	sp,sp,-20
 404ed24:	dfc00415 	stw	ra,16(sp)
 404ed28:	df000315 	stw	fp,12(sp)
 404ed2c:	df000304 	addi	fp,sp,12
 404ed30:	e13fff15 	stw	r4,-4(fp)
    alt_u32 data;
    if ((dev != NULL) && (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED))
 404ed34:	e0bfff17 	ldw	r2,-4(fp)
 404ed38:	10003926 	beq	r2,zero,404ee20 <altera_avalon_mailbox_close+0x100>
 404ed3c:	e0bfff17 	ldw	r2,-4(fp)
 404ed40:	10800b17 	ldw	r2,44(r2)
 404ed44:	10bfffe0 	cmpeqi	r2,r2,-1
 404ed48:	1000351e 	bne	r2,zero,404ee20 <altera_avalon_mailbox_close+0x100>
    {
        /* Mask interrupt */
        if (dev->mbox_type == MBOX_TX)
 404ed4c:	e0bfff17 	ldw	r2,-4(fp)
 404ed50:	10800f17 	ldw	r2,60(r2)
 404ed54:	10000e1e 	bne	r2,zero,404ed90 <altera_avalon_mailbox_close+0x70>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 404ed58:	e0bfff17 	ldw	r2,-4(fp)
 404ed5c:	10800a17 	ldw	r2,40(r2)
 404ed60:	10800304 	addi	r2,r2,12
 404ed64:	10800037 	ldwio	r2,0(r2)
 404ed68:	1007883a 	mov	r3,r2
 404ed6c:	00bfff44 	movi	r2,-3
 404ed70:	1884703a 	and	r2,r3,r2
 404ed74:	e0bffe15 	stw	r2,-8(fp)
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 404ed78:	e0bfff17 	ldw	r2,-4(fp)
 404ed7c:	10800a17 	ldw	r2,40(r2)
 404ed80:	10800304 	addi	r2,r2,12
 404ed84:	1007883a 	mov	r3,r2
 404ed88:	e0bffe17 	ldw	r2,-8(fp)
 404ed8c:	18800035 	stwio	r2,0(r3)
        }
        if (dev->mbox_type == MBOX_RX)
 404ed90:	e0bfff17 	ldw	r2,-4(fp)
 404ed94:	10800f17 	ldw	r2,60(r2)
 404ed98:	10800058 	cmpnei	r2,r2,1
 404ed9c:	10000e1e 	bne	r2,zero,404edd8 <altera_avalon_mailbox_close+0xb8>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 404eda0:	e0bfff17 	ldw	r2,-4(fp)
 404eda4:	10800a17 	ldw	r2,40(r2)
 404eda8:	10800304 	addi	r2,r2,12
 404edac:	10800037 	ldwio	r2,0(r2)
 404edb0:	1007883a 	mov	r3,r2
 404edb4:	00bfff84 	movi	r2,-2
 404edb8:	1884703a 	and	r2,r3,r2
 404edbc:	e0bffe15 	stw	r2,-8(fp)
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 404edc0:	e0bfff17 	ldw	r2,-4(fp)
 404edc4:	10800a17 	ldw	r2,40(r2)
 404edc8:	10800304 	addi	r2,r2,12
 404edcc:	1007883a 	mov	r3,r2
 404edd0:	e0bffe17 	ldw	r2,-8(fp)
 404edd4:	18800035 	stwio	r2,0(r3)
        }
  
        /* De-register mailbox irq) */
        if (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED)
 404edd8:	e0bfff17 	ldw	r2,-4(fp)
 404eddc:	10800b17 	ldw	r2,44(r2)
 404ede0:	10bfffe0 	cmpeqi	r2,r2,-1
 404ede4:	10000a1e 	bne	r2,zero,404ee10 <altera_avalon_mailbox_close+0xf0>
        {
        #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
            alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, NULL,
 404ede8:	e0bfff17 	ldw	r2,-4(fp)
 404edec:	10c00c17 	ldw	r3,48(r2)
 404edf0:	e0bfff17 	ldw	r2,-4(fp)
 404edf4:	10800b17 	ldw	r2,44(r2)
 404edf8:	d8000015 	stw	zero,0(sp)
 404edfc:	e1ffff17 	ldw	r7,-4(fp)
 404ee00:	000d883a 	mov	r6,zero
 404ee04:	100b883a 	mov	r5,r2
 404ee08:	1809883a 	mov	r4,r3
 404ee0c:	404d2980 	call	404d298 <alt_ic_isr_register>
        #else
            alt_irq_register(dev->mailbox_irq, dev, NULL);
        #endif
        }
        /* De-registering callback to mailbox */
        dev->tx_cb  = NULL;
 404ee10:	e0bfff17 	ldw	r2,-4(fp)
 404ee14:	10000d15 	stw	zero,52(r2)
        dev->rx_cb  = NULL;
 404ee18:	e0bfff17 	ldw	r2,-4(fp)
 404ee1c:	10000e15 	stw	zero,56(r2)
    }
}
 404ee20:	0001883a 	nop
 404ee24:	e037883a 	mov	sp,fp
 404ee28:	dfc00117 	ldw	ra,4(sp)
 404ee2c:	df000017 	ldw	fp,0(sp)
 404ee30:	dec00204 	addi	sp,sp,8
 404ee34:	f800283a 	ret

0404ee38 <altera_avalon_mailbox_status>:
 *   Return 0 when mailbox is empty or no pending message
 *   Return 1 when mailbox space is full or there is a message pending
 */

alt_u32 altera_avalon_mailbox_status (altera_avalon_mailbox_dev *dev)
{
 404ee38:	defffd04 	addi	sp,sp,-12
 404ee3c:	df000215 	stw	fp,8(sp)
 404ee40:	df000204 	addi	fp,sp,8
 404ee44:	e13fff15 	stw	r4,-4(fp)
    alt_u32 mailbox_sts = 0;
 404ee48:	e03ffe15 	stw	zero,-8(fp)

    mailbox_sts = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_STS_OFST) & ALTERA_AVALON_MAILBOX_SIMPLE_STS_MSK);
 404ee4c:	e0bfff17 	ldw	r2,-4(fp)
 404ee50:	10800a17 	ldw	r2,40(r2)
 404ee54:	10800204 	addi	r2,r2,8
 404ee58:	10800037 	ldwio	r2,0(r2)
 404ee5c:	108000cc 	andi	r2,r2,3
 404ee60:	e0bffe15 	stw	r2,-8(fp)

    if (dev->mbox_type == MBOX_TX)
 404ee64:	e0bfff17 	ldw	r2,-4(fp)
 404ee68:	10800f17 	ldw	r2,60(r2)
 404ee6c:	1000041e 	bne	r2,zero,404ee80 <altera_avalon_mailbox_status+0x48>
        mailbox_sts = (mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
 404ee70:	e0bffe17 	ldw	r2,-8(fp)
 404ee74:	1080008c 	andi	r2,r2,2
 404ee78:	1004d07a 	srli	r2,r2,1
 404ee7c:	e0bffe15 	stw	r2,-8(fp)

    if (dev->mbox_type == MBOX_RX)
 404ee80:	e0bfff17 	ldw	r2,-4(fp)
 404ee84:	10800f17 	ldw	r2,60(r2)
 404ee88:	10800058 	cmpnei	r2,r2,1
 404ee8c:	1000031e 	bne	r2,zero,404ee9c <altera_avalon_mailbox_status+0x64>
        mailbox_sts = mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_PENDING_MSK;
 404ee90:	e0bffe17 	ldw	r2,-8(fp)
 404ee94:	1080004c 	andi	r2,r2,1
 404ee98:	e0bffe15 	stw	r2,-8(fp)

    return mailbox_sts;
 404ee9c:	e0bffe17 	ldw	r2,-8(fp)
}
 404eea0:	e037883a 	mov	sp,fp
 404eea4:	df000017 	ldw	fp,0(sp)
 404eea8:	dec00104 	addi	sp,sp,4
 404eeac:	f800283a 	ret

0404eeb0 <altera_avalon_mailbox_send>:
 * For polling mode, '0' timeout value for infinite polling
 * otherwise timeout when expired
 */
int altera_avalon_mailbox_send
(altera_avalon_mailbox_dev *dev, void *message, int timeout, EventType event)
{
 404eeb0:	defff704 	addi	sp,sp,-36
 404eeb4:	dfc00815 	stw	ra,32(sp)
 404eeb8:	df000715 	stw	fp,28(sp)
 404eebc:	df000704 	addi	fp,sp,28
 404eec0:	e13ffc15 	stw	r4,-16(fp)
 404eec4:	e17ffd15 	stw	r5,-12(fp)
 404eec8:	e1bffe15 	stw	r6,-8(fp)
 404eecc:	e1ffff15 	stw	r7,-4(fp)
    int status = 0;
 404eed0:	e03ff915 	stw	zero,-28(fp)
     * Obtain the "write_lock"semaphore to ensures 
     * that writing to the device is thread-safe in multi-thread enviroment
     */
    ALT_SEM_PEND (dev->write_lock, 0);

    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 404eed4:	e0bffc17 	ldw	r2,-16(fp)
 404eed8:	10801103 	ldbu	r2,68(r2)
 404eedc:	10803fcc 	andi	r2,r2,255
 404eee0:	1000061e 	bne	r2,zero,404eefc <altera_avalon_mailbox_send+0x4c>
 404eee4:	e0bffc17 	ldw	r2,-16(fp)
 404eee8:	10800a17 	ldw	r2,40(r2)
 404eeec:	10800204 	addi	r2,r2,8
 404eef0:	10800037 	ldwio	r2,0(r2)
    		          & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK))
 404eef4:	1080008c 	andi	r2,r2,2
     * Obtain the "write_lock"semaphore to ensures 
     * that writing to the device is thread-safe in multi-thread enviroment
     */
    ALT_SEM_PEND (dev->write_lock, 0);

    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 404eef8:	10000226 	beq	r2,zero,404ef04 <altera_avalon_mailbox_send+0x54>
    		          & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK))
    {
    	/* dev is lock or no free space to send */
    	return -1;
 404eefc:	00bfffc4 	movi	r2,-1
 404ef00:	00003a06 	br	404efec <altera_avalon_mailbox_send+0x13c>
    }
    else
    {
        dev->mbox_msg = message;
 404ef04:	e0bffc17 	ldw	r2,-16(fp)
 404ef08:	e0fffd17 	ldw	r3,-12(fp)
 404ef0c:	10c01015 	stw	r3,64(r2)
        dev->lock = 1;
 404ef10:	e0bffc17 	ldw	r2,-16(fp)
 404ef14:	00c00044 	movi	r3,1
 404ef18:	10c01105 	stb	r3,68(r2)
     */
    ALT_SEM_POST (dev->write_lock);



    if ((dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED) || (event==POLL))
 404ef1c:	e0bffc17 	ldw	r2,-16(fp)
 404ef20:	10800b17 	ldw	r2,44(r2)
 404ef24:	10bfffe0 	cmpeqi	r2,r2,-1
 404ef28:	1000031e 	bne	r2,zero,404ef38 <altera_avalon_mailbox_send+0x88>
 404ef2c:	e0bfff17 	ldw	r2,-4(fp)
 404ef30:	10800058 	cmpnei	r2,r2,1
 404ef34:	1000201e 	bne	r2,zero,404efb8 <altera_avalon_mailbox_send+0x108>
    {
        /* Polling mode */
        if (timeout ==0)
 404ef38:	e0bffe17 	ldw	r2,-8(fp)
 404ef3c:	1000061e 	bne	r2,zero,404ef58 <altera_avalon_mailbox_send+0xa8>
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
 404ef40:	e13ffc17 	ldw	r4,-16(fp)
 404ef44:	404ee380 	call	404ee38 <altera_avalon_mailbox_status>
 404ef48:	e0bffb15 	stw	r2,-20(fp)
            } while (mbox_status);
 404ef4c:	e0bffb17 	ldw	r2,-20(fp)
 404ef50:	103ffb1e 	bne	r2,zero,404ef40 <__alt_data_end+0xfffe4740>
 404ef54:	00000e06 	br	404ef90 <altera_avalon_mailbox_send+0xe0>
        } else
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
 404ef58:	e13ffc17 	ldw	r4,-16(fp)
 404ef5c:	404ee380 	call	404ee38 <altera_avalon_mailbox_status>
 404ef60:	e0bffb15 	stw	r2,-20(fp)
                timeout--;
 404ef64:	e0bffe17 	ldw	r2,-8(fp)
 404ef68:	10bfffc4 	addi	r2,r2,-1
 404ef6c:	e0bffe15 	stw	r2,-8(fp)
            } while (mbox_status && (timeout != 0));
 404ef70:	e0bffb17 	ldw	r2,-20(fp)
 404ef74:	10000226 	beq	r2,zero,404ef80 <altera_avalon_mailbox_send+0xd0>
 404ef78:	e0bffe17 	ldw	r2,-8(fp)
 404ef7c:	103ff61e 	bne	r2,zero,404ef58 <__alt_data_end+0xfffe4758>
            if (timeout == 0)
 404ef80:	e0bffe17 	ldw	r2,-8(fp)
 404ef84:	1000021e 	bne	r2,zero,404ef90 <altera_avalon_mailbox_send+0xe0>
            {    /* Timeout occur or fail sending */
                return -ETIME;
 404ef88:	00bff084 	movi	r2,-62
 404ef8c:	00001706 	br	404efec <altera_avalon_mailbox_send+0x13c>
            }
        }
        status = altera_avalon_mailbox_post (dev, message);
 404ef90:	e17ffd17 	ldw	r5,-12(fp)
 404ef94:	e13ffc17 	ldw	r4,-16(fp)
 404ef98:	404e86c0 	call	404e86c <altera_avalon_mailbox_post>
 404ef9c:	e0bff915 	stw	r2,-28(fp)
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
 404efa0:	e0bffc17 	ldw	r2,-16(fp)
 404efa4:	10001015 	stw	zero,64(r2)
        /* Release lock when message posted */
        dev->lock =0;
 404efa8:	e0bffc17 	ldw	r2,-16(fp)
 404efac:	10001105 	stb	zero,68(r2)
        return status;
 404efb0:	e0bff917 	ldw	r2,-28(fp)
 404efb4:	00000d06 	br	404efec <altera_avalon_mailbox_send+0x13c>
    } else
    {
        /* Enable Sender interrupt */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
 404efb8:	e0bffc17 	ldw	r2,-16(fp)
 404efbc:	10800a17 	ldw	r2,40(r2)
 404efc0:	10800304 	addi	r2,r2,12
 404efc4:	10800037 	ldwio	r2,0(r2)
 404efc8:	10800094 	ori	r2,r2,2
 404efcc:	e0bffa15 	stw	r2,-24(fp)
                   (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 404efd0:	e0bffc17 	ldw	r2,-16(fp)
 404efd4:	10800a17 	ldw	r2,40(r2)
 404efd8:	10800304 	addi	r2,r2,12
 404efdc:	1007883a 	mov	r3,r2
 404efe0:	e0bffa17 	ldw	r2,-24(fp)
 404efe4:	18800035 	stwio	r2,0(r3)
    }
  return 0;
 404efe8:	0005883a 	mov	r2,zero
}
 404efec:	e037883a 	mov	sp,fp
 404eff0:	dfc00117 	ldw	ra,4(sp)
 404eff4:	df000017 	ldw	fp,0(sp)
 404eff8:	dec00204 	addi	sp,sp,8
 404effc:	f800283a 	ret

0404f000 <altera_avalon_mailbox_retrieve_poll>:
 * If a message is available in the mailbox return it otherwise return NULL
 * This function is blocking
 *
 */
int altera_avalon_mailbox_retrieve_poll (altera_avalon_mailbox_dev *dev, alt_u32 *message, alt_u32 timeout)
{
 404f000:	defff904 	addi	sp,sp,-28
 404f004:	dfc00615 	stw	ra,24(sp)
 404f008:	df000515 	stw	fp,20(sp)
 404f00c:	df000504 	addi	fp,sp,20
 404f010:	e13ffd15 	stw	r4,-12(fp)
 404f014:	e17ffe15 	stw	r5,-8(fp)
 404f018:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 status = 0;
 404f01c:	e03ffb15 	stw	zero,-20(fp)
    alt_u32 data;

    if (dev != NULL && message != NULL)
 404f020:	e0bffd17 	ldw	r2,-12(fp)
 404f024:	10003a26 	beq	r2,zero,404f110 <altera_avalon_mailbox_retrieve_poll+0x110>
 404f028:	e0bffe17 	ldw	r2,-8(fp)
 404f02c:	10003826 	beq	r2,zero,404f110 <altera_avalon_mailbox_retrieve_poll+0x110>
    {
        /* Mask receiver mailbox interrupt when in polling mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
 404f030:	e0bffd17 	ldw	r2,-12(fp)
 404f034:	10800a17 	ldw	r2,40(r2)
 404f038:	10800304 	addi	r2,r2,12
 404f03c:	10800037 	ldwio	r2,0(r2)
 404f040:	e0bffc15 	stw	r2,-16(fp)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST,
 404f044:	e0bffd17 	ldw	r2,-12(fp)
 404f048:	10800a17 	ldw	r2,40(r2)
 404f04c:	10800304 	addi	r2,r2,12
 404f050:	1009883a 	mov	r4,r2
 404f054:	e0fffc17 	ldw	r3,-16(fp)
 404f058:	00bfff84 	movi	r2,-2
 404f05c:	1884703a 	and	r2,r3,r2
 404f060:	20800035 	stwio	r2,0(r4)
            (data & (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK)));


        /* If timeout is '0', poll till message availabe in mailbox */
        if (timeout == 0)
 404f064:	e0bfff17 	ldw	r2,-4(fp)
 404f068:	1000061e 	bne	r2,zero,404f084 <altera_avalon_mailbox_retrieve_poll+0x84>
        {
            do
            {
                status = altera_avalon_mailbox_status (dev);
 404f06c:	e13ffd17 	ldw	r4,-12(fp)
 404f070:	404ee380 	call	404ee38 <altera_avalon_mailbox_status>
 404f074:	e0bffb15 	stw	r2,-20(fp)
            } while (status == 0);
 404f078:	e0bffb17 	ldw	r2,-20(fp)
 404f07c:	103ffb26 	beq	r2,zero,404f06c <__alt_data_end+0xfffe486c>
 404f080:	00000a06 	br	404f0ac <altera_avalon_mailbox_retrieve_poll+0xac>
        } else
        {
            do
            {
                 status = altera_avalon_mailbox_status (dev);
 404f084:	e13ffd17 	ldw	r4,-12(fp)
 404f088:	404ee380 	call	404ee38 <altera_avalon_mailbox_status>
 404f08c:	e0bffb15 	stw	r2,-20(fp)
                 timeout-- ;
 404f090:	e0bfff17 	ldw	r2,-4(fp)
 404f094:	10bfffc4 	addi	r2,r2,-1
 404f098:	e0bfff15 	stw	r2,-4(fp)
            } while ((status == 0) && timeout);
 404f09c:	e0bffb17 	ldw	r2,-20(fp)
 404f0a0:	1000021e 	bne	r2,zero,404f0ac <altera_avalon_mailbox_retrieve_poll+0xac>
 404f0a4:	e0bfff17 	ldw	r2,-4(fp)
 404f0a8:	103ff61e 	bne	r2,zero,404f084 <__alt_data_end+0xfffe4884>
        }

        /* if timeout, status remain 0 */
        if (status)
 404f0ac:	e0bffb17 	ldw	r2,-20(fp)
 404f0b0:	10000d26 	beq	r2,zero,404f0e8 <altera_avalon_mailbox_retrieve_poll+0xe8>
        {
            message[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
 404f0b4:	e0bffe17 	ldw	r2,-8(fp)
 404f0b8:	10800104 	addi	r2,r2,4
 404f0bc:	e0fffd17 	ldw	r3,-12(fp)
 404f0c0:	18c00a17 	ldw	r3,40(r3)
 404f0c4:	18c00104 	addi	r3,r3,4
 404f0c8:	18c00037 	ldwio	r3,0(r3)
 404f0cc:	10c00015 	stw	r3,0(r2)
            message[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
 404f0d0:	e0bffd17 	ldw	r2,-12(fp)
 404f0d4:	10800a17 	ldw	r2,40(r2)
 404f0d8:	10800037 	ldwio	r2,0(r2)
 404f0dc:	1007883a 	mov	r3,r2
 404f0e0:	e0bffe17 	ldw	r2,-8(fp)
 404f0e4:	10c00015 	stw	r3,0(r2)
        }
        /* Restore original state of interrupt mask */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 404f0e8:	e0bffd17 	ldw	r2,-12(fp)
 404f0ec:	10800a17 	ldw	r2,40(r2)
 404f0f0:	10800304 	addi	r2,r2,12
 404f0f4:	1007883a 	mov	r3,r2
 404f0f8:	e0bffc17 	ldw	r2,-16(fp)
 404f0fc:	18800035 	stwio	r2,0(r3)

        /* Return success on complete retrieve message
         * otherwise timeout and exit with error
         */
        if (status)
 404f100:	e0bffb17 	ldw	r2,-20(fp)
 404f104:	10000226 	beq	r2,zero,404f110 <altera_avalon_mailbox_retrieve_poll+0x110>
          return 0;
 404f108:	0005883a 	mov	r2,zero
 404f10c:	00000606 	br	404f128 <altera_avalon_mailbox_retrieve_poll+0x128>
      }
      /* Invalid Null dev and message */
      message[1] = 0;
 404f110:	e0bffe17 	ldw	r2,-8(fp)
 404f114:	10800104 	addi	r2,r2,4
 404f118:	10000015 	stw	zero,0(r2)
      message[0] = 0;
 404f11c:	e0bffe17 	ldw	r2,-8(fp)
 404f120:	10000015 	stw	zero,0(r2)
      return -EINVAL;
 404f124:	00bffa84 	movi	r2,-22
}
 404f128:	e037883a 	mov	sp,fp
 404f12c:	dfc00117 	ldw	ra,4(sp)
 404f130:	df000017 	ldw	fp,0(sp)
 404f134:	dec00204 	addi	sp,sp,8
 404f138:	f800283a 	ret

0404f13c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 404f13c:	defff504 	addi	sp,sp,-44
 404f140:	df000a15 	stw	fp,40(sp)
 404f144:	df000a04 	addi	fp,sp,40
 404f148:	e13ffc15 	stw	r4,-16(fp)
 404f14c:	e17ffd15 	stw	r5,-12(fp)
 404f150:	e1bffe15 	stw	r6,-8(fp)
 404f154:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 404f158:	e03ff615 	stw	zero,-40(fp)
 404f15c:	d0a70217 	ldw	r2,-25592(gp)
  
  if (alt_ticks_per_second ())
 404f160:	10003c26 	beq	r2,zero,404f254 <alt_alarm_start+0x118>
  {
    if (alarm)
 404f164:	e0bffc17 	ldw	r2,-16(fp)
 404f168:	10003826 	beq	r2,zero,404f24c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 404f16c:	e0bffc17 	ldw	r2,-16(fp)
 404f170:	e0fffe17 	ldw	r3,-8(fp)
 404f174:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 404f178:	e0bffc17 	ldw	r2,-16(fp)
 404f17c:	e0ffff17 	ldw	r3,-4(fp)
 404f180:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 404f184:	0005303a 	rdctl	r2,status
 404f188:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 404f18c:	e0fff917 	ldw	r3,-28(fp)
 404f190:	00bfff84 	movi	r2,-2
 404f194:	1884703a 	and	r2,r3,r2
 404f198:	1001703a 	wrctl	status,r2
  
  return context;
 404f19c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 404f1a0:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 404f1a4:	d0a70317 	ldw	r2,-25588(gp)
      
      current_nticks = alt_nticks();
 404f1a8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 404f1ac:	e0fffd17 	ldw	r3,-12(fp)
 404f1b0:	e0bff617 	ldw	r2,-40(fp)
 404f1b4:	1885883a 	add	r2,r3,r2
 404f1b8:	10c00044 	addi	r3,r2,1
 404f1bc:	e0bffc17 	ldw	r2,-16(fp)
 404f1c0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 404f1c4:	e0bffc17 	ldw	r2,-16(fp)
 404f1c8:	10c00217 	ldw	r3,8(r2)
 404f1cc:	e0bff617 	ldw	r2,-40(fp)
 404f1d0:	1880042e 	bgeu	r3,r2,404f1e4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 404f1d4:	e0bffc17 	ldw	r2,-16(fp)
 404f1d8:	00c00044 	movi	r3,1
 404f1dc:	10c00405 	stb	r3,16(r2)
 404f1e0:	00000206 	br	404f1ec <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 404f1e4:	e0bffc17 	ldw	r2,-16(fp)
 404f1e8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 404f1ec:	e0bffc17 	ldw	r2,-16(fp)
 404f1f0:	d0e01004 	addi	r3,gp,-32704
 404f1f4:	e0fffa15 	stw	r3,-24(fp)
 404f1f8:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 404f1fc:	e0bffb17 	ldw	r2,-20(fp)
 404f200:	e0fffa17 	ldw	r3,-24(fp)
 404f204:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 404f208:	e0bffa17 	ldw	r2,-24(fp)
 404f20c:	10c00017 	ldw	r3,0(r2)
 404f210:	e0bffb17 	ldw	r2,-20(fp)
 404f214:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 404f218:	e0bffa17 	ldw	r2,-24(fp)
 404f21c:	10800017 	ldw	r2,0(r2)
 404f220:	e0fffb17 	ldw	r3,-20(fp)
 404f224:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 404f228:	e0bffa17 	ldw	r2,-24(fp)
 404f22c:	e0fffb17 	ldw	r3,-20(fp)
 404f230:	10c00015 	stw	r3,0(r2)
 404f234:	e0bff817 	ldw	r2,-32(fp)
 404f238:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 404f23c:	e0bff717 	ldw	r2,-36(fp)
 404f240:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 404f244:	0005883a 	mov	r2,zero
 404f248:	00000306 	br	404f258 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 404f24c:	00bffa84 	movi	r2,-22
 404f250:	00000106 	br	404f258 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 404f254:	00bfde84 	movi	r2,-134
  }
}
 404f258:	e037883a 	mov	sp,fp
 404f25c:	df000017 	ldw	fp,0(sp)
 404f260:	dec00104 	addi	sp,sp,4
 404f264:	f800283a 	ret

0404f268 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 404f268:	defffa04 	addi	sp,sp,-24
 404f26c:	dfc00515 	stw	ra,20(sp)
 404f270:	df000415 	stw	fp,16(sp)
 404f274:	df000404 	addi	fp,sp,16
 404f278:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 404f27c:	008000c4 	movi	r2,3
 404f280:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 404f284:	e0fffd17 	ldw	r3,-12(fp)
 404f288:	008003f4 	movhi	r2,15
 404f28c:	10909004 	addi	r2,r2,16960
 404f290:	1885383a 	mul	r2,r3,r2
 404f294:	100b883a 	mov	r5,r2
 404f298:	0100bef4 	movhi	r4,763
 404f29c:	213c2004 	addi	r4,r4,-3968
 404f2a0:	404a9080 	call	404a908 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 404f2a4:	100b883a 	mov	r5,r2
 404f2a8:	01200034 	movhi	r4,32768
 404f2ac:	213fffc4 	addi	r4,r4,-1
 404f2b0:	404a9080 	call	404a908 <__udivsi3>
 404f2b4:	100b883a 	mov	r5,r2
 404f2b8:	e13fff17 	ldw	r4,-4(fp)
 404f2bc:	404a9080 	call	404a908 <__udivsi3>
 404f2c0:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 404f2c4:	e0bffe17 	ldw	r2,-8(fp)
 404f2c8:	10002a26 	beq	r2,zero,404f374 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 404f2cc:	e03ffc15 	stw	zero,-16(fp)
 404f2d0:	00001706 	br	404f330 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 404f2d4:	00a00034 	movhi	r2,32768
 404f2d8:	10bfffc4 	addi	r2,r2,-1
 404f2dc:	10bfffc4 	addi	r2,r2,-1
 404f2e0:	103ffe1e 	bne	r2,zero,404f2dc <__alt_data_end+0xfffe4adc>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 404f2e4:	e0fffd17 	ldw	r3,-12(fp)
 404f2e8:	008003f4 	movhi	r2,15
 404f2ec:	10909004 	addi	r2,r2,16960
 404f2f0:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 404f2f4:	100b883a 	mov	r5,r2
 404f2f8:	0100bef4 	movhi	r4,763
 404f2fc:	213c2004 	addi	r4,r4,-3968
 404f300:	404a9080 	call	404a908 <__udivsi3>
 404f304:	100b883a 	mov	r5,r2
 404f308:	01200034 	movhi	r4,32768
 404f30c:	213fffc4 	addi	r4,r4,-1
 404f310:	404a9080 	call	404a908 <__udivsi3>
 404f314:	1007883a 	mov	r3,r2
 404f318:	e0bfff17 	ldw	r2,-4(fp)
 404f31c:	10c5c83a 	sub	r2,r2,r3
 404f320:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 404f324:	e0bffc17 	ldw	r2,-16(fp)
 404f328:	10800044 	addi	r2,r2,1
 404f32c:	e0bffc15 	stw	r2,-16(fp)
 404f330:	e0fffc17 	ldw	r3,-16(fp)
 404f334:	e0bffe17 	ldw	r2,-8(fp)
 404f338:	18bfe616 	blt	r3,r2,404f2d4 <__alt_data_end+0xfffe4ad4>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 404f33c:	e0fffd17 	ldw	r3,-12(fp)
 404f340:	008003f4 	movhi	r2,15
 404f344:	10909004 	addi	r2,r2,16960
 404f348:	1885383a 	mul	r2,r3,r2
 404f34c:	100b883a 	mov	r5,r2
 404f350:	0100bef4 	movhi	r4,763
 404f354:	213c2004 	addi	r4,r4,-3968
 404f358:	404a9080 	call	404a908 <__udivsi3>
 404f35c:	1007883a 	mov	r3,r2
 404f360:	e0bfff17 	ldw	r2,-4(fp)
 404f364:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 404f368:	10bfffc4 	addi	r2,r2,-1
 404f36c:	103ffe1e 	bne	r2,zero,404f368 <__alt_data_end+0xfffe4b68>
 404f370:	00000d06 	br	404f3a8 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 404f374:	e0fffd17 	ldw	r3,-12(fp)
 404f378:	008003f4 	movhi	r2,15
 404f37c:	10909004 	addi	r2,r2,16960
 404f380:	1885383a 	mul	r2,r3,r2
 404f384:	100b883a 	mov	r5,r2
 404f388:	0100bef4 	movhi	r4,763
 404f38c:	213c2004 	addi	r4,r4,-3968
 404f390:	404a9080 	call	404a908 <__udivsi3>
 404f394:	1007883a 	mov	r3,r2
 404f398:	e0bfff17 	ldw	r2,-4(fp)
 404f39c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 404f3a0:	10bfffc4 	addi	r2,r2,-1
 404f3a4:	00bffe16 	blt	zero,r2,404f3a0 <__alt_data_end+0xfffe4ba0>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 404f3a8:	0005883a 	mov	r2,zero
}
 404f3ac:	e037883a 	mov	sp,fp
 404f3b0:	dfc00117 	ldw	ra,4(sp)
 404f3b4:	df000017 	ldw	fp,0(sp)
 404f3b8:	dec00204 	addi	sp,sp,8
 404f3bc:	f800283a 	ret

0404f3c0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 404f3c0:	defffe04 	addi	sp,sp,-8
 404f3c4:	dfc00115 	stw	ra,4(sp)
 404f3c8:	df000015 	stw	fp,0(sp)
 404f3cc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 404f3d0:	d0a00b17 	ldw	r2,-32724(gp)
 404f3d4:	10000326 	beq	r2,zero,404f3e4 <alt_get_errno+0x24>
 404f3d8:	d0a00b17 	ldw	r2,-32724(gp)
 404f3dc:	103ee83a 	callr	r2
 404f3e0:	00000106 	br	404f3e8 <alt_get_errno+0x28>
 404f3e4:	d0a6fc04 	addi	r2,gp,-25616
}
 404f3e8:	e037883a 	mov	sp,fp
 404f3ec:	dfc00117 	ldw	ra,4(sp)
 404f3f0:	df000017 	ldw	fp,0(sp)
 404f3f4:	dec00204 	addi	sp,sp,8
 404f3f8:	f800283a 	ret

0404f3fc <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 404f3fc:	defffa04 	addi	sp,sp,-24
 404f400:	dfc00515 	stw	ra,20(sp)
 404f404:	df000415 	stw	fp,16(sp)
 404f408:	df000404 	addi	fp,sp,16
 404f40c:	e13ffe15 	stw	r4,-8(fp)
 404f410:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 404f414:	e0bffe17 	ldw	r2,-8(fp)
 404f418:	10000326 	beq	r2,zero,404f428 <alt_dev_llist_insert+0x2c>
 404f41c:	e0bffe17 	ldw	r2,-8(fp)
 404f420:	10800217 	ldw	r2,8(r2)
 404f424:	1000061e 	bne	r2,zero,404f440 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 404f428:	404f3c00 	call	404f3c0 <alt_get_errno>
 404f42c:	1007883a 	mov	r3,r2
 404f430:	00800584 	movi	r2,22
 404f434:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 404f438:	00bffa84 	movi	r2,-22
 404f43c:	00001306 	br	404f48c <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 404f440:	e0bffe17 	ldw	r2,-8(fp)
 404f444:	e0ffff17 	ldw	r3,-4(fp)
 404f448:	e0fffc15 	stw	r3,-16(fp)
 404f44c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 404f450:	e0bffd17 	ldw	r2,-12(fp)
 404f454:	e0fffc17 	ldw	r3,-16(fp)
 404f458:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 404f45c:	e0bffc17 	ldw	r2,-16(fp)
 404f460:	10c00017 	ldw	r3,0(r2)
 404f464:	e0bffd17 	ldw	r2,-12(fp)
 404f468:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 404f46c:	e0bffc17 	ldw	r2,-16(fp)
 404f470:	10800017 	ldw	r2,0(r2)
 404f474:	e0fffd17 	ldw	r3,-12(fp)
 404f478:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 404f47c:	e0bffc17 	ldw	r2,-16(fp)
 404f480:	e0fffd17 	ldw	r3,-12(fp)
 404f484:	10c00015 	stw	r3,0(r2)

  return 0;  
 404f488:	0005883a 	mov	r2,zero
}
 404f48c:	e037883a 	mov	sp,fp
 404f490:	dfc00117 	ldw	ra,4(sp)
 404f494:	df000017 	ldw	fp,0(sp)
 404f498:	dec00204 	addi	sp,sp,8
 404f49c:	f800283a 	ret

0404f4a0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 404f4a0:	defffd04 	addi	sp,sp,-12
 404f4a4:	dfc00215 	stw	ra,8(sp)
 404f4a8:	df000115 	stw	fp,4(sp)
 404f4ac:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 404f4b0:	00810174 	movhi	r2,1029
 404f4b4:	10807a04 	addi	r2,r2,488
 404f4b8:	e0bfff15 	stw	r2,-4(fp)
 404f4bc:	00000606 	br	404f4d8 <_do_ctors+0x38>
        (*ctor) (); 
 404f4c0:	e0bfff17 	ldw	r2,-4(fp)
 404f4c4:	10800017 	ldw	r2,0(r2)
 404f4c8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 404f4cc:	e0bfff17 	ldw	r2,-4(fp)
 404f4d0:	10bfff04 	addi	r2,r2,-4
 404f4d4:	e0bfff15 	stw	r2,-4(fp)
 404f4d8:	e0ffff17 	ldw	r3,-4(fp)
 404f4dc:	00810174 	movhi	r2,1029
 404f4e0:	10807b04 	addi	r2,r2,492
 404f4e4:	18bff62e 	bgeu	r3,r2,404f4c0 <__alt_data_end+0xfffe4cc0>
        (*ctor) (); 
}
 404f4e8:	0001883a 	nop
 404f4ec:	e037883a 	mov	sp,fp
 404f4f0:	dfc00117 	ldw	ra,4(sp)
 404f4f4:	df000017 	ldw	fp,0(sp)
 404f4f8:	dec00204 	addi	sp,sp,8
 404f4fc:	f800283a 	ret

0404f500 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 404f500:	defffd04 	addi	sp,sp,-12
 404f504:	dfc00215 	stw	ra,8(sp)
 404f508:	df000115 	stw	fp,4(sp)
 404f50c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 404f510:	00810174 	movhi	r2,1029
 404f514:	10807a04 	addi	r2,r2,488
 404f518:	e0bfff15 	stw	r2,-4(fp)
 404f51c:	00000606 	br	404f538 <_do_dtors+0x38>
        (*dtor) (); 
 404f520:	e0bfff17 	ldw	r2,-4(fp)
 404f524:	10800017 	ldw	r2,0(r2)
 404f528:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 404f52c:	e0bfff17 	ldw	r2,-4(fp)
 404f530:	10bfff04 	addi	r2,r2,-4
 404f534:	e0bfff15 	stw	r2,-4(fp)
 404f538:	e0ffff17 	ldw	r3,-4(fp)
 404f53c:	00810174 	movhi	r2,1029
 404f540:	10807b04 	addi	r2,r2,492
 404f544:	18bff62e 	bgeu	r3,r2,404f520 <__alt_data_end+0xfffe4d20>
        (*dtor) (); 
}
 404f548:	0001883a 	nop
 404f54c:	e037883a 	mov	sp,fp
 404f550:	dfc00117 	ldw	ra,4(sp)
 404f554:	df000017 	ldw	fp,0(sp)
 404f558:	dec00204 	addi	sp,sp,8
 404f55c:	f800283a 	ret

0404f560 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 404f560:	defffa04 	addi	sp,sp,-24
 404f564:	dfc00515 	stw	ra,20(sp)
 404f568:	df000415 	stw	fp,16(sp)
 404f56c:	df000404 	addi	fp,sp,16
 404f570:	e13ffe15 	stw	r4,-8(fp)
 404f574:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 404f578:	e0bfff17 	ldw	r2,-4(fp)
 404f57c:	10800017 	ldw	r2,0(r2)
 404f580:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 404f584:	e13ffe17 	ldw	r4,-8(fp)
 404f588:	404084c0 	call	404084c <strlen>
 404f58c:	10800044 	addi	r2,r2,1
 404f590:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 404f594:	00000d06 	br	404f5cc <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 404f598:	e0bffc17 	ldw	r2,-16(fp)
 404f59c:	10800217 	ldw	r2,8(r2)
 404f5a0:	e0fffd17 	ldw	r3,-12(fp)
 404f5a4:	180d883a 	mov	r6,r3
 404f5a8:	e17ffe17 	ldw	r5,-8(fp)
 404f5ac:	1009883a 	mov	r4,r2
 404f5b0:	404fea40 	call	404fea4 <memcmp>
 404f5b4:	1000021e 	bne	r2,zero,404f5c0 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 404f5b8:	e0bffc17 	ldw	r2,-16(fp)
 404f5bc:	00000706 	br	404f5dc <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 404f5c0:	e0bffc17 	ldw	r2,-16(fp)
 404f5c4:	10800017 	ldw	r2,0(r2)
 404f5c8:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 404f5cc:	e0fffc17 	ldw	r3,-16(fp)
 404f5d0:	e0bfff17 	ldw	r2,-4(fp)
 404f5d4:	18bff01e 	bne	r3,r2,404f598 <__alt_data_end+0xfffe4d98>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 404f5d8:	0005883a 	mov	r2,zero
}
 404f5dc:	e037883a 	mov	sp,fp
 404f5e0:	dfc00117 	ldw	ra,4(sp)
 404f5e4:	df000017 	ldw	fp,0(sp)
 404f5e8:	dec00204 	addi	sp,sp,8
 404f5ec:	f800283a 	ret

0404f5f0 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 404f5f0:	defffe04 	addi	sp,sp,-8
 404f5f4:	dfc00115 	stw	ra,4(sp)
 404f5f8:	df000015 	stw	fp,0(sp)
 404f5fc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 404f600:	01440004 	movi	r5,4096
 404f604:	0009883a 	mov	r4,zero
 404f608:	404fdc80 	call	404fdc8 <alt_icache_flush>
#endif
}
 404f60c:	0001883a 	nop
 404f610:	e037883a 	mov	sp,fp
 404f614:	dfc00117 	ldw	ra,4(sp)
 404f618:	df000017 	ldw	fp,0(sp)
 404f61c:	dec00204 	addi	sp,sp,8
 404f620:	f800283a 	ret

0404f624 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 404f624:	defffe04 	addi	sp,sp,-8
 404f628:	df000115 	stw	fp,4(sp)
 404f62c:	df000104 	addi	fp,sp,4
 404f630:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 404f634:	e0bfff17 	ldw	r2,-4(fp)
 404f638:	10bffe84 	addi	r2,r2,-6
 404f63c:	10c00428 	cmpgeui	r3,r2,16
 404f640:	18001a1e 	bne	r3,zero,404f6ac <alt_exception_cause_generated_bad_addr+0x88>
 404f644:	100690ba 	slli	r3,r2,2
 404f648:	00810174 	movhi	r2,1029
 404f64c:	10bd9704 	addi	r2,r2,-2468
 404f650:	1885883a 	add	r2,r3,r2
 404f654:	10800017 	ldw	r2,0(r2)
 404f658:	1000683a 	jmp	r2
 404f65c:	0404f69c 	xori	r16,zero,5082
 404f660:	0404f69c 	xori	r16,zero,5082
 404f664:	0404f6ac 	andhi	r16,zero,5082
 404f668:	0404f6ac 	andhi	r16,zero,5082
 404f66c:	0404f6ac 	andhi	r16,zero,5082
 404f670:	0404f69c 	xori	r16,zero,5082
 404f674:	0404f6a4 	muli	r16,zero,5082
 404f678:	0404f6ac 	andhi	r16,zero,5082
 404f67c:	0404f69c 	xori	r16,zero,5082
 404f680:	0404f69c 	xori	r16,zero,5082
 404f684:	0404f6ac 	andhi	r16,zero,5082
 404f688:	0404f69c 	xori	r16,zero,5082
 404f68c:	0404f6a4 	muli	r16,zero,5082
 404f690:	0404f6ac 	andhi	r16,zero,5082
 404f694:	0404f6ac 	andhi	r16,zero,5082
 404f698:	0404f69c 	xori	r16,zero,5082
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 404f69c:	00800044 	movi	r2,1
 404f6a0:	00000306 	br	404f6b0 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 404f6a4:	0005883a 	mov	r2,zero
 404f6a8:	00000106 	br	404f6b0 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 404f6ac:	0005883a 	mov	r2,zero
  }
}
 404f6b0:	e037883a 	mov	sp,fp
 404f6b4:	df000017 	ldw	fp,0(sp)
 404f6b8:	dec00104 	addi	sp,sp,4
 404f6bc:	f800283a 	ret

0404f6c0 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 404f6c0:	defff904 	addi	sp,sp,-28
 404f6c4:	dfc00615 	stw	ra,24(sp)
 404f6c8:	df000515 	stw	fp,20(sp)
 404f6cc:	df000504 	addi	fp,sp,20
 404f6d0:	e13ffc15 	stw	r4,-16(fp)
 404f6d4:	e17ffd15 	stw	r5,-12(fp)
 404f6d8:	e1bffe15 	stw	r6,-8(fp)
 404f6dc:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 404f6e0:	e1bfff17 	ldw	r6,-4(fp)
 404f6e4:	e17ffe17 	ldw	r5,-8(fp)
 404f6e8:	e13ffd17 	ldw	r4,-12(fp)
 404f6ec:	404f9000 	call	404f900 <open>
 404f6f0:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 404f6f4:	e0bffb17 	ldw	r2,-20(fp)
 404f6f8:	10001c16 	blt	r2,zero,404f76c <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 404f6fc:	00810174 	movhi	r2,1029
 404f700:	1083b404 	addi	r2,r2,3792
 404f704:	e0fffb17 	ldw	r3,-20(fp)
 404f708:	18c00324 	muli	r3,r3,12
 404f70c:	10c5883a 	add	r2,r2,r3
 404f710:	10c00017 	ldw	r3,0(r2)
 404f714:	e0bffc17 	ldw	r2,-16(fp)
 404f718:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 404f71c:	00810174 	movhi	r2,1029
 404f720:	1083b404 	addi	r2,r2,3792
 404f724:	e0fffb17 	ldw	r3,-20(fp)
 404f728:	18c00324 	muli	r3,r3,12
 404f72c:	10c5883a 	add	r2,r2,r3
 404f730:	10800104 	addi	r2,r2,4
 404f734:	10c00017 	ldw	r3,0(r2)
 404f738:	e0bffc17 	ldw	r2,-16(fp)
 404f73c:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 404f740:	00810174 	movhi	r2,1029
 404f744:	1083b404 	addi	r2,r2,3792
 404f748:	e0fffb17 	ldw	r3,-20(fp)
 404f74c:	18c00324 	muli	r3,r3,12
 404f750:	10c5883a 	add	r2,r2,r3
 404f754:	10800204 	addi	r2,r2,8
 404f758:	10c00017 	ldw	r3,0(r2)
 404f75c:	e0bffc17 	ldw	r2,-16(fp)
 404f760:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 404f764:	e13ffb17 	ldw	r4,-20(fp)
 404f768:	404da100 	call	404da10 <alt_release_fd>
  }
} 
 404f76c:	0001883a 	nop
 404f770:	e037883a 	mov	sp,fp
 404f774:	dfc00117 	ldw	ra,4(sp)
 404f778:	df000017 	ldw	fp,0(sp)
 404f77c:	dec00204 	addi	sp,sp,8
 404f780:	f800283a 	ret

0404f784 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 404f784:	defffb04 	addi	sp,sp,-20
 404f788:	dfc00415 	stw	ra,16(sp)
 404f78c:	df000315 	stw	fp,12(sp)
 404f790:	df000304 	addi	fp,sp,12
 404f794:	e13ffd15 	stw	r4,-12(fp)
 404f798:	e17ffe15 	stw	r5,-8(fp)
 404f79c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 404f7a0:	01c07fc4 	movi	r7,511
 404f7a4:	01800044 	movi	r6,1
 404f7a8:	e17ffd17 	ldw	r5,-12(fp)
 404f7ac:	01010174 	movhi	r4,1029
 404f7b0:	2103b704 	addi	r4,r4,3804
 404f7b4:	404f6c00 	call	404f6c0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 404f7b8:	01c07fc4 	movi	r7,511
 404f7bc:	000d883a 	mov	r6,zero
 404f7c0:	e17ffe17 	ldw	r5,-8(fp)
 404f7c4:	01010174 	movhi	r4,1029
 404f7c8:	2103b404 	addi	r4,r4,3792
 404f7cc:	404f6c00 	call	404f6c0 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 404f7d0:	01c07fc4 	movi	r7,511
 404f7d4:	01800044 	movi	r6,1
 404f7d8:	e17fff17 	ldw	r5,-4(fp)
 404f7dc:	01010174 	movhi	r4,1029
 404f7e0:	2103ba04 	addi	r4,r4,3816
 404f7e4:	404f6c00 	call	404f6c0 <alt_open_fd>
}  
 404f7e8:	0001883a 	nop
 404f7ec:	e037883a 	mov	sp,fp
 404f7f0:	dfc00117 	ldw	ra,4(sp)
 404f7f4:	df000017 	ldw	fp,0(sp)
 404f7f8:	dec00204 	addi	sp,sp,8
 404f7fc:	f800283a 	ret

0404f800 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 404f800:	defffe04 	addi	sp,sp,-8
 404f804:	dfc00115 	stw	ra,4(sp)
 404f808:	df000015 	stw	fp,0(sp)
 404f80c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 404f810:	d0a00b17 	ldw	r2,-32724(gp)
 404f814:	10000326 	beq	r2,zero,404f824 <alt_get_errno+0x24>
 404f818:	d0a00b17 	ldw	r2,-32724(gp)
 404f81c:	103ee83a 	callr	r2
 404f820:	00000106 	br	404f828 <alt_get_errno+0x28>
 404f824:	d0a6fc04 	addi	r2,gp,-25616
}
 404f828:	e037883a 	mov	sp,fp
 404f82c:	dfc00117 	ldw	ra,4(sp)
 404f830:	df000017 	ldw	fp,0(sp)
 404f834:	dec00204 	addi	sp,sp,8
 404f838:	f800283a 	ret

0404f83c <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 404f83c:	defffd04 	addi	sp,sp,-12
 404f840:	df000215 	stw	fp,8(sp)
 404f844:	df000204 	addi	fp,sp,8
 404f848:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 404f84c:	e0bfff17 	ldw	r2,-4(fp)
 404f850:	10800217 	ldw	r2,8(r2)
 404f854:	10d00034 	orhi	r3,r2,16384
 404f858:	e0bfff17 	ldw	r2,-4(fp)
 404f85c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 404f860:	e03ffe15 	stw	zero,-8(fp)
 404f864:	00001d06 	br	404f8dc <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 404f868:	00810174 	movhi	r2,1029
 404f86c:	1083b404 	addi	r2,r2,3792
 404f870:	e0fffe17 	ldw	r3,-8(fp)
 404f874:	18c00324 	muli	r3,r3,12
 404f878:	10c5883a 	add	r2,r2,r3
 404f87c:	10c00017 	ldw	r3,0(r2)
 404f880:	e0bfff17 	ldw	r2,-4(fp)
 404f884:	10800017 	ldw	r2,0(r2)
 404f888:	1880111e 	bne	r3,r2,404f8d0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 404f88c:	00810174 	movhi	r2,1029
 404f890:	1083b404 	addi	r2,r2,3792
 404f894:	e0fffe17 	ldw	r3,-8(fp)
 404f898:	18c00324 	muli	r3,r3,12
 404f89c:	10c5883a 	add	r2,r2,r3
 404f8a0:	10800204 	addi	r2,r2,8
 404f8a4:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 404f8a8:	1000090e 	bge	r2,zero,404f8d0 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 404f8ac:	e0bffe17 	ldw	r2,-8(fp)
 404f8b0:	10c00324 	muli	r3,r2,12
 404f8b4:	00810174 	movhi	r2,1029
 404f8b8:	1083b404 	addi	r2,r2,3792
 404f8bc:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 404f8c0:	e0bfff17 	ldw	r2,-4(fp)
 404f8c4:	18800226 	beq	r3,r2,404f8d0 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 404f8c8:	00bffcc4 	movi	r2,-13
 404f8cc:	00000806 	br	404f8f0 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 404f8d0:	e0bffe17 	ldw	r2,-8(fp)
 404f8d4:	10800044 	addi	r2,r2,1
 404f8d8:	e0bffe15 	stw	r2,-8(fp)
 404f8dc:	d0a00a17 	ldw	r2,-32728(gp)
 404f8e0:	1007883a 	mov	r3,r2
 404f8e4:	e0bffe17 	ldw	r2,-8(fp)
 404f8e8:	18bfdf2e 	bgeu	r3,r2,404f868 <__alt_data_end+0xfffe5068>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 404f8ec:	0005883a 	mov	r2,zero
}
 404f8f0:	e037883a 	mov	sp,fp
 404f8f4:	df000017 	ldw	fp,0(sp)
 404f8f8:	dec00104 	addi	sp,sp,4
 404f8fc:	f800283a 	ret

0404f900 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 404f900:	defff604 	addi	sp,sp,-40
 404f904:	dfc00915 	stw	ra,36(sp)
 404f908:	df000815 	stw	fp,32(sp)
 404f90c:	df000804 	addi	fp,sp,32
 404f910:	e13ffd15 	stw	r4,-12(fp)
 404f914:	e17ffe15 	stw	r5,-8(fp)
 404f918:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 404f91c:	00bfffc4 	movi	r2,-1
 404f920:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 404f924:	00bffb44 	movi	r2,-19
 404f928:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 404f92c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 404f930:	d1600804 	addi	r5,gp,-32736
 404f934:	e13ffd17 	ldw	r4,-12(fp)
 404f938:	404f5600 	call	404f560 <alt_find_dev>
 404f93c:	e0bff815 	stw	r2,-32(fp)
 404f940:	e0bff817 	ldw	r2,-32(fp)
 404f944:	1000051e 	bne	r2,zero,404f95c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 404f948:	e13ffd17 	ldw	r4,-12(fp)
 404f94c:	404fc1c0 	call	404fc1c <alt_find_file>
 404f950:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 404f954:	00800044 	movi	r2,1
 404f958:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 404f95c:	e0bff817 	ldw	r2,-32(fp)
 404f960:	10002926 	beq	r2,zero,404fa08 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 404f964:	e13ff817 	ldw	r4,-32(fp)
 404f968:	404fd240 	call	404fd24 <alt_get_fd>
 404f96c:	e0bff915 	stw	r2,-28(fp)
 404f970:	e0bff917 	ldw	r2,-28(fp)
 404f974:	1000030e 	bge	r2,zero,404f984 <open+0x84>
    {
      status = index;
 404f978:	e0bff917 	ldw	r2,-28(fp)
 404f97c:	e0bffa15 	stw	r2,-24(fp)
 404f980:	00002306 	br	404fa10 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 404f984:	e0bff917 	ldw	r2,-28(fp)
 404f988:	10c00324 	muli	r3,r2,12
 404f98c:	00810174 	movhi	r2,1029
 404f990:	1083b404 	addi	r2,r2,3792
 404f994:	1885883a 	add	r2,r3,r2
 404f998:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 404f99c:	e0fffe17 	ldw	r3,-8(fp)
 404f9a0:	00900034 	movhi	r2,16384
 404f9a4:	10bfffc4 	addi	r2,r2,-1
 404f9a8:	1886703a 	and	r3,r3,r2
 404f9ac:	e0bffc17 	ldw	r2,-16(fp)
 404f9b0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 404f9b4:	e0bffb17 	ldw	r2,-20(fp)
 404f9b8:	1000051e 	bne	r2,zero,404f9d0 <open+0xd0>
 404f9bc:	e13ffc17 	ldw	r4,-16(fp)
 404f9c0:	404f83c0 	call	404f83c <alt_file_locked>
 404f9c4:	e0bffa15 	stw	r2,-24(fp)
 404f9c8:	e0bffa17 	ldw	r2,-24(fp)
 404f9cc:	10001016 	blt	r2,zero,404fa10 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 404f9d0:	e0bff817 	ldw	r2,-32(fp)
 404f9d4:	10800317 	ldw	r2,12(r2)
 404f9d8:	10000826 	beq	r2,zero,404f9fc <open+0xfc>
 404f9dc:	e0bff817 	ldw	r2,-32(fp)
 404f9e0:	10800317 	ldw	r2,12(r2)
 404f9e4:	e1ffff17 	ldw	r7,-4(fp)
 404f9e8:	e1bffe17 	ldw	r6,-8(fp)
 404f9ec:	e17ffd17 	ldw	r5,-12(fp)
 404f9f0:	e13ffc17 	ldw	r4,-16(fp)
 404f9f4:	103ee83a 	callr	r2
 404f9f8:	00000106 	br	404fa00 <open+0x100>
 404f9fc:	0005883a 	mov	r2,zero
 404fa00:	e0bffa15 	stw	r2,-24(fp)
 404fa04:	00000206 	br	404fa10 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 404fa08:	00bffb44 	movi	r2,-19
 404fa0c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 404fa10:	e0bffa17 	ldw	r2,-24(fp)
 404fa14:	1000090e 	bge	r2,zero,404fa3c <open+0x13c>
  {
    alt_release_fd (index);  
 404fa18:	e13ff917 	ldw	r4,-28(fp)
 404fa1c:	404da100 	call	404da10 <alt_release_fd>
    ALT_ERRNO = -status;
 404fa20:	404f8000 	call	404f800 <alt_get_errno>
 404fa24:	1007883a 	mov	r3,r2
 404fa28:	e0bffa17 	ldw	r2,-24(fp)
 404fa2c:	0085c83a 	sub	r2,zero,r2
 404fa30:	18800015 	stw	r2,0(r3)
    return -1;
 404fa34:	00bfffc4 	movi	r2,-1
 404fa38:	00000106 	br	404fa40 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 404fa3c:	e0bff917 	ldw	r2,-28(fp)
}
 404fa40:	e037883a 	mov	sp,fp
 404fa44:	dfc00117 	ldw	ra,4(sp)
 404fa48:	df000017 	ldw	fp,0(sp)
 404fa4c:	dec00204 	addi	sp,sp,8
 404fa50:	f800283a 	ret

0404fa54 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 404fa54:	defffa04 	addi	sp,sp,-24
 404fa58:	df000515 	stw	fp,20(sp)
 404fa5c:	df000504 	addi	fp,sp,20
 404fa60:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 404fa64:	0005303a 	rdctl	r2,status
 404fa68:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 404fa6c:	e0fffc17 	ldw	r3,-16(fp)
 404fa70:	00bfff84 	movi	r2,-2
 404fa74:	1884703a 	and	r2,r3,r2
 404fa78:	1001703a 	wrctl	status,r2
  
  return context;
 404fa7c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 404fa80:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 404fa84:	e0bfff17 	ldw	r2,-4(fp)
 404fa88:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 404fa8c:	e0bffd17 	ldw	r2,-12(fp)
 404fa90:	10800017 	ldw	r2,0(r2)
 404fa94:	e0fffd17 	ldw	r3,-12(fp)
 404fa98:	18c00117 	ldw	r3,4(r3)
 404fa9c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 404faa0:	e0bffd17 	ldw	r2,-12(fp)
 404faa4:	10800117 	ldw	r2,4(r2)
 404faa8:	e0fffd17 	ldw	r3,-12(fp)
 404faac:	18c00017 	ldw	r3,0(r3)
 404fab0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 404fab4:	e0bffd17 	ldw	r2,-12(fp)
 404fab8:	e0fffd17 	ldw	r3,-12(fp)
 404fabc:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 404fac0:	e0bffd17 	ldw	r2,-12(fp)
 404fac4:	e0fffd17 	ldw	r3,-12(fp)
 404fac8:	10c00015 	stw	r3,0(r2)
 404facc:	e0bffb17 	ldw	r2,-20(fp)
 404fad0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 404fad4:	e0bffe17 	ldw	r2,-8(fp)
 404fad8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 404fadc:	0001883a 	nop
 404fae0:	e037883a 	mov	sp,fp
 404fae4:	df000017 	ldw	fp,0(sp)
 404fae8:	dec00104 	addi	sp,sp,4
 404faec:	f800283a 	ret

0404faf0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 404faf0:	defffb04 	addi	sp,sp,-20
 404faf4:	dfc00415 	stw	ra,16(sp)
 404faf8:	df000315 	stw	fp,12(sp)
 404fafc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 404fb00:	d0a01017 	ldw	r2,-32704(gp)
 404fb04:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 404fb08:	d0a70317 	ldw	r2,-25588(gp)
 404fb0c:	10800044 	addi	r2,r2,1
 404fb10:	d0a70315 	stw	r2,-25588(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 404fb14:	00002e06 	br	404fbd0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 404fb18:	e0bffd17 	ldw	r2,-12(fp)
 404fb1c:	10800017 	ldw	r2,0(r2)
 404fb20:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 404fb24:	e0bffd17 	ldw	r2,-12(fp)
 404fb28:	10800403 	ldbu	r2,16(r2)
 404fb2c:	10803fcc 	andi	r2,r2,255
 404fb30:	10000426 	beq	r2,zero,404fb44 <alt_tick+0x54>
 404fb34:	d0a70317 	ldw	r2,-25588(gp)
 404fb38:	1000021e 	bne	r2,zero,404fb44 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 404fb3c:	e0bffd17 	ldw	r2,-12(fp)
 404fb40:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 404fb44:	e0bffd17 	ldw	r2,-12(fp)
 404fb48:	10800217 	ldw	r2,8(r2)
 404fb4c:	d0e70317 	ldw	r3,-25588(gp)
 404fb50:	18801d36 	bltu	r3,r2,404fbc8 <alt_tick+0xd8>
 404fb54:	e0bffd17 	ldw	r2,-12(fp)
 404fb58:	10800403 	ldbu	r2,16(r2)
 404fb5c:	10803fcc 	andi	r2,r2,255
 404fb60:	1000191e 	bne	r2,zero,404fbc8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 404fb64:	e0bffd17 	ldw	r2,-12(fp)
 404fb68:	10800317 	ldw	r2,12(r2)
 404fb6c:	e0fffd17 	ldw	r3,-12(fp)
 404fb70:	18c00517 	ldw	r3,20(r3)
 404fb74:	1809883a 	mov	r4,r3
 404fb78:	103ee83a 	callr	r2
 404fb7c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 404fb80:	e0bfff17 	ldw	r2,-4(fp)
 404fb84:	1000031e 	bne	r2,zero,404fb94 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 404fb88:	e13ffd17 	ldw	r4,-12(fp)
 404fb8c:	404fa540 	call	404fa54 <alt_alarm_stop>
 404fb90:	00000d06 	br	404fbc8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 404fb94:	e0bffd17 	ldw	r2,-12(fp)
 404fb98:	10c00217 	ldw	r3,8(r2)
 404fb9c:	e0bfff17 	ldw	r2,-4(fp)
 404fba0:	1887883a 	add	r3,r3,r2
 404fba4:	e0bffd17 	ldw	r2,-12(fp)
 404fba8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 404fbac:	e0bffd17 	ldw	r2,-12(fp)
 404fbb0:	10c00217 	ldw	r3,8(r2)
 404fbb4:	d0a70317 	ldw	r2,-25588(gp)
 404fbb8:	1880032e 	bgeu	r3,r2,404fbc8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 404fbbc:	e0bffd17 	ldw	r2,-12(fp)
 404fbc0:	00c00044 	movi	r3,1
 404fbc4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 404fbc8:	e0bffe17 	ldw	r2,-8(fp)
 404fbcc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 404fbd0:	e0fffd17 	ldw	r3,-12(fp)
 404fbd4:	d0a01004 	addi	r2,gp,-32704
 404fbd8:	18bfcf1e 	bne	r3,r2,404fb18 <__alt_data_end+0xfffe5318>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 404fbdc:	0001883a 	nop
}
 404fbe0:	0001883a 	nop
 404fbe4:	e037883a 	mov	sp,fp
 404fbe8:	dfc00117 	ldw	ra,4(sp)
 404fbec:	df000017 	ldw	fp,0(sp)
 404fbf0:	dec00204 	addi	sp,sp,8
 404fbf4:	f800283a 	ret

0404fbf8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 404fbf8:	deffff04 	addi	sp,sp,-4
 404fbfc:	df000015 	stw	fp,0(sp)
 404fc00:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 404fc04:	000170fa 	wrctl	ienable,zero
}
 404fc08:	0001883a 	nop
 404fc0c:	e037883a 	mov	sp,fp
 404fc10:	df000017 	ldw	fp,0(sp)
 404fc14:	dec00104 	addi	sp,sp,4
 404fc18:	f800283a 	ret

0404fc1c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 404fc1c:	defffb04 	addi	sp,sp,-20
 404fc20:	dfc00415 	stw	ra,16(sp)
 404fc24:	df000315 	stw	fp,12(sp)
 404fc28:	df000304 	addi	fp,sp,12
 404fc2c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 404fc30:	d0a00617 	ldw	r2,-32744(gp)
 404fc34:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 404fc38:	00003106 	br	404fd00 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 404fc3c:	e0bffd17 	ldw	r2,-12(fp)
 404fc40:	10800217 	ldw	r2,8(r2)
 404fc44:	1009883a 	mov	r4,r2
 404fc48:	404084c0 	call	404084c <strlen>
 404fc4c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 404fc50:	e0bffd17 	ldw	r2,-12(fp)
 404fc54:	10c00217 	ldw	r3,8(r2)
 404fc58:	e0bffe17 	ldw	r2,-8(fp)
 404fc5c:	10bfffc4 	addi	r2,r2,-1
 404fc60:	1885883a 	add	r2,r3,r2
 404fc64:	10800003 	ldbu	r2,0(r2)
 404fc68:	10803fcc 	andi	r2,r2,255
 404fc6c:	1080201c 	xori	r2,r2,128
 404fc70:	10bfe004 	addi	r2,r2,-128
 404fc74:	10800bd8 	cmpnei	r2,r2,47
 404fc78:	1000031e 	bne	r2,zero,404fc88 <alt_find_file+0x6c>
    {
      len -= 1;
 404fc7c:	e0bffe17 	ldw	r2,-8(fp)
 404fc80:	10bfffc4 	addi	r2,r2,-1
 404fc84:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 404fc88:	e0bffe17 	ldw	r2,-8(fp)
 404fc8c:	e0ffff17 	ldw	r3,-4(fp)
 404fc90:	1885883a 	add	r2,r3,r2
 404fc94:	10800003 	ldbu	r2,0(r2)
 404fc98:	10803fcc 	andi	r2,r2,255
 404fc9c:	1080201c 	xori	r2,r2,128
 404fca0:	10bfe004 	addi	r2,r2,-128
 404fca4:	10800be0 	cmpeqi	r2,r2,47
 404fca8:	1000081e 	bne	r2,zero,404fccc <alt_find_file+0xb0>
 404fcac:	e0bffe17 	ldw	r2,-8(fp)
 404fcb0:	e0ffff17 	ldw	r3,-4(fp)
 404fcb4:	1885883a 	add	r2,r3,r2
 404fcb8:	10800003 	ldbu	r2,0(r2)
 404fcbc:	10803fcc 	andi	r2,r2,255
 404fcc0:	1080201c 	xori	r2,r2,128
 404fcc4:	10bfe004 	addi	r2,r2,-128
 404fcc8:	10000a1e 	bne	r2,zero,404fcf4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 404fccc:	e0bffd17 	ldw	r2,-12(fp)
 404fcd0:	10800217 	ldw	r2,8(r2)
 404fcd4:	e0fffe17 	ldw	r3,-8(fp)
 404fcd8:	180d883a 	mov	r6,r3
 404fcdc:	e17fff17 	ldw	r5,-4(fp)
 404fce0:	1009883a 	mov	r4,r2
 404fce4:	404fea40 	call	404fea4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 404fce8:	1000021e 	bne	r2,zero,404fcf4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 404fcec:	e0bffd17 	ldw	r2,-12(fp)
 404fcf0:	00000706 	br	404fd10 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 404fcf4:	e0bffd17 	ldw	r2,-12(fp)
 404fcf8:	10800017 	ldw	r2,0(r2)
 404fcfc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 404fd00:	e0fffd17 	ldw	r3,-12(fp)
 404fd04:	d0a00604 	addi	r2,gp,-32744
 404fd08:	18bfcc1e 	bne	r3,r2,404fc3c <__alt_data_end+0xfffe543c>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 404fd0c:	0005883a 	mov	r2,zero
}
 404fd10:	e037883a 	mov	sp,fp
 404fd14:	dfc00117 	ldw	ra,4(sp)
 404fd18:	df000017 	ldw	fp,0(sp)
 404fd1c:	dec00204 	addi	sp,sp,8
 404fd20:	f800283a 	ret

0404fd24 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 404fd24:	defffc04 	addi	sp,sp,-16
 404fd28:	df000315 	stw	fp,12(sp)
 404fd2c:	df000304 	addi	fp,sp,12
 404fd30:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 404fd34:	00bffa04 	movi	r2,-24
 404fd38:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 404fd3c:	e03ffd15 	stw	zero,-12(fp)
 404fd40:	00001906 	br	404fda8 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 404fd44:	00810174 	movhi	r2,1029
 404fd48:	1083b404 	addi	r2,r2,3792
 404fd4c:	e0fffd17 	ldw	r3,-12(fp)
 404fd50:	18c00324 	muli	r3,r3,12
 404fd54:	10c5883a 	add	r2,r2,r3
 404fd58:	10800017 	ldw	r2,0(r2)
 404fd5c:	10000f1e 	bne	r2,zero,404fd9c <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 404fd60:	00810174 	movhi	r2,1029
 404fd64:	1083b404 	addi	r2,r2,3792
 404fd68:	e0fffd17 	ldw	r3,-12(fp)
 404fd6c:	18c00324 	muli	r3,r3,12
 404fd70:	10c5883a 	add	r2,r2,r3
 404fd74:	e0ffff17 	ldw	r3,-4(fp)
 404fd78:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 404fd7c:	d0e00a17 	ldw	r3,-32728(gp)
 404fd80:	e0bffd17 	ldw	r2,-12(fp)
 404fd84:	1880020e 	bge	r3,r2,404fd90 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 404fd88:	e0bffd17 	ldw	r2,-12(fp)
 404fd8c:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
 404fd90:	e0bffd17 	ldw	r2,-12(fp)
 404fd94:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 404fd98:	00000606 	br	404fdb4 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 404fd9c:	e0bffd17 	ldw	r2,-12(fp)
 404fda0:	10800044 	addi	r2,r2,1
 404fda4:	e0bffd15 	stw	r2,-12(fp)
 404fda8:	e0bffd17 	ldw	r2,-12(fp)
 404fdac:	10800810 	cmplti	r2,r2,32
 404fdb0:	103fe41e 	bne	r2,zero,404fd44 <__alt_data_end+0xfffe5544>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 404fdb4:	e0bffe17 	ldw	r2,-8(fp)
}
 404fdb8:	e037883a 	mov	sp,fp
 404fdbc:	df000017 	ldw	fp,0(sp)
 404fdc0:	dec00104 	addi	sp,sp,4
 404fdc4:	f800283a 	ret

0404fdc8 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 404fdc8:	defffb04 	addi	sp,sp,-20
 404fdcc:	df000415 	stw	fp,16(sp)
 404fdd0:	df000404 	addi	fp,sp,16
 404fdd4:	e13ffe15 	stw	r4,-8(fp)
 404fdd8:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 404fddc:	e0bfff17 	ldw	r2,-4(fp)
 404fde0:	10840070 	cmpltui	r2,r2,4097
 404fde4:	1000021e 	bne	r2,zero,404fdf0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 404fde8:	00840004 	movi	r2,4096
 404fdec:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 404fdf0:	e0fffe17 	ldw	r3,-8(fp)
 404fdf4:	e0bfff17 	ldw	r2,-4(fp)
 404fdf8:	1885883a 	add	r2,r3,r2
 404fdfc:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 404fe00:	e0bffe17 	ldw	r2,-8(fp)
 404fe04:	e0bffc15 	stw	r2,-16(fp)
 404fe08:	00000506 	br	404fe20 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 404fe0c:	e0bffc17 	ldw	r2,-16(fp)
 404fe10:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 404fe14:	e0bffc17 	ldw	r2,-16(fp)
 404fe18:	10800804 	addi	r2,r2,32
 404fe1c:	e0bffc15 	stw	r2,-16(fp)
 404fe20:	e0fffc17 	ldw	r3,-16(fp)
 404fe24:	e0bffd17 	ldw	r2,-12(fp)
 404fe28:	18bff836 	bltu	r3,r2,404fe0c <__alt_data_end+0xfffe560c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 404fe2c:	e0bffe17 	ldw	r2,-8(fp)
 404fe30:	108007cc 	andi	r2,r2,31
 404fe34:	10000226 	beq	r2,zero,404fe40 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 404fe38:	e0bffc17 	ldw	r2,-16(fp)
 404fe3c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 404fe40:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 404fe44:	0001883a 	nop
 404fe48:	e037883a 	mov	sp,fp
 404fe4c:	df000017 	ldw	fp,0(sp)
 404fe50:	dec00104 	addi	sp,sp,4
 404fe54:	f800283a 	ret

0404fe58 <atexit>:
 404fe58:	200b883a 	mov	r5,r4
 404fe5c:	000f883a 	mov	r7,zero
 404fe60:	000d883a 	mov	r6,zero
 404fe64:	0009883a 	mov	r4,zero
 404fe68:	404ff201 	jmpi	404ff20 <__register_exitproc>

0404fe6c <exit>:
 404fe6c:	defffe04 	addi	sp,sp,-8
 404fe70:	000b883a 	mov	r5,zero
 404fe74:	dc000015 	stw	r16,0(sp)
 404fe78:	dfc00115 	stw	ra,4(sp)
 404fe7c:	2021883a 	mov	r16,r4
 404fe80:	40500380 	call	4050038 <__call_exitprocs>
 404fe84:	00810174 	movhi	r2,1029
 404fe88:	10885004 	addi	r2,r2,8512
 404fe8c:	11000017 	ldw	r4,0(r2)
 404fe90:	20800f17 	ldw	r2,60(r4)
 404fe94:	10000126 	beq	r2,zero,404fe9c <exit+0x30>
 404fe98:	103ee83a 	callr	r2
 404fe9c:	8009883a 	mov	r4,r16
 404fea0:	40501b80 	call	40501b8 <_exit>

0404fea4 <memcmp>:
 404fea4:	01c000c4 	movi	r7,3
 404fea8:	3980192e 	bgeu	r7,r6,404ff10 <memcmp+0x6c>
 404feac:	2144b03a 	or	r2,r4,r5
 404feb0:	11c4703a 	and	r2,r2,r7
 404feb4:	10000f26 	beq	r2,zero,404fef4 <memcmp+0x50>
 404feb8:	20800003 	ldbu	r2,0(r4)
 404febc:	28c00003 	ldbu	r3,0(r5)
 404fec0:	10c0151e 	bne	r2,r3,404ff18 <memcmp+0x74>
 404fec4:	31bfff84 	addi	r6,r6,-2
 404fec8:	01ffffc4 	movi	r7,-1
 404fecc:	00000406 	br	404fee0 <memcmp+0x3c>
 404fed0:	20800003 	ldbu	r2,0(r4)
 404fed4:	28c00003 	ldbu	r3,0(r5)
 404fed8:	31bfffc4 	addi	r6,r6,-1
 404fedc:	10c00e1e 	bne	r2,r3,404ff18 <memcmp+0x74>
 404fee0:	21000044 	addi	r4,r4,1
 404fee4:	29400044 	addi	r5,r5,1
 404fee8:	31fff91e 	bne	r6,r7,404fed0 <__alt_data_end+0xfffe56d0>
 404feec:	0005883a 	mov	r2,zero
 404fef0:	f800283a 	ret
 404fef4:	20c00017 	ldw	r3,0(r4)
 404fef8:	28800017 	ldw	r2,0(r5)
 404fefc:	18bfee1e 	bne	r3,r2,404feb8 <__alt_data_end+0xfffe56b8>
 404ff00:	31bfff04 	addi	r6,r6,-4
 404ff04:	21000104 	addi	r4,r4,4
 404ff08:	29400104 	addi	r5,r5,4
 404ff0c:	39bff936 	bltu	r7,r6,404fef4 <__alt_data_end+0xfffe56f4>
 404ff10:	303fe91e 	bne	r6,zero,404feb8 <__alt_data_end+0xfffe56b8>
 404ff14:	003ff506 	br	404feec <__alt_data_end+0xfffe56ec>
 404ff18:	10c5c83a 	sub	r2,r2,r3
 404ff1c:	f800283a 	ret

0404ff20 <__register_exitproc>:
 404ff20:	defffa04 	addi	sp,sp,-24
 404ff24:	dc000315 	stw	r16,12(sp)
 404ff28:	04010174 	movhi	r16,1029
 404ff2c:	84085004 	addi	r16,r16,8512
 404ff30:	80c00017 	ldw	r3,0(r16)
 404ff34:	dc400415 	stw	r17,16(sp)
 404ff38:	dfc00515 	stw	ra,20(sp)
 404ff3c:	18805217 	ldw	r2,328(r3)
 404ff40:	2023883a 	mov	r17,r4
 404ff44:	10003726 	beq	r2,zero,4050024 <__register_exitproc+0x104>
 404ff48:	10c00117 	ldw	r3,4(r2)
 404ff4c:	010007c4 	movi	r4,31
 404ff50:	20c00e16 	blt	r4,r3,404ff8c <__register_exitproc+0x6c>
 404ff54:	1a000044 	addi	r8,r3,1
 404ff58:	8800221e 	bne	r17,zero,404ffe4 <__register_exitproc+0xc4>
 404ff5c:	18c00084 	addi	r3,r3,2
 404ff60:	18c7883a 	add	r3,r3,r3
 404ff64:	18c7883a 	add	r3,r3,r3
 404ff68:	12000115 	stw	r8,4(r2)
 404ff6c:	10c7883a 	add	r3,r2,r3
 404ff70:	19400015 	stw	r5,0(r3)
 404ff74:	0005883a 	mov	r2,zero
 404ff78:	dfc00517 	ldw	ra,20(sp)
 404ff7c:	dc400417 	ldw	r17,16(sp)
 404ff80:	dc000317 	ldw	r16,12(sp)
 404ff84:	dec00604 	addi	sp,sp,24
 404ff88:	f800283a 	ret
 404ff8c:	00800034 	movhi	r2,0
 404ff90:	10800004 	addi	r2,r2,0
 404ff94:	10002626 	beq	r2,zero,4050030 <__register_exitproc+0x110>
 404ff98:	01006404 	movi	r4,400
 404ff9c:	d9400015 	stw	r5,0(sp)
 404ffa0:	d9800115 	stw	r6,4(sp)
 404ffa4:	d9c00215 	stw	r7,8(sp)
 404ffa8:	00000000 	call	0 <__alt_mem_SDRAM_Controller_Shared>
 404ffac:	d9400017 	ldw	r5,0(sp)
 404ffb0:	d9800117 	ldw	r6,4(sp)
 404ffb4:	d9c00217 	ldw	r7,8(sp)
 404ffb8:	10001d26 	beq	r2,zero,4050030 <__register_exitproc+0x110>
 404ffbc:	81000017 	ldw	r4,0(r16)
 404ffc0:	10000115 	stw	zero,4(r2)
 404ffc4:	02000044 	movi	r8,1
 404ffc8:	22405217 	ldw	r9,328(r4)
 404ffcc:	0007883a 	mov	r3,zero
 404ffd0:	12400015 	stw	r9,0(r2)
 404ffd4:	20805215 	stw	r2,328(r4)
 404ffd8:	10006215 	stw	zero,392(r2)
 404ffdc:	10006315 	stw	zero,396(r2)
 404ffe0:	883fde26 	beq	r17,zero,404ff5c <__alt_data_end+0xfffe575c>
 404ffe4:	18c9883a 	add	r4,r3,r3
 404ffe8:	2109883a 	add	r4,r4,r4
 404ffec:	1109883a 	add	r4,r2,r4
 404fff0:	21802215 	stw	r6,136(r4)
 404fff4:	01800044 	movi	r6,1
 404fff8:	12406217 	ldw	r9,392(r2)
 404fffc:	30cc983a 	sll	r6,r6,r3
 4050000:	4992b03a 	or	r9,r9,r6
 4050004:	12406215 	stw	r9,392(r2)
 4050008:	21c04215 	stw	r7,264(r4)
 405000c:	01000084 	movi	r4,2
 4050010:	893fd21e 	bne	r17,r4,404ff5c <__alt_data_end+0xfffe575c>
 4050014:	11006317 	ldw	r4,396(r2)
 4050018:	218cb03a 	or	r6,r4,r6
 405001c:	11806315 	stw	r6,396(r2)
 4050020:	003fce06 	br	404ff5c <__alt_data_end+0xfffe575c>
 4050024:	18805304 	addi	r2,r3,332
 4050028:	18805215 	stw	r2,328(r3)
 405002c:	003fc606 	br	404ff48 <__alt_data_end+0xfffe5748>
 4050030:	00bfffc4 	movi	r2,-1
 4050034:	003fd006 	br	404ff78 <__alt_data_end+0xfffe5778>

04050038 <__call_exitprocs>:
 4050038:	defff504 	addi	sp,sp,-44
 405003c:	df000915 	stw	fp,36(sp)
 4050040:	dd400615 	stw	r21,24(sp)
 4050044:	dc800315 	stw	r18,12(sp)
 4050048:	dfc00a15 	stw	ra,40(sp)
 405004c:	ddc00815 	stw	r23,32(sp)
 4050050:	dd800715 	stw	r22,28(sp)
 4050054:	dd000515 	stw	r20,20(sp)
 4050058:	dcc00415 	stw	r19,16(sp)
 405005c:	dc400215 	stw	r17,8(sp)
 4050060:	dc000115 	stw	r16,4(sp)
 4050064:	d9000015 	stw	r4,0(sp)
 4050068:	2839883a 	mov	fp,r5
 405006c:	04800044 	movi	r18,1
 4050070:	057fffc4 	movi	r21,-1
 4050074:	00810174 	movhi	r2,1029
 4050078:	10885004 	addi	r2,r2,8512
 405007c:	12000017 	ldw	r8,0(r2)
 4050080:	45005217 	ldw	r20,328(r8)
 4050084:	44c05204 	addi	r19,r8,328
 4050088:	a0001c26 	beq	r20,zero,40500fc <__call_exitprocs+0xc4>
 405008c:	a0800117 	ldw	r2,4(r20)
 4050090:	15ffffc4 	addi	r23,r2,-1
 4050094:	b8000d16 	blt	r23,zero,40500cc <__call_exitprocs+0x94>
 4050098:	14000044 	addi	r16,r2,1
 405009c:	8421883a 	add	r16,r16,r16
 40500a0:	8421883a 	add	r16,r16,r16
 40500a4:	84402004 	addi	r17,r16,128
 40500a8:	a463883a 	add	r17,r20,r17
 40500ac:	a421883a 	add	r16,r20,r16
 40500b0:	e0001e26 	beq	fp,zero,405012c <__call_exitprocs+0xf4>
 40500b4:	80804017 	ldw	r2,256(r16)
 40500b8:	e0801c26 	beq	fp,r2,405012c <__call_exitprocs+0xf4>
 40500bc:	bdffffc4 	addi	r23,r23,-1
 40500c0:	843fff04 	addi	r16,r16,-4
 40500c4:	8c7fff04 	addi	r17,r17,-4
 40500c8:	bd7ff91e 	bne	r23,r21,40500b0 <__alt_data_end+0xfffe58b0>
 40500cc:	00800034 	movhi	r2,0
 40500d0:	10800004 	addi	r2,r2,0
 40500d4:	10000926 	beq	r2,zero,40500fc <__call_exitprocs+0xc4>
 40500d8:	a0800117 	ldw	r2,4(r20)
 40500dc:	1000301e 	bne	r2,zero,40501a0 <__call_exitprocs+0x168>
 40500e0:	a0800017 	ldw	r2,0(r20)
 40500e4:	10003226 	beq	r2,zero,40501b0 <__call_exitprocs+0x178>
 40500e8:	a009883a 	mov	r4,r20
 40500ec:	98800015 	stw	r2,0(r19)
 40500f0:	00000000 	call	0 <__alt_mem_SDRAM_Controller_Shared>
 40500f4:	9d000017 	ldw	r20,0(r19)
 40500f8:	a03fe41e 	bne	r20,zero,405008c <__alt_data_end+0xfffe588c>
 40500fc:	dfc00a17 	ldw	ra,40(sp)
 4050100:	df000917 	ldw	fp,36(sp)
 4050104:	ddc00817 	ldw	r23,32(sp)
 4050108:	dd800717 	ldw	r22,28(sp)
 405010c:	dd400617 	ldw	r21,24(sp)
 4050110:	dd000517 	ldw	r20,20(sp)
 4050114:	dcc00417 	ldw	r19,16(sp)
 4050118:	dc800317 	ldw	r18,12(sp)
 405011c:	dc400217 	ldw	r17,8(sp)
 4050120:	dc000117 	ldw	r16,4(sp)
 4050124:	dec00b04 	addi	sp,sp,44
 4050128:	f800283a 	ret
 405012c:	a0800117 	ldw	r2,4(r20)
 4050130:	80c00017 	ldw	r3,0(r16)
 4050134:	10bfffc4 	addi	r2,r2,-1
 4050138:	15c01426 	beq	r2,r23,405018c <__call_exitprocs+0x154>
 405013c:	80000015 	stw	zero,0(r16)
 4050140:	183fde26 	beq	r3,zero,40500bc <__alt_data_end+0xfffe58bc>
 4050144:	95c8983a 	sll	r4,r18,r23
 4050148:	a0806217 	ldw	r2,392(r20)
 405014c:	a5800117 	ldw	r22,4(r20)
 4050150:	2084703a 	and	r2,r4,r2
 4050154:	10000b26 	beq	r2,zero,4050184 <__call_exitprocs+0x14c>
 4050158:	a0806317 	ldw	r2,396(r20)
 405015c:	2088703a 	and	r4,r4,r2
 4050160:	20000c1e 	bne	r4,zero,4050194 <__call_exitprocs+0x15c>
 4050164:	89400017 	ldw	r5,0(r17)
 4050168:	d9000017 	ldw	r4,0(sp)
 405016c:	183ee83a 	callr	r3
 4050170:	a0800117 	ldw	r2,4(r20)
 4050174:	15bfbf1e 	bne	r2,r22,4050074 <__alt_data_end+0xfffe5874>
 4050178:	98800017 	ldw	r2,0(r19)
 405017c:	153fcf26 	beq	r2,r20,40500bc <__alt_data_end+0xfffe58bc>
 4050180:	003fbc06 	br	4050074 <__alt_data_end+0xfffe5874>
 4050184:	183ee83a 	callr	r3
 4050188:	003ff906 	br	4050170 <__alt_data_end+0xfffe5970>
 405018c:	a5c00115 	stw	r23,4(r20)
 4050190:	003feb06 	br	4050140 <__alt_data_end+0xfffe5940>
 4050194:	89000017 	ldw	r4,0(r17)
 4050198:	183ee83a 	callr	r3
 405019c:	003ff406 	br	4050170 <__alt_data_end+0xfffe5970>
 40501a0:	a0800017 	ldw	r2,0(r20)
 40501a4:	a027883a 	mov	r19,r20
 40501a8:	1029883a 	mov	r20,r2
 40501ac:	003fb606 	br	4050088 <__alt_data_end+0xfffe5888>
 40501b0:	0005883a 	mov	r2,zero
 40501b4:	003ffb06 	br	40501a4 <__alt_data_end+0xfffe59a4>

040501b8 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 40501b8:	defffd04 	addi	sp,sp,-12
 40501bc:	df000215 	stw	fp,8(sp)
 40501c0:	df000204 	addi	fp,sp,8
 40501c4:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 40501c8:	0001883a 	nop
 40501cc:	e0bfff17 	ldw	r2,-4(fp)
 40501d0:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 40501d4:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 40501d8:	10000226 	beq	r2,zero,40501e4 <_exit+0x2c>
    ALT_SIM_FAIL();
 40501dc:	002af070 	cmpltui	zero,zero,43969
 40501e0:	00000106 	br	40501e8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 40501e4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 40501e8:	003fff06 	br	40501e8 <__alt_data_end+0xfffe59e8>

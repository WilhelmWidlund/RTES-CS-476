
SysSigProc.elf:     file format elf32-littlenios2
SysSigProc.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04020244

Program Header:
    LOAD off    0x00001000 vaddr 0x04020000 paddr 0x04020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04020020 paddr 0x04020020 align 2**12
         filesz 0x000100c0 memsz 0x000100c0 flags r-x
    LOAD off    0x00012000 vaddr 0x00000000 paddr 0x040300e0 align 2**12
         filesz 0x00001f80 memsz 0x000020ec flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04020000  04020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  04020020  04020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000fe9c  04020244  04020244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003fc  00000000  040300e0  00012000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b84  000003fc  040304dc  000123fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000016c  00001f80  04032060  00013f80  2**2
                  ALLOC, SMALL_DATA
  6 .SDRAM_Controller_Shared 00000000  000020ec  000020ec  00013f80  2**0
                  CONTENTS
  7 .SysSigProc_Onchip_Memory 00000000  04032060  04032060  00013f80  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00013f80  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000ef8  00000000  00000000  00013fa8  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00024196  00000000  00000000  00014ea0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000936a  00000000  00000000  00039036  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000b8ab  00000000  00000000  000423a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002348  00000000  00000000  0004dc4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003b31  00000000  00000000  0004ff94  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00017868  00000000  00000000  00053ac5  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  0006b330  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000018c0  00000000  00000000  0006b390  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000700de  2**0
                  CONTENTS, READONLY
 19 .cpu          00000012  00000000  00000000  000700e1  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000700f3  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000700f4  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000014  00000000  00000000  000700f5  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000014  00000000  00000000  00070109  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000014  00000000  00000000  0007011d  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 0000000a  00000000  00000000  00070131  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 0000001e  00000000  00000000  0007013b  2**0
                  CONTENTS, READONLY
 27 .jdi          0000bf9f  00000000  00000000  00070159  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     000d77d3  00000000  00000000  0007c0f8  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04020000 l    d  .entry	00000000 .entry
04020020 l    d  .exceptions	00000000 .exceptions
04020244 l    d  .text	00000000 .text
00000000 l    d  .rodata	00000000 .rodata
000003fc l    d  .rwdata	00000000 .rwdata
00001f80 l    d  .bss	00000000 .bss
000020ec l    d  .SDRAM_Controller_Shared	00000000 .SDRAM_Controller_Shared
04032060 l    d  .SysSigProc_Onchip_Memory	00000000 .SysSigProc_Onchip_Memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 C:/RTES/miniproject/sw/nios/SysSigProc_bsp//obj/HAL/src/crt0.o
0402028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 sigproc_main.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
000000fa l     O .rodata	00000010 zeroes.4404
040229ec l     F .text	000000bc __sbprintf
0000010a l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
04022bfc l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0402472c l     F .text	00000008 __fp_unlock
04024740 l     F .text	0000019c __sinit.part.1
040248dc l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
000003fc l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
00000840 l     O .rwdata	00000020 lc_ctype_charset
00000820 l     O .rwdata	00000020 lc_message_charset
00000860 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0000013c l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
04027cd8 l     F .text	000000fc __sprint_r.part.0
00000270 l     O .rodata	00000010 blanks.4348
00000260 l     O .rodata	00000010 zeroes.4349
04029264 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0402cf20 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0402d074 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0402d0a0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0402d42c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0402d50c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0402d5f8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0402d7cc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
00001f6c l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0402da48 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0402db7c l     F .text	00000034 alt_dev_reg
00000e48 l     O .rwdata	00001060 SysSigProc_JTAG_UART
00001ea8 l     O .rwdata	00000048 Mailbox_AudioToSigProc
00001ef0 l     O .rwdata	00000048 Mailbox_SigProcToAudio
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0402de8c l     F .text	0000020c altera_avalon_jtag_uart_irq
0402e098 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_mailbox_simple.c
0402e6d0 l     F .text	00000090 altera_avalon_mailbox_identify
0402e760 l     F .text	00000078 altera_avalon_mailbox_post
0402e7d8 l     F .text	00000138 altera_avalon_mailbox_simple_tx_isr
0402e910 l     F .text	000000a8 altera_avalon_mailbox_simple_rx_isr
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0402f2b4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0402f5b4 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0402f6f4 l     F .text	0000003c alt_get_errno
0402f730 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00001fb8 g     O .bss	00000004 alt_instruction_exception_handler
0402731c g     F .text	00000074 _mprec_log10
0402eda4 g     F .text	00000150 altera_avalon_mailbox_send
04027408 g     F .text	0000008c __any_on
04029800 g     F .text	00000054 _isatty_r
00000148 g     O .rodata	00000028 __mprec_tinytens
0402d708 g     F .text	0000007c alt_main
0402066c g     F .text	000000c0 _puts_r
00001fec g     O .bss	00000100 alt_irq
04029854 g     F .text	00000060 _lseek_r
040304dc g       *ABS*	00000000 __flash_rwdata_start
0402ba4c g     F .text	00000088 .hidden __eqdf2
000020ec g       *ABS*	00000000 __alt_heap_start
04020630 g     F .text	0000003c printf
04020498 g     F .text	0000005c setup_switch_interrupts
04029a6c g     F .text	0000009c _wcrtomb_r
04027b98 g     F .text	0000005c __sseek
04024a7c g     F .text	00000010 __sinit
04029914 g     F .text	00000140 __swbuf_r
04025544 g     F .text	0000007c _setlocale_r
040248e4 g     F .text	00000068 __sfmoreglue
0402d7a8 g     F .text	00000024 __malloc_unlock
04026214 g     F .text	0000015c memmove
04024a64 g     F .text	00000018 _cleanup
04026498 g     F .text	000000a8 _Balloc
0402bad4 g     F .text	000000dc .hidden __gtdf2
0402faec g     F .text	00000024 altera_nios2_gen2_irq_init
04020000 g     F .entry	0000001c __reset
04020020 g       *ABS*	00000000 __flash_exceptions_start
040297a4 g     F .text	0000005c _fstat_r
00001fa4 g     O .bss	00000004 errno
04027b14 g     F .text	00000008 __seofread
04020360 g     F .text	00000050 receive_callback
00001fb0 g     O .bss	00000004 alt_argv
00009f38 g       *ABS*	00000000 _gp
0402da18 g     F .text	00000030 usleep
0402eef4 g     F .text	0000013c altera_avalon_mailbox_retrieve_poll
00000cc8 g     O .rwdata	00000180 alt_fd_list
0402f454 g     F .text	00000090 alt_find_dev
040260cc g     F .text	00000148 memcpy
00000000 g       *ABS*	00000000 __alt_mem_SDRAM_Controller_Shared
04024734 g     F .text	0000000c _cleanup_r
0402cd38 g     F .text	000000dc .hidden __floatsidf
0402f678 g     F .text	0000007c alt_io_redirect
0402bbb0 g     F .text	000000f4 .hidden __ltdf2
040300e0 g       *ABS*	00000000 __DTOR_END__
0402072c g     F .text	00000014 puts
0402f518 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0402e9b8 g     F .text	00000078 altera_avalon_mailbox_simple_init
040279f8 g     F .text	00000074 __fpclassifyd
04027278 g     F .text	000000a4 __ratio
04029248 g     F .text	0000001c __vfiprintf_internal
0402e290 g     F .text	0000021c altera_avalon_jtag_uart_read
04020600 g     F .text	00000030 _printf_r
0402a7fc g     F .text	00000064 .hidden __udivsi3
0402d468 g     F .text	000000a4 isatty
00000198 g     O .rodata	000000c8 __mprec_tens
0402ed2c g     F .text	00000078 altera_avalon_mailbox_status
0402ec14 g     F .text	00000118 altera_avalon_mailbox_close
040255c0 g     F .text	0000000c __locale_charset
0402fcbc g     F .text	00000090 alt_icache_flush
00001fa0 g     O .bss	00000004 __malloc_top_pad
00001f40 g     O .rwdata	00000004 __mb_cur_max
040255f0 g     F .text	0000000c _localeconv_r
040268a4 g     F .text	0000003c __i2b
04024f00 g     F .text	000004bc __sfvwrite_r
04027a6c g     F .text	00000054 _sbrk_r
040298b4 g     F .text	00000060 _read_r
00001f60 g     O .rwdata	00000004 alt_max_fd
04029498 g     F .text	000000f0 _fclose_r
040246fc g     F .text	00000030 fflush
00001f9c g     O .bss	00000004 __malloc_max_sbrked_mem
0402a8b8 g     F .text	000008ac .hidden __adddf3
04020448 g     F .text	00000050 isr_switches
04027020 g     F .text	0000010c __b2d
0402a1cc g     F .text	00000538 .hidden __umoddi3
0402d634 g     F .text	000000d4 lseek
00001f38 g     O .rwdata	00000004 _global_impure_ptr
04027494 g     F .text	00000564 _realloc_r
000020ec g       *ABS*	00000000 __bss_end
0402d33c g     F .text	000000f0 alt_iic_isr_register
0402f9e4 g     F .text	00000108 alt_tick
04029c54 g     F .text	00000578 .hidden __udivdi3
04029700 g     F .text	00000024 _fputwc_r
00000170 g     O .rodata	00000028 __mprec_bigtens
04026688 g     F .text	00000104 __s2b
0402ce14 g     F .text	000000a8 .hidden __floatunsidf
04026d60 g     F .text	00000060 __mcmp
04024a9c g     F .text	00000018 __fp_lock_all
0402d2f0 g     F .text	0000004c alt_ic_irq_enabled
0402f948 g     F .text	0000009c alt_alarm_stop
00001fa8 g     O .bss	00000004 alt_irq_active
040200fc g     F .exceptions	000000d4 alt_irq_handler
00000ca0 g     O .rwdata	00000028 alt_dev_null
0402d02c g     F .text	00000048 alt_dcache_flush_all
0402678c g     F .text	00000068 __hi0bits
00001f84 g     O .bss	00000008 mail
0402ccb8 g     F .text	00000080 .hidden __fixdfsi
00001f80 g       *ABS*	00000000 __ram_rwdata_end
00001f58 g     O .rwdata	00000008 alt_dev_list
0402da84 g     F .text	000000f8 write
000003fc g       *ABS*	00000000 __ram_rodata_end
0402d0dc g     F .text	000000b0 fstat
0402bbb0 g     F .text	000000f4 .hidden __ledf2
04026ad8 g     F .text	00000140 __pow5mult
04027dec g     F .text	0000145c ___vfiprintf_internal_r
00001f94 g     O .bss	00000004 __nlocale_changed
0402a860 g     F .text	00000058 .hidden __umodsi3
04020000 g       *ABS*	00000000 __alt_mem_SysSigProc_Onchip_Memory
000020ec g       *ABS*	00000000 end
0402ddcc g     F .text	000000c0 altera_avalon_jtag_uart_init
040201d0 g     F .exceptions	00000074 alt_instruction_exception_entry
040300e0 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
0402cebc g     F .text	00000064 .hidden __clzsi2
0402e4ac g     F .text	00000224 altera_avalon_jtag_uart_write
04024a8c g     F .text	00000004 __sfp_lock_acquire
04025fe8 g     F .text	000000e4 memchr
040207d8 g     F .text	000021f8 ___vfprintf_internal_r
04020408 g     F .text	00000040 choose_task
04024bf0 g     F .text	00000310 _free_r
040255cc g     F .text	00000010 __locale_mb_cur_max
0402ff2c g     F .text	00000180 __call_exitprocs
00001f90 g     O .bss	00000004 __mlocale_changed
00001f44 g     O .rwdata	00000004 __malloc_sbrk_base
04020244 g     F .text	0000004c _start
00001fbc g     O .bss	00000004 _alt_tick_rate
04026c18 g     F .text	00000148 __lshift
00001fc0 g     O .bss	00000004 _alt_nticks
0402d808 g     F .text	000000fc read
0402dbe8 g     F .text	00000080 alt_sys_init
0402fe14 g     F .text	00000118 __register_exitproc
040203b0 g     F .text	00000058 receive_mail
040268e0 g     F .text	000001f8 __multiply
0402e138 g     F .text	00000068 altera_avalon_jtag_uart_close
000003fc g       *ABS*	00000000 __ram_rwdata_start
00000000 g       *ABS*	00000000 __ram_rodata_start
00001fc4 g     O .bss	00000028 __malloc_current_mallinfo
0402712c g     F .text	0000014c __d2b
0402dc68 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0402fc18 g     F .text	000000a4 alt_get_fd
0402f15c g     F .text	00000158 alt_busy_sleep
04029380 g     F .text	00000054 _close_r
0402fd98 g     F .text	0000007c memcmp
0402dd28 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
000020ec g       *ABS*	00000000 __alt_stack_base
0402dd78 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
04022aa8 g     F .text	00000154 __swsetup_r
0402b164 g     F .text	000008e8 .hidden __divdf3
0402494c g     F .text	00000118 __sfp
04027390 g     F .text	00000078 __copybits
00000898 g     O .rwdata	00000408 __malloc_av_
04024a98 g     F .text	00000004 __sinit_lock_release
0402bca4 g     F .text	00000718 .hidden __muldf3
040204f4 g     F .text	000000d0 overall_function
04027ac0 g     F .text	00000054 __sread
0402fb10 g     F .text	00000108 alt_find_file
0402f2f0 g     F .text	000000a4 alt_dev_llist_insert
0402d784 g     F .text	00000024 __malloc_lock
0402d968 g     F .text	000000b0 sbrk
040246a0 g     F .text	0000005c _fflush_r
040293d4 g     F .text	000000c4 _calloc_r
00001f80 g     O .bss	00000004 choice
00001f80 g       *ABS*	00000000 __bss_start
04026370 g     F .text	00000128 memset
040205c4 g     F .text	0000003c main
00001fb4 g     O .bss	00000004 alt_envp
00001f98 g     O .bss	00000004 __malloc_max_total_mem
0402dcc8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
04029a54 g     F .text	00000018 __swbuf
04020290 g     F .text	00000054 send_callback
04027bf4 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
04029588 g     F .text	00000014 fclose
04022dfc g     F .text	00001688 _dtoa_r
040257dc g     F .text	0000080c _malloc_r
04029bc8 g     F .text	00000030 __ascii_wctomb
00001f64 g     O .rwdata	00000004 alt_errno
040253bc g     F .text	000000c4 _fwalk
0402a704 g     F .text	00000084 .hidden __divsi3
04024acc g     F .text	00000124 _malloc_trim_r
040300e0 g       *ABS*	00000000 __CTOR_END__
04027bfc g     F .text	000000dc strcmp
040300e0 g       *ABS*	00000000 __flash_rodata_start
040300e0 g       *ABS*	00000000 __DTOR_LIST__
0402ba4c g     F .text	00000088 .hidden __nedf2
0402dbb0 g     F .text	00000038 alt_irq_init
0402d904 g     F .text	00000064 alt_release_fd
00000280 g     O .rodata	00000100 .hidden __clz_tab
00001f8c g     O .bss	00000004 _PathLocale
0402fd4c g     F .text	00000014 atexit
04029320 g     F .text	00000060 _write_r
040255fc g     F .text	00000018 setlocale
00001f3c g     O .rwdata	00000004 _impure_ptr
00001fac g     O .bss	00000004 alt_argc
04024484 g     F .text	0000021c __sflush_r
0402f3f4 g     F .text	00000060 _do_dtors
040255e8 g     F .text	00000008 __locale_cjk_lang
04020020 g       .exceptions	00000000 alt_irq_entry
04026fbc g     F .text	00000064 __ulp
04024ab4 g     F .text	00000018 __fp_unlock_all
00001f50 g     O .rwdata	00000008 alt_fs_list
04020020 g       *ABS*	00000000 __ram_exceptions_start
04025614 g     F .text	0000000c localeconv
040202e4 g     F .text	0000007c send_mail
0402d18c g     F .text	00000050 alt_ic_isr_register
00001f80 g       *ABS*	00000000 _edata
000020ec g       *ABS*	00000000 _end
0402959c g     F .text	00000164 __fputwc
04020244 g       *ABS*	00000000 __ram_exceptions_end
0402e1a0 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0402d264 g     F .text	0000008c alt_ic_irq_disable
00001f70 g     O .rwdata	00000008 alt_mailbox_simple_list
04027b1c g     F .text	0000007c __swrite
00001f48 g     O .rwdata	00000004 __malloc_trim_threshold
040255dc g     F .text	0000000c __locale_msgcharset
0402fd60 g     F .text	00000038 exit
04025480 g     F .text	000000c4 _fwalk_reent
04026dc0 g     F .text	000001fc __mdiff
0402a788 g     F .text	00000074 .hidden __modsi3
04000000 g       *ABS*	00000000 __alt_data_end
04020020 g     F .exceptions	00000000 alt_exception
04024a90 g     F .text	00000004 __sfp_lock_release
0402ea30 g     F .text	000001e4 altera_avalon_mailbox_open
040300ac g     F .text	00000034 _exit
0402f030 g     F .text	0000012c alt_alarm_start
04025620 g     F .text	000001bc __smakebuf_r
04020740 g     F .text	00000098 strlen
0402f7f4 g     F .text	00000154 open
0402bad4 g     F .text	000000dc .hidden __gedf2
00001f4c g     O .rwdata	00000004 __wctomb
04027dd4 g     F .text	00000018 __sprint_r
0402f4e4 g     F .text	00000034 alt_icache_flush_all
00001f68 g     O .rwdata	00000004 alt_priority_mask
0402d1dc g     F .text	00000088 alt_ic_irq_enable
040229d0 g     F .text	0000001c __vfprintf_internal
04029bf8 g     F .text	0000005c _wctomb_r
0402c3bc g     F .text	000008fc .hidden __subdf3
040267f4 g     F .text	000000b0 __lo0bits
00001f78 g     O .rwdata	00000008 alt_alarm_list
0402f394 g     F .text	00000060 _do_ctors
04029b08 g     F .text	000000c0 wcrtomb
0402cf5c g     F .text	000000d0 close
0402d574 g     F .text	00000084 alt_load
04029724 g     F .text	00000080 fputwc
04024a94 g     F .text	00000004 __sinit_lock_acquire
04026568 g     F .text	00000120 __multadd
04026540 g     F .text	00000028 _Bfree



Disassembly of section .entry:

04020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 4020000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 4020004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 4020008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 402000c:	00bffd16 	blt	zero,r2,4020004 <__flash_rwdata_start+0xfffefb28>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4020010:	004100b4 	movhi	at,1026
    ori r1, r1, %lo(_start)
 4020014:	08409114 	ori	at,at,580
    jmp r1
 4020018:	0800683a 	jmp	at
 402001c:	00000000 	call	0 <__alt_mem_SDRAM_Controller_Shared>

Disassembly of section .exceptions:

04020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4020020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4020024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4020028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 402002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4020030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4020034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4020038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 402003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4020040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4020044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4020048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 402004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4020050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4020054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4020058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 402005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4020060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4020064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4020068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 402006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4020070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4020074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4020078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 402007c:	10000326 	beq	r2,zero,402008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4020080:	20000226 	beq	r4,zero,402008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4020084:	40200fc0 	call	40200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4020088:	00000706 	br	40200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 402008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4020090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4020094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4020098:	40201d00 	call	40201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 402009c:	1000021e 	bne	r2,zero,40200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40200f8:	ef80083a 	eret

040200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40200fc:	defff904 	addi	sp,sp,-28
 4020100:	dfc00615 	stw	ra,24(sp)
 4020104:	df000515 	stw	fp,20(sp)
 4020108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 402010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4020110:	0005313a 	rdctl	r2,ipending
 4020114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4020118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 402011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4020120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4020124:	00800044 	movi	r2,1
 4020128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 402012c:	e0fffb17 	ldw	r3,-20(fp)
 4020130:	e0bffc17 	ldw	r2,-16(fp)
 4020134:	1884703a 	and	r2,r3,r2
 4020138:	10001426 	beq	r2,zero,402018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 402013c:	00800034 	movhi	r2,0
 4020140:	1087fb04 	addi	r2,r2,8172
 4020144:	e0fffd17 	ldw	r3,-12(fp)
 4020148:	180690fa 	slli	r3,r3,3
 402014c:	10c5883a 	add	r2,r2,r3
 4020150:	10c00017 	ldw	r3,0(r2)
 4020154:	00800034 	movhi	r2,0
 4020158:	1087fb04 	addi	r2,r2,8172
 402015c:	e13ffd17 	ldw	r4,-12(fp)
 4020160:	200890fa 	slli	r4,r4,3
 4020164:	1105883a 	add	r2,r2,r4
 4020168:	10800104 	addi	r2,r2,4
 402016c:	10800017 	ldw	r2,0(r2)
 4020170:	1009883a 	mov	r4,r2
 4020174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4020178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 402017c:	0005313a 	rdctl	r2,ipending
 4020180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4020184:	e0bfff17 	ldw	r2,-4(fp)
 4020188:	00000706 	br	40201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 402018c:	e0bffc17 	ldw	r2,-16(fp)
 4020190:	1085883a 	add	r2,r2,r2
 4020194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4020198:	e0bffd17 	ldw	r2,-12(fp)
 402019c:	10800044 	addi	r2,r2,1
 40201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40201a4:	003fe106 	br	402012c <__flash_rwdata_start+0xfffefc50>

    active = alt_irq_pending ();
 40201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 40201ac:	e0bffb17 	ldw	r2,-20(fp)
 40201b0:	103fdb1e 	bne	r2,zero,4020120 <__flash_rwdata_start+0xfffefc44>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40201b4:	0001883a 	nop
}
 40201b8:	0001883a 	nop
 40201bc:	e037883a 	mov	sp,fp
 40201c0:	dfc00117 	ldw	ra,4(sp)
 40201c4:	df000017 	ldw	fp,0(sp)
 40201c8:	dec00204 	addi	sp,sp,8
 40201cc:	f800283a 	ret

040201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 40201d0:	defffb04 	addi	sp,sp,-20
 40201d4:	dfc00415 	stw	ra,16(sp)
 40201d8:	df000315 	stw	fp,12(sp)
 40201dc:	df000304 	addi	fp,sp,12
 40201e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 40201e4:	000531fa 	rdctl	r2,exception
 40201e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 40201ec:	e0bffd17 	ldw	r2,-12(fp)
 40201f0:	10801f0c 	andi	r2,r2,124
 40201f4:	1004d0ba 	srli	r2,r2,2
 40201f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 40201fc:	0005333a 	rdctl	r2,badaddr
 4020200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 4020204:	d0a02017 	ldw	r2,-32640(gp)
 4020208:	10000726 	beq	r2,zero,4020228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 402020c:	d0a02017 	ldw	r2,-32640(gp)
 4020210:	e0fffd17 	ldw	r3,-12(fp)
 4020214:	e1bffe17 	ldw	r6,-8(fp)
 4020218:	e17fff17 	ldw	r5,-4(fp)
 402021c:	1809883a 	mov	r4,r3
 4020220:	103ee83a 	callr	r2
 4020224:	00000206 	br	4020230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4020228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 402022c:	0005883a 	mov	r2,zero
}
 4020230:	e037883a 	mov	sp,fp
 4020234:	dfc00117 	ldw	ra,4(sp)
 4020238:	df000017 	ldw	fp,0(sp)
 402023c:	dec00204 	addi	sp,sp,8
 4020240:	f800283a 	ret

Disassembly of section .text:

04020244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 4020244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 4020248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 402024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 4020250:	00bffd16 	blt	zero,r2,4020248 <__flash_rwdata_start+0xfffefd6c>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4020254:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
 4020258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 402025c:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
 4020260:	d6a7ce14 	ori	gp,gp,40760
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4020264:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
 4020268:	1087e014 	ori	r2,r2,8064

    movhi r3, %hi(__bss_end)
 402026c:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
 4020270:	18c83b14 	ori	r3,r3,8428

    beq r2, r3, 1f
 4020274:	10c00326 	beq	r2,r3,4020284 <_start+0x40>

0:
    stw zero, (r2)
 4020278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 402027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 4020280:	10fffd36 	bltu	r2,r3,4020278 <__flash_rwdata_start+0xfffefd9c>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4020284:	402d5740 	call	402d574 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4020288:	402d7080 	call	402d708 <alt_main>

0402028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 402028c:	003fff06 	br	402028c <__flash_rwdata_start+0xfffefdb0>

04020290 <send_callback>:
// ----------------- Function definitions -------------------------------------

// ----------------- Mailbox functions ----------------------------------------

void send_callback(void* report, int status)
{
 4020290:	defffc04 	addi	sp,sp,-16
 4020294:	dfc00315 	stw	ra,12(sp)
 4020298:	df000215 	stw	fp,8(sp)
 402029c:	df000204 	addi	fp,sp,8
 40202a0:	e13ffe15 	stw	r4,-8(fp)
 40202a4:	e17fff15 	stw	r5,-4(fp)
	if(!status)
 40202a8:	e0bfff17 	ldw	r2,-4(fp)
 40202ac:	1000041e 	bne	r2,zero,40202c0 <send_callback+0x30>
	{
		printf("Sending completed.\n");
 40202b0:	01000034 	movhi	r4,0
 40202b4:	21000004 	addi	r4,r4,0
 40202b8:	402072c0 	call	402072c <puts>
	}
	else
	{
		printf("Sending error.\n");
	}
}
 40202bc:	00000306 	br	40202cc <send_callback+0x3c>
	{
		printf("Sending completed.\n");
	}
	else
	{
		printf("Sending error.\n");
 40202c0:	01000034 	movhi	r4,0
 40202c4:	21000504 	addi	r4,r4,20
 40202c8:	402072c0 	call	402072c <puts>
	}
}
 40202cc:	0001883a 	nop
 40202d0:	e037883a 	mov	sp,fp
 40202d4:	dfc00117 	ldw	ra,4(sp)
 40202d8:	df000017 	ldw	fp,0(sp)
 40202dc:	dec00204 	addi	sp,sp,8
 40202e0:	f800283a 	ret

040202e4 <send_mail>:

void send_mail(alt_u32 start_addr, alt_u32 storage_length)
{
 40202e4:	defff904 	addi	sp,sp,-28
 40202e8:	dfc00615 	stw	ra,24(sp)
 40202ec:	df000515 	stw	fp,20(sp)
 40202f0:	df000504 	addi	fp,sp,20
 40202f4:	e13ffe15 	stw	r4,-8(fp)
 40202f8:	e17fff15 	stw	r5,-4(fp)
	// Load mailbox
	altera_avalon_mailbox_dev* mailbox_SigProcToAudio = altera_avalon_mailbox_open("/dev/Mailbox_SigProcToAudio", send_callback, NULL);
 40202fc:	000d883a 	mov	r6,zero
 4020300:	014100b4 	movhi	r5,1026
 4020304:	2940a404 	addi	r5,r5,656
 4020308:	01000034 	movhi	r4,0
 402030c:	21000904 	addi	r4,r4,36
 4020310:	402ea300 	call	402ea30 <altera_avalon_mailbox_open>
 4020314:	e0bffb15 	stw	r2,-20(fp)
	// Create mail "envelope"
	alt_u32 mail[2] = {start_addr, storage_length};
 4020318:	e0bffe17 	ldw	r2,-8(fp)
 402031c:	e0bffc15 	stw	r2,-16(fp)
 4020320:	e0bfff17 	ldw	r2,-4(fp)
 4020324:	e0bffd15 	stw	r2,-12(fp)
	// Send message
	altera_avalon_mailbox_send(mailbox_SigProcToAudio, mail, 0, POLL);
 4020328:	e0bffc04 	addi	r2,fp,-16
 402032c:	01c00044 	movi	r7,1
 4020330:	000d883a 	mov	r6,zero
 4020334:	100b883a 	mov	r5,r2
 4020338:	e13ffb17 	ldw	r4,-20(fp)
 402033c:	402eda40 	call	402eda4 <altera_avalon_mailbox_send>
	// Close mailbox
	altera_avalon_mailbox_close(mailbox_SigProcToAudio);
 4020340:	e13ffb17 	ldw	r4,-20(fp)
 4020344:	402ec140 	call	402ec14 <altera_avalon_mailbox_close>
}
 4020348:	0001883a 	nop
 402034c:	e037883a 	mov	sp,fp
 4020350:	dfc00117 	ldw	ra,4(sp)
 4020354:	df000017 	ldw	fp,0(sp)
 4020358:	dec00204 	addi	sp,sp,8
 402035c:	f800283a 	ret

04020360 <receive_callback>:

void receive_callback(void* message)
{
 4020360:	defffd04 	addi	sp,sp,-12
 4020364:	dfc00215 	stw	ra,8(sp)
 4020368:	df000115 	stw	fp,4(sp)
 402036c:	df000104 	addi	fp,sp,4
 4020370:	e13fff15 	stw	r4,-4(fp)
	if(message != NULL)
 4020374:	e0bfff17 	ldw	r2,-4(fp)
 4020378:	10000426 	beq	r2,zero,402038c <receive_callback+0x2c>
	{
		printf("Receiving completed.\n");
 402037c:	01000034 	movhi	r4,0
 4020380:	21001004 	addi	r4,r4,64
 4020384:	402072c0 	call	402072c <puts>
	}
	else
	{
		printf("Receiving error.\n");
	}
}
 4020388:	00000306 	br	4020398 <receive_callback+0x38>
	{
		printf("Receiving completed.\n");
	}
	else
	{
		printf("Receiving error.\n");
 402038c:	01000034 	movhi	r4,0
 4020390:	21001604 	addi	r4,r4,88
 4020394:	402072c0 	call	402072c <puts>
	}
}
 4020398:	0001883a 	nop
 402039c:	e037883a 	mov	sp,fp
 40203a0:	dfc00117 	ldw	ra,4(sp)
 40203a4:	df000017 	ldw	fp,0(sp)
 40203a8:	dec00204 	addi	sp,sp,8
 40203ac:	f800283a 	ret

040203b0 <receive_mail>:

void receive_mail()
{
 40203b0:	defffd04 	addi	sp,sp,-12
 40203b4:	dfc00215 	stw	ra,8(sp)
 40203b8:	df000115 	stw	fp,4(sp)
 40203bc:	df000104 	addi	fp,sp,4
	// Load mailbox
	altera_avalon_mailbox_dev* mailbox_AudioToSigProc = altera_avalon_mailbox_open("/dev/Mailbox_AudioToSigProc", NULL, receive_callback);
 40203c0:	018100b4 	movhi	r6,1026
 40203c4:	3180d804 	addi	r6,r6,864
 40203c8:	000b883a 	mov	r5,zero
 40203cc:	01000034 	movhi	r4,0
 40203d0:	21001b04 	addi	r4,r4,108
 40203d4:	402ea300 	call	402ea30 <altera_avalon_mailbox_open>
 40203d8:	e0bfff15 	stw	r2,-4(fp)

	altera_avalon_mailbox_retrieve_poll(mailbox_AudioToSigProc, mail, 0);
 40203dc:	000d883a 	mov	r6,zero
 40203e0:	d1601304 	addi	r5,gp,-32692
 40203e4:	e13fff17 	ldw	r4,-4(fp)
 40203e8:	402eef40 	call	402eef4 <altera_avalon_mailbox_retrieve_poll>
	alt_dcache_flush_all();
 40203ec:	402d02c0 	call	402d02c <alt_dcache_flush_all>
}
 40203f0:	0001883a 	nop
 40203f4:	e037883a 	mov	sp,fp
 40203f8:	dfc00117 	ldw	ra,4(sp)
 40203fc:	df000017 	ldw	fp,0(sp)
 4020400:	dec00204 	addi	sp,sp,8
 4020404:	f800283a 	ret

04020408 <choose_task>:

// ----------------- Interrupt and task choosing functions -------------------------


void choose_task(int task)
{
 4020408:	defffd04 	addi	sp,sp,-12
 402040c:	dfc00215 	stw	ra,8(sp)
 4020410:	df000115 	stw	fp,4(sp)
 4020414:	df000104 	addi	fp,sp,4
 4020418:	e13fff15 	stw	r4,-4(fp)
	if(task == 1)
 402041c:	e0bfff17 	ldw	r2,-4(fp)
 4020420:	10800058 	cmpnei	r2,r2,1
 4020424:	1000021e 	bne	r2,zero,4020430 <choose_task+0x28>
	{
		// First switch (SW0)
		overall_function(1);
 4020428:	01000044 	movi	r4,1
 402042c:	40204f40 	call	40204f4 <overall_function>
	else if(task == 4)
	{
		// Third switch (SW2)
		// Etc. add as needed...
	}
}
 4020430:	0001883a 	nop
 4020434:	e037883a 	mov	sp,fp
 4020438:	dfc00117 	ldw	ra,4(sp)
 402043c:	df000017 	ldw	fp,0(sp)
 4020440:	dec00204 	addi	sp,sp,8
 4020444:	f800283a 	ret

04020448 <isr_switches>:

void isr_switches(void* context)
{
 4020448:	defffd04 	addi	sp,sp,-12
 402044c:	df000215 	stw	fp,8(sp)
 4020450:	df000204 	addi	fp,sp,8
 4020454:	e13fff15 	stw	r4,-4(fp)
	// Read interrupt source
	uint8_t pinvals = IORD_8DIRECT(PIO_SWITCHES_BASE, PIO_IntrSwitch_IRQFLAG);
 4020458:	00810134 	movhi	r2,1028
 402045c:	10843704 	addi	r2,r2,4316
 4020460:	10800023 	ldbuio	r2,0(r2)
 4020464:	10803fcc 	andi	r2,r2,255
 4020468:	e0bffe05 	stb	r2,-8(fp)
	// Save choice
	choice = (int)pinvals;
 402046c:	e0bffe03 	ldbu	r2,-8(fp)
 4020470:	d0a01215 	stw	r2,-32696(gp)
	// Clear the interrupt flag
	IOWR_8DIRECT(PIO_SWITCHES_BASE, PIO_IntrSwitch_IRQFLAG, pinvals);
 4020474:	e0fffe03 	ldbu	r3,-8(fp)
 4020478:	00810134 	movhi	r2,1028
 402047c:	10843704 	addi	r2,r2,4316
 4020480:	10c00025 	stbio	r3,0(r2)
}
 4020484:	0001883a 	nop
 4020488:	e037883a 	mov	sp,fp
 402048c:	df000017 	ldw	fp,0(sp)
 4020490:	dec00104 	addi	sp,sp,4
 4020494:	f800283a 	ret

04020498 <setup_switch_interrupts>:

void setup_switch_interrupts(uint8_t chosen_switches)
{
 4020498:	defffc04 	addi	sp,sp,-16
 402049c:	dfc00315 	stw	ra,12(sp)
 40204a0:	df000215 	stw	fp,8(sp)
 40204a4:	df000204 	addi	fp,sp,8
 40204a8:	2005883a 	mov	r2,r4
 40204ac:	e0bfff05 	stb	r2,-4(fp)
	// Setup interrupts on the chosen switches
	IOWR_8DIRECT(PIO_SWITCHES_BASE, PIO_IntrSwitch_IRQEN, chosen_switches);
 40204b0:	e0ffff03 	ldbu	r3,-4(fp)
 40204b4:	00810134 	movhi	r2,1028
 40204b8:	10843604 	addi	r2,r2,4312
 40204bc:	10c00025 	stbio	r3,0(r2)
	alt_ic_isr_register(PIO_SWITCHES_IRQ_INTERRUPT_CONTROLLER_ID, PIO_SWITCHES_IRQ, isr_switches, NULL, NULL);
 40204c0:	d8000015 	stw	zero,0(sp)
 40204c4:	000f883a 	mov	r7,zero
 40204c8:	018100b4 	movhi	r6,1026
 40204cc:	31811204 	addi	r6,r6,1096
 40204d0:	01400104 	movi	r5,4
 40204d4:	0009883a 	mov	r4,zero
 40204d8:	402d18c0 	call	402d18c <alt_ic_isr_register>
	return;
 40204dc:	0001883a 	nop
}
 40204e0:	e037883a 	mov	sp,fp
 40204e4:	dfc00117 	ldw	ra,4(sp)
 40204e8:	df000017 	ldw	fp,0(sp)
 40204ec:	dec00204 	addi	sp,sp,8
 40204f0:	f800283a 	ret

040204f4 <overall_function>:

// --------------------- DMA/Custom Instruction function -----------------------

void overall_function(int choice)
{
 40204f4:	defff804 	addi	sp,sp,-32
 40204f8:	dfc00715 	stw	ra,28(sp)
 40204fc:	df000615 	stw	fp,24(sp)
 4020500:	df000604 	addi	fp,sp,24
 4020504:	e13fff15 	stw	r4,-4(fp)
	receive_mail();
 4020508:	40203b00 	call	40203b0 <receive_mail>
	int total_snippets = mail[1];
 402050c:	d0a01417 	ldw	r2,-32688(gp)
 4020510:	e0bffa15 	stw	r2,-24(fp)
	// 48 kHz sampling frequency => 12k samples per snippet
	int words_per_snippet = 12000;
 4020514:	008bb804 	movi	r2,12000
 4020518:	e0bffb15 	stw	r2,-20(fp)
	int handled_snippets = 0;
 402051c:	e03ffc15 	stw	zero,-16(fp)
	int memory_size = total_snippets*words_per_snippet*4;
 4020520:	e0fffa17 	ldw	r3,-24(fp)
 4020524:	e0bffb17 	ldw	r2,-20(fp)
 4020528:	1885383a 	mul	r2,r3,r2
 402052c:	1085883a 	add	r2,r2,r2
 4020530:	1085883a 	add	r2,r2,r2
 4020534:	e0bffd15 	stw	r2,-12(fp)
	int *start_storage_address = mail[0] + memory_size;
 4020538:	d0e01317 	ldw	r3,-32692(gp)
 402053c:	e0bffd17 	ldw	r2,-12(fp)
 4020540:	1885883a 	add	r2,r3,r2
 4020544:	e0bffe15 	stw	r2,-8(fp)
	while(handled_snippets < total_snippets)
 4020548:	00001006 	br	402058c <overall_function+0x98>
	{
		receive_mail();
 402054c:	40203b00 	call	40203b0 <receive_mail>
		// Turn on LED 9, signifying that signal processing is in progress
		IOWR_32DIRECT(PIO_LEDS_SHARED_BASE, 0, 512);
 4020550:	00c08004 	movi	r3,512
 4020554:	00810134 	movhi	r2,1028
 4020558:	10843804 	addi	r2,r2,4320
 402055c:	10c00035 	stwio	r3,0(r2)
		if(choice == 1)
 4020560:	e0bfff17 	ldw	r2,-4(fp)
 4020564:	10800058 	cmpnei	r2,r2,1
 4020568:	1000041e 	bne	r2,zero,402057c <overall_function+0x88>
		{
			// TODO: call accelerator
			printf("At call accelerator: handled_snippets = %i\n", handled_snippets);
 402056c:	e17ffc17 	ldw	r5,-16(fp)
 4020570:	01000034 	movhi	r4,0
 4020574:	21002204 	addi	r4,r4,136
 4020578:	40206300 	call	4020630 <printf>
		else
		{
			// TODO: call C comparison function
		}
		// Turn off LED 9, signifying that signal processing is done
		IOWR_32DIRECT(PIO_LEDS_SHARED_BASE, 0, 0);
 402057c:	0007883a 	mov	r3,zero
 4020580:	00810134 	movhi	r2,1028
 4020584:	10843804 	addi	r2,r2,4320
 4020588:	10c00035 	stwio	r3,0(r2)
	// 48 kHz sampling frequency => 12k samples per snippet
	int words_per_snippet = 12000;
	int handled_snippets = 0;
	int memory_size = total_snippets*words_per_snippet*4;
	int *start_storage_address = mail[0] + memory_size;
	while(handled_snippets < total_snippets)
 402058c:	e0fffc17 	ldw	r3,-16(fp)
 4020590:	e0bffa17 	ldw	r2,-24(fp)
 4020594:	18bfed16 	blt	r3,r2,402054c <__flash_rwdata_start+0xffff0070>
			// TODO: call C comparison function
		}
		// Turn off LED 9, signifying that signal processing is done
		IOWR_32DIRECT(PIO_LEDS_SHARED_BASE, 0, 0);
	}
	send_mail((alt_u32)start_storage_address, (alt_u32)memory_size);
 4020598:	e0bffe17 	ldw	r2,-8(fp)
 402059c:	e0fffd17 	ldw	r3,-12(fp)
 40205a0:	180b883a 	mov	r5,r3
 40205a4:	1009883a 	mov	r4,r2
 40205a8:	40202e40 	call	40202e4 <send_mail>
}
 40205ac:	0001883a 	nop
 40205b0:	e037883a 	mov	sp,fp
 40205b4:	dfc00117 	ldw	ra,4(sp)
 40205b8:	df000017 	ldw	fp,0(sp)
 40205bc:	dec00204 	addi	sp,sp,8
 40205c0:	f800283a 	ret

040205c4 <main>:

// ----------------------- Main function ----------------------------------

int main()
{
 40205c4:	defffe04 	addi	sp,sp,-8
 40205c8:	dfc00115 	stw	ra,4(sp)
 40205cc:	df000015 	stw	fp,0(sp)
 40205d0:	d839883a 	mov	fp,sp
	// Setup interrupts on the first 2 switches
	setup_switch_interrupts(0x3);
 40205d4:	010000c4 	movi	r4,3
 40205d8:	40204980 	call	4020498 <setup_switch_interrupts>

	// Wait for switches
	while(1)
	{
		// Poll choice once every millisecond
		usleep(1000);
 40205dc:	0100fa04 	movi	r4,1000
 40205e0:	402da180 	call	402da18 <usleep>
		if(choice != 0)
 40205e4:	d0a01217 	ldw	r2,-32696(gp)
 40205e8:	103ffc26 	beq	r2,zero,40205dc <__flash_rwdata_start+0xffff0100>
		{
			choose_task(choice);
 40205ec:	d0a01217 	ldw	r2,-32696(gp)
 40205f0:	1009883a 	mov	r4,r2
 40205f4:	40204080 	call	4020408 <choose_task>
			choice = 0x0;
 40205f8:	d0201215 	stw	zero,-32696(gp)
		}
	};
 40205fc:	003ff706 	br	40205dc <__flash_rwdata_start+0xffff0100>

04020600 <_printf_r>:
 4020600:	defffd04 	addi	sp,sp,-12
 4020604:	2805883a 	mov	r2,r5
 4020608:	dfc00015 	stw	ra,0(sp)
 402060c:	d9800115 	stw	r6,4(sp)
 4020610:	d9c00215 	stw	r7,8(sp)
 4020614:	21400217 	ldw	r5,8(r4)
 4020618:	d9c00104 	addi	r7,sp,4
 402061c:	100d883a 	mov	r6,r2
 4020620:	40207d80 	call	40207d8 <___vfprintf_internal_r>
 4020624:	dfc00017 	ldw	ra,0(sp)
 4020628:	dec00304 	addi	sp,sp,12
 402062c:	f800283a 	ret

04020630 <printf>:
 4020630:	defffc04 	addi	sp,sp,-16
 4020634:	dfc00015 	stw	ra,0(sp)
 4020638:	d9400115 	stw	r5,4(sp)
 402063c:	d9800215 	stw	r6,8(sp)
 4020640:	d9c00315 	stw	r7,12(sp)
 4020644:	00800034 	movhi	r2,0
 4020648:	1087cf04 	addi	r2,r2,7996
 402064c:	10800017 	ldw	r2,0(r2)
 4020650:	200b883a 	mov	r5,r4
 4020654:	d9800104 	addi	r6,sp,4
 4020658:	11000217 	ldw	r4,8(r2)
 402065c:	40229d00 	call	40229d0 <__vfprintf_internal>
 4020660:	dfc00017 	ldw	ra,0(sp)
 4020664:	dec00404 	addi	sp,sp,16
 4020668:	f800283a 	ret

0402066c <_puts_r>:
 402066c:	defff604 	addi	sp,sp,-40
 4020670:	dc000715 	stw	r16,28(sp)
 4020674:	2021883a 	mov	r16,r4
 4020678:	2809883a 	mov	r4,r5
 402067c:	dc400815 	stw	r17,32(sp)
 4020680:	dfc00915 	stw	ra,36(sp)
 4020684:	2823883a 	mov	r17,r5
 4020688:	40207400 	call	4020740 <strlen>
 402068c:	10c00044 	addi	r3,r2,1
 4020690:	d8800115 	stw	r2,4(sp)
 4020694:	00800034 	movhi	r2,0
 4020698:	10802d04 	addi	r2,r2,180
 402069c:	d8800215 	stw	r2,8(sp)
 40206a0:	00800044 	movi	r2,1
 40206a4:	d8800315 	stw	r2,12(sp)
 40206a8:	00800084 	movi	r2,2
 40206ac:	dc400015 	stw	r17,0(sp)
 40206b0:	d8c00615 	stw	r3,24(sp)
 40206b4:	dec00415 	stw	sp,16(sp)
 40206b8:	d8800515 	stw	r2,20(sp)
 40206bc:	80000226 	beq	r16,zero,40206c8 <_puts_r+0x5c>
 40206c0:	80800e17 	ldw	r2,56(r16)
 40206c4:	10001426 	beq	r2,zero,4020718 <_puts_r+0xac>
 40206c8:	81400217 	ldw	r5,8(r16)
 40206cc:	2880030b 	ldhu	r2,12(r5)
 40206d0:	10c8000c 	andi	r3,r2,8192
 40206d4:	1800061e 	bne	r3,zero,40206f0 <_puts_r+0x84>
 40206d8:	29001917 	ldw	r4,100(r5)
 40206dc:	00f7ffc4 	movi	r3,-8193
 40206e0:	10880014 	ori	r2,r2,8192
 40206e4:	20c6703a 	and	r3,r4,r3
 40206e8:	2880030d 	sth	r2,12(r5)
 40206ec:	28c01915 	stw	r3,100(r5)
 40206f0:	d9800404 	addi	r6,sp,16
 40206f4:	8009883a 	mov	r4,r16
 40206f8:	4024f000 	call	4024f00 <__sfvwrite_r>
 40206fc:	1000091e 	bne	r2,zero,4020724 <_puts_r+0xb8>
 4020700:	00800284 	movi	r2,10
 4020704:	dfc00917 	ldw	ra,36(sp)
 4020708:	dc400817 	ldw	r17,32(sp)
 402070c:	dc000717 	ldw	r16,28(sp)
 4020710:	dec00a04 	addi	sp,sp,40
 4020714:	f800283a 	ret
 4020718:	8009883a 	mov	r4,r16
 402071c:	4024a7c0 	call	4024a7c <__sinit>
 4020720:	003fe906 	br	40206c8 <__flash_rwdata_start+0xffff01ec>
 4020724:	00bfffc4 	movi	r2,-1
 4020728:	003ff606 	br	4020704 <__flash_rwdata_start+0xffff0228>

0402072c <puts>:
 402072c:	00800034 	movhi	r2,0
 4020730:	1087cf04 	addi	r2,r2,7996
 4020734:	200b883a 	mov	r5,r4
 4020738:	11000017 	ldw	r4,0(r2)
 402073c:	402066c1 	jmpi	402066c <_puts_r>

04020740 <strlen>:
 4020740:	208000cc 	andi	r2,r4,3
 4020744:	10002026 	beq	r2,zero,40207c8 <strlen+0x88>
 4020748:	20800007 	ldb	r2,0(r4)
 402074c:	10002026 	beq	r2,zero,40207d0 <strlen+0x90>
 4020750:	2005883a 	mov	r2,r4
 4020754:	00000206 	br	4020760 <strlen+0x20>
 4020758:	10c00007 	ldb	r3,0(r2)
 402075c:	18001826 	beq	r3,zero,40207c0 <strlen+0x80>
 4020760:	10800044 	addi	r2,r2,1
 4020764:	10c000cc 	andi	r3,r2,3
 4020768:	183ffb1e 	bne	r3,zero,4020758 <__flash_rwdata_start+0xffff027c>
 402076c:	10c00017 	ldw	r3,0(r2)
 4020770:	01ffbff4 	movhi	r7,65279
 4020774:	39ffbfc4 	addi	r7,r7,-257
 4020778:	00ca303a 	nor	r5,zero,r3
 402077c:	01a02074 	movhi	r6,32897
 4020780:	19c7883a 	add	r3,r3,r7
 4020784:	31a02004 	addi	r6,r6,-32640
 4020788:	1946703a 	and	r3,r3,r5
 402078c:	1986703a 	and	r3,r3,r6
 4020790:	1800091e 	bne	r3,zero,40207b8 <strlen+0x78>
 4020794:	10800104 	addi	r2,r2,4
 4020798:	10c00017 	ldw	r3,0(r2)
 402079c:	19cb883a 	add	r5,r3,r7
 40207a0:	00c6303a 	nor	r3,zero,r3
 40207a4:	28c6703a 	and	r3,r5,r3
 40207a8:	1986703a 	and	r3,r3,r6
 40207ac:	183ff926 	beq	r3,zero,4020794 <__flash_rwdata_start+0xffff02b8>
 40207b0:	00000106 	br	40207b8 <strlen+0x78>
 40207b4:	10800044 	addi	r2,r2,1
 40207b8:	10c00007 	ldb	r3,0(r2)
 40207bc:	183ffd1e 	bne	r3,zero,40207b4 <__flash_rwdata_start+0xffff02d8>
 40207c0:	1105c83a 	sub	r2,r2,r4
 40207c4:	f800283a 	ret
 40207c8:	2005883a 	mov	r2,r4
 40207cc:	003fe706 	br	402076c <__flash_rwdata_start+0xffff0290>
 40207d0:	0005883a 	mov	r2,zero
 40207d4:	f800283a 	ret

040207d8 <___vfprintf_internal_r>:
 40207d8:	deffb804 	addi	sp,sp,-288
 40207dc:	dfc04715 	stw	ra,284(sp)
 40207e0:	ddc04515 	stw	r23,276(sp)
 40207e4:	dd404315 	stw	r21,268(sp)
 40207e8:	d9002c15 	stw	r4,176(sp)
 40207ec:	282f883a 	mov	r23,r5
 40207f0:	302b883a 	mov	r21,r6
 40207f4:	d9c02d15 	stw	r7,180(sp)
 40207f8:	df004615 	stw	fp,280(sp)
 40207fc:	dd804415 	stw	r22,272(sp)
 4020800:	dd004215 	stw	r20,264(sp)
 4020804:	dcc04115 	stw	r19,260(sp)
 4020808:	dc804015 	stw	r18,256(sp)
 402080c:	dc403f15 	stw	r17,252(sp)
 4020810:	dc003e15 	stw	r16,248(sp)
 4020814:	40255f00 	call	40255f0 <_localeconv_r>
 4020818:	10800017 	ldw	r2,0(r2)
 402081c:	1009883a 	mov	r4,r2
 4020820:	d8803415 	stw	r2,208(sp)
 4020824:	40207400 	call	4020740 <strlen>
 4020828:	d8803715 	stw	r2,220(sp)
 402082c:	d8802c17 	ldw	r2,176(sp)
 4020830:	10000226 	beq	r2,zero,402083c <___vfprintf_internal_r+0x64>
 4020834:	10800e17 	ldw	r2,56(r2)
 4020838:	1000f926 	beq	r2,zero,4020c20 <___vfprintf_internal_r+0x448>
 402083c:	b880030b 	ldhu	r2,12(r23)
 4020840:	10c8000c 	andi	r3,r2,8192
 4020844:	1800061e 	bne	r3,zero,4020860 <___vfprintf_internal_r+0x88>
 4020848:	b9001917 	ldw	r4,100(r23)
 402084c:	00f7ffc4 	movi	r3,-8193
 4020850:	10880014 	ori	r2,r2,8192
 4020854:	20c6703a 	and	r3,r4,r3
 4020858:	b880030d 	sth	r2,12(r23)
 402085c:	b8c01915 	stw	r3,100(r23)
 4020860:	10c0020c 	andi	r3,r2,8
 4020864:	1800c126 	beq	r3,zero,4020b6c <___vfprintf_internal_r+0x394>
 4020868:	b8c00417 	ldw	r3,16(r23)
 402086c:	1800bf26 	beq	r3,zero,4020b6c <___vfprintf_internal_r+0x394>
 4020870:	1080068c 	andi	r2,r2,26
 4020874:	00c00284 	movi	r3,10
 4020878:	10c0c426 	beq	r2,r3,4020b8c <___vfprintf_internal_r+0x3b4>
 402087c:	d8c00404 	addi	r3,sp,16
 4020880:	05000034 	movhi	r20,0
 4020884:	d9001e04 	addi	r4,sp,120
 4020888:	a5003e84 	addi	r20,r20,250
 402088c:	d8c01e15 	stw	r3,120(sp)
 4020890:	d8002015 	stw	zero,128(sp)
 4020894:	d8001f15 	stw	zero,124(sp)
 4020898:	d8003315 	stw	zero,204(sp)
 402089c:	d8003615 	stw	zero,216(sp)
 40208a0:	d8003815 	stw	zero,224(sp)
 40208a4:	1811883a 	mov	r8,r3
 40208a8:	d8003915 	stw	zero,228(sp)
 40208ac:	d8003a15 	stw	zero,232(sp)
 40208b0:	d8002f15 	stw	zero,188(sp)
 40208b4:	d9002815 	stw	r4,160(sp)
 40208b8:	a8800007 	ldb	r2,0(r21)
 40208bc:	10027b26 	beq	r2,zero,40212ac <___vfprintf_internal_r+0xad4>
 40208c0:	00c00944 	movi	r3,37
 40208c4:	a821883a 	mov	r16,r21
 40208c8:	10c0021e 	bne	r2,r3,40208d4 <___vfprintf_internal_r+0xfc>
 40208cc:	00001406 	br	4020920 <___vfprintf_internal_r+0x148>
 40208d0:	10c00326 	beq	r2,r3,40208e0 <___vfprintf_internal_r+0x108>
 40208d4:	84000044 	addi	r16,r16,1
 40208d8:	80800007 	ldb	r2,0(r16)
 40208dc:	103ffc1e 	bne	r2,zero,40208d0 <__flash_rwdata_start+0xffff03f4>
 40208e0:	8563c83a 	sub	r17,r16,r21
 40208e4:	88000e26 	beq	r17,zero,4020920 <___vfprintf_internal_r+0x148>
 40208e8:	d8c02017 	ldw	r3,128(sp)
 40208ec:	d8801f17 	ldw	r2,124(sp)
 40208f0:	45400015 	stw	r21,0(r8)
 40208f4:	1c47883a 	add	r3,r3,r17
 40208f8:	10800044 	addi	r2,r2,1
 40208fc:	d8c02015 	stw	r3,128(sp)
 4020900:	44400115 	stw	r17,4(r8)
 4020904:	d8801f15 	stw	r2,124(sp)
 4020908:	00c001c4 	movi	r3,7
 402090c:	1880a716 	blt	r3,r2,4020bac <___vfprintf_internal_r+0x3d4>
 4020910:	42000204 	addi	r8,r8,8
 4020914:	d9402f17 	ldw	r5,188(sp)
 4020918:	2c4b883a 	add	r5,r5,r17
 402091c:	d9402f15 	stw	r5,188(sp)
 4020920:	80800007 	ldb	r2,0(r16)
 4020924:	1000a826 	beq	r2,zero,4020bc8 <___vfprintf_internal_r+0x3f0>
 4020928:	84400047 	ldb	r17,1(r16)
 402092c:	00bfffc4 	movi	r2,-1
 4020930:	85400044 	addi	r21,r16,1
 4020934:	d8002785 	stb	zero,158(sp)
 4020938:	0007883a 	mov	r3,zero
 402093c:	000f883a 	mov	r7,zero
 4020940:	d8802915 	stw	r2,164(sp)
 4020944:	d8003115 	stw	zero,196(sp)
 4020948:	0025883a 	mov	r18,zero
 402094c:	01401604 	movi	r5,88
 4020950:	01800244 	movi	r6,9
 4020954:	02800a84 	movi	r10,42
 4020958:	02401b04 	movi	r9,108
 402095c:	ad400044 	addi	r21,r21,1
 4020960:	88bff804 	addi	r2,r17,-32
 4020964:	28830436 	bltu	r5,r2,4021578 <___vfprintf_internal_r+0xda0>
 4020968:	100490ba 	slli	r2,r2,2
 402096c:	010100b4 	movhi	r4,1026
 4020970:	21026004 	addi	r4,r4,2432
 4020974:	1105883a 	add	r2,r2,r4
 4020978:	10800017 	ldw	r2,0(r2)
 402097c:	1000683a 	jmp	r2
 4020980:	04021498 	cmpnei	r16,zero,2130
 4020984:	04021578 	rdprs	r16,zero,2133
 4020988:	04021578 	rdprs	r16,zero,2133
 402098c:	040214b8 	rdprs	r16,zero,2130
 4020990:	04021578 	rdprs	r16,zero,2133
 4020994:	04021578 	rdprs	r16,zero,2133
 4020998:	04021578 	rdprs	r16,zero,2133
 402099c:	04021578 	rdprs	r16,zero,2133
 40209a0:	04021578 	rdprs	r16,zero,2133
 40209a4:	04021578 	rdprs	r16,zero,2133
 40209a8:	04020c2c 	andhi	r16,zero,2096
 40209ac:	040213d4 	movui	r16,2127
 40209b0:	04021578 	rdprs	r16,zero,2133
 40209b4:	04020af4 	movhi	r16,2091
 40209b8:	04020c54 	movui	r16,2097
 40209bc:	04021578 	rdprs	r16,zero,2133
 40209c0:	04020c94 	movui	r16,2098
 40209c4:	04020ca0 	cmpeqi	r16,zero,2098
 40209c8:	04020ca0 	cmpeqi	r16,zero,2098
 40209cc:	04020ca0 	cmpeqi	r16,zero,2098
 40209d0:	04020ca0 	cmpeqi	r16,zero,2098
 40209d4:	04020ca0 	cmpeqi	r16,zero,2098
 40209d8:	04020ca0 	cmpeqi	r16,zero,2098
 40209dc:	04020ca0 	cmpeqi	r16,zero,2098
 40209e0:	04020ca0 	cmpeqi	r16,zero,2098
 40209e4:	04020ca0 	cmpeqi	r16,zero,2098
 40209e8:	04021578 	rdprs	r16,zero,2133
 40209ec:	04021578 	rdprs	r16,zero,2133
 40209f0:	04021578 	rdprs	r16,zero,2133
 40209f4:	04021578 	rdprs	r16,zero,2133
 40209f8:	04021578 	rdprs	r16,zero,2133
 40209fc:	04021578 	rdprs	r16,zero,2133
 4020a00:	04021578 	rdprs	r16,zero,2133
 4020a04:	04021578 	rdprs	r16,zero,2133
 4020a08:	04021578 	rdprs	r16,zero,2133
 4020a0c:	04021578 	rdprs	r16,zero,2133
 4020a10:	04020cd4 	movui	r16,2099
 4020a14:	04020d90 	cmplti	r16,zero,2102
 4020a18:	04021578 	rdprs	r16,zero,2133
 4020a1c:	04020d90 	cmplti	r16,zero,2102
 4020a20:	04021578 	rdprs	r16,zero,2133
 4020a24:	04021578 	rdprs	r16,zero,2133
 4020a28:	04021578 	rdprs	r16,zero,2133
 4020a2c:	04021578 	rdprs	r16,zero,2133
 4020a30:	04020e30 	cmpltui	r16,zero,2104
 4020a34:	04021578 	rdprs	r16,zero,2133
 4020a38:	04021578 	rdprs	r16,zero,2133
 4020a3c:	04020e3c 	xorhi	r16,zero,2104
 4020a40:	04021578 	rdprs	r16,zero,2133
 4020a44:	04021578 	rdprs	r16,zero,2133
 4020a48:	04021578 	rdprs	r16,zero,2133
 4020a4c:	04021578 	rdprs	r16,zero,2133
 4020a50:	04021578 	rdprs	r16,zero,2133
 4020a54:	040212b4 	movhi	r16,2122
 4020a58:	04021578 	rdprs	r16,zero,2133
 4020a5c:	04021578 	rdprs	r16,zero,2133
 4020a60:	04021314 	movui	r16,2124
 4020a64:	04021578 	rdprs	r16,zero,2133
 4020a68:	04021578 	rdprs	r16,zero,2133
 4020a6c:	04021578 	rdprs	r16,zero,2133
 4020a70:	04021578 	rdprs	r16,zero,2133
 4020a74:	04021578 	rdprs	r16,zero,2133
 4020a78:	04021578 	rdprs	r16,zero,2133
 4020a7c:	04021578 	rdprs	r16,zero,2133
 4020a80:	04021578 	rdprs	r16,zero,2133
 4020a84:	04021578 	rdprs	r16,zero,2133
 4020a88:	04021578 	rdprs	r16,zero,2133
 4020a8c:	04021524 	muli	r16,zero,2132
 4020a90:	040214c4 	movi	r16,2131
 4020a94:	04020d90 	cmplti	r16,zero,2102
 4020a98:	04020d90 	cmplti	r16,zero,2102
 4020a9c:	04020d90 	cmplti	r16,zero,2102
 4020aa0:	040214d4 	movui	r16,2131
 4020aa4:	040214c4 	movi	r16,2131
 4020aa8:	04021578 	rdprs	r16,zero,2133
 4020aac:	04021578 	rdprs	r16,zero,2133
 4020ab0:	040214e0 	cmpeqi	r16,zero,2131
 4020ab4:	04021578 	rdprs	r16,zero,2133
 4020ab8:	040214f0 	cmpltui	r16,zero,2131
 4020abc:	040213c4 	movi	r16,2127
 4020ac0:	04020b00 	call	4020b0 <_gp+0x3f8178>
 4020ac4:	040213e4 	muli	r16,zero,2127
 4020ac8:	04021578 	rdprs	r16,zero,2133
 4020acc:	040213f0 	cmpltui	r16,zero,2127
 4020ad0:	04021578 	rdprs	r16,zero,2133
 4020ad4:	0402144c 	andi	r16,zero,2129
 4020ad8:	04021578 	rdprs	r16,zero,2133
 4020adc:	04021578 	rdprs	r16,zero,2133
 4020ae0:	0402145c 	xori	r16,zero,2129
 4020ae4:	d9003117 	ldw	r4,196(sp)
 4020ae8:	d8802d15 	stw	r2,180(sp)
 4020aec:	0109c83a 	sub	r4,zero,r4
 4020af0:	d9003115 	stw	r4,196(sp)
 4020af4:	94800114 	ori	r18,r18,4
 4020af8:	ac400007 	ldb	r17,0(r21)
 4020afc:	003f9706 	br	402095c <__flash_rwdata_start+0xffff0480>
 4020b00:	00800c04 	movi	r2,48
 4020b04:	d9002d17 	ldw	r4,180(sp)
 4020b08:	d9402917 	ldw	r5,164(sp)
 4020b0c:	d8802705 	stb	r2,156(sp)
 4020b10:	00801e04 	movi	r2,120
 4020b14:	d8802745 	stb	r2,157(sp)
 4020b18:	d8002785 	stb	zero,158(sp)
 4020b1c:	20c00104 	addi	r3,r4,4
 4020b20:	24c00017 	ldw	r19,0(r4)
 4020b24:	002d883a 	mov	r22,zero
 4020b28:	90800094 	ori	r2,r18,2
 4020b2c:	28029a16 	blt	r5,zero,4021598 <___vfprintf_internal_r+0xdc0>
 4020b30:	00bfdfc4 	movi	r2,-129
 4020b34:	90a4703a 	and	r18,r18,r2
 4020b38:	d8c02d15 	stw	r3,180(sp)
 4020b3c:	94800094 	ori	r18,r18,2
 4020b40:	9802871e 	bne	r19,zero,4021560 <___vfprintf_internal_r+0xd88>
 4020b44:	00800034 	movhi	r2,0
 4020b48:	10803704 	addi	r2,r2,220
 4020b4c:	d8803915 	stw	r2,228(sp)
 4020b50:	04401e04 	movi	r17,120
 4020b54:	d8802917 	ldw	r2,164(sp)
 4020b58:	0039883a 	mov	fp,zero
 4020b5c:	1001e926 	beq	r2,zero,4021304 <___vfprintf_internal_r+0xb2c>
 4020b60:	0027883a 	mov	r19,zero
 4020b64:	002d883a 	mov	r22,zero
 4020b68:	00020506 	br	4021380 <___vfprintf_internal_r+0xba8>
 4020b6c:	d9002c17 	ldw	r4,176(sp)
 4020b70:	b80b883a 	mov	r5,r23
 4020b74:	4022aa80 	call	4022aa8 <__swsetup_r>
 4020b78:	1005ac1e 	bne	r2,zero,402222c <___vfprintf_internal_r+0x1a54>
 4020b7c:	b880030b 	ldhu	r2,12(r23)
 4020b80:	00c00284 	movi	r3,10
 4020b84:	1080068c 	andi	r2,r2,26
 4020b88:	10ff3c1e 	bne	r2,r3,402087c <__flash_rwdata_start+0xffff03a0>
 4020b8c:	b880038f 	ldh	r2,14(r23)
 4020b90:	103f3a16 	blt	r2,zero,402087c <__flash_rwdata_start+0xffff03a0>
 4020b94:	d9c02d17 	ldw	r7,180(sp)
 4020b98:	d9002c17 	ldw	r4,176(sp)
 4020b9c:	a80d883a 	mov	r6,r21
 4020ba0:	b80b883a 	mov	r5,r23
 4020ba4:	40229ec0 	call	40229ec <__sbprintf>
 4020ba8:	00001106 	br	4020bf0 <___vfprintf_internal_r+0x418>
 4020bac:	d9002c17 	ldw	r4,176(sp)
 4020bb0:	d9801e04 	addi	r6,sp,120
 4020bb4:	b80b883a 	mov	r5,r23
 4020bb8:	4027dd40 	call	4027dd4 <__sprint_r>
 4020bbc:	1000081e 	bne	r2,zero,4020be0 <___vfprintf_internal_r+0x408>
 4020bc0:	da000404 	addi	r8,sp,16
 4020bc4:	003f5306 	br	4020914 <__flash_rwdata_start+0xffff0438>
 4020bc8:	d8802017 	ldw	r2,128(sp)
 4020bcc:	10000426 	beq	r2,zero,4020be0 <___vfprintf_internal_r+0x408>
 4020bd0:	d9002c17 	ldw	r4,176(sp)
 4020bd4:	d9801e04 	addi	r6,sp,120
 4020bd8:	b80b883a 	mov	r5,r23
 4020bdc:	4027dd40 	call	4027dd4 <__sprint_r>
 4020be0:	b880030b 	ldhu	r2,12(r23)
 4020be4:	1080100c 	andi	r2,r2,64
 4020be8:	1005901e 	bne	r2,zero,402222c <___vfprintf_internal_r+0x1a54>
 4020bec:	d8802f17 	ldw	r2,188(sp)
 4020bf0:	dfc04717 	ldw	ra,284(sp)
 4020bf4:	df004617 	ldw	fp,280(sp)
 4020bf8:	ddc04517 	ldw	r23,276(sp)
 4020bfc:	dd804417 	ldw	r22,272(sp)
 4020c00:	dd404317 	ldw	r21,268(sp)
 4020c04:	dd004217 	ldw	r20,264(sp)
 4020c08:	dcc04117 	ldw	r19,260(sp)
 4020c0c:	dc804017 	ldw	r18,256(sp)
 4020c10:	dc403f17 	ldw	r17,252(sp)
 4020c14:	dc003e17 	ldw	r16,248(sp)
 4020c18:	dec04804 	addi	sp,sp,288
 4020c1c:	f800283a 	ret
 4020c20:	d9002c17 	ldw	r4,176(sp)
 4020c24:	4024a7c0 	call	4024a7c <__sinit>
 4020c28:	003f0406 	br	402083c <__flash_rwdata_start+0xffff0360>
 4020c2c:	d8802d17 	ldw	r2,180(sp)
 4020c30:	d9002d17 	ldw	r4,180(sp)
 4020c34:	10800017 	ldw	r2,0(r2)
 4020c38:	d8803115 	stw	r2,196(sp)
 4020c3c:	20800104 	addi	r2,r4,4
 4020c40:	d9003117 	ldw	r4,196(sp)
 4020c44:	203fa716 	blt	r4,zero,4020ae4 <__flash_rwdata_start+0xffff0608>
 4020c48:	d8802d15 	stw	r2,180(sp)
 4020c4c:	ac400007 	ldb	r17,0(r21)
 4020c50:	003f4206 	br	402095c <__flash_rwdata_start+0xffff0480>
 4020c54:	ac400007 	ldb	r17,0(r21)
 4020c58:	aac00044 	addi	r11,r21,1
 4020c5c:	8a872826 	beq	r17,r10,4022900 <___vfprintf_internal_r+0x2128>
 4020c60:	88bff404 	addi	r2,r17,-48
 4020c64:	0009883a 	mov	r4,zero
 4020c68:	30867d36 	bltu	r6,r2,4022660 <___vfprintf_internal_r+0x1e88>
 4020c6c:	5c400007 	ldb	r17,0(r11)
 4020c70:	210002a4 	muli	r4,r4,10
 4020c74:	5d400044 	addi	r21,r11,1
 4020c78:	a817883a 	mov	r11,r21
 4020c7c:	2089883a 	add	r4,r4,r2
 4020c80:	88bff404 	addi	r2,r17,-48
 4020c84:	30bff92e 	bgeu	r6,r2,4020c6c <__flash_rwdata_start+0xffff0790>
 4020c88:	2005c916 	blt	r4,zero,40223b0 <___vfprintf_internal_r+0x1bd8>
 4020c8c:	d9002915 	stw	r4,164(sp)
 4020c90:	003f3306 	br	4020960 <__flash_rwdata_start+0xffff0484>
 4020c94:	94802014 	ori	r18,r18,128
 4020c98:	ac400007 	ldb	r17,0(r21)
 4020c9c:	003f2f06 	br	402095c <__flash_rwdata_start+0xffff0480>
 4020ca0:	a809883a 	mov	r4,r21
 4020ca4:	d8003115 	stw	zero,196(sp)
 4020ca8:	88bff404 	addi	r2,r17,-48
 4020cac:	0017883a 	mov	r11,zero
 4020cb0:	24400007 	ldb	r17,0(r4)
 4020cb4:	5ac002a4 	muli	r11,r11,10
 4020cb8:	ad400044 	addi	r21,r21,1
 4020cbc:	a809883a 	mov	r4,r21
 4020cc0:	12d7883a 	add	r11,r2,r11
 4020cc4:	88bff404 	addi	r2,r17,-48
 4020cc8:	30bff92e 	bgeu	r6,r2,4020cb0 <__flash_rwdata_start+0xffff07d4>
 4020ccc:	dac03115 	stw	r11,196(sp)
 4020cd0:	003f2306 	br	4020960 <__flash_rwdata_start+0xffff0484>
 4020cd4:	18c03fcc 	andi	r3,r3,255
 4020cd8:	18072b1e 	bne	r3,zero,4022988 <___vfprintf_internal_r+0x21b0>
 4020cdc:	94800414 	ori	r18,r18,16
 4020ce0:	9080080c 	andi	r2,r18,32
 4020ce4:	10037b26 	beq	r2,zero,4021ad4 <___vfprintf_internal_r+0x12fc>
 4020ce8:	d9402d17 	ldw	r5,180(sp)
 4020cec:	28800117 	ldw	r2,4(r5)
 4020cf0:	2cc00017 	ldw	r19,0(r5)
 4020cf4:	29400204 	addi	r5,r5,8
 4020cf8:	d9402d15 	stw	r5,180(sp)
 4020cfc:	102d883a 	mov	r22,r2
 4020d00:	10044b16 	blt	r2,zero,4021e30 <___vfprintf_internal_r+0x1658>
 4020d04:	d9402917 	ldw	r5,164(sp)
 4020d08:	df002783 	ldbu	fp,158(sp)
 4020d0c:	2803bc16 	blt	r5,zero,4021c00 <___vfprintf_internal_r+0x1428>
 4020d10:	00ffdfc4 	movi	r3,-129
 4020d14:	9d84b03a 	or	r2,r19,r22
 4020d18:	90e4703a 	and	r18,r18,r3
 4020d1c:	10017726 	beq	r2,zero,40212fc <___vfprintf_internal_r+0xb24>
 4020d20:	b0038326 	beq	r22,zero,4021b30 <___vfprintf_internal_r+0x1358>
 4020d24:	dc402a15 	stw	r17,168(sp)
 4020d28:	dc001e04 	addi	r16,sp,120
 4020d2c:	b023883a 	mov	r17,r22
 4020d30:	402d883a 	mov	r22,r8
 4020d34:	9809883a 	mov	r4,r19
 4020d38:	880b883a 	mov	r5,r17
 4020d3c:	01800284 	movi	r6,10
 4020d40:	000f883a 	mov	r7,zero
 4020d44:	402a1cc0 	call	402a1cc <__umoddi3>
 4020d48:	10800c04 	addi	r2,r2,48
 4020d4c:	843fffc4 	addi	r16,r16,-1
 4020d50:	9809883a 	mov	r4,r19
 4020d54:	880b883a 	mov	r5,r17
 4020d58:	80800005 	stb	r2,0(r16)
 4020d5c:	01800284 	movi	r6,10
 4020d60:	000f883a 	mov	r7,zero
 4020d64:	4029c540 	call	4029c54 <__udivdi3>
 4020d68:	1027883a 	mov	r19,r2
 4020d6c:	10c4b03a 	or	r2,r2,r3
 4020d70:	1823883a 	mov	r17,r3
 4020d74:	103fef1e 	bne	r2,zero,4020d34 <__flash_rwdata_start+0xffff0858>
 4020d78:	d8c02817 	ldw	r3,160(sp)
 4020d7c:	dc402a17 	ldw	r17,168(sp)
 4020d80:	b011883a 	mov	r8,r22
 4020d84:	1c07c83a 	sub	r3,r3,r16
 4020d88:	d8c02e15 	stw	r3,184(sp)
 4020d8c:	00005906 	br	4020ef4 <___vfprintf_internal_r+0x71c>
 4020d90:	18c03fcc 	andi	r3,r3,255
 4020d94:	1806fa1e 	bne	r3,zero,4022980 <___vfprintf_internal_r+0x21a8>
 4020d98:	9080020c 	andi	r2,r18,8
 4020d9c:	10048a26 	beq	r2,zero,4021fc8 <___vfprintf_internal_r+0x17f0>
 4020da0:	d8c02d17 	ldw	r3,180(sp)
 4020da4:	d9002d17 	ldw	r4,180(sp)
 4020da8:	d9402d17 	ldw	r5,180(sp)
 4020dac:	18c00017 	ldw	r3,0(r3)
 4020db0:	21000117 	ldw	r4,4(r4)
 4020db4:	29400204 	addi	r5,r5,8
 4020db8:	d8c03615 	stw	r3,216(sp)
 4020dbc:	d9003815 	stw	r4,224(sp)
 4020dc0:	d9402d15 	stw	r5,180(sp)
 4020dc4:	d9003617 	ldw	r4,216(sp)
 4020dc8:	d9403817 	ldw	r5,224(sp)
 4020dcc:	da003d15 	stw	r8,244(sp)
 4020dd0:	04000044 	movi	r16,1
 4020dd4:	40279f80 	call	40279f8 <__fpclassifyd>
 4020dd8:	da003d17 	ldw	r8,244(sp)
 4020ddc:	14041f1e 	bne	r2,r16,4021e5c <___vfprintf_internal_r+0x1684>
 4020de0:	d9003617 	ldw	r4,216(sp)
 4020de4:	d9403817 	ldw	r5,224(sp)
 4020de8:	000d883a 	mov	r6,zero
 4020dec:	000f883a 	mov	r7,zero
 4020df0:	402bbb00 	call	402bbb0 <__ledf2>
 4020df4:	da003d17 	ldw	r8,244(sp)
 4020df8:	1005be16 	blt	r2,zero,40224f4 <___vfprintf_internal_r+0x1d1c>
 4020dfc:	df002783 	ldbu	fp,158(sp)
 4020e00:	008011c4 	movi	r2,71
 4020e04:	1445330e 	bge	r2,r17,40222d4 <___vfprintf_internal_r+0x1afc>
 4020e08:	04000034 	movhi	r16,0
 4020e0c:	84002f04 	addi	r16,r16,188
 4020e10:	00c000c4 	movi	r3,3
 4020e14:	00bfdfc4 	movi	r2,-129
 4020e18:	d8c02a15 	stw	r3,168(sp)
 4020e1c:	90a4703a 	and	r18,r18,r2
 4020e20:	d8c02e15 	stw	r3,184(sp)
 4020e24:	d8002915 	stw	zero,164(sp)
 4020e28:	d8003215 	stw	zero,200(sp)
 4020e2c:	00003706 	br	4020f0c <___vfprintf_internal_r+0x734>
 4020e30:	94800214 	ori	r18,r18,8
 4020e34:	ac400007 	ldb	r17,0(r21)
 4020e38:	003ec806 	br	402095c <__flash_rwdata_start+0xffff0480>
 4020e3c:	18c03fcc 	andi	r3,r3,255
 4020e40:	1806db1e 	bne	r3,zero,40229b0 <___vfprintf_internal_r+0x21d8>
 4020e44:	94800414 	ori	r18,r18,16
 4020e48:	9080080c 	andi	r2,r18,32
 4020e4c:	1002d826 	beq	r2,zero,40219b0 <___vfprintf_internal_r+0x11d8>
 4020e50:	d9402d17 	ldw	r5,180(sp)
 4020e54:	d8c02917 	ldw	r3,164(sp)
 4020e58:	d8002785 	stb	zero,158(sp)
 4020e5c:	28800204 	addi	r2,r5,8
 4020e60:	2cc00017 	ldw	r19,0(r5)
 4020e64:	2d800117 	ldw	r22,4(r5)
 4020e68:	18048f16 	blt	r3,zero,40220a8 <___vfprintf_internal_r+0x18d0>
 4020e6c:	013fdfc4 	movi	r4,-129
 4020e70:	9d86b03a 	or	r3,r19,r22
 4020e74:	d8802d15 	stw	r2,180(sp)
 4020e78:	9124703a 	and	r18,r18,r4
 4020e7c:	1802d91e 	bne	r3,zero,40219e4 <___vfprintf_internal_r+0x120c>
 4020e80:	d8c02917 	ldw	r3,164(sp)
 4020e84:	0039883a 	mov	fp,zero
 4020e88:	1805c326 	beq	r3,zero,4022598 <___vfprintf_internal_r+0x1dc0>
 4020e8c:	0027883a 	mov	r19,zero
 4020e90:	002d883a 	mov	r22,zero
 4020e94:	dc001e04 	addi	r16,sp,120
 4020e98:	9806d0fa 	srli	r3,r19,3
 4020e9c:	b008977a 	slli	r4,r22,29
 4020ea0:	b02cd0fa 	srli	r22,r22,3
 4020ea4:	9cc001cc 	andi	r19,r19,7
 4020ea8:	98800c04 	addi	r2,r19,48
 4020eac:	843fffc4 	addi	r16,r16,-1
 4020eb0:	20e6b03a 	or	r19,r4,r3
 4020eb4:	80800005 	stb	r2,0(r16)
 4020eb8:	9d86b03a 	or	r3,r19,r22
 4020ebc:	183ff61e 	bne	r3,zero,4020e98 <__flash_rwdata_start+0xffff09bc>
 4020ec0:	90c0004c 	andi	r3,r18,1
 4020ec4:	18013b26 	beq	r3,zero,40213b4 <___vfprintf_internal_r+0xbdc>
 4020ec8:	10803fcc 	andi	r2,r2,255
 4020ecc:	1080201c 	xori	r2,r2,128
 4020ed0:	10bfe004 	addi	r2,r2,-128
 4020ed4:	00c00c04 	movi	r3,48
 4020ed8:	10c13626 	beq	r2,r3,40213b4 <___vfprintf_internal_r+0xbdc>
 4020edc:	80ffffc5 	stb	r3,-1(r16)
 4020ee0:	d8c02817 	ldw	r3,160(sp)
 4020ee4:	80bfffc4 	addi	r2,r16,-1
 4020ee8:	1021883a 	mov	r16,r2
 4020eec:	1887c83a 	sub	r3,r3,r2
 4020ef0:	d8c02e15 	stw	r3,184(sp)
 4020ef4:	d8802e17 	ldw	r2,184(sp)
 4020ef8:	d9002917 	ldw	r4,164(sp)
 4020efc:	1100010e 	bge	r2,r4,4020f04 <___vfprintf_internal_r+0x72c>
 4020f00:	2005883a 	mov	r2,r4
 4020f04:	d8802a15 	stw	r2,168(sp)
 4020f08:	d8003215 	stw	zero,200(sp)
 4020f0c:	e7003fcc 	andi	fp,fp,255
 4020f10:	e700201c 	xori	fp,fp,128
 4020f14:	e73fe004 	addi	fp,fp,-128
 4020f18:	e0000326 	beq	fp,zero,4020f28 <___vfprintf_internal_r+0x750>
 4020f1c:	d8c02a17 	ldw	r3,168(sp)
 4020f20:	18c00044 	addi	r3,r3,1
 4020f24:	d8c02a15 	stw	r3,168(sp)
 4020f28:	90c0008c 	andi	r3,r18,2
 4020f2c:	d8c02b15 	stw	r3,172(sp)
 4020f30:	18000326 	beq	r3,zero,4020f40 <___vfprintf_internal_r+0x768>
 4020f34:	d8c02a17 	ldw	r3,168(sp)
 4020f38:	18c00084 	addi	r3,r3,2
 4020f3c:	d8c02a15 	stw	r3,168(sp)
 4020f40:	90c0210c 	andi	r3,r18,132
 4020f44:	d8c03015 	stw	r3,192(sp)
 4020f48:	1801a31e 	bne	r3,zero,40215d8 <___vfprintf_internal_r+0xe00>
 4020f4c:	d9003117 	ldw	r4,196(sp)
 4020f50:	d8c02a17 	ldw	r3,168(sp)
 4020f54:	20e7c83a 	sub	r19,r4,r3
 4020f58:	04c19f0e 	bge	zero,r19,40215d8 <___vfprintf_internal_r+0xe00>
 4020f5c:	02400404 	movi	r9,16
 4020f60:	d8c02017 	ldw	r3,128(sp)
 4020f64:	d8801f17 	ldw	r2,124(sp)
 4020f68:	4cc50d0e 	bge	r9,r19,40223a0 <___vfprintf_internal_r+0x1bc8>
 4020f6c:	01400034 	movhi	r5,0
 4020f70:	29404284 	addi	r5,r5,266
 4020f74:	dc403b15 	stw	r17,236(sp)
 4020f78:	d9403515 	stw	r5,212(sp)
 4020f7c:	9823883a 	mov	r17,r19
 4020f80:	482d883a 	mov	r22,r9
 4020f84:	9027883a 	mov	r19,r18
 4020f88:	070001c4 	movi	fp,7
 4020f8c:	8025883a 	mov	r18,r16
 4020f90:	dc002c17 	ldw	r16,176(sp)
 4020f94:	00000306 	br	4020fa4 <___vfprintf_internal_r+0x7cc>
 4020f98:	8c7ffc04 	addi	r17,r17,-16
 4020f9c:	42000204 	addi	r8,r8,8
 4020fa0:	b440130e 	bge	r22,r17,4020ff0 <___vfprintf_internal_r+0x818>
 4020fa4:	01000034 	movhi	r4,0
 4020fa8:	18c00404 	addi	r3,r3,16
 4020fac:	10800044 	addi	r2,r2,1
 4020fb0:	21004284 	addi	r4,r4,266
 4020fb4:	41000015 	stw	r4,0(r8)
 4020fb8:	45800115 	stw	r22,4(r8)
 4020fbc:	d8c02015 	stw	r3,128(sp)
 4020fc0:	d8801f15 	stw	r2,124(sp)
 4020fc4:	e0bff40e 	bge	fp,r2,4020f98 <__flash_rwdata_start+0xffff0abc>
 4020fc8:	d9801e04 	addi	r6,sp,120
 4020fcc:	b80b883a 	mov	r5,r23
 4020fd0:	8009883a 	mov	r4,r16
 4020fd4:	4027dd40 	call	4027dd4 <__sprint_r>
 4020fd8:	103f011e 	bne	r2,zero,4020be0 <__flash_rwdata_start+0xffff0704>
 4020fdc:	8c7ffc04 	addi	r17,r17,-16
 4020fe0:	d8c02017 	ldw	r3,128(sp)
 4020fe4:	d8801f17 	ldw	r2,124(sp)
 4020fe8:	da000404 	addi	r8,sp,16
 4020fec:	b47fed16 	blt	r22,r17,4020fa4 <__flash_rwdata_start+0xffff0ac8>
 4020ff0:	9021883a 	mov	r16,r18
 4020ff4:	9825883a 	mov	r18,r19
 4020ff8:	8827883a 	mov	r19,r17
 4020ffc:	dc403b17 	ldw	r17,236(sp)
 4021000:	d9403517 	ldw	r5,212(sp)
 4021004:	98c7883a 	add	r3,r19,r3
 4021008:	10800044 	addi	r2,r2,1
 402100c:	41400015 	stw	r5,0(r8)
 4021010:	44c00115 	stw	r19,4(r8)
 4021014:	d8c02015 	stw	r3,128(sp)
 4021018:	d8801f15 	stw	r2,124(sp)
 402101c:	010001c4 	movi	r4,7
 4021020:	2082a316 	blt	r4,r2,4021ab0 <___vfprintf_internal_r+0x12d8>
 4021024:	df002787 	ldb	fp,158(sp)
 4021028:	42000204 	addi	r8,r8,8
 402102c:	e0000c26 	beq	fp,zero,4021060 <___vfprintf_internal_r+0x888>
 4021030:	d8801f17 	ldw	r2,124(sp)
 4021034:	d9002784 	addi	r4,sp,158
 4021038:	18c00044 	addi	r3,r3,1
 402103c:	10800044 	addi	r2,r2,1
 4021040:	41000015 	stw	r4,0(r8)
 4021044:	01000044 	movi	r4,1
 4021048:	41000115 	stw	r4,4(r8)
 402104c:	d8c02015 	stw	r3,128(sp)
 4021050:	d8801f15 	stw	r2,124(sp)
 4021054:	010001c4 	movi	r4,7
 4021058:	20823c16 	blt	r4,r2,402194c <___vfprintf_internal_r+0x1174>
 402105c:	42000204 	addi	r8,r8,8
 4021060:	d8802b17 	ldw	r2,172(sp)
 4021064:	10000c26 	beq	r2,zero,4021098 <___vfprintf_internal_r+0x8c0>
 4021068:	d8801f17 	ldw	r2,124(sp)
 402106c:	d9002704 	addi	r4,sp,156
 4021070:	18c00084 	addi	r3,r3,2
 4021074:	10800044 	addi	r2,r2,1
 4021078:	41000015 	stw	r4,0(r8)
 402107c:	01000084 	movi	r4,2
 4021080:	41000115 	stw	r4,4(r8)
 4021084:	d8c02015 	stw	r3,128(sp)
 4021088:	d8801f15 	stw	r2,124(sp)
 402108c:	010001c4 	movi	r4,7
 4021090:	20823616 	blt	r4,r2,402196c <___vfprintf_internal_r+0x1194>
 4021094:	42000204 	addi	r8,r8,8
 4021098:	d9003017 	ldw	r4,192(sp)
 402109c:	00802004 	movi	r2,128
 40210a0:	20819926 	beq	r4,r2,4021708 <___vfprintf_internal_r+0xf30>
 40210a4:	d9402917 	ldw	r5,164(sp)
 40210a8:	d8802e17 	ldw	r2,184(sp)
 40210ac:	28adc83a 	sub	r22,r5,r2
 40210b0:	0580310e 	bge	zero,r22,4021178 <___vfprintf_internal_r+0x9a0>
 40210b4:	07000404 	movi	fp,16
 40210b8:	d8801f17 	ldw	r2,124(sp)
 40210bc:	e584140e 	bge	fp,r22,4022110 <___vfprintf_internal_r+0x1938>
 40210c0:	01400034 	movhi	r5,0
 40210c4:	29403e84 	addi	r5,r5,250
 40210c8:	dc402915 	stw	r17,164(sp)
 40210cc:	d9402b15 	stw	r5,172(sp)
 40210d0:	b023883a 	mov	r17,r22
 40210d4:	04c001c4 	movi	r19,7
 40210d8:	a82d883a 	mov	r22,r21
 40210dc:	902b883a 	mov	r21,r18
 40210e0:	8025883a 	mov	r18,r16
 40210e4:	dc002c17 	ldw	r16,176(sp)
 40210e8:	00000306 	br	40210f8 <___vfprintf_internal_r+0x920>
 40210ec:	8c7ffc04 	addi	r17,r17,-16
 40210f0:	42000204 	addi	r8,r8,8
 40210f4:	e440110e 	bge	fp,r17,402113c <___vfprintf_internal_r+0x964>
 40210f8:	18c00404 	addi	r3,r3,16
 40210fc:	10800044 	addi	r2,r2,1
 4021100:	45000015 	stw	r20,0(r8)
 4021104:	47000115 	stw	fp,4(r8)
 4021108:	d8c02015 	stw	r3,128(sp)
 402110c:	d8801f15 	stw	r2,124(sp)
 4021110:	98bff60e 	bge	r19,r2,40210ec <__flash_rwdata_start+0xffff0c10>
 4021114:	d9801e04 	addi	r6,sp,120
 4021118:	b80b883a 	mov	r5,r23
 402111c:	8009883a 	mov	r4,r16
 4021120:	4027dd40 	call	4027dd4 <__sprint_r>
 4021124:	103eae1e 	bne	r2,zero,4020be0 <__flash_rwdata_start+0xffff0704>
 4021128:	8c7ffc04 	addi	r17,r17,-16
 402112c:	d8c02017 	ldw	r3,128(sp)
 4021130:	d8801f17 	ldw	r2,124(sp)
 4021134:	da000404 	addi	r8,sp,16
 4021138:	e47fef16 	blt	fp,r17,40210f8 <__flash_rwdata_start+0xffff0c1c>
 402113c:	9021883a 	mov	r16,r18
 4021140:	a825883a 	mov	r18,r21
 4021144:	b02b883a 	mov	r21,r22
 4021148:	882d883a 	mov	r22,r17
 402114c:	dc402917 	ldw	r17,164(sp)
 4021150:	d9002b17 	ldw	r4,172(sp)
 4021154:	1d87883a 	add	r3,r3,r22
 4021158:	10800044 	addi	r2,r2,1
 402115c:	41000015 	stw	r4,0(r8)
 4021160:	45800115 	stw	r22,4(r8)
 4021164:	d8c02015 	stw	r3,128(sp)
 4021168:	d8801f15 	stw	r2,124(sp)
 402116c:	010001c4 	movi	r4,7
 4021170:	2081ee16 	blt	r4,r2,402192c <___vfprintf_internal_r+0x1154>
 4021174:	42000204 	addi	r8,r8,8
 4021178:	9080400c 	andi	r2,r18,256
 402117c:	1001181e 	bne	r2,zero,40215e0 <___vfprintf_internal_r+0xe08>
 4021180:	d9402e17 	ldw	r5,184(sp)
 4021184:	d8801f17 	ldw	r2,124(sp)
 4021188:	44000015 	stw	r16,0(r8)
 402118c:	1947883a 	add	r3,r3,r5
 4021190:	10800044 	addi	r2,r2,1
 4021194:	41400115 	stw	r5,4(r8)
 4021198:	d8c02015 	stw	r3,128(sp)
 402119c:	d8801f15 	stw	r2,124(sp)
 40211a0:	010001c4 	movi	r4,7
 40211a4:	2081d316 	blt	r4,r2,40218f4 <___vfprintf_internal_r+0x111c>
 40211a8:	42000204 	addi	r8,r8,8
 40211ac:	9480010c 	andi	r18,r18,4
 40211b0:	90003226 	beq	r18,zero,402127c <___vfprintf_internal_r+0xaa4>
 40211b4:	d9403117 	ldw	r5,196(sp)
 40211b8:	d8802a17 	ldw	r2,168(sp)
 40211bc:	28a1c83a 	sub	r16,r5,r2
 40211c0:	04002e0e 	bge	zero,r16,402127c <___vfprintf_internal_r+0xaa4>
 40211c4:	04400404 	movi	r17,16
 40211c8:	d8801f17 	ldw	r2,124(sp)
 40211cc:	8c04a20e 	bge	r17,r16,4022458 <___vfprintf_internal_r+0x1c80>
 40211d0:	01400034 	movhi	r5,0
 40211d4:	29404284 	addi	r5,r5,266
 40211d8:	d9403515 	stw	r5,212(sp)
 40211dc:	048001c4 	movi	r18,7
 40211e0:	dcc02c17 	ldw	r19,176(sp)
 40211e4:	00000306 	br	40211f4 <___vfprintf_internal_r+0xa1c>
 40211e8:	843ffc04 	addi	r16,r16,-16
 40211ec:	42000204 	addi	r8,r8,8
 40211f0:	8c00130e 	bge	r17,r16,4021240 <___vfprintf_internal_r+0xa68>
 40211f4:	01000034 	movhi	r4,0
 40211f8:	18c00404 	addi	r3,r3,16
 40211fc:	10800044 	addi	r2,r2,1
 4021200:	21004284 	addi	r4,r4,266
 4021204:	41000015 	stw	r4,0(r8)
 4021208:	44400115 	stw	r17,4(r8)
 402120c:	d8c02015 	stw	r3,128(sp)
 4021210:	d8801f15 	stw	r2,124(sp)
 4021214:	90bff40e 	bge	r18,r2,40211e8 <__flash_rwdata_start+0xffff0d0c>
 4021218:	d9801e04 	addi	r6,sp,120
 402121c:	b80b883a 	mov	r5,r23
 4021220:	9809883a 	mov	r4,r19
 4021224:	4027dd40 	call	4027dd4 <__sprint_r>
 4021228:	103e6d1e 	bne	r2,zero,4020be0 <__flash_rwdata_start+0xffff0704>
 402122c:	843ffc04 	addi	r16,r16,-16
 4021230:	d8c02017 	ldw	r3,128(sp)
 4021234:	d8801f17 	ldw	r2,124(sp)
 4021238:	da000404 	addi	r8,sp,16
 402123c:	8c3fed16 	blt	r17,r16,40211f4 <__flash_rwdata_start+0xffff0d18>
 4021240:	d9403517 	ldw	r5,212(sp)
 4021244:	1c07883a 	add	r3,r3,r16
 4021248:	10800044 	addi	r2,r2,1
 402124c:	41400015 	stw	r5,0(r8)
 4021250:	44000115 	stw	r16,4(r8)
 4021254:	d8c02015 	stw	r3,128(sp)
 4021258:	d8801f15 	stw	r2,124(sp)
 402125c:	010001c4 	movi	r4,7
 4021260:	2080060e 	bge	r4,r2,402127c <___vfprintf_internal_r+0xaa4>
 4021264:	d9002c17 	ldw	r4,176(sp)
 4021268:	d9801e04 	addi	r6,sp,120
 402126c:	b80b883a 	mov	r5,r23
 4021270:	4027dd40 	call	4027dd4 <__sprint_r>
 4021274:	103e5a1e 	bne	r2,zero,4020be0 <__flash_rwdata_start+0xffff0704>
 4021278:	d8c02017 	ldw	r3,128(sp)
 402127c:	d8803117 	ldw	r2,196(sp)
 4021280:	d9002a17 	ldw	r4,168(sp)
 4021284:	1100010e 	bge	r2,r4,402128c <___vfprintf_internal_r+0xab4>
 4021288:	2005883a 	mov	r2,r4
 402128c:	d9402f17 	ldw	r5,188(sp)
 4021290:	288b883a 	add	r5,r5,r2
 4021294:	d9402f15 	stw	r5,188(sp)
 4021298:	18019e1e 	bne	r3,zero,4021914 <___vfprintf_internal_r+0x113c>
 402129c:	a8800007 	ldb	r2,0(r21)
 40212a0:	d8001f15 	stw	zero,124(sp)
 40212a4:	da000404 	addi	r8,sp,16
 40212a8:	103d851e 	bne	r2,zero,40208c0 <__flash_rwdata_start+0xffff03e4>
 40212ac:	a821883a 	mov	r16,r21
 40212b0:	003d9b06 	br	4020920 <__flash_rwdata_start+0xffff0444>
 40212b4:	18c03fcc 	andi	r3,r3,255
 40212b8:	1805c11e 	bne	r3,zero,40229c0 <___vfprintf_internal_r+0x21e8>
 40212bc:	94800414 	ori	r18,r18,16
 40212c0:	9080080c 	andi	r2,r18,32
 40212c4:	10020c26 	beq	r2,zero,4021af8 <___vfprintf_internal_r+0x1320>
 40212c8:	d8802d17 	ldw	r2,180(sp)
 40212cc:	d9002917 	ldw	r4,164(sp)
 40212d0:	d8002785 	stb	zero,158(sp)
 40212d4:	10c00204 	addi	r3,r2,8
 40212d8:	14c00017 	ldw	r19,0(r2)
 40212dc:	15800117 	ldw	r22,4(r2)
 40212e0:	20040f16 	blt	r4,zero,4022320 <___vfprintf_internal_r+0x1b48>
 40212e4:	013fdfc4 	movi	r4,-129
 40212e8:	9d84b03a 	or	r2,r19,r22
 40212ec:	d8c02d15 	stw	r3,180(sp)
 40212f0:	9124703a 	and	r18,r18,r4
 40212f4:	0039883a 	mov	fp,zero
 40212f8:	103e891e 	bne	r2,zero,4020d20 <__flash_rwdata_start+0xffff0844>
 40212fc:	d9002917 	ldw	r4,164(sp)
 4021300:	2002c11e 	bne	r4,zero,4021e08 <___vfprintf_internal_r+0x1630>
 4021304:	d8002915 	stw	zero,164(sp)
 4021308:	d8002e15 	stw	zero,184(sp)
 402130c:	dc001e04 	addi	r16,sp,120
 4021310:	003ef806 	br	4020ef4 <__flash_rwdata_start+0xffff0a18>
 4021314:	18c03fcc 	andi	r3,r3,255
 4021318:	18059d1e 	bne	r3,zero,4022990 <___vfprintf_internal_r+0x21b8>
 402131c:	01400034 	movhi	r5,0
 4021320:	29403204 	addi	r5,r5,200
 4021324:	d9403915 	stw	r5,228(sp)
 4021328:	9080080c 	andi	r2,r18,32
 402132c:	10005226 	beq	r2,zero,4021478 <___vfprintf_internal_r+0xca0>
 4021330:	d8802d17 	ldw	r2,180(sp)
 4021334:	14c00017 	ldw	r19,0(r2)
 4021338:	15800117 	ldw	r22,4(r2)
 402133c:	10800204 	addi	r2,r2,8
 4021340:	d8802d15 	stw	r2,180(sp)
 4021344:	9080004c 	andi	r2,r18,1
 4021348:	10019026 	beq	r2,zero,402198c <___vfprintf_internal_r+0x11b4>
 402134c:	9d84b03a 	or	r2,r19,r22
 4021350:	10036926 	beq	r2,zero,40220f8 <___vfprintf_internal_r+0x1920>
 4021354:	d8c02917 	ldw	r3,164(sp)
 4021358:	00800c04 	movi	r2,48
 402135c:	d8802705 	stb	r2,156(sp)
 4021360:	dc402745 	stb	r17,157(sp)
 4021364:	d8002785 	stb	zero,158(sp)
 4021368:	90800094 	ori	r2,r18,2
 402136c:	18045d16 	blt	r3,zero,40224e4 <___vfprintf_internal_r+0x1d0c>
 4021370:	00bfdfc4 	movi	r2,-129
 4021374:	90a4703a 	and	r18,r18,r2
 4021378:	94800094 	ori	r18,r18,2
 402137c:	0039883a 	mov	fp,zero
 4021380:	d9003917 	ldw	r4,228(sp)
 4021384:	dc001e04 	addi	r16,sp,120
 4021388:	988003cc 	andi	r2,r19,15
 402138c:	b006973a 	slli	r3,r22,28
 4021390:	2085883a 	add	r2,r4,r2
 4021394:	9826d13a 	srli	r19,r19,4
 4021398:	10800003 	ldbu	r2,0(r2)
 402139c:	b02cd13a 	srli	r22,r22,4
 40213a0:	843fffc4 	addi	r16,r16,-1
 40213a4:	1ce6b03a 	or	r19,r3,r19
 40213a8:	80800005 	stb	r2,0(r16)
 40213ac:	9d84b03a 	or	r2,r19,r22
 40213b0:	103ff51e 	bne	r2,zero,4021388 <__flash_rwdata_start+0xffff0eac>
 40213b4:	d8c02817 	ldw	r3,160(sp)
 40213b8:	1c07c83a 	sub	r3,r3,r16
 40213bc:	d8c02e15 	stw	r3,184(sp)
 40213c0:	003ecc06 	br	4020ef4 <__flash_rwdata_start+0xffff0a18>
 40213c4:	18c03fcc 	andi	r3,r3,255
 40213c8:	183e9f26 	beq	r3,zero,4020e48 <__flash_rwdata_start+0xffff096c>
 40213cc:	d9c02785 	stb	r7,158(sp)
 40213d0:	003e9d06 	br	4020e48 <__flash_rwdata_start+0xffff096c>
 40213d4:	00c00044 	movi	r3,1
 40213d8:	01c00ac4 	movi	r7,43
 40213dc:	ac400007 	ldb	r17,0(r21)
 40213e0:	003d5e06 	br	402095c <__flash_rwdata_start+0xffff0480>
 40213e4:	94800814 	ori	r18,r18,32
 40213e8:	ac400007 	ldb	r17,0(r21)
 40213ec:	003d5b06 	br	402095c <__flash_rwdata_start+0xffff0480>
 40213f0:	d8c02d17 	ldw	r3,180(sp)
 40213f4:	d8002785 	stb	zero,158(sp)
 40213f8:	1c000017 	ldw	r16,0(r3)
 40213fc:	1cc00104 	addi	r19,r3,4
 4021400:	80041926 	beq	r16,zero,4022468 <___vfprintf_internal_r+0x1c90>
 4021404:	d9002917 	ldw	r4,164(sp)
 4021408:	2003d016 	blt	r4,zero,402234c <___vfprintf_internal_r+0x1b74>
 402140c:	200d883a 	mov	r6,r4
 4021410:	000b883a 	mov	r5,zero
 4021414:	8009883a 	mov	r4,r16
 4021418:	da003d15 	stw	r8,244(sp)
 402141c:	4025fe80 	call	4025fe8 <memchr>
 4021420:	da003d17 	ldw	r8,244(sp)
 4021424:	10045426 	beq	r2,zero,4022578 <___vfprintf_internal_r+0x1da0>
 4021428:	1405c83a 	sub	r2,r2,r16
 402142c:	d8802e15 	stw	r2,184(sp)
 4021430:	1003cc16 	blt	r2,zero,4022364 <___vfprintf_internal_r+0x1b8c>
 4021434:	df002783 	ldbu	fp,158(sp)
 4021438:	d8802a15 	stw	r2,168(sp)
 402143c:	dcc02d15 	stw	r19,180(sp)
 4021440:	d8002915 	stw	zero,164(sp)
 4021444:	d8003215 	stw	zero,200(sp)
 4021448:	003eb006 	br	4020f0c <__flash_rwdata_start+0xffff0a30>
 402144c:	18c03fcc 	andi	r3,r3,255
 4021450:	183f9b26 	beq	r3,zero,40212c0 <__flash_rwdata_start+0xffff0de4>
 4021454:	d9c02785 	stb	r7,158(sp)
 4021458:	003f9906 	br	40212c0 <__flash_rwdata_start+0xffff0de4>
 402145c:	18c03fcc 	andi	r3,r3,255
 4021460:	1805551e 	bne	r3,zero,40229b8 <___vfprintf_internal_r+0x21e0>
 4021464:	01400034 	movhi	r5,0
 4021468:	29403704 	addi	r5,r5,220
 402146c:	d9403915 	stw	r5,228(sp)
 4021470:	9080080c 	andi	r2,r18,32
 4021474:	103fae1e 	bne	r2,zero,4021330 <__flash_rwdata_start+0xffff0e54>
 4021478:	9080040c 	andi	r2,r18,16
 402147c:	1002de26 	beq	r2,zero,4021ff8 <___vfprintf_internal_r+0x1820>
 4021480:	d8c02d17 	ldw	r3,180(sp)
 4021484:	002d883a 	mov	r22,zero
 4021488:	1cc00017 	ldw	r19,0(r3)
 402148c:	18c00104 	addi	r3,r3,4
 4021490:	d8c02d15 	stw	r3,180(sp)
 4021494:	003fab06 	br	4021344 <__flash_rwdata_start+0xffff0e68>
 4021498:	38803fcc 	andi	r2,r7,255
 402149c:	1080201c 	xori	r2,r2,128
 40214a0:	10bfe004 	addi	r2,r2,-128
 40214a4:	1002d21e 	bne	r2,zero,4021ff0 <___vfprintf_internal_r+0x1818>
 40214a8:	00c00044 	movi	r3,1
 40214ac:	01c00804 	movi	r7,32
 40214b0:	ac400007 	ldb	r17,0(r21)
 40214b4:	003d2906 	br	402095c <__flash_rwdata_start+0xffff0480>
 40214b8:	94800054 	ori	r18,r18,1
 40214bc:	ac400007 	ldb	r17,0(r21)
 40214c0:	003d2606 	br	402095c <__flash_rwdata_start+0xffff0480>
 40214c4:	18c03fcc 	andi	r3,r3,255
 40214c8:	183e0526 	beq	r3,zero,4020ce0 <__flash_rwdata_start+0xffff0804>
 40214cc:	d9c02785 	stb	r7,158(sp)
 40214d0:	003e0306 	br	4020ce0 <__flash_rwdata_start+0xffff0804>
 40214d4:	94801014 	ori	r18,r18,64
 40214d8:	ac400007 	ldb	r17,0(r21)
 40214dc:	003d1f06 	br	402095c <__flash_rwdata_start+0xffff0480>
 40214e0:	ac400007 	ldb	r17,0(r21)
 40214e4:	8a438726 	beq	r17,r9,4022304 <___vfprintf_internal_r+0x1b2c>
 40214e8:	94800414 	ori	r18,r18,16
 40214ec:	003d1b06 	br	402095c <__flash_rwdata_start+0xffff0480>
 40214f0:	18c03fcc 	andi	r3,r3,255
 40214f4:	1805341e 	bne	r3,zero,40229c8 <___vfprintf_internal_r+0x21f0>
 40214f8:	9080080c 	andi	r2,r18,32
 40214fc:	1002cd26 	beq	r2,zero,4022034 <___vfprintf_internal_r+0x185c>
 4021500:	d9402d17 	ldw	r5,180(sp)
 4021504:	d9002f17 	ldw	r4,188(sp)
 4021508:	28800017 	ldw	r2,0(r5)
 402150c:	2007d7fa 	srai	r3,r4,31
 4021510:	29400104 	addi	r5,r5,4
 4021514:	d9402d15 	stw	r5,180(sp)
 4021518:	11000015 	stw	r4,0(r2)
 402151c:	10c00115 	stw	r3,4(r2)
 4021520:	003ce506 	br	40208b8 <__flash_rwdata_start+0xffff03dc>
 4021524:	d8c02d17 	ldw	r3,180(sp)
 4021528:	d9002d17 	ldw	r4,180(sp)
 402152c:	d8002785 	stb	zero,158(sp)
 4021530:	18800017 	ldw	r2,0(r3)
 4021534:	21000104 	addi	r4,r4,4
 4021538:	00c00044 	movi	r3,1
 402153c:	d8c02a15 	stw	r3,168(sp)
 4021540:	d8801405 	stb	r2,80(sp)
 4021544:	d9002d15 	stw	r4,180(sp)
 4021548:	d8c02e15 	stw	r3,184(sp)
 402154c:	d8002915 	stw	zero,164(sp)
 4021550:	d8003215 	stw	zero,200(sp)
 4021554:	dc001404 	addi	r16,sp,80
 4021558:	0039883a 	mov	fp,zero
 402155c:	003e7206 	br	4020f28 <__flash_rwdata_start+0xffff0a4c>
 4021560:	01000034 	movhi	r4,0
 4021564:	21003704 	addi	r4,r4,220
 4021568:	0039883a 	mov	fp,zero
 402156c:	d9003915 	stw	r4,228(sp)
 4021570:	04401e04 	movi	r17,120
 4021574:	003f8206 	br	4021380 <__flash_rwdata_start+0xffff0ea4>
 4021578:	18c03fcc 	andi	r3,r3,255
 402157c:	1805061e 	bne	r3,zero,4022998 <___vfprintf_internal_r+0x21c0>
 4021580:	883d9126 	beq	r17,zero,4020bc8 <__flash_rwdata_start+0xffff06ec>
 4021584:	00c00044 	movi	r3,1
 4021588:	d8c02a15 	stw	r3,168(sp)
 402158c:	dc401405 	stb	r17,80(sp)
 4021590:	d8002785 	stb	zero,158(sp)
 4021594:	003fec06 	br	4021548 <__flash_rwdata_start+0xffff106c>
 4021598:	01400034 	movhi	r5,0
 402159c:	29403704 	addi	r5,r5,220
 40215a0:	d9403915 	stw	r5,228(sp)
 40215a4:	d8c02d15 	stw	r3,180(sp)
 40215a8:	1025883a 	mov	r18,r2
 40215ac:	04401e04 	movi	r17,120
 40215b0:	9d84b03a 	or	r2,r19,r22
 40215b4:	1000fc1e 	bne	r2,zero,40219a8 <___vfprintf_internal_r+0x11d0>
 40215b8:	0039883a 	mov	fp,zero
 40215bc:	00800084 	movi	r2,2
 40215c0:	10803fcc 	andi	r2,r2,255
 40215c4:	00c00044 	movi	r3,1
 40215c8:	10c20f26 	beq	r2,r3,4021e08 <___vfprintf_internal_r+0x1630>
 40215cc:	00c00084 	movi	r3,2
 40215d0:	10fd6326 	beq	r2,r3,4020b60 <__flash_rwdata_start+0xffff0684>
 40215d4:	003e2d06 	br	4020e8c <__flash_rwdata_start+0xffff09b0>
 40215d8:	d8c02017 	ldw	r3,128(sp)
 40215dc:	003e9306 	br	402102c <__flash_rwdata_start+0xffff0b50>
 40215e0:	00801944 	movi	r2,101
 40215e4:	14407e0e 	bge	r2,r17,40217e0 <___vfprintf_internal_r+0x1008>
 40215e8:	d9003617 	ldw	r4,216(sp)
 40215ec:	d9403817 	ldw	r5,224(sp)
 40215f0:	000d883a 	mov	r6,zero
 40215f4:	000f883a 	mov	r7,zero
 40215f8:	d8c03c15 	stw	r3,240(sp)
 40215fc:	da003d15 	stw	r8,244(sp)
 4021600:	402ba4c0 	call	402ba4c <__eqdf2>
 4021604:	d8c03c17 	ldw	r3,240(sp)
 4021608:	da003d17 	ldw	r8,244(sp)
 402160c:	1000f71e 	bne	r2,zero,40219ec <___vfprintf_internal_r+0x1214>
 4021610:	d8801f17 	ldw	r2,124(sp)
 4021614:	01000034 	movhi	r4,0
 4021618:	21003e04 	addi	r4,r4,248
 402161c:	18c00044 	addi	r3,r3,1
 4021620:	10800044 	addi	r2,r2,1
 4021624:	41000015 	stw	r4,0(r8)
 4021628:	01000044 	movi	r4,1
 402162c:	41000115 	stw	r4,4(r8)
 4021630:	d8c02015 	stw	r3,128(sp)
 4021634:	d8801f15 	stw	r2,124(sp)
 4021638:	010001c4 	movi	r4,7
 402163c:	2082b816 	blt	r4,r2,4022120 <___vfprintf_internal_r+0x1948>
 4021640:	42000204 	addi	r8,r8,8
 4021644:	d8802617 	ldw	r2,152(sp)
 4021648:	d9403317 	ldw	r5,204(sp)
 402164c:	11400216 	blt	r2,r5,4021658 <___vfprintf_internal_r+0xe80>
 4021650:	9080004c 	andi	r2,r18,1
 4021654:	103ed526 	beq	r2,zero,40211ac <__flash_rwdata_start+0xffff0cd0>
 4021658:	d8803717 	ldw	r2,220(sp)
 402165c:	d9003417 	ldw	r4,208(sp)
 4021660:	d9403717 	ldw	r5,220(sp)
 4021664:	1887883a 	add	r3,r3,r2
 4021668:	d8801f17 	ldw	r2,124(sp)
 402166c:	41000015 	stw	r4,0(r8)
 4021670:	41400115 	stw	r5,4(r8)
 4021674:	10800044 	addi	r2,r2,1
 4021678:	d8c02015 	stw	r3,128(sp)
 402167c:	d8801f15 	stw	r2,124(sp)
 4021680:	010001c4 	movi	r4,7
 4021684:	20832916 	blt	r4,r2,402232c <___vfprintf_internal_r+0x1b54>
 4021688:	42000204 	addi	r8,r8,8
 402168c:	d8803317 	ldw	r2,204(sp)
 4021690:	143fffc4 	addi	r16,r2,-1
 4021694:	043ec50e 	bge	zero,r16,40211ac <__flash_rwdata_start+0xffff0cd0>
 4021698:	04400404 	movi	r17,16
 402169c:	d8801f17 	ldw	r2,124(sp)
 40216a0:	8c00880e 	bge	r17,r16,40218c4 <___vfprintf_internal_r+0x10ec>
 40216a4:	01400034 	movhi	r5,0
 40216a8:	29403e84 	addi	r5,r5,250
 40216ac:	d9402b15 	stw	r5,172(sp)
 40216b0:	058001c4 	movi	r22,7
 40216b4:	dcc02c17 	ldw	r19,176(sp)
 40216b8:	00000306 	br	40216c8 <___vfprintf_internal_r+0xef0>
 40216bc:	42000204 	addi	r8,r8,8
 40216c0:	843ffc04 	addi	r16,r16,-16
 40216c4:	8c00820e 	bge	r17,r16,40218d0 <___vfprintf_internal_r+0x10f8>
 40216c8:	18c00404 	addi	r3,r3,16
 40216cc:	10800044 	addi	r2,r2,1
 40216d0:	45000015 	stw	r20,0(r8)
 40216d4:	44400115 	stw	r17,4(r8)
 40216d8:	d8c02015 	stw	r3,128(sp)
 40216dc:	d8801f15 	stw	r2,124(sp)
 40216e0:	b0bff60e 	bge	r22,r2,40216bc <__flash_rwdata_start+0xffff11e0>
 40216e4:	d9801e04 	addi	r6,sp,120
 40216e8:	b80b883a 	mov	r5,r23
 40216ec:	9809883a 	mov	r4,r19
 40216f0:	4027dd40 	call	4027dd4 <__sprint_r>
 40216f4:	103d3a1e 	bne	r2,zero,4020be0 <__flash_rwdata_start+0xffff0704>
 40216f8:	d8c02017 	ldw	r3,128(sp)
 40216fc:	d8801f17 	ldw	r2,124(sp)
 4021700:	da000404 	addi	r8,sp,16
 4021704:	003fee06 	br	40216c0 <__flash_rwdata_start+0xffff11e4>
 4021708:	d9403117 	ldw	r5,196(sp)
 402170c:	d8802a17 	ldw	r2,168(sp)
 4021710:	28adc83a 	sub	r22,r5,r2
 4021714:	05be630e 	bge	zero,r22,40210a4 <__flash_rwdata_start+0xffff0bc8>
 4021718:	07000404 	movi	fp,16
 402171c:	d8801f17 	ldw	r2,124(sp)
 4021720:	e5838f0e 	bge	fp,r22,4022560 <___vfprintf_internal_r+0x1d88>
 4021724:	01400034 	movhi	r5,0
 4021728:	29403e84 	addi	r5,r5,250
 402172c:	dc403015 	stw	r17,192(sp)
 4021730:	d9402b15 	stw	r5,172(sp)
 4021734:	b023883a 	mov	r17,r22
 4021738:	04c001c4 	movi	r19,7
 402173c:	a82d883a 	mov	r22,r21
 4021740:	902b883a 	mov	r21,r18
 4021744:	8025883a 	mov	r18,r16
 4021748:	dc002c17 	ldw	r16,176(sp)
 402174c:	00000306 	br	402175c <___vfprintf_internal_r+0xf84>
 4021750:	8c7ffc04 	addi	r17,r17,-16
 4021754:	42000204 	addi	r8,r8,8
 4021758:	e440110e 	bge	fp,r17,40217a0 <___vfprintf_internal_r+0xfc8>
 402175c:	18c00404 	addi	r3,r3,16
 4021760:	10800044 	addi	r2,r2,1
 4021764:	45000015 	stw	r20,0(r8)
 4021768:	47000115 	stw	fp,4(r8)
 402176c:	d8c02015 	stw	r3,128(sp)
 4021770:	d8801f15 	stw	r2,124(sp)
 4021774:	98bff60e 	bge	r19,r2,4021750 <__flash_rwdata_start+0xffff1274>
 4021778:	d9801e04 	addi	r6,sp,120
 402177c:	b80b883a 	mov	r5,r23
 4021780:	8009883a 	mov	r4,r16
 4021784:	4027dd40 	call	4027dd4 <__sprint_r>
 4021788:	103d151e 	bne	r2,zero,4020be0 <__flash_rwdata_start+0xffff0704>
 402178c:	8c7ffc04 	addi	r17,r17,-16
 4021790:	d8c02017 	ldw	r3,128(sp)
 4021794:	d8801f17 	ldw	r2,124(sp)
 4021798:	da000404 	addi	r8,sp,16
 402179c:	e47fef16 	blt	fp,r17,402175c <__flash_rwdata_start+0xffff1280>
 40217a0:	9021883a 	mov	r16,r18
 40217a4:	a825883a 	mov	r18,r21
 40217a8:	b02b883a 	mov	r21,r22
 40217ac:	882d883a 	mov	r22,r17
 40217b0:	dc403017 	ldw	r17,192(sp)
 40217b4:	d9002b17 	ldw	r4,172(sp)
 40217b8:	1d87883a 	add	r3,r3,r22
 40217bc:	10800044 	addi	r2,r2,1
 40217c0:	41000015 	stw	r4,0(r8)
 40217c4:	45800115 	stw	r22,4(r8)
 40217c8:	d8c02015 	stw	r3,128(sp)
 40217cc:	d8801f15 	stw	r2,124(sp)
 40217d0:	010001c4 	movi	r4,7
 40217d4:	20818e16 	blt	r4,r2,4021e10 <___vfprintf_internal_r+0x1638>
 40217d8:	42000204 	addi	r8,r8,8
 40217dc:	003e3106 	br	40210a4 <__flash_rwdata_start+0xffff0bc8>
 40217e0:	d9403317 	ldw	r5,204(sp)
 40217e4:	00800044 	movi	r2,1
 40217e8:	18c00044 	addi	r3,r3,1
 40217ec:	1141530e 	bge	r2,r5,4021d3c <___vfprintf_internal_r+0x1564>
 40217f0:	dc401f17 	ldw	r17,124(sp)
 40217f4:	00800044 	movi	r2,1
 40217f8:	40800115 	stw	r2,4(r8)
 40217fc:	8c400044 	addi	r17,r17,1
 4021800:	44000015 	stw	r16,0(r8)
 4021804:	d8c02015 	stw	r3,128(sp)
 4021808:	dc401f15 	stw	r17,124(sp)
 402180c:	008001c4 	movi	r2,7
 4021810:	14416b16 	blt	r2,r17,4021dc0 <___vfprintf_internal_r+0x15e8>
 4021814:	42000204 	addi	r8,r8,8
 4021818:	d8803717 	ldw	r2,220(sp)
 402181c:	d9003417 	ldw	r4,208(sp)
 4021820:	8c400044 	addi	r17,r17,1
 4021824:	10c7883a 	add	r3,r2,r3
 4021828:	40800115 	stw	r2,4(r8)
 402182c:	41000015 	stw	r4,0(r8)
 4021830:	d8c02015 	stw	r3,128(sp)
 4021834:	dc401f15 	stw	r17,124(sp)
 4021838:	008001c4 	movi	r2,7
 402183c:	14416916 	blt	r2,r17,4021de4 <___vfprintf_internal_r+0x160c>
 4021840:	45800204 	addi	r22,r8,8
 4021844:	d9003617 	ldw	r4,216(sp)
 4021848:	d9403817 	ldw	r5,224(sp)
 402184c:	000d883a 	mov	r6,zero
 4021850:	000f883a 	mov	r7,zero
 4021854:	d8c03c15 	stw	r3,240(sp)
 4021858:	402ba4c0 	call	402ba4c <__eqdf2>
 402185c:	d8c03c17 	ldw	r3,240(sp)
 4021860:	1000bc26 	beq	r2,zero,4021b54 <___vfprintf_internal_r+0x137c>
 4021864:	d9403317 	ldw	r5,204(sp)
 4021868:	84000044 	addi	r16,r16,1
 402186c:	8c400044 	addi	r17,r17,1
 4021870:	28bfffc4 	addi	r2,r5,-1
 4021874:	1887883a 	add	r3,r3,r2
 4021878:	b0800115 	stw	r2,4(r22)
 402187c:	b4000015 	stw	r16,0(r22)
 4021880:	d8c02015 	stw	r3,128(sp)
 4021884:	dc401f15 	stw	r17,124(sp)
 4021888:	008001c4 	movi	r2,7
 402188c:	14414316 	blt	r2,r17,4021d9c <___vfprintf_internal_r+0x15c4>
 4021890:	b5800204 	addi	r22,r22,8
 4021894:	d9003a17 	ldw	r4,232(sp)
 4021898:	df0022c4 	addi	fp,sp,139
 402189c:	8c400044 	addi	r17,r17,1
 40218a0:	20c7883a 	add	r3,r4,r3
 40218a4:	b7000015 	stw	fp,0(r22)
 40218a8:	b1000115 	stw	r4,4(r22)
 40218ac:	d8c02015 	stw	r3,128(sp)
 40218b0:	dc401f15 	stw	r17,124(sp)
 40218b4:	008001c4 	movi	r2,7
 40218b8:	14400e16 	blt	r2,r17,40218f4 <___vfprintf_internal_r+0x111c>
 40218bc:	b2000204 	addi	r8,r22,8
 40218c0:	003e3a06 	br	40211ac <__flash_rwdata_start+0xffff0cd0>
 40218c4:	01000034 	movhi	r4,0
 40218c8:	21003e84 	addi	r4,r4,250
 40218cc:	d9002b15 	stw	r4,172(sp)
 40218d0:	d9002b17 	ldw	r4,172(sp)
 40218d4:	1c07883a 	add	r3,r3,r16
 40218d8:	44000115 	stw	r16,4(r8)
 40218dc:	41000015 	stw	r4,0(r8)
 40218e0:	10800044 	addi	r2,r2,1
 40218e4:	d8c02015 	stw	r3,128(sp)
 40218e8:	d8801f15 	stw	r2,124(sp)
 40218ec:	010001c4 	movi	r4,7
 40218f0:	20be2d0e 	bge	r4,r2,40211a8 <__flash_rwdata_start+0xffff0ccc>
 40218f4:	d9002c17 	ldw	r4,176(sp)
 40218f8:	d9801e04 	addi	r6,sp,120
 40218fc:	b80b883a 	mov	r5,r23
 4021900:	4027dd40 	call	4027dd4 <__sprint_r>
 4021904:	103cb61e 	bne	r2,zero,4020be0 <__flash_rwdata_start+0xffff0704>
 4021908:	d8c02017 	ldw	r3,128(sp)
 402190c:	da000404 	addi	r8,sp,16
 4021910:	003e2606 	br	40211ac <__flash_rwdata_start+0xffff0cd0>
 4021914:	d9002c17 	ldw	r4,176(sp)
 4021918:	d9801e04 	addi	r6,sp,120
 402191c:	b80b883a 	mov	r5,r23
 4021920:	4027dd40 	call	4027dd4 <__sprint_r>
 4021924:	103e5d26 	beq	r2,zero,402129c <__flash_rwdata_start+0xffff0dc0>
 4021928:	003cad06 	br	4020be0 <__flash_rwdata_start+0xffff0704>
 402192c:	d9002c17 	ldw	r4,176(sp)
 4021930:	d9801e04 	addi	r6,sp,120
 4021934:	b80b883a 	mov	r5,r23
 4021938:	4027dd40 	call	4027dd4 <__sprint_r>
 402193c:	103ca81e 	bne	r2,zero,4020be0 <__flash_rwdata_start+0xffff0704>
 4021940:	d8c02017 	ldw	r3,128(sp)
 4021944:	da000404 	addi	r8,sp,16
 4021948:	003e0b06 	br	4021178 <__flash_rwdata_start+0xffff0c9c>
 402194c:	d9002c17 	ldw	r4,176(sp)
 4021950:	d9801e04 	addi	r6,sp,120
 4021954:	b80b883a 	mov	r5,r23
 4021958:	4027dd40 	call	4027dd4 <__sprint_r>
 402195c:	103ca01e 	bne	r2,zero,4020be0 <__flash_rwdata_start+0xffff0704>
 4021960:	d8c02017 	ldw	r3,128(sp)
 4021964:	da000404 	addi	r8,sp,16
 4021968:	003dbd06 	br	4021060 <__flash_rwdata_start+0xffff0b84>
 402196c:	d9002c17 	ldw	r4,176(sp)
 4021970:	d9801e04 	addi	r6,sp,120
 4021974:	b80b883a 	mov	r5,r23
 4021978:	4027dd40 	call	4027dd4 <__sprint_r>
 402197c:	103c981e 	bne	r2,zero,4020be0 <__flash_rwdata_start+0xffff0704>
 4021980:	d8c02017 	ldw	r3,128(sp)
 4021984:	da000404 	addi	r8,sp,16
 4021988:	003dc306 	br	4021098 <__flash_rwdata_start+0xffff0bbc>
 402198c:	d8802917 	ldw	r2,164(sp)
 4021990:	d8002785 	stb	zero,158(sp)
 4021994:	103f0616 	blt	r2,zero,40215b0 <__flash_rwdata_start+0xffff10d4>
 4021998:	00ffdfc4 	movi	r3,-129
 402199c:	9d84b03a 	or	r2,r19,r22
 40219a0:	90e4703a 	and	r18,r18,r3
 40219a4:	103c6b26 	beq	r2,zero,4020b54 <__flash_rwdata_start+0xffff0678>
 40219a8:	0039883a 	mov	fp,zero
 40219ac:	003e7406 	br	4021380 <__flash_rwdata_start+0xffff0ea4>
 40219b0:	9080040c 	andi	r2,r18,16
 40219b4:	1001b326 	beq	r2,zero,4022084 <___vfprintf_internal_r+0x18ac>
 40219b8:	d9002d17 	ldw	r4,180(sp)
 40219bc:	d9402917 	ldw	r5,164(sp)
 40219c0:	d8002785 	stb	zero,158(sp)
 40219c4:	20800104 	addi	r2,r4,4
 40219c8:	24c00017 	ldw	r19,0(r4)
 40219cc:	002d883a 	mov	r22,zero
 40219d0:	2801b516 	blt	r5,zero,40220a8 <___vfprintf_internal_r+0x18d0>
 40219d4:	00ffdfc4 	movi	r3,-129
 40219d8:	d8802d15 	stw	r2,180(sp)
 40219dc:	90e4703a 	and	r18,r18,r3
 40219e0:	983d2726 	beq	r19,zero,4020e80 <__flash_rwdata_start+0xffff09a4>
 40219e4:	0039883a 	mov	fp,zero
 40219e8:	003d2a06 	br	4020e94 <__flash_rwdata_start+0xffff09b8>
 40219ec:	dc402617 	ldw	r17,152(sp)
 40219f0:	0441d30e 	bge	zero,r17,4022140 <___vfprintf_internal_r+0x1968>
 40219f4:	dc403217 	ldw	r17,200(sp)
 40219f8:	d8803317 	ldw	r2,204(sp)
 40219fc:	1440010e 	bge	r2,r17,4021a04 <___vfprintf_internal_r+0x122c>
 4021a00:	1023883a 	mov	r17,r2
 4021a04:	04400a0e 	bge	zero,r17,4021a30 <___vfprintf_internal_r+0x1258>
 4021a08:	d8801f17 	ldw	r2,124(sp)
 4021a0c:	1c47883a 	add	r3,r3,r17
 4021a10:	44000015 	stw	r16,0(r8)
 4021a14:	10800044 	addi	r2,r2,1
 4021a18:	44400115 	stw	r17,4(r8)
 4021a1c:	d8c02015 	stw	r3,128(sp)
 4021a20:	d8801f15 	stw	r2,124(sp)
 4021a24:	010001c4 	movi	r4,7
 4021a28:	20826516 	blt	r4,r2,40223c0 <___vfprintf_internal_r+0x1be8>
 4021a2c:	42000204 	addi	r8,r8,8
 4021a30:	88026116 	blt	r17,zero,40223b8 <___vfprintf_internal_r+0x1be0>
 4021a34:	d9003217 	ldw	r4,200(sp)
 4021a38:	2463c83a 	sub	r17,r4,r17
 4021a3c:	04407b0e 	bge	zero,r17,4021c2c <___vfprintf_internal_r+0x1454>
 4021a40:	05800404 	movi	r22,16
 4021a44:	d8801f17 	ldw	r2,124(sp)
 4021a48:	b4419d0e 	bge	r22,r17,40220c0 <___vfprintf_internal_r+0x18e8>
 4021a4c:	01000034 	movhi	r4,0
 4021a50:	21003e84 	addi	r4,r4,250
 4021a54:	d9002b15 	stw	r4,172(sp)
 4021a58:	070001c4 	movi	fp,7
 4021a5c:	dcc02c17 	ldw	r19,176(sp)
 4021a60:	00000306 	br	4021a70 <___vfprintf_internal_r+0x1298>
 4021a64:	42000204 	addi	r8,r8,8
 4021a68:	8c7ffc04 	addi	r17,r17,-16
 4021a6c:	b441970e 	bge	r22,r17,40220cc <___vfprintf_internal_r+0x18f4>
 4021a70:	18c00404 	addi	r3,r3,16
 4021a74:	10800044 	addi	r2,r2,1
 4021a78:	45000015 	stw	r20,0(r8)
 4021a7c:	45800115 	stw	r22,4(r8)
 4021a80:	d8c02015 	stw	r3,128(sp)
 4021a84:	d8801f15 	stw	r2,124(sp)
 4021a88:	e0bff60e 	bge	fp,r2,4021a64 <__flash_rwdata_start+0xffff1588>
 4021a8c:	d9801e04 	addi	r6,sp,120
 4021a90:	b80b883a 	mov	r5,r23
 4021a94:	9809883a 	mov	r4,r19
 4021a98:	4027dd40 	call	4027dd4 <__sprint_r>
 4021a9c:	103c501e 	bne	r2,zero,4020be0 <__flash_rwdata_start+0xffff0704>
 4021aa0:	d8c02017 	ldw	r3,128(sp)
 4021aa4:	d8801f17 	ldw	r2,124(sp)
 4021aa8:	da000404 	addi	r8,sp,16
 4021aac:	003fee06 	br	4021a68 <__flash_rwdata_start+0xffff158c>
 4021ab0:	d9002c17 	ldw	r4,176(sp)
 4021ab4:	d9801e04 	addi	r6,sp,120
 4021ab8:	b80b883a 	mov	r5,r23
 4021abc:	4027dd40 	call	4027dd4 <__sprint_r>
 4021ac0:	103c471e 	bne	r2,zero,4020be0 <__flash_rwdata_start+0xffff0704>
 4021ac4:	d8c02017 	ldw	r3,128(sp)
 4021ac8:	df002787 	ldb	fp,158(sp)
 4021acc:	da000404 	addi	r8,sp,16
 4021ad0:	003d5606 	br	402102c <__flash_rwdata_start+0xffff0b50>
 4021ad4:	9080040c 	andi	r2,r18,16
 4021ad8:	10016126 	beq	r2,zero,4022060 <___vfprintf_internal_r+0x1888>
 4021adc:	d8802d17 	ldw	r2,180(sp)
 4021ae0:	14c00017 	ldw	r19,0(r2)
 4021ae4:	10800104 	addi	r2,r2,4
 4021ae8:	d8802d15 	stw	r2,180(sp)
 4021aec:	982dd7fa 	srai	r22,r19,31
 4021af0:	b005883a 	mov	r2,r22
 4021af4:	003c8206 	br	4020d00 <__flash_rwdata_start+0xffff0824>
 4021af8:	9080040c 	andi	r2,r18,16
 4021afc:	10003526 	beq	r2,zero,4021bd4 <___vfprintf_internal_r+0x13fc>
 4021b00:	d9402d17 	ldw	r5,180(sp)
 4021b04:	d8c02917 	ldw	r3,164(sp)
 4021b08:	d8002785 	stb	zero,158(sp)
 4021b0c:	28800104 	addi	r2,r5,4
 4021b10:	2cc00017 	ldw	r19,0(r5)
 4021b14:	002d883a 	mov	r22,zero
 4021b18:	18003716 	blt	r3,zero,4021bf8 <___vfprintf_internal_r+0x1420>
 4021b1c:	00ffdfc4 	movi	r3,-129
 4021b20:	d8802d15 	stw	r2,180(sp)
 4021b24:	90e4703a 	and	r18,r18,r3
 4021b28:	0039883a 	mov	fp,zero
 4021b2c:	983df326 	beq	r19,zero,40212fc <__flash_rwdata_start+0xffff0e20>
 4021b30:	00800244 	movi	r2,9
 4021b34:	14fc7b36 	bltu	r2,r19,4020d24 <__flash_rwdata_start+0xffff0848>
 4021b38:	d8c02817 	ldw	r3,160(sp)
 4021b3c:	dc001dc4 	addi	r16,sp,119
 4021b40:	9cc00c04 	addi	r19,r19,48
 4021b44:	1c07c83a 	sub	r3,r3,r16
 4021b48:	dcc01dc5 	stb	r19,119(sp)
 4021b4c:	d8c02e15 	stw	r3,184(sp)
 4021b50:	003ce806 	br	4020ef4 <__flash_rwdata_start+0xffff0a18>
 4021b54:	d8803317 	ldw	r2,204(sp)
 4021b58:	143fffc4 	addi	r16,r2,-1
 4021b5c:	043f4d0e 	bge	zero,r16,4021894 <__flash_rwdata_start+0xffff13b8>
 4021b60:	07000404 	movi	fp,16
 4021b64:	e400810e 	bge	fp,r16,4021d6c <___vfprintf_internal_r+0x1594>
 4021b68:	01400034 	movhi	r5,0
 4021b6c:	29403e84 	addi	r5,r5,250
 4021b70:	d9402b15 	stw	r5,172(sp)
 4021b74:	01c001c4 	movi	r7,7
 4021b78:	dcc02c17 	ldw	r19,176(sp)
 4021b7c:	00000306 	br	4021b8c <___vfprintf_internal_r+0x13b4>
 4021b80:	b5800204 	addi	r22,r22,8
 4021b84:	843ffc04 	addi	r16,r16,-16
 4021b88:	e4007b0e 	bge	fp,r16,4021d78 <___vfprintf_internal_r+0x15a0>
 4021b8c:	18c00404 	addi	r3,r3,16
 4021b90:	8c400044 	addi	r17,r17,1
 4021b94:	b5000015 	stw	r20,0(r22)
 4021b98:	b7000115 	stw	fp,4(r22)
 4021b9c:	d8c02015 	stw	r3,128(sp)
 4021ba0:	dc401f15 	stw	r17,124(sp)
 4021ba4:	3c7ff60e 	bge	r7,r17,4021b80 <__flash_rwdata_start+0xffff16a4>
 4021ba8:	d9801e04 	addi	r6,sp,120
 4021bac:	b80b883a 	mov	r5,r23
 4021bb0:	9809883a 	mov	r4,r19
 4021bb4:	d9c03c15 	stw	r7,240(sp)
 4021bb8:	4027dd40 	call	4027dd4 <__sprint_r>
 4021bbc:	d9c03c17 	ldw	r7,240(sp)
 4021bc0:	103c071e 	bne	r2,zero,4020be0 <__flash_rwdata_start+0xffff0704>
 4021bc4:	d8c02017 	ldw	r3,128(sp)
 4021bc8:	dc401f17 	ldw	r17,124(sp)
 4021bcc:	dd800404 	addi	r22,sp,16
 4021bd0:	003fec06 	br	4021b84 <__flash_rwdata_start+0xffff16a8>
 4021bd4:	9080100c 	andi	r2,r18,64
 4021bd8:	d8002785 	stb	zero,158(sp)
 4021bdc:	10010e26 	beq	r2,zero,4022018 <___vfprintf_internal_r+0x1840>
 4021be0:	d9002d17 	ldw	r4,180(sp)
 4021be4:	d9402917 	ldw	r5,164(sp)
 4021be8:	002d883a 	mov	r22,zero
 4021bec:	20800104 	addi	r2,r4,4
 4021bf0:	24c0000b 	ldhu	r19,0(r4)
 4021bf4:	283fc90e 	bge	r5,zero,4021b1c <__flash_rwdata_start+0xffff1640>
 4021bf8:	d8802d15 	stw	r2,180(sp)
 4021bfc:	0039883a 	mov	fp,zero
 4021c00:	9d84b03a 	or	r2,r19,r22
 4021c04:	103c461e 	bne	r2,zero,4020d20 <__flash_rwdata_start+0xffff0844>
 4021c08:	00800044 	movi	r2,1
 4021c0c:	003e6c06 	br	40215c0 <__flash_rwdata_start+0xffff10e4>
 4021c10:	d9002c17 	ldw	r4,176(sp)
 4021c14:	d9801e04 	addi	r6,sp,120
 4021c18:	b80b883a 	mov	r5,r23
 4021c1c:	4027dd40 	call	4027dd4 <__sprint_r>
 4021c20:	103bef1e 	bne	r2,zero,4020be0 <__flash_rwdata_start+0xffff0704>
 4021c24:	d8c02017 	ldw	r3,128(sp)
 4021c28:	da000404 	addi	r8,sp,16
 4021c2c:	d9003217 	ldw	r4,200(sp)
 4021c30:	d8802617 	ldw	r2,152(sp)
 4021c34:	d9403317 	ldw	r5,204(sp)
 4021c38:	8123883a 	add	r17,r16,r4
 4021c3c:	11400216 	blt	r2,r5,4021c48 <___vfprintf_internal_r+0x1470>
 4021c40:	9100004c 	andi	r4,r18,1
 4021c44:	20000d26 	beq	r4,zero,4021c7c <___vfprintf_internal_r+0x14a4>
 4021c48:	d9003717 	ldw	r4,220(sp)
 4021c4c:	d9403417 	ldw	r5,208(sp)
 4021c50:	1907883a 	add	r3,r3,r4
 4021c54:	d9001f17 	ldw	r4,124(sp)
 4021c58:	41400015 	stw	r5,0(r8)
 4021c5c:	d9403717 	ldw	r5,220(sp)
 4021c60:	21000044 	addi	r4,r4,1
 4021c64:	d8c02015 	stw	r3,128(sp)
 4021c68:	41400115 	stw	r5,4(r8)
 4021c6c:	d9001f15 	stw	r4,124(sp)
 4021c70:	014001c4 	movi	r5,7
 4021c74:	2901e816 	blt	r5,r4,4022418 <___vfprintf_internal_r+0x1c40>
 4021c78:	42000204 	addi	r8,r8,8
 4021c7c:	d9003317 	ldw	r4,204(sp)
 4021c80:	8121883a 	add	r16,r16,r4
 4021c84:	2085c83a 	sub	r2,r4,r2
 4021c88:	8461c83a 	sub	r16,r16,r17
 4021c8c:	1400010e 	bge	r2,r16,4021c94 <___vfprintf_internal_r+0x14bc>
 4021c90:	1021883a 	mov	r16,r2
 4021c94:	04000a0e 	bge	zero,r16,4021cc0 <___vfprintf_internal_r+0x14e8>
 4021c98:	d9001f17 	ldw	r4,124(sp)
 4021c9c:	1c07883a 	add	r3,r3,r16
 4021ca0:	44400015 	stw	r17,0(r8)
 4021ca4:	21000044 	addi	r4,r4,1
 4021ca8:	44000115 	stw	r16,4(r8)
 4021cac:	d8c02015 	stw	r3,128(sp)
 4021cb0:	d9001f15 	stw	r4,124(sp)
 4021cb4:	014001c4 	movi	r5,7
 4021cb8:	2901fb16 	blt	r5,r4,40224a8 <___vfprintf_internal_r+0x1cd0>
 4021cbc:	42000204 	addi	r8,r8,8
 4021cc0:	8001f716 	blt	r16,zero,40224a0 <___vfprintf_internal_r+0x1cc8>
 4021cc4:	1421c83a 	sub	r16,r2,r16
 4021cc8:	043d380e 	bge	zero,r16,40211ac <__flash_rwdata_start+0xffff0cd0>
 4021ccc:	04400404 	movi	r17,16
 4021cd0:	d8801f17 	ldw	r2,124(sp)
 4021cd4:	8c3efb0e 	bge	r17,r16,40218c4 <__flash_rwdata_start+0xffff13e8>
 4021cd8:	01400034 	movhi	r5,0
 4021cdc:	29403e84 	addi	r5,r5,250
 4021ce0:	d9402b15 	stw	r5,172(sp)
 4021ce4:	058001c4 	movi	r22,7
 4021ce8:	dcc02c17 	ldw	r19,176(sp)
 4021cec:	00000306 	br	4021cfc <___vfprintf_internal_r+0x1524>
 4021cf0:	42000204 	addi	r8,r8,8
 4021cf4:	843ffc04 	addi	r16,r16,-16
 4021cf8:	8c3ef50e 	bge	r17,r16,40218d0 <__flash_rwdata_start+0xffff13f4>
 4021cfc:	18c00404 	addi	r3,r3,16
 4021d00:	10800044 	addi	r2,r2,1
 4021d04:	45000015 	stw	r20,0(r8)
 4021d08:	44400115 	stw	r17,4(r8)
 4021d0c:	d8c02015 	stw	r3,128(sp)
 4021d10:	d8801f15 	stw	r2,124(sp)
 4021d14:	b0bff60e 	bge	r22,r2,4021cf0 <__flash_rwdata_start+0xffff1814>
 4021d18:	d9801e04 	addi	r6,sp,120
 4021d1c:	b80b883a 	mov	r5,r23
 4021d20:	9809883a 	mov	r4,r19
 4021d24:	4027dd40 	call	4027dd4 <__sprint_r>
 4021d28:	103bad1e 	bne	r2,zero,4020be0 <__flash_rwdata_start+0xffff0704>
 4021d2c:	d8c02017 	ldw	r3,128(sp)
 4021d30:	d8801f17 	ldw	r2,124(sp)
 4021d34:	da000404 	addi	r8,sp,16
 4021d38:	003fee06 	br	4021cf4 <__flash_rwdata_start+0xffff1818>
 4021d3c:	9088703a 	and	r4,r18,r2
 4021d40:	203eab1e 	bne	r4,zero,40217f0 <__flash_rwdata_start+0xffff1314>
 4021d44:	dc401f17 	ldw	r17,124(sp)
 4021d48:	40800115 	stw	r2,4(r8)
 4021d4c:	44000015 	stw	r16,0(r8)
 4021d50:	8c400044 	addi	r17,r17,1
 4021d54:	d8c02015 	stw	r3,128(sp)
 4021d58:	dc401f15 	stw	r17,124(sp)
 4021d5c:	008001c4 	movi	r2,7
 4021d60:	14400e16 	blt	r2,r17,4021d9c <___vfprintf_internal_r+0x15c4>
 4021d64:	45800204 	addi	r22,r8,8
 4021d68:	003eca06 	br	4021894 <__flash_rwdata_start+0xffff13b8>
 4021d6c:	01000034 	movhi	r4,0
 4021d70:	21003e84 	addi	r4,r4,250
 4021d74:	d9002b15 	stw	r4,172(sp)
 4021d78:	d8802b17 	ldw	r2,172(sp)
 4021d7c:	1c07883a 	add	r3,r3,r16
 4021d80:	8c400044 	addi	r17,r17,1
 4021d84:	b0800015 	stw	r2,0(r22)
 4021d88:	b4000115 	stw	r16,4(r22)
 4021d8c:	d8c02015 	stw	r3,128(sp)
 4021d90:	dc401f15 	stw	r17,124(sp)
 4021d94:	008001c4 	movi	r2,7
 4021d98:	147ebd0e 	bge	r2,r17,4021890 <__flash_rwdata_start+0xffff13b4>
 4021d9c:	d9002c17 	ldw	r4,176(sp)
 4021da0:	d9801e04 	addi	r6,sp,120
 4021da4:	b80b883a 	mov	r5,r23
 4021da8:	4027dd40 	call	4027dd4 <__sprint_r>
 4021dac:	103b8c1e 	bne	r2,zero,4020be0 <__flash_rwdata_start+0xffff0704>
 4021db0:	d8c02017 	ldw	r3,128(sp)
 4021db4:	dc401f17 	ldw	r17,124(sp)
 4021db8:	dd800404 	addi	r22,sp,16
 4021dbc:	003eb506 	br	4021894 <__flash_rwdata_start+0xffff13b8>
 4021dc0:	d9002c17 	ldw	r4,176(sp)
 4021dc4:	d9801e04 	addi	r6,sp,120
 4021dc8:	b80b883a 	mov	r5,r23
 4021dcc:	4027dd40 	call	4027dd4 <__sprint_r>
 4021dd0:	103b831e 	bne	r2,zero,4020be0 <__flash_rwdata_start+0xffff0704>
 4021dd4:	d8c02017 	ldw	r3,128(sp)
 4021dd8:	dc401f17 	ldw	r17,124(sp)
 4021ddc:	da000404 	addi	r8,sp,16
 4021de0:	003e8d06 	br	4021818 <__flash_rwdata_start+0xffff133c>
 4021de4:	d9002c17 	ldw	r4,176(sp)
 4021de8:	d9801e04 	addi	r6,sp,120
 4021dec:	b80b883a 	mov	r5,r23
 4021df0:	4027dd40 	call	4027dd4 <__sprint_r>
 4021df4:	103b7a1e 	bne	r2,zero,4020be0 <__flash_rwdata_start+0xffff0704>
 4021df8:	d8c02017 	ldw	r3,128(sp)
 4021dfc:	dc401f17 	ldw	r17,124(sp)
 4021e00:	dd800404 	addi	r22,sp,16
 4021e04:	003e8f06 	br	4021844 <__flash_rwdata_start+0xffff1368>
 4021e08:	0027883a 	mov	r19,zero
 4021e0c:	003f4a06 	br	4021b38 <__flash_rwdata_start+0xffff165c>
 4021e10:	d9002c17 	ldw	r4,176(sp)
 4021e14:	d9801e04 	addi	r6,sp,120
 4021e18:	b80b883a 	mov	r5,r23
 4021e1c:	4027dd40 	call	4027dd4 <__sprint_r>
 4021e20:	103b6f1e 	bne	r2,zero,4020be0 <__flash_rwdata_start+0xffff0704>
 4021e24:	d8c02017 	ldw	r3,128(sp)
 4021e28:	da000404 	addi	r8,sp,16
 4021e2c:	003c9d06 	br	40210a4 <__flash_rwdata_start+0xffff0bc8>
 4021e30:	04e7c83a 	sub	r19,zero,r19
 4021e34:	9804c03a 	cmpne	r2,r19,zero
 4021e38:	05adc83a 	sub	r22,zero,r22
 4021e3c:	b0adc83a 	sub	r22,r22,r2
 4021e40:	d8802917 	ldw	r2,164(sp)
 4021e44:	07000b44 	movi	fp,45
 4021e48:	df002785 	stb	fp,158(sp)
 4021e4c:	10017b16 	blt	r2,zero,402243c <___vfprintf_internal_r+0x1c64>
 4021e50:	00bfdfc4 	movi	r2,-129
 4021e54:	90a4703a 	and	r18,r18,r2
 4021e58:	003bb106 	br	4020d20 <__flash_rwdata_start+0xffff0844>
 4021e5c:	d9003617 	ldw	r4,216(sp)
 4021e60:	d9403817 	ldw	r5,224(sp)
 4021e64:	da003d15 	stw	r8,244(sp)
 4021e68:	40279f80 	call	40279f8 <__fpclassifyd>
 4021e6c:	da003d17 	ldw	r8,244(sp)
 4021e70:	1000f026 	beq	r2,zero,4022234 <___vfprintf_internal_r+0x1a5c>
 4021e74:	d9002917 	ldw	r4,164(sp)
 4021e78:	05bff7c4 	movi	r22,-33
 4021e7c:	00bfffc4 	movi	r2,-1
 4021e80:	8dac703a 	and	r22,r17,r22
 4021e84:	20820026 	beq	r4,r2,4022688 <___vfprintf_internal_r+0x1eb0>
 4021e88:	008011c4 	movi	r2,71
 4021e8c:	b081f726 	beq	r22,r2,402266c <___vfprintf_internal_r+0x1e94>
 4021e90:	d9003817 	ldw	r4,224(sp)
 4021e94:	90c04014 	ori	r3,r18,256
 4021e98:	d8c02b15 	stw	r3,172(sp)
 4021e9c:	20021516 	blt	r4,zero,40226f4 <___vfprintf_internal_r+0x1f1c>
 4021ea0:	dcc03817 	ldw	r19,224(sp)
 4021ea4:	d8002a05 	stb	zero,168(sp)
 4021ea8:	00801984 	movi	r2,102
 4021eac:	8881f926 	beq	r17,r2,4022694 <___vfprintf_internal_r+0x1ebc>
 4021eb0:	00801184 	movi	r2,70
 4021eb4:	88821c26 	beq	r17,r2,4022728 <___vfprintf_internal_r+0x1f50>
 4021eb8:	00801144 	movi	r2,69
 4021ebc:	b081ef26 	beq	r22,r2,402267c <___vfprintf_internal_r+0x1ea4>
 4021ec0:	d8c02917 	ldw	r3,164(sp)
 4021ec4:	d8802104 	addi	r2,sp,132
 4021ec8:	d8800315 	stw	r2,12(sp)
 4021ecc:	d9403617 	ldw	r5,216(sp)
 4021ed0:	d8802504 	addi	r2,sp,148
 4021ed4:	d9002c17 	ldw	r4,176(sp)
 4021ed8:	d8800215 	stw	r2,8(sp)
 4021edc:	d8802604 	addi	r2,sp,152
 4021ee0:	d8c00015 	stw	r3,0(sp)
 4021ee4:	d8800115 	stw	r2,4(sp)
 4021ee8:	01c00084 	movi	r7,2
 4021eec:	980d883a 	mov	r6,r19
 4021ef0:	d8c03c15 	stw	r3,240(sp)
 4021ef4:	da003d15 	stw	r8,244(sp)
 4021ef8:	4022dfc0 	call	4022dfc <_dtoa_r>
 4021efc:	1021883a 	mov	r16,r2
 4021f00:	008019c4 	movi	r2,103
 4021f04:	d8c03c17 	ldw	r3,240(sp)
 4021f08:	da003d17 	ldw	r8,244(sp)
 4021f0c:	88817126 	beq	r17,r2,40224d4 <___vfprintf_internal_r+0x1cfc>
 4021f10:	008011c4 	movi	r2,71
 4021f14:	88829226 	beq	r17,r2,4022960 <___vfprintf_internal_r+0x2188>
 4021f18:	80f9883a 	add	fp,r16,r3
 4021f1c:	d9003617 	ldw	r4,216(sp)
 4021f20:	000d883a 	mov	r6,zero
 4021f24:	000f883a 	mov	r7,zero
 4021f28:	980b883a 	mov	r5,r19
 4021f2c:	da003d15 	stw	r8,244(sp)
 4021f30:	402ba4c0 	call	402ba4c <__eqdf2>
 4021f34:	da003d17 	ldw	r8,244(sp)
 4021f38:	10018d26 	beq	r2,zero,4022570 <___vfprintf_internal_r+0x1d98>
 4021f3c:	d8802117 	ldw	r2,132(sp)
 4021f40:	1700062e 	bgeu	r2,fp,4021f5c <___vfprintf_internal_r+0x1784>
 4021f44:	01000c04 	movi	r4,48
 4021f48:	10c00044 	addi	r3,r2,1
 4021f4c:	d8c02115 	stw	r3,132(sp)
 4021f50:	11000005 	stb	r4,0(r2)
 4021f54:	d8802117 	ldw	r2,132(sp)
 4021f58:	173ffb36 	bltu	r2,fp,4021f48 <__flash_rwdata_start+0xffff1a6c>
 4021f5c:	1405c83a 	sub	r2,r2,r16
 4021f60:	d8803315 	stw	r2,204(sp)
 4021f64:	008011c4 	movi	r2,71
 4021f68:	b0817626 	beq	r22,r2,4022544 <___vfprintf_internal_r+0x1d6c>
 4021f6c:	00801944 	movi	r2,101
 4021f70:	1442810e 	bge	r2,r17,4022978 <___vfprintf_internal_r+0x21a0>
 4021f74:	d8c02617 	ldw	r3,152(sp)
 4021f78:	00801984 	movi	r2,102
 4021f7c:	d8c03215 	stw	r3,200(sp)
 4021f80:	8881fe26 	beq	r17,r2,402277c <___vfprintf_internal_r+0x1fa4>
 4021f84:	d8c03217 	ldw	r3,200(sp)
 4021f88:	d9003317 	ldw	r4,204(sp)
 4021f8c:	1901dd16 	blt	r3,r4,4022704 <___vfprintf_internal_r+0x1f2c>
 4021f90:	9480004c 	andi	r18,r18,1
 4021f94:	90022b1e 	bne	r18,zero,4022844 <___vfprintf_internal_r+0x206c>
 4021f98:	1805883a 	mov	r2,r3
 4021f9c:	18028016 	blt	r3,zero,40229a0 <___vfprintf_internal_r+0x21c8>
 4021fa0:	d8c03217 	ldw	r3,200(sp)
 4021fa4:	044019c4 	movi	r17,103
 4021fa8:	d8c02e15 	stw	r3,184(sp)
 4021fac:	df002a07 	ldb	fp,168(sp)
 4021fb0:	e001531e 	bne	fp,zero,4022500 <___vfprintf_internal_r+0x1d28>
 4021fb4:	df002783 	ldbu	fp,158(sp)
 4021fb8:	d8802a15 	stw	r2,168(sp)
 4021fbc:	dc802b17 	ldw	r18,172(sp)
 4021fc0:	d8002915 	stw	zero,164(sp)
 4021fc4:	003bd106 	br	4020f0c <__flash_rwdata_start+0xffff0a30>
 4021fc8:	d8802d17 	ldw	r2,180(sp)
 4021fcc:	d8c02d17 	ldw	r3,180(sp)
 4021fd0:	d9002d17 	ldw	r4,180(sp)
 4021fd4:	10800017 	ldw	r2,0(r2)
 4021fd8:	18c00117 	ldw	r3,4(r3)
 4021fdc:	21000204 	addi	r4,r4,8
 4021fe0:	d8803615 	stw	r2,216(sp)
 4021fe4:	d8c03815 	stw	r3,224(sp)
 4021fe8:	d9002d15 	stw	r4,180(sp)
 4021fec:	003b7506 	br	4020dc4 <__flash_rwdata_start+0xffff08e8>
 4021ff0:	ac400007 	ldb	r17,0(r21)
 4021ff4:	003a5906 	br	402095c <__flash_rwdata_start+0xffff0480>
 4021ff8:	9080100c 	andi	r2,r18,64
 4021ffc:	1000a826 	beq	r2,zero,40222a0 <___vfprintf_internal_r+0x1ac8>
 4022000:	d9002d17 	ldw	r4,180(sp)
 4022004:	002d883a 	mov	r22,zero
 4022008:	24c0000b 	ldhu	r19,0(r4)
 402200c:	21000104 	addi	r4,r4,4
 4022010:	d9002d15 	stw	r4,180(sp)
 4022014:	003ccb06 	br	4021344 <__flash_rwdata_start+0xffff0e68>
 4022018:	d8c02d17 	ldw	r3,180(sp)
 402201c:	d9002917 	ldw	r4,164(sp)
 4022020:	002d883a 	mov	r22,zero
 4022024:	18800104 	addi	r2,r3,4
 4022028:	1cc00017 	ldw	r19,0(r3)
 402202c:	203ebb0e 	bge	r4,zero,4021b1c <__flash_rwdata_start+0xffff1640>
 4022030:	003ef106 	br	4021bf8 <__flash_rwdata_start+0xffff171c>
 4022034:	9080040c 	andi	r2,r18,16
 4022038:	1000921e 	bne	r2,zero,4022284 <___vfprintf_internal_r+0x1aac>
 402203c:	9480100c 	andi	r18,r18,64
 4022040:	90013926 	beq	r18,zero,4022528 <___vfprintf_internal_r+0x1d50>
 4022044:	d9002d17 	ldw	r4,180(sp)
 4022048:	d9402f17 	ldw	r5,188(sp)
 402204c:	20800017 	ldw	r2,0(r4)
 4022050:	21000104 	addi	r4,r4,4
 4022054:	d9002d15 	stw	r4,180(sp)
 4022058:	1140000d 	sth	r5,0(r2)
 402205c:	003a1606 	br	40208b8 <__flash_rwdata_start+0xffff03dc>
 4022060:	9080100c 	andi	r2,r18,64
 4022064:	10008026 	beq	r2,zero,4022268 <___vfprintf_internal_r+0x1a90>
 4022068:	d8c02d17 	ldw	r3,180(sp)
 402206c:	1cc0000f 	ldh	r19,0(r3)
 4022070:	18c00104 	addi	r3,r3,4
 4022074:	d8c02d15 	stw	r3,180(sp)
 4022078:	982dd7fa 	srai	r22,r19,31
 402207c:	b005883a 	mov	r2,r22
 4022080:	003b1f06 	br	4020d00 <__flash_rwdata_start+0xffff0824>
 4022084:	9080100c 	andi	r2,r18,64
 4022088:	d8002785 	stb	zero,158(sp)
 402208c:	10008a1e 	bne	r2,zero,40222b8 <___vfprintf_internal_r+0x1ae0>
 4022090:	d9402d17 	ldw	r5,180(sp)
 4022094:	d8c02917 	ldw	r3,164(sp)
 4022098:	002d883a 	mov	r22,zero
 402209c:	28800104 	addi	r2,r5,4
 40220a0:	2cc00017 	ldw	r19,0(r5)
 40220a4:	183e4b0e 	bge	r3,zero,40219d4 <__flash_rwdata_start+0xffff14f8>
 40220a8:	9d86b03a 	or	r3,r19,r22
 40220ac:	d8802d15 	stw	r2,180(sp)
 40220b0:	183e4c1e 	bne	r3,zero,40219e4 <__flash_rwdata_start+0xffff1508>
 40220b4:	0039883a 	mov	fp,zero
 40220b8:	0005883a 	mov	r2,zero
 40220bc:	003d4006 	br	40215c0 <__flash_rwdata_start+0xffff10e4>
 40220c0:	01400034 	movhi	r5,0
 40220c4:	29403e84 	addi	r5,r5,250
 40220c8:	d9402b15 	stw	r5,172(sp)
 40220cc:	d9402b17 	ldw	r5,172(sp)
 40220d0:	1c47883a 	add	r3,r3,r17
 40220d4:	10800044 	addi	r2,r2,1
 40220d8:	41400015 	stw	r5,0(r8)
 40220dc:	44400115 	stw	r17,4(r8)
 40220e0:	d8c02015 	stw	r3,128(sp)
 40220e4:	d8801f15 	stw	r2,124(sp)
 40220e8:	010001c4 	movi	r4,7
 40220ec:	20bec816 	blt	r4,r2,4021c10 <__flash_rwdata_start+0xffff1734>
 40220f0:	42000204 	addi	r8,r8,8
 40220f4:	003ecd06 	br	4021c2c <__flash_rwdata_start+0xffff1750>
 40220f8:	d9002917 	ldw	r4,164(sp)
 40220fc:	d8002785 	stb	zero,158(sp)
 4022100:	203d2d16 	blt	r4,zero,40215b8 <__flash_rwdata_start+0xffff10dc>
 4022104:	00bfdfc4 	movi	r2,-129
 4022108:	90a4703a 	and	r18,r18,r2
 402210c:	003a9106 	br	4020b54 <__flash_rwdata_start+0xffff0678>
 4022110:	01000034 	movhi	r4,0
 4022114:	21003e84 	addi	r4,r4,250
 4022118:	d9002b15 	stw	r4,172(sp)
 402211c:	003c0c06 	br	4021150 <__flash_rwdata_start+0xffff0c74>
 4022120:	d9002c17 	ldw	r4,176(sp)
 4022124:	d9801e04 	addi	r6,sp,120
 4022128:	b80b883a 	mov	r5,r23
 402212c:	4027dd40 	call	4027dd4 <__sprint_r>
 4022130:	103aab1e 	bne	r2,zero,4020be0 <__flash_rwdata_start+0xffff0704>
 4022134:	d8c02017 	ldw	r3,128(sp)
 4022138:	da000404 	addi	r8,sp,16
 402213c:	003d4106 	br	4021644 <__flash_rwdata_start+0xffff1168>
 4022140:	d8801f17 	ldw	r2,124(sp)
 4022144:	01400034 	movhi	r5,0
 4022148:	01000044 	movi	r4,1
 402214c:	18c00044 	addi	r3,r3,1
 4022150:	10800044 	addi	r2,r2,1
 4022154:	29403e04 	addi	r5,r5,248
 4022158:	41000115 	stw	r4,4(r8)
 402215c:	41400015 	stw	r5,0(r8)
 4022160:	d8c02015 	stw	r3,128(sp)
 4022164:	d8801f15 	stw	r2,124(sp)
 4022168:	010001c4 	movi	r4,7
 402216c:	20805c16 	blt	r4,r2,40222e0 <___vfprintf_internal_r+0x1b08>
 4022170:	42000204 	addi	r8,r8,8
 4022174:	8800041e 	bne	r17,zero,4022188 <___vfprintf_internal_r+0x19b0>
 4022178:	d8803317 	ldw	r2,204(sp)
 402217c:	1000021e 	bne	r2,zero,4022188 <___vfprintf_internal_r+0x19b0>
 4022180:	9080004c 	andi	r2,r18,1
 4022184:	103c0926 	beq	r2,zero,40211ac <__flash_rwdata_start+0xffff0cd0>
 4022188:	d9003717 	ldw	r4,220(sp)
 402218c:	d8801f17 	ldw	r2,124(sp)
 4022190:	d9403417 	ldw	r5,208(sp)
 4022194:	20c7883a 	add	r3,r4,r3
 4022198:	10800044 	addi	r2,r2,1
 402219c:	41000115 	stw	r4,4(r8)
 40221a0:	41400015 	stw	r5,0(r8)
 40221a4:	d8c02015 	stw	r3,128(sp)
 40221a8:	d8801f15 	stw	r2,124(sp)
 40221ac:	010001c4 	movi	r4,7
 40221b0:	20812116 	blt	r4,r2,4022638 <___vfprintf_internal_r+0x1e60>
 40221b4:	42000204 	addi	r8,r8,8
 40221b8:	0463c83a 	sub	r17,zero,r17
 40221bc:	0440730e 	bge	zero,r17,402238c <___vfprintf_internal_r+0x1bb4>
 40221c0:	05800404 	movi	r22,16
 40221c4:	b440860e 	bge	r22,r17,40223e0 <___vfprintf_internal_r+0x1c08>
 40221c8:	01400034 	movhi	r5,0
 40221cc:	29403e84 	addi	r5,r5,250
 40221d0:	d9402b15 	stw	r5,172(sp)
 40221d4:	070001c4 	movi	fp,7
 40221d8:	dcc02c17 	ldw	r19,176(sp)
 40221dc:	00000306 	br	40221ec <___vfprintf_internal_r+0x1a14>
 40221e0:	42000204 	addi	r8,r8,8
 40221e4:	8c7ffc04 	addi	r17,r17,-16
 40221e8:	b440800e 	bge	r22,r17,40223ec <___vfprintf_internal_r+0x1c14>
 40221ec:	18c00404 	addi	r3,r3,16
 40221f0:	10800044 	addi	r2,r2,1
 40221f4:	45000015 	stw	r20,0(r8)
 40221f8:	45800115 	stw	r22,4(r8)
 40221fc:	d8c02015 	stw	r3,128(sp)
 4022200:	d8801f15 	stw	r2,124(sp)
 4022204:	e0bff60e 	bge	fp,r2,40221e0 <__flash_rwdata_start+0xffff1d04>
 4022208:	d9801e04 	addi	r6,sp,120
 402220c:	b80b883a 	mov	r5,r23
 4022210:	9809883a 	mov	r4,r19
 4022214:	4027dd40 	call	4027dd4 <__sprint_r>
 4022218:	103a711e 	bne	r2,zero,4020be0 <__flash_rwdata_start+0xffff0704>
 402221c:	d8c02017 	ldw	r3,128(sp)
 4022220:	d8801f17 	ldw	r2,124(sp)
 4022224:	da000404 	addi	r8,sp,16
 4022228:	003fee06 	br	40221e4 <__flash_rwdata_start+0xffff1d08>
 402222c:	00bfffc4 	movi	r2,-1
 4022230:	003a6f06 	br	4020bf0 <__flash_rwdata_start+0xffff0714>
 4022234:	008011c4 	movi	r2,71
 4022238:	1440b816 	blt	r2,r17,402251c <___vfprintf_internal_r+0x1d44>
 402223c:	04000034 	movhi	r16,0
 4022240:	84003004 	addi	r16,r16,192
 4022244:	00c000c4 	movi	r3,3
 4022248:	00bfdfc4 	movi	r2,-129
 402224c:	d8c02a15 	stw	r3,168(sp)
 4022250:	90a4703a 	and	r18,r18,r2
 4022254:	df002783 	ldbu	fp,158(sp)
 4022258:	d8c02e15 	stw	r3,184(sp)
 402225c:	d8002915 	stw	zero,164(sp)
 4022260:	d8003215 	stw	zero,200(sp)
 4022264:	003b2906 	br	4020f0c <__flash_rwdata_start+0xffff0a30>
 4022268:	d9002d17 	ldw	r4,180(sp)
 402226c:	24c00017 	ldw	r19,0(r4)
 4022270:	21000104 	addi	r4,r4,4
 4022274:	d9002d15 	stw	r4,180(sp)
 4022278:	982dd7fa 	srai	r22,r19,31
 402227c:	b005883a 	mov	r2,r22
 4022280:	003a9f06 	br	4020d00 <__flash_rwdata_start+0xffff0824>
 4022284:	d9402d17 	ldw	r5,180(sp)
 4022288:	d8c02f17 	ldw	r3,188(sp)
 402228c:	28800017 	ldw	r2,0(r5)
 4022290:	29400104 	addi	r5,r5,4
 4022294:	d9402d15 	stw	r5,180(sp)
 4022298:	10c00015 	stw	r3,0(r2)
 402229c:	00398606 	br	40208b8 <__flash_rwdata_start+0xffff03dc>
 40222a0:	d9402d17 	ldw	r5,180(sp)
 40222a4:	002d883a 	mov	r22,zero
 40222a8:	2cc00017 	ldw	r19,0(r5)
 40222ac:	29400104 	addi	r5,r5,4
 40222b0:	d9402d15 	stw	r5,180(sp)
 40222b4:	003c2306 	br	4021344 <__flash_rwdata_start+0xffff0e68>
 40222b8:	d8c02d17 	ldw	r3,180(sp)
 40222bc:	d9002917 	ldw	r4,164(sp)
 40222c0:	002d883a 	mov	r22,zero
 40222c4:	18800104 	addi	r2,r3,4
 40222c8:	1cc0000b 	ldhu	r19,0(r3)
 40222cc:	203dc10e 	bge	r4,zero,40219d4 <__flash_rwdata_start+0xffff14f8>
 40222d0:	003f7506 	br	40220a8 <__flash_rwdata_start+0xffff1bcc>
 40222d4:	04000034 	movhi	r16,0
 40222d8:	84002e04 	addi	r16,r16,184
 40222dc:	003acc06 	br	4020e10 <__flash_rwdata_start+0xffff0934>
 40222e0:	d9002c17 	ldw	r4,176(sp)
 40222e4:	d9801e04 	addi	r6,sp,120
 40222e8:	b80b883a 	mov	r5,r23
 40222ec:	4027dd40 	call	4027dd4 <__sprint_r>
 40222f0:	103a3b1e 	bne	r2,zero,4020be0 <__flash_rwdata_start+0xffff0704>
 40222f4:	dc402617 	ldw	r17,152(sp)
 40222f8:	d8c02017 	ldw	r3,128(sp)
 40222fc:	da000404 	addi	r8,sp,16
 4022300:	003f9c06 	br	4022174 <__flash_rwdata_start+0xffff1c98>
 4022304:	ac400043 	ldbu	r17,1(r21)
 4022308:	94800814 	ori	r18,r18,32
 402230c:	ad400044 	addi	r21,r21,1
 4022310:	8c403fcc 	andi	r17,r17,255
 4022314:	8c40201c 	xori	r17,r17,128
 4022318:	8c7fe004 	addi	r17,r17,-128
 402231c:	00398f06 	br	402095c <__flash_rwdata_start+0xffff0480>
 4022320:	d8c02d15 	stw	r3,180(sp)
 4022324:	0039883a 	mov	fp,zero
 4022328:	003e3506 	br	4021c00 <__flash_rwdata_start+0xffff1724>
 402232c:	d9002c17 	ldw	r4,176(sp)
 4022330:	d9801e04 	addi	r6,sp,120
 4022334:	b80b883a 	mov	r5,r23
 4022338:	4027dd40 	call	4027dd4 <__sprint_r>
 402233c:	103a281e 	bne	r2,zero,4020be0 <__flash_rwdata_start+0xffff0704>
 4022340:	d8c02017 	ldw	r3,128(sp)
 4022344:	da000404 	addi	r8,sp,16
 4022348:	003cd006 	br	402168c <__flash_rwdata_start+0xffff11b0>
 402234c:	8009883a 	mov	r4,r16
 4022350:	da003d15 	stw	r8,244(sp)
 4022354:	40207400 	call	4020740 <strlen>
 4022358:	d8802e15 	stw	r2,184(sp)
 402235c:	da003d17 	ldw	r8,244(sp)
 4022360:	103c340e 	bge	r2,zero,4021434 <__flash_rwdata_start+0xffff0f58>
 4022364:	0005883a 	mov	r2,zero
 4022368:	003c3206 	br	4021434 <__flash_rwdata_start+0xffff0f58>
 402236c:	d9002c17 	ldw	r4,176(sp)
 4022370:	d9801e04 	addi	r6,sp,120
 4022374:	b80b883a 	mov	r5,r23
 4022378:	4027dd40 	call	4027dd4 <__sprint_r>
 402237c:	103a181e 	bne	r2,zero,4020be0 <__flash_rwdata_start+0xffff0704>
 4022380:	d8c02017 	ldw	r3,128(sp)
 4022384:	d8801f17 	ldw	r2,124(sp)
 4022388:	da000404 	addi	r8,sp,16
 402238c:	d9403317 	ldw	r5,204(sp)
 4022390:	10800044 	addi	r2,r2,1
 4022394:	44000015 	stw	r16,0(r8)
 4022398:	28c7883a 	add	r3,r5,r3
 402239c:	003b7d06 	br	4021194 <__flash_rwdata_start+0xffff0cb8>
 40223a0:	01000034 	movhi	r4,0
 40223a4:	21004284 	addi	r4,r4,266
 40223a8:	d9003515 	stw	r4,212(sp)
 40223ac:	003b1406 	br	4021000 <__flash_rwdata_start+0xffff0b24>
 40223b0:	013fffc4 	movi	r4,-1
 40223b4:	003a3506 	br	4020c8c <__flash_rwdata_start+0xffff07b0>
 40223b8:	0023883a 	mov	r17,zero
 40223bc:	003d9d06 	br	4021a34 <__flash_rwdata_start+0xffff1558>
 40223c0:	d9002c17 	ldw	r4,176(sp)
 40223c4:	d9801e04 	addi	r6,sp,120
 40223c8:	b80b883a 	mov	r5,r23
 40223cc:	4027dd40 	call	4027dd4 <__sprint_r>
 40223d0:	103a031e 	bne	r2,zero,4020be0 <__flash_rwdata_start+0xffff0704>
 40223d4:	d8c02017 	ldw	r3,128(sp)
 40223d8:	da000404 	addi	r8,sp,16
 40223dc:	003d9406 	br	4021a30 <__flash_rwdata_start+0xffff1554>
 40223e0:	01000034 	movhi	r4,0
 40223e4:	21003e84 	addi	r4,r4,250
 40223e8:	d9002b15 	stw	r4,172(sp)
 40223ec:	d9002b17 	ldw	r4,172(sp)
 40223f0:	1c47883a 	add	r3,r3,r17
 40223f4:	10800044 	addi	r2,r2,1
 40223f8:	41000015 	stw	r4,0(r8)
 40223fc:	44400115 	stw	r17,4(r8)
 4022400:	d8c02015 	stw	r3,128(sp)
 4022404:	d8801f15 	stw	r2,124(sp)
 4022408:	010001c4 	movi	r4,7
 402240c:	20bfd716 	blt	r4,r2,402236c <__flash_rwdata_start+0xffff1e90>
 4022410:	42000204 	addi	r8,r8,8
 4022414:	003fdd06 	br	402238c <__flash_rwdata_start+0xffff1eb0>
 4022418:	d9002c17 	ldw	r4,176(sp)
 402241c:	d9801e04 	addi	r6,sp,120
 4022420:	b80b883a 	mov	r5,r23
 4022424:	4027dd40 	call	4027dd4 <__sprint_r>
 4022428:	1039ed1e 	bne	r2,zero,4020be0 <__flash_rwdata_start+0xffff0704>
 402242c:	d8802617 	ldw	r2,152(sp)
 4022430:	d8c02017 	ldw	r3,128(sp)
 4022434:	da000404 	addi	r8,sp,16
 4022438:	003e1006 	br	4021c7c <__flash_rwdata_start+0xffff17a0>
 402243c:	00800044 	movi	r2,1
 4022440:	10803fcc 	andi	r2,r2,255
 4022444:	00c00044 	movi	r3,1
 4022448:	10fa3526 	beq	r2,r3,4020d20 <__flash_rwdata_start+0xffff0844>
 402244c:	00c00084 	movi	r3,2
 4022450:	10fbcb26 	beq	r2,r3,4021380 <__flash_rwdata_start+0xffff0ea4>
 4022454:	003a8f06 	br	4020e94 <__flash_rwdata_start+0xffff09b8>
 4022458:	01000034 	movhi	r4,0
 402245c:	21004284 	addi	r4,r4,266
 4022460:	d9003515 	stw	r4,212(sp)
 4022464:	003b7606 	br	4021240 <__flash_rwdata_start+0xffff0d64>
 4022468:	d8802917 	ldw	r2,164(sp)
 402246c:	00c00184 	movi	r3,6
 4022470:	1880012e 	bgeu	r3,r2,4022478 <___vfprintf_internal_r+0x1ca0>
 4022474:	1805883a 	mov	r2,r3
 4022478:	d8802e15 	stw	r2,184(sp)
 402247c:	1000ef16 	blt	r2,zero,402283c <___vfprintf_internal_r+0x2064>
 4022480:	04000034 	movhi	r16,0
 4022484:	d8802a15 	stw	r2,168(sp)
 4022488:	dcc02d15 	stw	r19,180(sp)
 402248c:	d8002915 	stw	zero,164(sp)
 4022490:	d8003215 	stw	zero,200(sp)
 4022494:	84003c04 	addi	r16,r16,240
 4022498:	0039883a 	mov	fp,zero
 402249c:	003aa206 	br	4020f28 <__flash_rwdata_start+0xffff0a4c>
 40224a0:	0021883a 	mov	r16,zero
 40224a4:	003e0706 	br	4021cc4 <__flash_rwdata_start+0xffff17e8>
 40224a8:	d9002c17 	ldw	r4,176(sp)
 40224ac:	d9801e04 	addi	r6,sp,120
 40224b0:	b80b883a 	mov	r5,r23
 40224b4:	4027dd40 	call	4027dd4 <__sprint_r>
 40224b8:	1039c91e 	bne	r2,zero,4020be0 <__flash_rwdata_start+0xffff0704>
 40224bc:	d8802617 	ldw	r2,152(sp)
 40224c0:	d9403317 	ldw	r5,204(sp)
 40224c4:	d8c02017 	ldw	r3,128(sp)
 40224c8:	da000404 	addi	r8,sp,16
 40224cc:	2885c83a 	sub	r2,r5,r2
 40224d0:	003dfb06 	br	4021cc0 <__flash_rwdata_start+0xffff17e4>
 40224d4:	9080004c 	andi	r2,r18,1
 40224d8:	103e8f1e 	bne	r2,zero,4021f18 <__flash_rwdata_start+0xffff1a3c>
 40224dc:	d8802117 	ldw	r2,132(sp)
 40224e0:	003e9e06 	br	4021f5c <__flash_rwdata_start+0xffff1a80>
 40224e4:	1025883a 	mov	r18,r2
 40224e8:	0039883a 	mov	fp,zero
 40224ec:	00800084 	movi	r2,2
 40224f0:	003fd306 	br	4022440 <__flash_rwdata_start+0xffff1f64>
 40224f4:	07000b44 	movi	fp,45
 40224f8:	df002785 	stb	fp,158(sp)
 40224fc:	003a4006 	br	4020e00 <__flash_rwdata_start+0xffff0924>
 4022500:	00c00b44 	movi	r3,45
 4022504:	d8c02785 	stb	r3,158(sp)
 4022508:	d8802a15 	stw	r2,168(sp)
 402250c:	dc802b17 	ldw	r18,172(sp)
 4022510:	d8002915 	stw	zero,164(sp)
 4022514:	07000b44 	movi	fp,45
 4022518:	003a8006 	br	4020f1c <__flash_rwdata_start+0xffff0a40>
 402251c:	04000034 	movhi	r16,0
 4022520:	84003104 	addi	r16,r16,196
 4022524:	003f4706 	br	4022244 <__flash_rwdata_start+0xffff1d68>
 4022528:	d8c02d17 	ldw	r3,180(sp)
 402252c:	d9002f17 	ldw	r4,188(sp)
 4022530:	18800017 	ldw	r2,0(r3)
 4022534:	18c00104 	addi	r3,r3,4
 4022538:	d8c02d15 	stw	r3,180(sp)
 402253c:	11000015 	stw	r4,0(r2)
 4022540:	0038dd06 	br	40208b8 <__flash_rwdata_start+0xffff03dc>
 4022544:	dd802617 	ldw	r22,152(sp)
 4022548:	00bfff44 	movi	r2,-3
 402254c:	b0801c16 	blt	r22,r2,40225c0 <___vfprintf_internal_r+0x1de8>
 4022550:	d9402917 	ldw	r5,164(sp)
 4022554:	2d801a16 	blt	r5,r22,40225c0 <___vfprintf_internal_r+0x1de8>
 4022558:	dd803215 	stw	r22,200(sp)
 402255c:	003e8906 	br	4021f84 <__flash_rwdata_start+0xffff1aa8>
 4022560:	01000034 	movhi	r4,0
 4022564:	21003e84 	addi	r4,r4,250
 4022568:	d9002b15 	stw	r4,172(sp)
 402256c:	003c9106 	br	40217b4 <__flash_rwdata_start+0xffff12d8>
 4022570:	e005883a 	mov	r2,fp
 4022574:	003e7906 	br	4021f5c <__flash_rwdata_start+0xffff1a80>
 4022578:	d9402917 	ldw	r5,164(sp)
 402257c:	df002783 	ldbu	fp,158(sp)
 4022580:	dcc02d15 	stw	r19,180(sp)
 4022584:	d9402a15 	stw	r5,168(sp)
 4022588:	d9402e15 	stw	r5,184(sp)
 402258c:	d8002915 	stw	zero,164(sp)
 4022590:	d8003215 	stw	zero,200(sp)
 4022594:	003a5d06 	br	4020f0c <__flash_rwdata_start+0xffff0a30>
 4022598:	9080004c 	andi	r2,r18,1
 402259c:	0039883a 	mov	fp,zero
 40225a0:	10000426 	beq	r2,zero,40225b4 <___vfprintf_internal_r+0x1ddc>
 40225a4:	00800c04 	movi	r2,48
 40225a8:	dc001dc4 	addi	r16,sp,119
 40225ac:	d8801dc5 	stb	r2,119(sp)
 40225b0:	003b8006 	br	40213b4 <__flash_rwdata_start+0xffff0ed8>
 40225b4:	d8002e15 	stw	zero,184(sp)
 40225b8:	dc001e04 	addi	r16,sp,120
 40225bc:	003a4d06 	br	4020ef4 <__flash_rwdata_start+0xffff0a18>
 40225c0:	8c7fff84 	addi	r17,r17,-2
 40225c4:	b5bfffc4 	addi	r22,r22,-1
 40225c8:	dd802615 	stw	r22,152(sp)
 40225cc:	dc4022c5 	stb	r17,139(sp)
 40225d0:	b000bf16 	blt	r22,zero,40228d0 <___vfprintf_internal_r+0x20f8>
 40225d4:	00800ac4 	movi	r2,43
 40225d8:	d8802305 	stb	r2,140(sp)
 40225dc:	00800244 	movi	r2,9
 40225e0:	15807016 	blt	r2,r22,40227a4 <___vfprintf_internal_r+0x1fcc>
 40225e4:	00800c04 	movi	r2,48
 40225e8:	b5800c04 	addi	r22,r22,48
 40225ec:	d8802345 	stb	r2,141(sp)
 40225f0:	dd802385 	stb	r22,142(sp)
 40225f4:	d88023c4 	addi	r2,sp,143
 40225f8:	df0022c4 	addi	fp,sp,139
 40225fc:	d8c03317 	ldw	r3,204(sp)
 4022600:	1739c83a 	sub	fp,r2,fp
 4022604:	d9003317 	ldw	r4,204(sp)
 4022608:	e0c7883a 	add	r3,fp,r3
 402260c:	df003a15 	stw	fp,232(sp)
 4022610:	d8c02e15 	stw	r3,184(sp)
 4022614:	00800044 	movi	r2,1
 4022618:	1100b30e 	bge	r2,r4,40228e8 <___vfprintf_internal_r+0x2110>
 402261c:	d8c02e17 	ldw	r3,184(sp)
 4022620:	18c00044 	addi	r3,r3,1
 4022624:	d8c02e15 	stw	r3,184(sp)
 4022628:	1805883a 	mov	r2,r3
 402262c:	1800ac16 	blt	r3,zero,40228e0 <___vfprintf_internal_r+0x2108>
 4022630:	d8003215 	stw	zero,200(sp)
 4022634:	003e5d06 	br	4021fac <__flash_rwdata_start+0xffff1ad0>
 4022638:	d9002c17 	ldw	r4,176(sp)
 402263c:	d9801e04 	addi	r6,sp,120
 4022640:	b80b883a 	mov	r5,r23
 4022644:	4027dd40 	call	4027dd4 <__sprint_r>
 4022648:	1039651e 	bne	r2,zero,4020be0 <__flash_rwdata_start+0xffff0704>
 402264c:	dc402617 	ldw	r17,152(sp)
 4022650:	d8c02017 	ldw	r3,128(sp)
 4022654:	d8801f17 	ldw	r2,124(sp)
 4022658:	da000404 	addi	r8,sp,16
 402265c:	003ed606 	br	40221b8 <__flash_rwdata_start+0xffff1cdc>
 4022660:	582b883a 	mov	r21,r11
 4022664:	d8002915 	stw	zero,164(sp)
 4022668:	0038bd06 	br	4020960 <__flash_rwdata_start+0xffff0484>
 402266c:	d8802917 	ldw	r2,164(sp)
 4022670:	103e071e 	bne	r2,zero,4021e90 <__flash_rwdata_start+0xffff19b4>
 4022674:	dc002915 	stw	r16,164(sp)
 4022678:	003e0506 	br	4021e90 <__flash_rwdata_start+0xffff19b4>
 402267c:	d9002917 	ldw	r4,164(sp)
 4022680:	20c00044 	addi	r3,r4,1
 4022684:	003e0f06 	br	4021ec4 <__flash_rwdata_start+0xffff19e8>
 4022688:	01400184 	movi	r5,6
 402268c:	d9402915 	stw	r5,164(sp)
 4022690:	003dff06 	br	4021e90 <__flash_rwdata_start+0xffff19b4>
 4022694:	d8802104 	addi	r2,sp,132
 4022698:	d8800315 	stw	r2,12(sp)
 402269c:	d8802504 	addi	r2,sp,148
 40226a0:	d8800215 	stw	r2,8(sp)
 40226a4:	d8802604 	addi	r2,sp,152
 40226a8:	d8800115 	stw	r2,4(sp)
 40226ac:	d8802917 	ldw	r2,164(sp)
 40226b0:	d9403617 	ldw	r5,216(sp)
 40226b4:	d9002c17 	ldw	r4,176(sp)
 40226b8:	d8800015 	stw	r2,0(sp)
 40226bc:	01c000c4 	movi	r7,3
 40226c0:	980d883a 	mov	r6,r19
 40226c4:	da003d15 	stw	r8,244(sp)
 40226c8:	4022dfc0 	call	4022dfc <_dtoa_r>
 40226cc:	d8c02917 	ldw	r3,164(sp)
 40226d0:	da003d17 	ldw	r8,244(sp)
 40226d4:	1021883a 	mov	r16,r2
 40226d8:	10f9883a 	add	fp,r2,r3
 40226dc:	81000007 	ldb	r4,0(r16)
 40226e0:	00800c04 	movi	r2,48
 40226e4:	20805e26 	beq	r4,r2,4022860 <___vfprintf_internal_r+0x2088>
 40226e8:	d8c02617 	ldw	r3,152(sp)
 40226ec:	e0f9883a 	add	fp,fp,r3
 40226f0:	003e0a06 	br	4021f1c <__flash_rwdata_start+0xffff1a40>
 40226f4:	00c00b44 	movi	r3,45
 40226f8:	24e0003c 	xorhi	r19,r4,32768
 40226fc:	d8c02a05 	stb	r3,168(sp)
 4022700:	003de906 	br	4021ea8 <__flash_rwdata_start+0xffff19cc>
 4022704:	d8c03217 	ldw	r3,200(sp)
 4022708:	00c07a0e 	bge	zero,r3,40228f4 <___vfprintf_internal_r+0x211c>
 402270c:	00800044 	movi	r2,1
 4022710:	d9003317 	ldw	r4,204(sp)
 4022714:	1105883a 	add	r2,r2,r4
 4022718:	d8802e15 	stw	r2,184(sp)
 402271c:	10004e16 	blt	r2,zero,4022858 <___vfprintf_internal_r+0x2080>
 4022720:	044019c4 	movi	r17,103
 4022724:	003e2106 	br	4021fac <__flash_rwdata_start+0xffff1ad0>
 4022728:	d9002917 	ldw	r4,164(sp)
 402272c:	d8802104 	addi	r2,sp,132
 4022730:	d8800315 	stw	r2,12(sp)
 4022734:	d9000015 	stw	r4,0(sp)
 4022738:	d8802504 	addi	r2,sp,148
 402273c:	d9403617 	ldw	r5,216(sp)
 4022740:	d9002c17 	ldw	r4,176(sp)
 4022744:	d8800215 	stw	r2,8(sp)
 4022748:	d8802604 	addi	r2,sp,152
 402274c:	d8800115 	stw	r2,4(sp)
 4022750:	01c000c4 	movi	r7,3
 4022754:	980d883a 	mov	r6,r19
 4022758:	da003d15 	stw	r8,244(sp)
 402275c:	4022dfc0 	call	4022dfc <_dtoa_r>
 4022760:	d8c02917 	ldw	r3,164(sp)
 4022764:	da003d17 	ldw	r8,244(sp)
 4022768:	1021883a 	mov	r16,r2
 402276c:	00801184 	movi	r2,70
 4022770:	80f9883a 	add	fp,r16,r3
 4022774:	88bfd926 	beq	r17,r2,40226dc <__flash_rwdata_start+0xffff2200>
 4022778:	003de806 	br	4021f1c <__flash_rwdata_start+0xffff1a40>
 402277c:	d9002917 	ldw	r4,164(sp)
 4022780:	00c04d0e 	bge	zero,r3,40228b8 <___vfprintf_internal_r+0x20e0>
 4022784:	2000441e 	bne	r4,zero,4022898 <___vfprintf_internal_r+0x20c0>
 4022788:	9480004c 	andi	r18,r18,1
 402278c:	9000421e 	bne	r18,zero,4022898 <___vfprintf_internal_r+0x20c0>
 4022790:	1805883a 	mov	r2,r3
 4022794:	18007016 	blt	r3,zero,4022958 <___vfprintf_internal_r+0x2180>
 4022798:	d8c03217 	ldw	r3,200(sp)
 402279c:	d8c02e15 	stw	r3,184(sp)
 40227a0:	003e0206 	br	4021fac <__flash_rwdata_start+0xffff1ad0>
 40227a4:	df0022c4 	addi	fp,sp,139
 40227a8:	dc002915 	stw	r16,164(sp)
 40227ac:	4027883a 	mov	r19,r8
 40227b0:	e021883a 	mov	r16,fp
 40227b4:	b009883a 	mov	r4,r22
 40227b8:	01400284 	movi	r5,10
 40227bc:	402a7880 	call	402a788 <__modsi3>
 40227c0:	10800c04 	addi	r2,r2,48
 40227c4:	843fffc4 	addi	r16,r16,-1
 40227c8:	b009883a 	mov	r4,r22
 40227cc:	01400284 	movi	r5,10
 40227d0:	80800005 	stb	r2,0(r16)
 40227d4:	402a7040 	call	402a704 <__divsi3>
 40227d8:	102d883a 	mov	r22,r2
 40227dc:	00800244 	movi	r2,9
 40227e0:	15bff416 	blt	r2,r22,40227b4 <__flash_rwdata_start+0xffff22d8>
 40227e4:	9811883a 	mov	r8,r19
 40227e8:	b0800c04 	addi	r2,r22,48
 40227ec:	8027883a 	mov	r19,r16
 40227f0:	997fffc4 	addi	r5,r19,-1
 40227f4:	98bfffc5 	stb	r2,-1(r19)
 40227f8:	dc002917 	ldw	r16,164(sp)
 40227fc:	2f006a2e 	bgeu	r5,fp,40229a8 <___vfprintf_internal_r+0x21d0>
 4022800:	d9c02384 	addi	r7,sp,142
 4022804:	3ccfc83a 	sub	r7,r7,r19
 4022808:	d9002344 	addi	r4,sp,141
 402280c:	e1cf883a 	add	r7,fp,r7
 4022810:	00000106 	br	4022818 <___vfprintf_internal_r+0x2040>
 4022814:	28800003 	ldbu	r2,0(r5)
 4022818:	20800005 	stb	r2,0(r4)
 402281c:	21000044 	addi	r4,r4,1
 4022820:	29400044 	addi	r5,r5,1
 4022824:	393ffb1e 	bne	r7,r4,4022814 <__flash_rwdata_start+0xffff2338>
 4022828:	d8802304 	addi	r2,sp,140
 402282c:	14c5c83a 	sub	r2,r2,r19
 4022830:	d8c02344 	addi	r3,sp,141
 4022834:	1885883a 	add	r2,r3,r2
 4022838:	003f7006 	br	40225fc <__flash_rwdata_start+0xffff2120>
 402283c:	0005883a 	mov	r2,zero
 4022840:	003f0f06 	br	4022480 <__flash_rwdata_start+0xffff1fa4>
 4022844:	d8c03217 	ldw	r3,200(sp)
 4022848:	18c00044 	addi	r3,r3,1
 402284c:	d8c02e15 	stw	r3,184(sp)
 4022850:	1805883a 	mov	r2,r3
 4022854:	183fb20e 	bge	r3,zero,4022720 <__flash_rwdata_start+0xffff2244>
 4022858:	0005883a 	mov	r2,zero
 402285c:	003fb006 	br	4022720 <__flash_rwdata_start+0xffff2244>
 4022860:	d9003617 	ldw	r4,216(sp)
 4022864:	000d883a 	mov	r6,zero
 4022868:	000f883a 	mov	r7,zero
 402286c:	980b883a 	mov	r5,r19
 4022870:	d8c03c15 	stw	r3,240(sp)
 4022874:	da003d15 	stw	r8,244(sp)
 4022878:	402ba4c0 	call	402ba4c <__eqdf2>
 402287c:	d8c03c17 	ldw	r3,240(sp)
 4022880:	da003d17 	ldw	r8,244(sp)
 4022884:	103f9826 	beq	r2,zero,40226e8 <__flash_rwdata_start+0xffff220c>
 4022888:	00800044 	movi	r2,1
 402288c:	10c7c83a 	sub	r3,r2,r3
 4022890:	d8c02615 	stw	r3,152(sp)
 4022894:	003f9506 	br	40226ec <__flash_rwdata_start+0xffff2210>
 4022898:	d9002917 	ldw	r4,164(sp)
 402289c:	d8c03217 	ldw	r3,200(sp)
 40228a0:	20800044 	addi	r2,r4,1
 40228a4:	1885883a 	add	r2,r3,r2
 40228a8:	d8802e15 	stw	r2,184(sp)
 40228ac:	103dbf0e 	bge	r2,zero,4021fac <__flash_rwdata_start+0xffff1ad0>
 40228b0:	0005883a 	mov	r2,zero
 40228b4:	003dbd06 	br	4021fac <__flash_rwdata_start+0xffff1ad0>
 40228b8:	2000211e 	bne	r4,zero,4022940 <___vfprintf_internal_r+0x2168>
 40228bc:	9480004c 	andi	r18,r18,1
 40228c0:	90001f1e 	bne	r18,zero,4022940 <___vfprintf_internal_r+0x2168>
 40228c4:	00800044 	movi	r2,1
 40228c8:	d8802e15 	stw	r2,184(sp)
 40228cc:	003db706 	br	4021fac <__flash_rwdata_start+0xffff1ad0>
 40228d0:	00800b44 	movi	r2,45
 40228d4:	05adc83a 	sub	r22,zero,r22
 40228d8:	d8802305 	stb	r2,140(sp)
 40228dc:	003f3f06 	br	40225dc <__flash_rwdata_start+0xffff2100>
 40228e0:	0005883a 	mov	r2,zero
 40228e4:	003f5206 	br	4022630 <__flash_rwdata_start+0xffff2154>
 40228e8:	90a4703a 	and	r18,r18,r2
 40228ec:	903f4e26 	beq	r18,zero,4022628 <__flash_rwdata_start+0xffff214c>
 40228f0:	003f4a06 	br	402261c <__flash_rwdata_start+0xffff2140>
 40228f4:	00800084 	movi	r2,2
 40228f8:	10c5c83a 	sub	r2,r2,r3
 40228fc:	003f8406 	br	4022710 <__flash_rwdata_start+0xffff2234>
 4022900:	d8802d17 	ldw	r2,180(sp)
 4022904:	d9002d17 	ldw	r4,180(sp)
 4022908:	ac400043 	ldbu	r17,1(r21)
 402290c:	10800017 	ldw	r2,0(r2)
 4022910:	582b883a 	mov	r21,r11
 4022914:	d8802915 	stw	r2,164(sp)
 4022918:	20800104 	addi	r2,r4,4
 402291c:	d9002917 	ldw	r4,164(sp)
 4022920:	d8802d15 	stw	r2,180(sp)
 4022924:	203e7a0e 	bge	r4,zero,4022310 <__flash_rwdata_start+0xffff1e34>
 4022928:	8c403fcc 	andi	r17,r17,255
 402292c:	00bfffc4 	movi	r2,-1
 4022930:	8c40201c 	xori	r17,r17,128
 4022934:	d8802915 	stw	r2,164(sp)
 4022938:	8c7fe004 	addi	r17,r17,-128
 402293c:	00380706 	br	402095c <__flash_rwdata_start+0xffff0480>
 4022940:	d8c02917 	ldw	r3,164(sp)
 4022944:	18c00084 	addi	r3,r3,2
 4022948:	d8c02e15 	stw	r3,184(sp)
 402294c:	1805883a 	mov	r2,r3
 4022950:	183d960e 	bge	r3,zero,4021fac <__flash_rwdata_start+0xffff1ad0>
 4022954:	003fd606 	br	40228b0 <__flash_rwdata_start+0xffff23d4>
 4022958:	0005883a 	mov	r2,zero
 402295c:	003f8e06 	br	4022798 <__flash_rwdata_start+0xffff22bc>
 4022960:	9080004c 	andi	r2,r18,1
 4022964:	103f811e 	bne	r2,zero,402276c <__flash_rwdata_start+0xffff2290>
 4022968:	d8802117 	ldw	r2,132(sp)
 402296c:	1405c83a 	sub	r2,r2,r16
 4022970:	d8803315 	stw	r2,204(sp)
 4022974:	b47ef326 	beq	r22,r17,4022544 <__flash_rwdata_start+0xffff2068>
 4022978:	dd802617 	ldw	r22,152(sp)
 402297c:	003f1106 	br	40225c4 <__flash_rwdata_start+0xffff20e8>
 4022980:	d9c02785 	stb	r7,158(sp)
 4022984:	00390406 	br	4020d98 <__flash_rwdata_start+0xffff08bc>
 4022988:	d9c02785 	stb	r7,158(sp)
 402298c:	0038d306 	br	4020cdc <__flash_rwdata_start+0xffff0800>
 4022990:	d9c02785 	stb	r7,158(sp)
 4022994:	003a6106 	br	402131c <__flash_rwdata_start+0xffff0e40>
 4022998:	d9c02785 	stb	r7,158(sp)
 402299c:	003af806 	br	4021580 <__flash_rwdata_start+0xffff10a4>
 40229a0:	0005883a 	mov	r2,zero
 40229a4:	003d7e06 	br	4021fa0 <__flash_rwdata_start+0xffff1ac4>
 40229a8:	d8802344 	addi	r2,sp,141
 40229ac:	003f1306 	br	40225fc <__flash_rwdata_start+0xffff2120>
 40229b0:	d9c02785 	stb	r7,158(sp)
 40229b4:	00392306 	br	4020e44 <__flash_rwdata_start+0xffff0968>
 40229b8:	d9c02785 	stb	r7,158(sp)
 40229bc:	003aa906 	br	4021464 <__flash_rwdata_start+0xffff0f88>
 40229c0:	d9c02785 	stb	r7,158(sp)
 40229c4:	003a3d06 	br	40212bc <__flash_rwdata_start+0xffff0de0>
 40229c8:	d9c02785 	stb	r7,158(sp)
 40229cc:	003aca06 	br	40214f8 <__flash_rwdata_start+0xffff101c>

040229d0 <__vfprintf_internal>:
 40229d0:	00800034 	movhi	r2,0
 40229d4:	1087cf04 	addi	r2,r2,7996
 40229d8:	300f883a 	mov	r7,r6
 40229dc:	280d883a 	mov	r6,r5
 40229e0:	200b883a 	mov	r5,r4
 40229e4:	11000017 	ldw	r4,0(r2)
 40229e8:	40207d81 	jmpi	40207d8 <___vfprintf_internal_r>

040229ec <__sbprintf>:
 40229ec:	2880030b 	ldhu	r2,12(r5)
 40229f0:	2ac01917 	ldw	r11,100(r5)
 40229f4:	2a80038b 	ldhu	r10,14(r5)
 40229f8:	2a400717 	ldw	r9,28(r5)
 40229fc:	2a000917 	ldw	r8,36(r5)
 4022a00:	defee204 	addi	sp,sp,-1144
 4022a04:	00c10004 	movi	r3,1024
 4022a08:	dc011a15 	stw	r16,1128(sp)
 4022a0c:	10bfff4c 	andi	r2,r2,65533
 4022a10:	2821883a 	mov	r16,r5
 4022a14:	d8cb883a 	add	r5,sp,r3
 4022a18:	dc811c15 	stw	r18,1136(sp)
 4022a1c:	dc411b15 	stw	r17,1132(sp)
 4022a20:	dfc11d15 	stw	ra,1140(sp)
 4022a24:	2025883a 	mov	r18,r4
 4022a28:	d881030d 	sth	r2,1036(sp)
 4022a2c:	dac11915 	stw	r11,1124(sp)
 4022a30:	da81038d 	sth	r10,1038(sp)
 4022a34:	da410715 	stw	r9,1052(sp)
 4022a38:	da010915 	stw	r8,1060(sp)
 4022a3c:	dec10015 	stw	sp,1024(sp)
 4022a40:	dec10415 	stw	sp,1040(sp)
 4022a44:	d8c10215 	stw	r3,1032(sp)
 4022a48:	d8c10515 	stw	r3,1044(sp)
 4022a4c:	d8010615 	stw	zero,1048(sp)
 4022a50:	40207d80 	call	40207d8 <___vfprintf_internal_r>
 4022a54:	1023883a 	mov	r17,r2
 4022a58:	10000416 	blt	r2,zero,4022a6c <__sbprintf+0x80>
 4022a5c:	d9410004 	addi	r5,sp,1024
 4022a60:	9009883a 	mov	r4,r18
 4022a64:	40246a00 	call	40246a0 <_fflush_r>
 4022a68:	10000d1e 	bne	r2,zero,4022aa0 <__sbprintf+0xb4>
 4022a6c:	d881030b 	ldhu	r2,1036(sp)
 4022a70:	1080100c 	andi	r2,r2,64
 4022a74:	10000326 	beq	r2,zero,4022a84 <__sbprintf+0x98>
 4022a78:	8080030b 	ldhu	r2,12(r16)
 4022a7c:	10801014 	ori	r2,r2,64
 4022a80:	8080030d 	sth	r2,12(r16)
 4022a84:	8805883a 	mov	r2,r17
 4022a88:	dfc11d17 	ldw	ra,1140(sp)
 4022a8c:	dc811c17 	ldw	r18,1136(sp)
 4022a90:	dc411b17 	ldw	r17,1132(sp)
 4022a94:	dc011a17 	ldw	r16,1128(sp)
 4022a98:	dec11e04 	addi	sp,sp,1144
 4022a9c:	f800283a 	ret
 4022aa0:	047fffc4 	movi	r17,-1
 4022aa4:	003ff106 	br	4022a6c <__flash_rwdata_start+0xffff2590>

04022aa8 <__swsetup_r>:
 4022aa8:	00800034 	movhi	r2,0
 4022aac:	defffd04 	addi	sp,sp,-12
 4022ab0:	1087cf04 	addi	r2,r2,7996
 4022ab4:	dc400115 	stw	r17,4(sp)
 4022ab8:	2023883a 	mov	r17,r4
 4022abc:	11000017 	ldw	r4,0(r2)
 4022ac0:	dc000015 	stw	r16,0(sp)
 4022ac4:	dfc00215 	stw	ra,8(sp)
 4022ac8:	2821883a 	mov	r16,r5
 4022acc:	20000226 	beq	r4,zero,4022ad8 <__swsetup_r+0x30>
 4022ad0:	20800e17 	ldw	r2,56(r4)
 4022ad4:	10003126 	beq	r2,zero,4022b9c <__swsetup_r+0xf4>
 4022ad8:	8080030b 	ldhu	r2,12(r16)
 4022adc:	10c0020c 	andi	r3,r2,8
 4022ae0:	1009883a 	mov	r4,r2
 4022ae4:	18000f26 	beq	r3,zero,4022b24 <__swsetup_r+0x7c>
 4022ae8:	80c00417 	ldw	r3,16(r16)
 4022aec:	18001526 	beq	r3,zero,4022b44 <__swsetup_r+0x9c>
 4022af0:	1100004c 	andi	r4,r2,1
 4022af4:	20001c1e 	bne	r4,zero,4022b68 <__swsetup_r+0xc0>
 4022af8:	1080008c 	andi	r2,r2,2
 4022afc:	1000291e 	bne	r2,zero,4022ba4 <__swsetup_r+0xfc>
 4022b00:	80800517 	ldw	r2,20(r16)
 4022b04:	80800215 	stw	r2,8(r16)
 4022b08:	18001c26 	beq	r3,zero,4022b7c <__swsetup_r+0xd4>
 4022b0c:	0005883a 	mov	r2,zero
 4022b10:	dfc00217 	ldw	ra,8(sp)
 4022b14:	dc400117 	ldw	r17,4(sp)
 4022b18:	dc000017 	ldw	r16,0(sp)
 4022b1c:	dec00304 	addi	sp,sp,12
 4022b20:	f800283a 	ret
 4022b24:	2080040c 	andi	r2,r4,16
 4022b28:	10002e26 	beq	r2,zero,4022be4 <__swsetup_r+0x13c>
 4022b2c:	2080010c 	andi	r2,r4,4
 4022b30:	10001e1e 	bne	r2,zero,4022bac <__swsetup_r+0x104>
 4022b34:	80c00417 	ldw	r3,16(r16)
 4022b38:	20800214 	ori	r2,r4,8
 4022b3c:	8080030d 	sth	r2,12(r16)
 4022b40:	183feb1e 	bne	r3,zero,4022af0 <__flash_rwdata_start+0xffff2614>
 4022b44:	1100a00c 	andi	r4,r2,640
 4022b48:	01408004 	movi	r5,512
 4022b4c:	217fe826 	beq	r4,r5,4022af0 <__flash_rwdata_start+0xffff2614>
 4022b50:	800b883a 	mov	r5,r16
 4022b54:	8809883a 	mov	r4,r17
 4022b58:	40256200 	call	4025620 <__smakebuf_r>
 4022b5c:	8080030b 	ldhu	r2,12(r16)
 4022b60:	80c00417 	ldw	r3,16(r16)
 4022b64:	003fe206 	br	4022af0 <__flash_rwdata_start+0xffff2614>
 4022b68:	80800517 	ldw	r2,20(r16)
 4022b6c:	80000215 	stw	zero,8(r16)
 4022b70:	0085c83a 	sub	r2,zero,r2
 4022b74:	80800615 	stw	r2,24(r16)
 4022b78:	183fe41e 	bne	r3,zero,4022b0c <__flash_rwdata_start+0xffff2630>
 4022b7c:	80c0030b 	ldhu	r3,12(r16)
 4022b80:	0005883a 	mov	r2,zero
 4022b84:	1900200c 	andi	r4,r3,128
 4022b88:	203fe126 	beq	r4,zero,4022b10 <__flash_rwdata_start+0xffff2634>
 4022b8c:	18c01014 	ori	r3,r3,64
 4022b90:	80c0030d 	sth	r3,12(r16)
 4022b94:	00bfffc4 	movi	r2,-1
 4022b98:	003fdd06 	br	4022b10 <__flash_rwdata_start+0xffff2634>
 4022b9c:	4024a7c0 	call	4024a7c <__sinit>
 4022ba0:	003fcd06 	br	4022ad8 <__flash_rwdata_start+0xffff25fc>
 4022ba4:	0005883a 	mov	r2,zero
 4022ba8:	003fd606 	br	4022b04 <__flash_rwdata_start+0xffff2628>
 4022bac:	81400c17 	ldw	r5,48(r16)
 4022bb0:	28000626 	beq	r5,zero,4022bcc <__swsetup_r+0x124>
 4022bb4:	80801004 	addi	r2,r16,64
 4022bb8:	28800326 	beq	r5,r2,4022bc8 <__swsetup_r+0x120>
 4022bbc:	8809883a 	mov	r4,r17
 4022bc0:	4024bf00 	call	4024bf0 <_free_r>
 4022bc4:	8100030b 	ldhu	r4,12(r16)
 4022bc8:	80000c15 	stw	zero,48(r16)
 4022bcc:	80c00417 	ldw	r3,16(r16)
 4022bd0:	00bff6c4 	movi	r2,-37
 4022bd4:	1108703a 	and	r4,r2,r4
 4022bd8:	80000115 	stw	zero,4(r16)
 4022bdc:	80c00015 	stw	r3,0(r16)
 4022be0:	003fd506 	br	4022b38 <__flash_rwdata_start+0xffff265c>
 4022be4:	00800244 	movi	r2,9
 4022be8:	88800015 	stw	r2,0(r17)
 4022bec:	20801014 	ori	r2,r4,64
 4022bf0:	8080030d 	sth	r2,12(r16)
 4022bf4:	00bfffc4 	movi	r2,-1
 4022bf8:	003fc506 	br	4022b10 <__flash_rwdata_start+0xffff2634>

04022bfc <quorem>:
 4022bfc:	defff704 	addi	sp,sp,-36
 4022c00:	dc800215 	stw	r18,8(sp)
 4022c04:	20800417 	ldw	r2,16(r4)
 4022c08:	2c800417 	ldw	r18,16(r5)
 4022c0c:	dfc00815 	stw	ra,32(sp)
 4022c10:	ddc00715 	stw	r23,28(sp)
 4022c14:	dd800615 	stw	r22,24(sp)
 4022c18:	dd400515 	stw	r21,20(sp)
 4022c1c:	dd000415 	stw	r20,16(sp)
 4022c20:	dcc00315 	stw	r19,12(sp)
 4022c24:	dc400115 	stw	r17,4(sp)
 4022c28:	dc000015 	stw	r16,0(sp)
 4022c2c:	14807116 	blt	r2,r18,4022df4 <quorem+0x1f8>
 4022c30:	94bfffc4 	addi	r18,r18,-1
 4022c34:	94ad883a 	add	r22,r18,r18
 4022c38:	b5ad883a 	add	r22,r22,r22
 4022c3c:	2c400504 	addi	r17,r5,20
 4022c40:	8da9883a 	add	r20,r17,r22
 4022c44:	25400504 	addi	r21,r4,20
 4022c48:	282f883a 	mov	r23,r5
 4022c4c:	adad883a 	add	r22,r21,r22
 4022c50:	a1400017 	ldw	r5,0(r20)
 4022c54:	2021883a 	mov	r16,r4
 4022c58:	b1000017 	ldw	r4,0(r22)
 4022c5c:	29400044 	addi	r5,r5,1
 4022c60:	402a7fc0 	call	402a7fc <__udivsi3>
 4022c64:	1027883a 	mov	r19,r2
 4022c68:	10002c26 	beq	r2,zero,4022d1c <quorem+0x120>
 4022c6c:	a813883a 	mov	r9,r21
 4022c70:	880b883a 	mov	r5,r17
 4022c74:	0009883a 	mov	r4,zero
 4022c78:	000d883a 	mov	r6,zero
 4022c7c:	2a000017 	ldw	r8,0(r5)
 4022c80:	49c00017 	ldw	r7,0(r9)
 4022c84:	29400104 	addi	r5,r5,4
 4022c88:	40bfffcc 	andi	r2,r8,65535
 4022c8c:	14c5383a 	mul	r2,r2,r19
 4022c90:	4010d43a 	srli	r8,r8,16
 4022c94:	38ffffcc 	andi	r3,r7,65535
 4022c98:	1105883a 	add	r2,r2,r4
 4022c9c:	1008d43a 	srli	r4,r2,16
 4022ca0:	44d1383a 	mul	r8,r8,r19
 4022ca4:	198d883a 	add	r6,r3,r6
 4022ca8:	10ffffcc 	andi	r3,r2,65535
 4022cac:	30c7c83a 	sub	r3,r6,r3
 4022cb0:	380ed43a 	srli	r7,r7,16
 4022cb4:	4105883a 	add	r2,r8,r4
 4022cb8:	180dd43a 	srai	r6,r3,16
 4022cbc:	113fffcc 	andi	r4,r2,65535
 4022cc0:	390fc83a 	sub	r7,r7,r4
 4022cc4:	398d883a 	add	r6,r7,r6
 4022cc8:	300e943a 	slli	r7,r6,16
 4022ccc:	18ffffcc 	andi	r3,r3,65535
 4022cd0:	1008d43a 	srli	r4,r2,16
 4022cd4:	38ceb03a 	or	r7,r7,r3
 4022cd8:	49c00015 	stw	r7,0(r9)
 4022cdc:	300dd43a 	srai	r6,r6,16
 4022ce0:	4a400104 	addi	r9,r9,4
 4022ce4:	a17fe52e 	bgeu	r20,r5,4022c7c <__flash_rwdata_start+0xffff27a0>
 4022ce8:	b0800017 	ldw	r2,0(r22)
 4022cec:	10000b1e 	bne	r2,zero,4022d1c <quorem+0x120>
 4022cf0:	b0bfff04 	addi	r2,r22,-4
 4022cf4:	a880082e 	bgeu	r21,r2,4022d18 <quorem+0x11c>
 4022cf8:	b0ffff17 	ldw	r3,-4(r22)
 4022cfc:	18000326 	beq	r3,zero,4022d0c <quorem+0x110>
 4022d00:	00000506 	br	4022d18 <quorem+0x11c>
 4022d04:	10c00017 	ldw	r3,0(r2)
 4022d08:	1800031e 	bne	r3,zero,4022d18 <quorem+0x11c>
 4022d0c:	10bfff04 	addi	r2,r2,-4
 4022d10:	94bfffc4 	addi	r18,r18,-1
 4022d14:	a8bffb36 	bltu	r21,r2,4022d04 <__flash_rwdata_start+0xffff2828>
 4022d18:	84800415 	stw	r18,16(r16)
 4022d1c:	b80b883a 	mov	r5,r23
 4022d20:	8009883a 	mov	r4,r16
 4022d24:	4026d600 	call	4026d60 <__mcmp>
 4022d28:	10002616 	blt	r2,zero,4022dc4 <quorem+0x1c8>
 4022d2c:	9cc00044 	addi	r19,r19,1
 4022d30:	a805883a 	mov	r2,r21
 4022d34:	000b883a 	mov	r5,zero
 4022d38:	11000017 	ldw	r4,0(r2)
 4022d3c:	89800017 	ldw	r6,0(r17)
 4022d40:	10800104 	addi	r2,r2,4
 4022d44:	20ffffcc 	andi	r3,r4,65535
 4022d48:	194b883a 	add	r5,r3,r5
 4022d4c:	30ffffcc 	andi	r3,r6,65535
 4022d50:	28c7c83a 	sub	r3,r5,r3
 4022d54:	300cd43a 	srli	r6,r6,16
 4022d58:	2008d43a 	srli	r4,r4,16
 4022d5c:	180bd43a 	srai	r5,r3,16
 4022d60:	18ffffcc 	andi	r3,r3,65535
 4022d64:	2189c83a 	sub	r4,r4,r6
 4022d68:	2149883a 	add	r4,r4,r5
 4022d6c:	200c943a 	slli	r6,r4,16
 4022d70:	8c400104 	addi	r17,r17,4
 4022d74:	200bd43a 	srai	r5,r4,16
 4022d78:	30c6b03a 	or	r3,r6,r3
 4022d7c:	10ffff15 	stw	r3,-4(r2)
 4022d80:	a47fed2e 	bgeu	r20,r17,4022d38 <__flash_rwdata_start+0xffff285c>
 4022d84:	9485883a 	add	r2,r18,r18
 4022d88:	1085883a 	add	r2,r2,r2
 4022d8c:	a887883a 	add	r3,r21,r2
 4022d90:	18800017 	ldw	r2,0(r3)
 4022d94:	10000b1e 	bne	r2,zero,4022dc4 <quorem+0x1c8>
 4022d98:	18bfff04 	addi	r2,r3,-4
 4022d9c:	a880082e 	bgeu	r21,r2,4022dc0 <quorem+0x1c4>
 4022da0:	18ffff17 	ldw	r3,-4(r3)
 4022da4:	18000326 	beq	r3,zero,4022db4 <quorem+0x1b8>
 4022da8:	00000506 	br	4022dc0 <quorem+0x1c4>
 4022dac:	10c00017 	ldw	r3,0(r2)
 4022db0:	1800031e 	bne	r3,zero,4022dc0 <quorem+0x1c4>
 4022db4:	10bfff04 	addi	r2,r2,-4
 4022db8:	94bfffc4 	addi	r18,r18,-1
 4022dbc:	a8bffb36 	bltu	r21,r2,4022dac <__flash_rwdata_start+0xffff28d0>
 4022dc0:	84800415 	stw	r18,16(r16)
 4022dc4:	9805883a 	mov	r2,r19
 4022dc8:	dfc00817 	ldw	ra,32(sp)
 4022dcc:	ddc00717 	ldw	r23,28(sp)
 4022dd0:	dd800617 	ldw	r22,24(sp)
 4022dd4:	dd400517 	ldw	r21,20(sp)
 4022dd8:	dd000417 	ldw	r20,16(sp)
 4022ddc:	dcc00317 	ldw	r19,12(sp)
 4022de0:	dc800217 	ldw	r18,8(sp)
 4022de4:	dc400117 	ldw	r17,4(sp)
 4022de8:	dc000017 	ldw	r16,0(sp)
 4022dec:	dec00904 	addi	sp,sp,36
 4022df0:	f800283a 	ret
 4022df4:	0005883a 	mov	r2,zero
 4022df8:	003ff306 	br	4022dc8 <__flash_rwdata_start+0xffff28ec>

04022dfc <_dtoa_r>:
 4022dfc:	20801017 	ldw	r2,64(r4)
 4022e00:	deffde04 	addi	sp,sp,-136
 4022e04:	df002015 	stw	fp,128(sp)
 4022e08:	dcc01b15 	stw	r19,108(sp)
 4022e0c:	dc801a15 	stw	r18,104(sp)
 4022e10:	dc401915 	stw	r17,100(sp)
 4022e14:	dc001815 	stw	r16,96(sp)
 4022e18:	dfc02115 	stw	ra,132(sp)
 4022e1c:	ddc01f15 	stw	r23,124(sp)
 4022e20:	dd801e15 	stw	r22,120(sp)
 4022e24:	dd401d15 	stw	r21,116(sp)
 4022e28:	dd001c15 	stw	r20,112(sp)
 4022e2c:	d9c00315 	stw	r7,12(sp)
 4022e30:	2039883a 	mov	fp,r4
 4022e34:	3023883a 	mov	r17,r6
 4022e38:	2825883a 	mov	r18,r5
 4022e3c:	dc002417 	ldw	r16,144(sp)
 4022e40:	3027883a 	mov	r19,r6
 4022e44:	10000826 	beq	r2,zero,4022e68 <_dtoa_r+0x6c>
 4022e48:	21801117 	ldw	r6,68(r4)
 4022e4c:	00c00044 	movi	r3,1
 4022e50:	100b883a 	mov	r5,r2
 4022e54:	1986983a 	sll	r3,r3,r6
 4022e58:	11800115 	stw	r6,4(r2)
 4022e5c:	10c00215 	stw	r3,8(r2)
 4022e60:	40265400 	call	4026540 <_Bfree>
 4022e64:	e0001015 	stw	zero,64(fp)
 4022e68:	88002e16 	blt	r17,zero,4022f24 <_dtoa_r+0x128>
 4022e6c:	80000015 	stw	zero,0(r16)
 4022e70:	889ffc2c 	andhi	r2,r17,32752
 4022e74:	00dffc34 	movhi	r3,32752
 4022e78:	10c01c26 	beq	r2,r3,4022eec <_dtoa_r+0xf0>
 4022e7c:	000d883a 	mov	r6,zero
 4022e80:	000f883a 	mov	r7,zero
 4022e84:	9009883a 	mov	r4,r18
 4022e88:	980b883a 	mov	r5,r19
 4022e8c:	402ba4c0 	call	402ba4c <__eqdf2>
 4022e90:	10002b1e 	bne	r2,zero,4022f40 <_dtoa_r+0x144>
 4022e94:	d9c02317 	ldw	r7,140(sp)
 4022e98:	00800044 	movi	r2,1
 4022e9c:	38800015 	stw	r2,0(r7)
 4022ea0:	d8802517 	ldw	r2,148(sp)
 4022ea4:	10019e26 	beq	r2,zero,4023520 <_dtoa_r+0x724>
 4022ea8:	d8c02517 	ldw	r3,148(sp)
 4022eac:	00800034 	movhi	r2,0
 4022eb0:	10803e44 	addi	r2,r2,249
 4022eb4:	18800015 	stw	r2,0(r3)
 4022eb8:	10bfffc4 	addi	r2,r2,-1
 4022ebc:	dfc02117 	ldw	ra,132(sp)
 4022ec0:	df002017 	ldw	fp,128(sp)
 4022ec4:	ddc01f17 	ldw	r23,124(sp)
 4022ec8:	dd801e17 	ldw	r22,120(sp)
 4022ecc:	dd401d17 	ldw	r21,116(sp)
 4022ed0:	dd001c17 	ldw	r20,112(sp)
 4022ed4:	dcc01b17 	ldw	r19,108(sp)
 4022ed8:	dc801a17 	ldw	r18,104(sp)
 4022edc:	dc401917 	ldw	r17,100(sp)
 4022ee0:	dc001817 	ldw	r16,96(sp)
 4022ee4:	dec02204 	addi	sp,sp,136
 4022ee8:	f800283a 	ret
 4022eec:	d8c02317 	ldw	r3,140(sp)
 4022ef0:	0089c3c4 	movi	r2,9999
 4022ef4:	18800015 	stw	r2,0(r3)
 4022ef8:	90017726 	beq	r18,zero,40234d8 <_dtoa_r+0x6dc>
 4022efc:	00800034 	movhi	r2,0
 4022f00:	10804a04 	addi	r2,r2,296
 4022f04:	d9002517 	ldw	r4,148(sp)
 4022f08:	203fec26 	beq	r4,zero,4022ebc <__flash_rwdata_start+0xffff29e0>
 4022f0c:	10c000c7 	ldb	r3,3(r2)
 4022f10:	1801781e 	bne	r3,zero,40234f4 <_dtoa_r+0x6f8>
 4022f14:	10c000c4 	addi	r3,r2,3
 4022f18:	d9802517 	ldw	r6,148(sp)
 4022f1c:	30c00015 	stw	r3,0(r6)
 4022f20:	003fe606 	br	4022ebc <__flash_rwdata_start+0xffff29e0>
 4022f24:	04e00034 	movhi	r19,32768
 4022f28:	9cffffc4 	addi	r19,r19,-1
 4022f2c:	00800044 	movi	r2,1
 4022f30:	8ce6703a 	and	r19,r17,r19
 4022f34:	80800015 	stw	r2,0(r16)
 4022f38:	9823883a 	mov	r17,r19
 4022f3c:	003fcc06 	br	4022e70 <__flash_rwdata_start+0xffff2994>
 4022f40:	d8800204 	addi	r2,sp,8
 4022f44:	d8800015 	stw	r2,0(sp)
 4022f48:	d9c00104 	addi	r7,sp,4
 4022f4c:	900b883a 	mov	r5,r18
 4022f50:	980d883a 	mov	r6,r19
 4022f54:	e009883a 	mov	r4,fp
 4022f58:	8820d53a 	srli	r16,r17,20
 4022f5c:	402712c0 	call	402712c <__d2b>
 4022f60:	d8800915 	stw	r2,36(sp)
 4022f64:	8001651e 	bne	r16,zero,40234fc <_dtoa_r+0x700>
 4022f68:	dd800217 	ldw	r22,8(sp)
 4022f6c:	dc000117 	ldw	r16,4(sp)
 4022f70:	00800804 	movi	r2,32
 4022f74:	b421883a 	add	r16,r22,r16
 4022f78:	80c10c84 	addi	r3,r16,1074
 4022f7c:	10c2d10e 	bge	r2,r3,4023ac4 <_dtoa_r+0xcc8>
 4022f80:	00801004 	movi	r2,64
 4022f84:	81010484 	addi	r4,r16,1042
 4022f88:	10c7c83a 	sub	r3,r2,r3
 4022f8c:	9108d83a 	srl	r4,r18,r4
 4022f90:	88e2983a 	sll	r17,r17,r3
 4022f94:	2448b03a 	or	r4,r4,r17
 4022f98:	402ce140 	call	402ce14 <__floatunsidf>
 4022f9c:	017f8434 	movhi	r5,65040
 4022fa0:	01800044 	movi	r6,1
 4022fa4:	1009883a 	mov	r4,r2
 4022fa8:	194b883a 	add	r5,r3,r5
 4022fac:	843fffc4 	addi	r16,r16,-1
 4022fb0:	d9801115 	stw	r6,68(sp)
 4022fb4:	000d883a 	mov	r6,zero
 4022fb8:	01cffe34 	movhi	r7,16376
 4022fbc:	402c3bc0 	call	402c3bc <__subdf3>
 4022fc0:	0198dbf4 	movhi	r6,25455
 4022fc4:	01cff4f4 	movhi	r7,16339
 4022fc8:	3190d844 	addi	r6,r6,17249
 4022fcc:	39e1e9c4 	addi	r7,r7,-30809
 4022fd0:	1009883a 	mov	r4,r2
 4022fd4:	180b883a 	mov	r5,r3
 4022fd8:	402bca40 	call	402bca4 <__muldf3>
 4022fdc:	01a2d874 	movhi	r6,35681
 4022fe0:	01cff1f4 	movhi	r7,16327
 4022fe4:	31b22cc4 	addi	r6,r6,-14157
 4022fe8:	39e28a04 	addi	r7,r7,-30168
 4022fec:	180b883a 	mov	r5,r3
 4022ff0:	1009883a 	mov	r4,r2
 4022ff4:	402a8b80 	call	402a8b8 <__adddf3>
 4022ff8:	8009883a 	mov	r4,r16
 4022ffc:	1029883a 	mov	r20,r2
 4023000:	1823883a 	mov	r17,r3
 4023004:	402cd380 	call	402cd38 <__floatsidf>
 4023008:	019427f4 	movhi	r6,20639
 402300c:	01cff4f4 	movhi	r7,16339
 4023010:	319e7ec4 	addi	r6,r6,31227
 4023014:	39d104c4 	addi	r7,r7,17427
 4023018:	1009883a 	mov	r4,r2
 402301c:	180b883a 	mov	r5,r3
 4023020:	402bca40 	call	402bca4 <__muldf3>
 4023024:	100d883a 	mov	r6,r2
 4023028:	180f883a 	mov	r7,r3
 402302c:	a009883a 	mov	r4,r20
 4023030:	880b883a 	mov	r5,r17
 4023034:	402a8b80 	call	402a8b8 <__adddf3>
 4023038:	1009883a 	mov	r4,r2
 402303c:	180b883a 	mov	r5,r3
 4023040:	1029883a 	mov	r20,r2
 4023044:	1823883a 	mov	r17,r3
 4023048:	402ccb80 	call	402ccb8 <__fixdfsi>
 402304c:	000d883a 	mov	r6,zero
 4023050:	000f883a 	mov	r7,zero
 4023054:	a009883a 	mov	r4,r20
 4023058:	880b883a 	mov	r5,r17
 402305c:	d8800515 	stw	r2,20(sp)
 4023060:	402bbb00 	call	402bbb0 <__ledf2>
 4023064:	10028716 	blt	r2,zero,4023a84 <_dtoa_r+0xc88>
 4023068:	d8c00517 	ldw	r3,20(sp)
 402306c:	00800584 	movi	r2,22
 4023070:	10c27536 	bltu	r2,r3,4023a48 <_dtoa_r+0xc4c>
 4023074:	180490fa 	slli	r2,r3,3
 4023078:	00c00034 	movhi	r3,0
 402307c:	18c06604 	addi	r3,r3,408
 4023080:	1885883a 	add	r2,r3,r2
 4023084:	11000017 	ldw	r4,0(r2)
 4023088:	11400117 	ldw	r5,4(r2)
 402308c:	900d883a 	mov	r6,r18
 4023090:	980f883a 	mov	r7,r19
 4023094:	402bad40 	call	402bad4 <__gedf2>
 4023098:	00828d0e 	bge	zero,r2,4023ad0 <_dtoa_r+0xcd4>
 402309c:	d9000517 	ldw	r4,20(sp)
 40230a0:	d8000e15 	stw	zero,56(sp)
 40230a4:	213fffc4 	addi	r4,r4,-1
 40230a8:	d9000515 	stw	r4,20(sp)
 40230ac:	b42dc83a 	sub	r22,r22,r16
 40230b0:	b5bfffc4 	addi	r22,r22,-1
 40230b4:	b0026f16 	blt	r22,zero,4023a74 <_dtoa_r+0xc78>
 40230b8:	d8000815 	stw	zero,32(sp)
 40230bc:	d9c00517 	ldw	r7,20(sp)
 40230c0:	38026416 	blt	r7,zero,4023a54 <_dtoa_r+0xc58>
 40230c4:	b1ed883a 	add	r22,r22,r7
 40230c8:	d9c00d15 	stw	r7,52(sp)
 40230cc:	d8000a15 	stw	zero,40(sp)
 40230d0:	d9800317 	ldw	r6,12(sp)
 40230d4:	00800244 	movi	r2,9
 40230d8:	11811436 	bltu	r2,r6,402352c <_dtoa_r+0x730>
 40230dc:	00800144 	movi	r2,5
 40230e0:	1184e10e 	bge	r2,r6,4024468 <_dtoa_r+0x166c>
 40230e4:	31bfff04 	addi	r6,r6,-4
 40230e8:	d9800315 	stw	r6,12(sp)
 40230ec:	0023883a 	mov	r17,zero
 40230f0:	d9800317 	ldw	r6,12(sp)
 40230f4:	008000c4 	movi	r2,3
 40230f8:	30836726 	beq	r6,r2,4023e98 <_dtoa_r+0x109c>
 40230fc:	1183410e 	bge	r2,r6,4023e04 <_dtoa_r+0x1008>
 4023100:	d9c00317 	ldw	r7,12(sp)
 4023104:	00800104 	movi	r2,4
 4023108:	38827c26 	beq	r7,r2,4023afc <_dtoa_r+0xd00>
 402310c:	00800144 	movi	r2,5
 4023110:	3884c41e 	bne	r7,r2,4024424 <_dtoa_r+0x1628>
 4023114:	00800044 	movi	r2,1
 4023118:	d8800b15 	stw	r2,44(sp)
 402311c:	d8c00517 	ldw	r3,20(sp)
 4023120:	d9002217 	ldw	r4,136(sp)
 4023124:	1907883a 	add	r3,r3,r4
 4023128:	19800044 	addi	r6,r3,1
 402312c:	d8c00c15 	stw	r3,48(sp)
 4023130:	d9800615 	stw	r6,24(sp)
 4023134:	0183a40e 	bge	zero,r6,4023fc8 <_dtoa_r+0x11cc>
 4023138:	d9800617 	ldw	r6,24(sp)
 402313c:	3021883a 	mov	r16,r6
 4023140:	e0001115 	stw	zero,68(fp)
 4023144:	008005c4 	movi	r2,23
 4023148:	1184c92e 	bgeu	r2,r6,4024470 <_dtoa_r+0x1674>
 402314c:	00c00044 	movi	r3,1
 4023150:	00800104 	movi	r2,4
 4023154:	1085883a 	add	r2,r2,r2
 4023158:	11000504 	addi	r4,r2,20
 402315c:	180b883a 	mov	r5,r3
 4023160:	18c00044 	addi	r3,r3,1
 4023164:	313ffb2e 	bgeu	r6,r4,4023154 <__flash_rwdata_start+0xffff2c78>
 4023168:	e1401115 	stw	r5,68(fp)
 402316c:	e009883a 	mov	r4,fp
 4023170:	40264980 	call	4026498 <_Balloc>
 4023174:	d8800715 	stw	r2,28(sp)
 4023178:	e0801015 	stw	r2,64(fp)
 402317c:	00800384 	movi	r2,14
 4023180:	1400f736 	bltu	r2,r16,4023560 <_dtoa_r+0x764>
 4023184:	8800f626 	beq	r17,zero,4023560 <_dtoa_r+0x764>
 4023188:	d9c00517 	ldw	r7,20(sp)
 402318c:	01c39a0e 	bge	zero,r7,4023ff8 <_dtoa_r+0x11fc>
 4023190:	388003cc 	andi	r2,r7,15
 4023194:	100490fa 	slli	r2,r2,3
 4023198:	382bd13a 	srai	r21,r7,4
 402319c:	00c00034 	movhi	r3,0
 40231a0:	18c06604 	addi	r3,r3,408
 40231a4:	1885883a 	add	r2,r3,r2
 40231a8:	a8c0040c 	andi	r3,r21,16
 40231ac:	12400017 	ldw	r9,0(r2)
 40231b0:	12000117 	ldw	r8,4(r2)
 40231b4:	18037926 	beq	r3,zero,4023f9c <_dtoa_r+0x11a0>
 40231b8:	00800034 	movhi	r2,0
 40231bc:	10805c04 	addi	r2,r2,368
 40231c0:	11800817 	ldw	r6,32(r2)
 40231c4:	11c00917 	ldw	r7,36(r2)
 40231c8:	9009883a 	mov	r4,r18
 40231cc:	980b883a 	mov	r5,r19
 40231d0:	da001715 	stw	r8,92(sp)
 40231d4:	da401615 	stw	r9,88(sp)
 40231d8:	402b1640 	call	402b164 <__divdf3>
 40231dc:	da001717 	ldw	r8,92(sp)
 40231e0:	da401617 	ldw	r9,88(sp)
 40231e4:	ad4003cc 	andi	r21,r21,15
 40231e8:	040000c4 	movi	r16,3
 40231ec:	1023883a 	mov	r17,r2
 40231f0:	1829883a 	mov	r20,r3
 40231f4:	a8001126 	beq	r21,zero,402323c <_dtoa_r+0x440>
 40231f8:	05c00034 	movhi	r23,0
 40231fc:	bdc05c04 	addi	r23,r23,368
 4023200:	4805883a 	mov	r2,r9
 4023204:	4007883a 	mov	r3,r8
 4023208:	a980004c 	andi	r6,r21,1
 402320c:	1009883a 	mov	r4,r2
 4023210:	a82bd07a 	srai	r21,r21,1
 4023214:	180b883a 	mov	r5,r3
 4023218:	30000426 	beq	r6,zero,402322c <_dtoa_r+0x430>
 402321c:	b9800017 	ldw	r6,0(r23)
 4023220:	b9c00117 	ldw	r7,4(r23)
 4023224:	84000044 	addi	r16,r16,1
 4023228:	402bca40 	call	402bca4 <__muldf3>
 402322c:	bdc00204 	addi	r23,r23,8
 4023230:	a83ff51e 	bne	r21,zero,4023208 <__flash_rwdata_start+0xffff2d2c>
 4023234:	1013883a 	mov	r9,r2
 4023238:	1811883a 	mov	r8,r3
 402323c:	480d883a 	mov	r6,r9
 4023240:	400f883a 	mov	r7,r8
 4023244:	8809883a 	mov	r4,r17
 4023248:	a00b883a 	mov	r5,r20
 402324c:	402b1640 	call	402b164 <__divdf3>
 4023250:	d8800f15 	stw	r2,60(sp)
 4023254:	d8c01015 	stw	r3,64(sp)
 4023258:	d8c00e17 	ldw	r3,56(sp)
 402325c:	18000626 	beq	r3,zero,4023278 <_dtoa_r+0x47c>
 4023260:	d9000f17 	ldw	r4,60(sp)
 4023264:	d9401017 	ldw	r5,64(sp)
 4023268:	000d883a 	mov	r6,zero
 402326c:	01cffc34 	movhi	r7,16368
 4023270:	402bbb00 	call	402bbb0 <__ledf2>
 4023274:	10040b16 	blt	r2,zero,40242a4 <_dtoa_r+0x14a8>
 4023278:	8009883a 	mov	r4,r16
 402327c:	402cd380 	call	402cd38 <__floatsidf>
 4023280:	d9800f17 	ldw	r6,60(sp)
 4023284:	d9c01017 	ldw	r7,64(sp)
 4023288:	1009883a 	mov	r4,r2
 402328c:	180b883a 	mov	r5,r3
 4023290:	402bca40 	call	402bca4 <__muldf3>
 4023294:	000d883a 	mov	r6,zero
 4023298:	01d00734 	movhi	r7,16412
 402329c:	1009883a 	mov	r4,r2
 40232a0:	180b883a 	mov	r5,r3
 40232a4:	402a8b80 	call	402a8b8 <__adddf3>
 40232a8:	1021883a 	mov	r16,r2
 40232ac:	d8800617 	ldw	r2,24(sp)
 40232b0:	047f3034 	movhi	r17,64704
 40232b4:	1c63883a 	add	r17,r3,r17
 40232b8:	10031826 	beq	r2,zero,4023f1c <_dtoa_r+0x1120>
 40232bc:	d8c00517 	ldw	r3,20(sp)
 40232c0:	db000617 	ldw	r12,24(sp)
 40232c4:	d8c01315 	stw	r3,76(sp)
 40232c8:	d9000b17 	ldw	r4,44(sp)
 40232cc:	20038f26 	beq	r4,zero,402410c <_dtoa_r+0x1310>
 40232d0:	60bfffc4 	addi	r2,r12,-1
 40232d4:	100490fa 	slli	r2,r2,3
 40232d8:	00c00034 	movhi	r3,0
 40232dc:	18c06604 	addi	r3,r3,408
 40232e0:	1885883a 	add	r2,r3,r2
 40232e4:	11800017 	ldw	r6,0(r2)
 40232e8:	11c00117 	ldw	r7,4(r2)
 40232ec:	d8800717 	ldw	r2,28(sp)
 40232f0:	0009883a 	mov	r4,zero
 40232f4:	014ff834 	movhi	r5,16352
 40232f8:	db001615 	stw	r12,88(sp)
 40232fc:	15c00044 	addi	r23,r2,1
 4023300:	402b1640 	call	402b164 <__divdf3>
 4023304:	800d883a 	mov	r6,r16
 4023308:	880f883a 	mov	r7,r17
 402330c:	1009883a 	mov	r4,r2
 4023310:	180b883a 	mov	r5,r3
 4023314:	402c3bc0 	call	402c3bc <__subdf3>
 4023318:	d9401017 	ldw	r5,64(sp)
 402331c:	d9000f17 	ldw	r4,60(sp)
 4023320:	102b883a 	mov	r21,r2
 4023324:	d8c01215 	stw	r3,72(sp)
 4023328:	402ccb80 	call	402ccb8 <__fixdfsi>
 402332c:	1009883a 	mov	r4,r2
 4023330:	1029883a 	mov	r20,r2
 4023334:	402cd380 	call	402cd38 <__floatsidf>
 4023338:	d9000f17 	ldw	r4,60(sp)
 402333c:	d9401017 	ldw	r5,64(sp)
 4023340:	100d883a 	mov	r6,r2
 4023344:	180f883a 	mov	r7,r3
 4023348:	402c3bc0 	call	402c3bc <__subdf3>
 402334c:	1823883a 	mov	r17,r3
 4023350:	d8c00717 	ldw	r3,28(sp)
 4023354:	d9401217 	ldw	r5,72(sp)
 4023358:	a2000c04 	addi	r8,r20,48
 402335c:	1021883a 	mov	r16,r2
 4023360:	1a000005 	stb	r8,0(r3)
 4023364:	800d883a 	mov	r6,r16
 4023368:	880f883a 	mov	r7,r17
 402336c:	a809883a 	mov	r4,r21
 4023370:	4029883a 	mov	r20,r8
 4023374:	402bad40 	call	402bad4 <__gedf2>
 4023378:	00841d16 	blt	zero,r2,40243f0 <_dtoa_r+0x15f4>
 402337c:	800d883a 	mov	r6,r16
 4023380:	880f883a 	mov	r7,r17
 4023384:	0009883a 	mov	r4,zero
 4023388:	014ffc34 	movhi	r5,16368
 402338c:	402c3bc0 	call	402c3bc <__subdf3>
 4023390:	d9401217 	ldw	r5,72(sp)
 4023394:	100d883a 	mov	r6,r2
 4023398:	180f883a 	mov	r7,r3
 402339c:	a809883a 	mov	r4,r21
 40233a0:	402bad40 	call	402bad4 <__gedf2>
 40233a4:	db001617 	ldw	r12,88(sp)
 40233a8:	00840e16 	blt	zero,r2,40243e4 <_dtoa_r+0x15e8>
 40233ac:	00800044 	movi	r2,1
 40233b0:	13006b0e 	bge	r2,r12,4023560 <_dtoa_r+0x764>
 40233b4:	d9000717 	ldw	r4,28(sp)
 40233b8:	dd800f15 	stw	r22,60(sp)
 40233bc:	dcc01015 	stw	r19,64(sp)
 40233c0:	2319883a 	add	r12,r4,r12
 40233c4:	dcc01217 	ldw	r19,72(sp)
 40233c8:	602d883a 	mov	r22,r12
 40233cc:	dc801215 	stw	r18,72(sp)
 40233d0:	b825883a 	mov	r18,r23
 40233d4:	00000906 	br	40233fc <_dtoa_r+0x600>
 40233d8:	402c3bc0 	call	402c3bc <__subdf3>
 40233dc:	a80d883a 	mov	r6,r21
 40233e0:	980f883a 	mov	r7,r19
 40233e4:	1009883a 	mov	r4,r2
 40233e8:	180b883a 	mov	r5,r3
 40233ec:	402bbb00 	call	402bbb0 <__ledf2>
 40233f0:	1003e816 	blt	r2,zero,4024394 <_dtoa_r+0x1598>
 40233f4:	b825883a 	mov	r18,r23
 40233f8:	bd83e926 	beq	r23,r22,40243a0 <_dtoa_r+0x15a4>
 40233fc:	a809883a 	mov	r4,r21
 4023400:	980b883a 	mov	r5,r19
 4023404:	000d883a 	mov	r6,zero
 4023408:	01d00934 	movhi	r7,16420
 402340c:	402bca40 	call	402bca4 <__muldf3>
 4023410:	000d883a 	mov	r6,zero
 4023414:	01d00934 	movhi	r7,16420
 4023418:	8009883a 	mov	r4,r16
 402341c:	880b883a 	mov	r5,r17
 4023420:	102b883a 	mov	r21,r2
 4023424:	1827883a 	mov	r19,r3
 4023428:	402bca40 	call	402bca4 <__muldf3>
 402342c:	180b883a 	mov	r5,r3
 4023430:	1009883a 	mov	r4,r2
 4023434:	1821883a 	mov	r16,r3
 4023438:	1023883a 	mov	r17,r2
 402343c:	402ccb80 	call	402ccb8 <__fixdfsi>
 4023440:	1009883a 	mov	r4,r2
 4023444:	1029883a 	mov	r20,r2
 4023448:	402cd380 	call	402cd38 <__floatsidf>
 402344c:	8809883a 	mov	r4,r17
 4023450:	800b883a 	mov	r5,r16
 4023454:	100d883a 	mov	r6,r2
 4023458:	180f883a 	mov	r7,r3
 402345c:	402c3bc0 	call	402c3bc <__subdf3>
 4023460:	a5000c04 	addi	r20,r20,48
 4023464:	a80d883a 	mov	r6,r21
 4023468:	980f883a 	mov	r7,r19
 402346c:	1009883a 	mov	r4,r2
 4023470:	180b883a 	mov	r5,r3
 4023474:	95000005 	stb	r20,0(r18)
 4023478:	1021883a 	mov	r16,r2
 402347c:	1823883a 	mov	r17,r3
 4023480:	402bbb00 	call	402bbb0 <__ledf2>
 4023484:	bdc00044 	addi	r23,r23,1
 4023488:	800d883a 	mov	r6,r16
 402348c:	880f883a 	mov	r7,r17
 4023490:	0009883a 	mov	r4,zero
 4023494:	014ffc34 	movhi	r5,16368
 4023498:	103fcf0e 	bge	r2,zero,40233d8 <__flash_rwdata_start+0xffff2efc>
 402349c:	d8c01317 	ldw	r3,76(sp)
 40234a0:	d8c00515 	stw	r3,20(sp)
 40234a4:	d9400917 	ldw	r5,36(sp)
 40234a8:	e009883a 	mov	r4,fp
 40234ac:	40265400 	call	4026540 <_Bfree>
 40234b0:	d9000517 	ldw	r4,20(sp)
 40234b4:	d9802317 	ldw	r6,140(sp)
 40234b8:	d9c02517 	ldw	r7,148(sp)
 40234bc:	b8000005 	stb	zero,0(r23)
 40234c0:	20800044 	addi	r2,r4,1
 40234c4:	30800015 	stw	r2,0(r6)
 40234c8:	3802aa26 	beq	r7,zero,4023f74 <_dtoa_r+0x1178>
 40234cc:	3dc00015 	stw	r23,0(r7)
 40234d0:	d8800717 	ldw	r2,28(sp)
 40234d4:	003e7906 	br	4022ebc <__flash_rwdata_start+0xffff29e0>
 40234d8:	00800434 	movhi	r2,16
 40234dc:	10bfffc4 	addi	r2,r2,-1
 40234e0:	88a2703a 	and	r17,r17,r2
 40234e4:	883e851e 	bne	r17,zero,4022efc <__flash_rwdata_start+0xffff2a20>
 40234e8:	00800034 	movhi	r2,0
 40234ec:	10804704 	addi	r2,r2,284
 40234f0:	003e8406 	br	4022f04 <__flash_rwdata_start+0xffff2a28>
 40234f4:	10c00204 	addi	r3,r2,8
 40234f8:	003e8706 	br	4022f18 <__flash_rwdata_start+0xffff2a3c>
 40234fc:	01400434 	movhi	r5,16
 4023500:	297fffc4 	addi	r5,r5,-1
 4023504:	994a703a 	and	r5,r19,r5
 4023508:	9009883a 	mov	r4,r18
 402350c:	843f0044 	addi	r16,r16,-1023
 4023510:	294ffc34 	orhi	r5,r5,16368
 4023514:	dd800217 	ldw	r22,8(sp)
 4023518:	d8001115 	stw	zero,68(sp)
 402351c:	003ea506 	br	4022fb4 <__flash_rwdata_start+0xffff2ad8>
 4023520:	00800034 	movhi	r2,0
 4023524:	10803e04 	addi	r2,r2,248
 4023528:	003e6406 	br	4022ebc <__flash_rwdata_start+0xffff29e0>
 402352c:	e0001115 	stw	zero,68(fp)
 4023530:	000b883a 	mov	r5,zero
 4023534:	e009883a 	mov	r4,fp
 4023538:	40264980 	call	4026498 <_Balloc>
 402353c:	01bfffc4 	movi	r6,-1
 4023540:	01c00044 	movi	r7,1
 4023544:	d8800715 	stw	r2,28(sp)
 4023548:	d9800c15 	stw	r6,48(sp)
 402354c:	e0801015 	stw	r2,64(fp)
 4023550:	d8000315 	stw	zero,12(sp)
 4023554:	d9c00b15 	stw	r7,44(sp)
 4023558:	d9800615 	stw	r6,24(sp)
 402355c:	d8002215 	stw	zero,136(sp)
 4023560:	d8800117 	ldw	r2,4(sp)
 4023564:	10008916 	blt	r2,zero,402378c <_dtoa_r+0x990>
 4023568:	d9000517 	ldw	r4,20(sp)
 402356c:	00c00384 	movi	r3,14
 4023570:	19008616 	blt	r3,r4,402378c <_dtoa_r+0x990>
 4023574:	200490fa 	slli	r2,r4,3
 4023578:	00c00034 	movhi	r3,0
 402357c:	d9802217 	ldw	r6,136(sp)
 4023580:	18c06604 	addi	r3,r3,408
 4023584:	1885883a 	add	r2,r3,r2
 4023588:	14000017 	ldw	r16,0(r2)
 402358c:	14400117 	ldw	r17,4(r2)
 4023590:	30016316 	blt	r6,zero,4023b20 <_dtoa_r+0xd24>
 4023594:	800d883a 	mov	r6,r16
 4023598:	880f883a 	mov	r7,r17
 402359c:	9009883a 	mov	r4,r18
 40235a0:	980b883a 	mov	r5,r19
 40235a4:	402b1640 	call	402b164 <__divdf3>
 40235a8:	180b883a 	mov	r5,r3
 40235ac:	1009883a 	mov	r4,r2
 40235b0:	402ccb80 	call	402ccb8 <__fixdfsi>
 40235b4:	1009883a 	mov	r4,r2
 40235b8:	102b883a 	mov	r21,r2
 40235bc:	402cd380 	call	402cd38 <__floatsidf>
 40235c0:	800d883a 	mov	r6,r16
 40235c4:	880f883a 	mov	r7,r17
 40235c8:	1009883a 	mov	r4,r2
 40235cc:	180b883a 	mov	r5,r3
 40235d0:	402bca40 	call	402bca4 <__muldf3>
 40235d4:	100d883a 	mov	r6,r2
 40235d8:	180f883a 	mov	r7,r3
 40235dc:	9009883a 	mov	r4,r18
 40235e0:	980b883a 	mov	r5,r19
 40235e4:	402c3bc0 	call	402c3bc <__subdf3>
 40235e8:	d9c00717 	ldw	r7,28(sp)
 40235ec:	1009883a 	mov	r4,r2
 40235f0:	a8800c04 	addi	r2,r21,48
 40235f4:	38800005 	stb	r2,0(r7)
 40235f8:	3dc00044 	addi	r23,r7,1
 40235fc:	d9c00617 	ldw	r7,24(sp)
 4023600:	01800044 	movi	r6,1
 4023604:	180b883a 	mov	r5,r3
 4023608:	2005883a 	mov	r2,r4
 402360c:	39803826 	beq	r7,r6,40236f0 <_dtoa_r+0x8f4>
 4023610:	000d883a 	mov	r6,zero
 4023614:	01d00934 	movhi	r7,16420
 4023618:	402bca40 	call	402bca4 <__muldf3>
 402361c:	000d883a 	mov	r6,zero
 4023620:	000f883a 	mov	r7,zero
 4023624:	1009883a 	mov	r4,r2
 4023628:	180b883a 	mov	r5,r3
 402362c:	1025883a 	mov	r18,r2
 4023630:	1827883a 	mov	r19,r3
 4023634:	402ba4c0 	call	402ba4c <__eqdf2>
 4023638:	103f9a26 	beq	r2,zero,40234a4 <__flash_rwdata_start+0xffff2fc8>
 402363c:	d9c00617 	ldw	r7,24(sp)
 4023640:	d8c00717 	ldw	r3,28(sp)
 4023644:	b829883a 	mov	r20,r23
 4023648:	38bfffc4 	addi	r2,r7,-1
 402364c:	18ad883a 	add	r22,r3,r2
 4023650:	00000a06 	br	402367c <_dtoa_r+0x880>
 4023654:	402bca40 	call	402bca4 <__muldf3>
 4023658:	000d883a 	mov	r6,zero
 402365c:	000f883a 	mov	r7,zero
 4023660:	1009883a 	mov	r4,r2
 4023664:	180b883a 	mov	r5,r3
 4023668:	1025883a 	mov	r18,r2
 402366c:	1827883a 	mov	r19,r3
 4023670:	b829883a 	mov	r20,r23
 4023674:	402ba4c0 	call	402ba4c <__eqdf2>
 4023678:	103f8a26 	beq	r2,zero,40234a4 <__flash_rwdata_start+0xffff2fc8>
 402367c:	800d883a 	mov	r6,r16
 4023680:	880f883a 	mov	r7,r17
 4023684:	9009883a 	mov	r4,r18
 4023688:	980b883a 	mov	r5,r19
 402368c:	402b1640 	call	402b164 <__divdf3>
 4023690:	180b883a 	mov	r5,r3
 4023694:	1009883a 	mov	r4,r2
 4023698:	402ccb80 	call	402ccb8 <__fixdfsi>
 402369c:	1009883a 	mov	r4,r2
 40236a0:	102b883a 	mov	r21,r2
 40236a4:	402cd380 	call	402cd38 <__floatsidf>
 40236a8:	800d883a 	mov	r6,r16
 40236ac:	880f883a 	mov	r7,r17
 40236b0:	1009883a 	mov	r4,r2
 40236b4:	180b883a 	mov	r5,r3
 40236b8:	402bca40 	call	402bca4 <__muldf3>
 40236bc:	100d883a 	mov	r6,r2
 40236c0:	180f883a 	mov	r7,r3
 40236c4:	9009883a 	mov	r4,r18
 40236c8:	980b883a 	mov	r5,r19
 40236cc:	402c3bc0 	call	402c3bc <__subdf3>
 40236d0:	aa000c04 	addi	r8,r21,48
 40236d4:	a2000005 	stb	r8,0(r20)
 40236d8:	000d883a 	mov	r6,zero
 40236dc:	01d00934 	movhi	r7,16420
 40236e0:	1009883a 	mov	r4,r2
 40236e4:	180b883a 	mov	r5,r3
 40236e8:	a5c00044 	addi	r23,r20,1
 40236ec:	b53fd91e 	bne	r22,r20,4023654 <__flash_rwdata_start+0xffff3178>
 40236f0:	100d883a 	mov	r6,r2
 40236f4:	180f883a 	mov	r7,r3
 40236f8:	1009883a 	mov	r4,r2
 40236fc:	180b883a 	mov	r5,r3
 4023700:	402a8b80 	call	402a8b8 <__adddf3>
 4023704:	100d883a 	mov	r6,r2
 4023708:	180f883a 	mov	r7,r3
 402370c:	8009883a 	mov	r4,r16
 4023710:	880b883a 	mov	r5,r17
 4023714:	1027883a 	mov	r19,r2
 4023718:	1825883a 	mov	r18,r3
 402371c:	402bbb00 	call	402bbb0 <__ledf2>
 4023720:	10000816 	blt	r2,zero,4023744 <_dtoa_r+0x948>
 4023724:	980d883a 	mov	r6,r19
 4023728:	900f883a 	mov	r7,r18
 402372c:	8009883a 	mov	r4,r16
 4023730:	880b883a 	mov	r5,r17
 4023734:	402ba4c0 	call	402ba4c <__eqdf2>
 4023738:	103f5a1e 	bne	r2,zero,40234a4 <__flash_rwdata_start+0xffff2fc8>
 402373c:	ad40004c 	andi	r21,r21,1
 4023740:	a83f5826 	beq	r21,zero,40234a4 <__flash_rwdata_start+0xffff2fc8>
 4023744:	bd3fffc3 	ldbu	r20,-1(r23)
 4023748:	b8bfffc4 	addi	r2,r23,-1
 402374c:	1007883a 	mov	r3,r2
 4023750:	01400e44 	movi	r5,57
 4023754:	d9800717 	ldw	r6,28(sp)
 4023758:	00000506 	br	4023770 <_dtoa_r+0x974>
 402375c:	18ffffc4 	addi	r3,r3,-1
 4023760:	11824726 	beq	r2,r6,4024080 <_dtoa_r+0x1284>
 4023764:	1d000003 	ldbu	r20,0(r3)
 4023768:	102f883a 	mov	r23,r2
 402376c:	10bfffc4 	addi	r2,r2,-1
 4023770:	a1003fcc 	andi	r4,r20,255
 4023774:	2100201c 	xori	r4,r4,128
 4023778:	213fe004 	addi	r4,r4,-128
 402377c:	217ff726 	beq	r4,r5,402375c <__flash_rwdata_start+0xffff3280>
 4023780:	a2000044 	addi	r8,r20,1
 4023784:	12000005 	stb	r8,0(r2)
 4023788:	003f4606 	br	40234a4 <__flash_rwdata_start+0xffff2fc8>
 402378c:	d9000b17 	ldw	r4,44(sp)
 4023790:	2000c826 	beq	r4,zero,4023ab4 <_dtoa_r+0xcb8>
 4023794:	d9800317 	ldw	r6,12(sp)
 4023798:	00c00044 	movi	r3,1
 402379c:	1980f90e 	bge	r3,r6,4023b84 <_dtoa_r+0xd88>
 40237a0:	d8800617 	ldw	r2,24(sp)
 40237a4:	d8c00a17 	ldw	r3,40(sp)
 40237a8:	157fffc4 	addi	r21,r2,-1
 40237ac:	1d41f316 	blt	r3,r21,4023f7c <_dtoa_r+0x1180>
 40237b0:	1d6bc83a 	sub	r21,r3,r21
 40237b4:	d9c00617 	ldw	r7,24(sp)
 40237b8:	3802aa16 	blt	r7,zero,4024264 <_dtoa_r+0x1468>
 40237bc:	dd000817 	ldw	r20,32(sp)
 40237c0:	d8800617 	ldw	r2,24(sp)
 40237c4:	d8c00817 	ldw	r3,32(sp)
 40237c8:	01400044 	movi	r5,1
 40237cc:	e009883a 	mov	r4,fp
 40237d0:	1887883a 	add	r3,r3,r2
 40237d4:	d8c00815 	stw	r3,32(sp)
 40237d8:	b0ad883a 	add	r22,r22,r2
 40237dc:	40268a40 	call	40268a4 <__i2b>
 40237e0:	1023883a 	mov	r17,r2
 40237e4:	a0000826 	beq	r20,zero,4023808 <_dtoa_r+0xa0c>
 40237e8:	0580070e 	bge	zero,r22,4023808 <_dtoa_r+0xa0c>
 40237ec:	a005883a 	mov	r2,r20
 40237f0:	b500b916 	blt	r22,r20,4023ad8 <_dtoa_r+0xcdc>
 40237f4:	d9000817 	ldw	r4,32(sp)
 40237f8:	a0a9c83a 	sub	r20,r20,r2
 40237fc:	b0adc83a 	sub	r22,r22,r2
 4023800:	2089c83a 	sub	r4,r4,r2
 4023804:	d9000815 	stw	r4,32(sp)
 4023808:	d9800a17 	ldw	r6,40(sp)
 402380c:	0181810e 	bge	zero,r6,4023e14 <_dtoa_r+0x1018>
 4023810:	d9c00b17 	ldw	r7,44(sp)
 4023814:	3800b326 	beq	r7,zero,4023ae4 <_dtoa_r+0xce8>
 4023818:	a800b226 	beq	r21,zero,4023ae4 <_dtoa_r+0xce8>
 402381c:	880b883a 	mov	r5,r17
 4023820:	a80d883a 	mov	r6,r21
 4023824:	e009883a 	mov	r4,fp
 4023828:	4026ad80 	call	4026ad8 <__pow5mult>
 402382c:	d9800917 	ldw	r6,36(sp)
 4023830:	100b883a 	mov	r5,r2
 4023834:	e009883a 	mov	r4,fp
 4023838:	1023883a 	mov	r17,r2
 402383c:	40268e00 	call	40268e0 <__multiply>
 4023840:	1021883a 	mov	r16,r2
 4023844:	d8800a17 	ldw	r2,40(sp)
 4023848:	d9400917 	ldw	r5,36(sp)
 402384c:	e009883a 	mov	r4,fp
 4023850:	1545c83a 	sub	r2,r2,r21
 4023854:	d8800a15 	stw	r2,40(sp)
 4023858:	40265400 	call	4026540 <_Bfree>
 402385c:	d8c00a17 	ldw	r3,40(sp)
 4023860:	18009f1e 	bne	r3,zero,4023ae0 <_dtoa_r+0xce4>
 4023864:	05c00044 	movi	r23,1
 4023868:	e009883a 	mov	r4,fp
 402386c:	b80b883a 	mov	r5,r23
 4023870:	40268a40 	call	40268a4 <__i2b>
 4023874:	d9000d17 	ldw	r4,52(sp)
 4023878:	102b883a 	mov	r21,r2
 402387c:	2000ce26 	beq	r4,zero,4023bb8 <_dtoa_r+0xdbc>
 4023880:	200d883a 	mov	r6,r4
 4023884:	100b883a 	mov	r5,r2
 4023888:	e009883a 	mov	r4,fp
 402388c:	4026ad80 	call	4026ad8 <__pow5mult>
 4023890:	d9800317 	ldw	r6,12(sp)
 4023894:	102b883a 	mov	r21,r2
 4023898:	b981810e 	bge	r23,r6,4023ea0 <_dtoa_r+0x10a4>
 402389c:	0027883a 	mov	r19,zero
 40238a0:	a8800417 	ldw	r2,16(r21)
 40238a4:	05c00804 	movi	r23,32
 40238a8:	10800104 	addi	r2,r2,4
 40238ac:	1085883a 	add	r2,r2,r2
 40238b0:	1085883a 	add	r2,r2,r2
 40238b4:	a885883a 	add	r2,r21,r2
 40238b8:	11000017 	ldw	r4,0(r2)
 40238bc:	402678c0 	call	402678c <__hi0bits>
 40238c0:	b885c83a 	sub	r2,r23,r2
 40238c4:	1585883a 	add	r2,r2,r22
 40238c8:	108007cc 	andi	r2,r2,31
 40238cc:	1000b326 	beq	r2,zero,4023b9c <_dtoa_r+0xda0>
 40238d0:	00c00804 	movi	r3,32
 40238d4:	1887c83a 	sub	r3,r3,r2
 40238d8:	01000104 	movi	r4,4
 40238dc:	20c2cd0e 	bge	r4,r3,4024414 <_dtoa_r+0x1618>
 40238e0:	00c00704 	movi	r3,28
 40238e4:	1885c83a 	sub	r2,r3,r2
 40238e8:	d8c00817 	ldw	r3,32(sp)
 40238ec:	a0a9883a 	add	r20,r20,r2
 40238f0:	b0ad883a 	add	r22,r22,r2
 40238f4:	1887883a 	add	r3,r3,r2
 40238f8:	d8c00815 	stw	r3,32(sp)
 40238fc:	d9800817 	ldw	r6,32(sp)
 4023900:	0180040e 	bge	zero,r6,4023914 <_dtoa_r+0xb18>
 4023904:	800b883a 	mov	r5,r16
 4023908:	e009883a 	mov	r4,fp
 402390c:	4026c180 	call	4026c18 <__lshift>
 4023910:	1021883a 	mov	r16,r2
 4023914:	0580050e 	bge	zero,r22,402392c <_dtoa_r+0xb30>
 4023918:	a80b883a 	mov	r5,r21
 402391c:	b00d883a 	mov	r6,r22
 4023920:	e009883a 	mov	r4,fp
 4023924:	4026c180 	call	4026c18 <__lshift>
 4023928:	102b883a 	mov	r21,r2
 402392c:	d9c00e17 	ldw	r7,56(sp)
 4023930:	3801211e 	bne	r7,zero,4023db8 <_dtoa_r+0xfbc>
 4023934:	d9800617 	ldw	r6,24(sp)
 4023938:	0181380e 	bge	zero,r6,4023e1c <_dtoa_r+0x1020>
 402393c:	d8c00b17 	ldw	r3,44(sp)
 4023940:	1800ab1e 	bne	r3,zero,4023bf0 <_dtoa_r+0xdf4>
 4023944:	dc800717 	ldw	r18,28(sp)
 4023948:	dcc00617 	ldw	r19,24(sp)
 402394c:	9029883a 	mov	r20,r18
 4023950:	00000206 	br	402395c <_dtoa_r+0xb60>
 4023954:	40265680 	call	4026568 <__multadd>
 4023958:	1021883a 	mov	r16,r2
 402395c:	a80b883a 	mov	r5,r21
 4023960:	8009883a 	mov	r4,r16
 4023964:	4022bfc0 	call	4022bfc <quorem>
 4023968:	10800c04 	addi	r2,r2,48
 402396c:	90800005 	stb	r2,0(r18)
 4023970:	94800044 	addi	r18,r18,1
 4023974:	9507c83a 	sub	r3,r18,r20
 4023978:	000f883a 	mov	r7,zero
 402397c:	01800284 	movi	r6,10
 4023980:	800b883a 	mov	r5,r16
 4023984:	e009883a 	mov	r4,fp
 4023988:	1cfff216 	blt	r3,r19,4023954 <__flash_rwdata_start+0xffff3478>
 402398c:	1011883a 	mov	r8,r2
 4023990:	d8800617 	ldw	r2,24(sp)
 4023994:	0082370e 	bge	zero,r2,4024274 <_dtoa_r+0x1478>
 4023998:	d9000717 	ldw	r4,28(sp)
 402399c:	0025883a 	mov	r18,zero
 40239a0:	20af883a 	add	r23,r4,r2
 40239a4:	01800044 	movi	r6,1
 40239a8:	800b883a 	mov	r5,r16
 40239ac:	e009883a 	mov	r4,fp
 40239b0:	da001715 	stw	r8,92(sp)
 40239b4:	4026c180 	call	4026c18 <__lshift>
 40239b8:	a80b883a 	mov	r5,r21
 40239bc:	1009883a 	mov	r4,r2
 40239c0:	d8800915 	stw	r2,36(sp)
 40239c4:	4026d600 	call	4026d60 <__mcmp>
 40239c8:	da001717 	ldw	r8,92(sp)
 40239cc:	0081800e 	bge	zero,r2,4023fd0 <_dtoa_r+0x11d4>
 40239d0:	b93fffc3 	ldbu	r4,-1(r23)
 40239d4:	b8bfffc4 	addi	r2,r23,-1
 40239d8:	1007883a 	mov	r3,r2
 40239dc:	01800e44 	movi	r6,57
 40239e0:	d9c00717 	ldw	r7,28(sp)
 40239e4:	00000506 	br	40239fc <_dtoa_r+0xc00>
 40239e8:	18ffffc4 	addi	r3,r3,-1
 40239ec:	11c12326 	beq	r2,r7,4023e7c <_dtoa_r+0x1080>
 40239f0:	19000003 	ldbu	r4,0(r3)
 40239f4:	102f883a 	mov	r23,r2
 40239f8:	10bfffc4 	addi	r2,r2,-1
 40239fc:	21403fcc 	andi	r5,r4,255
 4023a00:	2940201c 	xori	r5,r5,128
 4023a04:	297fe004 	addi	r5,r5,-128
 4023a08:	29bff726 	beq	r5,r6,40239e8 <__flash_rwdata_start+0xffff350c>
 4023a0c:	21000044 	addi	r4,r4,1
 4023a10:	11000005 	stb	r4,0(r2)
 4023a14:	a80b883a 	mov	r5,r21
 4023a18:	e009883a 	mov	r4,fp
 4023a1c:	40265400 	call	4026540 <_Bfree>
 4023a20:	883ea026 	beq	r17,zero,40234a4 <__flash_rwdata_start+0xffff2fc8>
 4023a24:	90000426 	beq	r18,zero,4023a38 <_dtoa_r+0xc3c>
 4023a28:	94400326 	beq	r18,r17,4023a38 <_dtoa_r+0xc3c>
 4023a2c:	900b883a 	mov	r5,r18
 4023a30:	e009883a 	mov	r4,fp
 4023a34:	40265400 	call	4026540 <_Bfree>
 4023a38:	880b883a 	mov	r5,r17
 4023a3c:	e009883a 	mov	r4,fp
 4023a40:	40265400 	call	4026540 <_Bfree>
 4023a44:	003e9706 	br	40234a4 <__flash_rwdata_start+0xffff2fc8>
 4023a48:	01800044 	movi	r6,1
 4023a4c:	d9800e15 	stw	r6,56(sp)
 4023a50:	003d9606 	br	40230ac <__flash_rwdata_start+0xffff2bd0>
 4023a54:	d8800817 	ldw	r2,32(sp)
 4023a58:	d8c00517 	ldw	r3,20(sp)
 4023a5c:	d8000d15 	stw	zero,52(sp)
 4023a60:	10c5c83a 	sub	r2,r2,r3
 4023a64:	00c9c83a 	sub	r4,zero,r3
 4023a68:	d8800815 	stw	r2,32(sp)
 4023a6c:	d9000a15 	stw	r4,40(sp)
 4023a70:	003d9706 	br	40230d0 <__flash_rwdata_start+0xffff2bf4>
 4023a74:	05adc83a 	sub	r22,zero,r22
 4023a78:	dd800815 	stw	r22,32(sp)
 4023a7c:	002d883a 	mov	r22,zero
 4023a80:	003d8e06 	br	40230bc <__flash_rwdata_start+0xffff2be0>
 4023a84:	d9000517 	ldw	r4,20(sp)
 4023a88:	402cd380 	call	402cd38 <__floatsidf>
 4023a8c:	100d883a 	mov	r6,r2
 4023a90:	180f883a 	mov	r7,r3
 4023a94:	a009883a 	mov	r4,r20
 4023a98:	880b883a 	mov	r5,r17
 4023a9c:	402ba4c0 	call	402ba4c <__eqdf2>
 4023aa0:	103d7126 	beq	r2,zero,4023068 <__flash_rwdata_start+0xffff2b8c>
 4023aa4:	d9c00517 	ldw	r7,20(sp)
 4023aa8:	39ffffc4 	addi	r7,r7,-1
 4023aac:	d9c00515 	stw	r7,20(sp)
 4023ab0:	003d6d06 	br	4023068 <__flash_rwdata_start+0xffff2b8c>
 4023ab4:	dd400a17 	ldw	r21,40(sp)
 4023ab8:	dd000817 	ldw	r20,32(sp)
 4023abc:	0023883a 	mov	r17,zero
 4023ac0:	003f4806 	br	40237e4 <__flash_rwdata_start+0xffff3308>
 4023ac4:	10e3c83a 	sub	r17,r2,r3
 4023ac8:	9448983a 	sll	r4,r18,r17
 4023acc:	003d3206 	br	4022f98 <__flash_rwdata_start+0xffff2abc>
 4023ad0:	d8000e15 	stw	zero,56(sp)
 4023ad4:	003d7506 	br	40230ac <__flash_rwdata_start+0xffff2bd0>
 4023ad8:	b005883a 	mov	r2,r22
 4023adc:	003f4506 	br	40237f4 <__flash_rwdata_start+0xffff3318>
 4023ae0:	dc000915 	stw	r16,36(sp)
 4023ae4:	d9800a17 	ldw	r6,40(sp)
 4023ae8:	d9400917 	ldw	r5,36(sp)
 4023aec:	e009883a 	mov	r4,fp
 4023af0:	4026ad80 	call	4026ad8 <__pow5mult>
 4023af4:	1021883a 	mov	r16,r2
 4023af8:	003f5a06 	br	4023864 <__flash_rwdata_start+0xffff3388>
 4023afc:	01c00044 	movi	r7,1
 4023b00:	d9c00b15 	stw	r7,44(sp)
 4023b04:	d8802217 	ldw	r2,136(sp)
 4023b08:	0081280e 	bge	zero,r2,4023fac <_dtoa_r+0x11b0>
 4023b0c:	100d883a 	mov	r6,r2
 4023b10:	1021883a 	mov	r16,r2
 4023b14:	d8800c15 	stw	r2,48(sp)
 4023b18:	d8800615 	stw	r2,24(sp)
 4023b1c:	003d8806 	br	4023140 <__flash_rwdata_start+0xffff2c64>
 4023b20:	d8800617 	ldw	r2,24(sp)
 4023b24:	00be9b16 	blt	zero,r2,4023594 <__flash_rwdata_start+0xffff30b8>
 4023b28:	10010f1e 	bne	r2,zero,4023f68 <_dtoa_r+0x116c>
 4023b2c:	880b883a 	mov	r5,r17
 4023b30:	000d883a 	mov	r6,zero
 4023b34:	01d00534 	movhi	r7,16404
 4023b38:	8009883a 	mov	r4,r16
 4023b3c:	402bca40 	call	402bca4 <__muldf3>
 4023b40:	900d883a 	mov	r6,r18
 4023b44:	980f883a 	mov	r7,r19
 4023b48:	1009883a 	mov	r4,r2
 4023b4c:	180b883a 	mov	r5,r3
 4023b50:	402bad40 	call	402bad4 <__gedf2>
 4023b54:	002b883a 	mov	r21,zero
 4023b58:	0023883a 	mov	r17,zero
 4023b5c:	1000bf16 	blt	r2,zero,4023e5c <_dtoa_r+0x1060>
 4023b60:	d9802217 	ldw	r6,136(sp)
 4023b64:	ddc00717 	ldw	r23,28(sp)
 4023b68:	018c303a 	nor	r6,zero,r6
 4023b6c:	d9800515 	stw	r6,20(sp)
 4023b70:	a80b883a 	mov	r5,r21
 4023b74:	e009883a 	mov	r4,fp
 4023b78:	40265400 	call	4026540 <_Bfree>
 4023b7c:	883e4926 	beq	r17,zero,40234a4 <__flash_rwdata_start+0xffff2fc8>
 4023b80:	003fad06 	br	4023a38 <__flash_rwdata_start+0xffff355c>
 4023b84:	d9c01117 	ldw	r7,68(sp)
 4023b88:	3801bc26 	beq	r7,zero,402427c <_dtoa_r+0x1480>
 4023b8c:	10810cc4 	addi	r2,r2,1075
 4023b90:	dd400a17 	ldw	r21,40(sp)
 4023b94:	dd000817 	ldw	r20,32(sp)
 4023b98:	003f0a06 	br	40237c4 <__flash_rwdata_start+0xffff32e8>
 4023b9c:	00800704 	movi	r2,28
 4023ba0:	d9000817 	ldw	r4,32(sp)
 4023ba4:	a0a9883a 	add	r20,r20,r2
 4023ba8:	b0ad883a 	add	r22,r22,r2
 4023bac:	2089883a 	add	r4,r4,r2
 4023bb0:	d9000815 	stw	r4,32(sp)
 4023bb4:	003f5106 	br	40238fc <__flash_rwdata_start+0xffff3420>
 4023bb8:	d8c00317 	ldw	r3,12(sp)
 4023bbc:	b8c1fc0e 	bge	r23,r3,40243b0 <_dtoa_r+0x15b4>
 4023bc0:	0027883a 	mov	r19,zero
 4023bc4:	b805883a 	mov	r2,r23
 4023bc8:	003f3e06 	br	40238c4 <__flash_rwdata_start+0xffff33e8>
 4023bcc:	880b883a 	mov	r5,r17
 4023bd0:	e009883a 	mov	r4,fp
 4023bd4:	000f883a 	mov	r7,zero
 4023bd8:	01800284 	movi	r6,10
 4023bdc:	40265680 	call	4026568 <__multadd>
 4023be0:	d9000c17 	ldw	r4,48(sp)
 4023be4:	1023883a 	mov	r17,r2
 4023be8:	0102040e 	bge	zero,r4,40243fc <_dtoa_r+0x1600>
 4023bec:	d9000615 	stw	r4,24(sp)
 4023bf0:	0500050e 	bge	zero,r20,4023c08 <_dtoa_r+0xe0c>
 4023bf4:	880b883a 	mov	r5,r17
 4023bf8:	a00d883a 	mov	r6,r20
 4023bfc:	e009883a 	mov	r4,fp
 4023c00:	4026c180 	call	4026c18 <__lshift>
 4023c04:	1023883a 	mov	r17,r2
 4023c08:	9801241e 	bne	r19,zero,402409c <_dtoa_r+0x12a0>
 4023c0c:	8829883a 	mov	r20,r17
 4023c10:	d9000617 	ldw	r4,24(sp)
 4023c14:	dcc00717 	ldw	r19,28(sp)
 4023c18:	9480004c 	andi	r18,r18,1
 4023c1c:	20bfffc4 	addi	r2,r4,-1
 4023c20:	9885883a 	add	r2,r19,r2
 4023c24:	d8800415 	stw	r2,16(sp)
 4023c28:	dc800615 	stw	r18,24(sp)
 4023c2c:	a80b883a 	mov	r5,r21
 4023c30:	8009883a 	mov	r4,r16
 4023c34:	4022bfc0 	call	4022bfc <quorem>
 4023c38:	880b883a 	mov	r5,r17
 4023c3c:	8009883a 	mov	r4,r16
 4023c40:	102f883a 	mov	r23,r2
 4023c44:	4026d600 	call	4026d60 <__mcmp>
 4023c48:	a80b883a 	mov	r5,r21
 4023c4c:	a00d883a 	mov	r6,r20
 4023c50:	e009883a 	mov	r4,fp
 4023c54:	102d883a 	mov	r22,r2
 4023c58:	4026dc00 	call	4026dc0 <__mdiff>
 4023c5c:	1007883a 	mov	r3,r2
 4023c60:	10800317 	ldw	r2,12(r2)
 4023c64:	bc800c04 	addi	r18,r23,48
 4023c68:	180b883a 	mov	r5,r3
 4023c6c:	10004e1e 	bne	r2,zero,4023da8 <_dtoa_r+0xfac>
 4023c70:	8009883a 	mov	r4,r16
 4023c74:	d8c01615 	stw	r3,88(sp)
 4023c78:	4026d600 	call	4026d60 <__mcmp>
 4023c7c:	d8c01617 	ldw	r3,88(sp)
 4023c80:	e009883a 	mov	r4,fp
 4023c84:	d8801615 	stw	r2,88(sp)
 4023c88:	180b883a 	mov	r5,r3
 4023c8c:	40265400 	call	4026540 <_Bfree>
 4023c90:	d8801617 	ldw	r2,88(sp)
 4023c94:	1000041e 	bne	r2,zero,4023ca8 <_dtoa_r+0xeac>
 4023c98:	d9800317 	ldw	r6,12(sp)
 4023c9c:	3000021e 	bne	r6,zero,4023ca8 <_dtoa_r+0xeac>
 4023ca0:	d8c00617 	ldw	r3,24(sp)
 4023ca4:	18003726 	beq	r3,zero,4023d84 <_dtoa_r+0xf88>
 4023ca8:	b0002016 	blt	r22,zero,4023d2c <_dtoa_r+0xf30>
 4023cac:	b000041e 	bne	r22,zero,4023cc0 <_dtoa_r+0xec4>
 4023cb0:	d9000317 	ldw	r4,12(sp)
 4023cb4:	2000021e 	bne	r4,zero,4023cc0 <_dtoa_r+0xec4>
 4023cb8:	d8c00617 	ldw	r3,24(sp)
 4023cbc:	18001b26 	beq	r3,zero,4023d2c <_dtoa_r+0xf30>
 4023cc0:	00810716 	blt	zero,r2,40240e0 <_dtoa_r+0x12e4>
 4023cc4:	d8c00417 	ldw	r3,16(sp)
 4023cc8:	9d800044 	addi	r22,r19,1
 4023ccc:	9c800005 	stb	r18,0(r19)
 4023cd0:	b02f883a 	mov	r23,r22
 4023cd4:	98c10626 	beq	r19,r3,40240f0 <_dtoa_r+0x12f4>
 4023cd8:	800b883a 	mov	r5,r16
 4023cdc:	000f883a 	mov	r7,zero
 4023ce0:	01800284 	movi	r6,10
 4023ce4:	e009883a 	mov	r4,fp
 4023ce8:	40265680 	call	4026568 <__multadd>
 4023cec:	1021883a 	mov	r16,r2
 4023cf0:	000f883a 	mov	r7,zero
 4023cf4:	01800284 	movi	r6,10
 4023cf8:	880b883a 	mov	r5,r17
 4023cfc:	e009883a 	mov	r4,fp
 4023d00:	8d002526 	beq	r17,r20,4023d98 <_dtoa_r+0xf9c>
 4023d04:	40265680 	call	4026568 <__multadd>
 4023d08:	a00b883a 	mov	r5,r20
 4023d0c:	000f883a 	mov	r7,zero
 4023d10:	01800284 	movi	r6,10
 4023d14:	e009883a 	mov	r4,fp
 4023d18:	1023883a 	mov	r17,r2
 4023d1c:	40265680 	call	4026568 <__multadd>
 4023d20:	1029883a 	mov	r20,r2
 4023d24:	b027883a 	mov	r19,r22
 4023d28:	003fc006 	br	4023c2c <__flash_rwdata_start+0xffff3750>
 4023d2c:	9011883a 	mov	r8,r18
 4023d30:	00800e0e 	bge	zero,r2,4023d6c <_dtoa_r+0xf70>
 4023d34:	800b883a 	mov	r5,r16
 4023d38:	01800044 	movi	r6,1
 4023d3c:	e009883a 	mov	r4,fp
 4023d40:	da001715 	stw	r8,92(sp)
 4023d44:	4026c180 	call	4026c18 <__lshift>
 4023d48:	a80b883a 	mov	r5,r21
 4023d4c:	1009883a 	mov	r4,r2
 4023d50:	1021883a 	mov	r16,r2
 4023d54:	4026d600 	call	4026d60 <__mcmp>
 4023d58:	da001717 	ldw	r8,92(sp)
 4023d5c:	0081960e 	bge	zero,r2,40243b8 <_dtoa_r+0x15bc>
 4023d60:	00800e44 	movi	r2,57
 4023d64:	40817026 	beq	r8,r2,4024328 <_dtoa_r+0x152c>
 4023d68:	ba000c44 	addi	r8,r23,49
 4023d6c:	8825883a 	mov	r18,r17
 4023d70:	9dc00044 	addi	r23,r19,1
 4023d74:	9a000005 	stb	r8,0(r19)
 4023d78:	a023883a 	mov	r17,r20
 4023d7c:	dc000915 	stw	r16,36(sp)
 4023d80:	003f2406 	br	4023a14 <__flash_rwdata_start+0xffff3538>
 4023d84:	00800e44 	movi	r2,57
 4023d88:	9011883a 	mov	r8,r18
 4023d8c:	90816626 	beq	r18,r2,4024328 <_dtoa_r+0x152c>
 4023d90:	05bff516 	blt	zero,r22,4023d68 <__flash_rwdata_start+0xffff388c>
 4023d94:	003ff506 	br	4023d6c <__flash_rwdata_start+0xffff3890>
 4023d98:	40265680 	call	4026568 <__multadd>
 4023d9c:	1023883a 	mov	r17,r2
 4023da0:	1029883a 	mov	r20,r2
 4023da4:	003fdf06 	br	4023d24 <__flash_rwdata_start+0xffff3848>
 4023da8:	e009883a 	mov	r4,fp
 4023dac:	40265400 	call	4026540 <_Bfree>
 4023db0:	00800044 	movi	r2,1
 4023db4:	003fbc06 	br	4023ca8 <__flash_rwdata_start+0xffff37cc>
 4023db8:	a80b883a 	mov	r5,r21
 4023dbc:	8009883a 	mov	r4,r16
 4023dc0:	4026d600 	call	4026d60 <__mcmp>
 4023dc4:	103edb0e 	bge	r2,zero,4023934 <__flash_rwdata_start+0xffff3458>
 4023dc8:	800b883a 	mov	r5,r16
 4023dcc:	000f883a 	mov	r7,zero
 4023dd0:	01800284 	movi	r6,10
 4023dd4:	e009883a 	mov	r4,fp
 4023dd8:	40265680 	call	4026568 <__multadd>
 4023ddc:	1021883a 	mov	r16,r2
 4023de0:	d8800517 	ldw	r2,20(sp)
 4023de4:	d8c00b17 	ldw	r3,44(sp)
 4023de8:	10bfffc4 	addi	r2,r2,-1
 4023dec:	d8800515 	stw	r2,20(sp)
 4023df0:	183f761e 	bne	r3,zero,4023bcc <__flash_rwdata_start+0xffff36f0>
 4023df4:	d9000c17 	ldw	r4,48(sp)
 4023df8:	0101730e 	bge	zero,r4,40243c8 <_dtoa_r+0x15cc>
 4023dfc:	d9000615 	stw	r4,24(sp)
 4023e00:	003ed006 	br	4023944 <__flash_rwdata_start+0xffff3468>
 4023e04:	00800084 	movi	r2,2
 4023e08:	3081861e 	bne	r6,r2,4024424 <_dtoa_r+0x1628>
 4023e0c:	d8000b15 	stw	zero,44(sp)
 4023e10:	003f3c06 	br	4023b04 <__flash_rwdata_start+0xffff3628>
 4023e14:	dc000917 	ldw	r16,36(sp)
 4023e18:	003e9206 	br	4023864 <__flash_rwdata_start+0xffff3388>
 4023e1c:	d9c00317 	ldw	r7,12(sp)
 4023e20:	00800084 	movi	r2,2
 4023e24:	11fec50e 	bge	r2,r7,402393c <__flash_rwdata_start+0xffff3460>
 4023e28:	d9000617 	ldw	r4,24(sp)
 4023e2c:	20013c1e 	bne	r4,zero,4024320 <_dtoa_r+0x1524>
 4023e30:	a80b883a 	mov	r5,r21
 4023e34:	000f883a 	mov	r7,zero
 4023e38:	01800144 	movi	r6,5
 4023e3c:	e009883a 	mov	r4,fp
 4023e40:	40265680 	call	4026568 <__multadd>
 4023e44:	100b883a 	mov	r5,r2
 4023e48:	8009883a 	mov	r4,r16
 4023e4c:	102b883a 	mov	r21,r2
 4023e50:	4026d600 	call	4026d60 <__mcmp>
 4023e54:	dc000915 	stw	r16,36(sp)
 4023e58:	00bf410e 	bge	zero,r2,4023b60 <__flash_rwdata_start+0xffff3684>
 4023e5c:	d9c00717 	ldw	r7,28(sp)
 4023e60:	00800c44 	movi	r2,49
 4023e64:	38800005 	stb	r2,0(r7)
 4023e68:	d8800517 	ldw	r2,20(sp)
 4023e6c:	3dc00044 	addi	r23,r7,1
 4023e70:	10800044 	addi	r2,r2,1
 4023e74:	d8800515 	stw	r2,20(sp)
 4023e78:	003f3d06 	br	4023b70 <__flash_rwdata_start+0xffff3694>
 4023e7c:	d9800517 	ldw	r6,20(sp)
 4023e80:	d9c00717 	ldw	r7,28(sp)
 4023e84:	00800c44 	movi	r2,49
 4023e88:	31800044 	addi	r6,r6,1
 4023e8c:	d9800515 	stw	r6,20(sp)
 4023e90:	38800005 	stb	r2,0(r7)
 4023e94:	003edf06 	br	4023a14 <__flash_rwdata_start+0xffff3538>
 4023e98:	d8000b15 	stw	zero,44(sp)
 4023e9c:	003c9f06 	br	402311c <__flash_rwdata_start+0xffff2c40>
 4023ea0:	903e7e1e 	bne	r18,zero,402389c <__flash_rwdata_start+0xffff33c0>
 4023ea4:	00800434 	movhi	r2,16
 4023ea8:	10bfffc4 	addi	r2,r2,-1
 4023eac:	9884703a 	and	r2,r19,r2
 4023eb0:	1000ea1e 	bne	r2,zero,402425c <_dtoa_r+0x1460>
 4023eb4:	9cdffc2c 	andhi	r19,r19,32752
 4023eb8:	9800e826 	beq	r19,zero,402425c <_dtoa_r+0x1460>
 4023ebc:	d9c00817 	ldw	r7,32(sp)
 4023ec0:	b5800044 	addi	r22,r22,1
 4023ec4:	04c00044 	movi	r19,1
 4023ec8:	39c00044 	addi	r7,r7,1
 4023ecc:	d9c00815 	stw	r7,32(sp)
 4023ed0:	d8800d17 	ldw	r2,52(sp)
 4023ed4:	103e721e 	bne	r2,zero,40238a0 <__flash_rwdata_start+0xffff33c4>
 4023ed8:	00800044 	movi	r2,1
 4023edc:	003e7906 	br	40238c4 <__flash_rwdata_start+0xffff33e8>
 4023ee0:	8009883a 	mov	r4,r16
 4023ee4:	402cd380 	call	402cd38 <__floatsidf>
 4023ee8:	d9800f17 	ldw	r6,60(sp)
 4023eec:	d9c01017 	ldw	r7,64(sp)
 4023ef0:	1009883a 	mov	r4,r2
 4023ef4:	180b883a 	mov	r5,r3
 4023ef8:	402bca40 	call	402bca4 <__muldf3>
 4023efc:	000d883a 	mov	r6,zero
 4023f00:	01d00734 	movhi	r7,16412
 4023f04:	1009883a 	mov	r4,r2
 4023f08:	180b883a 	mov	r5,r3
 4023f0c:	402a8b80 	call	402a8b8 <__adddf3>
 4023f10:	047f3034 	movhi	r17,64704
 4023f14:	1021883a 	mov	r16,r2
 4023f18:	1c63883a 	add	r17,r3,r17
 4023f1c:	d9000f17 	ldw	r4,60(sp)
 4023f20:	d9401017 	ldw	r5,64(sp)
 4023f24:	000d883a 	mov	r6,zero
 4023f28:	01d00534 	movhi	r7,16404
 4023f2c:	402c3bc0 	call	402c3bc <__subdf3>
 4023f30:	800d883a 	mov	r6,r16
 4023f34:	880f883a 	mov	r7,r17
 4023f38:	1009883a 	mov	r4,r2
 4023f3c:	180b883a 	mov	r5,r3
 4023f40:	102b883a 	mov	r21,r2
 4023f44:	1829883a 	mov	r20,r3
 4023f48:	402bad40 	call	402bad4 <__gedf2>
 4023f4c:	00806c16 	blt	zero,r2,4024100 <_dtoa_r+0x1304>
 4023f50:	89e0003c 	xorhi	r7,r17,32768
 4023f54:	800d883a 	mov	r6,r16
 4023f58:	a809883a 	mov	r4,r21
 4023f5c:	a00b883a 	mov	r5,r20
 4023f60:	402bbb00 	call	402bbb0 <__ledf2>
 4023f64:	103d7e0e 	bge	r2,zero,4023560 <__flash_rwdata_start+0xffff3084>
 4023f68:	002b883a 	mov	r21,zero
 4023f6c:	0023883a 	mov	r17,zero
 4023f70:	003efb06 	br	4023b60 <__flash_rwdata_start+0xffff3684>
 4023f74:	d8800717 	ldw	r2,28(sp)
 4023f78:	003bd006 	br	4022ebc <__flash_rwdata_start+0xffff29e0>
 4023f7c:	d9000a17 	ldw	r4,40(sp)
 4023f80:	d9800d17 	ldw	r6,52(sp)
 4023f84:	dd400a15 	stw	r21,40(sp)
 4023f88:	a905c83a 	sub	r2,r21,r4
 4023f8c:	308d883a 	add	r6,r6,r2
 4023f90:	d9800d15 	stw	r6,52(sp)
 4023f94:	002b883a 	mov	r21,zero
 4023f98:	003e0606 	br	40237b4 <__flash_rwdata_start+0xffff32d8>
 4023f9c:	9023883a 	mov	r17,r18
 4023fa0:	9829883a 	mov	r20,r19
 4023fa4:	04000084 	movi	r16,2
 4023fa8:	003c9206 	br	40231f4 <__flash_rwdata_start+0xffff2d18>
 4023fac:	04000044 	movi	r16,1
 4023fb0:	dc000c15 	stw	r16,48(sp)
 4023fb4:	dc000615 	stw	r16,24(sp)
 4023fb8:	dc002215 	stw	r16,136(sp)
 4023fbc:	e0001115 	stw	zero,68(fp)
 4023fc0:	000b883a 	mov	r5,zero
 4023fc4:	003c6906 	br	402316c <__flash_rwdata_start+0xffff2c90>
 4023fc8:	3021883a 	mov	r16,r6
 4023fcc:	003ffb06 	br	4023fbc <__flash_rwdata_start+0xffff3ae0>
 4023fd0:	1000021e 	bne	r2,zero,4023fdc <_dtoa_r+0x11e0>
 4023fd4:	4200004c 	andi	r8,r8,1
 4023fd8:	403e7d1e 	bne	r8,zero,40239d0 <__flash_rwdata_start+0xffff34f4>
 4023fdc:	01000c04 	movi	r4,48
 4023fe0:	00000106 	br	4023fe8 <_dtoa_r+0x11ec>
 4023fe4:	102f883a 	mov	r23,r2
 4023fe8:	b8bfffc4 	addi	r2,r23,-1
 4023fec:	10c00007 	ldb	r3,0(r2)
 4023ff0:	193ffc26 	beq	r3,r4,4023fe4 <__flash_rwdata_start+0xffff3b08>
 4023ff4:	003e8706 	br	4023a14 <__flash_rwdata_start+0xffff3538>
 4023ff8:	d8800517 	ldw	r2,20(sp)
 4023ffc:	00a3c83a 	sub	r17,zero,r2
 4024000:	8800a426 	beq	r17,zero,4024294 <_dtoa_r+0x1498>
 4024004:	888003cc 	andi	r2,r17,15
 4024008:	100490fa 	slli	r2,r2,3
 402400c:	00c00034 	movhi	r3,0
 4024010:	18c06604 	addi	r3,r3,408
 4024014:	1885883a 	add	r2,r3,r2
 4024018:	11800017 	ldw	r6,0(r2)
 402401c:	11c00117 	ldw	r7,4(r2)
 4024020:	9009883a 	mov	r4,r18
 4024024:	980b883a 	mov	r5,r19
 4024028:	8823d13a 	srai	r17,r17,4
 402402c:	402bca40 	call	402bca4 <__muldf3>
 4024030:	d8800f15 	stw	r2,60(sp)
 4024034:	d8c01015 	stw	r3,64(sp)
 4024038:	8800e826 	beq	r17,zero,40243dc <_dtoa_r+0x15e0>
 402403c:	05000034 	movhi	r20,0
 4024040:	a5005c04 	addi	r20,r20,368
 4024044:	04000084 	movi	r16,2
 4024048:	8980004c 	andi	r6,r17,1
 402404c:	1009883a 	mov	r4,r2
 4024050:	8823d07a 	srai	r17,r17,1
 4024054:	180b883a 	mov	r5,r3
 4024058:	30000426 	beq	r6,zero,402406c <_dtoa_r+0x1270>
 402405c:	a1800017 	ldw	r6,0(r20)
 4024060:	a1c00117 	ldw	r7,4(r20)
 4024064:	84000044 	addi	r16,r16,1
 4024068:	402bca40 	call	402bca4 <__muldf3>
 402406c:	a5000204 	addi	r20,r20,8
 4024070:	883ff51e 	bne	r17,zero,4024048 <__flash_rwdata_start+0xffff3b6c>
 4024074:	d8800f15 	stw	r2,60(sp)
 4024078:	d8c01015 	stw	r3,64(sp)
 402407c:	003c7606 	br	4023258 <__flash_rwdata_start+0xffff2d7c>
 4024080:	00c00c04 	movi	r3,48
 4024084:	10c00005 	stb	r3,0(r2)
 4024088:	d8c00517 	ldw	r3,20(sp)
 402408c:	bd3fffc3 	ldbu	r20,-1(r23)
 4024090:	18c00044 	addi	r3,r3,1
 4024094:	d8c00515 	stw	r3,20(sp)
 4024098:	003db906 	br	4023780 <__flash_rwdata_start+0xffff32a4>
 402409c:	89400117 	ldw	r5,4(r17)
 40240a0:	e009883a 	mov	r4,fp
 40240a4:	40264980 	call	4026498 <_Balloc>
 40240a8:	89800417 	ldw	r6,16(r17)
 40240ac:	89400304 	addi	r5,r17,12
 40240b0:	11000304 	addi	r4,r2,12
 40240b4:	31800084 	addi	r6,r6,2
 40240b8:	318d883a 	add	r6,r6,r6
 40240bc:	318d883a 	add	r6,r6,r6
 40240c0:	1027883a 	mov	r19,r2
 40240c4:	40260cc0 	call	40260cc <memcpy>
 40240c8:	01800044 	movi	r6,1
 40240cc:	980b883a 	mov	r5,r19
 40240d0:	e009883a 	mov	r4,fp
 40240d4:	4026c180 	call	4026c18 <__lshift>
 40240d8:	1029883a 	mov	r20,r2
 40240dc:	003ecc06 	br	4023c10 <__flash_rwdata_start+0xffff3734>
 40240e0:	00800e44 	movi	r2,57
 40240e4:	90809026 	beq	r18,r2,4024328 <_dtoa_r+0x152c>
 40240e8:	92000044 	addi	r8,r18,1
 40240ec:	003f1f06 	br	4023d6c <__flash_rwdata_start+0xffff3890>
 40240f0:	9011883a 	mov	r8,r18
 40240f4:	8825883a 	mov	r18,r17
 40240f8:	a023883a 	mov	r17,r20
 40240fc:	003e2906 	br	40239a4 <__flash_rwdata_start+0xffff34c8>
 4024100:	002b883a 	mov	r21,zero
 4024104:	0023883a 	mov	r17,zero
 4024108:	003f5406 	br	4023e5c <__flash_rwdata_start+0xffff3980>
 402410c:	61bfffc4 	addi	r6,r12,-1
 4024110:	300490fa 	slli	r2,r6,3
 4024114:	00c00034 	movhi	r3,0
 4024118:	18c06604 	addi	r3,r3,408
 402411c:	1885883a 	add	r2,r3,r2
 4024120:	11000017 	ldw	r4,0(r2)
 4024124:	11400117 	ldw	r5,4(r2)
 4024128:	d8800717 	ldw	r2,28(sp)
 402412c:	880f883a 	mov	r7,r17
 4024130:	d9801215 	stw	r6,72(sp)
 4024134:	800d883a 	mov	r6,r16
 4024138:	db001615 	stw	r12,88(sp)
 402413c:	15c00044 	addi	r23,r2,1
 4024140:	402bca40 	call	402bca4 <__muldf3>
 4024144:	d9401017 	ldw	r5,64(sp)
 4024148:	d9000f17 	ldw	r4,60(sp)
 402414c:	d8c01515 	stw	r3,84(sp)
 4024150:	d8801415 	stw	r2,80(sp)
 4024154:	402ccb80 	call	402ccb8 <__fixdfsi>
 4024158:	1009883a 	mov	r4,r2
 402415c:	1021883a 	mov	r16,r2
 4024160:	402cd380 	call	402cd38 <__floatsidf>
 4024164:	d9000f17 	ldw	r4,60(sp)
 4024168:	d9401017 	ldw	r5,64(sp)
 402416c:	100d883a 	mov	r6,r2
 4024170:	180f883a 	mov	r7,r3
 4024174:	402c3bc0 	call	402c3bc <__subdf3>
 4024178:	1829883a 	mov	r20,r3
 402417c:	d8c00717 	ldw	r3,28(sp)
 4024180:	84000c04 	addi	r16,r16,48
 4024184:	1023883a 	mov	r17,r2
 4024188:	1c000005 	stb	r16,0(r3)
 402418c:	db001617 	ldw	r12,88(sp)
 4024190:	00800044 	movi	r2,1
 4024194:	60802226 	beq	r12,r2,4024220 <_dtoa_r+0x1424>
 4024198:	d9c00717 	ldw	r7,28(sp)
 402419c:	8805883a 	mov	r2,r17
 40241a0:	b82b883a 	mov	r21,r23
 40241a4:	3b19883a 	add	r12,r7,r12
 40241a8:	6023883a 	mov	r17,r12
 40241ac:	a007883a 	mov	r3,r20
 40241b0:	dc800f15 	stw	r18,60(sp)
 40241b4:	000d883a 	mov	r6,zero
 40241b8:	01d00934 	movhi	r7,16420
 40241bc:	1009883a 	mov	r4,r2
 40241c0:	180b883a 	mov	r5,r3
 40241c4:	402bca40 	call	402bca4 <__muldf3>
 40241c8:	180b883a 	mov	r5,r3
 40241cc:	1009883a 	mov	r4,r2
 40241d0:	1829883a 	mov	r20,r3
 40241d4:	1025883a 	mov	r18,r2
 40241d8:	402ccb80 	call	402ccb8 <__fixdfsi>
 40241dc:	1009883a 	mov	r4,r2
 40241e0:	1021883a 	mov	r16,r2
 40241e4:	402cd380 	call	402cd38 <__floatsidf>
 40241e8:	100d883a 	mov	r6,r2
 40241ec:	180f883a 	mov	r7,r3
 40241f0:	9009883a 	mov	r4,r18
 40241f4:	a00b883a 	mov	r5,r20
 40241f8:	84000c04 	addi	r16,r16,48
 40241fc:	402c3bc0 	call	402c3bc <__subdf3>
 4024200:	ad400044 	addi	r21,r21,1
 4024204:	ac3fffc5 	stb	r16,-1(r21)
 4024208:	ac7fea1e 	bne	r21,r17,40241b4 <__flash_rwdata_start+0xffff3cd8>
 402420c:	1023883a 	mov	r17,r2
 4024210:	d8801217 	ldw	r2,72(sp)
 4024214:	dc800f17 	ldw	r18,60(sp)
 4024218:	1829883a 	mov	r20,r3
 402421c:	b8af883a 	add	r23,r23,r2
 4024220:	d9001417 	ldw	r4,80(sp)
 4024224:	d9401517 	ldw	r5,84(sp)
 4024228:	000d883a 	mov	r6,zero
 402422c:	01cff834 	movhi	r7,16352
 4024230:	402a8b80 	call	402a8b8 <__adddf3>
 4024234:	880d883a 	mov	r6,r17
 4024238:	a00f883a 	mov	r7,r20
 402423c:	1009883a 	mov	r4,r2
 4024240:	180b883a 	mov	r5,r3
 4024244:	402bbb00 	call	402bbb0 <__ledf2>
 4024248:	10003e0e 	bge	r2,zero,4024344 <_dtoa_r+0x1548>
 402424c:	d9001317 	ldw	r4,76(sp)
 4024250:	bd3fffc3 	ldbu	r20,-1(r23)
 4024254:	d9000515 	stw	r4,20(sp)
 4024258:	003d3b06 	br	4023748 <__flash_rwdata_start+0xffff326c>
 402425c:	0027883a 	mov	r19,zero
 4024260:	003f1b06 	br	4023ed0 <__flash_rwdata_start+0xffff39f4>
 4024264:	d8800817 	ldw	r2,32(sp)
 4024268:	11e9c83a 	sub	r20,r2,r7
 402426c:	0005883a 	mov	r2,zero
 4024270:	003d5406 	br	40237c4 <__flash_rwdata_start+0xffff32e8>
 4024274:	00800044 	movi	r2,1
 4024278:	003dc706 	br	4023998 <__flash_rwdata_start+0xffff34bc>
 402427c:	d8c00217 	ldw	r3,8(sp)
 4024280:	00800d84 	movi	r2,54
 4024284:	dd400a17 	ldw	r21,40(sp)
 4024288:	10c5c83a 	sub	r2,r2,r3
 402428c:	dd000817 	ldw	r20,32(sp)
 4024290:	003d4c06 	br	40237c4 <__flash_rwdata_start+0xffff32e8>
 4024294:	dc800f15 	stw	r18,60(sp)
 4024298:	dcc01015 	stw	r19,64(sp)
 402429c:	04000084 	movi	r16,2
 40242a0:	003bed06 	br	4023258 <__flash_rwdata_start+0xffff2d7c>
 40242a4:	d9000617 	ldw	r4,24(sp)
 40242a8:	203f0d26 	beq	r4,zero,4023ee0 <__flash_rwdata_start+0xffff3a04>
 40242ac:	d9800c17 	ldw	r6,48(sp)
 40242b0:	01bcab0e 	bge	zero,r6,4023560 <__flash_rwdata_start+0xffff3084>
 40242b4:	d9401017 	ldw	r5,64(sp)
 40242b8:	d9000f17 	ldw	r4,60(sp)
 40242bc:	000d883a 	mov	r6,zero
 40242c0:	01d00934 	movhi	r7,16420
 40242c4:	402bca40 	call	402bca4 <__muldf3>
 40242c8:	81000044 	addi	r4,r16,1
 40242cc:	d8800f15 	stw	r2,60(sp)
 40242d0:	d8c01015 	stw	r3,64(sp)
 40242d4:	402cd380 	call	402cd38 <__floatsidf>
 40242d8:	d9800f17 	ldw	r6,60(sp)
 40242dc:	d9c01017 	ldw	r7,64(sp)
 40242e0:	1009883a 	mov	r4,r2
 40242e4:	180b883a 	mov	r5,r3
 40242e8:	402bca40 	call	402bca4 <__muldf3>
 40242ec:	01d00734 	movhi	r7,16412
 40242f0:	000d883a 	mov	r6,zero
 40242f4:	1009883a 	mov	r4,r2
 40242f8:	180b883a 	mov	r5,r3
 40242fc:	402a8b80 	call	402a8b8 <__adddf3>
 4024300:	d9c00517 	ldw	r7,20(sp)
 4024304:	047f3034 	movhi	r17,64704
 4024308:	1021883a 	mov	r16,r2
 402430c:	39ffffc4 	addi	r7,r7,-1
 4024310:	d9c01315 	stw	r7,76(sp)
 4024314:	1c63883a 	add	r17,r3,r17
 4024318:	db000c17 	ldw	r12,48(sp)
 402431c:	003bea06 	br	40232c8 <__flash_rwdata_start+0xffff2dec>
 4024320:	dc000915 	stw	r16,36(sp)
 4024324:	003e0e06 	br	4023b60 <__flash_rwdata_start+0xffff3684>
 4024328:	01000e44 	movi	r4,57
 402432c:	8825883a 	mov	r18,r17
 4024330:	9dc00044 	addi	r23,r19,1
 4024334:	99000005 	stb	r4,0(r19)
 4024338:	a023883a 	mov	r17,r20
 402433c:	dc000915 	stw	r16,36(sp)
 4024340:	003da406 	br	40239d4 <__flash_rwdata_start+0xffff34f8>
 4024344:	d9801417 	ldw	r6,80(sp)
 4024348:	d9c01517 	ldw	r7,84(sp)
 402434c:	0009883a 	mov	r4,zero
 4024350:	014ff834 	movhi	r5,16352
 4024354:	402c3bc0 	call	402c3bc <__subdf3>
 4024358:	880d883a 	mov	r6,r17
 402435c:	a00f883a 	mov	r7,r20
 4024360:	1009883a 	mov	r4,r2
 4024364:	180b883a 	mov	r5,r3
 4024368:	402bad40 	call	402bad4 <__gedf2>
 402436c:	00bc7c0e 	bge	zero,r2,4023560 <__flash_rwdata_start+0xffff3084>
 4024370:	01000c04 	movi	r4,48
 4024374:	00000106 	br	402437c <_dtoa_r+0x1580>
 4024378:	102f883a 	mov	r23,r2
 402437c:	b8bfffc4 	addi	r2,r23,-1
 4024380:	10c00007 	ldb	r3,0(r2)
 4024384:	193ffc26 	beq	r3,r4,4024378 <__flash_rwdata_start+0xffff3e9c>
 4024388:	d9801317 	ldw	r6,76(sp)
 402438c:	d9800515 	stw	r6,20(sp)
 4024390:	003c4406 	br	40234a4 <__flash_rwdata_start+0xffff2fc8>
 4024394:	d9801317 	ldw	r6,76(sp)
 4024398:	d9800515 	stw	r6,20(sp)
 402439c:	003cea06 	br	4023748 <__flash_rwdata_start+0xffff326c>
 40243a0:	dd800f17 	ldw	r22,60(sp)
 40243a4:	dcc01017 	ldw	r19,64(sp)
 40243a8:	dc801217 	ldw	r18,72(sp)
 40243ac:	003c6c06 	br	4023560 <__flash_rwdata_start+0xffff3084>
 40243b0:	903e031e 	bne	r18,zero,4023bc0 <__flash_rwdata_start+0xffff36e4>
 40243b4:	003ebb06 	br	4023ea4 <__flash_rwdata_start+0xffff39c8>
 40243b8:	103e6c1e 	bne	r2,zero,4023d6c <__flash_rwdata_start+0xffff3890>
 40243bc:	4080004c 	andi	r2,r8,1
 40243c0:	103e6a26 	beq	r2,zero,4023d6c <__flash_rwdata_start+0xffff3890>
 40243c4:	003e6606 	br	4023d60 <__flash_rwdata_start+0xffff3884>
 40243c8:	d8c00317 	ldw	r3,12(sp)
 40243cc:	00800084 	movi	r2,2
 40243d0:	10c02916 	blt	r2,r3,4024478 <_dtoa_r+0x167c>
 40243d4:	d9000c17 	ldw	r4,48(sp)
 40243d8:	003e8806 	br	4023dfc <__flash_rwdata_start+0xffff3920>
 40243dc:	04000084 	movi	r16,2
 40243e0:	003b9d06 	br	4023258 <__flash_rwdata_start+0xffff2d7c>
 40243e4:	d9001317 	ldw	r4,76(sp)
 40243e8:	d9000515 	stw	r4,20(sp)
 40243ec:	003cd606 	br	4023748 <__flash_rwdata_start+0xffff326c>
 40243f0:	d8801317 	ldw	r2,76(sp)
 40243f4:	d8800515 	stw	r2,20(sp)
 40243f8:	003c2a06 	br	40234a4 <__flash_rwdata_start+0xffff2fc8>
 40243fc:	d9800317 	ldw	r6,12(sp)
 4024400:	00800084 	movi	r2,2
 4024404:	11801516 	blt	r2,r6,402445c <_dtoa_r+0x1660>
 4024408:	d9c00c17 	ldw	r7,48(sp)
 402440c:	d9c00615 	stw	r7,24(sp)
 4024410:	003df706 	br	4023bf0 <__flash_rwdata_start+0xffff3714>
 4024414:	193d3926 	beq	r3,r4,40238fc <__flash_rwdata_start+0xffff3420>
 4024418:	00c00f04 	movi	r3,60
 402441c:	1885c83a 	sub	r2,r3,r2
 4024420:	003ddf06 	br	4023ba0 <__flash_rwdata_start+0xffff36c4>
 4024424:	e009883a 	mov	r4,fp
 4024428:	e0001115 	stw	zero,68(fp)
 402442c:	000b883a 	mov	r5,zero
 4024430:	40264980 	call	4026498 <_Balloc>
 4024434:	d8800715 	stw	r2,28(sp)
 4024438:	d8c00717 	ldw	r3,28(sp)
 402443c:	00bfffc4 	movi	r2,-1
 4024440:	01000044 	movi	r4,1
 4024444:	d8800c15 	stw	r2,48(sp)
 4024448:	e0c01015 	stw	r3,64(fp)
 402444c:	d9000b15 	stw	r4,44(sp)
 4024450:	d8800615 	stw	r2,24(sp)
 4024454:	d8002215 	stw	zero,136(sp)
 4024458:	003c4106 	br	4023560 <__flash_rwdata_start+0xffff3084>
 402445c:	d8c00c17 	ldw	r3,48(sp)
 4024460:	d8c00615 	stw	r3,24(sp)
 4024464:	003e7006 	br	4023e28 <__flash_rwdata_start+0xffff394c>
 4024468:	04400044 	movi	r17,1
 402446c:	003b2006 	br	40230f0 <__flash_rwdata_start+0xffff2c14>
 4024470:	000b883a 	mov	r5,zero
 4024474:	003b3d06 	br	402316c <__flash_rwdata_start+0xffff2c90>
 4024478:	d8800c17 	ldw	r2,48(sp)
 402447c:	d8800615 	stw	r2,24(sp)
 4024480:	003e6906 	br	4023e28 <__flash_rwdata_start+0xffff394c>

04024484 <__sflush_r>:
 4024484:	2880030b 	ldhu	r2,12(r5)
 4024488:	defffb04 	addi	sp,sp,-20
 402448c:	dcc00315 	stw	r19,12(sp)
 4024490:	dc400115 	stw	r17,4(sp)
 4024494:	dfc00415 	stw	ra,16(sp)
 4024498:	dc800215 	stw	r18,8(sp)
 402449c:	dc000015 	stw	r16,0(sp)
 40244a0:	10c0020c 	andi	r3,r2,8
 40244a4:	2823883a 	mov	r17,r5
 40244a8:	2027883a 	mov	r19,r4
 40244ac:	1800311e 	bne	r3,zero,4024574 <__sflush_r+0xf0>
 40244b0:	28c00117 	ldw	r3,4(r5)
 40244b4:	10820014 	ori	r2,r2,2048
 40244b8:	2880030d 	sth	r2,12(r5)
 40244bc:	00c04b0e 	bge	zero,r3,40245ec <__sflush_r+0x168>
 40244c0:	8a000a17 	ldw	r8,40(r17)
 40244c4:	40002326 	beq	r8,zero,4024554 <__sflush_r+0xd0>
 40244c8:	9c000017 	ldw	r16,0(r19)
 40244cc:	10c4000c 	andi	r3,r2,4096
 40244d0:	98000015 	stw	zero,0(r19)
 40244d4:	18004826 	beq	r3,zero,40245f8 <__sflush_r+0x174>
 40244d8:	89801417 	ldw	r6,80(r17)
 40244dc:	10c0010c 	andi	r3,r2,4
 40244e0:	18000626 	beq	r3,zero,40244fc <__sflush_r+0x78>
 40244e4:	88c00117 	ldw	r3,4(r17)
 40244e8:	88800c17 	ldw	r2,48(r17)
 40244ec:	30cdc83a 	sub	r6,r6,r3
 40244f0:	10000226 	beq	r2,zero,40244fc <__sflush_r+0x78>
 40244f4:	88800f17 	ldw	r2,60(r17)
 40244f8:	308dc83a 	sub	r6,r6,r2
 40244fc:	89400717 	ldw	r5,28(r17)
 4024500:	000f883a 	mov	r7,zero
 4024504:	9809883a 	mov	r4,r19
 4024508:	403ee83a 	callr	r8
 402450c:	00ffffc4 	movi	r3,-1
 4024510:	10c04426 	beq	r2,r3,4024624 <__sflush_r+0x1a0>
 4024514:	88c0030b 	ldhu	r3,12(r17)
 4024518:	89000417 	ldw	r4,16(r17)
 402451c:	88000115 	stw	zero,4(r17)
 4024520:	197dffcc 	andi	r5,r3,63487
 4024524:	8940030d 	sth	r5,12(r17)
 4024528:	89000015 	stw	r4,0(r17)
 402452c:	18c4000c 	andi	r3,r3,4096
 4024530:	18002c1e 	bne	r3,zero,40245e4 <__sflush_r+0x160>
 4024534:	89400c17 	ldw	r5,48(r17)
 4024538:	9c000015 	stw	r16,0(r19)
 402453c:	28000526 	beq	r5,zero,4024554 <__sflush_r+0xd0>
 4024540:	88801004 	addi	r2,r17,64
 4024544:	28800226 	beq	r5,r2,4024550 <__sflush_r+0xcc>
 4024548:	9809883a 	mov	r4,r19
 402454c:	4024bf00 	call	4024bf0 <_free_r>
 4024550:	88000c15 	stw	zero,48(r17)
 4024554:	0005883a 	mov	r2,zero
 4024558:	dfc00417 	ldw	ra,16(sp)
 402455c:	dcc00317 	ldw	r19,12(sp)
 4024560:	dc800217 	ldw	r18,8(sp)
 4024564:	dc400117 	ldw	r17,4(sp)
 4024568:	dc000017 	ldw	r16,0(sp)
 402456c:	dec00504 	addi	sp,sp,20
 4024570:	f800283a 	ret
 4024574:	2c800417 	ldw	r18,16(r5)
 4024578:	903ff626 	beq	r18,zero,4024554 <__flash_rwdata_start+0xffff4078>
 402457c:	2c000017 	ldw	r16,0(r5)
 4024580:	108000cc 	andi	r2,r2,3
 4024584:	2c800015 	stw	r18,0(r5)
 4024588:	84a1c83a 	sub	r16,r16,r18
 402458c:	1000131e 	bne	r2,zero,40245dc <__sflush_r+0x158>
 4024590:	28800517 	ldw	r2,20(r5)
 4024594:	88800215 	stw	r2,8(r17)
 4024598:	04000316 	blt	zero,r16,40245a8 <__sflush_r+0x124>
 402459c:	003fed06 	br	4024554 <__flash_rwdata_start+0xffff4078>
 40245a0:	90a5883a 	add	r18,r18,r2
 40245a4:	043feb0e 	bge	zero,r16,4024554 <__flash_rwdata_start+0xffff4078>
 40245a8:	88800917 	ldw	r2,36(r17)
 40245ac:	89400717 	ldw	r5,28(r17)
 40245b0:	800f883a 	mov	r7,r16
 40245b4:	900d883a 	mov	r6,r18
 40245b8:	9809883a 	mov	r4,r19
 40245bc:	103ee83a 	callr	r2
 40245c0:	80a1c83a 	sub	r16,r16,r2
 40245c4:	00bff616 	blt	zero,r2,40245a0 <__flash_rwdata_start+0xffff40c4>
 40245c8:	88c0030b 	ldhu	r3,12(r17)
 40245cc:	00bfffc4 	movi	r2,-1
 40245d0:	18c01014 	ori	r3,r3,64
 40245d4:	88c0030d 	sth	r3,12(r17)
 40245d8:	003fdf06 	br	4024558 <__flash_rwdata_start+0xffff407c>
 40245dc:	0005883a 	mov	r2,zero
 40245e0:	003fec06 	br	4024594 <__flash_rwdata_start+0xffff40b8>
 40245e4:	88801415 	stw	r2,80(r17)
 40245e8:	003fd206 	br	4024534 <__flash_rwdata_start+0xffff4058>
 40245ec:	28c00f17 	ldw	r3,60(r5)
 40245f0:	00ffb316 	blt	zero,r3,40244c0 <__flash_rwdata_start+0xffff3fe4>
 40245f4:	003fd706 	br	4024554 <__flash_rwdata_start+0xffff4078>
 40245f8:	89400717 	ldw	r5,28(r17)
 40245fc:	000d883a 	mov	r6,zero
 4024600:	01c00044 	movi	r7,1
 4024604:	9809883a 	mov	r4,r19
 4024608:	403ee83a 	callr	r8
 402460c:	100d883a 	mov	r6,r2
 4024610:	00bfffc4 	movi	r2,-1
 4024614:	30801426 	beq	r6,r2,4024668 <__sflush_r+0x1e4>
 4024618:	8880030b 	ldhu	r2,12(r17)
 402461c:	8a000a17 	ldw	r8,40(r17)
 4024620:	003fae06 	br	40244dc <__flash_rwdata_start+0xffff4000>
 4024624:	98c00017 	ldw	r3,0(r19)
 4024628:	183fba26 	beq	r3,zero,4024514 <__flash_rwdata_start+0xffff4038>
 402462c:	01000744 	movi	r4,29
 4024630:	19000626 	beq	r3,r4,402464c <__sflush_r+0x1c8>
 4024634:	01000584 	movi	r4,22
 4024638:	19000426 	beq	r3,r4,402464c <__sflush_r+0x1c8>
 402463c:	88c0030b 	ldhu	r3,12(r17)
 4024640:	18c01014 	ori	r3,r3,64
 4024644:	88c0030d 	sth	r3,12(r17)
 4024648:	003fc306 	br	4024558 <__flash_rwdata_start+0xffff407c>
 402464c:	8880030b 	ldhu	r2,12(r17)
 4024650:	88c00417 	ldw	r3,16(r17)
 4024654:	88000115 	stw	zero,4(r17)
 4024658:	10bdffcc 	andi	r2,r2,63487
 402465c:	8880030d 	sth	r2,12(r17)
 4024660:	88c00015 	stw	r3,0(r17)
 4024664:	003fb306 	br	4024534 <__flash_rwdata_start+0xffff4058>
 4024668:	98800017 	ldw	r2,0(r19)
 402466c:	103fea26 	beq	r2,zero,4024618 <__flash_rwdata_start+0xffff413c>
 4024670:	00c00744 	movi	r3,29
 4024674:	10c00226 	beq	r2,r3,4024680 <__sflush_r+0x1fc>
 4024678:	00c00584 	movi	r3,22
 402467c:	10c0031e 	bne	r2,r3,402468c <__sflush_r+0x208>
 4024680:	9c000015 	stw	r16,0(r19)
 4024684:	0005883a 	mov	r2,zero
 4024688:	003fb306 	br	4024558 <__flash_rwdata_start+0xffff407c>
 402468c:	88c0030b 	ldhu	r3,12(r17)
 4024690:	3005883a 	mov	r2,r6
 4024694:	18c01014 	ori	r3,r3,64
 4024698:	88c0030d 	sth	r3,12(r17)
 402469c:	003fae06 	br	4024558 <__flash_rwdata_start+0xffff407c>

040246a0 <_fflush_r>:
 40246a0:	defffd04 	addi	sp,sp,-12
 40246a4:	dc000115 	stw	r16,4(sp)
 40246a8:	dfc00215 	stw	ra,8(sp)
 40246ac:	2021883a 	mov	r16,r4
 40246b0:	20000226 	beq	r4,zero,40246bc <_fflush_r+0x1c>
 40246b4:	20800e17 	ldw	r2,56(r4)
 40246b8:	10000c26 	beq	r2,zero,40246ec <_fflush_r+0x4c>
 40246bc:	2880030f 	ldh	r2,12(r5)
 40246c0:	1000051e 	bne	r2,zero,40246d8 <_fflush_r+0x38>
 40246c4:	0005883a 	mov	r2,zero
 40246c8:	dfc00217 	ldw	ra,8(sp)
 40246cc:	dc000117 	ldw	r16,4(sp)
 40246d0:	dec00304 	addi	sp,sp,12
 40246d4:	f800283a 	ret
 40246d8:	8009883a 	mov	r4,r16
 40246dc:	dfc00217 	ldw	ra,8(sp)
 40246e0:	dc000117 	ldw	r16,4(sp)
 40246e4:	dec00304 	addi	sp,sp,12
 40246e8:	40244841 	jmpi	4024484 <__sflush_r>
 40246ec:	d9400015 	stw	r5,0(sp)
 40246f0:	4024a7c0 	call	4024a7c <__sinit>
 40246f4:	d9400017 	ldw	r5,0(sp)
 40246f8:	003ff006 	br	40246bc <__flash_rwdata_start+0xffff41e0>

040246fc <fflush>:
 40246fc:	20000526 	beq	r4,zero,4024714 <fflush+0x18>
 4024700:	00800034 	movhi	r2,0
 4024704:	1087cf04 	addi	r2,r2,7996
 4024708:	200b883a 	mov	r5,r4
 402470c:	11000017 	ldw	r4,0(r2)
 4024710:	40246a01 	jmpi	40246a0 <_fflush_r>
 4024714:	00800034 	movhi	r2,0
 4024718:	1087ce04 	addi	r2,r2,7992
 402471c:	11000017 	ldw	r4,0(r2)
 4024720:	014100b4 	movhi	r5,1026
 4024724:	2951a804 	addi	r5,r5,18080
 4024728:	40254801 	jmpi	4025480 <_fwalk_reent>

0402472c <__fp_unlock>:
 402472c:	0005883a 	mov	r2,zero
 4024730:	f800283a 	ret

04024734 <_cleanup_r>:
 4024734:	014100f4 	movhi	r5,1027
 4024738:	29652604 	addi	r5,r5,-27496
 402473c:	40254801 	jmpi	4025480 <_fwalk_reent>

04024740 <__sinit.part.1>:
 4024740:	defff704 	addi	sp,sp,-36
 4024744:	00c100b4 	movhi	r3,1026
 4024748:	dfc00815 	stw	ra,32(sp)
 402474c:	ddc00715 	stw	r23,28(sp)
 4024750:	dd800615 	stw	r22,24(sp)
 4024754:	dd400515 	stw	r21,20(sp)
 4024758:	dd000415 	stw	r20,16(sp)
 402475c:	dcc00315 	stw	r19,12(sp)
 4024760:	dc800215 	stw	r18,8(sp)
 4024764:	dc400115 	stw	r17,4(sp)
 4024768:	dc000015 	stw	r16,0(sp)
 402476c:	18d1cd04 	addi	r3,r3,18228
 4024770:	24000117 	ldw	r16,4(r4)
 4024774:	20c00f15 	stw	r3,60(r4)
 4024778:	2080bb04 	addi	r2,r4,748
 402477c:	00c000c4 	movi	r3,3
 4024780:	20c0b915 	stw	r3,740(r4)
 4024784:	2080ba15 	stw	r2,744(r4)
 4024788:	2000b815 	stw	zero,736(r4)
 402478c:	05c00204 	movi	r23,8
 4024790:	00800104 	movi	r2,4
 4024794:	2025883a 	mov	r18,r4
 4024798:	b80d883a 	mov	r6,r23
 402479c:	81001704 	addi	r4,r16,92
 40247a0:	000b883a 	mov	r5,zero
 40247a4:	80000015 	stw	zero,0(r16)
 40247a8:	80000115 	stw	zero,4(r16)
 40247ac:	80000215 	stw	zero,8(r16)
 40247b0:	8080030d 	sth	r2,12(r16)
 40247b4:	80001915 	stw	zero,100(r16)
 40247b8:	8000038d 	sth	zero,14(r16)
 40247bc:	80000415 	stw	zero,16(r16)
 40247c0:	80000515 	stw	zero,20(r16)
 40247c4:	80000615 	stw	zero,24(r16)
 40247c8:	40263700 	call	4026370 <memset>
 40247cc:	058100b4 	movhi	r22,1026
 40247d0:	94400217 	ldw	r17,8(r18)
 40247d4:	054100b4 	movhi	r21,1026
 40247d8:	050100b4 	movhi	r20,1026
 40247dc:	04c100b4 	movhi	r19,1026
 40247e0:	b59eb004 	addi	r22,r22,31424
 40247e4:	ad5ec704 	addi	r21,r21,31516
 40247e8:	a51ee604 	addi	r20,r20,31640
 40247ec:	9cdefd04 	addi	r19,r19,31732
 40247f0:	85800815 	stw	r22,32(r16)
 40247f4:	85400915 	stw	r21,36(r16)
 40247f8:	85000a15 	stw	r20,40(r16)
 40247fc:	84c00b15 	stw	r19,44(r16)
 4024800:	84000715 	stw	r16,28(r16)
 4024804:	00800284 	movi	r2,10
 4024808:	8880030d 	sth	r2,12(r17)
 402480c:	00800044 	movi	r2,1
 4024810:	b80d883a 	mov	r6,r23
 4024814:	89001704 	addi	r4,r17,92
 4024818:	000b883a 	mov	r5,zero
 402481c:	88000015 	stw	zero,0(r17)
 4024820:	88000115 	stw	zero,4(r17)
 4024824:	88000215 	stw	zero,8(r17)
 4024828:	88001915 	stw	zero,100(r17)
 402482c:	8880038d 	sth	r2,14(r17)
 4024830:	88000415 	stw	zero,16(r17)
 4024834:	88000515 	stw	zero,20(r17)
 4024838:	88000615 	stw	zero,24(r17)
 402483c:	40263700 	call	4026370 <memset>
 4024840:	94000317 	ldw	r16,12(r18)
 4024844:	00800484 	movi	r2,18
 4024848:	8c400715 	stw	r17,28(r17)
 402484c:	8d800815 	stw	r22,32(r17)
 4024850:	8d400915 	stw	r21,36(r17)
 4024854:	8d000a15 	stw	r20,40(r17)
 4024858:	8cc00b15 	stw	r19,44(r17)
 402485c:	8080030d 	sth	r2,12(r16)
 4024860:	00800084 	movi	r2,2
 4024864:	80000015 	stw	zero,0(r16)
 4024868:	80000115 	stw	zero,4(r16)
 402486c:	80000215 	stw	zero,8(r16)
 4024870:	80001915 	stw	zero,100(r16)
 4024874:	8080038d 	sth	r2,14(r16)
 4024878:	80000415 	stw	zero,16(r16)
 402487c:	80000515 	stw	zero,20(r16)
 4024880:	80000615 	stw	zero,24(r16)
 4024884:	b80d883a 	mov	r6,r23
 4024888:	000b883a 	mov	r5,zero
 402488c:	81001704 	addi	r4,r16,92
 4024890:	40263700 	call	4026370 <memset>
 4024894:	00800044 	movi	r2,1
 4024898:	84000715 	stw	r16,28(r16)
 402489c:	85800815 	stw	r22,32(r16)
 40248a0:	85400915 	stw	r21,36(r16)
 40248a4:	85000a15 	stw	r20,40(r16)
 40248a8:	84c00b15 	stw	r19,44(r16)
 40248ac:	90800e15 	stw	r2,56(r18)
 40248b0:	dfc00817 	ldw	ra,32(sp)
 40248b4:	ddc00717 	ldw	r23,28(sp)
 40248b8:	dd800617 	ldw	r22,24(sp)
 40248bc:	dd400517 	ldw	r21,20(sp)
 40248c0:	dd000417 	ldw	r20,16(sp)
 40248c4:	dcc00317 	ldw	r19,12(sp)
 40248c8:	dc800217 	ldw	r18,8(sp)
 40248cc:	dc400117 	ldw	r17,4(sp)
 40248d0:	dc000017 	ldw	r16,0(sp)
 40248d4:	dec00904 	addi	sp,sp,36
 40248d8:	f800283a 	ret

040248dc <__fp_lock>:
 40248dc:	0005883a 	mov	r2,zero
 40248e0:	f800283a 	ret

040248e4 <__sfmoreglue>:
 40248e4:	defffc04 	addi	sp,sp,-16
 40248e8:	dc400115 	stw	r17,4(sp)
 40248ec:	2c7fffc4 	addi	r17,r5,-1
 40248f0:	8c401a24 	muli	r17,r17,104
 40248f4:	dc800215 	stw	r18,8(sp)
 40248f8:	2825883a 	mov	r18,r5
 40248fc:	89401d04 	addi	r5,r17,116
 4024900:	dc000015 	stw	r16,0(sp)
 4024904:	dfc00315 	stw	ra,12(sp)
 4024908:	40257dc0 	call	40257dc <_malloc_r>
 402490c:	1021883a 	mov	r16,r2
 4024910:	10000726 	beq	r2,zero,4024930 <__sfmoreglue+0x4c>
 4024914:	11000304 	addi	r4,r2,12
 4024918:	10000015 	stw	zero,0(r2)
 402491c:	14800115 	stw	r18,4(r2)
 4024920:	11000215 	stw	r4,8(r2)
 4024924:	89801a04 	addi	r6,r17,104
 4024928:	000b883a 	mov	r5,zero
 402492c:	40263700 	call	4026370 <memset>
 4024930:	8005883a 	mov	r2,r16
 4024934:	dfc00317 	ldw	ra,12(sp)
 4024938:	dc800217 	ldw	r18,8(sp)
 402493c:	dc400117 	ldw	r17,4(sp)
 4024940:	dc000017 	ldw	r16,0(sp)
 4024944:	dec00404 	addi	sp,sp,16
 4024948:	f800283a 	ret

0402494c <__sfp>:
 402494c:	defffb04 	addi	sp,sp,-20
 4024950:	dc000015 	stw	r16,0(sp)
 4024954:	04000034 	movhi	r16,0
 4024958:	8407ce04 	addi	r16,r16,7992
 402495c:	dcc00315 	stw	r19,12(sp)
 4024960:	2027883a 	mov	r19,r4
 4024964:	81000017 	ldw	r4,0(r16)
 4024968:	dfc00415 	stw	ra,16(sp)
 402496c:	dc800215 	stw	r18,8(sp)
 4024970:	20800e17 	ldw	r2,56(r4)
 4024974:	dc400115 	stw	r17,4(sp)
 4024978:	1000021e 	bne	r2,zero,4024984 <__sfp+0x38>
 402497c:	40247400 	call	4024740 <__sinit.part.1>
 4024980:	81000017 	ldw	r4,0(r16)
 4024984:	2480b804 	addi	r18,r4,736
 4024988:	047fffc4 	movi	r17,-1
 402498c:	91000117 	ldw	r4,4(r18)
 4024990:	94000217 	ldw	r16,8(r18)
 4024994:	213fffc4 	addi	r4,r4,-1
 4024998:	20000a16 	blt	r4,zero,40249c4 <__sfp+0x78>
 402499c:	8080030f 	ldh	r2,12(r16)
 40249a0:	10000c26 	beq	r2,zero,40249d4 <__sfp+0x88>
 40249a4:	80c01d04 	addi	r3,r16,116
 40249a8:	00000206 	br	40249b4 <__sfp+0x68>
 40249ac:	18bfe60f 	ldh	r2,-104(r3)
 40249b0:	10000826 	beq	r2,zero,40249d4 <__sfp+0x88>
 40249b4:	213fffc4 	addi	r4,r4,-1
 40249b8:	1c3ffd04 	addi	r16,r3,-12
 40249bc:	18c01a04 	addi	r3,r3,104
 40249c0:	247ffa1e 	bne	r4,r17,40249ac <__flash_rwdata_start+0xffff44d0>
 40249c4:	90800017 	ldw	r2,0(r18)
 40249c8:	10001d26 	beq	r2,zero,4024a40 <__sfp+0xf4>
 40249cc:	1025883a 	mov	r18,r2
 40249d0:	003fee06 	br	402498c <__flash_rwdata_start+0xffff44b0>
 40249d4:	00bfffc4 	movi	r2,-1
 40249d8:	8080038d 	sth	r2,14(r16)
 40249dc:	00800044 	movi	r2,1
 40249e0:	8080030d 	sth	r2,12(r16)
 40249e4:	80001915 	stw	zero,100(r16)
 40249e8:	80000015 	stw	zero,0(r16)
 40249ec:	80000215 	stw	zero,8(r16)
 40249f0:	80000115 	stw	zero,4(r16)
 40249f4:	80000415 	stw	zero,16(r16)
 40249f8:	80000515 	stw	zero,20(r16)
 40249fc:	80000615 	stw	zero,24(r16)
 4024a00:	01800204 	movi	r6,8
 4024a04:	000b883a 	mov	r5,zero
 4024a08:	81001704 	addi	r4,r16,92
 4024a0c:	40263700 	call	4026370 <memset>
 4024a10:	8005883a 	mov	r2,r16
 4024a14:	80000c15 	stw	zero,48(r16)
 4024a18:	80000d15 	stw	zero,52(r16)
 4024a1c:	80001115 	stw	zero,68(r16)
 4024a20:	80001215 	stw	zero,72(r16)
 4024a24:	dfc00417 	ldw	ra,16(sp)
 4024a28:	dcc00317 	ldw	r19,12(sp)
 4024a2c:	dc800217 	ldw	r18,8(sp)
 4024a30:	dc400117 	ldw	r17,4(sp)
 4024a34:	dc000017 	ldw	r16,0(sp)
 4024a38:	dec00504 	addi	sp,sp,20
 4024a3c:	f800283a 	ret
 4024a40:	01400104 	movi	r5,4
 4024a44:	9809883a 	mov	r4,r19
 4024a48:	40248e40 	call	40248e4 <__sfmoreglue>
 4024a4c:	90800015 	stw	r2,0(r18)
 4024a50:	103fde1e 	bne	r2,zero,40249cc <__flash_rwdata_start+0xffff44f0>
 4024a54:	00800304 	movi	r2,12
 4024a58:	98800015 	stw	r2,0(r19)
 4024a5c:	0005883a 	mov	r2,zero
 4024a60:	003ff006 	br	4024a24 <__flash_rwdata_start+0xffff4548>

04024a64 <_cleanup>:
 4024a64:	00800034 	movhi	r2,0
 4024a68:	1087ce04 	addi	r2,r2,7992
 4024a6c:	11000017 	ldw	r4,0(r2)
 4024a70:	014100f4 	movhi	r5,1027
 4024a74:	29652604 	addi	r5,r5,-27496
 4024a78:	40254801 	jmpi	4025480 <_fwalk_reent>

04024a7c <__sinit>:
 4024a7c:	20800e17 	ldw	r2,56(r4)
 4024a80:	10000126 	beq	r2,zero,4024a88 <__sinit+0xc>
 4024a84:	f800283a 	ret
 4024a88:	40247401 	jmpi	4024740 <__sinit.part.1>

04024a8c <__sfp_lock_acquire>:
 4024a8c:	f800283a 	ret

04024a90 <__sfp_lock_release>:
 4024a90:	f800283a 	ret

04024a94 <__sinit_lock_acquire>:
 4024a94:	f800283a 	ret

04024a98 <__sinit_lock_release>:
 4024a98:	f800283a 	ret

04024a9c <__fp_lock_all>:
 4024a9c:	00800034 	movhi	r2,0
 4024aa0:	1087cf04 	addi	r2,r2,7996
 4024aa4:	11000017 	ldw	r4,0(r2)
 4024aa8:	014100b4 	movhi	r5,1026
 4024aac:	29523704 	addi	r5,r5,18652
 4024ab0:	40253bc1 	jmpi	40253bc <_fwalk>

04024ab4 <__fp_unlock_all>:
 4024ab4:	00800034 	movhi	r2,0
 4024ab8:	1087cf04 	addi	r2,r2,7996
 4024abc:	11000017 	ldw	r4,0(r2)
 4024ac0:	014100b4 	movhi	r5,1026
 4024ac4:	2951cb04 	addi	r5,r5,18220
 4024ac8:	40253bc1 	jmpi	40253bc <_fwalk>

04024acc <_malloc_trim_r>:
 4024acc:	defffb04 	addi	sp,sp,-20
 4024ad0:	dcc00315 	stw	r19,12(sp)
 4024ad4:	04c00034 	movhi	r19,0
 4024ad8:	dc800215 	stw	r18,8(sp)
 4024adc:	dc400115 	stw	r17,4(sp)
 4024ae0:	dc000015 	stw	r16,0(sp)
 4024ae4:	dfc00415 	stw	ra,16(sp)
 4024ae8:	2821883a 	mov	r16,r5
 4024aec:	9cc22604 	addi	r19,r19,2200
 4024af0:	2025883a 	mov	r18,r4
 4024af4:	402d7840 	call	402d784 <__malloc_lock>
 4024af8:	98800217 	ldw	r2,8(r19)
 4024afc:	14400117 	ldw	r17,4(r2)
 4024b00:	00bfff04 	movi	r2,-4
 4024b04:	88a2703a 	and	r17,r17,r2
 4024b08:	8c21c83a 	sub	r16,r17,r16
 4024b0c:	8403fbc4 	addi	r16,r16,4079
 4024b10:	8020d33a 	srli	r16,r16,12
 4024b14:	0083ffc4 	movi	r2,4095
 4024b18:	843fffc4 	addi	r16,r16,-1
 4024b1c:	8020933a 	slli	r16,r16,12
 4024b20:	1400060e 	bge	r2,r16,4024b3c <_malloc_trim_r+0x70>
 4024b24:	000b883a 	mov	r5,zero
 4024b28:	9009883a 	mov	r4,r18
 4024b2c:	4027a6c0 	call	4027a6c <_sbrk_r>
 4024b30:	98c00217 	ldw	r3,8(r19)
 4024b34:	1c47883a 	add	r3,r3,r17
 4024b38:	10c00a26 	beq	r2,r3,4024b64 <_malloc_trim_r+0x98>
 4024b3c:	9009883a 	mov	r4,r18
 4024b40:	402d7a80 	call	402d7a8 <__malloc_unlock>
 4024b44:	0005883a 	mov	r2,zero
 4024b48:	dfc00417 	ldw	ra,16(sp)
 4024b4c:	dcc00317 	ldw	r19,12(sp)
 4024b50:	dc800217 	ldw	r18,8(sp)
 4024b54:	dc400117 	ldw	r17,4(sp)
 4024b58:	dc000017 	ldw	r16,0(sp)
 4024b5c:	dec00504 	addi	sp,sp,20
 4024b60:	f800283a 	ret
 4024b64:	040bc83a 	sub	r5,zero,r16
 4024b68:	9009883a 	mov	r4,r18
 4024b6c:	4027a6c0 	call	4027a6c <_sbrk_r>
 4024b70:	00ffffc4 	movi	r3,-1
 4024b74:	10c00d26 	beq	r2,r3,4024bac <_malloc_trim_r+0xe0>
 4024b78:	00c00034 	movhi	r3,0
 4024b7c:	18c7f104 	addi	r3,r3,8132
 4024b80:	18800017 	ldw	r2,0(r3)
 4024b84:	99000217 	ldw	r4,8(r19)
 4024b88:	8c23c83a 	sub	r17,r17,r16
 4024b8c:	8c400054 	ori	r17,r17,1
 4024b90:	1421c83a 	sub	r16,r2,r16
 4024b94:	24400115 	stw	r17,4(r4)
 4024b98:	9009883a 	mov	r4,r18
 4024b9c:	1c000015 	stw	r16,0(r3)
 4024ba0:	402d7a80 	call	402d7a8 <__malloc_unlock>
 4024ba4:	00800044 	movi	r2,1
 4024ba8:	003fe706 	br	4024b48 <__flash_rwdata_start+0xffff466c>
 4024bac:	000b883a 	mov	r5,zero
 4024bb0:	9009883a 	mov	r4,r18
 4024bb4:	4027a6c0 	call	4027a6c <_sbrk_r>
 4024bb8:	99000217 	ldw	r4,8(r19)
 4024bbc:	014003c4 	movi	r5,15
 4024bc0:	1107c83a 	sub	r3,r2,r4
 4024bc4:	28ffdd0e 	bge	r5,r3,4024b3c <__flash_rwdata_start+0xffff4660>
 4024bc8:	01400034 	movhi	r5,0
 4024bcc:	2947d104 	addi	r5,r5,8004
 4024bd0:	29400017 	ldw	r5,0(r5)
 4024bd4:	18c00054 	ori	r3,r3,1
 4024bd8:	20c00115 	stw	r3,4(r4)
 4024bdc:	00c00034 	movhi	r3,0
 4024be0:	1145c83a 	sub	r2,r2,r5
 4024be4:	18c7f104 	addi	r3,r3,8132
 4024be8:	18800015 	stw	r2,0(r3)
 4024bec:	003fd306 	br	4024b3c <__flash_rwdata_start+0xffff4660>

04024bf0 <_free_r>:
 4024bf0:	28004126 	beq	r5,zero,4024cf8 <_free_r+0x108>
 4024bf4:	defffd04 	addi	sp,sp,-12
 4024bf8:	dc400115 	stw	r17,4(sp)
 4024bfc:	dc000015 	stw	r16,0(sp)
 4024c00:	2023883a 	mov	r17,r4
 4024c04:	2821883a 	mov	r16,r5
 4024c08:	dfc00215 	stw	ra,8(sp)
 4024c0c:	402d7840 	call	402d784 <__malloc_lock>
 4024c10:	81ffff17 	ldw	r7,-4(r16)
 4024c14:	00bfff84 	movi	r2,-2
 4024c18:	01000034 	movhi	r4,0
 4024c1c:	81bffe04 	addi	r6,r16,-8
 4024c20:	3884703a 	and	r2,r7,r2
 4024c24:	21022604 	addi	r4,r4,2200
 4024c28:	308b883a 	add	r5,r6,r2
 4024c2c:	2a400117 	ldw	r9,4(r5)
 4024c30:	22000217 	ldw	r8,8(r4)
 4024c34:	00ffff04 	movi	r3,-4
 4024c38:	48c6703a 	and	r3,r9,r3
 4024c3c:	2a005726 	beq	r5,r8,4024d9c <_free_r+0x1ac>
 4024c40:	28c00115 	stw	r3,4(r5)
 4024c44:	39c0004c 	andi	r7,r7,1
 4024c48:	3800091e 	bne	r7,zero,4024c70 <_free_r+0x80>
 4024c4c:	823ffe17 	ldw	r8,-8(r16)
 4024c50:	22400204 	addi	r9,r4,8
 4024c54:	320dc83a 	sub	r6,r6,r8
 4024c58:	31c00217 	ldw	r7,8(r6)
 4024c5c:	1205883a 	add	r2,r2,r8
 4024c60:	3a406526 	beq	r7,r9,4024df8 <_free_r+0x208>
 4024c64:	32000317 	ldw	r8,12(r6)
 4024c68:	3a000315 	stw	r8,12(r7)
 4024c6c:	41c00215 	stw	r7,8(r8)
 4024c70:	28cf883a 	add	r7,r5,r3
 4024c74:	39c00117 	ldw	r7,4(r7)
 4024c78:	39c0004c 	andi	r7,r7,1
 4024c7c:	38003a26 	beq	r7,zero,4024d68 <_free_r+0x178>
 4024c80:	10c00054 	ori	r3,r2,1
 4024c84:	30c00115 	stw	r3,4(r6)
 4024c88:	3087883a 	add	r3,r6,r2
 4024c8c:	18800015 	stw	r2,0(r3)
 4024c90:	00c07fc4 	movi	r3,511
 4024c94:	18801936 	bltu	r3,r2,4024cfc <_free_r+0x10c>
 4024c98:	1004d0fa 	srli	r2,r2,3
 4024c9c:	01c00044 	movi	r7,1
 4024ca0:	21400117 	ldw	r5,4(r4)
 4024ca4:	10c00044 	addi	r3,r2,1
 4024ca8:	18c7883a 	add	r3,r3,r3
 4024cac:	1005d0ba 	srai	r2,r2,2
 4024cb0:	18c7883a 	add	r3,r3,r3
 4024cb4:	18c7883a 	add	r3,r3,r3
 4024cb8:	1907883a 	add	r3,r3,r4
 4024cbc:	3884983a 	sll	r2,r7,r2
 4024cc0:	19c00017 	ldw	r7,0(r3)
 4024cc4:	1a3ffe04 	addi	r8,r3,-8
 4024cc8:	1144b03a 	or	r2,r2,r5
 4024ccc:	32000315 	stw	r8,12(r6)
 4024cd0:	31c00215 	stw	r7,8(r6)
 4024cd4:	20800115 	stw	r2,4(r4)
 4024cd8:	19800015 	stw	r6,0(r3)
 4024cdc:	39800315 	stw	r6,12(r7)
 4024ce0:	8809883a 	mov	r4,r17
 4024ce4:	dfc00217 	ldw	ra,8(sp)
 4024ce8:	dc400117 	ldw	r17,4(sp)
 4024cec:	dc000017 	ldw	r16,0(sp)
 4024cf0:	dec00304 	addi	sp,sp,12
 4024cf4:	402d7a81 	jmpi	402d7a8 <__malloc_unlock>
 4024cf8:	f800283a 	ret
 4024cfc:	100ad27a 	srli	r5,r2,9
 4024d00:	00c00104 	movi	r3,4
 4024d04:	19404a36 	bltu	r3,r5,4024e30 <_free_r+0x240>
 4024d08:	100ad1ba 	srli	r5,r2,6
 4024d0c:	28c00e44 	addi	r3,r5,57
 4024d10:	18c7883a 	add	r3,r3,r3
 4024d14:	29400e04 	addi	r5,r5,56
 4024d18:	18c7883a 	add	r3,r3,r3
 4024d1c:	18c7883a 	add	r3,r3,r3
 4024d20:	1909883a 	add	r4,r3,r4
 4024d24:	20c00017 	ldw	r3,0(r4)
 4024d28:	01c00034 	movhi	r7,0
 4024d2c:	213ffe04 	addi	r4,r4,-8
 4024d30:	39c22604 	addi	r7,r7,2200
 4024d34:	20c04426 	beq	r4,r3,4024e48 <_free_r+0x258>
 4024d38:	01ffff04 	movi	r7,-4
 4024d3c:	19400117 	ldw	r5,4(r3)
 4024d40:	29ca703a 	and	r5,r5,r7
 4024d44:	1140022e 	bgeu	r2,r5,4024d50 <_free_r+0x160>
 4024d48:	18c00217 	ldw	r3,8(r3)
 4024d4c:	20fffb1e 	bne	r4,r3,4024d3c <__flash_rwdata_start+0xffff4860>
 4024d50:	19000317 	ldw	r4,12(r3)
 4024d54:	31000315 	stw	r4,12(r6)
 4024d58:	30c00215 	stw	r3,8(r6)
 4024d5c:	21800215 	stw	r6,8(r4)
 4024d60:	19800315 	stw	r6,12(r3)
 4024d64:	003fde06 	br	4024ce0 <__flash_rwdata_start+0xffff4804>
 4024d68:	29c00217 	ldw	r7,8(r5)
 4024d6c:	10c5883a 	add	r2,r2,r3
 4024d70:	00c00034 	movhi	r3,0
 4024d74:	18c22804 	addi	r3,r3,2208
 4024d78:	38c03b26 	beq	r7,r3,4024e68 <_free_r+0x278>
 4024d7c:	2a000317 	ldw	r8,12(r5)
 4024d80:	11400054 	ori	r5,r2,1
 4024d84:	3087883a 	add	r3,r6,r2
 4024d88:	3a000315 	stw	r8,12(r7)
 4024d8c:	41c00215 	stw	r7,8(r8)
 4024d90:	31400115 	stw	r5,4(r6)
 4024d94:	18800015 	stw	r2,0(r3)
 4024d98:	003fbd06 	br	4024c90 <__flash_rwdata_start+0xffff47b4>
 4024d9c:	39c0004c 	andi	r7,r7,1
 4024da0:	10c5883a 	add	r2,r2,r3
 4024da4:	3800071e 	bne	r7,zero,4024dc4 <_free_r+0x1d4>
 4024da8:	81fffe17 	ldw	r7,-8(r16)
 4024dac:	31cdc83a 	sub	r6,r6,r7
 4024db0:	30c00317 	ldw	r3,12(r6)
 4024db4:	31400217 	ldw	r5,8(r6)
 4024db8:	11c5883a 	add	r2,r2,r7
 4024dbc:	28c00315 	stw	r3,12(r5)
 4024dc0:	19400215 	stw	r5,8(r3)
 4024dc4:	10c00054 	ori	r3,r2,1
 4024dc8:	30c00115 	stw	r3,4(r6)
 4024dcc:	00c00034 	movhi	r3,0
 4024dd0:	18c7d204 	addi	r3,r3,8008
 4024dd4:	18c00017 	ldw	r3,0(r3)
 4024dd8:	21800215 	stw	r6,8(r4)
 4024ddc:	10ffc036 	bltu	r2,r3,4024ce0 <__flash_rwdata_start+0xffff4804>
 4024de0:	00800034 	movhi	r2,0
 4024de4:	1087e804 	addi	r2,r2,8096
 4024de8:	11400017 	ldw	r5,0(r2)
 4024dec:	8809883a 	mov	r4,r17
 4024df0:	4024acc0 	call	4024acc <_malloc_trim_r>
 4024df4:	003fba06 	br	4024ce0 <__flash_rwdata_start+0xffff4804>
 4024df8:	28c9883a 	add	r4,r5,r3
 4024dfc:	21000117 	ldw	r4,4(r4)
 4024e00:	2100004c 	andi	r4,r4,1
 4024e04:	2000391e 	bne	r4,zero,4024eec <_free_r+0x2fc>
 4024e08:	29c00217 	ldw	r7,8(r5)
 4024e0c:	29000317 	ldw	r4,12(r5)
 4024e10:	1885883a 	add	r2,r3,r2
 4024e14:	10c00054 	ori	r3,r2,1
 4024e18:	39000315 	stw	r4,12(r7)
 4024e1c:	21c00215 	stw	r7,8(r4)
 4024e20:	30c00115 	stw	r3,4(r6)
 4024e24:	308d883a 	add	r6,r6,r2
 4024e28:	30800015 	stw	r2,0(r6)
 4024e2c:	003fac06 	br	4024ce0 <__flash_rwdata_start+0xffff4804>
 4024e30:	00c00504 	movi	r3,20
 4024e34:	19401536 	bltu	r3,r5,4024e8c <_free_r+0x29c>
 4024e38:	28c01704 	addi	r3,r5,92
 4024e3c:	18c7883a 	add	r3,r3,r3
 4024e40:	294016c4 	addi	r5,r5,91
 4024e44:	003fb406 	br	4024d18 <__flash_rwdata_start+0xffff483c>
 4024e48:	280bd0ba 	srai	r5,r5,2
 4024e4c:	00c00044 	movi	r3,1
 4024e50:	38800117 	ldw	r2,4(r7)
 4024e54:	194a983a 	sll	r5,r3,r5
 4024e58:	2007883a 	mov	r3,r4
 4024e5c:	2884b03a 	or	r2,r5,r2
 4024e60:	38800115 	stw	r2,4(r7)
 4024e64:	003fbb06 	br	4024d54 <__flash_rwdata_start+0xffff4878>
 4024e68:	21800515 	stw	r6,20(r4)
 4024e6c:	21800415 	stw	r6,16(r4)
 4024e70:	10c00054 	ori	r3,r2,1
 4024e74:	31c00315 	stw	r7,12(r6)
 4024e78:	31c00215 	stw	r7,8(r6)
 4024e7c:	30c00115 	stw	r3,4(r6)
 4024e80:	308d883a 	add	r6,r6,r2
 4024e84:	30800015 	stw	r2,0(r6)
 4024e88:	003f9506 	br	4024ce0 <__flash_rwdata_start+0xffff4804>
 4024e8c:	00c01504 	movi	r3,84
 4024e90:	19400536 	bltu	r3,r5,4024ea8 <_free_r+0x2b8>
 4024e94:	100ad33a 	srli	r5,r2,12
 4024e98:	28c01bc4 	addi	r3,r5,111
 4024e9c:	18c7883a 	add	r3,r3,r3
 4024ea0:	29401b84 	addi	r5,r5,110
 4024ea4:	003f9c06 	br	4024d18 <__flash_rwdata_start+0xffff483c>
 4024ea8:	00c05504 	movi	r3,340
 4024eac:	19400536 	bltu	r3,r5,4024ec4 <_free_r+0x2d4>
 4024eb0:	100ad3fa 	srli	r5,r2,15
 4024eb4:	28c01e04 	addi	r3,r5,120
 4024eb8:	18c7883a 	add	r3,r3,r3
 4024ebc:	29401dc4 	addi	r5,r5,119
 4024ec0:	003f9506 	br	4024d18 <__flash_rwdata_start+0xffff483c>
 4024ec4:	00c15504 	movi	r3,1364
 4024ec8:	19400536 	bltu	r3,r5,4024ee0 <_free_r+0x2f0>
 4024ecc:	100ad4ba 	srli	r5,r2,18
 4024ed0:	28c01f44 	addi	r3,r5,125
 4024ed4:	18c7883a 	add	r3,r3,r3
 4024ed8:	29401f04 	addi	r5,r5,124
 4024edc:	003f8e06 	br	4024d18 <__flash_rwdata_start+0xffff483c>
 4024ee0:	00c03f84 	movi	r3,254
 4024ee4:	01401f84 	movi	r5,126
 4024ee8:	003f8b06 	br	4024d18 <__flash_rwdata_start+0xffff483c>
 4024eec:	10c00054 	ori	r3,r2,1
 4024ef0:	30c00115 	stw	r3,4(r6)
 4024ef4:	308d883a 	add	r6,r6,r2
 4024ef8:	30800015 	stw	r2,0(r6)
 4024efc:	003f7806 	br	4024ce0 <__flash_rwdata_start+0xffff4804>

04024f00 <__sfvwrite_r>:
 4024f00:	30800217 	ldw	r2,8(r6)
 4024f04:	10006726 	beq	r2,zero,40250a4 <__sfvwrite_r+0x1a4>
 4024f08:	28c0030b 	ldhu	r3,12(r5)
 4024f0c:	defff404 	addi	sp,sp,-48
 4024f10:	dd400715 	stw	r21,28(sp)
 4024f14:	dd000615 	stw	r20,24(sp)
 4024f18:	dc000215 	stw	r16,8(sp)
 4024f1c:	dfc00b15 	stw	ra,44(sp)
 4024f20:	df000a15 	stw	fp,40(sp)
 4024f24:	ddc00915 	stw	r23,36(sp)
 4024f28:	dd800815 	stw	r22,32(sp)
 4024f2c:	dcc00515 	stw	r19,20(sp)
 4024f30:	dc800415 	stw	r18,16(sp)
 4024f34:	dc400315 	stw	r17,12(sp)
 4024f38:	1880020c 	andi	r2,r3,8
 4024f3c:	2821883a 	mov	r16,r5
 4024f40:	202b883a 	mov	r21,r4
 4024f44:	3029883a 	mov	r20,r6
 4024f48:	10002726 	beq	r2,zero,4024fe8 <__sfvwrite_r+0xe8>
 4024f4c:	28800417 	ldw	r2,16(r5)
 4024f50:	10002526 	beq	r2,zero,4024fe8 <__sfvwrite_r+0xe8>
 4024f54:	1880008c 	andi	r2,r3,2
 4024f58:	a4400017 	ldw	r17,0(r20)
 4024f5c:	10002a26 	beq	r2,zero,4025008 <__sfvwrite_r+0x108>
 4024f60:	05a00034 	movhi	r22,32768
 4024f64:	0027883a 	mov	r19,zero
 4024f68:	0025883a 	mov	r18,zero
 4024f6c:	b5bf0004 	addi	r22,r22,-1024
 4024f70:	980d883a 	mov	r6,r19
 4024f74:	a809883a 	mov	r4,r21
 4024f78:	90004626 	beq	r18,zero,4025094 <__sfvwrite_r+0x194>
 4024f7c:	900f883a 	mov	r7,r18
 4024f80:	b480022e 	bgeu	r22,r18,4024f8c <__sfvwrite_r+0x8c>
 4024f84:	01e00034 	movhi	r7,32768
 4024f88:	39ff0004 	addi	r7,r7,-1024
 4024f8c:	80800917 	ldw	r2,36(r16)
 4024f90:	81400717 	ldw	r5,28(r16)
 4024f94:	103ee83a 	callr	r2
 4024f98:	0080570e 	bge	zero,r2,40250f8 <__sfvwrite_r+0x1f8>
 4024f9c:	a0c00217 	ldw	r3,8(r20)
 4024fa0:	98a7883a 	add	r19,r19,r2
 4024fa4:	90a5c83a 	sub	r18,r18,r2
 4024fa8:	1885c83a 	sub	r2,r3,r2
 4024fac:	a0800215 	stw	r2,8(r20)
 4024fb0:	103fef1e 	bne	r2,zero,4024f70 <__flash_rwdata_start+0xffff4a94>
 4024fb4:	0005883a 	mov	r2,zero
 4024fb8:	dfc00b17 	ldw	ra,44(sp)
 4024fbc:	df000a17 	ldw	fp,40(sp)
 4024fc0:	ddc00917 	ldw	r23,36(sp)
 4024fc4:	dd800817 	ldw	r22,32(sp)
 4024fc8:	dd400717 	ldw	r21,28(sp)
 4024fcc:	dd000617 	ldw	r20,24(sp)
 4024fd0:	dcc00517 	ldw	r19,20(sp)
 4024fd4:	dc800417 	ldw	r18,16(sp)
 4024fd8:	dc400317 	ldw	r17,12(sp)
 4024fdc:	dc000217 	ldw	r16,8(sp)
 4024fe0:	dec00c04 	addi	sp,sp,48
 4024fe4:	f800283a 	ret
 4024fe8:	800b883a 	mov	r5,r16
 4024fec:	a809883a 	mov	r4,r21
 4024ff0:	4022aa80 	call	4022aa8 <__swsetup_r>
 4024ff4:	1000eb1e 	bne	r2,zero,40253a4 <__sfvwrite_r+0x4a4>
 4024ff8:	80c0030b 	ldhu	r3,12(r16)
 4024ffc:	a4400017 	ldw	r17,0(r20)
 4025000:	1880008c 	andi	r2,r3,2
 4025004:	103fd61e 	bne	r2,zero,4024f60 <__flash_rwdata_start+0xffff4a84>
 4025008:	1880004c 	andi	r2,r3,1
 402500c:	10003f1e 	bne	r2,zero,402510c <__sfvwrite_r+0x20c>
 4025010:	0039883a 	mov	fp,zero
 4025014:	0025883a 	mov	r18,zero
 4025018:	90001a26 	beq	r18,zero,4025084 <__sfvwrite_r+0x184>
 402501c:	1880800c 	andi	r2,r3,512
 4025020:	84c00217 	ldw	r19,8(r16)
 4025024:	10002126 	beq	r2,zero,40250ac <__sfvwrite_r+0x1ac>
 4025028:	982f883a 	mov	r23,r19
 402502c:	94c09336 	bltu	r18,r19,402527c <__sfvwrite_r+0x37c>
 4025030:	1881200c 	andi	r2,r3,1152
 4025034:	10009e1e 	bne	r2,zero,40252b0 <__sfvwrite_r+0x3b0>
 4025038:	81000017 	ldw	r4,0(r16)
 402503c:	b80d883a 	mov	r6,r23
 4025040:	e00b883a 	mov	r5,fp
 4025044:	40262140 	call	4026214 <memmove>
 4025048:	80c00217 	ldw	r3,8(r16)
 402504c:	81000017 	ldw	r4,0(r16)
 4025050:	9005883a 	mov	r2,r18
 4025054:	1ce7c83a 	sub	r19,r3,r19
 4025058:	25cf883a 	add	r7,r4,r23
 402505c:	84c00215 	stw	r19,8(r16)
 4025060:	81c00015 	stw	r7,0(r16)
 4025064:	a0c00217 	ldw	r3,8(r20)
 4025068:	e0b9883a 	add	fp,fp,r2
 402506c:	90a5c83a 	sub	r18,r18,r2
 4025070:	18a7c83a 	sub	r19,r3,r2
 4025074:	a4c00215 	stw	r19,8(r20)
 4025078:	983fce26 	beq	r19,zero,4024fb4 <__flash_rwdata_start+0xffff4ad8>
 402507c:	80c0030b 	ldhu	r3,12(r16)
 4025080:	903fe61e 	bne	r18,zero,402501c <__flash_rwdata_start+0xffff4b40>
 4025084:	8f000017 	ldw	fp,0(r17)
 4025088:	8c800117 	ldw	r18,4(r17)
 402508c:	8c400204 	addi	r17,r17,8
 4025090:	003fe106 	br	4025018 <__flash_rwdata_start+0xffff4b3c>
 4025094:	8cc00017 	ldw	r19,0(r17)
 4025098:	8c800117 	ldw	r18,4(r17)
 402509c:	8c400204 	addi	r17,r17,8
 40250a0:	003fb306 	br	4024f70 <__flash_rwdata_start+0xffff4a94>
 40250a4:	0005883a 	mov	r2,zero
 40250a8:	f800283a 	ret
 40250ac:	81000017 	ldw	r4,0(r16)
 40250b0:	80800417 	ldw	r2,16(r16)
 40250b4:	11005736 	bltu	r2,r4,4025214 <__sfvwrite_r+0x314>
 40250b8:	85c00517 	ldw	r23,20(r16)
 40250bc:	95c05536 	bltu	r18,r23,4025214 <__sfvwrite_r+0x314>
 40250c0:	00a00034 	movhi	r2,32768
 40250c4:	10bfffc4 	addi	r2,r2,-1
 40250c8:	9009883a 	mov	r4,r18
 40250cc:	1480012e 	bgeu	r2,r18,40250d4 <__sfvwrite_r+0x1d4>
 40250d0:	1009883a 	mov	r4,r2
 40250d4:	b80b883a 	mov	r5,r23
 40250d8:	402a7040 	call	402a704 <__divsi3>
 40250dc:	15cf383a 	mul	r7,r2,r23
 40250e0:	81400717 	ldw	r5,28(r16)
 40250e4:	80800917 	ldw	r2,36(r16)
 40250e8:	e00d883a 	mov	r6,fp
 40250ec:	a809883a 	mov	r4,r21
 40250f0:	103ee83a 	callr	r2
 40250f4:	00bfdb16 	blt	zero,r2,4025064 <__flash_rwdata_start+0xffff4b88>
 40250f8:	8080030b 	ldhu	r2,12(r16)
 40250fc:	10801014 	ori	r2,r2,64
 4025100:	8080030d 	sth	r2,12(r16)
 4025104:	00bfffc4 	movi	r2,-1
 4025108:	003fab06 	br	4024fb8 <__flash_rwdata_start+0xffff4adc>
 402510c:	0027883a 	mov	r19,zero
 4025110:	0011883a 	mov	r8,zero
 4025114:	0039883a 	mov	fp,zero
 4025118:	0025883a 	mov	r18,zero
 402511c:	90001f26 	beq	r18,zero,402519c <__sfvwrite_r+0x29c>
 4025120:	40005a26 	beq	r8,zero,402528c <__sfvwrite_r+0x38c>
 4025124:	982d883a 	mov	r22,r19
 4025128:	94c0012e 	bgeu	r18,r19,4025130 <__sfvwrite_r+0x230>
 402512c:	902d883a 	mov	r22,r18
 4025130:	81000017 	ldw	r4,0(r16)
 4025134:	80800417 	ldw	r2,16(r16)
 4025138:	b02f883a 	mov	r23,r22
 402513c:	81c00517 	ldw	r7,20(r16)
 4025140:	1100032e 	bgeu	r2,r4,4025150 <__sfvwrite_r+0x250>
 4025144:	80c00217 	ldw	r3,8(r16)
 4025148:	38c7883a 	add	r3,r7,r3
 402514c:	1d801816 	blt	r3,r22,40251b0 <__sfvwrite_r+0x2b0>
 4025150:	b1c03e16 	blt	r22,r7,402524c <__sfvwrite_r+0x34c>
 4025154:	80800917 	ldw	r2,36(r16)
 4025158:	81400717 	ldw	r5,28(r16)
 402515c:	e00d883a 	mov	r6,fp
 4025160:	da000115 	stw	r8,4(sp)
 4025164:	a809883a 	mov	r4,r21
 4025168:	103ee83a 	callr	r2
 402516c:	102f883a 	mov	r23,r2
 4025170:	da000117 	ldw	r8,4(sp)
 4025174:	00bfe00e 	bge	zero,r2,40250f8 <__flash_rwdata_start+0xffff4c1c>
 4025178:	9de7c83a 	sub	r19,r19,r23
 402517c:	98001f26 	beq	r19,zero,40251fc <__sfvwrite_r+0x2fc>
 4025180:	a0800217 	ldw	r2,8(r20)
 4025184:	e5f9883a 	add	fp,fp,r23
 4025188:	95e5c83a 	sub	r18,r18,r23
 402518c:	15efc83a 	sub	r23,r2,r23
 4025190:	a5c00215 	stw	r23,8(r20)
 4025194:	b83f8726 	beq	r23,zero,4024fb4 <__flash_rwdata_start+0xffff4ad8>
 4025198:	903fe11e 	bne	r18,zero,4025120 <__flash_rwdata_start+0xffff4c44>
 402519c:	8f000017 	ldw	fp,0(r17)
 40251a0:	8c800117 	ldw	r18,4(r17)
 40251a4:	0011883a 	mov	r8,zero
 40251a8:	8c400204 	addi	r17,r17,8
 40251ac:	003fdb06 	br	402511c <__flash_rwdata_start+0xffff4c40>
 40251b0:	180d883a 	mov	r6,r3
 40251b4:	e00b883a 	mov	r5,fp
 40251b8:	da000115 	stw	r8,4(sp)
 40251bc:	d8c00015 	stw	r3,0(sp)
 40251c0:	40262140 	call	4026214 <memmove>
 40251c4:	d8c00017 	ldw	r3,0(sp)
 40251c8:	80800017 	ldw	r2,0(r16)
 40251cc:	800b883a 	mov	r5,r16
 40251d0:	a809883a 	mov	r4,r21
 40251d4:	10c5883a 	add	r2,r2,r3
 40251d8:	80800015 	stw	r2,0(r16)
 40251dc:	d8c00015 	stw	r3,0(sp)
 40251e0:	40246a00 	call	40246a0 <_fflush_r>
 40251e4:	d8c00017 	ldw	r3,0(sp)
 40251e8:	da000117 	ldw	r8,4(sp)
 40251ec:	103fc21e 	bne	r2,zero,40250f8 <__flash_rwdata_start+0xffff4c1c>
 40251f0:	182f883a 	mov	r23,r3
 40251f4:	9de7c83a 	sub	r19,r19,r23
 40251f8:	983fe11e 	bne	r19,zero,4025180 <__flash_rwdata_start+0xffff4ca4>
 40251fc:	800b883a 	mov	r5,r16
 4025200:	a809883a 	mov	r4,r21
 4025204:	40246a00 	call	40246a0 <_fflush_r>
 4025208:	103fbb1e 	bne	r2,zero,40250f8 <__flash_rwdata_start+0xffff4c1c>
 402520c:	0011883a 	mov	r8,zero
 4025210:	003fdb06 	br	4025180 <__flash_rwdata_start+0xffff4ca4>
 4025214:	94c0012e 	bgeu	r18,r19,402521c <__sfvwrite_r+0x31c>
 4025218:	9027883a 	mov	r19,r18
 402521c:	980d883a 	mov	r6,r19
 4025220:	e00b883a 	mov	r5,fp
 4025224:	40262140 	call	4026214 <memmove>
 4025228:	80800217 	ldw	r2,8(r16)
 402522c:	80c00017 	ldw	r3,0(r16)
 4025230:	14c5c83a 	sub	r2,r2,r19
 4025234:	1cc7883a 	add	r3,r3,r19
 4025238:	80800215 	stw	r2,8(r16)
 402523c:	80c00015 	stw	r3,0(r16)
 4025240:	10004326 	beq	r2,zero,4025350 <__sfvwrite_r+0x450>
 4025244:	9805883a 	mov	r2,r19
 4025248:	003f8606 	br	4025064 <__flash_rwdata_start+0xffff4b88>
 402524c:	b00d883a 	mov	r6,r22
 4025250:	e00b883a 	mov	r5,fp
 4025254:	da000115 	stw	r8,4(sp)
 4025258:	40262140 	call	4026214 <memmove>
 402525c:	80800217 	ldw	r2,8(r16)
 4025260:	80c00017 	ldw	r3,0(r16)
 4025264:	da000117 	ldw	r8,4(sp)
 4025268:	1585c83a 	sub	r2,r2,r22
 402526c:	1dad883a 	add	r22,r3,r22
 4025270:	80800215 	stw	r2,8(r16)
 4025274:	85800015 	stw	r22,0(r16)
 4025278:	003fbf06 	br	4025178 <__flash_rwdata_start+0xffff4c9c>
 402527c:	81000017 	ldw	r4,0(r16)
 4025280:	9027883a 	mov	r19,r18
 4025284:	902f883a 	mov	r23,r18
 4025288:	003f6c06 	br	402503c <__flash_rwdata_start+0xffff4b60>
 402528c:	900d883a 	mov	r6,r18
 4025290:	01400284 	movi	r5,10
 4025294:	e009883a 	mov	r4,fp
 4025298:	4025fe80 	call	4025fe8 <memchr>
 402529c:	10003e26 	beq	r2,zero,4025398 <__sfvwrite_r+0x498>
 40252a0:	10800044 	addi	r2,r2,1
 40252a4:	1727c83a 	sub	r19,r2,fp
 40252a8:	02000044 	movi	r8,1
 40252ac:	003f9d06 	br	4025124 <__flash_rwdata_start+0xffff4c48>
 40252b0:	80800517 	ldw	r2,20(r16)
 40252b4:	81400417 	ldw	r5,16(r16)
 40252b8:	81c00017 	ldw	r7,0(r16)
 40252bc:	10a7883a 	add	r19,r2,r2
 40252c0:	9885883a 	add	r2,r19,r2
 40252c4:	1026d7fa 	srli	r19,r2,31
 40252c8:	396dc83a 	sub	r22,r7,r5
 40252cc:	b1000044 	addi	r4,r22,1
 40252d0:	9885883a 	add	r2,r19,r2
 40252d4:	1027d07a 	srai	r19,r2,1
 40252d8:	2485883a 	add	r2,r4,r18
 40252dc:	980d883a 	mov	r6,r19
 40252e0:	9880022e 	bgeu	r19,r2,40252ec <__sfvwrite_r+0x3ec>
 40252e4:	1027883a 	mov	r19,r2
 40252e8:	100d883a 	mov	r6,r2
 40252ec:	18c1000c 	andi	r3,r3,1024
 40252f0:	18001c26 	beq	r3,zero,4025364 <__sfvwrite_r+0x464>
 40252f4:	300b883a 	mov	r5,r6
 40252f8:	a809883a 	mov	r4,r21
 40252fc:	40257dc0 	call	40257dc <_malloc_r>
 4025300:	102f883a 	mov	r23,r2
 4025304:	10002926 	beq	r2,zero,40253ac <__sfvwrite_r+0x4ac>
 4025308:	81400417 	ldw	r5,16(r16)
 402530c:	b00d883a 	mov	r6,r22
 4025310:	1009883a 	mov	r4,r2
 4025314:	40260cc0 	call	40260cc <memcpy>
 4025318:	8080030b 	ldhu	r2,12(r16)
 402531c:	00fedfc4 	movi	r3,-1153
 4025320:	10c4703a 	and	r2,r2,r3
 4025324:	10802014 	ori	r2,r2,128
 4025328:	8080030d 	sth	r2,12(r16)
 402532c:	bd89883a 	add	r4,r23,r22
 4025330:	9d8fc83a 	sub	r7,r19,r22
 4025334:	85c00415 	stw	r23,16(r16)
 4025338:	84c00515 	stw	r19,20(r16)
 402533c:	81000015 	stw	r4,0(r16)
 4025340:	9027883a 	mov	r19,r18
 4025344:	81c00215 	stw	r7,8(r16)
 4025348:	902f883a 	mov	r23,r18
 402534c:	003f3b06 	br	402503c <__flash_rwdata_start+0xffff4b60>
 4025350:	800b883a 	mov	r5,r16
 4025354:	a809883a 	mov	r4,r21
 4025358:	40246a00 	call	40246a0 <_fflush_r>
 402535c:	103fb926 	beq	r2,zero,4025244 <__flash_rwdata_start+0xffff4d68>
 4025360:	003f6506 	br	40250f8 <__flash_rwdata_start+0xffff4c1c>
 4025364:	a809883a 	mov	r4,r21
 4025368:	40274940 	call	4027494 <_realloc_r>
 402536c:	102f883a 	mov	r23,r2
 4025370:	103fee1e 	bne	r2,zero,402532c <__flash_rwdata_start+0xffff4e50>
 4025374:	81400417 	ldw	r5,16(r16)
 4025378:	a809883a 	mov	r4,r21
 402537c:	4024bf00 	call	4024bf0 <_free_r>
 4025380:	8080030b 	ldhu	r2,12(r16)
 4025384:	00ffdfc4 	movi	r3,-129
 4025388:	1884703a 	and	r2,r3,r2
 402538c:	00c00304 	movi	r3,12
 4025390:	a8c00015 	stw	r3,0(r21)
 4025394:	003f5906 	br	40250fc <__flash_rwdata_start+0xffff4c20>
 4025398:	94c00044 	addi	r19,r18,1
 402539c:	02000044 	movi	r8,1
 40253a0:	003f6006 	br	4025124 <__flash_rwdata_start+0xffff4c48>
 40253a4:	00bfffc4 	movi	r2,-1
 40253a8:	003f0306 	br	4024fb8 <__flash_rwdata_start+0xffff4adc>
 40253ac:	00800304 	movi	r2,12
 40253b0:	a8800015 	stw	r2,0(r21)
 40253b4:	8080030b 	ldhu	r2,12(r16)
 40253b8:	003f5006 	br	40250fc <__flash_rwdata_start+0xffff4c20>

040253bc <_fwalk>:
 40253bc:	defff704 	addi	sp,sp,-36
 40253c0:	dd000415 	stw	r20,16(sp)
 40253c4:	dfc00815 	stw	ra,32(sp)
 40253c8:	ddc00715 	stw	r23,28(sp)
 40253cc:	dd800615 	stw	r22,24(sp)
 40253d0:	dd400515 	stw	r21,20(sp)
 40253d4:	dcc00315 	stw	r19,12(sp)
 40253d8:	dc800215 	stw	r18,8(sp)
 40253dc:	dc400115 	stw	r17,4(sp)
 40253e0:	dc000015 	stw	r16,0(sp)
 40253e4:	2500b804 	addi	r20,r4,736
 40253e8:	a0002326 	beq	r20,zero,4025478 <_fwalk+0xbc>
 40253ec:	282b883a 	mov	r21,r5
 40253f0:	002f883a 	mov	r23,zero
 40253f4:	05800044 	movi	r22,1
 40253f8:	04ffffc4 	movi	r19,-1
 40253fc:	a4400117 	ldw	r17,4(r20)
 4025400:	a4800217 	ldw	r18,8(r20)
 4025404:	8c7fffc4 	addi	r17,r17,-1
 4025408:	88000d16 	blt	r17,zero,4025440 <_fwalk+0x84>
 402540c:	94000304 	addi	r16,r18,12
 4025410:	94800384 	addi	r18,r18,14
 4025414:	8080000b 	ldhu	r2,0(r16)
 4025418:	8c7fffc4 	addi	r17,r17,-1
 402541c:	813ffd04 	addi	r4,r16,-12
 4025420:	b080042e 	bgeu	r22,r2,4025434 <_fwalk+0x78>
 4025424:	9080000f 	ldh	r2,0(r18)
 4025428:	14c00226 	beq	r2,r19,4025434 <_fwalk+0x78>
 402542c:	a83ee83a 	callr	r21
 4025430:	b8aeb03a 	or	r23,r23,r2
 4025434:	84001a04 	addi	r16,r16,104
 4025438:	94801a04 	addi	r18,r18,104
 402543c:	8cfff51e 	bne	r17,r19,4025414 <__flash_rwdata_start+0xffff4f38>
 4025440:	a5000017 	ldw	r20,0(r20)
 4025444:	a03fed1e 	bne	r20,zero,40253fc <__flash_rwdata_start+0xffff4f20>
 4025448:	b805883a 	mov	r2,r23
 402544c:	dfc00817 	ldw	ra,32(sp)
 4025450:	ddc00717 	ldw	r23,28(sp)
 4025454:	dd800617 	ldw	r22,24(sp)
 4025458:	dd400517 	ldw	r21,20(sp)
 402545c:	dd000417 	ldw	r20,16(sp)
 4025460:	dcc00317 	ldw	r19,12(sp)
 4025464:	dc800217 	ldw	r18,8(sp)
 4025468:	dc400117 	ldw	r17,4(sp)
 402546c:	dc000017 	ldw	r16,0(sp)
 4025470:	dec00904 	addi	sp,sp,36
 4025474:	f800283a 	ret
 4025478:	002f883a 	mov	r23,zero
 402547c:	003ff206 	br	4025448 <__flash_rwdata_start+0xffff4f6c>

04025480 <_fwalk_reent>:
 4025480:	defff704 	addi	sp,sp,-36
 4025484:	dd000415 	stw	r20,16(sp)
 4025488:	dfc00815 	stw	ra,32(sp)
 402548c:	ddc00715 	stw	r23,28(sp)
 4025490:	dd800615 	stw	r22,24(sp)
 4025494:	dd400515 	stw	r21,20(sp)
 4025498:	dcc00315 	stw	r19,12(sp)
 402549c:	dc800215 	stw	r18,8(sp)
 40254a0:	dc400115 	stw	r17,4(sp)
 40254a4:	dc000015 	stw	r16,0(sp)
 40254a8:	2500b804 	addi	r20,r4,736
 40254ac:	a0002326 	beq	r20,zero,402553c <_fwalk_reent+0xbc>
 40254b0:	282b883a 	mov	r21,r5
 40254b4:	2027883a 	mov	r19,r4
 40254b8:	002f883a 	mov	r23,zero
 40254bc:	05800044 	movi	r22,1
 40254c0:	04bfffc4 	movi	r18,-1
 40254c4:	a4400117 	ldw	r17,4(r20)
 40254c8:	a4000217 	ldw	r16,8(r20)
 40254cc:	8c7fffc4 	addi	r17,r17,-1
 40254d0:	88000c16 	blt	r17,zero,4025504 <_fwalk_reent+0x84>
 40254d4:	84000304 	addi	r16,r16,12
 40254d8:	8080000b 	ldhu	r2,0(r16)
 40254dc:	8c7fffc4 	addi	r17,r17,-1
 40254e0:	817ffd04 	addi	r5,r16,-12
 40254e4:	b080052e 	bgeu	r22,r2,40254fc <_fwalk_reent+0x7c>
 40254e8:	8080008f 	ldh	r2,2(r16)
 40254ec:	9809883a 	mov	r4,r19
 40254f0:	14800226 	beq	r2,r18,40254fc <_fwalk_reent+0x7c>
 40254f4:	a83ee83a 	callr	r21
 40254f8:	b8aeb03a 	or	r23,r23,r2
 40254fc:	84001a04 	addi	r16,r16,104
 4025500:	8cbff51e 	bne	r17,r18,40254d8 <__flash_rwdata_start+0xffff4ffc>
 4025504:	a5000017 	ldw	r20,0(r20)
 4025508:	a03fee1e 	bne	r20,zero,40254c4 <__flash_rwdata_start+0xffff4fe8>
 402550c:	b805883a 	mov	r2,r23
 4025510:	dfc00817 	ldw	ra,32(sp)
 4025514:	ddc00717 	ldw	r23,28(sp)
 4025518:	dd800617 	ldw	r22,24(sp)
 402551c:	dd400517 	ldw	r21,20(sp)
 4025520:	dd000417 	ldw	r20,16(sp)
 4025524:	dcc00317 	ldw	r19,12(sp)
 4025528:	dc800217 	ldw	r18,8(sp)
 402552c:	dc400117 	ldw	r17,4(sp)
 4025530:	dc000017 	ldw	r16,0(sp)
 4025534:	dec00904 	addi	sp,sp,36
 4025538:	f800283a 	ret
 402553c:	002f883a 	mov	r23,zero
 4025540:	003ff206 	br	402550c <__flash_rwdata_start+0xffff5030>

04025544 <_setlocale_r>:
 4025544:	30001b26 	beq	r6,zero,40255b4 <_setlocale_r+0x70>
 4025548:	01400034 	movhi	r5,0
 402554c:	defffe04 	addi	sp,sp,-8
 4025550:	29404c04 	addi	r5,r5,304
 4025554:	3009883a 	mov	r4,r6
 4025558:	dc000015 	stw	r16,0(sp)
 402555c:	dfc00115 	stw	ra,4(sp)
 4025560:	3021883a 	mov	r16,r6
 4025564:	4027bfc0 	call	4027bfc <strcmp>
 4025568:	1000061e 	bne	r2,zero,4025584 <_setlocale_r+0x40>
 402556c:	00800034 	movhi	r2,0
 4025570:	10804b04 	addi	r2,r2,300
 4025574:	dfc00117 	ldw	ra,4(sp)
 4025578:	dc000017 	ldw	r16,0(sp)
 402557c:	dec00204 	addi	sp,sp,8
 4025580:	f800283a 	ret
 4025584:	01400034 	movhi	r5,0
 4025588:	29404b04 	addi	r5,r5,300
 402558c:	8009883a 	mov	r4,r16
 4025590:	4027bfc0 	call	4027bfc <strcmp>
 4025594:	103ff526 	beq	r2,zero,402556c <__flash_rwdata_start+0xffff5090>
 4025598:	01400034 	movhi	r5,0
 402559c:	29403604 	addi	r5,r5,216
 40255a0:	8009883a 	mov	r4,r16
 40255a4:	4027bfc0 	call	4027bfc <strcmp>
 40255a8:	103ff026 	beq	r2,zero,402556c <__flash_rwdata_start+0xffff5090>
 40255ac:	0005883a 	mov	r2,zero
 40255b0:	003ff006 	br	4025574 <__flash_rwdata_start+0xffff5098>
 40255b4:	00800034 	movhi	r2,0
 40255b8:	10804b04 	addi	r2,r2,300
 40255bc:	f800283a 	ret

040255c0 <__locale_charset>:
 40255c0:	00800034 	movhi	r2,0
 40255c4:	10821004 	addi	r2,r2,2112
 40255c8:	f800283a 	ret

040255cc <__locale_mb_cur_max>:
 40255cc:	00800034 	movhi	r2,0
 40255d0:	1087d004 	addi	r2,r2,8000
 40255d4:	10800017 	ldw	r2,0(r2)
 40255d8:	f800283a 	ret

040255dc <__locale_msgcharset>:
 40255dc:	00800034 	movhi	r2,0
 40255e0:	10820804 	addi	r2,r2,2080
 40255e4:	f800283a 	ret

040255e8 <__locale_cjk_lang>:
 40255e8:	0005883a 	mov	r2,zero
 40255ec:	f800283a 	ret

040255f0 <_localeconv_r>:
 40255f0:	00800034 	movhi	r2,0
 40255f4:	10821804 	addi	r2,r2,2144
 40255f8:	f800283a 	ret

040255fc <setlocale>:
 40255fc:	00800034 	movhi	r2,0
 4025600:	1087cf04 	addi	r2,r2,7996
 4025604:	280d883a 	mov	r6,r5
 4025608:	200b883a 	mov	r5,r4
 402560c:	11000017 	ldw	r4,0(r2)
 4025610:	40255441 	jmpi	4025544 <_setlocale_r>

04025614 <localeconv>:
 4025614:	00800034 	movhi	r2,0
 4025618:	10821804 	addi	r2,r2,2144
 402561c:	f800283a 	ret

04025620 <__smakebuf_r>:
 4025620:	2880030b 	ldhu	r2,12(r5)
 4025624:	10c0008c 	andi	r3,r2,2
 4025628:	1800411e 	bne	r3,zero,4025730 <__smakebuf_r+0x110>
 402562c:	deffec04 	addi	sp,sp,-80
 4025630:	dc000f15 	stw	r16,60(sp)
 4025634:	2821883a 	mov	r16,r5
 4025638:	2940038f 	ldh	r5,14(r5)
 402563c:	dc401015 	stw	r17,64(sp)
 4025640:	dfc01315 	stw	ra,76(sp)
 4025644:	dcc01215 	stw	r19,72(sp)
 4025648:	dc801115 	stw	r18,68(sp)
 402564c:	2023883a 	mov	r17,r4
 4025650:	28001c16 	blt	r5,zero,40256c4 <__smakebuf_r+0xa4>
 4025654:	d80d883a 	mov	r6,sp
 4025658:	40297a40 	call	40297a4 <_fstat_r>
 402565c:	10001816 	blt	r2,zero,40256c0 <__smakebuf_r+0xa0>
 4025660:	d8800117 	ldw	r2,4(sp)
 4025664:	00e00014 	movui	r3,32768
 4025668:	10bc000c 	andi	r2,r2,61440
 402566c:	14c80020 	cmpeqi	r19,r2,8192
 4025670:	10c03726 	beq	r2,r3,4025750 <__smakebuf_r+0x130>
 4025674:	80c0030b 	ldhu	r3,12(r16)
 4025678:	18c20014 	ori	r3,r3,2048
 402567c:	80c0030d 	sth	r3,12(r16)
 4025680:	00c80004 	movi	r3,8192
 4025684:	10c0521e 	bne	r2,r3,40257d0 <__smakebuf_r+0x1b0>
 4025688:	8140038f 	ldh	r5,14(r16)
 402568c:	8809883a 	mov	r4,r17
 4025690:	40298000 	call	4029800 <_isatty_r>
 4025694:	10004c26 	beq	r2,zero,40257c8 <__smakebuf_r+0x1a8>
 4025698:	8080030b 	ldhu	r2,12(r16)
 402569c:	80c010c4 	addi	r3,r16,67
 40256a0:	80c00015 	stw	r3,0(r16)
 40256a4:	10800054 	ori	r2,r2,1
 40256a8:	8080030d 	sth	r2,12(r16)
 40256ac:	00800044 	movi	r2,1
 40256b0:	80c00415 	stw	r3,16(r16)
 40256b4:	80800515 	stw	r2,20(r16)
 40256b8:	04810004 	movi	r18,1024
 40256bc:	00000706 	br	40256dc <__smakebuf_r+0xbc>
 40256c0:	8080030b 	ldhu	r2,12(r16)
 40256c4:	10c0200c 	andi	r3,r2,128
 40256c8:	18001f1e 	bne	r3,zero,4025748 <__smakebuf_r+0x128>
 40256cc:	04810004 	movi	r18,1024
 40256d0:	10820014 	ori	r2,r2,2048
 40256d4:	8080030d 	sth	r2,12(r16)
 40256d8:	0027883a 	mov	r19,zero
 40256dc:	900b883a 	mov	r5,r18
 40256e0:	8809883a 	mov	r4,r17
 40256e4:	40257dc0 	call	40257dc <_malloc_r>
 40256e8:	10002c26 	beq	r2,zero,402579c <__smakebuf_r+0x17c>
 40256ec:	80c0030b 	ldhu	r3,12(r16)
 40256f0:	010100b4 	movhi	r4,1026
 40256f4:	2111cd04 	addi	r4,r4,18228
 40256f8:	89000f15 	stw	r4,60(r17)
 40256fc:	18c02014 	ori	r3,r3,128
 4025700:	80c0030d 	sth	r3,12(r16)
 4025704:	80800015 	stw	r2,0(r16)
 4025708:	80800415 	stw	r2,16(r16)
 402570c:	84800515 	stw	r18,20(r16)
 4025710:	98001a1e 	bne	r19,zero,402577c <__smakebuf_r+0x15c>
 4025714:	dfc01317 	ldw	ra,76(sp)
 4025718:	dcc01217 	ldw	r19,72(sp)
 402571c:	dc801117 	ldw	r18,68(sp)
 4025720:	dc401017 	ldw	r17,64(sp)
 4025724:	dc000f17 	ldw	r16,60(sp)
 4025728:	dec01404 	addi	sp,sp,80
 402572c:	f800283a 	ret
 4025730:	288010c4 	addi	r2,r5,67
 4025734:	28800015 	stw	r2,0(r5)
 4025738:	28800415 	stw	r2,16(r5)
 402573c:	00800044 	movi	r2,1
 4025740:	28800515 	stw	r2,20(r5)
 4025744:	f800283a 	ret
 4025748:	04801004 	movi	r18,64
 402574c:	003fe006 	br	40256d0 <__flash_rwdata_start+0xffff51f4>
 4025750:	81000a17 	ldw	r4,40(r16)
 4025754:	00c100b4 	movhi	r3,1026
 4025758:	18dee604 	addi	r3,r3,31640
 402575c:	20ffc51e 	bne	r4,r3,4025674 <__flash_rwdata_start+0xffff5198>
 4025760:	8080030b 	ldhu	r2,12(r16)
 4025764:	04810004 	movi	r18,1024
 4025768:	84801315 	stw	r18,76(r16)
 402576c:	1484b03a 	or	r2,r2,r18
 4025770:	8080030d 	sth	r2,12(r16)
 4025774:	0027883a 	mov	r19,zero
 4025778:	003fd806 	br	40256dc <__flash_rwdata_start+0xffff5200>
 402577c:	8140038f 	ldh	r5,14(r16)
 4025780:	8809883a 	mov	r4,r17
 4025784:	40298000 	call	4029800 <_isatty_r>
 4025788:	103fe226 	beq	r2,zero,4025714 <__flash_rwdata_start+0xffff5238>
 402578c:	8080030b 	ldhu	r2,12(r16)
 4025790:	10800054 	ori	r2,r2,1
 4025794:	8080030d 	sth	r2,12(r16)
 4025798:	003fde06 	br	4025714 <__flash_rwdata_start+0xffff5238>
 402579c:	8080030b 	ldhu	r2,12(r16)
 40257a0:	10c0800c 	andi	r3,r2,512
 40257a4:	183fdb1e 	bne	r3,zero,4025714 <__flash_rwdata_start+0xffff5238>
 40257a8:	10800094 	ori	r2,r2,2
 40257ac:	80c010c4 	addi	r3,r16,67
 40257b0:	8080030d 	sth	r2,12(r16)
 40257b4:	00800044 	movi	r2,1
 40257b8:	80c00015 	stw	r3,0(r16)
 40257bc:	80c00415 	stw	r3,16(r16)
 40257c0:	80800515 	stw	r2,20(r16)
 40257c4:	003fd306 	br	4025714 <__flash_rwdata_start+0xffff5238>
 40257c8:	04810004 	movi	r18,1024
 40257cc:	003fc306 	br	40256dc <__flash_rwdata_start+0xffff5200>
 40257d0:	0027883a 	mov	r19,zero
 40257d4:	04810004 	movi	r18,1024
 40257d8:	003fc006 	br	40256dc <__flash_rwdata_start+0xffff5200>

040257dc <_malloc_r>:
 40257dc:	defff504 	addi	sp,sp,-44
 40257e0:	dc800315 	stw	r18,12(sp)
 40257e4:	dfc00a15 	stw	ra,40(sp)
 40257e8:	df000915 	stw	fp,36(sp)
 40257ec:	ddc00815 	stw	r23,32(sp)
 40257f0:	dd800715 	stw	r22,28(sp)
 40257f4:	dd400615 	stw	r21,24(sp)
 40257f8:	dd000515 	stw	r20,20(sp)
 40257fc:	dcc00415 	stw	r19,16(sp)
 4025800:	dc400215 	stw	r17,8(sp)
 4025804:	dc000115 	stw	r16,4(sp)
 4025808:	288002c4 	addi	r2,r5,11
 402580c:	00c00584 	movi	r3,22
 4025810:	2025883a 	mov	r18,r4
 4025814:	18807f2e 	bgeu	r3,r2,4025a14 <_malloc_r+0x238>
 4025818:	047ffe04 	movi	r17,-8
 402581c:	1462703a 	and	r17,r2,r17
 4025820:	8800a316 	blt	r17,zero,4025ab0 <_malloc_r+0x2d4>
 4025824:	8940a236 	bltu	r17,r5,4025ab0 <_malloc_r+0x2d4>
 4025828:	402d7840 	call	402d784 <__malloc_lock>
 402582c:	00807dc4 	movi	r2,503
 4025830:	1441e92e 	bgeu	r2,r17,4025fd8 <_malloc_r+0x7fc>
 4025834:	8804d27a 	srli	r2,r17,9
 4025838:	1000a126 	beq	r2,zero,4025ac0 <_malloc_r+0x2e4>
 402583c:	00c00104 	movi	r3,4
 4025840:	18811e36 	bltu	r3,r2,4025cbc <_malloc_r+0x4e0>
 4025844:	8804d1ba 	srli	r2,r17,6
 4025848:	12000e44 	addi	r8,r2,57
 402584c:	11c00e04 	addi	r7,r2,56
 4025850:	4209883a 	add	r4,r8,r8
 4025854:	04c00034 	movhi	r19,0
 4025858:	2109883a 	add	r4,r4,r4
 402585c:	9cc22604 	addi	r19,r19,2200
 4025860:	2109883a 	add	r4,r4,r4
 4025864:	9909883a 	add	r4,r19,r4
 4025868:	24000117 	ldw	r16,4(r4)
 402586c:	213ffe04 	addi	r4,r4,-8
 4025870:	24009726 	beq	r4,r16,4025ad0 <_malloc_r+0x2f4>
 4025874:	80800117 	ldw	r2,4(r16)
 4025878:	01bfff04 	movi	r6,-4
 402587c:	014003c4 	movi	r5,15
 4025880:	1184703a 	and	r2,r2,r6
 4025884:	1447c83a 	sub	r3,r2,r17
 4025888:	28c00716 	blt	r5,r3,40258a8 <_malloc_r+0xcc>
 402588c:	1800920e 	bge	r3,zero,4025ad8 <_malloc_r+0x2fc>
 4025890:	84000317 	ldw	r16,12(r16)
 4025894:	24008e26 	beq	r4,r16,4025ad0 <_malloc_r+0x2f4>
 4025898:	80800117 	ldw	r2,4(r16)
 402589c:	1184703a 	and	r2,r2,r6
 40258a0:	1447c83a 	sub	r3,r2,r17
 40258a4:	28fff90e 	bge	r5,r3,402588c <__flash_rwdata_start+0xffff53b0>
 40258a8:	3809883a 	mov	r4,r7
 40258ac:	01800034 	movhi	r6,0
 40258b0:	9c000417 	ldw	r16,16(r19)
 40258b4:	31822604 	addi	r6,r6,2200
 40258b8:	32000204 	addi	r8,r6,8
 40258bc:	82013426 	beq	r16,r8,4025d90 <_malloc_r+0x5b4>
 40258c0:	80c00117 	ldw	r3,4(r16)
 40258c4:	00bfff04 	movi	r2,-4
 40258c8:	188e703a 	and	r7,r3,r2
 40258cc:	3c45c83a 	sub	r2,r7,r17
 40258d0:	00c003c4 	movi	r3,15
 40258d4:	18811f16 	blt	r3,r2,4025d54 <_malloc_r+0x578>
 40258d8:	32000515 	stw	r8,20(r6)
 40258dc:	32000415 	stw	r8,16(r6)
 40258e0:	10007f0e 	bge	r2,zero,4025ae0 <_malloc_r+0x304>
 40258e4:	00807fc4 	movi	r2,511
 40258e8:	11c0fd36 	bltu	r2,r7,4025ce0 <_malloc_r+0x504>
 40258ec:	3806d0fa 	srli	r3,r7,3
 40258f0:	01c00044 	movi	r7,1
 40258f4:	30800117 	ldw	r2,4(r6)
 40258f8:	19400044 	addi	r5,r3,1
 40258fc:	294b883a 	add	r5,r5,r5
 4025900:	1807d0ba 	srai	r3,r3,2
 4025904:	294b883a 	add	r5,r5,r5
 4025908:	294b883a 	add	r5,r5,r5
 402590c:	298b883a 	add	r5,r5,r6
 4025910:	38c6983a 	sll	r3,r7,r3
 4025914:	29c00017 	ldw	r7,0(r5)
 4025918:	2a7ffe04 	addi	r9,r5,-8
 402591c:	1886b03a 	or	r3,r3,r2
 4025920:	82400315 	stw	r9,12(r16)
 4025924:	81c00215 	stw	r7,8(r16)
 4025928:	30c00115 	stw	r3,4(r6)
 402592c:	2c000015 	stw	r16,0(r5)
 4025930:	3c000315 	stw	r16,12(r7)
 4025934:	2005d0ba 	srai	r2,r4,2
 4025938:	01400044 	movi	r5,1
 402593c:	288a983a 	sll	r5,r5,r2
 4025940:	19406f36 	bltu	r3,r5,4025b00 <_malloc_r+0x324>
 4025944:	28c4703a 	and	r2,r5,r3
 4025948:	10000a1e 	bne	r2,zero,4025974 <_malloc_r+0x198>
 402594c:	00bfff04 	movi	r2,-4
 4025950:	294b883a 	add	r5,r5,r5
 4025954:	2088703a 	and	r4,r4,r2
 4025958:	28c4703a 	and	r2,r5,r3
 402595c:	21000104 	addi	r4,r4,4
 4025960:	1000041e 	bne	r2,zero,4025974 <_malloc_r+0x198>
 4025964:	294b883a 	add	r5,r5,r5
 4025968:	28c4703a 	and	r2,r5,r3
 402596c:	21000104 	addi	r4,r4,4
 4025970:	103ffc26 	beq	r2,zero,4025964 <__flash_rwdata_start+0xffff5488>
 4025974:	02bfff04 	movi	r10,-4
 4025978:	024003c4 	movi	r9,15
 402597c:	21800044 	addi	r6,r4,1
 4025980:	318d883a 	add	r6,r6,r6
 4025984:	318d883a 	add	r6,r6,r6
 4025988:	318d883a 	add	r6,r6,r6
 402598c:	998d883a 	add	r6,r19,r6
 4025990:	333ffe04 	addi	r12,r6,-8
 4025994:	2017883a 	mov	r11,r4
 4025998:	31800104 	addi	r6,r6,4
 402599c:	34000017 	ldw	r16,0(r6)
 40259a0:	31fffd04 	addi	r7,r6,-12
 40259a4:	81c0041e 	bne	r16,r7,40259b8 <_malloc_r+0x1dc>
 40259a8:	0000fb06 	br	4025d98 <_malloc_r+0x5bc>
 40259ac:	1801030e 	bge	r3,zero,4025dbc <_malloc_r+0x5e0>
 40259b0:	84000317 	ldw	r16,12(r16)
 40259b4:	81c0f826 	beq	r16,r7,4025d98 <_malloc_r+0x5bc>
 40259b8:	80800117 	ldw	r2,4(r16)
 40259bc:	1284703a 	and	r2,r2,r10
 40259c0:	1447c83a 	sub	r3,r2,r17
 40259c4:	48fff90e 	bge	r9,r3,40259ac <__flash_rwdata_start+0xffff54d0>
 40259c8:	80800317 	ldw	r2,12(r16)
 40259cc:	81000217 	ldw	r4,8(r16)
 40259d0:	89400054 	ori	r5,r17,1
 40259d4:	81400115 	stw	r5,4(r16)
 40259d8:	20800315 	stw	r2,12(r4)
 40259dc:	11000215 	stw	r4,8(r2)
 40259e0:	8463883a 	add	r17,r16,r17
 40259e4:	9c400515 	stw	r17,20(r19)
 40259e8:	9c400415 	stw	r17,16(r19)
 40259ec:	18800054 	ori	r2,r3,1
 40259f0:	88800115 	stw	r2,4(r17)
 40259f4:	8a000315 	stw	r8,12(r17)
 40259f8:	8a000215 	stw	r8,8(r17)
 40259fc:	88e3883a 	add	r17,r17,r3
 4025a00:	88c00015 	stw	r3,0(r17)
 4025a04:	9009883a 	mov	r4,r18
 4025a08:	402d7a80 	call	402d7a8 <__malloc_unlock>
 4025a0c:	80800204 	addi	r2,r16,8
 4025a10:	00001b06 	br	4025a80 <_malloc_r+0x2a4>
 4025a14:	04400404 	movi	r17,16
 4025a18:	89402536 	bltu	r17,r5,4025ab0 <_malloc_r+0x2d4>
 4025a1c:	402d7840 	call	402d784 <__malloc_lock>
 4025a20:	00800184 	movi	r2,6
 4025a24:	01000084 	movi	r4,2
 4025a28:	04c00034 	movhi	r19,0
 4025a2c:	1085883a 	add	r2,r2,r2
 4025a30:	9cc22604 	addi	r19,r19,2200
 4025a34:	1085883a 	add	r2,r2,r2
 4025a38:	9885883a 	add	r2,r19,r2
 4025a3c:	14000117 	ldw	r16,4(r2)
 4025a40:	10fffe04 	addi	r3,r2,-8
 4025a44:	80c0d926 	beq	r16,r3,4025dac <_malloc_r+0x5d0>
 4025a48:	80c00117 	ldw	r3,4(r16)
 4025a4c:	81000317 	ldw	r4,12(r16)
 4025a50:	00bfff04 	movi	r2,-4
 4025a54:	1884703a 	and	r2,r3,r2
 4025a58:	81400217 	ldw	r5,8(r16)
 4025a5c:	8085883a 	add	r2,r16,r2
 4025a60:	10c00117 	ldw	r3,4(r2)
 4025a64:	29000315 	stw	r4,12(r5)
 4025a68:	21400215 	stw	r5,8(r4)
 4025a6c:	18c00054 	ori	r3,r3,1
 4025a70:	10c00115 	stw	r3,4(r2)
 4025a74:	9009883a 	mov	r4,r18
 4025a78:	402d7a80 	call	402d7a8 <__malloc_unlock>
 4025a7c:	80800204 	addi	r2,r16,8
 4025a80:	dfc00a17 	ldw	ra,40(sp)
 4025a84:	df000917 	ldw	fp,36(sp)
 4025a88:	ddc00817 	ldw	r23,32(sp)
 4025a8c:	dd800717 	ldw	r22,28(sp)
 4025a90:	dd400617 	ldw	r21,24(sp)
 4025a94:	dd000517 	ldw	r20,20(sp)
 4025a98:	dcc00417 	ldw	r19,16(sp)
 4025a9c:	dc800317 	ldw	r18,12(sp)
 4025aa0:	dc400217 	ldw	r17,8(sp)
 4025aa4:	dc000117 	ldw	r16,4(sp)
 4025aa8:	dec00b04 	addi	sp,sp,44
 4025aac:	f800283a 	ret
 4025ab0:	00800304 	movi	r2,12
 4025ab4:	90800015 	stw	r2,0(r18)
 4025ab8:	0005883a 	mov	r2,zero
 4025abc:	003ff006 	br	4025a80 <__flash_rwdata_start+0xffff55a4>
 4025ac0:	01002004 	movi	r4,128
 4025ac4:	02001004 	movi	r8,64
 4025ac8:	01c00fc4 	movi	r7,63
 4025acc:	003f6106 	br	4025854 <__flash_rwdata_start+0xffff5378>
 4025ad0:	4009883a 	mov	r4,r8
 4025ad4:	003f7506 	br	40258ac <__flash_rwdata_start+0xffff53d0>
 4025ad8:	81000317 	ldw	r4,12(r16)
 4025adc:	003fde06 	br	4025a58 <__flash_rwdata_start+0xffff557c>
 4025ae0:	81c5883a 	add	r2,r16,r7
 4025ae4:	11400117 	ldw	r5,4(r2)
 4025ae8:	9009883a 	mov	r4,r18
 4025aec:	29400054 	ori	r5,r5,1
 4025af0:	11400115 	stw	r5,4(r2)
 4025af4:	402d7a80 	call	402d7a8 <__malloc_unlock>
 4025af8:	80800204 	addi	r2,r16,8
 4025afc:	003fe006 	br	4025a80 <__flash_rwdata_start+0xffff55a4>
 4025b00:	9c000217 	ldw	r16,8(r19)
 4025b04:	00bfff04 	movi	r2,-4
 4025b08:	85800117 	ldw	r22,4(r16)
 4025b0c:	b0ac703a 	and	r22,r22,r2
 4025b10:	b4400336 	bltu	r22,r17,4025b20 <_malloc_r+0x344>
 4025b14:	b445c83a 	sub	r2,r22,r17
 4025b18:	00c003c4 	movi	r3,15
 4025b1c:	18805d16 	blt	r3,r2,4025c94 <_malloc_r+0x4b8>
 4025b20:	05c00034 	movhi	r23,0
 4025b24:	00800034 	movhi	r2,0
 4025b28:	1087e804 	addi	r2,r2,8096
 4025b2c:	bdc7d104 	addi	r23,r23,8004
 4025b30:	15400017 	ldw	r21,0(r2)
 4025b34:	b8c00017 	ldw	r3,0(r23)
 4025b38:	00bfffc4 	movi	r2,-1
 4025b3c:	858d883a 	add	r6,r16,r22
 4025b40:	8d6b883a 	add	r21,r17,r21
 4025b44:	1880ea26 	beq	r3,r2,4025ef0 <_malloc_r+0x714>
 4025b48:	ad4403c4 	addi	r21,r21,4111
 4025b4c:	00bc0004 	movi	r2,-4096
 4025b50:	a8aa703a 	and	r21,r21,r2
 4025b54:	a80b883a 	mov	r5,r21
 4025b58:	9009883a 	mov	r4,r18
 4025b5c:	d9800015 	stw	r6,0(sp)
 4025b60:	4027a6c0 	call	4027a6c <_sbrk_r>
 4025b64:	1029883a 	mov	r20,r2
 4025b68:	00bfffc4 	movi	r2,-1
 4025b6c:	d9800017 	ldw	r6,0(sp)
 4025b70:	a080e826 	beq	r20,r2,4025f14 <_malloc_r+0x738>
 4025b74:	a180a636 	bltu	r20,r6,4025e10 <_malloc_r+0x634>
 4025b78:	07000034 	movhi	fp,0
 4025b7c:	e707f104 	addi	fp,fp,8132
 4025b80:	e0800017 	ldw	r2,0(fp)
 4025b84:	a887883a 	add	r3,r21,r2
 4025b88:	e0c00015 	stw	r3,0(fp)
 4025b8c:	3500e626 	beq	r6,r20,4025f28 <_malloc_r+0x74c>
 4025b90:	b9000017 	ldw	r4,0(r23)
 4025b94:	00bfffc4 	movi	r2,-1
 4025b98:	2080ee26 	beq	r4,r2,4025f54 <_malloc_r+0x778>
 4025b9c:	a185c83a 	sub	r2,r20,r6
 4025ba0:	10c5883a 	add	r2,r2,r3
 4025ba4:	e0800015 	stw	r2,0(fp)
 4025ba8:	a0c001cc 	andi	r3,r20,7
 4025bac:	1800bc26 	beq	r3,zero,4025ea0 <_malloc_r+0x6c4>
 4025bb0:	a0e9c83a 	sub	r20,r20,r3
 4025bb4:	00840204 	movi	r2,4104
 4025bb8:	a5000204 	addi	r20,r20,8
 4025bbc:	10c7c83a 	sub	r3,r2,r3
 4025bc0:	a545883a 	add	r2,r20,r21
 4025bc4:	1083ffcc 	andi	r2,r2,4095
 4025bc8:	18abc83a 	sub	r21,r3,r2
 4025bcc:	a80b883a 	mov	r5,r21
 4025bd0:	9009883a 	mov	r4,r18
 4025bd4:	4027a6c0 	call	4027a6c <_sbrk_r>
 4025bd8:	00ffffc4 	movi	r3,-1
 4025bdc:	10c0e126 	beq	r2,r3,4025f64 <_malloc_r+0x788>
 4025be0:	1505c83a 	sub	r2,r2,r20
 4025be4:	1545883a 	add	r2,r2,r21
 4025be8:	10800054 	ori	r2,r2,1
 4025bec:	e0c00017 	ldw	r3,0(fp)
 4025bf0:	9d000215 	stw	r20,8(r19)
 4025bf4:	a0800115 	stw	r2,4(r20)
 4025bf8:	a8c7883a 	add	r3,r21,r3
 4025bfc:	e0c00015 	stw	r3,0(fp)
 4025c00:	84c00e26 	beq	r16,r19,4025c3c <_malloc_r+0x460>
 4025c04:	018003c4 	movi	r6,15
 4025c08:	3580a72e 	bgeu	r6,r22,4025ea8 <_malloc_r+0x6cc>
 4025c0c:	81400117 	ldw	r5,4(r16)
 4025c10:	013ffe04 	movi	r4,-8
 4025c14:	b0bffd04 	addi	r2,r22,-12
 4025c18:	1104703a 	and	r2,r2,r4
 4025c1c:	2900004c 	andi	r4,r5,1
 4025c20:	2088b03a 	or	r4,r4,r2
 4025c24:	81000115 	stw	r4,4(r16)
 4025c28:	01400144 	movi	r5,5
 4025c2c:	8089883a 	add	r4,r16,r2
 4025c30:	21400115 	stw	r5,4(r4)
 4025c34:	21400215 	stw	r5,8(r4)
 4025c38:	3080cd36 	bltu	r6,r2,4025f70 <_malloc_r+0x794>
 4025c3c:	00800034 	movhi	r2,0
 4025c40:	1087e704 	addi	r2,r2,8092
 4025c44:	11000017 	ldw	r4,0(r2)
 4025c48:	20c0012e 	bgeu	r4,r3,4025c50 <_malloc_r+0x474>
 4025c4c:	10c00015 	stw	r3,0(r2)
 4025c50:	00800034 	movhi	r2,0
 4025c54:	1087e604 	addi	r2,r2,8088
 4025c58:	11000017 	ldw	r4,0(r2)
 4025c5c:	9c000217 	ldw	r16,8(r19)
 4025c60:	20c0012e 	bgeu	r4,r3,4025c68 <_malloc_r+0x48c>
 4025c64:	10c00015 	stw	r3,0(r2)
 4025c68:	80c00117 	ldw	r3,4(r16)
 4025c6c:	00bfff04 	movi	r2,-4
 4025c70:	1886703a 	and	r3,r3,r2
 4025c74:	1c45c83a 	sub	r2,r3,r17
 4025c78:	1c400236 	bltu	r3,r17,4025c84 <_malloc_r+0x4a8>
 4025c7c:	00c003c4 	movi	r3,15
 4025c80:	18800416 	blt	r3,r2,4025c94 <_malloc_r+0x4b8>
 4025c84:	9009883a 	mov	r4,r18
 4025c88:	402d7a80 	call	402d7a8 <__malloc_unlock>
 4025c8c:	0005883a 	mov	r2,zero
 4025c90:	003f7b06 	br	4025a80 <__flash_rwdata_start+0xffff55a4>
 4025c94:	88c00054 	ori	r3,r17,1
 4025c98:	80c00115 	stw	r3,4(r16)
 4025c9c:	8463883a 	add	r17,r16,r17
 4025ca0:	10800054 	ori	r2,r2,1
 4025ca4:	9c400215 	stw	r17,8(r19)
 4025ca8:	88800115 	stw	r2,4(r17)
 4025cac:	9009883a 	mov	r4,r18
 4025cb0:	402d7a80 	call	402d7a8 <__malloc_unlock>
 4025cb4:	80800204 	addi	r2,r16,8
 4025cb8:	003f7106 	br	4025a80 <__flash_rwdata_start+0xffff55a4>
 4025cbc:	00c00504 	movi	r3,20
 4025cc0:	18804a2e 	bgeu	r3,r2,4025dec <_malloc_r+0x610>
 4025cc4:	00c01504 	movi	r3,84
 4025cc8:	18806e36 	bltu	r3,r2,4025e84 <_malloc_r+0x6a8>
 4025ccc:	8804d33a 	srli	r2,r17,12
 4025cd0:	12001bc4 	addi	r8,r2,111
 4025cd4:	11c01b84 	addi	r7,r2,110
 4025cd8:	4209883a 	add	r4,r8,r8
 4025cdc:	003edd06 	br	4025854 <__flash_rwdata_start+0xffff5378>
 4025ce0:	3804d27a 	srli	r2,r7,9
 4025ce4:	00c00104 	movi	r3,4
 4025ce8:	1880442e 	bgeu	r3,r2,4025dfc <_malloc_r+0x620>
 4025cec:	00c00504 	movi	r3,20
 4025cf0:	18808136 	bltu	r3,r2,4025ef8 <_malloc_r+0x71c>
 4025cf4:	11401704 	addi	r5,r2,92
 4025cf8:	10c016c4 	addi	r3,r2,91
 4025cfc:	294b883a 	add	r5,r5,r5
 4025d00:	294b883a 	add	r5,r5,r5
 4025d04:	294b883a 	add	r5,r5,r5
 4025d08:	994b883a 	add	r5,r19,r5
 4025d0c:	28800017 	ldw	r2,0(r5)
 4025d10:	01800034 	movhi	r6,0
 4025d14:	297ffe04 	addi	r5,r5,-8
 4025d18:	31822604 	addi	r6,r6,2200
 4025d1c:	28806526 	beq	r5,r2,4025eb4 <_malloc_r+0x6d8>
 4025d20:	01bfff04 	movi	r6,-4
 4025d24:	10c00117 	ldw	r3,4(r2)
 4025d28:	1986703a 	and	r3,r3,r6
 4025d2c:	38c0022e 	bgeu	r7,r3,4025d38 <_malloc_r+0x55c>
 4025d30:	10800217 	ldw	r2,8(r2)
 4025d34:	28bffb1e 	bne	r5,r2,4025d24 <__flash_rwdata_start+0xffff5848>
 4025d38:	11400317 	ldw	r5,12(r2)
 4025d3c:	98c00117 	ldw	r3,4(r19)
 4025d40:	81400315 	stw	r5,12(r16)
 4025d44:	80800215 	stw	r2,8(r16)
 4025d48:	2c000215 	stw	r16,8(r5)
 4025d4c:	14000315 	stw	r16,12(r2)
 4025d50:	003ef806 	br	4025934 <__flash_rwdata_start+0xffff5458>
 4025d54:	88c00054 	ori	r3,r17,1
 4025d58:	80c00115 	stw	r3,4(r16)
 4025d5c:	8463883a 	add	r17,r16,r17
 4025d60:	34400515 	stw	r17,20(r6)
 4025d64:	34400415 	stw	r17,16(r6)
 4025d68:	10c00054 	ori	r3,r2,1
 4025d6c:	8a000315 	stw	r8,12(r17)
 4025d70:	8a000215 	stw	r8,8(r17)
 4025d74:	88c00115 	stw	r3,4(r17)
 4025d78:	88a3883a 	add	r17,r17,r2
 4025d7c:	88800015 	stw	r2,0(r17)
 4025d80:	9009883a 	mov	r4,r18
 4025d84:	402d7a80 	call	402d7a8 <__malloc_unlock>
 4025d88:	80800204 	addi	r2,r16,8
 4025d8c:	003f3c06 	br	4025a80 <__flash_rwdata_start+0xffff55a4>
 4025d90:	30c00117 	ldw	r3,4(r6)
 4025d94:	003ee706 	br	4025934 <__flash_rwdata_start+0xffff5458>
 4025d98:	5ac00044 	addi	r11,r11,1
 4025d9c:	588000cc 	andi	r2,r11,3
 4025da0:	31800204 	addi	r6,r6,8
 4025da4:	103efd1e 	bne	r2,zero,402599c <__flash_rwdata_start+0xffff54c0>
 4025da8:	00002406 	br	4025e3c <_malloc_r+0x660>
 4025dac:	14000317 	ldw	r16,12(r2)
 4025db0:	143f251e 	bne	r2,r16,4025a48 <__flash_rwdata_start+0xffff556c>
 4025db4:	21000084 	addi	r4,r4,2
 4025db8:	003ebc06 	br	40258ac <__flash_rwdata_start+0xffff53d0>
 4025dbc:	8085883a 	add	r2,r16,r2
 4025dc0:	10c00117 	ldw	r3,4(r2)
 4025dc4:	81000317 	ldw	r4,12(r16)
 4025dc8:	81400217 	ldw	r5,8(r16)
 4025dcc:	18c00054 	ori	r3,r3,1
 4025dd0:	10c00115 	stw	r3,4(r2)
 4025dd4:	29000315 	stw	r4,12(r5)
 4025dd8:	21400215 	stw	r5,8(r4)
 4025ddc:	9009883a 	mov	r4,r18
 4025de0:	402d7a80 	call	402d7a8 <__malloc_unlock>
 4025de4:	80800204 	addi	r2,r16,8
 4025de8:	003f2506 	br	4025a80 <__flash_rwdata_start+0xffff55a4>
 4025dec:	12001704 	addi	r8,r2,92
 4025df0:	11c016c4 	addi	r7,r2,91
 4025df4:	4209883a 	add	r4,r8,r8
 4025df8:	003e9606 	br	4025854 <__flash_rwdata_start+0xffff5378>
 4025dfc:	3804d1ba 	srli	r2,r7,6
 4025e00:	11400e44 	addi	r5,r2,57
 4025e04:	10c00e04 	addi	r3,r2,56
 4025e08:	294b883a 	add	r5,r5,r5
 4025e0c:	003fbc06 	br	4025d00 <__flash_rwdata_start+0xffff5824>
 4025e10:	84ff5926 	beq	r16,r19,4025b78 <__flash_rwdata_start+0xffff569c>
 4025e14:	00800034 	movhi	r2,0
 4025e18:	10822604 	addi	r2,r2,2200
 4025e1c:	14000217 	ldw	r16,8(r2)
 4025e20:	00bfff04 	movi	r2,-4
 4025e24:	80c00117 	ldw	r3,4(r16)
 4025e28:	1886703a 	and	r3,r3,r2
 4025e2c:	003f9106 	br	4025c74 <__flash_rwdata_start+0xffff5798>
 4025e30:	60800217 	ldw	r2,8(r12)
 4025e34:	213fffc4 	addi	r4,r4,-1
 4025e38:	1300651e 	bne	r2,r12,4025fd0 <_malloc_r+0x7f4>
 4025e3c:	208000cc 	andi	r2,r4,3
 4025e40:	633ffe04 	addi	r12,r12,-8
 4025e44:	103ffa1e 	bne	r2,zero,4025e30 <__flash_rwdata_start+0xffff5954>
 4025e48:	98800117 	ldw	r2,4(r19)
 4025e4c:	0146303a 	nor	r3,zero,r5
 4025e50:	1884703a 	and	r2,r3,r2
 4025e54:	98800115 	stw	r2,4(r19)
 4025e58:	294b883a 	add	r5,r5,r5
 4025e5c:	117f2836 	bltu	r2,r5,4025b00 <__flash_rwdata_start+0xffff5624>
 4025e60:	283f2726 	beq	r5,zero,4025b00 <__flash_rwdata_start+0xffff5624>
 4025e64:	2886703a 	and	r3,r5,r2
 4025e68:	5809883a 	mov	r4,r11
 4025e6c:	183ec31e 	bne	r3,zero,402597c <__flash_rwdata_start+0xffff54a0>
 4025e70:	294b883a 	add	r5,r5,r5
 4025e74:	2886703a 	and	r3,r5,r2
 4025e78:	21000104 	addi	r4,r4,4
 4025e7c:	183ffc26 	beq	r3,zero,4025e70 <__flash_rwdata_start+0xffff5994>
 4025e80:	003ebe06 	br	402597c <__flash_rwdata_start+0xffff54a0>
 4025e84:	00c05504 	movi	r3,340
 4025e88:	18801236 	bltu	r3,r2,4025ed4 <_malloc_r+0x6f8>
 4025e8c:	8804d3fa 	srli	r2,r17,15
 4025e90:	12001e04 	addi	r8,r2,120
 4025e94:	11c01dc4 	addi	r7,r2,119
 4025e98:	4209883a 	add	r4,r8,r8
 4025e9c:	003e6d06 	br	4025854 <__flash_rwdata_start+0xffff5378>
 4025ea0:	00c40004 	movi	r3,4096
 4025ea4:	003f4606 	br	4025bc0 <__flash_rwdata_start+0xffff56e4>
 4025ea8:	00800044 	movi	r2,1
 4025eac:	a0800115 	stw	r2,4(r20)
 4025eb0:	003f7406 	br	4025c84 <__flash_rwdata_start+0xffff57a8>
 4025eb4:	1805d0ba 	srai	r2,r3,2
 4025eb8:	01c00044 	movi	r7,1
 4025ebc:	30c00117 	ldw	r3,4(r6)
 4025ec0:	388e983a 	sll	r7,r7,r2
 4025ec4:	2805883a 	mov	r2,r5
 4025ec8:	38c6b03a 	or	r3,r7,r3
 4025ecc:	30c00115 	stw	r3,4(r6)
 4025ed0:	003f9b06 	br	4025d40 <__flash_rwdata_start+0xffff5864>
 4025ed4:	00c15504 	movi	r3,1364
 4025ed8:	18801a36 	bltu	r3,r2,4025f44 <_malloc_r+0x768>
 4025edc:	8804d4ba 	srli	r2,r17,18
 4025ee0:	12001f44 	addi	r8,r2,125
 4025ee4:	11c01f04 	addi	r7,r2,124
 4025ee8:	4209883a 	add	r4,r8,r8
 4025eec:	003e5906 	br	4025854 <__flash_rwdata_start+0xffff5378>
 4025ef0:	ad400404 	addi	r21,r21,16
 4025ef4:	003f1706 	br	4025b54 <__flash_rwdata_start+0xffff5678>
 4025ef8:	00c01504 	movi	r3,84
 4025efc:	18802336 	bltu	r3,r2,4025f8c <_malloc_r+0x7b0>
 4025f00:	3804d33a 	srli	r2,r7,12
 4025f04:	11401bc4 	addi	r5,r2,111
 4025f08:	10c01b84 	addi	r3,r2,110
 4025f0c:	294b883a 	add	r5,r5,r5
 4025f10:	003f7b06 	br	4025d00 <__flash_rwdata_start+0xffff5824>
 4025f14:	9c000217 	ldw	r16,8(r19)
 4025f18:	00bfff04 	movi	r2,-4
 4025f1c:	80c00117 	ldw	r3,4(r16)
 4025f20:	1886703a 	and	r3,r3,r2
 4025f24:	003f5306 	br	4025c74 <__flash_rwdata_start+0xffff5798>
 4025f28:	3083ffcc 	andi	r2,r6,4095
 4025f2c:	103f181e 	bne	r2,zero,4025b90 <__flash_rwdata_start+0xffff56b4>
 4025f30:	99000217 	ldw	r4,8(r19)
 4025f34:	b545883a 	add	r2,r22,r21
 4025f38:	10800054 	ori	r2,r2,1
 4025f3c:	20800115 	stw	r2,4(r4)
 4025f40:	003f3e06 	br	4025c3c <__flash_rwdata_start+0xffff5760>
 4025f44:	01003f84 	movi	r4,254
 4025f48:	02001fc4 	movi	r8,127
 4025f4c:	01c01f84 	movi	r7,126
 4025f50:	003e4006 	br	4025854 <__flash_rwdata_start+0xffff5378>
 4025f54:	00800034 	movhi	r2,0
 4025f58:	1087d104 	addi	r2,r2,8004
 4025f5c:	15000015 	stw	r20,0(r2)
 4025f60:	003f1106 	br	4025ba8 <__flash_rwdata_start+0xffff56cc>
 4025f64:	00800044 	movi	r2,1
 4025f68:	002b883a 	mov	r21,zero
 4025f6c:	003f1f06 	br	4025bec <__flash_rwdata_start+0xffff5710>
 4025f70:	81400204 	addi	r5,r16,8
 4025f74:	9009883a 	mov	r4,r18
 4025f78:	4024bf00 	call	4024bf0 <_free_r>
 4025f7c:	00800034 	movhi	r2,0
 4025f80:	1087f104 	addi	r2,r2,8132
 4025f84:	10c00017 	ldw	r3,0(r2)
 4025f88:	003f2c06 	br	4025c3c <__flash_rwdata_start+0xffff5760>
 4025f8c:	00c05504 	movi	r3,340
 4025f90:	18800536 	bltu	r3,r2,4025fa8 <_malloc_r+0x7cc>
 4025f94:	3804d3fa 	srli	r2,r7,15
 4025f98:	11401e04 	addi	r5,r2,120
 4025f9c:	10c01dc4 	addi	r3,r2,119
 4025fa0:	294b883a 	add	r5,r5,r5
 4025fa4:	003f5606 	br	4025d00 <__flash_rwdata_start+0xffff5824>
 4025fa8:	00c15504 	movi	r3,1364
 4025fac:	18800536 	bltu	r3,r2,4025fc4 <_malloc_r+0x7e8>
 4025fb0:	3804d4ba 	srli	r2,r7,18
 4025fb4:	11401f44 	addi	r5,r2,125
 4025fb8:	10c01f04 	addi	r3,r2,124
 4025fbc:	294b883a 	add	r5,r5,r5
 4025fc0:	003f4f06 	br	4025d00 <__flash_rwdata_start+0xffff5824>
 4025fc4:	01403f84 	movi	r5,254
 4025fc8:	00c01f84 	movi	r3,126
 4025fcc:	003f4c06 	br	4025d00 <__flash_rwdata_start+0xffff5824>
 4025fd0:	98800117 	ldw	r2,4(r19)
 4025fd4:	003fa006 	br	4025e58 <__flash_rwdata_start+0xffff597c>
 4025fd8:	8808d0fa 	srli	r4,r17,3
 4025fdc:	20800044 	addi	r2,r4,1
 4025fe0:	1085883a 	add	r2,r2,r2
 4025fe4:	003e9006 	br	4025a28 <__flash_rwdata_start+0xffff554c>

04025fe8 <memchr>:
 4025fe8:	208000cc 	andi	r2,r4,3
 4025fec:	280f883a 	mov	r7,r5
 4025ff0:	10003426 	beq	r2,zero,40260c4 <memchr+0xdc>
 4025ff4:	30bfffc4 	addi	r2,r6,-1
 4025ff8:	30001a26 	beq	r6,zero,4026064 <memchr+0x7c>
 4025ffc:	20c00003 	ldbu	r3,0(r4)
 4026000:	29803fcc 	andi	r6,r5,255
 4026004:	30c0051e 	bne	r6,r3,402601c <memchr+0x34>
 4026008:	00001806 	br	402606c <memchr+0x84>
 402600c:	10001526 	beq	r2,zero,4026064 <memchr+0x7c>
 4026010:	20c00003 	ldbu	r3,0(r4)
 4026014:	10bfffc4 	addi	r2,r2,-1
 4026018:	30c01426 	beq	r6,r3,402606c <memchr+0x84>
 402601c:	21000044 	addi	r4,r4,1
 4026020:	20c000cc 	andi	r3,r4,3
 4026024:	183ff91e 	bne	r3,zero,402600c <__flash_rwdata_start+0xffff5b30>
 4026028:	020000c4 	movi	r8,3
 402602c:	40801136 	bltu	r8,r2,4026074 <memchr+0x8c>
 4026030:	10000c26 	beq	r2,zero,4026064 <memchr+0x7c>
 4026034:	20c00003 	ldbu	r3,0(r4)
 4026038:	29403fcc 	andi	r5,r5,255
 402603c:	28c00b26 	beq	r5,r3,402606c <memchr+0x84>
 4026040:	20c00044 	addi	r3,r4,1
 4026044:	39803fcc 	andi	r6,r7,255
 4026048:	2089883a 	add	r4,r4,r2
 402604c:	00000306 	br	402605c <memchr+0x74>
 4026050:	18c00044 	addi	r3,r3,1
 4026054:	197fffc3 	ldbu	r5,-1(r3)
 4026058:	31400526 	beq	r6,r5,4026070 <memchr+0x88>
 402605c:	1805883a 	mov	r2,r3
 4026060:	20fffb1e 	bne	r4,r3,4026050 <__flash_rwdata_start+0xffff5b74>
 4026064:	0005883a 	mov	r2,zero
 4026068:	f800283a 	ret
 402606c:	2005883a 	mov	r2,r4
 4026070:	f800283a 	ret
 4026074:	28c03fcc 	andi	r3,r5,255
 4026078:	1812923a 	slli	r9,r3,8
 402607c:	02ffbff4 	movhi	r11,65279
 4026080:	02a02074 	movhi	r10,32897
 4026084:	48d2b03a 	or	r9,r9,r3
 4026088:	4806943a 	slli	r3,r9,16
 402608c:	5affbfc4 	addi	r11,r11,-257
 4026090:	52a02004 	addi	r10,r10,-32640
 4026094:	48d2b03a 	or	r9,r9,r3
 4026098:	20c00017 	ldw	r3,0(r4)
 402609c:	48c6f03a 	xor	r3,r9,r3
 40260a0:	1acd883a 	add	r6,r3,r11
 40260a4:	00c6303a 	nor	r3,zero,r3
 40260a8:	30c6703a 	and	r3,r6,r3
 40260ac:	1a86703a 	and	r3,r3,r10
 40260b0:	183fe01e 	bne	r3,zero,4026034 <__flash_rwdata_start+0xffff5b58>
 40260b4:	10bfff04 	addi	r2,r2,-4
 40260b8:	21000104 	addi	r4,r4,4
 40260bc:	40bff636 	bltu	r8,r2,4026098 <__flash_rwdata_start+0xffff5bbc>
 40260c0:	003fdb06 	br	4026030 <__flash_rwdata_start+0xffff5b54>
 40260c4:	3005883a 	mov	r2,r6
 40260c8:	003fd706 	br	4026028 <__flash_rwdata_start+0xffff5b4c>

040260cc <memcpy>:
 40260cc:	defffd04 	addi	sp,sp,-12
 40260d0:	dfc00215 	stw	ra,8(sp)
 40260d4:	dc400115 	stw	r17,4(sp)
 40260d8:	dc000015 	stw	r16,0(sp)
 40260dc:	00c003c4 	movi	r3,15
 40260e0:	2005883a 	mov	r2,r4
 40260e4:	1980452e 	bgeu	r3,r6,40261fc <memcpy+0x130>
 40260e8:	2906b03a 	or	r3,r5,r4
 40260ec:	18c000cc 	andi	r3,r3,3
 40260f0:	1800441e 	bne	r3,zero,4026204 <memcpy+0x138>
 40260f4:	347ffc04 	addi	r17,r6,-16
 40260f8:	8822d13a 	srli	r17,r17,4
 40260fc:	28c00104 	addi	r3,r5,4
 4026100:	23400104 	addi	r13,r4,4
 4026104:	8820913a 	slli	r16,r17,4
 4026108:	2b000204 	addi	r12,r5,8
 402610c:	22c00204 	addi	r11,r4,8
 4026110:	84000504 	addi	r16,r16,20
 4026114:	2a800304 	addi	r10,r5,12
 4026118:	22400304 	addi	r9,r4,12
 402611c:	2c21883a 	add	r16,r5,r16
 4026120:	2811883a 	mov	r8,r5
 4026124:	200f883a 	mov	r7,r4
 4026128:	41000017 	ldw	r4,0(r8)
 402612c:	1fc00017 	ldw	ra,0(r3)
 4026130:	63c00017 	ldw	r15,0(r12)
 4026134:	39000015 	stw	r4,0(r7)
 4026138:	53800017 	ldw	r14,0(r10)
 402613c:	6fc00015 	stw	ra,0(r13)
 4026140:	5bc00015 	stw	r15,0(r11)
 4026144:	4b800015 	stw	r14,0(r9)
 4026148:	18c00404 	addi	r3,r3,16
 402614c:	39c00404 	addi	r7,r7,16
 4026150:	42000404 	addi	r8,r8,16
 4026154:	6b400404 	addi	r13,r13,16
 4026158:	63000404 	addi	r12,r12,16
 402615c:	5ac00404 	addi	r11,r11,16
 4026160:	52800404 	addi	r10,r10,16
 4026164:	4a400404 	addi	r9,r9,16
 4026168:	1c3fef1e 	bne	r3,r16,4026128 <__flash_rwdata_start+0xffff5c4c>
 402616c:	89c00044 	addi	r7,r17,1
 4026170:	380e913a 	slli	r7,r7,4
 4026174:	310003cc 	andi	r4,r6,15
 4026178:	02c000c4 	movi	r11,3
 402617c:	11c7883a 	add	r3,r2,r7
 4026180:	29cb883a 	add	r5,r5,r7
 4026184:	5900212e 	bgeu	r11,r4,402620c <memcpy+0x140>
 4026188:	1813883a 	mov	r9,r3
 402618c:	2811883a 	mov	r8,r5
 4026190:	200f883a 	mov	r7,r4
 4026194:	42800017 	ldw	r10,0(r8)
 4026198:	4a400104 	addi	r9,r9,4
 402619c:	39ffff04 	addi	r7,r7,-4
 40261a0:	4abfff15 	stw	r10,-4(r9)
 40261a4:	42000104 	addi	r8,r8,4
 40261a8:	59fffa36 	bltu	r11,r7,4026194 <__flash_rwdata_start+0xffff5cb8>
 40261ac:	213fff04 	addi	r4,r4,-4
 40261b0:	2008d0ba 	srli	r4,r4,2
 40261b4:	318000cc 	andi	r6,r6,3
 40261b8:	21000044 	addi	r4,r4,1
 40261bc:	2109883a 	add	r4,r4,r4
 40261c0:	2109883a 	add	r4,r4,r4
 40261c4:	1907883a 	add	r3,r3,r4
 40261c8:	290b883a 	add	r5,r5,r4
 40261cc:	30000626 	beq	r6,zero,40261e8 <memcpy+0x11c>
 40261d0:	198d883a 	add	r6,r3,r6
 40261d4:	29c00003 	ldbu	r7,0(r5)
 40261d8:	18c00044 	addi	r3,r3,1
 40261dc:	29400044 	addi	r5,r5,1
 40261e0:	19ffffc5 	stb	r7,-1(r3)
 40261e4:	19bffb1e 	bne	r3,r6,40261d4 <__flash_rwdata_start+0xffff5cf8>
 40261e8:	dfc00217 	ldw	ra,8(sp)
 40261ec:	dc400117 	ldw	r17,4(sp)
 40261f0:	dc000017 	ldw	r16,0(sp)
 40261f4:	dec00304 	addi	sp,sp,12
 40261f8:	f800283a 	ret
 40261fc:	2007883a 	mov	r3,r4
 4026200:	003ff206 	br	40261cc <__flash_rwdata_start+0xffff5cf0>
 4026204:	2007883a 	mov	r3,r4
 4026208:	003ff106 	br	40261d0 <__flash_rwdata_start+0xffff5cf4>
 402620c:	200d883a 	mov	r6,r4
 4026210:	003fee06 	br	40261cc <__flash_rwdata_start+0xffff5cf0>

04026214 <memmove>:
 4026214:	2005883a 	mov	r2,r4
 4026218:	29000b2e 	bgeu	r5,r4,4026248 <memmove+0x34>
 402621c:	298f883a 	add	r7,r5,r6
 4026220:	21c0092e 	bgeu	r4,r7,4026248 <memmove+0x34>
 4026224:	2187883a 	add	r3,r4,r6
 4026228:	198bc83a 	sub	r5,r3,r6
 402622c:	30004826 	beq	r6,zero,4026350 <memmove+0x13c>
 4026230:	39ffffc4 	addi	r7,r7,-1
 4026234:	39000003 	ldbu	r4,0(r7)
 4026238:	18ffffc4 	addi	r3,r3,-1
 402623c:	19000005 	stb	r4,0(r3)
 4026240:	28fffb1e 	bne	r5,r3,4026230 <__flash_rwdata_start+0xffff5d54>
 4026244:	f800283a 	ret
 4026248:	00c003c4 	movi	r3,15
 402624c:	1980412e 	bgeu	r3,r6,4026354 <memmove+0x140>
 4026250:	2886b03a 	or	r3,r5,r2
 4026254:	18c000cc 	andi	r3,r3,3
 4026258:	1800401e 	bne	r3,zero,402635c <memmove+0x148>
 402625c:	33fffc04 	addi	r15,r6,-16
 4026260:	781ed13a 	srli	r15,r15,4
 4026264:	28c00104 	addi	r3,r5,4
 4026268:	13400104 	addi	r13,r2,4
 402626c:	781c913a 	slli	r14,r15,4
 4026270:	2b000204 	addi	r12,r5,8
 4026274:	12c00204 	addi	r11,r2,8
 4026278:	73800504 	addi	r14,r14,20
 402627c:	2a800304 	addi	r10,r5,12
 4026280:	12400304 	addi	r9,r2,12
 4026284:	2b9d883a 	add	r14,r5,r14
 4026288:	2811883a 	mov	r8,r5
 402628c:	100f883a 	mov	r7,r2
 4026290:	41000017 	ldw	r4,0(r8)
 4026294:	39c00404 	addi	r7,r7,16
 4026298:	18c00404 	addi	r3,r3,16
 402629c:	393ffc15 	stw	r4,-16(r7)
 40262a0:	193ffc17 	ldw	r4,-16(r3)
 40262a4:	6b400404 	addi	r13,r13,16
 40262a8:	5ac00404 	addi	r11,r11,16
 40262ac:	693ffc15 	stw	r4,-16(r13)
 40262b0:	61000017 	ldw	r4,0(r12)
 40262b4:	4a400404 	addi	r9,r9,16
 40262b8:	42000404 	addi	r8,r8,16
 40262bc:	593ffc15 	stw	r4,-16(r11)
 40262c0:	51000017 	ldw	r4,0(r10)
 40262c4:	63000404 	addi	r12,r12,16
 40262c8:	52800404 	addi	r10,r10,16
 40262cc:	493ffc15 	stw	r4,-16(r9)
 40262d0:	1bbfef1e 	bne	r3,r14,4026290 <__flash_rwdata_start+0xffff5db4>
 40262d4:	79000044 	addi	r4,r15,1
 40262d8:	2008913a 	slli	r4,r4,4
 40262dc:	328003cc 	andi	r10,r6,15
 40262e0:	02c000c4 	movi	r11,3
 40262e4:	1107883a 	add	r3,r2,r4
 40262e8:	290b883a 	add	r5,r5,r4
 40262ec:	5a801e2e 	bgeu	r11,r10,4026368 <memmove+0x154>
 40262f0:	1813883a 	mov	r9,r3
 40262f4:	2811883a 	mov	r8,r5
 40262f8:	500f883a 	mov	r7,r10
 40262fc:	41000017 	ldw	r4,0(r8)
 4026300:	4a400104 	addi	r9,r9,4
 4026304:	39ffff04 	addi	r7,r7,-4
 4026308:	493fff15 	stw	r4,-4(r9)
 402630c:	42000104 	addi	r8,r8,4
 4026310:	59fffa36 	bltu	r11,r7,40262fc <__flash_rwdata_start+0xffff5e20>
 4026314:	513fff04 	addi	r4,r10,-4
 4026318:	2008d0ba 	srli	r4,r4,2
 402631c:	318000cc 	andi	r6,r6,3
 4026320:	21000044 	addi	r4,r4,1
 4026324:	2109883a 	add	r4,r4,r4
 4026328:	2109883a 	add	r4,r4,r4
 402632c:	1907883a 	add	r3,r3,r4
 4026330:	290b883a 	add	r5,r5,r4
 4026334:	30000b26 	beq	r6,zero,4026364 <memmove+0x150>
 4026338:	198d883a 	add	r6,r3,r6
 402633c:	29c00003 	ldbu	r7,0(r5)
 4026340:	18c00044 	addi	r3,r3,1
 4026344:	29400044 	addi	r5,r5,1
 4026348:	19ffffc5 	stb	r7,-1(r3)
 402634c:	19bffb1e 	bne	r3,r6,402633c <__flash_rwdata_start+0xffff5e60>
 4026350:	f800283a 	ret
 4026354:	1007883a 	mov	r3,r2
 4026358:	003ff606 	br	4026334 <__flash_rwdata_start+0xffff5e58>
 402635c:	1007883a 	mov	r3,r2
 4026360:	003ff506 	br	4026338 <__flash_rwdata_start+0xffff5e5c>
 4026364:	f800283a 	ret
 4026368:	500d883a 	mov	r6,r10
 402636c:	003ff106 	br	4026334 <__flash_rwdata_start+0xffff5e58>

04026370 <memset>:
 4026370:	20c000cc 	andi	r3,r4,3
 4026374:	2005883a 	mov	r2,r4
 4026378:	18004426 	beq	r3,zero,402648c <memset+0x11c>
 402637c:	31ffffc4 	addi	r7,r6,-1
 4026380:	30004026 	beq	r6,zero,4026484 <memset+0x114>
 4026384:	2813883a 	mov	r9,r5
 4026388:	200d883a 	mov	r6,r4
 402638c:	2007883a 	mov	r3,r4
 4026390:	00000406 	br	40263a4 <memset+0x34>
 4026394:	3a3fffc4 	addi	r8,r7,-1
 4026398:	31800044 	addi	r6,r6,1
 402639c:	38003926 	beq	r7,zero,4026484 <memset+0x114>
 40263a0:	400f883a 	mov	r7,r8
 40263a4:	18c00044 	addi	r3,r3,1
 40263a8:	32400005 	stb	r9,0(r6)
 40263ac:	1a0000cc 	andi	r8,r3,3
 40263b0:	403ff81e 	bne	r8,zero,4026394 <__flash_rwdata_start+0xffff5eb8>
 40263b4:	010000c4 	movi	r4,3
 40263b8:	21c02d2e 	bgeu	r4,r7,4026470 <memset+0x100>
 40263bc:	29003fcc 	andi	r4,r5,255
 40263c0:	200c923a 	slli	r6,r4,8
 40263c4:	3108b03a 	or	r4,r6,r4
 40263c8:	200c943a 	slli	r6,r4,16
 40263cc:	218cb03a 	or	r6,r4,r6
 40263d0:	010003c4 	movi	r4,15
 40263d4:	21c0182e 	bgeu	r4,r7,4026438 <memset+0xc8>
 40263d8:	3b3ffc04 	addi	r12,r7,-16
 40263dc:	6018d13a 	srli	r12,r12,4
 40263e0:	1a000104 	addi	r8,r3,4
 40263e4:	1ac00204 	addi	r11,r3,8
 40263e8:	6008913a 	slli	r4,r12,4
 40263ec:	1a800304 	addi	r10,r3,12
 40263f0:	1813883a 	mov	r9,r3
 40263f4:	21000504 	addi	r4,r4,20
 40263f8:	1909883a 	add	r4,r3,r4
 40263fc:	49800015 	stw	r6,0(r9)
 4026400:	41800015 	stw	r6,0(r8)
 4026404:	59800015 	stw	r6,0(r11)
 4026408:	51800015 	stw	r6,0(r10)
 402640c:	42000404 	addi	r8,r8,16
 4026410:	4a400404 	addi	r9,r9,16
 4026414:	5ac00404 	addi	r11,r11,16
 4026418:	52800404 	addi	r10,r10,16
 402641c:	413ff71e 	bne	r8,r4,40263fc <__flash_rwdata_start+0xffff5f20>
 4026420:	63000044 	addi	r12,r12,1
 4026424:	6018913a 	slli	r12,r12,4
 4026428:	39c003cc 	andi	r7,r7,15
 402642c:	010000c4 	movi	r4,3
 4026430:	1b07883a 	add	r3,r3,r12
 4026434:	21c00e2e 	bgeu	r4,r7,4026470 <memset+0x100>
 4026438:	1813883a 	mov	r9,r3
 402643c:	3811883a 	mov	r8,r7
 4026440:	010000c4 	movi	r4,3
 4026444:	49800015 	stw	r6,0(r9)
 4026448:	423fff04 	addi	r8,r8,-4
 402644c:	4a400104 	addi	r9,r9,4
 4026450:	223ffc36 	bltu	r4,r8,4026444 <__flash_rwdata_start+0xffff5f68>
 4026454:	393fff04 	addi	r4,r7,-4
 4026458:	2008d0ba 	srli	r4,r4,2
 402645c:	39c000cc 	andi	r7,r7,3
 4026460:	21000044 	addi	r4,r4,1
 4026464:	2109883a 	add	r4,r4,r4
 4026468:	2109883a 	add	r4,r4,r4
 402646c:	1907883a 	add	r3,r3,r4
 4026470:	38000526 	beq	r7,zero,4026488 <memset+0x118>
 4026474:	19cf883a 	add	r7,r3,r7
 4026478:	19400005 	stb	r5,0(r3)
 402647c:	18c00044 	addi	r3,r3,1
 4026480:	38fffd1e 	bne	r7,r3,4026478 <__flash_rwdata_start+0xffff5f9c>
 4026484:	f800283a 	ret
 4026488:	f800283a 	ret
 402648c:	2007883a 	mov	r3,r4
 4026490:	300f883a 	mov	r7,r6
 4026494:	003fc706 	br	40263b4 <__flash_rwdata_start+0xffff5ed8>

04026498 <_Balloc>:
 4026498:	20801317 	ldw	r2,76(r4)
 402649c:	defffc04 	addi	sp,sp,-16
 40264a0:	dc400115 	stw	r17,4(sp)
 40264a4:	dc000015 	stw	r16,0(sp)
 40264a8:	dfc00315 	stw	ra,12(sp)
 40264ac:	dc800215 	stw	r18,8(sp)
 40264b0:	2023883a 	mov	r17,r4
 40264b4:	2821883a 	mov	r16,r5
 40264b8:	10000f26 	beq	r2,zero,40264f8 <_Balloc+0x60>
 40264bc:	8407883a 	add	r3,r16,r16
 40264c0:	18c7883a 	add	r3,r3,r3
 40264c4:	10c7883a 	add	r3,r2,r3
 40264c8:	18800017 	ldw	r2,0(r3)
 40264cc:	10001126 	beq	r2,zero,4026514 <_Balloc+0x7c>
 40264d0:	11000017 	ldw	r4,0(r2)
 40264d4:	19000015 	stw	r4,0(r3)
 40264d8:	10000415 	stw	zero,16(r2)
 40264dc:	10000315 	stw	zero,12(r2)
 40264e0:	dfc00317 	ldw	ra,12(sp)
 40264e4:	dc800217 	ldw	r18,8(sp)
 40264e8:	dc400117 	ldw	r17,4(sp)
 40264ec:	dc000017 	ldw	r16,0(sp)
 40264f0:	dec00404 	addi	sp,sp,16
 40264f4:	f800283a 	ret
 40264f8:	01800844 	movi	r6,33
 40264fc:	01400104 	movi	r5,4
 4026500:	40293d40 	call	40293d4 <_calloc_r>
 4026504:	88801315 	stw	r2,76(r17)
 4026508:	103fec1e 	bne	r2,zero,40264bc <__flash_rwdata_start+0xffff5fe0>
 402650c:	0005883a 	mov	r2,zero
 4026510:	003ff306 	br	40264e0 <__flash_rwdata_start+0xffff6004>
 4026514:	01400044 	movi	r5,1
 4026518:	2c24983a 	sll	r18,r5,r16
 402651c:	8809883a 	mov	r4,r17
 4026520:	91800144 	addi	r6,r18,5
 4026524:	318d883a 	add	r6,r6,r6
 4026528:	318d883a 	add	r6,r6,r6
 402652c:	40293d40 	call	40293d4 <_calloc_r>
 4026530:	103ff626 	beq	r2,zero,402650c <__flash_rwdata_start+0xffff6030>
 4026534:	14000115 	stw	r16,4(r2)
 4026538:	14800215 	stw	r18,8(r2)
 402653c:	003fe606 	br	40264d8 <__flash_rwdata_start+0xffff5ffc>

04026540 <_Bfree>:
 4026540:	28000826 	beq	r5,zero,4026564 <_Bfree+0x24>
 4026544:	28c00117 	ldw	r3,4(r5)
 4026548:	20801317 	ldw	r2,76(r4)
 402654c:	18c7883a 	add	r3,r3,r3
 4026550:	18c7883a 	add	r3,r3,r3
 4026554:	10c5883a 	add	r2,r2,r3
 4026558:	10c00017 	ldw	r3,0(r2)
 402655c:	28c00015 	stw	r3,0(r5)
 4026560:	11400015 	stw	r5,0(r2)
 4026564:	f800283a 	ret

04026568 <__multadd>:
 4026568:	defffa04 	addi	sp,sp,-24
 402656c:	dc800315 	stw	r18,12(sp)
 4026570:	dc400215 	stw	r17,8(sp)
 4026574:	dc000115 	stw	r16,4(sp)
 4026578:	2823883a 	mov	r17,r5
 402657c:	2c000417 	ldw	r16,16(r5)
 4026580:	dfc00515 	stw	ra,20(sp)
 4026584:	dcc00415 	stw	r19,16(sp)
 4026588:	2025883a 	mov	r18,r4
 402658c:	29400504 	addi	r5,r5,20
 4026590:	0011883a 	mov	r8,zero
 4026594:	28c00017 	ldw	r3,0(r5)
 4026598:	29400104 	addi	r5,r5,4
 402659c:	42000044 	addi	r8,r8,1
 40265a0:	18bfffcc 	andi	r2,r3,65535
 40265a4:	1185383a 	mul	r2,r2,r6
 40265a8:	1806d43a 	srli	r3,r3,16
 40265ac:	11cf883a 	add	r7,r2,r7
 40265b0:	3808d43a 	srli	r4,r7,16
 40265b4:	1987383a 	mul	r3,r3,r6
 40265b8:	38bfffcc 	andi	r2,r7,65535
 40265bc:	1907883a 	add	r3,r3,r4
 40265c0:	1808943a 	slli	r4,r3,16
 40265c4:	180ed43a 	srli	r7,r3,16
 40265c8:	2085883a 	add	r2,r4,r2
 40265cc:	28bfff15 	stw	r2,-4(r5)
 40265d0:	443ff016 	blt	r8,r16,4026594 <__flash_rwdata_start+0xffff60b8>
 40265d4:	38000926 	beq	r7,zero,40265fc <__multadd+0x94>
 40265d8:	88800217 	ldw	r2,8(r17)
 40265dc:	80800f0e 	bge	r16,r2,402661c <__multadd+0xb4>
 40265e0:	80800144 	addi	r2,r16,5
 40265e4:	1085883a 	add	r2,r2,r2
 40265e8:	1085883a 	add	r2,r2,r2
 40265ec:	8885883a 	add	r2,r17,r2
 40265f0:	11c00015 	stw	r7,0(r2)
 40265f4:	84000044 	addi	r16,r16,1
 40265f8:	8c000415 	stw	r16,16(r17)
 40265fc:	8805883a 	mov	r2,r17
 4026600:	dfc00517 	ldw	ra,20(sp)
 4026604:	dcc00417 	ldw	r19,16(sp)
 4026608:	dc800317 	ldw	r18,12(sp)
 402660c:	dc400217 	ldw	r17,8(sp)
 4026610:	dc000117 	ldw	r16,4(sp)
 4026614:	dec00604 	addi	sp,sp,24
 4026618:	f800283a 	ret
 402661c:	89400117 	ldw	r5,4(r17)
 4026620:	9009883a 	mov	r4,r18
 4026624:	d9c00015 	stw	r7,0(sp)
 4026628:	29400044 	addi	r5,r5,1
 402662c:	40264980 	call	4026498 <_Balloc>
 4026630:	89800417 	ldw	r6,16(r17)
 4026634:	89400304 	addi	r5,r17,12
 4026638:	11000304 	addi	r4,r2,12
 402663c:	31800084 	addi	r6,r6,2
 4026640:	318d883a 	add	r6,r6,r6
 4026644:	318d883a 	add	r6,r6,r6
 4026648:	1027883a 	mov	r19,r2
 402664c:	40260cc0 	call	40260cc <memcpy>
 4026650:	d9c00017 	ldw	r7,0(sp)
 4026654:	88000a26 	beq	r17,zero,4026680 <__multadd+0x118>
 4026658:	88c00117 	ldw	r3,4(r17)
 402665c:	90801317 	ldw	r2,76(r18)
 4026660:	18c7883a 	add	r3,r3,r3
 4026664:	18c7883a 	add	r3,r3,r3
 4026668:	10c5883a 	add	r2,r2,r3
 402666c:	10c00017 	ldw	r3,0(r2)
 4026670:	88c00015 	stw	r3,0(r17)
 4026674:	14400015 	stw	r17,0(r2)
 4026678:	9823883a 	mov	r17,r19
 402667c:	003fd806 	br	40265e0 <__flash_rwdata_start+0xffff6104>
 4026680:	9823883a 	mov	r17,r19
 4026684:	003fd606 	br	40265e0 <__flash_rwdata_start+0xffff6104>

04026688 <__s2b>:
 4026688:	defff904 	addi	sp,sp,-28
 402668c:	dc400115 	stw	r17,4(sp)
 4026690:	dc000015 	stw	r16,0(sp)
 4026694:	2023883a 	mov	r17,r4
 4026698:	2821883a 	mov	r16,r5
 402669c:	39000204 	addi	r4,r7,8
 40266a0:	01400244 	movi	r5,9
 40266a4:	dcc00315 	stw	r19,12(sp)
 40266a8:	dc800215 	stw	r18,8(sp)
 40266ac:	dfc00615 	stw	ra,24(sp)
 40266b0:	dd400515 	stw	r21,20(sp)
 40266b4:	dd000415 	stw	r20,16(sp)
 40266b8:	3825883a 	mov	r18,r7
 40266bc:	3027883a 	mov	r19,r6
 40266c0:	402a7040 	call	402a704 <__divsi3>
 40266c4:	00c00044 	movi	r3,1
 40266c8:	000b883a 	mov	r5,zero
 40266cc:	1880030e 	bge	r3,r2,40266dc <__s2b+0x54>
 40266d0:	18c7883a 	add	r3,r3,r3
 40266d4:	29400044 	addi	r5,r5,1
 40266d8:	18bffd16 	blt	r3,r2,40266d0 <__flash_rwdata_start+0xffff61f4>
 40266dc:	8809883a 	mov	r4,r17
 40266e0:	40264980 	call	4026498 <_Balloc>
 40266e4:	d8c00717 	ldw	r3,28(sp)
 40266e8:	10c00515 	stw	r3,20(r2)
 40266ec:	00c00044 	movi	r3,1
 40266f0:	10c00415 	stw	r3,16(r2)
 40266f4:	00c00244 	movi	r3,9
 40266f8:	1cc0210e 	bge	r3,r19,4026780 <__s2b+0xf8>
 40266fc:	80eb883a 	add	r21,r16,r3
 4026700:	a829883a 	mov	r20,r21
 4026704:	84e1883a 	add	r16,r16,r19
 4026708:	a1c00007 	ldb	r7,0(r20)
 402670c:	01800284 	movi	r6,10
 4026710:	a5000044 	addi	r20,r20,1
 4026714:	100b883a 	mov	r5,r2
 4026718:	39fff404 	addi	r7,r7,-48
 402671c:	8809883a 	mov	r4,r17
 4026720:	40265680 	call	4026568 <__multadd>
 4026724:	a43ff81e 	bne	r20,r16,4026708 <__flash_rwdata_start+0xffff622c>
 4026728:	ace1883a 	add	r16,r21,r19
 402672c:	843ffe04 	addi	r16,r16,-8
 4026730:	9c800a0e 	bge	r19,r18,402675c <__s2b+0xd4>
 4026734:	94e5c83a 	sub	r18,r18,r19
 4026738:	84a5883a 	add	r18,r16,r18
 402673c:	81c00007 	ldb	r7,0(r16)
 4026740:	01800284 	movi	r6,10
 4026744:	84000044 	addi	r16,r16,1
 4026748:	100b883a 	mov	r5,r2
 402674c:	39fff404 	addi	r7,r7,-48
 4026750:	8809883a 	mov	r4,r17
 4026754:	40265680 	call	4026568 <__multadd>
 4026758:	84bff81e 	bne	r16,r18,402673c <__flash_rwdata_start+0xffff6260>
 402675c:	dfc00617 	ldw	ra,24(sp)
 4026760:	dd400517 	ldw	r21,20(sp)
 4026764:	dd000417 	ldw	r20,16(sp)
 4026768:	dcc00317 	ldw	r19,12(sp)
 402676c:	dc800217 	ldw	r18,8(sp)
 4026770:	dc400117 	ldw	r17,4(sp)
 4026774:	dc000017 	ldw	r16,0(sp)
 4026778:	dec00704 	addi	sp,sp,28
 402677c:	f800283a 	ret
 4026780:	84000284 	addi	r16,r16,10
 4026784:	1827883a 	mov	r19,r3
 4026788:	003fe906 	br	4026730 <__flash_rwdata_start+0xffff6254>

0402678c <__hi0bits>:
 402678c:	20bfffec 	andhi	r2,r4,65535
 4026790:	1000141e 	bne	r2,zero,40267e4 <__hi0bits+0x58>
 4026794:	2008943a 	slli	r4,r4,16
 4026798:	00800404 	movi	r2,16
 402679c:	20ffc02c 	andhi	r3,r4,65280
 40267a0:	1800021e 	bne	r3,zero,40267ac <__hi0bits+0x20>
 40267a4:	2008923a 	slli	r4,r4,8
 40267a8:	10800204 	addi	r2,r2,8
 40267ac:	20fc002c 	andhi	r3,r4,61440
 40267b0:	1800021e 	bne	r3,zero,40267bc <__hi0bits+0x30>
 40267b4:	2008913a 	slli	r4,r4,4
 40267b8:	10800104 	addi	r2,r2,4
 40267bc:	20f0002c 	andhi	r3,r4,49152
 40267c0:	1800031e 	bne	r3,zero,40267d0 <__hi0bits+0x44>
 40267c4:	2109883a 	add	r4,r4,r4
 40267c8:	10800084 	addi	r2,r2,2
 40267cc:	2109883a 	add	r4,r4,r4
 40267d0:	20000316 	blt	r4,zero,40267e0 <__hi0bits+0x54>
 40267d4:	2110002c 	andhi	r4,r4,16384
 40267d8:	2000041e 	bne	r4,zero,40267ec <__hi0bits+0x60>
 40267dc:	00800804 	movi	r2,32
 40267e0:	f800283a 	ret
 40267e4:	0005883a 	mov	r2,zero
 40267e8:	003fec06 	br	402679c <__flash_rwdata_start+0xffff62c0>
 40267ec:	10800044 	addi	r2,r2,1
 40267f0:	f800283a 	ret

040267f4 <__lo0bits>:
 40267f4:	20c00017 	ldw	r3,0(r4)
 40267f8:	188001cc 	andi	r2,r3,7
 40267fc:	10000826 	beq	r2,zero,4026820 <__lo0bits+0x2c>
 4026800:	1880004c 	andi	r2,r3,1
 4026804:	1000211e 	bne	r2,zero,402688c <__lo0bits+0x98>
 4026808:	1880008c 	andi	r2,r3,2
 402680c:	1000211e 	bne	r2,zero,4026894 <__lo0bits+0xa0>
 4026810:	1806d0ba 	srli	r3,r3,2
 4026814:	00800084 	movi	r2,2
 4026818:	20c00015 	stw	r3,0(r4)
 402681c:	f800283a 	ret
 4026820:	18bfffcc 	andi	r2,r3,65535
 4026824:	10001326 	beq	r2,zero,4026874 <__lo0bits+0x80>
 4026828:	0005883a 	mov	r2,zero
 402682c:	19403fcc 	andi	r5,r3,255
 4026830:	2800021e 	bne	r5,zero,402683c <__lo0bits+0x48>
 4026834:	1806d23a 	srli	r3,r3,8
 4026838:	10800204 	addi	r2,r2,8
 402683c:	194003cc 	andi	r5,r3,15
 4026840:	2800021e 	bne	r5,zero,402684c <__lo0bits+0x58>
 4026844:	1806d13a 	srli	r3,r3,4
 4026848:	10800104 	addi	r2,r2,4
 402684c:	194000cc 	andi	r5,r3,3
 4026850:	2800021e 	bne	r5,zero,402685c <__lo0bits+0x68>
 4026854:	1806d0ba 	srli	r3,r3,2
 4026858:	10800084 	addi	r2,r2,2
 402685c:	1940004c 	andi	r5,r3,1
 4026860:	2800081e 	bne	r5,zero,4026884 <__lo0bits+0x90>
 4026864:	1806d07a 	srli	r3,r3,1
 4026868:	1800051e 	bne	r3,zero,4026880 <__lo0bits+0x8c>
 402686c:	00800804 	movi	r2,32
 4026870:	f800283a 	ret
 4026874:	1806d43a 	srli	r3,r3,16
 4026878:	00800404 	movi	r2,16
 402687c:	003feb06 	br	402682c <__flash_rwdata_start+0xffff6350>
 4026880:	10800044 	addi	r2,r2,1
 4026884:	20c00015 	stw	r3,0(r4)
 4026888:	f800283a 	ret
 402688c:	0005883a 	mov	r2,zero
 4026890:	f800283a 	ret
 4026894:	1806d07a 	srli	r3,r3,1
 4026898:	00800044 	movi	r2,1
 402689c:	20c00015 	stw	r3,0(r4)
 40268a0:	f800283a 	ret

040268a4 <__i2b>:
 40268a4:	defffd04 	addi	sp,sp,-12
 40268a8:	dc000015 	stw	r16,0(sp)
 40268ac:	04000044 	movi	r16,1
 40268b0:	dc400115 	stw	r17,4(sp)
 40268b4:	2823883a 	mov	r17,r5
 40268b8:	800b883a 	mov	r5,r16
 40268bc:	dfc00215 	stw	ra,8(sp)
 40268c0:	40264980 	call	4026498 <_Balloc>
 40268c4:	14400515 	stw	r17,20(r2)
 40268c8:	14000415 	stw	r16,16(r2)
 40268cc:	dfc00217 	ldw	ra,8(sp)
 40268d0:	dc400117 	ldw	r17,4(sp)
 40268d4:	dc000017 	ldw	r16,0(sp)
 40268d8:	dec00304 	addi	sp,sp,12
 40268dc:	f800283a 	ret

040268e0 <__multiply>:
 40268e0:	defffa04 	addi	sp,sp,-24
 40268e4:	dcc00315 	stw	r19,12(sp)
 40268e8:	dc800215 	stw	r18,8(sp)
 40268ec:	34c00417 	ldw	r19,16(r6)
 40268f0:	2c800417 	ldw	r18,16(r5)
 40268f4:	dd000415 	stw	r20,16(sp)
 40268f8:	dc400115 	stw	r17,4(sp)
 40268fc:	dfc00515 	stw	ra,20(sp)
 4026900:	dc000015 	stw	r16,0(sp)
 4026904:	2829883a 	mov	r20,r5
 4026908:	3023883a 	mov	r17,r6
 402690c:	94c0050e 	bge	r18,r19,4026924 <__multiply+0x44>
 4026910:	9007883a 	mov	r3,r18
 4026914:	3029883a 	mov	r20,r6
 4026918:	9825883a 	mov	r18,r19
 402691c:	2823883a 	mov	r17,r5
 4026920:	1827883a 	mov	r19,r3
 4026924:	a0800217 	ldw	r2,8(r20)
 4026928:	94e1883a 	add	r16,r18,r19
 402692c:	a1400117 	ldw	r5,4(r20)
 4026930:	1400010e 	bge	r2,r16,4026938 <__multiply+0x58>
 4026934:	29400044 	addi	r5,r5,1
 4026938:	40264980 	call	4026498 <_Balloc>
 402693c:	8415883a 	add	r10,r16,r16
 4026940:	12c00504 	addi	r11,r2,20
 4026944:	5295883a 	add	r10,r10,r10
 4026948:	5a95883a 	add	r10,r11,r10
 402694c:	5807883a 	mov	r3,r11
 4026950:	5a80032e 	bgeu	r11,r10,4026960 <__multiply+0x80>
 4026954:	18000015 	stw	zero,0(r3)
 4026958:	18c00104 	addi	r3,r3,4
 402695c:	1abffd36 	bltu	r3,r10,4026954 <__flash_rwdata_start+0xffff6478>
 4026960:	9ce7883a 	add	r19,r19,r19
 4026964:	94a5883a 	add	r18,r18,r18
 4026968:	89800504 	addi	r6,r17,20
 402696c:	9ce7883a 	add	r19,r19,r19
 4026970:	a3400504 	addi	r13,r20,20
 4026974:	94a5883a 	add	r18,r18,r18
 4026978:	34d9883a 	add	r12,r6,r19
 402697c:	6c93883a 	add	r9,r13,r18
 4026980:	3300422e 	bgeu	r6,r12,4026a8c <__multiply+0x1ac>
 4026984:	37c00017 	ldw	ra,0(r6)
 4026988:	fbffffcc 	andi	r15,ra,65535
 402698c:	78001b26 	beq	r15,zero,40269fc <__multiply+0x11c>
 4026990:	5811883a 	mov	r8,r11
 4026994:	681d883a 	mov	r14,r13
 4026998:	000f883a 	mov	r7,zero
 402699c:	71000017 	ldw	r4,0(r14)
 40269a0:	40c00017 	ldw	r3,0(r8)
 40269a4:	73800104 	addi	r14,r14,4
 40269a8:	217fffcc 	andi	r5,r4,65535
 40269ac:	2bcb383a 	mul	r5,r5,r15
 40269b0:	2008d43a 	srli	r4,r4,16
 40269b4:	1c7fffcc 	andi	r17,r3,65535
 40269b8:	2c4b883a 	add	r5,r5,r17
 40269bc:	29cb883a 	add	r5,r5,r7
 40269c0:	23c9383a 	mul	r4,r4,r15
 40269c4:	1806d43a 	srli	r3,r3,16
 40269c8:	280ed43a 	srli	r7,r5,16
 40269cc:	297fffcc 	andi	r5,r5,65535
 40269d0:	20c7883a 	add	r3,r4,r3
 40269d4:	19c7883a 	add	r3,r3,r7
 40269d8:	1808943a 	slli	r4,r3,16
 40269dc:	4023883a 	mov	r17,r8
 40269e0:	180ed43a 	srli	r7,r3,16
 40269e4:	214ab03a 	or	r5,r4,r5
 40269e8:	41400015 	stw	r5,0(r8)
 40269ec:	42000104 	addi	r8,r8,4
 40269f0:	727fea36 	bltu	r14,r9,402699c <__flash_rwdata_start+0xffff64c0>
 40269f4:	89c00115 	stw	r7,4(r17)
 40269f8:	37c00017 	ldw	ra,0(r6)
 40269fc:	f83ed43a 	srli	ra,ra,16
 4026a00:	f8001f26 	beq	ra,zero,4026a80 <__multiply+0x1a0>
 4026a04:	58c00017 	ldw	r3,0(r11)
 4026a08:	681d883a 	mov	r14,r13
 4026a0c:	581f883a 	mov	r15,r11
 4026a10:	1811883a 	mov	r8,r3
 4026a14:	5825883a 	mov	r18,r11
 4026a18:	000f883a 	mov	r7,zero
 4026a1c:	00000106 	br	4026a24 <__multiply+0x144>
 4026a20:	8825883a 	mov	r18,r17
 4026a24:	7140000b 	ldhu	r5,0(r14)
 4026a28:	4010d43a 	srli	r8,r8,16
 4026a2c:	193fffcc 	andi	r4,r3,65535
 4026a30:	2fcb383a 	mul	r5,r5,ra
 4026a34:	7bc00104 	addi	r15,r15,4
 4026a38:	73800104 	addi	r14,r14,4
 4026a3c:	2a0b883a 	add	r5,r5,r8
 4026a40:	29cb883a 	add	r5,r5,r7
 4026a44:	2806943a 	slli	r3,r5,16
 4026a48:	94400104 	addi	r17,r18,4
 4026a4c:	280ad43a 	srli	r5,r5,16
 4026a50:	1908b03a 	or	r4,r3,r4
 4026a54:	793fff15 	stw	r4,-4(r15)
 4026a58:	70ffff17 	ldw	r3,-4(r14)
 4026a5c:	8a000017 	ldw	r8,0(r17)
 4026a60:	1806d43a 	srli	r3,r3,16
 4026a64:	413fffcc 	andi	r4,r8,65535
 4026a68:	1fc7383a 	mul	r3,r3,ra
 4026a6c:	1907883a 	add	r3,r3,r4
 4026a70:	1947883a 	add	r3,r3,r5
 4026a74:	180ed43a 	srli	r7,r3,16
 4026a78:	727fe936 	bltu	r14,r9,4026a20 <__flash_rwdata_start+0xffff6544>
 4026a7c:	90c00115 	stw	r3,4(r18)
 4026a80:	31800104 	addi	r6,r6,4
 4026a84:	5ac00104 	addi	r11,r11,4
 4026a88:	333fbe36 	bltu	r6,r12,4026984 <__flash_rwdata_start+0xffff64a8>
 4026a8c:	0400090e 	bge	zero,r16,4026ab4 <__multiply+0x1d4>
 4026a90:	50ffff17 	ldw	r3,-4(r10)
 4026a94:	52bfff04 	addi	r10,r10,-4
 4026a98:	18000326 	beq	r3,zero,4026aa8 <__multiply+0x1c8>
 4026a9c:	00000506 	br	4026ab4 <__multiply+0x1d4>
 4026aa0:	50c00017 	ldw	r3,0(r10)
 4026aa4:	1800031e 	bne	r3,zero,4026ab4 <__multiply+0x1d4>
 4026aa8:	843fffc4 	addi	r16,r16,-1
 4026aac:	52bfff04 	addi	r10,r10,-4
 4026ab0:	803ffb1e 	bne	r16,zero,4026aa0 <__flash_rwdata_start+0xffff65c4>
 4026ab4:	14000415 	stw	r16,16(r2)
 4026ab8:	dfc00517 	ldw	ra,20(sp)
 4026abc:	dd000417 	ldw	r20,16(sp)
 4026ac0:	dcc00317 	ldw	r19,12(sp)
 4026ac4:	dc800217 	ldw	r18,8(sp)
 4026ac8:	dc400117 	ldw	r17,4(sp)
 4026acc:	dc000017 	ldw	r16,0(sp)
 4026ad0:	dec00604 	addi	sp,sp,24
 4026ad4:	f800283a 	ret

04026ad8 <__pow5mult>:
 4026ad8:	defffa04 	addi	sp,sp,-24
 4026adc:	dcc00315 	stw	r19,12(sp)
 4026ae0:	dc000015 	stw	r16,0(sp)
 4026ae4:	dfc00515 	stw	ra,20(sp)
 4026ae8:	dd000415 	stw	r20,16(sp)
 4026aec:	dc800215 	stw	r18,8(sp)
 4026af0:	dc400115 	stw	r17,4(sp)
 4026af4:	308000cc 	andi	r2,r6,3
 4026af8:	3021883a 	mov	r16,r6
 4026afc:	2027883a 	mov	r19,r4
 4026b00:	10002f1e 	bne	r2,zero,4026bc0 <__pow5mult+0xe8>
 4026b04:	2825883a 	mov	r18,r5
 4026b08:	8021d0ba 	srai	r16,r16,2
 4026b0c:	80001a26 	beq	r16,zero,4026b78 <__pow5mult+0xa0>
 4026b10:	9c401217 	ldw	r17,72(r19)
 4026b14:	8800061e 	bne	r17,zero,4026b30 <__pow5mult+0x58>
 4026b18:	00003406 	br	4026bec <__pow5mult+0x114>
 4026b1c:	8021d07a 	srai	r16,r16,1
 4026b20:	80001526 	beq	r16,zero,4026b78 <__pow5mult+0xa0>
 4026b24:	88800017 	ldw	r2,0(r17)
 4026b28:	10001c26 	beq	r2,zero,4026b9c <__pow5mult+0xc4>
 4026b2c:	1023883a 	mov	r17,r2
 4026b30:	8080004c 	andi	r2,r16,1
 4026b34:	103ff926 	beq	r2,zero,4026b1c <__flash_rwdata_start+0xffff6640>
 4026b38:	880d883a 	mov	r6,r17
 4026b3c:	900b883a 	mov	r5,r18
 4026b40:	9809883a 	mov	r4,r19
 4026b44:	40268e00 	call	40268e0 <__multiply>
 4026b48:	90001b26 	beq	r18,zero,4026bb8 <__pow5mult+0xe0>
 4026b4c:	91000117 	ldw	r4,4(r18)
 4026b50:	98c01317 	ldw	r3,76(r19)
 4026b54:	8021d07a 	srai	r16,r16,1
 4026b58:	2109883a 	add	r4,r4,r4
 4026b5c:	2109883a 	add	r4,r4,r4
 4026b60:	1907883a 	add	r3,r3,r4
 4026b64:	19000017 	ldw	r4,0(r3)
 4026b68:	91000015 	stw	r4,0(r18)
 4026b6c:	1c800015 	stw	r18,0(r3)
 4026b70:	1025883a 	mov	r18,r2
 4026b74:	803feb1e 	bne	r16,zero,4026b24 <__flash_rwdata_start+0xffff6648>
 4026b78:	9005883a 	mov	r2,r18
 4026b7c:	dfc00517 	ldw	ra,20(sp)
 4026b80:	dd000417 	ldw	r20,16(sp)
 4026b84:	dcc00317 	ldw	r19,12(sp)
 4026b88:	dc800217 	ldw	r18,8(sp)
 4026b8c:	dc400117 	ldw	r17,4(sp)
 4026b90:	dc000017 	ldw	r16,0(sp)
 4026b94:	dec00604 	addi	sp,sp,24
 4026b98:	f800283a 	ret
 4026b9c:	880d883a 	mov	r6,r17
 4026ba0:	880b883a 	mov	r5,r17
 4026ba4:	9809883a 	mov	r4,r19
 4026ba8:	40268e00 	call	40268e0 <__multiply>
 4026bac:	88800015 	stw	r2,0(r17)
 4026bb0:	10000015 	stw	zero,0(r2)
 4026bb4:	003fdd06 	br	4026b2c <__flash_rwdata_start+0xffff6650>
 4026bb8:	1025883a 	mov	r18,r2
 4026bbc:	003fd706 	br	4026b1c <__flash_rwdata_start+0xffff6640>
 4026bc0:	10bfffc4 	addi	r2,r2,-1
 4026bc4:	1085883a 	add	r2,r2,r2
 4026bc8:	00c00034 	movhi	r3,0
 4026bcc:	18c04f04 	addi	r3,r3,316
 4026bd0:	1085883a 	add	r2,r2,r2
 4026bd4:	1885883a 	add	r2,r3,r2
 4026bd8:	11800017 	ldw	r6,0(r2)
 4026bdc:	000f883a 	mov	r7,zero
 4026be0:	40265680 	call	4026568 <__multadd>
 4026be4:	1025883a 	mov	r18,r2
 4026be8:	003fc706 	br	4026b08 <__flash_rwdata_start+0xffff662c>
 4026bec:	05000044 	movi	r20,1
 4026bf0:	a00b883a 	mov	r5,r20
 4026bf4:	9809883a 	mov	r4,r19
 4026bf8:	40264980 	call	4026498 <_Balloc>
 4026bfc:	1023883a 	mov	r17,r2
 4026c00:	00809c44 	movi	r2,625
 4026c04:	88800515 	stw	r2,20(r17)
 4026c08:	8d000415 	stw	r20,16(r17)
 4026c0c:	9c401215 	stw	r17,72(r19)
 4026c10:	88000015 	stw	zero,0(r17)
 4026c14:	003fc606 	br	4026b30 <__flash_rwdata_start+0xffff6654>

04026c18 <__lshift>:
 4026c18:	defff904 	addi	sp,sp,-28
 4026c1c:	dd400515 	stw	r21,20(sp)
 4026c20:	dcc00315 	stw	r19,12(sp)
 4026c24:	302bd17a 	srai	r21,r6,5
 4026c28:	2cc00417 	ldw	r19,16(r5)
 4026c2c:	28800217 	ldw	r2,8(r5)
 4026c30:	dd000415 	stw	r20,16(sp)
 4026c34:	ace7883a 	add	r19,r21,r19
 4026c38:	dc800215 	stw	r18,8(sp)
 4026c3c:	dc400115 	stw	r17,4(sp)
 4026c40:	dc000015 	stw	r16,0(sp)
 4026c44:	dfc00615 	stw	ra,24(sp)
 4026c48:	9c000044 	addi	r16,r19,1
 4026c4c:	2823883a 	mov	r17,r5
 4026c50:	3029883a 	mov	r20,r6
 4026c54:	2025883a 	mov	r18,r4
 4026c58:	29400117 	ldw	r5,4(r5)
 4026c5c:	1400030e 	bge	r2,r16,4026c6c <__lshift+0x54>
 4026c60:	1085883a 	add	r2,r2,r2
 4026c64:	29400044 	addi	r5,r5,1
 4026c68:	143ffd16 	blt	r2,r16,4026c60 <__flash_rwdata_start+0xffff6784>
 4026c6c:	9009883a 	mov	r4,r18
 4026c70:	40264980 	call	4026498 <_Balloc>
 4026c74:	10c00504 	addi	r3,r2,20
 4026c78:	0540070e 	bge	zero,r21,4026c98 <__lshift+0x80>
 4026c7c:	ad6b883a 	add	r21,r21,r21
 4026c80:	ad6b883a 	add	r21,r21,r21
 4026c84:	1809883a 	mov	r4,r3
 4026c88:	1d47883a 	add	r3,r3,r21
 4026c8c:	20000015 	stw	zero,0(r4)
 4026c90:	21000104 	addi	r4,r4,4
 4026c94:	193ffd1e 	bne	r3,r4,4026c8c <__flash_rwdata_start+0xffff67b0>
 4026c98:	8a000417 	ldw	r8,16(r17)
 4026c9c:	89000504 	addi	r4,r17,20
 4026ca0:	a18007cc 	andi	r6,r20,31
 4026ca4:	4211883a 	add	r8,r8,r8
 4026ca8:	4211883a 	add	r8,r8,r8
 4026cac:	2211883a 	add	r8,r4,r8
 4026cb0:	30002326 	beq	r6,zero,4026d40 <__lshift+0x128>
 4026cb4:	02400804 	movi	r9,32
 4026cb8:	4993c83a 	sub	r9,r9,r6
 4026cbc:	000b883a 	mov	r5,zero
 4026cc0:	21c00017 	ldw	r7,0(r4)
 4026cc4:	1815883a 	mov	r10,r3
 4026cc8:	18c00104 	addi	r3,r3,4
 4026ccc:	398e983a 	sll	r7,r7,r6
 4026cd0:	21000104 	addi	r4,r4,4
 4026cd4:	394ab03a 	or	r5,r7,r5
 4026cd8:	197fff15 	stw	r5,-4(r3)
 4026cdc:	217fff17 	ldw	r5,-4(r4)
 4026ce0:	2a4ad83a 	srl	r5,r5,r9
 4026ce4:	223ff636 	bltu	r4,r8,4026cc0 <__flash_rwdata_start+0xffff67e4>
 4026ce8:	51400115 	stw	r5,4(r10)
 4026cec:	28001a1e 	bne	r5,zero,4026d58 <__lshift+0x140>
 4026cf0:	843fffc4 	addi	r16,r16,-1
 4026cf4:	14000415 	stw	r16,16(r2)
 4026cf8:	88000826 	beq	r17,zero,4026d1c <__lshift+0x104>
 4026cfc:	89000117 	ldw	r4,4(r17)
 4026d00:	90c01317 	ldw	r3,76(r18)
 4026d04:	2109883a 	add	r4,r4,r4
 4026d08:	2109883a 	add	r4,r4,r4
 4026d0c:	1907883a 	add	r3,r3,r4
 4026d10:	19000017 	ldw	r4,0(r3)
 4026d14:	89000015 	stw	r4,0(r17)
 4026d18:	1c400015 	stw	r17,0(r3)
 4026d1c:	dfc00617 	ldw	ra,24(sp)
 4026d20:	dd400517 	ldw	r21,20(sp)
 4026d24:	dd000417 	ldw	r20,16(sp)
 4026d28:	dcc00317 	ldw	r19,12(sp)
 4026d2c:	dc800217 	ldw	r18,8(sp)
 4026d30:	dc400117 	ldw	r17,4(sp)
 4026d34:	dc000017 	ldw	r16,0(sp)
 4026d38:	dec00704 	addi	sp,sp,28
 4026d3c:	f800283a 	ret
 4026d40:	21400017 	ldw	r5,0(r4)
 4026d44:	18c00104 	addi	r3,r3,4
 4026d48:	21000104 	addi	r4,r4,4
 4026d4c:	197fff15 	stw	r5,-4(r3)
 4026d50:	223ffb36 	bltu	r4,r8,4026d40 <__flash_rwdata_start+0xffff6864>
 4026d54:	003fe606 	br	4026cf0 <__flash_rwdata_start+0xffff6814>
 4026d58:	9c000084 	addi	r16,r19,2
 4026d5c:	003fe406 	br	4026cf0 <__flash_rwdata_start+0xffff6814>

04026d60 <__mcmp>:
 4026d60:	20800417 	ldw	r2,16(r4)
 4026d64:	28c00417 	ldw	r3,16(r5)
 4026d68:	10c5c83a 	sub	r2,r2,r3
 4026d6c:	1000111e 	bne	r2,zero,4026db4 <__mcmp+0x54>
 4026d70:	18c7883a 	add	r3,r3,r3
 4026d74:	18c7883a 	add	r3,r3,r3
 4026d78:	21000504 	addi	r4,r4,20
 4026d7c:	29400504 	addi	r5,r5,20
 4026d80:	20c5883a 	add	r2,r4,r3
 4026d84:	28cb883a 	add	r5,r5,r3
 4026d88:	00000106 	br	4026d90 <__mcmp+0x30>
 4026d8c:	20800a2e 	bgeu	r4,r2,4026db8 <__mcmp+0x58>
 4026d90:	10bfff04 	addi	r2,r2,-4
 4026d94:	297fff04 	addi	r5,r5,-4
 4026d98:	11800017 	ldw	r6,0(r2)
 4026d9c:	28c00017 	ldw	r3,0(r5)
 4026da0:	30fffa26 	beq	r6,r3,4026d8c <__flash_rwdata_start+0xffff68b0>
 4026da4:	30c00236 	bltu	r6,r3,4026db0 <__mcmp+0x50>
 4026da8:	00800044 	movi	r2,1
 4026dac:	f800283a 	ret
 4026db0:	00bfffc4 	movi	r2,-1
 4026db4:	f800283a 	ret
 4026db8:	0005883a 	mov	r2,zero
 4026dbc:	f800283a 	ret

04026dc0 <__mdiff>:
 4026dc0:	28c00417 	ldw	r3,16(r5)
 4026dc4:	30800417 	ldw	r2,16(r6)
 4026dc8:	defffa04 	addi	sp,sp,-24
 4026dcc:	dcc00315 	stw	r19,12(sp)
 4026dd0:	dc800215 	stw	r18,8(sp)
 4026dd4:	dfc00515 	stw	ra,20(sp)
 4026dd8:	dd000415 	stw	r20,16(sp)
 4026ddc:	dc400115 	stw	r17,4(sp)
 4026de0:	dc000015 	stw	r16,0(sp)
 4026de4:	1887c83a 	sub	r3,r3,r2
 4026de8:	2825883a 	mov	r18,r5
 4026dec:	3027883a 	mov	r19,r6
 4026df0:	1800141e 	bne	r3,zero,4026e44 <__mdiff+0x84>
 4026df4:	1085883a 	add	r2,r2,r2
 4026df8:	1085883a 	add	r2,r2,r2
 4026dfc:	2a000504 	addi	r8,r5,20
 4026e00:	34000504 	addi	r16,r6,20
 4026e04:	4087883a 	add	r3,r8,r2
 4026e08:	8085883a 	add	r2,r16,r2
 4026e0c:	00000106 	br	4026e14 <__mdiff+0x54>
 4026e10:	40c0592e 	bgeu	r8,r3,4026f78 <__mdiff+0x1b8>
 4026e14:	18ffff04 	addi	r3,r3,-4
 4026e18:	10bfff04 	addi	r2,r2,-4
 4026e1c:	19c00017 	ldw	r7,0(r3)
 4026e20:	11400017 	ldw	r5,0(r2)
 4026e24:	397ffa26 	beq	r7,r5,4026e10 <__flash_rwdata_start+0xffff6934>
 4026e28:	3940592e 	bgeu	r7,r5,4026f90 <__mdiff+0x1d0>
 4026e2c:	9005883a 	mov	r2,r18
 4026e30:	4023883a 	mov	r17,r8
 4026e34:	9825883a 	mov	r18,r19
 4026e38:	05000044 	movi	r20,1
 4026e3c:	1027883a 	mov	r19,r2
 4026e40:	00000406 	br	4026e54 <__mdiff+0x94>
 4026e44:	18005616 	blt	r3,zero,4026fa0 <__mdiff+0x1e0>
 4026e48:	34400504 	addi	r17,r6,20
 4026e4c:	2c000504 	addi	r16,r5,20
 4026e50:	0029883a 	mov	r20,zero
 4026e54:	91400117 	ldw	r5,4(r18)
 4026e58:	40264980 	call	4026498 <_Balloc>
 4026e5c:	92400417 	ldw	r9,16(r18)
 4026e60:	9b000417 	ldw	r12,16(r19)
 4026e64:	12c00504 	addi	r11,r2,20
 4026e68:	4a51883a 	add	r8,r9,r9
 4026e6c:	6319883a 	add	r12,r12,r12
 4026e70:	4211883a 	add	r8,r8,r8
 4026e74:	6319883a 	add	r12,r12,r12
 4026e78:	15000315 	stw	r20,12(r2)
 4026e7c:	8211883a 	add	r8,r16,r8
 4026e80:	8b19883a 	add	r12,r17,r12
 4026e84:	0007883a 	mov	r3,zero
 4026e88:	81400017 	ldw	r5,0(r16)
 4026e8c:	89c00017 	ldw	r7,0(r17)
 4026e90:	59800104 	addi	r6,r11,4
 4026e94:	293fffcc 	andi	r4,r5,65535
 4026e98:	20c7883a 	add	r3,r4,r3
 4026e9c:	393fffcc 	andi	r4,r7,65535
 4026ea0:	1909c83a 	sub	r4,r3,r4
 4026ea4:	280ad43a 	srli	r5,r5,16
 4026ea8:	380ed43a 	srli	r7,r7,16
 4026eac:	2007d43a 	srai	r3,r4,16
 4026eb0:	213fffcc 	andi	r4,r4,65535
 4026eb4:	29cbc83a 	sub	r5,r5,r7
 4026eb8:	28c7883a 	add	r3,r5,r3
 4026ebc:	180a943a 	slli	r5,r3,16
 4026ec0:	8c400104 	addi	r17,r17,4
 4026ec4:	84000104 	addi	r16,r16,4
 4026ec8:	2908b03a 	or	r4,r5,r4
 4026ecc:	59000015 	stw	r4,0(r11)
 4026ed0:	1807d43a 	srai	r3,r3,16
 4026ed4:	3015883a 	mov	r10,r6
 4026ed8:	3017883a 	mov	r11,r6
 4026edc:	8b3fea36 	bltu	r17,r12,4026e88 <__flash_rwdata_start+0xffff69ac>
 4026ee0:	8200162e 	bgeu	r16,r8,4026f3c <__mdiff+0x17c>
 4026ee4:	8017883a 	mov	r11,r16
 4026ee8:	59400017 	ldw	r5,0(r11)
 4026eec:	31800104 	addi	r6,r6,4
 4026ef0:	5ac00104 	addi	r11,r11,4
 4026ef4:	293fffcc 	andi	r4,r5,65535
 4026ef8:	20c7883a 	add	r3,r4,r3
 4026efc:	280ed43a 	srli	r7,r5,16
 4026f00:	180bd43a 	srai	r5,r3,16
 4026f04:	193fffcc 	andi	r4,r3,65535
 4026f08:	3947883a 	add	r3,r7,r5
 4026f0c:	180a943a 	slli	r5,r3,16
 4026f10:	1807d43a 	srai	r3,r3,16
 4026f14:	2908b03a 	or	r4,r5,r4
 4026f18:	313fff15 	stw	r4,-4(r6)
 4026f1c:	5a3ff236 	bltu	r11,r8,4026ee8 <__flash_rwdata_start+0xffff6a0c>
 4026f20:	0406303a 	nor	r3,zero,r16
 4026f24:	1a07883a 	add	r3,r3,r8
 4026f28:	1806d0ba 	srli	r3,r3,2
 4026f2c:	18c00044 	addi	r3,r3,1
 4026f30:	18c7883a 	add	r3,r3,r3
 4026f34:	18c7883a 	add	r3,r3,r3
 4026f38:	50d5883a 	add	r10,r10,r3
 4026f3c:	50ffff04 	addi	r3,r10,-4
 4026f40:	2000041e 	bne	r4,zero,4026f54 <__mdiff+0x194>
 4026f44:	18ffff04 	addi	r3,r3,-4
 4026f48:	19000017 	ldw	r4,0(r3)
 4026f4c:	4a7fffc4 	addi	r9,r9,-1
 4026f50:	203ffc26 	beq	r4,zero,4026f44 <__flash_rwdata_start+0xffff6a68>
 4026f54:	12400415 	stw	r9,16(r2)
 4026f58:	dfc00517 	ldw	ra,20(sp)
 4026f5c:	dd000417 	ldw	r20,16(sp)
 4026f60:	dcc00317 	ldw	r19,12(sp)
 4026f64:	dc800217 	ldw	r18,8(sp)
 4026f68:	dc400117 	ldw	r17,4(sp)
 4026f6c:	dc000017 	ldw	r16,0(sp)
 4026f70:	dec00604 	addi	sp,sp,24
 4026f74:	f800283a 	ret
 4026f78:	000b883a 	mov	r5,zero
 4026f7c:	40264980 	call	4026498 <_Balloc>
 4026f80:	00c00044 	movi	r3,1
 4026f84:	10c00415 	stw	r3,16(r2)
 4026f88:	10000515 	stw	zero,20(r2)
 4026f8c:	003ff206 	br	4026f58 <__flash_rwdata_start+0xffff6a7c>
 4026f90:	8023883a 	mov	r17,r16
 4026f94:	0029883a 	mov	r20,zero
 4026f98:	4021883a 	mov	r16,r8
 4026f9c:	003fad06 	br	4026e54 <__flash_rwdata_start+0xffff6978>
 4026fa0:	9005883a 	mov	r2,r18
 4026fa4:	94400504 	addi	r17,r18,20
 4026fa8:	9c000504 	addi	r16,r19,20
 4026fac:	9825883a 	mov	r18,r19
 4026fb0:	05000044 	movi	r20,1
 4026fb4:	1027883a 	mov	r19,r2
 4026fb8:	003fa606 	br	4026e54 <__flash_rwdata_start+0xffff6978>

04026fbc <__ulp>:
 4026fbc:	295ffc2c 	andhi	r5,r5,32752
 4026fc0:	00bf3034 	movhi	r2,64704
 4026fc4:	2887883a 	add	r3,r5,r2
 4026fc8:	00c0020e 	bge	zero,r3,4026fd4 <__ulp+0x18>
 4026fcc:	0005883a 	mov	r2,zero
 4026fd0:	f800283a 	ret
 4026fd4:	00c7c83a 	sub	r3,zero,r3
 4026fd8:	1807d53a 	srai	r3,r3,20
 4026fdc:	008004c4 	movi	r2,19
 4026fe0:	10c00b0e 	bge	r2,r3,4027010 <__ulp+0x54>
 4026fe4:	18bffb04 	addi	r2,r3,-20
 4026fe8:	01000784 	movi	r4,30
 4026fec:	0007883a 	mov	r3,zero
 4026ff0:	20800516 	blt	r4,r2,4027008 <__ulp+0x4c>
 4026ff4:	010007c4 	movi	r4,31
 4026ff8:	2089c83a 	sub	r4,r4,r2
 4026ffc:	00800044 	movi	r2,1
 4027000:	1104983a 	sll	r2,r2,r4
 4027004:	f800283a 	ret
 4027008:	00800044 	movi	r2,1
 402700c:	f800283a 	ret
 4027010:	01400234 	movhi	r5,8
 4027014:	28c7d83a 	sra	r3,r5,r3
 4027018:	0005883a 	mov	r2,zero
 402701c:	f800283a 	ret

04027020 <__b2d>:
 4027020:	defffa04 	addi	sp,sp,-24
 4027024:	dc000015 	stw	r16,0(sp)
 4027028:	24000417 	ldw	r16,16(r4)
 402702c:	dc400115 	stw	r17,4(sp)
 4027030:	24400504 	addi	r17,r4,20
 4027034:	8421883a 	add	r16,r16,r16
 4027038:	8421883a 	add	r16,r16,r16
 402703c:	8c21883a 	add	r16,r17,r16
 4027040:	dc800215 	stw	r18,8(sp)
 4027044:	84bfff17 	ldw	r18,-4(r16)
 4027048:	dd000415 	stw	r20,16(sp)
 402704c:	dcc00315 	stw	r19,12(sp)
 4027050:	9009883a 	mov	r4,r18
 4027054:	2829883a 	mov	r20,r5
 4027058:	dfc00515 	stw	ra,20(sp)
 402705c:	402678c0 	call	402678c <__hi0bits>
 4027060:	00c00804 	movi	r3,32
 4027064:	1889c83a 	sub	r4,r3,r2
 4027068:	a1000015 	stw	r4,0(r20)
 402706c:	01000284 	movi	r4,10
 4027070:	84ffff04 	addi	r19,r16,-4
 4027074:	20801216 	blt	r4,r2,40270c0 <__b2d+0xa0>
 4027078:	018002c4 	movi	r6,11
 402707c:	308dc83a 	sub	r6,r6,r2
 4027080:	9186d83a 	srl	r3,r18,r6
 4027084:	18cffc34 	orhi	r3,r3,16368
 4027088:	8cc0212e 	bgeu	r17,r19,4027110 <__b2d+0xf0>
 402708c:	813ffe17 	ldw	r4,-8(r16)
 4027090:	218cd83a 	srl	r6,r4,r6
 4027094:	10800544 	addi	r2,r2,21
 4027098:	9084983a 	sll	r2,r18,r2
 402709c:	1184b03a 	or	r2,r2,r6
 40270a0:	dfc00517 	ldw	ra,20(sp)
 40270a4:	dd000417 	ldw	r20,16(sp)
 40270a8:	dcc00317 	ldw	r19,12(sp)
 40270ac:	dc800217 	ldw	r18,8(sp)
 40270b0:	dc400117 	ldw	r17,4(sp)
 40270b4:	dc000017 	ldw	r16,0(sp)
 40270b8:	dec00604 	addi	sp,sp,24
 40270bc:	f800283a 	ret
 40270c0:	8cc00f2e 	bgeu	r17,r19,4027100 <__b2d+0xe0>
 40270c4:	117ffd44 	addi	r5,r2,-11
 40270c8:	80bffe17 	ldw	r2,-8(r16)
 40270cc:	28000e26 	beq	r5,zero,4027108 <__b2d+0xe8>
 40270d0:	1949c83a 	sub	r4,r3,r5
 40270d4:	9164983a 	sll	r18,r18,r5
 40270d8:	1106d83a 	srl	r3,r2,r4
 40270dc:	81bffe04 	addi	r6,r16,-8
 40270e0:	948ffc34 	orhi	r18,r18,16368
 40270e4:	90c6b03a 	or	r3,r18,r3
 40270e8:	89800e2e 	bgeu	r17,r6,4027124 <__b2d+0x104>
 40270ec:	81bffd17 	ldw	r6,-12(r16)
 40270f0:	1144983a 	sll	r2,r2,r5
 40270f4:	310ad83a 	srl	r5,r6,r4
 40270f8:	2884b03a 	or	r2,r5,r2
 40270fc:	003fe806 	br	40270a0 <__flash_rwdata_start+0xffff6bc4>
 4027100:	10bffd44 	addi	r2,r2,-11
 4027104:	1000041e 	bne	r2,zero,4027118 <__b2d+0xf8>
 4027108:	90cffc34 	orhi	r3,r18,16368
 402710c:	003fe406 	br	40270a0 <__flash_rwdata_start+0xffff6bc4>
 4027110:	000d883a 	mov	r6,zero
 4027114:	003fdf06 	br	4027094 <__flash_rwdata_start+0xffff6bb8>
 4027118:	90a4983a 	sll	r18,r18,r2
 402711c:	0005883a 	mov	r2,zero
 4027120:	003ff906 	br	4027108 <__flash_rwdata_start+0xffff6c2c>
 4027124:	1144983a 	sll	r2,r2,r5
 4027128:	003fdd06 	br	40270a0 <__flash_rwdata_start+0xffff6bc4>

0402712c <__d2b>:
 402712c:	defff804 	addi	sp,sp,-32
 4027130:	dc000215 	stw	r16,8(sp)
 4027134:	3021883a 	mov	r16,r6
 4027138:	dc400315 	stw	r17,12(sp)
 402713c:	8022907a 	slli	r17,r16,1
 4027140:	dd000615 	stw	r20,24(sp)
 4027144:	2829883a 	mov	r20,r5
 4027148:	01400044 	movi	r5,1
 402714c:	dcc00515 	stw	r19,20(sp)
 4027150:	dc800415 	stw	r18,16(sp)
 4027154:	dfc00715 	stw	ra,28(sp)
 4027158:	3825883a 	mov	r18,r7
 402715c:	8822d57a 	srli	r17,r17,21
 4027160:	40264980 	call	4026498 <_Balloc>
 4027164:	1027883a 	mov	r19,r2
 4027168:	00800434 	movhi	r2,16
 402716c:	10bfffc4 	addi	r2,r2,-1
 4027170:	808c703a 	and	r6,r16,r2
 4027174:	88000126 	beq	r17,zero,402717c <__d2b+0x50>
 4027178:	31800434 	orhi	r6,r6,16
 402717c:	d9800015 	stw	r6,0(sp)
 4027180:	a0002426 	beq	r20,zero,4027214 <__d2b+0xe8>
 4027184:	d9000104 	addi	r4,sp,4
 4027188:	dd000115 	stw	r20,4(sp)
 402718c:	40267f40 	call	40267f4 <__lo0bits>
 4027190:	d8c00017 	ldw	r3,0(sp)
 4027194:	10002f1e 	bne	r2,zero,4027254 <__d2b+0x128>
 4027198:	d9000117 	ldw	r4,4(sp)
 402719c:	99000515 	stw	r4,20(r19)
 40271a0:	1821003a 	cmpeq	r16,r3,zero
 40271a4:	01000084 	movi	r4,2
 40271a8:	2421c83a 	sub	r16,r4,r16
 40271ac:	98c00615 	stw	r3,24(r19)
 40271b0:	9c000415 	stw	r16,16(r19)
 40271b4:	88001f1e 	bne	r17,zero,4027234 <__d2b+0x108>
 40271b8:	10bef384 	addi	r2,r2,-1074
 40271bc:	90800015 	stw	r2,0(r18)
 40271c0:	00900034 	movhi	r2,16384
 40271c4:	10bfffc4 	addi	r2,r2,-1
 40271c8:	8085883a 	add	r2,r16,r2
 40271cc:	1085883a 	add	r2,r2,r2
 40271d0:	1085883a 	add	r2,r2,r2
 40271d4:	9885883a 	add	r2,r19,r2
 40271d8:	11000517 	ldw	r4,20(r2)
 40271dc:	8020917a 	slli	r16,r16,5
 40271e0:	402678c0 	call	402678c <__hi0bits>
 40271e4:	d8c00817 	ldw	r3,32(sp)
 40271e8:	8085c83a 	sub	r2,r16,r2
 40271ec:	18800015 	stw	r2,0(r3)
 40271f0:	9805883a 	mov	r2,r19
 40271f4:	dfc00717 	ldw	ra,28(sp)
 40271f8:	dd000617 	ldw	r20,24(sp)
 40271fc:	dcc00517 	ldw	r19,20(sp)
 4027200:	dc800417 	ldw	r18,16(sp)
 4027204:	dc400317 	ldw	r17,12(sp)
 4027208:	dc000217 	ldw	r16,8(sp)
 402720c:	dec00804 	addi	sp,sp,32
 4027210:	f800283a 	ret
 4027214:	d809883a 	mov	r4,sp
 4027218:	40267f40 	call	40267f4 <__lo0bits>
 402721c:	d8c00017 	ldw	r3,0(sp)
 4027220:	04000044 	movi	r16,1
 4027224:	9c000415 	stw	r16,16(r19)
 4027228:	98c00515 	stw	r3,20(r19)
 402722c:	10800804 	addi	r2,r2,32
 4027230:	883fe126 	beq	r17,zero,40271b8 <__flash_rwdata_start+0xffff6cdc>
 4027234:	00c00d44 	movi	r3,53
 4027238:	8c7ef344 	addi	r17,r17,-1075
 402723c:	88a3883a 	add	r17,r17,r2
 4027240:	1885c83a 	sub	r2,r3,r2
 4027244:	d8c00817 	ldw	r3,32(sp)
 4027248:	94400015 	stw	r17,0(r18)
 402724c:	18800015 	stw	r2,0(r3)
 4027250:	003fe706 	br	40271f0 <__flash_rwdata_start+0xffff6d14>
 4027254:	01000804 	movi	r4,32
 4027258:	2089c83a 	sub	r4,r4,r2
 402725c:	1908983a 	sll	r4,r3,r4
 4027260:	d9400117 	ldw	r5,4(sp)
 4027264:	1886d83a 	srl	r3,r3,r2
 4027268:	2148b03a 	or	r4,r4,r5
 402726c:	99000515 	stw	r4,20(r19)
 4027270:	d8c00015 	stw	r3,0(sp)
 4027274:	003fca06 	br	40271a0 <__flash_rwdata_start+0xffff6cc4>

04027278 <__ratio>:
 4027278:	defff904 	addi	sp,sp,-28
 402727c:	dc400315 	stw	r17,12(sp)
 4027280:	2823883a 	mov	r17,r5
 4027284:	d9400104 	addi	r5,sp,4
 4027288:	dfc00615 	stw	ra,24(sp)
 402728c:	dcc00515 	stw	r19,20(sp)
 4027290:	dc800415 	stw	r18,16(sp)
 4027294:	2027883a 	mov	r19,r4
 4027298:	dc000215 	stw	r16,8(sp)
 402729c:	40270200 	call	4027020 <__b2d>
 40272a0:	d80b883a 	mov	r5,sp
 40272a4:	8809883a 	mov	r4,r17
 40272a8:	1025883a 	mov	r18,r2
 40272ac:	1821883a 	mov	r16,r3
 40272b0:	40270200 	call	4027020 <__b2d>
 40272b4:	8a000417 	ldw	r8,16(r17)
 40272b8:	99000417 	ldw	r4,16(r19)
 40272bc:	d9400117 	ldw	r5,4(sp)
 40272c0:	2209c83a 	sub	r4,r4,r8
 40272c4:	2010917a 	slli	r8,r4,5
 40272c8:	d9000017 	ldw	r4,0(sp)
 40272cc:	2909c83a 	sub	r4,r5,r4
 40272d0:	4109883a 	add	r4,r8,r4
 40272d4:	01000e0e 	bge	zero,r4,4027310 <__ratio+0x98>
 40272d8:	2008953a 	slli	r4,r4,20
 40272dc:	2421883a 	add	r16,r4,r16
 40272e0:	100d883a 	mov	r6,r2
 40272e4:	180f883a 	mov	r7,r3
 40272e8:	9009883a 	mov	r4,r18
 40272ec:	800b883a 	mov	r5,r16
 40272f0:	402b1640 	call	402b164 <__divdf3>
 40272f4:	dfc00617 	ldw	ra,24(sp)
 40272f8:	dcc00517 	ldw	r19,20(sp)
 40272fc:	dc800417 	ldw	r18,16(sp)
 4027300:	dc400317 	ldw	r17,12(sp)
 4027304:	dc000217 	ldw	r16,8(sp)
 4027308:	dec00704 	addi	sp,sp,28
 402730c:	f800283a 	ret
 4027310:	2008953a 	slli	r4,r4,20
 4027314:	1907c83a 	sub	r3,r3,r4
 4027318:	003ff106 	br	40272e0 <__flash_rwdata_start+0xffff6e04>

0402731c <_mprec_log10>:
 402731c:	defffe04 	addi	sp,sp,-8
 4027320:	dc000015 	stw	r16,0(sp)
 4027324:	dfc00115 	stw	ra,4(sp)
 4027328:	008005c4 	movi	r2,23
 402732c:	2021883a 	mov	r16,r4
 4027330:	11000d0e 	bge	r2,r4,4027368 <_mprec_log10+0x4c>
 4027334:	0005883a 	mov	r2,zero
 4027338:	00cffc34 	movhi	r3,16368
 402733c:	843fffc4 	addi	r16,r16,-1
 4027340:	000d883a 	mov	r6,zero
 4027344:	01d00934 	movhi	r7,16420
 4027348:	1009883a 	mov	r4,r2
 402734c:	180b883a 	mov	r5,r3
 4027350:	402bca40 	call	402bca4 <__muldf3>
 4027354:	803ff91e 	bne	r16,zero,402733c <__flash_rwdata_start+0xffff6e60>
 4027358:	dfc00117 	ldw	ra,4(sp)
 402735c:	dc000017 	ldw	r16,0(sp)
 4027360:	dec00204 	addi	sp,sp,8
 4027364:	f800283a 	ret
 4027368:	202090fa 	slli	r16,r4,3
 402736c:	00800034 	movhi	r2,0
 4027370:	10806604 	addi	r2,r2,408
 4027374:	1421883a 	add	r16,r2,r16
 4027378:	80800017 	ldw	r2,0(r16)
 402737c:	80c00117 	ldw	r3,4(r16)
 4027380:	dfc00117 	ldw	ra,4(sp)
 4027384:	dc000017 	ldw	r16,0(sp)
 4027388:	dec00204 	addi	sp,sp,8
 402738c:	f800283a 	ret

04027390 <__copybits>:
 4027390:	297fffc4 	addi	r5,r5,-1
 4027394:	280fd17a 	srai	r7,r5,5
 4027398:	30c00417 	ldw	r3,16(r6)
 402739c:	30800504 	addi	r2,r6,20
 40273a0:	39c00044 	addi	r7,r7,1
 40273a4:	18c7883a 	add	r3,r3,r3
 40273a8:	39cf883a 	add	r7,r7,r7
 40273ac:	18c7883a 	add	r3,r3,r3
 40273b0:	39cf883a 	add	r7,r7,r7
 40273b4:	10c7883a 	add	r3,r2,r3
 40273b8:	21cf883a 	add	r7,r4,r7
 40273bc:	10c00d2e 	bgeu	r2,r3,40273f4 <__copybits+0x64>
 40273c0:	200b883a 	mov	r5,r4
 40273c4:	12000017 	ldw	r8,0(r2)
 40273c8:	29400104 	addi	r5,r5,4
 40273cc:	10800104 	addi	r2,r2,4
 40273d0:	2a3fff15 	stw	r8,-4(r5)
 40273d4:	10fffb36 	bltu	r2,r3,40273c4 <__flash_rwdata_start+0xffff6ee8>
 40273d8:	1985c83a 	sub	r2,r3,r6
 40273dc:	10bffac4 	addi	r2,r2,-21
 40273e0:	1004d0ba 	srli	r2,r2,2
 40273e4:	10800044 	addi	r2,r2,1
 40273e8:	1085883a 	add	r2,r2,r2
 40273ec:	1085883a 	add	r2,r2,r2
 40273f0:	2089883a 	add	r4,r4,r2
 40273f4:	21c0032e 	bgeu	r4,r7,4027404 <__copybits+0x74>
 40273f8:	20000015 	stw	zero,0(r4)
 40273fc:	21000104 	addi	r4,r4,4
 4027400:	21fffd36 	bltu	r4,r7,40273f8 <__flash_rwdata_start+0xffff6f1c>
 4027404:	f800283a 	ret

04027408 <__any_on>:
 4027408:	20c00417 	ldw	r3,16(r4)
 402740c:	2805d17a 	srai	r2,r5,5
 4027410:	21000504 	addi	r4,r4,20
 4027414:	18800d0e 	bge	r3,r2,402744c <__any_on+0x44>
 4027418:	18c7883a 	add	r3,r3,r3
 402741c:	18c7883a 	add	r3,r3,r3
 4027420:	20c7883a 	add	r3,r4,r3
 4027424:	20c0192e 	bgeu	r4,r3,402748c <__any_on+0x84>
 4027428:	18bfff17 	ldw	r2,-4(r3)
 402742c:	18ffff04 	addi	r3,r3,-4
 4027430:	1000041e 	bne	r2,zero,4027444 <__any_on+0x3c>
 4027434:	20c0142e 	bgeu	r4,r3,4027488 <__any_on+0x80>
 4027438:	18ffff04 	addi	r3,r3,-4
 402743c:	19400017 	ldw	r5,0(r3)
 4027440:	283ffc26 	beq	r5,zero,4027434 <__flash_rwdata_start+0xffff6f58>
 4027444:	00800044 	movi	r2,1
 4027448:	f800283a 	ret
 402744c:	10c00a0e 	bge	r2,r3,4027478 <__any_on+0x70>
 4027450:	1085883a 	add	r2,r2,r2
 4027454:	1085883a 	add	r2,r2,r2
 4027458:	294007cc 	andi	r5,r5,31
 402745c:	2087883a 	add	r3,r4,r2
 4027460:	283ff026 	beq	r5,zero,4027424 <__flash_rwdata_start+0xffff6f48>
 4027464:	19800017 	ldw	r6,0(r3)
 4027468:	3144d83a 	srl	r2,r6,r5
 402746c:	114a983a 	sll	r5,r2,r5
 4027470:	317ff41e 	bne	r6,r5,4027444 <__flash_rwdata_start+0xffff6f68>
 4027474:	003feb06 	br	4027424 <__flash_rwdata_start+0xffff6f48>
 4027478:	1085883a 	add	r2,r2,r2
 402747c:	1085883a 	add	r2,r2,r2
 4027480:	2087883a 	add	r3,r4,r2
 4027484:	003fe706 	br	4027424 <__flash_rwdata_start+0xffff6f48>
 4027488:	f800283a 	ret
 402748c:	0005883a 	mov	r2,zero
 4027490:	f800283a 	ret

04027494 <_realloc_r>:
 4027494:	defff604 	addi	sp,sp,-40
 4027498:	dc800215 	stw	r18,8(sp)
 402749c:	dfc00915 	stw	ra,36(sp)
 40274a0:	df000815 	stw	fp,32(sp)
 40274a4:	ddc00715 	stw	r23,28(sp)
 40274a8:	dd800615 	stw	r22,24(sp)
 40274ac:	dd400515 	stw	r21,20(sp)
 40274b0:	dd000415 	stw	r20,16(sp)
 40274b4:	dcc00315 	stw	r19,12(sp)
 40274b8:	dc400115 	stw	r17,4(sp)
 40274bc:	dc000015 	stw	r16,0(sp)
 40274c0:	3025883a 	mov	r18,r6
 40274c4:	2800b726 	beq	r5,zero,40277a4 <_realloc_r+0x310>
 40274c8:	282b883a 	mov	r21,r5
 40274cc:	2029883a 	mov	r20,r4
 40274d0:	402d7840 	call	402d784 <__malloc_lock>
 40274d4:	a8bfff17 	ldw	r2,-4(r21)
 40274d8:	043fff04 	movi	r16,-4
 40274dc:	90c002c4 	addi	r3,r18,11
 40274e0:	01000584 	movi	r4,22
 40274e4:	acfffe04 	addi	r19,r21,-8
 40274e8:	1420703a 	and	r16,r2,r16
 40274ec:	20c0332e 	bgeu	r4,r3,40275bc <_realloc_r+0x128>
 40274f0:	047ffe04 	movi	r17,-8
 40274f4:	1c62703a 	and	r17,r3,r17
 40274f8:	8807883a 	mov	r3,r17
 40274fc:	88005816 	blt	r17,zero,4027660 <_realloc_r+0x1cc>
 4027500:	8c805736 	bltu	r17,r18,4027660 <_realloc_r+0x1cc>
 4027504:	80c0300e 	bge	r16,r3,40275c8 <_realloc_r+0x134>
 4027508:	07000034 	movhi	fp,0
 402750c:	e7022604 	addi	fp,fp,2200
 4027510:	e1c00217 	ldw	r7,8(fp)
 4027514:	9c09883a 	add	r4,r19,r16
 4027518:	22000117 	ldw	r8,4(r4)
 402751c:	21c06326 	beq	r4,r7,40276ac <_realloc_r+0x218>
 4027520:	017fff84 	movi	r5,-2
 4027524:	414a703a 	and	r5,r8,r5
 4027528:	214b883a 	add	r5,r4,r5
 402752c:	29800117 	ldw	r6,4(r5)
 4027530:	3180004c 	andi	r6,r6,1
 4027534:	30003f26 	beq	r6,zero,4027634 <_realloc_r+0x1a0>
 4027538:	1080004c 	andi	r2,r2,1
 402753c:	10008326 	beq	r2,zero,402774c <_realloc_r+0x2b8>
 4027540:	900b883a 	mov	r5,r18
 4027544:	a009883a 	mov	r4,r20
 4027548:	40257dc0 	call	40257dc <_malloc_r>
 402754c:	1025883a 	mov	r18,r2
 4027550:	10011e26 	beq	r2,zero,40279cc <_realloc_r+0x538>
 4027554:	a93fff17 	ldw	r4,-4(r21)
 4027558:	10fffe04 	addi	r3,r2,-8
 402755c:	00bfff84 	movi	r2,-2
 4027560:	2084703a 	and	r2,r4,r2
 4027564:	9885883a 	add	r2,r19,r2
 4027568:	1880ee26 	beq	r3,r2,4027924 <_realloc_r+0x490>
 402756c:	81bfff04 	addi	r6,r16,-4
 4027570:	00800904 	movi	r2,36
 4027574:	1180b836 	bltu	r2,r6,4027858 <_realloc_r+0x3c4>
 4027578:	00c004c4 	movi	r3,19
 402757c:	19809636 	bltu	r3,r6,40277d8 <_realloc_r+0x344>
 4027580:	9005883a 	mov	r2,r18
 4027584:	a807883a 	mov	r3,r21
 4027588:	19000017 	ldw	r4,0(r3)
 402758c:	11000015 	stw	r4,0(r2)
 4027590:	19000117 	ldw	r4,4(r3)
 4027594:	11000115 	stw	r4,4(r2)
 4027598:	18c00217 	ldw	r3,8(r3)
 402759c:	10c00215 	stw	r3,8(r2)
 40275a0:	a80b883a 	mov	r5,r21
 40275a4:	a009883a 	mov	r4,r20
 40275a8:	4024bf00 	call	4024bf0 <_free_r>
 40275ac:	a009883a 	mov	r4,r20
 40275b0:	402d7a80 	call	402d7a8 <__malloc_unlock>
 40275b4:	9005883a 	mov	r2,r18
 40275b8:	00001206 	br	4027604 <_realloc_r+0x170>
 40275bc:	00c00404 	movi	r3,16
 40275c0:	1823883a 	mov	r17,r3
 40275c4:	003fce06 	br	4027500 <__flash_rwdata_start+0xffff7024>
 40275c8:	a825883a 	mov	r18,r21
 40275cc:	8445c83a 	sub	r2,r16,r17
 40275d0:	00c003c4 	movi	r3,15
 40275d4:	18802636 	bltu	r3,r2,4027670 <_realloc_r+0x1dc>
 40275d8:	99800117 	ldw	r6,4(r19)
 40275dc:	9c07883a 	add	r3,r19,r16
 40275e0:	3180004c 	andi	r6,r6,1
 40275e4:	3420b03a 	or	r16,r6,r16
 40275e8:	9c000115 	stw	r16,4(r19)
 40275ec:	18800117 	ldw	r2,4(r3)
 40275f0:	10800054 	ori	r2,r2,1
 40275f4:	18800115 	stw	r2,4(r3)
 40275f8:	a009883a 	mov	r4,r20
 40275fc:	402d7a80 	call	402d7a8 <__malloc_unlock>
 4027600:	9005883a 	mov	r2,r18
 4027604:	dfc00917 	ldw	ra,36(sp)
 4027608:	df000817 	ldw	fp,32(sp)
 402760c:	ddc00717 	ldw	r23,28(sp)
 4027610:	dd800617 	ldw	r22,24(sp)
 4027614:	dd400517 	ldw	r21,20(sp)
 4027618:	dd000417 	ldw	r20,16(sp)
 402761c:	dcc00317 	ldw	r19,12(sp)
 4027620:	dc800217 	ldw	r18,8(sp)
 4027624:	dc400117 	ldw	r17,4(sp)
 4027628:	dc000017 	ldw	r16,0(sp)
 402762c:	dec00a04 	addi	sp,sp,40
 4027630:	f800283a 	ret
 4027634:	017fff04 	movi	r5,-4
 4027638:	414a703a 	and	r5,r8,r5
 402763c:	814d883a 	add	r6,r16,r5
 4027640:	30c01f16 	blt	r6,r3,40276c0 <_realloc_r+0x22c>
 4027644:	20800317 	ldw	r2,12(r4)
 4027648:	20c00217 	ldw	r3,8(r4)
 402764c:	a825883a 	mov	r18,r21
 4027650:	3021883a 	mov	r16,r6
 4027654:	18800315 	stw	r2,12(r3)
 4027658:	10c00215 	stw	r3,8(r2)
 402765c:	003fdb06 	br	40275cc <__flash_rwdata_start+0xffff70f0>
 4027660:	00800304 	movi	r2,12
 4027664:	a0800015 	stw	r2,0(r20)
 4027668:	0005883a 	mov	r2,zero
 402766c:	003fe506 	br	4027604 <__flash_rwdata_start+0xffff7128>
 4027670:	98c00117 	ldw	r3,4(r19)
 4027674:	9c4b883a 	add	r5,r19,r17
 4027678:	11000054 	ori	r4,r2,1
 402767c:	18c0004c 	andi	r3,r3,1
 4027680:	1c62b03a 	or	r17,r3,r17
 4027684:	9c400115 	stw	r17,4(r19)
 4027688:	29000115 	stw	r4,4(r5)
 402768c:	2885883a 	add	r2,r5,r2
 4027690:	10c00117 	ldw	r3,4(r2)
 4027694:	29400204 	addi	r5,r5,8
 4027698:	a009883a 	mov	r4,r20
 402769c:	18c00054 	ori	r3,r3,1
 40276a0:	10c00115 	stw	r3,4(r2)
 40276a4:	4024bf00 	call	4024bf0 <_free_r>
 40276a8:	003fd306 	br	40275f8 <__flash_rwdata_start+0xffff711c>
 40276ac:	017fff04 	movi	r5,-4
 40276b0:	414a703a 	and	r5,r8,r5
 40276b4:	89800404 	addi	r6,r17,16
 40276b8:	8151883a 	add	r8,r16,r5
 40276bc:	4180590e 	bge	r8,r6,4027824 <_realloc_r+0x390>
 40276c0:	1080004c 	andi	r2,r2,1
 40276c4:	103f9e1e 	bne	r2,zero,4027540 <__flash_rwdata_start+0xffff7064>
 40276c8:	adbffe17 	ldw	r22,-8(r21)
 40276cc:	00bfff04 	movi	r2,-4
 40276d0:	9dadc83a 	sub	r22,r19,r22
 40276d4:	b1800117 	ldw	r6,4(r22)
 40276d8:	3084703a 	and	r2,r6,r2
 40276dc:	20002026 	beq	r4,zero,4027760 <_realloc_r+0x2cc>
 40276e0:	80af883a 	add	r23,r16,r2
 40276e4:	b96f883a 	add	r23,r23,r5
 40276e8:	21c05f26 	beq	r4,r7,4027868 <_realloc_r+0x3d4>
 40276ec:	b8c01c16 	blt	r23,r3,4027760 <_realloc_r+0x2cc>
 40276f0:	20800317 	ldw	r2,12(r4)
 40276f4:	20c00217 	ldw	r3,8(r4)
 40276f8:	81bfff04 	addi	r6,r16,-4
 40276fc:	01000904 	movi	r4,36
 4027700:	18800315 	stw	r2,12(r3)
 4027704:	10c00215 	stw	r3,8(r2)
 4027708:	b0c00217 	ldw	r3,8(r22)
 402770c:	b0800317 	ldw	r2,12(r22)
 4027710:	b4800204 	addi	r18,r22,8
 4027714:	18800315 	stw	r2,12(r3)
 4027718:	10c00215 	stw	r3,8(r2)
 402771c:	21801b36 	bltu	r4,r6,402778c <_realloc_r+0x2f8>
 4027720:	008004c4 	movi	r2,19
 4027724:	1180352e 	bgeu	r2,r6,40277fc <_realloc_r+0x368>
 4027728:	a8800017 	ldw	r2,0(r21)
 402772c:	b0800215 	stw	r2,8(r22)
 4027730:	a8800117 	ldw	r2,4(r21)
 4027734:	b0800315 	stw	r2,12(r22)
 4027738:	008006c4 	movi	r2,27
 402773c:	11807f36 	bltu	r2,r6,402793c <_realloc_r+0x4a8>
 4027740:	b0800404 	addi	r2,r22,16
 4027744:	ad400204 	addi	r21,r21,8
 4027748:	00002d06 	br	4027800 <_realloc_r+0x36c>
 402774c:	adbffe17 	ldw	r22,-8(r21)
 4027750:	00bfff04 	movi	r2,-4
 4027754:	9dadc83a 	sub	r22,r19,r22
 4027758:	b1000117 	ldw	r4,4(r22)
 402775c:	2084703a 	and	r2,r4,r2
 4027760:	b03f7726 	beq	r22,zero,4027540 <__flash_rwdata_start+0xffff7064>
 4027764:	80af883a 	add	r23,r16,r2
 4027768:	b8ff7516 	blt	r23,r3,4027540 <__flash_rwdata_start+0xffff7064>
 402776c:	b0800317 	ldw	r2,12(r22)
 4027770:	b0c00217 	ldw	r3,8(r22)
 4027774:	81bfff04 	addi	r6,r16,-4
 4027778:	01000904 	movi	r4,36
 402777c:	18800315 	stw	r2,12(r3)
 4027780:	10c00215 	stw	r3,8(r2)
 4027784:	b4800204 	addi	r18,r22,8
 4027788:	21bfe52e 	bgeu	r4,r6,4027720 <__flash_rwdata_start+0xffff7244>
 402778c:	a80b883a 	mov	r5,r21
 4027790:	9009883a 	mov	r4,r18
 4027794:	40262140 	call	4026214 <memmove>
 4027798:	b821883a 	mov	r16,r23
 402779c:	b027883a 	mov	r19,r22
 40277a0:	003f8a06 	br	40275cc <__flash_rwdata_start+0xffff70f0>
 40277a4:	300b883a 	mov	r5,r6
 40277a8:	dfc00917 	ldw	ra,36(sp)
 40277ac:	df000817 	ldw	fp,32(sp)
 40277b0:	ddc00717 	ldw	r23,28(sp)
 40277b4:	dd800617 	ldw	r22,24(sp)
 40277b8:	dd400517 	ldw	r21,20(sp)
 40277bc:	dd000417 	ldw	r20,16(sp)
 40277c0:	dcc00317 	ldw	r19,12(sp)
 40277c4:	dc800217 	ldw	r18,8(sp)
 40277c8:	dc400117 	ldw	r17,4(sp)
 40277cc:	dc000017 	ldw	r16,0(sp)
 40277d0:	dec00a04 	addi	sp,sp,40
 40277d4:	40257dc1 	jmpi	40257dc <_malloc_r>
 40277d8:	a8c00017 	ldw	r3,0(r21)
 40277dc:	90c00015 	stw	r3,0(r18)
 40277e0:	a8c00117 	ldw	r3,4(r21)
 40277e4:	90c00115 	stw	r3,4(r18)
 40277e8:	00c006c4 	movi	r3,27
 40277ec:	19804536 	bltu	r3,r6,4027904 <_realloc_r+0x470>
 40277f0:	90800204 	addi	r2,r18,8
 40277f4:	a8c00204 	addi	r3,r21,8
 40277f8:	003f6306 	br	4027588 <__flash_rwdata_start+0xffff70ac>
 40277fc:	9005883a 	mov	r2,r18
 4027800:	a8c00017 	ldw	r3,0(r21)
 4027804:	b821883a 	mov	r16,r23
 4027808:	b027883a 	mov	r19,r22
 402780c:	10c00015 	stw	r3,0(r2)
 4027810:	a8c00117 	ldw	r3,4(r21)
 4027814:	10c00115 	stw	r3,4(r2)
 4027818:	a8c00217 	ldw	r3,8(r21)
 402781c:	10c00215 	stw	r3,8(r2)
 4027820:	003f6a06 	br	40275cc <__flash_rwdata_start+0xffff70f0>
 4027824:	9c67883a 	add	r19,r19,r17
 4027828:	4445c83a 	sub	r2,r8,r17
 402782c:	e4c00215 	stw	r19,8(fp)
 4027830:	10800054 	ori	r2,r2,1
 4027834:	98800115 	stw	r2,4(r19)
 4027838:	a8bfff17 	ldw	r2,-4(r21)
 402783c:	a009883a 	mov	r4,r20
 4027840:	1080004c 	andi	r2,r2,1
 4027844:	1462b03a 	or	r17,r2,r17
 4027848:	ac7fff15 	stw	r17,-4(r21)
 402784c:	402d7a80 	call	402d7a8 <__malloc_unlock>
 4027850:	a805883a 	mov	r2,r21
 4027854:	003f6b06 	br	4027604 <__flash_rwdata_start+0xffff7128>
 4027858:	a80b883a 	mov	r5,r21
 402785c:	9009883a 	mov	r4,r18
 4027860:	40262140 	call	4026214 <memmove>
 4027864:	003f4e06 	br	40275a0 <__flash_rwdata_start+0xffff70c4>
 4027868:	89000404 	addi	r4,r17,16
 402786c:	b93fbc16 	blt	r23,r4,4027760 <__flash_rwdata_start+0xffff7284>
 4027870:	b0800317 	ldw	r2,12(r22)
 4027874:	b0c00217 	ldw	r3,8(r22)
 4027878:	81bfff04 	addi	r6,r16,-4
 402787c:	01000904 	movi	r4,36
 4027880:	18800315 	stw	r2,12(r3)
 4027884:	10c00215 	stw	r3,8(r2)
 4027888:	b4800204 	addi	r18,r22,8
 402788c:	21804336 	bltu	r4,r6,402799c <_realloc_r+0x508>
 4027890:	008004c4 	movi	r2,19
 4027894:	11803f2e 	bgeu	r2,r6,4027994 <_realloc_r+0x500>
 4027898:	a8800017 	ldw	r2,0(r21)
 402789c:	b0800215 	stw	r2,8(r22)
 40278a0:	a8800117 	ldw	r2,4(r21)
 40278a4:	b0800315 	stw	r2,12(r22)
 40278a8:	008006c4 	movi	r2,27
 40278ac:	11803f36 	bltu	r2,r6,40279ac <_realloc_r+0x518>
 40278b0:	b0800404 	addi	r2,r22,16
 40278b4:	ad400204 	addi	r21,r21,8
 40278b8:	a8c00017 	ldw	r3,0(r21)
 40278bc:	10c00015 	stw	r3,0(r2)
 40278c0:	a8c00117 	ldw	r3,4(r21)
 40278c4:	10c00115 	stw	r3,4(r2)
 40278c8:	a8c00217 	ldw	r3,8(r21)
 40278cc:	10c00215 	stw	r3,8(r2)
 40278d0:	b447883a 	add	r3,r22,r17
 40278d4:	bc45c83a 	sub	r2,r23,r17
 40278d8:	e0c00215 	stw	r3,8(fp)
 40278dc:	10800054 	ori	r2,r2,1
 40278e0:	18800115 	stw	r2,4(r3)
 40278e4:	b0800117 	ldw	r2,4(r22)
 40278e8:	a009883a 	mov	r4,r20
 40278ec:	1080004c 	andi	r2,r2,1
 40278f0:	1462b03a 	or	r17,r2,r17
 40278f4:	b4400115 	stw	r17,4(r22)
 40278f8:	402d7a80 	call	402d7a8 <__malloc_unlock>
 40278fc:	9005883a 	mov	r2,r18
 4027900:	003f4006 	br	4027604 <__flash_rwdata_start+0xffff7128>
 4027904:	a8c00217 	ldw	r3,8(r21)
 4027908:	90c00215 	stw	r3,8(r18)
 402790c:	a8c00317 	ldw	r3,12(r21)
 4027910:	90c00315 	stw	r3,12(r18)
 4027914:	30801126 	beq	r6,r2,402795c <_realloc_r+0x4c8>
 4027918:	90800404 	addi	r2,r18,16
 402791c:	a8c00404 	addi	r3,r21,16
 4027920:	003f1906 	br	4027588 <__flash_rwdata_start+0xffff70ac>
 4027924:	90ffff17 	ldw	r3,-4(r18)
 4027928:	00bfff04 	movi	r2,-4
 402792c:	a825883a 	mov	r18,r21
 4027930:	1884703a 	and	r2,r3,r2
 4027934:	80a1883a 	add	r16,r16,r2
 4027938:	003f2406 	br	40275cc <__flash_rwdata_start+0xffff70f0>
 402793c:	a8800217 	ldw	r2,8(r21)
 4027940:	b0800415 	stw	r2,16(r22)
 4027944:	a8800317 	ldw	r2,12(r21)
 4027948:	b0800515 	stw	r2,20(r22)
 402794c:	31000a26 	beq	r6,r4,4027978 <_realloc_r+0x4e4>
 4027950:	b0800604 	addi	r2,r22,24
 4027954:	ad400404 	addi	r21,r21,16
 4027958:	003fa906 	br	4027800 <__flash_rwdata_start+0xffff7324>
 402795c:	a9000417 	ldw	r4,16(r21)
 4027960:	90800604 	addi	r2,r18,24
 4027964:	a8c00604 	addi	r3,r21,24
 4027968:	91000415 	stw	r4,16(r18)
 402796c:	a9000517 	ldw	r4,20(r21)
 4027970:	91000515 	stw	r4,20(r18)
 4027974:	003f0406 	br	4027588 <__flash_rwdata_start+0xffff70ac>
 4027978:	a8c00417 	ldw	r3,16(r21)
 402797c:	ad400604 	addi	r21,r21,24
 4027980:	b0800804 	addi	r2,r22,32
 4027984:	b0c00615 	stw	r3,24(r22)
 4027988:	a8ffff17 	ldw	r3,-4(r21)
 402798c:	b0c00715 	stw	r3,28(r22)
 4027990:	003f9b06 	br	4027800 <__flash_rwdata_start+0xffff7324>
 4027994:	9005883a 	mov	r2,r18
 4027998:	003fc706 	br	40278b8 <__flash_rwdata_start+0xffff73dc>
 402799c:	a80b883a 	mov	r5,r21
 40279a0:	9009883a 	mov	r4,r18
 40279a4:	40262140 	call	4026214 <memmove>
 40279a8:	003fc906 	br	40278d0 <__flash_rwdata_start+0xffff73f4>
 40279ac:	a8800217 	ldw	r2,8(r21)
 40279b0:	b0800415 	stw	r2,16(r22)
 40279b4:	a8800317 	ldw	r2,12(r21)
 40279b8:	b0800515 	stw	r2,20(r22)
 40279bc:	31000726 	beq	r6,r4,40279dc <_realloc_r+0x548>
 40279c0:	b0800604 	addi	r2,r22,24
 40279c4:	ad400404 	addi	r21,r21,16
 40279c8:	003fbb06 	br	40278b8 <__flash_rwdata_start+0xffff73dc>
 40279cc:	a009883a 	mov	r4,r20
 40279d0:	402d7a80 	call	402d7a8 <__malloc_unlock>
 40279d4:	0005883a 	mov	r2,zero
 40279d8:	003f0a06 	br	4027604 <__flash_rwdata_start+0xffff7128>
 40279dc:	a8c00417 	ldw	r3,16(r21)
 40279e0:	ad400604 	addi	r21,r21,24
 40279e4:	b0800804 	addi	r2,r22,32
 40279e8:	b0c00615 	stw	r3,24(r22)
 40279ec:	a8ffff17 	ldw	r3,-4(r21)
 40279f0:	b0c00715 	stw	r3,28(r22)
 40279f4:	003fb006 	br	40278b8 <__flash_rwdata_start+0xffff73dc>

040279f8 <__fpclassifyd>:
 40279f8:	00a00034 	movhi	r2,32768
 40279fc:	10bfffc4 	addi	r2,r2,-1
 4027a00:	2884703a 	and	r2,r5,r2
 4027a04:	10000726 	beq	r2,zero,4027a24 <__fpclassifyd+0x2c>
 4027a08:	00fffc34 	movhi	r3,65520
 4027a0c:	019ff834 	movhi	r6,32736
 4027a10:	28c7883a 	add	r3,r5,r3
 4027a14:	31bfffc4 	addi	r6,r6,-1
 4027a18:	30c00536 	bltu	r6,r3,4027a30 <__fpclassifyd+0x38>
 4027a1c:	00800104 	movi	r2,4
 4027a20:	f800283a 	ret
 4027a24:	2000021e 	bne	r4,zero,4027a30 <__fpclassifyd+0x38>
 4027a28:	00800084 	movi	r2,2
 4027a2c:	f800283a 	ret
 4027a30:	00dffc34 	movhi	r3,32752
 4027a34:	019ff834 	movhi	r6,32736
 4027a38:	28cb883a 	add	r5,r5,r3
 4027a3c:	31bfffc4 	addi	r6,r6,-1
 4027a40:	317ff62e 	bgeu	r6,r5,4027a1c <__flash_rwdata_start+0xffff7540>
 4027a44:	01400434 	movhi	r5,16
 4027a48:	297fffc4 	addi	r5,r5,-1
 4027a4c:	28800236 	bltu	r5,r2,4027a58 <__fpclassifyd+0x60>
 4027a50:	008000c4 	movi	r2,3
 4027a54:	f800283a 	ret
 4027a58:	10c00226 	beq	r2,r3,4027a64 <__fpclassifyd+0x6c>
 4027a5c:	0005883a 	mov	r2,zero
 4027a60:	f800283a 	ret
 4027a64:	2005003a 	cmpeq	r2,r4,zero
 4027a68:	f800283a 	ret

04027a6c <_sbrk_r>:
 4027a6c:	defffd04 	addi	sp,sp,-12
 4027a70:	dc000015 	stw	r16,0(sp)
 4027a74:	04000034 	movhi	r16,0
 4027a78:	dc400115 	stw	r17,4(sp)
 4027a7c:	8407e904 	addi	r16,r16,8100
 4027a80:	2023883a 	mov	r17,r4
 4027a84:	2809883a 	mov	r4,r5
 4027a88:	dfc00215 	stw	ra,8(sp)
 4027a8c:	80000015 	stw	zero,0(r16)
 4027a90:	402d9680 	call	402d968 <sbrk>
 4027a94:	00ffffc4 	movi	r3,-1
 4027a98:	10c00526 	beq	r2,r3,4027ab0 <_sbrk_r+0x44>
 4027a9c:	dfc00217 	ldw	ra,8(sp)
 4027aa0:	dc400117 	ldw	r17,4(sp)
 4027aa4:	dc000017 	ldw	r16,0(sp)
 4027aa8:	dec00304 	addi	sp,sp,12
 4027aac:	f800283a 	ret
 4027ab0:	80c00017 	ldw	r3,0(r16)
 4027ab4:	183ff926 	beq	r3,zero,4027a9c <__flash_rwdata_start+0xffff75c0>
 4027ab8:	88c00015 	stw	r3,0(r17)
 4027abc:	003ff706 	br	4027a9c <__flash_rwdata_start+0xffff75c0>

04027ac0 <__sread>:
 4027ac0:	defffe04 	addi	sp,sp,-8
 4027ac4:	dc000015 	stw	r16,0(sp)
 4027ac8:	2821883a 	mov	r16,r5
 4027acc:	2940038f 	ldh	r5,14(r5)
 4027ad0:	dfc00115 	stw	ra,4(sp)
 4027ad4:	40298b40 	call	40298b4 <_read_r>
 4027ad8:	10000716 	blt	r2,zero,4027af8 <__sread+0x38>
 4027adc:	80c01417 	ldw	r3,80(r16)
 4027ae0:	1887883a 	add	r3,r3,r2
 4027ae4:	80c01415 	stw	r3,80(r16)
 4027ae8:	dfc00117 	ldw	ra,4(sp)
 4027aec:	dc000017 	ldw	r16,0(sp)
 4027af0:	dec00204 	addi	sp,sp,8
 4027af4:	f800283a 	ret
 4027af8:	80c0030b 	ldhu	r3,12(r16)
 4027afc:	18fbffcc 	andi	r3,r3,61439
 4027b00:	80c0030d 	sth	r3,12(r16)
 4027b04:	dfc00117 	ldw	ra,4(sp)
 4027b08:	dc000017 	ldw	r16,0(sp)
 4027b0c:	dec00204 	addi	sp,sp,8
 4027b10:	f800283a 	ret

04027b14 <__seofread>:
 4027b14:	0005883a 	mov	r2,zero
 4027b18:	f800283a 	ret

04027b1c <__swrite>:
 4027b1c:	2880030b 	ldhu	r2,12(r5)
 4027b20:	defffb04 	addi	sp,sp,-20
 4027b24:	dcc00315 	stw	r19,12(sp)
 4027b28:	dc800215 	stw	r18,8(sp)
 4027b2c:	dc400115 	stw	r17,4(sp)
 4027b30:	dc000015 	stw	r16,0(sp)
 4027b34:	dfc00415 	stw	ra,16(sp)
 4027b38:	10c0400c 	andi	r3,r2,256
 4027b3c:	2821883a 	mov	r16,r5
 4027b40:	2023883a 	mov	r17,r4
 4027b44:	3025883a 	mov	r18,r6
 4027b48:	3827883a 	mov	r19,r7
 4027b4c:	18000526 	beq	r3,zero,4027b64 <__swrite+0x48>
 4027b50:	2940038f 	ldh	r5,14(r5)
 4027b54:	01c00084 	movi	r7,2
 4027b58:	000d883a 	mov	r6,zero
 4027b5c:	40298540 	call	4029854 <_lseek_r>
 4027b60:	8080030b 	ldhu	r2,12(r16)
 4027b64:	8140038f 	ldh	r5,14(r16)
 4027b68:	10bbffcc 	andi	r2,r2,61439
 4027b6c:	980f883a 	mov	r7,r19
 4027b70:	900d883a 	mov	r6,r18
 4027b74:	8809883a 	mov	r4,r17
 4027b78:	8080030d 	sth	r2,12(r16)
 4027b7c:	dfc00417 	ldw	ra,16(sp)
 4027b80:	dcc00317 	ldw	r19,12(sp)
 4027b84:	dc800217 	ldw	r18,8(sp)
 4027b88:	dc400117 	ldw	r17,4(sp)
 4027b8c:	dc000017 	ldw	r16,0(sp)
 4027b90:	dec00504 	addi	sp,sp,20
 4027b94:	40293201 	jmpi	4029320 <_write_r>

04027b98 <__sseek>:
 4027b98:	defffe04 	addi	sp,sp,-8
 4027b9c:	dc000015 	stw	r16,0(sp)
 4027ba0:	2821883a 	mov	r16,r5
 4027ba4:	2940038f 	ldh	r5,14(r5)
 4027ba8:	dfc00115 	stw	ra,4(sp)
 4027bac:	40298540 	call	4029854 <_lseek_r>
 4027bb0:	00ffffc4 	movi	r3,-1
 4027bb4:	10c00826 	beq	r2,r3,4027bd8 <__sseek+0x40>
 4027bb8:	80c0030b 	ldhu	r3,12(r16)
 4027bbc:	80801415 	stw	r2,80(r16)
 4027bc0:	18c40014 	ori	r3,r3,4096
 4027bc4:	80c0030d 	sth	r3,12(r16)
 4027bc8:	dfc00117 	ldw	ra,4(sp)
 4027bcc:	dc000017 	ldw	r16,0(sp)
 4027bd0:	dec00204 	addi	sp,sp,8
 4027bd4:	f800283a 	ret
 4027bd8:	80c0030b 	ldhu	r3,12(r16)
 4027bdc:	18fbffcc 	andi	r3,r3,61439
 4027be0:	80c0030d 	sth	r3,12(r16)
 4027be4:	dfc00117 	ldw	ra,4(sp)
 4027be8:	dc000017 	ldw	r16,0(sp)
 4027bec:	dec00204 	addi	sp,sp,8
 4027bf0:	f800283a 	ret

04027bf4 <__sclose>:
 4027bf4:	2940038f 	ldh	r5,14(r5)
 4027bf8:	40293801 	jmpi	4029380 <_close_r>

04027bfc <strcmp>:
 4027bfc:	2144b03a 	or	r2,r4,r5
 4027c00:	108000cc 	andi	r2,r2,3
 4027c04:	1000171e 	bne	r2,zero,4027c64 <strcmp+0x68>
 4027c08:	20800017 	ldw	r2,0(r4)
 4027c0c:	28c00017 	ldw	r3,0(r5)
 4027c10:	10c0141e 	bne	r2,r3,4027c64 <strcmp+0x68>
 4027c14:	027fbff4 	movhi	r9,65279
 4027c18:	4a7fbfc4 	addi	r9,r9,-257
 4027c1c:	0086303a 	nor	r3,zero,r2
 4027c20:	02202074 	movhi	r8,32897
 4027c24:	1245883a 	add	r2,r2,r9
 4027c28:	42202004 	addi	r8,r8,-32640
 4027c2c:	10c4703a 	and	r2,r2,r3
 4027c30:	1204703a 	and	r2,r2,r8
 4027c34:	10000226 	beq	r2,zero,4027c40 <strcmp+0x44>
 4027c38:	00002306 	br	4027cc8 <strcmp+0xcc>
 4027c3c:	1000221e 	bne	r2,zero,4027cc8 <strcmp+0xcc>
 4027c40:	21000104 	addi	r4,r4,4
 4027c44:	20c00017 	ldw	r3,0(r4)
 4027c48:	29400104 	addi	r5,r5,4
 4027c4c:	29800017 	ldw	r6,0(r5)
 4027c50:	1a4f883a 	add	r7,r3,r9
 4027c54:	00c4303a 	nor	r2,zero,r3
 4027c58:	3884703a 	and	r2,r7,r2
 4027c5c:	1204703a 	and	r2,r2,r8
 4027c60:	19bff626 	beq	r3,r6,4027c3c <__flash_rwdata_start+0xffff7760>
 4027c64:	20800003 	ldbu	r2,0(r4)
 4027c68:	10c03fcc 	andi	r3,r2,255
 4027c6c:	18c0201c 	xori	r3,r3,128
 4027c70:	18ffe004 	addi	r3,r3,-128
 4027c74:	18000c26 	beq	r3,zero,4027ca8 <strcmp+0xac>
 4027c78:	29800007 	ldb	r6,0(r5)
 4027c7c:	19800326 	beq	r3,r6,4027c8c <strcmp+0x90>
 4027c80:	00001306 	br	4027cd0 <strcmp+0xd4>
 4027c84:	29800007 	ldb	r6,0(r5)
 4027c88:	11800b1e 	bne	r2,r6,4027cb8 <strcmp+0xbc>
 4027c8c:	21000044 	addi	r4,r4,1
 4027c90:	20c00003 	ldbu	r3,0(r4)
 4027c94:	29400044 	addi	r5,r5,1
 4027c98:	18803fcc 	andi	r2,r3,255
 4027c9c:	1080201c 	xori	r2,r2,128
 4027ca0:	10bfe004 	addi	r2,r2,-128
 4027ca4:	103ff71e 	bne	r2,zero,4027c84 <__flash_rwdata_start+0xffff77a8>
 4027ca8:	0007883a 	mov	r3,zero
 4027cac:	28800003 	ldbu	r2,0(r5)
 4027cb0:	1885c83a 	sub	r2,r3,r2
 4027cb4:	f800283a 	ret
 4027cb8:	28800003 	ldbu	r2,0(r5)
 4027cbc:	18c03fcc 	andi	r3,r3,255
 4027cc0:	1885c83a 	sub	r2,r3,r2
 4027cc4:	f800283a 	ret
 4027cc8:	0005883a 	mov	r2,zero
 4027ccc:	f800283a 	ret
 4027cd0:	10c03fcc 	andi	r3,r2,255
 4027cd4:	003ff506 	br	4027cac <__flash_rwdata_start+0xffff77d0>

04027cd8 <__sprint_r.part.0>:
 4027cd8:	28801917 	ldw	r2,100(r5)
 4027cdc:	defff604 	addi	sp,sp,-40
 4027ce0:	dd400515 	stw	r21,20(sp)
 4027ce4:	dfc00915 	stw	ra,36(sp)
 4027ce8:	df000815 	stw	fp,32(sp)
 4027cec:	ddc00715 	stw	r23,28(sp)
 4027cf0:	dd800615 	stw	r22,24(sp)
 4027cf4:	dd000415 	stw	r20,16(sp)
 4027cf8:	dcc00315 	stw	r19,12(sp)
 4027cfc:	dc800215 	stw	r18,8(sp)
 4027d00:	dc400115 	stw	r17,4(sp)
 4027d04:	dc000015 	stw	r16,0(sp)
 4027d08:	1088000c 	andi	r2,r2,8192
 4027d0c:	302b883a 	mov	r21,r6
 4027d10:	10002e26 	beq	r2,zero,4027dcc <__sprint_r.part.0+0xf4>
 4027d14:	30800217 	ldw	r2,8(r6)
 4027d18:	35800017 	ldw	r22,0(r6)
 4027d1c:	10002926 	beq	r2,zero,4027dc4 <__sprint_r.part.0+0xec>
 4027d20:	2827883a 	mov	r19,r5
 4027d24:	2029883a 	mov	r20,r4
 4027d28:	b5c00104 	addi	r23,r22,4
 4027d2c:	04bfffc4 	movi	r18,-1
 4027d30:	bc400017 	ldw	r17,0(r23)
 4027d34:	b4000017 	ldw	r16,0(r22)
 4027d38:	0039883a 	mov	fp,zero
 4027d3c:	8822d0ba 	srli	r17,r17,2
 4027d40:	8800031e 	bne	r17,zero,4027d50 <__sprint_r.part.0+0x78>
 4027d44:	00001806 	br	4027da8 <__sprint_r.part.0+0xd0>
 4027d48:	84000104 	addi	r16,r16,4
 4027d4c:	8f001526 	beq	r17,fp,4027da4 <__sprint_r.part.0+0xcc>
 4027d50:	81400017 	ldw	r5,0(r16)
 4027d54:	980d883a 	mov	r6,r19
 4027d58:	a009883a 	mov	r4,r20
 4027d5c:	40297000 	call	4029700 <_fputwc_r>
 4027d60:	e7000044 	addi	fp,fp,1
 4027d64:	14bff81e 	bne	r2,r18,4027d48 <__flash_rwdata_start+0xffff786c>
 4027d68:	9005883a 	mov	r2,r18
 4027d6c:	a8000215 	stw	zero,8(r21)
 4027d70:	a8000115 	stw	zero,4(r21)
 4027d74:	dfc00917 	ldw	ra,36(sp)
 4027d78:	df000817 	ldw	fp,32(sp)
 4027d7c:	ddc00717 	ldw	r23,28(sp)
 4027d80:	dd800617 	ldw	r22,24(sp)
 4027d84:	dd400517 	ldw	r21,20(sp)
 4027d88:	dd000417 	ldw	r20,16(sp)
 4027d8c:	dcc00317 	ldw	r19,12(sp)
 4027d90:	dc800217 	ldw	r18,8(sp)
 4027d94:	dc400117 	ldw	r17,4(sp)
 4027d98:	dc000017 	ldw	r16,0(sp)
 4027d9c:	dec00a04 	addi	sp,sp,40
 4027da0:	f800283a 	ret
 4027da4:	a8800217 	ldw	r2,8(r21)
 4027da8:	8c63883a 	add	r17,r17,r17
 4027dac:	8c63883a 	add	r17,r17,r17
 4027db0:	1445c83a 	sub	r2,r2,r17
 4027db4:	a8800215 	stw	r2,8(r21)
 4027db8:	b5800204 	addi	r22,r22,8
 4027dbc:	bdc00204 	addi	r23,r23,8
 4027dc0:	103fdb1e 	bne	r2,zero,4027d30 <__flash_rwdata_start+0xffff7854>
 4027dc4:	0005883a 	mov	r2,zero
 4027dc8:	003fe806 	br	4027d6c <__flash_rwdata_start+0xffff7890>
 4027dcc:	4024f000 	call	4024f00 <__sfvwrite_r>
 4027dd0:	003fe606 	br	4027d6c <__flash_rwdata_start+0xffff7890>

04027dd4 <__sprint_r>:
 4027dd4:	30c00217 	ldw	r3,8(r6)
 4027dd8:	18000126 	beq	r3,zero,4027de0 <__sprint_r+0xc>
 4027ddc:	4027cd81 	jmpi	4027cd8 <__sprint_r.part.0>
 4027de0:	30000115 	stw	zero,4(r6)
 4027de4:	0005883a 	mov	r2,zero
 4027de8:	f800283a 	ret

04027dec <___vfiprintf_internal_r>:
 4027dec:	deffc904 	addi	sp,sp,-220
 4027df0:	df003515 	stw	fp,212(sp)
 4027df4:	dd003115 	stw	r20,196(sp)
 4027df8:	dfc03615 	stw	ra,216(sp)
 4027dfc:	ddc03415 	stw	r23,208(sp)
 4027e00:	dd803315 	stw	r22,204(sp)
 4027e04:	dd403215 	stw	r21,200(sp)
 4027e08:	dcc03015 	stw	r19,192(sp)
 4027e0c:	dc802f15 	stw	r18,188(sp)
 4027e10:	dc402e15 	stw	r17,184(sp)
 4027e14:	dc002d15 	stw	r16,180(sp)
 4027e18:	d9002015 	stw	r4,128(sp)
 4027e1c:	d9c02215 	stw	r7,136(sp)
 4027e20:	2829883a 	mov	r20,r5
 4027e24:	3039883a 	mov	fp,r6
 4027e28:	20000226 	beq	r4,zero,4027e34 <___vfiprintf_internal_r+0x48>
 4027e2c:	20800e17 	ldw	r2,56(r4)
 4027e30:	1000cf26 	beq	r2,zero,4028170 <___vfiprintf_internal_r+0x384>
 4027e34:	a080030b 	ldhu	r2,12(r20)
 4027e38:	10c8000c 	andi	r3,r2,8192
 4027e3c:	1800061e 	bne	r3,zero,4027e58 <___vfiprintf_internal_r+0x6c>
 4027e40:	a1001917 	ldw	r4,100(r20)
 4027e44:	00f7ffc4 	movi	r3,-8193
 4027e48:	10880014 	ori	r2,r2,8192
 4027e4c:	20c6703a 	and	r3,r4,r3
 4027e50:	a080030d 	sth	r2,12(r20)
 4027e54:	a0c01915 	stw	r3,100(r20)
 4027e58:	10c0020c 	andi	r3,r2,8
 4027e5c:	1800a926 	beq	r3,zero,4028104 <___vfiprintf_internal_r+0x318>
 4027e60:	a0c00417 	ldw	r3,16(r20)
 4027e64:	1800a726 	beq	r3,zero,4028104 <___vfiprintf_internal_r+0x318>
 4027e68:	1080068c 	andi	r2,r2,26
 4027e6c:	00c00284 	movi	r3,10
 4027e70:	10c0ac26 	beq	r2,r3,4028124 <___vfiprintf_internal_r+0x338>
 4027e74:	da801a04 	addi	r10,sp,104
 4027e78:	da801e15 	stw	r10,120(sp)
 4027e7c:	d8801e17 	ldw	r2,120(sp)
 4027e80:	da8019c4 	addi	r10,sp,103
 4027e84:	05800034 	movhi	r22,0
 4027e88:	05c00034 	movhi	r23,0
 4027e8c:	da801f15 	stw	r10,124(sp)
 4027e90:	1295c83a 	sub	r10,r2,r10
 4027e94:	b5809c04 	addi	r22,r22,624
 4027e98:	bdc09804 	addi	r23,r23,608
 4027e9c:	dec01a15 	stw	sp,104(sp)
 4027ea0:	d8001c15 	stw	zero,112(sp)
 4027ea4:	d8001b15 	stw	zero,108(sp)
 4027ea8:	d8002615 	stw	zero,152(sp)
 4027eac:	d8002315 	stw	zero,140(sp)
 4027eb0:	da802715 	stw	r10,156(sp)
 4027eb4:	d811883a 	mov	r8,sp
 4027eb8:	dd002115 	stw	r20,132(sp)
 4027ebc:	e021883a 	mov	r16,fp
 4027ec0:	80800007 	ldb	r2,0(r16)
 4027ec4:	1003ea26 	beq	r2,zero,4028e70 <___vfiprintf_internal_r+0x1084>
 4027ec8:	00c00944 	movi	r3,37
 4027ecc:	8025883a 	mov	r18,r16
 4027ed0:	10c0021e 	bne	r2,r3,4027edc <___vfiprintf_internal_r+0xf0>
 4027ed4:	00001606 	br	4027f30 <___vfiprintf_internal_r+0x144>
 4027ed8:	10c00326 	beq	r2,r3,4027ee8 <___vfiprintf_internal_r+0xfc>
 4027edc:	94800044 	addi	r18,r18,1
 4027ee0:	90800007 	ldb	r2,0(r18)
 4027ee4:	103ffc1e 	bne	r2,zero,4027ed8 <__flash_rwdata_start+0xffff79fc>
 4027ee8:	9423c83a 	sub	r17,r18,r16
 4027eec:	88001026 	beq	r17,zero,4027f30 <___vfiprintf_internal_r+0x144>
 4027ef0:	d8c01c17 	ldw	r3,112(sp)
 4027ef4:	d8801b17 	ldw	r2,108(sp)
 4027ef8:	44000015 	stw	r16,0(r8)
 4027efc:	88c7883a 	add	r3,r17,r3
 4027f00:	10800044 	addi	r2,r2,1
 4027f04:	44400115 	stw	r17,4(r8)
 4027f08:	d8c01c15 	stw	r3,112(sp)
 4027f0c:	d8801b15 	stw	r2,108(sp)
 4027f10:	010001c4 	movi	r4,7
 4027f14:	2080760e 	bge	r4,r2,40280f0 <___vfiprintf_internal_r+0x304>
 4027f18:	1803821e 	bne	r3,zero,4028d24 <___vfiprintf_internal_r+0xf38>
 4027f1c:	da802317 	ldw	r10,140(sp)
 4027f20:	d8001b15 	stw	zero,108(sp)
 4027f24:	d811883a 	mov	r8,sp
 4027f28:	5455883a 	add	r10,r10,r17
 4027f2c:	da802315 	stw	r10,140(sp)
 4027f30:	90800007 	ldb	r2,0(r18)
 4027f34:	10044626 	beq	r2,zero,4029050 <___vfiprintf_internal_r+0x1264>
 4027f38:	90c00047 	ldb	r3,1(r18)
 4027f3c:	94000044 	addi	r16,r18,1
 4027f40:	d8001d85 	stb	zero,118(sp)
 4027f44:	0009883a 	mov	r4,zero
 4027f48:	000f883a 	mov	r7,zero
 4027f4c:	027fffc4 	movi	r9,-1
 4027f50:	0023883a 	mov	r17,zero
 4027f54:	0029883a 	mov	r20,zero
 4027f58:	01401604 	movi	r5,88
 4027f5c:	01800244 	movi	r6,9
 4027f60:	03400a84 	movi	r13,42
 4027f64:	03001b04 	movi	r12,108
 4027f68:	84000044 	addi	r16,r16,1
 4027f6c:	18bff804 	addi	r2,r3,-32
 4027f70:	28827336 	bltu	r5,r2,4028940 <___vfiprintf_internal_r+0xb54>
 4027f74:	100490ba 	slli	r2,r2,2
 4027f78:	028100b4 	movhi	r10,1026
 4027f7c:	529fe304 	addi	r10,r10,32652
 4027f80:	1285883a 	add	r2,r2,r10
 4027f84:	10800017 	ldw	r2,0(r2)
 4027f88:	1000683a 	jmp	r2
 4027f8c:	04028674 	movhi	r16,2585
 4027f90:	04028940 	call	402894 <_gp+0x3f895c>
 4027f94:	04028940 	call	402894 <_gp+0x3f895c>
 4027f98:	04028694 	movui	r16,2586
 4027f9c:	04028940 	call	402894 <_gp+0x3f895c>
 4027fa0:	04028940 	call	402894 <_gp+0x3f895c>
 4027fa4:	04028940 	call	402894 <_gp+0x3f895c>
 4027fa8:	04028940 	call	402894 <_gp+0x3f895c>
 4027fac:	04028940 	call	402894 <_gp+0x3f895c>
 4027fb0:	04028940 	call	402894 <_gp+0x3f895c>
 4027fb4:	0402887c 	xorhi	r16,zero,2593
 4027fb8:	04028898 	cmpnei	r16,zero,2594
 4027fbc:	04028940 	call	402894 <_gp+0x3f895c>
 4027fc0:	04028180 	call	402818 <_gp+0x3f88e0>
 4027fc4:	040288a8 	cmpgeui	r16,zero,2594
 4027fc8:	04028940 	call	402894 <_gp+0x3f895c>
 4027fcc:	040286a0 	cmpeqi	r16,zero,2586
 4027fd0:	040286ac 	andhi	r16,zero,2586
 4027fd4:	040286ac 	andhi	r16,zero,2586
 4027fd8:	040286ac 	andhi	r16,zero,2586
 4027fdc:	040286ac 	andhi	r16,zero,2586
 4027fe0:	040286ac 	andhi	r16,zero,2586
 4027fe4:	040286ac 	andhi	r16,zero,2586
 4027fe8:	040286ac 	andhi	r16,zero,2586
 4027fec:	040286ac 	andhi	r16,zero,2586
 4027ff0:	040286ac 	andhi	r16,zero,2586
 4027ff4:	04028940 	call	402894 <_gp+0x3f895c>
 4027ff8:	04028940 	call	402894 <_gp+0x3f895c>
 4027ffc:	04028940 	call	402894 <_gp+0x3f895c>
 4028000:	04028940 	call	402894 <_gp+0x3f895c>
 4028004:	04028940 	call	402894 <_gp+0x3f895c>
 4028008:	04028940 	call	402894 <_gp+0x3f895c>
 402800c:	04028940 	call	402894 <_gp+0x3f895c>
 4028010:	04028940 	call	402894 <_gp+0x3f895c>
 4028014:	04028940 	call	402894 <_gp+0x3f895c>
 4028018:	04028940 	call	402894 <_gp+0x3f895c>
 402801c:	040286d8 	cmpnei	r16,zero,2587
 4028020:	04028940 	call	402894 <_gp+0x3f895c>
 4028024:	04028940 	call	402894 <_gp+0x3f895c>
 4028028:	04028940 	call	402894 <_gp+0x3f895c>
 402802c:	04028940 	call	402894 <_gp+0x3f895c>
 4028030:	04028940 	call	402894 <_gp+0x3f895c>
 4028034:	04028940 	call	402894 <_gp+0x3f895c>
 4028038:	04028940 	call	402894 <_gp+0x3f895c>
 402803c:	04028940 	call	402894 <_gp+0x3f895c>
 4028040:	04028940 	call	402894 <_gp+0x3f895c>
 4028044:	04028940 	call	402894 <_gp+0x3f895c>
 4028048:	04028710 	cmplti	r16,zero,2588
 402804c:	04028940 	call	402894 <_gp+0x3f895c>
 4028050:	04028940 	call	402894 <_gp+0x3f895c>
 4028054:	04028940 	call	402894 <_gp+0x3f895c>
 4028058:	04028940 	call	402894 <_gp+0x3f895c>
 402805c:	04028940 	call	402894 <_gp+0x3f895c>
 4028060:	04028768 	cmpgeui	r16,zero,2589
 4028064:	04028940 	call	402894 <_gp+0x3f895c>
 4028068:	04028940 	call	402894 <_gp+0x3f895c>
 402806c:	040287d8 	cmpnei	r16,zero,2591
 4028070:	04028940 	call	402894 <_gp+0x3f895c>
 4028074:	04028940 	call	402894 <_gp+0x3f895c>
 4028078:	04028940 	call	402894 <_gp+0x3f895c>
 402807c:	04028940 	call	402894 <_gp+0x3f895c>
 4028080:	04028940 	call	402894 <_gp+0x3f895c>
 4028084:	04028940 	call	402894 <_gp+0x3f895c>
 4028088:	04028940 	call	402894 <_gp+0x3f895c>
 402808c:	04028940 	call	402894 <_gp+0x3f895c>
 4028090:	04028940 	call	402894 <_gp+0x3f895c>
 4028094:	04028940 	call	402894 <_gp+0x3f895c>
 4028098:	04028584 	movi	r16,2582
 402809c:	040285b0 	cmpltui	r16,zero,2582
 40280a0:	04028940 	call	402894 <_gp+0x3f895c>
 40280a4:	04028940 	call	402894 <_gp+0x3f895c>
 40280a8:	04028940 	call	402894 <_gp+0x3f895c>
 40280ac:	040288e8 	cmpgeui	r16,zero,2595
 40280b0:	040285b0 	cmpltui	r16,zero,2582
 40280b4:	04028940 	call	402894 <_gp+0x3f895c>
 40280b8:	04028940 	call	402894 <_gp+0x3f895c>
 40280bc:	04028444 	movi	r16,2577
 40280c0:	04028940 	call	402894 <_gp+0x3f895c>
 40280c4:	04028454 	movui	r16,2577
 40280c8:	04028490 	cmplti	r16,zero,2578
 40280cc:	0402818c 	andi	r16,zero,2566
 40280d0:	04028438 	rdprs	r16,zero,2576
 40280d4:	04028940 	call	402894 <_gp+0x3f895c>
 40280d8:	04028814 	movui	r16,2592
 40280dc:	04028940 	call	402894 <_gp+0x3f895c>
 40280e0:	0402886c 	andhi	r16,zero,2593
 40280e4:	04028940 	call	402894 <_gp+0x3f895c>
 40280e8:	04028940 	call	402894 <_gp+0x3f895c>
 40280ec:	04028530 	cmpltui	r16,zero,2580
 40280f0:	42000204 	addi	r8,r8,8
 40280f4:	da802317 	ldw	r10,140(sp)
 40280f8:	5455883a 	add	r10,r10,r17
 40280fc:	da802315 	stw	r10,140(sp)
 4028100:	003f8b06 	br	4027f30 <__flash_rwdata_start+0xffff7a54>
 4028104:	d9002017 	ldw	r4,128(sp)
 4028108:	a00b883a 	mov	r5,r20
 402810c:	4022aa80 	call	4022aa8 <__swsetup_r>
 4028110:	1003b11e 	bne	r2,zero,4028fd8 <___vfiprintf_internal_r+0x11ec>
 4028114:	a080030b 	ldhu	r2,12(r20)
 4028118:	00c00284 	movi	r3,10
 402811c:	1080068c 	andi	r2,r2,26
 4028120:	10ff541e 	bne	r2,r3,4027e74 <__flash_rwdata_start+0xffff7998>
 4028124:	a080038f 	ldh	r2,14(r20)
 4028128:	103f5216 	blt	r2,zero,4027e74 <__flash_rwdata_start+0xffff7998>
 402812c:	d9c02217 	ldw	r7,136(sp)
 4028130:	d9002017 	ldw	r4,128(sp)
 4028134:	e00d883a 	mov	r6,fp
 4028138:	a00b883a 	mov	r5,r20
 402813c:	40292640 	call	4029264 <__sbprintf>
 4028140:	dfc03617 	ldw	ra,216(sp)
 4028144:	df003517 	ldw	fp,212(sp)
 4028148:	ddc03417 	ldw	r23,208(sp)
 402814c:	dd803317 	ldw	r22,204(sp)
 4028150:	dd403217 	ldw	r21,200(sp)
 4028154:	dd003117 	ldw	r20,196(sp)
 4028158:	dcc03017 	ldw	r19,192(sp)
 402815c:	dc802f17 	ldw	r18,188(sp)
 4028160:	dc402e17 	ldw	r17,184(sp)
 4028164:	dc002d17 	ldw	r16,180(sp)
 4028168:	dec03704 	addi	sp,sp,220
 402816c:	f800283a 	ret
 4028170:	4024a7c0 	call	4024a7c <__sinit>
 4028174:	003f2f06 	br	4027e34 <__flash_rwdata_start+0xffff7958>
 4028178:	0463c83a 	sub	r17,zero,r17
 402817c:	d8802215 	stw	r2,136(sp)
 4028180:	a5000114 	ori	r20,r20,4
 4028184:	80c00007 	ldb	r3,0(r16)
 4028188:	003f7706 	br	4027f68 <__flash_rwdata_start+0xffff7a8c>
 402818c:	00800c04 	movi	r2,48
 4028190:	da802217 	ldw	r10,136(sp)
 4028194:	d8801d05 	stb	r2,116(sp)
 4028198:	00801e04 	movi	r2,120
 402819c:	d8801d45 	stb	r2,117(sp)
 40281a0:	d8001d85 	stb	zero,118(sp)
 40281a4:	50c00104 	addi	r3,r10,4
 40281a8:	54800017 	ldw	r18,0(r10)
 40281ac:	0027883a 	mov	r19,zero
 40281b0:	a0800094 	ori	r2,r20,2
 40281b4:	48030b16 	blt	r9,zero,4028de4 <___vfiprintf_internal_r+0xff8>
 40281b8:	00bfdfc4 	movi	r2,-129
 40281bc:	a096703a 	and	r11,r20,r2
 40281c0:	d8c02215 	stw	r3,136(sp)
 40281c4:	5d000094 	ori	r20,r11,2
 40281c8:	90032b1e 	bne	r18,zero,4028e78 <___vfiprintf_internal_r+0x108c>
 40281cc:	00800034 	movhi	r2,0
 40281d0:	10803704 	addi	r2,r2,220
 40281d4:	d8802615 	stw	r2,152(sp)
 40281d8:	0039883a 	mov	fp,zero
 40281dc:	48017b1e 	bne	r9,zero,40287cc <___vfiprintf_internal_r+0x9e0>
 40281e0:	0013883a 	mov	r9,zero
 40281e4:	0027883a 	mov	r19,zero
 40281e8:	dd401a04 	addi	r21,sp,104
 40281ec:	4825883a 	mov	r18,r9
 40281f0:	4cc0010e 	bge	r9,r19,40281f8 <___vfiprintf_internal_r+0x40c>
 40281f4:	9825883a 	mov	r18,r19
 40281f8:	e7003fcc 	andi	fp,fp,255
 40281fc:	e700201c 	xori	fp,fp,128
 4028200:	e73fe004 	addi	fp,fp,-128
 4028204:	e0000126 	beq	fp,zero,402820c <___vfiprintf_internal_r+0x420>
 4028208:	94800044 	addi	r18,r18,1
 402820c:	a380008c 	andi	r14,r20,2
 4028210:	70000126 	beq	r14,zero,4028218 <___vfiprintf_internal_r+0x42c>
 4028214:	94800084 	addi	r18,r18,2
 4028218:	a700210c 	andi	fp,r20,132
 402821c:	e001df1e 	bne	fp,zero,402899c <___vfiprintf_internal_r+0xbb0>
 4028220:	8c87c83a 	sub	r3,r17,r18
 4028224:	00c1dd0e 	bge	zero,r3,402899c <___vfiprintf_internal_r+0xbb0>
 4028228:	01c00404 	movi	r7,16
 402822c:	d8801c17 	ldw	r2,112(sp)
 4028230:	38c3ad0e 	bge	r7,r3,40290e8 <___vfiprintf_internal_r+0x12fc>
 4028234:	02800034 	movhi	r10,0
 4028238:	52809c04 	addi	r10,r10,624
 402823c:	dc002915 	stw	r16,164(sp)
 4028240:	d9801b17 	ldw	r6,108(sp)
 4028244:	da802415 	stw	r10,144(sp)
 4028248:	03c001c4 	movi	r15,7
 402824c:	da402515 	stw	r9,148(sp)
 4028250:	db802815 	stw	r14,160(sp)
 4028254:	1821883a 	mov	r16,r3
 4028258:	00000506 	br	4028270 <___vfiprintf_internal_r+0x484>
 402825c:	31400084 	addi	r5,r6,2
 4028260:	42000204 	addi	r8,r8,8
 4028264:	200d883a 	mov	r6,r4
 4028268:	843ffc04 	addi	r16,r16,-16
 402826c:	3c000d0e 	bge	r7,r16,40282a4 <___vfiprintf_internal_r+0x4b8>
 4028270:	10800404 	addi	r2,r2,16
 4028274:	31000044 	addi	r4,r6,1
 4028278:	45800015 	stw	r22,0(r8)
 402827c:	41c00115 	stw	r7,4(r8)
 4028280:	d8801c15 	stw	r2,112(sp)
 4028284:	d9001b15 	stw	r4,108(sp)
 4028288:	793ff40e 	bge	r15,r4,402825c <__flash_rwdata_start+0xffff7d80>
 402828c:	1001b51e 	bne	r2,zero,4028964 <___vfiprintf_internal_r+0xb78>
 4028290:	843ffc04 	addi	r16,r16,-16
 4028294:	000d883a 	mov	r6,zero
 4028298:	01400044 	movi	r5,1
 402829c:	d811883a 	mov	r8,sp
 40282a0:	3c3ff316 	blt	r7,r16,4028270 <__flash_rwdata_start+0xffff7d94>
 40282a4:	8007883a 	mov	r3,r16
 40282a8:	da402517 	ldw	r9,148(sp)
 40282ac:	db802817 	ldw	r14,160(sp)
 40282b0:	dc002917 	ldw	r16,164(sp)
 40282b4:	da802417 	ldw	r10,144(sp)
 40282b8:	1885883a 	add	r2,r3,r2
 40282bc:	40c00115 	stw	r3,4(r8)
 40282c0:	42800015 	stw	r10,0(r8)
 40282c4:	d8801c15 	stw	r2,112(sp)
 40282c8:	d9401b15 	stw	r5,108(sp)
 40282cc:	00c001c4 	movi	r3,7
 40282d0:	19426016 	blt	r3,r5,4028c54 <___vfiprintf_internal_r+0xe68>
 40282d4:	d8c01d87 	ldb	r3,118(sp)
 40282d8:	42000204 	addi	r8,r8,8
 40282dc:	29000044 	addi	r4,r5,1
 40282e0:	1801b31e 	bne	r3,zero,40289b0 <___vfiprintf_internal_r+0xbc4>
 40282e4:	7001c026 	beq	r14,zero,40289e8 <___vfiprintf_internal_r+0xbfc>
 40282e8:	d8c01d04 	addi	r3,sp,116
 40282ec:	10800084 	addi	r2,r2,2
 40282f0:	40c00015 	stw	r3,0(r8)
 40282f4:	00c00084 	movi	r3,2
 40282f8:	40c00115 	stw	r3,4(r8)
 40282fc:	d8801c15 	stw	r2,112(sp)
 4028300:	d9001b15 	stw	r4,108(sp)
 4028304:	00c001c4 	movi	r3,7
 4028308:	1902650e 	bge	r3,r4,4028ca0 <___vfiprintf_internal_r+0xeb4>
 402830c:	10029a1e 	bne	r2,zero,4028d78 <___vfiprintf_internal_r+0xf8c>
 4028310:	00c02004 	movi	r3,128
 4028314:	01000044 	movi	r4,1
 4028318:	000b883a 	mov	r5,zero
 402831c:	d811883a 	mov	r8,sp
 4028320:	e0c1b31e 	bne	fp,r3,40289f0 <___vfiprintf_internal_r+0xc04>
 4028324:	8cb9c83a 	sub	fp,r17,r18
 4028328:	0701b10e 	bge	zero,fp,40289f0 <___vfiprintf_internal_r+0xc04>
 402832c:	01c00404 	movi	r7,16
 4028330:	3f03890e 	bge	r7,fp,4029158 <___vfiprintf_internal_r+0x136c>
 4028334:	00c00034 	movhi	r3,0
 4028338:	18c09804 	addi	r3,r3,608
 402833c:	d8c02415 	stw	r3,144(sp)
 4028340:	8007883a 	mov	r3,r16
 4028344:	034001c4 	movi	r13,7
 4028348:	e021883a 	mov	r16,fp
 402834c:	da402515 	stw	r9,148(sp)
 4028350:	1839883a 	mov	fp,r3
 4028354:	00000506 	br	402836c <___vfiprintf_internal_r+0x580>
 4028358:	29800084 	addi	r6,r5,2
 402835c:	42000204 	addi	r8,r8,8
 4028360:	180b883a 	mov	r5,r3
 4028364:	843ffc04 	addi	r16,r16,-16
 4028368:	3c000d0e 	bge	r7,r16,40283a0 <___vfiprintf_internal_r+0x5b4>
 402836c:	10800404 	addi	r2,r2,16
 4028370:	28c00044 	addi	r3,r5,1
 4028374:	45c00015 	stw	r23,0(r8)
 4028378:	41c00115 	stw	r7,4(r8)
 402837c:	d8801c15 	stw	r2,112(sp)
 4028380:	d8c01b15 	stw	r3,108(sp)
 4028384:	68fff40e 	bge	r13,r3,4028358 <__flash_rwdata_start+0xffff7e7c>
 4028388:	1002241e 	bne	r2,zero,4028c1c <___vfiprintf_internal_r+0xe30>
 402838c:	843ffc04 	addi	r16,r16,-16
 4028390:	01800044 	movi	r6,1
 4028394:	000b883a 	mov	r5,zero
 4028398:	d811883a 	mov	r8,sp
 402839c:	3c3ff316 	blt	r7,r16,402836c <__flash_rwdata_start+0xffff7e90>
 40283a0:	da402517 	ldw	r9,148(sp)
 40283a4:	e007883a 	mov	r3,fp
 40283a8:	8039883a 	mov	fp,r16
 40283ac:	1821883a 	mov	r16,r3
 40283b0:	d8c02417 	ldw	r3,144(sp)
 40283b4:	1705883a 	add	r2,r2,fp
 40283b8:	47000115 	stw	fp,4(r8)
 40283bc:	40c00015 	stw	r3,0(r8)
 40283c0:	d8801c15 	stw	r2,112(sp)
 40283c4:	d9801b15 	stw	r6,108(sp)
 40283c8:	00c001c4 	movi	r3,7
 40283cc:	19827616 	blt	r3,r6,4028da8 <___vfiprintf_internal_r+0xfbc>
 40283d0:	4cf9c83a 	sub	fp,r9,r19
 40283d4:	42000204 	addi	r8,r8,8
 40283d8:	31000044 	addi	r4,r6,1
 40283dc:	300b883a 	mov	r5,r6
 40283e0:	07018516 	blt	zero,fp,40289f8 <___vfiprintf_internal_r+0xc0c>
 40283e4:	9885883a 	add	r2,r19,r2
 40283e8:	45400015 	stw	r21,0(r8)
 40283ec:	44c00115 	stw	r19,4(r8)
 40283f0:	d8801c15 	stw	r2,112(sp)
 40283f4:	d9001b15 	stw	r4,108(sp)
 40283f8:	00c001c4 	movi	r3,7
 40283fc:	1901dd0e 	bge	r3,r4,4028b74 <___vfiprintf_internal_r+0xd88>
 4028400:	1002401e 	bne	r2,zero,4028d04 <___vfiprintf_internal_r+0xf18>
 4028404:	d8001b15 	stw	zero,108(sp)
 4028408:	a2c0010c 	andi	r11,r20,4
 402840c:	58000226 	beq	r11,zero,4028418 <___vfiprintf_internal_r+0x62c>
 4028410:	8ca7c83a 	sub	r19,r17,r18
 4028414:	04c2f216 	blt	zero,r19,4028fe0 <___vfiprintf_internal_r+0x11f4>
 4028418:	8c80010e 	bge	r17,r18,4028420 <___vfiprintf_internal_r+0x634>
 402841c:	9023883a 	mov	r17,r18
 4028420:	da802317 	ldw	r10,140(sp)
 4028424:	5455883a 	add	r10,r10,r17
 4028428:	da802315 	stw	r10,140(sp)
 402842c:	d8001b15 	stw	zero,108(sp)
 4028430:	d811883a 	mov	r8,sp
 4028434:	003ea206 	br	4027ec0 <__flash_rwdata_start+0xffff79e4>
 4028438:	a5000814 	ori	r20,r20,32
 402843c:	80c00007 	ldb	r3,0(r16)
 4028440:	003ec906 	br	4027f68 <__flash_rwdata_start+0xffff7a8c>
 4028444:	80c00007 	ldb	r3,0(r16)
 4028448:	1b030926 	beq	r3,r12,4029070 <___vfiprintf_internal_r+0x1284>
 402844c:	a5000414 	ori	r20,r20,16
 4028450:	003ec506 	br	4027f68 <__flash_rwdata_start+0xffff7a8c>
 4028454:	21003fcc 	andi	r4,r4,255
 4028458:	20035e1e 	bne	r4,zero,40291d4 <___vfiprintf_internal_r+0x13e8>
 402845c:	a080080c 	andi	r2,r20,32
 4028460:	1002a526 	beq	r2,zero,4028ef8 <___vfiprintf_internal_r+0x110c>
 4028464:	da802217 	ldw	r10,136(sp)
 4028468:	50800017 	ldw	r2,0(r10)
 402846c:	da802317 	ldw	r10,140(sp)
 4028470:	5007d7fa 	srai	r3,r10,31
 4028474:	da802217 	ldw	r10,136(sp)
 4028478:	10c00115 	stw	r3,4(r2)
 402847c:	52800104 	addi	r10,r10,4
 4028480:	da802215 	stw	r10,136(sp)
 4028484:	da802317 	ldw	r10,140(sp)
 4028488:	12800015 	stw	r10,0(r2)
 402848c:	003e8c06 	br	4027ec0 <__flash_rwdata_start+0xffff79e4>
 4028490:	21003fcc 	andi	r4,r4,255
 4028494:	2003511e 	bne	r4,zero,40291dc <___vfiprintf_internal_r+0x13f0>
 4028498:	a080080c 	andi	r2,r20,32
 402849c:	1000a126 	beq	r2,zero,4028724 <___vfiprintf_internal_r+0x938>
 40284a0:	da802217 	ldw	r10,136(sp)
 40284a4:	d8001d85 	stb	zero,118(sp)
 40284a8:	50800204 	addi	r2,r10,8
 40284ac:	54800017 	ldw	r18,0(r10)
 40284b0:	54c00117 	ldw	r19,4(r10)
 40284b4:	4802b416 	blt	r9,zero,4028f88 <___vfiprintf_internal_r+0x119c>
 40284b8:	013fdfc4 	movi	r4,-129
 40284bc:	94c6b03a 	or	r3,r18,r19
 40284c0:	d8802215 	stw	r2,136(sp)
 40284c4:	a128703a 	and	r20,r20,r4
 40284c8:	1800a226 	beq	r3,zero,4028754 <___vfiprintf_internal_r+0x968>
 40284cc:	0039883a 	mov	fp,zero
 40284d0:	dd401a04 	addi	r21,sp,104
 40284d4:	9006d0fa 	srli	r3,r18,3
 40284d8:	9808977a 	slli	r4,r19,29
 40284dc:	9826d0fa 	srli	r19,r19,3
 40284e0:	948001cc 	andi	r18,r18,7
 40284e4:	90800c04 	addi	r2,r18,48
 40284e8:	ad7fffc4 	addi	r21,r21,-1
 40284ec:	20e4b03a 	or	r18,r4,r3
 40284f0:	a8800005 	stb	r2,0(r21)
 40284f4:	94c6b03a 	or	r3,r18,r19
 40284f8:	183ff61e 	bne	r3,zero,40284d4 <__flash_rwdata_start+0xffff7ff8>
 40284fc:	a0c0004c 	andi	r3,r20,1
 4028500:	18005926 	beq	r3,zero,4028668 <___vfiprintf_internal_r+0x87c>
 4028504:	10803fcc 	andi	r2,r2,255
 4028508:	1080201c 	xori	r2,r2,128
 402850c:	10bfe004 	addi	r2,r2,-128
 4028510:	00c00c04 	movi	r3,48
 4028514:	10c05426 	beq	r2,r3,4028668 <___vfiprintf_internal_r+0x87c>
 4028518:	da801e17 	ldw	r10,120(sp)
 402851c:	a8bfffc4 	addi	r2,r21,-1
 4028520:	a8ffffc5 	stb	r3,-1(r21)
 4028524:	50a7c83a 	sub	r19,r10,r2
 4028528:	102b883a 	mov	r21,r2
 402852c:	003f2f06 	br	40281ec <__flash_rwdata_start+0xffff7d10>
 4028530:	21003fcc 	andi	r4,r4,255
 4028534:	2003421e 	bne	r4,zero,4029240 <___vfiprintf_internal_r+0x1454>
 4028538:	00800034 	movhi	r2,0
 402853c:	10803704 	addi	r2,r2,220
 4028540:	d8802615 	stw	r2,152(sp)
 4028544:	a080080c 	andi	r2,r20,32
 4028548:	1000aa26 	beq	r2,zero,40287f4 <___vfiprintf_internal_r+0xa08>
 402854c:	da802217 	ldw	r10,136(sp)
 4028550:	54800017 	ldw	r18,0(r10)
 4028554:	54c00117 	ldw	r19,4(r10)
 4028558:	52800204 	addi	r10,r10,8
 402855c:	da802215 	stw	r10,136(sp)
 4028560:	a080004c 	andi	r2,r20,1
 4028564:	1001d226 	beq	r2,zero,4028cb0 <___vfiprintf_internal_r+0xec4>
 4028568:	94c4b03a 	or	r2,r18,r19
 402856c:	1002351e 	bne	r2,zero,4028e44 <___vfiprintf_internal_r+0x1058>
 4028570:	d8001d85 	stb	zero,118(sp)
 4028574:	48022216 	blt	r9,zero,4028e00 <___vfiprintf_internal_r+0x1014>
 4028578:	00bfdfc4 	movi	r2,-129
 402857c:	a0a8703a 	and	r20,r20,r2
 4028580:	003f1506 	br	40281d8 <__flash_rwdata_start+0xffff7cfc>
 4028584:	da802217 	ldw	r10,136(sp)
 4028588:	04800044 	movi	r18,1
 402858c:	d8001d85 	stb	zero,118(sp)
 4028590:	50800017 	ldw	r2,0(r10)
 4028594:	52800104 	addi	r10,r10,4
 4028598:	da802215 	stw	r10,136(sp)
 402859c:	d8801005 	stb	r2,64(sp)
 40285a0:	9027883a 	mov	r19,r18
 40285a4:	dd401004 	addi	r21,sp,64
 40285a8:	0013883a 	mov	r9,zero
 40285ac:	003f1706 	br	402820c <__flash_rwdata_start+0xffff7d30>
 40285b0:	21003fcc 	andi	r4,r4,255
 40285b4:	2003201e 	bne	r4,zero,4029238 <___vfiprintf_internal_r+0x144c>
 40285b8:	a080080c 	andi	r2,r20,32
 40285bc:	10004b26 	beq	r2,zero,40286ec <___vfiprintf_internal_r+0x900>
 40285c0:	da802217 	ldw	r10,136(sp)
 40285c4:	50800117 	ldw	r2,4(r10)
 40285c8:	54800017 	ldw	r18,0(r10)
 40285cc:	52800204 	addi	r10,r10,8
 40285d0:	da802215 	stw	r10,136(sp)
 40285d4:	1027883a 	mov	r19,r2
 40285d8:	10022c16 	blt	r2,zero,4028e8c <___vfiprintf_internal_r+0x10a0>
 40285dc:	df001d83 	ldbu	fp,118(sp)
 40285e0:	48007216 	blt	r9,zero,40287ac <___vfiprintf_internal_r+0x9c0>
 40285e4:	00ffdfc4 	movi	r3,-129
 40285e8:	94c4b03a 	or	r2,r18,r19
 40285ec:	a0e8703a 	and	r20,r20,r3
 40285f0:	1000cc26 	beq	r2,zero,4028924 <___vfiprintf_internal_r+0xb38>
 40285f4:	98021026 	beq	r19,zero,4028e38 <___vfiprintf_internal_r+0x104c>
 40285f8:	dc402415 	stw	r17,144(sp)
 40285fc:	dc002515 	stw	r16,148(sp)
 4028600:	9823883a 	mov	r17,r19
 4028604:	9021883a 	mov	r16,r18
 4028608:	dd401a04 	addi	r21,sp,104
 402860c:	4825883a 	mov	r18,r9
 4028610:	4027883a 	mov	r19,r8
 4028614:	8009883a 	mov	r4,r16
 4028618:	880b883a 	mov	r5,r17
 402861c:	01800284 	movi	r6,10
 4028620:	000f883a 	mov	r7,zero
 4028624:	402a1cc0 	call	402a1cc <__umoddi3>
 4028628:	10800c04 	addi	r2,r2,48
 402862c:	ad7fffc4 	addi	r21,r21,-1
 4028630:	8009883a 	mov	r4,r16
 4028634:	880b883a 	mov	r5,r17
 4028638:	a8800005 	stb	r2,0(r21)
 402863c:	01800284 	movi	r6,10
 4028640:	000f883a 	mov	r7,zero
 4028644:	4029c540 	call	4029c54 <__udivdi3>
 4028648:	1021883a 	mov	r16,r2
 402864c:	10c4b03a 	or	r2,r2,r3
 4028650:	1823883a 	mov	r17,r3
 4028654:	103fef1e 	bne	r2,zero,4028614 <__flash_rwdata_start+0xffff8138>
 4028658:	dc402417 	ldw	r17,144(sp)
 402865c:	dc002517 	ldw	r16,148(sp)
 4028660:	9013883a 	mov	r9,r18
 4028664:	9811883a 	mov	r8,r19
 4028668:	da801e17 	ldw	r10,120(sp)
 402866c:	5567c83a 	sub	r19,r10,r21
 4028670:	003ede06 	br	40281ec <__flash_rwdata_start+0xffff7d10>
 4028674:	38803fcc 	andi	r2,r7,255
 4028678:	1080201c 	xori	r2,r2,128
 402867c:	10bfe004 	addi	r2,r2,-128
 4028680:	1002371e 	bne	r2,zero,4028f60 <___vfiprintf_internal_r+0x1174>
 4028684:	01000044 	movi	r4,1
 4028688:	01c00804 	movi	r7,32
 402868c:	80c00007 	ldb	r3,0(r16)
 4028690:	003e3506 	br	4027f68 <__flash_rwdata_start+0xffff7a8c>
 4028694:	a5000054 	ori	r20,r20,1
 4028698:	80c00007 	ldb	r3,0(r16)
 402869c:	003e3206 	br	4027f68 <__flash_rwdata_start+0xffff7a8c>
 40286a0:	a5002014 	ori	r20,r20,128
 40286a4:	80c00007 	ldb	r3,0(r16)
 40286a8:	003e2f06 	br	4027f68 <__flash_rwdata_start+0xffff7a8c>
 40286ac:	8015883a 	mov	r10,r16
 40286b0:	0023883a 	mov	r17,zero
 40286b4:	18bff404 	addi	r2,r3,-48
 40286b8:	50c00007 	ldb	r3,0(r10)
 40286bc:	8c4002a4 	muli	r17,r17,10
 40286c0:	84000044 	addi	r16,r16,1
 40286c4:	8015883a 	mov	r10,r16
 40286c8:	1463883a 	add	r17,r2,r17
 40286cc:	18bff404 	addi	r2,r3,-48
 40286d0:	30bff92e 	bgeu	r6,r2,40286b8 <__flash_rwdata_start+0xffff81dc>
 40286d4:	003e2506 	br	4027f6c <__flash_rwdata_start+0xffff7a90>
 40286d8:	21003fcc 	andi	r4,r4,255
 40286dc:	2002d41e 	bne	r4,zero,4029230 <___vfiprintf_internal_r+0x1444>
 40286e0:	a5000414 	ori	r20,r20,16
 40286e4:	a080080c 	andi	r2,r20,32
 40286e8:	103fb51e 	bne	r2,zero,40285c0 <__flash_rwdata_start+0xffff80e4>
 40286ec:	a080040c 	andi	r2,r20,16
 40286f0:	1001f826 	beq	r2,zero,4028ed4 <___vfiprintf_internal_r+0x10e8>
 40286f4:	da802217 	ldw	r10,136(sp)
 40286f8:	54800017 	ldw	r18,0(r10)
 40286fc:	52800104 	addi	r10,r10,4
 4028700:	da802215 	stw	r10,136(sp)
 4028704:	9027d7fa 	srai	r19,r18,31
 4028708:	9805883a 	mov	r2,r19
 402870c:	003fb206 	br	40285d8 <__flash_rwdata_start+0xffff80fc>
 4028710:	21003fcc 	andi	r4,r4,255
 4028714:	2002c41e 	bne	r4,zero,4029228 <___vfiprintf_internal_r+0x143c>
 4028718:	a5000414 	ori	r20,r20,16
 402871c:	a080080c 	andi	r2,r20,32
 4028720:	103f5f1e 	bne	r2,zero,40284a0 <__flash_rwdata_start+0xffff7fc4>
 4028724:	a080040c 	andi	r2,r20,16
 4028728:	10020f26 	beq	r2,zero,4028f68 <___vfiprintf_internal_r+0x117c>
 402872c:	da802217 	ldw	r10,136(sp)
 4028730:	d8001d85 	stb	zero,118(sp)
 4028734:	0027883a 	mov	r19,zero
 4028738:	50800104 	addi	r2,r10,4
 402873c:	54800017 	ldw	r18,0(r10)
 4028740:	48021116 	blt	r9,zero,4028f88 <___vfiprintf_internal_r+0x119c>
 4028744:	00ffdfc4 	movi	r3,-129
 4028748:	d8802215 	stw	r2,136(sp)
 402874c:	a0e8703a 	and	r20,r20,r3
 4028750:	903f5e1e 	bne	r18,zero,40284cc <__flash_rwdata_start+0xffff7ff0>
 4028754:	0039883a 	mov	fp,zero
 4028758:	4802a626 	beq	r9,zero,40291f4 <___vfiprintf_internal_r+0x1408>
 402875c:	0025883a 	mov	r18,zero
 4028760:	0027883a 	mov	r19,zero
 4028764:	003f5a06 	br	40284d0 <__flash_rwdata_start+0xffff7ff4>
 4028768:	21003fcc 	andi	r4,r4,255
 402876c:	20029f1e 	bne	r4,zero,40291ec <___vfiprintf_internal_r+0x1400>
 4028770:	a5000414 	ori	r20,r20,16
 4028774:	a080080c 	andi	r2,r20,32
 4028778:	10005e1e 	bne	r2,zero,40288f4 <___vfiprintf_internal_r+0xb08>
 402877c:	a080040c 	andi	r2,r20,16
 4028780:	1001a21e 	bne	r2,zero,4028e0c <___vfiprintf_internal_r+0x1020>
 4028784:	a080100c 	andi	r2,r20,64
 4028788:	d8001d85 	stb	zero,118(sp)
 402878c:	da802217 	ldw	r10,136(sp)
 4028790:	1002231e 	bne	r2,zero,4029020 <___vfiprintf_internal_r+0x1234>
 4028794:	50800104 	addi	r2,r10,4
 4028798:	54800017 	ldw	r18,0(r10)
 402879c:	0027883a 	mov	r19,zero
 40287a0:	4801a00e 	bge	r9,zero,4028e24 <___vfiprintf_internal_r+0x1038>
 40287a4:	d8802215 	stw	r2,136(sp)
 40287a8:	0039883a 	mov	fp,zero
 40287ac:	94c4b03a 	or	r2,r18,r19
 40287b0:	103f901e 	bne	r2,zero,40285f4 <__flash_rwdata_start+0xffff8118>
 40287b4:	00800044 	movi	r2,1
 40287b8:	10803fcc 	andi	r2,r2,255
 40287bc:	00c00044 	movi	r3,1
 40287c0:	10c05926 	beq	r2,r3,4028928 <___vfiprintf_internal_r+0xb3c>
 40287c4:	00c00084 	movi	r3,2
 40287c8:	10ffe41e 	bne	r2,r3,402875c <__flash_rwdata_start+0xffff8280>
 40287cc:	0025883a 	mov	r18,zero
 40287d0:	0027883a 	mov	r19,zero
 40287d4:	00013d06 	br	4028ccc <___vfiprintf_internal_r+0xee0>
 40287d8:	21003fcc 	andi	r4,r4,255
 40287dc:	2002811e 	bne	r4,zero,40291e4 <___vfiprintf_internal_r+0x13f8>
 40287e0:	00800034 	movhi	r2,0
 40287e4:	10803204 	addi	r2,r2,200
 40287e8:	d8802615 	stw	r2,152(sp)
 40287ec:	a080080c 	andi	r2,r20,32
 40287f0:	103f561e 	bne	r2,zero,402854c <__flash_rwdata_start+0xffff8070>
 40287f4:	a080040c 	andi	r2,r20,16
 40287f8:	1001d126 	beq	r2,zero,4028f40 <___vfiprintf_internal_r+0x1154>
 40287fc:	da802217 	ldw	r10,136(sp)
 4028800:	0027883a 	mov	r19,zero
 4028804:	54800017 	ldw	r18,0(r10)
 4028808:	52800104 	addi	r10,r10,4
 402880c:	da802215 	stw	r10,136(sp)
 4028810:	003f5306 	br	4028560 <__flash_rwdata_start+0xffff8084>
 4028814:	da802217 	ldw	r10,136(sp)
 4028818:	d8001d85 	stb	zero,118(sp)
 402881c:	55400017 	ldw	r21,0(r10)
 4028820:	50c00104 	addi	r3,r10,4
 4028824:	a8024226 	beq	r21,zero,4029130 <___vfiprintf_internal_r+0x1344>
 4028828:	48021816 	blt	r9,zero,402908c <___vfiprintf_internal_r+0x12a0>
 402882c:	480d883a 	mov	r6,r9
 4028830:	000b883a 	mov	r5,zero
 4028834:	a809883a 	mov	r4,r21
 4028838:	d8c02a15 	stw	r3,168(sp)
 402883c:	da002b15 	stw	r8,172(sp)
 4028840:	da402c15 	stw	r9,176(sp)
 4028844:	4025fe80 	call	4025fe8 <memchr>
 4028848:	d8c02a17 	ldw	r3,168(sp)
 402884c:	da002b17 	ldw	r8,172(sp)
 4028850:	da402c17 	ldw	r9,176(sp)
 4028854:	10024826 	beq	r2,zero,4029178 <___vfiprintf_internal_r+0x138c>
 4028858:	1567c83a 	sub	r19,r2,r21
 402885c:	df001d83 	ldbu	fp,118(sp)
 4028860:	d8c02215 	stw	r3,136(sp)
 4028864:	0013883a 	mov	r9,zero
 4028868:	003e6006 	br	40281ec <__flash_rwdata_start+0xffff7d10>
 402886c:	21003fcc 	andi	r4,r4,255
 4028870:	203fc026 	beq	r4,zero,4028774 <__flash_rwdata_start+0xffff8298>
 4028874:	d9c01d85 	stb	r7,118(sp)
 4028878:	003fbe06 	br	4028774 <__flash_rwdata_start+0xffff8298>
 402887c:	da802217 	ldw	r10,136(sp)
 4028880:	54400017 	ldw	r17,0(r10)
 4028884:	50800104 	addi	r2,r10,4
 4028888:	883e3b16 	blt	r17,zero,4028178 <__flash_rwdata_start+0xffff7c9c>
 402888c:	d8802215 	stw	r2,136(sp)
 4028890:	80c00007 	ldb	r3,0(r16)
 4028894:	003db406 	br	4027f68 <__flash_rwdata_start+0xffff7a8c>
 4028898:	01000044 	movi	r4,1
 402889c:	01c00ac4 	movi	r7,43
 40288a0:	80c00007 	ldb	r3,0(r16)
 40288a4:	003db006 	br	4027f68 <__flash_rwdata_start+0xffff7a8c>
 40288a8:	80c00007 	ldb	r3,0(r16)
 40288ac:	82800044 	addi	r10,r16,1
 40288b0:	1b423c26 	beq	r3,r13,40291a4 <___vfiprintf_internal_r+0x13b8>
 40288b4:	18bff404 	addi	r2,r3,-48
 40288b8:	0013883a 	mov	r9,zero
 40288bc:	30822b36 	bltu	r6,r2,402916c <___vfiprintf_internal_r+0x1380>
 40288c0:	50c00007 	ldb	r3,0(r10)
 40288c4:	4a4002a4 	muli	r9,r9,10
 40288c8:	54000044 	addi	r16,r10,1
 40288cc:	8015883a 	mov	r10,r16
 40288d0:	4893883a 	add	r9,r9,r2
 40288d4:	18bff404 	addi	r2,r3,-48
 40288d8:	30bff92e 	bgeu	r6,r2,40288c0 <__flash_rwdata_start+0xffff83e4>
 40288dc:	483da30e 	bge	r9,zero,4027f6c <__flash_rwdata_start+0xffff7a90>
 40288e0:	027fffc4 	movi	r9,-1
 40288e4:	003da106 	br	4027f6c <__flash_rwdata_start+0xffff7a90>
 40288e8:	a5001014 	ori	r20,r20,64
 40288ec:	80c00007 	ldb	r3,0(r16)
 40288f0:	003d9d06 	br	4027f68 <__flash_rwdata_start+0xffff7a8c>
 40288f4:	da802217 	ldw	r10,136(sp)
 40288f8:	d8001d85 	stb	zero,118(sp)
 40288fc:	50c00204 	addi	r3,r10,8
 4028900:	54800017 	ldw	r18,0(r10)
 4028904:	54c00117 	ldw	r19,4(r10)
 4028908:	4801ca16 	blt	r9,zero,4029034 <___vfiprintf_internal_r+0x1248>
 402890c:	013fdfc4 	movi	r4,-129
 4028910:	94c4b03a 	or	r2,r18,r19
 4028914:	d8c02215 	stw	r3,136(sp)
 4028918:	a128703a 	and	r20,r20,r4
 402891c:	0039883a 	mov	fp,zero
 4028920:	103f341e 	bne	r2,zero,40285f4 <__flash_rwdata_start+0xffff8118>
 4028924:	483e2e26 	beq	r9,zero,40281e0 <__flash_rwdata_start+0xffff7d04>
 4028928:	0025883a 	mov	r18,zero
 402892c:	94800c04 	addi	r18,r18,48
 4028930:	dc8019c5 	stb	r18,103(sp)
 4028934:	dcc02717 	ldw	r19,156(sp)
 4028938:	dd4019c4 	addi	r21,sp,103
 402893c:	003e2b06 	br	40281ec <__flash_rwdata_start+0xffff7d10>
 4028940:	21003fcc 	andi	r4,r4,255
 4028944:	2002361e 	bne	r4,zero,4029220 <___vfiprintf_internal_r+0x1434>
 4028948:	1801c126 	beq	r3,zero,4029050 <___vfiprintf_internal_r+0x1264>
 402894c:	04800044 	movi	r18,1
 4028950:	d8c01005 	stb	r3,64(sp)
 4028954:	d8001d85 	stb	zero,118(sp)
 4028958:	9027883a 	mov	r19,r18
 402895c:	dd401004 	addi	r21,sp,64
 4028960:	003f1106 	br	40285a8 <__flash_rwdata_start+0xffff80cc>
 4028964:	d9402117 	ldw	r5,132(sp)
 4028968:	d9002017 	ldw	r4,128(sp)
 402896c:	d9801a04 	addi	r6,sp,104
 4028970:	d9c02b15 	stw	r7,172(sp)
 4028974:	dbc02a15 	stw	r15,168(sp)
 4028978:	4027cd80 	call	4027cd8 <__sprint_r.part.0>
 402897c:	d9c02b17 	ldw	r7,172(sp)
 4028980:	dbc02a17 	ldw	r15,168(sp)
 4028984:	10006d1e 	bne	r2,zero,4028b3c <___vfiprintf_internal_r+0xd50>
 4028988:	d9801b17 	ldw	r6,108(sp)
 402898c:	d8801c17 	ldw	r2,112(sp)
 4028990:	d811883a 	mov	r8,sp
 4028994:	31400044 	addi	r5,r6,1
 4028998:	003e3306 	br	4028268 <__flash_rwdata_start+0xffff7d8c>
 402899c:	d9401b17 	ldw	r5,108(sp)
 40289a0:	d8801c17 	ldw	r2,112(sp)
 40289a4:	29000044 	addi	r4,r5,1
 40289a8:	d8c01d87 	ldb	r3,118(sp)
 40289ac:	183e4d26 	beq	r3,zero,40282e4 <__flash_rwdata_start+0xffff7e08>
 40289b0:	00c00044 	movi	r3,1
 40289b4:	d9401d84 	addi	r5,sp,118
 40289b8:	10c5883a 	add	r2,r2,r3
 40289bc:	41400015 	stw	r5,0(r8)
 40289c0:	40c00115 	stw	r3,4(r8)
 40289c4:	d8801c15 	stw	r2,112(sp)
 40289c8:	d9001b15 	stw	r4,108(sp)
 40289cc:	014001c4 	movi	r5,7
 40289d0:	2900a90e 	bge	r5,r4,4028c78 <___vfiprintf_internal_r+0xe8c>
 40289d4:	1000da1e 	bne	r2,zero,4028d40 <___vfiprintf_internal_r+0xf54>
 40289d8:	7000ab1e 	bne	r14,zero,4028c88 <___vfiprintf_internal_r+0xe9c>
 40289dc:	000b883a 	mov	r5,zero
 40289e0:	1809883a 	mov	r4,r3
 40289e4:	d811883a 	mov	r8,sp
 40289e8:	00c02004 	movi	r3,128
 40289ec:	e0fe4d26 	beq	fp,r3,4028324 <__flash_rwdata_start+0xffff7e48>
 40289f0:	4cf9c83a 	sub	fp,r9,r19
 40289f4:	073e7b0e 	bge	zero,fp,40283e4 <__flash_rwdata_start+0xffff7f08>
 40289f8:	01c00404 	movi	r7,16
 40289fc:	3f01900e 	bge	r7,fp,4029040 <___vfiprintf_internal_r+0x1254>
 4028a00:	00c00034 	movhi	r3,0
 4028a04:	18c09804 	addi	r3,r3,608
 4028a08:	d8c02415 	stw	r3,144(sp)
 4028a0c:	034001c4 	movi	r13,7
 4028a10:	00000506 	br	4028a28 <___vfiprintf_internal_r+0xc3c>
 4028a14:	29000084 	addi	r4,r5,2
 4028a18:	42000204 	addi	r8,r8,8
 4028a1c:	180b883a 	mov	r5,r3
 4028a20:	e73ffc04 	addi	fp,fp,-16
 4028a24:	3f000d0e 	bge	r7,fp,4028a5c <___vfiprintf_internal_r+0xc70>
 4028a28:	10800404 	addi	r2,r2,16
 4028a2c:	28c00044 	addi	r3,r5,1
 4028a30:	45c00015 	stw	r23,0(r8)
 4028a34:	41c00115 	stw	r7,4(r8)
 4028a38:	d8801c15 	stw	r2,112(sp)
 4028a3c:	d8c01b15 	stw	r3,108(sp)
 4028a40:	68fff40e 	bge	r13,r3,4028a14 <__flash_rwdata_start+0xffff8538>
 4028a44:	1000101e 	bne	r2,zero,4028a88 <___vfiprintf_internal_r+0xc9c>
 4028a48:	e73ffc04 	addi	fp,fp,-16
 4028a4c:	01000044 	movi	r4,1
 4028a50:	000b883a 	mov	r5,zero
 4028a54:	d811883a 	mov	r8,sp
 4028a58:	3f3ff316 	blt	r7,fp,4028a28 <__flash_rwdata_start+0xffff854c>
 4028a5c:	da802417 	ldw	r10,144(sp)
 4028a60:	1705883a 	add	r2,r2,fp
 4028a64:	47000115 	stw	fp,4(r8)
 4028a68:	42800015 	stw	r10,0(r8)
 4028a6c:	d8801c15 	stw	r2,112(sp)
 4028a70:	d9001b15 	stw	r4,108(sp)
 4028a74:	00c001c4 	movi	r3,7
 4028a78:	19003616 	blt	r3,r4,4028b54 <___vfiprintf_internal_r+0xd68>
 4028a7c:	42000204 	addi	r8,r8,8
 4028a80:	21000044 	addi	r4,r4,1
 4028a84:	003e5706 	br	40283e4 <__flash_rwdata_start+0xffff7f08>
 4028a88:	d9402117 	ldw	r5,132(sp)
 4028a8c:	d9002017 	ldw	r4,128(sp)
 4028a90:	d9801a04 	addi	r6,sp,104
 4028a94:	d9c02b15 	stw	r7,172(sp)
 4028a98:	db402a15 	stw	r13,168(sp)
 4028a9c:	4027cd80 	call	4027cd8 <__sprint_r.part.0>
 4028aa0:	d9c02b17 	ldw	r7,172(sp)
 4028aa4:	db402a17 	ldw	r13,168(sp)
 4028aa8:	1000241e 	bne	r2,zero,4028b3c <___vfiprintf_internal_r+0xd50>
 4028aac:	d9401b17 	ldw	r5,108(sp)
 4028ab0:	d8801c17 	ldw	r2,112(sp)
 4028ab4:	d811883a 	mov	r8,sp
 4028ab8:	29000044 	addi	r4,r5,1
 4028abc:	003fd806 	br	4028a20 <__flash_rwdata_start+0xffff8544>
 4028ac0:	d9401b17 	ldw	r5,108(sp)
 4028ac4:	00c00034 	movhi	r3,0
 4028ac8:	18c09c04 	addi	r3,r3,624
 4028acc:	d8c02415 	stw	r3,144(sp)
 4028ad0:	29400044 	addi	r5,r5,1
 4028ad4:	d8c02417 	ldw	r3,144(sp)
 4028ad8:	14c5883a 	add	r2,r2,r19
 4028adc:	44c00115 	stw	r19,4(r8)
 4028ae0:	40c00015 	stw	r3,0(r8)
 4028ae4:	d8801c15 	stw	r2,112(sp)
 4028ae8:	d9401b15 	stw	r5,108(sp)
 4028aec:	00c001c4 	movi	r3,7
 4028af0:	1940070e 	bge	r3,r5,4028b10 <___vfiprintf_internal_r+0xd24>
 4028af4:	103e4826 	beq	r2,zero,4028418 <__flash_rwdata_start+0xffff7f3c>
 4028af8:	d9402117 	ldw	r5,132(sp)
 4028afc:	d9002017 	ldw	r4,128(sp)
 4028b00:	d9801a04 	addi	r6,sp,104
 4028b04:	4027cd80 	call	4027cd8 <__sprint_r.part.0>
 4028b08:	10000c1e 	bne	r2,zero,4028b3c <___vfiprintf_internal_r+0xd50>
 4028b0c:	d8801c17 	ldw	r2,112(sp)
 4028b10:	8c80010e 	bge	r17,r18,4028b18 <___vfiprintf_internal_r+0xd2c>
 4028b14:	9023883a 	mov	r17,r18
 4028b18:	da802317 	ldw	r10,140(sp)
 4028b1c:	5455883a 	add	r10,r10,r17
 4028b20:	da802315 	stw	r10,140(sp)
 4028b24:	103e4126 	beq	r2,zero,402842c <__flash_rwdata_start+0xffff7f50>
 4028b28:	d9402117 	ldw	r5,132(sp)
 4028b2c:	d9002017 	ldw	r4,128(sp)
 4028b30:	d9801a04 	addi	r6,sp,104
 4028b34:	4027cd80 	call	4027cd8 <__sprint_r.part.0>
 4028b38:	103e3c26 	beq	r2,zero,402842c <__flash_rwdata_start+0xffff7f50>
 4028b3c:	dd002117 	ldw	r20,132(sp)
 4028b40:	a080030b 	ldhu	r2,12(r20)
 4028b44:	1080100c 	andi	r2,r2,64
 4028b48:	1001231e 	bne	r2,zero,4028fd8 <___vfiprintf_internal_r+0x11ec>
 4028b4c:	d8802317 	ldw	r2,140(sp)
 4028b50:	003d7b06 	br	4028140 <__flash_rwdata_start+0xffff7c64>
 4028b54:	1000991e 	bne	r2,zero,4028dbc <___vfiprintf_internal_r+0xfd0>
 4028b58:	00c00044 	movi	r3,1
 4028b5c:	9805883a 	mov	r2,r19
 4028b60:	dd400015 	stw	r21,0(sp)
 4028b64:	dcc00115 	stw	r19,4(sp)
 4028b68:	dcc01c15 	stw	r19,112(sp)
 4028b6c:	d8c01b15 	stw	r3,108(sp)
 4028b70:	d811883a 	mov	r8,sp
 4028b74:	42000204 	addi	r8,r8,8
 4028b78:	a2c0010c 	andi	r11,r20,4
 4028b7c:	583fe426 	beq	r11,zero,4028b10 <__flash_rwdata_start+0xffff8634>
 4028b80:	8ca7c83a 	sub	r19,r17,r18
 4028b84:	04ffe20e 	bge	zero,r19,4028b10 <__flash_rwdata_start+0xffff8634>
 4028b88:	01c00404 	movi	r7,16
 4028b8c:	3cffcc0e 	bge	r7,r19,4028ac0 <__flash_rwdata_start+0xffff85e4>
 4028b90:	02800034 	movhi	r10,0
 4028b94:	52809c04 	addi	r10,r10,624
 4028b98:	d9001b17 	ldw	r4,108(sp)
 4028b9c:	da802415 	stw	r10,144(sp)
 4028ba0:	382b883a 	mov	r21,r7
 4028ba4:	050001c4 	movi	r20,7
 4028ba8:	df002017 	ldw	fp,128(sp)
 4028bac:	00000506 	br	4028bc4 <___vfiprintf_internal_r+0xdd8>
 4028bb0:	21400084 	addi	r5,r4,2
 4028bb4:	42000204 	addi	r8,r8,8
 4028bb8:	1809883a 	mov	r4,r3
 4028bbc:	9cfffc04 	addi	r19,r19,-16
 4028bc0:	acffc40e 	bge	r21,r19,4028ad4 <__flash_rwdata_start+0xffff85f8>
 4028bc4:	10800404 	addi	r2,r2,16
 4028bc8:	20c00044 	addi	r3,r4,1
 4028bcc:	45800015 	stw	r22,0(r8)
 4028bd0:	45400115 	stw	r21,4(r8)
 4028bd4:	d8801c15 	stw	r2,112(sp)
 4028bd8:	d8c01b15 	stw	r3,108(sp)
 4028bdc:	a0fff40e 	bge	r20,r3,4028bb0 <__flash_rwdata_start+0xffff86d4>
 4028be0:	1000041e 	bne	r2,zero,4028bf4 <___vfiprintf_internal_r+0xe08>
 4028be4:	01400044 	movi	r5,1
 4028be8:	0009883a 	mov	r4,zero
 4028bec:	d811883a 	mov	r8,sp
 4028bf0:	003ff206 	br	4028bbc <__flash_rwdata_start+0xffff86e0>
 4028bf4:	d9402117 	ldw	r5,132(sp)
 4028bf8:	d9801a04 	addi	r6,sp,104
 4028bfc:	e009883a 	mov	r4,fp
 4028c00:	4027cd80 	call	4027cd8 <__sprint_r.part.0>
 4028c04:	103fcd1e 	bne	r2,zero,4028b3c <__flash_rwdata_start+0xffff8660>
 4028c08:	d9001b17 	ldw	r4,108(sp)
 4028c0c:	d8801c17 	ldw	r2,112(sp)
 4028c10:	d811883a 	mov	r8,sp
 4028c14:	21400044 	addi	r5,r4,1
 4028c18:	003fe806 	br	4028bbc <__flash_rwdata_start+0xffff86e0>
 4028c1c:	d9402117 	ldw	r5,132(sp)
 4028c20:	d9002017 	ldw	r4,128(sp)
 4028c24:	d9801a04 	addi	r6,sp,104
 4028c28:	d9c02b15 	stw	r7,172(sp)
 4028c2c:	db402a15 	stw	r13,168(sp)
 4028c30:	4027cd80 	call	4027cd8 <__sprint_r.part.0>
 4028c34:	d9c02b17 	ldw	r7,172(sp)
 4028c38:	db402a17 	ldw	r13,168(sp)
 4028c3c:	103fbf1e 	bne	r2,zero,4028b3c <__flash_rwdata_start+0xffff8660>
 4028c40:	d9401b17 	ldw	r5,108(sp)
 4028c44:	d8801c17 	ldw	r2,112(sp)
 4028c48:	d811883a 	mov	r8,sp
 4028c4c:	29800044 	addi	r6,r5,1
 4028c50:	003dc406 	br	4028364 <__flash_rwdata_start+0xffff7e88>
 4028c54:	1000d21e 	bne	r2,zero,4028fa0 <___vfiprintf_internal_r+0x11b4>
 4028c58:	d8c01d87 	ldb	r3,118(sp)
 4028c5c:	18009526 	beq	r3,zero,4028eb4 <___vfiprintf_internal_r+0x10c8>
 4028c60:	00800044 	movi	r2,1
 4028c64:	d8c01d84 	addi	r3,sp,118
 4028c68:	1009883a 	mov	r4,r2
 4028c6c:	d8c00015 	stw	r3,0(sp)
 4028c70:	d8800115 	stw	r2,4(sp)
 4028c74:	d811883a 	mov	r8,sp
 4028c78:	200b883a 	mov	r5,r4
 4028c7c:	42000204 	addi	r8,r8,8
 4028c80:	21000044 	addi	r4,r4,1
 4028c84:	003d9706 	br	40282e4 <__flash_rwdata_start+0xffff7e08>
 4028c88:	d9001d04 	addi	r4,sp,116
 4028c8c:	00800084 	movi	r2,2
 4028c90:	d9000015 	stw	r4,0(sp)
 4028c94:	d8800115 	stw	r2,4(sp)
 4028c98:	1809883a 	mov	r4,r3
 4028c9c:	d811883a 	mov	r8,sp
 4028ca0:	200b883a 	mov	r5,r4
 4028ca4:	42000204 	addi	r8,r8,8
 4028ca8:	21000044 	addi	r4,r4,1
 4028cac:	003f4e06 	br	40289e8 <__flash_rwdata_start+0xffff850c>
 4028cb0:	d8001d85 	stb	zero,118(sp)
 4028cb4:	48005016 	blt	r9,zero,4028df8 <___vfiprintf_internal_r+0x100c>
 4028cb8:	00ffdfc4 	movi	r3,-129
 4028cbc:	94c4b03a 	or	r2,r18,r19
 4028cc0:	a0e8703a 	and	r20,r20,r3
 4028cc4:	103d4426 	beq	r2,zero,40281d8 <__flash_rwdata_start+0xffff7cfc>
 4028cc8:	0039883a 	mov	fp,zero
 4028ccc:	d9002617 	ldw	r4,152(sp)
 4028cd0:	dd401a04 	addi	r21,sp,104
 4028cd4:	908003cc 	andi	r2,r18,15
 4028cd8:	9806973a 	slli	r3,r19,28
 4028cdc:	2085883a 	add	r2,r4,r2
 4028ce0:	9024d13a 	srli	r18,r18,4
 4028ce4:	10800003 	ldbu	r2,0(r2)
 4028ce8:	9826d13a 	srli	r19,r19,4
 4028cec:	ad7fffc4 	addi	r21,r21,-1
 4028cf0:	1ca4b03a 	or	r18,r3,r18
 4028cf4:	a8800005 	stb	r2,0(r21)
 4028cf8:	94c4b03a 	or	r2,r18,r19
 4028cfc:	103ff51e 	bne	r2,zero,4028cd4 <__flash_rwdata_start+0xffff87f8>
 4028d00:	003e5906 	br	4028668 <__flash_rwdata_start+0xffff818c>
 4028d04:	d9402117 	ldw	r5,132(sp)
 4028d08:	d9002017 	ldw	r4,128(sp)
 4028d0c:	d9801a04 	addi	r6,sp,104
 4028d10:	4027cd80 	call	4027cd8 <__sprint_r.part.0>
 4028d14:	103f891e 	bne	r2,zero,4028b3c <__flash_rwdata_start+0xffff8660>
 4028d18:	d8801c17 	ldw	r2,112(sp)
 4028d1c:	d811883a 	mov	r8,sp
 4028d20:	003f9506 	br	4028b78 <__flash_rwdata_start+0xffff869c>
 4028d24:	d9402117 	ldw	r5,132(sp)
 4028d28:	d9002017 	ldw	r4,128(sp)
 4028d2c:	d9801a04 	addi	r6,sp,104
 4028d30:	4027cd80 	call	4027cd8 <__sprint_r.part.0>
 4028d34:	103f811e 	bne	r2,zero,4028b3c <__flash_rwdata_start+0xffff8660>
 4028d38:	d811883a 	mov	r8,sp
 4028d3c:	003ced06 	br	40280f4 <__flash_rwdata_start+0xffff7c18>
 4028d40:	d9402117 	ldw	r5,132(sp)
 4028d44:	d9002017 	ldw	r4,128(sp)
 4028d48:	d9801a04 	addi	r6,sp,104
 4028d4c:	da402c15 	stw	r9,176(sp)
 4028d50:	db802a15 	stw	r14,168(sp)
 4028d54:	4027cd80 	call	4027cd8 <__sprint_r.part.0>
 4028d58:	da402c17 	ldw	r9,176(sp)
 4028d5c:	db802a17 	ldw	r14,168(sp)
 4028d60:	103f761e 	bne	r2,zero,4028b3c <__flash_rwdata_start+0xffff8660>
 4028d64:	d9401b17 	ldw	r5,108(sp)
 4028d68:	d8801c17 	ldw	r2,112(sp)
 4028d6c:	d811883a 	mov	r8,sp
 4028d70:	29000044 	addi	r4,r5,1
 4028d74:	003d5b06 	br	40282e4 <__flash_rwdata_start+0xffff7e08>
 4028d78:	d9402117 	ldw	r5,132(sp)
 4028d7c:	d9002017 	ldw	r4,128(sp)
 4028d80:	d9801a04 	addi	r6,sp,104
 4028d84:	da402c15 	stw	r9,176(sp)
 4028d88:	4027cd80 	call	4027cd8 <__sprint_r.part.0>
 4028d8c:	da402c17 	ldw	r9,176(sp)
 4028d90:	103f6a1e 	bne	r2,zero,4028b3c <__flash_rwdata_start+0xffff8660>
 4028d94:	d9401b17 	ldw	r5,108(sp)
 4028d98:	d8801c17 	ldw	r2,112(sp)
 4028d9c:	d811883a 	mov	r8,sp
 4028da0:	29000044 	addi	r4,r5,1
 4028da4:	003f1006 	br	40289e8 <__flash_rwdata_start+0xffff850c>
 4028da8:	1000c31e 	bne	r2,zero,40290b8 <___vfiprintf_internal_r+0x12cc>
 4028dac:	01000044 	movi	r4,1
 4028db0:	000b883a 	mov	r5,zero
 4028db4:	d811883a 	mov	r8,sp
 4028db8:	003f0d06 	br	40289f0 <__flash_rwdata_start+0xffff8514>
 4028dbc:	d9402117 	ldw	r5,132(sp)
 4028dc0:	d9002017 	ldw	r4,128(sp)
 4028dc4:	d9801a04 	addi	r6,sp,104
 4028dc8:	4027cd80 	call	4027cd8 <__sprint_r.part.0>
 4028dcc:	103f5b1e 	bne	r2,zero,4028b3c <__flash_rwdata_start+0xffff8660>
 4028dd0:	d9001b17 	ldw	r4,108(sp)
 4028dd4:	d8801c17 	ldw	r2,112(sp)
 4028dd8:	d811883a 	mov	r8,sp
 4028ddc:	21000044 	addi	r4,r4,1
 4028de0:	003d8006 	br	40283e4 <__flash_rwdata_start+0xffff7f08>
 4028de4:	01000034 	movhi	r4,0
 4028de8:	21003704 	addi	r4,r4,220
 4028dec:	d9002615 	stw	r4,152(sp)
 4028df0:	d8c02215 	stw	r3,136(sp)
 4028df4:	1029883a 	mov	r20,r2
 4028df8:	94c4b03a 	or	r2,r18,r19
 4028dfc:	103fb21e 	bne	r2,zero,4028cc8 <__flash_rwdata_start+0xffff87ec>
 4028e00:	0039883a 	mov	fp,zero
 4028e04:	00800084 	movi	r2,2
 4028e08:	003e6b06 	br	40287b8 <__flash_rwdata_start+0xffff82dc>
 4028e0c:	da802217 	ldw	r10,136(sp)
 4028e10:	d8001d85 	stb	zero,118(sp)
 4028e14:	0027883a 	mov	r19,zero
 4028e18:	50800104 	addi	r2,r10,4
 4028e1c:	54800017 	ldw	r18,0(r10)
 4028e20:	483e6016 	blt	r9,zero,40287a4 <__flash_rwdata_start+0xffff82c8>
 4028e24:	00ffdfc4 	movi	r3,-129
 4028e28:	d8802215 	stw	r2,136(sp)
 4028e2c:	a0e8703a 	and	r20,r20,r3
 4028e30:	0039883a 	mov	fp,zero
 4028e34:	903ebb26 	beq	r18,zero,4028924 <__flash_rwdata_start+0xffff8448>
 4028e38:	00800244 	movi	r2,9
 4028e3c:	14bdee36 	bltu	r2,r18,40285f8 <__flash_rwdata_start+0xffff811c>
 4028e40:	003eba06 	br	402892c <__flash_rwdata_start+0xffff8450>
 4028e44:	00800c04 	movi	r2,48
 4028e48:	d8c01d45 	stb	r3,117(sp)
 4028e4c:	d8801d05 	stb	r2,116(sp)
 4028e50:	d8001d85 	stb	zero,118(sp)
 4028e54:	a0c00094 	ori	r3,r20,2
 4028e58:	4800a916 	blt	r9,zero,4029100 <___vfiprintf_internal_r+0x1314>
 4028e5c:	00bfdfc4 	movi	r2,-129
 4028e60:	a096703a 	and	r11,r20,r2
 4028e64:	5d000094 	ori	r20,r11,2
 4028e68:	0039883a 	mov	fp,zero
 4028e6c:	003f9706 	br	4028ccc <__flash_rwdata_start+0xffff87f0>
 4028e70:	8025883a 	mov	r18,r16
 4028e74:	003c2e06 	br	4027f30 <__flash_rwdata_start+0xffff7a54>
 4028e78:	00800034 	movhi	r2,0
 4028e7c:	10803704 	addi	r2,r2,220
 4028e80:	0039883a 	mov	fp,zero
 4028e84:	d8802615 	stw	r2,152(sp)
 4028e88:	003f9006 	br	4028ccc <__flash_rwdata_start+0xffff87f0>
 4028e8c:	04a5c83a 	sub	r18,zero,r18
 4028e90:	07000b44 	movi	fp,45
 4028e94:	9004c03a 	cmpne	r2,r18,zero
 4028e98:	04e7c83a 	sub	r19,zero,r19
 4028e9c:	df001d85 	stb	fp,118(sp)
 4028ea0:	98a7c83a 	sub	r19,r19,r2
 4028ea4:	48009f16 	blt	r9,zero,4029124 <___vfiprintf_internal_r+0x1338>
 4028ea8:	00bfdfc4 	movi	r2,-129
 4028eac:	a0a8703a 	and	r20,r20,r2
 4028eb0:	003dd006 	br	40285f4 <__flash_rwdata_start+0xffff8118>
 4028eb4:	70004c26 	beq	r14,zero,4028fe8 <___vfiprintf_internal_r+0x11fc>
 4028eb8:	00800084 	movi	r2,2
 4028ebc:	d8c01d04 	addi	r3,sp,116
 4028ec0:	d8c00015 	stw	r3,0(sp)
 4028ec4:	d8800115 	stw	r2,4(sp)
 4028ec8:	01000044 	movi	r4,1
 4028ecc:	d811883a 	mov	r8,sp
 4028ed0:	003f7306 	br	4028ca0 <__flash_rwdata_start+0xffff87c4>
 4028ed4:	a080100c 	andi	r2,r20,64
 4028ed8:	da802217 	ldw	r10,136(sp)
 4028edc:	103e0626 	beq	r2,zero,40286f8 <__flash_rwdata_start+0xffff821c>
 4028ee0:	5480000f 	ldh	r18,0(r10)
 4028ee4:	52800104 	addi	r10,r10,4
 4028ee8:	da802215 	stw	r10,136(sp)
 4028eec:	9027d7fa 	srai	r19,r18,31
 4028ef0:	9805883a 	mov	r2,r19
 4028ef4:	003db806 	br	40285d8 <__flash_rwdata_start+0xffff80fc>
 4028ef8:	a080040c 	andi	r2,r20,16
 4028efc:	1000091e 	bne	r2,zero,4028f24 <___vfiprintf_internal_r+0x1138>
 4028f00:	a2c0100c 	andi	r11,r20,64
 4028f04:	58000726 	beq	r11,zero,4028f24 <___vfiprintf_internal_r+0x1138>
 4028f08:	da802217 	ldw	r10,136(sp)
 4028f0c:	50800017 	ldw	r2,0(r10)
 4028f10:	52800104 	addi	r10,r10,4
 4028f14:	da802215 	stw	r10,136(sp)
 4028f18:	da802317 	ldw	r10,140(sp)
 4028f1c:	1280000d 	sth	r10,0(r2)
 4028f20:	003be706 	br	4027ec0 <__flash_rwdata_start+0xffff79e4>
 4028f24:	da802217 	ldw	r10,136(sp)
 4028f28:	50800017 	ldw	r2,0(r10)
 4028f2c:	52800104 	addi	r10,r10,4
 4028f30:	da802215 	stw	r10,136(sp)
 4028f34:	da802317 	ldw	r10,140(sp)
 4028f38:	12800015 	stw	r10,0(r2)
 4028f3c:	003be006 	br	4027ec0 <__flash_rwdata_start+0xffff79e4>
 4028f40:	a080100c 	andi	r2,r20,64
 4028f44:	da802217 	ldw	r10,136(sp)
 4028f48:	10003026 	beq	r2,zero,402900c <___vfiprintf_internal_r+0x1220>
 4028f4c:	5480000b 	ldhu	r18,0(r10)
 4028f50:	52800104 	addi	r10,r10,4
 4028f54:	0027883a 	mov	r19,zero
 4028f58:	da802215 	stw	r10,136(sp)
 4028f5c:	003d8006 	br	4028560 <__flash_rwdata_start+0xffff8084>
 4028f60:	80c00007 	ldb	r3,0(r16)
 4028f64:	003c0006 	br	4027f68 <__flash_rwdata_start+0xffff7a8c>
 4028f68:	a080100c 	andi	r2,r20,64
 4028f6c:	d8001d85 	stb	zero,118(sp)
 4028f70:	da802217 	ldw	r10,136(sp)
 4028f74:	1000201e 	bne	r2,zero,4028ff8 <___vfiprintf_internal_r+0x120c>
 4028f78:	50800104 	addi	r2,r10,4
 4028f7c:	54800017 	ldw	r18,0(r10)
 4028f80:	0027883a 	mov	r19,zero
 4028f84:	483def0e 	bge	r9,zero,4028744 <__flash_rwdata_start+0xffff8268>
 4028f88:	94c6b03a 	or	r3,r18,r19
 4028f8c:	d8802215 	stw	r2,136(sp)
 4028f90:	183d4e1e 	bne	r3,zero,40284cc <__flash_rwdata_start+0xffff7ff0>
 4028f94:	0039883a 	mov	fp,zero
 4028f98:	0005883a 	mov	r2,zero
 4028f9c:	003e0606 	br	40287b8 <__flash_rwdata_start+0xffff82dc>
 4028fa0:	d9402117 	ldw	r5,132(sp)
 4028fa4:	d9002017 	ldw	r4,128(sp)
 4028fa8:	d9801a04 	addi	r6,sp,104
 4028fac:	da402c15 	stw	r9,176(sp)
 4028fb0:	db802a15 	stw	r14,168(sp)
 4028fb4:	4027cd80 	call	4027cd8 <__sprint_r.part.0>
 4028fb8:	da402c17 	ldw	r9,176(sp)
 4028fbc:	db802a17 	ldw	r14,168(sp)
 4028fc0:	103ede1e 	bne	r2,zero,4028b3c <__flash_rwdata_start+0xffff8660>
 4028fc4:	d9401b17 	ldw	r5,108(sp)
 4028fc8:	d8801c17 	ldw	r2,112(sp)
 4028fcc:	d811883a 	mov	r8,sp
 4028fd0:	29000044 	addi	r4,r5,1
 4028fd4:	003e7406 	br	40289a8 <__flash_rwdata_start+0xffff84cc>
 4028fd8:	00bfffc4 	movi	r2,-1
 4028fdc:	003c5806 	br	4028140 <__flash_rwdata_start+0xffff7c64>
 4028fe0:	d811883a 	mov	r8,sp
 4028fe4:	003ee806 	br	4028b88 <__flash_rwdata_start+0xffff86ac>
 4028fe8:	000b883a 	mov	r5,zero
 4028fec:	01000044 	movi	r4,1
 4028ff0:	d811883a 	mov	r8,sp
 4028ff4:	003e7c06 	br	40289e8 <__flash_rwdata_start+0xffff850c>
 4028ff8:	50800104 	addi	r2,r10,4
 4028ffc:	5480000b 	ldhu	r18,0(r10)
 4029000:	0027883a 	mov	r19,zero
 4029004:	483dcf0e 	bge	r9,zero,4028744 <__flash_rwdata_start+0xffff8268>
 4029008:	003fdf06 	br	4028f88 <__flash_rwdata_start+0xffff8aac>
 402900c:	54800017 	ldw	r18,0(r10)
 4029010:	52800104 	addi	r10,r10,4
 4029014:	0027883a 	mov	r19,zero
 4029018:	da802215 	stw	r10,136(sp)
 402901c:	003d5006 	br	4028560 <__flash_rwdata_start+0xffff8084>
 4029020:	50800104 	addi	r2,r10,4
 4029024:	5480000b 	ldhu	r18,0(r10)
 4029028:	0027883a 	mov	r19,zero
 402902c:	483f7d0e 	bge	r9,zero,4028e24 <__flash_rwdata_start+0xffff8948>
 4029030:	003ddc06 	br	40287a4 <__flash_rwdata_start+0xffff82c8>
 4029034:	d8c02215 	stw	r3,136(sp)
 4029038:	0039883a 	mov	fp,zero
 402903c:	003ddb06 	br	40287ac <__flash_rwdata_start+0xffff82d0>
 4029040:	02800034 	movhi	r10,0
 4029044:	52809804 	addi	r10,r10,608
 4029048:	da802415 	stw	r10,144(sp)
 402904c:	003e8306 	br	4028a5c <__flash_rwdata_start+0xffff8580>
 4029050:	d8801c17 	ldw	r2,112(sp)
 4029054:	dd002117 	ldw	r20,132(sp)
 4029058:	103eb926 	beq	r2,zero,4028b40 <__flash_rwdata_start+0xffff8664>
 402905c:	d9002017 	ldw	r4,128(sp)
 4029060:	d9801a04 	addi	r6,sp,104
 4029064:	a00b883a 	mov	r5,r20
 4029068:	4027cd80 	call	4027cd8 <__sprint_r.part.0>
 402906c:	003eb406 	br	4028b40 <__flash_rwdata_start+0xffff8664>
 4029070:	80c00043 	ldbu	r3,1(r16)
 4029074:	a5000814 	ori	r20,r20,32
 4029078:	84000044 	addi	r16,r16,1
 402907c:	18c03fcc 	andi	r3,r3,255
 4029080:	18c0201c 	xori	r3,r3,128
 4029084:	18ffe004 	addi	r3,r3,-128
 4029088:	003bb706 	br	4027f68 <__flash_rwdata_start+0xffff7a8c>
 402908c:	a809883a 	mov	r4,r21
 4029090:	d8c02a15 	stw	r3,168(sp)
 4029094:	da002b15 	stw	r8,172(sp)
 4029098:	40207400 	call	4020740 <strlen>
 402909c:	d8c02a17 	ldw	r3,168(sp)
 40290a0:	1027883a 	mov	r19,r2
 40290a4:	df001d83 	ldbu	fp,118(sp)
 40290a8:	d8c02215 	stw	r3,136(sp)
 40290ac:	0013883a 	mov	r9,zero
 40290b0:	da002b17 	ldw	r8,172(sp)
 40290b4:	003c4d06 	br	40281ec <__flash_rwdata_start+0xffff7d10>
 40290b8:	d9402117 	ldw	r5,132(sp)
 40290bc:	d9002017 	ldw	r4,128(sp)
 40290c0:	d9801a04 	addi	r6,sp,104
 40290c4:	da402c15 	stw	r9,176(sp)
 40290c8:	4027cd80 	call	4027cd8 <__sprint_r.part.0>
 40290cc:	da402c17 	ldw	r9,176(sp)
 40290d0:	103e9a1e 	bne	r2,zero,4028b3c <__flash_rwdata_start+0xffff8660>
 40290d4:	d9401b17 	ldw	r5,108(sp)
 40290d8:	d8801c17 	ldw	r2,112(sp)
 40290dc:	d811883a 	mov	r8,sp
 40290e0:	29000044 	addi	r4,r5,1
 40290e4:	003e4206 	br	40289f0 <__flash_rwdata_start+0xffff8514>
 40290e8:	d9401b17 	ldw	r5,108(sp)
 40290ec:	01000034 	movhi	r4,0
 40290f0:	21009c04 	addi	r4,r4,624
 40290f4:	d9002415 	stw	r4,144(sp)
 40290f8:	29400044 	addi	r5,r5,1
 40290fc:	003c6d06 	br	40282b4 <__flash_rwdata_start+0xffff7dd8>
 4029100:	0039883a 	mov	fp,zero
 4029104:	00800084 	movi	r2,2
 4029108:	10803fcc 	andi	r2,r2,255
 402910c:	01000044 	movi	r4,1
 4029110:	11001e26 	beq	r2,r4,402918c <___vfiprintf_internal_r+0x13a0>
 4029114:	01000084 	movi	r4,2
 4029118:	11001e1e 	bne	r2,r4,4029194 <___vfiprintf_internal_r+0x13a8>
 402911c:	1829883a 	mov	r20,r3
 4029120:	003eea06 	br	4028ccc <__flash_rwdata_start+0xffff87f0>
 4029124:	a007883a 	mov	r3,r20
 4029128:	00800044 	movi	r2,1
 402912c:	003ff606 	br	4029108 <__flash_rwdata_start+0xffff8c2c>
 4029130:	00800184 	movi	r2,6
 4029134:	1240012e 	bgeu	r2,r9,402913c <___vfiprintf_internal_r+0x1350>
 4029138:	1013883a 	mov	r9,r2
 402913c:	4827883a 	mov	r19,r9
 4029140:	4825883a 	mov	r18,r9
 4029144:	48001516 	blt	r9,zero,402919c <___vfiprintf_internal_r+0x13b0>
 4029148:	05400034 	movhi	r21,0
 402914c:	d8c02215 	stw	r3,136(sp)
 4029150:	ad403c04 	addi	r21,r21,240
 4029154:	003d1406 	br	40285a8 <__flash_rwdata_start+0xffff80cc>
 4029158:	02800034 	movhi	r10,0
 402915c:	52809804 	addi	r10,r10,608
 4029160:	da802415 	stw	r10,144(sp)
 4029164:	200d883a 	mov	r6,r4
 4029168:	003c9106 	br	40283b0 <__flash_rwdata_start+0xffff7ed4>
 402916c:	5021883a 	mov	r16,r10
 4029170:	0013883a 	mov	r9,zero
 4029174:	003b7d06 	br	4027f6c <__flash_rwdata_start+0xffff7a90>
 4029178:	4827883a 	mov	r19,r9
 402917c:	df001d83 	ldbu	fp,118(sp)
 4029180:	d8c02215 	stw	r3,136(sp)
 4029184:	0013883a 	mov	r9,zero
 4029188:	003c1806 	br	40281ec <__flash_rwdata_start+0xffff7d10>
 402918c:	1829883a 	mov	r20,r3
 4029190:	003d1806 	br	40285f4 <__flash_rwdata_start+0xffff8118>
 4029194:	1829883a 	mov	r20,r3
 4029198:	003ccd06 	br	40284d0 <__flash_rwdata_start+0xffff7ff4>
 402919c:	0025883a 	mov	r18,zero
 40291a0:	003fe906 	br	4029148 <__flash_rwdata_start+0xffff8c6c>
 40291a4:	d8802217 	ldw	r2,136(sp)
 40291a8:	80c00043 	ldbu	r3,1(r16)
 40291ac:	5021883a 	mov	r16,r10
 40291b0:	12400017 	ldw	r9,0(r2)
 40291b4:	10800104 	addi	r2,r2,4
 40291b8:	d8802215 	stw	r2,136(sp)
 40291bc:	483faf0e 	bge	r9,zero,402907c <__flash_rwdata_start+0xffff8ba0>
 40291c0:	18c03fcc 	andi	r3,r3,255
 40291c4:	18c0201c 	xori	r3,r3,128
 40291c8:	027fffc4 	movi	r9,-1
 40291cc:	18ffe004 	addi	r3,r3,-128
 40291d0:	003b6506 	br	4027f68 <__flash_rwdata_start+0xffff7a8c>
 40291d4:	d9c01d85 	stb	r7,118(sp)
 40291d8:	003ca006 	br	402845c <__flash_rwdata_start+0xffff7f80>
 40291dc:	d9c01d85 	stb	r7,118(sp)
 40291e0:	003cad06 	br	4028498 <__flash_rwdata_start+0xffff7fbc>
 40291e4:	d9c01d85 	stb	r7,118(sp)
 40291e8:	003d7d06 	br	40287e0 <__flash_rwdata_start+0xffff8304>
 40291ec:	d9c01d85 	stb	r7,118(sp)
 40291f0:	003d5f06 	br	4028770 <__flash_rwdata_start+0xffff8294>
 40291f4:	a080004c 	andi	r2,r20,1
 40291f8:	0039883a 	mov	fp,zero
 40291fc:	10000526 	beq	r2,zero,4029214 <___vfiprintf_internal_r+0x1428>
 4029200:	00800c04 	movi	r2,48
 4029204:	d88019c5 	stb	r2,103(sp)
 4029208:	dcc02717 	ldw	r19,156(sp)
 402920c:	dd4019c4 	addi	r21,sp,103
 4029210:	003bf606 	br	40281ec <__flash_rwdata_start+0xffff7d10>
 4029214:	0027883a 	mov	r19,zero
 4029218:	dd401a04 	addi	r21,sp,104
 402921c:	003bf306 	br	40281ec <__flash_rwdata_start+0xffff7d10>
 4029220:	d9c01d85 	stb	r7,118(sp)
 4029224:	003dc806 	br	4028948 <__flash_rwdata_start+0xffff846c>
 4029228:	d9c01d85 	stb	r7,118(sp)
 402922c:	003d3a06 	br	4028718 <__flash_rwdata_start+0xffff823c>
 4029230:	d9c01d85 	stb	r7,118(sp)
 4029234:	003d2a06 	br	40286e0 <__flash_rwdata_start+0xffff8204>
 4029238:	d9c01d85 	stb	r7,118(sp)
 402923c:	003cde06 	br	40285b8 <__flash_rwdata_start+0xffff80dc>
 4029240:	d9c01d85 	stb	r7,118(sp)
 4029244:	003cbc06 	br	4028538 <__flash_rwdata_start+0xffff805c>

04029248 <__vfiprintf_internal>:
 4029248:	00800034 	movhi	r2,0
 402924c:	1087cf04 	addi	r2,r2,7996
 4029250:	300f883a 	mov	r7,r6
 4029254:	280d883a 	mov	r6,r5
 4029258:	200b883a 	mov	r5,r4
 402925c:	11000017 	ldw	r4,0(r2)
 4029260:	4027dec1 	jmpi	4027dec <___vfiprintf_internal_r>

04029264 <__sbprintf>:
 4029264:	2880030b 	ldhu	r2,12(r5)
 4029268:	2ac01917 	ldw	r11,100(r5)
 402926c:	2a80038b 	ldhu	r10,14(r5)
 4029270:	2a400717 	ldw	r9,28(r5)
 4029274:	2a000917 	ldw	r8,36(r5)
 4029278:	defee204 	addi	sp,sp,-1144
 402927c:	00c10004 	movi	r3,1024
 4029280:	dc011a15 	stw	r16,1128(sp)
 4029284:	10bfff4c 	andi	r2,r2,65533
 4029288:	2821883a 	mov	r16,r5
 402928c:	d8cb883a 	add	r5,sp,r3
 4029290:	dc811c15 	stw	r18,1136(sp)
 4029294:	dc411b15 	stw	r17,1132(sp)
 4029298:	dfc11d15 	stw	ra,1140(sp)
 402929c:	2025883a 	mov	r18,r4
 40292a0:	d881030d 	sth	r2,1036(sp)
 40292a4:	dac11915 	stw	r11,1124(sp)
 40292a8:	da81038d 	sth	r10,1038(sp)
 40292ac:	da410715 	stw	r9,1052(sp)
 40292b0:	da010915 	stw	r8,1060(sp)
 40292b4:	dec10015 	stw	sp,1024(sp)
 40292b8:	dec10415 	stw	sp,1040(sp)
 40292bc:	d8c10215 	stw	r3,1032(sp)
 40292c0:	d8c10515 	stw	r3,1044(sp)
 40292c4:	d8010615 	stw	zero,1048(sp)
 40292c8:	4027dec0 	call	4027dec <___vfiprintf_internal_r>
 40292cc:	1023883a 	mov	r17,r2
 40292d0:	10000416 	blt	r2,zero,40292e4 <__sbprintf+0x80>
 40292d4:	d9410004 	addi	r5,sp,1024
 40292d8:	9009883a 	mov	r4,r18
 40292dc:	40246a00 	call	40246a0 <_fflush_r>
 40292e0:	10000d1e 	bne	r2,zero,4029318 <__sbprintf+0xb4>
 40292e4:	d881030b 	ldhu	r2,1036(sp)
 40292e8:	1080100c 	andi	r2,r2,64
 40292ec:	10000326 	beq	r2,zero,40292fc <__sbprintf+0x98>
 40292f0:	8080030b 	ldhu	r2,12(r16)
 40292f4:	10801014 	ori	r2,r2,64
 40292f8:	8080030d 	sth	r2,12(r16)
 40292fc:	8805883a 	mov	r2,r17
 4029300:	dfc11d17 	ldw	ra,1140(sp)
 4029304:	dc811c17 	ldw	r18,1136(sp)
 4029308:	dc411b17 	ldw	r17,1132(sp)
 402930c:	dc011a17 	ldw	r16,1128(sp)
 4029310:	dec11e04 	addi	sp,sp,1144
 4029314:	f800283a 	ret
 4029318:	047fffc4 	movi	r17,-1
 402931c:	003ff106 	br	40292e4 <__flash_rwdata_start+0xffff8e08>

04029320 <_write_r>:
 4029320:	defffd04 	addi	sp,sp,-12
 4029324:	2805883a 	mov	r2,r5
 4029328:	dc000015 	stw	r16,0(sp)
 402932c:	04000034 	movhi	r16,0
 4029330:	dc400115 	stw	r17,4(sp)
 4029334:	300b883a 	mov	r5,r6
 4029338:	8407e904 	addi	r16,r16,8100
 402933c:	2023883a 	mov	r17,r4
 4029340:	380d883a 	mov	r6,r7
 4029344:	1009883a 	mov	r4,r2
 4029348:	dfc00215 	stw	ra,8(sp)
 402934c:	80000015 	stw	zero,0(r16)
 4029350:	402da840 	call	402da84 <write>
 4029354:	00ffffc4 	movi	r3,-1
 4029358:	10c00526 	beq	r2,r3,4029370 <_write_r+0x50>
 402935c:	dfc00217 	ldw	ra,8(sp)
 4029360:	dc400117 	ldw	r17,4(sp)
 4029364:	dc000017 	ldw	r16,0(sp)
 4029368:	dec00304 	addi	sp,sp,12
 402936c:	f800283a 	ret
 4029370:	80c00017 	ldw	r3,0(r16)
 4029374:	183ff926 	beq	r3,zero,402935c <__flash_rwdata_start+0xffff8e80>
 4029378:	88c00015 	stw	r3,0(r17)
 402937c:	003ff706 	br	402935c <__flash_rwdata_start+0xffff8e80>

04029380 <_close_r>:
 4029380:	defffd04 	addi	sp,sp,-12
 4029384:	dc000015 	stw	r16,0(sp)
 4029388:	04000034 	movhi	r16,0
 402938c:	dc400115 	stw	r17,4(sp)
 4029390:	8407e904 	addi	r16,r16,8100
 4029394:	2023883a 	mov	r17,r4
 4029398:	2809883a 	mov	r4,r5
 402939c:	dfc00215 	stw	ra,8(sp)
 40293a0:	80000015 	stw	zero,0(r16)
 40293a4:	402cf5c0 	call	402cf5c <close>
 40293a8:	00ffffc4 	movi	r3,-1
 40293ac:	10c00526 	beq	r2,r3,40293c4 <_close_r+0x44>
 40293b0:	dfc00217 	ldw	ra,8(sp)
 40293b4:	dc400117 	ldw	r17,4(sp)
 40293b8:	dc000017 	ldw	r16,0(sp)
 40293bc:	dec00304 	addi	sp,sp,12
 40293c0:	f800283a 	ret
 40293c4:	80c00017 	ldw	r3,0(r16)
 40293c8:	183ff926 	beq	r3,zero,40293b0 <__flash_rwdata_start+0xffff8ed4>
 40293cc:	88c00015 	stw	r3,0(r17)
 40293d0:	003ff706 	br	40293b0 <__flash_rwdata_start+0xffff8ed4>

040293d4 <_calloc_r>:
 40293d4:	298b383a 	mul	r5,r5,r6
 40293d8:	defffe04 	addi	sp,sp,-8
 40293dc:	dfc00115 	stw	ra,4(sp)
 40293e0:	dc000015 	stw	r16,0(sp)
 40293e4:	40257dc0 	call	40257dc <_malloc_r>
 40293e8:	10002926 	beq	r2,zero,4029490 <_calloc_r+0xbc>
 40293ec:	11bfff17 	ldw	r6,-4(r2)
 40293f0:	1021883a 	mov	r16,r2
 40293f4:	00bfff04 	movi	r2,-4
 40293f8:	308c703a 	and	r6,r6,r2
 40293fc:	00c00904 	movi	r3,36
 4029400:	308d883a 	add	r6,r6,r2
 4029404:	19801636 	bltu	r3,r6,4029460 <_calloc_r+0x8c>
 4029408:	008004c4 	movi	r2,19
 402940c:	11800b2e 	bgeu	r2,r6,402943c <_calloc_r+0x68>
 4029410:	80000015 	stw	zero,0(r16)
 4029414:	80000115 	stw	zero,4(r16)
 4029418:	008006c4 	movi	r2,27
 402941c:	11801a2e 	bgeu	r2,r6,4029488 <_calloc_r+0xb4>
 4029420:	80000215 	stw	zero,8(r16)
 4029424:	80000315 	stw	zero,12(r16)
 4029428:	30c0151e 	bne	r6,r3,4029480 <_calloc_r+0xac>
 402942c:	80000415 	stw	zero,16(r16)
 4029430:	80800604 	addi	r2,r16,24
 4029434:	80000515 	stw	zero,20(r16)
 4029438:	00000106 	br	4029440 <_calloc_r+0x6c>
 402943c:	8005883a 	mov	r2,r16
 4029440:	10000015 	stw	zero,0(r2)
 4029444:	10000115 	stw	zero,4(r2)
 4029448:	10000215 	stw	zero,8(r2)
 402944c:	8005883a 	mov	r2,r16
 4029450:	dfc00117 	ldw	ra,4(sp)
 4029454:	dc000017 	ldw	r16,0(sp)
 4029458:	dec00204 	addi	sp,sp,8
 402945c:	f800283a 	ret
 4029460:	000b883a 	mov	r5,zero
 4029464:	8009883a 	mov	r4,r16
 4029468:	40263700 	call	4026370 <memset>
 402946c:	8005883a 	mov	r2,r16
 4029470:	dfc00117 	ldw	ra,4(sp)
 4029474:	dc000017 	ldw	r16,0(sp)
 4029478:	dec00204 	addi	sp,sp,8
 402947c:	f800283a 	ret
 4029480:	80800404 	addi	r2,r16,16
 4029484:	003fee06 	br	4029440 <__flash_rwdata_start+0xffff8f64>
 4029488:	80800204 	addi	r2,r16,8
 402948c:	003fec06 	br	4029440 <__flash_rwdata_start+0xffff8f64>
 4029490:	0005883a 	mov	r2,zero
 4029494:	003fee06 	br	4029450 <__flash_rwdata_start+0xffff8f74>

04029498 <_fclose_r>:
 4029498:	28003926 	beq	r5,zero,4029580 <_fclose_r+0xe8>
 402949c:	defffc04 	addi	sp,sp,-16
 40294a0:	dc400115 	stw	r17,4(sp)
 40294a4:	dc000015 	stw	r16,0(sp)
 40294a8:	dfc00315 	stw	ra,12(sp)
 40294ac:	dc800215 	stw	r18,8(sp)
 40294b0:	2023883a 	mov	r17,r4
 40294b4:	2821883a 	mov	r16,r5
 40294b8:	20000226 	beq	r4,zero,40294c4 <_fclose_r+0x2c>
 40294bc:	20800e17 	ldw	r2,56(r4)
 40294c0:	10002726 	beq	r2,zero,4029560 <_fclose_r+0xc8>
 40294c4:	8080030f 	ldh	r2,12(r16)
 40294c8:	1000071e 	bne	r2,zero,40294e8 <_fclose_r+0x50>
 40294cc:	0005883a 	mov	r2,zero
 40294d0:	dfc00317 	ldw	ra,12(sp)
 40294d4:	dc800217 	ldw	r18,8(sp)
 40294d8:	dc400117 	ldw	r17,4(sp)
 40294dc:	dc000017 	ldw	r16,0(sp)
 40294e0:	dec00404 	addi	sp,sp,16
 40294e4:	f800283a 	ret
 40294e8:	800b883a 	mov	r5,r16
 40294ec:	8809883a 	mov	r4,r17
 40294f0:	40244840 	call	4024484 <__sflush_r>
 40294f4:	1025883a 	mov	r18,r2
 40294f8:	80800b17 	ldw	r2,44(r16)
 40294fc:	10000426 	beq	r2,zero,4029510 <_fclose_r+0x78>
 4029500:	81400717 	ldw	r5,28(r16)
 4029504:	8809883a 	mov	r4,r17
 4029508:	103ee83a 	callr	r2
 402950c:	10001616 	blt	r2,zero,4029568 <_fclose_r+0xd0>
 4029510:	8080030b 	ldhu	r2,12(r16)
 4029514:	1080200c 	andi	r2,r2,128
 4029518:	1000151e 	bne	r2,zero,4029570 <_fclose_r+0xd8>
 402951c:	81400c17 	ldw	r5,48(r16)
 4029520:	28000526 	beq	r5,zero,4029538 <_fclose_r+0xa0>
 4029524:	80801004 	addi	r2,r16,64
 4029528:	28800226 	beq	r5,r2,4029534 <_fclose_r+0x9c>
 402952c:	8809883a 	mov	r4,r17
 4029530:	4024bf00 	call	4024bf0 <_free_r>
 4029534:	80000c15 	stw	zero,48(r16)
 4029538:	81401117 	ldw	r5,68(r16)
 402953c:	28000326 	beq	r5,zero,402954c <_fclose_r+0xb4>
 4029540:	8809883a 	mov	r4,r17
 4029544:	4024bf00 	call	4024bf0 <_free_r>
 4029548:	80001115 	stw	zero,68(r16)
 402954c:	4024a8c0 	call	4024a8c <__sfp_lock_acquire>
 4029550:	8000030d 	sth	zero,12(r16)
 4029554:	4024a900 	call	4024a90 <__sfp_lock_release>
 4029558:	9005883a 	mov	r2,r18
 402955c:	003fdc06 	br	40294d0 <__flash_rwdata_start+0xffff8ff4>
 4029560:	4024a7c0 	call	4024a7c <__sinit>
 4029564:	003fd706 	br	40294c4 <__flash_rwdata_start+0xffff8fe8>
 4029568:	04bfffc4 	movi	r18,-1
 402956c:	003fe806 	br	4029510 <__flash_rwdata_start+0xffff9034>
 4029570:	81400417 	ldw	r5,16(r16)
 4029574:	8809883a 	mov	r4,r17
 4029578:	4024bf00 	call	4024bf0 <_free_r>
 402957c:	003fe706 	br	402951c <__flash_rwdata_start+0xffff9040>
 4029580:	0005883a 	mov	r2,zero
 4029584:	f800283a 	ret

04029588 <fclose>:
 4029588:	00800034 	movhi	r2,0
 402958c:	1087cf04 	addi	r2,r2,7996
 4029590:	200b883a 	mov	r5,r4
 4029594:	11000017 	ldw	r4,0(r2)
 4029598:	40294981 	jmpi	4029498 <_fclose_r>

0402959c <__fputwc>:
 402959c:	defff804 	addi	sp,sp,-32
 40295a0:	dcc00415 	stw	r19,16(sp)
 40295a4:	dc800315 	stw	r18,12(sp)
 40295a8:	dc000115 	stw	r16,4(sp)
 40295ac:	dfc00715 	stw	ra,28(sp)
 40295b0:	dd400615 	stw	r21,24(sp)
 40295b4:	dd000515 	stw	r20,20(sp)
 40295b8:	dc400215 	stw	r17,8(sp)
 40295bc:	2027883a 	mov	r19,r4
 40295c0:	2825883a 	mov	r18,r5
 40295c4:	3021883a 	mov	r16,r6
 40295c8:	40255cc0 	call	40255cc <__locale_mb_cur_max>
 40295cc:	00c00044 	movi	r3,1
 40295d0:	10c03e26 	beq	r2,r3,40296cc <__fputwc+0x130>
 40295d4:	81c01704 	addi	r7,r16,92
 40295d8:	900d883a 	mov	r6,r18
 40295dc:	d80b883a 	mov	r5,sp
 40295e0:	9809883a 	mov	r4,r19
 40295e4:	4029a6c0 	call	4029a6c <_wcrtomb_r>
 40295e8:	1029883a 	mov	r20,r2
 40295ec:	00bfffc4 	movi	r2,-1
 40295f0:	a0802026 	beq	r20,r2,4029674 <__fputwc+0xd8>
 40295f4:	d9400003 	ldbu	r5,0(sp)
 40295f8:	a0001c26 	beq	r20,zero,402966c <__fputwc+0xd0>
 40295fc:	0023883a 	mov	r17,zero
 4029600:	05400284 	movi	r21,10
 4029604:	00000906 	br	402962c <__fputwc+0x90>
 4029608:	80800017 	ldw	r2,0(r16)
 402960c:	11400005 	stb	r5,0(r2)
 4029610:	80c00017 	ldw	r3,0(r16)
 4029614:	18c00044 	addi	r3,r3,1
 4029618:	80c00015 	stw	r3,0(r16)
 402961c:	8c400044 	addi	r17,r17,1
 4029620:	dc45883a 	add	r2,sp,r17
 4029624:	8d00112e 	bgeu	r17,r20,402966c <__fputwc+0xd0>
 4029628:	11400003 	ldbu	r5,0(r2)
 402962c:	80c00217 	ldw	r3,8(r16)
 4029630:	18ffffc4 	addi	r3,r3,-1
 4029634:	80c00215 	stw	r3,8(r16)
 4029638:	183ff30e 	bge	r3,zero,4029608 <__flash_rwdata_start+0xffff912c>
 402963c:	80800617 	ldw	r2,24(r16)
 4029640:	18801916 	blt	r3,r2,40296a8 <__fputwc+0x10c>
 4029644:	80800017 	ldw	r2,0(r16)
 4029648:	11400005 	stb	r5,0(r2)
 402964c:	80800017 	ldw	r2,0(r16)
 4029650:	10c00003 	ldbu	r3,0(r2)
 4029654:	10800044 	addi	r2,r2,1
 4029658:	1d402326 	beq	r3,r21,40296e8 <__fputwc+0x14c>
 402965c:	80800015 	stw	r2,0(r16)
 4029660:	8c400044 	addi	r17,r17,1
 4029664:	dc45883a 	add	r2,sp,r17
 4029668:	8d3fef36 	bltu	r17,r20,4029628 <__flash_rwdata_start+0xffff914c>
 402966c:	9005883a 	mov	r2,r18
 4029670:	00000406 	br	4029684 <__fputwc+0xe8>
 4029674:	80c0030b 	ldhu	r3,12(r16)
 4029678:	a005883a 	mov	r2,r20
 402967c:	18c01014 	ori	r3,r3,64
 4029680:	80c0030d 	sth	r3,12(r16)
 4029684:	dfc00717 	ldw	ra,28(sp)
 4029688:	dd400617 	ldw	r21,24(sp)
 402968c:	dd000517 	ldw	r20,20(sp)
 4029690:	dcc00417 	ldw	r19,16(sp)
 4029694:	dc800317 	ldw	r18,12(sp)
 4029698:	dc400217 	ldw	r17,8(sp)
 402969c:	dc000117 	ldw	r16,4(sp)
 40296a0:	dec00804 	addi	sp,sp,32
 40296a4:	f800283a 	ret
 40296a8:	800d883a 	mov	r6,r16
 40296ac:	29403fcc 	andi	r5,r5,255
 40296b0:	9809883a 	mov	r4,r19
 40296b4:	40299140 	call	4029914 <__swbuf_r>
 40296b8:	10bfffe0 	cmpeqi	r2,r2,-1
 40296bc:	10803fcc 	andi	r2,r2,255
 40296c0:	103fd626 	beq	r2,zero,402961c <__flash_rwdata_start+0xffff9140>
 40296c4:	00bfffc4 	movi	r2,-1
 40296c8:	003fee06 	br	4029684 <__flash_rwdata_start+0xffff91a8>
 40296cc:	90ffffc4 	addi	r3,r18,-1
 40296d0:	01003f84 	movi	r4,254
 40296d4:	20ffbf36 	bltu	r4,r3,40295d4 <__flash_rwdata_start+0xffff90f8>
 40296d8:	900b883a 	mov	r5,r18
 40296dc:	dc800005 	stb	r18,0(sp)
 40296e0:	1029883a 	mov	r20,r2
 40296e4:	003fc506 	br	40295fc <__flash_rwdata_start+0xffff9120>
 40296e8:	800d883a 	mov	r6,r16
 40296ec:	a80b883a 	mov	r5,r21
 40296f0:	9809883a 	mov	r4,r19
 40296f4:	40299140 	call	4029914 <__swbuf_r>
 40296f8:	10bfffe0 	cmpeqi	r2,r2,-1
 40296fc:	003fef06 	br	40296bc <__flash_rwdata_start+0xffff91e0>

04029700 <_fputwc_r>:
 4029700:	3080030b 	ldhu	r2,12(r6)
 4029704:	10c8000c 	andi	r3,r2,8192
 4029708:	1800051e 	bne	r3,zero,4029720 <_fputwc_r+0x20>
 402970c:	30c01917 	ldw	r3,100(r6)
 4029710:	10880014 	ori	r2,r2,8192
 4029714:	3080030d 	sth	r2,12(r6)
 4029718:	18880014 	ori	r2,r3,8192
 402971c:	30801915 	stw	r2,100(r6)
 4029720:	402959c1 	jmpi	402959c <__fputwc>

04029724 <fputwc>:
 4029724:	00800034 	movhi	r2,0
 4029728:	defffc04 	addi	sp,sp,-16
 402972c:	1087cf04 	addi	r2,r2,7996
 4029730:	dc000115 	stw	r16,4(sp)
 4029734:	14000017 	ldw	r16,0(r2)
 4029738:	dc400215 	stw	r17,8(sp)
 402973c:	dfc00315 	stw	ra,12(sp)
 4029740:	2023883a 	mov	r17,r4
 4029744:	80000226 	beq	r16,zero,4029750 <fputwc+0x2c>
 4029748:	80800e17 	ldw	r2,56(r16)
 402974c:	10001026 	beq	r2,zero,4029790 <fputwc+0x6c>
 4029750:	2880030b 	ldhu	r2,12(r5)
 4029754:	10c8000c 	andi	r3,r2,8192
 4029758:	1800051e 	bne	r3,zero,4029770 <fputwc+0x4c>
 402975c:	28c01917 	ldw	r3,100(r5)
 4029760:	10880014 	ori	r2,r2,8192
 4029764:	2880030d 	sth	r2,12(r5)
 4029768:	18880014 	ori	r2,r3,8192
 402976c:	28801915 	stw	r2,100(r5)
 4029770:	280d883a 	mov	r6,r5
 4029774:	8009883a 	mov	r4,r16
 4029778:	880b883a 	mov	r5,r17
 402977c:	dfc00317 	ldw	ra,12(sp)
 4029780:	dc400217 	ldw	r17,8(sp)
 4029784:	dc000117 	ldw	r16,4(sp)
 4029788:	dec00404 	addi	sp,sp,16
 402978c:	402959c1 	jmpi	402959c <__fputwc>
 4029790:	8009883a 	mov	r4,r16
 4029794:	d9400015 	stw	r5,0(sp)
 4029798:	4024a7c0 	call	4024a7c <__sinit>
 402979c:	d9400017 	ldw	r5,0(sp)
 40297a0:	003feb06 	br	4029750 <__flash_rwdata_start+0xffff9274>

040297a4 <_fstat_r>:
 40297a4:	defffd04 	addi	sp,sp,-12
 40297a8:	2805883a 	mov	r2,r5
 40297ac:	dc000015 	stw	r16,0(sp)
 40297b0:	04000034 	movhi	r16,0
 40297b4:	dc400115 	stw	r17,4(sp)
 40297b8:	8407e904 	addi	r16,r16,8100
 40297bc:	2023883a 	mov	r17,r4
 40297c0:	300b883a 	mov	r5,r6
 40297c4:	1009883a 	mov	r4,r2
 40297c8:	dfc00215 	stw	ra,8(sp)
 40297cc:	80000015 	stw	zero,0(r16)
 40297d0:	402d0dc0 	call	402d0dc <fstat>
 40297d4:	00ffffc4 	movi	r3,-1
 40297d8:	10c00526 	beq	r2,r3,40297f0 <_fstat_r+0x4c>
 40297dc:	dfc00217 	ldw	ra,8(sp)
 40297e0:	dc400117 	ldw	r17,4(sp)
 40297e4:	dc000017 	ldw	r16,0(sp)
 40297e8:	dec00304 	addi	sp,sp,12
 40297ec:	f800283a 	ret
 40297f0:	80c00017 	ldw	r3,0(r16)
 40297f4:	183ff926 	beq	r3,zero,40297dc <__flash_rwdata_start+0xffff9300>
 40297f8:	88c00015 	stw	r3,0(r17)
 40297fc:	003ff706 	br	40297dc <__flash_rwdata_start+0xffff9300>

04029800 <_isatty_r>:
 4029800:	defffd04 	addi	sp,sp,-12
 4029804:	dc000015 	stw	r16,0(sp)
 4029808:	04000034 	movhi	r16,0
 402980c:	dc400115 	stw	r17,4(sp)
 4029810:	8407e904 	addi	r16,r16,8100
 4029814:	2023883a 	mov	r17,r4
 4029818:	2809883a 	mov	r4,r5
 402981c:	dfc00215 	stw	ra,8(sp)
 4029820:	80000015 	stw	zero,0(r16)
 4029824:	402d4680 	call	402d468 <isatty>
 4029828:	00ffffc4 	movi	r3,-1
 402982c:	10c00526 	beq	r2,r3,4029844 <_isatty_r+0x44>
 4029830:	dfc00217 	ldw	ra,8(sp)
 4029834:	dc400117 	ldw	r17,4(sp)
 4029838:	dc000017 	ldw	r16,0(sp)
 402983c:	dec00304 	addi	sp,sp,12
 4029840:	f800283a 	ret
 4029844:	80c00017 	ldw	r3,0(r16)
 4029848:	183ff926 	beq	r3,zero,4029830 <__flash_rwdata_start+0xffff9354>
 402984c:	88c00015 	stw	r3,0(r17)
 4029850:	003ff706 	br	4029830 <__flash_rwdata_start+0xffff9354>

04029854 <_lseek_r>:
 4029854:	defffd04 	addi	sp,sp,-12
 4029858:	2805883a 	mov	r2,r5
 402985c:	dc000015 	stw	r16,0(sp)
 4029860:	04000034 	movhi	r16,0
 4029864:	dc400115 	stw	r17,4(sp)
 4029868:	300b883a 	mov	r5,r6
 402986c:	8407e904 	addi	r16,r16,8100
 4029870:	2023883a 	mov	r17,r4
 4029874:	380d883a 	mov	r6,r7
 4029878:	1009883a 	mov	r4,r2
 402987c:	dfc00215 	stw	ra,8(sp)
 4029880:	80000015 	stw	zero,0(r16)
 4029884:	402d6340 	call	402d634 <lseek>
 4029888:	00ffffc4 	movi	r3,-1
 402988c:	10c00526 	beq	r2,r3,40298a4 <_lseek_r+0x50>
 4029890:	dfc00217 	ldw	ra,8(sp)
 4029894:	dc400117 	ldw	r17,4(sp)
 4029898:	dc000017 	ldw	r16,0(sp)
 402989c:	dec00304 	addi	sp,sp,12
 40298a0:	f800283a 	ret
 40298a4:	80c00017 	ldw	r3,0(r16)
 40298a8:	183ff926 	beq	r3,zero,4029890 <__flash_rwdata_start+0xffff93b4>
 40298ac:	88c00015 	stw	r3,0(r17)
 40298b0:	003ff706 	br	4029890 <__flash_rwdata_start+0xffff93b4>

040298b4 <_read_r>:
 40298b4:	defffd04 	addi	sp,sp,-12
 40298b8:	2805883a 	mov	r2,r5
 40298bc:	dc000015 	stw	r16,0(sp)
 40298c0:	04000034 	movhi	r16,0
 40298c4:	dc400115 	stw	r17,4(sp)
 40298c8:	300b883a 	mov	r5,r6
 40298cc:	8407e904 	addi	r16,r16,8100
 40298d0:	2023883a 	mov	r17,r4
 40298d4:	380d883a 	mov	r6,r7
 40298d8:	1009883a 	mov	r4,r2
 40298dc:	dfc00215 	stw	ra,8(sp)
 40298e0:	80000015 	stw	zero,0(r16)
 40298e4:	402d8080 	call	402d808 <read>
 40298e8:	00ffffc4 	movi	r3,-1
 40298ec:	10c00526 	beq	r2,r3,4029904 <_read_r+0x50>
 40298f0:	dfc00217 	ldw	ra,8(sp)
 40298f4:	dc400117 	ldw	r17,4(sp)
 40298f8:	dc000017 	ldw	r16,0(sp)
 40298fc:	dec00304 	addi	sp,sp,12
 4029900:	f800283a 	ret
 4029904:	80c00017 	ldw	r3,0(r16)
 4029908:	183ff926 	beq	r3,zero,40298f0 <__flash_rwdata_start+0xffff9414>
 402990c:	88c00015 	stw	r3,0(r17)
 4029910:	003ff706 	br	40298f0 <__flash_rwdata_start+0xffff9414>

04029914 <__swbuf_r>:
 4029914:	defffb04 	addi	sp,sp,-20
 4029918:	dcc00315 	stw	r19,12(sp)
 402991c:	dc800215 	stw	r18,8(sp)
 4029920:	dc000015 	stw	r16,0(sp)
 4029924:	dfc00415 	stw	ra,16(sp)
 4029928:	dc400115 	stw	r17,4(sp)
 402992c:	2025883a 	mov	r18,r4
 4029930:	2827883a 	mov	r19,r5
 4029934:	3021883a 	mov	r16,r6
 4029938:	20000226 	beq	r4,zero,4029944 <__swbuf_r+0x30>
 402993c:	20800e17 	ldw	r2,56(r4)
 4029940:	10004226 	beq	r2,zero,4029a4c <__swbuf_r+0x138>
 4029944:	80800617 	ldw	r2,24(r16)
 4029948:	8100030b 	ldhu	r4,12(r16)
 402994c:	80800215 	stw	r2,8(r16)
 4029950:	2080020c 	andi	r2,r4,8
 4029954:	10003626 	beq	r2,zero,4029a30 <__swbuf_r+0x11c>
 4029958:	80c00417 	ldw	r3,16(r16)
 402995c:	18003426 	beq	r3,zero,4029a30 <__swbuf_r+0x11c>
 4029960:	2088000c 	andi	r2,r4,8192
 4029964:	9c403fcc 	andi	r17,r19,255
 4029968:	10001a26 	beq	r2,zero,40299d4 <__swbuf_r+0xc0>
 402996c:	80800017 	ldw	r2,0(r16)
 4029970:	81000517 	ldw	r4,20(r16)
 4029974:	10c7c83a 	sub	r3,r2,r3
 4029978:	1900200e 	bge	r3,r4,40299fc <__swbuf_r+0xe8>
 402997c:	18c00044 	addi	r3,r3,1
 4029980:	81000217 	ldw	r4,8(r16)
 4029984:	11400044 	addi	r5,r2,1
 4029988:	81400015 	stw	r5,0(r16)
 402998c:	213fffc4 	addi	r4,r4,-1
 4029990:	81000215 	stw	r4,8(r16)
 4029994:	14c00005 	stb	r19,0(r2)
 4029998:	80800517 	ldw	r2,20(r16)
 402999c:	10c01e26 	beq	r2,r3,4029a18 <__swbuf_r+0x104>
 40299a0:	8080030b 	ldhu	r2,12(r16)
 40299a4:	1080004c 	andi	r2,r2,1
 40299a8:	10000226 	beq	r2,zero,40299b4 <__swbuf_r+0xa0>
 40299ac:	00800284 	movi	r2,10
 40299b0:	88801926 	beq	r17,r2,4029a18 <__swbuf_r+0x104>
 40299b4:	8805883a 	mov	r2,r17
 40299b8:	dfc00417 	ldw	ra,16(sp)
 40299bc:	dcc00317 	ldw	r19,12(sp)
 40299c0:	dc800217 	ldw	r18,8(sp)
 40299c4:	dc400117 	ldw	r17,4(sp)
 40299c8:	dc000017 	ldw	r16,0(sp)
 40299cc:	dec00504 	addi	sp,sp,20
 40299d0:	f800283a 	ret
 40299d4:	81401917 	ldw	r5,100(r16)
 40299d8:	00b7ffc4 	movi	r2,-8193
 40299dc:	21080014 	ori	r4,r4,8192
 40299e0:	2884703a 	and	r2,r5,r2
 40299e4:	80801915 	stw	r2,100(r16)
 40299e8:	80800017 	ldw	r2,0(r16)
 40299ec:	8100030d 	sth	r4,12(r16)
 40299f0:	81000517 	ldw	r4,20(r16)
 40299f4:	10c7c83a 	sub	r3,r2,r3
 40299f8:	193fe016 	blt	r3,r4,402997c <__flash_rwdata_start+0xffff94a0>
 40299fc:	800b883a 	mov	r5,r16
 4029a00:	9009883a 	mov	r4,r18
 4029a04:	40246a00 	call	40246a0 <_fflush_r>
 4029a08:	1000071e 	bne	r2,zero,4029a28 <__swbuf_r+0x114>
 4029a0c:	80800017 	ldw	r2,0(r16)
 4029a10:	00c00044 	movi	r3,1
 4029a14:	003fda06 	br	4029980 <__flash_rwdata_start+0xffff94a4>
 4029a18:	800b883a 	mov	r5,r16
 4029a1c:	9009883a 	mov	r4,r18
 4029a20:	40246a00 	call	40246a0 <_fflush_r>
 4029a24:	103fe326 	beq	r2,zero,40299b4 <__flash_rwdata_start+0xffff94d8>
 4029a28:	00bfffc4 	movi	r2,-1
 4029a2c:	003fe206 	br	40299b8 <__flash_rwdata_start+0xffff94dc>
 4029a30:	800b883a 	mov	r5,r16
 4029a34:	9009883a 	mov	r4,r18
 4029a38:	4022aa80 	call	4022aa8 <__swsetup_r>
 4029a3c:	103ffa1e 	bne	r2,zero,4029a28 <__flash_rwdata_start+0xffff954c>
 4029a40:	8100030b 	ldhu	r4,12(r16)
 4029a44:	80c00417 	ldw	r3,16(r16)
 4029a48:	003fc506 	br	4029960 <__flash_rwdata_start+0xffff9484>
 4029a4c:	4024a7c0 	call	4024a7c <__sinit>
 4029a50:	003fbc06 	br	4029944 <__flash_rwdata_start+0xffff9468>

04029a54 <__swbuf>:
 4029a54:	00800034 	movhi	r2,0
 4029a58:	1087cf04 	addi	r2,r2,7996
 4029a5c:	280d883a 	mov	r6,r5
 4029a60:	200b883a 	mov	r5,r4
 4029a64:	11000017 	ldw	r4,0(r2)
 4029a68:	40299141 	jmpi	4029914 <__swbuf_r>

04029a6c <_wcrtomb_r>:
 4029a6c:	defff604 	addi	sp,sp,-40
 4029a70:	00800034 	movhi	r2,0
 4029a74:	dc800815 	stw	r18,32(sp)
 4029a78:	dc400715 	stw	r17,28(sp)
 4029a7c:	dc000615 	stw	r16,24(sp)
 4029a80:	1087d304 	addi	r2,r2,8012
 4029a84:	dfc00915 	stw	ra,36(sp)
 4029a88:	2021883a 	mov	r16,r4
 4029a8c:	3823883a 	mov	r17,r7
 4029a90:	14800017 	ldw	r18,0(r2)
 4029a94:	28001426 	beq	r5,zero,4029ae8 <_wcrtomb_r+0x7c>
 4029a98:	d9400415 	stw	r5,16(sp)
 4029a9c:	d9800515 	stw	r6,20(sp)
 4029aa0:	40255c00 	call	40255c0 <__locale_charset>
 4029aa4:	d9800517 	ldw	r6,20(sp)
 4029aa8:	d9400417 	ldw	r5,16(sp)
 4029aac:	100f883a 	mov	r7,r2
 4029ab0:	dc400015 	stw	r17,0(sp)
 4029ab4:	8009883a 	mov	r4,r16
 4029ab8:	903ee83a 	callr	r18
 4029abc:	00ffffc4 	movi	r3,-1
 4029ac0:	10c0031e 	bne	r2,r3,4029ad0 <_wcrtomb_r+0x64>
 4029ac4:	88000015 	stw	zero,0(r17)
 4029ac8:	00c02284 	movi	r3,138
 4029acc:	80c00015 	stw	r3,0(r16)
 4029ad0:	dfc00917 	ldw	ra,36(sp)
 4029ad4:	dc800817 	ldw	r18,32(sp)
 4029ad8:	dc400717 	ldw	r17,28(sp)
 4029adc:	dc000617 	ldw	r16,24(sp)
 4029ae0:	dec00a04 	addi	sp,sp,40
 4029ae4:	f800283a 	ret
 4029ae8:	40255c00 	call	40255c0 <__locale_charset>
 4029aec:	100f883a 	mov	r7,r2
 4029af0:	dc400015 	stw	r17,0(sp)
 4029af4:	000d883a 	mov	r6,zero
 4029af8:	d9400104 	addi	r5,sp,4
 4029afc:	8009883a 	mov	r4,r16
 4029b00:	903ee83a 	callr	r18
 4029b04:	003fed06 	br	4029abc <__flash_rwdata_start+0xffff95e0>

04029b08 <wcrtomb>:
 4029b08:	defff604 	addi	sp,sp,-40
 4029b0c:	00800034 	movhi	r2,0
 4029b10:	dc800615 	stw	r18,24(sp)
 4029b14:	dc400515 	stw	r17,20(sp)
 4029b18:	1087cf04 	addi	r2,r2,7996
 4029b1c:	dfc00915 	stw	ra,36(sp)
 4029b20:	dd000815 	stw	r20,32(sp)
 4029b24:	dcc00715 	stw	r19,28(sp)
 4029b28:	dc000415 	stw	r16,16(sp)
 4029b2c:	3025883a 	mov	r18,r6
 4029b30:	14400017 	ldw	r17,0(r2)
 4029b34:	20001926 	beq	r4,zero,4029b9c <wcrtomb+0x94>
 4029b38:	00800034 	movhi	r2,0
 4029b3c:	1087d304 	addi	r2,r2,8012
 4029b40:	15000017 	ldw	r20,0(r2)
 4029b44:	2021883a 	mov	r16,r4
 4029b48:	2827883a 	mov	r19,r5
 4029b4c:	40255c00 	call	40255c0 <__locale_charset>
 4029b50:	100f883a 	mov	r7,r2
 4029b54:	dc800015 	stw	r18,0(sp)
 4029b58:	980d883a 	mov	r6,r19
 4029b5c:	800b883a 	mov	r5,r16
 4029b60:	8809883a 	mov	r4,r17
 4029b64:	a03ee83a 	callr	r20
 4029b68:	00ffffc4 	movi	r3,-1
 4029b6c:	10c0031e 	bne	r2,r3,4029b7c <wcrtomb+0x74>
 4029b70:	90000015 	stw	zero,0(r18)
 4029b74:	00c02284 	movi	r3,138
 4029b78:	88c00015 	stw	r3,0(r17)
 4029b7c:	dfc00917 	ldw	ra,36(sp)
 4029b80:	dd000817 	ldw	r20,32(sp)
 4029b84:	dcc00717 	ldw	r19,28(sp)
 4029b88:	dc800617 	ldw	r18,24(sp)
 4029b8c:	dc400517 	ldw	r17,20(sp)
 4029b90:	dc000417 	ldw	r16,16(sp)
 4029b94:	dec00a04 	addi	sp,sp,40
 4029b98:	f800283a 	ret
 4029b9c:	00800034 	movhi	r2,0
 4029ba0:	1087d304 	addi	r2,r2,8012
 4029ba4:	14000017 	ldw	r16,0(r2)
 4029ba8:	40255c00 	call	40255c0 <__locale_charset>
 4029bac:	100f883a 	mov	r7,r2
 4029bb0:	dc800015 	stw	r18,0(sp)
 4029bb4:	000d883a 	mov	r6,zero
 4029bb8:	d9400104 	addi	r5,sp,4
 4029bbc:	8809883a 	mov	r4,r17
 4029bc0:	803ee83a 	callr	r16
 4029bc4:	003fe806 	br	4029b68 <__flash_rwdata_start+0xffff968c>

04029bc8 <__ascii_wctomb>:
 4029bc8:	28000526 	beq	r5,zero,4029be0 <__ascii_wctomb+0x18>
 4029bcc:	00803fc4 	movi	r2,255
 4029bd0:	11800536 	bltu	r2,r6,4029be8 <__ascii_wctomb+0x20>
 4029bd4:	29800005 	stb	r6,0(r5)
 4029bd8:	00800044 	movi	r2,1
 4029bdc:	f800283a 	ret
 4029be0:	0005883a 	mov	r2,zero
 4029be4:	f800283a 	ret
 4029be8:	00802284 	movi	r2,138
 4029bec:	20800015 	stw	r2,0(r4)
 4029bf0:	00bfffc4 	movi	r2,-1
 4029bf4:	f800283a 	ret

04029bf8 <_wctomb_r>:
 4029bf8:	00800034 	movhi	r2,0
 4029bfc:	defff904 	addi	sp,sp,-28
 4029c00:	1087d304 	addi	r2,r2,8012
 4029c04:	dfc00615 	stw	ra,24(sp)
 4029c08:	dc400515 	stw	r17,20(sp)
 4029c0c:	dc000415 	stw	r16,16(sp)
 4029c10:	3823883a 	mov	r17,r7
 4029c14:	14000017 	ldw	r16,0(r2)
 4029c18:	d9000115 	stw	r4,4(sp)
 4029c1c:	d9400215 	stw	r5,8(sp)
 4029c20:	d9800315 	stw	r6,12(sp)
 4029c24:	40255c00 	call	40255c0 <__locale_charset>
 4029c28:	d9800317 	ldw	r6,12(sp)
 4029c2c:	d9400217 	ldw	r5,8(sp)
 4029c30:	d9000117 	ldw	r4,4(sp)
 4029c34:	100f883a 	mov	r7,r2
 4029c38:	dc400015 	stw	r17,0(sp)
 4029c3c:	803ee83a 	callr	r16
 4029c40:	dfc00617 	ldw	ra,24(sp)
 4029c44:	dc400517 	ldw	r17,20(sp)
 4029c48:	dc000417 	ldw	r16,16(sp)
 4029c4c:	dec00704 	addi	sp,sp,28
 4029c50:	f800283a 	ret

04029c54 <__udivdi3>:
 4029c54:	defff504 	addi	sp,sp,-44
 4029c58:	dcc00415 	stw	r19,16(sp)
 4029c5c:	dc000115 	stw	r16,4(sp)
 4029c60:	dfc00a15 	stw	ra,40(sp)
 4029c64:	df000915 	stw	fp,36(sp)
 4029c68:	ddc00815 	stw	r23,32(sp)
 4029c6c:	dd800715 	stw	r22,28(sp)
 4029c70:	dd400615 	stw	r21,24(sp)
 4029c74:	dd000515 	stw	r20,20(sp)
 4029c78:	dc800315 	stw	r18,12(sp)
 4029c7c:	dc400215 	stw	r17,8(sp)
 4029c80:	2027883a 	mov	r19,r4
 4029c84:	2821883a 	mov	r16,r5
 4029c88:	3800411e 	bne	r7,zero,4029d90 <__udivdi3+0x13c>
 4029c8c:	3023883a 	mov	r17,r6
 4029c90:	2025883a 	mov	r18,r4
 4029c94:	2980522e 	bgeu	r5,r6,4029de0 <__udivdi3+0x18c>
 4029c98:	00bfffd4 	movui	r2,65535
 4029c9c:	282d883a 	mov	r22,r5
 4029ca0:	1180a836 	bltu	r2,r6,4029f44 <__udivdi3+0x2f0>
 4029ca4:	00803fc4 	movi	r2,255
 4029ca8:	1185803a 	cmpltu	r2,r2,r6
 4029cac:	100490fa 	slli	r2,r2,3
 4029cb0:	3086d83a 	srl	r3,r6,r2
 4029cb4:	01000034 	movhi	r4,0
 4029cb8:	2100a004 	addi	r4,r4,640
 4029cbc:	20c7883a 	add	r3,r4,r3
 4029cc0:	18c00003 	ldbu	r3,0(r3)
 4029cc4:	1885883a 	add	r2,r3,r2
 4029cc8:	00c00804 	movi	r3,32
 4029ccc:	1887c83a 	sub	r3,r3,r2
 4029cd0:	18000526 	beq	r3,zero,4029ce8 <__udivdi3+0x94>
 4029cd4:	80e0983a 	sll	r16,r16,r3
 4029cd8:	9884d83a 	srl	r2,r19,r2
 4029cdc:	30e2983a 	sll	r17,r6,r3
 4029ce0:	98e4983a 	sll	r18,r19,r3
 4029ce4:	142cb03a 	or	r22,r2,r16
 4029ce8:	882ad43a 	srli	r21,r17,16
 4029cec:	b009883a 	mov	r4,r22
 4029cf0:	8d3fffcc 	andi	r20,r17,65535
 4029cf4:	a80b883a 	mov	r5,r21
 4029cf8:	402a8600 	call	402a860 <__umodsi3>
 4029cfc:	b009883a 	mov	r4,r22
 4029d00:	a80b883a 	mov	r5,r21
 4029d04:	1027883a 	mov	r19,r2
 4029d08:	402a7fc0 	call	402a7fc <__udivsi3>
 4029d0c:	102d883a 	mov	r22,r2
 4029d10:	9826943a 	slli	r19,r19,16
 4029d14:	9004d43a 	srli	r2,r18,16
 4029d18:	a5a1383a 	mul	r16,r20,r22
 4029d1c:	14c4b03a 	or	r2,r2,r19
 4029d20:	1400052e 	bgeu	r2,r16,4029d38 <__udivdi3+0xe4>
 4029d24:	1445883a 	add	r2,r2,r17
 4029d28:	b0ffffc4 	addi	r3,r22,-1
 4029d2c:	14400136 	bltu	r2,r17,4029d34 <__udivdi3+0xe0>
 4029d30:	14012336 	bltu	r2,r16,402a1c0 <__udivdi3+0x56c>
 4029d34:	182d883a 	mov	r22,r3
 4029d38:	1421c83a 	sub	r16,r2,r16
 4029d3c:	a80b883a 	mov	r5,r21
 4029d40:	8009883a 	mov	r4,r16
 4029d44:	402a8600 	call	402a860 <__umodsi3>
 4029d48:	1027883a 	mov	r19,r2
 4029d4c:	a80b883a 	mov	r5,r21
 4029d50:	8009883a 	mov	r4,r16
 4029d54:	402a7fc0 	call	402a7fc <__udivsi3>
 4029d58:	9826943a 	slli	r19,r19,16
 4029d5c:	a0a9383a 	mul	r20,r20,r2
 4029d60:	94bfffcc 	andi	r18,r18,65535
 4029d64:	94e4b03a 	or	r18,r18,r19
 4029d68:	9500052e 	bgeu	r18,r20,4029d80 <__udivdi3+0x12c>
 4029d6c:	8ca5883a 	add	r18,r17,r18
 4029d70:	10ffffc4 	addi	r3,r2,-1
 4029d74:	9440f136 	bltu	r18,r17,402a13c <__udivdi3+0x4e8>
 4029d78:	9500f02e 	bgeu	r18,r20,402a13c <__udivdi3+0x4e8>
 4029d7c:	10bfff84 	addi	r2,r2,-2
 4029d80:	b00c943a 	slli	r6,r22,16
 4029d84:	0007883a 	mov	r3,zero
 4029d88:	3084b03a 	or	r2,r6,r2
 4029d8c:	00005906 	br	4029ef4 <__udivdi3+0x2a0>
 4029d90:	29c05636 	bltu	r5,r7,4029eec <__udivdi3+0x298>
 4029d94:	00bfffd4 	movui	r2,65535
 4029d98:	11c0622e 	bgeu	r2,r7,4029f24 <__udivdi3+0x2d0>
 4029d9c:	00804034 	movhi	r2,256
 4029da0:	10bfffc4 	addi	r2,r2,-1
 4029da4:	11c0ee36 	bltu	r2,r7,402a160 <__udivdi3+0x50c>
 4029da8:	00800404 	movi	r2,16
 4029dac:	3886d83a 	srl	r3,r7,r2
 4029db0:	01000034 	movhi	r4,0
 4029db4:	2100a004 	addi	r4,r4,640
 4029db8:	20c7883a 	add	r3,r4,r3
 4029dbc:	18c00003 	ldbu	r3,0(r3)
 4029dc0:	05400804 	movi	r21,32
 4029dc4:	1885883a 	add	r2,r3,r2
 4029dc8:	a8abc83a 	sub	r21,r21,r2
 4029dcc:	a800621e 	bne	r21,zero,4029f58 <__udivdi3+0x304>
 4029dd0:	3c00e936 	bltu	r7,r16,402a178 <__udivdi3+0x524>
 4029dd4:	9985403a 	cmpgeu	r2,r19,r6
 4029dd8:	0007883a 	mov	r3,zero
 4029ddc:	00004506 	br	4029ef4 <__udivdi3+0x2a0>
 4029de0:	3000041e 	bne	r6,zero,4029df4 <__udivdi3+0x1a0>
 4029de4:	000b883a 	mov	r5,zero
 4029de8:	01000044 	movi	r4,1
 4029dec:	402a7fc0 	call	402a7fc <__udivsi3>
 4029df0:	1023883a 	mov	r17,r2
 4029df4:	00bfffd4 	movui	r2,65535
 4029df8:	14404e2e 	bgeu	r2,r17,4029f34 <__udivdi3+0x2e0>
 4029dfc:	00804034 	movhi	r2,256
 4029e00:	10bfffc4 	addi	r2,r2,-1
 4029e04:	1440d836 	bltu	r2,r17,402a168 <__udivdi3+0x514>
 4029e08:	00800404 	movi	r2,16
 4029e0c:	8886d83a 	srl	r3,r17,r2
 4029e10:	01000034 	movhi	r4,0
 4029e14:	2100a004 	addi	r4,r4,640
 4029e18:	20c7883a 	add	r3,r4,r3
 4029e1c:	18c00003 	ldbu	r3,0(r3)
 4029e20:	1885883a 	add	r2,r3,r2
 4029e24:	00c00804 	movi	r3,32
 4029e28:	1887c83a 	sub	r3,r3,r2
 4029e2c:	18008f1e 	bne	r3,zero,402a06c <__udivdi3+0x418>
 4029e30:	882ad43a 	srli	r21,r17,16
 4029e34:	8461c83a 	sub	r16,r16,r17
 4029e38:	8d3fffcc 	andi	r20,r17,65535
 4029e3c:	00c00044 	movi	r3,1
 4029e40:	8009883a 	mov	r4,r16
 4029e44:	a80b883a 	mov	r5,r21
 4029e48:	d8c00015 	stw	r3,0(sp)
 4029e4c:	402a8600 	call	402a860 <__umodsi3>
 4029e50:	8009883a 	mov	r4,r16
 4029e54:	a80b883a 	mov	r5,r21
 4029e58:	1027883a 	mov	r19,r2
 4029e5c:	402a7fc0 	call	402a7fc <__udivsi3>
 4029e60:	9826943a 	slli	r19,r19,16
 4029e64:	9008d43a 	srli	r4,r18,16
 4029e68:	1521383a 	mul	r16,r2,r20
 4029e6c:	102d883a 	mov	r22,r2
 4029e70:	24c8b03a 	or	r4,r4,r19
 4029e74:	d8c00017 	ldw	r3,0(sp)
 4029e78:	2400052e 	bgeu	r4,r16,4029e90 <__udivdi3+0x23c>
 4029e7c:	2449883a 	add	r4,r4,r17
 4029e80:	b0bfffc4 	addi	r2,r22,-1
 4029e84:	24400136 	bltu	r4,r17,4029e8c <__udivdi3+0x238>
 4029e88:	2400ca36 	bltu	r4,r16,402a1b4 <__udivdi3+0x560>
 4029e8c:	102d883a 	mov	r22,r2
 4029e90:	2421c83a 	sub	r16,r4,r16
 4029e94:	a80b883a 	mov	r5,r21
 4029e98:	8009883a 	mov	r4,r16
 4029e9c:	d8c00015 	stw	r3,0(sp)
 4029ea0:	402a8600 	call	402a860 <__umodsi3>
 4029ea4:	1027883a 	mov	r19,r2
 4029ea8:	a80b883a 	mov	r5,r21
 4029eac:	8009883a 	mov	r4,r16
 4029eb0:	402a7fc0 	call	402a7fc <__udivsi3>
 4029eb4:	9826943a 	slli	r19,r19,16
 4029eb8:	1529383a 	mul	r20,r2,r20
 4029ebc:	94bfffcc 	andi	r18,r18,65535
 4029ec0:	94e4b03a 	or	r18,r18,r19
 4029ec4:	d8c00017 	ldw	r3,0(sp)
 4029ec8:	9500052e 	bgeu	r18,r20,4029ee0 <__udivdi3+0x28c>
 4029ecc:	8ca5883a 	add	r18,r17,r18
 4029ed0:	113fffc4 	addi	r4,r2,-1
 4029ed4:	94409736 	bltu	r18,r17,402a134 <__udivdi3+0x4e0>
 4029ed8:	9500962e 	bgeu	r18,r20,402a134 <__udivdi3+0x4e0>
 4029edc:	10bfff84 	addi	r2,r2,-2
 4029ee0:	b00c943a 	slli	r6,r22,16
 4029ee4:	3084b03a 	or	r2,r6,r2
 4029ee8:	00000206 	br	4029ef4 <__udivdi3+0x2a0>
 4029eec:	0007883a 	mov	r3,zero
 4029ef0:	0005883a 	mov	r2,zero
 4029ef4:	dfc00a17 	ldw	ra,40(sp)
 4029ef8:	df000917 	ldw	fp,36(sp)
 4029efc:	ddc00817 	ldw	r23,32(sp)
 4029f00:	dd800717 	ldw	r22,28(sp)
 4029f04:	dd400617 	ldw	r21,24(sp)
 4029f08:	dd000517 	ldw	r20,20(sp)
 4029f0c:	dcc00417 	ldw	r19,16(sp)
 4029f10:	dc800317 	ldw	r18,12(sp)
 4029f14:	dc400217 	ldw	r17,8(sp)
 4029f18:	dc000117 	ldw	r16,4(sp)
 4029f1c:	dec00b04 	addi	sp,sp,44
 4029f20:	f800283a 	ret
 4029f24:	00803fc4 	movi	r2,255
 4029f28:	11c5803a 	cmpltu	r2,r2,r7
 4029f2c:	100490fa 	slli	r2,r2,3
 4029f30:	003f9e06 	br	4029dac <__flash_rwdata_start+0xffff98d0>
 4029f34:	00803fc4 	movi	r2,255
 4029f38:	1445803a 	cmpltu	r2,r2,r17
 4029f3c:	100490fa 	slli	r2,r2,3
 4029f40:	003fb206 	br	4029e0c <__flash_rwdata_start+0xffff9930>
 4029f44:	00804034 	movhi	r2,256
 4029f48:	10bfffc4 	addi	r2,r2,-1
 4029f4c:	11808836 	bltu	r2,r6,402a170 <__udivdi3+0x51c>
 4029f50:	00800404 	movi	r2,16
 4029f54:	003f5606 	br	4029cb0 <__flash_rwdata_start+0xffff97d4>
 4029f58:	30aed83a 	srl	r23,r6,r2
 4029f5c:	3d4e983a 	sll	r7,r7,r21
 4029f60:	80acd83a 	srl	r22,r16,r2
 4029f64:	9884d83a 	srl	r2,r19,r2
 4029f68:	3deeb03a 	or	r23,r7,r23
 4029f6c:	b824d43a 	srli	r18,r23,16
 4029f70:	8560983a 	sll	r16,r16,r21
 4029f74:	b009883a 	mov	r4,r22
 4029f78:	900b883a 	mov	r5,r18
 4029f7c:	3568983a 	sll	r20,r6,r21
 4029f80:	1420b03a 	or	r16,r2,r16
 4029f84:	402a8600 	call	402a860 <__umodsi3>
 4029f88:	b009883a 	mov	r4,r22
 4029f8c:	900b883a 	mov	r5,r18
 4029f90:	1023883a 	mov	r17,r2
 4029f94:	402a7fc0 	call	402a7fc <__udivsi3>
 4029f98:	8808943a 	slli	r4,r17,16
 4029f9c:	bf3fffcc 	andi	fp,r23,65535
 4029fa0:	8006d43a 	srli	r3,r16,16
 4029fa4:	e0a3383a 	mul	r17,fp,r2
 4029fa8:	100d883a 	mov	r6,r2
 4029fac:	1906b03a 	or	r3,r3,r4
 4029fb0:	1c40042e 	bgeu	r3,r17,4029fc4 <__udivdi3+0x370>
 4029fb4:	1dc7883a 	add	r3,r3,r23
 4029fb8:	10bfffc4 	addi	r2,r2,-1
 4029fbc:	1dc0752e 	bgeu	r3,r23,402a194 <__udivdi3+0x540>
 4029fc0:	100d883a 	mov	r6,r2
 4029fc4:	1c63c83a 	sub	r17,r3,r17
 4029fc8:	900b883a 	mov	r5,r18
 4029fcc:	8809883a 	mov	r4,r17
 4029fd0:	d9800015 	stw	r6,0(sp)
 4029fd4:	402a8600 	call	402a860 <__umodsi3>
 4029fd8:	102d883a 	mov	r22,r2
 4029fdc:	8809883a 	mov	r4,r17
 4029fe0:	900b883a 	mov	r5,r18
 4029fe4:	402a7fc0 	call	402a7fc <__udivsi3>
 4029fe8:	b02c943a 	slli	r22,r22,16
 4029fec:	e089383a 	mul	r4,fp,r2
 4029ff0:	843fffcc 	andi	r16,r16,65535
 4029ff4:	85a0b03a 	or	r16,r16,r22
 4029ff8:	d9800017 	ldw	r6,0(sp)
 4029ffc:	8100042e 	bgeu	r16,r4,402a010 <__udivdi3+0x3bc>
 402a000:	85e1883a 	add	r16,r16,r23
 402a004:	10ffffc4 	addi	r3,r2,-1
 402a008:	85c05e2e 	bgeu	r16,r23,402a184 <__udivdi3+0x530>
 402a00c:	1805883a 	mov	r2,r3
 402a010:	300c943a 	slli	r6,r6,16
 402a014:	a17fffcc 	andi	r5,r20,65535
 402a018:	a028d43a 	srli	r20,r20,16
 402a01c:	3084b03a 	or	r2,r6,r2
 402a020:	10ffffcc 	andi	r3,r2,65535
 402a024:	100cd43a 	srli	r6,r2,16
 402a028:	194f383a 	mul	r7,r3,r5
 402a02c:	1d07383a 	mul	r3,r3,r20
 402a030:	314b383a 	mul	r5,r6,r5
 402a034:	3810d43a 	srli	r8,r7,16
 402a038:	8121c83a 	sub	r16,r16,r4
 402a03c:	1947883a 	add	r3,r3,r5
 402a040:	40c7883a 	add	r3,r8,r3
 402a044:	350d383a 	mul	r6,r6,r20
 402a048:	1940022e 	bgeu	r3,r5,402a054 <__udivdi3+0x400>
 402a04c:	01000074 	movhi	r4,1
 402a050:	310d883a 	add	r6,r6,r4
 402a054:	1828d43a 	srli	r20,r3,16
 402a058:	a18d883a 	add	r6,r20,r6
 402a05c:	81803e36 	bltu	r16,r6,402a158 <__udivdi3+0x504>
 402a060:	81803826 	beq	r16,r6,402a144 <__udivdi3+0x4f0>
 402a064:	0007883a 	mov	r3,zero
 402a068:	003fa206 	br	4029ef4 <__flash_rwdata_start+0xffff9a18>
 402a06c:	88e2983a 	sll	r17,r17,r3
 402a070:	80a8d83a 	srl	r20,r16,r2
 402a074:	80e0983a 	sll	r16,r16,r3
 402a078:	882ad43a 	srli	r21,r17,16
 402a07c:	9884d83a 	srl	r2,r19,r2
 402a080:	a009883a 	mov	r4,r20
 402a084:	a80b883a 	mov	r5,r21
 402a088:	142eb03a 	or	r23,r2,r16
 402a08c:	98e4983a 	sll	r18,r19,r3
 402a090:	402a8600 	call	402a860 <__umodsi3>
 402a094:	a009883a 	mov	r4,r20
 402a098:	a80b883a 	mov	r5,r21
 402a09c:	1021883a 	mov	r16,r2
 402a0a0:	402a7fc0 	call	402a7fc <__udivsi3>
 402a0a4:	1039883a 	mov	fp,r2
 402a0a8:	8d3fffcc 	andi	r20,r17,65535
 402a0ac:	8020943a 	slli	r16,r16,16
 402a0b0:	b804d43a 	srli	r2,r23,16
 402a0b4:	a72d383a 	mul	r22,r20,fp
 402a0b8:	1404b03a 	or	r2,r2,r16
 402a0bc:	1580062e 	bgeu	r2,r22,402a0d8 <__udivdi3+0x484>
 402a0c0:	1445883a 	add	r2,r2,r17
 402a0c4:	e0ffffc4 	addi	r3,fp,-1
 402a0c8:	14403836 	bltu	r2,r17,402a1ac <__udivdi3+0x558>
 402a0cc:	1580372e 	bgeu	r2,r22,402a1ac <__udivdi3+0x558>
 402a0d0:	e73fff84 	addi	fp,fp,-2
 402a0d4:	1445883a 	add	r2,r2,r17
 402a0d8:	15adc83a 	sub	r22,r2,r22
 402a0dc:	a80b883a 	mov	r5,r21
 402a0e0:	b009883a 	mov	r4,r22
 402a0e4:	402a8600 	call	402a860 <__umodsi3>
 402a0e8:	1027883a 	mov	r19,r2
 402a0ec:	b009883a 	mov	r4,r22
 402a0f0:	a80b883a 	mov	r5,r21
 402a0f4:	402a7fc0 	call	402a7fc <__udivsi3>
 402a0f8:	9826943a 	slli	r19,r19,16
 402a0fc:	a0a1383a 	mul	r16,r20,r2
 402a100:	b93fffcc 	andi	r4,r23,65535
 402a104:	24c8b03a 	or	r4,r4,r19
 402a108:	2400062e 	bgeu	r4,r16,402a124 <__udivdi3+0x4d0>
 402a10c:	2449883a 	add	r4,r4,r17
 402a110:	10ffffc4 	addi	r3,r2,-1
 402a114:	24402336 	bltu	r4,r17,402a1a4 <__udivdi3+0x550>
 402a118:	2400222e 	bgeu	r4,r16,402a1a4 <__udivdi3+0x550>
 402a11c:	10bfff84 	addi	r2,r2,-2
 402a120:	2449883a 	add	r4,r4,r17
 402a124:	e038943a 	slli	fp,fp,16
 402a128:	2421c83a 	sub	r16,r4,r16
 402a12c:	e086b03a 	or	r3,fp,r2
 402a130:	003f4306 	br	4029e40 <__flash_rwdata_start+0xffff9964>
 402a134:	2005883a 	mov	r2,r4
 402a138:	003f6906 	br	4029ee0 <__flash_rwdata_start+0xffff9a04>
 402a13c:	1805883a 	mov	r2,r3
 402a140:	003f0f06 	br	4029d80 <__flash_rwdata_start+0xffff98a4>
 402a144:	1806943a 	slli	r3,r3,16
 402a148:	9d66983a 	sll	r19,r19,r21
 402a14c:	39ffffcc 	andi	r7,r7,65535
 402a150:	19c7883a 	add	r3,r3,r7
 402a154:	98ffc32e 	bgeu	r19,r3,402a064 <__flash_rwdata_start+0xffff9b88>
 402a158:	10bfffc4 	addi	r2,r2,-1
 402a15c:	003fc106 	br	402a064 <__flash_rwdata_start+0xffff9b88>
 402a160:	00800604 	movi	r2,24
 402a164:	003f1106 	br	4029dac <__flash_rwdata_start+0xffff98d0>
 402a168:	00800604 	movi	r2,24
 402a16c:	003f2706 	br	4029e0c <__flash_rwdata_start+0xffff9930>
 402a170:	00800604 	movi	r2,24
 402a174:	003ece06 	br	4029cb0 <__flash_rwdata_start+0xffff97d4>
 402a178:	0007883a 	mov	r3,zero
 402a17c:	00800044 	movi	r2,1
 402a180:	003f5c06 	br	4029ef4 <__flash_rwdata_start+0xffff9a18>
 402a184:	813fa12e 	bgeu	r16,r4,402a00c <__flash_rwdata_start+0xffff9b30>
 402a188:	10bfff84 	addi	r2,r2,-2
 402a18c:	85e1883a 	add	r16,r16,r23
 402a190:	003f9f06 	br	402a010 <__flash_rwdata_start+0xffff9b34>
 402a194:	1c7f8a2e 	bgeu	r3,r17,4029fc0 <__flash_rwdata_start+0xffff9ae4>
 402a198:	31bfff84 	addi	r6,r6,-2
 402a19c:	1dc7883a 	add	r3,r3,r23
 402a1a0:	003f8806 	br	4029fc4 <__flash_rwdata_start+0xffff9ae8>
 402a1a4:	1805883a 	mov	r2,r3
 402a1a8:	003fde06 	br	402a124 <__flash_rwdata_start+0xffff9c48>
 402a1ac:	1839883a 	mov	fp,r3
 402a1b0:	003fc906 	br	402a0d8 <__flash_rwdata_start+0xffff9bfc>
 402a1b4:	b5bfff84 	addi	r22,r22,-2
 402a1b8:	2449883a 	add	r4,r4,r17
 402a1bc:	003f3406 	br	4029e90 <__flash_rwdata_start+0xffff99b4>
 402a1c0:	b5bfff84 	addi	r22,r22,-2
 402a1c4:	1445883a 	add	r2,r2,r17
 402a1c8:	003edb06 	br	4029d38 <__flash_rwdata_start+0xffff985c>

0402a1cc <__umoddi3>:
 402a1cc:	defff404 	addi	sp,sp,-48
 402a1d0:	df000a15 	stw	fp,40(sp)
 402a1d4:	dc400315 	stw	r17,12(sp)
 402a1d8:	dc000215 	stw	r16,8(sp)
 402a1dc:	dfc00b15 	stw	ra,44(sp)
 402a1e0:	ddc00915 	stw	r23,36(sp)
 402a1e4:	dd800815 	stw	r22,32(sp)
 402a1e8:	dd400715 	stw	r21,28(sp)
 402a1ec:	dd000615 	stw	r20,24(sp)
 402a1f0:	dcc00515 	stw	r19,20(sp)
 402a1f4:	dc800415 	stw	r18,16(sp)
 402a1f8:	2021883a 	mov	r16,r4
 402a1fc:	2823883a 	mov	r17,r5
 402a200:	2839883a 	mov	fp,r5
 402a204:	38003c1e 	bne	r7,zero,402a2f8 <__umoddi3+0x12c>
 402a208:	3027883a 	mov	r19,r6
 402a20c:	2029883a 	mov	r20,r4
 402a210:	2980512e 	bgeu	r5,r6,402a358 <__umoddi3+0x18c>
 402a214:	00bfffd4 	movui	r2,65535
 402a218:	11809a36 	bltu	r2,r6,402a484 <__umoddi3+0x2b8>
 402a21c:	01003fc4 	movi	r4,255
 402a220:	2189803a 	cmpltu	r4,r4,r6
 402a224:	200890fa 	slli	r4,r4,3
 402a228:	3104d83a 	srl	r2,r6,r4
 402a22c:	00c00034 	movhi	r3,0
 402a230:	18c0a004 	addi	r3,r3,640
 402a234:	1885883a 	add	r2,r3,r2
 402a238:	10c00003 	ldbu	r3,0(r2)
 402a23c:	00800804 	movi	r2,32
 402a240:	1909883a 	add	r4,r3,r4
 402a244:	1125c83a 	sub	r18,r2,r4
 402a248:	90000526 	beq	r18,zero,402a260 <__umoddi3+0x94>
 402a24c:	8ca2983a 	sll	r17,r17,r18
 402a250:	8108d83a 	srl	r4,r16,r4
 402a254:	34a6983a 	sll	r19,r6,r18
 402a258:	84a8983a 	sll	r20,r16,r18
 402a25c:	2478b03a 	or	fp,r4,r17
 402a260:	982ed43a 	srli	r23,r19,16
 402a264:	e009883a 	mov	r4,fp
 402a268:	9dbfffcc 	andi	r22,r19,65535
 402a26c:	b80b883a 	mov	r5,r23
 402a270:	402a8600 	call	402a860 <__umodsi3>
 402a274:	e009883a 	mov	r4,fp
 402a278:	b80b883a 	mov	r5,r23
 402a27c:	102b883a 	mov	r21,r2
 402a280:	402a7fc0 	call	402a7fc <__udivsi3>
 402a284:	a806943a 	slli	r3,r21,16
 402a288:	a008d43a 	srli	r4,r20,16
 402a28c:	b085383a 	mul	r2,r22,r2
 402a290:	20c8b03a 	or	r4,r4,r3
 402a294:	2080032e 	bgeu	r4,r2,402a2a4 <__umoddi3+0xd8>
 402a298:	24c9883a 	add	r4,r4,r19
 402a29c:	24c00136 	bltu	r4,r19,402a2a4 <__umoddi3+0xd8>
 402a2a0:	20811036 	bltu	r4,r2,402a6e4 <__umoddi3+0x518>
 402a2a4:	20abc83a 	sub	r21,r4,r2
 402a2a8:	b80b883a 	mov	r5,r23
 402a2ac:	a809883a 	mov	r4,r21
 402a2b0:	402a8600 	call	402a860 <__umodsi3>
 402a2b4:	1023883a 	mov	r17,r2
 402a2b8:	b80b883a 	mov	r5,r23
 402a2bc:	a809883a 	mov	r4,r21
 402a2c0:	402a7fc0 	call	402a7fc <__udivsi3>
 402a2c4:	8822943a 	slli	r17,r17,16
 402a2c8:	b085383a 	mul	r2,r22,r2
 402a2cc:	a0ffffcc 	andi	r3,r20,65535
 402a2d0:	1c46b03a 	or	r3,r3,r17
 402a2d4:	1880042e 	bgeu	r3,r2,402a2e8 <__umoddi3+0x11c>
 402a2d8:	1cc7883a 	add	r3,r3,r19
 402a2dc:	1cc00236 	bltu	r3,r19,402a2e8 <__umoddi3+0x11c>
 402a2e0:	1880012e 	bgeu	r3,r2,402a2e8 <__umoddi3+0x11c>
 402a2e4:	1cc7883a 	add	r3,r3,r19
 402a2e8:	1885c83a 	sub	r2,r3,r2
 402a2ec:	1484d83a 	srl	r2,r2,r18
 402a2f0:	0007883a 	mov	r3,zero
 402a2f4:	00004f06 	br	402a434 <__umoddi3+0x268>
 402a2f8:	29c04c36 	bltu	r5,r7,402a42c <__umoddi3+0x260>
 402a2fc:	00bfffd4 	movui	r2,65535
 402a300:	11c0582e 	bgeu	r2,r7,402a464 <__umoddi3+0x298>
 402a304:	00804034 	movhi	r2,256
 402a308:	10bfffc4 	addi	r2,r2,-1
 402a30c:	11c0e736 	bltu	r2,r7,402a6ac <__umoddi3+0x4e0>
 402a310:	01000404 	movi	r4,16
 402a314:	3904d83a 	srl	r2,r7,r4
 402a318:	00c00034 	movhi	r3,0
 402a31c:	18c0a004 	addi	r3,r3,640
 402a320:	1885883a 	add	r2,r3,r2
 402a324:	14c00003 	ldbu	r19,0(r2)
 402a328:	00c00804 	movi	r3,32
 402a32c:	9927883a 	add	r19,r19,r4
 402a330:	1ce9c83a 	sub	r20,r3,r19
 402a334:	a000581e 	bne	r20,zero,402a498 <__umoddi3+0x2cc>
 402a338:	3c400136 	bltu	r7,r17,402a340 <__umoddi3+0x174>
 402a33c:	8180eb36 	bltu	r16,r6,402a6ec <__umoddi3+0x520>
 402a340:	8185c83a 	sub	r2,r16,r6
 402a344:	89e3c83a 	sub	r17,r17,r7
 402a348:	8089803a 	cmpltu	r4,r16,r2
 402a34c:	8939c83a 	sub	fp,r17,r4
 402a350:	e007883a 	mov	r3,fp
 402a354:	00003706 	br	402a434 <__umoddi3+0x268>
 402a358:	3000041e 	bne	r6,zero,402a36c <__umoddi3+0x1a0>
 402a35c:	000b883a 	mov	r5,zero
 402a360:	01000044 	movi	r4,1
 402a364:	402a7fc0 	call	402a7fc <__udivsi3>
 402a368:	1027883a 	mov	r19,r2
 402a36c:	00bfffd4 	movui	r2,65535
 402a370:	14c0402e 	bgeu	r2,r19,402a474 <__umoddi3+0x2a8>
 402a374:	00804034 	movhi	r2,256
 402a378:	10bfffc4 	addi	r2,r2,-1
 402a37c:	14c0cd36 	bltu	r2,r19,402a6b4 <__umoddi3+0x4e8>
 402a380:	00800404 	movi	r2,16
 402a384:	9886d83a 	srl	r3,r19,r2
 402a388:	01000034 	movhi	r4,0
 402a38c:	2100a004 	addi	r4,r4,640
 402a390:	20c7883a 	add	r3,r4,r3
 402a394:	18c00003 	ldbu	r3,0(r3)
 402a398:	1887883a 	add	r3,r3,r2
 402a39c:	00800804 	movi	r2,32
 402a3a0:	10e5c83a 	sub	r18,r2,r3
 402a3a4:	9000901e 	bne	r18,zero,402a5e8 <__umoddi3+0x41c>
 402a3a8:	982cd43a 	srli	r22,r19,16
 402a3ac:	8ce3c83a 	sub	r17,r17,r19
 402a3b0:	9d7fffcc 	andi	r21,r19,65535
 402a3b4:	b00b883a 	mov	r5,r22
 402a3b8:	8809883a 	mov	r4,r17
 402a3bc:	402a8600 	call	402a860 <__umodsi3>
 402a3c0:	8809883a 	mov	r4,r17
 402a3c4:	b00b883a 	mov	r5,r22
 402a3c8:	1021883a 	mov	r16,r2
 402a3cc:	402a7fc0 	call	402a7fc <__udivsi3>
 402a3d0:	8006943a 	slli	r3,r16,16
 402a3d4:	a008d43a 	srli	r4,r20,16
 402a3d8:	1545383a 	mul	r2,r2,r21
 402a3dc:	20c8b03a 	or	r4,r4,r3
 402a3e0:	2080042e 	bgeu	r4,r2,402a3f4 <__umoddi3+0x228>
 402a3e4:	24c9883a 	add	r4,r4,r19
 402a3e8:	24c00236 	bltu	r4,r19,402a3f4 <__umoddi3+0x228>
 402a3ec:	2080012e 	bgeu	r4,r2,402a3f4 <__umoddi3+0x228>
 402a3f0:	24c9883a 	add	r4,r4,r19
 402a3f4:	20a1c83a 	sub	r16,r4,r2
 402a3f8:	b00b883a 	mov	r5,r22
 402a3fc:	8009883a 	mov	r4,r16
 402a400:	402a8600 	call	402a860 <__umodsi3>
 402a404:	1023883a 	mov	r17,r2
 402a408:	b00b883a 	mov	r5,r22
 402a40c:	8009883a 	mov	r4,r16
 402a410:	402a7fc0 	call	402a7fc <__udivsi3>
 402a414:	8822943a 	slli	r17,r17,16
 402a418:	1545383a 	mul	r2,r2,r21
 402a41c:	a53fffcc 	andi	r20,r20,65535
 402a420:	a446b03a 	or	r3,r20,r17
 402a424:	18bfb02e 	bgeu	r3,r2,402a2e8 <__flash_rwdata_start+0xffff9e0c>
 402a428:	003fab06 	br	402a2d8 <__flash_rwdata_start+0xffff9dfc>
 402a42c:	2005883a 	mov	r2,r4
 402a430:	2807883a 	mov	r3,r5
 402a434:	dfc00b17 	ldw	ra,44(sp)
 402a438:	df000a17 	ldw	fp,40(sp)
 402a43c:	ddc00917 	ldw	r23,36(sp)
 402a440:	dd800817 	ldw	r22,32(sp)
 402a444:	dd400717 	ldw	r21,28(sp)
 402a448:	dd000617 	ldw	r20,24(sp)
 402a44c:	dcc00517 	ldw	r19,20(sp)
 402a450:	dc800417 	ldw	r18,16(sp)
 402a454:	dc400317 	ldw	r17,12(sp)
 402a458:	dc000217 	ldw	r16,8(sp)
 402a45c:	dec00c04 	addi	sp,sp,48
 402a460:	f800283a 	ret
 402a464:	04c03fc4 	movi	r19,255
 402a468:	99c9803a 	cmpltu	r4,r19,r7
 402a46c:	200890fa 	slli	r4,r4,3
 402a470:	003fa806 	br	402a314 <__flash_rwdata_start+0xffff9e38>
 402a474:	00803fc4 	movi	r2,255
 402a478:	14c5803a 	cmpltu	r2,r2,r19
 402a47c:	100490fa 	slli	r2,r2,3
 402a480:	003fc006 	br	402a384 <__flash_rwdata_start+0xffff9ea8>
 402a484:	00804034 	movhi	r2,256
 402a488:	10bfffc4 	addi	r2,r2,-1
 402a48c:	11808b36 	bltu	r2,r6,402a6bc <__umoddi3+0x4f0>
 402a490:	01000404 	movi	r4,16
 402a494:	003f6406 	br	402a228 <__flash_rwdata_start+0xffff9d4c>
 402a498:	34c4d83a 	srl	r2,r6,r19
 402a49c:	3d0e983a 	sll	r7,r7,r20
 402a4a0:	8cf8d83a 	srl	fp,r17,r19
 402a4a4:	8d10983a 	sll	r8,r17,r20
 402a4a8:	38aab03a 	or	r21,r7,r2
 402a4ac:	a82cd43a 	srli	r22,r21,16
 402a4b0:	84e2d83a 	srl	r17,r16,r19
 402a4b4:	e009883a 	mov	r4,fp
 402a4b8:	b00b883a 	mov	r5,r22
 402a4bc:	8a22b03a 	or	r17,r17,r8
 402a4c0:	3524983a 	sll	r18,r6,r20
 402a4c4:	402a8600 	call	402a860 <__umodsi3>
 402a4c8:	e009883a 	mov	r4,fp
 402a4cc:	b00b883a 	mov	r5,r22
 402a4d0:	102f883a 	mov	r23,r2
 402a4d4:	402a7fc0 	call	402a7fc <__udivsi3>
 402a4d8:	100d883a 	mov	r6,r2
 402a4dc:	b808943a 	slli	r4,r23,16
 402a4e0:	aa3fffcc 	andi	r8,r21,65535
 402a4e4:	8804d43a 	srli	r2,r17,16
 402a4e8:	41af383a 	mul	r23,r8,r6
 402a4ec:	8520983a 	sll	r16,r16,r20
 402a4f0:	1104b03a 	or	r2,r2,r4
 402a4f4:	15c0042e 	bgeu	r2,r23,402a508 <__umoddi3+0x33c>
 402a4f8:	1545883a 	add	r2,r2,r21
 402a4fc:	30ffffc4 	addi	r3,r6,-1
 402a500:	1540742e 	bgeu	r2,r21,402a6d4 <__umoddi3+0x508>
 402a504:	180d883a 	mov	r6,r3
 402a508:	15efc83a 	sub	r23,r2,r23
 402a50c:	b00b883a 	mov	r5,r22
 402a510:	b809883a 	mov	r4,r23
 402a514:	d9800115 	stw	r6,4(sp)
 402a518:	da000015 	stw	r8,0(sp)
 402a51c:	402a8600 	call	402a860 <__umodsi3>
 402a520:	b00b883a 	mov	r5,r22
 402a524:	b809883a 	mov	r4,r23
 402a528:	1039883a 	mov	fp,r2
 402a52c:	402a7fc0 	call	402a7fc <__udivsi3>
 402a530:	da000017 	ldw	r8,0(sp)
 402a534:	e038943a 	slli	fp,fp,16
 402a538:	100b883a 	mov	r5,r2
 402a53c:	4089383a 	mul	r4,r8,r2
 402a540:	8a3fffcc 	andi	r8,r17,65535
 402a544:	4710b03a 	or	r8,r8,fp
 402a548:	d9800117 	ldw	r6,4(sp)
 402a54c:	4100042e 	bgeu	r8,r4,402a560 <__umoddi3+0x394>
 402a550:	4551883a 	add	r8,r8,r21
 402a554:	10bfffc4 	addi	r2,r2,-1
 402a558:	45405a2e 	bgeu	r8,r21,402a6c4 <__umoddi3+0x4f8>
 402a55c:	100b883a 	mov	r5,r2
 402a560:	300c943a 	slli	r6,r6,16
 402a564:	91ffffcc 	andi	r7,r18,65535
 402a568:	9004d43a 	srli	r2,r18,16
 402a56c:	314cb03a 	or	r6,r6,r5
 402a570:	317fffcc 	andi	r5,r6,65535
 402a574:	300cd43a 	srli	r6,r6,16
 402a578:	29d3383a 	mul	r9,r5,r7
 402a57c:	288b383a 	mul	r5,r5,r2
 402a580:	31cf383a 	mul	r7,r6,r7
 402a584:	4806d43a 	srli	r3,r9,16
 402a588:	4111c83a 	sub	r8,r8,r4
 402a58c:	29cb883a 	add	r5,r5,r7
 402a590:	194b883a 	add	r5,r3,r5
 402a594:	3085383a 	mul	r2,r6,r2
 402a598:	29c0022e 	bgeu	r5,r7,402a5a4 <__umoddi3+0x3d8>
 402a59c:	00c00074 	movhi	r3,1
 402a5a0:	10c5883a 	add	r2,r2,r3
 402a5a4:	2808d43a 	srli	r4,r5,16
 402a5a8:	280a943a 	slli	r5,r5,16
 402a5ac:	4a7fffcc 	andi	r9,r9,65535
 402a5b0:	2085883a 	add	r2,r4,r2
 402a5b4:	2a4b883a 	add	r5,r5,r9
 402a5b8:	40803636 	bltu	r8,r2,402a694 <__umoddi3+0x4c8>
 402a5bc:	40804d26 	beq	r8,r2,402a6f4 <__umoddi3+0x528>
 402a5c0:	4089c83a 	sub	r4,r8,r2
 402a5c4:	280f883a 	mov	r7,r5
 402a5c8:	81cfc83a 	sub	r7,r16,r7
 402a5cc:	81c7803a 	cmpltu	r3,r16,r7
 402a5d0:	20c7c83a 	sub	r3,r4,r3
 402a5d4:	1cc4983a 	sll	r2,r3,r19
 402a5d8:	3d0ed83a 	srl	r7,r7,r20
 402a5dc:	1d06d83a 	srl	r3,r3,r20
 402a5e0:	11c4b03a 	or	r2,r2,r7
 402a5e4:	003f9306 	br	402a434 <__flash_rwdata_start+0xffff9f58>
 402a5e8:	9ca6983a 	sll	r19,r19,r18
 402a5ec:	88e8d83a 	srl	r20,r17,r3
 402a5f0:	80c4d83a 	srl	r2,r16,r3
 402a5f4:	982cd43a 	srli	r22,r19,16
 402a5f8:	8ca2983a 	sll	r17,r17,r18
 402a5fc:	a009883a 	mov	r4,r20
 402a600:	b00b883a 	mov	r5,r22
 402a604:	1478b03a 	or	fp,r2,r17
 402a608:	402a8600 	call	402a860 <__umodsi3>
 402a60c:	a009883a 	mov	r4,r20
 402a610:	b00b883a 	mov	r5,r22
 402a614:	1023883a 	mov	r17,r2
 402a618:	402a7fc0 	call	402a7fc <__udivsi3>
 402a61c:	9d7fffcc 	andi	r21,r19,65535
 402a620:	880a943a 	slli	r5,r17,16
 402a624:	e008d43a 	srli	r4,fp,16
 402a628:	a885383a 	mul	r2,r21,r2
 402a62c:	84a8983a 	sll	r20,r16,r18
 402a630:	2148b03a 	or	r4,r4,r5
 402a634:	2080042e 	bgeu	r4,r2,402a648 <__umoddi3+0x47c>
 402a638:	24c9883a 	add	r4,r4,r19
 402a63c:	24c00236 	bltu	r4,r19,402a648 <__umoddi3+0x47c>
 402a640:	2080012e 	bgeu	r4,r2,402a648 <__umoddi3+0x47c>
 402a644:	24c9883a 	add	r4,r4,r19
 402a648:	20a3c83a 	sub	r17,r4,r2
 402a64c:	b00b883a 	mov	r5,r22
 402a650:	8809883a 	mov	r4,r17
 402a654:	402a8600 	call	402a860 <__umodsi3>
 402a658:	102f883a 	mov	r23,r2
 402a65c:	8809883a 	mov	r4,r17
 402a660:	b00b883a 	mov	r5,r22
 402a664:	402a7fc0 	call	402a7fc <__udivsi3>
 402a668:	b82e943a 	slli	r23,r23,16
 402a66c:	a885383a 	mul	r2,r21,r2
 402a670:	e13fffcc 	andi	r4,fp,65535
 402a674:	25c8b03a 	or	r4,r4,r23
 402a678:	2080042e 	bgeu	r4,r2,402a68c <__umoddi3+0x4c0>
 402a67c:	24c9883a 	add	r4,r4,r19
 402a680:	24c00236 	bltu	r4,r19,402a68c <__umoddi3+0x4c0>
 402a684:	2080012e 	bgeu	r4,r2,402a68c <__umoddi3+0x4c0>
 402a688:	24c9883a 	add	r4,r4,r19
 402a68c:	20a3c83a 	sub	r17,r4,r2
 402a690:	003f4806 	br	402a3b4 <__flash_rwdata_start+0xffff9ed8>
 402a694:	2c8fc83a 	sub	r7,r5,r18
 402a698:	1545c83a 	sub	r2,r2,r21
 402a69c:	29cb803a 	cmpltu	r5,r5,r7
 402a6a0:	1145c83a 	sub	r2,r2,r5
 402a6a4:	4089c83a 	sub	r4,r8,r2
 402a6a8:	003fc706 	br	402a5c8 <__flash_rwdata_start+0xffffa0ec>
 402a6ac:	01000604 	movi	r4,24
 402a6b0:	003f1806 	br	402a314 <__flash_rwdata_start+0xffff9e38>
 402a6b4:	00800604 	movi	r2,24
 402a6b8:	003f3206 	br	402a384 <__flash_rwdata_start+0xffff9ea8>
 402a6bc:	01000604 	movi	r4,24
 402a6c0:	003ed906 	br	402a228 <__flash_rwdata_start+0xffff9d4c>
 402a6c4:	413fa52e 	bgeu	r8,r4,402a55c <__flash_rwdata_start+0xffffa080>
 402a6c8:	297fff84 	addi	r5,r5,-2
 402a6cc:	4551883a 	add	r8,r8,r21
 402a6d0:	003fa306 	br	402a560 <__flash_rwdata_start+0xffffa084>
 402a6d4:	15ff8b2e 	bgeu	r2,r23,402a504 <__flash_rwdata_start+0xffffa028>
 402a6d8:	31bfff84 	addi	r6,r6,-2
 402a6dc:	1545883a 	add	r2,r2,r21
 402a6e0:	003f8906 	br	402a508 <__flash_rwdata_start+0xffffa02c>
 402a6e4:	24c9883a 	add	r4,r4,r19
 402a6e8:	003eee06 	br	402a2a4 <__flash_rwdata_start+0xffff9dc8>
 402a6ec:	8005883a 	mov	r2,r16
 402a6f0:	003f1706 	br	402a350 <__flash_rwdata_start+0xffff9e74>
 402a6f4:	817fe736 	bltu	r16,r5,402a694 <__flash_rwdata_start+0xffffa1b8>
 402a6f8:	280f883a 	mov	r7,r5
 402a6fc:	0009883a 	mov	r4,zero
 402a700:	003fb106 	br	402a5c8 <__flash_rwdata_start+0xffffa0ec>

0402a704 <__divsi3>:
 402a704:	20001b16 	blt	r4,zero,402a774 <__divsi3+0x70>
 402a708:	000f883a 	mov	r7,zero
 402a70c:	28001616 	blt	r5,zero,402a768 <__divsi3+0x64>
 402a710:	200d883a 	mov	r6,r4
 402a714:	29001a2e 	bgeu	r5,r4,402a780 <__divsi3+0x7c>
 402a718:	00800804 	movi	r2,32
 402a71c:	00c00044 	movi	r3,1
 402a720:	00000106 	br	402a728 <__divsi3+0x24>
 402a724:	10000d26 	beq	r2,zero,402a75c <__divsi3+0x58>
 402a728:	294b883a 	add	r5,r5,r5
 402a72c:	10bfffc4 	addi	r2,r2,-1
 402a730:	18c7883a 	add	r3,r3,r3
 402a734:	293ffb36 	bltu	r5,r4,402a724 <__flash_rwdata_start+0xffffa248>
 402a738:	0005883a 	mov	r2,zero
 402a73c:	18000726 	beq	r3,zero,402a75c <__divsi3+0x58>
 402a740:	0005883a 	mov	r2,zero
 402a744:	31400236 	bltu	r6,r5,402a750 <__divsi3+0x4c>
 402a748:	314dc83a 	sub	r6,r6,r5
 402a74c:	10c4b03a 	or	r2,r2,r3
 402a750:	1806d07a 	srli	r3,r3,1
 402a754:	280ad07a 	srli	r5,r5,1
 402a758:	183ffa1e 	bne	r3,zero,402a744 <__flash_rwdata_start+0xffffa268>
 402a75c:	38000126 	beq	r7,zero,402a764 <__divsi3+0x60>
 402a760:	0085c83a 	sub	r2,zero,r2
 402a764:	f800283a 	ret
 402a768:	014bc83a 	sub	r5,zero,r5
 402a76c:	39c0005c 	xori	r7,r7,1
 402a770:	003fe706 	br	402a710 <__flash_rwdata_start+0xffffa234>
 402a774:	0109c83a 	sub	r4,zero,r4
 402a778:	01c00044 	movi	r7,1
 402a77c:	003fe306 	br	402a70c <__flash_rwdata_start+0xffffa230>
 402a780:	00c00044 	movi	r3,1
 402a784:	003fee06 	br	402a740 <__flash_rwdata_start+0xffffa264>

0402a788 <__modsi3>:
 402a788:	20001716 	blt	r4,zero,402a7e8 <__modsi3+0x60>
 402a78c:	000f883a 	mov	r7,zero
 402a790:	2005883a 	mov	r2,r4
 402a794:	28001216 	blt	r5,zero,402a7e0 <__modsi3+0x58>
 402a798:	2900162e 	bgeu	r5,r4,402a7f4 <__modsi3+0x6c>
 402a79c:	01800804 	movi	r6,32
 402a7a0:	00c00044 	movi	r3,1
 402a7a4:	00000106 	br	402a7ac <__modsi3+0x24>
 402a7a8:	30000a26 	beq	r6,zero,402a7d4 <__modsi3+0x4c>
 402a7ac:	294b883a 	add	r5,r5,r5
 402a7b0:	31bfffc4 	addi	r6,r6,-1
 402a7b4:	18c7883a 	add	r3,r3,r3
 402a7b8:	293ffb36 	bltu	r5,r4,402a7a8 <__flash_rwdata_start+0xffffa2cc>
 402a7bc:	18000526 	beq	r3,zero,402a7d4 <__modsi3+0x4c>
 402a7c0:	1806d07a 	srli	r3,r3,1
 402a7c4:	11400136 	bltu	r2,r5,402a7cc <__modsi3+0x44>
 402a7c8:	1145c83a 	sub	r2,r2,r5
 402a7cc:	280ad07a 	srli	r5,r5,1
 402a7d0:	183ffb1e 	bne	r3,zero,402a7c0 <__flash_rwdata_start+0xffffa2e4>
 402a7d4:	38000126 	beq	r7,zero,402a7dc <__modsi3+0x54>
 402a7d8:	0085c83a 	sub	r2,zero,r2
 402a7dc:	f800283a 	ret
 402a7e0:	014bc83a 	sub	r5,zero,r5
 402a7e4:	003fec06 	br	402a798 <__flash_rwdata_start+0xffffa2bc>
 402a7e8:	0109c83a 	sub	r4,zero,r4
 402a7ec:	01c00044 	movi	r7,1
 402a7f0:	003fe706 	br	402a790 <__flash_rwdata_start+0xffffa2b4>
 402a7f4:	00c00044 	movi	r3,1
 402a7f8:	003ff106 	br	402a7c0 <__flash_rwdata_start+0xffffa2e4>

0402a7fc <__udivsi3>:
 402a7fc:	200d883a 	mov	r6,r4
 402a800:	2900152e 	bgeu	r5,r4,402a858 <__udivsi3+0x5c>
 402a804:	28001416 	blt	r5,zero,402a858 <__udivsi3+0x5c>
 402a808:	00800804 	movi	r2,32
 402a80c:	00c00044 	movi	r3,1
 402a810:	00000206 	br	402a81c <__udivsi3+0x20>
 402a814:	10000e26 	beq	r2,zero,402a850 <__udivsi3+0x54>
 402a818:	28000516 	blt	r5,zero,402a830 <__udivsi3+0x34>
 402a81c:	294b883a 	add	r5,r5,r5
 402a820:	10bfffc4 	addi	r2,r2,-1
 402a824:	18c7883a 	add	r3,r3,r3
 402a828:	293ffa36 	bltu	r5,r4,402a814 <__flash_rwdata_start+0xffffa338>
 402a82c:	18000826 	beq	r3,zero,402a850 <__udivsi3+0x54>
 402a830:	0005883a 	mov	r2,zero
 402a834:	31400236 	bltu	r6,r5,402a840 <__udivsi3+0x44>
 402a838:	314dc83a 	sub	r6,r6,r5
 402a83c:	10c4b03a 	or	r2,r2,r3
 402a840:	1806d07a 	srli	r3,r3,1
 402a844:	280ad07a 	srli	r5,r5,1
 402a848:	183ffa1e 	bne	r3,zero,402a834 <__flash_rwdata_start+0xffffa358>
 402a84c:	f800283a 	ret
 402a850:	0005883a 	mov	r2,zero
 402a854:	f800283a 	ret
 402a858:	00c00044 	movi	r3,1
 402a85c:	003ff406 	br	402a830 <__flash_rwdata_start+0xffffa354>

0402a860 <__umodsi3>:
 402a860:	2005883a 	mov	r2,r4
 402a864:	2900122e 	bgeu	r5,r4,402a8b0 <__umodsi3+0x50>
 402a868:	28001116 	blt	r5,zero,402a8b0 <__umodsi3+0x50>
 402a86c:	01800804 	movi	r6,32
 402a870:	00c00044 	movi	r3,1
 402a874:	00000206 	br	402a880 <__umodsi3+0x20>
 402a878:	30000c26 	beq	r6,zero,402a8ac <__umodsi3+0x4c>
 402a87c:	28000516 	blt	r5,zero,402a894 <__umodsi3+0x34>
 402a880:	294b883a 	add	r5,r5,r5
 402a884:	31bfffc4 	addi	r6,r6,-1
 402a888:	18c7883a 	add	r3,r3,r3
 402a88c:	293ffa36 	bltu	r5,r4,402a878 <__flash_rwdata_start+0xffffa39c>
 402a890:	18000626 	beq	r3,zero,402a8ac <__umodsi3+0x4c>
 402a894:	1806d07a 	srli	r3,r3,1
 402a898:	11400136 	bltu	r2,r5,402a8a0 <__umodsi3+0x40>
 402a89c:	1145c83a 	sub	r2,r2,r5
 402a8a0:	280ad07a 	srli	r5,r5,1
 402a8a4:	183ffb1e 	bne	r3,zero,402a894 <__flash_rwdata_start+0xffffa3b8>
 402a8a8:	f800283a 	ret
 402a8ac:	f800283a 	ret
 402a8b0:	00c00044 	movi	r3,1
 402a8b4:	003ff706 	br	402a894 <__flash_rwdata_start+0xffffa3b8>

0402a8b8 <__adddf3>:
 402a8b8:	02c00434 	movhi	r11,16
 402a8bc:	5affffc4 	addi	r11,r11,-1
 402a8c0:	2806d7fa 	srli	r3,r5,31
 402a8c4:	2ad4703a 	and	r10,r5,r11
 402a8c8:	3ad2703a 	and	r9,r7,r11
 402a8cc:	3804d53a 	srli	r2,r7,20
 402a8d0:	3018d77a 	srli	r12,r6,29
 402a8d4:	280ad53a 	srli	r5,r5,20
 402a8d8:	501490fa 	slli	r10,r10,3
 402a8dc:	2010d77a 	srli	r8,r4,29
 402a8e0:	481290fa 	slli	r9,r9,3
 402a8e4:	380ed7fa 	srli	r7,r7,31
 402a8e8:	defffb04 	addi	sp,sp,-20
 402a8ec:	dc800215 	stw	r18,8(sp)
 402a8f0:	dc400115 	stw	r17,4(sp)
 402a8f4:	dc000015 	stw	r16,0(sp)
 402a8f8:	dfc00415 	stw	ra,16(sp)
 402a8fc:	dcc00315 	stw	r19,12(sp)
 402a900:	1c803fcc 	andi	r18,r3,255
 402a904:	2c01ffcc 	andi	r16,r5,2047
 402a908:	5210b03a 	or	r8,r10,r8
 402a90c:	202290fa 	slli	r17,r4,3
 402a910:	1081ffcc 	andi	r2,r2,2047
 402a914:	4b12b03a 	or	r9,r9,r12
 402a918:	300c90fa 	slli	r6,r6,3
 402a91c:	91c07526 	beq	r18,r7,402aaf4 <__adddf3+0x23c>
 402a920:	8087c83a 	sub	r3,r16,r2
 402a924:	00c0ab0e 	bge	zero,r3,402abd4 <__adddf3+0x31c>
 402a928:	10002a1e 	bne	r2,zero,402a9d4 <__adddf3+0x11c>
 402a92c:	4984b03a 	or	r2,r9,r6
 402a930:	1000961e 	bne	r2,zero,402ab8c <__adddf3+0x2d4>
 402a934:	888001cc 	andi	r2,r17,7
 402a938:	10000726 	beq	r2,zero,402a958 <__adddf3+0xa0>
 402a93c:	888003cc 	andi	r2,r17,15
 402a940:	00c00104 	movi	r3,4
 402a944:	10c00426 	beq	r2,r3,402a958 <__adddf3+0xa0>
 402a948:	88c7883a 	add	r3,r17,r3
 402a94c:	1c63803a 	cmpltu	r17,r3,r17
 402a950:	4451883a 	add	r8,r8,r17
 402a954:	1823883a 	mov	r17,r3
 402a958:	4080202c 	andhi	r2,r8,128
 402a95c:	10005926 	beq	r2,zero,402aac4 <__adddf3+0x20c>
 402a960:	84000044 	addi	r16,r16,1
 402a964:	0081ffc4 	movi	r2,2047
 402a968:	8080ba26 	beq	r16,r2,402ac54 <__adddf3+0x39c>
 402a96c:	00bfe034 	movhi	r2,65408
 402a970:	10bfffc4 	addi	r2,r2,-1
 402a974:	4090703a 	and	r8,r8,r2
 402a978:	4004977a 	slli	r2,r8,29
 402a97c:	4010927a 	slli	r8,r8,9
 402a980:	8822d0fa 	srli	r17,r17,3
 402a984:	8401ffcc 	andi	r16,r16,2047
 402a988:	4010d33a 	srli	r8,r8,12
 402a98c:	9007883a 	mov	r3,r18
 402a990:	1444b03a 	or	r2,r2,r17
 402a994:	8401ffcc 	andi	r16,r16,2047
 402a998:	8020953a 	slli	r16,r16,20
 402a99c:	18c03fcc 	andi	r3,r3,255
 402a9a0:	01000434 	movhi	r4,16
 402a9a4:	213fffc4 	addi	r4,r4,-1
 402a9a8:	180697fa 	slli	r3,r3,31
 402a9ac:	4110703a 	and	r8,r8,r4
 402a9b0:	4410b03a 	or	r8,r8,r16
 402a9b4:	40c6b03a 	or	r3,r8,r3
 402a9b8:	dfc00417 	ldw	ra,16(sp)
 402a9bc:	dcc00317 	ldw	r19,12(sp)
 402a9c0:	dc800217 	ldw	r18,8(sp)
 402a9c4:	dc400117 	ldw	r17,4(sp)
 402a9c8:	dc000017 	ldw	r16,0(sp)
 402a9cc:	dec00504 	addi	sp,sp,20
 402a9d0:	f800283a 	ret
 402a9d4:	0081ffc4 	movi	r2,2047
 402a9d8:	80bfd626 	beq	r16,r2,402a934 <__flash_rwdata_start+0xffffa458>
 402a9dc:	4a402034 	orhi	r9,r9,128
 402a9e0:	00800e04 	movi	r2,56
 402a9e4:	10c09f16 	blt	r2,r3,402ac64 <__adddf3+0x3ac>
 402a9e8:	008007c4 	movi	r2,31
 402a9ec:	10c0c216 	blt	r2,r3,402acf8 <__adddf3+0x440>
 402a9f0:	00800804 	movi	r2,32
 402a9f4:	10c5c83a 	sub	r2,r2,r3
 402a9f8:	488a983a 	sll	r5,r9,r2
 402a9fc:	30c8d83a 	srl	r4,r6,r3
 402aa00:	3084983a 	sll	r2,r6,r2
 402aa04:	48c6d83a 	srl	r3,r9,r3
 402aa08:	290cb03a 	or	r6,r5,r4
 402aa0c:	1004c03a 	cmpne	r2,r2,zero
 402aa10:	308cb03a 	or	r6,r6,r2
 402aa14:	898dc83a 	sub	r6,r17,r6
 402aa18:	89a3803a 	cmpltu	r17,r17,r6
 402aa1c:	40d1c83a 	sub	r8,r8,r3
 402aa20:	4451c83a 	sub	r8,r8,r17
 402aa24:	3023883a 	mov	r17,r6
 402aa28:	4080202c 	andhi	r2,r8,128
 402aa2c:	10002326 	beq	r2,zero,402aabc <__adddf3+0x204>
 402aa30:	04c02034 	movhi	r19,128
 402aa34:	9cffffc4 	addi	r19,r19,-1
 402aa38:	44e6703a 	and	r19,r8,r19
 402aa3c:	98007626 	beq	r19,zero,402ac18 <__adddf3+0x360>
 402aa40:	9809883a 	mov	r4,r19
 402aa44:	402cebc0 	call	402cebc <__clzsi2>
 402aa48:	10fffe04 	addi	r3,r2,-8
 402aa4c:	010007c4 	movi	r4,31
 402aa50:	20c07716 	blt	r4,r3,402ac30 <__adddf3+0x378>
 402aa54:	00800804 	movi	r2,32
 402aa58:	10c5c83a 	sub	r2,r2,r3
 402aa5c:	8884d83a 	srl	r2,r17,r2
 402aa60:	98d0983a 	sll	r8,r19,r3
 402aa64:	88e2983a 	sll	r17,r17,r3
 402aa68:	1204b03a 	or	r2,r2,r8
 402aa6c:	1c007416 	blt	r3,r16,402ac40 <__adddf3+0x388>
 402aa70:	1c21c83a 	sub	r16,r3,r16
 402aa74:	82000044 	addi	r8,r16,1
 402aa78:	00c007c4 	movi	r3,31
 402aa7c:	1a009116 	blt	r3,r8,402acc4 <__adddf3+0x40c>
 402aa80:	00c00804 	movi	r3,32
 402aa84:	1a07c83a 	sub	r3,r3,r8
 402aa88:	8a08d83a 	srl	r4,r17,r8
 402aa8c:	88e2983a 	sll	r17,r17,r3
 402aa90:	10c6983a 	sll	r3,r2,r3
 402aa94:	1210d83a 	srl	r8,r2,r8
 402aa98:	8804c03a 	cmpne	r2,r17,zero
 402aa9c:	1906b03a 	or	r3,r3,r4
 402aaa0:	18a2b03a 	or	r17,r3,r2
 402aaa4:	0021883a 	mov	r16,zero
 402aaa8:	003fa206 	br	402a934 <__flash_rwdata_start+0xffffa458>
 402aaac:	1890b03a 	or	r8,r3,r2
 402aab0:	40017d26 	beq	r8,zero,402b0a8 <__adddf3+0x7f0>
 402aab4:	1011883a 	mov	r8,r2
 402aab8:	1823883a 	mov	r17,r3
 402aabc:	888001cc 	andi	r2,r17,7
 402aac0:	103f9e1e 	bne	r2,zero,402a93c <__flash_rwdata_start+0xffffa460>
 402aac4:	4004977a 	slli	r2,r8,29
 402aac8:	8822d0fa 	srli	r17,r17,3
 402aacc:	4010d0fa 	srli	r8,r8,3
 402aad0:	9007883a 	mov	r3,r18
 402aad4:	1444b03a 	or	r2,r2,r17
 402aad8:	0101ffc4 	movi	r4,2047
 402aadc:	81002426 	beq	r16,r4,402ab70 <__adddf3+0x2b8>
 402aae0:	8120703a 	and	r16,r16,r4
 402aae4:	01000434 	movhi	r4,16
 402aae8:	213fffc4 	addi	r4,r4,-1
 402aaec:	4110703a 	and	r8,r8,r4
 402aaf0:	003fa806 	br	402a994 <__flash_rwdata_start+0xffffa4b8>
 402aaf4:	8089c83a 	sub	r4,r16,r2
 402aaf8:	01005e0e 	bge	zero,r4,402ac74 <__adddf3+0x3bc>
 402aafc:	10002b26 	beq	r2,zero,402abac <__adddf3+0x2f4>
 402ab00:	0081ffc4 	movi	r2,2047
 402ab04:	80bf8b26 	beq	r16,r2,402a934 <__flash_rwdata_start+0xffffa458>
 402ab08:	4a402034 	orhi	r9,r9,128
 402ab0c:	00800e04 	movi	r2,56
 402ab10:	1100a40e 	bge	r2,r4,402ada4 <__adddf3+0x4ec>
 402ab14:	498cb03a 	or	r6,r9,r6
 402ab18:	300ac03a 	cmpne	r5,r6,zero
 402ab1c:	0013883a 	mov	r9,zero
 402ab20:	2c4b883a 	add	r5,r5,r17
 402ab24:	2c63803a 	cmpltu	r17,r5,r17
 402ab28:	4a11883a 	add	r8,r9,r8
 402ab2c:	8a11883a 	add	r8,r17,r8
 402ab30:	2823883a 	mov	r17,r5
 402ab34:	4080202c 	andhi	r2,r8,128
 402ab38:	103fe026 	beq	r2,zero,402aabc <__flash_rwdata_start+0xffffa5e0>
 402ab3c:	84000044 	addi	r16,r16,1
 402ab40:	0081ffc4 	movi	r2,2047
 402ab44:	8080d226 	beq	r16,r2,402ae90 <__adddf3+0x5d8>
 402ab48:	00bfe034 	movhi	r2,65408
 402ab4c:	10bfffc4 	addi	r2,r2,-1
 402ab50:	4090703a 	and	r8,r8,r2
 402ab54:	880ad07a 	srli	r5,r17,1
 402ab58:	400897fa 	slli	r4,r8,31
 402ab5c:	88c0004c 	andi	r3,r17,1
 402ab60:	28e2b03a 	or	r17,r5,r3
 402ab64:	4010d07a 	srli	r8,r8,1
 402ab68:	2462b03a 	or	r17,r4,r17
 402ab6c:	003f7106 	br	402a934 <__flash_rwdata_start+0xffffa458>
 402ab70:	4088b03a 	or	r4,r8,r2
 402ab74:	20014526 	beq	r4,zero,402b08c <__adddf3+0x7d4>
 402ab78:	01000434 	movhi	r4,16
 402ab7c:	42000234 	orhi	r8,r8,8
 402ab80:	213fffc4 	addi	r4,r4,-1
 402ab84:	4110703a 	and	r8,r8,r4
 402ab88:	003f8206 	br	402a994 <__flash_rwdata_start+0xffffa4b8>
 402ab8c:	18ffffc4 	addi	r3,r3,-1
 402ab90:	1800491e 	bne	r3,zero,402acb8 <__adddf3+0x400>
 402ab94:	898bc83a 	sub	r5,r17,r6
 402ab98:	8963803a 	cmpltu	r17,r17,r5
 402ab9c:	4251c83a 	sub	r8,r8,r9
 402aba0:	4451c83a 	sub	r8,r8,r17
 402aba4:	2823883a 	mov	r17,r5
 402aba8:	003f9f06 	br	402aa28 <__flash_rwdata_start+0xffffa54c>
 402abac:	4984b03a 	or	r2,r9,r6
 402abb0:	103f6026 	beq	r2,zero,402a934 <__flash_rwdata_start+0xffffa458>
 402abb4:	213fffc4 	addi	r4,r4,-1
 402abb8:	2000931e 	bne	r4,zero,402ae08 <__adddf3+0x550>
 402abbc:	898d883a 	add	r6,r17,r6
 402abc0:	3463803a 	cmpltu	r17,r6,r17
 402abc4:	4251883a 	add	r8,r8,r9
 402abc8:	8a11883a 	add	r8,r17,r8
 402abcc:	3023883a 	mov	r17,r6
 402abd0:	003fd806 	br	402ab34 <__flash_rwdata_start+0xffffa658>
 402abd4:	1800541e 	bne	r3,zero,402ad28 <__adddf3+0x470>
 402abd8:	80800044 	addi	r2,r16,1
 402abdc:	1081ffcc 	andi	r2,r2,2047
 402abe0:	00c00044 	movi	r3,1
 402abe4:	1880a00e 	bge	r3,r2,402ae68 <__adddf3+0x5b0>
 402abe8:	8989c83a 	sub	r4,r17,r6
 402abec:	8905803a 	cmpltu	r2,r17,r4
 402abf0:	4267c83a 	sub	r19,r8,r9
 402abf4:	98a7c83a 	sub	r19,r19,r2
 402abf8:	9880202c 	andhi	r2,r19,128
 402abfc:	10006326 	beq	r2,zero,402ad8c <__adddf3+0x4d4>
 402ac00:	3463c83a 	sub	r17,r6,r17
 402ac04:	4a07c83a 	sub	r3,r9,r8
 402ac08:	344d803a 	cmpltu	r6,r6,r17
 402ac0c:	19a7c83a 	sub	r19,r3,r6
 402ac10:	3825883a 	mov	r18,r7
 402ac14:	983f8a1e 	bne	r19,zero,402aa40 <__flash_rwdata_start+0xffffa564>
 402ac18:	8809883a 	mov	r4,r17
 402ac1c:	402cebc0 	call	402cebc <__clzsi2>
 402ac20:	10800804 	addi	r2,r2,32
 402ac24:	10fffe04 	addi	r3,r2,-8
 402ac28:	010007c4 	movi	r4,31
 402ac2c:	20ff890e 	bge	r4,r3,402aa54 <__flash_rwdata_start+0xffffa578>
 402ac30:	10bff604 	addi	r2,r2,-40
 402ac34:	8884983a 	sll	r2,r17,r2
 402ac38:	0023883a 	mov	r17,zero
 402ac3c:	1c3f8c0e 	bge	r3,r16,402aa70 <__flash_rwdata_start+0xffffa594>
 402ac40:	023fe034 	movhi	r8,65408
 402ac44:	423fffc4 	addi	r8,r8,-1
 402ac48:	80e1c83a 	sub	r16,r16,r3
 402ac4c:	1210703a 	and	r8,r2,r8
 402ac50:	003f3806 	br	402a934 <__flash_rwdata_start+0xffffa458>
 402ac54:	9007883a 	mov	r3,r18
 402ac58:	0011883a 	mov	r8,zero
 402ac5c:	0005883a 	mov	r2,zero
 402ac60:	003f4c06 	br	402a994 <__flash_rwdata_start+0xffffa4b8>
 402ac64:	498cb03a 	or	r6,r9,r6
 402ac68:	300cc03a 	cmpne	r6,r6,zero
 402ac6c:	0007883a 	mov	r3,zero
 402ac70:	003f6806 	br	402aa14 <__flash_rwdata_start+0xffffa538>
 402ac74:	20009c1e 	bne	r4,zero,402aee8 <__adddf3+0x630>
 402ac78:	80800044 	addi	r2,r16,1
 402ac7c:	1141ffcc 	andi	r5,r2,2047
 402ac80:	01000044 	movi	r4,1
 402ac84:	2140670e 	bge	r4,r5,402ae24 <__adddf3+0x56c>
 402ac88:	0101ffc4 	movi	r4,2047
 402ac8c:	11007f26 	beq	r2,r4,402ae8c <__adddf3+0x5d4>
 402ac90:	898d883a 	add	r6,r17,r6
 402ac94:	4247883a 	add	r3,r8,r9
 402ac98:	3451803a 	cmpltu	r8,r6,r17
 402ac9c:	40d1883a 	add	r8,r8,r3
 402aca0:	402297fa 	slli	r17,r8,31
 402aca4:	300cd07a 	srli	r6,r6,1
 402aca8:	4010d07a 	srli	r8,r8,1
 402acac:	1021883a 	mov	r16,r2
 402acb0:	89a2b03a 	or	r17,r17,r6
 402acb4:	003f1f06 	br	402a934 <__flash_rwdata_start+0xffffa458>
 402acb8:	0081ffc4 	movi	r2,2047
 402acbc:	80bf481e 	bne	r16,r2,402a9e0 <__flash_rwdata_start+0xffffa504>
 402acc0:	003f1c06 	br	402a934 <__flash_rwdata_start+0xffffa458>
 402acc4:	843ff844 	addi	r16,r16,-31
 402acc8:	01000804 	movi	r4,32
 402accc:	1406d83a 	srl	r3,r2,r16
 402acd0:	41005026 	beq	r8,r4,402ae14 <__adddf3+0x55c>
 402acd4:	01001004 	movi	r4,64
 402acd8:	2211c83a 	sub	r8,r4,r8
 402acdc:	1204983a 	sll	r2,r2,r8
 402ace0:	88a2b03a 	or	r17,r17,r2
 402ace4:	8822c03a 	cmpne	r17,r17,zero
 402ace8:	1c62b03a 	or	r17,r3,r17
 402acec:	0011883a 	mov	r8,zero
 402acf0:	0021883a 	mov	r16,zero
 402acf4:	003f7106 	br	402aabc <__flash_rwdata_start+0xffffa5e0>
 402acf8:	193ff804 	addi	r4,r3,-32
 402acfc:	00800804 	movi	r2,32
 402ad00:	4908d83a 	srl	r4,r9,r4
 402ad04:	18804526 	beq	r3,r2,402ae1c <__adddf3+0x564>
 402ad08:	00801004 	movi	r2,64
 402ad0c:	10c5c83a 	sub	r2,r2,r3
 402ad10:	4886983a 	sll	r3,r9,r2
 402ad14:	198cb03a 	or	r6,r3,r6
 402ad18:	300cc03a 	cmpne	r6,r6,zero
 402ad1c:	218cb03a 	or	r6,r4,r6
 402ad20:	0007883a 	mov	r3,zero
 402ad24:	003f3b06 	br	402aa14 <__flash_rwdata_start+0xffffa538>
 402ad28:	80002a26 	beq	r16,zero,402add4 <__adddf3+0x51c>
 402ad2c:	0101ffc4 	movi	r4,2047
 402ad30:	11006826 	beq	r2,r4,402aed4 <__adddf3+0x61c>
 402ad34:	00c7c83a 	sub	r3,zero,r3
 402ad38:	42002034 	orhi	r8,r8,128
 402ad3c:	01000e04 	movi	r4,56
 402ad40:	20c07c16 	blt	r4,r3,402af34 <__adddf3+0x67c>
 402ad44:	010007c4 	movi	r4,31
 402ad48:	20c0da16 	blt	r4,r3,402b0b4 <__adddf3+0x7fc>
 402ad4c:	01000804 	movi	r4,32
 402ad50:	20c9c83a 	sub	r4,r4,r3
 402ad54:	4114983a 	sll	r10,r8,r4
 402ad58:	88cad83a 	srl	r5,r17,r3
 402ad5c:	8908983a 	sll	r4,r17,r4
 402ad60:	40c6d83a 	srl	r3,r8,r3
 402ad64:	5162b03a 	or	r17,r10,r5
 402ad68:	2008c03a 	cmpne	r4,r4,zero
 402ad6c:	8922b03a 	or	r17,r17,r4
 402ad70:	3463c83a 	sub	r17,r6,r17
 402ad74:	48c7c83a 	sub	r3,r9,r3
 402ad78:	344d803a 	cmpltu	r6,r6,r17
 402ad7c:	1991c83a 	sub	r8,r3,r6
 402ad80:	1021883a 	mov	r16,r2
 402ad84:	3825883a 	mov	r18,r7
 402ad88:	003f2706 	br	402aa28 <__flash_rwdata_start+0xffffa54c>
 402ad8c:	24d0b03a 	or	r8,r4,r19
 402ad90:	40001b1e 	bne	r8,zero,402ae00 <__adddf3+0x548>
 402ad94:	0005883a 	mov	r2,zero
 402ad98:	0007883a 	mov	r3,zero
 402ad9c:	0021883a 	mov	r16,zero
 402ada0:	003f4d06 	br	402aad8 <__flash_rwdata_start+0xffffa5fc>
 402ada4:	008007c4 	movi	r2,31
 402ada8:	11003c16 	blt	r2,r4,402ae9c <__adddf3+0x5e4>
 402adac:	00800804 	movi	r2,32
 402adb0:	1105c83a 	sub	r2,r2,r4
 402adb4:	488e983a 	sll	r7,r9,r2
 402adb8:	310ad83a 	srl	r5,r6,r4
 402adbc:	3084983a 	sll	r2,r6,r2
 402adc0:	4912d83a 	srl	r9,r9,r4
 402adc4:	394ab03a 	or	r5,r7,r5
 402adc8:	1004c03a 	cmpne	r2,r2,zero
 402adcc:	288ab03a 	or	r5,r5,r2
 402add0:	003f5306 	br	402ab20 <__flash_rwdata_start+0xffffa644>
 402add4:	4448b03a 	or	r4,r8,r17
 402add8:	20003e26 	beq	r4,zero,402aed4 <__adddf3+0x61c>
 402addc:	00c6303a 	nor	r3,zero,r3
 402ade0:	18003a1e 	bne	r3,zero,402aecc <__adddf3+0x614>
 402ade4:	3463c83a 	sub	r17,r6,r17
 402ade8:	4a07c83a 	sub	r3,r9,r8
 402adec:	344d803a 	cmpltu	r6,r6,r17
 402adf0:	1991c83a 	sub	r8,r3,r6
 402adf4:	1021883a 	mov	r16,r2
 402adf8:	3825883a 	mov	r18,r7
 402adfc:	003f0a06 	br	402aa28 <__flash_rwdata_start+0xffffa54c>
 402ae00:	2023883a 	mov	r17,r4
 402ae04:	003f0d06 	br	402aa3c <__flash_rwdata_start+0xffffa560>
 402ae08:	0081ffc4 	movi	r2,2047
 402ae0c:	80bf3f1e 	bne	r16,r2,402ab0c <__flash_rwdata_start+0xffffa630>
 402ae10:	003ec806 	br	402a934 <__flash_rwdata_start+0xffffa458>
 402ae14:	0005883a 	mov	r2,zero
 402ae18:	003fb106 	br	402ace0 <__flash_rwdata_start+0xffffa804>
 402ae1c:	0007883a 	mov	r3,zero
 402ae20:	003fbc06 	br	402ad14 <__flash_rwdata_start+0xffffa838>
 402ae24:	4444b03a 	or	r2,r8,r17
 402ae28:	8000871e 	bne	r16,zero,402b048 <__adddf3+0x790>
 402ae2c:	1000ba26 	beq	r2,zero,402b118 <__adddf3+0x860>
 402ae30:	4984b03a 	or	r2,r9,r6
 402ae34:	103ebf26 	beq	r2,zero,402a934 <__flash_rwdata_start+0xffffa458>
 402ae38:	8985883a 	add	r2,r17,r6
 402ae3c:	4247883a 	add	r3,r8,r9
 402ae40:	1451803a 	cmpltu	r8,r2,r17
 402ae44:	40d1883a 	add	r8,r8,r3
 402ae48:	40c0202c 	andhi	r3,r8,128
 402ae4c:	1023883a 	mov	r17,r2
 402ae50:	183f1a26 	beq	r3,zero,402aabc <__flash_rwdata_start+0xffffa5e0>
 402ae54:	00bfe034 	movhi	r2,65408
 402ae58:	10bfffc4 	addi	r2,r2,-1
 402ae5c:	2021883a 	mov	r16,r4
 402ae60:	4090703a 	and	r8,r8,r2
 402ae64:	003eb306 	br	402a934 <__flash_rwdata_start+0xffffa458>
 402ae68:	4444b03a 	or	r2,r8,r17
 402ae6c:	8000291e 	bne	r16,zero,402af14 <__adddf3+0x65c>
 402ae70:	10004b1e 	bne	r2,zero,402afa0 <__adddf3+0x6e8>
 402ae74:	4990b03a 	or	r8,r9,r6
 402ae78:	40008b26 	beq	r8,zero,402b0a8 <__adddf3+0x7f0>
 402ae7c:	4811883a 	mov	r8,r9
 402ae80:	3023883a 	mov	r17,r6
 402ae84:	3825883a 	mov	r18,r7
 402ae88:	003eaa06 	br	402a934 <__flash_rwdata_start+0xffffa458>
 402ae8c:	1021883a 	mov	r16,r2
 402ae90:	0011883a 	mov	r8,zero
 402ae94:	0005883a 	mov	r2,zero
 402ae98:	003f0f06 	br	402aad8 <__flash_rwdata_start+0xffffa5fc>
 402ae9c:	217ff804 	addi	r5,r4,-32
 402aea0:	00800804 	movi	r2,32
 402aea4:	494ad83a 	srl	r5,r9,r5
 402aea8:	20807d26 	beq	r4,r2,402b0a0 <__adddf3+0x7e8>
 402aeac:	00801004 	movi	r2,64
 402aeb0:	1109c83a 	sub	r4,r2,r4
 402aeb4:	4912983a 	sll	r9,r9,r4
 402aeb8:	498cb03a 	or	r6,r9,r6
 402aebc:	300cc03a 	cmpne	r6,r6,zero
 402aec0:	298ab03a 	or	r5,r5,r6
 402aec4:	0013883a 	mov	r9,zero
 402aec8:	003f1506 	br	402ab20 <__flash_rwdata_start+0xffffa644>
 402aecc:	0101ffc4 	movi	r4,2047
 402aed0:	113f9a1e 	bne	r2,r4,402ad3c <__flash_rwdata_start+0xffffa860>
 402aed4:	4811883a 	mov	r8,r9
 402aed8:	3023883a 	mov	r17,r6
 402aedc:	1021883a 	mov	r16,r2
 402aee0:	3825883a 	mov	r18,r7
 402aee4:	003e9306 	br	402a934 <__flash_rwdata_start+0xffffa458>
 402aee8:	8000161e 	bne	r16,zero,402af44 <__adddf3+0x68c>
 402aeec:	444ab03a 	or	r5,r8,r17
 402aef0:	28005126 	beq	r5,zero,402b038 <__adddf3+0x780>
 402aef4:	0108303a 	nor	r4,zero,r4
 402aef8:	20004d1e 	bne	r4,zero,402b030 <__adddf3+0x778>
 402aefc:	89a3883a 	add	r17,r17,r6
 402af00:	4253883a 	add	r9,r8,r9
 402af04:	898d803a 	cmpltu	r6,r17,r6
 402af08:	3251883a 	add	r8,r6,r9
 402af0c:	1021883a 	mov	r16,r2
 402af10:	003f0806 	br	402ab34 <__flash_rwdata_start+0xffffa658>
 402af14:	1000301e 	bne	r2,zero,402afd8 <__adddf3+0x720>
 402af18:	4984b03a 	or	r2,r9,r6
 402af1c:	10007126 	beq	r2,zero,402b0e4 <__adddf3+0x82c>
 402af20:	4811883a 	mov	r8,r9
 402af24:	3023883a 	mov	r17,r6
 402af28:	3825883a 	mov	r18,r7
 402af2c:	0401ffc4 	movi	r16,2047
 402af30:	003e8006 	br	402a934 <__flash_rwdata_start+0xffffa458>
 402af34:	4462b03a 	or	r17,r8,r17
 402af38:	8822c03a 	cmpne	r17,r17,zero
 402af3c:	0007883a 	mov	r3,zero
 402af40:	003f8b06 	br	402ad70 <__flash_rwdata_start+0xffffa894>
 402af44:	0141ffc4 	movi	r5,2047
 402af48:	11403b26 	beq	r2,r5,402b038 <__adddf3+0x780>
 402af4c:	0109c83a 	sub	r4,zero,r4
 402af50:	42002034 	orhi	r8,r8,128
 402af54:	01400e04 	movi	r5,56
 402af58:	29006716 	blt	r5,r4,402b0f8 <__adddf3+0x840>
 402af5c:	014007c4 	movi	r5,31
 402af60:	29007016 	blt	r5,r4,402b124 <__adddf3+0x86c>
 402af64:	01400804 	movi	r5,32
 402af68:	290bc83a 	sub	r5,r5,r4
 402af6c:	4154983a 	sll	r10,r8,r5
 402af70:	890ed83a 	srl	r7,r17,r4
 402af74:	894a983a 	sll	r5,r17,r5
 402af78:	4108d83a 	srl	r4,r8,r4
 402af7c:	51e2b03a 	or	r17,r10,r7
 402af80:	280ac03a 	cmpne	r5,r5,zero
 402af84:	8962b03a 	or	r17,r17,r5
 402af88:	89a3883a 	add	r17,r17,r6
 402af8c:	2253883a 	add	r9,r4,r9
 402af90:	898d803a 	cmpltu	r6,r17,r6
 402af94:	3251883a 	add	r8,r6,r9
 402af98:	1021883a 	mov	r16,r2
 402af9c:	003ee506 	br	402ab34 <__flash_rwdata_start+0xffffa658>
 402afa0:	4984b03a 	or	r2,r9,r6
 402afa4:	103e6326 	beq	r2,zero,402a934 <__flash_rwdata_start+0xffffa458>
 402afa8:	8987c83a 	sub	r3,r17,r6
 402afac:	88c9803a 	cmpltu	r4,r17,r3
 402afb0:	4245c83a 	sub	r2,r8,r9
 402afb4:	1105c83a 	sub	r2,r2,r4
 402afb8:	1100202c 	andhi	r4,r2,128
 402afbc:	203ebb26 	beq	r4,zero,402aaac <__flash_rwdata_start+0xffffa5d0>
 402afc0:	3463c83a 	sub	r17,r6,r17
 402afc4:	4a07c83a 	sub	r3,r9,r8
 402afc8:	344d803a 	cmpltu	r6,r6,r17
 402afcc:	1991c83a 	sub	r8,r3,r6
 402afd0:	3825883a 	mov	r18,r7
 402afd4:	003e5706 	br	402a934 <__flash_rwdata_start+0xffffa458>
 402afd8:	4984b03a 	or	r2,r9,r6
 402afdc:	10002e26 	beq	r2,zero,402b098 <__adddf3+0x7e0>
 402afe0:	4004d0fa 	srli	r2,r8,3
 402afe4:	8822d0fa 	srli	r17,r17,3
 402afe8:	4010977a 	slli	r8,r8,29
 402afec:	10c0022c 	andhi	r3,r2,8
 402aff0:	4462b03a 	or	r17,r8,r17
 402aff4:	18000826 	beq	r3,zero,402b018 <__adddf3+0x760>
 402aff8:	4808d0fa 	srli	r4,r9,3
 402affc:	20c0022c 	andhi	r3,r4,8
 402b000:	1800051e 	bne	r3,zero,402b018 <__adddf3+0x760>
 402b004:	300cd0fa 	srli	r6,r6,3
 402b008:	4806977a 	slli	r3,r9,29
 402b00c:	2005883a 	mov	r2,r4
 402b010:	3825883a 	mov	r18,r7
 402b014:	19a2b03a 	or	r17,r3,r6
 402b018:	8810d77a 	srli	r8,r17,29
 402b01c:	100490fa 	slli	r2,r2,3
 402b020:	882290fa 	slli	r17,r17,3
 402b024:	0401ffc4 	movi	r16,2047
 402b028:	4090b03a 	or	r8,r8,r2
 402b02c:	003e4106 	br	402a934 <__flash_rwdata_start+0xffffa458>
 402b030:	0141ffc4 	movi	r5,2047
 402b034:	117fc71e 	bne	r2,r5,402af54 <__flash_rwdata_start+0xffffaa78>
 402b038:	4811883a 	mov	r8,r9
 402b03c:	3023883a 	mov	r17,r6
 402b040:	1021883a 	mov	r16,r2
 402b044:	003e3b06 	br	402a934 <__flash_rwdata_start+0xffffa458>
 402b048:	10002f26 	beq	r2,zero,402b108 <__adddf3+0x850>
 402b04c:	4984b03a 	or	r2,r9,r6
 402b050:	10001126 	beq	r2,zero,402b098 <__adddf3+0x7e0>
 402b054:	4004d0fa 	srli	r2,r8,3
 402b058:	8822d0fa 	srli	r17,r17,3
 402b05c:	4010977a 	slli	r8,r8,29
 402b060:	10c0022c 	andhi	r3,r2,8
 402b064:	4462b03a 	or	r17,r8,r17
 402b068:	183feb26 	beq	r3,zero,402b018 <__flash_rwdata_start+0xffffab3c>
 402b06c:	4808d0fa 	srli	r4,r9,3
 402b070:	20c0022c 	andhi	r3,r4,8
 402b074:	183fe81e 	bne	r3,zero,402b018 <__flash_rwdata_start+0xffffab3c>
 402b078:	300cd0fa 	srli	r6,r6,3
 402b07c:	4806977a 	slli	r3,r9,29
 402b080:	2005883a 	mov	r2,r4
 402b084:	19a2b03a 	or	r17,r3,r6
 402b088:	003fe306 	br	402b018 <__flash_rwdata_start+0xffffab3c>
 402b08c:	0011883a 	mov	r8,zero
 402b090:	0005883a 	mov	r2,zero
 402b094:	003e3f06 	br	402a994 <__flash_rwdata_start+0xffffa4b8>
 402b098:	0401ffc4 	movi	r16,2047
 402b09c:	003e2506 	br	402a934 <__flash_rwdata_start+0xffffa458>
 402b0a0:	0013883a 	mov	r9,zero
 402b0a4:	003f8406 	br	402aeb8 <__flash_rwdata_start+0xffffa9dc>
 402b0a8:	0005883a 	mov	r2,zero
 402b0ac:	0007883a 	mov	r3,zero
 402b0b0:	003e8906 	br	402aad8 <__flash_rwdata_start+0xffffa5fc>
 402b0b4:	197ff804 	addi	r5,r3,-32
 402b0b8:	01000804 	movi	r4,32
 402b0bc:	414ad83a 	srl	r5,r8,r5
 402b0c0:	19002426 	beq	r3,r4,402b154 <__adddf3+0x89c>
 402b0c4:	01001004 	movi	r4,64
 402b0c8:	20c7c83a 	sub	r3,r4,r3
 402b0cc:	40c6983a 	sll	r3,r8,r3
 402b0d0:	1c46b03a 	or	r3,r3,r17
 402b0d4:	1806c03a 	cmpne	r3,r3,zero
 402b0d8:	28e2b03a 	or	r17,r5,r3
 402b0dc:	0007883a 	mov	r3,zero
 402b0e0:	003f2306 	br	402ad70 <__flash_rwdata_start+0xffffa894>
 402b0e4:	0007883a 	mov	r3,zero
 402b0e8:	5811883a 	mov	r8,r11
 402b0ec:	00bfffc4 	movi	r2,-1
 402b0f0:	0401ffc4 	movi	r16,2047
 402b0f4:	003e7806 	br	402aad8 <__flash_rwdata_start+0xffffa5fc>
 402b0f8:	4462b03a 	or	r17,r8,r17
 402b0fc:	8822c03a 	cmpne	r17,r17,zero
 402b100:	0009883a 	mov	r4,zero
 402b104:	003fa006 	br	402af88 <__flash_rwdata_start+0xffffaaac>
 402b108:	4811883a 	mov	r8,r9
 402b10c:	3023883a 	mov	r17,r6
 402b110:	0401ffc4 	movi	r16,2047
 402b114:	003e0706 	br	402a934 <__flash_rwdata_start+0xffffa458>
 402b118:	4811883a 	mov	r8,r9
 402b11c:	3023883a 	mov	r17,r6
 402b120:	003e0406 	br	402a934 <__flash_rwdata_start+0xffffa458>
 402b124:	21fff804 	addi	r7,r4,-32
 402b128:	01400804 	movi	r5,32
 402b12c:	41ced83a 	srl	r7,r8,r7
 402b130:	21400a26 	beq	r4,r5,402b15c <__adddf3+0x8a4>
 402b134:	01401004 	movi	r5,64
 402b138:	2909c83a 	sub	r4,r5,r4
 402b13c:	4108983a 	sll	r4,r8,r4
 402b140:	2448b03a 	or	r4,r4,r17
 402b144:	2008c03a 	cmpne	r4,r4,zero
 402b148:	3922b03a 	or	r17,r7,r4
 402b14c:	0009883a 	mov	r4,zero
 402b150:	003f8d06 	br	402af88 <__flash_rwdata_start+0xffffaaac>
 402b154:	0007883a 	mov	r3,zero
 402b158:	003fdd06 	br	402b0d0 <__flash_rwdata_start+0xffffabf4>
 402b15c:	0009883a 	mov	r4,zero
 402b160:	003ff706 	br	402b140 <__flash_rwdata_start+0xffffac64>

0402b164 <__divdf3>:
 402b164:	defff204 	addi	sp,sp,-56
 402b168:	dd400915 	stw	r21,36(sp)
 402b16c:	282ad53a 	srli	r21,r5,20
 402b170:	dd000815 	stw	r20,32(sp)
 402b174:	2828d7fa 	srli	r20,r5,31
 402b178:	dc000415 	stw	r16,16(sp)
 402b17c:	04000434 	movhi	r16,16
 402b180:	df000c15 	stw	fp,48(sp)
 402b184:	843fffc4 	addi	r16,r16,-1
 402b188:	dfc00d15 	stw	ra,52(sp)
 402b18c:	ddc00b15 	stw	r23,44(sp)
 402b190:	dd800a15 	stw	r22,40(sp)
 402b194:	dcc00715 	stw	r19,28(sp)
 402b198:	dc800615 	stw	r18,24(sp)
 402b19c:	dc400515 	stw	r17,20(sp)
 402b1a0:	ad41ffcc 	andi	r21,r21,2047
 402b1a4:	2c20703a 	and	r16,r5,r16
 402b1a8:	a7003fcc 	andi	fp,r20,255
 402b1ac:	a8006126 	beq	r21,zero,402b334 <__divdf3+0x1d0>
 402b1b0:	0081ffc4 	movi	r2,2047
 402b1b4:	2025883a 	mov	r18,r4
 402b1b8:	a8803726 	beq	r21,r2,402b298 <__divdf3+0x134>
 402b1bc:	80800434 	orhi	r2,r16,16
 402b1c0:	100490fa 	slli	r2,r2,3
 402b1c4:	2020d77a 	srli	r16,r4,29
 402b1c8:	202490fa 	slli	r18,r4,3
 402b1cc:	ad7f0044 	addi	r21,r21,-1023
 402b1d0:	80a0b03a 	or	r16,r16,r2
 402b1d4:	0027883a 	mov	r19,zero
 402b1d8:	0013883a 	mov	r9,zero
 402b1dc:	3804d53a 	srli	r2,r7,20
 402b1e0:	382cd7fa 	srli	r22,r7,31
 402b1e4:	04400434 	movhi	r17,16
 402b1e8:	8c7fffc4 	addi	r17,r17,-1
 402b1ec:	1081ffcc 	andi	r2,r2,2047
 402b1f0:	3011883a 	mov	r8,r6
 402b1f4:	3c62703a 	and	r17,r7,r17
 402b1f8:	b5c03fcc 	andi	r23,r22,255
 402b1fc:	10006c26 	beq	r2,zero,402b3b0 <__divdf3+0x24c>
 402b200:	00c1ffc4 	movi	r3,2047
 402b204:	10c06426 	beq	r2,r3,402b398 <__divdf3+0x234>
 402b208:	88c00434 	orhi	r3,r17,16
 402b20c:	180690fa 	slli	r3,r3,3
 402b210:	3022d77a 	srli	r17,r6,29
 402b214:	301090fa 	slli	r8,r6,3
 402b218:	10bf0044 	addi	r2,r2,-1023
 402b21c:	88e2b03a 	or	r17,r17,r3
 402b220:	000f883a 	mov	r7,zero
 402b224:	a58cf03a 	xor	r6,r20,r22
 402b228:	3cc8b03a 	or	r4,r7,r19
 402b22c:	a8abc83a 	sub	r21,r21,r2
 402b230:	008003c4 	movi	r2,15
 402b234:	3007883a 	mov	r3,r6
 402b238:	34c03fcc 	andi	r19,r6,255
 402b23c:	11009036 	bltu	r2,r4,402b480 <__divdf3+0x31c>
 402b240:	200890ba 	slli	r4,r4,2
 402b244:	008100f4 	movhi	r2,1027
 402b248:	10ac9604 	addi	r2,r2,-19880
 402b24c:	2089883a 	add	r4,r4,r2
 402b250:	20800017 	ldw	r2,0(r4)
 402b254:	1000683a 	jmp	r2
 402b258:	0402b480 	call	402b48 <_gp+0x3f8c10>
 402b25c:	0402b2d0 	cmplti	r16,zero,2763
 402b260:	0402b470 	cmpltui	r16,zero,2769
 402b264:	0402b2c4 	movi	r16,2763
 402b268:	0402b470 	cmpltui	r16,zero,2769
 402b26c:	0402b444 	movi	r16,2769
 402b270:	0402b470 	cmpltui	r16,zero,2769
 402b274:	0402b2c4 	movi	r16,2763
 402b278:	0402b2d0 	cmplti	r16,zero,2763
 402b27c:	0402b2d0 	cmplti	r16,zero,2763
 402b280:	0402b444 	movi	r16,2769
 402b284:	0402b2c4 	movi	r16,2763
 402b288:	0402b2b4 	movhi	r16,2762
 402b28c:	0402b2b4 	movhi	r16,2762
 402b290:	0402b2b4 	movhi	r16,2762
 402b294:	0402b764 	muli	r16,zero,2781
 402b298:	2404b03a 	or	r2,r4,r16
 402b29c:	1000661e 	bne	r2,zero,402b438 <__divdf3+0x2d4>
 402b2a0:	04c00204 	movi	r19,8
 402b2a4:	0021883a 	mov	r16,zero
 402b2a8:	0025883a 	mov	r18,zero
 402b2ac:	02400084 	movi	r9,2
 402b2b0:	003fca06 	br	402b1dc <__flash_rwdata_start+0xffffad00>
 402b2b4:	8023883a 	mov	r17,r16
 402b2b8:	9011883a 	mov	r8,r18
 402b2bc:	e02f883a 	mov	r23,fp
 402b2c0:	480f883a 	mov	r7,r9
 402b2c4:	00800084 	movi	r2,2
 402b2c8:	3881311e 	bne	r7,r2,402b790 <__divdf3+0x62c>
 402b2cc:	b827883a 	mov	r19,r23
 402b2d0:	98c0004c 	andi	r3,r19,1
 402b2d4:	0081ffc4 	movi	r2,2047
 402b2d8:	000b883a 	mov	r5,zero
 402b2dc:	0025883a 	mov	r18,zero
 402b2e0:	1004953a 	slli	r2,r2,20
 402b2e4:	18c03fcc 	andi	r3,r3,255
 402b2e8:	04400434 	movhi	r17,16
 402b2ec:	8c7fffc4 	addi	r17,r17,-1
 402b2f0:	180697fa 	slli	r3,r3,31
 402b2f4:	2c4a703a 	and	r5,r5,r17
 402b2f8:	288ab03a 	or	r5,r5,r2
 402b2fc:	28c6b03a 	or	r3,r5,r3
 402b300:	9005883a 	mov	r2,r18
 402b304:	dfc00d17 	ldw	ra,52(sp)
 402b308:	df000c17 	ldw	fp,48(sp)
 402b30c:	ddc00b17 	ldw	r23,44(sp)
 402b310:	dd800a17 	ldw	r22,40(sp)
 402b314:	dd400917 	ldw	r21,36(sp)
 402b318:	dd000817 	ldw	r20,32(sp)
 402b31c:	dcc00717 	ldw	r19,28(sp)
 402b320:	dc800617 	ldw	r18,24(sp)
 402b324:	dc400517 	ldw	r17,20(sp)
 402b328:	dc000417 	ldw	r16,16(sp)
 402b32c:	dec00e04 	addi	sp,sp,56
 402b330:	f800283a 	ret
 402b334:	2404b03a 	or	r2,r4,r16
 402b338:	2027883a 	mov	r19,r4
 402b33c:	10003926 	beq	r2,zero,402b424 <__divdf3+0x2c0>
 402b340:	80012e26 	beq	r16,zero,402b7fc <__divdf3+0x698>
 402b344:	8009883a 	mov	r4,r16
 402b348:	d9800315 	stw	r6,12(sp)
 402b34c:	d9c00215 	stw	r7,8(sp)
 402b350:	402cebc0 	call	402cebc <__clzsi2>
 402b354:	d9800317 	ldw	r6,12(sp)
 402b358:	d9c00217 	ldw	r7,8(sp)
 402b35c:	113ffd44 	addi	r4,r2,-11
 402b360:	00c00704 	movi	r3,28
 402b364:	19012116 	blt	r3,r4,402b7ec <__divdf3+0x688>
 402b368:	00c00744 	movi	r3,29
 402b36c:	147ffe04 	addi	r17,r2,-8
 402b370:	1907c83a 	sub	r3,r3,r4
 402b374:	8460983a 	sll	r16,r16,r17
 402b378:	98c6d83a 	srl	r3,r19,r3
 402b37c:	9c64983a 	sll	r18,r19,r17
 402b380:	1c20b03a 	or	r16,r3,r16
 402b384:	1080fcc4 	addi	r2,r2,1011
 402b388:	00abc83a 	sub	r21,zero,r2
 402b38c:	0027883a 	mov	r19,zero
 402b390:	0013883a 	mov	r9,zero
 402b394:	003f9106 	br	402b1dc <__flash_rwdata_start+0xffffad00>
 402b398:	3446b03a 	or	r3,r6,r17
 402b39c:	18001f1e 	bne	r3,zero,402b41c <__divdf3+0x2b8>
 402b3a0:	0023883a 	mov	r17,zero
 402b3a4:	0011883a 	mov	r8,zero
 402b3a8:	01c00084 	movi	r7,2
 402b3ac:	003f9d06 	br	402b224 <__flash_rwdata_start+0xffffad48>
 402b3b0:	3446b03a 	or	r3,r6,r17
 402b3b4:	18001526 	beq	r3,zero,402b40c <__divdf3+0x2a8>
 402b3b8:	88011b26 	beq	r17,zero,402b828 <__divdf3+0x6c4>
 402b3bc:	8809883a 	mov	r4,r17
 402b3c0:	d9800315 	stw	r6,12(sp)
 402b3c4:	da400115 	stw	r9,4(sp)
 402b3c8:	402cebc0 	call	402cebc <__clzsi2>
 402b3cc:	d9800317 	ldw	r6,12(sp)
 402b3d0:	da400117 	ldw	r9,4(sp)
 402b3d4:	113ffd44 	addi	r4,r2,-11
 402b3d8:	00c00704 	movi	r3,28
 402b3dc:	19010e16 	blt	r3,r4,402b818 <__divdf3+0x6b4>
 402b3e0:	00c00744 	movi	r3,29
 402b3e4:	123ffe04 	addi	r8,r2,-8
 402b3e8:	1907c83a 	sub	r3,r3,r4
 402b3ec:	8a22983a 	sll	r17,r17,r8
 402b3f0:	30c6d83a 	srl	r3,r6,r3
 402b3f4:	3210983a 	sll	r8,r6,r8
 402b3f8:	1c62b03a 	or	r17,r3,r17
 402b3fc:	1080fcc4 	addi	r2,r2,1011
 402b400:	0085c83a 	sub	r2,zero,r2
 402b404:	000f883a 	mov	r7,zero
 402b408:	003f8606 	br	402b224 <__flash_rwdata_start+0xffffad48>
 402b40c:	0023883a 	mov	r17,zero
 402b410:	0011883a 	mov	r8,zero
 402b414:	01c00044 	movi	r7,1
 402b418:	003f8206 	br	402b224 <__flash_rwdata_start+0xffffad48>
 402b41c:	01c000c4 	movi	r7,3
 402b420:	003f8006 	br	402b224 <__flash_rwdata_start+0xffffad48>
 402b424:	04c00104 	movi	r19,4
 402b428:	0021883a 	mov	r16,zero
 402b42c:	0025883a 	mov	r18,zero
 402b430:	02400044 	movi	r9,1
 402b434:	003f6906 	br	402b1dc <__flash_rwdata_start+0xffffad00>
 402b438:	04c00304 	movi	r19,12
 402b43c:	024000c4 	movi	r9,3
 402b440:	003f6606 	br	402b1dc <__flash_rwdata_start+0xffffad00>
 402b444:	01400434 	movhi	r5,16
 402b448:	0007883a 	mov	r3,zero
 402b44c:	297fffc4 	addi	r5,r5,-1
 402b450:	04bfffc4 	movi	r18,-1
 402b454:	0081ffc4 	movi	r2,2047
 402b458:	003fa106 	br	402b2e0 <__flash_rwdata_start+0xffffae04>
 402b45c:	00c00044 	movi	r3,1
 402b460:	1887c83a 	sub	r3,r3,r2
 402b464:	01000e04 	movi	r4,56
 402b468:	20c1210e 	bge	r4,r3,402b8f0 <__divdf3+0x78c>
 402b46c:	98c0004c 	andi	r3,r19,1
 402b470:	0005883a 	mov	r2,zero
 402b474:	000b883a 	mov	r5,zero
 402b478:	0025883a 	mov	r18,zero
 402b47c:	003f9806 	br	402b2e0 <__flash_rwdata_start+0xffffae04>
 402b480:	8c00fd36 	bltu	r17,r16,402b878 <__divdf3+0x714>
 402b484:	8440fb26 	beq	r16,r17,402b874 <__divdf3+0x710>
 402b488:	8007883a 	mov	r3,r16
 402b48c:	ad7fffc4 	addi	r21,r21,-1
 402b490:	0021883a 	mov	r16,zero
 402b494:	4004d63a 	srli	r2,r8,24
 402b498:	8822923a 	slli	r17,r17,8
 402b49c:	1809883a 	mov	r4,r3
 402b4a0:	402c923a 	slli	r22,r8,8
 402b4a4:	88b8b03a 	or	fp,r17,r2
 402b4a8:	e028d43a 	srli	r20,fp,16
 402b4ac:	d8c00015 	stw	r3,0(sp)
 402b4b0:	e5ffffcc 	andi	r23,fp,65535
 402b4b4:	a00b883a 	mov	r5,r20
 402b4b8:	402a7fc0 	call	402a7fc <__udivsi3>
 402b4bc:	d8c00017 	ldw	r3,0(sp)
 402b4c0:	a00b883a 	mov	r5,r20
 402b4c4:	d8800315 	stw	r2,12(sp)
 402b4c8:	1809883a 	mov	r4,r3
 402b4cc:	402a8600 	call	402a860 <__umodsi3>
 402b4d0:	d9800317 	ldw	r6,12(sp)
 402b4d4:	1006943a 	slli	r3,r2,16
 402b4d8:	9004d43a 	srli	r2,r18,16
 402b4dc:	b9a3383a 	mul	r17,r23,r6
 402b4e0:	10c4b03a 	or	r2,r2,r3
 402b4e4:	1440062e 	bgeu	r2,r17,402b500 <__divdf3+0x39c>
 402b4e8:	1705883a 	add	r2,r2,fp
 402b4ec:	30ffffc4 	addi	r3,r6,-1
 402b4f0:	1700ee36 	bltu	r2,fp,402b8ac <__divdf3+0x748>
 402b4f4:	1440ed2e 	bgeu	r2,r17,402b8ac <__divdf3+0x748>
 402b4f8:	31bfff84 	addi	r6,r6,-2
 402b4fc:	1705883a 	add	r2,r2,fp
 402b500:	1463c83a 	sub	r17,r2,r17
 402b504:	a00b883a 	mov	r5,r20
 402b508:	8809883a 	mov	r4,r17
 402b50c:	d9800315 	stw	r6,12(sp)
 402b510:	402a7fc0 	call	402a7fc <__udivsi3>
 402b514:	a00b883a 	mov	r5,r20
 402b518:	8809883a 	mov	r4,r17
 402b51c:	d8800215 	stw	r2,8(sp)
 402b520:	402a8600 	call	402a860 <__umodsi3>
 402b524:	d9c00217 	ldw	r7,8(sp)
 402b528:	1004943a 	slli	r2,r2,16
 402b52c:	94bfffcc 	andi	r18,r18,65535
 402b530:	b9d1383a 	mul	r8,r23,r7
 402b534:	90a4b03a 	or	r18,r18,r2
 402b538:	d9800317 	ldw	r6,12(sp)
 402b53c:	9200062e 	bgeu	r18,r8,402b558 <__divdf3+0x3f4>
 402b540:	9725883a 	add	r18,r18,fp
 402b544:	38bfffc4 	addi	r2,r7,-1
 402b548:	9700d636 	bltu	r18,fp,402b8a4 <__divdf3+0x740>
 402b54c:	9200d52e 	bgeu	r18,r8,402b8a4 <__divdf3+0x740>
 402b550:	39ffff84 	addi	r7,r7,-2
 402b554:	9725883a 	add	r18,r18,fp
 402b558:	3004943a 	slli	r2,r6,16
 402b55c:	b012d43a 	srli	r9,r22,16
 402b560:	b1bfffcc 	andi	r6,r22,65535
 402b564:	11e2b03a 	or	r17,r2,r7
 402b568:	8806d43a 	srli	r3,r17,16
 402b56c:	893fffcc 	andi	r4,r17,65535
 402b570:	218b383a 	mul	r5,r4,r6
 402b574:	30c5383a 	mul	r2,r6,r3
 402b578:	2249383a 	mul	r4,r4,r9
 402b57c:	280ed43a 	srli	r7,r5,16
 402b580:	9225c83a 	sub	r18,r18,r8
 402b584:	2089883a 	add	r4,r4,r2
 402b588:	3909883a 	add	r4,r7,r4
 402b58c:	1a47383a 	mul	r3,r3,r9
 402b590:	2080022e 	bgeu	r4,r2,402b59c <__divdf3+0x438>
 402b594:	00800074 	movhi	r2,1
 402b598:	1887883a 	add	r3,r3,r2
 402b59c:	2004d43a 	srli	r2,r4,16
 402b5a0:	2008943a 	slli	r4,r4,16
 402b5a4:	297fffcc 	andi	r5,r5,65535
 402b5a8:	10c7883a 	add	r3,r2,r3
 402b5ac:	2149883a 	add	r4,r4,r5
 402b5b0:	90c0a536 	bltu	r18,r3,402b848 <__divdf3+0x6e4>
 402b5b4:	90c0bf26 	beq	r18,r3,402b8b4 <__divdf3+0x750>
 402b5b8:	90c7c83a 	sub	r3,r18,r3
 402b5bc:	810fc83a 	sub	r7,r16,r4
 402b5c0:	81e5803a 	cmpltu	r18,r16,r7
 402b5c4:	1ca5c83a 	sub	r18,r3,r18
 402b5c8:	e480c126 	beq	fp,r18,402b8d0 <__divdf3+0x76c>
 402b5cc:	a00b883a 	mov	r5,r20
 402b5d0:	9009883a 	mov	r4,r18
 402b5d4:	d9800315 	stw	r6,12(sp)
 402b5d8:	d9c00215 	stw	r7,8(sp)
 402b5dc:	da400115 	stw	r9,4(sp)
 402b5e0:	402a7fc0 	call	402a7fc <__udivsi3>
 402b5e4:	a00b883a 	mov	r5,r20
 402b5e8:	9009883a 	mov	r4,r18
 402b5ec:	d8800015 	stw	r2,0(sp)
 402b5f0:	402a8600 	call	402a860 <__umodsi3>
 402b5f4:	d9c00217 	ldw	r7,8(sp)
 402b5f8:	da000017 	ldw	r8,0(sp)
 402b5fc:	1006943a 	slli	r3,r2,16
 402b600:	3804d43a 	srli	r2,r7,16
 402b604:	ba21383a 	mul	r16,r23,r8
 402b608:	d9800317 	ldw	r6,12(sp)
 402b60c:	10c4b03a 	or	r2,r2,r3
 402b610:	da400117 	ldw	r9,4(sp)
 402b614:	1400062e 	bgeu	r2,r16,402b630 <__divdf3+0x4cc>
 402b618:	1705883a 	add	r2,r2,fp
 402b61c:	40ffffc4 	addi	r3,r8,-1
 402b620:	1700ad36 	bltu	r2,fp,402b8d8 <__divdf3+0x774>
 402b624:	1400ac2e 	bgeu	r2,r16,402b8d8 <__divdf3+0x774>
 402b628:	423fff84 	addi	r8,r8,-2
 402b62c:	1705883a 	add	r2,r2,fp
 402b630:	1421c83a 	sub	r16,r2,r16
 402b634:	a00b883a 	mov	r5,r20
 402b638:	8009883a 	mov	r4,r16
 402b63c:	d9800315 	stw	r6,12(sp)
 402b640:	d9c00215 	stw	r7,8(sp)
 402b644:	da000015 	stw	r8,0(sp)
 402b648:	da400115 	stw	r9,4(sp)
 402b64c:	402a7fc0 	call	402a7fc <__udivsi3>
 402b650:	8009883a 	mov	r4,r16
 402b654:	a00b883a 	mov	r5,r20
 402b658:	1025883a 	mov	r18,r2
 402b65c:	402a8600 	call	402a860 <__umodsi3>
 402b660:	d9c00217 	ldw	r7,8(sp)
 402b664:	1004943a 	slli	r2,r2,16
 402b668:	bcaf383a 	mul	r23,r23,r18
 402b66c:	393fffcc 	andi	r4,r7,65535
 402b670:	2088b03a 	or	r4,r4,r2
 402b674:	d9800317 	ldw	r6,12(sp)
 402b678:	da000017 	ldw	r8,0(sp)
 402b67c:	da400117 	ldw	r9,4(sp)
 402b680:	25c0062e 	bgeu	r4,r23,402b69c <__divdf3+0x538>
 402b684:	2709883a 	add	r4,r4,fp
 402b688:	90bfffc4 	addi	r2,r18,-1
 402b68c:	27009436 	bltu	r4,fp,402b8e0 <__divdf3+0x77c>
 402b690:	25c0932e 	bgeu	r4,r23,402b8e0 <__divdf3+0x77c>
 402b694:	94bfff84 	addi	r18,r18,-2
 402b698:	2709883a 	add	r4,r4,fp
 402b69c:	4004943a 	slli	r2,r8,16
 402b6a0:	25efc83a 	sub	r23,r4,r23
 402b6a4:	1490b03a 	or	r8,r2,r18
 402b6a8:	4008d43a 	srli	r4,r8,16
 402b6ac:	40ffffcc 	andi	r3,r8,65535
 402b6b0:	30c5383a 	mul	r2,r6,r3
 402b6b4:	1a47383a 	mul	r3,r3,r9
 402b6b8:	310d383a 	mul	r6,r6,r4
 402b6bc:	100ad43a 	srli	r5,r2,16
 402b6c0:	4913383a 	mul	r9,r9,r4
 402b6c4:	1987883a 	add	r3,r3,r6
 402b6c8:	28c7883a 	add	r3,r5,r3
 402b6cc:	1980022e 	bgeu	r3,r6,402b6d8 <__divdf3+0x574>
 402b6d0:	01000074 	movhi	r4,1
 402b6d4:	4913883a 	add	r9,r9,r4
 402b6d8:	1808d43a 	srli	r4,r3,16
 402b6dc:	1806943a 	slli	r3,r3,16
 402b6e0:	10bfffcc 	andi	r2,r2,65535
 402b6e4:	2253883a 	add	r9,r4,r9
 402b6e8:	1887883a 	add	r3,r3,r2
 402b6ec:	ba403836 	bltu	r23,r9,402b7d0 <__divdf3+0x66c>
 402b6f0:	ba403626 	beq	r23,r9,402b7cc <__divdf3+0x668>
 402b6f4:	42000054 	ori	r8,r8,1
 402b6f8:	a880ffc4 	addi	r2,r21,1023
 402b6fc:	00bf570e 	bge	zero,r2,402b45c <__flash_rwdata_start+0xffffaf80>
 402b700:	40c001cc 	andi	r3,r8,7
 402b704:	18000726 	beq	r3,zero,402b724 <__divdf3+0x5c0>
 402b708:	40c003cc 	andi	r3,r8,15
 402b70c:	01000104 	movi	r4,4
 402b710:	19000426 	beq	r3,r4,402b724 <__divdf3+0x5c0>
 402b714:	4107883a 	add	r3,r8,r4
 402b718:	1a11803a 	cmpltu	r8,r3,r8
 402b71c:	8a23883a 	add	r17,r17,r8
 402b720:	1811883a 	mov	r8,r3
 402b724:	88c0402c 	andhi	r3,r17,256
 402b728:	18000426 	beq	r3,zero,402b73c <__divdf3+0x5d8>
 402b72c:	00ffc034 	movhi	r3,65280
 402b730:	18ffffc4 	addi	r3,r3,-1
 402b734:	a8810004 	addi	r2,r21,1024
 402b738:	88e2703a 	and	r17,r17,r3
 402b73c:	00c1ff84 	movi	r3,2046
 402b740:	18bee316 	blt	r3,r2,402b2d0 <__flash_rwdata_start+0xffffadf4>
 402b744:	8824977a 	slli	r18,r17,29
 402b748:	4010d0fa 	srli	r8,r8,3
 402b74c:	8822927a 	slli	r17,r17,9
 402b750:	1081ffcc 	andi	r2,r2,2047
 402b754:	9224b03a 	or	r18,r18,r8
 402b758:	880ad33a 	srli	r5,r17,12
 402b75c:	98c0004c 	andi	r3,r19,1
 402b760:	003edf06 	br	402b2e0 <__flash_rwdata_start+0xffffae04>
 402b764:	8080022c 	andhi	r2,r16,8
 402b768:	10001226 	beq	r2,zero,402b7b4 <__divdf3+0x650>
 402b76c:	8880022c 	andhi	r2,r17,8
 402b770:	1000101e 	bne	r2,zero,402b7b4 <__divdf3+0x650>
 402b774:	00800434 	movhi	r2,16
 402b778:	89400234 	orhi	r5,r17,8
 402b77c:	10bfffc4 	addi	r2,r2,-1
 402b780:	b007883a 	mov	r3,r22
 402b784:	288a703a 	and	r5,r5,r2
 402b788:	4025883a 	mov	r18,r8
 402b78c:	003f3106 	br	402b454 <__flash_rwdata_start+0xffffaf78>
 402b790:	008000c4 	movi	r2,3
 402b794:	3880a626 	beq	r7,r2,402ba30 <__divdf3+0x8cc>
 402b798:	00800044 	movi	r2,1
 402b79c:	3880521e 	bne	r7,r2,402b8e8 <__divdf3+0x784>
 402b7a0:	b807883a 	mov	r3,r23
 402b7a4:	0005883a 	mov	r2,zero
 402b7a8:	000b883a 	mov	r5,zero
 402b7ac:	0025883a 	mov	r18,zero
 402b7b0:	003ecb06 	br	402b2e0 <__flash_rwdata_start+0xffffae04>
 402b7b4:	00800434 	movhi	r2,16
 402b7b8:	81400234 	orhi	r5,r16,8
 402b7bc:	10bfffc4 	addi	r2,r2,-1
 402b7c0:	a007883a 	mov	r3,r20
 402b7c4:	288a703a 	and	r5,r5,r2
 402b7c8:	003f2206 	br	402b454 <__flash_rwdata_start+0xffffaf78>
 402b7cc:	183fca26 	beq	r3,zero,402b6f8 <__flash_rwdata_start+0xffffb21c>
 402b7d0:	e5ef883a 	add	r23,fp,r23
 402b7d4:	40bfffc4 	addi	r2,r8,-1
 402b7d8:	bf00392e 	bgeu	r23,fp,402b8c0 <__divdf3+0x75c>
 402b7dc:	1011883a 	mov	r8,r2
 402b7e0:	ba7fc41e 	bne	r23,r9,402b6f4 <__flash_rwdata_start+0xffffb218>
 402b7e4:	b0ffc31e 	bne	r22,r3,402b6f4 <__flash_rwdata_start+0xffffb218>
 402b7e8:	003fc306 	br	402b6f8 <__flash_rwdata_start+0xffffb21c>
 402b7ec:	143ff604 	addi	r16,r2,-40
 402b7f0:	9c20983a 	sll	r16,r19,r16
 402b7f4:	0025883a 	mov	r18,zero
 402b7f8:	003ee206 	br	402b384 <__flash_rwdata_start+0xffffaea8>
 402b7fc:	d9800315 	stw	r6,12(sp)
 402b800:	d9c00215 	stw	r7,8(sp)
 402b804:	402cebc0 	call	402cebc <__clzsi2>
 402b808:	10800804 	addi	r2,r2,32
 402b80c:	d9c00217 	ldw	r7,8(sp)
 402b810:	d9800317 	ldw	r6,12(sp)
 402b814:	003ed106 	br	402b35c <__flash_rwdata_start+0xffffae80>
 402b818:	147ff604 	addi	r17,r2,-40
 402b81c:	3462983a 	sll	r17,r6,r17
 402b820:	0011883a 	mov	r8,zero
 402b824:	003ef506 	br	402b3fc <__flash_rwdata_start+0xffffaf20>
 402b828:	3009883a 	mov	r4,r6
 402b82c:	d9800315 	stw	r6,12(sp)
 402b830:	da400115 	stw	r9,4(sp)
 402b834:	402cebc0 	call	402cebc <__clzsi2>
 402b838:	10800804 	addi	r2,r2,32
 402b83c:	da400117 	ldw	r9,4(sp)
 402b840:	d9800317 	ldw	r6,12(sp)
 402b844:	003ee306 	br	402b3d4 <__flash_rwdata_start+0xffffaef8>
 402b848:	85a1883a 	add	r16,r16,r22
 402b84c:	8585803a 	cmpltu	r2,r16,r22
 402b850:	1705883a 	add	r2,r2,fp
 402b854:	14a5883a 	add	r18,r2,r18
 402b858:	88bfffc4 	addi	r2,r17,-1
 402b85c:	e4800c2e 	bgeu	fp,r18,402b890 <__divdf3+0x72c>
 402b860:	90c03e36 	bltu	r18,r3,402b95c <__divdf3+0x7f8>
 402b864:	1c806926 	beq	r3,r18,402ba0c <__divdf3+0x8a8>
 402b868:	90c7c83a 	sub	r3,r18,r3
 402b86c:	1023883a 	mov	r17,r2
 402b870:	003f5206 	br	402b5bc <__flash_rwdata_start+0xffffb0e0>
 402b874:	923f0436 	bltu	r18,r8,402b488 <__flash_rwdata_start+0xffffafac>
 402b878:	800897fa 	slli	r4,r16,31
 402b87c:	9004d07a 	srli	r2,r18,1
 402b880:	8006d07a 	srli	r3,r16,1
 402b884:	902097fa 	slli	r16,r18,31
 402b888:	20a4b03a 	or	r18,r4,r2
 402b88c:	003f0106 	br	402b494 <__flash_rwdata_start+0xffffafb8>
 402b890:	e4bff51e 	bne	fp,r18,402b868 <__flash_rwdata_start+0xffffb38c>
 402b894:	85bff22e 	bgeu	r16,r22,402b860 <__flash_rwdata_start+0xffffb384>
 402b898:	e0c7c83a 	sub	r3,fp,r3
 402b89c:	1023883a 	mov	r17,r2
 402b8a0:	003f4606 	br	402b5bc <__flash_rwdata_start+0xffffb0e0>
 402b8a4:	100f883a 	mov	r7,r2
 402b8a8:	003f2b06 	br	402b558 <__flash_rwdata_start+0xffffb07c>
 402b8ac:	180d883a 	mov	r6,r3
 402b8b0:	003f1306 	br	402b500 <__flash_rwdata_start+0xffffb024>
 402b8b4:	813fe436 	bltu	r16,r4,402b848 <__flash_rwdata_start+0xffffb36c>
 402b8b8:	0007883a 	mov	r3,zero
 402b8bc:	003f3f06 	br	402b5bc <__flash_rwdata_start+0xffffb0e0>
 402b8c0:	ba402c36 	bltu	r23,r9,402b974 <__divdf3+0x810>
 402b8c4:	4dc05426 	beq	r9,r23,402ba18 <__divdf3+0x8b4>
 402b8c8:	1011883a 	mov	r8,r2
 402b8cc:	003f8906 	br	402b6f4 <__flash_rwdata_start+0xffffb218>
 402b8d0:	023fffc4 	movi	r8,-1
 402b8d4:	003f8806 	br	402b6f8 <__flash_rwdata_start+0xffffb21c>
 402b8d8:	1811883a 	mov	r8,r3
 402b8dc:	003f5406 	br	402b630 <__flash_rwdata_start+0xffffb154>
 402b8e0:	1025883a 	mov	r18,r2
 402b8e4:	003f6d06 	br	402b69c <__flash_rwdata_start+0xffffb1c0>
 402b8e8:	b827883a 	mov	r19,r23
 402b8ec:	003f8206 	br	402b6f8 <__flash_rwdata_start+0xffffb21c>
 402b8f0:	010007c4 	movi	r4,31
 402b8f4:	20c02616 	blt	r4,r3,402b990 <__divdf3+0x82c>
 402b8f8:	00800804 	movi	r2,32
 402b8fc:	10c5c83a 	sub	r2,r2,r3
 402b900:	888a983a 	sll	r5,r17,r2
 402b904:	40c8d83a 	srl	r4,r8,r3
 402b908:	4084983a 	sll	r2,r8,r2
 402b90c:	88e2d83a 	srl	r17,r17,r3
 402b910:	2906b03a 	or	r3,r5,r4
 402b914:	1004c03a 	cmpne	r2,r2,zero
 402b918:	1886b03a 	or	r3,r3,r2
 402b91c:	188001cc 	andi	r2,r3,7
 402b920:	10000726 	beq	r2,zero,402b940 <__divdf3+0x7dc>
 402b924:	188003cc 	andi	r2,r3,15
 402b928:	01000104 	movi	r4,4
 402b92c:	11000426 	beq	r2,r4,402b940 <__divdf3+0x7dc>
 402b930:	1805883a 	mov	r2,r3
 402b934:	10c00104 	addi	r3,r2,4
 402b938:	1885803a 	cmpltu	r2,r3,r2
 402b93c:	88a3883a 	add	r17,r17,r2
 402b940:	8880202c 	andhi	r2,r17,128
 402b944:	10002726 	beq	r2,zero,402b9e4 <__divdf3+0x880>
 402b948:	98c0004c 	andi	r3,r19,1
 402b94c:	00800044 	movi	r2,1
 402b950:	000b883a 	mov	r5,zero
 402b954:	0025883a 	mov	r18,zero
 402b958:	003e6106 	br	402b2e0 <__flash_rwdata_start+0xffffae04>
 402b95c:	85a1883a 	add	r16,r16,r22
 402b960:	8585803a 	cmpltu	r2,r16,r22
 402b964:	1705883a 	add	r2,r2,fp
 402b968:	14a5883a 	add	r18,r2,r18
 402b96c:	8c7fff84 	addi	r17,r17,-2
 402b970:	003f1106 	br	402b5b8 <__flash_rwdata_start+0xffffb0dc>
 402b974:	b589883a 	add	r4,r22,r22
 402b978:	25ad803a 	cmpltu	r22,r4,r22
 402b97c:	b739883a 	add	fp,r22,fp
 402b980:	40bfff84 	addi	r2,r8,-2
 402b984:	bf2f883a 	add	r23,r23,fp
 402b988:	202d883a 	mov	r22,r4
 402b98c:	003f9306 	br	402b7dc <__flash_rwdata_start+0xffffb300>
 402b990:	013ff844 	movi	r4,-31
 402b994:	2085c83a 	sub	r2,r4,r2
 402b998:	8888d83a 	srl	r4,r17,r2
 402b99c:	00800804 	movi	r2,32
 402b9a0:	18802126 	beq	r3,r2,402ba28 <__divdf3+0x8c4>
 402b9a4:	00801004 	movi	r2,64
 402b9a8:	10c5c83a 	sub	r2,r2,r3
 402b9ac:	8884983a 	sll	r2,r17,r2
 402b9b0:	1204b03a 	or	r2,r2,r8
 402b9b4:	1004c03a 	cmpne	r2,r2,zero
 402b9b8:	2084b03a 	or	r2,r4,r2
 402b9bc:	144001cc 	andi	r17,r2,7
 402b9c0:	88000d1e 	bne	r17,zero,402b9f8 <__divdf3+0x894>
 402b9c4:	000b883a 	mov	r5,zero
 402b9c8:	1024d0fa 	srli	r18,r2,3
 402b9cc:	98c0004c 	andi	r3,r19,1
 402b9d0:	0005883a 	mov	r2,zero
 402b9d4:	9464b03a 	or	r18,r18,r17
 402b9d8:	003e4106 	br	402b2e0 <__flash_rwdata_start+0xffffae04>
 402b9dc:	1007883a 	mov	r3,r2
 402b9e0:	0023883a 	mov	r17,zero
 402b9e4:	880a927a 	slli	r5,r17,9
 402b9e8:	1805883a 	mov	r2,r3
 402b9ec:	8822977a 	slli	r17,r17,29
 402b9f0:	280ad33a 	srli	r5,r5,12
 402b9f4:	003ff406 	br	402b9c8 <__flash_rwdata_start+0xffffb4ec>
 402b9f8:	10c003cc 	andi	r3,r2,15
 402b9fc:	01000104 	movi	r4,4
 402ba00:	193ff626 	beq	r3,r4,402b9dc <__flash_rwdata_start+0xffffb500>
 402ba04:	0023883a 	mov	r17,zero
 402ba08:	003fca06 	br	402b934 <__flash_rwdata_start+0xffffb458>
 402ba0c:	813fd336 	bltu	r16,r4,402b95c <__flash_rwdata_start+0xffffb480>
 402ba10:	1023883a 	mov	r17,r2
 402ba14:	003fa806 	br	402b8b8 <__flash_rwdata_start+0xffffb3dc>
 402ba18:	b0ffd636 	bltu	r22,r3,402b974 <__flash_rwdata_start+0xffffb498>
 402ba1c:	1011883a 	mov	r8,r2
 402ba20:	b0ff341e 	bne	r22,r3,402b6f4 <__flash_rwdata_start+0xffffb218>
 402ba24:	003f3406 	br	402b6f8 <__flash_rwdata_start+0xffffb21c>
 402ba28:	0005883a 	mov	r2,zero
 402ba2c:	003fe006 	br	402b9b0 <__flash_rwdata_start+0xffffb4d4>
 402ba30:	00800434 	movhi	r2,16
 402ba34:	89400234 	orhi	r5,r17,8
 402ba38:	10bfffc4 	addi	r2,r2,-1
 402ba3c:	b807883a 	mov	r3,r23
 402ba40:	288a703a 	and	r5,r5,r2
 402ba44:	4025883a 	mov	r18,r8
 402ba48:	003e8206 	br	402b454 <__flash_rwdata_start+0xffffaf78>

0402ba4c <__eqdf2>:
 402ba4c:	2804d53a 	srli	r2,r5,20
 402ba50:	3806d53a 	srli	r3,r7,20
 402ba54:	02000434 	movhi	r8,16
 402ba58:	423fffc4 	addi	r8,r8,-1
 402ba5c:	1081ffcc 	andi	r2,r2,2047
 402ba60:	0281ffc4 	movi	r10,2047
 402ba64:	2a12703a 	and	r9,r5,r8
 402ba68:	18c1ffcc 	andi	r3,r3,2047
 402ba6c:	3a10703a 	and	r8,r7,r8
 402ba70:	280ad7fa 	srli	r5,r5,31
 402ba74:	380ed7fa 	srli	r7,r7,31
 402ba78:	12801026 	beq	r2,r10,402babc <__eqdf2+0x70>
 402ba7c:	0281ffc4 	movi	r10,2047
 402ba80:	1a800a26 	beq	r3,r10,402baac <__eqdf2+0x60>
 402ba84:	10c00226 	beq	r2,r3,402ba90 <__eqdf2+0x44>
 402ba88:	00800044 	movi	r2,1
 402ba8c:	f800283a 	ret
 402ba90:	4a3ffd1e 	bne	r9,r8,402ba88 <__flash_rwdata_start+0xffffb5ac>
 402ba94:	21bffc1e 	bne	r4,r6,402ba88 <__flash_rwdata_start+0xffffb5ac>
 402ba98:	29c00c26 	beq	r5,r7,402bacc <__eqdf2+0x80>
 402ba9c:	103ffa1e 	bne	r2,zero,402ba88 <__flash_rwdata_start+0xffffb5ac>
 402baa0:	2244b03a 	or	r2,r4,r9
 402baa4:	1004c03a 	cmpne	r2,r2,zero
 402baa8:	f800283a 	ret
 402baac:	3214b03a 	or	r10,r6,r8
 402bab0:	503ff426 	beq	r10,zero,402ba84 <__flash_rwdata_start+0xffffb5a8>
 402bab4:	00800044 	movi	r2,1
 402bab8:	f800283a 	ret
 402babc:	2254b03a 	or	r10,r4,r9
 402bac0:	503fee26 	beq	r10,zero,402ba7c <__flash_rwdata_start+0xffffb5a0>
 402bac4:	00800044 	movi	r2,1
 402bac8:	f800283a 	ret
 402bacc:	0005883a 	mov	r2,zero
 402bad0:	f800283a 	ret

0402bad4 <__gedf2>:
 402bad4:	2804d53a 	srli	r2,r5,20
 402bad8:	3806d53a 	srli	r3,r7,20
 402badc:	02000434 	movhi	r8,16
 402bae0:	423fffc4 	addi	r8,r8,-1
 402bae4:	1081ffcc 	andi	r2,r2,2047
 402bae8:	0241ffc4 	movi	r9,2047
 402baec:	2a14703a 	and	r10,r5,r8
 402baf0:	18c1ffcc 	andi	r3,r3,2047
 402baf4:	3a10703a 	and	r8,r7,r8
 402baf8:	280ad7fa 	srli	r5,r5,31
 402bafc:	380ed7fa 	srli	r7,r7,31
 402bb00:	12401d26 	beq	r2,r9,402bb78 <__gedf2+0xa4>
 402bb04:	0241ffc4 	movi	r9,2047
 402bb08:	1a401226 	beq	r3,r9,402bb54 <__gedf2+0x80>
 402bb0c:	1000081e 	bne	r2,zero,402bb30 <__gedf2+0x5c>
 402bb10:	2296b03a 	or	r11,r4,r10
 402bb14:	5813003a 	cmpeq	r9,r11,zero
 402bb18:	1800091e 	bne	r3,zero,402bb40 <__gedf2+0x6c>
 402bb1c:	3218b03a 	or	r12,r6,r8
 402bb20:	6000071e 	bne	r12,zero,402bb40 <__gedf2+0x6c>
 402bb24:	0005883a 	mov	r2,zero
 402bb28:	5800101e 	bne	r11,zero,402bb6c <__gedf2+0x98>
 402bb2c:	f800283a 	ret
 402bb30:	18000c1e 	bne	r3,zero,402bb64 <__gedf2+0x90>
 402bb34:	3212b03a 	or	r9,r6,r8
 402bb38:	48000c26 	beq	r9,zero,402bb6c <__gedf2+0x98>
 402bb3c:	0013883a 	mov	r9,zero
 402bb40:	39c03fcc 	andi	r7,r7,255
 402bb44:	48000826 	beq	r9,zero,402bb68 <__gedf2+0x94>
 402bb48:	38000926 	beq	r7,zero,402bb70 <__gedf2+0x9c>
 402bb4c:	00800044 	movi	r2,1
 402bb50:	f800283a 	ret
 402bb54:	3212b03a 	or	r9,r6,r8
 402bb58:	483fec26 	beq	r9,zero,402bb0c <__flash_rwdata_start+0xffffb630>
 402bb5c:	00bfff84 	movi	r2,-2
 402bb60:	f800283a 	ret
 402bb64:	39c03fcc 	andi	r7,r7,255
 402bb68:	29c00626 	beq	r5,r7,402bb84 <__gedf2+0xb0>
 402bb6c:	283ff726 	beq	r5,zero,402bb4c <__flash_rwdata_start+0xffffb670>
 402bb70:	00bfffc4 	movi	r2,-1
 402bb74:	f800283a 	ret
 402bb78:	2292b03a 	or	r9,r4,r10
 402bb7c:	483fe126 	beq	r9,zero,402bb04 <__flash_rwdata_start+0xffffb628>
 402bb80:	003ff606 	br	402bb5c <__flash_rwdata_start+0xffffb680>
 402bb84:	18bff916 	blt	r3,r2,402bb6c <__flash_rwdata_start+0xffffb690>
 402bb88:	10c00316 	blt	r2,r3,402bb98 <__gedf2+0xc4>
 402bb8c:	42bff736 	bltu	r8,r10,402bb6c <__flash_rwdata_start+0xffffb690>
 402bb90:	52000326 	beq	r10,r8,402bba0 <__gedf2+0xcc>
 402bb94:	5200042e 	bgeu	r10,r8,402bba8 <__gedf2+0xd4>
 402bb98:	283fec1e 	bne	r5,zero,402bb4c <__flash_rwdata_start+0xffffb670>
 402bb9c:	003ff406 	br	402bb70 <__flash_rwdata_start+0xffffb694>
 402bba0:	313ff236 	bltu	r6,r4,402bb6c <__flash_rwdata_start+0xffffb690>
 402bba4:	21bffc36 	bltu	r4,r6,402bb98 <__flash_rwdata_start+0xffffb6bc>
 402bba8:	0005883a 	mov	r2,zero
 402bbac:	f800283a 	ret

0402bbb0 <__ledf2>:
 402bbb0:	2804d53a 	srli	r2,r5,20
 402bbb4:	3810d53a 	srli	r8,r7,20
 402bbb8:	00c00434 	movhi	r3,16
 402bbbc:	18ffffc4 	addi	r3,r3,-1
 402bbc0:	1081ffcc 	andi	r2,r2,2047
 402bbc4:	0241ffc4 	movi	r9,2047
 402bbc8:	28d4703a 	and	r10,r5,r3
 402bbcc:	4201ffcc 	andi	r8,r8,2047
 402bbd0:	38c6703a 	and	r3,r7,r3
 402bbd4:	280ad7fa 	srli	r5,r5,31
 402bbd8:	380ed7fa 	srli	r7,r7,31
 402bbdc:	12401f26 	beq	r2,r9,402bc5c <__ledf2+0xac>
 402bbe0:	0241ffc4 	movi	r9,2047
 402bbe4:	42401426 	beq	r8,r9,402bc38 <__ledf2+0x88>
 402bbe8:	1000091e 	bne	r2,zero,402bc10 <__ledf2+0x60>
 402bbec:	2296b03a 	or	r11,r4,r10
 402bbf0:	5813003a 	cmpeq	r9,r11,zero
 402bbf4:	29403fcc 	andi	r5,r5,255
 402bbf8:	40000a1e 	bne	r8,zero,402bc24 <__ledf2+0x74>
 402bbfc:	30d8b03a 	or	r12,r6,r3
 402bc00:	6000081e 	bne	r12,zero,402bc24 <__ledf2+0x74>
 402bc04:	0005883a 	mov	r2,zero
 402bc08:	5800111e 	bne	r11,zero,402bc50 <__ledf2+0xa0>
 402bc0c:	f800283a 	ret
 402bc10:	29403fcc 	andi	r5,r5,255
 402bc14:	40000c1e 	bne	r8,zero,402bc48 <__ledf2+0x98>
 402bc18:	30d2b03a 	or	r9,r6,r3
 402bc1c:	48000c26 	beq	r9,zero,402bc50 <__ledf2+0xa0>
 402bc20:	0013883a 	mov	r9,zero
 402bc24:	39c03fcc 	andi	r7,r7,255
 402bc28:	48000826 	beq	r9,zero,402bc4c <__ledf2+0x9c>
 402bc2c:	38001126 	beq	r7,zero,402bc74 <__ledf2+0xc4>
 402bc30:	00800044 	movi	r2,1
 402bc34:	f800283a 	ret
 402bc38:	30d2b03a 	or	r9,r6,r3
 402bc3c:	483fea26 	beq	r9,zero,402bbe8 <__flash_rwdata_start+0xffffb70c>
 402bc40:	00800084 	movi	r2,2
 402bc44:	f800283a 	ret
 402bc48:	39c03fcc 	andi	r7,r7,255
 402bc4c:	39400726 	beq	r7,r5,402bc6c <__ledf2+0xbc>
 402bc50:	2800081e 	bne	r5,zero,402bc74 <__ledf2+0xc4>
 402bc54:	00800044 	movi	r2,1
 402bc58:	f800283a 	ret
 402bc5c:	2292b03a 	or	r9,r4,r10
 402bc60:	483fdf26 	beq	r9,zero,402bbe0 <__flash_rwdata_start+0xffffb704>
 402bc64:	00800084 	movi	r2,2
 402bc68:	f800283a 	ret
 402bc6c:	4080030e 	bge	r8,r2,402bc7c <__ledf2+0xcc>
 402bc70:	383fef26 	beq	r7,zero,402bc30 <__flash_rwdata_start+0xffffb754>
 402bc74:	00bfffc4 	movi	r2,-1
 402bc78:	f800283a 	ret
 402bc7c:	123feb16 	blt	r2,r8,402bc2c <__flash_rwdata_start+0xffffb750>
 402bc80:	1abff336 	bltu	r3,r10,402bc50 <__flash_rwdata_start+0xffffb774>
 402bc84:	50c00326 	beq	r10,r3,402bc94 <__ledf2+0xe4>
 402bc88:	50c0042e 	bgeu	r10,r3,402bc9c <__ledf2+0xec>
 402bc8c:	283fe81e 	bne	r5,zero,402bc30 <__flash_rwdata_start+0xffffb754>
 402bc90:	003ff806 	br	402bc74 <__flash_rwdata_start+0xffffb798>
 402bc94:	313fee36 	bltu	r6,r4,402bc50 <__flash_rwdata_start+0xffffb774>
 402bc98:	21bffc36 	bltu	r4,r6,402bc8c <__flash_rwdata_start+0xffffb7b0>
 402bc9c:	0005883a 	mov	r2,zero
 402bca0:	f800283a 	ret

0402bca4 <__muldf3>:
 402bca4:	defff304 	addi	sp,sp,-52
 402bca8:	2804d53a 	srli	r2,r5,20
 402bcac:	dd800915 	stw	r22,36(sp)
 402bcb0:	282cd7fa 	srli	r22,r5,31
 402bcb4:	dc000315 	stw	r16,12(sp)
 402bcb8:	04000434 	movhi	r16,16
 402bcbc:	dd400815 	stw	r21,32(sp)
 402bcc0:	dc800515 	stw	r18,20(sp)
 402bcc4:	843fffc4 	addi	r16,r16,-1
 402bcc8:	dfc00c15 	stw	ra,48(sp)
 402bccc:	df000b15 	stw	fp,44(sp)
 402bcd0:	ddc00a15 	stw	r23,40(sp)
 402bcd4:	dd000715 	stw	r20,28(sp)
 402bcd8:	dcc00615 	stw	r19,24(sp)
 402bcdc:	dc400415 	stw	r17,16(sp)
 402bce0:	1481ffcc 	andi	r18,r2,2047
 402bce4:	2c20703a 	and	r16,r5,r16
 402bce8:	b02b883a 	mov	r21,r22
 402bcec:	b2403fcc 	andi	r9,r22,255
 402bcf0:	90006026 	beq	r18,zero,402be74 <__muldf3+0x1d0>
 402bcf4:	0081ffc4 	movi	r2,2047
 402bcf8:	2029883a 	mov	r20,r4
 402bcfc:	90803626 	beq	r18,r2,402bdd8 <__muldf3+0x134>
 402bd00:	80800434 	orhi	r2,r16,16
 402bd04:	100490fa 	slli	r2,r2,3
 402bd08:	2020d77a 	srli	r16,r4,29
 402bd0c:	202890fa 	slli	r20,r4,3
 402bd10:	94bf0044 	addi	r18,r18,-1023
 402bd14:	80a0b03a 	or	r16,r16,r2
 402bd18:	0027883a 	mov	r19,zero
 402bd1c:	0039883a 	mov	fp,zero
 402bd20:	3804d53a 	srli	r2,r7,20
 402bd24:	382ed7fa 	srli	r23,r7,31
 402bd28:	04400434 	movhi	r17,16
 402bd2c:	8c7fffc4 	addi	r17,r17,-1
 402bd30:	1081ffcc 	andi	r2,r2,2047
 402bd34:	3011883a 	mov	r8,r6
 402bd38:	3c62703a 	and	r17,r7,r17
 402bd3c:	ba803fcc 	andi	r10,r23,255
 402bd40:	10006d26 	beq	r2,zero,402bef8 <__muldf3+0x254>
 402bd44:	00c1ffc4 	movi	r3,2047
 402bd48:	10c06526 	beq	r2,r3,402bee0 <__muldf3+0x23c>
 402bd4c:	88c00434 	orhi	r3,r17,16
 402bd50:	180690fa 	slli	r3,r3,3
 402bd54:	3022d77a 	srli	r17,r6,29
 402bd58:	301090fa 	slli	r8,r6,3
 402bd5c:	10bf0044 	addi	r2,r2,-1023
 402bd60:	88e2b03a 	or	r17,r17,r3
 402bd64:	000b883a 	mov	r5,zero
 402bd68:	9085883a 	add	r2,r18,r2
 402bd6c:	2cc8b03a 	or	r4,r5,r19
 402bd70:	00c003c4 	movi	r3,15
 402bd74:	bdacf03a 	xor	r22,r23,r22
 402bd78:	12c00044 	addi	r11,r2,1
 402bd7c:	19009936 	bltu	r3,r4,402bfe4 <__muldf3+0x340>
 402bd80:	200890ba 	slli	r4,r4,2
 402bd84:	00c100f4 	movhi	r3,1027
 402bd88:	18ef6604 	addi	r3,r3,-17000
 402bd8c:	20c9883a 	add	r4,r4,r3
 402bd90:	20c00017 	ldw	r3,0(r4)
 402bd94:	1800683a 	jmp	r3
 402bd98:	0402bfe4 	muli	r16,zero,2815
 402bd9c:	0402bdf8 	rdprs	r16,zero,2807
 402bda0:	0402bdf8 	rdprs	r16,zero,2807
 402bda4:	0402bdf4 	movhi	r16,2807
 402bda8:	0402bfc0 	call	402bfc <_gp+0x3f8cc4>
 402bdac:	0402bfc0 	call	402bfc <_gp+0x3f8cc4>
 402bdb0:	0402bfa8 	cmpgeui	r16,zero,2814
 402bdb4:	0402bdf4 	movhi	r16,2807
 402bdb8:	0402bfc0 	call	402bfc <_gp+0x3f8cc4>
 402bdbc:	0402bfa8 	cmpgeui	r16,zero,2814
 402bdc0:	0402bfc0 	call	402bfc <_gp+0x3f8cc4>
 402bdc4:	0402bdf4 	movhi	r16,2807
 402bdc8:	0402bfd0 	cmplti	r16,zero,2815
 402bdcc:	0402bfd0 	cmplti	r16,zero,2815
 402bdd0:	0402bfd0 	cmplti	r16,zero,2815
 402bdd4:	0402c1ec 	andhi	r16,zero,2823
 402bdd8:	2404b03a 	or	r2,r4,r16
 402bddc:	10006f1e 	bne	r2,zero,402bf9c <__muldf3+0x2f8>
 402bde0:	04c00204 	movi	r19,8
 402bde4:	0021883a 	mov	r16,zero
 402bde8:	0029883a 	mov	r20,zero
 402bdec:	07000084 	movi	fp,2
 402bdf0:	003fcb06 	br	402bd20 <__flash_rwdata_start+0xffffb844>
 402bdf4:	502d883a 	mov	r22,r10
 402bdf8:	00800084 	movi	r2,2
 402bdfc:	28805726 	beq	r5,r2,402bf5c <__muldf3+0x2b8>
 402be00:	008000c4 	movi	r2,3
 402be04:	28816626 	beq	r5,r2,402c3a0 <__muldf3+0x6fc>
 402be08:	00800044 	movi	r2,1
 402be0c:	2881411e 	bne	r5,r2,402c314 <__muldf3+0x670>
 402be10:	b02b883a 	mov	r21,r22
 402be14:	0005883a 	mov	r2,zero
 402be18:	000b883a 	mov	r5,zero
 402be1c:	0029883a 	mov	r20,zero
 402be20:	1004953a 	slli	r2,r2,20
 402be24:	a8c03fcc 	andi	r3,r21,255
 402be28:	04400434 	movhi	r17,16
 402be2c:	8c7fffc4 	addi	r17,r17,-1
 402be30:	180697fa 	slli	r3,r3,31
 402be34:	2c4a703a 	and	r5,r5,r17
 402be38:	288ab03a 	or	r5,r5,r2
 402be3c:	28c6b03a 	or	r3,r5,r3
 402be40:	a005883a 	mov	r2,r20
 402be44:	dfc00c17 	ldw	ra,48(sp)
 402be48:	df000b17 	ldw	fp,44(sp)
 402be4c:	ddc00a17 	ldw	r23,40(sp)
 402be50:	dd800917 	ldw	r22,36(sp)
 402be54:	dd400817 	ldw	r21,32(sp)
 402be58:	dd000717 	ldw	r20,28(sp)
 402be5c:	dcc00617 	ldw	r19,24(sp)
 402be60:	dc800517 	ldw	r18,20(sp)
 402be64:	dc400417 	ldw	r17,16(sp)
 402be68:	dc000317 	ldw	r16,12(sp)
 402be6c:	dec00d04 	addi	sp,sp,52
 402be70:	f800283a 	ret
 402be74:	2404b03a 	or	r2,r4,r16
 402be78:	2027883a 	mov	r19,r4
 402be7c:	10004226 	beq	r2,zero,402bf88 <__muldf3+0x2e4>
 402be80:	8000fc26 	beq	r16,zero,402c274 <__muldf3+0x5d0>
 402be84:	8009883a 	mov	r4,r16
 402be88:	d9800215 	stw	r6,8(sp)
 402be8c:	d9c00015 	stw	r7,0(sp)
 402be90:	da400115 	stw	r9,4(sp)
 402be94:	402cebc0 	call	402cebc <__clzsi2>
 402be98:	d9800217 	ldw	r6,8(sp)
 402be9c:	d9c00017 	ldw	r7,0(sp)
 402bea0:	da400117 	ldw	r9,4(sp)
 402bea4:	113ffd44 	addi	r4,r2,-11
 402bea8:	00c00704 	movi	r3,28
 402beac:	1900ed16 	blt	r3,r4,402c264 <__muldf3+0x5c0>
 402beb0:	00c00744 	movi	r3,29
 402beb4:	147ffe04 	addi	r17,r2,-8
 402beb8:	1907c83a 	sub	r3,r3,r4
 402bebc:	8460983a 	sll	r16,r16,r17
 402bec0:	98c6d83a 	srl	r3,r19,r3
 402bec4:	9c68983a 	sll	r20,r19,r17
 402bec8:	1c20b03a 	or	r16,r3,r16
 402becc:	1080fcc4 	addi	r2,r2,1011
 402bed0:	00a5c83a 	sub	r18,zero,r2
 402bed4:	0027883a 	mov	r19,zero
 402bed8:	0039883a 	mov	fp,zero
 402bedc:	003f9006 	br	402bd20 <__flash_rwdata_start+0xffffb844>
 402bee0:	3446b03a 	or	r3,r6,r17
 402bee4:	1800261e 	bne	r3,zero,402bf80 <__muldf3+0x2dc>
 402bee8:	0023883a 	mov	r17,zero
 402beec:	0011883a 	mov	r8,zero
 402bef0:	01400084 	movi	r5,2
 402bef4:	003f9c06 	br	402bd68 <__flash_rwdata_start+0xffffb88c>
 402bef8:	3446b03a 	or	r3,r6,r17
 402befc:	18001c26 	beq	r3,zero,402bf70 <__muldf3+0x2cc>
 402bf00:	8800ce26 	beq	r17,zero,402c23c <__muldf3+0x598>
 402bf04:	8809883a 	mov	r4,r17
 402bf08:	d9800215 	stw	r6,8(sp)
 402bf0c:	da400115 	stw	r9,4(sp)
 402bf10:	da800015 	stw	r10,0(sp)
 402bf14:	402cebc0 	call	402cebc <__clzsi2>
 402bf18:	d9800217 	ldw	r6,8(sp)
 402bf1c:	da400117 	ldw	r9,4(sp)
 402bf20:	da800017 	ldw	r10,0(sp)
 402bf24:	113ffd44 	addi	r4,r2,-11
 402bf28:	00c00704 	movi	r3,28
 402bf2c:	1900bf16 	blt	r3,r4,402c22c <__muldf3+0x588>
 402bf30:	00c00744 	movi	r3,29
 402bf34:	123ffe04 	addi	r8,r2,-8
 402bf38:	1907c83a 	sub	r3,r3,r4
 402bf3c:	8a22983a 	sll	r17,r17,r8
 402bf40:	30c6d83a 	srl	r3,r6,r3
 402bf44:	3210983a 	sll	r8,r6,r8
 402bf48:	1c62b03a 	or	r17,r3,r17
 402bf4c:	1080fcc4 	addi	r2,r2,1011
 402bf50:	0085c83a 	sub	r2,zero,r2
 402bf54:	000b883a 	mov	r5,zero
 402bf58:	003f8306 	br	402bd68 <__flash_rwdata_start+0xffffb88c>
 402bf5c:	b02b883a 	mov	r21,r22
 402bf60:	0081ffc4 	movi	r2,2047
 402bf64:	000b883a 	mov	r5,zero
 402bf68:	0029883a 	mov	r20,zero
 402bf6c:	003fac06 	br	402be20 <__flash_rwdata_start+0xffffb944>
 402bf70:	0023883a 	mov	r17,zero
 402bf74:	0011883a 	mov	r8,zero
 402bf78:	01400044 	movi	r5,1
 402bf7c:	003f7a06 	br	402bd68 <__flash_rwdata_start+0xffffb88c>
 402bf80:	014000c4 	movi	r5,3
 402bf84:	003f7806 	br	402bd68 <__flash_rwdata_start+0xffffb88c>
 402bf88:	04c00104 	movi	r19,4
 402bf8c:	0021883a 	mov	r16,zero
 402bf90:	0029883a 	mov	r20,zero
 402bf94:	07000044 	movi	fp,1
 402bf98:	003f6106 	br	402bd20 <__flash_rwdata_start+0xffffb844>
 402bf9c:	04c00304 	movi	r19,12
 402bfa0:	070000c4 	movi	fp,3
 402bfa4:	003f5e06 	br	402bd20 <__flash_rwdata_start+0xffffb844>
 402bfa8:	01400434 	movhi	r5,16
 402bfac:	002b883a 	mov	r21,zero
 402bfb0:	297fffc4 	addi	r5,r5,-1
 402bfb4:	053fffc4 	movi	r20,-1
 402bfb8:	0081ffc4 	movi	r2,2047
 402bfbc:	003f9806 	br	402be20 <__flash_rwdata_start+0xffffb944>
 402bfc0:	8023883a 	mov	r17,r16
 402bfc4:	a011883a 	mov	r8,r20
 402bfc8:	e00b883a 	mov	r5,fp
 402bfcc:	003f8a06 	br	402bdf8 <__flash_rwdata_start+0xffffb91c>
 402bfd0:	8023883a 	mov	r17,r16
 402bfd4:	a011883a 	mov	r8,r20
 402bfd8:	482d883a 	mov	r22,r9
 402bfdc:	e00b883a 	mov	r5,fp
 402bfe0:	003f8506 	br	402bdf8 <__flash_rwdata_start+0xffffb91c>
 402bfe4:	a00ad43a 	srli	r5,r20,16
 402bfe8:	401ad43a 	srli	r13,r8,16
 402bfec:	a53fffcc 	andi	r20,r20,65535
 402bff0:	423fffcc 	andi	r8,r8,65535
 402bff4:	4519383a 	mul	r12,r8,r20
 402bff8:	4147383a 	mul	r3,r8,r5
 402bffc:	6d09383a 	mul	r4,r13,r20
 402c000:	600cd43a 	srli	r6,r12,16
 402c004:	2b5d383a 	mul	r14,r5,r13
 402c008:	20c9883a 	add	r4,r4,r3
 402c00c:	310d883a 	add	r6,r6,r4
 402c010:	30c0022e 	bgeu	r6,r3,402c01c <__muldf3+0x378>
 402c014:	00c00074 	movhi	r3,1
 402c018:	70dd883a 	add	r14,r14,r3
 402c01c:	8826d43a 	srli	r19,r17,16
 402c020:	8bffffcc 	andi	r15,r17,65535
 402c024:	7d23383a 	mul	r17,r15,r20
 402c028:	7949383a 	mul	r4,r15,r5
 402c02c:	9d29383a 	mul	r20,r19,r20
 402c030:	8814d43a 	srli	r10,r17,16
 402c034:	3012943a 	slli	r9,r6,16
 402c038:	a129883a 	add	r20,r20,r4
 402c03c:	633fffcc 	andi	r12,r12,65535
 402c040:	5515883a 	add	r10,r10,r20
 402c044:	3006d43a 	srli	r3,r6,16
 402c048:	4b13883a 	add	r9,r9,r12
 402c04c:	2ccb383a 	mul	r5,r5,r19
 402c050:	5100022e 	bgeu	r10,r4,402c05c <__muldf3+0x3b8>
 402c054:	01000074 	movhi	r4,1
 402c058:	290b883a 	add	r5,r5,r4
 402c05c:	802ad43a 	srli	r21,r16,16
 402c060:	843fffcc 	andi	r16,r16,65535
 402c064:	440d383a 	mul	r6,r8,r16
 402c068:	4565383a 	mul	r18,r8,r21
 402c06c:	8349383a 	mul	r4,r16,r13
 402c070:	500e943a 	slli	r7,r10,16
 402c074:	3010d43a 	srli	r8,r6,16
 402c078:	5028d43a 	srli	r20,r10,16
 402c07c:	2489883a 	add	r4,r4,r18
 402c080:	8abfffcc 	andi	r10,r17,65535
 402c084:	3a95883a 	add	r10,r7,r10
 402c088:	4119883a 	add	r12,r8,r4
 402c08c:	a169883a 	add	r20,r20,r5
 402c090:	1a87883a 	add	r3,r3,r10
 402c094:	6d5b383a 	mul	r13,r13,r21
 402c098:	6480022e 	bgeu	r12,r18,402c0a4 <__muldf3+0x400>
 402c09c:	01000074 	movhi	r4,1
 402c0a0:	691b883a 	add	r13,r13,r4
 402c0a4:	7c25383a 	mul	r18,r15,r16
 402c0a8:	7d4b383a 	mul	r5,r15,r21
 402c0ac:	84cf383a 	mul	r7,r16,r19
 402c0b0:	901ed43a 	srli	r15,r18,16
 402c0b4:	6008d43a 	srli	r4,r12,16
 402c0b8:	6010943a 	slli	r8,r12,16
 402c0bc:	394f883a 	add	r7,r7,r5
 402c0c0:	333fffcc 	andi	r12,r6,65535
 402c0c4:	79df883a 	add	r15,r15,r7
 402c0c8:	235b883a 	add	r13,r4,r13
 402c0cc:	9d63383a 	mul	r17,r19,r21
 402c0d0:	4309883a 	add	r4,r8,r12
 402c0d4:	7940022e 	bgeu	r15,r5,402c0e0 <__muldf3+0x43c>
 402c0d8:	01400074 	movhi	r5,1
 402c0dc:	8963883a 	add	r17,r17,r5
 402c0e0:	780a943a 	slli	r5,r15,16
 402c0e4:	91bfffcc 	andi	r6,r18,65535
 402c0e8:	70c7883a 	add	r3,r14,r3
 402c0ec:	298d883a 	add	r6,r5,r6
 402c0f0:	1a8f803a 	cmpltu	r7,r3,r10
 402c0f4:	350b883a 	add	r5,r6,r20
 402c0f8:	20c7883a 	add	r3,r4,r3
 402c0fc:	3955883a 	add	r10,r7,r5
 402c100:	1909803a 	cmpltu	r4,r3,r4
 402c104:	6a91883a 	add	r8,r13,r10
 402c108:	780cd43a 	srli	r6,r15,16
 402c10c:	2219883a 	add	r12,r4,r8
 402c110:	2d0b803a 	cmpltu	r5,r5,r20
 402c114:	51cf803a 	cmpltu	r7,r10,r7
 402c118:	29ceb03a 	or	r7,r5,r7
 402c11c:	4351803a 	cmpltu	r8,r8,r13
 402c120:	610b803a 	cmpltu	r5,r12,r4
 402c124:	4148b03a 	or	r4,r8,r5
 402c128:	398f883a 	add	r7,r7,r6
 402c12c:	3909883a 	add	r4,r7,r4
 402c130:	1810927a 	slli	r8,r3,9
 402c134:	2449883a 	add	r4,r4,r17
 402c138:	2008927a 	slli	r4,r4,9
 402c13c:	6022d5fa 	srli	r17,r12,23
 402c140:	1806d5fa 	srli	r3,r3,23
 402c144:	4252b03a 	or	r9,r8,r9
 402c148:	600a927a 	slli	r5,r12,9
 402c14c:	4810c03a 	cmpne	r8,r9,zero
 402c150:	2462b03a 	or	r17,r4,r17
 402c154:	40c6b03a 	or	r3,r8,r3
 402c158:	8900402c 	andhi	r4,r17,256
 402c15c:	1950b03a 	or	r8,r3,r5
 402c160:	20000726 	beq	r4,zero,402c180 <__muldf3+0x4dc>
 402c164:	4006d07a 	srli	r3,r8,1
 402c168:	880497fa 	slli	r2,r17,31
 402c16c:	4200004c 	andi	r8,r8,1
 402c170:	8822d07a 	srli	r17,r17,1
 402c174:	1a10b03a 	or	r8,r3,r8
 402c178:	1210b03a 	or	r8,r2,r8
 402c17c:	5805883a 	mov	r2,r11
 402c180:	1140ffc4 	addi	r5,r2,1023
 402c184:	0140440e 	bge	zero,r5,402c298 <__muldf3+0x5f4>
 402c188:	40c001cc 	andi	r3,r8,7
 402c18c:	18000726 	beq	r3,zero,402c1ac <__muldf3+0x508>
 402c190:	40c003cc 	andi	r3,r8,15
 402c194:	01000104 	movi	r4,4
 402c198:	19000426 	beq	r3,r4,402c1ac <__muldf3+0x508>
 402c19c:	4107883a 	add	r3,r8,r4
 402c1a0:	1a11803a 	cmpltu	r8,r3,r8
 402c1a4:	8a23883a 	add	r17,r17,r8
 402c1a8:	1811883a 	mov	r8,r3
 402c1ac:	88c0402c 	andhi	r3,r17,256
 402c1b0:	18000426 	beq	r3,zero,402c1c4 <__muldf3+0x520>
 402c1b4:	11410004 	addi	r5,r2,1024
 402c1b8:	00bfc034 	movhi	r2,65280
 402c1bc:	10bfffc4 	addi	r2,r2,-1
 402c1c0:	88a2703a 	and	r17,r17,r2
 402c1c4:	0081ff84 	movi	r2,2046
 402c1c8:	117f6416 	blt	r2,r5,402bf5c <__flash_rwdata_start+0xffffba80>
 402c1cc:	8828977a 	slli	r20,r17,29
 402c1d0:	4010d0fa 	srli	r8,r8,3
 402c1d4:	8822927a 	slli	r17,r17,9
 402c1d8:	2881ffcc 	andi	r2,r5,2047
 402c1dc:	a228b03a 	or	r20,r20,r8
 402c1e0:	880ad33a 	srli	r5,r17,12
 402c1e4:	b02b883a 	mov	r21,r22
 402c1e8:	003f0d06 	br	402be20 <__flash_rwdata_start+0xffffb944>
 402c1ec:	8080022c 	andhi	r2,r16,8
 402c1f0:	10000926 	beq	r2,zero,402c218 <__muldf3+0x574>
 402c1f4:	8880022c 	andhi	r2,r17,8
 402c1f8:	1000071e 	bne	r2,zero,402c218 <__muldf3+0x574>
 402c1fc:	00800434 	movhi	r2,16
 402c200:	89400234 	orhi	r5,r17,8
 402c204:	10bfffc4 	addi	r2,r2,-1
 402c208:	b82b883a 	mov	r21,r23
 402c20c:	288a703a 	and	r5,r5,r2
 402c210:	4029883a 	mov	r20,r8
 402c214:	003f6806 	br	402bfb8 <__flash_rwdata_start+0xffffbadc>
 402c218:	00800434 	movhi	r2,16
 402c21c:	81400234 	orhi	r5,r16,8
 402c220:	10bfffc4 	addi	r2,r2,-1
 402c224:	288a703a 	and	r5,r5,r2
 402c228:	003f6306 	br	402bfb8 <__flash_rwdata_start+0xffffbadc>
 402c22c:	147ff604 	addi	r17,r2,-40
 402c230:	3462983a 	sll	r17,r6,r17
 402c234:	0011883a 	mov	r8,zero
 402c238:	003f4406 	br	402bf4c <__flash_rwdata_start+0xffffba70>
 402c23c:	3009883a 	mov	r4,r6
 402c240:	d9800215 	stw	r6,8(sp)
 402c244:	da400115 	stw	r9,4(sp)
 402c248:	da800015 	stw	r10,0(sp)
 402c24c:	402cebc0 	call	402cebc <__clzsi2>
 402c250:	10800804 	addi	r2,r2,32
 402c254:	da800017 	ldw	r10,0(sp)
 402c258:	da400117 	ldw	r9,4(sp)
 402c25c:	d9800217 	ldw	r6,8(sp)
 402c260:	003f3006 	br	402bf24 <__flash_rwdata_start+0xffffba48>
 402c264:	143ff604 	addi	r16,r2,-40
 402c268:	9c20983a 	sll	r16,r19,r16
 402c26c:	0029883a 	mov	r20,zero
 402c270:	003f1606 	br	402becc <__flash_rwdata_start+0xffffb9f0>
 402c274:	d9800215 	stw	r6,8(sp)
 402c278:	d9c00015 	stw	r7,0(sp)
 402c27c:	da400115 	stw	r9,4(sp)
 402c280:	402cebc0 	call	402cebc <__clzsi2>
 402c284:	10800804 	addi	r2,r2,32
 402c288:	da400117 	ldw	r9,4(sp)
 402c28c:	d9c00017 	ldw	r7,0(sp)
 402c290:	d9800217 	ldw	r6,8(sp)
 402c294:	003f0306 	br	402bea4 <__flash_rwdata_start+0xffffb9c8>
 402c298:	00c00044 	movi	r3,1
 402c29c:	1947c83a 	sub	r3,r3,r5
 402c2a0:	00800e04 	movi	r2,56
 402c2a4:	10feda16 	blt	r2,r3,402be10 <__flash_rwdata_start+0xffffb934>
 402c2a8:	008007c4 	movi	r2,31
 402c2ac:	10c01b16 	blt	r2,r3,402c31c <__muldf3+0x678>
 402c2b0:	00800804 	movi	r2,32
 402c2b4:	10c5c83a 	sub	r2,r2,r3
 402c2b8:	888a983a 	sll	r5,r17,r2
 402c2bc:	40c8d83a 	srl	r4,r8,r3
 402c2c0:	4084983a 	sll	r2,r8,r2
 402c2c4:	88e2d83a 	srl	r17,r17,r3
 402c2c8:	2906b03a 	or	r3,r5,r4
 402c2cc:	1004c03a 	cmpne	r2,r2,zero
 402c2d0:	1886b03a 	or	r3,r3,r2
 402c2d4:	188001cc 	andi	r2,r3,7
 402c2d8:	10000726 	beq	r2,zero,402c2f8 <__muldf3+0x654>
 402c2dc:	188003cc 	andi	r2,r3,15
 402c2e0:	01000104 	movi	r4,4
 402c2e4:	11000426 	beq	r2,r4,402c2f8 <__muldf3+0x654>
 402c2e8:	1805883a 	mov	r2,r3
 402c2ec:	10c00104 	addi	r3,r2,4
 402c2f0:	1885803a 	cmpltu	r2,r3,r2
 402c2f4:	88a3883a 	add	r17,r17,r2
 402c2f8:	8880202c 	andhi	r2,r17,128
 402c2fc:	10001c26 	beq	r2,zero,402c370 <__muldf3+0x6cc>
 402c300:	b02b883a 	mov	r21,r22
 402c304:	00800044 	movi	r2,1
 402c308:	000b883a 	mov	r5,zero
 402c30c:	0029883a 	mov	r20,zero
 402c310:	003ec306 	br	402be20 <__flash_rwdata_start+0xffffb944>
 402c314:	5805883a 	mov	r2,r11
 402c318:	003f9906 	br	402c180 <__flash_rwdata_start+0xffffbca4>
 402c31c:	00bff844 	movi	r2,-31
 402c320:	1145c83a 	sub	r2,r2,r5
 402c324:	8888d83a 	srl	r4,r17,r2
 402c328:	00800804 	movi	r2,32
 402c32c:	18801a26 	beq	r3,r2,402c398 <__muldf3+0x6f4>
 402c330:	00801004 	movi	r2,64
 402c334:	10c5c83a 	sub	r2,r2,r3
 402c338:	8884983a 	sll	r2,r17,r2
 402c33c:	1204b03a 	or	r2,r2,r8
 402c340:	1004c03a 	cmpne	r2,r2,zero
 402c344:	2084b03a 	or	r2,r4,r2
 402c348:	144001cc 	andi	r17,r2,7
 402c34c:	88000d1e 	bne	r17,zero,402c384 <__muldf3+0x6e0>
 402c350:	000b883a 	mov	r5,zero
 402c354:	1028d0fa 	srli	r20,r2,3
 402c358:	b02b883a 	mov	r21,r22
 402c35c:	0005883a 	mov	r2,zero
 402c360:	a468b03a 	or	r20,r20,r17
 402c364:	003eae06 	br	402be20 <__flash_rwdata_start+0xffffb944>
 402c368:	1007883a 	mov	r3,r2
 402c36c:	0023883a 	mov	r17,zero
 402c370:	880a927a 	slli	r5,r17,9
 402c374:	1805883a 	mov	r2,r3
 402c378:	8822977a 	slli	r17,r17,29
 402c37c:	280ad33a 	srli	r5,r5,12
 402c380:	003ff406 	br	402c354 <__flash_rwdata_start+0xffffbe78>
 402c384:	10c003cc 	andi	r3,r2,15
 402c388:	01000104 	movi	r4,4
 402c38c:	193ff626 	beq	r3,r4,402c368 <__flash_rwdata_start+0xffffbe8c>
 402c390:	0023883a 	mov	r17,zero
 402c394:	003fd506 	br	402c2ec <__flash_rwdata_start+0xffffbe10>
 402c398:	0005883a 	mov	r2,zero
 402c39c:	003fe706 	br	402c33c <__flash_rwdata_start+0xffffbe60>
 402c3a0:	00800434 	movhi	r2,16
 402c3a4:	89400234 	orhi	r5,r17,8
 402c3a8:	10bfffc4 	addi	r2,r2,-1
 402c3ac:	b02b883a 	mov	r21,r22
 402c3b0:	288a703a 	and	r5,r5,r2
 402c3b4:	4029883a 	mov	r20,r8
 402c3b8:	003eff06 	br	402bfb8 <__flash_rwdata_start+0xffffbadc>

0402c3bc <__subdf3>:
 402c3bc:	02000434 	movhi	r8,16
 402c3c0:	423fffc4 	addi	r8,r8,-1
 402c3c4:	defffb04 	addi	sp,sp,-20
 402c3c8:	2a14703a 	and	r10,r5,r8
 402c3cc:	3812d53a 	srli	r9,r7,20
 402c3d0:	3a10703a 	and	r8,r7,r8
 402c3d4:	2006d77a 	srli	r3,r4,29
 402c3d8:	3004d77a 	srli	r2,r6,29
 402c3dc:	dc000015 	stw	r16,0(sp)
 402c3e0:	501490fa 	slli	r10,r10,3
 402c3e4:	2820d53a 	srli	r16,r5,20
 402c3e8:	401090fa 	slli	r8,r8,3
 402c3ec:	dc800215 	stw	r18,8(sp)
 402c3f0:	dc400115 	stw	r17,4(sp)
 402c3f4:	dfc00415 	stw	ra,16(sp)
 402c3f8:	202290fa 	slli	r17,r4,3
 402c3fc:	dcc00315 	stw	r19,12(sp)
 402c400:	4a41ffcc 	andi	r9,r9,2047
 402c404:	0101ffc4 	movi	r4,2047
 402c408:	2824d7fa 	srli	r18,r5,31
 402c40c:	8401ffcc 	andi	r16,r16,2047
 402c410:	50c6b03a 	or	r3,r10,r3
 402c414:	380ed7fa 	srli	r7,r7,31
 402c418:	408ab03a 	or	r5,r8,r2
 402c41c:	300c90fa 	slli	r6,r6,3
 402c420:	49009626 	beq	r9,r4,402c67c <__subdf3+0x2c0>
 402c424:	39c0005c 	xori	r7,r7,1
 402c428:	8245c83a 	sub	r2,r16,r9
 402c42c:	3c807426 	beq	r7,r18,402c600 <__subdf3+0x244>
 402c430:	0080af0e 	bge	zero,r2,402c6f0 <__subdf3+0x334>
 402c434:	48002a1e 	bne	r9,zero,402c4e0 <__subdf3+0x124>
 402c438:	2988b03a 	or	r4,r5,r6
 402c43c:	20009a1e 	bne	r4,zero,402c6a8 <__subdf3+0x2ec>
 402c440:	888001cc 	andi	r2,r17,7
 402c444:	10000726 	beq	r2,zero,402c464 <__subdf3+0xa8>
 402c448:	888003cc 	andi	r2,r17,15
 402c44c:	01000104 	movi	r4,4
 402c450:	11000426 	beq	r2,r4,402c464 <__subdf3+0xa8>
 402c454:	890b883a 	add	r5,r17,r4
 402c458:	2c63803a 	cmpltu	r17,r5,r17
 402c45c:	1c47883a 	add	r3,r3,r17
 402c460:	2823883a 	mov	r17,r5
 402c464:	1880202c 	andhi	r2,r3,128
 402c468:	10005926 	beq	r2,zero,402c5d0 <__subdf3+0x214>
 402c46c:	84000044 	addi	r16,r16,1
 402c470:	0081ffc4 	movi	r2,2047
 402c474:	8080be26 	beq	r16,r2,402c770 <__subdf3+0x3b4>
 402c478:	017fe034 	movhi	r5,65408
 402c47c:	297fffc4 	addi	r5,r5,-1
 402c480:	1946703a 	and	r3,r3,r5
 402c484:	1804977a 	slli	r2,r3,29
 402c488:	1806927a 	slli	r3,r3,9
 402c48c:	8822d0fa 	srli	r17,r17,3
 402c490:	8401ffcc 	andi	r16,r16,2047
 402c494:	180ad33a 	srli	r5,r3,12
 402c498:	9100004c 	andi	r4,r18,1
 402c49c:	1444b03a 	or	r2,r2,r17
 402c4a0:	80c1ffcc 	andi	r3,r16,2047
 402c4a4:	1820953a 	slli	r16,r3,20
 402c4a8:	20c03fcc 	andi	r3,r4,255
 402c4ac:	180897fa 	slli	r4,r3,31
 402c4b0:	00c00434 	movhi	r3,16
 402c4b4:	18ffffc4 	addi	r3,r3,-1
 402c4b8:	28c6703a 	and	r3,r5,r3
 402c4bc:	1c06b03a 	or	r3,r3,r16
 402c4c0:	1906b03a 	or	r3,r3,r4
 402c4c4:	dfc00417 	ldw	ra,16(sp)
 402c4c8:	dcc00317 	ldw	r19,12(sp)
 402c4cc:	dc800217 	ldw	r18,8(sp)
 402c4d0:	dc400117 	ldw	r17,4(sp)
 402c4d4:	dc000017 	ldw	r16,0(sp)
 402c4d8:	dec00504 	addi	sp,sp,20
 402c4dc:	f800283a 	ret
 402c4e0:	0101ffc4 	movi	r4,2047
 402c4e4:	813fd626 	beq	r16,r4,402c440 <__flash_rwdata_start+0xffffbf64>
 402c4e8:	29402034 	orhi	r5,r5,128
 402c4ec:	01000e04 	movi	r4,56
 402c4f0:	2080a316 	blt	r4,r2,402c780 <__subdf3+0x3c4>
 402c4f4:	010007c4 	movi	r4,31
 402c4f8:	2080c616 	blt	r4,r2,402c814 <__subdf3+0x458>
 402c4fc:	01000804 	movi	r4,32
 402c500:	2089c83a 	sub	r4,r4,r2
 402c504:	2910983a 	sll	r8,r5,r4
 402c508:	308ed83a 	srl	r7,r6,r2
 402c50c:	3108983a 	sll	r4,r6,r4
 402c510:	2884d83a 	srl	r2,r5,r2
 402c514:	41ccb03a 	or	r6,r8,r7
 402c518:	2008c03a 	cmpne	r4,r4,zero
 402c51c:	310cb03a 	or	r6,r6,r4
 402c520:	898dc83a 	sub	r6,r17,r6
 402c524:	89a3803a 	cmpltu	r17,r17,r6
 402c528:	1887c83a 	sub	r3,r3,r2
 402c52c:	1c47c83a 	sub	r3,r3,r17
 402c530:	3023883a 	mov	r17,r6
 402c534:	1880202c 	andhi	r2,r3,128
 402c538:	10002326 	beq	r2,zero,402c5c8 <__subdf3+0x20c>
 402c53c:	04c02034 	movhi	r19,128
 402c540:	9cffffc4 	addi	r19,r19,-1
 402c544:	1ce6703a 	and	r19,r3,r19
 402c548:	98007a26 	beq	r19,zero,402c734 <__subdf3+0x378>
 402c54c:	9809883a 	mov	r4,r19
 402c550:	402cebc0 	call	402cebc <__clzsi2>
 402c554:	113ffe04 	addi	r4,r2,-8
 402c558:	00c007c4 	movi	r3,31
 402c55c:	19007b16 	blt	r3,r4,402c74c <__subdf3+0x390>
 402c560:	00800804 	movi	r2,32
 402c564:	1105c83a 	sub	r2,r2,r4
 402c568:	8884d83a 	srl	r2,r17,r2
 402c56c:	9906983a 	sll	r3,r19,r4
 402c570:	8922983a 	sll	r17,r17,r4
 402c574:	10c4b03a 	or	r2,r2,r3
 402c578:	24007816 	blt	r4,r16,402c75c <__subdf3+0x3a0>
 402c57c:	2421c83a 	sub	r16,r4,r16
 402c580:	80c00044 	addi	r3,r16,1
 402c584:	010007c4 	movi	r4,31
 402c588:	20c09516 	blt	r4,r3,402c7e0 <__subdf3+0x424>
 402c58c:	01400804 	movi	r5,32
 402c590:	28cbc83a 	sub	r5,r5,r3
 402c594:	88c8d83a 	srl	r4,r17,r3
 402c598:	8962983a 	sll	r17,r17,r5
 402c59c:	114a983a 	sll	r5,r2,r5
 402c5a0:	10c6d83a 	srl	r3,r2,r3
 402c5a4:	8804c03a 	cmpne	r2,r17,zero
 402c5a8:	290ab03a 	or	r5,r5,r4
 402c5ac:	28a2b03a 	or	r17,r5,r2
 402c5b0:	0021883a 	mov	r16,zero
 402c5b4:	003fa206 	br	402c440 <__flash_rwdata_start+0xffffbf64>
 402c5b8:	2090b03a 	or	r8,r4,r2
 402c5bc:	40018e26 	beq	r8,zero,402cbf8 <__subdf3+0x83c>
 402c5c0:	1007883a 	mov	r3,r2
 402c5c4:	2023883a 	mov	r17,r4
 402c5c8:	888001cc 	andi	r2,r17,7
 402c5cc:	103f9e1e 	bne	r2,zero,402c448 <__flash_rwdata_start+0xffffbf6c>
 402c5d0:	1804977a 	slli	r2,r3,29
 402c5d4:	8822d0fa 	srli	r17,r17,3
 402c5d8:	1810d0fa 	srli	r8,r3,3
 402c5dc:	9100004c 	andi	r4,r18,1
 402c5e0:	1444b03a 	or	r2,r2,r17
 402c5e4:	00c1ffc4 	movi	r3,2047
 402c5e8:	80c02826 	beq	r16,r3,402c68c <__subdf3+0x2d0>
 402c5ec:	01400434 	movhi	r5,16
 402c5f0:	297fffc4 	addi	r5,r5,-1
 402c5f4:	80e0703a 	and	r16,r16,r3
 402c5f8:	414a703a 	and	r5,r8,r5
 402c5fc:	003fa806 	br	402c4a0 <__flash_rwdata_start+0xffffbfc4>
 402c600:	0080630e 	bge	zero,r2,402c790 <__subdf3+0x3d4>
 402c604:	48003026 	beq	r9,zero,402c6c8 <__subdf3+0x30c>
 402c608:	0101ffc4 	movi	r4,2047
 402c60c:	813f8c26 	beq	r16,r4,402c440 <__flash_rwdata_start+0xffffbf64>
 402c610:	29402034 	orhi	r5,r5,128
 402c614:	01000e04 	movi	r4,56
 402c618:	2080a90e 	bge	r4,r2,402c8c0 <__subdf3+0x504>
 402c61c:	298cb03a 	or	r6,r5,r6
 402c620:	3012c03a 	cmpne	r9,r6,zero
 402c624:	0005883a 	mov	r2,zero
 402c628:	4c53883a 	add	r9,r9,r17
 402c62c:	4c63803a 	cmpltu	r17,r9,r17
 402c630:	10c7883a 	add	r3,r2,r3
 402c634:	88c7883a 	add	r3,r17,r3
 402c638:	4823883a 	mov	r17,r9
 402c63c:	1880202c 	andhi	r2,r3,128
 402c640:	1000d026 	beq	r2,zero,402c984 <__subdf3+0x5c8>
 402c644:	84000044 	addi	r16,r16,1
 402c648:	0081ffc4 	movi	r2,2047
 402c64c:	8080fe26 	beq	r16,r2,402ca48 <__subdf3+0x68c>
 402c650:	00bfe034 	movhi	r2,65408
 402c654:	10bfffc4 	addi	r2,r2,-1
 402c658:	1886703a 	and	r3,r3,r2
 402c65c:	880ad07a 	srli	r5,r17,1
 402c660:	180497fa 	slli	r2,r3,31
 402c664:	8900004c 	andi	r4,r17,1
 402c668:	2922b03a 	or	r17,r5,r4
 402c66c:	1806d07a 	srli	r3,r3,1
 402c670:	1462b03a 	or	r17,r2,r17
 402c674:	3825883a 	mov	r18,r7
 402c678:	003f7106 	br	402c440 <__flash_rwdata_start+0xffffbf64>
 402c67c:	2984b03a 	or	r2,r5,r6
 402c680:	103f6826 	beq	r2,zero,402c424 <__flash_rwdata_start+0xffffbf48>
 402c684:	39c03fcc 	andi	r7,r7,255
 402c688:	003f6706 	br	402c428 <__flash_rwdata_start+0xffffbf4c>
 402c68c:	4086b03a 	or	r3,r8,r2
 402c690:	18015226 	beq	r3,zero,402cbdc <__subdf3+0x820>
 402c694:	00c00434 	movhi	r3,16
 402c698:	41400234 	orhi	r5,r8,8
 402c69c:	18ffffc4 	addi	r3,r3,-1
 402c6a0:	28ca703a 	and	r5,r5,r3
 402c6a4:	003f7e06 	br	402c4a0 <__flash_rwdata_start+0xffffbfc4>
 402c6a8:	10bfffc4 	addi	r2,r2,-1
 402c6ac:	1000491e 	bne	r2,zero,402c7d4 <__subdf3+0x418>
 402c6b0:	898fc83a 	sub	r7,r17,r6
 402c6b4:	89e3803a 	cmpltu	r17,r17,r7
 402c6b8:	1947c83a 	sub	r3,r3,r5
 402c6bc:	1c47c83a 	sub	r3,r3,r17
 402c6c0:	3823883a 	mov	r17,r7
 402c6c4:	003f9b06 	br	402c534 <__flash_rwdata_start+0xffffc058>
 402c6c8:	2988b03a 	or	r4,r5,r6
 402c6cc:	203f5c26 	beq	r4,zero,402c440 <__flash_rwdata_start+0xffffbf64>
 402c6d0:	10bfffc4 	addi	r2,r2,-1
 402c6d4:	1000931e 	bne	r2,zero,402c924 <__subdf3+0x568>
 402c6d8:	898d883a 	add	r6,r17,r6
 402c6dc:	3463803a 	cmpltu	r17,r6,r17
 402c6e0:	1947883a 	add	r3,r3,r5
 402c6e4:	88c7883a 	add	r3,r17,r3
 402c6e8:	3023883a 	mov	r17,r6
 402c6ec:	003fd306 	br	402c63c <__flash_rwdata_start+0xffffc160>
 402c6f0:	1000541e 	bne	r2,zero,402c844 <__subdf3+0x488>
 402c6f4:	80800044 	addi	r2,r16,1
 402c6f8:	1081ffcc 	andi	r2,r2,2047
 402c6fc:	01000044 	movi	r4,1
 402c700:	2080a20e 	bge	r4,r2,402c98c <__subdf3+0x5d0>
 402c704:	8989c83a 	sub	r4,r17,r6
 402c708:	8905803a 	cmpltu	r2,r17,r4
 402c70c:	1967c83a 	sub	r19,r3,r5
 402c710:	98a7c83a 	sub	r19,r19,r2
 402c714:	9880202c 	andhi	r2,r19,128
 402c718:	10006326 	beq	r2,zero,402c8a8 <__subdf3+0x4ec>
 402c71c:	3463c83a 	sub	r17,r6,r17
 402c720:	28c7c83a 	sub	r3,r5,r3
 402c724:	344d803a 	cmpltu	r6,r6,r17
 402c728:	19a7c83a 	sub	r19,r3,r6
 402c72c:	3825883a 	mov	r18,r7
 402c730:	983f861e 	bne	r19,zero,402c54c <__flash_rwdata_start+0xffffc070>
 402c734:	8809883a 	mov	r4,r17
 402c738:	402cebc0 	call	402cebc <__clzsi2>
 402c73c:	10800804 	addi	r2,r2,32
 402c740:	113ffe04 	addi	r4,r2,-8
 402c744:	00c007c4 	movi	r3,31
 402c748:	193f850e 	bge	r3,r4,402c560 <__flash_rwdata_start+0xffffc084>
 402c74c:	10bff604 	addi	r2,r2,-40
 402c750:	8884983a 	sll	r2,r17,r2
 402c754:	0023883a 	mov	r17,zero
 402c758:	243f880e 	bge	r4,r16,402c57c <__flash_rwdata_start+0xffffc0a0>
 402c75c:	00ffe034 	movhi	r3,65408
 402c760:	18ffffc4 	addi	r3,r3,-1
 402c764:	8121c83a 	sub	r16,r16,r4
 402c768:	10c6703a 	and	r3,r2,r3
 402c76c:	003f3406 	br	402c440 <__flash_rwdata_start+0xffffbf64>
 402c770:	9100004c 	andi	r4,r18,1
 402c774:	000b883a 	mov	r5,zero
 402c778:	0005883a 	mov	r2,zero
 402c77c:	003f4806 	br	402c4a0 <__flash_rwdata_start+0xffffbfc4>
 402c780:	298cb03a 	or	r6,r5,r6
 402c784:	300cc03a 	cmpne	r6,r6,zero
 402c788:	0005883a 	mov	r2,zero
 402c78c:	003f6406 	br	402c520 <__flash_rwdata_start+0xffffc044>
 402c790:	10009a1e 	bne	r2,zero,402c9fc <__subdf3+0x640>
 402c794:	82400044 	addi	r9,r16,1
 402c798:	4881ffcc 	andi	r2,r9,2047
 402c79c:	02800044 	movi	r10,1
 402c7a0:	5080670e 	bge	r10,r2,402c940 <__subdf3+0x584>
 402c7a4:	0081ffc4 	movi	r2,2047
 402c7a8:	4880af26 	beq	r9,r2,402ca68 <__subdf3+0x6ac>
 402c7ac:	898d883a 	add	r6,r17,r6
 402c7b0:	1945883a 	add	r2,r3,r5
 402c7b4:	3447803a 	cmpltu	r3,r6,r17
 402c7b8:	1887883a 	add	r3,r3,r2
 402c7bc:	182297fa 	slli	r17,r3,31
 402c7c0:	300cd07a 	srli	r6,r6,1
 402c7c4:	1806d07a 	srli	r3,r3,1
 402c7c8:	4821883a 	mov	r16,r9
 402c7cc:	89a2b03a 	or	r17,r17,r6
 402c7d0:	003f1b06 	br	402c440 <__flash_rwdata_start+0xffffbf64>
 402c7d4:	0101ffc4 	movi	r4,2047
 402c7d8:	813f441e 	bne	r16,r4,402c4ec <__flash_rwdata_start+0xffffc010>
 402c7dc:	003f1806 	br	402c440 <__flash_rwdata_start+0xffffbf64>
 402c7e0:	843ff844 	addi	r16,r16,-31
 402c7e4:	01400804 	movi	r5,32
 402c7e8:	1408d83a 	srl	r4,r2,r16
 402c7ec:	19405026 	beq	r3,r5,402c930 <__subdf3+0x574>
 402c7f0:	01401004 	movi	r5,64
 402c7f4:	28c7c83a 	sub	r3,r5,r3
 402c7f8:	10c4983a 	sll	r2,r2,r3
 402c7fc:	88a2b03a 	or	r17,r17,r2
 402c800:	8822c03a 	cmpne	r17,r17,zero
 402c804:	2462b03a 	or	r17,r4,r17
 402c808:	0007883a 	mov	r3,zero
 402c80c:	0021883a 	mov	r16,zero
 402c810:	003f6d06 	br	402c5c8 <__flash_rwdata_start+0xffffc0ec>
 402c814:	11fff804 	addi	r7,r2,-32
 402c818:	01000804 	movi	r4,32
 402c81c:	29ced83a 	srl	r7,r5,r7
 402c820:	11004526 	beq	r2,r4,402c938 <__subdf3+0x57c>
 402c824:	01001004 	movi	r4,64
 402c828:	2089c83a 	sub	r4,r4,r2
 402c82c:	2904983a 	sll	r2,r5,r4
 402c830:	118cb03a 	or	r6,r2,r6
 402c834:	300cc03a 	cmpne	r6,r6,zero
 402c838:	398cb03a 	or	r6,r7,r6
 402c83c:	0005883a 	mov	r2,zero
 402c840:	003f3706 	br	402c520 <__flash_rwdata_start+0xffffc044>
 402c844:	80002a26 	beq	r16,zero,402c8f0 <__subdf3+0x534>
 402c848:	0101ffc4 	movi	r4,2047
 402c84c:	49006626 	beq	r9,r4,402c9e8 <__subdf3+0x62c>
 402c850:	0085c83a 	sub	r2,zero,r2
 402c854:	18c02034 	orhi	r3,r3,128
 402c858:	01000e04 	movi	r4,56
 402c85c:	20807e16 	blt	r4,r2,402ca58 <__subdf3+0x69c>
 402c860:	010007c4 	movi	r4,31
 402c864:	2080e716 	blt	r4,r2,402cc04 <__subdf3+0x848>
 402c868:	01000804 	movi	r4,32
 402c86c:	2089c83a 	sub	r4,r4,r2
 402c870:	1914983a 	sll	r10,r3,r4
 402c874:	8890d83a 	srl	r8,r17,r2
 402c878:	8908983a 	sll	r4,r17,r4
 402c87c:	1884d83a 	srl	r2,r3,r2
 402c880:	5222b03a 	or	r17,r10,r8
 402c884:	2006c03a 	cmpne	r3,r4,zero
 402c888:	88e2b03a 	or	r17,r17,r3
 402c88c:	3463c83a 	sub	r17,r6,r17
 402c890:	2885c83a 	sub	r2,r5,r2
 402c894:	344d803a 	cmpltu	r6,r6,r17
 402c898:	1187c83a 	sub	r3,r2,r6
 402c89c:	4821883a 	mov	r16,r9
 402c8a0:	3825883a 	mov	r18,r7
 402c8a4:	003f2306 	br	402c534 <__flash_rwdata_start+0xffffc058>
 402c8a8:	24d0b03a 	or	r8,r4,r19
 402c8ac:	40001b1e 	bne	r8,zero,402c91c <__subdf3+0x560>
 402c8b0:	0005883a 	mov	r2,zero
 402c8b4:	0009883a 	mov	r4,zero
 402c8b8:	0021883a 	mov	r16,zero
 402c8bc:	003f4906 	br	402c5e4 <__flash_rwdata_start+0xffffc108>
 402c8c0:	010007c4 	movi	r4,31
 402c8c4:	20803a16 	blt	r4,r2,402c9b0 <__subdf3+0x5f4>
 402c8c8:	01000804 	movi	r4,32
 402c8cc:	2089c83a 	sub	r4,r4,r2
 402c8d0:	2912983a 	sll	r9,r5,r4
 402c8d4:	3090d83a 	srl	r8,r6,r2
 402c8d8:	3108983a 	sll	r4,r6,r4
 402c8dc:	2884d83a 	srl	r2,r5,r2
 402c8e0:	4a12b03a 	or	r9,r9,r8
 402c8e4:	2008c03a 	cmpne	r4,r4,zero
 402c8e8:	4912b03a 	or	r9,r9,r4
 402c8ec:	003f4e06 	br	402c628 <__flash_rwdata_start+0xffffc14c>
 402c8f0:	1c48b03a 	or	r4,r3,r17
 402c8f4:	20003c26 	beq	r4,zero,402c9e8 <__subdf3+0x62c>
 402c8f8:	0084303a 	nor	r2,zero,r2
 402c8fc:	1000381e 	bne	r2,zero,402c9e0 <__subdf3+0x624>
 402c900:	3463c83a 	sub	r17,r6,r17
 402c904:	28c5c83a 	sub	r2,r5,r3
 402c908:	344d803a 	cmpltu	r6,r6,r17
 402c90c:	1187c83a 	sub	r3,r2,r6
 402c910:	4821883a 	mov	r16,r9
 402c914:	3825883a 	mov	r18,r7
 402c918:	003f0606 	br	402c534 <__flash_rwdata_start+0xffffc058>
 402c91c:	2023883a 	mov	r17,r4
 402c920:	003f0906 	br	402c548 <__flash_rwdata_start+0xffffc06c>
 402c924:	0101ffc4 	movi	r4,2047
 402c928:	813f3a1e 	bne	r16,r4,402c614 <__flash_rwdata_start+0xffffc138>
 402c92c:	003ec406 	br	402c440 <__flash_rwdata_start+0xffffbf64>
 402c930:	0005883a 	mov	r2,zero
 402c934:	003fb106 	br	402c7fc <__flash_rwdata_start+0xffffc320>
 402c938:	0005883a 	mov	r2,zero
 402c93c:	003fbc06 	br	402c830 <__flash_rwdata_start+0xffffc354>
 402c940:	1c44b03a 	or	r2,r3,r17
 402c944:	80008e1e 	bne	r16,zero,402cb80 <__subdf3+0x7c4>
 402c948:	1000c826 	beq	r2,zero,402cc6c <__subdf3+0x8b0>
 402c94c:	2984b03a 	or	r2,r5,r6
 402c950:	103ebb26 	beq	r2,zero,402c440 <__flash_rwdata_start+0xffffbf64>
 402c954:	8989883a 	add	r4,r17,r6
 402c958:	1945883a 	add	r2,r3,r5
 402c95c:	2447803a 	cmpltu	r3,r4,r17
 402c960:	1887883a 	add	r3,r3,r2
 402c964:	1880202c 	andhi	r2,r3,128
 402c968:	2023883a 	mov	r17,r4
 402c96c:	103f1626 	beq	r2,zero,402c5c8 <__flash_rwdata_start+0xffffc0ec>
 402c970:	00bfe034 	movhi	r2,65408
 402c974:	10bfffc4 	addi	r2,r2,-1
 402c978:	5021883a 	mov	r16,r10
 402c97c:	1886703a 	and	r3,r3,r2
 402c980:	003eaf06 	br	402c440 <__flash_rwdata_start+0xffffbf64>
 402c984:	3825883a 	mov	r18,r7
 402c988:	003f0f06 	br	402c5c8 <__flash_rwdata_start+0xffffc0ec>
 402c98c:	1c44b03a 	or	r2,r3,r17
 402c990:	8000251e 	bne	r16,zero,402ca28 <__subdf3+0x66c>
 402c994:	1000661e 	bne	r2,zero,402cb30 <__subdf3+0x774>
 402c998:	2990b03a 	or	r8,r5,r6
 402c99c:	40009626 	beq	r8,zero,402cbf8 <__subdf3+0x83c>
 402c9a0:	2807883a 	mov	r3,r5
 402c9a4:	3023883a 	mov	r17,r6
 402c9a8:	3825883a 	mov	r18,r7
 402c9ac:	003ea406 	br	402c440 <__flash_rwdata_start+0xffffbf64>
 402c9b0:	127ff804 	addi	r9,r2,-32
 402c9b4:	01000804 	movi	r4,32
 402c9b8:	2a52d83a 	srl	r9,r5,r9
 402c9bc:	11008c26 	beq	r2,r4,402cbf0 <__subdf3+0x834>
 402c9c0:	01001004 	movi	r4,64
 402c9c4:	2085c83a 	sub	r2,r4,r2
 402c9c8:	2884983a 	sll	r2,r5,r2
 402c9cc:	118cb03a 	or	r6,r2,r6
 402c9d0:	300cc03a 	cmpne	r6,r6,zero
 402c9d4:	4992b03a 	or	r9,r9,r6
 402c9d8:	0005883a 	mov	r2,zero
 402c9dc:	003f1206 	br	402c628 <__flash_rwdata_start+0xffffc14c>
 402c9e0:	0101ffc4 	movi	r4,2047
 402c9e4:	493f9c1e 	bne	r9,r4,402c858 <__flash_rwdata_start+0xffffc37c>
 402c9e8:	2807883a 	mov	r3,r5
 402c9ec:	3023883a 	mov	r17,r6
 402c9f0:	4821883a 	mov	r16,r9
 402c9f4:	3825883a 	mov	r18,r7
 402c9f8:	003e9106 	br	402c440 <__flash_rwdata_start+0xffffbf64>
 402c9fc:	80001f1e 	bne	r16,zero,402ca7c <__subdf3+0x6c0>
 402ca00:	1c48b03a 	or	r4,r3,r17
 402ca04:	20005a26 	beq	r4,zero,402cb70 <__subdf3+0x7b4>
 402ca08:	0084303a 	nor	r2,zero,r2
 402ca0c:	1000561e 	bne	r2,zero,402cb68 <__subdf3+0x7ac>
 402ca10:	89a3883a 	add	r17,r17,r6
 402ca14:	1945883a 	add	r2,r3,r5
 402ca18:	898d803a 	cmpltu	r6,r17,r6
 402ca1c:	3087883a 	add	r3,r6,r2
 402ca20:	4821883a 	mov	r16,r9
 402ca24:	003f0506 	br	402c63c <__flash_rwdata_start+0xffffc160>
 402ca28:	10002b1e 	bne	r2,zero,402cad8 <__subdf3+0x71c>
 402ca2c:	2984b03a 	or	r2,r5,r6
 402ca30:	10008026 	beq	r2,zero,402cc34 <__subdf3+0x878>
 402ca34:	2807883a 	mov	r3,r5
 402ca38:	3023883a 	mov	r17,r6
 402ca3c:	3825883a 	mov	r18,r7
 402ca40:	0401ffc4 	movi	r16,2047
 402ca44:	003e7e06 	br	402c440 <__flash_rwdata_start+0xffffbf64>
 402ca48:	3809883a 	mov	r4,r7
 402ca4c:	0011883a 	mov	r8,zero
 402ca50:	0005883a 	mov	r2,zero
 402ca54:	003ee306 	br	402c5e4 <__flash_rwdata_start+0xffffc108>
 402ca58:	1c62b03a 	or	r17,r3,r17
 402ca5c:	8822c03a 	cmpne	r17,r17,zero
 402ca60:	0005883a 	mov	r2,zero
 402ca64:	003f8906 	br	402c88c <__flash_rwdata_start+0xffffc3b0>
 402ca68:	3809883a 	mov	r4,r7
 402ca6c:	4821883a 	mov	r16,r9
 402ca70:	0011883a 	mov	r8,zero
 402ca74:	0005883a 	mov	r2,zero
 402ca78:	003eda06 	br	402c5e4 <__flash_rwdata_start+0xffffc108>
 402ca7c:	0101ffc4 	movi	r4,2047
 402ca80:	49003b26 	beq	r9,r4,402cb70 <__subdf3+0x7b4>
 402ca84:	0085c83a 	sub	r2,zero,r2
 402ca88:	18c02034 	orhi	r3,r3,128
 402ca8c:	01000e04 	movi	r4,56
 402ca90:	20806e16 	blt	r4,r2,402cc4c <__subdf3+0x890>
 402ca94:	010007c4 	movi	r4,31
 402ca98:	20807716 	blt	r4,r2,402cc78 <__subdf3+0x8bc>
 402ca9c:	01000804 	movi	r4,32
 402caa0:	2089c83a 	sub	r4,r4,r2
 402caa4:	1914983a 	sll	r10,r3,r4
 402caa8:	8890d83a 	srl	r8,r17,r2
 402caac:	8908983a 	sll	r4,r17,r4
 402cab0:	1884d83a 	srl	r2,r3,r2
 402cab4:	5222b03a 	or	r17,r10,r8
 402cab8:	2006c03a 	cmpne	r3,r4,zero
 402cabc:	88e2b03a 	or	r17,r17,r3
 402cac0:	89a3883a 	add	r17,r17,r6
 402cac4:	1145883a 	add	r2,r2,r5
 402cac8:	898d803a 	cmpltu	r6,r17,r6
 402cacc:	3087883a 	add	r3,r6,r2
 402cad0:	4821883a 	mov	r16,r9
 402cad4:	003ed906 	br	402c63c <__flash_rwdata_start+0xffffc160>
 402cad8:	2984b03a 	or	r2,r5,r6
 402cadc:	10004226 	beq	r2,zero,402cbe8 <__subdf3+0x82c>
 402cae0:	1808d0fa 	srli	r4,r3,3
 402cae4:	8822d0fa 	srli	r17,r17,3
 402cae8:	1806977a 	slli	r3,r3,29
 402caec:	2080022c 	andhi	r2,r4,8
 402caf0:	1c62b03a 	or	r17,r3,r17
 402caf4:	10000826 	beq	r2,zero,402cb18 <__subdf3+0x75c>
 402caf8:	2812d0fa 	srli	r9,r5,3
 402cafc:	4880022c 	andhi	r2,r9,8
 402cb00:	1000051e 	bne	r2,zero,402cb18 <__subdf3+0x75c>
 402cb04:	300cd0fa 	srli	r6,r6,3
 402cb08:	2804977a 	slli	r2,r5,29
 402cb0c:	4809883a 	mov	r4,r9
 402cb10:	3825883a 	mov	r18,r7
 402cb14:	11a2b03a 	or	r17,r2,r6
 402cb18:	8806d77a 	srli	r3,r17,29
 402cb1c:	200890fa 	slli	r4,r4,3
 402cb20:	882290fa 	slli	r17,r17,3
 402cb24:	0401ffc4 	movi	r16,2047
 402cb28:	1906b03a 	or	r3,r3,r4
 402cb2c:	003e4406 	br	402c440 <__flash_rwdata_start+0xffffbf64>
 402cb30:	2984b03a 	or	r2,r5,r6
 402cb34:	103e4226 	beq	r2,zero,402c440 <__flash_rwdata_start+0xffffbf64>
 402cb38:	8989c83a 	sub	r4,r17,r6
 402cb3c:	8911803a 	cmpltu	r8,r17,r4
 402cb40:	1945c83a 	sub	r2,r3,r5
 402cb44:	1205c83a 	sub	r2,r2,r8
 402cb48:	1200202c 	andhi	r8,r2,128
 402cb4c:	403e9a26 	beq	r8,zero,402c5b8 <__flash_rwdata_start+0xffffc0dc>
 402cb50:	3463c83a 	sub	r17,r6,r17
 402cb54:	28c5c83a 	sub	r2,r5,r3
 402cb58:	344d803a 	cmpltu	r6,r6,r17
 402cb5c:	1187c83a 	sub	r3,r2,r6
 402cb60:	3825883a 	mov	r18,r7
 402cb64:	003e3606 	br	402c440 <__flash_rwdata_start+0xffffbf64>
 402cb68:	0101ffc4 	movi	r4,2047
 402cb6c:	493fc71e 	bne	r9,r4,402ca8c <__flash_rwdata_start+0xffffc5b0>
 402cb70:	2807883a 	mov	r3,r5
 402cb74:	3023883a 	mov	r17,r6
 402cb78:	4821883a 	mov	r16,r9
 402cb7c:	003e3006 	br	402c440 <__flash_rwdata_start+0xffffbf64>
 402cb80:	10003626 	beq	r2,zero,402cc5c <__subdf3+0x8a0>
 402cb84:	2984b03a 	or	r2,r5,r6
 402cb88:	10001726 	beq	r2,zero,402cbe8 <__subdf3+0x82c>
 402cb8c:	1808d0fa 	srli	r4,r3,3
 402cb90:	8822d0fa 	srli	r17,r17,3
 402cb94:	1806977a 	slli	r3,r3,29
 402cb98:	2080022c 	andhi	r2,r4,8
 402cb9c:	1c62b03a 	or	r17,r3,r17
 402cba0:	10000726 	beq	r2,zero,402cbc0 <__subdf3+0x804>
 402cba4:	2812d0fa 	srli	r9,r5,3
 402cba8:	4880022c 	andhi	r2,r9,8
 402cbac:	1000041e 	bne	r2,zero,402cbc0 <__subdf3+0x804>
 402cbb0:	300cd0fa 	srli	r6,r6,3
 402cbb4:	2804977a 	slli	r2,r5,29
 402cbb8:	4809883a 	mov	r4,r9
 402cbbc:	11a2b03a 	or	r17,r2,r6
 402cbc0:	8806d77a 	srli	r3,r17,29
 402cbc4:	200890fa 	slli	r4,r4,3
 402cbc8:	882290fa 	slli	r17,r17,3
 402cbcc:	3825883a 	mov	r18,r7
 402cbd0:	1906b03a 	or	r3,r3,r4
 402cbd4:	0401ffc4 	movi	r16,2047
 402cbd8:	003e1906 	br	402c440 <__flash_rwdata_start+0xffffbf64>
 402cbdc:	000b883a 	mov	r5,zero
 402cbe0:	0005883a 	mov	r2,zero
 402cbe4:	003e2e06 	br	402c4a0 <__flash_rwdata_start+0xffffbfc4>
 402cbe8:	0401ffc4 	movi	r16,2047
 402cbec:	003e1406 	br	402c440 <__flash_rwdata_start+0xffffbf64>
 402cbf0:	0005883a 	mov	r2,zero
 402cbf4:	003f7506 	br	402c9cc <__flash_rwdata_start+0xffffc4f0>
 402cbf8:	0005883a 	mov	r2,zero
 402cbfc:	0009883a 	mov	r4,zero
 402cc00:	003e7806 	br	402c5e4 <__flash_rwdata_start+0xffffc108>
 402cc04:	123ff804 	addi	r8,r2,-32
 402cc08:	01000804 	movi	r4,32
 402cc0c:	1a10d83a 	srl	r8,r3,r8
 402cc10:	11002526 	beq	r2,r4,402cca8 <__subdf3+0x8ec>
 402cc14:	01001004 	movi	r4,64
 402cc18:	2085c83a 	sub	r2,r4,r2
 402cc1c:	1884983a 	sll	r2,r3,r2
 402cc20:	1444b03a 	or	r2,r2,r17
 402cc24:	1004c03a 	cmpne	r2,r2,zero
 402cc28:	40a2b03a 	or	r17,r8,r2
 402cc2c:	0005883a 	mov	r2,zero
 402cc30:	003f1606 	br	402c88c <__flash_rwdata_start+0xffffc3b0>
 402cc34:	02000434 	movhi	r8,16
 402cc38:	0009883a 	mov	r4,zero
 402cc3c:	423fffc4 	addi	r8,r8,-1
 402cc40:	00bfffc4 	movi	r2,-1
 402cc44:	0401ffc4 	movi	r16,2047
 402cc48:	003e6606 	br	402c5e4 <__flash_rwdata_start+0xffffc108>
 402cc4c:	1c62b03a 	or	r17,r3,r17
 402cc50:	8822c03a 	cmpne	r17,r17,zero
 402cc54:	0005883a 	mov	r2,zero
 402cc58:	003f9906 	br	402cac0 <__flash_rwdata_start+0xffffc5e4>
 402cc5c:	2807883a 	mov	r3,r5
 402cc60:	3023883a 	mov	r17,r6
 402cc64:	0401ffc4 	movi	r16,2047
 402cc68:	003df506 	br	402c440 <__flash_rwdata_start+0xffffbf64>
 402cc6c:	2807883a 	mov	r3,r5
 402cc70:	3023883a 	mov	r17,r6
 402cc74:	003df206 	br	402c440 <__flash_rwdata_start+0xffffbf64>
 402cc78:	123ff804 	addi	r8,r2,-32
 402cc7c:	01000804 	movi	r4,32
 402cc80:	1a10d83a 	srl	r8,r3,r8
 402cc84:	11000a26 	beq	r2,r4,402ccb0 <__subdf3+0x8f4>
 402cc88:	01001004 	movi	r4,64
 402cc8c:	2085c83a 	sub	r2,r4,r2
 402cc90:	1884983a 	sll	r2,r3,r2
 402cc94:	1444b03a 	or	r2,r2,r17
 402cc98:	1004c03a 	cmpne	r2,r2,zero
 402cc9c:	40a2b03a 	or	r17,r8,r2
 402cca0:	0005883a 	mov	r2,zero
 402cca4:	003f8606 	br	402cac0 <__flash_rwdata_start+0xffffc5e4>
 402cca8:	0005883a 	mov	r2,zero
 402ccac:	003fdc06 	br	402cc20 <__flash_rwdata_start+0xffffc744>
 402ccb0:	0005883a 	mov	r2,zero
 402ccb4:	003ff706 	br	402cc94 <__flash_rwdata_start+0xffffc7b8>

0402ccb8 <__fixdfsi>:
 402ccb8:	280cd53a 	srli	r6,r5,20
 402ccbc:	00c00434 	movhi	r3,16
 402ccc0:	18ffffc4 	addi	r3,r3,-1
 402ccc4:	3181ffcc 	andi	r6,r6,2047
 402ccc8:	01c0ff84 	movi	r7,1022
 402cccc:	28c6703a 	and	r3,r5,r3
 402ccd0:	280ad7fa 	srli	r5,r5,31
 402ccd4:	3980120e 	bge	r7,r6,402cd20 <__fixdfsi+0x68>
 402ccd8:	00810744 	movi	r2,1053
 402ccdc:	11800c16 	blt	r2,r6,402cd10 <__fixdfsi+0x58>
 402cce0:	00810cc4 	movi	r2,1075
 402cce4:	1185c83a 	sub	r2,r2,r6
 402cce8:	01c007c4 	movi	r7,31
 402ccec:	18c00434 	orhi	r3,r3,16
 402ccf0:	38800d16 	blt	r7,r2,402cd28 <__fixdfsi+0x70>
 402ccf4:	31befb44 	addi	r6,r6,-1043
 402ccf8:	2084d83a 	srl	r2,r4,r2
 402ccfc:	1986983a 	sll	r3,r3,r6
 402cd00:	1884b03a 	or	r2,r3,r2
 402cd04:	28000726 	beq	r5,zero,402cd24 <__fixdfsi+0x6c>
 402cd08:	0085c83a 	sub	r2,zero,r2
 402cd0c:	f800283a 	ret
 402cd10:	00a00034 	movhi	r2,32768
 402cd14:	10bfffc4 	addi	r2,r2,-1
 402cd18:	2885883a 	add	r2,r5,r2
 402cd1c:	f800283a 	ret
 402cd20:	0005883a 	mov	r2,zero
 402cd24:	f800283a 	ret
 402cd28:	008104c4 	movi	r2,1043
 402cd2c:	1185c83a 	sub	r2,r2,r6
 402cd30:	1884d83a 	srl	r2,r3,r2
 402cd34:	003ff306 	br	402cd04 <__flash_rwdata_start+0xffffc828>

0402cd38 <__floatsidf>:
 402cd38:	defffd04 	addi	sp,sp,-12
 402cd3c:	dfc00215 	stw	ra,8(sp)
 402cd40:	dc400115 	stw	r17,4(sp)
 402cd44:	dc000015 	stw	r16,0(sp)
 402cd48:	20002b26 	beq	r4,zero,402cdf8 <__floatsidf+0xc0>
 402cd4c:	2023883a 	mov	r17,r4
 402cd50:	2020d7fa 	srli	r16,r4,31
 402cd54:	20002d16 	blt	r4,zero,402ce0c <__floatsidf+0xd4>
 402cd58:	8809883a 	mov	r4,r17
 402cd5c:	402cebc0 	call	402cebc <__clzsi2>
 402cd60:	01410784 	movi	r5,1054
 402cd64:	288bc83a 	sub	r5,r5,r2
 402cd68:	01010cc4 	movi	r4,1075
 402cd6c:	2149c83a 	sub	r4,r4,r5
 402cd70:	00c007c4 	movi	r3,31
 402cd74:	1900160e 	bge	r3,r4,402cdd0 <__floatsidf+0x98>
 402cd78:	00c104c4 	movi	r3,1043
 402cd7c:	1947c83a 	sub	r3,r3,r5
 402cd80:	88c6983a 	sll	r3,r17,r3
 402cd84:	00800434 	movhi	r2,16
 402cd88:	10bfffc4 	addi	r2,r2,-1
 402cd8c:	1886703a 	and	r3,r3,r2
 402cd90:	2941ffcc 	andi	r5,r5,2047
 402cd94:	800d883a 	mov	r6,r16
 402cd98:	0005883a 	mov	r2,zero
 402cd9c:	280a953a 	slli	r5,r5,20
 402cda0:	31803fcc 	andi	r6,r6,255
 402cda4:	01000434 	movhi	r4,16
 402cda8:	300c97fa 	slli	r6,r6,31
 402cdac:	213fffc4 	addi	r4,r4,-1
 402cdb0:	1906703a 	and	r3,r3,r4
 402cdb4:	1946b03a 	or	r3,r3,r5
 402cdb8:	1986b03a 	or	r3,r3,r6
 402cdbc:	dfc00217 	ldw	ra,8(sp)
 402cdc0:	dc400117 	ldw	r17,4(sp)
 402cdc4:	dc000017 	ldw	r16,0(sp)
 402cdc8:	dec00304 	addi	sp,sp,12
 402cdcc:	f800283a 	ret
 402cdd0:	00c002c4 	movi	r3,11
 402cdd4:	1887c83a 	sub	r3,r3,r2
 402cdd8:	88c6d83a 	srl	r3,r17,r3
 402cddc:	8904983a 	sll	r2,r17,r4
 402cde0:	01000434 	movhi	r4,16
 402cde4:	213fffc4 	addi	r4,r4,-1
 402cde8:	2941ffcc 	andi	r5,r5,2047
 402cdec:	1906703a 	and	r3,r3,r4
 402cdf0:	800d883a 	mov	r6,r16
 402cdf4:	003fe906 	br	402cd9c <__flash_rwdata_start+0xffffc8c0>
 402cdf8:	000d883a 	mov	r6,zero
 402cdfc:	000b883a 	mov	r5,zero
 402ce00:	0007883a 	mov	r3,zero
 402ce04:	0005883a 	mov	r2,zero
 402ce08:	003fe406 	br	402cd9c <__flash_rwdata_start+0xffffc8c0>
 402ce0c:	0123c83a 	sub	r17,zero,r4
 402ce10:	003fd106 	br	402cd58 <__flash_rwdata_start+0xffffc87c>

0402ce14 <__floatunsidf>:
 402ce14:	defffe04 	addi	sp,sp,-8
 402ce18:	dc000015 	stw	r16,0(sp)
 402ce1c:	dfc00115 	stw	ra,4(sp)
 402ce20:	2021883a 	mov	r16,r4
 402ce24:	20002226 	beq	r4,zero,402ceb0 <__floatunsidf+0x9c>
 402ce28:	402cebc0 	call	402cebc <__clzsi2>
 402ce2c:	01010784 	movi	r4,1054
 402ce30:	2089c83a 	sub	r4,r4,r2
 402ce34:	01810cc4 	movi	r6,1075
 402ce38:	310dc83a 	sub	r6,r6,r4
 402ce3c:	00c007c4 	movi	r3,31
 402ce40:	1980120e 	bge	r3,r6,402ce8c <__floatunsidf+0x78>
 402ce44:	00c104c4 	movi	r3,1043
 402ce48:	1907c83a 	sub	r3,r3,r4
 402ce4c:	80ca983a 	sll	r5,r16,r3
 402ce50:	00800434 	movhi	r2,16
 402ce54:	10bfffc4 	addi	r2,r2,-1
 402ce58:	2101ffcc 	andi	r4,r4,2047
 402ce5c:	0021883a 	mov	r16,zero
 402ce60:	288a703a 	and	r5,r5,r2
 402ce64:	2008953a 	slli	r4,r4,20
 402ce68:	00c00434 	movhi	r3,16
 402ce6c:	18ffffc4 	addi	r3,r3,-1
 402ce70:	28c6703a 	and	r3,r5,r3
 402ce74:	8005883a 	mov	r2,r16
 402ce78:	1906b03a 	or	r3,r3,r4
 402ce7c:	dfc00117 	ldw	ra,4(sp)
 402ce80:	dc000017 	ldw	r16,0(sp)
 402ce84:	dec00204 	addi	sp,sp,8
 402ce88:	f800283a 	ret
 402ce8c:	00c002c4 	movi	r3,11
 402ce90:	188bc83a 	sub	r5,r3,r2
 402ce94:	814ad83a 	srl	r5,r16,r5
 402ce98:	00c00434 	movhi	r3,16
 402ce9c:	18ffffc4 	addi	r3,r3,-1
 402cea0:	81a0983a 	sll	r16,r16,r6
 402cea4:	2101ffcc 	andi	r4,r4,2047
 402cea8:	28ca703a 	and	r5,r5,r3
 402ceac:	003fed06 	br	402ce64 <__flash_rwdata_start+0xffffc988>
 402ceb0:	0009883a 	mov	r4,zero
 402ceb4:	000b883a 	mov	r5,zero
 402ceb8:	003fea06 	br	402ce64 <__flash_rwdata_start+0xffffc988>

0402cebc <__clzsi2>:
 402cebc:	00bfffd4 	movui	r2,65535
 402cec0:	11000536 	bltu	r2,r4,402ced8 <__clzsi2+0x1c>
 402cec4:	00803fc4 	movi	r2,255
 402cec8:	11000f36 	bltu	r2,r4,402cf08 <__clzsi2+0x4c>
 402cecc:	00800804 	movi	r2,32
 402ced0:	0007883a 	mov	r3,zero
 402ced4:	00000506 	br	402ceec <__clzsi2+0x30>
 402ced8:	00804034 	movhi	r2,256
 402cedc:	10bfffc4 	addi	r2,r2,-1
 402cee0:	11000c2e 	bgeu	r2,r4,402cf14 <__clzsi2+0x58>
 402cee4:	00800204 	movi	r2,8
 402cee8:	00c00604 	movi	r3,24
 402ceec:	20c8d83a 	srl	r4,r4,r3
 402cef0:	00c00034 	movhi	r3,0
 402cef4:	18c0a004 	addi	r3,r3,640
 402cef8:	1909883a 	add	r4,r3,r4
 402cefc:	20c00003 	ldbu	r3,0(r4)
 402cf00:	10c5c83a 	sub	r2,r2,r3
 402cf04:	f800283a 	ret
 402cf08:	00800604 	movi	r2,24
 402cf0c:	00c00204 	movi	r3,8
 402cf10:	003ff606 	br	402ceec <__flash_rwdata_start+0xffffca10>
 402cf14:	00800404 	movi	r2,16
 402cf18:	1007883a 	mov	r3,r2
 402cf1c:	003ff306 	br	402ceec <__flash_rwdata_start+0xffffca10>

0402cf20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 402cf20:	defffe04 	addi	sp,sp,-8
 402cf24:	dfc00115 	stw	ra,4(sp)
 402cf28:	df000015 	stw	fp,0(sp)
 402cf2c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 402cf30:	d0a00b17 	ldw	r2,-32724(gp)
 402cf34:	10000326 	beq	r2,zero,402cf44 <alt_get_errno+0x24>
 402cf38:	d0a00b17 	ldw	r2,-32724(gp)
 402cf3c:	103ee83a 	callr	r2
 402cf40:	00000106 	br	402cf48 <alt_get_errno+0x28>
 402cf44:	d0a01b04 	addi	r2,gp,-32660
}
 402cf48:	e037883a 	mov	sp,fp
 402cf4c:	dfc00117 	ldw	ra,4(sp)
 402cf50:	df000017 	ldw	fp,0(sp)
 402cf54:	dec00204 	addi	sp,sp,8
 402cf58:	f800283a 	ret

0402cf5c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 402cf5c:	defffb04 	addi	sp,sp,-20
 402cf60:	dfc00415 	stw	ra,16(sp)
 402cf64:	df000315 	stw	fp,12(sp)
 402cf68:	df000304 	addi	fp,sp,12
 402cf6c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 402cf70:	e0bfff17 	ldw	r2,-4(fp)
 402cf74:	10000616 	blt	r2,zero,402cf90 <close+0x34>
 402cf78:	e0bfff17 	ldw	r2,-4(fp)
 402cf7c:	10c00324 	muli	r3,r2,12
 402cf80:	00800034 	movhi	r2,0
 402cf84:	10833204 	addi	r2,r2,3272
 402cf88:	1885883a 	add	r2,r3,r2
 402cf8c:	00000106 	br	402cf94 <close+0x38>
 402cf90:	0005883a 	mov	r2,zero
 402cf94:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 402cf98:	e0bffd17 	ldw	r2,-12(fp)
 402cf9c:	10001926 	beq	r2,zero,402d004 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 402cfa0:	e0bffd17 	ldw	r2,-12(fp)
 402cfa4:	10800017 	ldw	r2,0(r2)
 402cfa8:	10800417 	ldw	r2,16(r2)
 402cfac:	10000626 	beq	r2,zero,402cfc8 <close+0x6c>
 402cfb0:	e0bffd17 	ldw	r2,-12(fp)
 402cfb4:	10800017 	ldw	r2,0(r2)
 402cfb8:	10800417 	ldw	r2,16(r2)
 402cfbc:	e13ffd17 	ldw	r4,-12(fp)
 402cfc0:	103ee83a 	callr	r2
 402cfc4:	00000106 	br	402cfcc <close+0x70>
 402cfc8:	0005883a 	mov	r2,zero
 402cfcc:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 402cfd0:	e13fff17 	ldw	r4,-4(fp)
 402cfd4:	402d9040 	call	402d904 <alt_release_fd>
    if (rval < 0)
 402cfd8:	e0bffe17 	ldw	r2,-8(fp)
 402cfdc:	1000070e 	bge	r2,zero,402cffc <close+0xa0>
    {
      ALT_ERRNO = -rval;
 402cfe0:	402cf200 	call	402cf20 <alt_get_errno>
 402cfe4:	1007883a 	mov	r3,r2
 402cfe8:	e0bffe17 	ldw	r2,-8(fp)
 402cfec:	0085c83a 	sub	r2,zero,r2
 402cff0:	18800015 	stw	r2,0(r3)
      return -1;
 402cff4:	00bfffc4 	movi	r2,-1
 402cff8:	00000706 	br	402d018 <close+0xbc>
    }
    return 0;
 402cffc:	0005883a 	mov	r2,zero
 402d000:	00000506 	br	402d018 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 402d004:	402cf200 	call	402cf20 <alt_get_errno>
 402d008:	1007883a 	mov	r3,r2
 402d00c:	00801444 	movi	r2,81
 402d010:	18800015 	stw	r2,0(r3)
    return -1;
 402d014:	00bfffc4 	movi	r2,-1
  }
}
 402d018:	e037883a 	mov	sp,fp
 402d01c:	dfc00117 	ldw	ra,4(sp)
 402d020:	df000017 	ldw	fp,0(sp)
 402d024:	dec00204 	addi	sp,sp,8
 402d028:	f800283a 	ret

0402d02c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 402d02c:	defffe04 	addi	sp,sp,-8
 402d030:	df000115 	stw	fp,4(sp)
 402d034:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 402d038:	e03fff15 	stw	zero,-4(fp)
 402d03c:	00000506 	br	402d054 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 402d040:	e0bfff17 	ldw	r2,-4(fp)
 402d044:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 402d048:	e0bfff17 	ldw	r2,-4(fp)
 402d04c:	10800804 	addi	r2,r2,32
 402d050:	e0bfff15 	stw	r2,-4(fp)
 402d054:	e0bfff17 	ldw	r2,-4(fp)
 402d058:	10820030 	cmpltui	r2,r2,2048
 402d05c:	103ff81e 	bne	r2,zero,402d040 <__flash_rwdata_start+0xffffcb64>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 402d060:	0001883a 	nop
 402d064:	e037883a 	mov	sp,fp
 402d068:	df000017 	ldw	fp,0(sp)
 402d06c:	dec00104 	addi	sp,sp,4
 402d070:	f800283a 	ret

0402d074 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 402d074:	defffc04 	addi	sp,sp,-16
 402d078:	df000315 	stw	fp,12(sp)
 402d07c:	df000304 	addi	fp,sp,12
 402d080:	e13ffd15 	stw	r4,-12(fp)
 402d084:	e17ffe15 	stw	r5,-8(fp)
 402d088:	e1bfff15 	stw	r6,-4(fp)
  return len;
 402d08c:	e0bfff17 	ldw	r2,-4(fp)
}
 402d090:	e037883a 	mov	sp,fp
 402d094:	df000017 	ldw	fp,0(sp)
 402d098:	dec00104 	addi	sp,sp,4
 402d09c:	f800283a 	ret

0402d0a0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 402d0a0:	defffe04 	addi	sp,sp,-8
 402d0a4:	dfc00115 	stw	ra,4(sp)
 402d0a8:	df000015 	stw	fp,0(sp)
 402d0ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 402d0b0:	d0a00b17 	ldw	r2,-32724(gp)
 402d0b4:	10000326 	beq	r2,zero,402d0c4 <alt_get_errno+0x24>
 402d0b8:	d0a00b17 	ldw	r2,-32724(gp)
 402d0bc:	103ee83a 	callr	r2
 402d0c0:	00000106 	br	402d0c8 <alt_get_errno+0x28>
 402d0c4:	d0a01b04 	addi	r2,gp,-32660
}
 402d0c8:	e037883a 	mov	sp,fp
 402d0cc:	dfc00117 	ldw	ra,4(sp)
 402d0d0:	df000017 	ldw	fp,0(sp)
 402d0d4:	dec00204 	addi	sp,sp,8
 402d0d8:	f800283a 	ret

0402d0dc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 402d0dc:	defffb04 	addi	sp,sp,-20
 402d0e0:	dfc00415 	stw	ra,16(sp)
 402d0e4:	df000315 	stw	fp,12(sp)
 402d0e8:	df000304 	addi	fp,sp,12
 402d0ec:	e13ffe15 	stw	r4,-8(fp)
 402d0f0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 402d0f4:	e0bffe17 	ldw	r2,-8(fp)
 402d0f8:	10000616 	blt	r2,zero,402d114 <fstat+0x38>
 402d0fc:	e0bffe17 	ldw	r2,-8(fp)
 402d100:	10c00324 	muli	r3,r2,12
 402d104:	00800034 	movhi	r2,0
 402d108:	10833204 	addi	r2,r2,3272
 402d10c:	1885883a 	add	r2,r3,r2
 402d110:	00000106 	br	402d118 <fstat+0x3c>
 402d114:	0005883a 	mov	r2,zero
 402d118:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 402d11c:	e0bffd17 	ldw	r2,-12(fp)
 402d120:	10001026 	beq	r2,zero,402d164 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 402d124:	e0bffd17 	ldw	r2,-12(fp)
 402d128:	10800017 	ldw	r2,0(r2)
 402d12c:	10800817 	ldw	r2,32(r2)
 402d130:	10000726 	beq	r2,zero,402d150 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 402d134:	e0bffd17 	ldw	r2,-12(fp)
 402d138:	10800017 	ldw	r2,0(r2)
 402d13c:	10800817 	ldw	r2,32(r2)
 402d140:	e17fff17 	ldw	r5,-4(fp)
 402d144:	e13ffd17 	ldw	r4,-12(fp)
 402d148:	103ee83a 	callr	r2
 402d14c:	00000a06 	br	402d178 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 402d150:	e0bfff17 	ldw	r2,-4(fp)
 402d154:	00c80004 	movi	r3,8192
 402d158:	10c00115 	stw	r3,4(r2)
      return 0;
 402d15c:	0005883a 	mov	r2,zero
 402d160:	00000506 	br	402d178 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 402d164:	402d0a00 	call	402d0a0 <alt_get_errno>
 402d168:	1007883a 	mov	r3,r2
 402d16c:	00801444 	movi	r2,81
 402d170:	18800015 	stw	r2,0(r3)
    return -1;
 402d174:	00bfffc4 	movi	r2,-1
  }
}
 402d178:	e037883a 	mov	sp,fp
 402d17c:	dfc00117 	ldw	ra,4(sp)
 402d180:	df000017 	ldw	fp,0(sp)
 402d184:	dec00204 	addi	sp,sp,8
 402d188:	f800283a 	ret

0402d18c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 402d18c:	defff904 	addi	sp,sp,-28
 402d190:	dfc00615 	stw	ra,24(sp)
 402d194:	df000515 	stw	fp,20(sp)
 402d198:	df000504 	addi	fp,sp,20
 402d19c:	e13ffc15 	stw	r4,-16(fp)
 402d1a0:	e17ffd15 	stw	r5,-12(fp)
 402d1a4:	e1bffe15 	stw	r6,-8(fp)
 402d1a8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 402d1ac:	e0800217 	ldw	r2,8(fp)
 402d1b0:	d8800015 	stw	r2,0(sp)
 402d1b4:	e1ffff17 	ldw	r7,-4(fp)
 402d1b8:	e1bffe17 	ldw	r6,-8(fp)
 402d1bc:	e17ffd17 	ldw	r5,-12(fp)
 402d1c0:	e13ffc17 	ldw	r4,-16(fp)
 402d1c4:	402d33c0 	call	402d33c <alt_iic_isr_register>
}  
 402d1c8:	e037883a 	mov	sp,fp
 402d1cc:	dfc00117 	ldw	ra,4(sp)
 402d1d0:	df000017 	ldw	fp,0(sp)
 402d1d4:	dec00204 	addi	sp,sp,8
 402d1d8:	f800283a 	ret

0402d1dc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 402d1dc:	defff904 	addi	sp,sp,-28
 402d1e0:	df000615 	stw	fp,24(sp)
 402d1e4:	df000604 	addi	fp,sp,24
 402d1e8:	e13ffe15 	stw	r4,-8(fp)
 402d1ec:	e17fff15 	stw	r5,-4(fp)
 402d1f0:	e0bfff17 	ldw	r2,-4(fp)
 402d1f4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402d1f8:	0005303a 	rdctl	r2,status
 402d1fc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402d200:	e0fffb17 	ldw	r3,-20(fp)
 402d204:	00bfff84 	movi	r2,-2
 402d208:	1884703a 	and	r2,r3,r2
 402d20c:	1001703a 	wrctl	status,r2
  
  return context;
 402d210:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 402d214:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 402d218:	00c00044 	movi	r3,1
 402d21c:	e0bffa17 	ldw	r2,-24(fp)
 402d220:	1884983a 	sll	r2,r3,r2
 402d224:	1007883a 	mov	r3,r2
 402d228:	d0a01c17 	ldw	r2,-32656(gp)
 402d22c:	1884b03a 	or	r2,r3,r2
 402d230:	d0a01c15 	stw	r2,-32656(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 402d234:	d0a01c17 	ldw	r2,-32656(gp)
 402d238:	100170fa 	wrctl	ienable,r2
 402d23c:	e0bffc17 	ldw	r2,-16(fp)
 402d240:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402d244:	e0bffd17 	ldw	r2,-12(fp)
 402d248:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 402d24c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 402d250:	0001883a 	nop
}
 402d254:	e037883a 	mov	sp,fp
 402d258:	df000017 	ldw	fp,0(sp)
 402d25c:	dec00104 	addi	sp,sp,4
 402d260:	f800283a 	ret

0402d264 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 402d264:	defff904 	addi	sp,sp,-28
 402d268:	df000615 	stw	fp,24(sp)
 402d26c:	df000604 	addi	fp,sp,24
 402d270:	e13ffe15 	stw	r4,-8(fp)
 402d274:	e17fff15 	stw	r5,-4(fp)
 402d278:	e0bfff17 	ldw	r2,-4(fp)
 402d27c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402d280:	0005303a 	rdctl	r2,status
 402d284:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402d288:	e0fffb17 	ldw	r3,-20(fp)
 402d28c:	00bfff84 	movi	r2,-2
 402d290:	1884703a 	and	r2,r3,r2
 402d294:	1001703a 	wrctl	status,r2
  
  return context;
 402d298:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 402d29c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 402d2a0:	00c00044 	movi	r3,1
 402d2a4:	e0bffa17 	ldw	r2,-24(fp)
 402d2a8:	1884983a 	sll	r2,r3,r2
 402d2ac:	0084303a 	nor	r2,zero,r2
 402d2b0:	1007883a 	mov	r3,r2
 402d2b4:	d0a01c17 	ldw	r2,-32656(gp)
 402d2b8:	1884703a 	and	r2,r3,r2
 402d2bc:	d0a01c15 	stw	r2,-32656(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 402d2c0:	d0a01c17 	ldw	r2,-32656(gp)
 402d2c4:	100170fa 	wrctl	ienable,r2
 402d2c8:	e0bffc17 	ldw	r2,-16(fp)
 402d2cc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402d2d0:	e0bffd17 	ldw	r2,-12(fp)
 402d2d4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 402d2d8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 402d2dc:	0001883a 	nop
}
 402d2e0:	e037883a 	mov	sp,fp
 402d2e4:	df000017 	ldw	fp,0(sp)
 402d2e8:	dec00104 	addi	sp,sp,4
 402d2ec:	f800283a 	ret

0402d2f0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 402d2f0:	defffc04 	addi	sp,sp,-16
 402d2f4:	df000315 	stw	fp,12(sp)
 402d2f8:	df000304 	addi	fp,sp,12
 402d2fc:	e13ffe15 	stw	r4,-8(fp)
 402d300:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 402d304:	000530fa 	rdctl	r2,ienable
 402d308:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 402d30c:	00c00044 	movi	r3,1
 402d310:	e0bfff17 	ldw	r2,-4(fp)
 402d314:	1884983a 	sll	r2,r3,r2
 402d318:	1007883a 	mov	r3,r2
 402d31c:	e0bffd17 	ldw	r2,-12(fp)
 402d320:	1884703a 	and	r2,r3,r2
 402d324:	1004c03a 	cmpne	r2,r2,zero
 402d328:	10803fcc 	andi	r2,r2,255
}
 402d32c:	e037883a 	mov	sp,fp
 402d330:	df000017 	ldw	fp,0(sp)
 402d334:	dec00104 	addi	sp,sp,4
 402d338:	f800283a 	ret

0402d33c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 402d33c:	defff504 	addi	sp,sp,-44
 402d340:	dfc00a15 	stw	ra,40(sp)
 402d344:	df000915 	stw	fp,36(sp)
 402d348:	df000904 	addi	fp,sp,36
 402d34c:	e13ffc15 	stw	r4,-16(fp)
 402d350:	e17ffd15 	stw	r5,-12(fp)
 402d354:	e1bffe15 	stw	r6,-8(fp)
 402d358:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 402d35c:	00bffa84 	movi	r2,-22
 402d360:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 402d364:	e0bffd17 	ldw	r2,-12(fp)
 402d368:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 402d36c:	e0bff817 	ldw	r2,-32(fp)
 402d370:	10800808 	cmpgei	r2,r2,32
 402d374:	1000271e 	bne	r2,zero,402d414 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402d378:	0005303a 	rdctl	r2,status
 402d37c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402d380:	e0fffb17 	ldw	r3,-20(fp)
 402d384:	00bfff84 	movi	r2,-2
 402d388:	1884703a 	and	r2,r3,r2
 402d38c:	1001703a 	wrctl	status,r2
  
  return context;
 402d390:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 402d394:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 402d398:	00800034 	movhi	r2,0
 402d39c:	1087fb04 	addi	r2,r2,8172
 402d3a0:	e0fff817 	ldw	r3,-32(fp)
 402d3a4:	180690fa 	slli	r3,r3,3
 402d3a8:	10c5883a 	add	r2,r2,r3
 402d3ac:	e0fffe17 	ldw	r3,-8(fp)
 402d3b0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 402d3b4:	00800034 	movhi	r2,0
 402d3b8:	1087fb04 	addi	r2,r2,8172
 402d3bc:	e0fff817 	ldw	r3,-32(fp)
 402d3c0:	180690fa 	slli	r3,r3,3
 402d3c4:	10c5883a 	add	r2,r2,r3
 402d3c8:	10800104 	addi	r2,r2,4
 402d3cc:	e0ffff17 	ldw	r3,-4(fp)
 402d3d0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 402d3d4:	e0bffe17 	ldw	r2,-8(fp)
 402d3d8:	10000526 	beq	r2,zero,402d3f0 <alt_iic_isr_register+0xb4>
 402d3dc:	e0bff817 	ldw	r2,-32(fp)
 402d3e0:	100b883a 	mov	r5,r2
 402d3e4:	e13ffc17 	ldw	r4,-16(fp)
 402d3e8:	402d1dc0 	call	402d1dc <alt_ic_irq_enable>
 402d3ec:	00000406 	br	402d400 <alt_iic_isr_register+0xc4>
 402d3f0:	e0bff817 	ldw	r2,-32(fp)
 402d3f4:	100b883a 	mov	r5,r2
 402d3f8:	e13ffc17 	ldw	r4,-16(fp)
 402d3fc:	402d2640 	call	402d264 <alt_ic_irq_disable>
 402d400:	e0bff715 	stw	r2,-36(fp)
 402d404:	e0bffa17 	ldw	r2,-24(fp)
 402d408:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402d40c:	e0bff917 	ldw	r2,-28(fp)
 402d410:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 402d414:	e0bff717 	ldw	r2,-36(fp)
}
 402d418:	e037883a 	mov	sp,fp
 402d41c:	dfc00117 	ldw	ra,4(sp)
 402d420:	df000017 	ldw	fp,0(sp)
 402d424:	dec00204 	addi	sp,sp,8
 402d428:	f800283a 	ret

0402d42c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 402d42c:	defffe04 	addi	sp,sp,-8
 402d430:	dfc00115 	stw	ra,4(sp)
 402d434:	df000015 	stw	fp,0(sp)
 402d438:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 402d43c:	d0a00b17 	ldw	r2,-32724(gp)
 402d440:	10000326 	beq	r2,zero,402d450 <alt_get_errno+0x24>
 402d444:	d0a00b17 	ldw	r2,-32724(gp)
 402d448:	103ee83a 	callr	r2
 402d44c:	00000106 	br	402d454 <alt_get_errno+0x28>
 402d450:	d0a01b04 	addi	r2,gp,-32660
}
 402d454:	e037883a 	mov	sp,fp
 402d458:	dfc00117 	ldw	ra,4(sp)
 402d45c:	df000017 	ldw	fp,0(sp)
 402d460:	dec00204 	addi	sp,sp,8
 402d464:	f800283a 	ret

0402d468 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 402d468:	deffed04 	addi	sp,sp,-76
 402d46c:	dfc01215 	stw	ra,72(sp)
 402d470:	df001115 	stw	fp,68(sp)
 402d474:	df001104 	addi	fp,sp,68
 402d478:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 402d47c:	e0bfff17 	ldw	r2,-4(fp)
 402d480:	10000616 	blt	r2,zero,402d49c <isatty+0x34>
 402d484:	e0bfff17 	ldw	r2,-4(fp)
 402d488:	10c00324 	muli	r3,r2,12
 402d48c:	00800034 	movhi	r2,0
 402d490:	10833204 	addi	r2,r2,3272
 402d494:	1885883a 	add	r2,r3,r2
 402d498:	00000106 	br	402d4a0 <isatty+0x38>
 402d49c:	0005883a 	mov	r2,zero
 402d4a0:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 402d4a4:	e0bfef17 	ldw	r2,-68(fp)
 402d4a8:	10000e26 	beq	r2,zero,402d4e4 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 402d4ac:	e0bfef17 	ldw	r2,-68(fp)
 402d4b0:	10800017 	ldw	r2,0(r2)
 402d4b4:	10800817 	ldw	r2,32(r2)
 402d4b8:	1000021e 	bne	r2,zero,402d4c4 <isatty+0x5c>
    {
      return 1;
 402d4bc:	00800044 	movi	r2,1
 402d4c0:	00000d06 	br	402d4f8 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 402d4c4:	e0bff004 	addi	r2,fp,-64
 402d4c8:	100b883a 	mov	r5,r2
 402d4cc:	e13fff17 	ldw	r4,-4(fp)
 402d4d0:	402d0dc0 	call	402d0dc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 402d4d4:	e0bff117 	ldw	r2,-60(fp)
 402d4d8:	10880020 	cmpeqi	r2,r2,8192
 402d4dc:	10803fcc 	andi	r2,r2,255
 402d4e0:	00000506 	br	402d4f8 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 402d4e4:	402d42c0 	call	402d42c <alt_get_errno>
 402d4e8:	1007883a 	mov	r3,r2
 402d4ec:	00801444 	movi	r2,81
 402d4f0:	18800015 	stw	r2,0(r3)
    return 0;
 402d4f4:	0005883a 	mov	r2,zero
  }
}
 402d4f8:	e037883a 	mov	sp,fp
 402d4fc:	dfc00117 	ldw	ra,4(sp)
 402d500:	df000017 	ldw	fp,0(sp)
 402d504:	dec00204 	addi	sp,sp,8
 402d508:	f800283a 	ret

0402d50c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 402d50c:	defffc04 	addi	sp,sp,-16
 402d510:	df000315 	stw	fp,12(sp)
 402d514:	df000304 	addi	fp,sp,12
 402d518:	e13ffd15 	stw	r4,-12(fp)
 402d51c:	e17ffe15 	stw	r5,-8(fp)
 402d520:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 402d524:	e0fffe17 	ldw	r3,-8(fp)
 402d528:	e0bffd17 	ldw	r2,-12(fp)
 402d52c:	18800c26 	beq	r3,r2,402d560 <alt_load_section+0x54>
  {
    while( to != end )
 402d530:	00000806 	br	402d554 <alt_load_section+0x48>
    {
      *to++ = *from++;
 402d534:	e0bffe17 	ldw	r2,-8(fp)
 402d538:	10c00104 	addi	r3,r2,4
 402d53c:	e0fffe15 	stw	r3,-8(fp)
 402d540:	e0fffd17 	ldw	r3,-12(fp)
 402d544:	19000104 	addi	r4,r3,4
 402d548:	e13ffd15 	stw	r4,-12(fp)
 402d54c:	18c00017 	ldw	r3,0(r3)
 402d550:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 402d554:	e0fffe17 	ldw	r3,-8(fp)
 402d558:	e0bfff17 	ldw	r2,-4(fp)
 402d55c:	18bff51e 	bne	r3,r2,402d534 <__flash_rwdata_start+0xffffd058>
    {
      *to++ = *from++;
    }
  }
}
 402d560:	0001883a 	nop
 402d564:	e037883a 	mov	sp,fp
 402d568:	df000017 	ldw	fp,0(sp)
 402d56c:	dec00104 	addi	sp,sp,4
 402d570:	f800283a 	ret

0402d574 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 402d574:	defffe04 	addi	sp,sp,-8
 402d578:	dfc00115 	stw	ra,4(sp)
 402d57c:	df000015 	stw	fp,0(sp)
 402d580:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 402d584:	01800034 	movhi	r6,0
 402d588:	3187e004 	addi	r6,r6,8064
 402d58c:	01400034 	movhi	r5,0
 402d590:	2940ff04 	addi	r5,r5,1020
 402d594:	010100f4 	movhi	r4,1027
 402d598:	21013704 	addi	r4,r4,1244
 402d59c:	402d50c0 	call	402d50c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 402d5a0:	018100b4 	movhi	r6,1026
 402d5a4:	31809104 	addi	r6,r6,580
 402d5a8:	014100b4 	movhi	r5,1026
 402d5ac:	29400804 	addi	r5,r5,32
 402d5b0:	010100b4 	movhi	r4,1026
 402d5b4:	21000804 	addi	r4,r4,32
 402d5b8:	402d50c0 	call	402d50c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 402d5bc:	01800034 	movhi	r6,0
 402d5c0:	3180ff04 	addi	r6,r6,1020
 402d5c4:	01400034 	movhi	r5,0
 402d5c8:	29400004 	addi	r5,r5,0
 402d5cc:	010100f4 	movhi	r4,1027
 402d5d0:	21003804 	addi	r4,r4,224
 402d5d4:	402d50c0 	call	402d50c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 402d5d8:	402d02c0 	call	402d02c <alt_dcache_flush_all>
  alt_icache_flush_all();
 402d5dc:	402f4e40 	call	402f4e4 <alt_icache_flush_all>
}
 402d5e0:	0001883a 	nop
 402d5e4:	e037883a 	mov	sp,fp
 402d5e8:	dfc00117 	ldw	ra,4(sp)
 402d5ec:	df000017 	ldw	fp,0(sp)
 402d5f0:	dec00204 	addi	sp,sp,8
 402d5f4:	f800283a 	ret

0402d5f8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 402d5f8:	defffe04 	addi	sp,sp,-8
 402d5fc:	dfc00115 	stw	ra,4(sp)
 402d600:	df000015 	stw	fp,0(sp)
 402d604:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 402d608:	d0a00b17 	ldw	r2,-32724(gp)
 402d60c:	10000326 	beq	r2,zero,402d61c <alt_get_errno+0x24>
 402d610:	d0a00b17 	ldw	r2,-32724(gp)
 402d614:	103ee83a 	callr	r2
 402d618:	00000106 	br	402d620 <alt_get_errno+0x28>
 402d61c:	d0a01b04 	addi	r2,gp,-32660
}
 402d620:	e037883a 	mov	sp,fp
 402d624:	dfc00117 	ldw	ra,4(sp)
 402d628:	df000017 	ldw	fp,0(sp)
 402d62c:	dec00204 	addi	sp,sp,8
 402d630:	f800283a 	ret

0402d634 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 402d634:	defff904 	addi	sp,sp,-28
 402d638:	dfc00615 	stw	ra,24(sp)
 402d63c:	df000515 	stw	fp,20(sp)
 402d640:	df000504 	addi	fp,sp,20
 402d644:	e13ffd15 	stw	r4,-12(fp)
 402d648:	e17ffe15 	stw	r5,-8(fp)
 402d64c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 402d650:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 402d654:	e0bffd17 	ldw	r2,-12(fp)
 402d658:	10000616 	blt	r2,zero,402d674 <lseek+0x40>
 402d65c:	e0bffd17 	ldw	r2,-12(fp)
 402d660:	10c00324 	muli	r3,r2,12
 402d664:	00800034 	movhi	r2,0
 402d668:	10833204 	addi	r2,r2,3272
 402d66c:	1885883a 	add	r2,r3,r2
 402d670:	00000106 	br	402d678 <lseek+0x44>
 402d674:	0005883a 	mov	r2,zero
 402d678:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 402d67c:	e0bffc17 	ldw	r2,-16(fp)
 402d680:	10001026 	beq	r2,zero,402d6c4 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 402d684:	e0bffc17 	ldw	r2,-16(fp)
 402d688:	10800017 	ldw	r2,0(r2)
 402d68c:	10800717 	ldw	r2,28(r2)
 402d690:	10000926 	beq	r2,zero,402d6b8 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 402d694:	e0bffc17 	ldw	r2,-16(fp)
 402d698:	10800017 	ldw	r2,0(r2)
 402d69c:	10800717 	ldw	r2,28(r2)
 402d6a0:	e1bfff17 	ldw	r6,-4(fp)
 402d6a4:	e17ffe17 	ldw	r5,-8(fp)
 402d6a8:	e13ffc17 	ldw	r4,-16(fp)
 402d6ac:	103ee83a 	callr	r2
 402d6b0:	e0bffb15 	stw	r2,-20(fp)
 402d6b4:	00000506 	br	402d6cc <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 402d6b8:	00bfde84 	movi	r2,-134
 402d6bc:	e0bffb15 	stw	r2,-20(fp)
 402d6c0:	00000206 	br	402d6cc <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 402d6c4:	00bfebc4 	movi	r2,-81
 402d6c8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 402d6cc:	e0bffb17 	ldw	r2,-20(fp)
 402d6d0:	1000070e 	bge	r2,zero,402d6f0 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 402d6d4:	402d5f80 	call	402d5f8 <alt_get_errno>
 402d6d8:	1007883a 	mov	r3,r2
 402d6dc:	e0bffb17 	ldw	r2,-20(fp)
 402d6e0:	0085c83a 	sub	r2,zero,r2
 402d6e4:	18800015 	stw	r2,0(r3)
    rc = -1;
 402d6e8:	00bfffc4 	movi	r2,-1
 402d6ec:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 402d6f0:	e0bffb17 	ldw	r2,-20(fp)
}
 402d6f4:	e037883a 	mov	sp,fp
 402d6f8:	dfc00117 	ldw	ra,4(sp)
 402d6fc:	df000017 	ldw	fp,0(sp)
 402d700:	dec00204 	addi	sp,sp,8
 402d704:	f800283a 	ret

0402d708 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 402d708:	defffd04 	addi	sp,sp,-12
 402d70c:	dfc00215 	stw	ra,8(sp)
 402d710:	df000115 	stw	fp,4(sp)
 402d714:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 402d718:	0009883a 	mov	r4,zero
 402d71c:	402dbb00 	call	402dbb0 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 402d720:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 402d724:	402dbe80 	call	402dbe8 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 402d728:	01800034 	movhi	r6,0
 402d72c:	3180e304 	addi	r6,r6,908
 402d730:	01400034 	movhi	r5,0
 402d734:	2940e304 	addi	r5,r5,908
 402d738:	01000034 	movhi	r4,0
 402d73c:	2100e304 	addi	r4,r4,908
 402d740:	402f6780 	call	402f678 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 402d744:	402f3940 	call	402f394 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 402d748:	010100f4 	movhi	r4,1027
 402d74c:	213cfd04 	addi	r4,r4,-3084
 402d750:	402fd4c0 	call	402fd4c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 402d754:	d0a01d17 	ldw	r2,-32652(gp)
 402d758:	d0e01e17 	ldw	r3,-32648(gp)
 402d75c:	d1201f17 	ldw	r4,-32644(gp)
 402d760:	200d883a 	mov	r6,r4
 402d764:	180b883a 	mov	r5,r3
 402d768:	1009883a 	mov	r4,r2
 402d76c:	40205c40 	call	40205c4 <main>
 402d770:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 402d774:	01000044 	movi	r4,1
 402d778:	402cf5c0 	call	402cf5c <close>
  exit (result);
 402d77c:	e13fff17 	ldw	r4,-4(fp)
 402d780:	402fd600 	call	402fd60 <exit>

0402d784 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 402d784:	defffe04 	addi	sp,sp,-8
 402d788:	df000115 	stw	fp,4(sp)
 402d78c:	df000104 	addi	fp,sp,4
 402d790:	e13fff15 	stw	r4,-4(fp)
}
 402d794:	0001883a 	nop
 402d798:	e037883a 	mov	sp,fp
 402d79c:	df000017 	ldw	fp,0(sp)
 402d7a0:	dec00104 	addi	sp,sp,4
 402d7a4:	f800283a 	ret

0402d7a8 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 402d7a8:	defffe04 	addi	sp,sp,-8
 402d7ac:	df000115 	stw	fp,4(sp)
 402d7b0:	df000104 	addi	fp,sp,4
 402d7b4:	e13fff15 	stw	r4,-4(fp)
}
 402d7b8:	0001883a 	nop
 402d7bc:	e037883a 	mov	sp,fp
 402d7c0:	df000017 	ldw	fp,0(sp)
 402d7c4:	dec00104 	addi	sp,sp,4
 402d7c8:	f800283a 	ret

0402d7cc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 402d7cc:	defffe04 	addi	sp,sp,-8
 402d7d0:	dfc00115 	stw	ra,4(sp)
 402d7d4:	df000015 	stw	fp,0(sp)
 402d7d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 402d7dc:	d0a00b17 	ldw	r2,-32724(gp)
 402d7e0:	10000326 	beq	r2,zero,402d7f0 <alt_get_errno+0x24>
 402d7e4:	d0a00b17 	ldw	r2,-32724(gp)
 402d7e8:	103ee83a 	callr	r2
 402d7ec:	00000106 	br	402d7f4 <alt_get_errno+0x28>
 402d7f0:	d0a01b04 	addi	r2,gp,-32660
}
 402d7f4:	e037883a 	mov	sp,fp
 402d7f8:	dfc00117 	ldw	ra,4(sp)
 402d7fc:	df000017 	ldw	fp,0(sp)
 402d800:	dec00204 	addi	sp,sp,8
 402d804:	f800283a 	ret

0402d808 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 402d808:	defff904 	addi	sp,sp,-28
 402d80c:	dfc00615 	stw	ra,24(sp)
 402d810:	df000515 	stw	fp,20(sp)
 402d814:	df000504 	addi	fp,sp,20
 402d818:	e13ffd15 	stw	r4,-12(fp)
 402d81c:	e17ffe15 	stw	r5,-8(fp)
 402d820:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 402d824:	e0bffd17 	ldw	r2,-12(fp)
 402d828:	10000616 	blt	r2,zero,402d844 <read+0x3c>
 402d82c:	e0bffd17 	ldw	r2,-12(fp)
 402d830:	10c00324 	muli	r3,r2,12
 402d834:	00800034 	movhi	r2,0
 402d838:	10833204 	addi	r2,r2,3272
 402d83c:	1885883a 	add	r2,r3,r2
 402d840:	00000106 	br	402d848 <read+0x40>
 402d844:	0005883a 	mov	r2,zero
 402d848:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 402d84c:	e0bffb17 	ldw	r2,-20(fp)
 402d850:	10002226 	beq	r2,zero,402d8dc <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 402d854:	e0bffb17 	ldw	r2,-20(fp)
 402d858:	10800217 	ldw	r2,8(r2)
 402d85c:	108000cc 	andi	r2,r2,3
 402d860:	10800060 	cmpeqi	r2,r2,1
 402d864:	1000181e 	bne	r2,zero,402d8c8 <read+0xc0>
        (fd->dev->read))
 402d868:	e0bffb17 	ldw	r2,-20(fp)
 402d86c:	10800017 	ldw	r2,0(r2)
 402d870:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 402d874:	10001426 	beq	r2,zero,402d8c8 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 402d878:	e0bffb17 	ldw	r2,-20(fp)
 402d87c:	10800017 	ldw	r2,0(r2)
 402d880:	10800517 	ldw	r2,20(r2)
 402d884:	e0ffff17 	ldw	r3,-4(fp)
 402d888:	180d883a 	mov	r6,r3
 402d88c:	e17ffe17 	ldw	r5,-8(fp)
 402d890:	e13ffb17 	ldw	r4,-20(fp)
 402d894:	103ee83a 	callr	r2
 402d898:	e0bffc15 	stw	r2,-16(fp)
 402d89c:	e0bffc17 	ldw	r2,-16(fp)
 402d8a0:	1000070e 	bge	r2,zero,402d8c0 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 402d8a4:	402d7cc0 	call	402d7cc <alt_get_errno>
 402d8a8:	1007883a 	mov	r3,r2
 402d8ac:	e0bffc17 	ldw	r2,-16(fp)
 402d8b0:	0085c83a 	sub	r2,zero,r2
 402d8b4:	18800015 	stw	r2,0(r3)
          return -1;
 402d8b8:	00bfffc4 	movi	r2,-1
 402d8bc:	00000c06 	br	402d8f0 <read+0xe8>
        }
        return rval;
 402d8c0:	e0bffc17 	ldw	r2,-16(fp)
 402d8c4:	00000a06 	br	402d8f0 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 402d8c8:	402d7cc0 	call	402d7cc <alt_get_errno>
 402d8cc:	1007883a 	mov	r3,r2
 402d8d0:	00800344 	movi	r2,13
 402d8d4:	18800015 	stw	r2,0(r3)
 402d8d8:	00000406 	br	402d8ec <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 402d8dc:	402d7cc0 	call	402d7cc <alt_get_errno>
 402d8e0:	1007883a 	mov	r3,r2
 402d8e4:	00801444 	movi	r2,81
 402d8e8:	18800015 	stw	r2,0(r3)
  }
  return -1;
 402d8ec:	00bfffc4 	movi	r2,-1
}
 402d8f0:	e037883a 	mov	sp,fp
 402d8f4:	dfc00117 	ldw	ra,4(sp)
 402d8f8:	df000017 	ldw	fp,0(sp)
 402d8fc:	dec00204 	addi	sp,sp,8
 402d900:	f800283a 	ret

0402d904 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 402d904:	defffe04 	addi	sp,sp,-8
 402d908:	df000115 	stw	fp,4(sp)
 402d90c:	df000104 	addi	fp,sp,4
 402d910:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 402d914:	e0bfff17 	ldw	r2,-4(fp)
 402d918:	108000d0 	cmplti	r2,r2,3
 402d91c:	10000d1e 	bne	r2,zero,402d954 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 402d920:	00800034 	movhi	r2,0
 402d924:	10833204 	addi	r2,r2,3272
 402d928:	e0ffff17 	ldw	r3,-4(fp)
 402d92c:	18c00324 	muli	r3,r3,12
 402d930:	10c5883a 	add	r2,r2,r3
 402d934:	10800204 	addi	r2,r2,8
 402d938:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 402d93c:	00800034 	movhi	r2,0
 402d940:	10833204 	addi	r2,r2,3272
 402d944:	e0ffff17 	ldw	r3,-4(fp)
 402d948:	18c00324 	muli	r3,r3,12
 402d94c:	10c5883a 	add	r2,r2,r3
 402d950:	10000015 	stw	zero,0(r2)
  }
}
 402d954:	0001883a 	nop
 402d958:	e037883a 	mov	sp,fp
 402d95c:	df000017 	ldw	fp,0(sp)
 402d960:	dec00104 	addi	sp,sp,4
 402d964:	f800283a 	ret

0402d968 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 402d968:	defff904 	addi	sp,sp,-28
 402d96c:	df000615 	stw	fp,24(sp)
 402d970:	df000604 	addi	fp,sp,24
 402d974:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402d978:	0005303a 	rdctl	r2,status
 402d97c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402d980:	e0fffe17 	ldw	r3,-8(fp)
 402d984:	00bfff84 	movi	r2,-2
 402d988:	1884703a 	and	r2,r3,r2
 402d98c:	1001703a 	wrctl	status,r2
  
  return context;
 402d990:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 402d994:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 402d998:	d0a00d17 	ldw	r2,-32716(gp)
 402d99c:	10c000c4 	addi	r3,r2,3
 402d9a0:	00bfff04 	movi	r2,-4
 402d9a4:	1884703a 	and	r2,r3,r2
 402d9a8:	d0a00d15 	stw	r2,-32716(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 402d9ac:	d0e00d17 	ldw	r3,-32716(gp)
 402d9b0:	e0bfff17 	ldw	r2,-4(fp)
 402d9b4:	1887883a 	add	r3,r3,r2
 402d9b8:	00810034 	movhi	r2,1024
 402d9bc:	10800004 	addi	r2,r2,0
 402d9c0:	10c0062e 	bgeu	r2,r3,402d9dc <sbrk+0x74>
 402d9c4:	e0bffb17 	ldw	r2,-20(fp)
 402d9c8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402d9cc:	e0bffa17 	ldw	r2,-24(fp)
 402d9d0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 402d9d4:	00bfffc4 	movi	r2,-1
 402d9d8:	00000b06 	br	402da08 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 402d9dc:	d0a00d17 	ldw	r2,-32716(gp)
 402d9e0:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 402d9e4:	d0e00d17 	ldw	r3,-32716(gp)
 402d9e8:	e0bfff17 	ldw	r2,-4(fp)
 402d9ec:	1885883a 	add	r2,r3,r2
 402d9f0:	d0a00d15 	stw	r2,-32716(gp)
 402d9f4:	e0bffb17 	ldw	r2,-20(fp)
 402d9f8:	e0bffc15 	stw	r2,-16(fp)
 402d9fc:	e0bffc17 	ldw	r2,-16(fp)
 402da00:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 402da04:	e0bffd17 	ldw	r2,-12(fp)
} 
 402da08:	e037883a 	mov	sp,fp
 402da0c:	df000017 	ldw	fp,0(sp)
 402da10:	dec00104 	addi	sp,sp,4
 402da14:	f800283a 	ret

0402da18 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 402da18:	defffd04 	addi	sp,sp,-12
 402da1c:	dfc00215 	stw	ra,8(sp)
 402da20:	df000115 	stw	fp,4(sp)
 402da24:	df000104 	addi	fp,sp,4
 402da28:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 402da2c:	e13fff17 	ldw	r4,-4(fp)
 402da30:	402f15c0 	call	402f15c <alt_busy_sleep>
}
 402da34:	e037883a 	mov	sp,fp
 402da38:	dfc00117 	ldw	ra,4(sp)
 402da3c:	df000017 	ldw	fp,0(sp)
 402da40:	dec00204 	addi	sp,sp,8
 402da44:	f800283a 	ret

0402da48 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 402da48:	defffe04 	addi	sp,sp,-8
 402da4c:	dfc00115 	stw	ra,4(sp)
 402da50:	df000015 	stw	fp,0(sp)
 402da54:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 402da58:	d0a00b17 	ldw	r2,-32724(gp)
 402da5c:	10000326 	beq	r2,zero,402da6c <alt_get_errno+0x24>
 402da60:	d0a00b17 	ldw	r2,-32724(gp)
 402da64:	103ee83a 	callr	r2
 402da68:	00000106 	br	402da70 <alt_get_errno+0x28>
 402da6c:	d0a01b04 	addi	r2,gp,-32660
}
 402da70:	e037883a 	mov	sp,fp
 402da74:	dfc00117 	ldw	ra,4(sp)
 402da78:	df000017 	ldw	fp,0(sp)
 402da7c:	dec00204 	addi	sp,sp,8
 402da80:	f800283a 	ret

0402da84 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 402da84:	defff904 	addi	sp,sp,-28
 402da88:	dfc00615 	stw	ra,24(sp)
 402da8c:	df000515 	stw	fp,20(sp)
 402da90:	df000504 	addi	fp,sp,20
 402da94:	e13ffd15 	stw	r4,-12(fp)
 402da98:	e17ffe15 	stw	r5,-8(fp)
 402da9c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 402daa0:	e0bffd17 	ldw	r2,-12(fp)
 402daa4:	10000616 	blt	r2,zero,402dac0 <write+0x3c>
 402daa8:	e0bffd17 	ldw	r2,-12(fp)
 402daac:	10c00324 	muli	r3,r2,12
 402dab0:	00800034 	movhi	r2,0
 402dab4:	10833204 	addi	r2,r2,3272
 402dab8:	1885883a 	add	r2,r3,r2
 402dabc:	00000106 	br	402dac4 <write+0x40>
 402dac0:	0005883a 	mov	r2,zero
 402dac4:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 402dac8:	e0bffb17 	ldw	r2,-20(fp)
 402dacc:	10002126 	beq	r2,zero,402db54 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 402dad0:	e0bffb17 	ldw	r2,-20(fp)
 402dad4:	10800217 	ldw	r2,8(r2)
 402dad8:	108000cc 	andi	r2,r2,3
 402dadc:	10001826 	beq	r2,zero,402db40 <write+0xbc>
 402dae0:	e0bffb17 	ldw	r2,-20(fp)
 402dae4:	10800017 	ldw	r2,0(r2)
 402dae8:	10800617 	ldw	r2,24(r2)
 402daec:	10001426 	beq	r2,zero,402db40 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 402daf0:	e0bffb17 	ldw	r2,-20(fp)
 402daf4:	10800017 	ldw	r2,0(r2)
 402daf8:	10800617 	ldw	r2,24(r2)
 402dafc:	e0ffff17 	ldw	r3,-4(fp)
 402db00:	180d883a 	mov	r6,r3
 402db04:	e17ffe17 	ldw	r5,-8(fp)
 402db08:	e13ffb17 	ldw	r4,-20(fp)
 402db0c:	103ee83a 	callr	r2
 402db10:	e0bffc15 	stw	r2,-16(fp)
 402db14:	e0bffc17 	ldw	r2,-16(fp)
 402db18:	1000070e 	bge	r2,zero,402db38 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 402db1c:	402da480 	call	402da48 <alt_get_errno>
 402db20:	1007883a 	mov	r3,r2
 402db24:	e0bffc17 	ldw	r2,-16(fp)
 402db28:	0085c83a 	sub	r2,zero,r2
 402db2c:	18800015 	stw	r2,0(r3)
        return -1;
 402db30:	00bfffc4 	movi	r2,-1
 402db34:	00000c06 	br	402db68 <write+0xe4>
      }
      return rval;
 402db38:	e0bffc17 	ldw	r2,-16(fp)
 402db3c:	00000a06 	br	402db68 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 402db40:	402da480 	call	402da48 <alt_get_errno>
 402db44:	1007883a 	mov	r3,r2
 402db48:	00800344 	movi	r2,13
 402db4c:	18800015 	stw	r2,0(r3)
 402db50:	00000406 	br	402db64 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 402db54:	402da480 	call	402da48 <alt_get_errno>
 402db58:	1007883a 	mov	r3,r2
 402db5c:	00801444 	movi	r2,81
 402db60:	18800015 	stw	r2,0(r3)
  }
  return -1;
 402db64:	00bfffc4 	movi	r2,-1
}
 402db68:	e037883a 	mov	sp,fp
 402db6c:	dfc00117 	ldw	ra,4(sp)
 402db70:	df000017 	ldw	fp,0(sp)
 402db74:	dec00204 	addi	sp,sp,8
 402db78:	f800283a 	ret

0402db7c <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 402db7c:	defffd04 	addi	sp,sp,-12
 402db80:	dfc00215 	stw	ra,8(sp)
 402db84:	df000115 	stw	fp,4(sp)
 402db88:	df000104 	addi	fp,sp,4
 402db8c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 402db90:	d1600804 	addi	r5,gp,-32736
 402db94:	e13fff17 	ldw	r4,-4(fp)
 402db98:	402f2f00 	call	402f2f0 <alt_dev_llist_insert>
}
 402db9c:	e037883a 	mov	sp,fp
 402dba0:	dfc00117 	ldw	ra,4(sp)
 402dba4:	df000017 	ldw	fp,0(sp)
 402dba8:	dec00204 	addi	sp,sp,8
 402dbac:	f800283a 	ret

0402dbb0 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 402dbb0:	defffd04 	addi	sp,sp,-12
 402dbb4:	dfc00215 	stw	ra,8(sp)
 402dbb8:	df000115 	stw	fp,4(sp)
 402dbbc:	df000104 	addi	fp,sp,4
 402dbc0:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( SYSSIGPROC_NIOS_II, SysSigProc_NIOS_II);
 402dbc4:	402faec0 	call	402faec <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 402dbc8:	00800044 	movi	r2,1
 402dbcc:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 402dbd0:	0001883a 	nop
 402dbd4:	e037883a 	mov	sp,fp
 402dbd8:	dfc00117 	ldw	ra,4(sp)
 402dbdc:	df000017 	ldw	fp,0(sp)
 402dbe0:	dec00204 	addi	sp,sp,8
 402dbe4:	f800283a 	ret

0402dbe8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 402dbe8:	defffe04 	addi	sp,sp,-8
 402dbec:	dfc00115 	stw	ra,4(sp)
 402dbf0:	df000015 	stw	fp,0(sp)
 402dbf4:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( SYSSIGPROC_JTAG_UART, SysSigProc_JTAG_UART);
 402dbf8:	01800144 	movi	r6,5
 402dbfc:	000b883a 	mov	r5,zero
 402dc00:	01000034 	movhi	r4,0
 402dc04:	21039c04 	addi	r4,r4,3696
 402dc08:	402ddcc0 	call	402ddcc <altera_avalon_jtag_uart_init>
 402dc0c:	01000034 	movhi	r4,0
 402dc10:	21039204 	addi	r4,r4,3656
 402dc14:	402db7c0 	call	402db7c <alt_dev_reg>
    ALTERA_AVALON_MAILBOX_SIMPLE_INIT ( MAILBOX_AUDIOTOSIGPROC, Mailbox_AudioToSigProc);
 402dc18:	01800084 	movi	r6,2
 402dc1c:	000b883a 	mov	r5,zero
 402dc20:	01000034 	movhi	r4,0
 402dc24:	2107aa04 	addi	r4,r4,7848
 402dc28:	402e9b80 	call	402e9b8 <altera_avalon_mailbox_simple_init>
    ALTERA_AVALON_MAILBOX_SIMPLE_INIT ( MAILBOX_SIGPROCTOAUDIO, Mailbox_SigProcToAudio);
 402dc2c:	01800044 	movi	r6,1
 402dc30:	000b883a 	mov	r5,zero
 402dc34:	01000034 	movhi	r4,0
 402dc38:	2107bc04 	addi	r4,r4,7920
 402dc3c:	402e9b80 	call	402e9b8 <altera_avalon_mailbox_simple_init>
    ALTERA_AVALON_PERFORMANCE_COUNTER_INIT ( SYSSIGPROC_PERFORMANCE_COUNTER, SysSigProc_Performance_Counter);
 402dc40:	00c00044 	movi	r3,1
 402dc44:	00810134 	movhi	r2,1028
 402dc48:	10840004 	addi	r2,r2,4096
 402dc4c:	10c00035 	stwio	r3,0(r2)
}
 402dc50:	0001883a 	nop
 402dc54:	e037883a 	mov	sp,fp
 402dc58:	dfc00117 	ldw	ra,4(sp)
 402dc5c:	df000017 	ldw	fp,0(sp)
 402dc60:	dec00204 	addi	sp,sp,8
 402dc64:	f800283a 	ret

0402dc68 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 402dc68:	defffa04 	addi	sp,sp,-24
 402dc6c:	dfc00515 	stw	ra,20(sp)
 402dc70:	df000415 	stw	fp,16(sp)
 402dc74:	df000404 	addi	fp,sp,16
 402dc78:	e13ffd15 	stw	r4,-12(fp)
 402dc7c:	e17ffe15 	stw	r5,-8(fp)
 402dc80:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 402dc84:	e0bffd17 	ldw	r2,-12(fp)
 402dc88:	10800017 	ldw	r2,0(r2)
 402dc8c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 402dc90:	e0bffc17 	ldw	r2,-16(fp)
 402dc94:	10c00a04 	addi	r3,r2,40
 402dc98:	e0bffd17 	ldw	r2,-12(fp)
 402dc9c:	10800217 	ldw	r2,8(r2)
 402dca0:	100f883a 	mov	r7,r2
 402dca4:	e1bfff17 	ldw	r6,-4(fp)
 402dca8:	e17ffe17 	ldw	r5,-8(fp)
 402dcac:	1809883a 	mov	r4,r3
 402dcb0:	402e2900 	call	402e290 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 402dcb4:	e037883a 	mov	sp,fp
 402dcb8:	dfc00117 	ldw	ra,4(sp)
 402dcbc:	df000017 	ldw	fp,0(sp)
 402dcc0:	dec00204 	addi	sp,sp,8
 402dcc4:	f800283a 	ret

0402dcc8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 402dcc8:	defffa04 	addi	sp,sp,-24
 402dccc:	dfc00515 	stw	ra,20(sp)
 402dcd0:	df000415 	stw	fp,16(sp)
 402dcd4:	df000404 	addi	fp,sp,16
 402dcd8:	e13ffd15 	stw	r4,-12(fp)
 402dcdc:	e17ffe15 	stw	r5,-8(fp)
 402dce0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 402dce4:	e0bffd17 	ldw	r2,-12(fp)
 402dce8:	10800017 	ldw	r2,0(r2)
 402dcec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 402dcf0:	e0bffc17 	ldw	r2,-16(fp)
 402dcf4:	10c00a04 	addi	r3,r2,40
 402dcf8:	e0bffd17 	ldw	r2,-12(fp)
 402dcfc:	10800217 	ldw	r2,8(r2)
 402dd00:	100f883a 	mov	r7,r2
 402dd04:	e1bfff17 	ldw	r6,-4(fp)
 402dd08:	e17ffe17 	ldw	r5,-8(fp)
 402dd0c:	1809883a 	mov	r4,r3
 402dd10:	402e4ac0 	call	402e4ac <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 402dd14:	e037883a 	mov	sp,fp
 402dd18:	dfc00117 	ldw	ra,4(sp)
 402dd1c:	df000017 	ldw	fp,0(sp)
 402dd20:	dec00204 	addi	sp,sp,8
 402dd24:	f800283a 	ret

0402dd28 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 402dd28:	defffc04 	addi	sp,sp,-16
 402dd2c:	dfc00315 	stw	ra,12(sp)
 402dd30:	df000215 	stw	fp,8(sp)
 402dd34:	df000204 	addi	fp,sp,8
 402dd38:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 402dd3c:	e0bfff17 	ldw	r2,-4(fp)
 402dd40:	10800017 	ldw	r2,0(r2)
 402dd44:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 402dd48:	e0bffe17 	ldw	r2,-8(fp)
 402dd4c:	10c00a04 	addi	r3,r2,40
 402dd50:	e0bfff17 	ldw	r2,-4(fp)
 402dd54:	10800217 	ldw	r2,8(r2)
 402dd58:	100b883a 	mov	r5,r2
 402dd5c:	1809883a 	mov	r4,r3
 402dd60:	402e1380 	call	402e138 <altera_avalon_jtag_uart_close>
}
 402dd64:	e037883a 	mov	sp,fp
 402dd68:	dfc00117 	ldw	ra,4(sp)
 402dd6c:	df000017 	ldw	fp,0(sp)
 402dd70:	dec00204 	addi	sp,sp,8
 402dd74:	f800283a 	ret

0402dd78 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 402dd78:	defffa04 	addi	sp,sp,-24
 402dd7c:	dfc00515 	stw	ra,20(sp)
 402dd80:	df000415 	stw	fp,16(sp)
 402dd84:	df000404 	addi	fp,sp,16
 402dd88:	e13ffd15 	stw	r4,-12(fp)
 402dd8c:	e17ffe15 	stw	r5,-8(fp)
 402dd90:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 402dd94:	e0bffd17 	ldw	r2,-12(fp)
 402dd98:	10800017 	ldw	r2,0(r2)
 402dd9c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 402dda0:	e0bffc17 	ldw	r2,-16(fp)
 402dda4:	10800a04 	addi	r2,r2,40
 402dda8:	e1bfff17 	ldw	r6,-4(fp)
 402ddac:	e17ffe17 	ldw	r5,-8(fp)
 402ddb0:	1009883a 	mov	r4,r2
 402ddb4:	402e1a00 	call	402e1a0 <altera_avalon_jtag_uart_ioctl>
}
 402ddb8:	e037883a 	mov	sp,fp
 402ddbc:	dfc00117 	ldw	ra,4(sp)
 402ddc0:	df000017 	ldw	fp,0(sp)
 402ddc4:	dec00204 	addi	sp,sp,8
 402ddc8:	f800283a 	ret

0402ddcc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 402ddcc:	defffa04 	addi	sp,sp,-24
 402ddd0:	dfc00515 	stw	ra,20(sp)
 402ddd4:	df000415 	stw	fp,16(sp)
 402ddd8:	df000404 	addi	fp,sp,16
 402dddc:	e13ffd15 	stw	r4,-12(fp)
 402dde0:	e17ffe15 	stw	r5,-8(fp)
 402dde4:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 402dde8:	e0bffd17 	ldw	r2,-12(fp)
 402ddec:	00c00044 	movi	r3,1
 402ddf0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 402ddf4:	e0bffd17 	ldw	r2,-12(fp)
 402ddf8:	10800017 	ldw	r2,0(r2)
 402ddfc:	10800104 	addi	r2,r2,4
 402de00:	1007883a 	mov	r3,r2
 402de04:	e0bffd17 	ldw	r2,-12(fp)
 402de08:	10800817 	ldw	r2,32(r2)
 402de0c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 402de10:	e0bffe17 	ldw	r2,-8(fp)
 402de14:	e0ffff17 	ldw	r3,-4(fp)
 402de18:	d8000015 	stw	zero,0(sp)
 402de1c:	e1fffd17 	ldw	r7,-12(fp)
 402de20:	018100f4 	movhi	r6,1027
 402de24:	31b7a304 	addi	r6,r6,-8564
 402de28:	180b883a 	mov	r5,r3
 402de2c:	1009883a 	mov	r4,r2
 402de30:	402d18c0 	call	402d18c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 402de34:	e0bffd17 	ldw	r2,-12(fp)
 402de38:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 402de3c:	e0bffd17 	ldw	r2,-12(fp)
 402de40:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 402de44:	d0e02117 	ldw	r3,-32636(gp)
 402de48:	e1fffd17 	ldw	r7,-12(fp)
 402de4c:	018100f4 	movhi	r6,1027
 402de50:	31b82604 	addi	r6,r6,-8040
 402de54:	180b883a 	mov	r5,r3
 402de58:	1009883a 	mov	r4,r2
 402de5c:	402f0300 	call	402f030 <alt_alarm_start>
 402de60:	1000040e 	bge	r2,zero,402de74 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 402de64:	e0fffd17 	ldw	r3,-12(fp)
 402de68:	00a00034 	movhi	r2,32768
 402de6c:	10bfffc4 	addi	r2,r2,-1
 402de70:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 402de74:	0001883a 	nop
 402de78:	e037883a 	mov	sp,fp
 402de7c:	dfc00117 	ldw	ra,4(sp)
 402de80:	df000017 	ldw	fp,0(sp)
 402de84:	dec00204 	addi	sp,sp,8
 402de88:	f800283a 	ret

0402de8c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 402de8c:	defff804 	addi	sp,sp,-32
 402de90:	df000715 	stw	fp,28(sp)
 402de94:	df000704 	addi	fp,sp,28
 402de98:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 402de9c:	e0bfff17 	ldw	r2,-4(fp)
 402dea0:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 402dea4:	e0bffb17 	ldw	r2,-20(fp)
 402dea8:	10800017 	ldw	r2,0(r2)
 402deac:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 402deb0:	e0bffc17 	ldw	r2,-16(fp)
 402deb4:	10800104 	addi	r2,r2,4
 402deb8:	10800037 	ldwio	r2,0(r2)
 402debc:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 402dec0:	e0bffd17 	ldw	r2,-12(fp)
 402dec4:	1080c00c 	andi	r2,r2,768
 402dec8:	10006d26 	beq	r2,zero,402e080 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 402decc:	e0bffd17 	ldw	r2,-12(fp)
 402ded0:	1080400c 	andi	r2,r2,256
 402ded4:	10003526 	beq	r2,zero,402dfac <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 402ded8:	00800074 	movhi	r2,1
 402dedc:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 402dee0:	e0bffb17 	ldw	r2,-20(fp)
 402dee4:	10800a17 	ldw	r2,40(r2)
 402dee8:	10800044 	addi	r2,r2,1
 402deec:	1081ffcc 	andi	r2,r2,2047
 402def0:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 402def4:	e0bffb17 	ldw	r2,-20(fp)
 402def8:	10c00b17 	ldw	r3,44(r2)
 402defc:	e0bffe17 	ldw	r2,-8(fp)
 402df00:	18801526 	beq	r3,r2,402df58 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 402df04:	e0bffc17 	ldw	r2,-16(fp)
 402df08:	10800037 	ldwio	r2,0(r2)
 402df0c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 402df10:	e0bff917 	ldw	r2,-28(fp)
 402df14:	10a0000c 	andi	r2,r2,32768
 402df18:	10001126 	beq	r2,zero,402df60 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 402df1c:	e0bffb17 	ldw	r2,-20(fp)
 402df20:	10800a17 	ldw	r2,40(r2)
 402df24:	e0fff917 	ldw	r3,-28(fp)
 402df28:	1809883a 	mov	r4,r3
 402df2c:	e0fffb17 	ldw	r3,-20(fp)
 402df30:	1885883a 	add	r2,r3,r2
 402df34:	10800e04 	addi	r2,r2,56
 402df38:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 402df3c:	e0bffb17 	ldw	r2,-20(fp)
 402df40:	10800a17 	ldw	r2,40(r2)
 402df44:	10800044 	addi	r2,r2,1
 402df48:	10c1ffcc 	andi	r3,r2,2047
 402df4c:	e0bffb17 	ldw	r2,-20(fp)
 402df50:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 402df54:	003fe206 	br	402dee0 <__flash_rwdata_start+0xffffda04>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 402df58:	0001883a 	nop
 402df5c:	00000106 	br	402df64 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 402df60:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 402df64:	e0bff917 	ldw	r2,-28(fp)
 402df68:	10bfffec 	andhi	r2,r2,65535
 402df6c:	10000f26 	beq	r2,zero,402dfac <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 402df70:	e0bffb17 	ldw	r2,-20(fp)
 402df74:	10c00817 	ldw	r3,32(r2)
 402df78:	00bfff84 	movi	r2,-2
 402df7c:	1886703a 	and	r3,r3,r2
 402df80:	e0bffb17 	ldw	r2,-20(fp)
 402df84:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 402df88:	e0bffc17 	ldw	r2,-16(fp)
 402df8c:	10800104 	addi	r2,r2,4
 402df90:	1007883a 	mov	r3,r2
 402df94:	e0bffb17 	ldw	r2,-20(fp)
 402df98:	10800817 	ldw	r2,32(r2)
 402df9c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 402dfa0:	e0bffc17 	ldw	r2,-16(fp)
 402dfa4:	10800104 	addi	r2,r2,4
 402dfa8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 402dfac:	e0bffd17 	ldw	r2,-12(fp)
 402dfb0:	1080800c 	andi	r2,r2,512
 402dfb4:	103fbe26 	beq	r2,zero,402deb0 <__flash_rwdata_start+0xffffd9d4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 402dfb8:	e0bffd17 	ldw	r2,-12(fp)
 402dfbc:	1004d43a 	srli	r2,r2,16
 402dfc0:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 402dfc4:	00001406 	br	402e018 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 402dfc8:	e0bffc17 	ldw	r2,-16(fp)
 402dfcc:	e0fffb17 	ldw	r3,-20(fp)
 402dfd0:	18c00d17 	ldw	r3,52(r3)
 402dfd4:	e13ffb17 	ldw	r4,-20(fp)
 402dfd8:	20c7883a 	add	r3,r4,r3
 402dfdc:	18c20e04 	addi	r3,r3,2104
 402dfe0:	18c00003 	ldbu	r3,0(r3)
 402dfe4:	18c03fcc 	andi	r3,r3,255
 402dfe8:	18c0201c 	xori	r3,r3,128
 402dfec:	18ffe004 	addi	r3,r3,-128
 402dff0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 402dff4:	e0bffb17 	ldw	r2,-20(fp)
 402dff8:	10800d17 	ldw	r2,52(r2)
 402dffc:	10800044 	addi	r2,r2,1
 402e000:	10c1ffcc 	andi	r3,r2,2047
 402e004:	e0bffb17 	ldw	r2,-20(fp)
 402e008:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 402e00c:	e0bffa17 	ldw	r2,-24(fp)
 402e010:	10bfffc4 	addi	r2,r2,-1
 402e014:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 402e018:	e0bffa17 	ldw	r2,-24(fp)
 402e01c:	10000526 	beq	r2,zero,402e034 <altera_avalon_jtag_uart_irq+0x1a8>
 402e020:	e0bffb17 	ldw	r2,-20(fp)
 402e024:	10c00d17 	ldw	r3,52(r2)
 402e028:	e0bffb17 	ldw	r2,-20(fp)
 402e02c:	10800c17 	ldw	r2,48(r2)
 402e030:	18bfe51e 	bne	r3,r2,402dfc8 <__flash_rwdata_start+0xffffdaec>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 402e034:	e0bffa17 	ldw	r2,-24(fp)
 402e038:	103f9d26 	beq	r2,zero,402deb0 <__flash_rwdata_start+0xffffd9d4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 402e03c:	e0bffb17 	ldw	r2,-20(fp)
 402e040:	10c00817 	ldw	r3,32(r2)
 402e044:	00bfff44 	movi	r2,-3
 402e048:	1886703a 	and	r3,r3,r2
 402e04c:	e0bffb17 	ldw	r2,-20(fp)
 402e050:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 402e054:	e0bffb17 	ldw	r2,-20(fp)
 402e058:	10800017 	ldw	r2,0(r2)
 402e05c:	10800104 	addi	r2,r2,4
 402e060:	1007883a 	mov	r3,r2
 402e064:	e0bffb17 	ldw	r2,-20(fp)
 402e068:	10800817 	ldw	r2,32(r2)
 402e06c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 402e070:	e0bffc17 	ldw	r2,-16(fp)
 402e074:	10800104 	addi	r2,r2,4
 402e078:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 402e07c:	003f8c06 	br	402deb0 <__flash_rwdata_start+0xffffd9d4>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 402e080:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 402e084:	0001883a 	nop
 402e088:	e037883a 	mov	sp,fp
 402e08c:	df000017 	ldw	fp,0(sp)
 402e090:	dec00104 	addi	sp,sp,4
 402e094:	f800283a 	ret

0402e098 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 402e098:	defff804 	addi	sp,sp,-32
 402e09c:	df000715 	stw	fp,28(sp)
 402e0a0:	df000704 	addi	fp,sp,28
 402e0a4:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 402e0a8:	e0bffb17 	ldw	r2,-20(fp)
 402e0ac:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 402e0b0:	e0bff917 	ldw	r2,-28(fp)
 402e0b4:	10800017 	ldw	r2,0(r2)
 402e0b8:	10800104 	addi	r2,r2,4
 402e0bc:	10800037 	ldwio	r2,0(r2)
 402e0c0:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 402e0c4:	e0bffa17 	ldw	r2,-24(fp)
 402e0c8:	1081000c 	andi	r2,r2,1024
 402e0cc:	10000b26 	beq	r2,zero,402e0fc <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 402e0d0:	e0bff917 	ldw	r2,-28(fp)
 402e0d4:	10800017 	ldw	r2,0(r2)
 402e0d8:	10800104 	addi	r2,r2,4
 402e0dc:	1007883a 	mov	r3,r2
 402e0e0:	e0bff917 	ldw	r2,-28(fp)
 402e0e4:	10800817 	ldw	r2,32(r2)
 402e0e8:	10810014 	ori	r2,r2,1024
 402e0ec:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 402e0f0:	e0bff917 	ldw	r2,-28(fp)
 402e0f4:	10000915 	stw	zero,36(r2)
 402e0f8:	00000a06 	br	402e124 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 402e0fc:	e0bff917 	ldw	r2,-28(fp)
 402e100:	10c00917 	ldw	r3,36(r2)
 402e104:	00a00034 	movhi	r2,32768
 402e108:	10bfff04 	addi	r2,r2,-4
 402e10c:	10c00536 	bltu	r2,r3,402e124 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 402e110:	e0bff917 	ldw	r2,-28(fp)
 402e114:	10800917 	ldw	r2,36(r2)
 402e118:	10c00044 	addi	r3,r2,1
 402e11c:	e0bff917 	ldw	r2,-28(fp)
 402e120:	10c00915 	stw	r3,36(r2)
 402e124:	d0a02117 	ldw	r2,-32636(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 402e128:	e037883a 	mov	sp,fp
 402e12c:	df000017 	ldw	fp,0(sp)
 402e130:	dec00104 	addi	sp,sp,4
 402e134:	f800283a 	ret

0402e138 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 402e138:	defffd04 	addi	sp,sp,-12
 402e13c:	df000215 	stw	fp,8(sp)
 402e140:	df000204 	addi	fp,sp,8
 402e144:	e13ffe15 	stw	r4,-8(fp)
 402e148:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 402e14c:	00000506 	br	402e164 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 402e150:	e0bfff17 	ldw	r2,-4(fp)
 402e154:	1090000c 	andi	r2,r2,16384
 402e158:	10000226 	beq	r2,zero,402e164 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 402e15c:	00bffd44 	movi	r2,-11
 402e160:	00000b06 	br	402e190 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 402e164:	e0bffe17 	ldw	r2,-8(fp)
 402e168:	10c00d17 	ldw	r3,52(r2)
 402e16c:	e0bffe17 	ldw	r2,-8(fp)
 402e170:	10800c17 	ldw	r2,48(r2)
 402e174:	18800526 	beq	r3,r2,402e18c <altera_avalon_jtag_uart_close+0x54>
 402e178:	e0bffe17 	ldw	r2,-8(fp)
 402e17c:	10c00917 	ldw	r3,36(r2)
 402e180:	e0bffe17 	ldw	r2,-8(fp)
 402e184:	10800117 	ldw	r2,4(r2)
 402e188:	18bff136 	bltu	r3,r2,402e150 <__flash_rwdata_start+0xffffdc74>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 402e18c:	0005883a 	mov	r2,zero
}
 402e190:	e037883a 	mov	sp,fp
 402e194:	df000017 	ldw	fp,0(sp)
 402e198:	dec00104 	addi	sp,sp,4
 402e19c:	f800283a 	ret

0402e1a0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 402e1a0:	defffa04 	addi	sp,sp,-24
 402e1a4:	df000515 	stw	fp,20(sp)
 402e1a8:	df000504 	addi	fp,sp,20
 402e1ac:	e13ffd15 	stw	r4,-12(fp)
 402e1b0:	e17ffe15 	stw	r5,-8(fp)
 402e1b4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 402e1b8:	00bff9c4 	movi	r2,-25
 402e1bc:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 402e1c0:	e0bffe17 	ldw	r2,-8(fp)
 402e1c4:	10da8060 	cmpeqi	r3,r2,27137
 402e1c8:	1800031e 	bne	r3,zero,402e1d8 <altera_avalon_jtag_uart_ioctl+0x38>
 402e1cc:	109a80a0 	cmpeqi	r2,r2,27138
 402e1d0:	1000181e 	bne	r2,zero,402e234 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 402e1d4:	00002906 	br	402e27c <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 402e1d8:	e0bffd17 	ldw	r2,-12(fp)
 402e1dc:	10c00117 	ldw	r3,4(r2)
 402e1e0:	00a00034 	movhi	r2,32768
 402e1e4:	10bfffc4 	addi	r2,r2,-1
 402e1e8:	18802126 	beq	r3,r2,402e270 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 402e1ec:	e0bfff17 	ldw	r2,-4(fp)
 402e1f0:	10800017 	ldw	r2,0(r2)
 402e1f4:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 402e1f8:	e0bffc17 	ldw	r2,-16(fp)
 402e1fc:	10800090 	cmplti	r2,r2,2
 402e200:	1000061e 	bne	r2,zero,402e21c <altera_avalon_jtag_uart_ioctl+0x7c>
 402e204:	e0fffc17 	ldw	r3,-16(fp)
 402e208:	00a00034 	movhi	r2,32768
 402e20c:	10bfffc4 	addi	r2,r2,-1
 402e210:	18800226 	beq	r3,r2,402e21c <altera_avalon_jtag_uart_ioctl+0x7c>
 402e214:	e0bffc17 	ldw	r2,-16(fp)
 402e218:	00000206 	br	402e224 <altera_avalon_jtag_uart_ioctl+0x84>
 402e21c:	00a00034 	movhi	r2,32768
 402e220:	10bfff84 	addi	r2,r2,-2
 402e224:	e0fffd17 	ldw	r3,-12(fp)
 402e228:	18800115 	stw	r2,4(r3)
      rc = 0;
 402e22c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 402e230:	00000f06 	br	402e270 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 402e234:	e0bffd17 	ldw	r2,-12(fp)
 402e238:	10c00117 	ldw	r3,4(r2)
 402e23c:	00a00034 	movhi	r2,32768
 402e240:	10bfffc4 	addi	r2,r2,-1
 402e244:	18800c26 	beq	r3,r2,402e278 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 402e248:	e0bffd17 	ldw	r2,-12(fp)
 402e24c:	10c00917 	ldw	r3,36(r2)
 402e250:	e0bffd17 	ldw	r2,-12(fp)
 402e254:	10800117 	ldw	r2,4(r2)
 402e258:	1885803a 	cmpltu	r2,r3,r2
 402e25c:	10c03fcc 	andi	r3,r2,255
 402e260:	e0bfff17 	ldw	r2,-4(fp)
 402e264:	10c00015 	stw	r3,0(r2)
      rc = 0;
 402e268:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 402e26c:	00000206 	br	402e278 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 402e270:	0001883a 	nop
 402e274:	00000106 	br	402e27c <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 402e278:	0001883a 	nop

  default:
    break;
  }

  return rc;
 402e27c:	e0bffb17 	ldw	r2,-20(fp)
}
 402e280:	e037883a 	mov	sp,fp
 402e284:	df000017 	ldw	fp,0(sp)
 402e288:	dec00104 	addi	sp,sp,4
 402e28c:	f800283a 	ret

0402e290 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 402e290:	defff304 	addi	sp,sp,-52
 402e294:	dfc00c15 	stw	ra,48(sp)
 402e298:	df000b15 	stw	fp,44(sp)
 402e29c:	df000b04 	addi	fp,sp,44
 402e2a0:	e13ffc15 	stw	r4,-16(fp)
 402e2a4:	e17ffd15 	stw	r5,-12(fp)
 402e2a8:	e1bffe15 	stw	r6,-8(fp)
 402e2ac:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 402e2b0:	e0bffd17 	ldw	r2,-12(fp)
 402e2b4:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 402e2b8:	00004706 	br	402e3d8 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 402e2bc:	e0bffc17 	ldw	r2,-16(fp)
 402e2c0:	10800a17 	ldw	r2,40(r2)
 402e2c4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 402e2c8:	e0bffc17 	ldw	r2,-16(fp)
 402e2cc:	10800b17 	ldw	r2,44(r2)
 402e2d0:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 402e2d4:	e0fff717 	ldw	r3,-36(fp)
 402e2d8:	e0bff817 	ldw	r2,-32(fp)
 402e2dc:	18800536 	bltu	r3,r2,402e2f4 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 402e2e0:	e0fff717 	ldw	r3,-36(fp)
 402e2e4:	e0bff817 	ldw	r2,-32(fp)
 402e2e8:	1885c83a 	sub	r2,r3,r2
 402e2ec:	e0bff615 	stw	r2,-40(fp)
 402e2f0:	00000406 	br	402e304 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 402e2f4:	00c20004 	movi	r3,2048
 402e2f8:	e0bff817 	ldw	r2,-32(fp)
 402e2fc:	1885c83a 	sub	r2,r3,r2
 402e300:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 402e304:	e0bff617 	ldw	r2,-40(fp)
 402e308:	10001e26 	beq	r2,zero,402e384 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 402e30c:	e0fffe17 	ldw	r3,-8(fp)
 402e310:	e0bff617 	ldw	r2,-40(fp)
 402e314:	1880022e 	bgeu	r3,r2,402e320 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 402e318:	e0bffe17 	ldw	r2,-8(fp)
 402e31c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 402e320:	e0bffc17 	ldw	r2,-16(fp)
 402e324:	10c00e04 	addi	r3,r2,56
 402e328:	e0bff817 	ldw	r2,-32(fp)
 402e32c:	1885883a 	add	r2,r3,r2
 402e330:	e1bff617 	ldw	r6,-40(fp)
 402e334:	100b883a 	mov	r5,r2
 402e338:	e13ff517 	ldw	r4,-44(fp)
 402e33c:	40260cc0 	call	40260cc <memcpy>
      ptr   += n;
 402e340:	e0fff517 	ldw	r3,-44(fp)
 402e344:	e0bff617 	ldw	r2,-40(fp)
 402e348:	1885883a 	add	r2,r3,r2
 402e34c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 402e350:	e0fffe17 	ldw	r3,-8(fp)
 402e354:	e0bff617 	ldw	r2,-40(fp)
 402e358:	1885c83a 	sub	r2,r3,r2
 402e35c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 402e360:	e0fff817 	ldw	r3,-32(fp)
 402e364:	e0bff617 	ldw	r2,-40(fp)
 402e368:	1885883a 	add	r2,r3,r2
 402e36c:	10c1ffcc 	andi	r3,r2,2047
 402e370:	e0bffc17 	ldw	r2,-16(fp)
 402e374:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 402e378:	e0bffe17 	ldw	r2,-8(fp)
 402e37c:	00bfcf16 	blt	zero,r2,402e2bc <__flash_rwdata_start+0xffffdde0>
 402e380:	00000106 	br	402e388 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 402e384:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 402e388:	e0fff517 	ldw	r3,-44(fp)
 402e38c:	e0bffd17 	ldw	r2,-12(fp)
 402e390:	1880141e 	bne	r3,r2,402e3e4 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 402e394:	e0bfff17 	ldw	r2,-4(fp)
 402e398:	1090000c 	andi	r2,r2,16384
 402e39c:	1000131e 	bne	r2,zero,402e3ec <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 402e3a0:	0001883a 	nop
 402e3a4:	e0bffc17 	ldw	r2,-16(fp)
 402e3a8:	10c00a17 	ldw	r3,40(r2)
 402e3ac:	e0bff717 	ldw	r2,-36(fp)
 402e3b0:	1880051e 	bne	r3,r2,402e3c8 <altera_avalon_jtag_uart_read+0x138>
 402e3b4:	e0bffc17 	ldw	r2,-16(fp)
 402e3b8:	10c00917 	ldw	r3,36(r2)
 402e3bc:	e0bffc17 	ldw	r2,-16(fp)
 402e3c0:	10800117 	ldw	r2,4(r2)
 402e3c4:	18bff736 	bltu	r3,r2,402e3a4 <__flash_rwdata_start+0xffffdec8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 402e3c8:	e0bffc17 	ldw	r2,-16(fp)
 402e3cc:	10c00a17 	ldw	r3,40(r2)
 402e3d0:	e0bff717 	ldw	r2,-36(fp)
 402e3d4:	18800726 	beq	r3,r2,402e3f4 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 402e3d8:	e0bffe17 	ldw	r2,-8(fp)
 402e3dc:	00bfb716 	blt	zero,r2,402e2bc <__flash_rwdata_start+0xffffdde0>
 402e3e0:	00000506 	br	402e3f8 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 402e3e4:	0001883a 	nop
 402e3e8:	00000306 	br	402e3f8 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 402e3ec:	0001883a 	nop
 402e3f0:	00000106 	br	402e3f8 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 402e3f4:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 402e3f8:	e0fff517 	ldw	r3,-44(fp)
 402e3fc:	e0bffd17 	ldw	r2,-12(fp)
 402e400:	18801826 	beq	r3,r2,402e464 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402e404:	0005303a 	rdctl	r2,status
 402e408:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402e40c:	e0fffb17 	ldw	r3,-20(fp)
 402e410:	00bfff84 	movi	r2,-2
 402e414:	1884703a 	and	r2,r3,r2
 402e418:	1001703a 	wrctl	status,r2
  
  return context;
 402e41c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 402e420:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 402e424:	e0bffc17 	ldw	r2,-16(fp)
 402e428:	10800817 	ldw	r2,32(r2)
 402e42c:	10c00054 	ori	r3,r2,1
 402e430:	e0bffc17 	ldw	r2,-16(fp)
 402e434:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 402e438:	e0bffc17 	ldw	r2,-16(fp)
 402e43c:	10800017 	ldw	r2,0(r2)
 402e440:	10800104 	addi	r2,r2,4
 402e444:	1007883a 	mov	r3,r2
 402e448:	e0bffc17 	ldw	r2,-16(fp)
 402e44c:	10800817 	ldw	r2,32(r2)
 402e450:	18800035 	stwio	r2,0(r3)
 402e454:	e0bffa17 	ldw	r2,-24(fp)
 402e458:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402e45c:	e0bff917 	ldw	r2,-28(fp)
 402e460:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 402e464:	e0fff517 	ldw	r3,-44(fp)
 402e468:	e0bffd17 	ldw	r2,-12(fp)
 402e46c:	18800426 	beq	r3,r2,402e480 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 402e470:	e0fff517 	ldw	r3,-44(fp)
 402e474:	e0bffd17 	ldw	r2,-12(fp)
 402e478:	1885c83a 	sub	r2,r3,r2
 402e47c:	00000606 	br	402e498 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 402e480:	e0bfff17 	ldw	r2,-4(fp)
 402e484:	1090000c 	andi	r2,r2,16384
 402e488:	10000226 	beq	r2,zero,402e494 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 402e48c:	00bffd44 	movi	r2,-11
 402e490:	00000106 	br	402e498 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 402e494:	00bffec4 	movi	r2,-5
}
 402e498:	e037883a 	mov	sp,fp
 402e49c:	dfc00117 	ldw	ra,4(sp)
 402e4a0:	df000017 	ldw	fp,0(sp)
 402e4a4:	dec00204 	addi	sp,sp,8
 402e4a8:	f800283a 	ret

0402e4ac <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 402e4ac:	defff304 	addi	sp,sp,-52
 402e4b0:	dfc00c15 	stw	ra,48(sp)
 402e4b4:	df000b15 	stw	fp,44(sp)
 402e4b8:	df000b04 	addi	fp,sp,44
 402e4bc:	e13ffc15 	stw	r4,-16(fp)
 402e4c0:	e17ffd15 	stw	r5,-12(fp)
 402e4c4:	e1bffe15 	stw	r6,-8(fp)
 402e4c8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 402e4cc:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 402e4d0:	e0bffd17 	ldw	r2,-12(fp)
 402e4d4:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 402e4d8:	00003706 	br	402e5b8 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 402e4dc:	e0bffc17 	ldw	r2,-16(fp)
 402e4e0:	10800c17 	ldw	r2,48(r2)
 402e4e4:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 402e4e8:	e0bffc17 	ldw	r2,-16(fp)
 402e4ec:	10800d17 	ldw	r2,52(r2)
 402e4f0:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 402e4f4:	e0fff917 	ldw	r3,-28(fp)
 402e4f8:	e0bff517 	ldw	r2,-44(fp)
 402e4fc:	1880062e 	bgeu	r3,r2,402e518 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 402e500:	e0fff517 	ldw	r3,-44(fp)
 402e504:	e0bff917 	ldw	r2,-28(fp)
 402e508:	1885c83a 	sub	r2,r3,r2
 402e50c:	10bfffc4 	addi	r2,r2,-1
 402e510:	e0bff615 	stw	r2,-40(fp)
 402e514:	00000b06 	br	402e544 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 402e518:	e0bff517 	ldw	r2,-44(fp)
 402e51c:	10000526 	beq	r2,zero,402e534 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 402e520:	00c20004 	movi	r3,2048
 402e524:	e0bff917 	ldw	r2,-28(fp)
 402e528:	1885c83a 	sub	r2,r3,r2
 402e52c:	e0bff615 	stw	r2,-40(fp)
 402e530:	00000406 	br	402e544 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 402e534:	00c1ffc4 	movi	r3,2047
 402e538:	e0bff917 	ldw	r2,-28(fp)
 402e53c:	1885c83a 	sub	r2,r3,r2
 402e540:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 402e544:	e0bff617 	ldw	r2,-40(fp)
 402e548:	10001e26 	beq	r2,zero,402e5c4 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 402e54c:	e0fffe17 	ldw	r3,-8(fp)
 402e550:	e0bff617 	ldw	r2,-40(fp)
 402e554:	1880022e 	bgeu	r3,r2,402e560 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 402e558:	e0bffe17 	ldw	r2,-8(fp)
 402e55c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 402e560:	e0bffc17 	ldw	r2,-16(fp)
 402e564:	10c20e04 	addi	r3,r2,2104
 402e568:	e0bff917 	ldw	r2,-28(fp)
 402e56c:	1885883a 	add	r2,r3,r2
 402e570:	e1bff617 	ldw	r6,-40(fp)
 402e574:	e17ffd17 	ldw	r5,-12(fp)
 402e578:	1009883a 	mov	r4,r2
 402e57c:	40260cc0 	call	40260cc <memcpy>
      ptr   += n;
 402e580:	e0fffd17 	ldw	r3,-12(fp)
 402e584:	e0bff617 	ldw	r2,-40(fp)
 402e588:	1885883a 	add	r2,r3,r2
 402e58c:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 402e590:	e0fffe17 	ldw	r3,-8(fp)
 402e594:	e0bff617 	ldw	r2,-40(fp)
 402e598:	1885c83a 	sub	r2,r3,r2
 402e59c:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 402e5a0:	e0fff917 	ldw	r3,-28(fp)
 402e5a4:	e0bff617 	ldw	r2,-40(fp)
 402e5a8:	1885883a 	add	r2,r3,r2
 402e5ac:	10c1ffcc 	andi	r3,r2,2047
 402e5b0:	e0bffc17 	ldw	r2,-16(fp)
 402e5b4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 402e5b8:	e0bffe17 	ldw	r2,-8(fp)
 402e5bc:	00bfc716 	blt	zero,r2,402e4dc <__flash_rwdata_start+0xffffe000>
 402e5c0:	00000106 	br	402e5c8 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 402e5c4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402e5c8:	0005303a 	rdctl	r2,status
 402e5cc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402e5d0:	e0fffb17 	ldw	r3,-20(fp)
 402e5d4:	00bfff84 	movi	r2,-2
 402e5d8:	1884703a 	and	r2,r3,r2
 402e5dc:	1001703a 	wrctl	status,r2
  
  return context;
 402e5e0:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 402e5e4:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 402e5e8:	e0bffc17 	ldw	r2,-16(fp)
 402e5ec:	10800817 	ldw	r2,32(r2)
 402e5f0:	10c00094 	ori	r3,r2,2
 402e5f4:	e0bffc17 	ldw	r2,-16(fp)
 402e5f8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 402e5fc:	e0bffc17 	ldw	r2,-16(fp)
 402e600:	10800017 	ldw	r2,0(r2)
 402e604:	10800104 	addi	r2,r2,4
 402e608:	1007883a 	mov	r3,r2
 402e60c:	e0bffc17 	ldw	r2,-16(fp)
 402e610:	10800817 	ldw	r2,32(r2)
 402e614:	18800035 	stwio	r2,0(r3)
 402e618:	e0bffa17 	ldw	r2,-24(fp)
 402e61c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402e620:	e0bff817 	ldw	r2,-32(fp)
 402e624:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 402e628:	e0bffe17 	ldw	r2,-8(fp)
 402e62c:	0080100e 	bge	zero,r2,402e670 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 402e630:	e0bfff17 	ldw	r2,-4(fp)
 402e634:	1090000c 	andi	r2,r2,16384
 402e638:	1000101e 	bne	r2,zero,402e67c <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 402e63c:	0001883a 	nop
 402e640:	e0bffc17 	ldw	r2,-16(fp)
 402e644:	10c00d17 	ldw	r3,52(r2)
 402e648:	e0bff517 	ldw	r2,-44(fp)
 402e64c:	1880051e 	bne	r3,r2,402e664 <altera_avalon_jtag_uart_write+0x1b8>
 402e650:	e0bffc17 	ldw	r2,-16(fp)
 402e654:	10c00917 	ldw	r3,36(r2)
 402e658:	e0bffc17 	ldw	r2,-16(fp)
 402e65c:	10800117 	ldw	r2,4(r2)
 402e660:	18bff736 	bltu	r3,r2,402e640 <__flash_rwdata_start+0xffffe164>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 402e664:	e0bffc17 	ldw	r2,-16(fp)
 402e668:	10800917 	ldw	r2,36(r2)
 402e66c:	1000051e 	bne	r2,zero,402e684 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 402e670:	e0bffe17 	ldw	r2,-8(fp)
 402e674:	00bfd016 	blt	zero,r2,402e5b8 <__flash_rwdata_start+0xffffe0dc>
 402e678:	00000306 	br	402e688 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 402e67c:	0001883a 	nop
 402e680:	00000106 	br	402e688 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 402e684:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 402e688:	e0fffd17 	ldw	r3,-12(fp)
 402e68c:	e0bff717 	ldw	r2,-36(fp)
 402e690:	18800426 	beq	r3,r2,402e6a4 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 402e694:	e0fffd17 	ldw	r3,-12(fp)
 402e698:	e0bff717 	ldw	r2,-36(fp)
 402e69c:	1885c83a 	sub	r2,r3,r2
 402e6a0:	00000606 	br	402e6bc <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 402e6a4:	e0bfff17 	ldw	r2,-4(fp)
 402e6a8:	1090000c 	andi	r2,r2,16384
 402e6ac:	10000226 	beq	r2,zero,402e6b8 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 402e6b0:	00bffd44 	movi	r2,-11
 402e6b4:	00000106 	br	402e6bc <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 402e6b8:	00bffec4 	movi	r2,-5
}
 402e6bc:	e037883a 	mov	sp,fp
 402e6c0:	dfc00117 	ldw	ra,4(sp)
 402e6c4:	df000017 	ldw	fp,0(sp)
 402e6c8:	dec00204 	addi	sp,sp,8
 402e6cc:	f800283a 	ret

0402e6d0 <altera_avalon_mailbox_identify>:
 * Check an instance open match
 * with the callback register
 */

static void altera_avalon_mailbox_identify (altera_avalon_mailbox_dev *dev)
{
 402e6d0:	defffd04 	addi	sp,sp,-12
 402e6d4:	df000215 	stw	fp,8(sp)
 402e6d8:	df000204 	addi	fp,sp,8
 402e6dc:	e13fff15 	stw	r4,-4(fp)
    /* Random signature to test mailbox ownership */
    alt_u32 magic_num = 0x3A11B045;
 402e6e0:	008e84b4 	movhi	r2,14866
 402e6e4:	10ac1144 	addi	r2,r2,-20411
 402e6e8:	e0bffe15 	stw	r2,-8(fp)

    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, magic_num);
 402e6ec:	e0bfff17 	ldw	r2,-4(fp)
 402e6f0:	10800a17 	ldw	r2,40(r2)
 402e6f4:	10800104 	addi	r2,r2,4
 402e6f8:	1007883a 	mov	r3,r2
 402e6fc:	e0bffe17 	ldw	r2,-8(fp)
 402e700:	18800035 	stwio	r2,0(r3)
    if((IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST)) == magic_num)
 402e704:	e0bfff17 	ldw	r2,-4(fp)
 402e708:	10800a17 	ldw	r2,40(r2)
 402e70c:	10800104 	addi	r2,r2,4
 402e710:	10800037 	ldwio	r2,0(r2)
 402e714:	1007883a 	mov	r3,r2
 402e718:	e0bffe17 	ldw	r2,-8(fp)
 402e71c:	1880081e 	bne	r3,r2,402e740 <altera_avalon_mailbox_identify+0x70>
    {
        dev-> mbox_type = MBOX_TX;
 402e720:	e0bfff17 	ldw	r2,-4(fp)
 402e724:	10000f15 	stw	zero,60(r2)
        /* Clear message_ptr to default */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, 0x0);
 402e728:	e0bfff17 	ldw	r2,-4(fp)
 402e72c:	10800a17 	ldw	r2,40(r2)
 402e730:	10800104 	addi	r2,r2,4
 402e734:	0007883a 	mov	r3,zero
 402e738:	10c00035 	stwio	r3,0(r2)
    } else
    {
	    dev->mbox_type = MBOX_RX;
    }
}
 402e73c:	00000306 	br	402e74c <altera_avalon_mailbox_identify+0x7c>
        dev-> mbox_type = MBOX_TX;
        /* Clear message_ptr to default */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, 0x0);
    } else
    {
	    dev->mbox_type = MBOX_RX;
 402e740:	e0bfff17 	ldw	r2,-4(fp)
 402e744:	00c00044 	movi	r3,1
 402e748:	10c00f15 	stw	r3,60(r2)
    }
}
 402e74c:	0001883a 	nop
 402e750:	e037883a 	mov	sp,fp
 402e754:	df000017 	ldw	fp,0(sp)
 402e758:	dec00104 	addi	sp,sp,4
 402e75c:	f800283a 	ret

0402e760 <altera_avalon_mailbox_post>:
/*
 *   altera_avalon_mailbox_post
 *   This function post message out through sender mailbox
 */
static alt_32 altera_avalon_mailbox_post (altera_avalon_mailbox_dev *dev,  void *message)
{
 402e760:	defffc04 	addi	sp,sp,-16
 402e764:	df000315 	stw	fp,12(sp)
 402e768:	df000304 	addi	fp,sp,12
 402e76c:	e13ffe15 	stw	r4,-8(fp)
 402e770:	e17fff15 	stw	r5,-4(fp)
    alt_u32 *mbox_msg = (alt_u32*) message ;
 402e774:	e0bfff17 	ldw	r2,-4(fp)
 402e778:	e0bffd15 	stw	r2,-12(fp)

    if (mbox_msg != NULL) {
 402e77c:	e0bffd17 	ldw	r2,-12(fp)
 402e780:	10001026 	beq	r2,zero,402e7c4 <altera_avalon_mailbox_post+0x64>
        /* When message space available, post the message out */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, mbox_msg[1]);
 402e784:	e0bffe17 	ldw	r2,-8(fp)
 402e788:	10800a17 	ldw	r2,40(r2)
 402e78c:	10800104 	addi	r2,r2,4
 402e790:	1007883a 	mov	r3,r2
 402e794:	e0bffd17 	ldw	r2,-12(fp)
 402e798:	10800104 	addi	r2,r2,4
 402e79c:	10800017 	ldw	r2,0(r2)
 402e7a0:	18800035 	stwio	r2,0(r3)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, mbox_msg[0]);
 402e7a4:	e0bffe17 	ldw	r2,-8(fp)
 402e7a8:	10800a17 	ldw	r2,40(r2)
 402e7ac:	1007883a 	mov	r3,r2
 402e7b0:	e0bffd17 	ldw	r2,-12(fp)
 402e7b4:	10800017 	ldw	r2,0(r2)
 402e7b8:	18800035 	stwio	r2,0(r3)
        return 0;
 402e7bc:	0005883a 	mov	r2,zero
 402e7c0:	00000106 	br	402e7c8 <altera_avalon_mailbox_post+0x68>
    }
    /* Invalid NULL message received */
    return -EINVAL;
 402e7c4:	00bffa84 	movi	r2,-22
}
 402e7c8:	e037883a 	mov	sp,fp
 402e7cc:	df000017 	ldw	fp,0(sp)
 402e7d0:	dec00104 	addi	sp,sp,4
 402e7d4:	f800283a 	ret

0402e7d8 <altera_avalon_mailbox_simple_tx_isr>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_tx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_tx_isr(void *context, alt_u32 id)
#endif
{
 402e7d8:	defff604 	addi	sp,sp,-40
 402e7dc:	dfc00915 	stw	ra,36(sp)
 402e7e0:	df000815 	stw	fp,32(sp)
 402e7e4:	df000804 	addi	fp,sp,32
 402e7e8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
 402e7ec:	e0bfff17 	ldw	r2,-4(fp)
 402e7f0:	e0bff815 	stw	r2,-32(fp)
    int status = 0;
 402e7f4:	e03ff915 	stw	zero,-28(fp)
    alt_u32 data;
    alt_irq_context cpu_sr;
    alt_u32 *message = dev->mbox_msg;
 402e7f8:	e0bff817 	ldw	r2,-32(fp)
 402e7fc:	10801017 	ldw	r2,64(r2)
 402e800:	e0bffa15 	stw	r2,-24(fp)

    /* Mask mailbox interrupt */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 402e804:	e0bff817 	ldw	r2,-32(fp)
 402e808:	10800a17 	ldw	r2,40(r2)
 402e80c:	10800304 	addi	r2,r2,12
 402e810:	10800037 	ldwio	r2,0(r2)
 402e814:	1007883a 	mov	r3,r2
 402e818:	00bfff44 	movi	r2,-3
 402e81c:	1884703a 	and	r2,r3,r2
 402e820:	e0bffb15 	stw	r2,-20(fp)
               (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
    IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 402e824:	e0bff817 	ldw	r2,-32(fp)
 402e828:	10800a17 	ldw	r2,40(r2)
 402e82c:	10800304 	addi	r2,r2,12
 402e830:	1007883a 	mov	r3,r2
 402e834:	e0bffb17 	ldw	r2,-20(fp)
 402e838:	18800035 	stwio	r2,0(r3)

    if (message != NULL)
 402e83c:	e0bffa17 	ldw	r2,-24(fp)
 402e840:	10002d26 	beq	r2,zero,402e8f8 <altera_avalon_mailbox_simple_tx_isr+0x120>
    {
        /* Post out message requested */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST, message[1]);
 402e844:	e0bff817 	ldw	r2,-32(fp)
 402e848:	10800a17 	ldw	r2,40(r2)
 402e84c:	10800104 	addi	r2,r2,4
 402e850:	1007883a 	mov	r3,r2
 402e854:	e0bffa17 	ldw	r2,-24(fp)
 402e858:	10800104 	addi	r2,r2,4
 402e85c:	10800017 	ldw	r2,0(r2)
 402e860:	18800035 	stwio	r2,0(r3)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, message[0]);
 402e864:	e0bff817 	ldw	r2,-32(fp)
 402e868:	10800a17 	ldw	r2,40(r2)
 402e86c:	1007883a 	mov	r3,r2
 402e870:	e0bffa17 	ldw	r2,-24(fp)
 402e874:	10800017 	ldw	r2,0(r2)
 402e878:	18800035 	stwio	r2,0(r3)
    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 402e87c:	e0bff817 	ldw	r2,-32(fp)
 402e880:	10800a17 	ldw	r2,40(r2)
 402e884:	10800204 	addi	r2,r2,8
 402e888:	10800037 	ldwio	r2,0(r2)
        		  & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
 402e88c:	1080008c 	andi	r2,r2,2
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST, message[0]);
    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
        status = (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 402e890:	1005d07a 	srai	r2,r2,1
 402e894:	e0bff915 	stw	r2,-28(fp)
        		  & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
        if (dev->tx_cb)
 402e898:	e0bff817 	ldw	r2,-32(fp)
 402e89c:	10800d17 	ldw	r2,52(r2)
 402e8a0:	10001126 	beq	r2,zero,402e8e8 <altera_avalon_mailbox_simple_tx_isr+0x110>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402e8a4:	0005303a 	rdctl	r2,status
 402e8a8:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402e8ac:	e0fffd17 	ldw	r3,-12(fp)
 402e8b0:	00bfff84 	movi	r2,-2
 402e8b4:	1884703a 	and	r2,r3,r2
 402e8b8:	1001703a 	wrctl	status,r2
  
  return context;
 402e8bc:	e0bffd17 	ldw	r2,-12(fp)
        {
            cpu_sr = alt_irq_disable_all();
 402e8c0:	e0bffc15 	stw	r2,-16(fp)
  	        (dev->tx_cb)(message, status);
 402e8c4:	e0bff817 	ldw	r2,-32(fp)
 402e8c8:	10800d17 	ldw	r2,52(r2)
 402e8cc:	e17ff917 	ldw	r5,-28(fp)
 402e8d0:	e13ffa17 	ldw	r4,-24(fp)
 402e8d4:	103ee83a 	callr	r2
 402e8d8:	e0bffc17 	ldw	r2,-16(fp)
 402e8dc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402e8e0:	e0bffe17 	ldw	r2,-8(fp)
 402e8e4:	1001703a 	wrctl	status,r2
            alt_irq_enable_all(cpu_sr);
        }
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
 402e8e8:	e0bff817 	ldw	r2,-32(fp)
 402e8ec:	10001015 	stw	zero,64(r2)
        dev->lock = 0;
 402e8f0:	e0bff817 	ldw	r2,-32(fp)
 402e8f4:	10001105 	stb	zero,68(r2)
    }
}
 402e8f8:	0001883a 	nop
 402e8fc:	e037883a 	mov	sp,fp
 402e900:	dfc00117 	ldw	ra,4(sp)
 402e904:	df000017 	ldw	fp,0(sp)
 402e908:	dec00204 	addi	sp,sp,8
 402e90c:	f800283a 	ret

0402e910 <altera_avalon_mailbox_simple_rx_isr>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_mailbox_simple_rx_isr(void *context)
#else
static void altera_avalon_mailbox_simple_rx_isr(void *context, alt_u32 id)
#endif
{
 402e910:	defff704 	addi	sp,sp,-36
 402e914:	dfc00815 	stw	ra,32(sp)
 402e918:	df000715 	stw	fp,28(sp)
 402e91c:	df000704 	addi	fp,sp,28
 402e920:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_mailbox_dev *dev = (altera_avalon_mailbox_dev*) context;
 402e924:	e0bfff17 	ldw	r2,-4(fp)
 402e928:	e0bff915 	stw	r2,-28(fp)
    alt_irq_context cpu_sr;
    alt_u32 inbox[2];

    inbox[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
 402e92c:	e0bff917 	ldw	r2,-28(fp)
 402e930:	10800a17 	ldw	r2,40(r2)
 402e934:	10800104 	addi	r2,r2,4
 402e938:	10800037 	ldwio	r2,0(r2)
 402e93c:	e0bffe15 	stw	r2,-8(fp)
    inbox[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
 402e940:	e0bff917 	ldw	r2,-28(fp)
 402e944:	10800a17 	ldw	r2,40(r2)
 402e948:	10800037 	ldwio	r2,0(r2)
 402e94c:	e0bffd15 	stw	r2,-12(fp)

    /*
     * Other interrupts are explicitly disabled if callbacks are registered
     * because there is no guarantee that they are preemption-safe.
     */
    if (dev->rx_cb)
 402e950:	e0bff917 	ldw	r2,-28(fp)
 402e954:	10800e17 	ldw	r2,56(r2)
 402e958:	10001126 	beq	r2,zero,402e9a0 <altera_avalon_mailbox_simple_rx_isr+0x90>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402e95c:	0005303a 	rdctl	r2,status
 402e960:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402e964:	e0fffb17 	ldw	r3,-20(fp)
 402e968:	00bfff84 	movi	r2,-2
 402e96c:	1884703a 	and	r2,r3,r2
 402e970:	1001703a 	wrctl	status,r2
  
  return context;
 402e974:	e0bffb17 	ldw	r2,-20(fp)
    {
        cpu_sr = alt_irq_disable_all();
 402e978:	e0bffa15 	stw	r2,-24(fp)
        (dev->rx_cb)(inbox);
 402e97c:	e0bff917 	ldw	r2,-28(fp)
 402e980:	10800e17 	ldw	r2,56(r2)
 402e984:	e0fffd04 	addi	r3,fp,-12
 402e988:	1809883a 	mov	r4,r3
 402e98c:	103ee83a 	callr	r2
 402e990:	e0bffa17 	ldw	r2,-24(fp)
 402e994:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402e998:	e0bffc17 	ldw	r2,-16(fp)
 402e99c:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }
}
 402e9a0:	0001883a 	nop
 402e9a4:	e037883a 	mov	sp,fp
 402e9a8:	dfc00117 	ldw	ra,4(sp)
 402e9ac:	df000017 	ldw	fp,0(sp)
 402e9b0:	dec00204 	addi	sp,sp,8
 402e9b4:	f800283a 	ret

0402e9b8 <altera_avalon_mailbox_simple_init>:
 * Altera avalon mailbox init
 * Initialize mailbox device and identify sender/receiver mailbox
 */
void altera_avalon_mailbox_simple_init (altera_avalon_mailbox_dev *dev,
		                               int intr_id, int irq)
{
 402e9b8:	defffb04 	addi	sp,sp,-20
 402e9bc:	dfc00415 	stw	ra,16(sp)
 402e9c0:	df000315 	stw	fp,12(sp)
 402e9c4:	df000304 	addi	fp,sp,12
 402e9c8:	e13ffd15 	stw	r4,-12(fp)
 402e9cc:	e17ffe15 	stw	r5,-8(fp)
 402e9d0:	e1bfff15 	stw	r6,-4(fp)
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_mailbox_simple_list);
 402e9d4:	d1600e04 	addi	r5,gp,-32712
 402e9d8:	e13ffd17 	ldw	r4,-12(fp)
 402e9dc:	402f2f00 	call	402f2f0 <alt_dev_llist_insert>
    
    dev->mailbox_irq    = irq;
 402e9e0:	e0ffff17 	ldw	r3,-4(fp)
 402e9e4:	e0bffd17 	ldw	r2,-12(fp)
 402e9e8:	10c00b15 	stw	r3,44(r2)
    dev->mailbox_intr_ctrl_id = intr_id;
 402e9ec:	e0fffe17 	ldw	r3,-8(fp)
 402e9f0:	e0bffd17 	ldw	r2,-12(fp)
 402e9f4:	10c00c15 	stw	r3,48(r2)
    dev->rx_cb = NULL;
 402e9f8:	e0bffd17 	ldw	r2,-12(fp)
 402e9fc:	10000e15 	stw	zero,56(r2)
    dev->tx_cb = NULL;
 402ea00:	e0bffd17 	ldw	r2,-12(fp)
 402ea04:	10000d15 	stw	zero,52(r2)
    dev->mbox_msg = NULL;
 402ea08:	e0bffd17 	ldw	r2,-12(fp)
 402ea0c:	10001015 	stw	zero,64(r2)
    
    ALT_SEM_CREATE (&dev->write_lock, 1);

    altera_avalon_mailbox_identify(dev);
 402ea10:	e13ffd17 	ldw	r4,-12(fp)
 402ea14:	402e6d00 	call	402e6d0 <altera_avalon_mailbox_identify>
}
 402ea18:	0001883a 	nop
 402ea1c:	e037883a 	mov	sp,fp
 402ea20:	dfc00117 	ldw	ra,4(sp)
 402ea24:	df000017 	ldw	fp,0(sp)
 402ea28:	dec00204 	addi	sp,sp,8
 402ea2c:	f800283a 	ret

0402ea30 <altera_avalon_mailbox_open>:
 * Search the list of registered mailboxes for one with the supplied name.
 * The return value will be NULL on failure, and non-NULL otherwise.
 */
altera_avalon_mailbox_dev* altera_avalon_mailbox_open (const char *name,
		altera_mailbox_tx_cb tx_callback, altera_mailbox_rx_cb rx_callback)
{
 402ea30:	defff804 	addi	sp,sp,-32
 402ea34:	dfc00715 	stw	ra,28(sp)
 402ea38:	df000615 	stw	fp,24(sp)
 402ea3c:	df000604 	addi	fp,sp,24
 402ea40:	e13ffd15 	stw	r4,-12(fp)
 402ea44:	e17ffe15 	stw	r5,-8(fp)
 402ea48:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_mailbox_dev *dev;
    alt_u32 data;

    /* Find requested device */
    dev = (altera_avalon_mailbox_dev*) alt_find_dev (name, &alt_mailbox_simple_list);
 402ea4c:	d1600e04 	addi	r5,gp,-32712
 402ea50:	e13ffd17 	ldw	r4,-12(fp)
 402ea54:	402f4540 	call	402f454 <alt_find_dev>
 402ea58:	e0bffb15 	stw	r2,-20(fp)
    if (dev == NULL)
 402ea5c:	e0bffb17 	ldw	r2,-20(fp)
 402ea60:	1000021e 	bne	r2,zero,402ea6c <altera_avalon_mailbox_open+0x3c>
    {
        return NULL;
 402ea64:	0005883a 	mov	r2,zero
 402ea68:	00006506 	br	402ec00 <altera_avalon_mailbox_open+0x1d0>
    }

    /* Mask mailbox interrupt before ISR is being registered. */
    data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
 402ea6c:	e0bffb17 	ldw	r2,-20(fp)
 402ea70:	10800a17 	ldw	r2,40(r2)
 402ea74:	10800304 	addi	r2,r2,12
 402ea78:	10800037 	ldwio	r2,0(r2)
 402ea7c:	e0bffc15 	stw	r2,-16(fp)
    if (dev->mbox_type == MBOX_TX) {
 402ea80:	e0bffb17 	ldw	r2,-20(fp)
 402ea84:	10800f17 	ldw	r2,60(r2)
 402ea88:	1000081e 	bne	r2,zero,402eaac <altera_avalon_mailbox_open+0x7c>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
 402ea8c:	e0bffb17 	ldw	r2,-20(fp)
 402ea90:	10800a17 	ldw	r2,40(r2)
 402ea94:	10800304 	addi	r2,r2,12
 402ea98:	1009883a 	mov	r4,r2
 402ea9c:	e0fffc17 	ldw	r3,-16(fp)
 402eaa0:	00bfff44 	movi	r2,-3
 402eaa4:	1884703a 	and	r2,r3,r2
 402eaa8:	20800035 	stwio	r2,0(r4)
            (data & ~(ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK)));
    }
    if (dev->mbox_type == MBOX_RX) {
 402eaac:	e0bffb17 	ldw	r2,-20(fp)
 402eab0:	10800f17 	ldw	r2,60(r2)
 402eab4:	10800058 	cmpnei	r2,r2,1
 402eab8:	1000081e 	bne	r2,zero,402eadc <altera_avalon_mailbox_open+0xac>
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, \
 402eabc:	e0bffb17 	ldw	r2,-20(fp)
 402eac0:	10800a17 	ldw	r2,40(r2)
 402eac4:	10800304 	addi	r2,r2,12
 402eac8:	1009883a 	mov	r4,r2
 402eacc:	e0fffc17 	ldw	r3,-16(fp)
 402ead0:	00bfff84 	movi	r2,-2
 402ead4:	1884703a 	and	r2,r3,r2
 402ead8:	20800035 	stwio	r2,0(r4)
    }

    /* If IRQ not connected, return device pointer without ISR register,
     * in polling mode.
     */
    if (dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED)
 402eadc:	e0bffb17 	ldw	r2,-20(fp)
 402eae0:	10800b17 	ldw	r2,44(r2)
 402eae4:	10bfffd8 	cmpnei	r2,r2,-1
 402eae8:	1000021e 	bne	r2,zero,402eaf4 <altera_avalon_mailbox_open+0xc4>
        return dev;
 402eaec:	e0bffb17 	ldw	r2,-20(fp)
 402eaf0:	00004306 	br	402ec00 <altera_avalon_mailbox_open+0x1d0>

    /* For IRQ connected case */

    if ((tx_callback == NULL) && (rx_callback == NULL))
 402eaf4:	e0bffe17 	ldw	r2,-8(fp)
 402eaf8:	1000041e 	bne	r2,zero,402eb0c <altera_avalon_mailbox_open+0xdc>
 402eafc:	e0bfff17 	ldw	r2,-4(fp)
 402eb00:	1000021e 	bne	r2,zero,402eb0c <altera_avalon_mailbox_open+0xdc>
    {
    /* No callback, polling mode */
        return dev;
 402eb04:	e0bffb17 	ldw	r2,-20(fp)
 402eb08:	00003d06 	br	402ec00 <altera_avalon_mailbox_open+0x1d0>
    }

    /* Ensure user correctly use the mailbox
     * Return - Null if wrong direction set
     */
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
 402eb0c:	e0bffb17 	ldw	r2,-20(fp)
 402eb10:	10800f17 	ldw	r2,60(r2)
 402eb14:	1000021e 	bne	r2,zero,402eb20 <altera_avalon_mailbox_open+0xf0>
 402eb18:	e0bfff17 	ldw	r2,-4(fp)
 402eb1c:	1000061e 	bne	r2,zero,402eb38 <altera_avalon_mailbox_open+0x108>
	    ((dev->mbox_type == MBOX_RX) && (tx_callback != NULL)))
 402eb20:	e0bffb17 	ldw	r2,-20(fp)
 402eb24:	10800f17 	ldw	r2,60(r2)
    }

    /* Ensure user correctly use the mailbox
     * Return - Null if wrong direction set
     */
    if (((dev->mbox_type == MBOX_TX) && (rx_callback != NULL)) ||
 402eb28:	10800058 	cmpnei	r2,r2,1
 402eb2c:	1000041e 	bne	r2,zero,402eb40 <altera_avalon_mailbox_open+0x110>
	    ((dev->mbox_type == MBOX_RX) && (tx_callback != NULL)))
 402eb30:	e0bffe17 	ldw	r2,-8(fp)
 402eb34:	10000226 	beq	r2,zero,402eb40 <altera_avalon_mailbox_open+0x110>
  	  /* Invalid callback  */
        return NULL;
 402eb38:	0005883a 	mov	r2,zero
 402eb3c:	00003006 	br	402ec00 <altera_avalon_mailbox_open+0x1d0>

    /* IRQ is valid register callback
     * to current mailbox device
     */
    dev->tx_cb  = tx_callback;
 402eb40:	e0bffb17 	ldw	r2,-20(fp)
 402eb44:	e0fffe17 	ldw	r3,-8(fp)
 402eb48:	10c00d15 	stw	r3,52(r2)
    dev->rx_cb  = rx_callback;
 402eb4c:	e0bffb17 	ldw	r2,-20(fp)
 402eb50:	e0ffff17 	ldw	r3,-4(fp)
 402eb54:	10c00e15 	stw	r3,56(r2)

    /* Register Mailbox's ISR */
    if (dev->mbox_type == MBOX_TX)
 402eb58:	e0bffb17 	ldw	r2,-20(fp)
 402eb5c:	10800f17 	ldw	r2,60(r2)
 402eb60:	10000b1e 	bne	r2,zero,402eb90 <altera_avalon_mailbox_open+0x160>
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_tx_isr,
 402eb64:	e0bffb17 	ldw	r2,-20(fp)
 402eb68:	10c00c17 	ldw	r3,48(r2)
 402eb6c:	e0bffb17 	ldw	r2,-20(fp)
 402eb70:	10800b17 	ldw	r2,44(r2)
 402eb74:	d8000015 	stw	zero,0(sp)
 402eb78:	e1fffb17 	ldw	r7,-20(fp)
 402eb7c:	018100f4 	movhi	r6,1027
 402eb80:	31b9f604 	addi	r6,r6,-6184
 402eb84:	100b883a 	mov	r5,r2
 402eb88:	1809883a 	mov	r4,r3
 402eb8c:	402d18c0 	call	402d18c <alt_ic_isr_register>
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_tx_isr);
    #endif
    }
  
    if (dev->mbox_type == MBOX_RX)
 402eb90:	e0bffb17 	ldw	r2,-20(fp)
 402eb94:	10800f17 	ldw	r2,60(r2)
 402eb98:	10800058 	cmpnei	r2,r2,1
 402eb9c:	1000171e 	bne	r2,zero,402ebfc <altera_avalon_mailbox_open+0x1cc>
    {
    #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, altera_avalon_mailbox_simple_rx_isr,
 402eba0:	e0bffb17 	ldw	r2,-20(fp)
 402eba4:	10c00c17 	ldw	r3,48(r2)
 402eba8:	e0bffb17 	ldw	r2,-20(fp)
 402ebac:	10800b17 	ldw	r2,44(r2)
 402ebb0:	d8000015 	stw	zero,0(sp)
 402ebb4:	e1fffb17 	ldw	r7,-20(fp)
 402ebb8:	018100f4 	movhi	r6,1027
 402ebbc:	31ba4404 	addi	r6,r6,-5872
 402ebc0:	100b883a 	mov	r5,r2
 402ebc4:	1809883a 	mov	r4,r3
 402ebc8:	402d18c0 	call	402d18c <alt_ic_isr_register>
                            dev, NULL);
    #else
        alt_irq_register(dev->mailbox_irq, dev, altera_avalon_mailbox_simple_rx_isr);
    #endif
        /* Enable Receiver interrupt to listen mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
 402ebcc:	e0bffb17 	ldw	r2,-20(fp)
 402ebd0:	10800a17 	ldw	r2,40(r2)
 402ebd4:	10800304 	addi	r2,r2,12
 402ebd8:	10800037 	ldwio	r2,0(r2)
 402ebdc:	10800054 	ori	r2,r2,1
 402ebe0:	e0bffc15 	stw	r2,-16(fp)
  	             (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 402ebe4:	e0bffb17 	ldw	r2,-20(fp)
 402ebe8:	10800a17 	ldw	r2,40(r2)
 402ebec:	10800304 	addi	r2,r2,12
 402ebf0:	1007883a 	mov	r3,r2
 402ebf4:	e0bffc17 	ldw	r2,-16(fp)
 402ebf8:	18800035 	stwio	r2,0(r3)
    }
    return dev;
 402ebfc:	e0bffb17 	ldw	r2,-20(fp)
}
 402ec00:	e037883a 	mov	sp,fp
 402ec04:	dfc00117 	ldw	ra,4(sp)
 402ec08:	df000017 	ldw	fp,0(sp)
 402ec0c:	dec00204 	addi	sp,sp,8
 402ec10:	f800283a 	ret

0402ec14 <altera_avalon_mailbox_close>:
/*
 * altera_avalon_mailbox_close
 * Disable mailbox interrupt and irq
 */
void altera_avalon_mailbox_close (altera_avalon_mailbox_dev *dev)
{
 402ec14:	defffb04 	addi	sp,sp,-20
 402ec18:	dfc00415 	stw	ra,16(sp)
 402ec1c:	df000315 	stw	fp,12(sp)
 402ec20:	df000304 	addi	fp,sp,12
 402ec24:	e13fff15 	stw	r4,-4(fp)
    alt_u32 data;
    if ((dev != NULL) && (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED))
 402ec28:	e0bfff17 	ldw	r2,-4(fp)
 402ec2c:	10003926 	beq	r2,zero,402ed14 <altera_avalon_mailbox_close+0x100>
 402ec30:	e0bfff17 	ldw	r2,-4(fp)
 402ec34:	10800b17 	ldw	r2,44(r2)
 402ec38:	10bfffe0 	cmpeqi	r2,r2,-1
 402ec3c:	1000351e 	bne	r2,zero,402ed14 <altera_avalon_mailbox_close+0x100>
    {
        /* Mask interrupt */
        if (dev->mbox_type == MBOX_TX)
 402ec40:	e0bfff17 	ldw	r2,-4(fp)
 402ec44:	10800f17 	ldw	r2,60(r2)
 402ec48:	10000e1e 	bne	r2,zero,402ec84 <altera_avalon_mailbox_close+0x70>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 402ec4c:	e0bfff17 	ldw	r2,-4(fp)
 402ec50:	10800a17 	ldw	r2,40(r2)
 402ec54:	10800304 	addi	r2,r2,12
 402ec58:	10800037 	ldwio	r2,0(r2)
 402ec5c:	1007883a 	mov	r3,r2
 402ec60:	00bfff44 	movi	r2,-3
 402ec64:	1884703a 	and	r2,r3,r2
 402ec68:	e0bffe15 	stw	r2,-8(fp)
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 402ec6c:	e0bfff17 	ldw	r2,-4(fp)
 402ec70:	10800a17 	ldw	r2,40(r2)
 402ec74:	10800304 	addi	r2,r2,12
 402ec78:	1007883a 	mov	r3,r2
 402ec7c:	e0bffe17 	ldw	r2,-8(fp)
 402ec80:	18800035 	stwio	r2,0(r3)
        }
        if (dev->mbox_type == MBOX_RX)
 402ec84:	e0bfff17 	ldw	r2,-4(fp)
 402ec88:	10800f17 	ldw	r2,60(r2)
 402ec8c:	10800058 	cmpnei	r2,r2,1
 402ec90:	10000e1e 	bne	r2,zero,402eccc <altera_avalon_mailbox_close+0xb8>
        {
            data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) &
 402ec94:	e0bfff17 	ldw	r2,-4(fp)
 402ec98:	10800a17 	ldw	r2,40(r2)
 402ec9c:	10800304 	addi	r2,r2,12
 402eca0:	10800037 	ldwio	r2,0(r2)
 402eca4:	1007883a 	mov	r3,r2
 402eca8:	00bfff84 	movi	r2,-2
 402ecac:	1884703a 	and	r2,r3,r2
 402ecb0:	e0bffe15 	stw	r2,-8(fp)
                       (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK);
            IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 402ecb4:	e0bfff17 	ldw	r2,-4(fp)
 402ecb8:	10800a17 	ldw	r2,40(r2)
 402ecbc:	10800304 	addi	r2,r2,12
 402ecc0:	1007883a 	mov	r3,r2
 402ecc4:	e0bffe17 	ldw	r2,-8(fp)
 402ecc8:	18800035 	stwio	r2,0(r3)
        }
  
        /* De-register mailbox irq) */
        if (dev->mailbox_irq != ALT_IRQ_NOT_CONNECTED)
 402eccc:	e0bfff17 	ldw	r2,-4(fp)
 402ecd0:	10800b17 	ldw	r2,44(r2)
 402ecd4:	10bfffe0 	cmpeqi	r2,r2,-1
 402ecd8:	10000a1e 	bne	r2,zero,402ed04 <altera_avalon_mailbox_close+0xf0>
        {
        #ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
            alt_ic_isr_register(dev->mailbox_intr_ctrl_id, dev->mailbox_irq, NULL,
 402ecdc:	e0bfff17 	ldw	r2,-4(fp)
 402ece0:	10c00c17 	ldw	r3,48(r2)
 402ece4:	e0bfff17 	ldw	r2,-4(fp)
 402ece8:	10800b17 	ldw	r2,44(r2)
 402ecec:	d8000015 	stw	zero,0(sp)
 402ecf0:	e1ffff17 	ldw	r7,-4(fp)
 402ecf4:	000d883a 	mov	r6,zero
 402ecf8:	100b883a 	mov	r5,r2
 402ecfc:	1809883a 	mov	r4,r3
 402ed00:	402d18c0 	call	402d18c <alt_ic_isr_register>
        #else
            alt_irq_register(dev->mailbox_irq, dev, NULL);
        #endif
        }
        /* De-registering callback to mailbox */
        dev->tx_cb  = NULL;
 402ed04:	e0bfff17 	ldw	r2,-4(fp)
 402ed08:	10000d15 	stw	zero,52(r2)
        dev->rx_cb  = NULL;
 402ed0c:	e0bfff17 	ldw	r2,-4(fp)
 402ed10:	10000e15 	stw	zero,56(r2)
    }
}
 402ed14:	0001883a 	nop
 402ed18:	e037883a 	mov	sp,fp
 402ed1c:	dfc00117 	ldw	ra,4(sp)
 402ed20:	df000017 	ldw	fp,0(sp)
 402ed24:	dec00204 	addi	sp,sp,8
 402ed28:	f800283a 	ret

0402ed2c <altera_avalon_mailbox_status>:
 *   Return 0 when mailbox is empty or no pending message
 *   Return 1 when mailbox space is full or there is a message pending
 */

alt_u32 altera_avalon_mailbox_status (altera_avalon_mailbox_dev *dev)
{
 402ed2c:	defffd04 	addi	sp,sp,-12
 402ed30:	df000215 	stw	fp,8(sp)
 402ed34:	df000204 	addi	fp,sp,8
 402ed38:	e13fff15 	stw	r4,-4(fp)
    alt_u32 mailbox_sts = 0;
 402ed3c:	e03ffe15 	stw	zero,-8(fp)

    mailbox_sts = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_STS_OFST) & ALTERA_AVALON_MAILBOX_SIMPLE_STS_MSK);
 402ed40:	e0bfff17 	ldw	r2,-4(fp)
 402ed44:	10800a17 	ldw	r2,40(r2)
 402ed48:	10800204 	addi	r2,r2,8
 402ed4c:	10800037 	ldwio	r2,0(r2)
 402ed50:	108000cc 	andi	r2,r2,3
 402ed54:	e0bffe15 	stw	r2,-8(fp)

    if (dev->mbox_type == MBOX_TX)
 402ed58:	e0bfff17 	ldw	r2,-4(fp)
 402ed5c:	10800f17 	ldw	r2,60(r2)
 402ed60:	1000041e 	bne	r2,zero,402ed74 <altera_avalon_mailbox_status+0x48>
        mailbox_sts = (mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK) >> 1;
 402ed64:	e0bffe17 	ldw	r2,-8(fp)
 402ed68:	1080008c 	andi	r2,r2,2
 402ed6c:	1004d07a 	srli	r2,r2,1
 402ed70:	e0bffe15 	stw	r2,-8(fp)

    if (dev->mbox_type == MBOX_RX)
 402ed74:	e0bfff17 	ldw	r2,-4(fp)
 402ed78:	10800f17 	ldw	r2,60(r2)
 402ed7c:	10800058 	cmpnei	r2,r2,1
 402ed80:	1000031e 	bne	r2,zero,402ed90 <altera_avalon_mailbox_status+0x64>
        mailbox_sts = mailbox_sts & ALTERA_AVALON_MAILBOX_SIMPLE_STS_PENDING_MSK;
 402ed84:	e0bffe17 	ldw	r2,-8(fp)
 402ed88:	1080004c 	andi	r2,r2,1
 402ed8c:	e0bffe15 	stw	r2,-8(fp)

    return mailbox_sts;
 402ed90:	e0bffe17 	ldw	r2,-8(fp)
}
 402ed94:	e037883a 	mov	sp,fp
 402ed98:	df000017 	ldw	fp,0(sp)
 402ed9c:	dec00104 	addi	sp,sp,4
 402eda0:	f800283a 	ret

0402eda4 <altera_avalon_mailbox_send>:
 * For polling mode, '0' timeout value for infinite polling
 * otherwise timeout when expired
 */
int altera_avalon_mailbox_send
(altera_avalon_mailbox_dev *dev, void *message, int timeout, EventType event)
{
 402eda4:	defff704 	addi	sp,sp,-36
 402eda8:	dfc00815 	stw	ra,32(sp)
 402edac:	df000715 	stw	fp,28(sp)
 402edb0:	df000704 	addi	fp,sp,28
 402edb4:	e13ffc15 	stw	r4,-16(fp)
 402edb8:	e17ffd15 	stw	r5,-12(fp)
 402edbc:	e1bffe15 	stw	r6,-8(fp)
 402edc0:	e1ffff15 	stw	r7,-4(fp)
    int status = 0;
 402edc4:	e03ff915 	stw	zero,-28(fp)
     * Obtain the "write_lock"semaphore to ensures 
     * that writing to the device is thread-safe in multi-thread enviroment
     */
    ALT_SEM_PEND (dev->write_lock, 0);

    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 402edc8:	e0bffc17 	ldw	r2,-16(fp)
 402edcc:	10801103 	ldbu	r2,68(r2)
 402edd0:	10803fcc 	andi	r2,r2,255
 402edd4:	1000061e 	bne	r2,zero,402edf0 <altera_avalon_mailbox_send+0x4c>
 402edd8:	e0bffc17 	ldw	r2,-16(fp)
 402eddc:	10800a17 	ldw	r2,40(r2)
 402ede0:	10800204 	addi	r2,r2,8
 402ede4:	10800037 	ldwio	r2,0(r2)
    		          & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK))
 402ede8:	1080008c 	andi	r2,r2,2
     * Obtain the "write_lock"semaphore to ensures 
     * that writing to the device is thread-safe in multi-thread enviroment
     */
    ALT_SEM_PEND (dev->write_lock, 0);

    if (dev->lock || (IORD_ALTERA_AVALON_MAILBOX_STS(dev->base)
 402edec:	10000226 	beq	r2,zero,402edf8 <altera_avalon_mailbox_send+0x54>
    		          & ALTERA_AVALON_MAILBOX_SIMPLE_STS_FULL_MSK))
    {
    	/* dev is lock or no free space to send */
    	return -1;
 402edf0:	00bfffc4 	movi	r2,-1
 402edf4:	00003a06 	br	402eee0 <altera_avalon_mailbox_send+0x13c>
    }
    else
    {
        dev->mbox_msg = message;
 402edf8:	e0bffc17 	ldw	r2,-16(fp)
 402edfc:	e0fffd17 	ldw	r3,-12(fp)
 402ee00:	10c01015 	stw	r3,64(r2)
        dev->lock = 1;
 402ee04:	e0bffc17 	ldw	r2,-16(fp)
 402ee08:	00c00044 	movi	r3,1
 402ee0c:	10c01105 	stb	r3,68(r2)
     */
    ALT_SEM_POST (dev->write_lock);



    if ((dev->mailbox_irq == ALT_IRQ_NOT_CONNECTED) || (event==POLL))
 402ee10:	e0bffc17 	ldw	r2,-16(fp)
 402ee14:	10800b17 	ldw	r2,44(r2)
 402ee18:	10bfffe0 	cmpeqi	r2,r2,-1
 402ee1c:	1000031e 	bne	r2,zero,402ee2c <altera_avalon_mailbox_send+0x88>
 402ee20:	e0bfff17 	ldw	r2,-4(fp)
 402ee24:	10800058 	cmpnei	r2,r2,1
 402ee28:	1000201e 	bne	r2,zero,402eeac <altera_avalon_mailbox_send+0x108>
    {
        /* Polling mode */
        if (timeout ==0)
 402ee2c:	e0bffe17 	ldw	r2,-8(fp)
 402ee30:	1000061e 	bne	r2,zero,402ee4c <altera_avalon_mailbox_send+0xa8>
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
 402ee34:	e13ffc17 	ldw	r4,-16(fp)
 402ee38:	402ed2c0 	call	402ed2c <altera_avalon_mailbox_status>
 402ee3c:	e0bffb15 	stw	r2,-20(fp)
            } while (mbox_status);
 402ee40:	e0bffb17 	ldw	r2,-20(fp)
 402ee44:	103ffb1e 	bne	r2,zero,402ee34 <__flash_rwdata_start+0xffffe958>
 402ee48:	00000e06 	br	402ee84 <altera_avalon_mailbox_send+0xe0>
        } else
        {
            do
            {
                mbox_status = altera_avalon_mailbox_status(dev);
 402ee4c:	e13ffc17 	ldw	r4,-16(fp)
 402ee50:	402ed2c0 	call	402ed2c <altera_avalon_mailbox_status>
 402ee54:	e0bffb15 	stw	r2,-20(fp)
                timeout--;
 402ee58:	e0bffe17 	ldw	r2,-8(fp)
 402ee5c:	10bfffc4 	addi	r2,r2,-1
 402ee60:	e0bffe15 	stw	r2,-8(fp)
            } while (mbox_status && (timeout != 0));
 402ee64:	e0bffb17 	ldw	r2,-20(fp)
 402ee68:	10000226 	beq	r2,zero,402ee74 <altera_avalon_mailbox_send+0xd0>
 402ee6c:	e0bffe17 	ldw	r2,-8(fp)
 402ee70:	103ff61e 	bne	r2,zero,402ee4c <__flash_rwdata_start+0xffffe970>
            if (timeout == 0)
 402ee74:	e0bffe17 	ldw	r2,-8(fp)
 402ee78:	1000021e 	bne	r2,zero,402ee84 <altera_avalon_mailbox_send+0xe0>
            {    /* Timeout occur or fail sending */
                return -ETIME;
 402ee7c:	00bff084 	movi	r2,-62
 402ee80:	00001706 	br	402eee0 <altera_avalon_mailbox_send+0x13c>
            }
        }
        status = altera_avalon_mailbox_post (dev, message);
 402ee84:	e17ffd17 	ldw	r5,-12(fp)
 402ee88:	e13ffc17 	ldw	r4,-16(fp)
 402ee8c:	402e7600 	call	402e760 <altera_avalon_mailbox_post>
 402ee90:	e0bff915 	stw	r2,-28(fp)
        /* Clear mailbox message to NULL after message being posted */
        dev->mbox_msg = NULL;
 402ee94:	e0bffc17 	ldw	r2,-16(fp)
 402ee98:	10001015 	stw	zero,64(r2)
        /* Release lock when message posted */
        dev->lock =0;
 402ee9c:	e0bffc17 	ldw	r2,-16(fp)
 402eea0:	10001105 	stb	zero,68(r2)
        return status;
 402eea4:	e0bff917 	ldw	r2,-28(fp)
 402eea8:	00000d06 	br	402eee0 <altera_avalon_mailbox_send+0x13c>
    } else
    {
        /* Enable Sender interrupt */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST) |
 402eeac:	e0bffc17 	ldw	r2,-16(fp)
 402eeb0:	10800a17 	ldw	r2,40(r2)
 402eeb4:	10800304 	addi	r2,r2,12
 402eeb8:	10800037 	ldwio	r2,0(r2)
 402eebc:	10800094 	ori	r2,r2,2
 402eec0:	e0bffa15 	stw	r2,-24(fp)
                   (ALTERA_AVALON_MAILBOX_SIMPLE_INTR_SPACE_MSK);
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 402eec4:	e0bffc17 	ldw	r2,-16(fp)
 402eec8:	10800a17 	ldw	r2,40(r2)
 402eecc:	10800304 	addi	r2,r2,12
 402eed0:	1007883a 	mov	r3,r2
 402eed4:	e0bffa17 	ldw	r2,-24(fp)
 402eed8:	18800035 	stwio	r2,0(r3)
    }
  return 0;
 402eedc:	0005883a 	mov	r2,zero
}
 402eee0:	e037883a 	mov	sp,fp
 402eee4:	dfc00117 	ldw	ra,4(sp)
 402eee8:	df000017 	ldw	fp,0(sp)
 402eeec:	dec00204 	addi	sp,sp,8
 402eef0:	f800283a 	ret

0402eef4 <altera_avalon_mailbox_retrieve_poll>:
 * If a message is available in the mailbox return it otherwise return NULL
 * This function is blocking
 *
 */
int altera_avalon_mailbox_retrieve_poll (altera_avalon_mailbox_dev *dev, alt_u32 *message, alt_u32 timeout)
{
 402eef4:	defff904 	addi	sp,sp,-28
 402eef8:	dfc00615 	stw	ra,24(sp)
 402eefc:	df000515 	stw	fp,20(sp)
 402ef00:	df000504 	addi	fp,sp,20
 402ef04:	e13ffd15 	stw	r4,-12(fp)
 402ef08:	e17ffe15 	stw	r5,-8(fp)
 402ef0c:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 status = 0;
 402ef10:	e03ffb15 	stw	zero,-20(fp)
    alt_u32 data;

    if (dev != NULL && message != NULL)
 402ef14:	e0bffd17 	ldw	r2,-12(fp)
 402ef18:	10003a26 	beq	r2,zero,402f004 <altera_avalon_mailbox_retrieve_poll+0x110>
 402ef1c:	e0bffe17 	ldw	r2,-8(fp)
 402ef20:	10003826 	beq	r2,zero,402f004 <altera_avalon_mailbox_retrieve_poll+0x110>
    {
        /* Mask receiver mailbox interrupt when in polling mode */
        data = IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST);
 402ef24:	e0bffd17 	ldw	r2,-12(fp)
 402ef28:	10800a17 	ldw	r2,40(r2)
 402ef2c:	10800304 	addi	r2,r2,12
 402ef30:	10800037 	ldwio	r2,0(r2)
 402ef34:	e0bffc15 	stw	r2,-16(fp)
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST,
 402ef38:	e0bffd17 	ldw	r2,-12(fp)
 402ef3c:	10800a17 	ldw	r2,40(r2)
 402ef40:	10800304 	addi	r2,r2,12
 402ef44:	1009883a 	mov	r4,r2
 402ef48:	e0fffc17 	ldw	r3,-16(fp)
 402ef4c:	00bfff84 	movi	r2,-2
 402ef50:	1884703a 	and	r2,r3,r2
 402ef54:	20800035 	stwio	r2,0(r4)
            (data & (~ALTERA_AVALON_MAILBOX_SIMPLE_INTR_PEN_MSK)));


        /* If timeout is '0', poll till message availabe in mailbox */
        if (timeout == 0)
 402ef58:	e0bfff17 	ldw	r2,-4(fp)
 402ef5c:	1000061e 	bne	r2,zero,402ef78 <altera_avalon_mailbox_retrieve_poll+0x84>
        {
            do
            {
                status = altera_avalon_mailbox_status (dev);
 402ef60:	e13ffd17 	ldw	r4,-12(fp)
 402ef64:	402ed2c0 	call	402ed2c <altera_avalon_mailbox_status>
 402ef68:	e0bffb15 	stw	r2,-20(fp)
            } while (status == 0);
 402ef6c:	e0bffb17 	ldw	r2,-20(fp)
 402ef70:	103ffb26 	beq	r2,zero,402ef60 <__flash_rwdata_start+0xffffea84>
 402ef74:	00000a06 	br	402efa0 <altera_avalon_mailbox_retrieve_poll+0xac>
        } else
        {
            do
            {
                 status = altera_avalon_mailbox_status (dev);
 402ef78:	e13ffd17 	ldw	r4,-12(fp)
 402ef7c:	402ed2c0 	call	402ed2c <altera_avalon_mailbox_status>
 402ef80:	e0bffb15 	stw	r2,-20(fp)
                 timeout-- ;
 402ef84:	e0bfff17 	ldw	r2,-4(fp)
 402ef88:	10bfffc4 	addi	r2,r2,-1
 402ef8c:	e0bfff15 	stw	r2,-4(fp)
            } while ((status == 0) && timeout);
 402ef90:	e0bffb17 	ldw	r2,-20(fp)
 402ef94:	1000021e 	bne	r2,zero,402efa0 <altera_avalon_mailbox_retrieve_poll+0xac>
 402ef98:	e0bfff17 	ldw	r2,-4(fp)
 402ef9c:	103ff61e 	bne	r2,zero,402ef78 <__flash_rwdata_start+0xffffea9c>
        }

        /* if timeout, status remain 0 */
        if (status)
 402efa0:	e0bffb17 	ldw	r2,-20(fp)
 402efa4:	10000d26 	beq	r2,zero,402efdc <altera_avalon_mailbox_retrieve_poll+0xe8>
        {
            message[1] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_PTR_OFST));
 402efa8:	e0bffe17 	ldw	r2,-8(fp)
 402efac:	10800104 	addi	r2,r2,4
 402efb0:	e0fffd17 	ldw	r3,-12(fp)
 402efb4:	18c00a17 	ldw	r3,40(r3)
 402efb8:	18c00104 	addi	r3,r3,4
 402efbc:	18c00037 	ldwio	r3,0(r3)
 402efc0:	10c00015 	stw	r3,0(r2)
            message[0] = (IORD(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_CMD_OFST));
 402efc4:	e0bffd17 	ldw	r2,-12(fp)
 402efc8:	10800a17 	ldw	r2,40(r2)
 402efcc:	10800037 	ldwio	r2,0(r2)
 402efd0:	1007883a 	mov	r3,r2
 402efd4:	e0bffe17 	ldw	r2,-8(fp)
 402efd8:	10c00015 	stw	r3,0(r2)
        }
        /* Restore original state of interrupt mask */
        IOWR(dev->base, ALTERA_AVALON_MAILBOX_SIMPLE_INTR_OFST, data);
 402efdc:	e0bffd17 	ldw	r2,-12(fp)
 402efe0:	10800a17 	ldw	r2,40(r2)
 402efe4:	10800304 	addi	r2,r2,12
 402efe8:	1007883a 	mov	r3,r2
 402efec:	e0bffc17 	ldw	r2,-16(fp)
 402eff0:	18800035 	stwio	r2,0(r3)

        /* Return success on complete retrieve message
         * otherwise timeout and exit with error
         */
        if (status)
 402eff4:	e0bffb17 	ldw	r2,-20(fp)
 402eff8:	10000226 	beq	r2,zero,402f004 <altera_avalon_mailbox_retrieve_poll+0x110>
          return 0;
 402effc:	0005883a 	mov	r2,zero
 402f000:	00000606 	br	402f01c <altera_avalon_mailbox_retrieve_poll+0x128>
      }
      /* Invalid Null dev and message */
      message[1] = 0;
 402f004:	e0bffe17 	ldw	r2,-8(fp)
 402f008:	10800104 	addi	r2,r2,4
 402f00c:	10000015 	stw	zero,0(r2)
      message[0] = 0;
 402f010:	e0bffe17 	ldw	r2,-8(fp)
 402f014:	10000015 	stw	zero,0(r2)
      return -EINVAL;
 402f018:	00bffa84 	movi	r2,-22
}
 402f01c:	e037883a 	mov	sp,fp
 402f020:	dfc00117 	ldw	ra,4(sp)
 402f024:	df000017 	ldw	fp,0(sp)
 402f028:	dec00204 	addi	sp,sp,8
 402f02c:	f800283a 	ret

0402f030 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 402f030:	defff504 	addi	sp,sp,-44
 402f034:	df000a15 	stw	fp,40(sp)
 402f038:	df000a04 	addi	fp,sp,40
 402f03c:	e13ffc15 	stw	r4,-16(fp)
 402f040:	e17ffd15 	stw	r5,-12(fp)
 402f044:	e1bffe15 	stw	r6,-8(fp)
 402f048:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 402f04c:	e03ff615 	stw	zero,-40(fp)
 402f050:	d0a02117 	ldw	r2,-32636(gp)
  
  if (alt_ticks_per_second ())
 402f054:	10003c26 	beq	r2,zero,402f148 <alt_alarm_start+0x118>
  {
    if (alarm)
 402f058:	e0bffc17 	ldw	r2,-16(fp)
 402f05c:	10003826 	beq	r2,zero,402f140 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 402f060:	e0bffc17 	ldw	r2,-16(fp)
 402f064:	e0fffe17 	ldw	r3,-8(fp)
 402f068:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 402f06c:	e0bffc17 	ldw	r2,-16(fp)
 402f070:	e0ffff17 	ldw	r3,-4(fp)
 402f074:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402f078:	0005303a 	rdctl	r2,status
 402f07c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402f080:	e0fff917 	ldw	r3,-28(fp)
 402f084:	00bfff84 	movi	r2,-2
 402f088:	1884703a 	and	r2,r3,r2
 402f08c:	1001703a 	wrctl	status,r2
  
  return context;
 402f090:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 402f094:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 402f098:	d0a02217 	ldw	r2,-32632(gp)
      
      current_nticks = alt_nticks();
 402f09c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 402f0a0:	e0fffd17 	ldw	r3,-12(fp)
 402f0a4:	e0bff617 	ldw	r2,-40(fp)
 402f0a8:	1885883a 	add	r2,r3,r2
 402f0ac:	10c00044 	addi	r3,r2,1
 402f0b0:	e0bffc17 	ldw	r2,-16(fp)
 402f0b4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 402f0b8:	e0bffc17 	ldw	r2,-16(fp)
 402f0bc:	10c00217 	ldw	r3,8(r2)
 402f0c0:	e0bff617 	ldw	r2,-40(fp)
 402f0c4:	1880042e 	bgeu	r3,r2,402f0d8 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 402f0c8:	e0bffc17 	ldw	r2,-16(fp)
 402f0cc:	00c00044 	movi	r3,1
 402f0d0:	10c00405 	stb	r3,16(r2)
 402f0d4:	00000206 	br	402f0e0 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 402f0d8:	e0bffc17 	ldw	r2,-16(fp)
 402f0dc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 402f0e0:	e0bffc17 	ldw	r2,-16(fp)
 402f0e4:	d0e01004 	addi	r3,gp,-32704
 402f0e8:	e0fffa15 	stw	r3,-24(fp)
 402f0ec:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 402f0f0:	e0bffb17 	ldw	r2,-20(fp)
 402f0f4:	e0fffa17 	ldw	r3,-24(fp)
 402f0f8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 402f0fc:	e0bffa17 	ldw	r2,-24(fp)
 402f100:	10c00017 	ldw	r3,0(r2)
 402f104:	e0bffb17 	ldw	r2,-20(fp)
 402f108:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 402f10c:	e0bffa17 	ldw	r2,-24(fp)
 402f110:	10800017 	ldw	r2,0(r2)
 402f114:	e0fffb17 	ldw	r3,-20(fp)
 402f118:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 402f11c:	e0bffa17 	ldw	r2,-24(fp)
 402f120:	e0fffb17 	ldw	r3,-20(fp)
 402f124:	10c00015 	stw	r3,0(r2)
 402f128:	e0bff817 	ldw	r2,-32(fp)
 402f12c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402f130:	e0bff717 	ldw	r2,-36(fp)
 402f134:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 402f138:	0005883a 	mov	r2,zero
 402f13c:	00000306 	br	402f14c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 402f140:	00bffa84 	movi	r2,-22
 402f144:	00000106 	br	402f14c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 402f148:	00bfde84 	movi	r2,-134
  }
}
 402f14c:	e037883a 	mov	sp,fp
 402f150:	df000017 	ldw	fp,0(sp)
 402f154:	dec00104 	addi	sp,sp,4
 402f158:	f800283a 	ret

0402f15c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 402f15c:	defffa04 	addi	sp,sp,-24
 402f160:	dfc00515 	stw	ra,20(sp)
 402f164:	df000415 	stw	fp,16(sp)
 402f168:	df000404 	addi	fp,sp,16
 402f16c:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 402f170:	008000c4 	movi	r2,3
 402f174:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 402f178:	e0fffd17 	ldw	r3,-12(fp)
 402f17c:	008003f4 	movhi	r2,15
 402f180:	10909004 	addi	r2,r2,16960
 402f184:	1885383a 	mul	r2,r3,r2
 402f188:	100b883a 	mov	r5,r2
 402f18c:	0100bef4 	movhi	r4,763
 402f190:	213c2004 	addi	r4,r4,-3968
 402f194:	402a7fc0 	call	402a7fc <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 402f198:	100b883a 	mov	r5,r2
 402f19c:	01200034 	movhi	r4,32768
 402f1a0:	213fffc4 	addi	r4,r4,-1
 402f1a4:	402a7fc0 	call	402a7fc <__udivsi3>
 402f1a8:	100b883a 	mov	r5,r2
 402f1ac:	e13fff17 	ldw	r4,-4(fp)
 402f1b0:	402a7fc0 	call	402a7fc <__udivsi3>
 402f1b4:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 402f1b8:	e0bffe17 	ldw	r2,-8(fp)
 402f1bc:	10002a26 	beq	r2,zero,402f268 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 402f1c0:	e03ffc15 	stw	zero,-16(fp)
 402f1c4:	00001706 	br	402f224 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 402f1c8:	00a00034 	movhi	r2,32768
 402f1cc:	10bfffc4 	addi	r2,r2,-1
 402f1d0:	10bfffc4 	addi	r2,r2,-1
 402f1d4:	103ffe1e 	bne	r2,zero,402f1d0 <__flash_rwdata_start+0xffffecf4>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 402f1d8:	e0fffd17 	ldw	r3,-12(fp)
 402f1dc:	008003f4 	movhi	r2,15
 402f1e0:	10909004 	addi	r2,r2,16960
 402f1e4:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 402f1e8:	100b883a 	mov	r5,r2
 402f1ec:	0100bef4 	movhi	r4,763
 402f1f0:	213c2004 	addi	r4,r4,-3968
 402f1f4:	402a7fc0 	call	402a7fc <__udivsi3>
 402f1f8:	100b883a 	mov	r5,r2
 402f1fc:	01200034 	movhi	r4,32768
 402f200:	213fffc4 	addi	r4,r4,-1
 402f204:	402a7fc0 	call	402a7fc <__udivsi3>
 402f208:	1007883a 	mov	r3,r2
 402f20c:	e0bfff17 	ldw	r2,-4(fp)
 402f210:	10c5c83a 	sub	r2,r2,r3
 402f214:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 402f218:	e0bffc17 	ldw	r2,-16(fp)
 402f21c:	10800044 	addi	r2,r2,1
 402f220:	e0bffc15 	stw	r2,-16(fp)
 402f224:	e0fffc17 	ldw	r3,-16(fp)
 402f228:	e0bffe17 	ldw	r2,-8(fp)
 402f22c:	18bfe616 	blt	r3,r2,402f1c8 <__flash_rwdata_start+0xffffecec>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 402f230:	e0fffd17 	ldw	r3,-12(fp)
 402f234:	008003f4 	movhi	r2,15
 402f238:	10909004 	addi	r2,r2,16960
 402f23c:	1885383a 	mul	r2,r3,r2
 402f240:	100b883a 	mov	r5,r2
 402f244:	0100bef4 	movhi	r4,763
 402f248:	213c2004 	addi	r4,r4,-3968
 402f24c:	402a7fc0 	call	402a7fc <__udivsi3>
 402f250:	1007883a 	mov	r3,r2
 402f254:	e0bfff17 	ldw	r2,-4(fp)
 402f258:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 402f25c:	10bfffc4 	addi	r2,r2,-1
 402f260:	103ffe1e 	bne	r2,zero,402f25c <__flash_rwdata_start+0xffffed80>
 402f264:	00000d06 	br	402f29c <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 402f268:	e0fffd17 	ldw	r3,-12(fp)
 402f26c:	008003f4 	movhi	r2,15
 402f270:	10909004 	addi	r2,r2,16960
 402f274:	1885383a 	mul	r2,r3,r2
 402f278:	100b883a 	mov	r5,r2
 402f27c:	0100bef4 	movhi	r4,763
 402f280:	213c2004 	addi	r4,r4,-3968
 402f284:	402a7fc0 	call	402a7fc <__udivsi3>
 402f288:	1007883a 	mov	r3,r2
 402f28c:	e0bfff17 	ldw	r2,-4(fp)
 402f290:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 402f294:	10bfffc4 	addi	r2,r2,-1
 402f298:	00bffe16 	blt	zero,r2,402f294 <__flash_rwdata_start+0xffffedb8>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 402f29c:	0005883a 	mov	r2,zero
}
 402f2a0:	e037883a 	mov	sp,fp
 402f2a4:	dfc00117 	ldw	ra,4(sp)
 402f2a8:	df000017 	ldw	fp,0(sp)
 402f2ac:	dec00204 	addi	sp,sp,8
 402f2b0:	f800283a 	ret

0402f2b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 402f2b4:	defffe04 	addi	sp,sp,-8
 402f2b8:	dfc00115 	stw	ra,4(sp)
 402f2bc:	df000015 	stw	fp,0(sp)
 402f2c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 402f2c4:	d0a00b17 	ldw	r2,-32724(gp)
 402f2c8:	10000326 	beq	r2,zero,402f2d8 <alt_get_errno+0x24>
 402f2cc:	d0a00b17 	ldw	r2,-32724(gp)
 402f2d0:	103ee83a 	callr	r2
 402f2d4:	00000106 	br	402f2dc <alt_get_errno+0x28>
 402f2d8:	d0a01b04 	addi	r2,gp,-32660
}
 402f2dc:	e037883a 	mov	sp,fp
 402f2e0:	dfc00117 	ldw	ra,4(sp)
 402f2e4:	df000017 	ldw	fp,0(sp)
 402f2e8:	dec00204 	addi	sp,sp,8
 402f2ec:	f800283a 	ret

0402f2f0 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 402f2f0:	defffa04 	addi	sp,sp,-24
 402f2f4:	dfc00515 	stw	ra,20(sp)
 402f2f8:	df000415 	stw	fp,16(sp)
 402f2fc:	df000404 	addi	fp,sp,16
 402f300:	e13ffe15 	stw	r4,-8(fp)
 402f304:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 402f308:	e0bffe17 	ldw	r2,-8(fp)
 402f30c:	10000326 	beq	r2,zero,402f31c <alt_dev_llist_insert+0x2c>
 402f310:	e0bffe17 	ldw	r2,-8(fp)
 402f314:	10800217 	ldw	r2,8(r2)
 402f318:	1000061e 	bne	r2,zero,402f334 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 402f31c:	402f2b40 	call	402f2b4 <alt_get_errno>
 402f320:	1007883a 	mov	r3,r2
 402f324:	00800584 	movi	r2,22
 402f328:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 402f32c:	00bffa84 	movi	r2,-22
 402f330:	00001306 	br	402f380 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 402f334:	e0bffe17 	ldw	r2,-8(fp)
 402f338:	e0ffff17 	ldw	r3,-4(fp)
 402f33c:	e0fffc15 	stw	r3,-16(fp)
 402f340:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 402f344:	e0bffd17 	ldw	r2,-12(fp)
 402f348:	e0fffc17 	ldw	r3,-16(fp)
 402f34c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 402f350:	e0bffc17 	ldw	r2,-16(fp)
 402f354:	10c00017 	ldw	r3,0(r2)
 402f358:	e0bffd17 	ldw	r2,-12(fp)
 402f35c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 402f360:	e0bffc17 	ldw	r2,-16(fp)
 402f364:	10800017 	ldw	r2,0(r2)
 402f368:	e0fffd17 	ldw	r3,-12(fp)
 402f36c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 402f370:	e0bffc17 	ldw	r2,-16(fp)
 402f374:	e0fffd17 	ldw	r3,-12(fp)
 402f378:	10c00015 	stw	r3,0(r2)

  return 0;  
 402f37c:	0005883a 	mov	r2,zero
}
 402f380:	e037883a 	mov	sp,fp
 402f384:	dfc00117 	ldw	ra,4(sp)
 402f388:	df000017 	ldw	fp,0(sp)
 402f38c:	dec00204 	addi	sp,sp,8
 402f390:	f800283a 	ret

0402f394 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 402f394:	defffd04 	addi	sp,sp,-12
 402f398:	dfc00215 	stw	ra,8(sp)
 402f39c:	df000115 	stw	fp,4(sp)
 402f3a0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 402f3a4:	008100f4 	movhi	r2,1027
 402f3a8:	10803704 	addi	r2,r2,220
 402f3ac:	e0bfff15 	stw	r2,-4(fp)
 402f3b0:	00000606 	br	402f3cc <_do_ctors+0x38>
        (*ctor) (); 
 402f3b4:	e0bfff17 	ldw	r2,-4(fp)
 402f3b8:	10800017 	ldw	r2,0(r2)
 402f3bc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 402f3c0:	e0bfff17 	ldw	r2,-4(fp)
 402f3c4:	10bfff04 	addi	r2,r2,-4
 402f3c8:	e0bfff15 	stw	r2,-4(fp)
 402f3cc:	e0ffff17 	ldw	r3,-4(fp)
 402f3d0:	008100f4 	movhi	r2,1027
 402f3d4:	10803804 	addi	r2,r2,224
 402f3d8:	18bff62e 	bgeu	r3,r2,402f3b4 <__flash_rwdata_start+0xffffeed8>
        (*ctor) (); 
}
 402f3dc:	0001883a 	nop
 402f3e0:	e037883a 	mov	sp,fp
 402f3e4:	dfc00117 	ldw	ra,4(sp)
 402f3e8:	df000017 	ldw	fp,0(sp)
 402f3ec:	dec00204 	addi	sp,sp,8
 402f3f0:	f800283a 	ret

0402f3f4 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 402f3f4:	defffd04 	addi	sp,sp,-12
 402f3f8:	dfc00215 	stw	ra,8(sp)
 402f3fc:	df000115 	stw	fp,4(sp)
 402f400:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 402f404:	008100f4 	movhi	r2,1027
 402f408:	10803704 	addi	r2,r2,220
 402f40c:	e0bfff15 	stw	r2,-4(fp)
 402f410:	00000606 	br	402f42c <_do_dtors+0x38>
        (*dtor) (); 
 402f414:	e0bfff17 	ldw	r2,-4(fp)
 402f418:	10800017 	ldw	r2,0(r2)
 402f41c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 402f420:	e0bfff17 	ldw	r2,-4(fp)
 402f424:	10bfff04 	addi	r2,r2,-4
 402f428:	e0bfff15 	stw	r2,-4(fp)
 402f42c:	e0ffff17 	ldw	r3,-4(fp)
 402f430:	008100f4 	movhi	r2,1027
 402f434:	10803804 	addi	r2,r2,224
 402f438:	18bff62e 	bgeu	r3,r2,402f414 <__flash_rwdata_start+0xffffef38>
        (*dtor) (); 
}
 402f43c:	0001883a 	nop
 402f440:	e037883a 	mov	sp,fp
 402f444:	dfc00117 	ldw	ra,4(sp)
 402f448:	df000017 	ldw	fp,0(sp)
 402f44c:	dec00204 	addi	sp,sp,8
 402f450:	f800283a 	ret

0402f454 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 402f454:	defffa04 	addi	sp,sp,-24
 402f458:	dfc00515 	stw	ra,20(sp)
 402f45c:	df000415 	stw	fp,16(sp)
 402f460:	df000404 	addi	fp,sp,16
 402f464:	e13ffe15 	stw	r4,-8(fp)
 402f468:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 402f46c:	e0bfff17 	ldw	r2,-4(fp)
 402f470:	10800017 	ldw	r2,0(r2)
 402f474:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 402f478:	e13ffe17 	ldw	r4,-8(fp)
 402f47c:	40207400 	call	4020740 <strlen>
 402f480:	10800044 	addi	r2,r2,1
 402f484:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 402f488:	00000d06 	br	402f4c0 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 402f48c:	e0bffc17 	ldw	r2,-16(fp)
 402f490:	10800217 	ldw	r2,8(r2)
 402f494:	e0fffd17 	ldw	r3,-12(fp)
 402f498:	180d883a 	mov	r6,r3
 402f49c:	e17ffe17 	ldw	r5,-8(fp)
 402f4a0:	1009883a 	mov	r4,r2
 402f4a4:	402fd980 	call	402fd98 <memcmp>
 402f4a8:	1000021e 	bne	r2,zero,402f4b4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 402f4ac:	e0bffc17 	ldw	r2,-16(fp)
 402f4b0:	00000706 	br	402f4d0 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 402f4b4:	e0bffc17 	ldw	r2,-16(fp)
 402f4b8:	10800017 	ldw	r2,0(r2)
 402f4bc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 402f4c0:	e0fffc17 	ldw	r3,-16(fp)
 402f4c4:	e0bfff17 	ldw	r2,-4(fp)
 402f4c8:	18bff01e 	bne	r3,r2,402f48c <__flash_rwdata_start+0xffffefb0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 402f4cc:	0005883a 	mov	r2,zero
}
 402f4d0:	e037883a 	mov	sp,fp
 402f4d4:	dfc00117 	ldw	ra,4(sp)
 402f4d8:	df000017 	ldw	fp,0(sp)
 402f4dc:	dec00204 	addi	sp,sp,8
 402f4e0:	f800283a 	ret

0402f4e4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 402f4e4:	defffe04 	addi	sp,sp,-8
 402f4e8:	dfc00115 	stw	ra,4(sp)
 402f4ec:	df000015 	stw	fp,0(sp)
 402f4f0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 402f4f4:	01440004 	movi	r5,4096
 402f4f8:	0009883a 	mov	r4,zero
 402f4fc:	402fcbc0 	call	402fcbc <alt_icache_flush>
#endif
}
 402f500:	0001883a 	nop
 402f504:	e037883a 	mov	sp,fp
 402f508:	dfc00117 	ldw	ra,4(sp)
 402f50c:	df000017 	ldw	fp,0(sp)
 402f510:	dec00204 	addi	sp,sp,8
 402f514:	f800283a 	ret

0402f518 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 402f518:	defffe04 	addi	sp,sp,-8
 402f51c:	df000115 	stw	fp,4(sp)
 402f520:	df000104 	addi	fp,sp,4
 402f524:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 402f528:	e0bfff17 	ldw	r2,-4(fp)
 402f52c:	10bffe84 	addi	r2,r2,-6
 402f530:	10c00428 	cmpgeui	r3,r2,16
 402f534:	18001a1e 	bne	r3,zero,402f5a0 <alt_exception_cause_generated_bad_addr+0x88>
 402f538:	100690ba 	slli	r3,r2,2
 402f53c:	008100f4 	movhi	r2,1027
 402f540:	10bd5404 	addi	r2,r2,-2736
 402f544:	1885883a 	add	r2,r3,r2
 402f548:	10800017 	ldw	r2,0(r2)
 402f54c:	1000683a 	jmp	r2
 402f550:	0402f590 	cmplti	r16,zero,3030
 402f554:	0402f590 	cmplti	r16,zero,3030
 402f558:	0402f5a0 	cmpeqi	r16,zero,3030
 402f55c:	0402f5a0 	cmpeqi	r16,zero,3030
 402f560:	0402f5a0 	cmpeqi	r16,zero,3030
 402f564:	0402f590 	cmplti	r16,zero,3030
 402f568:	0402f598 	cmpnei	r16,zero,3030
 402f56c:	0402f5a0 	cmpeqi	r16,zero,3030
 402f570:	0402f590 	cmplti	r16,zero,3030
 402f574:	0402f590 	cmplti	r16,zero,3030
 402f578:	0402f5a0 	cmpeqi	r16,zero,3030
 402f57c:	0402f590 	cmplti	r16,zero,3030
 402f580:	0402f598 	cmpnei	r16,zero,3030
 402f584:	0402f5a0 	cmpeqi	r16,zero,3030
 402f588:	0402f5a0 	cmpeqi	r16,zero,3030
 402f58c:	0402f590 	cmplti	r16,zero,3030
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 402f590:	00800044 	movi	r2,1
 402f594:	00000306 	br	402f5a4 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 402f598:	0005883a 	mov	r2,zero
 402f59c:	00000106 	br	402f5a4 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 402f5a0:	0005883a 	mov	r2,zero
  }
}
 402f5a4:	e037883a 	mov	sp,fp
 402f5a8:	df000017 	ldw	fp,0(sp)
 402f5ac:	dec00104 	addi	sp,sp,4
 402f5b0:	f800283a 	ret

0402f5b4 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 402f5b4:	defff904 	addi	sp,sp,-28
 402f5b8:	dfc00615 	stw	ra,24(sp)
 402f5bc:	df000515 	stw	fp,20(sp)
 402f5c0:	df000504 	addi	fp,sp,20
 402f5c4:	e13ffc15 	stw	r4,-16(fp)
 402f5c8:	e17ffd15 	stw	r5,-12(fp)
 402f5cc:	e1bffe15 	stw	r6,-8(fp)
 402f5d0:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 402f5d4:	e1bfff17 	ldw	r6,-4(fp)
 402f5d8:	e17ffe17 	ldw	r5,-8(fp)
 402f5dc:	e13ffd17 	ldw	r4,-12(fp)
 402f5e0:	402f7f40 	call	402f7f4 <open>
 402f5e4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 402f5e8:	e0bffb17 	ldw	r2,-20(fp)
 402f5ec:	10001c16 	blt	r2,zero,402f660 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 402f5f0:	00800034 	movhi	r2,0
 402f5f4:	10833204 	addi	r2,r2,3272
 402f5f8:	e0fffb17 	ldw	r3,-20(fp)
 402f5fc:	18c00324 	muli	r3,r3,12
 402f600:	10c5883a 	add	r2,r2,r3
 402f604:	10c00017 	ldw	r3,0(r2)
 402f608:	e0bffc17 	ldw	r2,-16(fp)
 402f60c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 402f610:	00800034 	movhi	r2,0
 402f614:	10833204 	addi	r2,r2,3272
 402f618:	e0fffb17 	ldw	r3,-20(fp)
 402f61c:	18c00324 	muli	r3,r3,12
 402f620:	10c5883a 	add	r2,r2,r3
 402f624:	10800104 	addi	r2,r2,4
 402f628:	10c00017 	ldw	r3,0(r2)
 402f62c:	e0bffc17 	ldw	r2,-16(fp)
 402f630:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 402f634:	00800034 	movhi	r2,0
 402f638:	10833204 	addi	r2,r2,3272
 402f63c:	e0fffb17 	ldw	r3,-20(fp)
 402f640:	18c00324 	muli	r3,r3,12
 402f644:	10c5883a 	add	r2,r2,r3
 402f648:	10800204 	addi	r2,r2,8
 402f64c:	10c00017 	ldw	r3,0(r2)
 402f650:	e0bffc17 	ldw	r2,-16(fp)
 402f654:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 402f658:	e13ffb17 	ldw	r4,-20(fp)
 402f65c:	402d9040 	call	402d904 <alt_release_fd>
  }
} 
 402f660:	0001883a 	nop
 402f664:	e037883a 	mov	sp,fp
 402f668:	dfc00117 	ldw	ra,4(sp)
 402f66c:	df000017 	ldw	fp,0(sp)
 402f670:	dec00204 	addi	sp,sp,8
 402f674:	f800283a 	ret

0402f678 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 402f678:	defffb04 	addi	sp,sp,-20
 402f67c:	dfc00415 	stw	ra,16(sp)
 402f680:	df000315 	stw	fp,12(sp)
 402f684:	df000304 	addi	fp,sp,12
 402f688:	e13ffd15 	stw	r4,-12(fp)
 402f68c:	e17ffe15 	stw	r5,-8(fp)
 402f690:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 402f694:	01c07fc4 	movi	r7,511
 402f698:	01800044 	movi	r6,1
 402f69c:	e17ffd17 	ldw	r5,-12(fp)
 402f6a0:	01000034 	movhi	r4,0
 402f6a4:	21033504 	addi	r4,r4,3284
 402f6a8:	402f5b40 	call	402f5b4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 402f6ac:	01c07fc4 	movi	r7,511
 402f6b0:	000d883a 	mov	r6,zero
 402f6b4:	e17ffe17 	ldw	r5,-8(fp)
 402f6b8:	01000034 	movhi	r4,0
 402f6bc:	21033204 	addi	r4,r4,3272
 402f6c0:	402f5b40 	call	402f5b4 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 402f6c4:	01c07fc4 	movi	r7,511
 402f6c8:	01800044 	movi	r6,1
 402f6cc:	e17fff17 	ldw	r5,-4(fp)
 402f6d0:	01000034 	movhi	r4,0
 402f6d4:	21033804 	addi	r4,r4,3296
 402f6d8:	402f5b40 	call	402f5b4 <alt_open_fd>
}  
 402f6dc:	0001883a 	nop
 402f6e0:	e037883a 	mov	sp,fp
 402f6e4:	dfc00117 	ldw	ra,4(sp)
 402f6e8:	df000017 	ldw	fp,0(sp)
 402f6ec:	dec00204 	addi	sp,sp,8
 402f6f0:	f800283a 	ret

0402f6f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 402f6f4:	defffe04 	addi	sp,sp,-8
 402f6f8:	dfc00115 	stw	ra,4(sp)
 402f6fc:	df000015 	stw	fp,0(sp)
 402f700:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 402f704:	d0a00b17 	ldw	r2,-32724(gp)
 402f708:	10000326 	beq	r2,zero,402f718 <alt_get_errno+0x24>
 402f70c:	d0a00b17 	ldw	r2,-32724(gp)
 402f710:	103ee83a 	callr	r2
 402f714:	00000106 	br	402f71c <alt_get_errno+0x28>
 402f718:	d0a01b04 	addi	r2,gp,-32660
}
 402f71c:	e037883a 	mov	sp,fp
 402f720:	dfc00117 	ldw	ra,4(sp)
 402f724:	df000017 	ldw	fp,0(sp)
 402f728:	dec00204 	addi	sp,sp,8
 402f72c:	f800283a 	ret

0402f730 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 402f730:	defffd04 	addi	sp,sp,-12
 402f734:	df000215 	stw	fp,8(sp)
 402f738:	df000204 	addi	fp,sp,8
 402f73c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 402f740:	e0bfff17 	ldw	r2,-4(fp)
 402f744:	10800217 	ldw	r2,8(r2)
 402f748:	10d00034 	orhi	r3,r2,16384
 402f74c:	e0bfff17 	ldw	r2,-4(fp)
 402f750:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 402f754:	e03ffe15 	stw	zero,-8(fp)
 402f758:	00001d06 	br	402f7d0 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 402f75c:	00800034 	movhi	r2,0
 402f760:	10833204 	addi	r2,r2,3272
 402f764:	e0fffe17 	ldw	r3,-8(fp)
 402f768:	18c00324 	muli	r3,r3,12
 402f76c:	10c5883a 	add	r2,r2,r3
 402f770:	10c00017 	ldw	r3,0(r2)
 402f774:	e0bfff17 	ldw	r2,-4(fp)
 402f778:	10800017 	ldw	r2,0(r2)
 402f77c:	1880111e 	bne	r3,r2,402f7c4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 402f780:	00800034 	movhi	r2,0
 402f784:	10833204 	addi	r2,r2,3272
 402f788:	e0fffe17 	ldw	r3,-8(fp)
 402f78c:	18c00324 	muli	r3,r3,12
 402f790:	10c5883a 	add	r2,r2,r3
 402f794:	10800204 	addi	r2,r2,8
 402f798:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 402f79c:	1000090e 	bge	r2,zero,402f7c4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 402f7a0:	e0bffe17 	ldw	r2,-8(fp)
 402f7a4:	10c00324 	muli	r3,r2,12
 402f7a8:	00800034 	movhi	r2,0
 402f7ac:	10833204 	addi	r2,r2,3272
 402f7b0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 402f7b4:	e0bfff17 	ldw	r2,-4(fp)
 402f7b8:	18800226 	beq	r3,r2,402f7c4 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 402f7bc:	00bffcc4 	movi	r2,-13
 402f7c0:	00000806 	br	402f7e4 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 402f7c4:	e0bffe17 	ldw	r2,-8(fp)
 402f7c8:	10800044 	addi	r2,r2,1
 402f7cc:	e0bffe15 	stw	r2,-8(fp)
 402f7d0:	d0a00a17 	ldw	r2,-32728(gp)
 402f7d4:	1007883a 	mov	r3,r2
 402f7d8:	e0bffe17 	ldw	r2,-8(fp)
 402f7dc:	18bfdf2e 	bgeu	r3,r2,402f75c <__flash_rwdata_start+0xfffff280>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 402f7e0:	0005883a 	mov	r2,zero
}
 402f7e4:	e037883a 	mov	sp,fp
 402f7e8:	df000017 	ldw	fp,0(sp)
 402f7ec:	dec00104 	addi	sp,sp,4
 402f7f0:	f800283a 	ret

0402f7f4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 402f7f4:	defff604 	addi	sp,sp,-40
 402f7f8:	dfc00915 	stw	ra,36(sp)
 402f7fc:	df000815 	stw	fp,32(sp)
 402f800:	df000804 	addi	fp,sp,32
 402f804:	e13ffd15 	stw	r4,-12(fp)
 402f808:	e17ffe15 	stw	r5,-8(fp)
 402f80c:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 402f810:	00bfffc4 	movi	r2,-1
 402f814:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 402f818:	00bffb44 	movi	r2,-19
 402f81c:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 402f820:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 402f824:	d1600804 	addi	r5,gp,-32736
 402f828:	e13ffd17 	ldw	r4,-12(fp)
 402f82c:	402f4540 	call	402f454 <alt_find_dev>
 402f830:	e0bff815 	stw	r2,-32(fp)
 402f834:	e0bff817 	ldw	r2,-32(fp)
 402f838:	1000051e 	bne	r2,zero,402f850 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 402f83c:	e13ffd17 	ldw	r4,-12(fp)
 402f840:	402fb100 	call	402fb10 <alt_find_file>
 402f844:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 402f848:	00800044 	movi	r2,1
 402f84c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 402f850:	e0bff817 	ldw	r2,-32(fp)
 402f854:	10002926 	beq	r2,zero,402f8fc <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 402f858:	e13ff817 	ldw	r4,-32(fp)
 402f85c:	402fc180 	call	402fc18 <alt_get_fd>
 402f860:	e0bff915 	stw	r2,-28(fp)
 402f864:	e0bff917 	ldw	r2,-28(fp)
 402f868:	1000030e 	bge	r2,zero,402f878 <open+0x84>
    {
      status = index;
 402f86c:	e0bff917 	ldw	r2,-28(fp)
 402f870:	e0bffa15 	stw	r2,-24(fp)
 402f874:	00002306 	br	402f904 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 402f878:	e0bff917 	ldw	r2,-28(fp)
 402f87c:	10c00324 	muli	r3,r2,12
 402f880:	00800034 	movhi	r2,0
 402f884:	10833204 	addi	r2,r2,3272
 402f888:	1885883a 	add	r2,r3,r2
 402f88c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 402f890:	e0fffe17 	ldw	r3,-8(fp)
 402f894:	00900034 	movhi	r2,16384
 402f898:	10bfffc4 	addi	r2,r2,-1
 402f89c:	1886703a 	and	r3,r3,r2
 402f8a0:	e0bffc17 	ldw	r2,-16(fp)
 402f8a4:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 402f8a8:	e0bffb17 	ldw	r2,-20(fp)
 402f8ac:	1000051e 	bne	r2,zero,402f8c4 <open+0xd0>
 402f8b0:	e13ffc17 	ldw	r4,-16(fp)
 402f8b4:	402f7300 	call	402f730 <alt_file_locked>
 402f8b8:	e0bffa15 	stw	r2,-24(fp)
 402f8bc:	e0bffa17 	ldw	r2,-24(fp)
 402f8c0:	10001016 	blt	r2,zero,402f904 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 402f8c4:	e0bff817 	ldw	r2,-32(fp)
 402f8c8:	10800317 	ldw	r2,12(r2)
 402f8cc:	10000826 	beq	r2,zero,402f8f0 <open+0xfc>
 402f8d0:	e0bff817 	ldw	r2,-32(fp)
 402f8d4:	10800317 	ldw	r2,12(r2)
 402f8d8:	e1ffff17 	ldw	r7,-4(fp)
 402f8dc:	e1bffe17 	ldw	r6,-8(fp)
 402f8e0:	e17ffd17 	ldw	r5,-12(fp)
 402f8e4:	e13ffc17 	ldw	r4,-16(fp)
 402f8e8:	103ee83a 	callr	r2
 402f8ec:	00000106 	br	402f8f4 <open+0x100>
 402f8f0:	0005883a 	mov	r2,zero
 402f8f4:	e0bffa15 	stw	r2,-24(fp)
 402f8f8:	00000206 	br	402f904 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 402f8fc:	00bffb44 	movi	r2,-19
 402f900:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 402f904:	e0bffa17 	ldw	r2,-24(fp)
 402f908:	1000090e 	bge	r2,zero,402f930 <open+0x13c>
  {
    alt_release_fd (index);  
 402f90c:	e13ff917 	ldw	r4,-28(fp)
 402f910:	402d9040 	call	402d904 <alt_release_fd>
    ALT_ERRNO = -status;
 402f914:	402f6f40 	call	402f6f4 <alt_get_errno>
 402f918:	1007883a 	mov	r3,r2
 402f91c:	e0bffa17 	ldw	r2,-24(fp)
 402f920:	0085c83a 	sub	r2,zero,r2
 402f924:	18800015 	stw	r2,0(r3)
    return -1;
 402f928:	00bfffc4 	movi	r2,-1
 402f92c:	00000106 	br	402f934 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 402f930:	e0bff917 	ldw	r2,-28(fp)
}
 402f934:	e037883a 	mov	sp,fp
 402f938:	dfc00117 	ldw	ra,4(sp)
 402f93c:	df000017 	ldw	fp,0(sp)
 402f940:	dec00204 	addi	sp,sp,8
 402f944:	f800283a 	ret

0402f948 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 402f948:	defffa04 	addi	sp,sp,-24
 402f94c:	df000515 	stw	fp,20(sp)
 402f950:	df000504 	addi	fp,sp,20
 402f954:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 402f958:	0005303a 	rdctl	r2,status
 402f95c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 402f960:	e0fffc17 	ldw	r3,-16(fp)
 402f964:	00bfff84 	movi	r2,-2
 402f968:	1884703a 	and	r2,r3,r2
 402f96c:	1001703a 	wrctl	status,r2
  
  return context;
 402f970:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 402f974:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 402f978:	e0bfff17 	ldw	r2,-4(fp)
 402f97c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 402f980:	e0bffd17 	ldw	r2,-12(fp)
 402f984:	10800017 	ldw	r2,0(r2)
 402f988:	e0fffd17 	ldw	r3,-12(fp)
 402f98c:	18c00117 	ldw	r3,4(r3)
 402f990:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 402f994:	e0bffd17 	ldw	r2,-12(fp)
 402f998:	10800117 	ldw	r2,4(r2)
 402f99c:	e0fffd17 	ldw	r3,-12(fp)
 402f9a0:	18c00017 	ldw	r3,0(r3)
 402f9a4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 402f9a8:	e0bffd17 	ldw	r2,-12(fp)
 402f9ac:	e0fffd17 	ldw	r3,-12(fp)
 402f9b0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 402f9b4:	e0bffd17 	ldw	r2,-12(fp)
 402f9b8:	e0fffd17 	ldw	r3,-12(fp)
 402f9bc:	10c00015 	stw	r3,0(r2)
 402f9c0:	e0bffb17 	ldw	r2,-20(fp)
 402f9c4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 402f9c8:	e0bffe17 	ldw	r2,-8(fp)
 402f9cc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 402f9d0:	0001883a 	nop
 402f9d4:	e037883a 	mov	sp,fp
 402f9d8:	df000017 	ldw	fp,0(sp)
 402f9dc:	dec00104 	addi	sp,sp,4
 402f9e0:	f800283a 	ret

0402f9e4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 402f9e4:	defffb04 	addi	sp,sp,-20
 402f9e8:	dfc00415 	stw	ra,16(sp)
 402f9ec:	df000315 	stw	fp,12(sp)
 402f9f0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 402f9f4:	d0a01017 	ldw	r2,-32704(gp)
 402f9f8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 402f9fc:	d0a02217 	ldw	r2,-32632(gp)
 402fa00:	10800044 	addi	r2,r2,1
 402fa04:	d0a02215 	stw	r2,-32632(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 402fa08:	00002e06 	br	402fac4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 402fa0c:	e0bffd17 	ldw	r2,-12(fp)
 402fa10:	10800017 	ldw	r2,0(r2)
 402fa14:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 402fa18:	e0bffd17 	ldw	r2,-12(fp)
 402fa1c:	10800403 	ldbu	r2,16(r2)
 402fa20:	10803fcc 	andi	r2,r2,255
 402fa24:	10000426 	beq	r2,zero,402fa38 <alt_tick+0x54>
 402fa28:	d0a02217 	ldw	r2,-32632(gp)
 402fa2c:	1000021e 	bne	r2,zero,402fa38 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 402fa30:	e0bffd17 	ldw	r2,-12(fp)
 402fa34:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 402fa38:	e0bffd17 	ldw	r2,-12(fp)
 402fa3c:	10800217 	ldw	r2,8(r2)
 402fa40:	d0e02217 	ldw	r3,-32632(gp)
 402fa44:	18801d36 	bltu	r3,r2,402fabc <alt_tick+0xd8>
 402fa48:	e0bffd17 	ldw	r2,-12(fp)
 402fa4c:	10800403 	ldbu	r2,16(r2)
 402fa50:	10803fcc 	andi	r2,r2,255
 402fa54:	1000191e 	bne	r2,zero,402fabc <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 402fa58:	e0bffd17 	ldw	r2,-12(fp)
 402fa5c:	10800317 	ldw	r2,12(r2)
 402fa60:	e0fffd17 	ldw	r3,-12(fp)
 402fa64:	18c00517 	ldw	r3,20(r3)
 402fa68:	1809883a 	mov	r4,r3
 402fa6c:	103ee83a 	callr	r2
 402fa70:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 402fa74:	e0bfff17 	ldw	r2,-4(fp)
 402fa78:	1000031e 	bne	r2,zero,402fa88 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 402fa7c:	e13ffd17 	ldw	r4,-12(fp)
 402fa80:	402f9480 	call	402f948 <alt_alarm_stop>
 402fa84:	00000d06 	br	402fabc <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 402fa88:	e0bffd17 	ldw	r2,-12(fp)
 402fa8c:	10c00217 	ldw	r3,8(r2)
 402fa90:	e0bfff17 	ldw	r2,-4(fp)
 402fa94:	1887883a 	add	r3,r3,r2
 402fa98:	e0bffd17 	ldw	r2,-12(fp)
 402fa9c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 402faa0:	e0bffd17 	ldw	r2,-12(fp)
 402faa4:	10c00217 	ldw	r3,8(r2)
 402faa8:	d0a02217 	ldw	r2,-32632(gp)
 402faac:	1880032e 	bgeu	r3,r2,402fabc <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 402fab0:	e0bffd17 	ldw	r2,-12(fp)
 402fab4:	00c00044 	movi	r3,1
 402fab8:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 402fabc:	e0bffe17 	ldw	r2,-8(fp)
 402fac0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 402fac4:	e0fffd17 	ldw	r3,-12(fp)
 402fac8:	d0a01004 	addi	r2,gp,-32704
 402facc:	18bfcf1e 	bne	r3,r2,402fa0c <__flash_rwdata_start+0xfffff530>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 402fad0:	0001883a 	nop
}
 402fad4:	0001883a 	nop
 402fad8:	e037883a 	mov	sp,fp
 402fadc:	dfc00117 	ldw	ra,4(sp)
 402fae0:	df000017 	ldw	fp,0(sp)
 402fae4:	dec00204 	addi	sp,sp,8
 402fae8:	f800283a 	ret

0402faec <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 402faec:	deffff04 	addi	sp,sp,-4
 402faf0:	df000015 	stw	fp,0(sp)
 402faf4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 402faf8:	000170fa 	wrctl	ienable,zero
}
 402fafc:	0001883a 	nop
 402fb00:	e037883a 	mov	sp,fp
 402fb04:	df000017 	ldw	fp,0(sp)
 402fb08:	dec00104 	addi	sp,sp,4
 402fb0c:	f800283a 	ret

0402fb10 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 402fb10:	defffb04 	addi	sp,sp,-20
 402fb14:	dfc00415 	stw	ra,16(sp)
 402fb18:	df000315 	stw	fp,12(sp)
 402fb1c:	df000304 	addi	fp,sp,12
 402fb20:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 402fb24:	d0a00617 	ldw	r2,-32744(gp)
 402fb28:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 402fb2c:	00003106 	br	402fbf4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 402fb30:	e0bffd17 	ldw	r2,-12(fp)
 402fb34:	10800217 	ldw	r2,8(r2)
 402fb38:	1009883a 	mov	r4,r2
 402fb3c:	40207400 	call	4020740 <strlen>
 402fb40:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 402fb44:	e0bffd17 	ldw	r2,-12(fp)
 402fb48:	10c00217 	ldw	r3,8(r2)
 402fb4c:	e0bffe17 	ldw	r2,-8(fp)
 402fb50:	10bfffc4 	addi	r2,r2,-1
 402fb54:	1885883a 	add	r2,r3,r2
 402fb58:	10800003 	ldbu	r2,0(r2)
 402fb5c:	10803fcc 	andi	r2,r2,255
 402fb60:	1080201c 	xori	r2,r2,128
 402fb64:	10bfe004 	addi	r2,r2,-128
 402fb68:	10800bd8 	cmpnei	r2,r2,47
 402fb6c:	1000031e 	bne	r2,zero,402fb7c <alt_find_file+0x6c>
    {
      len -= 1;
 402fb70:	e0bffe17 	ldw	r2,-8(fp)
 402fb74:	10bfffc4 	addi	r2,r2,-1
 402fb78:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 402fb7c:	e0bffe17 	ldw	r2,-8(fp)
 402fb80:	e0ffff17 	ldw	r3,-4(fp)
 402fb84:	1885883a 	add	r2,r3,r2
 402fb88:	10800003 	ldbu	r2,0(r2)
 402fb8c:	10803fcc 	andi	r2,r2,255
 402fb90:	1080201c 	xori	r2,r2,128
 402fb94:	10bfe004 	addi	r2,r2,-128
 402fb98:	10800be0 	cmpeqi	r2,r2,47
 402fb9c:	1000081e 	bne	r2,zero,402fbc0 <alt_find_file+0xb0>
 402fba0:	e0bffe17 	ldw	r2,-8(fp)
 402fba4:	e0ffff17 	ldw	r3,-4(fp)
 402fba8:	1885883a 	add	r2,r3,r2
 402fbac:	10800003 	ldbu	r2,0(r2)
 402fbb0:	10803fcc 	andi	r2,r2,255
 402fbb4:	1080201c 	xori	r2,r2,128
 402fbb8:	10bfe004 	addi	r2,r2,-128
 402fbbc:	10000a1e 	bne	r2,zero,402fbe8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 402fbc0:	e0bffd17 	ldw	r2,-12(fp)
 402fbc4:	10800217 	ldw	r2,8(r2)
 402fbc8:	e0fffe17 	ldw	r3,-8(fp)
 402fbcc:	180d883a 	mov	r6,r3
 402fbd0:	e17fff17 	ldw	r5,-4(fp)
 402fbd4:	1009883a 	mov	r4,r2
 402fbd8:	402fd980 	call	402fd98 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 402fbdc:	1000021e 	bne	r2,zero,402fbe8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 402fbe0:	e0bffd17 	ldw	r2,-12(fp)
 402fbe4:	00000706 	br	402fc04 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 402fbe8:	e0bffd17 	ldw	r2,-12(fp)
 402fbec:	10800017 	ldw	r2,0(r2)
 402fbf0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 402fbf4:	e0fffd17 	ldw	r3,-12(fp)
 402fbf8:	d0a00604 	addi	r2,gp,-32744
 402fbfc:	18bfcc1e 	bne	r3,r2,402fb30 <__flash_rwdata_start+0xfffff654>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 402fc00:	0005883a 	mov	r2,zero
}
 402fc04:	e037883a 	mov	sp,fp
 402fc08:	dfc00117 	ldw	ra,4(sp)
 402fc0c:	df000017 	ldw	fp,0(sp)
 402fc10:	dec00204 	addi	sp,sp,8
 402fc14:	f800283a 	ret

0402fc18 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 402fc18:	defffc04 	addi	sp,sp,-16
 402fc1c:	df000315 	stw	fp,12(sp)
 402fc20:	df000304 	addi	fp,sp,12
 402fc24:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 402fc28:	00bffa04 	movi	r2,-24
 402fc2c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 402fc30:	e03ffd15 	stw	zero,-12(fp)
 402fc34:	00001906 	br	402fc9c <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 402fc38:	00800034 	movhi	r2,0
 402fc3c:	10833204 	addi	r2,r2,3272
 402fc40:	e0fffd17 	ldw	r3,-12(fp)
 402fc44:	18c00324 	muli	r3,r3,12
 402fc48:	10c5883a 	add	r2,r2,r3
 402fc4c:	10800017 	ldw	r2,0(r2)
 402fc50:	10000f1e 	bne	r2,zero,402fc90 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 402fc54:	00800034 	movhi	r2,0
 402fc58:	10833204 	addi	r2,r2,3272
 402fc5c:	e0fffd17 	ldw	r3,-12(fp)
 402fc60:	18c00324 	muli	r3,r3,12
 402fc64:	10c5883a 	add	r2,r2,r3
 402fc68:	e0ffff17 	ldw	r3,-4(fp)
 402fc6c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 402fc70:	d0e00a17 	ldw	r3,-32728(gp)
 402fc74:	e0bffd17 	ldw	r2,-12(fp)
 402fc78:	1880020e 	bge	r3,r2,402fc84 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 402fc7c:	e0bffd17 	ldw	r2,-12(fp)
 402fc80:	d0a00a15 	stw	r2,-32728(gp)
      }
      rc = i;
 402fc84:	e0bffd17 	ldw	r2,-12(fp)
 402fc88:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 402fc8c:	00000606 	br	402fca8 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 402fc90:	e0bffd17 	ldw	r2,-12(fp)
 402fc94:	10800044 	addi	r2,r2,1
 402fc98:	e0bffd15 	stw	r2,-12(fp)
 402fc9c:	e0bffd17 	ldw	r2,-12(fp)
 402fca0:	10800810 	cmplti	r2,r2,32
 402fca4:	103fe41e 	bne	r2,zero,402fc38 <__flash_rwdata_start+0xfffff75c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 402fca8:	e0bffe17 	ldw	r2,-8(fp)
}
 402fcac:	e037883a 	mov	sp,fp
 402fcb0:	df000017 	ldw	fp,0(sp)
 402fcb4:	dec00104 	addi	sp,sp,4
 402fcb8:	f800283a 	ret

0402fcbc <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 402fcbc:	defffb04 	addi	sp,sp,-20
 402fcc0:	df000415 	stw	fp,16(sp)
 402fcc4:	df000404 	addi	fp,sp,16
 402fcc8:	e13ffe15 	stw	r4,-8(fp)
 402fccc:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 402fcd0:	e0bfff17 	ldw	r2,-4(fp)
 402fcd4:	10840070 	cmpltui	r2,r2,4097
 402fcd8:	1000021e 	bne	r2,zero,402fce4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 402fcdc:	00840004 	movi	r2,4096
 402fce0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 402fce4:	e0fffe17 	ldw	r3,-8(fp)
 402fce8:	e0bfff17 	ldw	r2,-4(fp)
 402fcec:	1885883a 	add	r2,r3,r2
 402fcf0:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 402fcf4:	e0bffe17 	ldw	r2,-8(fp)
 402fcf8:	e0bffc15 	stw	r2,-16(fp)
 402fcfc:	00000506 	br	402fd14 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 402fd00:	e0bffc17 	ldw	r2,-16(fp)
 402fd04:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 402fd08:	e0bffc17 	ldw	r2,-16(fp)
 402fd0c:	10800804 	addi	r2,r2,32
 402fd10:	e0bffc15 	stw	r2,-16(fp)
 402fd14:	e0fffc17 	ldw	r3,-16(fp)
 402fd18:	e0bffd17 	ldw	r2,-12(fp)
 402fd1c:	18bff836 	bltu	r3,r2,402fd00 <__flash_rwdata_start+0xfffff824>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 402fd20:	e0bffe17 	ldw	r2,-8(fp)
 402fd24:	108007cc 	andi	r2,r2,31
 402fd28:	10000226 	beq	r2,zero,402fd34 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 402fd2c:	e0bffc17 	ldw	r2,-16(fp)
 402fd30:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 402fd34:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 402fd38:	0001883a 	nop
 402fd3c:	e037883a 	mov	sp,fp
 402fd40:	df000017 	ldw	fp,0(sp)
 402fd44:	dec00104 	addi	sp,sp,4
 402fd48:	f800283a 	ret

0402fd4c <atexit>:
 402fd4c:	200b883a 	mov	r5,r4
 402fd50:	000f883a 	mov	r7,zero
 402fd54:	000d883a 	mov	r6,zero
 402fd58:	0009883a 	mov	r4,zero
 402fd5c:	402fe141 	jmpi	402fe14 <__register_exitproc>

0402fd60 <exit>:
 402fd60:	defffe04 	addi	sp,sp,-8
 402fd64:	000b883a 	mov	r5,zero
 402fd68:	dc000015 	stw	r16,0(sp)
 402fd6c:	dfc00115 	stw	ra,4(sp)
 402fd70:	2021883a 	mov	r16,r4
 402fd74:	402ff2c0 	call	402ff2c <__call_exitprocs>
 402fd78:	00800034 	movhi	r2,0
 402fd7c:	1087ce04 	addi	r2,r2,7992
 402fd80:	11000017 	ldw	r4,0(r2)
 402fd84:	20800f17 	ldw	r2,60(r4)
 402fd88:	10000126 	beq	r2,zero,402fd90 <exit+0x30>
 402fd8c:	103ee83a 	callr	r2
 402fd90:	8009883a 	mov	r4,r16
 402fd94:	40300ac0 	call	40300ac <_exit>

0402fd98 <memcmp>:
 402fd98:	01c000c4 	movi	r7,3
 402fd9c:	3980192e 	bgeu	r7,r6,402fe04 <memcmp+0x6c>
 402fda0:	2144b03a 	or	r2,r4,r5
 402fda4:	11c4703a 	and	r2,r2,r7
 402fda8:	10000f26 	beq	r2,zero,402fde8 <memcmp+0x50>
 402fdac:	20800003 	ldbu	r2,0(r4)
 402fdb0:	28c00003 	ldbu	r3,0(r5)
 402fdb4:	10c0151e 	bne	r2,r3,402fe0c <memcmp+0x74>
 402fdb8:	31bfff84 	addi	r6,r6,-2
 402fdbc:	01ffffc4 	movi	r7,-1
 402fdc0:	00000406 	br	402fdd4 <memcmp+0x3c>
 402fdc4:	20800003 	ldbu	r2,0(r4)
 402fdc8:	28c00003 	ldbu	r3,0(r5)
 402fdcc:	31bfffc4 	addi	r6,r6,-1
 402fdd0:	10c00e1e 	bne	r2,r3,402fe0c <memcmp+0x74>
 402fdd4:	21000044 	addi	r4,r4,1
 402fdd8:	29400044 	addi	r5,r5,1
 402fddc:	31fff91e 	bne	r6,r7,402fdc4 <__flash_rwdata_start+0xfffff8e8>
 402fde0:	0005883a 	mov	r2,zero
 402fde4:	f800283a 	ret
 402fde8:	20c00017 	ldw	r3,0(r4)
 402fdec:	28800017 	ldw	r2,0(r5)
 402fdf0:	18bfee1e 	bne	r3,r2,402fdac <__flash_rwdata_start+0xfffff8d0>
 402fdf4:	31bfff04 	addi	r6,r6,-4
 402fdf8:	21000104 	addi	r4,r4,4
 402fdfc:	29400104 	addi	r5,r5,4
 402fe00:	39bff936 	bltu	r7,r6,402fde8 <__flash_rwdata_start+0xfffff90c>
 402fe04:	303fe91e 	bne	r6,zero,402fdac <__flash_rwdata_start+0xfffff8d0>
 402fe08:	003ff506 	br	402fde0 <__flash_rwdata_start+0xfffff904>
 402fe0c:	10c5c83a 	sub	r2,r2,r3
 402fe10:	f800283a 	ret

0402fe14 <__register_exitproc>:
 402fe14:	defffa04 	addi	sp,sp,-24
 402fe18:	dc000315 	stw	r16,12(sp)
 402fe1c:	04000034 	movhi	r16,0
 402fe20:	8407ce04 	addi	r16,r16,7992
 402fe24:	80c00017 	ldw	r3,0(r16)
 402fe28:	dc400415 	stw	r17,16(sp)
 402fe2c:	dfc00515 	stw	ra,20(sp)
 402fe30:	18805217 	ldw	r2,328(r3)
 402fe34:	2023883a 	mov	r17,r4
 402fe38:	10003726 	beq	r2,zero,402ff18 <__register_exitproc+0x104>
 402fe3c:	10c00117 	ldw	r3,4(r2)
 402fe40:	010007c4 	movi	r4,31
 402fe44:	20c00e16 	blt	r4,r3,402fe80 <__register_exitproc+0x6c>
 402fe48:	1a000044 	addi	r8,r3,1
 402fe4c:	8800221e 	bne	r17,zero,402fed8 <__register_exitproc+0xc4>
 402fe50:	18c00084 	addi	r3,r3,2
 402fe54:	18c7883a 	add	r3,r3,r3
 402fe58:	18c7883a 	add	r3,r3,r3
 402fe5c:	12000115 	stw	r8,4(r2)
 402fe60:	10c7883a 	add	r3,r2,r3
 402fe64:	19400015 	stw	r5,0(r3)
 402fe68:	0005883a 	mov	r2,zero
 402fe6c:	dfc00517 	ldw	ra,20(sp)
 402fe70:	dc400417 	ldw	r17,16(sp)
 402fe74:	dc000317 	ldw	r16,12(sp)
 402fe78:	dec00604 	addi	sp,sp,24
 402fe7c:	f800283a 	ret
 402fe80:	00800034 	movhi	r2,0
 402fe84:	10800004 	addi	r2,r2,0
 402fe88:	10002626 	beq	r2,zero,402ff24 <__register_exitproc+0x110>
 402fe8c:	01006404 	movi	r4,400
 402fe90:	d9400015 	stw	r5,0(sp)
 402fe94:	d9800115 	stw	r6,4(sp)
 402fe98:	d9c00215 	stw	r7,8(sp)
 402fe9c:	00000000 	call	0 <__alt_mem_SDRAM_Controller_Shared>
 402fea0:	d9400017 	ldw	r5,0(sp)
 402fea4:	d9800117 	ldw	r6,4(sp)
 402fea8:	d9c00217 	ldw	r7,8(sp)
 402feac:	10001d26 	beq	r2,zero,402ff24 <__register_exitproc+0x110>
 402feb0:	81000017 	ldw	r4,0(r16)
 402feb4:	10000115 	stw	zero,4(r2)
 402feb8:	02000044 	movi	r8,1
 402febc:	22405217 	ldw	r9,328(r4)
 402fec0:	0007883a 	mov	r3,zero
 402fec4:	12400015 	stw	r9,0(r2)
 402fec8:	20805215 	stw	r2,328(r4)
 402fecc:	10006215 	stw	zero,392(r2)
 402fed0:	10006315 	stw	zero,396(r2)
 402fed4:	883fde26 	beq	r17,zero,402fe50 <__flash_rwdata_start+0xfffff974>
 402fed8:	18c9883a 	add	r4,r3,r3
 402fedc:	2109883a 	add	r4,r4,r4
 402fee0:	1109883a 	add	r4,r2,r4
 402fee4:	21802215 	stw	r6,136(r4)
 402fee8:	01800044 	movi	r6,1
 402feec:	12406217 	ldw	r9,392(r2)
 402fef0:	30cc983a 	sll	r6,r6,r3
 402fef4:	4992b03a 	or	r9,r9,r6
 402fef8:	12406215 	stw	r9,392(r2)
 402fefc:	21c04215 	stw	r7,264(r4)
 402ff00:	01000084 	movi	r4,2
 402ff04:	893fd21e 	bne	r17,r4,402fe50 <__flash_rwdata_start+0xfffff974>
 402ff08:	11006317 	ldw	r4,396(r2)
 402ff0c:	218cb03a 	or	r6,r4,r6
 402ff10:	11806315 	stw	r6,396(r2)
 402ff14:	003fce06 	br	402fe50 <__flash_rwdata_start+0xfffff974>
 402ff18:	18805304 	addi	r2,r3,332
 402ff1c:	18805215 	stw	r2,328(r3)
 402ff20:	003fc606 	br	402fe3c <__flash_rwdata_start+0xfffff960>
 402ff24:	00bfffc4 	movi	r2,-1
 402ff28:	003fd006 	br	402fe6c <__flash_rwdata_start+0xfffff990>

0402ff2c <__call_exitprocs>:
 402ff2c:	defff504 	addi	sp,sp,-44
 402ff30:	df000915 	stw	fp,36(sp)
 402ff34:	dd400615 	stw	r21,24(sp)
 402ff38:	dc800315 	stw	r18,12(sp)
 402ff3c:	dfc00a15 	stw	ra,40(sp)
 402ff40:	ddc00815 	stw	r23,32(sp)
 402ff44:	dd800715 	stw	r22,28(sp)
 402ff48:	dd000515 	stw	r20,20(sp)
 402ff4c:	dcc00415 	stw	r19,16(sp)
 402ff50:	dc400215 	stw	r17,8(sp)
 402ff54:	dc000115 	stw	r16,4(sp)
 402ff58:	d9000015 	stw	r4,0(sp)
 402ff5c:	2839883a 	mov	fp,r5
 402ff60:	04800044 	movi	r18,1
 402ff64:	057fffc4 	movi	r21,-1
 402ff68:	00800034 	movhi	r2,0
 402ff6c:	1087ce04 	addi	r2,r2,7992
 402ff70:	12000017 	ldw	r8,0(r2)
 402ff74:	45005217 	ldw	r20,328(r8)
 402ff78:	44c05204 	addi	r19,r8,328
 402ff7c:	a0001c26 	beq	r20,zero,402fff0 <__call_exitprocs+0xc4>
 402ff80:	a0800117 	ldw	r2,4(r20)
 402ff84:	15ffffc4 	addi	r23,r2,-1
 402ff88:	b8000d16 	blt	r23,zero,402ffc0 <__call_exitprocs+0x94>
 402ff8c:	14000044 	addi	r16,r2,1
 402ff90:	8421883a 	add	r16,r16,r16
 402ff94:	8421883a 	add	r16,r16,r16
 402ff98:	84402004 	addi	r17,r16,128
 402ff9c:	a463883a 	add	r17,r20,r17
 402ffa0:	a421883a 	add	r16,r20,r16
 402ffa4:	e0001e26 	beq	fp,zero,4030020 <__call_exitprocs+0xf4>
 402ffa8:	80804017 	ldw	r2,256(r16)
 402ffac:	e0801c26 	beq	fp,r2,4030020 <__call_exitprocs+0xf4>
 402ffb0:	bdffffc4 	addi	r23,r23,-1
 402ffb4:	843fff04 	addi	r16,r16,-4
 402ffb8:	8c7fff04 	addi	r17,r17,-4
 402ffbc:	bd7ff91e 	bne	r23,r21,402ffa4 <__flash_rwdata_start+0xfffffac8>
 402ffc0:	00800034 	movhi	r2,0
 402ffc4:	10800004 	addi	r2,r2,0
 402ffc8:	10000926 	beq	r2,zero,402fff0 <__call_exitprocs+0xc4>
 402ffcc:	a0800117 	ldw	r2,4(r20)
 402ffd0:	1000301e 	bne	r2,zero,4030094 <__call_exitprocs+0x168>
 402ffd4:	a0800017 	ldw	r2,0(r20)
 402ffd8:	10003226 	beq	r2,zero,40300a4 <__call_exitprocs+0x178>
 402ffdc:	a009883a 	mov	r4,r20
 402ffe0:	98800015 	stw	r2,0(r19)
 402ffe4:	00000000 	call	0 <__alt_mem_SDRAM_Controller_Shared>
 402ffe8:	9d000017 	ldw	r20,0(r19)
 402ffec:	a03fe41e 	bne	r20,zero,402ff80 <__flash_rwdata_start+0xfffffaa4>
 402fff0:	dfc00a17 	ldw	ra,40(sp)
 402fff4:	df000917 	ldw	fp,36(sp)
 402fff8:	ddc00817 	ldw	r23,32(sp)
 402fffc:	dd800717 	ldw	r22,28(sp)
 4030000:	dd400617 	ldw	r21,24(sp)
 4030004:	dd000517 	ldw	r20,20(sp)
 4030008:	dcc00417 	ldw	r19,16(sp)
 403000c:	dc800317 	ldw	r18,12(sp)
 4030010:	dc400217 	ldw	r17,8(sp)
 4030014:	dc000117 	ldw	r16,4(sp)
 4030018:	dec00b04 	addi	sp,sp,44
 403001c:	f800283a 	ret
 4030020:	a0800117 	ldw	r2,4(r20)
 4030024:	80c00017 	ldw	r3,0(r16)
 4030028:	10bfffc4 	addi	r2,r2,-1
 403002c:	15c01426 	beq	r2,r23,4030080 <__call_exitprocs+0x154>
 4030030:	80000015 	stw	zero,0(r16)
 4030034:	183fde26 	beq	r3,zero,402ffb0 <__flash_rwdata_start+0xfffffad4>
 4030038:	95c8983a 	sll	r4,r18,r23
 403003c:	a0806217 	ldw	r2,392(r20)
 4030040:	a5800117 	ldw	r22,4(r20)
 4030044:	2084703a 	and	r2,r4,r2
 4030048:	10000b26 	beq	r2,zero,4030078 <__call_exitprocs+0x14c>
 403004c:	a0806317 	ldw	r2,396(r20)
 4030050:	2088703a 	and	r4,r4,r2
 4030054:	20000c1e 	bne	r4,zero,4030088 <__call_exitprocs+0x15c>
 4030058:	89400017 	ldw	r5,0(r17)
 403005c:	d9000017 	ldw	r4,0(sp)
 4030060:	183ee83a 	callr	r3
 4030064:	a0800117 	ldw	r2,4(r20)
 4030068:	15bfbf1e 	bne	r2,r22,402ff68 <__flash_rwdata_start+0xfffffa8c>
 403006c:	98800017 	ldw	r2,0(r19)
 4030070:	153fcf26 	beq	r2,r20,402ffb0 <__flash_rwdata_start+0xfffffad4>
 4030074:	003fbc06 	br	402ff68 <__flash_rwdata_start+0xfffffa8c>
 4030078:	183ee83a 	callr	r3
 403007c:	003ff906 	br	4030064 <__flash_rwdata_start+0xfffffb88>
 4030080:	a5c00115 	stw	r23,4(r20)
 4030084:	003feb06 	br	4030034 <__flash_rwdata_start+0xfffffb58>
 4030088:	89000017 	ldw	r4,0(r17)
 403008c:	183ee83a 	callr	r3
 4030090:	003ff406 	br	4030064 <__flash_rwdata_start+0xfffffb88>
 4030094:	a0800017 	ldw	r2,0(r20)
 4030098:	a027883a 	mov	r19,r20
 403009c:	1029883a 	mov	r20,r2
 40300a0:	003fb606 	br	402ff7c <__flash_rwdata_start+0xfffffaa0>
 40300a4:	0005883a 	mov	r2,zero
 40300a8:	003ffb06 	br	4030098 <__flash_rwdata_start+0xfffffbbc>

040300ac <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 40300ac:	defffd04 	addi	sp,sp,-12
 40300b0:	df000215 	stw	fp,8(sp)
 40300b4:	df000204 	addi	fp,sp,8
 40300b8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 40300bc:	0001883a 	nop
 40300c0:	e0bfff17 	ldw	r2,-4(fp)
 40300c4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 40300c8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 40300cc:	10000226 	beq	r2,zero,40300d8 <_exit+0x2c>
    ALT_SIM_FAIL();
 40300d0:	002af070 	cmpltui	zero,zero,43969
 40300d4:	00000106 	br	40300dc <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 40300d8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 40300dc:	003fff06 	br	40300dc <__flash_rwdata_start+0xfffffc00>
